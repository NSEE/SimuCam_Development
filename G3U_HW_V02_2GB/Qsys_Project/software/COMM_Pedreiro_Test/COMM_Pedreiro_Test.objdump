
COMM_Pedreiro_Test.elf:     file format elf32-littlenios2
COMM_Pedreiro_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x41100244

Program Header:
    LOAD off    0x00001020 vaddr 0x41100020 paddr 0x41100020 align 2**12
         filesz 0x0001dddc memsz 0x0001e398 flags rwx
    LOAD off    0x0001f000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0001f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  41100020  41100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a8a8  41100244  41100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001648  4111aaec  4111aaec  0001baec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc8  4111c134  4111c134  0001d134  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000005bc  4111ddfc  4111ddfc  0001edfc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  4111e3b8  4111e3b8  0001f000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  0001f000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001f000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001280  00000000  00000000  0001f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002cfd4  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b7bc  00000000  00000000  0004d27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ef70  00000000  00000000  00058a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000042f4  00000000  00000000  000679a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000065e1  00000000  00000000  0006bc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000192ee  00000000  00000000  0007227d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0008b56c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ab0  00000000  00000000  0008b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00092e25  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00092e28  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00092e34  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00092e35  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00092e36  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00092e3a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00092e3e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00092e42  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00092e4d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00092e58  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00092e63  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  00092e74  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0024f058  00000000  00000000  00092ec7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
41100020 l    d  .exceptions	00000000 .exceptions
41100244 l    d  .text	00000000 .text
4111aaec l    d  .rodata	00000000 .rodata
4111c134 l    d  .rwdata	00000000 .rwdata
4111ddfc l    d  .bss	00000000 .bss
4111e3b8 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../COMM_Pedreiro_Test_bsp//obj/HAL/src/crt0.o
41100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
4111dd90 l     O .rwdata	00000001 io_value
41100404 l     F .text	00000074 ctrl_io_lvds_drive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
4111de0c l     O .bss	00000004 hold_context
411022ec l     F .text	00000050 read_reg
41102298 l     F .text	00000054 write_reg
00000000 l    df *ABS*	00000000 spwc.c
00000000 l    df *ABS*	00000000 tran.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 eth.c
00000000 l    df *ABS*	00000000 pgen.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 mebxhwt01.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
4111bd12 l     O .rodata	00000010 zeroes.4404
4110ba24 l     F .text	000000bc __sbprintf
4111bd22 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
4110bc34 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
4110d764 l     F .text	00000008 __fp_unlock
4110d778 l     F .text	0000019c __sinit.part.1
4110d914 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
4111c134 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
4111c578 l     O .rwdata	00000020 lc_ctype_charset
4111c558 l     O .rwdata	00000020 lc_message_charset
4111c598 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
4111bd54 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
41110d30 l     F .text	000000fc __sprint_r.part.0
4111be88 l     O .rodata	00000010 blanks.4348
4111be78 l     O .rodata	00000010 zeroes.4349
411122bc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
411157fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
41115928 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
41115954 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
41115bc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
41115ca0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
41115e74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
4111dde8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
41116294 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
411163c8 l     F .text	00000034 alt_dev_reg
4111cb80 l     O .rwdata	00001060 jtag_uart_0
4111dbe0 l     O .rwdata	000000c4 rs232_uart
4111dca4 l     O .rwdata	00000060 dma_DDR_M0
4111dd04 l     O .rwdata	00000060 dma_DDR_M1
4111dd64 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
41116740 l     F .text	0000020c altera_avalon_jtag_uart_irq
4111694c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
41116f84 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
41117234 l     F .text	0000009c altera_avalon_uart_irq
411172d0 l     F .text	000000e4 altera_avalon_uart_rxirq
411173b4 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
41117550 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
41117768 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
41117950 l     F .text	0000003c alt_get_errno
4111798c l     F .text	00000094 alt_msgdma_write_standard_descriptor
41117a20 l     F .text	0000012c alt_msgdma_write_extended_descriptor
41117b4c l     F .text	00000184 alt_msgdma_irq
41117cd0 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
41117d5c l     F .text	00000154 alt_msgdma_construct_extended_descriptor
41117eb0 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
41118180 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
411187c8 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
4111886c l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
41119a20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
41119ef0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
4111a030 l     F .text	0000003c alt_get_errno
4111a06c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
4111de8c g     O .bss	00000004 alt_instruction_exception_handler
411196dc g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
4110968c g     F .text	00000018 putchar
4110233c g     F .text	000000e0 SPWC_WRITE_REG32
4111020c g     F .text	00000074 _mprec_log10
411038f0 g     F .text	000000e0 TRAN_READ_REG32
411005d0 g     F .text	00000100 I2C_Read
411102f8 g     F .text	0000008c __any_on
411129b0 g     F .text	00000054 _isatty_r
4111bd60 g     O .rodata	00000028 __mprec_tinytens
41115db0 g     F .text	0000007c alt_main
41100318 g     F .text	00000034 disable_lvds_board
411096a4 g     F .text	000000c0 _puts_r
4111dd9c g     O .rwdata	00000004 ul_spwc_c_spacewire_link_control_status_register_value
4111e2b8 g     O .bss	00000100 alt_irq
4111de40 g     O .bss	00000004 ul_tran_d_interface_control_status_register_value
41112a04 g     F .text	00000060 _lseek_r
4111dda8 g     O .rwdata	00000004 ul_spwc_f_spacewire_link_control_status_register_value
41114aa4 g     F .text	00000088 .hidden __eqdf2
41106024 g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_FULL
41101704 g     F .text	00000044 sync_status_error_code
41105580 g     F .text	00000398 DDR2_MEMORY_READ_TEST
411015b4 g     F .text	00000044 SSDP_UPDATE
411185a8 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
4111de14 g     O .bss	00000004 ul_spwc_a_interface_control_status_register_value
4111e3b8 g       *ABS*	00000000 __alt_heap_start
4111de08 g     O .bss	00000001 SspdConfigControl
41109648 g     F .text	0000003c printf
41112ac4 g     F .text	0000009c _wcrtomb_r
41101f08 g     F .text	0000006c sync_ctr_chg_out_enable
41110bf0 g     F .text	0000005c __sseek
4110dab4 g     F .text	00000010 __sinit
41112378 g     F .text	00000140 __swbuf_r
4110e57c g     F .text	0000007c _setlocale_r
4111de04 g     O .bss	00000004 LedsPainelControl
4110d91c g     F .text	00000068 __sfmoreglue
41115e50 g     F .text	00000024 __malloc_unlock
411062f8 g     F .text	0000020c DMA_MULTIPLE_TRANSFER
4110804c g     F .text	00000440 .hidden __divsf3
41103a9c g     F .text	000001f4 v_Transparent_Interface_Enable_Control
41104658 g     F .text	000002a8 ui_Transparent_Interface_Get_SpaceWire_Data
4111de3c g     O .bss	00000004 ul_tran_c_interface_control_status_register_value
41101b30 g     F .text	0000004c sync_ctr_reset
41102dd8 g     F .text	00000058 ul_SpaceWire_Interface_Interrupts_Flags_Read
4110f104 g     F .text	0000015c memmove
41103810 g     F .text	000000e0 TRAN_WRITE_REG32
4110da9c g     F .text	00000018 _cleanup
4110f388 g     F .text	000000a8 _Balloc
411184f8 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
4111de10 g     O .bss	00000001 n
411060ac g     F .text	000000a0 DMA_DISPATCHER_STOP
41114b2c g     F .text	000000dc .hidden __gtdf2
4111a4ec g     F .text	00000024 altera_nios2_gen2_irq_init
4110092c g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
41106a58 g     F .text	000000f0 TEMP_Read
41101c14 g     F .text	0000006c sync_ctr_sync_out_enable
41112954 g     F .text	0000005c _fstat_r
4111de70 g     O .bss	00000004 errno
41110b6c g     F .text	00000008 __seofread
411002b0 g     F .text	00000034 disable_iso_drivers
411032f8 g     F .text	00000070 uc_SpaceWire_Interface_Get_TimeCode
4111de7c g     O .bss	00000004 alt_argv
41125d90 g       *ABS*	00000000 _gp
41116264 g     F .text	00000030 usleep
41103248 g     F .text	0000005c v_SpaceWire_Interface_Send_TimeCode
41103198 g     F .text	00000058 ul_SpaceWire_Interface_Link_Error_Read
41119018 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
4111ca00 g     O .rwdata	00000180 alt_fd_list
41101784 g     F .text	00000038 sync_config_mbt
41109684 g     F .text	00000008 _putchar_r
41119bc0 g     F .text	00000090 alt_find_dev
411094d0 g     F .text	00000148 memcpy
411031f0 g     F .text	00000058 ul_SpaceWire_Interface_Link_Status_Read
4110d76c g     F .text	0000000c _cleanup_r
41115678 g     F .text	000000dc .hidden __floatsidf
4111de4c g     O .bss	00000004 ul_tran_g_interface_control_status_register_value
41119fb4 g     F .text	0000007c alt_io_redirect
41114c08 g     F .text	000000f4 .hidden __ltdf2
4111aaec g       *ABS*	00000000 __DTOR_END__
41119438 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
41119718 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
41119688 g     F .text	00000054 alt_msgdma_register_callback
4111de30 g     O .bss	00000004 ul_spwc_h_interface_control_status_register_value
41109764 g     F .text	00000014 puts
4111a6bc g     F .text	0000009c alt_exception_cause_generated_bad_addr
41110a50 g     F .text	00000074 __fpclassifyd
4111ddb0 g     O .rwdata	00000004 ul_spwc_h_spacewire_link_control_status_register_value
41110168 g     F .text	000000a4 __ratio
41102e30 g     F .text	00000174 v_SpaceWire_Interface_Interrupts_Flags_Clear
411122a0 g     F .text	0000001c __vfiprintf_internal
41116b44 g     F .text	0000021c altera_avalon_jtag_uart_read
41118cf8 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
41109618 g     F .text	00000030 _printf_r
41113854 g     F .text	00000064 .hidden __udivsi3
41115bfc g     F .text	000000a4 isatty
4111de00 g     O .bss	00000001 LedsBoardControl
41101748 g     F .text	0000003c sync_status_cycle_number
411002e4 g     F .text	00000034 enable_lvds_board
41104280 g     F .text	00000054 b_Transparent_Interface_TX_FIFO_Status_Full
4111bdb0 g     O .rodata	000000c8 __mprec_tens
4111de2c g     O .bss	00000004 ul_spwc_g_interface_control_status_register_value
4111de24 g     O .bss	00000004 ul_spwc_e_interface_control_status_register_value
4110e5f8 g     F .text	0000000c __locale_charset
411066ac g     F .text	00000034 v_Pattern_Generator_Start
411006d0 g     F .text	00000158 I2C_MultipleRead
4111de6c g     O .bss	00000004 __malloc_top_pad
4111ddbc g     O .rwdata	00000004 __mb_cur_max
4110e628 g     F .text	0000000c _localeconv_r
41102fa4 g     F .text	000001f4 v_SpaceWire_Interface_Link_Control
4110f794 g     F .text	0000003c __i2b
4110df38 g     F .text	000004bc __sfvwrite_r
41110ac4 g     F .text	00000054 _sbrk_r
4110027c g     F .text	00000034 enable_iso_drivers
41112a64 g     F .text	00000060 _read_r
4111dddc g     O .rwdata	00000004 alt_max_fd
41112648 g     F .text	000000f0 _fclose_r
41101e9c g     F .text	0000006c sync_ctr_chf_out_enable
4110d734 g     F .text	00000030 fflush
4111de68 g     O .bss	00000004 __malloc_max_sbrked_mem
41101dc4 g     F .text	0000006c sync_ctr_chd_out_enable
41115a40 g     F .text	00000180 alt_irq_register
411091b4 g     F .text	00000110 .hidden __extendsfdf2
411015f8 g     F .text	00000038 handle_irq
41100478 g     F .text	00000080 I2C_TestAdress
41113910 g     F .text	000008ac .hidden __adddf3
4110ff10 g     F .text	0000010c __b2d
41118a58 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
41113224 g     F .text	00000538 .hidden __umoddi3
41115cdc g     F .text	000000d4 lseek
4111ddb4 g     O .rwdata	00000004 _global_impure_ptr
411042d4 g     F .text	00000054 b_Transparent_Interface_TX_FIFO_Status_Empty
411104ec g     F .text	00000564 _realloc_r
4111e3b8 g       *ABS*	00000000 __bss_end
41119e00 g     F .text	000000f0 alt_iic_isr_register
41102ae4 g     F .text	00000100 v_SpaceWire_Interface_Force_Reset
4111615c g     F .text	00000108 alt_tick
41102124 g     F .text	0000006c sync_int_flag_clear_blank
4111951c g     F .text	0000016c alt_msgdma_init
41112cac g     F .text	00000578 .hidden __udivdi3
411128b0 g     F .text	00000024 _fputwc_r
4111bd88 g     O .rodata	00000028 __mprec_bigtens
4110f578 g     F .text	00000104 __s2b
41115754 g     F .text	000000a8 .hidden __floatunsidf
4110fc50 g     F .text	00000060 __mcmp
41117188 g     F .text	000000ac altera_avalon_uart_init
41119790 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
4110dad4 g     F .text	00000018 __fp_lock_all
41119db4 g     F .text	0000004c alt_ic_irq_enabled
411004f8 g     F .text	000000d8 I2C_Write
411033c8 g     F .text	000001b0 b_SpaceWire_Interface_Set_TX_Div
4110665c g     F .text	00000050 ul_Pattern_Generator_Read_Register
411160c0 g     F .text	0000009c alt_alarm_stop
411018d0 g     F .text	00000068 sync_config_n_cycles
4111de74 g     O .bss	00000004 alt_irq_active
41104378 g     F .text	00000198 b_Transparent_Interface_Switch_Channel
411000fc g     F .exceptions	000000d4 alt_irq_handler
4111c9d8 g     O .rwdata	00000028 alt_dev_null
41118690 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
41101fe0 g     F .text	0000006c sync_int_enable_error
411036bc g     F .text	000000ac b_SpaceWire_Interface_Read_RX_Data
41100828 g     F .text	0000008c i2c_start
41104140 g     F .text	00000054 b_Transparent_Interface_RX_FIFO_Status_Full
411193ac g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
41103768 g     F .text	000000a8 ui_SpaceWire_Interface_Get_SpaceWire_Data
41115908 g     F .text	00000020 alt_dcache_flush_all
4110f67c g     F .text	00000068 __hi0bits
411155f8 g     F .text	00000080 .hidden __fixdfsi
411014ec g     F .text	000000c8 SSDP_CONFIG
41100c2c g     F .text	00000070 LEDS_PAINEL_DRIVE
41101ae4 g     F .text	0000004c sync_ctr_start
41100000 g       *ABS*	00000000 __alt_mem_onchip_memory
4111ddd4 g     O .rwdata	00000008 alt_dev_list
411162d0 g     F .text	000000f8 write
41110384 g     F .text	000000a0 _putc_r
41115990 g     F .text	000000b0 fstat
411061ec g     F .text	0000010c DMA_SINGLE_TRANSFER
41107e3c g     F .text	00000050 _reg_write
41114c08 g     F .text	000000f4 .hidden __ledf2
41103a3c g     F .text	00000060 ul_Transparent_Interface_Read_Register
4110117c g     F .text	00000050 v_spi_start
4110f9c8 g     F .text	00000140 __pow5mult
41110e44 g     F .text	0000145c ___vfiprintf_internal_r
4111de60 g     O .bss	00000004 __nlocale_changed
411138b8 g     F .text	00000058 .hidden __umodsi3
41101630 g     F .text	00000044 init_interrupt
4110515c g     F .text	00000424 DDR2_MEMORY_WRITE_TEST
41118ab0 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
4111e3b8 g       *ABS*	00000000 end
411177a4 g     F .text	000001ac altera_avalon_uart_write
41102be4 g     F .text	000001f4 v_SpaceWire_Interface_Interrupts_Enable_Control
41116680 g     F .text	000000c0 altera_avalon_jtag_uart_init
4111de38 g     O .bss	00000004 ul_tran_b_interface_control_status_register_value
411001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
41101e30 g     F .text	0000006c sync_ctr_che_out_enable
4111aaec g       *ABS*	00000000 __CTOR_LIST__
411fa000 g       *ABS*	00000000 __alt_stack_pointer
411041e4 g     F .text	00000044 v_Transparent_Interface_TX_FIFO_Reset
41116ffc g     F .text	0000007c alt_avalon_timer_sc_init
411170d8 g     F .text	00000060 altera_avalon_uart_write_fd
4110946c g     F .text	00000064 .hidden __clzsi2
411066e0 g     F .text	00000034 v_Pattern_Generator_Stop
4111de1c g     O .bss	00000004 ul_spwc_c_interface_control_status_register_value
41117138 g     F .text	00000050 altera_avalon_uart_close_fd
41116d60 g     F .text	00000224 altera_avalon_jtag_uart_write
41103e84 g     F .text	00000058 ul_Transparent_Interface_Interrupts_Flags_Read
4110dac4 g     F .text	00000004 __sfp_lock_acquire
41106b48 g     F .text	00000040 sense_log_temp
4110f020 g     F .text	000000e4 memchr
41109810 g     F .text	000021f8 ___vfprintf_internal_r
41104228 g     F .text	00000058 ul_Transparent_Interface_TX_FIFO_Status_Read
4110dc28 g     F .text	00000310 _free_r
4111a284 g     F .text	0000022c alt_printf
41107edc g     F .text	00000104 _print_codec_status
4111dd94 g     O .rwdata	00000004 ul_spwc_a_spacewire_link_control_status_register_value
4110e604 g     F .text	00000010 __locale_mb_cur_max
4110614c g     F .text	000000a0 DMA_DISPATCHER_RESET
4111a938 g     F .text	00000180 __call_exitprocs
41101a08 g     F .text	00000034 sync_read_config_general
41104900 g     F .text	000002a4 DDR2_EEPROM_TEST
411050d4 g     F .text	00000088 DDR2_SWITCH_MEMORY
4111de5c g     O .bss	00000004 __mlocale_changed
4111ddc0 g     O .rwdata	00000004 __malloc_sbrk_base
41100244 g     F .text	00000038 _start
4111de84 g     O .bss	00000004 _alt_tick_rate
41101a74 g     F .text	00000070 sync_ctr_extn_int
41101bc8 g     F .text	0000004c sync_ctr_err_inj
4110fb08 g     F .text	00000148 __lshift
41118550 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
4111de88 g     O .bss	00000004 _alt_nticks
41115eb0 g     F .text	000000fc read
41116434 g     F .text	000000e8 alt_sys_init
41106748 g     F .text	00000048 Pattern_Generator_Status
41108888 g     F .text	00000124 .hidden __floatsisf
41102568 g     F .text	00000060 ul_SpaceWire_Interface_Read_Register
4111a820 g     F .text	00000118 __register_exitproc
41106600 g     F .text	0000005c b_Pattern_Generator_Write_Register
4110f7d0 g     F .text	000001f8 __multiply
411169ec g     F .text	00000068 altera_avalon_jtag_uart_close
41101334 g     F .text	00000050 v_spi_end
4111de90 g     O .bss	00000028 __malloc_current_mallinfo
4111001c g     F .text	0000014c __d2b
41101384 g     F .text	00000168 RTCC_SPI_R_MAC
4111651c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
41101f74 g     F .text	0000006c sync_ctr_chh_out_enable
4111a618 g     F .text	000000a4 alt_get_fd
41105f40 g     F .text	0000005c DMA_OPEN_DEVICE
411198f8 g     F .text	00000128 alt_busy_sleep
4111de20 g     O .bss	00000004 ul_spwc_d_interface_control_status_register_value
41107fe0 g     F .text	0000006c _split_codec_status
41112530 g     F .text	00000054 _close_r
41105918 g     F .text	000002e0 DDR2_MEMORY_RANDOM_WRITE_TEST
4111de18 g     O .bss	00000004 ul_spwc_b_interface_control_status_register_value
41118a00 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
4111a7a4 g     F .text	0000007c memcmp
411165dc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
4111e3b8 g       *ABS*	00000000 __alt_stack_base
4111662c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
41118b08 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
411017f4 g     F .text	00000038 sync_config_per
4110bae0 g     F .text	00000154 __swsetup_r
411073bc g     F .text	00000360 TestLeds
411141bc g     F .text	000008e8 .hidden __divdf3
4111de48 g     O .bss	00000004 ul_tran_f_interface_control_status_register_value
4110d984 g     F .text	00000118 __sfp
41106068 g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_EMPTY
41110280 g     F .text	00000078 __copybits
41101b7c g     F .text	0000004c sync_ctr_one_shot
4111c5d0 g     O .rwdata	00000408 __malloc_av_
4110dad0 g     F .text	00000004 __sinit_lock_release
411008b4 g     F .text	00000078 i2c_stop
41108a9c g     F .text	00000718 .hidden __muldf3
41110b18 g     F .text	00000054 __sread
411016c0 g     F .text	00000044 sync_status_state
4111a510 g     F .text	00000108 alt_find_file
41100bb4 g     F .text	00000078 LEDS_BOARD_DRIVE
41119a5c g     F .text	000000a4 alt_dev_llist_insert
41115e2c g     F .text	00000024 __malloc_lock
41116010 g     F .text	000000b0 sbrk
4110d6d8 g     F .text	0000005c _fflush_r
41112584 g     F .text	000000c4 _calloc_r
41105f9c g     F .text	00000044 DMA_CONFIG
4111ddfc g       *ABS*	00000000 __bss_start
411065b0 g     F .text	00000050 PGEN_READ_REG32
4110f260 g     F .text	00000128 memset
41104094 g     F .text	00000058 ul_Transparent_Interface_RX_FIFO_Status_Read
411194c4 g     F .text	00000058 alt_msgdma_open
41104ba4 g     F .text	00000530 DDR2_EEPROM_DUMP
4110722c g     F .text	000000e8 main
4111de80 g     O .bss	00000004 alt_envp
4111de64 g     O .bss	00000004 __malloc_max_total_mem
41118de8 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
41106714 g     F .text	00000034 v_Pattern_Generator_Reset
4111657c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
4110681c g     F .text	0000023c POWER_Read
41100a5c g     F .text	00000158 i2c_read
411124b8 g     F .text	00000018 __swbuf
411020b8 g     F .text	0000006c sync_int_flag_clear_error
41110c4c g     F .text	00000008 __sclose
411fa000 g       *ABS*	00000000 __alt_heap_limit
4110204c g     F .text	0000006c sync_int_enable_blank
41112738 g     F .text	00000014 fclose
411092c4 g     F .text	000001a8 .hidden __truncdfsf2
4111dda0 g     O .rwdata	00000004 ul_spwc_d_spacewire_link_control_status_register_value
4110be34 g     F .text	00001688 _dtoa_r
411190ec g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
4110e814 g     F .text	0000080c _malloc_r
41112c20 g     F .text	00000030 __ascii_wctomb
41101cec g     F .text	0000006c sync_ctr_chb_out_enable
4111dde0 g     O .rwdata	00000004 alt_errno
41118c40 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
41100c9c g     F .text	000004e0 POWER_SPI_RW
4110e3f4 g     F .text	000000c4 _fwalk
4111de54 g     O .bss	00000004 InitialState
4110241c g     F .text	000000e0 SPWC_READ_REG32
41102230 g     F .text	00000034 sync_read_ctr
41106530 g     F .text	00000030 v_Eth_Release_Reset
41110424 g     F .text	000000c8 putc
4111375c g     F .text	00000084 .hidden __divsi3
4110db04 g     F .text	00000124 _malloc_trim_r
4111aaec g       *ABS*	00000000 __CTOR_END__
4110848c g     F .text	000003fc .hidden __mulsf3
4111ddfc g     O .bss	00000004 pnt_memory
41110c54 g     F .text	000000dc strcmp
4111aaec g       *ABS*	00000000 __DTOR_LIST__
41107e8c g     F .text	00000050 _reg_read
41114aa4 g     F .text	00000088 .hidden __nedf2
411163fc g     F .text	00000038 alt_irq_init
41102190 g     F .text	00000050 sync_int_flag_error
41115fac g     F .text	00000064 alt_release_fd
41119754 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
4111bbcb g     O .rodata	00000100 .hidden __clz_tab
41101d58 g     F .text	0000006c sync_ctr_chc_out_enable
4111de58 g     O .bss	00000004 _PathLocale
4111a758 g     F .text	00000014 atexit
411124d0 g     F .text	00000060 _write_r
4110e634 g     F .text	00000018 setlocale
41118ba8 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
4111ddb8 g     O .rwdata	00000004 _impure_ptr
4111dda4 g     O .rwdata	00000004 ul_spwc_e_spacewire_link_control_status_register_value
4111de78 g     O .bss	00000004 alt_argc
4110d4bc g     F .text	0000021c __sflush_r
4111deb8 g     O .bss	00000400 szData
41119b60 g     F .text	00000060 _do_dtors
4110e620 g     F .text	00000008 __locale_cjk_lang
41106b88 g     F .text	000006a4 sense_log
41101674 g     F .text	0000004c sync_status_extn_int
41100020 g       .exceptions	00000000 alt_irq_entry
4110feac g     F .text	00000064 __ulp
4110daec g     F .text	00000018 __fp_unlock_all
4111ddcc g     O .rwdata	00000008 alt_fs_list
4111de50 g     O .bss	00000004 ul_tran_h_interface_control_status_register_value
4111de34 g     O .bss	00000004 ul_tran_a_interface_control_status_register_value
411027bc g     F .text	00000328 b_SpaceWire_Interface_Mode_Control
411040ec g     F .text	00000054 b_Transparent_Interface_RX_FIFO_Status_Empty
41101864 g     F .text	0000006c sync_config_polarity
41104050 g     F .text	00000044 v_Transparent_Interface_RX_FIFO_Reset
4110196c g     F .text	00000034 sync_read_config_bt
4110e64c g     F .text	0000000c localeconv
41101938 g     F .text	00000034 sync_read_config_mbt
41119c50 g     F .text	00000050 alt_ic_isr_register
4111de44 g     O .bss	00000004 ul_tran_e_interface_control_status_register_value
4111dd98 g     O .rwdata	00000004 ul_spwc_b_spacewire_link_control_status_register_value
4111ddfc g       *ABS*	00000000 _edata
41105bf8 g     F .text	000002d0 DDR2_MEMORY_RANDOM_READ_TEST
41117078 g     F .text	00000060 altera_avalon_uart_read_fd
4111e3b8 g       *ABS*	00000000 _end
41104328 g     F .text	00000050 uc_Transparent_Interface_TX_FIFO_Status_Used
4111274c g     F .text	00000164 __fputwc
41116a54 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
41107314 g     F .text	00000054 COMM_WRITE_REG32
411025c8 g     F .text	000001f4 b_SpaceWire_Interface_Enable_Control
41106790 g     F .text	0000008c Pattern_Generator_Configure_Initial_State
41119d28 g     F .text	0000008c alt_ic_irq_disable
4110182c g     F .text	00000038 sync_config_ost
41110b74 g     F .text	0000007c __swrite
41106504 g     F .text	0000002c v_Eth_Hold_Reset
4111ddc4 g     O .rwdata	00000004 __malloc_trim_threshold
4110e614 g     F .text	0000000c __locale_msgcharset
4111a76c g     F .text	00000038 exit
4110e4b8 g     F .text	000000c4 _fwalk_reent
41118f80 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
411089ac g     F .text	000000f0 .hidden __floatunsisf
4110fcb0 g     F .text	000001fc __mdiff
411137e0 g     F .text	00000074 .hidden __modsi3
41107aac g     F .text	00000390 TestDMA_M2_M1
411fa000 g       *ABS*	00000000 __alt_data_end
41100020 g     F .exceptions	00000000 alt_exception
4110dac8 g     F .text	00000004 __sfp_lock_release
41118720 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
41107368 g     F .text	00000054 COMM_READ_REG32
411032a4 g     F .text	00000054 b_SpaceWire_Interface_TimeCode_Arrived
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
41102264 g     F .text	00000034 sync_read_status
41103600 g     F .text	000000bc b_SpaceWire_Interface_Send_SpaceWire_Data
41118600 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
411019d4 g     F .text	00000034 sync_read_config_ost
411174fc g     F .text	00000054 altera_avalon_uart_close
411039d0 g     F .text	0000006c b_Transparent_Interface_Write_Register
4111aab8 g     F .text	00000034 _exit
411197cc g     F .text	0000012c alt_alarm_start
4110e658 g     F .text	000001bc __smakebuf_r
41104510 g     F .text	00000148 b_Transparent_Interface_Send_SpaceWire_Data
411017bc g     F .text	00000038 sync_config_bt
4111ddf4 g     O .rwdata	00000008 alt_msgdma_list
41109778 g     F .text	00000098 strlen
41101288 g     F .text	000000ac uc_spi_get_byte
41104194 g     F .text	00000050 uc_Transparent_Interface_RX_FIFO_Status_Used
4111a130 g     F .text	00000154 open
41114b2c g     F .text	000000dc .hidden __gedf2
4111de28 g     O .bss	00000004 ul_spwc_f_interface_control_status_register_value
4111a4b0 g     F .text	0000003c alt_putchar
411021e0 g     F .text	00000050 sync_int_flag_blank
4111ddc8 g     O .rwdata	00000004 __wctomb
41110e2c g     F .text	00000018 __sprint_r
41103368 g     F .text	00000060 uc_SpaceWire_Interface_Get_TX_Div
4111ddac g     O .rwdata	00000004 ul_spwc_g_spacewire_link_control_status_register_value
411019a0 g     F .text	00000034 sync_read_config_per
411024fc g     F .text	0000006c b_SpaceWire_Interface_Write_Register
4111dde4 g     O .rwdata	00000004 alt_priority_mask
411011cc g     F .text	000000bc v_spi_send_byte
41119ca0 g     F .text	00000088 alt_ic_irq_enable
4110ba08 g     F .text	0000001c __vfprintf_internal
41106560 g     F .text	00000050 PGEN_WRITE_REG32
4111758c g     F .text	000001dc altera_avalon_uart_read
41112c50 g     F .text	0000005c _wctomb_r
41103edc g     F .text	00000174 v_Transparent_Interface_Interrupts_Flags_Clear
41114cfc g     F .text	000008fc .hidden __subdf3
4110771c g     F .text	00000390 TestDMA_M1_M2
41101a3c g     F .text	00000038 sync_err_inj
4110f6e4 g     F .text	000000b0 __lo0bits
4111ddec g     O .rwdata	00000008 alt_alarm_list
41119b00 g     F .text	00000060 _do_ctors
41105fe0 g     F .text	00000044 DMA_BUSY
41112b60 g     F .text	000000c0 wcrtomb
41115838 g     F .text	000000d0 close
41103c90 g     F .text	000001f4 v_Transparent_Interface_Interrupts_Enable_Control
41103578 g     F .text	00000088 b_SpaceWire_Interface_Write_TX_Data
41105ec8 g     F .text	00000078 xorshift32
411128d4 g     F .text	00000080 fputwc
4110dacc g     F .text	00000004 __sinit_lock_acquire
4110f458 g     F .text	00000120 __multadd
4110034c g     F .text	000000b8 set_pre_emphasys
4110f430 g     F .text	00000028 _Bfree
41101c80 g     F .text	0000006c sync_ctr_cha_out_enable



Disassembly of section .exceptions:

41100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
41100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
41100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
41100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
4110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
41100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
41100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
41100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
4110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
41100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
41100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
41100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
4110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
41100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
41100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
41100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
4110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
41100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
41100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
41100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
4110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
41100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
41100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
41100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
4110007c:	10000326 	beq	r2,zero,4110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
41100080:	20000226 	beq	r4,zero,4110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
41100084:	11000fc0 	call	411000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
41100088:	00000706 	br	411000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
4110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
41100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
41100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
41100098:	11001d00 	call	411001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
4110009c:	1000021e 	bne	r2,zero,411000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
411000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
411000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
411000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
411000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
411000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
411000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
411000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
411000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
411000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
411000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
411000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
411000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
411000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
411000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
411000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
411000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
411000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
411000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
411000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
411000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
411000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
411000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
411000f8:	ef80083a 	eret

411000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
411000fc:	defff904 	addi	sp,sp,-28
41100100:	dfc00615 	stw	ra,24(sp)
41100104:	df000515 	stw	fp,20(sp)
41100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
4110010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
41100110:	0005313a 	rdctl	r2,ipending
41100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
41100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
4110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
41100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
41100124:	00800044 	movi	r2,1
41100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
4110012c:	e0fffb17 	ldw	r3,-20(fp)
41100130:	e0bffc17 	ldw	r2,-16(fp)
41100134:	1884703a 	and	r2,r3,r2
41100138:	10001426 	beq	r2,zero,4110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
4110013c:	009044b4 	movhi	r2,16658
41100140:	10b8ae04 	addi	r2,r2,-7496
41100144:	e0fffd17 	ldw	r3,-12(fp)
41100148:	180690fa 	slli	r3,r3,3
4110014c:	10c5883a 	add	r2,r2,r3
41100150:	10c00017 	ldw	r3,0(r2)
41100154:	009044b4 	movhi	r2,16658
41100158:	10b8ae04 	addi	r2,r2,-7496
4110015c:	e13ffd17 	ldw	r4,-12(fp)
41100160:	200890fa 	slli	r4,r4,3
41100164:	1105883a 	add	r2,r2,r4
41100168:	10800104 	addi	r2,r2,4
4110016c:	10800017 	ldw	r2,0(r2)
41100170:	1009883a 	mov	r4,r2
41100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
41100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
4110017c:	0005313a 	rdctl	r2,ipending
41100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
41100184:	e0bfff17 	ldw	r2,-4(fp)
41100188:	00000706 	br	411001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
4110018c:	e0bffc17 	ldw	r2,-16(fp)
41100190:	1085883a 	add	r2,r2,r2
41100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
41100198:	e0bffd17 	ldw	r2,-12(fp)
4110019c:	10800044 	addi	r2,r2,1
411001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
411001a4:	003fe106 	br	4110012c <__reset+0xbb0e012c>

    active = alt_irq_pending ();
411001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
411001ac:	e0bffb17 	ldw	r2,-20(fp)
411001b0:	103fdb1e 	bne	r2,zero,41100120 <__reset+0xbb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
411001b4:	0001883a 	nop
}
411001b8:	0001883a 	nop
411001bc:	e037883a 	mov	sp,fp
411001c0:	dfc00117 	ldw	ra,4(sp)
411001c4:	df000017 	ldw	fp,0(sp)
411001c8:	dec00204 	addi	sp,sp,8
411001cc:	f800283a 	ret

411001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
411001d0:	defffb04 	addi	sp,sp,-20
411001d4:	dfc00415 	stw	ra,16(sp)
411001d8:	df000315 	stw	fp,12(sp)
411001dc:	df000304 	addi	fp,sp,12
411001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
411001e4:	000531fa 	rdctl	r2,exception
411001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
411001ec:	e0bffd17 	ldw	r2,-12(fp)
411001f0:	10801f0c 	andi	r2,r2,124
411001f4:	1004d0ba 	srli	r2,r2,2
411001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
411001fc:	0005333a 	rdctl	r2,badaddr
41100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
41100204:	d0a03f17 	ldw	r2,-32516(gp)
41100208:	10000726 	beq	r2,zero,41100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
4110020c:	d0a03f17 	ldw	r2,-32516(gp)
41100210:	e0fffd17 	ldw	r3,-12(fp)
41100214:	e1bffe17 	ldw	r6,-8(fp)
41100218:	e17fff17 	ldw	r5,-4(fp)
4110021c:	1809883a 	mov	r4,r3
41100220:	103ee83a 	callr	r2
41100224:	00000206 	br	41100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
41100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
4110022c:	0005883a 	mov	r2,zero
}
41100230:	e037883a 	mov	sp,fp
41100234:	dfc00117 	ldw	ra,4(sp)
41100238:	df000017 	ldw	fp,0(sp)
4110023c:	dec00204 	addi	sp,sp,8
41100240:	f800283a 	ret

Disassembly of section .text:

41100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
41100244:	06d047f4 	movhi	sp,16671
    ori sp, sp, %lo(__alt_stack_pointer)
41100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
4110024c:	069044b4 	movhi	gp,16658
    ori gp, gp, %lo(_gp)
41100250:	d6976414 	ori	gp,gp,23952
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
41100254:	00904474 	movhi	r2,16657
    ori r2, r2, %lo(__bss_start)
41100258:	10b77f14 	ori	r2,r2,56828

    movhi r3, %hi(__bss_end)
4110025c:	00d04474 	movhi	r3,16657
    ori r3, r3, %lo(__bss_end)
41100260:	18f8ee14 	ori	r3,r3,58296

    beq r2, r3, 1f
41100264:	10c00326 	beq	r2,r3,41100274 <_start+0x30>

0:
    stw zero, (r2)
41100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
4110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
41100270:	10fffd36 	bltu	r2,r3,41100268 <__reset+0xbb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
41100274:	1115db00 	call	41115db0 <alt_main>

41100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
41100278:	003fff06 	br	41100278 <__reset+0xbb0e0278>

4110027c <enable_iso_drivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
PUBLIC bool enable_iso_drivers(void)
{
4110027c:	defffe04 	addi	sp,sp,-8
41100280:	dfc00115 	stw	ra,4(sp)
41100284:	df000015 	stw	fp,0(sp)
41100288:	d839883a 	mov	fp,sp
  ctrl_io_lvds_drive(IO_ON, EN_ISO_DRIVERS_MASK);
4110028c:	01400204 	movi	r5,8
41100290:	01000044 	movi	r4,1
41100294:	11004040 	call	41100404 <ctrl_io_lvds_drive>
  return  TRUE;
41100298:	00800044 	movi	r2,1
}
4110029c:	e037883a 	mov	sp,fp
411002a0:	dfc00117 	ldw	ra,4(sp)
411002a4:	df000017 	ldw	fp,0(sp)
411002a8:	dec00204 	addi	sp,sp,8
411002ac:	f800283a 	ret

411002b0 <disable_iso_drivers>:

PUBLIC bool disable_iso_drivers(void)
{
411002b0:	defffe04 	addi	sp,sp,-8
411002b4:	dfc00115 	stw	ra,4(sp)
411002b8:	df000015 	stw	fp,0(sp)
411002bc:	d839883a 	mov	fp,sp
  ctrl_io_lvds_drive(IO_OFF, EN_ISO_DRIVERS_MASK);
411002c0:	01400204 	movi	r5,8
411002c4:	0009883a 	mov	r4,zero
411002c8:	11004040 	call	41100404 <ctrl_io_lvds_drive>
  return  TRUE;
411002cc:	00800044 	movi	r2,1
}
411002d0:	e037883a 	mov	sp,fp
411002d4:	dfc00117 	ldw	ra,4(sp)
411002d8:	df000017 	ldw	fp,0(sp)
411002dc:	dec00204 	addi	sp,sp,8
411002e0:	f800283a 	ret

411002e4 <enable_lvds_board>:

PUBLIC bool enable_lvds_board(void)
{
411002e4:	defffe04 	addi	sp,sp,-8
411002e8:	dfc00115 	stw	ra,4(sp)
411002ec:	df000015 	stw	fp,0(sp)
411002f0:	d839883a 	mov	fp,sp
  ctrl_io_lvds_drive(IO_ON, PWDN_MASK);
411002f4:	01400104 	movi	r5,4
411002f8:	01000044 	movi	r4,1
411002fc:	11004040 	call	41100404 <ctrl_io_lvds_drive>
  return  TRUE;
41100300:	00800044 	movi	r2,1
}
41100304:	e037883a 	mov	sp,fp
41100308:	dfc00117 	ldw	ra,4(sp)
4110030c:	df000017 	ldw	fp,0(sp)
41100310:	dec00204 	addi	sp,sp,8
41100314:	f800283a 	ret

41100318 <disable_lvds_board>:

PUBLIC bool disable_lvds_board(void)
{
41100318:	defffe04 	addi	sp,sp,-8
4110031c:	dfc00115 	stw	ra,4(sp)
41100320:	df000015 	stw	fp,0(sp)
41100324:	d839883a 	mov	fp,sp
  ctrl_io_lvds_drive(IO_OFF, PWDN_MASK);
41100328:	01400104 	movi	r5,4
4110032c:	0009883a 	mov	r4,zero
41100330:	11004040 	call	41100404 <ctrl_io_lvds_drive>
  return  TRUE;
41100334:	00800044 	movi	r2,1
}
41100338:	e037883a 	mov	sp,fp
4110033c:	dfc00117 	ldw	ra,4(sp)
41100340:	df000017 	ldw	fp,0(sp)
41100344:	dec00204 	addi	sp,sp,8
41100348:	f800283a 	ret

4110034c <set_pre_emphasys>:

PUBLIC bool set_pre_emphasys(alt_u8 pem_level)
{
4110034c:	defffd04 	addi	sp,sp,-12
41100350:	dfc00215 	stw	ra,8(sp)
41100354:	df000115 	stw	fp,4(sp)
41100358:	df000104 	addi	fp,sp,4
4110035c:	2005883a 	mov	r2,r4
41100360:	e0bfff05 	stb	r2,-4(fp)
  switch (pem_level) {
41100364:	e0bfff03 	ldbu	r2,-4(fp)
41100368:	10c00060 	cmpeqi	r3,r2,1
4110036c:	18000d1e 	bne	r3,zero,411003a4 <set_pre_emphasys+0x58>
41100370:	10c00088 	cmpgei	r3,r2,2
41100374:	1800021e 	bne	r3,zero,41100380 <set_pre_emphasys+0x34>
41100378:	10000626 	beq	r2,zero,41100394 <set_pre_emphasys+0x48>
      break;
    case PEM_HI:
      ctrl_io_lvds_drive(IO_ON, PEM1_MASK | PEM0_MASK);
      break;
    default:
      break;
4110037c:	00001b06 	br	411003ec <set_pre_emphasys+0xa0>
  return  TRUE;
}

PUBLIC bool set_pre_emphasys(alt_u8 pem_level)
{
  switch (pem_level) {
41100380:	10c000a0 	cmpeqi	r3,r2,2
41100384:	18000e1e 	bne	r3,zero,411003c0 <set_pre_emphasys+0x74>
41100388:	108000e0 	cmpeqi	r2,r2,3
4110038c:	1000131e 	bne	r2,zero,411003dc <set_pre_emphasys+0x90>
      break;
    case PEM_HI:
      ctrl_io_lvds_drive(IO_ON, PEM1_MASK | PEM0_MASK);
      break;
    default:
      break;
41100390:	00001606 	br	411003ec <set_pre_emphasys+0xa0>

PUBLIC bool set_pre_emphasys(alt_u8 pem_level)
{
  switch (pem_level) {
    case PEM_OFF:
      ctrl_io_lvds_drive(IO_OFF, PEM1_MASK | PEM0_MASK);
41100394:	014000c4 	movi	r5,3
41100398:	0009883a 	mov	r4,zero
4110039c:	11004040 	call	41100404 <ctrl_io_lvds_drive>
      break;
411003a0:	00001206 	br	411003ec <set_pre_emphasys+0xa0>
    case PEM_LO:
      ctrl_io_lvds_drive(IO_OFF, PEM1_MASK);
411003a4:	01400084 	movi	r5,2
411003a8:	0009883a 	mov	r4,zero
411003ac:	11004040 	call	41100404 <ctrl_io_lvds_drive>
      ctrl_io_lvds_drive(IO_ON,  PEM0_MASK);
411003b0:	01400044 	movi	r5,1
411003b4:	01000044 	movi	r4,1
411003b8:	11004040 	call	41100404 <ctrl_io_lvds_drive>
      break;
411003bc:	00000b06 	br	411003ec <set_pre_emphasys+0xa0>
    case PEM_MID:
      ctrl_io_lvds_drive(IO_OFF, PEM0_MASK);
411003c0:	01400044 	movi	r5,1
411003c4:	0009883a 	mov	r4,zero
411003c8:	11004040 	call	41100404 <ctrl_io_lvds_drive>
      ctrl_io_lvds_drive(IO_ON,  PEM1_MASK);
411003cc:	01400084 	movi	r5,2
411003d0:	01000044 	movi	r4,1
411003d4:	11004040 	call	41100404 <ctrl_io_lvds_drive>
      break;
411003d8:	00000406 	br	411003ec <set_pre_emphasys+0xa0>
    case PEM_HI:
      ctrl_io_lvds_drive(IO_ON, PEM1_MASK | PEM0_MASK);
411003dc:	014000c4 	movi	r5,3
411003e0:	01000044 	movi	r4,1
411003e4:	11004040 	call	41100404 <ctrl_io_lvds_drive>
      break;
411003e8:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
411003ec:	00800044 	movi	r2,1
}
411003f0:	e037883a 	mov	sp,fp
411003f4:	dfc00117 	ldw	ra,4(sp)
411003f8:	df000017 	ldw	fp,0(sp)
411003fc:	dec00204 	addi	sp,sp,8
41100400:	f800283a 	ret

41100404 <ctrl_io_lvds_drive>:
 * @param [in] mask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
PRIVATE bool ctrl_io_lvds_drive(bool on_off, alt_u8 mask)
{
41100404:	defffd04 	addi	sp,sp,-12
41100408:	df000215 	stw	fp,8(sp)
4110040c:	df000204 	addi	fp,sp,8
41100410:	e13ffe15 	stw	r4,-8(fp)
41100414:	2805883a 	mov	r2,r5
41100418:	e0bfff05 	stb	r2,-4(fp)
  if (on_off == IO_OFF) {
4110041c:	e0bffe17 	ldw	r2,-8(fp)
41100420:	1000071e 	bne	r2,zero,41100440 <ctrl_io_lvds_drive+0x3c>
	 io_value &= (~mask);
41100424:	e0bfff03 	ldbu	r2,-4(fp)
41100428:	0084303a 	nor	r2,zero,r2
4110042c:	1007883a 	mov	r3,r2
41100430:	d0a00003 	ldbu	r2,-32768(gp)
41100434:	1884703a 	and	r2,r3,r2
41100438:	d0a00005 	stb	r2,-32768(gp)
4110043c:	00000406 	br	41100450 <ctrl_io_lvds_drive+0x4c>
  }
  else {
	 io_value |= mask;
41100440:	d0e00003 	ldbu	r3,-32768(gp)
41100444:	e0bfff03 	ldbu	r2,-4(fp)
41100448:	1884b03a 	or	r2,r3,r2
4110044c:	d0a00005 	stb	r2,-32768(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(CTRL_IO_LVDS_ADDR_BASE, io_value);
41100450:	d0a00003 	ldbu	r2,-32768(gp)
41100454:	10c03fcc 	andi	r3,r2,255
41100458:	00900034 	movhi	r2,16384
4110045c:	10821804 	addi	r2,r2,2144
41100460:	10c00035 	stwio	r3,0(r2)
  return TRUE;
41100464:	00800044 	movi	r2,1
}
41100468:	e037883a 	mov	sp,fp
4110046c:	df000017 	ldw	fp,0(sp)
41100470:	dec00104 	addi	sp,sp,4
41100474:	f800283a 	ret

41100478 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
41100478:	defffa04 	addi	sp,sp,-24
4110047c:	dfc00515 	stw	ra,20(sp)
41100480:	df000415 	stw	fp,16(sp)
41100484:	df000404 	addi	fp,sp,16
41100488:	e13ffd15 	stw	r4,-12(fp)
4110048c:	e17ffe15 	stw	r5,-8(fp)
41100490:	3005883a 	mov	r2,r6
41100494:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
41100498:	00800044 	movi	r2,1
4110049c:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
411004a0:	e17ffe17 	ldw	r5,-8(fp)
411004a4:	e13ffd17 	ldw	r4,-12(fp)
411004a8:	11008280 	call	41100828 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
411004ac:	e0bfff03 	ldbu	r2,-4(fp)
411004b0:	10803fcc 	andi	r2,r2,255
411004b4:	100d883a 	mov	r6,r2
411004b8:	e17ffe17 	ldw	r5,-8(fp)
411004bc:	e13ffd17 	ldw	r4,-12(fp)
411004c0:	110092c0 	call	4110092c <i2c_write>
411004c4:	1000011e 	bne	r2,zero,411004cc <I2C_TestAdress+0x54>
        bSuccess = FALSE;
411004c8:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
411004cc:	e17ffe17 	ldw	r5,-8(fp)
411004d0:	e13ffd17 	ldw	r4,-12(fp)
411004d4:	11008b40 	call	411008b4 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
411004d8:	0106d604 	movi	r4,7000
411004dc:	11162640 	call	41116264 <usleep>
    
    return bSuccess;
411004e0:	e0bffc17 	ldw	r2,-16(fp)

}
411004e4:	e037883a 	mov	sp,fp
411004e8:	dfc00117 	ldw	ra,4(sp)
411004ec:	df000017 	ldw	fp,0(sp)
411004f0:	dec00204 	addi	sp,sp,8
411004f4:	f800283a 	ret

411004f8 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
411004f8:	defff804 	addi	sp,sp,-32
411004fc:	dfc00715 	stw	ra,28(sp)
41100500:	df000615 	stw	fp,24(sp)
41100504:	df000604 	addi	fp,sp,24
41100508:	e13ffb15 	stw	r4,-20(fp)
4110050c:	e17ffc15 	stw	r5,-16(fp)
41100510:	3009883a 	mov	r4,r6
41100514:	3807883a 	mov	r3,r7
41100518:	e0800217 	ldw	r2,8(fp)
4110051c:	e13ffd05 	stb	r4,-12(fp)
41100520:	e0fffe05 	stb	r3,-8(fp)
41100524:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
41100528:	00800044 	movi	r2,1
4110052c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
41100530:	e17ffc17 	ldw	r5,-16(fp)
41100534:	e13ffb17 	ldw	r4,-20(fp)
41100538:	11008280 	call	41100828 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
4110053c:	e0bffd03 	ldbu	r2,-12(fp)
41100540:	10803fcc 	andi	r2,r2,255
41100544:	100d883a 	mov	r6,r2
41100548:	e17ffc17 	ldw	r5,-16(fp)
4110054c:	e13ffb17 	ldw	r4,-20(fp)
41100550:	110092c0 	call	4110092c <i2c_write>
41100554:	1000011e 	bne	r2,zero,4110055c <I2C_Write+0x64>
        bSuccess = FALSE;
41100558:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
4110055c:	e0bffa17 	ldw	r2,-24(fp)
41100560:	10000726 	beq	r2,zero,41100580 <I2C_Write+0x88>
41100564:	e0bffe03 	ldbu	r2,-8(fp)
41100568:	100d883a 	mov	r6,r2
4110056c:	e17ffc17 	ldw	r5,-16(fp)
41100570:	e13ffb17 	ldw	r4,-20(fp)
41100574:	110092c0 	call	4110092c <i2c_write>
41100578:	1000011e 	bne	r2,zero,41100580 <I2C_Write+0x88>
        bSuccess = FALSE;
4110057c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
41100580:	e0bffa17 	ldw	r2,-24(fp)
41100584:	10000726 	beq	r2,zero,411005a4 <I2C_Write+0xac>
41100588:	e0bfff03 	ldbu	r2,-4(fp)
4110058c:	100d883a 	mov	r6,r2
41100590:	e17ffc17 	ldw	r5,-16(fp)
41100594:	e13ffb17 	ldw	r4,-20(fp)
41100598:	110092c0 	call	4110092c <i2c_write>
4110059c:	1000011e 	bne	r2,zero,411005a4 <I2C_Write+0xac>
        bSuccess = FALSE;
411005a0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
411005a4:	e17ffc17 	ldw	r5,-16(fp)
411005a8:	e13ffb17 	ldw	r4,-20(fp)
411005ac:	11008b40 	call	411008b4 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
411005b0:	0106d604 	movi	r4,7000
411005b4:	11162640 	call	41116264 <usleep>
    
    return bSuccess;
411005b8:	e0bffa17 	ldw	r2,-24(fp)

}
411005bc:	e037883a 	mov	sp,fp
411005c0:	dfc00117 	ldw	ra,4(sp)
411005c4:	df000017 	ldw	fp,0(sp)
411005c8:	dec00204 	addi	sp,sp,8
411005cc:	f800283a 	ret

411005d0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
411005d0:	defff904 	addi	sp,sp,-28
411005d4:	dfc00615 	stw	ra,24(sp)
411005d8:	df000515 	stw	fp,20(sp)
411005dc:	df000504 	addi	fp,sp,20
411005e0:	e13ffc15 	stw	r4,-16(fp)
411005e4:	e17ffd15 	stw	r5,-12(fp)
411005e8:	3007883a 	mov	r3,r6
411005ec:	3805883a 	mov	r2,r7
411005f0:	e0fffe05 	stb	r3,-8(fp)
411005f4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
411005f8:	00800044 	movi	r2,1
411005fc:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
41100600:	e17ffd17 	ldw	r5,-12(fp)
41100604:	e13ffc17 	ldw	r4,-16(fp)
41100608:	11008280 	call	41100828 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
4110060c:	e0bffe03 	ldbu	r2,-8(fp)
41100610:	10803fcc 	andi	r2,r2,255
41100614:	100d883a 	mov	r6,r2
41100618:	e17ffd17 	ldw	r5,-12(fp)
4110061c:	e13ffc17 	ldw	r4,-16(fp)
41100620:	110092c0 	call	4110092c <i2c_write>
41100624:	1000011e 	bne	r2,zero,4110062c <I2C_Read+0x5c>
        bSuccess = FALSE;
41100628:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
4110062c:	e0bffb17 	ldw	r2,-20(fp)
41100630:	10000726 	beq	r2,zero,41100650 <I2C_Read+0x80>
41100634:	e0bfff03 	ldbu	r2,-4(fp)
41100638:	100d883a 	mov	r6,r2
4110063c:	e17ffd17 	ldw	r5,-12(fp)
41100640:	e13ffc17 	ldw	r4,-16(fp)
41100644:	110092c0 	call	4110092c <i2c_write>
41100648:	1000011e 	bne	r2,zero,41100650 <I2C_Read+0x80>
        bSuccess = FALSE;
4110064c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
41100650:	e17ffd17 	ldw	r5,-12(fp)
41100654:	e13ffc17 	ldw	r4,-16(fp)
41100658:	11008280 	call	41100828 <i2c_start>
    DeviceAddr |= 1; // Read
4110065c:	e0bffe03 	ldbu	r2,-8(fp)
41100660:	10800054 	ori	r2,r2,1
41100664:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
41100668:	e0bffb17 	ldw	r2,-20(fp)
4110066c:	10000826 	beq	r2,zero,41100690 <I2C_Read+0xc0>
41100670:	e0bffe03 	ldbu	r2,-8(fp)
41100674:	10803fcc 	andi	r2,r2,255
41100678:	100d883a 	mov	r6,r2
4110067c:	e17ffd17 	ldw	r5,-12(fp)
41100680:	e13ffc17 	ldw	r4,-16(fp)
41100684:	110092c0 	call	4110092c <i2c_write>
41100688:	1000011e 	bne	r2,zero,41100690 <I2C_Read+0xc0>
        bSuccess = FALSE;
4110068c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
41100690:	e0bffb17 	ldw	r2,-20(fp)
41100694:	10000526 	beq	r2,zero,411006ac <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
41100698:	000f883a 	mov	r7,zero
4110069c:	e1800217 	ldw	r6,8(fp)
411006a0:	e17ffd17 	ldw	r5,-12(fp)
411006a4:	e13ffc17 	ldw	r4,-16(fp)
411006a8:	1100a5c0 	call	41100a5c <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
411006ac:	e17ffd17 	ldw	r5,-12(fp)
411006b0:	e13ffc17 	ldw	r4,-16(fp)
411006b4:	11008b40 	call	411008b4 <i2c_stop>
    
    return bSuccess;
411006b8:	e0bffb17 	ldw	r2,-20(fp)
}
411006bc:	e037883a 	mov	sp,fp
411006c0:	dfc00117 	ldw	ra,4(sp)
411006c4:	df000017 	ldw	fp,0(sp)
411006c8:	dec00204 	addi	sp,sp,8
411006cc:	f800283a 	ret

411006d0 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
411006d0:	defff604 	addi	sp,sp,-40
411006d4:	dfc00915 	stw	ra,36(sp)
411006d8:	df000815 	stw	fp,32(sp)
411006dc:	df000804 	addi	fp,sp,32
411006e0:	e13ffb15 	stw	r4,-20(fp)
411006e4:	e17ffc15 	stw	r5,-16(fp)
411006e8:	3007883a 	mov	r3,r6
411006ec:	e1fffe15 	stw	r7,-8(fp)
411006f0:	e0800217 	ldw	r2,8(fp)
411006f4:	e0fffd05 	stb	r3,-12(fp)
411006f8:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
411006fc:	00800044 	movi	r2,1
41100700:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
41100704:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
41100708:	e17ffc17 	ldw	r5,-16(fp)
4110070c:	e13ffb17 	ldw	r4,-20(fp)
41100710:	11008280 	call	41100828 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
41100714:	e0bffd03 	ldbu	r2,-12(fp)
41100718:	10803fcc 	andi	r2,r2,255
4110071c:	100d883a 	mov	r6,r2
41100720:	e17ffc17 	ldw	r5,-16(fp)
41100724:	e13ffb17 	ldw	r4,-20(fp)
41100728:	110092c0 	call	4110092c <i2c_write>
4110072c:	1000011e 	bne	r2,zero,41100734 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
41100730:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
41100734:	e0bff917 	ldw	r2,-28(fp)
41100738:	10000726 	beq	r2,zero,41100758 <I2C_MultipleRead+0x88>
4110073c:	e0bffa03 	ldbu	r2,-24(fp)
41100740:	100d883a 	mov	r6,r2
41100744:	e17ffc17 	ldw	r5,-16(fp)
41100748:	e13ffb17 	ldw	r4,-20(fp)
4110074c:	110092c0 	call	4110092c <i2c_write>
41100750:	1000011e 	bne	r2,zero,41100758 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
41100754:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
41100758:	e0bff917 	ldw	r2,-28(fp)
4110075c:	10000326 	beq	r2,zero,4110076c <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
41100760:	e17ffc17 	ldw	r5,-16(fp)
41100764:	e13ffb17 	ldw	r4,-20(fp)
41100768:	11008280 	call	41100828 <i2c_start>
    DeviceAddr |= 1; // Read
4110076c:	e0bffd03 	ldbu	r2,-12(fp)
41100770:	10800054 	ori	r2,r2,1
41100774:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
41100778:	e0bff917 	ldw	r2,-28(fp)
4110077c:	10000826 	beq	r2,zero,411007a0 <I2C_MultipleRead+0xd0>
41100780:	e0bffd03 	ldbu	r2,-12(fp)
41100784:	10803fcc 	andi	r2,r2,255
41100788:	100d883a 	mov	r6,r2
4110078c:	e17ffc17 	ldw	r5,-16(fp)
41100790:	e13ffb17 	ldw	r4,-20(fp)
41100794:	110092c0 	call	4110092c <i2c_write>
41100798:	1000011e 	bne	r2,zero,411007a0 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
4110079c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
411007a0:	e0bff917 	ldw	r2,-28(fp)
411007a4:	10001726 	beq	r2,zero,41100804 <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
411007a8:	e03ff815 	stw	zero,-32(fp)
411007ac:	00001006 	br	411007f0 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
411007b0:	e0bff817 	ldw	r2,-32(fp)
411007b4:	e0fffe17 	ldw	r3,-8(fp)
411007b8:	1889883a 	add	r4,r3,r2
411007bc:	e0bfff0b 	ldhu	r2,-4(fp)
411007c0:	10ffffc4 	addi	r3,r2,-1
411007c4:	e0bff817 	ldw	r2,-32(fp)
411007c8:	1884c03a 	cmpne	r2,r3,r2
411007cc:	10803fcc 	andi	r2,r2,255
411007d0:	100f883a 	mov	r7,r2
411007d4:	200d883a 	mov	r6,r4
411007d8:	e17ffc17 	ldw	r5,-16(fp)
411007dc:	e13ffb17 	ldw	r4,-20(fp)
411007e0:	1100a5c0 	call	41100a5c <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
411007e4:	e0bff817 	ldw	r2,-32(fp)
411007e8:	10800044 	addi	r2,r2,1
411007ec:	e0bff815 	stw	r2,-32(fp)
411007f0:	e0bfff0b 	ldhu	r2,-4(fp)
411007f4:	e0fff817 	ldw	r3,-32(fp)
411007f8:	1880020e 	bge	r3,r2,41100804 <I2C_MultipleRead+0x134>
411007fc:	e0bff917 	ldw	r2,-28(fp)
41100800:	103feb1e 	bne	r2,zero,411007b0 <__reset+0xbb0e07b0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
41100804:	e17ffc17 	ldw	r5,-16(fp)
41100808:	e13ffb17 	ldw	r4,-20(fp)
4110080c:	11008b40 	call	411008b4 <i2c_stop>
    
    return bSuccess;    
41100810:	e0bff917 	ldw	r2,-28(fp)
    
}
41100814:	e037883a 	mov	sp,fp
41100818:	dfc00117 	ldw	ra,4(sp)
4110081c:	df000017 	ldw	fp,0(sp)
41100820:	dec00204 	addi	sp,sp,8
41100824:	f800283a 	ret

41100828 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
41100828:	defffc04 	addi	sp,sp,-16
4110082c:	dfc00315 	stw	ra,12(sp)
41100830:	df000215 	stw	fp,8(sp)
41100834:	df000204 	addi	fp,sp,8
41100838:	e13ffe15 	stw	r4,-8(fp)
4110083c:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
41100840:	e0bfff17 	ldw	r2,-4(fp)
41100844:	10800104 	addi	r2,r2,4
41100848:	1007883a 	mov	r3,r2
4110084c:	00800044 	movi	r2,1
41100850:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
41100854:	e0bfff17 	ldw	r2,-4(fp)
41100858:	00c00044 	movi	r3,1
4110085c:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
41100860:	e0bffe17 	ldw	r2,-8(fp)
41100864:	00c00044 	movi	r3,1
41100868:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
4110086c:	01000044 	movi	r4,1
41100870:	11162640 	call	41116264 <usleep>
     
    SDA_LOW(data_base); // data low
41100874:	e0bfff17 	ldw	r2,-4(fp)
41100878:	0007883a 	mov	r3,zero
4110087c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
41100880:	01000044 	movi	r4,1
41100884:	11162640 	call	41116264 <usleep>
    SCL_LOW(clk_base); // clock low
41100888:	e0bffe17 	ldw	r2,-8(fp)
4110088c:	0007883a 	mov	r3,zero
41100890:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
41100894:	01000044 	movi	r4,1
41100898:	11162640 	call	41116264 <usleep>
}
4110089c:	0001883a 	nop
411008a0:	e037883a 	mov	sp,fp
411008a4:	dfc00117 	ldw	ra,4(sp)
411008a8:	df000017 	ldw	fp,0(sp)
411008ac:	dec00204 	addi	sp,sp,8
411008b0:	f800283a 	ret

411008b4 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
411008b4:	defffc04 	addi	sp,sp,-16
411008b8:	dfc00315 	stw	ra,12(sp)
411008bc:	df000215 	stw	fp,8(sp)
411008c0:	df000204 	addi	fp,sp,8
411008c4:	e13ffe15 	stw	r4,-8(fp)
411008c8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
411008cc:	e0bfff17 	ldw	r2,-4(fp)
411008d0:	10800104 	addi	r2,r2,4
411008d4:	1007883a 	mov	r3,r2
411008d8:	00800044 	movi	r2,1
411008dc:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
411008e0:	e0bfff17 	ldw	r2,-4(fp)
411008e4:	0007883a 	mov	r3,zero
411008e8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
411008ec:	e0bffe17 	ldw	r2,-8(fp)
411008f0:	00c00044 	movi	r3,1
411008f4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
411008f8:	01000044 	movi	r4,1
411008fc:	11162640 	call	41116264 <usleep>
    SDA_HIGH(data_base); // data high
41100900:	e0bfff17 	ldw	r2,-4(fp)
41100904:	00c00044 	movi	r3,1
41100908:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
4110090c:	01000044 	movi	r4,1
41100910:	11162640 	call	41116264 <usleep>
    

    
}
41100914:	0001883a 	nop
41100918:	e037883a 	mov	sp,fp
4110091c:	dfc00117 	ldw	ra,4(sp)
41100920:	df000017 	ldw	fp,0(sp)
41100924:	dec00204 	addi	sp,sp,8
41100928:	f800283a 	ret

4110092c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
4110092c:	defff804 	addi	sp,sp,-32
41100930:	dfc00715 	stw	ra,28(sp)
41100934:	df000615 	stw	fp,24(sp)
41100938:	df000604 	addi	fp,sp,24
4110093c:	e13ffd15 	stw	r4,-12(fp)
41100940:	e17ffe15 	stw	r5,-8(fp)
41100944:	3005883a 	mov	r2,r6
41100948:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
4110094c:	00bfe004 	movi	r2,-128
41100950:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
41100954:	e0bffe17 	ldw	r2,-8(fp)
41100958:	10800104 	addi	r2,r2,4
4110095c:	1007883a 	mov	r3,r2
41100960:	00800044 	movi	r2,1
41100964:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
41100968:	e03ffb15 	stw	zero,-20(fp)
4110096c:	00001f06 	br	411009ec <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
41100970:	e0bffd17 	ldw	r2,-12(fp)
41100974:	0007883a 	mov	r3,zero
41100978:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
4110097c:	e0ffff03 	ldbu	r3,-4(fp)
41100980:	e0bffa03 	ldbu	r2,-24(fp)
41100984:	1884703a 	and	r2,r3,r2
41100988:	10803fcc 	andi	r2,r2,255
4110098c:	10000426 	beq	r2,zero,411009a0 <i2c_write+0x74>
            SDA_HIGH(data_base);
41100990:	e0bffe17 	ldw	r2,-8(fp)
41100994:	00c00044 	movi	r3,1
41100998:	10c00035 	stwio	r3,0(r2)
4110099c:	00000306 	br	411009ac <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
411009a0:	e0bffe17 	ldw	r2,-8(fp)
411009a4:	0007883a 	mov	r3,zero
411009a8:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
411009ac:	e0bffa03 	ldbu	r2,-24(fp)
411009b0:	1004d07a 	srli	r2,r2,1
411009b4:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
411009b8:	e0bffd17 	ldw	r2,-12(fp)
411009bc:	00c00044 	movi	r3,1
411009c0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
411009c4:	01000044 	movi	r4,1
411009c8:	11162640 	call	41116264 <usleep>
        SCL_LOW(clk_base);
411009cc:	e0bffd17 	ldw	r2,-12(fp)
411009d0:	0007883a 	mov	r3,zero
411009d4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
411009d8:	01000044 	movi	r4,1
411009dc:	11162640 	call	41116264 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
411009e0:	e0bffb17 	ldw	r2,-20(fp)
411009e4:	10800044 	addi	r2,r2,1
411009e8:	e0bffb15 	stw	r2,-20(fp)
411009ec:	e0bffb17 	ldw	r2,-20(fp)
411009f0:	10800210 	cmplti	r2,r2,8
411009f4:	103fde1e 	bne	r2,zero,41100970 <__reset+0xbb0e0970>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
411009f8:	e0bffe17 	ldw	r2,-8(fp)
411009fc:	10800104 	addi	r2,r2,4
41100a00:	0007883a 	mov	r3,zero
41100a04:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
41100a08:	e0bffd17 	ldw	r2,-12(fp)
41100a0c:	00c00044 	movi	r3,1
41100a10:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
41100a14:	01000044 	movi	r4,1
41100a18:	11162640 	call	41116264 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
41100a1c:	e0bffe17 	ldw	r2,-8(fp)
41100a20:	10800037 	ldwio	r2,0(r2)
41100a24:	1005003a 	cmpeq	r2,r2,zero
41100a28:	10803fcc 	andi	r2,r2,255
41100a2c:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
41100a30:	e0bffd17 	ldw	r2,-12(fp)
41100a34:	0007883a 	mov	r3,zero
41100a38:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
41100a3c:	01000044 	movi	r4,1
41100a40:	11162640 	call	41116264 <usleep>
    return bAck;
41100a44:	e0bffc17 	ldw	r2,-16(fp)
}    
41100a48:	e037883a 	mov	sp,fp
41100a4c:	dfc00117 	ldw	ra,4(sp)
41100a50:	df000017 	ldw	fp,0(sp)
41100a54:	dec00204 	addi	sp,sp,8
41100a58:	f800283a 	ret

41100a5c <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
41100a5c:	defff804 	addi	sp,sp,-32
41100a60:	dfc00715 	stw	ra,28(sp)
41100a64:	df000615 	stw	fp,24(sp)
41100a68:	df000604 	addi	fp,sp,24
41100a6c:	e13ffc15 	stw	r4,-16(fp)
41100a70:	e17ffd15 	stw	r5,-12(fp)
41100a74:	e1bffe15 	stw	r6,-8(fp)
41100a78:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
41100a7c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
41100a80:	e0bffd17 	ldw	r2,-12(fp)
41100a84:	10800104 	addi	r2,r2,4
41100a88:	0007883a 	mov	r3,zero
41100a8c:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
41100a90:	e0bffc17 	ldw	r2,-16(fp)
41100a94:	0007883a 	mov	r3,zero
41100a98:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
41100a9c:	01000044 	movi	r4,1
41100aa0:	11162640 	call	41116264 <usleep>

    for(i=0;i<8;i++){
41100aa4:	e03ffb15 	stw	zero,-20(fp)
41100aa8:	00001606 	br	41100b04 <i2c_read+0xa8>
        Data <<= 1;
41100aac:	e0bffa03 	ldbu	r2,-24(fp)
41100ab0:	1085883a 	add	r2,r2,r2
41100ab4:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
41100ab8:	e0bffc17 	ldw	r2,-16(fp)
41100abc:	00c00044 	movi	r3,1
41100ac0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
41100ac4:	01000044 	movi	r4,1
41100ac8:	11162640 	call	41116264 <usleep>
        if (SDA_READ(data_base))  // read data   
41100acc:	e0bffd17 	ldw	r2,-12(fp)
41100ad0:	10800037 	ldwio	r2,0(r2)
41100ad4:	10000326 	beq	r2,zero,41100ae4 <i2c_read+0x88>
            Data |= 0x01;
41100ad8:	e0bffa03 	ldbu	r2,-24(fp)
41100adc:	10800054 	ori	r2,r2,1
41100ae0:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
41100ae4:	e0bffc17 	ldw	r2,-16(fp)
41100ae8:	0007883a 	mov	r3,zero
41100aec:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
41100af0:	01000044 	movi	r4,1
41100af4:	11162640 	call	41116264 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
41100af8:	e0bffb17 	ldw	r2,-20(fp)
41100afc:	10800044 	addi	r2,r2,1
41100b00:	e0bffb15 	stw	r2,-20(fp)
41100b04:	e0bffb17 	ldw	r2,-20(fp)
41100b08:	10800210 	cmplti	r2,r2,8
41100b0c:	103fe71e 	bne	r2,zero,41100aac <__reset+0xbb0e0aac>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
41100b10:	e0bffc17 	ldw	r2,-16(fp)
41100b14:	0007883a 	mov	r3,zero
41100b18:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
41100b1c:	e0bffd17 	ldw	r2,-12(fp)
41100b20:	10800104 	addi	r2,r2,4
41100b24:	1007883a 	mov	r3,r2
41100b28:	00800044 	movi	r2,1
41100b2c:	18800035 	stwio	r2,0(r3)
    if (bAck)
41100b30:	e0bfff17 	ldw	r2,-4(fp)
41100b34:	10000426 	beq	r2,zero,41100b48 <i2c_read+0xec>
        SDA_LOW(data_base);
41100b38:	e0bffd17 	ldw	r2,-12(fp)
41100b3c:	0007883a 	mov	r3,zero
41100b40:	10c00035 	stwio	r3,0(r2)
41100b44:	00000306 	br	41100b54 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
41100b48:	e0bffd17 	ldw	r2,-12(fp)
41100b4c:	00c00044 	movi	r3,1
41100b50:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
41100b54:	e0bffc17 	ldw	r2,-16(fp)
41100b58:	00c00044 	movi	r3,1
41100b5c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
41100b60:	01000044 	movi	r4,1
41100b64:	11162640 	call	41116264 <usleep>
    SCL_LOW(clk_base); // clock low
41100b68:	e0bffc17 	ldw	r2,-16(fp)
41100b6c:	0007883a 	mov	r3,zero
41100b70:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
41100b74:	01000044 	movi	r4,1
41100b78:	11162640 	call	41116264 <usleep>
    SDA_LOW(data_base);  // data low
41100b7c:	e0bffd17 	ldw	r2,-12(fp)
41100b80:	0007883a 	mov	r3,zero
41100b84:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
41100b88:	01000044 	movi	r4,1
41100b8c:	11162640 	call	41116264 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
41100b90:	e0bffe17 	ldw	r2,-8(fp)
41100b94:	e0fffa03 	ldbu	r3,-24(fp)
41100b98:	10c00005 	stb	r3,0(r2)
}
41100b9c:	0001883a 	nop
41100ba0:	e037883a 	mov	sp,fp
41100ba4:	dfc00117 	ldw	ra,4(sp)
41100ba8:	df000017 	ldw	fp,0(sp)
41100bac:	dec00204 	addi	sp,sp,8
41100bb0:	f800283a 	ret

41100bb4 <LEDS_BOARD_DRIVE>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool LEDS_BOARD_DRIVE(bool bDRIVE, alt_u8 LedsMask){
41100bb4:	defffd04 	addi	sp,sp,-12
41100bb8:	df000215 	stw	fp,8(sp)
41100bbc:	df000204 	addi	fp,sp,8
41100bc0:	e13ffe15 	stw	r4,-8(fp)
41100bc4:	2805883a 	mov	r2,r5
41100bc8:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
41100bcc:	e0bffe17 	ldw	r2,-8(fp)
41100bd0:	10800058 	cmpnei	r2,r2,1
41100bd4:	1000071e 	bne	r2,zero,41100bf4 <LEDS_BOARD_DRIVE+0x40>
	LedsBoardControl &= (~LedsMask);
41100bd8:	e0bfff03 	ldbu	r2,-4(fp)
41100bdc:	0084303a 	nor	r2,zero,r2
41100be0:	1007883a 	mov	r3,r2
41100be4:	d0a01c03 	ldbu	r2,-32656(gp)
41100be8:	1884703a 	and	r2,r3,r2
41100bec:	d0a01c05 	stb	r2,-32656(gp)
41100bf0:	00000406 	br	41100c04 <LEDS_BOARD_DRIVE+0x50>
  } else {
	LedsBoardControl |= LedsMask;
41100bf4:	d0e01c03 	ldbu	r3,-32656(gp)
41100bf8:	e0bfff03 	ldbu	r2,-4(fp)
41100bfc:	1884b03a 	or	r2,r3,r2
41100c00:	d0a01c05 	stb	r2,-32656(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
41100c04:	d0a01c03 	ldbu	r2,-32656(gp)
41100c08:	10c03fcc 	andi	r3,r2,255
41100c0c:	00900034 	movhi	r2,16384
41100c10:	10826404 	addi	r2,r2,2448
41100c14:	10c00035 	stwio	r3,0(r2)

  return TRUE;
41100c18:	00800044 	movi	r2,1
}
41100c1c:	e037883a 	mov	sp,fp
41100c20:	df000017 	ldw	fp,0(sp)
41100c24:	dec00104 	addi	sp,sp,4
41100c28:	f800283a 	ret

41100c2c <LEDS_PAINEL_DRIVE>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool LEDS_PAINEL_DRIVE(bool bDRIVE, alt_u32 LedsMask){
41100c2c:	defffd04 	addi	sp,sp,-12
41100c30:	df000215 	stw	fp,8(sp)
41100c34:	df000204 	addi	fp,sp,8
41100c38:	e13ffe15 	stw	r4,-8(fp)
41100c3c:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
41100c40:	e0bffe17 	ldw	r2,-8(fp)
41100c44:	10800058 	cmpnei	r2,r2,1
41100c48:	1000051e 	bne	r2,zero,41100c60 <LEDS_PAINEL_DRIVE+0x34>
	LedsPainelControl |= LedsMask;
41100c4c:	d0e01d17 	ldw	r3,-32652(gp)
41100c50:	e0bfff17 	ldw	r2,-4(fp)
41100c54:	1884b03a 	or	r2,r3,r2
41100c58:	d0a01d15 	stw	r2,-32652(gp)
41100c5c:	00000506 	br	41100c74 <LEDS_PAINEL_DRIVE+0x48>
  } else {
	LedsPainelControl &= (~LedsMask);
41100c60:	e0bfff17 	ldw	r2,-4(fp)
41100c64:	0086303a 	nor	r3,zero,r2
41100c68:	d0a01d17 	ldw	r2,-32652(gp)
41100c6c:	1884703a 	and	r2,r3,r2
41100c70:	d0a01d15 	stw	r2,-32652(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
41100c74:	d0a01d17 	ldw	r2,-32652(gp)
41100c78:	1007883a 	mov	r3,r2
41100c7c:	00900034 	movhi	r2,16384
41100c80:	10823004 	addi	r2,r2,2240
41100c84:	10c00035 	stwio	r3,0(r2)

  return TRUE;
41100c88:	00800044 	movi	r2,1
}
41100c8c:	e037883a 	mov	sp,fp
41100c90:	df000017 	ldw	fp,0(sp)
41100c94:	dec00104 	addi	sp,sp,4
41100c98:	f800283a 	ret

41100c9c <POWER_SPI_RW>:
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock


// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN, bool bSGL, alt_u32 *pValue)
{
41100c9c:	defff204 	addi	sp,sp,-56
41100ca0:	dfc00d15 	stw	ra,52(sp)
41100ca4:	df000c15 	stw	fp,48(sp)
41100ca8:	df000c04 	addi	fp,sp,48
41100cac:	2007883a 	mov	r3,r4
41100cb0:	2805883a 	mov	r2,r5
41100cb4:	e1bffe15 	stw	r6,-8(fp)
41100cb8:	e1ffff15 	stw	r7,-4(fp)
41100cbc:	e0fffc05 	stb	r3,-16(fp)
41100cc0:	e0bffd05 	stb	r2,-12(fp)
    bool bSuccess;
    alt_u8 Config8;
    alt_u32 Value32=0, Mask32;
41100cc4:	e03ff515 	stw	zero,-44(fp)
    int i, nWait = 0, nZeroCnt;
41100cc8:	e03ff815 	stw	zero,-32(fp)
    const int nMaxWait = 1000000;
41100ccc:	008003f4 	movhi	r2,15
41100cd0:	10909004 	addi	r2,r2,16960
41100cd4:	e0bffa15 	stw	r2,-24(fp)
    
    //
    Config8 = 0x80; 
41100cd8:	00bfe004 	movi	r2,-128
41100cdc:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bEN)?0x20:0x00;
41100ce0:	e0bffe17 	ldw	r2,-8(fp)
41100ce4:	10000226 	beq	r2,zero,41100cf0 <POWER_SPI_RW+0x54>
41100ce8:	00800804 	movi	r2,32
41100cec:	00000106 	br	41100cf4 <POWER_SPI_RW+0x58>
41100cf0:	0005883a 	mov	r2,zero
41100cf4:	e0fff403 	ldbu	r3,-48(fp)
41100cf8:	10c4b03a 	or	r2,r2,r3
41100cfc:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSGL)?0x10:0x00;
41100d00:	e0800217 	ldw	r2,8(fp)
41100d04:	10000226 	beq	r2,zero,41100d10 <POWER_SPI_RW+0x74>
41100d08:	00800404 	movi	r2,16
41100d0c:	00000106 	br	41100d14 <POWER_SPI_RW+0x78>
41100d10:	0005883a 	mov	r2,zero
41100d14:	e0fff403 	ldbu	r3,-48(fp)
41100d18:	10c4b03a 	or	r2,r2,r3
41100d1c:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSIGN)?0x08:0x00;
41100d20:	e0bfff17 	ldw	r2,-4(fp)
41100d24:	10000226 	beq	r2,zero,41100d30 <POWER_SPI_RW+0x94>
41100d28:	00800204 	movi	r2,8
41100d2c:	00000106 	br	41100d34 <POWER_SPI_RW+0x98>
41100d30:	0005883a 	mov	r2,zero
41100d34:	e0fff403 	ldbu	r3,-48(fp)
41100d38:	10c4b03a 	or	r2,r2,r3
41100d3c:	e0bff405 	stb	r2,-48(fp)
    Config8 |= NextChannel & 0x07; // channel
41100d40:	e0bffd03 	ldbu	r2,-12(fp)
41100d44:	108001cc 	andi	r2,r2,7
41100d48:	1007883a 	mov	r3,r2
41100d4c:	e0bff403 	ldbu	r2,-48(fp)
41100d50:	1884b03a 	or	r2,r3,r2
41100d54:	e0bff405 	stb	r2,-48(fp)
    
    SPI_FO(0); // use internal conversion clock
41100d58:	0007883a 	mov	r3,zero
41100d5c:	00900034 	movhi	r2,16384
41100d60:	10823404 	addi	r2,r2,2256
41100d64:	10c00035 	stwio	r3,0(r2)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
41100d68:	0007883a 	mov	r3,zero
41100d6c:	00900034 	movhi	r2,16384
41100d70:	10823c04 	addi	r2,r2,2288
41100d74:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(IcIndex, 0);  // chip select: active
41100d78:	e0bffc03 	ldbu	r2,-16(fp)
41100d7c:	1000021e 	bne	r2,zero,41100d88 <POWER_SPI_RW+0xec>
41100d80:	00c00084 	movi	r3,2
41100d84:	00000106 	br	41100d8c <POWER_SPI_RW+0xf0>
41100d88:	00c00044 	movi	r3,1
41100d8c:	00900034 	movhi	r2,16384
41100d90:	10823804 	addi	r2,r2,2272
41100d94:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
41100d98:	010003c4 	movi	r4,15
41100d9c:	11162640 	call	41116264 <usleep>
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
41100da0:	00000306 	br	41100db0 <POWER_SPI_RW+0x114>
        nWait++;
41100da4:	e0bff817 	ldw	r2,-32(fp)
41100da8:	10800044 	addi	r2,r2,1
41100dac:	e0bff815 	stw	r2,-32(fp)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
    SPI_CS_N(IcIndex, 0);  // chip select: active
    SPI_DELAY;
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
41100db0:	00900034 	movhi	r2,16384
41100db4:	10824404 	addi	r2,r2,2320
41100db8:	10800037 	ldwio	r2,0(r2)
41100dbc:	1080004c 	andi	r2,r2,1
41100dc0:	10000326 	beq	r2,zero,41100dd0 <POWER_SPI_RW+0x134>
41100dc4:	e0fff817 	ldw	r3,-32(fp)
41100dc8:	e0bffa17 	ldw	r2,-24(fp)
41100dcc:	18bff516 	blt	r3,r2,41100da4 <__reset+0xbb0e0da4>
        nWait++;
    }
    
    if (SPI_SDO){
41100dd0:	00900034 	movhi	r2,16384
41100dd4:	10824404 	addi	r2,r2,2320
41100dd8:	10800037 	ldwio	r2,0(r2)
41100ddc:	1080004c 	andi	r2,r2,1
41100de0:	10000626 	beq	r2,zero,41100dfc <POWER_SPI_RW+0x160>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
41100de4:	00c000c4 	movi	r3,3
41100de8:	00900034 	movhi	r2,16384
41100dec:	10823804 	addi	r2,r2,2272
41100df0:	10c00035 	stwio	r3,0(r2)
//        printf("Timeout \r\n");
        return FALSE;
41100df4:	0005883a 	mov	r2,zero
41100df8:	0000db06 	br	41101168 <POWER_SPI_RW+0x4cc>
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
41100dfc:	e03ff715 	stw	zero,-36(fp)
41100e00:	00002406 	br	41100e94 <POWER_SPI_RW+0x1f8>
    // ignore EOC/ and DMY bits
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
41100e04:	e0bff403 	ldbu	r2,-48(fp)
41100e08:	10803fcc 	andi	r2,r2,255
41100e0c:	1004d1fa 	srli	r2,r2,7
41100e10:	10c03fcc 	andi	r3,r2,255
41100e14:	00900034 	movhi	r2,16384
41100e18:	10824004 	addi	r2,r2,2304
41100e1c:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
41100e20:	e0bff403 	ldbu	r2,-48(fp)
41100e24:	1085883a 	add	r2,r2,r2
41100e28:	e0bff405 	stb	r2,-48(fp)
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
41100e2c:	e0bff517 	ldw	r2,-44(fp)
41100e30:	1085883a 	add	r2,r2,r2
41100e34:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
41100e38:	00900034 	movhi	r2,16384
41100e3c:	10824404 	addi	r2,r2,2320
41100e40:	10800037 	ldwio	r2,0(r2)
41100e44:	1080004c 	andi	r2,r2,1
41100e48:	1007883a 	mov	r3,r2
41100e4c:	e0bff517 	ldw	r2,-44(fp)
41100e50:	10c4b03a 	or	r2,r2,r3
41100e54:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
41100e58:	00c00044 	movi	r3,1
41100e5c:	00900034 	movhi	r2,16384
41100e60:	10823c04 	addi	r2,r2,2288
41100e64:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41100e68:	010003c4 	movi	r4,15
41100e6c:	11162640 	call	41116264 <usleep>
        SPI_SCK(0);//sck=0; // clock low
41100e70:	0007883a 	mov	r3,zero
41100e74:	00900034 	movhi	r2,16384
41100e78:	10823c04 	addi	r2,r2,2288
41100e7c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41100e80:	010003c4 	movi	r4,15
41100e84:	11162640 	call	41116264 <usleep>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
//        printf("Timeout \r\n");
        return FALSE;
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
41100e88:	e0bff717 	ldw	r2,-36(fp)
41100e8c:	10800044 	addi	r2,r2,1
41100e90:	e0bff715 	stw	r2,-36(fp)
41100e94:	e0bff717 	ldw	r2,-36(fp)
41100e98:	10800090 	cmplti	r2,r2,2
41100e9c:	103fd91e 	bne	r2,zero,41100e04 <__reset+0xbb0e0e04>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
41100ea0:	e03ff715 	stw	zero,-36(fp)
41100ea4:	00002406 	br	41100f38 <POWER_SPI_RW+0x29c>
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
41100ea8:	e0bff403 	ldbu	r2,-48(fp)
41100eac:	10803fcc 	andi	r2,r2,255
41100eb0:	1004d1fa 	srli	r2,r2,7
41100eb4:	10c03fcc 	andi	r3,r2,255
41100eb8:	00900034 	movhi	r2,16384
41100ebc:	10824004 	addi	r2,r2,2304
41100ec0:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
41100ec4:	e0bff403 	ldbu	r2,-48(fp)
41100ec8:	1085883a 	add	r2,r2,r2
41100ecc:	e0bff405 	stb	r2,-48(fp)
        
        Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
41100ed0:	e0bff517 	ldw	r2,-44(fp)
41100ed4:	1085883a 	add	r2,r2,r2
41100ed8:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
41100edc:	00900034 	movhi	r2,16384
41100ee0:	10824404 	addi	r2,r2,2320
41100ee4:	10800037 	ldwio	r2,0(r2)
41100ee8:	1080004c 	andi	r2,r2,1
41100eec:	1007883a 	mov	r3,r2
41100ef0:	e0bff517 	ldw	r2,-44(fp)
41100ef4:	10c4b03a 	or	r2,r2,r3
41100ef8:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
41100efc:	00c00044 	movi	r3,1
41100f00:	00900034 	movhi	r2,16384
41100f04:	10823c04 	addi	r2,r2,2288
41100f08:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41100f0c:	010003c4 	movi	r4,15
41100f10:	11162640 	call	41116264 <usleep>
        SPI_SCK(0);//sck=0; // clock low
41100f14:	0007883a 	mov	r3,zero
41100f18:	00900034 	movhi	r2,16384
41100f1c:	10823c04 	addi	r2,r2,2288
41100f20:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41100f24:	010003c4 	movi	r4,15
41100f28:	11162640 	call	41116264 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
41100f2c:	e0bff717 	ldw	r2,-36(fp)
41100f30:	10800044 	addi	r2,r2,1
41100f34:	e0bff715 	stw	r2,-36(fp)
41100f38:	e0bff717 	ldw	r2,-36(fp)
41100f3c:	10800210 	cmplti	r2,r2,8
41100f40:	103fd91e 	bne	r2,zero,41100ea8 <__reset+0xbb0e0ea8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
41100f44:	e03ff715 	stw	zero,-36(fp)
41100f48:	00001a06 	br	41100fb4 <POWER_SPI_RW+0x318>
    {
        Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
41100f4c:	e0bff517 	ldw	r2,-44(fp)
41100f50:	1085883a 	add	r2,r2,r2
41100f54:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
41100f58:	00900034 	movhi	r2,16384
41100f5c:	10824404 	addi	r2,r2,2320
41100f60:	10800037 	ldwio	r2,0(r2)
41100f64:	1080004c 	andi	r2,r2,1
41100f68:	1007883a 	mov	r3,r2
41100f6c:	e0bff517 	ldw	r2,-44(fp)
41100f70:	10c4b03a 	or	r2,r2,r3
41100f74:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
41100f78:	00c00044 	movi	r3,1
41100f7c:	00900034 	movhi	r2,16384
41100f80:	10823c04 	addi	r2,r2,2288
41100f84:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41100f88:	010003c4 	movi	r4,15
41100f8c:	11162640 	call	41116264 <usleep>
        SPI_SCK(0);//sck=0; // clock low
41100f90:	0007883a 	mov	r3,zero
41100f94:	00900034 	movhi	r2,16384
41100f98:	10823c04 	addi	r2,r2,2288
41100f9c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41100fa0:	010003c4 	movi	r4,15
41100fa4:	11162640 	call	41116264 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
41100fa8:	e0bff717 	ldw	r2,-36(fp)
41100fac:	10800044 	addi	r2,r2,1
41100fb0:	e0bff715 	stw	r2,-36(fp)
41100fb4:	e0bff717 	ldw	r2,-36(fp)
41100fb8:	10800210 	cmplti	r2,r2,8
41100fbc:	103fe31e 	bne	r2,zero,41100f4c <__reset+0xbb0e0f4c>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
41100fc0:	e03ff715 	stw	zero,-36(fp)
41100fc4:	00001a06 	br	41101030 <POWER_SPI_RW+0x394>
    {
        Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
41100fc8:	e0bff517 	ldw	r2,-44(fp)
41100fcc:	1085883a 	add	r2,r2,r2
41100fd0:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_1.0 = sdo; // load lsb
41100fd4:	00900034 	movhi	r2,16384
41100fd8:	10824404 	addi	r2,r2,2320
41100fdc:	10800037 	ldwio	r2,0(r2)
41100fe0:	1080004c 	andi	r2,r2,1
41100fe4:	1007883a 	mov	r3,r2
41100fe8:	e0bff517 	ldw	r2,-44(fp)
41100fec:	10c4b03a 	or	r2,r2,r3
41100ff0:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
41100ff4:	00c00044 	movi	r3,1
41100ff8:	00900034 	movhi	r2,16384
41100ffc:	10823c04 	addi	r2,r2,2288
41101000:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41101004:	010003c4 	movi	r4,15
41101008:	11162640 	call	41116264 <usleep>
        SPI_SCK(0);//sck=0; // clock low
4110100c:	0007883a 	mov	r3,zero
41101010:	00900034 	movhi	r2,16384
41101014:	10823c04 	addi	r2,r2,2288
41101018:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
4110101c:	010003c4 	movi	r4,15
41101020:	11162640 	call	41116264 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
41101024:	e0bff717 	ldw	r2,-36(fp)
41101028:	10800044 	addi	r2,r2,1
4110102c:	e0bff715 	stw	r2,-36(fp)
41101030:	e0bff717 	ldw	r2,-36(fp)
41101034:	10800210 	cmplti	r2,r2,8
41101038:	103fe31e 	bne	r2,zero,41100fc8 <__reset+0xbb0e0fc8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
4110103c:	e03ff715 	stw	zero,-36(fp)
41101040:	00001a06 	br	411010ac <POWER_SPI_RW+0x410>
    {
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
41101044:	e0bff517 	ldw	r2,-44(fp)
41101048:	1085883a 	add	r2,r2,r2
4110104c:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
41101050:	00900034 	movhi	r2,16384
41101054:	10824404 	addi	r2,r2,2320
41101058:	10800037 	ldwio	r2,0(r2)
4110105c:	1080004c 	andi	r2,r2,1
41101060:	1007883a 	mov	r3,r2
41101064:	e0bff517 	ldw	r2,-44(fp)
41101068:	10c4b03a 	or	r2,r2,r3
4110106c:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
41101070:	00c00044 	movi	r3,1
41101074:	00900034 	movhi	r2,16384
41101078:	10823c04 	addi	r2,r2,2288
4110107c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41101080:	010003c4 	movi	r4,15
41101084:	11162640 	call	41116264 <usleep>
        SPI_SCK(0);//sck=0; // clock low
41101088:	0007883a 	mov	r3,zero
4110108c:	00900034 	movhi	r2,16384
41101090:	10823c04 	addi	r2,r2,2288
41101094:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41101098:	010003c4 	movi	r4,15
4110109c:	11162640 	call	41116264 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
411010a0:	e0bff717 	ldw	r2,-36(fp)
411010a4:	10800044 	addi	r2,r2,1
411010a8:	e0bff715 	stw	r2,-36(fp)
411010ac:	e0bff717 	ldw	r2,-36(fp)
411010b0:	10800190 	cmplti	r2,r2,6
411010b4:	103fe31e 	bne	r2,zero,41101044 <__reset+0xbb0e1044>
        SPI_SCK(1);//sck=1; // clock high
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    SPI_SCK(1);
411010b8:	00c00044 	movi	r3,1
411010bc:	00900034 	movhi	r2,16384
411010c0:	10823c04 	addi	r2,r2,2288
411010c4:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
411010c8:	010003c4 	movi	r4,15
411010cc:	11162640 	call	41116264 <usleep>
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
411010d0:	00c000c4 	movi	r3,3
411010d4:	00900034 	movhi	r2,16384
411010d8:	10823804 	addi	r2,r2,2272
411010dc:	10c00035 	stwio	r3,0(r2)
    
    // check parity
    nZeroCnt = 0;
411010e0:	e03ff915 	stw	zero,-28(fp)
    Mask32 = 0x01;
411010e4:	00800044 	movi	r2,1
411010e8:	e0bff615 	stw	r2,-40(fp)
    for(i=0;i<32;i++){
411010ec:	e03ff715 	stw	zero,-36(fp)
411010f0:	00000d06 	br	41101128 <POWER_SPI_RW+0x48c>
        if ((Value32 & Mask32) == 0x00){
411010f4:	e0fff517 	ldw	r3,-44(fp)
411010f8:	e0bff617 	ldw	r2,-40(fp)
411010fc:	1884703a 	and	r2,r3,r2
41101100:	1000031e 	bne	r2,zero,41101110 <POWER_SPI_RW+0x474>
            nZeroCnt++;
41101104:	e0bff917 	ldw	r2,-28(fp)
41101108:	10800044 	addi	r2,r2,1
4110110c:	e0bff915 	stw	r2,-28(fp)
        }
        Mask32 <<= 1;
41101110:	e0bff617 	ldw	r2,-40(fp)
41101114:	1085883a 	add	r2,r2,r2
41101118:	e0bff615 	stw	r2,-40(fp)
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
    
    // check parity
    nZeroCnt = 0;
    Mask32 = 0x01;
    for(i=0;i<32;i++){
4110111c:	e0bff717 	ldw	r2,-36(fp)
41101120:	10800044 	addi	r2,r2,1
41101124:	e0bff715 	stw	r2,-36(fp)
41101128:	e0bff717 	ldw	r2,-36(fp)
4110112c:	10800810 	cmplti	r2,r2,32
41101130:	103ff01e 	bne	r2,zero,411010f4 <__reset+0xbb0e10f4>
        if ((Value32 & Mask32) == 0x00){
            nZeroCnt++;
        }
        Mask32 <<= 1;
    }
    bSuccess = (nZeroCnt&0x01)?FALSE:TRUE;
41101134:	e0bff917 	ldw	r2,-28(fp)
41101138:	1080004c 	andi	r2,r2,1
4110113c:	1005003a 	cmpeq	r2,r2,zero
41101140:	10803fcc 	andi	r2,r2,255
41101144:	e0bffb15 	stw	r2,-20(fp)
    if (!bSuccess){
41101148:	e0bffb17 	ldw	r2,-20(fp)
4110114c:	1000021e 	bne	r2,zero,41101158 <POWER_SPI_RW+0x4bc>
//        printf("Parity Check Error \r\n");
        return FALSE;
41101150:	0005883a 	mov	r2,zero
41101154:	00000406 	br	41101168 <POWER_SPI_RW+0x4cc>
    }        
    
    
    *pValue = Value32;
41101158:	e0800317 	ldw	r2,12(fp)
4110115c:	e0fff517 	ldw	r3,-44(fp)
41101160:	10c00015 	stw	r3,0(r2)
    
    return bSuccess;
41101164:	e0bffb17 	ldw	r2,-20(fp)
}
41101168:	e037883a 	mov	sp,fp
4110116c:	dfc00117 	ldw	ra,4(sp)
41101170:	df000017 	ldw	fp,0(sp)
41101174:	dec00204 	addi	sp,sp,8
41101178:	f800283a 	ret

4110117c <v_spi_start>:
#define SPI_CS_N(x) IOWR_ALTERA_AVALON_PIO_DATA(RTCC_CS_N_BASE,x)
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(RTCC_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(RTCC_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(150)  // based on 50MHZ of CPU clock

void v_spi_start(void){
4110117c:	defffe04 	addi	sp,sp,-8
41101180:	dfc00115 	stw	ra,4(sp)
41101184:	df000015 	stw	fp,0(sp)
41101188:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
4110118c:	0007883a 	mov	r3,zero
41101190:	00900034 	movhi	r2,16384
41101194:	10822004 	addi	r2,r2,2176
41101198:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
4110119c:	0007883a 	mov	r3,zero
411011a0:	00900034 	movhi	r2,16384
411011a4:	10821c04 	addi	r2,r2,2160
411011a8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
411011ac:	01002584 	movi	r4,150
411011b0:	11162640 	call	41116264 <usleep>
}
411011b4:	0001883a 	nop
411011b8:	e037883a 	mov	sp,fp
411011bc:	dfc00117 	ldw	ra,4(sp)
411011c0:	df000017 	ldw	fp,0(sp)
411011c4:	dec00204 	addi	sp,sp,8
411011c8:	f800283a 	ret

411011cc <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
411011cc:	defffc04 	addi	sp,sp,-16
411011d0:	dfc00315 	stw	ra,12(sp)
411011d4:	df000215 	stw	fp,8(sp)
411011d8:	df000204 	addi	fp,sp,8
411011dc:	2005883a 	mov	r2,r4
411011e0:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
411011e4:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
411011e8:	00bfe004 	movi	r2,-128
411011ec:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
411011f0:	e03ffe05 	stb	zero,-8(fp)
411011f4:	00001b06 	br	41101264 <v_spi_send_byte+0x98>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
411011f8:	e0ffff03 	ldbu	r3,-4(fp)
411011fc:	e0bffe43 	ldbu	r2,-7(fp)
41101200:	1884703a 	and	r2,r3,r2
41101204:	10803fcc 	andi	r2,r2,255
41101208:	1004c03a 	cmpne	r2,r2,zero
4110120c:	10c03fcc 	andi	r3,r2,255
41101210:	00900034 	movhi	r2,16384
41101214:	10822404 	addi	r2,r2,2192
41101218:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
4110121c:	e0bffe43 	ldbu	r2,-7(fp)
41101220:	1004d07a 	srli	r2,r2,1
41101224:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
41101228:	00c00044 	movi	r3,1
4110122c:	00900034 	movhi	r2,16384
41101230:	10822004 	addi	r2,r2,2176
41101234:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41101238:	01002584 	movi	r4,150
4110123c:	11162640 	call	41116264 <usleep>
        SPI_SCK(0);//sck=0; // clock low
41101240:	0007883a 	mov	r3,zero
41101244:	00900034 	movhi	r2,16384
41101248:	10822004 	addi	r2,r2,2176
4110124c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
41101250:	01002584 	movi	r4,150
41101254:	11162640 	call	41116264 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
41101258:	e0bffe03 	ldbu	r2,-8(fp)
4110125c:	10800044 	addi	r2,r2,1
41101260:	e0bffe05 	stb	r2,-8(fp)
41101264:	e0bffe03 	ldbu	r2,-8(fp)
41101268:	10800230 	cmpltui	r2,r2,8
4110126c:	103fe21e 	bne	r2,zero,411011f8 <__reset+0xbb0e11f8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
41101270:	0001883a 	nop
41101274:	e037883a 	mov	sp,fp
41101278:	dfc00117 	ldw	ra,4(sp)
4110127c:	df000017 	ldw	fp,0(sp)
41101280:	dec00204 	addi	sp,sp,8
41101284:	f800283a 	ret

41101288 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
41101288:	defffd04 	addi	sp,sp,-12
4110128c:	dfc00215 	stw	ra,8(sp)
41101290:	df000115 	stw	fp,4(sp)
41101294:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
41101298:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
4110129c:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
411012a0:	e03fff05 	stb	zero,-4(fp)
411012a4:	00001a06 	br	41101310 <uc_spi_get_byte+0x88>
    {
        uc_data <<= 1;
411012a8:	e0bfff43 	ldbu	r2,-3(fp)
411012ac:	1085883a 	add	r2,r2,r2
411012b0:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
411012b4:	00900034 	movhi	r2,16384
411012b8:	10822804 	addi	r2,r2,2208
411012bc:	10800037 	ldwio	r2,0(r2)
411012c0:	1080004c 	andi	r2,r2,1
411012c4:	1007883a 	mov	r3,r2
411012c8:	e0bfff43 	ldbu	r2,-3(fp)
411012cc:	1884b03a 	or	r2,r3,r2
411012d0:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
411012d4:	00c00044 	movi	r3,1
411012d8:	00900034 	movhi	r2,16384
411012dc:	10822004 	addi	r2,r2,2176
411012e0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
411012e4:	01002584 	movi	r4,150
411012e8:	11162640 	call	41116264 <usleep>
        SPI_SCK(0);//sck=0; // clock low
411012ec:	0007883a 	mov	r3,zero
411012f0:	00900034 	movhi	r2,16384
411012f4:	10822004 	addi	r2,r2,2176
411012f8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
411012fc:	01002584 	movi	r4,150
41101300:	11162640 	call	41116264 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
41101304:	e0bfff03 	ldbu	r2,-4(fp)
41101308:	10800044 	addi	r2,r2,1
4110130c:	e0bfff05 	stb	r2,-4(fp)
41101310:	e0bfff03 	ldbu	r2,-4(fp)
41101314:	10800230 	cmpltui	r2,r2,8
41101318:	103fe31e 	bne	r2,zero,411012a8 <__reset+0xbb0e12a8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
4110131c:	e0bfff43 	ldbu	r2,-3(fp)
}
41101320:	e037883a 	mov	sp,fp
41101324:	dfc00117 	ldw	ra,4(sp)
41101328:	df000017 	ldw	fp,0(sp)
4110132c:	dec00204 	addi	sp,sp,8
41101330:	f800283a 	ret

41101334 <v_spi_end>:

void v_spi_end(void){
41101334:	defffe04 	addi	sp,sp,-8
41101338:	dfc00115 	stw	ra,4(sp)
4110133c:	df000015 	stw	fp,0(sp)
41101340:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
41101344:	0007883a 	mov	r3,zero
41101348:	00900034 	movhi	r2,16384
4110134c:	10822004 	addi	r2,r2,2176
41101350:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
41101354:	01002584 	movi	r4,150
41101358:	11162640 	call	41116264 <usleep>
    SPI_CS_N(1);
4110135c:	00c00044 	movi	r3,1
41101360:	00900034 	movhi	r2,16384
41101364:	10821c04 	addi	r2,r2,2160
41101368:	10c00035 	stwio	r3,0(r2)
}
4110136c:	0001883a 	nop
41101370:	e037883a 	mov	sp,fp
41101374:	dfc00117 	ldw	ra,4(sp)
41101378:	df000017 	ldw	fp,0(sp)
4110137c:	dec00204 	addi	sp,sp,8
41101380:	f800283a 	ret

41101384 <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
41101384:	defff404 	addi	sp,sp,-48
41101388:	dfc00b15 	stw	ra,44(sp)
4110138c:	df000a15 	stw	fp,40(sp)
41101390:	df000a04 	addi	fp,sp,40
41101394:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
41101398:	e03ff915 	stw	zero,-28(fp)

    alt_u8 uc_EUI48_B0 = 0;
4110139c:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 uc_EUI48_B1 = 0;
411013a0:	e03ffa45 	stb	zero,-23(fp)
    alt_u8 uc_EUI48_B2 = 0;
411013a4:	e03ffa85 	stb	zero,-22(fp)
    alt_u8 uc_EUI48_B3 = 0;
411013a8:	e03ffac5 	stb	zero,-21(fp)
    alt_u8 uc_EUI48_B4 = 0;
411013ac:	e03ffb05 	stb	zero,-20(fp)
    alt_u8 uc_EUI48_B5 = 0;
411013b0:	e03ffb45 	stb	zero,-19(fp)

    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
411013b4:	00800084 	movi	r2,2
411013b8:	e0bffb85 	stb	r2,-18(fp)
    const alt_u8 uc_EUI48_B1_addr = 0x03;
411013bc:	008000c4 	movi	r2,3
411013c0:	e0bffbc5 	stb	r2,-17(fp)
    const alt_u8 uc_EUI48_B2_addr = 0x04;
411013c4:	00800104 	movi	r2,4
411013c8:	e0bffc05 	stb	r2,-16(fp)
    const alt_u8 uc_EUI48_B3_addr = 0x05;
411013cc:	00800144 	movi	r2,5
411013d0:	e0bffc45 	stb	r2,-15(fp)
    const alt_u8 uc_EUI48_B4_addr = 0x06;
411013d4:	00800184 	movi	r2,6
411013d8:	e0bffc85 	stb	r2,-14(fp)
    const alt_u8 uc_EUI48_B5_addr = 0x07;
411013dc:	008001c4 	movi	r2,7
411013e0:	e0bffcc5 	stb	r2,-13(fp)

    const alt_u8 uc_IDREAD_cmd = 0x33;
411013e4:	00800cc4 	movi	r2,51
411013e8:	e0bffd05 	stb	r2,-12(fp)

    int i = 0;
411013ec:	e03ffe15 	stw	zero,-8(fp)
    
    // Start Communication
    v_spi_start();
411013f0:	110117c0 	call	4110117c <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
411013f4:	e0bffd03 	ldbu	r2,-12(fp)
411013f8:	1009883a 	mov	r4,r2
411013fc:	11011cc0 	call	411011cc <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
41101400:	e0bffb83 	ldbu	r2,-18(fp)
41101404:	1009883a 	mov	r4,r2
41101408:	11011cc0 	call	411011cc <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
4110140c:	11012880 	call	41101288 <uc_spi_get_byte>
41101410:	e0bffa05 	stb	r2,-24(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
41101414:	11012880 	call	41101288 <uc_spi_get_byte>
41101418:	e0bffa45 	stb	r2,-23(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
4110141c:	11012880 	call	41101288 <uc_spi_get_byte>
41101420:	e0bffa85 	stb	r2,-22(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
41101424:	11012880 	call	41101288 <uc_spi_get_byte>
41101428:	e0bffac5 	stb	r2,-21(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
4110142c:	11012880 	call	41101288 <uc_spi_get_byte>
41101430:	e0bffb05 	stb	r2,-20(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
41101434:	11012880 	call	41101288 <uc_spi_get_byte>
41101438:	e0bffb45 	stb	r2,-19(fp)

    // End communication
    v_spi_end();
4110143c:	11013340 	call	41101334 <v_spi_end>

    bSuccess = TRUE;
41101440:	00800044 	movi	r2,1
41101444:	e0bff915 	stw	r2,-28(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
41101448:	e0bfff17 	ldw	r2,-4(fp)
4110144c:	e0fffa03 	ldbu	r3,-24(fp)
41101450:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
41101454:	e0bfff17 	ldw	r2,-4(fp)
41101458:	10800044 	addi	r2,r2,1
4110145c:	e0fffa43 	ldbu	r3,-23(fp)
41101460:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
41101464:	e0bfff17 	ldw	r2,-4(fp)
41101468:	10800084 	addi	r2,r2,2
4110146c:	e0fffa83 	ldbu	r3,-22(fp)
41101470:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
41101474:	e0bfff17 	ldw	r2,-4(fp)
41101478:	108000c4 	addi	r2,r2,3
4110147c:	e0fffac3 	ldbu	r3,-21(fp)
41101480:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
41101484:	e0bfff17 	ldw	r2,-4(fp)
41101488:	10800104 	addi	r2,r2,4
4110148c:	e0fffb03 	ldbu	r3,-20(fp)
41101490:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
41101494:	e0bfff17 	ldw	r2,-4(fp)
41101498:	10800144 	addi	r2,r2,5
4110149c:	e0fffb43 	ldbu	r3,-19(fp)
411014a0:	10c00005 	stb	r3,0(r2)

    printf("RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
411014a4:	e17ffa03 	ldbu	r5,-24(fp)
411014a8:	e1bffa43 	ldbu	r6,-23(fp)
411014ac:	e1fffa83 	ldbu	r7,-22(fp)
411014b0:	e0bffac3 	ldbu	r2,-21(fp)
411014b4:	e0fffb03 	ldbu	r3,-20(fp)
411014b8:	e13ffb43 	ldbu	r4,-19(fp)
411014bc:	d9000215 	stw	r4,8(sp)
411014c0:	d8c00115 	stw	r3,4(sp)
411014c4:	d8800015 	stw	r2,0(sp)
411014c8:	011044b4 	movhi	r4,16658
411014cc:	212abb04 	addi	r4,r4,-21780
411014d0:	11096480 	call	41109648 <printf>

    return bSuccess;
411014d4:	e0bff917 	ldw	r2,-28(fp)
}
411014d8:	e037883a 	mov	sp,fp
411014dc:	dfc00117 	ldw	ra,4(sp)
411014e0:	df000017 	ldw	fp,0(sp)
411014e4:	dec00204 	addi	sp,sp,8
411014e8:	f800283a 	ret

411014ec <SSDP_CONFIG>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool SSDP_CONFIG(alt_u8 SsdpConfig){
411014ec:	defffd04 	addi	sp,sp,-12
411014f0:	df000215 	stw	fp,8(sp)
411014f4:	df000204 	addi	fp,sp,8
411014f8:	2005883a 	mov	r2,r4
411014fc:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
41101500:	e0bfff03 	ldbu	r2,-4(fp)
41101504:	10c00168 	cmpgeui	r3,r2,5
41101508:	18001c1e 	bne	r3,zero,4110157c <SSDP_CONFIG+0x90>
4110150c:	100690ba 	slli	r3,r2,2
41101510:	00904434 	movhi	r2,16656
41101514:	10854904 	addi	r2,r2,5412
41101518:	1885883a 	add	r2,r3,r2
4110151c:	10800017 	ldw	r2,0(r2)
41101520:	1000683a 	jmp	r2
41101524:	41101538 	rdprs	r4,r8,16468
41101528:	41101544 	addi	r4,r8,16469
4110152c:	41101550 	cmplti	r4,r8,16469
41101530:	41101564 	muli	r4,r8,16469
41101534:	41101574 	orhi	r4,r8,16469
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
41101538:	00800cc4 	movi	r2,51
4110153c:	d0a01e05 	stb	r2,-32648(gp)
	    break;
41101540:	00001006 	br	41101584 <SSDP_CONFIG+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
41101544:	00801544 	movi	r2,85
41101548:	d0a01e05 	stb	r2,-32648(gp)
	    break;
4110154c:	00000d06 	br	41101584 <SSDP_CONFIG+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
41101550:	d0e01e03 	ldbu	r3,-32648(gp)
41101554:	00bff744 	movi	r2,-35
41101558:	1884703a 	and	r2,r3,r2
4110155c:	d0a01e05 	stb	r2,-32648(gp)
	    break;
41101560:	00000806 	br	41101584 <SSDP_CONFIG+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
41101564:	d0a01e03 	ldbu	r2,-32648(gp)
41101568:	10800894 	ori	r2,r2,34
4110156c:	d0a01e05 	stb	r2,-32648(gp)
	    break;
41101570:	00000406 	br	41101584 <SSDP_CONFIG+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
41101574:	d0201e05 	stb	zero,-32648(gp)
	    break;
41101578:	00000206 	br	41101584 <SSDP_CONFIG+0x98>
		
		default:
		    return FALSE;
4110157c:	0005883a 	mov	r2,zero
41101580:	00000806 	br	411015a4 <SSDP_CONFIG+0xb8>
	}

	alt_u32 *pSsdpAddr = SSDP_BASE;
41101584:	00900034 	movhi	r2,16384
41101588:	10827404 	addi	r2,r2,2512
4110158c:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
41101590:	d0a01e03 	ldbu	r2,-32648(gp)
41101594:	10c03fcc 	andi	r3,r2,255
41101598:	e0bffe17 	ldw	r2,-8(fp)
4110159c:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
411015a0:	00800044 	movi	r2,1
}
411015a4:	e037883a 	mov	sp,fp
411015a8:	df000017 	ldw	fp,0(sp)
411015ac:	dec00104 	addi	sp,sp,4
411015b0:	f800283a 	ret

411015b4 <SSDP_UPDATE>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool SSDP_UPDATE(alt_u8 SsdpData){
411015b4:	defffd04 	addi	sp,sp,-12
411015b8:	df000215 	stw	fp,8(sp)
411015bc:	df000204 	addi	fp,sp,8
411015c0:	2005883a 	mov	r2,r4
411015c4:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = SSDP_BASE;
411015c8:	00900034 	movhi	r2,16384
411015cc:	10827404 	addi	r2,r2,2512
411015d0:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
411015d4:	e0bffe17 	ldw	r2,-8(fp)
411015d8:	10800104 	addi	r2,r2,4
411015dc:	e0ffff03 	ldbu	r3,-4(fp)
411015e0:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
411015e4:	00800044 	movi	r2,1
}
411015e8:	e037883a 	mov	sp,fp
411015ec:	df000017 	ldw	fp,0(sp)
411015f0:	dec00104 	addi	sp,sp,4
411015f4:	f800283a 	ret

411015f8 <handle_irq>:
 * @param [in] void* context
 *
 * @retval void
 */
PUBLIC void handle_irq(void* context)
{
411015f8:	defffd04 	addi	sp,sp,-12
411015fc:	df000215 	stw	fp,8(sp)
41101600:	df000204 	addi	fp,sp,8
41101604:	e13fff15 	stw	r4,-4(fp)
    // Cast context to hold_context's type. It is important that this be 
    // declared volatile to avoid unwanted compiler optimization.
    volatile int* hold_context_ptr = (volatile int*) context;
41101608:	e0bfff17 	ldw	r2,-4(fp)
4110160c:	e0bffe15 	stw	r2,-8(fp)
    // Use context value according to your app logic...
    //*hold_context_ptr = ...;
    // if (*hold_context_ptr == '0') {}...
    // App logic sequence...
    n += 1;
41101610:	d0a02003 	ldbu	r2,-32640(gp)
41101614:	10800044 	addi	r2,r2,1
41101618:	d0a02005 	stb	r2,-32640(gp)
}
4110161c:	0001883a 	nop
41101620:	e037883a 	mov	sp,fp
41101624:	df000017 	ldw	fp,0(sp)
41101628:	dec00104 	addi	sp,sp,4
4110162c:	f800283a 	ret

41101630 <init_interrupt>:
 * @param [in] void
 *
 * @retval void
 */
PUBLIC void init_interrupt(void)
{
41101630:	defffd04 	addi	sp,sp,-12
41101634:	dfc00215 	stw	ra,8(sp)
41101638:	df000115 	stw	fp,4(sp)
4110163c:	df000104 	addi	fp,sp,4
    // Recast the hold_context pointer to match the alt_irq_register() function
    // prototype.
    void* hold_context_ptr = (void*) &hold_context;
41101640:	d0a01f04 	addi	r2,gp,-32644
41101644:	e0bfff15 	stw	r2,-4(fp)
    // Register the interrupt handler
    alt_irq_register(SYNC_IRQ, hold_context_ptr, handle_irq);
41101648:	01904434 	movhi	r6,16656
4110164c:	31857e04 	addi	r6,r6,5624
41101650:	e17fff17 	ldw	r5,-4(fp)
41101654:	01000404 	movi	r4,16
41101658:	1115a400 	call	41115a40 <alt_irq_register>
}
4110165c:	0001883a 	nop
41101660:	e037883a 	mov	sp,fp
41101664:	dfc00117 	ldw	ra,4(sp)
41101668:	df000017 	ldw	fp,0(sp)
4110166c:	dec00204 	addi	sp,sp,8
41101670:	f800283a 	ret

41101674 <sync_status_extn_int>:
 * @param [in] void
 *
 * @retval bool result
 */
PUBLIC bool sync_status_extn_int(void)
{
41101674:	defffc04 	addi	sp,sp,-16
41101678:	dfc00315 	stw	ra,12(sp)
4110167c:	df000215 	stw	fp,8(sp)
41101680:	df000204 	addi	fp,sp,8
	alt_u32 aux;
	bool result;

	aux = read_reg(SYNC_STATUS_REG_OFFSET);
41101684:	0009883a 	mov	r4,zero
41101688:	11022ec0 	call	411022ec <read_reg>
4110168c:	e0bfff15 	stw	r2,-4(fp)

	if (aux & STATUS_EXTN_INT_MASK) {
41101690:	e0bfff17 	ldw	r2,-4(fp)
41101694:	1000030e 	bge	r2,zero,411016a4 <sync_status_extn_int+0x30>
		result = TRUE;
41101698:	00800044 	movi	r2,1
4110169c:	e0bffe15 	stw	r2,-8(fp)
411016a0:	00000106 	br	411016a8 <sync_status_extn_int+0x34>
	}
	else {
		result = FALSE;
411016a4:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
411016a8:	e0bffe17 	ldw	r2,-8(fp)
}
411016ac:	e037883a 	mov	sp,fp
411016b0:	dfc00117 	ldw	ra,4(sp)
411016b4:	df000017 	ldw	fp,0(sp)
411016b8:	dec00204 	addi	sp,sp,8
411016bc:	f800283a 	ret

411016c0 <sync_status_state>:
 * @param [in] void
 *
 * @retval alt_u8 result
 */
PUBLIC alt_u8 sync_status_state(void)
{
411016c0:	defffc04 	addi	sp,sp,-16
411016c4:	dfc00315 	stw	ra,12(sp)
411016c8:	df000215 	stw	fp,8(sp)
411016cc:	df000204 	addi	fp,sp,8
	alt_u32 aux;
	alt_u8 result;

	aux = read_reg(SYNC_STATUS_REG_OFFSET);
411016d0:	0009883a 	mov	r4,zero
411016d4:	11022ec0 	call	411022ec <read_reg>
411016d8:	e0bffe15 	stw	r2,-8(fp)
	result = (alt_u8) ((aux & STATUS_STATE_MASK) >> 16);
411016dc:	e0bffe17 	ldw	r2,-8(fp)
411016e0:	10803fec 	andhi	r2,r2,255
411016e4:	1004d43a 	srli	r2,r2,16
411016e8:	e0bfff05 	stb	r2,-4(fp)
	return result;
411016ec:	e0bfff03 	ldbu	r2,-4(fp)
}
411016f0:	e037883a 	mov	sp,fp
411016f4:	dfc00117 	ldw	ra,4(sp)
411016f8:	df000017 	ldw	fp,0(sp)
411016fc:	dec00204 	addi	sp,sp,8
41101700:	f800283a 	ret

41101704 <sync_status_error_code>:
 * @param [in] void
 *
 * @retval alt_u8 result
 */
PUBLIC alt_u8 sync_status_error_code(void)
{
41101704:	defffc04 	addi	sp,sp,-16
41101708:	dfc00315 	stw	ra,12(sp)
4110170c:	df000215 	stw	fp,8(sp)
41101710:	df000204 	addi	fp,sp,8
	alt_u32 aux;
	alt_u8 result;

	aux = read_reg(SYNC_STATUS_REG_OFFSET);
41101714:	0009883a 	mov	r4,zero
41101718:	11022ec0 	call	411022ec <read_reg>
4110171c:	e0bffe15 	stw	r2,-8(fp)
	result = (alt_u8) ((aux & STATUS_ERROR_CODE_MASK) >> 8);
41101720:	e0bffe17 	ldw	r2,-8(fp)
41101724:	10bfc00c 	andi	r2,r2,65280
41101728:	1004d23a 	srli	r2,r2,8
4110172c:	e0bfff05 	stb	r2,-4(fp)
	return result;
41101730:	e0bfff03 	ldbu	r2,-4(fp)
}
41101734:	e037883a 	mov	sp,fp
41101738:	dfc00117 	ldw	ra,4(sp)
4110173c:	df000017 	ldw	fp,0(sp)
41101740:	dec00204 	addi	sp,sp,8
41101744:	f800283a 	ret

41101748 <sync_status_cycle_number>:
 * @param [in] void
 *
 * @retval alt_u8 result
 */
PUBLIC alt_u8 sync_status_cycle_number(void)
{
41101748:	defffc04 	addi	sp,sp,-16
4110174c:	dfc00315 	stw	ra,12(sp)
41101750:	df000215 	stw	fp,8(sp)
41101754:	df000204 	addi	fp,sp,8
	alt_u32 aux;
	alt_u8 result;

	aux = read_reg(SYNC_STATUS_REG_OFFSET);
41101758:	0009883a 	mov	r4,zero
4110175c:	11022ec0 	call	411022ec <read_reg>
41101760:	e0bffe15 	stw	r2,-8(fp)
	result = (alt_u8) ((aux & STATUS_CYCLE_NUMBER_MASK) >> 0);
41101764:	e0bffe17 	ldw	r2,-8(fp)
41101768:	e0bfff05 	stb	r2,-4(fp)
	return result;
4110176c:	e0bfff03 	ldbu	r2,-4(fp)
}
41101770:	e037883a 	mov	sp,fp
41101774:	dfc00117 	ldw	ra,4(sp)
41101778:	df000017 	ldw	fp,0(sp)
4110177c:	dec00204 	addi	sp,sp,8
41101780:	f800283a 	ret

41101784 <sync_config_mbt>:
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_config_mbt(alt_u32 value)
{
41101784:	defffd04 	addi	sp,sp,-12
41101788:	dfc00215 	stw	ra,8(sp)
4110178c:	df000115 	stw	fp,4(sp)
41101790:	df000104 	addi	fp,sp,4
41101794:	e13fff15 	stw	r4,-4(fp)
	write_reg(SYNC_CONFIG_MBT_REG_OFFSET, value);
41101798:	e17fff17 	ldw	r5,-4(fp)
4110179c:	01000104 	movi	r4,4
411017a0:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
411017a4:	00800044 	movi	r2,1
}
411017a8:	e037883a 	mov	sp,fp
411017ac:	dfc00117 	ldw	ra,4(sp)
411017b0:	df000017 	ldw	fp,0(sp)
411017b4:	dec00204 	addi	sp,sp,8
411017b8:	f800283a 	ret

411017bc <sync_config_bt>:
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_config_bt(alt_u32 value)
{
411017bc:	defffd04 	addi	sp,sp,-12
411017c0:	dfc00215 	stw	ra,8(sp)
411017c4:	df000115 	stw	fp,4(sp)
411017c8:	df000104 	addi	fp,sp,4
411017cc:	e13fff15 	stw	r4,-4(fp)
	write_reg(SYNC_CONFIG_BT_REG_OFFSET, value);
411017d0:	e17fff17 	ldw	r5,-4(fp)
411017d4:	01000144 	movi	r4,5
411017d8:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
411017dc:	00800044 	movi	r2,1
}
411017e0:	e037883a 	mov	sp,fp
411017e4:	dfc00117 	ldw	ra,4(sp)
411017e8:	df000017 	ldw	fp,0(sp)
411017ec:	dec00204 	addi	sp,sp,8
411017f0:	f800283a 	ret

411017f4 <sync_config_per>:
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_config_per(alt_u32 value)
{
411017f4:	defffd04 	addi	sp,sp,-12
411017f8:	dfc00215 	stw	ra,8(sp)
411017fc:	df000115 	stw	fp,4(sp)
41101800:	df000104 	addi	fp,sp,4
41101804:	e13fff15 	stw	r4,-4(fp)
	write_reg(SYNC_CONFIG_PER_REG_OFFSET, value);
41101808:	e17fff17 	ldw	r5,-4(fp)
4110180c:	01000184 	movi	r4,6
41101810:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101814:	00800044 	movi	r2,1
}
41101818:	e037883a 	mov	sp,fp
4110181c:	dfc00117 	ldw	ra,4(sp)
41101820:	df000017 	ldw	fp,0(sp)
41101824:	dec00204 	addi	sp,sp,8
41101828:	f800283a 	ret

4110182c <sync_config_ost>:
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_config_ost(alt_u32 value)
{
4110182c:	defffd04 	addi	sp,sp,-12
41101830:	dfc00215 	stw	ra,8(sp)
41101834:	df000115 	stw	fp,4(sp)
41101838:	df000104 	addi	fp,sp,4
4110183c:	e13fff15 	stw	r4,-4(fp)
	write_reg(SYNC_CONFIG_OST_REG_OFFSET, value);
41101840:	e17fff17 	ldw	r5,-4(fp)
41101844:	010001c4 	movi	r4,7
41101848:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
4110184c:	00800044 	movi	r2,1
}
41101850:	e037883a 	mov	sp,fp
41101854:	dfc00117 	ldw	ra,4(sp)
41101858:	df000017 	ldw	fp,0(sp)
4110185c:	dec00204 	addi	sp,sp,8
41101860:	f800283a 	ret

41101864 <sync_config_polarity>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_config_polarity(bool value)
{
41101864:	defffc04 	addi	sp,sp,-16
41101868:	dfc00315 	stw	ra,12(sp)
4110186c:	df000215 	stw	fp,8(sp)
41101870:	df000204 	addi	fp,sp,8
41101874:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CONFIG_GENERAL_REG_OFFSET);
41101878:	01000204 	movi	r4,8
4110187c:	11022ec0 	call	411022ec <read_reg>
41101880:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101884:	e0bfff17 	ldw	r2,-4(fp)
41101888:	1000051e 	bne	r2,zero,411018a0 <sync_config_polarity+0x3c>
	aux &= ~CONFIG_GENERAL_POLARITY_MASK;
4110188c:	e0fffe17 	ldw	r3,-8(fp)
41101890:	00bfbfc4 	movi	r2,-257
41101894:	1884703a 	and	r2,r3,r2
41101898:	e0bffe15 	stw	r2,-8(fp)
4110189c:	00000306 	br	411018ac <sync_config_polarity+0x48>
	}
	else {
	aux |= CONFIG_GENERAL_POLARITY_MASK;
411018a0:	e0bffe17 	ldw	r2,-8(fp)
411018a4:	10804014 	ori	r2,r2,256
411018a8:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CONFIG_GENERAL_REG_OFFSET, aux);
411018ac:	e17ffe17 	ldw	r5,-8(fp)
411018b0:	01000204 	movi	r4,8
411018b4:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
411018b8:	00800044 	movi	r2,1
}
411018bc:	e037883a 	mov	sp,fp
411018c0:	dfc00117 	ldw	ra,4(sp)
411018c4:	df000017 	ldw	fp,0(sp)
411018c8:	dec00204 	addi	sp,sp,8
411018cc:	f800283a 	ret

411018d0 <sync_config_n_cycles>:
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_config_n_cycles(alt_u8 value)
{
411018d0:	defffc04 	addi	sp,sp,-16
411018d4:	dfc00315 	stw	ra,12(sp)
411018d8:	df000215 	stw	fp,8(sp)
411018dc:	df000204 	addi	fp,sp,8
411018e0:	2005883a 	mov	r2,r4
411018e4:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CONFIG_GENERAL_REG_OFFSET);
411018e8:	01000204 	movi	r4,8
411018ec:	11022ec0 	call	411022ec <read_reg>
411018f0:	e0bffe15 	stw	r2,-8(fp)
	aux &= ~CONFIG_GENERAL_N_CYCLES_MASK;
411018f4:	e0fffe17 	ldw	r3,-8(fp)
411018f8:	00bfc004 	movi	r2,-256
411018fc:	1884703a 	and	r2,r3,r2
41101900:	e0bffe15 	stw	r2,-8(fp)
	aux |= (alt_u32) value;
41101904:	e0bfff03 	ldbu	r2,-4(fp)
41101908:	e0fffe17 	ldw	r3,-8(fp)
4110190c:	1884b03a 	or	r2,r3,r2
41101910:	e0bffe15 	stw	r2,-8(fp)

	write_reg(SYNC_CONFIG_GENERAL_REG_OFFSET, aux);
41101914:	e17ffe17 	ldw	r5,-8(fp)
41101918:	01000204 	movi	r4,8
4110191c:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101920:	00800044 	movi	r2,1
}
41101924:	e037883a 	mov	sp,fp
41101928:	dfc00117 	ldw	ra,4(sp)
4110192c:	df000017 	ldw	fp,0(sp)
41101930:	dec00204 	addi	sp,sp,8
41101934:	f800283a 	ret

41101938 <sync_read_config_mbt>:
 * @param [in] void
 *
 * @retval alt_u32 value
 */
PUBLIC alt_u32 sync_read_config_mbt(void)
{
41101938:	defffd04 	addi	sp,sp,-12
4110193c:	dfc00215 	stw	ra,8(sp)
41101940:	df000115 	stw	fp,4(sp)
41101944:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CONFIG_MBT_REG_OFFSET);
41101948:	01000104 	movi	r4,4
4110194c:	11022ec0 	call	411022ec <read_reg>
41101950:	e0bfff15 	stw	r2,-4(fp)
 	return  aux;
41101954:	e0bfff17 	ldw	r2,-4(fp)
}
41101958:	e037883a 	mov	sp,fp
4110195c:	dfc00117 	ldw	ra,4(sp)
41101960:	df000017 	ldw	fp,0(sp)
41101964:	dec00204 	addi	sp,sp,8
41101968:	f800283a 	ret

4110196c <sync_read_config_bt>:
 * @param [in] void
 *
 * @retval alt_u32 value
 */
PUBLIC alt_u32 sync_read_config_bt(void)
{
4110196c:	defffd04 	addi	sp,sp,-12
41101970:	dfc00215 	stw	ra,8(sp)
41101974:	df000115 	stw	fp,4(sp)
41101978:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CONFIG_BT_REG_OFFSET);
4110197c:	01000144 	movi	r4,5
41101980:	11022ec0 	call	411022ec <read_reg>
41101984:	e0bfff15 	stw	r2,-4(fp)
 	return  aux;
41101988:	e0bfff17 	ldw	r2,-4(fp)
}
4110198c:	e037883a 	mov	sp,fp
41101990:	dfc00117 	ldw	ra,4(sp)
41101994:	df000017 	ldw	fp,0(sp)
41101998:	dec00204 	addi	sp,sp,8
4110199c:	f800283a 	ret

411019a0 <sync_read_config_per>:
 * @param [in] void
 *
 * @retval alt_u32 value
 */
PUBLIC alt_u32 sync_read_config_per(void)
{
411019a0:	defffd04 	addi	sp,sp,-12
411019a4:	dfc00215 	stw	ra,8(sp)
411019a8:	df000115 	stw	fp,4(sp)
411019ac:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CONFIG_PER_REG_OFFSET);
411019b0:	01000184 	movi	r4,6
411019b4:	11022ec0 	call	411022ec <read_reg>
411019b8:	e0bfff15 	stw	r2,-4(fp)
 	return  aux;
411019bc:	e0bfff17 	ldw	r2,-4(fp)
}
411019c0:	e037883a 	mov	sp,fp
411019c4:	dfc00117 	ldw	ra,4(sp)
411019c8:	df000017 	ldw	fp,0(sp)
411019cc:	dec00204 	addi	sp,sp,8
411019d0:	f800283a 	ret

411019d4 <sync_read_config_ost>:
 * @param [in] void
 *
 * @retval alt_u32 value
 */
PUBLIC alt_u32 sync_read_config_ost(void)
{
411019d4:	defffd04 	addi	sp,sp,-12
411019d8:	dfc00215 	stw	ra,8(sp)
411019dc:	df000115 	stw	fp,4(sp)
411019e0:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CONFIG_OST_REG_OFFSET);
411019e4:	010001c4 	movi	r4,7
411019e8:	11022ec0 	call	411022ec <read_reg>
411019ec:	e0bfff15 	stw	r2,-4(fp)
 	return  aux;
411019f0:	e0bfff17 	ldw	r2,-4(fp)
}
411019f4:	e037883a 	mov	sp,fp
411019f8:	dfc00117 	ldw	ra,4(sp)
411019fc:	df000017 	ldw	fp,0(sp)
41101a00:	dec00204 	addi	sp,sp,8
41101a04:	f800283a 	ret

41101a08 <sync_read_config_general>:
 * @param [in] void
 *
 * @retval alt_u32 value
 */
PUBLIC alt_u32 sync_read_config_general(void)
{
41101a08:	defffd04 	addi	sp,sp,-12
41101a0c:	dfc00215 	stw	ra,8(sp)
41101a10:	df000115 	stw	fp,4(sp)
41101a14:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CONFIG_GENERAL_REG_OFFSET);
41101a18:	01000204 	movi	r4,8
41101a1c:	11022ec0 	call	411022ec <read_reg>
41101a20:	e0bfff15 	stw	r2,-4(fp)
 	return  aux;
41101a24:	e0bfff17 	ldw	r2,-4(fp)
}
41101a28:	e037883a 	mov	sp,fp
41101a2c:	dfc00117 	ldw	ra,4(sp)
41101a30:	df000017 	ldw	fp,0(sp)
41101a34:	dec00204 	addi	sp,sp,8
41101a38:	f800283a 	ret

41101a3c <sync_err_inj>:
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_err_inj(alt_u32 value)
{
41101a3c:	defffd04 	addi	sp,sp,-12
41101a40:	dfc00215 	stw	ra,8(sp)
41101a44:	df000115 	stw	fp,4(sp)
41101a48:	df000104 	addi	fp,sp,4
41101a4c:	e13fff15 	stw	r4,-4(fp)
	write_reg(SYNC_ERR_INJ_REG_OFFSET, value);
41101a50:	e17fff17 	ldw	r5,-4(fp)
41101a54:	01000244 	movi	r4,9
41101a58:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101a5c:	00800044 	movi	r2,1
}
41101a60:	e037883a 	mov	sp,fp
41101a64:	dfc00117 	ldw	ra,4(sp)
41101a68:	df000017 	ldw	fp,0(sp)
41101a6c:	dec00204 	addi	sp,sp,8
41101a70:	f800283a 	ret

41101a74 <sync_ctr_extn_int>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_extn_int(bool value)
{
41101a74:	defffc04 	addi	sp,sp,-16
41101a78:	dfc00315 	stw	ra,12(sp)
41101a7c:	df000215 	stw	fp,8(sp)
41101a80:	df000204 	addi	fp,sp,8
41101a84:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101a88:	01000284 	movi	r4,10
41101a8c:	11022ec0 	call	411022ec <read_reg>
41101a90:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101a94:	e0bfff17 	ldw	r2,-4(fp)
41101a98:	1000061e 	bne	r2,zero,41101ab4 <sync_ctr_extn_int+0x40>
	aux &= ~CTR_EXTN_INT_MASK;
41101a9c:	e0fffe17 	ldw	r3,-8(fp)
41101aa0:	00a00034 	movhi	r2,32768
41101aa4:	10bfffc4 	addi	r2,r2,-1
41101aa8:	1884703a 	and	r2,r3,r2
41101aac:	e0bffe15 	stw	r2,-8(fp)
41101ab0:	00000306 	br	41101ac0 <sync_ctr_extn_int+0x4c>
	}
	else {
	aux |= CTR_EXTN_INT_MASK;
41101ab4:	e0bffe17 	ldw	r2,-8(fp)
41101ab8:	10a00034 	orhi	r2,r2,32768
41101abc:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101ac0:	e17ffe17 	ldw	r5,-8(fp)
41101ac4:	01000284 	movi	r4,10
41101ac8:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101acc:	00800044 	movi	r2,1
}
41101ad0:	e037883a 	mov	sp,fp
41101ad4:	dfc00117 	ldw	ra,4(sp)
41101ad8:	df000017 	ldw	fp,0(sp)
41101adc:	dec00204 	addi	sp,sp,8
41101ae0:	f800283a 	ret

41101ae4 <sync_ctr_start>:
 * @param [in] void
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_start(void)
{
41101ae4:	defffd04 	addi	sp,sp,-12
41101ae8:	dfc00215 	stw	ra,8(sp)
41101aec:	df000115 	stw	fp,4(sp)
41101af0:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101af4:	01000284 	movi	r4,10
41101af8:	11022ec0 	call	411022ec <read_reg>
41101afc:	e0bfff15 	stw	r2,-4(fp)

	aux |= CTR_START_MASK;
41101b00:	e0bfff17 	ldw	r2,-4(fp)
41101b04:	10800234 	orhi	r2,r2,8
41101b08:	e0bfff15 	stw	r2,-4(fp)

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101b0c:	e17fff17 	ldw	r5,-4(fp)
41101b10:	01000284 	movi	r4,10
41101b14:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101b18:	00800044 	movi	r2,1
}
41101b1c:	e037883a 	mov	sp,fp
41101b20:	dfc00117 	ldw	ra,4(sp)
41101b24:	df000017 	ldw	fp,0(sp)
41101b28:	dec00204 	addi	sp,sp,8
41101b2c:	f800283a 	ret

41101b30 <sync_ctr_reset>:
 * @param [in] void
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_reset(void)
{
41101b30:	defffd04 	addi	sp,sp,-12
41101b34:	dfc00215 	stw	ra,8(sp)
41101b38:	df000115 	stw	fp,4(sp)
41101b3c:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101b40:	01000284 	movi	r4,10
41101b44:	11022ec0 	call	411022ec <read_reg>
41101b48:	e0bfff15 	stw	r2,-4(fp)

	aux |= CTR_RESET_MASK;
41101b4c:	e0bfff17 	ldw	r2,-4(fp)
41101b50:	10800134 	orhi	r2,r2,4
41101b54:	e0bfff15 	stw	r2,-4(fp)

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101b58:	e17fff17 	ldw	r5,-4(fp)
41101b5c:	01000284 	movi	r4,10
41101b60:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101b64:	00800044 	movi	r2,1
}
41101b68:	e037883a 	mov	sp,fp
41101b6c:	dfc00117 	ldw	ra,4(sp)
41101b70:	df000017 	ldw	fp,0(sp)
41101b74:	dec00204 	addi	sp,sp,8
41101b78:	f800283a 	ret

41101b7c <sync_ctr_one_shot>:
 * @param [in] void
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_one_shot(void)
{
41101b7c:	defffd04 	addi	sp,sp,-12
41101b80:	dfc00215 	stw	ra,8(sp)
41101b84:	df000115 	stw	fp,4(sp)
41101b88:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101b8c:	01000284 	movi	r4,10
41101b90:	11022ec0 	call	411022ec <read_reg>
41101b94:	e0bfff15 	stw	r2,-4(fp)

	aux |= CTR_ONE_SHOT_MASK;
41101b98:	e0bfff17 	ldw	r2,-4(fp)
41101b9c:	108000b4 	orhi	r2,r2,2
41101ba0:	e0bfff15 	stw	r2,-4(fp)

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101ba4:	e17fff17 	ldw	r5,-4(fp)
41101ba8:	01000284 	movi	r4,10
41101bac:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101bb0:	00800044 	movi	r2,1
}
41101bb4:	e037883a 	mov	sp,fp
41101bb8:	dfc00117 	ldw	ra,4(sp)
41101bbc:	df000017 	ldw	fp,0(sp)
41101bc0:	dec00204 	addi	sp,sp,8
41101bc4:	f800283a 	ret

41101bc8 <sync_ctr_err_inj>:
 * @param [in] void
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_err_inj(void)
{
41101bc8:	defffd04 	addi	sp,sp,-12
41101bcc:	dfc00215 	stw	ra,8(sp)
41101bd0:	df000115 	stw	fp,4(sp)
41101bd4:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101bd8:	01000284 	movi	r4,10
41101bdc:	11022ec0 	call	411022ec <read_reg>
41101be0:	e0bfff15 	stw	r2,-4(fp)

	aux |= CTR_ERR_INJ_MASK;
41101be4:	e0bfff17 	ldw	r2,-4(fp)
41101be8:	10800074 	orhi	r2,r2,1
41101bec:	e0bfff15 	stw	r2,-4(fp)

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101bf0:	e17fff17 	ldw	r5,-4(fp)
41101bf4:	01000284 	movi	r4,10
41101bf8:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101bfc:	00800044 	movi	r2,1
}
41101c00:	e037883a 	mov	sp,fp
41101c04:	dfc00117 	ldw	ra,4(sp)
41101c08:	df000017 	ldw	fp,0(sp)
41101c0c:	dec00204 	addi	sp,sp,8
41101c10:	f800283a 	ret

41101c14 <sync_ctr_sync_out_enable>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_sync_out_enable(bool value)
{
41101c14:	defffc04 	addi	sp,sp,-16
41101c18:	dfc00315 	stw	ra,12(sp)
41101c1c:	df000215 	stw	fp,8(sp)
41101c20:	df000204 	addi	fp,sp,8
41101c24:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101c28:	01000284 	movi	r4,10
41101c2c:	11022ec0 	call	411022ec <read_reg>
41101c30:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101c34:	e0bfff17 	ldw	r2,-4(fp)
41101c38:	1000051e 	bne	r2,zero,41101c50 <sync_ctr_sync_out_enable+0x3c>
	aux &= ~CTR_SYNC_OUT_EN_MASK;
41101c3c:	e0fffe17 	ldw	r3,-8(fp)
41101c40:	00bfbfc4 	movi	r2,-257
41101c44:	1884703a 	and	r2,r3,r2
41101c48:	e0bffe15 	stw	r2,-8(fp)
41101c4c:	00000306 	br	41101c5c <sync_ctr_sync_out_enable+0x48>
	}
	else {
	aux |= CTR_SYNC_OUT_EN_MASK;
41101c50:	e0bffe17 	ldw	r2,-8(fp)
41101c54:	10804014 	ori	r2,r2,256
41101c58:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101c5c:	e17ffe17 	ldw	r5,-8(fp)
41101c60:	01000284 	movi	r4,10
41101c64:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101c68:	00800044 	movi	r2,1
}
41101c6c:	e037883a 	mov	sp,fp
41101c70:	dfc00117 	ldw	ra,4(sp)
41101c74:	df000017 	ldw	fp,0(sp)
41101c78:	dec00204 	addi	sp,sp,8
41101c7c:	f800283a 	ret

41101c80 <sync_ctr_cha_out_enable>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_cha_out_enable(bool value)
{
41101c80:	defffc04 	addi	sp,sp,-16
41101c84:	dfc00315 	stw	ra,12(sp)
41101c88:	df000215 	stw	fp,8(sp)
41101c8c:	df000204 	addi	fp,sp,8
41101c90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101c94:	01000284 	movi	r4,10
41101c98:	11022ec0 	call	411022ec <read_reg>
41101c9c:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101ca0:	e0bfff17 	ldw	r2,-4(fp)
41101ca4:	1000051e 	bne	r2,zero,41101cbc <sync_ctr_cha_out_enable+0x3c>
	aux &= ~CTR_CHA_EN_MASK;
41101ca8:	e0fffe17 	ldw	r3,-8(fp)
41101cac:	00bfff84 	movi	r2,-2
41101cb0:	1884703a 	and	r2,r3,r2
41101cb4:	e0bffe15 	stw	r2,-8(fp)
41101cb8:	00000306 	br	41101cc8 <sync_ctr_cha_out_enable+0x48>
	}
	else {
	aux |= CTR_CHA_EN_MASK;
41101cbc:	e0bffe17 	ldw	r2,-8(fp)
41101cc0:	10800054 	ori	r2,r2,1
41101cc4:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101cc8:	e17ffe17 	ldw	r5,-8(fp)
41101ccc:	01000284 	movi	r4,10
41101cd0:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101cd4:	00800044 	movi	r2,1
}
41101cd8:	e037883a 	mov	sp,fp
41101cdc:	dfc00117 	ldw	ra,4(sp)
41101ce0:	df000017 	ldw	fp,0(sp)
41101ce4:	dec00204 	addi	sp,sp,8
41101ce8:	f800283a 	ret

41101cec <sync_ctr_chb_out_enable>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_chb_out_enable(bool value)
{
41101cec:	defffc04 	addi	sp,sp,-16
41101cf0:	dfc00315 	stw	ra,12(sp)
41101cf4:	df000215 	stw	fp,8(sp)
41101cf8:	df000204 	addi	fp,sp,8
41101cfc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101d00:	01000284 	movi	r4,10
41101d04:	11022ec0 	call	411022ec <read_reg>
41101d08:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101d0c:	e0bfff17 	ldw	r2,-4(fp)
41101d10:	1000051e 	bne	r2,zero,41101d28 <sync_ctr_chb_out_enable+0x3c>
	aux &= ~CTR_CHB_EN_MASK;
41101d14:	e0fffe17 	ldw	r3,-8(fp)
41101d18:	00bfff44 	movi	r2,-3
41101d1c:	1884703a 	and	r2,r3,r2
41101d20:	e0bffe15 	stw	r2,-8(fp)
41101d24:	00000306 	br	41101d34 <sync_ctr_chb_out_enable+0x48>
	}
	else {
	aux |= CTR_CHB_EN_MASK;
41101d28:	e0bffe17 	ldw	r2,-8(fp)
41101d2c:	10800094 	ori	r2,r2,2
41101d30:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101d34:	e17ffe17 	ldw	r5,-8(fp)
41101d38:	01000284 	movi	r4,10
41101d3c:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101d40:	00800044 	movi	r2,1
}
41101d44:	e037883a 	mov	sp,fp
41101d48:	dfc00117 	ldw	ra,4(sp)
41101d4c:	df000017 	ldw	fp,0(sp)
41101d50:	dec00204 	addi	sp,sp,8
41101d54:	f800283a 	ret

41101d58 <sync_ctr_chc_out_enable>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_chc_out_enable(bool value)
{
41101d58:	defffc04 	addi	sp,sp,-16
41101d5c:	dfc00315 	stw	ra,12(sp)
41101d60:	df000215 	stw	fp,8(sp)
41101d64:	df000204 	addi	fp,sp,8
41101d68:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101d6c:	01000284 	movi	r4,10
41101d70:	11022ec0 	call	411022ec <read_reg>
41101d74:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101d78:	e0bfff17 	ldw	r2,-4(fp)
41101d7c:	1000051e 	bne	r2,zero,41101d94 <sync_ctr_chc_out_enable+0x3c>
	aux &= ~CTR_CHC_EN_MASK;
41101d80:	e0fffe17 	ldw	r3,-8(fp)
41101d84:	00bffec4 	movi	r2,-5
41101d88:	1884703a 	and	r2,r3,r2
41101d8c:	e0bffe15 	stw	r2,-8(fp)
41101d90:	00000306 	br	41101da0 <sync_ctr_chc_out_enable+0x48>
	}
	else {
	aux |= CTR_CHC_EN_MASK;
41101d94:	e0bffe17 	ldw	r2,-8(fp)
41101d98:	10800114 	ori	r2,r2,4
41101d9c:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101da0:	e17ffe17 	ldw	r5,-8(fp)
41101da4:	01000284 	movi	r4,10
41101da8:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101dac:	00800044 	movi	r2,1
}
41101db0:	e037883a 	mov	sp,fp
41101db4:	dfc00117 	ldw	ra,4(sp)
41101db8:	df000017 	ldw	fp,0(sp)
41101dbc:	dec00204 	addi	sp,sp,8
41101dc0:	f800283a 	ret

41101dc4 <sync_ctr_chd_out_enable>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_chd_out_enable(bool value)
{
41101dc4:	defffc04 	addi	sp,sp,-16
41101dc8:	dfc00315 	stw	ra,12(sp)
41101dcc:	df000215 	stw	fp,8(sp)
41101dd0:	df000204 	addi	fp,sp,8
41101dd4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101dd8:	01000284 	movi	r4,10
41101ddc:	11022ec0 	call	411022ec <read_reg>
41101de0:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101de4:	e0bfff17 	ldw	r2,-4(fp)
41101de8:	1000051e 	bne	r2,zero,41101e00 <sync_ctr_chd_out_enable+0x3c>
	aux &= ~CTR_CHD_EN_MASK;
41101dec:	e0fffe17 	ldw	r3,-8(fp)
41101df0:	00bffdc4 	movi	r2,-9
41101df4:	1884703a 	and	r2,r3,r2
41101df8:	e0bffe15 	stw	r2,-8(fp)
41101dfc:	00000306 	br	41101e0c <sync_ctr_chd_out_enable+0x48>
	}
	else {
	aux |= CTR_CHD_EN_MASK;
41101e00:	e0bffe17 	ldw	r2,-8(fp)
41101e04:	10800214 	ori	r2,r2,8
41101e08:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101e0c:	e17ffe17 	ldw	r5,-8(fp)
41101e10:	01000284 	movi	r4,10
41101e14:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101e18:	00800044 	movi	r2,1
}
41101e1c:	e037883a 	mov	sp,fp
41101e20:	dfc00117 	ldw	ra,4(sp)
41101e24:	df000017 	ldw	fp,0(sp)
41101e28:	dec00204 	addi	sp,sp,8
41101e2c:	f800283a 	ret

41101e30 <sync_ctr_che_out_enable>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_che_out_enable(bool value)
{
41101e30:	defffc04 	addi	sp,sp,-16
41101e34:	dfc00315 	stw	ra,12(sp)
41101e38:	df000215 	stw	fp,8(sp)
41101e3c:	df000204 	addi	fp,sp,8
41101e40:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101e44:	01000284 	movi	r4,10
41101e48:	11022ec0 	call	411022ec <read_reg>
41101e4c:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101e50:	e0bfff17 	ldw	r2,-4(fp)
41101e54:	1000051e 	bne	r2,zero,41101e6c <sync_ctr_che_out_enable+0x3c>
	aux &= ~CTR_CHE_EN_MASK;
41101e58:	e0fffe17 	ldw	r3,-8(fp)
41101e5c:	00bffbc4 	movi	r2,-17
41101e60:	1884703a 	and	r2,r3,r2
41101e64:	e0bffe15 	stw	r2,-8(fp)
41101e68:	00000306 	br	41101e78 <sync_ctr_che_out_enable+0x48>
	}
	else {
	aux |= CTR_CHE_EN_MASK;
41101e6c:	e0bffe17 	ldw	r2,-8(fp)
41101e70:	10800414 	ori	r2,r2,16
41101e74:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101e78:	e17ffe17 	ldw	r5,-8(fp)
41101e7c:	01000284 	movi	r4,10
41101e80:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101e84:	00800044 	movi	r2,1
}
41101e88:	e037883a 	mov	sp,fp
41101e8c:	dfc00117 	ldw	ra,4(sp)
41101e90:	df000017 	ldw	fp,0(sp)
41101e94:	dec00204 	addi	sp,sp,8
41101e98:	f800283a 	ret

41101e9c <sync_ctr_chf_out_enable>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_chf_out_enable(bool value)
{
41101e9c:	defffc04 	addi	sp,sp,-16
41101ea0:	dfc00315 	stw	ra,12(sp)
41101ea4:	df000215 	stw	fp,8(sp)
41101ea8:	df000204 	addi	fp,sp,8
41101eac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101eb0:	01000284 	movi	r4,10
41101eb4:	11022ec0 	call	411022ec <read_reg>
41101eb8:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101ebc:	e0bfff17 	ldw	r2,-4(fp)
41101ec0:	1000051e 	bne	r2,zero,41101ed8 <sync_ctr_chf_out_enable+0x3c>
	aux &= ~CTR_CHF_EN_MASK;
41101ec4:	e0fffe17 	ldw	r3,-8(fp)
41101ec8:	00bff7c4 	movi	r2,-33
41101ecc:	1884703a 	and	r2,r3,r2
41101ed0:	e0bffe15 	stw	r2,-8(fp)
41101ed4:	00000306 	br	41101ee4 <sync_ctr_chf_out_enable+0x48>
	}
	else {
	aux |= CTR_CHF_EN_MASK;
41101ed8:	e0bffe17 	ldw	r2,-8(fp)
41101edc:	10800814 	ori	r2,r2,32
41101ee0:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101ee4:	e17ffe17 	ldw	r5,-8(fp)
41101ee8:	01000284 	movi	r4,10
41101eec:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101ef0:	00800044 	movi	r2,1
}
41101ef4:	e037883a 	mov	sp,fp
41101ef8:	dfc00117 	ldw	ra,4(sp)
41101efc:	df000017 	ldw	fp,0(sp)
41101f00:	dec00204 	addi	sp,sp,8
41101f04:	f800283a 	ret

41101f08 <sync_ctr_chg_out_enable>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_chg_out_enable(bool value)
{
41101f08:	defffc04 	addi	sp,sp,-16
41101f0c:	dfc00315 	stw	ra,12(sp)
41101f10:	df000215 	stw	fp,8(sp)
41101f14:	df000204 	addi	fp,sp,8
41101f18:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101f1c:	01000284 	movi	r4,10
41101f20:	11022ec0 	call	411022ec <read_reg>
41101f24:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101f28:	e0bfff17 	ldw	r2,-4(fp)
41101f2c:	1000051e 	bne	r2,zero,41101f44 <sync_ctr_chg_out_enable+0x3c>
	aux &= ~CTR_CHG_EN_MASK;
41101f30:	e0fffe17 	ldw	r3,-8(fp)
41101f34:	00bfefc4 	movi	r2,-65
41101f38:	1884703a 	and	r2,r3,r2
41101f3c:	e0bffe15 	stw	r2,-8(fp)
41101f40:	00000306 	br	41101f50 <sync_ctr_chg_out_enable+0x48>
	}
	else {
	aux |= CTR_CHG_EN_MASK;
41101f44:	e0bffe17 	ldw	r2,-8(fp)
41101f48:	10801014 	ori	r2,r2,64
41101f4c:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101f50:	e17ffe17 	ldw	r5,-8(fp)
41101f54:	01000284 	movi	r4,10
41101f58:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101f5c:	00800044 	movi	r2,1
}
41101f60:	e037883a 	mov	sp,fp
41101f64:	dfc00117 	ldw	ra,4(sp)
41101f68:	df000017 	ldw	fp,0(sp)
41101f6c:	dec00204 	addi	sp,sp,8
41101f70:	f800283a 	ret

41101f74 <sync_ctr_chh_out_enable>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_ctr_chh_out_enable(bool value)
{
41101f74:	defffc04 	addi	sp,sp,-16
41101f78:	dfc00315 	stw	ra,12(sp)
41101f7c:	df000215 	stw	fp,8(sp)
41101f80:	df000204 	addi	fp,sp,8
41101f84:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41101f88:	01000284 	movi	r4,10
41101f8c:	11022ec0 	call	411022ec <read_reg>
41101f90:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41101f94:	e0bfff17 	ldw	r2,-4(fp)
41101f98:	1000051e 	bne	r2,zero,41101fb0 <sync_ctr_chh_out_enable+0x3c>
	aux &= ~CTR_CHH_EN_MASK;
41101f9c:	e0fffe17 	ldw	r3,-8(fp)
41101fa0:	00bfdfc4 	movi	r2,-129
41101fa4:	1884703a 	and	r2,r3,r2
41101fa8:	e0bffe15 	stw	r2,-8(fp)
41101fac:	00000306 	br	41101fbc <sync_ctr_chh_out_enable+0x48>
	}
	else {
	aux |= CTR_CHH_EN_MASK;
41101fb0:	e0bffe17 	ldw	r2,-8(fp)
41101fb4:	10802014 	ori	r2,r2,128
41101fb8:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
41101fbc:	e17ffe17 	ldw	r5,-8(fp)
41101fc0:	01000284 	movi	r4,10
41101fc4:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41101fc8:	00800044 	movi	r2,1
}
41101fcc:	e037883a 	mov	sp,fp
41101fd0:	dfc00117 	ldw	ra,4(sp)
41101fd4:	df000017 	ldw	fp,0(sp)
41101fd8:	dec00204 	addi	sp,sp,8
41101fdc:	f800283a 	ret

41101fe0 <sync_int_enable_error>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_int_enable_error(bool value)
{
41101fe0:	defffc04 	addi	sp,sp,-16
41101fe4:	dfc00315 	stw	ra,12(sp)
41101fe8:	df000215 	stw	fp,8(sp)
41101fec:	df000204 	addi	fp,sp,8
41101ff0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_INT_ENABLE_REG_OFFSET);
41101ff4:	01000044 	movi	r4,1
41101ff8:	11022ec0 	call	411022ec <read_reg>
41101ffc:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41102000:	e0bfff17 	ldw	r2,-4(fp)
41102004:	1000051e 	bne	r2,zero,4110201c <sync_int_enable_error+0x3c>
	aux &= ~INT_ENABLE_ERROR_MASK;
41102008:	e0fffe17 	ldw	r3,-8(fp)
4110200c:	00bfff44 	movi	r2,-3
41102010:	1884703a 	and	r2,r3,r2
41102014:	e0bffe15 	stw	r2,-8(fp)
41102018:	00000306 	br	41102028 <sync_int_enable_error+0x48>
	}
	else {
	aux |= INT_ENABLE_ERROR_MASK;
4110201c:	e0bffe17 	ldw	r2,-8(fp)
41102020:	10800094 	ori	r2,r2,2
41102024:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_INT_ENABLE_REG_OFFSET, aux);
41102028:	e17ffe17 	ldw	r5,-8(fp)
4110202c:	01000044 	movi	r4,1
41102030:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41102034:	00800044 	movi	r2,1
}
41102038:	e037883a 	mov	sp,fp
4110203c:	dfc00117 	ldw	ra,4(sp)
41102040:	df000017 	ldw	fp,0(sp)
41102044:	dec00204 	addi	sp,sp,8
41102048:	f800283a 	ret

4110204c <sync_int_enable_blank>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_int_enable_blank(bool value)
{
4110204c:	defffc04 	addi	sp,sp,-16
41102050:	dfc00315 	stw	ra,12(sp)
41102054:	df000215 	stw	fp,8(sp)
41102058:	df000204 	addi	fp,sp,8
4110205c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_INT_ENABLE_REG_OFFSET);
41102060:	01000044 	movi	r4,1
41102064:	11022ec0 	call	411022ec <read_reg>
41102068:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
4110206c:	e0bfff17 	ldw	r2,-4(fp)
41102070:	1000051e 	bne	r2,zero,41102088 <sync_int_enable_blank+0x3c>
	aux &= ~INT_ENABLE_BLANK_MASK;
41102074:	e0fffe17 	ldw	r3,-8(fp)
41102078:	00bfff84 	movi	r2,-2
4110207c:	1884703a 	and	r2,r3,r2
41102080:	e0bffe15 	stw	r2,-8(fp)
41102084:	00000306 	br	41102094 <sync_int_enable_blank+0x48>
	}
	else {
	aux |= INT_ENABLE_BLANK_MASK;
41102088:	e0bffe17 	ldw	r2,-8(fp)
4110208c:	10800054 	ori	r2,r2,1
41102090:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_INT_ENABLE_REG_OFFSET, aux);
41102094:	e17ffe17 	ldw	r5,-8(fp)
41102098:	01000044 	movi	r4,1
4110209c:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
411020a0:	00800044 	movi	r2,1
}
411020a4:	e037883a 	mov	sp,fp
411020a8:	dfc00117 	ldw	ra,4(sp)
411020ac:	df000017 	ldw	fp,0(sp)
411020b0:	dec00204 	addi	sp,sp,8
411020b4:	f800283a 	ret

411020b8 <sync_int_flag_clear_error>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_int_flag_clear_error(bool value)
{
411020b8:	defffc04 	addi	sp,sp,-16
411020bc:	dfc00315 	stw	ra,12(sp)
411020c0:	df000215 	stw	fp,8(sp)
411020c4:	df000204 	addi	fp,sp,8
411020c8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_INT_FLAG_CLEAR_REG_OFFSET);
411020cc:	01000084 	movi	r4,2
411020d0:	11022ec0 	call	411022ec <read_reg>
411020d4:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
411020d8:	e0bfff17 	ldw	r2,-4(fp)
411020dc:	1000051e 	bne	r2,zero,411020f4 <sync_int_flag_clear_error+0x3c>
	aux &= ~INT_FLAG_CLEAR_ERROR_MASK;
411020e0:	e0fffe17 	ldw	r3,-8(fp)
411020e4:	00bfff44 	movi	r2,-3
411020e8:	1884703a 	and	r2,r3,r2
411020ec:	e0bffe15 	stw	r2,-8(fp)
411020f0:	00000306 	br	41102100 <sync_int_flag_clear_error+0x48>
	}
	else {
	aux |= INT_FLAG_CLEAR_ERROR_MASK;
411020f4:	e0bffe17 	ldw	r2,-8(fp)
411020f8:	10800094 	ori	r2,r2,2
411020fc:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_INT_FLAG_CLEAR_REG_OFFSET, aux);
41102100:	e17ffe17 	ldw	r5,-8(fp)
41102104:	01000084 	movi	r4,2
41102108:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
4110210c:	00800044 	movi	r2,1
}
41102110:	e037883a 	mov	sp,fp
41102114:	dfc00117 	ldw	ra,4(sp)
41102118:	df000017 	ldw	fp,0(sp)
4110211c:	dec00204 	addi	sp,sp,8
41102120:	f800283a 	ret

41102124 <sync_int_flag_clear_blank>:
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
PUBLIC bool sync_int_flag_clear_blank(bool value)
{
41102124:	defffc04 	addi	sp,sp,-16
41102128:	dfc00315 	stw	ra,12(sp)
4110212c:	df000215 	stw	fp,8(sp)
41102130:	df000204 	addi	fp,sp,8
41102134:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_INT_FLAG_CLEAR_REG_OFFSET);
41102138:	01000084 	movi	r4,2
4110213c:	11022ec0 	call	411022ec <read_reg>
41102140:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
41102144:	e0bfff17 	ldw	r2,-4(fp)
41102148:	1000051e 	bne	r2,zero,41102160 <sync_int_flag_clear_blank+0x3c>
	aux &= ~INT_FLAG_CLEAR_BLANK_MASK;
4110214c:	e0fffe17 	ldw	r3,-8(fp)
41102150:	00bfff84 	movi	r2,-2
41102154:	1884703a 	and	r2,r3,r2
41102158:	e0bffe15 	stw	r2,-8(fp)
4110215c:	00000306 	br	4110216c <sync_int_flag_clear_blank+0x48>
	}
	else {
	aux |= INT_FLAG_CLEAR_BLANK_MASK;
41102160:	e0bffe17 	ldw	r2,-8(fp)
41102164:	10800054 	ori	r2,r2,1
41102168:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_INT_FLAG_CLEAR_REG_OFFSET, aux);
4110216c:	e17ffe17 	ldw	r5,-8(fp)
41102170:	01000084 	movi	r4,2
41102174:	11022980 	call	41102298 <write_reg>
 	return  TRUE;
41102178:	00800044 	movi	r2,1
}
4110217c:	e037883a 	mov	sp,fp
41102180:	dfc00117 	ldw	ra,4(sp)
41102184:	df000017 	ldw	fp,0(sp)
41102188:	dec00204 	addi	sp,sp,8
4110218c:	f800283a 	ret

41102190 <sync_int_flag_error>:
 * @param [in] void
 *
 * @retval bool result
 */
PUBLIC bool sync_int_flag_error(void)
{
41102190:	defffc04 	addi	sp,sp,-16
41102194:	dfc00315 	stw	ra,12(sp)
41102198:	df000215 	stw	fp,8(sp)
4110219c:	df000204 	addi	fp,sp,8
	alt_u32 aux;
	bool result;

	aux = read_reg(SYNC_INT_FLAG_REG_OFFSET);
411021a0:	010000c4 	movi	r4,3
411021a4:	11022ec0 	call	411022ec <read_reg>
411021a8:	e0bfff15 	stw	r2,-4(fp)

	if (aux & INT_FLAG_ERROR_MASK) {
411021ac:	e0bfff17 	ldw	r2,-4(fp)
411021b0:	1080008c 	andi	r2,r2,2
411021b4:	10000326 	beq	r2,zero,411021c4 <sync_int_flag_error+0x34>
		result = TRUE;
411021b8:	00800044 	movi	r2,1
411021bc:	e0bffe15 	stw	r2,-8(fp)
411021c0:	00000106 	br	411021c8 <sync_int_flag_error+0x38>
	}
	else {
		result = FALSE;
411021c4:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
411021c8:	e0bffe17 	ldw	r2,-8(fp)
}
411021cc:	e037883a 	mov	sp,fp
411021d0:	dfc00117 	ldw	ra,4(sp)
411021d4:	df000017 	ldw	fp,0(sp)
411021d8:	dec00204 	addi	sp,sp,8
411021dc:	f800283a 	ret

411021e0 <sync_int_flag_blank>:
 * @param [in] void
 *
 * @retval bool result
 */
PUBLIC bool sync_int_flag_blank(void)
{
411021e0:	defffc04 	addi	sp,sp,-16
411021e4:	dfc00315 	stw	ra,12(sp)
411021e8:	df000215 	stw	fp,8(sp)
411021ec:	df000204 	addi	fp,sp,8
	alt_u32 aux;
	bool result;

	aux = read_reg(SYNC_INT_FLAG_REG_OFFSET);
411021f0:	010000c4 	movi	r4,3
411021f4:	11022ec0 	call	411022ec <read_reg>
411021f8:	e0bfff15 	stw	r2,-4(fp)

	if (aux & INT_FLAG_BLANK_MASK) {
411021fc:	e0bfff17 	ldw	r2,-4(fp)
41102200:	1080004c 	andi	r2,r2,1
41102204:	10000326 	beq	r2,zero,41102214 <sync_int_flag_blank+0x34>
		result = TRUE;
41102208:	00800044 	movi	r2,1
4110220c:	e0bffe15 	stw	r2,-8(fp)
41102210:	00000106 	br	41102218 <sync_int_flag_blank+0x38>
	}
	else {
		result = FALSE;
41102214:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
41102218:	e0bffe17 	ldw	r2,-8(fp)
}
4110221c:	e037883a 	mov	sp,fp
41102220:	dfc00117 	ldw	ra,4(sp)
41102224:	df000017 	ldw	fp,0(sp)
41102228:	dec00204 	addi	sp,sp,8
4110222c:	f800283a 	ret

41102230 <sync_read_ctr>:
 * @param [in] void
 *
 * @retval alt_u32 value
 */
PUBLIC alt_u32 sync_read_ctr(void)
{
41102230:	defffd04 	addi	sp,sp,-12
41102234:	dfc00215 	stw	ra,8(sp)
41102238:	df000115 	stw	fp,4(sp)
4110223c:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
41102240:	01000284 	movi	r4,10
41102244:	11022ec0 	call	411022ec <read_reg>
41102248:	e0bfff15 	stw	r2,-4(fp)
	return aux;
4110224c:	e0bfff17 	ldw	r2,-4(fp)
}
41102250:	e037883a 	mov	sp,fp
41102254:	dfc00117 	ldw	ra,4(sp)
41102258:	df000017 	ldw	fp,0(sp)
4110225c:	dec00204 	addi	sp,sp,8
41102260:	f800283a 	ret

41102264 <sync_read_status>:
 * @param [in] void
 *
 * @retval alt_u32 value
 */
PUBLIC alt_u32 sync_read_status(void)
{
41102264:	defffd04 	addi	sp,sp,-12
41102268:	dfc00215 	stw	ra,8(sp)
4110226c:	df000115 	stw	fp,4(sp)
41102270:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_STATUS_REG_OFFSET);
41102274:	0009883a 	mov	r4,zero
41102278:	11022ec0 	call	411022ec <read_reg>
4110227c:	e0bfff15 	stw	r2,-4(fp)
	return aux;
41102280:	e0bfff17 	ldw	r2,-4(fp)
}
41102284:	e037883a 	mov	sp,fp
41102288:	dfc00117 	ldw	ra,4(sp)
4110228c:	df000017 	ldw	fp,0(sp)
41102290:	dec00204 	addi	sp,sp,8
41102294:	f800283a 	ret

41102298 <write_reg>:
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
PRIVATE bool write_reg(alt_u32 offset, alt_u32 value)
{
41102298:	defffc04 	addi	sp,sp,-16
4110229c:	df000315 	stw	fp,12(sp)
411022a0:	df000304 	addi	fp,sp,12
411022a4:	e13ffe15 	stw	r4,-8(fp)
411022a8:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
411022ac:	00900034 	movhi	r2,16384
411022b0:	10810004 	addi	r2,r2,1024
411022b4:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + offset) = value;
411022b8:	e0bffe17 	ldw	r2,-8(fp)
411022bc:	1085883a 	add	r2,r2,r2
411022c0:	1085883a 	add	r2,r2,r2
411022c4:	1007883a 	mov	r3,r2
411022c8:	e0bffd17 	ldw	r2,-12(fp)
411022cc:	10c5883a 	add	r2,r2,r3
411022d0:	e0ffff17 	ldw	r3,-4(fp)
411022d4:	10c00015 	stw	r3,0(r2)
	return  TRUE;
411022d8:	00800044 	movi	r2,1
}
411022dc:	e037883a 	mov	sp,fp
411022e0:	df000017 	ldw	fp,0(sp)
411022e4:	dec00104 	addi	sp,sp,4
411022e8:	f800283a 	ret

411022ec <read_reg>:
 * @param [in] alt_u32 offset
  *
 * @retval alt_u32 value -> reg
 */
PRIVATE alt_u32 read_reg(alt_u32 offset)
{
411022ec:	defffc04 	addi	sp,sp,-16
411022f0:	df000315 	stw	fp,12(sp)
411022f4:	df000304 	addi	fp,sp,12
411022f8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

    alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
411022fc:	00900034 	movhi	r2,16384
41102300:	10810004 	addi	r2,r2,1024
41102304:	e0bffd15 	stw	r2,-12(fp)
 	value = *(p_addr + offset);
41102308:	e0bfff17 	ldw	r2,-4(fp)
4110230c:	1085883a 	add	r2,r2,r2
41102310:	1085883a 	add	r2,r2,r2
41102314:	1007883a 	mov	r3,r2
41102318:	e0bffd17 	ldw	r2,-12(fp)
4110231c:	10c5883a 	add	r2,r2,r3
41102320:	10800017 	ldw	r2,0(r2)
41102324:	e0bffe15 	stw	r2,-8(fp)
	return value;
41102328:	e0bffe17 	ldw	r2,-8(fp)
}
4110232c:	e037883a 	mov	sp,fp
41102330:	df000017 	ldw	fp,0(sp)
41102334:	dec00104 	addi	sp,sp,4
41102338:	f800283a 	ret

4110233c <SPWC_WRITE_REG32>:
	alt_u32 ul_spwc_g_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_g_spacewire_link_control_status_register_value = 0x00000400;
	alt_u32 ul_spwc_h_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_h_spacewire_link_control_status_register_value = 0x00000400;

	void SPWC_WRITE_REG32(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
4110233c:	defffb04 	addi	sp,sp,-20
41102340:	df000415 	stw	fp,16(sp)
41102344:	df000404 	addi	fp,sp,16
41102348:	2007883a 	mov	r3,r4
4110234c:	2805883a 	mov	r2,r5
41102350:	e1bfff15 	stw	r6,-4(fp)
41102354:	e0fffd05 	stb	r3,-12(fp)
41102358:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
4110235c:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
41102360:	e0bffd07 	ldb	r2,-12(fp)
41102364:	10bfefc4 	addi	r2,r2,-65
41102368:	10c00228 	cmpgeui	r3,r2,8
4110236c:	18001e1e 	bne	r3,zero,411023e8 <SPWC_WRITE_REG32+0xac>
41102370:	100690ba 	slli	r3,r2,2
41102374:	00904434 	movhi	r2,16656
41102378:	1088e204 	addi	r2,r2,9096
4110237c:	1885883a 	add	r2,r3,r2
41102380:	10800017 	ldw	r2,0(r2)
41102384:	1000683a 	jmp	r2
41102388:	411023a8 	cmpgeui	r4,r8,16526
4110238c:	411023b0 	cmpltui	r4,r8,16526
41102390:	411023b8 	rdprs	r4,r8,16526
41102394:	411023c0 	call	4411023c <__alt_data_end+0x2f1623c>
41102398:	411023c8 	cmpgei	r4,r8,16527
4110239c:	411023d0 	cmplti	r4,r8,16527
411023a0:	411023d8 	cmpnei	r4,r8,16527
411023a4:	411023e0 	cmpeqi	r4,r8,16527
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
411023a8:	e03ffc15 	stw	zero,-16(fp)
			break;
411023ac:	00000e06 	br	411023e8 <SPWC_WRITE_REG32+0xac>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
411023b0:	e03ffc15 	stw	zero,-16(fp)
			break;
411023b4:	00000c06 	br	411023e8 <SPWC_WRITE_REG32+0xac>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
411023b8:	e03ffc15 	stw	zero,-16(fp)
			break;
411023bc:	00000a06 	br	411023e8 <SPWC_WRITE_REG32+0xac>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
411023c0:	e03ffc15 	stw	zero,-16(fp)
			break;
411023c4:	00000806 	br	411023e8 <SPWC_WRITE_REG32+0xac>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
411023c8:	e03ffc15 	stw	zero,-16(fp)
			break;
411023cc:	00000606 	br	411023e8 <SPWC_WRITE_REG32+0xac>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
411023d0:	e03ffc15 	stw	zero,-16(fp)
			break;
411023d4:	00000406 	br	411023e8 <SPWC_WRITE_REG32+0xac>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
411023d8:	e03ffc15 	stw	zero,-16(fp)
			break;
411023dc:	00000206 	br	411023e8 <SPWC_WRITE_REG32+0xac>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
411023e0:	e03ffc15 	stw	zero,-16(fp)
			break;
411023e4:	0001883a 	nop
		}
		*(pSpwcAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
411023e8:	e0bffe03 	ldbu	r2,-8(fp)
411023ec:	1085883a 	add	r2,r2,r2
411023f0:	1085883a 	add	r2,r2,r2
411023f4:	1007883a 	mov	r3,r2
411023f8:	e0bffc17 	ldw	r2,-16(fp)
411023fc:	10c5883a 	add	r2,r2,r3
41102400:	e0ffff17 	ldw	r3,-4(fp)
41102404:	10c00015 	stw	r3,0(r2)
	}
41102408:	0001883a 	nop
4110240c:	e037883a 	mov	sp,fp
41102410:	df000017 	ldw	fp,0(sp)
41102414:	dec00104 	addi	sp,sp,4
41102418:	f800283a 	ret

4110241c <SPWC_READ_REG32>:

	alt_u32 SPWC_READ_REG32(char c_SpwID, alt_u8 uc_RegisterAddress){
4110241c:	defffb04 	addi	sp,sp,-20
41102420:	df000415 	stw	fp,16(sp)
41102424:	df000404 	addi	fp,sp,16
41102428:	2007883a 	mov	r3,r4
4110242c:	2805883a 	mov	r2,r5
41102430:	e0fffe05 	stb	r3,-8(fp)
41102434:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
41102438:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
4110243c:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
41102440:	e0bffe07 	ldb	r2,-8(fp)
41102444:	10bfefc4 	addi	r2,r2,-65
41102448:	10c00228 	cmpgeui	r3,r2,8
4110244c:	18001e1e 	bne	r3,zero,411024c8 <SPWC_READ_REG32+0xac>
41102450:	100690ba 	slli	r3,r2,2
41102454:	00904434 	movhi	r2,16656
41102458:	10891a04 	addi	r2,r2,9320
4110245c:	1885883a 	add	r2,r3,r2
41102460:	10800017 	ldw	r2,0(r2)
41102464:	1000683a 	jmp	r2
41102468:	41102488 	cmpgei	r4,r8,16530
4110246c:	41102490 	cmplti	r4,r8,16530
41102470:	41102498 	cmpnei	r4,r8,16530
41102474:	411024a0 	cmpeqi	r4,r8,16530
41102478:	411024a8 	cmpgeui	r4,r8,16530
4110247c:	411024b0 	cmpltui	r4,r8,16530
41102480:	411024b8 	rdprs	r4,r8,16530
41102484:	411024c0 	call	4411024c <__alt_data_end+0x2f1624c>
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
41102488:	e03ffc15 	stw	zero,-16(fp)
			break;
4110248c:	00000e06 	br	411024c8 <SPWC_READ_REG32+0xac>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
41102490:	e03ffc15 	stw	zero,-16(fp)
			break;
41102494:	00000c06 	br	411024c8 <SPWC_READ_REG32+0xac>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
41102498:	e03ffc15 	stw	zero,-16(fp)
			break;
4110249c:	00000a06 	br	411024c8 <SPWC_READ_REG32+0xac>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
411024a0:	e03ffc15 	stw	zero,-16(fp)
			break;
411024a4:	00000806 	br	411024c8 <SPWC_READ_REG32+0xac>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
411024a8:	e03ffc15 	stw	zero,-16(fp)
			break;
411024ac:	00000606 	br	411024c8 <SPWC_READ_REG32+0xac>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
411024b0:	e03ffc15 	stw	zero,-16(fp)
			break;
411024b4:	00000406 	br	411024c8 <SPWC_READ_REG32+0xac>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
411024b8:	e03ffc15 	stw	zero,-16(fp)
			break;
411024bc:	00000206 	br	411024c8 <SPWC_READ_REG32+0xac>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
411024c0:	e03ffc15 	stw	zero,-16(fp)
			break;
411024c4:	0001883a 	nop
		}
		RegisterValue = *(pSpwcAddr + (alt_u32)uc_RegisterAddress);
411024c8:	e0bfff03 	ldbu	r2,-4(fp)
411024cc:	1085883a 	add	r2,r2,r2
411024d0:	1085883a 	add	r2,r2,r2
411024d4:	1007883a 	mov	r3,r2
411024d8:	e0bffc17 	ldw	r2,-16(fp)
411024dc:	10c5883a 	add	r2,r2,r3
411024e0:	10800017 	ldw	r2,0(r2)
411024e4:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
411024e8:	e0bffd17 	ldw	r2,-12(fp)
	}
411024ec:	e037883a 	mov	sp,fp
411024f0:	df000017 	ldw	fp,0(sp)
411024f4:	dec00104 	addi	sp,sp,4
411024f8:	f800283a 	ret

411024fc <b_SpaceWire_Interface_Write_Register>:

	bool b_SpaceWire_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
411024fc:	defffa04 	addi	sp,sp,-24
41102500:	dfc00515 	stw	ra,20(sp)
41102504:	df000415 	stw	fp,16(sp)
41102508:	df000404 	addi	fp,sp,16
4110250c:	2007883a 	mov	r3,r4
41102510:	2805883a 	mov	r2,r5
41102514:	e1bfff15 	stw	r6,-4(fp)
41102518:	e0fffd05 	stb	r3,-12(fp)
4110251c:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
41102520:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
41102524:	e0bffe03 	ldbu	r2,-8(fp)
41102528:	108000e8 	cmpgeui	r2,r2,3
4110252c:	1000081e 	bne	r2,zero,41102550 <b_SpaceWire_Interface_Write_Register+0x54>
			SPWC_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
41102530:	e0bffd07 	ldb	r2,-12(fp)
41102534:	e0fffe03 	ldbu	r3,-8(fp)
41102538:	e1bfff17 	ldw	r6,-4(fp)
4110253c:	180b883a 	mov	r5,r3
41102540:	1009883a 	mov	r4,r2
41102544:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
			bSuccess = TRUE;
41102548:	00800044 	movi	r2,1
4110254c:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
41102550:	e0bffc17 	ldw	r2,-16(fp)
	}
41102554:	e037883a 	mov	sp,fp
41102558:	dfc00117 	ldw	ra,4(sp)
4110255c:	df000017 	ldw	fp,0(sp)
41102560:	dec00204 	addi	sp,sp,8
41102564:	f800283a 	ret

41102568 <ul_SpaceWire_Interface_Read_Register>:

	alt_u32 ul_SpaceWire_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
41102568:	defffb04 	addi	sp,sp,-20
4110256c:	dfc00415 	stw	ra,16(sp)
41102570:	df000315 	stw	fp,12(sp)
41102574:	df000304 	addi	fp,sp,12
41102578:	2007883a 	mov	r3,r4
4110257c:	2805883a 	mov	r2,r5
41102580:	e0fffe05 	stb	r3,-8(fp)
41102584:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
41102588:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
4110258c:	e0bfff03 	ldbu	r2,-4(fp)
41102590:	108000e8 	cmpgeui	r2,r2,3
41102594:	1000061e 	bne	r2,zero,411025b0 <ul_SpaceWire_Interface_Read_Register+0x48>
			ul_RegisterValue = SPWC_READ_REG32(c_SpwID, uc_RegisterAddress);
41102598:	e0bffe07 	ldb	r2,-8(fp)
4110259c:	e0ffff03 	ldbu	r3,-4(fp)
411025a0:	180b883a 	mov	r5,r3
411025a4:	1009883a 	mov	r4,r2
411025a8:	110241c0 	call	4110241c <SPWC_READ_REG32>
411025ac:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
411025b0:	e0bffd17 	ldw	r2,-12(fp)
	}
411025b4:	e037883a 	mov	sp,fp
411025b8:	dfc00117 	ldw	ra,4(sp)
411025bc:	df000017 	ldw	fp,0(sp)
411025c0:	dec00204 	addi	sp,sp,8
411025c4:	f800283a 	ret

411025c8 <b_SpaceWire_Interface_Enable_Control>:

	bool b_SpaceWire_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
411025c8:	defff804 	addi	sp,sp,-32
411025cc:	dfc00715 	stw	ra,28(sp)
411025d0:	df000615 	stw	fp,24(sp)
411025d4:	df000604 	addi	fp,sp,24
411025d8:	2007883a 	mov	r3,r4
411025dc:	2805883a 	mov	r2,r5
411025e0:	e1bfff15 	stw	r6,-4(fp)
411025e4:	e0fffd05 	stb	r3,-12(fp)
411025e8:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
411025ec:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK;
411025f0:	0081c004 	movi	r2,1792
411025f4:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
411025f8:	d0a02104 	addi	r2,gp,-32636
411025fc:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
41102600:	e0bffd07 	ldb	r2,-12(fp)
41102604:	10bfefc4 	addi	r2,r2,-65
41102608:	10c00228 	cmpgeui	r3,r2,8
4110260c:	1800361e 	bne	r3,zero,411026e8 <b_SpaceWire_Interface_Enable_Control+0x120>
41102610:	100690ba 	slli	r3,r2,2
41102614:	00904434 	movhi	r2,16656
41102618:	10898a04 	addi	r2,r2,9768
4110261c:	1885883a 	add	r2,r3,r2
41102620:	10800017 	ldw	r2,0(r2)
41102624:	1000683a 	jmp	r2
41102628:	41102648 	cmpgei	r4,r8,16537
4110262c:	4110265c 	xori	r4,r8,16537
41102630:	41102670 	cmpltui	r4,r8,16537
41102634:	41102684 	addi	r4,r8,16538
41102638:	41102698 	cmpnei	r4,r8,16538
4110263c:	411026ac 	andhi	r4,r8,16538
41102640:	411026c0 	call	4411026c <__alt_data_end+0x2f1626c>
41102644:	411026d4 	ori	r4,r8,16539
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
41102648:	d0a02104 	addi	r2,gp,-32636
4110264c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102650:	00800044 	movi	r2,1
41102654:	e0bffa15 	stw	r2,-24(fp)
			break;
41102658:	00002306 	br	411026e8 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
4110265c:	d0a02204 	addi	r2,gp,-32632
41102660:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102664:	00800044 	movi	r2,1
41102668:	e0bffa15 	stw	r2,-24(fp)
			break;
4110266c:	00001e06 	br	411026e8 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
41102670:	d0a02304 	addi	r2,gp,-32628
41102674:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102678:	00800044 	movi	r2,1
4110267c:	e0bffa15 	stw	r2,-24(fp)
			break;
41102680:	00001906 	br	411026e8 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
41102684:	d0a02404 	addi	r2,gp,-32624
41102688:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
4110268c:	00800044 	movi	r2,1
41102690:	e0bffa15 	stw	r2,-24(fp)
			break;
41102694:	00001406 	br	411026e8 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
41102698:	d0a02504 	addi	r2,gp,-32620
4110269c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
411026a0:	00800044 	movi	r2,1
411026a4:	e0bffa15 	stw	r2,-24(fp)
			break;
411026a8:	00000f06 	br	411026e8 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
411026ac:	d0a02604 	addi	r2,gp,-32616
411026b0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
411026b4:	00800044 	movi	r2,1
411026b8:	e0bffa15 	stw	r2,-24(fp)
			break;
411026bc:	00000a06 	br	411026e8 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
411026c0:	d0a02704 	addi	r2,gp,-32612
411026c4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
411026c8:	00800044 	movi	r2,1
411026cc:	e0bffa15 	stw	r2,-24(fp)
			break;
411026d0:	00000506 	br	411026e8 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
411026d4:	d0a02804 	addi	r2,gp,-32608
411026d8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
411026dc:	00800044 	movi	r2,1
411026e0:	e0bffa15 	stw	r2,-24(fp)
			break;
411026e4:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
411026e8:	e0bffa17 	ldw	r2,-24(fp)
411026ec:	10800058 	cmpnei	r2,r2,1
411026f0:	10002b1e 	bne	r2,zero,411027a0 <b_SpaceWire_Interface_Enable_Control+0x1d8>
411026f4:	e0ffff17 	ldw	r3,-4(fp)
411026f8:	e0bffc17 	ldw	r2,-16(fp)
411026fc:	1884703a 	and	r2,r3,r2
41102700:	10002726 	beq	r2,zero,411027a0 <b_SpaceWire_Interface_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
41102704:	e0bffe03 	ldbu	r2,-8(fp)
41102708:	10000326 	beq	r2,zero,41102718 <b_SpaceWire_Interface_Enable_Control+0x150>
4110270c:	10800060 	cmpeqi	r2,r2,1
41102710:	1000121e 	bne	r2,zero,4110275c <b_SpaceWire_Interface_Enable_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
41102714:	00002306 	br	411027a4 <b_SpaceWire_Interface_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_EnableMask;
41102718:	e0bffb17 	ldw	r2,-20(fp)
4110271c:	10c00017 	ldw	r3,0(r2)
41102720:	e0bfff17 	ldw	r2,-4(fp)
41102724:	0084303a 	nor	r2,zero,r2
41102728:	1886703a 	and	r3,r3,r2
4110272c:	e0bffb17 	ldw	r2,-20(fp)
41102730:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
41102734:	e0fffd07 	ldb	r3,-12(fp)
41102738:	e0bffb17 	ldw	r2,-20(fp)
4110273c:	10800017 	ldw	r2,0(r2)
41102740:	100d883a 	mov	r6,r2
41102744:	000b883a 	mov	r5,zero
41102748:	1809883a 	mov	r4,r3
4110274c:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					bSuccess = TRUE;
41102750:	00800044 	movi	r2,1
41102754:	e0bffa15 	stw	r2,-24(fp)
				break;
41102758:	00001006 	br	4110279c <b_SpaceWire_Interface_Enable_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_EnableMask;
4110275c:	e0bffb17 	ldw	r2,-20(fp)
41102760:	10c00017 	ldw	r3,0(r2)
41102764:	e0bfff17 	ldw	r2,-4(fp)
41102768:	1886b03a 	or	r3,r3,r2
4110276c:	e0bffb17 	ldw	r2,-20(fp)
41102770:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
41102774:	e0fffd07 	ldb	r3,-12(fp)
41102778:	e0bffb17 	ldw	r2,-20(fp)
4110277c:	10800017 	ldw	r2,0(r2)
41102780:	100d883a 	mov	r6,r2
41102784:	000b883a 	mov	r5,zero
41102788:	1809883a 	mov	r4,r3
4110278c:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					bSuccess = TRUE;
41102790:	00800044 	movi	r2,1
41102794:	e0bffa15 	stw	r2,-24(fp)
				break;
41102798:	0001883a 	nop

			}
		} else {
4110279c:	00000106 	br	411027a4 <b_SpaceWire_Interface_Enable_Control+0x1dc>
			bSuccess = FALSE;
411027a0:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
411027a4:	e0bffa17 	ldw	r2,-24(fp)
	}
411027a8:	e037883a 	mov	sp,fp
411027ac:	dfc00117 	ldw	ra,4(sp)
411027b0:	df000017 	ldw	fp,0(sp)
411027b4:	dec00204 	addi	sp,sp,8
411027b8:	f800283a 	ret

411027bc <b_SpaceWire_Interface_Mode_Control>:

	bool b_SpaceWire_Interface_Mode_Control(char c_SpwID, alt_u8 uc_InterfaceMode){
411027bc:	defffa04 	addi	sp,sp,-24
411027c0:	dfc00515 	stw	ra,20(sp)
411027c4:	df000415 	stw	fp,16(sp)
411027c8:	df000404 	addi	fp,sp,16
411027cc:	2007883a 	mov	r3,r4
411027d0:	2805883a 	mov	r2,r5
411027d4:	e0fffe05 	stb	r3,-8(fp)
411027d8:	e0bfff05 	stb	r2,-4(fp)
		bool bSuccess = FALSE;
411027dc:	e03ffc15 	stw	zero,-16(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
411027e0:	d0a02104 	addi	r2,gp,-32636
411027e4:	e0bffd15 	stw	r2,-12(fp)
		switch (c_SpwID) {
411027e8:	e0bffe07 	ldb	r2,-8(fp)
411027ec:	10bfefc4 	addi	r2,r2,-65
411027f0:	10c00228 	cmpgeui	r3,r2,8
411027f4:	1800361e 	bne	r3,zero,411028d0 <b_SpaceWire_Interface_Mode_Control+0x114>
411027f8:	100690ba 	slli	r3,r2,2
411027fc:	00904434 	movhi	r2,16656
41102800:	108a0404 	addi	r2,r2,10256
41102804:	1885883a 	add	r2,r3,r2
41102808:	10800017 	ldw	r2,0(r2)
4110280c:	1000683a 	jmp	r2
41102810:	41102830 	cmpltui	r4,r8,16544
41102814:	41102844 	addi	r4,r8,16545
41102818:	41102858 	cmpnei	r4,r8,16545
4110281c:	4110286c 	andhi	r4,r8,16545
41102820:	41102880 	call	44110288 <__alt_data_end+0x2f16288>
41102824:	41102894 	ori	r4,r8,16546
41102828:	411028a8 	cmpgeui	r4,r8,16546
4110282c:	411028bc 	xorhi	r4,r8,16546
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
41102830:	d0a02104 	addi	r2,gp,-32636
41102834:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
41102838:	00800044 	movi	r2,1
4110283c:	e0bffc15 	stw	r2,-16(fp)
			break;
41102840:	00002306 	br	411028d0 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
41102844:	d0a02204 	addi	r2,gp,-32632
41102848:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
4110284c:	00800044 	movi	r2,1
41102850:	e0bffc15 	stw	r2,-16(fp)
			break;
41102854:	00001e06 	br	411028d0 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
41102858:	d0a02304 	addi	r2,gp,-32628
4110285c:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
41102860:	00800044 	movi	r2,1
41102864:	e0bffc15 	stw	r2,-16(fp)
			break;
41102868:	00001906 	br	411028d0 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
4110286c:	d0a02404 	addi	r2,gp,-32624
41102870:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
41102874:	00800044 	movi	r2,1
41102878:	e0bffc15 	stw	r2,-16(fp)
			break;
4110287c:	00001406 	br	411028d0 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
41102880:	d0a02504 	addi	r2,gp,-32620
41102884:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
41102888:	00800044 	movi	r2,1
4110288c:	e0bffc15 	stw	r2,-16(fp)
			break;
41102890:	00000f06 	br	411028d0 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
41102894:	d0a02604 	addi	r2,gp,-32616
41102898:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
4110289c:	00800044 	movi	r2,1
411028a0:	e0bffc15 	stw	r2,-16(fp)
			break;
411028a4:	00000a06 	br	411028d0 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
411028a8:	d0a02704 	addi	r2,gp,-32612
411028ac:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
411028b0:	00800044 	movi	r2,1
411028b4:	e0bffc15 	stw	r2,-16(fp)
			break;
411028b8:	00000506 	br	411028d0 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
411028bc:	d0a02804 	addi	r2,gp,-32608
411028c0:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
411028c4:	00800044 	movi	r2,1
411028c8:	e0bffc15 	stw	r2,-16(fp)
			break;
411028cc:	0001883a 	nop
		}
		if (bSuccess == TRUE){
411028d0:	e0bffc17 	ldw	r2,-16(fp)
411028d4:	10800058 	cmpnei	r2,r2,1
411028d8:	10007b1e 	bne	r2,zero,41102ac8 <b_SpaceWire_Interface_Mode_Control+0x30c>
			switch (uc_InterfaceMode){
411028dc:	e0bfff03 	ldbu	r2,-4(fp)
411028e0:	10c00060 	cmpeqi	r3,r2,1
411028e4:	1800241e 	bne	r3,zero,41102978 <b_SpaceWire_Interface_Mode_Control+0x1bc>
411028e8:	10c00088 	cmpgei	r3,r2,2
411028ec:	1800021e 	bne	r3,zero,411028f8 <b_SpaceWire_Interface_Mode_Control+0x13c>
411028f0:	10000626 	beq	r2,zero,4110290c <b_SpaceWire_Interface_Mode_Control+0x150>
411028f4:	00007206 	br	41102ac0 <b_SpaceWire_Interface_Mode_Control+0x304>
411028f8:	10c000a0 	cmpeqi	r3,r2,2
411028fc:	1800391e 	bne	r3,zero,411029e4 <b_SpaceWire_Interface_Mode_Control+0x228>
41102900:	108000e0 	cmpeqi	r2,r2,3
41102904:	1000521e 	bne	r2,zero,41102a50 <b_SpaceWire_Interface_Mode_Control+0x294>
41102908:	00006d06 	br	41102ac0 <b_SpaceWire_Interface_Mode_Control+0x304>

				case SPWC_INTERFACE_BACKDOOR_MODE:
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK;
4110290c:	e0bffd17 	ldw	r2,-12(fp)
41102910:	10800017 	ldw	r2,0(r2)
41102914:	10c40014 	ori	r3,r2,4096
41102918:	e0bffd17 	ldw	r2,-12(fp)
4110291c:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
41102920:	e0bffd17 	ldw	r2,-12(fp)
41102924:	10c00017 	ldw	r3,0(r2)
41102928:	00bdffc4 	movi	r2,-2049
4110292c:	1886703a 	and	r3,r3,r2
41102930:	e0bffd17 	ldw	r2,-12(fp)
41102934:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
41102938:	e0bffd17 	ldw	r2,-12(fp)
4110293c:	10c00017 	ldw	r3,0(r2)
41102940:	00bfdfc4 	movi	r2,-129
41102944:	1886703a 	and	r3,r3,r2
41102948:	e0bffd17 	ldw	r2,-12(fp)
4110294c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
41102950:	e0fffe07 	ldb	r3,-8(fp)
41102954:	e0bffd17 	ldw	r2,-12(fp)
41102958:	10800017 	ldw	r2,0(r2)
4110295c:	100d883a 	mov	r6,r2
41102960:	000b883a 	mov	r5,zero
41102964:	1809883a 	mov	r4,r3
41102968:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					bSuccess = TRUE;
4110296c:	00800044 	movi	r2,1
41102970:	e0bffc15 	stw	r2,-16(fp)
				break;
41102974:	00005506 	br	41102acc <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_EXTERNAL_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
41102978:	e0bffd17 	ldw	r2,-12(fp)
4110297c:	10c00017 	ldw	r3,0(r2)
41102980:	00bbffc4 	movi	r2,-4097
41102984:	1886703a 	and	r3,r3,r2
41102988:	e0bffd17 	ldw	r2,-12(fp)
4110298c:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK;
41102990:	e0bffd17 	ldw	r2,-12(fp)
41102994:	10800017 	ldw	r2,0(r2)
41102998:	10c20014 	ori	r3,r2,2048
4110299c:	e0bffd17 	ldw	r2,-12(fp)
411029a0:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
411029a4:	e0bffd17 	ldw	r2,-12(fp)
411029a8:	10c00017 	ldw	r3,0(r2)
411029ac:	00bfdfc4 	movi	r2,-129
411029b0:	1886703a 	and	r3,r3,r2
411029b4:	e0bffd17 	ldw	r2,-12(fp)
411029b8:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
411029bc:	e0fffe07 	ldb	r3,-8(fp)
411029c0:	e0bffd17 	ldw	r2,-12(fp)
411029c4:	10800017 	ldw	r2,0(r2)
411029c8:	100d883a 	mov	r6,r2
411029cc:	000b883a 	mov	r5,zero
411029d0:	1809883a 	mov	r4,r3
411029d4:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					bSuccess = TRUE;
411029d8:	00800044 	movi	r2,1
411029dc:	e0bffc15 	stw	r2,-16(fp)
				break;
411029e0:	00003a06 	br	41102acc <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
411029e4:	e0bffd17 	ldw	r2,-12(fp)
411029e8:	10c00017 	ldw	r3,0(r2)
411029ec:	00bbffc4 	movi	r2,-4097
411029f0:	1886703a 	and	r3,r3,r2
411029f4:	e0bffd17 	ldw	r2,-12(fp)
411029f8:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
411029fc:	e0bffd17 	ldw	r2,-12(fp)
41102a00:	10c00017 	ldw	r3,0(r2)
41102a04:	00bdffc4 	movi	r2,-2049
41102a08:	1886703a 	and	r3,r3,r2
41102a0c:	e0bffd17 	ldw	r2,-12(fp)
41102a10:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK;
41102a14:	e0bffd17 	ldw	r2,-12(fp)
41102a18:	10800017 	ldw	r2,0(r2)
41102a1c:	10c02014 	ori	r3,r2,128
41102a20:	e0bffd17 	ldw	r2,-12(fp)
41102a24:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
41102a28:	e0fffe07 	ldb	r3,-8(fp)
41102a2c:	e0bffd17 	ldw	r2,-12(fp)
41102a30:	10800017 	ldw	r2,0(r2)
41102a34:	100d883a 	mov	r6,r2
41102a38:	000b883a 	mov	r5,zero
41102a3c:	1809883a 	mov	r4,r3
41102a40:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					bSuccess = TRUE;
41102a44:	00800044 	movi	r2,1
41102a48:	e0bffc15 	stw	r2,-16(fp)
				break;
41102a4c:	00001f06 	br	41102acc <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_NORMAL_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
41102a50:	e0bffd17 	ldw	r2,-12(fp)
41102a54:	10c00017 	ldw	r3,0(r2)
41102a58:	00bbffc4 	movi	r2,-4097
41102a5c:	1886703a 	and	r3,r3,r2
41102a60:	e0bffd17 	ldw	r2,-12(fp)
41102a64:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
41102a68:	e0bffd17 	ldw	r2,-12(fp)
41102a6c:	10c00017 	ldw	r3,0(r2)
41102a70:	00bdffc4 	movi	r2,-2049
41102a74:	1886703a 	and	r3,r3,r2
41102a78:	e0bffd17 	ldw	r2,-12(fp)
41102a7c:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
41102a80:	e0bffd17 	ldw	r2,-12(fp)
41102a84:	10c00017 	ldw	r3,0(r2)
41102a88:	00bfdfc4 	movi	r2,-129
41102a8c:	1886703a 	and	r3,r3,r2
41102a90:	e0bffd17 	ldw	r2,-12(fp)
41102a94:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
41102a98:	e0fffe07 	ldb	r3,-8(fp)
41102a9c:	e0bffd17 	ldw	r2,-12(fp)
41102aa0:	10800017 	ldw	r2,0(r2)
41102aa4:	100d883a 	mov	r6,r2
41102aa8:	000b883a 	mov	r5,zero
41102aac:	1809883a 	mov	r4,r3
41102ab0:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					bSuccess = TRUE;
41102ab4:	00800044 	movi	r2,1
41102ab8:	e0bffc15 	stw	r2,-16(fp)
				break;
41102abc:	00000306 	br	41102acc <b_SpaceWire_Interface_Mode_Control+0x310>
				
				default:
					bSuccess = FALSE;
41102ac0:	e03ffc15 	stw	zero,-16(fp)
41102ac4:	00000106 	br	41102acc <b_SpaceWire_Interface_Mode_Control+0x310>
	
			}
		} else {
			bSuccess = FALSE;
41102ac8:	e03ffc15 	stw	zero,-16(fp)
		}

		return bSuccess;
41102acc:	e0bffc17 	ldw	r2,-16(fp)
	}
41102ad0:	e037883a 	mov	sp,fp
41102ad4:	dfc00117 	ldw	ra,4(sp)
41102ad8:	df000017 	ldw	fp,0(sp)
41102adc:	dec00204 	addi	sp,sp,8
41102ae0:	f800283a 	ret

41102ae4 <v_SpaceWire_Interface_Force_Reset>:

	void v_SpaceWire_Interface_Force_Reset(char c_SpwID){
41102ae4:	defffc04 	addi	sp,sp,-16
41102ae8:	dfc00315 	stw	ra,12(sp)
41102aec:	df000215 	stw	fp,8(sp)
41102af0:	df000204 	addi	fp,sp,8
41102af4:	2005883a 	mov	r2,r4
41102af8:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
41102afc:	d0a02104 	addi	r2,gp,-32636
41102b00:	e0bffe15 	stw	r2,-8(fp)
		switch (c_SpwID) {
41102b04:	e0bfff07 	ldb	r2,-4(fp)
41102b08:	10bfefc4 	addi	r2,r2,-65
41102b0c:	10c00228 	cmpgeui	r3,r2,8
41102b10:	1800261e 	bne	r3,zero,41102bac <v_SpaceWire_Interface_Force_Reset+0xc8>
41102b14:	100690ba 	slli	r3,r2,2
41102b18:	00904434 	movhi	r2,16656
41102b1c:	108acb04 	addi	r2,r2,11052
41102b20:	1885883a 	add	r2,r3,r2
41102b24:	10800017 	ldw	r2,0(r2)
41102b28:	1000683a 	jmp	r2
41102b2c:	41102b4c 	andi	r4,r8,16557
41102b30:	41102b58 	cmpnei	r4,r8,16557
41102b34:	41102b64 	muli	r4,r8,16557
41102b38:	41102b70 	cmpltui	r4,r8,16557
41102b3c:	41102b7c 	xorhi	r4,r8,16557
41102b40:	41102b88 	cmpgei	r4,r8,16558
41102b44:	41102b94 	ori	r4,r8,16558
41102b48:	41102ba0 	cmpeqi	r4,r8,16558
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
41102b4c:	d0a02104 	addi	r2,gp,-32636
41102b50:	e0bffe15 	stw	r2,-8(fp)
			break;
41102b54:	00001506 	br	41102bac <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
41102b58:	d0a02204 	addi	r2,gp,-32632
41102b5c:	e0bffe15 	stw	r2,-8(fp)
			break;
41102b60:	00001206 	br	41102bac <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
41102b64:	d0a02304 	addi	r2,gp,-32628
41102b68:	e0bffe15 	stw	r2,-8(fp)
			break;
41102b6c:	00000f06 	br	41102bac <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
41102b70:	d0a02404 	addi	r2,gp,-32624
41102b74:	e0bffe15 	stw	r2,-8(fp)
			break;
41102b78:	00000c06 	br	41102bac <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
41102b7c:	d0a02504 	addi	r2,gp,-32620
41102b80:	e0bffe15 	stw	r2,-8(fp)
			break;
41102b84:	00000906 	br	41102bac <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
41102b88:	d0a02604 	addi	r2,gp,-32616
41102b8c:	e0bffe15 	stw	r2,-8(fp)
			break;
41102b90:	00000606 	br	41102bac <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
41102b94:	d0a02704 	addi	r2,gp,-32612
41102b98:	e0bffe15 	stw	r2,-8(fp)
			break;
41102b9c:	00000306 	br	41102bac <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
41102ba0:	d0a02804 	addi	r2,gp,-32608
41102ba4:	e0bffe15 	stw	r2,-8(fp)
			break;
41102ba8:	0001883a 	nop
		}
		SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value | SPWC_CODEC_FORCE_RESET_CONTROL_BIT_MASK);
41102bac:	e0ffff07 	ldb	r3,-4(fp)
41102bb0:	e0bffe17 	ldw	r2,-8(fp)
41102bb4:	10800017 	ldw	r2,0(r2)
41102bb8:	10801014 	ori	r2,r2,64
41102bbc:	100d883a 	mov	r6,r2
41102bc0:	000b883a 	mov	r5,zero
41102bc4:	1809883a 	mov	r4,r3
41102bc8:	110233c0 	call	4110233c <SPWC_WRITE_REG32>

	}
41102bcc:	0001883a 	nop
41102bd0:	e037883a 	mov	sp,fp
41102bd4:	dfc00117 	ldw	ra,4(sp)
41102bd8:	df000017 	ldw	fp,0(sp)
41102bdc:	dec00204 	addi	sp,sp,8
41102be0:	f800283a 	ret

41102be4 <v_SpaceWire_Interface_Interrupts_Enable_Control>:

	bool v_SpaceWire_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
41102be4:	defff804 	addi	sp,sp,-32
41102be8:	dfc00715 	stw	ra,28(sp)
41102bec:	df000615 	stw	fp,24(sp)
41102bf0:	df000604 	addi	fp,sp,24
41102bf4:	2007883a 	mov	r3,r4
41102bf8:	2805883a 	mov	r2,r5
41102bfc:	e1bfff15 	stw	r6,-4(fp)
41102c00:	e0fffd05 	stb	r3,-12(fp)
41102c04:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
41102c08:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_ENABLE_BIT_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | SPWC_LINK_RUNNING_INTERRUPT_ENABLE_BIT_MASK;
41102c0c:	00800e04 	movi	r2,56
41102c10:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
41102c14:	d0a02104 	addi	r2,gp,-32636
41102c18:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
41102c1c:	e0bffd07 	ldb	r2,-12(fp)
41102c20:	10bfefc4 	addi	r2,r2,-65
41102c24:	10c00228 	cmpgeui	r3,r2,8
41102c28:	1800361e 	bne	r3,zero,41102d04 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
41102c2c:	100690ba 	slli	r3,r2,2
41102c30:	00904434 	movhi	r2,16656
41102c34:	108b1104 	addi	r2,r2,11332
41102c38:	1885883a 	add	r2,r3,r2
41102c3c:	10800017 	ldw	r2,0(r2)
41102c40:	1000683a 	jmp	r2
41102c44:	41102c64 	muli	r4,r8,16561
41102c48:	41102c78 	rdprs	r4,r8,16561
41102c4c:	41102c8c 	andi	r4,r8,16562
41102c50:	41102ca0 	cmpeqi	r4,r8,16562
41102c54:	41102cb4 	orhi	r4,r8,16562
41102c58:	41102cc8 	cmpgei	r4,r8,16563
41102c5c:	41102cdc 	xori	r4,r8,16563
41102c60:	41102cf0 	cmpltui	r4,r8,16563
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
41102c64:	d0a02104 	addi	r2,gp,-32636
41102c68:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102c6c:	00800044 	movi	r2,1
41102c70:	e0bffa15 	stw	r2,-24(fp)
			break;
41102c74:	00002306 	br	41102d04 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
41102c78:	d0a02204 	addi	r2,gp,-32632
41102c7c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102c80:	00800044 	movi	r2,1
41102c84:	e0bffa15 	stw	r2,-24(fp)
			break;
41102c88:	00001e06 	br	41102d04 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
41102c8c:	d0a02304 	addi	r2,gp,-32628
41102c90:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102c94:	00800044 	movi	r2,1
41102c98:	e0bffa15 	stw	r2,-24(fp)
			break;
41102c9c:	00001906 	br	41102d04 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
41102ca0:	d0a02404 	addi	r2,gp,-32624
41102ca4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102ca8:	00800044 	movi	r2,1
41102cac:	e0bffa15 	stw	r2,-24(fp)
			break;
41102cb0:	00001406 	br	41102d04 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
41102cb4:	d0a02504 	addi	r2,gp,-32620
41102cb8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102cbc:	00800044 	movi	r2,1
41102cc0:	e0bffa15 	stw	r2,-24(fp)
			break;
41102cc4:	00000f06 	br	41102d04 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
41102cc8:	d0a02604 	addi	r2,gp,-32616
41102ccc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102cd0:	00800044 	movi	r2,1
41102cd4:	e0bffa15 	stw	r2,-24(fp)
			break;
41102cd8:	00000a06 	br	41102d04 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
41102cdc:	d0a02704 	addi	r2,gp,-32612
41102ce0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102ce4:	00800044 	movi	r2,1
41102ce8:	e0bffa15 	stw	r2,-24(fp)
			break;
41102cec:	00000506 	br	41102d04 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
41102cf0:	d0a02804 	addi	r2,gp,-32608
41102cf4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41102cf8:	00800044 	movi	r2,1
41102cfc:	e0bffa15 	stw	r2,-24(fp)
			break;
41102d00:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
41102d04:	e0bffa17 	ldw	r2,-24(fp)
41102d08:	10800058 	cmpnei	r2,r2,1
41102d0c:	10002b1e 	bne	r2,zero,41102dbc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d8>
41102d10:	e0ffff17 	ldw	r3,-4(fp)
41102d14:	e0bffc17 	ldw	r2,-16(fp)
41102d18:	1884703a 	and	r2,r3,r2
41102d1c:	10002726 	beq	r2,zero,41102dbc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
41102d20:	e0bffe03 	ldbu	r2,-8(fp)
41102d24:	10000326 	beq	r2,zero,41102d34 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x150>
41102d28:	10800060 	cmpeqi	r2,r2,1
41102d2c:	1000121e 	bne	r2,zero,41102d78 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
41102d30:	00002306 	br	41102dc0 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_InterruptMask;
41102d34:	e0bffb17 	ldw	r2,-20(fp)
41102d38:	10c00017 	ldw	r3,0(r2)
41102d3c:	e0bfff17 	ldw	r2,-4(fp)
41102d40:	0084303a 	nor	r2,zero,r2
41102d44:	1886703a 	and	r3,r3,r2
41102d48:	e0bffb17 	ldw	r2,-20(fp)
41102d4c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
41102d50:	e0fffd07 	ldb	r3,-12(fp)
41102d54:	e0bffb17 	ldw	r2,-20(fp)
41102d58:	10800017 	ldw	r2,0(r2)
41102d5c:	100d883a 	mov	r6,r2
41102d60:	000b883a 	mov	r5,zero
41102d64:	1809883a 	mov	r4,r3
41102d68:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					bSuccess = TRUE;
41102d6c:	00800044 	movi	r2,1
41102d70:	e0bffa15 	stw	r2,-24(fp)
				break;
41102d74:	00001006 	br	41102db8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_InterruptMask;
41102d78:	e0bffb17 	ldw	r2,-20(fp)
41102d7c:	10c00017 	ldw	r3,0(r2)
41102d80:	e0bfff17 	ldw	r2,-4(fp)
41102d84:	1886b03a 	or	r3,r3,r2
41102d88:	e0bffb17 	ldw	r2,-20(fp)
41102d8c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
41102d90:	e0fffd07 	ldb	r3,-12(fp)
41102d94:	e0bffb17 	ldw	r2,-20(fp)
41102d98:	10800017 	ldw	r2,0(r2)
41102d9c:	100d883a 	mov	r6,r2
41102da0:	000b883a 	mov	r5,zero
41102da4:	1809883a 	mov	r4,r3
41102da8:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					bSuccess = TRUE;
41102dac:	00800044 	movi	r2,1
41102db0:	e0bffa15 	stw	r2,-24(fp)
				break;
41102db4:	0001883a 	nop

			}
		} else {
41102db8:	00000106 	br	41102dc0 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>
			bSuccess = FALSE;
41102dbc:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
41102dc0:	e0bffa17 	ldw	r2,-24(fp)
	}
41102dc4:	e037883a 	mov	sp,fp
41102dc8:	dfc00117 	ldw	ra,4(sp)
41102dcc:	df000017 	ldw	fp,0(sp)
41102dd0:	dec00204 	addi	sp,sp,8
41102dd4:	f800283a 	ret

41102dd8 <ul_SpaceWire_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_SpaceWire_Interface_Interrupts_Flags_Read(char c_SpwID){
41102dd8:	defffb04 	addi	sp,sp,-20
41102ddc:	dfc00415 	stw	ra,16(sp)
41102de0:	df000315 	stw	fp,12(sp)
41102de4:	df000304 	addi	fp,sp,12
41102de8:	2005883a 	mov	r2,r4
41102dec:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
41102df0:	008001c4 	movi	r2,7
41102df4:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_interrupts_flags_value = SPWC_READ_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
41102df8:	e0bfff07 	ldb	r2,-4(fp)
41102dfc:	000b883a 	mov	r5,zero
41102e00:	1009883a 	mov	r4,r2
41102e04:	110241c0 	call	4110241c <SPWC_READ_REG32>
41102e08:	1007883a 	mov	r3,r2
41102e0c:	e0bffd17 	ldw	r2,-12(fp)
41102e10:	1884703a 	and	r2,r3,r2
41102e14:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_interrupts_flags_value;
41102e18:	e0bffe17 	ldw	r2,-8(fp)
	}
41102e1c:	e037883a 	mov	sp,fp
41102e20:	dfc00117 	ldw	ra,4(sp)
41102e24:	df000017 	ldw	fp,0(sp)
41102e28:	dec00204 	addi	sp,sp,8
41102e2c:	f800283a 	ret

41102e30 <v_SpaceWire_Interface_Interrupts_Flags_Clear>:

	void v_SpaceWire_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
41102e30:	defff904 	addi	sp,sp,-28
41102e34:	dfc00615 	stw	ra,24(sp)
41102e38:	df000515 	stw	fp,20(sp)
41102e3c:	df000504 	addi	fp,sp,20
41102e40:	2005883a 	mov	r2,r4
41102e44:	e17fff15 	stw	r5,-4(fp)
41102e48:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
41102e4c:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
41102e50:	008001c4 	movi	r2,7
41102e54:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
41102e58:	d0a02104 	addi	r2,gp,-32636
41102e5c:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
41102e60:	e0bffe07 	ldb	r2,-8(fp)
41102e64:	10bfefc4 	addi	r2,r2,-65
41102e68:	10c00228 	cmpgeui	r3,r2,8
41102e6c:	1800361e 	bne	r3,zero,41102f48 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
41102e70:	100690ba 	slli	r3,r2,2
41102e74:	00904434 	movhi	r2,16656
41102e78:	108ba204 	addi	r2,r2,11912
41102e7c:	1885883a 	add	r2,r3,r2
41102e80:	10800017 	ldw	r2,0(r2)
41102e84:	1000683a 	jmp	r2
41102e88:	41102ea8 	cmpgeui	r4,r8,16570
41102e8c:	41102ebc 	xorhi	r4,r8,16570
41102e90:	41102ed0 	cmplti	r4,r8,16571
41102e94:	41102ee4 	muli	r4,r8,16571
41102e98:	41102ef8 	rdprs	r4,r8,16571
41102e9c:	41102f0c 	andi	r4,r8,16572
41102ea0:	41102f20 	cmpeqi	r4,r8,16572
41102ea4:	41102f34 	orhi	r4,r8,16572
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
41102ea8:	d0a02104 	addi	r2,gp,-32636
41102eac:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41102eb0:	00800044 	movi	r2,1
41102eb4:	e0bffb15 	stw	r2,-20(fp)
			break;
41102eb8:	00002306 	br	41102f48 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
41102ebc:	d0a02204 	addi	r2,gp,-32632
41102ec0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41102ec4:	00800044 	movi	r2,1
41102ec8:	e0bffb15 	stw	r2,-20(fp)
			break;
41102ecc:	00001e06 	br	41102f48 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
41102ed0:	d0a02304 	addi	r2,gp,-32628
41102ed4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41102ed8:	00800044 	movi	r2,1
41102edc:	e0bffb15 	stw	r2,-20(fp)
			break;
41102ee0:	00001906 	br	41102f48 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
41102ee4:	d0a02404 	addi	r2,gp,-32624
41102ee8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41102eec:	00800044 	movi	r2,1
41102ef0:	e0bffb15 	stw	r2,-20(fp)
			break;
41102ef4:	00001406 	br	41102f48 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
41102ef8:	d0a02504 	addi	r2,gp,-32620
41102efc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41102f00:	00800044 	movi	r2,1
41102f04:	e0bffb15 	stw	r2,-20(fp)
			break;
41102f08:	00000f06 	br	41102f48 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
41102f0c:	d0a02604 	addi	r2,gp,-32616
41102f10:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41102f14:	00800044 	movi	r2,1
41102f18:	e0bffb15 	stw	r2,-20(fp)
			break;
41102f1c:	00000a06 	br	41102f48 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
41102f20:	d0a02704 	addi	r2,gp,-32612
41102f24:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41102f28:	00800044 	movi	r2,1
41102f2c:	e0bffb15 	stw	r2,-20(fp)
			break;
41102f30:	00000506 	br	41102f48 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
41102f34:	d0a02804 	addi	r2,gp,-32608
41102f38:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41102f3c:	00800044 	movi	r2,1
41102f40:	e0bffb15 	stw	r2,-20(fp)
			break;
41102f44:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
41102f48:	e0bffb17 	ldw	r2,-20(fp)
41102f4c:	10800058 	cmpnei	r2,r2,1
41102f50:	10000d1e 	bne	r2,zero,41102f88 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x158>
41102f54:	e0ffff17 	ldw	r3,-4(fp)
41102f58:	e0bffd17 	ldw	r2,-12(fp)
41102f5c:	1884703a 	and	r2,r3,r2
41102f60:	10000926 	beq	r2,zero,41102f88 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x158>
			SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_spwc_interface_control_status_register_value | ul_spwc_mask));
41102f64:	e13ffe07 	ldb	r4,-8(fp)
41102f68:	e0bffc17 	ldw	r2,-16(fp)
41102f6c:	10c00017 	ldw	r3,0(r2)
41102f70:	e0bffd17 	ldw	r2,-12(fp)
41102f74:	1884b03a 	or	r2,r3,r2
41102f78:	100d883a 	mov	r6,r2
41102f7c:	000b883a 	mov	r5,zero
41102f80:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
41102f84:	00000106 	br	41102f8c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x15c>
		} else {
			bSuccess = FALSE;
41102f88:	e03ffb15 	stw	zero,-20(fp)
		}
	}
41102f8c:	0001883a 	nop
41102f90:	e037883a 	mov	sp,fp
41102f94:	dfc00117 	ldw	ra,4(sp)
41102f98:	df000017 	ldw	fp,0(sp)
41102f9c:	dec00204 	addi	sp,sp,8
41102fa0:	f800283a 	ret

41102fa4 <v_SpaceWire_Interface_Link_Control>:

	bool v_SpaceWire_Interface_Link_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_ControlMask){
41102fa4:	defff804 	addi	sp,sp,-32
41102fa8:	dfc00715 	stw	ra,28(sp)
41102fac:	df000615 	stw	fp,24(sp)
41102fb0:	df000604 	addi	fp,sp,24
41102fb4:	2007883a 	mov	r3,r4
41102fb8:	2805883a 	mov	r2,r5
41102fbc:	e1bfff15 	stw	r6,-4(fp)
41102fc0:	e0fffd05 	stb	r3,-12(fp)
41102fc4:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
41102fc8:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_AUTOSTART_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK | SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK;
41102fcc:	0080e004 	movi	r2,896
41102fd0:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
41102fd4:	d0a00104 	addi	r2,gp,-32764
41102fd8:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
41102fdc:	e0bffd07 	ldb	r2,-12(fp)
41102fe0:	10bfefc4 	addi	r2,r2,-65
41102fe4:	10c00228 	cmpgeui	r3,r2,8
41102fe8:	1800361e 	bne	r3,zero,411030c4 <v_SpaceWire_Interface_Link_Control+0x120>
41102fec:	100690ba 	slli	r3,r2,2
41102ff0:	00904434 	movhi	r2,16656
41102ff4:	108c0104 	addi	r2,r2,12292
41102ff8:	1885883a 	add	r2,r3,r2
41102ffc:	10800017 	ldw	r2,0(r2)
41103000:	1000683a 	jmp	r2
41103004:	41103024 	muli	r4,r8,16576
41103008:	41103038 	rdprs	r4,r8,16576
4110300c:	4110304c 	andi	r4,r8,16577
41103010:	41103060 	cmpeqi	r4,r8,16577
41103014:	41103074 	orhi	r4,r8,16577
41103018:	41103088 	cmpgei	r4,r8,16578
4110301c:	4110309c 	xori	r4,r8,16578
41103020:	411030b0 	cmpltui	r4,r8,16578
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
41103024:	d0a00104 	addi	r2,gp,-32764
41103028:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
4110302c:	00800044 	movi	r2,1
41103030:	e0bffa15 	stw	r2,-24(fp)
			break;
41103034:	00002306 	br	411030c4 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
41103038:	d0a00204 	addi	r2,gp,-32760
4110303c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103040:	00800044 	movi	r2,1
41103044:	e0bffa15 	stw	r2,-24(fp)
			break;
41103048:	00001e06 	br	411030c4 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
4110304c:	d0a00304 	addi	r2,gp,-32756
41103050:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103054:	00800044 	movi	r2,1
41103058:	e0bffa15 	stw	r2,-24(fp)
			break;
4110305c:	00001906 	br	411030c4 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
41103060:	d0a00404 	addi	r2,gp,-32752
41103064:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103068:	00800044 	movi	r2,1
4110306c:	e0bffa15 	stw	r2,-24(fp)
			break;
41103070:	00001406 	br	411030c4 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
41103074:	d0a00504 	addi	r2,gp,-32748
41103078:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
4110307c:	00800044 	movi	r2,1
41103080:	e0bffa15 	stw	r2,-24(fp)
			break;
41103084:	00000f06 	br	411030c4 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
41103088:	d0a00604 	addi	r2,gp,-32744
4110308c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103090:	00800044 	movi	r2,1
41103094:	e0bffa15 	stw	r2,-24(fp)
			break;
41103098:	00000a06 	br	411030c4 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
4110309c:	d0a00704 	addi	r2,gp,-32740
411030a0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
411030a4:	00800044 	movi	r2,1
411030a8:	e0bffa15 	stw	r2,-24(fp)
			break;
411030ac:	00000506 	br	411030c4 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
411030b0:	d0a00804 	addi	r2,gp,-32736
411030b4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
411030b8:	00800044 	movi	r2,1
411030bc:	e0bffa15 	stw	r2,-24(fp)
			break;
411030c0:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
411030c4:	e0bffa17 	ldw	r2,-24(fp)
411030c8:	10800058 	cmpnei	r2,r2,1
411030cc:	10002b1e 	bne	r2,zero,4110317c <v_SpaceWire_Interface_Link_Control+0x1d8>
411030d0:	e0ffff17 	ldw	r3,-4(fp)
411030d4:	e0bffc17 	ldw	r2,-16(fp)
411030d8:	1884703a 	and	r2,r3,r2
411030dc:	10002726 	beq	r2,zero,4110317c <v_SpaceWire_Interface_Link_Control+0x1d8>
			switch (uc_RegisterOperation){
411030e0:	e0bffe03 	ldbu	r2,-8(fp)
411030e4:	10000326 	beq	r2,zero,411030f4 <v_SpaceWire_Interface_Link_Control+0x150>
411030e8:	10800060 	cmpeqi	r2,r2,1
411030ec:	1000121e 	bne	r2,zero,41103138 <v_SpaceWire_Interface_Link_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
411030f0:	00002306 	br	41103180 <v_SpaceWire_Interface_Link_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_spacewire_link_control_status_register_value &= ~ul_ControlMask;
411030f4:	e0bffb17 	ldw	r2,-20(fp)
411030f8:	10c00017 	ldw	r3,0(r2)
411030fc:	e0bfff17 	ldw	r2,-4(fp)
41103100:	0084303a 	nor	r2,zero,r2
41103104:	1886703a 	and	r3,r3,r2
41103108:	e0bffb17 	ldw	r2,-20(fp)
4110310c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
41103110:	e0fffd07 	ldb	r3,-12(fp)
41103114:	e0bffb17 	ldw	r2,-20(fp)
41103118:	10800017 	ldw	r2,0(r2)
4110311c:	100d883a 	mov	r6,r2
41103120:	01400044 	movi	r5,1
41103124:	1809883a 	mov	r4,r3
41103128:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					bSuccess = TRUE;
4110312c:	00800044 	movi	r2,1
41103130:	e0bffa15 	stw	r2,-24(fp)
				break;
41103134:	00001006 	br	41103178 <v_SpaceWire_Interface_Link_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_spacewire_link_control_status_register_value |= ul_ControlMask;
41103138:	e0bffb17 	ldw	r2,-20(fp)
4110313c:	10c00017 	ldw	r3,0(r2)
41103140:	e0bfff17 	ldw	r2,-4(fp)
41103144:	1886b03a 	or	r3,r3,r2
41103148:	e0bffb17 	ldw	r2,-20(fp)
4110314c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
41103150:	e0fffd07 	ldb	r3,-12(fp)
41103154:	e0bffb17 	ldw	r2,-20(fp)
41103158:	10800017 	ldw	r2,0(r2)
4110315c:	100d883a 	mov	r6,r2
41103160:	01400044 	movi	r5,1
41103164:	1809883a 	mov	r4,r3
41103168:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					bSuccess = TRUE;
4110316c:	00800044 	movi	r2,1
41103170:	e0bffa15 	stw	r2,-24(fp)
				break;
41103174:	0001883a 	nop

			}
		} else {
41103178:	00000106 	br	41103180 <v_SpaceWire_Interface_Link_Control+0x1dc>
			bSuccess = FALSE;
4110317c:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
41103180:	e0bffa17 	ldw	r2,-24(fp)
	}
41103184:	e037883a 	mov	sp,fp
41103188:	dfc00117 	ldw	ra,4(sp)
4110318c:	df000017 	ldw	fp,0(sp)
41103190:	dec00204 	addi	sp,sp,8
41103194:	f800283a 	ret

41103198 <ul_SpaceWire_Interface_Link_Error_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Error_Read(char c_SpwID){
41103198:	defffb04 	addi	sp,sp,-20
4110319c:	dfc00415 	stw	ra,16(sp)
411031a0:	df000315 	stw	fp,12(sp)
411031a4:	df000304 	addi	fp,sp,12
411031a8:	2005883a 	mov	r2,r4
411031ac:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_DISCONNECT_ERROR_BIT_MASK | SPWC_LINK_PARITY_ERROR_BIT_MASK | SPWC_LINK_ESCAPE_ERROR_BIT_MASK | SPWC_LINK_CREDIT_ERROR_BIT_MASK;
411031b0:	00801e04 	movi	r2,120
411031b4:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_error_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
411031b8:	e0bfff07 	ldb	r2,-4(fp)
411031bc:	01400044 	movi	r5,1
411031c0:	1009883a 	mov	r4,r2
411031c4:	110241c0 	call	4110241c <SPWC_READ_REG32>
411031c8:	1007883a 	mov	r3,r2
411031cc:	e0bffd17 	ldw	r2,-12(fp)
411031d0:	1884703a 	and	r2,r3,r2
411031d4:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_error_value;
411031d8:	e0bffe17 	ldw	r2,-8(fp)
	}
411031dc:	e037883a 	mov	sp,fp
411031e0:	dfc00117 	ldw	ra,4(sp)
411031e4:	df000017 	ldw	fp,0(sp)
411031e8:	dec00204 	addi	sp,sp,8
411031ec:	f800283a 	ret

411031f0 <ul_SpaceWire_Interface_Link_Status_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Status_Read(char c_SpwID){
411031f0:	defffb04 	addi	sp,sp,-20
411031f4:	dfc00415 	stw	ra,16(sp)
411031f8:	df000315 	stw	fp,12(sp)
411031fc:	df000304 	addi	fp,sp,12
41103200:	2005883a 	mov	r2,r4
41103204:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_STARTED_STATUS_BIT_MASK | SPWC_LINK_CONNECTING_STATUS_BIT_MASK | SPWC_LINK_RUNNING_STATUS_BIT_MASK;
41103208:	008001c4 	movi	r2,7
4110320c:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_status_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
41103210:	e0bfff07 	ldb	r2,-4(fp)
41103214:	01400044 	movi	r5,1
41103218:	1009883a 	mov	r4,r2
4110321c:	110241c0 	call	4110241c <SPWC_READ_REG32>
41103220:	1007883a 	mov	r3,r2
41103224:	e0bffd17 	ldw	r2,-12(fp)
41103228:	1884703a 	and	r2,r3,r2
4110322c:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_status_value;
41103230:	e0bffe17 	ldw	r2,-8(fp)
	}
41103234:	e037883a 	mov	sp,fp
41103238:	dfc00117 	ldw	ra,4(sp)
4110323c:	df000017 	ldw	fp,0(sp)
41103240:	dec00204 	addi	sp,sp,8
41103244:	f800283a 	ret

41103248 <v_SpaceWire_Interface_Send_TimeCode>:

	void v_SpaceWire_Interface_Send_TimeCode(char c_SpwID, alt_u8 TimeCode){
41103248:	defffb04 	addi	sp,sp,-20
4110324c:	dfc00415 	stw	ra,16(sp)
41103250:	df000315 	stw	fp,12(sp)
41103254:	df000304 	addi	fp,sp,12
41103258:	2007883a 	mov	r3,r4
4110325c:	2805883a 	mov	r2,r5
41103260:	e0fffe05 	stb	r3,-8(fp)
41103264:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = (((alt_u32)TimeCode) << 1) | SPWC_TX_TIMECODE_CONTROL_BIT_MASK;
41103268:	e0bfff03 	ldbu	r2,-4(fp)
4110326c:	1085883a 	add	r2,r2,r2
41103270:	10800054 	ori	r2,r2,1
41103274:	e0bffd15 	stw	r2,-12(fp)
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, ul_spwc_mask);
41103278:	e0bffe07 	ldb	r2,-8(fp)
4110327c:	e1bffd17 	ldw	r6,-12(fp)
41103280:	01400084 	movi	r5,2
41103284:	1009883a 	mov	r4,r2
41103288:	110233c0 	call	4110233c <SPWC_WRITE_REG32>

	}
4110328c:	0001883a 	nop
41103290:	e037883a 	mov	sp,fp
41103294:	dfc00117 	ldw	ra,4(sp)
41103298:	df000017 	ldw	fp,0(sp)
4110329c:	dec00204 	addi	sp,sp,8
411032a0:	f800283a 	ret

411032a4 <b_SpaceWire_Interface_TimeCode_Arrived>:

	bool b_SpaceWire_Interface_TimeCode_Arrived(char c_SpwID){
411032a4:	defffc04 	addi	sp,sp,-16
411032a8:	dfc00315 	stw	ra,12(sp)
411032ac:	df000215 	stw	fp,8(sp)
411032b0:	df000204 	addi	fp,sp,8
411032b4:	2005883a 	mov	r2,r4
411032b8:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_timecode_arrived = FALSE;
411032bc:	e03ffe15 	stw	zero,-8(fp)
		
		if (SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS) & SPWC_RX_TIMECODE_STATUS_BIT_MASK) {
411032c0:	e0bfff07 	ldb	r2,-4(fp)
411032c4:	01400084 	movi	r5,2
411032c8:	1009883a 	mov	r4,r2
411032cc:	110241c0 	call	4110241c <SPWC_READ_REG32>
411032d0:	1080006c 	andhi	r2,r2,1
411032d4:	10000226 	beq	r2,zero,411032e0 <b_SpaceWire_Interface_TimeCode_Arrived+0x3c>
			b_timecode_arrived = TRUE;
411032d8:	00800044 	movi	r2,1
411032dc:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_timecode_arrived;
411032e0:	e0bffe17 	ldw	r2,-8(fp)
	}
411032e4:	e037883a 	mov	sp,fp
411032e8:	dfc00117 	ldw	ra,4(sp)
411032ec:	df000017 	ldw	fp,0(sp)
411032f0:	dec00204 	addi	sp,sp,8
411032f4:	f800283a 	ret

411032f8 <uc_SpaceWire_Interface_Get_TimeCode>:
	
	alt_u8 uc_SpaceWire_Interface_Get_TimeCode(char c_SpwID){
411032f8:	defffb04 	addi	sp,sp,-20
411032fc:	dfc00415 	stw	ra,16(sp)
41103300:	df000315 	stw	fp,12(sp)
41103304:	df000304 	addi	fp,sp,12
41103308:	2005883a 	mov	r2,r4
4110330c:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_timecode_register = SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS);
41103310:	e0bfff07 	ldb	r2,-4(fp)
41103314:	01400084 	movi	r5,2
41103318:	1009883a 	mov	r4,r2
4110331c:	110241c0 	call	4110241c <SPWC_READ_REG32>
41103320:	e0bffd15 	stw	r2,-12(fp)
		
		alt_u8 uc_timecode_value = (alt_u8)((ul_timecode_register & (SPWC_RX_TIMECODE_CONTROL_BITS_MASK | SPWC_RX_TIMECODE_COUNTER_VALUE_MASK)) >> 17);
41103324:	e0bffd17 	ldw	r2,-12(fp)
41103328:	10807fac 	andhi	r2,r2,510
4110332c:	1004d47a 	srli	r2,r2,17
41103330:	e0bffe05 	stb	r2,-8(fp)
	
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, (ul_timecode_register | SPWC_RX_TIMECODE_STATUS_BIT_MASK));
41103334:	e0ffff07 	ldb	r3,-4(fp)
41103338:	e0bffd17 	ldw	r2,-12(fp)
4110333c:	10800074 	orhi	r2,r2,1
41103340:	100d883a 	mov	r6,r2
41103344:	01400084 	movi	r5,2
41103348:	1809883a 	mov	r4,r3
4110334c:	110233c0 	call	4110233c <SPWC_WRITE_REG32>

		return uc_timecode_value;
41103350:	e0bffe03 	ldbu	r2,-8(fp)
	}
41103354:	e037883a 	mov	sp,fp
41103358:	dfc00117 	ldw	ra,4(sp)
4110335c:	df000017 	ldw	fp,0(sp)
41103360:	dec00204 	addi	sp,sp,8
41103364:	f800283a 	ret

41103368 <uc_SpaceWire_Interface_Get_TX_Div>:

	alt_u8 uc_SpaceWire_Interface_Get_TX_Div(char c_SpwID){
41103368:	defffb04 	addi	sp,sp,-20
4110336c:	dfc00415 	stw	ra,16(sp)
41103370:	df000315 	stw	fp,12(sp)
41103374:	df000304 	addi	fp,sp,12
41103378:	2005883a 	mov	r2,r4
4110337c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
41103380:	00800134 	movhi	r2,4
41103384:	10bf0004 	addi	r2,r2,-1024
41103388:	e0bffd15 	stw	r2,-12(fp)
		alt_u8 uc_txdiv_value = (alt_u8)((SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask) >> 10);
4110338c:	e0bfff07 	ldb	r2,-4(fp)
41103390:	01400044 	movi	r5,1
41103394:	1009883a 	mov	r4,r2
41103398:	110241c0 	call	4110241c <SPWC_READ_REG32>
4110339c:	1007883a 	mov	r3,r2
411033a0:	e0bffd17 	ldw	r2,-12(fp)
411033a4:	1884703a 	and	r2,r3,r2
411033a8:	1004d2ba 	srli	r2,r2,10
411033ac:	e0bffe05 	stb	r2,-8(fp)

		return uc_txdiv_value;
411033b0:	e0bffe03 	ldbu	r2,-8(fp)
	}
411033b4:	e037883a 	mov	sp,fp
411033b8:	dfc00117 	ldw	ra,4(sp)
411033bc:	df000017 	ldw	fp,0(sp)
411033c0:	dec00204 	addi	sp,sp,8
411033c4:	f800283a 	ret

411033c8 <b_SpaceWire_Interface_Set_TX_Div>:

	bool b_SpaceWire_Interface_Set_TX_Div(char c_SpwID, alt_u8 uc_TxDiv){
411033c8:	defff804 	addi	sp,sp,-32
411033cc:	dfc00715 	stw	ra,28(sp)
411033d0:	df000615 	stw	fp,24(sp)
411033d4:	df000604 	addi	fp,sp,24
411033d8:	2007883a 	mov	r3,r4
411033dc:	2805883a 	mov	r2,r5
411033e0:	e0fffe05 	stb	r3,-8(fp)
411033e4:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
411033e8:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
411033ec:	00800134 	movhi	r2,4
411033f0:	10bf0004 	addi	r2,r2,-1024
411033f4:	e0bffc15 	stw	r2,-16(fp)
		const alt_u32 ul_txdiv_mask = (alt_u32)(uc_TxDiv << 10);
411033f8:	e0bfff03 	ldbu	r2,-4(fp)
411033fc:	100492ba 	slli	r2,r2,10
41103400:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
41103404:	d0a00104 	addi	r2,gp,-32764
41103408:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
4110340c:	e0bffe07 	ldb	r2,-8(fp)
41103410:	10bfefc4 	addi	r2,r2,-65
41103414:	10c00228 	cmpgeui	r3,r2,8
41103418:	1800361e 	bne	r3,zero,411034f4 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
4110341c:	100690ba 	slli	r3,r2,2
41103420:	00904434 	movhi	r2,16656
41103424:	108d0d04 	addi	r2,r2,13364
41103428:	1885883a 	add	r2,r3,r2
4110342c:	10800017 	ldw	r2,0(r2)
41103430:	1000683a 	jmp	r2
41103434:	41103454 	ori	r4,r8,16593
41103438:	41103468 	cmpgeui	r4,r8,16593
4110343c:	4110347c 	xorhi	r4,r8,16593
41103440:	41103490 	cmplti	r4,r8,16594
41103444:	411034a4 	muli	r4,r8,16594
41103448:	411034b8 	rdprs	r4,r8,16594
4110344c:	411034cc 	andi	r4,r8,16595
41103450:	411034e0 	cmpeqi	r4,r8,16595
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
41103454:	d0a00104 	addi	r2,gp,-32764
41103458:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
4110345c:	00800044 	movi	r2,1
41103460:	e0bffa15 	stw	r2,-24(fp)
			break;
41103464:	00002306 	br	411034f4 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
41103468:	d0a00204 	addi	r2,gp,-32760
4110346c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103470:	00800044 	movi	r2,1
41103474:	e0bffa15 	stw	r2,-24(fp)
			break;
41103478:	00001e06 	br	411034f4 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
4110347c:	d0a00304 	addi	r2,gp,-32756
41103480:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103484:	00800044 	movi	r2,1
41103488:	e0bffa15 	stw	r2,-24(fp)
			break;
4110348c:	00001906 	br	411034f4 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
41103490:	d0a00404 	addi	r2,gp,-32752
41103494:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103498:	00800044 	movi	r2,1
4110349c:	e0bffa15 	stw	r2,-24(fp)
			break;
411034a0:	00001406 	br	411034f4 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
411034a4:	d0a00504 	addi	r2,gp,-32748
411034a8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
411034ac:	00800044 	movi	r2,1
411034b0:	e0bffa15 	stw	r2,-24(fp)
			break;
411034b4:	00000f06 	br	411034f4 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
411034b8:	d0a00604 	addi	r2,gp,-32744
411034bc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
411034c0:	00800044 	movi	r2,1
411034c4:	e0bffa15 	stw	r2,-24(fp)
			break;
411034c8:	00000a06 	br	411034f4 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
411034cc:	d0a00704 	addi	r2,gp,-32740
411034d0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
411034d4:	00800044 	movi	r2,1
411034d8:	e0bffa15 	stw	r2,-24(fp)
			break;
411034dc:	00000506 	br	411034f4 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
411034e0:	d0a00804 	addi	r2,gp,-32736
411034e4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
411034e8:	00800044 	movi	r2,1
411034ec:	e0bffa15 	stw	r2,-24(fp)
			break;
411034f0:	0001883a 	nop
		}
		if (bSuccess == TRUE){
411034f4:	e0bffa17 	ldw	r2,-24(fp)
411034f8:	10800058 	cmpnei	r2,r2,1
411034fc:	1000171e 	bne	r2,zero,4110355c <b_SpaceWire_Interface_Set_TX_Div+0x194>
			*ul_spwc_spacewire_link_control_status_register_value &= ~(ul_spwc_mask);
41103500:	e0bffb17 	ldw	r2,-20(fp)
41103504:	10c00017 	ldw	r3,0(r2)
41103508:	e0bffc17 	ldw	r2,-16(fp)
4110350c:	0084303a 	nor	r2,zero,r2
41103510:	1886703a 	and	r3,r3,r2
41103514:	e0bffb17 	ldw	r2,-20(fp)
41103518:	10c00015 	stw	r3,0(r2)
			*ul_spwc_spacewire_link_control_status_register_value |= ul_txdiv_mask;
4110351c:	e0bffb17 	ldw	r2,-20(fp)
41103520:	10c00017 	ldw	r3,0(r2)
41103524:	e0bffd17 	ldw	r2,-12(fp)
41103528:	1886b03a 	or	r3,r3,r2
4110352c:	e0bffb17 	ldw	r2,-20(fp)
41103530:	10c00015 	stw	r3,0(r2)
			SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
41103534:	e0fffe07 	ldb	r3,-8(fp)
41103538:	e0bffb17 	ldw	r2,-20(fp)
4110353c:	10800017 	ldw	r2,0(r2)
41103540:	100d883a 	mov	r6,r2
41103544:	01400044 	movi	r5,1
41103548:	1809883a 	mov	r4,r3
4110354c:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
			bSuccess = TRUE;
41103550:	00800044 	movi	r2,1
41103554:	e0bffa15 	stw	r2,-24(fp)
41103558:	00000106 	br	41103560 <b_SpaceWire_Interface_Set_TX_Div+0x198>
		} else {
			bSuccess = FALSE;
4110355c:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
41103560:	e0bffa17 	ldw	r2,-24(fp)
	}
41103564:	e037883a 	mov	sp,fp
41103568:	dfc00117 	ldw	ra,4(sp)
4110356c:	df000017 	ldw	fp,0(sp)
41103570:	dec00204 	addi	sp,sp,8
41103574:	f800283a 	ret

41103578 <b_SpaceWire_Interface_Write_TX_Data>:

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){
41103578:	defffa04 	addi	sp,sp,-24
4110357c:	dfc00515 	stw	ra,20(sp)
41103580:	df000415 	stw	fp,16(sp)
41103584:	df000404 	addi	fp,sp,16
41103588:	2807883a 	mov	r3,r5
4110358c:	3005883a 	mov	r2,r6
41103590:	e13ffd05 	stb	r4,-12(fp)
41103594:	e0fffe05 	stb	r3,-8(fp)
41103598:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
4110359c:	e03ffc15 	stw	zero,-16(fp)
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
411035a0:	e0bffd07 	ldb	r2,-12(fp)
411035a4:	014000c4 	movi	r5,3
411035a8:	1009883a 	mov	r4,r2
411035ac:	110241c0 	call	4110241c <SPWC_READ_REG32>
411035b0:	1081000c 	andi	r2,r2,1024
411035b4:	10000c26 	beq	r2,zero,411035e8 <b_SpaceWire_Interface_Write_TX_Data+0x70>
			SPWC_WRITE_REG32(c_SpwID,
411035b8:	e13ffd07 	ldb	r4,-12(fp)
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
411035bc:	e0bffe03 	ldbu	r2,-8(fp)
411035c0:	1080004c 	andi	r2,r2,1
411035c4:	1004923a 	slli	r2,r2,8
411035c8:	10c08014 	ori	r3,r2,512
411035cc:	e0bfff03 	ldbu	r2,-4(fp)
411035d0:	1884b03a 	or	r2,r3,r2

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){

		bool bSuccess = FALSE;
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
			SPWC_WRITE_REG32(c_SpwID,
411035d4:	100d883a 	mov	r6,r2
411035d8:	014000c4 	movi	r5,3
411035dc:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
			bSuccess = TRUE;
411035e0:	00800044 	movi	r2,1
411035e4:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
411035e8:	e0bffc17 	ldw	r2,-16(fp)
	}
411035ec:	e037883a 	mov	sp,fp
411035f0:	dfc00117 	ldw	ra,4(sp)
411035f4:	df000017 	ldw	fp,0(sp)
411035f8:	dec00204 	addi	sp,sp,8
411035fc:	f800283a 	ret

41103600 <b_SpaceWire_Interface_Send_SpaceWire_Data>:

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
41103600:	defff904 	addi	sp,sp,-28
41103604:	dfc00615 	stw	ra,24(sp)
41103608:	df000515 	stw	fp,20(sp)
4110360c:	df000504 	addi	fp,sp,20
41103610:	2007883a 	mov	r3,r4
41103614:	e17ffe15 	stw	r5,-8(fp)
41103618:	3005883a 	mov	r2,r6
4110361c:	e0fffd05 	stb	r3,-12(fp)
41103620:	e0bfff0d 	sth	r2,-4(fp)
		bool bSuccess = FALSE;
41103624:	e03ffb15 	stw	zero,-20(fp)

		alt_u16 cnt = 0;
41103628:	e03ffc0d 	sth	zero,-16(fp)
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
4110362c:	00000306 	br	4110363c <b_SpaceWire_Interface_Send_SpaceWire_Data+0x3c>
			cnt++;
41103630:	e0bffc0b 	ldhu	r2,-16(fp)
41103634:	10800044 	addi	r2,r2,1
41103638:	e0bffc0d 	sth	r2,-16(fp)

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
		bool bSuccess = FALSE;

		alt_u16 cnt = 0;
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
4110363c:	e13ffd07 	ldb	r4,-12(fp)
41103640:	e0bffc0b 	ldhu	r2,-16(fp)
41103644:	e0fffe17 	ldw	r3,-8(fp)
41103648:	1885883a 	add	r2,r3,r2
4110364c:	10800003 	ldbu	r2,0(r2)
41103650:	10803fcc 	andi	r2,r2,255
41103654:	100d883a 	mov	r6,r2
41103658:	000b883a 	mov	r5,zero
4110365c:	11035780 	call	41103578 <b_SpaceWire_Interface_Write_TX_Data>
41103660:	10000426 	beq	r2,zero,41103674 <b_SpaceWire_Interface_Send_SpaceWire_Data+0x74>
41103664:	e0fffc0b 	ldhu	r3,-16(fp)
41103668:	e0bfff0b 	ldhu	r2,-4(fp)
4110366c:	10bfffc4 	addi	r2,r2,-1
41103670:	18bfef16 	blt	r3,r2,41103630 <__reset+0xbb0e3630>
			cnt++;
		}
		if (cnt == (data_size - 1)) {
41103674:	e0fffc0b 	ldhu	r3,-16(fp)
41103678:	e0bfff0b 	ldhu	r2,-4(fp)
4110367c:	10bfffc4 	addi	r2,r2,-1
41103680:	1880081e 	bne	r3,r2,411036a4 <b_SpaceWire_Interface_Send_SpaceWire_Data+0xa4>
			if (b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 1, 0)){
41103684:	e0bffd07 	ldb	r2,-12(fp)
41103688:	000d883a 	mov	r6,zero
4110368c:	01400044 	movi	r5,1
41103690:	1009883a 	mov	r4,r2
41103694:	11035780 	call	41103578 <b_SpaceWire_Interface_Write_TX_Data>
41103698:	10000226 	beq	r2,zero,411036a4 <b_SpaceWire_Interface_Send_SpaceWire_Data+0xa4>
				bSuccess = TRUE;
4110369c:	00800044 	movi	r2,1
411036a0:	e0bffb15 	stw	r2,-20(fp)
			}
		}

		return bSuccess;
411036a4:	e0bffb17 	ldw	r2,-20(fp)
	}
411036a8:	e037883a 	mov	sp,fp
411036ac:	dfc00117 	ldw	ra,4(sp)
411036b0:	df000017 	ldw	fp,0(sp)
411036b4:	dec00204 	addi	sp,sp,8
411036b8:	f800283a 	ret

411036bc <b_SpaceWire_Interface_Read_RX_Data>:

	bool b_SpaceWire_Interface_Read_RX_Data(char c_SpwID, alt_u8 *uc_RxFlag, alt_u8 *uc_RxData){
411036bc:	defff904 	addi	sp,sp,-28
411036c0:	dfc00615 	stw	ra,24(sp)
411036c4:	df000515 	stw	fp,20(sp)
411036c8:	df000504 	addi	fp,sp,20
411036cc:	2005883a 	mov	r2,r4
411036d0:	e17ffe15 	stw	r5,-8(fp)
411036d4:	e1bfff15 	stw	r6,-4(fp)
411036d8:	e0bffd05 	stb	r2,-12(fp)

		bool bSuccess = FALSE;
411036dc:	e03ffb15 	stw	zero,-20(fp)
		alt_u32 backdoor_register = 0;
411036e0:	e03ffc15 	stw	zero,-16(fp)

		backdoor_register = SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS);
411036e4:	e0bffd07 	ldb	r2,-12(fp)
411036e8:	014000c4 	movi	r5,3
411036ec:	1009883a 	mov	r4,r2
411036f0:	110241c0 	call	4110241c <SPWC_READ_REG32>
411036f4:	e0bffc15 	stw	r2,-16(fp)
		if (backdoor_register & SPWC_RX_CODEC_RX_DATAVALID_STATUS_BIT_MASK) {
411036f8:	e0bffc17 	ldw	r2,-16(fp)
411036fc:	1081002c 	andhi	r2,r2,1024
41103700:	10001326 	beq	r2,zero,41103750 <b_SpaceWire_Interface_Read_RX_Data+0x94>

			*uc_RxFlag = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_FLAG_VALUE_MASK) >> 24);
41103704:	e0bffc17 	ldw	r2,-16(fp)
41103708:	1080402c 	andhi	r2,r2,256
4110370c:	1004d63a 	srli	r2,r2,24
41103710:	1007883a 	mov	r3,r2
41103714:	e0bffe17 	ldw	r2,-8(fp)
41103718:	10c00005 	stb	r3,0(r2)
			*uc_RxData = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_DATA_VALUE_MASK) >> 16);
4110371c:	e0bffc17 	ldw	r2,-16(fp)
41103720:	10803fec 	andhi	r2,r2,255
41103724:	1004d43a 	srli	r2,r2,16
41103728:	1007883a 	mov	r3,r2
4110372c:	e0bfff17 	ldw	r2,-4(fp)
41103730:	10c00005 	stb	r3,0(r2)

			SPWC_WRITE_REG32(c_SpwID,
41103734:	e0bffd07 	ldb	r2,-12(fp)
41103738:	01808034 	movhi	r6,512
4110373c:	014000c4 	movi	r5,3
41103740:	1009883a 	mov	r4,r2
41103744:	110233c0 	call	4110233c <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_RX_CODEC_RX_READ_CONTROL_BIT_MASK));
			bSuccess = TRUE;
41103748:	00800044 	movi	r2,1
4110374c:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
41103750:	e0bffb17 	ldw	r2,-20(fp)
	}
41103754:	e037883a 	mov	sp,fp
41103758:	dfc00117 	ldw	ra,4(sp)
4110375c:	df000017 	ldw	fp,0(sp)
41103760:	dec00204 	addi	sp,sp,8
41103764:	f800283a 	ret

41103768 <ui_SpaceWire_Interface_Get_SpaceWire_Data>:

	alt_u16 ui_SpaceWire_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 buffer_size){
41103768:	defffa04 	addi	sp,sp,-24
4110376c:	dfc00515 	stw	ra,20(sp)
41103770:	df000415 	stw	fp,16(sp)
41103774:	df000404 	addi	fp,sp,16
41103778:	2007883a 	mov	r3,r4
4110377c:	e17ffe15 	stw	r5,-8(fp)
41103780:	3005883a 	mov	r2,r6
41103784:	e0fffd05 	stb	r3,-12(fp)
41103788:	e0bfff0d 	sth	r2,-4(fp)

		alt_u16 ui_rx_data_size = 0;
4110378c:	e03ffc0d 	sth	zero,-16(fp)

		alt_u8 spw_flag = 0;
41103790:	e03ffc85 	stb	zero,-14(fp)
		alt_u8 spw_data = 0;
41103794:	e03ffcc5 	stb	zero,-13(fp)

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
41103798:	00000b06 	br	411037c8 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x60>
			if (spw_flag == 0) {
4110379c:	e0bffc83 	ldbu	r2,-14(fp)
411037a0:	10803fcc 	andi	r2,r2,255
411037a4:	1000081e 	bne	r2,zero,411037c8 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x60>
				data_buffer[ui_rx_data_size] = spw_data;
411037a8:	e0bffc0b 	ldhu	r2,-16(fp)
411037ac:	e0fffe17 	ldw	r3,-8(fp)
411037b0:	1885883a 	add	r2,r3,r2
411037b4:	e0fffcc3 	ldbu	r3,-13(fp)
411037b8:	10c00005 	stb	r3,0(r2)
				ui_rx_data_size++;
411037bc:	e0bffc0b 	ldhu	r2,-16(fp)
411037c0:	10800044 	addi	r2,r2,1
411037c4:	e0bffc0d 	sth	r2,-16(fp)
		alt_u16 ui_rx_data_size = 0;

		alt_u8 spw_flag = 0;
		alt_u8 spw_data = 0;

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
411037c8:	e0bffd07 	ldb	r2,-12(fp)
411037cc:	e13ffcc4 	addi	r4,fp,-13
411037d0:	e0fffc84 	addi	r3,fp,-14
411037d4:	200d883a 	mov	r6,r4
411037d8:	180b883a 	mov	r5,r3
411037dc:	1009883a 	mov	r4,r2
411037e0:	11036bc0 	call	411036bc <b_SpaceWire_Interface_Read_RX_Data>
411037e4:	10000426 	beq	r2,zero,411037f8 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x90>
411037e8:	e0fffc0b 	ldhu	r3,-16(fp)
411037ec:	e0bfff0b 	ldhu	r2,-4(fp)
411037f0:	10bfffc4 	addi	r2,r2,-1
411037f4:	18bfe916 	blt	r3,r2,4110379c <__reset+0xbb0e379c>
				data_buffer[ui_rx_data_size] = spw_data;
				ui_rx_data_size++;
			}
		}

		return ui_rx_data_size;
411037f8:	e0bffc0b 	ldhu	r2,-16(fp)
	}
411037fc:	e037883a 	mov	sp,fp
41103800:	dfc00117 	ldw	ra,4(sp)
41103804:	df000017 	ldw	fp,0(sp)
41103808:	dec00204 	addi	sp,sp,8
4110380c:	f800283a 	ret

41103810 <TRAN_WRITE_REG32>:
	alt_u32 ul_tran_e_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_f_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_g_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_h_interface_control_status_register_value = 0x00000000;

	void TRAN_WRITE_REG32(char c_SpwID, alt_u8 RegisterOffset, alt_u32 RegisterValue){
41103810:	defffb04 	addi	sp,sp,-20
41103814:	df000415 	stw	fp,16(sp)
41103818:	df000404 	addi	fp,sp,16
4110381c:	2007883a 	mov	r3,r4
41103820:	2805883a 	mov	r2,r5
41103824:	e1bfff15 	stw	r6,-4(fp)
41103828:	e0fffd05 	stb	r3,-12(fp)
4110382c:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
41103830:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
41103834:	e0bffd07 	ldb	r2,-12(fp)
41103838:	10bfefc4 	addi	r2,r2,-65
4110383c:	10c00228 	cmpgeui	r3,r2,8
41103840:	18001e1e 	bne	r3,zero,411038bc <TRAN_WRITE_REG32+0xac>
41103844:	100690ba 	slli	r3,r2,2
41103848:	00904434 	movhi	r2,16656
4110384c:	108e1704 	addi	r2,r2,14428
41103850:	1885883a 	add	r2,r3,r2
41103854:	10800017 	ldw	r2,0(r2)
41103858:	1000683a 	jmp	r2
4110385c:	4110387c 	xorhi	r4,r8,16609
41103860:	41103884 	addi	r4,r8,16610
41103864:	4110388c 	andi	r4,r8,16610
41103868:	41103894 	ori	r4,r8,16610
4110386c:	4110389c 	xori	r4,r8,16610
41103870:	411038a4 	muli	r4,r8,16610
41103874:	411038ac 	andhi	r4,r8,16610
41103878:	411038b4 	orhi	r4,r8,16610
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
4110387c:	e03ffc15 	stw	zero,-16(fp)
			break;
41103880:	00000e06 	br	411038bc <TRAN_WRITE_REG32+0xac>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
41103884:	e03ffc15 	stw	zero,-16(fp)
			break;
41103888:	00000c06 	br	411038bc <TRAN_WRITE_REG32+0xac>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
4110388c:	e03ffc15 	stw	zero,-16(fp)
			break;
41103890:	00000a06 	br	411038bc <TRAN_WRITE_REG32+0xac>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
41103894:	e03ffc15 	stw	zero,-16(fp)
			break;
41103898:	00000806 	br	411038bc <TRAN_WRITE_REG32+0xac>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
4110389c:	e03ffc15 	stw	zero,-16(fp)
			break;
411038a0:	00000606 	br	411038bc <TRAN_WRITE_REG32+0xac>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
411038a4:	e03ffc15 	stw	zero,-16(fp)
			break;
411038a8:	00000406 	br	411038bc <TRAN_WRITE_REG32+0xac>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
411038ac:	e03ffc15 	stw	zero,-16(fp)
			break;
411038b0:	00000206 	br	411038bc <TRAN_WRITE_REG32+0xac>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
411038b4:	e03ffc15 	stw	zero,-16(fp)
			break;
411038b8:	0001883a 	nop
		}
		*(pTranAddr + (alt_u32)RegisterOffset) = (alt_u32) RegisterValue;
411038bc:	e0bffe03 	ldbu	r2,-8(fp)
411038c0:	1085883a 	add	r2,r2,r2
411038c4:	1085883a 	add	r2,r2,r2
411038c8:	1007883a 	mov	r3,r2
411038cc:	e0bffc17 	ldw	r2,-16(fp)
411038d0:	10c5883a 	add	r2,r2,r3
411038d4:	e0ffff17 	ldw	r3,-4(fp)
411038d8:	10c00015 	stw	r3,0(r2)
	}
411038dc:	0001883a 	nop
411038e0:	e037883a 	mov	sp,fp
411038e4:	df000017 	ldw	fp,0(sp)
411038e8:	dec00104 	addi	sp,sp,4
411038ec:	f800283a 	ret

411038f0 <TRAN_READ_REG32>:

	alt_u32 TRAN_READ_REG32(char c_SpwID, alt_u8 RegisterOffset){
411038f0:	defffb04 	addi	sp,sp,-20
411038f4:	df000415 	stw	fp,16(sp)
411038f8:	df000404 	addi	fp,sp,16
411038fc:	2007883a 	mov	r3,r4
41103900:	2805883a 	mov	r2,r5
41103904:	e0fffe05 	stb	r3,-8(fp)
41103908:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
4110390c:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
41103910:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
41103914:	e0bffe07 	ldb	r2,-8(fp)
41103918:	10bfefc4 	addi	r2,r2,-65
4110391c:	10c00228 	cmpgeui	r3,r2,8
41103920:	18001e1e 	bne	r3,zero,4110399c <TRAN_READ_REG32+0xac>
41103924:	100690ba 	slli	r3,r2,2
41103928:	00904434 	movhi	r2,16656
4110392c:	108e4f04 	addi	r2,r2,14652
41103930:	1885883a 	add	r2,r3,r2
41103934:	10800017 	ldw	r2,0(r2)
41103938:	1000683a 	jmp	r2
4110393c:	4110395c 	xori	r4,r8,16613
41103940:	41103964 	muli	r4,r8,16613
41103944:	4110396c 	andhi	r4,r8,16613
41103948:	41103974 	orhi	r4,r8,16613
4110394c:	4110397c 	xorhi	r4,r8,16613
41103950:	41103984 	addi	r4,r8,16614
41103954:	4110398c 	andi	r4,r8,16614
41103958:	41103994 	ori	r4,r8,16614
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
4110395c:	e03ffc15 	stw	zero,-16(fp)
			break;
41103960:	00000e06 	br	4110399c <TRAN_READ_REG32+0xac>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
41103964:	e03ffc15 	stw	zero,-16(fp)
			break;
41103968:	00000c06 	br	4110399c <TRAN_READ_REG32+0xac>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
4110396c:	e03ffc15 	stw	zero,-16(fp)
			break;
41103970:	00000a06 	br	4110399c <TRAN_READ_REG32+0xac>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
41103974:	e03ffc15 	stw	zero,-16(fp)
			break;
41103978:	00000806 	br	4110399c <TRAN_READ_REG32+0xac>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
4110397c:	e03ffc15 	stw	zero,-16(fp)
			break;
41103980:	00000606 	br	4110399c <TRAN_READ_REG32+0xac>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
41103984:	e03ffc15 	stw	zero,-16(fp)
			break;
41103988:	00000406 	br	4110399c <TRAN_READ_REG32+0xac>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
4110398c:	e03ffc15 	stw	zero,-16(fp)
			break;
41103990:	00000206 	br	4110399c <TRAN_READ_REG32+0xac>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
41103994:	e03ffc15 	stw	zero,-16(fp)
			break;
41103998:	0001883a 	nop
		}
		RegisterValue = *(pTranAddr + (alt_u32)RegisterOffset);
4110399c:	e0bfff03 	ldbu	r2,-4(fp)
411039a0:	1085883a 	add	r2,r2,r2
411039a4:	1085883a 	add	r2,r2,r2
411039a8:	1007883a 	mov	r3,r2
411039ac:	e0bffc17 	ldw	r2,-16(fp)
411039b0:	10c5883a 	add	r2,r2,r3
411039b4:	10800017 	ldw	r2,0(r2)
411039b8:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
411039bc:	e0bffd17 	ldw	r2,-12(fp)
	}
411039c0:	e037883a 	mov	sp,fp
411039c4:	df000017 	ldw	fp,0(sp)
411039c8:	dec00104 	addi	sp,sp,4
411039cc:	f800283a 	ret

411039d0 <b_Transparent_Interface_Write_Register>:

	bool b_Transparent_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
411039d0:	defffa04 	addi	sp,sp,-24
411039d4:	dfc00515 	stw	ra,20(sp)
411039d8:	df000415 	stw	fp,16(sp)
411039dc:	df000404 	addi	fp,sp,16
411039e0:	2007883a 	mov	r3,r4
411039e4:	2805883a 	mov	r2,r5
411039e8:	e1bfff15 	stw	r6,-4(fp)
411039ec:	e0fffd05 	stb	r3,-12(fp)
411039f0:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
411039f4:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
411039f8:	e0bffe03 	ldbu	r2,-8(fp)
411039fc:	108000e8 	cmpgeui	r2,r2,3
41103a00:	1000081e 	bne	r2,zero,41103a24 <b_Transparent_Interface_Write_Register+0x54>
			TRAN_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
41103a04:	e0bffd07 	ldb	r2,-12(fp)
41103a08:	e0fffe03 	ldbu	r3,-8(fp)
41103a0c:	e1bfff17 	ldw	r6,-4(fp)
41103a10:	180b883a 	mov	r5,r3
41103a14:	1009883a 	mov	r4,r2
41103a18:	11038100 	call	41103810 <TRAN_WRITE_REG32>
			bSuccess = TRUE;
41103a1c:	00800044 	movi	r2,1
41103a20:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
41103a24:	e0bffc17 	ldw	r2,-16(fp)
	}
41103a28:	e037883a 	mov	sp,fp
41103a2c:	dfc00117 	ldw	ra,4(sp)
41103a30:	df000017 	ldw	fp,0(sp)
41103a34:	dec00204 	addi	sp,sp,8
41103a38:	f800283a 	ret

41103a3c <ul_Transparent_Interface_Read_Register>:

	alt_u32 ul_Transparent_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
41103a3c:	defffb04 	addi	sp,sp,-20
41103a40:	dfc00415 	stw	ra,16(sp)
41103a44:	df000315 	stw	fp,12(sp)
41103a48:	df000304 	addi	fp,sp,12
41103a4c:	2007883a 	mov	r3,r4
41103a50:	2805883a 	mov	r2,r5
41103a54:	e0fffe05 	stb	r3,-8(fp)
41103a58:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
41103a5c:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
41103a60:	e0bfff03 	ldbu	r2,-4(fp)
41103a64:	108000e8 	cmpgeui	r2,r2,3
41103a68:	1000061e 	bne	r2,zero,41103a84 <ul_Transparent_Interface_Read_Register+0x48>
			ul_RegisterValue = TRAN_READ_REG32(c_SpwID, uc_RegisterAddress);
41103a6c:	e0bffe07 	ldb	r2,-8(fp)
41103a70:	e0ffff03 	ldbu	r3,-4(fp)
41103a74:	180b883a 	mov	r5,r3
41103a78:	1009883a 	mov	r4,r2
41103a7c:	11038f00 	call	411038f0 <TRAN_READ_REG32>
41103a80:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
41103a84:	e0bffd17 	ldw	r2,-12(fp)
	}
41103a88:	e037883a 	mov	sp,fp
41103a8c:	dfc00117 	ldw	ra,4(sp)
41103a90:	df000017 	ldw	fp,0(sp)
41103a94:	dec00204 	addi	sp,sp,8
41103a98:	f800283a 	ret

41103a9c <v_Transparent_Interface_Enable_Control>:

	bool v_Transparent_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
41103a9c:	defff804 	addi	sp,sp,-32
41103aa0:	dfc00715 	stw	ra,28(sp)
41103aa4:	df000615 	stw	fp,24(sp)
41103aa8:	df000604 	addi	fp,sp,24
41103aac:	2007883a 	mov	r3,r4
41103ab0:	2805883a 	mov	r2,r5
41103ab4:	e1bfff15 	stw	r6,-4(fp)
41103ab8:	e0fffd05 	stb	r3,-12(fp)
41103abc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
41103ac0:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK;
41103ac4:	0081c004 	movi	r2,1792
41103ac8:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
41103acc:	d0a02904 	addi	r2,gp,-32604
41103ad0:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
41103ad4:	e0bffd07 	ldb	r2,-12(fp)
41103ad8:	10bfefc4 	addi	r2,r2,-65
41103adc:	10c00228 	cmpgeui	r3,r2,8
41103ae0:	1800361e 	bne	r3,zero,41103bbc <v_Transparent_Interface_Enable_Control+0x120>
41103ae4:	100690ba 	slli	r3,r2,2
41103ae8:	00904434 	movhi	r2,16656
41103aec:	108ebf04 	addi	r2,r2,15100
41103af0:	1885883a 	add	r2,r3,r2
41103af4:	10800017 	ldw	r2,0(r2)
41103af8:	1000683a 	jmp	r2
41103afc:	41103b1c 	xori	r4,r8,16620
41103b00:	41103b30 	cmpltui	r4,r8,16620
41103b04:	41103b44 	addi	r4,r8,16621
41103b08:	41103b58 	cmpnei	r4,r8,16621
41103b0c:	41103b6c 	andhi	r4,r8,16621
41103b10:	41103b80 	call	441103b8 <__alt_data_end+0x2f163b8>
41103b14:	41103b94 	ori	r4,r8,16622
41103b18:	41103ba8 	cmpgeui	r4,r8,16622
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
41103b1c:	d0a02904 	addi	r2,gp,-32604
41103b20:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103b24:	00800044 	movi	r2,1
41103b28:	e0bffa15 	stw	r2,-24(fp)
			break;
41103b2c:	00002306 	br	41103bbc <v_Transparent_Interface_Enable_Control+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
41103b30:	d0a02a04 	addi	r2,gp,-32600
41103b34:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103b38:	00800044 	movi	r2,1
41103b3c:	e0bffa15 	stw	r2,-24(fp)
			break;
41103b40:	00001e06 	br	41103bbc <v_Transparent_Interface_Enable_Control+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
41103b44:	d0a02b04 	addi	r2,gp,-32596
41103b48:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103b4c:	00800044 	movi	r2,1
41103b50:	e0bffa15 	stw	r2,-24(fp)
			break;
41103b54:	00001906 	br	41103bbc <v_Transparent_Interface_Enable_Control+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
41103b58:	d0a02c04 	addi	r2,gp,-32592
41103b5c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103b60:	00800044 	movi	r2,1
41103b64:	e0bffa15 	stw	r2,-24(fp)
			break;
41103b68:	00001406 	br	41103bbc <v_Transparent_Interface_Enable_Control+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
41103b6c:	d0a02d04 	addi	r2,gp,-32588
41103b70:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103b74:	00800044 	movi	r2,1
41103b78:	e0bffa15 	stw	r2,-24(fp)
			break;
41103b7c:	00000f06 	br	41103bbc <v_Transparent_Interface_Enable_Control+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
41103b80:	d0a02e04 	addi	r2,gp,-32584
41103b84:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103b88:	00800044 	movi	r2,1
41103b8c:	e0bffa15 	stw	r2,-24(fp)
			break;
41103b90:	00000a06 	br	41103bbc <v_Transparent_Interface_Enable_Control+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
41103b94:	d0a02f04 	addi	r2,gp,-32580
41103b98:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103b9c:	00800044 	movi	r2,1
41103ba0:	e0bffa15 	stw	r2,-24(fp)
			break;
41103ba4:	00000506 	br	41103bbc <v_Transparent_Interface_Enable_Control+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
41103ba8:	d0a03004 	addi	r2,gp,-32576
41103bac:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103bb0:	00800044 	movi	r2,1
41103bb4:	e0bffa15 	stw	r2,-24(fp)
			break;
41103bb8:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
41103bbc:	e0bffa17 	ldw	r2,-24(fp)
41103bc0:	10800058 	cmpnei	r2,r2,1
41103bc4:	10002b1e 	bne	r2,zero,41103c74 <v_Transparent_Interface_Enable_Control+0x1d8>
41103bc8:	e0ffff17 	ldw	r3,-4(fp)
41103bcc:	e0bffc17 	ldw	r2,-16(fp)
41103bd0:	1884703a 	and	r2,r3,r2
41103bd4:	10002726 	beq	r2,zero,41103c74 <v_Transparent_Interface_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
41103bd8:	e0bffe03 	ldbu	r2,-8(fp)
41103bdc:	10000326 	beq	r2,zero,41103bec <v_Transparent_Interface_Enable_Control+0x150>
41103be0:	10800060 	cmpeqi	r2,r2,1
41103be4:	1000121e 	bne	r2,zero,41103c30 <v_Transparent_Interface_Enable_Control+0x194>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
41103be8:	00002306 	br	41103c78 <v_Transparent_Interface_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){
			
				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_EnableMask;
41103bec:	e0bffb17 	ldw	r2,-20(fp)
41103bf0:	10c00017 	ldw	r3,0(r2)
41103bf4:	e0bfff17 	ldw	r2,-4(fp)
41103bf8:	0084303a 	nor	r2,zero,r2
41103bfc:	1886703a 	and	r3,r3,r2
41103c00:	e0bffb17 	ldw	r2,-20(fp)
41103c04:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
41103c08:	e0fffd07 	ldb	r3,-12(fp)
41103c0c:	e0bffb17 	ldw	r2,-20(fp)
41103c10:	10800017 	ldw	r2,0(r2)
41103c14:	100d883a 	mov	r6,r2
41103c18:	01400804 	movi	r5,32
41103c1c:	1809883a 	mov	r4,r3
41103c20:	11038100 	call	41103810 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
41103c24:	00800044 	movi	r2,1
41103c28:	e0bffa15 	stw	r2,-24(fp)
				break;
41103c2c:	00001006 	br	41103c70 <v_Transparent_Interface_Enable_Control+0x1d4>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_EnableMask;
41103c30:	e0bffb17 	ldw	r2,-20(fp)
41103c34:	10c00017 	ldw	r3,0(r2)
41103c38:	e0bfff17 	ldw	r2,-4(fp)
41103c3c:	1886b03a 	or	r3,r3,r2
41103c40:	e0bffb17 	ldw	r2,-20(fp)
41103c44:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
41103c48:	e0fffd07 	ldb	r3,-12(fp)
41103c4c:	e0bffb17 	ldw	r2,-20(fp)
41103c50:	10800017 	ldw	r2,0(r2)
41103c54:	100d883a 	mov	r6,r2
41103c58:	01400804 	movi	r5,32
41103c5c:	1809883a 	mov	r4,r3
41103c60:	11038100 	call	41103810 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
41103c64:	00800044 	movi	r2,1
41103c68:	e0bffa15 	stw	r2,-24(fp)
				break;
41103c6c:	0001883a 	nop

			}
		} else {
41103c70:	00000106 	br	41103c78 <v_Transparent_Interface_Enable_Control+0x1dc>
			bSuccess = FALSE;
41103c74:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
41103c78:	e0bffa17 	ldw	r2,-24(fp)
	}
41103c7c:	e037883a 	mov	sp,fp
41103c80:	dfc00117 	ldw	ra,4(sp)
41103c84:	df000017 	ldw	fp,0(sp)
41103c88:	dec00204 	addi	sp,sp,8
41103c8c:	f800283a 	ret

41103c90 <v_Transparent_Interface_Interrupts_Enable_Control>:

	bool v_Transparent_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
41103c90:	defff804 	addi	sp,sp,-32
41103c94:	dfc00715 	stw	ra,28(sp)
41103c98:	df000615 	stw	fp,24(sp)
41103c9c:	df000604 	addi	fp,sp,24
41103ca0:	2007883a 	mov	r3,r4
41103ca4:	2805883a 	mov	r2,r5
41103ca8:	e1bfff15 	stw	r6,-4(fp)
41103cac:	e0fffd05 	stb	r3,-12(fp)
41103cb0:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
41103cb4:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_ENABLE_BIT_MASK | TRAN_DATA_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_ENABLE_BIT_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_ENABLE_BIT_MASK;
41103cb8:	00803c04 	movi	r2,240
41103cbc:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
41103cc0:	d0a02904 	addi	r2,gp,-32604
41103cc4:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
41103cc8:	e0bffd07 	ldb	r2,-12(fp)
41103ccc:	10bfefc4 	addi	r2,r2,-65
41103cd0:	10c00228 	cmpgeui	r3,r2,8
41103cd4:	1800361e 	bne	r3,zero,41103db0 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
41103cd8:	100690ba 	slli	r3,r2,2
41103cdc:	00904434 	movhi	r2,16656
41103ce0:	108f3c04 	addi	r2,r2,15600
41103ce4:	1885883a 	add	r2,r3,r2
41103ce8:	10800017 	ldw	r2,0(r2)
41103cec:	1000683a 	jmp	r2
41103cf0:	41103d10 	cmplti	r4,r8,16628
41103cf4:	41103d24 	muli	r4,r8,16628
41103cf8:	41103d38 	rdprs	r4,r8,16628
41103cfc:	41103d4c 	andi	r4,r8,16629
41103d00:	41103d60 	cmpeqi	r4,r8,16629
41103d04:	41103d74 	orhi	r4,r8,16629
41103d08:	41103d88 	cmpgei	r4,r8,16630
41103d0c:	41103d9c 	xori	r4,r8,16630
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
41103d10:	d0a02904 	addi	r2,gp,-32604
41103d14:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103d18:	00800044 	movi	r2,1
41103d1c:	e0bffa15 	stw	r2,-24(fp)
			break;
41103d20:	00002306 	br	41103db0 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
41103d24:	d0a02a04 	addi	r2,gp,-32600
41103d28:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103d2c:	00800044 	movi	r2,1
41103d30:	e0bffa15 	stw	r2,-24(fp)
			break;
41103d34:	00001e06 	br	41103db0 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
41103d38:	d0a02b04 	addi	r2,gp,-32596
41103d3c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103d40:	00800044 	movi	r2,1
41103d44:	e0bffa15 	stw	r2,-24(fp)
			break;
41103d48:	00001906 	br	41103db0 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
41103d4c:	d0a02c04 	addi	r2,gp,-32592
41103d50:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103d54:	00800044 	movi	r2,1
41103d58:	e0bffa15 	stw	r2,-24(fp)
			break;
41103d5c:	00001406 	br	41103db0 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
41103d60:	d0a02d04 	addi	r2,gp,-32588
41103d64:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103d68:	00800044 	movi	r2,1
41103d6c:	e0bffa15 	stw	r2,-24(fp)
			break;
41103d70:	00000f06 	br	41103db0 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
41103d74:	d0a02e04 	addi	r2,gp,-32584
41103d78:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103d7c:	00800044 	movi	r2,1
41103d80:	e0bffa15 	stw	r2,-24(fp)
			break;
41103d84:	00000a06 	br	41103db0 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
41103d88:	d0a02f04 	addi	r2,gp,-32580
41103d8c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103d90:	00800044 	movi	r2,1
41103d94:	e0bffa15 	stw	r2,-24(fp)
			break;
41103d98:	00000506 	br	41103db0 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
41103d9c:	d0a03004 	addi	r2,gp,-32576
41103da0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
41103da4:	00800044 	movi	r2,1
41103da8:	e0bffa15 	stw	r2,-24(fp)
			break;
41103dac:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
41103db0:	e0bffa17 	ldw	r2,-24(fp)
41103db4:	10800058 	cmpnei	r2,r2,1
41103db8:	10002b1e 	bne	r2,zero,41103e68 <v_Transparent_Interface_Interrupts_Enable_Control+0x1d8>
41103dbc:	e0ffff17 	ldw	r3,-4(fp)
41103dc0:	e0bffc17 	ldw	r2,-16(fp)
41103dc4:	1884703a 	and	r2,r3,r2
41103dc8:	10002726 	beq	r2,zero,41103e68 <v_Transparent_Interface_Interrupts_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
41103dcc:	e0bffe03 	ldbu	r2,-8(fp)
41103dd0:	10000326 	beq	r2,zero,41103de0 <v_Transparent_Interface_Interrupts_Enable_Control+0x150>
41103dd4:	10800060 	cmpeqi	r2,r2,1
41103dd8:	1000121e 	bne	r2,zero,41103e24 <v_Transparent_Interface_Interrupts_Enable_Control+0x194>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
41103ddc:	00002306 	br	41103e6c <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){

				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_InterruptMask;
41103de0:	e0bffb17 	ldw	r2,-20(fp)
41103de4:	10c00017 	ldw	r3,0(r2)
41103de8:	e0bfff17 	ldw	r2,-4(fp)
41103dec:	0084303a 	nor	r2,zero,r2
41103df0:	1886703a 	and	r3,r3,r2
41103df4:	e0bffb17 	ldw	r2,-20(fp)
41103df8:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
41103dfc:	e0fffd07 	ldb	r3,-12(fp)
41103e00:	e0bffb17 	ldw	r2,-20(fp)
41103e04:	10800017 	ldw	r2,0(r2)
41103e08:	100d883a 	mov	r6,r2
41103e0c:	01400804 	movi	r5,32
41103e10:	1809883a 	mov	r4,r3
41103e14:	11038100 	call	41103810 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
41103e18:	00800044 	movi	r2,1
41103e1c:	e0bffa15 	stw	r2,-24(fp)
				break;
41103e20:	00001006 	br	41103e64 <v_Transparent_Interface_Interrupts_Enable_Control+0x1d4>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_InterruptMask;
41103e24:	e0bffb17 	ldw	r2,-20(fp)
41103e28:	10c00017 	ldw	r3,0(r2)
41103e2c:	e0bfff17 	ldw	r2,-4(fp)
41103e30:	1886b03a 	or	r3,r3,r2
41103e34:	e0bffb17 	ldw	r2,-20(fp)
41103e38:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
41103e3c:	e0fffd07 	ldb	r3,-12(fp)
41103e40:	e0bffb17 	ldw	r2,-20(fp)
41103e44:	10800017 	ldw	r2,0(r2)
41103e48:	100d883a 	mov	r6,r2
41103e4c:	01400804 	movi	r5,32
41103e50:	1809883a 	mov	r4,r3
41103e54:	11038100 	call	41103810 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
41103e58:	00800044 	movi	r2,1
41103e5c:	e0bffa15 	stw	r2,-24(fp)
				break;
41103e60:	0001883a 	nop

			}
		} else {
41103e64:	00000106 	br	41103e6c <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>
			bSuccess = FALSE;
41103e68:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
41103e6c:	e0bffa17 	ldw	r2,-24(fp)
	}
41103e70:	e037883a 	mov	sp,fp
41103e74:	dfc00117 	ldw	ra,4(sp)
41103e78:	df000017 	ldw	fp,0(sp)
41103e7c:	dec00204 	addi	sp,sp,8
41103e80:	f800283a 	ret

41103e84 <ul_Transparent_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_Transparent_Interface_Interrupts_Flags_Read(char c_SpwID){
41103e84:	defffb04 	addi	sp,sp,-20
41103e88:	dfc00415 	stw	ra,16(sp)
41103e8c:	df000315 	stw	fp,12(sp)
41103e90:	df000304 	addi	fp,sp,12
41103e94:	2005883a 	mov	r2,r4
41103e98:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
41103e9c:	008003c4 	movi	r2,15
41103ea0:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_interrupts_flags_value = TRAN_READ_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_tran_mask;
41103ea4:	e0bfff07 	ldb	r2,-4(fp)
41103ea8:	01400804 	movi	r5,32
41103eac:	1009883a 	mov	r4,r2
41103eb0:	11038f00 	call	411038f0 <TRAN_READ_REG32>
41103eb4:	1007883a 	mov	r3,r2
41103eb8:	e0bffd17 	ldw	r2,-12(fp)
41103ebc:	1884703a 	and	r2,r3,r2
41103ec0:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_interrupts_flags_value;
41103ec4:	e0bffe17 	ldw	r2,-8(fp)
	}
41103ec8:	e037883a 	mov	sp,fp
41103ecc:	dfc00117 	ldw	ra,4(sp)
41103ed0:	df000017 	ldw	fp,0(sp)
41103ed4:	dec00204 	addi	sp,sp,8
41103ed8:	f800283a 	ret

41103edc <v_Transparent_Interface_Interrupts_Flags_Clear>:

	void v_Transparent_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
41103edc:	defff904 	addi	sp,sp,-28
41103ee0:	dfc00615 	stw	ra,24(sp)
41103ee4:	df000515 	stw	fp,20(sp)
41103ee8:	df000504 	addi	fp,sp,20
41103eec:	2005883a 	mov	r2,r4
41103ef0:	e17fff15 	stw	r5,-4(fp)
41103ef4:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
41103ef8:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
41103efc:	008003c4 	movi	r2,15
41103f00:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
41103f04:	d0a02904 	addi	r2,gp,-32604
41103f08:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
41103f0c:	e0bffe07 	ldb	r2,-8(fp)
41103f10:	10bfefc4 	addi	r2,r2,-65
41103f14:	10c00228 	cmpgeui	r3,r2,8
41103f18:	1800361e 	bne	r3,zero,41103ff4 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
41103f1c:	100690ba 	slli	r3,r2,2
41103f20:	00904434 	movhi	r2,16656
41103f24:	108fcd04 	addi	r2,r2,16180
41103f28:	1885883a 	add	r2,r3,r2
41103f2c:	10800017 	ldw	r2,0(r2)
41103f30:	1000683a 	jmp	r2
41103f34:	41103f54 	ori	r4,r8,16637
41103f38:	41103f68 	cmpgeui	r4,r8,16637
41103f3c:	41103f7c 	xorhi	r4,r8,16637
41103f40:	41103f90 	cmplti	r4,r8,16638
41103f44:	41103fa4 	muli	r4,r8,16638
41103f48:	41103fb8 	rdprs	r4,r8,16638
41103f4c:	41103fcc 	andi	r4,r8,16639
41103f50:	41103fe0 	cmpeqi	r4,r8,16639
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
41103f54:	d0a02904 	addi	r2,gp,-32604
41103f58:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41103f5c:	00800044 	movi	r2,1
41103f60:	e0bffb15 	stw	r2,-20(fp)
			break;
41103f64:	00002306 	br	41103ff4 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
41103f68:	d0a02a04 	addi	r2,gp,-32600
41103f6c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41103f70:	00800044 	movi	r2,1
41103f74:	e0bffb15 	stw	r2,-20(fp)
			break;
41103f78:	00001e06 	br	41103ff4 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
41103f7c:	d0a02b04 	addi	r2,gp,-32596
41103f80:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41103f84:	00800044 	movi	r2,1
41103f88:	e0bffb15 	stw	r2,-20(fp)
			break;
41103f8c:	00001906 	br	41103ff4 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
41103f90:	d0a02c04 	addi	r2,gp,-32592
41103f94:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41103f98:	00800044 	movi	r2,1
41103f9c:	e0bffb15 	stw	r2,-20(fp)
			break;
41103fa0:	00001406 	br	41103ff4 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
41103fa4:	d0a02d04 	addi	r2,gp,-32588
41103fa8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41103fac:	00800044 	movi	r2,1
41103fb0:	e0bffb15 	stw	r2,-20(fp)
			break;
41103fb4:	00000f06 	br	41103ff4 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
41103fb8:	d0a02e04 	addi	r2,gp,-32584
41103fbc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41103fc0:	00800044 	movi	r2,1
41103fc4:	e0bffb15 	stw	r2,-20(fp)
			break;
41103fc8:	00000a06 	br	41103ff4 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
41103fcc:	d0a02f04 	addi	r2,gp,-32580
41103fd0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41103fd4:	00800044 	movi	r2,1
41103fd8:	e0bffb15 	stw	r2,-20(fp)
			break;
41103fdc:	00000506 	br	41103ff4 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
41103fe0:	d0a03004 	addi	r2,gp,-32576
41103fe4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
41103fe8:	00800044 	movi	r2,1
41103fec:	e0bffb15 	stw	r2,-20(fp)
			break;
41103ff0:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
41103ff4:	e0bffb17 	ldw	r2,-20(fp)
41103ff8:	10800058 	cmpnei	r2,r2,1
41103ffc:	10000d1e 	bne	r2,zero,41104034 <v_Transparent_Interface_Interrupts_Flags_Clear+0x158>
41104000:	e0ffff17 	ldw	r3,-4(fp)
41104004:	e0bffd17 	ldw	r2,-12(fp)
41104008:	1884703a 	and	r2,r3,r2
4110400c:	10000926 	beq	r2,zero,41104034 <v_Transparent_Interface_Interrupts_Flags_Clear+0x158>
			TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_tran_interface_control_status_register_value | ul_InterruptMask));
41104010:	e13ffe07 	ldb	r4,-8(fp)
41104014:	e0bffc17 	ldw	r2,-16(fp)
41104018:	10c00017 	ldw	r3,0(r2)
4110401c:	e0bfff17 	ldw	r2,-4(fp)
41104020:	1884b03a 	or	r2,r3,r2
41104024:	100d883a 	mov	r6,r2
41104028:	01400804 	movi	r5,32
4110402c:	11038100 	call	41103810 <TRAN_WRITE_REG32>
41104030:	00000106 	br	41104038 <v_Transparent_Interface_Interrupts_Flags_Clear+0x15c>
		} else {
			bSuccess = FALSE;
41104034:	e03ffb15 	stw	zero,-20(fp)
		}
	}
41104038:	0001883a 	nop
4110403c:	e037883a 	mov	sp,fp
41104040:	dfc00117 	ldw	ra,4(sp)
41104044:	df000017 	ldw	fp,0(sp)
41104048:	dec00204 	addi	sp,sp,8
4110404c:	f800283a 	ret

41104050 <v_Transparent_Interface_RX_FIFO_Reset>:

	void v_Transparent_Interface_RX_FIFO_Reset(char c_SpwID){
41104050:	defffd04 	addi	sp,sp,-12
41104054:	dfc00215 	stw	ra,8(sp)
41104058:	df000115 	stw	fp,4(sp)
4110405c:	df000104 	addi	fp,sp,4
41104060:	2005883a 	mov	r2,r4
41104064:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_RX_FIFO_RESET_CONTROL_BIT_MASK);
41104068:	e0bfff07 	ldb	r2,-4(fp)
4110406c:	01800104 	movi	r6,4
41104070:	01400844 	movi	r5,33
41104074:	1009883a 	mov	r4,r2
41104078:	11038100 	call	41103810 <TRAN_WRITE_REG32>

	}
4110407c:	0001883a 	nop
41104080:	e037883a 	mov	sp,fp
41104084:	dfc00117 	ldw	ra,4(sp)
41104088:	df000017 	ldw	fp,0(sp)
4110408c:	dec00204 	addi	sp,sp,8
41104090:	f800283a 	ret

41104094 <ul_Transparent_Interface_RX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_RX_FIFO_Status_Read(char c_SpwID){
41104094:	defffb04 	addi	sp,sp,-20
41104098:	dfc00415 	stw	ra,16(sp)
4110409c:	df000315 	stw	fp,12(sp)
411040a0:	df000304 	addi	fp,sp,12
411040a4:	2005883a 	mov	r2,r4
411040a8:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_RX_FIFO_USED_SPACE_VALUE_MASK | TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_RX_FIFO_FULL_STATUS_BIT_MASK;
411040ac:	0081fec4 	movi	r2,2043
411040b0:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_rx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
411040b4:	e0bfff07 	ldb	r2,-4(fp)
411040b8:	01400844 	movi	r5,33
411040bc:	1009883a 	mov	r4,r2
411040c0:	11038f00 	call	411038f0 <TRAN_READ_REG32>
411040c4:	1007883a 	mov	r3,r2
411040c8:	e0bffd17 	ldw	r2,-12(fp)
411040cc:	1884703a 	and	r2,r3,r2
411040d0:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_rx_fifo_status_value;
411040d4:	e0bffe17 	ldw	r2,-8(fp)
	}
411040d8:	e037883a 	mov	sp,fp
411040dc:	dfc00117 	ldw	ra,4(sp)
411040e0:	df000017 	ldw	fp,0(sp)
411040e4:	dec00204 	addi	sp,sp,8
411040e8:	f800283a 	ret

411040ec <b_Transparent_Interface_RX_FIFO_Status_Empty>:

	bool b_Transparent_Interface_RX_FIFO_Status_Empty(char c_SpwID){
411040ec:	defffc04 	addi	sp,sp,-16
411040f0:	dfc00315 	stw	ra,12(sp)
411040f4:	df000215 	stw	fp,8(sp)
411040f8:	df000204 	addi	fp,sp,8
411040fc:	2005883a 	mov	r2,r4
41104100:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_empty = FALSE;
41104104:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK) {
41104108:	e0bfff07 	ldb	r2,-4(fp)
4110410c:	01400844 	movi	r5,33
41104110:	1009883a 	mov	r4,r2
41104114:	11038f00 	call	411038f0 <TRAN_READ_REG32>
41104118:	1080008c 	andi	r2,r2,2
4110411c:	10000226 	beq	r2,zero,41104128 <b_Transparent_Interface_RX_FIFO_Status_Empty+0x3c>
			b_rx_fifo_empty = TRUE;
41104120:	00800044 	movi	r2,1
41104124:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_empty;		
41104128:	e0bffe17 	ldw	r2,-8(fp)
	}
4110412c:	e037883a 	mov	sp,fp
41104130:	dfc00117 	ldw	ra,4(sp)
41104134:	df000017 	ldw	fp,0(sp)
41104138:	dec00204 	addi	sp,sp,8
4110413c:	f800283a 	ret

41104140 <b_Transparent_Interface_RX_FIFO_Status_Full>:
	
	bool b_Transparent_Interface_RX_FIFO_Status_Full(char c_SpwID){
41104140:	defffc04 	addi	sp,sp,-16
41104144:	dfc00315 	stw	ra,12(sp)
41104148:	df000215 	stw	fp,8(sp)
4110414c:	df000204 	addi	fp,sp,8
41104150:	2005883a 	mov	r2,r4
41104154:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_full = FALSE;
41104158:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_FULL_STATUS_BIT_MASK) {
4110415c:	e0bfff07 	ldb	r2,-4(fp)
41104160:	01400844 	movi	r5,33
41104164:	1009883a 	mov	r4,r2
41104168:	11038f00 	call	411038f0 <TRAN_READ_REG32>
4110416c:	1080004c 	andi	r2,r2,1
41104170:	10000226 	beq	r2,zero,4110417c <b_Transparent_Interface_RX_FIFO_Status_Full+0x3c>
			b_rx_fifo_full = TRUE;
41104174:	00800044 	movi	r2,1
41104178:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_full;
4110417c:	e0bffe17 	ldw	r2,-8(fp)
	}
41104180:	e037883a 	mov	sp,fp
41104184:	dfc00117 	ldw	ra,4(sp)
41104188:	df000017 	ldw	fp,0(sp)
4110418c:	dec00204 	addi	sp,sp,8
41104190:	f800283a 	ret

41104194 <uc_Transparent_Interface_RX_FIFO_Status_Used>:

	alt_u8 uc_Transparent_Interface_RX_FIFO_Status_Used(char c_SpwID){
41104194:	defffc04 	addi	sp,sp,-16
41104198:	dfc00315 	stw	ra,12(sp)
4110419c:	df000215 	stw	fp,8(sp)
411041a0:	df000204 	addi	fp,sp,8
411041a4:	2005883a 	mov	r2,r4
411041a8:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_rx_fifo_used = 0;
411041ac:	e03ffe05 	stb	zero,-8(fp)
		
		uc_rx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
411041b0:	e0bfff07 	ldb	r2,-4(fp)
411041b4:	01400844 	movi	r5,33
411041b8:	1009883a 	mov	r4,r2
411041bc:	11038f00 	call	411038f0 <TRAN_READ_REG32>
411041c0:	1081fe0c 	andi	r2,r2,2040
411041c4:	1004d0fa 	srli	r2,r2,3
411041c8:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_rx_fifo_used;
411041cc:	e0bffe03 	ldbu	r2,-8(fp)
	}
411041d0:	e037883a 	mov	sp,fp
411041d4:	dfc00117 	ldw	ra,4(sp)
411041d8:	df000017 	ldw	fp,0(sp)
411041dc:	dec00204 	addi	sp,sp,8
411041e0:	f800283a 	ret

411041e4 <v_Transparent_Interface_TX_FIFO_Reset>:
	
	
	void v_Transparent_Interface_TX_FIFO_Reset(char c_SpwID){
411041e4:	defffd04 	addi	sp,sp,-12
411041e8:	dfc00215 	stw	ra,8(sp)
411041ec:	df000115 	stw	fp,4(sp)
411041f0:	df000104 	addi	fp,sp,4
411041f4:	2005883a 	mov	r2,r4
411041f8:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_TX_FIFO_RESET_CONTROL_BIT_MASK);
411041fc:	e0bfff07 	ldb	r2,-4(fp)
41104200:	01800104 	movi	r6,4
41104204:	01400884 	movi	r5,34
41104208:	1009883a 	mov	r4,r2
4110420c:	11038100 	call	41103810 <TRAN_WRITE_REG32>

	}
41104210:	0001883a 	nop
41104214:	e037883a 	mov	sp,fp
41104218:	dfc00117 	ldw	ra,4(sp)
4110421c:	df000017 	ldw	fp,0(sp)
41104220:	dec00204 	addi	sp,sp,8
41104224:	f800283a 	ret

41104228 <ul_Transparent_Interface_TX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_TX_FIFO_Status_Read(char c_SpwID){
41104228:	defffb04 	addi	sp,sp,-20
4110422c:	dfc00415 	stw	ra,16(sp)
41104230:	df000315 	stw	fp,12(sp)
41104234:	df000304 	addi	fp,sp,12
41104238:	2005883a 	mov	r2,r4
4110423c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_TX_FIFO_USED_SPACE_VALUE_MASK | TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_TX_FIFO_FULL_STATUS_BIT_MASK;
41104240:	0081fec4 	movi	r2,2043
41104244:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_tx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
41104248:	e0bfff07 	ldb	r2,-4(fp)
4110424c:	01400884 	movi	r5,34
41104250:	1009883a 	mov	r4,r2
41104254:	11038f00 	call	411038f0 <TRAN_READ_REG32>
41104258:	1007883a 	mov	r3,r2
4110425c:	e0bffd17 	ldw	r2,-12(fp)
41104260:	1884703a 	and	r2,r3,r2
41104264:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_tx_fifo_status_value;
41104268:	e0bffe17 	ldw	r2,-8(fp)
	}
4110426c:	e037883a 	mov	sp,fp
41104270:	dfc00117 	ldw	ra,4(sp)
41104274:	df000017 	ldw	fp,0(sp)
41104278:	dec00204 	addi	sp,sp,8
4110427c:	f800283a 	ret

41104280 <b_Transparent_Interface_TX_FIFO_Status_Full>:

	bool b_Transparent_Interface_TX_FIFO_Status_Full(char c_SpwID){
41104280:	defffc04 	addi	sp,sp,-16
41104284:	dfc00315 	stw	ra,12(sp)
41104288:	df000215 	stw	fp,8(sp)
4110428c:	df000204 	addi	fp,sp,8
41104290:	2005883a 	mov	r2,r4
41104294:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_empty = FALSE;
41104298:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK) {
4110429c:	e0bfff07 	ldb	r2,-4(fp)
411042a0:	01400884 	movi	r5,34
411042a4:	1009883a 	mov	r4,r2
411042a8:	11038f00 	call	411038f0 <TRAN_READ_REG32>
411042ac:	1080008c 	andi	r2,r2,2
411042b0:	10000226 	beq	r2,zero,411042bc <b_Transparent_Interface_TX_FIFO_Status_Full+0x3c>
			b_tx_fifo_empty = TRUE;
411042b4:	00800044 	movi	r2,1
411042b8:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_empty;		
411042bc:	e0bffe17 	ldw	r2,-8(fp)
	}
411042c0:	e037883a 	mov	sp,fp
411042c4:	dfc00117 	ldw	ra,4(sp)
411042c8:	df000017 	ldw	fp,0(sp)
411042cc:	dec00204 	addi	sp,sp,8
411042d0:	f800283a 	ret

411042d4 <b_Transparent_Interface_TX_FIFO_Status_Empty>:
	
	bool b_Transparent_Interface_TX_FIFO_Status_Empty(char c_SpwID){
411042d4:	defffc04 	addi	sp,sp,-16
411042d8:	dfc00315 	stw	ra,12(sp)
411042dc:	df000215 	stw	fp,8(sp)
411042e0:	df000204 	addi	fp,sp,8
411042e4:	2005883a 	mov	r2,r4
411042e8:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_full = FALSE;
411042ec:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_FULL_STATUS_BIT_MASK) {
411042f0:	e0bfff07 	ldb	r2,-4(fp)
411042f4:	01400884 	movi	r5,34
411042f8:	1009883a 	mov	r4,r2
411042fc:	11038f00 	call	411038f0 <TRAN_READ_REG32>
41104300:	1080004c 	andi	r2,r2,1
41104304:	10000226 	beq	r2,zero,41104310 <b_Transparent_Interface_TX_FIFO_Status_Empty+0x3c>
			b_tx_fifo_full = TRUE;
41104308:	00800044 	movi	r2,1
4110430c:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_full;
41104310:	e0bffe17 	ldw	r2,-8(fp)
	}
41104314:	e037883a 	mov	sp,fp
41104318:	dfc00117 	ldw	ra,4(sp)
4110431c:	df000017 	ldw	fp,0(sp)
41104320:	dec00204 	addi	sp,sp,8
41104324:	f800283a 	ret

41104328 <uc_Transparent_Interface_TX_FIFO_Status_Used>:
	
	alt_u8 uc_Transparent_Interface_TX_FIFO_Status_Used(char c_SpwID){
41104328:	defffc04 	addi	sp,sp,-16
4110432c:	dfc00315 	stw	ra,12(sp)
41104330:	df000215 	stw	fp,8(sp)
41104334:	df000204 	addi	fp,sp,8
41104338:	2005883a 	mov	r2,r4
4110433c:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_tx_fifo_used = 0;
41104340:	e03ffe05 	stb	zero,-8(fp)
		
		uc_tx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
41104344:	e0bfff07 	ldb	r2,-4(fp)
41104348:	01400884 	movi	r5,34
4110434c:	1009883a 	mov	r4,r2
41104350:	11038f00 	call	411038f0 <TRAN_READ_REG32>
41104354:	1081fe0c 	andi	r2,r2,2040
41104358:	1004d0fa 	srli	r2,r2,3
4110435c:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_tx_fifo_used;
41104360:	e0bffe03 	ldbu	r2,-8(fp)
	}
41104364:	e037883a 	mov	sp,fp
41104368:	dfc00117 	ldw	ra,4(sp)
4110436c:	df000017 	ldw	fp,0(sp)
41104370:	dec00204 	addi	sp,sp,8
41104374:	f800283a 	ret

41104378 <b_Transparent_Interface_Switch_Channel>:
	
	bool b_Transparent_Interface_Switch_Channel(char c_SpwID){
41104378:	defffb04 	addi	sp,sp,-20
4110437c:	dfc00415 	stw	ra,16(sp)
41104380:	df000315 	stw	fp,12(sp)
41104384:	df000304 	addi	fp,sp,12
41104388:	2005883a 	mov	r2,r4
4110438c:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess;
		alt_u32 *pTranAddr = DDR2_ADDRESS_SPAN_EXTENDER_CNTL_BASE;
41104390:	00840034 	movhi	r2,4096
41104394:	10882004 	addi	r2,r2,8320
41104398:	e0bffe15 	stw	r2,-8(fp)

		  bSuccess = TRUE;
4110439c:	00800044 	movi	r2,1
411043a0:	e0bffd15 	stw	r2,-12(fp)
		  switch (c_SpwID) {
411043a4:	e0bfff07 	ldb	r2,-4(fp)
411043a8:	10bfefc4 	addi	r2,r2,-65
411043ac:	10c00228 	cmpgeui	r3,r2,8
411043b0:	18004d1e 	bne	r3,zero,411044e8 <b_Transparent_Interface_Switch_Channel+0x170>
411043b4:	100690ba 	slli	r3,r2,2
411043b8:	00904434 	movhi	r2,16656
411043bc:	1090f304 	addi	r2,r2,17356
411043c0:	1885883a 	add	r2,r3,r2
411043c4:	10800017 	ldw	r2,0(r2)
411043c8:	1000683a 	jmp	r2
411043cc:	411043ec 	andhi	r4,r8,16655
411043d0:	4110440c 	andi	r4,r8,16656
411043d4:	4110442c 	andhi	r4,r8,16656
411043d8:	4110444c 	andi	r4,r8,16657
411043dc:	4110446c 	andhi	r4,r8,16657
411043e0:	4110448c 	andi	r4,r8,16658
411043e4:	411044ac 	andhi	r4,r8,16658
411043e8:	411044cc 	andi	r4,r8,16659
			  case 'A':
				*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_A_CHANNEL_WINDOWED_OFFSET);
411043ec:	e0bffe17 	ldw	r2,-8(fp)
411043f0:	00f80034 	movhi	r3,57344
411043f4:	10c00015 	stw	r3,0(r2)
				*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_A_CHANNEL_WINDOWED_OFFSET) >> 32);
411043f8:	e0bffe17 	ldw	r2,-8(fp)
411043fc:	10800104 	addi	r2,r2,4
41104400:	00c00044 	movi	r3,1
41104404:	10c00015 	stw	r3,0(r2)
			  break;
41104408:	00003b06 	br	411044f8 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'B':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_B_CHANNEL_WINDOWED_OFFSET);
4110440c:	e0bffe17 	ldw	r2,-8(fp)
41104410:	00f00034 	movhi	r3,49152
41104414:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_B_CHANNEL_WINDOWED_OFFSET) >> 32);
41104418:	e0bffe17 	ldw	r2,-8(fp)
4110441c:	10800104 	addi	r2,r2,4
41104420:	00c00044 	movi	r3,1
41104424:	10c00015 	stw	r3,0(r2)
				  break;
41104428:	00003306 	br	411044f8 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'C':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_C_CHANNEL_WINDOWED_OFFSET);
4110442c:	e0bffe17 	ldw	r2,-8(fp)
41104430:	00e80034 	movhi	r3,40960
41104434:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_C_CHANNEL_WINDOWED_OFFSET) >> 32);
41104438:	e0bffe17 	ldw	r2,-8(fp)
4110443c:	10800104 	addi	r2,r2,4
41104440:	00c00044 	movi	r3,1
41104444:	10c00015 	stw	r3,0(r2)
				  break;
41104448:	00002b06 	br	411044f8 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'D':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_E_CHANNEL_WINDOWED_OFFSET);
4110444c:	e0bffe17 	ldw	r2,-8(fp)
41104450:	00d80034 	movhi	r3,24576
41104454:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_E_CHANNEL_WINDOWED_OFFSET) >> 32);
41104458:	e0bffe17 	ldw	r2,-8(fp)
4110445c:	10800104 	addi	r2,r2,4
41104460:	00c00044 	movi	r3,1
41104464:	10c00015 	stw	r3,0(r2)
				  break;
41104468:	00002306 	br	411044f8 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'E':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_D_CHANNEL_WINDOWED_OFFSET);
4110446c:	e0bffe17 	ldw	r2,-8(fp)
41104470:	00e00034 	movhi	r3,32768
41104474:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_D_CHANNEL_WINDOWED_OFFSET) >> 32);
41104478:	e0bffe17 	ldw	r2,-8(fp)
4110447c:	10800104 	addi	r2,r2,4
41104480:	00c00044 	movi	r3,1
41104484:	10c00015 	stw	r3,0(r2)
				  break;
41104488:	00001b06 	br	411044f8 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'F':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_F_CHANNEL_WINDOWED_OFFSET);
4110448c:	e0bffe17 	ldw	r2,-8(fp)
41104490:	00d00034 	movhi	r3,16384
41104494:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_F_CHANNEL_WINDOWED_OFFSET) >> 32);
41104498:	e0bffe17 	ldw	r2,-8(fp)
4110449c:	10800104 	addi	r2,r2,4
411044a0:	00c00044 	movi	r3,1
411044a4:	10c00015 	stw	r3,0(r2)
				  break;
411044a8:	00001306 	br	411044f8 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'G':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_G_CHANNEL_WINDOWED_OFFSET);
411044ac:	e0bffe17 	ldw	r2,-8(fp)
411044b0:	00c80034 	movhi	r3,8192
411044b4:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_G_CHANNEL_WINDOWED_OFFSET) >> 32);
411044b8:	e0bffe17 	ldw	r2,-8(fp)
411044bc:	10800104 	addi	r2,r2,4
411044c0:	00c00044 	movi	r3,1
411044c4:	10c00015 	stw	r3,0(r2)
				  break;
411044c8:	00000b06 	br	411044f8 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'H':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_H_CHANNEL_WINDOWED_OFFSET);
411044cc:	e0bffe17 	ldw	r2,-8(fp)
411044d0:	10000015 	stw	zero,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_H_CHANNEL_WINDOWED_OFFSET) >> 32);
411044d4:	e0bffe17 	ldw	r2,-8(fp)
411044d8:	10800104 	addi	r2,r2,4
411044dc:	00c00044 	movi	r3,1
411044e0:	10c00015 	stw	r3,0(r2)
				  break;
411044e4:	00000406 	br	411044f8 <b_Transparent_Interface_Switch_Channel+0x180>
			  default:
				  bSuccess = FALSE;
411044e8:	e03ffd15 	stw	zero,-12(fp)
				  printf("SpW Channel not identified!! Error switching channels!! \n");
411044ec:	011044b4 	movhi	r4,16658
411044f0:	212aca04 	addi	r4,r4,-21720
411044f4:	11097640 	call	41109764 <puts>
		  }

		  return bSuccess;
411044f8:	e0bffd17 	ldw	r2,-12(fp)
	}
411044fc:	e037883a 	mov	sp,fp
41104500:	dfc00117 	ldw	ra,4(sp)
41104504:	df000017 	ldw	fp,0(sp)
41104508:	dec00204 	addi	sp,sp,8
4110450c:	f800283a 	ret

41104510 <b_Transparent_Interface_Send_SpaceWire_Data>:


	bool b_Transparent_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
41104510:	defff704 	addi	sp,sp,-36
41104514:	dfc00815 	stw	ra,32(sp)
41104518:	df000715 	stw	fp,28(sp)
4110451c:	df000704 	addi	fp,sp,28
41104520:	2007883a 	mov	r3,r4
41104524:	e17ffe15 	stw	r5,-8(fp)
41104528:	3005883a 	mov	r2,r6
4110452c:	e0fffd05 	stb	r3,-12(fp)
41104530:	e0bfff0d 	sth	r2,-4(fp)
		
		bool bSuccess = FALSE;
41104534:	e03ff915 	stw	zero,-28(fp)
		
		alt_u32 *memory_location = DDR2_ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BASE;
41104538:	e03ffb15 	stw	zero,-20(fp)
		printf("memory_location = %u \n", memory_location);
4110453c:	e17ffb17 	ldw	r5,-20(fp)
41104540:	011044b4 	movhi	r4,16658
41104544:	212ad904 	addi	r4,r4,-21660
41104548:	11096480 	call	41109648 <printf>
		memory_location += (TRAN_BURST_REGISTERS_OFFSET + TRAN_TX_REGISTER_OFFSET)*2;
4110454c:	e0bffb17 	ldw	r2,-20(fp)
41104550:	10804204 	addi	r2,r2,264
41104554:	e0bffb15 	stw	r2,-20(fp)
		printf("memory_location = %u \n", memory_location);
41104558:	e17ffb17 	ldw	r5,-20(fp)
4110455c:	011044b4 	movhi	r4,16658
41104560:	212ad904 	addi	r4,r4,-21660
41104564:	11096480 	call	41109648 <printf>

		alt_u16 cnt = 0;
41104568:	e03ffa0d 	sth	zero,-24(fp)
		alt_u8 resto = 0;
4110456c:	e03ffc05 	stb	zero,-16(fp)
		
		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
41104570:	e0bffd07 	ldb	r2,-12(fp)
41104574:	10801050 	cmplti	r2,r2,65
41104578:	1000081e 	bne	r2,zero,4110459c <b_Transparent_Interface_Send_SpaceWire_Data+0x8c>
4110457c:	e0bffd07 	ldb	r2,-12(fp)
41104580:	10801248 	cmpgei	r2,r2,73
41104584:	1000051e 	bne	r2,zero,4110459c <b_Transparent_Interface_Send_SpaceWire_Data+0x8c>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
41104588:	e0bffd07 	ldb	r2,-12(fp)
4110458c:	1009883a 	mov	r4,r2
41104590:	11043780 	call	41104378 <b_Transparent_Interface_Switch_Channel>
			bSuccess          = TRUE;
41104594:	00800044 	movi	r2,1
41104598:	e0bff915 	stw	r2,-28(fp)
		}

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
4110459c:	e0bff917 	ldw	r2,-28(fp)
411045a0:	10002626 	beq	r2,zero,4110463c <b_Transparent_Interface_Send_SpaceWire_Data+0x12c>
411045a4:	e0bffd07 	ldb	r2,-12(fp)
411045a8:	1009883a 	mov	r4,r2
411045ac:	11043280 	call	41104328 <uc_Transparent_Interface_TX_FIFO_Status_Used>
411045b0:	10803fcc 	andi	r2,r2,255
411045b4:	00c04004 	movi	r3,256
411045b8:	1887c83a 	sub	r3,r3,r2
411045bc:	e0bfff0b 	ldhu	r2,-4(fp)
411045c0:	1004d0ba 	srli	r2,r2,2
411045c4:	10bfffcc 	andi	r2,r2,65535
411045c8:	10800044 	addi	r2,r2,1
411045cc:	18801b16 	blt	r3,r2,4110463c <b_Transparent_Interface_Send_SpaceWire_Data+0x12c>
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
411045d0:	e03ffa0d 	sth	zero,-24(fp)
411045d4:	00000b06 	br	41104604 <b_Transparent_Interface_Send_SpaceWire_Data+0xf4>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
411045d8:	e0bffa0b 	ldhu	r2,-24(fp)
411045dc:	e0fffe17 	ldw	r3,-8(fp)
411045e0:	1885883a 	add	r2,r3,r2
411045e4:	10800003 	ldbu	r2,0(r2)
411045e8:	10803fcc 	andi	r2,r2,255
411045ec:	10fffff4 	orhi	r3,r2,65535
411045f0:	e0bffb17 	ldw	r2,-20(fp)
411045f4:	10c00015 	stw	r3,0(r2)

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
411045f8:	e0bffa0b 	ldhu	r2,-24(fp)
411045fc:	10800044 	addi	r2,r2,1
41104600:	e0bffa0d 	sth	r2,-24(fp)
41104604:	e0fffa0b 	ldhu	r3,-24(fp)
41104608:	e0bfff0b 	ldhu	r2,-4(fp)
4110460c:	18bff236 	bltu	r3,r2,411045d8 <__reset+0xbb0e45d8>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
			}
			/* Append an EOP to the end of the data in the Channel Memory Location */
			*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | 0x0100 | (alt_u16)data_buffer[data_size]);
41104610:	e0bfff0b 	ldhu	r2,-4(fp)
41104614:	e0fffe17 	ldw	r3,-8(fp)
41104618:	1885883a 	add	r2,r3,r2
4110461c:	10800003 	ldbu	r2,0(r2)
41104620:	10c03fcc 	andi	r3,r2,255
41104624:	00bffff4 	movhi	r2,65535
41104628:	10804004 	addi	r2,r2,256
4110462c:	1886b03a 	or	r3,r3,r2
41104630:	e0bffb17 	ldw	r2,-20(fp)
41104634:	10c00015 	stw	r3,0(r2)
41104638:	00000106 	br	41104640 <b_Transparent_Interface_Send_SpaceWire_Data+0x130>
			
		} else {
			bSuccess = FALSE;
4110463c:	e03ff915 	stw	zero,-28(fp)
		}
		
		return bSuccess;
41104640:	e0bff917 	ldw	r2,-28(fp)
	}
41104644:	e037883a 	mov	sp,fp
41104648:	dfc00117 	ldw	ra,4(sp)
4110464c:	df000017 	ldw	fp,0(sp)
41104650:	dec00204 	addi	sp,sp,8
41104654:	f800283a 	ret

41104658 <ui_Transparent_Interface_Get_SpaceWire_Data>:
	
	alt_u16 ui_Transparent_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer){
41104658:	deffeb04 	addi	sp,sp,-84
4110465c:	dfc01415 	stw	ra,80(sp)
41104660:	df001315 	stw	fp,76(sp)
41104664:	ddc01215 	stw	r23,72(sp)
41104668:	dd801115 	stw	r22,68(sp)
4110466c:	dd401015 	stw	r21,64(sp)
41104670:	dd000f15 	stw	r20,60(sp)
41104674:	dcc00e15 	stw	r19,56(sp)
41104678:	dc800d15 	stw	r18,52(sp)
4110467c:	dc400c15 	stw	r17,48(sp)
41104680:	dc000b15 	stw	r16,44(sp)
41104684:	df001304 	addi	fp,sp,76
41104688:	2005883a 	mov	r2,r4
4110468c:	e17ff515 	stw	r5,-44(fp)
41104690:	e0bff405 	stb	r2,-48(fp)
		
		alt_u16 ui_rx_data_size = 0;
41104694:	e03fed0d 	sth	zero,-76(fp)
		
		alt_u64 *memory_location = 0;
41104698:	e03fef15 	stw	zero,-68(fp)
		memory_location += TRAN_BURST_REGISTERS_OFFSET + TRAN_RX_REGISTER_OFFSET;
4110469c:	e0bfef17 	ldw	r2,-68(fp)
411046a0:	10804004 	addi	r2,r2,256
411046a4:	e0bfef15 	stw	r2,-68(fp)

		alt_u16 cnt = 0;
411046a8:	e03fed8d 	sth	zero,-74(fp)
		alt_u16 rx_buffer_data_size = 0;
411046ac:	e03fee0d 	sth	zero,-72(fp)
		alt_u64 rx_data = 0;
411046b0:	e03ff015 	stw	zero,-64(fp)
411046b4:	e03ff115 	stw	zero,-60(fp)
		alt_u16 rx_data_buffer[4] = {0,0,0,0};
411046b8:	e03ff20d 	sth	zero,-56(fp)
411046bc:	e03ff28d 	sth	zero,-54(fp)
411046c0:	e03ff30d 	sth	zero,-52(fp)
411046c4:	e03ff38d 	sth	zero,-50(fp)

		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
411046c8:	e0bff407 	ldb	r2,-48(fp)
411046cc:	10801050 	cmplti	r2,r2,65
411046d0:	1000081e 	bne	r2,zero,411046f4 <ui_Transparent_Interface_Get_SpaceWire_Data+0x9c>
411046d4:	e0bff407 	ldb	r2,-48(fp)
411046d8:	10801248 	cmpgei	r2,r2,73
411046dc:	1000051e 	bne	r2,zero,411046f4 <ui_Transparent_Interface_Get_SpaceWire_Data+0x9c>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
411046e0:	e0bff407 	ldb	r2,-48(fp)
411046e4:	1009883a 	mov	r4,r2
411046e8:	11043780 	call	41104378 <b_Transparent_Interface_Switch_Channel>
			rx_buffer_data_size = 0xFFFF;
411046ec:	00bfffc4 	movi	r2,-1
411046f0:	e0bfee0d 	sth	r2,-72(fp)
		}
		
		if (0xFFFF == rx_buffer_data_size) {
411046f4:	e0ffee0b 	ldhu	r3,-72(fp)
411046f8:	00bfffd4 	movui	r2,65535
411046fc:	1880711e 	bne	r3,r2,411048c4 <ui_Transparent_Interface_Get_SpaceWire_Data+0x26c>
			/* Check the amount of data in the RX Buffer*/
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
41104700:	e0bff407 	ldb	r2,-48(fp)
41104704:	1009883a 	mov	r4,r2
41104708:	11043280 	call	41104328 <uc_Transparent_Interface_TX_FIFO_Status_Used>
4110470c:	10803fcc 	andi	r2,r2,255
41104710:	e0bfee0d 	sth	r2,-72(fp)
			if (rx_buffer_data_size > 0) {
41104714:	e0bfee0b 	ldhu	r2,-72(fp)
41104718:	10006826 	beq	r2,zero,411048bc <ui_Transparent_Interface_Get_SpaceWire_Data+0x264>
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
4110471c:	e03fed8d 	sth	zero,-74(fp)
41104720:	00006206 	br	411048ac <ui_Transparent_Interface_Get_SpaceWire_Data+0x254>

					rx_data = *memory_location;
41104724:	e0bfef17 	ldw	r2,-68(fp)
41104728:	10c00017 	ldw	r3,0(r2)
4110472c:	e0fff015 	stw	r3,-64(fp)
41104730:	10800117 	ldw	r2,4(r2)
41104734:	e0bff115 	stw	r2,-60(fp)

					rx_data_buffer[0] = (alt_u16)(0x000000000000FFFF & rx_data);
41104738:	e0bff017 	ldw	r2,-64(fp)
4110473c:	e0bff20d 	sth	r2,-56(fp)
					rx_data_buffer[1] = (alt_u16)((0x00000000FFFF0000 & rx_data) >> 16);
41104740:	e0bff017 	ldw	r2,-64(fp)
41104744:	143fffec 	andhi	r16,r2,65535
41104748:	e0bff117 	ldw	r2,-60(fp)
4110474c:	1022703a 	and	r17,r2,zero
41104750:	8804943a 	slli	r2,r17,16
41104754:	8024d43a 	srli	r18,r16,16
41104758:	14a4b03a 	or	r18,r2,r18
4110475c:	8826d43a 	srli	r19,r17,16
41104760:	9005883a 	mov	r2,r18
41104764:	e0bff28d 	sth	r2,-54(fp)
					rx_data_buffer[2] = (alt_u16)((0x0000FFFF00000000 & rx_data) >> 32);
41104768:	e0bff017 	ldw	r2,-64(fp)
4110476c:	1028703a 	and	r20,r2,zero
41104770:	e0bff117 	ldw	r2,-60(fp)
41104774:	157fffcc 	andi	r21,r2,65535
41104778:	a82cd83a 	srl	r22,r21,zero
4110477c:	002f883a 	mov	r23,zero
41104780:	b005883a 	mov	r2,r22
41104784:	e0bff30d 	sth	r2,-52(fp)
					rx_data_buffer[3] = (alt_u16)((0xFFFF000000000000 & rx_data) >> 48);
41104788:	e0bff117 	ldw	r2,-60(fp)
4110478c:	1004d43a 	srli	r2,r2,16
41104790:	e0bff615 	stw	r2,-40(fp)
41104794:	e03ff715 	stw	zero,-36(fp)
41104798:	e0bff60b 	ldhu	r2,-40(fp)
4110479c:	e0bff38d 	sth	r2,-50(fp)

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[0] & 0x0100) || (rx_data_buffer[0] == 0xFFFF))) {
411047a0:	e0bff20b 	ldhu	r2,-56(fp)
411047a4:	10bfffcc 	andi	r2,r2,65535
411047a8:	1080400c 	andi	r2,r2,256
411047ac:	10000c1e 	bne	r2,zero,411047e0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x188>
411047b0:	e0bff20b 	ldhu	r2,-56(fp)
411047b4:	10ffffcc 	andi	r3,r2,65535
411047b8:	00bfffd4 	movui	r2,65535
411047bc:	18800826 	beq	r3,r2,411047e0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x188>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[0]);
411047c0:	e0bfed0b 	ldhu	r2,-76(fp)
411047c4:	e0fff517 	ldw	r3,-44(fp)
411047c8:	1885883a 	add	r2,r3,r2
411047cc:	e0fff20b 	ldhu	r3,-56(fp)
411047d0:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
411047d4:	e0bfed0b 	ldhu	r2,-76(fp)
411047d8:	10800044 	addi	r2,r2,1
411047dc:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[1] & 0x0100) || (rx_data_buffer[1] == 0xFFFF))) {
411047e0:	e0bff28b 	ldhu	r2,-54(fp)
411047e4:	10bfffcc 	andi	r2,r2,65535
411047e8:	1080400c 	andi	r2,r2,256
411047ec:	10000c1e 	bne	r2,zero,41104820 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1c8>
411047f0:	e0bff28b 	ldhu	r2,-54(fp)
411047f4:	10ffffcc 	andi	r3,r2,65535
411047f8:	00bfffd4 	movui	r2,65535
411047fc:	18800826 	beq	r3,r2,41104820 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1c8>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[1]);
41104800:	e0bfed0b 	ldhu	r2,-76(fp)
41104804:	e0fff517 	ldw	r3,-44(fp)
41104808:	1885883a 	add	r2,r3,r2
4110480c:	e0fff28b 	ldhu	r3,-54(fp)
41104810:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
41104814:	e0bfed0b 	ldhu	r2,-76(fp)
41104818:	10800044 	addi	r2,r2,1
4110481c:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[2] & 0x0100) || (rx_data_buffer[2] == 0xFFFF))) {
41104820:	e0bff30b 	ldhu	r2,-52(fp)
41104824:	10bfffcc 	andi	r2,r2,65535
41104828:	1080400c 	andi	r2,r2,256
4110482c:	10000c1e 	bne	r2,zero,41104860 <ui_Transparent_Interface_Get_SpaceWire_Data+0x208>
41104830:	e0bff30b 	ldhu	r2,-52(fp)
41104834:	10ffffcc 	andi	r3,r2,65535
41104838:	00bfffd4 	movui	r2,65535
4110483c:	18800826 	beq	r3,r2,41104860 <ui_Transparent_Interface_Get_SpaceWire_Data+0x208>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[2]);
41104840:	e0bfed0b 	ldhu	r2,-76(fp)
41104844:	e0fff517 	ldw	r3,-44(fp)
41104848:	1885883a 	add	r2,r3,r2
4110484c:	e0fff30b 	ldhu	r3,-52(fp)
41104850:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
41104854:	e0bfed0b 	ldhu	r2,-76(fp)
41104858:	10800044 	addi	r2,r2,1
4110485c:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[3] & 0x0100) || (rx_data_buffer[3] == 0xFFFF))) {
41104860:	e0bff38b 	ldhu	r2,-50(fp)
41104864:	10bfffcc 	andi	r2,r2,65535
41104868:	1080400c 	andi	r2,r2,256
4110486c:	10000c1e 	bne	r2,zero,411048a0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x248>
41104870:	e0bff38b 	ldhu	r2,-50(fp)
41104874:	10ffffcc 	andi	r3,r2,65535
41104878:	00bfffd4 	movui	r2,65535
4110487c:	18800826 	beq	r3,r2,411048a0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x248>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[3]);
41104880:	e0bfed0b 	ldhu	r2,-76(fp)
41104884:	e0fff517 	ldw	r3,-44(fp)
41104888:	1885883a 	add	r2,r3,r2
4110488c:	e0fff38b 	ldhu	r3,-50(fp)
41104890:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
41104894:	e0bfed0b 	ldhu	r2,-76(fp)
41104898:	10800044 	addi	r2,r2,1
4110489c:	e0bfed0d 	sth	r2,-76(fp)
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
			if (rx_buffer_data_size > 0) {
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
411048a0:	e0bfed8b 	ldhu	r2,-74(fp)
411048a4:	10800044 	addi	r2,r2,1
411048a8:	e0bfed8d 	sth	r2,-74(fp)
411048ac:	e0ffed8b 	ldhu	r3,-74(fp)
411048b0:	e0bfee0b 	ldhu	r2,-72(fp)
411048b4:	18bf9b36 	bltu	r3,r2,41104724 <__reset+0xbb0e4724>
411048b8:	00000306 	br	411048c8 <ui_Transparent_Interface_Get_SpaceWire_Data+0x270>
						ui_rx_data_size++;
					}

				}
			} else {
				ui_rx_data_size = 0;
411048bc:	e03fed0d 	sth	zero,-76(fp)
411048c0:	00000106 	br	411048c8 <ui_Transparent_Interface_Get_SpaceWire_Data+0x270>
			}
		} else {
			ui_rx_data_size = 0;
411048c4:	e03fed0d 	sth	zero,-76(fp)
		}
	
		return ui_rx_data_size;
411048c8:	e0bfed0b 	ldhu	r2,-76(fp)
	}
411048cc:	e6fff804 	addi	sp,fp,-32
411048d0:	dfc00917 	ldw	ra,36(sp)
411048d4:	df000817 	ldw	fp,32(sp)
411048d8:	ddc00717 	ldw	r23,28(sp)
411048dc:	dd800617 	ldw	r22,24(sp)
411048e0:	dd400517 	ldw	r21,20(sp)
411048e4:	dd000417 	ldw	r20,16(sp)
411048e8:	dcc00317 	ldw	r19,12(sp)
411048ec:	dc800217 	ldw	r18,8(sp)
411048f0:	dc400117 	ldw	r17,4(sp)
411048f4:	dc000017 	ldw	r16,0(sp)
411048f8:	dec00a04 	addi	sp,sp,40
411048fc:	f800283a 	ret

41104900 <DDR2_EEPROM_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_TEST(alt_u8 MemoryId){
41104900:	defff604 	addi	sp,sp,-40
41104904:	dfc00915 	stw	ra,36(sp)
41104908:	df000815 	stw	fp,32(sp)
4110490c:	df000804 	addi	fp,sp,32
41104910:	2005883a 	mov	r2,r4
41104914:	e0bfff05 	stb	r2,-4(fp)

  printf("===== DE4 DDR2 EEPROM Test =====\n");
41104918:	011044b4 	movhi	r4,16658
4110491c:	212adf04 	addi	r4,r4,-21636
41104920:	11097640 	call	41109764 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
41104924:	00bfe804 	movi	r2,-96
41104928:	e0bffd05 	stb	r2,-12(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
4110492c:	00800044 	movi	r2,1
41104930:	e0bff915 	stw	r2,-28(fp)
  switch (MemoryId) {
41104934:	e0bfff03 	ldbu	r2,-4(fp)
41104938:	10c00060 	cmpeqi	r3,r2,1
4110493c:	1800031e 	bne	r3,zero,4110494c <DDR2_EEPROM_TEST+0x4c>
41104940:	108000a0 	cmpeqi	r2,r2,2
41104944:	1000081e 	bne	r2,zero,41104968 <DDR2_EEPROM_TEST+0x68>
41104948:	00000e06 	br	41104984 <DDR2_EEPROM_TEST+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
4110494c:	00900034 	movhi	r2,16384
41104950:	10826c04 	addi	r2,r2,2480
41104954:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
41104958:	00900034 	movhi	r2,16384
4110495c:	10827004 	addi	r2,r2,2496
41104960:	e0bffb15 	stw	r2,-20(fp)
    break;
41104964:	00000d06 	br	4110499c <DDR2_EEPROM_TEST+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
41104968:	00900034 	movhi	r2,16384
4110496c:	10824804 	addi	r2,r2,2336
41104970:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
41104974:	00900034 	movhi	r2,16384
41104978:	10824c04 	addi	r2,r2,2352
4110497c:	e0bffb15 	stw	r2,-20(fp)
    break;
41104980:	00000606 	br	4110499c <DDR2_EEPROM_TEST+0x9c>
    default:
      bSuccess = FALSE;
41104984:	e03ff915 	stw	zero,-28(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
41104988:	011044b4 	movhi	r4,16658
4110498c:	212ae804 	addi	r4,r4,-21600
41104990:	11097640 	call	41109764 <puts>
      return bSuccess;
41104994:	e0bff917 	ldw	r2,-28(fp)
41104998:	00007d06 	br	41104b90 <DDR2_EEPROM_TEST+0x290>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
4110499c:	011044b4 	movhi	r4,16658
411049a0:	212af404 	addi	r4,r4,-21552
411049a4:	11097640 	call	41109764 <puts>
  usleep(20*1000);
411049a8:	01138804 	movi	r4,20000
411049ac:	11162640 	call	41116264 <usleep>
  for(i = 0; i < 256 && bSuccess; i++){
411049b0:	e03ffc15 	stw	zero,-16(fp)
411049b4:	00002006 	br	41104a38 <DDR2_EEPROM_TEST+0x138>
    ControlAddr = i;
411049b8:	e0bffc17 	ldw	r2,-16(fp)
411049bc:	e0bffd45 	stb	r2,-11(fp)
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, ControlAddr, &Value);
411049c0:	e0bffd03 	ldbu	r2,-12(fp)
411049c4:	10c03fcc 	andi	r3,r2,255
411049c8:	18c0201c 	xori	r3,r3,128
411049cc:	18ffe004 	addi	r3,r3,-128
411049d0:	e13ffd43 	ldbu	r4,-11(fp)
411049d4:	e0bffe04 	addi	r2,fp,-8
411049d8:	d8800015 	stw	r2,0(sp)
411049dc:	200f883a 	mov	r7,r4
411049e0:	180d883a 	mov	r6,r3
411049e4:	e17ffb17 	ldw	r5,-20(fp)
411049e8:	e13ffa17 	ldw	r4,-24(fp)
411049ec:	11005d00 	call	411005d0 <I2C_Read>
411049f0:	e0bff915 	stw	r2,-28(fp)
    if (bSuccess){
411049f4:	e0bff917 	ldw	r2,-28(fp)
411049f8:	10000926 	beq	r2,zero,41104a20 <DDR2_EEPROM_TEST+0x120>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
411049fc:	e0bffd43 	ldbu	r2,-11(fp)
41104a00:	e0fffe03 	ldbu	r3,-8(fp)
41104a04:	18c03fcc 	andi	r3,r3,255
41104a08:	180d883a 	mov	r6,r3
41104a0c:	100b883a 	mov	r5,r2
41104a10:	011044b4 	movhi	r4,16658
41104a14:	212afa04 	addi	r4,r4,-21528
41104a18:	11096480 	call	41109648 <printf>
41104a1c:	00000306 	br	41104a2c <DDR2_EEPROM_TEST+0x12c>
    }else{
      printf("Failed to read EEPROM\n");
41104a20:	011044b4 	movhi	r4,16658
41104a24:	212aff04 	addi	r4,r4,-21508
41104a28:	11097640 	call	41109764 <puts>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
  usleep(20*1000);
  for(i = 0; i < 256 && bSuccess; i++){
41104a2c:	e0bffc17 	ldw	r2,-16(fp)
41104a30:	10800044 	addi	r2,r2,1
41104a34:	e0bffc15 	stw	r2,-16(fp)
41104a38:	e0bffc17 	ldw	r2,-16(fp)
41104a3c:	10804008 	cmpgei	r2,r2,256
41104a40:	1000021e 	bne	r2,zero,41104a4c <DDR2_EEPROM_TEST+0x14c>
41104a44:	e0bff917 	ldw	r2,-28(fp)
41104a48:	103fdb1e 	bne	r2,zero,411049b8 <__reset+0xbb0e49b8>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
    }else{
      printf("Failed to read EEPROM\n");
    }
  }
  if (bSuccess){
41104a4c:	e0bff917 	ldw	r2,-28(fp)
41104a50:	10000426 	beq	r2,zero,41104a64 <DDR2_EEPROM_TEST+0x164>
    printf("DDR2 EEPROM Read Test Completed\n\n");
41104a54:	011044b4 	movhi	r4,16658
41104a58:	212b0504 	addi	r4,r4,-21484
41104a5c:	11097640 	call	41109764 <puts>
41104a60:	00000306 	br	41104a70 <DDR2_EEPROM_TEST+0x170>
  } else {
    printf("DDR2 EEPROM Read Test Failed\n\n");
41104a64:	011044b4 	movhi	r4,16658
41104a68:	212b0e04 	addi	r4,r4,-21448
41104a6c:	11097640 	call	41109764 <puts>
  }
  
  printf("DDR2 EEPROM Write Test\n");
41104a70:	011044b4 	movhi	r4,16658
41104a74:	212b1604 	addi	r4,r4,-21416
41104a78:	11097640 	call	41109764 <puts>
  alt_u8 WriteData = 0x12, TestAddr = 128;
41104a7c:	00800484 	movi	r2,18
41104a80:	e0bffd85 	stb	r2,-10(fp)
41104a84:	00bfe004 	movi	r2,-128
41104a88:	e0bffdc5 	stb	r2,-9(fp)
  alt_u8 ReadData;
  usleep(20*1000);
41104a8c:	01138804 	movi	r4,20000
41104a90:	11162640 	call	41116264 <usleep>
  bSuccess = I2C_Write(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, WriteData);
41104a94:	e0bffd03 	ldbu	r2,-12(fp)
41104a98:	10c03fcc 	andi	r3,r2,255
41104a9c:	18c0201c 	xori	r3,r3,128
41104aa0:	18ffe004 	addi	r3,r3,-128
41104aa4:	e13ffdc3 	ldbu	r4,-9(fp)
41104aa8:	e0bffd83 	ldbu	r2,-10(fp)
41104aac:	d8800015 	stw	r2,0(sp)
41104ab0:	200f883a 	mov	r7,r4
41104ab4:	180d883a 	mov	r6,r3
41104ab8:	e17ffb17 	ldw	r5,-20(fp)
41104abc:	e13ffa17 	ldw	r4,-24(fp)
41104ac0:	11004f80 	call	411004f8 <I2C_Write>
41104ac4:	e0bff915 	stw	r2,-28(fp)
  if (!bSuccess){
41104ac8:	e0bff917 	ldw	r2,-28(fp)
41104acc:	1000041e 	bne	r2,zero,41104ae0 <DDR2_EEPROM_TEST+0x1e0>
    printf("Failed to write EEPROM\n");            
41104ad0:	011044b4 	movhi	r4,16658
41104ad4:	212b1c04 	addi	r4,r4,-21392
41104ad8:	11097640 	call	41109764 <puts>
41104adc:	00002006 	br	41104b60 <DDR2_EEPROM_TEST+0x260>
  } else {
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, &ReadData);
41104ae0:	e0bffd03 	ldbu	r2,-12(fp)
41104ae4:	10c03fcc 	andi	r3,r2,255
41104ae8:	18c0201c 	xori	r3,r3,128
41104aec:	18ffe004 	addi	r3,r3,-128
41104af0:	e13ffdc3 	ldbu	r4,-9(fp)
41104af4:	e0bffe44 	addi	r2,fp,-7
41104af8:	d8800015 	stw	r2,0(sp)
41104afc:	200f883a 	mov	r7,r4
41104b00:	180d883a 	mov	r6,r3
41104b04:	e17ffb17 	ldw	r5,-20(fp)
41104b08:	e13ffa17 	ldw	r4,-24(fp)
41104b0c:	11005d00 	call	411005d0 <I2C_Read>
41104b10:	e0bff915 	stw	r2,-28(fp)
    if (!bSuccess){
41104b14:	e0bff917 	ldw	r2,-28(fp)
41104b18:	1000041e 	bne	r2,zero,41104b2c <DDR2_EEPROM_TEST+0x22c>
      printf("Failed to read EEPROM for verify\n");            
41104b1c:	011044b4 	movhi	r4,16658
41104b20:	212b2204 	addi	r4,r4,-21368
41104b24:	11097640 	call	41109764 <puts>
41104b28:	00000d06 	br	41104b60 <DDR2_EEPROM_TEST+0x260>
    } else {
      if (ReadData != WriteData){
41104b2c:	e0bffe43 	ldbu	r2,-7(fp)
41104b30:	10c03fcc 	andi	r3,r2,255
41104b34:	e0bffd83 	ldbu	r2,-10(fp)
41104b38:	18800926 	beq	r3,r2,41104b60 <DDR2_EEPROM_TEST+0x260>
        bSuccess = FALSE;
41104b3c:	e03ff915 	stw	zero,-28(fp)
        printf("Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n", ReadData, WriteData);
41104b40:	e0bffe43 	ldbu	r2,-7(fp)
41104b44:	10803fcc 	andi	r2,r2,255
41104b48:	e0fffd83 	ldbu	r3,-10(fp)
41104b4c:	180d883a 	mov	r6,r3
41104b50:	100b883a 	mov	r5,r2
41104b54:	011044b4 	movhi	r4,16658
41104b58:	212b2b04 	addi	r4,r4,-21332
41104b5c:	11096480 	call	41109648 <printf>
      }
    }
  }
  if (bSuccess){
41104b60:	e0bff917 	ldw	r2,-28(fp)
41104b64:	10000426 	beq	r2,zero,41104b78 <DDR2_EEPROM_TEST+0x278>
    printf("DDR2 EEPROM Write Test Completed\n\n");
41104b68:	011044b4 	movhi	r4,16658
41104b6c:	212b3a04 	addi	r4,r4,-21272
41104b70:	11097640 	call	41109764 <puts>
41104b74:	00000306 	br	41104b84 <DDR2_EEPROM_TEST+0x284>
  } else {
    printf("DDR2 EEPROM Write Test Failed\n\n");
41104b78:	011044b4 	movhi	r4,16658
41104b7c:	212b4304 	addi	r4,r4,-21236
41104b80:	11097640 	call	41109764 <puts>
  }
  printf("\n");
41104b84:	01000284 	movi	r4,10
41104b88:	110968c0 	call	4110968c <putchar>

  return bSuccess;
41104b8c:	e0bff917 	ldw	r2,-28(fp)
}
41104b90:	e037883a 	mov	sp,fp
41104b94:	dfc00117 	ldw	ra,4(sp)
41104b98:	df000017 	ldw	fp,0(sp)
41104b9c:	dec00204 	addi	sp,sp,8
41104ba0:	f800283a 	ret

41104ba4 <DDR2_EEPROM_DUMP>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_DUMP(alt_u8 MemoryId){
41104ba4:	deffb704 	addi	sp,sp,-292
41104ba8:	dfc04815 	stw	ra,288(sp)
41104bac:	df004715 	stw	fp,284(sp)
41104bb0:	df004704 	addi	fp,sp,284
41104bb4:	2005883a 	mov	r2,r4
41104bb8:	e0bfff05 	stb	r2,-4(fp)
 
  printf("===== DE4 DDR2 EEPROM Dump =====\n");
41104bbc:	011044b4 	movhi	r4,16658
41104bc0:	212b4b04 	addi	r4,r4,-21204
41104bc4:	11097640 	call	41109764 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
41104bc8:	00bfe804 	movi	r2,-96
41104bcc:	e0bfbd05 	stb	r2,-268(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
41104bd0:	00800044 	movi	r2,1
41104bd4:	e0bfbe15 	stw	r2,-264(fp)
  switch (MemoryId) {
41104bd8:	e0bfff03 	ldbu	r2,-4(fp)
41104bdc:	10c00060 	cmpeqi	r3,r2,1
41104be0:	1800031e 	bne	r3,zero,41104bf0 <DDR2_EEPROM_DUMP+0x4c>
41104be4:	108000a0 	cmpeqi	r2,r2,2
41104be8:	1000081e 	bne	r2,zero,41104c0c <DDR2_EEPROM_DUMP+0x68>
41104bec:	00000e06 	br	41104c28 <DDR2_EEPROM_DUMP+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
41104bf0:	00900034 	movhi	r2,16384
41104bf4:	10826c04 	addi	r2,r2,2480
41104bf8:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
41104bfc:	00900034 	movhi	r2,16384
41104c00:	10827004 	addi	r2,r2,2496
41104c04:	e0bfbb15 	stw	r2,-276(fp)
    break;
41104c08:	00000d06 	br	41104c40 <DDR2_EEPROM_DUMP+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
41104c0c:	00900034 	movhi	r2,16384
41104c10:	10824804 	addi	r2,r2,2336
41104c14:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
41104c18:	00900034 	movhi	r2,16384
41104c1c:	10824c04 	addi	r2,r2,2352
41104c20:	e0bfbb15 	stw	r2,-276(fp)
    break;
41104c24:	00000606 	br	41104c40 <DDR2_EEPROM_DUMP+0x9c>
    default:
      bSuccess = FALSE;
41104c28:	e03fbe15 	stw	zero,-264(fp)
	  printf("DR2 Memory ID not identified!! Aborting Dump \n");
41104c2c:	011044b4 	movhi	r4,16658
41104c30:	212b5404 	addi	r4,r4,-21168
41104c34:	11097640 	call	41109764 <puts>
      return bSuccess;
41104c38:	e0bfbe17 	ldw	r2,-264(fp)
41104c3c:	00012006 	br	411050c0 <DDR2_EEPROM_DUMP+0x51c>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
41104c40:	e0bfbd03 	ldbu	r2,-268(fp)
41104c44:	10c03fcc 	andi	r3,r2,255
41104c48:	18c0201c 	xori	r3,r3,128
41104c4c:	18ffe004 	addi	r3,r3,-128
41104c50:	e13fbf04 	addi	r4,fp,-260
41104c54:	00804004 	movi	r2,256
41104c58:	d8800015 	stw	r2,0(sp)
41104c5c:	200f883a 	mov	r7,r4
41104c60:	180d883a 	mov	r6,r3
41104c64:	e17fbb17 	ldw	r5,-276(fp)
41104c68:	e13fba17 	ldw	r4,-280(fp)
41104c6c:	11006d00 	call	411006d0 <I2C_MultipleRead>
41104c70:	e0bfbe15 	stw	r2,-264(fp)
  if (bSuccess){
41104c74:	e0bfbe17 	ldw	r2,-264(fp)
41104c78:	10010b26 	beq	r2,zero,411050a8 <DDR2_EEPROM_DUMP+0x504>
    for(i = 0; i < 256 && bSuccess; i++){
41104c7c:	e03fbc15 	stw	zero,-272(fp)
41104c80:	00010306 	br	41105090 <DDR2_EEPROM_DUMP+0x4ec>
      printf("EEPROM[%03d]=%02Xh ", i, szData[i]);
41104c84:	e0ffbf04 	addi	r3,fp,-260
41104c88:	e0bfbc17 	ldw	r2,-272(fp)
41104c8c:	1885883a 	add	r2,r3,r2
41104c90:	10800003 	ldbu	r2,0(r2)
41104c94:	10803fcc 	andi	r2,r2,255
41104c98:	100d883a 	mov	r6,r2
41104c9c:	e17fbc17 	ldw	r5,-272(fp)
41104ca0:	011044b4 	movhi	r4,16658
41104ca4:	212b6004 	addi	r4,r4,-21120
41104ca8:	11096480 	call	41109648 <printf>
      if (i == 0)
41104cac:	e0bfbc17 	ldw	r2,-272(fp)
41104cb0:	1000041e 	bne	r2,zero,41104cc4 <DDR2_EEPROM_DUMP+0x120>
        printf("(Number of SPD Bytes Used)\n");
41104cb4:	011044b4 	movhi	r4,16658
41104cb8:	212b6504 	addi	r4,r4,-21100
41104cbc:	11097640 	call	41109764 <puts>
41104cc0:	0000f006 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 1)
41104cc4:	e0bfbc17 	ldw	r2,-272(fp)
41104cc8:	10800058 	cmpnei	r2,r2,1
41104ccc:	1000041e 	bne	r2,zero,41104ce0 <DDR2_EEPROM_DUMP+0x13c>
        printf("(Total Number of Bytes in SPD Device, Log2(N))\n");
41104cd0:	011044b4 	movhi	r4,16658
41104cd4:	212b6c04 	addi	r4,r4,-21072
41104cd8:	11097640 	call	41109764 <puts>
41104cdc:	0000e906 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 2)
41104ce0:	e0bfbc17 	ldw	r2,-272(fp)
41104ce4:	10800098 	cmpnei	r2,r2,2
41104ce8:	1000041e 	bne	r2,zero,41104cfc <DDR2_EEPROM_DUMP+0x158>
        printf("(Basic Memory Type[08h:DDR2])\n");
41104cec:	011044b4 	movhi	r4,16658
41104cf0:	212b7804 	addi	r4,r4,-21024
41104cf4:	11097640 	call	41109764 <puts>
41104cf8:	0000e206 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 3)
41104cfc:	e0bfbc17 	ldw	r2,-272(fp)
41104d00:	108000d8 	cmpnei	r2,r2,3
41104d04:	1000041e 	bne	r2,zero,41104d18 <DDR2_EEPROM_DUMP+0x174>
        printf("(Number of Row Addresses on Assembly)\n");
41104d08:	011044b4 	movhi	r4,16658
41104d0c:	212b8004 	addi	r4,r4,-20992
41104d10:	11097640 	call	41109764 <puts>
41104d14:	0000db06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 4)
41104d18:	e0bfbc17 	ldw	r2,-272(fp)
41104d1c:	10800118 	cmpnei	r2,r2,4
41104d20:	1000041e 	bne	r2,zero,41104d34 <DDR2_EEPROM_DUMP+0x190>
        printf("(Number of Column Addresses on Assembly)\n");
41104d24:	011044b4 	movhi	r4,16658
41104d28:	212b8a04 	addi	r4,r4,-20952
41104d2c:	11097640 	call	41109764 <puts>
41104d30:	0000d406 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 5)
41104d34:	e0bfbc17 	ldw	r2,-272(fp)
41104d38:	10800158 	cmpnei	r2,r2,5
41104d3c:	1000041e 	bne	r2,zero,41104d50 <DDR2_EEPROM_DUMP+0x1ac>
        printf("(DIMM Height and Module Rank Number[b2b1b0+1])\n");
41104d40:	011044b4 	movhi	r4,16658
41104d44:	212b9504 	addi	r4,r4,-20908
41104d48:	11097640 	call	41109764 <puts>
41104d4c:	0000cd06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 6)
41104d50:	e0bfbc17 	ldw	r2,-272(fp)
41104d54:	10800198 	cmpnei	r2,r2,6
41104d58:	1000041e 	bne	r2,zero,41104d6c <DDR2_EEPROM_DUMP+0x1c8>
        printf("(Module Data Width)\n");
41104d5c:	011044b4 	movhi	r4,16658
41104d60:	212ba104 	addi	r4,r4,-20860
41104d64:	11097640 	call	41109764 <puts>
41104d68:	0000c606 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 7)
41104d6c:	e0bfbc17 	ldw	r2,-272(fp)
41104d70:	108001d8 	cmpnei	r2,r2,7
41104d74:	1000041e 	bne	r2,zero,41104d88 <DDR2_EEPROM_DUMP+0x1e4>
        printf("(Module Data Width, Continued)\n");
41104d78:	011044b4 	movhi	r4,16658
41104d7c:	212ba604 	addi	r4,r4,-20840
41104d80:	11097640 	call	41109764 <puts>
41104d84:	0000bf06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 16)
41104d88:	e0bfbc17 	ldw	r2,-272(fp)
41104d8c:	10800418 	cmpnei	r2,r2,16
41104d90:	1000041e 	bne	r2,zero,41104da4 <DDR2_EEPROM_DUMP+0x200>
        printf("(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
41104d94:	011044b4 	movhi	r4,16658
41104d98:	212bae04 	addi	r4,r4,-20808
41104d9c:	11097640 	call	41109764 <puts>
41104da0:	0000b806 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 13)
41104da4:	e0bfbc17 	ldw	r2,-272(fp)
41104da8:	10800358 	cmpnei	r2,r2,13
41104dac:	1000041e 	bne	r2,zero,41104dc0 <DDR2_EEPROM_DUMP+0x21c>
        printf("(Primary SDRAM width)\n");
41104db0:	011044b4 	movhi	r4,16658
41104db4:	212bbb04 	addi	r4,r4,-20756
41104db8:	11097640 	call	41109764 <puts>
41104dbc:	0000b106 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 14)
41104dc0:	e0bfbc17 	ldw	r2,-272(fp)
41104dc4:	10800398 	cmpnei	r2,r2,14
41104dc8:	1000041e 	bne	r2,zero,41104ddc <DDR2_EEPROM_DUMP+0x238>
        printf("(ECC SDRAM width)\n");
41104dcc:	011044b4 	movhi	r4,16658
41104dd0:	212bc104 	addi	r4,r4,-20732
41104dd4:	11097640 	call	41109764 <puts>
41104dd8:	0000aa06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 17)
41104ddc:	e0bfbc17 	ldw	r2,-272(fp)
41104de0:	10800458 	cmpnei	r2,r2,17
41104de4:	1000041e 	bne	r2,zero,41104df8 <DDR2_EEPROM_DUMP+0x254>
        printf("(Banks per SDRAM device)\n");
41104de8:	011044b4 	movhi	r4,16658
41104dec:	212bc604 	addi	r4,r4,-20712
41104df0:	11097640 	call	41109764 <puts>
41104df4:	0000a306 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 18)
41104df8:	e0bfbc17 	ldw	r2,-272(fp)
41104dfc:	10800498 	cmpnei	r2,r2,18
41104e00:	1000041e 	bne	r2,zero,41104e14 <DDR2_EEPROM_DUMP+0x270>
        printf("(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
41104e04:	011044b4 	movhi	r4,16658
41104e08:	212bcd04 	addi	r4,r4,-20684
41104e0c:	11097640 	call	41109764 <puts>
41104e10:	00009c06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 20)
41104e14:	e0bfbc17 	ldw	r2,-272(fp)
41104e18:	10800518 	cmpnei	r2,r2,20
41104e1c:	1000041e 	bne	r2,zero,41104e30 <DDR2_EEPROM_DUMP+0x28c>
        printf("(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
41104e20:	011044b4 	movhi	r4,16658
41104e24:	212bda04 	addi	r4,r4,-20632
41104e28:	11097640 	call	41109764 <puts>
41104e2c:	00009506 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 22)
41104e30:	e0bfbc17 	ldw	r2,-272(fp)
41104e34:	10800598 	cmpnei	r2,r2,22
41104e38:	1000041e 	bne	r2,zero,41104e4c <DDR2_EEPROM_DUMP+0x2a8>
        printf("(Memory Chip feature bitmap)\n");
41104e3c:	011044b4 	movhi	r4,16658
41104e40:	212bec04 	addi	r4,r4,-20560
41104e44:	11097640 	call	41109764 <puts>
41104e48:	00008e06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 27)
41104e4c:	e0bfbc17 	ldw	r2,-272(fp)
41104e50:	108006d8 	cmpnei	r2,r2,27
41104e54:	1000041e 	bne	r2,zero,41104e68 <DDR2_EEPROM_DUMP+0x2c4>
        printf("(Minimun row precharge time[tRP;nsx4])\n");
41104e58:	011044b4 	movhi	r4,16658
41104e5c:	212bf404 	addi	r4,r4,-20528
41104e60:	11097640 	call	41109764 <puts>
41104e64:	00008706 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 28)
41104e68:	e0bfbc17 	ldw	r2,-272(fp)
41104e6c:	10800718 	cmpnei	r2,r2,28
41104e70:	1000041e 	bne	r2,zero,41104e84 <DDR2_EEPROM_DUMP+0x2e0>
        printf("(Minimun row active-row activce delay[tRRD;nsx4])\n");
41104e74:	011044b4 	movhi	r4,16658
41104e78:	212bfe04 	addi	r4,r4,-20488
41104e7c:	11097640 	call	41109764 <puts>
41104e80:	00008006 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 29)
41104e84:	e0bfbc17 	ldw	r2,-272(fp)
41104e88:	10800758 	cmpnei	r2,r2,29
41104e8c:	1000041e 	bne	r2,zero,41104ea0 <DDR2_EEPROM_DUMP+0x2fc>
        printf("(Minimun RAS to CAS delay[tRCD;nsx4])\n");
41104e90:	011044b4 	movhi	r4,16658
41104e94:	212c0b04 	addi	r4,r4,-20436
41104e98:	11097640 	call	41109764 <puts>
41104e9c:	00007906 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 30)
41104ea0:	e0bfbc17 	ldw	r2,-272(fp)
41104ea4:	10800798 	cmpnei	r2,r2,30
41104ea8:	1000041e 	bne	r2,zero,41104ebc <DDR2_EEPROM_DUMP+0x318>
        printf("(Minimun acive to precharge time[tRAS;ns])\n");
41104eac:	011044b4 	movhi	r4,16658
41104eb0:	212c1504 	addi	r4,r4,-20396
41104eb4:	11097640 	call	41109764 <puts>
41104eb8:	00007206 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 31)
41104ebc:	e0bfbc17 	ldw	r2,-272(fp)
41104ec0:	108007d8 	cmpnei	r2,r2,31
41104ec4:	1000041e 	bne	r2,zero,41104ed8 <DDR2_EEPROM_DUMP+0x334>
        printf("(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
41104ec8:	011044b4 	movhi	r4,16658
41104ecc:	212c2004 	addi	r4,r4,-20352
41104ed0:	11097640 	call	41109764 <puts>
41104ed4:	00006b06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 36)
41104ed8:	e0bfbc17 	ldw	r2,-272(fp)
41104edc:	10800918 	cmpnei	r2,r2,36
41104ee0:	1000041e 	bne	r2,zero,41104ef4 <DDR2_EEPROM_DUMP+0x350>
        printf("(Minimun write receovery time[tWR;nsx4])\n");
41104ee4:	011044b4 	movhi	r4,16658
41104ee8:	212c3104 	addi	r4,r4,-20284
41104eec:	11097640 	call	41109764 <puts>
41104ef0:	00006406 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 37)
41104ef4:	e0bfbc17 	ldw	r2,-272(fp)
41104ef8:	10800958 	cmpnei	r2,r2,37
41104efc:	1000041e 	bne	r2,zero,41104f10 <DDR2_EEPROM_DUMP+0x36c>
        printf("(Internal write to read command delay[tWTR;nsx4])\n");
41104f00:	011044b4 	movhi	r4,16658
41104f04:	212c3c04 	addi	r4,r4,-20240
41104f08:	11097640 	call	41109764 <puts>
41104f0c:	00005d06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 38)
41104f10:	e0bfbc17 	ldw	r2,-272(fp)
41104f14:	10800998 	cmpnei	r2,r2,38
41104f18:	1000041e 	bne	r2,zero,41104f2c <DDR2_EEPROM_DUMP+0x388>
        printf("(Internal read to precharge command delay[tRTP;nsx4])\n");
41104f1c:	011044b4 	movhi	r4,16658
41104f20:	212c4904 	addi	r4,r4,-20188
41104f24:	11097640 	call	41109764 <puts>
41104f28:	00005606 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 41)
41104f2c:	e0bfbc17 	ldw	r2,-272(fp)
41104f30:	10800a58 	cmpnei	r2,r2,41
41104f34:	1000041e 	bne	r2,zero,41104f48 <DDR2_EEPROM_DUMP+0x3a4>
        printf("(Minimun activce to active/refresh time[tRC;ns])\n");
41104f38:	011044b4 	movhi	r4,16658
41104f3c:	212c5704 	addi	r4,r4,-20132
41104f40:	11097640 	call	41109764 <puts>
41104f44:	00004f06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 42)
41104f48:	e0bfbc17 	ldw	r2,-272(fp)
41104f4c:	10800a98 	cmpnei	r2,r2,42
41104f50:	1000041e 	bne	r2,zero,41104f64 <DDR2_EEPROM_DUMP+0x3c0>
        printf("(Minimun refresh to active/refresh time[tRFC;ns])\n");
41104f54:	011044b4 	movhi	r4,16658
41104f58:	212c6404 	addi	r4,r4,-20080
41104f5c:	11097640 	call	41109764 <puts>
41104f60:	00004806 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 62)
41104f64:	e0bfbc17 	ldw	r2,-272(fp)
41104f68:	10800f98 	cmpnei	r2,r2,62
41104f6c:	1000041e 	bne	r2,zero,41104f80 <DDR2_EEPROM_DUMP+0x3dc>
        printf("(SPD Revision)\n");
41104f70:	011044b4 	movhi	r4,16658
41104f74:	212c7104 	addi	r4,r4,-20028
41104f78:	11097640 	call	41109764 <puts>
41104f7c:	00004106 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 63)
41104f80:	e0bfbc17 	ldw	r2,-272(fp)
41104f84:	10800fd8 	cmpnei	r2,r2,63
41104f88:	1000041e 	bne	r2,zero,41104f9c <DDR2_EEPROM_DUMP+0x3f8>
        printf("(Checksum)\n");
41104f8c:	011044b4 	movhi	r4,16658
41104f90:	212c7504 	addi	r4,r4,-20012
41104f94:	11097640 	call	41109764 <puts>
41104f98:	00003a06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 64)
41104f9c:	e0bfbc17 	ldw	r2,-272(fp)
41104fa0:	10801018 	cmpnei	r2,r2,64
41104fa4:	1000041e 	bne	r2,zero,41104fb8 <DDR2_EEPROM_DUMP+0x414>
        printf("(64~71: Manufacturer JEDEC ID)\n");
41104fa8:	011044b4 	movhi	r4,16658
41104fac:	212c7804 	addi	r4,r4,-20000
41104fb0:	11097640 	call	41109764 <puts>
41104fb4:	00003306 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 72)
41104fb8:	e0bfbc17 	ldw	r2,-272(fp)
41104fbc:	10801218 	cmpnei	r2,r2,72
41104fc0:	1000041e 	bne	r2,zero,41104fd4 <DDR2_EEPROM_DUMP+0x430>
        printf("(Module manufacturing location[Vendor-specific code])\n");
41104fc4:	011044b4 	movhi	r4,16658
41104fc8:	212c8004 	addi	r4,r4,-19968
41104fcc:	11097640 	call	41109764 <puts>
41104fd0:	00002c06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 73)
41104fd4:	e0bfbc17 	ldw	r2,-272(fp)
41104fd8:	10801258 	cmpnei	r2,r2,73
41104fdc:	1000041e 	bne	r2,zero,41104ff0 <DDR2_EEPROM_DUMP+0x44c>
        printf("(73~90: Moduloe part number)\n");
41104fe0:	011044b4 	movhi	r4,16658
41104fe4:	212c8e04 	addi	r4,r4,-19912
41104fe8:	11097640 	call	41109764 <puts>
41104fec:	00002506 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 91)
41104ff0:	e0bfbc17 	ldw	r2,-272(fp)
41104ff4:	108016d8 	cmpnei	r2,r2,91
41104ff8:	1000041e 	bne	r2,zero,4110500c <DDR2_EEPROM_DUMP+0x468>
        printf("(91~92: Moduloe revision code)\n");
41104ffc:	011044b4 	movhi	r4,16658
41105000:	212c9604 	addi	r4,r4,-19880
41105004:	11097640 	call	41109764 <puts>
41105008:	00001e06 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 93)
4110500c:	e0bfbc17 	ldw	r2,-272(fp)
41105010:	10801758 	cmpnei	r2,r2,93
41105014:	1000041e 	bne	r2,zero,41105028 <DDR2_EEPROM_DUMP+0x484>
        printf("(Manufacture Years since 2000[0-255])\n");
41105018:	011044b4 	movhi	r4,16658
4110501c:	212c9e04 	addi	r4,r4,-19848
41105020:	11097640 	call	41109764 <puts>
41105024:	00001706 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 94)
41105028:	e0bfbc17 	ldw	r2,-272(fp)
4110502c:	10801798 	cmpnei	r2,r2,94
41105030:	1000041e 	bne	r2,zero,41105044 <DDR2_EEPROM_DUMP+0x4a0>
        printf("(Manufacture Weeks[1-52])\n");
41105034:	011044b4 	movhi	r4,16658
41105038:	212ca804 	addi	r4,r4,-19808
4110503c:	11097640 	call	41109764 <puts>
41105040:	00001006 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 95)
41105044:	e0bfbc17 	ldw	r2,-272(fp)
41105048:	108017d8 	cmpnei	r2,r2,95
4110504c:	1000041e 	bne	r2,zero,41105060 <DDR2_EEPROM_DUMP+0x4bc>
        printf("(95~98[4-bytes]: Module serial number)\n");
41105050:	011044b4 	movhi	r4,16658
41105054:	212caf04 	addi	r4,r4,-19780
41105058:	11097640 	call	41109764 <puts>
4110505c:	00000906 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 99)
41105060:	e0bfbc17 	ldw	r2,-272(fp)
41105064:	108018d8 	cmpnei	r2,r2,99
41105068:	1000041e 	bne	r2,zero,4110507c <DDR2_EEPROM_DUMP+0x4d8>
        printf("(99~128: Manufacturer-specific data)\n");
4110506c:	011044b4 	movhi	r4,16658
41105070:	212cb904 	addi	r4,r4,-19740
41105074:	11097640 	call	41109764 <puts>
41105078:	00000206 	br	41105084 <DDR2_EEPROM_DUMP+0x4e0>
      else
        printf("\n");
4110507c:	01000284 	movi	r4,10
41105080:	110968c0 	call	4110968c <putchar>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
  if (bSuccess){
    for(i = 0; i < 256 && bSuccess; i++){
41105084:	e0bfbc17 	ldw	r2,-272(fp)
41105088:	10800044 	addi	r2,r2,1
4110508c:	e0bfbc15 	stw	r2,-272(fp)
41105090:	e0bfbc17 	ldw	r2,-272(fp)
41105094:	10804008 	cmpgei	r2,r2,256
41105098:	1000061e 	bne	r2,zero,411050b4 <DDR2_EEPROM_DUMP+0x510>
4110509c:	e0bfbe17 	ldw	r2,-264(fp)
411050a0:	103ef81e 	bne	r2,zero,41104c84 <__reset+0xbb0e4c84>
411050a4:	00000306 	br	411050b4 <DDR2_EEPROM_DUMP+0x510>
        printf("(99~128: Manufacturer-specific data)\n");
      else
        printf("\n");
    }
  } else {
    printf("Failed to dump EEPROM\n"); 
411050a8:	011044b4 	movhi	r4,16658
411050ac:	212cc304 	addi	r4,r4,-19700
411050b0:	11097640 	call	41109764 <puts>
  }
  printf("\n");
411050b4:	01000284 	movi	r4,10
411050b8:	110968c0 	call	4110968c <putchar>

  return bSuccess;  
411050bc:	e0bfbe17 	ldw	r2,-264(fp)
}
411050c0:	e037883a 	mov	sp,fp
411050c4:	dfc00117 	ldw	ra,4(sp)
411050c8:	df000017 	ldw	fp,0(sp)
411050cc:	dec00204 	addi	sp,sp,8
411050d0:	f800283a 	ret

411050d4 <DDR2_SWITCH_MEMORY>:

bool DDR2_SWITCH_MEMORY(alt_u8 MemoryId){
411050d4:	defffb04 	addi	sp,sp,-20
411050d8:	dfc00415 	stw	ra,16(sp)
411050dc:	df000315 	stw	fp,12(sp)
411050e0:	df000304 	addi	fp,sp,12
411050e4:	2005883a 	mov	r2,r4
411050e8:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *pDdr2MemAddr = DDR2_EXTENDED_ADDRESS_CONTROL_BASE;
411050ec:	00840034 	movhi	r2,4096
411050f0:	10882004 	addi	r2,r2,8320
411050f4:	e0bffe15 	stw	r2,-8(fp)

	  bSuccess = TRUE;
411050f8:	00800044 	movi	r2,1
411050fc:	e0bffd15 	stw	r2,-12(fp)
	  switch (MemoryId) {
41105100:	e0bfff03 	ldbu	r2,-4(fp)
41105104:	10c00060 	cmpeqi	r3,r2,1
41105108:	1800031e 	bne	r3,zero,41105118 <DDR2_SWITCH_MEMORY+0x44>
4110510c:	108000a0 	cmpeqi	r2,r2,2
41105110:	1000041e 	bne	r2,zero,41105124 <DDR2_SWITCH_MEMORY+0x50>
41105114:	00000706 	br	41105134 <DDR2_SWITCH_MEMORY+0x60>
	    case DDR2_M1_ID:
	  	  *(pDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
41105118:	e0bffe17 	ldw	r2,-8(fp)
4110511c:	10000015 	stw	zero,0(r2)
	    break;
41105120:	00000806 	br	41105144 <DDR2_SWITCH_MEMORY+0x70>
	    case DDR2_M2_ID:
		  *(pDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
41105124:	e0bffe17 	ldw	r2,-8(fp)
41105128:	00e00034 	movhi	r3,32768
4110512c:	10c00015 	stw	r3,0(r2)
	    break;
41105130:	00000406 	br	41105144 <DDR2_SWITCH_MEMORY+0x70>
	    default:
	      bSuccess = FALSE;
41105134:	e03ffd15 	stw	zero,-12(fp)
		  printf("DR2 Memory ID not identified!! Error switching memories!! \n");
41105138:	011044b4 	movhi	r4,16658
4110513c:	212cc904 	addi	r4,r4,-19676
41105140:	11097640 	call	41109764 <puts>
	  }

	  return bSuccess;
41105144:	e0bffd17 	ldw	r2,-12(fp)
}
41105148:	e037883a 	mov	sp,fp
4110514c:	dfc00117 	ldw	ra,4(sp)
41105150:	df000017 	ldw	fp,0(sp)
41105154:	dec00204 	addi	sp,sp,8
41105158:	f800283a 	ret

4110515c <DDR2_MEMORY_WRITE_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_WRITE_TEST(alt_u8 MemoryId){
4110515c:	deffe304 	addi	sp,sp,-116
41105160:	dfc01c15 	stw	ra,112(sp)
41105164:	df001b15 	stw	fp,108(sp)
41105168:	dc401a15 	stw	r17,104(sp)
4110516c:	dc001915 	stw	r16,100(sp)
41105170:	df001b04 	addi	fp,sp,108
41105174:	2005883a 	mov	r2,r4
41105178:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Write Test =====\n");
4110517c:	011044b4 	movhi	r4,16658
41105180:	212cd804 	addi	r4,r4,-19616
41105184:	11097640 	call	41109764 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
41105188:	00800044 	movi	r2,1
4110518c:	e0bfed15 	stw	r2,-76(fp)
  switch (MemoryId) {
41105190:	e0bffd03 	ldbu	r2,-12(fp)
41105194:	10c00060 	cmpeqi	r3,r2,1
41105198:	1800031e 	bne	r3,zero,411051a8 <DDR2_MEMORY_WRITE_TEST+0x4c>
4110519c:	108000a0 	cmpeqi	r2,r2,2
411051a0:	1000081e 	bne	r2,zero,411051c4 <DDR2_MEMORY_WRITE_TEST+0x68>
411051a4:	00000e06 	br	411051e0 <DDR2_MEMORY_WRITE_TEST+0x84>
    case DDR2_M1_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
411051a8:	e0bffd03 	ldbu	r2,-12(fp)
411051ac:	1009883a 	mov	r4,r2
411051b0:	11050d40 	call	411050d4 <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
411051b4:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
411051b8:	00a00034 	movhi	r2,32768
411051bc:	e0bfe615 	stw	r2,-104(fp)
    break;
411051c0:	00000d06 	br	411051f8 <DDR2_MEMORY_WRITE_TEST+0x9c>
    case DDR2_M2_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
411051c4:	e0bffd03 	ldbu	r2,-12(fp)
411051c8:	1009883a 	mov	r4,r2
411051cc:	11050d40 	call	411050d4 <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
411051d0:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
411051d4:	00a00034 	movhi	r2,32768
411051d8:	e0bfe615 	stw	r2,-104(fp)
    break;
411051dc:	00000606 	br	411051f8 <DDR2_MEMORY_WRITE_TEST+0x9c>
    default:
      bSuccess = FALSE;
411051e0:	e03fed15 	stw	zero,-76(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
411051e4:	011044b4 	movhi	r4,16658
411051e8:	212ae804 	addi	r4,r4,-21600
411051ec:	11097640 	call	41109764 <puts>
      return bSuccess;
411051f0:	e0bfed17 	ldw	r2,-76(fp)
411051f4:	0000db06 	br	41105564 <DDR2_MEMORY_WRITE_TEST+0x408>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
411051f8:	e0bfe617 	ldw	r2,-104(fp)
411051fc:	1004d53a 	srli	r2,r2,20
41105200:	100b883a 	mov	r5,r2
41105204:	011044b4 	movhi	r4,16658
41105208:	212ce204 	addi	r4,r4,-19576
4110520c:	11096480 	call	41109648 <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes;
  
  int nItemNum, nPos;
  const int my_data_size = sizeof(my_data);
41105210:	00800104 	movi	r2,4
41105214:	e0bfee15 	stw	r2,-72(fp)
  int nProgressIndex = 0;
41105218:	e03fec15 	stw	zero,-80(fp)
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
4110521c:	e03fef15 	stw	zero,-68(fp)
  
  for(i = 0; i < 10; i++){
41105220:	e03fe715 	stw	zero,-100(fp)
41105224:	00001506 	br	4110527c <DDR2_MEMORY_WRITE_TEST+0x120>
    szProgress[i] = ByteLen/10*(i+1);
41105228:	e0ffe617 	ldw	r3,-104(fp)
4110522c:	00b33374 	movhi	r2,52429
41105230:	10b33344 	addi	r2,r2,-13107
41105234:	1888383a 	mulxuu	r4,r3,r2
41105238:	1885383a 	mul	r2,r3,r2
4110523c:	1021883a 	mov	r16,r2
41105240:	2023883a 	mov	r17,r4
41105244:	8804d0fa 	srli	r2,r17,3
41105248:	e0ffe717 	ldw	r3,-100(fp)
4110524c:	18c00044 	addi	r3,r3,1
41105250:	10c7383a 	mul	r3,r2,r3
41105254:	e0bfe717 	ldw	r2,-100(fp)
41105258:	1085883a 	add	r2,r2,r2
4110525c:	1085883a 	add	r2,r2,r2
41105260:	e13fe504 	addi	r4,fp,-108
41105264:	2085883a 	add	r2,r4,r2
41105268:	10800e04 	addi	r2,r2,56
4110526c:	10c00015 	stw	r3,0(r2)
  int nProgressIndex = 0;
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
  
  for(i = 0; i < 10; i++){
41105270:	e0bfe717 	ldw	r2,-100(fp)
41105274:	10800044 	addi	r2,r2,1
41105278:	e0bfe715 	stw	r2,-100(fp)
4110527c:	e0bfe717 	ldw	r2,-100(fp)
41105280:	10800290 	cmplti	r2,r2,10
41105284:	103fe81e 	bne	r2,zero,41105228 <__reset+0xbb0e5228>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
41105288:	d0a03e17 	ldw	r2,-32520(gp)
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
4110528c:	e0bff015 	stw	r2,-64(fp)
  nItemNum = sizeof(szData)/sizeof(szData[0]);
41105290:	00804004 	movi	r2,256
41105294:	e0bfea15 	stw	r2,-88(fp)
  for(i = 0; i < nItemNum; i++){
41105298:	e03fe715 	stw	zero,-100(fp)
4110529c:	00001e06 	br	41105318 <DDR2_MEMORY_WRITE_TEST+0x1bc>
    if (i == 0) {
411052a0:	e0bfe717 	ldw	r2,-100(fp)
411052a4:	1000091e 	bne	r2,zero,411052cc <DDR2_MEMORY_WRITE_TEST+0x170>
      szData[i] = InitValue;
411052a8:	009044b4 	movhi	r2,16658
411052ac:	10b7ae04 	addi	r2,r2,-8520
411052b0:	e0ffe717 	ldw	r3,-100(fp)
411052b4:	18c7883a 	add	r3,r3,r3
411052b8:	18c7883a 	add	r3,r3,r3
411052bc:	10c5883a 	add	r2,r2,r3
411052c0:	e0fff017 	ldw	r3,-64(fp)
411052c4:	10c00015 	stw	r3,0(r2)
411052c8:	00001006 	br	4110530c <DDR2_MEMORY_WRITE_TEST+0x1b0>
    } else {
      szData[i] = szData[i-1] * 13;
411052cc:	e0bfe717 	ldw	r2,-100(fp)
411052d0:	10ffffc4 	addi	r3,r2,-1
411052d4:	009044b4 	movhi	r2,16658
411052d8:	10b7ae04 	addi	r2,r2,-8520
411052dc:	18c7883a 	add	r3,r3,r3
411052e0:	18c7883a 	add	r3,r3,r3
411052e4:	10c5883a 	add	r2,r2,r3
411052e8:	10800017 	ldw	r2,0(r2)
411052ec:	11000364 	muli	r4,r2,13
411052f0:	009044b4 	movhi	r2,16658
411052f4:	10b7ae04 	addi	r2,r2,-8520
411052f8:	e0ffe717 	ldw	r3,-100(fp)
411052fc:	18c7883a 	add	r3,r3,r3
41105300:	18c7883a 	add	r3,r3,r3
41105304:	10c5883a 	add	r2,r2,r3
41105308:	11000015 	stw	r4,0(r2)
  for(i = 0; i < 10; i++){
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
  nItemNum = sizeof(szData)/sizeof(szData[0]);
  for(i = 0; i < nItemNum; i++){
4110530c:	e0bfe717 	ldw	r2,-100(fp)
41105310:	10800044 	addi	r2,r2,1
41105314:	e0bfe715 	stw	r2,-100(fp)
41105318:	e0ffe717 	ldw	r3,-100(fp)
4110531c:	e0bfea17 	ldw	r2,-88(fp)
41105320:	18bfdf16 	blt	r3,r2,411052a0 <__reset+0xbb0e52a0>
      szData[i] = InitValue;
    } else {
      szData[i] = szData[i-1] * 13;
    }
  }
  szData[nItemNum-1] = 0xAAAAAAAA;
41105324:	e0bfea17 	ldw	r2,-88(fp)
41105328:	10ffffc4 	addi	r3,r2,-1
4110532c:	009044b4 	movhi	r2,16658
41105330:	10b7ae04 	addi	r2,r2,-8520
41105334:	18c7883a 	add	r3,r3,r3
41105338:	18c7883a 	add	r3,r3,r3
4110533c:	10c7883a 	add	r3,r2,r3
41105340:	00aaaaf4 	movhi	r2,43691
41105344:	10aaaa84 	addi	r2,r2,-21846
41105348:	18800015 	stw	r2,0(r3)
  szData[nItemNum-2] = 0x55555555;
4110534c:	e0bfea17 	ldw	r2,-88(fp)
41105350:	10ffff84 	addi	r3,r2,-2
41105354:	009044b4 	movhi	r2,16658
41105358:	10b7ae04 	addi	r2,r2,-8520
4110535c:	18c7883a 	add	r3,r3,r3
41105360:	18c7883a 	add	r3,r3,r3
41105364:	10c7883a 	add	r3,r2,r3
41105368:	00955574 	movhi	r2,21845
4110536c:	10955544 	addi	r2,r2,21845
41105370:	18800015 	stw	r2,0(r3)
  szData[nItemNum-3] = 0x00000000;
41105374:	e0bfea17 	ldw	r2,-88(fp)
41105378:	10ffff44 	addi	r3,r2,-3
4110537c:	009044b4 	movhi	r2,16658
41105380:	10b7ae04 	addi	r2,r2,-8520
41105384:	18c7883a 	add	r3,r3,r3
41105388:	18c7883a 	add	r3,r3,r3
4110538c:	10c5883a 	add	r2,r2,r3
41105390:	10000015 	stw	zero,0(r2)
  szData[nItemNum-4] = 0xFFFFFFFF;
41105394:	e0bfea17 	ldw	r2,-88(fp)
41105398:	10ffff04 	addi	r3,r2,-4
4110539c:	009044b4 	movhi	r2,16658
411053a0:	10b7ae04 	addi	r2,r2,-8520
411053a4:	18c7883a 	add	r3,r3,r3
411053a8:	18c7883a 	add	r3,r3,r3
411053ac:	10c5883a 	add	r2,r2,r3
411053b0:	00ffffc4 	movi	r3,-1
411053b4:	10c00015 	stw	r3,0(r2)

  printf("Writing data...\n");
411053b8:	011044b4 	movhi	r4,16658
411053bc:	212ce804 	addi	r4,r4,-19552
411053c0:	11097640 	call	41109764 <puts>
411053c4:	d0a03e17 	ldw	r2,-32520(gp)
  TimeStart = alt_nticks();
411053c8:	e0bff115 	stw	r2,-60(fp)
  pDes = (my_data *)Ddr2Base;
411053cc:	e0bfe517 	ldw	r2,-108(fp)
411053d0:	e0bfe915 	stw	r2,-92(fp)
  nAccessLen = sizeof(szData);
411053d4:	00810004 	movi	r2,1024
411053d8:	e0bfe815 	stw	r2,-96(fp)
  nItemNum = nAccessLen / my_data_size;
411053dc:	e0ffe817 	ldw	r3,-96(fp)
411053e0:	e0bfee17 	ldw	r2,-72(fp)
411053e4:	1885283a 	div	r2,r3,r2
411053e8:	e0bfea15 	stw	r2,-88(fp)
  nPos = 0;
411053ec:	e03feb15 	stw	zero,-84(fp)
  while(nPos < ByteLen){
411053f0:	00003306 	br	411054c0 <DDR2_MEMORY_WRITE_TEST+0x364>
    nRemainedLen = ByteLen - nPos;
411053f4:	e0bfeb17 	ldw	r2,-84(fp)
411053f8:	e0ffe617 	ldw	r3,-104(fp)
411053fc:	1885c83a 	sub	r2,r3,r2
41105400:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
41105404:	e0bfe817 	ldw	r2,-96(fp)
41105408:	e0fff217 	ldw	r3,-56(fp)
4110540c:	1880060e 	bge	r3,r2,41105428 <DDR2_MEMORY_WRITE_TEST+0x2cc>
      nAccessLen = nRemainedLen;
41105410:	e0bff217 	ldw	r2,-56(fp)
41105414:	e0bfe815 	stw	r2,-96(fp)
      nItemNum = nAccessLen / my_data_size;
41105418:	e0ffe817 	ldw	r3,-96(fp)
4110541c:	e0bfee17 	ldw	r2,-72(fp)
41105420:	1885283a 	div	r2,r3,r2
41105424:	e0bfea15 	stw	r2,-88(fp)
    }
    memcpy(pDes, szData, nAccessLen);
41105428:	e0bfe817 	ldw	r2,-96(fp)
4110542c:	100d883a 	mov	r6,r2
41105430:	015044b4 	movhi	r5,16658
41105434:	2977ae04 	addi	r5,r5,-8520
41105438:	e13fe917 	ldw	r4,-92(fp)
4110543c:	11094d00 	call	411094d0 <memcpy>
    pDes += nItemNum;
41105440:	e0bfea17 	ldw	r2,-88(fp)
41105444:	1085883a 	add	r2,r2,r2
41105448:	1085883a 	add	r2,r2,r2
4110544c:	1007883a 	mov	r3,r2
41105450:	e0bfe917 	ldw	r2,-92(fp)
41105454:	10c5883a 	add	r2,r2,r3
41105458:	e0bfe915 	stw	r2,-92(fp)
    nPos += nAccessLen;
4110545c:	e0ffeb17 	ldw	r3,-84(fp)
41105460:	e0bfe817 	ldw	r2,-96(fp)
41105464:	1885883a 	add	r2,r3,r2
41105468:	e0bfeb15 	stw	r2,-84(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
4110546c:	e0bfec17 	ldw	r2,-80(fp)
41105470:	10800288 	cmpgei	r2,r2,10
41105474:	1000121e 	bne	r2,zero,411054c0 <DDR2_MEMORY_WRITE_TEST+0x364>
41105478:	e0bfec17 	ldw	r2,-80(fp)
4110547c:	1085883a 	add	r2,r2,r2
41105480:	1085883a 	add	r2,r2,r2
41105484:	e0ffe504 	addi	r3,fp,-108
41105488:	1885883a 	add	r2,r3,r2
4110548c:	10800e04 	addi	r2,r2,56
41105490:	10800017 	ldw	r2,0(r2)
41105494:	e0ffeb17 	ldw	r3,-84(fp)
41105498:	18800936 	bltu	r3,r2,411054c0 <DDR2_MEMORY_WRITE_TEST+0x364>
      nProgressIndex++;
4110549c:	e0bfec17 	ldw	r2,-80(fp)
411054a0:	10800044 	addi	r2,r2,1
411054a4:	e0bfec15 	stw	r2,-80(fp)
      printf("%02d%% ", nProgressIndex*10);
411054a8:	e0bfec17 	ldw	r2,-80(fp)
411054ac:	108002a4 	muli	r2,r2,10
411054b0:	100b883a 	mov	r5,r2
411054b4:	011044b4 	movhi	r4,16658
411054b8:	212cec04 	addi	r4,r4,-19536
411054bc:	11096480 	call	41109648 <printf>
  TimeStart = alt_nticks();
  pDes = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(nPos < ByteLen){
411054c0:	e0ffeb17 	ldw	r3,-84(fp)
411054c4:	e0bfe617 	ldw	r2,-104(fp)
411054c8:	18bfca36 	bltu	r3,r2,411053f4 <__reset+0xbb0e53f4>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  alt_dcache_flush_all();
411054cc:	11159080 	call	41115908 <alt_dcache_flush_all>
  printf("\n");
411054d0:	01000284 	movi	r4,10
411054d4:	110968c0 	call	4110968c <putchar>
411054d8:	d0e03e17 	ldw	r3,-32520(gp)

  TimeElapsed = alt_nticks() - TimeStart;
411054dc:	e0bff117 	ldw	r2,-60(fp)
411054e0:	1885c83a 	sub	r2,r3,r2
411054e4:	e0bfef15 	stw	r2,-68(fp)
  if (bSuccess){
411054e8:	e0bfed17 	ldw	r2,-76(fp)
411054ec:	10001726 	beq	r2,zero,4110554c <DDR2_MEMORY_WRITE_TEST+0x3f0>
    printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
411054f0:	e13fef17 	ldw	r4,-68(fp)
411054f4:	11088880 	call	41108888 <__floatsisf>
411054f8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
411054fc:	d0a03d17 	ldw	r2,-32524(gp)
41105500:	1009883a 	mov	r4,r2
41105504:	11089ac0 	call	411089ac <__floatunsisf>
41105508:	1007883a 	mov	r3,r2
4110550c:	180b883a 	mov	r5,r3
41105510:	8009883a 	mov	r4,r16
41105514:	110804c0 	call	4110804c <__divsf3>
41105518:	1007883a 	mov	r3,r2
4110551c:	1805883a 	mov	r2,r3
41105520:	1009883a 	mov	r4,r2
41105524:	11091b40 	call	411091b4 <__extendsfdf2>
41105528:	1009883a 	mov	r4,r2
4110552c:	180b883a 	mov	r5,r3
41105530:	200d883a 	mov	r6,r4
41105534:	280f883a 	mov	r7,r5
41105538:	e17fe617 	ldw	r5,-104(fp)
4110553c:	011044b4 	movhi	r4,16658
41105540:	212cee04 	addi	r4,r4,-19528
41105544:	11096480 	call	41109648 <printf>
41105548:	00000306 	br	41105558 <DDR2_MEMORY_WRITE_TEST+0x3fc>
  } else {
    printf("DDR2 write test fail\n");
4110554c:	011044b4 	movhi	r4,16658
41105550:	212cfa04 	addi	r4,r4,-19480
41105554:	11097640 	call	41109764 <puts>
  }
  printf("\n");
41105558:	01000284 	movi	r4,10
4110555c:	110968c0 	call	4110968c <putchar>

  return bSuccess;
41105560:	e0bfed17 	ldw	r2,-76(fp)
}
41105564:	e6fffe04 	addi	sp,fp,-8
41105568:	dfc00317 	ldw	ra,12(sp)
4110556c:	df000217 	ldw	fp,8(sp)
41105570:	dc400117 	ldw	r17,4(sp)
41105574:	dc000017 	ldw	r16,0(sp)
41105578:	dec00404 	addi	sp,sp,16
4110557c:	f800283a 	ret

41105580 <DDR2_MEMORY_READ_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_READ_TEST(alt_u8 MemoryId){
41105580:	deffe304 	addi	sp,sp,-116
41105584:	dfc01c15 	stw	ra,112(sp)
41105588:	df001b15 	stw	fp,108(sp)
4110558c:	dc401a15 	stw	r17,104(sp)
41105590:	dc001915 	stw	r16,100(sp)
41105594:	df001b04 	addi	fp,sp,108
41105598:	2005883a 	mov	r2,r4
4110559c:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Read Test =====\n");
411055a0:	011044b4 	movhi	r4,16658
411055a4:	212d0004 	addi	r4,r4,-19456
411055a8:	11097640 	call	41109764 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
411055ac:	00800044 	movi	r2,1
411055b0:	e0bfe515 	stw	r2,-108(fp)
  switch (MemoryId) {
411055b4:	e0bffd03 	ldbu	r2,-12(fp)
411055b8:	10c00060 	cmpeqi	r3,r2,1
411055bc:	1800031e 	bne	r3,zero,411055cc <DDR2_MEMORY_READ_TEST+0x4c>
411055c0:	108000a0 	cmpeqi	r2,r2,2
411055c4:	1000081e 	bne	r2,zero,411055e8 <DDR2_MEMORY_READ_TEST+0x68>
411055c8:	00000e06 	br	41105604 <DDR2_MEMORY_READ_TEST+0x84>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
411055cc:	e0bffd03 	ldbu	r2,-12(fp)
411055d0:	1009883a 	mov	r4,r2
411055d4:	11050d40 	call	411050d4 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
411055d8:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
411055dc:	00a00034 	movhi	r2,32768
411055e0:	e0bfe715 	stw	r2,-100(fp)
    break;
411055e4:	00000d06 	br	4110561c <DDR2_MEMORY_READ_TEST+0x9c>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
411055e8:	e0bffd03 	ldbu	r2,-12(fp)
411055ec:	1009883a 	mov	r4,r2
411055f0:	11050d40 	call	411050d4 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
411055f4:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
411055f8:	00a00034 	movhi	r2,32768
411055fc:	e0bfe715 	stw	r2,-100(fp)
    break;
41105600:	00000606 	br	4110561c <DDR2_MEMORY_READ_TEST+0x9c>
    default:
      bSuccess = FALSE;
41105604:	e03fe515 	stw	zero,-108(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
41105608:	011044b4 	movhi	r4,16658
4110560c:	212ae804 	addi	r4,r4,-21600
41105610:	11097640 	call	41109764 <puts>
      return bSuccess;
41105614:	e0bfe517 	ldw	r2,-108(fp)
41105618:	0000b806 	br	411058fc <DDR2_MEMORY_READ_TEST+0x37c>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
4110561c:	e0bfe717 	ldw	r2,-100(fp)
41105620:	1004d53a 	srli	r2,r2,20
41105624:	100b883a 	mov	r5,r2
41105628:	011044b4 	movhi	r4,16658
4110562c:	212ce204 	addi	r4,r4,-19576
41105630:	11096480 	call	41109648 <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes, *pSrc;
  int nItemNum, nPos;
  nItemNum = sizeof(szData)/sizeof(szData[0]);
41105634:	00804004 	movi	r2,256
41105638:	e0bfec15 	stw	r2,-80(fp)
  const int my_data_size = sizeof(my_data);
4110563c:	00800104 	movi	r2,4
41105640:	e0bfef15 	stw	r2,-68(fp)
  nAccessLen = nItemNum * my_data_size;
41105644:	e0ffec17 	ldw	r3,-80(fp)
41105648:	e0bfef17 	ldw	r2,-68(fp)
4110564c:	1885383a 	mul	r2,r3,r2
41105650:	e0bfe915 	stw	r2,-92(fp)
  int nProgressIndex = 0;
41105654:	e03fee15 	stw	zero,-72(fp)
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
41105658:	e03ff015 	stw	zero,-64(fp)

  for(i=0;i<10;i++){
4110565c:	e03fe815 	stw	zero,-96(fp)
41105660:	00001506 	br	411056b8 <DDR2_MEMORY_READ_TEST+0x138>
    szProgress[i] = ByteLen/10*(i+1);
41105664:	e0ffe717 	ldw	r3,-100(fp)
41105668:	00b33374 	movhi	r2,52429
4110566c:	10b33344 	addi	r2,r2,-13107
41105670:	1888383a 	mulxuu	r4,r3,r2
41105674:	1885383a 	mul	r2,r3,r2
41105678:	1021883a 	mov	r16,r2
4110567c:	2023883a 	mov	r17,r4
41105680:	8804d0fa 	srli	r2,r17,3
41105684:	e0ffe817 	ldw	r3,-96(fp)
41105688:	18c00044 	addi	r3,r3,1
4110568c:	10c7383a 	mul	r3,r2,r3
41105690:	e0bfe817 	ldw	r2,-96(fp)
41105694:	1085883a 	add	r2,r2,r2
41105698:	1085883a 	add	r2,r2,r2
4110569c:	e13fe504 	addi	r4,fp,-108
411056a0:	2085883a 	add	r2,r4,r2
411056a4:	10800e04 	addi	r2,r2,56
411056a8:	10c00015 	stw	r3,0(r2)
  nAccessLen = nItemNum * my_data_size;
  int nProgressIndex = 0;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;

  for(i=0;i<10;i++){
411056ac:	e0bfe817 	ldw	r2,-96(fp)
411056b0:	10800044 	addi	r2,r2,1
411056b4:	e0bfe815 	stw	r2,-96(fp)
411056b8:	e0bfe817 	ldw	r2,-96(fp)
411056bc:	10800290 	cmplti	r2,r2,10
411056c0:	103fe81e 	bne	r2,zero,41105664 <__reset+0xbb0e5664>
    szProgress[i] = ByteLen/10*(i+1);
  }

  nProgressIndex = 0;
411056c4:	e03fee15 	stw	zero,-72(fp)
  printf("Reading/Verifying Data...\n");
411056c8:	011044b4 	movhi	r4,16658
411056cc:	212d0a04 	addi	r4,r4,-19416
411056d0:	11097640 	call	41109764 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
411056d4:	d0a03e17 	ldw	r2,-32520(gp)
  TimeStart = alt_nticks();
411056d8:	e0bff115 	stw	r2,-60(fp)

  pSrc = (my_data *)Ddr2Base;
411056dc:	e0bfe617 	ldw	r2,-104(fp)
411056e0:	e0bfeb15 	stw	r2,-84(fp)
  nAccessLen = sizeof(szData);
411056e4:	00810004 	movi	r2,1024
411056e8:	e0bfe915 	stw	r2,-92(fp)
  nItemNum = nAccessLen / my_data_size;
411056ec:	e0ffe917 	ldw	r3,-92(fp)
411056f0:	e0bfef17 	ldw	r2,-68(fp)
411056f4:	1885283a 	div	r2,r3,r2
411056f8:	e0bfec15 	stw	r2,-80(fp)
  nPos = 0;
411056fc:	e03fed15 	stw	zero,-76(fp)
  while(bSuccess && nPos < ByteLen){
41105700:	00005406 	br	41105854 <DDR2_MEMORY_READ_TEST+0x2d4>
    nRemainedLen = ByteLen - nPos;
41105704:	e0bfed17 	ldw	r2,-76(fp)
41105708:	e0ffe717 	ldw	r3,-100(fp)
4110570c:	1885c83a 	sub	r2,r3,r2
41105710:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
41105714:	e0bfe917 	ldw	r2,-92(fp)
41105718:	e0fff217 	ldw	r3,-56(fp)
4110571c:	1880060e 	bge	r3,r2,41105738 <DDR2_MEMORY_READ_TEST+0x1b8>
      nAccessLen = nRemainedLen;
41105720:	e0bff217 	ldw	r2,-56(fp)
41105724:	e0bfe915 	stw	r2,-92(fp)
      nItemNum = nAccessLen / my_data_size;
41105728:	e0ffe917 	ldw	r3,-92(fp)
4110572c:	e0bfef17 	ldw	r2,-68(fp)
41105730:	1885283a 	div	r2,r3,r2
41105734:	e0bfec15 	stw	r2,-80(fp)
    }
    pDes = szData;
41105738:	009044b4 	movhi	r2,16658
4110573c:	10b7ae04 	addi	r2,r2,-8520
41105740:	e0bfea15 	stw	r2,-88(fp)
    for(i=0 ; i < nItemNum && bSuccess; i++){
41105744:	e03fe815 	stw	zero,-96(fp)
41105748:	00002406 	br	411057dc <DDR2_MEMORY_READ_TEST+0x25c>
      if (*pSrc++ != *pDes++){
4110574c:	e0bfeb17 	ldw	r2,-84(fp)
41105750:	10c00104 	addi	r3,r2,4
41105754:	e0ffeb15 	stw	r3,-84(fp)
41105758:	10c00017 	ldw	r3,0(r2)
4110575c:	e0bfea17 	ldw	r2,-88(fp)
41105760:	11000104 	addi	r4,r2,4
41105764:	e13fea15 	stw	r4,-88(fp)
41105768:	10800017 	ldw	r2,0(r2)
4110576c:	18801826 	beq	r3,r2,411057d0 <DDR2_MEMORY_READ_TEST+0x250>
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
41105770:	e0bfeb17 	ldw	r2,-84(fp)
41105774:	10bfff04 	addi	r2,r2,-4
41105778:	10800017 	ldw	r2,0(r2)
4110577c:	1009883a 	mov	r4,r2
41105780:	009044b4 	movhi	r2,16658
41105784:	10b7ae04 	addi	r2,r2,-8520
41105788:	e0ffe817 	ldw	r3,-96(fp)
4110578c:	18c7883a 	add	r3,r3,r3
41105790:	18c7883a 	add	r3,r3,r3
41105794:	10c5883a 	add	r2,r2,r3
41105798:	10800017 	ldw	r2,0(r2)
4110579c:	100b883a 	mov	r5,r2
411057a0:	e0ffed17 	ldw	r3,-76(fp)
411057a4:	e0bfef17 	ldw	r2,-68(fp)
411057a8:	1887283a 	div	r3,r3,r2
411057ac:	e0bfe817 	ldw	r2,-96(fp)
411057b0:	1885883a 	add	r2,r3,r2
411057b4:	100f883a 	mov	r7,r2
411057b8:	280d883a 	mov	r6,r5
411057bc:	200b883a 	mov	r5,r4
411057c0:	011044b4 	movhi	r4,16658
411057c4:	212d1104 	addi	r4,r4,-19388
411057c8:	11096480 	call	41109648 <printf>
        bSuccess = FALSE;
411057cc:	e03fe515 	stw	zero,-108(fp)
    if (nAccessLen > nRemainedLen){
      nAccessLen = nRemainedLen;
      nItemNum = nAccessLen / my_data_size;
    }
    pDes = szData;
    for(i=0 ; i < nItemNum && bSuccess; i++){
411057d0:	e0bfe817 	ldw	r2,-96(fp)
411057d4:	10800044 	addi	r2,r2,1
411057d8:	e0bfe815 	stw	r2,-96(fp)
411057dc:	e0ffe817 	ldw	r3,-96(fp)
411057e0:	e0bfec17 	ldw	r2,-80(fp)
411057e4:	1880020e 	bge	r3,r2,411057f0 <DDR2_MEMORY_READ_TEST+0x270>
411057e8:	e0bfe517 	ldw	r2,-108(fp)
411057ec:	103fd71e 	bne	r2,zero,4110574c <__reset+0xbb0e574c>
      if (*pSrc++ != *pDes++){
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
        bSuccess = FALSE;
      }
    }
    nPos += nAccessLen;
411057f0:	e0ffed17 	ldw	r3,-76(fp)
411057f4:	e0bfe917 	ldw	r2,-92(fp)
411057f8:	1885883a 	add	r2,r3,r2
411057fc:	e0bfed15 	stw	r2,-76(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
41105800:	e0bfee17 	ldw	r2,-72(fp)
41105804:	10800288 	cmpgei	r2,r2,10
41105808:	1000121e 	bne	r2,zero,41105854 <DDR2_MEMORY_READ_TEST+0x2d4>
4110580c:	e0bfee17 	ldw	r2,-72(fp)
41105810:	1085883a 	add	r2,r2,r2
41105814:	1085883a 	add	r2,r2,r2
41105818:	e0ffe504 	addi	r3,fp,-108
4110581c:	1885883a 	add	r2,r3,r2
41105820:	10800e04 	addi	r2,r2,56
41105824:	10800017 	ldw	r2,0(r2)
41105828:	e0ffed17 	ldw	r3,-76(fp)
4110582c:	18800936 	bltu	r3,r2,41105854 <DDR2_MEMORY_READ_TEST+0x2d4>
      nProgressIndex++;
41105830:	e0bfee17 	ldw	r2,-72(fp)
41105834:	10800044 	addi	r2,r2,1
41105838:	e0bfee15 	stw	r2,-72(fp)
      printf("%02d%% ", nProgressIndex*10);
4110583c:	e0bfee17 	ldw	r2,-72(fp)
41105840:	108002a4 	muli	r2,r2,10
41105844:	100b883a 	mov	r5,r2
41105848:	011044b4 	movhi	r4,16658
4110584c:	212cec04 	addi	r4,r4,-19536
41105850:	11096480 	call	41109648 <printf>

  pSrc = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(bSuccess && nPos < ByteLen){
41105854:	e0bfe517 	ldw	r2,-108(fp)
41105858:	10000326 	beq	r2,zero,41105868 <DDR2_MEMORY_READ_TEST+0x2e8>
4110585c:	e0ffed17 	ldw	r3,-76(fp)
41105860:	e0bfe717 	ldw	r2,-100(fp)
41105864:	18bfa736 	bltu	r3,r2,41105704 <__reset+0xbb0e5704>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  printf("\n");
41105868:	01000284 	movi	r4,10
4110586c:	110968c0 	call	4110968c <putchar>
41105870:	d0e03e17 	ldw	r3,-32520(gp)

  TimeElapsed = alt_nticks() - TimeStart;
41105874:	e0bff117 	ldw	r2,-60(fp)
41105878:	1885c83a 	sub	r2,r3,r2
4110587c:	e0bff015 	stw	r2,-64(fp)
  if (bSuccess){
41105880:	e0bfe517 	ldw	r2,-108(fp)
41105884:	10001726 	beq	r2,zero,411058e4 <DDR2_MEMORY_READ_TEST+0x364>
    printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
41105888:	e13ff017 	ldw	r4,-64(fp)
4110588c:	11088880 	call	41108888 <__floatsisf>
41105890:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
41105894:	d0a03d17 	ldw	r2,-32524(gp)
41105898:	1009883a 	mov	r4,r2
4110589c:	11089ac0 	call	411089ac <__floatunsisf>
411058a0:	1007883a 	mov	r3,r2
411058a4:	180b883a 	mov	r5,r3
411058a8:	8009883a 	mov	r4,r16
411058ac:	110804c0 	call	4110804c <__divsf3>
411058b0:	1007883a 	mov	r3,r2
411058b4:	1805883a 	mov	r2,r3
411058b8:	1009883a 	mov	r4,r2
411058bc:	11091b40 	call	411091b4 <__extendsfdf2>
411058c0:	1009883a 	mov	r4,r2
411058c4:	180b883a 	mov	r5,r3
411058c8:	200d883a 	mov	r6,r4
411058cc:	280f883a 	mov	r7,r5
411058d0:	e17fe717 	ldw	r5,-100(fp)
411058d4:	011044b4 	movhi	r4,16658
411058d8:	212d1f04 	addi	r4,r4,-19332
411058dc:	11096480 	call	41109648 <printf>
411058e0:	00000306 	br	411058f0 <DDR2_MEMORY_READ_TEST+0x370>
  } else {
    printf("DDR2 read test fail\n");
411058e4:	011044b4 	movhi	r4,16658
411058e8:	212d2b04 	addi	r4,r4,-19284
411058ec:	11097640 	call	41109764 <puts>
  }
  printf("\n");
411058f0:	01000284 	movi	r4,10
411058f4:	110968c0 	call	4110968c <putchar>

  return bSuccess;
411058f8:	e0bfe517 	ldw	r2,-108(fp)
}
411058fc:	e6fffe04 	addi	sp,fp,-8
41105900:	dfc00317 	ldw	ra,12(sp)
41105904:	df000217 	ldw	fp,8(sp)
41105908:	dc400117 	ldw	r17,4(sp)
4110590c:	dc000017 	ldw	r16,0(sp)
41105910:	dec00404 	addi	sp,sp,16
41105914:	f800283a 	ret

41105918 <DDR2_MEMORY_RANDOM_WRITE_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_WRITE_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
41105918:	deffed04 	addi	sp,sp,-76
4110591c:	dfc01215 	stw	ra,72(sp)
41105920:	df001115 	stw	fp,68(sp)
41105924:	dcc01015 	stw	r19,64(sp)
41105928:	dc800f15 	stw	r18,60(sp)
4110592c:	dc400e15 	stw	r17,56(sp)
41105930:	dc000d15 	stw	r16,52(sp)
41105934:	df001104 	addi	fp,sp,68
41105938:	2005883a 	mov	r2,r4
4110593c:	e17ffa15 	stw	r5,-24(fp)
41105940:	e1bffb15 	stw	r6,-20(fp)
41105944:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Write Test =====\n");
41105948:	011044b4 	movhi	r4,16658
4110594c:	212d3004 	addi	r4,r4,-19264
41105950:	11097640 	call	41109764 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
41105954:	00800044 	movi	r2,1
41105958:	e0bff415 	stw	r2,-48(fp)
  switch (MemoryId) {
4110595c:	e0bff903 	ldbu	r2,-28(fp)
41105960:	10c00060 	cmpeqi	r3,r2,1
41105964:	1800031e 	bne	r3,zero,41105974 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x5c>
41105968:	108000a0 	cmpeqi	r2,r2,2
4110596c:	1000081e 	bne	r2,zero,41105990 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x78>
41105970:	00000e06 	br	411059ac <DDR2_MEMORY_RANDOM_WRITE_TEST+0x94>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
41105974:	e0bff903 	ldbu	r2,-28(fp)
41105978:	1009883a 	mov	r4,r2
4110597c:	11050d40 	call	411050d4 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
41105980:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
41105984:	00a00034 	movhi	r2,32768
41105988:	e0bff015 	stw	r2,-64(fp)
    break;
4110598c:	00000d06 	br	411059c4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0xac>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
41105990:	e0bff903 	ldbu	r2,-28(fp)
41105994:	1009883a 	mov	r4,r2
41105998:	11050d40 	call	411050d4 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
4110599c:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
411059a0:	00a00034 	movhi	r2,32768
411059a4:	e0bff015 	stw	r2,-64(fp)
    break;
411059a8:	00000606 	br	411059c4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0xac>
    default:
      bSuccess = FALSE;
411059ac:	e03ff415 	stw	zero,-48(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
411059b0:	011044b4 	movhi	r4,16658
411059b4:	212ae804 	addi	r4,r4,-21600
411059b8:	11097640 	call	41109764 <puts>
      return bSuccess;
411059bc:	e0bff417 	ldw	r2,-48(fp)
411059c0:	00008406 	br	41105bd4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2bc>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
411059c4:	e0bff017 	ldw	r2,-64(fp)
411059c8:	1004d53a 	srli	r2,r2,20
411059cc:	100b883a 	mov	r5,r2
411059d0:	011044b4 	movhi	r4,16658
411059d4:	212ce204 	addi	r4,r4,-19576
411059d8:	11096480 	call	41109648 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
411059dc:	d0a03e17 	ldw	r2,-32520(gp)
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  InitialState = alt_nticks();
411059e0:	d0a03115 	stw	r2,-32572(gp)
  CurrentState = InitialState;
411059e4:	d0a03117 	ldw	r2,-32572(gp)
411059e8:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
411059ec:	e0ffef17 	ldw	r3,-68(fp)
411059f0:	e0bff017 	ldw	r2,-64(fp)
411059f4:	1885883a 	add	r2,r3,r2
411059f8:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
411059fc:	e0fff017 	ldw	r3,-64(fp)
41105a00:	00b33374 	movhi	r2,52429
41105a04:	10b33344 	addi	r2,r2,-13107
41105a08:	1888383a 	mulxuu	r4,r3,r2
41105a0c:	1885383a 	mul	r2,r3,r2
41105a10:	1025883a 	mov	r18,r2
41105a14:	2027883a 	mov	r19,r4
41105a18:	9806d13a 	srli	r3,r19,4
41105a1c:	e0bfef17 	ldw	r2,-68(fp)
41105a20:	1885883a 	add	r2,r3,r2
41105a24:	e0bff215 	stw	r2,-56(fp)
  Percentage = 5;
41105a28:	00800144 	movi	r2,5
41105a2c:	e0bff305 	stb	r2,-52(fp)
  printf("Writing to memory...\n");
41105a30:	011044b4 	movhi	r4,16658
41105a34:	212d3c04 	addi	r4,r4,-19216
41105a38:	11097640 	call	41109764 <puts>
  if (bVerbose == DDR2_VERBOSE) {
41105a3c:	e0bffa17 	ldw	r2,-24(fp)
41105a40:	10800058 	cmpnei	r2,r2,1
41105a44:	1000031e 	bne	r2,zero,41105a54 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x13c>
    printf("00%%..");
41105a48:	011044b4 	movhi	r4,16658
41105a4c:	212d4204 	addi	r4,r4,-19192
41105a50:	11096480 	call	41109648 <printf>
  }
  int TimeStart, TimeElapsed = 0;
41105a54:	e03ff615 	stw	zero,-40(fp)
41105a58:	d0a03e17 	ldw	r2,-32520(gp)

  TimeStart = alt_nticks();
41105a5c:	e0bff715 	stw	r2,-36(fp)
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
41105a60:	e0bfef17 	ldw	r2,-68(fp)
41105a64:	e0bff115 	stw	r2,-60(fp)
41105a68:	00002506 	br	41105b00 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1e8>
    *pDestination = xorshift32(&CurrentState);
41105a6c:	e0bff804 	addi	r2,fp,-32
41105a70:	1009883a 	mov	r4,r2
41105a74:	1105ec80 	call	41105ec8 <xorshift32>
41105a78:	1007883a 	mov	r3,r2
41105a7c:	e0bff117 	ldw	r2,-60(fp)
41105a80:	10c00015 	stw	r3,0(r2)
    if ((bVerbose == DDR2_VERBOSE) & ((alt_u32)pDestination > NextMilestone)){
41105a84:	e0bffa17 	ldw	r2,-24(fp)
41105a88:	10800060 	cmpeqi	r2,r2,1
41105a8c:	1009883a 	mov	r4,r2
41105a90:	e0bff117 	ldw	r2,-60(fp)
41105a94:	e0fff217 	ldw	r3,-56(fp)
41105a98:	1885803a 	cmpltu	r2,r3,r2
41105a9c:	2084703a 	and	r2,r4,r2
41105aa0:	10803fcc 	andi	r2,r2,255
41105aa4:	10001326 	beq	r2,zero,41105af4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1dc>
      printf("..%02d%%..",Percentage);
41105aa8:	e0bff303 	ldbu	r2,-52(fp)
41105aac:	100b883a 	mov	r5,r2
41105ab0:	011044b4 	movhi	r4,16658
41105ab4:	212d4404 	addi	r4,r4,-19184
41105ab8:	11096480 	call	41109648 <printf>
	  NextMilestone += ByteLen/20;
41105abc:	e0fff017 	ldw	r3,-64(fp)
41105ac0:	00b33374 	movhi	r2,52429
41105ac4:	10b33344 	addi	r2,r2,-13107
41105ac8:	1888383a 	mulxuu	r4,r3,r2
41105acc:	1885383a 	mul	r2,r3,r2
41105ad0:	1021883a 	mov	r16,r2
41105ad4:	2023883a 	mov	r17,r4
41105ad8:	8804d13a 	srli	r2,r17,4
41105adc:	e0fff217 	ldw	r3,-56(fp)
41105ae0:	1885883a 	add	r2,r3,r2
41105ae4:	e0bff215 	stw	r2,-56(fp)
	  Percentage += 5;
41105ae8:	e0bff303 	ldbu	r2,-52(fp)
41105aec:	10800144 	addi	r2,r2,5
41105af0:	e0bff305 	stb	r2,-52(fp)
    printf("00%%..");
  }
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
41105af4:	e0bff117 	ldw	r2,-60(fp)
41105af8:	10800104 	addi	r2,r2,4
41105afc:	e0bff115 	stw	r2,-60(fp)
41105b00:	e0fff117 	ldw	r3,-60(fp)
41105b04:	e0bff517 	ldw	r2,-44(fp)
41105b08:	18bfd836 	bltu	r3,r2,41105a6c <__reset+0xbb0e5a6c>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  alt_dcache_flush_all();
41105b0c:	11159080 	call	41115908 <alt_dcache_flush_all>
  if (bVerbose == DDR2_VERBOSE) {
41105b10:	e0bffa17 	ldw	r2,-24(fp)
41105b14:	10800058 	cmpnei	r2,r2,1
41105b18:	1000031e 	bne	r2,zero,41105b28 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x210>
    printf("..100%%\n");
41105b1c:	011044b4 	movhi	r4,16658
41105b20:	212d4704 	addi	r4,r4,-19172
41105b24:	11096480 	call	41109648 <printf>
  }

  if (bSuccess){
41105b28:	e0bff417 	ldw	r2,-48(fp)
41105b2c:	10002326 	beq	r2,zero,41105bbc <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2a4>
    if (bTime == TRUE){
41105b30:	e0bffb17 	ldw	r2,-20(fp)
41105b34:	10800058 	cmpnei	r2,r2,1
41105b38:	10001b1e 	bne	r2,zero,41105ba8 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x290>
41105b3c:	d0e03e17 	ldw	r3,-32520(gp)
      TimeElapsed = alt_nticks() - TimeStart;
41105b40:	e0bff717 	ldw	r2,-36(fp)
41105b44:	1885c83a 	sub	r2,r3,r2
41105b48:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
41105b4c:	e13ff617 	ldw	r4,-40(fp)
41105b50:	11088880 	call	41108888 <__floatsisf>
41105b54:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
41105b58:	d0a03d17 	ldw	r2,-32524(gp)
41105b5c:	1009883a 	mov	r4,r2
41105b60:	11089ac0 	call	411089ac <__floatunsisf>
41105b64:	1007883a 	mov	r3,r2
41105b68:	180b883a 	mov	r5,r3
41105b6c:	8009883a 	mov	r4,r16
41105b70:	110804c0 	call	4110804c <__divsf3>
41105b74:	1007883a 	mov	r3,r2
41105b78:	1805883a 	mov	r2,r3
41105b7c:	1009883a 	mov	r4,r2
41105b80:	11091b40 	call	411091b4 <__extendsfdf2>
41105b84:	1009883a 	mov	r4,r2
41105b88:	180b883a 	mov	r5,r3
41105b8c:	200d883a 	mov	r6,r4
41105b90:	280f883a 	mov	r7,r5
41105b94:	e17ff017 	ldw	r5,-64(fp)
41105b98:	011044b4 	movhi	r4,16658
41105b9c:	212cee04 	addi	r4,r4,-19528
41105ba0:	11096480 	call	41109648 <printf>
41105ba4:	00000806 	br	41105bc8 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b0>
    } else {
      printf("DDR2 write test pass, size=%d bytes\n", ByteLen);
41105ba8:	e17ff017 	ldw	r5,-64(fp)
41105bac:	011044b4 	movhi	r4,16658
41105bb0:	212d4a04 	addi	r4,r4,-19160
41105bb4:	11096480 	call	41109648 <printf>
41105bb8:	00000306 	br	41105bc8 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b0>
    }
  } else {
    printf("DDR2 write test fail\n");
41105bbc:	011044b4 	movhi	r4,16658
41105bc0:	212cfa04 	addi	r4,r4,-19480
41105bc4:	11097640 	call	41109764 <puts>
  }
  printf("\n");
41105bc8:	01000284 	movi	r4,10
41105bcc:	110968c0 	call	4110968c <putchar>

  return bSuccess;
41105bd0:	e0bff417 	ldw	r2,-48(fp)
}
41105bd4:	e6fffc04 	addi	sp,fp,-16
41105bd8:	dfc00517 	ldw	ra,20(sp)
41105bdc:	df000417 	ldw	fp,16(sp)
41105be0:	dcc00317 	ldw	r19,12(sp)
41105be4:	dc800217 	ldw	r18,8(sp)
41105be8:	dc400117 	ldw	r17,4(sp)
41105bec:	dc000017 	ldw	r16,0(sp)
41105bf0:	dec00604 	addi	sp,sp,24
41105bf4:	f800283a 	ret

41105bf8 <DDR2_MEMORY_RANDOM_READ_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_READ_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
41105bf8:	deffed04 	addi	sp,sp,-76
41105bfc:	dfc01215 	stw	ra,72(sp)
41105c00:	df001115 	stw	fp,68(sp)
41105c04:	dcc01015 	stw	r19,64(sp)
41105c08:	dc800f15 	stw	r18,60(sp)
41105c0c:	dc400e15 	stw	r17,56(sp)
41105c10:	dc000d15 	stw	r16,52(sp)
41105c14:	df001104 	addi	fp,sp,68
41105c18:	2005883a 	mov	r2,r4
41105c1c:	e17ffa15 	stw	r5,-24(fp)
41105c20:	e1bffb15 	stw	r6,-20(fp)
41105c24:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Read Test =====\n");
41105c28:	011044b4 	movhi	r4,16658
41105c2c:	212d5404 	addi	r4,r4,-19120
41105c30:	11097640 	call	41109764 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
41105c34:	00800044 	movi	r2,1
41105c38:	e0bfef15 	stw	r2,-68(fp)
  switch (MemoryId) {
41105c3c:	e0bff903 	ldbu	r2,-28(fp)
41105c40:	10c00060 	cmpeqi	r3,r2,1
41105c44:	1800031e 	bne	r3,zero,41105c54 <DDR2_MEMORY_RANDOM_READ_TEST+0x5c>
41105c48:	108000a0 	cmpeqi	r2,r2,2
41105c4c:	1000081e 	bne	r2,zero,41105c70 <DDR2_MEMORY_RANDOM_READ_TEST+0x78>
41105c50:	00000e06 	br	41105c8c <DDR2_MEMORY_RANDOM_READ_TEST+0x94>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
41105c54:	e0bff903 	ldbu	r2,-28(fp)
41105c58:	1009883a 	mov	r4,r2
41105c5c:	11050d40 	call	411050d4 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
41105c60:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
41105c64:	00a00034 	movhi	r2,32768
41105c68:	e0bff115 	stw	r2,-60(fp)
    break;
41105c6c:	00000d06 	br	41105ca4 <DDR2_MEMORY_RANDOM_READ_TEST+0xac>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
41105c70:	e0bff903 	ldbu	r2,-28(fp)
41105c74:	1009883a 	mov	r4,r2
41105c78:	11050d40 	call	411050d4 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
41105c7c:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
41105c80:	00a00034 	movhi	r2,32768
41105c84:	e0bff115 	stw	r2,-60(fp)
    break;
41105c88:	00000606 	br	41105ca4 <DDR2_MEMORY_RANDOM_READ_TEST+0xac>
    default:
      bSuccess = FALSE;
41105c8c:	e03fef15 	stw	zero,-68(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
41105c90:	011044b4 	movhi	r4,16658
41105c94:	212ae804 	addi	r4,r4,-21600
41105c98:	11097640 	call	41109764 <puts>
      return bSuccess;
41105c9c:	e0bfef17 	ldw	r2,-68(fp)
41105ca0:	00008006 	br	41105ea4 <DDR2_MEMORY_RANDOM_READ_TEST+0x2ac>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
41105ca4:	e0bff117 	ldw	r2,-60(fp)
41105ca8:	1004d53a 	srli	r2,r2,20
41105cac:	100b883a 	mov	r5,r2
41105cb0:	011044b4 	movhi	r4,16658
41105cb4:	212ce204 	addi	r4,r4,-19576
41105cb8:	11096480 	call	41109648 <printf>
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  CurrentState = InitialState;
41105cbc:	d0a03117 	ldw	r2,-32572(gp)
41105cc0:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
41105cc4:	e0fff017 	ldw	r3,-64(fp)
41105cc8:	e0bff117 	ldw	r2,-60(fp)
41105ccc:	1885883a 	add	r2,r3,r2
41105cd0:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
41105cd4:	e0fff117 	ldw	r3,-60(fp)
41105cd8:	00b33374 	movhi	r2,52429
41105cdc:	10b33344 	addi	r2,r2,-13107
41105ce0:	1888383a 	mulxuu	r4,r3,r2
41105ce4:	1885383a 	mul	r2,r3,r2
41105ce8:	1025883a 	mov	r18,r2
41105cec:	2027883a 	mov	r19,r4
41105cf0:	9806d13a 	srli	r3,r19,4
41105cf4:	e0bff017 	ldw	r2,-64(fp)
41105cf8:	1885883a 	add	r2,r3,r2
41105cfc:	e0bff315 	stw	r2,-52(fp)
  Percentage = 5;
41105d00:	00800144 	movi	r2,5
41105d04:	e0bff405 	stb	r2,-48(fp)
  printf("Reading from memory...\n");
41105d08:	011044b4 	movhi	r4,16658
41105d0c:	212d6004 	addi	r4,r4,-19072
41105d10:	11097640 	call	41109764 <puts>
  if (bVerbose == DDR2_VERBOSE) {
41105d14:	e0bffa17 	ldw	r2,-24(fp)
41105d18:	10800058 	cmpnei	r2,r2,1
41105d1c:	1000031e 	bne	r2,zero,41105d2c <DDR2_MEMORY_RANDOM_READ_TEST+0x134>
    printf("00%%..");
41105d20:	011044b4 	movhi	r4,16658
41105d24:	212d4204 	addi	r4,r4,-19192
41105d28:	11096480 	call	41109648 <printf>
  }
  
  int TimeStart, TimeElapsed = 0;
41105d2c:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
41105d30:	d0a03e17 	ldw	r2,-32520(gp)

  TimeStart = alt_nticks();
41105d34:	e0bff715 	stw	r2,-36(fp)
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
41105d38:	e0bff017 	ldw	r2,-64(fp)
41105d3c:	e0bff215 	stw	r2,-56(fp)
41105d40:	00002406 	br	41105dd4 <DDR2_MEMORY_RANDOM_READ_TEST+0x1dc>
    if (xorshift32(&CurrentState) != *pSource){
41105d44:	e0bff804 	addi	r2,fp,-32
41105d48:	1009883a 	mov	r4,r2
41105d4c:	1105ec80 	call	41105ec8 <xorshift32>
41105d50:	1007883a 	mov	r3,r2
41105d54:	e0bff217 	ldw	r2,-56(fp)
41105d58:	10800017 	ldw	r2,0(r2)
41105d5c:	18800126 	beq	r3,r2,41105d64 <DDR2_MEMORY_RANDOM_READ_TEST+0x16c>
      bSuccess = FALSE;
41105d60:	e03fef15 	stw	zero,-68(fp)
	  if (bVerbose == DDR2_VERBOSE) {
        //printf("Failed to read adress 0x%08X\n", pSource);
      }
    }
    if ((bVerbose == DDR2_VERBOSE) && ((alt_u32)pSource > NextMilestone)){
41105d64:	e0bffa17 	ldw	r2,-24(fp)
41105d68:	10800058 	cmpnei	r2,r2,1
41105d6c:	1000161e 	bne	r2,zero,41105dc8 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d0>
41105d70:	e0bff217 	ldw	r2,-56(fp)
41105d74:	e0fff317 	ldw	r3,-52(fp)
41105d78:	1880132e 	bgeu	r3,r2,41105dc8 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d0>
      printf("..%02d%%..",Percentage);
41105d7c:	e0bff403 	ldbu	r2,-48(fp)
41105d80:	100b883a 	mov	r5,r2
41105d84:	011044b4 	movhi	r4,16658
41105d88:	212d4404 	addi	r4,r4,-19184
41105d8c:	11096480 	call	41109648 <printf>
	  NextMilestone += ByteLen/20;
41105d90:	e0fff117 	ldw	r3,-60(fp)
41105d94:	00b33374 	movhi	r2,52429
41105d98:	10b33344 	addi	r2,r2,-13107
41105d9c:	1888383a 	mulxuu	r4,r3,r2
41105da0:	1885383a 	mul	r2,r3,r2
41105da4:	1021883a 	mov	r16,r2
41105da8:	2023883a 	mov	r17,r4
41105dac:	8804d13a 	srli	r2,r17,4
41105db0:	e0fff317 	ldw	r3,-52(fp)
41105db4:	1885883a 	add	r2,r3,r2
41105db8:	e0bff315 	stw	r2,-52(fp)
	  Percentage += 5;
41105dbc:	e0bff403 	ldbu	r2,-48(fp)
41105dc0:	10800144 	addi	r2,r2,5
41105dc4:	e0bff405 	stb	r2,-48(fp)
  }
  
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
41105dc8:	e0bff217 	ldw	r2,-56(fp)
41105dcc:	10800104 	addi	r2,r2,4
41105dd0:	e0bff215 	stw	r2,-56(fp)
41105dd4:	e0fff217 	ldw	r3,-56(fp)
41105dd8:	e0bff517 	ldw	r2,-44(fp)
41105ddc:	18bfd936 	bltu	r3,r2,41105d44 <__reset+0xbb0e5d44>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  if (bVerbose == DDR2_VERBOSE) {
41105de0:	e0bffa17 	ldw	r2,-24(fp)
41105de4:	10800058 	cmpnei	r2,r2,1
41105de8:	1000031e 	bne	r2,zero,41105df8 <DDR2_MEMORY_RANDOM_READ_TEST+0x200>
    printf("..100%%\n");
41105dec:	011044b4 	movhi	r4,16658
41105df0:	212d4704 	addi	r4,r4,-19172
41105df4:	11096480 	call	41109648 <printf>
  }

  if (bSuccess){
41105df8:	e0bfef17 	ldw	r2,-68(fp)
41105dfc:	10002326 	beq	r2,zero,41105e8c <DDR2_MEMORY_RANDOM_READ_TEST+0x294>
    if (bTime == TRUE){
41105e00:	e0bffb17 	ldw	r2,-20(fp)
41105e04:	10800058 	cmpnei	r2,r2,1
41105e08:	10001b1e 	bne	r2,zero,41105e78 <DDR2_MEMORY_RANDOM_READ_TEST+0x280>
41105e0c:	d0e03e17 	ldw	r3,-32520(gp)
      TimeElapsed = alt_nticks() - TimeStart;
41105e10:	e0bff717 	ldw	r2,-36(fp)
41105e14:	1885c83a 	sub	r2,r3,r2
41105e18:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
41105e1c:	e13ff617 	ldw	r4,-40(fp)
41105e20:	11088880 	call	41108888 <__floatsisf>
41105e24:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
41105e28:	d0a03d17 	ldw	r2,-32524(gp)
41105e2c:	1009883a 	mov	r4,r2
41105e30:	11089ac0 	call	411089ac <__floatunsisf>
41105e34:	1007883a 	mov	r3,r2
41105e38:	180b883a 	mov	r5,r3
41105e3c:	8009883a 	mov	r4,r16
41105e40:	110804c0 	call	4110804c <__divsf3>
41105e44:	1007883a 	mov	r3,r2
41105e48:	1805883a 	mov	r2,r3
41105e4c:	1009883a 	mov	r4,r2
41105e50:	11091b40 	call	411091b4 <__extendsfdf2>
41105e54:	1009883a 	mov	r4,r2
41105e58:	180b883a 	mov	r5,r3
41105e5c:	200d883a 	mov	r6,r4
41105e60:	280f883a 	mov	r7,r5
41105e64:	e17ff117 	ldw	r5,-60(fp)
41105e68:	011044b4 	movhi	r4,16658
41105e6c:	212d1f04 	addi	r4,r4,-19332
41105e70:	11096480 	call	41109648 <printf>
41105e74:	00000806 	br	41105e98 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a0>
    } else {
      printf("DDR2 read test pass, size=%d bytes\n", ByteLen);
41105e78:	e17ff117 	ldw	r5,-60(fp)
41105e7c:	011044b4 	movhi	r4,16658
41105e80:	212d6604 	addi	r4,r4,-19048
41105e84:	11096480 	call	41109648 <printf>
41105e88:	00000306 	br	41105e98 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a0>
    }
  } else {
    printf("DDR2 read test fail\n");
41105e8c:	011044b4 	movhi	r4,16658
41105e90:	212d2b04 	addi	r4,r4,-19284
41105e94:	11097640 	call	41109764 <puts>
  }
  printf("\n");
41105e98:	01000284 	movi	r4,10
41105e9c:	110968c0 	call	4110968c <putchar>

  return bSuccess;
41105ea0:	e0bfef17 	ldw	r2,-68(fp)
}
41105ea4:	e6fffc04 	addi	sp,fp,-16
41105ea8:	dfc00517 	ldw	ra,20(sp)
41105eac:	df000417 	ldw	fp,16(sp)
41105eb0:	dcc00317 	ldw	r19,12(sp)
41105eb4:	dc800217 	ldw	r18,8(sp)
41105eb8:	dc400117 	ldw	r17,4(sp)
41105ebc:	dc000017 	ldw	r16,0(sp)
41105ec0:	dec00604 	addi	sp,sp,24
41105ec4:	f800283a 	ret

41105ec8 <xorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
  *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 xorshift32(alt_u32 *State){
41105ec8:	defffd04 	addi	sp,sp,-12
41105ecc:	df000215 	stw	fp,8(sp)
41105ed0:	df000204 	addi	fp,sp,8
41105ed4:	e13fff15 	stw	r4,-4(fp)

  alt_u32 x = *State;
41105ed8:	e0bfff17 	ldw	r2,-4(fp)
41105edc:	10800017 	ldw	r2,0(r2)
41105ee0:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 13;
41105ee4:	e0bffe17 	ldw	r2,-8(fp)
41105ee8:	1004937a 	slli	r2,r2,13
41105eec:	e0fffe17 	ldw	r3,-8(fp)
41105ef0:	1884f03a 	xor	r2,r3,r2
41105ef4:	e0bffe15 	stw	r2,-8(fp)
  x ^= x >> 17;
41105ef8:	e0bffe17 	ldw	r2,-8(fp)
41105efc:	1004d47a 	srli	r2,r2,17
41105f00:	e0fffe17 	ldw	r3,-8(fp)
41105f04:	1884f03a 	xor	r2,r3,r2
41105f08:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 5;
41105f0c:	e0bffe17 	ldw	r2,-8(fp)
41105f10:	1004917a 	slli	r2,r2,5
41105f14:	e0fffe17 	ldw	r3,-8(fp)
41105f18:	1884f03a 	xor	r2,r3,r2
41105f1c:	e0bffe15 	stw	r2,-8(fp)
  *State = x;
41105f20:	e0bfff17 	ldw	r2,-4(fp)
41105f24:	e0fffe17 	ldw	r3,-8(fp)
41105f28:	10c00015 	stw	r3,0(r2)

  return x;
41105f2c:	e0bffe17 	ldw	r2,-8(fp)
}
41105f30:	e037883a 	mov	sp,fp
41105f34:	df000017 	ldw	fp,0(sp)
41105f38:	dec00104 	addi	sp,sp,4
41105f3c:	f800283a 	ret

41105f40 <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
41105f40:	defffb04 	addi	sp,sp,-20
41105f44:	dfc00415 	stw	ra,16(sp)
41105f48:	df000315 	stw	fp,12(sp)
41105f4c:	df000304 	addi	fp,sp,12
41105f50:	e13ffe15 	stw	r4,-8(fp)
41105f54:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
41105f58:	00800044 	movi	r2,1
41105f5c:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
41105f60:	e13fff17 	ldw	r4,-4(fp)
41105f64:	11194c40 	call	411194c4 <alt_msgdma_open>
41105f68:	1007883a 	mov	r3,r2
41105f6c:	e0bffe17 	ldw	r2,-8(fp)
41105f70:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
41105f74:	e0bffe17 	ldw	r2,-8(fp)
41105f78:	10800017 	ldw	r2,0(r2)
41105f7c:	1000011e 	bne	r2,zero,41105f84 <DMA_OPEN_DEVICE+0x44>
    bSuccess = FALSE;
41105f80:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
41105f84:	e0bffd17 	ldw	r2,-12(fp)
}
41105f88:	e037883a 	mov	sp,fp
41105f8c:	dfc00117 	ldw	ra,4(sp)
41105f90:	df000017 	ldw	fp,0(sp)
41105f94:	dec00204 	addi	sp,sp,8
41105f98:	f800283a 	ret

41105f9c <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
41105f9c:	defffc04 	addi	sp,sp,-16
41105fa0:	df000315 	stw	fp,12(sp)
41105fa4:	df000304 	addi	fp,sp,12
41105fa8:	e13ffe15 	stw	r4,-8(fp)
41105fac:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
41105fb0:	00800044 	movi	r2,1
41105fb4:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
41105fb8:	e0bffe17 	ldw	r2,-8(fp)
41105fbc:	10800317 	ldw	r2,12(r2)
41105fc0:	10800104 	addi	r2,r2,4
41105fc4:	e0ffff17 	ldw	r3,-4(fp)
41105fc8:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
41105fcc:	e0bffd17 	ldw	r2,-12(fp)
}
41105fd0:	e037883a 	mov	sp,fp
41105fd4:	df000017 	ldw	fp,0(sp)
41105fd8:	dec00104 	addi	sp,sp,4
41105fdc:	f800283a 	ret

41105fe0 <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
41105fe0:	defffd04 	addi	sp,sp,-12
41105fe4:	df000215 	stw	fp,8(sp)
41105fe8:	df000204 	addi	fp,sp,8
41105fec:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
41105ff0:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
41105ff4:	e0bfff17 	ldw	r2,-4(fp)
41105ff8:	10800317 	ldw	r2,12(r2)
41105ffc:	10800037 	ldwio	r2,0(r2)
41106000:	1080004c 	andi	r2,r2,1
41106004:	10000226 	beq	r2,zero,41106010 <DMA_BUSY+0x30>
    bBusy = TRUE;
41106008:	00800044 	movi	r2,1
4110600c:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
41106010:	e0bffe17 	ldw	r2,-8(fp)
}
41106014:	e037883a 	mov	sp,fp
41106018:	df000017 	ldw	fp,0(sp)
4110601c:	dec00104 	addi	sp,sp,4
41106020:	f800283a 	ret

41106024 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
41106024:	defffd04 	addi	sp,sp,-12
41106028:	df000215 	stw	fp,8(sp)
4110602c:	df000204 	addi	fp,sp,8
41106030:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
41106034:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
41106038:	e0bfff17 	ldw	r2,-4(fp)
4110603c:	10800317 	ldw	r2,12(r2)
41106040:	10800037 	ldwio	r2,0(r2)
41106044:	1080010c 	andi	r2,r2,4
41106048:	10000226 	beq	r2,zero,41106054 <DMA_DESCRIPTOR_BUFFER_FULL+0x30>
    bFull = TRUE;
4110604c:	00800044 	movi	r2,1
41106050:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
41106054:	e0bffe17 	ldw	r2,-8(fp)
}
41106058:	e037883a 	mov	sp,fp
4110605c:	df000017 	ldw	fp,0(sp)
41106060:	dec00104 	addi	sp,sp,4
41106064:	f800283a 	ret

41106068 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
41106068:	defffd04 	addi	sp,sp,-12
4110606c:	df000215 	stw	fp,8(sp)
41106070:	df000204 	addi	fp,sp,8
41106074:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
41106078:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
4110607c:	e0bfff17 	ldw	r2,-4(fp)
41106080:	10800317 	ldw	r2,12(r2)
41106084:	10800037 	ldwio	r2,0(r2)
41106088:	1080008c 	andi	r2,r2,2
4110608c:	10000226 	beq	r2,zero,41106098 <DMA_DESCRIPTOR_BUFFER_EMPTY+0x30>
    bEmpty = TRUE;
41106090:	00800044 	movi	r2,1
41106094:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
41106098:	e0bffe17 	ldw	r2,-8(fp)
}
4110609c:	e037883a 	mov	sp,fp
411060a0:	df000017 	ldw	fp,0(sp)
411060a4:	dec00104 	addi	sp,sp,4
411060a8:	f800283a 	ret

411060ac <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
411060ac:	defffa04 	addi	sp,sp,-24
411060b0:	dfc00515 	stw	ra,20(sp)
411060b4:	df000415 	stw	fp,16(sp)
411060b8:	df000404 	addi	fp,sp,16
411060bc:	e13ffd15 	stw	r4,-12(fp)
411060c0:	e17ffe15 	stw	r5,-8(fp)
411060c4:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
411060c8:	00800044 	movi	r2,1
411060cc:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
411060d0:	e0bffd17 	ldw	r2,-12(fp)
411060d4:	10800317 	ldw	r2,12(r2)
411060d8:	10800104 	addi	r2,r2,4
411060dc:	00c00044 	movi	r3,1
411060e0:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
411060e4:	e0bffe17 	ldw	r2,-8(fp)
411060e8:	10800058 	cmpnei	r2,r2,1
411060ec:	10000f1e 	bne	r2,zero,4110612c <DMA_DISPATCHER_STOP+0x80>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
411060f0:	00000806 	br	41106114 <DMA_DISPATCHER_STOP+0x68>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
411060f4:	e0bfff17 	ldw	r2,-4(fp)
411060f8:	1000031e 	bne	r2,zero,41106108 <DMA_DISPATCHER_STOP+0x5c>
        usleep(1);
411060fc:	01000044 	movi	r4,1
41106100:	11162640 	call	41116264 <usleep>
41106104:	00000306 	br	41106114 <DMA_DISPATCHER_STOP+0x68>
      } else {
        usleep(WaitPeriodUs);
41106108:	e0bfff17 	ldw	r2,-4(fp)
4110610c:	1009883a 	mov	r4,r2
41106110:	11162640 	call	41116264 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
41106114:	e0bffd17 	ldw	r2,-12(fp)
41106118:	10800317 	ldw	r2,12(r2)
4110611c:	10800037 	ldwio	r2,0(r2)
41106120:	1080080c 	andi	r2,r2,32
41106124:	103ff31e 	bne	r2,zero,411060f4 <__reset+0xbb0e60f4>
41106128:	00000206 	br	41106134 <DMA_DISPATCHER_STOP+0x88>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
4110612c:	e0bffc17 	ldw	r2,-16(fp)
41106130:	00000106 	br	41106138 <DMA_DISPATCHER_STOP+0x8c>
  }
  
  return bSuccess;
41106134:	e0bffc17 	ldw	r2,-16(fp)
}
41106138:	e037883a 	mov	sp,fp
4110613c:	dfc00117 	ldw	ra,4(sp)
41106140:	df000017 	ldw	fp,0(sp)
41106144:	dec00204 	addi	sp,sp,8
41106148:	f800283a 	ret

4110614c <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
4110614c:	defffa04 	addi	sp,sp,-24
41106150:	dfc00515 	stw	ra,20(sp)
41106154:	df000415 	stw	fp,16(sp)
41106158:	df000404 	addi	fp,sp,16
4110615c:	e13ffd15 	stw	r4,-12(fp)
41106160:	e17ffe15 	stw	r5,-8(fp)
41106164:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
41106168:	00800044 	movi	r2,1
4110616c:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
41106170:	e0bffd17 	ldw	r2,-12(fp)
41106174:	10800317 	ldw	r2,12(r2)
41106178:	10800104 	addi	r2,r2,4
4110617c:	00c00084 	movi	r3,2
41106180:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
41106184:	e0bffe17 	ldw	r2,-8(fp)
41106188:	10800058 	cmpnei	r2,r2,1
4110618c:	10000f1e 	bne	r2,zero,411061cc <DMA_DISPATCHER_RESET+0x80>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
41106190:	00000806 	br	411061b4 <DMA_DISPATCHER_RESET+0x68>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
41106194:	e0bfff17 	ldw	r2,-4(fp)
41106198:	1000031e 	bne	r2,zero,411061a8 <DMA_DISPATCHER_RESET+0x5c>
        usleep(1);
4110619c:	01000044 	movi	r4,1
411061a0:	11162640 	call	41116264 <usleep>
411061a4:	00000306 	br	411061b4 <DMA_DISPATCHER_RESET+0x68>
      } else {
        usleep(WaitPeriodUs);
411061a8:	e0bfff17 	ldw	r2,-4(fp)
411061ac:	1009883a 	mov	r4,r2
411061b0:	11162640 	call	41116264 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
411061b4:	e0bffd17 	ldw	r2,-12(fp)
411061b8:	10800317 	ldw	r2,12(r2)
411061bc:	10800037 	ldwio	r2,0(r2)
411061c0:	1080100c 	andi	r2,r2,64
411061c4:	103ff31e 	bne	r2,zero,41106194 <__reset+0xbb0e6194>
411061c8:	00000206 	br	411061d4 <DMA_DISPATCHER_RESET+0x88>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
411061cc:	e0bffc17 	ldw	r2,-16(fp)
411061d0:	00000106 	br	411061d8 <DMA_DISPATCHER_RESET+0x8c>
  }
  
  return bSuccess;
411061d4:	e0bffc17 	ldw	r2,-16(fp)
}
411061d8:	e037883a 	mov	sp,fp
411061dc:	dfc00117 	ldw	ra,4(sp)
411061e0:	df000017 	ldw	fp,0(sp)
411061e4:	dec00204 	addi	sp,sp,8
411061e8:	f800283a 	ret

411061ec <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
411061ec:	defff604 	addi	sp,sp,-40
411061f0:	dfc00915 	stw	ra,36(sp)
411061f4:	df000815 	stw	fp,32(sp)
411061f8:	dc000715 	stw	r16,28(sp)
411061fc:	df000804 	addi	fp,sp,32
41106200:	e13ffb15 	stw	r4,-20(fp)
41106204:	e17ffc15 	stw	r5,-16(fp)
41106208:	e1bffd15 	stw	r6,-12(fp)
4110620c:	e1fffe15 	stw	r7,-8(fp)
41106210:	defff804 	addi	sp,sp,-32
41106214:	d8800204 	addi	r2,sp,8
41106218:	108003c4 	addi	r2,r2,15
4110621c:	1004d13a 	srli	r2,r2,4
41106220:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
41106224:	00800044 	movi	r2,1
41106228:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
4110622c:	e0fffc17 	ldw	r3,-16(fp)
41106230:	e13ffd17 	ldw	r4,-12(fp)
41106234:	e0800217 	ldw	r2,8(fp)
41106238:	d8800115 	stw	r2,4(sp)
4110623c:	e0bffe17 	ldw	r2,-8(fp)
41106240:	d8800015 	stw	r2,0(sp)
41106244:	200f883a 	mov	r7,r4
41106248:	180d883a 	mov	r6,r3
4110624c:	800b883a 	mov	r5,r16
41106250:	e13ffb17 	ldw	r4,-20(fp)
41106254:	11185a80 	call	411185a8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
41106258:	10000326 	beq	r2,zero,41106268 <DMA_SINGLE_TRANSFER+0x7c>
    bSuccess = FALSE;
4110625c:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
41106260:	e0bffa17 	ldw	r2,-24(fp)
41106264:	00001e06 	br	411062e0 <DMA_SINGLE_TRANSFER+0xf4>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
41106268:	800b883a 	mov	r5,r16
4110626c:	e13ffb17 	ldw	r4,-20(fp)
41106270:	11196dc0 	call	411196dc <alt_msgdma_standard_descriptor_async_transfer>
41106274:	10000326 	beq	r2,zero,41106284 <DMA_SINGLE_TRANSFER+0x98>
      bSuccess = FALSE;
41106278:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
4110627c:	e0bffa17 	ldw	r2,-24(fp)
41106280:	00001706 	br	411062e0 <DMA_SINGLE_TRANSFER+0xf4>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
41106284:	e0bffa17 	ldw	r2,-24(fp)
41106288:	10800060 	cmpeqi	r2,r2,1
4110628c:	1007883a 	mov	r3,r2
41106290:	e0800317 	ldw	r2,12(fp)
41106294:	10800060 	cmpeqi	r2,r2,1
41106298:	1884703a 	and	r2,r3,r2
4110629c:	10803fcc 	andi	r2,r2,255
411062a0:	10000e26 	beq	r2,zero,411062dc <DMA_SINGLE_TRANSFER+0xf0>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
411062a4:	00000806 	br	411062c8 <DMA_SINGLE_TRANSFER+0xdc>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
411062a8:	e0800417 	ldw	r2,16(fp)
411062ac:	1000031e 	bne	r2,zero,411062bc <DMA_SINGLE_TRANSFER+0xd0>
        usleep(1000);
411062b0:	0100fa04 	movi	r4,1000
411062b4:	11162640 	call	41116264 <usleep>
411062b8:	00000306 	br	411062c8 <DMA_SINGLE_TRANSFER+0xdc>
      } else {
        usleep(WaitPeriodUs);
411062bc:	e0800417 	ldw	r2,16(fp)
411062c0:	1009883a 	mov	r4,r2
411062c4:	11162640 	call	41116264 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
411062c8:	e0bffb17 	ldw	r2,-20(fp)
411062cc:	10800317 	ldw	r2,12(r2)
411062d0:	10800037 	ldwio	r2,0(r2)
411062d4:	1080004c 	andi	r2,r2,1
411062d8:	103ff31e 	bne	r2,zero,411062a8 <__reset+0xbb0e62a8>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
411062dc:	e0bffa17 	ldw	r2,-24(fp)
}
411062e0:	e6ffff04 	addi	sp,fp,-4
411062e4:	dfc00217 	ldw	ra,8(sp)
411062e8:	df000117 	ldw	fp,4(sp)
411062ec:	dc000017 	ldw	r16,0(sp)
411062f0:	dec00304 	addi	sp,sp,12
411062f4:	f800283a 	ret

411062f8 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
411062f8:	defff504 	addi	sp,sp,-44
411062fc:	dfc00a15 	stw	ra,40(sp)
41106300:	df000915 	stw	fp,36(sp)
41106304:	dc000815 	stw	r16,32(sp)
41106308:	df000904 	addi	fp,sp,36
4110630c:	e13ffb15 	stw	r4,-20(fp)
41106310:	e17ffc15 	stw	r5,-16(fp)
41106314:	e1bffd15 	stw	r6,-12(fp)
41106318:	3805883a 	mov	r2,r7
4110631c:	e0bffe05 	stb	r2,-8(fp)
41106320:	defff804 	addi	sp,sp,-32
41106324:	d8800204 	addi	r2,sp,8
41106328:	108003c4 	addi	r2,r2,15
4110632c:	1004d13a 	srli	r2,r2,4
41106330:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
41106334:	00800044 	movi	r2,1
41106338:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
4110633c:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
41106340:	00002506 	br	411063d8 <DMA_MULTIPLE_TRANSFER+0xe0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
41106344:	e0bffa03 	ldbu	r2,-24(fp)
41106348:	1085883a 	add	r2,r2,r2
4110634c:	1085883a 	add	r2,r2,r2
41106350:	1007883a 	mov	r3,r2
41106354:	e0bffc17 	ldw	r2,-16(fp)
41106358:	10c5883a 	add	r2,r2,r3
4110635c:	10800017 	ldw	r2,0(r2)
41106360:	1009883a 	mov	r4,r2
41106364:	e0bffa03 	ldbu	r2,-24(fp)
41106368:	1085883a 	add	r2,r2,r2
4110636c:	1085883a 	add	r2,r2,r2
41106370:	1007883a 	mov	r3,r2
41106374:	e0bffd17 	ldw	r2,-12(fp)
41106378:	10c5883a 	add	r2,r2,r3
4110637c:	10800017 	ldw	r2,0(r2)
41106380:	1007883a 	mov	r3,r2
41106384:	e0800317 	ldw	r2,12(fp)
41106388:	10804034 	orhi	r2,r2,256
4110638c:	d8800115 	stw	r2,4(sp)
41106390:	e0800217 	ldw	r2,8(fp)
41106394:	d8800015 	stw	r2,0(sp)
41106398:	180f883a 	mov	r7,r3
4110639c:	200d883a 	mov	r6,r4
411063a0:	800b883a 	mov	r5,r16
411063a4:	e13ffb17 	ldw	r4,-20(fp)
411063a8:	11185a80 	call	411185a8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
411063ac:	10000226 	beq	r2,zero,411063b8 <DMA_MULTIPLE_TRANSFER+0xc0>
      bSuccess = FALSE;
411063b0:	e03ff915 	stw	zero,-28(fp)
411063b4:	00000506 	br	411063cc <DMA_MULTIPLE_TRANSFER+0xd4>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
411063b8:	800b883a 	mov	r5,r16
411063bc:	e13ffb17 	ldw	r4,-20(fp)
411063c0:	11196dc0 	call	411196dc <alt_msgdma_standard_descriptor_async_transfer>
411063c4:	10000126 	beq	r2,zero,411063cc <DMA_MULTIPLE_TRANSFER+0xd4>
        bSuccess = FALSE;
411063c8:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
411063cc:	e0bffa03 	ldbu	r2,-24(fp)
411063d0:	10800044 	addi	r2,r2,1
411063d4:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
411063d8:	e0bff917 	ldw	r2,-28(fp)
411063dc:	10800060 	cmpeqi	r2,r2,1
411063e0:	1009883a 	mov	r4,r2
411063e4:	e0fffa03 	ldbu	r3,-24(fp)
411063e8:	e0bffe03 	ldbu	r2,-8(fp)
411063ec:	10bfffc4 	addi	r2,r2,-1
411063f0:	1884803a 	cmplt	r2,r3,r2
411063f4:	2084703a 	and	r2,r4,r2
411063f8:	10803fcc 	andi	r2,r2,255
411063fc:	103fd11e 	bne	r2,zero,41106344 <__reset+0xbb0e6344>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
41106400:	e0bff917 	ldw	r2,-28(fp)
41106404:	10800058 	cmpnei	r2,r2,1
41106408:	1000211e 	bne	r2,zero,41106490 <DMA_MULTIPLE_TRANSFER+0x198>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
4110640c:	e0bffa03 	ldbu	r2,-24(fp)
41106410:	1085883a 	add	r2,r2,r2
41106414:	1085883a 	add	r2,r2,r2
41106418:	1007883a 	mov	r3,r2
4110641c:	e0bffc17 	ldw	r2,-16(fp)
41106420:	10c5883a 	add	r2,r2,r3
41106424:	10800017 	ldw	r2,0(r2)
41106428:	1009883a 	mov	r4,r2
4110642c:	e0bffa03 	ldbu	r2,-24(fp)
41106430:	1085883a 	add	r2,r2,r2
41106434:	1085883a 	add	r2,r2,r2
41106438:	1007883a 	mov	r3,r2
4110643c:	e0bffd17 	ldw	r2,-12(fp)
41106440:	10c5883a 	add	r2,r2,r3
41106444:	10800017 	ldw	r2,0(r2)
41106448:	1007883a 	mov	r3,r2
4110644c:	e0800317 	ldw	r2,12(fp)
41106450:	d8800115 	stw	r2,4(sp)
41106454:	e0800217 	ldw	r2,8(fp)
41106458:	d8800015 	stw	r2,0(sp)
4110645c:	180f883a 	mov	r7,r3
41106460:	200d883a 	mov	r6,r4
41106464:	800b883a 	mov	r5,r16
41106468:	e13ffb17 	ldw	r4,-20(fp)
4110646c:	11185a80 	call	411185a8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
41106470:	10000226 	beq	r2,zero,4110647c <DMA_MULTIPLE_TRANSFER+0x184>
      bSuccess = FALSE;
41106474:	e03ff915 	stw	zero,-28(fp)
41106478:	00000506 	br	41106490 <DMA_MULTIPLE_TRANSFER+0x198>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
4110647c:	800b883a 	mov	r5,r16
41106480:	e13ffb17 	ldw	r4,-20(fp)
41106484:	11196dc0 	call	411196dc <alt_msgdma_standard_descriptor_async_transfer>
41106488:	10000126 	beq	r2,zero,41106490 <DMA_MULTIPLE_TRANSFER+0x198>
        bSuccess = FALSE;
4110648c:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
41106490:	e0bff917 	ldw	r2,-28(fp)
41106494:	10800060 	cmpeqi	r2,r2,1
41106498:	1007883a 	mov	r3,r2
4110649c:	e0800417 	ldw	r2,16(fp)
411064a0:	10800060 	cmpeqi	r2,r2,1
411064a4:	1884703a 	and	r2,r3,r2
411064a8:	10803fcc 	andi	r2,r2,255
411064ac:	10000e26 	beq	r2,zero,411064e8 <DMA_MULTIPLE_TRANSFER+0x1f0>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
411064b0:	00000806 	br	411064d4 <DMA_MULTIPLE_TRANSFER+0x1dc>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
411064b4:	e0800517 	ldw	r2,20(fp)
411064b8:	1000031e 	bne	r2,zero,411064c8 <DMA_MULTIPLE_TRANSFER+0x1d0>
    	usleep(1000);
411064bc:	0100fa04 	movi	r4,1000
411064c0:	11162640 	call	41116264 <usleep>
411064c4:	00000306 	br	411064d4 <DMA_MULTIPLE_TRANSFER+0x1dc>
      } else {
    	usleep(WaitPeriodUs);
411064c8:	e0800517 	ldw	r2,20(fp)
411064cc:	1009883a 	mov	r4,r2
411064d0:	11162640 	call	41116264 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
411064d4:	e0bffb17 	ldw	r2,-20(fp)
411064d8:	10800317 	ldw	r2,12(r2)
411064dc:	10800037 	ldwio	r2,0(r2)
411064e0:	1080004c 	andi	r2,r2,1
411064e4:	103ff31e 	bne	r2,zero,411064b4 <__reset+0xbb0e64b4>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
411064e8:	e0bff917 	ldw	r2,-28(fp)
}
411064ec:	e6ffff04 	addi	sp,fp,-4
411064f0:	dfc00217 	ldw	ra,8(sp)
411064f4:	df000117 	ldw	fp,4(sp)
411064f8:	dc000017 	ldw	r16,0(sp)
411064fc:	dec00304 	addi	sp,sp,12
41106500:	f800283a 	ret

41106504 <v_Eth_Hold_Reset>:
 *      Author: rfranca
 */

	#include "eth.h"

	void v_Eth_Hold_Reset(void){
41106504:	defffe04 	addi	sp,sp,-8
41106508:	df000115 	stw	fp,4(sp)
4110650c:	df000104 	addi	fp,sp,4

		alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
41106510:	e03fff15 	stw	zero,-4(fp)
		*pEthAddr = (alt_u32) 0x00000000;
41106514:	e0bfff17 	ldw	r2,-4(fp)
41106518:	10000015 	stw	zero,0(r2)

	}
4110651c:	0001883a 	nop
41106520:	e037883a 	mov	sp,fp
41106524:	df000017 	ldw	fp,0(sp)
41106528:	dec00104 	addi	sp,sp,4
4110652c:	f800283a 	ret

41106530 <v_Eth_Release_Reset>:

	void v_Eth_Release_Reset(void){
41106530:	defffe04 	addi	sp,sp,-8
41106534:	df000115 	stw	fp,4(sp)
41106538:	df000104 	addi	fp,sp,4

		alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
4110653c:	e03fff15 	stw	zero,-4(fp)
		*pEthAddr = (alt_u32) 0x00000001;
41106540:	e0bfff17 	ldw	r2,-4(fp)
41106544:	00c00044 	movi	r3,1
41106548:	10c00015 	stw	r3,0(r2)

	}
4110654c:	0001883a 	nop
41106550:	e037883a 	mov	sp,fp
41106554:	df000017 	ldw	fp,0(sp)
41106558:	dec00104 	addi	sp,sp,4
4110655c:	f800283a 	ret

41106560 <PGEN_WRITE_REG32>:
 */

	#include "pgen.h"
	#include "pgen_registers.h"

	void PGEN_WRITE_REG32(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
41106560:	defffc04 	addi	sp,sp,-16
41106564:	df000315 	stw	fp,12(sp)
41106568:	df000304 	addi	fp,sp,12
4110656c:	2005883a 	mov	r2,r4
41106570:	e17fff15 	stw	r5,-4(fp)
41106574:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
41106578:	e03ffd15 	stw	zero,-12(fp)
		*(pPgenAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
4110657c:	e0bffe03 	ldbu	r2,-8(fp)
41106580:	1085883a 	add	r2,r2,r2
41106584:	1085883a 	add	r2,r2,r2
41106588:	1007883a 	mov	r3,r2
4110658c:	e0bffd17 	ldw	r2,-12(fp)
41106590:	10c5883a 	add	r2,r2,r3
41106594:	e0ffff17 	ldw	r3,-4(fp)
41106598:	10c00015 	stw	r3,0(r2)
	}
4110659c:	0001883a 	nop
411065a0:	e037883a 	mov	sp,fp
411065a4:	df000017 	ldw	fp,0(sp)
411065a8:	dec00104 	addi	sp,sp,4
411065ac:	f800283a 	ret

411065b0 <PGEN_READ_REG32>:

	alt_u32 PGEN_READ_REG32(alt_u8 uc_RegisterAddress){
411065b0:	defffc04 	addi	sp,sp,-16
411065b4:	df000315 	stw	fp,12(sp)
411065b8:	df000304 	addi	fp,sp,12
411065bc:	2005883a 	mov	r2,r4
411065c0:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
411065c4:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
411065c8:	e03ffe15 	stw	zero,-8(fp)
		RegisterValue = *(pPgenAddr + (alt_u32)uc_RegisterAddress);
411065cc:	e0bfff03 	ldbu	r2,-4(fp)
411065d0:	1085883a 	add	r2,r2,r2
411065d4:	1085883a 	add	r2,r2,r2
411065d8:	1007883a 	mov	r3,r2
411065dc:	e0bffe17 	ldw	r2,-8(fp)
411065e0:	10c5883a 	add	r2,r2,r3
411065e4:	10800017 	ldw	r2,0(r2)
411065e8:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
411065ec:	e0bffd17 	ldw	r2,-12(fp)
	}
411065f0:	e037883a 	mov	sp,fp
411065f4:	df000017 	ldw	fp,0(sp)
411065f8:	dec00104 	addi	sp,sp,4
411065fc:	f800283a 	ret

41106600 <b_Pattern_Generator_Write_Register>:

	bool b_Pattern_Generator_Write_Register(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
41106600:	defffb04 	addi	sp,sp,-20
41106604:	dfc00415 	stw	ra,16(sp)
41106608:	df000315 	stw	fp,12(sp)
4110660c:	df000304 	addi	fp,sp,12
41106610:	2005883a 	mov	r2,r4
41106614:	e17fff15 	stw	r5,-4(fp)
41106618:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
4110661c:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x01) {
41106620:	e0bffe03 	ldbu	r2,-8(fp)
41106624:	108000a8 	cmpgeui	r2,r2,2
41106628:	1000061e 	bne	r2,zero,41106644 <b_Pattern_Generator_Write_Register+0x44>
			PGEN_WRITE_REG32(uc_RegisterAddress, ul_RegisterValue);
4110662c:	e0bffe03 	ldbu	r2,-8(fp)
41106630:	e17fff17 	ldw	r5,-4(fp)
41106634:	1009883a 	mov	r4,r2
41106638:	11065600 	call	41106560 <PGEN_WRITE_REG32>
			bSuccess = TRUE;
4110663c:	00800044 	movi	r2,1
41106640:	e0bffd15 	stw	r2,-12(fp)
		}

		return bSuccess;
41106644:	e0bffd17 	ldw	r2,-12(fp)
	}
41106648:	e037883a 	mov	sp,fp
4110664c:	dfc00117 	ldw	ra,4(sp)
41106650:	df000017 	ldw	fp,0(sp)
41106654:	dec00204 	addi	sp,sp,8
41106658:	f800283a 	ret

4110665c <ul_Pattern_Generator_Read_Register>:

	alt_u32 ul_Pattern_Generator_Read_Register(alt_u8 uc_RegisterAddress){
4110665c:	defffc04 	addi	sp,sp,-16
41106660:	dfc00315 	stw	ra,12(sp)
41106664:	df000215 	stw	fp,8(sp)
41106668:	df000204 	addi	fp,sp,8
4110666c:	2005883a 	mov	r2,r4
41106670:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
41106674:	e03ffe15 	stw	zero,-8(fp)

		if (uc_RegisterAddress <= 0x01) {
41106678:	e0bfff03 	ldbu	r2,-4(fp)
4110667c:	108000a8 	cmpgeui	r2,r2,2
41106680:	1000041e 	bne	r2,zero,41106694 <ul_Pattern_Generator_Read_Register+0x38>
			ul_RegisterValue = PGEN_READ_REG32(uc_RegisterAddress);
41106684:	e0bfff03 	ldbu	r2,-4(fp)
41106688:	1009883a 	mov	r4,r2
4110668c:	11065b00 	call	411065b0 <PGEN_READ_REG32>
41106690:	e0bffe15 	stw	r2,-8(fp)
		}

		return ul_RegisterValue;
41106694:	e0bffe17 	ldw	r2,-8(fp)
	}
41106698:	e037883a 	mov	sp,fp
4110669c:	dfc00117 	ldw	ra,4(sp)
411066a0:	df000017 	ldw	fp,0(sp)
411066a4:	dec00204 	addi	sp,sp,8
411066a8:	f800283a 	ret

411066ac <v_Pattern_Generator_Start>:

	void v_Pattern_Generator_Start(void){
411066ac:	defffe04 	addi	sp,sp,-8
411066b0:	dfc00115 	stw	ra,4(sp)
411066b4:	df000015 	stw	fp,0(sp)
411066b8:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_START_CONTROL_BIT_MASK);
411066bc:	01400404 	movi	r5,16
411066c0:	0009883a 	mov	r4,zero
411066c4:	11065600 	call	41106560 <PGEN_WRITE_REG32>

	}
411066c8:	0001883a 	nop
411066cc:	e037883a 	mov	sp,fp
411066d0:	dfc00117 	ldw	ra,4(sp)
411066d4:	df000017 	ldw	fp,0(sp)
411066d8:	dec00204 	addi	sp,sp,8
411066dc:	f800283a 	ret

411066e0 <v_Pattern_Generator_Stop>:

	void v_Pattern_Generator_Stop(void){
411066e0:	defffe04 	addi	sp,sp,-8
411066e4:	dfc00115 	stw	ra,4(sp)
411066e8:	df000015 	stw	fp,0(sp)
411066ec:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_STOP_CONTROL_BIT_MASK);
411066f0:	01400204 	movi	r5,8
411066f4:	0009883a 	mov	r4,zero
411066f8:	11065600 	call	41106560 <PGEN_WRITE_REG32>

	}
411066fc:	0001883a 	nop
41106700:	e037883a 	mov	sp,fp
41106704:	dfc00117 	ldw	ra,4(sp)
41106708:	df000017 	ldw	fp,0(sp)
4110670c:	dec00204 	addi	sp,sp,8
41106710:	f800283a 	ret

41106714 <v_Pattern_Generator_Reset>:

	void v_Pattern_Generator_Reset(void){
41106714:	defffe04 	addi	sp,sp,-8
41106718:	dfc00115 	stw	ra,4(sp)
4110671c:	df000015 	stw	fp,0(sp)
41106720:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_RESET_CONTROL_BIT_MASK);
41106724:	01400104 	movi	r5,4
41106728:	0009883a 	mov	r4,zero
4110672c:	11065600 	call	41106560 <PGEN_WRITE_REG32>

	}
41106730:	0001883a 	nop
41106734:	e037883a 	mov	sp,fp
41106738:	dfc00117 	ldw	ra,4(sp)
4110673c:	df000017 	ldw	fp,0(sp)
41106740:	dec00204 	addi	sp,sp,8
41106744:	f800283a 	ret

41106748 <Pattern_Generator_Status>:

	alt_u32 Pattern_Generator_Status(void){
41106748:	defffc04 	addi	sp,sp,-16
4110674c:	dfc00315 	stw	ra,12(sp)
41106750:	df000215 	stw	fp,8(sp)
41106754:	df000204 	addi	fp,sp,8

		const alt_u32 ul_pgen_mask = PGEN_RESETED_STATUS_BIT_MASK | PGEN_STOPPED_STATUS_BIT_MASK;
41106758:	008000c4 	movi	r2,3
4110675c:	e0bffe15 	stw	r2,-8(fp)
		alt_u32 ul_pgen_status_value = PGEN_READ_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS) & ul_pgen_mask;
41106760:	0009883a 	mov	r4,zero
41106764:	11065b00 	call	411065b0 <PGEN_READ_REG32>
41106768:	1007883a 	mov	r3,r2
4110676c:	e0bffe17 	ldw	r2,-8(fp)
41106770:	1884703a 	and	r2,r3,r2
41106774:	e0bfff15 	stw	r2,-4(fp)

		return ul_pgen_status_value;
41106778:	e0bfff17 	ldw	r2,-4(fp)
	}
4110677c:	e037883a 	mov	sp,fp
41106780:	dfc00117 	ldw	ra,4(sp)
41106784:	df000017 	ldw	fp,0(sp)
41106788:	dec00204 	addi	sp,sp,8
4110678c:	f800283a 	ret

41106790 <Pattern_Generator_Configure_Initial_State>:

	bool Pattern_Generator_Configure_Initial_State(alt_u8 uc_Initial_CCD_ID, alt_u8 uc_Initial_CCD_SIDE, alt_u8 uc_Initial_TimeCode){
41106790:	defff904 	addi	sp,sp,-28
41106794:	dfc00615 	stw	ra,24(sp)
41106798:	df000515 	stw	fp,20(sp)
4110679c:	df000504 	addi	fp,sp,20
411067a0:	2807883a 	mov	r3,r5
411067a4:	3005883a 	mov	r2,r6
411067a8:	e13ffd05 	stb	r4,-12(fp)
411067ac:	e0fffe05 	stb	r3,-8(fp)
411067b0:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
411067b4:	e03ffb15 	stw	zero,-20(fp)

		alt_u32 initial_state_config_value;
		if ((uc_Initial_CCD_ID < 4) && (uc_Initial_CCD_SIDE < 2)) {
411067b8:	e0bffd03 	ldbu	r2,-12(fp)
411067bc:	10800128 	cmpgeui	r2,r2,4
411067c0:	1000101e 	bne	r2,zero,41106804 <Pattern_Generator_Configure_Initial_State+0x74>
411067c4:	e0bffe03 	ldbu	r2,-8(fp)
411067c8:	108000a8 	cmpgeui	r2,r2,2
411067cc:	10000d1e 	bne	r2,zero,41106804 <Pattern_Generator_Configure_Initial_State+0x74>
			initial_state_config_value = (((alt_u32)uc_Initial_CCD_ID) << 9) | (((alt_u32)uc_Initial_CCD_SIDE) << 8) | ((alt_u32)uc_Initial_TimeCode);
411067d0:	e0bffd03 	ldbu	r2,-12(fp)
411067d4:	1006927a 	slli	r3,r2,9
411067d8:	e0bffe03 	ldbu	r2,-8(fp)
411067dc:	1004923a 	slli	r2,r2,8
411067e0:	1886b03a 	or	r3,r3,r2
411067e4:	e0bfff03 	ldbu	r2,-4(fp)
411067e8:	1884b03a 	or	r2,r3,r2
411067ec:	e0bffc15 	stw	r2,-16(fp)
			PGEN_WRITE_REG32(PGEN_INITIAL_TRANSMISSION_STATE_REGISTER_ADDRESS, initial_state_config_value);
411067f0:	e17ffc17 	ldw	r5,-16(fp)
411067f4:	01000044 	movi	r4,1
411067f8:	11065600 	call	41106560 <PGEN_WRITE_REG32>
			bSuccess = TRUE;
411067fc:	00800044 	movi	r2,1
41106800:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
41106804:	e0bffb17 	ldw	r2,-20(fp)
	}
41106808:	e037883a 	mov	sp,fp
4110680c:	dfc00117 	ldw	ra,4(sp)
41106810:	df000017 	ldw	fp,0(sp)
41106814:	dec00204 	addi	sp,sp,8
41106818:	f800283a 	ret

4110681c <POWER_Read>:
#include "sense.h"

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]){
4110681c:	deffef04 	addi	sp,sp,-68
41106820:	dfc01015 	stw	ra,64(sp)
41106824:	df000f15 	stw	fp,60(sp)
41106828:	df000f04 	addi	fp,sp,60
4110682c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
41106830:	00800044 	movi	r2,1
41106834:	e0bff315 	stw	r2,-52(fp)
    int i,c, nPortIndex=0;
41106838:	e03ff615 	stw	zero,-40(fp)
    int szPortNum[] = {POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM};
4110683c:	00800204 	movi	r2,8
41106840:	e0bffc15 	stw	r2,-16(fp)
41106844:	00800104 	movi	r2,4
41106848:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
4110684c:	00800044 	movi	r2,1
41106850:	e0bff715 	stw	r2,-36(fp)
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
41106854:	00800044 	movi	r2,1
41106858:	e0bff815 	stw	r2,-32(fp)
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
4110685c:	e03ff915 	stw	zero,-28(fp)
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
41106860:	e03ff515 	stw	zero,-44(fp)
41106864:	00007106 	br	41106a2c <POWER_Read+0x210>
        NextChannel = 0;
41106868:	e03ffa05 	stb	zero,-24(fp)
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
4110686c:	e0bff517 	ldw	r2,-44(fp)
41106870:	10c03fcc 	andi	r3,r2,255
41106874:	e13ffa03 	ldbu	r4,-24(fp)
41106878:	e0bfff17 	ldw	r2,-4(fp)
4110687c:	d8800115 	stw	r2,4(sp)
41106880:	e0bff917 	ldw	r2,-28(fp)
41106884:	d8800015 	stw	r2,0(sp)
41106888:	e1fff817 	ldw	r7,-32(fp)
4110688c:	e1bff717 	ldw	r6,-36(fp)
41106890:	200b883a 	mov	r5,r4
41106894:	1809883a 	mov	r4,r3
41106898:	1100c9c0 	call	41100c9c <POWER_SPI_RW>
4110689c:	e0bff315 	stw	r2,-52(fp)
        for(i=0;i<szPortNum[c] && bSuccess;i++){
411068a0:	e03ff415 	stw	zero,-48(fp)
411068a4:	00005306 	br	411069f4 <POWER_Read+0x1d8>
            NextChannel = i + 1;
411068a8:	e0bff417 	ldw	r2,-48(fp)
411068ac:	10800044 	addi	r2,r2,1
411068b0:	e0bffa05 	stb	r2,-24(fp)
            bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
411068b4:	e0bff517 	ldw	r2,-44(fp)
411068b8:	10c03fcc 	andi	r3,r2,255
411068bc:	e13ffa03 	ldbu	r4,-24(fp)
411068c0:	e0bffe04 	addi	r2,fp,-8
411068c4:	d8800115 	stw	r2,4(sp)
411068c8:	e0bff917 	ldw	r2,-28(fp)
411068cc:	d8800015 	stw	r2,0(sp)
411068d0:	e1fff817 	ldw	r7,-32(fp)
411068d4:	e1bff717 	ldw	r6,-36(fp)
411068d8:	200b883a 	mov	r5,r4
411068dc:	1809883a 	mov	r4,r3
411068e0:	1100c9c0 	call	41100c9c <POWER_SPI_RW>
411068e4:	e0bff315 	stw	r2,-52(fp)
            if (bSuccess){
411068e8:	e0bff317 	ldw	r2,-52(fp)
411068ec:	10003b26 	beq	r2,zero,411069dc <POWER_Read+0x1c0>
                HEAD = (Value32 >> 30) & 0x03;
411068f0:	e0bffe17 	ldw	r2,-8(fp)
411068f4:	1004d7ba 	srli	r2,r2,30
411068f8:	e0bffa45 	stb	r2,-23(fp)
                Channel = (Value32 >> 1) & 0x07;
411068fc:	e0bffe17 	ldw	r2,-8(fp)
41106900:	1004d07a 	srli	r2,r2,1
41106904:	108001cc 	andi	r2,r2,7
41106908:	e0bffa85 	stb	r2,-22(fp)
                SIGN = (Value32 >> 4 ) & 0x01;
4110690c:	e0bffe17 	ldw	r2,-8(fp)
41106910:	1004d13a 	srli	r2,r2,4
41106914:	1080004c 	andi	r2,r2,1
41106918:	e0bffac5 	stb	r2,-21(fp)
                SGL = (Value32 >> 5 ) & 0x01;
4110691c:	e0bffe17 	ldw	r2,-8(fp)
41106920:	1004d17a 	srli	r2,r2,5
41106924:	1080004c 	andi	r2,r2,1
41106928:	e0bffb05 	stb	r2,-20(fp)
                PARITY = Value32 & 0x01;
4110692c:	e0bffe17 	ldw	r2,-8(fp)
41106930:	1080004c 	andi	r2,r2,1
41106934:	e0bffb45 	stb	r2,-19(fp)
                if (HEAD != 0){
41106938:	e0bffa43 	ldbu	r2,-23(fp)
4110693c:	10000626 	beq	r2,zero,41106958 <POWER_Read+0x13c>
                    printf("[%d]Unexpected HEAD\r\n",i);
41106940:	e17ff417 	ldw	r5,-48(fp)
41106944:	011044b4 	movhi	r4,16658
41106948:	212d6f04 	addi	r4,r4,-19012
4110694c:	11096480 	call	41109648 <printf>
                    bSuccess = FALSE;
41106950:	e03ff315 	stw	zero,-52(fp)
41106954:	00001406 	br	411069a8 <POWER_Read+0x18c>
                }else if (Channel != i){
41106958:	e0fffa83 	ldbu	r3,-22(fp)
4110695c:	e0bff417 	ldw	r2,-48(fp)
41106960:	18800926 	beq	r3,r2,41106988 <POWER_Read+0x16c>
                    printf("[%d]Unexpected Channel. Expected:%d, Read:%d\r\n", i, i, Channel);
41106964:	e0bffa83 	ldbu	r2,-22(fp)
41106968:	100f883a 	mov	r7,r2
4110696c:	e1bff417 	ldw	r6,-48(fp)
41106970:	e17ff417 	ldw	r5,-48(fp)
41106974:	011044b4 	movhi	r4,16658
41106978:	212d7504 	addi	r4,r4,-18988
4110697c:	11096480 	call	41109648 <printf>
                    bSuccess = FALSE;
41106980:	e03ff315 	stw	zero,-52(fp)
41106984:	00000806 	br	411069a8 <POWER_Read+0x18c>
                }else if (SIGN ^ bSIGN){
41106988:	e0fffac3 	ldbu	r3,-21(fp)
4110698c:	e0bff817 	ldw	r2,-32(fp)
41106990:	18800526 	beq	r3,r2,411069a8 <POWER_Read+0x18c>
                    printf("[%d]Unexpected SIGN\r\n",i);
41106994:	e17ff417 	ldw	r5,-48(fp)
41106998:	011044b4 	movhi	r4,16658
4110699c:	212d8104 	addi	r4,r4,-18940
411069a0:	11096480 	call	41109648 <printf>
                    bSuccess = FALSE;
411069a4:	e03ff315 	stw	zero,-52(fp)
                }else if (SGL ^ SGL){
                    printf("[%d]Unexpected SGL\r\n",i);
                    bSuccess = FALSE;
                }
                if (bSuccess)
411069a8:	e0bff317 	ldw	r2,-52(fp)
411069ac:	10000e26 	beq	r2,zero,411069e8 <POWER_Read+0x1cc>
                    szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
411069b0:	e0bff617 	ldw	r2,-40(fp)
411069b4:	10c00044 	addi	r3,r2,1
411069b8:	e0fff615 	stw	r3,-40(fp)
411069bc:	1085883a 	add	r2,r2,r2
411069c0:	1085883a 	add	r2,r2,r2
411069c4:	1007883a 	mov	r3,r2
411069c8:	e0bfff17 	ldw	r2,-4(fp)
411069cc:	10c5883a 	add	r2,r2,r3
411069d0:	e0fffe17 	ldw	r3,-8(fp)
411069d4:	10c00015 	stw	r3,0(r2)
411069d8:	00000306 	br	411069e8 <POWER_Read+0x1cc>
            }else{
                printf("SPI Read Error\r\n");
411069dc:	011044b4 	movhi	r4,16658
411069e0:	212d8704 	addi	r4,r4,-18916
411069e4:	11097640 	call	41109764 <puts>
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
        NextChannel = 0;
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
        for(i=0;i<szPortNum[c] && bSuccess;i++){
411069e8:	e0bff417 	ldw	r2,-48(fp)
411069ec:	10800044 	addi	r2,r2,1
411069f0:	e0bff415 	stw	r2,-48(fp)
411069f4:	e0bff517 	ldw	r2,-44(fp)
411069f8:	1085883a 	add	r2,r2,r2
411069fc:	1085883a 	add	r2,r2,r2
41106a00:	e0fff304 	addi	r3,fp,-52
41106a04:	1885883a 	add	r2,r3,r2
41106a08:	10800904 	addi	r2,r2,36
41106a0c:	10800017 	ldw	r2,0(r2)
41106a10:	e0fff417 	ldw	r3,-48(fp)
41106a14:	1880020e 	bge	r3,r2,41106a20 <POWER_Read+0x204>
41106a18:	e0bff317 	ldw	r2,-52(fp)
41106a1c:	103fa21e 	bne	r2,zero,411068a8 <__reset+0xbb0e68a8>
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
41106a20:	e0bff517 	ldw	r2,-44(fp)
41106a24:	10800044 	addi	r2,r2,1
41106a28:	e0bff515 	stw	r2,-44(fp)
41106a2c:	e0bff517 	ldw	r2,-44(fp)
41106a30:	10800088 	cmpgei	r2,r2,2
41106a34:	1000021e 	bne	r2,zero,41106a40 <POWER_Read+0x224>
41106a38:	e0bff317 	ldw	r2,-52(fp)
41106a3c:	103f8a1e 	bne	r2,zero,41106868 <__reset+0xbb0e6868>
            }else{
                printf("SPI Read Error\r\n");
            }
        } // for i
    } // for c
    return bSuccess;
41106a40:	e0bff317 	ldw	r2,-52(fp)
 }
41106a44:	e037883a 	mov	sp,fp
41106a48:	dfc00117 	ldw	ra,4(sp)
41106a4c:	df000017 	ldw	fp,0(sp)
41106a50:	dec00204 	addi	sp,sp,8
41106a54:	f800283a 	ret

41106a58 <TEMP_Read>:

 bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp){
41106a58:	defff904 	addi	sp,sp,-28
41106a5c:	dfc00615 	stw	ra,24(sp)
41106a60:	df000515 	stw	fp,20(sp)
41106a64:	df000504 	addi	fp,sp,20
41106a68:	e13ffe15 	stw	r4,-8(fp)
41106a6c:	e17fff15 	stw	r5,-4(fp)
        bool bSuccess;
        const alt_u8 DeviceAddr = 0x30;
41106a70:	00800c04 	movi	r2,48
41106a74:	e0bffd85 	stb	r2,-10(fp)
        alt_8 FpgaTemp, BoardTemp;
        char Data;

        // read local temp
        bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00, &Data);
41106a78:	e0bffd83 	ldbu	r2,-10(fp)
41106a7c:	10c03fcc 	andi	r3,r2,255
41106a80:	18c0201c 	xori	r3,r3,128
41106a84:	18ffe004 	addi	r3,r3,-128
41106a88:	e0bffdc4 	addi	r2,fp,-9
41106a8c:	d8800015 	stw	r2,0(sp)
41106a90:	000f883a 	mov	r7,zero
41106a94:	180d883a 	mov	r6,r3
41106a98:	01500034 	movhi	r5,16384
41106a9c:	29425004 	addi	r5,r5,2368
41106aa0:	01100034 	movhi	r4,16384
41106aa4:	21025404 	addi	r4,r4,2384
41106aa8:	11005d00 	call	411005d0 <I2C_Read>
41106aac:	e0bffc15 	stw	r2,-16(fp)
        if (bSuccess)
41106ab0:	e0bffc17 	ldw	r2,-16(fp)
41106ab4:	10000226 	beq	r2,zero,41106ac0 <TEMP_Read+0x68>
            BoardTemp = Data;
41106ab8:	e0bffdc3 	ldbu	r2,-9(fp)
41106abc:	e0bffd45 	stb	r2,-11(fp)

        // read remote temp
        if (bSuccess){
41106ac0:	e0bffc17 	ldw	r2,-16(fp)
41106ac4:	10001226 	beq	r2,zero,41106b10 <TEMP_Read+0xb8>
            bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01, &Data);
41106ac8:	e0bffd83 	ldbu	r2,-10(fp)
41106acc:	10c03fcc 	andi	r3,r2,255
41106ad0:	18c0201c 	xori	r3,r3,128
41106ad4:	18ffe004 	addi	r3,r3,-128
41106ad8:	e0bffdc4 	addi	r2,fp,-9
41106adc:	d8800015 	stw	r2,0(sp)
41106ae0:	01c00044 	movi	r7,1
41106ae4:	180d883a 	mov	r6,r3
41106ae8:	01500034 	movhi	r5,16384
41106aec:	29425004 	addi	r5,r5,2368
41106af0:	01100034 	movhi	r4,16384
41106af4:	21025404 	addi	r4,r4,2384
41106af8:	11005d00 	call	411005d0 <I2C_Read>
41106afc:	e0bffc15 	stw	r2,-16(fp)
            if (bSuccess)
41106b00:	e0bffc17 	ldw	r2,-16(fp)
41106b04:	10000226 	beq	r2,zero,41106b10 <TEMP_Read+0xb8>
                FpgaTemp = Data;
41106b08:	e0bffdc3 	ldbu	r2,-9(fp)
41106b0c:	e0bffd05 	stb	r2,-12(fp)
        }
        //
        if (bSuccess){
41106b10:	e0bffc17 	ldw	r2,-16(fp)
41106b14:	10000626 	beq	r2,zero,41106b30 <TEMP_Read+0xd8>
           *pFpgaTemp = FpgaTemp;
41106b18:	e0bffe17 	ldw	r2,-8(fp)
41106b1c:	e0fffd03 	ldbu	r3,-12(fp)
41106b20:	10c00005 	stb	r3,0(r2)
           *pBoardTemp = BoardTemp;
41106b24:	e0bfff17 	ldw	r2,-4(fp)
41106b28:	e0fffd43 	ldbu	r3,-11(fp)
41106b2c:	10c00005 	stb	r3,0(r2)
        }

        return bSuccess;
41106b30:	e0bffc17 	ldw	r2,-16(fp)
 }
41106b34:	e037883a 	mov	sp,fp
41106b38:	dfc00117 	ldw	ra,4(sp)
41106b3c:	df000017 	ldw	fp,0(sp)
41106b40:	dec00204 	addi	sp,sp,8
41106b44:	f800283a 	ret

41106b48 <sense_log_temp>:


 bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp){
41106b48:	defffb04 	addi	sp,sp,-20
41106b4c:	dfc00415 	stw	ra,16(sp)
41106b50:	df000315 	stw	fp,12(sp)
41106b54:	df000304 	addi	fp,sp,12
41106b58:	e13ffe15 	stw	r4,-8(fp)
41106b5c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	 // show temp
	 bSuccess = TEMP_Read(FpgaTemp, BoardTemp);
41106b60:	e17fff17 	ldw	r5,-4(fp)
41106b64:	e13ffe17 	ldw	r4,-8(fp)
41106b68:	1106a580 	call	41106a58 <TEMP_Read>
41106b6c:	e0bffd15 	stw	r2,-12(fp)

	 return(bSuccess);
41106b70:	e0bffd17 	ldw	r2,-12(fp)
 }
41106b74:	e037883a 	mov	sp,fp
41106b78:	dfc00117 	ldw	ra,4(sp)
41106b7c:	df000017 	ldw	fp,0(sp)
41106b80:	dec00204 	addi	sp,sp,8
41106b84:	f800283a 	ret

41106b88 <sense_log>:


 void sense_log(void){
41106b88:	deff0504 	addi	sp,sp,-1004
41106b8c:	dfc0fa15 	stw	ra,1000(sp)
41106b90:	df00f915 	stw	fp,996(sp)
41106b94:	dd40f815 	stw	r21,992(sp)
41106b98:	dd00f715 	stw	r20,988(sp)
41106b9c:	dcc0f615 	stw	r19,984(sp)
41106ba0:	dc80f515 	stw	r18,980(sp)
41106ba4:	dc40f415 	stw	r17,976(sp)
41106ba8:	dc00f315 	stw	r16,972(sp)
41106bac:	df00f904 	addi	fp,sp,996
 	  bool bSuccess;
 	    int i;
 	    const float fRef = 5.0; // 5.0V
41106bb0:	00902834 	movhi	r2,16544
41106bb4:	e0bf0e15 	stw	r2,-968(fp)
 	    float fVolDrop, fCurrent, fPower, fVol;
 	    alt_u32 szVol[POWER_PORT_NUM];
 	    alt_u32 SIG, MSB, RESULT;
 	    float szRes[] = {0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003};
41106bb8:	008ed174 	movhi	r2,15173
41106bbc:	10a6e984 	addi	r2,r2,-25690
41106bc0:	e0bf2215 	stw	r2,-888(fp)
41106bc4:	008ea0f4 	movhi	r2,14979
41106bc8:	10849bc4 	addi	r2,r2,4719
41106bcc:	e0bf2315 	stw	r2,-884(fp)
41106bd0:	008ed174 	movhi	r2,15173
41106bd4:	10a6e984 	addi	r2,r2,-25690
41106bd8:	e0bf2415 	stw	r2,-880(fp)
41106bdc:	008ed174 	movhi	r2,15173
41106be0:	10a6e984 	addi	r2,r2,-25690
41106be4:	e0bf2515 	stw	r2,-876(fp)
41106be8:	008ed174 	movhi	r2,15173
41106bec:	10a6e984 	addi	r2,r2,-25690
41106bf0:	e0bf2615 	stw	r2,-872(fp)
41106bf4:	008ed174 	movhi	r2,15173
41106bf8:	10a6e984 	addi	r2,r2,-25690
41106bfc:	e0bf2715 	stw	r2,-868(fp)
41106c00:	008ed174 	movhi	r2,15173
41106c04:	10a6e984 	addi	r2,r2,-25690
41106c08:	e0bf2815 	stw	r2,-864(fp)
41106c0c:	008ed174 	movhi	r2,15173
41106c10:	10a6e984 	addi	r2,r2,-25690
41106c14:	e0bf2915 	stw	r2,-860(fp)
41106c18:	008ed174 	movhi	r2,15173
41106c1c:	10a6e984 	addi	r2,r2,-25690
41106c20:	e0bf2a15 	stw	r2,-856(fp)
41106c24:	008ed174 	movhi	r2,15173
41106c28:	10a6e984 	addi	r2,r2,-25690
41106c2c:	e0bf2b15 	stw	r2,-852(fp)
41106c30:	008ed174 	movhi	r2,15173
41106c34:	10a6e984 	addi	r2,r2,-25690
41106c38:	e0bf2c15 	stw	r2,-848(fp)
41106c3c:	008ed174 	movhi	r2,15173
41106c40:	10a6e984 	addi	r2,r2,-25690
41106c44:	e0bf2d15 	stw	r2,-844(fp)
 	    float szRefVol[] = {0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3, 2.5};
41106c48:	008fd9b4 	movhi	r2,16230
41106c4c:	10999984 	addi	r2,r2,26214
41106c50:	e0bf2e15 	stw	r2,-840(fp)
41106c54:	008fd9b4 	movhi	r2,16230
41106c58:	10999984 	addi	r2,r2,26214
41106c5c:	e0bf2f15 	stw	r2,-836(fp)
41106c60:	00901034 	movhi	r2,16448
41106c64:	e0bf3015 	stw	r2,-832(fp)
41106c68:	008fd9b4 	movhi	r2,16230
41106c6c:	10999984 	addi	r2,r2,26214
41106c70:	e0bf3115 	stw	r2,-828(fp)
41106c74:	008ff9b4 	movhi	r2,16358
41106c78:	10999984 	addi	r2,r2,26214
41106c7c:	e0bf3215 	stw	r2,-824(fp)
41106c80:	00900834 	movhi	r2,16416
41106c84:	e0bf3315 	stw	r2,-820(fp)
41106c88:	008ff9b4 	movhi	r2,16358
41106c8c:	10999984 	addi	r2,r2,26214
41106c90:	e0bf3415 	stw	r2,-816(fp)
41106c94:	00900834 	movhi	r2,16416
41106c98:	e0bf3515 	stw	r2,-812(fp)
41106c9c:	008fe374 	movhi	r2,16269
41106ca0:	10b33344 	addi	r2,r2,-13107
41106ca4:	e0bf3615 	stw	r2,-808(fp)
41106ca8:	008fecf4 	movhi	r2,16307
41106cac:	108cccc4 	addi	r2,r2,13107
41106cb0:	e0bf3715 	stw	r2,-804(fp)
41106cb4:	009014f4 	movhi	r2,16467
41106cb8:	108cccc4 	addi	r2,r2,13107
41106cbc:	e0bf3815 	stw	r2,-800(fp)
41106cc0:	00900834 	movhi	r2,16416
41106cc4:	e0bf3915 	stw	r2,-796(fp)
 	    char szName[][64] = {
41106cc8:	009044b4 	movhi	r2,16658
41106ccc:	10adbfc4 	addi	r2,r2,-18689
41106cd0:	e0ff3a04 	addi	r3,fp,-792
41106cd4:	1009883a 	mov	r4,r2
41106cd8:	0080c004 	movi	r2,768
41106cdc:	100d883a 	mov	r6,r2
41106ce0:	200b883a 	mov	r5,r4
41106ce4:	1809883a 	mov	r4,r3
41106ce8:	11094d00 	call	411094d0 <memcpy>
 	        "VCC3P3_HSMC",
 	        "HSMB_VCCIO",
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
41106cec:	e0bf1604 	addi	r2,fp,-936
41106cf0:	1009883a 	mov	r4,r2
41106cf4:	110681c0 	call	4110681c <POWER_Read>
41106cf8:	e0bf0f15 	stw	r2,-964(fp)
 	        if (bSuccess){
41106cfc:	e0bf0f17 	ldw	r2,-964(fp)
41106d00:	10013b26 	beq	r2,zero,411071f0 <sense_log+0x668>
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
41106d04:	e03f0c15 	stw	zero,-976(fp)
41106d08:	00013006 	br	411071cc <sense_log+0x644>
 	                SIG = (szVol[i] >> 29) & 0x01;
41106d0c:	e0bf0c17 	ldw	r2,-976(fp)
41106d10:	1085883a 	add	r2,r2,r2
41106d14:	1085883a 	add	r2,r2,r2
41106d18:	e0ff0c04 	addi	r3,fp,-976
41106d1c:	1885883a 	add	r2,r3,r2
41106d20:	10800a04 	addi	r2,r2,40
41106d24:	10800017 	ldw	r2,0(r2)
41106d28:	1004d77a 	srli	r2,r2,29
41106d2c:	1080004c 	andi	r2,r2,1
41106d30:	e0bf1015 	stw	r2,-960(fp)
 	                MSB = (szVol[i] >> 28) & 0x01;
41106d34:	e0bf0c17 	ldw	r2,-976(fp)
41106d38:	1085883a 	add	r2,r2,r2
41106d3c:	1085883a 	add	r2,r2,r2
41106d40:	e0ff0c04 	addi	r3,fp,-976
41106d44:	1885883a 	add	r2,r3,r2
41106d48:	10800a04 	addi	r2,r2,40
41106d4c:	10800017 	ldw	r2,0(r2)
41106d50:	1004d73a 	srli	r2,r2,28
41106d54:	1080004c 	andi	r2,r2,1
41106d58:	e0bf1115 	stw	r2,-956(fp)
 	                RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
41106d5c:	e0bf0c17 	ldw	r2,-976(fp)
41106d60:	1085883a 	add	r2,r2,r2
41106d64:	1085883a 	add	r2,r2,r2
41106d68:	e0ff0c04 	addi	r3,fp,-976
41106d6c:	1885883a 	add	r2,r3,r2
41106d70:	10800a04 	addi	r2,r2,40
41106d74:	10800017 	ldw	r2,0(r2)
41106d78:	1006d1ba 	srli	r3,r2,6
41106d7c:	00801034 	movhi	r2,64
41106d80:	10bfffc4 	addi	r2,r2,-1
41106d84:	1884703a 	and	r2,r3,r2
41106d88:	e0bf1215 	stw	r2,-952(fp)
 	                if (MSB == 0)
41106d8c:	e0bf1117 	ldw	r2,-956(fp)
41106d90:	1000091e 	bne	r2,zero,41106db8 <sense_log+0x230>
 	                    fVolDrop = (float)(RESULT)/(float)0x400000;
41106d94:	e13f1217 	ldw	r4,-952(fp)
41106d98:	11089ac0 	call	411089ac <__floatunsisf>
41106d9c:	1007883a 	mov	r3,r2
41106da0:	0152a034 	movhi	r5,19072
41106da4:	1809883a 	mov	r4,r3
41106da8:	110804c0 	call	4110804c <__divsf3>
41106dac:	1007883a 	mov	r3,r2
41106db0:	e0ff0d15 	stw	r3,-972(fp)
41106db4:	00000106 	br	41106dbc <sense_log+0x234>
 	                else
 	                    fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
41106db8:	e03f0d15 	stw	zero,-972(fp)
 	                if (SIG && MSB){
41106dbc:	e0bf1017 	ldw	r2,-960(fp)
41106dc0:	10001f26 	beq	r2,zero,41106e40 <sense_log+0x2b8>
41106dc4:	e0bf1117 	ldw	r2,-956(fp)
41106dc8:	10001d26 	beq	r2,zero,41106e40 <sense_log+0x2b8>
 	                    fVol = fRef*0.5;
41106dcc:	014fc034 	movhi	r5,16128
41106dd0:	e13f0e17 	ldw	r4,-968(fp)
41106dd4:	110848c0 	call	4110848c <__mulsf3>
41106dd8:	1007883a 	mov	r3,r2
41106ddc:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
41106de0:	e0ff3a04 	addi	r3,fp,-792
41106de4:	e0bf0c17 	ldw	r2,-976(fp)
41106de8:	100491ba 	slli	r2,r2,6
41106dec:	18a1883a 	add	r16,r3,r2
41106df0:	e0bf0c17 	ldw	r2,-976(fp)
41106df4:	1085883a 	add	r2,r2,r2
41106df8:	1085883a 	add	r2,r2,r2
41106dfc:	e0ff0c04 	addi	r3,fp,-976
41106e00:	1885883a 	add	r2,r3,r2
41106e04:	10800a04 	addi	r2,r2,40
41106e08:	10800017 	ldw	r2,0(r2)
41106e0c:	1023883a 	mov	r17,r2
41106e10:	e13f1317 	ldw	r4,-948(fp)
41106e14:	11091b40 	call	411091b4 <__extendsfdf2>
41106e18:	1009883a 	mov	r4,r2
41106e1c:	180b883a 	mov	r5,r3
41106e20:	d9400015 	stw	r5,0(sp)
41106e24:	200f883a 	mov	r7,r4
41106e28:	880d883a 	mov	r6,r17
41106e2c:	800b883a 	mov	r5,r16
41106e30:	011044b4 	movhi	r4,16658
41106e34:	212d8b04 	addi	r4,r4,-18900
41106e38:	11096480 	call	41109648 <printf>
41106e3c:	0000e006 	br	411071c0 <sense_log+0x638>
 	                }else if (SIG && !MSB){
41106e40:	e0bf1017 	ldw	r2,-960(fp)
41106e44:	10005d26 	beq	r2,zero,41106fbc <sense_log+0x434>
41106e48:	e0bf1117 	ldw	r2,-956(fp)
41106e4c:	10005b1e 	bne	r2,zero,41106fbc <sense_log+0x434>
 	                    fVol = fRef*0.5*fVolDrop;
41106e50:	e13f0e17 	ldw	r4,-968(fp)
41106e54:	11091b40 	call	411091b4 <__extendsfdf2>
41106e58:	1011883a 	mov	r8,r2
41106e5c:	1813883a 	mov	r9,r3
41106e60:	000d883a 	mov	r6,zero
41106e64:	01cff834 	movhi	r7,16352
41106e68:	4009883a 	mov	r4,r8
41106e6c:	480b883a 	mov	r5,r9
41106e70:	1108a9c0 	call	41108a9c <__muldf3>
41106e74:	1009883a 	mov	r4,r2
41106e78:	180b883a 	mov	r5,r3
41106e7c:	2021883a 	mov	r16,r4
41106e80:	2823883a 	mov	r17,r5
41106e84:	e13f0d17 	ldw	r4,-972(fp)
41106e88:	11091b40 	call	411091b4 <__extendsfdf2>
41106e8c:	1009883a 	mov	r4,r2
41106e90:	180b883a 	mov	r5,r3
41106e94:	200d883a 	mov	r6,r4
41106e98:	280f883a 	mov	r7,r5
41106e9c:	8009883a 	mov	r4,r16
41106ea0:	880b883a 	mov	r5,r17
41106ea4:	1108a9c0 	call	41108a9c <__muldf3>
41106ea8:	1009883a 	mov	r4,r2
41106eac:	180b883a 	mov	r5,r3
41106eb0:	2005883a 	mov	r2,r4
41106eb4:	2807883a 	mov	r3,r5
41106eb8:	1009883a 	mov	r4,r2
41106ebc:	180b883a 	mov	r5,r3
41106ec0:	11092c40 	call	411092c4 <__truncdfsf2>
41106ec4:	1007883a 	mov	r3,r2
41106ec8:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
41106ecc:	e0bf0c17 	ldw	r2,-976(fp)
41106ed0:	1085883a 	add	r2,r2,r2
41106ed4:	1085883a 	add	r2,r2,r2
41106ed8:	e0ff0c04 	addi	r3,fp,-976
41106edc:	1885883a 	add	r2,r3,r2
41106ee0:	10801604 	addi	r2,r2,88
41106ee4:	10c00017 	ldw	r3,0(r2)
41106ee8:	180b883a 	mov	r5,r3
41106eec:	e13f0d17 	ldw	r4,-972(fp)
41106ef0:	110804c0 	call	4110804c <__divsf3>
41106ef4:	1007883a 	mov	r3,r2
41106ef8:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
41106efc:	e0bf0c17 	ldw	r2,-976(fp)
41106f00:	1085883a 	add	r2,r2,r2
41106f04:	1085883a 	add	r2,r2,r2
41106f08:	e0ff0c04 	addi	r3,fp,-976
41106f0c:	1885883a 	add	r2,r3,r2
41106f10:	10802204 	addi	r2,r2,136
41106f14:	10c00017 	ldw	r3,0(r2)
41106f18:	e17f1417 	ldw	r5,-944(fp)
41106f1c:	1809883a 	mov	r4,r3
41106f20:	110848c0 	call	4110848c <__mulsf3>
41106f24:	1007883a 	mov	r3,r2
41106f28:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
41106f2c:	e0ff3a04 	addi	r3,fp,-792
41106f30:	e0bf0c17 	ldw	r2,-976(fp)
41106f34:	100491ba 	slli	r2,r2,6
41106f38:	18a9883a 	add	r20,r3,r2
41106f3c:	e0bf0c17 	ldw	r2,-976(fp)
41106f40:	1085883a 	add	r2,r2,r2
41106f44:	1085883a 	add	r2,r2,r2
41106f48:	e0ff0c04 	addi	r3,fp,-976
41106f4c:	1885883a 	add	r2,r3,r2
41106f50:	10800a04 	addi	r2,r2,40
41106f54:	10800017 	ldw	r2,0(r2)
41106f58:	102b883a 	mov	r21,r2
41106f5c:	e13f0d17 	ldw	r4,-972(fp)
41106f60:	11091b40 	call	411091b4 <__extendsfdf2>
41106f64:	1025883a 	mov	r18,r2
41106f68:	1827883a 	mov	r19,r3
41106f6c:	e13f1417 	ldw	r4,-944(fp)
41106f70:	11091b40 	call	411091b4 <__extendsfdf2>
41106f74:	1021883a 	mov	r16,r2
41106f78:	1823883a 	mov	r17,r3
41106f7c:	e13f1517 	ldw	r4,-940(fp)
41106f80:	11091b40 	call	411091b4 <__extendsfdf2>
41106f84:	1009883a 	mov	r4,r2
41106f88:	180b883a 	mov	r5,r3
41106f8c:	d9000315 	stw	r4,12(sp)
41106f90:	d9400415 	stw	r5,16(sp)
41106f94:	dc000115 	stw	r16,4(sp)
41106f98:	dc400215 	stw	r17,8(sp)
41106f9c:	dcc00015 	stw	r19,0(sp)
41106fa0:	900f883a 	mov	r7,r18
41106fa4:	a80d883a 	mov	r6,r21
41106fa8:	a00b883a 	mov	r5,r20
41106fac:	011044b4 	movhi	r4,16658
41106fb0:	212d9404 	addi	r4,r4,-18864
41106fb4:	11096480 	call	41109648 <printf>
41106fb8:	00008106 	br	411071c0 <sense_log+0x638>
 	                }else if (!SIG && MSB){
41106fbc:	e0bf1017 	ldw	r2,-960(fp)
41106fc0:	10005d1e 	bne	r2,zero,41107138 <sense_log+0x5b0>
41106fc4:	e0bf1117 	ldw	r2,-956(fp)
41106fc8:	10005b26 	beq	r2,zero,41107138 <sense_log+0x5b0>
 	                    fVol = fRef*0.5*fVolDrop;
41106fcc:	e13f0e17 	ldw	r4,-968(fp)
41106fd0:	11091b40 	call	411091b4 <__extendsfdf2>
41106fd4:	1011883a 	mov	r8,r2
41106fd8:	1813883a 	mov	r9,r3
41106fdc:	000d883a 	mov	r6,zero
41106fe0:	01cff834 	movhi	r7,16352
41106fe4:	4009883a 	mov	r4,r8
41106fe8:	480b883a 	mov	r5,r9
41106fec:	1108a9c0 	call	41108a9c <__muldf3>
41106ff0:	1009883a 	mov	r4,r2
41106ff4:	180b883a 	mov	r5,r3
41106ff8:	2021883a 	mov	r16,r4
41106ffc:	2823883a 	mov	r17,r5
41107000:	e13f0d17 	ldw	r4,-972(fp)
41107004:	11091b40 	call	411091b4 <__extendsfdf2>
41107008:	1009883a 	mov	r4,r2
4110700c:	180b883a 	mov	r5,r3
41107010:	200d883a 	mov	r6,r4
41107014:	280f883a 	mov	r7,r5
41107018:	8009883a 	mov	r4,r16
4110701c:	880b883a 	mov	r5,r17
41107020:	1108a9c0 	call	41108a9c <__muldf3>
41107024:	1009883a 	mov	r4,r2
41107028:	180b883a 	mov	r5,r3
4110702c:	2005883a 	mov	r2,r4
41107030:	2807883a 	mov	r3,r5
41107034:	1009883a 	mov	r4,r2
41107038:	180b883a 	mov	r5,r3
4110703c:	11092c40 	call	411092c4 <__truncdfsf2>
41107040:	1007883a 	mov	r3,r2
41107044:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
41107048:	e0bf0c17 	ldw	r2,-976(fp)
4110704c:	1085883a 	add	r2,r2,r2
41107050:	1085883a 	add	r2,r2,r2
41107054:	e0ff0c04 	addi	r3,fp,-976
41107058:	1885883a 	add	r2,r3,r2
4110705c:	10801604 	addi	r2,r2,88
41107060:	10c00017 	ldw	r3,0(r2)
41107064:	180b883a 	mov	r5,r3
41107068:	e13f0d17 	ldw	r4,-972(fp)
4110706c:	110804c0 	call	4110804c <__divsf3>
41107070:	1007883a 	mov	r3,r2
41107074:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
41107078:	e0bf0c17 	ldw	r2,-976(fp)
4110707c:	1085883a 	add	r2,r2,r2
41107080:	1085883a 	add	r2,r2,r2
41107084:	e0ff0c04 	addi	r3,fp,-976
41107088:	1885883a 	add	r2,r3,r2
4110708c:	10802204 	addi	r2,r2,136
41107090:	10c00017 	ldw	r3,0(r2)
41107094:	e17f1417 	ldw	r5,-944(fp)
41107098:	1809883a 	mov	r4,r3
4110709c:	110848c0 	call	4110848c <__mulsf3>
411070a0:	1007883a 	mov	r3,r2
411070a4:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
411070a8:	e0ff3a04 	addi	r3,fp,-792
411070ac:	e0bf0c17 	ldw	r2,-976(fp)
411070b0:	100491ba 	slli	r2,r2,6
411070b4:	18a9883a 	add	r20,r3,r2
411070b8:	e0bf0c17 	ldw	r2,-976(fp)
411070bc:	1085883a 	add	r2,r2,r2
411070c0:	1085883a 	add	r2,r2,r2
411070c4:	e0ff0c04 	addi	r3,fp,-976
411070c8:	1885883a 	add	r2,r3,r2
411070cc:	10800a04 	addi	r2,r2,40
411070d0:	10800017 	ldw	r2,0(r2)
411070d4:	102b883a 	mov	r21,r2
411070d8:	e13f0d17 	ldw	r4,-972(fp)
411070dc:	11091b40 	call	411091b4 <__extendsfdf2>
411070e0:	1025883a 	mov	r18,r2
411070e4:	1827883a 	mov	r19,r3
411070e8:	e13f1417 	ldw	r4,-944(fp)
411070ec:	11091b40 	call	411091b4 <__extendsfdf2>
411070f0:	1021883a 	mov	r16,r2
411070f4:	1823883a 	mov	r17,r3
411070f8:	e13f1517 	ldw	r4,-940(fp)
411070fc:	11091b40 	call	411091b4 <__extendsfdf2>
41107100:	1009883a 	mov	r4,r2
41107104:	180b883a 	mov	r5,r3
41107108:	d9000315 	stw	r4,12(sp)
4110710c:	d9400415 	stw	r5,16(sp)
41107110:	dc000115 	stw	r16,4(sp)
41107114:	dc400215 	stw	r17,8(sp)
41107118:	dcc00015 	stw	r19,0(sp)
4110711c:	900f883a 	mov	r7,r18
41107120:	a80d883a 	mov	r6,r21
41107124:	a00b883a 	mov	r5,r20
41107128:	011044b4 	movhi	r4,16658
4110712c:	212da404 	addi	r4,r4,-18800
41107130:	11096480 	call	41109648 <printf>
41107134:	00002206 	br	411071c0 <sense_log+0x638>
 	                }else if (!SIG && !MSB){
41107138:	e0bf1017 	ldw	r2,-960(fp)
4110713c:	1000201e 	bne	r2,zero,411071c0 <sense_log+0x638>
41107140:	e0bf1117 	ldw	r2,-956(fp)
41107144:	10001e1e 	bne	r2,zero,411071c0 <sense_log+0x638>
 	                    fVol = -fRef*0.5;
41107148:	e0bf0e17 	ldw	r2,-968(fp)
4110714c:	10a0003c 	xorhi	r2,r2,32768
41107150:	014fc034 	movhi	r5,16128
41107154:	1009883a 	mov	r4,r2
41107158:	110848c0 	call	4110848c <__mulsf3>
4110715c:	1007883a 	mov	r3,r2
41107160:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
41107164:	e0ff3a04 	addi	r3,fp,-792
41107168:	e0bf0c17 	ldw	r2,-976(fp)
4110716c:	100491ba 	slli	r2,r2,6
41107170:	18a1883a 	add	r16,r3,r2
41107174:	e0bf0c17 	ldw	r2,-976(fp)
41107178:	1085883a 	add	r2,r2,r2
4110717c:	1085883a 	add	r2,r2,r2
41107180:	e0ff0c04 	addi	r3,fp,-976
41107184:	1885883a 	add	r2,r3,r2
41107188:	10800a04 	addi	r2,r2,40
4110718c:	10800017 	ldw	r2,0(r2)
41107190:	1023883a 	mov	r17,r2
41107194:	e13f1317 	ldw	r4,-948(fp)
41107198:	11091b40 	call	411091b4 <__extendsfdf2>
4110719c:	1009883a 	mov	r4,r2
411071a0:	180b883a 	mov	r5,r3
411071a4:	d9400015 	stw	r5,0(sp)
411071a8:	200f883a 	mov	r7,r4
411071ac:	880d883a 	mov	r6,r17
411071b0:	800b883a 	mov	r5,r16
411071b4:	011044b4 	movhi	r4,16658
411071b8:	212db404 	addi	r4,r4,-18736
411071bc:	11096480 	call	41109648 <printf>
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
 	        if (bSuccess){
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
411071c0:	e0bf0c17 	ldw	r2,-976(fp)
411071c4:	10800044 	addi	r2,r2,1
411071c8:	e0bf0c15 	stw	r2,-976(fp)
411071cc:	e0bf0c17 	ldw	r2,-976(fp)
411071d0:	10800308 	cmpgei	r2,r2,12
411071d4:	1000021e 	bne	r2,zero,411071e0 <sense_log+0x658>
411071d8:	e0bf0f17 	ldw	r2,-964(fp)
411071dc:	103ecb1e 	bne	r2,zero,41106d0c <__reset+0xbb0e6d0c>
 	                }else if (!SIG && !MSB){
 	                    fVol = -fRef*0.5;
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
411071e0:	011044b4 	movhi	r4,16658
411071e4:	212dbd04 	addi	r4,r4,-18700
411071e8:	11097640 	call	41109764 <puts>
 	        }else{
 	            printf("Error\r\n");
 	        }
 }
411071ec:	00000306 	br	411071fc <sense_log+0x674>
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
 	        }else{
 	            printf("Error\r\n");
411071f0:	011044b4 	movhi	r4,16658
411071f4:	212dbe04 	addi	r4,r4,-18696
411071f8:	11097640 	call	41109764 <puts>
 	        }
 }
411071fc:	0001883a 	nop
41107200:	e6fffa04 	addi	sp,fp,-24
41107204:	dfc00717 	ldw	ra,28(sp)
41107208:	df000617 	ldw	fp,24(sp)
4110720c:	dd400517 	ldw	r21,20(sp)
41107210:	dd000417 	ldw	r20,16(sp)
41107214:	dcc00317 	ldw	r19,12(sp)
41107218:	dc800217 	ldw	r18,8(sp)
4110721c:	dc400117 	ldw	r17,4(sp)
41107220:	dc000017 	ldw	r16,0(sp)
41107224:	dec00804 	addi	sp,sp,32
41107228:	f800283a 	ret

4110722c <main>:
bool TestDMA_M2_M1(void);

void COMM_WRITE_REG32(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue);
alt_u32 COMM_READ_REG32(alt_u8 uc_RegisterAddress);

int main(void) {
4110722c:	defffa04 	addi	sp,sp,-24
41107230:	dfc00515 	stw	ra,20(sp)
41107234:	df000415 	stw	fp,16(sp)
41107238:	df000404 	addi	fp,sp,16

	alt_8 tempFPGA = 0;
4110723c:	e03fff05 	stb	zero,-4(fp)
	alt_8 tempBoard = 0;
41107240:	e03fff45 	stb	zero,-3(fp)

	printf(" \n Nucleo de Sistemas Eletronicos Embarcados - MebX\n\n");
41107244:	011044b4 	movhi	r4,16658
41107248:	212e8004 	addi	r4,r4,-17920
4110724c:	11097640 	call	41109764 <puts>

	//Configura Display de 7 segmentos
	SSDP_CONFIG(SSDP_NORMAL_MODE);
41107250:	0009883a 	mov	r4,zero
41107254:	11014ec0 	call	411014ec <SSDP_CONFIG>

	printf("Windowing Control Reg: %08x \n", COMM_READ_REG32(0));
41107258:	0009883a 	mov	r4,zero
4110725c:	11073680 	call	41107368 <COMM_READ_REG32>
41107260:	100b883a 	mov	r5,r2
41107264:	011044b4 	movhi	r4,16658
41107268:	212e8e04 	addi	r4,r4,-17864
4110726c:	11096480 	call	41109648 <printf>
	printf("Windowing Status Reg: %08x \n", COMM_READ_REG32(1));
41107270:	01000044 	movi	r4,1
41107274:	11073680 	call	41107368 <COMM_READ_REG32>
41107278:	100b883a 	mov	r5,r2
4110727c:	011044b4 	movhi	r4,16658
41107280:	212e9604 	addi	r4,r4,-17832
41107284:	11096480 	call	41109648 <printf>
	printf("Windowing Buffer Reg: %08x \n", COMM_READ_REG32(6));
41107288:	01000184 	movi	r4,6
4110728c:	11073680 	call	41107368 <COMM_READ_REG32>
41107290:	100b883a 	mov	r5,r2
41107294:	011044b4 	movhi	r4,16658
41107298:	212e9e04 	addi	r4,r4,-17800
4110729c:	11096480 	call	41109648 <printf>

	COMM_WRITE_REG32(0, 0x00000102);
411072a0:	01404084 	movi	r5,258
411072a4:	0009883a 	mov	r4,zero
411072a8:	11073140 	call	41107314 <COMM_WRITE_REG32>

	printf("Windowing Control Reg: %08x \n", COMM_READ_REG32(0));
411072ac:	0009883a 	mov	r4,zero
411072b0:	11073680 	call	41107368 <COMM_READ_REG32>
411072b4:	100b883a 	mov	r5,r2
411072b8:	011044b4 	movhi	r4,16658
411072bc:	212e8e04 	addi	r4,r4,-17864
411072c0:	11096480 	call	41109648 <printf>
//	default:
//		printf("errou \n");
//		break;
//	}

	alt_u32 *pDdr2MemAddr = DDR2_ADDRESS_SPAN_EXTENDER_CNTL_BASE;
411072c4:	00840034 	movhi	r2,4096
411072c8:	10882004 	addi	r2,r2,8320
411072cc:	e0bffc15 	stw	r2,-16(fp)
	*(pDdr2MemAddr) = (alt_u64) 0x0000000100000000;
411072d0:	e0bffc17 	ldw	r2,-16(fp)
411072d4:	10000015 	stw	zero,0(r2)

	alt_u32 Ddr2Base;
	Ddr2Base = DDR2_ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BASE;
411072d8:	e03ffd15 	stw	zero,-12(fp)

	alt_u64 *pDes, *pSrc;
	pDes = (alt_u32 *) Ddr2Base;
411072dc:	e0bffd17 	ldw	r2,-12(fp)
411072e0:	e0bffe15 	stw	r2,-8(fp)
	//pSrc = (alt_u32 *) Ddr2Base;

	//getchar();
	printf("passou 1 \n");
411072e4:	011044b4 	movhi	r4,16658
411072e8:	212ea604 	addi	r4,r4,-17768
411072ec:	11097640 	call	41109764 <puts>

	while (COMM_READ_REG32(6) || 0x00000001){
411072f0:	00000506 	br	41107308 <main+0xdc>
	*pDes = (alt_u64) 0xFFFFFFFFFFFFFFFF;
411072f4:	e0bffe17 	ldw	r2,-8(fp)
411072f8:	00ffffc4 	movi	r3,-1
411072fc:	10c00015 	stw	r3,0(r2)
41107300:	00ffffc4 	movi	r3,-1
41107304:	10c00115 	stw	r3,4(r2)
	//pSrc = (alt_u32 *) Ddr2Base;

	//getchar();
	printf("passou 1 \n");

	while (COMM_READ_REG32(6) || 0x00000001){
41107308:	01000184 	movi	r4,6
4110730c:	11073680 	call	41107368 <COMM_READ_REG32>
41107310:	003ff806 	br	411072f4 <__reset+0xbb0e72f4>

41107314 <COMM_WRITE_REG32>:
	}

	return 0;
}

void COMM_WRITE_REG32(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue) {
41107314:	defffc04 	addi	sp,sp,-16
41107318:	df000315 	stw	fp,12(sp)
4110731c:	df000304 	addi	fp,sp,12
41107320:	2005883a 	mov	r2,r4
41107324:	e17fff15 	stw	r5,-4(fp)
41107328:	e0bffe05 	stb	r2,-8(fp)
	alt_u32 *pPgenAddr = COMM_PEDREIRO_V1_01_CHA_BASE;
4110732c:	00840034 	movhi	r2,4096
41107330:	e0bffd15 	stw	r2,-12(fp)
	*(pPgenAddr + (alt_u32) uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
41107334:	e0bffe03 	ldbu	r2,-8(fp)
41107338:	1085883a 	add	r2,r2,r2
4110733c:	1085883a 	add	r2,r2,r2
41107340:	1007883a 	mov	r3,r2
41107344:	e0bffd17 	ldw	r2,-12(fp)
41107348:	10c5883a 	add	r2,r2,r3
4110734c:	e0ffff17 	ldw	r3,-4(fp)
41107350:	10c00015 	stw	r3,0(r2)
}
41107354:	0001883a 	nop
41107358:	e037883a 	mov	sp,fp
4110735c:	df000017 	ldw	fp,0(sp)
41107360:	dec00104 	addi	sp,sp,4
41107364:	f800283a 	ret

41107368 <COMM_READ_REG32>:

alt_u32 COMM_READ_REG32(alt_u8 uc_RegisterAddress) {
41107368:	defffc04 	addi	sp,sp,-16
4110736c:	df000315 	stw	fp,12(sp)
41107370:	df000304 	addi	fp,sp,12
41107374:	2005883a 	mov	r2,r4
41107378:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 RegisterValue = 0;
4110737c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 *pPgenAddr = COMM_PEDREIRO_V1_01_CHA_BASE;
41107380:	00840034 	movhi	r2,4096
41107384:	e0bffe15 	stw	r2,-8(fp)
	RegisterValue = *(pPgenAddr + (alt_u32) uc_RegisterAddress);
41107388:	e0bfff03 	ldbu	r2,-4(fp)
4110738c:	1085883a 	add	r2,r2,r2
41107390:	1085883a 	add	r2,r2,r2
41107394:	1007883a 	mov	r3,r2
41107398:	e0bffe17 	ldw	r2,-8(fp)
4110739c:	10c5883a 	add	r2,r2,r3
411073a0:	10800017 	ldw	r2,0(r2)
411073a4:	e0bffd15 	stw	r2,-12(fp)
	return RegisterValue;
411073a8:	e0bffd17 	ldw	r2,-12(fp)
}
411073ac:	e037883a 	mov	sp,fp
411073b0:	df000017 	ldw	fp,0(sp)
411073b4:	dec00104 	addi	sp,sp,4
411073b8:	f800283a 	ret

411073bc <TestLeds>:
 usleep(5*1000);
 }
 }
 */

void TestLeds(void) {
411073bc:	defffd04 	addi	sp,sp,-12
411073c0:	dfc00215 	stw	ra,8(sp)
411073c4:	df000115 	stw	fp,4(sp)
411073c8:	df000104 	addi	fp,sp,4
	alt_8 led = 1;
411073cc:	00800044 	movi	r2,1
411073d0:	e0bfff05 	stb	r2,-4(fp)
	//SSDP_CONFIG(SSDP_TEST_MODE);

	alt_8 tempFPGA = 0;
411073d4:	e03fff85 	stb	zero,-2(fp)
	alt_8 tempBoard = 0;
411073d8:	e03fffc5 	stb	zero,-1(fp)

	alt_u8 red = 0;
411073dc:	e03fff45 	stb	zero,-3(fp)

	TEMP_Read(&tempFPGA, &tempBoard);
411073e0:	e0ffffc4 	addi	r3,fp,-1
411073e4:	e0bfff84 	addi	r2,fp,-2
411073e8:	180b883a 	mov	r5,r3
411073ec:	1009883a 	mov	r4,r2
411073f0:	1106a580 	call	41106a58 <TEMP_Read>
	SSDP_UPDATE(tempFPGA);
411073f4:	e0bfff83 	ldbu	r2,-2(fp)
411073f8:	10803fcc 	andi	r2,r2,255
411073fc:	1009883a 	mov	r4,r2
41107400:	11015b40 	call	411015b4 <SSDP_UPDATE>

	while (1) {
		switch (led) {
41107404:	e0bfff07 	ldb	r2,-4(fp)
41107408:	10c00268 	cmpgeui	r3,r2,9
4110740c:	1800ac1e 	bne	r3,zero,411076c0 <TestLeds+0x304>
41107410:	100690ba 	slli	r3,r2,2
41107414:	00904434 	movhi	r2,16656
41107418:	109d0a04 	addi	r2,r2,29736
4110741c:	1885883a 	add	r2,r3,r2
41107420:	10800017 	ldw	r2,0(r2)
41107424:	1000683a 	jmp	r2
41107428:	411076c0 	call	4411076c <__alt_data_end+0x2f1676c>
4110742c:	4110744c 	andi	r4,r8,16849
41107430:	41107498 	cmpnei	r4,r8,16850
41107434:	411074e4 	muli	r4,r8,16851
41107438:	41107530 	cmpltui	r4,r8,16852
4110743c:	4110757c 	xorhi	r4,r8,16853
41107440:	411075c8 	cmpgei	r4,r8,16855
41107444:	41107614 	ori	r4,r8,16856
41107448:	41107660 	cmpeqi	r4,r8,16857
		case 1:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_0_MASK);
4110744c:	01400044 	movi	r5,1
41107450:	01000044 	movi	r4,1
41107454:	1100bb40 	call	41100bb4 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_1_MASK);
41107458:	014000b4 	movhi	r5,2
4110745c:	01000044 	movi	r4,1
41107460:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			if (red) {
41107464:	e0bfff43 	ldbu	r2,-3(fp)
41107468:	10000426 	beq	r2,zero,4110747c <TestLeds+0xc0>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1R_MASK);
4110746c:	01400084 	movi	r5,2
41107470:	01000044 	movi	r4,1
41107474:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
41107478:	00000306 	br	41107488 <TestLeds+0xcc>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1G_MASK);
4110747c:	01400044 	movi	r5,1
41107480:	01000044 	movi	r4,1
41107484:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			}
			led++;
41107488:	e0bfff03 	ldbu	r2,-4(fp)
4110748c:	10800044 	addi	r2,r2,1
41107490:	e0bfff05 	stb	r2,-4(fp)
			break;
41107494:	00008b06 	br	411076c4 <TestLeds+0x308>
		case 2:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_1_MASK);
41107498:	01400084 	movi	r5,2
4110749c:	01000044 	movi	r4,1
411074a0:	1100bb40 	call	41100bb4 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_2_MASK);
411074a4:	01400134 	movhi	r5,4
411074a8:	01000044 	movi	r4,1
411074ac:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			if (red) {
411074b0:	e0bfff43 	ldbu	r2,-3(fp)
411074b4:	10000426 	beq	r2,zero,411074c8 <TestLeds+0x10c>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_2R_MASK);
411074b8:	01400204 	movi	r5,8
411074bc:	01000044 	movi	r4,1
411074c0:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
411074c4:	00000306 	br	411074d4 <TestLeds+0x118>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_2G_MASK);
411074c8:	01400104 	movi	r5,4
411074cc:	01000044 	movi	r4,1
411074d0:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			}
			led++;
411074d4:	e0bfff03 	ldbu	r2,-4(fp)
411074d8:	10800044 	addi	r2,r2,1
411074dc:	e0bfff05 	stb	r2,-4(fp)
			break;
411074e0:	00007806 	br	411076c4 <TestLeds+0x308>
		case 3:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_2_MASK);
411074e4:	01400104 	movi	r5,4
411074e8:	01000044 	movi	r4,1
411074ec:	1100bb40 	call	41100bb4 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_3_MASK);
411074f0:	01400234 	movhi	r5,8
411074f4:	01000044 	movi	r4,1
411074f8:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			if (red) {
411074fc:	e0bfff43 	ldbu	r2,-3(fp)
41107500:	10000426 	beq	r2,zero,41107514 <TestLeds+0x158>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_3R_MASK);
41107504:	01400804 	movi	r5,32
41107508:	01000044 	movi	r4,1
4110750c:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
41107510:	00000306 	br	41107520 <TestLeds+0x164>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_3G_MASK);
41107514:	01400404 	movi	r5,16
41107518:	01000044 	movi	r4,1
4110751c:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			}
			led++;
41107520:	e0bfff03 	ldbu	r2,-4(fp)
41107524:	10800044 	addi	r2,r2,1
41107528:	e0bfff05 	stb	r2,-4(fp)
			break;
4110752c:	00006506 	br	411076c4 <TestLeds+0x308>
		case 4:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_3_MASK);
41107530:	01400204 	movi	r5,8
41107534:	01000044 	movi	r4,1
41107538:	1100bb40 	call	41100bb4 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_4_MASK);
4110753c:	01400434 	movhi	r5,16
41107540:	01000044 	movi	r4,1
41107544:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			if (red) {
41107548:	e0bfff43 	ldbu	r2,-3(fp)
4110754c:	10000426 	beq	r2,zero,41107560 <TestLeds+0x1a4>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_4R_MASK);
41107550:	01402004 	movi	r5,128
41107554:	01000044 	movi	r4,1
41107558:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
4110755c:	00000306 	br	4110756c <TestLeds+0x1b0>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_4G_MASK);
41107560:	01401004 	movi	r5,64
41107564:	01000044 	movi	r4,1
41107568:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			}
			led++;
4110756c:	e0bfff03 	ldbu	r2,-4(fp)
41107570:	10800044 	addi	r2,r2,1
41107574:	e0bfff05 	stb	r2,-4(fp)
			break;
41107578:	00005206 	br	411076c4 <TestLeds+0x308>
		case 5:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_4_MASK);
4110757c:	01400404 	movi	r5,16
41107580:	01000044 	movi	r4,1
41107584:	1100bb40 	call	41100bb4 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_1_MASK);
41107588:	014000b4 	movhi	r5,2
4110758c:	01000044 	movi	r4,1
41107590:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			if (red) {
41107594:	e0bfff43 	ldbu	r2,-3(fp)
41107598:	10000426 	beq	r2,zero,411075ac <TestLeds+0x1f0>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_5R_MASK);
4110759c:	01408004 	movi	r5,512
411075a0:	01000044 	movi	r4,1
411075a4:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
411075a8:	00000306 	br	411075b8 <TestLeds+0x1fc>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_5G_MASK);
411075ac:	01404004 	movi	r5,256
411075b0:	01000044 	movi	r4,1
411075b4:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			}
			led++;
411075b8:	e0bfff03 	ldbu	r2,-4(fp)
411075bc:	10800044 	addi	r2,r2,1
411075c0:	e0bfff05 	stb	r2,-4(fp)
			break;
411075c4:	00003f06 	br	411076c4 <TestLeds+0x308>
		case 6:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_5_MASK);
411075c8:	01400804 	movi	r5,32
411075cc:	01000044 	movi	r4,1
411075d0:	1100bb40 	call	41100bb4 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_2_MASK);
411075d4:	01400134 	movhi	r5,4
411075d8:	01000044 	movi	r4,1
411075dc:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			if (red) {
411075e0:	e0bfff43 	ldbu	r2,-3(fp)
411075e4:	10000426 	beq	r2,zero,411075f8 <TestLeds+0x23c>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_6R_MASK);
411075e8:	01420004 	movi	r5,2048
411075ec:	01000044 	movi	r4,1
411075f0:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
411075f4:	00000306 	br	41107604 <TestLeds+0x248>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_6G_MASK);
411075f8:	01410004 	movi	r5,1024
411075fc:	01000044 	movi	r4,1
41107600:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			}
			led++;
41107604:	e0bfff03 	ldbu	r2,-4(fp)
41107608:	10800044 	addi	r2,r2,1
4110760c:	e0bfff05 	stb	r2,-4(fp)
			break;
41107610:	00002c06 	br	411076c4 <TestLeds+0x308>
		case 7:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_6_MASK);
41107614:	01401004 	movi	r5,64
41107618:	01000044 	movi	r4,1
4110761c:	1100bb40 	call	41100bb4 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_3_MASK);
41107620:	01400234 	movhi	r5,8
41107624:	01000044 	movi	r4,1
41107628:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			if (red) {
4110762c:	e0bfff43 	ldbu	r2,-3(fp)
41107630:	10000426 	beq	r2,zero,41107644 <TestLeds+0x288>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_7R_MASK);
41107634:	01480004 	movi	r5,8192
41107638:	01000044 	movi	r4,1
4110763c:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
41107640:	00000306 	br	41107650 <TestLeds+0x294>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_7G_MASK);
41107644:	01440004 	movi	r5,4096
41107648:	01000044 	movi	r4,1
4110764c:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			}
			led++;
41107650:	e0bfff03 	ldbu	r2,-4(fp)
41107654:	10800044 	addi	r2,r2,1
41107658:	e0bfff05 	stb	r2,-4(fp)
			break;
4110765c:	00001906 	br	411076c4 <TestLeds+0x308>
		case 8:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_7_MASK);
41107660:	01402004 	movi	r5,128
41107664:	01000044 	movi	r4,1
41107668:	1100bb40 	call	41100bb4 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_4_MASK);
4110766c:	01400434 	movhi	r5,16
41107670:	01000044 	movi	r4,1
41107674:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			if (red) {
41107678:	e0bfff43 	ldbu	r2,-3(fp)
4110767c:	10000426 	beq	r2,zero,41107690 <TestLeds+0x2d4>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
41107680:	01600014 	movui	r5,32768
41107684:	01000044 	movi	r4,1
41107688:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
4110768c:	00000306 	br	4110769c <TestLeds+0x2e0>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8G_MASK);
41107690:	01500004 	movi	r5,16384
41107694:	01000044 	movi	r4,1
41107698:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
			}
			led = 1;
4110769c:	00800044 	movi	r2,1
411076a0:	e0bfff05 	stb	r2,-4(fp)
			if (red) {
411076a4:	e0bfff43 	ldbu	r2,-3(fp)
411076a8:	10000226 	beq	r2,zero,411076b4 <TestLeds+0x2f8>
				red = 0;
411076ac:	e03fff45 	stb	zero,-3(fp)
			} else {
				red = 1;
			}
			break;
411076b0:	00000406 	br	411076c4 <TestLeds+0x308>
			}
			led = 1;
			if (red) {
				red = 0;
			} else {
				red = 1;
411076b4:	00800044 	movi	r2,1
411076b8:	e0bfff45 	stb	r2,-3(fp)
			}
			break;
411076bc:	00000106 	br	411076c4 <TestLeds+0x308>
		default:
			led = 0;
411076c0:	e03fff05 	stb	zero,-4(fp)
		}

		usleep(1000 * 1000);
411076c4:	010003f4 	movhi	r4,15
411076c8:	21109004 	addi	r4,r4,16960
411076cc:	11162640 	call	41116264 <usleep>

		LEDS_BOARD_DRIVE(LEDS_OFF, LEDS_BOARD_ALL_MASK);
411076d0:	01403fc4 	movi	r5,255
411076d4:	0009883a 	mov	r4,zero
411076d8:	1100bb40 	call	41100bb4 <LEDS_BOARD_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_ST_ALL_MASK);
411076dc:	014007f4 	movhi	r5,31
411076e0:	0009883a 	mov	r4,zero
411076e4:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_GR_ALL_MASK);
411076e8:	017fffd4 	movui	r5,65535
411076ec:	0009883a 	mov	r4,zero
411076f0:	1100c2c0 	call	41100c2c <LEDS_PAINEL_DRIVE>

		TEMP_Read(&tempFPGA, &tempBoard);
411076f4:	e0ffffc4 	addi	r3,fp,-1
411076f8:	e0bfff84 	addi	r2,fp,-2
411076fc:	180b883a 	mov	r5,r3
41107700:	1009883a 	mov	r4,r2
41107704:	1106a580 	call	41106a58 <TEMP_Read>
		SSDP_UPDATE(tempFPGA);
41107708:	e0bfff83 	ldbu	r2,-2(fp)
4110770c:	10803fcc 	andi	r2,r2,255
41107710:	1009883a 	mov	r4,r2
41107714:	11015b40 	call	411015b4 <SSDP_UPDATE>

	}
41107718:	003f3a06 	br	41107404 <__reset+0xbb0e7404>

4110771c <TestDMA_M1_M2>:
}

bool TestDMA_M1_M2(void) {
4110771c:	deffd404 	addi	sp,sp,-176
41107720:	dfc02b15 	stw	ra,172(sp)
41107724:	df002a15 	stw	fp,168(sp)
41107728:	dc002915 	stw	r16,164(sp)
4110772c:	df002a04 	addi	fp,sp,168

	alt_msgdma_dev *DMADev = NULL;
41107730:	e03fde15 	stw	zero,-136(fp)

	if (DMA_OPEN_DEVICE(&DMADev, (char *) DMA_DDR_M0_CSR_NAME) == FALSE) {
41107734:	e0bfde04 	addi	r2,fp,-136
41107738:	015044b4 	movhi	r5,16658
4110773c:	296ea904 	addi	r5,r5,-17756
41107740:	1009883a 	mov	r4,r2
41107744:	1105f400 	call	41105f40 <DMA_OPEN_DEVICE>
41107748:	1000051e 	bne	r2,zero,41107760 <TestDMA_M1_M2+0x44>
		printf("Error Opening DMA Device");
4110774c:	011044b4 	movhi	r4,16658
41107750:	212eae04 	addi	r4,r4,-17736
41107754:	11096480 	call	41109648 <printf>
		return FALSE;
41107758:	0005883a 	mov	r2,zero
4110775c:	0000cd06 	br	41107a94 <TestDMA_M1_M2+0x378>
	}

	if (DMA_DISPATCHER_RESET(DMADev, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
41107760:	e0bfde17 	ldw	r2,-136(fp)
41107764:	000d883a 	mov	r6,zero
41107768:	01400044 	movi	r5,1
4110776c:	1009883a 	mov	r4,r2
41107770:	110614c0 	call	4110614c <DMA_DISPATCHER_RESET>
41107774:	1000051e 	bne	r2,zero,4110778c <TestDMA_M1_M2+0x70>
		printf("Error Reseting Dispatcher");
41107778:	011044b4 	movhi	r4,16658
4110777c:	212eb504 	addi	r4,r4,-17708
41107780:	11096480 	call	41109648 <printf>
		return FALSE;
41107784:	0005883a 	mov	r2,zero
41107788:	0000c206 	br	41107a94 <TestDMA_M1_M2+0x378>
	}

	alt_u32 control_bits = 0x00000000;
4110778c:	e03fda15 	stw	zero,-152(fp)

	const alt_u32 step = DDR2_M1_MEMORY_SIZE / 16;
41107790:	00820034 	movhi	r2,2048
41107794:	e0bfdb15 	stw	r2,-148(fp)
	alt_u32 read_addr_arr[16];
	read_addr_arr[0] = DDR2_M1_MEMORY_BASE;
41107798:	e03fdf15 	stw	zero,-132(fp)
	read_addr_arr[1] = read_addr_arr[0] + step;
4110779c:	e0ffdf17 	ldw	r3,-132(fp)
411077a0:	e0bfdb17 	ldw	r2,-148(fp)
411077a4:	1885883a 	add	r2,r3,r2
411077a8:	e0bfe015 	stw	r2,-128(fp)
	read_addr_arr[2] = read_addr_arr[1] + step;
411077ac:	e0ffe017 	ldw	r3,-128(fp)
411077b0:	e0bfdb17 	ldw	r2,-148(fp)
411077b4:	1885883a 	add	r2,r3,r2
411077b8:	e0bfe115 	stw	r2,-124(fp)
	read_addr_arr[3] = read_addr_arr[2] + step;
411077bc:	e0ffe117 	ldw	r3,-124(fp)
411077c0:	e0bfdb17 	ldw	r2,-148(fp)
411077c4:	1885883a 	add	r2,r3,r2
411077c8:	e0bfe215 	stw	r2,-120(fp)
	read_addr_arr[4] = read_addr_arr[3] + step;
411077cc:	e0ffe217 	ldw	r3,-120(fp)
411077d0:	e0bfdb17 	ldw	r2,-148(fp)
411077d4:	1885883a 	add	r2,r3,r2
411077d8:	e0bfe315 	stw	r2,-116(fp)
	read_addr_arr[5] = read_addr_arr[4] + step;
411077dc:	e0ffe317 	ldw	r3,-116(fp)
411077e0:	e0bfdb17 	ldw	r2,-148(fp)
411077e4:	1885883a 	add	r2,r3,r2
411077e8:	e0bfe415 	stw	r2,-112(fp)
	read_addr_arr[6] = read_addr_arr[5] + step;
411077ec:	e0ffe417 	ldw	r3,-112(fp)
411077f0:	e0bfdb17 	ldw	r2,-148(fp)
411077f4:	1885883a 	add	r2,r3,r2
411077f8:	e0bfe515 	stw	r2,-108(fp)
	read_addr_arr[7] = read_addr_arr[6] + step;
411077fc:	e0ffe517 	ldw	r3,-108(fp)
41107800:	e0bfdb17 	ldw	r2,-148(fp)
41107804:	1885883a 	add	r2,r3,r2
41107808:	e0bfe615 	stw	r2,-104(fp)
	read_addr_arr[8] = read_addr_arr[7] + step;
4110780c:	e0ffe617 	ldw	r3,-104(fp)
41107810:	e0bfdb17 	ldw	r2,-148(fp)
41107814:	1885883a 	add	r2,r3,r2
41107818:	e0bfe715 	stw	r2,-100(fp)
	read_addr_arr[9] = read_addr_arr[8] + step;
4110781c:	e0ffe717 	ldw	r3,-100(fp)
41107820:	e0bfdb17 	ldw	r2,-148(fp)
41107824:	1885883a 	add	r2,r3,r2
41107828:	e0bfe815 	stw	r2,-96(fp)
	read_addr_arr[10] = read_addr_arr[9] + step;
4110782c:	e0ffe817 	ldw	r3,-96(fp)
41107830:	e0bfdb17 	ldw	r2,-148(fp)
41107834:	1885883a 	add	r2,r3,r2
41107838:	e0bfe915 	stw	r2,-92(fp)
	read_addr_arr[11] = read_addr_arr[10] + step;
4110783c:	e0ffe917 	ldw	r3,-92(fp)
41107840:	e0bfdb17 	ldw	r2,-148(fp)
41107844:	1885883a 	add	r2,r3,r2
41107848:	e0bfea15 	stw	r2,-88(fp)
	read_addr_arr[12] = read_addr_arr[11] + step;
4110784c:	e0ffea17 	ldw	r3,-88(fp)
41107850:	e0bfdb17 	ldw	r2,-148(fp)
41107854:	1885883a 	add	r2,r3,r2
41107858:	e0bfeb15 	stw	r2,-84(fp)
	read_addr_arr[13] = read_addr_arr[12] + step;
4110785c:	e0ffeb17 	ldw	r3,-84(fp)
41107860:	e0bfdb17 	ldw	r2,-148(fp)
41107864:	1885883a 	add	r2,r3,r2
41107868:	e0bfec15 	stw	r2,-80(fp)
	read_addr_arr[14] = read_addr_arr[13] + step;
4110786c:	e0ffec17 	ldw	r3,-80(fp)
41107870:	e0bfdb17 	ldw	r2,-148(fp)
41107874:	1885883a 	add	r2,r3,r2
41107878:	e0bfed15 	stw	r2,-76(fp)
	read_addr_arr[15] = read_addr_arr[14] + step;
4110787c:	e0ffed17 	ldw	r3,-76(fp)
41107880:	e0bfdb17 	ldw	r2,-148(fp)
41107884:	1885883a 	add	r2,r3,r2
41107888:	e0bfee15 	stw	r2,-72(fp)

	alt_u32 write_addr_arr[16];
	write_addr_arr[0] = DDR2_M2_MEMORY_BASE;
4110788c:	00a00034 	movhi	r2,32768
41107890:	e0bfef15 	stw	r2,-68(fp)
	write_addr_arr[1] = write_addr_arr[0] + step;
41107894:	e0ffef17 	ldw	r3,-68(fp)
41107898:	e0bfdb17 	ldw	r2,-148(fp)
4110789c:	1885883a 	add	r2,r3,r2
411078a0:	e0bff015 	stw	r2,-64(fp)
	write_addr_arr[2] = write_addr_arr[1] + step;
411078a4:	e0fff017 	ldw	r3,-64(fp)
411078a8:	e0bfdb17 	ldw	r2,-148(fp)
411078ac:	1885883a 	add	r2,r3,r2
411078b0:	e0bff115 	stw	r2,-60(fp)
	write_addr_arr[3] = write_addr_arr[2] + step;
411078b4:	e0fff117 	ldw	r3,-60(fp)
411078b8:	e0bfdb17 	ldw	r2,-148(fp)
411078bc:	1885883a 	add	r2,r3,r2
411078c0:	e0bff215 	stw	r2,-56(fp)
	write_addr_arr[4] = write_addr_arr[3] + step;
411078c4:	e0fff217 	ldw	r3,-56(fp)
411078c8:	e0bfdb17 	ldw	r2,-148(fp)
411078cc:	1885883a 	add	r2,r3,r2
411078d0:	e0bff315 	stw	r2,-52(fp)
	write_addr_arr[5] = write_addr_arr[4] + step;
411078d4:	e0fff317 	ldw	r3,-52(fp)
411078d8:	e0bfdb17 	ldw	r2,-148(fp)
411078dc:	1885883a 	add	r2,r3,r2
411078e0:	e0bff415 	stw	r2,-48(fp)
	write_addr_arr[6] = write_addr_arr[5] + step;
411078e4:	e0fff417 	ldw	r3,-48(fp)
411078e8:	e0bfdb17 	ldw	r2,-148(fp)
411078ec:	1885883a 	add	r2,r3,r2
411078f0:	e0bff515 	stw	r2,-44(fp)
	write_addr_arr[7] = write_addr_arr[6] + step;
411078f4:	e0fff517 	ldw	r3,-44(fp)
411078f8:	e0bfdb17 	ldw	r2,-148(fp)
411078fc:	1885883a 	add	r2,r3,r2
41107900:	e0bff615 	stw	r2,-40(fp)
	write_addr_arr[8] = write_addr_arr[7] + step;
41107904:	e0fff617 	ldw	r3,-40(fp)
41107908:	e0bfdb17 	ldw	r2,-148(fp)
4110790c:	1885883a 	add	r2,r3,r2
41107910:	e0bff715 	stw	r2,-36(fp)
	write_addr_arr[9] = write_addr_arr[8] + step;
41107914:	e0fff717 	ldw	r3,-36(fp)
41107918:	e0bfdb17 	ldw	r2,-148(fp)
4110791c:	1885883a 	add	r2,r3,r2
41107920:	e0bff815 	stw	r2,-32(fp)
	write_addr_arr[10] = write_addr_arr[9] + step;
41107924:	e0fff817 	ldw	r3,-32(fp)
41107928:	e0bfdb17 	ldw	r2,-148(fp)
4110792c:	1885883a 	add	r2,r3,r2
41107930:	e0bff915 	stw	r2,-28(fp)
	write_addr_arr[11] = write_addr_arr[10] + step;
41107934:	e0fff917 	ldw	r3,-28(fp)
41107938:	e0bfdb17 	ldw	r2,-148(fp)
4110793c:	1885883a 	add	r2,r3,r2
41107940:	e0bffa15 	stw	r2,-24(fp)
	write_addr_arr[12] = write_addr_arr[11] + step;
41107944:	e0fffa17 	ldw	r3,-24(fp)
41107948:	e0bfdb17 	ldw	r2,-148(fp)
4110794c:	1885883a 	add	r2,r3,r2
41107950:	e0bffb15 	stw	r2,-20(fp)
	write_addr_arr[13] = write_addr_arr[12] + step;
41107954:	e0fffb17 	ldw	r3,-20(fp)
41107958:	e0bfdb17 	ldw	r2,-148(fp)
4110795c:	1885883a 	add	r2,r3,r2
41107960:	e0bffc15 	stw	r2,-16(fp)
	write_addr_arr[14] = write_addr_arr[13] + step;
41107964:	e0fffc17 	ldw	r3,-16(fp)
41107968:	e0bfdb17 	ldw	r2,-148(fp)
4110796c:	1885883a 	add	r2,r3,r2
41107970:	e0bffd15 	stw	r2,-12(fp)
	write_addr_arr[15] = write_addr_arr[14] + step;
41107974:	e0fffd17 	ldw	r3,-12(fp)
41107978:	e0bfdb17 	ldw	r2,-148(fp)
4110797c:	1885883a 	add	r2,r3,r2
41107980:	e0bffe15 	stw	r2,-8(fp)

	DDR2_MEMORY_RANDOM_WRITE_TEST(DDR2_M1_ID, DDR2_VERBOSE, DDR2_TIME);
41107984:	01800044 	movi	r6,1
41107988:	01400044 	movi	r5,1
4110798c:	01000044 	movi	r4,1
41107990:	11059180 	call	41105918 <DDR2_MEMORY_RANDOM_WRITE_TEST>

	int TimeStart, TimeElapsed = 0;
41107994:	e03fdc15 	stw	zero,-144(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
41107998:	d0a03e17 	ldw	r2,-32520(gp)

	TimeStart = alt_nticks();
4110799c:	e0bfdd15 	stw	r2,-140(fp)
	if (DMA_MULTIPLE_TRANSFER(DMADev, read_addr_arr, write_addr_arr, 16, step,
411079a0:	e0ffde17 	ldw	r3,-136(fp)
411079a4:	e17fef04 	addi	r5,fp,-68
411079a8:	e13fdf04 	addi	r4,fp,-132
411079ac:	d8000315 	stw	zero,12(sp)
411079b0:	00800044 	movi	r2,1
411079b4:	d8800215 	stw	r2,8(sp)
411079b8:	e0bfda17 	ldw	r2,-152(fp)
411079bc:	d8800115 	stw	r2,4(sp)
411079c0:	e0bfdb17 	ldw	r2,-148(fp)
411079c4:	d8800015 	stw	r2,0(sp)
411079c8:	01c00404 	movi	r7,16
411079cc:	280d883a 	mov	r6,r5
411079d0:	200b883a 	mov	r5,r4
411079d4:	1809883a 	mov	r4,r3
411079d8:	11062f80 	call	411062f8 <DMA_MULTIPLE_TRANSFER>
411079dc:	1000051e 	bne	r2,zero,411079f4 <TestDMA_M1_M2+0x2d8>
			control_bits, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
		printf("Error During DMA Transfer");
411079e0:	011044b4 	movhi	r4,16658
411079e4:	212ebc04 	addi	r4,r4,-17680
411079e8:	11096480 	call	41109648 <printf>
		return FALSE;
411079ec:	0005883a 	mov	r2,zero
411079f0:	00002806 	br	41107a94 <TestDMA_M1_M2+0x378>
411079f4:	d0e03e17 	ldw	r3,-32520(gp)
	}
	TimeElapsed = alt_nticks() - TimeStart;
411079f8:	e0bfdd17 	ldw	r2,-140(fp)
411079fc:	1885c83a 	sub	r2,r3,r2
41107a00:	e0bfdc15 	stw	r2,-144(fp)
	printf("%.3f sec\n", (float) TimeElapsed / (float) alt_ticks_per_second());
41107a04:	e13fdc17 	ldw	r4,-144(fp)
41107a08:	11088880 	call	41108888 <__floatsisf>
41107a0c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
41107a10:	d0a03d17 	ldw	r2,-32524(gp)
41107a14:	1009883a 	mov	r4,r2
41107a18:	11089ac0 	call	411089ac <__floatunsisf>
41107a1c:	1007883a 	mov	r3,r2
41107a20:	180b883a 	mov	r5,r3
41107a24:	8009883a 	mov	r4,r16
41107a28:	110804c0 	call	4110804c <__divsf3>
41107a2c:	1007883a 	mov	r3,r2
41107a30:	1805883a 	mov	r2,r3
41107a34:	1009883a 	mov	r4,r2
41107a38:	11091b40 	call	411091b4 <__extendsfdf2>
41107a3c:	100d883a 	mov	r6,r2
41107a40:	180f883a 	mov	r7,r3
41107a44:	300b883a 	mov	r5,r6
41107a48:	380d883a 	mov	r6,r7
41107a4c:	011044b4 	movhi	r4,16658
41107a50:	212ec304 	addi	r4,r4,-17652
41107a54:	11096480 	call	41109648 <printf>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M2_ID, DDR2_VERBOSE,
41107a58:	01800044 	movi	r6,1
41107a5c:	01400044 	movi	r5,1
41107a60:	01000084 	movi	r4,2
41107a64:	1105bf80 	call	41105bf8 <DDR2_MEMORY_RANDOM_READ_TEST>
41107a68:	10800058 	cmpnei	r2,r2,1
41107a6c:	1000051e 	bne	r2,zero,41107a84 <TestDMA_M1_M2+0x368>
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
41107a70:	011044b4 	movhi	r4,16658
41107a74:	212ec604 	addi	r4,r4,-17640
41107a78:	11097640 	call	41109764 <puts>
	} else {
		printf("Transfer failed\n");
		return FALSE;
	}

	return TRUE;
41107a7c:	00800044 	movi	r2,1
41107a80:	00000406 	br	41107a94 <TestDMA_M1_M2+0x378>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M2_ID, DDR2_VERBOSE,
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
	} else {
		printf("Transfer failed\n");
41107a84:	011044b4 	movhi	r4,16658
41107a88:	212ecd04 	addi	r4,r4,-17612
41107a8c:	11097640 	call	41109764 <puts>
		return FALSE;
41107a90:	0005883a 	mov	r2,zero
	}

	return TRUE;
}
41107a94:	e6ffff04 	addi	sp,fp,-4
41107a98:	dfc00217 	ldw	ra,8(sp)
41107a9c:	df000117 	ldw	fp,4(sp)
41107aa0:	dc000017 	ldw	r16,0(sp)
41107aa4:	dec00304 	addi	sp,sp,12
41107aa8:	f800283a 	ret

41107aac <TestDMA_M2_M1>:

bool TestDMA_M2_M1(void) {
41107aac:	deffd404 	addi	sp,sp,-176
41107ab0:	dfc02b15 	stw	ra,172(sp)
41107ab4:	df002a15 	stw	fp,168(sp)
41107ab8:	dc002915 	stw	r16,164(sp)
41107abc:	df002a04 	addi	fp,sp,168

	alt_msgdma_dev *DMADev = NULL;
41107ac0:	e03fde15 	stw	zero,-136(fp)

	if (DMA_OPEN_DEVICE(&DMADev, (char *) DMA_DDR_M1_CSR_NAME) == FALSE) {
41107ac4:	e0bfde04 	addi	r2,fp,-136
41107ac8:	015044b4 	movhi	r5,16658
41107acc:	296ed104 	addi	r5,r5,-17596
41107ad0:	1009883a 	mov	r4,r2
41107ad4:	1105f400 	call	41105f40 <DMA_OPEN_DEVICE>
41107ad8:	1000051e 	bne	r2,zero,41107af0 <TestDMA_M2_M1+0x44>
		printf("Error Opening DMA Device");
41107adc:	011044b4 	movhi	r4,16658
41107ae0:	212eae04 	addi	r4,r4,-17736
41107ae4:	11096480 	call	41109648 <printf>
		return FALSE;
41107ae8:	0005883a 	mov	r2,zero
41107aec:	0000cd06 	br	41107e24 <TestDMA_M2_M1+0x378>
	}

	if (DMA_DISPATCHER_RESET(DMADev, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
41107af0:	e0bfde17 	ldw	r2,-136(fp)
41107af4:	000d883a 	mov	r6,zero
41107af8:	01400044 	movi	r5,1
41107afc:	1009883a 	mov	r4,r2
41107b00:	110614c0 	call	4110614c <DMA_DISPATCHER_RESET>
41107b04:	1000051e 	bne	r2,zero,41107b1c <TestDMA_M2_M1+0x70>
		printf("Error Reseting Dispatcher");
41107b08:	011044b4 	movhi	r4,16658
41107b0c:	212eb504 	addi	r4,r4,-17708
41107b10:	11096480 	call	41109648 <printf>
		return FALSE;
41107b14:	0005883a 	mov	r2,zero
41107b18:	0000c206 	br	41107e24 <TestDMA_M2_M1+0x378>
	}

	alt_u32 control_bits = 0x00000000;
41107b1c:	e03fda15 	stw	zero,-152(fp)

	const alt_u32 step = DDR2_M2_MEMORY_SIZE / 16;
41107b20:	00820034 	movhi	r2,2048
41107b24:	e0bfdb15 	stw	r2,-148(fp)
	alt_u32 read_addr_arr[16];
	read_addr_arr[0] = DDR2_M2_MEMORY_BASE;
41107b28:	00a00034 	movhi	r2,32768
41107b2c:	e0bfdf15 	stw	r2,-132(fp)
	read_addr_arr[1] = read_addr_arr[0] + step;
41107b30:	e0ffdf17 	ldw	r3,-132(fp)
41107b34:	e0bfdb17 	ldw	r2,-148(fp)
41107b38:	1885883a 	add	r2,r3,r2
41107b3c:	e0bfe015 	stw	r2,-128(fp)
	read_addr_arr[2] = read_addr_arr[1] + step;
41107b40:	e0ffe017 	ldw	r3,-128(fp)
41107b44:	e0bfdb17 	ldw	r2,-148(fp)
41107b48:	1885883a 	add	r2,r3,r2
41107b4c:	e0bfe115 	stw	r2,-124(fp)
	read_addr_arr[3] = read_addr_arr[2] + step;
41107b50:	e0ffe117 	ldw	r3,-124(fp)
41107b54:	e0bfdb17 	ldw	r2,-148(fp)
41107b58:	1885883a 	add	r2,r3,r2
41107b5c:	e0bfe215 	stw	r2,-120(fp)
	read_addr_arr[4] = read_addr_arr[3] + step;
41107b60:	e0ffe217 	ldw	r3,-120(fp)
41107b64:	e0bfdb17 	ldw	r2,-148(fp)
41107b68:	1885883a 	add	r2,r3,r2
41107b6c:	e0bfe315 	stw	r2,-116(fp)
	read_addr_arr[5] = read_addr_arr[4] + step;
41107b70:	e0ffe317 	ldw	r3,-116(fp)
41107b74:	e0bfdb17 	ldw	r2,-148(fp)
41107b78:	1885883a 	add	r2,r3,r2
41107b7c:	e0bfe415 	stw	r2,-112(fp)
	read_addr_arr[6] = read_addr_arr[5] + step;
41107b80:	e0ffe417 	ldw	r3,-112(fp)
41107b84:	e0bfdb17 	ldw	r2,-148(fp)
41107b88:	1885883a 	add	r2,r3,r2
41107b8c:	e0bfe515 	stw	r2,-108(fp)
	read_addr_arr[7] = read_addr_arr[6] + step;
41107b90:	e0ffe517 	ldw	r3,-108(fp)
41107b94:	e0bfdb17 	ldw	r2,-148(fp)
41107b98:	1885883a 	add	r2,r3,r2
41107b9c:	e0bfe615 	stw	r2,-104(fp)
	read_addr_arr[8] = read_addr_arr[7] + step;
41107ba0:	e0ffe617 	ldw	r3,-104(fp)
41107ba4:	e0bfdb17 	ldw	r2,-148(fp)
41107ba8:	1885883a 	add	r2,r3,r2
41107bac:	e0bfe715 	stw	r2,-100(fp)
	read_addr_arr[9] = read_addr_arr[8] + step;
41107bb0:	e0ffe717 	ldw	r3,-100(fp)
41107bb4:	e0bfdb17 	ldw	r2,-148(fp)
41107bb8:	1885883a 	add	r2,r3,r2
41107bbc:	e0bfe815 	stw	r2,-96(fp)
	read_addr_arr[10] = read_addr_arr[9] + step;
41107bc0:	e0ffe817 	ldw	r3,-96(fp)
41107bc4:	e0bfdb17 	ldw	r2,-148(fp)
41107bc8:	1885883a 	add	r2,r3,r2
41107bcc:	e0bfe915 	stw	r2,-92(fp)
	read_addr_arr[11] = read_addr_arr[10] + step;
41107bd0:	e0ffe917 	ldw	r3,-92(fp)
41107bd4:	e0bfdb17 	ldw	r2,-148(fp)
41107bd8:	1885883a 	add	r2,r3,r2
41107bdc:	e0bfea15 	stw	r2,-88(fp)
	read_addr_arr[12] = read_addr_arr[11] + step;
41107be0:	e0ffea17 	ldw	r3,-88(fp)
41107be4:	e0bfdb17 	ldw	r2,-148(fp)
41107be8:	1885883a 	add	r2,r3,r2
41107bec:	e0bfeb15 	stw	r2,-84(fp)
	read_addr_arr[13] = read_addr_arr[12] + step;
41107bf0:	e0ffeb17 	ldw	r3,-84(fp)
41107bf4:	e0bfdb17 	ldw	r2,-148(fp)
41107bf8:	1885883a 	add	r2,r3,r2
41107bfc:	e0bfec15 	stw	r2,-80(fp)
	read_addr_arr[14] = read_addr_arr[13] + step;
41107c00:	e0ffec17 	ldw	r3,-80(fp)
41107c04:	e0bfdb17 	ldw	r2,-148(fp)
41107c08:	1885883a 	add	r2,r3,r2
41107c0c:	e0bfed15 	stw	r2,-76(fp)
	read_addr_arr[15] = read_addr_arr[14] + step;
41107c10:	e0ffed17 	ldw	r3,-76(fp)
41107c14:	e0bfdb17 	ldw	r2,-148(fp)
41107c18:	1885883a 	add	r2,r3,r2
41107c1c:	e0bfee15 	stw	r2,-72(fp)

	alt_u32 write_addr_arr[16];
	write_addr_arr[0] = DDR2_M1_MEMORY_BASE;
41107c20:	e03fef15 	stw	zero,-68(fp)
	write_addr_arr[1] = write_addr_arr[0] + step;
41107c24:	e0ffef17 	ldw	r3,-68(fp)
41107c28:	e0bfdb17 	ldw	r2,-148(fp)
41107c2c:	1885883a 	add	r2,r3,r2
41107c30:	e0bff015 	stw	r2,-64(fp)
	write_addr_arr[2] = write_addr_arr[1] + step;
41107c34:	e0fff017 	ldw	r3,-64(fp)
41107c38:	e0bfdb17 	ldw	r2,-148(fp)
41107c3c:	1885883a 	add	r2,r3,r2
41107c40:	e0bff115 	stw	r2,-60(fp)
	write_addr_arr[3] = write_addr_arr[2] + step;
41107c44:	e0fff117 	ldw	r3,-60(fp)
41107c48:	e0bfdb17 	ldw	r2,-148(fp)
41107c4c:	1885883a 	add	r2,r3,r2
41107c50:	e0bff215 	stw	r2,-56(fp)
	write_addr_arr[4] = write_addr_arr[3] + step;
41107c54:	e0fff217 	ldw	r3,-56(fp)
41107c58:	e0bfdb17 	ldw	r2,-148(fp)
41107c5c:	1885883a 	add	r2,r3,r2
41107c60:	e0bff315 	stw	r2,-52(fp)
	write_addr_arr[5] = write_addr_arr[4] + step;
41107c64:	e0fff317 	ldw	r3,-52(fp)
41107c68:	e0bfdb17 	ldw	r2,-148(fp)
41107c6c:	1885883a 	add	r2,r3,r2
41107c70:	e0bff415 	stw	r2,-48(fp)
	write_addr_arr[6] = write_addr_arr[5] + step;
41107c74:	e0fff417 	ldw	r3,-48(fp)
41107c78:	e0bfdb17 	ldw	r2,-148(fp)
41107c7c:	1885883a 	add	r2,r3,r2
41107c80:	e0bff515 	stw	r2,-44(fp)
	write_addr_arr[7] = write_addr_arr[6] + step;
41107c84:	e0fff517 	ldw	r3,-44(fp)
41107c88:	e0bfdb17 	ldw	r2,-148(fp)
41107c8c:	1885883a 	add	r2,r3,r2
41107c90:	e0bff615 	stw	r2,-40(fp)
	write_addr_arr[8] = write_addr_arr[7] + step;
41107c94:	e0fff617 	ldw	r3,-40(fp)
41107c98:	e0bfdb17 	ldw	r2,-148(fp)
41107c9c:	1885883a 	add	r2,r3,r2
41107ca0:	e0bff715 	stw	r2,-36(fp)
	write_addr_arr[9] = write_addr_arr[8] + step;
41107ca4:	e0fff717 	ldw	r3,-36(fp)
41107ca8:	e0bfdb17 	ldw	r2,-148(fp)
41107cac:	1885883a 	add	r2,r3,r2
41107cb0:	e0bff815 	stw	r2,-32(fp)
	write_addr_arr[10] = write_addr_arr[9] + step;
41107cb4:	e0fff817 	ldw	r3,-32(fp)
41107cb8:	e0bfdb17 	ldw	r2,-148(fp)
41107cbc:	1885883a 	add	r2,r3,r2
41107cc0:	e0bff915 	stw	r2,-28(fp)
	write_addr_arr[11] = write_addr_arr[10] + step;
41107cc4:	e0fff917 	ldw	r3,-28(fp)
41107cc8:	e0bfdb17 	ldw	r2,-148(fp)
41107ccc:	1885883a 	add	r2,r3,r2
41107cd0:	e0bffa15 	stw	r2,-24(fp)
	write_addr_arr[12] = write_addr_arr[11] + step;
41107cd4:	e0fffa17 	ldw	r3,-24(fp)
41107cd8:	e0bfdb17 	ldw	r2,-148(fp)
41107cdc:	1885883a 	add	r2,r3,r2
41107ce0:	e0bffb15 	stw	r2,-20(fp)
	write_addr_arr[13] = write_addr_arr[12] + step;
41107ce4:	e0fffb17 	ldw	r3,-20(fp)
41107ce8:	e0bfdb17 	ldw	r2,-148(fp)
41107cec:	1885883a 	add	r2,r3,r2
41107cf0:	e0bffc15 	stw	r2,-16(fp)
	write_addr_arr[14] = write_addr_arr[13] + step;
41107cf4:	e0fffc17 	ldw	r3,-16(fp)
41107cf8:	e0bfdb17 	ldw	r2,-148(fp)
41107cfc:	1885883a 	add	r2,r3,r2
41107d00:	e0bffd15 	stw	r2,-12(fp)
	write_addr_arr[15] = write_addr_arr[14] + step;
41107d04:	e0fffd17 	ldw	r3,-12(fp)
41107d08:	e0bfdb17 	ldw	r2,-148(fp)
41107d0c:	1885883a 	add	r2,r3,r2
41107d10:	e0bffe15 	stw	r2,-8(fp)

	DDR2_MEMORY_RANDOM_WRITE_TEST(DDR2_M2_ID, DDR2_VERBOSE, DDR2_TIME);
41107d14:	01800044 	movi	r6,1
41107d18:	01400044 	movi	r5,1
41107d1c:	01000084 	movi	r4,2
41107d20:	11059180 	call	41105918 <DDR2_MEMORY_RANDOM_WRITE_TEST>

	int TimeStart, TimeElapsed = 0;
41107d24:	e03fdc15 	stw	zero,-144(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
41107d28:	d0a03e17 	ldw	r2,-32520(gp)

	TimeStart = alt_nticks();
41107d2c:	e0bfdd15 	stw	r2,-140(fp)
	if (DMA_MULTIPLE_TRANSFER(DMADev, read_addr_arr, write_addr_arr, 16, step,
41107d30:	e0ffde17 	ldw	r3,-136(fp)
41107d34:	e17fef04 	addi	r5,fp,-68
41107d38:	e13fdf04 	addi	r4,fp,-132
41107d3c:	d8000315 	stw	zero,12(sp)
41107d40:	00800044 	movi	r2,1
41107d44:	d8800215 	stw	r2,8(sp)
41107d48:	e0bfda17 	ldw	r2,-152(fp)
41107d4c:	d8800115 	stw	r2,4(sp)
41107d50:	e0bfdb17 	ldw	r2,-148(fp)
41107d54:	d8800015 	stw	r2,0(sp)
41107d58:	01c00404 	movi	r7,16
41107d5c:	280d883a 	mov	r6,r5
41107d60:	200b883a 	mov	r5,r4
41107d64:	1809883a 	mov	r4,r3
41107d68:	11062f80 	call	411062f8 <DMA_MULTIPLE_TRANSFER>
41107d6c:	1000051e 	bne	r2,zero,41107d84 <TestDMA_M2_M1+0x2d8>
			control_bits, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
		printf("Error During DMA Transfer");
41107d70:	011044b4 	movhi	r4,16658
41107d74:	212ebc04 	addi	r4,r4,-17680
41107d78:	11096480 	call	41109648 <printf>
		return FALSE;
41107d7c:	0005883a 	mov	r2,zero
41107d80:	00002806 	br	41107e24 <TestDMA_M2_M1+0x378>
41107d84:	d0e03e17 	ldw	r3,-32520(gp)
	}
	TimeElapsed = alt_nticks() - TimeStart;
41107d88:	e0bfdd17 	ldw	r2,-140(fp)
41107d8c:	1885c83a 	sub	r2,r3,r2
41107d90:	e0bfdc15 	stw	r2,-144(fp)
	printf("%.3f sec\n", (float) TimeElapsed / (float) alt_ticks_per_second());
41107d94:	e13fdc17 	ldw	r4,-144(fp)
41107d98:	11088880 	call	41108888 <__floatsisf>
41107d9c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
41107da0:	d0a03d17 	ldw	r2,-32524(gp)
41107da4:	1009883a 	mov	r4,r2
41107da8:	11089ac0 	call	411089ac <__floatunsisf>
41107dac:	1007883a 	mov	r3,r2
41107db0:	180b883a 	mov	r5,r3
41107db4:	8009883a 	mov	r4,r16
41107db8:	110804c0 	call	4110804c <__divsf3>
41107dbc:	1007883a 	mov	r3,r2
41107dc0:	1805883a 	mov	r2,r3
41107dc4:	1009883a 	mov	r4,r2
41107dc8:	11091b40 	call	411091b4 <__extendsfdf2>
41107dcc:	100d883a 	mov	r6,r2
41107dd0:	180f883a 	mov	r7,r3
41107dd4:	300b883a 	mov	r5,r6
41107dd8:	380d883a 	mov	r6,r7
41107ddc:	011044b4 	movhi	r4,16658
41107de0:	212ec304 	addi	r4,r4,-17652
41107de4:	11096480 	call	41109648 <printf>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M1_ID, DDR2_VERBOSE,
41107de8:	01800044 	movi	r6,1
41107dec:	01400044 	movi	r5,1
41107df0:	01000044 	movi	r4,1
41107df4:	1105bf80 	call	41105bf8 <DDR2_MEMORY_RANDOM_READ_TEST>
41107df8:	10800058 	cmpnei	r2,r2,1
41107dfc:	1000051e 	bne	r2,zero,41107e14 <TestDMA_M2_M1+0x368>
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
41107e00:	011044b4 	movhi	r4,16658
41107e04:	212ec604 	addi	r4,r4,-17640
41107e08:	11097640 	call	41109764 <puts>
	} else {
		printf("Transfer failed\n");
		return FALSE;
	}

	return TRUE;
41107e0c:	00800044 	movi	r2,1
41107e10:	00000406 	br	41107e24 <TestDMA_M2_M1+0x378>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M1_ID, DDR2_VERBOSE,
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
	} else {
		printf("Transfer failed\n");
41107e14:	011044b4 	movhi	r4,16658
41107e18:	212ecd04 	addi	r4,r4,-17612
41107e1c:	11097640 	call	41109764 <puts>
		return FALSE;
41107e20:	0005883a 	mov	r2,zero
	}

	return TRUE;
}
41107e24:	e6ffff04 	addi	sp,fp,-4
41107e28:	dfc00217 	ldw	ra,8(sp)
41107e2c:	df000117 	ldw	fp,4(sp)
41107e30:	dc000017 	ldw	r16,0(sp)
41107e34:	dec00304 	addi	sp,sp,12
41107e38:	f800283a 	ret

41107e3c <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
41107e3c:	defffc04 	addi	sp,sp,-16
41107e40:	df000315 	stw	fp,12(sp)
41107e44:	df000304 	addi	fp,sp,12
41107e48:	e13ffd15 	stw	r4,-12(fp)
41107e4c:	e17ffe15 	stw	r5,-8(fp)
41107e50:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
41107e54:	e0bffe17 	ldw	r2,-8(fp)
41107e58:	1085883a 	add	r2,r2,r2
41107e5c:	1085883a 	add	r2,r2,r2
41107e60:	1007883a 	mov	r3,r2
41107e64:	e0bffd17 	ldw	r2,-12(fp)
41107e68:	1885883a 	add	r2,r3,r2
41107e6c:	1007883a 	mov	r3,r2
41107e70:	e0bfff17 	ldw	r2,-4(fp)
41107e74:	18800035 	stwio	r2,0(r3)
	return 1;
41107e78:	00800044 	movi	r2,1

}
41107e7c:	e037883a 	mov	sp,fp
41107e80:	df000017 	ldw	fp,0(sp)
41107e84:	dec00104 	addi	sp,sp,4
41107e88:	f800283a 	ret

41107e8c <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
41107e8c:	defffc04 	addi	sp,sp,-16
41107e90:	df000315 	stw	fp,12(sp)
41107e94:	df000304 	addi	fp,sp,12
41107e98:	e13ffd15 	stw	r4,-12(fp)
41107e9c:	e17ffe15 	stw	r5,-8(fp)
41107ea0:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
41107ea4:	e0bffe17 	ldw	r2,-8(fp)
41107ea8:	1085883a 	add	r2,r2,r2
41107eac:	1085883a 	add	r2,r2,r2
41107eb0:	1007883a 	mov	r3,r2
41107eb4:	e0bffd17 	ldw	r2,-12(fp)
41107eb8:	1885883a 	add	r2,r3,r2
41107ebc:	10c00037 	ldwio	r3,0(r2)
41107ec0:	e0bfff17 	ldw	r2,-4(fp)
41107ec4:	10c00015 	stw	r3,0(r2)
	return 1;
41107ec8:	00800044 	movi	r2,1

}
41107ecc:	e037883a 	mov	sp,fp
41107ed0:	df000017 	ldw	fp,0(sp)
41107ed4:	dec00104 	addi	sp,sp,4
41107ed8:	f800283a 	ret

41107edc <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
41107edc:	defffa04 	addi	sp,sp,-24
41107ee0:	dfc00515 	stw	ra,20(sp)
41107ee4:	df000415 	stw	fp,16(sp)
41107ee8:	df000404 	addi	fp,sp,16
41107eec:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
41107ef0:	e0bfff17 	ldw	r2,-4(fp)
41107ef4:	1005d1ba 	srai	r2,r2,6
41107ef8:	1080004c 	andi	r2,r2,1
41107efc:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
41107f00:	e0bfff17 	ldw	r2,-4(fp)
41107f04:	1005d17a 	srai	r2,r2,5
41107f08:	1080004c 	andi	r2,r2,1
41107f0c:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
41107f10:	e0bfff17 	ldw	r2,-4(fp)
41107f14:	1005d13a 	srai	r2,r2,4
41107f18:	1080004c 	andi	r2,r2,1
41107f1c:	e0bffe15 	stw	r2,-8(fp)

	printf("-------- link status \n");
41107f20:	011044b4 	movhi	r4,16658
41107f24:	212ed604 	addi	r4,r4,-17576
41107f28:	11097640 	call	41109764 <puts>
	printf("Link started    : %s \n", (started == 1) ? "S" : "N");
41107f2c:	e0bffc17 	ldw	r2,-16(fp)
41107f30:	10800058 	cmpnei	r2,r2,1
41107f34:	1000031e 	bne	r2,zero,41107f44 <_print_codec_status+0x68>
41107f38:	009044b4 	movhi	r2,16658
41107f3c:	10aedc04 	addi	r2,r2,-17552
41107f40:	00000206 	br	41107f4c <_print_codec_status+0x70>
41107f44:	009044b4 	movhi	r2,16658
41107f48:	10aedd04 	addi	r2,r2,-17548
41107f4c:	100b883a 	mov	r5,r2
41107f50:	011044b4 	movhi	r4,16658
41107f54:	212ede04 	addi	r4,r4,-17544
41107f58:	11096480 	call	41109648 <printf>
	printf("Link connecting : %s \n", (connecting == 1) ? "S" : "N");
41107f5c:	e0bffd17 	ldw	r2,-12(fp)
41107f60:	10800058 	cmpnei	r2,r2,1
41107f64:	1000031e 	bne	r2,zero,41107f74 <_print_codec_status+0x98>
41107f68:	009044b4 	movhi	r2,16658
41107f6c:	10aedc04 	addi	r2,r2,-17552
41107f70:	00000206 	br	41107f7c <_print_codec_status+0xa0>
41107f74:	009044b4 	movhi	r2,16658
41107f78:	10aedd04 	addi	r2,r2,-17548
41107f7c:	100b883a 	mov	r5,r2
41107f80:	011044b4 	movhi	r4,16658
41107f84:	212ee404 	addi	r4,r4,-17520
41107f88:	11096480 	call	41109648 <printf>
	printf("Link running    : %s \n", (running == 1) ? "S" : "N");
41107f8c:	e0bffe17 	ldw	r2,-8(fp)
41107f90:	10800058 	cmpnei	r2,r2,1
41107f94:	1000031e 	bne	r2,zero,41107fa4 <_print_codec_status+0xc8>
41107f98:	009044b4 	movhi	r2,16658
41107f9c:	10aedc04 	addi	r2,r2,-17552
41107fa0:	00000206 	br	41107fac <_print_codec_status+0xd0>
41107fa4:	009044b4 	movhi	r2,16658
41107fa8:	10aedd04 	addi	r2,r2,-17548
41107fac:	100b883a 	mov	r5,r2
41107fb0:	011044b4 	movhi	r4,16658
41107fb4:	212eea04 	addi	r4,r4,-17496
41107fb8:	11096480 	call	41109648 <printf>
	printf("--------  \n");
41107fbc:	011044b4 	movhi	r4,16658
41107fc0:	212ef004 	addi	r4,r4,-17472
41107fc4:	11097640 	call	41109764 <puts>
}
41107fc8:	0001883a 	nop
41107fcc:	e037883a 	mov	sp,fp
41107fd0:	dfc00117 	ldw	ra,4(sp)
41107fd4:	df000017 	ldw	fp,0(sp)
41107fd8:	dec00204 	addi	sp,sp,8
41107fdc:	f800283a 	ret

41107fe0 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
41107fe0:	defffb04 	addi	sp,sp,-20
41107fe4:	df000415 	stw	fp,16(sp)
41107fe8:	df000404 	addi	fp,sp,16
41107fec:	e13ffc15 	stw	r4,-16(fp)
41107ff0:	e17ffd15 	stw	r5,-12(fp)
41107ff4:	e1bffe15 	stw	r6,-8(fp)
41107ff8:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
41107ffc:	e0bffc17 	ldw	r2,-16(fp)
41108000:	1005d1ba 	srai	r2,r2,6
41108004:	10c0004c 	andi	r3,r2,1
41108008:	e0bffd17 	ldw	r2,-12(fp)
4110800c:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
41108010:	e0bffc17 	ldw	r2,-16(fp)
41108014:	1005d17a 	srai	r2,r2,5
41108018:	10c0004c 	andi	r3,r2,1
4110801c:	e0bffe17 	ldw	r2,-8(fp)
41108020:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
41108024:	e0bffc17 	ldw	r2,-16(fp)
41108028:	1005d13a 	srai	r2,r2,4
4110802c:	10c0004c 	andi	r3,r2,1
41108030:	e0bfff17 	ldw	r2,-4(fp)
41108034:	10c00015 	stw	r3,0(r2)
}
41108038:	0001883a 	nop
4110803c:	e037883a 	mov	sp,fp
41108040:	df000017 	ldw	fp,0(sp)
41108044:	dec00104 	addi	sp,sp,4
41108048:	f800283a 	ret

4110804c <__divsf3>:
4110804c:	defff504 	addi	sp,sp,-44
41108050:	200cd5fa 	srli	r6,r4,23
41108054:	dcc00415 	stw	r19,16(sp)
41108058:	2026d7fa 	srli	r19,r4,31
4110805c:	00c02034 	movhi	r3,128
41108060:	dd800715 	stw	r22,28(sp)
41108064:	dd000515 	stw	r20,20(sp)
41108068:	dc800315 	stw	r18,12(sp)
4110806c:	18ffffc4 	addi	r3,r3,-1
41108070:	dfc00a15 	stw	ra,40(sp)
41108074:	df000915 	stw	fp,36(sp)
41108078:	ddc00815 	stw	r23,32(sp)
4110807c:	dd400615 	stw	r21,24(sp)
41108080:	dc400215 	stw	r17,8(sp)
41108084:	dc000115 	stw	r16,4(sp)
41108088:	35003fcc 	andi	r20,r6,255
4110808c:	1924703a 	and	r18,r3,r4
41108090:	9d803fcc 	andi	r22,r19,255
41108094:	a0005226 	beq	r20,zero,411081e0 <__divsf3+0x194>
41108098:	00803fc4 	movi	r2,255
4110809c:	a0802e26 	beq	r20,r2,41108158 <__divsf3+0x10c>
411080a0:	91002034 	orhi	r4,r18,128
411080a4:	202490fa 	slli	r18,r4,3
411080a8:	a53fe044 	addi	r20,r20,-127
411080ac:	0021883a 	mov	r16,zero
411080b0:	002f883a 	mov	r23,zero
411080b4:	280cd5fa 	srli	r6,r5,23
411080b8:	282ad7fa 	srli	r21,r5,31
411080bc:	00c02034 	movhi	r3,128
411080c0:	18ffffc4 	addi	r3,r3,-1
411080c4:	31803fcc 	andi	r6,r6,255
411080c8:	1962703a 	and	r17,r3,r5
411080cc:	af003fcc 	andi	fp,r21,255
411080d0:	30004a26 	beq	r6,zero,411081fc <__divsf3+0x1b0>
411080d4:	00803fc4 	movi	r2,255
411080d8:	30804526 	beq	r6,r2,411081f0 <__divsf3+0x1a4>
411080dc:	89402034 	orhi	r5,r17,128
411080e0:	282290fa 	slli	r17,r5,3
411080e4:	31bfe044 	addi	r6,r6,-127
411080e8:	000b883a 	mov	r5,zero
411080ec:	2c20b03a 	or	r16,r5,r16
411080f0:	802090ba 	slli	r16,r16,2
411080f4:	00904474 	movhi	r2,16657
411080f8:	10a04604 	addi	r2,r2,-32488
411080fc:	80a1883a 	add	r16,r16,r2
41108100:	81000017 	ldw	r4,0(r16)
41108104:	9d46f03a 	xor	r3,r19,r21
41108108:	180f883a 	mov	r7,r3
4110810c:	18803fcc 	andi	r2,r3,255
41108110:	a18dc83a 	sub	r6,r20,r6
41108114:	2000683a 	jmp	r4
41108118:	411082fc 	xorhi	r4,r8,16907
4110811c:	41108180 	call	44110818 <__alt_data_end+0x2f16818>
41108120:	411082f0 	cmpltui	r4,r8,16907
41108124:	4110816c 	andhi	r4,r8,16901
41108128:	411082f0 	cmpltui	r4,r8,16907
4110812c:	411082c8 	cmpgei	r4,r8,16907
41108130:	411082f0 	cmpltui	r4,r8,16907
41108134:	4110816c 	andhi	r4,r8,16901
41108138:	41108180 	call	44110818 <__alt_data_end+0x2f16818>
4110813c:	41108180 	call	44110818 <__alt_data_end+0x2f16818>
41108140:	411082c8 	cmpgei	r4,r8,16907
41108144:	4110816c 	andhi	r4,r8,16901
41108148:	411083dc 	xori	r4,r8,16911
4110814c:	411083dc 	xori	r4,r8,16911
41108150:	411083dc 	xori	r4,r8,16911
41108154:	41108390 	cmplti	r4,r8,16910
41108158:	9000581e 	bne	r18,zero,411082bc <__divsf3+0x270>
4110815c:	04000204 	movi	r16,8
41108160:	05c00084 	movi	r23,2
41108164:	003fd306 	br	411080b4 <__reset+0xbb0e80b4>
41108168:	0023883a 	mov	r17,zero
4110816c:	e02d883a 	mov	r22,fp
41108170:	282f883a 	mov	r23,r5
41108174:	00800084 	movi	r2,2
41108178:	b8808f1e 	bne	r23,r2,411083b8 <__divsf3+0x36c>
4110817c:	b005883a 	mov	r2,r22
41108180:	11c0004c 	andi	r7,r2,1
41108184:	013fffc4 	movi	r4,-1
41108188:	000d883a 	mov	r6,zero
4110818c:	21003fcc 	andi	r4,r4,255
41108190:	200895fa 	slli	r4,r4,23
41108194:	38803fcc 	andi	r2,r7,255
41108198:	00c02034 	movhi	r3,128
4110819c:	100497fa 	slli	r2,r2,31
411081a0:	18ffffc4 	addi	r3,r3,-1
411081a4:	30c6703a 	and	r3,r6,r3
411081a8:	1906b03a 	or	r3,r3,r4
411081ac:	1884b03a 	or	r2,r3,r2
411081b0:	dfc00a17 	ldw	ra,40(sp)
411081b4:	df000917 	ldw	fp,36(sp)
411081b8:	ddc00817 	ldw	r23,32(sp)
411081bc:	dd800717 	ldw	r22,28(sp)
411081c0:	dd400617 	ldw	r21,24(sp)
411081c4:	dd000517 	ldw	r20,20(sp)
411081c8:	dcc00417 	ldw	r19,16(sp)
411081cc:	dc800317 	ldw	r18,12(sp)
411081d0:	dc400217 	ldw	r17,8(sp)
411081d4:	dc000117 	ldw	r16,4(sp)
411081d8:	dec00b04 	addi	sp,sp,44
411081dc:	f800283a 	ret
411081e0:	90002b1e 	bne	r18,zero,41108290 <__divsf3+0x244>
411081e4:	04000104 	movi	r16,4
411081e8:	05c00044 	movi	r23,1
411081ec:	003fb106 	br	411080b4 <__reset+0xbb0e80b4>
411081f0:	8800251e 	bne	r17,zero,41108288 <__divsf3+0x23c>
411081f4:	01400084 	movi	r5,2
411081f8:	00000206 	br	41108204 <__divsf3+0x1b8>
411081fc:	88001a1e 	bne	r17,zero,41108268 <__divsf3+0x21c>
41108200:	01400044 	movi	r5,1
41108204:	8160b03a 	or	r16,r16,r5
41108208:	802090ba 	slli	r16,r16,2
4110820c:	00d04474 	movhi	r3,16657
41108210:	18e08a04 	addi	r3,r3,-32216
41108214:	80e1883a 	add	r16,r16,r3
41108218:	80c00017 	ldw	r3,0(r16)
4110821c:	9d44f03a 	xor	r2,r19,r21
41108220:	a18dc83a 	sub	r6,r20,r6
41108224:	1800683a 	jmp	r3
41108228:	41108180 	call	44110818 <__alt_data_end+0x2f16818>
4110822c:	41108180 	call	44110818 <__alt_data_end+0x2f16818>
41108230:	411083cc 	andi	r4,r8,16911
41108234:	41108168 	cmpgeui	r4,r8,16901
41108238:	411083cc 	andi	r4,r8,16911
4110823c:	411082c8 	cmpgei	r4,r8,16907
41108240:	411083cc 	andi	r4,r8,16911
41108244:	41108168 	cmpgeui	r4,r8,16901
41108248:	41108180 	call	44110818 <__alt_data_end+0x2f16818>
4110824c:	41108180 	call	44110818 <__alt_data_end+0x2f16818>
41108250:	411082c8 	cmpgei	r4,r8,16907
41108254:	41108168 	cmpgeui	r4,r8,16901
41108258:	411083dc 	xori	r4,r8,16911
4110825c:	411083dc 	xori	r4,r8,16911
41108260:	411083dc 	xori	r4,r8,16911
41108264:	411083f4 	orhi	r4,r8,16911
41108268:	8809883a 	mov	r4,r17
4110826c:	110946c0 	call	4110946c <__clzsi2>
41108270:	10fffec4 	addi	r3,r2,-5
41108274:	10801d84 	addi	r2,r2,118
41108278:	88e2983a 	sll	r17,r17,r3
4110827c:	008dc83a 	sub	r6,zero,r2
41108280:	000b883a 	mov	r5,zero
41108284:	003f9906 	br	411080ec <__reset+0xbb0e80ec>
41108288:	014000c4 	movi	r5,3
4110828c:	003f9706 	br	411080ec <__reset+0xbb0e80ec>
41108290:	9009883a 	mov	r4,r18
41108294:	d9400015 	stw	r5,0(sp)
41108298:	110946c0 	call	4110946c <__clzsi2>
4110829c:	10fffec4 	addi	r3,r2,-5
411082a0:	11801d84 	addi	r6,r2,118
411082a4:	90e4983a 	sll	r18,r18,r3
411082a8:	01a9c83a 	sub	r20,zero,r6
411082ac:	0021883a 	mov	r16,zero
411082b0:	002f883a 	mov	r23,zero
411082b4:	d9400017 	ldw	r5,0(sp)
411082b8:	003f7e06 	br	411080b4 <__reset+0xbb0e80b4>
411082bc:	04000304 	movi	r16,12
411082c0:	05c000c4 	movi	r23,3
411082c4:	003f7b06 	br	411080b4 <__reset+0xbb0e80b4>
411082c8:	01802034 	movhi	r6,128
411082cc:	000f883a 	mov	r7,zero
411082d0:	31bfffc4 	addi	r6,r6,-1
411082d4:	013fffc4 	movi	r4,-1
411082d8:	003fac06 	br	4110818c <__reset+0xbb0e818c>
411082dc:	01400044 	movi	r5,1
411082e0:	2909c83a 	sub	r4,r5,r4
411082e4:	00c006c4 	movi	r3,27
411082e8:	19004b0e 	bge	r3,r4,41108418 <__divsf3+0x3cc>
411082ec:	114e703a 	and	r7,r2,r5
411082f0:	0009883a 	mov	r4,zero
411082f4:	000d883a 	mov	r6,zero
411082f8:	003fa406 	br	4110818c <__reset+0xbb0e818c>
411082fc:	9006917a 	slli	r3,r18,5
41108300:	8822917a 	slli	r17,r17,5
41108304:	1c40372e 	bgeu	r3,r17,411083e4 <__divsf3+0x398>
41108308:	31bfffc4 	addi	r6,r6,-1
4110830c:	010006c4 	movi	r4,27
41108310:	000b883a 	mov	r5,zero
41108314:	180f883a 	mov	r7,r3
41108318:	294b883a 	add	r5,r5,r5
4110831c:	18c7883a 	add	r3,r3,r3
41108320:	38000116 	blt	r7,zero,41108328 <__divsf3+0x2dc>
41108324:	1c400236 	bltu	r3,r17,41108330 <__divsf3+0x2e4>
41108328:	1c47c83a 	sub	r3,r3,r17
4110832c:	29400054 	ori	r5,r5,1
41108330:	213fffc4 	addi	r4,r4,-1
41108334:	203ff71e 	bne	r4,zero,41108314 <__reset+0xbb0e8314>
41108338:	1806c03a 	cmpne	r3,r3,zero
4110833c:	1962b03a 	or	r17,r3,r5
41108340:	31001fc4 	addi	r4,r6,127
41108344:	013fe50e 	bge	zero,r4,411082dc <__reset+0xbb0e82dc>
41108348:	88c001cc 	andi	r3,r17,7
4110834c:	18000426 	beq	r3,zero,41108360 <__divsf3+0x314>
41108350:	88c003cc 	andi	r3,r17,15
41108354:	01400104 	movi	r5,4
41108358:	19400126 	beq	r3,r5,41108360 <__divsf3+0x314>
4110835c:	8963883a 	add	r17,r17,r5
41108360:	88c2002c 	andhi	r3,r17,2048
41108364:	18000426 	beq	r3,zero,41108378 <__divsf3+0x32c>
41108368:	00fe0034 	movhi	r3,63488
4110836c:	18ffffc4 	addi	r3,r3,-1
41108370:	31002004 	addi	r4,r6,128
41108374:	88e2703a 	and	r17,r17,r3
41108378:	00c03f84 	movi	r3,254
4110837c:	193f8016 	blt	r3,r4,41108180 <__reset+0xbb0e8180>
41108380:	880c91ba 	slli	r6,r17,6
41108384:	11c0004c 	andi	r7,r2,1
41108388:	300cd27a 	srli	r6,r6,9
4110838c:	003f7f06 	br	4110818c <__reset+0xbb0e818c>
41108390:	9080102c 	andhi	r2,r18,64
41108394:	10000226 	beq	r2,zero,411083a0 <__divsf3+0x354>
41108398:	8880102c 	andhi	r2,r17,64
4110839c:	10001826 	beq	r2,zero,41108400 <__divsf3+0x3b4>
411083a0:	00802034 	movhi	r2,128
411083a4:	91801034 	orhi	r6,r18,64
411083a8:	10bfffc4 	addi	r2,r2,-1
411083ac:	980f883a 	mov	r7,r19
411083b0:	308c703a 	and	r6,r6,r2
411083b4:	003fc706 	br	411082d4 <__reset+0xbb0e82d4>
411083b8:	008000c4 	movi	r2,3
411083bc:	b8802d26 	beq	r23,r2,41108474 <__divsf3+0x428>
411083c0:	00c00044 	movi	r3,1
411083c4:	b005883a 	mov	r2,r22
411083c8:	b8ffdd1e 	bne	r23,r3,41108340 <__reset+0xbb0e8340>
411083cc:	11c0004c 	andi	r7,r2,1
411083d0:	0009883a 	mov	r4,zero
411083d4:	000d883a 	mov	r6,zero
411083d8:	003f6c06 	br	4110818c <__reset+0xbb0e818c>
411083dc:	9023883a 	mov	r17,r18
411083e0:	003f6406 	br	41108174 <__reset+0xbb0e8174>
411083e4:	1c47c83a 	sub	r3,r3,r17
411083e8:	01000684 	movi	r4,26
411083ec:	01400044 	movi	r5,1
411083f0:	003fc806 	br	41108314 <__reset+0xbb0e8314>
411083f4:	9080102c 	andhi	r2,r18,64
411083f8:	103fe926 	beq	r2,zero,411083a0 <__reset+0xbb0e83a0>
411083fc:	0023883a 	mov	r17,zero
41108400:	00802034 	movhi	r2,128
41108404:	89801034 	orhi	r6,r17,64
41108408:	10bfffc4 	addi	r2,r2,-1
4110840c:	a80f883a 	mov	r7,r21
41108410:	308c703a 	and	r6,r6,r2
41108414:	003faf06 	br	411082d4 <__reset+0xbb0e82d4>
41108418:	01c00804 	movi	r7,32
4110841c:	390fc83a 	sub	r7,r7,r4
41108420:	89ce983a 	sll	r7,r17,r7
41108424:	890ad83a 	srl	r5,r17,r4
41108428:	380ec03a 	cmpne	r7,r7,zero
4110842c:	29cab03a 	or	r5,r5,r7
41108430:	28c001cc 	andi	r3,r5,7
41108434:	18000426 	beq	r3,zero,41108448 <__divsf3+0x3fc>
41108438:	28c003cc 	andi	r3,r5,15
4110843c:	01000104 	movi	r4,4
41108440:	19000126 	beq	r3,r4,41108448 <__divsf3+0x3fc>
41108444:	290b883a 	add	r5,r5,r4
41108448:	28c1002c 	andhi	r3,r5,1024
4110844c:	18000426 	beq	r3,zero,41108460 <__divsf3+0x414>
41108450:	11c0004c 	andi	r7,r2,1
41108454:	01000044 	movi	r4,1
41108458:	000d883a 	mov	r6,zero
4110845c:	003f4b06 	br	4110818c <__reset+0xbb0e818c>
41108460:	280a91ba 	slli	r5,r5,6
41108464:	11c0004c 	andi	r7,r2,1
41108468:	0009883a 	mov	r4,zero
4110846c:	280cd27a 	srli	r6,r5,9
41108470:	003f4606 	br	4110818c <__reset+0xbb0e818c>
41108474:	00802034 	movhi	r2,128
41108478:	89801034 	orhi	r6,r17,64
4110847c:	10bfffc4 	addi	r2,r2,-1
41108480:	b00f883a 	mov	r7,r22
41108484:	308c703a 	and	r6,r6,r2
41108488:	003f9206 	br	411082d4 <__reset+0xbb0e82d4>

4110848c <__mulsf3>:
4110848c:	defff504 	addi	sp,sp,-44
41108490:	dc000115 	stw	r16,4(sp)
41108494:	2020d5fa 	srli	r16,r4,23
41108498:	dd400615 	stw	r21,24(sp)
4110849c:	202ad7fa 	srli	r21,r4,31
411084a0:	dc800315 	stw	r18,12(sp)
411084a4:	04802034 	movhi	r18,128
411084a8:	df000915 	stw	fp,36(sp)
411084ac:	dd000515 	stw	r20,20(sp)
411084b0:	94bfffc4 	addi	r18,r18,-1
411084b4:	dfc00a15 	stw	ra,40(sp)
411084b8:	ddc00815 	stw	r23,32(sp)
411084bc:	dd800715 	stw	r22,28(sp)
411084c0:	dcc00415 	stw	r19,16(sp)
411084c4:	dc400215 	stw	r17,8(sp)
411084c8:	84003fcc 	andi	r16,r16,255
411084cc:	9124703a 	and	r18,r18,r4
411084d0:	a829883a 	mov	r20,r21
411084d4:	af003fcc 	andi	fp,r21,255
411084d8:	80005426 	beq	r16,zero,4110862c <__mulsf3+0x1a0>
411084dc:	00803fc4 	movi	r2,255
411084e0:	80802f26 	beq	r16,r2,411085a0 <__mulsf3+0x114>
411084e4:	91002034 	orhi	r4,r18,128
411084e8:	202490fa 	slli	r18,r4,3
411084ec:	843fe044 	addi	r16,r16,-127
411084f0:	0023883a 	mov	r17,zero
411084f4:	002f883a 	mov	r23,zero
411084f8:	2804d5fa 	srli	r2,r5,23
411084fc:	282cd7fa 	srli	r22,r5,31
41108500:	01002034 	movhi	r4,128
41108504:	213fffc4 	addi	r4,r4,-1
41108508:	10803fcc 	andi	r2,r2,255
4110850c:	2166703a 	and	r19,r4,r5
41108510:	b1803fcc 	andi	r6,r22,255
41108514:	10004c26 	beq	r2,zero,41108648 <__mulsf3+0x1bc>
41108518:	00c03fc4 	movi	r3,255
4110851c:	10c04726 	beq	r2,r3,4110863c <__mulsf3+0x1b0>
41108520:	99002034 	orhi	r4,r19,128
41108524:	202690fa 	slli	r19,r4,3
41108528:	10bfe044 	addi	r2,r2,-127
4110852c:	0007883a 	mov	r3,zero
41108530:	80a1883a 	add	r16,r16,r2
41108534:	010003c4 	movi	r4,15
41108538:	1c44b03a 	or	r2,r3,r17
4110853c:	b56af03a 	xor	r21,r22,r21
41108540:	81c00044 	addi	r7,r16,1
41108544:	20806b36 	bltu	r4,r2,411086f4 <__mulsf3+0x268>
41108548:	100490ba 	slli	r2,r2,2
4110854c:	01104474 	movhi	r4,16657
41108550:	21215804 	addi	r4,r4,-31392
41108554:	1105883a 	add	r2,r2,r4
41108558:	10800017 	ldw	r2,0(r2)
4110855c:	1000683a 	jmp	r2
41108560:	411086f4 	orhi	r4,r8,16923
41108564:	411085b4 	orhi	r4,r8,16918
41108568:	411085b4 	orhi	r4,r8,16918
4110856c:	411085b0 	cmpltui	r4,r8,16918
41108570:	411086d8 	cmpnei	r4,r8,16923
41108574:	411086d8 	cmpnei	r4,r8,16923
41108578:	411086c4 	addi	r4,r8,16923
4110857c:	411085b0 	cmpltui	r4,r8,16918
41108580:	411086d8 	cmpnei	r4,r8,16923
41108584:	411086c4 	addi	r4,r8,16923
41108588:	411086d8 	cmpnei	r4,r8,16923
4110858c:	411085b0 	cmpltui	r4,r8,16918
41108590:	411086e4 	muli	r4,r8,16923
41108594:	411086e4 	muli	r4,r8,16923
41108598:	411086e4 	muli	r4,r8,16923
4110859c:	411087c0 	call	4411087c <__alt_data_end+0x2f1687c>
411085a0:	90003b1e 	bne	r18,zero,41108690 <__mulsf3+0x204>
411085a4:	04400204 	movi	r17,8
411085a8:	05c00084 	movi	r23,2
411085ac:	003fd206 	br	411084f8 <__reset+0xbb0e84f8>
411085b0:	302b883a 	mov	r21,r6
411085b4:	00800084 	movi	r2,2
411085b8:	18802626 	beq	r3,r2,41108654 <__mulsf3+0x1c8>
411085bc:	008000c4 	movi	r2,3
411085c0:	1880ab26 	beq	r3,r2,41108870 <__mulsf3+0x3e4>
411085c4:	00800044 	movi	r2,1
411085c8:	1880a21e 	bne	r3,r2,41108854 <__mulsf3+0x3c8>
411085cc:	a829883a 	mov	r20,r21
411085d0:	0007883a 	mov	r3,zero
411085d4:	0009883a 	mov	r4,zero
411085d8:	18803fcc 	andi	r2,r3,255
411085dc:	100695fa 	slli	r3,r2,23
411085e0:	a0803fcc 	andi	r2,r20,255
411085e4:	100a97fa 	slli	r5,r2,31
411085e8:	00802034 	movhi	r2,128
411085ec:	10bfffc4 	addi	r2,r2,-1
411085f0:	2084703a 	and	r2,r4,r2
411085f4:	10c4b03a 	or	r2,r2,r3
411085f8:	1144b03a 	or	r2,r2,r5
411085fc:	dfc00a17 	ldw	ra,40(sp)
41108600:	df000917 	ldw	fp,36(sp)
41108604:	ddc00817 	ldw	r23,32(sp)
41108608:	dd800717 	ldw	r22,28(sp)
4110860c:	dd400617 	ldw	r21,24(sp)
41108610:	dd000517 	ldw	r20,20(sp)
41108614:	dcc00417 	ldw	r19,16(sp)
41108618:	dc800317 	ldw	r18,12(sp)
4110861c:	dc400217 	ldw	r17,8(sp)
41108620:	dc000117 	ldw	r16,4(sp)
41108624:	dec00b04 	addi	sp,sp,44
41108628:	f800283a 	ret
4110862c:	90000d1e 	bne	r18,zero,41108664 <__mulsf3+0x1d8>
41108630:	04400104 	movi	r17,4
41108634:	05c00044 	movi	r23,1
41108638:	003faf06 	br	411084f8 <__reset+0xbb0e84f8>
4110863c:	9806c03a 	cmpne	r3,r19,zero
41108640:	18c00084 	addi	r3,r3,2
41108644:	003fba06 	br	41108530 <__reset+0xbb0e8530>
41108648:	9800141e 	bne	r19,zero,4110869c <__mulsf3+0x210>
4110864c:	00c00044 	movi	r3,1
41108650:	003fb706 	br	41108530 <__reset+0xbb0e8530>
41108654:	a829883a 	mov	r20,r21
41108658:	00ffffc4 	movi	r3,-1
4110865c:	0009883a 	mov	r4,zero
41108660:	003fdd06 	br	411085d8 <__reset+0xbb0e85d8>
41108664:	9009883a 	mov	r4,r18
41108668:	d9400015 	stw	r5,0(sp)
4110866c:	110946c0 	call	4110946c <__clzsi2>
41108670:	10fffec4 	addi	r3,r2,-5
41108674:	10801d84 	addi	r2,r2,118
41108678:	90e4983a 	sll	r18,r18,r3
4110867c:	00a1c83a 	sub	r16,zero,r2
41108680:	0023883a 	mov	r17,zero
41108684:	002f883a 	mov	r23,zero
41108688:	d9400017 	ldw	r5,0(sp)
4110868c:	003f9a06 	br	411084f8 <__reset+0xbb0e84f8>
41108690:	04400304 	movi	r17,12
41108694:	05c000c4 	movi	r23,3
41108698:	003f9706 	br	411084f8 <__reset+0xbb0e84f8>
4110869c:	9809883a 	mov	r4,r19
411086a0:	d9800015 	stw	r6,0(sp)
411086a4:	110946c0 	call	4110946c <__clzsi2>
411086a8:	10fffec4 	addi	r3,r2,-5
411086ac:	10801d84 	addi	r2,r2,118
411086b0:	98e6983a 	sll	r19,r19,r3
411086b4:	0085c83a 	sub	r2,zero,r2
411086b8:	0007883a 	mov	r3,zero
411086bc:	d9800017 	ldw	r6,0(sp)
411086c0:	003f9b06 	br	41108530 <__reset+0xbb0e8530>
411086c4:	01002034 	movhi	r4,128
411086c8:	0029883a 	mov	r20,zero
411086cc:	213fffc4 	addi	r4,r4,-1
411086d0:	00ffffc4 	movi	r3,-1
411086d4:	003fc006 	br	411085d8 <__reset+0xbb0e85d8>
411086d8:	9027883a 	mov	r19,r18
411086dc:	b807883a 	mov	r3,r23
411086e0:	003fb406 	br	411085b4 <__reset+0xbb0e85b4>
411086e4:	9027883a 	mov	r19,r18
411086e8:	e02b883a 	mov	r21,fp
411086ec:	b807883a 	mov	r3,r23
411086f0:	003fb006 	br	411085b4 <__reset+0xbb0e85b4>
411086f4:	9004d43a 	srli	r2,r18,16
411086f8:	9810d43a 	srli	r8,r19,16
411086fc:	94bfffcc 	andi	r18,r18,65535
41108700:	993fffcc 	andi	r4,r19,65535
41108704:	910d383a 	mul	r6,r18,r4
41108708:	20a7383a 	mul	r19,r4,r2
4110870c:	9225383a 	mul	r18,r18,r8
41108710:	3006d43a 	srli	r3,r6,16
41108714:	1211383a 	mul	r8,r2,r8
41108718:	94e5883a 	add	r18,r18,r19
4110871c:	1c87883a 	add	r3,r3,r18
41108720:	1cc0022e 	bgeu	r3,r19,4110872c <__mulsf3+0x2a0>
41108724:	00800074 	movhi	r2,1
41108728:	4091883a 	add	r8,r8,r2
4110872c:	1804943a 	slli	r2,r3,16
41108730:	31bfffcc 	andi	r6,r6,65535
41108734:	1806d43a 	srli	r3,r3,16
41108738:	1185883a 	add	r2,r2,r6
4110873c:	102691ba 	slli	r19,r2,6
41108740:	1a07883a 	add	r3,r3,r8
41108744:	1004d6ba 	srli	r2,r2,26
41108748:	180891ba 	slli	r4,r3,6
4110874c:	9826c03a 	cmpne	r19,r19,zero
41108750:	9884b03a 	or	r2,r19,r2
41108754:	1126b03a 	or	r19,r2,r4
41108758:	9882002c 	andhi	r2,r19,2048
4110875c:	10000426 	beq	r2,zero,41108770 <__mulsf3+0x2e4>
41108760:	9804d07a 	srli	r2,r19,1
41108764:	9900004c 	andi	r4,r19,1
41108768:	3821883a 	mov	r16,r7
4110876c:	1126b03a 	or	r19,r2,r4
41108770:	80c01fc4 	addi	r3,r16,127
41108774:	00c0210e 	bge	zero,r3,411087fc <__mulsf3+0x370>
41108778:	988001cc 	andi	r2,r19,7
4110877c:	10000426 	beq	r2,zero,41108790 <__mulsf3+0x304>
41108780:	988003cc 	andi	r2,r19,15
41108784:	01000104 	movi	r4,4
41108788:	11000126 	beq	r2,r4,41108790 <__mulsf3+0x304>
4110878c:	9927883a 	add	r19,r19,r4
41108790:	9882002c 	andhi	r2,r19,2048
41108794:	10000426 	beq	r2,zero,411087a8 <__mulsf3+0x31c>
41108798:	00be0034 	movhi	r2,63488
4110879c:	10bfffc4 	addi	r2,r2,-1
411087a0:	80c02004 	addi	r3,r16,128
411087a4:	98a6703a 	and	r19,r19,r2
411087a8:	00803f84 	movi	r2,254
411087ac:	10ffa916 	blt	r2,r3,41108654 <__reset+0xbb0e8654>
411087b0:	980891ba 	slli	r4,r19,6
411087b4:	a829883a 	mov	r20,r21
411087b8:	2008d27a 	srli	r4,r4,9
411087bc:	003f8606 	br	411085d8 <__reset+0xbb0e85d8>
411087c0:	9080102c 	andhi	r2,r18,64
411087c4:	10000826 	beq	r2,zero,411087e8 <__mulsf3+0x35c>
411087c8:	9880102c 	andhi	r2,r19,64
411087cc:	1000061e 	bne	r2,zero,411087e8 <__mulsf3+0x35c>
411087d0:	00802034 	movhi	r2,128
411087d4:	99001034 	orhi	r4,r19,64
411087d8:	10bfffc4 	addi	r2,r2,-1
411087dc:	b029883a 	mov	r20,r22
411087e0:	2088703a 	and	r4,r4,r2
411087e4:	003fba06 	br	411086d0 <__reset+0xbb0e86d0>
411087e8:	00802034 	movhi	r2,128
411087ec:	91001034 	orhi	r4,r18,64
411087f0:	10bfffc4 	addi	r2,r2,-1
411087f4:	2088703a 	and	r4,r4,r2
411087f8:	003fb506 	br	411086d0 <__reset+0xbb0e86d0>
411087fc:	00800044 	movi	r2,1
41108800:	10c7c83a 	sub	r3,r2,r3
41108804:	008006c4 	movi	r2,27
41108808:	10ff7016 	blt	r2,r3,411085cc <__reset+0xbb0e85cc>
4110880c:	00800804 	movi	r2,32
41108810:	10c5c83a 	sub	r2,r2,r3
41108814:	9884983a 	sll	r2,r19,r2
41108818:	98c6d83a 	srl	r3,r19,r3
4110881c:	1004c03a 	cmpne	r2,r2,zero
41108820:	1884b03a 	or	r2,r3,r2
41108824:	10c001cc 	andi	r3,r2,7
41108828:	18000426 	beq	r3,zero,4110883c <__mulsf3+0x3b0>
4110882c:	10c003cc 	andi	r3,r2,15
41108830:	01000104 	movi	r4,4
41108834:	19000126 	beq	r3,r4,4110883c <__mulsf3+0x3b0>
41108838:	1105883a 	add	r2,r2,r4
4110883c:	10c1002c 	andhi	r3,r2,1024
41108840:	18000626 	beq	r3,zero,4110885c <__mulsf3+0x3d0>
41108844:	a829883a 	mov	r20,r21
41108848:	00c00044 	movi	r3,1
4110884c:	0009883a 	mov	r4,zero
41108850:	003f6106 	br	411085d8 <__reset+0xbb0e85d8>
41108854:	3821883a 	mov	r16,r7
41108858:	003fc506 	br	41108770 <__reset+0xbb0e8770>
4110885c:	100491ba 	slli	r2,r2,6
41108860:	a829883a 	mov	r20,r21
41108864:	0007883a 	mov	r3,zero
41108868:	1008d27a 	srli	r4,r2,9
4110886c:	003f5a06 	br	411085d8 <__reset+0xbb0e85d8>
41108870:	00802034 	movhi	r2,128
41108874:	99001034 	orhi	r4,r19,64
41108878:	10bfffc4 	addi	r2,r2,-1
4110887c:	a829883a 	mov	r20,r21
41108880:	2088703a 	and	r4,r4,r2
41108884:	003f9206 	br	411086d0 <__reset+0xbb0e86d0>

41108888 <__floatsisf>:
41108888:	defffd04 	addi	sp,sp,-12
4110888c:	dfc00215 	stw	ra,8(sp)
41108890:	dc400115 	stw	r17,4(sp)
41108894:	dc000015 	stw	r16,0(sp)
41108898:	20003526 	beq	r4,zero,41108970 <__floatsisf+0xe8>
4110889c:	2021883a 	mov	r16,r4
411088a0:	2022d7fa 	srli	r17,r4,31
411088a4:	20003616 	blt	r4,zero,41108980 <__floatsisf+0xf8>
411088a8:	8009883a 	mov	r4,r16
411088ac:	110946c0 	call	4110946c <__clzsi2>
411088b0:	00c02784 	movi	r3,158
411088b4:	1887c83a 	sub	r3,r3,r2
411088b8:	01002584 	movi	r4,150
411088bc:	20c01416 	blt	r4,r3,41108910 <__floatsisf+0x88>
411088c0:	20c9c83a 	sub	r4,r4,r3
411088c4:	8120983a 	sll	r16,r16,r4
411088c8:	00802034 	movhi	r2,128
411088cc:	10bfffc4 	addi	r2,r2,-1
411088d0:	8809883a 	mov	r4,r17
411088d4:	80a0703a 	and	r16,r16,r2
411088d8:	18803fcc 	andi	r2,r3,255
411088dc:	100695fa 	slli	r3,r2,23
411088e0:	20803fcc 	andi	r2,r4,255
411088e4:	100897fa 	slli	r4,r2,31
411088e8:	00802034 	movhi	r2,128
411088ec:	10bfffc4 	addi	r2,r2,-1
411088f0:	8084703a 	and	r2,r16,r2
411088f4:	10c4b03a 	or	r2,r2,r3
411088f8:	1104b03a 	or	r2,r2,r4
411088fc:	dfc00217 	ldw	ra,8(sp)
41108900:	dc400117 	ldw	r17,4(sp)
41108904:	dc000017 	ldw	r16,0(sp)
41108908:	dec00304 	addi	sp,sp,12
4110890c:	f800283a 	ret
41108910:	01002644 	movi	r4,153
41108914:	20c01c16 	blt	r4,r3,41108988 <__floatsisf+0x100>
41108918:	20c9c83a 	sub	r4,r4,r3
4110891c:	8120983a 	sll	r16,r16,r4
41108920:	013f0034 	movhi	r4,64512
41108924:	213fffc4 	addi	r4,r4,-1
41108928:	814001cc 	andi	r5,r16,7
4110892c:	8108703a 	and	r4,r16,r4
41108930:	28000426 	beq	r5,zero,41108944 <__floatsisf+0xbc>
41108934:	840003cc 	andi	r16,r16,15
41108938:	01400104 	movi	r5,4
4110893c:	81400126 	beq	r16,r5,41108944 <__floatsisf+0xbc>
41108940:	2149883a 	add	r4,r4,r5
41108944:	2141002c 	andhi	r5,r4,1024
41108948:	28000526 	beq	r5,zero,41108960 <__floatsisf+0xd8>
4110894c:	00c027c4 	movi	r3,159
41108950:	1887c83a 	sub	r3,r3,r2
41108954:	00bf0034 	movhi	r2,64512
41108958:	10bfffc4 	addi	r2,r2,-1
4110895c:	2088703a 	and	r4,r4,r2
41108960:	202091ba 	slli	r16,r4,6
41108964:	8809883a 	mov	r4,r17
41108968:	8020d27a 	srli	r16,r16,9
4110896c:	003fda06 	br	411088d8 <__reset+0xbb0e88d8>
41108970:	0009883a 	mov	r4,zero
41108974:	0007883a 	mov	r3,zero
41108978:	0021883a 	mov	r16,zero
4110897c:	003fd606 	br	411088d8 <__reset+0xbb0e88d8>
41108980:	0121c83a 	sub	r16,zero,r4
41108984:	003fc806 	br	411088a8 <__reset+0xbb0e88a8>
41108988:	01002e44 	movi	r4,185
4110898c:	20c9c83a 	sub	r4,r4,r3
41108990:	01400144 	movi	r5,5
41108994:	8108983a 	sll	r4,r16,r4
41108998:	288bc83a 	sub	r5,r5,r2
4110899c:	8160d83a 	srl	r16,r16,r5
411089a0:	2008c03a 	cmpne	r4,r4,zero
411089a4:	8120b03a 	or	r16,r16,r4
411089a8:	003fdd06 	br	41108920 <__reset+0xbb0e8920>

411089ac <__floatunsisf>:
411089ac:	defffe04 	addi	sp,sp,-8
411089b0:	dfc00115 	stw	ra,4(sp)
411089b4:	dc000015 	stw	r16,0(sp)
411089b8:	20002c26 	beq	r4,zero,41108a6c <__floatunsisf+0xc0>
411089bc:	2021883a 	mov	r16,r4
411089c0:	110946c0 	call	4110946c <__clzsi2>
411089c4:	00c02784 	movi	r3,158
411089c8:	1887c83a 	sub	r3,r3,r2
411089cc:	01002584 	movi	r4,150
411089d0:	20c00f16 	blt	r4,r3,41108a10 <__floatunsisf+0x64>
411089d4:	20c9c83a 	sub	r4,r4,r3
411089d8:	8108983a 	sll	r4,r16,r4
411089dc:	00802034 	movhi	r2,128
411089e0:	10bfffc4 	addi	r2,r2,-1
411089e4:	2088703a 	and	r4,r4,r2
411089e8:	18803fcc 	andi	r2,r3,255
411089ec:	100695fa 	slli	r3,r2,23
411089f0:	00802034 	movhi	r2,128
411089f4:	10bfffc4 	addi	r2,r2,-1
411089f8:	2084703a 	and	r2,r4,r2
411089fc:	10c4b03a 	or	r2,r2,r3
41108a00:	dfc00117 	ldw	ra,4(sp)
41108a04:	dc000017 	ldw	r16,0(sp)
41108a08:	dec00204 	addi	sp,sp,8
41108a0c:	f800283a 	ret
41108a10:	01002644 	movi	r4,153
41108a14:	20c01816 	blt	r4,r3,41108a78 <__floatunsisf+0xcc>
41108a18:	20c9c83a 	sub	r4,r4,r3
41108a1c:	8108983a 	sll	r4,r16,r4
41108a20:	017f0034 	movhi	r5,64512
41108a24:	297fffc4 	addi	r5,r5,-1
41108a28:	218001cc 	andi	r6,r4,7
41108a2c:	214a703a 	and	r5,r4,r5
41108a30:	30000426 	beq	r6,zero,41108a44 <__floatunsisf+0x98>
41108a34:	210003cc 	andi	r4,r4,15
41108a38:	01800104 	movi	r6,4
41108a3c:	21800126 	beq	r4,r6,41108a44 <__floatunsisf+0x98>
41108a40:	298b883a 	add	r5,r5,r6
41108a44:	2901002c 	andhi	r4,r5,1024
41108a48:	20000526 	beq	r4,zero,41108a60 <__floatunsisf+0xb4>
41108a4c:	00c027c4 	movi	r3,159
41108a50:	1887c83a 	sub	r3,r3,r2
41108a54:	00bf0034 	movhi	r2,64512
41108a58:	10bfffc4 	addi	r2,r2,-1
41108a5c:	288a703a 	and	r5,r5,r2
41108a60:	280891ba 	slli	r4,r5,6
41108a64:	2008d27a 	srli	r4,r4,9
41108a68:	003fdf06 	br	411089e8 <__reset+0xbb0e89e8>
41108a6c:	0007883a 	mov	r3,zero
41108a70:	0009883a 	mov	r4,zero
41108a74:	003fdc06 	br	411089e8 <__reset+0xbb0e89e8>
41108a78:	01402e44 	movi	r5,185
41108a7c:	28cbc83a 	sub	r5,r5,r3
41108a80:	01000144 	movi	r4,5
41108a84:	2089c83a 	sub	r4,r4,r2
41108a88:	814a983a 	sll	r5,r16,r5
41108a8c:	8108d83a 	srl	r4,r16,r4
41108a90:	2820c03a 	cmpne	r16,r5,zero
41108a94:	2408b03a 	or	r4,r4,r16
41108a98:	003fe106 	br	41108a20 <__reset+0xbb0e8a20>

41108a9c <__muldf3>:
41108a9c:	defff304 	addi	sp,sp,-52
41108aa0:	2804d53a 	srli	r2,r5,20
41108aa4:	dd800915 	stw	r22,36(sp)
41108aa8:	282cd7fa 	srli	r22,r5,31
41108aac:	dc000315 	stw	r16,12(sp)
41108ab0:	04000434 	movhi	r16,16
41108ab4:	dd400815 	stw	r21,32(sp)
41108ab8:	dc800515 	stw	r18,20(sp)
41108abc:	843fffc4 	addi	r16,r16,-1
41108ac0:	dfc00c15 	stw	ra,48(sp)
41108ac4:	df000b15 	stw	fp,44(sp)
41108ac8:	ddc00a15 	stw	r23,40(sp)
41108acc:	dd000715 	stw	r20,28(sp)
41108ad0:	dcc00615 	stw	r19,24(sp)
41108ad4:	dc400415 	stw	r17,16(sp)
41108ad8:	1481ffcc 	andi	r18,r2,2047
41108adc:	2c20703a 	and	r16,r5,r16
41108ae0:	b02b883a 	mov	r21,r22
41108ae4:	b2403fcc 	andi	r9,r22,255
41108ae8:	90006026 	beq	r18,zero,41108c6c <__muldf3+0x1d0>
41108aec:	0081ffc4 	movi	r2,2047
41108af0:	2029883a 	mov	r20,r4
41108af4:	90803626 	beq	r18,r2,41108bd0 <__muldf3+0x134>
41108af8:	80800434 	orhi	r2,r16,16
41108afc:	100490fa 	slli	r2,r2,3
41108b00:	2020d77a 	srli	r16,r4,29
41108b04:	202890fa 	slli	r20,r4,3
41108b08:	94bf0044 	addi	r18,r18,-1023
41108b0c:	80a0b03a 	or	r16,r16,r2
41108b10:	0027883a 	mov	r19,zero
41108b14:	0039883a 	mov	fp,zero
41108b18:	3804d53a 	srli	r2,r7,20
41108b1c:	382ed7fa 	srli	r23,r7,31
41108b20:	04400434 	movhi	r17,16
41108b24:	8c7fffc4 	addi	r17,r17,-1
41108b28:	1081ffcc 	andi	r2,r2,2047
41108b2c:	3011883a 	mov	r8,r6
41108b30:	3c62703a 	and	r17,r7,r17
41108b34:	ba803fcc 	andi	r10,r23,255
41108b38:	10006d26 	beq	r2,zero,41108cf0 <__muldf3+0x254>
41108b3c:	00c1ffc4 	movi	r3,2047
41108b40:	10c06526 	beq	r2,r3,41108cd8 <__muldf3+0x23c>
41108b44:	88c00434 	orhi	r3,r17,16
41108b48:	180690fa 	slli	r3,r3,3
41108b4c:	3022d77a 	srli	r17,r6,29
41108b50:	301090fa 	slli	r8,r6,3
41108b54:	10bf0044 	addi	r2,r2,-1023
41108b58:	88e2b03a 	or	r17,r17,r3
41108b5c:	000b883a 	mov	r5,zero
41108b60:	9085883a 	add	r2,r18,r2
41108b64:	2cc8b03a 	or	r4,r5,r19
41108b68:	00c003c4 	movi	r3,15
41108b6c:	bdacf03a 	xor	r22,r23,r22
41108b70:	12c00044 	addi	r11,r2,1
41108b74:	19009936 	bltu	r3,r4,41108ddc <__muldf3+0x340>
41108b78:	200890ba 	slli	r4,r4,2
41108b7c:	00d04474 	movhi	r3,16657
41108b80:	18e2e404 	addi	r3,r3,-29808
41108b84:	20c9883a 	add	r4,r4,r3
41108b88:	20c00017 	ldw	r3,0(r4)
41108b8c:	1800683a 	jmp	r3
41108b90:	41108ddc 	xori	r4,r8,16951
41108b94:	41108bf0 	cmpltui	r4,r8,16943
41108b98:	41108bf0 	cmpltui	r4,r8,16943
41108b9c:	41108bec 	andhi	r4,r8,16943
41108ba0:	41108db8 	rdprs	r4,r8,16950
41108ba4:	41108db8 	rdprs	r4,r8,16950
41108ba8:	41108da0 	cmpeqi	r4,r8,16950
41108bac:	41108bec 	andhi	r4,r8,16943
41108bb0:	41108db8 	rdprs	r4,r8,16950
41108bb4:	41108da0 	cmpeqi	r4,r8,16950
41108bb8:	41108db8 	rdprs	r4,r8,16950
41108bbc:	41108bec 	andhi	r4,r8,16943
41108bc0:	41108dc8 	cmpgei	r4,r8,16951
41108bc4:	41108dc8 	cmpgei	r4,r8,16951
41108bc8:	41108dc8 	cmpgei	r4,r8,16951
41108bcc:	41108fe4 	muli	r4,r8,16959
41108bd0:	2404b03a 	or	r2,r4,r16
41108bd4:	10006f1e 	bne	r2,zero,41108d94 <__muldf3+0x2f8>
41108bd8:	04c00204 	movi	r19,8
41108bdc:	0021883a 	mov	r16,zero
41108be0:	0029883a 	mov	r20,zero
41108be4:	07000084 	movi	fp,2
41108be8:	003fcb06 	br	41108b18 <__reset+0xbb0e8b18>
41108bec:	502d883a 	mov	r22,r10
41108bf0:	00800084 	movi	r2,2
41108bf4:	28805726 	beq	r5,r2,41108d54 <__muldf3+0x2b8>
41108bf8:	008000c4 	movi	r2,3
41108bfc:	28816626 	beq	r5,r2,41109198 <__muldf3+0x6fc>
41108c00:	00800044 	movi	r2,1
41108c04:	2881411e 	bne	r5,r2,4110910c <__muldf3+0x670>
41108c08:	b02b883a 	mov	r21,r22
41108c0c:	0005883a 	mov	r2,zero
41108c10:	000b883a 	mov	r5,zero
41108c14:	0029883a 	mov	r20,zero
41108c18:	1004953a 	slli	r2,r2,20
41108c1c:	a8c03fcc 	andi	r3,r21,255
41108c20:	04400434 	movhi	r17,16
41108c24:	8c7fffc4 	addi	r17,r17,-1
41108c28:	180697fa 	slli	r3,r3,31
41108c2c:	2c4a703a 	and	r5,r5,r17
41108c30:	288ab03a 	or	r5,r5,r2
41108c34:	28c6b03a 	or	r3,r5,r3
41108c38:	a005883a 	mov	r2,r20
41108c3c:	dfc00c17 	ldw	ra,48(sp)
41108c40:	df000b17 	ldw	fp,44(sp)
41108c44:	ddc00a17 	ldw	r23,40(sp)
41108c48:	dd800917 	ldw	r22,36(sp)
41108c4c:	dd400817 	ldw	r21,32(sp)
41108c50:	dd000717 	ldw	r20,28(sp)
41108c54:	dcc00617 	ldw	r19,24(sp)
41108c58:	dc800517 	ldw	r18,20(sp)
41108c5c:	dc400417 	ldw	r17,16(sp)
41108c60:	dc000317 	ldw	r16,12(sp)
41108c64:	dec00d04 	addi	sp,sp,52
41108c68:	f800283a 	ret
41108c6c:	2404b03a 	or	r2,r4,r16
41108c70:	2027883a 	mov	r19,r4
41108c74:	10004226 	beq	r2,zero,41108d80 <__muldf3+0x2e4>
41108c78:	8000fc26 	beq	r16,zero,4110906c <__muldf3+0x5d0>
41108c7c:	8009883a 	mov	r4,r16
41108c80:	d9800215 	stw	r6,8(sp)
41108c84:	d9c00015 	stw	r7,0(sp)
41108c88:	da400115 	stw	r9,4(sp)
41108c8c:	110946c0 	call	4110946c <__clzsi2>
41108c90:	d9800217 	ldw	r6,8(sp)
41108c94:	d9c00017 	ldw	r7,0(sp)
41108c98:	da400117 	ldw	r9,4(sp)
41108c9c:	113ffd44 	addi	r4,r2,-11
41108ca0:	00c00704 	movi	r3,28
41108ca4:	1900ed16 	blt	r3,r4,4110905c <__muldf3+0x5c0>
41108ca8:	00c00744 	movi	r3,29
41108cac:	147ffe04 	addi	r17,r2,-8
41108cb0:	1907c83a 	sub	r3,r3,r4
41108cb4:	8460983a 	sll	r16,r16,r17
41108cb8:	98c6d83a 	srl	r3,r19,r3
41108cbc:	9c68983a 	sll	r20,r19,r17
41108cc0:	1c20b03a 	or	r16,r3,r16
41108cc4:	1080fcc4 	addi	r2,r2,1011
41108cc8:	00a5c83a 	sub	r18,zero,r2
41108ccc:	0027883a 	mov	r19,zero
41108cd0:	0039883a 	mov	fp,zero
41108cd4:	003f9006 	br	41108b18 <__reset+0xbb0e8b18>
41108cd8:	3446b03a 	or	r3,r6,r17
41108cdc:	1800261e 	bne	r3,zero,41108d78 <__muldf3+0x2dc>
41108ce0:	0023883a 	mov	r17,zero
41108ce4:	0011883a 	mov	r8,zero
41108ce8:	01400084 	movi	r5,2
41108cec:	003f9c06 	br	41108b60 <__reset+0xbb0e8b60>
41108cf0:	3446b03a 	or	r3,r6,r17
41108cf4:	18001c26 	beq	r3,zero,41108d68 <__muldf3+0x2cc>
41108cf8:	8800ce26 	beq	r17,zero,41109034 <__muldf3+0x598>
41108cfc:	8809883a 	mov	r4,r17
41108d00:	d9800215 	stw	r6,8(sp)
41108d04:	da400115 	stw	r9,4(sp)
41108d08:	da800015 	stw	r10,0(sp)
41108d0c:	110946c0 	call	4110946c <__clzsi2>
41108d10:	d9800217 	ldw	r6,8(sp)
41108d14:	da400117 	ldw	r9,4(sp)
41108d18:	da800017 	ldw	r10,0(sp)
41108d1c:	113ffd44 	addi	r4,r2,-11
41108d20:	00c00704 	movi	r3,28
41108d24:	1900bf16 	blt	r3,r4,41109024 <__muldf3+0x588>
41108d28:	00c00744 	movi	r3,29
41108d2c:	123ffe04 	addi	r8,r2,-8
41108d30:	1907c83a 	sub	r3,r3,r4
41108d34:	8a22983a 	sll	r17,r17,r8
41108d38:	30c6d83a 	srl	r3,r6,r3
41108d3c:	3210983a 	sll	r8,r6,r8
41108d40:	1c62b03a 	or	r17,r3,r17
41108d44:	1080fcc4 	addi	r2,r2,1011
41108d48:	0085c83a 	sub	r2,zero,r2
41108d4c:	000b883a 	mov	r5,zero
41108d50:	003f8306 	br	41108b60 <__reset+0xbb0e8b60>
41108d54:	b02b883a 	mov	r21,r22
41108d58:	0081ffc4 	movi	r2,2047
41108d5c:	000b883a 	mov	r5,zero
41108d60:	0029883a 	mov	r20,zero
41108d64:	003fac06 	br	41108c18 <__reset+0xbb0e8c18>
41108d68:	0023883a 	mov	r17,zero
41108d6c:	0011883a 	mov	r8,zero
41108d70:	01400044 	movi	r5,1
41108d74:	003f7a06 	br	41108b60 <__reset+0xbb0e8b60>
41108d78:	014000c4 	movi	r5,3
41108d7c:	003f7806 	br	41108b60 <__reset+0xbb0e8b60>
41108d80:	04c00104 	movi	r19,4
41108d84:	0021883a 	mov	r16,zero
41108d88:	0029883a 	mov	r20,zero
41108d8c:	07000044 	movi	fp,1
41108d90:	003f6106 	br	41108b18 <__reset+0xbb0e8b18>
41108d94:	04c00304 	movi	r19,12
41108d98:	070000c4 	movi	fp,3
41108d9c:	003f5e06 	br	41108b18 <__reset+0xbb0e8b18>
41108da0:	01400434 	movhi	r5,16
41108da4:	002b883a 	mov	r21,zero
41108da8:	297fffc4 	addi	r5,r5,-1
41108dac:	053fffc4 	movi	r20,-1
41108db0:	0081ffc4 	movi	r2,2047
41108db4:	003f9806 	br	41108c18 <__reset+0xbb0e8c18>
41108db8:	8023883a 	mov	r17,r16
41108dbc:	a011883a 	mov	r8,r20
41108dc0:	e00b883a 	mov	r5,fp
41108dc4:	003f8a06 	br	41108bf0 <__reset+0xbb0e8bf0>
41108dc8:	8023883a 	mov	r17,r16
41108dcc:	a011883a 	mov	r8,r20
41108dd0:	482d883a 	mov	r22,r9
41108dd4:	e00b883a 	mov	r5,fp
41108dd8:	003f8506 	br	41108bf0 <__reset+0xbb0e8bf0>
41108ddc:	a00ad43a 	srli	r5,r20,16
41108de0:	401ad43a 	srli	r13,r8,16
41108de4:	a53fffcc 	andi	r20,r20,65535
41108de8:	423fffcc 	andi	r8,r8,65535
41108dec:	4519383a 	mul	r12,r8,r20
41108df0:	4147383a 	mul	r3,r8,r5
41108df4:	6d09383a 	mul	r4,r13,r20
41108df8:	600cd43a 	srli	r6,r12,16
41108dfc:	2b5d383a 	mul	r14,r5,r13
41108e00:	20c9883a 	add	r4,r4,r3
41108e04:	310d883a 	add	r6,r6,r4
41108e08:	30c0022e 	bgeu	r6,r3,41108e14 <__muldf3+0x378>
41108e0c:	00c00074 	movhi	r3,1
41108e10:	70dd883a 	add	r14,r14,r3
41108e14:	8826d43a 	srli	r19,r17,16
41108e18:	8bffffcc 	andi	r15,r17,65535
41108e1c:	7d23383a 	mul	r17,r15,r20
41108e20:	7949383a 	mul	r4,r15,r5
41108e24:	9d29383a 	mul	r20,r19,r20
41108e28:	8814d43a 	srli	r10,r17,16
41108e2c:	3012943a 	slli	r9,r6,16
41108e30:	a129883a 	add	r20,r20,r4
41108e34:	633fffcc 	andi	r12,r12,65535
41108e38:	5515883a 	add	r10,r10,r20
41108e3c:	3006d43a 	srli	r3,r6,16
41108e40:	4b13883a 	add	r9,r9,r12
41108e44:	2ccb383a 	mul	r5,r5,r19
41108e48:	5100022e 	bgeu	r10,r4,41108e54 <__muldf3+0x3b8>
41108e4c:	01000074 	movhi	r4,1
41108e50:	290b883a 	add	r5,r5,r4
41108e54:	802ad43a 	srli	r21,r16,16
41108e58:	843fffcc 	andi	r16,r16,65535
41108e5c:	440d383a 	mul	r6,r8,r16
41108e60:	4565383a 	mul	r18,r8,r21
41108e64:	8349383a 	mul	r4,r16,r13
41108e68:	500e943a 	slli	r7,r10,16
41108e6c:	3010d43a 	srli	r8,r6,16
41108e70:	5028d43a 	srli	r20,r10,16
41108e74:	2489883a 	add	r4,r4,r18
41108e78:	8abfffcc 	andi	r10,r17,65535
41108e7c:	3a95883a 	add	r10,r7,r10
41108e80:	4119883a 	add	r12,r8,r4
41108e84:	a169883a 	add	r20,r20,r5
41108e88:	1a87883a 	add	r3,r3,r10
41108e8c:	6d5b383a 	mul	r13,r13,r21
41108e90:	6480022e 	bgeu	r12,r18,41108e9c <__muldf3+0x400>
41108e94:	01000074 	movhi	r4,1
41108e98:	691b883a 	add	r13,r13,r4
41108e9c:	7c25383a 	mul	r18,r15,r16
41108ea0:	7d4b383a 	mul	r5,r15,r21
41108ea4:	84cf383a 	mul	r7,r16,r19
41108ea8:	901ed43a 	srli	r15,r18,16
41108eac:	6008d43a 	srli	r4,r12,16
41108eb0:	6010943a 	slli	r8,r12,16
41108eb4:	394f883a 	add	r7,r7,r5
41108eb8:	333fffcc 	andi	r12,r6,65535
41108ebc:	79df883a 	add	r15,r15,r7
41108ec0:	235b883a 	add	r13,r4,r13
41108ec4:	9d63383a 	mul	r17,r19,r21
41108ec8:	4309883a 	add	r4,r8,r12
41108ecc:	7940022e 	bgeu	r15,r5,41108ed8 <__muldf3+0x43c>
41108ed0:	01400074 	movhi	r5,1
41108ed4:	8963883a 	add	r17,r17,r5
41108ed8:	780a943a 	slli	r5,r15,16
41108edc:	91bfffcc 	andi	r6,r18,65535
41108ee0:	70c7883a 	add	r3,r14,r3
41108ee4:	298d883a 	add	r6,r5,r6
41108ee8:	1a8f803a 	cmpltu	r7,r3,r10
41108eec:	350b883a 	add	r5,r6,r20
41108ef0:	20c7883a 	add	r3,r4,r3
41108ef4:	3955883a 	add	r10,r7,r5
41108ef8:	1909803a 	cmpltu	r4,r3,r4
41108efc:	6a91883a 	add	r8,r13,r10
41108f00:	780cd43a 	srli	r6,r15,16
41108f04:	2219883a 	add	r12,r4,r8
41108f08:	2d0b803a 	cmpltu	r5,r5,r20
41108f0c:	51cf803a 	cmpltu	r7,r10,r7
41108f10:	29ceb03a 	or	r7,r5,r7
41108f14:	4351803a 	cmpltu	r8,r8,r13
41108f18:	610b803a 	cmpltu	r5,r12,r4
41108f1c:	4148b03a 	or	r4,r8,r5
41108f20:	398f883a 	add	r7,r7,r6
41108f24:	3909883a 	add	r4,r7,r4
41108f28:	1810927a 	slli	r8,r3,9
41108f2c:	2449883a 	add	r4,r4,r17
41108f30:	2008927a 	slli	r4,r4,9
41108f34:	6022d5fa 	srli	r17,r12,23
41108f38:	1806d5fa 	srli	r3,r3,23
41108f3c:	4252b03a 	or	r9,r8,r9
41108f40:	600a927a 	slli	r5,r12,9
41108f44:	4810c03a 	cmpne	r8,r9,zero
41108f48:	2462b03a 	or	r17,r4,r17
41108f4c:	40c6b03a 	or	r3,r8,r3
41108f50:	8900402c 	andhi	r4,r17,256
41108f54:	1950b03a 	or	r8,r3,r5
41108f58:	20000726 	beq	r4,zero,41108f78 <__muldf3+0x4dc>
41108f5c:	4006d07a 	srli	r3,r8,1
41108f60:	880497fa 	slli	r2,r17,31
41108f64:	4200004c 	andi	r8,r8,1
41108f68:	8822d07a 	srli	r17,r17,1
41108f6c:	1a10b03a 	or	r8,r3,r8
41108f70:	1210b03a 	or	r8,r2,r8
41108f74:	5805883a 	mov	r2,r11
41108f78:	1140ffc4 	addi	r5,r2,1023
41108f7c:	0140440e 	bge	zero,r5,41109090 <__muldf3+0x5f4>
41108f80:	40c001cc 	andi	r3,r8,7
41108f84:	18000726 	beq	r3,zero,41108fa4 <__muldf3+0x508>
41108f88:	40c003cc 	andi	r3,r8,15
41108f8c:	01000104 	movi	r4,4
41108f90:	19000426 	beq	r3,r4,41108fa4 <__muldf3+0x508>
41108f94:	4107883a 	add	r3,r8,r4
41108f98:	1a11803a 	cmpltu	r8,r3,r8
41108f9c:	8a23883a 	add	r17,r17,r8
41108fa0:	1811883a 	mov	r8,r3
41108fa4:	88c0402c 	andhi	r3,r17,256
41108fa8:	18000426 	beq	r3,zero,41108fbc <__muldf3+0x520>
41108fac:	11410004 	addi	r5,r2,1024
41108fb0:	00bfc034 	movhi	r2,65280
41108fb4:	10bfffc4 	addi	r2,r2,-1
41108fb8:	88a2703a 	and	r17,r17,r2
41108fbc:	0081ff84 	movi	r2,2046
41108fc0:	117f6416 	blt	r2,r5,41108d54 <__reset+0xbb0e8d54>
41108fc4:	8828977a 	slli	r20,r17,29
41108fc8:	4010d0fa 	srli	r8,r8,3
41108fcc:	8822927a 	slli	r17,r17,9
41108fd0:	2881ffcc 	andi	r2,r5,2047
41108fd4:	a228b03a 	or	r20,r20,r8
41108fd8:	880ad33a 	srli	r5,r17,12
41108fdc:	b02b883a 	mov	r21,r22
41108fe0:	003f0d06 	br	41108c18 <__reset+0xbb0e8c18>
41108fe4:	8080022c 	andhi	r2,r16,8
41108fe8:	10000926 	beq	r2,zero,41109010 <__muldf3+0x574>
41108fec:	8880022c 	andhi	r2,r17,8
41108ff0:	1000071e 	bne	r2,zero,41109010 <__muldf3+0x574>
41108ff4:	00800434 	movhi	r2,16
41108ff8:	89400234 	orhi	r5,r17,8
41108ffc:	10bfffc4 	addi	r2,r2,-1
41109000:	b82b883a 	mov	r21,r23
41109004:	288a703a 	and	r5,r5,r2
41109008:	4029883a 	mov	r20,r8
4110900c:	003f6806 	br	41108db0 <__reset+0xbb0e8db0>
41109010:	00800434 	movhi	r2,16
41109014:	81400234 	orhi	r5,r16,8
41109018:	10bfffc4 	addi	r2,r2,-1
4110901c:	288a703a 	and	r5,r5,r2
41109020:	003f6306 	br	41108db0 <__reset+0xbb0e8db0>
41109024:	147ff604 	addi	r17,r2,-40
41109028:	3462983a 	sll	r17,r6,r17
4110902c:	0011883a 	mov	r8,zero
41109030:	003f4406 	br	41108d44 <__reset+0xbb0e8d44>
41109034:	3009883a 	mov	r4,r6
41109038:	d9800215 	stw	r6,8(sp)
4110903c:	da400115 	stw	r9,4(sp)
41109040:	da800015 	stw	r10,0(sp)
41109044:	110946c0 	call	4110946c <__clzsi2>
41109048:	10800804 	addi	r2,r2,32
4110904c:	da800017 	ldw	r10,0(sp)
41109050:	da400117 	ldw	r9,4(sp)
41109054:	d9800217 	ldw	r6,8(sp)
41109058:	003f3006 	br	41108d1c <__reset+0xbb0e8d1c>
4110905c:	143ff604 	addi	r16,r2,-40
41109060:	9c20983a 	sll	r16,r19,r16
41109064:	0029883a 	mov	r20,zero
41109068:	003f1606 	br	41108cc4 <__reset+0xbb0e8cc4>
4110906c:	d9800215 	stw	r6,8(sp)
41109070:	d9c00015 	stw	r7,0(sp)
41109074:	da400115 	stw	r9,4(sp)
41109078:	110946c0 	call	4110946c <__clzsi2>
4110907c:	10800804 	addi	r2,r2,32
41109080:	da400117 	ldw	r9,4(sp)
41109084:	d9c00017 	ldw	r7,0(sp)
41109088:	d9800217 	ldw	r6,8(sp)
4110908c:	003f0306 	br	41108c9c <__reset+0xbb0e8c9c>
41109090:	00c00044 	movi	r3,1
41109094:	1947c83a 	sub	r3,r3,r5
41109098:	00800e04 	movi	r2,56
4110909c:	10feda16 	blt	r2,r3,41108c08 <__reset+0xbb0e8c08>
411090a0:	008007c4 	movi	r2,31
411090a4:	10c01b16 	blt	r2,r3,41109114 <__muldf3+0x678>
411090a8:	00800804 	movi	r2,32
411090ac:	10c5c83a 	sub	r2,r2,r3
411090b0:	888a983a 	sll	r5,r17,r2
411090b4:	40c8d83a 	srl	r4,r8,r3
411090b8:	4084983a 	sll	r2,r8,r2
411090bc:	88e2d83a 	srl	r17,r17,r3
411090c0:	2906b03a 	or	r3,r5,r4
411090c4:	1004c03a 	cmpne	r2,r2,zero
411090c8:	1886b03a 	or	r3,r3,r2
411090cc:	188001cc 	andi	r2,r3,7
411090d0:	10000726 	beq	r2,zero,411090f0 <__muldf3+0x654>
411090d4:	188003cc 	andi	r2,r3,15
411090d8:	01000104 	movi	r4,4
411090dc:	11000426 	beq	r2,r4,411090f0 <__muldf3+0x654>
411090e0:	1805883a 	mov	r2,r3
411090e4:	10c00104 	addi	r3,r2,4
411090e8:	1885803a 	cmpltu	r2,r3,r2
411090ec:	88a3883a 	add	r17,r17,r2
411090f0:	8880202c 	andhi	r2,r17,128
411090f4:	10001c26 	beq	r2,zero,41109168 <__muldf3+0x6cc>
411090f8:	b02b883a 	mov	r21,r22
411090fc:	00800044 	movi	r2,1
41109100:	000b883a 	mov	r5,zero
41109104:	0029883a 	mov	r20,zero
41109108:	003ec306 	br	41108c18 <__reset+0xbb0e8c18>
4110910c:	5805883a 	mov	r2,r11
41109110:	003f9906 	br	41108f78 <__reset+0xbb0e8f78>
41109114:	00bff844 	movi	r2,-31
41109118:	1145c83a 	sub	r2,r2,r5
4110911c:	8888d83a 	srl	r4,r17,r2
41109120:	00800804 	movi	r2,32
41109124:	18801a26 	beq	r3,r2,41109190 <__muldf3+0x6f4>
41109128:	00801004 	movi	r2,64
4110912c:	10c5c83a 	sub	r2,r2,r3
41109130:	8884983a 	sll	r2,r17,r2
41109134:	1204b03a 	or	r2,r2,r8
41109138:	1004c03a 	cmpne	r2,r2,zero
4110913c:	2084b03a 	or	r2,r4,r2
41109140:	144001cc 	andi	r17,r2,7
41109144:	88000d1e 	bne	r17,zero,4110917c <__muldf3+0x6e0>
41109148:	000b883a 	mov	r5,zero
4110914c:	1028d0fa 	srli	r20,r2,3
41109150:	b02b883a 	mov	r21,r22
41109154:	0005883a 	mov	r2,zero
41109158:	a468b03a 	or	r20,r20,r17
4110915c:	003eae06 	br	41108c18 <__reset+0xbb0e8c18>
41109160:	1007883a 	mov	r3,r2
41109164:	0023883a 	mov	r17,zero
41109168:	880a927a 	slli	r5,r17,9
4110916c:	1805883a 	mov	r2,r3
41109170:	8822977a 	slli	r17,r17,29
41109174:	280ad33a 	srli	r5,r5,12
41109178:	003ff406 	br	4110914c <__reset+0xbb0e914c>
4110917c:	10c003cc 	andi	r3,r2,15
41109180:	01000104 	movi	r4,4
41109184:	193ff626 	beq	r3,r4,41109160 <__reset+0xbb0e9160>
41109188:	0023883a 	mov	r17,zero
4110918c:	003fd506 	br	411090e4 <__reset+0xbb0e90e4>
41109190:	0005883a 	mov	r2,zero
41109194:	003fe706 	br	41109134 <__reset+0xbb0e9134>
41109198:	00800434 	movhi	r2,16
4110919c:	89400234 	orhi	r5,r17,8
411091a0:	10bfffc4 	addi	r2,r2,-1
411091a4:	b02b883a 	mov	r21,r22
411091a8:	288a703a 	and	r5,r5,r2
411091ac:	4029883a 	mov	r20,r8
411091b0:	003eff06 	br	41108db0 <__reset+0xbb0e8db0>

411091b4 <__extendsfdf2>:
411091b4:	200ad5fa 	srli	r5,r4,23
411091b8:	defffd04 	addi	sp,sp,-12
411091bc:	dc400115 	stw	r17,4(sp)
411091c0:	29403fcc 	andi	r5,r5,255
411091c4:	29800044 	addi	r6,r5,1
411091c8:	04402034 	movhi	r17,128
411091cc:	dc000015 	stw	r16,0(sp)
411091d0:	8c7fffc4 	addi	r17,r17,-1
411091d4:	dfc00215 	stw	ra,8(sp)
411091d8:	31803fcc 	andi	r6,r6,255
411091dc:	00800044 	movi	r2,1
411091e0:	8922703a 	and	r17,r17,r4
411091e4:	2020d7fa 	srli	r16,r4,31
411091e8:	1180110e 	bge	r2,r6,41109230 <__extendsfdf2+0x7c>
411091ec:	880cd0fa 	srli	r6,r17,3
411091f0:	8822977a 	slli	r17,r17,29
411091f4:	2940e004 	addi	r5,r5,896
411091f8:	2941ffcc 	andi	r5,r5,2047
411091fc:	2804953a 	slli	r2,r5,20
41109200:	01400434 	movhi	r5,16
41109204:	800697fa 	slli	r3,r16,31
41109208:	297fffc4 	addi	r5,r5,-1
4110920c:	314a703a 	and	r5,r6,r5
41109210:	288ab03a 	or	r5,r5,r2
41109214:	28c6b03a 	or	r3,r5,r3
41109218:	8805883a 	mov	r2,r17
4110921c:	dfc00217 	ldw	ra,8(sp)
41109220:	dc400117 	ldw	r17,4(sp)
41109224:	dc000017 	ldw	r16,0(sp)
41109228:	dec00304 	addi	sp,sp,12
4110922c:	f800283a 	ret
41109230:	2800111e 	bne	r5,zero,41109278 <__extendsfdf2+0xc4>
41109234:	88001c26 	beq	r17,zero,411092a8 <__extendsfdf2+0xf4>
41109238:	8809883a 	mov	r4,r17
4110923c:	110946c0 	call	4110946c <__clzsi2>
41109240:	00c00284 	movi	r3,10
41109244:	18801b16 	blt	r3,r2,411092b4 <__extendsfdf2+0x100>
41109248:	018002c4 	movi	r6,11
4110924c:	308dc83a 	sub	r6,r6,r2
41109250:	11000544 	addi	r4,r2,21
41109254:	8986d83a 	srl	r3,r17,r6
41109258:	8922983a 	sll	r17,r17,r4
4110925c:	0180e244 	movi	r6,905
41109260:	01400434 	movhi	r5,16
41109264:	3085c83a 	sub	r2,r6,r2
41109268:	297fffc4 	addi	r5,r5,-1
4110926c:	194c703a 	and	r6,r3,r5
41109270:	1141ffcc 	andi	r5,r2,2047
41109274:	003fe006 	br	411091f8 <__reset+0xbb0e91f8>
41109278:	88000826 	beq	r17,zero,4110929c <__extendsfdf2+0xe8>
4110927c:	880cd0fa 	srli	r6,r17,3
41109280:	00800434 	movhi	r2,16
41109284:	10bfffc4 	addi	r2,r2,-1
41109288:	31800234 	orhi	r6,r6,8
4110928c:	8822977a 	slli	r17,r17,29
41109290:	308c703a 	and	r6,r6,r2
41109294:	0141ffc4 	movi	r5,2047
41109298:	003fd706 	br	411091f8 <__reset+0xbb0e91f8>
4110929c:	0141ffc4 	movi	r5,2047
411092a0:	000d883a 	mov	r6,zero
411092a4:	003fd406 	br	411091f8 <__reset+0xbb0e91f8>
411092a8:	000b883a 	mov	r5,zero
411092ac:	000d883a 	mov	r6,zero
411092b0:	003fd106 	br	411091f8 <__reset+0xbb0e91f8>
411092b4:	11bffd44 	addi	r6,r2,-11
411092b8:	8986983a 	sll	r3,r17,r6
411092bc:	0023883a 	mov	r17,zero
411092c0:	003fe606 	br	4110925c <__reset+0xbb0e925c>

411092c4 <__truncdfsf2>:
411092c4:	2810d53a 	srli	r8,r5,20
411092c8:	01c00434 	movhi	r7,16
411092cc:	39ffffc4 	addi	r7,r7,-1
411092d0:	29ce703a 	and	r7,r5,r7
411092d4:	4201ffcc 	andi	r8,r8,2047
411092d8:	380e90fa 	slli	r7,r7,3
411092dc:	200cd77a 	srli	r6,r4,29
411092e0:	42400044 	addi	r9,r8,1
411092e4:	4a41ffcc 	andi	r9,r9,2047
411092e8:	00c00044 	movi	r3,1
411092ec:	280ad7fa 	srli	r5,r5,31
411092f0:	31ceb03a 	or	r7,r6,r7
411092f4:	200490fa 	slli	r2,r4,3
411092f8:	1a40230e 	bge	r3,r9,41109388 <__truncdfsf2+0xc4>
411092fc:	40ff2004 	addi	r3,r8,-896
41109300:	01803f84 	movi	r6,254
41109304:	30c01516 	blt	r6,r3,4110935c <__truncdfsf2+0x98>
41109308:	00c0380e 	bge	zero,r3,411093ec <__truncdfsf2+0x128>
4110930c:	200c91ba 	slli	r6,r4,6
41109310:	380e90fa 	slli	r7,r7,3
41109314:	1004d77a 	srli	r2,r2,29
41109318:	300cc03a 	cmpne	r6,r6,zero
4110931c:	31ccb03a 	or	r6,r6,r7
41109320:	308cb03a 	or	r6,r6,r2
41109324:	308001cc 	andi	r2,r6,7
41109328:	10000426 	beq	r2,zero,4110933c <__truncdfsf2+0x78>
4110932c:	308003cc 	andi	r2,r6,15
41109330:	01000104 	movi	r4,4
41109334:	11000126 	beq	r2,r4,4110933c <__truncdfsf2+0x78>
41109338:	31800104 	addi	r6,r6,4
4110933c:	3081002c 	andhi	r2,r6,1024
41109340:	10001626 	beq	r2,zero,4110939c <__truncdfsf2+0xd8>
41109344:	18c00044 	addi	r3,r3,1
41109348:	00803fc4 	movi	r2,255
4110934c:	18800326 	beq	r3,r2,4110935c <__truncdfsf2+0x98>
41109350:	300c91ba 	slli	r6,r6,6
41109354:	300cd27a 	srli	r6,r6,9
41109358:	00000206 	br	41109364 <__truncdfsf2+0xa0>
4110935c:	00ffffc4 	movi	r3,-1
41109360:	000d883a 	mov	r6,zero
41109364:	18c03fcc 	andi	r3,r3,255
41109368:	180895fa 	slli	r4,r3,23
4110936c:	00c02034 	movhi	r3,128
41109370:	280a97fa 	slli	r5,r5,31
41109374:	18ffffc4 	addi	r3,r3,-1
41109378:	30c6703a 	and	r3,r6,r3
4110937c:	1906b03a 	or	r3,r3,r4
41109380:	1944b03a 	or	r2,r3,r5
41109384:	f800283a 	ret
41109388:	40000b1e 	bne	r8,zero,411093b8 <__truncdfsf2+0xf4>
4110938c:	388cb03a 	or	r6,r7,r2
41109390:	0007883a 	mov	r3,zero
41109394:	30000426 	beq	r6,zero,411093a8 <__truncdfsf2+0xe4>
41109398:	01800144 	movi	r6,5
4110939c:	00803fc4 	movi	r2,255
411093a0:	300cd0fa 	srli	r6,r6,3
411093a4:	18800a26 	beq	r3,r2,411093d0 <__truncdfsf2+0x10c>
411093a8:	00802034 	movhi	r2,128
411093ac:	10bfffc4 	addi	r2,r2,-1
411093b0:	308c703a 	and	r6,r6,r2
411093b4:	003feb06 	br	41109364 <__reset+0xbb0e9364>
411093b8:	3888b03a 	or	r4,r7,r2
411093bc:	203fe726 	beq	r4,zero,4110935c <__reset+0xbb0e935c>
411093c0:	380c90fa 	slli	r6,r7,3
411093c4:	00c03fc4 	movi	r3,255
411093c8:	31808034 	orhi	r6,r6,512
411093cc:	003fd506 	br	41109324 <__reset+0xbb0e9324>
411093d0:	303fe226 	beq	r6,zero,4110935c <__reset+0xbb0e935c>
411093d4:	00802034 	movhi	r2,128
411093d8:	31801034 	orhi	r6,r6,64
411093dc:	10bfffc4 	addi	r2,r2,-1
411093e0:	00ffffc4 	movi	r3,-1
411093e4:	308c703a 	and	r6,r6,r2
411093e8:	003fde06 	br	41109364 <__reset+0xbb0e9364>
411093ec:	013ffa44 	movi	r4,-23
411093f0:	19000e16 	blt	r3,r4,4110942c <__truncdfsf2+0x168>
411093f4:	01000784 	movi	r4,30
411093f8:	20c9c83a 	sub	r4,r4,r3
411093fc:	018007c4 	movi	r6,31
41109400:	39c02034 	orhi	r7,r7,128
41109404:	31000b16 	blt	r6,r4,41109434 <__truncdfsf2+0x170>
41109408:	423f2084 	addi	r8,r8,-894
4110940c:	120c983a 	sll	r6,r2,r8
41109410:	3a0e983a 	sll	r7,r7,r8
41109414:	1104d83a 	srl	r2,r2,r4
41109418:	300cc03a 	cmpne	r6,r6,zero
4110941c:	31ceb03a 	or	r7,r6,r7
41109420:	388cb03a 	or	r6,r7,r2
41109424:	0007883a 	mov	r3,zero
41109428:	003fbe06 	br	41109324 <__reset+0xbb0e9324>
4110942c:	0007883a 	mov	r3,zero
41109430:	003fd906 	br	41109398 <__reset+0xbb0e9398>
41109434:	01bfff84 	movi	r6,-2
41109438:	30cdc83a 	sub	r6,r6,r3
4110943c:	00c00804 	movi	r3,32
41109440:	398cd83a 	srl	r6,r7,r6
41109444:	20c00726 	beq	r4,r3,41109464 <__truncdfsf2+0x1a0>
41109448:	423f2884 	addi	r8,r8,-862
4110944c:	3a0e983a 	sll	r7,r7,r8
41109450:	3884b03a 	or	r2,r7,r2
41109454:	1004c03a 	cmpne	r2,r2,zero
41109458:	118cb03a 	or	r6,r2,r6
4110945c:	0007883a 	mov	r3,zero
41109460:	003fb006 	br	41109324 <__reset+0xbb0e9324>
41109464:	000f883a 	mov	r7,zero
41109468:	003ff906 	br	41109450 <__reset+0xbb0e9450>

4110946c <__clzsi2>:
4110946c:	00bfffd4 	movui	r2,65535
41109470:	11000536 	bltu	r2,r4,41109488 <__clzsi2+0x1c>
41109474:	00803fc4 	movi	r2,255
41109478:	11000f36 	bltu	r2,r4,411094b8 <__clzsi2+0x4c>
4110947c:	00800804 	movi	r2,32
41109480:	0007883a 	mov	r3,zero
41109484:	00000506 	br	4110949c <__clzsi2+0x30>
41109488:	00804034 	movhi	r2,256
4110948c:	10bfffc4 	addi	r2,r2,-1
41109490:	11000c2e 	bgeu	r2,r4,411094c4 <__clzsi2+0x58>
41109494:	00800204 	movi	r2,8
41109498:	00c00604 	movi	r3,24
4110949c:	20c8d83a 	srl	r4,r4,r3
411094a0:	00d044b4 	movhi	r3,16658
411094a4:	18eef2c4 	addi	r3,r3,-17461
411094a8:	1909883a 	add	r4,r3,r4
411094ac:	20c00003 	ldbu	r3,0(r4)
411094b0:	10c5c83a 	sub	r2,r2,r3
411094b4:	f800283a 	ret
411094b8:	00800604 	movi	r2,24
411094bc:	00c00204 	movi	r3,8
411094c0:	003ff606 	br	4110949c <__reset+0xbb0e949c>
411094c4:	00800404 	movi	r2,16
411094c8:	1007883a 	mov	r3,r2
411094cc:	003ff306 	br	4110949c <__reset+0xbb0e949c>

411094d0 <memcpy>:
411094d0:	defffd04 	addi	sp,sp,-12
411094d4:	dfc00215 	stw	ra,8(sp)
411094d8:	dc400115 	stw	r17,4(sp)
411094dc:	dc000015 	stw	r16,0(sp)
411094e0:	00c003c4 	movi	r3,15
411094e4:	2005883a 	mov	r2,r4
411094e8:	1980452e 	bgeu	r3,r6,41109600 <memcpy+0x130>
411094ec:	2906b03a 	or	r3,r5,r4
411094f0:	18c000cc 	andi	r3,r3,3
411094f4:	1800441e 	bne	r3,zero,41109608 <memcpy+0x138>
411094f8:	347ffc04 	addi	r17,r6,-16
411094fc:	8822d13a 	srli	r17,r17,4
41109500:	28c00104 	addi	r3,r5,4
41109504:	23400104 	addi	r13,r4,4
41109508:	8820913a 	slli	r16,r17,4
4110950c:	2b000204 	addi	r12,r5,8
41109510:	22c00204 	addi	r11,r4,8
41109514:	84000504 	addi	r16,r16,20
41109518:	2a800304 	addi	r10,r5,12
4110951c:	22400304 	addi	r9,r4,12
41109520:	2c21883a 	add	r16,r5,r16
41109524:	2811883a 	mov	r8,r5
41109528:	200f883a 	mov	r7,r4
4110952c:	41000017 	ldw	r4,0(r8)
41109530:	1fc00017 	ldw	ra,0(r3)
41109534:	63c00017 	ldw	r15,0(r12)
41109538:	39000015 	stw	r4,0(r7)
4110953c:	53800017 	ldw	r14,0(r10)
41109540:	6fc00015 	stw	ra,0(r13)
41109544:	5bc00015 	stw	r15,0(r11)
41109548:	4b800015 	stw	r14,0(r9)
4110954c:	18c00404 	addi	r3,r3,16
41109550:	39c00404 	addi	r7,r7,16
41109554:	42000404 	addi	r8,r8,16
41109558:	6b400404 	addi	r13,r13,16
4110955c:	63000404 	addi	r12,r12,16
41109560:	5ac00404 	addi	r11,r11,16
41109564:	52800404 	addi	r10,r10,16
41109568:	4a400404 	addi	r9,r9,16
4110956c:	1c3fef1e 	bne	r3,r16,4110952c <__reset+0xbb0e952c>
41109570:	89c00044 	addi	r7,r17,1
41109574:	380e913a 	slli	r7,r7,4
41109578:	310003cc 	andi	r4,r6,15
4110957c:	02c000c4 	movi	r11,3
41109580:	11c7883a 	add	r3,r2,r7
41109584:	29cb883a 	add	r5,r5,r7
41109588:	5900212e 	bgeu	r11,r4,41109610 <memcpy+0x140>
4110958c:	1813883a 	mov	r9,r3
41109590:	2811883a 	mov	r8,r5
41109594:	200f883a 	mov	r7,r4
41109598:	42800017 	ldw	r10,0(r8)
4110959c:	4a400104 	addi	r9,r9,4
411095a0:	39ffff04 	addi	r7,r7,-4
411095a4:	4abfff15 	stw	r10,-4(r9)
411095a8:	42000104 	addi	r8,r8,4
411095ac:	59fffa36 	bltu	r11,r7,41109598 <__reset+0xbb0e9598>
411095b0:	213fff04 	addi	r4,r4,-4
411095b4:	2008d0ba 	srli	r4,r4,2
411095b8:	318000cc 	andi	r6,r6,3
411095bc:	21000044 	addi	r4,r4,1
411095c0:	2109883a 	add	r4,r4,r4
411095c4:	2109883a 	add	r4,r4,r4
411095c8:	1907883a 	add	r3,r3,r4
411095cc:	290b883a 	add	r5,r5,r4
411095d0:	30000626 	beq	r6,zero,411095ec <memcpy+0x11c>
411095d4:	198d883a 	add	r6,r3,r6
411095d8:	29c00003 	ldbu	r7,0(r5)
411095dc:	18c00044 	addi	r3,r3,1
411095e0:	29400044 	addi	r5,r5,1
411095e4:	19ffffc5 	stb	r7,-1(r3)
411095e8:	19bffb1e 	bne	r3,r6,411095d8 <__reset+0xbb0e95d8>
411095ec:	dfc00217 	ldw	ra,8(sp)
411095f0:	dc400117 	ldw	r17,4(sp)
411095f4:	dc000017 	ldw	r16,0(sp)
411095f8:	dec00304 	addi	sp,sp,12
411095fc:	f800283a 	ret
41109600:	2007883a 	mov	r3,r4
41109604:	003ff206 	br	411095d0 <__reset+0xbb0e95d0>
41109608:	2007883a 	mov	r3,r4
4110960c:	003ff106 	br	411095d4 <__reset+0xbb0e95d4>
41109610:	200d883a 	mov	r6,r4
41109614:	003fee06 	br	411095d0 <__reset+0xbb0e95d0>

41109618 <_printf_r>:
41109618:	defffd04 	addi	sp,sp,-12
4110961c:	2805883a 	mov	r2,r5
41109620:	dfc00015 	stw	ra,0(sp)
41109624:	d9800115 	stw	r6,4(sp)
41109628:	d9c00215 	stw	r7,8(sp)
4110962c:	21400217 	ldw	r5,8(r4)
41109630:	d9c00104 	addi	r7,sp,4
41109634:	100d883a 	mov	r6,r2
41109638:	11098100 	call	41109810 <___vfprintf_internal_r>
4110963c:	dfc00017 	ldw	ra,0(sp)
41109640:	dec00304 	addi	sp,sp,12
41109644:	f800283a 	ret

41109648 <printf>:
41109648:	defffc04 	addi	sp,sp,-16
4110964c:	dfc00015 	stw	ra,0(sp)
41109650:	d9400115 	stw	r5,4(sp)
41109654:	d9800215 	stw	r6,8(sp)
41109658:	d9c00315 	stw	r7,12(sp)
4110965c:	009044b4 	movhi	r2,16658
41109660:	10b76e04 	addi	r2,r2,-8776
41109664:	10800017 	ldw	r2,0(r2)
41109668:	200b883a 	mov	r5,r4
4110966c:	d9800104 	addi	r6,sp,4
41109670:	11000217 	ldw	r4,8(r2)
41109674:	110ba080 	call	4110ba08 <__vfprintf_internal>
41109678:	dfc00017 	ldw	ra,0(sp)
4110967c:	dec00404 	addi	sp,sp,16
41109680:	f800283a 	ret

41109684 <_putchar_r>:
41109684:	21800217 	ldw	r6,8(r4)
41109688:	11103841 	jmpi	41110384 <_putc_r>

4110968c <putchar>:
4110968c:	009044b4 	movhi	r2,16658
41109690:	10b76e04 	addi	r2,r2,-8776
41109694:	200b883a 	mov	r5,r4
41109698:	11000017 	ldw	r4,0(r2)
4110969c:	21800217 	ldw	r6,8(r4)
411096a0:	11103841 	jmpi	41110384 <_putc_r>

411096a4 <_puts_r>:
411096a4:	defff604 	addi	sp,sp,-40
411096a8:	dc000715 	stw	r16,28(sp)
411096ac:	2021883a 	mov	r16,r4
411096b0:	2809883a 	mov	r4,r5
411096b4:	dc400815 	stw	r17,32(sp)
411096b8:	dfc00915 	stw	ra,36(sp)
411096bc:	2823883a 	mov	r17,r5
411096c0:	11097780 	call	41109778 <strlen>
411096c4:	10c00044 	addi	r3,r2,1
411096c8:	d8800115 	stw	r2,4(sp)
411096cc:	009044b4 	movhi	r2,16658
411096d0:	10af3304 	addi	r2,r2,-17204
411096d4:	d8800215 	stw	r2,8(sp)
411096d8:	00800044 	movi	r2,1
411096dc:	d8800315 	stw	r2,12(sp)
411096e0:	00800084 	movi	r2,2
411096e4:	dc400015 	stw	r17,0(sp)
411096e8:	d8c00615 	stw	r3,24(sp)
411096ec:	dec00415 	stw	sp,16(sp)
411096f0:	d8800515 	stw	r2,20(sp)
411096f4:	80000226 	beq	r16,zero,41109700 <_puts_r+0x5c>
411096f8:	80800e17 	ldw	r2,56(r16)
411096fc:	10001426 	beq	r2,zero,41109750 <_puts_r+0xac>
41109700:	81400217 	ldw	r5,8(r16)
41109704:	2880030b 	ldhu	r2,12(r5)
41109708:	10c8000c 	andi	r3,r2,8192
4110970c:	1800061e 	bne	r3,zero,41109728 <_puts_r+0x84>
41109710:	29001917 	ldw	r4,100(r5)
41109714:	00f7ffc4 	movi	r3,-8193
41109718:	10880014 	ori	r2,r2,8192
4110971c:	20c6703a 	and	r3,r4,r3
41109720:	2880030d 	sth	r2,12(r5)
41109724:	28c01915 	stw	r3,100(r5)
41109728:	d9800404 	addi	r6,sp,16
4110972c:	8009883a 	mov	r4,r16
41109730:	110df380 	call	4110df38 <__sfvwrite_r>
41109734:	1000091e 	bne	r2,zero,4110975c <_puts_r+0xb8>
41109738:	00800284 	movi	r2,10
4110973c:	dfc00917 	ldw	ra,36(sp)
41109740:	dc400817 	ldw	r17,32(sp)
41109744:	dc000717 	ldw	r16,28(sp)
41109748:	dec00a04 	addi	sp,sp,40
4110974c:	f800283a 	ret
41109750:	8009883a 	mov	r4,r16
41109754:	110dab40 	call	4110dab4 <__sinit>
41109758:	003fe906 	br	41109700 <__reset+0xbb0e9700>
4110975c:	00bfffc4 	movi	r2,-1
41109760:	003ff606 	br	4110973c <__reset+0xbb0e973c>

41109764 <puts>:
41109764:	009044b4 	movhi	r2,16658
41109768:	10b76e04 	addi	r2,r2,-8776
4110976c:	200b883a 	mov	r5,r4
41109770:	11000017 	ldw	r4,0(r2)
41109774:	11096a41 	jmpi	411096a4 <_puts_r>

41109778 <strlen>:
41109778:	208000cc 	andi	r2,r4,3
4110977c:	10002026 	beq	r2,zero,41109800 <strlen+0x88>
41109780:	20800007 	ldb	r2,0(r4)
41109784:	10002026 	beq	r2,zero,41109808 <strlen+0x90>
41109788:	2005883a 	mov	r2,r4
4110978c:	00000206 	br	41109798 <strlen+0x20>
41109790:	10c00007 	ldb	r3,0(r2)
41109794:	18001826 	beq	r3,zero,411097f8 <strlen+0x80>
41109798:	10800044 	addi	r2,r2,1
4110979c:	10c000cc 	andi	r3,r2,3
411097a0:	183ffb1e 	bne	r3,zero,41109790 <__reset+0xbb0e9790>
411097a4:	10c00017 	ldw	r3,0(r2)
411097a8:	01ffbff4 	movhi	r7,65279
411097ac:	39ffbfc4 	addi	r7,r7,-257
411097b0:	00ca303a 	nor	r5,zero,r3
411097b4:	01a02074 	movhi	r6,32897
411097b8:	19c7883a 	add	r3,r3,r7
411097bc:	31a02004 	addi	r6,r6,-32640
411097c0:	1946703a 	and	r3,r3,r5
411097c4:	1986703a 	and	r3,r3,r6
411097c8:	1800091e 	bne	r3,zero,411097f0 <strlen+0x78>
411097cc:	10800104 	addi	r2,r2,4
411097d0:	10c00017 	ldw	r3,0(r2)
411097d4:	19cb883a 	add	r5,r3,r7
411097d8:	00c6303a 	nor	r3,zero,r3
411097dc:	28c6703a 	and	r3,r5,r3
411097e0:	1986703a 	and	r3,r3,r6
411097e4:	183ff926 	beq	r3,zero,411097cc <__reset+0xbb0e97cc>
411097e8:	00000106 	br	411097f0 <strlen+0x78>
411097ec:	10800044 	addi	r2,r2,1
411097f0:	10c00007 	ldb	r3,0(r2)
411097f4:	183ffd1e 	bne	r3,zero,411097ec <__reset+0xbb0e97ec>
411097f8:	1105c83a 	sub	r2,r2,r4
411097fc:	f800283a 	ret
41109800:	2005883a 	mov	r2,r4
41109804:	003fe706 	br	411097a4 <__reset+0xbb0e97a4>
41109808:	0005883a 	mov	r2,zero
4110980c:	f800283a 	ret

41109810 <___vfprintf_internal_r>:
41109810:	deffb804 	addi	sp,sp,-288
41109814:	dfc04715 	stw	ra,284(sp)
41109818:	ddc04515 	stw	r23,276(sp)
4110981c:	dd404315 	stw	r21,268(sp)
41109820:	d9002c15 	stw	r4,176(sp)
41109824:	282f883a 	mov	r23,r5
41109828:	302b883a 	mov	r21,r6
4110982c:	d9c02d15 	stw	r7,180(sp)
41109830:	df004615 	stw	fp,280(sp)
41109834:	dd804415 	stw	r22,272(sp)
41109838:	dd004215 	stw	r20,264(sp)
4110983c:	dcc04115 	stw	r19,260(sp)
41109840:	dc804015 	stw	r18,256(sp)
41109844:	dc403f15 	stw	r17,252(sp)
41109848:	dc003e15 	stw	r16,248(sp)
4110984c:	110e6280 	call	4110e628 <_localeconv_r>
41109850:	10800017 	ldw	r2,0(r2)
41109854:	1009883a 	mov	r4,r2
41109858:	d8803415 	stw	r2,208(sp)
4110985c:	11097780 	call	41109778 <strlen>
41109860:	d8803715 	stw	r2,220(sp)
41109864:	d8802c17 	ldw	r2,176(sp)
41109868:	10000226 	beq	r2,zero,41109874 <___vfprintf_internal_r+0x64>
4110986c:	10800e17 	ldw	r2,56(r2)
41109870:	1000f926 	beq	r2,zero,41109c58 <___vfprintf_internal_r+0x448>
41109874:	b880030b 	ldhu	r2,12(r23)
41109878:	10c8000c 	andi	r3,r2,8192
4110987c:	1800061e 	bne	r3,zero,41109898 <___vfprintf_internal_r+0x88>
41109880:	b9001917 	ldw	r4,100(r23)
41109884:	00f7ffc4 	movi	r3,-8193
41109888:	10880014 	ori	r2,r2,8192
4110988c:	20c6703a 	and	r3,r4,r3
41109890:	b880030d 	sth	r2,12(r23)
41109894:	b8c01915 	stw	r3,100(r23)
41109898:	10c0020c 	andi	r3,r2,8
4110989c:	1800c126 	beq	r3,zero,41109ba4 <___vfprintf_internal_r+0x394>
411098a0:	b8c00417 	ldw	r3,16(r23)
411098a4:	1800bf26 	beq	r3,zero,41109ba4 <___vfprintf_internal_r+0x394>
411098a8:	1080068c 	andi	r2,r2,26
411098ac:	00c00284 	movi	r3,10
411098b0:	10c0c426 	beq	r2,r3,41109bc4 <___vfprintf_internal_r+0x3b4>
411098b4:	d8c00404 	addi	r3,sp,16
411098b8:	051044b4 	movhi	r20,16658
411098bc:	d9001e04 	addi	r4,sp,120
411098c0:	a52f4484 	addi	r20,r20,-17134
411098c4:	d8c01e15 	stw	r3,120(sp)
411098c8:	d8002015 	stw	zero,128(sp)
411098cc:	d8001f15 	stw	zero,124(sp)
411098d0:	d8003315 	stw	zero,204(sp)
411098d4:	d8003615 	stw	zero,216(sp)
411098d8:	d8003815 	stw	zero,224(sp)
411098dc:	1811883a 	mov	r8,r3
411098e0:	d8003915 	stw	zero,228(sp)
411098e4:	d8003a15 	stw	zero,232(sp)
411098e8:	d8002f15 	stw	zero,188(sp)
411098ec:	d9002815 	stw	r4,160(sp)
411098f0:	a8800007 	ldb	r2,0(r21)
411098f4:	10027b26 	beq	r2,zero,4110a2e4 <___vfprintf_internal_r+0xad4>
411098f8:	00c00944 	movi	r3,37
411098fc:	a821883a 	mov	r16,r21
41109900:	10c0021e 	bne	r2,r3,4110990c <___vfprintf_internal_r+0xfc>
41109904:	00001406 	br	41109958 <___vfprintf_internal_r+0x148>
41109908:	10c00326 	beq	r2,r3,41109918 <___vfprintf_internal_r+0x108>
4110990c:	84000044 	addi	r16,r16,1
41109910:	80800007 	ldb	r2,0(r16)
41109914:	103ffc1e 	bne	r2,zero,41109908 <__reset+0xbb0e9908>
41109918:	8563c83a 	sub	r17,r16,r21
4110991c:	88000e26 	beq	r17,zero,41109958 <___vfprintf_internal_r+0x148>
41109920:	d8c02017 	ldw	r3,128(sp)
41109924:	d8801f17 	ldw	r2,124(sp)
41109928:	45400015 	stw	r21,0(r8)
4110992c:	1c47883a 	add	r3,r3,r17
41109930:	10800044 	addi	r2,r2,1
41109934:	d8c02015 	stw	r3,128(sp)
41109938:	44400115 	stw	r17,4(r8)
4110993c:	d8801f15 	stw	r2,124(sp)
41109940:	00c001c4 	movi	r3,7
41109944:	1880a716 	blt	r3,r2,41109be4 <___vfprintf_internal_r+0x3d4>
41109948:	42000204 	addi	r8,r8,8
4110994c:	d9402f17 	ldw	r5,188(sp)
41109950:	2c4b883a 	add	r5,r5,r17
41109954:	d9402f15 	stw	r5,188(sp)
41109958:	80800007 	ldb	r2,0(r16)
4110995c:	1000a826 	beq	r2,zero,41109c00 <___vfprintf_internal_r+0x3f0>
41109960:	84400047 	ldb	r17,1(r16)
41109964:	00bfffc4 	movi	r2,-1
41109968:	85400044 	addi	r21,r16,1
4110996c:	d8002785 	stb	zero,158(sp)
41109970:	0007883a 	mov	r3,zero
41109974:	000f883a 	mov	r7,zero
41109978:	d8802915 	stw	r2,164(sp)
4110997c:	d8003115 	stw	zero,196(sp)
41109980:	0025883a 	mov	r18,zero
41109984:	01401604 	movi	r5,88
41109988:	01800244 	movi	r6,9
4110998c:	02800a84 	movi	r10,42
41109990:	02401b04 	movi	r9,108
41109994:	ad400044 	addi	r21,r21,1
41109998:	88bff804 	addi	r2,r17,-32
4110999c:	28830436 	bltu	r5,r2,4110a5b0 <___vfprintf_internal_r+0xda0>
411099a0:	100490ba 	slli	r2,r2,2
411099a4:	01104474 	movhi	r4,16657
411099a8:	21266e04 	addi	r4,r4,-26184
411099ac:	1105883a 	add	r2,r2,r4
411099b0:	10800017 	ldw	r2,0(r2)
411099b4:	1000683a 	jmp	r2
411099b8:	4110a4d0 	cmplti	r4,r8,17043
411099bc:	4110a5b0 	cmpltui	r4,r8,17046
411099c0:	4110a5b0 	cmpltui	r4,r8,17046
411099c4:	4110a4f0 	cmpltui	r4,r8,17043
411099c8:	4110a5b0 	cmpltui	r4,r8,17046
411099cc:	4110a5b0 	cmpltui	r4,r8,17046
411099d0:	4110a5b0 	cmpltui	r4,r8,17046
411099d4:	4110a5b0 	cmpltui	r4,r8,17046
411099d8:	4110a5b0 	cmpltui	r4,r8,17046
411099dc:	4110a5b0 	cmpltui	r4,r8,17046
411099e0:	41109c64 	muli	r4,r8,17009
411099e4:	4110a40c 	andi	r4,r8,17040
411099e8:	4110a5b0 	cmpltui	r4,r8,17046
411099ec:	41109b2c 	andhi	r4,r8,17004
411099f0:	41109c8c 	andi	r4,r8,17010
411099f4:	4110a5b0 	cmpltui	r4,r8,17046
411099f8:	41109ccc 	andi	r4,r8,17011
411099fc:	41109cd8 	cmpnei	r4,r8,17011
41109a00:	41109cd8 	cmpnei	r4,r8,17011
41109a04:	41109cd8 	cmpnei	r4,r8,17011
41109a08:	41109cd8 	cmpnei	r4,r8,17011
41109a0c:	41109cd8 	cmpnei	r4,r8,17011
41109a10:	41109cd8 	cmpnei	r4,r8,17011
41109a14:	41109cd8 	cmpnei	r4,r8,17011
41109a18:	41109cd8 	cmpnei	r4,r8,17011
41109a1c:	41109cd8 	cmpnei	r4,r8,17011
41109a20:	4110a5b0 	cmpltui	r4,r8,17046
41109a24:	4110a5b0 	cmpltui	r4,r8,17046
41109a28:	4110a5b0 	cmpltui	r4,r8,17046
41109a2c:	4110a5b0 	cmpltui	r4,r8,17046
41109a30:	4110a5b0 	cmpltui	r4,r8,17046
41109a34:	4110a5b0 	cmpltui	r4,r8,17046
41109a38:	4110a5b0 	cmpltui	r4,r8,17046
41109a3c:	4110a5b0 	cmpltui	r4,r8,17046
41109a40:	4110a5b0 	cmpltui	r4,r8,17046
41109a44:	4110a5b0 	cmpltui	r4,r8,17046
41109a48:	41109d0c 	andi	r4,r8,17012
41109a4c:	41109dc8 	cmpgei	r4,r8,17015
41109a50:	4110a5b0 	cmpltui	r4,r8,17046
41109a54:	41109dc8 	cmpgei	r4,r8,17015
41109a58:	4110a5b0 	cmpltui	r4,r8,17046
41109a5c:	4110a5b0 	cmpltui	r4,r8,17046
41109a60:	4110a5b0 	cmpltui	r4,r8,17046
41109a64:	4110a5b0 	cmpltui	r4,r8,17046
41109a68:	41109e68 	cmpgeui	r4,r8,17017
41109a6c:	4110a5b0 	cmpltui	r4,r8,17046
41109a70:	4110a5b0 	cmpltui	r4,r8,17046
41109a74:	41109e74 	orhi	r4,r8,17017
41109a78:	4110a5b0 	cmpltui	r4,r8,17046
41109a7c:	4110a5b0 	cmpltui	r4,r8,17046
41109a80:	4110a5b0 	cmpltui	r4,r8,17046
41109a84:	4110a5b0 	cmpltui	r4,r8,17046
41109a88:	4110a5b0 	cmpltui	r4,r8,17046
41109a8c:	4110a2ec 	andhi	r4,r8,17035
41109a90:	4110a5b0 	cmpltui	r4,r8,17046
41109a94:	4110a5b0 	cmpltui	r4,r8,17046
41109a98:	4110a34c 	andi	r4,r8,17037
41109a9c:	4110a5b0 	cmpltui	r4,r8,17046
41109aa0:	4110a5b0 	cmpltui	r4,r8,17046
41109aa4:	4110a5b0 	cmpltui	r4,r8,17046
41109aa8:	4110a5b0 	cmpltui	r4,r8,17046
41109aac:	4110a5b0 	cmpltui	r4,r8,17046
41109ab0:	4110a5b0 	cmpltui	r4,r8,17046
41109ab4:	4110a5b0 	cmpltui	r4,r8,17046
41109ab8:	4110a5b0 	cmpltui	r4,r8,17046
41109abc:	4110a5b0 	cmpltui	r4,r8,17046
41109ac0:	4110a5b0 	cmpltui	r4,r8,17046
41109ac4:	4110a55c 	xori	r4,r8,17045
41109ac8:	4110a4fc 	xorhi	r4,r8,17043
41109acc:	41109dc8 	cmpgei	r4,r8,17015
41109ad0:	41109dc8 	cmpgei	r4,r8,17015
41109ad4:	41109dc8 	cmpgei	r4,r8,17015
41109ad8:	4110a50c 	andi	r4,r8,17044
41109adc:	4110a4fc 	xorhi	r4,r8,17043
41109ae0:	4110a5b0 	cmpltui	r4,r8,17046
41109ae4:	4110a5b0 	cmpltui	r4,r8,17046
41109ae8:	4110a518 	cmpnei	r4,r8,17044
41109aec:	4110a5b0 	cmpltui	r4,r8,17046
41109af0:	4110a528 	cmpgeui	r4,r8,17044
41109af4:	4110a3fc 	xorhi	r4,r8,17039
41109af8:	41109b38 	rdprs	r4,r8,17004
41109afc:	4110a41c 	xori	r4,r8,17040
41109b00:	4110a5b0 	cmpltui	r4,r8,17046
41109b04:	4110a428 	cmpgeui	r4,r8,17040
41109b08:	4110a5b0 	cmpltui	r4,r8,17046
41109b0c:	4110a484 	addi	r4,r8,17042
41109b10:	4110a5b0 	cmpltui	r4,r8,17046
41109b14:	4110a5b0 	cmpltui	r4,r8,17046
41109b18:	4110a494 	ori	r4,r8,17042
41109b1c:	d9003117 	ldw	r4,196(sp)
41109b20:	d8802d15 	stw	r2,180(sp)
41109b24:	0109c83a 	sub	r4,zero,r4
41109b28:	d9003115 	stw	r4,196(sp)
41109b2c:	94800114 	ori	r18,r18,4
41109b30:	ac400007 	ldb	r17,0(r21)
41109b34:	003f9706 	br	41109994 <__reset+0xbb0e9994>
41109b38:	00800c04 	movi	r2,48
41109b3c:	d9002d17 	ldw	r4,180(sp)
41109b40:	d9402917 	ldw	r5,164(sp)
41109b44:	d8802705 	stb	r2,156(sp)
41109b48:	00801e04 	movi	r2,120
41109b4c:	d8802745 	stb	r2,157(sp)
41109b50:	d8002785 	stb	zero,158(sp)
41109b54:	20c00104 	addi	r3,r4,4
41109b58:	24c00017 	ldw	r19,0(r4)
41109b5c:	002d883a 	mov	r22,zero
41109b60:	90800094 	ori	r2,r18,2
41109b64:	28029a16 	blt	r5,zero,4110a5d0 <___vfprintf_internal_r+0xdc0>
41109b68:	00bfdfc4 	movi	r2,-129
41109b6c:	90a4703a 	and	r18,r18,r2
41109b70:	d8c02d15 	stw	r3,180(sp)
41109b74:	94800094 	ori	r18,r18,2
41109b78:	9802871e 	bne	r19,zero,4110a598 <___vfprintf_internal_r+0xd88>
41109b7c:	009044b4 	movhi	r2,16658
41109b80:	10af3d04 	addi	r2,r2,-17164
41109b84:	d8803915 	stw	r2,228(sp)
41109b88:	04401e04 	movi	r17,120
41109b8c:	d8802917 	ldw	r2,164(sp)
41109b90:	0039883a 	mov	fp,zero
41109b94:	1001e926 	beq	r2,zero,4110a33c <___vfprintf_internal_r+0xb2c>
41109b98:	0027883a 	mov	r19,zero
41109b9c:	002d883a 	mov	r22,zero
41109ba0:	00020506 	br	4110a3b8 <___vfprintf_internal_r+0xba8>
41109ba4:	d9002c17 	ldw	r4,176(sp)
41109ba8:	b80b883a 	mov	r5,r23
41109bac:	110bae00 	call	4110bae0 <__swsetup_r>
41109bb0:	1005ac1e 	bne	r2,zero,4110b264 <___vfprintf_internal_r+0x1a54>
41109bb4:	b880030b 	ldhu	r2,12(r23)
41109bb8:	00c00284 	movi	r3,10
41109bbc:	1080068c 	andi	r2,r2,26
41109bc0:	10ff3c1e 	bne	r2,r3,411098b4 <__reset+0xbb0e98b4>
41109bc4:	b880038f 	ldh	r2,14(r23)
41109bc8:	103f3a16 	blt	r2,zero,411098b4 <__reset+0xbb0e98b4>
41109bcc:	d9c02d17 	ldw	r7,180(sp)
41109bd0:	d9002c17 	ldw	r4,176(sp)
41109bd4:	a80d883a 	mov	r6,r21
41109bd8:	b80b883a 	mov	r5,r23
41109bdc:	110ba240 	call	4110ba24 <__sbprintf>
41109be0:	00001106 	br	41109c28 <___vfprintf_internal_r+0x418>
41109be4:	d9002c17 	ldw	r4,176(sp)
41109be8:	d9801e04 	addi	r6,sp,120
41109bec:	b80b883a 	mov	r5,r23
41109bf0:	1110e2c0 	call	41110e2c <__sprint_r>
41109bf4:	1000081e 	bne	r2,zero,41109c18 <___vfprintf_internal_r+0x408>
41109bf8:	da000404 	addi	r8,sp,16
41109bfc:	003f5306 	br	4110994c <__reset+0xbb0e994c>
41109c00:	d8802017 	ldw	r2,128(sp)
41109c04:	10000426 	beq	r2,zero,41109c18 <___vfprintf_internal_r+0x408>
41109c08:	d9002c17 	ldw	r4,176(sp)
41109c0c:	d9801e04 	addi	r6,sp,120
41109c10:	b80b883a 	mov	r5,r23
41109c14:	1110e2c0 	call	41110e2c <__sprint_r>
41109c18:	b880030b 	ldhu	r2,12(r23)
41109c1c:	1080100c 	andi	r2,r2,64
41109c20:	1005901e 	bne	r2,zero,4110b264 <___vfprintf_internal_r+0x1a54>
41109c24:	d8802f17 	ldw	r2,188(sp)
41109c28:	dfc04717 	ldw	ra,284(sp)
41109c2c:	df004617 	ldw	fp,280(sp)
41109c30:	ddc04517 	ldw	r23,276(sp)
41109c34:	dd804417 	ldw	r22,272(sp)
41109c38:	dd404317 	ldw	r21,268(sp)
41109c3c:	dd004217 	ldw	r20,264(sp)
41109c40:	dcc04117 	ldw	r19,260(sp)
41109c44:	dc804017 	ldw	r18,256(sp)
41109c48:	dc403f17 	ldw	r17,252(sp)
41109c4c:	dc003e17 	ldw	r16,248(sp)
41109c50:	dec04804 	addi	sp,sp,288
41109c54:	f800283a 	ret
41109c58:	d9002c17 	ldw	r4,176(sp)
41109c5c:	110dab40 	call	4110dab4 <__sinit>
41109c60:	003f0406 	br	41109874 <__reset+0xbb0e9874>
41109c64:	d8802d17 	ldw	r2,180(sp)
41109c68:	d9002d17 	ldw	r4,180(sp)
41109c6c:	10800017 	ldw	r2,0(r2)
41109c70:	d8803115 	stw	r2,196(sp)
41109c74:	20800104 	addi	r2,r4,4
41109c78:	d9003117 	ldw	r4,196(sp)
41109c7c:	203fa716 	blt	r4,zero,41109b1c <__reset+0xbb0e9b1c>
41109c80:	d8802d15 	stw	r2,180(sp)
41109c84:	ac400007 	ldb	r17,0(r21)
41109c88:	003f4206 	br	41109994 <__reset+0xbb0e9994>
41109c8c:	ac400007 	ldb	r17,0(r21)
41109c90:	aac00044 	addi	r11,r21,1
41109c94:	8a872826 	beq	r17,r10,4110b938 <___vfprintf_internal_r+0x2128>
41109c98:	88bff404 	addi	r2,r17,-48
41109c9c:	0009883a 	mov	r4,zero
41109ca0:	30867d36 	bltu	r6,r2,4110b698 <___vfprintf_internal_r+0x1e88>
41109ca4:	5c400007 	ldb	r17,0(r11)
41109ca8:	210002a4 	muli	r4,r4,10
41109cac:	5d400044 	addi	r21,r11,1
41109cb0:	a817883a 	mov	r11,r21
41109cb4:	2089883a 	add	r4,r4,r2
41109cb8:	88bff404 	addi	r2,r17,-48
41109cbc:	30bff92e 	bgeu	r6,r2,41109ca4 <__reset+0xbb0e9ca4>
41109cc0:	2005c916 	blt	r4,zero,4110b3e8 <___vfprintf_internal_r+0x1bd8>
41109cc4:	d9002915 	stw	r4,164(sp)
41109cc8:	003f3306 	br	41109998 <__reset+0xbb0e9998>
41109ccc:	94802014 	ori	r18,r18,128
41109cd0:	ac400007 	ldb	r17,0(r21)
41109cd4:	003f2f06 	br	41109994 <__reset+0xbb0e9994>
41109cd8:	a809883a 	mov	r4,r21
41109cdc:	d8003115 	stw	zero,196(sp)
41109ce0:	88bff404 	addi	r2,r17,-48
41109ce4:	0017883a 	mov	r11,zero
41109ce8:	24400007 	ldb	r17,0(r4)
41109cec:	5ac002a4 	muli	r11,r11,10
41109cf0:	ad400044 	addi	r21,r21,1
41109cf4:	a809883a 	mov	r4,r21
41109cf8:	12d7883a 	add	r11,r2,r11
41109cfc:	88bff404 	addi	r2,r17,-48
41109d00:	30bff92e 	bgeu	r6,r2,41109ce8 <__reset+0xbb0e9ce8>
41109d04:	dac03115 	stw	r11,196(sp)
41109d08:	003f2306 	br	41109998 <__reset+0xbb0e9998>
41109d0c:	18c03fcc 	andi	r3,r3,255
41109d10:	18072b1e 	bne	r3,zero,4110b9c0 <___vfprintf_internal_r+0x21b0>
41109d14:	94800414 	ori	r18,r18,16
41109d18:	9080080c 	andi	r2,r18,32
41109d1c:	10037b26 	beq	r2,zero,4110ab0c <___vfprintf_internal_r+0x12fc>
41109d20:	d9402d17 	ldw	r5,180(sp)
41109d24:	28800117 	ldw	r2,4(r5)
41109d28:	2cc00017 	ldw	r19,0(r5)
41109d2c:	29400204 	addi	r5,r5,8
41109d30:	d9402d15 	stw	r5,180(sp)
41109d34:	102d883a 	mov	r22,r2
41109d38:	10044b16 	blt	r2,zero,4110ae68 <___vfprintf_internal_r+0x1658>
41109d3c:	d9402917 	ldw	r5,164(sp)
41109d40:	df002783 	ldbu	fp,158(sp)
41109d44:	2803bc16 	blt	r5,zero,4110ac38 <___vfprintf_internal_r+0x1428>
41109d48:	00ffdfc4 	movi	r3,-129
41109d4c:	9d84b03a 	or	r2,r19,r22
41109d50:	90e4703a 	and	r18,r18,r3
41109d54:	10017726 	beq	r2,zero,4110a334 <___vfprintf_internal_r+0xb24>
41109d58:	b0038326 	beq	r22,zero,4110ab68 <___vfprintf_internal_r+0x1358>
41109d5c:	dc402a15 	stw	r17,168(sp)
41109d60:	dc001e04 	addi	r16,sp,120
41109d64:	b023883a 	mov	r17,r22
41109d68:	402d883a 	mov	r22,r8
41109d6c:	9809883a 	mov	r4,r19
41109d70:	880b883a 	mov	r5,r17
41109d74:	01800284 	movi	r6,10
41109d78:	000f883a 	mov	r7,zero
41109d7c:	11132240 	call	41113224 <__umoddi3>
41109d80:	10800c04 	addi	r2,r2,48
41109d84:	843fffc4 	addi	r16,r16,-1
41109d88:	9809883a 	mov	r4,r19
41109d8c:	880b883a 	mov	r5,r17
41109d90:	80800005 	stb	r2,0(r16)
41109d94:	01800284 	movi	r6,10
41109d98:	000f883a 	mov	r7,zero
41109d9c:	1112cac0 	call	41112cac <__udivdi3>
41109da0:	1027883a 	mov	r19,r2
41109da4:	10c4b03a 	or	r2,r2,r3
41109da8:	1823883a 	mov	r17,r3
41109dac:	103fef1e 	bne	r2,zero,41109d6c <__reset+0xbb0e9d6c>
41109db0:	d8c02817 	ldw	r3,160(sp)
41109db4:	dc402a17 	ldw	r17,168(sp)
41109db8:	b011883a 	mov	r8,r22
41109dbc:	1c07c83a 	sub	r3,r3,r16
41109dc0:	d8c02e15 	stw	r3,184(sp)
41109dc4:	00005906 	br	41109f2c <___vfprintf_internal_r+0x71c>
41109dc8:	18c03fcc 	andi	r3,r3,255
41109dcc:	1806fa1e 	bne	r3,zero,4110b9b8 <___vfprintf_internal_r+0x21a8>
41109dd0:	9080020c 	andi	r2,r18,8
41109dd4:	10048a26 	beq	r2,zero,4110b000 <___vfprintf_internal_r+0x17f0>
41109dd8:	d8c02d17 	ldw	r3,180(sp)
41109ddc:	d9002d17 	ldw	r4,180(sp)
41109de0:	d9402d17 	ldw	r5,180(sp)
41109de4:	18c00017 	ldw	r3,0(r3)
41109de8:	21000117 	ldw	r4,4(r4)
41109dec:	29400204 	addi	r5,r5,8
41109df0:	d8c03615 	stw	r3,216(sp)
41109df4:	d9003815 	stw	r4,224(sp)
41109df8:	d9402d15 	stw	r5,180(sp)
41109dfc:	d9003617 	ldw	r4,216(sp)
41109e00:	d9403817 	ldw	r5,224(sp)
41109e04:	da003d15 	stw	r8,244(sp)
41109e08:	04000044 	movi	r16,1
41109e0c:	1110a500 	call	41110a50 <__fpclassifyd>
41109e10:	da003d17 	ldw	r8,244(sp)
41109e14:	14041f1e 	bne	r2,r16,4110ae94 <___vfprintf_internal_r+0x1684>
41109e18:	d9003617 	ldw	r4,216(sp)
41109e1c:	d9403817 	ldw	r5,224(sp)
41109e20:	000d883a 	mov	r6,zero
41109e24:	000f883a 	mov	r7,zero
41109e28:	1114c080 	call	41114c08 <__ledf2>
41109e2c:	da003d17 	ldw	r8,244(sp)
41109e30:	1005be16 	blt	r2,zero,4110b52c <___vfprintf_internal_r+0x1d1c>
41109e34:	df002783 	ldbu	fp,158(sp)
41109e38:	008011c4 	movi	r2,71
41109e3c:	1445330e 	bge	r2,r17,4110b30c <___vfprintf_internal_r+0x1afc>
41109e40:	041044b4 	movhi	r16,16658
41109e44:	842f3504 	addi	r16,r16,-17196
41109e48:	00c000c4 	movi	r3,3
41109e4c:	00bfdfc4 	movi	r2,-129
41109e50:	d8c02a15 	stw	r3,168(sp)
41109e54:	90a4703a 	and	r18,r18,r2
41109e58:	d8c02e15 	stw	r3,184(sp)
41109e5c:	d8002915 	stw	zero,164(sp)
41109e60:	d8003215 	stw	zero,200(sp)
41109e64:	00003706 	br	41109f44 <___vfprintf_internal_r+0x734>
41109e68:	94800214 	ori	r18,r18,8
41109e6c:	ac400007 	ldb	r17,0(r21)
41109e70:	003ec806 	br	41109994 <__reset+0xbb0e9994>
41109e74:	18c03fcc 	andi	r3,r3,255
41109e78:	1806db1e 	bne	r3,zero,4110b9e8 <___vfprintf_internal_r+0x21d8>
41109e7c:	94800414 	ori	r18,r18,16
41109e80:	9080080c 	andi	r2,r18,32
41109e84:	1002d826 	beq	r2,zero,4110a9e8 <___vfprintf_internal_r+0x11d8>
41109e88:	d9402d17 	ldw	r5,180(sp)
41109e8c:	d8c02917 	ldw	r3,164(sp)
41109e90:	d8002785 	stb	zero,158(sp)
41109e94:	28800204 	addi	r2,r5,8
41109e98:	2cc00017 	ldw	r19,0(r5)
41109e9c:	2d800117 	ldw	r22,4(r5)
41109ea0:	18048f16 	blt	r3,zero,4110b0e0 <___vfprintf_internal_r+0x18d0>
41109ea4:	013fdfc4 	movi	r4,-129
41109ea8:	9d86b03a 	or	r3,r19,r22
41109eac:	d8802d15 	stw	r2,180(sp)
41109eb0:	9124703a 	and	r18,r18,r4
41109eb4:	1802d91e 	bne	r3,zero,4110aa1c <___vfprintf_internal_r+0x120c>
41109eb8:	d8c02917 	ldw	r3,164(sp)
41109ebc:	0039883a 	mov	fp,zero
41109ec0:	1805c326 	beq	r3,zero,4110b5d0 <___vfprintf_internal_r+0x1dc0>
41109ec4:	0027883a 	mov	r19,zero
41109ec8:	002d883a 	mov	r22,zero
41109ecc:	dc001e04 	addi	r16,sp,120
41109ed0:	9806d0fa 	srli	r3,r19,3
41109ed4:	b008977a 	slli	r4,r22,29
41109ed8:	b02cd0fa 	srli	r22,r22,3
41109edc:	9cc001cc 	andi	r19,r19,7
41109ee0:	98800c04 	addi	r2,r19,48
41109ee4:	843fffc4 	addi	r16,r16,-1
41109ee8:	20e6b03a 	or	r19,r4,r3
41109eec:	80800005 	stb	r2,0(r16)
41109ef0:	9d86b03a 	or	r3,r19,r22
41109ef4:	183ff61e 	bne	r3,zero,41109ed0 <__reset+0xbb0e9ed0>
41109ef8:	90c0004c 	andi	r3,r18,1
41109efc:	18013b26 	beq	r3,zero,4110a3ec <___vfprintf_internal_r+0xbdc>
41109f00:	10803fcc 	andi	r2,r2,255
41109f04:	1080201c 	xori	r2,r2,128
41109f08:	10bfe004 	addi	r2,r2,-128
41109f0c:	00c00c04 	movi	r3,48
41109f10:	10c13626 	beq	r2,r3,4110a3ec <___vfprintf_internal_r+0xbdc>
41109f14:	80ffffc5 	stb	r3,-1(r16)
41109f18:	d8c02817 	ldw	r3,160(sp)
41109f1c:	80bfffc4 	addi	r2,r16,-1
41109f20:	1021883a 	mov	r16,r2
41109f24:	1887c83a 	sub	r3,r3,r2
41109f28:	d8c02e15 	stw	r3,184(sp)
41109f2c:	d8802e17 	ldw	r2,184(sp)
41109f30:	d9002917 	ldw	r4,164(sp)
41109f34:	1100010e 	bge	r2,r4,41109f3c <___vfprintf_internal_r+0x72c>
41109f38:	2005883a 	mov	r2,r4
41109f3c:	d8802a15 	stw	r2,168(sp)
41109f40:	d8003215 	stw	zero,200(sp)
41109f44:	e7003fcc 	andi	fp,fp,255
41109f48:	e700201c 	xori	fp,fp,128
41109f4c:	e73fe004 	addi	fp,fp,-128
41109f50:	e0000326 	beq	fp,zero,41109f60 <___vfprintf_internal_r+0x750>
41109f54:	d8c02a17 	ldw	r3,168(sp)
41109f58:	18c00044 	addi	r3,r3,1
41109f5c:	d8c02a15 	stw	r3,168(sp)
41109f60:	90c0008c 	andi	r3,r18,2
41109f64:	d8c02b15 	stw	r3,172(sp)
41109f68:	18000326 	beq	r3,zero,41109f78 <___vfprintf_internal_r+0x768>
41109f6c:	d8c02a17 	ldw	r3,168(sp)
41109f70:	18c00084 	addi	r3,r3,2
41109f74:	d8c02a15 	stw	r3,168(sp)
41109f78:	90c0210c 	andi	r3,r18,132
41109f7c:	d8c03015 	stw	r3,192(sp)
41109f80:	1801a31e 	bne	r3,zero,4110a610 <___vfprintf_internal_r+0xe00>
41109f84:	d9003117 	ldw	r4,196(sp)
41109f88:	d8c02a17 	ldw	r3,168(sp)
41109f8c:	20e7c83a 	sub	r19,r4,r3
41109f90:	04c19f0e 	bge	zero,r19,4110a610 <___vfprintf_internal_r+0xe00>
41109f94:	02400404 	movi	r9,16
41109f98:	d8c02017 	ldw	r3,128(sp)
41109f9c:	d8801f17 	ldw	r2,124(sp)
41109fa0:	4cc50d0e 	bge	r9,r19,4110b3d8 <___vfprintf_internal_r+0x1bc8>
41109fa4:	015044b4 	movhi	r5,16658
41109fa8:	296f4884 	addi	r5,r5,-17118
41109fac:	dc403b15 	stw	r17,236(sp)
41109fb0:	d9403515 	stw	r5,212(sp)
41109fb4:	9823883a 	mov	r17,r19
41109fb8:	482d883a 	mov	r22,r9
41109fbc:	9027883a 	mov	r19,r18
41109fc0:	070001c4 	movi	fp,7
41109fc4:	8025883a 	mov	r18,r16
41109fc8:	dc002c17 	ldw	r16,176(sp)
41109fcc:	00000306 	br	41109fdc <___vfprintf_internal_r+0x7cc>
41109fd0:	8c7ffc04 	addi	r17,r17,-16
41109fd4:	42000204 	addi	r8,r8,8
41109fd8:	b440130e 	bge	r22,r17,4110a028 <___vfprintf_internal_r+0x818>
41109fdc:	011044b4 	movhi	r4,16658
41109fe0:	18c00404 	addi	r3,r3,16
41109fe4:	10800044 	addi	r2,r2,1
41109fe8:	212f4884 	addi	r4,r4,-17118
41109fec:	41000015 	stw	r4,0(r8)
41109ff0:	45800115 	stw	r22,4(r8)
41109ff4:	d8c02015 	stw	r3,128(sp)
41109ff8:	d8801f15 	stw	r2,124(sp)
41109ffc:	e0bff40e 	bge	fp,r2,41109fd0 <__reset+0xbb0e9fd0>
4110a000:	d9801e04 	addi	r6,sp,120
4110a004:	b80b883a 	mov	r5,r23
4110a008:	8009883a 	mov	r4,r16
4110a00c:	1110e2c0 	call	41110e2c <__sprint_r>
4110a010:	103f011e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110a014:	8c7ffc04 	addi	r17,r17,-16
4110a018:	d8c02017 	ldw	r3,128(sp)
4110a01c:	d8801f17 	ldw	r2,124(sp)
4110a020:	da000404 	addi	r8,sp,16
4110a024:	b47fed16 	blt	r22,r17,41109fdc <__reset+0xbb0e9fdc>
4110a028:	9021883a 	mov	r16,r18
4110a02c:	9825883a 	mov	r18,r19
4110a030:	8827883a 	mov	r19,r17
4110a034:	dc403b17 	ldw	r17,236(sp)
4110a038:	d9403517 	ldw	r5,212(sp)
4110a03c:	98c7883a 	add	r3,r19,r3
4110a040:	10800044 	addi	r2,r2,1
4110a044:	41400015 	stw	r5,0(r8)
4110a048:	44c00115 	stw	r19,4(r8)
4110a04c:	d8c02015 	stw	r3,128(sp)
4110a050:	d8801f15 	stw	r2,124(sp)
4110a054:	010001c4 	movi	r4,7
4110a058:	2082a316 	blt	r4,r2,4110aae8 <___vfprintf_internal_r+0x12d8>
4110a05c:	df002787 	ldb	fp,158(sp)
4110a060:	42000204 	addi	r8,r8,8
4110a064:	e0000c26 	beq	fp,zero,4110a098 <___vfprintf_internal_r+0x888>
4110a068:	d8801f17 	ldw	r2,124(sp)
4110a06c:	d9002784 	addi	r4,sp,158
4110a070:	18c00044 	addi	r3,r3,1
4110a074:	10800044 	addi	r2,r2,1
4110a078:	41000015 	stw	r4,0(r8)
4110a07c:	01000044 	movi	r4,1
4110a080:	41000115 	stw	r4,4(r8)
4110a084:	d8c02015 	stw	r3,128(sp)
4110a088:	d8801f15 	stw	r2,124(sp)
4110a08c:	010001c4 	movi	r4,7
4110a090:	20823c16 	blt	r4,r2,4110a984 <___vfprintf_internal_r+0x1174>
4110a094:	42000204 	addi	r8,r8,8
4110a098:	d8802b17 	ldw	r2,172(sp)
4110a09c:	10000c26 	beq	r2,zero,4110a0d0 <___vfprintf_internal_r+0x8c0>
4110a0a0:	d8801f17 	ldw	r2,124(sp)
4110a0a4:	d9002704 	addi	r4,sp,156
4110a0a8:	18c00084 	addi	r3,r3,2
4110a0ac:	10800044 	addi	r2,r2,1
4110a0b0:	41000015 	stw	r4,0(r8)
4110a0b4:	01000084 	movi	r4,2
4110a0b8:	41000115 	stw	r4,4(r8)
4110a0bc:	d8c02015 	stw	r3,128(sp)
4110a0c0:	d8801f15 	stw	r2,124(sp)
4110a0c4:	010001c4 	movi	r4,7
4110a0c8:	20823616 	blt	r4,r2,4110a9a4 <___vfprintf_internal_r+0x1194>
4110a0cc:	42000204 	addi	r8,r8,8
4110a0d0:	d9003017 	ldw	r4,192(sp)
4110a0d4:	00802004 	movi	r2,128
4110a0d8:	20819926 	beq	r4,r2,4110a740 <___vfprintf_internal_r+0xf30>
4110a0dc:	d9402917 	ldw	r5,164(sp)
4110a0e0:	d8802e17 	ldw	r2,184(sp)
4110a0e4:	28adc83a 	sub	r22,r5,r2
4110a0e8:	0580310e 	bge	zero,r22,4110a1b0 <___vfprintf_internal_r+0x9a0>
4110a0ec:	07000404 	movi	fp,16
4110a0f0:	d8801f17 	ldw	r2,124(sp)
4110a0f4:	e584140e 	bge	fp,r22,4110b148 <___vfprintf_internal_r+0x1938>
4110a0f8:	015044b4 	movhi	r5,16658
4110a0fc:	296f4484 	addi	r5,r5,-17134
4110a100:	dc402915 	stw	r17,164(sp)
4110a104:	d9402b15 	stw	r5,172(sp)
4110a108:	b023883a 	mov	r17,r22
4110a10c:	04c001c4 	movi	r19,7
4110a110:	a82d883a 	mov	r22,r21
4110a114:	902b883a 	mov	r21,r18
4110a118:	8025883a 	mov	r18,r16
4110a11c:	dc002c17 	ldw	r16,176(sp)
4110a120:	00000306 	br	4110a130 <___vfprintf_internal_r+0x920>
4110a124:	8c7ffc04 	addi	r17,r17,-16
4110a128:	42000204 	addi	r8,r8,8
4110a12c:	e440110e 	bge	fp,r17,4110a174 <___vfprintf_internal_r+0x964>
4110a130:	18c00404 	addi	r3,r3,16
4110a134:	10800044 	addi	r2,r2,1
4110a138:	45000015 	stw	r20,0(r8)
4110a13c:	47000115 	stw	fp,4(r8)
4110a140:	d8c02015 	stw	r3,128(sp)
4110a144:	d8801f15 	stw	r2,124(sp)
4110a148:	98bff60e 	bge	r19,r2,4110a124 <__reset+0xbb0ea124>
4110a14c:	d9801e04 	addi	r6,sp,120
4110a150:	b80b883a 	mov	r5,r23
4110a154:	8009883a 	mov	r4,r16
4110a158:	1110e2c0 	call	41110e2c <__sprint_r>
4110a15c:	103eae1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110a160:	8c7ffc04 	addi	r17,r17,-16
4110a164:	d8c02017 	ldw	r3,128(sp)
4110a168:	d8801f17 	ldw	r2,124(sp)
4110a16c:	da000404 	addi	r8,sp,16
4110a170:	e47fef16 	blt	fp,r17,4110a130 <__reset+0xbb0ea130>
4110a174:	9021883a 	mov	r16,r18
4110a178:	a825883a 	mov	r18,r21
4110a17c:	b02b883a 	mov	r21,r22
4110a180:	882d883a 	mov	r22,r17
4110a184:	dc402917 	ldw	r17,164(sp)
4110a188:	d9002b17 	ldw	r4,172(sp)
4110a18c:	1d87883a 	add	r3,r3,r22
4110a190:	10800044 	addi	r2,r2,1
4110a194:	41000015 	stw	r4,0(r8)
4110a198:	45800115 	stw	r22,4(r8)
4110a19c:	d8c02015 	stw	r3,128(sp)
4110a1a0:	d8801f15 	stw	r2,124(sp)
4110a1a4:	010001c4 	movi	r4,7
4110a1a8:	2081ee16 	blt	r4,r2,4110a964 <___vfprintf_internal_r+0x1154>
4110a1ac:	42000204 	addi	r8,r8,8
4110a1b0:	9080400c 	andi	r2,r18,256
4110a1b4:	1001181e 	bne	r2,zero,4110a618 <___vfprintf_internal_r+0xe08>
4110a1b8:	d9402e17 	ldw	r5,184(sp)
4110a1bc:	d8801f17 	ldw	r2,124(sp)
4110a1c0:	44000015 	stw	r16,0(r8)
4110a1c4:	1947883a 	add	r3,r3,r5
4110a1c8:	10800044 	addi	r2,r2,1
4110a1cc:	41400115 	stw	r5,4(r8)
4110a1d0:	d8c02015 	stw	r3,128(sp)
4110a1d4:	d8801f15 	stw	r2,124(sp)
4110a1d8:	010001c4 	movi	r4,7
4110a1dc:	2081d316 	blt	r4,r2,4110a92c <___vfprintf_internal_r+0x111c>
4110a1e0:	42000204 	addi	r8,r8,8
4110a1e4:	9480010c 	andi	r18,r18,4
4110a1e8:	90003226 	beq	r18,zero,4110a2b4 <___vfprintf_internal_r+0xaa4>
4110a1ec:	d9403117 	ldw	r5,196(sp)
4110a1f0:	d8802a17 	ldw	r2,168(sp)
4110a1f4:	28a1c83a 	sub	r16,r5,r2
4110a1f8:	04002e0e 	bge	zero,r16,4110a2b4 <___vfprintf_internal_r+0xaa4>
4110a1fc:	04400404 	movi	r17,16
4110a200:	d8801f17 	ldw	r2,124(sp)
4110a204:	8c04a20e 	bge	r17,r16,4110b490 <___vfprintf_internal_r+0x1c80>
4110a208:	015044b4 	movhi	r5,16658
4110a20c:	296f4884 	addi	r5,r5,-17118
4110a210:	d9403515 	stw	r5,212(sp)
4110a214:	048001c4 	movi	r18,7
4110a218:	dcc02c17 	ldw	r19,176(sp)
4110a21c:	00000306 	br	4110a22c <___vfprintf_internal_r+0xa1c>
4110a220:	843ffc04 	addi	r16,r16,-16
4110a224:	42000204 	addi	r8,r8,8
4110a228:	8c00130e 	bge	r17,r16,4110a278 <___vfprintf_internal_r+0xa68>
4110a22c:	011044b4 	movhi	r4,16658
4110a230:	18c00404 	addi	r3,r3,16
4110a234:	10800044 	addi	r2,r2,1
4110a238:	212f4884 	addi	r4,r4,-17118
4110a23c:	41000015 	stw	r4,0(r8)
4110a240:	44400115 	stw	r17,4(r8)
4110a244:	d8c02015 	stw	r3,128(sp)
4110a248:	d8801f15 	stw	r2,124(sp)
4110a24c:	90bff40e 	bge	r18,r2,4110a220 <__reset+0xbb0ea220>
4110a250:	d9801e04 	addi	r6,sp,120
4110a254:	b80b883a 	mov	r5,r23
4110a258:	9809883a 	mov	r4,r19
4110a25c:	1110e2c0 	call	41110e2c <__sprint_r>
4110a260:	103e6d1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110a264:	843ffc04 	addi	r16,r16,-16
4110a268:	d8c02017 	ldw	r3,128(sp)
4110a26c:	d8801f17 	ldw	r2,124(sp)
4110a270:	da000404 	addi	r8,sp,16
4110a274:	8c3fed16 	blt	r17,r16,4110a22c <__reset+0xbb0ea22c>
4110a278:	d9403517 	ldw	r5,212(sp)
4110a27c:	1c07883a 	add	r3,r3,r16
4110a280:	10800044 	addi	r2,r2,1
4110a284:	41400015 	stw	r5,0(r8)
4110a288:	44000115 	stw	r16,4(r8)
4110a28c:	d8c02015 	stw	r3,128(sp)
4110a290:	d8801f15 	stw	r2,124(sp)
4110a294:	010001c4 	movi	r4,7
4110a298:	2080060e 	bge	r4,r2,4110a2b4 <___vfprintf_internal_r+0xaa4>
4110a29c:	d9002c17 	ldw	r4,176(sp)
4110a2a0:	d9801e04 	addi	r6,sp,120
4110a2a4:	b80b883a 	mov	r5,r23
4110a2a8:	1110e2c0 	call	41110e2c <__sprint_r>
4110a2ac:	103e5a1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110a2b0:	d8c02017 	ldw	r3,128(sp)
4110a2b4:	d8803117 	ldw	r2,196(sp)
4110a2b8:	d9002a17 	ldw	r4,168(sp)
4110a2bc:	1100010e 	bge	r2,r4,4110a2c4 <___vfprintf_internal_r+0xab4>
4110a2c0:	2005883a 	mov	r2,r4
4110a2c4:	d9402f17 	ldw	r5,188(sp)
4110a2c8:	288b883a 	add	r5,r5,r2
4110a2cc:	d9402f15 	stw	r5,188(sp)
4110a2d0:	18019e1e 	bne	r3,zero,4110a94c <___vfprintf_internal_r+0x113c>
4110a2d4:	a8800007 	ldb	r2,0(r21)
4110a2d8:	d8001f15 	stw	zero,124(sp)
4110a2dc:	da000404 	addi	r8,sp,16
4110a2e0:	103d851e 	bne	r2,zero,411098f8 <__reset+0xbb0e98f8>
4110a2e4:	a821883a 	mov	r16,r21
4110a2e8:	003d9b06 	br	41109958 <__reset+0xbb0e9958>
4110a2ec:	18c03fcc 	andi	r3,r3,255
4110a2f0:	1805c11e 	bne	r3,zero,4110b9f8 <___vfprintf_internal_r+0x21e8>
4110a2f4:	94800414 	ori	r18,r18,16
4110a2f8:	9080080c 	andi	r2,r18,32
4110a2fc:	10020c26 	beq	r2,zero,4110ab30 <___vfprintf_internal_r+0x1320>
4110a300:	d8802d17 	ldw	r2,180(sp)
4110a304:	d9002917 	ldw	r4,164(sp)
4110a308:	d8002785 	stb	zero,158(sp)
4110a30c:	10c00204 	addi	r3,r2,8
4110a310:	14c00017 	ldw	r19,0(r2)
4110a314:	15800117 	ldw	r22,4(r2)
4110a318:	20040f16 	blt	r4,zero,4110b358 <___vfprintf_internal_r+0x1b48>
4110a31c:	013fdfc4 	movi	r4,-129
4110a320:	9d84b03a 	or	r2,r19,r22
4110a324:	d8c02d15 	stw	r3,180(sp)
4110a328:	9124703a 	and	r18,r18,r4
4110a32c:	0039883a 	mov	fp,zero
4110a330:	103e891e 	bne	r2,zero,41109d58 <__reset+0xbb0e9d58>
4110a334:	d9002917 	ldw	r4,164(sp)
4110a338:	2002c11e 	bne	r4,zero,4110ae40 <___vfprintf_internal_r+0x1630>
4110a33c:	d8002915 	stw	zero,164(sp)
4110a340:	d8002e15 	stw	zero,184(sp)
4110a344:	dc001e04 	addi	r16,sp,120
4110a348:	003ef806 	br	41109f2c <__reset+0xbb0e9f2c>
4110a34c:	18c03fcc 	andi	r3,r3,255
4110a350:	18059d1e 	bne	r3,zero,4110b9c8 <___vfprintf_internal_r+0x21b8>
4110a354:	015044b4 	movhi	r5,16658
4110a358:	296f3804 	addi	r5,r5,-17184
4110a35c:	d9403915 	stw	r5,228(sp)
4110a360:	9080080c 	andi	r2,r18,32
4110a364:	10005226 	beq	r2,zero,4110a4b0 <___vfprintf_internal_r+0xca0>
4110a368:	d8802d17 	ldw	r2,180(sp)
4110a36c:	14c00017 	ldw	r19,0(r2)
4110a370:	15800117 	ldw	r22,4(r2)
4110a374:	10800204 	addi	r2,r2,8
4110a378:	d8802d15 	stw	r2,180(sp)
4110a37c:	9080004c 	andi	r2,r18,1
4110a380:	10019026 	beq	r2,zero,4110a9c4 <___vfprintf_internal_r+0x11b4>
4110a384:	9d84b03a 	or	r2,r19,r22
4110a388:	10036926 	beq	r2,zero,4110b130 <___vfprintf_internal_r+0x1920>
4110a38c:	d8c02917 	ldw	r3,164(sp)
4110a390:	00800c04 	movi	r2,48
4110a394:	d8802705 	stb	r2,156(sp)
4110a398:	dc402745 	stb	r17,157(sp)
4110a39c:	d8002785 	stb	zero,158(sp)
4110a3a0:	90800094 	ori	r2,r18,2
4110a3a4:	18045d16 	blt	r3,zero,4110b51c <___vfprintf_internal_r+0x1d0c>
4110a3a8:	00bfdfc4 	movi	r2,-129
4110a3ac:	90a4703a 	and	r18,r18,r2
4110a3b0:	94800094 	ori	r18,r18,2
4110a3b4:	0039883a 	mov	fp,zero
4110a3b8:	d9003917 	ldw	r4,228(sp)
4110a3bc:	dc001e04 	addi	r16,sp,120
4110a3c0:	988003cc 	andi	r2,r19,15
4110a3c4:	b006973a 	slli	r3,r22,28
4110a3c8:	2085883a 	add	r2,r4,r2
4110a3cc:	9826d13a 	srli	r19,r19,4
4110a3d0:	10800003 	ldbu	r2,0(r2)
4110a3d4:	b02cd13a 	srli	r22,r22,4
4110a3d8:	843fffc4 	addi	r16,r16,-1
4110a3dc:	1ce6b03a 	or	r19,r3,r19
4110a3e0:	80800005 	stb	r2,0(r16)
4110a3e4:	9d84b03a 	or	r2,r19,r22
4110a3e8:	103ff51e 	bne	r2,zero,4110a3c0 <__reset+0xbb0ea3c0>
4110a3ec:	d8c02817 	ldw	r3,160(sp)
4110a3f0:	1c07c83a 	sub	r3,r3,r16
4110a3f4:	d8c02e15 	stw	r3,184(sp)
4110a3f8:	003ecc06 	br	41109f2c <__reset+0xbb0e9f2c>
4110a3fc:	18c03fcc 	andi	r3,r3,255
4110a400:	183e9f26 	beq	r3,zero,41109e80 <__reset+0xbb0e9e80>
4110a404:	d9c02785 	stb	r7,158(sp)
4110a408:	003e9d06 	br	41109e80 <__reset+0xbb0e9e80>
4110a40c:	00c00044 	movi	r3,1
4110a410:	01c00ac4 	movi	r7,43
4110a414:	ac400007 	ldb	r17,0(r21)
4110a418:	003d5e06 	br	41109994 <__reset+0xbb0e9994>
4110a41c:	94800814 	ori	r18,r18,32
4110a420:	ac400007 	ldb	r17,0(r21)
4110a424:	003d5b06 	br	41109994 <__reset+0xbb0e9994>
4110a428:	d8c02d17 	ldw	r3,180(sp)
4110a42c:	d8002785 	stb	zero,158(sp)
4110a430:	1c000017 	ldw	r16,0(r3)
4110a434:	1cc00104 	addi	r19,r3,4
4110a438:	80041926 	beq	r16,zero,4110b4a0 <___vfprintf_internal_r+0x1c90>
4110a43c:	d9002917 	ldw	r4,164(sp)
4110a440:	2003d016 	blt	r4,zero,4110b384 <___vfprintf_internal_r+0x1b74>
4110a444:	200d883a 	mov	r6,r4
4110a448:	000b883a 	mov	r5,zero
4110a44c:	8009883a 	mov	r4,r16
4110a450:	da003d15 	stw	r8,244(sp)
4110a454:	110f0200 	call	4110f020 <memchr>
4110a458:	da003d17 	ldw	r8,244(sp)
4110a45c:	10045426 	beq	r2,zero,4110b5b0 <___vfprintf_internal_r+0x1da0>
4110a460:	1405c83a 	sub	r2,r2,r16
4110a464:	d8802e15 	stw	r2,184(sp)
4110a468:	1003cc16 	blt	r2,zero,4110b39c <___vfprintf_internal_r+0x1b8c>
4110a46c:	df002783 	ldbu	fp,158(sp)
4110a470:	d8802a15 	stw	r2,168(sp)
4110a474:	dcc02d15 	stw	r19,180(sp)
4110a478:	d8002915 	stw	zero,164(sp)
4110a47c:	d8003215 	stw	zero,200(sp)
4110a480:	003eb006 	br	41109f44 <__reset+0xbb0e9f44>
4110a484:	18c03fcc 	andi	r3,r3,255
4110a488:	183f9b26 	beq	r3,zero,4110a2f8 <__reset+0xbb0ea2f8>
4110a48c:	d9c02785 	stb	r7,158(sp)
4110a490:	003f9906 	br	4110a2f8 <__reset+0xbb0ea2f8>
4110a494:	18c03fcc 	andi	r3,r3,255
4110a498:	1805551e 	bne	r3,zero,4110b9f0 <___vfprintf_internal_r+0x21e0>
4110a49c:	015044b4 	movhi	r5,16658
4110a4a0:	296f3d04 	addi	r5,r5,-17164
4110a4a4:	d9403915 	stw	r5,228(sp)
4110a4a8:	9080080c 	andi	r2,r18,32
4110a4ac:	103fae1e 	bne	r2,zero,4110a368 <__reset+0xbb0ea368>
4110a4b0:	9080040c 	andi	r2,r18,16
4110a4b4:	1002de26 	beq	r2,zero,4110b030 <___vfprintf_internal_r+0x1820>
4110a4b8:	d8c02d17 	ldw	r3,180(sp)
4110a4bc:	002d883a 	mov	r22,zero
4110a4c0:	1cc00017 	ldw	r19,0(r3)
4110a4c4:	18c00104 	addi	r3,r3,4
4110a4c8:	d8c02d15 	stw	r3,180(sp)
4110a4cc:	003fab06 	br	4110a37c <__reset+0xbb0ea37c>
4110a4d0:	38803fcc 	andi	r2,r7,255
4110a4d4:	1080201c 	xori	r2,r2,128
4110a4d8:	10bfe004 	addi	r2,r2,-128
4110a4dc:	1002d21e 	bne	r2,zero,4110b028 <___vfprintf_internal_r+0x1818>
4110a4e0:	00c00044 	movi	r3,1
4110a4e4:	01c00804 	movi	r7,32
4110a4e8:	ac400007 	ldb	r17,0(r21)
4110a4ec:	003d2906 	br	41109994 <__reset+0xbb0e9994>
4110a4f0:	94800054 	ori	r18,r18,1
4110a4f4:	ac400007 	ldb	r17,0(r21)
4110a4f8:	003d2606 	br	41109994 <__reset+0xbb0e9994>
4110a4fc:	18c03fcc 	andi	r3,r3,255
4110a500:	183e0526 	beq	r3,zero,41109d18 <__reset+0xbb0e9d18>
4110a504:	d9c02785 	stb	r7,158(sp)
4110a508:	003e0306 	br	41109d18 <__reset+0xbb0e9d18>
4110a50c:	94801014 	ori	r18,r18,64
4110a510:	ac400007 	ldb	r17,0(r21)
4110a514:	003d1f06 	br	41109994 <__reset+0xbb0e9994>
4110a518:	ac400007 	ldb	r17,0(r21)
4110a51c:	8a438726 	beq	r17,r9,4110b33c <___vfprintf_internal_r+0x1b2c>
4110a520:	94800414 	ori	r18,r18,16
4110a524:	003d1b06 	br	41109994 <__reset+0xbb0e9994>
4110a528:	18c03fcc 	andi	r3,r3,255
4110a52c:	1805341e 	bne	r3,zero,4110ba00 <___vfprintf_internal_r+0x21f0>
4110a530:	9080080c 	andi	r2,r18,32
4110a534:	1002cd26 	beq	r2,zero,4110b06c <___vfprintf_internal_r+0x185c>
4110a538:	d9402d17 	ldw	r5,180(sp)
4110a53c:	d9002f17 	ldw	r4,188(sp)
4110a540:	28800017 	ldw	r2,0(r5)
4110a544:	2007d7fa 	srai	r3,r4,31
4110a548:	29400104 	addi	r5,r5,4
4110a54c:	d9402d15 	stw	r5,180(sp)
4110a550:	11000015 	stw	r4,0(r2)
4110a554:	10c00115 	stw	r3,4(r2)
4110a558:	003ce506 	br	411098f0 <__reset+0xbb0e98f0>
4110a55c:	d8c02d17 	ldw	r3,180(sp)
4110a560:	d9002d17 	ldw	r4,180(sp)
4110a564:	d8002785 	stb	zero,158(sp)
4110a568:	18800017 	ldw	r2,0(r3)
4110a56c:	21000104 	addi	r4,r4,4
4110a570:	00c00044 	movi	r3,1
4110a574:	d8c02a15 	stw	r3,168(sp)
4110a578:	d8801405 	stb	r2,80(sp)
4110a57c:	d9002d15 	stw	r4,180(sp)
4110a580:	d8c02e15 	stw	r3,184(sp)
4110a584:	d8002915 	stw	zero,164(sp)
4110a588:	d8003215 	stw	zero,200(sp)
4110a58c:	dc001404 	addi	r16,sp,80
4110a590:	0039883a 	mov	fp,zero
4110a594:	003e7206 	br	41109f60 <__reset+0xbb0e9f60>
4110a598:	011044b4 	movhi	r4,16658
4110a59c:	212f3d04 	addi	r4,r4,-17164
4110a5a0:	0039883a 	mov	fp,zero
4110a5a4:	d9003915 	stw	r4,228(sp)
4110a5a8:	04401e04 	movi	r17,120
4110a5ac:	003f8206 	br	4110a3b8 <__reset+0xbb0ea3b8>
4110a5b0:	18c03fcc 	andi	r3,r3,255
4110a5b4:	1805061e 	bne	r3,zero,4110b9d0 <___vfprintf_internal_r+0x21c0>
4110a5b8:	883d9126 	beq	r17,zero,41109c00 <__reset+0xbb0e9c00>
4110a5bc:	00c00044 	movi	r3,1
4110a5c0:	d8c02a15 	stw	r3,168(sp)
4110a5c4:	dc401405 	stb	r17,80(sp)
4110a5c8:	d8002785 	stb	zero,158(sp)
4110a5cc:	003fec06 	br	4110a580 <__reset+0xbb0ea580>
4110a5d0:	015044b4 	movhi	r5,16658
4110a5d4:	296f3d04 	addi	r5,r5,-17164
4110a5d8:	d9403915 	stw	r5,228(sp)
4110a5dc:	d8c02d15 	stw	r3,180(sp)
4110a5e0:	1025883a 	mov	r18,r2
4110a5e4:	04401e04 	movi	r17,120
4110a5e8:	9d84b03a 	or	r2,r19,r22
4110a5ec:	1000fc1e 	bne	r2,zero,4110a9e0 <___vfprintf_internal_r+0x11d0>
4110a5f0:	0039883a 	mov	fp,zero
4110a5f4:	00800084 	movi	r2,2
4110a5f8:	10803fcc 	andi	r2,r2,255
4110a5fc:	00c00044 	movi	r3,1
4110a600:	10c20f26 	beq	r2,r3,4110ae40 <___vfprintf_internal_r+0x1630>
4110a604:	00c00084 	movi	r3,2
4110a608:	10fd6326 	beq	r2,r3,41109b98 <__reset+0xbb0e9b98>
4110a60c:	003e2d06 	br	41109ec4 <__reset+0xbb0e9ec4>
4110a610:	d8c02017 	ldw	r3,128(sp)
4110a614:	003e9306 	br	4110a064 <__reset+0xbb0ea064>
4110a618:	00801944 	movi	r2,101
4110a61c:	14407e0e 	bge	r2,r17,4110a818 <___vfprintf_internal_r+0x1008>
4110a620:	d9003617 	ldw	r4,216(sp)
4110a624:	d9403817 	ldw	r5,224(sp)
4110a628:	000d883a 	mov	r6,zero
4110a62c:	000f883a 	mov	r7,zero
4110a630:	d8c03c15 	stw	r3,240(sp)
4110a634:	da003d15 	stw	r8,244(sp)
4110a638:	1114aa40 	call	41114aa4 <__eqdf2>
4110a63c:	d8c03c17 	ldw	r3,240(sp)
4110a640:	da003d17 	ldw	r8,244(sp)
4110a644:	1000f71e 	bne	r2,zero,4110aa24 <___vfprintf_internal_r+0x1214>
4110a648:	d8801f17 	ldw	r2,124(sp)
4110a64c:	011044b4 	movhi	r4,16658
4110a650:	212f4404 	addi	r4,r4,-17136
4110a654:	18c00044 	addi	r3,r3,1
4110a658:	10800044 	addi	r2,r2,1
4110a65c:	41000015 	stw	r4,0(r8)
4110a660:	01000044 	movi	r4,1
4110a664:	41000115 	stw	r4,4(r8)
4110a668:	d8c02015 	stw	r3,128(sp)
4110a66c:	d8801f15 	stw	r2,124(sp)
4110a670:	010001c4 	movi	r4,7
4110a674:	2082b816 	blt	r4,r2,4110b158 <___vfprintf_internal_r+0x1948>
4110a678:	42000204 	addi	r8,r8,8
4110a67c:	d8802617 	ldw	r2,152(sp)
4110a680:	d9403317 	ldw	r5,204(sp)
4110a684:	11400216 	blt	r2,r5,4110a690 <___vfprintf_internal_r+0xe80>
4110a688:	9080004c 	andi	r2,r18,1
4110a68c:	103ed526 	beq	r2,zero,4110a1e4 <__reset+0xbb0ea1e4>
4110a690:	d8803717 	ldw	r2,220(sp)
4110a694:	d9003417 	ldw	r4,208(sp)
4110a698:	d9403717 	ldw	r5,220(sp)
4110a69c:	1887883a 	add	r3,r3,r2
4110a6a0:	d8801f17 	ldw	r2,124(sp)
4110a6a4:	41000015 	stw	r4,0(r8)
4110a6a8:	41400115 	stw	r5,4(r8)
4110a6ac:	10800044 	addi	r2,r2,1
4110a6b0:	d8c02015 	stw	r3,128(sp)
4110a6b4:	d8801f15 	stw	r2,124(sp)
4110a6b8:	010001c4 	movi	r4,7
4110a6bc:	20832916 	blt	r4,r2,4110b364 <___vfprintf_internal_r+0x1b54>
4110a6c0:	42000204 	addi	r8,r8,8
4110a6c4:	d8803317 	ldw	r2,204(sp)
4110a6c8:	143fffc4 	addi	r16,r2,-1
4110a6cc:	043ec50e 	bge	zero,r16,4110a1e4 <__reset+0xbb0ea1e4>
4110a6d0:	04400404 	movi	r17,16
4110a6d4:	d8801f17 	ldw	r2,124(sp)
4110a6d8:	8c00880e 	bge	r17,r16,4110a8fc <___vfprintf_internal_r+0x10ec>
4110a6dc:	015044b4 	movhi	r5,16658
4110a6e0:	296f4484 	addi	r5,r5,-17134
4110a6e4:	d9402b15 	stw	r5,172(sp)
4110a6e8:	058001c4 	movi	r22,7
4110a6ec:	dcc02c17 	ldw	r19,176(sp)
4110a6f0:	00000306 	br	4110a700 <___vfprintf_internal_r+0xef0>
4110a6f4:	42000204 	addi	r8,r8,8
4110a6f8:	843ffc04 	addi	r16,r16,-16
4110a6fc:	8c00820e 	bge	r17,r16,4110a908 <___vfprintf_internal_r+0x10f8>
4110a700:	18c00404 	addi	r3,r3,16
4110a704:	10800044 	addi	r2,r2,1
4110a708:	45000015 	stw	r20,0(r8)
4110a70c:	44400115 	stw	r17,4(r8)
4110a710:	d8c02015 	stw	r3,128(sp)
4110a714:	d8801f15 	stw	r2,124(sp)
4110a718:	b0bff60e 	bge	r22,r2,4110a6f4 <__reset+0xbb0ea6f4>
4110a71c:	d9801e04 	addi	r6,sp,120
4110a720:	b80b883a 	mov	r5,r23
4110a724:	9809883a 	mov	r4,r19
4110a728:	1110e2c0 	call	41110e2c <__sprint_r>
4110a72c:	103d3a1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110a730:	d8c02017 	ldw	r3,128(sp)
4110a734:	d8801f17 	ldw	r2,124(sp)
4110a738:	da000404 	addi	r8,sp,16
4110a73c:	003fee06 	br	4110a6f8 <__reset+0xbb0ea6f8>
4110a740:	d9403117 	ldw	r5,196(sp)
4110a744:	d8802a17 	ldw	r2,168(sp)
4110a748:	28adc83a 	sub	r22,r5,r2
4110a74c:	05be630e 	bge	zero,r22,4110a0dc <__reset+0xbb0ea0dc>
4110a750:	07000404 	movi	fp,16
4110a754:	d8801f17 	ldw	r2,124(sp)
4110a758:	e5838f0e 	bge	fp,r22,4110b598 <___vfprintf_internal_r+0x1d88>
4110a75c:	015044b4 	movhi	r5,16658
4110a760:	296f4484 	addi	r5,r5,-17134
4110a764:	dc403015 	stw	r17,192(sp)
4110a768:	d9402b15 	stw	r5,172(sp)
4110a76c:	b023883a 	mov	r17,r22
4110a770:	04c001c4 	movi	r19,7
4110a774:	a82d883a 	mov	r22,r21
4110a778:	902b883a 	mov	r21,r18
4110a77c:	8025883a 	mov	r18,r16
4110a780:	dc002c17 	ldw	r16,176(sp)
4110a784:	00000306 	br	4110a794 <___vfprintf_internal_r+0xf84>
4110a788:	8c7ffc04 	addi	r17,r17,-16
4110a78c:	42000204 	addi	r8,r8,8
4110a790:	e440110e 	bge	fp,r17,4110a7d8 <___vfprintf_internal_r+0xfc8>
4110a794:	18c00404 	addi	r3,r3,16
4110a798:	10800044 	addi	r2,r2,1
4110a79c:	45000015 	stw	r20,0(r8)
4110a7a0:	47000115 	stw	fp,4(r8)
4110a7a4:	d8c02015 	stw	r3,128(sp)
4110a7a8:	d8801f15 	stw	r2,124(sp)
4110a7ac:	98bff60e 	bge	r19,r2,4110a788 <__reset+0xbb0ea788>
4110a7b0:	d9801e04 	addi	r6,sp,120
4110a7b4:	b80b883a 	mov	r5,r23
4110a7b8:	8009883a 	mov	r4,r16
4110a7bc:	1110e2c0 	call	41110e2c <__sprint_r>
4110a7c0:	103d151e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110a7c4:	8c7ffc04 	addi	r17,r17,-16
4110a7c8:	d8c02017 	ldw	r3,128(sp)
4110a7cc:	d8801f17 	ldw	r2,124(sp)
4110a7d0:	da000404 	addi	r8,sp,16
4110a7d4:	e47fef16 	blt	fp,r17,4110a794 <__reset+0xbb0ea794>
4110a7d8:	9021883a 	mov	r16,r18
4110a7dc:	a825883a 	mov	r18,r21
4110a7e0:	b02b883a 	mov	r21,r22
4110a7e4:	882d883a 	mov	r22,r17
4110a7e8:	dc403017 	ldw	r17,192(sp)
4110a7ec:	d9002b17 	ldw	r4,172(sp)
4110a7f0:	1d87883a 	add	r3,r3,r22
4110a7f4:	10800044 	addi	r2,r2,1
4110a7f8:	41000015 	stw	r4,0(r8)
4110a7fc:	45800115 	stw	r22,4(r8)
4110a800:	d8c02015 	stw	r3,128(sp)
4110a804:	d8801f15 	stw	r2,124(sp)
4110a808:	010001c4 	movi	r4,7
4110a80c:	20818e16 	blt	r4,r2,4110ae48 <___vfprintf_internal_r+0x1638>
4110a810:	42000204 	addi	r8,r8,8
4110a814:	003e3106 	br	4110a0dc <__reset+0xbb0ea0dc>
4110a818:	d9403317 	ldw	r5,204(sp)
4110a81c:	00800044 	movi	r2,1
4110a820:	18c00044 	addi	r3,r3,1
4110a824:	1141530e 	bge	r2,r5,4110ad74 <___vfprintf_internal_r+0x1564>
4110a828:	dc401f17 	ldw	r17,124(sp)
4110a82c:	00800044 	movi	r2,1
4110a830:	40800115 	stw	r2,4(r8)
4110a834:	8c400044 	addi	r17,r17,1
4110a838:	44000015 	stw	r16,0(r8)
4110a83c:	d8c02015 	stw	r3,128(sp)
4110a840:	dc401f15 	stw	r17,124(sp)
4110a844:	008001c4 	movi	r2,7
4110a848:	14416b16 	blt	r2,r17,4110adf8 <___vfprintf_internal_r+0x15e8>
4110a84c:	42000204 	addi	r8,r8,8
4110a850:	d8803717 	ldw	r2,220(sp)
4110a854:	d9003417 	ldw	r4,208(sp)
4110a858:	8c400044 	addi	r17,r17,1
4110a85c:	10c7883a 	add	r3,r2,r3
4110a860:	40800115 	stw	r2,4(r8)
4110a864:	41000015 	stw	r4,0(r8)
4110a868:	d8c02015 	stw	r3,128(sp)
4110a86c:	dc401f15 	stw	r17,124(sp)
4110a870:	008001c4 	movi	r2,7
4110a874:	14416916 	blt	r2,r17,4110ae1c <___vfprintf_internal_r+0x160c>
4110a878:	45800204 	addi	r22,r8,8
4110a87c:	d9003617 	ldw	r4,216(sp)
4110a880:	d9403817 	ldw	r5,224(sp)
4110a884:	000d883a 	mov	r6,zero
4110a888:	000f883a 	mov	r7,zero
4110a88c:	d8c03c15 	stw	r3,240(sp)
4110a890:	1114aa40 	call	41114aa4 <__eqdf2>
4110a894:	d8c03c17 	ldw	r3,240(sp)
4110a898:	1000bc26 	beq	r2,zero,4110ab8c <___vfprintf_internal_r+0x137c>
4110a89c:	d9403317 	ldw	r5,204(sp)
4110a8a0:	84000044 	addi	r16,r16,1
4110a8a4:	8c400044 	addi	r17,r17,1
4110a8a8:	28bfffc4 	addi	r2,r5,-1
4110a8ac:	1887883a 	add	r3,r3,r2
4110a8b0:	b0800115 	stw	r2,4(r22)
4110a8b4:	b4000015 	stw	r16,0(r22)
4110a8b8:	d8c02015 	stw	r3,128(sp)
4110a8bc:	dc401f15 	stw	r17,124(sp)
4110a8c0:	008001c4 	movi	r2,7
4110a8c4:	14414316 	blt	r2,r17,4110add4 <___vfprintf_internal_r+0x15c4>
4110a8c8:	b5800204 	addi	r22,r22,8
4110a8cc:	d9003a17 	ldw	r4,232(sp)
4110a8d0:	df0022c4 	addi	fp,sp,139
4110a8d4:	8c400044 	addi	r17,r17,1
4110a8d8:	20c7883a 	add	r3,r4,r3
4110a8dc:	b7000015 	stw	fp,0(r22)
4110a8e0:	b1000115 	stw	r4,4(r22)
4110a8e4:	d8c02015 	stw	r3,128(sp)
4110a8e8:	dc401f15 	stw	r17,124(sp)
4110a8ec:	008001c4 	movi	r2,7
4110a8f0:	14400e16 	blt	r2,r17,4110a92c <___vfprintf_internal_r+0x111c>
4110a8f4:	b2000204 	addi	r8,r22,8
4110a8f8:	003e3a06 	br	4110a1e4 <__reset+0xbb0ea1e4>
4110a8fc:	011044b4 	movhi	r4,16658
4110a900:	212f4484 	addi	r4,r4,-17134
4110a904:	d9002b15 	stw	r4,172(sp)
4110a908:	d9002b17 	ldw	r4,172(sp)
4110a90c:	1c07883a 	add	r3,r3,r16
4110a910:	44000115 	stw	r16,4(r8)
4110a914:	41000015 	stw	r4,0(r8)
4110a918:	10800044 	addi	r2,r2,1
4110a91c:	d8c02015 	stw	r3,128(sp)
4110a920:	d8801f15 	stw	r2,124(sp)
4110a924:	010001c4 	movi	r4,7
4110a928:	20be2d0e 	bge	r4,r2,4110a1e0 <__reset+0xbb0ea1e0>
4110a92c:	d9002c17 	ldw	r4,176(sp)
4110a930:	d9801e04 	addi	r6,sp,120
4110a934:	b80b883a 	mov	r5,r23
4110a938:	1110e2c0 	call	41110e2c <__sprint_r>
4110a93c:	103cb61e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110a940:	d8c02017 	ldw	r3,128(sp)
4110a944:	da000404 	addi	r8,sp,16
4110a948:	003e2606 	br	4110a1e4 <__reset+0xbb0ea1e4>
4110a94c:	d9002c17 	ldw	r4,176(sp)
4110a950:	d9801e04 	addi	r6,sp,120
4110a954:	b80b883a 	mov	r5,r23
4110a958:	1110e2c0 	call	41110e2c <__sprint_r>
4110a95c:	103e5d26 	beq	r2,zero,4110a2d4 <__reset+0xbb0ea2d4>
4110a960:	003cad06 	br	41109c18 <__reset+0xbb0e9c18>
4110a964:	d9002c17 	ldw	r4,176(sp)
4110a968:	d9801e04 	addi	r6,sp,120
4110a96c:	b80b883a 	mov	r5,r23
4110a970:	1110e2c0 	call	41110e2c <__sprint_r>
4110a974:	103ca81e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110a978:	d8c02017 	ldw	r3,128(sp)
4110a97c:	da000404 	addi	r8,sp,16
4110a980:	003e0b06 	br	4110a1b0 <__reset+0xbb0ea1b0>
4110a984:	d9002c17 	ldw	r4,176(sp)
4110a988:	d9801e04 	addi	r6,sp,120
4110a98c:	b80b883a 	mov	r5,r23
4110a990:	1110e2c0 	call	41110e2c <__sprint_r>
4110a994:	103ca01e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110a998:	d8c02017 	ldw	r3,128(sp)
4110a99c:	da000404 	addi	r8,sp,16
4110a9a0:	003dbd06 	br	4110a098 <__reset+0xbb0ea098>
4110a9a4:	d9002c17 	ldw	r4,176(sp)
4110a9a8:	d9801e04 	addi	r6,sp,120
4110a9ac:	b80b883a 	mov	r5,r23
4110a9b0:	1110e2c0 	call	41110e2c <__sprint_r>
4110a9b4:	103c981e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110a9b8:	d8c02017 	ldw	r3,128(sp)
4110a9bc:	da000404 	addi	r8,sp,16
4110a9c0:	003dc306 	br	4110a0d0 <__reset+0xbb0ea0d0>
4110a9c4:	d8802917 	ldw	r2,164(sp)
4110a9c8:	d8002785 	stb	zero,158(sp)
4110a9cc:	103f0616 	blt	r2,zero,4110a5e8 <__reset+0xbb0ea5e8>
4110a9d0:	00ffdfc4 	movi	r3,-129
4110a9d4:	9d84b03a 	or	r2,r19,r22
4110a9d8:	90e4703a 	and	r18,r18,r3
4110a9dc:	103c6b26 	beq	r2,zero,41109b8c <__reset+0xbb0e9b8c>
4110a9e0:	0039883a 	mov	fp,zero
4110a9e4:	003e7406 	br	4110a3b8 <__reset+0xbb0ea3b8>
4110a9e8:	9080040c 	andi	r2,r18,16
4110a9ec:	1001b326 	beq	r2,zero,4110b0bc <___vfprintf_internal_r+0x18ac>
4110a9f0:	d9002d17 	ldw	r4,180(sp)
4110a9f4:	d9402917 	ldw	r5,164(sp)
4110a9f8:	d8002785 	stb	zero,158(sp)
4110a9fc:	20800104 	addi	r2,r4,4
4110aa00:	24c00017 	ldw	r19,0(r4)
4110aa04:	002d883a 	mov	r22,zero
4110aa08:	2801b516 	blt	r5,zero,4110b0e0 <___vfprintf_internal_r+0x18d0>
4110aa0c:	00ffdfc4 	movi	r3,-129
4110aa10:	d8802d15 	stw	r2,180(sp)
4110aa14:	90e4703a 	and	r18,r18,r3
4110aa18:	983d2726 	beq	r19,zero,41109eb8 <__reset+0xbb0e9eb8>
4110aa1c:	0039883a 	mov	fp,zero
4110aa20:	003d2a06 	br	41109ecc <__reset+0xbb0e9ecc>
4110aa24:	dc402617 	ldw	r17,152(sp)
4110aa28:	0441d30e 	bge	zero,r17,4110b178 <___vfprintf_internal_r+0x1968>
4110aa2c:	dc403217 	ldw	r17,200(sp)
4110aa30:	d8803317 	ldw	r2,204(sp)
4110aa34:	1440010e 	bge	r2,r17,4110aa3c <___vfprintf_internal_r+0x122c>
4110aa38:	1023883a 	mov	r17,r2
4110aa3c:	04400a0e 	bge	zero,r17,4110aa68 <___vfprintf_internal_r+0x1258>
4110aa40:	d8801f17 	ldw	r2,124(sp)
4110aa44:	1c47883a 	add	r3,r3,r17
4110aa48:	44000015 	stw	r16,0(r8)
4110aa4c:	10800044 	addi	r2,r2,1
4110aa50:	44400115 	stw	r17,4(r8)
4110aa54:	d8c02015 	stw	r3,128(sp)
4110aa58:	d8801f15 	stw	r2,124(sp)
4110aa5c:	010001c4 	movi	r4,7
4110aa60:	20826516 	blt	r4,r2,4110b3f8 <___vfprintf_internal_r+0x1be8>
4110aa64:	42000204 	addi	r8,r8,8
4110aa68:	88026116 	blt	r17,zero,4110b3f0 <___vfprintf_internal_r+0x1be0>
4110aa6c:	d9003217 	ldw	r4,200(sp)
4110aa70:	2463c83a 	sub	r17,r4,r17
4110aa74:	04407b0e 	bge	zero,r17,4110ac64 <___vfprintf_internal_r+0x1454>
4110aa78:	05800404 	movi	r22,16
4110aa7c:	d8801f17 	ldw	r2,124(sp)
4110aa80:	b4419d0e 	bge	r22,r17,4110b0f8 <___vfprintf_internal_r+0x18e8>
4110aa84:	011044b4 	movhi	r4,16658
4110aa88:	212f4484 	addi	r4,r4,-17134
4110aa8c:	d9002b15 	stw	r4,172(sp)
4110aa90:	070001c4 	movi	fp,7
4110aa94:	dcc02c17 	ldw	r19,176(sp)
4110aa98:	00000306 	br	4110aaa8 <___vfprintf_internal_r+0x1298>
4110aa9c:	42000204 	addi	r8,r8,8
4110aaa0:	8c7ffc04 	addi	r17,r17,-16
4110aaa4:	b441970e 	bge	r22,r17,4110b104 <___vfprintf_internal_r+0x18f4>
4110aaa8:	18c00404 	addi	r3,r3,16
4110aaac:	10800044 	addi	r2,r2,1
4110aab0:	45000015 	stw	r20,0(r8)
4110aab4:	45800115 	stw	r22,4(r8)
4110aab8:	d8c02015 	stw	r3,128(sp)
4110aabc:	d8801f15 	stw	r2,124(sp)
4110aac0:	e0bff60e 	bge	fp,r2,4110aa9c <__reset+0xbb0eaa9c>
4110aac4:	d9801e04 	addi	r6,sp,120
4110aac8:	b80b883a 	mov	r5,r23
4110aacc:	9809883a 	mov	r4,r19
4110aad0:	1110e2c0 	call	41110e2c <__sprint_r>
4110aad4:	103c501e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110aad8:	d8c02017 	ldw	r3,128(sp)
4110aadc:	d8801f17 	ldw	r2,124(sp)
4110aae0:	da000404 	addi	r8,sp,16
4110aae4:	003fee06 	br	4110aaa0 <__reset+0xbb0eaaa0>
4110aae8:	d9002c17 	ldw	r4,176(sp)
4110aaec:	d9801e04 	addi	r6,sp,120
4110aaf0:	b80b883a 	mov	r5,r23
4110aaf4:	1110e2c0 	call	41110e2c <__sprint_r>
4110aaf8:	103c471e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110aafc:	d8c02017 	ldw	r3,128(sp)
4110ab00:	df002787 	ldb	fp,158(sp)
4110ab04:	da000404 	addi	r8,sp,16
4110ab08:	003d5606 	br	4110a064 <__reset+0xbb0ea064>
4110ab0c:	9080040c 	andi	r2,r18,16
4110ab10:	10016126 	beq	r2,zero,4110b098 <___vfprintf_internal_r+0x1888>
4110ab14:	d8802d17 	ldw	r2,180(sp)
4110ab18:	14c00017 	ldw	r19,0(r2)
4110ab1c:	10800104 	addi	r2,r2,4
4110ab20:	d8802d15 	stw	r2,180(sp)
4110ab24:	982dd7fa 	srai	r22,r19,31
4110ab28:	b005883a 	mov	r2,r22
4110ab2c:	003c8206 	br	41109d38 <__reset+0xbb0e9d38>
4110ab30:	9080040c 	andi	r2,r18,16
4110ab34:	10003526 	beq	r2,zero,4110ac0c <___vfprintf_internal_r+0x13fc>
4110ab38:	d9402d17 	ldw	r5,180(sp)
4110ab3c:	d8c02917 	ldw	r3,164(sp)
4110ab40:	d8002785 	stb	zero,158(sp)
4110ab44:	28800104 	addi	r2,r5,4
4110ab48:	2cc00017 	ldw	r19,0(r5)
4110ab4c:	002d883a 	mov	r22,zero
4110ab50:	18003716 	blt	r3,zero,4110ac30 <___vfprintf_internal_r+0x1420>
4110ab54:	00ffdfc4 	movi	r3,-129
4110ab58:	d8802d15 	stw	r2,180(sp)
4110ab5c:	90e4703a 	and	r18,r18,r3
4110ab60:	0039883a 	mov	fp,zero
4110ab64:	983df326 	beq	r19,zero,4110a334 <__reset+0xbb0ea334>
4110ab68:	00800244 	movi	r2,9
4110ab6c:	14fc7b36 	bltu	r2,r19,41109d5c <__reset+0xbb0e9d5c>
4110ab70:	d8c02817 	ldw	r3,160(sp)
4110ab74:	dc001dc4 	addi	r16,sp,119
4110ab78:	9cc00c04 	addi	r19,r19,48
4110ab7c:	1c07c83a 	sub	r3,r3,r16
4110ab80:	dcc01dc5 	stb	r19,119(sp)
4110ab84:	d8c02e15 	stw	r3,184(sp)
4110ab88:	003ce806 	br	41109f2c <__reset+0xbb0e9f2c>
4110ab8c:	d8803317 	ldw	r2,204(sp)
4110ab90:	143fffc4 	addi	r16,r2,-1
4110ab94:	043f4d0e 	bge	zero,r16,4110a8cc <__reset+0xbb0ea8cc>
4110ab98:	07000404 	movi	fp,16
4110ab9c:	e400810e 	bge	fp,r16,4110ada4 <___vfprintf_internal_r+0x1594>
4110aba0:	015044b4 	movhi	r5,16658
4110aba4:	296f4484 	addi	r5,r5,-17134
4110aba8:	d9402b15 	stw	r5,172(sp)
4110abac:	01c001c4 	movi	r7,7
4110abb0:	dcc02c17 	ldw	r19,176(sp)
4110abb4:	00000306 	br	4110abc4 <___vfprintf_internal_r+0x13b4>
4110abb8:	b5800204 	addi	r22,r22,8
4110abbc:	843ffc04 	addi	r16,r16,-16
4110abc0:	e4007b0e 	bge	fp,r16,4110adb0 <___vfprintf_internal_r+0x15a0>
4110abc4:	18c00404 	addi	r3,r3,16
4110abc8:	8c400044 	addi	r17,r17,1
4110abcc:	b5000015 	stw	r20,0(r22)
4110abd0:	b7000115 	stw	fp,4(r22)
4110abd4:	d8c02015 	stw	r3,128(sp)
4110abd8:	dc401f15 	stw	r17,124(sp)
4110abdc:	3c7ff60e 	bge	r7,r17,4110abb8 <__reset+0xbb0eabb8>
4110abe0:	d9801e04 	addi	r6,sp,120
4110abe4:	b80b883a 	mov	r5,r23
4110abe8:	9809883a 	mov	r4,r19
4110abec:	d9c03c15 	stw	r7,240(sp)
4110abf0:	1110e2c0 	call	41110e2c <__sprint_r>
4110abf4:	d9c03c17 	ldw	r7,240(sp)
4110abf8:	103c071e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110abfc:	d8c02017 	ldw	r3,128(sp)
4110ac00:	dc401f17 	ldw	r17,124(sp)
4110ac04:	dd800404 	addi	r22,sp,16
4110ac08:	003fec06 	br	4110abbc <__reset+0xbb0eabbc>
4110ac0c:	9080100c 	andi	r2,r18,64
4110ac10:	d8002785 	stb	zero,158(sp)
4110ac14:	10010e26 	beq	r2,zero,4110b050 <___vfprintf_internal_r+0x1840>
4110ac18:	d9002d17 	ldw	r4,180(sp)
4110ac1c:	d9402917 	ldw	r5,164(sp)
4110ac20:	002d883a 	mov	r22,zero
4110ac24:	20800104 	addi	r2,r4,4
4110ac28:	24c0000b 	ldhu	r19,0(r4)
4110ac2c:	283fc90e 	bge	r5,zero,4110ab54 <__reset+0xbb0eab54>
4110ac30:	d8802d15 	stw	r2,180(sp)
4110ac34:	0039883a 	mov	fp,zero
4110ac38:	9d84b03a 	or	r2,r19,r22
4110ac3c:	103c461e 	bne	r2,zero,41109d58 <__reset+0xbb0e9d58>
4110ac40:	00800044 	movi	r2,1
4110ac44:	003e6c06 	br	4110a5f8 <__reset+0xbb0ea5f8>
4110ac48:	d9002c17 	ldw	r4,176(sp)
4110ac4c:	d9801e04 	addi	r6,sp,120
4110ac50:	b80b883a 	mov	r5,r23
4110ac54:	1110e2c0 	call	41110e2c <__sprint_r>
4110ac58:	103bef1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110ac5c:	d8c02017 	ldw	r3,128(sp)
4110ac60:	da000404 	addi	r8,sp,16
4110ac64:	d9003217 	ldw	r4,200(sp)
4110ac68:	d8802617 	ldw	r2,152(sp)
4110ac6c:	d9403317 	ldw	r5,204(sp)
4110ac70:	8123883a 	add	r17,r16,r4
4110ac74:	11400216 	blt	r2,r5,4110ac80 <___vfprintf_internal_r+0x1470>
4110ac78:	9100004c 	andi	r4,r18,1
4110ac7c:	20000d26 	beq	r4,zero,4110acb4 <___vfprintf_internal_r+0x14a4>
4110ac80:	d9003717 	ldw	r4,220(sp)
4110ac84:	d9403417 	ldw	r5,208(sp)
4110ac88:	1907883a 	add	r3,r3,r4
4110ac8c:	d9001f17 	ldw	r4,124(sp)
4110ac90:	41400015 	stw	r5,0(r8)
4110ac94:	d9403717 	ldw	r5,220(sp)
4110ac98:	21000044 	addi	r4,r4,1
4110ac9c:	d8c02015 	stw	r3,128(sp)
4110aca0:	41400115 	stw	r5,4(r8)
4110aca4:	d9001f15 	stw	r4,124(sp)
4110aca8:	014001c4 	movi	r5,7
4110acac:	2901e816 	blt	r5,r4,4110b450 <___vfprintf_internal_r+0x1c40>
4110acb0:	42000204 	addi	r8,r8,8
4110acb4:	d9003317 	ldw	r4,204(sp)
4110acb8:	8121883a 	add	r16,r16,r4
4110acbc:	2085c83a 	sub	r2,r4,r2
4110acc0:	8461c83a 	sub	r16,r16,r17
4110acc4:	1400010e 	bge	r2,r16,4110accc <___vfprintf_internal_r+0x14bc>
4110acc8:	1021883a 	mov	r16,r2
4110accc:	04000a0e 	bge	zero,r16,4110acf8 <___vfprintf_internal_r+0x14e8>
4110acd0:	d9001f17 	ldw	r4,124(sp)
4110acd4:	1c07883a 	add	r3,r3,r16
4110acd8:	44400015 	stw	r17,0(r8)
4110acdc:	21000044 	addi	r4,r4,1
4110ace0:	44000115 	stw	r16,4(r8)
4110ace4:	d8c02015 	stw	r3,128(sp)
4110ace8:	d9001f15 	stw	r4,124(sp)
4110acec:	014001c4 	movi	r5,7
4110acf0:	2901fb16 	blt	r5,r4,4110b4e0 <___vfprintf_internal_r+0x1cd0>
4110acf4:	42000204 	addi	r8,r8,8
4110acf8:	8001f716 	blt	r16,zero,4110b4d8 <___vfprintf_internal_r+0x1cc8>
4110acfc:	1421c83a 	sub	r16,r2,r16
4110ad00:	043d380e 	bge	zero,r16,4110a1e4 <__reset+0xbb0ea1e4>
4110ad04:	04400404 	movi	r17,16
4110ad08:	d8801f17 	ldw	r2,124(sp)
4110ad0c:	8c3efb0e 	bge	r17,r16,4110a8fc <__reset+0xbb0ea8fc>
4110ad10:	015044b4 	movhi	r5,16658
4110ad14:	296f4484 	addi	r5,r5,-17134
4110ad18:	d9402b15 	stw	r5,172(sp)
4110ad1c:	058001c4 	movi	r22,7
4110ad20:	dcc02c17 	ldw	r19,176(sp)
4110ad24:	00000306 	br	4110ad34 <___vfprintf_internal_r+0x1524>
4110ad28:	42000204 	addi	r8,r8,8
4110ad2c:	843ffc04 	addi	r16,r16,-16
4110ad30:	8c3ef50e 	bge	r17,r16,4110a908 <__reset+0xbb0ea908>
4110ad34:	18c00404 	addi	r3,r3,16
4110ad38:	10800044 	addi	r2,r2,1
4110ad3c:	45000015 	stw	r20,0(r8)
4110ad40:	44400115 	stw	r17,4(r8)
4110ad44:	d8c02015 	stw	r3,128(sp)
4110ad48:	d8801f15 	stw	r2,124(sp)
4110ad4c:	b0bff60e 	bge	r22,r2,4110ad28 <__reset+0xbb0ead28>
4110ad50:	d9801e04 	addi	r6,sp,120
4110ad54:	b80b883a 	mov	r5,r23
4110ad58:	9809883a 	mov	r4,r19
4110ad5c:	1110e2c0 	call	41110e2c <__sprint_r>
4110ad60:	103bad1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110ad64:	d8c02017 	ldw	r3,128(sp)
4110ad68:	d8801f17 	ldw	r2,124(sp)
4110ad6c:	da000404 	addi	r8,sp,16
4110ad70:	003fee06 	br	4110ad2c <__reset+0xbb0ead2c>
4110ad74:	9088703a 	and	r4,r18,r2
4110ad78:	203eab1e 	bne	r4,zero,4110a828 <__reset+0xbb0ea828>
4110ad7c:	dc401f17 	ldw	r17,124(sp)
4110ad80:	40800115 	stw	r2,4(r8)
4110ad84:	44000015 	stw	r16,0(r8)
4110ad88:	8c400044 	addi	r17,r17,1
4110ad8c:	d8c02015 	stw	r3,128(sp)
4110ad90:	dc401f15 	stw	r17,124(sp)
4110ad94:	008001c4 	movi	r2,7
4110ad98:	14400e16 	blt	r2,r17,4110add4 <___vfprintf_internal_r+0x15c4>
4110ad9c:	45800204 	addi	r22,r8,8
4110ada0:	003eca06 	br	4110a8cc <__reset+0xbb0ea8cc>
4110ada4:	011044b4 	movhi	r4,16658
4110ada8:	212f4484 	addi	r4,r4,-17134
4110adac:	d9002b15 	stw	r4,172(sp)
4110adb0:	d8802b17 	ldw	r2,172(sp)
4110adb4:	1c07883a 	add	r3,r3,r16
4110adb8:	8c400044 	addi	r17,r17,1
4110adbc:	b0800015 	stw	r2,0(r22)
4110adc0:	b4000115 	stw	r16,4(r22)
4110adc4:	d8c02015 	stw	r3,128(sp)
4110adc8:	dc401f15 	stw	r17,124(sp)
4110adcc:	008001c4 	movi	r2,7
4110add0:	147ebd0e 	bge	r2,r17,4110a8c8 <__reset+0xbb0ea8c8>
4110add4:	d9002c17 	ldw	r4,176(sp)
4110add8:	d9801e04 	addi	r6,sp,120
4110addc:	b80b883a 	mov	r5,r23
4110ade0:	1110e2c0 	call	41110e2c <__sprint_r>
4110ade4:	103b8c1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110ade8:	d8c02017 	ldw	r3,128(sp)
4110adec:	dc401f17 	ldw	r17,124(sp)
4110adf0:	dd800404 	addi	r22,sp,16
4110adf4:	003eb506 	br	4110a8cc <__reset+0xbb0ea8cc>
4110adf8:	d9002c17 	ldw	r4,176(sp)
4110adfc:	d9801e04 	addi	r6,sp,120
4110ae00:	b80b883a 	mov	r5,r23
4110ae04:	1110e2c0 	call	41110e2c <__sprint_r>
4110ae08:	103b831e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110ae0c:	d8c02017 	ldw	r3,128(sp)
4110ae10:	dc401f17 	ldw	r17,124(sp)
4110ae14:	da000404 	addi	r8,sp,16
4110ae18:	003e8d06 	br	4110a850 <__reset+0xbb0ea850>
4110ae1c:	d9002c17 	ldw	r4,176(sp)
4110ae20:	d9801e04 	addi	r6,sp,120
4110ae24:	b80b883a 	mov	r5,r23
4110ae28:	1110e2c0 	call	41110e2c <__sprint_r>
4110ae2c:	103b7a1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110ae30:	d8c02017 	ldw	r3,128(sp)
4110ae34:	dc401f17 	ldw	r17,124(sp)
4110ae38:	dd800404 	addi	r22,sp,16
4110ae3c:	003e8f06 	br	4110a87c <__reset+0xbb0ea87c>
4110ae40:	0027883a 	mov	r19,zero
4110ae44:	003f4a06 	br	4110ab70 <__reset+0xbb0eab70>
4110ae48:	d9002c17 	ldw	r4,176(sp)
4110ae4c:	d9801e04 	addi	r6,sp,120
4110ae50:	b80b883a 	mov	r5,r23
4110ae54:	1110e2c0 	call	41110e2c <__sprint_r>
4110ae58:	103b6f1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110ae5c:	d8c02017 	ldw	r3,128(sp)
4110ae60:	da000404 	addi	r8,sp,16
4110ae64:	003c9d06 	br	4110a0dc <__reset+0xbb0ea0dc>
4110ae68:	04e7c83a 	sub	r19,zero,r19
4110ae6c:	9804c03a 	cmpne	r2,r19,zero
4110ae70:	05adc83a 	sub	r22,zero,r22
4110ae74:	b0adc83a 	sub	r22,r22,r2
4110ae78:	d8802917 	ldw	r2,164(sp)
4110ae7c:	07000b44 	movi	fp,45
4110ae80:	df002785 	stb	fp,158(sp)
4110ae84:	10017b16 	blt	r2,zero,4110b474 <___vfprintf_internal_r+0x1c64>
4110ae88:	00bfdfc4 	movi	r2,-129
4110ae8c:	90a4703a 	and	r18,r18,r2
4110ae90:	003bb106 	br	41109d58 <__reset+0xbb0e9d58>
4110ae94:	d9003617 	ldw	r4,216(sp)
4110ae98:	d9403817 	ldw	r5,224(sp)
4110ae9c:	da003d15 	stw	r8,244(sp)
4110aea0:	1110a500 	call	41110a50 <__fpclassifyd>
4110aea4:	da003d17 	ldw	r8,244(sp)
4110aea8:	1000f026 	beq	r2,zero,4110b26c <___vfprintf_internal_r+0x1a5c>
4110aeac:	d9002917 	ldw	r4,164(sp)
4110aeb0:	05bff7c4 	movi	r22,-33
4110aeb4:	00bfffc4 	movi	r2,-1
4110aeb8:	8dac703a 	and	r22,r17,r22
4110aebc:	20820026 	beq	r4,r2,4110b6c0 <___vfprintf_internal_r+0x1eb0>
4110aec0:	008011c4 	movi	r2,71
4110aec4:	b081f726 	beq	r22,r2,4110b6a4 <___vfprintf_internal_r+0x1e94>
4110aec8:	d9003817 	ldw	r4,224(sp)
4110aecc:	90c04014 	ori	r3,r18,256
4110aed0:	d8c02b15 	stw	r3,172(sp)
4110aed4:	20021516 	blt	r4,zero,4110b72c <___vfprintf_internal_r+0x1f1c>
4110aed8:	dcc03817 	ldw	r19,224(sp)
4110aedc:	d8002a05 	stb	zero,168(sp)
4110aee0:	00801984 	movi	r2,102
4110aee4:	8881f926 	beq	r17,r2,4110b6cc <___vfprintf_internal_r+0x1ebc>
4110aee8:	00801184 	movi	r2,70
4110aeec:	88821c26 	beq	r17,r2,4110b760 <___vfprintf_internal_r+0x1f50>
4110aef0:	00801144 	movi	r2,69
4110aef4:	b081ef26 	beq	r22,r2,4110b6b4 <___vfprintf_internal_r+0x1ea4>
4110aef8:	d8c02917 	ldw	r3,164(sp)
4110aefc:	d8802104 	addi	r2,sp,132
4110af00:	d8800315 	stw	r2,12(sp)
4110af04:	d9403617 	ldw	r5,216(sp)
4110af08:	d8802504 	addi	r2,sp,148
4110af0c:	d9002c17 	ldw	r4,176(sp)
4110af10:	d8800215 	stw	r2,8(sp)
4110af14:	d8802604 	addi	r2,sp,152
4110af18:	d8c00015 	stw	r3,0(sp)
4110af1c:	d8800115 	stw	r2,4(sp)
4110af20:	01c00084 	movi	r7,2
4110af24:	980d883a 	mov	r6,r19
4110af28:	d8c03c15 	stw	r3,240(sp)
4110af2c:	da003d15 	stw	r8,244(sp)
4110af30:	110be340 	call	4110be34 <_dtoa_r>
4110af34:	1021883a 	mov	r16,r2
4110af38:	008019c4 	movi	r2,103
4110af3c:	d8c03c17 	ldw	r3,240(sp)
4110af40:	da003d17 	ldw	r8,244(sp)
4110af44:	88817126 	beq	r17,r2,4110b50c <___vfprintf_internal_r+0x1cfc>
4110af48:	008011c4 	movi	r2,71
4110af4c:	88829226 	beq	r17,r2,4110b998 <___vfprintf_internal_r+0x2188>
4110af50:	80f9883a 	add	fp,r16,r3
4110af54:	d9003617 	ldw	r4,216(sp)
4110af58:	000d883a 	mov	r6,zero
4110af5c:	000f883a 	mov	r7,zero
4110af60:	980b883a 	mov	r5,r19
4110af64:	da003d15 	stw	r8,244(sp)
4110af68:	1114aa40 	call	41114aa4 <__eqdf2>
4110af6c:	da003d17 	ldw	r8,244(sp)
4110af70:	10018d26 	beq	r2,zero,4110b5a8 <___vfprintf_internal_r+0x1d98>
4110af74:	d8802117 	ldw	r2,132(sp)
4110af78:	1700062e 	bgeu	r2,fp,4110af94 <___vfprintf_internal_r+0x1784>
4110af7c:	01000c04 	movi	r4,48
4110af80:	10c00044 	addi	r3,r2,1
4110af84:	d8c02115 	stw	r3,132(sp)
4110af88:	11000005 	stb	r4,0(r2)
4110af8c:	d8802117 	ldw	r2,132(sp)
4110af90:	173ffb36 	bltu	r2,fp,4110af80 <__reset+0xbb0eaf80>
4110af94:	1405c83a 	sub	r2,r2,r16
4110af98:	d8803315 	stw	r2,204(sp)
4110af9c:	008011c4 	movi	r2,71
4110afa0:	b0817626 	beq	r22,r2,4110b57c <___vfprintf_internal_r+0x1d6c>
4110afa4:	00801944 	movi	r2,101
4110afa8:	1442810e 	bge	r2,r17,4110b9b0 <___vfprintf_internal_r+0x21a0>
4110afac:	d8c02617 	ldw	r3,152(sp)
4110afb0:	00801984 	movi	r2,102
4110afb4:	d8c03215 	stw	r3,200(sp)
4110afb8:	8881fe26 	beq	r17,r2,4110b7b4 <___vfprintf_internal_r+0x1fa4>
4110afbc:	d8c03217 	ldw	r3,200(sp)
4110afc0:	d9003317 	ldw	r4,204(sp)
4110afc4:	1901dd16 	blt	r3,r4,4110b73c <___vfprintf_internal_r+0x1f2c>
4110afc8:	9480004c 	andi	r18,r18,1
4110afcc:	90022b1e 	bne	r18,zero,4110b87c <___vfprintf_internal_r+0x206c>
4110afd0:	1805883a 	mov	r2,r3
4110afd4:	18028016 	blt	r3,zero,4110b9d8 <___vfprintf_internal_r+0x21c8>
4110afd8:	d8c03217 	ldw	r3,200(sp)
4110afdc:	044019c4 	movi	r17,103
4110afe0:	d8c02e15 	stw	r3,184(sp)
4110afe4:	df002a07 	ldb	fp,168(sp)
4110afe8:	e001531e 	bne	fp,zero,4110b538 <___vfprintf_internal_r+0x1d28>
4110afec:	df002783 	ldbu	fp,158(sp)
4110aff0:	d8802a15 	stw	r2,168(sp)
4110aff4:	dc802b17 	ldw	r18,172(sp)
4110aff8:	d8002915 	stw	zero,164(sp)
4110affc:	003bd106 	br	41109f44 <__reset+0xbb0e9f44>
4110b000:	d8802d17 	ldw	r2,180(sp)
4110b004:	d8c02d17 	ldw	r3,180(sp)
4110b008:	d9002d17 	ldw	r4,180(sp)
4110b00c:	10800017 	ldw	r2,0(r2)
4110b010:	18c00117 	ldw	r3,4(r3)
4110b014:	21000204 	addi	r4,r4,8
4110b018:	d8803615 	stw	r2,216(sp)
4110b01c:	d8c03815 	stw	r3,224(sp)
4110b020:	d9002d15 	stw	r4,180(sp)
4110b024:	003b7506 	br	41109dfc <__reset+0xbb0e9dfc>
4110b028:	ac400007 	ldb	r17,0(r21)
4110b02c:	003a5906 	br	41109994 <__reset+0xbb0e9994>
4110b030:	9080100c 	andi	r2,r18,64
4110b034:	1000a826 	beq	r2,zero,4110b2d8 <___vfprintf_internal_r+0x1ac8>
4110b038:	d9002d17 	ldw	r4,180(sp)
4110b03c:	002d883a 	mov	r22,zero
4110b040:	24c0000b 	ldhu	r19,0(r4)
4110b044:	21000104 	addi	r4,r4,4
4110b048:	d9002d15 	stw	r4,180(sp)
4110b04c:	003ccb06 	br	4110a37c <__reset+0xbb0ea37c>
4110b050:	d8c02d17 	ldw	r3,180(sp)
4110b054:	d9002917 	ldw	r4,164(sp)
4110b058:	002d883a 	mov	r22,zero
4110b05c:	18800104 	addi	r2,r3,4
4110b060:	1cc00017 	ldw	r19,0(r3)
4110b064:	203ebb0e 	bge	r4,zero,4110ab54 <__reset+0xbb0eab54>
4110b068:	003ef106 	br	4110ac30 <__reset+0xbb0eac30>
4110b06c:	9080040c 	andi	r2,r18,16
4110b070:	1000921e 	bne	r2,zero,4110b2bc <___vfprintf_internal_r+0x1aac>
4110b074:	9480100c 	andi	r18,r18,64
4110b078:	90013926 	beq	r18,zero,4110b560 <___vfprintf_internal_r+0x1d50>
4110b07c:	d9002d17 	ldw	r4,180(sp)
4110b080:	d9402f17 	ldw	r5,188(sp)
4110b084:	20800017 	ldw	r2,0(r4)
4110b088:	21000104 	addi	r4,r4,4
4110b08c:	d9002d15 	stw	r4,180(sp)
4110b090:	1140000d 	sth	r5,0(r2)
4110b094:	003a1606 	br	411098f0 <__reset+0xbb0e98f0>
4110b098:	9080100c 	andi	r2,r18,64
4110b09c:	10008026 	beq	r2,zero,4110b2a0 <___vfprintf_internal_r+0x1a90>
4110b0a0:	d8c02d17 	ldw	r3,180(sp)
4110b0a4:	1cc0000f 	ldh	r19,0(r3)
4110b0a8:	18c00104 	addi	r3,r3,4
4110b0ac:	d8c02d15 	stw	r3,180(sp)
4110b0b0:	982dd7fa 	srai	r22,r19,31
4110b0b4:	b005883a 	mov	r2,r22
4110b0b8:	003b1f06 	br	41109d38 <__reset+0xbb0e9d38>
4110b0bc:	9080100c 	andi	r2,r18,64
4110b0c0:	d8002785 	stb	zero,158(sp)
4110b0c4:	10008a1e 	bne	r2,zero,4110b2f0 <___vfprintf_internal_r+0x1ae0>
4110b0c8:	d9402d17 	ldw	r5,180(sp)
4110b0cc:	d8c02917 	ldw	r3,164(sp)
4110b0d0:	002d883a 	mov	r22,zero
4110b0d4:	28800104 	addi	r2,r5,4
4110b0d8:	2cc00017 	ldw	r19,0(r5)
4110b0dc:	183e4b0e 	bge	r3,zero,4110aa0c <__reset+0xbb0eaa0c>
4110b0e0:	9d86b03a 	or	r3,r19,r22
4110b0e4:	d8802d15 	stw	r2,180(sp)
4110b0e8:	183e4c1e 	bne	r3,zero,4110aa1c <__reset+0xbb0eaa1c>
4110b0ec:	0039883a 	mov	fp,zero
4110b0f0:	0005883a 	mov	r2,zero
4110b0f4:	003d4006 	br	4110a5f8 <__reset+0xbb0ea5f8>
4110b0f8:	015044b4 	movhi	r5,16658
4110b0fc:	296f4484 	addi	r5,r5,-17134
4110b100:	d9402b15 	stw	r5,172(sp)
4110b104:	d9402b17 	ldw	r5,172(sp)
4110b108:	1c47883a 	add	r3,r3,r17
4110b10c:	10800044 	addi	r2,r2,1
4110b110:	41400015 	stw	r5,0(r8)
4110b114:	44400115 	stw	r17,4(r8)
4110b118:	d8c02015 	stw	r3,128(sp)
4110b11c:	d8801f15 	stw	r2,124(sp)
4110b120:	010001c4 	movi	r4,7
4110b124:	20bec816 	blt	r4,r2,4110ac48 <__reset+0xbb0eac48>
4110b128:	42000204 	addi	r8,r8,8
4110b12c:	003ecd06 	br	4110ac64 <__reset+0xbb0eac64>
4110b130:	d9002917 	ldw	r4,164(sp)
4110b134:	d8002785 	stb	zero,158(sp)
4110b138:	203d2d16 	blt	r4,zero,4110a5f0 <__reset+0xbb0ea5f0>
4110b13c:	00bfdfc4 	movi	r2,-129
4110b140:	90a4703a 	and	r18,r18,r2
4110b144:	003a9106 	br	41109b8c <__reset+0xbb0e9b8c>
4110b148:	011044b4 	movhi	r4,16658
4110b14c:	212f4484 	addi	r4,r4,-17134
4110b150:	d9002b15 	stw	r4,172(sp)
4110b154:	003c0c06 	br	4110a188 <__reset+0xbb0ea188>
4110b158:	d9002c17 	ldw	r4,176(sp)
4110b15c:	d9801e04 	addi	r6,sp,120
4110b160:	b80b883a 	mov	r5,r23
4110b164:	1110e2c0 	call	41110e2c <__sprint_r>
4110b168:	103aab1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110b16c:	d8c02017 	ldw	r3,128(sp)
4110b170:	da000404 	addi	r8,sp,16
4110b174:	003d4106 	br	4110a67c <__reset+0xbb0ea67c>
4110b178:	d8801f17 	ldw	r2,124(sp)
4110b17c:	015044b4 	movhi	r5,16658
4110b180:	01000044 	movi	r4,1
4110b184:	18c00044 	addi	r3,r3,1
4110b188:	10800044 	addi	r2,r2,1
4110b18c:	296f4404 	addi	r5,r5,-17136
4110b190:	41000115 	stw	r4,4(r8)
4110b194:	41400015 	stw	r5,0(r8)
4110b198:	d8c02015 	stw	r3,128(sp)
4110b19c:	d8801f15 	stw	r2,124(sp)
4110b1a0:	010001c4 	movi	r4,7
4110b1a4:	20805c16 	blt	r4,r2,4110b318 <___vfprintf_internal_r+0x1b08>
4110b1a8:	42000204 	addi	r8,r8,8
4110b1ac:	8800041e 	bne	r17,zero,4110b1c0 <___vfprintf_internal_r+0x19b0>
4110b1b0:	d8803317 	ldw	r2,204(sp)
4110b1b4:	1000021e 	bne	r2,zero,4110b1c0 <___vfprintf_internal_r+0x19b0>
4110b1b8:	9080004c 	andi	r2,r18,1
4110b1bc:	103c0926 	beq	r2,zero,4110a1e4 <__reset+0xbb0ea1e4>
4110b1c0:	d9003717 	ldw	r4,220(sp)
4110b1c4:	d8801f17 	ldw	r2,124(sp)
4110b1c8:	d9403417 	ldw	r5,208(sp)
4110b1cc:	20c7883a 	add	r3,r4,r3
4110b1d0:	10800044 	addi	r2,r2,1
4110b1d4:	41000115 	stw	r4,4(r8)
4110b1d8:	41400015 	stw	r5,0(r8)
4110b1dc:	d8c02015 	stw	r3,128(sp)
4110b1e0:	d8801f15 	stw	r2,124(sp)
4110b1e4:	010001c4 	movi	r4,7
4110b1e8:	20812116 	blt	r4,r2,4110b670 <___vfprintf_internal_r+0x1e60>
4110b1ec:	42000204 	addi	r8,r8,8
4110b1f0:	0463c83a 	sub	r17,zero,r17
4110b1f4:	0440730e 	bge	zero,r17,4110b3c4 <___vfprintf_internal_r+0x1bb4>
4110b1f8:	05800404 	movi	r22,16
4110b1fc:	b440860e 	bge	r22,r17,4110b418 <___vfprintf_internal_r+0x1c08>
4110b200:	015044b4 	movhi	r5,16658
4110b204:	296f4484 	addi	r5,r5,-17134
4110b208:	d9402b15 	stw	r5,172(sp)
4110b20c:	070001c4 	movi	fp,7
4110b210:	dcc02c17 	ldw	r19,176(sp)
4110b214:	00000306 	br	4110b224 <___vfprintf_internal_r+0x1a14>
4110b218:	42000204 	addi	r8,r8,8
4110b21c:	8c7ffc04 	addi	r17,r17,-16
4110b220:	b440800e 	bge	r22,r17,4110b424 <___vfprintf_internal_r+0x1c14>
4110b224:	18c00404 	addi	r3,r3,16
4110b228:	10800044 	addi	r2,r2,1
4110b22c:	45000015 	stw	r20,0(r8)
4110b230:	45800115 	stw	r22,4(r8)
4110b234:	d8c02015 	stw	r3,128(sp)
4110b238:	d8801f15 	stw	r2,124(sp)
4110b23c:	e0bff60e 	bge	fp,r2,4110b218 <__reset+0xbb0eb218>
4110b240:	d9801e04 	addi	r6,sp,120
4110b244:	b80b883a 	mov	r5,r23
4110b248:	9809883a 	mov	r4,r19
4110b24c:	1110e2c0 	call	41110e2c <__sprint_r>
4110b250:	103a711e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110b254:	d8c02017 	ldw	r3,128(sp)
4110b258:	d8801f17 	ldw	r2,124(sp)
4110b25c:	da000404 	addi	r8,sp,16
4110b260:	003fee06 	br	4110b21c <__reset+0xbb0eb21c>
4110b264:	00bfffc4 	movi	r2,-1
4110b268:	003a6f06 	br	41109c28 <__reset+0xbb0e9c28>
4110b26c:	008011c4 	movi	r2,71
4110b270:	1440b816 	blt	r2,r17,4110b554 <___vfprintf_internal_r+0x1d44>
4110b274:	041044b4 	movhi	r16,16658
4110b278:	842f3604 	addi	r16,r16,-17192
4110b27c:	00c000c4 	movi	r3,3
4110b280:	00bfdfc4 	movi	r2,-129
4110b284:	d8c02a15 	stw	r3,168(sp)
4110b288:	90a4703a 	and	r18,r18,r2
4110b28c:	df002783 	ldbu	fp,158(sp)
4110b290:	d8c02e15 	stw	r3,184(sp)
4110b294:	d8002915 	stw	zero,164(sp)
4110b298:	d8003215 	stw	zero,200(sp)
4110b29c:	003b2906 	br	41109f44 <__reset+0xbb0e9f44>
4110b2a0:	d9002d17 	ldw	r4,180(sp)
4110b2a4:	24c00017 	ldw	r19,0(r4)
4110b2a8:	21000104 	addi	r4,r4,4
4110b2ac:	d9002d15 	stw	r4,180(sp)
4110b2b0:	982dd7fa 	srai	r22,r19,31
4110b2b4:	b005883a 	mov	r2,r22
4110b2b8:	003a9f06 	br	41109d38 <__reset+0xbb0e9d38>
4110b2bc:	d9402d17 	ldw	r5,180(sp)
4110b2c0:	d8c02f17 	ldw	r3,188(sp)
4110b2c4:	28800017 	ldw	r2,0(r5)
4110b2c8:	29400104 	addi	r5,r5,4
4110b2cc:	d9402d15 	stw	r5,180(sp)
4110b2d0:	10c00015 	stw	r3,0(r2)
4110b2d4:	00398606 	br	411098f0 <__reset+0xbb0e98f0>
4110b2d8:	d9402d17 	ldw	r5,180(sp)
4110b2dc:	002d883a 	mov	r22,zero
4110b2e0:	2cc00017 	ldw	r19,0(r5)
4110b2e4:	29400104 	addi	r5,r5,4
4110b2e8:	d9402d15 	stw	r5,180(sp)
4110b2ec:	003c2306 	br	4110a37c <__reset+0xbb0ea37c>
4110b2f0:	d8c02d17 	ldw	r3,180(sp)
4110b2f4:	d9002917 	ldw	r4,164(sp)
4110b2f8:	002d883a 	mov	r22,zero
4110b2fc:	18800104 	addi	r2,r3,4
4110b300:	1cc0000b 	ldhu	r19,0(r3)
4110b304:	203dc10e 	bge	r4,zero,4110aa0c <__reset+0xbb0eaa0c>
4110b308:	003f7506 	br	4110b0e0 <__reset+0xbb0eb0e0>
4110b30c:	041044b4 	movhi	r16,16658
4110b310:	842f3404 	addi	r16,r16,-17200
4110b314:	003acc06 	br	41109e48 <__reset+0xbb0e9e48>
4110b318:	d9002c17 	ldw	r4,176(sp)
4110b31c:	d9801e04 	addi	r6,sp,120
4110b320:	b80b883a 	mov	r5,r23
4110b324:	1110e2c0 	call	41110e2c <__sprint_r>
4110b328:	103a3b1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110b32c:	dc402617 	ldw	r17,152(sp)
4110b330:	d8c02017 	ldw	r3,128(sp)
4110b334:	da000404 	addi	r8,sp,16
4110b338:	003f9c06 	br	4110b1ac <__reset+0xbb0eb1ac>
4110b33c:	ac400043 	ldbu	r17,1(r21)
4110b340:	94800814 	ori	r18,r18,32
4110b344:	ad400044 	addi	r21,r21,1
4110b348:	8c403fcc 	andi	r17,r17,255
4110b34c:	8c40201c 	xori	r17,r17,128
4110b350:	8c7fe004 	addi	r17,r17,-128
4110b354:	00398f06 	br	41109994 <__reset+0xbb0e9994>
4110b358:	d8c02d15 	stw	r3,180(sp)
4110b35c:	0039883a 	mov	fp,zero
4110b360:	003e3506 	br	4110ac38 <__reset+0xbb0eac38>
4110b364:	d9002c17 	ldw	r4,176(sp)
4110b368:	d9801e04 	addi	r6,sp,120
4110b36c:	b80b883a 	mov	r5,r23
4110b370:	1110e2c0 	call	41110e2c <__sprint_r>
4110b374:	103a281e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110b378:	d8c02017 	ldw	r3,128(sp)
4110b37c:	da000404 	addi	r8,sp,16
4110b380:	003cd006 	br	4110a6c4 <__reset+0xbb0ea6c4>
4110b384:	8009883a 	mov	r4,r16
4110b388:	da003d15 	stw	r8,244(sp)
4110b38c:	11097780 	call	41109778 <strlen>
4110b390:	d8802e15 	stw	r2,184(sp)
4110b394:	da003d17 	ldw	r8,244(sp)
4110b398:	103c340e 	bge	r2,zero,4110a46c <__reset+0xbb0ea46c>
4110b39c:	0005883a 	mov	r2,zero
4110b3a0:	003c3206 	br	4110a46c <__reset+0xbb0ea46c>
4110b3a4:	d9002c17 	ldw	r4,176(sp)
4110b3a8:	d9801e04 	addi	r6,sp,120
4110b3ac:	b80b883a 	mov	r5,r23
4110b3b0:	1110e2c0 	call	41110e2c <__sprint_r>
4110b3b4:	103a181e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110b3b8:	d8c02017 	ldw	r3,128(sp)
4110b3bc:	d8801f17 	ldw	r2,124(sp)
4110b3c0:	da000404 	addi	r8,sp,16
4110b3c4:	d9403317 	ldw	r5,204(sp)
4110b3c8:	10800044 	addi	r2,r2,1
4110b3cc:	44000015 	stw	r16,0(r8)
4110b3d0:	28c7883a 	add	r3,r5,r3
4110b3d4:	003b7d06 	br	4110a1cc <__reset+0xbb0ea1cc>
4110b3d8:	011044b4 	movhi	r4,16658
4110b3dc:	212f4884 	addi	r4,r4,-17118
4110b3e0:	d9003515 	stw	r4,212(sp)
4110b3e4:	003b1406 	br	4110a038 <__reset+0xbb0ea038>
4110b3e8:	013fffc4 	movi	r4,-1
4110b3ec:	003a3506 	br	41109cc4 <__reset+0xbb0e9cc4>
4110b3f0:	0023883a 	mov	r17,zero
4110b3f4:	003d9d06 	br	4110aa6c <__reset+0xbb0eaa6c>
4110b3f8:	d9002c17 	ldw	r4,176(sp)
4110b3fc:	d9801e04 	addi	r6,sp,120
4110b400:	b80b883a 	mov	r5,r23
4110b404:	1110e2c0 	call	41110e2c <__sprint_r>
4110b408:	103a031e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110b40c:	d8c02017 	ldw	r3,128(sp)
4110b410:	da000404 	addi	r8,sp,16
4110b414:	003d9406 	br	4110aa68 <__reset+0xbb0eaa68>
4110b418:	011044b4 	movhi	r4,16658
4110b41c:	212f4484 	addi	r4,r4,-17134
4110b420:	d9002b15 	stw	r4,172(sp)
4110b424:	d9002b17 	ldw	r4,172(sp)
4110b428:	1c47883a 	add	r3,r3,r17
4110b42c:	10800044 	addi	r2,r2,1
4110b430:	41000015 	stw	r4,0(r8)
4110b434:	44400115 	stw	r17,4(r8)
4110b438:	d8c02015 	stw	r3,128(sp)
4110b43c:	d8801f15 	stw	r2,124(sp)
4110b440:	010001c4 	movi	r4,7
4110b444:	20bfd716 	blt	r4,r2,4110b3a4 <__reset+0xbb0eb3a4>
4110b448:	42000204 	addi	r8,r8,8
4110b44c:	003fdd06 	br	4110b3c4 <__reset+0xbb0eb3c4>
4110b450:	d9002c17 	ldw	r4,176(sp)
4110b454:	d9801e04 	addi	r6,sp,120
4110b458:	b80b883a 	mov	r5,r23
4110b45c:	1110e2c0 	call	41110e2c <__sprint_r>
4110b460:	1039ed1e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110b464:	d8802617 	ldw	r2,152(sp)
4110b468:	d8c02017 	ldw	r3,128(sp)
4110b46c:	da000404 	addi	r8,sp,16
4110b470:	003e1006 	br	4110acb4 <__reset+0xbb0eacb4>
4110b474:	00800044 	movi	r2,1
4110b478:	10803fcc 	andi	r2,r2,255
4110b47c:	00c00044 	movi	r3,1
4110b480:	10fa3526 	beq	r2,r3,41109d58 <__reset+0xbb0e9d58>
4110b484:	00c00084 	movi	r3,2
4110b488:	10fbcb26 	beq	r2,r3,4110a3b8 <__reset+0xbb0ea3b8>
4110b48c:	003a8f06 	br	41109ecc <__reset+0xbb0e9ecc>
4110b490:	011044b4 	movhi	r4,16658
4110b494:	212f4884 	addi	r4,r4,-17118
4110b498:	d9003515 	stw	r4,212(sp)
4110b49c:	003b7606 	br	4110a278 <__reset+0xbb0ea278>
4110b4a0:	d8802917 	ldw	r2,164(sp)
4110b4a4:	00c00184 	movi	r3,6
4110b4a8:	1880012e 	bgeu	r3,r2,4110b4b0 <___vfprintf_internal_r+0x1ca0>
4110b4ac:	1805883a 	mov	r2,r3
4110b4b0:	d8802e15 	stw	r2,184(sp)
4110b4b4:	1000ef16 	blt	r2,zero,4110b874 <___vfprintf_internal_r+0x2064>
4110b4b8:	041044b4 	movhi	r16,16658
4110b4bc:	d8802a15 	stw	r2,168(sp)
4110b4c0:	dcc02d15 	stw	r19,180(sp)
4110b4c4:	d8002915 	stw	zero,164(sp)
4110b4c8:	d8003215 	stw	zero,200(sp)
4110b4cc:	842f4204 	addi	r16,r16,-17144
4110b4d0:	0039883a 	mov	fp,zero
4110b4d4:	003aa206 	br	41109f60 <__reset+0xbb0e9f60>
4110b4d8:	0021883a 	mov	r16,zero
4110b4dc:	003e0706 	br	4110acfc <__reset+0xbb0eacfc>
4110b4e0:	d9002c17 	ldw	r4,176(sp)
4110b4e4:	d9801e04 	addi	r6,sp,120
4110b4e8:	b80b883a 	mov	r5,r23
4110b4ec:	1110e2c0 	call	41110e2c <__sprint_r>
4110b4f0:	1039c91e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110b4f4:	d8802617 	ldw	r2,152(sp)
4110b4f8:	d9403317 	ldw	r5,204(sp)
4110b4fc:	d8c02017 	ldw	r3,128(sp)
4110b500:	da000404 	addi	r8,sp,16
4110b504:	2885c83a 	sub	r2,r5,r2
4110b508:	003dfb06 	br	4110acf8 <__reset+0xbb0eacf8>
4110b50c:	9080004c 	andi	r2,r18,1
4110b510:	103e8f1e 	bne	r2,zero,4110af50 <__reset+0xbb0eaf50>
4110b514:	d8802117 	ldw	r2,132(sp)
4110b518:	003e9e06 	br	4110af94 <__reset+0xbb0eaf94>
4110b51c:	1025883a 	mov	r18,r2
4110b520:	0039883a 	mov	fp,zero
4110b524:	00800084 	movi	r2,2
4110b528:	003fd306 	br	4110b478 <__reset+0xbb0eb478>
4110b52c:	07000b44 	movi	fp,45
4110b530:	df002785 	stb	fp,158(sp)
4110b534:	003a4006 	br	41109e38 <__reset+0xbb0e9e38>
4110b538:	00c00b44 	movi	r3,45
4110b53c:	d8c02785 	stb	r3,158(sp)
4110b540:	d8802a15 	stw	r2,168(sp)
4110b544:	dc802b17 	ldw	r18,172(sp)
4110b548:	d8002915 	stw	zero,164(sp)
4110b54c:	07000b44 	movi	fp,45
4110b550:	003a8006 	br	41109f54 <__reset+0xbb0e9f54>
4110b554:	041044b4 	movhi	r16,16658
4110b558:	842f3704 	addi	r16,r16,-17188
4110b55c:	003f4706 	br	4110b27c <__reset+0xbb0eb27c>
4110b560:	d8c02d17 	ldw	r3,180(sp)
4110b564:	d9002f17 	ldw	r4,188(sp)
4110b568:	18800017 	ldw	r2,0(r3)
4110b56c:	18c00104 	addi	r3,r3,4
4110b570:	d8c02d15 	stw	r3,180(sp)
4110b574:	11000015 	stw	r4,0(r2)
4110b578:	0038dd06 	br	411098f0 <__reset+0xbb0e98f0>
4110b57c:	dd802617 	ldw	r22,152(sp)
4110b580:	00bfff44 	movi	r2,-3
4110b584:	b0801c16 	blt	r22,r2,4110b5f8 <___vfprintf_internal_r+0x1de8>
4110b588:	d9402917 	ldw	r5,164(sp)
4110b58c:	2d801a16 	blt	r5,r22,4110b5f8 <___vfprintf_internal_r+0x1de8>
4110b590:	dd803215 	stw	r22,200(sp)
4110b594:	003e8906 	br	4110afbc <__reset+0xbb0eafbc>
4110b598:	011044b4 	movhi	r4,16658
4110b59c:	212f4484 	addi	r4,r4,-17134
4110b5a0:	d9002b15 	stw	r4,172(sp)
4110b5a4:	003c9106 	br	4110a7ec <__reset+0xbb0ea7ec>
4110b5a8:	e005883a 	mov	r2,fp
4110b5ac:	003e7906 	br	4110af94 <__reset+0xbb0eaf94>
4110b5b0:	d9402917 	ldw	r5,164(sp)
4110b5b4:	df002783 	ldbu	fp,158(sp)
4110b5b8:	dcc02d15 	stw	r19,180(sp)
4110b5bc:	d9402a15 	stw	r5,168(sp)
4110b5c0:	d9402e15 	stw	r5,184(sp)
4110b5c4:	d8002915 	stw	zero,164(sp)
4110b5c8:	d8003215 	stw	zero,200(sp)
4110b5cc:	003a5d06 	br	41109f44 <__reset+0xbb0e9f44>
4110b5d0:	9080004c 	andi	r2,r18,1
4110b5d4:	0039883a 	mov	fp,zero
4110b5d8:	10000426 	beq	r2,zero,4110b5ec <___vfprintf_internal_r+0x1ddc>
4110b5dc:	00800c04 	movi	r2,48
4110b5e0:	dc001dc4 	addi	r16,sp,119
4110b5e4:	d8801dc5 	stb	r2,119(sp)
4110b5e8:	003b8006 	br	4110a3ec <__reset+0xbb0ea3ec>
4110b5ec:	d8002e15 	stw	zero,184(sp)
4110b5f0:	dc001e04 	addi	r16,sp,120
4110b5f4:	003a4d06 	br	41109f2c <__reset+0xbb0e9f2c>
4110b5f8:	8c7fff84 	addi	r17,r17,-2
4110b5fc:	b5bfffc4 	addi	r22,r22,-1
4110b600:	dd802615 	stw	r22,152(sp)
4110b604:	dc4022c5 	stb	r17,139(sp)
4110b608:	b000bf16 	blt	r22,zero,4110b908 <___vfprintf_internal_r+0x20f8>
4110b60c:	00800ac4 	movi	r2,43
4110b610:	d8802305 	stb	r2,140(sp)
4110b614:	00800244 	movi	r2,9
4110b618:	15807016 	blt	r2,r22,4110b7dc <___vfprintf_internal_r+0x1fcc>
4110b61c:	00800c04 	movi	r2,48
4110b620:	b5800c04 	addi	r22,r22,48
4110b624:	d8802345 	stb	r2,141(sp)
4110b628:	dd802385 	stb	r22,142(sp)
4110b62c:	d88023c4 	addi	r2,sp,143
4110b630:	df0022c4 	addi	fp,sp,139
4110b634:	d8c03317 	ldw	r3,204(sp)
4110b638:	1739c83a 	sub	fp,r2,fp
4110b63c:	d9003317 	ldw	r4,204(sp)
4110b640:	e0c7883a 	add	r3,fp,r3
4110b644:	df003a15 	stw	fp,232(sp)
4110b648:	d8c02e15 	stw	r3,184(sp)
4110b64c:	00800044 	movi	r2,1
4110b650:	1100b30e 	bge	r2,r4,4110b920 <___vfprintf_internal_r+0x2110>
4110b654:	d8c02e17 	ldw	r3,184(sp)
4110b658:	18c00044 	addi	r3,r3,1
4110b65c:	d8c02e15 	stw	r3,184(sp)
4110b660:	1805883a 	mov	r2,r3
4110b664:	1800ac16 	blt	r3,zero,4110b918 <___vfprintf_internal_r+0x2108>
4110b668:	d8003215 	stw	zero,200(sp)
4110b66c:	003e5d06 	br	4110afe4 <__reset+0xbb0eafe4>
4110b670:	d9002c17 	ldw	r4,176(sp)
4110b674:	d9801e04 	addi	r6,sp,120
4110b678:	b80b883a 	mov	r5,r23
4110b67c:	1110e2c0 	call	41110e2c <__sprint_r>
4110b680:	1039651e 	bne	r2,zero,41109c18 <__reset+0xbb0e9c18>
4110b684:	dc402617 	ldw	r17,152(sp)
4110b688:	d8c02017 	ldw	r3,128(sp)
4110b68c:	d8801f17 	ldw	r2,124(sp)
4110b690:	da000404 	addi	r8,sp,16
4110b694:	003ed606 	br	4110b1f0 <__reset+0xbb0eb1f0>
4110b698:	582b883a 	mov	r21,r11
4110b69c:	d8002915 	stw	zero,164(sp)
4110b6a0:	0038bd06 	br	41109998 <__reset+0xbb0e9998>
4110b6a4:	d8802917 	ldw	r2,164(sp)
4110b6a8:	103e071e 	bne	r2,zero,4110aec8 <__reset+0xbb0eaec8>
4110b6ac:	dc002915 	stw	r16,164(sp)
4110b6b0:	003e0506 	br	4110aec8 <__reset+0xbb0eaec8>
4110b6b4:	d9002917 	ldw	r4,164(sp)
4110b6b8:	20c00044 	addi	r3,r4,1
4110b6bc:	003e0f06 	br	4110aefc <__reset+0xbb0eaefc>
4110b6c0:	01400184 	movi	r5,6
4110b6c4:	d9402915 	stw	r5,164(sp)
4110b6c8:	003dff06 	br	4110aec8 <__reset+0xbb0eaec8>
4110b6cc:	d8802104 	addi	r2,sp,132
4110b6d0:	d8800315 	stw	r2,12(sp)
4110b6d4:	d8802504 	addi	r2,sp,148
4110b6d8:	d8800215 	stw	r2,8(sp)
4110b6dc:	d8802604 	addi	r2,sp,152
4110b6e0:	d8800115 	stw	r2,4(sp)
4110b6e4:	d8802917 	ldw	r2,164(sp)
4110b6e8:	d9403617 	ldw	r5,216(sp)
4110b6ec:	d9002c17 	ldw	r4,176(sp)
4110b6f0:	d8800015 	stw	r2,0(sp)
4110b6f4:	01c000c4 	movi	r7,3
4110b6f8:	980d883a 	mov	r6,r19
4110b6fc:	da003d15 	stw	r8,244(sp)
4110b700:	110be340 	call	4110be34 <_dtoa_r>
4110b704:	d8c02917 	ldw	r3,164(sp)
4110b708:	da003d17 	ldw	r8,244(sp)
4110b70c:	1021883a 	mov	r16,r2
4110b710:	10f9883a 	add	fp,r2,r3
4110b714:	81000007 	ldb	r4,0(r16)
4110b718:	00800c04 	movi	r2,48
4110b71c:	20805e26 	beq	r4,r2,4110b898 <___vfprintf_internal_r+0x2088>
4110b720:	d8c02617 	ldw	r3,152(sp)
4110b724:	e0f9883a 	add	fp,fp,r3
4110b728:	003e0a06 	br	4110af54 <__reset+0xbb0eaf54>
4110b72c:	00c00b44 	movi	r3,45
4110b730:	24e0003c 	xorhi	r19,r4,32768
4110b734:	d8c02a05 	stb	r3,168(sp)
4110b738:	003de906 	br	4110aee0 <__reset+0xbb0eaee0>
4110b73c:	d8c03217 	ldw	r3,200(sp)
4110b740:	00c07a0e 	bge	zero,r3,4110b92c <___vfprintf_internal_r+0x211c>
4110b744:	00800044 	movi	r2,1
4110b748:	d9003317 	ldw	r4,204(sp)
4110b74c:	1105883a 	add	r2,r2,r4
4110b750:	d8802e15 	stw	r2,184(sp)
4110b754:	10004e16 	blt	r2,zero,4110b890 <___vfprintf_internal_r+0x2080>
4110b758:	044019c4 	movi	r17,103
4110b75c:	003e2106 	br	4110afe4 <__reset+0xbb0eafe4>
4110b760:	d9002917 	ldw	r4,164(sp)
4110b764:	d8802104 	addi	r2,sp,132
4110b768:	d8800315 	stw	r2,12(sp)
4110b76c:	d9000015 	stw	r4,0(sp)
4110b770:	d8802504 	addi	r2,sp,148
4110b774:	d9403617 	ldw	r5,216(sp)
4110b778:	d9002c17 	ldw	r4,176(sp)
4110b77c:	d8800215 	stw	r2,8(sp)
4110b780:	d8802604 	addi	r2,sp,152
4110b784:	d8800115 	stw	r2,4(sp)
4110b788:	01c000c4 	movi	r7,3
4110b78c:	980d883a 	mov	r6,r19
4110b790:	da003d15 	stw	r8,244(sp)
4110b794:	110be340 	call	4110be34 <_dtoa_r>
4110b798:	d8c02917 	ldw	r3,164(sp)
4110b79c:	da003d17 	ldw	r8,244(sp)
4110b7a0:	1021883a 	mov	r16,r2
4110b7a4:	00801184 	movi	r2,70
4110b7a8:	80f9883a 	add	fp,r16,r3
4110b7ac:	88bfd926 	beq	r17,r2,4110b714 <__reset+0xbb0eb714>
4110b7b0:	003de806 	br	4110af54 <__reset+0xbb0eaf54>
4110b7b4:	d9002917 	ldw	r4,164(sp)
4110b7b8:	00c04d0e 	bge	zero,r3,4110b8f0 <___vfprintf_internal_r+0x20e0>
4110b7bc:	2000441e 	bne	r4,zero,4110b8d0 <___vfprintf_internal_r+0x20c0>
4110b7c0:	9480004c 	andi	r18,r18,1
4110b7c4:	9000421e 	bne	r18,zero,4110b8d0 <___vfprintf_internal_r+0x20c0>
4110b7c8:	1805883a 	mov	r2,r3
4110b7cc:	18007016 	blt	r3,zero,4110b990 <___vfprintf_internal_r+0x2180>
4110b7d0:	d8c03217 	ldw	r3,200(sp)
4110b7d4:	d8c02e15 	stw	r3,184(sp)
4110b7d8:	003e0206 	br	4110afe4 <__reset+0xbb0eafe4>
4110b7dc:	df0022c4 	addi	fp,sp,139
4110b7e0:	dc002915 	stw	r16,164(sp)
4110b7e4:	4027883a 	mov	r19,r8
4110b7e8:	e021883a 	mov	r16,fp
4110b7ec:	b009883a 	mov	r4,r22
4110b7f0:	01400284 	movi	r5,10
4110b7f4:	11137e00 	call	411137e0 <__modsi3>
4110b7f8:	10800c04 	addi	r2,r2,48
4110b7fc:	843fffc4 	addi	r16,r16,-1
4110b800:	b009883a 	mov	r4,r22
4110b804:	01400284 	movi	r5,10
4110b808:	80800005 	stb	r2,0(r16)
4110b80c:	111375c0 	call	4111375c <__divsi3>
4110b810:	102d883a 	mov	r22,r2
4110b814:	00800244 	movi	r2,9
4110b818:	15bff416 	blt	r2,r22,4110b7ec <__reset+0xbb0eb7ec>
4110b81c:	9811883a 	mov	r8,r19
4110b820:	b0800c04 	addi	r2,r22,48
4110b824:	8027883a 	mov	r19,r16
4110b828:	997fffc4 	addi	r5,r19,-1
4110b82c:	98bfffc5 	stb	r2,-1(r19)
4110b830:	dc002917 	ldw	r16,164(sp)
4110b834:	2f006a2e 	bgeu	r5,fp,4110b9e0 <___vfprintf_internal_r+0x21d0>
4110b838:	d9c02384 	addi	r7,sp,142
4110b83c:	3ccfc83a 	sub	r7,r7,r19
4110b840:	d9002344 	addi	r4,sp,141
4110b844:	e1cf883a 	add	r7,fp,r7
4110b848:	00000106 	br	4110b850 <___vfprintf_internal_r+0x2040>
4110b84c:	28800003 	ldbu	r2,0(r5)
4110b850:	20800005 	stb	r2,0(r4)
4110b854:	21000044 	addi	r4,r4,1
4110b858:	29400044 	addi	r5,r5,1
4110b85c:	393ffb1e 	bne	r7,r4,4110b84c <__reset+0xbb0eb84c>
4110b860:	d8802304 	addi	r2,sp,140
4110b864:	14c5c83a 	sub	r2,r2,r19
4110b868:	d8c02344 	addi	r3,sp,141
4110b86c:	1885883a 	add	r2,r3,r2
4110b870:	003f7006 	br	4110b634 <__reset+0xbb0eb634>
4110b874:	0005883a 	mov	r2,zero
4110b878:	003f0f06 	br	4110b4b8 <__reset+0xbb0eb4b8>
4110b87c:	d8c03217 	ldw	r3,200(sp)
4110b880:	18c00044 	addi	r3,r3,1
4110b884:	d8c02e15 	stw	r3,184(sp)
4110b888:	1805883a 	mov	r2,r3
4110b88c:	183fb20e 	bge	r3,zero,4110b758 <__reset+0xbb0eb758>
4110b890:	0005883a 	mov	r2,zero
4110b894:	003fb006 	br	4110b758 <__reset+0xbb0eb758>
4110b898:	d9003617 	ldw	r4,216(sp)
4110b89c:	000d883a 	mov	r6,zero
4110b8a0:	000f883a 	mov	r7,zero
4110b8a4:	980b883a 	mov	r5,r19
4110b8a8:	d8c03c15 	stw	r3,240(sp)
4110b8ac:	da003d15 	stw	r8,244(sp)
4110b8b0:	1114aa40 	call	41114aa4 <__eqdf2>
4110b8b4:	d8c03c17 	ldw	r3,240(sp)
4110b8b8:	da003d17 	ldw	r8,244(sp)
4110b8bc:	103f9826 	beq	r2,zero,4110b720 <__reset+0xbb0eb720>
4110b8c0:	00800044 	movi	r2,1
4110b8c4:	10c7c83a 	sub	r3,r2,r3
4110b8c8:	d8c02615 	stw	r3,152(sp)
4110b8cc:	003f9506 	br	4110b724 <__reset+0xbb0eb724>
4110b8d0:	d9002917 	ldw	r4,164(sp)
4110b8d4:	d8c03217 	ldw	r3,200(sp)
4110b8d8:	20800044 	addi	r2,r4,1
4110b8dc:	1885883a 	add	r2,r3,r2
4110b8e0:	d8802e15 	stw	r2,184(sp)
4110b8e4:	103dbf0e 	bge	r2,zero,4110afe4 <__reset+0xbb0eafe4>
4110b8e8:	0005883a 	mov	r2,zero
4110b8ec:	003dbd06 	br	4110afe4 <__reset+0xbb0eafe4>
4110b8f0:	2000211e 	bne	r4,zero,4110b978 <___vfprintf_internal_r+0x2168>
4110b8f4:	9480004c 	andi	r18,r18,1
4110b8f8:	90001f1e 	bne	r18,zero,4110b978 <___vfprintf_internal_r+0x2168>
4110b8fc:	00800044 	movi	r2,1
4110b900:	d8802e15 	stw	r2,184(sp)
4110b904:	003db706 	br	4110afe4 <__reset+0xbb0eafe4>
4110b908:	00800b44 	movi	r2,45
4110b90c:	05adc83a 	sub	r22,zero,r22
4110b910:	d8802305 	stb	r2,140(sp)
4110b914:	003f3f06 	br	4110b614 <__reset+0xbb0eb614>
4110b918:	0005883a 	mov	r2,zero
4110b91c:	003f5206 	br	4110b668 <__reset+0xbb0eb668>
4110b920:	90a4703a 	and	r18,r18,r2
4110b924:	903f4e26 	beq	r18,zero,4110b660 <__reset+0xbb0eb660>
4110b928:	003f4a06 	br	4110b654 <__reset+0xbb0eb654>
4110b92c:	00800084 	movi	r2,2
4110b930:	10c5c83a 	sub	r2,r2,r3
4110b934:	003f8406 	br	4110b748 <__reset+0xbb0eb748>
4110b938:	d8802d17 	ldw	r2,180(sp)
4110b93c:	d9002d17 	ldw	r4,180(sp)
4110b940:	ac400043 	ldbu	r17,1(r21)
4110b944:	10800017 	ldw	r2,0(r2)
4110b948:	582b883a 	mov	r21,r11
4110b94c:	d8802915 	stw	r2,164(sp)
4110b950:	20800104 	addi	r2,r4,4
4110b954:	d9002917 	ldw	r4,164(sp)
4110b958:	d8802d15 	stw	r2,180(sp)
4110b95c:	203e7a0e 	bge	r4,zero,4110b348 <__reset+0xbb0eb348>
4110b960:	8c403fcc 	andi	r17,r17,255
4110b964:	00bfffc4 	movi	r2,-1
4110b968:	8c40201c 	xori	r17,r17,128
4110b96c:	d8802915 	stw	r2,164(sp)
4110b970:	8c7fe004 	addi	r17,r17,-128
4110b974:	00380706 	br	41109994 <__reset+0xbb0e9994>
4110b978:	d8c02917 	ldw	r3,164(sp)
4110b97c:	18c00084 	addi	r3,r3,2
4110b980:	d8c02e15 	stw	r3,184(sp)
4110b984:	1805883a 	mov	r2,r3
4110b988:	183d960e 	bge	r3,zero,4110afe4 <__reset+0xbb0eafe4>
4110b98c:	003fd606 	br	4110b8e8 <__reset+0xbb0eb8e8>
4110b990:	0005883a 	mov	r2,zero
4110b994:	003f8e06 	br	4110b7d0 <__reset+0xbb0eb7d0>
4110b998:	9080004c 	andi	r2,r18,1
4110b99c:	103f811e 	bne	r2,zero,4110b7a4 <__reset+0xbb0eb7a4>
4110b9a0:	d8802117 	ldw	r2,132(sp)
4110b9a4:	1405c83a 	sub	r2,r2,r16
4110b9a8:	d8803315 	stw	r2,204(sp)
4110b9ac:	b47ef326 	beq	r22,r17,4110b57c <__reset+0xbb0eb57c>
4110b9b0:	dd802617 	ldw	r22,152(sp)
4110b9b4:	003f1106 	br	4110b5fc <__reset+0xbb0eb5fc>
4110b9b8:	d9c02785 	stb	r7,158(sp)
4110b9bc:	00390406 	br	41109dd0 <__reset+0xbb0e9dd0>
4110b9c0:	d9c02785 	stb	r7,158(sp)
4110b9c4:	0038d306 	br	41109d14 <__reset+0xbb0e9d14>
4110b9c8:	d9c02785 	stb	r7,158(sp)
4110b9cc:	003a6106 	br	4110a354 <__reset+0xbb0ea354>
4110b9d0:	d9c02785 	stb	r7,158(sp)
4110b9d4:	003af806 	br	4110a5b8 <__reset+0xbb0ea5b8>
4110b9d8:	0005883a 	mov	r2,zero
4110b9dc:	003d7e06 	br	4110afd8 <__reset+0xbb0eafd8>
4110b9e0:	d8802344 	addi	r2,sp,141
4110b9e4:	003f1306 	br	4110b634 <__reset+0xbb0eb634>
4110b9e8:	d9c02785 	stb	r7,158(sp)
4110b9ec:	00392306 	br	41109e7c <__reset+0xbb0e9e7c>
4110b9f0:	d9c02785 	stb	r7,158(sp)
4110b9f4:	003aa906 	br	4110a49c <__reset+0xbb0ea49c>
4110b9f8:	d9c02785 	stb	r7,158(sp)
4110b9fc:	003a3d06 	br	4110a2f4 <__reset+0xbb0ea2f4>
4110ba00:	d9c02785 	stb	r7,158(sp)
4110ba04:	003aca06 	br	4110a530 <__reset+0xbb0ea530>

4110ba08 <__vfprintf_internal>:
4110ba08:	009044b4 	movhi	r2,16658
4110ba0c:	10b76e04 	addi	r2,r2,-8776
4110ba10:	300f883a 	mov	r7,r6
4110ba14:	280d883a 	mov	r6,r5
4110ba18:	200b883a 	mov	r5,r4
4110ba1c:	11000017 	ldw	r4,0(r2)
4110ba20:	11098101 	jmpi	41109810 <___vfprintf_internal_r>

4110ba24 <__sbprintf>:
4110ba24:	2880030b 	ldhu	r2,12(r5)
4110ba28:	2ac01917 	ldw	r11,100(r5)
4110ba2c:	2a80038b 	ldhu	r10,14(r5)
4110ba30:	2a400717 	ldw	r9,28(r5)
4110ba34:	2a000917 	ldw	r8,36(r5)
4110ba38:	defee204 	addi	sp,sp,-1144
4110ba3c:	00c10004 	movi	r3,1024
4110ba40:	dc011a15 	stw	r16,1128(sp)
4110ba44:	10bfff4c 	andi	r2,r2,65533
4110ba48:	2821883a 	mov	r16,r5
4110ba4c:	d8cb883a 	add	r5,sp,r3
4110ba50:	dc811c15 	stw	r18,1136(sp)
4110ba54:	dc411b15 	stw	r17,1132(sp)
4110ba58:	dfc11d15 	stw	ra,1140(sp)
4110ba5c:	2025883a 	mov	r18,r4
4110ba60:	d881030d 	sth	r2,1036(sp)
4110ba64:	dac11915 	stw	r11,1124(sp)
4110ba68:	da81038d 	sth	r10,1038(sp)
4110ba6c:	da410715 	stw	r9,1052(sp)
4110ba70:	da010915 	stw	r8,1060(sp)
4110ba74:	dec10015 	stw	sp,1024(sp)
4110ba78:	dec10415 	stw	sp,1040(sp)
4110ba7c:	d8c10215 	stw	r3,1032(sp)
4110ba80:	d8c10515 	stw	r3,1044(sp)
4110ba84:	d8010615 	stw	zero,1048(sp)
4110ba88:	11098100 	call	41109810 <___vfprintf_internal_r>
4110ba8c:	1023883a 	mov	r17,r2
4110ba90:	10000416 	blt	r2,zero,4110baa4 <__sbprintf+0x80>
4110ba94:	d9410004 	addi	r5,sp,1024
4110ba98:	9009883a 	mov	r4,r18
4110ba9c:	110d6d80 	call	4110d6d8 <_fflush_r>
4110baa0:	10000d1e 	bne	r2,zero,4110bad8 <__sbprintf+0xb4>
4110baa4:	d881030b 	ldhu	r2,1036(sp)
4110baa8:	1080100c 	andi	r2,r2,64
4110baac:	10000326 	beq	r2,zero,4110babc <__sbprintf+0x98>
4110bab0:	8080030b 	ldhu	r2,12(r16)
4110bab4:	10801014 	ori	r2,r2,64
4110bab8:	8080030d 	sth	r2,12(r16)
4110babc:	8805883a 	mov	r2,r17
4110bac0:	dfc11d17 	ldw	ra,1140(sp)
4110bac4:	dc811c17 	ldw	r18,1136(sp)
4110bac8:	dc411b17 	ldw	r17,1132(sp)
4110bacc:	dc011a17 	ldw	r16,1128(sp)
4110bad0:	dec11e04 	addi	sp,sp,1144
4110bad4:	f800283a 	ret
4110bad8:	047fffc4 	movi	r17,-1
4110badc:	003ff106 	br	4110baa4 <__reset+0xbb0ebaa4>

4110bae0 <__swsetup_r>:
4110bae0:	009044b4 	movhi	r2,16658
4110bae4:	defffd04 	addi	sp,sp,-12
4110bae8:	10b76e04 	addi	r2,r2,-8776
4110baec:	dc400115 	stw	r17,4(sp)
4110baf0:	2023883a 	mov	r17,r4
4110baf4:	11000017 	ldw	r4,0(r2)
4110baf8:	dc000015 	stw	r16,0(sp)
4110bafc:	dfc00215 	stw	ra,8(sp)
4110bb00:	2821883a 	mov	r16,r5
4110bb04:	20000226 	beq	r4,zero,4110bb10 <__swsetup_r+0x30>
4110bb08:	20800e17 	ldw	r2,56(r4)
4110bb0c:	10003126 	beq	r2,zero,4110bbd4 <__swsetup_r+0xf4>
4110bb10:	8080030b 	ldhu	r2,12(r16)
4110bb14:	10c0020c 	andi	r3,r2,8
4110bb18:	1009883a 	mov	r4,r2
4110bb1c:	18000f26 	beq	r3,zero,4110bb5c <__swsetup_r+0x7c>
4110bb20:	80c00417 	ldw	r3,16(r16)
4110bb24:	18001526 	beq	r3,zero,4110bb7c <__swsetup_r+0x9c>
4110bb28:	1100004c 	andi	r4,r2,1
4110bb2c:	20001c1e 	bne	r4,zero,4110bba0 <__swsetup_r+0xc0>
4110bb30:	1080008c 	andi	r2,r2,2
4110bb34:	1000291e 	bne	r2,zero,4110bbdc <__swsetup_r+0xfc>
4110bb38:	80800517 	ldw	r2,20(r16)
4110bb3c:	80800215 	stw	r2,8(r16)
4110bb40:	18001c26 	beq	r3,zero,4110bbb4 <__swsetup_r+0xd4>
4110bb44:	0005883a 	mov	r2,zero
4110bb48:	dfc00217 	ldw	ra,8(sp)
4110bb4c:	dc400117 	ldw	r17,4(sp)
4110bb50:	dc000017 	ldw	r16,0(sp)
4110bb54:	dec00304 	addi	sp,sp,12
4110bb58:	f800283a 	ret
4110bb5c:	2080040c 	andi	r2,r4,16
4110bb60:	10002e26 	beq	r2,zero,4110bc1c <__swsetup_r+0x13c>
4110bb64:	2080010c 	andi	r2,r4,4
4110bb68:	10001e1e 	bne	r2,zero,4110bbe4 <__swsetup_r+0x104>
4110bb6c:	80c00417 	ldw	r3,16(r16)
4110bb70:	20800214 	ori	r2,r4,8
4110bb74:	8080030d 	sth	r2,12(r16)
4110bb78:	183feb1e 	bne	r3,zero,4110bb28 <__reset+0xbb0ebb28>
4110bb7c:	1100a00c 	andi	r4,r2,640
4110bb80:	01408004 	movi	r5,512
4110bb84:	217fe826 	beq	r4,r5,4110bb28 <__reset+0xbb0ebb28>
4110bb88:	800b883a 	mov	r5,r16
4110bb8c:	8809883a 	mov	r4,r17
4110bb90:	110e6580 	call	4110e658 <__smakebuf_r>
4110bb94:	8080030b 	ldhu	r2,12(r16)
4110bb98:	80c00417 	ldw	r3,16(r16)
4110bb9c:	003fe206 	br	4110bb28 <__reset+0xbb0ebb28>
4110bba0:	80800517 	ldw	r2,20(r16)
4110bba4:	80000215 	stw	zero,8(r16)
4110bba8:	0085c83a 	sub	r2,zero,r2
4110bbac:	80800615 	stw	r2,24(r16)
4110bbb0:	183fe41e 	bne	r3,zero,4110bb44 <__reset+0xbb0ebb44>
4110bbb4:	80c0030b 	ldhu	r3,12(r16)
4110bbb8:	0005883a 	mov	r2,zero
4110bbbc:	1900200c 	andi	r4,r3,128
4110bbc0:	203fe126 	beq	r4,zero,4110bb48 <__reset+0xbb0ebb48>
4110bbc4:	18c01014 	ori	r3,r3,64
4110bbc8:	80c0030d 	sth	r3,12(r16)
4110bbcc:	00bfffc4 	movi	r2,-1
4110bbd0:	003fdd06 	br	4110bb48 <__reset+0xbb0ebb48>
4110bbd4:	110dab40 	call	4110dab4 <__sinit>
4110bbd8:	003fcd06 	br	4110bb10 <__reset+0xbb0ebb10>
4110bbdc:	0005883a 	mov	r2,zero
4110bbe0:	003fd606 	br	4110bb3c <__reset+0xbb0ebb3c>
4110bbe4:	81400c17 	ldw	r5,48(r16)
4110bbe8:	28000626 	beq	r5,zero,4110bc04 <__swsetup_r+0x124>
4110bbec:	80801004 	addi	r2,r16,64
4110bbf0:	28800326 	beq	r5,r2,4110bc00 <__swsetup_r+0x120>
4110bbf4:	8809883a 	mov	r4,r17
4110bbf8:	110dc280 	call	4110dc28 <_free_r>
4110bbfc:	8100030b 	ldhu	r4,12(r16)
4110bc00:	80000c15 	stw	zero,48(r16)
4110bc04:	80c00417 	ldw	r3,16(r16)
4110bc08:	00bff6c4 	movi	r2,-37
4110bc0c:	1108703a 	and	r4,r2,r4
4110bc10:	80000115 	stw	zero,4(r16)
4110bc14:	80c00015 	stw	r3,0(r16)
4110bc18:	003fd506 	br	4110bb70 <__reset+0xbb0ebb70>
4110bc1c:	00800244 	movi	r2,9
4110bc20:	88800015 	stw	r2,0(r17)
4110bc24:	20801014 	ori	r2,r4,64
4110bc28:	8080030d 	sth	r2,12(r16)
4110bc2c:	00bfffc4 	movi	r2,-1
4110bc30:	003fc506 	br	4110bb48 <__reset+0xbb0ebb48>

4110bc34 <quorem>:
4110bc34:	defff704 	addi	sp,sp,-36
4110bc38:	dc800215 	stw	r18,8(sp)
4110bc3c:	20800417 	ldw	r2,16(r4)
4110bc40:	2c800417 	ldw	r18,16(r5)
4110bc44:	dfc00815 	stw	ra,32(sp)
4110bc48:	ddc00715 	stw	r23,28(sp)
4110bc4c:	dd800615 	stw	r22,24(sp)
4110bc50:	dd400515 	stw	r21,20(sp)
4110bc54:	dd000415 	stw	r20,16(sp)
4110bc58:	dcc00315 	stw	r19,12(sp)
4110bc5c:	dc400115 	stw	r17,4(sp)
4110bc60:	dc000015 	stw	r16,0(sp)
4110bc64:	14807116 	blt	r2,r18,4110be2c <quorem+0x1f8>
4110bc68:	94bfffc4 	addi	r18,r18,-1
4110bc6c:	94ad883a 	add	r22,r18,r18
4110bc70:	b5ad883a 	add	r22,r22,r22
4110bc74:	2c400504 	addi	r17,r5,20
4110bc78:	8da9883a 	add	r20,r17,r22
4110bc7c:	25400504 	addi	r21,r4,20
4110bc80:	282f883a 	mov	r23,r5
4110bc84:	adad883a 	add	r22,r21,r22
4110bc88:	a1400017 	ldw	r5,0(r20)
4110bc8c:	2021883a 	mov	r16,r4
4110bc90:	b1000017 	ldw	r4,0(r22)
4110bc94:	29400044 	addi	r5,r5,1
4110bc98:	11138540 	call	41113854 <__udivsi3>
4110bc9c:	1027883a 	mov	r19,r2
4110bca0:	10002c26 	beq	r2,zero,4110bd54 <quorem+0x120>
4110bca4:	a813883a 	mov	r9,r21
4110bca8:	880b883a 	mov	r5,r17
4110bcac:	0009883a 	mov	r4,zero
4110bcb0:	000d883a 	mov	r6,zero
4110bcb4:	2a000017 	ldw	r8,0(r5)
4110bcb8:	49c00017 	ldw	r7,0(r9)
4110bcbc:	29400104 	addi	r5,r5,4
4110bcc0:	40bfffcc 	andi	r2,r8,65535
4110bcc4:	14c5383a 	mul	r2,r2,r19
4110bcc8:	4010d43a 	srli	r8,r8,16
4110bccc:	38ffffcc 	andi	r3,r7,65535
4110bcd0:	1105883a 	add	r2,r2,r4
4110bcd4:	1008d43a 	srli	r4,r2,16
4110bcd8:	44d1383a 	mul	r8,r8,r19
4110bcdc:	198d883a 	add	r6,r3,r6
4110bce0:	10ffffcc 	andi	r3,r2,65535
4110bce4:	30c7c83a 	sub	r3,r6,r3
4110bce8:	380ed43a 	srli	r7,r7,16
4110bcec:	4105883a 	add	r2,r8,r4
4110bcf0:	180dd43a 	srai	r6,r3,16
4110bcf4:	113fffcc 	andi	r4,r2,65535
4110bcf8:	390fc83a 	sub	r7,r7,r4
4110bcfc:	398d883a 	add	r6,r7,r6
4110bd00:	300e943a 	slli	r7,r6,16
4110bd04:	18ffffcc 	andi	r3,r3,65535
4110bd08:	1008d43a 	srli	r4,r2,16
4110bd0c:	38ceb03a 	or	r7,r7,r3
4110bd10:	49c00015 	stw	r7,0(r9)
4110bd14:	300dd43a 	srai	r6,r6,16
4110bd18:	4a400104 	addi	r9,r9,4
4110bd1c:	a17fe52e 	bgeu	r20,r5,4110bcb4 <__reset+0xbb0ebcb4>
4110bd20:	b0800017 	ldw	r2,0(r22)
4110bd24:	10000b1e 	bne	r2,zero,4110bd54 <quorem+0x120>
4110bd28:	b0bfff04 	addi	r2,r22,-4
4110bd2c:	a880082e 	bgeu	r21,r2,4110bd50 <quorem+0x11c>
4110bd30:	b0ffff17 	ldw	r3,-4(r22)
4110bd34:	18000326 	beq	r3,zero,4110bd44 <quorem+0x110>
4110bd38:	00000506 	br	4110bd50 <quorem+0x11c>
4110bd3c:	10c00017 	ldw	r3,0(r2)
4110bd40:	1800031e 	bne	r3,zero,4110bd50 <quorem+0x11c>
4110bd44:	10bfff04 	addi	r2,r2,-4
4110bd48:	94bfffc4 	addi	r18,r18,-1
4110bd4c:	a8bffb36 	bltu	r21,r2,4110bd3c <__reset+0xbb0ebd3c>
4110bd50:	84800415 	stw	r18,16(r16)
4110bd54:	b80b883a 	mov	r5,r23
4110bd58:	8009883a 	mov	r4,r16
4110bd5c:	110fc500 	call	4110fc50 <__mcmp>
4110bd60:	10002616 	blt	r2,zero,4110bdfc <quorem+0x1c8>
4110bd64:	9cc00044 	addi	r19,r19,1
4110bd68:	a805883a 	mov	r2,r21
4110bd6c:	000b883a 	mov	r5,zero
4110bd70:	11000017 	ldw	r4,0(r2)
4110bd74:	89800017 	ldw	r6,0(r17)
4110bd78:	10800104 	addi	r2,r2,4
4110bd7c:	20ffffcc 	andi	r3,r4,65535
4110bd80:	194b883a 	add	r5,r3,r5
4110bd84:	30ffffcc 	andi	r3,r6,65535
4110bd88:	28c7c83a 	sub	r3,r5,r3
4110bd8c:	300cd43a 	srli	r6,r6,16
4110bd90:	2008d43a 	srli	r4,r4,16
4110bd94:	180bd43a 	srai	r5,r3,16
4110bd98:	18ffffcc 	andi	r3,r3,65535
4110bd9c:	2189c83a 	sub	r4,r4,r6
4110bda0:	2149883a 	add	r4,r4,r5
4110bda4:	200c943a 	slli	r6,r4,16
4110bda8:	8c400104 	addi	r17,r17,4
4110bdac:	200bd43a 	srai	r5,r4,16
4110bdb0:	30c6b03a 	or	r3,r6,r3
4110bdb4:	10ffff15 	stw	r3,-4(r2)
4110bdb8:	a47fed2e 	bgeu	r20,r17,4110bd70 <__reset+0xbb0ebd70>
4110bdbc:	9485883a 	add	r2,r18,r18
4110bdc0:	1085883a 	add	r2,r2,r2
4110bdc4:	a887883a 	add	r3,r21,r2
4110bdc8:	18800017 	ldw	r2,0(r3)
4110bdcc:	10000b1e 	bne	r2,zero,4110bdfc <quorem+0x1c8>
4110bdd0:	18bfff04 	addi	r2,r3,-4
4110bdd4:	a880082e 	bgeu	r21,r2,4110bdf8 <quorem+0x1c4>
4110bdd8:	18ffff17 	ldw	r3,-4(r3)
4110bddc:	18000326 	beq	r3,zero,4110bdec <quorem+0x1b8>
4110bde0:	00000506 	br	4110bdf8 <quorem+0x1c4>
4110bde4:	10c00017 	ldw	r3,0(r2)
4110bde8:	1800031e 	bne	r3,zero,4110bdf8 <quorem+0x1c4>
4110bdec:	10bfff04 	addi	r2,r2,-4
4110bdf0:	94bfffc4 	addi	r18,r18,-1
4110bdf4:	a8bffb36 	bltu	r21,r2,4110bde4 <__reset+0xbb0ebde4>
4110bdf8:	84800415 	stw	r18,16(r16)
4110bdfc:	9805883a 	mov	r2,r19
4110be00:	dfc00817 	ldw	ra,32(sp)
4110be04:	ddc00717 	ldw	r23,28(sp)
4110be08:	dd800617 	ldw	r22,24(sp)
4110be0c:	dd400517 	ldw	r21,20(sp)
4110be10:	dd000417 	ldw	r20,16(sp)
4110be14:	dcc00317 	ldw	r19,12(sp)
4110be18:	dc800217 	ldw	r18,8(sp)
4110be1c:	dc400117 	ldw	r17,4(sp)
4110be20:	dc000017 	ldw	r16,0(sp)
4110be24:	dec00904 	addi	sp,sp,36
4110be28:	f800283a 	ret
4110be2c:	0005883a 	mov	r2,zero
4110be30:	003ff306 	br	4110be00 <__reset+0xbb0ebe00>

4110be34 <_dtoa_r>:
4110be34:	20801017 	ldw	r2,64(r4)
4110be38:	deffde04 	addi	sp,sp,-136
4110be3c:	df002015 	stw	fp,128(sp)
4110be40:	dcc01b15 	stw	r19,108(sp)
4110be44:	dc801a15 	stw	r18,104(sp)
4110be48:	dc401915 	stw	r17,100(sp)
4110be4c:	dc001815 	stw	r16,96(sp)
4110be50:	dfc02115 	stw	ra,132(sp)
4110be54:	ddc01f15 	stw	r23,124(sp)
4110be58:	dd801e15 	stw	r22,120(sp)
4110be5c:	dd401d15 	stw	r21,116(sp)
4110be60:	dd001c15 	stw	r20,112(sp)
4110be64:	d9c00315 	stw	r7,12(sp)
4110be68:	2039883a 	mov	fp,r4
4110be6c:	3023883a 	mov	r17,r6
4110be70:	2825883a 	mov	r18,r5
4110be74:	dc002417 	ldw	r16,144(sp)
4110be78:	3027883a 	mov	r19,r6
4110be7c:	10000826 	beq	r2,zero,4110bea0 <_dtoa_r+0x6c>
4110be80:	21801117 	ldw	r6,68(r4)
4110be84:	00c00044 	movi	r3,1
4110be88:	100b883a 	mov	r5,r2
4110be8c:	1986983a 	sll	r3,r3,r6
4110be90:	11800115 	stw	r6,4(r2)
4110be94:	10c00215 	stw	r3,8(r2)
4110be98:	110f4300 	call	4110f430 <_Bfree>
4110be9c:	e0001015 	stw	zero,64(fp)
4110bea0:	88002e16 	blt	r17,zero,4110bf5c <_dtoa_r+0x128>
4110bea4:	80000015 	stw	zero,0(r16)
4110bea8:	889ffc2c 	andhi	r2,r17,32752
4110beac:	00dffc34 	movhi	r3,32752
4110beb0:	10c01c26 	beq	r2,r3,4110bf24 <_dtoa_r+0xf0>
4110beb4:	000d883a 	mov	r6,zero
4110beb8:	000f883a 	mov	r7,zero
4110bebc:	9009883a 	mov	r4,r18
4110bec0:	980b883a 	mov	r5,r19
4110bec4:	1114aa40 	call	41114aa4 <__eqdf2>
4110bec8:	10002b1e 	bne	r2,zero,4110bf78 <_dtoa_r+0x144>
4110becc:	d9c02317 	ldw	r7,140(sp)
4110bed0:	00800044 	movi	r2,1
4110bed4:	38800015 	stw	r2,0(r7)
4110bed8:	d8802517 	ldw	r2,148(sp)
4110bedc:	10019e26 	beq	r2,zero,4110c558 <_dtoa_r+0x724>
4110bee0:	d8c02517 	ldw	r3,148(sp)
4110bee4:	009044b4 	movhi	r2,16658
4110bee8:	10af4444 	addi	r2,r2,-17135
4110beec:	18800015 	stw	r2,0(r3)
4110bef0:	10bfffc4 	addi	r2,r2,-1
4110bef4:	dfc02117 	ldw	ra,132(sp)
4110bef8:	df002017 	ldw	fp,128(sp)
4110befc:	ddc01f17 	ldw	r23,124(sp)
4110bf00:	dd801e17 	ldw	r22,120(sp)
4110bf04:	dd401d17 	ldw	r21,116(sp)
4110bf08:	dd001c17 	ldw	r20,112(sp)
4110bf0c:	dcc01b17 	ldw	r19,108(sp)
4110bf10:	dc801a17 	ldw	r18,104(sp)
4110bf14:	dc401917 	ldw	r17,100(sp)
4110bf18:	dc001817 	ldw	r16,96(sp)
4110bf1c:	dec02204 	addi	sp,sp,136
4110bf20:	f800283a 	ret
4110bf24:	d8c02317 	ldw	r3,140(sp)
4110bf28:	0089c3c4 	movi	r2,9999
4110bf2c:	18800015 	stw	r2,0(r3)
4110bf30:	90017726 	beq	r18,zero,4110c510 <_dtoa_r+0x6dc>
4110bf34:	009044b4 	movhi	r2,16658
4110bf38:	10af5004 	addi	r2,r2,-17088
4110bf3c:	d9002517 	ldw	r4,148(sp)
4110bf40:	203fec26 	beq	r4,zero,4110bef4 <__reset+0xbb0ebef4>
4110bf44:	10c000c7 	ldb	r3,3(r2)
4110bf48:	1801781e 	bne	r3,zero,4110c52c <_dtoa_r+0x6f8>
4110bf4c:	10c000c4 	addi	r3,r2,3
4110bf50:	d9802517 	ldw	r6,148(sp)
4110bf54:	30c00015 	stw	r3,0(r6)
4110bf58:	003fe606 	br	4110bef4 <__reset+0xbb0ebef4>
4110bf5c:	04e00034 	movhi	r19,32768
4110bf60:	9cffffc4 	addi	r19,r19,-1
4110bf64:	00800044 	movi	r2,1
4110bf68:	8ce6703a 	and	r19,r17,r19
4110bf6c:	80800015 	stw	r2,0(r16)
4110bf70:	9823883a 	mov	r17,r19
4110bf74:	003fcc06 	br	4110bea8 <__reset+0xbb0ebea8>
4110bf78:	d8800204 	addi	r2,sp,8
4110bf7c:	d8800015 	stw	r2,0(sp)
4110bf80:	d9c00104 	addi	r7,sp,4
4110bf84:	900b883a 	mov	r5,r18
4110bf88:	980d883a 	mov	r6,r19
4110bf8c:	e009883a 	mov	r4,fp
4110bf90:	8820d53a 	srli	r16,r17,20
4110bf94:	111001c0 	call	4111001c <__d2b>
4110bf98:	d8800915 	stw	r2,36(sp)
4110bf9c:	8001651e 	bne	r16,zero,4110c534 <_dtoa_r+0x700>
4110bfa0:	dd800217 	ldw	r22,8(sp)
4110bfa4:	dc000117 	ldw	r16,4(sp)
4110bfa8:	00800804 	movi	r2,32
4110bfac:	b421883a 	add	r16,r22,r16
4110bfb0:	80c10c84 	addi	r3,r16,1074
4110bfb4:	10c2d10e 	bge	r2,r3,4110cafc <_dtoa_r+0xcc8>
4110bfb8:	00801004 	movi	r2,64
4110bfbc:	81010484 	addi	r4,r16,1042
4110bfc0:	10c7c83a 	sub	r3,r2,r3
4110bfc4:	9108d83a 	srl	r4,r18,r4
4110bfc8:	88e2983a 	sll	r17,r17,r3
4110bfcc:	2448b03a 	or	r4,r4,r17
4110bfd0:	11157540 	call	41115754 <__floatunsidf>
4110bfd4:	017f8434 	movhi	r5,65040
4110bfd8:	01800044 	movi	r6,1
4110bfdc:	1009883a 	mov	r4,r2
4110bfe0:	194b883a 	add	r5,r3,r5
4110bfe4:	843fffc4 	addi	r16,r16,-1
4110bfe8:	d9801115 	stw	r6,68(sp)
4110bfec:	000d883a 	mov	r6,zero
4110bff0:	01cffe34 	movhi	r7,16376
4110bff4:	1114cfc0 	call	41114cfc <__subdf3>
4110bff8:	0198dbf4 	movhi	r6,25455
4110bffc:	01cff4f4 	movhi	r7,16339
4110c000:	3190d844 	addi	r6,r6,17249
4110c004:	39e1e9c4 	addi	r7,r7,-30809
4110c008:	1009883a 	mov	r4,r2
4110c00c:	180b883a 	mov	r5,r3
4110c010:	1108a9c0 	call	41108a9c <__muldf3>
4110c014:	01a2d874 	movhi	r6,35681
4110c018:	01cff1f4 	movhi	r7,16327
4110c01c:	31b22cc4 	addi	r6,r6,-14157
4110c020:	39e28a04 	addi	r7,r7,-30168
4110c024:	180b883a 	mov	r5,r3
4110c028:	1009883a 	mov	r4,r2
4110c02c:	11139100 	call	41113910 <__adddf3>
4110c030:	8009883a 	mov	r4,r16
4110c034:	1029883a 	mov	r20,r2
4110c038:	1823883a 	mov	r17,r3
4110c03c:	11156780 	call	41115678 <__floatsidf>
4110c040:	019427f4 	movhi	r6,20639
4110c044:	01cff4f4 	movhi	r7,16339
4110c048:	319e7ec4 	addi	r6,r6,31227
4110c04c:	39d104c4 	addi	r7,r7,17427
4110c050:	1009883a 	mov	r4,r2
4110c054:	180b883a 	mov	r5,r3
4110c058:	1108a9c0 	call	41108a9c <__muldf3>
4110c05c:	100d883a 	mov	r6,r2
4110c060:	180f883a 	mov	r7,r3
4110c064:	a009883a 	mov	r4,r20
4110c068:	880b883a 	mov	r5,r17
4110c06c:	11139100 	call	41113910 <__adddf3>
4110c070:	1009883a 	mov	r4,r2
4110c074:	180b883a 	mov	r5,r3
4110c078:	1029883a 	mov	r20,r2
4110c07c:	1823883a 	mov	r17,r3
4110c080:	11155f80 	call	411155f8 <__fixdfsi>
4110c084:	000d883a 	mov	r6,zero
4110c088:	000f883a 	mov	r7,zero
4110c08c:	a009883a 	mov	r4,r20
4110c090:	880b883a 	mov	r5,r17
4110c094:	d8800515 	stw	r2,20(sp)
4110c098:	1114c080 	call	41114c08 <__ledf2>
4110c09c:	10028716 	blt	r2,zero,4110cabc <_dtoa_r+0xc88>
4110c0a0:	d8c00517 	ldw	r3,20(sp)
4110c0a4:	00800584 	movi	r2,22
4110c0a8:	10c27536 	bltu	r2,r3,4110ca80 <_dtoa_r+0xc4c>
4110c0ac:	180490fa 	slli	r2,r3,3
4110c0b0:	00d044b4 	movhi	r3,16658
4110c0b4:	18ef6c04 	addi	r3,r3,-16976
4110c0b8:	1885883a 	add	r2,r3,r2
4110c0bc:	11000017 	ldw	r4,0(r2)
4110c0c0:	11400117 	ldw	r5,4(r2)
4110c0c4:	900d883a 	mov	r6,r18
4110c0c8:	980f883a 	mov	r7,r19
4110c0cc:	1114b2c0 	call	41114b2c <__gedf2>
4110c0d0:	00828d0e 	bge	zero,r2,4110cb08 <_dtoa_r+0xcd4>
4110c0d4:	d9000517 	ldw	r4,20(sp)
4110c0d8:	d8000e15 	stw	zero,56(sp)
4110c0dc:	213fffc4 	addi	r4,r4,-1
4110c0e0:	d9000515 	stw	r4,20(sp)
4110c0e4:	b42dc83a 	sub	r22,r22,r16
4110c0e8:	b5bfffc4 	addi	r22,r22,-1
4110c0ec:	b0026f16 	blt	r22,zero,4110caac <_dtoa_r+0xc78>
4110c0f0:	d8000815 	stw	zero,32(sp)
4110c0f4:	d9c00517 	ldw	r7,20(sp)
4110c0f8:	38026416 	blt	r7,zero,4110ca8c <_dtoa_r+0xc58>
4110c0fc:	b1ed883a 	add	r22,r22,r7
4110c100:	d9c00d15 	stw	r7,52(sp)
4110c104:	d8000a15 	stw	zero,40(sp)
4110c108:	d9800317 	ldw	r6,12(sp)
4110c10c:	00800244 	movi	r2,9
4110c110:	11811436 	bltu	r2,r6,4110c564 <_dtoa_r+0x730>
4110c114:	00800144 	movi	r2,5
4110c118:	1184e10e 	bge	r2,r6,4110d4a0 <_dtoa_r+0x166c>
4110c11c:	31bfff04 	addi	r6,r6,-4
4110c120:	d9800315 	stw	r6,12(sp)
4110c124:	0023883a 	mov	r17,zero
4110c128:	d9800317 	ldw	r6,12(sp)
4110c12c:	008000c4 	movi	r2,3
4110c130:	30836726 	beq	r6,r2,4110ced0 <_dtoa_r+0x109c>
4110c134:	1183410e 	bge	r2,r6,4110ce3c <_dtoa_r+0x1008>
4110c138:	d9c00317 	ldw	r7,12(sp)
4110c13c:	00800104 	movi	r2,4
4110c140:	38827c26 	beq	r7,r2,4110cb34 <_dtoa_r+0xd00>
4110c144:	00800144 	movi	r2,5
4110c148:	3884c41e 	bne	r7,r2,4110d45c <_dtoa_r+0x1628>
4110c14c:	00800044 	movi	r2,1
4110c150:	d8800b15 	stw	r2,44(sp)
4110c154:	d8c00517 	ldw	r3,20(sp)
4110c158:	d9002217 	ldw	r4,136(sp)
4110c15c:	1907883a 	add	r3,r3,r4
4110c160:	19800044 	addi	r6,r3,1
4110c164:	d8c00c15 	stw	r3,48(sp)
4110c168:	d9800615 	stw	r6,24(sp)
4110c16c:	0183a40e 	bge	zero,r6,4110d000 <_dtoa_r+0x11cc>
4110c170:	d9800617 	ldw	r6,24(sp)
4110c174:	3021883a 	mov	r16,r6
4110c178:	e0001115 	stw	zero,68(fp)
4110c17c:	008005c4 	movi	r2,23
4110c180:	1184c92e 	bgeu	r2,r6,4110d4a8 <_dtoa_r+0x1674>
4110c184:	00c00044 	movi	r3,1
4110c188:	00800104 	movi	r2,4
4110c18c:	1085883a 	add	r2,r2,r2
4110c190:	11000504 	addi	r4,r2,20
4110c194:	180b883a 	mov	r5,r3
4110c198:	18c00044 	addi	r3,r3,1
4110c19c:	313ffb2e 	bgeu	r6,r4,4110c18c <__reset+0xbb0ec18c>
4110c1a0:	e1401115 	stw	r5,68(fp)
4110c1a4:	e009883a 	mov	r4,fp
4110c1a8:	110f3880 	call	4110f388 <_Balloc>
4110c1ac:	d8800715 	stw	r2,28(sp)
4110c1b0:	e0801015 	stw	r2,64(fp)
4110c1b4:	00800384 	movi	r2,14
4110c1b8:	1400f736 	bltu	r2,r16,4110c598 <_dtoa_r+0x764>
4110c1bc:	8800f626 	beq	r17,zero,4110c598 <_dtoa_r+0x764>
4110c1c0:	d9c00517 	ldw	r7,20(sp)
4110c1c4:	01c39a0e 	bge	zero,r7,4110d030 <_dtoa_r+0x11fc>
4110c1c8:	388003cc 	andi	r2,r7,15
4110c1cc:	100490fa 	slli	r2,r2,3
4110c1d0:	382bd13a 	srai	r21,r7,4
4110c1d4:	00d044b4 	movhi	r3,16658
4110c1d8:	18ef6c04 	addi	r3,r3,-16976
4110c1dc:	1885883a 	add	r2,r3,r2
4110c1e0:	a8c0040c 	andi	r3,r21,16
4110c1e4:	12400017 	ldw	r9,0(r2)
4110c1e8:	12000117 	ldw	r8,4(r2)
4110c1ec:	18037926 	beq	r3,zero,4110cfd4 <_dtoa_r+0x11a0>
4110c1f0:	009044b4 	movhi	r2,16658
4110c1f4:	10af6204 	addi	r2,r2,-17016
4110c1f8:	11800817 	ldw	r6,32(r2)
4110c1fc:	11c00917 	ldw	r7,36(r2)
4110c200:	9009883a 	mov	r4,r18
4110c204:	980b883a 	mov	r5,r19
4110c208:	da001715 	stw	r8,92(sp)
4110c20c:	da401615 	stw	r9,88(sp)
4110c210:	11141bc0 	call	411141bc <__divdf3>
4110c214:	da001717 	ldw	r8,92(sp)
4110c218:	da401617 	ldw	r9,88(sp)
4110c21c:	ad4003cc 	andi	r21,r21,15
4110c220:	040000c4 	movi	r16,3
4110c224:	1023883a 	mov	r17,r2
4110c228:	1829883a 	mov	r20,r3
4110c22c:	a8001126 	beq	r21,zero,4110c274 <_dtoa_r+0x440>
4110c230:	05d044b4 	movhi	r23,16658
4110c234:	bdef6204 	addi	r23,r23,-17016
4110c238:	4805883a 	mov	r2,r9
4110c23c:	4007883a 	mov	r3,r8
4110c240:	a980004c 	andi	r6,r21,1
4110c244:	1009883a 	mov	r4,r2
4110c248:	a82bd07a 	srai	r21,r21,1
4110c24c:	180b883a 	mov	r5,r3
4110c250:	30000426 	beq	r6,zero,4110c264 <_dtoa_r+0x430>
4110c254:	b9800017 	ldw	r6,0(r23)
4110c258:	b9c00117 	ldw	r7,4(r23)
4110c25c:	84000044 	addi	r16,r16,1
4110c260:	1108a9c0 	call	41108a9c <__muldf3>
4110c264:	bdc00204 	addi	r23,r23,8
4110c268:	a83ff51e 	bne	r21,zero,4110c240 <__reset+0xbb0ec240>
4110c26c:	1013883a 	mov	r9,r2
4110c270:	1811883a 	mov	r8,r3
4110c274:	480d883a 	mov	r6,r9
4110c278:	400f883a 	mov	r7,r8
4110c27c:	8809883a 	mov	r4,r17
4110c280:	a00b883a 	mov	r5,r20
4110c284:	11141bc0 	call	411141bc <__divdf3>
4110c288:	d8800f15 	stw	r2,60(sp)
4110c28c:	d8c01015 	stw	r3,64(sp)
4110c290:	d8c00e17 	ldw	r3,56(sp)
4110c294:	18000626 	beq	r3,zero,4110c2b0 <_dtoa_r+0x47c>
4110c298:	d9000f17 	ldw	r4,60(sp)
4110c29c:	d9401017 	ldw	r5,64(sp)
4110c2a0:	000d883a 	mov	r6,zero
4110c2a4:	01cffc34 	movhi	r7,16368
4110c2a8:	1114c080 	call	41114c08 <__ledf2>
4110c2ac:	10040b16 	blt	r2,zero,4110d2dc <_dtoa_r+0x14a8>
4110c2b0:	8009883a 	mov	r4,r16
4110c2b4:	11156780 	call	41115678 <__floatsidf>
4110c2b8:	d9800f17 	ldw	r6,60(sp)
4110c2bc:	d9c01017 	ldw	r7,64(sp)
4110c2c0:	1009883a 	mov	r4,r2
4110c2c4:	180b883a 	mov	r5,r3
4110c2c8:	1108a9c0 	call	41108a9c <__muldf3>
4110c2cc:	000d883a 	mov	r6,zero
4110c2d0:	01d00734 	movhi	r7,16412
4110c2d4:	1009883a 	mov	r4,r2
4110c2d8:	180b883a 	mov	r5,r3
4110c2dc:	11139100 	call	41113910 <__adddf3>
4110c2e0:	1021883a 	mov	r16,r2
4110c2e4:	d8800617 	ldw	r2,24(sp)
4110c2e8:	047f3034 	movhi	r17,64704
4110c2ec:	1c63883a 	add	r17,r3,r17
4110c2f0:	10031826 	beq	r2,zero,4110cf54 <_dtoa_r+0x1120>
4110c2f4:	d8c00517 	ldw	r3,20(sp)
4110c2f8:	db000617 	ldw	r12,24(sp)
4110c2fc:	d8c01315 	stw	r3,76(sp)
4110c300:	d9000b17 	ldw	r4,44(sp)
4110c304:	20038f26 	beq	r4,zero,4110d144 <_dtoa_r+0x1310>
4110c308:	60bfffc4 	addi	r2,r12,-1
4110c30c:	100490fa 	slli	r2,r2,3
4110c310:	00d044b4 	movhi	r3,16658
4110c314:	18ef6c04 	addi	r3,r3,-16976
4110c318:	1885883a 	add	r2,r3,r2
4110c31c:	11800017 	ldw	r6,0(r2)
4110c320:	11c00117 	ldw	r7,4(r2)
4110c324:	d8800717 	ldw	r2,28(sp)
4110c328:	0009883a 	mov	r4,zero
4110c32c:	014ff834 	movhi	r5,16352
4110c330:	db001615 	stw	r12,88(sp)
4110c334:	15c00044 	addi	r23,r2,1
4110c338:	11141bc0 	call	411141bc <__divdf3>
4110c33c:	800d883a 	mov	r6,r16
4110c340:	880f883a 	mov	r7,r17
4110c344:	1009883a 	mov	r4,r2
4110c348:	180b883a 	mov	r5,r3
4110c34c:	1114cfc0 	call	41114cfc <__subdf3>
4110c350:	d9401017 	ldw	r5,64(sp)
4110c354:	d9000f17 	ldw	r4,60(sp)
4110c358:	102b883a 	mov	r21,r2
4110c35c:	d8c01215 	stw	r3,72(sp)
4110c360:	11155f80 	call	411155f8 <__fixdfsi>
4110c364:	1009883a 	mov	r4,r2
4110c368:	1029883a 	mov	r20,r2
4110c36c:	11156780 	call	41115678 <__floatsidf>
4110c370:	d9000f17 	ldw	r4,60(sp)
4110c374:	d9401017 	ldw	r5,64(sp)
4110c378:	100d883a 	mov	r6,r2
4110c37c:	180f883a 	mov	r7,r3
4110c380:	1114cfc0 	call	41114cfc <__subdf3>
4110c384:	1823883a 	mov	r17,r3
4110c388:	d8c00717 	ldw	r3,28(sp)
4110c38c:	d9401217 	ldw	r5,72(sp)
4110c390:	a2000c04 	addi	r8,r20,48
4110c394:	1021883a 	mov	r16,r2
4110c398:	1a000005 	stb	r8,0(r3)
4110c39c:	800d883a 	mov	r6,r16
4110c3a0:	880f883a 	mov	r7,r17
4110c3a4:	a809883a 	mov	r4,r21
4110c3a8:	4029883a 	mov	r20,r8
4110c3ac:	1114b2c0 	call	41114b2c <__gedf2>
4110c3b0:	00841d16 	blt	zero,r2,4110d428 <_dtoa_r+0x15f4>
4110c3b4:	800d883a 	mov	r6,r16
4110c3b8:	880f883a 	mov	r7,r17
4110c3bc:	0009883a 	mov	r4,zero
4110c3c0:	014ffc34 	movhi	r5,16368
4110c3c4:	1114cfc0 	call	41114cfc <__subdf3>
4110c3c8:	d9401217 	ldw	r5,72(sp)
4110c3cc:	100d883a 	mov	r6,r2
4110c3d0:	180f883a 	mov	r7,r3
4110c3d4:	a809883a 	mov	r4,r21
4110c3d8:	1114b2c0 	call	41114b2c <__gedf2>
4110c3dc:	db001617 	ldw	r12,88(sp)
4110c3e0:	00840e16 	blt	zero,r2,4110d41c <_dtoa_r+0x15e8>
4110c3e4:	00800044 	movi	r2,1
4110c3e8:	13006b0e 	bge	r2,r12,4110c598 <_dtoa_r+0x764>
4110c3ec:	d9000717 	ldw	r4,28(sp)
4110c3f0:	dd800f15 	stw	r22,60(sp)
4110c3f4:	dcc01015 	stw	r19,64(sp)
4110c3f8:	2319883a 	add	r12,r4,r12
4110c3fc:	dcc01217 	ldw	r19,72(sp)
4110c400:	602d883a 	mov	r22,r12
4110c404:	dc801215 	stw	r18,72(sp)
4110c408:	b825883a 	mov	r18,r23
4110c40c:	00000906 	br	4110c434 <_dtoa_r+0x600>
4110c410:	1114cfc0 	call	41114cfc <__subdf3>
4110c414:	a80d883a 	mov	r6,r21
4110c418:	980f883a 	mov	r7,r19
4110c41c:	1009883a 	mov	r4,r2
4110c420:	180b883a 	mov	r5,r3
4110c424:	1114c080 	call	41114c08 <__ledf2>
4110c428:	1003e816 	blt	r2,zero,4110d3cc <_dtoa_r+0x1598>
4110c42c:	b825883a 	mov	r18,r23
4110c430:	bd83e926 	beq	r23,r22,4110d3d8 <_dtoa_r+0x15a4>
4110c434:	a809883a 	mov	r4,r21
4110c438:	980b883a 	mov	r5,r19
4110c43c:	000d883a 	mov	r6,zero
4110c440:	01d00934 	movhi	r7,16420
4110c444:	1108a9c0 	call	41108a9c <__muldf3>
4110c448:	000d883a 	mov	r6,zero
4110c44c:	01d00934 	movhi	r7,16420
4110c450:	8009883a 	mov	r4,r16
4110c454:	880b883a 	mov	r5,r17
4110c458:	102b883a 	mov	r21,r2
4110c45c:	1827883a 	mov	r19,r3
4110c460:	1108a9c0 	call	41108a9c <__muldf3>
4110c464:	180b883a 	mov	r5,r3
4110c468:	1009883a 	mov	r4,r2
4110c46c:	1821883a 	mov	r16,r3
4110c470:	1023883a 	mov	r17,r2
4110c474:	11155f80 	call	411155f8 <__fixdfsi>
4110c478:	1009883a 	mov	r4,r2
4110c47c:	1029883a 	mov	r20,r2
4110c480:	11156780 	call	41115678 <__floatsidf>
4110c484:	8809883a 	mov	r4,r17
4110c488:	800b883a 	mov	r5,r16
4110c48c:	100d883a 	mov	r6,r2
4110c490:	180f883a 	mov	r7,r3
4110c494:	1114cfc0 	call	41114cfc <__subdf3>
4110c498:	a5000c04 	addi	r20,r20,48
4110c49c:	a80d883a 	mov	r6,r21
4110c4a0:	980f883a 	mov	r7,r19
4110c4a4:	1009883a 	mov	r4,r2
4110c4a8:	180b883a 	mov	r5,r3
4110c4ac:	95000005 	stb	r20,0(r18)
4110c4b0:	1021883a 	mov	r16,r2
4110c4b4:	1823883a 	mov	r17,r3
4110c4b8:	1114c080 	call	41114c08 <__ledf2>
4110c4bc:	bdc00044 	addi	r23,r23,1
4110c4c0:	800d883a 	mov	r6,r16
4110c4c4:	880f883a 	mov	r7,r17
4110c4c8:	0009883a 	mov	r4,zero
4110c4cc:	014ffc34 	movhi	r5,16368
4110c4d0:	103fcf0e 	bge	r2,zero,4110c410 <__reset+0xbb0ec410>
4110c4d4:	d8c01317 	ldw	r3,76(sp)
4110c4d8:	d8c00515 	stw	r3,20(sp)
4110c4dc:	d9400917 	ldw	r5,36(sp)
4110c4e0:	e009883a 	mov	r4,fp
4110c4e4:	110f4300 	call	4110f430 <_Bfree>
4110c4e8:	d9000517 	ldw	r4,20(sp)
4110c4ec:	d9802317 	ldw	r6,140(sp)
4110c4f0:	d9c02517 	ldw	r7,148(sp)
4110c4f4:	b8000005 	stb	zero,0(r23)
4110c4f8:	20800044 	addi	r2,r4,1
4110c4fc:	30800015 	stw	r2,0(r6)
4110c500:	3802aa26 	beq	r7,zero,4110cfac <_dtoa_r+0x1178>
4110c504:	3dc00015 	stw	r23,0(r7)
4110c508:	d8800717 	ldw	r2,28(sp)
4110c50c:	003e7906 	br	4110bef4 <__reset+0xbb0ebef4>
4110c510:	00800434 	movhi	r2,16
4110c514:	10bfffc4 	addi	r2,r2,-1
4110c518:	88a2703a 	and	r17,r17,r2
4110c51c:	883e851e 	bne	r17,zero,4110bf34 <__reset+0xbb0ebf34>
4110c520:	009044b4 	movhi	r2,16658
4110c524:	10af4d04 	addi	r2,r2,-17100
4110c528:	003e8406 	br	4110bf3c <__reset+0xbb0ebf3c>
4110c52c:	10c00204 	addi	r3,r2,8
4110c530:	003e8706 	br	4110bf50 <__reset+0xbb0ebf50>
4110c534:	01400434 	movhi	r5,16
4110c538:	297fffc4 	addi	r5,r5,-1
4110c53c:	994a703a 	and	r5,r19,r5
4110c540:	9009883a 	mov	r4,r18
4110c544:	843f0044 	addi	r16,r16,-1023
4110c548:	294ffc34 	orhi	r5,r5,16368
4110c54c:	dd800217 	ldw	r22,8(sp)
4110c550:	d8001115 	stw	zero,68(sp)
4110c554:	003ea506 	br	4110bfec <__reset+0xbb0ebfec>
4110c558:	009044b4 	movhi	r2,16658
4110c55c:	10af4404 	addi	r2,r2,-17136
4110c560:	003e6406 	br	4110bef4 <__reset+0xbb0ebef4>
4110c564:	e0001115 	stw	zero,68(fp)
4110c568:	000b883a 	mov	r5,zero
4110c56c:	e009883a 	mov	r4,fp
4110c570:	110f3880 	call	4110f388 <_Balloc>
4110c574:	01bfffc4 	movi	r6,-1
4110c578:	01c00044 	movi	r7,1
4110c57c:	d8800715 	stw	r2,28(sp)
4110c580:	d9800c15 	stw	r6,48(sp)
4110c584:	e0801015 	stw	r2,64(fp)
4110c588:	d8000315 	stw	zero,12(sp)
4110c58c:	d9c00b15 	stw	r7,44(sp)
4110c590:	d9800615 	stw	r6,24(sp)
4110c594:	d8002215 	stw	zero,136(sp)
4110c598:	d8800117 	ldw	r2,4(sp)
4110c59c:	10008916 	blt	r2,zero,4110c7c4 <_dtoa_r+0x990>
4110c5a0:	d9000517 	ldw	r4,20(sp)
4110c5a4:	00c00384 	movi	r3,14
4110c5a8:	19008616 	blt	r3,r4,4110c7c4 <_dtoa_r+0x990>
4110c5ac:	200490fa 	slli	r2,r4,3
4110c5b0:	00d044b4 	movhi	r3,16658
4110c5b4:	d9802217 	ldw	r6,136(sp)
4110c5b8:	18ef6c04 	addi	r3,r3,-16976
4110c5bc:	1885883a 	add	r2,r3,r2
4110c5c0:	14000017 	ldw	r16,0(r2)
4110c5c4:	14400117 	ldw	r17,4(r2)
4110c5c8:	30016316 	blt	r6,zero,4110cb58 <_dtoa_r+0xd24>
4110c5cc:	800d883a 	mov	r6,r16
4110c5d0:	880f883a 	mov	r7,r17
4110c5d4:	9009883a 	mov	r4,r18
4110c5d8:	980b883a 	mov	r5,r19
4110c5dc:	11141bc0 	call	411141bc <__divdf3>
4110c5e0:	180b883a 	mov	r5,r3
4110c5e4:	1009883a 	mov	r4,r2
4110c5e8:	11155f80 	call	411155f8 <__fixdfsi>
4110c5ec:	1009883a 	mov	r4,r2
4110c5f0:	102b883a 	mov	r21,r2
4110c5f4:	11156780 	call	41115678 <__floatsidf>
4110c5f8:	800d883a 	mov	r6,r16
4110c5fc:	880f883a 	mov	r7,r17
4110c600:	1009883a 	mov	r4,r2
4110c604:	180b883a 	mov	r5,r3
4110c608:	1108a9c0 	call	41108a9c <__muldf3>
4110c60c:	100d883a 	mov	r6,r2
4110c610:	180f883a 	mov	r7,r3
4110c614:	9009883a 	mov	r4,r18
4110c618:	980b883a 	mov	r5,r19
4110c61c:	1114cfc0 	call	41114cfc <__subdf3>
4110c620:	d9c00717 	ldw	r7,28(sp)
4110c624:	1009883a 	mov	r4,r2
4110c628:	a8800c04 	addi	r2,r21,48
4110c62c:	38800005 	stb	r2,0(r7)
4110c630:	3dc00044 	addi	r23,r7,1
4110c634:	d9c00617 	ldw	r7,24(sp)
4110c638:	01800044 	movi	r6,1
4110c63c:	180b883a 	mov	r5,r3
4110c640:	2005883a 	mov	r2,r4
4110c644:	39803826 	beq	r7,r6,4110c728 <_dtoa_r+0x8f4>
4110c648:	000d883a 	mov	r6,zero
4110c64c:	01d00934 	movhi	r7,16420
4110c650:	1108a9c0 	call	41108a9c <__muldf3>
4110c654:	000d883a 	mov	r6,zero
4110c658:	000f883a 	mov	r7,zero
4110c65c:	1009883a 	mov	r4,r2
4110c660:	180b883a 	mov	r5,r3
4110c664:	1025883a 	mov	r18,r2
4110c668:	1827883a 	mov	r19,r3
4110c66c:	1114aa40 	call	41114aa4 <__eqdf2>
4110c670:	103f9a26 	beq	r2,zero,4110c4dc <__reset+0xbb0ec4dc>
4110c674:	d9c00617 	ldw	r7,24(sp)
4110c678:	d8c00717 	ldw	r3,28(sp)
4110c67c:	b829883a 	mov	r20,r23
4110c680:	38bfffc4 	addi	r2,r7,-1
4110c684:	18ad883a 	add	r22,r3,r2
4110c688:	00000a06 	br	4110c6b4 <_dtoa_r+0x880>
4110c68c:	1108a9c0 	call	41108a9c <__muldf3>
4110c690:	000d883a 	mov	r6,zero
4110c694:	000f883a 	mov	r7,zero
4110c698:	1009883a 	mov	r4,r2
4110c69c:	180b883a 	mov	r5,r3
4110c6a0:	1025883a 	mov	r18,r2
4110c6a4:	1827883a 	mov	r19,r3
4110c6a8:	b829883a 	mov	r20,r23
4110c6ac:	1114aa40 	call	41114aa4 <__eqdf2>
4110c6b0:	103f8a26 	beq	r2,zero,4110c4dc <__reset+0xbb0ec4dc>
4110c6b4:	800d883a 	mov	r6,r16
4110c6b8:	880f883a 	mov	r7,r17
4110c6bc:	9009883a 	mov	r4,r18
4110c6c0:	980b883a 	mov	r5,r19
4110c6c4:	11141bc0 	call	411141bc <__divdf3>
4110c6c8:	180b883a 	mov	r5,r3
4110c6cc:	1009883a 	mov	r4,r2
4110c6d0:	11155f80 	call	411155f8 <__fixdfsi>
4110c6d4:	1009883a 	mov	r4,r2
4110c6d8:	102b883a 	mov	r21,r2
4110c6dc:	11156780 	call	41115678 <__floatsidf>
4110c6e0:	800d883a 	mov	r6,r16
4110c6e4:	880f883a 	mov	r7,r17
4110c6e8:	1009883a 	mov	r4,r2
4110c6ec:	180b883a 	mov	r5,r3
4110c6f0:	1108a9c0 	call	41108a9c <__muldf3>
4110c6f4:	100d883a 	mov	r6,r2
4110c6f8:	180f883a 	mov	r7,r3
4110c6fc:	9009883a 	mov	r4,r18
4110c700:	980b883a 	mov	r5,r19
4110c704:	1114cfc0 	call	41114cfc <__subdf3>
4110c708:	aa000c04 	addi	r8,r21,48
4110c70c:	a2000005 	stb	r8,0(r20)
4110c710:	000d883a 	mov	r6,zero
4110c714:	01d00934 	movhi	r7,16420
4110c718:	1009883a 	mov	r4,r2
4110c71c:	180b883a 	mov	r5,r3
4110c720:	a5c00044 	addi	r23,r20,1
4110c724:	b53fd91e 	bne	r22,r20,4110c68c <__reset+0xbb0ec68c>
4110c728:	100d883a 	mov	r6,r2
4110c72c:	180f883a 	mov	r7,r3
4110c730:	1009883a 	mov	r4,r2
4110c734:	180b883a 	mov	r5,r3
4110c738:	11139100 	call	41113910 <__adddf3>
4110c73c:	100d883a 	mov	r6,r2
4110c740:	180f883a 	mov	r7,r3
4110c744:	8009883a 	mov	r4,r16
4110c748:	880b883a 	mov	r5,r17
4110c74c:	1027883a 	mov	r19,r2
4110c750:	1825883a 	mov	r18,r3
4110c754:	1114c080 	call	41114c08 <__ledf2>
4110c758:	10000816 	blt	r2,zero,4110c77c <_dtoa_r+0x948>
4110c75c:	980d883a 	mov	r6,r19
4110c760:	900f883a 	mov	r7,r18
4110c764:	8009883a 	mov	r4,r16
4110c768:	880b883a 	mov	r5,r17
4110c76c:	1114aa40 	call	41114aa4 <__eqdf2>
4110c770:	103f5a1e 	bne	r2,zero,4110c4dc <__reset+0xbb0ec4dc>
4110c774:	ad40004c 	andi	r21,r21,1
4110c778:	a83f5826 	beq	r21,zero,4110c4dc <__reset+0xbb0ec4dc>
4110c77c:	bd3fffc3 	ldbu	r20,-1(r23)
4110c780:	b8bfffc4 	addi	r2,r23,-1
4110c784:	1007883a 	mov	r3,r2
4110c788:	01400e44 	movi	r5,57
4110c78c:	d9800717 	ldw	r6,28(sp)
4110c790:	00000506 	br	4110c7a8 <_dtoa_r+0x974>
4110c794:	18ffffc4 	addi	r3,r3,-1
4110c798:	11824726 	beq	r2,r6,4110d0b8 <_dtoa_r+0x1284>
4110c79c:	1d000003 	ldbu	r20,0(r3)
4110c7a0:	102f883a 	mov	r23,r2
4110c7a4:	10bfffc4 	addi	r2,r2,-1
4110c7a8:	a1003fcc 	andi	r4,r20,255
4110c7ac:	2100201c 	xori	r4,r4,128
4110c7b0:	213fe004 	addi	r4,r4,-128
4110c7b4:	217ff726 	beq	r4,r5,4110c794 <__reset+0xbb0ec794>
4110c7b8:	a2000044 	addi	r8,r20,1
4110c7bc:	12000005 	stb	r8,0(r2)
4110c7c0:	003f4606 	br	4110c4dc <__reset+0xbb0ec4dc>
4110c7c4:	d9000b17 	ldw	r4,44(sp)
4110c7c8:	2000c826 	beq	r4,zero,4110caec <_dtoa_r+0xcb8>
4110c7cc:	d9800317 	ldw	r6,12(sp)
4110c7d0:	00c00044 	movi	r3,1
4110c7d4:	1980f90e 	bge	r3,r6,4110cbbc <_dtoa_r+0xd88>
4110c7d8:	d8800617 	ldw	r2,24(sp)
4110c7dc:	d8c00a17 	ldw	r3,40(sp)
4110c7e0:	157fffc4 	addi	r21,r2,-1
4110c7e4:	1d41f316 	blt	r3,r21,4110cfb4 <_dtoa_r+0x1180>
4110c7e8:	1d6bc83a 	sub	r21,r3,r21
4110c7ec:	d9c00617 	ldw	r7,24(sp)
4110c7f0:	3802aa16 	blt	r7,zero,4110d29c <_dtoa_r+0x1468>
4110c7f4:	dd000817 	ldw	r20,32(sp)
4110c7f8:	d8800617 	ldw	r2,24(sp)
4110c7fc:	d8c00817 	ldw	r3,32(sp)
4110c800:	01400044 	movi	r5,1
4110c804:	e009883a 	mov	r4,fp
4110c808:	1887883a 	add	r3,r3,r2
4110c80c:	d8c00815 	stw	r3,32(sp)
4110c810:	b0ad883a 	add	r22,r22,r2
4110c814:	110f7940 	call	4110f794 <__i2b>
4110c818:	1023883a 	mov	r17,r2
4110c81c:	a0000826 	beq	r20,zero,4110c840 <_dtoa_r+0xa0c>
4110c820:	0580070e 	bge	zero,r22,4110c840 <_dtoa_r+0xa0c>
4110c824:	a005883a 	mov	r2,r20
4110c828:	b500b916 	blt	r22,r20,4110cb10 <_dtoa_r+0xcdc>
4110c82c:	d9000817 	ldw	r4,32(sp)
4110c830:	a0a9c83a 	sub	r20,r20,r2
4110c834:	b0adc83a 	sub	r22,r22,r2
4110c838:	2089c83a 	sub	r4,r4,r2
4110c83c:	d9000815 	stw	r4,32(sp)
4110c840:	d9800a17 	ldw	r6,40(sp)
4110c844:	0181810e 	bge	zero,r6,4110ce4c <_dtoa_r+0x1018>
4110c848:	d9c00b17 	ldw	r7,44(sp)
4110c84c:	3800b326 	beq	r7,zero,4110cb1c <_dtoa_r+0xce8>
4110c850:	a800b226 	beq	r21,zero,4110cb1c <_dtoa_r+0xce8>
4110c854:	880b883a 	mov	r5,r17
4110c858:	a80d883a 	mov	r6,r21
4110c85c:	e009883a 	mov	r4,fp
4110c860:	110f9c80 	call	4110f9c8 <__pow5mult>
4110c864:	d9800917 	ldw	r6,36(sp)
4110c868:	100b883a 	mov	r5,r2
4110c86c:	e009883a 	mov	r4,fp
4110c870:	1023883a 	mov	r17,r2
4110c874:	110f7d00 	call	4110f7d0 <__multiply>
4110c878:	1021883a 	mov	r16,r2
4110c87c:	d8800a17 	ldw	r2,40(sp)
4110c880:	d9400917 	ldw	r5,36(sp)
4110c884:	e009883a 	mov	r4,fp
4110c888:	1545c83a 	sub	r2,r2,r21
4110c88c:	d8800a15 	stw	r2,40(sp)
4110c890:	110f4300 	call	4110f430 <_Bfree>
4110c894:	d8c00a17 	ldw	r3,40(sp)
4110c898:	18009f1e 	bne	r3,zero,4110cb18 <_dtoa_r+0xce4>
4110c89c:	05c00044 	movi	r23,1
4110c8a0:	e009883a 	mov	r4,fp
4110c8a4:	b80b883a 	mov	r5,r23
4110c8a8:	110f7940 	call	4110f794 <__i2b>
4110c8ac:	d9000d17 	ldw	r4,52(sp)
4110c8b0:	102b883a 	mov	r21,r2
4110c8b4:	2000ce26 	beq	r4,zero,4110cbf0 <_dtoa_r+0xdbc>
4110c8b8:	200d883a 	mov	r6,r4
4110c8bc:	100b883a 	mov	r5,r2
4110c8c0:	e009883a 	mov	r4,fp
4110c8c4:	110f9c80 	call	4110f9c8 <__pow5mult>
4110c8c8:	d9800317 	ldw	r6,12(sp)
4110c8cc:	102b883a 	mov	r21,r2
4110c8d0:	b981810e 	bge	r23,r6,4110ced8 <_dtoa_r+0x10a4>
4110c8d4:	0027883a 	mov	r19,zero
4110c8d8:	a8800417 	ldw	r2,16(r21)
4110c8dc:	05c00804 	movi	r23,32
4110c8e0:	10800104 	addi	r2,r2,4
4110c8e4:	1085883a 	add	r2,r2,r2
4110c8e8:	1085883a 	add	r2,r2,r2
4110c8ec:	a885883a 	add	r2,r21,r2
4110c8f0:	11000017 	ldw	r4,0(r2)
4110c8f4:	110f67c0 	call	4110f67c <__hi0bits>
4110c8f8:	b885c83a 	sub	r2,r23,r2
4110c8fc:	1585883a 	add	r2,r2,r22
4110c900:	108007cc 	andi	r2,r2,31
4110c904:	1000b326 	beq	r2,zero,4110cbd4 <_dtoa_r+0xda0>
4110c908:	00c00804 	movi	r3,32
4110c90c:	1887c83a 	sub	r3,r3,r2
4110c910:	01000104 	movi	r4,4
4110c914:	20c2cd0e 	bge	r4,r3,4110d44c <_dtoa_r+0x1618>
4110c918:	00c00704 	movi	r3,28
4110c91c:	1885c83a 	sub	r2,r3,r2
4110c920:	d8c00817 	ldw	r3,32(sp)
4110c924:	a0a9883a 	add	r20,r20,r2
4110c928:	b0ad883a 	add	r22,r22,r2
4110c92c:	1887883a 	add	r3,r3,r2
4110c930:	d8c00815 	stw	r3,32(sp)
4110c934:	d9800817 	ldw	r6,32(sp)
4110c938:	0180040e 	bge	zero,r6,4110c94c <_dtoa_r+0xb18>
4110c93c:	800b883a 	mov	r5,r16
4110c940:	e009883a 	mov	r4,fp
4110c944:	110fb080 	call	4110fb08 <__lshift>
4110c948:	1021883a 	mov	r16,r2
4110c94c:	0580050e 	bge	zero,r22,4110c964 <_dtoa_r+0xb30>
4110c950:	a80b883a 	mov	r5,r21
4110c954:	b00d883a 	mov	r6,r22
4110c958:	e009883a 	mov	r4,fp
4110c95c:	110fb080 	call	4110fb08 <__lshift>
4110c960:	102b883a 	mov	r21,r2
4110c964:	d9c00e17 	ldw	r7,56(sp)
4110c968:	3801211e 	bne	r7,zero,4110cdf0 <_dtoa_r+0xfbc>
4110c96c:	d9800617 	ldw	r6,24(sp)
4110c970:	0181380e 	bge	zero,r6,4110ce54 <_dtoa_r+0x1020>
4110c974:	d8c00b17 	ldw	r3,44(sp)
4110c978:	1800ab1e 	bne	r3,zero,4110cc28 <_dtoa_r+0xdf4>
4110c97c:	dc800717 	ldw	r18,28(sp)
4110c980:	dcc00617 	ldw	r19,24(sp)
4110c984:	9029883a 	mov	r20,r18
4110c988:	00000206 	br	4110c994 <_dtoa_r+0xb60>
4110c98c:	110f4580 	call	4110f458 <__multadd>
4110c990:	1021883a 	mov	r16,r2
4110c994:	a80b883a 	mov	r5,r21
4110c998:	8009883a 	mov	r4,r16
4110c99c:	110bc340 	call	4110bc34 <quorem>
4110c9a0:	10800c04 	addi	r2,r2,48
4110c9a4:	90800005 	stb	r2,0(r18)
4110c9a8:	94800044 	addi	r18,r18,1
4110c9ac:	9507c83a 	sub	r3,r18,r20
4110c9b0:	000f883a 	mov	r7,zero
4110c9b4:	01800284 	movi	r6,10
4110c9b8:	800b883a 	mov	r5,r16
4110c9bc:	e009883a 	mov	r4,fp
4110c9c0:	1cfff216 	blt	r3,r19,4110c98c <__reset+0xbb0ec98c>
4110c9c4:	1011883a 	mov	r8,r2
4110c9c8:	d8800617 	ldw	r2,24(sp)
4110c9cc:	0082370e 	bge	zero,r2,4110d2ac <_dtoa_r+0x1478>
4110c9d0:	d9000717 	ldw	r4,28(sp)
4110c9d4:	0025883a 	mov	r18,zero
4110c9d8:	20af883a 	add	r23,r4,r2
4110c9dc:	01800044 	movi	r6,1
4110c9e0:	800b883a 	mov	r5,r16
4110c9e4:	e009883a 	mov	r4,fp
4110c9e8:	da001715 	stw	r8,92(sp)
4110c9ec:	110fb080 	call	4110fb08 <__lshift>
4110c9f0:	a80b883a 	mov	r5,r21
4110c9f4:	1009883a 	mov	r4,r2
4110c9f8:	d8800915 	stw	r2,36(sp)
4110c9fc:	110fc500 	call	4110fc50 <__mcmp>
4110ca00:	da001717 	ldw	r8,92(sp)
4110ca04:	0081800e 	bge	zero,r2,4110d008 <_dtoa_r+0x11d4>
4110ca08:	b93fffc3 	ldbu	r4,-1(r23)
4110ca0c:	b8bfffc4 	addi	r2,r23,-1
4110ca10:	1007883a 	mov	r3,r2
4110ca14:	01800e44 	movi	r6,57
4110ca18:	d9c00717 	ldw	r7,28(sp)
4110ca1c:	00000506 	br	4110ca34 <_dtoa_r+0xc00>
4110ca20:	18ffffc4 	addi	r3,r3,-1
4110ca24:	11c12326 	beq	r2,r7,4110ceb4 <_dtoa_r+0x1080>
4110ca28:	19000003 	ldbu	r4,0(r3)
4110ca2c:	102f883a 	mov	r23,r2
4110ca30:	10bfffc4 	addi	r2,r2,-1
4110ca34:	21403fcc 	andi	r5,r4,255
4110ca38:	2940201c 	xori	r5,r5,128
4110ca3c:	297fe004 	addi	r5,r5,-128
4110ca40:	29bff726 	beq	r5,r6,4110ca20 <__reset+0xbb0eca20>
4110ca44:	21000044 	addi	r4,r4,1
4110ca48:	11000005 	stb	r4,0(r2)
4110ca4c:	a80b883a 	mov	r5,r21
4110ca50:	e009883a 	mov	r4,fp
4110ca54:	110f4300 	call	4110f430 <_Bfree>
4110ca58:	883ea026 	beq	r17,zero,4110c4dc <__reset+0xbb0ec4dc>
4110ca5c:	90000426 	beq	r18,zero,4110ca70 <_dtoa_r+0xc3c>
4110ca60:	94400326 	beq	r18,r17,4110ca70 <_dtoa_r+0xc3c>
4110ca64:	900b883a 	mov	r5,r18
4110ca68:	e009883a 	mov	r4,fp
4110ca6c:	110f4300 	call	4110f430 <_Bfree>
4110ca70:	880b883a 	mov	r5,r17
4110ca74:	e009883a 	mov	r4,fp
4110ca78:	110f4300 	call	4110f430 <_Bfree>
4110ca7c:	003e9706 	br	4110c4dc <__reset+0xbb0ec4dc>
4110ca80:	01800044 	movi	r6,1
4110ca84:	d9800e15 	stw	r6,56(sp)
4110ca88:	003d9606 	br	4110c0e4 <__reset+0xbb0ec0e4>
4110ca8c:	d8800817 	ldw	r2,32(sp)
4110ca90:	d8c00517 	ldw	r3,20(sp)
4110ca94:	d8000d15 	stw	zero,52(sp)
4110ca98:	10c5c83a 	sub	r2,r2,r3
4110ca9c:	00c9c83a 	sub	r4,zero,r3
4110caa0:	d8800815 	stw	r2,32(sp)
4110caa4:	d9000a15 	stw	r4,40(sp)
4110caa8:	003d9706 	br	4110c108 <__reset+0xbb0ec108>
4110caac:	05adc83a 	sub	r22,zero,r22
4110cab0:	dd800815 	stw	r22,32(sp)
4110cab4:	002d883a 	mov	r22,zero
4110cab8:	003d8e06 	br	4110c0f4 <__reset+0xbb0ec0f4>
4110cabc:	d9000517 	ldw	r4,20(sp)
4110cac0:	11156780 	call	41115678 <__floatsidf>
4110cac4:	100d883a 	mov	r6,r2
4110cac8:	180f883a 	mov	r7,r3
4110cacc:	a009883a 	mov	r4,r20
4110cad0:	880b883a 	mov	r5,r17
4110cad4:	1114aa40 	call	41114aa4 <__eqdf2>
4110cad8:	103d7126 	beq	r2,zero,4110c0a0 <__reset+0xbb0ec0a0>
4110cadc:	d9c00517 	ldw	r7,20(sp)
4110cae0:	39ffffc4 	addi	r7,r7,-1
4110cae4:	d9c00515 	stw	r7,20(sp)
4110cae8:	003d6d06 	br	4110c0a0 <__reset+0xbb0ec0a0>
4110caec:	dd400a17 	ldw	r21,40(sp)
4110caf0:	dd000817 	ldw	r20,32(sp)
4110caf4:	0023883a 	mov	r17,zero
4110caf8:	003f4806 	br	4110c81c <__reset+0xbb0ec81c>
4110cafc:	10e3c83a 	sub	r17,r2,r3
4110cb00:	9448983a 	sll	r4,r18,r17
4110cb04:	003d3206 	br	4110bfd0 <__reset+0xbb0ebfd0>
4110cb08:	d8000e15 	stw	zero,56(sp)
4110cb0c:	003d7506 	br	4110c0e4 <__reset+0xbb0ec0e4>
4110cb10:	b005883a 	mov	r2,r22
4110cb14:	003f4506 	br	4110c82c <__reset+0xbb0ec82c>
4110cb18:	dc000915 	stw	r16,36(sp)
4110cb1c:	d9800a17 	ldw	r6,40(sp)
4110cb20:	d9400917 	ldw	r5,36(sp)
4110cb24:	e009883a 	mov	r4,fp
4110cb28:	110f9c80 	call	4110f9c8 <__pow5mult>
4110cb2c:	1021883a 	mov	r16,r2
4110cb30:	003f5a06 	br	4110c89c <__reset+0xbb0ec89c>
4110cb34:	01c00044 	movi	r7,1
4110cb38:	d9c00b15 	stw	r7,44(sp)
4110cb3c:	d8802217 	ldw	r2,136(sp)
4110cb40:	0081280e 	bge	zero,r2,4110cfe4 <_dtoa_r+0x11b0>
4110cb44:	100d883a 	mov	r6,r2
4110cb48:	1021883a 	mov	r16,r2
4110cb4c:	d8800c15 	stw	r2,48(sp)
4110cb50:	d8800615 	stw	r2,24(sp)
4110cb54:	003d8806 	br	4110c178 <__reset+0xbb0ec178>
4110cb58:	d8800617 	ldw	r2,24(sp)
4110cb5c:	00be9b16 	blt	zero,r2,4110c5cc <__reset+0xbb0ec5cc>
4110cb60:	10010f1e 	bne	r2,zero,4110cfa0 <_dtoa_r+0x116c>
4110cb64:	880b883a 	mov	r5,r17
4110cb68:	000d883a 	mov	r6,zero
4110cb6c:	01d00534 	movhi	r7,16404
4110cb70:	8009883a 	mov	r4,r16
4110cb74:	1108a9c0 	call	41108a9c <__muldf3>
4110cb78:	900d883a 	mov	r6,r18
4110cb7c:	980f883a 	mov	r7,r19
4110cb80:	1009883a 	mov	r4,r2
4110cb84:	180b883a 	mov	r5,r3
4110cb88:	1114b2c0 	call	41114b2c <__gedf2>
4110cb8c:	002b883a 	mov	r21,zero
4110cb90:	0023883a 	mov	r17,zero
4110cb94:	1000bf16 	blt	r2,zero,4110ce94 <_dtoa_r+0x1060>
4110cb98:	d9802217 	ldw	r6,136(sp)
4110cb9c:	ddc00717 	ldw	r23,28(sp)
4110cba0:	018c303a 	nor	r6,zero,r6
4110cba4:	d9800515 	stw	r6,20(sp)
4110cba8:	a80b883a 	mov	r5,r21
4110cbac:	e009883a 	mov	r4,fp
4110cbb0:	110f4300 	call	4110f430 <_Bfree>
4110cbb4:	883e4926 	beq	r17,zero,4110c4dc <__reset+0xbb0ec4dc>
4110cbb8:	003fad06 	br	4110ca70 <__reset+0xbb0eca70>
4110cbbc:	d9c01117 	ldw	r7,68(sp)
4110cbc0:	3801bc26 	beq	r7,zero,4110d2b4 <_dtoa_r+0x1480>
4110cbc4:	10810cc4 	addi	r2,r2,1075
4110cbc8:	dd400a17 	ldw	r21,40(sp)
4110cbcc:	dd000817 	ldw	r20,32(sp)
4110cbd0:	003f0a06 	br	4110c7fc <__reset+0xbb0ec7fc>
4110cbd4:	00800704 	movi	r2,28
4110cbd8:	d9000817 	ldw	r4,32(sp)
4110cbdc:	a0a9883a 	add	r20,r20,r2
4110cbe0:	b0ad883a 	add	r22,r22,r2
4110cbe4:	2089883a 	add	r4,r4,r2
4110cbe8:	d9000815 	stw	r4,32(sp)
4110cbec:	003f5106 	br	4110c934 <__reset+0xbb0ec934>
4110cbf0:	d8c00317 	ldw	r3,12(sp)
4110cbf4:	b8c1fc0e 	bge	r23,r3,4110d3e8 <_dtoa_r+0x15b4>
4110cbf8:	0027883a 	mov	r19,zero
4110cbfc:	b805883a 	mov	r2,r23
4110cc00:	003f3e06 	br	4110c8fc <__reset+0xbb0ec8fc>
4110cc04:	880b883a 	mov	r5,r17
4110cc08:	e009883a 	mov	r4,fp
4110cc0c:	000f883a 	mov	r7,zero
4110cc10:	01800284 	movi	r6,10
4110cc14:	110f4580 	call	4110f458 <__multadd>
4110cc18:	d9000c17 	ldw	r4,48(sp)
4110cc1c:	1023883a 	mov	r17,r2
4110cc20:	0102040e 	bge	zero,r4,4110d434 <_dtoa_r+0x1600>
4110cc24:	d9000615 	stw	r4,24(sp)
4110cc28:	0500050e 	bge	zero,r20,4110cc40 <_dtoa_r+0xe0c>
4110cc2c:	880b883a 	mov	r5,r17
4110cc30:	a00d883a 	mov	r6,r20
4110cc34:	e009883a 	mov	r4,fp
4110cc38:	110fb080 	call	4110fb08 <__lshift>
4110cc3c:	1023883a 	mov	r17,r2
4110cc40:	9801241e 	bne	r19,zero,4110d0d4 <_dtoa_r+0x12a0>
4110cc44:	8829883a 	mov	r20,r17
4110cc48:	d9000617 	ldw	r4,24(sp)
4110cc4c:	dcc00717 	ldw	r19,28(sp)
4110cc50:	9480004c 	andi	r18,r18,1
4110cc54:	20bfffc4 	addi	r2,r4,-1
4110cc58:	9885883a 	add	r2,r19,r2
4110cc5c:	d8800415 	stw	r2,16(sp)
4110cc60:	dc800615 	stw	r18,24(sp)
4110cc64:	a80b883a 	mov	r5,r21
4110cc68:	8009883a 	mov	r4,r16
4110cc6c:	110bc340 	call	4110bc34 <quorem>
4110cc70:	880b883a 	mov	r5,r17
4110cc74:	8009883a 	mov	r4,r16
4110cc78:	102f883a 	mov	r23,r2
4110cc7c:	110fc500 	call	4110fc50 <__mcmp>
4110cc80:	a80b883a 	mov	r5,r21
4110cc84:	a00d883a 	mov	r6,r20
4110cc88:	e009883a 	mov	r4,fp
4110cc8c:	102d883a 	mov	r22,r2
4110cc90:	110fcb00 	call	4110fcb0 <__mdiff>
4110cc94:	1007883a 	mov	r3,r2
4110cc98:	10800317 	ldw	r2,12(r2)
4110cc9c:	bc800c04 	addi	r18,r23,48
4110cca0:	180b883a 	mov	r5,r3
4110cca4:	10004e1e 	bne	r2,zero,4110cde0 <_dtoa_r+0xfac>
4110cca8:	8009883a 	mov	r4,r16
4110ccac:	d8c01615 	stw	r3,88(sp)
4110ccb0:	110fc500 	call	4110fc50 <__mcmp>
4110ccb4:	d8c01617 	ldw	r3,88(sp)
4110ccb8:	e009883a 	mov	r4,fp
4110ccbc:	d8801615 	stw	r2,88(sp)
4110ccc0:	180b883a 	mov	r5,r3
4110ccc4:	110f4300 	call	4110f430 <_Bfree>
4110ccc8:	d8801617 	ldw	r2,88(sp)
4110cccc:	1000041e 	bne	r2,zero,4110cce0 <_dtoa_r+0xeac>
4110ccd0:	d9800317 	ldw	r6,12(sp)
4110ccd4:	3000021e 	bne	r6,zero,4110cce0 <_dtoa_r+0xeac>
4110ccd8:	d8c00617 	ldw	r3,24(sp)
4110ccdc:	18003726 	beq	r3,zero,4110cdbc <_dtoa_r+0xf88>
4110cce0:	b0002016 	blt	r22,zero,4110cd64 <_dtoa_r+0xf30>
4110cce4:	b000041e 	bne	r22,zero,4110ccf8 <_dtoa_r+0xec4>
4110cce8:	d9000317 	ldw	r4,12(sp)
4110ccec:	2000021e 	bne	r4,zero,4110ccf8 <_dtoa_r+0xec4>
4110ccf0:	d8c00617 	ldw	r3,24(sp)
4110ccf4:	18001b26 	beq	r3,zero,4110cd64 <_dtoa_r+0xf30>
4110ccf8:	00810716 	blt	zero,r2,4110d118 <_dtoa_r+0x12e4>
4110ccfc:	d8c00417 	ldw	r3,16(sp)
4110cd00:	9d800044 	addi	r22,r19,1
4110cd04:	9c800005 	stb	r18,0(r19)
4110cd08:	b02f883a 	mov	r23,r22
4110cd0c:	98c10626 	beq	r19,r3,4110d128 <_dtoa_r+0x12f4>
4110cd10:	800b883a 	mov	r5,r16
4110cd14:	000f883a 	mov	r7,zero
4110cd18:	01800284 	movi	r6,10
4110cd1c:	e009883a 	mov	r4,fp
4110cd20:	110f4580 	call	4110f458 <__multadd>
4110cd24:	1021883a 	mov	r16,r2
4110cd28:	000f883a 	mov	r7,zero
4110cd2c:	01800284 	movi	r6,10
4110cd30:	880b883a 	mov	r5,r17
4110cd34:	e009883a 	mov	r4,fp
4110cd38:	8d002526 	beq	r17,r20,4110cdd0 <_dtoa_r+0xf9c>
4110cd3c:	110f4580 	call	4110f458 <__multadd>
4110cd40:	a00b883a 	mov	r5,r20
4110cd44:	000f883a 	mov	r7,zero
4110cd48:	01800284 	movi	r6,10
4110cd4c:	e009883a 	mov	r4,fp
4110cd50:	1023883a 	mov	r17,r2
4110cd54:	110f4580 	call	4110f458 <__multadd>
4110cd58:	1029883a 	mov	r20,r2
4110cd5c:	b027883a 	mov	r19,r22
4110cd60:	003fc006 	br	4110cc64 <__reset+0xbb0ecc64>
4110cd64:	9011883a 	mov	r8,r18
4110cd68:	00800e0e 	bge	zero,r2,4110cda4 <_dtoa_r+0xf70>
4110cd6c:	800b883a 	mov	r5,r16
4110cd70:	01800044 	movi	r6,1
4110cd74:	e009883a 	mov	r4,fp
4110cd78:	da001715 	stw	r8,92(sp)
4110cd7c:	110fb080 	call	4110fb08 <__lshift>
4110cd80:	a80b883a 	mov	r5,r21
4110cd84:	1009883a 	mov	r4,r2
4110cd88:	1021883a 	mov	r16,r2
4110cd8c:	110fc500 	call	4110fc50 <__mcmp>
4110cd90:	da001717 	ldw	r8,92(sp)
4110cd94:	0081960e 	bge	zero,r2,4110d3f0 <_dtoa_r+0x15bc>
4110cd98:	00800e44 	movi	r2,57
4110cd9c:	40817026 	beq	r8,r2,4110d360 <_dtoa_r+0x152c>
4110cda0:	ba000c44 	addi	r8,r23,49
4110cda4:	8825883a 	mov	r18,r17
4110cda8:	9dc00044 	addi	r23,r19,1
4110cdac:	9a000005 	stb	r8,0(r19)
4110cdb0:	a023883a 	mov	r17,r20
4110cdb4:	dc000915 	stw	r16,36(sp)
4110cdb8:	003f2406 	br	4110ca4c <__reset+0xbb0eca4c>
4110cdbc:	00800e44 	movi	r2,57
4110cdc0:	9011883a 	mov	r8,r18
4110cdc4:	90816626 	beq	r18,r2,4110d360 <_dtoa_r+0x152c>
4110cdc8:	05bff516 	blt	zero,r22,4110cda0 <__reset+0xbb0ecda0>
4110cdcc:	003ff506 	br	4110cda4 <__reset+0xbb0ecda4>
4110cdd0:	110f4580 	call	4110f458 <__multadd>
4110cdd4:	1023883a 	mov	r17,r2
4110cdd8:	1029883a 	mov	r20,r2
4110cddc:	003fdf06 	br	4110cd5c <__reset+0xbb0ecd5c>
4110cde0:	e009883a 	mov	r4,fp
4110cde4:	110f4300 	call	4110f430 <_Bfree>
4110cde8:	00800044 	movi	r2,1
4110cdec:	003fbc06 	br	4110cce0 <__reset+0xbb0ecce0>
4110cdf0:	a80b883a 	mov	r5,r21
4110cdf4:	8009883a 	mov	r4,r16
4110cdf8:	110fc500 	call	4110fc50 <__mcmp>
4110cdfc:	103edb0e 	bge	r2,zero,4110c96c <__reset+0xbb0ec96c>
4110ce00:	800b883a 	mov	r5,r16
4110ce04:	000f883a 	mov	r7,zero
4110ce08:	01800284 	movi	r6,10
4110ce0c:	e009883a 	mov	r4,fp
4110ce10:	110f4580 	call	4110f458 <__multadd>
4110ce14:	1021883a 	mov	r16,r2
4110ce18:	d8800517 	ldw	r2,20(sp)
4110ce1c:	d8c00b17 	ldw	r3,44(sp)
4110ce20:	10bfffc4 	addi	r2,r2,-1
4110ce24:	d8800515 	stw	r2,20(sp)
4110ce28:	183f761e 	bne	r3,zero,4110cc04 <__reset+0xbb0ecc04>
4110ce2c:	d9000c17 	ldw	r4,48(sp)
4110ce30:	0101730e 	bge	zero,r4,4110d400 <_dtoa_r+0x15cc>
4110ce34:	d9000615 	stw	r4,24(sp)
4110ce38:	003ed006 	br	4110c97c <__reset+0xbb0ec97c>
4110ce3c:	00800084 	movi	r2,2
4110ce40:	3081861e 	bne	r6,r2,4110d45c <_dtoa_r+0x1628>
4110ce44:	d8000b15 	stw	zero,44(sp)
4110ce48:	003f3c06 	br	4110cb3c <__reset+0xbb0ecb3c>
4110ce4c:	dc000917 	ldw	r16,36(sp)
4110ce50:	003e9206 	br	4110c89c <__reset+0xbb0ec89c>
4110ce54:	d9c00317 	ldw	r7,12(sp)
4110ce58:	00800084 	movi	r2,2
4110ce5c:	11fec50e 	bge	r2,r7,4110c974 <__reset+0xbb0ec974>
4110ce60:	d9000617 	ldw	r4,24(sp)
4110ce64:	20013c1e 	bne	r4,zero,4110d358 <_dtoa_r+0x1524>
4110ce68:	a80b883a 	mov	r5,r21
4110ce6c:	000f883a 	mov	r7,zero
4110ce70:	01800144 	movi	r6,5
4110ce74:	e009883a 	mov	r4,fp
4110ce78:	110f4580 	call	4110f458 <__multadd>
4110ce7c:	100b883a 	mov	r5,r2
4110ce80:	8009883a 	mov	r4,r16
4110ce84:	102b883a 	mov	r21,r2
4110ce88:	110fc500 	call	4110fc50 <__mcmp>
4110ce8c:	dc000915 	stw	r16,36(sp)
4110ce90:	00bf410e 	bge	zero,r2,4110cb98 <__reset+0xbb0ecb98>
4110ce94:	d9c00717 	ldw	r7,28(sp)
4110ce98:	00800c44 	movi	r2,49
4110ce9c:	38800005 	stb	r2,0(r7)
4110cea0:	d8800517 	ldw	r2,20(sp)
4110cea4:	3dc00044 	addi	r23,r7,1
4110cea8:	10800044 	addi	r2,r2,1
4110ceac:	d8800515 	stw	r2,20(sp)
4110ceb0:	003f3d06 	br	4110cba8 <__reset+0xbb0ecba8>
4110ceb4:	d9800517 	ldw	r6,20(sp)
4110ceb8:	d9c00717 	ldw	r7,28(sp)
4110cebc:	00800c44 	movi	r2,49
4110cec0:	31800044 	addi	r6,r6,1
4110cec4:	d9800515 	stw	r6,20(sp)
4110cec8:	38800005 	stb	r2,0(r7)
4110cecc:	003edf06 	br	4110ca4c <__reset+0xbb0eca4c>
4110ced0:	d8000b15 	stw	zero,44(sp)
4110ced4:	003c9f06 	br	4110c154 <__reset+0xbb0ec154>
4110ced8:	903e7e1e 	bne	r18,zero,4110c8d4 <__reset+0xbb0ec8d4>
4110cedc:	00800434 	movhi	r2,16
4110cee0:	10bfffc4 	addi	r2,r2,-1
4110cee4:	9884703a 	and	r2,r19,r2
4110cee8:	1000ea1e 	bne	r2,zero,4110d294 <_dtoa_r+0x1460>
4110ceec:	9cdffc2c 	andhi	r19,r19,32752
4110cef0:	9800e826 	beq	r19,zero,4110d294 <_dtoa_r+0x1460>
4110cef4:	d9c00817 	ldw	r7,32(sp)
4110cef8:	b5800044 	addi	r22,r22,1
4110cefc:	04c00044 	movi	r19,1
4110cf00:	39c00044 	addi	r7,r7,1
4110cf04:	d9c00815 	stw	r7,32(sp)
4110cf08:	d8800d17 	ldw	r2,52(sp)
4110cf0c:	103e721e 	bne	r2,zero,4110c8d8 <__reset+0xbb0ec8d8>
4110cf10:	00800044 	movi	r2,1
4110cf14:	003e7906 	br	4110c8fc <__reset+0xbb0ec8fc>
4110cf18:	8009883a 	mov	r4,r16
4110cf1c:	11156780 	call	41115678 <__floatsidf>
4110cf20:	d9800f17 	ldw	r6,60(sp)
4110cf24:	d9c01017 	ldw	r7,64(sp)
4110cf28:	1009883a 	mov	r4,r2
4110cf2c:	180b883a 	mov	r5,r3
4110cf30:	1108a9c0 	call	41108a9c <__muldf3>
4110cf34:	000d883a 	mov	r6,zero
4110cf38:	01d00734 	movhi	r7,16412
4110cf3c:	1009883a 	mov	r4,r2
4110cf40:	180b883a 	mov	r5,r3
4110cf44:	11139100 	call	41113910 <__adddf3>
4110cf48:	047f3034 	movhi	r17,64704
4110cf4c:	1021883a 	mov	r16,r2
4110cf50:	1c63883a 	add	r17,r3,r17
4110cf54:	d9000f17 	ldw	r4,60(sp)
4110cf58:	d9401017 	ldw	r5,64(sp)
4110cf5c:	000d883a 	mov	r6,zero
4110cf60:	01d00534 	movhi	r7,16404
4110cf64:	1114cfc0 	call	41114cfc <__subdf3>
4110cf68:	800d883a 	mov	r6,r16
4110cf6c:	880f883a 	mov	r7,r17
4110cf70:	1009883a 	mov	r4,r2
4110cf74:	180b883a 	mov	r5,r3
4110cf78:	102b883a 	mov	r21,r2
4110cf7c:	1829883a 	mov	r20,r3
4110cf80:	1114b2c0 	call	41114b2c <__gedf2>
4110cf84:	00806c16 	blt	zero,r2,4110d138 <_dtoa_r+0x1304>
4110cf88:	89e0003c 	xorhi	r7,r17,32768
4110cf8c:	800d883a 	mov	r6,r16
4110cf90:	a809883a 	mov	r4,r21
4110cf94:	a00b883a 	mov	r5,r20
4110cf98:	1114c080 	call	41114c08 <__ledf2>
4110cf9c:	103d7e0e 	bge	r2,zero,4110c598 <__reset+0xbb0ec598>
4110cfa0:	002b883a 	mov	r21,zero
4110cfa4:	0023883a 	mov	r17,zero
4110cfa8:	003efb06 	br	4110cb98 <__reset+0xbb0ecb98>
4110cfac:	d8800717 	ldw	r2,28(sp)
4110cfb0:	003bd006 	br	4110bef4 <__reset+0xbb0ebef4>
4110cfb4:	d9000a17 	ldw	r4,40(sp)
4110cfb8:	d9800d17 	ldw	r6,52(sp)
4110cfbc:	dd400a15 	stw	r21,40(sp)
4110cfc0:	a905c83a 	sub	r2,r21,r4
4110cfc4:	308d883a 	add	r6,r6,r2
4110cfc8:	d9800d15 	stw	r6,52(sp)
4110cfcc:	002b883a 	mov	r21,zero
4110cfd0:	003e0606 	br	4110c7ec <__reset+0xbb0ec7ec>
4110cfd4:	9023883a 	mov	r17,r18
4110cfd8:	9829883a 	mov	r20,r19
4110cfdc:	04000084 	movi	r16,2
4110cfe0:	003c9206 	br	4110c22c <__reset+0xbb0ec22c>
4110cfe4:	04000044 	movi	r16,1
4110cfe8:	dc000c15 	stw	r16,48(sp)
4110cfec:	dc000615 	stw	r16,24(sp)
4110cff0:	dc002215 	stw	r16,136(sp)
4110cff4:	e0001115 	stw	zero,68(fp)
4110cff8:	000b883a 	mov	r5,zero
4110cffc:	003c6906 	br	4110c1a4 <__reset+0xbb0ec1a4>
4110d000:	3021883a 	mov	r16,r6
4110d004:	003ffb06 	br	4110cff4 <__reset+0xbb0ecff4>
4110d008:	1000021e 	bne	r2,zero,4110d014 <_dtoa_r+0x11e0>
4110d00c:	4200004c 	andi	r8,r8,1
4110d010:	403e7d1e 	bne	r8,zero,4110ca08 <__reset+0xbb0eca08>
4110d014:	01000c04 	movi	r4,48
4110d018:	00000106 	br	4110d020 <_dtoa_r+0x11ec>
4110d01c:	102f883a 	mov	r23,r2
4110d020:	b8bfffc4 	addi	r2,r23,-1
4110d024:	10c00007 	ldb	r3,0(r2)
4110d028:	193ffc26 	beq	r3,r4,4110d01c <__reset+0xbb0ed01c>
4110d02c:	003e8706 	br	4110ca4c <__reset+0xbb0eca4c>
4110d030:	d8800517 	ldw	r2,20(sp)
4110d034:	00a3c83a 	sub	r17,zero,r2
4110d038:	8800a426 	beq	r17,zero,4110d2cc <_dtoa_r+0x1498>
4110d03c:	888003cc 	andi	r2,r17,15
4110d040:	100490fa 	slli	r2,r2,3
4110d044:	00d044b4 	movhi	r3,16658
4110d048:	18ef6c04 	addi	r3,r3,-16976
4110d04c:	1885883a 	add	r2,r3,r2
4110d050:	11800017 	ldw	r6,0(r2)
4110d054:	11c00117 	ldw	r7,4(r2)
4110d058:	9009883a 	mov	r4,r18
4110d05c:	980b883a 	mov	r5,r19
4110d060:	8823d13a 	srai	r17,r17,4
4110d064:	1108a9c0 	call	41108a9c <__muldf3>
4110d068:	d8800f15 	stw	r2,60(sp)
4110d06c:	d8c01015 	stw	r3,64(sp)
4110d070:	8800e826 	beq	r17,zero,4110d414 <_dtoa_r+0x15e0>
4110d074:	051044b4 	movhi	r20,16658
4110d078:	a52f6204 	addi	r20,r20,-17016
4110d07c:	04000084 	movi	r16,2
4110d080:	8980004c 	andi	r6,r17,1
4110d084:	1009883a 	mov	r4,r2
4110d088:	8823d07a 	srai	r17,r17,1
4110d08c:	180b883a 	mov	r5,r3
4110d090:	30000426 	beq	r6,zero,4110d0a4 <_dtoa_r+0x1270>
4110d094:	a1800017 	ldw	r6,0(r20)
4110d098:	a1c00117 	ldw	r7,4(r20)
4110d09c:	84000044 	addi	r16,r16,1
4110d0a0:	1108a9c0 	call	41108a9c <__muldf3>
4110d0a4:	a5000204 	addi	r20,r20,8
4110d0a8:	883ff51e 	bne	r17,zero,4110d080 <__reset+0xbb0ed080>
4110d0ac:	d8800f15 	stw	r2,60(sp)
4110d0b0:	d8c01015 	stw	r3,64(sp)
4110d0b4:	003c7606 	br	4110c290 <__reset+0xbb0ec290>
4110d0b8:	00c00c04 	movi	r3,48
4110d0bc:	10c00005 	stb	r3,0(r2)
4110d0c0:	d8c00517 	ldw	r3,20(sp)
4110d0c4:	bd3fffc3 	ldbu	r20,-1(r23)
4110d0c8:	18c00044 	addi	r3,r3,1
4110d0cc:	d8c00515 	stw	r3,20(sp)
4110d0d0:	003db906 	br	4110c7b8 <__reset+0xbb0ec7b8>
4110d0d4:	89400117 	ldw	r5,4(r17)
4110d0d8:	e009883a 	mov	r4,fp
4110d0dc:	110f3880 	call	4110f388 <_Balloc>
4110d0e0:	89800417 	ldw	r6,16(r17)
4110d0e4:	89400304 	addi	r5,r17,12
4110d0e8:	11000304 	addi	r4,r2,12
4110d0ec:	31800084 	addi	r6,r6,2
4110d0f0:	318d883a 	add	r6,r6,r6
4110d0f4:	318d883a 	add	r6,r6,r6
4110d0f8:	1027883a 	mov	r19,r2
4110d0fc:	11094d00 	call	411094d0 <memcpy>
4110d100:	01800044 	movi	r6,1
4110d104:	980b883a 	mov	r5,r19
4110d108:	e009883a 	mov	r4,fp
4110d10c:	110fb080 	call	4110fb08 <__lshift>
4110d110:	1029883a 	mov	r20,r2
4110d114:	003ecc06 	br	4110cc48 <__reset+0xbb0ecc48>
4110d118:	00800e44 	movi	r2,57
4110d11c:	90809026 	beq	r18,r2,4110d360 <_dtoa_r+0x152c>
4110d120:	92000044 	addi	r8,r18,1
4110d124:	003f1f06 	br	4110cda4 <__reset+0xbb0ecda4>
4110d128:	9011883a 	mov	r8,r18
4110d12c:	8825883a 	mov	r18,r17
4110d130:	a023883a 	mov	r17,r20
4110d134:	003e2906 	br	4110c9dc <__reset+0xbb0ec9dc>
4110d138:	002b883a 	mov	r21,zero
4110d13c:	0023883a 	mov	r17,zero
4110d140:	003f5406 	br	4110ce94 <__reset+0xbb0ece94>
4110d144:	61bfffc4 	addi	r6,r12,-1
4110d148:	300490fa 	slli	r2,r6,3
4110d14c:	00d044b4 	movhi	r3,16658
4110d150:	18ef6c04 	addi	r3,r3,-16976
4110d154:	1885883a 	add	r2,r3,r2
4110d158:	11000017 	ldw	r4,0(r2)
4110d15c:	11400117 	ldw	r5,4(r2)
4110d160:	d8800717 	ldw	r2,28(sp)
4110d164:	880f883a 	mov	r7,r17
4110d168:	d9801215 	stw	r6,72(sp)
4110d16c:	800d883a 	mov	r6,r16
4110d170:	db001615 	stw	r12,88(sp)
4110d174:	15c00044 	addi	r23,r2,1
4110d178:	1108a9c0 	call	41108a9c <__muldf3>
4110d17c:	d9401017 	ldw	r5,64(sp)
4110d180:	d9000f17 	ldw	r4,60(sp)
4110d184:	d8c01515 	stw	r3,84(sp)
4110d188:	d8801415 	stw	r2,80(sp)
4110d18c:	11155f80 	call	411155f8 <__fixdfsi>
4110d190:	1009883a 	mov	r4,r2
4110d194:	1021883a 	mov	r16,r2
4110d198:	11156780 	call	41115678 <__floatsidf>
4110d19c:	d9000f17 	ldw	r4,60(sp)
4110d1a0:	d9401017 	ldw	r5,64(sp)
4110d1a4:	100d883a 	mov	r6,r2
4110d1a8:	180f883a 	mov	r7,r3
4110d1ac:	1114cfc0 	call	41114cfc <__subdf3>
4110d1b0:	1829883a 	mov	r20,r3
4110d1b4:	d8c00717 	ldw	r3,28(sp)
4110d1b8:	84000c04 	addi	r16,r16,48
4110d1bc:	1023883a 	mov	r17,r2
4110d1c0:	1c000005 	stb	r16,0(r3)
4110d1c4:	db001617 	ldw	r12,88(sp)
4110d1c8:	00800044 	movi	r2,1
4110d1cc:	60802226 	beq	r12,r2,4110d258 <_dtoa_r+0x1424>
4110d1d0:	d9c00717 	ldw	r7,28(sp)
4110d1d4:	8805883a 	mov	r2,r17
4110d1d8:	b82b883a 	mov	r21,r23
4110d1dc:	3b19883a 	add	r12,r7,r12
4110d1e0:	6023883a 	mov	r17,r12
4110d1e4:	a007883a 	mov	r3,r20
4110d1e8:	dc800f15 	stw	r18,60(sp)
4110d1ec:	000d883a 	mov	r6,zero
4110d1f0:	01d00934 	movhi	r7,16420
4110d1f4:	1009883a 	mov	r4,r2
4110d1f8:	180b883a 	mov	r5,r3
4110d1fc:	1108a9c0 	call	41108a9c <__muldf3>
4110d200:	180b883a 	mov	r5,r3
4110d204:	1009883a 	mov	r4,r2
4110d208:	1829883a 	mov	r20,r3
4110d20c:	1025883a 	mov	r18,r2
4110d210:	11155f80 	call	411155f8 <__fixdfsi>
4110d214:	1009883a 	mov	r4,r2
4110d218:	1021883a 	mov	r16,r2
4110d21c:	11156780 	call	41115678 <__floatsidf>
4110d220:	100d883a 	mov	r6,r2
4110d224:	180f883a 	mov	r7,r3
4110d228:	9009883a 	mov	r4,r18
4110d22c:	a00b883a 	mov	r5,r20
4110d230:	84000c04 	addi	r16,r16,48
4110d234:	1114cfc0 	call	41114cfc <__subdf3>
4110d238:	ad400044 	addi	r21,r21,1
4110d23c:	ac3fffc5 	stb	r16,-1(r21)
4110d240:	ac7fea1e 	bne	r21,r17,4110d1ec <__reset+0xbb0ed1ec>
4110d244:	1023883a 	mov	r17,r2
4110d248:	d8801217 	ldw	r2,72(sp)
4110d24c:	dc800f17 	ldw	r18,60(sp)
4110d250:	1829883a 	mov	r20,r3
4110d254:	b8af883a 	add	r23,r23,r2
4110d258:	d9001417 	ldw	r4,80(sp)
4110d25c:	d9401517 	ldw	r5,84(sp)
4110d260:	000d883a 	mov	r6,zero
4110d264:	01cff834 	movhi	r7,16352
4110d268:	11139100 	call	41113910 <__adddf3>
4110d26c:	880d883a 	mov	r6,r17
4110d270:	a00f883a 	mov	r7,r20
4110d274:	1009883a 	mov	r4,r2
4110d278:	180b883a 	mov	r5,r3
4110d27c:	1114c080 	call	41114c08 <__ledf2>
4110d280:	10003e0e 	bge	r2,zero,4110d37c <_dtoa_r+0x1548>
4110d284:	d9001317 	ldw	r4,76(sp)
4110d288:	bd3fffc3 	ldbu	r20,-1(r23)
4110d28c:	d9000515 	stw	r4,20(sp)
4110d290:	003d3b06 	br	4110c780 <__reset+0xbb0ec780>
4110d294:	0027883a 	mov	r19,zero
4110d298:	003f1b06 	br	4110cf08 <__reset+0xbb0ecf08>
4110d29c:	d8800817 	ldw	r2,32(sp)
4110d2a0:	11e9c83a 	sub	r20,r2,r7
4110d2a4:	0005883a 	mov	r2,zero
4110d2a8:	003d5406 	br	4110c7fc <__reset+0xbb0ec7fc>
4110d2ac:	00800044 	movi	r2,1
4110d2b0:	003dc706 	br	4110c9d0 <__reset+0xbb0ec9d0>
4110d2b4:	d8c00217 	ldw	r3,8(sp)
4110d2b8:	00800d84 	movi	r2,54
4110d2bc:	dd400a17 	ldw	r21,40(sp)
4110d2c0:	10c5c83a 	sub	r2,r2,r3
4110d2c4:	dd000817 	ldw	r20,32(sp)
4110d2c8:	003d4c06 	br	4110c7fc <__reset+0xbb0ec7fc>
4110d2cc:	dc800f15 	stw	r18,60(sp)
4110d2d0:	dcc01015 	stw	r19,64(sp)
4110d2d4:	04000084 	movi	r16,2
4110d2d8:	003bed06 	br	4110c290 <__reset+0xbb0ec290>
4110d2dc:	d9000617 	ldw	r4,24(sp)
4110d2e0:	203f0d26 	beq	r4,zero,4110cf18 <__reset+0xbb0ecf18>
4110d2e4:	d9800c17 	ldw	r6,48(sp)
4110d2e8:	01bcab0e 	bge	zero,r6,4110c598 <__reset+0xbb0ec598>
4110d2ec:	d9401017 	ldw	r5,64(sp)
4110d2f0:	d9000f17 	ldw	r4,60(sp)
4110d2f4:	000d883a 	mov	r6,zero
4110d2f8:	01d00934 	movhi	r7,16420
4110d2fc:	1108a9c0 	call	41108a9c <__muldf3>
4110d300:	81000044 	addi	r4,r16,1
4110d304:	d8800f15 	stw	r2,60(sp)
4110d308:	d8c01015 	stw	r3,64(sp)
4110d30c:	11156780 	call	41115678 <__floatsidf>
4110d310:	d9800f17 	ldw	r6,60(sp)
4110d314:	d9c01017 	ldw	r7,64(sp)
4110d318:	1009883a 	mov	r4,r2
4110d31c:	180b883a 	mov	r5,r3
4110d320:	1108a9c0 	call	41108a9c <__muldf3>
4110d324:	01d00734 	movhi	r7,16412
4110d328:	000d883a 	mov	r6,zero
4110d32c:	1009883a 	mov	r4,r2
4110d330:	180b883a 	mov	r5,r3
4110d334:	11139100 	call	41113910 <__adddf3>
4110d338:	d9c00517 	ldw	r7,20(sp)
4110d33c:	047f3034 	movhi	r17,64704
4110d340:	1021883a 	mov	r16,r2
4110d344:	39ffffc4 	addi	r7,r7,-1
4110d348:	d9c01315 	stw	r7,76(sp)
4110d34c:	1c63883a 	add	r17,r3,r17
4110d350:	db000c17 	ldw	r12,48(sp)
4110d354:	003bea06 	br	4110c300 <__reset+0xbb0ec300>
4110d358:	dc000915 	stw	r16,36(sp)
4110d35c:	003e0e06 	br	4110cb98 <__reset+0xbb0ecb98>
4110d360:	01000e44 	movi	r4,57
4110d364:	8825883a 	mov	r18,r17
4110d368:	9dc00044 	addi	r23,r19,1
4110d36c:	99000005 	stb	r4,0(r19)
4110d370:	a023883a 	mov	r17,r20
4110d374:	dc000915 	stw	r16,36(sp)
4110d378:	003da406 	br	4110ca0c <__reset+0xbb0eca0c>
4110d37c:	d9801417 	ldw	r6,80(sp)
4110d380:	d9c01517 	ldw	r7,84(sp)
4110d384:	0009883a 	mov	r4,zero
4110d388:	014ff834 	movhi	r5,16352
4110d38c:	1114cfc0 	call	41114cfc <__subdf3>
4110d390:	880d883a 	mov	r6,r17
4110d394:	a00f883a 	mov	r7,r20
4110d398:	1009883a 	mov	r4,r2
4110d39c:	180b883a 	mov	r5,r3
4110d3a0:	1114b2c0 	call	41114b2c <__gedf2>
4110d3a4:	00bc7c0e 	bge	zero,r2,4110c598 <__reset+0xbb0ec598>
4110d3a8:	01000c04 	movi	r4,48
4110d3ac:	00000106 	br	4110d3b4 <_dtoa_r+0x1580>
4110d3b0:	102f883a 	mov	r23,r2
4110d3b4:	b8bfffc4 	addi	r2,r23,-1
4110d3b8:	10c00007 	ldb	r3,0(r2)
4110d3bc:	193ffc26 	beq	r3,r4,4110d3b0 <__reset+0xbb0ed3b0>
4110d3c0:	d9801317 	ldw	r6,76(sp)
4110d3c4:	d9800515 	stw	r6,20(sp)
4110d3c8:	003c4406 	br	4110c4dc <__reset+0xbb0ec4dc>
4110d3cc:	d9801317 	ldw	r6,76(sp)
4110d3d0:	d9800515 	stw	r6,20(sp)
4110d3d4:	003cea06 	br	4110c780 <__reset+0xbb0ec780>
4110d3d8:	dd800f17 	ldw	r22,60(sp)
4110d3dc:	dcc01017 	ldw	r19,64(sp)
4110d3e0:	dc801217 	ldw	r18,72(sp)
4110d3e4:	003c6c06 	br	4110c598 <__reset+0xbb0ec598>
4110d3e8:	903e031e 	bne	r18,zero,4110cbf8 <__reset+0xbb0ecbf8>
4110d3ec:	003ebb06 	br	4110cedc <__reset+0xbb0ecedc>
4110d3f0:	103e6c1e 	bne	r2,zero,4110cda4 <__reset+0xbb0ecda4>
4110d3f4:	4080004c 	andi	r2,r8,1
4110d3f8:	103e6a26 	beq	r2,zero,4110cda4 <__reset+0xbb0ecda4>
4110d3fc:	003e6606 	br	4110cd98 <__reset+0xbb0ecd98>
4110d400:	d8c00317 	ldw	r3,12(sp)
4110d404:	00800084 	movi	r2,2
4110d408:	10c02916 	blt	r2,r3,4110d4b0 <_dtoa_r+0x167c>
4110d40c:	d9000c17 	ldw	r4,48(sp)
4110d410:	003e8806 	br	4110ce34 <__reset+0xbb0ece34>
4110d414:	04000084 	movi	r16,2
4110d418:	003b9d06 	br	4110c290 <__reset+0xbb0ec290>
4110d41c:	d9001317 	ldw	r4,76(sp)
4110d420:	d9000515 	stw	r4,20(sp)
4110d424:	003cd606 	br	4110c780 <__reset+0xbb0ec780>
4110d428:	d8801317 	ldw	r2,76(sp)
4110d42c:	d8800515 	stw	r2,20(sp)
4110d430:	003c2a06 	br	4110c4dc <__reset+0xbb0ec4dc>
4110d434:	d9800317 	ldw	r6,12(sp)
4110d438:	00800084 	movi	r2,2
4110d43c:	11801516 	blt	r2,r6,4110d494 <_dtoa_r+0x1660>
4110d440:	d9c00c17 	ldw	r7,48(sp)
4110d444:	d9c00615 	stw	r7,24(sp)
4110d448:	003df706 	br	4110cc28 <__reset+0xbb0ecc28>
4110d44c:	193d3926 	beq	r3,r4,4110c934 <__reset+0xbb0ec934>
4110d450:	00c00f04 	movi	r3,60
4110d454:	1885c83a 	sub	r2,r3,r2
4110d458:	003ddf06 	br	4110cbd8 <__reset+0xbb0ecbd8>
4110d45c:	e009883a 	mov	r4,fp
4110d460:	e0001115 	stw	zero,68(fp)
4110d464:	000b883a 	mov	r5,zero
4110d468:	110f3880 	call	4110f388 <_Balloc>
4110d46c:	d8800715 	stw	r2,28(sp)
4110d470:	d8c00717 	ldw	r3,28(sp)
4110d474:	00bfffc4 	movi	r2,-1
4110d478:	01000044 	movi	r4,1
4110d47c:	d8800c15 	stw	r2,48(sp)
4110d480:	e0c01015 	stw	r3,64(fp)
4110d484:	d9000b15 	stw	r4,44(sp)
4110d488:	d8800615 	stw	r2,24(sp)
4110d48c:	d8002215 	stw	zero,136(sp)
4110d490:	003c4106 	br	4110c598 <__reset+0xbb0ec598>
4110d494:	d8c00c17 	ldw	r3,48(sp)
4110d498:	d8c00615 	stw	r3,24(sp)
4110d49c:	003e7006 	br	4110ce60 <__reset+0xbb0ece60>
4110d4a0:	04400044 	movi	r17,1
4110d4a4:	003b2006 	br	4110c128 <__reset+0xbb0ec128>
4110d4a8:	000b883a 	mov	r5,zero
4110d4ac:	003b3d06 	br	4110c1a4 <__reset+0xbb0ec1a4>
4110d4b0:	d8800c17 	ldw	r2,48(sp)
4110d4b4:	d8800615 	stw	r2,24(sp)
4110d4b8:	003e6906 	br	4110ce60 <__reset+0xbb0ece60>

4110d4bc <__sflush_r>:
4110d4bc:	2880030b 	ldhu	r2,12(r5)
4110d4c0:	defffb04 	addi	sp,sp,-20
4110d4c4:	dcc00315 	stw	r19,12(sp)
4110d4c8:	dc400115 	stw	r17,4(sp)
4110d4cc:	dfc00415 	stw	ra,16(sp)
4110d4d0:	dc800215 	stw	r18,8(sp)
4110d4d4:	dc000015 	stw	r16,0(sp)
4110d4d8:	10c0020c 	andi	r3,r2,8
4110d4dc:	2823883a 	mov	r17,r5
4110d4e0:	2027883a 	mov	r19,r4
4110d4e4:	1800311e 	bne	r3,zero,4110d5ac <__sflush_r+0xf0>
4110d4e8:	28c00117 	ldw	r3,4(r5)
4110d4ec:	10820014 	ori	r2,r2,2048
4110d4f0:	2880030d 	sth	r2,12(r5)
4110d4f4:	00c04b0e 	bge	zero,r3,4110d624 <__sflush_r+0x168>
4110d4f8:	8a000a17 	ldw	r8,40(r17)
4110d4fc:	40002326 	beq	r8,zero,4110d58c <__sflush_r+0xd0>
4110d500:	9c000017 	ldw	r16,0(r19)
4110d504:	10c4000c 	andi	r3,r2,4096
4110d508:	98000015 	stw	zero,0(r19)
4110d50c:	18004826 	beq	r3,zero,4110d630 <__sflush_r+0x174>
4110d510:	89801417 	ldw	r6,80(r17)
4110d514:	10c0010c 	andi	r3,r2,4
4110d518:	18000626 	beq	r3,zero,4110d534 <__sflush_r+0x78>
4110d51c:	88c00117 	ldw	r3,4(r17)
4110d520:	88800c17 	ldw	r2,48(r17)
4110d524:	30cdc83a 	sub	r6,r6,r3
4110d528:	10000226 	beq	r2,zero,4110d534 <__sflush_r+0x78>
4110d52c:	88800f17 	ldw	r2,60(r17)
4110d530:	308dc83a 	sub	r6,r6,r2
4110d534:	89400717 	ldw	r5,28(r17)
4110d538:	000f883a 	mov	r7,zero
4110d53c:	9809883a 	mov	r4,r19
4110d540:	403ee83a 	callr	r8
4110d544:	00ffffc4 	movi	r3,-1
4110d548:	10c04426 	beq	r2,r3,4110d65c <__sflush_r+0x1a0>
4110d54c:	88c0030b 	ldhu	r3,12(r17)
4110d550:	89000417 	ldw	r4,16(r17)
4110d554:	88000115 	stw	zero,4(r17)
4110d558:	197dffcc 	andi	r5,r3,63487
4110d55c:	8940030d 	sth	r5,12(r17)
4110d560:	89000015 	stw	r4,0(r17)
4110d564:	18c4000c 	andi	r3,r3,4096
4110d568:	18002c1e 	bne	r3,zero,4110d61c <__sflush_r+0x160>
4110d56c:	89400c17 	ldw	r5,48(r17)
4110d570:	9c000015 	stw	r16,0(r19)
4110d574:	28000526 	beq	r5,zero,4110d58c <__sflush_r+0xd0>
4110d578:	88801004 	addi	r2,r17,64
4110d57c:	28800226 	beq	r5,r2,4110d588 <__sflush_r+0xcc>
4110d580:	9809883a 	mov	r4,r19
4110d584:	110dc280 	call	4110dc28 <_free_r>
4110d588:	88000c15 	stw	zero,48(r17)
4110d58c:	0005883a 	mov	r2,zero
4110d590:	dfc00417 	ldw	ra,16(sp)
4110d594:	dcc00317 	ldw	r19,12(sp)
4110d598:	dc800217 	ldw	r18,8(sp)
4110d59c:	dc400117 	ldw	r17,4(sp)
4110d5a0:	dc000017 	ldw	r16,0(sp)
4110d5a4:	dec00504 	addi	sp,sp,20
4110d5a8:	f800283a 	ret
4110d5ac:	2c800417 	ldw	r18,16(r5)
4110d5b0:	903ff626 	beq	r18,zero,4110d58c <__reset+0xbb0ed58c>
4110d5b4:	2c000017 	ldw	r16,0(r5)
4110d5b8:	108000cc 	andi	r2,r2,3
4110d5bc:	2c800015 	stw	r18,0(r5)
4110d5c0:	84a1c83a 	sub	r16,r16,r18
4110d5c4:	1000131e 	bne	r2,zero,4110d614 <__sflush_r+0x158>
4110d5c8:	28800517 	ldw	r2,20(r5)
4110d5cc:	88800215 	stw	r2,8(r17)
4110d5d0:	04000316 	blt	zero,r16,4110d5e0 <__sflush_r+0x124>
4110d5d4:	003fed06 	br	4110d58c <__reset+0xbb0ed58c>
4110d5d8:	90a5883a 	add	r18,r18,r2
4110d5dc:	043feb0e 	bge	zero,r16,4110d58c <__reset+0xbb0ed58c>
4110d5e0:	88800917 	ldw	r2,36(r17)
4110d5e4:	89400717 	ldw	r5,28(r17)
4110d5e8:	800f883a 	mov	r7,r16
4110d5ec:	900d883a 	mov	r6,r18
4110d5f0:	9809883a 	mov	r4,r19
4110d5f4:	103ee83a 	callr	r2
4110d5f8:	80a1c83a 	sub	r16,r16,r2
4110d5fc:	00bff616 	blt	zero,r2,4110d5d8 <__reset+0xbb0ed5d8>
4110d600:	88c0030b 	ldhu	r3,12(r17)
4110d604:	00bfffc4 	movi	r2,-1
4110d608:	18c01014 	ori	r3,r3,64
4110d60c:	88c0030d 	sth	r3,12(r17)
4110d610:	003fdf06 	br	4110d590 <__reset+0xbb0ed590>
4110d614:	0005883a 	mov	r2,zero
4110d618:	003fec06 	br	4110d5cc <__reset+0xbb0ed5cc>
4110d61c:	88801415 	stw	r2,80(r17)
4110d620:	003fd206 	br	4110d56c <__reset+0xbb0ed56c>
4110d624:	28c00f17 	ldw	r3,60(r5)
4110d628:	00ffb316 	blt	zero,r3,4110d4f8 <__reset+0xbb0ed4f8>
4110d62c:	003fd706 	br	4110d58c <__reset+0xbb0ed58c>
4110d630:	89400717 	ldw	r5,28(r17)
4110d634:	000d883a 	mov	r6,zero
4110d638:	01c00044 	movi	r7,1
4110d63c:	9809883a 	mov	r4,r19
4110d640:	403ee83a 	callr	r8
4110d644:	100d883a 	mov	r6,r2
4110d648:	00bfffc4 	movi	r2,-1
4110d64c:	30801426 	beq	r6,r2,4110d6a0 <__sflush_r+0x1e4>
4110d650:	8880030b 	ldhu	r2,12(r17)
4110d654:	8a000a17 	ldw	r8,40(r17)
4110d658:	003fae06 	br	4110d514 <__reset+0xbb0ed514>
4110d65c:	98c00017 	ldw	r3,0(r19)
4110d660:	183fba26 	beq	r3,zero,4110d54c <__reset+0xbb0ed54c>
4110d664:	01000744 	movi	r4,29
4110d668:	19000626 	beq	r3,r4,4110d684 <__sflush_r+0x1c8>
4110d66c:	01000584 	movi	r4,22
4110d670:	19000426 	beq	r3,r4,4110d684 <__sflush_r+0x1c8>
4110d674:	88c0030b 	ldhu	r3,12(r17)
4110d678:	18c01014 	ori	r3,r3,64
4110d67c:	88c0030d 	sth	r3,12(r17)
4110d680:	003fc306 	br	4110d590 <__reset+0xbb0ed590>
4110d684:	8880030b 	ldhu	r2,12(r17)
4110d688:	88c00417 	ldw	r3,16(r17)
4110d68c:	88000115 	stw	zero,4(r17)
4110d690:	10bdffcc 	andi	r2,r2,63487
4110d694:	8880030d 	sth	r2,12(r17)
4110d698:	88c00015 	stw	r3,0(r17)
4110d69c:	003fb306 	br	4110d56c <__reset+0xbb0ed56c>
4110d6a0:	98800017 	ldw	r2,0(r19)
4110d6a4:	103fea26 	beq	r2,zero,4110d650 <__reset+0xbb0ed650>
4110d6a8:	00c00744 	movi	r3,29
4110d6ac:	10c00226 	beq	r2,r3,4110d6b8 <__sflush_r+0x1fc>
4110d6b0:	00c00584 	movi	r3,22
4110d6b4:	10c0031e 	bne	r2,r3,4110d6c4 <__sflush_r+0x208>
4110d6b8:	9c000015 	stw	r16,0(r19)
4110d6bc:	0005883a 	mov	r2,zero
4110d6c0:	003fb306 	br	4110d590 <__reset+0xbb0ed590>
4110d6c4:	88c0030b 	ldhu	r3,12(r17)
4110d6c8:	3005883a 	mov	r2,r6
4110d6cc:	18c01014 	ori	r3,r3,64
4110d6d0:	88c0030d 	sth	r3,12(r17)
4110d6d4:	003fae06 	br	4110d590 <__reset+0xbb0ed590>

4110d6d8 <_fflush_r>:
4110d6d8:	defffd04 	addi	sp,sp,-12
4110d6dc:	dc000115 	stw	r16,4(sp)
4110d6e0:	dfc00215 	stw	ra,8(sp)
4110d6e4:	2021883a 	mov	r16,r4
4110d6e8:	20000226 	beq	r4,zero,4110d6f4 <_fflush_r+0x1c>
4110d6ec:	20800e17 	ldw	r2,56(r4)
4110d6f0:	10000c26 	beq	r2,zero,4110d724 <_fflush_r+0x4c>
4110d6f4:	2880030f 	ldh	r2,12(r5)
4110d6f8:	1000051e 	bne	r2,zero,4110d710 <_fflush_r+0x38>
4110d6fc:	0005883a 	mov	r2,zero
4110d700:	dfc00217 	ldw	ra,8(sp)
4110d704:	dc000117 	ldw	r16,4(sp)
4110d708:	dec00304 	addi	sp,sp,12
4110d70c:	f800283a 	ret
4110d710:	8009883a 	mov	r4,r16
4110d714:	dfc00217 	ldw	ra,8(sp)
4110d718:	dc000117 	ldw	r16,4(sp)
4110d71c:	dec00304 	addi	sp,sp,12
4110d720:	110d4bc1 	jmpi	4110d4bc <__sflush_r>
4110d724:	d9400015 	stw	r5,0(sp)
4110d728:	110dab40 	call	4110dab4 <__sinit>
4110d72c:	d9400017 	ldw	r5,0(sp)
4110d730:	003ff006 	br	4110d6f4 <__reset+0xbb0ed6f4>

4110d734 <fflush>:
4110d734:	20000526 	beq	r4,zero,4110d74c <fflush+0x18>
4110d738:	009044b4 	movhi	r2,16658
4110d73c:	10b76e04 	addi	r2,r2,-8776
4110d740:	200b883a 	mov	r5,r4
4110d744:	11000017 	ldw	r4,0(r2)
4110d748:	110d6d81 	jmpi	4110d6d8 <_fflush_r>
4110d74c:	009044b4 	movhi	r2,16658
4110d750:	10b76d04 	addi	r2,r2,-8780
4110d754:	11000017 	ldw	r4,0(r2)
4110d758:	01504474 	movhi	r5,16657
4110d75c:	2975b604 	addi	r5,r5,-10536
4110d760:	110e4b81 	jmpi	4110e4b8 <_fwalk_reent>

4110d764 <__fp_unlock>:
4110d764:	0005883a 	mov	r2,zero
4110d768:	f800283a 	ret

4110d76c <_cleanup_r>:
4110d76c:	01504474 	movhi	r5,16657
4110d770:	29499204 	addi	r5,r5,9800
4110d774:	110e4b81 	jmpi	4110e4b8 <_fwalk_reent>

4110d778 <__sinit.part.1>:
4110d778:	defff704 	addi	sp,sp,-36
4110d77c:	00d04474 	movhi	r3,16657
4110d780:	dfc00815 	stw	ra,32(sp)
4110d784:	ddc00715 	stw	r23,28(sp)
4110d788:	dd800615 	stw	r22,24(sp)
4110d78c:	dd400515 	stw	r21,20(sp)
4110d790:	dd000415 	stw	r20,16(sp)
4110d794:	dcc00315 	stw	r19,12(sp)
4110d798:	dc800215 	stw	r18,8(sp)
4110d79c:	dc400115 	stw	r17,4(sp)
4110d7a0:	dc000015 	stw	r16,0(sp)
4110d7a4:	18f5db04 	addi	r3,r3,-10388
4110d7a8:	24000117 	ldw	r16,4(r4)
4110d7ac:	20c00f15 	stw	r3,60(r4)
4110d7b0:	2080bb04 	addi	r2,r4,748
4110d7b4:	00c000c4 	movi	r3,3
4110d7b8:	20c0b915 	stw	r3,740(r4)
4110d7bc:	2080ba15 	stw	r2,744(r4)
4110d7c0:	2000b815 	stw	zero,736(r4)
4110d7c4:	05c00204 	movi	r23,8
4110d7c8:	00800104 	movi	r2,4
4110d7cc:	2025883a 	mov	r18,r4
4110d7d0:	b80d883a 	mov	r6,r23
4110d7d4:	81001704 	addi	r4,r16,92
4110d7d8:	000b883a 	mov	r5,zero
4110d7dc:	80000015 	stw	zero,0(r16)
4110d7e0:	80000115 	stw	zero,4(r16)
4110d7e4:	80000215 	stw	zero,8(r16)
4110d7e8:	8080030d 	sth	r2,12(r16)
4110d7ec:	80001915 	stw	zero,100(r16)
4110d7f0:	8000038d 	sth	zero,14(r16)
4110d7f4:	80000415 	stw	zero,16(r16)
4110d7f8:	80000515 	stw	zero,20(r16)
4110d7fc:	80000615 	stw	zero,24(r16)
4110d800:	110f2600 	call	4110f260 <memset>
4110d804:	05904474 	movhi	r22,16657
4110d808:	94400217 	ldw	r17,8(r18)
4110d80c:	05504474 	movhi	r21,16657
4110d810:	05104474 	movhi	r20,16657
4110d814:	04d04474 	movhi	r19,16657
4110d818:	b582c604 	addi	r22,r22,2840
4110d81c:	ad42dd04 	addi	r21,r21,2932
4110d820:	a502fc04 	addi	r20,r20,3056
4110d824:	9cc31304 	addi	r19,r19,3148
4110d828:	85800815 	stw	r22,32(r16)
4110d82c:	85400915 	stw	r21,36(r16)
4110d830:	85000a15 	stw	r20,40(r16)
4110d834:	84c00b15 	stw	r19,44(r16)
4110d838:	84000715 	stw	r16,28(r16)
4110d83c:	00800284 	movi	r2,10
4110d840:	8880030d 	sth	r2,12(r17)
4110d844:	00800044 	movi	r2,1
4110d848:	b80d883a 	mov	r6,r23
4110d84c:	89001704 	addi	r4,r17,92
4110d850:	000b883a 	mov	r5,zero
4110d854:	88000015 	stw	zero,0(r17)
4110d858:	88000115 	stw	zero,4(r17)
4110d85c:	88000215 	stw	zero,8(r17)
4110d860:	88001915 	stw	zero,100(r17)
4110d864:	8880038d 	sth	r2,14(r17)
4110d868:	88000415 	stw	zero,16(r17)
4110d86c:	88000515 	stw	zero,20(r17)
4110d870:	88000615 	stw	zero,24(r17)
4110d874:	110f2600 	call	4110f260 <memset>
4110d878:	94000317 	ldw	r16,12(r18)
4110d87c:	00800484 	movi	r2,18
4110d880:	8c400715 	stw	r17,28(r17)
4110d884:	8d800815 	stw	r22,32(r17)
4110d888:	8d400915 	stw	r21,36(r17)
4110d88c:	8d000a15 	stw	r20,40(r17)
4110d890:	8cc00b15 	stw	r19,44(r17)
4110d894:	8080030d 	sth	r2,12(r16)
4110d898:	00800084 	movi	r2,2
4110d89c:	80000015 	stw	zero,0(r16)
4110d8a0:	80000115 	stw	zero,4(r16)
4110d8a4:	80000215 	stw	zero,8(r16)
4110d8a8:	80001915 	stw	zero,100(r16)
4110d8ac:	8080038d 	sth	r2,14(r16)
4110d8b0:	80000415 	stw	zero,16(r16)
4110d8b4:	80000515 	stw	zero,20(r16)
4110d8b8:	80000615 	stw	zero,24(r16)
4110d8bc:	b80d883a 	mov	r6,r23
4110d8c0:	000b883a 	mov	r5,zero
4110d8c4:	81001704 	addi	r4,r16,92
4110d8c8:	110f2600 	call	4110f260 <memset>
4110d8cc:	00800044 	movi	r2,1
4110d8d0:	84000715 	stw	r16,28(r16)
4110d8d4:	85800815 	stw	r22,32(r16)
4110d8d8:	85400915 	stw	r21,36(r16)
4110d8dc:	85000a15 	stw	r20,40(r16)
4110d8e0:	84c00b15 	stw	r19,44(r16)
4110d8e4:	90800e15 	stw	r2,56(r18)
4110d8e8:	dfc00817 	ldw	ra,32(sp)
4110d8ec:	ddc00717 	ldw	r23,28(sp)
4110d8f0:	dd800617 	ldw	r22,24(sp)
4110d8f4:	dd400517 	ldw	r21,20(sp)
4110d8f8:	dd000417 	ldw	r20,16(sp)
4110d8fc:	dcc00317 	ldw	r19,12(sp)
4110d900:	dc800217 	ldw	r18,8(sp)
4110d904:	dc400117 	ldw	r17,4(sp)
4110d908:	dc000017 	ldw	r16,0(sp)
4110d90c:	dec00904 	addi	sp,sp,36
4110d910:	f800283a 	ret

4110d914 <__fp_lock>:
4110d914:	0005883a 	mov	r2,zero
4110d918:	f800283a 	ret

4110d91c <__sfmoreglue>:
4110d91c:	defffc04 	addi	sp,sp,-16
4110d920:	dc400115 	stw	r17,4(sp)
4110d924:	2c7fffc4 	addi	r17,r5,-1
4110d928:	8c401a24 	muli	r17,r17,104
4110d92c:	dc800215 	stw	r18,8(sp)
4110d930:	2825883a 	mov	r18,r5
4110d934:	89401d04 	addi	r5,r17,116
4110d938:	dc000015 	stw	r16,0(sp)
4110d93c:	dfc00315 	stw	ra,12(sp)
4110d940:	110e8140 	call	4110e814 <_malloc_r>
4110d944:	1021883a 	mov	r16,r2
4110d948:	10000726 	beq	r2,zero,4110d968 <__sfmoreglue+0x4c>
4110d94c:	11000304 	addi	r4,r2,12
4110d950:	10000015 	stw	zero,0(r2)
4110d954:	14800115 	stw	r18,4(r2)
4110d958:	11000215 	stw	r4,8(r2)
4110d95c:	89801a04 	addi	r6,r17,104
4110d960:	000b883a 	mov	r5,zero
4110d964:	110f2600 	call	4110f260 <memset>
4110d968:	8005883a 	mov	r2,r16
4110d96c:	dfc00317 	ldw	ra,12(sp)
4110d970:	dc800217 	ldw	r18,8(sp)
4110d974:	dc400117 	ldw	r17,4(sp)
4110d978:	dc000017 	ldw	r16,0(sp)
4110d97c:	dec00404 	addi	sp,sp,16
4110d980:	f800283a 	ret

4110d984 <__sfp>:
4110d984:	defffb04 	addi	sp,sp,-20
4110d988:	dc000015 	stw	r16,0(sp)
4110d98c:	041044b4 	movhi	r16,16658
4110d990:	84376d04 	addi	r16,r16,-8780
4110d994:	dcc00315 	stw	r19,12(sp)
4110d998:	2027883a 	mov	r19,r4
4110d99c:	81000017 	ldw	r4,0(r16)
4110d9a0:	dfc00415 	stw	ra,16(sp)
4110d9a4:	dc800215 	stw	r18,8(sp)
4110d9a8:	20800e17 	ldw	r2,56(r4)
4110d9ac:	dc400115 	stw	r17,4(sp)
4110d9b0:	1000021e 	bne	r2,zero,4110d9bc <__sfp+0x38>
4110d9b4:	110d7780 	call	4110d778 <__sinit.part.1>
4110d9b8:	81000017 	ldw	r4,0(r16)
4110d9bc:	2480b804 	addi	r18,r4,736
4110d9c0:	047fffc4 	movi	r17,-1
4110d9c4:	91000117 	ldw	r4,4(r18)
4110d9c8:	94000217 	ldw	r16,8(r18)
4110d9cc:	213fffc4 	addi	r4,r4,-1
4110d9d0:	20000a16 	blt	r4,zero,4110d9fc <__sfp+0x78>
4110d9d4:	8080030f 	ldh	r2,12(r16)
4110d9d8:	10000c26 	beq	r2,zero,4110da0c <__sfp+0x88>
4110d9dc:	80c01d04 	addi	r3,r16,116
4110d9e0:	00000206 	br	4110d9ec <__sfp+0x68>
4110d9e4:	18bfe60f 	ldh	r2,-104(r3)
4110d9e8:	10000826 	beq	r2,zero,4110da0c <__sfp+0x88>
4110d9ec:	213fffc4 	addi	r4,r4,-1
4110d9f0:	1c3ffd04 	addi	r16,r3,-12
4110d9f4:	18c01a04 	addi	r3,r3,104
4110d9f8:	247ffa1e 	bne	r4,r17,4110d9e4 <__reset+0xbb0ed9e4>
4110d9fc:	90800017 	ldw	r2,0(r18)
4110da00:	10001d26 	beq	r2,zero,4110da78 <__sfp+0xf4>
4110da04:	1025883a 	mov	r18,r2
4110da08:	003fee06 	br	4110d9c4 <__reset+0xbb0ed9c4>
4110da0c:	00bfffc4 	movi	r2,-1
4110da10:	8080038d 	sth	r2,14(r16)
4110da14:	00800044 	movi	r2,1
4110da18:	8080030d 	sth	r2,12(r16)
4110da1c:	80001915 	stw	zero,100(r16)
4110da20:	80000015 	stw	zero,0(r16)
4110da24:	80000215 	stw	zero,8(r16)
4110da28:	80000115 	stw	zero,4(r16)
4110da2c:	80000415 	stw	zero,16(r16)
4110da30:	80000515 	stw	zero,20(r16)
4110da34:	80000615 	stw	zero,24(r16)
4110da38:	01800204 	movi	r6,8
4110da3c:	000b883a 	mov	r5,zero
4110da40:	81001704 	addi	r4,r16,92
4110da44:	110f2600 	call	4110f260 <memset>
4110da48:	8005883a 	mov	r2,r16
4110da4c:	80000c15 	stw	zero,48(r16)
4110da50:	80000d15 	stw	zero,52(r16)
4110da54:	80001115 	stw	zero,68(r16)
4110da58:	80001215 	stw	zero,72(r16)
4110da5c:	dfc00417 	ldw	ra,16(sp)
4110da60:	dcc00317 	ldw	r19,12(sp)
4110da64:	dc800217 	ldw	r18,8(sp)
4110da68:	dc400117 	ldw	r17,4(sp)
4110da6c:	dc000017 	ldw	r16,0(sp)
4110da70:	dec00504 	addi	sp,sp,20
4110da74:	f800283a 	ret
4110da78:	01400104 	movi	r5,4
4110da7c:	9809883a 	mov	r4,r19
4110da80:	110d91c0 	call	4110d91c <__sfmoreglue>
4110da84:	90800015 	stw	r2,0(r18)
4110da88:	103fde1e 	bne	r2,zero,4110da04 <__reset+0xbb0eda04>
4110da8c:	00800304 	movi	r2,12
4110da90:	98800015 	stw	r2,0(r19)
4110da94:	0005883a 	mov	r2,zero
4110da98:	003ff006 	br	4110da5c <__reset+0xbb0eda5c>

4110da9c <_cleanup>:
4110da9c:	009044b4 	movhi	r2,16658
4110daa0:	10b76d04 	addi	r2,r2,-8780
4110daa4:	11000017 	ldw	r4,0(r2)
4110daa8:	01504474 	movhi	r5,16657
4110daac:	29499204 	addi	r5,r5,9800
4110dab0:	110e4b81 	jmpi	4110e4b8 <_fwalk_reent>

4110dab4 <__sinit>:
4110dab4:	20800e17 	ldw	r2,56(r4)
4110dab8:	10000126 	beq	r2,zero,4110dac0 <__sinit+0xc>
4110dabc:	f800283a 	ret
4110dac0:	110d7781 	jmpi	4110d778 <__sinit.part.1>

4110dac4 <__sfp_lock_acquire>:
4110dac4:	f800283a 	ret

4110dac8 <__sfp_lock_release>:
4110dac8:	f800283a 	ret

4110dacc <__sinit_lock_acquire>:
4110dacc:	f800283a 	ret

4110dad0 <__sinit_lock_release>:
4110dad0:	f800283a 	ret

4110dad4 <__fp_lock_all>:
4110dad4:	009044b4 	movhi	r2,16658
4110dad8:	10b76e04 	addi	r2,r2,-8776
4110dadc:	11000017 	ldw	r4,0(r2)
4110dae0:	01504474 	movhi	r5,16657
4110dae4:	29764504 	addi	r5,r5,-9964
4110dae8:	110e3f41 	jmpi	4110e3f4 <_fwalk>

4110daec <__fp_unlock_all>:
4110daec:	009044b4 	movhi	r2,16658
4110daf0:	10b76e04 	addi	r2,r2,-8776
4110daf4:	11000017 	ldw	r4,0(r2)
4110daf8:	01504474 	movhi	r5,16657
4110dafc:	2975d904 	addi	r5,r5,-10396
4110db00:	110e3f41 	jmpi	4110e3f4 <_fwalk>

4110db04 <_malloc_trim_r>:
4110db04:	defffb04 	addi	sp,sp,-20
4110db08:	dcc00315 	stw	r19,12(sp)
4110db0c:	04d044b4 	movhi	r19,16658
4110db10:	dc800215 	stw	r18,8(sp)
4110db14:	dc400115 	stw	r17,4(sp)
4110db18:	dc000015 	stw	r16,0(sp)
4110db1c:	dfc00415 	stw	ra,16(sp)
4110db20:	2821883a 	mov	r16,r5
4110db24:	9cf17404 	addi	r19,r19,-14896
4110db28:	2025883a 	mov	r18,r4
4110db2c:	1115e2c0 	call	41115e2c <__malloc_lock>
4110db30:	98800217 	ldw	r2,8(r19)
4110db34:	14400117 	ldw	r17,4(r2)
4110db38:	00bfff04 	movi	r2,-4
4110db3c:	88a2703a 	and	r17,r17,r2
4110db40:	8c21c83a 	sub	r16,r17,r16
4110db44:	8403fbc4 	addi	r16,r16,4079
4110db48:	8020d33a 	srli	r16,r16,12
4110db4c:	0083ffc4 	movi	r2,4095
4110db50:	843fffc4 	addi	r16,r16,-1
4110db54:	8020933a 	slli	r16,r16,12
4110db58:	1400060e 	bge	r2,r16,4110db74 <_malloc_trim_r+0x70>
4110db5c:	000b883a 	mov	r5,zero
4110db60:	9009883a 	mov	r4,r18
4110db64:	1110ac40 	call	41110ac4 <_sbrk_r>
4110db68:	98c00217 	ldw	r3,8(r19)
4110db6c:	1c47883a 	add	r3,r3,r17
4110db70:	10c00a26 	beq	r2,r3,4110db9c <_malloc_trim_r+0x98>
4110db74:	9009883a 	mov	r4,r18
4110db78:	1115e500 	call	41115e50 <__malloc_unlock>
4110db7c:	0005883a 	mov	r2,zero
4110db80:	dfc00417 	ldw	ra,16(sp)
4110db84:	dcc00317 	ldw	r19,12(sp)
4110db88:	dc800217 	ldw	r18,8(sp)
4110db8c:	dc400117 	ldw	r17,4(sp)
4110db90:	dc000017 	ldw	r16,0(sp)
4110db94:	dec00504 	addi	sp,sp,20
4110db98:	f800283a 	ret
4110db9c:	040bc83a 	sub	r5,zero,r16
4110dba0:	9009883a 	mov	r4,r18
4110dba4:	1110ac40 	call	41110ac4 <_sbrk_r>
4110dba8:	00ffffc4 	movi	r3,-1
4110dbac:	10c00d26 	beq	r2,r3,4110dbe4 <_malloc_trim_r+0xe0>
4110dbb0:	00d044b4 	movhi	r3,16658
4110dbb4:	18f7a404 	addi	r3,r3,-8560
4110dbb8:	18800017 	ldw	r2,0(r3)
4110dbbc:	99000217 	ldw	r4,8(r19)
4110dbc0:	8c23c83a 	sub	r17,r17,r16
4110dbc4:	8c400054 	ori	r17,r17,1
4110dbc8:	1421c83a 	sub	r16,r2,r16
4110dbcc:	24400115 	stw	r17,4(r4)
4110dbd0:	9009883a 	mov	r4,r18
4110dbd4:	1c000015 	stw	r16,0(r3)
4110dbd8:	1115e500 	call	41115e50 <__malloc_unlock>
4110dbdc:	00800044 	movi	r2,1
4110dbe0:	003fe706 	br	4110db80 <__reset+0xbb0edb80>
4110dbe4:	000b883a 	mov	r5,zero
4110dbe8:	9009883a 	mov	r4,r18
4110dbec:	1110ac40 	call	41110ac4 <_sbrk_r>
4110dbf0:	99000217 	ldw	r4,8(r19)
4110dbf4:	014003c4 	movi	r5,15
4110dbf8:	1107c83a 	sub	r3,r2,r4
4110dbfc:	28ffdd0e 	bge	r5,r3,4110db74 <__reset+0xbb0edb74>
4110dc00:	015044b4 	movhi	r5,16658
4110dc04:	29777004 	addi	r5,r5,-8768
4110dc08:	29400017 	ldw	r5,0(r5)
4110dc0c:	18c00054 	ori	r3,r3,1
4110dc10:	20c00115 	stw	r3,4(r4)
4110dc14:	00d044b4 	movhi	r3,16658
4110dc18:	1145c83a 	sub	r2,r2,r5
4110dc1c:	18f7a404 	addi	r3,r3,-8560
4110dc20:	18800015 	stw	r2,0(r3)
4110dc24:	003fd306 	br	4110db74 <__reset+0xbb0edb74>

4110dc28 <_free_r>:
4110dc28:	28004126 	beq	r5,zero,4110dd30 <_free_r+0x108>
4110dc2c:	defffd04 	addi	sp,sp,-12
4110dc30:	dc400115 	stw	r17,4(sp)
4110dc34:	dc000015 	stw	r16,0(sp)
4110dc38:	2023883a 	mov	r17,r4
4110dc3c:	2821883a 	mov	r16,r5
4110dc40:	dfc00215 	stw	ra,8(sp)
4110dc44:	1115e2c0 	call	41115e2c <__malloc_lock>
4110dc48:	81ffff17 	ldw	r7,-4(r16)
4110dc4c:	00bfff84 	movi	r2,-2
4110dc50:	011044b4 	movhi	r4,16658
4110dc54:	81bffe04 	addi	r6,r16,-8
4110dc58:	3884703a 	and	r2,r7,r2
4110dc5c:	21317404 	addi	r4,r4,-14896
4110dc60:	308b883a 	add	r5,r6,r2
4110dc64:	2a400117 	ldw	r9,4(r5)
4110dc68:	22000217 	ldw	r8,8(r4)
4110dc6c:	00ffff04 	movi	r3,-4
4110dc70:	48c6703a 	and	r3,r9,r3
4110dc74:	2a005726 	beq	r5,r8,4110ddd4 <_free_r+0x1ac>
4110dc78:	28c00115 	stw	r3,4(r5)
4110dc7c:	39c0004c 	andi	r7,r7,1
4110dc80:	3800091e 	bne	r7,zero,4110dca8 <_free_r+0x80>
4110dc84:	823ffe17 	ldw	r8,-8(r16)
4110dc88:	22400204 	addi	r9,r4,8
4110dc8c:	320dc83a 	sub	r6,r6,r8
4110dc90:	31c00217 	ldw	r7,8(r6)
4110dc94:	1205883a 	add	r2,r2,r8
4110dc98:	3a406526 	beq	r7,r9,4110de30 <_free_r+0x208>
4110dc9c:	32000317 	ldw	r8,12(r6)
4110dca0:	3a000315 	stw	r8,12(r7)
4110dca4:	41c00215 	stw	r7,8(r8)
4110dca8:	28cf883a 	add	r7,r5,r3
4110dcac:	39c00117 	ldw	r7,4(r7)
4110dcb0:	39c0004c 	andi	r7,r7,1
4110dcb4:	38003a26 	beq	r7,zero,4110dda0 <_free_r+0x178>
4110dcb8:	10c00054 	ori	r3,r2,1
4110dcbc:	30c00115 	stw	r3,4(r6)
4110dcc0:	3087883a 	add	r3,r6,r2
4110dcc4:	18800015 	stw	r2,0(r3)
4110dcc8:	00c07fc4 	movi	r3,511
4110dccc:	18801936 	bltu	r3,r2,4110dd34 <_free_r+0x10c>
4110dcd0:	1004d0fa 	srli	r2,r2,3
4110dcd4:	01c00044 	movi	r7,1
4110dcd8:	21400117 	ldw	r5,4(r4)
4110dcdc:	10c00044 	addi	r3,r2,1
4110dce0:	18c7883a 	add	r3,r3,r3
4110dce4:	1005d0ba 	srai	r2,r2,2
4110dce8:	18c7883a 	add	r3,r3,r3
4110dcec:	18c7883a 	add	r3,r3,r3
4110dcf0:	1907883a 	add	r3,r3,r4
4110dcf4:	3884983a 	sll	r2,r7,r2
4110dcf8:	19c00017 	ldw	r7,0(r3)
4110dcfc:	1a3ffe04 	addi	r8,r3,-8
4110dd00:	1144b03a 	or	r2,r2,r5
4110dd04:	32000315 	stw	r8,12(r6)
4110dd08:	31c00215 	stw	r7,8(r6)
4110dd0c:	20800115 	stw	r2,4(r4)
4110dd10:	19800015 	stw	r6,0(r3)
4110dd14:	39800315 	stw	r6,12(r7)
4110dd18:	8809883a 	mov	r4,r17
4110dd1c:	dfc00217 	ldw	ra,8(sp)
4110dd20:	dc400117 	ldw	r17,4(sp)
4110dd24:	dc000017 	ldw	r16,0(sp)
4110dd28:	dec00304 	addi	sp,sp,12
4110dd2c:	1115e501 	jmpi	41115e50 <__malloc_unlock>
4110dd30:	f800283a 	ret
4110dd34:	100ad27a 	srli	r5,r2,9
4110dd38:	00c00104 	movi	r3,4
4110dd3c:	19404a36 	bltu	r3,r5,4110de68 <_free_r+0x240>
4110dd40:	100ad1ba 	srli	r5,r2,6
4110dd44:	28c00e44 	addi	r3,r5,57
4110dd48:	18c7883a 	add	r3,r3,r3
4110dd4c:	29400e04 	addi	r5,r5,56
4110dd50:	18c7883a 	add	r3,r3,r3
4110dd54:	18c7883a 	add	r3,r3,r3
4110dd58:	1909883a 	add	r4,r3,r4
4110dd5c:	20c00017 	ldw	r3,0(r4)
4110dd60:	01d044b4 	movhi	r7,16658
4110dd64:	213ffe04 	addi	r4,r4,-8
4110dd68:	39f17404 	addi	r7,r7,-14896
4110dd6c:	20c04426 	beq	r4,r3,4110de80 <_free_r+0x258>
4110dd70:	01ffff04 	movi	r7,-4
4110dd74:	19400117 	ldw	r5,4(r3)
4110dd78:	29ca703a 	and	r5,r5,r7
4110dd7c:	1140022e 	bgeu	r2,r5,4110dd88 <_free_r+0x160>
4110dd80:	18c00217 	ldw	r3,8(r3)
4110dd84:	20fffb1e 	bne	r4,r3,4110dd74 <__reset+0xbb0edd74>
4110dd88:	19000317 	ldw	r4,12(r3)
4110dd8c:	31000315 	stw	r4,12(r6)
4110dd90:	30c00215 	stw	r3,8(r6)
4110dd94:	21800215 	stw	r6,8(r4)
4110dd98:	19800315 	stw	r6,12(r3)
4110dd9c:	003fde06 	br	4110dd18 <__reset+0xbb0edd18>
4110dda0:	29c00217 	ldw	r7,8(r5)
4110dda4:	10c5883a 	add	r2,r2,r3
4110dda8:	00d044b4 	movhi	r3,16658
4110ddac:	18f17604 	addi	r3,r3,-14888
4110ddb0:	38c03b26 	beq	r7,r3,4110dea0 <_free_r+0x278>
4110ddb4:	2a000317 	ldw	r8,12(r5)
4110ddb8:	11400054 	ori	r5,r2,1
4110ddbc:	3087883a 	add	r3,r6,r2
4110ddc0:	3a000315 	stw	r8,12(r7)
4110ddc4:	41c00215 	stw	r7,8(r8)
4110ddc8:	31400115 	stw	r5,4(r6)
4110ddcc:	18800015 	stw	r2,0(r3)
4110ddd0:	003fbd06 	br	4110dcc8 <__reset+0xbb0edcc8>
4110ddd4:	39c0004c 	andi	r7,r7,1
4110ddd8:	10c5883a 	add	r2,r2,r3
4110dddc:	3800071e 	bne	r7,zero,4110ddfc <_free_r+0x1d4>
4110dde0:	81fffe17 	ldw	r7,-8(r16)
4110dde4:	31cdc83a 	sub	r6,r6,r7
4110dde8:	30c00317 	ldw	r3,12(r6)
4110ddec:	31400217 	ldw	r5,8(r6)
4110ddf0:	11c5883a 	add	r2,r2,r7
4110ddf4:	28c00315 	stw	r3,12(r5)
4110ddf8:	19400215 	stw	r5,8(r3)
4110ddfc:	10c00054 	ori	r3,r2,1
4110de00:	30c00115 	stw	r3,4(r6)
4110de04:	00d044b4 	movhi	r3,16658
4110de08:	18f77104 	addi	r3,r3,-8764
4110de0c:	18c00017 	ldw	r3,0(r3)
4110de10:	21800215 	stw	r6,8(r4)
4110de14:	10ffc036 	bltu	r2,r3,4110dd18 <__reset+0xbb0edd18>
4110de18:	009044b4 	movhi	r2,16658
4110de1c:	10b79b04 	addi	r2,r2,-8596
4110de20:	11400017 	ldw	r5,0(r2)
4110de24:	8809883a 	mov	r4,r17
4110de28:	110db040 	call	4110db04 <_malloc_trim_r>
4110de2c:	003fba06 	br	4110dd18 <__reset+0xbb0edd18>
4110de30:	28c9883a 	add	r4,r5,r3
4110de34:	21000117 	ldw	r4,4(r4)
4110de38:	2100004c 	andi	r4,r4,1
4110de3c:	2000391e 	bne	r4,zero,4110df24 <_free_r+0x2fc>
4110de40:	29c00217 	ldw	r7,8(r5)
4110de44:	29000317 	ldw	r4,12(r5)
4110de48:	1885883a 	add	r2,r3,r2
4110de4c:	10c00054 	ori	r3,r2,1
4110de50:	39000315 	stw	r4,12(r7)
4110de54:	21c00215 	stw	r7,8(r4)
4110de58:	30c00115 	stw	r3,4(r6)
4110de5c:	308d883a 	add	r6,r6,r2
4110de60:	30800015 	stw	r2,0(r6)
4110de64:	003fac06 	br	4110dd18 <__reset+0xbb0edd18>
4110de68:	00c00504 	movi	r3,20
4110de6c:	19401536 	bltu	r3,r5,4110dec4 <_free_r+0x29c>
4110de70:	28c01704 	addi	r3,r5,92
4110de74:	18c7883a 	add	r3,r3,r3
4110de78:	294016c4 	addi	r5,r5,91
4110de7c:	003fb406 	br	4110dd50 <__reset+0xbb0edd50>
4110de80:	280bd0ba 	srai	r5,r5,2
4110de84:	00c00044 	movi	r3,1
4110de88:	38800117 	ldw	r2,4(r7)
4110de8c:	194a983a 	sll	r5,r3,r5
4110de90:	2007883a 	mov	r3,r4
4110de94:	2884b03a 	or	r2,r5,r2
4110de98:	38800115 	stw	r2,4(r7)
4110de9c:	003fbb06 	br	4110dd8c <__reset+0xbb0edd8c>
4110dea0:	21800515 	stw	r6,20(r4)
4110dea4:	21800415 	stw	r6,16(r4)
4110dea8:	10c00054 	ori	r3,r2,1
4110deac:	31c00315 	stw	r7,12(r6)
4110deb0:	31c00215 	stw	r7,8(r6)
4110deb4:	30c00115 	stw	r3,4(r6)
4110deb8:	308d883a 	add	r6,r6,r2
4110debc:	30800015 	stw	r2,0(r6)
4110dec0:	003f9506 	br	4110dd18 <__reset+0xbb0edd18>
4110dec4:	00c01504 	movi	r3,84
4110dec8:	19400536 	bltu	r3,r5,4110dee0 <_free_r+0x2b8>
4110decc:	100ad33a 	srli	r5,r2,12
4110ded0:	28c01bc4 	addi	r3,r5,111
4110ded4:	18c7883a 	add	r3,r3,r3
4110ded8:	29401b84 	addi	r5,r5,110
4110dedc:	003f9c06 	br	4110dd50 <__reset+0xbb0edd50>
4110dee0:	00c05504 	movi	r3,340
4110dee4:	19400536 	bltu	r3,r5,4110defc <_free_r+0x2d4>
4110dee8:	100ad3fa 	srli	r5,r2,15
4110deec:	28c01e04 	addi	r3,r5,120
4110def0:	18c7883a 	add	r3,r3,r3
4110def4:	29401dc4 	addi	r5,r5,119
4110def8:	003f9506 	br	4110dd50 <__reset+0xbb0edd50>
4110defc:	00c15504 	movi	r3,1364
4110df00:	19400536 	bltu	r3,r5,4110df18 <_free_r+0x2f0>
4110df04:	100ad4ba 	srli	r5,r2,18
4110df08:	28c01f44 	addi	r3,r5,125
4110df0c:	18c7883a 	add	r3,r3,r3
4110df10:	29401f04 	addi	r5,r5,124
4110df14:	003f8e06 	br	4110dd50 <__reset+0xbb0edd50>
4110df18:	00c03f84 	movi	r3,254
4110df1c:	01401f84 	movi	r5,126
4110df20:	003f8b06 	br	4110dd50 <__reset+0xbb0edd50>
4110df24:	10c00054 	ori	r3,r2,1
4110df28:	30c00115 	stw	r3,4(r6)
4110df2c:	308d883a 	add	r6,r6,r2
4110df30:	30800015 	stw	r2,0(r6)
4110df34:	003f7806 	br	4110dd18 <__reset+0xbb0edd18>

4110df38 <__sfvwrite_r>:
4110df38:	30800217 	ldw	r2,8(r6)
4110df3c:	10006726 	beq	r2,zero,4110e0dc <__sfvwrite_r+0x1a4>
4110df40:	28c0030b 	ldhu	r3,12(r5)
4110df44:	defff404 	addi	sp,sp,-48
4110df48:	dd400715 	stw	r21,28(sp)
4110df4c:	dd000615 	stw	r20,24(sp)
4110df50:	dc000215 	stw	r16,8(sp)
4110df54:	dfc00b15 	stw	ra,44(sp)
4110df58:	df000a15 	stw	fp,40(sp)
4110df5c:	ddc00915 	stw	r23,36(sp)
4110df60:	dd800815 	stw	r22,32(sp)
4110df64:	dcc00515 	stw	r19,20(sp)
4110df68:	dc800415 	stw	r18,16(sp)
4110df6c:	dc400315 	stw	r17,12(sp)
4110df70:	1880020c 	andi	r2,r3,8
4110df74:	2821883a 	mov	r16,r5
4110df78:	202b883a 	mov	r21,r4
4110df7c:	3029883a 	mov	r20,r6
4110df80:	10002726 	beq	r2,zero,4110e020 <__sfvwrite_r+0xe8>
4110df84:	28800417 	ldw	r2,16(r5)
4110df88:	10002526 	beq	r2,zero,4110e020 <__sfvwrite_r+0xe8>
4110df8c:	1880008c 	andi	r2,r3,2
4110df90:	a4400017 	ldw	r17,0(r20)
4110df94:	10002a26 	beq	r2,zero,4110e040 <__sfvwrite_r+0x108>
4110df98:	05a00034 	movhi	r22,32768
4110df9c:	0027883a 	mov	r19,zero
4110dfa0:	0025883a 	mov	r18,zero
4110dfa4:	b5bf0004 	addi	r22,r22,-1024
4110dfa8:	980d883a 	mov	r6,r19
4110dfac:	a809883a 	mov	r4,r21
4110dfb0:	90004626 	beq	r18,zero,4110e0cc <__sfvwrite_r+0x194>
4110dfb4:	900f883a 	mov	r7,r18
4110dfb8:	b480022e 	bgeu	r22,r18,4110dfc4 <__sfvwrite_r+0x8c>
4110dfbc:	01e00034 	movhi	r7,32768
4110dfc0:	39ff0004 	addi	r7,r7,-1024
4110dfc4:	80800917 	ldw	r2,36(r16)
4110dfc8:	81400717 	ldw	r5,28(r16)
4110dfcc:	103ee83a 	callr	r2
4110dfd0:	0080570e 	bge	zero,r2,4110e130 <__sfvwrite_r+0x1f8>
4110dfd4:	a0c00217 	ldw	r3,8(r20)
4110dfd8:	98a7883a 	add	r19,r19,r2
4110dfdc:	90a5c83a 	sub	r18,r18,r2
4110dfe0:	1885c83a 	sub	r2,r3,r2
4110dfe4:	a0800215 	stw	r2,8(r20)
4110dfe8:	103fef1e 	bne	r2,zero,4110dfa8 <__reset+0xbb0edfa8>
4110dfec:	0005883a 	mov	r2,zero
4110dff0:	dfc00b17 	ldw	ra,44(sp)
4110dff4:	df000a17 	ldw	fp,40(sp)
4110dff8:	ddc00917 	ldw	r23,36(sp)
4110dffc:	dd800817 	ldw	r22,32(sp)
4110e000:	dd400717 	ldw	r21,28(sp)
4110e004:	dd000617 	ldw	r20,24(sp)
4110e008:	dcc00517 	ldw	r19,20(sp)
4110e00c:	dc800417 	ldw	r18,16(sp)
4110e010:	dc400317 	ldw	r17,12(sp)
4110e014:	dc000217 	ldw	r16,8(sp)
4110e018:	dec00c04 	addi	sp,sp,48
4110e01c:	f800283a 	ret
4110e020:	800b883a 	mov	r5,r16
4110e024:	a809883a 	mov	r4,r21
4110e028:	110bae00 	call	4110bae0 <__swsetup_r>
4110e02c:	1000eb1e 	bne	r2,zero,4110e3dc <__sfvwrite_r+0x4a4>
4110e030:	80c0030b 	ldhu	r3,12(r16)
4110e034:	a4400017 	ldw	r17,0(r20)
4110e038:	1880008c 	andi	r2,r3,2
4110e03c:	103fd61e 	bne	r2,zero,4110df98 <__reset+0xbb0edf98>
4110e040:	1880004c 	andi	r2,r3,1
4110e044:	10003f1e 	bne	r2,zero,4110e144 <__sfvwrite_r+0x20c>
4110e048:	0039883a 	mov	fp,zero
4110e04c:	0025883a 	mov	r18,zero
4110e050:	90001a26 	beq	r18,zero,4110e0bc <__sfvwrite_r+0x184>
4110e054:	1880800c 	andi	r2,r3,512
4110e058:	84c00217 	ldw	r19,8(r16)
4110e05c:	10002126 	beq	r2,zero,4110e0e4 <__sfvwrite_r+0x1ac>
4110e060:	982f883a 	mov	r23,r19
4110e064:	94c09336 	bltu	r18,r19,4110e2b4 <__sfvwrite_r+0x37c>
4110e068:	1881200c 	andi	r2,r3,1152
4110e06c:	10009e1e 	bne	r2,zero,4110e2e8 <__sfvwrite_r+0x3b0>
4110e070:	81000017 	ldw	r4,0(r16)
4110e074:	b80d883a 	mov	r6,r23
4110e078:	e00b883a 	mov	r5,fp
4110e07c:	110f1040 	call	4110f104 <memmove>
4110e080:	80c00217 	ldw	r3,8(r16)
4110e084:	81000017 	ldw	r4,0(r16)
4110e088:	9005883a 	mov	r2,r18
4110e08c:	1ce7c83a 	sub	r19,r3,r19
4110e090:	25cf883a 	add	r7,r4,r23
4110e094:	84c00215 	stw	r19,8(r16)
4110e098:	81c00015 	stw	r7,0(r16)
4110e09c:	a0c00217 	ldw	r3,8(r20)
4110e0a0:	e0b9883a 	add	fp,fp,r2
4110e0a4:	90a5c83a 	sub	r18,r18,r2
4110e0a8:	18a7c83a 	sub	r19,r3,r2
4110e0ac:	a4c00215 	stw	r19,8(r20)
4110e0b0:	983fce26 	beq	r19,zero,4110dfec <__reset+0xbb0edfec>
4110e0b4:	80c0030b 	ldhu	r3,12(r16)
4110e0b8:	903fe61e 	bne	r18,zero,4110e054 <__reset+0xbb0ee054>
4110e0bc:	8f000017 	ldw	fp,0(r17)
4110e0c0:	8c800117 	ldw	r18,4(r17)
4110e0c4:	8c400204 	addi	r17,r17,8
4110e0c8:	003fe106 	br	4110e050 <__reset+0xbb0ee050>
4110e0cc:	8cc00017 	ldw	r19,0(r17)
4110e0d0:	8c800117 	ldw	r18,4(r17)
4110e0d4:	8c400204 	addi	r17,r17,8
4110e0d8:	003fb306 	br	4110dfa8 <__reset+0xbb0edfa8>
4110e0dc:	0005883a 	mov	r2,zero
4110e0e0:	f800283a 	ret
4110e0e4:	81000017 	ldw	r4,0(r16)
4110e0e8:	80800417 	ldw	r2,16(r16)
4110e0ec:	11005736 	bltu	r2,r4,4110e24c <__sfvwrite_r+0x314>
4110e0f0:	85c00517 	ldw	r23,20(r16)
4110e0f4:	95c05536 	bltu	r18,r23,4110e24c <__sfvwrite_r+0x314>
4110e0f8:	00a00034 	movhi	r2,32768
4110e0fc:	10bfffc4 	addi	r2,r2,-1
4110e100:	9009883a 	mov	r4,r18
4110e104:	1480012e 	bgeu	r2,r18,4110e10c <__sfvwrite_r+0x1d4>
4110e108:	1009883a 	mov	r4,r2
4110e10c:	b80b883a 	mov	r5,r23
4110e110:	111375c0 	call	4111375c <__divsi3>
4110e114:	15cf383a 	mul	r7,r2,r23
4110e118:	81400717 	ldw	r5,28(r16)
4110e11c:	80800917 	ldw	r2,36(r16)
4110e120:	e00d883a 	mov	r6,fp
4110e124:	a809883a 	mov	r4,r21
4110e128:	103ee83a 	callr	r2
4110e12c:	00bfdb16 	blt	zero,r2,4110e09c <__reset+0xbb0ee09c>
4110e130:	8080030b 	ldhu	r2,12(r16)
4110e134:	10801014 	ori	r2,r2,64
4110e138:	8080030d 	sth	r2,12(r16)
4110e13c:	00bfffc4 	movi	r2,-1
4110e140:	003fab06 	br	4110dff0 <__reset+0xbb0edff0>
4110e144:	0027883a 	mov	r19,zero
4110e148:	0011883a 	mov	r8,zero
4110e14c:	0039883a 	mov	fp,zero
4110e150:	0025883a 	mov	r18,zero
4110e154:	90001f26 	beq	r18,zero,4110e1d4 <__sfvwrite_r+0x29c>
4110e158:	40005a26 	beq	r8,zero,4110e2c4 <__sfvwrite_r+0x38c>
4110e15c:	982d883a 	mov	r22,r19
4110e160:	94c0012e 	bgeu	r18,r19,4110e168 <__sfvwrite_r+0x230>
4110e164:	902d883a 	mov	r22,r18
4110e168:	81000017 	ldw	r4,0(r16)
4110e16c:	80800417 	ldw	r2,16(r16)
4110e170:	b02f883a 	mov	r23,r22
4110e174:	81c00517 	ldw	r7,20(r16)
4110e178:	1100032e 	bgeu	r2,r4,4110e188 <__sfvwrite_r+0x250>
4110e17c:	80c00217 	ldw	r3,8(r16)
4110e180:	38c7883a 	add	r3,r7,r3
4110e184:	1d801816 	blt	r3,r22,4110e1e8 <__sfvwrite_r+0x2b0>
4110e188:	b1c03e16 	blt	r22,r7,4110e284 <__sfvwrite_r+0x34c>
4110e18c:	80800917 	ldw	r2,36(r16)
4110e190:	81400717 	ldw	r5,28(r16)
4110e194:	e00d883a 	mov	r6,fp
4110e198:	da000115 	stw	r8,4(sp)
4110e19c:	a809883a 	mov	r4,r21
4110e1a0:	103ee83a 	callr	r2
4110e1a4:	102f883a 	mov	r23,r2
4110e1a8:	da000117 	ldw	r8,4(sp)
4110e1ac:	00bfe00e 	bge	zero,r2,4110e130 <__reset+0xbb0ee130>
4110e1b0:	9de7c83a 	sub	r19,r19,r23
4110e1b4:	98001f26 	beq	r19,zero,4110e234 <__sfvwrite_r+0x2fc>
4110e1b8:	a0800217 	ldw	r2,8(r20)
4110e1bc:	e5f9883a 	add	fp,fp,r23
4110e1c0:	95e5c83a 	sub	r18,r18,r23
4110e1c4:	15efc83a 	sub	r23,r2,r23
4110e1c8:	a5c00215 	stw	r23,8(r20)
4110e1cc:	b83f8726 	beq	r23,zero,4110dfec <__reset+0xbb0edfec>
4110e1d0:	903fe11e 	bne	r18,zero,4110e158 <__reset+0xbb0ee158>
4110e1d4:	8f000017 	ldw	fp,0(r17)
4110e1d8:	8c800117 	ldw	r18,4(r17)
4110e1dc:	0011883a 	mov	r8,zero
4110e1e0:	8c400204 	addi	r17,r17,8
4110e1e4:	003fdb06 	br	4110e154 <__reset+0xbb0ee154>
4110e1e8:	180d883a 	mov	r6,r3
4110e1ec:	e00b883a 	mov	r5,fp
4110e1f0:	da000115 	stw	r8,4(sp)
4110e1f4:	d8c00015 	stw	r3,0(sp)
4110e1f8:	110f1040 	call	4110f104 <memmove>
4110e1fc:	d8c00017 	ldw	r3,0(sp)
4110e200:	80800017 	ldw	r2,0(r16)
4110e204:	800b883a 	mov	r5,r16
4110e208:	a809883a 	mov	r4,r21
4110e20c:	10c5883a 	add	r2,r2,r3
4110e210:	80800015 	stw	r2,0(r16)
4110e214:	d8c00015 	stw	r3,0(sp)
4110e218:	110d6d80 	call	4110d6d8 <_fflush_r>
4110e21c:	d8c00017 	ldw	r3,0(sp)
4110e220:	da000117 	ldw	r8,4(sp)
4110e224:	103fc21e 	bne	r2,zero,4110e130 <__reset+0xbb0ee130>
4110e228:	182f883a 	mov	r23,r3
4110e22c:	9de7c83a 	sub	r19,r19,r23
4110e230:	983fe11e 	bne	r19,zero,4110e1b8 <__reset+0xbb0ee1b8>
4110e234:	800b883a 	mov	r5,r16
4110e238:	a809883a 	mov	r4,r21
4110e23c:	110d6d80 	call	4110d6d8 <_fflush_r>
4110e240:	103fbb1e 	bne	r2,zero,4110e130 <__reset+0xbb0ee130>
4110e244:	0011883a 	mov	r8,zero
4110e248:	003fdb06 	br	4110e1b8 <__reset+0xbb0ee1b8>
4110e24c:	94c0012e 	bgeu	r18,r19,4110e254 <__sfvwrite_r+0x31c>
4110e250:	9027883a 	mov	r19,r18
4110e254:	980d883a 	mov	r6,r19
4110e258:	e00b883a 	mov	r5,fp
4110e25c:	110f1040 	call	4110f104 <memmove>
4110e260:	80800217 	ldw	r2,8(r16)
4110e264:	80c00017 	ldw	r3,0(r16)
4110e268:	14c5c83a 	sub	r2,r2,r19
4110e26c:	1cc7883a 	add	r3,r3,r19
4110e270:	80800215 	stw	r2,8(r16)
4110e274:	80c00015 	stw	r3,0(r16)
4110e278:	10004326 	beq	r2,zero,4110e388 <__sfvwrite_r+0x450>
4110e27c:	9805883a 	mov	r2,r19
4110e280:	003f8606 	br	4110e09c <__reset+0xbb0ee09c>
4110e284:	b00d883a 	mov	r6,r22
4110e288:	e00b883a 	mov	r5,fp
4110e28c:	da000115 	stw	r8,4(sp)
4110e290:	110f1040 	call	4110f104 <memmove>
4110e294:	80800217 	ldw	r2,8(r16)
4110e298:	80c00017 	ldw	r3,0(r16)
4110e29c:	da000117 	ldw	r8,4(sp)
4110e2a0:	1585c83a 	sub	r2,r2,r22
4110e2a4:	1dad883a 	add	r22,r3,r22
4110e2a8:	80800215 	stw	r2,8(r16)
4110e2ac:	85800015 	stw	r22,0(r16)
4110e2b0:	003fbf06 	br	4110e1b0 <__reset+0xbb0ee1b0>
4110e2b4:	81000017 	ldw	r4,0(r16)
4110e2b8:	9027883a 	mov	r19,r18
4110e2bc:	902f883a 	mov	r23,r18
4110e2c0:	003f6c06 	br	4110e074 <__reset+0xbb0ee074>
4110e2c4:	900d883a 	mov	r6,r18
4110e2c8:	01400284 	movi	r5,10
4110e2cc:	e009883a 	mov	r4,fp
4110e2d0:	110f0200 	call	4110f020 <memchr>
4110e2d4:	10003e26 	beq	r2,zero,4110e3d0 <__sfvwrite_r+0x498>
4110e2d8:	10800044 	addi	r2,r2,1
4110e2dc:	1727c83a 	sub	r19,r2,fp
4110e2e0:	02000044 	movi	r8,1
4110e2e4:	003f9d06 	br	4110e15c <__reset+0xbb0ee15c>
4110e2e8:	80800517 	ldw	r2,20(r16)
4110e2ec:	81400417 	ldw	r5,16(r16)
4110e2f0:	81c00017 	ldw	r7,0(r16)
4110e2f4:	10a7883a 	add	r19,r2,r2
4110e2f8:	9885883a 	add	r2,r19,r2
4110e2fc:	1026d7fa 	srli	r19,r2,31
4110e300:	396dc83a 	sub	r22,r7,r5
4110e304:	b1000044 	addi	r4,r22,1
4110e308:	9885883a 	add	r2,r19,r2
4110e30c:	1027d07a 	srai	r19,r2,1
4110e310:	2485883a 	add	r2,r4,r18
4110e314:	980d883a 	mov	r6,r19
4110e318:	9880022e 	bgeu	r19,r2,4110e324 <__sfvwrite_r+0x3ec>
4110e31c:	1027883a 	mov	r19,r2
4110e320:	100d883a 	mov	r6,r2
4110e324:	18c1000c 	andi	r3,r3,1024
4110e328:	18001c26 	beq	r3,zero,4110e39c <__sfvwrite_r+0x464>
4110e32c:	300b883a 	mov	r5,r6
4110e330:	a809883a 	mov	r4,r21
4110e334:	110e8140 	call	4110e814 <_malloc_r>
4110e338:	102f883a 	mov	r23,r2
4110e33c:	10002926 	beq	r2,zero,4110e3e4 <__sfvwrite_r+0x4ac>
4110e340:	81400417 	ldw	r5,16(r16)
4110e344:	b00d883a 	mov	r6,r22
4110e348:	1009883a 	mov	r4,r2
4110e34c:	11094d00 	call	411094d0 <memcpy>
4110e350:	8080030b 	ldhu	r2,12(r16)
4110e354:	00fedfc4 	movi	r3,-1153
4110e358:	10c4703a 	and	r2,r2,r3
4110e35c:	10802014 	ori	r2,r2,128
4110e360:	8080030d 	sth	r2,12(r16)
4110e364:	bd89883a 	add	r4,r23,r22
4110e368:	9d8fc83a 	sub	r7,r19,r22
4110e36c:	85c00415 	stw	r23,16(r16)
4110e370:	84c00515 	stw	r19,20(r16)
4110e374:	81000015 	stw	r4,0(r16)
4110e378:	9027883a 	mov	r19,r18
4110e37c:	81c00215 	stw	r7,8(r16)
4110e380:	902f883a 	mov	r23,r18
4110e384:	003f3b06 	br	4110e074 <__reset+0xbb0ee074>
4110e388:	800b883a 	mov	r5,r16
4110e38c:	a809883a 	mov	r4,r21
4110e390:	110d6d80 	call	4110d6d8 <_fflush_r>
4110e394:	103fb926 	beq	r2,zero,4110e27c <__reset+0xbb0ee27c>
4110e398:	003f6506 	br	4110e130 <__reset+0xbb0ee130>
4110e39c:	a809883a 	mov	r4,r21
4110e3a0:	11104ec0 	call	411104ec <_realloc_r>
4110e3a4:	102f883a 	mov	r23,r2
4110e3a8:	103fee1e 	bne	r2,zero,4110e364 <__reset+0xbb0ee364>
4110e3ac:	81400417 	ldw	r5,16(r16)
4110e3b0:	a809883a 	mov	r4,r21
4110e3b4:	110dc280 	call	4110dc28 <_free_r>
4110e3b8:	8080030b 	ldhu	r2,12(r16)
4110e3bc:	00ffdfc4 	movi	r3,-129
4110e3c0:	1884703a 	and	r2,r3,r2
4110e3c4:	00c00304 	movi	r3,12
4110e3c8:	a8c00015 	stw	r3,0(r21)
4110e3cc:	003f5906 	br	4110e134 <__reset+0xbb0ee134>
4110e3d0:	94c00044 	addi	r19,r18,1
4110e3d4:	02000044 	movi	r8,1
4110e3d8:	003f6006 	br	4110e15c <__reset+0xbb0ee15c>
4110e3dc:	00bfffc4 	movi	r2,-1
4110e3e0:	003f0306 	br	4110dff0 <__reset+0xbb0edff0>
4110e3e4:	00800304 	movi	r2,12
4110e3e8:	a8800015 	stw	r2,0(r21)
4110e3ec:	8080030b 	ldhu	r2,12(r16)
4110e3f0:	003f5006 	br	4110e134 <__reset+0xbb0ee134>

4110e3f4 <_fwalk>:
4110e3f4:	defff704 	addi	sp,sp,-36
4110e3f8:	dd000415 	stw	r20,16(sp)
4110e3fc:	dfc00815 	stw	ra,32(sp)
4110e400:	ddc00715 	stw	r23,28(sp)
4110e404:	dd800615 	stw	r22,24(sp)
4110e408:	dd400515 	stw	r21,20(sp)
4110e40c:	dcc00315 	stw	r19,12(sp)
4110e410:	dc800215 	stw	r18,8(sp)
4110e414:	dc400115 	stw	r17,4(sp)
4110e418:	dc000015 	stw	r16,0(sp)
4110e41c:	2500b804 	addi	r20,r4,736
4110e420:	a0002326 	beq	r20,zero,4110e4b0 <_fwalk+0xbc>
4110e424:	282b883a 	mov	r21,r5
4110e428:	002f883a 	mov	r23,zero
4110e42c:	05800044 	movi	r22,1
4110e430:	04ffffc4 	movi	r19,-1
4110e434:	a4400117 	ldw	r17,4(r20)
4110e438:	a4800217 	ldw	r18,8(r20)
4110e43c:	8c7fffc4 	addi	r17,r17,-1
4110e440:	88000d16 	blt	r17,zero,4110e478 <_fwalk+0x84>
4110e444:	94000304 	addi	r16,r18,12
4110e448:	94800384 	addi	r18,r18,14
4110e44c:	8080000b 	ldhu	r2,0(r16)
4110e450:	8c7fffc4 	addi	r17,r17,-1
4110e454:	813ffd04 	addi	r4,r16,-12
4110e458:	b080042e 	bgeu	r22,r2,4110e46c <_fwalk+0x78>
4110e45c:	9080000f 	ldh	r2,0(r18)
4110e460:	14c00226 	beq	r2,r19,4110e46c <_fwalk+0x78>
4110e464:	a83ee83a 	callr	r21
4110e468:	b8aeb03a 	or	r23,r23,r2
4110e46c:	84001a04 	addi	r16,r16,104
4110e470:	94801a04 	addi	r18,r18,104
4110e474:	8cfff51e 	bne	r17,r19,4110e44c <__reset+0xbb0ee44c>
4110e478:	a5000017 	ldw	r20,0(r20)
4110e47c:	a03fed1e 	bne	r20,zero,4110e434 <__reset+0xbb0ee434>
4110e480:	b805883a 	mov	r2,r23
4110e484:	dfc00817 	ldw	ra,32(sp)
4110e488:	ddc00717 	ldw	r23,28(sp)
4110e48c:	dd800617 	ldw	r22,24(sp)
4110e490:	dd400517 	ldw	r21,20(sp)
4110e494:	dd000417 	ldw	r20,16(sp)
4110e498:	dcc00317 	ldw	r19,12(sp)
4110e49c:	dc800217 	ldw	r18,8(sp)
4110e4a0:	dc400117 	ldw	r17,4(sp)
4110e4a4:	dc000017 	ldw	r16,0(sp)
4110e4a8:	dec00904 	addi	sp,sp,36
4110e4ac:	f800283a 	ret
4110e4b0:	002f883a 	mov	r23,zero
4110e4b4:	003ff206 	br	4110e480 <__reset+0xbb0ee480>

4110e4b8 <_fwalk_reent>:
4110e4b8:	defff704 	addi	sp,sp,-36
4110e4bc:	dd000415 	stw	r20,16(sp)
4110e4c0:	dfc00815 	stw	ra,32(sp)
4110e4c4:	ddc00715 	stw	r23,28(sp)
4110e4c8:	dd800615 	stw	r22,24(sp)
4110e4cc:	dd400515 	stw	r21,20(sp)
4110e4d0:	dcc00315 	stw	r19,12(sp)
4110e4d4:	dc800215 	stw	r18,8(sp)
4110e4d8:	dc400115 	stw	r17,4(sp)
4110e4dc:	dc000015 	stw	r16,0(sp)
4110e4e0:	2500b804 	addi	r20,r4,736
4110e4e4:	a0002326 	beq	r20,zero,4110e574 <_fwalk_reent+0xbc>
4110e4e8:	282b883a 	mov	r21,r5
4110e4ec:	2027883a 	mov	r19,r4
4110e4f0:	002f883a 	mov	r23,zero
4110e4f4:	05800044 	movi	r22,1
4110e4f8:	04bfffc4 	movi	r18,-1
4110e4fc:	a4400117 	ldw	r17,4(r20)
4110e500:	a4000217 	ldw	r16,8(r20)
4110e504:	8c7fffc4 	addi	r17,r17,-1
4110e508:	88000c16 	blt	r17,zero,4110e53c <_fwalk_reent+0x84>
4110e50c:	84000304 	addi	r16,r16,12
4110e510:	8080000b 	ldhu	r2,0(r16)
4110e514:	8c7fffc4 	addi	r17,r17,-1
4110e518:	817ffd04 	addi	r5,r16,-12
4110e51c:	b080052e 	bgeu	r22,r2,4110e534 <_fwalk_reent+0x7c>
4110e520:	8080008f 	ldh	r2,2(r16)
4110e524:	9809883a 	mov	r4,r19
4110e528:	14800226 	beq	r2,r18,4110e534 <_fwalk_reent+0x7c>
4110e52c:	a83ee83a 	callr	r21
4110e530:	b8aeb03a 	or	r23,r23,r2
4110e534:	84001a04 	addi	r16,r16,104
4110e538:	8cbff51e 	bne	r17,r18,4110e510 <__reset+0xbb0ee510>
4110e53c:	a5000017 	ldw	r20,0(r20)
4110e540:	a03fee1e 	bne	r20,zero,4110e4fc <__reset+0xbb0ee4fc>
4110e544:	b805883a 	mov	r2,r23
4110e548:	dfc00817 	ldw	ra,32(sp)
4110e54c:	ddc00717 	ldw	r23,28(sp)
4110e550:	dd800617 	ldw	r22,24(sp)
4110e554:	dd400517 	ldw	r21,20(sp)
4110e558:	dd000417 	ldw	r20,16(sp)
4110e55c:	dcc00317 	ldw	r19,12(sp)
4110e560:	dc800217 	ldw	r18,8(sp)
4110e564:	dc400117 	ldw	r17,4(sp)
4110e568:	dc000017 	ldw	r16,0(sp)
4110e56c:	dec00904 	addi	sp,sp,36
4110e570:	f800283a 	ret
4110e574:	002f883a 	mov	r23,zero
4110e578:	003ff206 	br	4110e544 <__reset+0xbb0ee544>

4110e57c <_setlocale_r>:
4110e57c:	30001b26 	beq	r6,zero,4110e5ec <_setlocale_r+0x70>
4110e580:	015044b4 	movhi	r5,16658
4110e584:	defffe04 	addi	sp,sp,-8
4110e588:	296f5204 	addi	r5,r5,-17080
4110e58c:	3009883a 	mov	r4,r6
4110e590:	dc000015 	stw	r16,0(sp)
4110e594:	dfc00115 	stw	ra,4(sp)
4110e598:	3021883a 	mov	r16,r6
4110e59c:	1110c540 	call	41110c54 <strcmp>
4110e5a0:	1000061e 	bne	r2,zero,4110e5bc <_setlocale_r+0x40>
4110e5a4:	009044b4 	movhi	r2,16658
4110e5a8:	10af5104 	addi	r2,r2,-17084
4110e5ac:	dfc00117 	ldw	ra,4(sp)
4110e5b0:	dc000017 	ldw	r16,0(sp)
4110e5b4:	dec00204 	addi	sp,sp,8
4110e5b8:	f800283a 	ret
4110e5bc:	015044b4 	movhi	r5,16658
4110e5c0:	296f5104 	addi	r5,r5,-17084
4110e5c4:	8009883a 	mov	r4,r16
4110e5c8:	1110c540 	call	41110c54 <strcmp>
4110e5cc:	103ff526 	beq	r2,zero,4110e5a4 <__reset+0xbb0ee5a4>
4110e5d0:	015044b4 	movhi	r5,16658
4110e5d4:	296f3c04 	addi	r5,r5,-17168
4110e5d8:	8009883a 	mov	r4,r16
4110e5dc:	1110c540 	call	41110c54 <strcmp>
4110e5e0:	103ff026 	beq	r2,zero,4110e5a4 <__reset+0xbb0ee5a4>
4110e5e4:	0005883a 	mov	r2,zero
4110e5e8:	003ff006 	br	4110e5ac <__reset+0xbb0ee5ac>
4110e5ec:	009044b4 	movhi	r2,16658
4110e5f0:	10af5104 	addi	r2,r2,-17084
4110e5f4:	f800283a 	ret

4110e5f8 <__locale_charset>:
4110e5f8:	009044b4 	movhi	r2,16658
4110e5fc:	10b15e04 	addi	r2,r2,-14984
4110e600:	f800283a 	ret

4110e604 <__locale_mb_cur_max>:
4110e604:	009044b4 	movhi	r2,16658
4110e608:	10b76f04 	addi	r2,r2,-8772
4110e60c:	10800017 	ldw	r2,0(r2)
4110e610:	f800283a 	ret

4110e614 <__locale_msgcharset>:
4110e614:	009044b4 	movhi	r2,16658
4110e618:	10b15604 	addi	r2,r2,-15016
4110e61c:	f800283a 	ret

4110e620 <__locale_cjk_lang>:
4110e620:	0005883a 	mov	r2,zero
4110e624:	f800283a 	ret

4110e628 <_localeconv_r>:
4110e628:	009044b4 	movhi	r2,16658
4110e62c:	10b16604 	addi	r2,r2,-14952
4110e630:	f800283a 	ret

4110e634 <setlocale>:
4110e634:	009044b4 	movhi	r2,16658
4110e638:	10b76e04 	addi	r2,r2,-8776
4110e63c:	280d883a 	mov	r6,r5
4110e640:	200b883a 	mov	r5,r4
4110e644:	11000017 	ldw	r4,0(r2)
4110e648:	110e57c1 	jmpi	4110e57c <_setlocale_r>

4110e64c <localeconv>:
4110e64c:	009044b4 	movhi	r2,16658
4110e650:	10b16604 	addi	r2,r2,-14952
4110e654:	f800283a 	ret

4110e658 <__smakebuf_r>:
4110e658:	2880030b 	ldhu	r2,12(r5)
4110e65c:	10c0008c 	andi	r3,r2,2
4110e660:	1800411e 	bne	r3,zero,4110e768 <__smakebuf_r+0x110>
4110e664:	deffec04 	addi	sp,sp,-80
4110e668:	dc000f15 	stw	r16,60(sp)
4110e66c:	2821883a 	mov	r16,r5
4110e670:	2940038f 	ldh	r5,14(r5)
4110e674:	dc401015 	stw	r17,64(sp)
4110e678:	dfc01315 	stw	ra,76(sp)
4110e67c:	dcc01215 	stw	r19,72(sp)
4110e680:	dc801115 	stw	r18,68(sp)
4110e684:	2023883a 	mov	r17,r4
4110e688:	28001c16 	blt	r5,zero,4110e6fc <__smakebuf_r+0xa4>
4110e68c:	d80d883a 	mov	r6,sp
4110e690:	11129540 	call	41112954 <_fstat_r>
4110e694:	10001816 	blt	r2,zero,4110e6f8 <__smakebuf_r+0xa0>
4110e698:	d8800117 	ldw	r2,4(sp)
4110e69c:	00e00014 	movui	r3,32768
4110e6a0:	10bc000c 	andi	r2,r2,61440
4110e6a4:	14c80020 	cmpeqi	r19,r2,8192
4110e6a8:	10c03726 	beq	r2,r3,4110e788 <__smakebuf_r+0x130>
4110e6ac:	80c0030b 	ldhu	r3,12(r16)
4110e6b0:	18c20014 	ori	r3,r3,2048
4110e6b4:	80c0030d 	sth	r3,12(r16)
4110e6b8:	00c80004 	movi	r3,8192
4110e6bc:	10c0521e 	bne	r2,r3,4110e808 <__smakebuf_r+0x1b0>
4110e6c0:	8140038f 	ldh	r5,14(r16)
4110e6c4:	8809883a 	mov	r4,r17
4110e6c8:	11129b00 	call	411129b0 <_isatty_r>
4110e6cc:	10004c26 	beq	r2,zero,4110e800 <__smakebuf_r+0x1a8>
4110e6d0:	8080030b 	ldhu	r2,12(r16)
4110e6d4:	80c010c4 	addi	r3,r16,67
4110e6d8:	80c00015 	stw	r3,0(r16)
4110e6dc:	10800054 	ori	r2,r2,1
4110e6e0:	8080030d 	sth	r2,12(r16)
4110e6e4:	00800044 	movi	r2,1
4110e6e8:	80c00415 	stw	r3,16(r16)
4110e6ec:	80800515 	stw	r2,20(r16)
4110e6f0:	04810004 	movi	r18,1024
4110e6f4:	00000706 	br	4110e714 <__smakebuf_r+0xbc>
4110e6f8:	8080030b 	ldhu	r2,12(r16)
4110e6fc:	10c0200c 	andi	r3,r2,128
4110e700:	18001f1e 	bne	r3,zero,4110e780 <__smakebuf_r+0x128>
4110e704:	04810004 	movi	r18,1024
4110e708:	10820014 	ori	r2,r2,2048
4110e70c:	8080030d 	sth	r2,12(r16)
4110e710:	0027883a 	mov	r19,zero
4110e714:	900b883a 	mov	r5,r18
4110e718:	8809883a 	mov	r4,r17
4110e71c:	110e8140 	call	4110e814 <_malloc_r>
4110e720:	10002c26 	beq	r2,zero,4110e7d4 <__smakebuf_r+0x17c>
4110e724:	80c0030b 	ldhu	r3,12(r16)
4110e728:	01104474 	movhi	r4,16657
4110e72c:	2135db04 	addi	r4,r4,-10388
4110e730:	89000f15 	stw	r4,60(r17)
4110e734:	18c02014 	ori	r3,r3,128
4110e738:	80c0030d 	sth	r3,12(r16)
4110e73c:	80800015 	stw	r2,0(r16)
4110e740:	80800415 	stw	r2,16(r16)
4110e744:	84800515 	stw	r18,20(r16)
4110e748:	98001a1e 	bne	r19,zero,4110e7b4 <__smakebuf_r+0x15c>
4110e74c:	dfc01317 	ldw	ra,76(sp)
4110e750:	dcc01217 	ldw	r19,72(sp)
4110e754:	dc801117 	ldw	r18,68(sp)
4110e758:	dc401017 	ldw	r17,64(sp)
4110e75c:	dc000f17 	ldw	r16,60(sp)
4110e760:	dec01404 	addi	sp,sp,80
4110e764:	f800283a 	ret
4110e768:	288010c4 	addi	r2,r5,67
4110e76c:	28800015 	stw	r2,0(r5)
4110e770:	28800415 	stw	r2,16(r5)
4110e774:	00800044 	movi	r2,1
4110e778:	28800515 	stw	r2,20(r5)
4110e77c:	f800283a 	ret
4110e780:	04801004 	movi	r18,64
4110e784:	003fe006 	br	4110e708 <__reset+0xbb0ee708>
4110e788:	81000a17 	ldw	r4,40(r16)
4110e78c:	00d04474 	movhi	r3,16657
4110e790:	18c2fc04 	addi	r3,r3,3056
4110e794:	20ffc51e 	bne	r4,r3,4110e6ac <__reset+0xbb0ee6ac>
4110e798:	8080030b 	ldhu	r2,12(r16)
4110e79c:	04810004 	movi	r18,1024
4110e7a0:	84801315 	stw	r18,76(r16)
4110e7a4:	1484b03a 	or	r2,r2,r18
4110e7a8:	8080030d 	sth	r2,12(r16)
4110e7ac:	0027883a 	mov	r19,zero
4110e7b0:	003fd806 	br	4110e714 <__reset+0xbb0ee714>
4110e7b4:	8140038f 	ldh	r5,14(r16)
4110e7b8:	8809883a 	mov	r4,r17
4110e7bc:	11129b00 	call	411129b0 <_isatty_r>
4110e7c0:	103fe226 	beq	r2,zero,4110e74c <__reset+0xbb0ee74c>
4110e7c4:	8080030b 	ldhu	r2,12(r16)
4110e7c8:	10800054 	ori	r2,r2,1
4110e7cc:	8080030d 	sth	r2,12(r16)
4110e7d0:	003fde06 	br	4110e74c <__reset+0xbb0ee74c>
4110e7d4:	8080030b 	ldhu	r2,12(r16)
4110e7d8:	10c0800c 	andi	r3,r2,512
4110e7dc:	183fdb1e 	bne	r3,zero,4110e74c <__reset+0xbb0ee74c>
4110e7e0:	10800094 	ori	r2,r2,2
4110e7e4:	80c010c4 	addi	r3,r16,67
4110e7e8:	8080030d 	sth	r2,12(r16)
4110e7ec:	00800044 	movi	r2,1
4110e7f0:	80c00015 	stw	r3,0(r16)
4110e7f4:	80c00415 	stw	r3,16(r16)
4110e7f8:	80800515 	stw	r2,20(r16)
4110e7fc:	003fd306 	br	4110e74c <__reset+0xbb0ee74c>
4110e800:	04810004 	movi	r18,1024
4110e804:	003fc306 	br	4110e714 <__reset+0xbb0ee714>
4110e808:	0027883a 	mov	r19,zero
4110e80c:	04810004 	movi	r18,1024
4110e810:	003fc006 	br	4110e714 <__reset+0xbb0ee714>

4110e814 <_malloc_r>:
4110e814:	defff504 	addi	sp,sp,-44
4110e818:	dc800315 	stw	r18,12(sp)
4110e81c:	dfc00a15 	stw	ra,40(sp)
4110e820:	df000915 	stw	fp,36(sp)
4110e824:	ddc00815 	stw	r23,32(sp)
4110e828:	dd800715 	stw	r22,28(sp)
4110e82c:	dd400615 	stw	r21,24(sp)
4110e830:	dd000515 	stw	r20,20(sp)
4110e834:	dcc00415 	stw	r19,16(sp)
4110e838:	dc400215 	stw	r17,8(sp)
4110e83c:	dc000115 	stw	r16,4(sp)
4110e840:	288002c4 	addi	r2,r5,11
4110e844:	00c00584 	movi	r3,22
4110e848:	2025883a 	mov	r18,r4
4110e84c:	18807f2e 	bgeu	r3,r2,4110ea4c <_malloc_r+0x238>
4110e850:	047ffe04 	movi	r17,-8
4110e854:	1462703a 	and	r17,r2,r17
4110e858:	8800a316 	blt	r17,zero,4110eae8 <_malloc_r+0x2d4>
4110e85c:	8940a236 	bltu	r17,r5,4110eae8 <_malloc_r+0x2d4>
4110e860:	1115e2c0 	call	41115e2c <__malloc_lock>
4110e864:	00807dc4 	movi	r2,503
4110e868:	1441e92e 	bgeu	r2,r17,4110f010 <_malloc_r+0x7fc>
4110e86c:	8804d27a 	srli	r2,r17,9
4110e870:	1000a126 	beq	r2,zero,4110eaf8 <_malloc_r+0x2e4>
4110e874:	00c00104 	movi	r3,4
4110e878:	18811e36 	bltu	r3,r2,4110ecf4 <_malloc_r+0x4e0>
4110e87c:	8804d1ba 	srli	r2,r17,6
4110e880:	12000e44 	addi	r8,r2,57
4110e884:	11c00e04 	addi	r7,r2,56
4110e888:	4209883a 	add	r4,r8,r8
4110e88c:	04d044b4 	movhi	r19,16658
4110e890:	2109883a 	add	r4,r4,r4
4110e894:	9cf17404 	addi	r19,r19,-14896
4110e898:	2109883a 	add	r4,r4,r4
4110e89c:	9909883a 	add	r4,r19,r4
4110e8a0:	24000117 	ldw	r16,4(r4)
4110e8a4:	213ffe04 	addi	r4,r4,-8
4110e8a8:	24009726 	beq	r4,r16,4110eb08 <_malloc_r+0x2f4>
4110e8ac:	80800117 	ldw	r2,4(r16)
4110e8b0:	01bfff04 	movi	r6,-4
4110e8b4:	014003c4 	movi	r5,15
4110e8b8:	1184703a 	and	r2,r2,r6
4110e8bc:	1447c83a 	sub	r3,r2,r17
4110e8c0:	28c00716 	blt	r5,r3,4110e8e0 <_malloc_r+0xcc>
4110e8c4:	1800920e 	bge	r3,zero,4110eb10 <_malloc_r+0x2fc>
4110e8c8:	84000317 	ldw	r16,12(r16)
4110e8cc:	24008e26 	beq	r4,r16,4110eb08 <_malloc_r+0x2f4>
4110e8d0:	80800117 	ldw	r2,4(r16)
4110e8d4:	1184703a 	and	r2,r2,r6
4110e8d8:	1447c83a 	sub	r3,r2,r17
4110e8dc:	28fff90e 	bge	r5,r3,4110e8c4 <__reset+0xbb0ee8c4>
4110e8e0:	3809883a 	mov	r4,r7
4110e8e4:	019044b4 	movhi	r6,16658
4110e8e8:	9c000417 	ldw	r16,16(r19)
4110e8ec:	31b17404 	addi	r6,r6,-14896
4110e8f0:	32000204 	addi	r8,r6,8
4110e8f4:	82013426 	beq	r16,r8,4110edc8 <_malloc_r+0x5b4>
4110e8f8:	80c00117 	ldw	r3,4(r16)
4110e8fc:	00bfff04 	movi	r2,-4
4110e900:	188e703a 	and	r7,r3,r2
4110e904:	3c45c83a 	sub	r2,r7,r17
4110e908:	00c003c4 	movi	r3,15
4110e90c:	18811f16 	blt	r3,r2,4110ed8c <_malloc_r+0x578>
4110e910:	32000515 	stw	r8,20(r6)
4110e914:	32000415 	stw	r8,16(r6)
4110e918:	10007f0e 	bge	r2,zero,4110eb18 <_malloc_r+0x304>
4110e91c:	00807fc4 	movi	r2,511
4110e920:	11c0fd36 	bltu	r2,r7,4110ed18 <_malloc_r+0x504>
4110e924:	3806d0fa 	srli	r3,r7,3
4110e928:	01c00044 	movi	r7,1
4110e92c:	30800117 	ldw	r2,4(r6)
4110e930:	19400044 	addi	r5,r3,1
4110e934:	294b883a 	add	r5,r5,r5
4110e938:	1807d0ba 	srai	r3,r3,2
4110e93c:	294b883a 	add	r5,r5,r5
4110e940:	294b883a 	add	r5,r5,r5
4110e944:	298b883a 	add	r5,r5,r6
4110e948:	38c6983a 	sll	r3,r7,r3
4110e94c:	29c00017 	ldw	r7,0(r5)
4110e950:	2a7ffe04 	addi	r9,r5,-8
4110e954:	1886b03a 	or	r3,r3,r2
4110e958:	82400315 	stw	r9,12(r16)
4110e95c:	81c00215 	stw	r7,8(r16)
4110e960:	30c00115 	stw	r3,4(r6)
4110e964:	2c000015 	stw	r16,0(r5)
4110e968:	3c000315 	stw	r16,12(r7)
4110e96c:	2005d0ba 	srai	r2,r4,2
4110e970:	01400044 	movi	r5,1
4110e974:	288a983a 	sll	r5,r5,r2
4110e978:	19406f36 	bltu	r3,r5,4110eb38 <_malloc_r+0x324>
4110e97c:	28c4703a 	and	r2,r5,r3
4110e980:	10000a1e 	bne	r2,zero,4110e9ac <_malloc_r+0x198>
4110e984:	00bfff04 	movi	r2,-4
4110e988:	294b883a 	add	r5,r5,r5
4110e98c:	2088703a 	and	r4,r4,r2
4110e990:	28c4703a 	and	r2,r5,r3
4110e994:	21000104 	addi	r4,r4,4
4110e998:	1000041e 	bne	r2,zero,4110e9ac <_malloc_r+0x198>
4110e99c:	294b883a 	add	r5,r5,r5
4110e9a0:	28c4703a 	and	r2,r5,r3
4110e9a4:	21000104 	addi	r4,r4,4
4110e9a8:	103ffc26 	beq	r2,zero,4110e99c <__reset+0xbb0ee99c>
4110e9ac:	02bfff04 	movi	r10,-4
4110e9b0:	024003c4 	movi	r9,15
4110e9b4:	21800044 	addi	r6,r4,1
4110e9b8:	318d883a 	add	r6,r6,r6
4110e9bc:	318d883a 	add	r6,r6,r6
4110e9c0:	318d883a 	add	r6,r6,r6
4110e9c4:	998d883a 	add	r6,r19,r6
4110e9c8:	333ffe04 	addi	r12,r6,-8
4110e9cc:	2017883a 	mov	r11,r4
4110e9d0:	31800104 	addi	r6,r6,4
4110e9d4:	34000017 	ldw	r16,0(r6)
4110e9d8:	31fffd04 	addi	r7,r6,-12
4110e9dc:	81c0041e 	bne	r16,r7,4110e9f0 <_malloc_r+0x1dc>
4110e9e0:	0000fb06 	br	4110edd0 <_malloc_r+0x5bc>
4110e9e4:	1801030e 	bge	r3,zero,4110edf4 <_malloc_r+0x5e0>
4110e9e8:	84000317 	ldw	r16,12(r16)
4110e9ec:	81c0f826 	beq	r16,r7,4110edd0 <_malloc_r+0x5bc>
4110e9f0:	80800117 	ldw	r2,4(r16)
4110e9f4:	1284703a 	and	r2,r2,r10
4110e9f8:	1447c83a 	sub	r3,r2,r17
4110e9fc:	48fff90e 	bge	r9,r3,4110e9e4 <__reset+0xbb0ee9e4>
4110ea00:	80800317 	ldw	r2,12(r16)
4110ea04:	81000217 	ldw	r4,8(r16)
4110ea08:	89400054 	ori	r5,r17,1
4110ea0c:	81400115 	stw	r5,4(r16)
4110ea10:	20800315 	stw	r2,12(r4)
4110ea14:	11000215 	stw	r4,8(r2)
4110ea18:	8463883a 	add	r17,r16,r17
4110ea1c:	9c400515 	stw	r17,20(r19)
4110ea20:	9c400415 	stw	r17,16(r19)
4110ea24:	18800054 	ori	r2,r3,1
4110ea28:	88800115 	stw	r2,4(r17)
4110ea2c:	8a000315 	stw	r8,12(r17)
4110ea30:	8a000215 	stw	r8,8(r17)
4110ea34:	88e3883a 	add	r17,r17,r3
4110ea38:	88c00015 	stw	r3,0(r17)
4110ea3c:	9009883a 	mov	r4,r18
4110ea40:	1115e500 	call	41115e50 <__malloc_unlock>
4110ea44:	80800204 	addi	r2,r16,8
4110ea48:	00001b06 	br	4110eab8 <_malloc_r+0x2a4>
4110ea4c:	04400404 	movi	r17,16
4110ea50:	89402536 	bltu	r17,r5,4110eae8 <_malloc_r+0x2d4>
4110ea54:	1115e2c0 	call	41115e2c <__malloc_lock>
4110ea58:	00800184 	movi	r2,6
4110ea5c:	01000084 	movi	r4,2
4110ea60:	04d044b4 	movhi	r19,16658
4110ea64:	1085883a 	add	r2,r2,r2
4110ea68:	9cf17404 	addi	r19,r19,-14896
4110ea6c:	1085883a 	add	r2,r2,r2
4110ea70:	9885883a 	add	r2,r19,r2
4110ea74:	14000117 	ldw	r16,4(r2)
4110ea78:	10fffe04 	addi	r3,r2,-8
4110ea7c:	80c0d926 	beq	r16,r3,4110ede4 <_malloc_r+0x5d0>
4110ea80:	80c00117 	ldw	r3,4(r16)
4110ea84:	81000317 	ldw	r4,12(r16)
4110ea88:	00bfff04 	movi	r2,-4
4110ea8c:	1884703a 	and	r2,r3,r2
4110ea90:	81400217 	ldw	r5,8(r16)
4110ea94:	8085883a 	add	r2,r16,r2
4110ea98:	10c00117 	ldw	r3,4(r2)
4110ea9c:	29000315 	stw	r4,12(r5)
4110eaa0:	21400215 	stw	r5,8(r4)
4110eaa4:	18c00054 	ori	r3,r3,1
4110eaa8:	10c00115 	stw	r3,4(r2)
4110eaac:	9009883a 	mov	r4,r18
4110eab0:	1115e500 	call	41115e50 <__malloc_unlock>
4110eab4:	80800204 	addi	r2,r16,8
4110eab8:	dfc00a17 	ldw	ra,40(sp)
4110eabc:	df000917 	ldw	fp,36(sp)
4110eac0:	ddc00817 	ldw	r23,32(sp)
4110eac4:	dd800717 	ldw	r22,28(sp)
4110eac8:	dd400617 	ldw	r21,24(sp)
4110eacc:	dd000517 	ldw	r20,20(sp)
4110ead0:	dcc00417 	ldw	r19,16(sp)
4110ead4:	dc800317 	ldw	r18,12(sp)
4110ead8:	dc400217 	ldw	r17,8(sp)
4110eadc:	dc000117 	ldw	r16,4(sp)
4110eae0:	dec00b04 	addi	sp,sp,44
4110eae4:	f800283a 	ret
4110eae8:	00800304 	movi	r2,12
4110eaec:	90800015 	stw	r2,0(r18)
4110eaf0:	0005883a 	mov	r2,zero
4110eaf4:	003ff006 	br	4110eab8 <__reset+0xbb0eeab8>
4110eaf8:	01002004 	movi	r4,128
4110eafc:	02001004 	movi	r8,64
4110eb00:	01c00fc4 	movi	r7,63
4110eb04:	003f6106 	br	4110e88c <__reset+0xbb0ee88c>
4110eb08:	4009883a 	mov	r4,r8
4110eb0c:	003f7506 	br	4110e8e4 <__reset+0xbb0ee8e4>
4110eb10:	81000317 	ldw	r4,12(r16)
4110eb14:	003fde06 	br	4110ea90 <__reset+0xbb0eea90>
4110eb18:	81c5883a 	add	r2,r16,r7
4110eb1c:	11400117 	ldw	r5,4(r2)
4110eb20:	9009883a 	mov	r4,r18
4110eb24:	29400054 	ori	r5,r5,1
4110eb28:	11400115 	stw	r5,4(r2)
4110eb2c:	1115e500 	call	41115e50 <__malloc_unlock>
4110eb30:	80800204 	addi	r2,r16,8
4110eb34:	003fe006 	br	4110eab8 <__reset+0xbb0eeab8>
4110eb38:	9c000217 	ldw	r16,8(r19)
4110eb3c:	00bfff04 	movi	r2,-4
4110eb40:	85800117 	ldw	r22,4(r16)
4110eb44:	b0ac703a 	and	r22,r22,r2
4110eb48:	b4400336 	bltu	r22,r17,4110eb58 <_malloc_r+0x344>
4110eb4c:	b445c83a 	sub	r2,r22,r17
4110eb50:	00c003c4 	movi	r3,15
4110eb54:	18805d16 	blt	r3,r2,4110eccc <_malloc_r+0x4b8>
4110eb58:	05d044b4 	movhi	r23,16658
4110eb5c:	009044b4 	movhi	r2,16658
4110eb60:	10b79b04 	addi	r2,r2,-8596
4110eb64:	bdf77004 	addi	r23,r23,-8768
4110eb68:	15400017 	ldw	r21,0(r2)
4110eb6c:	b8c00017 	ldw	r3,0(r23)
4110eb70:	00bfffc4 	movi	r2,-1
4110eb74:	858d883a 	add	r6,r16,r22
4110eb78:	8d6b883a 	add	r21,r17,r21
4110eb7c:	1880ea26 	beq	r3,r2,4110ef28 <_malloc_r+0x714>
4110eb80:	ad4403c4 	addi	r21,r21,4111
4110eb84:	00bc0004 	movi	r2,-4096
4110eb88:	a8aa703a 	and	r21,r21,r2
4110eb8c:	a80b883a 	mov	r5,r21
4110eb90:	9009883a 	mov	r4,r18
4110eb94:	d9800015 	stw	r6,0(sp)
4110eb98:	1110ac40 	call	41110ac4 <_sbrk_r>
4110eb9c:	1029883a 	mov	r20,r2
4110eba0:	00bfffc4 	movi	r2,-1
4110eba4:	d9800017 	ldw	r6,0(sp)
4110eba8:	a080e826 	beq	r20,r2,4110ef4c <_malloc_r+0x738>
4110ebac:	a180a636 	bltu	r20,r6,4110ee48 <_malloc_r+0x634>
4110ebb0:	071044b4 	movhi	fp,16658
4110ebb4:	e737a404 	addi	fp,fp,-8560
4110ebb8:	e0800017 	ldw	r2,0(fp)
4110ebbc:	a887883a 	add	r3,r21,r2
4110ebc0:	e0c00015 	stw	r3,0(fp)
4110ebc4:	3500e626 	beq	r6,r20,4110ef60 <_malloc_r+0x74c>
4110ebc8:	b9000017 	ldw	r4,0(r23)
4110ebcc:	00bfffc4 	movi	r2,-1
4110ebd0:	2080ee26 	beq	r4,r2,4110ef8c <_malloc_r+0x778>
4110ebd4:	a185c83a 	sub	r2,r20,r6
4110ebd8:	10c5883a 	add	r2,r2,r3
4110ebdc:	e0800015 	stw	r2,0(fp)
4110ebe0:	a0c001cc 	andi	r3,r20,7
4110ebe4:	1800bc26 	beq	r3,zero,4110eed8 <_malloc_r+0x6c4>
4110ebe8:	a0e9c83a 	sub	r20,r20,r3
4110ebec:	00840204 	movi	r2,4104
4110ebf0:	a5000204 	addi	r20,r20,8
4110ebf4:	10c7c83a 	sub	r3,r2,r3
4110ebf8:	a545883a 	add	r2,r20,r21
4110ebfc:	1083ffcc 	andi	r2,r2,4095
4110ec00:	18abc83a 	sub	r21,r3,r2
4110ec04:	a80b883a 	mov	r5,r21
4110ec08:	9009883a 	mov	r4,r18
4110ec0c:	1110ac40 	call	41110ac4 <_sbrk_r>
4110ec10:	00ffffc4 	movi	r3,-1
4110ec14:	10c0e126 	beq	r2,r3,4110ef9c <_malloc_r+0x788>
4110ec18:	1505c83a 	sub	r2,r2,r20
4110ec1c:	1545883a 	add	r2,r2,r21
4110ec20:	10800054 	ori	r2,r2,1
4110ec24:	e0c00017 	ldw	r3,0(fp)
4110ec28:	9d000215 	stw	r20,8(r19)
4110ec2c:	a0800115 	stw	r2,4(r20)
4110ec30:	a8c7883a 	add	r3,r21,r3
4110ec34:	e0c00015 	stw	r3,0(fp)
4110ec38:	84c00e26 	beq	r16,r19,4110ec74 <_malloc_r+0x460>
4110ec3c:	018003c4 	movi	r6,15
4110ec40:	3580a72e 	bgeu	r6,r22,4110eee0 <_malloc_r+0x6cc>
4110ec44:	81400117 	ldw	r5,4(r16)
4110ec48:	013ffe04 	movi	r4,-8
4110ec4c:	b0bffd04 	addi	r2,r22,-12
4110ec50:	1104703a 	and	r2,r2,r4
4110ec54:	2900004c 	andi	r4,r5,1
4110ec58:	2088b03a 	or	r4,r4,r2
4110ec5c:	81000115 	stw	r4,4(r16)
4110ec60:	01400144 	movi	r5,5
4110ec64:	8089883a 	add	r4,r16,r2
4110ec68:	21400115 	stw	r5,4(r4)
4110ec6c:	21400215 	stw	r5,8(r4)
4110ec70:	3080cd36 	bltu	r6,r2,4110efa8 <_malloc_r+0x794>
4110ec74:	009044b4 	movhi	r2,16658
4110ec78:	10b79a04 	addi	r2,r2,-8600
4110ec7c:	11000017 	ldw	r4,0(r2)
4110ec80:	20c0012e 	bgeu	r4,r3,4110ec88 <_malloc_r+0x474>
4110ec84:	10c00015 	stw	r3,0(r2)
4110ec88:	009044b4 	movhi	r2,16658
4110ec8c:	10b79904 	addi	r2,r2,-8604
4110ec90:	11000017 	ldw	r4,0(r2)
4110ec94:	9c000217 	ldw	r16,8(r19)
4110ec98:	20c0012e 	bgeu	r4,r3,4110eca0 <_malloc_r+0x48c>
4110ec9c:	10c00015 	stw	r3,0(r2)
4110eca0:	80c00117 	ldw	r3,4(r16)
4110eca4:	00bfff04 	movi	r2,-4
4110eca8:	1886703a 	and	r3,r3,r2
4110ecac:	1c45c83a 	sub	r2,r3,r17
4110ecb0:	1c400236 	bltu	r3,r17,4110ecbc <_malloc_r+0x4a8>
4110ecb4:	00c003c4 	movi	r3,15
4110ecb8:	18800416 	blt	r3,r2,4110eccc <_malloc_r+0x4b8>
4110ecbc:	9009883a 	mov	r4,r18
4110ecc0:	1115e500 	call	41115e50 <__malloc_unlock>
4110ecc4:	0005883a 	mov	r2,zero
4110ecc8:	003f7b06 	br	4110eab8 <__reset+0xbb0eeab8>
4110eccc:	88c00054 	ori	r3,r17,1
4110ecd0:	80c00115 	stw	r3,4(r16)
4110ecd4:	8463883a 	add	r17,r16,r17
4110ecd8:	10800054 	ori	r2,r2,1
4110ecdc:	9c400215 	stw	r17,8(r19)
4110ece0:	88800115 	stw	r2,4(r17)
4110ece4:	9009883a 	mov	r4,r18
4110ece8:	1115e500 	call	41115e50 <__malloc_unlock>
4110ecec:	80800204 	addi	r2,r16,8
4110ecf0:	003f7106 	br	4110eab8 <__reset+0xbb0eeab8>
4110ecf4:	00c00504 	movi	r3,20
4110ecf8:	18804a2e 	bgeu	r3,r2,4110ee24 <_malloc_r+0x610>
4110ecfc:	00c01504 	movi	r3,84
4110ed00:	18806e36 	bltu	r3,r2,4110eebc <_malloc_r+0x6a8>
4110ed04:	8804d33a 	srli	r2,r17,12
4110ed08:	12001bc4 	addi	r8,r2,111
4110ed0c:	11c01b84 	addi	r7,r2,110
4110ed10:	4209883a 	add	r4,r8,r8
4110ed14:	003edd06 	br	4110e88c <__reset+0xbb0ee88c>
4110ed18:	3804d27a 	srli	r2,r7,9
4110ed1c:	00c00104 	movi	r3,4
4110ed20:	1880442e 	bgeu	r3,r2,4110ee34 <_malloc_r+0x620>
4110ed24:	00c00504 	movi	r3,20
4110ed28:	18808136 	bltu	r3,r2,4110ef30 <_malloc_r+0x71c>
4110ed2c:	11401704 	addi	r5,r2,92
4110ed30:	10c016c4 	addi	r3,r2,91
4110ed34:	294b883a 	add	r5,r5,r5
4110ed38:	294b883a 	add	r5,r5,r5
4110ed3c:	294b883a 	add	r5,r5,r5
4110ed40:	994b883a 	add	r5,r19,r5
4110ed44:	28800017 	ldw	r2,0(r5)
4110ed48:	019044b4 	movhi	r6,16658
4110ed4c:	297ffe04 	addi	r5,r5,-8
4110ed50:	31b17404 	addi	r6,r6,-14896
4110ed54:	28806526 	beq	r5,r2,4110eeec <_malloc_r+0x6d8>
4110ed58:	01bfff04 	movi	r6,-4
4110ed5c:	10c00117 	ldw	r3,4(r2)
4110ed60:	1986703a 	and	r3,r3,r6
4110ed64:	38c0022e 	bgeu	r7,r3,4110ed70 <_malloc_r+0x55c>
4110ed68:	10800217 	ldw	r2,8(r2)
4110ed6c:	28bffb1e 	bne	r5,r2,4110ed5c <__reset+0xbb0eed5c>
4110ed70:	11400317 	ldw	r5,12(r2)
4110ed74:	98c00117 	ldw	r3,4(r19)
4110ed78:	81400315 	stw	r5,12(r16)
4110ed7c:	80800215 	stw	r2,8(r16)
4110ed80:	2c000215 	stw	r16,8(r5)
4110ed84:	14000315 	stw	r16,12(r2)
4110ed88:	003ef806 	br	4110e96c <__reset+0xbb0ee96c>
4110ed8c:	88c00054 	ori	r3,r17,1
4110ed90:	80c00115 	stw	r3,4(r16)
4110ed94:	8463883a 	add	r17,r16,r17
4110ed98:	34400515 	stw	r17,20(r6)
4110ed9c:	34400415 	stw	r17,16(r6)
4110eda0:	10c00054 	ori	r3,r2,1
4110eda4:	8a000315 	stw	r8,12(r17)
4110eda8:	8a000215 	stw	r8,8(r17)
4110edac:	88c00115 	stw	r3,4(r17)
4110edb0:	88a3883a 	add	r17,r17,r2
4110edb4:	88800015 	stw	r2,0(r17)
4110edb8:	9009883a 	mov	r4,r18
4110edbc:	1115e500 	call	41115e50 <__malloc_unlock>
4110edc0:	80800204 	addi	r2,r16,8
4110edc4:	003f3c06 	br	4110eab8 <__reset+0xbb0eeab8>
4110edc8:	30c00117 	ldw	r3,4(r6)
4110edcc:	003ee706 	br	4110e96c <__reset+0xbb0ee96c>
4110edd0:	5ac00044 	addi	r11,r11,1
4110edd4:	588000cc 	andi	r2,r11,3
4110edd8:	31800204 	addi	r6,r6,8
4110eddc:	103efd1e 	bne	r2,zero,4110e9d4 <__reset+0xbb0ee9d4>
4110ede0:	00002406 	br	4110ee74 <_malloc_r+0x660>
4110ede4:	14000317 	ldw	r16,12(r2)
4110ede8:	143f251e 	bne	r2,r16,4110ea80 <__reset+0xbb0eea80>
4110edec:	21000084 	addi	r4,r4,2
4110edf0:	003ebc06 	br	4110e8e4 <__reset+0xbb0ee8e4>
4110edf4:	8085883a 	add	r2,r16,r2
4110edf8:	10c00117 	ldw	r3,4(r2)
4110edfc:	81000317 	ldw	r4,12(r16)
4110ee00:	81400217 	ldw	r5,8(r16)
4110ee04:	18c00054 	ori	r3,r3,1
4110ee08:	10c00115 	stw	r3,4(r2)
4110ee0c:	29000315 	stw	r4,12(r5)
4110ee10:	21400215 	stw	r5,8(r4)
4110ee14:	9009883a 	mov	r4,r18
4110ee18:	1115e500 	call	41115e50 <__malloc_unlock>
4110ee1c:	80800204 	addi	r2,r16,8
4110ee20:	003f2506 	br	4110eab8 <__reset+0xbb0eeab8>
4110ee24:	12001704 	addi	r8,r2,92
4110ee28:	11c016c4 	addi	r7,r2,91
4110ee2c:	4209883a 	add	r4,r8,r8
4110ee30:	003e9606 	br	4110e88c <__reset+0xbb0ee88c>
4110ee34:	3804d1ba 	srli	r2,r7,6
4110ee38:	11400e44 	addi	r5,r2,57
4110ee3c:	10c00e04 	addi	r3,r2,56
4110ee40:	294b883a 	add	r5,r5,r5
4110ee44:	003fbc06 	br	4110ed38 <__reset+0xbb0eed38>
4110ee48:	84ff5926 	beq	r16,r19,4110ebb0 <__reset+0xbb0eebb0>
4110ee4c:	009044b4 	movhi	r2,16658
4110ee50:	10b17404 	addi	r2,r2,-14896
4110ee54:	14000217 	ldw	r16,8(r2)
4110ee58:	00bfff04 	movi	r2,-4
4110ee5c:	80c00117 	ldw	r3,4(r16)
4110ee60:	1886703a 	and	r3,r3,r2
4110ee64:	003f9106 	br	4110ecac <__reset+0xbb0eecac>
4110ee68:	60800217 	ldw	r2,8(r12)
4110ee6c:	213fffc4 	addi	r4,r4,-1
4110ee70:	1300651e 	bne	r2,r12,4110f008 <_malloc_r+0x7f4>
4110ee74:	208000cc 	andi	r2,r4,3
4110ee78:	633ffe04 	addi	r12,r12,-8
4110ee7c:	103ffa1e 	bne	r2,zero,4110ee68 <__reset+0xbb0eee68>
4110ee80:	98800117 	ldw	r2,4(r19)
4110ee84:	0146303a 	nor	r3,zero,r5
4110ee88:	1884703a 	and	r2,r3,r2
4110ee8c:	98800115 	stw	r2,4(r19)
4110ee90:	294b883a 	add	r5,r5,r5
4110ee94:	117f2836 	bltu	r2,r5,4110eb38 <__reset+0xbb0eeb38>
4110ee98:	283f2726 	beq	r5,zero,4110eb38 <__reset+0xbb0eeb38>
4110ee9c:	2886703a 	and	r3,r5,r2
4110eea0:	5809883a 	mov	r4,r11
4110eea4:	183ec31e 	bne	r3,zero,4110e9b4 <__reset+0xbb0ee9b4>
4110eea8:	294b883a 	add	r5,r5,r5
4110eeac:	2886703a 	and	r3,r5,r2
4110eeb0:	21000104 	addi	r4,r4,4
4110eeb4:	183ffc26 	beq	r3,zero,4110eea8 <__reset+0xbb0eeea8>
4110eeb8:	003ebe06 	br	4110e9b4 <__reset+0xbb0ee9b4>
4110eebc:	00c05504 	movi	r3,340
4110eec0:	18801236 	bltu	r3,r2,4110ef0c <_malloc_r+0x6f8>
4110eec4:	8804d3fa 	srli	r2,r17,15
4110eec8:	12001e04 	addi	r8,r2,120
4110eecc:	11c01dc4 	addi	r7,r2,119
4110eed0:	4209883a 	add	r4,r8,r8
4110eed4:	003e6d06 	br	4110e88c <__reset+0xbb0ee88c>
4110eed8:	00c40004 	movi	r3,4096
4110eedc:	003f4606 	br	4110ebf8 <__reset+0xbb0eebf8>
4110eee0:	00800044 	movi	r2,1
4110eee4:	a0800115 	stw	r2,4(r20)
4110eee8:	003f7406 	br	4110ecbc <__reset+0xbb0eecbc>
4110eeec:	1805d0ba 	srai	r2,r3,2
4110eef0:	01c00044 	movi	r7,1
4110eef4:	30c00117 	ldw	r3,4(r6)
4110eef8:	388e983a 	sll	r7,r7,r2
4110eefc:	2805883a 	mov	r2,r5
4110ef00:	38c6b03a 	or	r3,r7,r3
4110ef04:	30c00115 	stw	r3,4(r6)
4110ef08:	003f9b06 	br	4110ed78 <__reset+0xbb0eed78>
4110ef0c:	00c15504 	movi	r3,1364
4110ef10:	18801a36 	bltu	r3,r2,4110ef7c <_malloc_r+0x768>
4110ef14:	8804d4ba 	srli	r2,r17,18
4110ef18:	12001f44 	addi	r8,r2,125
4110ef1c:	11c01f04 	addi	r7,r2,124
4110ef20:	4209883a 	add	r4,r8,r8
4110ef24:	003e5906 	br	4110e88c <__reset+0xbb0ee88c>
4110ef28:	ad400404 	addi	r21,r21,16
4110ef2c:	003f1706 	br	4110eb8c <__reset+0xbb0eeb8c>
4110ef30:	00c01504 	movi	r3,84
4110ef34:	18802336 	bltu	r3,r2,4110efc4 <_malloc_r+0x7b0>
4110ef38:	3804d33a 	srli	r2,r7,12
4110ef3c:	11401bc4 	addi	r5,r2,111
4110ef40:	10c01b84 	addi	r3,r2,110
4110ef44:	294b883a 	add	r5,r5,r5
4110ef48:	003f7b06 	br	4110ed38 <__reset+0xbb0eed38>
4110ef4c:	9c000217 	ldw	r16,8(r19)
4110ef50:	00bfff04 	movi	r2,-4
4110ef54:	80c00117 	ldw	r3,4(r16)
4110ef58:	1886703a 	and	r3,r3,r2
4110ef5c:	003f5306 	br	4110ecac <__reset+0xbb0eecac>
4110ef60:	3083ffcc 	andi	r2,r6,4095
4110ef64:	103f181e 	bne	r2,zero,4110ebc8 <__reset+0xbb0eebc8>
4110ef68:	99000217 	ldw	r4,8(r19)
4110ef6c:	b545883a 	add	r2,r22,r21
4110ef70:	10800054 	ori	r2,r2,1
4110ef74:	20800115 	stw	r2,4(r4)
4110ef78:	003f3e06 	br	4110ec74 <__reset+0xbb0eec74>
4110ef7c:	01003f84 	movi	r4,254
4110ef80:	02001fc4 	movi	r8,127
4110ef84:	01c01f84 	movi	r7,126
4110ef88:	003e4006 	br	4110e88c <__reset+0xbb0ee88c>
4110ef8c:	009044b4 	movhi	r2,16658
4110ef90:	10b77004 	addi	r2,r2,-8768
4110ef94:	15000015 	stw	r20,0(r2)
4110ef98:	003f1106 	br	4110ebe0 <__reset+0xbb0eebe0>
4110ef9c:	00800044 	movi	r2,1
4110efa0:	002b883a 	mov	r21,zero
4110efa4:	003f1f06 	br	4110ec24 <__reset+0xbb0eec24>
4110efa8:	81400204 	addi	r5,r16,8
4110efac:	9009883a 	mov	r4,r18
4110efb0:	110dc280 	call	4110dc28 <_free_r>
4110efb4:	009044b4 	movhi	r2,16658
4110efb8:	10b7a404 	addi	r2,r2,-8560
4110efbc:	10c00017 	ldw	r3,0(r2)
4110efc0:	003f2c06 	br	4110ec74 <__reset+0xbb0eec74>
4110efc4:	00c05504 	movi	r3,340
4110efc8:	18800536 	bltu	r3,r2,4110efe0 <_malloc_r+0x7cc>
4110efcc:	3804d3fa 	srli	r2,r7,15
4110efd0:	11401e04 	addi	r5,r2,120
4110efd4:	10c01dc4 	addi	r3,r2,119
4110efd8:	294b883a 	add	r5,r5,r5
4110efdc:	003f5606 	br	4110ed38 <__reset+0xbb0eed38>
4110efe0:	00c15504 	movi	r3,1364
4110efe4:	18800536 	bltu	r3,r2,4110effc <_malloc_r+0x7e8>
4110efe8:	3804d4ba 	srli	r2,r7,18
4110efec:	11401f44 	addi	r5,r2,125
4110eff0:	10c01f04 	addi	r3,r2,124
4110eff4:	294b883a 	add	r5,r5,r5
4110eff8:	003f4f06 	br	4110ed38 <__reset+0xbb0eed38>
4110effc:	01403f84 	movi	r5,254
4110f000:	00c01f84 	movi	r3,126
4110f004:	003f4c06 	br	4110ed38 <__reset+0xbb0eed38>
4110f008:	98800117 	ldw	r2,4(r19)
4110f00c:	003fa006 	br	4110ee90 <__reset+0xbb0eee90>
4110f010:	8808d0fa 	srli	r4,r17,3
4110f014:	20800044 	addi	r2,r4,1
4110f018:	1085883a 	add	r2,r2,r2
4110f01c:	003e9006 	br	4110ea60 <__reset+0xbb0eea60>

4110f020 <memchr>:
4110f020:	208000cc 	andi	r2,r4,3
4110f024:	280f883a 	mov	r7,r5
4110f028:	10003426 	beq	r2,zero,4110f0fc <memchr+0xdc>
4110f02c:	30bfffc4 	addi	r2,r6,-1
4110f030:	30001a26 	beq	r6,zero,4110f09c <memchr+0x7c>
4110f034:	20c00003 	ldbu	r3,0(r4)
4110f038:	29803fcc 	andi	r6,r5,255
4110f03c:	30c0051e 	bne	r6,r3,4110f054 <memchr+0x34>
4110f040:	00001806 	br	4110f0a4 <memchr+0x84>
4110f044:	10001526 	beq	r2,zero,4110f09c <memchr+0x7c>
4110f048:	20c00003 	ldbu	r3,0(r4)
4110f04c:	10bfffc4 	addi	r2,r2,-1
4110f050:	30c01426 	beq	r6,r3,4110f0a4 <memchr+0x84>
4110f054:	21000044 	addi	r4,r4,1
4110f058:	20c000cc 	andi	r3,r4,3
4110f05c:	183ff91e 	bne	r3,zero,4110f044 <__reset+0xbb0ef044>
4110f060:	020000c4 	movi	r8,3
4110f064:	40801136 	bltu	r8,r2,4110f0ac <memchr+0x8c>
4110f068:	10000c26 	beq	r2,zero,4110f09c <memchr+0x7c>
4110f06c:	20c00003 	ldbu	r3,0(r4)
4110f070:	29403fcc 	andi	r5,r5,255
4110f074:	28c00b26 	beq	r5,r3,4110f0a4 <memchr+0x84>
4110f078:	20c00044 	addi	r3,r4,1
4110f07c:	39803fcc 	andi	r6,r7,255
4110f080:	2089883a 	add	r4,r4,r2
4110f084:	00000306 	br	4110f094 <memchr+0x74>
4110f088:	18c00044 	addi	r3,r3,1
4110f08c:	197fffc3 	ldbu	r5,-1(r3)
4110f090:	31400526 	beq	r6,r5,4110f0a8 <memchr+0x88>
4110f094:	1805883a 	mov	r2,r3
4110f098:	20fffb1e 	bne	r4,r3,4110f088 <__reset+0xbb0ef088>
4110f09c:	0005883a 	mov	r2,zero
4110f0a0:	f800283a 	ret
4110f0a4:	2005883a 	mov	r2,r4
4110f0a8:	f800283a 	ret
4110f0ac:	28c03fcc 	andi	r3,r5,255
4110f0b0:	1812923a 	slli	r9,r3,8
4110f0b4:	02ffbff4 	movhi	r11,65279
4110f0b8:	02a02074 	movhi	r10,32897
4110f0bc:	48d2b03a 	or	r9,r9,r3
4110f0c0:	4806943a 	slli	r3,r9,16
4110f0c4:	5affbfc4 	addi	r11,r11,-257
4110f0c8:	52a02004 	addi	r10,r10,-32640
4110f0cc:	48d2b03a 	or	r9,r9,r3
4110f0d0:	20c00017 	ldw	r3,0(r4)
4110f0d4:	48c6f03a 	xor	r3,r9,r3
4110f0d8:	1acd883a 	add	r6,r3,r11
4110f0dc:	00c6303a 	nor	r3,zero,r3
4110f0e0:	30c6703a 	and	r3,r6,r3
4110f0e4:	1a86703a 	and	r3,r3,r10
4110f0e8:	183fe01e 	bne	r3,zero,4110f06c <__reset+0xbb0ef06c>
4110f0ec:	10bfff04 	addi	r2,r2,-4
4110f0f0:	21000104 	addi	r4,r4,4
4110f0f4:	40bff636 	bltu	r8,r2,4110f0d0 <__reset+0xbb0ef0d0>
4110f0f8:	003fdb06 	br	4110f068 <__reset+0xbb0ef068>
4110f0fc:	3005883a 	mov	r2,r6
4110f100:	003fd706 	br	4110f060 <__reset+0xbb0ef060>

4110f104 <memmove>:
4110f104:	2005883a 	mov	r2,r4
4110f108:	29000b2e 	bgeu	r5,r4,4110f138 <memmove+0x34>
4110f10c:	298f883a 	add	r7,r5,r6
4110f110:	21c0092e 	bgeu	r4,r7,4110f138 <memmove+0x34>
4110f114:	2187883a 	add	r3,r4,r6
4110f118:	198bc83a 	sub	r5,r3,r6
4110f11c:	30004826 	beq	r6,zero,4110f240 <memmove+0x13c>
4110f120:	39ffffc4 	addi	r7,r7,-1
4110f124:	39000003 	ldbu	r4,0(r7)
4110f128:	18ffffc4 	addi	r3,r3,-1
4110f12c:	19000005 	stb	r4,0(r3)
4110f130:	28fffb1e 	bne	r5,r3,4110f120 <__reset+0xbb0ef120>
4110f134:	f800283a 	ret
4110f138:	00c003c4 	movi	r3,15
4110f13c:	1980412e 	bgeu	r3,r6,4110f244 <memmove+0x140>
4110f140:	2886b03a 	or	r3,r5,r2
4110f144:	18c000cc 	andi	r3,r3,3
4110f148:	1800401e 	bne	r3,zero,4110f24c <memmove+0x148>
4110f14c:	33fffc04 	addi	r15,r6,-16
4110f150:	781ed13a 	srli	r15,r15,4
4110f154:	28c00104 	addi	r3,r5,4
4110f158:	13400104 	addi	r13,r2,4
4110f15c:	781c913a 	slli	r14,r15,4
4110f160:	2b000204 	addi	r12,r5,8
4110f164:	12c00204 	addi	r11,r2,8
4110f168:	73800504 	addi	r14,r14,20
4110f16c:	2a800304 	addi	r10,r5,12
4110f170:	12400304 	addi	r9,r2,12
4110f174:	2b9d883a 	add	r14,r5,r14
4110f178:	2811883a 	mov	r8,r5
4110f17c:	100f883a 	mov	r7,r2
4110f180:	41000017 	ldw	r4,0(r8)
4110f184:	39c00404 	addi	r7,r7,16
4110f188:	18c00404 	addi	r3,r3,16
4110f18c:	393ffc15 	stw	r4,-16(r7)
4110f190:	193ffc17 	ldw	r4,-16(r3)
4110f194:	6b400404 	addi	r13,r13,16
4110f198:	5ac00404 	addi	r11,r11,16
4110f19c:	693ffc15 	stw	r4,-16(r13)
4110f1a0:	61000017 	ldw	r4,0(r12)
4110f1a4:	4a400404 	addi	r9,r9,16
4110f1a8:	42000404 	addi	r8,r8,16
4110f1ac:	593ffc15 	stw	r4,-16(r11)
4110f1b0:	51000017 	ldw	r4,0(r10)
4110f1b4:	63000404 	addi	r12,r12,16
4110f1b8:	52800404 	addi	r10,r10,16
4110f1bc:	493ffc15 	stw	r4,-16(r9)
4110f1c0:	1bbfef1e 	bne	r3,r14,4110f180 <__reset+0xbb0ef180>
4110f1c4:	79000044 	addi	r4,r15,1
4110f1c8:	2008913a 	slli	r4,r4,4
4110f1cc:	328003cc 	andi	r10,r6,15
4110f1d0:	02c000c4 	movi	r11,3
4110f1d4:	1107883a 	add	r3,r2,r4
4110f1d8:	290b883a 	add	r5,r5,r4
4110f1dc:	5a801e2e 	bgeu	r11,r10,4110f258 <memmove+0x154>
4110f1e0:	1813883a 	mov	r9,r3
4110f1e4:	2811883a 	mov	r8,r5
4110f1e8:	500f883a 	mov	r7,r10
4110f1ec:	41000017 	ldw	r4,0(r8)
4110f1f0:	4a400104 	addi	r9,r9,4
4110f1f4:	39ffff04 	addi	r7,r7,-4
4110f1f8:	493fff15 	stw	r4,-4(r9)
4110f1fc:	42000104 	addi	r8,r8,4
4110f200:	59fffa36 	bltu	r11,r7,4110f1ec <__reset+0xbb0ef1ec>
4110f204:	513fff04 	addi	r4,r10,-4
4110f208:	2008d0ba 	srli	r4,r4,2
4110f20c:	318000cc 	andi	r6,r6,3
4110f210:	21000044 	addi	r4,r4,1
4110f214:	2109883a 	add	r4,r4,r4
4110f218:	2109883a 	add	r4,r4,r4
4110f21c:	1907883a 	add	r3,r3,r4
4110f220:	290b883a 	add	r5,r5,r4
4110f224:	30000b26 	beq	r6,zero,4110f254 <memmove+0x150>
4110f228:	198d883a 	add	r6,r3,r6
4110f22c:	29c00003 	ldbu	r7,0(r5)
4110f230:	18c00044 	addi	r3,r3,1
4110f234:	29400044 	addi	r5,r5,1
4110f238:	19ffffc5 	stb	r7,-1(r3)
4110f23c:	19bffb1e 	bne	r3,r6,4110f22c <__reset+0xbb0ef22c>
4110f240:	f800283a 	ret
4110f244:	1007883a 	mov	r3,r2
4110f248:	003ff606 	br	4110f224 <__reset+0xbb0ef224>
4110f24c:	1007883a 	mov	r3,r2
4110f250:	003ff506 	br	4110f228 <__reset+0xbb0ef228>
4110f254:	f800283a 	ret
4110f258:	500d883a 	mov	r6,r10
4110f25c:	003ff106 	br	4110f224 <__reset+0xbb0ef224>

4110f260 <memset>:
4110f260:	20c000cc 	andi	r3,r4,3
4110f264:	2005883a 	mov	r2,r4
4110f268:	18004426 	beq	r3,zero,4110f37c <memset+0x11c>
4110f26c:	31ffffc4 	addi	r7,r6,-1
4110f270:	30004026 	beq	r6,zero,4110f374 <memset+0x114>
4110f274:	2813883a 	mov	r9,r5
4110f278:	200d883a 	mov	r6,r4
4110f27c:	2007883a 	mov	r3,r4
4110f280:	00000406 	br	4110f294 <memset+0x34>
4110f284:	3a3fffc4 	addi	r8,r7,-1
4110f288:	31800044 	addi	r6,r6,1
4110f28c:	38003926 	beq	r7,zero,4110f374 <memset+0x114>
4110f290:	400f883a 	mov	r7,r8
4110f294:	18c00044 	addi	r3,r3,1
4110f298:	32400005 	stb	r9,0(r6)
4110f29c:	1a0000cc 	andi	r8,r3,3
4110f2a0:	403ff81e 	bne	r8,zero,4110f284 <__reset+0xbb0ef284>
4110f2a4:	010000c4 	movi	r4,3
4110f2a8:	21c02d2e 	bgeu	r4,r7,4110f360 <memset+0x100>
4110f2ac:	29003fcc 	andi	r4,r5,255
4110f2b0:	200c923a 	slli	r6,r4,8
4110f2b4:	3108b03a 	or	r4,r6,r4
4110f2b8:	200c943a 	slli	r6,r4,16
4110f2bc:	218cb03a 	or	r6,r4,r6
4110f2c0:	010003c4 	movi	r4,15
4110f2c4:	21c0182e 	bgeu	r4,r7,4110f328 <memset+0xc8>
4110f2c8:	3b3ffc04 	addi	r12,r7,-16
4110f2cc:	6018d13a 	srli	r12,r12,4
4110f2d0:	1a000104 	addi	r8,r3,4
4110f2d4:	1ac00204 	addi	r11,r3,8
4110f2d8:	6008913a 	slli	r4,r12,4
4110f2dc:	1a800304 	addi	r10,r3,12
4110f2e0:	1813883a 	mov	r9,r3
4110f2e4:	21000504 	addi	r4,r4,20
4110f2e8:	1909883a 	add	r4,r3,r4
4110f2ec:	49800015 	stw	r6,0(r9)
4110f2f0:	41800015 	stw	r6,0(r8)
4110f2f4:	59800015 	stw	r6,0(r11)
4110f2f8:	51800015 	stw	r6,0(r10)
4110f2fc:	42000404 	addi	r8,r8,16
4110f300:	4a400404 	addi	r9,r9,16
4110f304:	5ac00404 	addi	r11,r11,16
4110f308:	52800404 	addi	r10,r10,16
4110f30c:	413ff71e 	bne	r8,r4,4110f2ec <__reset+0xbb0ef2ec>
4110f310:	63000044 	addi	r12,r12,1
4110f314:	6018913a 	slli	r12,r12,4
4110f318:	39c003cc 	andi	r7,r7,15
4110f31c:	010000c4 	movi	r4,3
4110f320:	1b07883a 	add	r3,r3,r12
4110f324:	21c00e2e 	bgeu	r4,r7,4110f360 <memset+0x100>
4110f328:	1813883a 	mov	r9,r3
4110f32c:	3811883a 	mov	r8,r7
4110f330:	010000c4 	movi	r4,3
4110f334:	49800015 	stw	r6,0(r9)
4110f338:	423fff04 	addi	r8,r8,-4
4110f33c:	4a400104 	addi	r9,r9,4
4110f340:	223ffc36 	bltu	r4,r8,4110f334 <__reset+0xbb0ef334>
4110f344:	393fff04 	addi	r4,r7,-4
4110f348:	2008d0ba 	srli	r4,r4,2
4110f34c:	39c000cc 	andi	r7,r7,3
4110f350:	21000044 	addi	r4,r4,1
4110f354:	2109883a 	add	r4,r4,r4
4110f358:	2109883a 	add	r4,r4,r4
4110f35c:	1907883a 	add	r3,r3,r4
4110f360:	38000526 	beq	r7,zero,4110f378 <memset+0x118>
4110f364:	19cf883a 	add	r7,r3,r7
4110f368:	19400005 	stb	r5,0(r3)
4110f36c:	18c00044 	addi	r3,r3,1
4110f370:	38fffd1e 	bne	r7,r3,4110f368 <__reset+0xbb0ef368>
4110f374:	f800283a 	ret
4110f378:	f800283a 	ret
4110f37c:	2007883a 	mov	r3,r4
4110f380:	300f883a 	mov	r7,r6
4110f384:	003fc706 	br	4110f2a4 <__reset+0xbb0ef2a4>

4110f388 <_Balloc>:
4110f388:	20801317 	ldw	r2,76(r4)
4110f38c:	defffc04 	addi	sp,sp,-16
4110f390:	dc400115 	stw	r17,4(sp)
4110f394:	dc000015 	stw	r16,0(sp)
4110f398:	dfc00315 	stw	ra,12(sp)
4110f39c:	dc800215 	stw	r18,8(sp)
4110f3a0:	2023883a 	mov	r17,r4
4110f3a4:	2821883a 	mov	r16,r5
4110f3a8:	10000f26 	beq	r2,zero,4110f3e8 <_Balloc+0x60>
4110f3ac:	8407883a 	add	r3,r16,r16
4110f3b0:	18c7883a 	add	r3,r3,r3
4110f3b4:	10c7883a 	add	r3,r2,r3
4110f3b8:	18800017 	ldw	r2,0(r3)
4110f3bc:	10001126 	beq	r2,zero,4110f404 <_Balloc+0x7c>
4110f3c0:	11000017 	ldw	r4,0(r2)
4110f3c4:	19000015 	stw	r4,0(r3)
4110f3c8:	10000415 	stw	zero,16(r2)
4110f3cc:	10000315 	stw	zero,12(r2)
4110f3d0:	dfc00317 	ldw	ra,12(sp)
4110f3d4:	dc800217 	ldw	r18,8(sp)
4110f3d8:	dc400117 	ldw	r17,4(sp)
4110f3dc:	dc000017 	ldw	r16,0(sp)
4110f3e0:	dec00404 	addi	sp,sp,16
4110f3e4:	f800283a 	ret
4110f3e8:	01800844 	movi	r6,33
4110f3ec:	01400104 	movi	r5,4
4110f3f0:	11125840 	call	41112584 <_calloc_r>
4110f3f4:	88801315 	stw	r2,76(r17)
4110f3f8:	103fec1e 	bne	r2,zero,4110f3ac <__reset+0xbb0ef3ac>
4110f3fc:	0005883a 	mov	r2,zero
4110f400:	003ff306 	br	4110f3d0 <__reset+0xbb0ef3d0>
4110f404:	01400044 	movi	r5,1
4110f408:	2c24983a 	sll	r18,r5,r16
4110f40c:	8809883a 	mov	r4,r17
4110f410:	91800144 	addi	r6,r18,5
4110f414:	318d883a 	add	r6,r6,r6
4110f418:	318d883a 	add	r6,r6,r6
4110f41c:	11125840 	call	41112584 <_calloc_r>
4110f420:	103ff626 	beq	r2,zero,4110f3fc <__reset+0xbb0ef3fc>
4110f424:	14000115 	stw	r16,4(r2)
4110f428:	14800215 	stw	r18,8(r2)
4110f42c:	003fe606 	br	4110f3c8 <__reset+0xbb0ef3c8>

4110f430 <_Bfree>:
4110f430:	28000826 	beq	r5,zero,4110f454 <_Bfree+0x24>
4110f434:	28c00117 	ldw	r3,4(r5)
4110f438:	20801317 	ldw	r2,76(r4)
4110f43c:	18c7883a 	add	r3,r3,r3
4110f440:	18c7883a 	add	r3,r3,r3
4110f444:	10c5883a 	add	r2,r2,r3
4110f448:	10c00017 	ldw	r3,0(r2)
4110f44c:	28c00015 	stw	r3,0(r5)
4110f450:	11400015 	stw	r5,0(r2)
4110f454:	f800283a 	ret

4110f458 <__multadd>:
4110f458:	defffa04 	addi	sp,sp,-24
4110f45c:	dc800315 	stw	r18,12(sp)
4110f460:	dc400215 	stw	r17,8(sp)
4110f464:	dc000115 	stw	r16,4(sp)
4110f468:	2823883a 	mov	r17,r5
4110f46c:	2c000417 	ldw	r16,16(r5)
4110f470:	dfc00515 	stw	ra,20(sp)
4110f474:	dcc00415 	stw	r19,16(sp)
4110f478:	2025883a 	mov	r18,r4
4110f47c:	29400504 	addi	r5,r5,20
4110f480:	0011883a 	mov	r8,zero
4110f484:	28c00017 	ldw	r3,0(r5)
4110f488:	29400104 	addi	r5,r5,4
4110f48c:	42000044 	addi	r8,r8,1
4110f490:	18bfffcc 	andi	r2,r3,65535
4110f494:	1185383a 	mul	r2,r2,r6
4110f498:	1806d43a 	srli	r3,r3,16
4110f49c:	11cf883a 	add	r7,r2,r7
4110f4a0:	3808d43a 	srli	r4,r7,16
4110f4a4:	1987383a 	mul	r3,r3,r6
4110f4a8:	38bfffcc 	andi	r2,r7,65535
4110f4ac:	1907883a 	add	r3,r3,r4
4110f4b0:	1808943a 	slli	r4,r3,16
4110f4b4:	180ed43a 	srli	r7,r3,16
4110f4b8:	2085883a 	add	r2,r4,r2
4110f4bc:	28bfff15 	stw	r2,-4(r5)
4110f4c0:	443ff016 	blt	r8,r16,4110f484 <__reset+0xbb0ef484>
4110f4c4:	38000926 	beq	r7,zero,4110f4ec <__multadd+0x94>
4110f4c8:	88800217 	ldw	r2,8(r17)
4110f4cc:	80800f0e 	bge	r16,r2,4110f50c <__multadd+0xb4>
4110f4d0:	80800144 	addi	r2,r16,5
4110f4d4:	1085883a 	add	r2,r2,r2
4110f4d8:	1085883a 	add	r2,r2,r2
4110f4dc:	8885883a 	add	r2,r17,r2
4110f4e0:	11c00015 	stw	r7,0(r2)
4110f4e4:	84000044 	addi	r16,r16,1
4110f4e8:	8c000415 	stw	r16,16(r17)
4110f4ec:	8805883a 	mov	r2,r17
4110f4f0:	dfc00517 	ldw	ra,20(sp)
4110f4f4:	dcc00417 	ldw	r19,16(sp)
4110f4f8:	dc800317 	ldw	r18,12(sp)
4110f4fc:	dc400217 	ldw	r17,8(sp)
4110f500:	dc000117 	ldw	r16,4(sp)
4110f504:	dec00604 	addi	sp,sp,24
4110f508:	f800283a 	ret
4110f50c:	89400117 	ldw	r5,4(r17)
4110f510:	9009883a 	mov	r4,r18
4110f514:	d9c00015 	stw	r7,0(sp)
4110f518:	29400044 	addi	r5,r5,1
4110f51c:	110f3880 	call	4110f388 <_Balloc>
4110f520:	89800417 	ldw	r6,16(r17)
4110f524:	89400304 	addi	r5,r17,12
4110f528:	11000304 	addi	r4,r2,12
4110f52c:	31800084 	addi	r6,r6,2
4110f530:	318d883a 	add	r6,r6,r6
4110f534:	318d883a 	add	r6,r6,r6
4110f538:	1027883a 	mov	r19,r2
4110f53c:	11094d00 	call	411094d0 <memcpy>
4110f540:	d9c00017 	ldw	r7,0(sp)
4110f544:	88000a26 	beq	r17,zero,4110f570 <__multadd+0x118>
4110f548:	88c00117 	ldw	r3,4(r17)
4110f54c:	90801317 	ldw	r2,76(r18)
4110f550:	18c7883a 	add	r3,r3,r3
4110f554:	18c7883a 	add	r3,r3,r3
4110f558:	10c5883a 	add	r2,r2,r3
4110f55c:	10c00017 	ldw	r3,0(r2)
4110f560:	88c00015 	stw	r3,0(r17)
4110f564:	14400015 	stw	r17,0(r2)
4110f568:	9823883a 	mov	r17,r19
4110f56c:	003fd806 	br	4110f4d0 <__reset+0xbb0ef4d0>
4110f570:	9823883a 	mov	r17,r19
4110f574:	003fd606 	br	4110f4d0 <__reset+0xbb0ef4d0>

4110f578 <__s2b>:
4110f578:	defff904 	addi	sp,sp,-28
4110f57c:	dc400115 	stw	r17,4(sp)
4110f580:	dc000015 	stw	r16,0(sp)
4110f584:	2023883a 	mov	r17,r4
4110f588:	2821883a 	mov	r16,r5
4110f58c:	39000204 	addi	r4,r7,8
4110f590:	01400244 	movi	r5,9
4110f594:	dcc00315 	stw	r19,12(sp)
4110f598:	dc800215 	stw	r18,8(sp)
4110f59c:	dfc00615 	stw	ra,24(sp)
4110f5a0:	dd400515 	stw	r21,20(sp)
4110f5a4:	dd000415 	stw	r20,16(sp)
4110f5a8:	3825883a 	mov	r18,r7
4110f5ac:	3027883a 	mov	r19,r6
4110f5b0:	111375c0 	call	4111375c <__divsi3>
4110f5b4:	00c00044 	movi	r3,1
4110f5b8:	000b883a 	mov	r5,zero
4110f5bc:	1880030e 	bge	r3,r2,4110f5cc <__s2b+0x54>
4110f5c0:	18c7883a 	add	r3,r3,r3
4110f5c4:	29400044 	addi	r5,r5,1
4110f5c8:	18bffd16 	blt	r3,r2,4110f5c0 <__reset+0xbb0ef5c0>
4110f5cc:	8809883a 	mov	r4,r17
4110f5d0:	110f3880 	call	4110f388 <_Balloc>
4110f5d4:	d8c00717 	ldw	r3,28(sp)
4110f5d8:	10c00515 	stw	r3,20(r2)
4110f5dc:	00c00044 	movi	r3,1
4110f5e0:	10c00415 	stw	r3,16(r2)
4110f5e4:	00c00244 	movi	r3,9
4110f5e8:	1cc0210e 	bge	r3,r19,4110f670 <__s2b+0xf8>
4110f5ec:	80eb883a 	add	r21,r16,r3
4110f5f0:	a829883a 	mov	r20,r21
4110f5f4:	84e1883a 	add	r16,r16,r19
4110f5f8:	a1c00007 	ldb	r7,0(r20)
4110f5fc:	01800284 	movi	r6,10
4110f600:	a5000044 	addi	r20,r20,1
4110f604:	100b883a 	mov	r5,r2
4110f608:	39fff404 	addi	r7,r7,-48
4110f60c:	8809883a 	mov	r4,r17
4110f610:	110f4580 	call	4110f458 <__multadd>
4110f614:	a43ff81e 	bne	r20,r16,4110f5f8 <__reset+0xbb0ef5f8>
4110f618:	ace1883a 	add	r16,r21,r19
4110f61c:	843ffe04 	addi	r16,r16,-8
4110f620:	9c800a0e 	bge	r19,r18,4110f64c <__s2b+0xd4>
4110f624:	94e5c83a 	sub	r18,r18,r19
4110f628:	84a5883a 	add	r18,r16,r18
4110f62c:	81c00007 	ldb	r7,0(r16)
4110f630:	01800284 	movi	r6,10
4110f634:	84000044 	addi	r16,r16,1
4110f638:	100b883a 	mov	r5,r2
4110f63c:	39fff404 	addi	r7,r7,-48
4110f640:	8809883a 	mov	r4,r17
4110f644:	110f4580 	call	4110f458 <__multadd>
4110f648:	84bff81e 	bne	r16,r18,4110f62c <__reset+0xbb0ef62c>
4110f64c:	dfc00617 	ldw	ra,24(sp)
4110f650:	dd400517 	ldw	r21,20(sp)
4110f654:	dd000417 	ldw	r20,16(sp)
4110f658:	dcc00317 	ldw	r19,12(sp)
4110f65c:	dc800217 	ldw	r18,8(sp)
4110f660:	dc400117 	ldw	r17,4(sp)
4110f664:	dc000017 	ldw	r16,0(sp)
4110f668:	dec00704 	addi	sp,sp,28
4110f66c:	f800283a 	ret
4110f670:	84000284 	addi	r16,r16,10
4110f674:	1827883a 	mov	r19,r3
4110f678:	003fe906 	br	4110f620 <__reset+0xbb0ef620>

4110f67c <__hi0bits>:
4110f67c:	20bfffec 	andhi	r2,r4,65535
4110f680:	1000141e 	bne	r2,zero,4110f6d4 <__hi0bits+0x58>
4110f684:	2008943a 	slli	r4,r4,16
4110f688:	00800404 	movi	r2,16
4110f68c:	20ffc02c 	andhi	r3,r4,65280
4110f690:	1800021e 	bne	r3,zero,4110f69c <__hi0bits+0x20>
4110f694:	2008923a 	slli	r4,r4,8
4110f698:	10800204 	addi	r2,r2,8
4110f69c:	20fc002c 	andhi	r3,r4,61440
4110f6a0:	1800021e 	bne	r3,zero,4110f6ac <__hi0bits+0x30>
4110f6a4:	2008913a 	slli	r4,r4,4
4110f6a8:	10800104 	addi	r2,r2,4
4110f6ac:	20f0002c 	andhi	r3,r4,49152
4110f6b0:	1800031e 	bne	r3,zero,4110f6c0 <__hi0bits+0x44>
4110f6b4:	2109883a 	add	r4,r4,r4
4110f6b8:	10800084 	addi	r2,r2,2
4110f6bc:	2109883a 	add	r4,r4,r4
4110f6c0:	20000316 	blt	r4,zero,4110f6d0 <__hi0bits+0x54>
4110f6c4:	2110002c 	andhi	r4,r4,16384
4110f6c8:	2000041e 	bne	r4,zero,4110f6dc <__hi0bits+0x60>
4110f6cc:	00800804 	movi	r2,32
4110f6d0:	f800283a 	ret
4110f6d4:	0005883a 	mov	r2,zero
4110f6d8:	003fec06 	br	4110f68c <__reset+0xbb0ef68c>
4110f6dc:	10800044 	addi	r2,r2,1
4110f6e0:	f800283a 	ret

4110f6e4 <__lo0bits>:
4110f6e4:	20c00017 	ldw	r3,0(r4)
4110f6e8:	188001cc 	andi	r2,r3,7
4110f6ec:	10000826 	beq	r2,zero,4110f710 <__lo0bits+0x2c>
4110f6f0:	1880004c 	andi	r2,r3,1
4110f6f4:	1000211e 	bne	r2,zero,4110f77c <__lo0bits+0x98>
4110f6f8:	1880008c 	andi	r2,r3,2
4110f6fc:	1000211e 	bne	r2,zero,4110f784 <__lo0bits+0xa0>
4110f700:	1806d0ba 	srli	r3,r3,2
4110f704:	00800084 	movi	r2,2
4110f708:	20c00015 	stw	r3,0(r4)
4110f70c:	f800283a 	ret
4110f710:	18bfffcc 	andi	r2,r3,65535
4110f714:	10001326 	beq	r2,zero,4110f764 <__lo0bits+0x80>
4110f718:	0005883a 	mov	r2,zero
4110f71c:	19403fcc 	andi	r5,r3,255
4110f720:	2800021e 	bne	r5,zero,4110f72c <__lo0bits+0x48>
4110f724:	1806d23a 	srli	r3,r3,8
4110f728:	10800204 	addi	r2,r2,8
4110f72c:	194003cc 	andi	r5,r3,15
4110f730:	2800021e 	bne	r5,zero,4110f73c <__lo0bits+0x58>
4110f734:	1806d13a 	srli	r3,r3,4
4110f738:	10800104 	addi	r2,r2,4
4110f73c:	194000cc 	andi	r5,r3,3
4110f740:	2800021e 	bne	r5,zero,4110f74c <__lo0bits+0x68>
4110f744:	1806d0ba 	srli	r3,r3,2
4110f748:	10800084 	addi	r2,r2,2
4110f74c:	1940004c 	andi	r5,r3,1
4110f750:	2800081e 	bne	r5,zero,4110f774 <__lo0bits+0x90>
4110f754:	1806d07a 	srli	r3,r3,1
4110f758:	1800051e 	bne	r3,zero,4110f770 <__lo0bits+0x8c>
4110f75c:	00800804 	movi	r2,32
4110f760:	f800283a 	ret
4110f764:	1806d43a 	srli	r3,r3,16
4110f768:	00800404 	movi	r2,16
4110f76c:	003feb06 	br	4110f71c <__reset+0xbb0ef71c>
4110f770:	10800044 	addi	r2,r2,1
4110f774:	20c00015 	stw	r3,0(r4)
4110f778:	f800283a 	ret
4110f77c:	0005883a 	mov	r2,zero
4110f780:	f800283a 	ret
4110f784:	1806d07a 	srli	r3,r3,1
4110f788:	00800044 	movi	r2,1
4110f78c:	20c00015 	stw	r3,0(r4)
4110f790:	f800283a 	ret

4110f794 <__i2b>:
4110f794:	defffd04 	addi	sp,sp,-12
4110f798:	dc000015 	stw	r16,0(sp)
4110f79c:	04000044 	movi	r16,1
4110f7a0:	dc400115 	stw	r17,4(sp)
4110f7a4:	2823883a 	mov	r17,r5
4110f7a8:	800b883a 	mov	r5,r16
4110f7ac:	dfc00215 	stw	ra,8(sp)
4110f7b0:	110f3880 	call	4110f388 <_Balloc>
4110f7b4:	14400515 	stw	r17,20(r2)
4110f7b8:	14000415 	stw	r16,16(r2)
4110f7bc:	dfc00217 	ldw	ra,8(sp)
4110f7c0:	dc400117 	ldw	r17,4(sp)
4110f7c4:	dc000017 	ldw	r16,0(sp)
4110f7c8:	dec00304 	addi	sp,sp,12
4110f7cc:	f800283a 	ret

4110f7d0 <__multiply>:
4110f7d0:	defffa04 	addi	sp,sp,-24
4110f7d4:	dcc00315 	stw	r19,12(sp)
4110f7d8:	dc800215 	stw	r18,8(sp)
4110f7dc:	34c00417 	ldw	r19,16(r6)
4110f7e0:	2c800417 	ldw	r18,16(r5)
4110f7e4:	dd000415 	stw	r20,16(sp)
4110f7e8:	dc400115 	stw	r17,4(sp)
4110f7ec:	dfc00515 	stw	ra,20(sp)
4110f7f0:	dc000015 	stw	r16,0(sp)
4110f7f4:	2829883a 	mov	r20,r5
4110f7f8:	3023883a 	mov	r17,r6
4110f7fc:	94c0050e 	bge	r18,r19,4110f814 <__multiply+0x44>
4110f800:	9007883a 	mov	r3,r18
4110f804:	3029883a 	mov	r20,r6
4110f808:	9825883a 	mov	r18,r19
4110f80c:	2823883a 	mov	r17,r5
4110f810:	1827883a 	mov	r19,r3
4110f814:	a0800217 	ldw	r2,8(r20)
4110f818:	94e1883a 	add	r16,r18,r19
4110f81c:	a1400117 	ldw	r5,4(r20)
4110f820:	1400010e 	bge	r2,r16,4110f828 <__multiply+0x58>
4110f824:	29400044 	addi	r5,r5,1
4110f828:	110f3880 	call	4110f388 <_Balloc>
4110f82c:	8415883a 	add	r10,r16,r16
4110f830:	12c00504 	addi	r11,r2,20
4110f834:	5295883a 	add	r10,r10,r10
4110f838:	5a95883a 	add	r10,r11,r10
4110f83c:	5807883a 	mov	r3,r11
4110f840:	5a80032e 	bgeu	r11,r10,4110f850 <__multiply+0x80>
4110f844:	18000015 	stw	zero,0(r3)
4110f848:	18c00104 	addi	r3,r3,4
4110f84c:	1abffd36 	bltu	r3,r10,4110f844 <__reset+0xbb0ef844>
4110f850:	9ce7883a 	add	r19,r19,r19
4110f854:	94a5883a 	add	r18,r18,r18
4110f858:	89800504 	addi	r6,r17,20
4110f85c:	9ce7883a 	add	r19,r19,r19
4110f860:	a3400504 	addi	r13,r20,20
4110f864:	94a5883a 	add	r18,r18,r18
4110f868:	34d9883a 	add	r12,r6,r19
4110f86c:	6c93883a 	add	r9,r13,r18
4110f870:	3300422e 	bgeu	r6,r12,4110f97c <__multiply+0x1ac>
4110f874:	37c00017 	ldw	ra,0(r6)
4110f878:	fbffffcc 	andi	r15,ra,65535
4110f87c:	78001b26 	beq	r15,zero,4110f8ec <__multiply+0x11c>
4110f880:	5811883a 	mov	r8,r11
4110f884:	681d883a 	mov	r14,r13
4110f888:	000f883a 	mov	r7,zero
4110f88c:	71000017 	ldw	r4,0(r14)
4110f890:	40c00017 	ldw	r3,0(r8)
4110f894:	73800104 	addi	r14,r14,4
4110f898:	217fffcc 	andi	r5,r4,65535
4110f89c:	2bcb383a 	mul	r5,r5,r15
4110f8a0:	2008d43a 	srli	r4,r4,16
4110f8a4:	1c7fffcc 	andi	r17,r3,65535
4110f8a8:	2c4b883a 	add	r5,r5,r17
4110f8ac:	29cb883a 	add	r5,r5,r7
4110f8b0:	23c9383a 	mul	r4,r4,r15
4110f8b4:	1806d43a 	srli	r3,r3,16
4110f8b8:	280ed43a 	srli	r7,r5,16
4110f8bc:	297fffcc 	andi	r5,r5,65535
4110f8c0:	20c7883a 	add	r3,r4,r3
4110f8c4:	19c7883a 	add	r3,r3,r7
4110f8c8:	1808943a 	slli	r4,r3,16
4110f8cc:	4023883a 	mov	r17,r8
4110f8d0:	180ed43a 	srli	r7,r3,16
4110f8d4:	214ab03a 	or	r5,r4,r5
4110f8d8:	41400015 	stw	r5,0(r8)
4110f8dc:	42000104 	addi	r8,r8,4
4110f8e0:	727fea36 	bltu	r14,r9,4110f88c <__reset+0xbb0ef88c>
4110f8e4:	89c00115 	stw	r7,4(r17)
4110f8e8:	37c00017 	ldw	ra,0(r6)
4110f8ec:	f83ed43a 	srli	ra,ra,16
4110f8f0:	f8001f26 	beq	ra,zero,4110f970 <__multiply+0x1a0>
4110f8f4:	58c00017 	ldw	r3,0(r11)
4110f8f8:	681d883a 	mov	r14,r13
4110f8fc:	581f883a 	mov	r15,r11
4110f900:	1811883a 	mov	r8,r3
4110f904:	5825883a 	mov	r18,r11
4110f908:	000f883a 	mov	r7,zero
4110f90c:	00000106 	br	4110f914 <__multiply+0x144>
4110f910:	8825883a 	mov	r18,r17
4110f914:	7140000b 	ldhu	r5,0(r14)
4110f918:	4010d43a 	srli	r8,r8,16
4110f91c:	193fffcc 	andi	r4,r3,65535
4110f920:	2fcb383a 	mul	r5,r5,ra
4110f924:	7bc00104 	addi	r15,r15,4
4110f928:	73800104 	addi	r14,r14,4
4110f92c:	2a0b883a 	add	r5,r5,r8
4110f930:	29cb883a 	add	r5,r5,r7
4110f934:	2806943a 	slli	r3,r5,16
4110f938:	94400104 	addi	r17,r18,4
4110f93c:	280ad43a 	srli	r5,r5,16
4110f940:	1908b03a 	or	r4,r3,r4
4110f944:	793fff15 	stw	r4,-4(r15)
4110f948:	70ffff17 	ldw	r3,-4(r14)
4110f94c:	8a000017 	ldw	r8,0(r17)
4110f950:	1806d43a 	srli	r3,r3,16
4110f954:	413fffcc 	andi	r4,r8,65535
4110f958:	1fc7383a 	mul	r3,r3,ra
4110f95c:	1907883a 	add	r3,r3,r4
4110f960:	1947883a 	add	r3,r3,r5
4110f964:	180ed43a 	srli	r7,r3,16
4110f968:	727fe936 	bltu	r14,r9,4110f910 <__reset+0xbb0ef910>
4110f96c:	90c00115 	stw	r3,4(r18)
4110f970:	31800104 	addi	r6,r6,4
4110f974:	5ac00104 	addi	r11,r11,4
4110f978:	333fbe36 	bltu	r6,r12,4110f874 <__reset+0xbb0ef874>
4110f97c:	0400090e 	bge	zero,r16,4110f9a4 <__multiply+0x1d4>
4110f980:	50ffff17 	ldw	r3,-4(r10)
4110f984:	52bfff04 	addi	r10,r10,-4
4110f988:	18000326 	beq	r3,zero,4110f998 <__multiply+0x1c8>
4110f98c:	00000506 	br	4110f9a4 <__multiply+0x1d4>
4110f990:	50c00017 	ldw	r3,0(r10)
4110f994:	1800031e 	bne	r3,zero,4110f9a4 <__multiply+0x1d4>
4110f998:	843fffc4 	addi	r16,r16,-1
4110f99c:	52bfff04 	addi	r10,r10,-4
4110f9a0:	803ffb1e 	bne	r16,zero,4110f990 <__reset+0xbb0ef990>
4110f9a4:	14000415 	stw	r16,16(r2)
4110f9a8:	dfc00517 	ldw	ra,20(sp)
4110f9ac:	dd000417 	ldw	r20,16(sp)
4110f9b0:	dcc00317 	ldw	r19,12(sp)
4110f9b4:	dc800217 	ldw	r18,8(sp)
4110f9b8:	dc400117 	ldw	r17,4(sp)
4110f9bc:	dc000017 	ldw	r16,0(sp)
4110f9c0:	dec00604 	addi	sp,sp,24
4110f9c4:	f800283a 	ret

4110f9c8 <__pow5mult>:
4110f9c8:	defffa04 	addi	sp,sp,-24
4110f9cc:	dcc00315 	stw	r19,12(sp)
4110f9d0:	dc000015 	stw	r16,0(sp)
4110f9d4:	dfc00515 	stw	ra,20(sp)
4110f9d8:	dd000415 	stw	r20,16(sp)
4110f9dc:	dc800215 	stw	r18,8(sp)
4110f9e0:	dc400115 	stw	r17,4(sp)
4110f9e4:	308000cc 	andi	r2,r6,3
4110f9e8:	3021883a 	mov	r16,r6
4110f9ec:	2027883a 	mov	r19,r4
4110f9f0:	10002f1e 	bne	r2,zero,4110fab0 <__pow5mult+0xe8>
4110f9f4:	2825883a 	mov	r18,r5
4110f9f8:	8021d0ba 	srai	r16,r16,2
4110f9fc:	80001a26 	beq	r16,zero,4110fa68 <__pow5mult+0xa0>
4110fa00:	9c401217 	ldw	r17,72(r19)
4110fa04:	8800061e 	bne	r17,zero,4110fa20 <__pow5mult+0x58>
4110fa08:	00003406 	br	4110fadc <__pow5mult+0x114>
4110fa0c:	8021d07a 	srai	r16,r16,1
4110fa10:	80001526 	beq	r16,zero,4110fa68 <__pow5mult+0xa0>
4110fa14:	88800017 	ldw	r2,0(r17)
4110fa18:	10001c26 	beq	r2,zero,4110fa8c <__pow5mult+0xc4>
4110fa1c:	1023883a 	mov	r17,r2
4110fa20:	8080004c 	andi	r2,r16,1
4110fa24:	103ff926 	beq	r2,zero,4110fa0c <__reset+0xbb0efa0c>
4110fa28:	880d883a 	mov	r6,r17
4110fa2c:	900b883a 	mov	r5,r18
4110fa30:	9809883a 	mov	r4,r19
4110fa34:	110f7d00 	call	4110f7d0 <__multiply>
4110fa38:	90001b26 	beq	r18,zero,4110faa8 <__pow5mult+0xe0>
4110fa3c:	91000117 	ldw	r4,4(r18)
4110fa40:	98c01317 	ldw	r3,76(r19)
4110fa44:	8021d07a 	srai	r16,r16,1
4110fa48:	2109883a 	add	r4,r4,r4
4110fa4c:	2109883a 	add	r4,r4,r4
4110fa50:	1907883a 	add	r3,r3,r4
4110fa54:	19000017 	ldw	r4,0(r3)
4110fa58:	91000015 	stw	r4,0(r18)
4110fa5c:	1c800015 	stw	r18,0(r3)
4110fa60:	1025883a 	mov	r18,r2
4110fa64:	803feb1e 	bne	r16,zero,4110fa14 <__reset+0xbb0efa14>
4110fa68:	9005883a 	mov	r2,r18
4110fa6c:	dfc00517 	ldw	ra,20(sp)
4110fa70:	dd000417 	ldw	r20,16(sp)
4110fa74:	dcc00317 	ldw	r19,12(sp)
4110fa78:	dc800217 	ldw	r18,8(sp)
4110fa7c:	dc400117 	ldw	r17,4(sp)
4110fa80:	dc000017 	ldw	r16,0(sp)
4110fa84:	dec00604 	addi	sp,sp,24
4110fa88:	f800283a 	ret
4110fa8c:	880d883a 	mov	r6,r17
4110fa90:	880b883a 	mov	r5,r17
4110fa94:	9809883a 	mov	r4,r19
4110fa98:	110f7d00 	call	4110f7d0 <__multiply>
4110fa9c:	88800015 	stw	r2,0(r17)
4110faa0:	10000015 	stw	zero,0(r2)
4110faa4:	003fdd06 	br	4110fa1c <__reset+0xbb0efa1c>
4110faa8:	1025883a 	mov	r18,r2
4110faac:	003fd706 	br	4110fa0c <__reset+0xbb0efa0c>
4110fab0:	10bfffc4 	addi	r2,r2,-1
4110fab4:	1085883a 	add	r2,r2,r2
4110fab8:	00d044b4 	movhi	r3,16658
4110fabc:	18ef5504 	addi	r3,r3,-17068
4110fac0:	1085883a 	add	r2,r2,r2
4110fac4:	1885883a 	add	r2,r3,r2
4110fac8:	11800017 	ldw	r6,0(r2)
4110facc:	000f883a 	mov	r7,zero
4110fad0:	110f4580 	call	4110f458 <__multadd>
4110fad4:	1025883a 	mov	r18,r2
4110fad8:	003fc706 	br	4110f9f8 <__reset+0xbb0ef9f8>
4110fadc:	05000044 	movi	r20,1
4110fae0:	a00b883a 	mov	r5,r20
4110fae4:	9809883a 	mov	r4,r19
4110fae8:	110f3880 	call	4110f388 <_Balloc>
4110faec:	1023883a 	mov	r17,r2
4110faf0:	00809c44 	movi	r2,625
4110faf4:	88800515 	stw	r2,20(r17)
4110faf8:	8d000415 	stw	r20,16(r17)
4110fafc:	9c401215 	stw	r17,72(r19)
4110fb00:	88000015 	stw	zero,0(r17)
4110fb04:	003fc606 	br	4110fa20 <__reset+0xbb0efa20>

4110fb08 <__lshift>:
4110fb08:	defff904 	addi	sp,sp,-28
4110fb0c:	dd400515 	stw	r21,20(sp)
4110fb10:	dcc00315 	stw	r19,12(sp)
4110fb14:	302bd17a 	srai	r21,r6,5
4110fb18:	2cc00417 	ldw	r19,16(r5)
4110fb1c:	28800217 	ldw	r2,8(r5)
4110fb20:	dd000415 	stw	r20,16(sp)
4110fb24:	ace7883a 	add	r19,r21,r19
4110fb28:	dc800215 	stw	r18,8(sp)
4110fb2c:	dc400115 	stw	r17,4(sp)
4110fb30:	dc000015 	stw	r16,0(sp)
4110fb34:	dfc00615 	stw	ra,24(sp)
4110fb38:	9c000044 	addi	r16,r19,1
4110fb3c:	2823883a 	mov	r17,r5
4110fb40:	3029883a 	mov	r20,r6
4110fb44:	2025883a 	mov	r18,r4
4110fb48:	29400117 	ldw	r5,4(r5)
4110fb4c:	1400030e 	bge	r2,r16,4110fb5c <__lshift+0x54>
4110fb50:	1085883a 	add	r2,r2,r2
4110fb54:	29400044 	addi	r5,r5,1
4110fb58:	143ffd16 	blt	r2,r16,4110fb50 <__reset+0xbb0efb50>
4110fb5c:	9009883a 	mov	r4,r18
4110fb60:	110f3880 	call	4110f388 <_Balloc>
4110fb64:	10c00504 	addi	r3,r2,20
4110fb68:	0540070e 	bge	zero,r21,4110fb88 <__lshift+0x80>
4110fb6c:	ad6b883a 	add	r21,r21,r21
4110fb70:	ad6b883a 	add	r21,r21,r21
4110fb74:	1809883a 	mov	r4,r3
4110fb78:	1d47883a 	add	r3,r3,r21
4110fb7c:	20000015 	stw	zero,0(r4)
4110fb80:	21000104 	addi	r4,r4,4
4110fb84:	193ffd1e 	bne	r3,r4,4110fb7c <__reset+0xbb0efb7c>
4110fb88:	8a000417 	ldw	r8,16(r17)
4110fb8c:	89000504 	addi	r4,r17,20
4110fb90:	a18007cc 	andi	r6,r20,31
4110fb94:	4211883a 	add	r8,r8,r8
4110fb98:	4211883a 	add	r8,r8,r8
4110fb9c:	2211883a 	add	r8,r4,r8
4110fba0:	30002326 	beq	r6,zero,4110fc30 <__lshift+0x128>
4110fba4:	02400804 	movi	r9,32
4110fba8:	4993c83a 	sub	r9,r9,r6
4110fbac:	000b883a 	mov	r5,zero
4110fbb0:	21c00017 	ldw	r7,0(r4)
4110fbb4:	1815883a 	mov	r10,r3
4110fbb8:	18c00104 	addi	r3,r3,4
4110fbbc:	398e983a 	sll	r7,r7,r6
4110fbc0:	21000104 	addi	r4,r4,4
4110fbc4:	394ab03a 	or	r5,r7,r5
4110fbc8:	197fff15 	stw	r5,-4(r3)
4110fbcc:	217fff17 	ldw	r5,-4(r4)
4110fbd0:	2a4ad83a 	srl	r5,r5,r9
4110fbd4:	223ff636 	bltu	r4,r8,4110fbb0 <__reset+0xbb0efbb0>
4110fbd8:	51400115 	stw	r5,4(r10)
4110fbdc:	28001a1e 	bne	r5,zero,4110fc48 <__lshift+0x140>
4110fbe0:	843fffc4 	addi	r16,r16,-1
4110fbe4:	14000415 	stw	r16,16(r2)
4110fbe8:	88000826 	beq	r17,zero,4110fc0c <__lshift+0x104>
4110fbec:	89000117 	ldw	r4,4(r17)
4110fbf0:	90c01317 	ldw	r3,76(r18)
4110fbf4:	2109883a 	add	r4,r4,r4
4110fbf8:	2109883a 	add	r4,r4,r4
4110fbfc:	1907883a 	add	r3,r3,r4
4110fc00:	19000017 	ldw	r4,0(r3)
4110fc04:	89000015 	stw	r4,0(r17)
4110fc08:	1c400015 	stw	r17,0(r3)
4110fc0c:	dfc00617 	ldw	ra,24(sp)
4110fc10:	dd400517 	ldw	r21,20(sp)
4110fc14:	dd000417 	ldw	r20,16(sp)
4110fc18:	dcc00317 	ldw	r19,12(sp)
4110fc1c:	dc800217 	ldw	r18,8(sp)
4110fc20:	dc400117 	ldw	r17,4(sp)
4110fc24:	dc000017 	ldw	r16,0(sp)
4110fc28:	dec00704 	addi	sp,sp,28
4110fc2c:	f800283a 	ret
4110fc30:	21400017 	ldw	r5,0(r4)
4110fc34:	18c00104 	addi	r3,r3,4
4110fc38:	21000104 	addi	r4,r4,4
4110fc3c:	197fff15 	stw	r5,-4(r3)
4110fc40:	223ffb36 	bltu	r4,r8,4110fc30 <__reset+0xbb0efc30>
4110fc44:	003fe606 	br	4110fbe0 <__reset+0xbb0efbe0>
4110fc48:	9c000084 	addi	r16,r19,2
4110fc4c:	003fe406 	br	4110fbe0 <__reset+0xbb0efbe0>

4110fc50 <__mcmp>:
4110fc50:	20800417 	ldw	r2,16(r4)
4110fc54:	28c00417 	ldw	r3,16(r5)
4110fc58:	10c5c83a 	sub	r2,r2,r3
4110fc5c:	1000111e 	bne	r2,zero,4110fca4 <__mcmp+0x54>
4110fc60:	18c7883a 	add	r3,r3,r3
4110fc64:	18c7883a 	add	r3,r3,r3
4110fc68:	21000504 	addi	r4,r4,20
4110fc6c:	29400504 	addi	r5,r5,20
4110fc70:	20c5883a 	add	r2,r4,r3
4110fc74:	28cb883a 	add	r5,r5,r3
4110fc78:	00000106 	br	4110fc80 <__mcmp+0x30>
4110fc7c:	20800a2e 	bgeu	r4,r2,4110fca8 <__mcmp+0x58>
4110fc80:	10bfff04 	addi	r2,r2,-4
4110fc84:	297fff04 	addi	r5,r5,-4
4110fc88:	11800017 	ldw	r6,0(r2)
4110fc8c:	28c00017 	ldw	r3,0(r5)
4110fc90:	30fffa26 	beq	r6,r3,4110fc7c <__reset+0xbb0efc7c>
4110fc94:	30c00236 	bltu	r6,r3,4110fca0 <__mcmp+0x50>
4110fc98:	00800044 	movi	r2,1
4110fc9c:	f800283a 	ret
4110fca0:	00bfffc4 	movi	r2,-1
4110fca4:	f800283a 	ret
4110fca8:	0005883a 	mov	r2,zero
4110fcac:	f800283a 	ret

4110fcb0 <__mdiff>:
4110fcb0:	28c00417 	ldw	r3,16(r5)
4110fcb4:	30800417 	ldw	r2,16(r6)
4110fcb8:	defffa04 	addi	sp,sp,-24
4110fcbc:	dcc00315 	stw	r19,12(sp)
4110fcc0:	dc800215 	stw	r18,8(sp)
4110fcc4:	dfc00515 	stw	ra,20(sp)
4110fcc8:	dd000415 	stw	r20,16(sp)
4110fccc:	dc400115 	stw	r17,4(sp)
4110fcd0:	dc000015 	stw	r16,0(sp)
4110fcd4:	1887c83a 	sub	r3,r3,r2
4110fcd8:	2825883a 	mov	r18,r5
4110fcdc:	3027883a 	mov	r19,r6
4110fce0:	1800141e 	bne	r3,zero,4110fd34 <__mdiff+0x84>
4110fce4:	1085883a 	add	r2,r2,r2
4110fce8:	1085883a 	add	r2,r2,r2
4110fcec:	2a000504 	addi	r8,r5,20
4110fcf0:	34000504 	addi	r16,r6,20
4110fcf4:	4087883a 	add	r3,r8,r2
4110fcf8:	8085883a 	add	r2,r16,r2
4110fcfc:	00000106 	br	4110fd04 <__mdiff+0x54>
4110fd00:	40c0592e 	bgeu	r8,r3,4110fe68 <__mdiff+0x1b8>
4110fd04:	18ffff04 	addi	r3,r3,-4
4110fd08:	10bfff04 	addi	r2,r2,-4
4110fd0c:	19c00017 	ldw	r7,0(r3)
4110fd10:	11400017 	ldw	r5,0(r2)
4110fd14:	397ffa26 	beq	r7,r5,4110fd00 <__reset+0xbb0efd00>
4110fd18:	3940592e 	bgeu	r7,r5,4110fe80 <__mdiff+0x1d0>
4110fd1c:	9005883a 	mov	r2,r18
4110fd20:	4023883a 	mov	r17,r8
4110fd24:	9825883a 	mov	r18,r19
4110fd28:	05000044 	movi	r20,1
4110fd2c:	1027883a 	mov	r19,r2
4110fd30:	00000406 	br	4110fd44 <__mdiff+0x94>
4110fd34:	18005616 	blt	r3,zero,4110fe90 <__mdiff+0x1e0>
4110fd38:	34400504 	addi	r17,r6,20
4110fd3c:	2c000504 	addi	r16,r5,20
4110fd40:	0029883a 	mov	r20,zero
4110fd44:	91400117 	ldw	r5,4(r18)
4110fd48:	110f3880 	call	4110f388 <_Balloc>
4110fd4c:	92400417 	ldw	r9,16(r18)
4110fd50:	9b000417 	ldw	r12,16(r19)
4110fd54:	12c00504 	addi	r11,r2,20
4110fd58:	4a51883a 	add	r8,r9,r9
4110fd5c:	6319883a 	add	r12,r12,r12
4110fd60:	4211883a 	add	r8,r8,r8
4110fd64:	6319883a 	add	r12,r12,r12
4110fd68:	15000315 	stw	r20,12(r2)
4110fd6c:	8211883a 	add	r8,r16,r8
4110fd70:	8b19883a 	add	r12,r17,r12
4110fd74:	0007883a 	mov	r3,zero
4110fd78:	81400017 	ldw	r5,0(r16)
4110fd7c:	89c00017 	ldw	r7,0(r17)
4110fd80:	59800104 	addi	r6,r11,4
4110fd84:	293fffcc 	andi	r4,r5,65535
4110fd88:	20c7883a 	add	r3,r4,r3
4110fd8c:	393fffcc 	andi	r4,r7,65535
4110fd90:	1909c83a 	sub	r4,r3,r4
4110fd94:	280ad43a 	srli	r5,r5,16
4110fd98:	380ed43a 	srli	r7,r7,16
4110fd9c:	2007d43a 	srai	r3,r4,16
4110fda0:	213fffcc 	andi	r4,r4,65535
4110fda4:	29cbc83a 	sub	r5,r5,r7
4110fda8:	28c7883a 	add	r3,r5,r3
4110fdac:	180a943a 	slli	r5,r3,16
4110fdb0:	8c400104 	addi	r17,r17,4
4110fdb4:	84000104 	addi	r16,r16,4
4110fdb8:	2908b03a 	or	r4,r5,r4
4110fdbc:	59000015 	stw	r4,0(r11)
4110fdc0:	1807d43a 	srai	r3,r3,16
4110fdc4:	3015883a 	mov	r10,r6
4110fdc8:	3017883a 	mov	r11,r6
4110fdcc:	8b3fea36 	bltu	r17,r12,4110fd78 <__reset+0xbb0efd78>
4110fdd0:	8200162e 	bgeu	r16,r8,4110fe2c <__mdiff+0x17c>
4110fdd4:	8017883a 	mov	r11,r16
4110fdd8:	59400017 	ldw	r5,0(r11)
4110fddc:	31800104 	addi	r6,r6,4
4110fde0:	5ac00104 	addi	r11,r11,4
4110fde4:	293fffcc 	andi	r4,r5,65535
4110fde8:	20c7883a 	add	r3,r4,r3
4110fdec:	280ed43a 	srli	r7,r5,16
4110fdf0:	180bd43a 	srai	r5,r3,16
4110fdf4:	193fffcc 	andi	r4,r3,65535
4110fdf8:	3947883a 	add	r3,r7,r5
4110fdfc:	180a943a 	slli	r5,r3,16
4110fe00:	1807d43a 	srai	r3,r3,16
4110fe04:	2908b03a 	or	r4,r5,r4
4110fe08:	313fff15 	stw	r4,-4(r6)
4110fe0c:	5a3ff236 	bltu	r11,r8,4110fdd8 <__reset+0xbb0efdd8>
4110fe10:	0406303a 	nor	r3,zero,r16
4110fe14:	1a07883a 	add	r3,r3,r8
4110fe18:	1806d0ba 	srli	r3,r3,2
4110fe1c:	18c00044 	addi	r3,r3,1
4110fe20:	18c7883a 	add	r3,r3,r3
4110fe24:	18c7883a 	add	r3,r3,r3
4110fe28:	50d5883a 	add	r10,r10,r3
4110fe2c:	50ffff04 	addi	r3,r10,-4
4110fe30:	2000041e 	bne	r4,zero,4110fe44 <__mdiff+0x194>
4110fe34:	18ffff04 	addi	r3,r3,-4
4110fe38:	19000017 	ldw	r4,0(r3)
4110fe3c:	4a7fffc4 	addi	r9,r9,-1
4110fe40:	203ffc26 	beq	r4,zero,4110fe34 <__reset+0xbb0efe34>
4110fe44:	12400415 	stw	r9,16(r2)
4110fe48:	dfc00517 	ldw	ra,20(sp)
4110fe4c:	dd000417 	ldw	r20,16(sp)
4110fe50:	dcc00317 	ldw	r19,12(sp)
4110fe54:	dc800217 	ldw	r18,8(sp)
4110fe58:	dc400117 	ldw	r17,4(sp)
4110fe5c:	dc000017 	ldw	r16,0(sp)
4110fe60:	dec00604 	addi	sp,sp,24
4110fe64:	f800283a 	ret
4110fe68:	000b883a 	mov	r5,zero
4110fe6c:	110f3880 	call	4110f388 <_Balloc>
4110fe70:	00c00044 	movi	r3,1
4110fe74:	10c00415 	stw	r3,16(r2)
4110fe78:	10000515 	stw	zero,20(r2)
4110fe7c:	003ff206 	br	4110fe48 <__reset+0xbb0efe48>
4110fe80:	8023883a 	mov	r17,r16
4110fe84:	0029883a 	mov	r20,zero
4110fe88:	4021883a 	mov	r16,r8
4110fe8c:	003fad06 	br	4110fd44 <__reset+0xbb0efd44>
4110fe90:	9005883a 	mov	r2,r18
4110fe94:	94400504 	addi	r17,r18,20
4110fe98:	9c000504 	addi	r16,r19,20
4110fe9c:	9825883a 	mov	r18,r19
4110fea0:	05000044 	movi	r20,1
4110fea4:	1027883a 	mov	r19,r2
4110fea8:	003fa606 	br	4110fd44 <__reset+0xbb0efd44>

4110feac <__ulp>:
4110feac:	295ffc2c 	andhi	r5,r5,32752
4110feb0:	00bf3034 	movhi	r2,64704
4110feb4:	2887883a 	add	r3,r5,r2
4110feb8:	00c0020e 	bge	zero,r3,4110fec4 <__ulp+0x18>
4110febc:	0005883a 	mov	r2,zero
4110fec0:	f800283a 	ret
4110fec4:	00c7c83a 	sub	r3,zero,r3
4110fec8:	1807d53a 	srai	r3,r3,20
4110fecc:	008004c4 	movi	r2,19
4110fed0:	10c00b0e 	bge	r2,r3,4110ff00 <__ulp+0x54>
4110fed4:	18bffb04 	addi	r2,r3,-20
4110fed8:	01000784 	movi	r4,30
4110fedc:	0007883a 	mov	r3,zero
4110fee0:	20800516 	blt	r4,r2,4110fef8 <__ulp+0x4c>
4110fee4:	010007c4 	movi	r4,31
4110fee8:	2089c83a 	sub	r4,r4,r2
4110feec:	00800044 	movi	r2,1
4110fef0:	1104983a 	sll	r2,r2,r4
4110fef4:	f800283a 	ret
4110fef8:	00800044 	movi	r2,1
4110fefc:	f800283a 	ret
4110ff00:	01400234 	movhi	r5,8
4110ff04:	28c7d83a 	sra	r3,r5,r3
4110ff08:	0005883a 	mov	r2,zero
4110ff0c:	f800283a 	ret

4110ff10 <__b2d>:
4110ff10:	defffa04 	addi	sp,sp,-24
4110ff14:	dc000015 	stw	r16,0(sp)
4110ff18:	24000417 	ldw	r16,16(r4)
4110ff1c:	dc400115 	stw	r17,4(sp)
4110ff20:	24400504 	addi	r17,r4,20
4110ff24:	8421883a 	add	r16,r16,r16
4110ff28:	8421883a 	add	r16,r16,r16
4110ff2c:	8c21883a 	add	r16,r17,r16
4110ff30:	dc800215 	stw	r18,8(sp)
4110ff34:	84bfff17 	ldw	r18,-4(r16)
4110ff38:	dd000415 	stw	r20,16(sp)
4110ff3c:	dcc00315 	stw	r19,12(sp)
4110ff40:	9009883a 	mov	r4,r18
4110ff44:	2829883a 	mov	r20,r5
4110ff48:	dfc00515 	stw	ra,20(sp)
4110ff4c:	110f67c0 	call	4110f67c <__hi0bits>
4110ff50:	00c00804 	movi	r3,32
4110ff54:	1889c83a 	sub	r4,r3,r2
4110ff58:	a1000015 	stw	r4,0(r20)
4110ff5c:	01000284 	movi	r4,10
4110ff60:	84ffff04 	addi	r19,r16,-4
4110ff64:	20801216 	blt	r4,r2,4110ffb0 <__b2d+0xa0>
4110ff68:	018002c4 	movi	r6,11
4110ff6c:	308dc83a 	sub	r6,r6,r2
4110ff70:	9186d83a 	srl	r3,r18,r6
4110ff74:	18cffc34 	orhi	r3,r3,16368
4110ff78:	8cc0212e 	bgeu	r17,r19,41110000 <__b2d+0xf0>
4110ff7c:	813ffe17 	ldw	r4,-8(r16)
4110ff80:	218cd83a 	srl	r6,r4,r6
4110ff84:	10800544 	addi	r2,r2,21
4110ff88:	9084983a 	sll	r2,r18,r2
4110ff8c:	1184b03a 	or	r2,r2,r6
4110ff90:	dfc00517 	ldw	ra,20(sp)
4110ff94:	dd000417 	ldw	r20,16(sp)
4110ff98:	dcc00317 	ldw	r19,12(sp)
4110ff9c:	dc800217 	ldw	r18,8(sp)
4110ffa0:	dc400117 	ldw	r17,4(sp)
4110ffa4:	dc000017 	ldw	r16,0(sp)
4110ffa8:	dec00604 	addi	sp,sp,24
4110ffac:	f800283a 	ret
4110ffb0:	8cc00f2e 	bgeu	r17,r19,4110fff0 <__b2d+0xe0>
4110ffb4:	117ffd44 	addi	r5,r2,-11
4110ffb8:	80bffe17 	ldw	r2,-8(r16)
4110ffbc:	28000e26 	beq	r5,zero,4110fff8 <__b2d+0xe8>
4110ffc0:	1949c83a 	sub	r4,r3,r5
4110ffc4:	9164983a 	sll	r18,r18,r5
4110ffc8:	1106d83a 	srl	r3,r2,r4
4110ffcc:	81bffe04 	addi	r6,r16,-8
4110ffd0:	948ffc34 	orhi	r18,r18,16368
4110ffd4:	90c6b03a 	or	r3,r18,r3
4110ffd8:	89800e2e 	bgeu	r17,r6,41110014 <__b2d+0x104>
4110ffdc:	81bffd17 	ldw	r6,-12(r16)
4110ffe0:	1144983a 	sll	r2,r2,r5
4110ffe4:	310ad83a 	srl	r5,r6,r4
4110ffe8:	2884b03a 	or	r2,r5,r2
4110ffec:	003fe806 	br	4110ff90 <__reset+0xbb0eff90>
4110fff0:	10bffd44 	addi	r2,r2,-11
4110fff4:	1000041e 	bne	r2,zero,41110008 <__b2d+0xf8>
4110fff8:	90cffc34 	orhi	r3,r18,16368
4110fffc:	003fe406 	br	4110ff90 <__reset+0xbb0eff90>
41110000:	000d883a 	mov	r6,zero
41110004:	003fdf06 	br	4110ff84 <__reset+0xbb0eff84>
41110008:	90a4983a 	sll	r18,r18,r2
4111000c:	0005883a 	mov	r2,zero
41110010:	003ff906 	br	4110fff8 <__reset+0xbb0efff8>
41110014:	1144983a 	sll	r2,r2,r5
41110018:	003fdd06 	br	4110ff90 <__reset+0xbb0eff90>

4111001c <__d2b>:
4111001c:	defff804 	addi	sp,sp,-32
41110020:	dc000215 	stw	r16,8(sp)
41110024:	3021883a 	mov	r16,r6
41110028:	dc400315 	stw	r17,12(sp)
4111002c:	8022907a 	slli	r17,r16,1
41110030:	dd000615 	stw	r20,24(sp)
41110034:	2829883a 	mov	r20,r5
41110038:	01400044 	movi	r5,1
4111003c:	dcc00515 	stw	r19,20(sp)
41110040:	dc800415 	stw	r18,16(sp)
41110044:	dfc00715 	stw	ra,28(sp)
41110048:	3825883a 	mov	r18,r7
4111004c:	8822d57a 	srli	r17,r17,21
41110050:	110f3880 	call	4110f388 <_Balloc>
41110054:	1027883a 	mov	r19,r2
41110058:	00800434 	movhi	r2,16
4111005c:	10bfffc4 	addi	r2,r2,-1
41110060:	808c703a 	and	r6,r16,r2
41110064:	88000126 	beq	r17,zero,4111006c <__d2b+0x50>
41110068:	31800434 	orhi	r6,r6,16
4111006c:	d9800015 	stw	r6,0(sp)
41110070:	a0002426 	beq	r20,zero,41110104 <__d2b+0xe8>
41110074:	d9000104 	addi	r4,sp,4
41110078:	dd000115 	stw	r20,4(sp)
4111007c:	110f6e40 	call	4110f6e4 <__lo0bits>
41110080:	d8c00017 	ldw	r3,0(sp)
41110084:	10002f1e 	bne	r2,zero,41110144 <__d2b+0x128>
41110088:	d9000117 	ldw	r4,4(sp)
4111008c:	99000515 	stw	r4,20(r19)
41110090:	1821003a 	cmpeq	r16,r3,zero
41110094:	01000084 	movi	r4,2
41110098:	2421c83a 	sub	r16,r4,r16
4111009c:	98c00615 	stw	r3,24(r19)
411100a0:	9c000415 	stw	r16,16(r19)
411100a4:	88001f1e 	bne	r17,zero,41110124 <__d2b+0x108>
411100a8:	10bef384 	addi	r2,r2,-1074
411100ac:	90800015 	stw	r2,0(r18)
411100b0:	00900034 	movhi	r2,16384
411100b4:	10bfffc4 	addi	r2,r2,-1
411100b8:	8085883a 	add	r2,r16,r2
411100bc:	1085883a 	add	r2,r2,r2
411100c0:	1085883a 	add	r2,r2,r2
411100c4:	9885883a 	add	r2,r19,r2
411100c8:	11000517 	ldw	r4,20(r2)
411100cc:	8020917a 	slli	r16,r16,5
411100d0:	110f67c0 	call	4110f67c <__hi0bits>
411100d4:	d8c00817 	ldw	r3,32(sp)
411100d8:	8085c83a 	sub	r2,r16,r2
411100dc:	18800015 	stw	r2,0(r3)
411100e0:	9805883a 	mov	r2,r19
411100e4:	dfc00717 	ldw	ra,28(sp)
411100e8:	dd000617 	ldw	r20,24(sp)
411100ec:	dcc00517 	ldw	r19,20(sp)
411100f0:	dc800417 	ldw	r18,16(sp)
411100f4:	dc400317 	ldw	r17,12(sp)
411100f8:	dc000217 	ldw	r16,8(sp)
411100fc:	dec00804 	addi	sp,sp,32
41110100:	f800283a 	ret
41110104:	d809883a 	mov	r4,sp
41110108:	110f6e40 	call	4110f6e4 <__lo0bits>
4111010c:	d8c00017 	ldw	r3,0(sp)
41110110:	04000044 	movi	r16,1
41110114:	9c000415 	stw	r16,16(r19)
41110118:	98c00515 	stw	r3,20(r19)
4111011c:	10800804 	addi	r2,r2,32
41110120:	883fe126 	beq	r17,zero,411100a8 <__reset+0xbb0f00a8>
41110124:	00c00d44 	movi	r3,53
41110128:	8c7ef344 	addi	r17,r17,-1075
4111012c:	88a3883a 	add	r17,r17,r2
41110130:	1885c83a 	sub	r2,r3,r2
41110134:	d8c00817 	ldw	r3,32(sp)
41110138:	94400015 	stw	r17,0(r18)
4111013c:	18800015 	stw	r2,0(r3)
41110140:	003fe706 	br	411100e0 <__reset+0xbb0f00e0>
41110144:	01000804 	movi	r4,32
41110148:	2089c83a 	sub	r4,r4,r2
4111014c:	1908983a 	sll	r4,r3,r4
41110150:	d9400117 	ldw	r5,4(sp)
41110154:	1886d83a 	srl	r3,r3,r2
41110158:	2148b03a 	or	r4,r4,r5
4111015c:	99000515 	stw	r4,20(r19)
41110160:	d8c00015 	stw	r3,0(sp)
41110164:	003fca06 	br	41110090 <__reset+0xbb0f0090>

41110168 <__ratio>:
41110168:	defff904 	addi	sp,sp,-28
4111016c:	dc400315 	stw	r17,12(sp)
41110170:	2823883a 	mov	r17,r5
41110174:	d9400104 	addi	r5,sp,4
41110178:	dfc00615 	stw	ra,24(sp)
4111017c:	dcc00515 	stw	r19,20(sp)
41110180:	dc800415 	stw	r18,16(sp)
41110184:	2027883a 	mov	r19,r4
41110188:	dc000215 	stw	r16,8(sp)
4111018c:	110ff100 	call	4110ff10 <__b2d>
41110190:	d80b883a 	mov	r5,sp
41110194:	8809883a 	mov	r4,r17
41110198:	1025883a 	mov	r18,r2
4111019c:	1821883a 	mov	r16,r3
411101a0:	110ff100 	call	4110ff10 <__b2d>
411101a4:	8a000417 	ldw	r8,16(r17)
411101a8:	99000417 	ldw	r4,16(r19)
411101ac:	d9400117 	ldw	r5,4(sp)
411101b0:	2209c83a 	sub	r4,r4,r8
411101b4:	2010917a 	slli	r8,r4,5
411101b8:	d9000017 	ldw	r4,0(sp)
411101bc:	2909c83a 	sub	r4,r5,r4
411101c0:	4109883a 	add	r4,r8,r4
411101c4:	01000e0e 	bge	zero,r4,41110200 <__ratio+0x98>
411101c8:	2008953a 	slli	r4,r4,20
411101cc:	2421883a 	add	r16,r4,r16
411101d0:	100d883a 	mov	r6,r2
411101d4:	180f883a 	mov	r7,r3
411101d8:	9009883a 	mov	r4,r18
411101dc:	800b883a 	mov	r5,r16
411101e0:	11141bc0 	call	411141bc <__divdf3>
411101e4:	dfc00617 	ldw	ra,24(sp)
411101e8:	dcc00517 	ldw	r19,20(sp)
411101ec:	dc800417 	ldw	r18,16(sp)
411101f0:	dc400317 	ldw	r17,12(sp)
411101f4:	dc000217 	ldw	r16,8(sp)
411101f8:	dec00704 	addi	sp,sp,28
411101fc:	f800283a 	ret
41110200:	2008953a 	slli	r4,r4,20
41110204:	1907c83a 	sub	r3,r3,r4
41110208:	003ff106 	br	411101d0 <__reset+0xbb0f01d0>

4111020c <_mprec_log10>:
4111020c:	defffe04 	addi	sp,sp,-8
41110210:	dc000015 	stw	r16,0(sp)
41110214:	dfc00115 	stw	ra,4(sp)
41110218:	008005c4 	movi	r2,23
4111021c:	2021883a 	mov	r16,r4
41110220:	11000d0e 	bge	r2,r4,41110258 <_mprec_log10+0x4c>
41110224:	0005883a 	mov	r2,zero
41110228:	00cffc34 	movhi	r3,16368
4111022c:	843fffc4 	addi	r16,r16,-1
41110230:	000d883a 	mov	r6,zero
41110234:	01d00934 	movhi	r7,16420
41110238:	1009883a 	mov	r4,r2
4111023c:	180b883a 	mov	r5,r3
41110240:	1108a9c0 	call	41108a9c <__muldf3>
41110244:	803ff91e 	bne	r16,zero,4111022c <__reset+0xbb0f022c>
41110248:	dfc00117 	ldw	ra,4(sp)
4111024c:	dc000017 	ldw	r16,0(sp)
41110250:	dec00204 	addi	sp,sp,8
41110254:	f800283a 	ret
41110258:	202090fa 	slli	r16,r4,3
4111025c:	009044b4 	movhi	r2,16658
41110260:	10af6c04 	addi	r2,r2,-16976
41110264:	1421883a 	add	r16,r2,r16
41110268:	80800017 	ldw	r2,0(r16)
4111026c:	80c00117 	ldw	r3,4(r16)
41110270:	dfc00117 	ldw	ra,4(sp)
41110274:	dc000017 	ldw	r16,0(sp)
41110278:	dec00204 	addi	sp,sp,8
4111027c:	f800283a 	ret

41110280 <__copybits>:
41110280:	297fffc4 	addi	r5,r5,-1
41110284:	280fd17a 	srai	r7,r5,5
41110288:	30c00417 	ldw	r3,16(r6)
4111028c:	30800504 	addi	r2,r6,20
41110290:	39c00044 	addi	r7,r7,1
41110294:	18c7883a 	add	r3,r3,r3
41110298:	39cf883a 	add	r7,r7,r7
4111029c:	18c7883a 	add	r3,r3,r3
411102a0:	39cf883a 	add	r7,r7,r7
411102a4:	10c7883a 	add	r3,r2,r3
411102a8:	21cf883a 	add	r7,r4,r7
411102ac:	10c00d2e 	bgeu	r2,r3,411102e4 <__copybits+0x64>
411102b0:	200b883a 	mov	r5,r4
411102b4:	12000017 	ldw	r8,0(r2)
411102b8:	29400104 	addi	r5,r5,4
411102bc:	10800104 	addi	r2,r2,4
411102c0:	2a3fff15 	stw	r8,-4(r5)
411102c4:	10fffb36 	bltu	r2,r3,411102b4 <__reset+0xbb0f02b4>
411102c8:	1985c83a 	sub	r2,r3,r6
411102cc:	10bffac4 	addi	r2,r2,-21
411102d0:	1004d0ba 	srli	r2,r2,2
411102d4:	10800044 	addi	r2,r2,1
411102d8:	1085883a 	add	r2,r2,r2
411102dc:	1085883a 	add	r2,r2,r2
411102e0:	2089883a 	add	r4,r4,r2
411102e4:	21c0032e 	bgeu	r4,r7,411102f4 <__copybits+0x74>
411102e8:	20000015 	stw	zero,0(r4)
411102ec:	21000104 	addi	r4,r4,4
411102f0:	21fffd36 	bltu	r4,r7,411102e8 <__reset+0xbb0f02e8>
411102f4:	f800283a 	ret

411102f8 <__any_on>:
411102f8:	20c00417 	ldw	r3,16(r4)
411102fc:	2805d17a 	srai	r2,r5,5
41110300:	21000504 	addi	r4,r4,20
41110304:	18800d0e 	bge	r3,r2,4111033c <__any_on+0x44>
41110308:	18c7883a 	add	r3,r3,r3
4111030c:	18c7883a 	add	r3,r3,r3
41110310:	20c7883a 	add	r3,r4,r3
41110314:	20c0192e 	bgeu	r4,r3,4111037c <__any_on+0x84>
41110318:	18bfff17 	ldw	r2,-4(r3)
4111031c:	18ffff04 	addi	r3,r3,-4
41110320:	1000041e 	bne	r2,zero,41110334 <__any_on+0x3c>
41110324:	20c0142e 	bgeu	r4,r3,41110378 <__any_on+0x80>
41110328:	18ffff04 	addi	r3,r3,-4
4111032c:	19400017 	ldw	r5,0(r3)
41110330:	283ffc26 	beq	r5,zero,41110324 <__reset+0xbb0f0324>
41110334:	00800044 	movi	r2,1
41110338:	f800283a 	ret
4111033c:	10c00a0e 	bge	r2,r3,41110368 <__any_on+0x70>
41110340:	1085883a 	add	r2,r2,r2
41110344:	1085883a 	add	r2,r2,r2
41110348:	294007cc 	andi	r5,r5,31
4111034c:	2087883a 	add	r3,r4,r2
41110350:	283ff026 	beq	r5,zero,41110314 <__reset+0xbb0f0314>
41110354:	19800017 	ldw	r6,0(r3)
41110358:	3144d83a 	srl	r2,r6,r5
4111035c:	114a983a 	sll	r5,r2,r5
41110360:	317ff41e 	bne	r6,r5,41110334 <__reset+0xbb0f0334>
41110364:	003feb06 	br	41110314 <__reset+0xbb0f0314>
41110368:	1085883a 	add	r2,r2,r2
4111036c:	1085883a 	add	r2,r2,r2
41110370:	2087883a 	add	r3,r4,r2
41110374:	003fe706 	br	41110314 <__reset+0xbb0f0314>
41110378:	f800283a 	ret
4111037c:	0005883a 	mov	r2,zero
41110380:	f800283a 	ret

41110384 <_putc_r>:
41110384:	defffc04 	addi	sp,sp,-16
41110388:	dc000215 	stw	r16,8(sp)
4111038c:	dfc00315 	stw	ra,12(sp)
41110390:	2021883a 	mov	r16,r4
41110394:	20000226 	beq	r4,zero,411103a0 <_putc_r+0x1c>
41110398:	20800e17 	ldw	r2,56(r4)
4111039c:	10001b26 	beq	r2,zero,4111040c <_putc_r+0x88>
411103a0:	30800217 	ldw	r2,8(r6)
411103a4:	10bfffc4 	addi	r2,r2,-1
411103a8:	30800215 	stw	r2,8(r6)
411103ac:	10000a16 	blt	r2,zero,411103d8 <_putc_r+0x54>
411103b0:	30800017 	ldw	r2,0(r6)
411103b4:	11400005 	stb	r5,0(r2)
411103b8:	30800017 	ldw	r2,0(r6)
411103bc:	10c00044 	addi	r3,r2,1
411103c0:	30c00015 	stw	r3,0(r6)
411103c4:	10800003 	ldbu	r2,0(r2)
411103c8:	dfc00317 	ldw	ra,12(sp)
411103cc:	dc000217 	ldw	r16,8(sp)
411103d0:	dec00404 	addi	sp,sp,16
411103d4:	f800283a 	ret
411103d8:	30c00617 	ldw	r3,24(r6)
411103dc:	10c00616 	blt	r2,r3,411103f8 <_putc_r+0x74>
411103e0:	30800017 	ldw	r2,0(r6)
411103e4:	00c00284 	movi	r3,10
411103e8:	11400005 	stb	r5,0(r2)
411103ec:	30800017 	ldw	r2,0(r6)
411103f0:	11400003 	ldbu	r5,0(r2)
411103f4:	28fff11e 	bne	r5,r3,411103bc <__reset+0xbb0f03bc>
411103f8:	8009883a 	mov	r4,r16
411103fc:	dfc00317 	ldw	ra,12(sp)
41110400:	dc000217 	ldw	r16,8(sp)
41110404:	dec00404 	addi	sp,sp,16
41110408:	11123781 	jmpi	41112378 <__swbuf_r>
4111040c:	d9400015 	stw	r5,0(sp)
41110410:	d9800115 	stw	r6,4(sp)
41110414:	110dab40 	call	4110dab4 <__sinit>
41110418:	d9800117 	ldw	r6,4(sp)
4111041c:	d9400017 	ldw	r5,0(sp)
41110420:	003fdf06 	br	411103a0 <__reset+0xbb0f03a0>

41110424 <putc>:
41110424:	009044b4 	movhi	r2,16658
41110428:	defffc04 	addi	sp,sp,-16
4111042c:	10b76e04 	addi	r2,r2,-8776
41110430:	dc000115 	stw	r16,4(sp)
41110434:	14000017 	ldw	r16,0(r2)
41110438:	dc400215 	stw	r17,8(sp)
4111043c:	dfc00315 	stw	ra,12(sp)
41110440:	2023883a 	mov	r17,r4
41110444:	80000226 	beq	r16,zero,41110450 <putc+0x2c>
41110448:	80800e17 	ldw	r2,56(r16)
4111044c:	10001a26 	beq	r2,zero,411104b8 <putc+0x94>
41110450:	28800217 	ldw	r2,8(r5)
41110454:	10bfffc4 	addi	r2,r2,-1
41110458:	28800215 	stw	r2,8(r5)
4111045c:	10000b16 	blt	r2,zero,4111048c <putc+0x68>
41110460:	28800017 	ldw	r2,0(r5)
41110464:	14400005 	stb	r17,0(r2)
41110468:	28800017 	ldw	r2,0(r5)
4111046c:	10c00044 	addi	r3,r2,1
41110470:	28c00015 	stw	r3,0(r5)
41110474:	10800003 	ldbu	r2,0(r2)
41110478:	dfc00317 	ldw	ra,12(sp)
4111047c:	dc400217 	ldw	r17,8(sp)
41110480:	dc000117 	ldw	r16,4(sp)
41110484:	dec00404 	addi	sp,sp,16
41110488:	f800283a 	ret
4111048c:	28c00617 	ldw	r3,24(r5)
41110490:	10c00e16 	blt	r2,r3,411104cc <putc+0xa8>
41110494:	28800017 	ldw	r2,0(r5)
41110498:	01000284 	movi	r4,10
4111049c:	14400005 	stb	r17,0(r2)
411104a0:	28800017 	ldw	r2,0(r5)
411104a4:	10c00003 	ldbu	r3,0(r2)
411104a8:	193ff01e 	bne	r3,r4,4111046c <__reset+0xbb0f046c>
411104ac:	280d883a 	mov	r6,r5
411104b0:	180b883a 	mov	r5,r3
411104b4:	00000706 	br	411104d4 <putc+0xb0>
411104b8:	8009883a 	mov	r4,r16
411104bc:	d9400015 	stw	r5,0(sp)
411104c0:	110dab40 	call	4110dab4 <__sinit>
411104c4:	d9400017 	ldw	r5,0(sp)
411104c8:	003fe106 	br	41110450 <__reset+0xbb0f0450>
411104cc:	280d883a 	mov	r6,r5
411104d0:	880b883a 	mov	r5,r17
411104d4:	8009883a 	mov	r4,r16
411104d8:	dfc00317 	ldw	ra,12(sp)
411104dc:	dc400217 	ldw	r17,8(sp)
411104e0:	dc000117 	ldw	r16,4(sp)
411104e4:	dec00404 	addi	sp,sp,16
411104e8:	11123781 	jmpi	41112378 <__swbuf_r>

411104ec <_realloc_r>:
411104ec:	defff604 	addi	sp,sp,-40
411104f0:	dc800215 	stw	r18,8(sp)
411104f4:	dfc00915 	stw	ra,36(sp)
411104f8:	df000815 	stw	fp,32(sp)
411104fc:	ddc00715 	stw	r23,28(sp)
41110500:	dd800615 	stw	r22,24(sp)
41110504:	dd400515 	stw	r21,20(sp)
41110508:	dd000415 	stw	r20,16(sp)
4111050c:	dcc00315 	stw	r19,12(sp)
41110510:	dc400115 	stw	r17,4(sp)
41110514:	dc000015 	stw	r16,0(sp)
41110518:	3025883a 	mov	r18,r6
4111051c:	2800b726 	beq	r5,zero,411107fc <_realloc_r+0x310>
41110520:	282b883a 	mov	r21,r5
41110524:	2029883a 	mov	r20,r4
41110528:	1115e2c0 	call	41115e2c <__malloc_lock>
4111052c:	a8bfff17 	ldw	r2,-4(r21)
41110530:	043fff04 	movi	r16,-4
41110534:	90c002c4 	addi	r3,r18,11
41110538:	01000584 	movi	r4,22
4111053c:	acfffe04 	addi	r19,r21,-8
41110540:	1420703a 	and	r16,r2,r16
41110544:	20c0332e 	bgeu	r4,r3,41110614 <_realloc_r+0x128>
41110548:	047ffe04 	movi	r17,-8
4111054c:	1c62703a 	and	r17,r3,r17
41110550:	8807883a 	mov	r3,r17
41110554:	88005816 	blt	r17,zero,411106b8 <_realloc_r+0x1cc>
41110558:	8c805736 	bltu	r17,r18,411106b8 <_realloc_r+0x1cc>
4111055c:	80c0300e 	bge	r16,r3,41110620 <_realloc_r+0x134>
41110560:	071044b4 	movhi	fp,16658
41110564:	e7317404 	addi	fp,fp,-14896
41110568:	e1c00217 	ldw	r7,8(fp)
4111056c:	9c09883a 	add	r4,r19,r16
41110570:	22000117 	ldw	r8,4(r4)
41110574:	21c06326 	beq	r4,r7,41110704 <_realloc_r+0x218>
41110578:	017fff84 	movi	r5,-2
4111057c:	414a703a 	and	r5,r8,r5
41110580:	214b883a 	add	r5,r4,r5
41110584:	29800117 	ldw	r6,4(r5)
41110588:	3180004c 	andi	r6,r6,1
4111058c:	30003f26 	beq	r6,zero,4111068c <_realloc_r+0x1a0>
41110590:	1080004c 	andi	r2,r2,1
41110594:	10008326 	beq	r2,zero,411107a4 <_realloc_r+0x2b8>
41110598:	900b883a 	mov	r5,r18
4111059c:	a009883a 	mov	r4,r20
411105a0:	110e8140 	call	4110e814 <_malloc_r>
411105a4:	1025883a 	mov	r18,r2
411105a8:	10011e26 	beq	r2,zero,41110a24 <_realloc_r+0x538>
411105ac:	a93fff17 	ldw	r4,-4(r21)
411105b0:	10fffe04 	addi	r3,r2,-8
411105b4:	00bfff84 	movi	r2,-2
411105b8:	2084703a 	and	r2,r4,r2
411105bc:	9885883a 	add	r2,r19,r2
411105c0:	1880ee26 	beq	r3,r2,4111097c <_realloc_r+0x490>
411105c4:	81bfff04 	addi	r6,r16,-4
411105c8:	00800904 	movi	r2,36
411105cc:	1180b836 	bltu	r2,r6,411108b0 <_realloc_r+0x3c4>
411105d0:	00c004c4 	movi	r3,19
411105d4:	19809636 	bltu	r3,r6,41110830 <_realloc_r+0x344>
411105d8:	9005883a 	mov	r2,r18
411105dc:	a807883a 	mov	r3,r21
411105e0:	19000017 	ldw	r4,0(r3)
411105e4:	11000015 	stw	r4,0(r2)
411105e8:	19000117 	ldw	r4,4(r3)
411105ec:	11000115 	stw	r4,4(r2)
411105f0:	18c00217 	ldw	r3,8(r3)
411105f4:	10c00215 	stw	r3,8(r2)
411105f8:	a80b883a 	mov	r5,r21
411105fc:	a009883a 	mov	r4,r20
41110600:	110dc280 	call	4110dc28 <_free_r>
41110604:	a009883a 	mov	r4,r20
41110608:	1115e500 	call	41115e50 <__malloc_unlock>
4111060c:	9005883a 	mov	r2,r18
41110610:	00001206 	br	4111065c <_realloc_r+0x170>
41110614:	00c00404 	movi	r3,16
41110618:	1823883a 	mov	r17,r3
4111061c:	003fce06 	br	41110558 <__reset+0xbb0f0558>
41110620:	a825883a 	mov	r18,r21
41110624:	8445c83a 	sub	r2,r16,r17
41110628:	00c003c4 	movi	r3,15
4111062c:	18802636 	bltu	r3,r2,411106c8 <_realloc_r+0x1dc>
41110630:	99800117 	ldw	r6,4(r19)
41110634:	9c07883a 	add	r3,r19,r16
41110638:	3180004c 	andi	r6,r6,1
4111063c:	3420b03a 	or	r16,r6,r16
41110640:	9c000115 	stw	r16,4(r19)
41110644:	18800117 	ldw	r2,4(r3)
41110648:	10800054 	ori	r2,r2,1
4111064c:	18800115 	stw	r2,4(r3)
41110650:	a009883a 	mov	r4,r20
41110654:	1115e500 	call	41115e50 <__malloc_unlock>
41110658:	9005883a 	mov	r2,r18
4111065c:	dfc00917 	ldw	ra,36(sp)
41110660:	df000817 	ldw	fp,32(sp)
41110664:	ddc00717 	ldw	r23,28(sp)
41110668:	dd800617 	ldw	r22,24(sp)
4111066c:	dd400517 	ldw	r21,20(sp)
41110670:	dd000417 	ldw	r20,16(sp)
41110674:	dcc00317 	ldw	r19,12(sp)
41110678:	dc800217 	ldw	r18,8(sp)
4111067c:	dc400117 	ldw	r17,4(sp)
41110680:	dc000017 	ldw	r16,0(sp)
41110684:	dec00a04 	addi	sp,sp,40
41110688:	f800283a 	ret
4111068c:	017fff04 	movi	r5,-4
41110690:	414a703a 	and	r5,r8,r5
41110694:	814d883a 	add	r6,r16,r5
41110698:	30c01f16 	blt	r6,r3,41110718 <_realloc_r+0x22c>
4111069c:	20800317 	ldw	r2,12(r4)
411106a0:	20c00217 	ldw	r3,8(r4)
411106a4:	a825883a 	mov	r18,r21
411106a8:	3021883a 	mov	r16,r6
411106ac:	18800315 	stw	r2,12(r3)
411106b0:	10c00215 	stw	r3,8(r2)
411106b4:	003fdb06 	br	41110624 <__reset+0xbb0f0624>
411106b8:	00800304 	movi	r2,12
411106bc:	a0800015 	stw	r2,0(r20)
411106c0:	0005883a 	mov	r2,zero
411106c4:	003fe506 	br	4111065c <__reset+0xbb0f065c>
411106c8:	98c00117 	ldw	r3,4(r19)
411106cc:	9c4b883a 	add	r5,r19,r17
411106d0:	11000054 	ori	r4,r2,1
411106d4:	18c0004c 	andi	r3,r3,1
411106d8:	1c62b03a 	or	r17,r3,r17
411106dc:	9c400115 	stw	r17,4(r19)
411106e0:	29000115 	stw	r4,4(r5)
411106e4:	2885883a 	add	r2,r5,r2
411106e8:	10c00117 	ldw	r3,4(r2)
411106ec:	29400204 	addi	r5,r5,8
411106f0:	a009883a 	mov	r4,r20
411106f4:	18c00054 	ori	r3,r3,1
411106f8:	10c00115 	stw	r3,4(r2)
411106fc:	110dc280 	call	4110dc28 <_free_r>
41110700:	003fd306 	br	41110650 <__reset+0xbb0f0650>
41110704:	017fff04 	movi	r5,-4
41110708:	414a703a 	and	r5,r8,r5
4111070c:	89800404 	addi	r6,r17,16
41110710:	8151883a 	add	r8,r16,r5
41110714:	4180590e 	bge	r8,r6,4111087c <_realloc_r+0x390>
41110718:	1080004c 	andi	r2,r2,1
4111071c:	103f9e1e 	bne	r2,zero,41110598 <__reset+0xbb0f0598>
41110720:	adbffe17 	ldw	r22,-8(r21)
41110724:	00bfff04 	movi	r2,-4
41110728:	9dadc83a 	sub	r22,r19,r22
4111072c:	b1800117 	ldw	r6,4(r22)
41110730:	3084703a 	and	r2,r6,r2
41110734:	20002026 	beq	r4,zero,411107b8 <_realloc_r+0x2cc>
41110738:	80af883a 	add	r23,r16,r2
4111073c:	b96f883a 	add	r23,r23,r5
41110740:	21c05f26 	beq	r4,r7,411108c0 <_realloc_r+0x3d4>
41110744:	b8c01c16 	blt	r23,r3,411107b8 <_realloc_r+0x2cc>
41110748:	20800317 	ldw	r2,12(r4)
4111074c:	20c00217 	ldw	r3,8(r4)
41110750:	81bfff04 	addi	r6,r16,-4
41110754:	01000904 	movi	r4,36
41110758:	18800315 	stw	r2,12(r3)
4111075c:	10c00215 	stw	r3,8(r2)
41110760:	b0c00217 	ldw	r3,8(r22)
41110764:	b0800317 	ldw	r2,12(r22)
41110768:	b4800204 	addi	r18,r22,8
4111076c:	18800315 	stw	r2,12(r3)
41110770:	10c00215 	stw	r3,8(r2)
41110774:	21801b36 	bltu	r4,r6,411107e4 <_realloc_r+0x2f8>
41110778:	008004c4 	movi	r2,19
4111077c:	1180352e 	bgeu	r2,r6,41110854 <_realloc_r+0x368>
41110780:	a8800017 	ldw	r2,0(r21)
41110784:	b0800215 	stw	r2,8(r22)
41110788:	a8800117 	ldw	r2,4(r21)
4111078c:	b0800315 	stw	r2,12(r22)
41110790:	008006c4 	movi	r2,27
41110794:	11807f36 	bltu	r2,r6,41110994 <_realloc_r+0x4a8>
41110798:	b0800404 	addi	r2,r22,16
4111079c:	ad400204 	addi	r21,r21,8
411107a0:	00002d06 	br	41110858 <_realloc_r+0x36c>
411107a4:	adbffe17 	ldw	r22,-8(r21)
411107a8:	00bfff04 	movi	r2,-4
411107ac:	9dadc83a 	sub	r22,r19,r22
411107b0:	b1000117 	ldw	r4,4(r22)
411107b4:	2084703a 	and	r2,r4,r2
411107b8:	b03f7726 	beq	r22,zero,41110598 <__reset+0xbb0f0598>
411107bc:	80af883a 	add	r23,r16,r2
411107c0:	b8ff7516 	blt	r23,r3,41110598 <__reset+0xbb0f0598>
411107c4:	b0800317 	ldw	r2,12(r22)
411107c8:	b0c00217 	ldw	r3,8(r22)
411107cc:	81bfff04 	addi	r6,r16,-4
411107d0:	01000904 	movi	r4,36
411107d4:	18800315 	stw	r2,12(r3)
411107d8:	10c00215 	stw	r3,8(r2)
411107dc:	b4800204 	addi	r18,r22,8
411107e0:	21bfe52e 	bgeu	r4,r6,41110778 <__reset+0xbb0f0778>
411107e4:	a80b883a 	mov	r5,r21
411107e8:	9009883a 	mov	r4,r18
411107ec:	110f1040 	call	4110f104 <memmove>
411107f0:	b821883a 	mov	r16,r23
411107f4:	b027883a 	mov	r19,r22
411107f8:	003f8a06 	br	41110624 <__reset+0xbb0f0624>
411107fc:	300b883a 	mov	r5,r6
41110800:	dfc00917 	ldw	ra,36(sp)
41110804:	df000817 	ldw	fp,32(sp)
41110808:	ddc00717 	ldw	r23,28(sp)
4111080c:	dd800617 	ldw	r22,24(sp)
41110810:	dd400517 	ldw	r21,20(sp)
41110814:	dd000417 	ldw	r20,16(sp)
41110818:	dcc00317 	ldw	r19,12(sp)
4111081c:	dc800217 	ldw	r18,8(sp)
41110820:	dc400117 	ldw	r17,4(sp)
41110824:	dc000017 	ldw	r16,0(sp)
41110828:	dec00a04 	addi	sp,sp,40
4111082c:	110e8141 	jmpi	4110e814 <_malloc_r>
41110830:	a8c00017 	ldw	r3,0(r21)
41110834:	90c00015 	stw	r3,0(r18)
41110838:	a8c00117 	ldw	r3,4(r21)
4111083c:	90c00115 	stw	r3,4(r18)
41110840:	00c006c4 	movi	r3,27
41110844:	19804536 	bltu	r3,r6,4111095c <_realloc_r+0x470>
41110848:	90800204 	addi	r2,r18,8
4111084c:	a8c00204 	addi	r3,r21,8
41110850:	003f6306 	br	411105e0 <__reset+0xbb0f05e0>
41110854:	9005883a 	mov	r2,r18
41110858:	a8c00017 	ldw	r3,0(r21)
4111085c:	b821883a 	mov	r16,r23
41110860:	b027883a 	mov	r19,r22
41110864:	10c00015 	stw	r3,0(r2)
41110868:	a8c00117 	ldw	r3,4(r21)
4111086c:	10c00115 	stw	r3,4(r2)
41110870:	a8c00217 	ldw	r3,8(r21)
41110874:	10c00215 	stw	r3,8(r2)
41110878:	003f6a06 	br	41110624 <__reset+0xbb0f0624>
4111087c:	9c67883a 	add	r19,r19,r17
41110880:	4445c83a 	sub	r2,r8,r17
41110884:	e4c00215 	stw	r19,8(fp)
41110888:	10800054 	ori	r2,r2,1
4111088c:	98800115 	stw	r2,4(r19)
41110890:	a8bfff17 	ldw	r2,-4(r21)
41110894:	a009883a 	mov	r4,r20
41110898:	1080004c 	andi	r2,r2,1
4111089c:	1462b03a 	or	r17,r2,r17
411108a0:	ac7fff15 	stw	r17,-4(r21)
411108a4:	1115e500 	call	41115e50 <__malloc_unlock>
411108a8:	a805883a 	mov	r2,r21
411108ac:	003f6b06 	br	4111065c <__reset+0xbb0f065c>
411108b0:	a80b883a 	mov	r5,r21
411108b4:	9009883a 	mov	r4,r18
411108b8:	110f1040 	call	4110f104 <memmove>
411108bc:	003f4e06 	br	411105f8 <__reset+0xbb0f05f8>
411108c0:	89000404 	addi	r4,r17,16
411108c4:	b93fbc16 	blt	r23,r4,411107b8 <__reset+0xbb0f07b8>
411108c8:	b0800317 	ldw	r2,12(r22)
411108cc:	b0c00217 	ldw	r3,8(r22)
411108d0:	81bfff04 	addi	r6,r16,-4
411108d4:	01000904 	movi	r4,36
411108d8:	18800315 	stw	r2,12(r3)
411108dc:	10c00215 	stw	r3,8(r2)
411108e0:	b4800204 	addi	r18,r22,8
411108e4:	21804336 	bltu	r4,r6,411109f4 <_realloc_r+0x508>
411108e8:	008004c4 	movi	r2,19
411108ec:	11803f2e 	bgeu	r2,r6,411109ec <_realloc_r+0x500>
411108f0:	a8800017 	ldw	r2,0(r21)
411108f4:	b0800215 	stw	r2,8(r22)
411108f8:	a8800117 	ldw	r2,4(r21)
411108fc:	b0800315 	stw	r2,12(r22)
41110900:	008006c4 	movi	r2,27
41110904:	11803f36 	bltu	r2,r6,41110a04 <_realloc_r+0x518>
41110908:	b0800404 	addi	r2,r22,16
4111090c:	ad400204 	addi	r21,r21,8
41110910:	a8c00017 	ldw	r3,0(r21)
41110914:	10c00015 	stw	r3,0(r2)
41110918:	a8c00117 	ldw	r3,4(r21)
4111091c:	10c00115 	stw	r3,4(r2)
41110920:	a8c00217 	ldw	r3,8(r21)
41110924:	10c00215 	stw	r3,8(r2)
41110928:	b447883a 	add	r3,r22,r17
4111092c:	bc45c83a 	sub	r2,r23,r17
41110930:	e0c00215 	stw	r3,8(fp)
41110934:	10800054 	ori	r2,r2,1
41110938:	18800115 	stw	r2,4(r3)
4111093c:	b0800117 	ldw	r2,4(r22)
41110940:	a009883a 	mov	r4,r20
41110944:	1080004c 	andi	r2,r2,1
41110948:	1462b03a 	or	r17,r2,r17
4111094c:	b4400115 	stw	r17,4(r22)
41110950:	1115e500 	call	41115e50 <__malloc_unlock>
41110954:	9005883a 	mov	r2,r18
41110958:	003f4006 	br	4111065c <__reset+0xbb0f065c>
4111095c:	a8c00217 	ldw	r3,8(r21)
41110960:	90c00215 	stw	r3,8(r18)
41110964:	a8c00317 	ldw	r3,12(r21)
41110968:	90c00315 	stw	r3,12(r18)
4111096c:	30801126 	beq	r6,r2,411109b4 <_realloc_r+0x4c8>
41110970:	90800404 	addi	r2,r18,16
41110974:	a8c00404 	addi	r3,r21,16
41110978:	003f1906 	br	411105e0 <__reset+0xbb0f05e0>
4111097c:	90ffff17 	ldw	r3,-4(r18)
41110980:	00bfff04 	movi	r2,-4
41110984:	a825883a 	mov	r18,r21
41110988:	1884703a 	and	r2,r3,r2
4111098c:	80a1883a 	add	r16,r16,r2
41110990:	003f2406 	br	41110624 <__reset+0xbb0f0624>
41110994:	a8800217 	ldw	r2,8(r21)
41110998:	b0800415 	stw	r2,16(r22)
4111099c:	a8800317 	ldw	r2,12(r21)
411109a0:	b0800515 	stw	r2,20(r22)
411109a4:	31000a26 	beq	r6,r4,411109d0 <_realloc_r+0x4e4>
411109a8:	b0800604 	addi	r2,r22,24
411109ac:	ad400404 	addi	r21,r21,16
411109b0:	003fa906 	br	41110858 <__reset+0xbb0f0858>
411109b4:	a9000417 	ldw	r4,16(r21)
411109b8:	90800604 	addi	r2,r18,24
411109bc:	a8c00604 	addi	r3,r21,24
411109c0:	91000415 	stw	r4,16(r18)
411109c4:	a9000517 	ldw	r4,20(r21)
411109c8:	91000515 	stw	r4,20(r18)
411109cc:	003f0406 	br	411105e0 <__reset+0xbb0f05e0>
411109d0:	a8c00417 	ldw	r3,16(r21)
411109d4:	ad400604 	addi	r21,r21,24
411109d8:	b0800804 	addi	r2,r22,32
411109dc:	b0c00615 	stw	r3,24(r22)
411109e0:	a8ffff17 	ldw	r3,-4(r21)
411109e4:	b0c00715 	stw	r3,28(r22)
411109e8:	003f9b06 	br	41110858 <__reset+0xbb0f0858>
411109ec:	9005883a 	mov	r2,r18
411109f0:	003fc706 	br	41110910 <__reset+0xbb0f0910>
411109f4:	a80b883a 	mov	r5,r21
411109f8:	9009883a 	mov	r4,r18
411109fc:	110f1040 	call	4110f104 <memmove>
41110a00:	003fc906 	br	41110928 <__reset+0xbb0f0928>
41110a04:	a8800217 	ldw	r2,8(r21)
41110a08:	b0800415 	stw	r2,16(r22)
41110a0c:	a8800317 	ldw	r2,12(r21)
41110a10:	b0800515 	stw	r2,20(r22)
41110a14:	31000726 	beq	r6,r4,41110a34 <_realloc_r+0x548>
41110a18:	b0800604 	addi	r2,r22,24
41110a1c:	ad400404 	addi	r21,r21,16
41110a20:	003fbb06 	br	41110910 <__reset+0xbb0f0910>
41110a24:	a009883a 	mov	r4,r20
41110a28:	1115e500 	call	41115e50 <__malloc_unlock>
41110a2c:	0005883a 	mov	r2,zero
41110a30:	003f0a06 	br	4111065c <__reset+0xbb0f065c>
41110a34:	a8c00417 	ldw	r3,16(r21)
41110a38:	ad400604 	addi	r21,r21,24
41110a3c:	b0800804 	addi	r2,r22,32
41110a40:	b0c00615 	stw	r3,24(r22)
41110a44:	a8ffff17 	ldw	r3,-4(r21)
41110a48:	b0c00715 	stw	r3,28(r22)
41110a4c:	003fb006 	br	41110910 <__reset+0xbb0f0910>

41110a50 <__fpclassifyd>:
41110a50:	00a00034 	movhi	r2,32768
41110a54:	10bfffc4 	addi	r2,r2,-1
41110a58:	2884703a 	and	r2,r5,r2
41110a5c:	10000726 	beq	r2,zero,41110a7c <__fpclassifyd+0x2c>
41110a60:	00fffc34 	movhi	r3,65520
41110a64:	019ff834 	movhi	r6,32736
41110a68:	28c7883a 	add	r3,r5,r3
41110a6c:	31bfffc4 	addi	r6,r6,-1
41110a70:	30c00536 	bltu	r6,r3,41110a88 <__fpclassifyd+0x38>
41110a74:	00800104 	movi	r2,4
41110a78:	f800283a 	ret
41110a7c:	2000021e 	bne	r4,zero,41110a88 <__fpclassifyd+0x38>
41110a80:	00800084 	movi	r2,2
41110a84:	f800283a 	ret
41110a88:	00dffc34 	movhi	r3,32752
41110a8c:	019ff834 	movhi	r6,32736
41110a90:	28cb883a 	add	r5,r5,r3
41110a94:	31bfffc4 	addi	r6,r6,-1
41110a98:	317ff62e 	bgeu	r6,r5,41110a74 <__reset+0xbb0f0a74>
41110a9c:	01400434 	movhi	r5,16
41110aa0:	297fffc4 	addi	r5,r5,-1
41110aa4:	28800236 	bltu	r5,r2,41110ab0 <__fpclassifyd+0x60>
41110aa8:	008000c4 	movi	r2,3
41110aac:	f800283a 	ret
41110ab0:	10c00226 	beq	r2,r3,41110abc <__fpclassifyd+0x6c>
41110ab4:	0005883a 	mov	r2,zero
41110ab8:	f800283a 	ret
41110abc:	2005003a 	cmpeq	r2,r4,zero
41110ac0:	f800283a 	ret

41110ac4 <_sbrk_r>:
41110ac4:	defffd04 	addi	sp,sp,-12
41110ac8:	dc000015 	stw	r16,0(sp)
41110acc:	041044b4 	movhi	r16,16658
41110ad0:	dc400115 	stw	r17,4(sp)
41110ad4:	84379c04 	addi	r16,r16,-8592
41110ad8:	2023883a 	mov	r17,r4
41110adc:	2809883a 	mov	r4,r5
41110ae0:	dfc00215 	stw	ra,8(sp)
41110ae4:	80000015 	stw	zero,0(r16)
41110ae8:	11160100 	call	41116010 <sbrk>
41110aec:	00ffffc4 	movi	r3,-1
41110af0:	10c00526 	beq	r2,r3,41110b08 <_sbrk_r+0x44>
41110af4:	dfc00217 	ldw	ra,8(sp)
41110af8:	dc400117 	ldw	r17,4(sp)
41110afc:	dc000017 	ldw	r16,0(sp)
41110b00:	dec00304 	addi	sp,sp,12
41110b04:	f800283a 	ret
41110b08:	80c00017 	ldw	r3,0(r16)
41110b0c:	183ff926 	beq	r3,zero,41110af4 <__reset+0xbb0f0af4>
41110b10:	88c00015 	stw	r3,0(r17)
41110b14:	003ff706 	br	41110af4 <__reset+0xbb0f0af4>

41110b18 <__sread>:
41110b18:	defffe04 	addi	sp,sp,-8
41110b1c:	dc000015 	stw	r16,0(sp)
41110b20:	2821883a 	mov	r16,r5
41110b24:	2940038f 	ldh	r5,14(r5)
41110b28:	dfc00115 	stw	ra,4(sp)
41110b2c:	1112a640 	call	41112a64 <_read_r>
41110b30:	10000716 	blt	r2,zero,41110b50 <__sread+0x38>
41110b34:	80c01417 	ldw	r3,80(r16)
41110b38:	1887883a 	add	r3,r3,r2
41110b3c:	80c01415 	stw	r3,80(r16)
41110b40:	dfc00117 	ldw	ra,4(sp)
41110b44:	dc000017 	ldw	r16,0(sp)
41110b48:	dec00204 	addi	sp,sp,8
41110b4c:	f800283a 	ret
41110b50:	80c0030b 	ldhu	r3,12(r16)
41110b54:	18fbffcc 	andi	r3,r3,61439
41110b58:	80c0030d 	sth	r3,12(r16)
41110b5c:	dfc00117 	ldw	ra,4(sp)
41110b60:	dc000017 	ldw	r16,0(sp)
41110b64:	dec00204 	addi	sp,sp,8
41110b68:	f800283a 	ret

41110b6c <__seofread>:
41110b6c:	0005883a 	mov	r2,zero
41110b70:	f800283a 	ret

41110b74 <__swrite>:
41110b74:	2880030b 	ldhu	r2,12(r5)
41110b78:	defffb04 	addi	sp,sp,-20
41110b7c:	dcc00315 	stw	r19,12(sp)
41110b80:	dc800215 	stw	r18,8(sp)
41110b84:	dc400115 	stw	r17,4(sp)
41110b88:	dc000015 	stw	r16,0(sp)
41110b8c:	dfc00415 	stw	ra,16(sp)
41110b90:	10c0400c 	andi	r3,r2,256
41110b94:	2821883a 	mov	r16,r5
41110b98:	2023883a 	mov	r17,r4
41110b9c:	3025883a 	mov	r18,r6
41110ba0:	3827883a 	mov	r19,r7
41110ba4:	18000526 	beq	r3,zero,41110bbc <__swrite+0x48>
41110ba8:	2940038f 	ldh	r5,14(r5)
41110bac:	01c00084 	movi	r7,2
41110bb0:	000d883a 	mov	r6,zero
41110bb4:	1112a040 	call	41112a04 <_lseek_r>
41110bb8:	8080030b 	ldhu	r2,12(r16)
41110bbc:	8140038f 	ldh	r5,14(r16)
41110bc0:	10bbffcc 	andi	r2,r2,61439
41110bc4:	980f883a 	mov	r7,r19
41110bc8:	900d883a 	mov	r6,r18
41110bcc:	8809883a 	mov	r4,r17
41110bd0:	8080030d 	sth	r2,12(r16)
41110bd4:	dfc00417 	ldw	ra,16(sp)
41110bd8:	dcc00317 	ldw	r19,12(sp)
41110bdc:	dc800217 	ldw	r18,8(sp)
41110be0:	dc400117 	ldw	r17,4(sp)
41110be4:	dc000017 	ldw	r16,0(sp)
41110be8:	dec00504 	addi	sp,sp,20
41110bec:	11124d01 	jmpi	411124d0 <_write_r>

41110bf0 <__sseek>:
41110bf0:	defffe04 	addi	sp,sp,-8
41110bf4:	dc000015 	stw	r16,0(sp)
41110bf8:	2821883a 	mov	r16,r5
41110bfc:	2940038f 	ldh	r5,14(r5)
41110c00:	dfc00115 	stw	ra,4(sp)
41110c04:	1112a040 	call	41112a04 <_lseek_r>
41110c08:	00ffffc4 	movi	r3,-1
41110c0c:	10c00826 	beq	r2,r3,41110c30 <__sseek+0x40>
41110c10:	80c0030b 	ldhu	r3,12(r16)
41110c14:	80801415 	stw	r2,80(r16)
41110c18:	18c40014 	ori	r3,r3,4096
41110c1c:	80c0030d 	sth	r3,12(r16)
41110c20:	dfc00117 	ldw	ra,4(sp)
41110c24:	dc000017 	ldw	r16,0(sp)
41110c28:	dec00204 	addi	sp,sp,8
41110c2c:	f800283a 	ret
41110c30:	80c0030b 	ldhu	r3,12(r16)
41110c34:	18fbffcc 	andi	r3,r3,61439
41110c38:	80c0030d 	sth	r3,12(r16)
41110c3c:	dfc00117 	ldw	ra,4(sp)
41110c40:	dc000017 	ldw	r16,0(sp)
41110c44:	dec00204 	addi	sp,sp,8
41110c48:	f800283a 	ret

41110c4c <__sclose>:
41110c4c:	2940038f 	ldh	r5,14(r5)
41110c50:	11125301 	jmpi	41112530 <_close_r>

41110c54 <strcmp>:
41110c54:	2144b03a 	or	r2,r4,r5
41110c58:	108000cc 	andi	r2,r2,3
41110c5c:	1000171e 	bne	r2,zero,41110cbc <strcmp+0x68>
41110c60:	20800017 	ldw	r2,0(r4)
41110c64:	28c00017 	ldw	r3,0(r5)
41110c68:	10c0141e 	bne	r2,r3,41110cbc <strcmp+0x68>
41110c6c:	027fbff4 	movhi	r9,65279
41110c70:	4a7fbfc4 	addi	r9,r9,-257
41110c74:	0086303a 	nor	r3,zero,r2
41110c78:	02202074 	movhi	r8,32897
41110c7c:	1245883a 	add	r2,r2,r9
41110c80:	42202004 	addi	r8,r8,-32640
41110c84:	10c4703a 	and	r2,r2,r3
41110c88:	1204703a 	and	r2,r2,r8
41110c8c:	10000226 	beq	r2,zero,41110c98 <strcmp+0x44>
41110c90:	00002306 	br	41110d20 <strcmp+0xcc>
41110c94:	1000221e 	bne	r2,zero,41110d20 <strcmp+0xcc>
41110c98:	21000104 	addi	r4,r4,4
41110c9c:	20c00017 	ldw	r3,0(r4)
41110ca0:	29400104 	addi	r5,r5,4
41110ca4:	29800017 	ldw	r6,0(r5)
41110ca8:	1a4f883a 	add	r7,r3,r9
41110cac:	00c4303a 	nor	r2,zero,r3
41110cb0:	3884703a 	and	r2,r7,r2
41110cb4:	1204703a 	and	r2,r2,r8
41110cb8:	19bff626 	beq	r3,r6,41110c94 <__reset+0xbb0f0c94>
41110cbc:	20800003 	ldbu	r2,0(r4)
41110cc0:	10c03fcc 	andi	r3,r2,255
41110cc4:	18c0201c 	xori	r3,r3,128
41110cc8:	18ffe004 	addi	r3,r3,-128
41110ccc:	18000c26 	beq	r3,zero,41110d00 <strcmp+0xac>
41110cd0:	29800007 	ldb	r6,0(r5)
41110cd4:	19800326 	beq	r3,r6,41110ce4 <strcmp+0x90>
41110cd8:	00001306 	br	41110d28 <strcmp+0xd4>
41110cdc:	29800007 	ldb	r6,0(r5)
41110ce0:	11800b1e 	bne	r2,r6,41110d10 <strcmp+0xbc>
41110ce4:	21000044 	addi	r4,r4,1
41110ce8:	20c00003 	ldbu	r3,0(r4)
41110cec:	29400044 	addi	r5,r5,1
41110cf0:	18803fcc 	andi	r2,r3,255
41110cf4:	1080201c 	xori	r2,r2,128
41110cf8:	10bfe004 	addi	r2,r2,-128
41110cfc:	103ff71e 	bne	r2,zero,41110cdc <__reset+0xbb0f0cdc>
41110d00:	0007883a 	mov	r3,zero
41110d04:	28800003 	ldbu	r2,0(r5)
41110d08:	1885c83a 	sub	r2,r3,r2
41110d0c:	f800283a 	ret
41110d10:	28800003 	ldbu	r2,0(r5)
41110d14:	18c03fcc 	andi	r3,r3,255
41110d18:	1885c83a 	sub	r2,r3,r2
41110d1c:	f800283a 	ret
41110d20:	0005883a 	mov	r2,zero
41110d24:	f800283a 	ret
41110d28:	10c03fcc 	andi	r3,r2,255
41110d2c:	003ff506 	br	41110d04 <__reset+0xbb0f0d04>

41110d30 <__sprint_r.part.0>:
41110d30:	28801917 	ldw	r2,100(r5)
41110d34:	defff604 	addi	sp,sp,-40
41110d38:	dd400515 	stw	r21,20(sp)
41110d3c:	dfc00915 	stw	ra,36(sp)
41110d40:	df000815 	stw	fp,32(sp)
41110d44:	ddc00715 	stw	r23,28(sp)
41110d48:	dd800615 	stw	r22,24(sp)
41110d4c:	dd000415 	stw	r20,16(sp)
41110d50:	dcc00315 	stw	r19,12(sp)
41110d54:	dc800215 	stw	r18,8(sp)
41110d58:	dc400115 	stw	r17,4(sp)
41110d5c:	dc000015 	stw	r16,0(sp)
41110d60:	1088000c 	andi	r2,r2,8192
41110d64:	302b883a 	mov	r21,r6
41110d68:	10002e26 	beq	r2,zero,41110e24 <__sprint_r.part.0+0xf4>
41110d6c:	30800217 	ldw	r2,8(r6)
41110d70:	35800017 	ldw	r22,0(r6)
41110d74:	10002926 	beq	r2,zero,41110e1c <__sprint_r.part.0+0xec>
41110d78:	2827883a 	mov	r19,r5
41110d7c:	2029883a 	mov	r20,r4
41110d80:	b5c00104 	addi	r23,r22,4
41110d84:	04bfffc4 	movi	r18,-1
41110d88:	bc400017 	ldw	r17,0(r23)
41110d8c:	b4000017 	ldw	r16,0(r22)
41110d90:	0039883a 	mov	fp,zero
41110d94:	8822d0ba 	srli	r17,r17,2
41110d98:	8800031e 	bne	r17,zero,41110da8 <__sprint_r.part.0+0x78>
41110d9c:	00001806 	br	41110e00 <__sprint_r.part.0+0xd0>
41110da0:	84000104 	addi	r16,r16,4
41110da4:	8f001526 	beq	r17,fp,41110dfc <__sprint_r.part.0+0xcc>
41110da8:	81400017 	ldw	r5,0(r16)
41110dac:	980d883a 	mov	r6,r19
41110db0:	a009883a 	mov	r4,r20
41110db4:	11128b00 	call	411128b0 <_fputwc_r>
41110db8:	e7000044 	addi	fp,fp,1
41110dbc:	14bff81e 	bne	r2,r18,41110da0 <__reset+0xbb0f0da0>
41110dc0:	9005883a 	mov	r2,r18
41110dc4:	a8000215 	stw	zero,8(r21)
41110dc8:	a8000115 	stw	zero,4(r21)
41110dcc:	dfc00917 	ldw	ra,36(sp)
41110dd0:	df000817 	ldw	fp,32(sp)
41110dd4:	ddc00717 	ldw	r23,28(sp)
41110dd8:	dd800617 	ldw	r22,24(sp)
41110ddc:	dd400517 	ldw	r21,20(sp)
41110de0:	dd000417 	ldw	r20,16(sp)
41110de4:	dcc00317 	ldw	r19,12(sp)
41110de8:	dc800217 	ldw	r18,8(sp)
41110dec:	dc400117 	ldw	r17,4(sp)
41110df0:	dc000017 	ldw	r16,0(sp)
41110df4:	dec00a04 	addi	sp,sp,40
41110df8:	f800283a 	ret
41110dfc:	a8800217 	ldw	r2,8(r21)
41110e00:	8c63883a 	add	r17,r17,r17
41110e04:	8c63883a 	add	r17,r17,r17
41110e08:	1445c83a 	sub	r2,r2,r17
41110e0c:	a8800215 	stw	r2,8(r21)
41110e10:	b5800204 	addi	r22,r22,8
41110e14:	bdc00204 	addi	r23,r23,8
41110e18:	103fdb1e 	bne	r2,zero,41110d88 <__reset+0xbb0f0d88>
41110e1c:	0005883a 	mov	r2,zero
41110e20:	003fe806 	br	41110dc4 <__reset+0xbb0f0dc4>
41110e24:	110df380 	call	4110df38 <__sfvwrite_r>
41110e28:	003fe606 	br	41110dc4 <__reset+0xbb0f0dc4>

41110e2c <__sprint_r>:
41110e2c:	30c00217 	ldw	r3,8(r6)
41110e30:	18000126 	beq	r3,zero,41110e38 <__sprint_r+0xc>
41110e34:	1110d301 	jmpi	41110d30 <__sprint_r.part.0>
41110e38:	30000115 	stw	zero,4(r6)
41110e3c:	0005883a 	mov	r2,zero
41110e40:	f800283a 	ret

41110e44 <___vfiprintf_internal_r>:
41110e44:	deffc904 	addi	sp,sp,-220
41110e48:	df003515 	stw	fp,212(sp)
41110e4c:	dd003115 	stw	r20,196(sp)
41110e50:	dfc03615 	stw	ra,216(sp)
41110e54:	ddc03415 	stw	r23,208(sp)
41110e58:	dd803315 	stw	r22,204(sp)
41110e5c:	dd403215 	stw	r21,200(sp)
41110e60:	dcc03015 	stw	r19,192(sp)
41110e64:	dc802f15 	stw	r18,188(sp)
41110e68:	dc402e15 	stw	r17,184(sp)
41110e6c:	dc002d15 	stw	r16,180(sp)
41110e70:	d9002015 	stw	r4,128(sp)
41110e74:	d9c02215 	stw	r7,136(sp)
41110e78:	2829883a 	mov	r20,r5
41110e7c:	3039883a 	mov	fp,r6
41110e80:	20000226 	beq	r4,zero,41110e8c <___vfiprintf_internal_r+0x48>
41110e84:	20800e17 	ldw	r2,56(r4)
41110e88:	1000cf26 	beq	r2,zero,411111c8 <___vfiprintf_internal_r+0x384>
41110e8c:	a080030b 	ldhu	r2,12(r20)
41110e90:	10c8000c 	andi	r3,r2,8192
41110e94:	1800061e 	bne	r3,zero,41110eb0 <___vfiprintf_internal_r+0x6c>
41110e98:	a1001917 	ldw	r4,100(r20)
41110e9c:	00f7ffc4 	movi	r3,-8193
41110ea0:	10880014 	ori	r2,r2,8192
41110ea4:	20c6703a 	and	r3,r4,r3
41110ea8:	a080030d 	sth	r2,12(r20)
41110eac:	a0c01915 	stw	r3,100(r20)
41110eb0:	10c0020c 	andi	r3,r2,8
41110eb4:	1800a926 	beq	r3,zero,4111115c <___vfiprintf_internal_r+0x318>
41110eb8:	a0c00417 	ldw	r3,16(r20)
41110ebc:	1800a726 	beq	r3,zero,4111115c <___vfiprintf_internal_r+0x318>
41110ec0:	1080068c 	andi	r2,r2,26
41110ec4:	00c00284 	movi	r3,10
41110ec8:	10c0ac26 	beq	r2,r3,4111117c <___vfiprintf_internal_r+0x338>
41110ecc:	da801a04 	addi	r10,sp,104
41110ed0:	da801e15 	stw	r10,120(sp)
41110ed4:	d8801e17 	ldw	r2,120(sp)
41110ed8:	da8019c4 	addi	r10,sp,103
41110edc:	059044b4 	movhi	r22,16658
41110ee0:	05d044b4 	movhi	r23,16658
41110ee4:	da801f15 	stw	r10,124(sp)
41110ee8:	1295c83a 	sub	r10,r2,r10
41110eec:	b5afa204 	addi	r22,r22,-16760
41110ef0:	bdef9e04 	addi	r23,r23,-16776
41110ef4:	dec01a15 	stw	sp,104(sp)
41110ef8:	d8001c15 	stw	zero,112(sp)
41110efc:	d8001b15 	stw	zero,108(sp)
41110f00:	d8002615 	stw	zero,152(sp)
41110f04:	d8002315 	stw	zero,140(sp)
41110f08:	da802715 	stw	r10,156(sp)
41110f0c:	d811883a 	mov	r8,sp
41110f10:	dd002115 	stw	r20,132(sp)
41110f14:	e021883a 	mov	r16,fp
41110f18:	80800007 	ldb	r2,0(r16)
41110f1c:	1003ea26 	beq	r2,zero,41111ec8 <___vfiprintf_internal_r+0x1084>
41110f20:	00c00944 	movi	r3,37
41110f24:	8025883a 	mov	r18,r16
41110f28:	10c0021e 	bne	r2,r3,41110f34 <___vfiprintf_internal_r+0xf0>
41110f2c:	00001606 	br	41110f88 <___vfiprintf_internal_r+0x144>
41110f30:	10c00326 	beq	r2,r3,41110f40 <___vfiprintf_internal_r+0xfc>
41110f34:	94800044 	addi	r18,r18,1
41110f38:	90800007 	ldb	r2,0(r18)
41110f3c:	103ffc1e 	bne	r2,zero,41110f30 <__reset+0xbb0f0f30>
41110f40:	9423c83a 	sub	r17,r18,r16
41110f44:	88001026 	beq	r17,zero,41110f88 <___vfiprintf_internal_r+0x144>
41110f48:	d8c01c17 	ldw	r3,112(sp)
41110f4c:	d8801b17 	ldw	r2,108(sp)
41110f50:	44000015 	stw	r16,0(r8)
41110f54:	88c7883a 	add	r3,r17,r3
41110f58:	10800044 	addi	r2,r2,1
41110f5c:	44400115 	stw	r17,4(r8)
41110f60:	d8c01c15 	stw	r3,112(sp)
41110f64:	d8801b15 	stw	r2,108(sp)
41110f68:	010001c4 	movi	r4,7
41110f6c:	2080760e 	bge	r4,r2,41111148 <___vfiprintf_internal_r+0x304>
41110f70:	1803821e 	bne	r3,zero,41111d7c <___vfiprintf_internal_r+0xf38>
41110f74:	da802317 	ldw	r10,140(sp)
41110f78:	d8001b15 	stw	zero,108(sp)
41110f7c:	d811883a 	mov	r8,sp
41110f80:	5455883a 	add	r10,r10,r17
41110f84:	da802315 	stw	r10,140(sp)
41110f88:	90800007 	ldb	r2,0(r18)
41110f8c:	10044626 	beq	r2,zero,411120a8 <___vfiprintf_internal_r+0x1264>
41110f90:	90c00047 	ldb	r3,1(r18)
41110f94:	94000044 	addi	r16,r18,1
41110f98:	d8001d85 	stb	zero,118(sp)
41110f9c:	0009883a 	mov	r4,zero
41110fa0:	000f883a 	mov	r7,zero
41110fa4:	027fffc4 	movi	r9,-1
41110fa8:	0023883a 	mov	r17,zero
41110fac:	0029883a 	mov	r20,zero
41110fb0:	01401604 	movi	r5,88
41110fb4:	01800244 	movi	r6,9
41110fb8:	03400a84 	movi	r13,42
41110fbc:	03001b04 	movi	r12,108
41110fc0:	84000044 	addi	r16,r16,1
41110fc4:	18bff804 	addi	r2,r3,-32
41110fc8:	28827336 	bltu	r5,r2,41111998 <___vfiprintf_internal_r+0xb54>
41110fcc:	100490ba 	slli	r2,r2,2
41110fd0:	02904474 	movhi	r10,16657
41110fd4:	5283f904 	addi	r10,r10,4068
41110fd8:	1285883a 	add	r2,r2,r10
41110fdc:	10800017 	ldw	r2,0(r2)
41110fe0:	1000683a 	jmp	r2
41110fe4:	411116cc 	andi	r4,r8,17499
41110fe8:	41111998 	cmpnei	r4,r8,17510
41110fec:	41111998 	cmpnei	r4,r8,17510
41110ff0:	411116ec 	andhi	r4,r8,17499
41110ff4:	41111998 	cmpnei	r4,r8,17510
41110ff8:	41111998 	cmpnei	r4,r8,17510
41110ffc:	41111998 	cmpnei	r4,r8,17510
41111000:	41111998 	cmpnei	r4,r8,17510
41111004:	41111998 	cmpnei	r4,r8,17510
41111008:	41111998 	cmpnei	r4,r8,17510
4111100c:	411118d4 	ori	r4,r8,17507
41111010:	411118f0 	cmpltui	r4,r8,17507
41111014:	41111998 	cmpnei	r4,r8,17510
41111018:	411111d8 	cmpnei	r4,r8,17479
4111101c:	41111900 	call	44111190 <__alt_data_end+0x2f17190>
41111020:	41111998 	cmpnei	r4,r8,17510
41111024:	411116f8 	rdprs	r4,r8,17499
41111028:	41111704 	addi	r4,r8,17500
4111102c:	41111704 	addi	r4,r8,17500
41111030:	41111704 	addi	r4,r8,17500
41111034:	41111704 	addi	r4,r8,17500
41111038:	41111704 	addi	r4,r8,17500
4111103c:	41111704 	addi	r4,r8,17500
41111040:	41111704 	addi	r4,r8,17500
41111044:	41111704 	addi	r4,r8,17500
41111048:	41111704 	addi	r4,r8,17500
4111104c:	41111998 	cmpnei	r4,r8,17510
41111050:	41111998 	cmpnei	r4,r8,17510
41111054:	41111998 	cmpnei	r4,r8,17510
41111058:	41111998 	cmpnei	r4,r8,17510
4111105c:	41111998 	cmpnei	r4,r8,17510
41111060:	41111998 	cmpnei	r4,r8,17510
41111064:	41111998 	cmpnei	r4,r8,17510
41111068:	41111998 	cmpnei	r4,r8,17510
4111106c:	41111998 	cmpnei	r4,r8,17510
41111070:	41111998 	cmpnei	r4,r8,17510
41111074:	41111730 	cmpltui	r4,r8,17500
41111078:	41111998 	cmpnei	r4,r8,17510
4111107c:	41111998 	cmpnei	r4,r8,17510
41111080:	41111998 	cmpnei	r4,r8,17510
41111084:	41111998 	cmpnei	r4,r8,17510
41111088:	41111998 	cmpnei	r4,r8,17510
4111108c:	41111998 	cmpnei	r4,r8,17510
41111090:	41111998 	cmpnei	r4,r8,17510
41111094:	41111998 	cmpnei	r4,r8,17510
41111098:	41111998 	cmpnei	r4,r8,17510
4111109c:	41111998 	cmpnei	r4,r8,17510
411110a0:	41111768 	cmpgeui	r4,r8,17501
411110a4:	41111998 	cmpnei	r4,r8,17510
411110a8:	41111998 	cmpnei	r4,r8,17510
411110ac:	41111998 	cmpnei	r4,r8,17510
411110b0:	41111998 	cmpnei	r4,r8,17510
411110b4:	41111998 	cmpnei	r4,r8,17510
411110b8:	411117c0 	call	4411117c <__alt_data_end+0x2f1717c>
411110bc:	41111998 	cmpnei	r4,r8,17510
411110c0:	41111998 	cmpnei	r4,r8,17510
411110c4:	41111830 	cmpltui	r4,r8,17504
411110c8:	41111998 	cmpnei	r4,r8,17510
411110cc:	41111998 	cmpnei	r4,r8,17510
411110d0:	41111998 	cmpnei	r4,r8,17510
411110d4:	41111998 	cmpnei	r4,r8,17510
411110d8:	41111998 	cmpnei	r4,r8,17510
411110dc:	41111998 	cmpnei	r4,r8,17510
411110e0:	41111998 	cmpnei	r4,r8,17510
411110e4:	41111998 	cmpnei	r4,r8,17510
411110e8:	41111998 	cmpnei	r4,r8,17510
411110ec:	41111998 	cmpnei	r4,r8,17510
411110f0:	411115dc 	xori	r4,r8,17495
411110f4:	41111608 	cmpgei	r4,r8,17496
411110f8:	41111998 	cmpnei	r4,r8,17510
411110fc:	41111998 	cmpnei	r4,r8,17510
41111100:	41111998 	cmpnei	r4,r8,17510
41111104:	41111940 	call	44111194 <__alt_data_end+0x2f17194>
41111108:	41111608 	cmpgei	r4,r8,17496
4111110c:	41111998 	cmpnei	r4,r8,17510
41111110:	41111998 	cmpnei	r4,r8,17510
41111114:	4111149c 	xori	r4,r8,17490
41111118:	41111998 	cmpnei	r4,r8,17510
4111111c:	411114ac 	andhi	r4,r8,17490
41111120:	411114e8 	cmpgeui	r4,r8,17491
41111124:	411111e4 	muli	r4,r8,17479
41111128:	41111490 	cmplti	r4,r8,17490
4111112c:	41111998 	cmpnei	r4,r8,17510
41111130:	4111186c 	andhi	r4,r8,17505
41111134:	41111998 	cmpnei	r4,r8,17510
41111138:	411118c4 	addi	r4,r8,17507
4111113c:	41111998 	cmpnei	r4,r8,17510
41111140:	41111998 	cmpnei	r4,r8,17510
41111144:	41111588 	cmpgei	r4,r8,17494
41111148:	42000204 	addi	r8,r8,8
4111114c:	da802317 	ldw	r10,140(sp)
41111150:	5455883a 	add	r10,r10,r17
41111154:	da802315 	stw	r10,140(sp)
41111158:	003f8b06 	br	41110f88 <__reset+0xbb0f0f88>
4111115c:	d9002017 	ldw	r4,128(sp)
41111160:	a00b883a 	mov	r5,r20
41111164:	110bae00 	call	4110bae0 <__swsetup_r>
41111168:	1003b11e 	bne	r2,zero,41112030 <___vfiprintf_internal_r+0x11ec>
4111116c:	a080030b 	ldhu	r2,12(r20)
41111170:	00c00284 	movi	r3,10
41111174:	1080068c 	andi	r2,r2,26
41111178:	10ff541e 	bne	r2,r3,41110ecc <__reset+0xbb0f0ecc>
4111117c:	a080038f 	ldh	r2,14(r20)
41111180:	103f5216 	blt	r2,zero,41110ecc <__reset+0xbb0f0ecc>
41111184:	d9c02217 	ldw	r7,136(sp)
41111188:	d9002017 	ldw	r4,128(sp)
4111118c:	e00d883a 	mov	r6,fp
41111190:	a00b883a 	mov	r5,r20
41111194:	11122bc0 	call	411122bc <__sbprintf>
41111198:	dfc03617 	ldw	ra,216(sp)
4111119c:	df003517 	ldw	fp,212(sp)
411111a0:	ddc03417 	ldw	r23,208(sp)
411111a4:	dd803317 	ldw	r22,204(sp)
411111a8:	dd403217 	ldw	r21,200(sp)
411111ac:	dd003117 	ldw	r20,196(sp)
411111b0:	dcc03017 	ldw	r19,192(sp)
411111b4:	dc802f17 	ldw	r18,188(sp)
411111b8:	dc402e17 	ldw	r17,184(sp)
411111bc:	dc002d17 	ldw	r16,180(sp)
411111c0:	dec03704 	addi	sp,sp,220
411111c4:	f800283a 	ret
411111c8:	110dab40 	call	4110dab4 <__sinit>
411111cc:	003f2f06 	br	41110e8c <__reset+0xbb0f0e8c>
411111d0:	0463c83a 	sub	r17,zero,r17
411111d4:	d8802215 	stw	r2,136(sp)
411111d8:	a5000114 	ori	r20,r20,4
411111dc:	80c00007 	ldb	r3,0(r16)
411111e0:	003f7706 	br	41110fc0 <__reset+0xbb0f0fc0>
411111e4:	00800c04 	movi	r2,48
411111e8:	da802217 	ldw	r10,136(sp)
411111ec:	d8801d05 	stb	r2,116(sp)
411111f0:	00801e04 	movi	r2,120
411111f4:	d8801d45 	stb	r2,117(sp)
411111f8:	d8001d85 	stb	zero,118(sp)
411111fc:	50c00104 	addi	r3,r10,4
41111200:	54800017 	ldw	r18,0(r10)
41111204:	0027883a 	mov	r19,zero
41111208:	a0800094 	ori	r2,r20,2
4111120c:	48030b16 	blt	r9,zero,41111e3c <___vfiprintf_internal_r+0xff8>
41111210:	00bfdfc4 	movi	r2,-129
41111214:	a096703a 	and	r11,r20,r2
41111218:	d8c02215 	stw	r3,136(sp)
4111121c:	5d000094 	ori	r20,r11,2
41111220:	90032b1e 	bne	r18,zero,41111ed0 <___vfiprintf_internal_r+0x108c>
41111224:	009044b4 	movhi	r2,16658
41111228:	10af3d04 	addi	r2,r2,-17164
4111122c:	d8802615 	stw	r2,152(sp)
41111230:	0039883a 	mov	fp,zero
41111234:	48017b1e 	bne	r9,zero,41111824 <___vfiprintf_internal_r+0x9e0>
41111238:	0013883a 	mov	r9,zero
4111123c:	0027883a 	mov	r19,zero
41111240:	dd401a04 	addi	r21,sp,104
41111244:	4825883a 	mov	r18,r9
41111248:	4cc0010e 	bge	r9,r19,41111250 <___vfiprintf_internal_r+0x40c>
4111124c:	9825883a 	mov	r18,r19
41111250:	e7003fcc 	andi	fp,fp,255
41111254:	e700201c 	xori	fp,fp,128
41111258:	e73fe004 	addi	fp,fp,-128
4111125c:	e0000126 	beq	fp,zero,41111264 <___vfiprintf_internal_r+0x420>
41111260:	94800044 	addi	r18,r18,1
41111264:	a380008c 	andi	r14,r20,2
41111268:	70000126 	beq	r14,zero,41111270 <___vfiprintf_internal_r+0x42c>
4111126c:	94800084 	addi	r18,r18,2
41111270:	a700210c 	andi	fp,r20,132
41111274:	e001df1e 	bne	fp,zero,411119f4 <___vfiprintf_internal_r+0xbb0>
41111278:	8c87c83a 	sub	r3,r17,r18
4111127c:	00c1dd0e 	bge	zero,r3,411119f4 <___vfiprintf_internal_r+0xbb0>
41111280:	01c00404 	movi	r7,16
41111284:	d8801c17 	ldw	r2,112(sp)
41111288:	38c3ad0e 	bge	r7,r3,41112140 <___vfiprintf_internal_r+0x12fc>
4111128c:	029044b4 	movhi	r10,16658
41111290:	52afa204 	addi	r10,r10,-16760
41111294:	dc002915 	stw	r16,164(sp)
41111298:	d9801b17 	ldw	r6,108(sp)
4111129c:	da802415 	stw	r10,144(sp)
411112a0:	03c001c4 	movi	r15,7
411112a4:	da402515 	stw	r9,148(sp)
411112a8:	db802815 	stw	r14,160(sp)
411112ac:	1821883a 	mov	r16,r3
411112b0:	00000506 	br	411112c8 <___vfiprintf_internal_r+0x484>
411112b4:	31400084 	addi	r5,r6,2
411112b8:	42000204 	addi	r8,r8,8
411112bc:	200d883a 	mov	r6,r4
411112c0:	843ffc04 	addi	r16,r16,-16
411112c4:	3c000d0e 	bge	r7,r16,411112fc <___vfiprintf_internal_r+0x4b8>
411112c8:	10800404 	addi	r2,r2,16
411112cc:	31000044 	addi	r4,r6,1
411112d0:	45800015 	stw	r22,0(r8)
411112d4:	41c00115 	stw	r7,4(r8)
411112d8:	d8801c15 	stw	r2,112(sp)
411112dc:	d9001b15 	stw	r4,108(sp)
411112e0:	793ff40e 	bge	r15,r4,411112b4 <__reset+0xbb0f12b4>
411112e4:	1001b51e 	bne	r2,zero,411119bc <___vfiprintf_internal_r+0xb78>
411112e8:	843ffc04 	addi	r16,r16,-16
411112ec:	000d883a 	mov	r6,zero
411112f0:	01400044 	movi	r5,1
411112f4:	d811883a 	mov	r8,sp
411112f8:	3c3ff316 	blt	r7,r16,411112c8 <__reset+0xbb0f12c8>
411112fc:	8007883a 	mov	r3,r16
41111300:	da402517 	ldw	r9,148(sp)
41111304:	db802817 	ldw	r14,160(sp)
41111308:	dc002917 	ldw	r16,164(sp)
4111130c:	da802417 	ldw	r10,144(sp)
41111310:	1885883a 	add	r2,r3,r2
41111314:	40c00115 	stw	r3,4(r8)
41111318:	42800015 	stw	r10,0(r8)
4111131c:	d8801c15 	stw	r2,112(sp)
41111320:	d9401b15 	stw	r5,108(sp)
41111324:	00c001c4 	movi	r3,7
41111328:	19426016 	blt	r3,r5,41111cac <___vfiprintf_internal_r+0xe68>
4111132c:	d8c01d87 	ldb	r3,118(sp)
41111330:	42000204 	addi	r8,r8,8
41111334:	29000044 	addi	r4,r5,1
41111338:	1801b31e 	bne	r3,zero,41111a08 <___vfiprintf_internal_r+0xbc4>
4111133c:	7001c026 	beq	r14,zero,41111a40 <___vfiprintf_internal_r+0xbfc>
41111340:	d8c01d04 	addi	r3,sp,116
41111344:	10800084 	addi	r2,r2,2
41111348:	40c00015 	stw	r3,0(r8)
4111134c:	00c00084 	movi	r3,2
41111350:	40c00115 	stw	r3,4(r8)
41111354:	d8801c15 	stw	r2,112(sp)
41111358:	d9001b15 	stw	r4,108(sp)
4111135c:	00c001c4 	movi	r3,7
41111360:	1902650e 	bge	r3,r4,41111cf8 <___vfiprintf_internal_r+0xeb4>
41111364:	10029a1e 	bne	r2,zero,41111dd0 <___vfiprintf_internal_r+0xf8c>
41111368:	00c02004 	movi	r3,128
4111136c:	01000044 	movi	r4,1
41111370:	000b883a 	mov	r5,zero
41111374:	d811883a 	mov	r8,sp
41111378:	e0c1b31e 	bne	fp,r3,41111a48 <___vfiprintf_internal_r+0xc04>
4111137c:	8cb9c83a 	sub	fp,r17,r18
41111380:	0701b10e 	bge	zero,fp,41111a48 <___vfiprintf_internal_r+0xc04>
41111384:	01c00404 	movi	r7,16
41111388:	3f03890e 	bge	r7,fp,411121b0 <___vfiprintf_internal_r+0x136c>
4111138c:	00d044b4 	movhi	r3,16658
41111390:	18ef9e04 	addi	r3,r3,-16776
41111394:	d8c02415 	stw	r3,144(sp)
41111398:	8007883a 	mov	r3,r16
4111139c:	034001c4 	movi	r13,7
411113a0:	e021883a 	mov	r16,fp
411113a4:	da402515 	stw	r9,148(sp)
411113a8:	1839883a 	mov	fp,r3
411113ac:	00000506 	br	411113c4 <___vfiprintf_internal_r+0x580>
411113b0:	29800084 	addi	r6,r5,2
411113b4:	42000204 	addi	r8,r8,8
411113b8:	180b883a 	mov	r5,r3
411113bc:	843ffc04 	addi	r16,r16,-16
411113c0:	3c000d0e 	bge	r7,r16,411113f8 <___vfiprintf_internal_r+0x5b4>
411113c4:	10800404 	addi	r2,r2,16
411113c8:	28c00044 	addi	r3,r5,1
411113cc:	45c00015 	stw	r23,0(r8)
411113d0:	41c00115 	stw	r7,4(r8)
411113d4:	d8801c15 	stw	r2,112(sp)
411113d8:	d8c01b15 	stw	r3,108(sp)
411113dc:	68fff40e 	bge	r13,r3,411113b0 <__reset+0xbb0f13b0>
411113e0:	1002241e 	bne	r2,zero,41111c74 <___vfiprintf_internal_r+0xe30>
411113e4:	843ffc04 	addi	r16,r16,-16
411113e8:	01800044 	movi	r6,1
411113ec:	000b883a 	mov	r5,zero
411113f0:	d811883a 	mov	r8,sp
411113f4:	3c3ff316 	blt	r7,r16,411113c4 <__reset+0xbb0f13c4>
411113f8:	da402517 	ldw	r9,148(sp)
411113fc:	e007883a 	mov	r3,fp
41111400:	8039883a 	mov	fp,r16
41111404:	1821883a 	mov	r16,r3
41111408:	d8c02417 	ldw	r3,144(sp)
4111140c:	1705883a 	add	r2,r2,fp
41111410:	47000115 	stw	fp,4(r8)
41111414:	40c00015 	stw	r3,0(r8)
41111418:	d8801c15 	stw	r2,112(sp)
4111141c:	d9801b15 	stw	r6,108(sp)
41111420:	00c001c4 	movi	r3,7
41111424:	19827616 	blt	r3,r6,41111e00 <___vfiprintf_internal_r+0xfbc>
41111428:	4cf9c83a 	sub	fp,r9,r19
4111142c:	42000204 	addi	r8,r8,8
41111430:	31000044 	addi	r4,r6,1
41111434:	300b883a 	mov	r5,r6
41111438:	07018516 	blt	zero,fp,41111a50 <___vfiprintf_internal_r+0xc0c>
4111143c:	9885883a 	add	r2,r19,r2
41111440:	45400015 	stw	r21,0(r8)
41111444:	44c00115 	stw	r19,4(r8)
41111448:	d8801c15 	stw	r2,112(sp)
4111144c:	d9001b15 	stw	r4,108(sp)
41111450:	00c001c4 	movi	r3,7
41111454:	1901dd0e 	bge	r3,r4,41111bcc <___vfiprintf_internal_r+0xd88>
41111458:	1002401e 	bne	r2,zero,41111d5c <___vfiprintf_internal_r+0xf18>
4111145c:	d8001b15 	stw	zero,108(sp)
41111460:	a2c0010c 	andi	r11,r20,4
41111464:	58000226 	beq	r11,zero,41111470 <___vfiprintf_internal_r+0x62c>
41111468:	8ca7c83a 	sub	r19,r17,r18
4111146c:	04c2f216 	blt	zero,r19,41112038 <___vfiprintf_internal_r+0x11f4>
41111470:	8c80010e 	bge	r17,r18,41111478 <___vfiprintf_internal_r+0x634>
41111474:	9023883a 	mov	r17,r18
41111478:	da802317 	ldw	r10,140(sp)
4111147c:	5455883a 	add	r10,r10,r17
41111480:	da802315 	stw	r10,140(sp)
41111484:	d8001b15 	stw	zero,108(sp)
41111488:	d811883a 	mov	r8,sp
4111148c:	003ea206 	br	41110f18 <__reset+0xbb0f0f18>
41111490:	a5000814 	ori	r20,r20,32
41111494:	80c00007 	ldb	r3,0(r16)
41111498:	003ec906 	br	41110fc0 <__reset+0xbb0f0fc0>
4111149c:	80c00007 	ldb	r3,0(r16)
411114a0:	1b030926 	beq	r3,r12,411120c8 <___vfiprintf_internal_r+0x1284>
411114a4:	a5000414 	ori	r20,r20,16
411114a8:	003ec506 	br	41110fc0 <__reset+0xbb0f0fc0>
411114ac:	21003fcc 	andi	r4,r4,255
411114b0:	20035e1e 	bne	r4,zero,4111222c <___vfiprintf_internal_r+0x13e8>
411114b4:	a080080c 	andi	r2,r20,32
411114b8:	1002a526 	beq	r2,zero,41111f50 <___vfiprintf_internal_r+0x110c>
411114bc:	da802217 	ldw	r10,136(sp)
411114c0:	50800017 	ldw	r2,0(r10)
411114c4:	da802317 	ldw	r10,140(sp)
411114c8:	5007d7fa 	srai	r3,r10,31
411114cc:	da802217 	ldw	r10,136(sp)
411114d0:	10c00115 	stw	r3,4(r2)
411114d4:	52800104 	addi	r10,r10,4
411114d8:	da802215 	stw	r10,136(sp)
411114dc:	da802317 	ldw	r10,140(sp)
411114e0:	12800015 	stw	r10,0(r2)
411114e4:	003e8c06 	br	41110f18 <__reset+0xbb0f0f18>
411114e8:	21003fcc 	andi	r4,r4,255
411114ec:	2003511e 	bne	r4,zero,41112234 <___vfiprintf_internal_r+0x13f0>
411114f0:	a080080c 	andi	r2,r20,32
411114f4:	1000a126 	beq	r2,zero,4111177c <___vfiprintf_internal_r+0x938>
411114f8:	da802217 	ldw	r10,136(sp)
411114fc:	d8001d85 	stb	zero,118(sp)
41111500:	50800204 	addi	r2,r10,8
41111504:	54800017 	ldw	r18,0(r10)
41111508:	54c00117 	ldw	r19,4(r10)
4111150c:	4802b416 	blt	r9,zero,41111fe0 <___vfiprintf_internal_r+0x119c>
41111510:	013fdfc4 	movi	r4,-129
41111514:	94c6b03a 	or	r3,r18,r19
41111518:	d8802215 	stw	r2,136(sp)
4111151c:	a128703a 	and	r20,r20,r4
41111520:	1800a226 	beq	r3,zero,411117ac <___vfiprintf_internal_r+0x968>
41111524:	0039883a 	mov	fp,zero
41111528:	dd401a04 	addi	r21,sp,104
4111152c:	9006d0fa 	srli	r3,r18,3
41111530:	9808977a 	slli	r4,r19,29
41111534:	9826d0fa 	srli	r19,r19,3
41111538:	948001cc 	andi	r18,r18,7
4111153c:	90800c04 	addi	r2,r18,48
41111540:	ad7fffc4 	addi	r21,r21,-1
41111544:	20e4b03a 	or	r18,r4,r3
41111548:	a8800005 	stb	r2,0(r21)
4111154c:	94c6b03a 	or	r3,r18,r19
41111550:	183ff61e 	bne	r3,zero,4111152c <__reset+0xbb0f152c>
41111554:	a0c0004c 	andi	r3,r20,1
41111558:	18005926 	beq	r3,zero,411116c0 <___vfiprintf_internal_r+0x87c>
4111155c:	10803fcc 	andi	r2,r2,255
41111560:	1080201c 	xori	r2,r2,128
41111564:	10bfe004 	addi	r2,r2,-128
41111568:	00c00c04 	movi	r3,48
4111156c:	10c05426 	beq	r2,r3,411116c0 <___vfiprintf_internal_r+0x87c>
41111570:	da801e17 	ldw	r10,120(sp)
41111574:	a8bfffc4 	addi	r2,r21,-1
41111578:	a8ffffc5 	stb	r3,-1(r21)
4111157c:	50a7c83a 	sub	r19,r10,r2
41111580:	102b883a 	mov	r21,r2
41111584:	003f2f06 	br	41111244 <__reset+0xbb0f1244>
41111588:	21003fcc 	andi	r4,r4,255
4111158c:	2003421e 	bne	r4,zero,41112298 <___vfiprintf_internal_r+0x1454>
41111590:	009044b4 	movhi	r2,16658
41111594:	10af3d04 	addi	r2,r2,-17164
41111598:	d8802615 	stw	r2,152(sp)
4111159c:	a080080c 	andi	r2,r20,32
411115a0:	1000aa26 	beq	r2,zero,4111184c <___vfiprintf_internal_r+0xa08>
411115a4:	da802217 	ldw	r10,136(sp)
411115a8:	54800017 	ldw	r18,0(r10)
411115ac:	54c00117 	ldw	r19,4(r10)
411115b0:	52800204 	addi	r10,r10,8
411115b4:	da802215 	stw	r10,136(sp)
411115b8:	a080004c 	andi	r2,r20,1
411115bc:	1001d226 	beq	r2,zero,41111d08 <___vfiprintf_internal_r+0xec4>
411115c0:	94c4b03a 	or	r2,r18,r19
411115c4:	1002351e 	bne	r2,zero,41111e9c <___vfiprintf_internal_r+0x1058>
411115c8:	d8001d85 	stb	zero,118(sp)
411115cc:	48022216 	blt	r9,zero,41111e58 <___vfiprintf_internal_r+0x1014>
411115d0:	00bfdfc4 	movi	r2,-129
411115d4:	a0a8703a 	and	r20,r20,r2
411115d8:	003f1506 	br	41111230 <__reset+0xbb0f1230>
411115dc:	da802217 	ldw	r10,136(sp)
411115e0:	04800044 	movi	r18,1
411115e4:	d8001d85 	stb	zero,118(sp)
411115e8:	50800017 	ldw	r2,0(r10)
411115ec:	52800104 	addi	r10,r10,4
411115f0:	da802215 	stw	r10,136(sp)
411115f4:	d8801005 	stb	r2,64(sp)
411115f8:	9027883a 	mov	r19,r18
411115fc:	dd401004 	addi	r21,sp,64
41111600:	0013883a 	mov	r9,zero
41111604:	003f1706 	br	41111264 <__reset+0xbb0f1264>
41111608:	21003fcc 	andi	r4,r4,255
4111160c:	2003201e 	bne	r4,zero,41112290 <___vfiprintf_internal_r+0x144c>
41111610:	a080080c 	andi	r2,r20,32
41111614:	10004b26 	beq	r2,zero,41111744 <___vfiprintf_internal_r+0x900>
41111618:	da802217 	ldw	r10,136(sp)
4111161c:	50800117 	ldw	r2,4(r10)
41111620:	54800017 	ldw	r18,0(r10)
41111624:	52800204 	addi	r10,r10,8
41111628:	da802215 	stw	r10,136(sp)
4111162c:	1027883a 	mov	r19,r2
41111630:	10022c16 	blt	r2,zero,41111ee4 <___vfiprintf_internal_r+0x10a0>
41111634:	df001d83 	ldbu	fp,118(sp)
41111638:	48007216 	blt	r9,zero,41111804 <___vfiprintf_internal_r+0x9c0>
4111163c:	00ffdfc4 	movi	r3,-129
41111640:	94c4b03a 	or	r2,r18,r19
41111644:	a0e8703a 	and	r20,r20,r3
41111648:	1000cc26 	beq	r2,zero,4111197c <___vfiprintf_internal_r+0xb38>
4111164c:	98021026 	beq	r19,zero,41111e90 <___vfiprintf_internal_r+0x104c>
41111650:	dc402415 	stw	r17,144(sp)
41111654:	dc002515 	stw	r16,148(sp)
41111658:	9823883a 	mov	r17,r19
4111165c:	9021883a 	mov	r16,r18
41111660:	dd401a04 	addi	r21,sp,104
41111664:	4825883a 	mov	r18,r9
41111668:	4027883a 	mov	r19,r8
4111166c:	8009883a 	mov	r4,r16
41111670:	880b883a 	mov	r5,r17
41111674:	01800284 	movi	r6,10
41111678:	000f883a 	mov	r7,zero
4111167c:	11132240 	call	41113224 <__umoddi3>
41111680:	10800c04 	addi	r2,r2,48
41111684:	ad7fffc4 	addi	r21,r21,-1
41111688:	8009883a 	mov	r4,r16
4111168c:	880b883a 	mov	r5,r17
41111690:	a8800005 	stb	r2,0(r21)
41111694:	01800284 	movi	r6,10
41111698:	000f883a 	mov	r7,zero
4111169c:	1112cac0 	call	41112cac <__udivdi3>
411116a0:	1021883a 	mov	r16,r2
411116a4:	10c4b03a 	or	r2,r2,r3
411116a8:	1823883a 	mov	r17,r3
411116ac:	103fef1e 	bne	r2,zero,4111166c <__reset+0xbb0f166c>
411116b0:	dc402417 	ldw	r17,144(sp)
411116b4:	dc002517 	ldw	r16,148(sp)
411116b8:	9013883a 	mov	r9,r18
411116bc:	9811883a 	mov	r8,r19
411116c0:	da801e17 	ldw	r10,120(sp)
411116c4:	5567c83a 	sub	r19,r10,r21
411116c8:	003ede06 	br	41111244 <__reset+0xbb0f1244>
411116cc:	38803fcc 	andi	r2,r7,255
411116d0:	1080201c 	xori	r2,r2,128
411116d4:	10bfe004 	addi	r2,r2,-128
411116d8:	1002371e 	bne	r2,zero,41111fb8 <___vfiprintf_internal_r+0x1174>
411116dc:	01000044 	movi	r4,1
411116e0:	01c00804 	movi	r7,32
411116e4:	80c00007 	ldb	r3,0(r16)
411116e8:	003e3506 	br	41110fc0 <__reset+0xbb0f0fc0>
411116ec:	a5000054 	ori	r20,r20,1
411116f0:	80c00007 	ldb	r3,0(r16)
411116f4:	003e3206 	br	41110fc0 <__reset+0xbb0f0fc0>
411116f8:	a5002014 	ori	r20,r20,128
411116fc:	80c00007 	ldb	r3,0(r16)
41111700:	003e2f06 	br	41110fc0 <__reset+0xbb0f0fc0>
41111704:	8015883a 	mov	r10,r16
41111708:	0023883a 	mov	r17,zero
4111170c:	18bff404 	addi	r2,r3,-48
41111710:	50c00007 	ldb	r3,0(r10)
41111714:	8c4002a4 	muli	r17,r17,10
41111718:	84000044 	addi	r16,r16,1
4111171c:	8015883a 	mov	r10,r16
41111720:	1463883a 	add	r17,r2,r17
41111724:	18bff404 	addi	r2,r3,-48
41111728:	30bff92e 	bgeu	r6,r2,41111710 <__reset+0xbb0f1710>
4111172c:	003e2506 	br	41110fc4 <__reset+0xbb0f0fc4>
41111730:	21003fcc 	andi	r4,r4,255
41111734:	2002d41e 	bne	r4,zero,41112288 <___vfiprintf_internal_r+0x1444>
41111738:	a5000414 	ori	r20,r20,16
4111173c:	a080080c 	andi	r2,r20,32
41111740:	103fb51e 	bne	r2,zero,41111618 <__reset+0xbb0f1618>
41111744:	a080040c 	andi	r2,r20,16
41111748:	1001f826 	beq	r2,zero,41111f2c <___vfiprintf_internal_r+0x10e8>
4111174c:	da802217 	ldw	r10,136(sp)
41111750:	54800017 	ldw	r18,0(r10)
41111754:	52800104 	addi	r10,r10,4
41111758:	da802215 	stw	r10,136(sp)
4111175c:	9027d7fa 	srai	r19,r18,31
41111760:	9805883a 	mov	r2,r19
41111764:	003fb206 	br	41111630 <__reset+0xbb0f1630>
41111768:	21003fcc 	andi	r4,r4,255
4111176c:	2002c41e 	bne	r4,zero,41112280 <___vfiprintf_internal_r+0x143c>
41111770:	a5000414 	ori	r20,r20,16
41111774:	a080080c 	andi	r2,r20,32
41111778:	103f5f1e 	bne	r2,zero,411114f8 <__reset+0xbb0f14f8>
4111177c:	a080040c 	andi	r2,r20,16
41111780:	10020f26 	beq	r2,zero,41111fc0 <___vfiprintf_internal_r+0x117c>
41111784:	da802217 	ldw	r10,136(sp)
41111788:	d8001d85 	stb	zero,118(sp)
4111178c:	0027883a 	mov	r19,zero
41111790:	50800104 	addi	r2,r10,4
41111794:	54800017 	ldw	r18,0(r10)
41111798:	48021116 	blt	r9,zero,41111fe0 <___vfiprintf_internal_r+0x119c>
4111179c:	00ffdfc4 	movi	r3,-129
411117a0:	d8802215 	stw	r2,136(sp)
411117a4:	a0e8703a 	and	r20,r20,r3
411117a8:	903f5e1e 	bne	r18,zero,41111524 <__reset+0xbb0f1524>
411117ac:	0039883a 	mov	fp,zero
411117b0:	4802a626 	beq	r9,zero,4111224c <___vfiprintf_internal_r+0x1408>
411117b4:	0025883a 	mov	r18,zero
411117b8:	0027883a 	mov	r19,zero
411117bc:	003f5a06 	br	41111528 <__reset+0xbb0f1528>
411117c0:	21003fcc 	andi	r4,r4,255
411117c4:	20029f1e 	bne	r4,zero,41112244 <___vfiprintf_internal_r+0x1400>
411117c8:	a5000414 	ori	r20,r20,16
411117cc:	a080080c 	andi	r2,r20,32
411117d0:	10005e1e 	bne	r2,zero,4111194c <___vfiprintf_internal_r+0xb08>
411117d4:	a080040c 	andi	r2,r20,16
411117d8:	1001a21e 	bne	r2,zero,41111e64 <___vfiprintf_internal_r+0x1020>
411117dc:	a080100c 	andi	r2,r20,64
411117e0:	d8001d85 	stb	zero,118(sp)
411117e4:	da802217 	ldw	r10,136(sp)
411117e8:	1002231e 	bne	r2,zero,41112078 <___vfiprintf_internal_r+0x1234>
411117ec:	50800104 	addi	r2,r10,4
411117f0:	54800017 	ldw	r18,0(r10)
411117f4:	0027883a 	mov	r19,zero
411117f8:	4801a00e 	bge	r9,zero,41111e7c <___vfiprintf_internal_r+0x1038>
411117fc:	d8802215 	stw	r2,136(sp)
41111800:	0039883a 	mov	fp,zero
41111804:	94c4b03a 	or	r2,r18,r19
41111808:	103f901e 	bne	r2,zero,4111164c <__reset+0xbb0f164c>
4111180c:	00800044 	movi	r2,1
41111810:	10803fcc 	andi	r2,r2,255
41111814:	00c00044 	movi	r3,1
41111818:	10c05926 	beq	r2,r3,41111980 <___vfiprintf_internal_r+0xb3c>
4111181c:	00c00084 	movi	r3,2
41111820:	10ffe41e 	bne	r2,r3,411117b4 <__reset+0xbb0f17b4>
41111824:	0025883a 	mov	r18,zero
41111828:	0027883a 	mov	r19,zero
4111182c:	00013d06 	br	41111d24 <___vfiprintf_internal_r+0xee0>
41111830:	21003fcc 	andi	r4,r4,255
41111834:	2002811e 	bne	r4,zero,4111223c <___vfiprintf_internal_r+0x13f8>
41111838:	009044b4 	movhi	r2,16658
4111183c:	10af3804 	addi	r2,r2,-17184
41111840:	d8802615 	stw	r2,152(sp)
41111844:	a080080c 	andi	r2,r20,32
41111848:	103f561e 	bne	r2,zero,411115a4 <__reset+0xbb0f15a4>
4111184c:	a080040c 	andi	r2,r20,16
41111850:	1001d126 	beq	r2,zero,41111f98 <___vfiprintf_internal_r+0x1154>
41111854:	da802217 	ldw	r10,136(sp)
41111858:	0027883a 	mov	r19,zero
4111185c:	54800017 	ldw	r18,0(r10)
41111860:	52800104 	addi	r10,r10,4
41111864:	da802215 	stw	r10,136(sp)
41111868:	003f5306 	br	411115b8 <__reset+0xbb0f15b8>
4111186c:	da802217 	ldw	r10,136(sp)
41111870:	d8001d85 	stb	zero,118(sp)
41111874:	55400017 	ldw	r21,0(r10)
41111878:	50c00104 	addi	r3,r10,4
4111187c:	a8024226 	beq	r21,zero,41112188 <___vfiprintf_internal_r+0x1344>
41111880:	48021816 	blt	r9,zero,411120e4 <___vfiprintf_internal_r+0x12a0>
41111884:	480d883a 	mov	r6,r9
41111888:	000b883a 	mov	r5,zero
4111188c:	a809883a 	mov	r4,r21
41111890:	d8c02a15 	stw	r3,168(sp)
41111894:	da002b15 	stw	r8,172(sp)
41111898:	da402c15 	stw	r9,176(sp)
4111189c:	110f0200 	call	4110f020 <memchr>
411118a0:	d8c02a17 	ldw	r3,168(sp)
411118a4:	da002b17 	ldw	r8,172(sp)
411118a8:	da402c17 	ldw	r9,176(sp)
411118ac:	10024826 	beq	r2,zero,411121d0 <___vfiprintf_internal_r+0x138c>
411118b0:	1567c83a 	sub	r19,r2,r21
411118b4:	df001d83 	ldbu	fp,118(sp)
411118b8:	d8c02215 	stw	r3,136(sp)
411118bc:	0013883a 	mov	r9,zero
411118c0:	003e6006 	br	41111244 <__reset+0xbb0f1244>
411118c4:	21003fcc 	andi	r4,r4,255
411118c8:	203fc026 	beq	r4,zero,411117cc <__reset+0xbb0f17cc>
411118cc:	d9c01d85 	stb	r7,118(sp)
411118d0:	003fbe06 	br	411117cc <__reset+0xbb0f17cc>
411118d4:	da802217 	ldw	r10,136(sp)
411118d8:	54400017 	ldw	r17,0(r10)
411118dc:	50800104 	addi	r2,r10,4
411118e0:	883e3b16 	blt	r17,zero,411111d0 <__reset+0xbb0f11d0>
411118e4:	d8802215 	stw	r2,136(sp)
411118e8:	80c00007 	ldb	r3,0(r16)
411118ec:	003db406 	br	41110fc0 <__reset+0xbb0f0fc0>
411118f0:	01000044 	movi	r4,1
411118f4:	01c00ac4 	movi	r7,43
411118f8:	80c00007 	ldb	r3,0(r16)
411118fc:	003db006 	br	41110fc0 <__reset+0xbb0f0fc0>
41111900:	80c00007 	ldb	r3,0(r16)
41111904:	82800044 	addi	r10,r16,1
41111908:	1b423c26 	beq	r3,r13,411121fc <___vfiprintf_internal_r+0x13b8>
4111190c:	18bff404 	addi	r2,r3,-48
41111910:	0013883a 	mov	r9,zero
41111914:	30822b36 	bltu	r6,r2,411121c4 <___vfiprintf_internal_r+0x1380>
41111918:	50c00007 	ldb	r3,0(r10)
4111191c:	4a4002a4 	muli	r9,r9,10
41111920:	54000044 	addi	r16,r10,1
41111924:	8015883a 	mov	r10,r16
41111928:	4893883a 	add	r9,r9,r2
4111192c:	18bff404 	addi	r2,r3,-48
41111930:	30bff92e 	bgeu	r6,r2,41111918 <__reset+0xbb0f1918>
41111934:	483da30e 	bge	r9,zero,41110fc4 <__reset+0xbb0f0fc4>
41111938:	027fffc4 	movi	r9,-1
4111193c:	003da106 	br	41110fc4 <__reset+0xbb0f0fc4>
41111940:	a5001014 	ori	r20,r20,64
41111944:	80c00007 	ldb	r3,0(r16)
41111948:	003d9d06 	br	41110fc0 <__reset+0xbb0f0fc0>
4111194c:	da802217 	ldw	r10,136(sp)
41111950:	d8001d85 	stb	zero,118(sp)
41111954:	50c00204 	addi	r3,r10,8
41111958:	54800017 	ldw	r18,0(r10)
4111195c:	54c00117 	ldw	r19,4(r10)
41111960:	4801ca16 	blt	r9,zero,4111208c <___vfiprintf_internal_r+0x1248>
41111964:	013fdfc4 	movi	r4,-129
41111968:	94c4b03a 	or	r2,r18,r19
4111196c:	d8c02215 	stw	r3,136(sp)
41111970:	a128703a 	and	r20,r20,r4
41111974:	0039883a 	mov	fp,zero
41111978:	103f341e 	bne	r2,zero,4111164c <__reset+0xbb0f164c>
4111197c:	483e2e26 	beq	r9,zero,41111238 <__reset+0xbb0f1238>
41111980:	0025883a 	mov	r18,zero
41111984:	94800c04 	addi	r18,r18,48
41111988:	dc8019c5 	stb	r18,103(sp)
4111198c:	dcc02717 	ldw	r19,156(sp)
41111990:	dd4019c4 	addi	r21,sp,103
41111994:	003e2b06 	br	41111244 <__reset+0xbb0f1244>
41111998:	21003fcc 	andi	r4,r4,255
4111199c:	2002361e 	bne	r4,zero,41112278 <___vfiprintf_internal_r+0x1434>
411119a0:	1801c126 	beq	r3,zero,411120a8 <___vfiprintf_internal_r+0x1264>
411119a4:	04800044 	movi	r18,1
411119a8:	d8c01005 	stb	r3,64(sp)
411119ac:	d8001d85 	stb	zero,118(sp)
411119b0:	9027883a 	mov	r19,r18
411119b4:	dd401004 	addi	r21,sp,64
411119b8:	003f1106 	br	41111600 <__reset+0xbb0f1600>
411119bc:	d9402117 	ldw	r5,132(sp)
411119c0:	d9002017 	ldw	r4,128(sp)
411119c4:	d9801a04 	addi	r6,sp,104
411119c8:	d9c02b15 	stw	r7,172(sp)
411119cc:	dbc02a15 	stw	r15,168(sp)
411119d0:	1110d300 	call	41110d30 <__sprint_r.part.0>
411119d4:	d9c02b17 	ldw	r7,172(sp)
411119d8:	dbc02a17 	ldw	r15,168(sp)
411119dc:	10006d1e 	bne	r2,zero,41111b94 <___vfiprintf_internal_r+0xd50>
411119e0:	d9801b17 	ldw	r6,108(sp)
411119e4:	d8801c17 	ldw	r2,112(sp)
411119e8:	d811883a 	mov	r8,sp
411119ec:	31400044 	addi	r5,r6,1
411119f0:	003e3306 	br	411112c0 <__reset+0xbb0f12c0>
411119f4:	d9401b17 	ldw	r5,108(sp)
411119f8:	d8801c17 	ldw	r2,112(sp)
411119fc:	29000044 	addi	r4,r5,1
41111a00:	d8c01d87 	ldb	r3,118(sp)
41111a04:	183e4d26 	beq	r3,zero,4111133c <__reset+0xbb0f133c>
41111a08:	00c00044 	movi	r3,1
41111a0c:	d9401d84 	addi	r5,sp,118
41111a10:	10c5883a 	add	r2,r2,r3
41111a14:	41400015 	stw	r5,0(r8)
41111a18:	40c00115 	stw	r3,4(r8)
41111a1c:	d8801c15 	stw	r2,112(sp)
41111a20:	d9001b15 	stw	r4,108(sp)
41111a24:	014001c4 	movi	r5,7
41111a28:	2900a90e 	bge	r5,r4,41111cd0 <___vfiprintf_internal_r+0xe8c>
41111a2c:	1000da1e 	bne	r2,zero,41111d98 <___vfiprintf_internal_r+0xf54>
41111a30:	7000ab1e 	bne	r14,zero,41111ce0 <___vfiprintf_internal_r+0xe9c>
41111a34:	000b883a 	mov	r5,zero
41111a38:	1809883a 	mov	r4,r3
41111a3c:	d811883a 	mov	r8,sp
41111a40:	00c02004 	movi	r3,128
41111a44:	e0fe4d26 	beq	fp,r3,4111137c <__reset+0xbb0f137c>
41111a48:	4cf9c83a 	sub	fp,r9,r19
41111a4c:	073e7b0e 	bge	zero,fp,4111143c <__reset+0xbb0f143c>
41111a50:	01c00404 	movi	r7,16
41111a54:	3f01900e 	bge	r7,fp,41112098 <___vfiprintf_internal_r+0x1254>
41111a58:	00d044b4 	movhi	r3,16658
41111a5c:	18ef9e04 	addi	r3,r3,-16776
41111a60:	d8c02415 	stw	r3,144(sp)
41111a64:	034001c4 	movi	r13,7
41111a68:	00000506 	br	41111a80 <___vfiprintf_internal_r+0xc3c>
41111a6c:	29000084 	addi	r4,r5,2
41111a70:	42000204 	addi	r8,r8,8
41111a74:	180b883a 	mov	r5,r3
41111a78:	e73ffc04 	addi	fp,fp,-16
41111a7c:	3f000d0e 	bge	r7,fp,41111ab4 <___vfiprintf_internal_r+0xc70>
41111a80:	10800404 	addi	r2,r2,16
41111a84:	28c00044 	addi	r3,r5,1
41111a88:	45c00015 	stw	r23,0(r8)
41111a8c:	41c00115 	stw	r7,4(r8)
41111a90:	d8801c15 	stw	r2,112(sp)
41111a94:	d8c01b15 	stw	r3,108(sp)
41111a98:	68fff40e 	bge	r13,r3,41111a6c <__reset+0xbb0f1a6c>
41111a9c:	1000101e 	bne	r2,zero,41111ae0 <___vfiprintf_internal_r+0xc9c>
41111aa0:	e73ffc04 	addi	fp,fp,-16
41111aa4:	01000044 	movi	r4,1
41111aa8:	000b883a 	mov	r5,zero
41111aac:	d811883a 	mov	r8,sp
41111ab0:	3f3ff316 	blt	r7,fp,41111a80 <__reset+0xbb0f1a80>
41111ab4:	da802417 	ldw	r10,144(sp)
41111ab8:	1705883a 	add	r2,r2,fp
41111abc:	47000115 	stw	fp,4(r8)
41111ac0:	42800015 	stw	r10,0(r8)
41111ac4:	d8801c15 	stw	r2,112(sp)
41111ac8:	d9001b15 	stw	r4,108(sp)
41111acc:	00c001c4 	movi	r3,7
41111ad0:	19003616 	blt	r3,r4,41111bac <___vfiprintf_internal_r+0xd68>
41111ad4:	42000204 	addi	r8,r8,8
41111ad8:	21000044 	addi	r4,r4,1
41111adc:	003e5706 	br	4111143c <__reset+0xbb0f143c>
41111ae0:	d9402117 	ldw	r5,132(sp)
41111ae4:	d9002017 	ldw	r4,128(sp)
41111ae8:	d9801a04 	addi	r6,sp,104
41111aec:	d9c02b15 	stw	r7,172(sp)
41111af0:	db402a15 	stw	r13,168(sp)
41111af4:	1110d300 	call	41110d30 <__sprint_r.part.0>
41111af8:	d9c02b17 	ldw	r7,172(sp)
41111afc:	db402a17 	ldw	r13,168(sp)
41111b00:	1000241e 	bne	r2,zero,41111b94 <___vfiprintf_internal_r+0xd50>
41111b04:	d9401b17 	ldw	r5,108(sp)
41111b08:	d8801c17 	ldw	r2,112(sp)
41111b0c:	d811883a 	mov	r8,sp
41111b10:	29000044 	addi	r4,r5,1
41111b14:	003fd806 	br	41111a78 <__reset+0xbb0f1a78>
41111b18:	d9401b17 	ldw	r5,108(sp)
41111b1c:	00d044b4 	movhi	r3,16658
41111b20:	18efa204 	addi	r3,r3,-16760
41111b24:	d8c02415 	stw	r3,144(sp)
41111b28:	29400044 	addi	r5,r5,1
41111b2c:	d8c02417 	ldw	r3,144(sp)
41111b30:	14c5883a 	add	r2,r2,r19
41111b34:	44c00115 	stw	r19,4(r8)
41111b38:	40c00015 	stw	r3,0(r8)
41111b3c:	d8801c15 	stw	r2,112(sp)
41111b40:	d9401b15 	stw	r5,108(sp)
41111b44:	00c001c4 	movi	r3,7
41111b48:	1940070e 	bge	r3,r5,41111b68 <___vfiprintf_internal_r+0xd24>
41111b4c:	103e4826 	beq	r2,zero,41111470 <__reset+0xbb0f1470>
41111b50:	d9402117 	ldw	r5,132(sp)
41111b54:	d9002017 	ldw	r4,128(sp)
41111b58:	d9801a04 	addi	r6,sp,104
41111b5c:	1110d300 	call	41110d30 <__sprint_r.part.0>
41111b60:	10000c1e 	bne	r2,zero,41111b94 <___vfiprintf_internal_r+0xd50>
41111b64:	d8801c17 	ldw	r2,112(sp)
41111b68:	8c80010e 	bge	r17,r18,41111b70 <___vfiprintf_internal_r+0xd2c>
41111b6c:	9023883a 	mov	r17,r18
41111b70:	da802317 	ldw	r10,140(sp)
41111b74:	5455883a 	add	r10,r10,r17
41111b78:	da802315 	stw	r10,140(sp)
41111b7c:	103e4126 	beq	r2,zero,41111484 <__reset+0xbb0f1484>
41111b80:	d9402117 	ldw	r5,132(sp)
41111b84:	d9002017 	ldw	r4,128(sp)
41111b88:	d9801a04 	addi	r6,sp,104
41111b8c:	1110d300 	call	41110d30 <__sprint_r.part.0>
41111b90:	103e3c26 	beq	r2,zero,41111484 <__reset+0xbb0f1484>
41111b94:	dd002117 	ldw	r20,132(sp)
41111b98:	a080030b 	ldhu	r2,12(r20)
41111b9c:	1080100c 	andi	r2,r2,64
41111ba0:	1001231e 	bne	r2,zero,41112030 <___vfiprintf_internal_r+0x11ec>
41111ba4:	d8802317 	ldw	r2,140(sp)
41111ba8:	003d7b06 	br	41111198 <__reset+0xbb0f1198>
41111bac:	1000991e 	bne	r2,zero,41111e14 <___vfiprintf_internal_r+0xfd0>
41111bb0:	00c00044 	movi	r3,1
41111bb4:	9805883a 	mov	r2,r19
41111bb8:	dd400015 	stw	r21,0(sp)
41111bbc:	dcc00115 	stw	r19,4(sp)
41111bc0:	dcc01c15 	stw	r19,112(sp)
41111bc4:	d8c01b15 	stw	r3,108(sp)
41111bc8:	d811883a 	mov	r8,sp
41111bcc:	42000204 	addi	r8,r8,8
41111bd0:	a2c0010c 	andi	r11,r20,4
41111bd4:	583fe426 	beq	r11,zero,41111b68 <__reset+0xbb0f1b68>
41111bd8:	8ca7c83a 	sub	r19,r17,r18
41111bdc:	04ffe20e 	bge	zero,r19,41111b68 <__reset+0xbb0f1b68>
41111be0:	01c00404 	movi	r7,16
41111be4:	3cffcc0e 	bge	r7,r19,41111b18 <__reset+0xbb0f1b18>
41111be8:	029044b4 	movhi	r10,16658
41111bec:	52afa204 	addi	r10,r10,-16760
41111bf0:	d9001b17 	ldw	r4,108(sp)
41111bf4:	da802415 	stw	r10,144(sp)
41111bf8:	382b883a 	mov	r21,r7
41111bfc:	050001c4 	movi	r20,7
41111c00:	df002017 	ldw	fp,128(sp)
41111c04:	00000506 	br	41111c1c <___vfiprintf_internal_r+0xdd8>
41111c08:	21400084 	addi	r5,r4,2
41111c0c:	42000204 	addi	r8,r8,8
41111c10:	1809883a 	mov	r4,r3
41111c14:	9cfffc04 	addi	r19,r19,-16
41111c18:	acffc40e 	bge	r21,r19,41111b2c <__reset+0xbb0f1b2c>
41111c1c:	10800404 	addi	r2,r2,16
41111c20:	20c00044 	addi	r3,r4,1
41111c24:	45800015 	stw	r22,0(r8)
41111c28:	45400115 	stw	r21,4(r8)
41111c2c:	d8801c15 	stw	r2,112(sp)
41111c30:	d8c01b15 	stw	r3,108(sp)
41111c34:	a0fff40e 	bge	r20,r3,41111c08 <__reset+0xbb0f1c08>
41111c38:	1000041e 	bne	r2,zero,41111c4c <___vfiprintf_internal_r+0xe08>
41111c3c:	01400044 	movi	r5,1
41111c40:	0009883a 	mov	r4,zero
41111c44:	d811883a 	mov	r8,sp
41111c48:	003ff206 	br	41111c14 <__reset+0xbb0f1c14>
41111c4c:	d9402117 	ldw	r5,132(sp)
41111c50:	d9801a04 	addi	r6,sp,104
41111c54:	e009883a 	mov	r4,fp
41111c58:	1110d300 	call	41110d30 <__sprint_r.part.0>
41111c5c:	103fcd1e 	bne	r2,zero,41111b94 <__reset+0xbb0f1b94>
41111c60:	d9001b17 	ldw	r4,108(sp)
41111c64:	d8801c17 	ldw	r2,112(sp)
41111c68:	d811883a 	mov	r8,sp
41111c6c:	21400044 	addi	r5,r4,1
41111c70:	003fe806 	br	41111c14 <__reset+0xbb0f1c14>
41111c74:	d9402117 	ldw	r5,132(sp)
41111c78:	d9002017 	ldw	r4,128(sp)
41111c7c:	d9801a04 	addi	r6,sp,104
41111c80:	d9c02b15 	stw	r7,172(sp)
41111c84:	db402a15 	stw	r13,168(sp)
41111c88:	1110d300 	call	41110d30 <__sprint_r.part.0>
41111c8c:	d9c02b17 	ldw	r7,172(sp)
41111c90:	db402a17 	ldw	r13,168(sp)
41111c94:	103fbf1e 	bne	r2,zero,41111b94 <__reset+0xbb0f1b94>
41111c98:	d9401b17 	ldw	r5,108(sp)
41111c9c:	d8801c17 	ldw	r2,112(sp)
41111ca0:	d811883a 	mov	r8,sp
41111ca4:	29800044 	addi	r6,r5,1
41111ca8:	003dc406 	br	411113bc <__reset+0xbb0f13bc>
41111cac:	1000d21e 	bne	r2,zero,41111ff8 <___vfiprintf_internal_r+0x11b4>
41111cb0:	d8c01d87 	ldb	r3,118(sp)
41111cb4:	18009526 	beq	r3,zero,41111f0c <___vfiprintf_internal_r+0x10c8>
41111cb8:	00800044 	movi	r2,1
41111cbc:	d8c01d84 	addi	r3,sp,118
41111cc0:	1009883a 	mov	r4,r2
41111cc4:	d8c00015 	stw	r3,0(sp)
41111cc8:	d8800115 	stw	r2,4(sp)
41111ccc:	d811883a 	mov	r8,sp
41111cd0:	200b883a 	mov	r5,r4
41111cd4:	42000204 	addi	r8,r8,8
41111cd8:	21000044 	addi	r4,r4,1
41111cdc:	003d9706 	br	4111133c <__reset+0xbb0f133c>
41111ce0:	d9001d04 	addi	r4,sp,116
41111ce4:	00800084 	movi	r2,2
41111ce8:	d9000015 	stw	r4,0(sp)
41111cec:	d8800115 	stw	r2,4(sp)
41111cf0:	1809883a 	mov	r4,r3
41111cf4:	d811883a 	mov	r8,sp
41111cf8:	200b883a 	mov	r5,r4
41111cfc:	42000204 	addi	r8,r8,8
41111d00:	21000044 	addi	r4,r4,1
41111d04:	003f4e06 	br	41111a40 <__reset+0xbb0f1a40>
41111d08:	d8001d85 	stb	zero,118(sp)
41111d0c:	48005016 	blt	r9,zero,41111e50 <___vfiprintf_internal_r+0x100c>
41111d10:	00ffdfc4 	movi	r3,-129
41111d14:	94c4b03a 	or	r2,r18,r19
41111d18:	a0e8703a 	and	r20,r20,r3
41111d1c:	103d4426 	beq	r2,zero,41111230 <__reset+0xbb0f1230>
41111d20:	0039883a 	mov	fp,zero
41111d24:	d9002617 	ldw	r4,152(sp)
41111d28:	dd401a04 	addi	r21,sp,104
41111d2c:	908003cc 	andi	r2,r18,15
41111d30:	9806973a 	slli	r3,r19,28
41111d34:	2085883a 	add	r2,r4,r2
41111d38:	9024d13a 	srli	r18,r18,4
41111d3c:	10800003 	ldbu	r2,0(r2)
41111d40:	9826d13a 	srli	r19,r19,4
41111d44:	ad7fffc4 	addi	r21,r21,-1
41111d48:	1ca4b03a 	or	r18,r3,r18
41111d4c:	a8800005 	stb	r2,0(r21)
41111d50:	94c4b03a 	or	r2,r18,r19
41111d54:	103ff51e 	bne	r2,zero,41111d2c <__reset+0xbb0f1d2c>
41111d58:	003e5906 	br	411116c0 <__reset+0xbb0f16c0>
41111d5c:	d9402117 	ldw	r5,132(sp)
41111d60:	d9002017 	ldw	r4,128(sp)
41111d64:	d9801a04 	addi	r6,sp,104
41111d68:	1110d300 	call	41110d30 <__sprint_r.part.0>
41111d6c:	103f891e 	bne	r2,zero,41111b94 <__reset+0xbb0f1b94>
41111d70:	d8801c17 	ldw	r2,112(sp)
41111d74:	d811883a 	mov	r8,sp
41111d78:	003f9506 	br	41111bd0 <__reset+0xbb0f1bd0>
41111d7c:	d9402117 	ldw	r5,132(sp)
41111d80:	d9002017 	ldw	r4,128(sp)
41111d84:	d9801a04 	addi	r6,sp,104
41111d88:	1110d300 	call	41110d30 <__sprint_r.part.0>
41111d8c:	103f811e 	bne	r2,zero,41111b94 <__reset+0xbb0f1b94>
41111d90:	d811883a 	mov	r8,sp
41111d94:	003ced06 	br	4111114c <__reset+0xbb0f114c>
41111d98:	d9402117 	ldw	r5,132(sp)
41111d9c:	d9002017 	ldw	r4,128(sp)
41111da0:	d9801a04 	addi	r6,sp,104
41111da4:	da402c15 	stw	r9,176(sp)
41111da8:	db802a15 	stw	r14,168(sp)
41111dac:	1110d300 	call	41110d30 <__sprint_r.part.0>
41111db0:	da402c17 	ldw	r9,176(sp)
41111db4:	db802a17 	ldw	r14,168(sp)
41111db8:	103f761e 	bne	r2,zero,41111b94 <__reset+0xbb0f1b94>
41111dbc:	d9401b17 	ldw	r5,108(sp)
41111dc0:	d8801c17 	ldw	r2,112(sp)
41111dc4:	d811883a 	mov	r8,sp
41111dc8:	29000044 	addi	r4,r5,1
41111dcc:	003d5b06 	br	4111133c <__reset+0xbb0f133c>
41111dd0:	d9402117 	ldw	r5,132(sp)
41111dd4:	d9002017 	ldw	r4,128(sp)
41111dd8:	d9801a04 	addi	r6,sp,104
41111ddc:	da402c15 	stw	r9,176(sp)
41111de0:	1110d300 	call	41110d30 <__sprint_r.part.0>
41111de4:	da402c17 	ldw	r9,176(sp)
41111de8:	103f6a1e 	bne	r2,zero,41111b94 <__reset+0xbb0f1b94>
41111dec:	d9401b17 	ldw	r5,108(sp)
41111df0:	d8801c17 	ldw	r2,112(sp)
41111df4:	d811883a 	mov	r8,sp
41111df8:	29000044 	addi	r4,r5,1
41111dfc:	003f1006 	br	41111a40 <__reset+0xbb0f1a40>
41111e00:	1000c31e 	bne	r2,zero,41112110 <___vfiprintf_internal_r+0x12cc>
41111e04:	01000044 	movi	r4,1
41111e08:	000b883a 	mov	r5,zero
41111e0c:	d811883a 	mov	r8,sp
41111e10:	003f0d06 	br	41111a48 <__reset+0xbb0f1a48>
41111e14:	d9402117 	ldw	r5,132(sp)
41111e18:	d9002017 	ldw	r4,128(sp)
41111e1c:	d9801a04 	addi	r6,sp,104
41111e20:	1110d300 	call	41110d30 <__sprint_r.part.0>
41111e24:	103f5b1e 	bne	r2,zero,41111b94 <__reset+0xbb0f1b94>
41111e28:	d9001b17 	ldw	r4,108(sp)
41111e2c:	d8801c17 	ldw	r2,112(sp)
41111e30:	d811883a 	mov	r8,sp
41111e34:	21000044 	addi	r4,r4,1
41111e38:	003d8006 	br	4111143c <__reset+0xbb0f143c>
41111e3c:	011044b4 	movhi	r4,16658
41111e40:	212f3d04 	addi	r4,r4,-17164
41111e44:	d9002615 	stw	r4,152(sp)
41111e48:	d8c02215 	stw	r3,136(sp)
41111e4c:	1029883a 	mov	r20,r2
41111e50:	94c4b03a 	or	r2,r18,r19
41111e54:	103fb21e 	bne	r2,zero,41111d20 <__reset+0xbb0f1d20>
41111e58:	0039883a 	mov	fp,zero
41111e5c:	00800084 	movi	r2,2
41111e60:	003e6b06 	br	41111810 <__reset+0xbb0f1810>
41111e64:	da802217 	ldw	r10,136(sp)
41111e68:	d8001d85 	stb	zero,118(sp)
41111e6c:	0027883a 	mov	r19,zero
41111e70:	50800104 	addi	r2,r10,4
41111e74:	54800017 	ldw	r18,0(r10)
41111e78:	483e6016 	blt	r9,zero,411117fc <__reset+0xbb0f17fc>
41111e7c:	00ffdfc4 	movi	r3,-129
41111e80:	d8802215 	stw	r2,136(sp)
41111e84:	a0e8703a 	and	r20,r20,r3
41111e88:	0039883a 	mov	fp,zero
41111e8c:	903ebb26 	beq	r18,zero,4111197c <__reset+0xbb0f197c>
41111e90:	00800244 	movi	r2,9
41111e94:	14bdee36 	bltu	r2,r18,41111650 <__reset+0xbb0f1650>
41111e98:	003eba06 	br	41111984 <__reset+0xbb0f1984>
41111e9c:	00800c04 	movi	r2,48
41111ea0:	d8c01d45 	stb	r3,117(sp)
41111ea4:	d8801d05 	stb	r2,116(sp)
41111ea8:	d8001d85 	stb	zero,118(sp)
41111eac:	a0c00094 	ori	r3,r20,2
41111eb0:	4800a916 	blt	r9,zero,41112158 <___vfiprintf_internal_r+0x1314>
41111eb4:	00bfdfc4 	movi	r2,-129
41111eb8:	a096703a 	and	r11,r20,r2
41111ebc:	5d000094 	ori	r20,r11,2
41111ec0:	0039883a 	mov	fp,zero
41111ec4:	003f9706 	br	41111d24 <__reset+0xbb0f1d24>
41111ec8:	8025883a 	mov	r18,r16
41111ecc:	003c2e06 	br	41110f88 <__reset+0xbb0f0f88>
41111ed0:	009044b4 	movhi	r2,16658
41111ed4:	10af3d04 	addi	r2,r2,-17164
41111ed8:	0039883a 	mov	fp,zero
41111edc:	d8802615 	stw	r2,152(sp)
41111ee0:	003f9006 	br	41111d24 <__reset+0xbb0f1d24>
41111ee4:	04a5c83a 	sub	r18,zero,r18
41111ee8:	07000b44 	movi	fp,45
41111eec:	9004c03a 	cmpne	r2,r18,zero
41111ef0:	04e7c83a 	sub	r19,zero,r19
41111ef4:	df001d85 	stb	fp,118(sp)
41111ef8:	98a7c83a 	sub	r19,r19,r2
41111efc:	48009f16 	blt	r9,zero,4111217c <___vfiprintf_internal_r+0x1338>
41111f00:	00bfdfc4 	movi	r2,-129
41111f04:	a0a8703a 	and	r20,r20,r2
41111f08:	003dd006 	br	4111164c <__reset+0xbb0f164c>
41111f0c:	70004c26 	beq	r14,zero,41112040 <___vfiprintf_internal_r+0x11fc>
41111f10:	00800084 	movi	r2,2
41111f14:	d8c01d04 	addi	r3,sp,116
41111f18:	d8c00015 	stw	r3,0(sp)
41111f1c:	d8800115 	stw	r2,4(sp)
41111f20:	01000044 	movi	r4,1
41111f24:	d811883a 	mov	r8,sp
41111f28:	003f7306 	br	41111cf8 <__reset+0xbb0f1cf8>
41111f2c:	a080100c 	andi	r2,r20,64
41111f30:	da802217 	ldw	r10,136(sp)
41111f34:	103e0626 	beq	r2,zero,41111750 <__reset+0xbb0f1750>
41111f38:	5480000f 	ldh	r18,0(r10)
41111f3c:	52800104 	addi	r10,r10,4
41111f40:	da802215 	stw	r10,136(sp)
41111f44:	9027d7fa 	srai	r19,r18,31
41111f48:	9805883a 	mov	r2,r19
41111f4c:	003db806 	br	41111630 <__reset+0xbb0f1630>
41111f50:	a080040c 	andi	r2,r20,16
41111f54:	1000091e 	bne	r2,zero,41111f7c <___vfiprintf_internal_r+0x1138>
41111f58:	a2c0100c 	andi	r11,r20,64
41111f5c:	58000726 	beq	r11,zero,41111f7c <___vfiprintf_internal_r+0x1138>
41111f60:	da802217 	ldw	r10,136(sp)
41111f64:	50800017 	ldw	r2,0(r10)
41111f68:	52800104 	addi	r10,r10,4
41111f6c:	da802215 	stw	r10,136(sp)
41111f70:	da802317 	ldw	r10,140(sp)
41111f74:	1280000d 	sth	r10,0(r2)
41111f78:	003be706 	br	41110f18 <__reset+0xbb0f0f18>
41111f7c:	da802217 	ldw	r10,136(sp)
41111f80:	50800017 	ldw	r2,0(r10)
41111f84:	52800104 	addi	r10,r10,4
41111f88:	da802215 	stw	r10,136(sp)
41111f8c:	da802317 	ldw	r10,140(sp)
41111f90:	12800015 	stw	r10,0(r2)
41111f94:	003be006 	br	41110f18 <__reset+0xbb0f0f18>
41111f98:	a080100c 	andi	r2,r20,64
41111f9c:	da802217 	ldw	r10,136(sp)
41111fa0:	10003026 	beq	r2,zero,41112064 <___vfiprintf_internal_r+0x1220>
41111fa4:	5480000b 	ldhu	r18,0(r10)
41111fa8:	52800104 	addi	r10,r10,4
41111fac:	0027883a 	mov	r19,zero
41111fb0:	da802215 	stw	r10,136(sp)
41111fb4:	003d8006 	br	411115b8 <__reset+0xbb0f15b8>
41111fb8:	80c00007 	ldb	r3,0(r16)
41111fbc:	003c0006 	br	41110fc0 <__reset+0xbb0f0fc0>
41111fc0:	a080100c 	andi	r2,r20,64
41111fc4:	d8001d85 	stb	zero,118(sp)
41111fc8:	da802217 	ldw	r10,136(sp)
41111fcc:	1000201e 	bne	r2,zero,41112050 <___vfiprintf_internal_r+0x120c>
41111fd0:	50800104 	addi	r2,r10,4
41111fd4:	54800017 	ldw	r18,0(r10)
41111fd8:	0027883a 	mov	r19,zero
41111fdc:	483def0e 	bge	r9,zero,4111179c <__reset+0xbb0f179c>
41111fe0:	94c6b03a 	or	r3,r18,r19
41111fe4:	d8802215 	stw	r2,136(sp)
41111fe8:	183d4e1e 	bne	r3,zero,41111524 <__reset+0xbb0f1524>
41111fec:	0039883a 	mov	fp,zero
41111ff0:	0005883a 	mov	r2,zero
41111ff4:	003e0606 	br	41111810 <__reset+0xbb0f1810>
41111ff8:	d9402117 	ldw	r5,132(sp)
41111ffc:	d9002017 	ldw	r4,128(sp)
41112000:	d9801a04 	addi	r6,sp,104
41112004:	da402c15 	stw	r9,176(sp)
41112008:	db802a15 	stw	r14,168(sp)
4111200c:	1110d300 	call	41110d30 <__sprint_r.part.0>
41112010:	da402c17 	ldw	r9,176(sp)
41112014:	db802a17 	ldw	r14,168(sp)
41112018:	103ede1e 	bne	r2,zero,41111b94 <__reset+0xbb0f1b94>
4111201c:	d9401b17 	ldw	r5,108(sp)
41112020:	d8801c17 	ldw	r2,112(sp)
41112024:	d811883a 	mov	r8,sp
41112028:	29000044 	addi	r4,r5,1
4111202c:	003e7406 	br	41111a00 <__reset+0xbb0f1a00>
41112030:	00bfffc4 	movi	r2,-1
41112034:	003c5806 	br	41111198 <__reset+0xbb0f1198>
41112038:	d811883a 	mov	r8,sp
4111203c:	003ee806 	br	41111be0 <__reset+0xbb0f1be0>
41112040:	000b883a 	mov	r5,zero
41112044:	01000044 	movi	r4,1
41112048:	d811883a 	mov	r8,sp
4111204c:	003e7c06 	br	41111a40 <__reset+0xbb0f1a40>
41112050:	50800104 	addi	r2,r10,4
41112054:	5480000b 	ldhu	r18,0(r10)
41112058:	0027883a 	mov	r19,zero
4111205c:	483dcf0e 	bge	r9,zero,4111179c <__reset+0xbb0f179c>
41112060:	003fdf06 	br	41111fe0 <__reset+0xbb0f1fe0>
41112064:	54800017 	ldw	r18,0(r10)
41112068:	52800104 	addi	r10,r10,4
4111206c:	0027883a 	mov	r19,zero
41112070:	da802215 	stw	r10,136(sp)
41112074:	003d5006 	br	411115b8 <__reset+0xbb0f15b8>
41112078:	50800104 	addi	r2,r10,4
4111207c:	5480000b 	ldhu	r18,0(r10)
41112080:	0027883a 	mov	r19,zero
41112084:	483f7d0e 	bge	r9,zero,41111e7c <__reset+0xbb0f1e7c>
41112088:	003ddc06 	br	411117fc <__reset+0xbb0f17fc>
4111208c:	d8c02215 	stw	r3,136(sp)
41112090:	0039883a 	mov	fp,zero
41112094:	003ddb06 	br	41111804 <__reset+0xbb0f1804>
41112098:	029044b4 	movhi	r10,16658
4111209c:	52af9e04 	addi	r10,r10,-16776
411120a0:	da802415 	stw	r10,144(sp)
411120a4:	003e8306 	br	41111ab4 <__reset+0xbb0f1ab4>
411120a8:	d8801c17 	ldw	r2,112(sp)
411120ac:	dd002117 	ldw	r20,132(sp)
411120b0:	103eb926 	beq	r2,zero,41111b98 <__reset+0xbb0f1b98>
411120b4:	d9002017 	ldw	r4,128(sp)
411120b8:	d9801a04 	addi	r6,sp,104
411120bc:	a00b883a 	mov	r5,r20
411120c0:	1110d300 	call	41110d30 <__sprint_r.part.0>
411120c4:	003eb406 	br	41111b98 <__reset+0xbb0f1b98>
411120c8:	80c00043 	ldbu	r3,1(r16)
411120cc:	a5000814 	ori	r20,r20,32
411120d0:	84000044 	addi	r16,r16,1
411120d4:	18c03fcc 	andi	r3,r3,255
411120d8:	18c0201c 	xori	r3,r3,128
411120dc:	18ffe004 	addi	r3,r3,-128
411120e0:	003bb706 	br	41110fc0 <__reset+0xbb0f0fc0>
411120e4:	a809883a 	mov	r4,r21
411120e8:	d8c02a15 	stw	r3,168(sp)
411120ec:	da002b15 	stw	r8,172(sp)
411120f0:	11097780 	call	41109778 <strlen>
411120f4:	d8c02a17 	ldw	r3,168(sp)
411120f8:	1027883a 	mov	r19,r2
411120fc:	df001d83 	ldbu	fp,118(sp)
41112100:	d8c02215 	stw	r3,136(sp)
41112104:	0013883a 	mov	r9,zero
41112108:	da002b17 	ldw	r8,172(sp)
4111210c:	003c4d06 	br	41111244 <__reset+0xbb0f1244>
41112110:	d9402117 	ldw	r5,132(sp)
41112114:	d9002017 	ldw	r4,128(sp)
41112118:	d9801a04 	addi	r6,sp,104
4111211c:	da402c15 	stw	r9,176(sp)
41112120:	1110d300 	call	41110d30 <__sprint_r.part.0>
41112124:	da402c17 	ldw	r9,176(sp)
41112128:	103e9a1e 	bne	r2,zero,41111b94 <__reset+0xbb0f1b94>
4111212c:	d9401b17 	ldw	r5,108(sp)
41112130:	d8801c17 	ldw	r2,112(sp)
41112134:	d811883a 	mov	r8,sp
41112138:	29000044 	addi	r4,r5,1
4111213c:	003e4206 	br	41111a48 <__reset+0xbb0f1a48>
41112140:	d9401b17 	ldw	r5,108(sp)
41112144:	011044b4 	movhi	r4,16658
41112148:	212fa204 	addi	r4,r4,-16760
4111214c:	d9002415 	stw	r4,144(sp)
41112150:	29400044 	addi	r5,r5,1
41112154:	003c6d06 	br	4111130c <__reset+0xbb0f130c>
41112158:	0039883a 	mov	fp,zero
4111215c:	00800084 	movi	r2,2
41112160:	10803fcc 	andi	r2,r2,255
41112164:	01000044 	movi	r4,1
41112168:	11001e26 	beq	r2,r4,411121e4 <___vfiprintf_internal_r+0x13a0>
4111216c:	01000084 	movi	r4,2
41112170:	11001e1e 	bne	r2,r4,411121ec <___vfiprintf_internal_r+0x13a8>
41112174:	1829883a 	mov	r20,r3
41112178:	003eea06 	br	41111d24 <__reset+0xbb0f1d24>
4111217c:	a007883a 	mov	r3,r20
41112180:	00800044 	movi	r2,1
41112184:	003ff606 	br	41112160 <__reset+0xbb0f2160>
41112188:	00800184 	movi	r2,6
4111218c:	1240012e 	bgeu	r2,r9,41112194 <___vfiprintf_internal_r+0x1350>
41112190:	1013883a 	mov	r9,r2
41112194:	4827883a 	mov	r19,r9
41112198:	4825883a 	mov	r18,r9
4111219c:	48001516 	blt	r9,zero,411121f4 <___vfiprintf_internal_r+0x13b0>
411121a0:	055044b4 	movhi	r21,16658
411121a4:	d8c02215 	stw	r3,136(sp)
411121a8:	ad6f4204 	addi	r21,r21,-17144
411121ac:	003d1406 	br	41111600 <__reset+0xbb0f1600>
411121b0:	029044b4 	movhi	r10,16658
411121b4:	52af9e04 	addi	r10,r10,-16776
411121b8:	da802415 	stw	r10,144(sp)
411121bc:	200d883a 	mov	r6,r4
411121c0:	003c9106 	br	41111408 <__reset+0xbb0f1408>
411121c4:	5021883a 	mov	r16,r10
411121c8:	0013883a 	mov	r9,zero
411121cc:	003b7d06 	br	41110fc4 <__reset+0xbb0f0fc4>
411121d0:	4827883a 	mov	r19,r9
411121d4:	df001d83 	ldbu	fp,118(sp)
411121d8:	d8c02215 	stw	r3,136(sp)
411121dc:	0013883a 	mov	r9,zero
411121e0:	003c1806 	br	41111244 <__reset+0xbb0f1244>
411121e4:	1829883a 	mov	r20,r3
411121e8:	003d1806 	br	4111164c <__reset+0xbb0f164c>
411121ec:	1829883a 	mov	r20,r3
411121f0:	003ccd06 	br	41111528 <__reset+0xbb0f1528>
411121f4:	0025883a 	mov	r18,zero
411121f8:	003fe906 	br	411121a0 <__reset+0xbb0f21a0>
411121fc:	d8802217 	ldw	r2,136(sp)
41112200:	80c00043 	ldbu	r3,1(r16)
41112204:	5021883a 	mov	r16,r10
41112208:	12400017 	ldw	r9,0(r2)
4111220c:	10800104 	addi	r2,r2,4
41112210:	d8802215 	stw	r2,136(sp)
41112214:	483faf0e 	bge	r9,zero,411120d4 <__reset+0xbb0f20d4>
41112218:	18c03fcc 	andi	r3,r3,255
4111221c:	18c0201c 	xori	r3,r3,128
41112220:	027fffc4 	movi	r9,-1
41112224:	18ffe004 	addi	r3,r3,-128
41112228:	003b6506 	br	41110fc0 <__reset+0xbb0f0fc0>
4111222c:	d9c01d85 	stb	r7,118(sp)
41112230:	003ca006 	br	411114b4 <__reset+0xbb0f14b4>
41112234:	d9c01d85 	stb	r7,118(sp)
41112238:	003cad06 	br	411114f0 <__reset+0xbb0f14f0>
4111223c:	d9c01d85 	stb	r7,118(sp)
41112240:	003d7d06 	br	41111838 <__reset+0xbb0f1838>
41112244:	d9c01d85 	stb	r7,118(sp)
41112248:	003d5f06 	br	411117c8 <__reset+0xbb0f17c8>
4111224c:	a080004c 	andi	r2,r20,1
41112250:	0039883a 	mov	fp,zero
41112254:	10000526 	beq	r2,zero,4111226c <___vfiprintf_internal_r+0x1428>
41112258:	00800c04 	movi	r2,48
4111225c:	d88019c5 	stb	r2,103(sp)
41112260:	dcc02717 	ldw	r19,156(sp)
41112264:	dd4019c4 	addi	r21,sp,103
41112268:	003bf606 	br	41111244 <__reset+0xbb0f1244>
4111226c:	0027883a 	mov	r19,zero
41112270:	dd401a04 	addi	r21,sp,104
41112274:	003bf306 	br	41111244 <__reset+0xbb0f1244>
41112278:	d9c01d85 	stb	r7,118(sp)
4111227c:	003dc806 	br	411119a0 <__reset+0xbb0f19a0>
41112280:	d9c01d85 	stb	r7,118(sp)
41112284:	003d3a06 	br	41111770 <__reset+0xbb0f1770>
41112288:	d9c01d85 	stb	r7,118(sp)
4111228c:	003d2a06 	br	41111738 <__reset+0xbb0f1738>
41112290:	d9c01d85 	stb	r7,118(sp)
41112294:	003cde06 	br	41111610 <__reset+0xbb0f1610>
41112298:	d9c01d85 	stb	r7,118(sp)
4111229c:	003cbc06 	br	41111590 <__reset+0xbb0f1590>

411122a0 <__vfiprintf_internal>:
411122a0:	009044b4 	movhi	r2,16658
411122a4:	10b76e04 	addi	r2,r2,-8776
411122a8:	300f883a 	mov	r7,r6
411122ac:	280d883a 	mov	r6,r5
411122b0:	200b883a 	mov	r5,r4
411122b4:	11000017 	ldw	r4,0(r2)
411122b8:	1110e441 	jmpi	41110e44 <___vfiprintf_internal_r>

411122bc <__sbprintf>:
411122bc:	2880030b 	ldhu	r2,12(r5)
411122c0:	2ac01917 	ldw	r11,100(r5)
411122c4:	2a80038b 	ldhu	r10,14(r5)
411122c8:	2a400717 	ldw	r9,28(r5)
411122cc:	2a000917 	ldw	r8,36(r5)
411122d0:	defee204 	addi	sp,sp,-1144
411122d4:	00c10004 	movi	r3,1024
411122d8:	dc011a15 	stw	r16,1128(sp)
411122dc:	10bfff4c 	andi	r2,r2,65533
411122e0:	2821883a 	mov	r16,r5
411122e4:	d8cb883a 	add	r5,sp,r3
411122e8:	dc811c15 	stw	r18,1136(sp)
411122ec:	dc411b15 	stw	r17,1132(sp)
411122f0:	dfc11d15 	stw	ra,1140(sp)
411122f4:	2025883a 	mov	r18,r4
411122f8:	d881030d 	sth	r2,1036(sp)
411122fc:	dac11915 	stw	r11,1124(sp)
41112300:	da81038d 	sth	r10,1038(sp)
41112304:	da410715 	stw	r9,1052(sp)
41112308:	da010915 	stw	r8,1060(sp)
4111230c:	dec10015 	stw	sp,1024(sp)
41112310:	dec10415 	stw	sp,1040(sp)
41112314:	d8c10215 	stw	r3,1032(sp)
41112318:	d8c10515 	stw	r3,1044(sp)
4111231c:	d8010615 	stw	zero,1048(sp)
41112320:	1110e440 	call	41110e44 <___vfiprintf_internal_r>
41112324:	1023883a 	mov	r17,r2
41112328:	10000416 	blt	r2,zero,4111233c <__sbprintf+0x80>
4111232c:	d9410004 	addi	r5,sp,1024
41112330:	9009883a 	mov	r4,r18
41112334:	110d6d80 	call	4110d6d8 <_fflush_r>
41112338:	10000d1e 	bne	r2,zero,41112370 <__sbprintf+0xb4>
4111233c:	d881030b 	ldhu	r2,1036(sp)
41112340:	1080100c 	andi	r2,r2,64
41112344:	10000326 	beq	r2,zero,41112354 <__sbprintf+0x98>
41112348:	8080030b 	ldhu	r2,12(r16)
4111234c:	10801014 	ori	r2,r2,64
41112350:	8080030d 	sth	r2,12(r16)
41112354:	8805883a 	mov	r2,r17
41112358:	dfc11d17 	ldw	ra,1140(sp)
4111235c:	dc811c17 	ldw	r18,1136(sp)
41112360:	dc411b17 	ldw	r17,1132(sp)
41112364:	dc011a17 	ldw	r16,1128(sp)
41112368:	dec11e04 	addi	sp,sp,1144
4111236c:	f800283a 	ret
41112370:	047fffc4 	movi	r17,-1
41112374:	003ff106 	br	4111233c <__reset+0xbb0f233c>

41112378 <__swbuf_r>:
41112378:	defffb04 	addi	sp,sp,-20
4111237c:	dcc00315 	stw	r19,12(sp)
41112380:	dc800215 	stw	r18,8(sp)
41112384:	dc000015 	stw	r16,0(sp)
41112388:	dfc00415 	stw	ra,16(sp)
4111238c:	dc400115 	stw	r17,4(sp)
41112390:	2025883a 	mov	r18,r4
41112394:	2827883a 	mov	r19,r5
41112398:	3021883a 	mov	r16,r6
4111239c:	20000226 	beq	r4,zero,411123a8 <__swbuf_r+0x30>
411123a0:	20800e17 	ldw	r2,56(r4)
411123a4:	10004226 	beq	r2,zero,411124b0 <__swbuf_r+0x138>
411123a8:	80800617 	ldw	r2,24(r16)
411123ac:	8100030b 	ldhu	r4,12(r16)
411123b0:	80800215 	stw	r2,8(r16)
411123b4:	2080020c 	andi	r2,r4,8
411123b8:	10003626 	beq	r2,zero,41112494 <__swbuf_r+0x11c>
411123bc:	80c00417 	ldw	r3,16(r16)
411123c0:	18003426 	beq	r3,zero,41112494 <__swbuf_r+0x11c>
411123c4:	2088000c 	andi	r2,r4,8192
411123c8:	9c403fcc 	andi	r17,r19,255
411123cc:	10001a26 	beq	r2,zero,41112438 <__swbuf_r+0xc0>
411123d0:	80800017 	ldw	r2,0(r16)
411123d4:	81000517 	ldw	r4,20(r16)
411123d8:	10c7c83a 	sub	r3,r2,r3
411123dc:	1900200e 	bge	r3,r4,41112460 <__swbuf_r+0xe8>
411123e0:	18c00044 	addi	r3,r3,1
411123e4:	81000217 	ldw	r4,8(r16)
411123e8:	11400044 	addi	r5,r2,1
411123ec:	81400015 	stw	r5,0(r16)
411123f0:	213fffc4 	addi	r4,r4,-1
411123f4:	81000215 	stw	r4,8(r16)
411123f8:	14c00005 	stb	r19,0(r2)
411123fc:	80800517 	ldw	r2,20(r16)
41112400:	10c01e26 	beq	r2,r3,4111247c <__swbuf_r+0x104>
41112404:	8080030b 	ldhu	r2,12(r16)
41112408:	1080004c 	andi	r2,r2,1
4111240c:	10000226 	beq	r2,zero,41112418 <__swbuf_r+0xa0>
41112410:	00800284 	movi	r2,10
41112414:	88801926 	beq	r17,r2,4111247c <__swbuf_r+0x104>
41112418:	8805883a 	mov	r2,r17
4111241c:	dfc00417 	ldw	ra,16(sp)
41112420:	dcc00317 	ldw	r19,12(sp)
41112424:	dc800217 	ldw	r18,8(sp)
41112428:	dc400117 	ldw	r17,4(sp)
4111242c:	dc000017 	ldw	r16,0(sp)
41112430:	dec00504 	addi	sp,sp,20
41112434:	f800283a 	ret
41112438:	81401917 	ldw	r5,100(r16)
4111243c:	00b7ffc4 	movi	r2,-8193
41112440:	21080014 	ori	r4,r4,8192
41112444:	2884703a 	and	r2,r5,r2
41112448:	80801915 	stw	r2,100(r16)
4111244c:	80800017 	ldw	r2,0(r16)
41112450:	8100030d 	sth	r4,12(r16)
41112454:	81000517 	ldw	r4,20(r16)
41112458:	10c7c83a 	sub	r3,r2,r3
4111245c:	193fe016 	blt	r3,r4,411123e0 <__reset+0xbb0f23e0>
41112460:	800b883a 	mov	r5,r16
41112464:	9009883a 	mov	r4,r18
41112468:	110d6d80 	call	4110d6d8 <_fflush_r>
4111246c:	1000071e 	bne	r2,zero,4111248c <__swbuf_r+0x114>
41112470:	80800017 	ldw	r2,0(r16)
41112474:	00c00044 	movi	r3,1
41112478:	003fda06 	br	411123e4 <__reset+0xbb0f23e4>
4111247c:	800b883a 	mov	r5,r16
41112480:	9009883a 	mov	r4,r18
41112484:	110d6d80 	call	4110d6d8 <_fflush_r>
41112488:	103fe326 	beq	r2,zero,41112418 <__reset+0xbb0f2418>
4111248c:	00bfffc4 	movi	r2,-1
41112490:	003fe206 	br	4111241c <__reset+0xbb0f241c>
41112494:	800b883a 	mov	r5,r16
41112498:	9009883a 	mov	r4,r18
4111249c:	110bae00 	call	4110bae0 <__swsetup_r>
411124a0:	103ffa1e 	bne	r2,zero,4111248c <__reset+0xbb0f248c>
411124a4:	8100030b 	ldhu	r4,12(r16)
411124a8:	80c00417 	ldw	r3,16(r16)
411124ac:	003fc506 	br	411123c4 <__reset+0xbb0f23c4>
411124b0:	110dab40 	call	4110dab4 <__sinit>
411124b4:	003fbc06 	br	411123a8 <__reset+0xbb0f23a8>

411124b8 <__swbuf>:
411124b8:	009044b4 	movhi	r2,16658
411124bc:	10b76e04 	addi	r2,r2,-8776
411124c0:	280d883a 	mov	r6,r5
411124c4:	200b883a 	mov	r5,r4
411124c8:	11000017 	ldw	r4,0(r2)
411124cc:	11123781 	jmpi	41112378 <__swbuf_r>

411124d0 <_write_r>:
411124d0:	defffd04 	addi	sp,sp,-12
411124d4:	2805883a 	mov	r2,r5
411124d8:	dc000015 	stw	r16,0(sp)
411124dc:	041044b4 	movhi	r16,16658
411124e0:	dc400115 	stw	r17,4(sp)
411124e4:	300b883a 	mov	r5,r6
411124e8:	84379c04 	addi	r16,r16,-8592
411124ec:	2023883a 	mov	r17,r4
411124f0:	380d883a 	mov	r6,r7
411124f4:	1009883a 	mov	r4,r2
411124f8:	dfc00215 	stw	ra,8(sp)
411124fc:	80000015 	stw	zero,0(r16)
41112500:	11162d00 	call	411162d0 <write>
41112504:	00ffffc4 	movi	r3,-1
41112508:	10c00526 	beq	r2,r3,41112520 <_write_r+0x50>
4111250c:	dfc00217 	ldw	ra,8(sp)
41112510:	dc400117 	ldw	r17,4(sp)
41112514:	dc000017 	ldw	r16,0(sp)
41112518:	dec00304 	addi	sp,sp,12
4111251c:	f800283a 	ret
41112520:	80c00017 	ldw	r3,0(r16)
41112524:	183ff926 	beq	r3,zero,4111250c <__reset+0xbb0f250c>
41112528:	88c00015 	stw	r3,0(r17)
4111252c:	003ff706 	br	4111250c <__reset+0xbb0f250c>

41112530 <_close_r>:
41112530:	defffd04 	addi	sp,sp,-12
41112534:	dc000015 	stw	r16,0(sp)
41112538:	041044b4 	movhi	r16,16658
4111253c:	dc400115 	stw	r17,4(sp)
41112540:	84379c04 	addi	r16,r16,-8592
41112544:	2023883a 	mov	r17,r4
41112548:	2809883a 	mov	r4,r5
4111254c:	dfc00215 	stw	ra,8(sp)
41112550:	80000015 	stw	zero,0(r16)
41112554:	11158380 	call	41115838 <close>
41112558:	00ffffc4 	movi	r3,-1
4111255c:	10c00526 	beq	r2,r3,41112574 <_close_r+0x44>
41112560:	dfc00217 	ldw	ra,8(sp)
41112564:	dc400117 	ldw	r17,4(sp)
41112568:	dc000017 	ldw	r16,0(sp)
4111256c:	dec00304 	addi	sp,sp,12
41112570:	f800283a 	ret
41112574:	80c00017 	ldw	r3,0(r16)
41112578:	183ff926 	beq	r3,zero,41112560 <__reset+0xbb0f2560>
4111257c:	88c00015 	stw	r3,0(r17)
41112580:	003ff706 	br	41112560 <__reset+0xbb0f2560>

41112584 <_calloc_r>:
41112584:	298b383a 	mul	r5,r5,r6
41112588:	defffe04 	addi	sp,sp,-8
4111258c:	dfc00115 	stw	ra,4(sp)
41112590:	dc000015 	stw	r16,0(sp)
41112594:	110e8140 	call	4110e814 <_malloc_r>
41112598:	10002926 	beq	r2,zero,41112640 <_calloc_r+0xbc>
4111259c:	11bfff17 	ldw	r6,-4(r2)
411125a0:	1021883a 	mov	r16,r2
411125a4:	00bfff04 	movi	r2,-4
411125a8:	308c703a 	and	r6,r6,r2
411125ac:	00c00904 	movi	r3,36
411125b0:	308d883a 	add	r6,r6,r2
411125b4:	19801636 	bltu	r3,r6,41112610 <_calloc_r+0x8c>
411125b8:	008004c4 	movi	r2,19
411125bc:	11800b2e 	bgeu	r2,r6,411125ec <_calloc_r+0x68>
411125c0:	80000015 	stw	zero,0(r16)
411125c4:	80000115 	stw	zero,4(r16)
411125c8:	008006c4 	movi	r2,27
411125cc:	11801a2e 	bgeu	r2,r6,41112638 <_calloc_r+0xb4>
411125d0:	80000215 	stw	zero,8(r16)
411125d4:	80000315 	stw	zero,12(r16)
411125d8:	30c0151e 	bne	r6,r3,41112630 <_calloc_r+0xac>
411125dc:	80000415 	stw	zero,16(r16)
411125e0:	80800604 	addi	r2,r16,24
411125e4:	80000515 	stw	zero,20(r16)
411125e8:	00000106 	br	411125f0 <_calloc_r+0x6c>
411125ec:	8005883a 	mov	r2,r16
411125f0:	10000015 	stw	zero,0(r2)
411125f4:	10000115 	stw	zero,4(r2)
411125f8:	10000215 	stw	zero,8(r2)
411125fc:	8005883a 	mov	r2,r16
41112600:	dfc00117 	ldw	ra,4(sp)
41112604:	dc000017 	ldw	r16,0(sp)
41112608:	dec00204 	addi	sp,sp,8
4111260c:	f800283a 	ret
41112610:	000b883a 	mov	r5,zero
41112614:	8009883a 	mov	r4,r16
41112618:	110f2600 	call	4110f260 <memset>
4111261c:	8005883a 	mov	r2,r16
41112620:	dfc00117 	ldw	ra,4(sp)
41112624:	dc000017 	ldw	r16,0(sp)
41112628:	dec00204 	addi	sp,sp,8
4111262c:	f800283a 	ret
41112630:	80800404 	addi	r2,r16,16
41112634:	003fee06 	br	411125f0 <__reset+0xbb0f25f0>
41112638:	80800204 	addi	r2,r16,8
4111263c:	003fec06 	br	411125f0 <__reset+0xbb0f25f0>
41112640:	0005883a 	mov	r2,zero
41112644:	003fee06 	br	41112600 <__reset+0xbb0f2600>

41112648 <_fclose_r>:
41112648:	28003926 	beq	r5,zero,41112730 <_fclose_r+0xe8>
4111264c:	defffc04 	addi	sp,sp,-16
41112650:	dc400115 	stw	r17,4(sp)
41112654:	dc000015 	stw	r16,0(sp)
41112658:	dfc00315 	stw	ra,12(sp)
4111265c:	dc800215 	stw	r18,8(sp)
41112660:	2023883a 	mov	r17,r4
41112664:	2821883a 	mov	r16,r5
41112668:	20000226 	beq	r4,zero,41112674 <_fclose_r+0x2c>
4111266c:	20800e17 	ldw	r2,56(r4)
41112670:	10002726 	beq	r2,zero,41112710 <_fclose_r+0xc8>
41112674:	8080030f 	ldh	r2,12(r16)
41112678:	1000071e 	bne	r2,zero,41112698 <_fclose_r+0x50>
4111267c:	0005883a 	mov	r2,zero
41112680:	dfc00317 	ldw	ra,12(sp)
41112684:	dc800217 	ldw	r18,8(sp)
41112688:	dc400117 	ldw	r17,4(sp)
4111268c:	dc000017 	ldw	r16,0(sp)
41112690:	dec00404 	addi	sp,sp,16
41112694:	f800283a 	ret
41112698:	800b883a 	mov	r5,r16
4111269c:	8809883a 	mov	r4,r17
411126a0:	110d4bc0 	call	4110d4bc <__sflush_r>
411126a4:	1025883a 	mov	r18,r2
411126a8:	80800b17 	ldw	r2,44(r16)
411126ac:	10000426 	beq	r2,zero,411126c0 <_fclose_r+0x78>
411126b0:	81400717 	ldw	r5,28(r16)
411126b4:	8809883a 	mov	r4,r17
411126b8:	103ee83a 	callr	r2
411126bc:	10001616 	blt	r2,zero,41112718 <_fclose_r+0xd0>
411126c0:	8080030b 	ldhu	r2,12(r16)
411126c4:	1080200c 	andi	r2,r2,128
411126c8:	1000151e 	bne	r2,zero,41112720 <_fclose_r+0xd8>
411126cc:	81400c17 	ldw	r5,48(r16)
411126d0:	28000526 	beq	r5,zero,411126e8 <_fclose_r+0xa0>
411126d4:	80801004 	addi	r2,r16,64
411126d8:	28800226 	beq	r5,r2,411126e4 <_fclose_r+0x9c>
411126dc:	8809883a 	mov	r4,r17
411126e0:	110dc280 	call	4110dc28 <_free_r>
411126e4:	80000c15 	stw	zero,48(r16)
411126e8:	81401117 	ldw	r5,68(r16)
411126ec:	28000326 	beq	r5,zero,411126fc <_fclose_r+0xb4>
411126f0:	8809883a 	mov	r4,r17
411126f4:	110dc280 	call	4110dc28 <_free_r>
411126f8:	80001115 	stw	zero,68(r16)
411126fc:	110dac40 	call	4110dac4 <__sfp_lock_acquire>
41112700:	8000030d 	sth	zero,12(r16)
41112704:	110dac80 	call	4110dac8 <__sfp_lock_release>
41112708:	9005883a 	mov	r2,r18
4111270c:	003fdc06 	br	41112680 <__reset+0xbb0f2680>
41112710:	110dab40 	call	4110dab4 <__sinit>
41112714:	003fd706 	br	41112674 <__reset+0xbb0f2674>
41112718:	04bfffc4 	movi	r18,-1
4111271c:	003fe806 	br	411126c0 <__reset+0xbb0f26c0>
41112720:	81400417 	ldw	r5,16(r16)
41112724:	8809883a 	mov	r4,r17
41112728:	110dc280 	call	4110dc28 <_free_r>
4111272c:	003fe706 	br	411126cc <__reset+0xbb0f26cc>
41112730:	0005883a 	mov	r2,zero
41112734:	f800283a 	ret

41112738 <fclose>:
41112738:	009044b4 	movhi	r2,16658
4111273c:	10b76e04 	addi	r2,r2,-8776
41112740:	200b883a 	mov	r5,r4
41112744:	11000017 	ldw	r4,0(r2)
41112748:	11126481 	jmpi	41112648 <_fclose_r>

4111274c <__fputwc>:
4111274c:	defff804 	addi	sp,sp,-32
41112750:	dcc00415 	stw	r19,16(sp)
41112754:	dc800315 	stw	r18,12(sp)
41112758:	dc000115 	stw	r16,4(sp)
4111275c:	dfc00715 	stw	ra,28(sp)
41112760:	dd400615 	stw	r21,24(sp)
41112764:	dd000515 	stw	r20,20(sp)
41112768:	dc400215 	stw	r17,8(sp)
4111276c:	2027883a 	mov	r19,r4
41112770:	2825883a 	mov	r18,r5
41112774:	3021883a 	mov	r16,r6
41112778:	110e6040 	call	4110e604 <__locale_mb_cur_max>
4111277c:	00c00044 	movi	r3,1
41112780:	10c03e26 	beq	r2,r3,4111287c <__fputwc+0x130>
41112784:	81c01704 	addi	r7,r16,92
41112788:	900d883a 	mov	r6,r18
4111278c:	d80b883a 	mov	r5,sp
41112790:	9809883a 	mov	r4,r19
41112794:	1112ac40 	call	41112ac4 <_wcrtomb_r>
41112798:	1029883a 	mov	r20,r2
4111279c:	00bfffc4 	movi	r2,-1
411127a0:	a0802026 	beq	r20,r2,41112824 <__fputwc+0xd8>
411127a4:	d9400003 	ldbu	r5,0(sp)
411127a8:	a0001c26 	beq	r20,zero,4111281c <__fputwc+0xd0>
411127ac:	0023883a 	mov	r17,zero
411127b0:	05400284 	movi	r21,10
411127b4:	00000906 	br	411127dc <__fputwc+0x90>
411127b8:	80800017 	ldw	r2,0(r16)
411127bc:	11400005 	stb	r5,0(r2)
411127c0:	80c00017 	ldw	r3,0(r16)
411127c4:	18c00044 	addi	r3,r3,1
411127c8:	80c00015 	stw	r3,0(r16)
411127cc:	8c400044 	addi	r17,r17,1
411127d0:	dc45883a 	add	r2,sp,r17
411127d4:	8d00112e 	bgeu	r17,r20,4111281c <__fputwc+0xd0>
411127d8:	11400003 	ldbu	r5,0(r2)
411127dc:	80c00217 	ldw	r3,8(r16)
411127e0:	18ffffc4 	addi	r3,r3,-1
411127e4:	80c00215 	stw	r3,8(r16)
411127e8:	183ff30e 	bge	r3,zero,411127b8 <__reset+0xbb0f27b8>
411127ec:	80800617 	ldw	r2,24(r16)
411127f0:	18801916 	blt	r3,r2,41112858 <__fputwc+0x10c>
411127f4:	80800017 	ldw	r2,0(r16)
411127f8:	11400005 	stb	r5,0(r2)
411127fc:	80800017 	ldw	r2,0(r16)
41112800:	10c00003 	ldbu	r3,0(r2)
41112804:	10800044 	addi	r2,r2,1
41112808:	1d402326 	beq	r3,r21,41112898 <__fputwc+0x14c>
4111280c:	80800015 	stw	r2,0(r16)
41112810:	8c400044 	addi	r17,r17,1
41112814:	dc45883a 	add	r2,sp,r17
41112818:	8d3fef36 	bltu	r17,r20,411127d8 <__reset+0xbb0f27d8>
4111281c:	9005883a 	mov	r2,r18
41112820:	00000406 	br	41112834 <__fputwc+0xe8>
41112824:	80c0030b 	ldhu	r3,12(r16)
41112828:	a005883a 	mov	r2,r20
4111282c:	18c01014 	ori	r3,r3,64
41112830:	80c0030d 	sth	r3,12(r16)
41112834:	dfc00717 	ldw	ra,28(sp)
41112838:	dd400617 	ldw	r21,24(sp)
4111283c:	dd000517 	ldw	r20,20(sp)
41112840:	dcc00417 	ldw	r19,16(sp)
41112844:	dc800317 	ldw	r18,12(sp)
41112848:	dc400217 	ldw	r17,8(sp)
4111284c:	dc000117 	ldw	r16,4(sp)
41112850:	dec00804 	addi	sp,sp,32
41112854:	f800283a 	ret
41112858:	800d883a 	mov	r6,r16
4111285c:	29403fcc 	andi	r5,r5,255
41112860:	9809883a 	mov	r4,r19
41112864:	11123780 	call	41112378 <__swbuf_r>
41112868:	10bfffe0 	cmpeqi	r2,r2,-1
4111286c:	10803fcc 	andi	r2,r2,255
41112870:	103fd626 	beq	r2,zero,411127cc <__reset+0xbb0f27cc>
41112874:	00bfffc4 	movi	r2,-1
41112878:	003fee06 	br	41112834 <__reset+0xbb0f2834>
4111287c:	90ffffc4 	addi	r3,r18,-1
41112880:	01003f84 	movi	r4,254
41112884:	20ffbf36 	bltu	r4,r3,41112784 <__reset+0xbb0f2784>
41112888:	900b883a 	mov	r5,r18
4111288c:	dc800005 	stb	r18,0(sp)
41112890:	1029883a 	mov	r20,r2
41112894:	003fc506 	br	411127ac <__reset+0xbb0f27ac>
41112898:	800d883a 	mov	r6,r16
4111289c:	a80b883a 	mov	r5,r21
411128a0:	9809883a 	mov	r4,r19
411128a4:	11123780 	call	41112378 <__swbuf_r>
411128a8:	10bfffe0 	cmpeqi	r2,r2,-1
411128ac:	003fef06 	br	4111286c <__reset+0xbb0f286c>

411128b0 <_fputwc_r>:
411128b0:	3080030b 	ldhu	r2,12(r6)
411128b4:	10c8000c 	andi	r3,r2,8192
411128b8:	1800051e 	bne	r3,zero,411128d0 <_fputwc_r+0x20>
411128bc:	30c01917 	ldw	r3,100(r6)
411128c0:	10880014 	ori	r2,r2,8192
411128c4:	3080030d 	sth	r2,12(r6)
411128c8:	18880014 	ori	r2,r3,8192
411128cc:	30801915 	stw	r2,100(r6)
411128d0:	111274c1 	jmpi	4111274c <__fputwc>

411128d4 <fputwc>:
411128d4:	009044b4 	movhi	r2,16658
411128d8:	defffc04 	addi	sp,sp,-16
411128dc:	10b76e04 	addi	r2,r2,-8776
411128e0:	dc000115 	stw	r16,4(sp)
411128e4:	14000017 	ldw	r16,0(r2)
411128e8:	dc400215 	stw	r17,8(sp)
411128ec:	dfc00315 	stw	ra,12(sp)
411128f0:	2023883a 	mov	r17,r4
411128f4:	80000226 	beq	r16,zero,41112900 <fputwc+0x2c>
411128f8:	80800e17 	ldw	r2,56(r16)
411128fc:	10001026 	beq	r2,zero,41112940 <fputwc+0x6c>
41112900:	2880030b 	ldhu	r2,12(r5)
41112904:	10c8000c 	andi	r3,r2,8192
41112908:	1800051e 	bne	r3,zero,41112920 <fputwc+0x4c>
4111290c:	28c01917 	ldw	r3,100(r5)
41112910:	10880014 	ori	r2,r2,8192
41112914:	2880030d 	sth	r2,12(r5)
41112918:	18880014 	ori	r2,r3,8192
4111291c:	28801915 	stw	r2,100(r5)
41112920:	280d883a 	mov	r6,r5
41112924:	8009883a 	mov	r4,r16
41112928:	880b883a 	mov	r5,r17
4111292c:	dfc00317 	ldw	ra,12(sp)
41112930:	dc400217 	ldw	r17,8(sp)
41112934:	dc000117 	ldw	r16,4(sp)
41112938:	dec00404 	addi	sp,sp,16
4111293c:	111274c1 	jmpi	4111274c <__fputwc>
41112940:	8009883a 	mov	r4,r16
41112944:	d9400015 	stw	r5,0(sp)
41112948:	110dab40 	call	4110dab4 <__sinit>
4111294c:	d9400017 	ldw	r5,0(sp)
41112950:	003feb06 	br	41112900 <__reset+0xbb0f2900>

41112954 <_fstat_r>:
41112954:	defffd04 	addi	sp,sp,-12
41112958:	2805883a 	mov	r2,r5
4111295c:	dc000015 	stw	r16,0(sp)
41112960:	041044b4 	movhi	r16,16658
41112964:	dc400115 	stw	r17,4(sp)
41112968:	84379c04 	addi	r16,r16,-8592
4111296c:	2023883a 	mov	r17,r4
41112970:	300b883a 	mov	r5,r6
41112974:	1009883a 	mov	r4,r2
41112978:	dfc00215 	stw	ra,8(sp)
4111297c:	80000015 	stw	zero,0(r16)
41112980:	11159900 	call	41115990 <fstat>
41112984:	00ffffc4 	movi	r3,-1
41112988:	10c00526 	beq	r2,r3,411129a0 <_fstat_r+0x4c>
4111298c:	dfc00217 	ldw	ra,8(sp)
41112990:	dc400117 	ldw	r17,4(sp)
41112994:	dc000017 	ldw	r16,0(sp)
41112998:	dec00304 	addi	sp,sp,12
4111299c:	f800283a 	ret
411129a0:	80c00017 	ldw	r3,0(r16)
411129a4:	183ff926 	beq	r3,zero,4111298c <__reset+0xbb0f298c>
411129a8:	88c00015 	stw	r3,0(r17)
411129ac:	003ff706 	br	4111298c <__reset+0xbb0f298c>

411129b0 <_isatty_r>:
411129b0:	defffd04 	addi	sp,sp,-12
411129b4:	dc000015 	stw	r16,0(sp)
411129b8:	041044b4 	movhi	r16,16658
411129bc:	dc400115 	stw	r17,4(sp)
411129c0:	84379c04 	addi	r16,r16,-8592
411129c4:	2023883a 	mov	r17,r4
411129c8:	2809883a 	mov	r4,r5
411129cc:	dfc00215 	stw	ra,8(sp)
411129d0:	80000015 	stw	zero,0(r16)
411129d4:	1115bfc0 	call	41115bfc <isatty>
411129d8:	00ffffc4 	movi	r3,-1
411129dc:	10c00526 	beq	r2,r3,411129f4 <_isatty_r+0x44>
411129e0:	dfc00217 	ldw	ra,8(sp)
411129e4:	dc400117 	ldw	r17,4(sp)
411129e8:	dc000017 	ldw	r16,0(sp)
411129ec:	dec00304 	addi	sp,sp,12
411129f0:	f800283a 	ret
411129f4:	80c00017 	ldw	r3,0(r16)
411129f8:	183ff926 	beq	r3,zero,411129e0 <__reset+0xbb0f29e0>
411129fc:	88c00015 	stw	r3,0(r17)
41112a00:	003ff706 	br	411129e0 <__reset+0xbb0f29e0>

41112a04 <_lseek_r>:
41112a04:	defffd04 	addi	sp,sp,-12
41112a08:	2805883a 	mov	r2,r5
41112a0c:	dc000015 	stw	r16,0(sp)
41112a10:	041044b4 	movhi	r16,16658
41112a14:	dc400115 	stw	r17,4(sp)
41112a18:	300b883a 	mov	r5,r6
41112a1c:	84379c04 	addi	r16,r16,-8592
41112a20:	2023883a 	mov	r17,r4
41112a24:	380d883a 	mov	r6,r7
41112a28:	1009883a 	mov	r4,r2
41112a2c:	dfc00215 	stw	ra,8(sp)
41112a30:	80000015 	stw	zero,0(r16)
41112a34:	1115cdc0 	call	41115cdc <lseek>
41112a38:	00ffffc4 	movi	r3,-1
41112a3c:	10c00526 	beq	r2,r3,41112a54 <_lseek_r+0x50>
41112a40:	dfc00217 	ldw	ra,8(sp)
41112a44:	dc400117 	ldw	r17,4(sp)
41112a48:	dc000017 	ldw	r16,0(sp)
41112a4c:	dec00304 	addi	sp,sp,12
41112a50:	f800283a 	ret
41112a54:	80c00017 	ldw	r3,0(r16)
41112a58:	183ff926 	beq	r3,zero,41112a40 <__reset+0xbb0f2a40>
41112a5c:	88c00015 	stw	r3,0(r17)
41112a60:	003ff706 	br	41112a40 <__reset+0xbb0f2a40>

41112a64 <_read_r>:
41112a64:	defffd04 	addi	sp,sp,-12
41112a68:	2805883a 	mov	r2,r5
41112a6c:	dc000015 	stw	r16,0(sp)
41112a70:	041044b4 	movhi	r16,16658
41112a74:	dc400115 	stw	r17,4(sp)
41112a78:	300b883a 	mov	r5,r6
41112a7c:	84379c04 	addi	r16,r16,-8592
41112a80:	2023883a 	mov	r17,r4
41112a84:	380d883a 	mov	r6,r7
41112a88:	1009883a 	mov	r4,r2
41112a8c:	dfc00215 	stw	ra,8(sp)
41112a90:	80000015 	stw	zero,0(r16)
41112a94:	1115eb00 	call	41115eb0 <read>
41112a98:	00ffffc4 	movi	r3,-1
41112a9c:	10c00526 	beq	r2,r3,41112ab4 <_read_r+0x50>
41112aa0:	dfc00217 	ldw	ra,8(sp)
41112aa4:	dc400117 	ldw	r17,4(sp)
41112aa8:	dc000017 	ldw	r16,0(sp)
41112aac:	dec00304 	addi	sp,sp,12
41112ab0:	f800283a 	ret
41112ab4:	80c00017 	ldw	r3,0(r16)
41112ab8:	183ff926 	beq	r3,zero,41112aa0 <__reset+0xbb0f2aa0>
41112abc:	88c00015 	stw	r3,0(r17)
41112ac0:	003ff706 	br	41112aa0 <__reset+0xbb0f2aa0>

41112ac4 <_wcrtomb_r>:
41112ac4:	defff604 	addi	sp,sp,-40
41112ac8:	009044b4 	movhi	r2,16658
41112acc:	dc800815 	stw	r18,32(sp)
41112ad0:	dc400715 	stw	r17,28(sp)
41112ad4:	dc000615 	stw	r16,24(sp)
41112ad8:	10b77204 	addi	r2,r2,-8760
41112adc:	dfc00915 	stw	ra,36(sp)
41112ae0:	2021883a 	mov	r16,r4
41112ae4:	3823883a 	mov	r17,r7
41112ae8:	14800017 	ldw	r18,0(r2)
41112aec:	28001426 	beq	r5,zero,41112b40 <_wcrtomb_r+0x7c>
41112af0:	d9400415 	stw	r5,16(sp)
41112af4:	d9800515 	stw	r6,20(sp)
41112af8:	110e5f80 	call	4110e5f8 <__locale_charset>
41112afc:	d9800517 	ldw	r6,20(sp)
41112b00:	d9400417 	ldw	r5,16(sp)
41112b04:	100f883a 	mov	r7,r2
41112b08:	dc400015 	stw	r17,0(sp)
41112b0c:	8009883a 	mov	r4,r16
41112b10:	903ee83a 	callr	r18
41112b14:	00ffffc4 	movi	r3,-1
41112b18:	10c0031e 	bne	r2,r3,41112b28 <_wcrtomb_r+0x64>
41112b1c:	88000015 	stw	zero,0(r17)
41112b20:	00c02284 	movi	r3,138
41112b24:	80c00015 	stw	r3,0(r16)
41112b28:	dfc00917 	ldw	ra,36(sp)
41112b2c:	dc800817 	ldw	r18,32(sp)
41112b30:	dc400717 	ldw	r17,28(sp)
41112b34:	dc000617 	ldw	r16,24(sp)
41112b38:	dec00a04 	addi	sp,sp,40
41112b3c:	f800283a 	ret
41112b40:	110e5f80 	call	4110e5f8 <__locale_charset>
41112b44:	100f883a 	mov	r7,r2
41112b48:	dc400015 	stw	r17,0(sp)
41112b4c:	000d883a 	mov	r6,zero
41112b50:	d9400104 	addi	r5,sp,4
41112b54:	8009883a 	mov	r4,r16
41112b58:	903ee83a 	callr	r18
41112b5c:	003fed06 	br	41112b14 <__reset+0xbb0f2b14>

41112b60 <wcrtomb>:
41112b60:	defff604 	addi	sp,sp,-40
41112b64:	009044b4 	movhi	r2,16658
41112b68:	dc800615 	stw	r18,24(sp)
41112b6c:	dc400515 	stw	r17,20(sp)
41112b70:	10b76e04 	addi	r2,r2,-8776
41112b74:	dfc00915 	stw	ra,36(sp)
41112b78:	dd000815 	stw	r20,32(sp)
41112b7c:	dcc00715 	stw	r19,28(sp)
41112b80:	dc000415 	stw	r16,16(sp)
41112b84:	3025883a 	mov	r18,r6
41112b88:	14400017 	ldw	r17,0(r2)
41112b8c:	20001926 	beq	r4,zero,41112bf4 <wcrtomb+0x94>
41112b90:	009044b4 	movhi	r2,16658
41112b94:	10b77204 	addi	r2,r2,-8760
41112b98:	15000017 	ldw	r20,0(r2)
41112b9c:	2021883a 	mov	r16,r4
41112ba0:	2827883a 	mov	r19,r5
41112ba4:	110e5f80 	call	4110e5f8 <__locale_charset>
41112ba8:	100f883a 	mov	r7,r2
41112bac:	dc800015 	stw	r18,0(sp)
41112bb0:	980d883a 	mov	r6,r19
41112bb4:	800b883a 	mov	r5,r16
41112bb8:	8809883a 	mov	r4,r17
41112bbc:	a03ee83a 	callr	r20
41112bc0:	00ffffc4 	movi	r3,-1
41112bc4:	10c0031e 	bne	r2,r3,41112bd4 <wcrtomb+0x74>
41112bc8:	90000015 	stw	zero,0(r18)
41112bcc:	00c02284 	movi	r3,138
41112bd0:	88c00015 	stw	r3,0(r17)
41112bd4:	dfc00917 	ldw	ra,36(sp)
41112bd8:	dd000817 	ldw	r20,32(sp)
41112bdc:	dcc00717 	ldw	r19,28(sp)
41112be0:	dc800617 	ldw	r18,24(sp)
41112be4:	dc400517 	ldw	r17,20(sp)
41112be8:	dc000417 	ldw	r16,16(sp)
41112bec:	dec00a04 	addi	sp,sp,40
41112bf0:	f800283a 	ret
41112bf4:	009044b4 	movhi	r2,16658
41112bf8:	10b77204 	addi	r2,r2,-8760
41112bfc:	14000017 	ldw	r16,0(r2)
41112c00:	110e5f80 	call	4110e5f8 <__locale_charset>
41112c04:	100f883a 	mov	r7,r2
41112c08:	dc800015 	stw	r18,0(sp)
41112c0c:	000d883a 	mov	r6,zero
41112c10:	d9400104 	addi	r5,sp,4
41112c14:	8809883a 	mov	r4,r17
41112c18:	803ee83a 	callr	r16
41112c1c:	003fe806 	br	41112bc0 <__reset+0xbb0f2bc0>

41112c20 <__ascii_wctomb>:
41112c20:	28000526 	beq	r5,zero,41112c38 <__ascii_wctomb+0x18>
41112c24:	00803fc4 	movi	r2,255
41112c28:	11800536 	bltu	r2,r6,41112c40 <__ascii_wctomb+0x20>
41112c2c:	29800005 	stb	r6,0(r5)
41112c30:	00800044 	movi	r2,1
41112c34:	f800283a 	ret
41112c38:	0005883a 	mov	r2,zero
41112c3c:	f800283a 	ret
41112c40:	00802284 	movi	r2,138
41112c44:	20800015 	stw	r2,0(r4)
41112c48:	00bfffc4 	movi	r2,-1
41112c4c:	f800283a 	ret

41112c50 <_wctomb_r>:
41112c50:	009044b4 	movhi	r2,16658
41112c54:	defff904 	addi	sp,sp,-28
41112c58:	10b77204 	addi	r2,r2,-8760
41112c5c:	dfc00615 	stw	ra,24(sp)
41112c60:	dc400515 	stw	r17,20(sp)
41112c64:	dc000415 	stw	r16,16(sp)
41112c68:	3823883a 	mov	r17,r7
41112c6c:	14000017 	ldw	r16,0(r2)
41112c70:	d9000115 	stw	r4,4(sp)
41112c74:	d9400215 	stw	r5,8(sp)
41112c78:	d9800315 	stw	r6,12(sp)
41112c7c:	110e5f80 	call	4110e5f8 <__locale_charset>
41112c80:	d9800317 	ldw	r6,12(sp)
41112c84:	d9400217 	ldw	r5,8(sp)
41112c88:	d9000117 	ldw	r4,4(sp)
41112c8c:	100f883a 	mov	r7,r2
41112c90:	dc400015 	stw	r17,0(sp)
41112c94:	803ee83a 	callr	r16
41112c98:	dfc00617 	ldw	ra,24(sp)
41112c9c:	dc400517 	ldw	r17,20(sp)
41112ca0:	dc000417 	ldw	r16,16(sp)
41112ca4:	dec00704 	addi	sp,sp,28
41112ca8:	f800283a 	ret

41112cac <__udivdi3>:
41112cac:	defff504 	addi	sp,sp,-44
41112cb0:	dcc00415 	stw	r19,16(sp)
41112cb4:	dc000115 	stw	r16,4(sp)
41112cb8:	dfc00a15 	stw	ra,40(sp)
41112cbc:	df000915 	stw	fp,36(sp)
41112cc0:	ddc00815 	stw	r23,32(sp)
41112cc4:	dd800715 	stw	r22,28(sp)
41112cc8:	dd400615 	stw	r21,24(sp)
41112ccc:	dd000515 	stw	r20,20(sp)
41112cd0:	dc800315 	stw	r18,12(sp)
41112cd4:	dc400215 	stw	r17,8(sp)
41112cd8:	2027883a 	mov	r19,r4
41112cdc:	2821883a 	mov	r16,r5
41112ce0:	3800411e 	bne	r7,zero,41112de8 <__udivdi3+0x13c>
41112ce4:	3023883a 	mov	r17,r6
41112ce8:	2025883a 	mov	r18,r4
41112cec:	2980522e 	bgeu	r5,r6,41112e38 <__udivdi3+0x18c>
41112cf0:	00bfffd4 	movui	r2,65535
41112cf4:	282d883a 	mov	r22,r5
41112cf8:	1180a836 	bltu	r2,r6,41112f9c <__udivdi3+0x2f0>
41112cfc:	00803fc4 	movi	r2,255
41112d00:	1185803a 	cmpltu	r2,r2,r6
41112d04:	100490fa 	slli	r2,r2,3
41112d08:	3086d83a 	srl	r3,r6,r2
41112d0c:	011044b4 	movhi	r4,16658
41112d10:	212ef2c4 	addi	r4,r4,-17461
41112d14:	20c7883a 	add	r3,r4,r3
41112d18:	18c00003 	ldbu	r3,0(r3)
41112d1c:	1885883a 	add	r2,r3,r2
41112d20:	00c00804 	movi	r3,32
41112d24:	1887c83a 	sub	r3,r3,r2
41112d28:	18000526 	beq	r3,zero,41112d40 <__udivdi3+0x94>
41112d2c:	80e0983a 	sll	r16,r16,r3
41112d30:	9884d83a 	srl	r2,r19,r2
41112d34:	30e2983a 	sll	r17,r6,r3
41112d38:	98e4983a 	sll	r18,r19,r3
41112d3c:	142cb03a 	or	r22,r2,r16
41112d40:	882ad43a 	srli	r21,r17,16
41112d44:	b009883a 	mov	r4,r22
41112d48:	8d3fffcc 	andi	r20,r17,65535
41112d4c:	a80b883a 	mov	r5,r21
41112d50:	11138b80 	call	411138b8 <__umodsi3>
41112d54:	b009883a 	mov	r4,r22
41112d58:	a80b883a 	mov	r5,r21
41112d5c:	1027883a 	mov	r19,r2
41112d60:	11138540 	call	41113854 <__udivsi3>
41112d64:	102d883a 	mov	r22,r2
41112d68:	9826943a 	slli	r19,r19,16
41112d6c:	9004d43a 	srli	r2,r18,16
41112d70:	a5a1383a 	mul	r16,r20,r22
41112d74:	14c4b03a 	or	r2,r2,r19
41112d78:	1400052e 	bgeu	r2,r16,41112d90 <__udivdi3+0xe4>
41112d7c:	1445883a 	add	r2,r2,r17
41112d80:	b0ffffc4 	addi	r3,r22,-1
41112d84:	14400136 	bltu	r2,r17,41112d8c <__udivdi3+0xe0>
41112d88:	14012336 	bltu	r2,r16,41113218 <__udivdi3+0x56c>
41112d8c:	182d883a 	mov	r22,r3
41112d90:	1421c83a 	sub	r16,r2,r16
41112d94:	a80b883a 	mov	r5,r21
41112d98:	8009883a 	mov	r4,r16
41112d9c:	11138b80 	call	411138b8 <__umodsi3>
41112da0:	1027883a 	mov	r19,r2
41112da4:	a80b883a 	mov	r5,r21
41112da8:	8009883a 	mov	r4,r16
41112dac:	11138540 	call	41113854 <__udivsi3>
41112db0:	9826943a 	slli	r19,r19,16
41112db4:	a0a9383a 	mul	r20,r20,r2
41112db8:	94bfffcc 	andi	r18,r18,65535
41112dbc:	94e4b03a 	or	r18,r18,r19
41112dc0:	9500052e 	bgeu	r18,r20,41112dd8 <__udivdi3+0x12c>
41112dc4:	8ca5883a 	add	r18,r17,r18
41112dc8:	10ffffc4 	addi	r3,r2,-1
41112dcc:	9440f136 	bltu	r18,r17,41113194 <__udivdi3+0x4e8>
41112dd0:	9500f02e 	bgeu	r18,r20,41113194 <__udivdi3+0x4e8>
41112dd4:	10bfff84 	addi	r2,r2,-2
41112dd8:	b00c943a 	slli	r6,r22,16
41112ddc:	0007883a 	mov	r3,zero
41112de0:	3084b03a 	or	r2,r6,r2
41112de4:	00005906 	br	41112f4c <__udivdi3+0x2a0>
41112de8:	29c05636 	bltu	r5,r7,41112f44 <__udivdi3+0x298>
41112dec:	00bfffd4 	movui	r2,65535
41112df0:	11c0622e 	bgeu	r2,r7,41112f7c <__udivdi3+0x2d0>
41112df4:	00804034 	movhi	r2,256
41112df8:	10bfffc4 	addi	r2,r2,-1
41112dfc:	11c0ee36 	bltu	r2,r7,411131b8 <__udivdi3+0x50c>
41112e00:	00800404 	movi	r2,16
41112e04:	3886d83a 	srl	r3,r7,r2
41112e08:	011044b4 	movhi	r4,16658
41112e0c:	212ef2c4 	addi	r4,r4,-17461
41112e10:	20c7883a 	add	r3,r4,r3
41112e14:	18c00003 	ldbu	r3,0(r3)
41112e18:	05400804 	movi	r21,32
41112e1c:	1885883a 	add	r2,r3,r2
41112e20:	a8abc83a 	sub	r21,r21,r2
41112e24:	a800621e 	bne	r21,zero,41112fb0 <__udivdi3+0x304>
41112e28:	3c00e936 	bltu	r7,r16,411131d0 <__udivdi3+0x524>
41112e2c:	9985403a 	cmpgeu	r2,r19,r6
41112e30:	0007883a 	mov	r3,zero
41112e34:	00004506 	br	41112f4c <__udivdi3+0x2a0>
41112e38:	3000041e 	bne	r6,zero,41112e4c <__udivdi3+0x1a0>
41112e3c:	000b883a 	mov	r5,zero
41112e40:	01000044 	movi	r4,1
41112e44:	11138540 	call	41113854 <__udivsi3>
41112e48:	1023883a 	mov	r17,r2
41112e4c:	00bfffd4 	movui	r2,65535
41112e50:	14404e2e 	bgeu	r2,r17,41112f8c <__udivdi3+0x2e0>
41112e54:	00804034 	movhi	r2,256
41112e58:	10bfffc4 	addi	r2,r2,-1
41112e5c:	1440d836 	bltu	r2,r17,411131c0 <__udivdi3+0x514>
41112e60:	00800404 	movi	r2,16
41112e64:	8886d83a 	srl	r3,r17,r2
41112e68:	011044b4 	movhi	r4,16658
41112e6c:	212ef2c4 	addi	r4,r4,-17461
41112e70:	20c7883a 	add	r3,r4,r3
41112e74:	18c00003 	ldbu	r3,0(r3)
41112e78:	1885883a 	add	r2,r3,r2
41112e7c:	00c00804 	movi	r3,32
41112e80:	1887c83a 	sub	r3,r3,r2
41112e84:	18008f1e 	bne	r3,zero,411130c4 <__udivdi3+0x418>
41112e88:	882ad43a 	srli	r21,r17,16
41112e8c:	8461c83a 	sub	r16,r16,r17
41112e90:	8d3fffcc 	andi	r20,r17,65535
41112e94:	00c00044 	movi	r3,1
41112e98:	8009883a 	mov	r4,r16
41112e9c:	a80b883a 	mov	r5,r21
41112ea0:	d8c00015 	stw	r3,0(sp)
41112ea4:	11138b80 	call	411138b8 <__umodsi3>
41112ea8:	8009883a 	mov	r4,r16
41112eac:	a80b883a 	mov	r5,r21
41112eb0:	1027883a 	mov	r19,r2
41112eb4:	11138540 	call	41113854 <__udivsi3>
41112eb8:	9826943a 	slli	r19,r19,16
41112ebc:	9008d43a 	srli	r4,r18,16
41112ec0:	1521383a 	mul	r16,r2,r20
41112ec4:	102d883a 	mov	r22,r2
41112ec8:	24c8b03a 	or	r4,r4,r19
41112ecc:	d8c00017 	ldw	r3,0(sp)
41112ed0:	2400052e 	bgeu	r4,r16,41112ee8 <__udivdi3+0x23c>
41112ed4:	2449883a 	add	r4,r4,r17
41112ed8:	b0bfffc4 	addi	r2,r22,-1
41112edc:	24400136 	bltu	r4,r17,41112ee4 <__udivdi3+0x238>
41112ee0:	2400ca36 	bltu	r4,r16,4111320c <__udivdi3+0x560>
41112ee4:	102d883a 	mov	r22,r2
41112ee8:	2421c83a 	sub	r16,r4,r16
41112eec:	a80b883a 	mov	r5,r21
41112ef0:	8009883a 	mov	r4,r16
41112ef4:	d8c00015 	stw	r3,0(sp)
41112ef8:	11138b80 	call	411138b8 <__umodsi3>
41112efc:	1027883a 	mov	r19,r2
41112f00:	a80b883a 	mov	r5,r21
41112f04:	8009883a 	mov	r4,r16
41112f08:	11138540 	call	41113854 <__udivsi3>
41112f0c:	9826943a 	slli	r19,r19,16
41112f10:	1529383a 	mul	r20,r2,r20
41112f14:	94bfffcc 	andi	r18,r18,65535
41112f18:	94e4b03a 	or	r18,r18,r19
41112f1c:	d8c00017 	ldw	r3,0(sp)
41112f20:	9500052e 	bgeu	r18,r20,41112f38 <__udivdi3+0x28c>
41112f24:	8ca5883a 	add	r18,r17,r18
41112f28:	113fffc4 	addi	r4,r2,-1
41112f2c:	94409736 	bltu	r18,r17,4111318c <__udivdi3+0x4e0>
41112f30:	9500962e 	bgeu	r18,r20,4111318c <__udivdi3+0x4e0>
41112f34:	10bfff84 	addi	r2,r2,-2
41112f38:	b00c943a 	slli	r6,r22,16
41112f3c:	3084b03a 	or	r2,r6,r2
41112f40:	00000206 	br	41112f4c <__udivdi3+0x2a0>
41112f44:	0007883a 	mov	r3,zero
41112f48:	0005883a 	mov	r2,zero
41112f4c:	dfc00a17 	ldw	ra,40(sp)
41112f50:	df000917 	ldw	fp,36(sp)
41112f54:	ddc00817 	ldw	r23,32(sp)
41112f58:	dd800717 	ldw	r22,28(sp)
41112f5c:	dd400617 	ldw	r21,24(sp)
41112f60:	dd000517 	ldw	r20,20(sp)
41112f64:	dcc00417 	ldw	r19,16(sp)
41112f68:	dc800317 	ldw	r18,12(sp)
41112f6c:	dc400217 	ldw	r17,8(sp)
41112f70:	dc000117 	ldw	r16,4(sp)
41112f74:	dec00b04 	addi	sp,sp,44
41112f78:	f800283a 	ret
41112f7c:	00803fc4 	movi	r2,255
41112f80:	11c5803a 	cmpltu	r2,r2,r7
41112f84:	100490fa 	slli	r2,r2,3
41112f88:	003f9e06 	br	41112e04 <__reset+0xbb0f2e04>
41112f8c:	00803fc4 	movi	r2,255
41112f90:	1445803a 	cmpltu	r2,r2,r17
41112f94:	100490fa 	slli	r2,r2,3
41112f98:	003fb206 	br	41112e64 <__reset+0xbb0f2e64>
41112f9c:	00804034 	movhi	r2,256
41112fa0:	10bfffc4 	addi	r2,r2,-1
41112fa4:	11808836 	bltu	r2,r6,411131c8 <__udivdi3+0x51c>
41112fa8:	00800404 	movi	r2,16
41112fac:	003f5606 	br	41112d08 <__reset+0xbb0f2d08>
41112fb0:	30aed83a 	srl	r23,r6,r2
41112fb4:	3d4e983a 	sll	r7,r7,r21
41112fb8:	80acd83a 	srl	r22,r16,r2
41112fbc:	9884d83a 	srl	r2,r19,r2
41112fc0:	3deeb03a 	or	r23,r7,r23
41112fc4:	b824d43a 	srli	r18,r23,16
41112fc8:	8560983a 	sll	r16,r16,r21
41112fcc:	b009883a 	mov	r4,r22
41112fd0:	900b883a 	mov	r5,r18
41112fd4:	3568983a 	sll	r20,r6,r21
41112fd8:	1420b03a 	or	r16,r2,r16
41112fdc:	11138b80 	call	411138b8 <__umodsi3>
41112fe0:	b009883a 	mov	r4,r22
41112fe4:	900b883a 	mov	r5,r18
41112fe8:	1023883a 	mov	r17,r2
41112fec:	11138540 	call	41113854 <__udivsi3>
41112ff0:	8808943a 	slli	r4,r17,16
41112ff4:	bf3fffcc 	andi	fp,r23,65535
41112ff8:	8006d43a 	srli	r3,r16,16
41112ffc:	e0a3383a 	mul	r17,fp,r2
41113000:	100d883a 	mov	r6,r2
41113004:	1906b03a 	or	r3,r3,r4
41113008:	1c40042e 	bgeu	r3,r17,4111301c <__udivdi3+0x370>
4111300c:	1dc7883a 	add	r3,r3,r23
41113010:	10bfffc4 	addi	r2,r2,-1
41113014:	1dc0752e 	bgeu	r3,r23,411131ec <__udivdi3+0x540>
41113018:	100d883a 	mov	r6,r2
4111301c:	1c63c83a 	sub	r17,r3,r17
41113020:	900b883a 	mov	r5,r18
41113024:	8809883a 	mov	r4,r17
41113028:	d9800015 	stw	r6,0(sp)
4111302c:	11138b80 	call	411138b8 <__umodsi3>
41113030:	102d883a 	mov	r22,r2
41113034:	8809883a 	mov	r4,r17
41113038:	900b883a 	mov	r5,r18
4111303c:	11138540 	call	41113854 <__udivsi3>
41113040:	b02c943a 	slli	r22,r22,16
41113044:	e089383a 	mul	r4,fp,r2
41113048:	843fffcc 	andi	r16,r16,65535
4111304c:	85a0b03a 	or	r16,r16,r22
41113050:	d9800017 	ldw	r6,0(sp)
41113054:	8100042e 	bgeu	r16,r4,41113068 <__udivdi3+0x3bc>
41113058:	85e1883a 	add	r16,r16,r23
4111305c:	10ffffc4 	addi	r3,r2,-1
41113060:	85c05e2e 	bgeu	r16,r23,411131dc <__udivdi3+0x530>
41113064:	1805883a 	mov	r2,r3
41113068:	300c943a 	slli	r6,r6,16
4111306c:	a17fffcc 	andi	r5,r20,65535
41113070:	a028d43a 	srli	r20,r20,16
41113074:	3084b03a 	or	r2,r6,r2
41113078:	10ffffcc 	andi	r3,r2,65535
4111307c:	100cd43a 	srli	r6,r2,16
41113080:	194f383a 	mul	r7,r3,r5
41113084:	1d07383a 	mul	r3,r3,r20
41113088:	314b383a 	mul	r5,r6,r5
4111308c:	3810d43a 	srli	r8,r7,16
41113090:	8121c83a 	sub	r16,r16,r4
41113094:	1947883a 	add	r3,r3,r5
41113098:	40c7883a 	add	r3,r8,r3
4111309c:	350d383a 	mul	r6,r6,r20
411130a0:	1940022e 	bgeu	r3,r5,411130ac <__udivdi3+0x400>
411130a4:	01000074 	movhi	r4,1
411130a8:	310d883a 	add	r6,r6,r4
411130ac:	1828d43a 	srli	r20,r3,16
411130b0:	a18d883a 	add	r6,r20,r6
411130b4:	81803e36 	bltu	r16,r6,411131b0 <__udivdi3+0x504>
411130b8:	81803826 	beq	r16,r6,4111319c <__udivdi3+0x4f0>
411130bc:	0007883a 	mov	r3,zero
411130c0:	003fa206 	br	41112f4c <__reset+0xbb0f2f4c>
411130c4:	88e2983a 	sll	r17,r17,r3
411130c8:	80a8d83a 	srl	r20,r16,r2
411130cc:	80e0983a 	sll	r16,r16,r3
411130d0:	882ad43a 	srli	r21,r17,16
411130d4:	9884d83a 	srl	r2,r19,r2
411130d8:	a009883a 	mov	r4,r20
411130dc:	a80b883a 	mov	r5,r21
411130e0:	142eb03a 	or	r23,r2,r16
411130e4:	98e4983a 	sll	r18,r19,r3
411130e8:	11138b80 	call	411138b8 <__umodsi3>
411130ec:	a009883a 	mov	r4,r20
411130f0:	a80b883a 	mov	r5,r21
411130f4:	1021883a 	mov	r16,r2
411130f8:	11138540 	call	41113854 <__udivsi3>
411130fc:	1039883a 	mov	fp,r2
41113100:	8d3fffcc 	andi	r20,r17,65535
41113104:	8020943a 	slli	r16,r16,16
41113108:	b804d43a 	srli	r2,r23,16
4111310c:	a72d383a 	mul	r22,r20,fp
41113110:	1404b03a 	or	r2,r2,r16
41113114:	1580062e 	bgeu	r2,r22,41113130 <__udivdi3+0x484>
41113118:	1445883a 	add	r2,r2,r17
4111311c:	e0ffffc4 	addi	r3,fp,-1
41113120:	14403836 	bltu	r2,r17,41113204 <__udivdi3+0x558>
41113124:	1580372e 	bgeu	r2,r22,41113204 <__udivdi3+0x558>
41113128:	e73fff84 	addi	fp,fp,-2
4111312c:	1445883a 	add	r2,r2,r17
41113130:	15adc83a 	sub	r22,r2,r22
41113134:	a80b883a 	mov	r5,r21
41113138:	b009883a 	mov	r4,r22
4111313c:	11138b80 	call	411138b8 <__umodsi3>
41113140:	1027883a 	mov	r19,r2
41113144:	b009883a 	mov	r4,r22
41113148:	a80b883a 	mov	r5,r21
4111314c:	11138540 	call	41113854 <__udivsi3>
41113150:	9826943a 	slli	r19,r19,16
41113154:	a0a1383a 	mul	r16,r20,r2
41113158:	b93fffcc 	andi	r4,r23,65535
4111315c:	24c8b03a 	or	r4,r4,r19
41113160:	2400062e 	bgeu	r4,r16,4111317c <__udivdi3+0x4d0>
41113164:	2449883a 	add	r4,r4,r17
41113168:	10ffffc4 	addi	r3,r2,-1
4111316c:	24402336 	bltu	r4,r17,411131fc <__udivdi3+0x550>
41113170:	2400222e 	bgeu	r4,r16,411131fc <__udivdi3+0x550>
41113174:	10bfff84 	addi	r2,r2,-2
41113178:	2449883a 	add	r4,r4,r17
4111317c:	e038943a 	slli	fp,fp,16
41113180:	2421c83a 	sub	r16,r4,r16
41113184:	e086b03a 	or	r3,fp,r2
41113188:	003f4306 	br	41112e98 <__reset+0xbb0f2e98>
4111318c:	2005883a 	mov	r2,r4
41113190:	003f6906 	br	41112f38 <__reset+0xbb0f2f38>
41113194:	1805883a 	mov	r2,r3
41113198:	003f0f06 	br	41112dd8 <__reset+0xbb0f2dd8>
4111319c:	1806943a 	slli	r3,r3,16
411131a0:	9d66983a 	sll	r19,r19,r21
411131a4:	39ffffcc 	andi	r7,r7,65535
411131a8:	19c7883a 	add	r3,r3,r7
411131ac:	98ffc32e 	bgeu	r19,r3,411130bc <__reset+0xbb0f30bc>
411131b0:	10bfffc4 	addi	r2,r2,-1
411131b4:	003fc106 	br	411130bc <__reset+0xbb0f30bc>
411131b8:	00800604 	movi	r2,24
411131bc:	003f1106 	br	41112e04 <__reset+0xbb0f2e04>
411131c0:	00800604 	movi	r2,24
411131c4:	003f2706 	br	41112e64 <__reset+0xbb0f2e64>
411131c8:	00800604 	movi	r2,24
411131cc:	003ece06 	br	41112d08 <__reset+0xbb0f2d08>
411131d0:	0007883a 	mov	r3,zero
411131d4:	00800044 	movi	r2,1
411131d8:	003f5c06 	br	41112f4c <__reset+0xbb0f2f4c>
411131dc:	813fa12e 	bgeu	r16,r4,41113064 <__reset+0xbb0f3064>
411131e0:	10bfff84 	addi	r2,r2,-2
411131e4:	85e1883a 	add	r16,r16,r23
411131e8:	003f9f06 	br	41113068 <__reset+0xbb0f3068>
411131ec:	1c7f8a2e 	bgeu	r3,r17,41113018 <__reset+0xbb0f3018>
411131f0:	31bfff84 	addi	r6,r6,-2
411131f4:	1dc7883a 	add	r3,r3,r23
411131f8:	003f8806 	br	4111301c <__reset+0xbb0f301c>
411131fc:	1805883a 	mov	r2,r3
41113200:	003fde06 	br	4111317c <__reset+0xbb0f317c>
41113204:	1839883a 	mov	fp,r3
41113208:	003fc906 	br	41113130 <__reset+0xbb0f3130>
4111320c:	b5bfff84 	addi	r22,r22,-2
41113210:	2449883a 	add	r4,r4,r17
41113214:	003f3406 	br	41112ee8 <__reset+0xbb0f2ee8>
41113218:	b5bfff84 	addi	r22,r22,-2
4111321c:	1445883a 	add	r2,r2,r17
41113220:	003edb06 	br	41112d90 <__reset+0xbb0f2d90>

41113224 <__umoddi3>:
41113224:	defff404 	addi	sp,sp,-48
41113228:	df000a15 	stw	fp,40(sp)
4111322c:	dc400315 	stw	r17,12(sp)
41113230:	dc000215 	stw	r16,8(sp)
41113234:	dfc00b15 	stw	ra,44(sp)
41113238:	ddc00915 	stw	r23,36(sp)
4111323c:	dd800815 	stw	r22,32(sp)
41113240:	dd400715 	stw	r21,28(sp)
41113244:	dd000615 	stw	r20,24(sp)
41113248:	dcc00515 	stw	r19,20(sp)
4111324c:	dc800415 	stw	r18,16(sp)
41113250:	2021883a 	mov	r16,r4
41113254:	2823883a 	mov	r17,r5
41113258:	2839883a 	mov	fp,r5
4111325c:	38003c1e 	bne	r7,zero,41113350 <__umoddi3+0x12c>
41113260:	3027883a 	mov	r19,r6
41113264:	2029883a 	mov	r20,r4
41113268:	2980512e 	bgeu	r5,r6,411133b0 <__umoddi3+0x18c>
4111326c:	00bfffd4 	movui	r2,65535
41113270:	11809a36 	bltu	r2,r6,411134dc <__umoddi3+0x2b8>
41113274:	01003fc4 	movi	r4,255
41113278:	2189803a 	cmpltu	r4,r4,r6
4111327c:	200890fa 	slli	r4,r4,3
41113280:	3104d83a 	srl	r2,r6,r4
41113284:	00d044b4 	movhi	r3,16658
41113288:	18eef2c4 	addi	r3,r3,-17461
4111328c:	1885883a 	add	r2,r3,r2
41113290:	10c00003 	ldbu	r3,0(r2)
41113294:	00800804 	movi	r2,32
41113298:	1909883a 	add	r4,r3,r4
4111329c:	1125c83a 	sub	r18,r2,r4
411132a0:	90000526 	beq	r18,zero,411132b8 <__umoddi3+0x94>
411132a4:	8ca2983a 	sll	r17,r17,r18
411132a8:	8108d83a 	srl	r4,r16,r4
411132ac:	34a6983a 	sll	r19,r6,r18
411132b0:	84a8983a 	sll	r20,r16,r18
411132b4:	2478b03a 	or	fp,r4,r17
411132b8:	982ed43a 	srli	r23,r19,16
411132bc:	e009883a 	mov	r4,fp
411132c0:	9dbfffcc 	andi	r22,r19,65535
411132c4:	b80b883a 	mov	r5,r23
411132c8:	11138b80 	call	411138b8 <__umodsi3>
411132cc:	e009883a 	mov	r4,fp
411132d0:	b80b883a 	mov	r5,r23
411132d4:	102b883a 	mov	r21,r2
411132d8:	11138540 	call	41113854 <__udivsi3>
411132dc:	a806943a 	slli	r3,r21,16
411132e0:	a008d43a 	srli	r4,r20,16
411132e4:	b085383a 	mul	r2,r22,r2
411132e8:	20c8b03a 	or	r4,r4,r3
411132ec:	2080032e 	bgeu	r4,r2,411132fc <__umoddi3+0xd8>
411132f0:	24c9883a 	add	r4,r4,r19
411132f4:	24c00136 	bltu	r4,r19,411132fc <__umoddi3+0xd8>
411132f8:	20811036 	bltu	r4,r2,4111373c <__umoddi3+0x518>
411132fc:	20abc83a 	sub	r21,r4,r2
41113300:	b80b883a 	mov	r5,r23
41113304:	a809883a 	mov	r4,r21
41113308:	11138b80 	call	411138b8 <__umodsi3>
4111330c:	1023883a 	mov	r17,r2
41113310:	b80b883a 	mov	r5,r23
41113314:	a809883a 	mov	r4,r21
41113318:	11138540 	call	41113854 <__udivsi3>
4111331c:	8822943a 	slli	r17,r17,16
41113320:	b085383a 	mul	r2,r22,r2
41113324:	a0ffffcc 	andi	r3,r20,65535
41113328:	1c46b03a 	or	r3,r3,r17
4111332c:	1880042e 	bgeu	r3,r2,41113340 <__umoddi3+0x11c>
41113330:	1cc7883a 	add	r3,r3,r19
41113334:	1cc00236 	bltu	r3,r19,41113340 <__umoddi3+0x11c>
41113338:	1880012e 	bgeu	r3,r2,41113340 <__umoddi3+0x11c>
4111333c:	1cc7883a 	add	r3,r3,r19
41113340:	1885c83a 	sub	r2,r3,r2
41113344:	1484d83a 	srl	r2,r2,r18
41113348:	0007883a 	mov	r3,zero
4111334c:	00004f06 	br	4111348c <__umoddi3+0x268>
41113350:	29c04c36 	bltu	r5,r7,41113484 <__umoddi3+0x260>
41113354:	00bfffd4 	movui	r2,65535
41113358:	11c0582e 	bgeu	r2,r7,411134bc <__umoddi3+0x298>
4111335c:	00804034 	movhi	r2,256
41113360:	10bfffc4 	addi	r2,r2,-1
41113364:	11c0e736 	bltu	r2,r7,41113704 <__umoddi3+0x4e0>
41113368:	01000404 	movi	r4,16
4111336c:	3904d83a 	srl	r2,r7,r4
41113370:	00d044b4 	movhi	r3,16658
41113374:	18eef2c4 	addi	r3,r3,-17461
41113378:	1885883a 	add	r2,r3,r2
4111337c:	14c00003 	ldbu	r19,0(r2)
41113380:	00c00804 	movi	r3,32
41113384:	9927883a 	add	r19,r19,r4
41113388:	1ce9c83a 	sub	r20,r3,r19
4111338c:	a000581e 	bne	r20,zero,411134f0 <__umoddi3+0x2cc>
41113390:	3c400136 	bltu	r7,r17,41113398 <__umoddi3+0x174>
41113394:	8180eb36 	bltu	r16,r6,41113744 <__umoddi3+0x520>
41113398:	8185c83a 	sub	r2,r16,r6
4111339c:	89e3c83a 	sub	r17,r17,r7
411133a0:	8089803a 	cmpltu	r4,r16,r2
411133a4:	8939c83a 	sub	fp,r17,r4
411133a8:	e007883a 	mov	r3,fp
411133ac:	00003706 	br	4111348c <__umoddi3+0x268>
411133b0:	3000041e 	bne	r6,zero,411133c4 <__umoddi3+0x1a0>
411133b4:	000b883a 	mov	r5,zero
411133b8:	01000044 	movi	r4,1
411133bc:	11138540 	call	41113854 <__udivsi3>
411133c0:	1027883a 	mov	r19,r2
411133c4:	00bfffd4 	movui	r2,65535
411133c8:	14c0402e 	bgeu	r2,r19,411134cc <__umoddi3+0x2a8>
411133cc:	00804034 	movhi	r2,256
411133d0:	10bfffc4 	addi	r2,r2,-1
411133d4:	14c0cd36 	bltu	r2,r19,4111370c <__umoddi3+0x4e8>
411133d8:	00800404 	movi	r2,16
411133dc:	9886d83a 	srl	r3,r19,r2
411133e0:	011044b4 	movhi	r4,16658
411133e4:	212ef2c4 	addi	r4,r4,-17461
411133e8:	20c7883a 	add	r3,r4,r3
411133ec:	18c00003 	ldbu	r3,0(r3)
411133f0:	1887883a 	add	r3,r3,r2
411133f4:	00800804 	movi	r2,32
411133f8:	10e5c83a 	sub	r18,r2,r3
411133fc:	9000901e 	bne	r18,zero,41113640 <__umoddi3+0x41c>
41113400:	982cd43a 	srli	r22,r19,16
41113404:	8ce3c83a 	sub	r17,r17,r19
41113408:	9d7fffcc 	andi	r21,r19,65535
4111340c:	b00b883a 	mov	r5,r22
41113410:	8809883a 	mov	r4,r17
41113414:	11138b80 	call	411138b8 <__umodsi3>
41113418:	8809883a 	mov	r4,r17
4111341c:	b00b883a 	mov	r5,r22
41113420:	1021883a 	mov	r16,r2
41113424:	11138540 	call	41113854 <__udivsi3>
41113428:	8006943a 	slli	r3,r16,16
4111342c:	a008d43a 	srli	r4,r20,16
41113430:	1545383a 	mul	r2,r2,r21
41113434:	20c8b03a 	or	r4,r4,r3
41113438:	2080042e 	bgeu	r4,r2,4111344c <__umoddi3+0x228>
4111343c:	24c9883a 	add	r4,r4,r19
41113440:	24c00236 	bltu	r4,r19,4111344c <__umoddi3+0x228>
41113444:	2080012e 	bgeu	r4,r2,4111344c <__umoddi3+0x228>
41113448:	24c9883a 	add	r4,r4,r19
4111344c:	20a1c83a 	sub	r16,r4,r2
41113450:	b00b883a 	mov	r5,r22
41113454:	8009883a 	mov	r4,r16
41113458:	11138b80 	call	411138b8 <__umodsi3>
4111345c:	1023883a 	mov	r17,r2
41113460:	b00b883a 	mov	r5,r22
41113464:	8009883a 	mov	r4,r16
41113468:	11138540 	call	41113854 <__udivsi3>
4111346c:	8822943a 	slli	r17,r17,16
41113470:	1545383a 	mul	r2,r2,r21
41113474:	a53fffcc 	andi	r20,r20,65535
41113478:	a446b03a 	or	r3,r20,r17
4111347c:	18bfb02e 	bgeu	r3,r2,41113340 <__reset+0xbb0f3340>
41113480:	003fab06 	br	41113330 <__reset+0xbb0f3330>
41113484:	2005883a 	mov	r2,r4
41113488:	2807883a 	mov	r3,r5
4111348c:	dfc00b17 	ldw	ra,44(sp)
41113490:	df000a17 	ldw	fp,40(sp)
41113494:	ddc00917 	ldw	r23,36(sp)
41113498:	dd800817 	ldw	r22,32(sp)
4111349c:	dd400717 	ldw	r21,28(sp)
411134a0:	dd000617 	ldw	r20,24(sp)
411134a4:	dcc00517 	ldw	r19,20(sp)
411134a8:	dc800417 	ldw	r18,16(sp)
411134ac:	dc400317 	ldw	r17,12(sp)
411134b0:	dc000217 	ldw	r16,8(sp)
411134b4:	dec00c04 	addi	sp,sp,48
411134b8:	f800283a 	ret
411134bc:	04c03fc4 	movi	r19,255
411134c0:	99c9803a 	cmpltu	r4,r19,r7
411134c4:	200890fa 	slli	r4,r4,3
411134c8:	003fa806 	br	4111336c <__reset+0xbb0f336c>
411134cc:	00803fc4 	movi	r2,255
411134d0:	14c5803a 	cmpltu	r2,r2,r19
411134d4:	100490fa 	slli	r2,r2,3
411134d8:	003fc006 	br	411133dc <__reset+0xbb0f33dc>
411134dc:	00804034 	movhi	r2,256
411134e0:	10bfffc4 	addi	r2,r2,-1
411134e4:	11808b36 	bltu	r2,r6,41113714 <__umoddi3+0x4f0>
411134e8:	01000404 	movi	r4,16
411134ec:	003f6406 	br	41113280 <__reset+0xbb0f3280>
411134f0:	34c4d83a 	srl	r2,r6,r19
411134f4:	3d0e983a 	sll	r7,r7,r20
411134f8:	8cf8d83a 	srl	fp,r17,r19
411134fc:	8d10983a 	sll	r8,r17,r20
41113500:	38aab03a 	or	r21,r7,r2
41113504:	a82cd43a 	srli	r22,r21,16
41113508:	84e2d83a 	srl	r17,r16,r19
4111350c:	e009883a 	mov	r4,fp
41113510:	b00b883a 	mov	r5,r22
41113514:	8a22b03a 	or	r17,r17,r8
41113518:	3524983a 	sll	r18,r6,r20
4111351c:	11138b80 	call	411138b8 <__umodsi3>
41113520:	e009883a 	mov	r4,fp
41113524:	b00b883a 	mov	r5,r22
41113528:	102f883a 	mov	r23,r2
4111352c:	11138540 	call	41113854 <__udivsi3>
41113530:	100d883a 	mov	r6,r2
41113534:	b808943a 	slli	r4,r23,16
41113538:	aa3fffcc 	andi	r8,r21,65535
4111353c:	8804d43a 	srli	r2,r17,16
41113540:	41af383a 	mul	r23,r8,r6
41113544:	8520983a 	sll	r16,r16,r20
41113548:	1104b03a 	or	r2,r2,r4
4111354c:	15c0042e 	bgeu	r2,r23,41113560 <__umoddi3+0x33c>
41113550:	1545883a 	add	r2,r2,r21
41113554:	30ffffc4 	addi	r3,r6,-1
41113558:	1540742e 	bgeu	r2,r21,4111372c <__umoddi3+0x508>
4111355c:	180d883a 	mov	r6,r3
41113560:	15efc83a 	sub	r23,r2,r23
41113564:	b00b883a 	mov	r5,r22
41113568:	b809883a 	mov	r4,r23
4111356c:	d9800115 	stw	r6,4(sp)
41113570:	da000015 	stw	r8,0(sp)
41113574:	11138b80 	call	411138b8 <__umodsi3>
41113578:	b00b883a 	mov	r5,r22
4111357c:	b809883a 	mov	r4,r23
41113580:	1039883a 	mov	fp,r2
41113584:	11138540 	call	41113854 <__udivsi3>
41113588:	da000017 	ldw	r8,0(sp)
4111358c:	e038943a 	slli	fp,fp,16
41113590:	100b883a 	mov	r5,r2
41113594:	4089383a 	mul	r4,r8,r2
41113598:	8a3fffcc 	andi	r8,r17,65535
4111359c:	4710b03a 	or	r8,r8,fp
411135a0:	d9800117 	ldw	r6,4(sp)
411135a4:	4100042e 	bgeu	r8,r4,411135b8 <__umoddi3+0x394>
411135a8:	4551883a 	add	r8,r8,r21
411135ac:	10bfffc4 	addi	r2,r2,-1
411135b0:	45405a2e 	bgeu	r8,r21,4111371c <__umoddi3+0x4f8>
411135b4:	100b883a 	mov	r5,r2
411135b8:	300c943a 	slli	r6,r6,16
411135bc:	91ffffcc 	andi	r7,r18,65535
411135c0:	9004d43a 	srli	r2,r18,16
411135c4:	314cb03a 	or	r6,r6,r5
411135c8:	317fffcc 	andi	r5,r6,65535
411135cc:	300cd43a 	srli	r6,r6,16
411135d0:	29d3383a 	mul	r9,r5,r7
411135d4:	288b383a 	mul	r5,r5,r2
411135d8:	31cf383a 	mul	r7,r6,r7
411135dc:	4806d43a 	srli	r3,r9,16
411135e0:	4111c83a 	sub	r8,r8,r4
411135e4:	29cb883a 	add	r5,r5,r7
411135e8:	194b883a 	add	r5,r3,r5
411135ec:	3085383a 	mul	r2,r6,r2
411135f0:	29c0022e 	bgeu	r5,r7,411135fc <__umoddi3+0x3d8>
411135f4:	00c00074 	movhi	r3,1
411135f8:	10c5883a 	add	r2,r2,r3
411135fc:	2808d43a 	srli	r4,r5,16
41113600:	280a943a 	slli	r5,r5,16
41113604:	4a7fffcc 	andi	r9,r9,65535
41113608:	2085883a 	add	r2,r4,r2
4111360c:	2a4b883a 	add	r5,r5,r9
41113610:	40803636 	bltu	r8,r2,411136ec <__umoddi3+0x4c8>
41113614:	40804d26 	beq	r8,r2,4111374c <__umoddi3+0x528>
41113618:	4089c83a 	sub	r4,r8,r2
4111361c:	280f883a 	mov	r7,r5
41113620:	81cfc83a 	sub	r7,r16,r7
41113624:	81c7803a 	cmpltu	r3,r16,r7
41113628:	20c7c83a 	sub	r3,r4,r3
4111362c:	1cc4983a 	sll	r2,r3,r19
41113630:	3d0ed83a 	srl	r7,r7,r20
41113634:	1d06d83a 	srl	r3,r3,r20
41113638:	11c4b03a 	or	r2,r2,r7
4111363c:	003f9306 	br	4111348c <__reset+0xbb0f348c>
41113640:	9ca6983a 	sll	r19,r19,r18
41113644:	88e8d83a 	srl	r20,r17,r3
41113648:	80c4d83a 	srl	r2,r16,r3
4111364c:	982cd43a 	srli	r22,r19,16
41113650:	8ca2983a 	sll	r17,r17,r18
41113654:	a009883a 	mov	r4,r20
41113658:	b00b883a 	mov	r5,r22
4111365c:	1478b03a 	or	fp,r2,r17
41113660:	11138b80 	call	411138b8 <__umodsi3>
41113664:	a009883a 	mov	r4,r20
41113668:	b00b883a 	mov	r5,r22
4111366c:	1023883a 	mov	r17,r2
41113670:	11138540 	call	41113854 <__udivsi3>
41113674:	9d7fffcc 	andi	r21,r19,65535
41113678:	880a943a 	slli	r5,r17,16
4111367c:	e008d43a 	srli	r4,fp,16
41113680:	a885383a 	mul	r2,r21,r2
41113684:	84a8983a 	sll	r20,r16,r18
41113688:	2148b03a 	or	r4,r4,r5
4111368c:	2080042e 	bgeu	r4,r2,411136a0 <__umoddi3+0x47c>
41113690:	24c9883a 	add	r4,r4,r19
41113694:	24c00236 	bltu	r4,r19,411136a0 <__umoddi3+0x47c>
41113698:	2080012e 	bgeu	r4,r2,411136a0 <__umoddi3+0x47c>
4111369c:	24c9883a 	add	r4,r4,r19
411136a0:	20a3c83a 	sub	r17,r4,r2
411136a4:	b00b883a 	mov	r5,r22
411136a8:	8809883a 	mov	r4,r17
411136ac:	11138b80 	call	411138b8 <__umodsi3>
411136b0:	102f883a 	mov	r23,r2
411136b4:	8809883a 	mov	r4,r17
411136b8:	b00b883a 	mov	r5,r22
411136bc:	11138540 	call	41113854 <__udivsi3>
411136c0:	b82e943a 	slli	r23,r23,16
411136c4:	a885383a 	mul	r2,r21,r2
411136c8:	e13fffcc 	andi	r4,fp,65535
411136cc:	25c8b03a 	or	r4,r4,r23
411136d0:	2080042e 	bgeu	r4,r2,411136e4 <__umoddi3+0x4c0>
411136d4:	24c9883a 	add	r4,r4,r19
411136d8:	24c00236 	bltu	r4,r19,411136e4 <__umoddi3+0x4c0>
411136dc:	2080012e 	bgeu	r4,r2,411136e4 <__umoddi3+0x4c0>
411136e0:	24c9883a 	add	r4,r4,r19
411136e4:	20a3c83a 	sub	r17,r4,r2
411136e8:	003f4806 	br	4111340c <__reset+0xbb0f340c>
411136ec:	2c8fc83a 	sub	r7,r5,r18
411136f0:	1545c83a 	sub	r2,r2,r21
411136f4:	29cb803a 	cmpltu	r5,r5,r7
411136f8:	1145c83a 	sub	r2,r2,r5
411136fc:	4089c83a 	sub	r4,r8,r2
41113700:	003fc706 	br	41113620 <__reset+0xbb0f3620>
41113704:	01000604 	movi	r4,24
41113708:	003f1806 	br	4111336c <__reset+0xbb0f336c>
4111370c:	00800604 	movi	r2,24
41113710:	003f3206 	br	411133dc <__reset+0xbb0f33dc>
41113714:	01000604 	movi	r4,24
41113718:	003ed906 	br	41113280 <__reset+0xbb0f3280>
4111371c:	413fa52e 	bgeu	r8,r4,411135b4 <__reset+0xbb0f35b4>
41113720:	297fff84 	addi	r5,r5,-2
41113724:	4551883a 	add	r8,r8,r21
41113728:	003fa306 	br	411135b8 <__reset+0xbb0f35b8>
4111372c:	15ff8b2e 	bgeu	r2,r23,4111355c <__reset+0xbb0f355c>
41113730:	31bfff84 	addi	r6,r6,-2
41113734:	1545883a 	add	r2,r2,r21
41113738:	003f8906 	br	41113560 <__reset+0xbb0f3560>
4111373c:	24c9883a 	add	r4,r4,r19
41113740:	003eee06 	br	411132fc <__reset+0xbb0f32fc>
41113744:	8005883a 	mov	r2,r16
41113748:	003f1706 	br	411133a8 <__reset+0xbb0f33a8>
4111374c:	817fe736 	bltu	r16,r5,411136ec <__reset+0xbb0f36ec>
41113750:	280f883a 	mov	r7,r5
41113754:	0009883a 	mov	r4,zero
41113758:	003fb106 	br	41113620 <__reset+0xbb0f3620>

4111375c <__divsi3>:
4111375c:	20001b16 	blt	r4,zero,411137cc <__divsi3+0x70>
41113760:	000f883a 	mov	r7,zero
41113764:	28001616 	blt	r5,zero,411137c0 <__divsi3+0x64>
41113768:	200d883a 	mov	r6,r4
4111376c:	29001a2e 	bgeu	r5,r4,411137d8 <__divsi3+0x7c>
41113770:	00800804 	movi	r2,32
41113774:	00c00044 	movi	r3,1
41113778:	00000106 	br	41113780 <__divsi3+0x24>
4111377c:	10000d26 	beq	r2,zero,411137b4 <__divsi3+0x58>
41113780:	294b883a 	add	r5,r5,r5
41113784:	10bfffc4 	addi	r2,r2,-1
41113788:	18c7883a 	add	r3,r3,r3
4111378c:	293ffb36 	bltu	r5,r4,4111377c <__reset+0xbb0f377c>
41113790:	0005883a 	mov	r2,zero
41113794:	18000726 	beq	r3,zero,411137b4 <__divsi3+0x58>
41113798:	0005883a 	mov	r2,zero
4111379c:	31400236 	bltu	r6,r5,411137a8 <__divsi3+0x4c>
411137a0:	314dc83a 	sub	r6,r6,r5
411137a4:	10c4b03a 	or	r2,r2,r3
411137a8:	1806d07a 	srli	r3,r3,1
411137ac:	280ad07a 	srli	r5,r5,1
411137b0:	183ffa1e 	bne	r3,zero,4111379c <__reset+0xbb0f379c>
411137b4:	38000126 	beq	r7,zero,411137bc <__divsi3+0x60>
411137b8:	0085c83a 	sub	r2,zero,r2
411137bc:	f800283a 	ret
411137c0:	014bc83a 	sub	r5,zero,r5
411137c4:	39c0005c 	xori	r7,r7,1
411137c8:	003fe706 	br	41113768 <__reset+0xbb0f3768>
411137cc:	0109c83a 	sub	r4,zero,r4
411137d0:	01c00044 	movi	r7,1
411137d4:	003fe306 	br	41113764 <__reset+0xbb0f3764>
411137d8:	00c00044 	movi	r3,1
411137dc:	003fee06 	br	41113798 <__reset+0xbb0f3798>

411137e0 <__modsi3>:
411137e0:	20001716 	blt	r4,zero,41113840 <__modsi3+0x60>
411137e4:	000f883a 	mov	r7,zero
411137e8:	2005883a 	mov	r2,r4
411137ec:	28001216 	blt	r5,zero,41113838 <__modsi3+0x58>
411137f0:	2900162e 	bgeu	r5,r4,4111384c <__modsi3+0x6c>
411137f4:	01800804 	movi	r6,32
411137f8:	00c00044 	movi	r3,1
411137fc:	00000106 	br	41113804 <__modsi3+0x24>
41113800:	30000a26 	beq	r6,zero,4111382c <__modsi3+0x4c>
41113804:	294b883a 	add	r5,r5,r5
41113808:	31bfffc4 	addi	r6,r6,-1
4111380c:	18c7883a 	add	r3,r3,r3
41113810:	293ffb36 	bltu	r5,r4,41113800 <__reset+0xbb0f3800>
41113814:	18000526 	beq	r3,zero,4111382c <__modsi3+0x4c>
41113818:	1806d07a 	srli	r3,r3,1
4111381c:	11400136 	bltu	r2,r5,41113824 <__modsi3+0x44>
41113820:	1145c83a 	sub	r2,r2,r5
41113824:	280ad07a 	srli	r5,r5,1
41113828:	183ffb1e 	bne	r3,zero,41113818 <__reset+0xbb0f3818>
4111382c:	38000126 	beq	r7,zero,41113834 <__modsi3+0x54>
41113830:	0085c83a 	sub	r2,zero,r2
41113834:	f800283a 	ret
41113838:	014bc83a 	sub	r5,zero,r5
4111383c:	003fec06 	br	411137f0 <__reset+0xbb0f37f0>
41113840:	0109c83a 	sub	r4,zero,r4
41113844:	01c00044 	movi	r7,1
41113848:	003fe706 	br	411137e8 <__reset+0xbb0f37e8>
4111384c:	00c00044 	movi	r3,1
41113850:	003ff106 	br	41113818 <__reset+0xbb0f3818>

41113854 <__udivsi3>:
41113854:	200d883a 	mov	r6,r4
41113858:	2900152e 	bgeu	r5,r4,411138b0 <__udivsi3+0x5c>
4111385c:	28001416 	blt	r5,zero,411138b0 <__udivsi3+0x5c>
41113860:	00800804 	movi	r2,32
41113864:	00c00044 	movi	r3,1
41113868:	00000206 	br	41113874 <__udivsi3+0x20>
4111386c:	10000e26 	beq	r2,zero,411138a8 <__udivsi3+0x54>
41113870:	28000516 	blt	r5,zero,41113888 <__udivsi3+0x34>
41113874:	294b883a 	add	r5,r5,r5
41113878:	10bfffc4 	addi	r2,r2,-1
4111387c:	18c7883a 	add	r3,r3,r3
41113880:	293ffa36 	bltu	r5,r4,4111386c <__reset+0xbb0f386c>
41113884:	18000826 	beq	r3,zero,411138a8 <__udivsi3+0x54>
41113888:	0005883a 	mov	r2,zero
4111388c:	31400236 	bltu	r6,r5,41113898 <__udivsi3+0x44>
41113890:	314dc83a 	sub	r6,r6,r5
41113894:	10c4b03a 	or	r2,r2,r3
41113898:	1806d07a 	srli	r3,r3,1
4111389c:	280ad07a 	srli	r5,r5,1
411138a0:	183ffa1e 	bne	r3,zero,4111388c <__reset+0xbb0f388c>
411138a4:	f800283a 	ret
411138a8:	0005883a 	mov	r2,zero
411138ac:	f800283a 	ret
411138b0:	00c00044 	movi	r3,1
411138b4:	003ff406 	br	41113888 <__reset+0xbb0f3888>

411138b8 <__umodsi3>:
411138b8:	2005883a 	mov	r2,r4
411138bc:	2900122e 	bgeu	r5,r4,41113908 <__umodsi3+0x50>
411138c0:	28001116 	blt	r5,zero,41113908 <__umodsi3+0x50>
411138c4:	01800804 	movi	r6,32
411138c8:	00c00044 	movi	r3,1
411138cc:	00000206 	br	411138d8 <__umodsi3+0x20>
411138d0:	30000c26 	beq	r6,zero,41113904 <__umodsi3+0x4c>
411138d4:	28000516 	blt	r5,zero,411138ec <__umodsi3+0x34>
411138d8:	294b883a 	add	r5,r5,r5
411138dc:	31bfffc4 	addi	r6,r6,-1
411138e0:	18c7883a 	add	r3,r3,r3
411138e4:	293ffa36 	bltu	r5,r4,411138d0 <__reset+0xbb0f38d0>
411138e8:	18000626 	beq	r3,zero,41113904 <__umodsi3+0x4c>
411138ec:	1806d07a 	srli	r3,r3,1
411138f0:	11400136 	bltu	r2,r5,411138f8 <__umodsi3+0x40>
411138f4:	1145c83a 	sub	r2,r2,r5
411138f8:	280ad07a 	srli	r5,r5,1
411138fc:	183ffb1e 	bne	r3,zero,411138ec <__reset+0xbb0f38ec>
41113900:	f800283a 	ret
41113904:	f800283a 	ret
41113908:	00c00044 	movi	r3,1
4111390c:	003ff706 	br	411138ec <__reset+0xbb0f38ec>

41113910 <__adddf3>:
41113910:	02c00434 	movhi	r11,16
41113914:	5affffc4 	addi	r11,r11,-1
41113918:	2806d7fa 	srli	r3,r5,31
4111391c:	2ad4703a 	and	r10,r5,r11
41113920:	3ad2703a 	and	r9,r7,r11
41113924:	3804d53a 	srli	r2,r7,20
41113928:	3018d77a 	srli	r12,r6,29
4111392c:	280ad53a 	srli	r5,r5,20
41113930:	501490fa 	slli	r10,r10,3
41113934:	2010d77a 	srli	r8,r4,29
41113938:	481290fa 	slli	r9,r9,3
4111393c:	380ed7fa 	srli	r7,r7,31
41113940:	defffb04 	addi	sp,sp,-20
41113944:	dc800215 	stw	r18,8(sp)
41113948:	dc400115 	stw	r17,4(sp)
4111394c:	dc000015 	stw	r16,0(sp)
41113950:	dfc00415 	stw	ra,16(sp)
41113954:	dcc00315 	stw	r19,12(sp)
41113958:	1c803fcc 	andi	r18,r3,255
4111395c:	2c01ffcc 	andi	r16,r5,2047
41113960:	5210b03a 	or	r8,r10,r8
41113964:	202290fa 	slli	r17,r4,3
41113968:	1081ffcc 	andi	r2,r2,2047
4111396c:	4b12b03a 	or	r9,r9,r12
41113970:	300c90fa 	slli	r6,r6,3
41113974:	91c07526 	beq	r18,r7,41113b4c <__adddf3+0x23c>
41113978:	8087c83a 	sub	r3,r16,r2
4111397c:	00c0ab0e 	bge	zero,r3,41113c2c <__adddf3+0x31c>
41113980:	10002a1e 	bne	r2,zero,41113a2c <__adddf3+0x11c>
41113984:	4984b03a 	or	r2,r9,r6
41113988:	1000961e 	bne	r2,zero,41113be4 <__adddf3+0x2d4>
4111398c:	888001cc 	andi	r2,r17,7
41113990:	10000726 	beq	r2,zero,411139b0 <__adddf3+0xa0>
41113994:	888003cc 	andi	r2,r17,15
41113998:	00c00104 	movi	r3,4
4111399c:	10c00426 	beq	r2,r3,411139b0 <__adddf3+0xa0>
411139a0:	88c7883a 	add	r3,r17,r3
411139a4:	1c63803a 	cmpltu	r17,r3,r17
411139a8:	4451883a 	add	r8,r8,r17
411139ac:	1823883a 	mov	r17,r3
411139b0:	4080202c 	andhi	r2,r8,128
411139b4:	10005926 	beq	r2,zero,41113b1c <__adddf3+0x20c>
411139b8:	84000044 	addi	r16,r16,1
411139bc:	0081ffc4 	movi	r2,2047
411139c0:	8080ba26 	beq	r16,r2,41113cac <__adddf3+0x39c>
411139c4:	00bfe034 	movhi	r2,65408
411139c8:	10bfffc4 	addi	r2,r2,-1
411139cc:	4090703a 	and	r8,r8,r2
411139d0:	4004977a 	slli	r2,r8,29
411139d4:	4010927a 	slli	r8,r8,9
411139d8:	8822d0fa 	srli	r17,r17,3
411139dc:	8401ffcc 	andi	r16,r16,2047
411139e0:	4010d33a 	srli	r8,r8,12
411139e4:	9007883a 	mov	r3,r18
411139e8:	1444b03a 	or	r2,r2,r17
411139ec:	8401ffcc 	andi	r16,r16,2047
411139f0:	8020953a 	slli	r16,r16,20
411139f4:	18c03fcc 	andi	r3,r3,255
411139f8:	01000434 	movhi	r4,16
411139fc:	213fffc4 	addi	r4,r4,-1
41113a00:	180697fa 	slli	r3,r3,31
41113a04:	4110703a 	and	r8,r8,r4
41113a08:	4410b03a 	or	r8,r8,r16
41113a0c:	40c6b03a 	or	r3,r8,r3
41113a10:	dfc00417 	ldw	ra,16(sp)
41113a14:	dcc00317 	ldw	r19,12(sp)
41113a18:	dc800217 	ldw	r18,8(sp)
41113a1c:	dc400117 	ldw	r17,4(sp)
41113a20:	dc000017 	ldw	r16,0(sp)
41113a24:	dec00504 	addi	sp,sp,20
41113a28:	f800283a 	ret
41113a2c:	0081ffc4 	movi	r2,2047
41113a30:	80bfd626 	beq	r16,r2,4111398c <__reset+0xbb0f398c>
41113a34:	4a402034 	orhi	r9,r9,128
41113a38:	00800e04 	movi	r2,56
41113a3c:	10c09f16 	blt	r2,r3,41113cbc <__adddf3+0x3ac>
41113a40:	008007c4 	movi	r2,31
41113a44:	10c0c216 	blt	r2,r3,41113d50 <__adddf3+0x440>
41113a48:	00800804 	movi	r2,32
41113a4c:	10c5c83a 	sub	r2,r2,r3
41113a50:	488a983a 	sll	r5,r9,r2
41113a54:	30c8d83a 	srl	r4,r6,r3
41113a58:	3084983a 	sll	r2,r6,r2
41113a5c:	48c6d83a 	srl	r3,r9,r3
41113a60:	290cb03a 	or	r6,r5,r4
41113a64:	1004c03a 	cmpne	r2,r2,zero
41113a68:	308cb03a 	or	r6,r6,r2
41113a6c:	898dc83a 	sub	r6,r17,r6
41113a70:	89a3803a 	cmpltu	r17,r17,r6
41113a74:	40d1c83a 	sub	r8,r8,r3
41113a78:	4451c83a 	sub	r8,r8,r17
41113a7c:	3023883a 	mov	r17,r6
41113a80:	4080202c 	andhi	r2,r8,128
41113a84:	10002326 	beq	r2,zero,41113b14 <__adddf3+0x204>
41113a88:	04c02034 	movhi	r19,128
41113a8c:	9cffffc4 	addi	r19,r19,-1
41113a90:	44e6703a 	and	r19,r8,r19
41113a94:	98007626 	beq	r19,zero,41113c70 <__adddf3+0x360>
41113a98:	9809883a 	mov	r4,r19
41113a9c:	110946c0 	call	4110946c <__clzsi2>
41113aa0:	10fffe04 	addi	r3,r2,-8
41113aa4:	010007c4 	movi	r4,31
41113aa8:	20c07716 	blt	r4,r3,41113c88 <__adddf3+0x378>
41113aac:	00800804 	movi	r2,32
41113ab0:	10c5c83a 	sub	r2,r2,r3
41113ab4:	8884d83a 	srl	r2,r17,r2
41113ab8:	98d0983a 	sll	r8,r19,r3
41113abc:	88e2983a 	sll	r17,r17,r3
41113ac0:	1204b03a 	or	r2,r2,r8
41113ac4:	1c007416 	blt	r3,r16,41113c98 <__adddf3+0x388>
41113ac8:	1c21c83a 	sub	r16,r3,r16
41113acc:	82000044 	addi	r8,r16,1
41113ad0:	00c007c4 	movi	r3,31
41113ad4:	1a009116 	blt	r3,r8,41113d1c <__adddf3+0x40c>
41113ad8:	00c00804 	movi	r3,32
41113adc:	1a07c83a 	sub	r3,r3,r8
41113ae0:	8a08d83a 	srl	r4,r17,r8
41113ae4:	88e2983a 	sll	r17,r17,r3
41113ae8:	10c6983a 	sll	r3,r2,r3
41113aec:	1210d83a 	srl	r8,r2,r8
41113af0:	8804c03a 	cmpne	r2,r17,zero
41113af4:	1906b03a 	or	r3,r3,r4
41113af8:	18a2b03a 	or	r17,r3,r2
41113afc:	0021883a 	mov	r16,zero
41113b00:	003fa206 	br	4111398c <__reset+0xbb0f398c>
41113b04:	1890b03a 	or	r8,r3,r2
41113b08:	40017d26 	beq	r8,zero,41114100 <__adddf3+0x7f0>
41113b0c:	1011883a 	mov	r8,r2
41113b10:	1823883a 	mov	r17,r3
41113b14:	888001cc 	andi	r2,r17,7
41113b18:	103f9e1e 	bne	r2,zero,41113994 <__reset+0xbb0f3994>
41113b1c:	4004977a 	slli	r2,r8,29
41113b20:	8822d0fa 	srli	r17,r17,3
41113b24:	4010d0fa 	srli	r8,r8,3
41113b28:	9007883a 	mov	r3,r18
41113b2c:	1444b03a 	or	r2,r2,r17
41113b30:	0101ffc4 	movi	r4,2047
41113b34:	81002426 	beq	r16,r4,41113bc8 <__adddf3+0x2b8>
41113b38:	8120703a 	and	r16,r16,r4
41113b3c:	01000434 	movhi	r4,16
41113b40:	213fffc4 	addi	r4,r4,-1
41113b44:	4110703a 	and	r8,r8,r4
41113b48:	003fa806 	br	411139ec <__reset+0xbb0f39ec>
41113b4c:	8089c83a 	sub	r4,r16,r2
41113b50:	01005e0e 	bge	zero,r4,41113ccc <__adddf3+0x3bc>
41113b54:	10002b26 	beq	r2,zero,41113c04 <__adddf3+0x2f4>
41113b58:	0081ffc4 	movi	r2,2047
41113b5c:	80bf8b26 	beq	r16,r2,4111398c <__reset+0xbb0f398c>
41113b60:	4a402034 	orhi	r9,r9,128
41113b64:	00800e04 	movi	r2,56
41113b68:	1100a40e 	bge	r2,r4,41113dfc <__adddf3+0x4ec>
41113b6c:	498cb03a 	or	r6,r9,r6
41113b70:	300ac03a 	cmpne	r5,r6,zero
41113b74:	0013883a 	mov	r9,zero
41113b78:	2c4b883a 	add	r5,r5,r17
41113b7c:	2c63803a 	cmpltu	r17,r5,r17
41113b80:	4a11883a 	add	r8,r9,r8
41113b84:	8a11883a 	add	r8,r17,r8
41113b88:	2823883a 	mov	r17,r5
41113b8c:	4080202c 	andhi	r2,r8,128
41113b90:	103fe026 	beq	r2,zero,41113b14 <__reset+0xbb0f3b14>
41113b94:	84000044 	addi	r16,r16,1
41113b98:	0081ffc4 	movi	r2,2047
41113b9c:	8080d226 	beq	r16,r2,41113ee8 <__adddf3+0x5d8>
41113ba0:	00bfe034 	movhi	r2,65408
41113ba4:	10bfffc4 	addi	r2,r2,-1
41113ba8:	4090703a 	and	r8,r8,r2
41113bac:	880ad07a 	srli	r5,r17,1
41113bb0:	400897fa 	slli	r4,r8,31
41113bb4:	88c0004c 	andi	r3,r17,1
41113bb8:	28e2b03a 	or	r17,r5,r3
41113bbc:	4010d07a 	srli	r8,r8,1
41113bc0:	2462b03a 	or	r17,r4,r17
41113bc4:	003f7106 	br	4111398c <__reset+0xbb0f398c>
41113bc8:	4088b03a 	or	r4,r8,r2
41113bcc:	20014526 	beq	r4,zero,411140e4 <__adddf3+0x7d4>
41113bd0:	01000434 	movhi	r4,16
41113bd4:	42000234 	orhi	r8,r8,8
41113bd8:	213fffc4 	addi	r4,r4,-1
41113bdc:	4110703a 	and	r8,r8,r4
41113be0:	003f8206 	br	411139ec <__reset+0xbb0f39ec>
41113be4:	18ffffc4 	addi	r3,r3,-1
41113be8:	1800491e 	bne	r3,zero,41113d10 <__adddf3+0x400>
41113bec:	898bc83a 	sub	r5,r17,r6
41113bf0:	8963803a 	cmpltu	r17,r17,r5
41113bf4:	4251c83a 	sub	r8,r8,r9
41113bf8:	4451c83a 	sub	r8,r8,r17
41113bfc:	2823883a 	mov	r17,r5
41113c00:	003f9f06 	br	41113a80 <__reset+0xbb0f3a80>
41113c04:	4984b03a 	or	r2,r9,r6
41113c08:	103f6026 	beq	r2,zero,4111398c <__reset+0xbb0f398c>
41113c0c:	213fffc4 	addi	r4,r4,-1
41113c10:	2000931e 	bne	r4,zero,41113e60 <__adddf3+0x550>
41113c14:	898d883a 	add	r6,r17,r6
41113c18:	3463803a 	cmpltu	r17,r6,r17
41113c1c:	4251883a 	add	r8,r8,r9
41113c20:	8a11883a 	add	r8,r17,r8
41113c24:	3023883a 	mov	r17,r6
41113c28:	003fd806 	br	41113b8c <__reset+0xbb0f3b8c>
41113c2c:	1800541e 	bne	r3,zero,41113d80 <__adddf3+0x470>
41113c30:	80800044 	addi	r2,r16,1
41113c34:	1081ffcc 	andi	r2,r2,2047
41113c38:	00c00044 	movi	r3,1
41113c3c:	1880a00e 	bge	r3,r2,41113ec0 <__adddf3+0x5b0>
41113c40:	8989c83a 	sub	r4,r17,r6
41113c44:	8905803a 	cmpltu	r2,r17,r4
41113c48:	4267c83a 	sub	r19,r8,r9
41113c4c:	98a7c83a 	sub	r19,r19,r2
41113c50:	9880202c 	andhi	r2,r19,128
41113c54:	10006326 	beq	r2,zero,41113de4 <__adddf3+0x4d4>
41113c58:	3463c83a 	sub	r17,r6,r17
41113c5c:	4a07c83a 	sub	r3,r9,r8
41113c60:	344d803a 	cmpltu	r6,r6,r17
41113c64:	19a7c83a 	sub	r19,r3,r6
41113c68:	3825883a 	mov	r18,r7
41113c6c:	983f8a1e 	bne	r19,zero,41113a98 <__reset+0xbb0f3a98>
41113c70:	8809883a 	mov	r4,r17
41113c74:	110946c0 	call	4110946c <__clzsi2>
41113c78:	10800804 	addi	r2,r2,32
41113c7c:	10fffe04 	addi	r3,r2,-8
41113c80:	010007c4 	movi	r4,31
41113c84:	20ff890e 	bge	r4,r3,41113aac <__reset+0xbb0f3aac>
41113c88:	10bff604 	addi	r2,r2,-40
41113c8c:	8884983a 	sll	r2,r17,r2
41113c90:	0023883a 	mov	r17,zero
41113c94:	1c3f8c0e 	bge	r3,r16,41113ac8 <__reset+0xbb0f3ac8>
41113c98:	023fe034 	movhi	r8,65408
41113c9c:	423fffc4 	addi	r8,r8,-1
41113ca0:	80e1c83a 	sub	r16,r16,r3
41113ca4:	1210703a 	and	r8,r2,r8
41113ca8:	003f3806 	br	4111398c <__reset+0xbb0f398c>
41113cac:	9007883a 	mov	r3,r18
41113cb0:	0011883a 	mov	r8,zero
41113cb4:	0005883a 	mov	r2,zero
41113cb8:	003f4c06 	br	411139ec <__reset+0xbb0f39ec>
41113cbc:	498cb03a 	or	r6,r9,r6
41113cc0:	300cc03a 	cmpne	r6,r6,zero
41113cc4:	0007883a 	mov	r3,zero
41113cc8:	003f6806 	br	41113a6c <__reset+0xbb0f3a6c>
41113ccc:	20009c1e 	bne	r4,zero,41113f40 <__adddf3+0x630>
41113cd0:	80800044 	addi	r2,r16,1
41113cd4:	1141ffcc 	andi	r5,r2,2047
41113cd8:	01000044 	movi	r4,1
41113cdc:	2140670e 	bge	r4,r5,41113e7c <__adddf3+0x56c>
41113ce0:	0101ffc4 	movi	r4,2047
41113ce4:	11007f26 	beq	r2,r4,41113ee4 <__adddf3+0x5d4>
41113ce8:	898d883a 	add	r6,r17,r6
41113cec:	4247883a 	add	r3,r8,r9
41113cf0:	3451803a 	cmpltu	r8,r6,r17
41113cf4:	40d1883a 	add	r8,r8,r3
41113cf8:	402297fa 	slli	r17,r8,31
41113cfc:	300cd07a 	srli	r6,r6,1
41113d00:	4010d07a 	srli	r8,r8,1
41113d04:	1021883a 	mov	r16,r2
41113d08:	89a2b03a 	or	r17,r17,r6
41113d0c:	003f1f06 	br	4111398c <__reset+0xbb0f398c>
41113d10:	0081ffc4 	movi	r2,2047
41113d14:	80bf481e 	bne	r16,r2,41113a38 <__reset+0xbb0f3a38>
41113d18:	003f1c06 	br	4111398c <__reset+0xbb0f398c>
41113d1c:	843ff844 	addi	r16,r16,-31
41113d20:	01000804 	movi	r4,32
41113d24:	1406d83a 	srl	r3,r2,r16
41113d28:	41005026 	beq	r8,r4,41113e6c <__adddf3+0x55c>
41113d2c:	01001004 	movi	r4,64
41113d30:	2211c83a 	sub	r8,r4,r8
41113d34:	1204983a 	sll	r2,r2,r8
41113d38:	88a2b03a 	or	r17,r17,r2
41113d3c:	8822c03a 	cmpne	r17,r17,zero
41113d40:	1c62b03a 	or	r17,r3,r17
41113d44:	0011883a 	mov	r8,zero
41113d48:	0021883a 	mov	r16,zero
41113d4c:	003f7106 	br	41113b14 <__reset+0xbb0f3b14>
41113d50:	193ff804 	addi	r4,r3,-32
41113d54:	00800804 	movi	r2,32
41113d58:	4908d83a 	srl	r4,r9,r4
41113d5c:	18804526 	beq	r3,r2,41113e74 <__adddf3+0x564>
41113d60:	00801004 	movi	r2,64
41113d64:	10c5c83a 	sub	r2,r2,r3
41113d68:	4886983a 	sll	r3,r9,r2
41113d6c:	198cb03a 	or	r6,r3,r6
41113d70:	300cc03a 	cmpne	r6,r6,zero
41113d74:	218cb03a 	or	r6,r4,r6
41113d78:	0007883a 	mov	r3,zero
41113d7c:	003f3b06 	br	41113a6c <__reset+0xbb0f3a6c>
41113d80:	80002a26 	beq	r16,zero,41113e2c <__adddf3+0x51c>
41113d84:	0101ffc4 	movi	r4,2047
41113d88:	11006826 	beq	r2,r4,41113f2c <__adddf3+0x61c>
41113d8c:	00c7c83a 	sub	r3,zero,r3
41113d90:	42002034 	orhi	r8,r8,128
41113d94:	01000e04 	movi	r4,56
41113d98:	20c07c16 	blt	r4,r3,41113f8c <__adddf3+0x67c>
41113d9c:	010007c4 	movi	r4,31
41113da0:	20c0da16 	blt	r4,r3,4111410c <__adddf3+0x7fc>
41113da4:	01000804 	movi	r4,32
41113da8:	20c9c83a 	sub	r4,r4,r3
41113dac:	4114983a 	sll	r10,r8,r4
41113db0:	88cad83a 	srl	r5,r17,r3
41113db4:	8908983a 	sll	r4,r17,r4
41113db8:	40c6d83a 	srl	r3,r8,r3
41113dbc:	5162b03a 	or	r17,r10,r5
41113dc0:	2008c03a 	cmpne	r4,r4,zero
41113dc4:	8922b03a 	or	r17,r17,r4
41113dc8:	3463c83a 	sub	r17,r6,r17
41113dcc:	48c7c83a 	sub	r3,r9,r3
41113dd0:	344d803a 	cmpltu	r6,r6,r17
41113dd4:	1991c83a 	sub	r8,r3,r6
41113dd8:	1021883a 	mov	r16,r2
41113ddc:	3825883a 	mov	r18,r7
41113de0:	003f2706 	br	41113a80 <__reset+0xbb0f3a80>
41113de4:	24d0b03a 	or	r8,r4,r19
41113de8:	40001b1e 	bne	r8,zero,41113e58 <__adddf3+0x548>
41113dec:	0005883a 	mov	r2,zero
41113df0:	0007883a 	mov	r3,zero
41113df4:	0021883a 	mov	r16,zero
41113df8:	003f4d06 	br	41113b30 <__reset+0xbb0f3b30>
41113dfc:	008007c4 	movi	r2,31
41113e00:	11003c16 	blt	r2,r4,41113ef4 <__adddf3+0x5e4>
41113e04:	00800804 	movi	r2,32
41113e08:	1105c83a 	sub	r2,r2,r4
41113e0c:	488e983a 	sll	r7,r9,r2
41113e10:	310ad83a 	srl	r5,r6,r4
41113e14:	3084983a 	sll	r2,r6,r2
41113e18:	4912d83a 	srl	r9,r9,r4
41113e1c:	394ab03a 	or	r5,r7,r5
41113e20:	1004c03a 	cmpne	r2,r2,zero
41113e24:	288ab03a 	or	r5,r5,r2
41113e28:	003f5306 	br	41113b78 <__reset+0xbb0f3b78>
41113e2c:	4448b03a 	or	r4,r8,r17
41113e30:	20003e26 	beq	r4,zero,41113f2c <__adddf3+0x61c>
41113e34:	00c6303a 	nor	r3,zero,r3
41113e38:	18003a1e 	bne	r3,zero,41113f24 <__adddf3+0x614>
41113e3c:	3463c83a 	sub	r17,r6,r17
41113e40:	4a07c83a 	sub	r3,r9,r8
41113e44:	344d803a 	cmpltu	r6,r6,r17
41113e48:	1991c83a 	sub	r8,r3,r6
41113e4c:	1021883a 	mov	r16,r2
41113e50:	3825883a 	mov	r18,r7
41113e54:	003f0a06 	br	41113a80 <__reset+0xbb0f3a80>
41113e58:	2023883a 	mov	r17,r4
41113e5c:	003f0d06 	br	41113a94 <__reset+0xbb0f3a94>
41113e60:	0081ffc4 	movi	r2,2047
41113e64:	80bf3f1e 	bne	r16,r2,41113b64 <__reset+0xbb0f3b64>
41113e68:	003ec806 	br	4111398c <__reset+0xbb0f398c>
41113e6c:	0005883a 	mov	r2,zero
41113e70:	003fb106 	br	41113d38 <__reset+0xbb0f3d38>
41113e74:	0007883a 	mov	r3,zero
41113e78:	003fbc06 	br	41113d6c <__reset+0xbb0f3d6c>
41113e7c:	4444b03a 	or	r2,r8,r17
41113e80:	8000871e 	bne	r16,zero,411140a0 <__adddf3+0x790>
41113e84:	1000ba26 	beq	r2,zero,41114170 <__adddf3+0x860>
41113e88:	4984b03a 	or	r2,r9,r6
41113e8c:	103ebf26 	beq	r2,zero,4111398c <__reset+0xbb0f398c>
41113e90:	8985883a 	add	r2,r17,r6
41113e94:	4247883a 	add	r3,r8,r9
41113e98:	1451803a 	cmpltu	r8,r2,r17
41113e9c:	40d1883a 	add	r8,r8,r3
41113ea0:	40c0202c 	andhi	r3,r8,128
41113ea4:	1023883a 	mov	r17,r2
41113ea8:	183f1a26 	beq	r3,zero,41113b14 <__reset+0xbb0f3b14>
41113eac:	00bfe034 	movhi	r2,65408
41113eb0:	10bfffc4 	addi	r2,r2,-1
41113eb4:	2021883a 	mov	r16,r4
41113eb8:	4090703a 	and	r8,r8,r2
41113ebc:	003eb306 	br	4111398c <__reset+0xbb0f398c>
41113ec0:	4444b03a 	or	r2,r8,r17
41113ec4:	8000291e 	bne	r16,zero,41113f6c <__adddf3+0x65c>
41113ec8:	10004b1e 	bne	r2,zero,41113ff8 <__adddf3+0x6e8>
41113ecc:	4990b03a 	or	r8,r9,r6
41113ed0:	40008b26 	beq	r8,zero,41114100 <__adddf3+0x7f0>
41113ed4:	4811883a 	mov	r8,r9
41113ed8:	3023883a 	mov	r17,r6
41113edc:	3825883a 	mov	r18,r7
41113ee0:	003eaa06 	br	4111398c <__reset+0xbb0f398c>
41113ee4:	1021883a 	mov	r16,r2
41113ee8:	0011883a 	mov	r8,zero
41113eec:	0005883a 	mov	r2,zero
41113ef0:	003f0f06 	br	41113b30 <__reset+0xbb0f3b30>
41113ef4:	217ff804 	addi	r5,r4,-32
41113ef8:	00800804 	movi	r2,32
41113efc:	494ad83a 	srl	r5,r9,r5
41113f00:	20807d26 	beq	r4,r2,411140f8 <__adddf3+0x7e8>
41113f04:	00801004 	movi	r2,64
41113f08:	1109c83a 	sub	r4,r2,r4
41113f0c:	4912983a 	sll	r9,r9,r4
41113f10:	498cb03a 	or	r6,r9,r6
41113f14:	300cc03a 	cmpne	r6,r6,zero
41113f18:	298ab03a 	or	r5,r5,r6
41113f1c:	0013883a 	mov	r9,zero
41113f20:	003f1506 	br	41113b78 <__reset+0xbb0f3b78>
41113f24:	0101ffc4 	movi	r4,2047
41113f28:	113f9a1e 	bne	r2,r4,41113d94 <__reset+0xbb0f3d94>
41113f2c:	4811883a 	mov	r8,r9
41113f30:	3023883a 	mov	r17,r6
41113f34:	1021883a 	mov	r16,r2
41113f38:	3825883a 	mov	r18,r7
41113f3c:	003e9306 	br	4111398c <__reset+0xbb0f398c>
41113f40:	8000161e 	bne	r16,zero,41113f9c <__adddf3+0x68c>
41113f44:	444ab03a 	or	r5,r8,r17
41113f48:	28005126 	beq	r5,zero,41114090 <__adddf3+0x780>
41113f4c:	0108303a 	nor	r4,zero,r4
41113f50:	20004d1e 	bne	r4,zero,41114088 <__adddf3+0x778>
41113f54:	89a3883a 	add	r17,r17,r6
41113f58:	4253883a 	add	r9,r8,r9
41113f5c:	898d803a 	cmpltu	r6,r17,r6
41113f60:	3251883a 	add	r8,r6,r9
41113f64:	1021883a 	mov	r16,r2
41113f68:	003f0806 	br	41113b8c <__reset+0xbb0f3b8c>
41113f6c:	1000301e 	bne	r2,zero,41114030 <__adddf3+0x720>
41113f70:	4984b03a 	or	r2,r9,r6
41113f74:	10007126 	beq	r2,zero,4111413c <__adddf3+0x82c>
41113f78:	4811883a 	mov	r8,r9
41113f7c:	3023883a 	mov	r17,r6
41113f80:	3825883a 	mov	r18,r7
41113f84:	0401ffc4 	movi	r16,2047
41113f88:	003e8006 	br	4111398c <__reset+0xbb0f398c>
41113f8c:	4462b03a 	or	r17,r8,r17
41113f90:	8822c03a 	cmpne	r17,r17,zero
41113f94:	0007883a 	mov	r3,zero
41113f98:	003f8b06 	br	41113dc8 <__reset+0xbb0f3dc8>
41113f9c:	0141ffc4 	movi	r5,2047
41113fa0:	11403b26 	beq	r2,r5,41114090 <__adddf3+0x780>
41113fa4:	0109c83a 	sub	r4,zero,r4
41113fa8:	42002034 	orhi	r8,r8,128
41113fac:	01400e04 	movi	r5,56
41113fb0:	29006716 	blt	r5,r4,41114150 <__adddf3+0x840>
41113fb4:	014007c4 	movi	r5,31
41113fb8:	29007016 	blt	r5,r4,4111417c <__adddf3+0x86c>
41113fbc:	01400804 	movi	r5,32
41113fc0:	290bc83a 	sub	r5,r5,r4
41113fc4:	4154983a 	sll	r10,r8,r5
41113fc8:	890ed83a 	srl	r7,r17,r4
41113fcc:	894a983a 	sll	r5,r17,r5
41113fd0:	4108d83a 	srl	r4,r8,r4
41113fd4:	51e2b03a 	or	r17,r10,r7
41113fd8:	280ac03a 	cmpne	r5,r5,zero
41113fdc:	8962b03a 	or	r17,r17,r5
41113fe0:	89a3883a 	add	r17,r17,r6
41113fe4:	2253883a 	add	r9,r4,r9
41113fe8:	898d803a 	cmpltu	r6,r17,r6
41113fec:	3251883a 	add	r8,r6,r9
41113ff0:	1021883a 	mov	r16,r2
41113ff4:	003ee506 	br	41113b8c <__reset+0xbb0f3b8c>
41113ff8:	4984b03a 	or	r2,r9,r6
41113ffc:	103e6326 	beq	r2,zero,4111398c <__reset+0xbb0f398c>
41114000:	8987c83a 	sub	r3,r17,r6
41114004:	88c9803a 	cmpltu	r4,r17,r3
41114008:	4245c83a 	sub	r2,r8,r9
4111400c:	1105c83a 	sub	r2,r2,r4
41114010:	1100202c 	andhi	r4,r2,128
41114014:	203ebb26 	beq	r4,zero,41113b04 <__reset+0xbb0f3b04>
41114018:	3463c83a 	sub	r17,r6,r17
4111401c:	4a07c83a 	sub	r3,r9,r8
41114020:	344d803a 	cmpltu	r6,r6,r17
41114024:	1991c83a 	sub	r8,r3,r6
41114028:	3825883a 	mov	r18,r7
4111402c:	003e5706 	br	4111398c <__reset+0xbb0f398c>
41114030:	4984b03a 	or	r2,r9,r6
41114034:	10002e26 	beq	r2,zero,411140f0 <__adddf3+0x7e0>
41114038:	4004d0fa 	srli	r2,r8,3
4111403c:	8822d0fa 	srli	r17,r17,3
41114040:	4010977a 	slli	r8,r8,29
41114044:	10c0022c 	andhi	r3,r2,8
41114048:	4462b03a 	or	r17,r8,r17
4111404c:	18000826 	beq	r3,zero,41114070 <__adddf3+0x760>
41114050:	4808d0fa 	srli	r4,r9,3
41114054:	20c0022c 	andhi	r3,r4,8
41114058:	1800051e 	bne	r3,zero,41114070 <__adddf3+0x760>
4111405c:	300cd0fa 	srli	r6,r6,3
41114060:	4806977a 	slli	r3,r9,29
41114064:	2005883a 	mov	r2,r4
41114068:	3825883a 	mov	r18,r7
4111406c:	19a2b03a 	or	r17,r3,r6
41114070:	8810d77a 	srli	r8,r17,29
41114074:	100490fa 	slli	r2,r2,3
41114078:	882290fa 	slli	r17,r17,3
4111407c:	0401ffc4 	movi	r16,2047
41114080:	4090b03a 	or	r8,r8,r2
41114084:	003e4106 	br	4111398c <__reset+0xbb0f398c>
41114088:	0141ffc4 	movi	r5,2047
4111408c:	117fc71e 	bne	r2,r5,41113fac <__reset+0xbb0f3fac>
41114090:	4811883a 	mov	r8,r9
41114094:	3023883a 	mov	r17,r6
41114098:	1021883a 	mov	r16,r2
4111409c:	003e3b06 	br	4111398c <__reset+0xbb0f398c>
411140a0:	10002f26 	beq	r2,zero,41114160 <__adddf3+0x850>
411140a4:	4984b03a 	or	r2,r9,r6
411140a8:	10001126 	beq	r2,zero,411140f0 <__adddf3+0x7e0>
411140ac:	4004d0fa 	srli	r2,r8,3
411140b0:	8822d0fa 	srli	r17,r17,3
411140b4:	4010977a 	slli	r8,r8,29
411140b8:	10c0022c 	andhi	r3,r2,8
411140bc:	4462b03a 	or	r17,r8,r17
411140c0:	183feb26 	beq	r3,zero,41114070 <__reset+0xbb0f4070>
411140c4:	4808d0fa 	srli	r4,r9,3
411140c8:	20c0022c 	andhi	r3,r4,8
411140cc:	183fe81e 	bne	r3,zero,41114070 <__reset+0xbb0f4070>
411140d0:	300cd0fa 	srli	r6,r6,3
411140d4:	4806977a 	slli	r3,r9,29
411140d8:	2005883a 	mov	r2,r4
411140dc:	19a2b03a 	or	r17,r3,r6
411140e0:	003fe306 	br	41114070 <__reset+0xbb0f4070>
411140e4:	0011883a 	mov	r8,zero
411140e8:	0005883a 	mov	r2,zero
411140ec:	003e3f06 	br	411139ec <__reset+0xbb0f39ec>
411140f0:	0401ffc4 	movi	r16,2047
411140f4:	003e2506 	br	4111398c <__reset+0xbb0f398c>
411140f8:	0013883a 	mov	r9,zero
411140fc:	003f8406 	br	41113f10 <__reset+0xbb0f3f10>
41114100:	0005883a 	mov	r2,zero
41114104:	0007883a 	mov	r3,zero
41114108:	003e8906 	br	41113b30 <__reset+0xbb0f3b30>
4111410c:	197ff804 	addi	r5,r3,-32
41114110:	01000804 	movi	r4,32
41114114:	414ad83a 	srl	r5,r8,r5
41114118:	19002426 	beq	r3,r4,411141ac <__adddf3+0x89c>
4111411c:	01001004 	movi	r4,64
41114120:	20c7c83a 	sub	r3,r4,r3
41114124:	40c6983a 	sll	r3,r8,r3
41114128:	1c46b03a 	or	r3,r3,r17
4111412c:	1806c03a 	cmpne	r3,r3,zero
41114130:	28e2b03a 	or	r17,r5,r3
41114134:	0007883a 	mov	r3,zero
41114138:	003f2306 	br	41113dc8 <__reset+0xbb0f3dc8>
4111413c:	0007883a 	mov	r3,zero
41114140:	5811883a 	mov	r8,r11
41114144:	00bfffc4 	movi	r2,-1
41114148:	0401ffc4 	movi	r16,2047
4111414c:	003e7806 	br	41113b30 <__reset+0xbb0f3b30>
41114150:	4462b03a 	or	r17,r8,r17
41114154:	8822c03a 	cmpne	r17,r17,zero
41114158:	0009883a 	mov	r4,zero
4111415c:	003fa006 	br	41113fe0 <__reset+0xbb0f3fe0>
41114160:	4811883a 	mov	r8,r9
41114164:	3023883a 	mov	r17,r6
41114168:	0401ffc4 	movi	r16,2047
4111416c:	003e0706 	br	4111398c <__reset+0xbb0f398c>
41114170:	4811883a 	mov	r8,r9
41114174:	3023883a 	mov	r17,r6
41114178:	003e0406 	br	4111398c <__reset+0xbb0f398c>
4111417c:	21fff804 	addi	r7,r4,-32
41114180:	01400804 	movi	r5,32
41114184:	41ced83a 	srl	r7,r8,r7
41114188:	21400a26 	beq	r4,r5,411141b4 <__adddf3+0x8a4>
4111418c:	01401004 	movi	r5,64
41114190:	2909c83a 	sub	r4,r5,r4
41114194:	4108983a 	sll	r4,r8,r4
41114198:	2448b03a 	or	r4,r4,r17
4111419c:	2008c03a 	cmpne	r4,r4,zero
411141a0:	3922b03a 	or	r17,r7,r4
411141a4:	0009883a 	mov	r4,zero
411141a8:	003f8d06 	br	41113fe0 <__reset+0xbb0f3fe0>
411141ac:	0007883a 	mov	r3,zero
411141b0:	003fdd06 	br	41114128 <__reset+0xbb0f4128>
411141b4:	0009883a 	mov	r4,zero
411141b8:	003ff706 	br	41114198 <__reset+0xbb0f4198>

411141bc <__divdf3>:
411141bc:	defff204 	addi	sp,sp,-56
411141c0:	dd400915 	stw	r21,36(sp)
411141c4:	282ad53a 	srli	r21,r5,20
411141c8:	dd000815 	stw	r20,32(sp)
411141cc:	2828d7fa 	srli	r20,r5,31
411141d0:	dc000415 	stw	r16,16(sp)
411141d4:	04000434 	movhi	r16,16
411141d8:	df000c15 	stw	fp,48(sp)
411141dc:	843fffc4 	addi	r16,r16,-1
411141e0:	dfc00d15 	stw	ra,52(sp)
411141e4:	ddc00b15 	stw	r23,44(sp)
411141e8:	dd800a15 	stw	r22,40(sp)
411141ec:	dcc00715 	stw	r19,28(sp)
411141f0:	dc800615 	stw	r18,24(sp)
411141f4:	dc400515 	stw	r17,20(sp)
411141f8:	ad41ffcc 	andi	r21,r21,2047
411141fc:	2c20703a 	and	r16,r5,r16
41114200:	a7003fcc 	andi	fp,r20,255
41114204:	a8006126 	beq	r21,zero,4111438c <__divdf3+0x1d0>
41114208:	0081ffc4 	movi	r2,2047
4111420c:	2025883a 	mov	r18,r4
41114210:	a8803726 	beq	r21,r2,411142f0 <__divdf3+0x134>
41114214:	80800434 	orhi	r2,r16,16
41114218:	100490fa 	slli	r2,r2,3
4111421c:	2020d77a 	srli	r16,r4,29
41114220:	202490fa 	slli	r18,r4,3
41114224:	ad7f0044 	addi	r21,r21,-1023
41114228:	80a0b03a 	or	r16,r16,r2
4111422c:	0027883a 	mov	r19,zero
41114230:	0013883a 	mov	r9,zero
41114234:	3804d53a 	srli	r2,r7,20
41114238:	382cd7fa 	srli	r22,r7,31
4111423c:	04400434 	movhi	r17,16
41114240:	8c7fffc4 	addi	r17,r17,-1
41114244:	1081ffcc 	andi	r2,r2,2047
41114248:	3011883a 	mov	r8,r6
4111424c:	3c62703a 	and	r17,r7,r17
41114250:	b5c03fcc 	andi	r23,r22,255
41114254:	10006c26 	beq	r2,zero,41114408 <__divdf3+0x24c>
41114258:	00c1ffc4 	movi	r3,2047
4111425c:	10c06426 	beq	r2,r3,411143f0 <__divdf3+0x234>
41114260:	88c00434 	orhi	r3,r17,16
41114264:	180690fa 	slli	r3,r3,3
41114268:	3022d77a 	srli	r17,r6,29
4111426c:	301090fa 	slli	r8,r6,3
41114270:	10bf0044 	addi	r2,r2,-1023
41114274:	88e2b03a 	or	r17,r17,r3
41114278:	000f883a 	mov	r7,zero
4111427c:	a58cf03a 	xor	r6,r20,r22
41114280:	3cc8b03a 	or	r4,r7,r19
41114284:	a8abc83a 	sub	r21,r21,r2
41114288:	008003c4 	movi	r2,15
4111428c:	3007883a 	mov	r3,r6
41114290:	34c03fcc 	andi	r19,r6,255
41114294:	11009036 	bltu	r2,r4,411144d8 <__divdf3+0x31c>
41114298:	200890ba 	slli	r4,r4,2
4111429c:	00904474 	movhi	r2,16657
411142a0:	1090ac04 	addi	r2,r2,17072
411142a4:	2089883a 	add	r4,r4,r2
411142a8:	20800017 	ldw	r2,0(r4)
411142ac:	1000683a 	jmp	r2
411142b0:	411144d8 	cmpnei	r4,r8,17683
411142b4:	41114328 	cmpgeui	r4,r8,17676
411142b8:	411144c8 	cmpgei	r4,r8,17683
411142bc:	4111431c 	xori	r4,r8,17676
411142c0:	411144c8 	cmpgei	r4,r8,17683
411142c4:	4111449c 	xori	r4,r8,17682
411142c8:	411144c8 	cmpgei	r4,r8,17683
411142cc:	4111431c 	xori	r4,r8,17676
411142d0:	41114328 	cmpgeui	r4,r8,17676
411142d4:	41114328 	cmpgeui	r4,r8,17676
411142d8:	4111449c 	xori	r4,r8,17682
411142dc:	4111431c 	xori	r4,r8,17676
411142e0:	4111430c 	andi	r4,r8,17676
411142e4:	4111430c 	andi	r4,r8,17676
411142e8:	4111430c 	andi	r4,r8,17676
411142ec:	411147bc 	xorhi	r4,r8,17694
411142f0:	2404b03a 	or	r2,r4,r16
411142f4:	1000661e 	bne	r2,zero,41114490 <__divdf3+0x2d4>
411142f8:	04c00204 	movi	r19,8
411142fc:	0021883a 	mov	r16,zero
41114300:	0025883a 	mov	r18,zero
41114304:	02400084 	movi	r9,2
41114308:	003fca06 	br	41114234 <__reset+0xbb0f4234>
4111430c:	8023883a 	mov	r17,r16
41114310:	9011883a 	mov	r8,r18
41114314:	e02f883a 	mov	r23,fp
41114318:	480f883a 	mov	r7,r9
4111431c:	00800084 	movi	r2,2
41114320:	3881311e 	bne	r7,r2,411147e8 <__divdf3+0x62c>
41114324:	b827883a 	mov	r19,r23
41114328:	98c0004c 	andi	r3,r19,1
4111432c:	0081ffc4 	movi	r2,2047
41114330:	000b883a 	mov	r5,zero
41114334:	0025883a 	mov	r18,zero
41114338:	1004953a 	slli	r2,r2,20
4111433c:	18c03fcc 	andi	r3,r3,255
41114340:	04400434 	movhi	r17,16
41114344:	8c7fffc4 	addi	r17,r17,-1
41114348:	180697fa 	slli	r3,r3,31
4111434c:	2c4a703a 	and	r5,r5,r17
41114350:	288ab03a 	or	r5,r5,r2
41114354:	28c6b03a 	or	r3,r5,r3
41114358:	9005883a 	mov	r2,r18
4111435c:	dfc00d17 	ldw	ra,52(sp)
41114360:	df000c17 	ldw	fp,48(sp)
41114364:	ddc00b17 	ldw	r23,44(sp)
41114368:	dd800a17 	ldw	r22,40(sp)
4111436c:	dd400917 	ldw	r21,36(sp)
41114370:	dd000817 	ldw	r20,32(sp)
41114374:	dcc00717 	ldw	r19,28(sp)
41114378:	dc800617 	ldw	r18,24(sp)
4111437c:	dc400517 	ldw	r17,20(sp)
41114380:	dc000417 	ldw	r16,16(sp)
41114384:	dec00e04 	addi	sp,sp,56
41114388:	f800283a 	ret
4111438c:	2404b03a 	or	r2,r4,r16
41114390:	2027883a 	mov	r19,r4
41114394:	10003926 	beq	r2,zero,4111447c <__divdf3+0x2c0>
41114398:	80012e26 	beq	r16,zero,41114854 <__divdf3+0x698>
4111439c:	8009883a 	mov	r4,r16
411143a0:	d9800315 	stw	r6,12(sp)
411143a4:	d9c00215 	stw	r7,8(sp)
411143a8:	110946c0 	call	4110946c <__clzsi2>
411143ac:	d9800317 	ldw	r6,12(sp)
411143b0:	d9c00217 	ldw	r7,8(sp)
411143b4:	113ffd44 	addi	r4,r2,-11
411143b8:	00c00704 	movi	r3,28
411143bc:	19012116 	blt	r3,r4,41114844 <__divdf3+0x688>
411143c0:	00c00744 	movi	r3,29
411143c4:	147ffe04 	addi	r17,r2,-8
411143c8:	1907c83a 	sub	r3,r3,r4
411143cc:	8460983a 	sll	r16,r16,r17
411143d0:	98c6d83a 	srl	r3,r19,r3
411143d4:	9c64983a 	sll	r18,r19,r17
411143d8:	1c20b03a 	or	r16,r3,r16
411143dc:	1080fcc4 	addi	r2,r2,1011
411143e0:	00abc83a 	sub	r21,zero,r2
411143e4:	0027883a 	mov	r19,zero
411143e8:	0013883a 	mov	r9,zero
411143ec:	003f9106 	br	41114234 <__reset+0xbb0f4234>
411143f0:	3446b03a 	or	r3,r6,r17
411143f4:	18001f1e 	bne	r3,zero,41114474 <__divdf3+0x2b8>
411143f8:	0023883a 	mov	r17,zero
411143fc:	0011883a 	mov	r8,zero
41114400:	01c00084 	movi	r7,2
41114404:	003f9d06 	br	4111427c <__reset+0xbb0f427c>
41114408:	3446b03a 	or	r3,r6,r17
4111440c:	18001526 	beq	r3,zero,41114464 <__divdf3+0x2a8>
41114410:	88011b26 	beq	r17,zero,41114880 <__divdf3+0x6c4>
41114414:	8809883a 	mov	r4,r17
41114418:	d9800315 	stw	r6,12(sp)
4111441c:	da400115 	stw	r9,4(sp)
41114420:	110946c0 	call	4110946c <__clzsi2>
41114424:	d9800317 	ldw	r6,12(sp)
41114428:	da400117 	ldw	r9,4(sp)
4111442c:	113ffd44 	addi	r4,r2,-11
41114430:	00c00704 	movi	r3,28
41114434:	19010e16 	blt	r3,r4,41114870 <__divdf3+0x6b4>
41114438:	00c00744 	movi	r3,29
4111443c:	123ffe04 	addi	r8,r2,-8
41114440:	1907c83a 	sub	r3,r3,r4
41114444:	8a22983a 	sll	r17,r17,r8
41114448:	30c6d83a 	srl	r3,r6,r3
4111444c:	3210983a 	sll	r8,r6,r8
41114450:	1c62b03a 	or	r17,r3,r17
41114454:	1080fcc4 	addi	r2,r2,1011
41114458:	0085c83a 	sub	r2,zero,r2
4111445c:	000f883a 	mov	r7,zero
41114460:	003f8606 	br	4111427c <__reset+0xbb0f427c>
41114464:	0023883a 	mov	r17,zero
41114468:	0011883a 	mov	r8,zero
4111446c:	01c00044 	movi	r7,1
41114470:	003f8206 	br	4111427c <__reset+0xbb0f427c>
41114474:	01c000c4 	movi	r7,3
41114478:	003f8006 	br	4111427c <__reset+0xbb0f427c>
4111447c:	04c00104 	movi	r19,4
41114480:	0021883a 	mov	r16,zero
41114484:	0025883a 	mov	r18,zero
41114488:	02400044 	movi	r9,1
4111448c:	003f6906 	br	41114234 <__reset+0xbb0f4234>
41114490:	04c00304 	movi	r19,12
41114494:	024000c4 	movi	r9,3
41114498:	003f6606 	br	41114234 <__reset+0xbb0f4234>
4111449c:	01400434 	movhi	r5,16
411144a0:	0007883a 	mov	r3,zero
411144a4:	297fffc4 	addi	r5,r5,-1
411144a8:	04bfffc4 	movi	r18,-1
411144ac:	0081ffc4 	movi	r2,2047
411144b0:	003fa106 	br	41114338 <__reset+0xbb0f4338>
411144b4:	00c00044 	movi	r3,1
411144b8:	1887c83a 	sub	r3,r3,r2
411144bc:	01000e04 	movi	r4,56
411144c0:	20c1210e 	bge	r4,r3,41114948 <__divdf3+0x78c>
411144c4:	98c0004c 	andi	r3,r19,1
411144c8:	0005883a 	mov	r2,zero
411144cc:	000b883a 	mov	r5,zero
411144d0:	0025883a 	mov	r18,zero
411144d4:	003f9806 	br	41114338 <__reset+0xbb0f4338>
411144d8:	8c00fd36 	bltu	r17,r16,411148d0 <__divdf3+0x714>
411144dc:	8440fb26 	beq	r16,r17,411148cc <__divdf3+0x710>
411144e0:	8007883a 	mov	r3,r16
411144e4:	ad7fffc4 	addi	r21,r21,-1
411144e8:	0021883a 	mov	r16,zero
411144ec:	4004d63a 	srli	r2,r8,24
411144f0:	8822923a 	slli	r17,r17,8
411144f4:	1809883a 	mov	r4,r3
411144f8:	402c923a 	slli	r22,r8,8
411144fc:	88b8b03a 	or	fp,r17,r2
41114500:	e028d43a 	srli	r20,fp,16
41114504:	d8c00015 	stw	r3,0(sp)
41114508:	e5ffffcc 	andi	r23,fp,65535
4111450c:	a00b883a 	mov	r5,r20
41114510:	11138540 	call	41113854 <__udivsi3>
41114514:	d8c00017 	ldw	r3,0(sp)
41114518:	a00b883a 	mov	r5,r20
4111451c:	d8800315 	stw	r2,12(sp)
41114520:	1809883a 	mov	r4,r3
41114524:	11138b80 	call	411138b8 <__umodsi3>
41114528:	d9800317 	ldw	r6,12(sp)
4111452c:	1006943a 	slli	r3,r2,16
41114530:	9004d43a 	srli	r2,r18,16
41114534:	b9a3383a 	mul	r17,r23,r6
41114538:	10c4b03a 	or	r2,r2,r3
4111453c:	1440062e 	bgeu	r2,r17,41114558 <__divdf3+0x39c>
41114540:	1705883a 	add	r2,r2,fp
41114544:	30ffffc4 	addi	r3,r6,-1
41114548:	1700ee36 	bltu	r2,fp,41114904 <__divdf3+0x748>
4111454c:	1440ed2e 	bgeu	r2,r17,41114904 <__divdf3+0x748>
41114550:	31bfff84 	addi	r6,r6,-2
41114554:	1705883a 	add	r2,r2,fp
41114558:	1463c83a 	sub	r17,r2,r17
4111455c:	a00b883a 	mov	r5,r20
41114560:	8809883a 	mov	r4,r17
41114564:	d9800315 	stw	r6,12(sp)
41114568:	11138540 	call	41113854 <__udivsi3>
4111456c:	a00b883a 	mov	r5,r20
41114570:	8809883a 	mov	r4,r17
41114574:	d8800215 	stw	r2,8(sp)
41114578:	11138b80 	call	411138b8 <__umodsi3>
4111457c:	d9c00217 	ldw	r7,8(sp)
41114580:	1004943a 	slli	r2,r2,16
41114584:	94bfffcc 	andi	r18,r18,65535
41114588:	b9d1383a 	mul	r8,r23,r7
4111458c:	90a4b03a 	or	r18,r18,r2
41114590:	d9800317 	ldw	r6,12(sp)
41114594:	9200062e 	bgeu	r18,r8,411145b0 <__divdf3+0x3f4>
41114598:	9725883a 	add	r18,r18,fp
4111459c:	38bfffc4 	addi	r2,r7,-1
411145a0:	9700d636 	bltu	r18,fp,411148fc <__divdf3+0x740>
411145a4:	9200d52e 	bgeu	r18,r8,411148fc <__divdf3+0x740>
411145a8:	39ffff84 	addi	r7,r7,-2
411145ac:	9725883a 	add	r18,r18,fp
411145b0:	3004943a 	slli	r2,r6,16
411145b4:	b012d43a 	srli	r9,r22,16
411145b8:	b1bfffcc 	andi	r6,r22,65535
411145bc:	11e2b03a 	or	r17,r2,r7
411145c0:	8806d43a 	srli	r3,r17,16
411145c4:	893fffcc 	andi	r4,r17,65535
411145c8:	218b383a 	mul	r5,r4,r6
411145cc:	30c5383a 	mul	r2,r6,r3
411145d0:	2249383a 	mul	r4,r4,r9
411145d4:	280ed43a 	srli	r7,r5,16
411145d8:	9225c83a 	sub	r18,r18,r8
411145dc:	2089883a 	add	r4,r4,r2
411145e0:	3909883a 	add	r4,r7,r4
411145e4:	1a47383a 	mul	r3,r3,r9
411145e8:	2080022e 	bgeu	r4,r2,411145f4 <__divdf3+0x438>
411145ec:	00800074 	movhi	r2,1
411145f0:	1887883a 	add	r3,r3,r2
411145f4:	2004d43a 	srli	r2,r4,16
411145f8:	2008943a 	slli	r4,r4,16
411145fc:	297fffcc 	andi	r5,r5,65535
41114600:	10c7883a 	add	r3,r2,r3
41114604:	2149883a 	add	r4,r4,r5
41114608:	90c0a536 	bltu	r18,r3,411148a0 <__divdf3+0x6e4>
4111460c:	90c0bf26 	beq	r18,r3,4111490c <__divdf3+0x750>
41114610:	90c7c83a 	sub	r3,r18,r3
41114614:	810fc83a 	sub	r7,r16,r4
41114618:	81e5803a 	cmpltu	r18,r16,r7
4111461c:	1ca5c83a 	sub	r18,r3,r18
41114620:	e480c126 	beq	fp,r18,41114928 <__divdf3+0x76c>
41114624:	a00b883a 	mov	r5,r20
41114628:	9009883a 	mov	r4,r18
4111462c:	d9800315 	stw	r6,12(sp)
41114630:	d9c00215 	stw	r7,8(sp)
41114634:	da400115 	stw	r9,4(sp)
41114638:	11138540 	call	41113854 <__udivsi3>
4111463c:	a00b883a 	mov	r5,r20
41114640:	9009883a 	mov	r4,r18
41114644:	d8800015 	stw	r2,0(sp)
41114648:	11138b80 	call	411138b8 <__umodsi3>
4111464c:	d9c00217 	ldw	r7,8(sp)
41114650:	da000017 	ldw	r8,0(sp)
41114654:	1006943a 	slli	r3,r2,16
41114658:	3804d43a 	srli	r2,r7,16
4111465c:	ba21383a 	mul	r16,r23,r8
41114660:	d9800317 	ldw	r6,12(sp)
41114664:	10c4b03a 	or	r2,r2,r3
41114668:	da400117 	ldw	r9,4(sp)
4111466c:	1400062e 	bgeu	r2,r16,41114688 <__divdf3+0x4cc>
41114670:	1705883a 	add	r2,r2,fp
41114674:	40ffffc4 	addi	r3,r8,-1
41114678:	1700ad36 	bltu	r2,fp,41114930 <__divdf3+0x774>
4111467c:	1400ac2e 	bgeu	r2,r16,41114930 <__divdf3+0x774>
41114680:	423fff84 	addi	r8,r8,-2
41114684:	1705883a 	add	r2,r2,fp
41114688:	1421c83a 	sub	r16,r2,r16
4111468c:	a00b883a 	mov	r5,r20
41114690:	8009883a 	mov	r4,r16
41114694:	d9800315 	stw	r6,12(sp)
41114698:	d9c00215 	stw	r7,8(sp)
4111469c:	da000015 	stw	r8,0(sp)
411146a0:	da400115 	stw	r9,4(sp)
411146a4:	11138540 	call	41113854 <__udivsi3>
411146a8:	8009883a 	mov	r4,r16
411146ac:	a00b883a 	mov	r5,r20
411146b0:	1025883a 	mov	r18,r2
411146b4:	11138b80 	call	411138b8 <__umodsi3>
411146b8:	d9c00217 	ldw	r7,8(sp)
411146bc:	1004943a 	slli	r2,r2,16
411146c0:	bcaf383a 	mul	r23,r23,r18
411146c4:	393fffcc 	andi	r4,r7,65535
411146c8:	2088b03a 	or	r4,r4,r2
411146cc:	d9800317 	ldw	r6,12(sp)
411146d0:	da000017 	ldw	r8,0(sp)
411146d4:	da400117 	ldw	r9,4(sp)
411146d8:	25c0062e 	bgeu	r4,r23,411146f4 <__divdf3+0x538>
411146dc:	2709883a 	add	r4,r4,fp
411146e0:	90bfffc4 	addi	r2,r18,-1
411146e4:	27009436 	bltu	r4,fp,41114938 <__divdf3+0x77c>
411146e8:	25c0932e 	bgeu	r4,r23,41114938 <__divdf3+0x77c>
411146ec:	94bfff84 	addi	r18,r18,-2
411146f0:	2709883a 	add	r4,r4,fp
411146f4:	4004943a 	slli	r2,r8,16
411146f8:	25efc83a 	sub	r23,r4,r23
411146fc:	1490b03a 	or	r8,r2,r18
41114700:	4008d43a 	srli	r4,r8,16
41114704:	40ffffcc 	andi	r3,r8,65535
41114708:	30c5383a 	mul	r2,r6,r3
4111470c:	1a47383a 	mul	r3,r3,r9
41114710:	310d383a 	mul	r6,r6,r4
41114714:	100ad43a 	srli	r5,r2,16
41114718:	4913383a 	mul	r9,r9,r4
4111471c:	1987883a 	add	r3,r3,r6
41114720:	28c7883a 	add	r3,r5,r3
41114724:	1980022e 	bgeu	r3,r6,41114730 <__divdf3+0x574>
41114728:	01000074 	movhi	r4,1
4111472c:	4913883a 	add	r9,r9,r4
41114730:	1808d43a 	srli	r4,r3,16
41114734:	1806943a 	slli	r3,r3,16
41114738:	10bfffcc 	andi	r2,r2,65535
4111473c:	2253883a 	add	r9,r4,r9
41114740:	1887883a 	add	r3,r3,r2
41114744:	ba403836 	bltu	r23,r9,41114828 <__divdf3+0x66c>
41114748:	ba403626 	beq	r23,r9,41114824 <__divdf3+0x668>
4111474c:	42000054 	ori	r8,r8,1
41114750:	a880ffc4 	addi	r2,r21,1023
41114754:	00bf570e 	bge	zero,r2,411144b4 <__reset+0xbb0f44b4>
41114758:	40c001cc 	andi	r3,r8,7
4111475c:	18000726 	beq	r3,zero,4111477c <__divdf3+0x5c0>
41114760:	40c003cc 	andi	r3,r8,15
41114764:	01000104 	movi	r4,4
41114768:	19000426 	beq	r3,r4,4111477c <__divdf3+0x5c0>
4111476c:	4107883a 	add	r3,r8,r4
41114770:	1a11803a 	cmpltu	r8,r3,r8
41114774:	8a23883a 	add	r17,r17,r8
41114778:	1811883a 	mov	r8,r3
4111477c:	88c0402c 	andhi	r3,r17,256
41114780:	18000426 	beq	r3,zero,41114794 <__divdf3+0x5d8>
41114784:	00ffc034 	movhi	r3,65280
41114788:	18ffffc4 	addi	r3,r3,-1
4111478c:	a8810004 	addi	r2,r21,1024
41114790:	88e2703a 	and	r17,r17,r3
41114794:	00c1ff84 	movi	r3,2046
41114798:	18bee316 	blt	r3,r2,41114328 <__reset+0xbb0f4328>
4111479c:	8824977a 	slli	r18,r17,29
411147a0:	4010d0fa 	srli	r8,r8,3
411147a4:	8822927a 	slli	r17,r17,9
411147a8:	1081ffcc 	andi	r2,r2,2047
411147ac:	9224b03a 	or	r18,r18,r8
411147b0:	880ad33a 	srli	r5,r17,12
411147b4:	98c0004c 	andi	r3,r19,1
411147b8:	003edf06 	br	41114338 <__reset+0xbb0f4338>
411147bc:	8080022c 	andhi	r2,r16,8
411147c0:	10001226 	beq	r2,zero,4111480c <__divdf3+0x650>
411147c4:	8880022c 	andhi	r2,r17,8
411147c8:	1000101e 	bne	r2,zero,4111480c <__divdf3+0x650>
411147cc:	00800434 	movhi	r2,16
411147d0:	89400234 	orhi	r5,r17,8
411147d4:	10bfffc4 	addi	r2,r2,-1
411147d8:	b007883a 	mov	r3,r22
411147dc:	288a703a 	and	r5,r5,r2
411147e0:	4025883a 	mov	r18,r8
411147e4:	003f3106 	br	411144ac <__reset+0xbb0f44ac>
411147e8:	008000c4 	movi	r2,3
411147ec:	3880a626 	beq	r7,r2,41114a88 <__divdf3+0x8cc>
411147f0:	00800044 	movi	r2,1
411147f4:	3880521e 	bne	r7,r2,41114940 <__divdf3+0x784>
411147f8:	b807883a 	mov	r3,r23
411147fc:	0005883a 	mov	r2,zero
41114800:	000b883a 	mov	r5,zero
41114804:	0025883a 	mov	r18,zero
41114808:	003ecb06 	br	41114338 <__reset+0xbb0f4338>
4111480c:	00800434 	movhi	r2,16
41114810:	81400234 	orhi	r5,r16,8
41114814:	10bfffc4 	addi	r2,r2,-1
41114818:	a007883a 	mov	r3,r20
4111481c:	288a703a 	and	r5,r5,r2
41114820:	003f2206 	br	411144ac <__reset+0xbb0f44ac>
41114824:	183fca26 	beq	r3,zero,41114750 <__reset+0xbb0f4750>
41114828:	e5ef883a 	add	r23,fp,r23
4111482c:	40bfffc4 	addi	r2,r8,-1
41114830:	bf00392e 	bgeu	r23,fp,41114918 <__divdf3+0x75c>
41114834:	1011883a 	mov	r8,r2
41114838:	ba7fc41e 	bne	r23,r9,4111474c <__reset+0xbb0f474c>
4111483c:	b0ffc31e 	bne	r22,r3,4111474c <__reset+0xbb0f474c>
41114840:	003fc306 	br	41114750 <__reset+0xbb0f4750>
41114844:	143ff604 	addi	r16,r2,-40
41114848:	9c20983a 	sll	r16,r19,r16
4111484c:	0025883a 	mov	r18,zero
41114850:	003ee206 	br	411143dc <__reset+0xbb0f43dc>
41114854:	d9800315 	stw	r6,12(sp)
41114858:	d9c00215 	stw	r7,8(sp)
4111485c:	110946c0 	call	4110946c <__clzsi2>
41114860:	10800804 	addi	r2,r2,32
41114864:	d9c00217 	ldw	r7,8(sp)
41114868:	d9800317 	ldw	r6,12(sp)
4111486c:	003ed106 	br	411143b4 <__reset+0xbb0f43b4>
41114870:	147ff604 	addi	r17,r2,-40
41114874:	3462983a 	sll	r17,r6,r17
41114878:	0011883a 	mov	r8,zero
4111487c:	003ef506 	br	41114454 <__reset+0xbb0f4454>
41114880:	3009883a 	mov	r4,r6
41114884:	d9800315 	stw	r6,12(sp)
41114888:	da400115 	stw	r9,4(sp)
4111488c:	110946c0 	call	4110946c <__clzsi2>
41114890:	10800804 	addi	r2,r2,32
41114894:	da400117 	ldw	r9,4(sp)
41114898:	d9800317 	ldw	r6,12(sp)
4111489c:	003ee306 	br	4111442c <__reset+0xbb0f442c>
411148a0:	85a1883a 	add	r16,r16,r22
411148a4:	8585803a 	cmpltu	r2,r16,r22
411148a8:	1705883a 	add	r2,r2,fp
411148ac:	14a5883a 	add	r18,r2,r18
411148b0:	88bfffc4 	addi	r2,r17,-1
411148b4:	e4800c2e 	bgeu	fp,r18,411148e8 <__divdf3+0x72c>
411148b8:	90c03e36 	bltu	r18,r3,411149b4 <__divdf3+0x7f8>
411148bc:	1c806926 	beq	r3,r18,41114a64 <__divdf3+0x8a8>
411148c0:	90c7c83a 	sub	r3,r18,r3
411148c4:	1023883a 	mov	r17,r2
411148c8:	003f5206 	br	41114614 <__reset+0xbb0f4614>
411148cc:	923f0436 	bltu	r18,r8,411144e0 <__reset+0xbb0f44e0>
411148d0:	800897fa 	slli	r4,r16,31
411148d4:	9004d07a 	srli	r2,r18,1
411148d8:	8006d07a 	srli	r3,r16,1
411148dc:	902097fa 	slli	r16,r18,31
411148e0:	20a4b03a 	or	r18,r4,r2
411148e4:	003f0106 	br	411144ec <__reset+0xbb0f44ec>
411148e8:	e4bff51e 	bne	fp,r18,411148c0 <__reset+0xbb0f48c0>
411148ec:	85bff22e 	bgeu	r16,r22,411148b8 <__reset+0xbb0f48b8>
411148f0:	e0c7c83a 	sub	r3,fp,r3
411148f4:	1023883a 	mov	r17,r2
411148f8:	003f4606 	br	41114614 <__reset+0xbb0f4614>
411148fc:	100f883a 	mov	r7,r2
41114900:	003f2b06 	br	411145b0 <__reset+0xbb0f45b0>
41114904:	180d883a 	mov	r6,r3
41114908:	003f1306 	br	41114558 <__reset+0xbb0f4558>
4111490c:	813fe436 	bltu	r16,r4,411148a0 <__reset+0xbb0f48a0>
41114910:	0007883a 	mov	r3,zero
41114914:	003f3f06 	br	41114614 <__reset+0xbb0f4614>
41114918:	ba402c36 	bltu	r23,r9,411149cc <__divdf3+0x810>
4111491c:	4dc05426 	beq	r9,r23,41114a70 <__divdf3+0x8b4>
41114920:	1011883a 	mov	r8,r2
41114924:	003f8906 	br	4111474c <__reset+0xbb0f474c>
41114928:	023fffc4 	movi	r8,-1
4111492c:	003f8806 	br	41114750 <__reset+0xbb0f4750>
41114930:	1811883a 	mov	r8,r3
41114934:	003f5406 	br	41114688 <__reset+0xbb0f4688>
41114938:	1025883a 	mov	r18,r2
4111493c:	003f6d06 	br	411146f4 <__reset+0xbb0f46f4>
41114940:	b827883a 	mov	r19,r23
41114944:	003f8206 	br	41114750 <__reset+0xbb0f4750>
41114948:	010007c4 	movi	r4,31
4111494c:	20c02616 	blt	r4,r3,411149e8 <__divdf3+0x82c>
41114950:	00800804 	movi	r2,32
41114954:	10c5c83a 	sub	r2,r2,r3
41114958:	888a983a 	sll	r5,r17,r2
4111495c:	40c8d83a 	srl	r4,r8,r3
41114960:	4084983a 	sll	r2,r8,r2
41114964:	88e2d83a 	srl	r17,r17,r3
41114968:	2906b03a 	or	r3,r5,r4
4111496c:	1004c03a 	cmpne	r2,r2,zero
41114970:	1886b03a 	or	r3,r3,r2
41114974:	188001cc 	andi	r2,r3,7
41114978:	10000726 	beq	r2,zero,41114998 <__divdf3+0x7dc>
4111497c:	188003cc 	andi	r2,r3,15
41114980:	01000104 	movi	r4,4
41114984:	11000426 	beq	r2,r4,41114998 <__divdf3+0x7dc>
41114988:	1805883a 	mov	r2,r3
4111498c:	10c00104 	addi	r3,r2,4
41114990:	1885803a 	cmpltu	r2,r3,r2
41114994:	88a3883a 	add	r17,r17,r2
41114998:	8880202c 	andhi	r2,r17,128
4111499c:	10002726 	beq	r2,zero,41114a3c <__divdf3+0x880>
411149a0:	98c0004c 	andi	r3,r19,1
411149a4:	00800044 	movi	r2,1
411149a8:	000b883a 	mov	r5,zero
411149ac:	0025883a 	mov	r18,zero
411149b0:	003e6106 	br	41114338 <__reset+0xbb0f4338>
411149b4:	85a1883a 	add	r16,r16,r22
411149b8:	8585803a 	cmpltu	r2,r16,r22
411149bc:	1705883a 	add	r2,r2,fp
411149c0:	14a5883a 	add	r18,r2,r18
411149c4:	8c7fff84 	addi	r17,r17,-2
411149c8:	003f1106 	br	41114610 <__reset+0xbb0f4610>
411149cc:	b589883a 	add	r4,r22,r22
411149d0:	25ad803a 	cmpltu	r22,r4,r22
411149d4:	b739883a 	add	fp,r22,fp
411149d8:	40bfff84 	addi	r2,r8,-2
411149dc:	bf2f883a 	add	r23,r23,fp
411149e0:	202d883a 	mov	r22,r4
411149e4:	003f9306 	br	41114834 <__reset+0xbb0f4834>
411149e8:	013ff844 	movi	r4,-31
411149ec:	2085c83a 	sub	r2,r4,r2
411149f0:	8888d83a 	srl	r4,r17,r2
411149f4:	00800804 	movi	r2,32
411149f8:	18802126 	beq	r3,r2,41114a80 <__divdf3+0x8c4>
411149fc:	00801004 	movi	r2,64
41114a00:	10c5c83a 	sub	r2,r2,r3
41114a04:	8884983a 	sll	r2,r17,r2
41114a08:	1204b03a 	or	r2,r2,r8
41114a0c:	1004c03a 	cmpne	r2,r2,zero
41114a10:	2084b03a 	or	r2,r4,r2
41114a14:	144001cc 	andi	r17,r2,7
41114a18:	88000d1e 	bne	r17,zero,41114a50 <__divdf3+0x894>
41114a1c:	000b883a 	mov	r5,zero
41114a20:	1024d0fa 	srli	r18,r2,3
41114a24:	98c0004c 	andi	r3,r19,1
41114a28:	0005883a 	mov	r2,zero
41114a2c:	9464b03a 	or	r18,r18,r17
41114a30:	003e4106 	br	41114338 <__reset+0xbb0f4338>
41114a34:	1007883a 	mov	r3,r2
41114a38:	0023883a 	mov	r17,zero
41114a3c:	880a927a 	slli	r5,r17,9
41114a40:	1805883a 	mov	r2,r3
41114a44:	8822977a 	slli	r17,r17,29
41114a48:	280ad33a 	srli	r5,r5,12
41114a4c:	003ff406 	br	41114a20 <__reset+0xbb0f4a20>
41114a50:	10c003cc 	andi	r3,r2,15
41114a54:	01000104 	movi	r4,4
41114a58:	193ff626 	beq	r3,r4,41114a34 <__reset+0xbb0f4a34>
41114a5c:	0023883a 	mov	r17,zero
41114a60:	003fca06 	br	4111498c <__reset+0xbb0f498c>
41114a64:	813fd336 	bltu	r16,r4,411149b4 <__reset+0xbb0f49b4>
41114a68:	1023883a 	mov	r17,r2
41114a6c:	003fa806 	br	41114910 <__reset+0xbb0f4910>
41114a70:	b0ffd636 	bltu	r22,r3,411149cc <__reset+0xbb0f49cc>
41114a74:	1011883a 	mov	r8,r2
41114a78:	b0ff341e 	bne	r22,r3,4111474c <__reset+0xbb0f474c>
41114a7c:	003f3406 	br	41114750 <__reset+0xbb0f4750>
41114a80:	0005883a 	mov	r2,zero
41114a84:	003fe006 	br	41114a08 <__reset+0xbb0f4a08>
41114a88:	00800434 	movhi	r2,16
41114a8c:	89400234 	orhi	r5,r17,8
41114a90:	10bfffc4 	addi	r2,r2,-1
41114a94:	b807883a 	mov	r3,r23
41114a98:	288a703a 	and	r5,r5,r2
41114a9c:	4025883a 	mov	r18,r8
41114aa0:	003e8206 	br	411144ac <__reset+0xbb0f44ac>

41114aa4 <__eqdf2>:
41114aa4:	2804d53a 	srli	r2,r5,20
41114aa8:	3806d53a 	srli	r3,r7,20
41114aac:	02000434 	movhi	r8,16
41114ab0:	423fffc4 	addi	r8,r8,-1
41114ab4:	1081ffcc 	andi	r2,r2,2047
41114ab8:	0281ffc4 	movi	r10,2047
41114abc:	2a12703a 	and	r9,r5,r8
41114ac0:	18c1ffcc 	andi	r3,r3,2047
41114ac4:	3a10703a 	and	r8,r7,r8
41114ac8:	280ad7fa 	srli	r5,r5,31
41114acc:	380ed7fa 	srli	r7,r7,31
41114ad0:	12801026 	beq	r2,r10,41114b14 <__eqdf2+0x70>
41114ad4:	0281ffc4 	movi	r10,2047
41114ad8:	1a800a26 	beq	r3,r10,41114b04 <__eqdf2+0x60>
41114adc:	10c00226 	beq	r2,r3,41114ae8 <__eqdf2+0x44>
41114ae0:	00800044 	movi	r2,1
41114ae4:	f800283a 	ret
41114ae8:	4a3ffd1e 	bne	r9,r8,41114ae0 <__reset+0xbb0f4ae0>
41114aec:	21bffc1e 	bne	r4,r6,41114ae0 <__reset+0xbb0f4ae0>
41114af0:	29c00c26 	beq	r5,r7,41114b24 <__eqdf2+0x80>
41114af4:	103ffa1e 	bne	r2,zero,41114ae0 <__reset+0xbb0f4ae0>
41114af8:	2244b03a 	or	r2,r4,r9
41114afc:	1004c03a 	cmpne	r2,r2,zero
41114b00:	f800283a 	ret
41114b04:	3214b03a 	or	r10,r6,r8
41114b08:	503ff426 	beq	r10,zero,41114adc <__reset+0xbb0f4adc>
41114b0c:	00800044 	movi	r2,1
41114b10:	f800283a 	ret
41114b14:	2254b03a 	or	r10,r4,r9
41114b18:	503fee26 	beq	r10,zero,41114ad4 <__reset+0xbb0f4ad4>
41114b1c:	00800044 	movi	r2,1
41114b20:	f800283a 	ret
41114b24:	0005883a 	mov	r2,zero
41114b28:	f800283a 	ret

41114b2c <__gedf2>:
41114b2c:	2804d53a 	srli	r2,r5,20
41114b30:	3806d53a 	srli	r3,r7,20
41114b34:	02000434 	movhi	r8,16
41114b38:	423fffc4 	addi	r8,r8,-1
41114b3c:	1081ffcc 	andi	r2,r2,2047
41114b40:	0241ffc4 	movi	r9,2047
41114b44:	2a14703a 	and	r10,r5,r8
41114b48:	18c1ffcc 	andi	r3,r3,2047
41114b4c:	3a10703a 	and	r8,r7,r8
41114b50:	280ad7fa 	srli	r5,r5,31
41114b54:	380ed7fa 	srli	r7,r7,31
41114b58:	12401d26 	beq	r2,r9,41114bd0 <__gedf2+0xa4>
41114b5c:	0241ffc4 	movi	r9,2047
41114b60:	1a401226 	beq	r3,r9,41114bac <__gedf2+0x80>
41114b64:	1000081e 	bne	r2,zero,41114b88 <__gedf2+0x5c>
41114b68:	2296b03a 	or	r11,r4,r10
41114b6c:	5813003a 	cmpeq	r9,r11,zero
41114b70:	1800091e 	bne	r3,zero,41114b98 <__gedf2+0x6c>
41114b74:	3218b03a 	or	r12,r6,r8
41114b78:	6000071e 	bne	r12,zero,41114b98 <__gedf2+0x6c>
41114b7c:	0005883a 	mov	r2,zero
41114b80:	5800101e 	bne	r11,zero,41114bc4 <__gedf2+0x98>
41114b84:	f800283a 	ret
41114b88:	18000c1e 	bne	r3,zero,41114bbc <__gedf2+0x90>
41114b8c:	3212b03a 	or	r9,r6,r8
41114b90:	48000c26 	beq	r9,zero,41114bc4 <__gedf2+0x98>
41114b94:	0013883a 	mov	r9,zero
41114b98:	39c03fcc 	andi	r7,r7,255
41114b9c:	48000826 	beq	r9,zero,41114bc0 <__gedf2+0x94>
41114ba0:	38000926 	beq	r7,zero,41114bc8 <__gedf2+0x9c>
41114ba4:	00800044 	movi	r2,1
41114ba8:	f800283a 	ret
41114bac:	3212b03a 	or	r9,r6,r8
41114bb0:	483fec26 	beq	r9,zero,41114b64 <__reset+0xbb0f4b64>
41114bb4:	00bfff84 	movi	r2,-2
41114bb8:	f800283a 	ret
41114bbc:	39c03fcc 	andi	r7,r7,255
41114bc0:	29c00626 	beq	r5,r7,41114bdc <__gedf2+0xb0>
41114bc4:	283ff726 	beq	r5,zero,41114ba4 <__reset+0xbb0f4ba4>
41114bc8:	00bfffc4 	movi	r2,-1
41114bcc:	f800283a 	ret
41114bd0:	2292b03a 	or	r9,r4,r10
41114bd4:	483fe126 	beq	r9,zero,41114b5c <__reset+0xbb0f4b5c>
41114bd8:	003ff606 	br	41114bb4 <__reset+0xbb0f4bb4>
41114bdc:	18bff916 	blt	r3,r2,41114bc4 <__reset+0xbb0f4bc4>
41114be0:	10c00316 	blt	r2,r3,41114bf0 <__gedf2+0xc4>
41114be4:	42bff736 	bltu	r8,r10,41114bc4 <__reset+0xbb0f4bc4>
41114be8:	52000326 	beq	r10,r8,41114bf8 <__gedf2+0xcc>
41114bec:	5200042e 	bgeu	r10,r8,41114c00 <__gedf2+0xd4>
41114bf0:	283fec1e 	bne	r5,zero,41114ba4 <__reset+0xbb0f4ba4>
41114bf4:	003ff406 	br	41114bc8 <__reset+0xbb0f4bc8>
41114bf8:	313ff236 	bltu	r6,r4,41114bc4 <__reset+0xbb0f4bc4>
41114bfc:	21bffc36 	bltu	r4,r6,41114bf0 <__reset+0xbb0f4bf0>
41114c00:	0005883a 	mov	r2,zero
41114c04:	f800283a 	ret

41114c08 <__ledf2>:
41114c08:	2804d53a 	srli	r2,r5,20
41114c0c:	3810d53a 	srli	r8,r7,20
41114c10:	00c00434 	movhi	r3,16
41114c14:	18ffffc4 	addi	r3,r3,-1
41114c18:	1081ffcc 	andi	r2,r2,2047
41114c1c:	0241ffc4 	movi	r9,2047
41114c20:	28d4703a 	and	r10,r5,r3
41114c24:	4201ffcc 	andi	r8,r8,2047
41114c28:	38c6703a 	and	r3,r7,r3
41114c2c:	280ad7fa 	srli	r5,r5,31
41114c30:	380ed7fa 	srli	r7,r7,31
41114c34:	12401f26 	beq	r2,r9,41114cb4 <__ledf2+0xac>
41114c38:	0241ffc4 	movi	r9,2047
41114c3c:	42401426 	beq	r8,r9,41114c90 <__ledf2+0x88>
41114c40:	1000091e 	bne	r2,zero,41114c68 <__ledf2+0x60>
41114c44:	2296b03a 	or	r11,r4,r10
41114c48:	5813003a 	cmpeq	r9,r11,zero
41114c4c:	29403fcc 	andi	r5,r5,255
41114c50:	40000a1e 	bne	r8,zero,41114c7c <__ledf2+0x74>
41114c54:	30d8b03a 	or	r12,r6,r3
41114c58:	6000081e 	bne	r12,zero,41114c7c <__ledf2+0x74>
41114c5c:	0005883a 	mov	r2,zero
41114c60:	5800111e 	bne	r11,zero,41114ca8 <__ledf2+0xa0>
41114c64:	f800283a 	ret
41114c68:	29403fcc 	andi	r5,r5,255
41114c6c:	40000c1e 	bne	r8,zero,41114ca0 <__ledf2+0x98>
41114c70:	30d2b03a 	or	r9,r6,r3
41114c74:	48000c26 	beq	r9,zero,41114ca8 <__ledf2+0xa0>
41114c78:	0013883a 	mov	r9,zero
41114c7c:	39c03fcc 	andi	r7,r7,255
41114c80:	48000826 	beq	r9,zero,41114ca4 <__ledf2+0x9c>
41114c84:	38001126 	beq	r7,zero,41114ccc <__ledf2+0xc4>
41114c88:	00800044 	movi	r2,1
41114c8c:	f800283a 	ret
41114c90:	30d2b03a 	or	r9,r6,r3
41114c94:	483fea26 	beq	r9,zero,41114c40 <__reset+0xbb0f4c40>
41114c98:	00800084 	movi	r2,2
41114c9c:	f800283a 	ret
41114ca0:	39c03fcc 	andi	r7,r7,255
41114ca4:	39400726 	beq	r7,r5,41114cc4 <__ledf2+0xbc>
41114ca8:	2800081e 	bne	r5,zero,41114ccc <__ledf2+0xc4>
41114cac:	00800044 	movi	r2,1
41114cb0:	f800283a 	ret
41114cb4:	2292b03a 	or	r9,r4,r10
41114cb8:	483fdf26 	beq	r9,zero,41114c38 <__reset+0xbb0f4c38>
41114cbc:	00800084 	movi	r2,2
41114cc0:	f800283a 	ret
41114cc4:	4080030e 	bge	r8,r2,41114cd4 <__ledf2+0xcc>
41114cc8:	383fef26 	beq	r7,zero,41114c88 <__reset+0xbb0f4c88>
41114ccc:	00bfffc4 	movi	r2,-1
41114cd0:	f800283a 	ret
41114cd4:	123feb16 	blt	r2,r8,41114c84 <__reset+0xbb0f4c84>
41114cd8:	1abff336 	bltu	r3,r10,41114ca8 <__reset+0xbb0f4ca8>
41114cdc:	50c00326 	beq	r10,r3,41114cec <__ledf2+0xe4>
41114ce0:	50c0042e 	bgeu	r10,r3,41114cf4 <__ledf2+0xec>
41114ce4:	283fe81e 	bne	r5,zero,41114c88 <__reset+0xbb0f4c88>
41114ce8:	003ff806 	br	41114ccc <__reset+0xbb0f4ccc>
41114cec:	313fee36 	bltu	r6,r4,41114ca8 <__reset+0xbb0f4ca8>
41114cf0:	21bffc36 	bltu	r4,r6,41114ce4 <__reset+0xbb0f4ce4>
41114cf4:	0005883a 	mov	r2,zero
41114cf8:	f800283a 	ret

41114cfc <__subdf3>:
41114cfc:	02000434 	movhi	r8,16
41114d00:	423fffc4 	addi	r8,r8,-1
41114d04:	defffb04 	addi	sp,sp,-20
41114d08:	2a14703a 	and	r10,r5,r8
41114d0c:	3812d53a 	srli	r9,r7,20
41114d10:	3a10703a 	and	r8,r7,r8
41114d14:	2006d77a 	srli	r3,r4,29
41114d18:	3004d77a 	srli	r2,r6,29
41114d1c:	dc000015 	stw	r16,0(sp)
41114d20:	501490fa 	slli	r10,r10,3
41114d24:	2820d53a 	srli	r16,r5,20
41114d28:	401090fa 	slli	r8,r8,3
41114d2c:	dc800215 	stw	r18,8(sp)
41114d30:	dc400115 	stw	r17,4(sp)
41114d34:	dfc00415 	stw	ra,16(sp)
41114d38:	202290fa 	slli	r17,r4,3
41114d3c:	dcc00315 	stw	r19,12(sp)
41114d40:	4a41ffcc 	andi	r9,r9,2047
41114d44:	0101ffc4 	movi	r4,2047
41114d48:	2824d7fa 	srli	r18,r5,31
41114d4c:	8401ffcc 	andi	r16,r16,2047
41114d50:	50c6b03a 	or	r3,r10,r3
41114d54:	380ed7fa 	srli	r7,r7,31
41114d58:	408ab03a 	or	r5,r8,r2
41114d5c:	300c90fa 	slli	r6,r6,3
41114d60:	49009626 	beq	r9,r4,41114fbc <__subdf3+0x2c0>
41114d64:	39c0005c 	xori	r7,r7,1
41114d68:	8245c83a 	sub	r2,r16,r9
41114d6c:	3c807426 	beq	r7,r18,41114f40 <__subdf3+0x244>
41114d70:	0080af0e 	bge	zero,r2,41115030 <__subdf3+0x334>
41114d74:	48002a1e 	bne	r9,zero,41114e20 <__subdf3+0x124>
41114d78:	2988b03a 	or	r4,r5,r6
41114d7c:	20009a1e 	bne	r4,zero,41114fe8 <__subdf3+0x2ec>
41114d80:	888001cc 	andi	r2,r17,7
41114d84:	10000726 	beq	r2,zero,41114da4 <__subdf3+0xa8>
41114d88:	888003cc 	andi	r2,r17,15
41114d8c:	01000104 	movi	r4,4
41114d90:	11000426 	beq	r2,r4,41114da4 <__subdf3+0xa8>
41114d94:	890b883a 	add	r5,r17,r4
41114d98:	2c63803a 	cmpltu	r17,r5,r17
41114d9c:	1c47883a 	add	r3,r3,r17
41114da0:	2823883a 	mov	r17,r5
41114da4:	1880202c 	andhi	r2,r3,128
41114da8:	10005926 	beq	r2,zero,41114f10 <__subdf3+0x214>
41114dac:	84000044 	addi	r16,r16,1
41114db0:	0081ffc4 	movi	r2,2047
41114db4:	8080be26 	beq	r16,r2,411150b0 <__subdf3+0x3b4>
41114db8:	017fe034 	movhi	r5,65408
41114dbc:	297fffc4 	addi	r5,r5,-1
41114dc0:	1946703a 	and	r3,r3,r5
41114dc4:	1804977a 	slli	r2,r3,29
41114dc8:	1806927a 	slli	r3,r3,9
41114dcc:	8822d0fa 	srli	r17,r17,3
41114dd0:	8401ffcc 	andi	r16,r16,2047
41114dd4:	180ad33a 	srli	r5,r3,12
41114dd8:	9100004c 	andi	r4,r18,1
41114ddc:	1444b03a 	or	r2,r2,r17
41114de0:	80c1ffcc 	andi	r3,r16,2047
41114de4:	1820953a 	slli	r16,r3,20
41114de8:	20c03fcc 	andi	r3,r4,255
41114dec:	180897fa 	slli	r4,r3,31
41114df0:	00c00434 	movhi	r3,16
41114df4:	18ffffc4 	addi	r3,r3,-1
41114df8:	28c6703a 	and	r3,r5,r3
41114dfc:	1c06b03a 	or	r3,r3,r16
41114e00:	1906b03a 	or	r3,r3,r4
41114e04:	dfc00417 	ldw	ra,16(sp)
41114e08:	dcc00317 	ldw	r19,12(sp)
41114e0c:	dc800217 	ldw	r18,8(sp)
41114e10:	dc400117 	ldw	r17,4(sp)
41114e14:	dc000017 	ldw	r16,0(sp)
41114e18:	dec00504 	addi	sp,sp,20
41114e1c:	f800283a 	ret
41114e20:	0101ffc4 	movi	r4,2047
41114e24:	813fd626 	beq	r16,r4,41114d80 <__reset+0xbb0f4d80>
41114e28:	29402034 	orhi	r5,r5,128
41114e2c:	01000e04 	movi	r4,56
41114e30:	2080a316 	blt	r4,r2,411150c0 <__subdf3+0x3c4>
41114e34:	010007c4 	movi	r4,31
41114e38:	2080c616 	blt	r4,r2,41115154 <__subdf3+0x458>
41114e3c:	01000804 	movi	r4,32
41114e40:	2089c83a 	sub	r4,r4,r2
41114e44:	2910983a 	sll	r8,r5,r4
41114e48:	308ed83a 	srl	r7,r6,r2
41114e4c:	3108983a 	sll	r4,r6,r4
41114e50:	2884d83a 	srl	r2,r5,r2
41114e54:	41ccb03a 	or	r6,r8,r7
41114e58:	2008c03a 	cmpne	r4,r4,zero
41114e5c:	310cb03a 	or	r6,r6,r4
41114e60:	898dc83a 	sub	r6,r17,r6
41114e64:	89a3803a 	cmpltu	r17,r17,r6
41114e68:	1887c83a 	sub	r3,r3,r2
41114e6c:	1c47c83a 	sub	r3,r3,r17
41114e70:	3023883a 	mov	r17,r6
41114e74:	1880202c 	andhi	r2,r3,128
41114e78:	10002326 	beq	r2,zero,41114f08 <__subdf3+0x20c>
41114e7c:	04c02034 	movhi	r19,128
41114e80:	9cffffc4 	addi	r19,r19,-1
41114e84:	1ce6703a 	and	r19,r3,r19
41114e88:	98007a26 	beq	r19,zero,41115074 <__subdf3+0x378>
41114e8c:	9809883a 	mov	r4,r19
41114e90:	110946c0 	call	4110946c <__clzsi2>
41114e94:	113ffe04 	addi	r4,r2,-8
41114e98:	00c007c4 	movi	r3,31
41114e9c:	19007b16 	blt	r3,r4,4111508c <__subdf3+0x390>
41114ea0:	00800804 	movi	r2,32
41114ea4:	1105c83a 	sub	r2,r2,r4
41114ea8:	8884d83a 	srl	r2,r17,r2
41114eac:	9906983a 	sll	r3,r19,r4
41114eb0:	8922983a 	sll	r17,r17,r4
41114eb4:	10c4b03a 	or	r2,r2,r3
41114eb8:	24007816 	blt	r4,r16,4111509c <__subdf3+0x3a0>
41114ebc:	2421c83a 	sub	r16,r4,r16
41114ec0:	80c00044 	addi	r3,r16,1
41114ec4:	010007c4 	movi	r4,31
41114ec8:	20c09516 	blt	r4,r3,41115120 <__subdf3+0x424>
41114ecc:	01400804 	movi	r5,32
41114ed0:	28cbc83a 	sub	r5,r5,r3
41114ed4:	88c8d83a 	srl	r4,r17,r3
41114ed8:	8962983a 	sll	r17,r17,r5
41114edc:	114a983a 	sll	r5,r2,r5
41114ee0:	10c6d83a 	srl	r3,r2,r3
41114ee4:	8804c03a 	cmpne	r2,r17,zero
41114ee8:	290ab03a 	or	r5,r5,r4
41114eec:	28a2b03a 	or	r17,r5,r2
41114ef0:	0021883a 	mov	r16,zero
41114ef4:	003fa206 	br	41114d80 <__reset+0xbb0f4d80>
41114ef8:	2090b03a 	or	r8,r4,r2
41114efc:	40018e26 	beq	r8,zero,41115538 <__subdf3+0x83c>
41114f00:	1007883a 	mov	r3,r2
41114f04:	2023883a 	mov	r17,r4
41114f08:	888001cc 	andi	r2,r17,7
41114f0c:	103f9e1e 	bne	r2,zero,41114d88 <__reset+0xbb0f4d88>
41114f10:	1804977a 	slli	r2,r3,29
41114f14:	8822d0fa 	srli	r17,r17,3
41114f18:	1810d0fa 	srli	r8,r3,3
41114f1c:	9100004c 	andi	r4,r18,1
41114f20:	1444b03a 	or	r2,r2,r17
41114f24:	00c1ffc4 	movi	r3,2047
41114f28:	80c02826 	beq	r16,r3,41114fcc <__subdf3+0x2d0>
41114f2c:	01400434 	movhi	r5,16
41114f30:	297fffc4 	addi	r5,r5,-1
41114f34:	80e0703a 	and	r16,r16,r3
41114f38:	414a703a 	and	r5,r8,r5
41114f3c:	003fa806 	br	41114de0 <__reset+0xbb0f4de0>
41114f40:	0080630e 	bge	zero,r2,411150d0 <__subdf3+0x3d4>
41114f44:	48003026 	beq	r9,zero,41115008 <__subdf3+0x30c>
41114f48:	0101ffc4 	movi	r4,2047
41114f4c:	813f8c26 	beq	r16,r4,41114d80 <__reset+0xbb0f4d80>
41114f50:	29402034 	orhi	r5,r5,128
41114f54:	01000e04 	movi	r4,56
41114f58:	2080a90e 	bge	r4,r2,41115200 <__subdf3+0x504>
41114f5c:	298cb03a 	or	r6,r5,r6
41114f60:	3012c03a 	cmpne	r9,r6,zero
41114f64:	0005883a 	mov	r2,zero
41114f68:	4c53883a 	add	r9,r9,r17
41114f6c:	4c63803a 	cmpltu	r17,r9,r17
41114f70:	10c7883a 	add	r3,r2,r3
41114f74:	88c7883a 	add	r3,r17,r3
41114f78:	4823883a 	mov	r17,r9
41114f7c:	1880202c 	andhi	r2,r3,128
41114f80:	1000d026 	beq	r2,zero,411152c4 <__subdf3+0x5c8>
41114f84:	84000044 	addi	r16,r16,1
41114f88:	0081ffc4 	movi	r2,2047
41114f8c:	8080fe26 	beq	r16,r2,41115388 <__subdf3+0x68c>
41114f90:	00bfe034 	movhi	r2,65408
41114f94:	10bfffc4 	addi	r2,r2,-1
41114f98:	1886703a 	and	r3,r3,r2
41114f9c:	880ad07a 	srli	r5,r17,1
41114fa0:	180497fa 	slli	r2,r3,31
41114fa4:	8900004c 	andi	r4,r17,1
41114fa8:	2922b03a 	or	r17,r5,r4
41114fac:	1806d07a 	srli	r3,r3,1
41114fb0:	1462b03a 	or	r17,r2,r17
41114fb4:	3825883a 	mov	r18,r7
41114fb8:	003f7106 	br	41114d80 <__reset+0xbb0f4d80>
41114fbc:	2984b03a 	or	r2,r5,r6
41114fc0:	103f6826 	beq	r2,zero,41114d64 <__reset+0xbb0f4d64>
41114fc4:	39c03fcc 	andi	r7,r7,255
41114fc8:	003f6706 	br	41114d68 <__reset+0xbb0f4d68>
41114fcc:	4086b03a 	or	r3,r8,r2
41114fd0:	18015226 	beq	r3,zero,4111551c <__subdf3+0x820>
41114fd4:	00c00434 	movhi	r3,16
41114fd8:	41400234 	orhi	r5,r8,8
41114fdc:	18ffffc4 	addi	r3,r3,-1
41114fe0:	28ca703a 	and	r5,r5,r3
41114fe4:	003f7e06 	br	41114de0 <__reset+0xbb0f4de0>
41114fe8:	10bfffc4 	addi	r2,r2,-1
41114fec:	1000491e 	bne	r2,zero,41115114 <__subdf3+0x418>
41114ff0:	898fc83a 	sub	r7,r17,r6
41114ff4:	89e3803a 	cmpltu	r17,r17,r7
41114ff8:	1947c83a 	sub	r3,r3,r5
41114ffc:	1c47c83a 	sub	r3,r3,r17
41115000:	3823883a 	mov	r17,r7
41115004:	003f9b06 	br	41114e74 <__reset+0xbb0f4e74>
41115008:	2988b03a 	or	r4,r5,r6
4111500c:	203f5c26 	beq	r4,zero,41114d80 <__reset+0xbb0f4d80>
41115010:	10bfffc4 	addi	r2,r2,-1
41115014:	1000931e 	bne	r2,zero,41115264 <__subdf3+0x568>
41115018:	898d883a 	add	r6,r17,r6
4111501c:	3463803a 	cmpltu	r17,r6,r17
41115020:	1947883a 	add	r3,r3,r5
41115024:	88c7883a 	add	r3,r17,r3
41115028:	3023883a 	mov	r17,r6
4111502c:	003fd306 	br	41114f7c <__reset+0xbb0f4f7c>
41115030:	1000541e 	bne	r2,zero,41115184 <__subdf3+0x488>
41115034:	80800044 	addi	r2,r16,1
41115038:	1081ffcc 	andi	r2,r2,2047
4111503c:	01000044 	movi	r4,1
41115040:	2080a20e 	bge	r4,r2,411152cc <__subdf3+0x5d0>
41115044:	8989c83a 	sub	r4,r17,r6
41115048:	8905803a 	cmpltu	r2,r17,r4
4111504c:	1967c83a 	sub	r19,r3,r5
41115050:	98a7c83a 	sub	r19,r19,r2
41115054:	9880202c 	andhi	r2,r19,128
41115058:	10006326 	beq	r2,zero,411151e8 <__subdf3+0x4ec>
4111505c:	3463c83a 	sub	r17,r6,r17
41115060:	28c7c83a 	sub	r3,r5,r3
41115064:	344d803a 	cmpltu	r6,r6,r17
41115068:	19a7c83a 	sub	r19,r3,r6
4111506c:	3825883a 	mov	r18,r7
41115070:	983f861e 	bne	r19,zero,41114e8c <__reset+0xbb0f4e8c>
41115074:	8809883a 	mov	r4,r17
41115078:	110946c0 	call	4110946c <__clzsi2>
4111507c:	10800804 	addi	r2,r2,32
41115080:	113ffe04 	addi	r4,r2,-8
41115084:	00c007c4 	movi	r3,31
41115088:	193f850e 	bge	r3,r4,41114ea0 <__reset+0xbb0f4ea0>
4111508c:	10bff604 	addi	r2,r2,-40
41115090:	8884983a 	sll	r2,r17,r2
41115094:	0023883a 	mov	r17,zero
41115098:	243f880e 	bge	r4,r16,41114ebc <__reset+0xbb0f4ebc>
4111509c:	00ffe034 	movhi	r3,65408
411150a0:	18ffffc4 	addi	r3,r3,-1
411150a4:	8121c83a 	sub	r16,r16,r4
411150a8:	10c6703a 	and	r3,r2,r3
411150ac:	003f3406 	br	41114d80 <__reset+0xbb0f4d80>
411150b0:	9100004c 	andi	r4,r18,1
411150b4:	000b883a 	mov	r5,zero
411150b8:	0005883a 	mov	r2,zero
411150bc:	003f4806 	br	41114de0 <__reset+0xbb0f4de0>
411150c0:	298cb03a 	or	r6,r5,r6
411150c4:	300cc03a 	cmpne	r6,r6,zero
411150c8:	0005883a 	mov	r2,zero
411150cc:	003f6406 	br	41114e60 <__reset+0xbb0f4e60>
411150d0:	10009a1e 	bne	r2,zero,4111533c <__subdf3+0x640>
411150d4:	82400044 	addi	r9,r16,1
411150d8:	4881ffcc 	andi	r2,r9,2047
411150dc:	02800044 	movi	r10,1
411150e0:	5080670e 	bge	r10,r2,41115280 <__subdf3+0x584>
411150e4:	0081ffc4 	movi	r2,2047
411150e8:	4880af26 	beq	r9,r2,411153a8 <__subdf3+0x6ac>
411150ec:	898d883a 	add	r6,r17,r6
411150f0:	1945883a 	add	r2,r3,r5
411150f4:	3447803a 	cmpltu	r3,r6,r17
411150f8:	1887883a 	add	r3,r3,r2
411150fc:	182297fa 	slli	r17,r3,31
41115100:	300cd07a 	srli	r6,r6,1
41115104:	1806d07a 	srli	r3,r3,1
41115108:	4821883a 	mov	r16,r9
4111510c:	89a2b03a 	or	r17,r17,r6
41115110:	003f1b06 	br	41114d80 <__reset+0xbb0f4d80>
41115114:	0101ffc4 	movi	r4,2047
41115118:	813f441e 	bne	r16,r4,41114e2c <__reset+0xbb0f4e2c>
4111511c:	003f1806 	br	41114d80 <__reset+0xbb0f4d80>
41115120:	843ff844 	addi	r16,r16,-31
41115124:	01400804 	movi	r5,32
41115128:	1408d83a 	srl	r4,r2,r16
4111512c:	19405026 	beq	r3,r5,41115270 <__subdf3+0x574>
41115130:	01401004 	movi	r5,64
41115134:	28c7c83a 	sub	r3,r5,r3
41115138:	10c4983a 	sll	r2,r2,r3
4111513c:	88a2b03a 	or	r17,r17,r2
41115140:	8822c03a 	cmpne	r17,r17,zero
41115144:	2462b03a 	or	r17,r4,r17
41115148:	0007883a 	mov	r3,zero
4111514c:	0021883a 	mov	r16,zero
41115150:	003f6d06 	br	41114f08 <__reset+0xbb0f4f08>
41115154:	11fff804 	addi	r7,r2,-32
41115158:	01000804 	movi	r4,32
4111515c:	29ced83a 	srl	r7,r5,r7
41115160:	11004526 	beq	r2,r4,41115278 <__subdf3+0x57c>
41115164:	01001004 	movi	r4,64
41115168:	2089c83a 	sub	r4,r4,r2
4111516c:	2904983a 	sll	r2,r5,r4
41115170:	118cb03a 	or	r6,r2,r6
41115174:	300cc03a 	cmpne	r6,r6,zero
41115178:	398cb03a 	or	r6,r7,r6
4111517c:	0005883a 	mov	r2,zero
41115180:	003f3706 	br	41114e60 <__reset+0xbb0f4e60>
41115184:	80002a26 	beq	r16,zero,41115230 <__subdf3+0x534>
41115188:	0101ffc4 	movi	r4,2047
4111518c:	49006626 	beq	r9,r4,41115328 <__subdf3+0x62c>
41115190:	0085c83a 	sub	r2,zero,r2
41115194:	18c02034 	orhi	r3,r3,128
41115198:	01000e04 	movi	r4,56
4111519c:	20807e16 	blt	r4,r2,41115398 <__subdf3+0x69c>
411151a0:	010007c4 	movi	r4,31
411151a4:	2080e716 	blt	r4,r2,41115544 <__subdf3+0x848>
411151a8:	01000804 	movi	r4,32
411151ac:	2089c83a 	sub	r4,r4,r2
411151b0:	1914983a 	sll	r10,r3,r4
411151b4:	8890d83a 	srl	r8,r17,r2
411151b8:	8908983a 	sll	r4,r17,r4
411151bc:	1884d83a 	srl	r2,r3,r2
411151c0:	5222b03a 	or	r17,r10,r8
411151c4:	2006c03a 	cmpne	r3,r4,zero
411151c8:	88e2b03a 	or	r17,r17,r3
411151cc:	3463c83a 	sub	r17,r6,r17
411151d0:	2885c83a 	sub	r2,r5,r2
411151d4:	344d803a 	cmpltu	r6,r6,r17
411151d8:	1187c83a 	sub	r3,r2,r6
411151dc:	4821883a 	mov	r16,r9
411151e0:	3825883a 	mov	r18,r7
411151e4:	003f2306 	br	41114e74 <__reset+0xbb0f4e74>
411151e8:	24d0b03a 	or	r8,r4,r19
411151ec:	40001b1e 	bne	r8,zero,4111525c <__subdf3+0x560>
411151f0:	0005883a 	mov	r2,zero
411151f4:	0009883a 	mov	r4,zero
411151f8:	0021883a 	mov	r16,zero
411151fc:	003f4906 	br	41114f24 <__reset+0xbb0f4f24>
41115200:	010007c4 	movi	r4,31
41115204:	20803a16 	blt	r4,r2,411152f0 <__subdf3+0x5f4>
41115208:	01000804 	movi	r4,32
4111520c:	2089c83a 	sub	r4,r4,r2
41115210:	2912983a 	sll	r9,r5,r4
41115214:	3090d83a 	srl	r8,r6,r2
41115218:	3108983a 	sll	r4,r6,r4
4111521c:	2884d83a 	srl	r2,r5,r2
41115220:	4a12b03a 	or	r9,r9,r8
41115224:	2008c03a 	cmpne	r4,r4,zero
41115228:	4912b03a 	or	r9,r9,r4
4111522c:	003f4e06 	br	41114f68 <__reset+0xbb0f4f68>
41115230:	1c48b03a 	or	r4,r3,r17
41115234:	20003c26 	beq	r4,zero,41115328 <__subdf3+0x62c>
41115238:	0084303a 	nor	r2,zero,r2
4111523c:	1000381e 	bne	r2,zero,41115320 <__subdf3+0x624>
41115240:	3463c83a 	sub	r17,r6,r17
41115244:	28c5c83a 	sub	r2,r5,r3
41115248:	344d803a 	cmpltu	r6,r6,r17
4111524c:	1187c83a 	sub	r3,r2,r6
41115250:	4821883a 	mov	r16,r9
41115254:	3825883a 	mov	r18,r7
41115258:	003f0606 	br	41114e74 <__reset+0xbb0f4e74>
4111525c:	2023883a 	mov	r17,r4
41115260:	003f0906 	br	41114e88 <__reset+0xbb0f4e88>
41115264:	0101ffc4 	movi	r4,2047
41115268:	813f3a1e 	bne	r16,r4,41114f54 <__reset+0xbb0f4f54>
4111526c:	003ec406 	br	41114d80 <__reset+0xbb0f4d80>
41115270:	0005883a 	mov	r2,zero
41115274:	003fb106 	br	4111513c <__reset+0xbb0f513c>
41115278:	0005883a 	mov	r2,zero
4111527c:	003fbc06 	br	41115170 <__reset+0xbb0f5170>
41115280:	1c44b03a 	or	r2,r3,r17
41115284:	80008e1e 	bne	r16,zero,411154c0 <__subdf3+0x7c4>
41115288:	1000c826 	beq	r2,zero,411155ac <__subdf3+0x8b0>
4111528c:	2984b03a 	or	r2,r5,r6
41115290:	103ebb26 	beq	r2,zero,41114d80 <__reset+0xbb0f4d80>
41115294:	8989883a 	add	r4,r17,r6
41115298:	1945883a 	add	r2,r3,r5
4111529c:	2447803a 	cmpltu	r3,r4,r17
411152a0:	1887883a 	add	r3,r3,r2
411152a4:	1880202c 	andhi	r2,r3,128
411152a8:	2023883a 	mov	r17,r4
411152ac:	103f1626 	beq	r2,zero,41114f08 <__reset+0xbb0f4f08>
411152b0:	00bfe034 	movhi	r2,65408
411152b4:	10bfffc4 	addi	r2,r2,-1
411152b8:	5021883a 	mov	r16,r10
411152bc:	1886703a 	and	r3,r3,r2
411152c0:	003eaf06 	br	41114d80 <__reset+0xbb0f4d80>
411152c4:	3825883a 	mov	r18,r7
411152c8:	003f0f06 	br	41114f08 <__reset+0xbb0f4f08>
411152cc:	1c44b03a 	or	r2,r3,r17
411152d0:	8000251e 	bne	r16,zero,41115368 <__subdf3+0x66c>
411152d4:	1000661e 	bne	r2,zero,41115470 <__subdf3+0x774>
411152d8:	2990b03a 	or	r8,r5,r6
411152dc:	40009626 	beq	r8,zero,41115538 <__subdf3+0x83c>
411152e0:	2807883a 	mov	r3,r5
411152e4:	3023883a 	mov	r17,r6
411152e8:	3825883a 	mov	r18,r7
411152ec:	003ea406 	br	41114d80 <__reset+0xbb0f4d80>
411152f0:	127ff804 	addi	r9,r2,-32
411152f4:	01000804 	movi	r4,32
411152f8:	2a52d83a 	srl	r9,r5,r9
411152fc:	11008c26 	beq	r2,r4,41115530 <__subdf3+0x834>
41115300:	01001004 	movi	r4,64
41115304:	2085c83a 	sub	r2,r4,r2
41115308:	2884983a 	sll	r2,r5,r2
4111530c:	118cb03a 	or	r6,r2,r6
41115310:	300cc03a 	cmpne	r6,r6,zero
41115314:	4992b03a 	or	r9,r9,r6
41115318:	0005883a 	mov	r2,zero
4111531c:	003f1206 	br	41114f68 <__reset+0xbb0f4f68>
41115320:	0101ffc4 	movi	r4,2047
41115324:	493f9c1e 	bne	r9,r4,41115198 <__reset+0xbb0f5198>
41115328:	2807883a 	mov	r3,r5
4111532c:	3023883a 	mov	r17,r6
41115330:	4821883a 	mov	r16,r9
41115334:	3825883a 	mov	r18,r7
41115338:	003e9106 	br	41114d80 <__reset+0xbb0f4d80>
4111533c:	80001f1e 	bne	r16,zero,411153bc <__subdf3+0x6c0>
41115340:	1c48b03a 	or	r4,r3,r17
41115344:	20005a26 	beq	r4,zero,411154b0 <__subdf3+0x7b4>
41115348:	0084303a 	nor	r2,zero,r2
4111534c:	1000561e 	bne	r2,zero,411154a8 <__subdf3+0x7ac>
41115350:	89a3883a 	add	r17,r17,r6
41115354:	1945883a 	add	r2,r3,r5
41115358:	898d803a 	cmpltu	r6,r17,r6
4111535c:	3087883a 	add	r3,r6,r2
41115360:	4821883a 	mov	r16,r9
41115364:	003f0506 	br	41114f7c <__reset+0xbb0f4f7c>
41115368:	10002b1e 	bne	r2,zero,41115418 <__subdf3+0x71c>
4111536c:	2984b03a 	or	r2,r5,r6
41115370:	10008026 	beq	r2,zero,41115574 <__subdf3+0x878>
41115374:	2807883a 	mov	r3,r5
41115378:	3023883a 	mov	r17,r6
4111537c:	3825883a 	mov	r18,r7
41115380:	0401ffc4 	movi	r16,2047
41115384:	003e7e06 	br	41114d80 <__reset+0xbb0f4d80>
41115388:	3809883a 	mov	r4,r7
4111538c:	0011883a 	mov	r8,zero
41115390:	0005883a 	mov	r2,zero
41115394:	003ee306 	br	41114f24 <__reset+0xbb0f4f24>
41115398:	1c62b03a 	or	r17,r3,r17
4111539c:	8822c03a 	cmpne	r17,r17,zero
411153a0:	0005883a 	mov	r2,zero
411153a4:	003f8906 	br	411151cc <__reset+0xbb0f51cc>
411153a8:	3809883a 	mov	r4,r7
411153ac:	4821883a 	mov	r16,r9
411153b0:	0011883a 	mov	r8,zero
411153b4:	0005883a 	mov	r2,zero
411153b8:	003eda06 	br	41114f24 <__reset+0xbb0f4f24>
411153bc:	0101ffc4 	movi	r4,2047
411153c0:	49003b26 	beq	r9,r4,411154b0 <__subdf3+0x7b4>
411153c4:	0085c83a 	sub	r2,zero,r2
411153c8:	18c02034 	orhi	r3,r3,128
411153cc:	01000e04 	movi	r4,56
411153d0:	20806e16 	blt	r4,r2,4111558c <__subdf3+0x890>
411153d4:	010007c4 	movi	r4,31
411153d8:	20807716 	blt	r4,r2,411155b8 <__subdf3+0x8bc>
411153dc:	01000804 	movi	r4,32
411153e0:	2089c83a 	sub	r4,r4,r2
411153e4:	1914983a 	sll	r10,r3,r4
411153e8:	8890d83a 	srl	r8,r17,r2
411153ec:	8908983a 	sll	r4,r17,r4
411153f0:	1884d83a 	srl	r2,r3,r2
411153f4:	5222b03a 	or	r17,r10,r8
411153f8:	2006c03a 	cmpne	r3,r4,zero
411153fc:	88e2b03a 	or	r17,r17,r3
41115400:	89a3883a 	add	r17,r17,r6
41115404:	1145883a 	add	r2,r2,r5
41115408:	898d803a 	cmpltu	r6,r17,r6
4111540c:	3087883a 	add	r3,r6,r2
41115410:	4821883a 	mov	r16,r9
41115414:	003ed906 	br	41114f7c <__reset+0xbb0f4f7c>
41115418:	2984b03a 	or	r2,r5,r6
4111541c:	10004226 	beq	r2,zero,41115528 <__subdf3+0x82c>
41115420:	1808d0fa 	srli	r4,r3,3
41115424:	8822d0fa 	srli	r17,r17,3
41115428:	1806977a 	slli	r3,r3,29
4111542c:	2080022c 	andhi	r2,r4,8
41115430:	1c62b03a 	or	r17,r3,r17
41115434:	10000826 	beq	r2,zero,41115458 <__subdf3+0x75c>
41115438:	2812d0fa 	srli	r9,r5,3
4111543c:	4880022c 	andhi	r2,r9,8
41115440:	1000051e 	bne	r2,zero,41115458 <__subdf3+0x75c>
41115444:	300cd0fa 	srli	r6,r6,3
41115448:	2804977a 	slli	r2,r5,29
4111544c:	4809883a 	mov	r4,r9
41115450:	3825883a 	mov	r18,r7
41115454:	11a2b03a 	or	r17,r2,r6
41115458:	8806d77a 	srli	r3,r17,29
4111545c:	200890fa 	slli	r4,r4,3
41115460:	882290fa 	slli	r17,r17,3
41115464:	0401ffc4 	movi	r16,2047
41115468:	1906b03a 	or	r3,r3,r4
4111546c:	003e4406 	br	41114d80 <__reset+0xbb0f4d80>
41115470:	2984b03a 	or	r2,r5,r6
41115474:	103e4226 	beq	r2,zero,41114d80 <__reset+0xbb0f4d80>
41115478:	8989c83a 	sub	r4,r17,r6
4111547c:	8911803a 	cmpltu	r8,r17,r4
41115480:	1945c83a 	sub	r2,r3,r5
41115484:	1205c83a 	sub	r2,r2,r8
41115488:	1200202c 	andhi	r8,r2,128
4111548c:	403e9a26 	beq	r8,zero,41114ef8 <__reset+0xbb0f4ef8>
41115490:	3463c83a 	sub	r17,r6,r17
41115494:	28c5c83a 	sub	r2,r5,r3
41115498:	344d803a 	cmpltu	r6,r6,r17
4111549c:	1187c83a 	sub	r3,r2,r6
411154a0:	3825883a 	mov	r18,r7
411154a4:	003e3606 	br	41114d80 <__reset+0xbb0f4d80>
411154a8:	0101ffc4 	movi	r4,2047
411154ac:	493fc71e 	bne	r9,r4,411153cc <__reset+0xbb0f53cc>
411154b0:	2807883a 	mov	r3,r5
411154b4:	3023883a 	mov	r17,r6
411154b8:	4821883a 	mov	r16,r9
411154bc:	003e3006 	br	41114d80 <__reset+0xbb0f4d80>
411154c0:	10003626 	beq	r2,zero,4111559c <__subdf3+0x8a0>
411154c4:	2984b03a 	or	r2,r5,r6
411154c8:	10001726 	beq	r2,zero,41115528 <__subdf3+0x82c>
411154cc:	1808d0fa 	srli	r4,r3,3
411154d0:	8822d0fa 	srli	r17,r17,3
411154d4:	1806977a 	slli	r3,r3,29
411154d8:	2080022c 	andhi	r2,r4,8
411154dc:	1c62b03a 	or	r17,r3,r17
411154e0:	10000726 	beq	r2,zero,41115500 <__subdf3+0x804>
411154e4:	2812d0fa 	srli	r9,r5,3
411154e8:	4880022c 	andhi	r2,r9,8
411154ec:	1000041e 	bne	r2,zero,41115500 <__subdf3+0x804>
411154f0:	300cd0fa 	srli	r6,r6,3
411154f4:	2804977a 	slli	r2,r5,29
411154f8:	4809883a 	mov	r4,r9
411154fc:	11a2b03a 	or	r17,r2,r6
41115500:	8806d77a 	srli	r3,r17,29
41115504:	200890fa 	slli	r4,r4,3
41115508:	882290fa 	slli	r17,r17,3
4111550c:	3825883a 	mov	r18,r7
41115510:	1906b03a 	or	r3,r3,r4
41115514:	0401ffc4 	movi	r16,2047
41115518:	003e1906 	br	41114d80 <__reset+0xbb0f4d80>
4111551c:	000b883a 	mov	r5,zero
41115520:	0005883a 	mov	r2,zero
41115524:	003e2e06 	br	41114de0 <__reset+0xbb0f4de0>
41115528:	0401ffc4 	movi	r16,2047
4111552c:	003e1406 	br	41114d80 <__reset+0xbb0f4d80>
41115530:	0005883a 	mov	r2,zero
41115534:	003f7506 	br	4111530c <__reset+0xbb0f530c>
41115538:	0005883a 	mov	r2,zero
4111553c:	0009883a 	mov	r4,zero
41115540:	003e7806 	br	41114f24 <__reset+0xbb0f4f24>
41115544:	123ff804 	addi	r8,r2,-32
41115548:	01000804 	movi	r4,32
4111554c:	1a10d83a 	srl	r8,r3,r8
41115550:	11002526 	beq	r2,r4,411155e8 <__subdf3+0x8ec>
41115554:	01001004 	movi	r4,64
41115558:	2085c83a 	sub	r2,r4,r2
4111555c:	1884983a 	sll	r2,r3,r2
41115560:	1444b03a 	or	r2,r2,r17
41115564:	1004c03a 	cmpne	r2,r2,zero
41115568:	40a2b03a 	or	r17,r8,r2
4111556c:	0005883a 	mov	r2,zero
41115570:	003f1606 	br	411151cc <__reset+0xbb0f51cc>
41115574:	02000434 	movhi	r8,16
41115578:	0009883a 	mov	r4,zero
4111557c:	423fffc4 	addi	r8,r8,-1
41115580:	00bfffc4 	movi	r2,-1
41115584:	0401ffc4 	movi	r16,2047
41115588:	003e6606 	br	41114f24 <__reset+0xbb0f4f24>
4111558c:	1c62b03a 	or	r17,r3,r17
41115590:	8822c03a 	cmpne	r17,r17,zero
41115594:	0005883a 	mov	r2,zero
41115598:	003f9906 	br	41115400 <__reset+0xbb0f5400>
4111559c:	2807883a 	mov	r3,r5
411155a0:	3023883a 	mov	r17,r6
411155a4:	0401ffc4 	movi	r16,2047
411155a8:	003df506 	br	41114d80 <__reset+0xbb0f4d80>
411155ac:	2807883a 	mov	r3,r5
411155b0:	3023883a 	mov	r17,r6
411155b4:	003df206 	br	41114d80 <__reset+0xbb0f4d80>
411155b8:	123ff804 	addi	r8,r2,-32
411155bc:	01000804 	movi	r4,32
411155c0:	1a10d83a 	srl	r8,r3,r8
411155c4:	11000a26 	beq	r2,r4,411155f0 <__subdf3+0x8f4>
411155c8:	01001004 	movi	r4,64
411155cc:	2085c83a 	sub	r2,r4,r2
411155d0:	1884983a 	sll	r2,r3,r2
411155d4:	1444b03a 	or	r2,r2,r17
411155d8:	1004c03a 	cmpne	r2,r2,zero
411155dc:	40a2b03a 	or	r17,r8,r2
411155e0:	0005883a 	mov	r2,zero
411155e4:	003f8606 	br	41115400 <__reset+0xbb0f5400>
411155e8:	0005883a 	mov	r2,zero
411155ec:	003fdc06 	br	41115560 <__reset+0xbb0f5560>
411155f0:	0005883a 	mov	r2,zero
411155f4:	003ff706 	br	411155d4 <__reset+0xbb0f55d4>

411155f8 <__fixdfsi>:
411155f8:	280cd53a 	srli	r6,r5,20
411155fc:	00c00434 	movhi	r3,16
41115600:	18ffffc4 	addi	r3,r3,-1
41115604:	3181ffcc 	andi	r6,r6,2047
41115608:	01c0ff84 	movi	r7,1022
4111560c:	28c6703a 	and	r3,r5,r3
41115610:	280ad7fa 	srli	r5,r5,31
41115614:	3980120e 	bge	r7,r6,41115660 <__fixdfsi+0x68>
41115618:	00810744 	movi	r2,1053
4111561c:	11800c16 	blt	r2,r6,41115650 <__fixdfsi+0x58>
41115620:	00810cc4 	movi	r2,1075
41115624:	1185c83a 	sub	r2,r2,r6
41115628:	01c007c4 	movi	r7,31
4111562c:	18c00434 	orhi	r3,r3,16
41115630:	38800d16 	blt	r7,r2,41115668 <__fixdfsi+0x70>
41115634:	31befb44 	addi	r6,r6,-1043
41115638:	2084d83a 	srl	r2,r4,r2
4111563c:	1986983a 	sll	r3,r3,r6
41115640:	1884b03a 	or	r2,r3,r2
41115644:	28000726 	beq	r5,zero,41115664 <__fixdfsi+0x6c>
41115648:	0085c83a 	sub	r2,zero,r2
4111564c:	f800283a 	ret
41115650:	00a00034 	movhi	r2,32768
41115654:	10bfffc4 	addi	r2,r2,-1
41115658:	2885883a 	add	r2,r5,r2
4111565c:	f800283a 	ret
41115660:	0005883a 	mov	r2,zero
41115664:	f800283a 	ret
41115668:	008104c4 	movi	r2,1043
4111566c:	1185c83a 	sub	r2,r2,r6
41115670:	1884d83a 	srl	r2,r3,r2
41115674:	003ff306 	br	41115644 <__reset+0xbb0f5644>

41115678 <__floatsidf>:
41115678:	defffd04 	addi	sp,sp,-12
4111567c:	dfc00215 	stw	ra,8(sp)
41115680:	dc400115 	stw	r17,4(sp)
41115684:	dc000015 	stw	r16,0(sp)
41115688:	20002b26 	beq	r4,zero,41115738 <__floatsidf+0xc0>
4111568c:	2023883a 	mov	r17,r4
41115690:	2020d7fa 	srli	r16,r4,31
41115694:	20002d16 	blt	r4,zero,4111574c <__floatsidf+0xd4>
41115698:	8809883a 	mov	r4,r17
4111569c:	110946c0 	call	4110946c <__clzsi2>
411156a0:	01410784 	movi	r5,1054
411156a4:	288bc83a 	sub	r5,r5,r2
411156a8:	01010cc4 	movi	r4,1075
411156ac:	2149c83a 	sub	r4,r4,r5
411156b0:	00c007c4 	movi	r3,31
411156b4:	1900160e 	bge	r3,r4,41115710 <__floatsidf+0x98>
411156b8:	00c104c4 	movi	r3,1043
411156bc:	1947c83a 	sub	r3,r3,r5
411156c0:	88c6983a 	sll	r3,r17,r3
411156c4:	00800434 	movhi	r2,16
411156c8:	10bfffc4 	addi	r2,r2,-1
411156cc:	1886703a 	and	r3,r3,r2
411156d0:	2941ffcc 	andi	r5,r5,2047
411156d4:	800d883a 	mov	r6,r16
411156d8:	0005883a 	mov	r2,zero
411156dc:	280a953a 	slli	r5,r5,20
411156e0:	31803fcc 	andi	r6,r6,255
411156e4:	01000434 	movhi	r4,16
411156e8:	300c97fa 	slli	r6,r6,31
411156ec:	213fffc4 	addi	r4,r4,-1
411156f0:	1906703a 	and	r3,r3,r4
411156f4:	1946b03a 	or	r3,r3,r5
411156f8:	1986b03a 	or	r3,r3,r6
411156fc:	dfc00217 	ldw	ra,8(sp)
41115700:	dc400117 	ldw	r17,4(sp)
41115704:	dc000017 	ldw	r16,0(sp)
41115708:	dec00304 	addi	sp,sp,12
4111570c:	f800283a 	ret
41115710:	00c002c4 	movi	r3,11
41115714:	1887c83a 	sub	r3,r3,r2
41115718:	88c6d83a 	srl	r3,r17,r3
4111571c:	8904983a 	sll	r2,r17,r4
41115720:	01000434 	movhi	r4,16
41115724:	213fffc4 	addi	r4,r4,-1
41115728:	2941ffcc 	andi	r5,r5,2047
4111572c:	1906703a 	and	r3,r3,r4
41115730:	800d883a 	mov	r6,r16
41115734:	003fe906 	br	411156dc <__reset+0xbb0f56dc>
41115738:	000d883a 	mov	r6,zero
4111573c:	000b883a 	mov	r5,zero
41115740:	0007883a 	mov	r3,zero
41115744:	0005883a 	mov	r2,zero
41115748:	003fe406 	br	411156dc <__reset+0xbb0f56dc>
4111574c:	0123c83a 	sub	r17,zero,r4
41115750:	003fd106 	br	41115698 <__reset+0xbb0f5698>

41115754 <__floatunsidf>:
41115754:	defffe04 	addi	sp,sp,-8
41115758:	dc000015 	stw	r16,0(sp)
4111575c:	dfc00115 	stw	ra,4(sp)
41115760:	2021883a 	mov	r16,r4
41115764:	20002226 	beq	r4,zero,411157f0 <__floatunsidf+0x9c>
41115768:	110946c0 	call	4110946c <__clzsi2>
4111576c:	01010784 	movi	r4,1054
41115770:	2089c83a 	sub	r4,r4,r2
41115774:	01810cc4 	movi	r6,1075
41115778:	310dc83a 	sub	r6,r6,r4
4111577c:	00c007c4 	movi	r3,31
41115780:	1980120e 	bge	r3,r6,411157cc <__floatunsidf+0x78>
41115784:	00c104c4 	movi	r3,1043
41115788:	1907c83a 	sub	r3,r3,r4
4111578c:	80ca983a 	sll	r5,r16,r3
41115790:	00800434 	movhi	r2,16
41115794:	10bfffc4 	addi	r2,r2,-1
41115798:	2101ffcc 	andi	r4,r4,2047
4111579c:	0021883a 	mov	r16,zero
411157a0:	288a703a 	and	r5,r5,r2
411157a4:	2008953a 	slli	r4,r4,20
411157a8:	00c00434 	movhi	r3,16
411157ac:	18ffffc4 	addi	r3,r3,-1
411157b0:	28c6703a 	and	r3,r5,r3
411157b4:	8005883a 	mov	r2,r16
411157b8:	1906b03a 	or	r3,r3,r4
411157bc:	dfc00117 	ldw	ra,4(sp)
411157c0:	dc000017 	ldw	r16,0(sp)
411157c4:	dec00204 	addi	sp,sp,8
411157c8:	f800283a 	ret
411157cc:	00c002c4 	movi	r3,11
411157d0:	188bc83a 	sub	r5,r3,r2
411157d4:	814ad83a 	srl	r5,r16,r5
411157d8:	00c00434 	movhi	r3,16
411157dc:	18ffffc4 	addi	r3,r3,-1
411157e0:	81a0983a 	sll	r16,r16,r6
411157e4:	2101ffcc 	andi	r4,r4,2047
411157e8:	28ca703a 	and	r5,r5,r3
411157ec:	003fed06 	br	411157a4 <__reset+0xbb0f57a4>
411157f0:	0009883a 	mov	r4,zero
411157f4:	000b883a 	mov	r5,zero
411157f8:	003fea06 	br	411157a4 <__reset+0xbb0f57a4>

411157fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
411157fc:	defffe04 	addi	sp,sp,-8
41115800:	dfc00115 	stw	ra,4(sp)
41115804:	df000015 	stw	fp,0(sp)
41115808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4111580c:	d0a01417 	ldw	r2,-32688(gp)
41115810:	10000326 	beq	r2,zero,41115820 <alt_get_errno+0x24>
41115814:	d0a01417 	ldw	r2,-32688(gp)
41115818:	103ee83a 	callr	r2
4111581c:	00000106 	br	41115824 <alt_get_errno+0x28>
41115820:	d0a03804 	addi	r2,gp,-32544
}
41115824:	e037883a 	mov	sp,fp
41115828:	dfc00117 	ldw	ra,4(sp)
4111582c:	df000017 	ldw	fp,0(sp)
41115830:	dec00204 	addi	sp,sp,8
41115834:	f800283a 	ret

41115838 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
41115838:	defffb04 	addi	sp,sp,-20
4111583c:	dfc00415 	stw	ra,16(sp)
41115840:	df000315 	stw	fp,12(sp)
41115844:	df000304 	addi	fp,sp,12
41115848:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
4111584c:	e0bfff17 	ldw	r2,-4(fp)
41115850:	10000616 	blt	r2,zero,4111586c <close+0x34>
41115854:	e0bfff17 	ldw	r2,-4(fp)
41115858:	10c00324 	muli	r3,r2,12
4111585c:	009044b4 	movhi	r2,16658
41115860:	10b28004 	addi	r2,r2,-13824
41115864:	1885883a 	add	r2,r3,r2
41115868:	00000106 	br	41115870 <close+0x38>
4111586c:	0005883a 	mov	r2,zero
41115870:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
41115874:	e0bffd17 	ldw	r2,-12(fp)
41115878:	10001926 	beq	r2,zero,411158e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
4111587c:	e0bffd17 	ldw	r2,-12(fp)
41115880:	10800017 	ldw	r2,0(r2)
41115884:	10800417 	ldw	r2,16(r2)
41115888:	10000626 	beq	r2,zero,411158a4 <close+0x6c>
4111588c:	e0bffd17 	ldw	r2,-12(fp)
41115890:	10800017 	ldw	r2,0(r2)
41115894:	10800417 	ldw	r2,16(r2)
41115898:	e13ffd17 	ldw	r4,-12(fp)
4111589c:	103ee83a 	callr	r2
411158a0:	00000106 	br	411158a8 <close+0x70>
411158a4:	0005883a 	mov	r2,zero
411158a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
411158ac:	e13fff17 	ldw	r4,-4(fp)
411158b0:	1115fac0 	call	41115fac <alt_release_fd>
    if (rval < 0)
411158b4:	e0bffe17 	ldw	r2,-8(fp)
411158b8:	1000070e 	bge	r2,zero,411158d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
411158bc:	11157fc0 	call	411157fc <alt_get_errno>
411158c0:	1007883a 	mov	r3,r2
411158c4:	e0bffe17 	ldw	r2,-8(fp)
411158c8:	0085c83a 	sub	r2,zero,r2
411158cc:	18800015 	stw	r2,0(r3)
      return -1;
411158d0:	00bfffc4 	movi	r2,-1
411158d4:	00000706 	br	411158f4 <close+0xbc>
    }
    return 0;
411158d8:	0005883a 	mov	r2,zero
411158dc:	00000506 	br	411158f4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
411158e0:	11157fc0 	call	411157fc <alt_get_errno>
411158e4:	1007883a 	mov	r3,r2
411158e8:	00801444 	movi	r2,81
411158ec:	18800015 	stw	r2,0(r3)
    return -1;
411158f0:	00bfffc4 	movi	r2,-1
  }
}
411158f4:	e037883a 	mov	sp,fp
411158f8:	dfc00117 	ldw	ra,4(sp)
411158fc:	df000017 	ldw	fp,0(sp)
41115900:	dec00204 	addi	sp,sp,8
41115904:	f800283a 	ret

41115908 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
41115908:	deffff04 	addi	sp,sp,-4
4111590c:	df000015 	stw	fp,0(sp)
41115910:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
41115914:	0001883a 	nop
41115918:	e037883a 	mov	sp,fp
4111591c:	df000017 	ldw	fp,0(sp)
41115920:	dec00104 	addi	sp,sp,4
41115924:	f800283a 	ret

41115928 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
41115928:	defffc04 	addi	sp,sp,-16
4111592c:	df000315 	stw	fp,12(sp)
41115930:	df000304 	addi	fp,sp,12
41115934:	e13ffd15 	stw	r4,-12(fp)
41115938:	e17ffe15 	stw	r5,-8(fp)
4111593c:	e1bfff15 	stw	r6,-4(fp)
  return len;
41115940:	e0bfff17 	ldw	r2,-4(fp)
}
41115944:	e037883a 	mov	sp,fp
41115948:	df000017 	ldw	fp,0(sp)
4111594c:	dec00104 	addi	sp,sp,4
41115950:	f800283a 	ret

41115954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41115954:	defffe04 	addi	sp,sp,-8
41115958:	dfc00115 	stw	ra,4(sp)
4111595c:	df000015 	stw	fp,0(sp)
41115960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
41115964:	d0a01417 	ldw	r2,-32688(gp)
41115968:	10000326 	beq	r2,zero,41115978 <alt_get_errno+0x24>
4111596c:	d0a01417 	ldw	r2,-32688(gp)
41115970:	103ee83a 	callr	r2
41115974:	00000106 	br	4111597c <alt_get_errno+0x28>
41115978:	d0a03804 	addi	r2,gp,-32544
}
4111597c:	e037883a 	mov	sp,fp
41115980:	dfc00117 	ldw	ra,4(sp)
41115984:	df000017 	ldw	fp,0(sp)
41115988:	dec00204 	addi	sp,sp,8
4111598c:	f800283a 	ret

41115990 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
41115990:	defffb04 	addi	sp,sp,-20
41115994:	dfc00415 	stw	ra,16(sp)
41115998:	df000315 	stw	fp,12(sp)
4111599c:	df000304 	addi	fp,sp,12
411159a0:	e13ffe15 	stw	r4,-8(fp)
411159a4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
411159a8:	e0bffe17 	ldw	r2,-8(fp)
411159ac:	10000616 	blt	r2,zero,411159c8 <fstat+0x38>
411159b0:	e0bffe17 	ldw	r2,-8(fp)
411159b4:	10c00324 	muli	r3,r2,12
411159b8:	009044b4 	movhi	r2,16658
411159bc:	10b28004 	addi	r2,r2,-13824
411159c0:	1885883a 	add	r2,r3,r2
411159c4:	00000106 	br	411159cc <fstat+0x3c>
411159c8:	0005883a 	mov	r2,zero
411159cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
411159d0:	e0bffd17 	ldw	r2,-12(fp)
411159d4:	10001026 	beq	r2,zero,41115a18 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
411159d8:	e0bffd17 	ldw	r2,-12(fp)
411159dc:	10800017 	ldw	r2,0(r2)
411159e0:	10800817 	ldw	r2,32(r2)
411159e4:	10000726 	beq	r2,zero,41115a04 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
411159e8:	e0bffd17 	ldw	r2,-12(fp)
411159ec:	10800017 	ldw	r2,0(r2)
411159f0:	10800817 	ldw	r2,32(r2)
411159f4:	e17fff17 	ldw	r5,-4(fp)
411159f8:	e13ffd17 	ldw	r4,-12(fp)
411159fc:	103ee83a 	callr	r2
41115a00:	00000a06 	br	41115a2c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
41115a04:	e0bfff17 	ldw	r2,-4(fp)
41115a08:	00c80004 	movi	r3,8192
41115a0c:	10c00115 	stw	r3,4(r2)
      return 0;
41115a10:	0005883a 	mov	r2,zero
41115a14:	00000506 	br	41115a2c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
41115a18:	11159540 	call	41115954 <alt_get_errno>
41115a1c:	1007883a 	mov	r3,r2
41115a20:	00801444 	movi	r2,81
41115a24:	18800015 	stw	r2,0(r3)
    return -1;
41115a28:	00bfffc4 	movi	r2,-1
  }
}
41115a2c:	e037883a 	mov	sp,fp
41115a30:	dfc00117 	ldw	ra,4(sp)
41115a34:	df000017 	ldw	fp,0(sp)
41115a38:	dec00204 	addi	sp,sp,8
41115a3c:	f800283a 	ret

41115a40 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
41115a40:	defff004 	addi	sp,sp,-64
41115a44:	df000f15 	stw	fp,60(sp)
41115a48:	df000f04 	addi	fp,sp,60
41115a4c:	e13ffd15 	stw	r4,-12(fp)
41115a50:	e17ffe15 	stw	r5,-8(fp)
41115a54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
41115a58:	00bffa84 	movi	r2,-22
41115a5c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
41115a60:	e0bffd17 	ldw	r2,-12(fp)
41115a64:	10800828 	cmpgeui	r2,r2,32
41115a68:	1000501e 	bne	r2,zero,41115bac <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41115a6c:	0005303a 	rdctl	r2,status
41115a70:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41115a74:	e0fff617 	ldw	r3,-40(fp)
41115a78:	00bfff84 	movi	r2,-2
41115a7c:	1884703a 	and	r2,r3,r2
41115a80:	1001703a 	wrctl	status,r2
  
  return context;
41115a84:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
41115a88:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
41115a8c:	009044b4 	movhi	r2,16658
41115a90:	10b8ae04 	addi	r2,r2,-7496
41115a94:	e0fffd17 	ldw	r3,-12(fp)
41115a98:	180690fa 	slli	r3,r3,3
41115a9c:	10c5883a 	add	r2,r2,r3
41115aa0:	e0ffff17 	ldw	r3,-4(fp)
41115aa4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
41115aa8:	009044b4 	movhi	r2,16658
41115aac:	10b8ae04 	addi	r2,r2,-7496
41115ab0:	e0fffd17 	ldw	r3,-12(fp)
41115ab4:	180690fa 	slli	r3,r3,3
41115ab8:	10c5883a 	add	r2,r2,r3
41115abc:	10800104 	addi	r2,r2,4
41115ac0:	e0fffe17 	ldw	r3,-8(fp)
41115ac4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
41115ac8:	e0bfff17 	ldw	r2,-4(fp)
41115acc:	10001926 	beq	r2,zero,41115b34 <alt_irq_register+0xf4>
41115ad0:	e0bffd17 	ldw	r2,-12(fp)
41115ad4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41115ad8:	0005303a 	rdctl	r2,status
41115adc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41115ae0:	e0fff717 	ldw	r3,-36(fp)
41115ae4:	00bfff84 	movi	r2,-2
41115ae8:	1884703a 	and	r2,r3,r2
41115aec:	1001703a 	wrctl	status,r2
  
  return context;
41115af0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
41115af4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
41115af8:	00c00044 	movi	r3,1
41115afc:	e0bff217 	ldw	r2,-56(fp)
41115b00:	1884983a 	sll	r2,r3,r2
41115b04:	1007883a 	mov	r3,r2
41115b08:	d0a03917 	ldw	r2,-32540(gp)
41115b0c:	1884b03a 	or	r2,r3,r2
41115b10:	d0a03915 	stw	r2,-32540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
41115b14:	d0a03917 	ldw	r2,-32540(gp)
41115b18:	100170fa 	wrctl	ienable,r2
41115b1c:	e0bff817 	ldw	r2,-32(fp)
41115b20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41115b24:	e0bff917 	ldw	r2,-28(fp)
41115b28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
41115b2c:	0005883a 	mov	r2,zero
41115b30:	00001906 	br	41115b98 <alt_irq_register+0x158>
41115b34:	e0bffd17 	ldw	r2,-12(fp)
41115b38:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41115b3c:	0005303a 	rdctl	r2,status
41115b40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41115b44:	e0fffa17 	ldw	r3,-24(fp)
41115b48:	00bfff84 	movi	r2,-2
41115b4c:	1884703a 	and	r2,r3,r2
41115b50:	1001703a 	wrctl	status,r2
  
  return context;
41115b54:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
41115b58:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
41115b5c:	00c00044 	movi	r3,1
41115b60:	e0bff417 	ldw	r2,-48(fp)
41115b64:	1884983a 	sll	r2,r3,r2
41115b68:	0084303a 	nor	r2,zero,r2
41115b6c:	1007883a 	mov	r3,r2
41115b70:	d0a03917 	ldw	r2,-32540(gp)
41115b74:	1884703a 	and	r2,r3,r2
41115b78:	d0a03915 	stw	r2,-32540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
41115b7c:	d0a03917 	ldw	r2,-32540(gp)
41115b80:	100170fa 	wrctl	ienable,r2
41115b84:	e0bffb17 	ldw	r2,-20(fp)
41115b88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41115b8c:	e0bffc17 	ldw	r2,-16(fp)
41115b90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
41115b94:	0005883a 	mov	r2,zero
41115b98:	e0bff115 	stw	r2,-60(fp)
41115b9c:	e0bff317 	ldw	r2,-52(fp)
41115ba0:	e0bff515 	stw	r2,-44(fp)
41115ba4:	e0bff517 	ldw	r2,-44(fp)
41115ba8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
41115bac:	e0bff117 	ldw	r2,-60(fp)
}
41115bb0:	e037883a 	mov	sp,fp
41115bb4:	df000017 	ldw	fp,0(sp)
41115bb8:	dec00104 	addi	sp,sp,4
41115bbc:	f800283a 	ret

41115bc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41115bc0:	defffe04 	addi	sp,sp,-8
41115bc4:	dfc00115 	stw	ra,4(sp)
41115bc8:	df000015 	stw	fp,0(sp)
41115bcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
41115bd0:	d0a01417 	ldw	r2,-32688(gp)
41115bd4:	10000326 	beq	r2,zero,41115be4 <alt_get_errno+0x24>
41115bd8:	d0a01417 	ldw	r2,-32688(gp)
41115bdc:	103ee83a 	callr	r2
41115be0:	00000106 	br	41115be8 <alt_get_errno+0x28>
41115be4:	d0a03804 	addi	r2,gp,-32544
}
41115be8:	e037883a 	mov	sp,fp
41115bec:	dfc00117 	ldw	ra,4(sp)
41115bf0:	df000017 	ldw	fp,0(sp)
41115bf4:	dec00204 	addi	sp,sp,8
41115bf8:	f800283a 	ret

41115bfc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
41115bfc:	deffed04 	addi	sp,sp,-76
41115c00:	dfc01215 	stw	ra,72(sp)
41115c04:	df001115 	stw	fp,68(sp)
41115c08:	df001104 	addi	fp,sp,68
41115c0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41115c10:	e0bfff17 	ldw	r2,-4(fp)
41115c14:	10000616 	blt	r2,zero,41115c30 <isatty+0x34>
41115c18:	e0bfff17 	ldw	r2,-4(fp)
41115c1c:	10c00324 	muli	r3,r2,12
41115c20:	009044b4 	movhi	r2,16658
41115c24:	10b28004 	addi	r2,r2,-13824
41115c28:	1885883a 	add	r2,r3,r2
41115c2c:	00000106 	br	41115c34 <isatty+0x38>
41115c30:	0005883a 	mov	r2,zero
41115c34:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
41115c38:	e0bfef17 	ldw	r2,-68(fp)
41115c3c:	10000e26 	beq	r2,zero,41115c78 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
41115c40:	e0bfef17 	ldw	r2,-68(fp)
41115c44:	10800017 	ldw	r2,0(r2)
41115c48:	10800817 	ldw	r2,32(r2)
41115c4c:	1000021e 	bne	r2,zero,41115c58 <isatty+0x5c>
    {
      return 1;
41115c50:	00800044 	movi	r2,1
41115c54:	00000d06 	br	41115c8c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
41115c58:	e0bff004 	addi	r2,fp,-64
41115c5c:	100b883a 	mov	r5,r2
41115c60:	e13fff17 	ldw	r4,-4(fp)
41115c64:	11159900 	call	41115990 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
41115c68:	e0bff117 	ldw	r2,-60(fp)
41115c6c:	10880020 	cmpeqi	r2,r2,8192
41115c70:	10803fcc 	andi	r2,r2,255
41115c74:	00000506 	br	41115c8c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
41115c78:	1115bc00 	call	41115bc0 <alt_get_errno>
41115c7c:	1007883a 	mov	r3,r2
41115c80:	00801444 	movi	r2,81
41115c84:	18800015 	stw	r2,0(r3)
    return 0;
41115c88:	0005883a 	mov	r2,zero
  }
}
41115c8c:	e037883a 	mov	sp,fp
41115c90:	dfc00117 	ldw	ra,4(sp)
41115c94:	df000017 	ldw	fp,0(sp)
41115c98:	dec00204 	addi	sp,sp,8
41115c9c:	f800283a 	ret

41115ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41115ca0:	defffe04 	addi	sp,sp,-8
41115ca4:	dfc00115 	stw	ra,4(sp)
41115ca8:	df000015 	stw	fp,0(sp)
41115cac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
41115cb0:	d0a01417 	ldw	r2,-32688(gp)
41115cb4:	10000326 	beq	r2,zero,41115cc4 <alt_get_errno+0x24>
41115cb8:	d0a01417 	ldw	r2,-32688(gp)
41115cbc:	103ee83a 	callr	r2
41115cc0:	00000106 	br	41115cc8 <alt_get_errno+0x28>
41115cc4:	d0a03804 	addi	r2,gp,-32544
}
41115cc8:	e037883a 	mov	sp,fp
41115ccc:	dfc00117 	ldw	ra,4(sp)
41115cd0:	df000017 	ldw	fp,0(sp)
41115cd4:	dec00204 	addi	sp,sp,8
41115cd8:	f800283a 	ret

41115cdc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
41115cdc:	defff904 	addi	sp,sp,-28
41115ce0:	dfc00615 	stw	ra,24(sp)
41115ce4:	df000515 	stw	fp,20(sp)
41115ce8:	df000504 	addi	fp,sp,20
41115cec:	e13ffd15 	stw	r4,-12(fp)
41115cf0:	e17ffe15 	stw	r5,-8(fp)
41115cf4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
41115cf8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41115cfc:	e0bffd17 	ldw	r2,-12(fp)
41115d00:	10000616 	blt	r2,zero,41115d1c <lseek+0x40>
41115d04:	e0bffd17 	ldw	r2,-12(fp)
41115d08:	10c00324 	muli	r3,r2,12
41115d0c:	009044b4 	movhi	r2,16658
41115d10:	10b28004 	addi	r2,r2,-13824
41115d14:	1885883a 	add	r2,r3,r2
41115d18:	00000106 	br	41115d20 <lseek+0x44>
41115d1c:	0005883a 	mov	r2,zero
41115d20:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
41115d24:	e0bffc17 	ldw	r2,-16(fp)
41115d28:	10001026 	beq	r2,zero,41115d6c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
41115d2c:	e0bffc17 	ldw	r2,-16(fp)
41115d30:	10800017 	ldw	r2,0(r2)
41115d34:	10800717 	ldw	r2,28(r2)
41115d38:	10000926 	beq	r2,zero,41115d60 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
41115d3c:	e0bffc17 	ldw	r2,-16(fp)
41115d40:	10800017 	ldw	r2,0(r2)
41115d44:	10800717 	ldw	r2,28(r2)
41115d48:	e1bfff17 	ldw	r6,-4(fp)
41115d4c:	e17ffe17 	ldw	r5,-8(fp)
41115d50:	e13ffc17 	ldw	r4,-16(fp)
41115d54:	103ee83a 	callr	r2
41115d58:	e0bffb15 	stw	r2,-20(fp)
41115d5c:	00000506 	br	41115d74 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
41115d60:	00bfde84 	movi	r2,-134
41115d64:	e0bffb15 	stw	r2,-20(fp)
41115d68:	00000206 	br	41115d74 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
41115d6c:	00bfebc4 	movi	r2,-81
41115d70:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
41115d74:	e0bffb17 	ldw	r2,-20(fp)
41115d78:	1000070e 	bge	r2,zero,41115d98 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
41115d7c:	1115ca00 	call	41115ca0 <alt_get_errno>
41115d80:	1007883a 	mov	r3,r2
41115d84:	e0bffb17 	ldw	r2,-20(fp)
41115d88:	0085c83a 	sub	r2,zero,r2
41115d8c:	18800015 	stw	r2,0(r3)
    rc = -1;
41115d90:	00bfffc4 	movi	r2,-1
41115d94:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
41115d98:	e0bffb17 	ldw	r2,-20(fp)
}
41115d9c:	e037883a 	mov	sp,fp
41115da0:	dfc00117 	ldw	ra,4(sp)
41115da4:	df000017 	ldw	fp,0(sp)
41115da8:	dec00204 	addi	sp,sp,8
41115dac:	f800283a 	ret

41115db0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
41115db0:	defffd04 	addi	sp,sp,-12
41115db4:	dfc00215 	stw	ra,8(sp)
41115db8:	df000115 	stw	fp,4(sp)
41115dbc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
41115dc0:	0009883a 	mov	r4,zero
41115dc4:	11163fc0 	call	411163fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
41115dc8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
41115dcc:	11164340 	call	41116434 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
41115dd0:	019044b4 	movhi	r6,16658
41115dd4:	31afa904 	addi	r6,r6,-16732
41115dd8:	015044b4 	movhi	r5,16658
41115ddc:	296fa904 	addi	r5,r5,-16732
41115de0:	011044b4 	movhi	r4,16658
41115de4:	212fa904 	addi	r4,r4,-16732
41115de8:	1119fb40 	call	41119fb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
41115dec:	1119b000 	call	41119b00 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
41115df0:	011044b4 	movhi	r4,16658
41115df4:	2126d804 	addi	r4,r4,-25760
41115df8:	111a7580 	call	4111a758 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
41115dfc:	d0a03a17 	ldw	r2,-32536(gp)
41115e00:	d0e03b17 	ldw	r3,-32532(gp)
41115e04:	d1203c17 	ldw	r4,-32528(gp)
41115e08:	200d883a 	mov	r6,r4
41115e0c:	180b883a 	mov	r5,r3
41115e10:	1009883a 	mov	r4,r2
41115e14:	110722c0 	call	4110722c <main>
41115e18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
41115e1c:	01000044 	movi	r4,1
41115e20:	11158380 	call	41115838 <close>
  exit (result);
41115e24:	e13fff17 	ldw	r4,-4(fp)
41115e28:	111a76c0 	call	4111a76c <exit>

41115e2c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
41115e2c:	defffe04 	addi	sp,sp,-8
41115e30:	df000115 	stw	fp,4(sp)
41115e34:	df000104 	addi	fp,sp,4
41115e38:	e13fff15 	stw	r4,-4(fp)
}
41115e3c:	0001883a 	nop
41115e40:	e037883a 	mov	sp,fp
41115e44:	df000017 	ldw	fp,0(sp)
41115e48:	dec00104 	addi	sp,sp,4
41115e4c:	f800283a 	ret

41115e50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
41115e50:	defffe04 	addi	sp,sp,-8
41115e54:	df000115 	stw	fp,4(sp)
41115e58:	df000104 	addi	fp,sp,4
41115e5c:	e13fff15 	stw	r4,-4(fp)
}
41115e60:	0001883a 	nop
41115e64:	e037883a 	mov	sp,fp
41115e68:	df000017 	ldw	fp,0(sp)
41115e6c:	dec00104 	addi	sp,sp,4
41115e70:	f800283a 	ret

41115e74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41115e74:	defffe04 	addi	sp,sp,-8
41115e78:	dfc00115 	stw	ra,4(sp)
41115e7c:	df000015 	stw	fp,0(sp)
41115e80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
41115e84:	d0a01417 	ldw	r2,-32688(gp)
41115e88:	10000326 	beq	r2,zero,41115e98 <alt_get_errno+0x24>
41115e8c:	d0a01417 	ldw	r2,-32688(gp)
41115e90:	103ee83a 	callr	r2
41115e94:	00000106 	br	41115e9c <alt_get_errno+0x28>
41115e98:	d0a03804 	addi	r2,gp,-32544
}
41115e9c:	e037883a 	mov	sp,fp
41115ea0:	dfc00117 	ldw	ra,4(sp)
41115ea4:	df000017 	ldw	fp,0(sp)
41115ea8:	dec00204 	addi	sp,sp,8
41115eac:	f800283a 	ret

41115eb0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
41115eb0:	defff904 	addi	sp,sp,-28
41115eb4:	dfc00615 	stw	ra,24(sp)
41115eb8:	df000515 	stw	fp,20(sp)
41115ebc:	df000504 	addi	fp,sp,20
41115ec0:	e13ffd15 	stw	r4,-12(fp)
41115ec4:	e17ffe15 	stw	r5,-8(fp)
41115ec8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41115ecc:	e0bffd17 	ldw	r2,-12(fp)
41115ed0:	10000616 	blt	r2,zero,41115eec <read+0x3c>
41115ed4:	e0bffd17 	ldw	r2,-12(fp)
41115ed8:	10c00324 	muli	r3,r2,12
41115edc:	009044b4 	movhi	r2,16658
41115ee0:	10b28004 	addi	r2,r2,-13824
41115ee4:	1885883a 	add	r2,r3,r2
41115ee8:	00000106 	br	41115ef0 <read+0x40>
41115eec:	0005883a 	mov	r2,zero
41115ef0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
41115ef4:	e0bffb17 	ldw	r2,-20(fp)
41115ef8:	10002226 	beq	r2,zero,41115f84 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
41115efc:	e0bffb17 	ldw	r2,-20(fp)
41115f00:	10800217 	ldw	r2,8(r2)
41115f04:	108000cc 	andi	r2,r2,3
41115f08:	10800060 	cmpeqi	r2,r2,1
41115f0c:	1000181e 	bne	r2,zero,41115f70 <read+0xc0>
        (fd->dev->read))
41115f10:	e0bffb17 	ldw	r2,-20(fp)
41115f14:	10800017 	ldw	r2,0(r2)
41115f18:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
41115f1c:	10001426 	beq	r2,zero,41115f70 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
41115f20:	e0bffb17 	ldw	r2,-20(fp)
41115f24:	10800017 	ldw	r2,0(r2)
41115f28:	10800517 	ldw	r2,20(r2)
41115f2c:	e0ffff17 	ldw	r3,-4(fp)
41115f30:	180d883a 	mov	r6,r3
41115f34:	e17ffe17 	ldw	r5,-8(fp)
41115f38:	e13ffb17 	ldw	r4,-20(fp)
41115f3c:	103ee83a 	callr	r2
41115f40:	e0bffc15 	stw	r2,-16(fp)
41115f44:	e0bffc17 	ldw	r2,-16(fp)
41115f48:	1000070e 	bge	r2,zero,41115f68 <read+0xb8>
        {
          ALT_ERRNO = -rval;
41115f4c:	1115e740 	call	41115e74 <alt_get_errno>
41115f50:	1007883a 	mov	r3,r2
41115f54:	e0bffc17 	ldw	r2,-16(fp)
41115f58:	0085c83a 	sub	r2,zero,r2
41115f5c:	18800015 	stw	r2,0(r3)
          return -1;
41115f60:	00bfffc4 	movi	r2,-1
41115f64:	00000c06 	br	41115f98 <read+0xe8>
        }
        return rval;
41115f68:	e0bffc17 	ldw	r2,-16(fp)
41115f6c:	00000a06 	br	41115f98 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
41115f70:	1115e740 	call	41115e74 <alt_get_errno>
41115f74:	1007883a 	mov	r3,r2
41115f78:	00800344 	movi	r2,13
41115f7c:	18800015 	stw	r2,0(r3)
41115f80:	00000406 	br	41115f94 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
41115f84:	1115e740 	call	41115e74 <alt_get_errno>
41115f88:	1007883a 	mov	r3,r2
41115f8c:	00801444 	movi	r2,81
41115f90:	18800015 	stw	r2,0(r3)
  }
  return -1;
41115f94:	00bfffc4 	movi	r2,-1
}
41115f98:	e037883a 	mov	sp,fp
41115f9c:	dfc00117 	ldw	ra,4(sp)
41115fa0:	df000017 	ldw	fp,0(sp)
41115fa4:	dec00204 	addi	sp,sp,8
41115fa8:	f800283a 	ret

41115fac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
41115fac:	defffe04 	addi	sp,sp,-8
41115fb0:	df000115 	stw	fp,4(sp)
41115fb4:	df000104 	addi	fp,sp,4
41115fb8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
41115fbc:	e0bfff17 	ldw	r2,-4(fp)
41115fc0:	108000d0 	cmplti	r2,r2,3
41115fc4:	10000d1e 	bne	r2,zero,41115ffc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
41115fc8:	009044b4 	movhi	r2,16658
41115fcc:	10b28004 	addi	r2,r2,-13824
41115fd0:	e0ffff17 	ldw	r3,-4(fp)
41115fd4:	18c00324 	muli	r3,r3,12
41115fd8:	10c5883a 	add	r2,r2,r3
41115fdc:	10800204 	addi	r2,r2,8
41115fe0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
41115fe4:	009044b4 	movhi	r2,16658
41115fe8:	10b28004 	addi	r2,r2,-13824
41115fec:	e0ffff17 	ldw	r3,-4(fp)
41115ff0:	18c00324 	muli	r3,r3,12
41115ff4:	10c5883a 	add	r2,r2,r3
41115ff8:	10000015 	stw	zero,0(r2)
  }
}
41115ffc:	0001883a 	nop
41116000:	e037883a 	mov	sp,fp
41116004:	df000017 	ldw	fp,0(sp)
41116008:	dec00104 	addi	sp,sp,4
4111600c:	f800283a 	ret

41116010 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
41116010:	defff904 	addi	sp,sp,-28
41116014:	df000615 	stw	fp,24(sp)
41116018:	df000604 	addi	fp,sp,24
4111601c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41116020:	0005303a 	rdctl	r2,status
41116024:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41116028:	e0fffe17 	ldw	r3,-8(fp)
4111602c:	00bfff84 	movi	r2,-2
41116030:	1884703a 	and	r2,r3,r2
41116034:	1001703a 	wrctl	status,r2
  
  return context;
41116038:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
4111603c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
41116040:	d0a01617 	ldw	r2,-32680(gp)
41116044:	10c000c4 	addi	r3,r2,3
41116048:	00bfff04 	movi	r2,-4
4111604c:	1884703a 	and	r2,r3,r2
41116050:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
41116054:	d0e01617 	ldw	r3,-32680(gp)
41116058:	e0bfff17 	ldw	r2,-4(fp)
4111605c:	1887883a 	add	r3,r3,r2
41116060:	00904834 	movhi	r2,16672
41116064:	10a80004 	addi	r2,r2,-24576
41116068:	10c0062e 	bgeu	r2,r3,41116084 <sbrk+0x74>
4111606c:	e0bffb17 	ldw	r2,-20(fp)
41116070:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41116074:	e0bffa17 	ldw	r2,-24(fp)
41116078:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
4111607c:	00bfffc4 	movi	r2,-1
41116080:	00000b06 	br	411160b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
41116084:	d0a01617 	ldw	r2,-32680(gp)
41116088:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
4111608c:	d0e01617 	ldw	r3,-32680(gp)
41116090:	e0bfff17 	ldw	r2,-4(fp)
41116094:	1885883a 	add	r2,r3,r2
41116098:	d0a01615 	stw	r2,-32680(gp)
4111609c:	e0bffb17 	ldw	r2,-20(fp)
411160a0:	e0bffc15 	stw	r2,-16(fp)
411160a4:	e0bffc17 	ldw	r2,-16(fp)
411160a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
411160ac:	e0bffd17 	ldw	r2,-12(fp)
} 
411160b0:	e037883a 	mov	sp,fp
411160b4:	df000017 	ldw	fp,0(sp)
411160b8:	dec00104 	addi	sp,sp,4
411160bc:	f800283a 	ret

411160c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
411160c0:	defffa04 	addi	sp,sp,-24
411160c4:	df000515 	stw	fp,20(sp)
411160c8:	df000504 	addi	fp,sp,20
411160cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
411160d0:	0005303a 	rdctl	r2,status
411160d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
411160d8:	e0fffc17 	ldw	r3,-16(fp)
411160dc:	00bfff84 	movi	r2,-2
411160e0:	1884703a 	and	r2,r3,r2
411160e4:	1001703a 	wrctl	status,r2
  
  return context;
411160e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
411160ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
411160f0:	e0bfff17 	ldw	r2,-4(fp)
411160f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
411160f8:	e0bffd17 	ldw	r2,-12(fp)
411160fc:	10800017 	ldw	r2,0(r2)
41116100:	e0fffd17 	ldw	r3,-12(fp)
41116104:	18c00117 	ldw	r3,4(r3)
41116108:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
4111610c:	e0bffd17 	ldw	r2,-12(fp)
41116110:	10800117 	ldw	r2,4(r2)
41116114:	e0fffd17 	ldw	r3,-12(fp)
41116118:	18c00017 	ldw	r3,0(r3)
4111611c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
41116120:	e0bffd17 	ldw	r2,-12(fp)
41116124:	e0fffd17 	ldw	r3,-12(fp)
41116128:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
4111612c:	e0bffd17 	ldw	r2,-12(fp)
41116130:	e0fffd17 	ldw	r3,-12(fp)
41116134:	10c00015 	stw	r3,0(r2)
41116138:	e0bffb17 	ldw	r2,-20(fp)
4111613c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41116140:	e0bffe17 	ldw	r2,-8(fp)
41116144:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
41116148:	0001883a 	nop
4111614c:	e037883a 	mov	sp,fp
41116150:	df000017 	ldw	fp,0(sp)
41116154:	dec00104 	addi	sp,sp,4
41116158:	f800283a 	ret

4111615c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
4111615c:	defffb04 	addi	sp,sp,-20
41116160:	dfc00415 	stw	ra,16(sp)
41116164:	df000315 	stw	fp,12(sp)
41116168:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
4111616c:	d0a01717 	ldw	r2,-32676(gp)
41116170:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
41116174:	d0a03e17 	ldw	r2,-32520(gp)
41116178:	10800044 	addi	r2,r2,1
4111617c:	d0a03e15 	stw	r2,-32520(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
41116180:	00002e06 	br	4111623c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
41116184:	e0bffd17 	ldw	r2,-12(fp)
41116188:	10800017 	ldw	r2,0(r2)
4111618c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
41116190:	e0bffd17 	ldw	r2,-12(fp)
41116194:	10800403 	ldbu	r2,16(r2)
41116198:	10803fcc 	andi	r2,r2,255
4111619c:	10000426 	beq	r2,zero,411161b0 <alt_tick+0x54>
411161a0:	d0a03e17 	ldw	r2,-32520(gp)
411161a4:	1000021e 	bne	r2,zero,411161b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
411161a8:	e0bffd17 	ldw	r2,-12(fp)
411161ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
411161b0:	e0bffd17 	ldw	r2,-12(fp)
411161b4:	10800217 	ldw	r2,8(r2)
411161b8:	d0e03e17 	ldw	r3,-32520(gp)
411161bc:	18801d36 	bltu	r3,r2,41116234 <alt_tick+0xd8>
411161c0:	e0bffd17 	ldw	r2,-12(fp)
411161c4:	10800403 	ldbu	r2,16(r2)
411161c8:	10803fcc 	andi	r2,r2,255
411161cc:	1000191e 	bne	r2,zero,41116234 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
411161d0:	e0bffd17 	ldw	r2,-12(fp)
411161d4:	10800317 	ldw	r2,12(r2)
411161d8:	e0fffd17 	ldw	r3,-12(fp)
411161dc:	18c00517 	ldw	r3,20(r3)
411161e0:	1809883a 	mov	r4,r3
411161e4:	103ee83a 	callr	r2
411161e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
411161ec:	e0bfff17 	ldw	r2,-4(fp)
411161f0:	1000031e 	bne	r2,zero,41116200 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
411161f4:	e13ffd17 	ldw	r4,-12(fp)
411161f8:	11160c00 	call	411160c0 <alt_alarm_stop>
411161fc:	00000d06 	br	41116234 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
41116200:	e0bffd17 	ldw	r2,-12(fp)
41116204:	10c00217 	ldw	r3,8(r2)
41116208:	e0bfff17 	ldw	r2,-4(fp)
4111620c:	1887883a 	add	r3,r3,r2
41116210:	e0bffd17 	ldw	r2,-12(fp)
41116214:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
41116218:	e0bffd17 	ldw	r2,-12(fp)
4111621c:	10c00217 	ldw	r3,8(r2)
41116220:	d0a03e17 	ldw	r2,-32520(gp)
41116224:	1880032e 	bgeu	r3,r2,41116234 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
41116228:	e0bffd17 	ldw	r2,-12(fp)
4111622c:	00c00044 	movi	r3,1
41116230:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
41116234:	e0bffe17 	ldw	r2,-8(fp)
41116238:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
4111623c:	e0fffd17 	ldw	r3,-12(fp)
41116240:	d0a01704 	addi	r2,gp,-32676
41116244:	18bfcf1e 	bne	r3,r2,41116184 <__reset+0xbb0f6184>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
41116248:	0001883a 	nop
}
4111624c:	0001883a 	nop
41116250:	e037883a 	mov	sp,fp
41116254:	dfc00117 	ldw	ra,4(sp)
41116258:	df000017 	ldw	fp,0(sp)
4111625c:	dec00204 	addi	sp,sp,8
41116260:	f800283a 	ret

41116264 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
41116264:	defffd04 	addi	sp,sp,-12
41116268:	dfc00215 	stw	ra,8(sp)
4111626c:	df000115 	stw	fp,4(sp)
41116270:	df000104 	addi	fp,sp,4
41116274:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
41116278:	e13fff17 	ldw	r4,-4(fp)
4111627c:	11198f80 	call	411198f8 <alt_busy_sleep>
}
41116280:	e037883a 	mov	sp,fp
41116284:	dfc00117 	ldw	ra,4(sp)
41116288:	df000017 	ldw	fp,0(sp)
4111628c:	dec00204 	addi	sp,sp,8
41116290:	f800283a 	ret

41116294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41116294:	defffe04 	addi	sp,sp,-8
41116298:	dfc00115 	stw	ra,4(sp)
4111629c:	df000015 	stw	fp,0(sp)
411162a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
411162a4:	d0a01417 	ldw	r2,-32688(gp)
411162a8:	10000326 	beq	r2,zero,411162b8 <alt_get_errno+0x24>
411162ac:	d0a01417 	ldw	r2,-32688(gp)
411162b0:	103ee83a 	callr	r2
411162b4:	00000106 	br	411162bc <alt_get_errno+0x28>
411162b8:	d0a03804 	addi	r2,gp,-32544
}
411162bc:	e037883a 	mov	sp,fp
411162c0:	dfc00117 	ldw	ra,4(sp)
411162c4:	df000017 	ldw	fp,0(sp)
411162c8:	dec00204 	addi	sp,sp,8
411162cc:	f800283a 	ret

411162d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
411162d0:	defff904 	addi	sp,sp,-28
411162d4:	dfc00615 	stw	ra,24(sp)
411162d8:	df000515 	stw	fp,20(sp)
411162dc:	df000504 	addi	fp,sp,20
411162e0:	e13ffd15 	stw	r4,-12(fp)
411162e4:	e17ffe15 	stw	r5,-8(fp)
411162e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
411162ec:	e0bffd17 	ldw	r2,-12(fp)
411162f0:	10000616 	blt	r2,zero,4111630c <write+0x3c>
411162f4:	e0bffd17 	ldw	r2,-12(fp)
411162f8:	10c00324 	muli	r3,r2,12
411162fc:	009044b4 	movhi	r2,16658
41116300:	10b28004 	addi	r2,r2,-13824
41116304:	1885883a 	add	r2,r3,r2
41116308:	00000106 	br	41116310 <write+0x40>
4111630c:	0005883a 	mov	r2,zero
41116310:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
41116314:	e0bffb17 	ldw	r2,-20(fp)
41116318:	10002126 	beq	r2,zero,411163a0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
4111631c:	e0bffb17 	ldw	r2,-20(fp)
41116320:	10800217 	ldw	r2,8(r2)
41116324:	108000cc 	andi	r2,r2,3
41116328:	10001826 	beq	r2,zero,4111638c <write+0xbc>
4111632c:	e0bffb17 	ldw	r2,-20(fp)
41116330:	10800017 	ldw	r2,0(r2)
41116334:	10800617 	ldw	r2,24(r2)
41116338:	10001426 	beq	r2,zero,4111638c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
4111633c:	e0bffb17 	ldw	r2,-20(fp)
41116340:	10800017 	ldw	r2,0(r2)
41116344:	10800617 	ldw	r2,24(r2)
41116348:	e0ffff17 	ldw	r3,-4(fp)
4111634c:	180d883a 	mov	r6,r3
41116350:	e17ffe17 	ldw	r5,-8(fp)
41116354:	e13ffb17 	ldw	r4,-20(fp)
41116358:	103ee83a 	callr	r2
4111635c:	e0bffc15 	stw	r2,-16(fp)
41116360:	e0bffc17 	ldw	r2,-16(fp)
41116364:	1000070e 	bge	r2,zero,41116384 <write+0xb4>
      {
        ALT_ERRNO = -rval;
41116368:	11162940 	call	41116294 <alt_get_errno>
4111636c:	1007883a 	mov	r3,r2
41116370:	e0bffc17 	ldw	r2,-16(fp)
41116374:	0085c83a 	sub	r2,zero,r2
41116378:	18800015 	stw	r2,0(r3)
        return -1;
4111637c:	00bfffc4 	movi	r2,-1
41116380:	00000c06 	br	411163b4 <write+0xe4>
      }
      return rval;
41116384:	e0bffc17 	ldw	r2,-16(fp)
41116388:	00000a06 	br	411163b4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
4111638c:	11162940 	call	41116294 <alt_get_errno>
41116390:	1007883a 	mov	r3,r2
41116394:	00800344 	movi	r2,13
41116398:	18800015 	stw	r2,0(r3)
4111639c:	00000406 	br	411163b0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
411163a0:	11162940 	call	41116294 <alt_get_errno>
411163a4:	1007883a 	mov	r3,r2
411163a8:	00801444 	movi	r2,81
411163ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
411163b0:	00bfffc4 	movi	r2,-1
}
411163b4:	e037883a 	mov	sp,fp
411163b8:	dfc00117 	ldw	ra,4(sp)
411163bc:	df000017 	ldw	fp,0(sp)
411163c0:	dec00204 	addi	sp,sp,8
411163c4:	f800283a 	ret

411163c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
411163c8:	defffd04 	addi	sp,sp,-12
411163cc:	dfc00215 	stw	ra,8(sp)
411163d0:	df000115 	stw	fp,4(sp)
411163d4:	df000104 	addi	fp,sp,4
411163d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
411163dc:	d1601104 	addi	r5,gp,-32700
411163e0:	e13fff17 	ldw	r4,-4(fp)
411163e4:	1119a5c0 	call	41119a5c <alt_dev_llist_insert>
}
411163e8:	e037883a 	mov	sp,fp
411163ec:	dfc00117 	ldw	ra,4(sp)
411163f0:	df000017 	ldw	fp,0(sp)
411163f4:	dec00204 	addi	sp,sp,8
411163f8:	f800283a 	ret

411163fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
411163fc:	defffd04 	addi	sp,sp,-12
41116400:	dfc00215 	stw	ra,8(sp)
41116404:	df000115 	stw	fp,4(sp)
41116408:	df000104 	addi	fp,sp,4
4111640c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
41116410:	111a4ec0 	call	4111a4ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
41116414:	00800044 	movi	r2,1
41116418:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
4111641c:	0001883a 	nop
41116420:	e037883a 	mov	sp,fp
41116424:	dfc00117 	ldw	ra,4(sp)
41116428:	df000017 	ldw	fp,0(sp)
4111642c:	dec00204 	addi	sp,sp,8
41116430:	f800283a 	ret

41116434 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
41116434:	defffe04 	addi	sp,sp,-8
41116438:	dfc00115 	stw	ra,4(sp)
4111643c:	df000015 	stw	fp,0(sp)
41116440:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
41116444:	01c0fa04 	movi	r7,1000
41116448:	018000c4 	movi	r6,3
4111644c:	000b883a 	mov	r5,zero
41116450:	01100034 	movhi	r4,16384
41116454:	21021004 	addi	r4,r4,2112
41116458:	1116ffc0 	call	41116ffc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
4111645c:	01800084 	movi	r6,2
41116460:	000b883a 	mov	r5,zero
41116464:	011044b4 	movhi	r4,16658
41116468:	2132ea04 	addi	r4,r4,-13400
4111646c:	11166800 	call	41116680 <altera_avalon_jtag_uart_init>
41116470:	011044b4 	movhi	r4,16658
41116474:	2132e004 	addi	r4,r4,-13440
41116478:	11163c80 	call	411163c8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
4111647c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
41116480:	01800184 	movi	r6,6
41116484:	000b883a 	mov	r5,zero
41116488:	011044b4 	movhi	r4,16658
4111648c:	21370204 	addi	r4,r4,-9208
41116490:	11171880 	call	41117188 <altera_avalon_uart_init>
41116494:	011044b4 	movhi	r4,16658
41116498:	2136f804 	addi	r4,r4,-9248
4111649c:	11163c80 	call	411163c8 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M0, dma_DDR_M0);
411164a0:	009044b4 	movhi	r2,16658
411164a4:	10b72904 	addi	r2,r2,-9052
411164a8:	10c00717 	ldw	r3,28(r2)
411164ac:	009044b4 	movhi	r2,16658
411164b0:	10b72904 	addi	r2,r2,-9052
411164b4:	10800817 	ldw	r2,32(r2)
411164b8:	100d883a 	mov	r6,r2
411164bc:	180b883a 	mov	r5,r3
411164c0:	011044b4 	movhi	r4,16658
411164c4:	21372904 	addi	r4,r4,-9052
411164c8:	111951c0 	call	4111951c <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
411164cc:	009044b4 	movhi	r2,16658
411164d0:	10b74104 	addi	r2,r2,-8956
411164d4:	10c00717 	ldw	r3,28(r2)
411164d8:	009044b4 	movhi	r2,16658
411164dc:	10b74104 	addi	r2,r2,-8956
411164e0:	10800817 	ldw	r2,32(r2)
411164e4:	100d883a 	mov	r6,r2
411164e8:	180b883a 	mov	r5,r3
411164ec:	011044b4 	movhi	r4,16658
411164f0:	21374104 	addi	r4,r4,-8956
411164f4:	111951c0 	call	4111951c <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
411164f8:	011044b4 	movhi	r4,16658
411164fc:	21375904 	addi	r4,r4,-8860
41116500:	11163c80 	call	411163c8 <alt_dev_reg>
}
41116504:	0001883a 	nop
41116508:	e037883a 	mov	sp,fp
4111650c:	dfc00117 	ldw	ra,4(sp)
41116510:	df000017 	ldw	fp,0(sp)
41116514:	dec00204 	addi	sp,sp,8
41116518:	f800283a 	ret

4111651c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
4111651c:	defffa04 	addi	sp,sp,-24
41116520:	dfc00515 	stw	ra,20(sp)
41116524:	df000415 	stw	fp,16(sp)
41116528:	df000404 	addi	fp,sp,16
4111652c:	e13ffd15 	stw	r4,-12(fp)
41116530:	e17ffe15 	stw	r5,-8(fp)
41116534:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
41116538:	e0bffd17 	ldw	r2,-12(fp)
4111653c:	10800017 	ldw	r2,0(r2)
41116540:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
41116544:	e0bffc17 	ldw	r2,-16(fp)
41116548:	10c00a04 	addi	r3,r2,40
4111654c:	e0bffd17 	ldw	r2,-12(fp)
41116550:	10800217 	ldw	r2,8(r2)
41116554:	100f883a 	mov	r7,r2
41116558:	e1bfff17 	ldw	r6,-4(fp)
4111655c:	e17ffe17 	ldw	r5,-8(fp)
41116560:	1809883a 	mov	r4,r3
41116564:	1116b440 	call	41116b44 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
41116568:	e037883a 	mov	sp,fp
4111656c:	dfc00117 	ldw	ra,4(sp)
41116570:	df000017 	ldw	fp,0(sp)
41116574:	dec00204 	addi	sp,sp,8
41116578:	f800283a 	ret

4111657c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
4111657c:	defffa04 	addi	sp,sp,-24
41116580:	dfc00515 	stw	ra,20(sp)
41116584:	df000415 	stw	fp,16(sp)
41116588:	df000404 	addi	fp,sp,16
4111658c:	e13ffd15 	stw	r4,-12(fp)
41116590:	e17ffe15 	stw	r5,-8(fp)
41116594:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
41116598:	e0bffd17 	ldw	r2,-12(fp)
4111659c:	10800017 	ldw	r2,0(r2)
411165a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
411165a4:	e0bffc17 	ldw	r2,-16(fp)
411165a8:	10c00a04 	addi	r3,r2,40
411165ac:	e0bffd17 	ldw	r2,-12(fp)
411165b0:	10800217 	ldw	r2,8(r2)
411165b4:	100f883a 	mov	r7,r2
411165b8:	e1bfff17 	ldw	r6,-4(fp)
411165bc:	e17ffe17 	ldw	r5,-8(fp)
411165c0:	1809883a 	mov	r4,r3
411165c4:	1116d600 	call	41116d60 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
411165c8:	e037883a 	mov	sp,fp
411165cc:	dfc00117 	ldw	ra,4(sp)
411165d0:	df000017 	ldw	fp,0(sp)
411165d4:	dec00204 	addi	sp,sp,8
411165d8:	f800283a 	ret

411165dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
411165dc:	defffc04 	addi	sp,sp,-16
411165e0:	dfc00315 	stw	ra,12(sp)
411165e4:	df000215 	stw	fp,8(sp)
411165e8:	df000204 	addi	fp,sp,8
411165ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
411165f0:	e0bfff17 	ldw	r2,-4(fp)
411165f4:	10800017 	ldw	r2,0(r2)
411165f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
411165fc:	e0bffe17 	ldw	r2,-8(fp)
41116600:	10c00a04 	addi	r3,r2,40
41116604:	e0bfff17 	ldw	r2,-4(fp)
41116608:	10800217 	ldw	r2,8(r2)
4111660c:	100b883a 	mov	r5,r2
41116610:	1809883a 	mov	r4,r3
41116614:	11169ec0 	call	411169ec <altera_avalon_jtag_uart_close>
}
41116618:	e037883a 	mov	sp,fp
4111661c:	dfc00117 	ldw	ra,4(sp)
41116620:	df000017 	ldw	fp,0(sp)
41116624:	dec00204 	addi	sp,sp,8
41116628:	f800283a 	ret

4111662c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
4111662c:	defffa04 	addi	sp,sp,-24
41116630:	dfc00515 	stw	ra,20(sp)
41116634:	df000415 	stw	fp,16(sp)
41116638:	df000404 	addi	fp,sp,16
4111663c:	e13ffd15 	stw	r4,-12(fp)
41116640:	e17ffe15 	stw	r5,-8(fp)
41116644:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
41116648:	e0bffd17 	ldw	r2,-12(fp)
4111664c:	10800017 	ldw	r2,0(r2)
41116650:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
41116654:	e0bffc17 	ldw	r2,-16(fp)
41116658:	10800a04 	addi	r2,r2,40
4111665c:	e1bfff17 	ldw	r6,-4(fp)
41116660:	e17ffe17 	ldw	r5,-8(fp)
41116664:	1009883a 	mov	r4,r2
41116668:	1116a540 	call	41116a54 <altera_avalon_jtag_uart_ioctl>
}
4111666c:	e037883a 	mov	sp,fp
41116670:	dfc00117 	ldw	ra,4(sp)
41116674:	df000017 	ldw	fp,0(sp)
41116678:	dec00204 	addi	sp,sp,8
4111667c:	f800283a 	ret

41116680 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
41116680:	defffa04 	addi	sp,sp,-24
41116684:	dfc00515 	stw	ra,20(sp)
41116688:	df000415 	stw	fp,16(sp)
4111668c:	df000404 	addi	fp,sp,16
41116690:	e13ffd15 	stw	r4,-12(fp)
41116694:	e17ffe15 	stw	r5,-8(fp)
41116698:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4111669c:	e0bffd17 	ldw	r2,-12(fp)
411166a0:	00c00044 	movi	r3,1
411166a4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
411166a8:	e0bffd17 	ldw	r2,-12(fp)
411166ac:	10800017 	ldw	r2,0(r2)
411166b0:	10800104 	addi	r2,r2,4
411166b4:	1007883a 	mov	r3,r2
411166b8:	e0bffd17 	ldw	r2,-12(fp)
411166bc:	10800817 	ldw	r2,32(r2)
411166c0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
411166c4:	e0bffe17 	ldw	r2,-8(fp)
411166c8:	e0ffff17 	ldw	r3,-4(fp)
411166cc:	d8000015 	stw	zero,0(sp)
411166d0:	e1fffd17 	ldw	r7,-12(fp)
411166d4:	01904474 	movhi	r6,16657
411166d8:	3199d004 	addi	r6,r6,26432
411166dc:	180b883a 	mov	r5,r3
411166e0:	1009883a 	mov	r4,r2
411166e4:	1119c500 	call	41119c50 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
411166e8:	e0bffd17 	ldw	r2,-12(fp)
411166ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
411166f0:	e0bffd17 	ldw	r2,-12(fp)
411166f4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
411166f8:	d0e03d17 	ldw	r3,-32524(gp)
411166fc:	e1fffd17 	ldw	r7,-12(fp)
41116700:	01904474 	movhi	r6,16657
41116704:	319a5304 	addi	r6,r6,26956
41116708:	180b883a 	mov	r5,r3
4111670c:	1009883a 	mov	r4,r2
41116710:	11197cc0 	call	411197cc <alt_alarm_start>
41116714:	1000040e 	bge	r2,zero,41116728 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
41116718:	e0fffd17 	ldw	r3,-12(fp)
4111671c:	00a00034 	movhi	r2,32768
41116720:	10bfffc4 	addi	r2,r2,-1
41116724:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
41116728:	0001883a 	nop
4111672c:	e037883a 	mov	sp,fp
41116730:	dfc00117 	ldw	ra,4(sp)
41116734:	df000017 	ldw	fp,0(sp)
41116738:	dec00204 	addi	sp,sp,8
4111673c:	f800283a 	ret

41116740 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
41116740:	defff804 	addi	sp,sp,-32
41116744:	df000715 	stw	fp,28(sp)
41116748:	df000704 	addi	fp,sp,28
4111674c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
41116750:	e0bfff17 	ldw	r2,-4(fp)
41116754:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
41116758:	e0bffb17 	ldw	r2,-20(fp)
4111675c:	10800017 	ldw	r2,0(r2)
41116760:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
41116764:	e0bffc17 	ldw	r2,-16(fp)
41116768:	10800104 	addi	r2,r2,4
4111676c:	10800037 	ldwio	r2,0(r2)
41116770:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
41116774:	e0bffd17 	ldw	r2,-12(fp)
41116778:	1080c00c 	andi	r2,r2,768
4111677c:	10006d26 	beq	r2,zero,41116934 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
41116780:	e0bffd17 	ldw	r2,-12(fp)
41116784:	1080400c 	andi	r2,r2,256
41116788:	10003526 	beq	r2,zero,41116860 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
4111678c:	00800074 	movhi	r2,1
41116790:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
41116794:	e0bffb17 	ldw	r2,-20(fp)
41116798:	10800a17 	ldw	r2,40(r2)
4111679c:	10800044 	addi	r2,r2,1
411167a0:	1081ffcc 	andi	r2,r2,2047
411167a4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
411167a8:	e0bffb17 	ldw	r2,-20(fp)
411167ac:	10c00b17 	ldw	r3,44(r2)
411167b0:	e0bffe17 	ldw	r2,-8(fp)
411167b4:	18801526 	beq	r3,r2,4111680c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
411167b8:	e0bffc17 	ldw	r2,-16(fp)
411167bc:	10800037 	ldwio	r2,0(r2)
411167c0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
411167c4:	e0bff917 	ldw	r2,-28(fp)
411167c8:	10a0000c 	andi	r2,r2,32768
411167cc:	10001126 	beq	r2,zero,41116814 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
411167d0:	e0bffb17 	ldw	r2,-20(fp)
411167d4:	10800a17 	ldw	r2,40(r2)
411167d8:	e0fff917 	ldw	r3,-28(fp)
411167dc:	1809883a 	mov	r4,r3
411167e0:	e0fffb17 	ldw	r3,-20(fp)
411167e4:	1885883a 	add	r2,r3,r2
411167e8:	10800e04 	addi	r2,r2,56
411167ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
411167f0:	e0bffb17 	ldw	r2,-20(fp)
411167f4:	10800a17 	ldw	r2,40(r2)
411167f8:	10800044 	addi	r2,r2,1
411167fc:	10c1ffcc 	andi	r3,r2,2047
41116800:	e0bffb17 	ldw	r2,-20(fp)
41116804:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
41116808:	003fe206 	br	41116794 <__reset+0xbb0f6794>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
4111680c:	0001883a 	nop
41116810:	00000106 	br	41116818 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
41116814:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
41116818:	e0bff917 	ldw	r2,-28(fp)
4111681c:	10bfffec 	andhi	r2,r2,65535
41116820:	10000f26 	beq	r2,zero,41116860 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
41116824:	e0bffb17 	ldw	r2,-20(fp)
41116828:	10c00817 	ldw	r3,32(r2)
4111682c:	00bfff84 	movi	r2,-2
41116830:	1886703a 	and	r3,r3,r2
41116834:	e0bffb17 	ldw	r2,-20(fp)
41116838:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
4111683c:	e0bffc17 	ldw	r2,-16(fp)
41116840:	10800104 	addi	r2,r2,4
41116844:	1007883a 	mov	r3,r2
41116848:	e0bffb17 	ldw	r2,-20(fp)
4111684c:	10800817 	ldw	r2,32(r2)
41116850:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
41116854:	e0bffc17 	ldw	r2,-16(fp)
41116858:	10800104 	addi	r2,r2,4
4111685c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
41116860:	e0bffd17 	ldw	r2,-12(fp)
41116864:	1080800c 	andi	r2,r2,512
41116868:	103fbe26 	beq	r2,zero,41116764 <__reset+0xbb0f6764>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
4111686c:	e0bffd17 	ldw	r2,-12(fp)
41116870:	1004d43a 	srli	r2,r2,16
41116874:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
41116878:	00001406 	br	411168cc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
4111687c:	e0bffc17 	ldw	r2,-16(fp)
41116880:	e0fffb17 	ldw	r3,-20(fp)
41116884:	18c00d17 	ldw	r3,52(r3)
41116888:	e13ffb17 	ldw	r4,-20(fp)
4111688c:	20c7883a 	add	r3,r4,r3
41116890:	18c20e04 	addi	r3,r3,2104
41116894:	18c00003 	ldbu	r3,0(r3)
41116898:	18c03fcc 	andi	r3,r3,255
4111689c:	18c0201c 	xori	r3,r3,128
411168a0:	18ffe004 	addi	r3,r3,-128
411168a4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
411168a8:	e0bffb17 	ldw	r2,-20(fp)
411168ac:	10800d17 	ldw	r2,52(r2)
411168b0:	10800044 	addi	r2,r2,1
411168b4:	10c1ffcc 	andi	r3,r2,2047
411168b8:	e0bffb17 	ldw	r2,-20(fp)
411168bc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
411168c0:	e0bffa17 	ldw	r2,-24(fp)
411168c4:	10bfffc4 	addi	r2,r2,-1
411168c8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
411168cc:	e0bffa17 	ldw	r2,-24(fp)
411168d0:	10000526 	beq	r2,zero,411168e8 <altera_avalon_jtag_uart_irq+0x1a8>
411168d4:	e0bffb17 	ldw	r2,-20(fp)
411168d8:	10c00d17 	ldw	r3,52(r2)
411168dc:	e0bffb17 	ldw	r2,-20(fp)
411168e0:	10800c17 	ldw	r2,48(r2)
411168e4:	18bfe51e 	bne	r3,r2,4111687c <__reset+0xbb0f687c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
411168e8:	e0bffa17 	ldw	r2,-24(fp)
411168ec:	103f9d26 	beq	r2,zero,41116764 <__reset+0xbb0f6764>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
411168f0:	e0bffb17 	ldw	r2,-20(fp)
411168f4:	10c00817 	ldw	r3,32(r2)
411168f8:	00bfff44 	movi	r2,-3
411168fc:	1886703a 	and	r3,r3,r2
41116900:	e0bffb17 	ldw	r2,-20(fp)
41116904:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
41116908:	e0bffb17 	ldw	r2,-20(fp)
4111690c:	10800017 	ldw	r2,0(r2)
41116910:	10800104 	addi	r2,r2,4
41116914:	1007883a 	mov	r3,r2
41116918:	e0bffb17 	ldw	r2,-20(fp)
4111691c:	10800817 	ldw	r2,32(r2)
41116920:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
41116924:	e0bffc17 	ldw	r2,-16(fp)
41116928:	10800104 	addi	r2,r2,4
4111692c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
41116930:	003f8c06 	br	41116764 <__reset+0xbb0f6764>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
41116934:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
41116938:	0001883a 	nop
4111693c:	e037883a 	mov	sp,fp
41116940:	df000017 	ldw	fp,0(sp)
41116944:	dec00104 	addi	sp,sp,4
41116948:	f800283a 	ret

4111694c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
4111694c:	defff804 	addi	sp,sp,-32
41116950:	df000715 	stw	fp,28(sp)
41116954:	df000704 	addi	fp,sp,28
41116958:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
4111695c:	e0bffb17 	ldw	r2,-20(fp)
41116960:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
41116964:	e0bff917 	ldw	r2,-28(fp)
41116968:	10800017 	ldw	r2,0(r2)
4111696c:	10800104 	addi	r2,r2,4
41116970:	10800037 	ldwio	r2,0(r2)
41116974:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
41116978:	e0bffa17 	ldw	r2,-24(fp)
4111697c:	1081000c 	andi	r2,r2,1024
41116980:	10000b26 	beq	r2,zero,411169b0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
41116984:	e0bff917 	ldw	r2,-28(fp)
41116988:	10800017 	ldw	r2,0(r2)
4111698c:	10800104 	addi	r2,r2,4
41116990:	1007883a 	mov	r3,r2
41116994:	e0bff917 	ldw	r2,-28(fp)
41116998:	10800817 	ldw	r2,32(r2)
4111699c:	10810014 	ori	r2,r2,1024
411169a0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
411169a4:	e0bff917 	ldw	r2,-28(fp)
411169a8:	10000915 	stw	zero,36(r2)
411169ac:	00000a06 	br	411169d8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
411169b0:	e0bff917 	ldw	r2,-28(fp)
411169b4:	10c00917 	ldw	r3,36(r2)
411169b8:	00a00034 	movhi	r2,32768
411169bc:	10bfff04 	addi	r2,r2,-4
411169c0:	10c00536 	bltu	r2,r3,411169d8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
411169c4:	e0bff917 	ldw	r2,-28(fp)
411169c8:	10800917 	ldw	r2,36(r2)
411169cc:	10c00044 	addi	r3,r2,1
411169d0:	e0bff917 	ldw	r2,-28(fp)
411169d4:	10c00915 	stw	r3,36(r2)
411169d8:	d0a03d17 	ldw	r2,-32524(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
411169dc:	e037883a 	mov	sp,fp
411169e0:	df000017 	ldw	fp,0(sp)
411169e4:	dec00104 	addi	sp,sp,4
411169e8:	f800283a 	ret

411169ec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
411169ec:	defffd04 	addi	sp,sp,-12
411169f0:	df000215 	stw	fp,8(sp)
411169f4:	df000204 	addi	fp,sp,8
411169f8:	e13ffe15 	stw	r4,-8(fp)
411169fc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
41116a00:	00000506 	br	41116a18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
41116a04:	e0bfff17 	ldw	r2,-4(fp)
41116a08:	1090000c 	andi	r2,r2,16384
41116a0c:	10000226 	beq	r2,zero,41116a18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
41116a10:	00bffd44 	movi	r2,-11
41116a14:	00000b06 	br	41116a44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
41116a18:	e0bffe17 	ldw	r2,-8(fp)
41116a1c:	10c00d17 	ldw	r3,52(r2)
41116a20:	e0bffe17 	ldw	r2,-8(fp)
41116a24:	10800c17 	ldw	r2,48(r2)
41116a28:	18800526 	beq	r3,r2,41116a40 <altera_avalon_jtag_uart_close+0x54>
41116a2c:	e0bffe17 	ldw	r2,-8(fp)
41116a30:	10c00917 	ldw	r3,36(r2)
41116a34:	e0bffe17 	ldw	r2,-8(fp)
41116a38:	10800117 	ldw	r2,4(r2)
41116a3c:	18bff136 	bltu	r3,r2,41116a04 <__reset+0xbb0f6a04>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
41116a40:	0005883a 	mov	r2,zero
}
41116a44:	e037883a 	mov	sp,fp
41116a48:	df000017 	ldw	fp,0(sp)
41116a4c:	dec00104 	addi	sp,sp,4
41116a50:	f800283a 	ret

41116a54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
41116a54:	defffa04 	addi	sp,sp,-24
41116a58:	df000515 	stw	fp,20(sp)
41116a5c:	df000504 	addi	fp,sp,20
41116a60:	e13ffd15 	stw	r4,-12(fp)
41116a64:	e17ffe15 	stw	r5,-8(fp)
41116a68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
41116a6c:	00bff9c4 	movi	r2,-25
41116a70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
41116a74:	e0bffe17 	ldw	r2,-8(fp)
41116a78:	10da8060 	cmpeqi	r3,r2,27137
41116a7c:	1800031e 	bne	r3,zero,41116a8c <altera_avalon_jtag_uart_ioctl+0x38>
41116a80:	109a80a0 	cmpeqi	r2,r2,27138
41116a84:	1000181e 	bne	r2,zero,41116ae8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
41116a88:	00002906 	br	41116b30 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
41116a8c:	e0bffd17 	ldw	r2,-12(fp)
41116a90:	10c00117 	ldw	r3,4(r2)
41116a94:	00a00034 	movhi	r2,32768
41116a98:	10bfffc4 	addi	r2,r2,-1
41116a9c:	18802126 	beq	r3,r2,41116b24 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
41116aa0:	e0bfff17 	ldw	r2,-4(fp)
41116aa4:	10800017 	ldw	r2,0(r2)
41116aa8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
41116aac:	e0bffc17 	ldw	r2,-16(fp)
41116ab0:	10800090 	cmplti	r2,r2,2
41116ab4:	1000061e 	bne	r2,zero,41116ad0 <altera_avalon_jtag_uart_ioctl+0x7c>
41116ab8:	e0fffc17 	ldw	r3,-16(fp)
41116abc:	00a00034 	movhi	r2,32768
41116ac0:	10bfffc4 	addi	r2,r2,-1
41116ac4:	18800226 	beq	r3,r2,41116ad0 <altera_avalon_jtag_uart_ioctl+0x7c>
41116ac8:	e0bffc17 	ldw	r2,-16(fp)
41116acc:	00000206 	br	41116ad8 <altera_avalon_jtag_uart_ioctl+0x84>
41116ad0:	00a00034 	movhi	r2,32768
41116ad4:	10bfff84 	addi	r2,r2,-2
41116ad8:	e0fffd17 	ldw	r3,-12(fp)
41116adc:	18800115 	stw	r2,4(r3)
      rc = 0;
41116ae0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
41116ae4:	00000f06 	br	41116b24 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
41116ae8:	e0bffd17 	ldw	r2,-12(fp)
41116aec:	10c00117 	ldw	r3,4(r2)
41116af0:	00a00034 	movhi	r2,32768
41116af4:	10bfffc4 	addi	r2,r2,-1
41116af8:	18800c26 	beq	r3,r2,41116b2c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
41116afc:	e0bffd17 	ldw	r2,-12(fp)
41116b00:	10c00917 	ldw	r3,36(r2)
41116b04:	e0bffd17 	ldw	r2,-12(fp)
41116b08:	10800117 	ldw	r2,4(r2)
41116b0c:	1885803a 	cmpltu	r2,r3,r2
41116b10:	10c03fcc 	andi	r3,r2,255
41116b14:	e0bfff17 	ldw	r2,-4(fp)
41116b18:	10c00015 	stw	r3,0(r2)
      rc = 0;
41116b1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
41116b20:	00000206 	br	41116b2c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
41116b24:	0001883a 	nop
41116b28:	00000106 	br	41116b30 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
41116b2c:	0001883a 	nop

  default:
    break;
  }

  return rc;
41116b30:	e0bffb17 	ldw	r2,-20(fp)
}
41116b34:	e037883a 	mov	sp,fp
41116b38:	df000017 	ldw	fp,0(sp)
41116b3c:	dec00104 	addi	sp,sp,4
41116b40:	f800283a 	ret

41116b44 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
41116b44:	defff304 	addi	sp,sp,-52
41116b48:	dfc00c15 	stw	ra,48(sp)
41116b4c:	df000b15 	stw	fp,44(sp)
41116b50:	df000b04 	addi	fp,sp,44
41116b54:	e13ffc15 	stw	r4,-16(fp)
41116b58:	e17ffd15 	stw	r5,-12(fp)
41116b5c:	e1bffe15 	stw	r6,-8(fp)
41116b60:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
41116b64:	e0bffd17 	ldw	r2,-12(fp)
41116b68:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
41116b6c:	00004706 	br	41116c8c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
41116b70:	e0bffc17 	ldw	r2,-16(fp)
41116b74:	10800a17 	ldw	r2,40(r2)
41116b78:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
41116b7c:	e0bffc17 	ldw	r2,-16(fp)
41116b80:	10800b17 	ldw	r2,44(r2)
41116b84:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
41116b88:	e0fff717 	ldw	r3,-36(fp)
41116b8c:	e0bff817 	ldw	r2,-32(fp)
41116b90:	18800536 	bltu	r3,r2,41116ba8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
41116b94:	e0fff717 	ldw	r3,-36(fp)
41116b98:	e0bff817 	ldw	r2,-32(fp)
41116b9c:	1885c83a 	sub	r2,r3,r2
41116ba0:	e0bff615 	stw	r2,-40(fp)
41116ba4:	00000406 	br	41116bb8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
41116ba8:	00c20004 	movi	r3,2048
41116bac:	e0bff817 	ldw	r2,-32(fp)
41116bb0:	1885c83a 	sub	r2,r3,r2
41116bb4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
41116bb8:	e0bff617 	ldw	r2,-40(fp)
41116bbc:	10001e26 	beq	r2,zero,41116c38 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
41116bc0:	e0fffe17 	ldw	r3,-8(fp)
41116bc4:	e0bff617 	ldw	r2,-40(fp)
41116bc8:	1880022e 	bgeu	r3,r2,41116bd4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
41116bcc:	e0bffe17 	ldw	r2,-8(fp)
41116bd0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
41116bd4:	e0bffc17 	ldw	r2,-16(fp)
41116bd8:	10c00e04 	addi	r3,r2,56
41116bdc:	e0bff817 	ldw	r2,-32(fp)
41116be0:	1885883a 	add	r2,r3,r2
41116be4:	e1bff617 	ldw	r6,-40(fp)
41116be8:	100b883a 	mov	r5,r2
41116bec:	e13ff517 	ldw	r4,-44(fp)
41116bf0:	11094d00 	call	411094d0 <memcpy>
      ptr   += n;
41116bf4:	e0fff517 	ldw	r3,-44(fp)
41116bf8:	e0bff617 	ldw	r2,-40(fp)
41116bfc:	1885883a 	add	r2,r3,r2
41116c00:	e0bff515 	stw	r2,-44(fp)
      space -= n;
41116c04:	e0fffe17 	ldw	r3,-8(fp)
41116c08:	e0bff617 	ldw	r2,-40(fp)
41116c0c:	1885c83a 	sub	r2,r3,r2
41116c10:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
41116c14:	e0fff817 	ldw	r3,-32(fp)
41116c18:	e0bff617 	ldw	r2,-40(fp)
41116c1c:	1885883a 	add	r2,r3,r2
41116c20:	10c1ffcc 	andi	r3,r2,2047
41116c24:	e0bffc17 	ldw	r2,-16(fp)
41116c28:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
41116c2c:	e0bffe17 	ldw	r2,-8(fp)
41116c30:	00bfcf16 	blt	zero,r2,41116b70 <__reset+0xbb0f6b70>
41116c34:	00000106 	br	41116c3c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
41116c38:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
41116c3c:	e0fff517 	ldw	r3,-44(fp)
41116c40:	e0bffd17 	ldw	r2,-12(fp)
41116c44:	1880141e 	bne	r3,r2,41116c98 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
41116c48:	e0bfff17 	ldw	r2,-4(fp)
41116c4c:	1090000c 	andi	r2,r2,16384
41116c50:	1000131e 	bne	r2,zero,41116ca0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
41116c54:	0001883a 	nop
41116c58:	e0bffc17 	ldw	r2,-16(fp)
41116c5c:	10c00a17 	ldw	r3,40(r2)
41116c60:	e0bff717 	ldw	r2,-36(fp)
41116c64:	1880051e 	bne	r3,r2,41116c7c <altera_avalon_jtag_uart_read+0x138>
41116c68:	e0bffc17 	ldw	r2,-16(fp)
41116c6c:	10c00917 	ldw	r3,36(r2)
41116c70:	e0bffc17 	ldw	r2,-16(fp)
41116c74:	10800117 	ldw	r2,4(r2)
41116c78:	18bff736 	bltu	r3,r2,41116c58 <__reset+0xbb0f6c58>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
41116c7c:	e0bffc17 	ldw	r2,-16(fp)
41116c80:	10c00a17 	ldw	r3,40(r2)
41116c84:	e0bff717 	ldw	r2,-36(fp)
41116c88:	18800726 	beq	r3,r2,41116ca8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
41116c8c:	e0bffe17 	ldw	r2,-8(fp)
41116c90:	00bfb716 	blt	zero,r2,41116b70 <__reset+0xbb0f6b70>
41116c94:	00000506 	br	41116cac <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
41116c98:	0001883a 	nop
41116c9c:	00000306 	br	41116cac <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
41116ca0:	0001883a 	nop
41116ca4:	00000106 	br	41116cac <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
41116ca8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
41116cac:	e0fff517 	ldw	r3,-44(fp)
41116cb0:	e0bffd17 	ldw	r2,-12(fp)
41116cb4:	18801826 	beq	r3,r2,41116d18 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41116cb8:	0005303a 	rdctl	r2,status
41116cbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41116cc0:	e0fffb17 	ldw	r3,-20(fp)
41116cc4:	00bfff84 	movi	r2,-2
41116cc8:	1884703a 	and	r2,r3,r2
41116ccc:	1001703a 	wrctl	status,r2
  
  return context;
41116cd0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
41116cd4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
41116cd8:	e0bffc17 	ldw	r2,-16(fp)
41116cdc:	10800817 	ldw	r2,32(r2)
41116ce0:	10c00054 	ori	r3,r2,1
41116ce4:	e0bffc17 	ldw	r2,-16(fp)
41116ce8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
41116cec:	e0bffc17 	ldw	r2,-16(fp)
41116cf0:	10800017 	ldw	r2,0(r2)
41116cf4:	10800104 	addi	r2,r2,4
41116cf8:	1007883a 	mov	r3,r2
41116cfc:	e0bffc17 	ldw	r2,-16(fp)
41116d00:	10800817 	ldw	r2,32(r2)
41116d04:	18800035 	stwio	r2,0(r3)
41116d08:	e0bffa17 	ldw	r2,-24(fp)
41116d0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41116d10:	e0bff917 	ldw	r2,-28(fp)
41116d14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
41116d18:	e0fff517 	ldw	r3,-44(fp)
41116d1c:	e0bffd17 	ldw	r2,-12(fp)
41116d20:	18800426 	beq	r3,r2,41116d34 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
41116d24:	e0fff517 	ldw	r3,-44(fp)
41116d28:	e0bffd17 	ldw	r2,-12(fp)
41116d2c:	1885c83a 	sub	r2,r3,r2
41116d30:	00000606 	br	41116d4c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
41116d34:	e0bfff17 	ldw	r2,-4(fp)
41116d38:	1090000c 	andi	r2,r2,16384
41116d3c:	10000226 	beq	r2,zero,41116d48 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
41116d40:	00bffd44 	movi	r2,-11
41116d44:	00000106 	br	41116d4c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
41116d48:	00bffec4 	movi	r2,-5
}
41116d4c:	e037883a 	mov	sp,fp
41116d50:	dfc00117 	ldw	ra,4(sp)
41116d54:	df000017 	ldw	fp,0(sp)
41116d58:	dec00204 	addi	sp,sp,8
41116d5c:	f800283a 	ret

41116d60 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
41116d60:	defff304 	addi	sp,sp,-52
41116d64:	dfc00c15 	stw	ra,48(sp)
41116d68:	df000b15 	stw	fp,44(sp)
41116d6c:	df000b04 	addi	fp,sp,44
41116d70:	e13ffc15 	stw	r4,-16(fp)
41116d74:	e17ffd15 	stw	r5,-12(fp)
41116d78:	e1bffe15 	stw	r6,-8(fp)
41116d7c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
41116d80:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
41116d84:	e0bffd17 	ldw	r2,-12(fp)
41116d88:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
41116d8c:	00003706 	br	41116e6c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
41116d90:	e0bffc17 	ldw	r2,-16(fp)
41116d94:	10800c17 	ldw	r2,48(r2)
41116d98:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
41116d9c:	e0bffc17 	ldw	r2,-16(fp)
41116da0:	10800d17 	ldw	r2,52(r2)
41116da4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
41116da8:	e0fff917 	ldw	r3,-28(fp)
41116dac:	e0bff517 	ldw	r2,-44(fp)
41116db0:	1880062e 	bgeu	r3,r2,41116dcc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
41116db4:	e0fff517 	ldw	r3,-44(fp)
41116db8:	e0bff917 	ldw	r2,-28(fp)
41116dbc:	1885c83a 	sub	r2,r3,r2
41116dc0:	10bfffc4 	addi	r2,r2,-1
41116dc4:	e0bff615 	stw	r2,-40(fp)
41116dc8:	00000b06 	br	41116df8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
41116dcc:	e0bff517 	ldw	r2,-44(fp)
41116dd0:	10000526 	beq	r2,zero,41116de8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
41116dd4:	00c20004 	movi	r3,2048
41116dd8:	e0bff917 	ldw	r2,-28(fp)
41116ddc:	1885c83a 	sub	r2,r3,r2
41116de0:	e0bff615 	stw	r2,-40(fp)
41116de4:	00000406 	br	41116df8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
41116de8:	00c1ffc4 	movi	r3,2047
41116dec:	e0bff917 	ldw	r2,-28(fp)
41116df0:	1885c83a 	sub	r2,r3,r2
41116df4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
41116df8:	e0bff617 	ldw	r2,-40(fp)
41116dfc:	10001e26 	beq	r2,zero,41116e78 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
41116e00:	e0fffe17 	ldw	r3,-8(fp)
41116e04:	e0bff617 	ldw	r2,-40(fp)
41116e08:	1880022e 	bgeu	r3,r2,41116e14 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
41116e0c:	e0bffe17 	ldw	r2,-8(fp)
41116e10:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
41116e14:	e0bffc17 	ldw	r2,-16(fp)
41116e18:	10c20e04 	addi	r3,r2,2104
41116e1c:	e0bff917 	ldw	r2,-28(fp)
41116e20:	1885883a 	add	r2,r3,r2
41116e24:	e1bff617 	ldw	r6,-40(fp)
41116e28:	e17ffd17 	ldw	r5,-12(fp)
41116e2c:	1009883a 	mov	r4,r2
41116e30:	11094d00 	call	411094d0 <memcpy>
      ptr   += n;
41116e34:	e0fffd17 	ldw	r3,-12(fp)
41116e38:	e0bff617 	ldw	r2,-40(fp)
41116e3c:	1885883a 	add	r2,r3,r2
41116e40:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
41116e44:	e0fffe17 	ldw	r3,-8(fp)
41116e48:	e0bff617 	ldw	r2,-40(fp)
41116e4c:	1885c83a 	sub	r2,r3,r2
41116e50:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
41116e54:	e0fff917 	ldw	r3,-28(fp)
41116e58:	e0bff617 	ldw	r2,-40(fp)
41116e5c:	1885883a 	add	r2,r3,r2
41116e60:	10c1ffcc 	andi	r3,r2,2047
41116e64:	e0bffc17 	ldw	r2,-16(fp)
41116e68:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
41116e6c:	e0bffe17 	ldw	r2,-8(fp)
41116e70:	00bfc716 	blt	zero,r2,41116d90 <__reset+0xbb0f6d90>
41116e74:	00000106 	br	41116e7c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
41116e78:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41116e7c:	0005303a 	rdctl	r2,status
41116e80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41116e84:	e0fffb17 	ldw	r3,-20(fp)
41116e88:	00bfff84 	movi	r2,-2
41116e8c:	1884703a 	and	r2,r3,r2
41116e90:	1001703a 	wrctl	status,r2
  
  return context;
41116e94:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
41116e98:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
41116e9c:	e0bffc17 	ldw	r2,-16(fp)
41116ea0:	10800817 	ldw	r2,32(r2)
41116ea4:	10c00094 	ori	r3,r2,2
41116ea8:	e0bffc17 	ldw	r2,-16(fp)
41116eac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
41116eb0:	e0bffc17 	ldw	r2,-16(fp)
41116eb4:	10800017 	ldw	r2,0(r2)
41116eb8:	10800104 	addi	r2,r2,4
41116ebc:	1007883a 	mov	r3,r2
41116ec0:	e0bffc17 	ldw	r2,-16(fp)
41116ec4:	10800817 	ldw	r2,32(r2)
41116ec8:	18800035 	stwio	r2,0(r3)
41116ecc:	e0bffa17 	ldw	r2,-24(fp)
41116ed0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41116ed4:	e0bff817 	ldw	r2,-32(fp)
41116ed8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
41116edc:	e0bffe17 	ldw	r2,-8(fp)
41116ee0:	0080100e 	bge	zero,r2,41116f24 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
41116ee4:	e0bfff17 	ldw	r2,-4(fp)
41116ee8:	1090000c 	andi	r2,r2,16384
41116eec:	1000101e 	bne	r2,zero,41116f30 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
41116ef0:	0001883a 	nop
41116ef4:	e0bffc17 	ldw	r2,-16(fp)
41116ef8:	10c00d17 	ldw	r3,52(r2)
41116efc:	e0bff517 	ldw	r2,-44(fp)
41116f00:	1880051e 	bne	r3,r2,41116f18 <altera_avalon_jtag_uart_write+0x1b8>
41116f04:	e0bffc17 	ldw	r2,-16(fp)
41116f08:	10c00917 	ldw	r3,36(r2)
41116f0c:	e0bffc17 	ldw	r2,-16(fp)
41116f10:	10800117 	ldw	r2,4(r2)
41116f14:	18bff736 	bltu	r3,r2,41116ef4 <__reset+0xbb0f6ef4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
41116f18:	e0bffc17 	ldw	r2,-16(fp)
41116f1c:	10800917 	ldw	r2,36(r2)
41116f20:	1000051e 	bne	r2,zero,41116f38 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
41116f24:	e0bffe17 	ldw	r2,-8(fp)
41116f28:	00bfd016 	blt	zero,r2,41116e6c <__reset+0xbb0f6e6c>
41116f2c:	00000306 	br	41116f3c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
41116f30:	0001883a 	nop
41116f34:	00000106 	br	41116f3c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
41116f38:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
41116f3c:	e0fffd17 	ldw	r3,-12(fp)
41116f40:	e0bff717 	ldw	r2,-36(fp)
41116f44:	18800426 	beq	r3,r2,41116f58 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
41116f48:	e0fffd17 	ldw	r3,-12(fp)
41116f4c:	e0bff717 	ldw	r2,-36(fp)
41116f50:	1885c83a 	sub	r2,r3,r2
41116f54:	00000606 	br	41116f70 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
41116f58:	e0bfff17 	ldw	r2,-4(fp)
41116f5c:	1090000c 	andi	r2,r2,16384
41116f60:	10000226 	beq	r2,zero,41116f6c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
41116f64:	00bffd44 	movi	r2,-11
41116f68:	00000106 	br	41116f70 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
41116f6c:	00bffec4 	movi	r2,-5
}
41116f70:	e037883a 	mov	sp,fp
41116f74:	dfc00117 	ldw	ra,4(sp)
41116f78:	df000017 	ldw	fp,0(sp)
41116f7c:	dec00204 	addi	sp,sp,8
41116f80:	f800283a 	ret

41116f84 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
41116f84:	defffa04 	addi	sp,sp,-24
41116f88:	dfc00515 	stw	ra,20(sp)
41116f8c:	df000415 	stw	fp,16(sp)
41116f90:	df000404 	addi	fp,sp,16
41116f94:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
41116f98:	0007883a 	mov	r3,zero
41116f9c:	e0bfff17 	ldw	r2,-4(fp)
41116fa0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
41116fa4:	e0bfff17 	ldw	r2,-4(fp)
41116fa8:	10800104 	addi	r2,r2,4
41116fac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41116fb0:	0005303a 	rdctl	r2,status
41116fb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41116fb8:	e0fffd17 	ldw	r3,-12(fp)
41116fbc:	00bfff84 	movi	r2,-2
41116fc0:	1884703a 	and	r2,r3,r2
41116fc4:	1001703a 	wrctl	status,r2
  
  return context;
41116fc8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
41116fcc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
41116fd0:	111615c0 	call	4111615c <alt_tick>
41116fd4:	e0bffc17 	ldw	r2,-16(fp)
41116fd8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41116fdc:	e0bffe17 	ldw	r2,-8(fp)
41116fe0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
41116fe4:	0001883a 	nop
41116fe8:	e037883a 	mov	sp,fp
41116fec:	dfc00117 	ldw	ra,4(sp)
41116ff0:	df000017 	ldw	fp,0(sp)
41116ff4:	dec00204 	addi	sp,sp,8
41116ff8:	f800283a 	ret

41116ffc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
41116ffc:	defff804 	addi	sp,sp,-32
41117000:	dfc00715 	stw	ra,28(sp)
41117004:	df000615 	stw	fp,24(sp)
41117008:	df000604 	addi	fp,sp,24
4111700c:	e13ffc15 	stw	r4,-16(fp)
41117010:	e17ffd15 	stw	r5,-12(fp)
41117014:	e1bffe15 	stw	r6,-8(fp)
41117018:	e1ffff15 	stw	r7,-4(fp)
4111701c:	e0bfff17 	ldw	r2,-4(fp)
41117020:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
41117024:	d0a03d17 	ldw	r2,-32524(gp)
41117028:	1000021e 	bne	r2,zero,41117034 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
4111702c:	e0bffb17 	ldw	r2,-20(fp)
41117030:	d0a03d15 	stw	r2,-32524(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
41117034:	e0bffc17 	ldw	r2,-16(fp)
41117038:	10800104 	addi	r2,r2,4
4111703c:	00c001c4 	movi	r3,7
41117040:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
41117044:	d8000015 	stw	zero,0(sp)
41117048:	e1fffc17 	ldw	r7,-16(fp)
4111704c:	01904474 	movhi	r6,16657
41117050:	319be104 	addi	r6,r6,28548
41117054:	e17ffe17 	ldw	r5,-8(fp)
41117058:	e13ffd17 	ldw	r4,-12(fp)
4111705c:	1119c500 	call	41119c50 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
41117060:	0001883a 	nop
41117064:	e037883a 	mov	sp,fp
41117068:	dfc00117 	ldw	ra,4(sp)
4111706c:	df000017 	ldw	fp,0(sp)
41117070:	dec00204 	addi	sp,sp,8
41117074:	f800283a 	ret

41117078 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
41117078:	defffa04 	addi	sp,sp,-24
4111707c:	dfc00515 	stw	ra,20(sp)
41117080:	df000415 	stw	fp,16(sp)
41117084:	df000404 	addi	fp,sp,16
41117088:	e13ffd15 	stw	r4,-12(fp)
4111708c:	e17ffe15 	stw	r5,-8(fp)
41117090:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
41117094:	e0bffd17 	ldw	r2,-12(fp)
41117098:	10800017 	ldw	r2,0(r2)
4111709c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
411170a0:	e0bffc17 	ldw	r2,-16(fp)
411170a4:	10c00a04 	addi	r3,r2,40
411170a8:	e0bffd17 	ldw	r2,-12(fp)
411170ac:	10800217 	ldw	r2,8(r2)
411170b0:	100f883a 	mov	r7,r2
411170b4:	e1bfff17 	ldw	r6,-4(fp)
411170b8:	e17ffe17 	ldw	r5,-8(fp)
411170bc:	1809883a 	mov	r4,r3
411170c0:	111758c0 	call	4111758c <altera_avalon_uart_read>
      fd->fd_flags);
}
411170c4:	e037883a 	mov	sp,fp
411170c8:	dfc00117 	ldw	ra,4(sp)
411170cc:	df000017 	ldw	fp,0(sp)
411170d0:	dec00204 	addi	sp,sp,8
411170d4:	f800283a 	ret

411170d8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
411170d8:	defffa04 	addi	sp,sp,-24
411170dc:	dfc00515 	stw	ra,20(sp)
411170e0:	df000415 	stw	fp,16(sp)
411170e4:	df000404 	addi	fp,sp,16
411170e8:	e13ffd15 	stw	r4,-12(fp)
411170ec:	e17ffe15 	stw	r5,-8(fp)
411170f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
411170f4:	e0bffd17 	ldw	r2,-12(fp)
411170f8:	10800017 	ldw	r2,0(r2)
411170fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
41117100:	e0bffc17 	ldw	r2,-16(fp)
41117104:	10c00a04 	addi	r3,r2,40
41117108:	e0bffd17 	ldw	r2,-12(fp)
4111710c:	10800217 	ldw	r2,8(r2)
41117110:	100f883a 	mov	r7,r2
41117114:	e1bfff17 	ldw	r6,-4(fp)
41117118:	e17ffe17 	ldw	r5,-8(fp)
4111711c:	1809883a 	mov	r4,r3
41117120:	11177a40 	call	411177a4 <altera_avalon_uart_write>
      fd->fd_flags);
}
41117124:	e037883a 	mov	sp,fp
41117128:	dfc00117 	ldw	ra,4(sp)
4111712c:	df000017 	ldw	fp,0(sp)
41117130:	dec00204 	addi	sp,sp,8
41117134:	f800283a 	ret

41117138 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
41117138:	defffc04 	addi	sp,sp,-16
4111713c:	dfc00315 	stw	ra,12(sp)
41117140:	df000215 	stw	fp,8(sp)
41117144:	df000204 	addi	fp,sp,8
41117148:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
4111714c:	e0bfff17 	ldw	r2,-4(fp)
41117150:	10800017 	ldw	r2,0(r2)
41117154:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
41117158:	e0bffe17 	ldw	r2,-8(fp)
4111715c:	10c00a04 	addi	r3,r2,40
41117160:	e0bfff17 	ldw	r2,-4(fp)
41117164:	10800217 	ldw	r2,8(r2)
41117168:	100b883a 	mov	r5,r2
4111716c:	1809883a 	mov	r4,r3
41117170:	11174fc0 	call	411174fc <altera_avalon_uart_close>
}
41117174:	e037883a 	mov	sp,fp
41117178:	dfc00117 	ldw	ra,4(sp)
4111717c:	df000017 	ldw	fp,0(sp)
41117180:	dec00204 	addi	sp,sp,8
41117184:	f800283a 	ret

41117188 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
41117188:	defff804 	addi	sp,sp,-32
4111718c:	dfc00715 	stw	ra,28(sp)
41117190:	df000615 	stw	fp,24(sp)
41117194:	df000604 	addi	fp,sp,24
41117198:	e13ffd15 	stw	r4,-12(fp)
4111719c:	e17ffe15 	stw	r5,-8(fp)
411171a0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
411171a4:	e0bffd17 	ldw	r2,-12(fp)
411171a8:	10800017 	ldw	r2,0(r2)
411171ac:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
411171b0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
411171b4:	1000041e 	bne	r2,zero,411171c8 <altera_avalon_uart_init+0x40>
411171b8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
411171bc:	1000021e 	bne	r2,zero,411171c8 <altera_avalon_uart_init+0x40>
411171c0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
411171c4:	10000226 	beq	r2,zero,411171d0 <altera_avalon_uart_init+0x48>
411171c8:	00800044 	movi	r2,1
411171cc:	00000106 	br	411171d4 <altera_avalon_uart_init+0x4c>
411171d0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
411171d4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
411171d8:	e0bffc17 	ldw	r2,-16(fp)
411171dc:	10000f1e 	bne	r2,zero,4111721c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
411171e0:	e0bffd17 	ldw	r2,-12(fp)
411171e4:	00c32004 	movi	r3,3200
411171e8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
411171ec:	e0bffb17 	ldw	r2,-20(fp)
411171f0:	10800304 	addi	r2,r2,12
411171f4:	e0fffd17 	ldw	r3,-12(fp)
411171f8:	18c00117 	ldw	r3,4(r3)
411171fc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
41117200:	d8000015 	stw	zero,0(sp)
41117204:	e1fffd17 	ldw	r7,-12(fp)
41117208:	01904474 	movhi	r6,16657
4111720c:	319c8d04 	addi	r6,r6,29236
41117210:	e17fff17 	ldw	r5,-4(fp)
41117214:	e13ffe17 	ldw	r4,-8(fp)
41117218:	1119c500 	call	41119c50 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
4111721c:	0001883a 	nop
41117220:	e037883a 	mov	sp,fp
41117224:	dfc00117 	ldw	ra,4(sp)
41117228:	df000017 	ldw	fp,0(sp)
4111722c:	dec00204 	addi	sp,sp,8
41117230:	f800283a 	ret

41117234 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
41117234:	defffa04 	addi	sp,sp,-24
41117238:	dfc00515 	stw	ra,20(sp)
4111723c:	df000415 	stw	fp,16(sp)
41117240:	df000404 	addi	fp,sp,16
41117244:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
41117248:	e0bfff17 	ldw	r2,-4(fp)
4111724c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
41117250:	e0bffc17 	ldw	r2,-16(fp)
41117254:	10800017 	ldw	r2,0(r2)
41117258:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
4111725c:	e0bffd17 	ldw	r2,-12(fp)
41117260:	10800204 	addi	r2,r2,8
41117264:	10800037 	ldwio	r2,0(r2)
41117268:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
4111726c:	e0bffd17 	ldw	r2,-12(fp)
41117270:	10800204 	addi	r2,r2,8
41117274:	0007883a 	mov	r3,zero
41117278:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
4111727c:	e0bffd17 	ldw	r2,-12(fp)
41117280:	10800204 	addi	r2,r2,8
41117284:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
41117288:	e0bffe17 	ldw	r2,-8(fp)
4111728c:	1080200c 	andi	r2,r2,128
41117290:	10000326 	beq	r2,zero,411172a0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
41117294:	e17ffe17 	ldw	r5,-8(fp)
41117298:	e13ffc17 	ldw	r4,-16(fp)
4111729c:	11172d00 	call	411172d0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
411172a0:	e0bffe17 	ldw	r2,-8(fp)
411172a4:	1081100c 	andi	r2,r2,1088
411172a8:	10000326 	beq	r2,zero,411172b8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
411172ac:	e17ffe17 	ldw	r5,-8(fp)
411172b0:	e13ffc17 	ldw	r4,-16(fp)
411172b4:	11173b40 	call	411173b4 <altera_avalon_uart_txirq>
  }
  

}
411172b8:	0001883a 	nop
411172bc:	e037883a 	mov	sp,fp
411172c0:	dfc00117 	ldw	ra,4(sp)
411172c4:	df000017 	ldw	fp,0(sp)
411172c8:	dec00204 	addi	sp,sp,8
411172cc:	f800283a 	ret

411172d0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
411172d0:	defffc04 	addi	sp,sp,-16
411172d4:	df000315 	stw	fp,12(sp)
411172d8:	df000304 	addi	fp,sp,12
411172dc:	e13ffe15 	stw	r4,-8(fp)
411172e0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
411172e4:	e0bfff17 	ldw	r2,-4(fp)
411172e8:	108000cc 	andi	r2,r2,3
411172ec:	10002c1e 	bne	r2,zero,411173a0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
411172f0:	e0bffe17 	ldw	r2,-8(fp)
411172f4:	10800317 	ldw	r2,12(r2)
411172f8:	e0bffe17 	ldw	r2,-8(fp)
411172fc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
41117300:	e0bffe17 	ldw	r2,-8(fp)
41117304:	10800317 	ldw	r2,12(r2)
41117308:	10800044 	addi	r2,r2,1
4111730c:	10800fcc 	andi	r2,r2,63
41117310:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
41117314:	e0bffe17 	ldw	r2,-8(fp)
41117318:	10800317 	ldw	r2,12(r2)
4111731c:	e0fffe17 	ldw	r3,-8(fp)
41117320:	18c00017 	ldw	r3,0(r3)
41117324:	18c00037 	ldwio	r3,0(r3)
41117328:	1809883a 	mov	r4,r3
4111732c:	e0fffe17 	ldw	r3,-8(fp)
41117330:	1885883a 	add	r2,r3,r2
41117334:	10800704 	addi	r2,r2,28
41117338:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
4111733c:	e0bffe17 	ldw	r2,-8(fp)
41117340:	e0fffd17 	ldw	r3,-12(fp)
41117344:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
41117348:	e0bffe17 	ldw	r2,-8(fp)
4111734c:	10800317 	ldw	r2,12(r2)
41117350:	10800044 	addi	r2,r2,1
41117354:	10800fcc 	andi	r2,r2,63
41117358:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
4111735c:	e0bffe17 	ldw	r2,-8(fp)
41117360:	10c00217 	ldw	r3,8(r2)
41117364:	e0bffd17 	ldw	r2,-12(fp)
41117368:	18800e1e 	bne	r3,r2,411173a4 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
4111736c:	e0bffe17 	ldw	r2,-8(fp)
41117370:	10c00117 	ldw	r3,4(r2)
41117374:	00bfdfc4 	movi	r2,-129
41117378:	1886703a 	and	r3,r3,r2
4111737c:	e0bffe17 	ldw	r2,-8(fp)
41117380:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
41117384:	e0bffe17 	ldw	r2,-8(fp)
41117388:	10800017 	ldw	r2,0(r2)
4111738c:	10800304 	addi	r2,r2,12
41117390:	e0fffe17 	ldw	r3,-8(fp)
41117394:	18c00117 	ldw	r3,4(r3)
41117398:	10c00035 	stwio	r3,0(r2)
4111739c:	00000106 	br	411173a4 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
411173a0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
411173a4:	e037883a 	mov	sp,fp
411173a8:	df000017 	ldw	fp,0(sp)
411173ac:	dec00104 	addi	sp,sp,4
411173b0:	f800283a 	ret

411173b4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
411173b4:	defffb04 	addi	sp,sp,-20
411173b8:	df000415 	stw	fp,16(sp)
411173bc:	df000404 	addi	fp,sp,16
411173c0:	e13ffc15 	stw	r4,-16(fp)
411173c4:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
411173c8:	e0bffc17 	ldw	r2,-16(fp)
411173cc:	10c00417 	ldw	r3,16(r2)
411173d0:	e0bffc17 	ldw	r2,-16(fp)
411173d4:	10800517 	ldw	r2,20(r2)
411173d8:	18803226 	beq	r3,r2,411174a4 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
411173dc:	e0bffc17 	ldw	r2,-16(fp)
411173e0:	10800617 	ldw	r2,24(r2)
411173e4:	1080008c 	andi	r2,r2,2
411173e8:	10000326 	beq	r2,zero,411173f8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
411173ec:	e0bffd17 	ldw	r2,-12(fp)
411173f0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
411173f4:	10001d26 	beq	r2,zero,4111746c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
411173f8:	e0bffc17 	ldw	r2,-16(fp)
411173fc:	10800417 	ldw	r2,16(r2)
41117400:	e0bffc17 	ldw	r2,-16(fp)
41117404:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
41117408:	e0bffc17 	ldw	r2,-16(fp)
4111740c:	10800017 	ldw	r2,0(r2)
41117410:	10800104 	addi	r2,r2,4
41117414:	e0fffc17 	ldw	r3,-16(fp)
41117418:	18c00417 	ldw	r3,16(r3)
4111741c:	e13ffc17 	ldw	r4,-16(fp)
41117420:	20c7883a 	add	r3,r4,r3
41117424:	18c01704 	addi	r3,r3,92
41117428:	18c00003 	ldbu	r3,0(r3)
4111742c:	18c03fcc 	andi	r3,r3,255
41117430:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
41117434:	e0bffc17 	ldw	r2,-16(fp)
41117438:	10800417 	ldw	r2,16(r2)
4111743c:	10800044 	addi	r2,r2,1
41117440:	e0fffc17 	ldw	r3,-16(fp)
41117444:	18800415 	stw	r2,16(r3)
41117448:	10c00fcc 	andi	r3,r2,63
4111744c:	e0bffc17 	ldw	r2,-16(fp)
41117450:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
41117454:	e0bffc17 	ldw	r2,-16(fp)
41117458:	10800117 	ldw	r2,4(r2)
4111745c:	10c01014 	ori	r3,r2,64
41117460:	e0bffc17 	ldw	r2,-16(fp)
41117464:	10c00115 	stw	r3,4(r2)
41117468:	00000e06 	br	411174a4 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
4111746c:	e0bffc17 	ldw	r2,-16(fp)
41117470:	10800017 	ldw	r2,0(r2)
41117474:	10800204 	addi	r2,r2,8
41117478:	10800037 	ldwio	r2,0(r2)
4111747c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
41117480:	e0bffd17 	ldw	r2,-12(fp)
41117484:	1082000c 	andi	r2,r2,2048
41117488:	1000061e 	bne	r2,zero,411174a4 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
4111748c:	e0bffc17 	ldw	r2,-16(fp)
41117490:	10c00117 	ldw	r3,4(r2)
41117494:	00bfefc4 	movi	r2,-65
41117498:	1886703a 	and	r3,r3,r2
4111749c:	e0bffc17 	ldw	r2,-16(fp)
411174a0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
411174a4:	e0bffc17 	ldw	r2,-16(fp)
411174a8:	10c00417 	ldw	r3,16(r2)
411174ac:	e0bffc17 	ldw	r2,-16(fp)
411174b0:	10800517 	ldw	r2,20(r2)
411174b4:	1880061e 	bne	r3,r2,411174d0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
411174b8:	e0bffc17 	ldw	r2,-16(fp)
411174bc:	10c00117 	ldw	r3,4(r2)
411174c0:	00beefc4 	movi	r2,-1089
411174c4:	1886703a 	and	r3,r3,r2
411174c8:	e0bffc17 	ldw	r2,-16(fp)
411174cc:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
411174d0:	e0bffc17 	ldw	r2,-16(fp)
411174d4:	10800017 	ldw	r2,0(r2)
411174d8:	10800304 	addi	r2,r2,12
411174dc:	e0fffc17 	ldw	r3,-16(fp)
411174e0:	18c00117 	ldw	r3,4(r3)
411174e4:	10c00035 	stwio	r3,0(r2)
}
411174e8:	0001883a 	nop
411174ec:	e037883a 	mov	sp,fp
411174f0:	df000017 	ldw	fp,0(sp)
411174f4:	dec00104 	addi	sp,sp,4
411174f8:	f800283a 	ret

411174fc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
411174fc:	defffd04 	addi	sp,sp,-12
41117500:	df000215 	stw	fp,8(sp)
41117504:	df000204 	addi	fp,sp,8
41117508:	e13ffe15 	stw	r4,-8(fp)
4111750c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
41117510:	00000506 	br	41117528 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
41117514:	e0bfff17 	ldw	r2,-4(fp)
41117518:	1090000c 	andi	r2,r2,16384
4111751c:	10000226 	beq	r2,zero,41117528 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
41117520:	00bffd44 	movi	r2,-11
41117524:	00000606 	br	41117540 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
41117528:	e0bffe17 	ldw	r2,-8(fp)
4111752c:	10c00417 	ldw	r3,16(r2)
41117530:	e0bffe17 	ldw	r2,-8(fp)
41117534:	10800517 	ldw	r2,20(r2)
41117538:	18bff61e 	bne	r3,r2,41117514 <__reset+0xbb0f7514>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
4111753c:	0005883a 	mov	r2,zero
}
41117540:	e037883a 	mov	sp,fp
41117544:	df000017 	ldw	fp,0(sp)
41117548:	dec00104 	addi	sp,sp,4
4111754c:	f800283a 	ret

41117550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41117550:	defffe04 	addi	sp,sp,-8
41117554:	dfc00115 	stw	ra,4(sp)
41117558:	df000015 	stw	fp,0(sp)
4111755c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
41117560:	d0a01417 	ldw	r2,-32688(gp)
41117564:	10000326 	beq	r2,zero,41117574 <alt_get_errno+0x24>
41117568:	d0a01417 	ldw	r2,-32688(gp)
4111756c:	103ee83a 	callr	r2
41117570:	00000106 	br	41117578 <alt_get_errno+0x28>
41117574:	d0a03804 	addi	r2,gp,-32544
}
41117578:	e037883a 	mov	sp,fp
4111757c:	dfc00117 	ldw	ra,4(sp)
41117580:	df000017 	ldw	fp,0(sp)
41117584:	dec00204 	addi	sp,sp,8
41117588:	f800283a 	ret

4111758c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
4111758c:	defff204 	addi	sp,sp,-56
41117590:	dfc00d15 	stw	ra,52(sp)
41117594:	df000c15 	stw	fp,48(sp)
41117598:	df000c04 	addi	fp,sp,48
4111759c:	e13ffc15 	stw	r4,-16(fp)
411175a0:	e17ffd15 	stw	r5,-12(fp)
411175a4:	e1bffe15 	stw	r6,-8(fp)
411175a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
411175ac:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
411175b0:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
411175b4:	e0bfff17 	ldw	r2,-4(fp)
411175b8:	1090000c 	andi	r2,r2,16384
411175bc:	1005003a 	cmpeq	r2,r2,zero
411175c0:	10803fcc 	andi	r2,r2,255
411175c4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
411175c8:	00001306 	br	41117618 <altera_avalon_uart_read+0x8c>
    {
      count++;
411175cc:	e0bff517 	ldw	r2,-44(fp)
411175d0:	10800044 	addi	r2,r2,1
411175d4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
411175d8:	e0bffd17 	ldw	r2,-12(fp)
411175dc:	10c00044 	addi	r3,r2,1
411175e0:	e0fffd15 	stw	r3,-12(fp)
411175e4:	e0fffc17 	ldw	r3,-16(fp)
411175e8:	18c00217 	ldw	r3,8(r3)
411175ec:	e13ffc17 	ldw	r4,-16(fp)
411175f0:	20c7883a 	add	r3,r4,r3
411175f4:	18c00704 	addi	r3,r3,28
411175f8:	18c00003 	ldbu	r3,0(r3)
411175fc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
41117600:	e0bffc17 	ldw	r2,-16(fp)
41117604:	10800217 	ldw	r2,8(r2)
41117608:	10800044 	addi	r2,r2,1
4111760c:	10c00fcc 	andi	r3,r2,63
41117610:	e0bffc17 	ldw	r2,-16(fp)
41117614:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
41117618:	e0fff517 	ldw	r3,-44(fp)
4111761c:	e0bffe17 	ldw	r2,-8(fp)
41117620:	1880050e 	bge	r3,r2,41117638 <altera_avalon_uart_read+0xac>
41117624:	e0bffc17 	ldw	r2,-16(fp)
41117628:	10c00217 	ldw	r3,8(r2)
4111762c:	e0bffc17 	ldw	r2,-16(fp)
41117630:	10800317 	ldw	r2,12(r2)
41117634:	18bfe51e 	bne	r3,r2,411175cc <__reset+0xbb0f75cc>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
41117638:	e0bff517 	ldw	r2,-44(fp)
4111763c:	1000251e 	bne	r2,zero,411176d4 <altera_avalon_uart_read+0x148>
41117640:	e0bffc17 	ldw	r2,-16(fp)
41117644:	10c00217 	ldw	r3,8(r2)
41117648:	e0bffc17 	ldw	r2,-16(fp)
4111764c:	10800317 	ldw	r2,12(r2)
41117650:	1880201e 	bne	r3,r2,411176d4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
41117654:	e0bff617 	ldw	r2,-40(fp)
41117658:	1000071e 	bne	r2,zero,41117678 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
4111765c:	11175500 	call	41117550 <alt_get_errno>
41117660:	1007883a 	mov	r3,r2
41117664:	008002c4 	movi	r2,11
41117668:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
4111766c:	00800044 	movi	r2,1
41117670:	e0bff405 	stb	r2,-48(fp)
        break;
41117674:	00001b06 	br	411176e4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41117678:	0005303a 	rdctl	r2,status
4111767c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41117680:	e0fff917 	ldw	r3,-28(fp)
41117684:	00bfff84 	movi	r2,-2
41117688:	1884703a 	and	r2,r3,r2
4111768c:	1001703a 	wrctl	status,r2
  
  return context;
41117690:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
41117694:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
41117698:	e0bffc17 	ldw	r2,-16(fp)
4111769c:	10800117 	ldw	r2,4(r2)
411176a0:	10c02014 	ori	r3,r2,128
411176a4:	e0bffc17 	ldw	r2,-16(fp)
411176a8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
411176ac:	e0bffc17 	ldw	r2,-16(fp)
411176b0:	10800017 	ldw	r2,0(r2)
411176b4:	10800304 	addi	r2,r2,12
411176b8:	e0fffc17 	ldw	r3,-16(fp)
411176bc:	18c00117 	ldw	r3,4(r3)
411176c0:	10c00035 	stwio	r3,0(r2)
411176c4:	e0bff817 	ldw	r2,-32(fp)
411176c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
411176cc:	e0bffa17 	ldw	r2,-24(fp)
411176d0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
411176d4:	e0bff517 	ldw	r2,-44(fp)
411176d8:	1000021e 	bne	r2,zero,411176e4 <altera_avalon_uart_read+0x158>
411176dc:	e0bffe17 	ldw	r2,-8(fp)
411176e0:	103fcd1e 	bne	r2,zero,41117618 <__reset+0xbb0f7618>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
411176e4:	0005303a 	rdctl	r2,status
411176e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
411176ec:	e0fffb17 	ldw	r3,-20(fp)
411176f0:	00bfff84 	movi	r2,-2
411176f4:	1884703a 	and	r2,r3,r2
411176f8:	1001703a 	wrctl	status,r2
  
  return context;
411176fc:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
41117700:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
41117704:	e0bffc17 	ldw	r2,-16(fp)
41117708:	10800117 	ldw	r2,4(r2)
4111770c:	10c02014 	ori	r3,r2,128
41117710:	e0bffc17 	ldw	r2,-16(fp)
41117714:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
41117718:	e0bffc17 	ldw	r2,-16(fp)
4111771c:	10800017 	ldw	r2,0(r2)
41117720:	10800304 	addi	r2,r2,12
41117724:	e0fffc17 	ldw	r3,-16(fp)
41117728:	18c00117 	ldw	r3,4(r3)
4111772c:	10c00035 	stwio	r3,0(r2)
41117730:	e0bff817 	ldw	r2,-32(fp)
41117734:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41117738:	e0bff717 	ldw	r2,-36(fp)
4111773c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
41117740:	e0bff403 	ldbu	r2,-48(fp)
41117744:	10000226 	beq	r2,zero,41117750 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
41117748:	00bffd44 	movi	r2,-11
4111774c:	00000106 	br	41117754 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
41117750:	e0bff517 	ldw	r2,-44(fp)
  }
}
41117754:	e037883a 	mov	sp,fp
41117758:	dfc00117 	ldw	ra,4(sp)
4111775c:	df000017 	ldw	fp,0(sp)
41117760:	dec00204 	addi	sp,sp,8
41117764:	f800283a 	ret

41117768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41117768:	defffe04 	addi	sp,sp,-8
4111776c:	dfc00115 	stw	ra,4(sp)
41117770:	df000015 	stw	fp,0(sp)
41117774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
41117778:	d0a01417 	ldw	r2,-32688(gp)
4111777c:	10000326 	beq	r2,zero,4111778c <alt_get_errno+0x24>
41117780:	d0a01417 	ldw	r2,-32688(gp)
41117784:	103ee83a 	callr	r2
41117788:	00000106 	br	41117790 <alt_get_errno+0x28>
4111778c:	d0a03804 	addi	r2,gp,-32544
}
41117790:	e037883a 	mov	sp,fp
41117794:	dfc00117 	ldw	ra,4(sp)
41117798:	df000017 	ldw	fp,0(sp)
4111779c:	dec00204 	addi	sp,sp,8
411177a0:	f800283a 	ret

411177a4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
411177a4:	defff204 	addi	sp,sp,-56
411177a8:	dfc00d15 	stw	ra,52(sp)
411177ac:	df000c15 	stw	fp,48(sp)
411177b0:	df000c04 	addi	fp,sp,48
411177b4:	e13ffc15 	stw	r4,-16(fp)
411177b8:	e17ffd15 	stw	r5,-12(fp)
411177bc:	e1bffe15 	stw	r6,-8(fp)
411177c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
411177c4:	e0bffe17 	ldw	r2,-8(fp)
411177c8:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
411177cc:	e0bfff17 	ldw	r2,-4(fp)
411177d0:	1090000c 	andi	r2,r2,16384
411177d4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
411177d8:	00003c06 	br	411178cc <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
411177dc:	e0bffc17 	ldw	r2,-16(fp)
411177e0:	10800517 	ldw	r2,20(r2)
411177e4:	10800044 	addi	r2,r2,1
411177e8:	10800fcc 	andi	r2,r2,63
411177ec:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
411177f0:	e0bffc17 	ldw	r2,-16(fp)
411177f4:	10c00417 	ldw	r3,16(r2)
411177f8:	e0bff717 	ldw	r2,-36(fp)
411177fc:	1880221e 	bne	r3,r2,41117888 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
41117800:	e0bff517 	ldw	r2,-44(fp)
41117804:	10000526 	beq	r2,zero,4111781c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
41117808:	11177680 	call	41117768 <alt_get_errno>
4111780c:	1007883a 	mov	r3,r2
41117810:	008002c4 	movi	r2,11
41117814:	18800015 	stw	r2,0(r3)
        break;
41117818:	00002e06 	br	411178d4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4111781c:	0005303a 	rdctl	r2,status
41117820:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41117824:	e0fff917 	ldw	r3,-28(fp)
41117828:	00bfff84 	movi	r2,-2
4111782c:	1884703a 	and	r2,r3,r2
41117830:	1001703a 	wrctl	status,r2
  
  return context;
41117834:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
41117838:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
4111783c:	e0bffc17 	ldw	r2,-16(fp)
41117840:	10800117 	ldw	r2,4(r2)
41117844:	10c11014 	ori	r3,r2,1088
41117848:	e0bffc17 	ldw	r2,-16(fp)
4111784c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
41117850:	e0bffc17 	ldw	r2,-16(fp)
41117854:	10800017 	ldw	r2,0(r2)
41117858:	10800304 	addi	r2,r2,12
4111785c:	e0fffc17 	ldw	r3,-16(fp)
41117860:	18c00117 	ldw	r3,4(r3)
41117864:	10c00035 	stwio	r3,0(r2)
41117868:	e0bff817 	ldw	r2,-32(fp)
4111786c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41117870:	e0bff617 	ldw	r2,-40(fp)
41117874:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
41117878:	e0bffc17 	ldw	r2,-16(fp)
4111787c:	10c00417 	ldw	r3,16(r2)
41117880:	e0bff717 	ldw	r2,-36(fp)
41117884:	18bffc26 	beq	r3,r2,41117878 <__reset+0xbb0f7878>
      }
    }

    count--;
41117888:	e0bff417 	ldw	r2,-48(fp)
4111788c:	10bfffc4 	addi	r2,r2,-1
41117890:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
41117894:	e0bffc17 	ldw	r2,-16(fp)
41117898:	10c00517 	ldw	r3,20(r2)
4111789c:	e0bffd17 	ldw	r2,-12(fp)
411178a0:	11000044 	addi	r4,r2,1
411178a4:	e13ffd15 	stw	r4,-12(fp)
411178a8:	10800003 	ldbu	r2,0(r2)
411178ac:	1009883a 	mov	r4,r2
411178b0:	e0bffc17 	ldw	r2,-16(fp)
411178b4:	10c5883a 	add	r2,r2,r3
411178b8:	10801704 	addi	r2,r2,92
411178bc:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
411178c0:	e0bffc17 	ldw	r2,-16(fp)
411178c4:	e0fff717 	ldw	r3,-36(fp)
411178c8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
411178cc:	e0bff417 	ldw	r2,-48(fp)
411178d0:	103fc21e 	bne	r2,zero,411177dc <__reset+0xbb0f77dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
411178d4:	0005303a 	rdctl	r2,status
411178d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
411178dc:	e0fffb17 	ldw	r3,-20(fp)
411178e0:	00bfff84 	movi	r2,-2
411178e4:	1884703a 	and	r2,r3,r2
411178e8:	1001703a 	wrctl	status,r2
  
  return context;
411178ec:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
411178f0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
411178f4:	e0bffc17 	ldw	r2,-16(fp)
411178f8:	10800117 	ldw	r2,4(r2)
411178fc:	10c11014 	ori	r3,r2,1088
41117900:	e0bffc17 	ldw	r2,-16(fp)
41117904:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
41117908:	e0bffc17 	ldw	r2,-16(fp)
4111790c:	10800017 	ldw	r2,0(r2)
41117910:	10800304 	addi	r2,r2,12
41117914:	e0fffc17 	ldw	r3,-16(fp)
41117918:	18c00117 	ldw	r3,4(r3)
4111791c:	10c00035 	stwio	r3,0(r2)
41117920:	e0bff817 	ldw	r2,-32(fp)
41117924:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41117928:	e0bffa17 	ldw	r2,-24(fp)
4111792c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
41117930:	e0fffe17 	ldw	r3,-8(fp)
41117934:	e0bff417 	ldw	r2,-48(fp)
41117938:	1885c83a 	sub	r2,r3,r2
}
4111793c:	e037883a 	mov	sp,fp
41117940:	dfc00117 	ldw	ra,4(sp)
41117944:	df000017 	ldw	fp,0(sp)
41117948:	dec00204 	addi	sp,sp,8
4111794c:	f800283a 	ret

41117950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41117950:	defffe04 	addi	sp,sp,-8
41117954:	dfc00115 	stw	ra,4(sp)
41117958:	df000015 	stw	fp,0(sp)
4111795c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
41117960:	d0a01417 	ldw	r2,-32688(gp)
41117964:	10000326 	beq	r2,zero,41117974 <alt_get_errno+0x24>
41117968:	d0a01417 	ldw	r2,-32688(gp)
4111796c:	103ee83a 	callr	r2
41117970:	00000106 	br	41117978 <alt_get_errno+0x28>
41117974:	d0a03804 	addi	r2,gp,-32544
}
41117978:	e037883a 	mov	sp,fp
4111797c:	dfc00117 	ldw	ra,4(sp)
41117980:	df000017 	ldw	fp,0(sp)
41117984:	dec00204 	addi	sp,sp,8
41117988:	f800283a 	ret

4111798c <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
4111798c:	defffc04 	addi	sp,sp,-16
41117990:	df000315 	stw	fp,12(sp)
41117994:	df000304 	addi	fp,sp,12
41117998:	e13ffd15 	stw	r4,-12(fp)
4111799c:	e17ffe15 	stw	r5,-8(fp)
411179a0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
411179a4:	e0bffd17 	ldw	r2,-12(fp)
411179a8:	10800037 	ldwio	r2,0(r2)
411179ac:	1080010c 	andi	r2,r2,4
411179b0:	10000226 	beq	r2,zero,411179bc <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
411179b4:	00bff904 	movi	r2,-28
411179b8:	00001506 	br	41117a10 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
411179bc:	e0bfff17 	ldw	r2,-4(fp)
411179c0:	10800017 	ldw	r2,0(r2)
411179c4:	1007883a 	mov	r3,r2
411179c8:	e0bffe17 	ldw	r2,-8(fp)
411179cc:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
411179d0:	e0bffe17 	ldw	r2,-8(fp)
411179d4:	10800104 	addi	r2,r2,4
411179d8:	e0ffff17 	ldw	r3,-4(fp)
411179dc:	18c00117 	ldw	r3,4(r3)
411179e0:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
411179e4:	e0bffe17 	ldw	r2,-8(fp)
411179e8:	10800204 	addi	r2,r2,8
411179ec:	e0ffff17 	ldw	r3,-4(fp)
411179f0:	18c00217 	ldw	r3,8(r3)
411179f4:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
411179f8:	e0bffe17 	ldw	r2,-8(fp)
411179fc:	10800304 	addi	r2,r2,12
41117a00:	e0ffff17 	ldw	r3,-4(fp)
41117a04:	18c00317 	ldw	r3,12(r3)
41117a08:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
41117a0c:	0005883a 	mov	r2,zero
}
41117a10:	e037883a 	mov	sp,fp
41117a14:	df000017 	ldw	fp,0(sp)
41117a18:	dec00104 	addi	sp,sp,4
41117a1c:	f800283a 	ret

41117a20 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
41117a20:	defffc04 	addi	sp,sp,-16
41117a24:	df000315 	stw	fp,12(sp)
41117a28:	df000304 	addi	fp,sp,12
41117a2c:	e13ffd15 	stw	r4,-12(fp)
41117a30:	e17ffe15 	stw	r5,-8(fp)
41117a34:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
41117a38:	e0bffd17 	ldw	r2,-12(fp)
41117a3c:	10800037 	ldwio	r2,0(r2)
41117a40:	1080010c 	andi	r2,r2,4
41117a44:	10000226 	beq	r2,zero,41117a50 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
41117a48:	00bff904 	movi	r2,-28
41117a4c:	00003b06 	br	41117b3c <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
41117a50:	e0bfff17 	ldw	r2,-4(fp)
41117a54:	10800017 	ldw	r2,0(r2)
41117a58:	1007883a 	mov	r3,r2
41117a5c:	e0bffe17 	ldw	r2,-8(fp)
41117a60:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
41117a64:	e0bffe17 	ldw	r2,-8(fp)
41117a68:	10800104 	addi	r2,r2,4
41117a6c:	e0ffff17 	ldw	r3,-4(fp)
41117a70:	18c00117 	ldw	r3,4(r3)
41117a74:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
41117a78:	e0bffe17 	ldw	r2,-8(fp)
41117a7c:	10800204 	addi	r2,r2,8
41117a80:	e0ffff17 	ldw	r3,-4(fp)
41117a84:	18c00217 	ldw	r3,8(r3)
41117a88:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
41117a8c:	e0bffe17 	ldw	r2,-8(fp)
41117a90:	10800304 	addi	r2,r2,12
41117a94:	e0ffff17 	ldw	r3,-4(fp)
41117a98:	18c0030b 	ldhu	r3,12(r3)
41117a9c:	18ffffcc 	andi	r3,r3,65535
41117aa0:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
41117aa4:	e0bffe17 	ldw	r2,-8(fp)
41117aa8:	10800384 	addi	r2,r2,14
41117aac:	e0ffff17 	ldw	r3,-4(fp)
41117ab0:	18c00383 	ldbu	r3,14(r3)
41117ab4:	18c03fcc 	andi	r3,r3,255
41117ab8:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
41117abc:	e0bffe17 	ldw	r2,-8(fp)
41117ac0:	108003c4 	addi	r2,r2,15
41117ac4:	e0ffff17 	ldw	r3,-4(fp)
41117ac8:	18c003c3 	ldbu	r3,15(r3)
41117acc:	18c03fcc 	andi	r3,r3,255
41117ad0:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
41117ad4:	e0bffe17 	ldw	r2,-8(fp)
41117ad8:	10800404 	addi	r2,r2,16
41117adc:	e0ffff17 	ldw	r3,-4(fp)
41117ae0:	18c0040b 	ldhu	r3,16(r3)
41117ae4:	18ffffcc 	andi	r3,r3,65535
41117ae8:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
41117aec:	e0bffe17 	ldw	r2,-8(fp)
41117af0:	10800484 	addi	r2,r2,18
41117af4:	e0ffff17 	ldw	r3,-4(fp)
41117af8:	18c0048b 	ldhu	r3,18(r3)
41117afc:	18ffffcc 	andi	r3,r3,65535
41117b00:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
41117b04:	e0bffe17 	ldw	r2,-8(fp)
41117b08:	10800504 	addi	r2,r2,20
41117b0c:	0007883a 	mov	r3,zero
41117b10:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
41117b14:	e0bffe17 	ldw	r2,-8(fp)
41117b18:	10800604 	addi	r2,r2,24
41117b1c:	0007883a 	mov	r3,zero
41117b20:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
41117b24:	e0bffe17 	ldw	r2,-8(fp)
41117b28:	10800704 	addi	r2,r2,28
41117b2c:	e0ffff17 	ldw	r3,-4(fp)
41117b30:	18c00717 	ldw	r3,28(r3)
41117b34:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
41117b38:	0005883a 	mov	r2,zero
}
41117b3c:	e037883a 	mov	sp,fp
41117b40:	df000017 	ldw	fp,0(sp)
41117b44:	dec00104 	addi	sp,sp,4
41117b48:	f800283a 	ret

41117b4c <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
41117b4c:	defff804 	addi	sp,sp,-32
41117b50:	dfc00715 	stw	ra,28(sp)
41117b54:	df000615 	stw	fp,24(sp)
41117b58:	df000604 	addi	fp,sp,24
41117b5c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
41117b60:	e0bfff17 	ldw	r2,-4(fp)
41117b64:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
41117b68:	e0bffa17 	ldw	r2,-24(fp)
41117b6c:	10801783 	ldbu	r2,94(r2)
41117b70:	10803fcc 	andi	r2,r2,255
41117b74:	10001126 	beq	r2,zero,41117bbc <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
41117b78:	e0bffa17 	ldw	r2,-24(fp)
41117b7c:	10800617 	ldw	r2,24(r2)
41117b80:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
41117b84:	1007883a 	mov	r3,r2
41117b88:	00bffdc4 	movi	r2,-9
41117b8c:	1884703a 	and	r2,r3,r2
41117b90:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
41117b94:	e0bffa17 	ldw	r2,-24(fp)
41117b98:	10800617 	ldw	r2,24(r2)
41117b9c:	e0fffb17 	ldw	r3,-20(fp)
41117ba0:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
41117ba4:	e0bffa17 	ldw	r2,-24(fp)
41117ba8:	10800617 	ldw	r2,24(r2)
41117bac:	10800404 	addi	r2,r2,16
41117bb0:	00c00044 	movi	r3,1
41117bb4:	10c00035 	stwio	r3,0(r2)
41117bb8:	00001106 	br	41117c00 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
41117bbc:	e0bffa17 	ldw	r2,-24(fp)
41117bc0:	10800317 	ldw	r2,12(r2)
41117bc4:	10800104 	addi	r2,r2,4
41117bc8:	10800037 	ldwio	r2,0(r2)
41117bcc:	1007883a 	mov	r3,r2
41117bd0:	00bffbc4 	movi	r2,-17
41117bd4:	1884703a 	and	r2,r3,r2
41117bd8:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
41117bdc:	e0bffa17 	ldw	r2,-24(fp)
41117be0:	10800317 	ldw	r2,12(r2)
41117be4:	10800104 	addi	r2,r2,4
41117be8:	e0fffb17 	ldw	r3,-20(fp)
41117bec:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
41117bf0:	e0bffa17 	ldw	r2,-24(fp)
41117bf4:	10800317 	ldw	r2,12(r2)
41117bf8:	00c08004 	movi	r3,512
41117bfc:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
41117c00:	e0bffa17 	ldw	r2,-24(fp)
41117c04:	10800b17 	ldw	r2,44(r2)
41117c08:	10001226 	beq	r2,zero,41117c54 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41117c0c:	0005303a 	rdctl	r2,status
41117c10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41117c14:	e0fffd17 	ldw	r3,-12(fp)
41117c18:	00bfff84 	movi	r2,-2
41117c1c:	1884703a 	and	r2,r3,r2
41117c20:	1001703a 	wrctl	status,r2
  
  return context;
41117c24:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
41117c28:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
41117c2c:	e0bffa17 	ldw	r2,-24(fp)
41117c30:	10800b17 	ldw	r2,44(r2)
41117c34:	e0fffa17 	ldw	r3,-24(fp)
41117c38:	18c00c17 	ldw	r3,48(r3)
41117c3c:	1809883a 	mov	r4,r3
41117c40:	103ee83a 	callr	r2
41117c44:	e0bffc17 	ldw	r2,-16(fp)
41117c48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41117c4c:	e0bffe17 	ldw	r2,-8(fp)
41117c50:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
41117c54:	e0bffa17 	ldw	r2,-24(fp)
41117c58:	10801783 	ldbu	r2,94(r2)
41117c5c:	10803fcc 	andi	r2,r2,255
41117c60:	10000a26 	beq	r2,zero,41117c8c <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
41117c64:	e0bffa17 	ldw	r2,-24(fp)
41117c68:	10800617 	ldw	r2,24(r2)
41117c6c:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
41117c70:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
41117c74:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
41117c78:	e0bffa17 	ldw	r2,-24(fp)
41117c7c:	10800617 	ldw	r2,24(r2)
41117c80:	e0fffb17 	ldw	r3,-20(fp)
41117c84:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
41117c88:	00000c06 	br	41117cbc <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
41117c8c:	e0bffa17 	ldw	r2,-24(fp)
41117c90:	10800317 	ldw	r2,12(r2)
41117c94:	10800104 	addi	r2,r2,4
41117c98:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
41117c9c:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
41117ca0:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
41117ca4:	e0bffa17 	ldw	r2,-24(fp)
41117ca8:	10800317 	ldw	r2,12(r2)
41117cac:	10800104 	addi	r2,r2,4
41117cb0:	e0fffb17 	ldw	r3,-20(fp)
41117cb4:	10c00035 	stwio	r3,0(r2)
    }

    return;
41117cb8:	0001883a 	nop
}
41117cbc:	e037883a 	mov	sp,fp
41117cc0:	dfc00117 	ldw	ra,4(sp)
41117cc4:	df000017 	ldw	fp,0(sp)
41117cc8:	dec00204 	addi	sp,sp,8
41117ccc:	f800283a 	ret

41117cd0 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
41117cd0:	defffb04 	addi	sp,sp,-20
41117cd4:	df000415 	stw	fp,16(sp)
41117cd8:	df000404 	addi	fp,sp,16
41117cdc:	e13ffc15 	stw	r4,-16(fp)
41117ce0:	e17ffd15 	stw	r5,-12(fp)
41117ce4:	e1bffe15 	stw	r6,-8(fp)
41117ce8:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
41117cec:	e0bffc17 	ldw	r2,-16(fp)
41117cf0:	10c01217 	ldw	r3,72(r2)
41117cf4:	e0800117 	ldw	r2,4(fp)
41117cf8:	18800436 	bltu	r3,r2,41117d0c <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
41117cfc:	e0bffc17 	ldw	r2,-16(fp)
41117d00:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
41117d04:	10803fcc 	andi	r2,r2,255
41117d08:	10000226 	beq	r2,zero,41117d14 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
41117d0c:	00bffa84 	movi	r2,-22
41117d10:	00000e06 	br	41117d4c <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
41117d14:	e0bffd17 	ldw	r2,-12(fp)
41117d18:	e0fffe17 	ldw	r3,-8(fp)
41117d1c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
41117d20:	e0bffd17 	ldw	r2,-12(fp)
41117d24:	e0ffff17 	ldw	r3,-4(fp)
41117d28:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
41117d2c:	e0bffd17 	ldw	r2,-12(fp)
41117d30:	e0c00117 	ldw	r3,4(fp)
41117d34:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
41117d38:	e0800217 	ldw	r2,8(fp)
41117d3c:	10e00034 	orhi	r3,r2,32768
41117d40:	e0bffd17 	ldw	r2,-12(fp)
41117d44:	10c00315 	stw	r3,12(r2)
    
    return 0;
41117d48:	0005883a 	mov	r2,zero
}
41117d4c:	e037883a 	mov	sp,fp
41117d50:	df000017 	ldw	fp,0(sp)
41117d54:	dec00104 	addi	sp,sp,4
41117d58:	f800283a 	ret

41117d5c <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
41117d5c:	defff604 	addi	sp,sp,-40
41117d60:	df000915 	stw	fp,36(sp)
41117d64:	df000904 	addi	fp,sp,36
41117d68:	e13ff715 	stw	r4,-36(fp)
41117d6c:	e17ff815 	stw	r5,-32(fp)
41117d70:	e1bff915 	stw	r6,-28(fp)
41117d74:	e1fffa15 	stw	r7,-24(fp)
41117d78:	e1800317 	ldw	r6,12(fp)
41117d7c:	e1400417 	ldw	r5,16(fp)
41117d80:	e1000517 	ldw	r4,20(fp)
41117d84:	e0c00617 	ldw	r3,24(fp)
41117d88:	e0800717 	ldw	r2,28(fp)
41117d8c:	e1bffb0d 	sth	r6,-20(fp)
41117d90:	e17ffc05 	stb	r5,-16(fp)
41117d94:	e13ffd05 	stb	r4,-12(fp)
41117d98:	e0fffe0d 	sth	r3,-8(fp)
41117d9c:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
41117da0:	e0bff717 	ldw	r2,-36(fp)
41117da4:	10c01217 	ldw	r3,72(r2)
41117da8:	e0800117 	ldw	r2,4(fp)
41117dac:	18801936 	bltu	r3,r2,41117e14 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
41117db0:	e13ff717 	ldw	r4,-36(fp)
41117db4:	20801317 	ldw	r2,76(r4)
41117db8:	20c01417 	ldw	r3,80(r4)
41117dbc:	e13ffe0b 	ldhu	r4,-8(fp)
41117dc0:	213fffcc 	andi	r4,r4,65535
41117dc4:	2015883a 	mov	r10,r4
41117dc8:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
41117dcc:	1ac01136 	bltu	r3,r11,41117e14 <alt_msgdma_construct_extended_descriptor+0xb8>
41117dd0:	58c0011e 	bne	r11,r3,41117dd8 <alt_msgdma_construct_extended_descriptor+0x7c>
41117dd4:	12800f36 	bltu	r2,r10,41117e14 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
41117dd8:	e13ff717 	ldw	r4,-36(fp)
41117ddc:	20801317 	ldw	r2,76(r4)
41117de0:	20c01417 	ldw	r3,80(r4)
41117de4:	e13fff0b 	ldhu	r4,-4(fp)
41117de8:	213fffcc 	andi	r4,r4,65535
41117dec:	2011883a 	mov	r8,r4
41117df0:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
41117df4:	1a400736 	bltu	r3,r9,41117e14 <alt_msgdma_construct_extended_descriptor+0xb8>
41117df8:	48c0011e 	bne	r9,r3,41117e00 <alt_msgdma_construct_extended_descriptor+0xa4>
41117dfc:	12000536 	bltu	r2,r8,41117e14 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
41117e00:	e0bff717 	ldw	r2,-36(fp)
41117e04:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
41117e08:	10803fcc 	andi	r2,r2,255
41117e0c:	10800060 	cmpeqi	r2,r2,1
41117e10:	1000021e 	bne	r2,zero,41117e1c <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
41117e14:	00bffa84 	movi	r2,-22
41117e18:	00002106 	br	41117ea0 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
41117e1c:	e0bff817 	ldw	r2,-32(fp)
41117e20:	e0fff917 	ldw	r3,-28(fp)
41117e24:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
41117e28:	e0bff817 	ldw	r2,-32(fp)
41117e2c:	e0fffa17 	ldw	r3,-24(fp)
41117e30:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
41117e34:	e0bff817 	ldw	r2,-32(fp)
41117e38:	e0c00117 	ldw	r3,4(fp)
41117e3c:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
41117e40:	e0bff817 	ldw	r2,-32(fp)
41117e44:	e0fffb0b 	ldhu	r3,-20(fp)
41117e48:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
41117e4c:	e0bff817 	ldw	r2,-32(fp)
41117e50:	e0fffc03 	ldbu	r3,-16(fp)
41117e54:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
41117e58:	e0bff817 	ldw	r2,-32(fp)
41117e5c:	e0fffd03 	ldbu	r3,-12(fp)
41117e60:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
41117e64:	e0bff817 	ldw	r2,-32(fp)
41117e68:	e0fffe0b 	ldhu	r3,-8(fp)
41117e6c:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
41117e70:	e0bff817 	ldw	r2,-32(fp)
41117e74:	e0ffff0b 	ldhu	r3,-4(fp)
41117e78:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
41117e7c:	e0bff817 	ldw	r2,-32(fp)
41117e80:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
41117e84:	e0bff817 	ldw	r2,-32(fp)
41117e88:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
41117e8c:	e0800217 	ldw	r2,8(fp)
41117e90:	10e00034 	orhi	r3,r2,32768
41117e94:	e0bff817 	ldw	r2,-32(fp)
41117e98:	10c00715 	stw	r3,28(r2)

  return 0 ;
41117e9c:	0005883a 	mov	r2,zero

}
41117ea0:	e037883a 	mov	sp,fp
41117ea4:	df000017 	ldw	fp,0(sp)
41117ea8:	dec00104 	addi	sp,sp,4
41117eac:	f800283a 	ret

41117eb0 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
41117eb0:	defff004 	addi	sp,sp,-64
41117eb4:	dfc00f15 	stw	ra,60(sp)
41117eb8:	df000e15 	stw	fp,56(sp)
41117ebc:	df000e04 	addi	fp,sp,56
41117ec0:	e13ffd15 	stw	r4,-12(fp)
41117ec4:	e17ffe15 	stw	r5,-8(fp)
41117ec8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
41117ecc:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
41117ed0:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
41117ed4:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
41117ed8:	e0bffd17 	ldw	r2,-12(fp)
41117edc:	10800317 	ldw	r2,12(r2)
41117ee0:	10800204 	addi	r2,r2,8
41117ee4:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
41117ee8:	10bfffcc 	andi	r2,r2,65535
41117eec:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
41117ef0:	e0bffd17 	ldw	r2,-12(fp)
41117ef4:	10800317 	ldw	r2,12(r2)
41117ef8:	10800204 	addi	r2,r2,8
41117efc:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
41117f00:	1004d43a 	srli	r2,r2,16
41117f04:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
41117f08:	e0bffd17 	ldw	r2,-12(fp)
41117f0c:	10800917 	ldw	r2,36(r2)
41117f10:	e0fff617 	ldw	r3,-40(fp)
41117f14:	1880042e 	bgeu	r3,r2,41117f28 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
41117f18:	e0bffd17 	ldw	r2,-12(fp)
41117f1c:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
41117f20:	e0fff517 	ldw	r3,-44(fp)
41117f24:	18800236 	bltu	r3,r2,41117f30 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
41117f28:	00bff904 	movi	r2,-28
41117f2c:	00008f06 	br	4111816c <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
41117f30:	00800804 	movi	r2,32
41117f34:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41117f38:	0005303a 	rdctl	r2,status
41117f3c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41117f40:	e0fff717 	ldw	r3,-36(fp)
41117f44:	00bfff84 	movi	r2,-2
41117f48:	1884703a 	and	r2,r3,r2
41117f4c:	1001703a 	wrctl	status,r2
  
  return context;
41117f50:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
41117f54:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
41117f58:	e0bffd17 	ldw	r2,-12(fp)
41117f5c:	10800317 	ldw	r2,12(r2)
41117f60:	10800104 	addi	r2,r2,4
41117f64:	e0fff317 	ldw	r3,-52(fp)
41117f68:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
41117f6c:	e0bffd17 	ldw	r2,-12(fp)
41117f70:	10800317 	ldw	r2,12(r2)
41117f74:	e0fffd17 	ldw	r3,-12(fp)
41117f78:	18c00317 	ldw	r3,12(r3)
41117f7c:	18c00037 	ldwio	r3,0(r3)
41117f80:	10c00035 	stwio	r3,0(r2)
41117f84:	e0bff417 	ldw	r2,-48(fp)
41117f88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41117f8c:	e0bffc17 	ldw	r2,-16(fp)
41117f90:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
41117f94:	e0bffe17 	ldw	r2,-8(fp)
41117f98:	10001a26 	beq	r2,zero,41118004 <alt_msgdma_descriptor_async_transfer+0x154>
41117f9c:	e0bfff17 	ldw	r2,-4(fp)
41117fa0:	1000181e 	bne	r2,zero,41118004 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
41117fa4:	00000d06 	br	41117fdc <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
41117fa8:	01000044 	movi	r4,1
41117fac:	11198f80 	call	411198f8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
41117fb0:	e0bff20b 	ldhu	r2,-56(fp)
41117fb4:	1084e230 	cmpltui	r2,r2,5000
41117fb8:	1000051e 	bne	r2,zero,41117fd0 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
41117fbc:	011044b4 	movhi	r4,16658
41117fc0:	212fd104 	addi	r4,r4,-16572
41117fc4:	111a2840 	call	4111a284 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
41117fc8:	00bff084 	movi	r2,-62
41117fcc:	00006706 	br	4111816c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
41117fd0:	e0bff20b 	ldhu	r2,-56(fp)
41117fd4:	10800044 	addi	r2,r2,1
41117fd8:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
41117fdc:	e0bffd17 	ldw	r2,-12(fp)
41117fe0:	10c00317 	ldw	r3,12(r2)
41117fe4:	e0bffd17 	ldw	r2,-12(fp)
41117fe8:	10800417 	ldw	r2,16(r2)
41117fec:	e1bffe17 	ldw	r6,-8(fp)
41117ff0:	100b883a 	mov	r5,r2
41117ff4:	1809883a 	mov	r4,r3
41117ff8:	111798c0 	call	4111798c <alt_msgdma_write_standard_descriptor>
41117ffc:	103fea1e 	bne	r2,zero,41117fa8 <__reset+0xbb0f7fa8>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
41118000:	00001f06 	br	41118080 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
41118004:	e0bffe17 	ldw	r2,-8(fp)
41118008:	10001b1e 	bne	r2,zero,41118078 <alt_msgdma_descriptor_async_transfer+0x1c8>
4111800c:	e0bfff17 	ldw	r2,-4(fp)
41118010:	10001926 	beq	r2,zero,41118078 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
41118014:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
41118018:	00000d06 	br	41118050 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
4111801c:	01000044 	movi	r4,1
41118020:	11198f80 	call	411198f8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
41118024:	e0bff20b 	ldhu	r2,-56(fp)
41118028:	1084e230 	cmpltui	r2,r2,5000
4111802c:	1000051e 	bne	r2,zero,41118044 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
41118030:	011044b4 	movhi	r4,16658
41118034:	212fe704 	addi	r4,r4,-16484
41118038:	111a2840 	call	4111a284 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
4111803c:	00bff084 	movi	r2,-62
41118040:	00004a06 	br	4111816c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
41118044:	e0bff20b 	ldhu	r2,-56(fp)
41118048:	10800044 	addi	r2,r2,1
4111804c:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
41118050:	e0bffd17 	ldw	r2,-12(fp)
41118054:	10c00317 	ldw	r3,12(r2)
41118058:	e0bffd17 	ldw	r2,-12(fp)
4111805c:	10800417 	ldw	r2,16(r2)
41118060:	e1bfff17 	ldw	r6,-4(fp)
41118064:	100b883a 	mov	r5,r2
41118068:	1809883a 	mov	r4,r3
4111806c:	1117a200 	call	41117a20 <alt_msgdma_write_extended_descriptor>
41118070:	103fea1e 	bne	r2,zero,4111801c <__reset+0xbb0f801c>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
41118074:	00000206 	br	41118080 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
41118078:	00bfffc4 	movi	r2,-1
4111807c:	00003b06 	br	4111816c <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
41118080:	e0bffd17 	ldw	r2,-12(fp)
41118084:	10800b17 	ldw	r2,44(r2)
41118088:	10001c26 	beq	r2,zero,411180fc <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
4111808c:	e0bffd17 	ldw	r2,-12(fp)
41118090:	10c00d17 	ldw	r3,52(r2)
41118094:	e0bff317 	ldw	r2,-52(fp)
41118098:	1884b03a 	or	r2,r3,r2
4111809c:	10800514 	ori	r2,r2,20
411180a0:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
411180a4:	e0fff317 	ldw	r3,-52(fp)
411180a8:	00bff7c4 	movi	r2,-33
411180ac:	1884703a 	and	r2,r3,r2
411180b0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
411180b4:	0005303a 	rdctl	r2,status
411180b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
411180bc:	e0fffa17 	ldw	r3,-24(fp)
411180c0:	00bfff84 	movi	r2,-2
411180c4:	1884703a 	and	r2,r3,r2
411180c8:	1001703a 	wrctl	status,r2
  
  return context;
411180cc:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
411180d0:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
411180d4:	e0bffd17 	ldw	r2,-12(fp)
411180d8:	10800317 	ldw	r2,12(r2)
411180dc:	10800104 	addi	r2,r2,4
411180e0:	e0fff317 	ldw	r3,-52(fp)
411180e4:	10c00035 	stwio	r3,0(r2)
411180e8:	e0bff417 	ldw	r2,-48(fp)
411180ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
411180f0:	e0bff817 	ldw	r2,-32(fp)
411180f4:	1001703a 	wrctl	status,r2
411180f8:	00001b06 	br	41118168 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
411180fc:	e0bffd17 	ldw	r2,-12(fp)
41118100:	10c00d17 	ldw	r3,52(r2)
41118104:	e0bff317 	ldw	r2,-52(fp)
41118108:	1884b03a 	or	r2,r3,r2
4111810c:	10800114 	ori	r2,r2,4
41118110:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
41118114:	e0fff317 	ldw	r3,-52(fp)
41118118:	00bff3c4 	movi	r2,-49
4111811c:	1884703a 	and	r2,r3,r2
41118120:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41118124:	0005303a 	rdctl	r2,status
41118128:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4111812c:	e0fffb17 	ldw	r3,-20(fp)
41118130:	00bfff84 	movi	r2,-2
41118134:	1884703a 	and	r2,r3,r2
41118138:	1001703a 	wrctl	status,r2
  
  return context;
4111813c:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
41118140:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
41118144:	e0bffd17 	ldw	r2,-12(fp)
41118148:	10800317 	ldw	r2,12(r2)
4111814c:	10800104 	addi	r2,r2,4
41118150:	e0fff317 	ldw	r3,-52(fp)
41118154:	10c00035 	stwio	r3,0(r2)
41118158:	e0bff417 	ldw	r2,-48(fp)
4111815c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41118160:	e0bff917 	ldw	r2,-28(fp)
41118164:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
41118168:	0005883a 	mov	r2,zero
}
4111816c:	e037883a 	mov	sp,fp
41118170:	dfc00117 	ldw	ra,4(sp)
41118174:	df000017 	ldw	fp,0(sp)
41118178:	dec00204 	addi	sp,sp,8
4111817c:	f800283a 	ret

41118180 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
41118180:	defff004 	addi	sp,sp,-64
41118184:	dfc00f15 	stw	ra,60(sp)
41118188:	df000e15 	stw	fp,56(sp)
4111818c:	df000e04 	addi	fp,sp,56
41118190:	e13ffd15 	stw	r4,-12(fp)
41118194:	e17ffe15 	stw	r5,-8(fp)
41118198:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
4111819c:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
411181a0:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
411181a4:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
411181a8:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
411181ac:	e0bffd17 	ldw	r2,-12(fp)
411181b0:	10800317 	ldw	r2,12(r2)
411181b4:	10800204 	addi	r2,r2,8
411181b8:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
411181bc:	10bfffcc 	andi	r2,r2,65535
411181c0:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
411181c4:	e0bffd17 	ldw	r2,-12(fp)
411181c8:	10800317 	ldw	r2,12(r2)
411181cc:	10800204 	addi	r2,r2,8
411181d0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
411181d4:	1004d43a 	srli	r2,r2,16
411181d8:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
411181dc:	00807804 	movi	r2,480
411181e0:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
411181e4:	00001906 	br	4111824c <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
411181e8:	01000044 	movi	r4,1
411181ec:	11198f80 	call	411198f8 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
411181f0:	e0bff30b 	ldhu	r2,-52(fp)
411181f4:	1084e230 	cmpltui	r2,r2,5000
411181f8:	1000051e 	bne	r2,zero,41118210 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
411181fc:	011044b4 	movhi	r4,16658
41118200:	212ffd04 	addi	r4,r4,-16396
41118204:	111a2840 	call	4111a284 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
41118208:	00bff084 	movi	r2,-62
4111820c:	0000b506 	br	411184e4 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
41118210:	e0bff30b 	ldhu	r2,-52(fp)
41118214:	10800044 	addi	r2,r2,1
41118218:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
4111821c:	e0bffd17 	ldw	r2,-12(fp)
41118220:	10800317 	ldw	r2,12(r2)
41118224:	10800204 	addi	r2,r2,8
41118228:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
4111822c:	10bfffcc 	andi	r2,r2,65535
41118230:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
41118234:	e0bffd17 	ldw	r2,-12(fp)
41118238:	10800317 	ldw	r2,12(r2)
4111823c:	10800204 	addi	r2,r2,8
41118240:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
41118244:	1004d43a 	srli	r2,r2,16
41118248:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
4111824c:	e0bffd17 	ldw	r2,-12(fp)
41118250:	10800917 	ldw	r2,36(r2)
41118254:	e0fff517 	ldw	r3,-44(fp)
41118258:	18bfe32e 	bgeu	r3,r2,411181e8 <__reset+0xbb0f81e8>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
4111825c:	e0bffd17 	ldw	r2,-12(fp)
41118260:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
41118264:	e0fff417 	ldw	r3,-48(fp)
41118268:	18bfdf2e 	bgeu	r3,r2,411181e8 <__reset+0xbb0f81e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4111826c:	0005303a 	rdctl	r2,status
41118270:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41118274:	e0fffc17 	ldw	r3,-16(fp)
41118278:	00bfff84 	movi	r2,-2
4111827c:	1884703a 	and	r2,r3,r2
41118280:	1001703a 	wrctl	status,r2
  
  return context;
41118284:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
41118288:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
4111828c:	e0bffd17 	ldw	r2,-12(fp)
41118290:	10800317 	ldw	r2,12(r2)
41118294:	10800104 	addi	r2,r2,4
41118298:	00c00804 	movi	r3,32
4111829c:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
411182a0:	e0bffd17 	ldw	r2,-12(fp)
411182a4:	10800317 	ldw	r2,12(r2)
411182a8:	e0fffd17 	ldw	r3,-12(fp)
411182ac:	18c00317 	ldw	r3,12(r3)
411182b0:	18c00037 	ldwio	r3,0(r3)
411182b4:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
411182b8:	e0bffe17 	ldw	r2,-8(fp)
411182bc:	10001b26 	beq	r2,zero,4111832c <alt_msgdma_descriptor_sync_transfer+0x1ac>
411182c0:	e0bfff17 	ldw	r2,-4(fp)
411182c4:	1000191e 	bne	r2,zero,4111832c <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
411182c8:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
411182cc:	00000d06 	br	41118304 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
411182d0:	01000044 	movi	r4,1
411182d4:	11198f80 	call	411198f8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
411182d8:	e0bff30b 	ldhu	r2,-52(fp)
411182dc:	1084e230 	cmpltui	r2,r2,5000
411182e0:	1000051e 	bne	r2,zero,411182f8 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
411182e4:	011044b4 	movhi	r4,16658
411182e8:	21301104 	addi	r4,r4,-16316
411182ec:	111a2840 	call	4111a284 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
411182f0:	00bff084 	movi	r2,-62
411182f4:	00007b06 	br	411184e4 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
411182f8:	e0bff30b 	ldhu	r2,-52(fp)
411182fc:	10800044 	addi	r2,r2,1
41118300:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
41118304:	e0bffd17 	ldw	r2,-12(fp)
41118308:	10c00317 	ldw	r3,12(r2)
4111830c:	e0bffd17 	ldw	r2,-12(fp)
41118310:	10800417 	ldw	r2,16(r2)
41118314:	e1bffe17 	ldw	r6,-8(fp)
41118318:	100b883a 	mov	r5,r2
4111831c:	1809883a 	mov	r4,r3
41118320:	111798c0 	call	4111798c <alt_msgdma_write_standard_descriptor>
41118324:	103fea1e 	bne	r2,zero,411182d0 <__reset+0xbb0f82d0>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
41118328:	00001f06 	br	411183a8 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
4111832c:	e0bffe17 	ldw	r2,-8(fp)
41118330:	10001b1e 	bne	r2,zero,411183a0 <alt_msgdma_descriptor_sync_transfer+0x220>
41118334:	e0bfff17 	ldw	r2,-4(fp)
41118338:	10001926 	beq	r2,zero,411183a0 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
4111833c:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
41118340:	00000d06 	br	41118378 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
41118344:	01000044 	movi	r4,1
41118348:	11198f80 	call	411198f8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
4111834c:	e0bff30b 	ldhu	r2,-52(fp)
41118350:	1084e230 	cmpltui	r2,r2,5000
41118354:	1000051e 	bne	r2,zero,4111836c <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
41118358:	011044b4 	movhi	r4,16658
4111835c:	21302204 	addi	r4,r4,-16248
41118360:	111a2840 	call	4111a284 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
41118364:	00bff084 	movi	r2,-62
41118368:	00005e06 	br	411184e4 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
4111836c:	e0bff30b 	ldhu	r2,-52(fp)
41118370:	10800044 	addi	r2,r2,1
41118374:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
41118378:	e0bffd17 	ldw	r2,-12(fp)
4111837c:	10c00317 	ldw	r3,12(r2)
41118380:	e0bffd17 	ldw	r2,-12(fp)
41118384:	10800417 	ldw	r2,16(r2)
41118388:	e1bfff17 	ldw	r6,-4(fp)
4111838c:	100b883a 	mov	r5,r2
41118390:	1809883a 	mov	r4,r3
41118394:	1117a200 	call	41117a20 <alt_msgdma_write_extended_descriptor>
41118398:	103fea1e 	bne	r2,zero,41118344 <__reset+0xbb0f8344>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
4111839c:	00000206 	br	411183a8 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
411183a0:	00bfffc4 	movi	r2,-1
411183a4:	00004f06 	br	411184e4 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
411183a8:	e0bffd17 	ldw	r2,-12(fp)
411183ac:	10800317 	ldw	r2,12(r2)
411183b0:	10800104 	addi	r2,r2,4
411183b4:	e0fffd17 	ldw	r3,-12(fp)
411183b8:	19000d17 	ldw	r4,52(r3)
411183bc:	00fff2c4 	movi	r3,-53
411183c0:	20c6703a 	and	r3,r4,r3
411183c4:	18c00114 	ori	r3,r3,4
411183c8:	10c00035 	stwio	r3,0(r2)
411183cc:	e0bff717 	ldw	r2,-36(fp)
411183d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
411183d4:	e0bff917 	ldw	r2,-28(fp)
411183d8:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
411183dc:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
411183e0:	e0bffd17 	ldw	r2,-12(fp)
411183e4:	10800317 	ldw	r2,12(r2)
411183e8:	10800037 	ldwio	r2,0(r2)
411183ec:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
411183f0:	00001106 	br	41118438 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
411183f4:	01000044 	movi	r4,1
411183f8:	11198f80 	call	411198f8 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
411183fc:	e0bff30b 	ldhu	r2,-52(fp)
41118400:	1084e230 	cmpltui	r2,r2,5000
41118404:	1000051e 	bne	r2,zero,4111841c <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
41118408:	011044b4 	movhi	r4,16658
4111840c:	21303304 	addi	r4,r4,-16180
41118410:	111a2840 	call	4111a284 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
41118414:	00bff084 	movi	r2,-62
41118418:	00003206 	br	411184e4 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
4111841c:	e0bff30b 	ldhu	r2,-52(fp)
41118420:	10800044 	addi	r2,r2,1
41118424:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
41118428:	e0bffd17 	ldw	r2,-12(fp)
4111842c:	10800317 	ldw	r2,12(r2)
41118430:	10800037 	ldwio	r2,0(r2)
41118434:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
41118438:	e0fff217 	ldw	r3,-56(fp)
4111843c:	e0bff817 	ldw	r2,-32(fp)
41118440:	1884703a 	and	r2,r3,r2
41118444:	1000031e 	bne	r2,zero,41118454 <alt_msgdma_descriptor_sync_transfer+0x2d4>
41118448:	e0bff217 	ldw	r2,-56(fp)
4111844c:	1080004c 	andi	r2,r2,1
41118450:	103fe81e 	bne	r2,zero,411183f4 <__reset+0xbb0f83f4>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
41118454:	e0fff217 	ldw	r3,-56(fp)
41118458:	e0bff817 	ldw	r2,-32(fp)
4111845c:	1884703a 	and	r2,r3,r2
41118460:	10000226 	beq	r2,zero,4111846c <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
41118464:	e0bff817 	ldw	r2,-32(fp)
41118468:	00001e06 	br	411184e4 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
4111846c:	e0bffd17 	ldw	r2,-12(fp)
41118470:	10800317 	ldw	r2,12(r2)
41118474:	10800104 	addi	r2,r2,4
41118478:	10800037 	ldwio	r2,0(r2)
4111847c:	10800814 	ori	r2,r2,32
41118480:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41118484:	0005303a 	rdctl	r2,status
41118488:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4111848c:	e0fffa17 	ldw	r3,-24(fp)
41118490:	00bfff84 	movi	r2,-2
41118494:	1884703a 	and	r2,r3,r2
41118498:	1001703a 	wrctl	status,r2
  
  return context;
4111849c:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
411184a0:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
411184a4:	e0bffd17 	ldw	r2,-12(fp)
411184a8:	10800317 	ldw	r2,12(r2)
411184ac:	10800104 	addi	r2,r2,4
411184b0:	e0fff617 	ldw	r3,-40(fp)
411184b4:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
411184b8:	e0bffd17 	ldw	r2,-12(fp)
411184bc:	10800317 	ldw	r2,12(r2)
411184c0:	e0fffd17 	ldw	r3,-12(fp)
411184c4:	18c00317 	ldw	r3,12(r3)
411184c8:	18c00037 	ldwio	r3,0(r3)
411184cc:	10c00035 	stwio	r3,0(r2)
411184d0:	e0bff717 	ldw	r2,-36(fp)
411184d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
411184d8:	e0bffb17 	ldw	r2,-20(fp)
411184dc:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
411184e0:	0005883a 	mov	r2,zero

}
411184e4:	e037883a 	mov	sp,fp
411184e8:	dfc00117 	ldw	ra,4(sp)
411184ec:	df000017 	ldw	fp,0(sp)
411184f0:	dec00204 	addi	sp,sp,8
411184f4:	f800283a 	ret

411184f8 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
411184f8:	defff804 	addi	sp,sp,-32
411184fc:	dfc00715 	stw	ra,28(sp)
41118500:	df000615 	stw	fp,24(sp)
41118504:	df000604 	addi	fp,sp,24
41118508:	e13ffc15 	stw	r4,-16(fp)
4111850c:	e17ffd15 	stw	r5,-12(fp)
41118510:	e1bffe15 	stw	r6,-8(fp)
41118514:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
41118518:	e0800217 	ldw	r2,8(fp)
4111851c:	d8800115 	stw	r2,4(sp)
41118520:	e0bfff17 	ldw	r2,-4(fp)
41118524:	d8800015 	stw	r2,0(sp)
41118528:	e1fffe17 	ldw	r7,-8(fp)
4111852c:	000d883a 	mov	r6,zero
41118530:	e17ffd17 	ldw	r5,-12(fp)
41118534:	e13ffc17 	ldw	r4,-16(fp)
41118538:	1117cd00 	call	41117cd0 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
4111853c:	e037883a 	mov	sp,fp
41118540:	dfc00117 	ldw	ra,4(sp)
41118544:	df000017 	ldw	fp,0(sp)
41118548:	dec00204 	addi	sp,sp,8
4111854c:	f800283a 	ret

41118550 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
41118550:	defff804 	addi	sp,sp,-32
41118554:	dfc00715 	stw	ra,28(sp)
41118558:	df000615 	stw	fp,24(sp)
4111855c:	df000604 	addi	fp,sp,24
41118560:	e13ffc15 	stw	r4,-16(fp)
41118564:	e17ffd15 	stw	r5,-12(fp)
41118568:	e1bffe15 	stw	r6,-8(fp)
4111856c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
41118570:	e0800217 	ldw	r2,8(fp)
41118574:	d8800115 	stw	r2,4(sp)
41118578:	e0bfff17 	ldw	r2,-4(fp)
4111857c:	d8800015 	stw	r2,0(sp)
41118580:	000f883a 	mov	r7,zero
41118584:	e1bffe17 	ldw	r6,-8(fp)
41118588:	e17ffd17 	ldw	r5,-12(fp)
4111858c:	e13ffc17 	ldw	r4,-16(fp)
41118590:	1117cd00 	call	41117cd0 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
41118594:	e037883a 	mov	sp,fp
41118598:	dfc00117 	ldw	ra,4(sp)
4111859c:	df000017 	ldw	fp,0(sp)
411185a0:	dec00204 	addi	sp,sp,8
411185a4:	f800283a 	ret

411185a8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
411185a8:	defff804 	addi	sp,sp,-32
411185ac:	dfc00715 	stw	ra,28(sp)
411185b0:	df000615 	stw	fp,24(sp)
411185b4:	df000604 	addi	fp,sp,24
411185b8:	e13ffc15 	stw	r4,-16(fp)
411185bc:	e17ffd15 	stw	r5,-12(fp)
411185c0:	e1bffe15 	stw	r6,-8(fp)
411185c4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
411185c8:	e0800317 	ldw	r2,12(fp)
411185cc:	d8800115 	stw	r2,4(sp)
411185d0:	e0800217 	ldw	r2,8(fp)
411185d4:	d8800015 	stw	r2,0(sp)
411185d8:	e1ffff17 	ldw	r7,-4(fp)
411185dc:	e1bffe17 	ldw	r6,-8(fp)
411185e0:	e17ffd17 	ldw	r5,-12(fp)
411185e4:	e13ffc17 	ldw	r4,-16(fp)
411185e8:	1117cd00 	call	41117cd0 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
411185ec:	e037883a 	mov	sp,fp
411185f0:	dfc00117 	ldw	ra,4(sp)
411185f4:	df000017 	ldw	fp,0(sp)
411185f8:	dec00204 	addi	sp,sp,8
411185fc:	f800283a 	ret

41118600 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
41118600:	defff004 	addi	sp,sp,-64
41118604:	dfc00f15 	stw	ra,60(sp)
41118608:	df000e15 	stw	fp,56(sp)
4111860c:	df000e04 	addi	fp,sp,56
41118610:	e13ff915 	stw	r4,-28(fp)
41118614:	e17ffa15 	stw	r5,-24(fp)
41118618:	e1bffb15 	stw	r6,-20(fp)
4111861c:	e1fffc15 	stw	r7,-16(fp)
41118620:	e1000317 	ldw	r4,12(fp)
41118624:	e0c00417 	ldw	r3,16(fp)
41118628:	e0800517 	ldw	r2,20(fp)
4111862c:	e13ffd0d 	sth	r4,-12(fp)
41118630:	e0fffe05 	stb	r3,-8(fp)
41118634:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
41118638:	e0bffd0b 	ldhu	r2,-12(fp)
4111863c:	e0fffe03 	ldbu	r3,-8(fp)
41118640:	e13fff0b 	ldhu	r4,-4(fp)
41118644:	d9000615 	stw	r4,24(sp)
41118648:	d8000515 	stw	zero,20(sp)
4111864c:	d8c00415 	stw	r3,16(sp)
41118650:	d8000315 	stw	zero,12(sp)
41118654:	d8800215 	stw	r2,8(sp)
41118658:	e0800217 	ldw	r2,8(fp)
4111865c:	d8800115 	stw	r2,4(sp)
41118660:	e0bffc17 	ldw	r2,-16(fp)
41118664:	d8800015 	stw	r2,0(sp)
41118668:	e1fffb17 	ldw	r7,-20(fp)
4111866c:	000d883a 	mov	r6,zero
41118670:	e17ffa17 	ldw	r5,-24(fp)
41118674:	e13ff917 	ldw	r4,-28(fp)
41118678:	1117d5c0 	call	41117d5c <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
4111867c:	e037883a 	mov	sp,fp
41118680:	dfc00117 	ldw	ra,4(sp)
41118684:	df000017 	ldw	fp,0(sp)
41118688:	dec00204 	addi	sp,sp,8
4111868c:	f800283a 	ret

41118690 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
41118690:	defff004 	addi	sp,sp,-64
41118694:	dfc00f15 	stw	ra,60(sp)
41118698:	df000e15 	stw	fp,56(sp)
4111869c:	df000e04 	addi	fp,sp,56
411186a0:	e13ff915 	stw	r4,-28(fp)
411186a4:	e17ffa15 	stw	r5,-24(fp)
411186a8:	e1bffb15 	stw	r6,-20(fp)
411186ac:	e1fffc15 	stw	r7,-16(fp)
411186b0:	e1000317 	ldw	r4,12(fp)
411186b4:	e0c00417 	ldw	r3,16(fp)
411186b8:	e0800517 	ldw	r2,20(fp)
411186bc:	e13ffd0d 	sth	r4,-12(fp)
411186c0:	e0fffe05 	stb	r3,-8(fp)
411186c4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
411186c8:	e0bffd0b 	ldhu	r2,-12(fp)
411186cc:	e0fffe03 	ldbu	r3,-8(fp)
411186d0:	e13fff0b 	ldhu	r4,-4(fp)
411186d4:	d8000615 	stw	zero,24(sp)
411186d8:	d9000515 	stw	r4,20(sp)
411186dc:	d8000415 	stw	zero,16(sp)
411186e0:	d8c00315 	stw	r3,12(sp)
411186e4:	d8800215 	stw	r2,8(sp)
411186e8:	e0800217 	ldw	r2,8(fp)
411186ec:	d8800115 	stw	r2,4(sp)
411186f0:	e0bffc17 	ldw	r2,-16(fp)
411186f4:	d8800015 	stw	r2,0(sp)
411186f8:	000f883a 	mov	r7,zero
411186fc:	e1bffb17 	ldw	r6,-20(fp)
41118700:	e17ffa17 	ldw	r5,-24(fp)
41118704:	e13ff917 	ldw	r4,-28(fp)
41118708:	1117d5c0 	call	41117d5c <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
4111870c:	e037883a 	mov	sp,fp
41118710:	dfc00117 	ldw	ra,4(sp)
41118714:	df000017 	ldw	fp,0(sp)
41118718:	dec00204 	addi	sp,sp,8
4111871c:	f800283a 	ret

41118720 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
41118720:	deffee04 	addi	sp,sp,-72
41118724:	dfc01115 	stw	ra,68(sp)
41118728:	df001015 	stw	fp,64(sp)
4111872c:	df001004 	addi	fp,sp,64
41118730:	e13ff715 	stw	r4,-36(fp)
41118734:	e17ff815 	stw	r5,-32(fp)
41118738:	e1bff915 	stw	r6,-28(fp)
4111873c:	e1fffa15 	stw	r7,-24(fp)
41118740:	e1800417 	ldw	r6,16(fp)
41118744:	e1400517 	ldw	r5,20(fp)
41118748:	e1000617 	ldw	r4,24(fp)
4111874c:	e0c00717 	ldw	r3,28(fp)
41118750:	e0800817 	ldw	r2,32(fp)
41118754:	e1bffb0d 	sth	r6,-20(fp)
41118758:	e17ffc05 	stb	r5,-16(fp)
4111875c:	e13ffd05 	stb	r4,-12(fp)
41118760:	e0fffe0d 	sth	r3,-8(fp)
41118764:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
41118768:	e0bffb0b 	ldhu	r2,-20(fp)
4111876c:	e0fffc03 	ldbu	r3,-16(fp)
41118770:	e13ffd03 	ldbu	r4,-12(fp)
41118774:	e17ffe0b 	ldhu	r5,-8(fp)
41118778:	e1bfff0b 	ldhu	r6,-4(fp)
4111877c:	d9800615 	stw	r6,24(sp)
41118780:	d9400515 	stw	r5,20(sp)
41118784:	d9000415 	stw	r4,16(sp)
41118788:	d8c00315 	stw	r3,12(sp)
4111878c:	d8800215 	stw	r2,8(sp)
41118790:	e0800317 	ldw	r2,12(fp)
41118794:	d8800115 	stw	r2,4(sp)
41118798:	e0800217 	ldw	r2,8(fp)
4111879c:	d8800015 	stw	r2,0(sp)
411187a0:	e1fffa17 	ldw	r7,-24(fp)
411187a4:	e1bff917 	ldw	r6,-28(fp)
411187a8:	e17ff817 	ldw	r5,-32(fp)
411187ac:	e13ff717 	ldw	r4,-36(fp)
411187b0:	1117d5c0 	call	41117d5c <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
411187b4:	e037883a 	mov	sp,fp
411187b8:	dfc00117 	ldw	ra,4(sp)
411187bc:	df000017 	ldw	fp,0(sp)
411187c0:	dec00204 	addi	sp,sp,8
411187c4:	f800283a 	ret

411187c8 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
411187c8:	defffb04 	addi	sp,sp,-20
411187cc:	df000415 	stw	fp,16(sp)
411187d0:	df000404 	addi	fp,sp,16
411187d4:	e13ffc15 	stw	r4,-16(fp)
411187d8:	e17ffd15 	stw	r5,-12(fp)
411187dc:	e1bffe15 	stw	r6,-8(fp)
411187e0:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
411187e4:	e0bffc17 	ldw	r2,-16(fp)
411187e8:	10c01217 	ldw	r3,72(r2)
411187ec:	e0800117 	ldw	r2,4(fp)
411187f0:	18800436 	bltu	r3,r2,41118804 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
411187f4:	e0bffc17 	ldw	r2,-16(fp)
411187f8:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
411187fc:	10803fcc 	andi	r2,r2,255
41118800:	10000226 	beq	r2,zero,4111880c <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
41118804:	00bffa84 	movi	r2,-22
41118808:	00001406 	br	4111885c <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
4111880c:	e0bffd17 	ldw	r2,-12(fp)
41118810:	e0fffe17 	ldw	r3,-8(fp)
41118814:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
41118818:	e0bffd17 	ldw	r2,-12(fp)
4111881c:	e0ffff17 	ldw	r3,-4(fp)
41118820:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
41118824:	e0bffd17 	ldw	r2,-12(fp)
41118828:	e0c00117 	ldw	r3,4(fp)
4111882c:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
41118830:	e0fffd17 	ldw	r3,-12(fp)
41118834:	e0bffd17 	ldw	r2,-12(fp)
41118838:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
4111883c:	e0c00217 	ldw	r3,8(fp)
41118840:	00900034 	movhi	r2,16384
41118844:	10bfffc4 	addi	r2,r2,-1
41118848:	1884703a 	and	r2,r3,r2
4111884c:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
41118850:	e0bffd17 	ldw	r2,-12(fp)
41118854:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
41118858:	0005883a 	mov	r2,zero
}
4111885c:	e037883a 	mov	sp,fp
41118860:	df000017 	ldw	fp,0(sp)
41118864:	dec00104 	addi	sp,sp,4
41118868:	f800283a 	ret

4111886c <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
4111886c:	defff404 	addi	sp,sp,-48
41118870:	df000b15 	stw	fp,44(sp)
41118874:	df000b04 	addi	fp,sp,44
41118878:	e13ff715 	stw	r4,-36(fp)
4111887c:	e17ff815 	stw	r5,-32(fp)
41118880:	e1bff915 	stw	r6,-28(fp)
41118884:	e1fffa15 	stw	r7,-24(fp)
41118888:	e1800517 	ldw	r6,20(fp)
4111888c:	e1400617 	ldw	r5,24(fp)
41118890:	e1000717 	ldw	r4,28(fp)
41118894:	e0c00817 	ldw	r3,32(fp)
41118898:	e0800917 	ldw	r2,36(fp)
4111889c:	e1bffb0d 	sth	r6,-20(fp)
411188a0:	e17ffc05 	stb	r5,-16(fp)
411188a4:	e13ffd05 	stb	r4,-12(fp)
411188a8:	e0fffe0d 	sth	r3,-8(fp)
411188ac:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
411188b0:	e0bff717 	ldw	r2,-36(fp)
411188b4:	10c01217 	ldw	r3,72(r2)
411188b8:	e0800317 	ldw	r2,12(fp)
411188bc:	18801936 	bltu	r3,r2,41118924 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
411188c0:	e13ff717 	ldw	r4,-36(fp)
411188c4:	20801317 	ldw	r2,76(r4)
411188c8:	20c01417 	ldw	r3,80(r4)
411188cc:	e13ffe0b 	ldhu	r4,-8(fp)
411188d0:	213fffcc 	andi	r4,r4,65535
411188d4:	2015883a 	mov	r10,r4
411188d8:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
411188dc:	1ac01136 	bltu	r3,r11,41118924 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
411188e0:	58c0011e 	bne	r11,r3,411188e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
411188e4:	12800f36 	bltu	r2,r10,41118924 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
411188e8:	e13ff717 	ldw	r4,-36(fp)
411188ec:	20801317 	ldw	r2,76(r4)
411188f0:	20c01417 	ldw	r3,80(r4)
411188f4:	e13fff0b 	ldhu	r4,-4(fp)
411188f8:	213fffcc 	andi	r4,r4,65535
411188fc:	2011883a 	mov	r8,r4
41118900:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
41118904:	1a400736 	bltu	r3,r9,41118924 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
41118908:	48c0011e 	bne	r9,r3,41118910 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
4111890c:	12000536 	bltu	r2,r8,41118924 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
41118910:	e0bff717 	ldw	r2,-36(fp)
41118914:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
41118918:	10803fcc 	andi	r2,r2,255
4111891c:	10800060 	cmpeqi	r2,r2,1
41118920:	1000021e 	bne	r2,zero,4111892c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
41118924:	00bffa84 	movi	r2,-22
41118928:	00003106 	br	411189f0 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
4111892c:	e0bff817 	ldw	r2,-32(fp)
41118930:	e0fff917 	ldw	r3,-28(fp)
41118934:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
41118938:	e0bff817 	ldw	r2,-32(fp)
4111893c:	e0fffa17 	ldw	r3,-24(fp)
41118940:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
41118944:	e0bff817 	ldw	r2,-32(fp)
41118948:	e0c00117 	ldw	r3,4(fp)
4111894c:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
41118950:	e0bff817 	ldw	r2,-32(fp)
41118954:	e0c00217 	ldw	r3,8(fp)
41118958:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
4111895c:	e0bff817 	ldw	r2,-32(fp)
41118960:	e0c00317 	ldw	r3,12(fp)
41118964:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
41118968:	e0bff817 	ldw	r2,-32(fp)
4111896c:	e0fffb0b 	ldhu	r3,-20(fp)
41118970:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
41118974:	e0bff817 	ldw	r2,-32(fp)
41118978:	e0fffc03 	ldbu	r3,-16(fp)
4111897c:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
41118980:	e0bff817 	ldw	r2,-32(fp)
41118984:	e0fffd03 	ldbu	r3,-12(fp)
41118988:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
4111898c:	e0bff817 	ldw	r2,-32(fp)
41118990:	e0fffe0b 	ldhu	r3,-8(fp)
41118994:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
41118998:	e0bff817 	ldw	r2,-32(fp)
4111899c:	e0ffff0b 	ldhu	r3,-4(fp)
411189a0:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
411189a4:	e0bff817 	ldw	r2,-32(fp)
411189a8:	1019883a 	mov	r12,r2
411189ac:	001b883a 	mov	r13,zero
411189b0:	e33ff515 	stw	r12,-44(fp)
411189b4:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
411189b8:	e0fff517 	ldw	r3,-44(fp)
411189bc:	e0bff817 	ldw	r2,-32(fp)
411189c0:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
411189c4:	e0fff617 	ldw	r3,-40(fp)
411189c8:	e0bff817 	ldw	r2,-32(fp)
411189cc:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
411189d0:	e0c00417 	ldw	r3,16(fp)
411189d4:	00900034 	movhi	r2,16384
411189d8:	10bfffc4 	addi	r2,r2,-1
411189dc:	1884703a 	and	r2,r3,r2
411189e0:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
411189e4:	e0bff817 	ldw	r2,-32(fp)
411189e8:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
411189ec:	0005883a 	mov	r2,zero
}
411189f0:	e037883a 	mov	sp,fp
411189f4:	df000017 	ldw	fp,0(sp)
411189f8:	dec00104 	addi	sp,sp,4
411189fc:	f800283a 	ret

41118a00 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
41118a00:	defff804 	addi	sp,sp,-32
41118a04:	dfc00715 	stw	ra,28(sp)
41118a08:	df000615 	stw	fp,24(sp)
41118a0c:	df000604 	addi	fp,sp,24
41118a10:	e13ffc15 	stw	r4,-16(fp)
41118a14:	e17ffd15 	stw	r5,-12(fp)
41118a18:	e1bffe15 	stw	r6,-8(fp)
41118a1c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
41118a20:	e0800317 	ldw	r2,12(fp)
41118a24:	d8800115 	stw	r2,4(sp)
41118a28:	e0800217 	ldw	r2,8(fp)
41118a2c:	d8800015 	stw	r2,0(sp)
41118a30:	e1ffff17 	ldw	r7,-4(fp)
41118a34:	e1bffe17 	ldw	r6,-8(fp)
41118a38:	e17ffd17 	ldw	r5,-12(fp)
41118a3c:	e13ffc17 	ldw	r4,-16(fp)
41118a40:	11187c80 	call	411187c8 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
41118a44:	e037883a 	mov	sp,fp
41118a48:	dfc00117 	ldw	ra,4(sp)
41118a4c:	df000017 	ldw	fp,0(sp)
41118a50:	dec00204 	addi	sp,sp,8
41118a54:	f800283a 	ret

41118a58 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
41118a58:	defff804 	addi	sp,sp,-32
41118a5c:	dfc00715 	stw	ra,28(sp)
41118a60:	df000615 	stw	fp,24(sp)
41118a64:	df000604 	addi	fp,sp,24
41118a68:	e13ffc15 	stw	r4,-16(fp)
41118a6c:	e17ffd15 	stw	r5,-12(fp)
41118a70:	e1bffe15 	stw	r6,-8(fp)
41118a74:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
41118a78:	e0800217 	ldw	r2,8(fp)
41118a7c:	d8800115 	stw	r2,4(sp)
41118a80:	e0bfff17 	ldw	r2,-4(fp)
41118a84:	d8800015 	stw	r2,0(sp)
41118a88:	e1fffe17 	ldw	r7,-8(fp)
41118a8c:	000d883a 	mov	r6,zero
41118a90:	e17ffd17 	ldw	r5,-12(fp)
41118a94:	e13ffc17 	ldw	r4,-16(fp)
41118a98:	11187c80 	call	411187c8 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
41118a9c:	e037883a 	mov	sp,fp
41118aa0:	dfc00117 	ldw	ra,4(sp)
41118aa4:	df000017 	ldw	fp,0(sp)
41118aa8:	dec00204 	addi	sp,sp,8
41118aac:	f800283a 	ret

41118ab0 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
41118ab0:	defff804 	addi	sp,sp,-32
41118ab4:	dfc00715 	stw	ra,28(sp)
41118ab8:	df000615 	stw	fp,24(sp)
41118abc:	df000604 	addi	fp,sp,24
41118ac0:	e13ffc15 	stw	r4,-16(fp)
41118ac4:	e17ffd15 	stw	r5,-12(fp)
41118ac8:	e1bffe15 	stw	r6,-8(fp)
41118acc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
41118ad0:	e0800217 	ldw	r2,8(fp)
41118ad4:	d8800115 	stw	r2,4(sp)
41118ad8:	e0bfff17 	ldw	r2,-4(fp)
41118adc:	d8800015 	stw	r2,0(sp)
41118ae0:	000f883a 	mov	r7,zero
41118ae4:	e1bffe17 	ldw	r6,-8(fp)
41118ae8:	e17ffd17 	ldw	r5,-12(fp)
41118aec:	e13ffc17 	ldw	r4,-16(fp)
41118af0:	11187c80 	call	411187c8 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
41118af4:	e037883a 	mov	sp,fp
41118af8:	dfc00117 	ldw	ra,4(sp)
41118afc:	df000017 	ldw	fp,0(sp)
41118b00:	dec00204 	addi	sp,sp,8
41118b04:	f800283a 	ret

41118b08 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
41118b08:	deffee04 	addi	sp,sp,-72
41118b0c:	dfc01115 	stw	ra,68(sp)
41118b10:	df001015 	stw	fp,64(sp)
41118b14:	df001004 	addi	fp,sp,64
41118b18:	e13ff915 	stw	r4,-28(fp)
41118b1c:	e17ffa15 	stw	r5,-24(fp)
41118b20:	e1bffb15 	stw	r6,-20(fp)
41118b24:	e1fffc15 	stw	r7,-16(fp)
41118b28:	e1000417 	ldw	r4,16(fp)
41118b2c:	e0c00517 	ldw	r3,20(fp)
41118b30:	e0800617 	ldw	r2,24(fp)
41118b34:	e13ffd0d 	sth	r4,-12(fp)
41118b38:	e0fffe05 	stb	r3,-8(fp)
41118b3c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
41118b40:	e0bffd0b 	ldhu	r2,-12(fp)
41118b44:	e0fffe03 	ldbu	r3,-8(fp)
41118b48:	e13fff0b 	ldhu	r4,-4(fp)
41118b4c:	d9000815 	stw	r4,32(sp)
41118b50:	d8000715 	stw	zero,28(sp)
41118b54:	d8c00615 	stw	r3,24(sp)
41118b58:	d8000515 	stw	zero,20(sp)
41118b5c:	d8800415 	stw	r2,16(sp)
41118b60:	e0800317 	ldw	r2,12(fp)
41118b64:	d8800315 	stw	r2,12(sp)
41118b68:	e0800217 	ldw	r2,8(fp)
41118b6c:	d8800215 	stw	r2,8(sp)
41118b70:	e0bffc17 	ldw	r2,-16(fp)
41118b74:	d8800115 	stw	r2,4(sp)
41118b78:	e0bffb17 	ldw	r2,-20(fp)
41118b7c:	d8800015 	stw	r2,0(sp)
41118b80:	000f883a 	mov	r7,zero
41118b84:	000d883a 	mov	r6,zero
41118b88:	e17ffa17 	ldw	r5,-24(fp)
41118b8c:	e13ff917 	ldw	r4,-28(fp)
41118b90:	111886c0 	call	4111886c <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
41118b94:	e037883a 	mov	sp,fp
41118b98:	dfc00117 	ldw	ra,4(sp)
41118b9c:	df000017 	ldw	fp,0(sp)
41118ba0:	dec00204 	addi	sp,sp,8
41118ba4:	f800283a 	ret

41118ba8 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
41118ba8:	deffee04 	addi	sp,sp,-72
41118bac:	dfc01115 	stw	ra,68(sp)
41118bb0:	df001015 	stw	fp,64(sp)
41118bb4:	df001004 	addi	fp,sp,64
41118bb8:	e13ff915 	stw	r4,-28(fp)
41118bbc:	e17ffa15 	stw	r5,-24(fp)
41118bc0:	e1bffb15 	stw	r6,-20(fp)
41118bc4:	e1fffc15 	stw	r7,-16(fp)
41118bc8:	e1000417 	ldw	r4,16(fp)
41118bcc:	e0c00517 	ldw	r3,20(fp)
41118bd0:	e0800617 	ldw	r2,24(fp)
41118bd4:	e13ffd0d 	sth	r4,-12(fp)
41118bd8:	e0fffe05 	stb	r3,-8(fp)
41118bdc:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
41118be0:	e0bffd0b 	ldhu	r2,-12(fp)
41118be4:	e0fffe03 	ldbu	r3,-8(fp)
41118be8:	e13fff0b 	ldhu	r4,-4(fp)
41118bec:	d8000815 	stw	zero,32(sp)
41118bf0:	d9000715 	stw	r4,28(sp)
41118bf4:	d8000615 	stw	zero,24(sp)
41118bf8:	d8c00515 	stw	r3,20(sp)
41118bfc:	d8800415 	stw	r2,16(sp)
41118c00:	e0800317 	ldw	r2,12(fp)
41118c04:	d8800315 	stw	r2,12(sp)
41118c08:	e0800217 	ldw	r2,8(fp)
41118c0c:	d8800215 	stw	r2,8(sp)
41118c10:	d8000115 	stw	zero,4(sp)
41118c14:	d8000015 	stw	zero,0(sp)
41118c18:	e1fffc17 	ldw	r7,-16(fp)
41118c1c:	e1bffb17 	ldw	r6,-20(fp)
41118c20:	e17ffa17 	ldw	r5,-24(fp)
41118c24:	e13ff917 	ldw	r4,-28(fp)
41118c28:	111886c0 	call	4111886c <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
41118c2c:	e037883a 	mov	sp,fp
41118c30:	dfc00117 	ldw	ra,4(sp)
41118c34:	df000017 	ldw	fp,0(sp)
41118c38:	dec00204 	addi	sp,sp,8
41118c3c:	f800283a 	ret

41118c40 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
41118c40:	deffec04 	addi	sp,sp,-80
41118c44:	dfc01315 	stw	ra,76(sp)
41118c48:	df001215 	stw	fp,72(sp)
41118c4c:	df001204 	addi	fp,sp,72
41118c50:	e13ff715 	stw	r4,-36(fp)
41118c54:	e17ff815 	stw	r5,-32(fp)
41118c58:	e1bff915 	stw	r6,-28(fp)
41118c5c:	e1fffa15 	stw	r7,-24(fp)
41118c60:	e1800617 	ldw	r6,24(fp)
41118c64:	e1400717 	ldw	r5,28(fp)
41118c68:	e1000817 	ldw	r4,32(fp)
41118c6c:	e0c00917 	ldw	r3,36(fp)
41118c70:	e0800a17 	ldw	r2,40(fp)
41118c74:	e1bffb0d 	sth	r6,-20(fp)
41118c78:	e17ffc05 	stb	r5,-16(fp)
41118c7c:	e13ffd05 	stb	r4,-12(fp)
41118c80:	e0fffe0d 	sth	r3,-8(fp)
41118c84:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
41118c88:	e0bffb0b 	ldhu	r2,-20(fp)
41118c8c:	e0fffc03 	ldbu	r3,-16(fp)
41118c90:	e13ffd03 	ldbu	r4,-12(fp)
41118c94:	e17ffe0b 	ldhu	r5,-8(fp)
41118c98:	e1bfff0b 	ldhu	r6,-4(fp)
41118c9c:	d9800815 	stw	r6,32(sp)
41118ca0:	d9400715 	stw	r5,28(sp)
41118ca4:	d9000615 	stw	r4,24(sp)
41118ca8:	d8c00515 	stw	r3,20(sp)
41118cac:	d8800415 	stw	r2,16(sp)
41118cb0:	e0800517 	ldw	r2,20(fp)
41118cb4:	d8800315 	stw	r2,12(sp)
41118cb8:	e0800417 	ldw	r2,16(fp)
41118cbc:	d8800215 	stw	r2,8(sp)
41118cc0:	e0800317 	ldw	r2,12(fp)
41118cc4:	d8800115 	stw	r2,4(sp)
41118cc8:	e0800217 	ldw	r2,8(fp)
41118ccc:	d8800015 	stw	r2,0(sp)
41118cd0:	e1fffa17 	ldw	r7,-24(fp)
41118cd4:	e1bff917 	ldw	r6,-28(fp)
41118cd8:	e17ff817 	ldw	r5,-32(fp)
41118cdc:	e13ff717 	ldw	r4,-36(fp)
41118ce0:	111886c0 	call	4111886c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
41118ce4:	e037883a 	mov	sp,fp
41118ce8:	dfc00117 	ldw	ra,4(sp)
41118cec:	df000017 	ldw	fp,0(sp)
41118cf0:	dec00204 	addi	sp,sp,8
41118cf4:	f800283a 	ret

41118cf8 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
41118cf8:	defffc04 	addi	sp,sp,-16
41118cfc:	df000315 	stw	fp,12(sp)
41118d00:	df000304 	addi	fp,sp,12
41118d04:	e13ffe15 	stw	r4,-8(fp)
41118d08:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
41118d0c:	e0bfff17 	ldw	r2,-4(fp)
41118d10:	1000021e 	bne	r2,zero,41118d1c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
41118d14:	00bffa84 	movi	r2,-22
41118d18:	00002f06 	br	41118dd8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
41118d1c:	e0bfff17 	ldw	r2,-4(fp)
41118d20:	10c00317 	ldw	r3,12(r2)
41118d24:	e0bfff17 	ldw	r2,-4(fp)
41118d28:	18800226 	beq	r3,r2,41118d34 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
41118d2c:	00bffa84 	movi	r2,-22
41118d30:	00002906 	br	41118dd8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
41118d34:	e0bffe17 	ldw	r2,-8(fp)
41118d38:	10800017 	ldw	r2,0(r2)
41118d3c:	1000051e 	bne	r2,zero,41118d54 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
41118d40:	e0bffe17 	ldw	r2,-8(fp)
41118d44:	e0ffff17 	ldw	r3,-4(fp)
41118d48:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
41118d4c:	0005883a 	mov	r2,zero
41118d50:	00002106 	br	41118dd8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
41118d54:	e0bffe17 	ldw	r2,-8(fp)
41118d58:	10c00017 	ldw	r3,0(r2)
41118d5c:	e0bfff17 	ldw	r2,-4(fp)
41118d60:	1880021e 	bne	r3,r2,41118d6c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
41118d64:	00bffa84 	movi	r2,-22
41118d68:	00001b06 	br	41118dd8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
41118d6c:	e0bffe17 	ldw	r2,-8(fp)
41118d70:	10800017 	ldw	r2,0(r2)
41118d74:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
41118d78:	00000906 	br	41118da0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
41118d7c:	e0bffd17 	ldw	r2,-12(fp)
41118d80:	10c00317 	ldw	r3,12(r2)
41118d84:	e0bfff17 	ldw	r2,-4(fp)
41118d88:	1880021e 	bne	r3,r2,41118d94 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
41118d8c:	00bffa84 	movi	r2,-22
41118d90:	00001106 	br	41118dd8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
41118d94:	e0bffd17 	ldw	r2,-12(fp)
41118d98:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
41118d9c:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
41118da0:	e0bffd17 	ldw	r2,-12(fp)
41118da4:	10800317 	ldw	r2,12(r2)
41118da8:	e0fffe17 	ldw	r3,-8(fp)
41118dac:	18c00017 	ldw	r3,0(r3)
41118db0:	10fff21e 	bne	r2,r3,41118d7c <__reset+0xbb0f8d7c>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
41118db4:	e0ffff17 	ldw	r3,-4(fp)
41118db8:	e0bffd17 	ldw	r2,-12(fp)
41118dbc:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
41118dc0:	e0bffe17 	ldw	r2,-8(fp)
41118dc4:	10800017 	ldw	r2,0(r2)
41118dc8:	1007883a 	mov	r3,r2
41118dcc:	e0bfff17 	ldw	r2,-4(fp)
41118dd0:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
41118dd4:	0005883a 	mov	r2,zero
}
41118dd8:	e037883a 	mov	sp,fp
41118ddc:	df000017 	ldw	fp,0(sp)
41118de0:	dec00104 	addi	sp,sp,4
41118de4:	f800283a 	ret

41118de8 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
41118de8:	defff804 	addi	sp,sp,-32
41118dec:	df000715 	stw	fp,28(sp)
41118df0:	df000704 	addi	fp,sp,28
41118df4:	e13ffe15 	stw	r4,-8(fp)
41118df8:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
41118dfc:	e13fff17 	ldw	r4,-4(fp)
41118e00:	2000021e 	bne	r4,zero,41118e0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
41118e04:	00bffa84 	movi	r2,-22
41118e08:	00005906 	br	41118f70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
41118e0c:	e13fff17 	ldw	r4,-4(fp)
41118e10:	2015883a 	mov	r10,r4
41118e14:	0017883a 	mov	r11,zero
41118e18:	e2bffc15 	stw	r10,-16(fp)
41118e1c:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
41118e20:	e13fff17 	ldw	r4,-4(fp)
41118e24:	21400317 	ldw	r5,12(r4)
41118e28:	e13ffc17 	ldw	r4,-16(fp)
41118e2c:	29000626 	beq	r5,r4,41118e48 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
41118e30:	e13fff17 	ldw	r4,-4(fp)
41118e34:	21400b17 	ldw	r5,44(r4)
41118e38:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
41118e3c:	29000226 	beq	r5,r4,41118e48 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
41118e40:	00bffa84 	movi	r2,-22
41118e44:	00004a06 	br	41118f70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
41118e48:	e13ffe17 	ldw	r4,-8(fp)
41118e4c:	21000017 	ldw	r4,0(r4)
41118e50:	2000051e 	bne	r4,zero,41118e68 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
41118e54:	e0bffe17 	ldw	r2,-8(fp)
41118e58:	e0ffff17 	ldw	r3,-4(fp)
41118e5c:	10c00015 	stw	r3,0(r2)
		return 0;
41118e60:	0005883a 	mov	r2,zero
41118e64:	00004206 	br	41118f70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
41118e68:	e13ffe17 	ldw	r4,-8(fp)
41118e6c:	21400017 	ldw	r5,0(r4)
41118e70:	e13fff17 	ldw	r4,-4(fp)
41118e74:	2900021e 	bne	r5,r4,41118e80 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
41118e78:	00bffa84 	movi	r2,-22
41118e7c:	00003c06 	br	41118f70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
41118e80:	e13ffe17 	ldw	r4,-8(fp)
41118e84:	21000017 	ldw	r4,0(r4)
41118e88:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
41118e8c:	e13ffe17 	ldw	r4,-8(fp)
41118e90:	21000017 	ldw	r4,0(r4)
41118e94:	2011883a 	mov	r8,r4
41118e98:	0013883a 	mov	r9,zero
41118e9c:	e23ffa15 	stw	r8,-24(fp)
41118ea0:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
41118ea4:	00001806 	br	41118f08 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
41118ea8:	e13fff17 	ldw	r4,-4(fp)
41118eac:	200d883a 	mov	r6,r4
41118eb0:	000f883a 	mov	r7,zero
41118eb4:	e1bffc15 	stw	r6,-16(fp)
41118eb8:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
41118ebc:	e13ff917 	ldw	r4,-28(fp)
41118ec0:	21400317 	ldw	r5,12(r4)
41118ec4:	e13ffc17 	ldw	r4,-16(fp)
41118ec8:	2900061e 	bne	r5,r4,41118ee4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
41118ecc:	e13ff917 	ldw	r4,-28(fp)
41118ed0:	21400b17 	ldw	r5,44(r4)
41118ed4:	e13ffd17 	ldw	r4,-12(fp)
41118ed8:	2900021e 	bne	r5,r4,41118ee4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
41118edc:	00bffa84 	movi	r2,-22
41118ee0:	00002306 	br	41118f70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
41118ee4:	e13ff917 	ldw	r4,-28(fp)
41118ee8:	21000317 	ldw	r4,12(r4)
41118eec:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
41118ef0:	e13ff917 	ldw	r4,-28(fp)
41118ef4:	21000b17 	ldw	r4,44(r4)
41118ef8:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
41118efc:	e13ffc17 	ldw	r4,-16(fp)
41118f00:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
41118f04:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
41118f08:	e13ff917 	ldw	r4,-28(fp)
41118f0c:	21400317 	ldw	r5,12(r4)
41118f10:	e13ffa17 	ldw	r4,-24(fp)
41118f14:	29000426 	beq	r5,r4,41118f28 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
41118f18:	e13ff917 	ldw	r4,-28(fp)
41118f1c:	21400b17 	ldw	r5,44(r4)
41118f20:	e13ffb17 	ldw	r4,-20(fp)
41118f24:	293fe01e 	bne	r5,r4,41118ea8 <__reset+0xbb0f8ea8>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
41118f28:	e13fff17 	ldw	r4,-4(fp)
41118f2c:	2005883a 	mov	r2,r4
41118f30:	0007883a 	mov	r3,zero
41118f34:	e0bffc15 	stw	r2,-16(fp)
41118f38:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
41118f3c:	e0fffc17 	ldw	r3,-16(fp)
41118f40:	e0bff917 	ldw	r2,-28(fp)
41118f44:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
41118f48:	e0fffd17 	ldw	r3,-12(fp)
41118f4c:	e0bff917 	ldw	r2,-28(fp)
41118f50:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
41118f54:	e0fffa17 	ldw	r3,-24(fp)
41118f58:	e0bfff17 	ldw	r2,-4(fp)
41118f5c:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
41118f60:	e0fffb17 	ldw	r3,-20(fp)
41118f64:	e0bfff17 	ldw	r2,-4(fp)
41118f68:	10c00b15 	stw	r3,44(r2)
	return 0;
41118f6c:	0005883a 	mov	r2,zero
}
41118f70:	e037883a 	mov	sp,fp
41118f74:	df000017 	ldw	fp,0(sp)
41118f78:	dec00104 	addi	sp,sp,4
41118f7c:	f800283a 	ret

41118f80 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
41118f80:	defffc04 	addi	sp,sp,-16
41118f84:	df000315 	stw	fp,12(sp)
41118f88:	df000304 	addi	fp,sp,12
41118f8c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
41118f90:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
41118f94:	e0bfff17 	ldw	r2,-4(fp)
41118f98:	1000021e 	bne	r2,zero,41118fa4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
41118f9c:	00bffa84 	movi	r2,-22
41118fa0:	00001906 	br	41119008 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
41118fa4:	e0bfff17 	ldw	r2,-4(fp)
41118fa8:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
41118fac:	00000a06 	br	41118fd8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
41118fb0:	e0bffd17 	ldw	r2,-12(fp)
41118fb4:	10800717 	ldw	r2,28(r2)
41118fb8:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
41118fbc:	e0bffe17 	ldw	r2,-8(fp)
41118fc0:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
41118fc4:	e0bffd17 	ldw	r2,-12(fp)
41118fc8:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
41118fcc:	e0bffd17 	ldw	r2,-12(fp)
41118fd0:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
41118fd4:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
41118fd8:	e0bffd17 	ldw	r2,-12(fp)
41118fdc:	10c00317 	ldw	r3,12(r2)
41118fe0:	e0bfff17 	ldw	r2,-4(fp)
41118fe4:	18bff21e 	bne	r3,r2,41118fb0 <__reset+0xbb0f8fb0>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
41118fe8:	e0bffd17 	ldw	r2,-12(fp)
41118fec:	10800717 	ldw	r2,28(r2)
41118ff0:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
41118ff4:	e0bffe17 	ldw	r2,-8(fp)
41118ff8:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
41118ffc:	e0bffd17 	ldw	r2,-12(fp)
41119000:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
41119004:	0005883a 	mov	r2,zero
}
41119008:	e037883a 	mov	sp,fp
4111900c:	df000017 	ldw	fp,0(sp)
41119010:	dec00104 	addi	sp,sp,4
41119014:	f800283a 	ret

41119018 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
41119018:	defff804 	addi	sp,sp,-32
4111901c:	df000715 	stw	fp,28(sp)
41119020:	df000704 	addi	fp,sp,28
41119024:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
41119028:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
4111902c:	e13fff17 	ldw	r4,-4(fp)
41119030:	2000021e 	bne	r4,zero,4111903c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
41119034:	00bffa84 	movi	r2,-22
41119038:	00002806 	br	411190dc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
4111903c:	e13fff17 	ldw	r4,-4(fp)
41119040:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
41119044:	e13fff17 	ldw	r4,-4(fp)
41119048:	2005883a 	mov	r2,r4
4111904c:	0007883a 	mov	r3,zero
41119050:	e0bffb15 	stw	r2,-20(fp)
41119054:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
41119058:	00001006 	br	4111909c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
4111905c:	e0bff917 	ldw	r2,-28(fp)
41119060:	10800f17 	ldw	r2,60(r2)
41119064:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
41119068:	e0bffa17 	ldw	r2,-24(fp)
4111906c:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
41119070:	e0bff917 	ldw	r2,-28(fp)
41119074:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
41119078:	e0bff917 	ldw	r2,-28(fp)
4111907c:	10800317 	ldw	r2,12(r2)
41119080:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
41119084:	e0bff917 	ldw	r2,-28(fp)
41119088:	10800b17 	ldw	r2,44(r2)
4111908c:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
41119090:	e0bffd17 	ldw	r2,-12(fp)
41119094:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
41119098:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
4111909c:	e0bff917 	ldw	r2,-28(fp)
411190a0:	10c00317 	ldw	r3,12(r2)
411190a4:	e0bffb17 	ldw	r2,-20(fp)
411190a8:	18800426 	beq	r3,r2,411190bc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
411190ac:	e0bff917 	ldw	r2,-28(fp)
411190b0:	10c00b17 	ldw	r3,44(r2)
411190b4:	e0bffc17 	ldw	r2,-16(fp)
411190b8:	18bfe81e 	bne	r3,r2,4111905c <__reset+0xbb0f905c>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
411190bc:	e0bff917 	ldw	r2,-28(fp)
411190c0:	10800f17 	ldw	r2,60(r2)
411190c4:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
411190c8:	e0bffa17 	ldw	r2,-24(fp)
411190cc:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
411190d0:	e0bff917 	ldw	r2,-28(fp)
411190d4:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
411190d8:	0005883a 	mov	r2,zero
}
411190dc:	e037883a 	mov	sp,fp
411190e0:	df000017 	ldw	fp,0(sp)
411190e4:	dec00104 	addi	sp,sp,4
411190e8:	f800283a 	ret

411190ec <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
411190ec:	deffef04 	addi	sp,sp,-68
411190f0:	df001015 	stw	fp,64(sp)
411190f4:	df001004 	addi	fp,sp,64
411190f8:	e13ffb15 	stw	r4,-20(fp)
411190fc:	e17ffc15 	stw	r5,-16(fp)
41119100:	e1bffd15 	stw	r6,-12(fp)
41119104:	3807883a 	mov	r3,r7
41119108:	e0800117 	ldw	r2,4(fp)
4111910c:	e0fffe05 	stb	r3,-8(fp)
41119110:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
41119114:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
41119118:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
4111911c:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
41119120:	e0bffc17 	ldw	r2,-16(fp)
41119124:	e0bff915 	stw	r2,-28(fp)
41119128:	e0bffd17 	ldw	r2,-12(fp)
4111912c:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
41119130:	e0bffb17 	ldw	r2,-20(fp)
41119134:	10800617 	ldw	r2,24(r2)
41119138:	10800037 	ldwio	r2,0(r2)
4111913c:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
41119140:	e0bff017 	ldw	r2,-64(fp)
41119144:	1080004c 	andi	r2,r2,1
41119148:	10000226 	beq	r2,zero,41119154 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
4111914c:	00bffc04 	movi	r2,-16
41119150:	00009206 	br	4111939c <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
41119154:	00800804 	movi	r2,32
41119158:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4111915c:	0005303a 	rdctl	r2,status
41119160:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41119164:	e0fff517 	ldw	r3,-44(fp)
41119168:	00bfff84 	movi	r2,-2
4111916c:	1884703a 	and	r2,r3,r2
41119170:	1001703a 	wrctl	status,r2
  
  return context;
41119174:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
41119178:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
4111917c:	e0bffb17 	ldw	r2,-20(fp)
41119180:	10800317 	ldw	r2,12(r2)
41119184:	10800104 	addi	r2,r2,4
41119188:	e0fff117 	ldw	r3,-60(fp)
4111918c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
41119190:	e0bffb17 	ldw	r2,-20(fp)
41119194:	10800317 	ldw	r2,12(r2)
41119198:	e0fffb17 	ldw	r3,-20(fp)
4111919c:	18c00317 	ldw	r3,12(r3)
411191a0:	18c00037 	ldwio	r3,0(r3)
411191a4:	10c00035 	stwio	r3,0(r2)
411191a8:	e0bff217 	ldw	r2,-56(fp)
411191ac:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
411191b0:	e0bff317 	ldw	r2,-52(fp)
411191b4:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
411191b8:	e0bffb17 	ldw	r2,-20(fp)
411191bc:	10800b17 	ldw	r2,44(r2)
411191c0:	10002326 	beq	r2,zero,41119250 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
411191c4:	e0bffb17 	ldw	r2,-20(fp)
411191c8:	10c00d17 	ldw	r3,52(r2)
411191cc:	e0bff117 	ldw	r2,-60(fp)
411191d0:	1884b03a 	or	r2,r3,r2
411191d4:	10800514 	ori	r2,r2,20
411191d8:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
411191dc:	e0fff117 	ldw	r3,-60(fp)
411191e0:	00bff7c4 	movi	r2,-33
411191e4:	1884703a 	and	r2,r3,r2
411191e8:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
411191ec:	e0bff017 	ldw	r2,-64(fp)
411191f0:	10800214 	ori	r2,r2,8
411191f4:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
411191f8:	0005303a 	rdctl	r2,status
411191fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41119200:	e0fff717 	ldw	r3,-36(fp)
41119204:	00bfff84 	movi	r2,-2
41119208:	1884703a 	and	r2,r3,r2
4111920c:	1001703a 	wrctl	status,r2
  
  return context;
41119210:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
41119214:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
41119218:	e0bffb17 	ldw	r2,-20(fp)
4111921c:	10800317 	ldw	r2,12(r2)
41119220:	10800104 	addi	r2,r2,4
41119224:	e0fff117 	ldw	r3,-60(fp)
41119228:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
4111922c:	e0bffb17 	ldw	r2,-20(fp)
41119230:	10800617 	ldw	r2,24(r2)
41119234:	e0fff017 	ldw	r3,-64(fp)
41119238:	10c00035 	stwio	r3,0(r2)
4111923c:	e0bff217 	ldw	r2,-56(fp)
41119240:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41119244:	e0bff417 	ldw	r2,-48(fp)
41119248:	1001703a 	wrctl	status,r2
4111924c:	00002306 	br	411192dc <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
41119250:	e0bffb17 	ldw	r2,-20(fp)
41119254:	10c00d17 	ldw	r3,52(r2)
41119258:	e0bff117 	ldw	r2,-60(fp)
4111925c:	1884b03a 	or	r2,r3,r2
41119260:	10800114 	ori	r2,r2,4
41119264:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
41119268:	e0fff117 	ldw	r3,-60(fp)
4111926c:	00bff3c4 	movi	r2,-49
41119270:	1884703a 	and	r2,r3,r2
41119274:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
41119278:	e0fff017 	ldw	r3,-64(fp)
4111927c:	00bffdc4 	movi	r2,-9
41119280:	1884703a 	and	r2,r3,r2
41119284:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41119288:	0005303a 	rdctl	r2,status
4111928c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41119290:	e0fff817 	ldw	r3,-32(fp)
41119294:	00bfff84 	movi	r2,-2
41119298:	1884703a 	and	r2,r3,r2
4111929c:	1001703a 	wrctl	status,r2
  
  return context;
411192a0:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
411192a4:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
411192a8:	e0bffb17 	ldw	r2,-20(fp)
411192ac:	10800317 	ldw	r2,12(r2)
411192b0:	10800104 	addi	r2,r2,4
411192b4:	e0fff117 	ldw	r3,-60(fp)
411192b8:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
411192bc:	e0bffb17 	ldw	r2,-20(fp)
411192c0:	10800617 	ldw	r2,24(r2)
411192c4:	e0fff017 	ldw	r3,-64(fp)
411192c8:	10c00035 	stwio	r3,0(r2)
411192cc:	e0bff217 	ldw	r2,-56(fp)
411192d0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
411192d4:	e0bff617 	ldw	r2,-40(fp)
411192d8:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
411192dc:	e0bffb17 	ldw	r2,-20(fp)
411192e0:	10800617 	ldw	r2,24(r2)
411192e4:	10800104 	addi	r2,r2,4
411192e8:	e0fff917 	ldw	r3,-28(fp)
411192ec:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
411192f0:	e0bffb17 	ldw	r2,-20(fp)
411192f4:	10800617 	ldw	r2,24(r2)
411192f8:	10800204 	addi	r2,r2,8
411192fc:	e0fffa17 	ldw	r3,-24(fp)
41119300:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
41119304:	e0bffe03 	ldbu	r2,-8(fp)
41119308:	10000426 	beq	r2,zero,4111931c <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
4111930c:	e0bff017 	ldw	r2,-64(fp)
41119310:	10800414 	ori	r2,r2,16
41119314:	e0bff015 	stw	r2,-64(fp)
41119318:	00000406 	br	4111932c <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
4111931c:	e0fff017 	ldw	r3,-64(fp)
41119320:	00bffbc4 	movi	r2,-17
41119324:	1884703a 	and	r2,r3,r2
41119328:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
4111932c:	e0bfff03 	ldbu	r2,-4(fp)
41119330:	10000e26 	beq	r2,zero,4111936c <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
41119334:	e0bff017 	ldw	r2,-64(fp)
41119338:	10800094 	ori	r2,r2,2
4111933c:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
41119340:	e0bffb17 	ldw	r2,-20(fp)
41119344:	10800617 	ldw	r2,24(r2)
41119348:	10800304 	addi	r2,r2,12
4111934c:	10800037 	ldwio	r2,0(r2)
41119350:	10000a1e 	bne	r2,zero,4111937c <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
41119354:	e0bffb17 	ldw	r2,-20(fp)
41119358:	10800617 	ldw	r2,24(r2)
4111935c:	10800304 	addi	r2,r2,12
41119360:	00c03fc4 	movi	r3,255
41119364:	10c00035 	stwio	r3,0(r2)
41119368:	00000406 	br	4111937c <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
4111936c:	e0fff017 	ldw	r3,-64(fp)
41119370:	00bfff44 	movi	r2,-3
41119374:	1884703a 	and	r2,r3,r2
41119378:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
4111937c:	e0bff017 	ldw	r2,-64(fp)
41119380:	10800054 	ori	r2,r2,1
41119384:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
41119388:	e0bffb17 	ldw	r2,-20(fp)
4111938c:	10800617 	ldw	r2,24(r2)
41119390:	e0fff017 	ldw	r3,-64(fp)
41119394:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
41119398:	0005883a 	mov	r2,zero
}
4111939c:	e037883a 	mov	sp,fp
411193a0:	df000017 	ldw	fp,0(sp)
411193a4:	dec00104 	addi	sp,sp,4
411193a8:	f800283a 	ret

411193ac <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
411193ac:	defff704 	addi	sp,sp,-36
411193b0:	dfc00815 	stw	ra,32(sp)
411193b4:	df000715 	stw	fp,28(sp)
411193b8:	dc400615 	stw	r17,24(sp)
411193bc:	dc000515 	stw	r16,20(sp)
411193c0:	df000704 	addi	fp,sp,28
411193c4:	e13ffa15 	stw	r4,-24(fp)
411193c8:	e17ffb15 	stw	r5,-20(fp)
411193cc:	3007883a 	mov	r3,r6
411193d0:	3805883a 	mov	r2,r7
411193d4:	e0fffc05 	stb	r3,-16(fp)
411193d8:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
411193dc:	e13ffb17 	ldw	r4,-20(fp)
411193e0:	1118f800 	call	41118f80 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
411193e4:	10000226 	beq	r2,zero,411193f0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
411193e8:	00bffa84 	movi	r2,-22
411193ec:	00000b06 	br	4111941c <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
411193f0:	e0bffb17 	ldw	r2,-20(fp)
411193f4:	1021883a 	mov	r16,r2
411193f8:	0023883a 	mov	r17,zero
411193fc:	e0fffc03 	ldbu	r3,-16(fp)
41119400:	e0bffd03 	ldbu	r2,-12(fp)
41119404:	d8800015 	stw	r2,0(sp)
41119408:	180f883a 	mov	r7,r3
4111940c:	800b883a 	mov	r5,r16
41119410:	880d883a 	mov	r6,r17
41119414:	e13ffa17 	ldw	r4,-24(fp)
41119418:	11190ec0 	call	411190ec <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
4111941c:	e6fffe04 	addi	sp,fp,-8
41119420:	dfc00317 	ldw	ra,12(sp)
41119424:	df000217 	ldw	fp,8(sp)
41119428:	dc400117 	ldw	r17,4(sp)
4111942c:	dc000017 	ldw	r16,0(sp)
41119430:	dec00404 	addi	sp,sp,16
41119434:	f800283a 	ret

41119438 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
41119438:	defff704 	addi	sp,sp,-36
4111943c:	dfc00815 	stw	ra,32(sp)
41119440:	df000715 	stw	fp,28(sp)
41119444:	dc400615 	stw	r17,24(sp)
41119448:	dc000515 	stw	r16,20(sp)
4111944c:	df000704 	addi	fp,sp,28
41119450:	e13ffa15 	stw	r4,-24(fp)
41119454:	e17ffb15 	stw	r5,-20(fp)
41119458:	3007883a 	mov	r3,r6
4111945c:	3805883a 	mov	r2,r7
41119460:	e0fffc05 	stb	r3,-16(fp)
41119464:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
41119468:	e13ffb17 	ldw	r4,-20(fp)
4111946c:	11190180 	call	41119018 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
41119470:	10000226 	beq	r2,zero,4111947c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
41119474:	00bffa84 	movi	r2,-22
41119478:	00000b06 	br	411194a8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
4111947c:	e0bffb17 	ldw	r2,-20(fp)
41119480:	1021883a 	mov	r16,r2
41119484:	0023883a 	mov	r17,zero
41119488:	e0fffc03 	ldbu	r3,-16(fp)
4111948c:	e0bffd03 	ldbu	r2,-12(fp)
41119490:	d8800015 	stw	r2,0(sp)
41119494:	180f883a 	mov	r7,r3
41119498:	800b883a 	mov	r5,r16
4111949c:	880d883a 	mov	r6,r17
411194a0:	e13ffa17 	ldw	r4,-24(fp)
411194a4:	11190ec0 	call	411190ec <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
411194a8:	e6fffe04 	addi	sp,fp,-8
411194ac:	dfc00317 	ldw	ra,12(sp)
411194b0:	df000217 	ldw	fp,8(sp)
411194b4:	dc400117 	ldw	r17,4(sp)
411194b8:	dc000017 	ldw	r16,0(sp)
411194bc:	dec00404 	addi	sp,sp,16
411194c0:	f800283a 	ret

411194c4 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
411194c4:	defffc04 	addi	sp,sp,-16
411194c8:	dfc00315 	stw	ra,12(sp)
411194cc:	df000215 	stw	fp,8(sp)
411194d0:	df000204 	addi	fp,sp,8
411194d4:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
411194d8:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
411194dc:	d1601904 	addi	r5,gp,-32668
411194e0:	e13fff17 	ldw	r4,-4(fp)
411194e4:	1119bc00 	call	41119bc0 <alt_find_dev>
411194e8:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
411194ec:	e0bffe17 	ldw	r2,-8(fp)
411194f0:	1000041e 	bne	r2,zero,41119504 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
411194f4:	11179500 	call	41117950 <alt_get_errno>
411194f8:	1007883a 	mov	r3,r2
411194fc:	008004c4 	movi	r2,19
41119500:	18800015 	stw	r2,0(r3)
    }

    return dev;
41119504:	e0bffe17 	ldw	r2,-8(fp)
}
41119508:	e037883a 	mov	sp,fp
4111950c:	dfc00117 	ldw	ra,4(sp)
41119510:	df000017 	ldw	fp,0(sp)
41119514:	dec00204 	addi	sp,sp,8
41119518:	f800283a 	ret

4111951c <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
4111951c:	defff804 	addi	sp,sp,-32
41119520:	dfc00715 	stw	ra,28(sp)
41119524:	df000615 	stw	fp,24(sp)
41119528:	df000604 	addi	fp,sp,24
4111952c:	e13ffd15 	stw	r4,-12(fp)
41119530:	e17ffe15 	stw	r5,-8(fp)
41119534:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
41119538:	e0bffd17 	ldw	r2,-12(fp)
4111953c:	10801783 	ldbu	r2,94(r2)
41119540:	10803fcc 	andi	r2,r2,255
41119544:	10000b26 	beq	r2,zero,41119574 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
41119548:	e0bffd17 	ldw	r2,-12(fp)
4111954c:	10800617 	ldw	r2,24(r2)
41119550:	00c00104 	movi	r3,4
41119554:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
41119558:	0001883a 	nop
4111955c:	e0bffd17 	ldw	r2,-12(fp)
41119560:	10800617 	ldw	r2,24(r2)
41119564:	10800037 	ldwio	r2,0(r2)
41119568:	1080010c 	andi	r2,r2,4
4111956c:	1005d0ba 	srai	r2,r2,2
41119570:	103ffa1e 	bne	r2,zero,4111955c <__reset+0xbb0f955c>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
41119574:	e0bffd17 	ldw	r2,-12(fp)
41119578:	10800317 	ldw	r2,12(r2)
4111957c:	10800104 	addi	r2,r2,4
41119580:	00c00084 	movi	r3,2
41119584:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
41119588:	0001883a 	nop
4111958c:	e0bffd17 	ldw	r2,-12(fp)
41119590:	10800317 	ldw	r2,12(r2)
41119594:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
41119598:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
4111959c:	103ffb1e 	bne	r2,zero,4111958c <__reset+0xbb0f958c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
411195a0:	e0bffd17 	ldw	r2,-12(fp)
411195a4:	10800317 	ldw	r2,12(r2)
411195a8:	10800104 	addi	r2,r2,4
411195ac:	10800037 	ldwio	r2,0(r2)
411195b0:	1007883a 	mov	r3,r2
411195b4:	00bffbc4 	movi	r2,-17
411195b8:	1884703a 	and	r2,r3,r2
411195bc:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
411195c0:	e0bffb17 	ldw	r2,-20(fp)
411195c4:	10800814 	ori	r2,r2,32
411195c8:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
411195cc:	e0bffd17 	ldw	r2,-12(fp)
411195d0:	10800317 	ldw	r2,12(r2)
411195d4:	10800104 	addi	r2,r2,4
411195d8:	e0fffb17 	ldw	r3,-20(fp)
411195dc:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
411195e0:	e0bffd17 	ldw	r2,-12(fp)
411195e4:	10800317 	ldw	r2,12(r2)
411195e8:	e0fffd17 	ldw	r3,-12(fp)
411195ec:	18c00317 	ldw	r3,12(r3)
411195f0:	18c00037 	ldwio	r3,0(r3)
411195f4:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
411195f8:	e0bffd17 	ldw	r2,-12(fp)
411195fc:	10801783 	ldbu	r2,94(r2)
41119600:	10803fcc 	andi	r2,r2,255
41119604:	10000826 	beq	r2,zero,41119628 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
41119608:	e0bffd17 	ldw	r2,-12(fp)
4111960c:	10800617 	ldw	r2,24(r2)
41119610:	10800404 	addi	r2,r2,16
41119614:	e0fffd17 	ldw	r3,-12(fp)
41119618:	18c00617 	ldw	r3,24(r3)
4111961c:	18c00404 	addi	r3,r3,16
41119620:	18c00037 	ldwio	r3,0(r3)
41119624:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
41119628:	d1601904 	addi	r5,gp,-32668
4111962c:	e13ffd17 	ldw	r4,-12(fp)
41119630:	1119a5c0 	call	41119a5c <alt_dev_llist_insert>
41119634:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
41119638:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
4111963c:	e0bffc17 	ldw	r2,-16(fp)
41119640:	1000081e 	bne	r2,zero,41119664 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
41119644:	d8000015 	stw	zero,0(sp)
41119648:	e1fffd17 	ldw	r7,-12(fp)
4111964c:	01904474 	movhi	r6,16657
41119650:	319ed304 	addi	r6,r6,31564
41119654:	e17fff17 	ldw	r5,-4(fp)
41119658:	e13ffe17 	ldw	r4,-8(fp)
4111965c:	1119c500 	call	41119c50 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
41119660:	00000406 	br	41119674 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
41119664:	011044b4 	movhi	r4,16658
41119668:	21304504 	addi	r4,r4,-16108
4111966c:	111a2840 	call	4111a284 <alt_printf>
    }
    
    return;
41119670:	0001883a 	nop

}
41119674:	e037883a 	mov	sp,fp
41119678:	dfc00117 	ldw	ra,4(sp)
4111967c:	df000017 	ldw	fp,0(sp)
41119680:	dec00204 	addi	sp,sp,8
41119684:	f800283a 	ret

41119688 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
41119688:	defffb04 	addi	sp,sp,-20
4111968c:	df000415 	stw	fp,16(sp)
41119690:	df000404 	addi	fp,sp,16
41119694:	e13ffc15 	stw	r4,-16(fp)
41119698:	e17ffd15 	stw	r5,-12(fp)
4111969c:	e1bffe15 	stw	r6,-8(fp)
411196a0:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
411196a4:	e0bffc17 	ldw	r2,-16(fp)
411196a8:	e0fffd17 	ldw	r3,-12(fp)
411196ac:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
411196b0:	e0bffc17 	ldw	r2,-16(fp)
411196b4:	e0ffff17 	ldw	r3,-4(fp)
411196b8:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
411196bc:	e0bffc17 	ldw	r2,-16(fp)
411196c0:	e0fffe17 	ldw	r3,-8(fp)
411196c4:	10c00d15 	stw	r3,52(r2)

    return ;
411196c8:	0001883a 	nop
}
411196cc:	e037883a 	mov	sp,fp
411196d0:	df000017 	ldw	fp,0(sp)
411196d4:	dec00104 	addi	sp,sp,4
411196d8:	f800283a 	ret

411196dc <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
411196dc:	defffc04 	addi	sp,sp,-16
411196e0:	dfc00315 	stw	ra,12(sp)
411196e4:	df000215 	stw	fp,8(sp)
411196e8:	df000204 	addi	fp,sp,8
411196ec:	e13ffe15 	stw	r4,-8(fp)
411196f0:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
411196f4:	000d883a 	mov	r6,zero
411196f8:	e17fff17 	ldw	r5,-4(fp)
411196fc:	e13ffe17 	ldw	r4,-8(fp)
41119700:	1117eb00 	call	41117eb0 <alt_msgdma_descriptor_async_transfer>

}
41119704:	e037883a 	mov	sp,fp
41119708:	dfc00117 	ldw	ra,4(sp)
4111970c:	df000017 	ldw	fp,0(sp)
41119710:	dec00204 	addi	sp,sp,8
41119714:	f800283a 	ret

41119718 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
41119718:	defffc04 	addi	sp,sp,-16
4111971c:	dfc00315 	stw	ra,12(sp)
41119720:	df000215 	stw	fp,8(sp)
41119724:	df000204 	addi	fp,sp,8
41119728:	e13ffe15 	stw	r4,-8(fp)
4111972c:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
41119730:	e1bfff17 	ldw	r6,-4(fp)
41119734:	000b883a 	mov	r5,zero
41119738:	e13ffe17 	ldw	r4,-8(fp)
4111973c:	1117eb00 	call	41117eb0 <alt_msgdma_descriptor_async_transfer>
}
41119740:	e037883a 	mov	sp,fp
41119744:	dfc00117 	ldw	ra,4(sp)
41119748:	df000017 	ldw	fp,0(sp)
4111974c:	dec00204 	addi	sp,sp,8
41119750:	f800283a 	ret

41119754 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
41119754:	defffc04 	addi	sp,sp,-16
41119758:	dfc00315 	stw	ra,12(sp)
4111975c:	df000215 	stw	fp,8(sp)
41119760:	df000204 	addi	fp,sp,8
41119764:	e13ffe15 	stw	r4,-8(fp)
41119768:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
4111976c:	000d883a 	mov	r6,zero
41119770:	e17fff17 	ldw	r5,-4(fp)
41119774:	e13ffe17 	ldw	r4,-8(fp)
41119778:	11181800 	call	41118180 <alt_msgdma_descriptor_sync_transfer>
}
4111977c:	e037883a 	mov	sp,fp
41119780:	dfc00117 	ldw	ra,4(sp)
41119784:	df000017 	ldw	fp,0(sp)
41119788:	dec00204 	addi	sp,sp,8
4111978c:	f800283a 	ret

41119790 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
41119790:	defffc04 	addi	sp,sp,-16
41119794:	dfc00315 	stw	ra,12(sp)
41119798:	df000215 	stw	fp,8(sp)
4111979c:	df000204 	addi	fp,sp,8
411197a0:	e13ffe15 	stw	r4,-8(fp)
411197a4:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
411197a8:	e1bfff17 	ldw	r6,-4(fp)
411197ac:	000b883a 	mov	r5,zero
411197b0:	e13ffe17 	ldw	r4,-8(fp)
411197b4:	11181800 	call	41118180 <alt_msgdma_descriptor_sync_transfer>
}
411197b8:	e037883a 	mov	sp,fp
411197bc:	dfc00117 	ldw	ra,4(sp)
411197c0:	df000017 	ldw	fp,0(sp)
411197c4:	dec00204 	addi	sp,sp,8
411197c8:	f800283a 	ret

411197cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
411197cc:	defff504 	addi	sp,sp,-44
411197d0:	df000a15 	stw	fp,40(sp)
411197d4:	df000a04 	addi	fp,sp,40
411197d8:	e13ffc15 	stw	r4,-16(fp)
411197dc:	e17ffd15 	stw	r5,-12(fp)
411197e0:	e1bffe15 	stw	r6,-8(fp)
411197e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
411197e8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
411197ec:	d0a03d17 	ldw	r2,-32524(gp)
  
  if (alt_ticks_per_second ())
411197f0:	10003c26 	beq	r2,zero,411198e4 <alt_alarm_start+0x118>
  {
    if (alarm)
411197f4:	e0bffc17 	ldw	r2,-16(fp)
411197f8:	10003826 	beq	r2,zero,411198dc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
411197fc:	e0bffc17 	ldw	r2,-16(fp)
41119800:	e0fffe17 	ldw	r3,-8(fp)
41119804:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
41119808:	e0bffc17 	ldw	r2,-16(fp)
4111980c:	e0ffff17 	ldw	r3,-4(fp)
41119810:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41119814:	0005303a 	rdctl	r2,status
41119818:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4111981c:	e0fff917 	ldw	r3,-28(fp)
41119820:	00bfff84 	movi	r2,-2
41119824:	1884703a 	and	r2,r3,r2
41119828:	1001703a 	wrctl	status,r2
  
  return context;
4111982c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
41119830:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
41119834:	d0a03e17 	ldw	r2,-32520(gp)
      
      current_nticks = alt_nticks();
41119838:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
4111983c:	e0fffd17 	ldw	r3,-12(fp)
41119840:	e0bff617 	ldw	r2,-40(fp)
41119844:	1885883a 	add	r2,r3,r2
41119848:	10c00044 	addi	r3,r2,1
4111984c:	e0bffc17 	ldw	r2,-16(fp)
41119850:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
41119854:	e0bffc17 	ldw	r2,-16(fp)
41119858:	10c00217 	ldw	r3,8(r2)
4111985c:	e0bff617 	ldw	r2,-40(fp)
41119860:	1880042e 	bgeu	r3,r2,41119874 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
41119864:	e0bffc17 	ldw	r2,-16(fp)
41119868:	00c00044 	movi	r3,1
4111986c:	10c00405 	stb	r3,16(r2)
41119870:	00000206 	br	4111987c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
41119874:	e0bffc17 	ldw	r2,-16(fp)
41119878:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
4111987c:	e0bffc17 	ldw	r2,-16(fp)
41119880:	d0e01704 	addi	r3,gp,-32676
41119884:	e0fffa15 	stw	r3,-24(fp)
41119888:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
4111988c:	e0bffb17 	ldw	r2,-20(fp)
41119890:	e0fffa17 	ldw	r3,-24(fp)
41119894:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
41119898:	e0bffa17 	ldw	r2,-24(fp)
4111989c:	10c00017 	ldw	r3,0(r2)
411198a0:	e0bffb17 	ldw	r2,-20(fp)
411198a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
411198a8:	e0bffa17 	ldw	r2,-24(fp)
411198ac:	10800017 	ldw	r2,0(r2)
411198b0:	e0fffb17 	ldw	r3,-20(fp)
411198b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
411198b8:	e0bffa17 	ldw	r2,-24(fp)
411198bc:	e0fffb17 	ldw	r3,-20(fp)
411198c0:	10c00015 	stw	r3,0(r2)
411198c4:	e0bff817 	ldw	r2,-32(fp)
411198c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
411198cc:	e0bff717 	ldw	r2,-36(fp)
411198d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
411198d4:	0005883a 	mov	r2,zero
411198d8:	00000306 	br	411198e8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
411198dc:	00bffa84 	movi	r2,-22
411198e0:	00000106 	br	411198e8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
411198e4:	00bfde84 	movi	r2,-134
  }
}
411198e8:	e037883a 	mov	sp,fp
411198ec:	df000017 	ldw	fp,0(sp)
411198f0:	dec00104 	addi	sp,sp,4
411198f4:	f800283a 	ret

411198f8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
411198f8:	defffb04 	addi	sp,sp,-20
411198fc:	df000415 	stw	fp,16(sp)
41119900:	df000404 	addi	fp,sp,16
41119904:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
41119908:	008000c4 	movi	r2,3
4111990c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
41119910:	e0fffd17 	ldw	r3,-12(fp)
41119914:	008003f4 	movhi	r2,15
41119918:	10909004 	addi	r2,r2,16960
4111991c:	1887383a 	mul	r3,r3,r2
41119920:	00817db4 	movhi	r2,1526
41119924:	10b84004 	addi	r2,r2,-7936
41119928:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
4111992c:	00a00034 	movhi	r2,32768
41119930:	10bfffc4 	addi	r2,r2,-1
41119934:	10c5203a 	divu	r2,r2,r3
41119938:	e0ffff17 	ldw	r3,-4(fp)
4111993c:	1885203a 	divu	r2,r3,r2
41119940:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
41119944:	e0bffe17 	ldw	r2,-8(fp)
41119948:	10002526 	beq	r2,zero,411199e0 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
4111994c:	e03ffc15 	stw	zero,-16(fp)
41119950:	00001406 	br	411199a4 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
41119954:	00a00034 	movhi	r2,32768
41119958:	10bfffc4 	addi	r2,r2,-1
4111995c:	10bfffc4 	addi	r2,r2,-1
41119960:	103ffe1e 	bne	r2,zero,4111995c <__reset+0xbb0f995c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
41119964:	e0fffd17 	ldw	r3,-12(fp)
41119968:	008003f4 	movhi	r2,15
4111996c:	10909004 	addi	r2,r2,16960
41119970:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
41119974:	00817db4 	movhi	r2,1526
41119978:	10b84004 	addi	r2,r2,-7936
4111997c:	10c7203a 	divu	r3,r2,r3
41119980:	00a00034 	movhi	r2,32768
41119984:	10bfffc4 	addi	r2,r2,-1
41119988:	10c5203a 	divu	r2,r2,r3
4111998c:	e0ffff17 	ldw	r3,-4(fp)
41119990:	1885c83a 	sub	r2,r3,r2
41119994:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
41119998:	e0bffc17 	ldw	r2,-16(fp)
4111999c:	10800044 	addi	r2,r2,1
411199a0:	e0bffc15 	stw	r2,-16(fp)
411199a4:	e0fffc17 	ldw	r3,-16(fp)
411199a8:	e0bffe17 	ldw	r2,-8(fp)
411199ac:	18bfe916 	blt	r3,r2,41119954 <__reset+0xbb0f9954>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
411199b0:	e0fffd17 	ldw	r3,-12(fp)
411199b4:	008003f4 	movhi	r2,15
411199b8:	10909004 	addi	r2,r2,16960
411199bc:	1887383a 	mul	r3,r3,r2
411199c0:	00817db4 	movhi	r2,1526
411199c4:	10b84004 	addi	r2,r2,-7936
411199c8:	10c7203a 	divu	r3,r2,r3
411199cc:	e0bfff17 	ldw	r2,-4(fp)
411199d0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
411199d4:	10bfffc4 	addi	r2,r2,-1
411199d8:	103ffe1e 	bne	r2,zero,411199d4 <__reset+0xbb0f99d4>
411199dc:	00000b06 	br	41119a0c <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
411199e0:	e0fffd17 	ldw	r3,-12(fp)
411199e4:	008003f4 	movhi	r2,15
411199e8:	10909004 	addi	r2,r2,16960
411199ec:	1887383a 	mul	r3,r3,r2
411199f0:	00817db4 	movhi	r2,1526
411199f4:	10b84004 	addi	r2,r2,-7936
411199f8:	10c7203a 	divu	r3,r2,r3
411199fc:	e0bfff17 	ldw	r2,-4(fp)
41119a00:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
41119a04:	10bfffc4 	addi	r2,r2,-1
41119a08:	00bffe16 	blt	zero,r2,41119a04 <__reset+0xbb0f9a04>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
41119a0c:	0005883a 	mov	r2,zero
}
41119a10:	e037883a 	mov	sp,fp
41119a14:	df000017 	ldw	fp,0(sp)
41119a18:	dec00104 	addi	sp,sp,4
41119a1c:	f800283a 	ret

41119a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41119a20:	defffe04 	addi	sp,sp,-8
41119a24:	dfc00115 	stw	ra,4(sp)
41119a28:	df000015 	stw	fp,0(sp)
41119a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
41119a30:	d0a01417 	ldw	r2,-32688(gp)
41119a34:	10000326 	beq	r2,zero,41119a44 <alt_get_errno+0x24>
41119a38:	d0a01417 	ldw	r2,-32688(gp)
41119a3c:	103ee83a 	callr	r2
41119a40:	00000106 	br	41119a48 <alt_get_errno+0x28>
41119a44:	d0a03804 	addi	r2,gp,-32544
}
41119a48:	e037883a 	mov	sp,fp
41119a4c:	dfc00117 	ldw	ra,4(sp)
41119a50:	df000017 	ldw	fp,0(sp)
41119a54:	dec00204 	addi	sp,sp,8
41119a58:	f800283a 	ret

41119a5c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
41119a5c:	defffa04 	addi	sp,sp,-24
41119a60:	dfc00515 	stw	ra,20(sp)
41119a64:	df000415 	stw	fp,16(sp)
41119a68:	df000404 	addi	fp,sp,16
41119a6c:	e13ffe15 	stw	r4,-8(fp)
41119a70:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
41119a74:	e0bffe17 	ldw	r2,-8(fp)
41119a78:	10000326 	beq	r2,zero,41119a88 <alt_dev_llist_insert+0x2c>
41119a7c:	e0bffe17 	ldw	r2,-8(fp)
41119a80:	10800217 	ldw	r2,8(r2)
41119a84:	1000061e 	bne	r2,zero,41119aa0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
41119a88:	1119a200 	call	41119a20 <alt_get_errno>
41119a8c:	1007883a 	mov	r3,r2
41119a90:	00800584 	movi	r2,22
41119a94:	18800015 	stw	r2,0(r3)
    return -EINVAL;
41119a98:	00bffa84 	movi	r2,-22
41119a9c:	00001306 	br	41119aec <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
41119aa0:	e0bffe17 	ldw	r2,-8(fp)
41119aa4:	e0ffff17 	ldw	r3,-4(fp)
41119aa8:	e0fffc15 	stw	r3,-16(fp)
41119aac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
41119ab0:	e0bffd17 	ldw	r2,-12(fp)
41119ab4:	e0fffc17 	ldw	r3,-16(fp)
41119ab8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
41119abc:	e0bffc17 	ldw	r2,-16(fp)
41119ac0:	10c00017 	ldw	r3,0(r2)
41119ac4:	e0bffd17 	ldw	r2,-12(fp)
41119ac8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
41119acc:	e0bffc17 	ldw	r2,-16(fp)
41119ad0:	10800017 	ldw	r2,0(r2)
41119ad4:	e0fffd17 	ldw	r3,-12(fp)
41119ad8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
41119adc:	e0bffc17 	ldw	r2,-16(fp)
41119ae0:	e0fffd17 	ldw	r3,-12(fp)
41119ae4:	10c00015 	stw	r3,0(r2)

  return 0;  
41119ae8:	0005883a 	mov	r2,zero
}
41119aec:	e037883a 	mov	sp,fp
41119af0:	dfc00117 	ldw	ra,4(sp)
41119af4:	df000017 	ldw	fp,0(sp)
41119af8:	dec00204 	addi	sp,sp,8
41119afc:	f800283a 	ret

41119b00 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
41119b00:	defffd04 	addi	sp,sp,-12
41119b04:	dfc00215 	stw	ra,8(sp)
41119b08:	df000115 	stw	fp,4(sp)
41119b0c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
41119b10:	009044b4 	movhi	r2,16658
41119b14:	10aaba04 	addi	r2,r2,-21784
41119b18:	e0bfff15 	stw	r2,-4(fp)
41119b1c:	00000606 	br	41119b38 <_do_ctors+0x38>
        (*ctor) (); 
41119b20:	e0bfff17 	ldw	r2,-4(fp)
41119b24:	10800017 	ldw	r2,0(r2)
41119b28:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
41119b2c:	e0bfff17 	ldw	r2,-4(fp)
41119b30:	10bfff04 	addi	r2,r2,-4
41119b34:	e0bfff15 	stw	r2,-4(fp)
41119b38:	e0ffff17 	ldw	r3,-4(fp)
41119b3c:	009044b4 	movhi	r2,16658
41119b40:	10aabb04 	addi	r2,r2,-21780
41119b44:	18bff62e 	bgeu	r3,r2,41119b20 <__reset+0xbb0f9b20>
        (*ctor) (); 
}
41119b48:	0001883a 	nop
41119b4c:	e037883a 	mov	sp,fp
41119b50:	dfc00117 	ldw	ra,4(sp)
41119b54:	df000017 	ldw	fp,0(sp)
41119b58:	dec00204 	addi	sp,sp,8
41119b5c:	f800283a 	ret

41119b60 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
41119b60:	defffd04 	addi	sp,sp,-12
41119b64:	dfc00215 	stw	ra,8(sp)
41119b68:	df000115 	stw	fp,4(sp)
41119b6c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
41119b70:	009044b4 	movhi	r2,16658
41119b74:	10aaba04 	addi	r2,r2,-21784
41119b78:	e0bfff15 	stw	r2,-4(fp)
41119b7c:	00000606 	br	41119b98 <_do_dtors+0x38>
        (*dtor) (); 
41119b80:	e0bfff17 	ldw	r2,-4(fp)
41119b84:	10800017 	ldw	r2,0(r2)
41119b88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
41119b8c:	e0bfff17 	ldw	r2,-4(fp)
41119b90:	10bfff04 	addi	r2,r2,-4
41119b94:	e0bfff15 	stw	r2,-4(fp)
41119b98:	e0ffff17 	ldw	r3,-4(fp)
41119b9c:	009044b4 	movhi	r2,16658
41119ba0:	10aabb04 	addi	r2,r2,-21780
41119ba4:	18bff62e 	bgeu	r3,r2,41119b80 <__reset+0xbb0f9b80>
        (*dtor) (); 
}
41119ba8:	0001883a 	nop
41119bac:	e037883a 	mov	sp,fp
41119bb0:	dfc00117 	ldw	ra,4(sp)
41119bb4:	df000017 	ldw	fp,0(sp)
41119bb8:	dec00204 	addi	sp,sp,8
41119bbc:	f800283a 	ret

41119bc0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
41119bc0:	defffa04 	addi	sp,sp,-24
41119bc4:	dfc00515 	stw	ra,20(sp)
41119bc8:	df000415 	stw	fp,16(sp)
41119bcc:	df000404 	addi	fp,sp,16
41119bd0:	e13ffe15 	stw	r4,-8(fp)
41119bd4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
41119bd8:	e0bfff17 	ldw	r2,-4(fp)
41119bdc:	10800017 	ldw	r2,0(r2)
41119be0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
41119be4:	e13ffe17 	ldw	r4,-8(fp)
41119be8:	11097780 	call	41109778 <strlen>
41119bec:	10800044 	addi	r2,r2,1
41119bf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
41119bf4:	00000d06 	br	41119c2c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
41119bf8:	e0bffc17 	ldw	r2,-16(fp)
41119bfc:	10800217 	ldw	r2,8(r2)
41119c00:	e0fffd17 	ldw	r3,-12(fp)
41119c04:	180d883a 	mov	r6,r3
41119c08:	e17ffe17 	ldw	r5,-8(fp)
41119c0c:	1009883a 	mov	r4,r2
41119c10:	111a7a40 	call	4111a7a4 <memcmp>
41119c14:	1000021e 	bne	r2,zero,41119c20 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
41119c18:	e0bffc17 	ldw	r2,-16(fp)
41119c1c:	00000706 	br	41119c3c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
41119c20:	e0bffc17 	ldw	r2,-16(fp)
41119c24:	10800017 	ldw	r2,0(r2)
41119c28:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
41119c2c:	e0fffc17 	ldw	r3,-16(fp)
41119c30:	e0bfff17 	ldw	r2,-4(fp)
41119c34:	18bff01e 	bne	r3,r2,41119bf8 <__reset+0xbb0f9bf8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
41119c38:	0005883a 	mov	r2,zero
}
41119c3c:	e037883a 	mov	sp,fp
41119c40:	dfc00117 	ldw	ra,4(sp)
41119c44:	df000017 	ldw	fp,0(sp)
41119c48:	dec00204 	addi	sp,sp,8
41119c4c:	f800283a 	ret

41119c50 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
41119c50:	defff904 	addi	sp,sp,-28
41119c54:	dfc00615 	stw	ra,24(sp)
41119c58:	df000515 	stw	fp,20(sp)
41119c5c:	df000504 	addi	fp,sp,20
41119c60:	e13ffc15 	stw	r4,-16(fp)
41119c64:	e17ffd15 	stw	r5,-12(fp)
41119c68:	e1bffe15 	stw	r6,-8(fp)
41119c6c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
41119c70:	e0800217 	ldw	r2,8(fp)
41119c74:	d8800015 	stw	r2,0(sp)
41119c78:	e1ffff17 	ldw	r7,-4(fp)
41119c7c:	e1bffe17 	ldw	r6,-8(fp)
41119c80:	e17ffd17 	ldw	r5,-12(fp)
41119c84:	e13ffc17 	ldw	r4,-16(fp)
41119c88:	1119e000 	call	41119e00 <alt_iic_isr_register>
}  
41119c8c:	e037883a 	mov	sp,fp
41119c90:	dfc00117 	ldw	ra,4(sp)
41119c94:	df000017 	ldw	fp,0(sp)
41119c98:	dec00204 	addi	sp,sp,8
41119c9c:	f800283a 	ret

41119ca0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
41119ca0:	defff904 	addi	sp,sp,-28
41119ca4:	df000615 	stw	fp,24(sp)
41119ca8:	df000604 	addi	fp,sp,24
41119cac:	e13ffe15 	stw	r4,-8(fp)
41119cb0:	e17fff15 	stw	r5,-4(fp)
41119cb4:	e0bfff17 	ldw	r2,-4(fp)
41119cb8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41119cbc:	0005303a 	rdctl	r2,status
41119cc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41119cc4:	e0fffb17 	ldw	r3,-20(fp)
41119cc8:	00bfff84 	movi	r2,-2
41119ccc:	1884703a 	and	r2,r3,r2
41119cd0:	1001703a 	wrctl	status,r2
  
  return context;
41119cd4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
41119cd8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
41119cdc:	00c00044 	movi	r3,1
41119ce0:	e0bffa17 	ldw	r2,-24(fp)
41119ce4:	1884983a 	sll	r2,r3,r2
41119ce8:	1007883a 	mov	r3,r2
41119cec:	d0a03917 	ldw	r2,-32540(gp)
41119cf0:	1884b03a 	or	r2,r3,r2
41119cf4:	d0a03915 	stw	r2,-32540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
41119cf8:	d0a03917 	ldw	r2,-32540(gp)
41119cfc:	100170fa 	wrctl	ienable,r2
41119d00:	e0bffc17 	ldw	r2,-16(fp)
41119d04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41119d08:	e0bffd17 	ldw	r2,-12(fp)
41119d0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
41119d10:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
41119d14:	0001883a 	nop
}
41119d18:	e037883a 	mov	sp,fp
41119d1c:	df000017 	ldw	fp,0(sp)
41119d20:	dec00104 	addi	sp,sp,4
41119d24:	f800283a 	ret

41119d28 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
41119d28:	defff904 	addi	sp,sp,-28
41119d2c:	df000615 	stw	fp,24(sp)
41119d30:	df000604 	addi	fp,sp,24
41119d34:	e13ffe15 	stw	r4,-8(fp)
41119d38:	e17fff15 	stw	r5,-4(fp)
41119d3c:	e0bfff17 	ldw	r2,-4(fp)
41119d40:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41119d44:	0005303a 	rdctl	r2,status
41119d48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41119d4c:	e0fffb17 	ldw	r3,-20(fp)
41119d50:	00bfff84 	movi	r2,-2
41119d54:	1884703a 	and	r2,r3,r2
41119d58:	1001703a 	wrctl	status,r2
  
  return context;
41119d5c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
41119d60:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
41119d64:	00c00044 	movi	r3,1
41119d68:	e0bffa17 	ldw	r2,-24(fp)
41119d6c:	1884983a 	sll	r2,r3,r2
41119d70:	0084303a 	nor	r2,zero,r2
41119d74:	1007883a 	mov	r3,r2
41119d78:	d0a03917 	ldw	r2,-32540(gp)
41119d7c:	1884703a 	and	r2,r3,r2
41119d80:	d0a03915 	stw	r2,-32540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
41119d84:	d0a03917 	ldw	r2,-32540(gp)
41119d88:	100170fa 	wrctl	ienable,r2
41119d8c:	e0bffc17 	ldw	r2,-16(fp)
41119d90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41119d94:	e0bffd17 	ldw	r2,-12(fp)
41119d98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
41119d9c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
41119da0:	0001883a 	nop
}
41119da4:	e037883a 	mov	sp,fp
41119da8:	df000017 	ldw	fp,0(sp)
41119dac:	dec00104 	addi	sp,sp,4
41119db0:	f800283a 	ret

41119db4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
41119db4:	defffc04 	addi	sp,sp,-16
41119db8:	df000315 	stw	fp,12(sp)
41119dbc:	df000304 	addi	fp,sp,12
41119dc0:	e13ffe15 	stw	r4,-8(fp)
41119dc4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
41119dc8:	000530fa 	rdctl	r2,ienable
41119dcc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
41119dd0:	00c00044 	movi	r3,1
41119dd4:	e0bfff17 	ldw	r2,-4(fp)
41119dd8:	1884983a 	sll	r2,r3,r2
41119ddc:	1007883a 	mov	r3,r2
41119de0:	e0bffd17 	ldw	r2,-12(fp)
41119de4:	1884703a 	and	r2,r3,r2
41119de8:	1004c03a 	cmpne	r2,r2,zero
41119dec:	10803fcc 	andi	r2,r2,255
}
41119df0:	e037883a 	mov	sp,fp
41119df4:	df000017 	ldw	fp,0(sp)
41119df8:	dec00104 	addi	sp,sp,4
41119dfc:	f800283a 	ret

41119e00 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
41119e00:	defff504 	addi	sp,sp,-44
41119e04:	dfc00a15 	stw	ra,40(sp)
41119e08:	df000915 	stw	fp,36(sp)
41119e0c:	df000904 	addi	fp,sp,36
41119e10:	e13ffc15 	stw	r4,-16(fp)
41119e14:	e17ffd15 	stw	r5,-12(fp)
41119e18:	e1bffe15 	stw	r6,-8(fp)
41119e1c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
41119e20:	00bffa84 	movi	r2,-22
41119e24:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
41119e28:	e0bffd17 	ldw	r2,-12(fp)
41119e2c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
41119e30:	e0bff817 	ldw	r2,-32(fp)
41119e34:	10800808 	cmpgei	r2,r2,32
41119e38:	1000271e 	bne	r2,zero,41119ed8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41119e3c:	0005303a 	rdctl	r2,status
41119e40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41119e44:	e0fffb17 	ldw	r3,-20(fp)
41119e48:	00bfff84 	movi	r2,-2
41119e4c:	1884703a 	and	r2,r3,r2
41119e50:	1001703a 	wrctl	status,r2
  
  return context;
41119e54:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
41119e58:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
41119e5c:	009044b4 	movhi	r2,16658
41119e60:	10b8ae04 	addi	r2,r2,-7496
41119e64:	e0fff817 	ldw	r3,-32(fp)
41119e68:	180690fa 	slli	r3,r3,3
41119e6c:	10c5883a 	add	r2,r2,r3
41119e70:	e0fffe17 	ldw	r3,-8(fp)
41119e74:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
41119e78:	009044b4 	movhi	r2,16658
41119e7c:	10b8ae04 	addi	r2,r2,-7496
41119e80:	e0fff817 	ldw	r3,-32(fp)
41119e84:	180690fa 	slli	r3,r3,3
41119e88:	10c5883a 	add	r2,r2,r3
41119e8c:	10800104 	addi	r2,r2,4
41119e90:	e0ffff17 	ldw	r3,-4(fp)
41119e94:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
41119e98:	e0bffe17 	ldw	r2,-8(fp)
41119e9c:	10000526 	beq	r2,zero,41119eb4 <alt_iic_isr_register+0xb4>
41119ea0:	e0bff817 	ldw	r2,-32(fp)
41119ea4:	100b883a 	mov	r5,r2
41119ea8:	e13ffc17 	ldw	r4,-16(fp)
41119eac:	1119ca00 	call	41119ca0 <alt_ic_irq_enable>
41119eb0:	00000406 	br	41119ec4 <alt_iic_isr_register+0xc4>
41119eb4:	e0bff817 	ldw	r2,-32(fp)
41119eb8:	100b883a 	mov	r5,r2
41119ebc:	e13ffc17 	ldw	r4,-16(fp)
41119ec0:	1119d280 	call	41119d28 <alt_ic_irq_disable>
41119ec4:	e0bff715 	stw	r2,-36(fp)
41119ec8:	e0bffa17 	ldw	r2,-24(fp)
41119ecc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41119ed0:	e0bff917 	ldw	r2,-28(fp)
41119ed4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
41119ed8:	e0bff717 	ldw	r2,-36(fp)
}
41119edc:	e037883a 	mov	sp,fp
41119ee0:	dfc00117 	ldw	ra,4(sp)
41119ee4:	df000017 	ldw	fp,0(sp)
41119ee8:	dec00204 	addi	sp,sp,8
41119eec:	f800283a 	ret

41119ef0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
41119ef0:	defff904 	addi	sp,sp,-28
41119ef4:	dfc00615 	stw	ra,24(sp)
41119ef8:	df000515 	stw	fp,20(sp)
41119efc:	df000504 	addi	fp,sp,20
41119f00:	e13ffc15 	stw	r4,-16(fp)
41119f04:	e17ffd15 	stw	r5,-12(fp)
41119f08:	e1bffe15 	stw	r6,-8(fp)
41119f0c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
41119f10:	e1bfff17 	ldw	r6,-4(fp)
41119f14:	e17ffe17 	ldw	r5,-8(fp)
41119f18:	e13ffd17 	ldw	r4,-12(fp)
41119f1c:	111a1300 	call	4111a130 <open>
41119f20:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
41119f24:	e0bffb17 	ldw	r2,-20(fp)
41119f28:	10001c16 	blt	r2,zero,41119f9c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
41119f2c:	009044b4 	movhi	r2,16658
41119f30:	10b28004 	addi	r2,r2,-13824
41119f34:	e0fffb17 	ldw	r3,-20(fp)
41119f38:	18c00324 	muli	r3,r3,12
41119f3c:	10c5883a 	add	r2,r2,r3
41119f40:	10c00017 	ldw	r3,0(r2)
41119f44:	e0bffc17 	ldw	r2,-16(fp)
41119f48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
41119f4c:	009044b4 	movhi	r2,16658
41119f50:	10b28004 	addi	r2,r2,-13824
41119f54:	e0fffb17 	ldw	r3,-20(fp)
41119f58:	18c00324 	muli	r3,r3,12
41119f5c:	10c5883a 	add	r2,r2,r3
41119f60:	10800104 	addi	r2,r2,4
41119f64:	10c00017 	ldw	r3,0(r2)
41119f68:	e0bffc17 	ldw	r2,-16(fp)
41119f6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
41119f70:	009044b4 	movhi	r2,16658
41119f74:	10b28004 	addi	r2,r2,-13824
41119f78:	e0fffb17 	ldw	r3,-20(fp)
41119f7c:	18c00324 	muli	r3,r3,12
41119f80:	10c5883a 	add	r2,r2,r3
41119f84:	10800204 	addi	r2,r2,8
41119f88:	10c00017 	ldw	r3,0(r2)
41119f8c:	e0bffc17 	ldw	r2,-16(fp)
41119f90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
41119f94:	e13ffb17 	ldw	r4,-20(fp)
41119f98:	1115fac0 	call	41115fac <alt_release_fd>
  }
} 
41119f9c:	0001883a 	nop
41119fa0:	e037883a 	mov	sp,fp
41119fa4:	dfc00117 	ldw	ra,4(sp)
41119fa8:	df000017 	ldw	fp,0(sp)
41119fac:	dec00204 	addi	sp,sp,8
41119fb0:	f800283a 	ret

41119fb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
41119fb4:	defffb04 	addi	sp,sp,-20
41119fb8:	dfc00415 	stw	ra,16(sp)
41119fbc:	df000315 	stw	fp,12(sp)
41119fc0:	df000304 	addi	fp,sp,12
41119fc4:	e13ffd15 	stw	r4,-12(fp)
41119fc8:	e17ffe15 	stw	r5,-8(fp)
41119fcc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
41119fd0:	01c07fc4 	movi	r7,511
41119fd4:	01800044 	movi	r6,1
41119fd8:	e17ffd17 	ldw	r5,-12(fp)
41119fdc:	011044b4 	movhi	r4,16658
41119fe0:	21328304 	addi	r4,r4,-13812
41119fe4:	1119ef00 	call	41119ef0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
41119fe8:	01c07fc4 	movi	r7,511
41119fec:	000d883a 	mov	r6,zero
41119ff0:	e17ffe17 	ldw	r5,-8(fp)
41119ff4:	011044b4 	movhi	r4,16658
41119ff8:	21328004 	addi	r4,r4,-13824
41119ffc:	1119ef00 	call	41119ef0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
4111a000:	01c07fc4 	movi	r7,511
4111a004:	01800044 	movi	r6,1
4111a008:	e17fff17 	ldw	r5,-4(fp)
4111a00c:	011044b4 	movhi	r4,16658
4111a010:	21328604 	addi	r4,r4,-13800
4111a014:	1119ef00 	call	41119ef0 <alt_open_fd>
}  
4111a018:	0001883a 	nop
4111a01c:	e037883a 	mov	sp,fp
4111a020:	dfc00117 	ldw	ra,4(sp)
4111a024:	df000017 	ldw	fp,0(sp)
4111a028:	dec00204 	addi	sp,sp,8
4111a02c:	f800283a 	ret

4111a030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4111a030:	defffe04 	addi	sp,sp,-8
4111a034:	dfc00115 	stw	ra,4(sp)
4111a038:	df000015 	stw	fp,0(sp)
4111a03c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4111a040:	d0a01417 	ldw	r2,-32688(gp)
4111a044:	10000326 	beq	r2,zero,4111a054 <alt_get_errno+0x24>
4111a048:	d0a01417 	ldw	r2,-32688(gp)
4111a04c:	103ee83a 	callr	r2
4111a050:	00000106 	br	4111a058 <alt_get_errno+0x28>
4111a054:	d0a03804 	addi	r2,gp,-32544
}
4111a058:	e037883a 	mov	sp,fp
4111a05c:	dfc00117 	ldw	ra,4(sp)
4111a060:	df000017 	ldw	fp,0(sp)
4111a064:	dec00204 	addi	sp,sp,8
4111a068:	f800283a 	ret

4111a06c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
4111a06c:	defffd04 	addi	sp,sp,-12
4111a070:	df000215 	stw	fp,8(sp)
4111a074:	df000204 	addi	fp,sp,8
4111a078:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
4111a07c:	e0bfff17 	ldw	r2,-4(fp)
4111a080:	10800217 	ldw	r2,8(r2)
4111a084:	10d00034 	orhi	r3,r2,16384
4111a088:	e0bfff17 	ldw	r2,-4(fp)
4111a08c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
4111a090:	e03ffe15 	stw	zero,-8(fp)
4111a094:	00001d06 	br	4111a10c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
4111a098:	009044b4 	movhi	r2,16658
4111a09c:	10b28004 	addi	r2,r2,-13824
4111a0a0:	e0fffe17 	ldw	r3,-8(fp)
4111a0a4:	18c00324 	muli	r3,r3,12
4111a0a8:	10c5883a 	add	r2,r2,r3
4111a0ac:	10c00017 	ldw	r3,0(r2)
4111a0b0:	e0bfff17 	ldw	r2,-4(fp)
4111a0b4:	10800017 	ldw	r2,0(r2)
4111a0b8:	1880111e 	bne	r3,r2,4111a100 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
4111a0bc:	009044b4 	movhi	r2,16658
4111a0c0:	10b28004 	addi	r2,r2,-13824
4111a0c4:	e0fffe17 	ldw	r3,-8(fp)
4111a0c8:	18c00324 	muli	r3,r3,12
4111a0cc:	10c5883a 	add	r2,r2,r3
4111a0d0:	10800204 	addi	r2,r2,8
4111a0d4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
4111a0d8:	1000090e 	bge	r2,zero,4111a100 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
4111a0dc:	e0bffe17 	ldw	r2,-8(fp)
4111a0e0:	10c00324 	muli	r3,r2,12
4111a0e4:	009044b4 	movhi	r2,16658
4111a0e8:	10b28004 	addi	r2,r2,-13824
4111a0ec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
4111a0f0:	e0bfff17 	ldw	r2,-4(fp)
4111a0f4:	18800226 	beq	r3,r2,4111a100 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
4111a0f8:	00bffcc4 	movi	r2,-13
4111a0fc:	00000806 	br	4111a120 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
4111a100:	e0bffe17 	ldw	r2,-8(fp)
4111a104:	10800044 	addi	r2,r2,1
4111a108:	e0bffe15 	stw	r2,-8(fp)
4111a10c:	d0a01317 	ldw	r2,-32692(gp)
4111a110:	1007883a 	mov	r3,r2
4111a114:	e0bffe17 	ldw	r2,-8(fp)
4111a118:	18bfdf2e 	bgeu	r3,r2,4111a098 <__reset+0xbb0fa098>
    }
  }
  
  /* The device is not locked */
 
  return 0;
4111a11c:	0005883a 	mov	r2,zero
}
4111a120:	e037883a 	mov	sp,fp
4111a124:	df000017 	ldw	fp,0(sp)
4111a128:	dec00104 	addi	sp,sp,4
4111a12c:	f800283a 	ret

4111a130 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
4111a130:	defff604 	addi	sp,sp,-40
4111a134:	dfc00915 	stw	ra,36(sp)
4111a138:	df000815 	stw	fp,32(sp)
4111a13c:	df000804 	addi	fp,sp,32
4111a140:	e13ffd15 	stw	r4,-12(fp)
4111a144:	e17ffe15 	stw	r5,-8(fp)
4111a148:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
4111a14c:	00bfffc4 	movi	r2,-1
4111a150:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
4111a154:	00bffb44 	movi	r2,-19
4111a158:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
4111a15c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
4111a160:	d1601104 	addi	r5,gp,-32700
4111a164:	e13ffd17 	ldw	r4,-12(fp)
4111a168:	1119bc00 	call	41119bc0 <alt_find_dev>
4111a16c:	e0bff815 	stw	r2,-32(fp)
4111a170:	e0bff817 	ldw	r2,-32(fp)
4111a174:	1000051e 	bne	r2,zero,4111a18c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
4111a178:	e13ffd17 	ldw	r4,-12(fp)
4111a17c:	111a5100 	call	4111a510 <alt_find_file>
4111a180:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
4111a184:	00800044 	movi	r2,1
4111a188:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
4111a18c:	e0bff817 	ldw	r2,-32(fp)
4111a190:	10002926 	beq	r2,zero,4111a238 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
4111a194:	e13ff817 	ldw	r4,-32(fp)
4111a198:	111a6180 	call	4111a618 <alt_get_fd>
4111a19c:	e0bff915 	stw	r2,-28(fp)
4111a1a0:	e0bff917 	ldw	r2,-28(fp)
4111a1a4:	1000030e 	bge	r2,zero,4111a1b4 <open+0x84>
    {
      status = index;
4111a1a8:	e0bff917 	ldw	r2,-28(fp)
4111a1ac:	e0bffa15 	stw	r2,-24(fp)
4111a1b0:	00002306 	br	4111a240 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
4111a1b4:	e0bff917 	ldw	r2,-28(fp)
4111a1b8:	10c00324 	muli	r3,r2,12
4111a1bc:	009044b4 	movhi	r2,16658
4111a1c0:	10b28004 	addi	r2,r2,-13824
4111a1c4:	1885883a 	add	r2,r3,r2
4111a1c8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
4111a1cc:	e0fffe17 	ldw	r3,-8(fp)
4111a1d0:	00900034 	movhi	r2,16384
4111a1d4:	10bfffc4 	addi	r2,r2,-1
4111a1d8:	1886703a 	and	r3,r3,r2
4111a1dc:	e0bffc17 	ldw	r2,-16(fp)
4111a1e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
4111a1e4:	e0bffb17 	ldw	r2,-20(fp)
4111a1e8:	1000051e 	bne	r2,zero,4111a200 <open+0xd0>
4111a1ec:	e13ffc17 	ldw	r4,-16(fp)
4111a1f0:	111a06c0 	call	4111a06c <alt_file_locked>
4111a1f4:	e0bffa15 	stw	r2,-24(fp)
4111a1f8:	e0bffa17 	ldw	r2,-24(fp)
4111a1fc:	10001016 	blt	r2,zero,4111a240 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
4111a200:	e0bff817 	ldw	r2,-32(fp)
4111a204:	10800317 	ldw	r2,12(r2)
4111a208:	10000826 	beq	r2,zero,4111a22c <open+0xfc>
4111a20c:	e0bff817 	ldw	r2,-32(fp)
4111a210:	10800317 	ldw	r2,12(r2)
4111a214:	e1ffff17 	ldw	r7,-4(fp)
4111a218:	e1bffe17 	ldw	r6,-8(fp)
4111a21c:	e17ffd17 	ldw	r5,-12(fp)
4111a220:	e13ffc17 	ldw	r4,-16(fp)
4111a224:	103ee83a 	callr	r2
4111a228:	00000106 	br	4111a230 <open+0x100>
4111a22c:	0005883a 	mov	r2,zero
4111a230:	e0bffa15 	stw	r2,-24(fp)
4111a234:	00000206 	br	4111a240 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
4111a238:	00bffb44 	movi	r2,-19
4111a23c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
4111a240:	e0bffa17 	ldw	r2,-24(fp)
4111a244:	1000090e 	bge	r2,zero,4111a26c <open+0x13c>
  {
    alt_release_fd (index);  
4111a248:	e13ff917 	ldw	r4,-28(fp)
4111a24c:	1115fac0 	call	41115fac <alt_release_fd>
    ALT_ERRNO = -status;
4111a250:	111a0300 	call	4111a030 <alt_get_errno>
4111a254:	1007883a 	mov	r3,r2
4111a258:	e0bffa17 	ldw	r2,-24(fp)
4111a25c:	0085c83a 	sub	r2,zero,r2
4111a260:	18800015 	stw	r2,0(r3)
    return -1;
4111a264:	00bfffc4 	movi	r2,-1
4111a268:	00000106 	br	4111a270 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
4111a26c:	e0bff917 	ldw	r2,-28(fp)
}
4111a270:	e037883a 	mov	sp,fp
4111a274:	dfc00117 	ldw	ra,4(sp)
4111a278:	df000017 	ldw	fp,0(sp)
4111a27c:	dec00204 	addi	sp,sp,8
4111a280:	f800283a 	ret

4111a284 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
4111a284:	defff204 	addi	sp,sp,-56
4111a288:	dfc00a15 	stw	ra,40(sp)
4111a28c:	df000915 	stw	fp,36(sp)
4111a290:	df000904 	addi	fp,sp,36
4111a294:	e13fff15 	stw	r4,-4(fp)
4111a298:	e1400215 	stw	r5,8(fp)
4111a29c:	e1800315 	stw	r6,12(fp)
4111a2a0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
4111a2a4:	e0800204 	addi	r2,fp,8
4111a2a8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
4111a2ac:	e0bfff17 	ldw	r2,-4(fp)
4111a2b0:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
4111a2b4:	00006f06 	br	4111a474 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
4111a2b8:	e0bff807 	ldb	r2,-32(fp)
4111a2bc:	10800960 	cmpeqi	r2,r2,37
4111a2c0:	1000041e 	bne	r2,zero,4111a2d4 <alt_printf+0x50>
        {
            alt_putchar(c);
4111a2c4:	e0bff807 	ldb	r2,-32(fp)
4111a2c8:	1009883a 	mov	r4,r2
4111a2cc:	111a4b00 	call	4111a4b0 <alt_putchar>
4111a2d0:	00006806 	br	4111a474 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
4111a2d4:	e0bff717 	ldw	r2,-36(fp)
4111a2d8:	10c00044 	addi	r3,r2,1
4111a2dc:	e0fff715 	stw	r3,-36(fp)
4111a2e0:	10800003 	ldbu	r2,0(r2)
4111a2e4:	e0bff805 	stb	r2,-32(fp)
4111a2e8:	e0bff807 	ldb	r2,-32(fp)
4111a2ec:	10006926 	beq	r2,zero,4111a494 <alt_printf+0x210>
            {
                if (c == '%')
4111a2f0:	e0bff807 	ldb	r2,-32(fp)
4111a2f4:	10800958 	cmpnei	r2,r2,37
4111a2f8:	1000041e 	bne	r2,zero,4111a30c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
4111a2fc:	e0bff807 	ldb	r2,-32(fp)
4111a300:	1009883a 	mov	r4,r2
4111a304:	111a4b00 	call	4111a4b0 <alt_putchar>
4111a308:	00005a06 	br	4111a474 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
4111a30c:	e0bff807 	ldb	r2,-32(fp)
4111a310:	108018d8 	cmpnei	r2,r2,99
4111a314:	1000081e 	bne	r2,zero,4111a338 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
4111a318:	e0bffe17 	ldw	r2,-8(fp)
4111a31c:	10c00104 	addi	r3,r2,4
4111a320:	e0fffe15 	stw	r3,-8(fp)
4111a324:	10800017 	ldw	r2,0(r2)
4111a328:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
4111a32c:	e13ffd17 	ldw	r4,-12(fp)
4111a330:	111a4b00 	call	4111a4b0 <alt_putchar>
4111a334:	00004f06 	br	4111a474 <alt_printf+0x1f0>
                }
                else if (c == 'x')
4111a338:	e0bff807 	ldb	r2,-32(fp)
4111a33c:	10801e18 	cmpnei	r2,r2,120
4111a340:	1000341e 	bne	r2,zero,4111a414 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
4111a344:	e0bffe17 	ldw	r2,-8(fp)
4111a348:	10c00104 	addi	r3,r2,4
4111a34c:	e0fffe15 	stw	r3,-8(fp)
4111a350:	10800017 	ldw	r2,0(r2)
4111a354:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
4111a358:	e0bffb17 	ldw	r2,-20(fp)
4111a35c:	1000031e 	bne	r2,zero,4111a36c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
4111a360:	01000c04 	movi	r4,48
4111a364:	111a4b00 	call	4111a4b0 <alt_putchar>
                        continue;
4111a368:	00004206 	br	4111a474 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
4111a36c:	00800704 	movi	r2,28
4111a370:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
4111a374:	00000306 	br	4111a384 <alt_printf+0x100>
                        digit_shift -= 4;
4111a378:	e0bff917 	ldw	r2,-28(fp)
4111a37c:	10bfff04 	addi	r2,r2,-4
4111a380:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
4111a384:	00c003c4 	movi	r3,15
4111a388:	e0bff917 	ldw	r2,-28(fp)
4111a38c:	1884983a 	sll	r2,r3,r2
4111a390:	1007883a 	mov	r3,r2
4111a394:	e0bffb17 	ldw	r2,-20(fp)
4111a398:	1884703a 	and	r2,r3,r2
4111a39c:	103ff626 	beq	r2,zero,4111a378 <__reset+0xbb0fa378>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
4111a3a0:	00001906 	br	4111a408 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
4111a3a4:	00c003c4 	movi	r3,15
4111a3a8:	e0bff917 	ldw	r2,-28(fp)
4111a3ac:	1884983a 	sll	r2,r3,r2
4111a3b0:	1007883a 	mov	r3,r2
4111a3b4:	e0bffb17 	ldw	r2,-20(fp)
4111a3b8:	1886703a 	and	r3,r3,r2
4111a3bc:	e0bff917 	ldw	r2,-28(fp)
4111a3c0:	1884d83a 	srl	r2,r3,r2
4111a3c4:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
4111a3c8:	e0bffc17 	ldw	r2,-16(fp)
4111a3cc:	108002a8 	cmpgeui	r2,r2,10
4111a3d0:	1000041e 	bne	r2,zero,4111a3e4 <alt_printf+0x160>
                            c = '0' + digit;
4111a3d4:	e0bffc17 	ldw	r2,-16(fp)
4111a3d8:	10800c04 	addi	r2,r2,48
4111a3dc:	e0bff805 	stb	r2,-32(fp)
4111a3e0:	00000306 	br	4111a3f0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
4111a3e4:	e0bffc17 	ldw	r2,-16(fp)
4111a3e8:	108015c4 	addi	r2,r2,87
4111a3ec:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
4111a3f0:	e0bff807 	ldb	r2,-32(fp)
4111a3f4:	1009883a 	mov	r4,r2
4111a3f8:	111a4b00 	call	4111a4b0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
4111a3fc:	e0bff917 	ldw	r2,-28(fp)
4111a400:	10bfff04 	addi	r2,r2,-4
4111a404:	e0bff915 	stw	r2,-28(fp)
4111a408:	e0bff917 	ldw	r2,-28(fp)
4111a40c:	103fe50e 	bge	r2,zero,4111a3a4 <__reset+0xbb0fa3a4>
4111a410:	00001806 	br	4111a474 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
4111a414:	e0bff807 	ldb	r2,-32(fp)
4111a418:	10801cd8 	cmpnei	r2,r2,115
4111a41c:	1000151e 	bne	r2,zero,4111a474 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
4111a420:	e0bffe17 	ldw	r2,-8(fp)
4111a424:	10c00104 	addi	r3,r2,4
4111a428:	e0fffe15 	stw	r3,-8(fp)
4111a42c:	10800017 	ldw	r2,0(r2)
4111a430:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
4111a434:	00000906 	br	4111a45c <alt_printf+0x1d8>
                      alt_putchar(*s++);
4111a438:	e0bffa17 	ldw	r2,-24(fp)
4111a43c:	10c00044 	addi	r3,r2,1
4111a440:	e0fffa15 	stw	r3,-24(fp)
4111a444:	10800003 	ldbu	r2,0(r2)
4111a448:	10803fcc 	andi	r2,r2,255
4111a44c:	1080201c 	xori	r2,r2,128
4111a450:	10bfe004 	addi	r2,r2,-128
4111a454:	1009883a 	mov	r4,r2
4111a458:	111a4b00 	call	4111a4b0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
4111a45c:	e0bffa17 	ldw	r2,-24(fp)
4111a460:	10800003 	ldbu	r2,0(r2)
4111a464:	10803fcc 	andi	r2,r2,255
4111a468:	1080201c 	xori	r2,r2,128
4111a46c:	10bfe004 	addi	r2,r2,-128
4111a470:	103ff11e 	bne	r2,zero,4111a438 <__reset+0xbb0fa438>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
4111a474:	e0bff717 	ldw	r2,-36(fp)
4111a478:	10c00044 	addi	r3,r2,1
4111a47c:	e0fff715 	stw	r3,-36(fp)
4111a480:	10800003 	ldbu	r2,0(r2)
4111a484:	e0bff805 	stb	r2,-32(fp)
4111a488:	e0bff807 	ldb	r2,-32(fp)
4111a48c:	103f8a1e 	bne	r2,zero,4111a2b8 <__reset+0xbb0fa2b8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
4111a490:	00000106 	br	4111a498 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
4111a494:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
4111a498:	0001883a 	nop
4111a49c:	e037883a 	mov	sp,fp
4111a4a0:	dfc00117 	ldw	ra,4(sp)
4111a4a4:	df000017 	ldw	fp,0(sp)
4111a4a8:	dec00504 	addi	sp,sp,20
4111a4ac:	f800283a 	ret

4111a4b0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
4111a4b0:	defffd04 	addi	sp,sp,-12
4111a4b4:	dfc00215 	stw	ra,8(sp)
4111a4b8:	df000115 	stw	fp,4(sp)
4111a4bc:	df000104 	addi	fp,sp,4
4111a4c0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
4111a4c4:	d0a00a17 	ldw	r2,-32728(gp)
4111a4c8:	10800217 	ldw	r2,8(r2)
4111a4cc:	100b883a 	mov	r5,r2
4111a4d0:	e13fff17 	ldw	r4,-4(fp)
4111a4d4:	11104240 	call	41110424 <putc>
#endif
#endif
}
4111a4d8:	e037883a 	mov	sp,fp
4111a4dc:	dfc00117 	ldw	ra,4(sp)
4111a4e0:	df000017 	ldw	fp,0(sp)
4111a4e4:	dec00204 	addi	sp,sp,8
4111a4e8:	f800283a 	ret

4111a4ec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
4111a4ec:	deffff04 	addi	sp,sp,-4
4111a4f0:	df000015 	stw	fp,0(sp)
4111a4f4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
4111a4f8:	000170fa 	wrctl	ienable,zero
}
4111a4fc:	0001883a 	nop
4111a500:	e037883a 	mov	sp,fp
4111a504:	df000017 	ldw	fp,0(sp)
4111a508:	dec00104 	addi	sp,sp,4
4111a50c:	f800283a 	ret

4111a510 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
4111a510:	defffb04 	addi	sp,sp,-20
4111a514:	dfc00415 	stw	ra,16(sp)
4111a518:	df000315 	stw	fp,12(sp)
4111a51c:	df000304 	addi	fp,sp,12
4111a520:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
4111a524:	d0a00f17 	ldw	r2,-32708(gp)
4111a528:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
4111a52c:	00003106 	br	4111a5f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
4111a530:	e0bffd17 	ldw	r2,-12(fp)
4111a534:	10800217 	ldw	r2,8(r2)
4111a538:	1009883a 	mov	r4,r2
4111a53c:	11097780 	call	41109778 <strlen>
4111a540:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
4111a544:	e0bffd17 	ldw	r2,-12(fp)
4111a548:	10c00217 	ldw	r3,8(r2)
4111a54c:	e0bffe17 	ldw	r2,-8(fp)
4111a550:	10bfffc4 	addi	r2,r2,-1
4111a554:	1885883a 	add	r2,r3,r2
4111a558:	10800003 	ldbu	r2,0(r2)
4111a55c:	10803fcc 	andi	r2,r2,255
4111a560:	1080201c 	xori	r2,r2,128
4111a564:	10bfe004 	addi	r2,r2,-128
4111a568:	10800bd8 	cmpnei	r2,r2,47
4111a56c:	1000031e 	bne	r2,zero,4111a57c <alt_find_file+0x6c>
    {
      len -= 1;
4111a570:	e0bffe17 	ldw	r2,-8(fp)
4111a574:	10bfffc4 	addi	r2,r2,-1
4111a578:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
4111a57c:	e0bffe17 	ldw	r2,-8(fp)
4111a580:	e0ffff17 	ldw	r3,-4(fp)
4111a584:	1885883a 	add	r2,r3,r2
4111a588:	10800003 	ldbu	r2,0(r2)
4111a58c:	10803fcc 	andi	r2,r2,255
4111a590:	1080201c 	xori	r2,r2,128
4111a594:	10bfe004 	addi	r2,r2,-128
4111a598:	10800be0 	cmpeqi	r2,r2,47
4111a59c:	1000081e 	bne	r2,zero,4111a5c0 <alt_find_file+0xb0>
4111a5a0:	e0bffe17 	ldw	r2,-8(fp)
4111a5a4:	e0ffff17 	ldw	r3,-4(fp)
4111a5a8:	1885883a 	add	r2,r3,r2
4111a5ac:	10800003 	ldbu	r2,0(r2)
4111a5b0:	10803fcc 	andi	r2,r2,255
4111a5b4:	1080201c 	xori	r2,r2,128
4111a5b8:	10bfe004 	addi	r2,r2,-128
4111a5bc:	10000a1e 	bne	r2,zero,4111a5e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
4111a5c0:	e0bffd17 	ldw	r2,-12(fp)
4111a5c4:	10800217 	ldw	r2,8(r2)
4111a5c8:	e0fffe17 	ldw	r3,-8(fp)
4111a5cc:	180d883a 	mov	r6,r3
4111a5d0:	e17fff17 	ldw	r5,-4(fp)
4111a5d4:	1009883a 	mov	r4,r2
4111a5d8:	111a7a40 	call	4111a7a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
4111a5dc:	1000021e 	bne	r2,zero,4111a5e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
4111a5e0:	e0bffd17 	ldw	r2,-12(fp)
4111a5e4:	00000706 	br	4111a604 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
4111a5e8:	e0bffd17 	ldw	r2,-12(fp)
4111a5ec:	10800017 	ldw	r2,0(r2)
4111a5f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
4111a5f4:	e0fffd17 	ldw	r3,-12(fp)
4111a5f8:	d0a00f04 	addi	r2,gp,-32708
4111a5fc:	18bfcc1e 	bne	r3,r2,4111a530 <__reset+0xbb0fa530>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
4111a600:	0005883a 	mov	r2,zero
}
4111a604:	e037883a 	mov	sp,fp
4111a608:	dfc00117 	ldw	ra,4(sp)
4111a60c:	df000017 	ldw	fp,0(sp)
4111a610:	dec00204 	addi	sp,sp,8
4111a614:	f800283a 	ret

4111a618 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
4111a618:	defffc04 	addi	sp,sp,-16
4111a61c:	df000315 	stw	fp,12(sp)
4111a620:	df000304 	addi	fp,sp,12
4111a624:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
4111a628:	00bffa04 	movi	r2,-24
4111a62c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
4111a630:	e03ffd15 	stw	zero,-12(fp)
4111a634:	00001906 	br	4111a69c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
4111a638:	009044b4 	movhi	r2,16658
4111a63c:	10b28004 	addi	r2,r2,-13824
4111a640:	e0fffd17 	ldw	r3,-12(fp)
4111a644:	18c00324 	muli	r3,r3,12
4111a648:	10c5883a 	add	r2,r2,r3
4111a64c:	10800017 	ldw	r2,0(r2)
4111a650:	10000f1e 	bne	r2,zero,4111a690 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
4111a654:	009044b4 	movhi	r2,16658
4111a658:	10b28004 	addi	r2,r2,-13824
4111a65c:	e0fffd17 	ldw	r3,-12(fp)
4111a660:	18c00324 	muli	r3,r3,12
4111a664:	10c5883a 	add	r2,r2,r3
4111a668:	e0ffff17 	ldw	r3,-4(fp)
4111a66c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
4111a670:	d0e01317 	ldw	r3,-32692(gp)
4111a674:	e0bffd17 	ldw	r2,-12(fp)
4111a678:	1880020e 	bge	r3,r2,4111a684 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
4111a67c:	e0bffd17 	ldw	r2,-12(fp)
4111a680:	d0a01315 	stw	r2,-32692(gp)
      }
      rc = i;
4111a684:	e0bffd17 	ldw	r2,-12(fp)
4111a688:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
4111a68c:	00000606 	br	4111a6a8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
4111a690:	e0bffd17 	ldw	r2,-12(fp)
4111a694:	10800044 	addi	r2,r2,1
4111a698:	e0bffd15 	stw	r2,-12(fp)
4111a69c:	e0bffd17 	ldw	r2,-12(fp)
4111a6a0:	10800810 	cmplti	r2,r2,32
4111a6a4:	103fe41e 	bne	r2,zero,4111a638 <__reset+0xbb0fa638>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
4111a6a8:	e0bffe17 	ldw	r2,-8(fp)
}
4111a6ac:	e037883a 	mov	sp,fp
4111a6b0:	df000017 	ldw	fp,0(sp)
4111a6b4:	dec00104 	addi	sp,sp,4
4111a6b8:	f800283a 	ret

4111a6bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
4111a6bc:	defffe04 	addi	sp,sp,-8
4111a6c0:	df000115 	stw	fp,4(sp)
4111a6c4:	df000104 	addi	fp,sp,4
4111a6c8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
4111a6cc:	e0bfff17 	ldw	r2,-4(fp)
4111a6d0:	10bffe84 	addi	r2,r2,-6
4111a6d4:	10c00428 	cmpgeui	r3,r2,16
4111a6d8:	18001a1e 	bne	r3,zero,4111a744 <alt_exception_cause_generated_bad_addr+0x88>
4111a6dc:	100690ba 	slli	r3,r2,2
4111a6e0:	009044b4 	movhi	r2,16658
4111a6e4:	10a9bd04 	addi	r2,r2,-22796
4111a6e8:	1885883a 	add	r2,r3,r2
4111a6ec:	10800017 	ldw	r2,0(r2)
4111a6f0:	1000683a 	jmp	r2
4111a6f4:	4111a734 	orhi	r4,r8,18076
4111a6f8:	4111a734 	orhi	r4,r8,18076
4111a6fc:	4111a744 	addi	r4,r8,18077
4111a700:	4111a744 	addi	r4,r8,18077
4111a704:	4111a744 	addi	r4,r8,18077
4111a708:	4111a734 	orhi	r4,r8,18076
4111a70c:	4111a73c 	xorhi	r4,r8,18076
4111a710:	4111a744 	addi	r4,r8,18077
4111a714:	4111a734 	orhi	r4,r8,18076
4111a718:	4111a734 	orhi	r4,r8,18076
4111a71c:	4111a744 	addi	r4,r8,18077
4111a720:	4111a734 	orhi	r4,r8,18076
4111a724:	4111a73c 	xorhi	r4,r8,18076
4111a728:	4111a744 	addi	r4,r8,18077
4111a72c:	4111a744 	addi	r4,r8,18077
4111a730:	4111a734 	orhi	r4,r8,18076
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
4111a734:	00800044 	movi	r2,1
4111a738:	00000306 	br	4111a748 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
4111a73c:	0005883a 	mov	r2,zero
4111a740:	00000106 	br	4111a748 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
4111a744:	0005883a 	mov	r2,zero
  }
}
4111a748:	e037883a 	mov	sp,fp
4111a74c:	df000017 	ldw	fp,0(sp)
4111a750:	dec00104 	addi	sp,sp,4
4111a754:	f800283a 	ret

4111a758 <atexit>:
4111a758:	200b883a 	mov	r5,r4
4111a75c:	000f883a 	mov	r7,zero
4111a760:	000d883a 	mov	r6,zero
4111a764:	0009883a 	mov	r4,zero
4111a768:	111a8201 	jmpi	4111a820 <__register_exitproc>

4111a76c <exit>:
4111a76c:	defffe04 	addi	sp,sp,-8
4111a770:	000b883a 	mov	r5,zero
4111a774:	dc000015 	stw	r16,0(sp)
4111a778:	dfc00115 	stw	ra,4(sp)
4111a77c:	2021883a 	mov	r16,r4
4111a780:	111a9380 	call	4111a938 <__call_exitprocs>
4111a784:	009044b4 	movhi	r2,16658
4111a788:	10b76d04 	addi	r2,r2,-8780
4111a78c:	11000017 	ldw	r4,0(r2)
4111a790:	20800f17 	ldw	r2,60(r4)
4111a794:	10000126 	beq	r2,zero,4111a79c <exit+0x30>
4111a798:	103ee83a 	callr	r2
4111a79c:	8009883a 	mov	r4,r16
4111a7a0:	111aab80 	call	4111aab8 <_exit>

4111a7a4 <memcmp>:
4111a7a4:	01c000c4 	movi	r7,3
4111a7a8:	3980192e 	bgeu	r7,r6,4111a810 <memcmp+0x6c>
4111a7ac:	2144b03a 	or	r2,r4,r5
4111a7b0:	11c4703a 	and	r2,r2,r7
4111a7b4:	10000f26 	beq	r2,zero,4111a7f4 <memcmp+0x50>
4111a7b8:	20800003 	ldbu	r2,0(r4)
4111a7bc:	28c00003 	ldbu	r3,0(r5)
4111a7c0:	10c0151e 	bne	r2,r3,4111a818 <memcmp+0x74>
4111a7c4:	31bfff84 	addi	r6,r6,-2
4111a7c8:	01ffffc4 	movi	r7,-1
4111a7cc:	00000406 	br	4111a7e0 <memcmp+0x3c>
4111a7d0:	20800003 	ldbu	r2,0(r4)
4111a7d4:	28c00003 	ldbu	r3,0(r5)
4111a7d8:	31bfffc4 	addi	r6,r6,-1
4111a7dc:	10c00e1e 	bne	r2,r3,4111a818 <memcmp+0x74>
4111a7e0:	21000044 	addi	r4,r4,1
4111a7e4:	29400044 	addi	r5,r5,1
4111a7e8:	31fff91e 	bne	r6,r7,4111a7d0 <__reset+0xbb0fa7d0>
4111a7ec:	0005883a 	mov	r2,zero
4111a7f0:	f800283a 	ret
4111a7f4:	20c00017 	ldw	r3,0(r4)
4111a7f8:	28800017 	ldw	r2,0(r5)
4111a7fc:	18bfee1e 	bne	r3,r2,4111a7b8 <__reset+0xbb0fa7b8>
4111a800:	31bfff04 	addi	r6,r6,-4
4111a804:	21000104 	addi	r4,r4,4
4111a808:	29400104 	addi	r5,r5,4
4111a80c:	39bff936 	bltu	r7,r6,4111a7f4 <__reset+0xbb0fa7f4>
4111a810:	303fe91e 	bne	r6,zero,4111a7b8 <__reset+0xbb0fa7b8>
4111a814:	003ff506 	br	4111a7ec <__reset+0xbb0fa7ec>
4111a818:	10c5c83a 	sub	r2,r2,r3
4111a81c:	f800283a 	ret

4111a820 <__register_exitproc>:
4111a820:	defffa04 	addi	sp,sp,-24
4111a824:	dc000315 	stw	r16,12(sp)
4111a828:	041044b4 	movhi	r16,16658
4111a82c:	84376d04 	addi	r16,r16,-8780
4111a830:	80c00017 	ldw	r3,0(r16)
4111a834:	dc400415 	stw	r17,16(sp)
4111a838:	dfc00515 	stw	ra,20(sp)
4111a83c:	18805217 	ldw	r2,328(r3)
4111a840:	2023883a 	mov	r17,r4
4111a844:	10003726 	beq	r2,zero,4111a924 <__register_exitproc+0x104>
4111a848:	10c00117 	ldw	r3,4(r2)
4111a84c:	010007c4 	movi	r4,31
4111a850:	20c00e16 	blt	r4,r3,4111a88c <__register_exitproc+0x6c>
4111a854:	1a000044 	addi	r8,r3,1
4111a858:	8800221e 	bne	r17,zero,4111a8e4 <__register_exitproc+0xc4>
4111a85c:	18c00084 	addi	r3,r3,2
4111a860:	18c7883a 	add	r3,r3,r3
4111a864:	18c7883a 	add	r3,r3,r3
4111a868:	12000115 	stw	r8,4(r2)
4111a86c:	10c7883a 	add	r3,r2,r3
4111a870:	19400015 	stw	r5,0(r3)
4111a874:	0005883a 	mov	r2,zero
4111a878:	dfc00517 	ldw	ra,20(sp)
4111a87c:	dc400417 	ldw	r17,16(sp)
4111a880:	dc000317 	ldw	r16,12(sp)
4111a884:	dec00604 	addi	sp,sp,24
4111a888:	f800283a 	ret
4111a88c:	00800034 	movhi	r2,0
4111a890:	10800004 	addi	r2,r2,0
4111a894:	10002626 	beq	r2,zero,4111a930 <__register_exitproc+0x110>
4111a898:	01006404 	movi	r4,400
4111a89c:	d9400015 	stw	r5,0(sp)
4111a8a0:	d9800115 	stw	r6,4(sp)
4111a8a4:	d9c00215 	stw	r7,8(sp)
4111a8a8:	00000000 	call	40000000 <__alt_mem_onchip_memory-0x1100000>
4111a8ac:	d9400017 	ldw	r5,0(sp)
4111a8b0:	d9800117 	ldw	r6,4(sp)
4111a8b4:	d9c00217 	ldw	r7,8(sp)
4111a8b8:	10001d26 	beq	r2,zero,4111a930 <__register_exitproc+0x110>
4111a8bc:	81000017 	ldw	r4,0(r16)
4111a8c0:	10000115 	stw	zero,4(r2)
4111a8c4:	02000044 	movi	r8,1
4111a8c8:	22405217 	ldw	r9,328(r4)
4111a8cc:	0007883a 	mov	r3,zero
4111a8d0:	12400015 	stw	r9,0(r2)
4111a8d4:	20805215 	stw	r2,328(r4)
4111a8d8:	10006215 	stw	zero,392(r2)
4111a8dc:	10006315 	stw	zero,396(r2)
4111a8e0:	883fde26 	beq	r17,zero,4111a85c <__reset+0xbb0fa85c>
4111a8e4:	18c9883a 	add	r4,r3,r3
4111a8e8:	2109883a 	add	r4,r4,r4
4111a8ec:	1109883a 	add	r4,r2,r4
4111a8f0:	21802215 	stw	r6,136(r4)
4111a8f4:	01800044 	movi	r6,1
4111a8f8:	12406217 	ldw	r9,392(r2)
4111a8fc:	30cc983a 	sll	r6,r6,r3
4111a900:	4992b03a 	or	r9,r9,r6
4111a904:	12406215 	stw	r9,392(r2)
4111a908:	21c04215 	stw	r7,264(r4)
4111a90c:	01000084 	movi	r4,2
4111a910:	893fd21e 	bne	r17,r4,4111a85c <__reset+0xbb0fa85c>
4111a914:	11006317 	ldw	r4,396(r2)
4111a918:	218cb03a 	or	r6,r4,r6
4111a91c:	11806315 	stw	r6,396(r2)
4111a920:	003fce06 	br	4111a85c <__reset+0xbb0fa85c>
4111a924:	18805304 	addi	r2,r3,332
4111a928:	18805215 	stw	r2,328(r3)
4111a92c:	003fc606 	br	4111a848 <__reset+0xbb0fa848>
4111a930:	00bfffc4 	movi	r2,-1
4111a934:	003fd006 	br	4111a878 <__reset+0xbb0fa878>

4111a938 <__call_exitprocs>:
4111a938:	defff504 	addi	sp,sp,-44
4111a93c:	df000915 	stw	fp,36(sp)
4111a940:	dd400615 	stw	r21,24(sp)
4111a944:	dc800315 	stw	r18,12(sp)
4111a948:	dfc00a15 	stw	ra,40(sp)
4111a94c:	ddc00815 	stw	r23,32(sp)
4111a950:	dd800715 	stw	r22,28(sp)
4111a954:	dd000515 	stw	r20,20(sp)
4111a958:	dcc00415 	stw	r19,16(sp)
4111a95c:	dc400215 	stw	r17,8(sp)
4111a960:	dc000115 	stw	r16,4(sp)
4111a964:	d9000015 	stw	r4,0(sp)
4111a968:	2839883a 	mov	fp,r5
4111a96c:	04800044 	movi	r18,1
4111a970:	057fffc4 	movi	r21,-1
4111a974:	009044b4 	movhi	r2,16658
4111a978:	10b76d04 	addi	r2,r2,-8780
4111a97c:	12000017 	ldw	r8,0(r2)
4111a980:	45005217 	ldw	r20,328(r8)
4111a984:	44c05204 	addi	r19,r8,328
4111a988:	a0001c26 	beq	r20,zero,4111a9fc <__call_exitprocs+0xc4>
4111a98c:	a0800117 	ldw	r2,4(r20)
4111a990:	15ffffc4 	addi	r23,r2,-1
4111a994:	b8000d16 	blt	r23,zero,4111a9cc <__call_exitprocs+0x94>
4111a998:	14000044 	addi	r16,r2,1
4111a99c:	8421883a 	add	r16,r16,r16
4111a9a0:	8421883a 	add	r16,r16,r16
4111a9a4:	84402004 	addi	r17,r16,128
4111a9a8:	a463883a 	add	r17,r20,r17
4111a9ac:	a421883a 	add	r16,r20,r16
4111a9b0:	e0001e26 	beq	fp,zero,4111aa2c <__call_exitprocs+0xf4>
4111a9b4:	80804017 	ldw	r2,256(r16)
4111a9b8:	e0801c26 	beq	fp,r2,4111aa2c <__call_exitprocs+0xf4>
4111a9bc:	bdffffc4 	addi	r23,r23,-1
4111a9c0:	843fff04 	addi	r16,r16,-4
4111a9c4:	8c7fff04 	addi	r17,r17,-4
4111a9c8:	bd7ff91e 	bne	r23,r21,4111a9b0 <__reset+0xbb0fa9b0>
4111a9cc:	00800034 	movhi	r2,0
4111a9d0:	10800004 	addi	r2,r2,0
4111a9d4:	10000926 	beq	r2,zero,4111a9fc <__call_exitprocs+0xc4>
4111a9d8:	a0800117 	ldw	r2,4(r20)
4111a9dc:	1000301e 	bne	r2,zero,4111aaa0 <__call_exitprocs+0x168>
4111a9e0:	a0800017 	ldw	r2,0(r20)
4111a9e4:	10003226 	beq	r2,zero,4111aab0 <__call_exitprocs+0x178>
4111a9e8:	a009883a 	mov	r4,r20
4111a9ec:	98800015 	stw	r2,0(r19)
4111a9f0:	00000000 	call	40000000 <__alt_mem_onchip_memory-0x1100000>
4111a9f4:	9d000017 	ldw	r20,0(r19)
4111a9f8:	a03fe41e 	bne	r20,zero,4111a98c <__reset+0xbb0fa98c>
4111a9fc:	dfc00a17 	ldw	ra,40(sp)
4111aa00:	df000917 	ldw	fp,36(sp)
4111aa04:	ddc00817 	ldw	r23,32(sp)
4111aa08:	dd800717 	ldw	r22,28(sp)
4111aa0c:	dd400617 	ldw	r21,24(sp)
4111aa10:	dd000517 	ldw	r20,20(sp)
4111aa14:	dcc00417 	ldw	r19,16(sp)
4111aa18:	dc800317 	ldw	r18,12(sp)
4111aa1c:	dc400217 	ldw	r17,8(sp)
4111aa20:	dc000117 	ldw	r16,4(sp)
4111aa24:	dec00b04 	addi	sp,sp,44
4111aa28:	f800283a 	ret
4111aa2c:	a0800117 	ldw	r2,4(r20)
4111aa30:	80c00017 	ldw	r3,0(r16)
4111aa34:	10bfffc4 	addi	r2,r2,-1
4111aa38:	15c01426 	beq	r2,r23,4111aa8c <__call_exitprocs+0x154>
4111aa3c:	80000015 	stw	zero,0(r16)
4111aa40:	183fde26 	beq	r3,zero,4111a9bc <__reset+0xbb0fa9bc>
4111aa44:	95c8983a 	sll	r4,r18,r23
4111aa48:	a0806217 	ldw	r2,392(r20)
4111aa4c:	a5800117 	ldw	r22,4(r20)
4111aa50:	2084703a 	and	r2,r4,r2
4111aa54:	10000b26 	beq	r2,zero,4111aa84 <__call_exitprocs+0x14c>
4111aa58:	a0806317 	ldw	r2,396(r20)
4111aa5c:	2088703a 	and	r4,r4,r2
4111aa60:	20000c1e 	bne	r4,zero,4111aa94 <__call_exitprocs+0x15c>
4111aa64:	89400017 	ldw	r5,0(r17)
4111aa68:	d9000017 	ldw	r4,0(sp)
4111aa6c:	183ee83a 	callr	r3
4111aa70:	a0800117 	ldw	r2,4(r20)
4111aa74:	15bfbf1e 	bne	r2,r22,4111a974 <__reset+0xbb0fa974>
4111aa78:	98800017 	ldw	r2,0(r19)
4111aa7c:	153fcf26 	beq	r2,r20,4111a9bc <__reset+0xbb0fa9bc>
4111aa80:	003fbc06 	br	4111a974 <__reset+0xbb0fa974>
4111aa84:	183ee83a 	callr	r3
4111aa88:	003ff906 	br	4111aa70 <__reset+0xbb0faa70>
4111aa8c:	a5c00115 	stw	r23,4(r20)
4111aa90:	003feb06 	br	4111aa40 <__reset+0xbb0faa40>
4111aa94:	89000017 	ldw	r4,0(r17)
4111aa98:	183ee83a 	callr	r3
4111aa9c:	003ff406 	br	4111aa70 <__reset+0xbb0faa70>
4111aaa0:	a0800017 	ldw	r2,0(r20)
4111aaa4:	a027883a 	mov	r19,r20
4111aaa8:	1029883a 	mov	r20,r2
4111aaac:	003fb606 	br	4111a988 <__reset+0xbb0fa988>
4111aab0:	0005883a 	mov	r2,zero
4111aab4:	003ffb06 	br	4111aaa4 <__reset+0xbb0faaa4>

4111aab8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
4111aab8:	defffd04 	addi	sp,sp,-12
4111aabc:	df000215 	stw	fp,8(sp)
4111aac0:	df000204 	addi	fp,sp,8
4111aac4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
4111aac8:	0001883a 	nop
4111aacc:	e0bfff17 	ldw	r2,-4(fp)
4111aad0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
4111aad4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
4111aad8:	10000226 	beq	r2,zero,4111aae4 <_exit+0x2c>
    ALT_SIM_FAIL();
4111aadc:	002af070 	cmpltui	zero,zero,43969
4111aae0:	00000106 	br	4111aae8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
4111aae4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
4111aae8:	003fff06 	br	4111aae8 <__reset+0xbb0faae8>
