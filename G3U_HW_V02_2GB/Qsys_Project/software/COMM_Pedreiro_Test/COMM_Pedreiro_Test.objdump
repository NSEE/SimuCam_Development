
COMM_Pedreiro_Test.elf:     file format elf32-littlenios2
COMM_Pedreiro_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00028be4 memsz 0x00029f3c flags rwx
    LOAD off    0x0002a000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0002a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000253c8  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000194c  8112560c  8112560c  0002660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cac  81126f58  81126f58  00027f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001358  81128c04  81128c04  00029c04  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  81129f5c  81129f5c  0002a000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  0002a000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002a000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001458  00000000  00000000  0002a028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003b14f  00000000  00000000  0002b480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000dd10  00000000  00000000  000665cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013469  00000000  00000000  000742df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00005248  00000000  00000000  00087748  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000730f  00000000  00000000  0008c990  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ed47  00000000  00000000  00093c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000b29e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001da0  00000000  00000000  000b2a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000bad6d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000bad70  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000bad7c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000bad7d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000bad7e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000bad82  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000bad86  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000bad8a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  000bad95  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  000bad9f  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  000bada9  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  000badba  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00213cd5  00000000  00000000  000bae0d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
8112560c l    d  .rodata	00000000 .rodata
81126f58 l    d  .rwdata	00000000 .rwdata
81128c04 l    d  .bss	00000000 .bss
81129f5c l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../COMM_Pedreiro_Test_bsp//obj/HAL/src/crt0.o
81100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm_channel.c
81104098 l     F .text	00000048 uliCommReadReg
8110404c l     F .text	0000004c vCommWriteReg
00000000 l    df *ABS*	00000000 data_packet.c
81104898 l     F .text	00000048 uliDpktReadReg
8110484c l     F .text	0000004c vDpktWriteReg
00000000 l    df *ABS*	00000000 fee_buffers.c
81128c24 l     O .bss	00000004 viCh1HoldContext
81128c28 l     O .bss	00000004 viCh2HoldContext
81128c2c l     O .bss	00000004 viCh3HoldContext
81128c30 l     O .bss	00000004 viCh4HoldContext
81128c34 l     O .bss	00000004 viCh5HoldContext
81128c38 l     O .bss	00000004 viCh6HoldContext
81128c3c l     O .bss	00000004 viCh7HoldContext
81128c40 l     O .bss	00000004 viCh8HoldContext
8110611c l     F .text	0000004c vFeebWriteReg
81106168 l     F .text	00000048 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
81128c44 l     O .bss	00000004 viCh1HoldContext
81128c48 l     O .bss	00000004 viCh2HoldContext
81128c4c l     O .bss	00000004 viCh3HoldContext
81128c50 l     O .bss	00000004 viCh4HoldContext
81128c54 l     O .bss	00000004 viCh5HoldContext
81128c58 l     O .bss	00000004 viCh6HoldContext
81128c5c l     O .bss	00000004 viCh7HoldContext
81128c60 l     O .bss	00000004 viCh8HoldContext
81108d08 l     F .text	0000004c vRmapWriteReg
81108d9c l     F .text	00000260 uliConvRmapCfgAddr
00000000 l    df *ABS*	00000000 spw_controller.c
811095e0 l     F .text	00000048 uliSpwcReadReg
81109594 l     F .text	0000004c vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
81128bb4 l     O .rwdata	00000001 ucIoValue
811097b0 l     F .text	00000074 bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
8110a048 l     F .text	00000134 msgdma_write_extended_descriptor
8110a17c l     F .text	0000015c msgdma_construct_extended_descriptor
8110a2d8 l     F .text	000002a8 msgdma_descriptor_async_transfer
8110a580 l     F .text	0000036c msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
8110b034 l     F .text	0000004c vRstcWriteReg
8110b080 l     F .text	00000048 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
81128c70 l     O .bss	00000004 viHoldContext
00000000 l    df *ABS*	00000000 mebxhwt01.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
81126f58 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 refill.c
81111418 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
81126ae6 l     O .rodata	00000010 zeroes.4389
81126af6 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
81126b06 l     O .rodata	00000010 zeroes.4404
81115cd0 l     F .text	000000bc __sbprintf
81126b16 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81115f94 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
81117ac4 l     F .text	00000008 __fp_unlock
81117ad8 l     F .text	0000019c __sinit.part.1
81117c74 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
811277a4 l     O .rwdata	00000020 lc_ctype_charset
81127784 l     O .rwdata	00000020 lc_message_charset
811277c4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
81126b44 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
81126c78 l     O .rodata	00000010 blanks.4332
81126c68 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
8111b90c l     F .text	000000fc __sprint_r.part.0
81126c98 l     O .rodata	00000010 blanks.4348
81126c88 l     O .rodata	00000010 zeroes.4349
8111ce98 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
811202dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
81120408 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81120434 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
811206a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81120780 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
81120954 l     F .text	0000003c alt_get_errno
81120990 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81120ba8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
81128bf0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81120fc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
811210fc l     F .text	00000034 alt_dev_reg
811279a4 l     O .rwdata	00001060 jtag_uart_0
81128a04 l     O .rwdata	000000c4 rs232_uart
81128ac8 l     O .rwdata	00000060 dma_DDR_M1
81128b28 l     O .rwdata	00000060 dma_DDR_M2
81128b88 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81121474 l     F .text	0000020c altera_avalon_jtag_uart_irq
81121680 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
81121cb8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81121f68 l     F .text	0000009c altera_avalon_uart_irq
81122004 l     F .text	000000e4 altera_avalon_uart_rxirq
811220e8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
81122284 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
8112249c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
81122684 l     F .text	0000003c alt_get_errno
811226c0 l     F .text	00000094 alt_msgdma_write_standard_descriptor
81122754 l     F .text	0000012c alt_msgdma_write_extended_descriptor
81122880 l     F .text	00000184 alt_msgdma_irq
81122a04 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
81122a90 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
81122be4 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
81122eb4 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
811234fc l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
811235a0 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8112462c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
81124ca8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81128cb0 g     O .bss	00000004 alt_instruction_exception_handler
811064d8 g     F .text	0000003c vRmapCh7IrqFlagClrWriteCmd
81124410 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
811067d0 g     F .text	00000048 uliRmapCh1WriteCmdAddress
8110b594 g     F .text	00000044 vSyncInitIrq
81119bdc g     F .text	00000074 _mprec_log10
8110b764 g     F .text	00000038 bSyncSetMbt
8110997c g     F .text	00000100 I2C_Read
81119cc8 g     F .text	0000008c __any_on
81118988 g     F .text	00000054 _isatty_r
81126b50 g     O .rodata	00000028 __mprec_tinytens
81106780 g     F .text	00000050 bRmapCh8IrqFlagWriteCmd
81120890 g     F .text	0000007c alt_main
81105a38 g     F .text	00000070 bFeebGetRightBufferEmpty
81104d20 g     F .text	00000050 bFeebCh3IrqFlagBufferEmpty
81129e5c g     O .bss	00000100 alt_irq
81118ab8 g     F .text	00000060 _lseek_r
81105aa8 g     F .text	00000060 bFeebGetCh1LeftBufferEmpty
81117e64 g     F .text	000000ac __sflags
8111f45c g     F .text	00000088 .hidden __eqdf2
811232dc g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
81106860 g     F .text	00000048 uliRmapCh3WriteCmdAddress
81129f5c g       *ABS*	00000000 __alt_heap_start
81103e14 g     F .text	00000164 bCommSetGlobalIrqEn
81106c24 g     F .text	00000080 bRmapGetIrqControl
81128c6c g     O .bss	00000001 SspdConfigControl
8110bb10 g     F .text	0000004c bSyncCtrReset
811291dc g     O .bss	00000190 xComm1
8110e9ac g     F .text	0000009c aatoh
8111d47c g     F .text	0000009c _wcrtomb_r
81104c44 g     F .text	0000003c vFeebCh8IrqFlagClrBufferEmpty
81104918 g     F .text	00000038 vFeebCh2HandleIrq
81111880 g     F .text	0000005c __sseek
81117e14 g     F .text	00000010 __sinit
8110a9a4 g     F .text	0000003c iMsgdmaExtendedDescriptorAsyncTransfer
8111d324 g     F .text	00000140 __swbuf_r
81109204 g     F .text	000000ec bSpwcGetLinkError
81106258 g     F .text	00000038 vRmapCh4HandleIrq
811189dc g     F .text	0000007c _setlocale_r
81128bb8 g     O .rwdata	00000004 LedsPainelControl
81128cdc g     O .bss	00000100 cDebugBuffer
81117c7c g     F .text	00000068 __sfmoreglue
81104f00 g     F .text	000000cc bFeebCh1SetBufferSize
81120930 g     F .text	00000024 __malloc_unlock
8110284c g     F .text	00000078 uliXorshift32
8110ead0 g     F .text	00000440 .hidden __divsf3
811094c0 g     F .text	000000d4 bSpwcInitCh
811076d8 g     F .text	0000008c bRmapGetMemConfigStat
81128c78 g     O .bss	00000004 fp
81118bfc g     F .text	0000015c memmove
8110bf54 g     F .text	0000006c bSyncCtrCh8OutEnable
81117dfc g     F .text	00000018 _cleanup
81105fa0 g     F .text	0000017c bFeebInitCh
81118d58 g     F .text	000000a8 _Balloc
81106d24 g     F .text	000000d0 bRmapSetCodecConfig
8112322c g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
81128c08 g     O .bss	00000004 pxDmaM1Dev
81104e60 g     F .text	00000050 bFeebCh7IrqFlagBufferEmpty
81109628 g     F .text	00000034 bEnableIsoDrivers
8111f4e4 g     F .text	000000dc .hidden __gtdf2
81125050 g     F .text	00000024 altera_nios2_gen2_irq_init
8110b8b0 g     F .text	00000068 bSyncSetNCycles
8110be7c g     F .text	0000006c bSyncCtrCh6OutEnable
81109cd8 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
81102b84 g     F .text	000000f0 TEMP_Read
81106b84 g     F .text	000000a0 bRmapSetIrqControl
81105230 g     F .text	000000cc bFeebCh5SetBufferSize
81104988 g     F .text	00000038 vFeebCh4HandleIrq
8111052c g     F .text	0000005c _fstat_r
81128c7c g     O .bss	00000004 errno
8111167c g     F .text	00000014 __srget
8110c210 g     F .text	00000034 uliSyncGetCtr
811117fc g     F .text	00000008 __seofread
81106300 g     F .text	00000038 vRmapCh7HandleIrq
81104304 g     F .text	00000124 bDpktGetPacketConfig
811069c8 g     F .text	00000048 uliRmapCh8WriteCmdAddress
8111a6d0 g     F .text	0000123c ___svfiprintf_internal_r
81105bc8 g     F .text	00000060 bFeebGetCh2RightBufferEmpty
81128ca0 g     O .bss	00000004 alt_argv
81130bb4 g       *ABS*	00000000 _gp
81120f98 g     F .text	00000030 usleep
81109f60 g     F .text	00000078 bSetBoardLeds
81123d4c g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81127824 g     O .rwdata	00000180 alt_fd_list
81104dc0 g     F .text	00000050 bFeebCh5IrqFlagBufferEmpty
81106550 g     F .text	00000050 bRmapCh1IrqFlagWriteCmd
81110688 g     F .text	00000070 _getc_r
811068f0 g     F .text	00000048 uliRmapCh5WriteCmdAddress
811106f8 g     F .text	00000088 getc
8112936c g     O .bss	00000190 xComm2
811247cc g     F .text	00000090 alt_find_dev
81111148 g     F .text	00000148 memcpy
811046e0 g     F .text	0000016c bDpktInitCh
81117acc g     F .text	0000000c _cleanup_r
81120030 g     F .text	000000dc .hidden __floatsidf
8110b6e4 g     F .text	00000044 ucSyncStatusErrorCode
811294fc g     O .bss	00000190 xComm6
81124d6c g     F .text	0000007c alt_io_redirect
8111f5c0 g     F .text	000000f4 .hidden __ltdf2
81106730 g     F .text	00000050 bRmapCh7IrqFlagWriteCmd
811056d4 g     F .text	000000cc bFeebSetIrqControl
811034e0 g     F .text	000000a8 bSdmaInitM2Dma
8112560c g       *ABS*	00000000 __DTOR_END__
81128c20 g     O .bss	00000004 EDpktMode
8112416c g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
8112444c g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
8110bba8 g     F .text	0000004c bSyncCtrErrInj
811243bc g     F .text	00000054 alt_msgdma_register_callback
81125074 g     F .text	0000009c alt_exception_cause_generated_bad_addr
8110b538 g     F .text	00000038 vSyncHandleIrq
81104adc g     F .text	0000003c vFeebCh2IrqFlagClrBufferEmpty
8110be10 g     F .text	0000006c bSyncCtrCh5OutEnable
81128c74 g     O .bss	00000001 vucN
8111a318 g     F .text	00000074 __fpclassifyd
8110b654 g     F .text	0000004c bSyncStatusExtnIrq
81119b38 g     F .text	000000a4 __ratio
8110b79c g     F .text	00000038 bSyncSetBt
8111ce7c g     F .text	0000001c __vfiprintf_internal
81104aa0 g     F .text	0000003c vFeebCh1IrqFlagClrBufferEmpty
81121878 g     F .text	0000021c altera_avalon_jtag_uart_read
81123a2c g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
8111e20c g     F .text	00000064 .hidden __udivsi3
811206dc g     F .text	000000a4 isatty
81128c64 g     O .bss	00000001 LedsBoardControl
81126ba0 g     O .rodata	000000c8 __mprec_tens
81118a58 g     F .text	0000000c __locale_charset
8110bd38 g     F .text	0000006c bSyncCtrCh3OutEnable
81109a7c g     F .text	00000158 I2C_MultipleRead
81128c88 g     O .bss	00000004 __malloc_top_pad
81128bcc g     O .rwdata	00000004 __mb_cur_max
81118a88 g     F .text	0000000c _localeconv_r
8110afcc g     F .text	00000068 vRstcHoldDeviceReset
81119164 g     F .text	0000003c __i2b
81118344 g     F .text	000004bc __sfvwrite_r
81106424 g     F .text	0000003c vRmapCh4IrqFlagClrWriteCmd
81104624 g     F .text	000000bc bDpktGetPixelDelay
81111690 g     F .text	00000054 _sbrk_r
81119d54 g     F .text	00000060 _read_r
811023bc g     F .text	00000490 bDdr2MemoryRandomReadTest
81128be4 g     O .rwdata	00000004 alt_max_fd
8111d018 g     F .text	000000f0 _fclose_r
81117a94 g     F .text	00000030 fflush
81128c84 g     O .bss	00000004 __malloc_max_sbrked_mem
811052fc g     F .text	000000cc bFeebCh6SetBufferSize
81120520 g     F .text	00000180 alt_irq_register
8110fc38 g     F .text	00000110 .hidden __extendsfdf2
81109824 g     F .text	00000080 I2C_TestAdress
8111e2c8 g     F .text	000008ac .hidden __adddf3
811063e8 g     F .text	0000003c vRmapCh3IrqFlagClrWriteCmd
811198e0 g     F .text	0000010c __b2d
8112378c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8111dbdc g     F .text	00000538 .hidden __umoddi3
811207bc g     F .text	000000d4 lseek
81106e78 g     F .text	00000158 bRmapGetCodecStatus
811092f0 g     F .text	000000c8 bSpwcGetLinkStatus
81105da0 g     F .text	00000080 bFeebGetWindowing
81128bbc g     O .rwdata	00000004 _global_impure_ptr
8110b4f4 g     F .text	00000044 bSSDisplayUpdate
81119db4 g     F .text	00000564 _realloc_r
81129f5c g       *ABS*	00000000 __bss_end
81124bb8 g     F .text	000000f0 alt_iic_isr_register
81120e90 g     F .text	00000108 alt_tick
81106a10 g     F .text	00000174 vRmapInitIrq
8110aefc g     F .text	00000064 vRstcSimucamReset
81124250 g     F .text	0000016c alt_msgdma_init
8111d664 g     F .text	00000578 .hidden __udivdi3
8111d280 g     F .text	00000024 _fputwc_r
81126b78 g     O .rodata	00000028 __mprec_bigtens
81118f48 g     F .text	00000104 __s2b
8110b844 g     F .text	0000006c bSyncSetPolarity
8112010c g     F .text	000000a8 .hidden __floatunsidf
81119620 g     F .text	00000060 __mcmp
81121ebc g     F .text	000000ac altera_avalon_uart_init
811244c4 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
81103a08 g     F .text	0000040c bSdmaDmaM2Transfer
81117e34 g     F .text	00000018 __fp_lock_all
81124b6c g     F .text	0000004c alt_ic_irq_enabled
811098a4 g     F .text	000000d8 I2C_Write
811065f0 g     F .text	00000050 bRmapCh3IrqFlagWriteCmd
81120df4 g     F .text	0000009c alt_alarm_stop
81128c98 g     O .bss	00000004 alt_irq_active
811100cc g     F .text	00000444 _fseeko_r
811000fc g     F .exceptions	000000d4 alt_irq_handler
811277fc g     O .rwdata	00000028 alt_dev_null
811233c4 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
8110b80c g     F .text	00000038 bSyncSetOst
81107764 g     F .text	00000c44 bRmapSetRmapMemHKArea
81105c28 g     F .text	000000d8 bFeebSetBufferSize
81109bd4 g     F .text	0000008c i2c_start
8110bda4 g     F .text	0000006c bSyncCtrCh4OutEnable
811240e0 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
811203e8 g     F .text	00000020 alt_dcache_flush_all
8111904c g     F .text	00000068 __hi0bits
81106938 g     F .text	00000048 uliRmapCh6WriteCmdAddress
8111ffb0 g     F .text	00000080 .hidden __fixdfsi
81105494 g     F .text	000000cc bFeebCh8SetBufferSize
81105ea0 g     F .text	00000080 bFeebStopCh
8110bac4 g     F .text	0000004c bSyncCtrStart
81105f20 g     F .text	00000080 bFeebClrCh
811066e0 g     F .text	00000050 bRmapCh6IrqFlagWriteCmd
811068a8 g     F .text	00000048 uliRmapCh4WriteCmdAddress
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
81128bdc g     O .rwdata	00000008 alt_dev_list
81121004 g     F .text	000000f8 write
811251d8 g     F .text	000000a0 _putc_r
81120470 g     F .text	000000b0 fstat
81110088 g     F .text	00000024 fprintf
81104e10 g     F .text	00000050 bFeebCh6IrqFlagBufferEmpty
8110e6ac g     F .text	00000050 _reg_write
8111f5c0 g     F .text	000000f4 .hidden __ledf2
81106290 g     F .text	00000038 vRmapCh5HandleIrq
8110b0c8 g     F .text	00000050 v_spi_start
81119398 g     F .text	00000140 __pow5mult
81106818 g     F .text	00000048 uliRmapCh2WriteCmdAddress
8111ba20 g     F .text	0000145c ___vfiprintf_internal_r
81128c94 g     O .bss	00000004 __nlocale_changed
8111e270 g     F .text	00000058 .hidden __umodsi3
8110bbf4 g     F .text	0000006c bSyncCtrSyncOutEnable
8110b60c g     F .text	00000048 bSyncIrqFlagSync
811237e4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81129f5c g       *ABS*	00000000 end
811049f8 g     F .text	00000038 vFeebCh6HandleIrq
81110510 g     F .text	0000001c fseeko
8112968c g     O .bss	00000190 xComm5
811224d8 g     F .text	000001ac altera_avalon_uart_write
811100b0 g     F .text	0000001c fseek
811213b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
8112560c g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81101f58 g     F .text	00000464 bDdr2MemoryRandomWriteTest
81121d30 g     F .text	0000007c alt_avalon_timer_sc_init
81105d00 g     F .text	000000a0 bFeebSetWindowing
81121e0c g     F .text	00000060 altera_avalon_uart_write_fd
8110fef0 g     F .text	00000064 .hidden __clzsi2
81121e6c g     F .text	00000050 altera_avalon_uart_close_fd
81121a94 g     F .text	00000224 altera_avalon_jtag_uart_write
81117e24 g     F .text	00000004 __sfp_lock_acquire
81102c74 g     F .text	00000040 sense_log_temp
81118b18 g     F .text	000000e4 memchr
81113abc g     F .text	000021f8 ___vfprintf_internal_r
811116e4 g     F .text	00000058 _sprintf_r
8110740c g     F .text	000002cc bRmapGetMemConfigArea
81118034 g     F .text	00000310 _free_r
81124de8 g     F .text	0000022c alt_printf
8110e74c g     F .text	000001f4 _print_codec_status
81118a64 g     F .text	00000010 __locale_mb_cur_max
81106ca4 g     F .text	00000080 bRmapGetIrqFlags
81125458 g     F .text	00000180 __call_exitprocs
81111608 g     F .text	00000074 __srget_r
81128c90 g     O .bss	00000004 __mlocale_changed
8110bb5c g     F .text	0000004c bSyncCtrOneShot
81128bc4 g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	00000038 _start
8110c244 g     F .text	00000034 uliSyncReadStatus
81128ca8 g     O .bss	00000004 _alt_tick_rate
8110b5d8 g     F .text	00000034 vSyncIrqFlagClrSync
811194d8 g     F .text	00000148 __lshift
81123284 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
81128cac g     O .bss	00000004 _alt_nticks
81120be4 g     F .text	000000fc read
81121168 g     F .text	000000e8 alt_sys_init
8110f30c g     F .text	00000124 .hidden __floatsisf
811063ac g     F .text	0000003c vRmapCh2IrqFlagClrWriteCmd
8111a500 g     F .text	000001d0 __ssprint_r
811113b8 g     F .text	00000060 _open_r
811058c4 g     F .text	00000104 bFeebGetBuffersStatus
81100784 g     F .text	00000ca8 bDdr2EepromDump
81125340 g     F .text	00000118 __register_exitproc
8110c278 g     F .text	00000054 bSyncWriteReg
81106690 g     F .text	00000050 bRmapCh5IrqFlagWriteCmd
811191a0 g     F .text	000001f8 __multiply
81121720 g     F .text	00000068 altera_avalon_jtag_uart_close
8110b280 g     F .text	00000050 v_spi_end
81128cb4 g     O .bss	00000028 __malloc_current_mallinfo
811199ec g     F .text	0000014c __d2b
81104b54 g     F .text	0000003c vFeebCh4IrqFlagClrBufferEmpty
81104a68 g     F .text	00000038 vFeebCh8HandleIrq
8110b2d0 g     F .text	0000015c RTCC_SPI_R_MAC
81121250 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
81124964 g     F .text	000000a4 alt_get_fd
81108ffc g     F .text	0000012c bSpwcSetLink
811201b4 g     F .text	00000128 alt_busy_sleep
8110bc60 g     F .text	0000006c bSyncCtrCh1OutEnable
8112981c g     O .bss	00000190 xComm3
8110e940 g     F .text	0000006c _split_codec_status
81115f40 g     F .text	00000054 _close_r
81123734 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8112515c g     F .text	0000007c memcmp
81121310 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
81129f5c g       *ABS*	00000000 __alt_stack_base
811053c8 g     F .text	000000cc bFeebCh7SetBufferSize
81121360 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
81104b90 g     F .text	0000003c vFeebCh5IrqFlagClrBufferEmpty
81110588 g     F .text	000000cc _fwrite_r
811299ac g     O .bss	00000190 xComm7
8112383c g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81104c80 g     F .text	00000050 bFeebCh1IrqFlagBufferEmpty
81115dec g     F .text	00000154 __swsetup_r
8111eb74 g     F .text	000008e8 .hidden __divdf3
81117ce4 g     F .text	00000118 __sfp
81109440 g     F .text	00000080 bSpwcClearTimecode
81119c50 g     F .text	00000078 __copybits
8112737c g     O .rwdata	00000408 __malloc_av_
81117e30 g     F .text	00000004 __sinit_lock_release
81128c04 g     O .bss	00000004 uliInitialState
81109c60 g     F .text	00000078 i2c_stop
8110ea48 g     F .text	0000005c Verif_Error
8110eaa4 g     F .text	0000002c toInt
8110f520 g     F .text	00000718 .hidden __muldf3
811117a8 g     F .text	00000054 __sread
8112485c g     F .text	00000108 alt_find_file
81124668 g     F .text	000000a4 alt_dev_llist_insert
8112090c g     F .text	00000024 __malloc_lock
81110060 g     F .text	00000028 _fprintf_r
81120d44 g     F .text	000000b0 sbrk
811118e4 g     F .text	000021d8 ___svfprintf_internal_r
81117a38 g     F .text	0000005c _fflush_r
8111cf54 g     F .text	000000c4 _calloc_r
8110b728 g     F .text	0000003c ucSyncStatusCycleNumber
81106df4 g     F .text	00000084 bRmapGetCodecConfig
811049c0 g     F .text	00000038 vFeebCh5HandleIrq
81110048 g     F .text	00000018 fopen
81128c04 g       *ABS*	00000000 __bss_start
81105164 g     F .text	000000cc bFeebCh4SetBufferSize
81111290 g     F .text	00000128 memset
811241f8 g     F .text	00000058 alt_msgdma_open
8110c31c g     F .text	00002030 main
81106514 g     F .text	0000003c vRmapCh8IrqFlagClrWriteCmd
81106640 g     F .text	00000050 bRmapCh4IrqFlagWriteCmd
81128ca4 g     O .bss	00000004 alt_envp
81128c80 g     O .bss	00000004 __malloc_max_total_mem
81123b1c g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
811212b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
811028c4 g     F .text	000002c0 POWER_Read
81109e08 g     F .text	00000158 i2c_read
8111d464 g     F .text	00000018 __swbuf
81129b3c g     O .bss	00000190 xComm8
8110965c g     F .text	00000034 bDisableIsoDrivers
81105b08 g     F .text	00000060 bFeebGetCh1RightBufferEmpty
811118dc g     F .text	00000008 __sclose
811fa000 g       *ABS*	00000000 __alt_heap_limit
8111d108 g     F .text	00000014 fclose
8110fd48 g     F .text	000001a8 .hidden __truncdfsf2
81104428 g     F .text	000000bc bDpktGetPacketHeader
811061b0 g     F .text	00000038 vRmapCh1HandleIrq
81116194 g     F .text	00001688 _dtoa_r
81123e20 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8111093c g     F .text	0000080c _malloc_r
8111d5d8 g     F .text	00000030 __ascii_wctomb
81128be8 g     O .rwdata	00000004 alt_errno
81123974 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81109128 g     F .text	000000dc bSpwcGetLink
8110aa1c g     F .text	000004e0 POWER_SPI_RW
81118800 g     F .text	000000c4 _fwalk
81128c10 g     O .bss	00000004 ECommSpwCh
81125278 g     F .text	000000c8 putc
8111e114 g     F .text	00000084 .hidden __divsi3
81117f10 g     F .text	00000124 _malloc_trim_r
81108b6c g     F .text	0000019c bRmapInitCh
8112560c g       *ABS*	00000000 __CTOR_END__
8110ef10 g     F .text	000003fc .hidden __mulsf3
81128c68 g     O .bss	00000004 pnt_memory
8110b7d4 g     F .text	00000038 bSyncSetPer
8110027c g     F .text	00000508 bDdr2EepromTest
8110c098 g     F .text	0000006c bSyncIrqFlagClrError
8111a38c g     F .text	000000dc strcmp
8112560c g       *ABS*	00000000 __DTOR_LIST__
8110e6fc g     F .text	00000050 _reg_read
8111f45c g     F .text	00000088 .hidden __nedf2
8110bee8 g     F .text	0000006c bSyncCtrCh7OutEnable
81121130 g     F .text	00000038 alt_irq_init
81120ce0 g     F .text	00000064 alt_release_fd
8110c104 g     F .text	0000006c bSyncIrqFlagClrBlank
81124488 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8110b570 g     F .text	00000024 vSyncClearCounter
8111173c g     F .text	0000006c sprintf
811269a0 g     O .rodata	00000100 .hidden __clz_tab
811014e0 g     F .text	00000574 bDdr2MemoryWriteTest
81128c8c g     O .bss	00000004 _PathLocale
8110c1c0 g     F .text	00000050 bSyncIrqFlagBlank
8110a8ec g     F .text	000000b8 iMsgdmaConstructExtendedMmToMmDescriptor
81108d54 g     F .text	00000048 uliRmapReadReg
8110c2cc g     F .text	00000050 uliSyncReadReg
81125110 g     F .text	00000014 atexit
81104950 g     F .text	00000038 vFeebCh3HandleIrq
81115d8c g     F .text	00000060 _write_r
8110af60 g     F .text	0000006c vRstcReleaseDeviceReset
81118a94 g     F .text	00000018 setlocale
811238dc g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
81128bc0 g     O .rwdata	00000004 _impure_ptr
81128c9c g     O .bss	00000004 alt_argc
8111781c g     F .text	0000021c __sflush_r
811093b8 g     F .text	00000088 bSpwcGetTimecode
8112476c g     F .text	00000060 _do_dtors
81118a80 g     F .text	00000008 __locale_cjk_lang
81102cb4 g     F .text	00000784 sense_log
81128c14 g     O .bss	00000004 ESdmaBufferSide
811100ac g     F .text	00000004 _fseek_r
81111434 g     F .text	000001d4 __srefill_r
81109690 g     F .text	00000034 bEnableLvdsBoard
811061e8 g     F .text	00000038 vRmapCh2HandleIrq
811096f8 g     F .text	000000b8 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
8110ba54 g     F .text	00000070 bSyncCtrExtnIrq
81105b68 g     F .text	00000060 bFeebGetCh2LeftBufferEmpty
8111987c g     F .text	00000064 __ulp
81117e4c g     F .text	00000018 __fp_unlock_all
8110e34c g     F .text	00000360 vTestLeds
8110ba1c g     F .text	00000038 bSyncErrInj
81128bd4 g     O .rwdata	00000008 alt_fs_list
81128ddc g     O .bss	00000400 xSZData
81129ccc g     O .bss	00000190 xComm4
81103438 g     F .text	000000a8 bSdmaInitM1Dma
8110c02c g     F .text	0000006c bSyncIrqEnableBlank
81104eb0 g     F .text	00000050 bFeebCh8IrqFlagBufferEmpty
81118aac g     F .text	0000000c localeconv
811048e0 g     F .text	00000038 vFeebCh1HandleIrq
81104a30 g     F .text	00000038 vFeebCh7HandleIrq
81128c18 g     O .bss	00000004 ECommBufferSide
81124a08 g     F .text	00000050 alt_ic_isr_register
81106220 g     F .text	00000038 vRmapCh3HandleIrq
81110654 g     F .text	00000034 fwrite
81128c04 g       *ABS*	00000000 _edata
81121dac g     F .text	00000060 altera_avalon_uart_read_fd
81129f5c g       *ABS*	00000000 _end
8110142c g     F .text	000000b4 bDdr2SwitchMemory
81105098 g     F .text	000000cc bFeebCh3SetBufferSize
8111d11c g     F .text	00000164 __fputwc
81121788 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
81106fd0 g     F .text	00000158 bRmapGetCodecError
81124ae0 g     F .text	0000008c alt_ic_irq_disable
81103588 g     F .text	00000480 bSdmaDmaM1Transfer
81111804 g     F .text	0000007c __swrite
81128bc8 g     O .rwdata	00000004 __malloc_trim_threshold
81118a74 g     F .text	0000000c __locale_msgcharset
8110a9e0 g     F .text	0000003c iMsgdmaExtendedDescriptorSyncTransfer
81125124 g     F .text	00000038 exit
8110c170 g     F .text	00000050 bSyncIrqFlagError
811188c4 g     F .text	000000c4 _fwalk_reent
81123cb4 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8110f430 g     F .text	000000f0 .hidden __floatunsisf
81119680 g     F .text	000001fc __mdiff
81105560 g     F .text	00000174 vFeebInitIrq
811040e0 g     F .text	00000224 bDpktSetPacketConfig
8111e198 g     F .text	00000074 .hidden __modsi3
8110b980 g     F .text	00000034 uliSyncGetPer
811062c8 g     F .text	00000038 vRmapCh6HandleIrq
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
81117e28 g     F .text	00000004 __sfp_lock_release
811057a0 g     F .text	000000a4 bFeebGetIrqControl
81109fd8 g     F .text	00000070 bSetPainelLeds
81123454 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
81101a54 g     F .text	00000504 bDdr2MemoryReadTest
81107128 g     F .text	000002e4 bRmapSetMemConfigArea
8110bfc0 g     F .text	0000006c bSyncIrqEnableError
81104cd0 g     F .text	00000050 bFeebCh2IrqFlagBufferEmpty
8110b94c g     F .text	00000034 uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
81123334 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
81122230 g     F .text	00000054 altera_avalon_uart_close
8110ff54 g     F .text	000000f4 _fopen_r
811255d8 g     F .text	00000034 _exit
811059c8 g     F .text	00000070 bFeebGetLeftBufferEmpty
81124500 g     F .text	0000012c alt_alarm_start
81128c1c g     O .bss	00000004 ESdmaChBufferId
81106460 g     F .text	0000003c vRmapCh5IrqFlagClrWriteCmd
81110780 g     F .text	000001bc __smakebuf_r
81104d70 g     F .text	00000050 bFeebCh4IrqFlagBufferEmpty
81128bfc g     O .rwdata	00000008 alt_msgdma_list
8111a468 g     F .text	00000098 strlen
8110b1d4 g     F .text	000000ac uc_spi_get_byte
8110649c g     F .text	0000003c vRmapCh6IrqFlagClrWriteCmd
81120a54 g     F .text	00000154 open
811083a8 g     F .text	000007c4 bRmapGetRmapMemHKArea
8111f4e4 g     F .text	000000dc .hidden __gedf2
81125014 g     F .text	0000003c alt_putchar
81128bd0 g     O .rwdata	00000004 __wctomb
8111ba08 g     F .text	00000018 __sprint_r
81105844 g     F .text	00000080 bFeebGetIrqFlags
81128c0c g     O .bss	00000004 pxDmaM2Dev
81128bec g     O .rwdata	00000004 alt_priority_mask
811096c4 g     F .text	00000034 bDisableLvdsBoard
81104fcc g     F .text	000000cc bFeebCh2SetBufferSize
8110b118 g     F .text	000000bc v_spi_send_byte
8110b42c g     F .text	000000c8 bSSDisplayConfig
81124a58 g     F .text	00000088 alt_ic_irq_enable
81115cb4 g     F .text	0000001c __vfprintf_internal
8110bccc g     F .text	0000006c bSyncCtrCh2OutEnable
811222c0 g     F .text	000001dc altera_avalon_uart_read
8111d608 g     F .text	0000005c _wctomb_r
81104b18 g     F .text	0000003c vFeebCh3IrqFlagClrBufferEmpty
8111f6b4 g     F .text	000008fc .hidden __subdf3
8110b9b4 g     F .text	00000034 uliSyncGetOst
81106338 g     F .text	00000038 vRmapCh8HandleIrq
81104bcc g     F .text	0000003c vFeebCh6IrqFlagClrBufferEmpty
81103f78 g     F .text	000000d4 bCommInitCh
811190b4 g     F .text	000000b0 __lo0bits
81128bf4 g     O .rwdata	00000008 alt_alarm_list
8112470c g     F .text	00000060 _do_ctors
81106370 g     F .text	0000003c vRmapCh1IrqFlagClrWriteCmd
8111d518 g     F .text	000000c0 wcrtomb
811044e4 g     F .text	00000140 bDpktSetPixelDelay
81120318 g     F .text	000000d0 close
8110b9e8 g     F .text	00000034 uliSyncGetGeneral
811065a0 g     F .text	00000050 bRmapCh2IrqFlagWriteCmd
81106980 g     F .text	00000048 uliRmapCh7WriteCmdAddress
81105e20 g     F .text	00000080 bFeebStartCh
8111d2a4 g     F .text	00000080 fputwc
81117e2c g     F .text	00000004 __sinit_lock_acquire
81118e28 g     F .text	00000120 __multadd
81104c08 g     F .text	0000003c vFeebCh7IrqFlagClrBufferEmpty
8110b6a0 g     F .text	00000044 ucSyncStatusState
81118e00 g     F .text	00000028 _Bfree
8110b918 g     F .text	00000034 uliSyncGetMbt



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a044f4 	movhi	r2,33043
81100140:	10a79704 	addi	r2,r2,-24996
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a044f4 	movhi	r2,33043
81100158:	10a79704 	addi	r2,r2,-24996
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	0001883a 	nop
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a03f17 	ldw	r2,-32516(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a03f17 	ldw	r2,-32516(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100244:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110024c:	06a044f4 	movhi	gp,33043
    ori gp, gp, %lo(_gp)
81100250:	d682ed14 	ori	gp,gp,2996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
81100254:	00a044b4 	movhi	r2,33042
    ori r2, r2, %lo(__bss_start)
81100258:	10a30114 	ori	r2,r2,35844

    movhi r3, %hi(__bss_end)
8110025c:	00e044b4 	movhi	r3,33042
    ori r3, r3, %lo(__bss_end)
81100260:	18e7d714 	ori	r3,r3,40796

    beq r2, r3, 1f
81100264:	10c00326 	beq	r2,r3,81100274 <_start+0x30>

0:
    stw zero, (r2)
81100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100270:	10fffd36 	bltu	r2,r3,81100268 <__reset+0xfb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100274:	11208900 	call	81120890 <alt_main>

81100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100278:	003fff06 	br	81100278 <__reset+0xfb0e0278>

8110027c <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
8110027c:	defff604 	addi	sp,sp,-40
81100280:	dfc00915 	stw	ra,36(sp)
81100284:	df000815 	stw	fp,32(sp)
81100288:	df000804 	addi	fp,sp,32
8110028c:	2005883a 	mov	r2,r4
81100290:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
81100294:	00e044f4 	movhi	r3,33043
81100298:	18e33704 	addi	r3,r3,-29476
8110029c:	00a044b4 	movhi	r2,33042
811002a0:	10958304 	addi	r2,r2,22028
811002a4:	1009883a 	mov	r4,r2
811002a8:	00800884 	movi	r2,34
811002ac:	100d883a 	mov	r6,r2
811002b0:	200b883a 	mov	r5,r4
811002b4:	1809883a 	mov	r4,r3
811002b8:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
811002bc:	d0a03117 	ldw	r2,-32572(gp)
811002c0:	016044f4 	movhi	r5,33043
811002c4:	29633704 	addi	r5,r5,-29476
811002c8:	1009883a 	mov	r4,r2
811002cc:	11100880 	call	81110088 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002d0:	00bfe804 	movi	r2,-96
811002d4:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
811002d8:	00800044 	movi	r2,1
811002dc:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
811002e0:	e0bfff03 	ldbu	r2,-4(fp)
811002e4:	10000326 	beq	r2,zero,811002f4 <bDdr2EepromTest+0x78>
811002e8:	10800060 	cmpeqi	r2,r2,1
811002ec:	1000081e 	bne	r2,zero,81100310 <bDdr2EepromTest+0x94>
811002f0:	00000e06 	br	8110032c <bDdr2EepromTest+0xb0>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811002f4:	00a00034 	movhi	r2,32768
811002f8:	10827c04 	addi	r2,r2,2544
811002fc:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100300:	00a00034 	movhi	r2,32768
81100304:	10828004 	addi	r2,r2,2560
81100308:	e0bffb15 	stw	r2,-20(fp)
		break;
8110030c:	00001906 	br	81100374 <bDdr2EepromTest+0xf8>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100310:	00a00034 	movhi	r2,32768
81100314:	10825804 	addi	r2,r2,2400
81100318:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
8110031c:	00a00034 	movhi	r2,32768
81100320:	10825c04 	addi	r2,r2,2416
81100324:	e0bffb15 	stw	r2,-20(fp)
		break;
81100328:	00001206 	br	81100374 <bDdr2EepromTest+0xf8>
	default:
		bSuccess = FALSE;
8110032c:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81100330:	00e044f4 	movhi	r3,33043
81100334:	18e33704 	addi	r3,r3,-29476
81100338:	00a044b4 	movhi	r2,33042
8110033c:	10958c04 	addi	r2,r2,22064
81100340:	1009883a 	mov	r4,r2
81100344:	00800bc4 	movi	r2,47
81100348:	100d883a 	mov	r6,r2
8110034c:	200b883a 	mov	r5,r4
81100350:	1809883a 	mov	r4,r3
81100354:	11111480 	call	81111148 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81100358:	d0a03117 	ldw	r2,-32572(gp)
8110035c:	016044f4 	movhi	r5,33043
81100360:	29633704 	addi	r5,r5,-29476
81100364:	1009883a 	mov	r4,r2
81100368:	11100880 	call	81110088 <fprintf>
		;
#endif
		return bSuccess;
8110036c:	e0bff917 	ldw	r2,-28(fp)
81100370:	0000ff06 	br	81100770 <bDdr2EepromTest+0x4f4>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
81100374:	00e044f4 	movhi	r3,33043
81100378:	18e33704 	addi	r3,r3,-29476
8110037c:	00a044b4 	movhi	r2,33042
81100380:	10959804 	addi	r2,r2,22112
81100384:	1009883a 	mov	r4,r2
81100388:	008005c4 	movi	r2,23
8110038c:	100d883a 	mov	r6,r2
81100390:	200b883a 	mov	r5,r4
81100394:	1809883a 	mov	r4,r3
81100398:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
8110039c:	d0a03117 	ldw	r2,-32572(gp)
811003a0:	016044f4 	movhi	r5,33043
811003a4:	29633704 	addi	r5,r5,-29476
811003a8:	1009883a 	mov	r4,r2
811003ac:	11100880 	call	81110088 <fprintf>
#endif
	usleep(20 * 1000);
811003b0:	01138804 	movi	r4,20000
811003b4:	1120f980 	call	81120f98 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811003b8:	e03ffc15 	stw	zero,-16(fp)
811003bc:	00003306 	br	8110048c <bDdr2EepromTest+0x210>
		ucControlAddr = iI;
811003c0:	e0bffc17 	ldw	r2,-16(fp)
811003c4:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811003c8:	e0bffd03 	ldbu	r2,-12(fp)
811003cc:	10c03fcc 	andi	r3,r2,255
811003d0:	18c0201c 	xori	r3,r3,128
811003d4:	18ffe004 	addi	r3,r3,-128
811003d8:	e13ffd43 	ldbu	r4,-11(fp)
811003dc:	e0bffe04 	addi	r2,fp,-8
811003e0:	d8800015 	stw	r2,0(sp)
811003e4:	200f883a 	mov	r7,r4
811003e8:	180d883a 	mov	r6,r3
811003ec:	e17ffb17 	ldw	r5,-20(fp)
811003f0:	e13ffa17 	ldw	r4,-24(fp)
811003f4:	110997c0 	call	8110997c <I2C_Read>
811003f8:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
811003fc:	e0bff917 	ldw	r2,-28(fp)
81100400:	10001026 	beq	r2,zero,81100444 <bDdr2EepromTest+0x1c8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
81100404:	e0bffd43 	ldbu	r2,-11(fp)
81100408:	e0fffe03 	ldbu	r3,-8(fp)
8110040c:	18c03fcc 	andi	r3,r3,255
81100410:	180f883a 	mov	r7,r3
81100414:	100d883a 	mov	r6,r2
81100418:	016044b4 	movhi	r5,33042
8110041c:	29559e04 	addi	r5,r5,22136
81100420:	012044f4 	movhi	r4,33043
81100424:	21233704 	addi	r4,r4,-29476
81100428:	111173c0 	call	8111173c <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
8110042c:	d0a03117 	ldw	r2,-32572(gp)
81100430:	016044f4 	movhi	r5,33043
81100434:	29633704 	addi	r5,r5,-29476
81100438:	1009883a 	mov	r4,r2
8110043c:	11100880 	call	81110088 <fprintf>
81100440:	00000f06 	br	81100480 <bDdr2EepromTest+0x204>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
81100444:	00e044f4 	movhi	r3,33043
81100448:	18e33704 	addi	r3,r3,-29476
8110044c:	00a044b4 	movhi	r2,33042
81100450:	1095a304 	addi	r2,r2,22156
81100454:	1009883a 	mov	r4,r2
81100458:	008005c4 	movi	r2,23
8110045c:	100d883a 	mov	r6,r2
81100460:	200b883a 	mov	r5,r4
81100464:	1809883a 	mov	r4,r3
81100468:	11111480 	call	81111148 <memcpy>
			debug(fp, cDebugBuffer);
8110046c:	d0a03117 	ldw	r2,-32572(gp)
81100470:	016044f4 	movhi	r5,33043
81100474:	29633704 	addi	r5,r5,-29476
81100478:	1009883a 	mov	r4,r2
8110047c:	11100880 	call	81110088 <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100480:	e0bffc17 	ldw	r2,-16(fp)
81100484:	10800044 	addi	r2,r2,1
81100488:	e0bffc15 	stw	r2,-16(fp)
8110048c:	e0bffc17 	ldw	r2,-16(fp)
81100490:	10804008 	cmpgei	r2,r2,256
81100494:	1000021e 	bne	r2,zero,811004a0 <bDdr2EepromTest+0x224>
81100498:	e0bff917 	ldw	r2,-28(fp)
8110049c:	103fc81e 	bne	r2,zero,811003c0 <__reset+0xfb0e03c0>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
811004a0:	e0bff917 	ldw	r2,-28(fp)
811004a4:	10001026 	beq	r2,zero,811004e8 <bDdr2EepromTest+0x26c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
811004a8:	00e044f4 	movhi	r3,33043
811004ac:	18e33704 	addi	r3,r3,-29476
811004b0:	00a044b4 	movhi	r2,33042
811004b4:	1095a904 	addi	r2,r2,22180
811004b8:	1009883a 	mov	r4,r2
811004bc:	00800884 	movi	r2,34
811004c0:	100d883a 	mov	r6,r2
811004c4:	200b883a 	mov	r5,r4
811004c8:	1809883a 	mov	r4,r3
811004cc:	11111480 	call	81111148 <memcpy>
		debug(fp, cDebugBuffer);
811004d0:	d0a03117 	ldw	r2,-32572(gp)
811004d4:	016044f4 	movhi	r5,33043
811004d8:	29633704 	addi	r5,r5,-29476
811004dc:	1009883a 	mov	r4,r2
811004e0:	11100880 	call	81110088 <fprintf>
811004e4:	00000f06 	br	81100524 <bDdr2EepromTest+0x2a8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
811004e8:	00e044f4 	movhi	r3,33043
811004ec:	18e33704 	addi	r3,r3,-29476
811004f0:	00a044b4 	movhi	r2,33042
811004f4:	1095b204 	addi	r2,r2,22216
811004f8:	1009883a 	mov	r4,r2
811004fc:	008007c4 	movi	r2,31
81100500:	100d883a 	mov	r6,r2
81100504:	200b883a 	mov	r5,r4
81100508:	1809883a 	mov	r4,r3
8110050c:	11111480 	call	81111148 <memcpy>
		debug(fp, cDebugBuffer);
81100510:	d0a03117 	ldw	r2,-32572(gp)
81100514:	016044f4 	movhi	r5,33043
81100518:	29633704 	addi	r5,r5,-29476
8110051c:	1009883a 	mov	r4,r2
81100520:	11100880 	call	81110088 <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
81100524:	00e044f4 	movhi	r3,33043
81100528:	18e33704 	addi	r3,r3,-29476
8110052c:	00a044b4 	movhi	r2,33042
81100530:	1095ba04 	addi	r2,r2,22248
81100534:	1009883a 	mov	r4,r2
81100538:	00800604 	movi	r2,24
8110053c:	100d883a 	mov	r6,r2
81100540:	200b883a 	mov	r5,r4
81100544:	1809883a 	mov	r4,r3
81100548:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
8110054c:	d0a03117 	ldw	r2,-32572(gp)
81100550:	016044f4 	movhi	r5,33043
81100554:	29633704 	addi	r5,r5,-29476
81100558:	1009883a 	mov	r4,r2
8110055c:	11100880 	call	81110088 <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
81100560:	00800484 	movi	r2,18
81100564:	e0bffd85 	stb	r2,-10(fp)
81100568:	00bfe004 	movi	r2,-128
8110056c:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100570:	01138804 	movi	r4,20000
81100574:	1120f980 	call	81120f98 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100578:	e0bffd03 	ldbu	r2,-12(fp)
8110057c:	10c03fcc 	andi	r3,r2,255
81100580:	18c0201c 	xori	r3,r3,128
81100584:	18ffe004 	addi	r3,r3,-128
81100588:	e13ffdc3 	ldbu	r4,-9(fp)
8110058c:	e0bffd83 	ldbu	r2,-10(fp)
81100590:	d8800015 	stw	r2,0(sp)
81100594:	200f883a 	mov	r7,r4
81100598:	180d883a 	mov	r6,r3
8110059c:	e17ffb17 	ldw	r5,-20(fp)
811005a0:	e13ffa17 	ldw	r4,-24(fp)
811005a4:	11098a40 	call	811098a4 <I2C_Write>
811005a8:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
811005ac:	e0bff917 	ldw	r2,-28(fp)
811005b0:	1000101e 	bne	r2,zero,811005f4 <bDdr2EepromTest+0x378>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
811005b4:	00e044f4 	movhi	r3,33043
811005b8:	18e33704 	addi	r3,r3,-29476
811005bc:	00a044b4 	movhi	r2,33042
811005c0:	1095c004 	addi	r2,r2,22272
811005c4:	1009883a 	mov	r4,r2
811005c8:	00800604 	movi	r2,24
811005cc:	100d883a 	mov	r6,r2
811005d0:	200b883a 	mov	r5,r4
811005d4:	1809883a 	mov	r4,r3
811005d8:	11111480 	call	81111148 <memcpy>
		debug(fp, cDebugBuffer);
811005dc:	d0a03117 	ldw	r2,-32572(gp)
811005e0:	016044f4 	movhi	r5,33043
811005e4:	29633704 	addi	r5,r5,-29476
811005e8:	1009883a 	mov	r4,r2
811005ec:	11100880 	call	81110088 <fprintf>
811005f0:	00003306 	br	811006c0 <bDdr2EepromTest+0x444>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811005f4:	e0bffd03 	ldbu	r2,-12(fp)
811005f8:	10c03fcc 	andi	r3,r2,255
811005fc:	18c0201c 	xori	r3,r3,128
81100600:	18ffe004 	addi	r3,r3,-128
81100604:	e13ffdc3 	ldbu	r4,-9(fp)
81100608:	e0bffe44 	addi	r2,fp,-7
8110060c:	d8800015 	stw	r2,0(sp)
81100610:	200f883a 	mov	r7,r4
81100614:	180d883a 	mov	r6,r3
81100618:	e17ffb17 	ldw	r5,-20(fp)
8110061c:	e13ffa17 	ldw	r4,-24(fp)
81100620:	110997c0 	call	8110997c <I2C_Read>
81100624:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
81100628:	e0bff917 	ldw	r2,-28(fp)
8110062c:	1000101e 	bne	r2,zero,81100670 <bDdr2EepromTest+0x3f4>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
81100630:	00e044f4 	movhi	r3,33043
81100634:	18e33704 	addi	r3,r3,-29476
81100638:	00a044b4 	movhi	r2,33042
8110063c:	1095c604 	addi	r2,r2,22296
81100640:	1009883a 	mov	r4,r2
81100644:	00800884 	movi	r2,34
81100648:	100d883a 	mov	r6,r2
8110064c:	200b883a 	mov	r5,r4
81100650:	1809883a 	mov	r4,r3
81100654:	11111480 	call	81111148 <memcpy>
			debug(fp, cDebugBuffer);
81100658:	d0a03117 	ldw	r2,-32572(gp)
8110065c:	016044f4 	movhi	r5,33043
81100660:	29633704 	addi	r5,r5,-29476
81100664:	1009883a 	mov	r4,r2
81100668:	11100880 	call	81110088 <fprintf>
8110066c:	00001406 	br	811006c0 <bDdr2EepromTest+0x444>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100670:	e0bffe43 	ldbu	r2,-7(fp)
81100674:	10c03fcc 	andi	r3,r2,255
81100678:	e0bffd83 	ldbu	r2,-10(fp)
8110067c:	18801026 	beq	r3,r2,811006c0 <bDdr2EepromTest+0x444>
				bSuccess = FALSE;
81100680:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100684:	e0bffe43 	ldbu	r2,-7(fp)
81100688:	10803fcc 	andi	r2,r2,255
8110068c:	e0fffd83 	ldbu	r3,-10(fp)
81100690:	180f883a 	mov	r7,r3
81100694:	100d883a 	mov	r6,r2
81100698:	016044b4 	movhi	r5,33042
8110069c:	2955cf04 	addi	r5,r5,22332
811006a0:	012044f4 	movhi	r4,33043
811006a4:	21233704 	addi	r4,r4,-29476
811006a8:	111173c0 	call	8111173c <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
811006ac:	d0a03117 	ldw	r2,-32572(gp)
811006b0:	016044f4 	movhi	r5,33043
811006b4:	29633704 	addi	r5,r5,-29476
811006b8:	1009883a 	mov	r4,r2
811006bc:	11100880 	call	81110088 <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
811006c0:	e0bff917 	ldw	r2,-28(fp)
811006c4:	10001026 	beq	r2,zero,81100708 <bDdr2EepromTest+0x48c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
811006c8:	00e044f4 	movhi	r3,33043
811006cc:	18e33704 	addi	r3,r3,-29476
811006d0:	00a044b4 	movhi	r2,33042
811006d4:	1095de04 	addi	r2,r2,22392
811006d8:	1009883a 	mov	r4,r2
811006dc:	008008c4 	movi	r2,35
811006e0:	100d883a 	mov	r6,r2
811006e4:	200b883a 	mov	r5,r4
811006e8:	1809883a 	mov	r4,r3
811006ec:	11111480 	call	81111148 <memcpy>
		debug(fp, cDebugBuffer);
811006f0:	d0a03117 	ldw	r2,-32572(gp)
811006f4:	016044f4 	movhi	r5,33043
811006f8:	29633704 	addi	r5,r5,-29476
811006fc:	1009883a 	mov	r4,r2
81100700:	11100880 	call	81110088 <fprintf>
81100704:	00000f06 	br	81100744 <bDdr2EepromTest+0x4c8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
81100708:	00e044f4 	movhi	r3,33043
8110070c:	18e33704 	addi	r3,r3,-29476
81100710:	00a044b4 	movhi	r2,33042
81100714:	1095e704 	addi	r2,r2,22428
81100718:	1009883a 	mov	r4,r2
8110071c:	00800804 	movi	r2,32
81100720:	100d883a 	mov	r6,r2
81100724:	200b883a 	mov	r5,r4
81100728:	1809883a 	mov	r4,r3
8110072c:	11111480 	call	81111148 <memcpy>
		debug(fp, cDebugBuffer);
81100730:	d0a03117 	ldw	r2,-32572(gp)
81100734:	016044f4 	movhi	r5,33043
81100738:	29633704 	addi	r5,r5,-29476
8110073c:	1009883a 	mov	r4,r2
81100740:	11100880 	call	81110088 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81100744:	00a044f4 	movhi	r2,33043
81100748:	10a33704 	addi	r2,r2,-29476
8110074c:	00c00284 	movi	r3,10
81100750:	10c00005 	stb	r3,0(r2)
81100754:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81100758:	d0a03117 	ldw	r2,-32572(gp)
8110075c:	016044f4 	movhi	r5,33043
81100760:	29633704 	addi	r5,r5,-29476
81100764:	1009883a 	mov	r4,r2
81100768:	11100880 	call	81110088 <fprintf>
#endif

	return bSuccess;
8110076c:	e0bff917 	ldw	r2,-28(fp)
}
81100770:	e037883a 	mov	sp,fp
81100774:	dfc00117 	ldw	ra,4(sp)
81100778:	df000017 	ldw	fp,0(sp)
8110077c:	dec00204 	addi	sp,sp,8
81100780:	f800283a 	ret

81100784 <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
81100784:	deffb704 	addi	sp,sp,-292
81100788:	dfc04815 	stw	ra,288(sp)
8110078c:	df004715 	stw	fp,284(sp)
81100790:	df004704 	addi	fp,sp,284
81100794:	2005883a 	mov	r2,r4
81100798:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
8110079c:	00e044f4 	movhi	r3,33043
811007a0:	18e33704 	addi	r3,r3,-29476
811007a4:	00a044b4 	movhi	r2,33042
811007a8:	1095ef04 	addi	r2,r2,22460
811007ac:	1009883a 	mov	r4,r2
811007b0:	00800884 	movi	r2,34
811007b4:	100d883a 	mov	r6,r2
811007b8:	200b883a 	mov	r5,r4
811007bc:	1809883a 	mov	r4,r3
811007c0:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
811007c4:	d0a03117 	ldw	r2,-32572(gp)
811007c8:	016044f4 	movhi	r5,33043
811007cc:	29633704 	addi	r5,r5,-29476
811007d0:	1009883a 	mov	r4,r2
811007d4:	11100880 	call	81110088 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811007d8:	00bfe804 	movi	r2,-96
811007dc:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
811007e0:	00800044 	movi	r2,1
811007e4:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
811007e8:	e0bfff03 	ldbu	r2,-4(fp)
811007ec:	10000326 	beq	r2,zero,811007fc <bDdr2EepromDump+0x78>
811007f0:	10800060 	cmpeqi	r2,r2,1
811007f4:	1000081e 	bne	r2,zero,81100818 <bDdr2EepromDump+0x94>
811007f8:	00000e06 	br	81100834 <bDdr2EepromDump+0xb0>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811007fc:	00a00034 	movhi	r2,32768
81100800:	10827c04 	addi	r2,r2,2544
81100804:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100808:	00a00034 	movhi	r2,32768
8110080c:	10828004 	addi	r2,r2,2560
81100810:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100814:	00001906 	br	8110087c <bDdr2EepromDump+0xf8>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100818:	00a00034 	movhi	r2,32768
8110081c:	10825804 	addi	r2,r2,2400
81100820:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100824:	00a00034 	movhi	r2,32768
81100828:	10825c04 	addi	r2,r2,2416
8110082c:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100830:	00001206 	br	8110087c <bDdr2EepromDump+0xf8>
	default:
		bSuccess = FALSE;
81100834:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81100838:	00e044f4 	movhi	r3,33043
8110083c:	18e33704 	addi	r3,r3,-29476
81100840:	00a044b4 	movhi	r2,33042
81100844:	1095f804 	addi	r2,r2,22496
81100848:	1009883a 	mov	r4,r2
8110084c:	00800bc4 	movi	r2,47
81100850:	100d883a 	mov	r6,r2
81100854:	200b883a 	mov	r5,r4
81100858:	1809883a 	mov	r4,r3
8110085c:	11111480 	call	81111148 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100860:	d0a03117 	ldw	r2,-32572(gp)
81100864:	016044f4 	movhi	r5,33043
81100868:	29633704 	addi	r5,r5,-29476
8110086c:	1009883a 	mov	r4,r2
81100870:	11100880 	call	81110088 <fprintf>
		;
#endif
		return bSuccess;
81100874:	e0bfbe17 	ldw	r2,-264(fp)
81100878:	0002e706 	br	81101418 <bDdr2EepromDump+0xc94>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110087c:	e0bfbd03 	ldbu	r2,-268(fp)
81100880:	10c03fcc 	andi	r3,r2,255
81100884:	18c0201c 	xori	r3,r3,128
81100888:	18ffe004 	addi	r3,r3,-128
8110088c:	e13fbf04 	addi	r4,fp,-260
81100890:	00804004 	movi	r2,256
81100894:	d8800015 	stw	r2,0(sp)
81100898:	200f883a 	mov	r7,r4
8110089c:	180d883a 	mov	r6,r3
811008a0:	e17fbb17 	ldw	r5,-276(fp)
811008a4:	e13fba17 	ldw	r4,-280(fp)
811008a8:	1109a7c0 	call	81109a7c <I2C_MultipleRead>
811008ac:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
811008b0:	e0bfbe17 	ldw	r2,-264(fp)
811008b4:	1002be26 	beq	r2,zero,811013b0 <bDdr2EepromDump+0xc2c>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811008b8:	e03fbc15 	stw	zero,-272(fp)
811008bc:	0002b606 	br	81101398 <bDdr2EepromDump+0xc14>
			if (iI == 0) {
811008c0:	e0bfbc17 	ldw	r2,-272(fp)
811008c4:	1000121e 	bne	r2,zero,81100910 <bDdr2EepromDump+0x18c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
811008c8:	e0ffbf04 	addi	r3,fp,-260
811008cc:	e0bfbc17 	ldw	r2,-272(fp)
811008d0:	1885883a 	add	r2,r3,r2
811008d4:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811008d8:	10803fcc 	andi	r2,r2,255
811008dc:	100f883a 	mov	r7,r2
811008e0:	e1bfbc17 	ldw	r6,-272(fp)
811008e4:	016044b4 	movhi	r5,33042
811008e8:	29560404 	addi	r5,r5,22544
811008ec:	012044f4 	movhi	r4,33043
811008f0:	21233704 	addi	r4,r4,-29476
811008f4:	111173c0 	call	8111173c <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
811008f8:	d0a03117 	ldw	r2,-32572(gp)
811008fc:	016044f4 	movhi	r5,33043
81100900:	29633704 	addi	r5,r5,-29476
81100904:	1009883a 	mov	r4,r2
81100908:	11100880 	call	81110088 <fprintf>
8110090c:	00029f06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 1) {
81100910:	e0bfbc17 	ldw	r2,-272(fp)
81100914:	10800058 	cmpnei	r2,r2,1
81100918:	1000101e 	bne	r2,zero,8110095c <bDdr2EepromDump+0x1d8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110091c:	00e044f4 	movhi	r3,33043
81100920:	18e33704 	addi	r3,r3,-29476
81100924:	00a044b4 	movhi	r2,33042
81100928:	10961004 	addi	r2,r2,22592
8110092c:	1009883a 	mov	r4,r2
81100930:	00800c04 	movi	r2,48
81100934:	100d883a 	mov	r6,r2
81100938:	200b883a 	mov	r5,r4
8110093c:	1809883a 	mov	r4,r3
81100940:	11111480 	call	81111148 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
81100944:	d0a03117 	ldw	r2,-32572(gp)
81100948:	016044f4 	movhi	r5,33043
8110094c:	29633704 	addi	r5,r5,-29476
81100950:	1009883a 	mov	r4,r2
81100954:	11100880 	call	81110088 <fprintf>
81100958:	00028c06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 2) {
8110095c:	e0bfbc17 	ldw	r2,-272(fp)
81100960:	10800098 	cmpnei	r2,r2,2
81100964:	1000101e 	bne	r2,zero,811009a8 <bDdr2EepromDump+0x224>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
81100968:	00e044f4 	movhi	r3,33043
8110096c:	18e33704 	addi	r3,r3,-29476
81100970:	00a044b4 	movhi	r2,33042
81100974:	10961c04 	addi	r2,r2,22640
81100978:	1009883a 	mov	r4,r2
8110097c:	008007c4 	movi	r2,31
81100980:	100d883a 	mov	r6,r2
81100984:	200b883a 	mov	r5,r4
81100988:	1809883a 	mov	r4,r3
8110098c:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
81100990:	d0a03117 	ldw	r2,-32572(gp)
81100994:	016044f4 	movhi	r5,33043
81100998:	29633704 	addi	r5,r5,-29476
8110099c:	1009883a 	mov	r4,r2
811009a0:	11100880 	call	81110088 <fprintf>
811009a4:	00027906 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 3) {
811009a8:	e0bfbc17 	ldw	r2,-272(fp)
811009ac:	108000d8 	cmpnei	r2,r2,3
811009b0:	1000101e 	bne	r2,zero,811009f4 <bDdr2EepromDump+0x270>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009b4:	00e044f4 	movhi	r3,33043
811009b8:	18e33704 	addi	r3,r3,-29476
811009bc:	00a044b4 	movhi	r2,33042
811009c0:	10962404 	addi	r2,r2,22672
811009c4:	1009883a 	mov	r4,r2
811009c8:	008009c4 	movi	r2,39
811009cc:	100d883a 	mov	r6,r2
811009d0:	200b883a 	mov	r5,r4
811009d4:	1809883a 	mov	r4,r3
811009d8:	11111480 	call	81111148 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
811009dc:	d0a03117 	ldw	r2,-32572(gp)
811009e0:	016044f4 	movhi	r5,33043
811009e4:	29633704 	addi	r5,r5,-29476
811009e8:	1009883a 	mov	r4,r2
811009ec:	11100880 	call	81110088 <fprintf>
811009f0:	00026606 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 4) {
811009f4:	e0bfbc17 	ldw	r2,-272(fp)
811009f8:	10800118 	cmpnei	r2,r2,4
811009fc:	1000101e 	bne	r2,zero,81100a40 <bDdr2EepromDump+0x2bc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a00:	00e044f4 	movhi	r3,33043
81100a04:	18e33704 	addi	r3,r3,-29476
81100a08:	00a044b4 	movhi	r2,33042
81100a0c:	10962e04 	addi	r2,r2,22712
81100a10:	1009883a 	mov	r4,r2
81100a14:	00800a84 	movi	r2,42
81100a18:	100d883a 	mov	r6,r2
81100a1c:	200b883a 	mov	r5,r4
81100a20:	1809883a 	mov	r4,r3
81100a24:	11111480 	call	81111148 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a28:	d0a03117 	ldw	r2,-32572(gp)
81100a2c:	016044f4 	movhi	r5,33043
81100a30:	29633704 	addi	r5,r5,-29476
81100a34:	1009883a 	mov	r4,r2
81100a38:	11100880 	call	81110088 <fprintf>
81100a3c:	00025306 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 5) {
81100a40:	e0bfbc17 	ldw	r2,-272(fp)
81100a44:	10800158 	cmpnei	r2,r2,5
81100a48:	1000101e 	bne	r2,zero,81100a8c <bDdr2EepromDump+0x308>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a4c:	00e044f4 	movhi	r3,33043
81100a50:	18e33704 	addi	r3,r3,-29476
81100a54:	00a044b4 	movhi	r2,33042
81100a58:	10963904 	addi	r2,r2,22756
81100a5c:	1009883a 	mov	r4,r2
81100a60:	00800c04 	movi	r2,48
81100a64:	100d883a 	mov	r6,r2
81100a68:	200b883a 	mov	r5,r4
81100a6c:	1809883a 	mov	r4,r3
81100a70:	11111480 	call	81111148 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100a74:	d0a03117 	ldw	r2,-32572(gp)
81100a78:	016044f4 	movhi	r5,33043
81100a7c:	29633704 	addi	r5,r5,-29476
81100a80:	1009883a 	mov	r4,r2
81100a84:	11100880 	call	81110088 <fprintf>
81100a88:	00024006 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 6) {
81100a8c:	e0bfbc17 	ldw	r2,-272(fp)
81100a90:	10800198 	cmpnei	r2,r2,6
81100a94:	1000101e 	bne	r2,zero,81100ad8 <bDdr2EepromDump+0x354>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100a98:	00e044f4 	movhi	r3,33043
81100a9c:	18e33704 	addi	r3,r3,-29476
81100aa0:	00a044b4 	movhi	r2,33042
81100aa4:	10964504 	addi	r2,r2,22804
81100aa8:	1009883a 	mov	r4,r2
81100aac:	00800544 	movi	r2,21
81100ab0:	100d883a 	mov	r6,r2
81100ab4:	200b883a 	mov	r5,r4
81100ab8:	1809883a 	mov	r4,r3
81100abc:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
81100ac0:	d0a03117 	ldw	r2,-32572(gp)
81100ac4:	016044f4 	movhi	r5,33043
81100ac8:	29633704 	addi	r5,r5,-29476
81100acc:	1009883a 	mov	r4,r2
81100ad0:	11100880 	call	81110088 <fprintf>
81100ad4:	00022d06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 7) {
81100ad8:	e0bfbc17 	ldw	r2,-272(fp)
81100adc:	108001d8 	cmpnei	r2,r2,7
81100ae0:	1000101e 	bne	r2,zero,81100b24 <bDdr2EepromDump+0x3a0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100ae4:	00e044f4 	movhi	r3,33043
81100ae8:	18e33704 	addi	r3,r3,-29476
81100aec:	00a044b4 	movhi	r2,33042
81100af0:	10964b04 	addi	r2,r2,22828
81100af4:	1009883a 	mov	r4,r2
81100af8:	00800804 	movi	r2,32
81100afc:	100d883a 	mov	r6,r2
81100b00:	200b883a 	mov	r5,r4
81100b04:	1809883a 	mov	r4,r3
81100b08:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
81100b0c:	d0a03117 	ldw	r2,-32572(gp)
81100b10:	016044f4 	movhi	r5,33043
81100b14:	29633704 	addi	r5,r5,-29476
81100b18:	1009883a 	mov	r4,r2
81100b1c:	11100880 	call	81110088 <fprintf>
81100b20:	00021a06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 16) {
81100b24:	e0bfbc17 	ldw	r2,-272(fp)
81100b28:	10800418 	cmpnei	r2,r2,16
81100b2c:	1000101e 	bne	r2,zero,81100b70 <bDdr2EepromDump+0x3ec>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100b30:	00e044f4 	movhi	r3,33043
81100b34:	18e33704 	addi	r3,r3,-29476
81100b38:	00a044b4 	movhi	r2,33042
81100b3c:	10965304 	addi	r2,r2,22860
81100b40:	1009883a 	mov	r4,r2
81100b44:	00800d04 	movi	r2,52
81100b48:	100d883a 	mov	r6,r2
81100b4c:	200b883a 	mov	r5,r4
81100b50:	1809883a 	mov	r4,r3
81100b54:	11111480 	call	81111148 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100b58:	d0a03117 	ldw	r2,-32572(gp)
81100b5c:	016044f4 	movhi	r5,33043
81100b60:	29633704 	addi	r5,r5,-29476
81100b64:	1009883a 	mov	r4,r2
81100b68:	11100880 	call	81110088 <fprintf>
81100b6c:	00020706 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 13) {
81100b70:	e0bfbc17 	ldw	r2,-272(fp)
81100b74:	10800358 	cmpnei	r2,r2,13
81100b78:	1000101e 	bne	r2,zero,81100bbc <bDdr2EepromDump+0x438>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100b7c:	00e044f4 	movhi	r3,33043
81100b80:	18e33704 	addi	r3,r3,-29476
81100b84:	00a044b4 	movhi	r2,33042
81100b88:	10966004 	addi	r2,r2,22912
81100b8c:	1009883a 	mov	r4,r2
81100b90:	008005c4 	movi	r2,23
81100b94:	100d883a 	mov	r6,r2
81100b98:	200b883a 	mov	r5,r4
81100b9c:	1809883a 	mov	r4,r3
81100ba0:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
81100ba4:	d0a03117 	ldw	r2,-32572(gp)
81100ba8:	016044f4 	movhi	r5,33043
81100bac:	29633704 	addi	r5,r5,-29476
81100bb0:	1009883a 	mov	r4,r2
81100bb4:	11100880 	call	81110088 <fprintf>
81100bb8:	0001f406 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 14) {
81100bbc:	e0bfbc17 	ldw	r2,-272(fp)
81100bc0:	10800398 	cmpnei	r2,r2,14
81100bc4:	1000101e 	bne	r2,zero,81100c08 <bDdr2EepromDump+0x484>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100bc8:	00e044f4 	movhi	r3,33043
81100bcc:	18e33704 	addi	r3,r3,-29476
81100bd0:	00a044b4 	movhi	r2,33042
81100bd4:	10966604 	addi	r2,r2,22936
81100bd8:	1009883a 	mov	r4,r2
81100bdc:	008004c4 	movi	r2,19
81100be0:	100d883a 	mov	r6,r2
81100be4:	200b883a 	mov	r5,r4
81100be8:	1809883a 	mov	r4,r3
81100bec:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
81100bf0:	d0a03117 	ldw	r2,-32572(gp)
81100bf4:	016044f4 	movhi	r5,33043
81100bf8:	29633704 	addi	r5,r5,-29476
81100bfc:	1009883a 	mov	r4,r2
81100c00:	11100880 	call	81110088 <fprintf>
81100c04:	0001e106 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 17) {
81100c08:	e0bfbc17 	ldw	r2,-272(fp)
81100c0c:	10800458 	cmpnei	r2,r2,17
81100c10:	1000101e 	bne	r2,zero,81100c54 <bDdr2EepromDump+0x4d0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100c14:	00e044f4 	movhi	r3,33043
81100c18:	18e33704 	addi	r3,r3,-29476
81100c1c:	00a044b4 	movhi	r2,33042
81100c20:	10966b04 	addi	r2,r2,22956
81100c24:	1009883a 	mov	r4,r2
81100c28:	00800684 	movi	r2,26
81100c2c:	100d883a 	mov	r6,r2
81100c30:	200b883a 	mov	r5,r4
81100c34:	1809883a 	mov	r4,r3
81100c38:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
81100c3c:	d0a03117 	ldw	r2,-32572(gp)
81100c40:	016044f4 	movhi	r5,33043
81100c44:	29633704 	addi	r5,r5,-29476
81100c48:	1009883a 	mov	r4,r2
81100c4c:	11100880 	call	81110088 <fprintf>
81100c50:	0001ce06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 18) {
81100c54:	e0bfbc17 	ldw	r2,-272(fp)
81100c58:	10800498 	cmpnei	r2,r2,18
81100c5c:	1000101e 	bne	r2,zero,81100ca0 <bDdr2EepromDump+0x51c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100c60:	00e044f4 	movhi	r3,33043
81100c64:	18e33704 	addi	r3,r3,-29476
81100c68:	00a044b4 	movhi	r2,33042
81100c6c:	10967204 	addi	r2,r2,22984
81100c70:	1009883a 	mov	r4,r2
81100c74:	00800d44 	movi	r2,53
81100c78:	100d883a 	mov	r6,r2
81100c7c:	200b883a 	mov	r5,r4
81100c80:	1809883a 	mov	r4,r3
81100c84:	11111480 	call	81111148 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100c88:	d0a03117 	ldw	r2,-32572(gp)
81100c8c:	016044f4 	movhi	r5,33043
81100c90:	29633704 	addi	r5,r5,-29476
81100c94:	1009883a 	mov	r4,r2
81100c98:	11100880 	call	81110088 <fprintf>
81100c9c:	0001bb06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 20) {
81100ca0:	e0bfbc17 	ldw	r2,-272(fp)
81100ca4:	10800518 	cmpnei	r2,r2,20
81100ca8:	1000101e 	bne	r2,zero,81100cec <bDdr2EepromDump+0x568>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100cac:	00e044f4 	movhi	r3,33043
81100cb0:	18e33704 	addi	r3,r3,-29476
81100cb4:	00a044b4 	movhi	r2,33042
81100cb8:	10968004 	addi	r2,r2,23040
81100cbc:	1009883a 	mov	r4,r2
81100cc0:	00801204 	movi	r2,72
81100cc4:	100d883a 	mov	r6,r2
81100cc8:	200b883a 	mov	r5,r4
81100ccc:	1809883a 	mov	r4,r3
81100cd0:	11111480 	call	81111148 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100cd4:	d0a03117 	ldw	r2,-32572(gp)
81100cd8:	016044f4 	movhi	r5,33043
81100cdc:	29633704 	addi	r5,r5,-29476
81100ce0:	1009883a 	mov	r4,r2
81100ce4:	11100880 	call	81110088 <fprintf>
81100ce8:	0001a806 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 22) {
81100cec:	e0bfbc17 	ldw	r2,-272(fp)
81100cf0:	10800598 	cmpnei	r2,r2,22
81100cf4:	1000101e 	bne	r2,zero,81100d38 <bDdr2EepromDump+0x5b4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100cf8:	00e044f4 	movhi	r3,33043
81100cfc:	18e33704 	addi	r3,r3,-29476
81100d00:	00a044b4 	movhi	r2,33042
81100d04:	10969204 	addi	r2,r2,23112
81100d08:	1009883a 	mov	r4,r2
81100d0c:	00800784 	movi	r2,30
81100d10:	100d883a 	mov	r6,r2
81100d14:	200b883a 	mov	r5,r4
81100d18:	1809883a 	mov	r4,r3
81100d1c:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
81100d20:	d0a03117 	ldw	r2,-32572(gp)
81100d24:	016044f4 	movhi	r5,33043
81100d28:	29633704 	addi	r5,r5,-29476
81100d2c:	1009883a 	mov	r4,r2
81100d30:	11100880 	call	81110088 <fprintf>
81100d34:	00019506 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 27) {
81100d38:	e0bfbc17 	ldw	r2,-272(fp)
81100d3c:	108006d8 	cmpnei	r2,r2,27
81100d40:	1000101e 	bne	r2,zero,81100d84 <bDdr2EepromDump+0x600>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d44:	00e044f4 	movhi	r3,33043
81100d48:	18e33704 	addi	r3,r3,-29476
81100d4c:	00a044b4 	movhi	r2,33042
81100d50:	10969a04 	addi	r2,r2,23144
81100d54:	1009883a 	mov	r4,r2
81100d58:	00800a04 	movi	r2,40
81100d5c:	100d883a 	mov	r6,r2
81100d60:	200b883a 	mov	r5,r4
81100d64:	1809883a 	mov	r4,r3
81100d68:	11111480 	call	81111148 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100d6c:	d0a03117 	ldw	r2,-32572(gp)
81100d70:	016044f4 	movhi	r5,33043
81100d74:	29633704 	addi	r5,r5,-29476
81100d78:	1009883a 	mov	r4,r2
81100d7c:	11100880 	call	81110088 <fprintf>
81100d80:	00018206 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 28) {
81100d84:	e0bfbc17 	ldw	r2,-272(fp)
81100d88:	10800718 	cmpnei	r2,r2,28
81100d8c:	1000101e 	bne	r2,zero,81100dd0 <bDdr2EepromDump+0x64c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d90:	00e044f4 	movhi	r3,33043
81100d94:	18e33704 	addi	r3,r3,-29476
81100d98:	00a044b4 	movhi	r2,33042
81100d9c:	1096a404 	addi	r2,r2,23184
81100da0:	1009883a 	mov	r4,r2
81100da4:	00800cc4 	movi	r2,51
81100da8:	100d883a 	mov	r6,r2
81100dac:	200b883a 	mov	r5,r4
81100db0:	1809883a 	mov	r4,r3
81100db4:	11111480 	call	81111148 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100db8:	d0a03117 	ldw	r2,-32572(gp)
81100dbc:	016044f4 	movhi	r5,33043
81100dc0:	29633704 	addi	r5,r5,-29476
81100dc4:	1009883a 	mov	r4,r2
81100dc8:	11100880 	call	81110088 <fprintf>
81100dcc:	00016f06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 29) {
81100dd0:	e0bfbc17 	ldw	r2,-272(fp)
81100dd4:	10800758 	cmpnei	r2,r2,29
81100dd8:	1000101e 	bne	r2,zero,81100e1c <bDdr2EepromDump+0x698>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ddc:	00e044f4 	movhi	r3,33043
81100de0:	18e33704 	addi	r3,r3,-29476
81100de4:	00a044b4 	movhi	r2,33042
81100de8:	1096b104 	addi	r2,r2,23236
81100dec:	1009883a 	mov	r4,r2
81100df0:	008009c4 	movi	r2,39
81100df4:	100d883a 	mov	r6,r2
81100df8:	200b883a 	mov	r5,r4
81100dfc:	1809883a 	mov	r4,r3
81100e00:	11111480 	call	81111148 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e04:	d0a03117 	ldw	r2,-32572(gp)
81100e08:	016044f4 	movhi	r5,33043
81100e0c:	29633704 	addi	r5,r5,-29476
81100e10:	1009883a 	mov	r4,r2
81100e14:	11100880 	call	81110088 <fprintf>
81100e18:	00015c06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 30) {
81100e1c:	e0bfbc17 	ldw	r2,-272(fp)
81100e20:	10800798 	cmpnei	r2,r2,30
81100e24:	1000101e 	bne	r2,zero,81100e68 <bDdr2EepromDump+0x6e4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e28:	00e044f4 	movhi	r3,33043
81100e2c:	18e33704 	addi	r3,r3,-29476
81100e30:	00a044b4 	movhi	r2,33042
81100e34:	1096bb04 	addi	r2,r2,23276
81100e38:	1009883a 	mov	r4,r2
81100e3c:	00800b04 	movi	r2,44
81100e40:	100d883a 	mov	r6,r2
81100e44:	200b883a 	mov	r5,r4
81100e48:	1809883a 	mov	r4,r3
81100e4c:	11111480 	call	81111148 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100e50:	d0a03117 	ldw	r2,-32572(gp)
81100e54:	016044f4 	movhi	r5,33043
81100e58:	29633704 	addi	r5,r5,-29476
81100e5c:	1009883a 	mov	r4,r2
81100e60:	11100880 	call	81110088 <fprintf>
81100e64:	00014906 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 31) {
81100e68:	e0bfbc17 	ldw	r2,-272(fp)
81100e6c:	108007d8 	cmpnei	r2,r2,31
81100e70:	1000101e 	bne	r2,zero,81100eb4 <bDdr2EepromDump+0x730>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e74:	00e044f4 	movhi	r3,33043
81100e78:	18e33704 	addi	r3,r3,-29476
81100e7c:	00a044b4 	movhi	r2,33042
81100e80:	1096c604 	addi	r2,r2,23320
81100e84:	1009883a 	mov	r4,r2
81100e88:	008010c4 	movi	r2,67
81100e8c:	100d883a 	mov	r6,r2
81100e90:	200b883a 	mov	r5,r4
81100e94:	1809883a 	mov	r4,r3
81100e98:	11111480 	call	81111148 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100e9c:	d0a03117 	ldw	r2,-32572(gp)
81100ea0:	016044f4 	movhi	r5,33043
81100ea4:	29633704 	addi	r5,r5,-29476
81100ea8:	1009883a 	mov	r4,r2
81100eac:	11100880 	call	81110088 <fprintf>
81100eb0:	00013606 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 36) {
81100eb4:	e0bfbc17 	ldw	r2,-272(fp)
81100eb8:	10800918 	cmpnei	r2,r2,36
81100ebc:	1000101e 	bne	r2,zero,81100f00 <bDdr2EepromDump+0x77c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ec0:	00e044f4 	movhi	r3,33043
81100ec4:	18e33704 	addi	r3,r3,-29476
81100ec8:	00a044b4 	movhi	r2,33042
81100ecc:	1096d704 	addi	r2,r2,23388
81100ed0:	1009883a 	mov	r4,r2
81100ed4:	00800a84 	movi	r2,42
81100ed8:	100d883a 	mov	r6,r2
81100edc:	200b883a 	mov	r5,r4
81100ee0:	1809883a 	mov	r4,r3
81100ee4:	11111480 	call	81111148 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100ee8:	d0a03117 	ldw	r2,-32572(gp)
81100eec:	016044f4 	movhi	r5,33043
81100ef0:	29633704 	addi	r5,r5,-29476
81100ef4:	1009883a 	mov	r4,r2
81100ef8:	11100880 	call	81110088 <fprintf>
81100efc:	00012306 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 37) {
81100f00:	e0bfbc17 	ldw	r2,-272(fp)
81100f04:	10800958 	cmpnei	r2,r2,37
81100f08:	1000101e 	bne	r2,zero,81100f4c <bDdr2EepromDump+0x7c8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f0c:	00e044f4 	movhi	r3,33043
81100f10:	18e33704 	addi	r3,r3,-29476
81100f14:	00a044b4 	movhi	r2,33042
81100f18:	1096e204 	addi	r2,r2,23432
81100f1c:	1009883a 	mov	r4,r2
81100f20:	00800cc4 	movi	r2,51
81100f24:	100d883a 	mov	r6,r2
81100f28:	200b883a 	mov	r5,r4
81100f2c:	1809883a 	mov	r4,r3
81100f30:	11111480 	call	81111148 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f34:	d0a03117 	ldw	r2,-32572(gp)
81100f38:	016044f4 	movhi	r5,33043
81100f3c:	29633704 	addi	r5,r5,-29476
81100f40:	1009883a 	mov	r4,r2
81100f44:	11100880 	call	81110088 <fprintf>
81100f48:	00011006 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 38) {
81100f4c:	e0bfbc17 	ldw	r2,-272(fp)
81100f50:	10800998 	cmpnei	r2,r2,38
81100f54:	1000101e 	bne	r2,zero,81100f98 <bDdr2EepromDump+0x814>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f58:	00e044f4 	movhi	r3,33043
81100f5c:	18e33704 	addi	r3,r3,-29476
81100f60:	00a044b4 	movhi	r2,33042
81100f64:	1096ef04 	addi	r2,r2,23484
81100f68:	1009883a 	mov	r4,r2
81100f6c:	00800dc4 	movi	r2,55
81100f70:	100d883a 	mov	r6,r2
81100f74:	200b883a 	mov	r5,r4
81100f78:	1809883a 	mov	r4,r3
81100f7c:	11111480 	call	81111148 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f80:	d0a03117 	ldw	r2,-32572(gp)
81100f84:	016044f4 	movhi	r5,33043
81100f88:	29633704 	addi	r5,r5,-29476
81100f8c:	1009883a 	mov	r4,r2
81100f90:	11100880 	call	81110088 <fprintf>
81100f94:	0000fd06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 41) {
81100f98:	e0bfbc17 	ldw	r2,-272(fp)
81100f9c:	10800a58 	cmpnei	r2,r2,41
81100fa0:	1000101e 	bne	r2,zero,81100fe4 <bDdr2EepromDump+0x860>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fa4:	00e044f4 	movhi	r3,33043
81100fa8:	18e33704 	addi	r3,r3,-29476
81100fac:	00a044b4 	movhi	r2,33042
81100fb0:	1096fd04 	addi	r2,r2,23540
81100fb4:	1009883a 	mov	r4,r2
81100fb8:	00800c84 	movi	r2,50
81100fbc:	100d883a 	mov	r6,r2
81100fc0:	200b883a 	mov	r5,r4
81100fc4:	1809883a 	mov	r4,r3
81100fc8:	11111480 	call	81111148 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81100fcc:	d0a03117 	ldw	r2,-32572(gp)
81100fd0:	016044f4 	movhi	r5,33043
81100fd4:	29633704 	addi	r5,r5,-29476
81100fd8:	1009883a 	mov	r4,r2
81100fdc:	11100880 	call	81110088 <fprintf>
81100fe0:	0000ea06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 42) {
81100fe4:	e0bfbc17 	ldw	r2,-272(fp)
81100fe8:	10800a98 	cmpnei	r2,r2,42
81100fec:	1000101e 	bne	r2,zero,81101030 <bDdr2EepromDump+0x8ac>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ff0:	00e044f4 	movhi	r3,33043
81100ff4:	18e33704 	addi	r3,r3,-29476
81100ff8:	00a044b4 	movhi	r2,33042
81100ffc:	10970a04 	addi	r2,r2,23592
81101000:	1009883a 	mov	r4,r2
81101004:	00800cc4 	movi	r2,51
81101008:	100d883a 	mov	r6,r2
8110100c:	200b883a 	mov	r5,r4
81101010:	1809883a 	mov	r4,r3
81101014:	11111480 	call	81111148 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
81101018:	d0a03117 	ldw	r2,-32572(gp)
8110101c:	016044f4 	movhi	r5,33043
81101020:	29633704 	addi	r5,r5,-29476
81101024:	1009883a 	mov	r4,r2
81101028:	11100880 	call	81110088 <fprintf>
8110102c:	0000d706 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 62) {
81101030:	e0bfbc17 	ldw	r2,-272(fp)
81101034:	10800f98 	cmpnei	r2,r2,62
81101038:	1000101e 	bne	r2,zero,8110107c <bDdr2EepromDump+0x8f8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
8110103c:	00e044f4 	movhi	r3,33043
81101040:	18e33704 	addi	r3,r3,-29476
81101044:	00a044b4 	movhi	r2,33042
81101048:	10971704 	addi	r2,r2,23644
8110104c:	1009883a 	mov	r4,r2
81101050:	00800404 	movi	r2,16
81101054:	100d883a 	mov	r6,r2
81101058:	200b883a 	mov	r5,r4
8110105c:	1809883a 	mov	r4,r3
81101060:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
81101064:	d0a03117 	ldw	r2,-32572(gp)
81101068:	016044f4 	movhi	r5,33043
8110106c:	29633704 	addi	r5,r5,-29476
81101070:	1009883a 	mov	r4,r2
81101074:	11100880 	call	81110088 <fprintf>
81101078:	0000c406 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 63) {
8110107c:	e0bfbc17 	ldw	r2,-272(fp)
81101080:	10800fd8 	cmpnei	r2,r2,63
81101084:	10001f1e 	bne	r2,zero,81101104 <bDdr2EepromDump+0x980>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
81101088:	00a044f4 	movhi	r2,33043
8110108c:	10a33704 	addi	r2,r2,-29476
81101090:	00c00a04 	movi	r3,40
81101094:	10c00005 	stb	r3,0(r2)
81101098:	00c010c4 	movi	r3,67
8110109c:	10c00045 	stb	r3,1(r2)
811010a0:	00c01a04 	movi	r3,104
811010a4:	10c00085 	stb	r3,2(r2)
811010a8:	00c01944 	movi	r3,101
811010ac:	10c000c5 	stb	r3,3(r2)
811010b0:	00c018c4 	movi	r3,99
811010b4:	10c00105 	stb	r3,4(r2)
811010b8:	00c01ac4 	movi	r3,107
811010bc:	10c00145 	stb	r3,5(r2)
811010c0:	00c01cc4 	movi	r3,115
811010c4:	10c00185 	stb	r3,6(r2)
811010c8:	00c01d44 	movi	r3,117
811010cc:	10c001c5 	stb	r3,7(r2)
811010d0:	00c01b44 	movi	r3,109
811010d4:	10c00205 	stb	r3,8(r2)
811010d8:	00c00a44 	movi	r3,41
811010dc:	10c00245 	stb	r3,9(r2)
811010e0:	00c00284 	movi	r3,10
811010e4:	10c00285 	stb	r3,10(r2)
811010e8:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
811010ec:	d0a03117 	ldw	r2,-32572(gp)
811010f0:	016044f4 	movhi	r5,33043
811010f4:	29633704 	addi	r5,r5,-29476
811010f8:	1009883a 	mov	r4,r2
811010fc:	11100880 	call	81110088 <fprintf>
81101100:	0000a206 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 64) {
81101104:	e0bfbc17 	ldw	r2,-272(fp)
81101108:	10801018 	cmpnei	r2,r2,64
8110110c:	1000101e 	bne	r2,zero,81101150 <bDdr2EepromDump+0x9cc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
81101110:	00e044f4 	movhi	r3,33043
81101114:	18e33704 	addi	r3,r3,-29476
81101118:	00a044b4 	movhi	r2,33042
8110111c:	10971b04 	addi	r2,r2,23660
81101120:	1009883a 	mov	r4,r2
81101124:	00800804 	movi	r2,32
81101128:	100d883a 	mov	r6,r2
8110112c:	200b883a 	mov	r5,r4
81101130:	1809883a 	mov	r4,r3
81101134:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
81101138:	d0a03117 	ldw	r2,-32572(gp)
8110113c:	016044f4 	movhi	r5,33043
81101140:	29633704 	addi	r5,r5,-29476
81101144:	1009883a 	mov	r4,r2
81101148:	11100880 	call	81110088 <fprintf>
8110114c:	00008f06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 72) {
81101150:	e0bfbc17 	ldw	r2,-272(fp)
81101154:	10801218 	cmpnei	r2,r2,72
81101158:	1000101e 	bne	r2,zero,8110119c <bDdr2EepromDump+0xa18>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110115c:	00e044f4 	movhi	r3,33043
81101160:	18e33704 	addi	r3,r3,-29476
81101164:	00a044b4 	movhi	r2,33042
81101168:	10972304 	addi	r2,r2,23692
8110116c:	1009883a 	mov	r4,r2
81101170:	00800dc4 	movi	r2,55
81101174:	100d883a 	mov	r6,r2
81101178:	200b883a 	mov	r5,r4
8110117c:	1809883a 	mov	r4,r3
81101180:	11111480 	call	81111148 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
81101184:	d0a03117 	ldw	r2,-32572(gp)
81101188:	016044f4 	movhi	r5,33043
8110118c:	29633704 	addi	r5,r5,-29476
81101190:	1009883a 	mov	r4,r2
81101194:	11100880 	call	81110088 <fprintf>
81101198:	00007c06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 73) {
8110119c:	e0bfbc17 	ldw	r2,-272(fp)
811011a0:	10801258 	cmpnei	r2,r2,73
811011a4:	1000101e 	bne	r2,zero,811011e8 <bDdr2EepromDump+0xa64>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
811011a8:	00e044f4 	movhi	r3,33043
811011ac:	18e33704 	addi	r3,r3,-29476
811011b0:	00a044b4 	movhi	r2,33042
811011b4:	10973104 	addi	r2,r2,23748
811011b8:	1009883a 	mov	r4,r2
811011bc:	00800784 	movi	r2,30
811011c0:	100d883a 	mov	r6,r2
811011c4:	200b883a 	mov	r5,r4
811011c8:	1809883a 	mov	r4,r3
811011cc:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
811011d0:	d0a03117 	ldw	r2,-32572(gp)
811011d4:	016044f4 	movhi	r5,33043
811011d8:	29633704 	addi	r5,r5,-29476
811011dc:	1009883a 	mov	r4,r2
811011e0:	11100880 	call	81110088 <fprintf>
811011e4:	00006906 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 91) {
811011e8:	e0bfbc17 	ldw	r2,-272(fp)
811011ec:	108016d8 	cmpnei	r2,r2,91
811011f0:	1000101e 	bne	r2,zero,81101234 <bDdr2EepromDump+0xab0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
811011f4:	00e044f4 	movhi	r3,33043
811011f8:	18e33704 	addi	r3,r3,-29476
811011fc:	00a044b4 	movhi	r2,33042
81101200:	10973904 	addi	r2,r2,23780
81101204:	1009883a 	mov	r4,r2
81101208:	00800804 	movi	r2,32
8110120c:	100d883a 	mov	r6,r2
81101210:	200b883a 	mov	r5,r4
81101214:	1809883a 	mov	r4,r3
81101218:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
8110121c:	d0a03117 	ldw	r2,-32572(gp)
81101220:	016044f4 	movhi	r5,33043
81101224:	29633704 	addi	r5,r5,-29476
81101228:	1009883a 	mov	r4,r2
8110122c:	11100880 	call	81110088 <fprintf>
81101230:	00005606 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 93) {
81101234:	e0bfbc17 	ldw	r2,-272(fp)
81101238:	10801758 	cmpnei	r2,r2,93
8110123c:	1000101e 	bne	r2,zero,81101280 <bDdr2EepromDump+0xafc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101240:	00e044f4 	movhi	r3,33043
81101244:	18e33704 	addi	r3,r3,-29476
81101248:	00a044b4 	movhi	r2,33042
8110124c:	10974104 	addi	r2,r2,23812
81101250:	1009883a 	mov	r4,r2
81101254:	008009c4 	movi	r2,39
81101258:	100d883a 	mov	r6,r2
8110125c:	200b883a 	mov	r5,r4
81101260:	1809883a 	mov	r4,r3
81101264:	11111480 	call	81111148 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
81101268:	d0a03117 	ldw	r2,-32572(gp)
8110126c:	016044f4 	movhi	r5,33043
81101270:	29633704 	addi	r5,r5,-29476
81101274:	1009883a 	mov	r4,r2
81101278:	11100880 	call	81110088 <fprintf>
8110127c:	00004306 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 94) {
81101280:	e0bfbc17 	ldw	r2,-272(fp)
81101284:	10801798 	cmpnei	r2,r2,94
81101288:	1000101e 	bne	r2,zero,811012cc <bDdr2EepromDump+0xb48>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
8110128c:	00e044f4 	movhi	r3,33043
81101290:	18e33704 	addi	r3,r3,-29476
81101294:	00a044b4 	movhi	r2,33042
81101298:	10974b04 	addi	r2,r2,23852
8110129c:	1009883a 	mov	r4,r2
811012a0:	008006c4 	movi	r2,27
811012a4:	100d883a 	mov	r6,r2
811012a8:	200b883a 	mov	r5,r4
811012ac:	1809883a 	mov	r4,r3
811012b0:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
811012b4:	d0a03117 	ldw	r2,-32572(gp)
811012b8:	016044f4 	movhi	r5,33043
811012bc:	29633704 	addi	r5,r5,-29476
811012c0:	1009883a 	mov	r4,r2
811012c4:	11100880 	call	81110088 <fprintf>
811012c8:	00003006 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 95) {
811012cc:	e0bfbc17 	ldw	r2,-272(fp)
811012d0:	108017d8 	cmpnei	r2,r2,95
811012d4:	1000101e 	bne	r2,zero,81101318 <bDdr2EepromDump+0xb94>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811012d8:	00e044f4 	movhi	r3,33043
811012dc:	18e33704 	addi	r3,r3,-29476
811012e0:	00a044b4 	movhi	r2,33042
811012e4:	10975204 	addi	r2,r2,23880
811012e8:	1009883a 	mov	r4,r2
811012ec:	00800a04 	movi	r2,40
811012f0:	100d883a 	mov	r6,r2
811012f4:	200b883a 	mov	r5,r4
811012f8:	1809883a 	mov	r4,r3
811012fc:	11111480 	call	81111148 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
81101300:	d0a03117 	ldw	r2,-32572(gp)
81101304:	016044f4 	movhi	r5,33043
81101308:	29633704 	addi	r5,r5,-29476
8110130c:	1009883a 	mov	r4,r2
81101310:	11100880 	call	81110088 <fprintf>
81101314:	00001d06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else if (iI == 99) {
81101318:	e0bfbc17 	ldw	r2,-272(fp)
8110131c:	108018d8 	cmpnei	r2,r2,99
81101320:	1000101e 	bne	r2,zero,81101364 <bDdr2EepromDump+0xbe0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
81101324:	00e044f4 	movhi	r3,33043
81101328:	18e33704 	addi	r3,r3,-29476
8110132c:	00a044b4 	movhi	r2,33042
81101330:	10975c04 	addi	r2,r2,23920
81101334:	1009883a 	mov	r4,r2
81101338:	00800984 	movi	r2,38
8110133c:	100d883a 	mov	r6,r2
81101340:	200b883a 	mov	r5,r4
81101344:	1809883a 	mov	r4,r3
81101348:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
8110134c:	d0a03117 	ldw	r2,-32572(gp)
81101350:	016044f4 	movhi	r5,33043
81101354:	29633704 	addi	r5,r5,-29476
81101358:	1009883a 	mov	r4,r2
8110135c:	11100880 	call	81110088 <fprintf>
81101360:	00000a06 	br	8110138c <bDdr2EepromDump+0xc08>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
81101364:	00a044f4 	movhi	r2,33043
81101368:	10a33704 	addi	r2,r2,-29476
8110136c:	00c00284 	movi	r3,10
81101370:	10c00005 	stb	r3,0(r2)
81101374:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
81101378:	d0a03117 	ldw	r2,-32572(gp)
8110137c:	016044f4 	movhi	r5,33043
81101380:	29633704 	addi	r5,r5,-29476
81101384:	1009883a 	mov	r4,r2
81101388:	11100880 	call	81110088 <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
8110138c:	e0bfbc17 	ldw	r2,-272(fp)
81101390:	10800044 	addi	r2,r2,1
81101394:	e0bfbc15 	stw	r2,-272(fp)
81101398:	e0bfbc17 	ldw	r2,-272(fp)
8110139c:	10804008 	cmpgei	r2,r2,256
811013a0:	1000121e 	bne	r2,zero,811013ec <bDdr2EepromDump+0xc68>
811013a4:	e0bfbe17 	ldw	r2,-264(fp)
811013a8:	103d451e 	bne	r2,zero,811008c0 <__reset+0xfb0e08c0>
811013ac:	00000f06 	br	811013ec <bDdr2EepromDump+0xc68>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
811013b0:	00e044f4 	movhi	r3,33043
811013b4:	18e33704 	addi	r3,r3,-29476
811013b8:	00a044b4 	movhi	r2,33042
811013bc:	10976604 	addi	r2,r2,23960
811013c0:	1009883a 	mov	r4,r2
811013c4:	008005c4 	movi	r2,23
811013c8:	100d883a 	mov	r6,r2
811013cc:	200b883a 	mov	r5,r4
811013d0:	1809883a 	mov	r4,r3
811013d4:	11111480 	call	81111148 <memcpy>
		debug(fp, cDebugBuffer);
811013d8:	d0a03117 	ldw	r2,-32572(gp)
811013dc:	016044f4 	movhi	r5,33043
811013e0:	29633704 	addi	r5,r5,-29476
811013e4:	1009883a 	mov	r4,r2
811013e8:	11100880 	call	81110088 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811013ec:	00a044f4 	movhi	r2,33043
811013f0:	10a33704 	addi	r2,r2,-29476
811013f4:	00c00284 	movi	r3,10
811013f8:	10c00005 	stb	r3,0(r2)
811013fc:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101400:	d0a03117 	ldw	r2,-32572(gp)
81101404:	016044f4 	movhi	r5,33043
81101408:	29633704 	addi	r5,r5,-29476
8110140c:	1009883a 	mov	r4,r2
81101410:	11100880 	call	81110088 <fprintf>
#endif

	return bSuccess;
81101414:	e0bfbe17 	ldw	r2,-264(fp)
}
81101418:	e037883a 	mov	sp,fp
8110141c:	dfc00117 	ldw	ra,4(sp)
81101420:	df000017 	ldw	fp,0(sp)
81101424:	dec00204 	addi	sp,sp,8
81101428:	f800283a 	ret

8110142c <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
8110142c:	defffb04 	addi	sp,sp,-20
81101430:	dfc00415 	stw	ra,16(sp)
81101434:	df000315 	stw	fp,12(sp)
81101438:	df000304 	addi	fp,sp,12
8110143c:	2005883a 	mov	r2,r4
81101440:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
81101444:	00a04834 	movhi	r2,33056
81101448:	108c2204 	addi	r2,r2,12424
8110144c:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
81101450:	00800044 	movi	r2,1
81101454:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101458:	e0bfff03 	ldbu	r2,-4(fp)
8110145c:	10000326 	beq	r2,zero,8110146c <bDdr2SwitchMemory+0x40>
81101460:	10800060 	cmpeqi	r2,r2,1
81101464:	1000041e 	bne	r2,zero,81101478 <bDdr2SwitchMemory+0x4c>
81101468:	00000706 	br	81101488 <bDdr2SwitchMemory+0x5c>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
8110146c:	e0bffe17 	ldw	r2,-8(fp)
81101470:	10000015 	stw	zero,0(r2)
		break;
81101474:	00001406 	br	811014c8 <bDdr2SwitchMemory+0x9c>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81101478:	e0bffe17 	ldw	r2,-8(fp)
8110147c:	00e00034 	movhi	r3,32768
81101480:	10c00015 	stw	r3,0(r2)
		break;
81101484:	00001006 	br	811014c8 <bDdr2SwitchMemory+0x9c>
	default:
		bSuccess = FALSE;
81101488:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110148c:	00e044f4 	movhi	r3,33043
81101490:	18e33704 	addi	r3,r3,-29476
81101494:	00a044b4 	movhi	r2,33042
81101498:	10976c04 	addi	r2,r2,23984
8110149c:	1009883a 	mov	r4,r2
811014a0:	00800f04 	movi	r2,60
811014a4:	100d883a 	mov	r6,r2
811014a8:	200b883a 	mov	r5,r4
811014ac:	1809883a 	mov	r4,r3
811014b0:	11111480 	call	81111148 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
811014b4:	d0a03117 	ldw	r2,-32572(gp)
811014b8:	016044f4 	movhi	r5,33043
811014bc:	29633704 	addi	r5,r5,-29476
811014c0:	1009883a 	mov	r4,r2
811014c4:	11100880 	call	81110088 <fprintf>
		;
#endif
	}

	return bSuccess;
811014c8:	e0bffd17 	ldw	r2,-12(fp)
}
811014cc:	e037883a 	mov	sp,fp
811014d0:	dfc00117 	ldw	ra,4(sp)
811014d4:	df000017 	ldw	fp,0(sp)
811014d8:	dec00204 	addi	sp,sp,8
811014dc:	f800283a 	ret

811014e0 <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
811014e0:	deffe204 	addi	sp,sp,-120
811014e4:	dfc01d15 	stw	ra,116(sp)
811014e8:	df001c15 	stw	fp,112(sp)
811014ec:	dc401b15 	stw	r17,108(sp)
811014f0:	dc001a15 	stw	r16,104(sp)
811014f4:	df001c04 	addi	fp,sp,112
811014f8:	2005883a 	mov	r2,r4
811014fc:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
81101500:	00e044f4 	movhi	r3,33043
81101504:	18e33704 	addi	r3,r3,-29476
81101508:	00a044b4 	movhi	r2,33042
8110150c:	10977b04 	addi	r2,r2,24044
81101510:	1009883a 	mov	r4,r2
81101514:	00800a04 	movi	r2,40
81101518:	100d883a 	mov	r6,r2
8110151c:	200b883a 	mov	r5,r4
81101520:	1809883a 	mov	r4,r3
81101524:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
81101528:	d0a03117 	ldw	r2,-32572(gp)
8110152c:	016044f4 	movhi	r5,33043
81101530:	29633704 	addi	r5,r5,-29476
81101534:	1009883a 	mov	r4,r2
81101538:	11100880 	call	81110088 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
8110153c:	00800044 	movi	r2,1
81101540:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
81101544:	e0bffd03 	ldbu	r2,-12(fp)
81101548:	10000326 	beq	r2,zero,81101558 <bDdr2MemoryWriteTest+0x78>
8110154c:	10800060 	cmpeqi	r2,r2,1
81101550:	1000081e 	bne	r2,zero,81101574 <bDdr2MemoryWriteTest+0x94>
81101554:	00000e06 	br	81101590 <bDdr2MemoryWriteTest+0xb0>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101558:	e0bffd03 	ldbu	r2,-12(fp)
8110155c:	1009883a 	mov	r4,r2
81101560:	110142c0 	call	8110142c <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101564:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101568:	00a00034 	movhi	r2,32768
8110156c:	e0bfe615 	stw	r2,-104(fp)
		break;
81101570:	00001906 	br	811015d8 <bDdr2MemoryWriteTest+0xf8>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101574:	e0bffd03 	ldbu	r2,-12(fp)
81101578:	1009883a 	mov	r4,r2
8110157c:	110142c0 	call	8110142c <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101580:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101584:	00a00034 	movhi	r2,32768
81101588:	e0bfe615 	stw	r2,-104(fp)
		break;
8110158c:	00001206 	br	811015d8 <bDdr2MemoryWriteTest+0xf8>
	default:
		bSuccess = FALSE;
81101590:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101594:	00e044f4 	movhi	r3,33043
81101598:	18e33704 	addi	r3,r3,-29476
8110159c:	00a044b4 	movhi	r2,33042
811015a0:	10958c04 	addi	r2,r2,22064
811015a4:	1009883a 	mov	r4,r2
811015a8:	00800bc4 	movi	r2,47
811015ac:	100d883a 	mov	r6,r2
811015b0:	200b883a 	mov	r5,r4
811015b4:	1809883a 	mov	r4,r3
811015b8:	11111480 	call	81111148 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811015bc:	d0a03117 	ldw	r2,-32572(gp)
811015c0:	016044f4 	movhi	r5,33043
811015c4:	29633704 	addi	r5,r5,-29476
811015c8:	1009883a 	mov	r4,r2
811015cc:	11100880 	call	81110088 <fprintf>
		;
#endif
		return bSuccess;
811015d0:	e0bfed17 	ldw	r2,-76(fp)
811015d4:	00011806 	br	81101a38 <bDdr2MemoryWriteTest+0x558>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811015d8:	e0bfe617 	ldw	r2,-104(fp)
811015dc:	1004d53a 	srli	r2,r2,20
811015e0:	100d883a 	mov	r6,r2
811015e4:	016044b4 	movhi	r5,33042
811015e8:	29578504 	addi	r5,r5,24084
811015ec:	012044f4 	movhi	r4,33043
811015f0:	21233704 	addi	r4,r4,-29476
811015f4:	111173c0 	call	8111173c <sprintf>
	debug(fp, cDebugBuffer);
811015f8:	d0a03117 	ldw	r2,-32572(gp)
811015fc:	016044f4 	movhi	r5,33043
81101600:	29633704 	addi	r5,r5,-29476
81101604:	1009883a 	mov	r4,r2
81101608:	11100880 	call	81110088 <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
8110160c:	00800104 	movi	r2,4
81101610:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
81101614:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101618:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
8110161c:	e03fe715 	stw	zero,-100(fp)
81101620:	00001506 	br	81101678 <bDdr2MemoryWriteTest+0x198>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101624:	e0ffe617 	ldw	r3,-104(fp)
81101628:	00b33374 	movhi	r2,52429
8110162c:	10b33344 	addi	r2,r2,-13107
81101630:	1888383a 	mulxuu	r4,r3,r2
81101634:	1885383a 	mul	r2,r3,r2
81101638:	1021883a 	mov	r16,r2
8110163c:	2023883a 	mov	r17,r4
81101640:	8804d0fa 	srli	r2,r17,3
81101644:	e0ffe717 	ldw	r3,-100(fp)
81101648:	18c00044 	addi	r3,r3,1
8110164c:	10c7383a 	mul	r3,r2,r3
81101650:	e0bfe717 	ldw	r2,-100(fp)
81101654:	1085883a 	add	r2,r2,r2
81101658:	1085883a 	add	r2,r2,r2
8110165c:	e13fe504 	addi	r4,fp,-108
81101660:	2085883a 	add	r2,r4,r2
81101664:	10800e04 	addi	r2,r2,56
81101668:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
8110166c:	e0bfe717 	ldw	r2,-100(fp)
81101670:	10800044 	addi	r2,r2,1
81101674:	e0bfe715 	stw	r2,-100(fp)
81101678:	e0bfe717 	ldw	r2,-100(fp)
8110167c:	10800290 	cmplti	r2,r2,10
81101680:	103fe81e 	bne	r2,zero,81101624 <__reset+0xfb0e1624>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101684:	d0a03e17 	ldw	r2,-32520(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
81101688:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
8110168c:	00804004 	movi	r2,256
81101690:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
81101694:	e03fe715 	stw	zero,-100(fp)
81101698:	00001e06 	br	81101714 <bDdr2MemoryWriteTest+0x234>
		if (iI == 0) {
8110169c:	e0bfe717 	ldw	r2,-100(fp)
811016a0:	1000091e 	bne	r2,zero,811016c8 <bDdr2MemoryWriteTest+0x1e8>
			xSZData[iI] = uliInitValue;
811016a4:	00a044f4 	movhi	r2,33043
811016a8:	10a37704 	addi	r2,r2,-29220
811016ac:	e0ffe717 	ldw	r3,-100(fp)
811016b0:	18c7883a 	add	r3,r3,r3
811016b4:	18c7883a 	add	r3,r3,r3
811016b8:	10c5883a 	add	r2,r2,r3
811016bc:	e0fff017 	ldw	r3,-64(fp)
811016c0:	10c00015 	stw	r3,0(r2)
811016c4:	00001006 	br	81101708 <bDdr2MemoryWriteTest+0x228>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
811016c8:	e0bfe717 	ldw	r2,-100(fp)
811016cc:	10ffffc4 	addi	r3,r2,-1
811016d0:	00a044f4 	movhi	r2,33043
811016d4:	10a37704 	addi	r2,r2,-29220
811016d8:	18c7883a 	add	r3,r3,r3
811016dc:	18c7883a 	add	r3,r3,r3
811016e0:	10c5883a 	add	r2,r2,r3
811016e4:	10800017 	ldw	r2,0(r2)
811016e8:	11000364 	muli	r4,r2,13
811016ec:	00a044f4 	movhi	r2,33043
811016f0:	10a37704 	addi	r2,r2,-29220
811016f4:	e0ffe717 	ldw	r3,-100(fp)
811016f8:	18c7883a 	add	r3,r3,r3
811016fc:	18c7883a 	add	r3,r3,r3
81101700:	10c5883a 	add	r2,r2,r3
81101704:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
81101708:	e0bfe717 	ldw	r2,-100(fp)
8110170c:	10800044 	addi	r2,r2,1
81101710:	e0bfe715 	stw	r2,-100(fp)
81101714:	e0ffe717 	ldw	r3,-100(fp)
81101718:	e0bfea17 	ldw	r2,-88(fp)
8110171c:	18bfdf16 	blt	r3,r2,8110169c <__reset+0xfb0e169c>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
81101720:	e0bfea17 	ldw	r2,-88(fp)
81101724:	10ffffc4 	addi	r3,r2,-1
81101728:	00a044f4 	movhi	r2,33043
8110172c:	10a37704 	addi	r2,r2,-29220
81101730:	18c7883a 	add	r3,r3,r3
81101734:	18c7883a 	add	r3,r3,r3
81101738:	10c7883a 	add	r3,r2,r3
8110173c:	00aaaaf4 	movhi	r2,43691
81101740:	10aaaa84 	addi	r2,r2,-21846
81101744:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101748:	e0bfea17 	ldw	r2,-88(fp)
8110174c:	10ffff84 	addi	r3,r2,-2
81101750:	00a044f4 	movhi	r2,33043
81101754:	10a37704 	addi	r2,r2,-29220
81101758:	18c7883a 	add	r3,r3,r3
8110175c:	18c7883a 	add	r3,r3,r3
81101760:	10c7883a 	add	r3,r2,r3
81101764:	00955574 	movhi	r2,21845
81101768:	10955544 	addi	r2,r2,21845
8110176c:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
81101770:	e0bfea17 	ldw	r2,-88(fp)
81101774:	10ffff44 	addi	r3,r2,-3
81101778:	00a044f4 	movhi	r2,33043
8110177c:	10a37704 	addi	r2,r2,-29220
81101780:	18c7883a 	add	r3,r3,r3
81101784:	18c7883a 	add	r3,r3,r3
81101788:	10c5883a 	add	r2,r2,r3
8110178c:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
81101790:	e0bfea17 	ldw	r2,-88(fp)
81101794:	10ffff04 	addi	r3,r2,-4
81101798:	00a044f4 	movhi	r2,33043
8110179c:	10a37704 	addi	r2,r2,-29220
811017a0:	18c7883a 	add	r3,r3,r3
811017a4:	18c7883a 	add	r3,r3,r3
811017a8:	10c5883a 	add	r2,r2,r3
811017ac:	00ffffc4 	movi	r3,-1
811017b0:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
811017b4:	00e044f4 	movhi	r3,33043
811017b8:	18e33704 	addi	r3,r3,-29476
811017bc:	00a044b4 	movhi	r2,33042
811017c0:	10978b04 	addi	r2,r2,24108
811017c4:	1009883a 	mov	r4,r2
811017c8:	00800444 	movi	r2,17
811017cc:	100d883a 	mov	r6,r2
811017d0:	200b883a 	mov	r5,r4
811017d4:	1809883a 	mov	r4,r3
811017d8:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
811017dc:	d0a03117 	ldw	r2,-32572(gp)
811017e0:	016044f4 	movhi	r5,33043
811017e4:	29633704 	addi	r5,r5,-29476
811017e8:	1009883a 	mov	r4,r2
811017ec:	11100880 	call	81110088 <fprintf>
811017f0:	d0a03e17 	ldw	r2,-32520(gp)
#endif
	iTimeStart = alt_nticks();
811017f4:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
811017f8:	e0bfe517 	ldw	r2,-108(fp)
811017fc:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
81101800:	00810004 	movi	r2,1024
81101804:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101808:	e0ffe817 	ldw	r3,-96(fp)
8110180c:	e0bfee17 	ldw	r2,-72(fp)
81101810:	1885283a 	div	r2,r3,r2
81101814:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
81101818:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
8110181c:	00003a06 	br	81101908 <bDdr2MemoryWriteTest+0x428>
		iNRemainedLen = uliByteLen - iNPos;
81101820:	e0bfeb17 	ldw	r2,-84(fp)
81101824:	e0ffe617 	ldw	r3,-104(fp)
81101828:	1885c83a 	sub	r2,r3,r2
8110182c:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101830:	e0bfe817 	ldw	r2,-96(fp)
81101834:	e0fff217 	ldw	r3,-56(fp)
81101838:	1880060e 	bge	r3,r2,81101854 <bDdr2MemoryWriteTest+0x374>
			iNAccessLen = iNRemainedLen;
8110183c:	e0bff217 	ldw	r2,-56(fp)
81101840:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101844:	e0ffe817 	ldw	r3,-96(fp)
81101848:	e0bfee17 	ldw	r2,-72(fp)
8110184c:	1885283a 	div	r2,r3,r2
81101850:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
81101854:	e0bfe817 	ldw	r2,-96(fp)
81101858:	100d883a 	mov	r6,r2
8110185c:	016044f4 	movhi	r5,33043
81101860:	29637704 	addi	r5,r5,-29220
81101864:	e13fe917 	ldw	r4,-92(fp)
81101868:	11111480 	call	81111148 <memcpy>
		pxDes += iNItemNum;
8110186c:	e0bfea17 	ldw	r2,-88(fp)
81101870:	1085883a 	add	r2,r2,r2
81101874:	1085883a 	add	r2,r2,r2
81101878:	1007883a 	mov	r3,r2
8110187c:	e0bfe917 	ldw	r2,-92(fp)
81101880:	10c5883a 	add	r2,r2,r3
81101884:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
81101888:	e0ffeb17 	ldw	r3,-84(fp)
8110188c:	e0bfe817 	ldw	r2,-96(fp)
81101890:	1885883a 	add	r2,r3,r2
81101894:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101898:	e0bfec17 	ldw	r2,-80(fp)
8110189c:	10800288 	cmpgei	r2,r2,10
811018a0:	1000191e 	bne	r2,zero,81101908 <bDdr2MemoryWriteTest+0x428>
811018a4:	e0bfec17 	ldw	r2,-80(fp)
811018a8:	1085883a 	add	r2,r2,r2
811018ac:	1085883a 	add	r2,r2,r2
811018b0:	e0ffe504 	addi	r3,fp,-108
811018b4:	1885883a 	add	r2,r3,r2
811018b8:	10800e04 	addi	r2,r2,56
811018bc:	10800017 	ldw	r2,0(r2)
811018c0:	e0ffeb17 	ldw	r3,-84(fp)
811018c4:	18801036 	bltu	r3,r2,81101908 <bDdr2MemoryWriteTest+0x428>
			iNProgressIndex++;
811018c8:	e0bfec17 	ldw	r2,-80(fp)
811018cc:	10800044 	addi	r2,r2,1
811018d0:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
811018d4:	e0bfec17 	ldw	r2,-80(fp)
811018d8:	108002a4 	muli	r2,r2,10
811018dc:	100d883a 	mov	r6,r2
811018e0:	016044b4 	movhi	r5,33042
811018e4:	29579004 	addi	r5,r5,24128
811018e8:	012044f4 	movhi	r4,33043
811018ec:	21233704 	addi	r4,r4,-29476
811018f0:	111173c0 	call	8111173c <sprintf>
			debug(fp, cDebugBuffer);
811018f4:	d0a03117 	ldw	r2,-32572(gp)
811018f8:	016044f4 	movhi	r5,33043
811018fc:	29633704 	addi	r5,r5,-29476
81101900:	1009883a 	mov	r4,r2
81101904:	11100880 	call	81110088 <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
81101908:	e0ffeb17 	ldw	r3,-84(fp)
8110190c:	e0bfe617 	ldw	r2,-104(fp)
81101910:	18bfc336 	bltu	r3,r2,81101820 <__reset+0xfb0e1820>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
81101914:	11203e80 	call	811203e8 <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101918:	00a044f4 	movhi	r2,33043
8110191c:	10a33704 	addi	r2,r2,-29476
81101920:	00c00284 	movi	r3,10
81101924:	10c00005 	stb	r3,0(r2)
81101928:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
8110192c:	d0a03117 	ldw	r2,-32572(gp)
81101930:	016044f4 	movhi	r5,33043
81101934:	29633704 	addi	r5,r5,-29476
81101938:	1009883a 	mov	r4,r2
8110193c:	11100880 	call	81110088 <fprintf>
81101940:	d0e03e17 	ldw	r3,-32520(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101944:	e0bff117 	ldw	r2,-60(fp)
81101948:	1885c83a 	sub	r2,r3,r2
8110194c:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
81101950:	e0bfed17 	ldw	r2,-76(fp)
81101954:	10001e26 	beq	r2,zero,811019d0 <bDdr2MemoryWriteTest+0x4f0>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101958:	e13fef17 	ldw	r4,-68(fp)
8110195c:	110f30c0 	call	8110f30c <__floatsisf>
81101960:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101964:	d0a03d17 	ldw	r2,-32524(gp)
81101968:	1009883a 	mov	r4,r2
8110196c:	110f4300 	call	8110f430 <__floatunsisf>
81101970:	1007883a 	mov	r3,r2
81101974:	180b883a 	mov	r5,r3
81101978:	8009883a 	mov	r4,r16
8110197c:	110ead00 	call	8110ead0 <__divsf3>
81101980:	1007883a 	mov	r3,r2
81101984:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101988:	1009883a 	mov	r4,r2
8110198c:	110fc380 	call	8110fc38 <__extendsfdf2>
81101990:	1009883a 	mov	r4,r2
81101994:	180b883a 	mov	r5,r3
81101998:	d9400015 	stw	r5,0(sp)
8110199c:	200f883a 	mov	r7,r4
811019a0:	e1bfe617 	ldw	r6,-104(fp)
811019a4:	016044b4 	movhi	r5,33042
811019a8:	29579204 	addi	r5,r5,24136
811019ac:	012044f4 	movhi	r4,33043
811019b0:	21233704 	addi	r4,r4,-29476
811019b4:	111173c0 	call	8111173c <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
811019b8:	d0a03117 	ldw	r2,-32572(gp)
811019bc:	016044f4 	movhi	r5,33043
811019c0:	29633704 	addi	r5,r5,-29476
811019c4:	1009883a 	mov	r4,r2
811019c8:	11100880 	call	81110088 <fprintf>
811019cc:	00000f06 	br	81101a0c <bDdr2MemoryWriteTest+0x52c>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
811019d0:	00e044f4 	movhi	r3,33043
811019d4:	18e33704 	addi	r3,r3,-29476
811019d8:	00a044b4 	movhi	r2,33042
811019dc:	10979e04 	addi	r2,r2,24184
811019e0:	1009883a 	mov	r4,r2
811019e4:	00800584 	movi	r2,22
811019e8:	100d883a 	mov	r6,r2
811019ec:	200b883a 	mov	r5,r4
811019f0:	1809883a 	mov	r4,r3
811019f4:	11111480 	call	81111148 <memcpy>
		debug(fp, cDebugBuffer);
811019f8:	d0a03117 	ldw	r2,-32572(gp)
811019fc:	016044f4 	movhi	r5,33043
81101a00:	29633704 	addi	r5,r5,-29476
81101a04:	1009883a 	mov	r4,r2
81101a08:	11100880 	call	81110088 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101a0c:	00a044f4 	movhi	r2,33043
81101a10:	10a33704 	addi	r2,r2,-29476
81101a14:	00c00284 	movi	r3,10
81101a18:	10c00005 	stb	r3,0(r2)
81101a1c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101a20:	d0a03117 	ldw	r2,-32572(gp)
81101a24:	016044f4 	movhi	r5,33043
81101a28:	29633704 	addi	r5,r5,-29476
81101a2c:	1009883a 	mov	r4,r2
81101a30:	11100880 	call	81110088 <fprintf>
#endif

	return bSuccess;
81101a34:	e0bfed17 	ldw	r2,-76(fp)
}
81101a38:	e6fffe04 	addi	sp,fp,-8
81101a3c:	dfc00317 	ldw	ra,12(sp)
81101a40:	df000217 	ldw	fp,8(sp)
81101a44:	dc400117 	ldw	r17,4(sp)
81101a48:	dc000017 	ldw	r16,0(sp)
81101a4c:	dec00404 	addi	sp,sp,16
81101a50:	f800283a 	ret

81101a54 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101a54:	deffe204 	addi	sp,sp,-120
81101a58:	dfc01d15 	stw	ra,116(sp)
81101a5c:	df001c15 	stw	fp,112(sp)
81101a60:	dc401b15 	stw	r17,108(sp)
81101a64:	dc001a15 	stw	r16,104(sp)
81101a68:	df001c04 	addi	fp,sp,112
81101a6c:	2005883a 	mov	r2,r4
81101a70:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101a74:	00e044f4 	movhi	r3,33043
81101a78:	18e33704 	addi	r3,r3,-29476
81101a7c:	00a044b4 	movhi	r2,33042
81101a80:	1097a404 	addi	r2,r2,24208
81101a84:	1009883a 	mov	r4,r2
81101a88:	008009c4 	movi	r2,39
81101a8c:	100d883a 	mov	r6,r2
81101a90:	200b883a 	mov	r5,r4
81101a94:	1809883a 	mov	r4,r3
81101a98:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
81101a9c:	d0a03117 	ldw	r2,-32572(gp)
81101aa0:	016044f4 	movhi	r5,33043
81101aa4:	29633704 	addi	r5,r5,-29476
81101aa8:	1009883a 	mov	r4,r2
81101aac:	11100880 	call	81110088 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101ab0:	00800044 	movi	r2,1
81101ab4:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101ab8:	e0bffd03 	ldbu	r2,-12(fp)
81101abc:	10000326 	beq	r2,zero,81101acc <bDdr2MemoryReadTest+0x78>
81101ac0:	10800060 	cmpeqi	r2,r2,1
81101ac4:	1000081e 	bne	r2,zero,81101ae8 <bDdr2MemoryReadTest+0x94>
81101ac8:	00000e06 	br	81101b04 <bDdr2MemoryReadTest+0xb0>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101acc:	e0bffd03 	ldbu	r2,-12(fp)
81101ad0:	1009883a 	mov	r4,r2
81101ad4:	110142c0 	call	8110142c <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101ad8:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101adc:	00a00034 	movhi	r2,32768
81101ae0:	e0bfe715 	stw	r2,-100(fp)
		break;
81101ae4:	00001906 	br	81101b4c <bDdr2MemoryReadTest+0xf8>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101ae8:	e0bffd03 	ldbu	r2,-12(fp)
81101aec:	1009883a 	mov	r4,r2
81101af0:	110142c0 	call	8110142c <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101af4:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101af8:	00a00034 	movhi	r2,32768
81101afc:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b00:	00001206 	br	81101b4c <bDdr2MemoryReadTest+0xf8>
	default:
		bSuccess = FALSE;
81101b04:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101b08:	00e044f4 	movhi	r3,33043
81101b0c:	18e33704 	addi	r3,r3,-29476
81101b10:	00a044b4 	movhi	r2,33042
81101b14:	10958c04 	addi	r2,r2,22064
81101b18:	1009883a 	mov	r4,r2
81101b1c:	00800bc4 	movi	r2,47
81101b20:	100d883a 	mov	r6,r2
81101b24:	200b883a 	mov	r5,r4
81101b28:	1809883a 	mov	r4,r3
81101b2c:	11111480 	call	81111148 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101b30:	d0a03117 	ldw	r2,-32572(gp)
81101b34:	016044f4 	movhi	r5,33043
81101b38:	29633704 	addi	r5,r5,-29476
81101b3c:	1009883a 	mov	r4,r2
81101b40:	11100880 	call	81110088 <fprintf>
		;
#endif
		return bSuccess;
81101b44:	e0bfe517 	ldw	r2,-108(fp)
81101b48:	0000fc06 	br	81101f3c <bDdr2MemoryReadTest+0x4e8>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101b4c:	e0bfe717 	ldw	r2,-100(fp)
81101b50:	1004d53a 	srli	r2,r2,20
81101b54:	100d883a 	mov	r6,r2
81101b58:	016044b4 	movhi	r5,33042
81101b5c:	2957ae04 	addi	r5,r5,24248
81101b60:	012044f4 	movhi	r4,33043
81101b64:	21233704 	addi	r4,r4,-29476
81101b68:	111173c0 	call	8111173c <sprintf>
	debug(fp, cDebugBuffer);
81101b6c:	d0a03117 	ldw	r2,-32572(gp)
81101b70:	016044f4 	movhi	r5,33043
81101b74:	29633704 	addi	r5,r5,-29476
81101b78:	1009883a 	mov	r4,r2
81101b7c:	11100880 	call	81110088 <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101b80:	00804004 	movi	r2,256
81101b84:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101b88:	00800104 	movi	r2,4
81101b8c:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101b90:	e0ffec17 	ldw	r3,-80(fp)
81101b94:	e0bfef17 	ldw	r2,-68(fp)
81101b98:	1885383a 	mul	r2,r3,r2
81101b9c:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101ba0:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101ba4:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101ba8:	e03fe815 	stw	zero,-96(fp)
81101bac:	00001506 	br	81101c04 <bDdr2MemoryReadTest+0x1b0>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101bb0:	e0ffe717 	ldw	r3,-100(fp)
81101bb4:	00b33374 	movhi	r2,52429
81101bb8:	10b33344 	addi	r2,r2,-13107
81101bbc:	1888383a 	mulxuu	r4,r3,r2
81101bc0:	1885383a 	mul	r2,r3,r2
81101bc4:	1021883a 	mov	r16,r2
81101bc8:	2023883a 	mov	r17,r4
81101bcc:	8804d0fa 	srli	r2,r17,3
81101bd0:	e0ffe817 	ldw	r3,-96(fp)
81101bd4:	18c00044 	addi	r3,r3,1
81101bd8:	10c7383a 	mul	r3,r2,r3
81101bdc:	e0bfe817 	ldw	r2,-96(fp)
81101be0:	1085883a 	add	r2,r2,r2
81101be4:	1085883a 	add	r2,r2,r2
81101be8:	e13fe504 	addi	r4,fp,-108
81101bec:	2085883a 	add	r2,r4,r2
81101bf0:	10800e04 	addi	r2,r2,56
81101bf4:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101bf8:	e0bfe817 	ldw	r2,-96(fp)
81101bfc:	10800044 	addi	r2,r2,1
81101c00:	e0bfe815 	stw	r2,-96(fp)
81101c04:	e0bfe817 	ldw	r2,-96(fp)
81101c08:	10800290 	cmplti	r2,r2,10
81101c0c:	103fe81e 	bne	r2,zero,81101bb0 <__reset+0xfb0e1bb0>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101c10:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101c14:	00e044f4 	movhi	r3,33043
81101c18:	18e33704 	addi	r3,r3,-29476
81101c1c:	00a044b4 	movhi	r2,33042
81101c20:	1097b404 	addi	r2,r2,24272
81101c24:	1009883a 	mov	r4,r2
81101c28:	008006c4 	movi	r2,27
81101c2c:	100d883a 	mov	r6,r2
81101c30:	200b883a 	mov	r5,r4
81101c34:	1809883a 	mov	r4,r3
81101c38:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
81101c3c:	d0a03117 	ldw	r2,-32572(gp)
81101c40:	016044f4 	movhi	r5,33043
81101c44:	29633704 	addi	r5,r5,-29476
81101c48:	1009883a 	mov	r4,r2
81101c4c:	11100880 	call	81110088 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101c50:	d0a03e17 	ldw	r2,-32520(gp)
#endif
	iTimeStart = alt_nticks();
81101c54:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101c58:	e0bfe617 	ldw	r2,-104(fp)
81101c5c:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101c60:	00810004 	movi	r2,1024
81101c64:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101c68:	e0ffe917 	ldw	r3,-92(fp)
81101c6c:	e0bfef17 	ldw	r2,-68(fp)
81101c70:	1885283a 	div	r2,r3,r2
81101c74:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101c78:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101c7c:	00006206 	br	81101e08 <bDdr2MemoryReadTest+0x3b4>
		iNRemainedLen = uliByteLen - iNPos;
81101c80:	e0bfed17 	ldw	r2,-76(fp)
81101c84:	e0ffe717 	ldw	r3,-100(fp)
81101c88:	1885c83a 	sub	r2,r3,r2
81101c8c:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101c90:	e0bfe917 	ldw	r2,-92(fp)
81101c94:	e0fff217 	ldw	r3,-56(fp)
81101c98:	1880060e 	bge	r3,r2,81101cb4 <bDdr2MemoryReadTest+0x260>
			iNAccessLen = iNRemainedLen;
81101c9c:	e0bff217 	ldw	r2,-56(fp)
81101ca0:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101ca4:	e0ffe917 	ldw	r3,-92(fp)
81101ca8:	e0bfef17 	ldw	r2,-68(fp)
81101cac:	1885283a 	div	r2,r3,r2
81101cb0:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101cb4:	00a044f4 	movhi	r2,33043
81101cb8:	10a37704 	addi	r2,r2,-29220
81101cbc:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101cc0:	e03fe815 	stw	zero,-96(fp)
81101cc4:	00002b06 	br	81101d74 <bDdr2MemoryReadTest+0x320>
			if (*pxSrc++ != *pxDes++) {
81101cc8:	e0bfeb17 	ldw	r2,-84(fp)
81101ccc:	10c00104 	addi	r3,r2,4
81101cd0:	e0ffeb15 	stw	r3,-84(fp)
81101cd4:	10c00017 	ldw	r3,0(r2)
81101cd8:	e0bfea17 	ldw	r2,-88(fp)
81101cdc:	11000104 	addi	r4,r2,4
81101ce0:	e13fea15 	stw	r4,-88(fp)
81101ce4:	10800017 	ldw	r2,0(r2)
81101ce8:	18801f26 	beq	r3,r2,81101d68 <bDdr2MemoryReadTest+0x314>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101cec:	e0bfeb17 	ldw	r2,-84(fp)
81101cf0:	10bfff04 	addi	r2,r2,-4
81101cf4:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101cf8:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101cfc:	00a044f4 	movhi	r2,33043
81101d00:	10a37704 	addi	r2,r2,-29220
81101d04:	e0ffe817 	ldw	r3,-96(fp)
81101d08:	18c7883a 	add	r3,r3,r3
81101d0c:	18c7883a 	add	r3,r3,r3
81101d10:	10c5883a 	add	r2,r2,r3
81101d14:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d18:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101d1c:	e0ffed17 	ldw	r3,-76(fp)
81101d20:	e0bfef17 	ldw	r2,-68(fp)
81101d24:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d28:	e0bfe817 	ldw	r2,-96(fp)
81101d2c:	1885883a 	add	r2,r3,r2
81101d30:	d8800015 	stw	r2,0(sp)
81101d34:	280f883a 	mov	r7,r5
81101d38:	200d883a 	mov	r6,r4
81101d3c:	016044b4 	movhi	r5,33042
81101d40:	2957bb04 	addi	r5,r5,24300
81101d44:	012044f4 	movhi	r4,33043
81101d48:	21233704 	addi	r4,r4,-29476
81101d4c:	111173c0 	call	8111173c <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101d50:	d0a03117 	ldw	r2,-32572(gp)
81101d54:	016044f4 	movhi	r5,33043
81101d58:	29633704 	addi	r5,r5,-29476
81101d5c:	1009883a 	mov	r4,r2
81101d60:	11100880 	call	81110088 <fprintf>
#endif
				bSuccess = FALSE;
81101d64:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d68:	e0bfe817 	ldw	r2,-96(fp)
81101d6c:	10800044 	addi	r2,r2,1
81101d70:	e0bfe815 	stw	r2,-96(fp)
81101d74:	e0ffe817 	ldw	r3,-96(fp)
81101d78:	e0bfec17 	ldw	r2,-80(fp)
81101d7c:	1880020e 	bge	r3,r2,81101d88 <bDdr2MemoryReadTest+0x334>
81101d80:	e0bfe517 	ldw	r2,-108(fp)
81101d84:	103fd01e 	bne	r2,zero,81101cc8 <__reset+0xfb0e1cc8>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101d88:	e0ffed17 	ldw	r3,-76(fp)
81101d8c:	e0bfe917 	ldw	r2,-92(fp)
81101d90:	1885883a 	add	r2,r3,r2
81101d94:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101d98:	e0bfee17 	ldw	r2,-72(fp)
81101d9c:	10800288 	cmpgei	r2,r2,10
81101da0:	1000191e 	bne	r2,zero,81101e08 <bDdr2MemoryReadTest+0x3b4>
81101da4:	e0bfee17 	ldw	r2,-72(fp)
81101da8:	1085883a 	add	r2,r2,r2
81101dac:	1085883a 	add	r2,r2,r2
81101db0:	e0ffe504 	addi	r3,fp,-108
81101db4:	1885883a 	add	r2,r3,r2
81101db8:	10800e04 	addi	r2,r2,56
81101dbc:	10800017 	ldw	r2,0(r2)
81101dc0:	e0ffed17 	ldw	r3,-76(fp)
81101dc4:	18801036 	bltu	r3,r2,81101e08 <bDdr2MemoryReadTest+0x3b4>
			iNProgressIndex++;
81101dc8:	e0bfee17 	ldw	r2,-72(fp)
81101dcc:	10800044 	addi	r2,r2,1
81101dd0:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101dd4:	e0bfee17 	ldw	r2,-72(fp)
81101dd8:	108002a4 	muli	r2,r2,10
81101ddc:	100d883a 	mov	r6,r2
81101de0:	016044b4 	movhi	r5,33042
81101de4:	29579004 	addi	r5,r5,24128
81101de8:	012044f4 	movhi	r4,33043
81101dec:	21233704 	addi	r4,r4,-29476
81101df0:	111173c0 	call	8111173c <sprintf>
			debug(fp, cDebugBuffer);
81101df4:	d0a03117 	ldw	r2,-32572(gp)
81101df8:	016044f4 	movhi	r5,33043
81101dfc:	29633704 	addi	r5,r5,-29476
81101e00:	1009883a 	mov	r4,r2
81101e04:	11100880 	call	81110088 <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101e08:	e0bfe517 	ldw	r2,-108(fp)
81101e0c:	10000326 	beq	r2,zero,81101e1c <bDdr2MemoryReadTest+0x3c8>
81101e10:	e0ffed17 	ldw	r3,-76(fp)
81101e14:	e0bfe717 	ldw	r2,-100(fp)
81101e18:	18bf9936 	bltu	r3,r2,81101c80 <__reset+0xfb0e1c80>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101e1c:	00a044f4 	movhi	r2,33043
81101e20:	10a33704 	addi	r2,r2,-29476
81101e24:	00c00284 	movi	r3,10
81101e28:	10c00005 	stb	r3,0(r2)
81101e2c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101e30:	d0a03117 	ldw	r2,-32572(gp)
81101e34:	016044f4 	movhi	r5,33043
81101e38:	29633704 	addi	r5,r5,-29476
81101e3c:	1009883a 	mov	r4,r2
81101e40:	11100880 	call	81110088 <fprintf>
81101e44:	d0e03e17 	ldw	r3,-32520(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101e48:	e0bff117 	ldw	r2,-60(fp)
81101e4c:	1885c83a 	sub	r2,r3,r2
81101e50:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101e54:	e0bfe517 	ldw	r2,-108(fp)
81101e58:	10001e26 	beq	r2,zero,81101ed4 <bDdr2MemoryReadTest+0x480>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101e5c:	e13ff017 	ldw	r4,-64(fp)
81101e60:	110f30c0 	call	8110f30c <__floatsisf>
81101e64:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101e68:	d0a03d17 	ldw	r2,-32524(gp)
81101e6c:	1009883a 	mov	r4,r2
81101e70:	110f4300 	call	8110f430 <__floatunsisf>
81101e74:	1007883a 	mov	r3,r2
81101e78:	180b883a 	mov	r5,r3
81101e7c:	8009883a 	mov	r4,r16
81101e80:	110ead00 	call	8110ead0 <__divsf3>
81101e84:	1007883a 	mov	r3,r2
81101e88:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101e8c:	1009883a 	mov	r4,r2
81101e90:	110fc380 	call	8110fc38 <__extendsfdf2>
81101e94:	1009883a 	mov	r4,r2
81101e98:	180b883a 	mov	r5,r3
81101e9c:	d9400015 	stw	r5,0(sp)
81101ea0:	200f883a 	mov	r7,r4
81101ea4:	e1bfe717 	ldw	r6,-100(fp)
81101ea8:	016044b4 	movhi	r5,33042
81101eac:	2957c904 	addi	r5,r5,24356
81101eb0:	012044f4 	movhi	r4,33043
81101eb4:	21233704 	addi	r4,r4,-29476
81101eb8:	111173c0 	call	8111173c <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101ebc:	d0a03117 	ldw	r2,-32572(gp)
81101ec0:	016044f4 	movhi	r5,33043
81101ec4:	29633704 	addi	r5,r5,-29476
81101ec8:	1009883a 	mov	r4,r2
81101ecc:	11100880 	call	81110088 <fprintf>
81101ed0:	00000f06 	br	81101f10 <bDdr2MemoryReadTest+0x4bc>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101ed4:	00e044f4 	movhi	r3,33043
81101ed8:	18e33704 	addi	r3,r3,-29476
81101edc:	00a044b4 	movhi	r2,33042
81101ee0:	1097d504 	addi	r2,r2,24404
81101ee4:	1009883a 	mov	r4,r2
81101ee8:	00800544 	movi	r2,21
81101eec:	100d883a 	mov	r6,r2
81101ef0:	200b883a 	mov	r5,r4
81101ef4:	1809883a 	mov	r4,r3
81101ef8:	11111480 	call	81111148 <memcpy>
		debug(fp, cDebugBuffer);
81101efc:	d0a03117 	ldw	r2,-32572(gp)
81101f00:	016044f4 	movhi	r5,33043
81101f04:	29633704 	addi	r5,r5,-29476
81101f08:	1009883a 	mov	r4,r2
81101f0c:	11100880 	call	81110088 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101f10:	00a044f4 	movhi	r2,33043
81101f14:	10a33704 	addi	r2,r2,-29476
81101f18:	00c00284 	movi	r3,10
81101f1c:	10c00005 	stb	r3,0(r2)
81101f20:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101f24:	d0a03117 	ldw	r2,-32572(gp)
81101f28:	016044f4 	movhi	r5,33043
81101f2c:	29633704 	addi	r5,r5,-29476
81101f30:	1009883a 	mov	r4,r2
81101f34:	11100880 	call	81110088 <fprintf>
#endif

	return bSuccess;
81101f38:	e0bfe517 	ldw	r2,-108(fp)
}
81101f3c:	e6fffe04 	addi	sp,fp,-8
81101f40:	dfc00317 	ldw	ra,12(sp)
81101f44:	df000217 	ldw	fp,8(sp)
81101f48:	dc400117 	ldw	r17,4(sp)
81101f4c:	dc000017 	ldw	r16,0(sp)
81101f50:	dec00404 	addi	sp,sp,16
81101f54:	f800283a 	ret

81101f58 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81101f58:	deffec04 	addi	sp,sp,-80
81101f5c:	dfc01315 	stw	ra,76(sp)
81101f60:	df001215 	stw	fp,72(sp)
81101f64:	dcc01115 	stw	r19,68(sp)
81101f68:	dc801015 	stw	r18,64(sp)
81101f6c:	dc400f15 	stw	r17,60(sp)
81101f70:	dc000e15 	stw	r16,56(sp)
81101f74:	df001204 	addi	fp,sp,72
81101f78:	2005883a 	mov	r2,r4
81101f7c:	e17ffa15 	stw	r5,-24(fp)
81101f80:	e1bffb15 	stw	r6,-20(fp)
81101f84:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81101f88:	00e044f4 	movhi	r3,33043
81101f8c:	18e33704 	addi	r3,r3,-29476
81101f90:	00a044b4 	movhi	r2,33042
81101f94:	1097db04 	addi	r2,r2,24428
81101f98:	1009883a 	mov	r4,r2
81101f9c:	00800bc4 	movi	r2,47
81101fa0:	100d883a 	mov	r6,r2
81101fa4:	200b883a 	mov	r5,r4
81101fa8:	1809883a 	mov	r4,r3
81101fac:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
81101fb0:	d0a03117 	ldw	r2,-32572(gp)
81101fb4:	016044f4 	movhi	r5,33043
81101fb8:	29633704 	addi	r5,r5,-29476
81101fbc:	1009883a 	mov	r4,r2
81101fc0:	11100880 	call	81110088 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101fc4:	00800044 	movi	r2,1
81101fc8:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
81101fcc:	e0bff903 	ldbu	r2,-28(fp)
81101fd0:	10000326 	beq	r2,zero,81101fe0 <bDdr2MemoryRandomWriteTest+0x88>
81101fd4:	10800060 	cmpeqi	r2,r2,1
81101fd8:	1000081e 	bne	r2,zero,81101ffc <bDdr2MemoryRandomWriteTest+0xa4>
81101fdc:	00000e06 	br	81102018 <bDdr2MemoryRandomWriteTest+0xc0>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101fe0:	e0bff903 	ldbu	r2,-28(fp)
81101fe4:	1009883a 	mov	r4,r2
81101fe8:	110142c0 	call	8110142c <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101fec:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101ff0:	00a00034 	movhi	r2,32768
81101ff4:	e0bff015 	stw	r2,-64(fp)
		break;
81101ff8:	00001906 	br	81102060 <bDdr2MemoryRandomWriteTest+0x108>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101ffc:	e0bff903 	ldbu	r2,-28(fp)
81102000:	1009883a 	mov	r4,r2
81102004:	110142c0 	call	8110142c <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102008:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
8110200c:	00a00034 	movhi	r2,32768
81102010:	e0bff015 	stw	r2,-64(fp)
		break;
81102014:	00001206 	br	81102060 <bDdr2MemoryRandomWriteTest+0x108>
	default:
		bSuccess = FALSE;
81102018:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110201c:	00e044f4 	movhi	r3,33043
81102020:	18e33704 	addi	r3,r3,-29476
81102024:	00a044b4 	movhi	r2,33042
81102028:	10958c04 	addi	r2,r2,22064
8110202c:	1009883a 	mov	r4,r2
81102030:	00800bc4 	movi	r2,47
81102034:	100d883a 	mov	r6,r2
81102038:	200b883a 	mov	r5,r4
8110203c:	1809883a 	mov	r4,r3
81102040:	11111480 	call	81111148 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102044:	d0a03117 	ldw	r2,-32572(gp)
81102048:	016044f4 	movhi	r5,33043
8110204c:	29633704 	addi	r5,r5,-29476
81102050:	1009883a 	mov	r4,r2
81102054:	11100880 	call	81110088 <fprintf>
		;
#endif
		return bSuccess;
81102058:	e0bff417 	ldw	r2,-48(fp)
8110205c:	0000ce06 	br	81102398 <bDdr2MemoryRandomWriteTest+0x440>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102060:	e0bff017 	ldw	r2,-64(fp)
81102064:	1004d53a 	srli	r2,r2,20
81102068:	100d883a 	mov	r6,r2
8110206c:	016044b4 	movhi	r5,33042
81102070:	29578504 	addi	r5,r5,24084
81102074:	012044f4 	movhi	r4,33043
81102078:	21233704 	addi	r4,r4,-29476
8110207c:	111173c0 	call	8111173c <sprintf>
	debug(fp, cDebugBuffer);
81102080:	d0a03117 	ldw	r2,-32572(gp)
81102084:	016044f4 	movhi	r5,33043
81102088:	29633704 	addi	r5,r5,-29476
8110208c:	1009883a 	mov	r4,r2
81102090:	11100880 	call	81110088 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102094:	d0a03e17 	ldw	r2,-32520(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
81102098:	d0a01415 	stw	r2,-32688(gp)
	uliCurrentState = uliInitialState;
8110209c:	d0a01417 	ldw	r2,-32688(gp)
811020a0:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
811020a4:	e0ffef17 	ldw	r3,-68(fp)
811020a8:	e0bff017 	ldw	r2,-64(fp)
811020ac:	1885883a 	add	r2,r3,r2
811020b0:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
811020b4:	e0fff017 	ldw	r3,-64(fp)
811020b8:	00b33374 	movhi	r2,52429
811020bc:	10b33344 	addi	r2,r2,-13107
811020c0:	1888383a 	mulxuu	r4,r3,r2
811020c4:	1885383a 	mul	r2,r3,r2
811020c8:	1025883a 	mov	r18,r2
811020cc:	2027883a 	mov	r19,r4
811020d0:	9806d13a 	srli	r3,r19,4
811020d4:	e0bfef17 	ldw	r2,-68(fp)
811020d8:	1885883a 	add	r2,r3,r2
811020dc:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
811020e0:	00800144 	movi	r2,5
811020e4:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
811020e8:	00e044f4 	movhi	r3,33043
811020ec:	18e33704 	addi	r3,r3,-29476
811020f0:	00a044b4 	movhi	r2,33042
811020f4:	1097e704 	addi	r2,r2,24476
811020f8:	1009883a 	mov	r4,r2
811020fc:	00800584 	movi	r2,22
81102100:	100d883a 	mov	r6,r2
81102104:	200b883a 	mov	r5,r4
81102108:	1809883a 	mov	r4,r3
8110210c:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
81102110:	d0a03117 	ldw	r2,-32572(gp)
81102114:	016044f4 	movhi	r5,33043
81102118:	29633704 	addi	r5,r5,-29476
8110211c:	1009883a 	mov	r4,r2
81102120:	11100880 	call	81110088 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102124:	e0bffa17 	ldw	r2,-24(fp)
81102128:	10800058 	cmpnei	r2,r2,1
8110212c:	10000a1e 	bne	r2,zero,81102158 <bDdr2MemoryRandomWriteTest+0x200>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102130:	016044b4 	movhi	r5,33042
81102134:	2957ed04 	addi	r5,r5,24500
81102138:	012044f4 	movhi	r4,33043
8110213c:	21233704 	addi	r4,r4,-29476
81102140:	111173c0 	call	8111173c <sprintf>
		debug(fp, cDebugBuffer);
81102144:	d0a03117 	ldw	r2,-32572(gp)
81102148:	016044f4 	movhi	r5,33043
8110214c:	29633704 	addi	r5,r5,-29476
81102150:	1009883a 	mov	r4,r2
81102154:	11100880 	call	81110088 <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
81102158:	e03ff615 	stw	zero,-40(fp)
8110215c:	d0a03e17 	ldw	r2,-32520(gp)

	TimeStart = alt_nticks();
81102160:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102164:	e0bfef17 	ldw	r2,-68(fp)
81102168:	e0bff115 	stw	r2,-60(fp)
8110216c:	00002c06 	br	81102220 <bDdr2MemoryRandomWriteTest+0x2c8>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
81102170:	e0bff804 	addi	r2,fp,-32
81102174:	1009883a 	mov	r4,r2
81102178:	110284c0 	call	8110284c <uliXorshift32>
8110217c:	1007883a 	mov	r3,r2
81102180:	e0bff117 	ldw	r2,-60(fp)
81102184:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
81102188:	e0bffa17 	ldw	r2,-24(fp)
8110218c:	10800060 	cmpeqi	r2,r2,1
81102190:	1009883a 	mov	r4,r2
81102194:	e0bff117 	ldw	r2,-60(fp)
81102198:	e0fff217 	ldw	r3,-56(fp)
8110219c:	1885803a 	cmpltu	r2,r3,r2
811021a0:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
811021a4:	10803fcc 	andi	r2,r2,255
811021a8:	10001a26 	beq	r2,zero,81102214 <bDdr2MemoryRandomWriteTest+0x2bc>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
811021ac:	e0bff303 	ldbu	r2,-52(fp)
811021b0:	100d883a 	mov	r6,r2
811021b4:	016044b4 	movhi	r5,33042
811021b8:	2957ef04 	addi	r5,r5,24508
811021bc:	012044f4 	movhi	r4,33043
811021c0:	21233704 	addi	r4,r4,-29476
811021c4:	111173c0 	call	8111173c <sprintf>
			debug(fp, cDebugBuffer);
811021c8:	d0a03117 	ldw	r2,-32572(gp)
811021cc:	016044f4 	movhi	r5,33043
811021d0:	29633704 	addi	r5,r5,-29476
811021d4:	1009883a 	mov	r4,r2
811021d8:	11100880 	call	81110088 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811021dc:	e0fff017 	ldw	r3,-64(fp)
811021e0:	00b33374 	movhi	r2,52429
811021e4:	10b33344 	addi	r2,r2,-13107
811021e8:	1888383a 	mulxuu	r4,r3,r2
811021ec:	1885383a 	mul	r2,r3,r2
811021f0:	1021883a 	mov	r16,r2
811021f4:	2023883a 	mov	r17,r4
811021f8:	8804d13a 	srli	r2,r17,4
811021fc:	e0fff217 	ldw	r3,-56(fp)
81102200:	1885883a 	add	r2,r3,r2
81102204:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
81102208:	e0bff303 	ldbu	r2,-52(fp)
8110220c:	10800144 	addi	r2,r2,5
81102210:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
81102214:	e0bff117 	ldw	r2,-60(fp)
81102218:	10800104 	addi	r2,r2,4
8110221c:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
81102220:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102224:	e0bff517 	ldw	r2,-44(fp)
81102228:	18bfd136 	bltu	r3,r2,81102170 <__reset+0xfb0e2170>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
8110222c:	11203e80 	call	811203e8 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102230:	e0bffa17 	ldw	r2,-24(fp)
81102234:	10800058 	cmpnei	r2,r2,1
81102238:	10000a1e 	bne	r2,zero,81102264 <bDdr2MemoryRandomWriteTest+0x30c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
8110223c:	016044b4 	movhi	r5,33042
81102240:	2957f204 	addi	r5,r5,24520
81102244:	012044f4 	movhi	r4,33043
81102248:	21233704 	addi	r4,r4,-29476
8110224c:	111173c0 	call	8111173c <sprintf>
		debug(fp, cDebugBuffer);
81102250:	d0a03117 	ldw	r2,-32572(gp)
81102254:	016044f4 	movhi	r5,33043
81102258:	29633704 	addi	r5,r5,-29476
8110225c:	1009883a 	mov	r4,r2
81102260:	11100880 	call	81110088 <fprintf>
#endif
	}

	if (bSuccess) {
81102264:	e0bff417 	ldw	r2,-48(fp)
81102268:	10003126 	beq	r2,zero,81102330 <bDdr2MemoryRandomWriteTest+0x3d8>
		if (bTime == TRUE) {
8110226c:	e0bffb17 	ldw	r2,-20(fp)
81102270:	10800058 	cmpnei	r2,r2,1
81102274:	1000221e 	bne	r2,zero,81102300 <bDdr2MemoryRandomWriteTest+0x3a8>
81102278:	d0e03e17 	ldw	r3,-32520(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8110227c:	e0bff717 	ldw	r2,-36(fp)
81102280:	1885c83a 	sub	r2,r3,r2
81102284:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
81102288:	e13ff617 	ldw	r4,-40(fp)
8110228c:	110f30c0 	call	8110f30c <__floatsisf>
81102290:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102294:	d0a03d17 	ldw	r2,-32524(gp)
81102298:	1009883a 	mov	r4,r2
8110229c:	110f4300 	call	8110f430 <__floatunsisf>
811022a0:	1007883a 	mov	r3,r2
811022a4:	180b883a 	mov	r5,r3
811022a8:	8009883a 	mov	r4,r16
811022ac:	110ead00 	call	8110ead0 <__divsf3>
811022b0:	1007883a 	mov	r3,r2
811022b4:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
811022b8:	1009883a 	mov	r4,r2
811022bc:	110fc380 	call	8110fc38 <__extendsfdf2>
811022c0:	1009883a 	mov	r4,r2
811022c4:	180b883a 	mov	r5,r3
811022c8:	d9400015 	stw	r5,0(sp)
811022cc:	200f883a 	mov	r7,r4
811022d0:	e1bff017 	ldw	r6,-64(fp)
811022d4:	016044b4 	movhi	r5,33042
811022d8:	2957f504 	addi	r5,r5,24532
811022dc:	012044f4 	movhi	r4,33043
811022e0:	21233704 	addi	r4,r4,-29476
811022e4:	111173c0 	call	8111173c <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
811022e8:	d0a03117 	ldw	r2,-32572(gp)
811022ec:	016044f4 	movhi	r5,33043
811022f0:	29633704 	addi	r5,r5,-29476
811022f4:	1009883a 	mov	r4,r2
811022f8:	11100880 	call	81110088 <fprintf>
811022fc:	00001b06 	br	8110236c <bDdr2MemoryRandomWriteTest+0x414>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
81102300:	e1bff017 	ldw	r6,-64(fp)
81102304:	016044b4 	movhi	r5,33042
81102308:	29580104 	addi	r5,r5,24580
8110230c:	012044f4 	movhi	r4,33043
81102310:	21233704 	addi	r4,r4,-29476
81102314:	111173c0 	call	8111173c <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102318:	d0a03117 	ldw	r2,-32572(gp)
8110231c:	016044f4 	movhi	r5,33043
81102320:	29633704 	addi	r5,r5,-29476
81102324:	1009883a 	mov	r4,r2
81102328:	11100880 	call	81110088 <fprintf>
8110232c:	00000f06 	br	8110236c <bDdr2MemoryRandomWriteTest+0x414>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102330:	00e044f4 	movhi	r3,33043
81102334:	18e33704 	addi	r3,r3,-29476
81102338:	00a044b4 	movhi	r2,33042
8110233c:	10979e04 	addi	r2,r2,24184
81102340:	1009883a 	mov	r4,r2
81102344:	00800584 	movi	r2,22
81102348:	100d883a 	mov	r6,r2
8110234c:	200b883a 	mov	r5,r4
81102350:	1809883a 	mov	r4,r3
81102354:	11111480 	call	81111148 <memcpy>
		debug(fp, cDebugBuffer);
81102358:	d0a03117 	ldw	r2,-32572(gp)
8110235c:	016044f4 	movhi	r5,33043
81102360:	29633704 	addi	r5,r5,-29476
81102364:	1009883a 	mov	r4,r2
81102368:	11100880 	call	81110088 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110236c:	00a044f4 	movhi	r2,33043
81102370:	10a33704 	addi	r2,r2,-29476
81102374:	00c00284 	movi	r3,10
81102378:	10c00005 	stb	r3,0(r2)
8110237c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102380:	d0a03117 	ldw	r2,-32572(gp)
81102384:	016044f4 	movhi	r5,33043
81102388:	29633704 	addi	r5,r5,-29476
8110238c:	1009883a 	mov	r4,r2
81102390:	11100880 	call	81110088 <fprintf>
#endif

	return bSuccess;
81102394:	e0bff417 	ldw	r2,-48(fp)
}
81102398:	e6fffc04 	addi	sp,fp,-16
8110239c:	dfc00517 	ldw	ra,20(sp)
811023a0:	df000417 	ldw	fp,16(sp)
811023a4:	dcc00317 	ldw	r19,12(sp)
811023a8:	dc800217 	ldw	r18,8(sp)
811023ac:	dc400117 	ldw	r17,4(sp)
811023b0:	dc000017 	ldw	r16,0(sp)
811023b4:	dec00604 	addi	sp,sp,24
811023b8:	f800283a 	ret

811023bc <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
811023bc:	deffec04 	addi	sp,sp,-80
811023c0:	dfc01315 	stw	ra,76(sp)
811023c4:	df001215 	stw	fp,72(sp)
811023c8:	dcc01115 	stw	r19,68(sp)
811023cc:	dc801015 	stw	r18,64(sp)
811023d0:	dc400f15 	stw	r17,60(sp)
811023d4:	dc000e15 	stw	r16,56(sp)
811023d8:	df001204 	addi	fp,sp,72
811023dc:	2005883a 	mov	r2,r4
811023e0:	e17ffa15 	stw	r5,-24(fp)
811023e4:	e1bffb15 	stw	r6,-20(fp)
811023e8:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
811023ec:	00e044f4 	movhi	r3,33043
811023f0:	18e33704 	addi	r3,r3,-29476
811023f4:	00a044b4 	movhi	r2,33042
811023f8:	10980b04 	addi	r2,r2,24620
811023fc:	1009883a 	mov	r4,r2
81102400:	00800b84 	movi	r2,46
81102404:	100d883a 	mov	r6,r2
81102408:	200b883a 	mov	r5,r4
8110240c:	1809883a 	mov	r4,r3
81102410:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
81102414:	d0a03117 	ldw	r2,-32572(gp)
81102418:	016044f4 	movhi	r5,33043
8110241c:	29633704 	addi	r5,r5,-29476
81102420:	1009883a 	mov	r4,r2
81102424:	11100880 	call	81110088 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102428:	00800044 	movi	r2,1
8110242c:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
81102430:	e0bff903 	ldbu	r2,-28(fp)
81102434:	10000326 	beq	r2,zero,81102444 <bDdr2MemoryRandomReadTest+0x88>
81102438:	10800060 	cmpeqi	r2,r2,1
8110243c:	1000081e 	bne	r2,zero,81102460 <bDdr2MemoryRandomReadTest+0xa4>
81102440:	00000e06 	br	8110247c <bDdr2MemoryRandomReadTest+0xc0>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102444:	e0bff903 	ldbu	r2,-28(fp)
81102448:	1009883a 	mov	r4,r2
8110244c:	110142c0 	call	8110142c <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102450:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102454:	00a00034 	movhi	r2,32768
81102458:	e0bff115 	stw	r2,-60(fp)
		break;
8110245c:	00001906 	br	811024c4 <bDdr2MemoryRandomReadTest+0x108>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102460:	e0bff903 	ldbu	r2,-28(fp)
81102464:	1009883a 	mov	r4,r2
81102468:	110142c0 	call	8110142c <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110246c:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102470:	00a00034 	movhi	r2,32768
81102474:	e0bff115 	stw	r2,-60(fp)
		break;
81102478:	00001206 	br	811024c4 <bDdr2MemoryRandomReadTest+0x108>
	default:
		bSuccess = FALSE;
8110247c:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102480:	00e044f4 	movhi	r3,33043
81102484:	18e33704 	addi	r3,r3,-29476
81102488:	00a044b4 	movhi	r2,33042
8110248c:	10958c04 	addi	r2,r2,22064
81102490:	1009883a 	mov	r4,r2
81102494:	00800bc4 	movi	r2,47
81102498:	100d883a 	mov	r6,r2
8110249c:	200b883a 	mov	r5,r4
811024a0:	1809883a 	mov	r4,r3
811024a4:	11111480 	call	81111148 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811024a8:	d0a03117 	ldw	r2,-32572(gp)
811024ac:	016044f4 	movhi	r5,33043
811024b0:	29633704 	addi	r5,r5,-29476
811024b4:	1009883a 	mov	r4,r2
811024b8:	11100880 	call	81110088 <fprintf>
		;
#endif
		return bSuccess;
811024bc:	e0bfef17 	ldw	r2,-68(fp)
811024c0:	0000d906 	br	81102828 <bDdr2MemoryRandomReadTest+0x46c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811024c4:	e0bff117 	ldw	r2,-60(fp)
811024c8:	1004d53a 	srli	r2,r2,20
811024cc:	100d883a 	mov	r6,r2
811024d0:	016044b4 	movhi	r5,33042
811024d4:	29578504 	addi	r5,r5,24084
811024d8:	012044f4 	movhi	r4,33043
811024dc:	21233704 	addi	r4,r4,-29476
811024e0:	111173c0 	call	8111173c <sprintf>
	debug(fp, cDebugBuffer);
811024e4:	d0a03117 	ldw	r2,-32572(gp)
811024e8:	016044f4 	movhi	r5,33043
811024ec:	29633704 	addi	r5,r5,-29476
811024f0:	1009883a 	mov	r4,r2
811024f4:	11100880 	call	81110088 <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
811024f8:	d0a01417 	ldw	r2,-32688(gp)
811024fc:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102500:	e0fff017 	ldw	r3,-64(fp)
81102504:	e0bff117 	ldw	r2,-60(fp)
81102508:	1885883a 	add	r2,r3,r2
8110250c:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102510:	e0fff117 	ldw	r3,-60(fp)
81102514:	00b33374 	movhi	r2,52429
81102518:	10b33344 	addi	r2,r2,-13107
8110251c:	1888383a 	mulxuu	r4,r3,r2
81102520:	1885383a 	mul	r2,r3,r2
81102524:	1025883a 	mov	r18,r2
81102528:	2027883a 	mov	r19,r4
8110252c:	9806d13a 	srli	r3,r19,4
81102530:	e0bff017 	ldw	r2,-64(fp)
81102534:	1885883a 	add	r2,r3,r2
81102538:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
8110253c:	00800144 	movi	r2,5
81102540:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
81102544:	00e044f4 	movhi	r3,33043
81102548:	18e33704 	addi	r3,r3,-29476
8110254c:	00a044b4 	movhi	r2,33042
81102550:	10981704 	addi	r2,r2,24668
81102554:	1009883a 	mov	r4,r2
81102558:	00800604 	movi	r2,24
8110255c:	100d883a 	mov	r6,r2
81102560:	200b883a 	mov	r5,r4
81102564:	1809883a 	mov	r4,r3
81102568:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
8110256c:	d0a03117 	ldw	r2,-32572(gp)
81102570:	016044f4 	movhi	r5,33043
81102574:	29633704 	addi	r5,r5,-29476
81102578:	1009883a 	mov	r4,r2
8110257c:	11100880 	call	81110088 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102580:	e0bffa17 	ldw	r2,-24(fp)
81102584:	10800058 	cmpnei	r2,r2,1
81102588:	10000a1e 	bne	r2,zero,811025b4 <bDdr2MemoryRandomReadTest+0x1f8>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
8110258c:	016044b4 	movhi	r5,33042
81102590:	2957ed04 	addi	r5,r5,24500
81102594:	012044f4 	movhi	r4,33043
81102598:	21233704 	addi	r4,r4,-29476
8110259c:	111173c0 	call	8111173c <sprintf>
		debug(fp, cDebugBuffer);
811025a0:	d0a03117 	ldw	r2,-32572(gp)
811025a4:	016044f4 	movhi	r5,33043
811025a8:	29633704 	addi	r5,r5,-29476
811025ac:	1009883a 	mov	r4,r2
811025b0:	11100880 	call	81110088 <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
811025b4:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811025b8:	d0a03e17 	ldw	r2,-32520(gp)

	TimeStart = alt_nticks();
811025bc:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
811025c0:	e0bff017 	ldw	r2,-64(fp)
811025c4:	e0bff215 	stw	r2,-56(fp)
811025c8:	00003a06 	br	811026b4 <bDdr2MemoryRandomReadTest+0x2f8>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
811025cc:	e0bff804 	addi	r2,fp,-32
811025d0:	1009883a 	mov	r4,r2
811025d4:	110284c0 	call	8110284c <uliXorshift32>
811025d8:	1007883a 	mov	r3,r2
811025dc:	e0bff217 	ldw	r2,-56(fp)
811025e0:	10800017 	ldw	r2,0(r2)
811025e4:	18801026 	beq	r3,r2,81102628 <bDdr2MemoryRandomReadTest+0x26c>
			bSuccess = FALSE;
811025e8:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
811025ec:	e0bffa17 	ldw	r2,-24(fp)
811025f0:	10800058 	cmpnei	r2,r2,1
811025f4:	10000c1e 	bne	r2,zero,81102628 <bDdr2MemoryRandomReadTest+0x26c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
811025f8:	e0bff217 	ldw	r2,-56(fp)
811025fc:	100d883a 	mov	r6,r2
81102600:	016044b4 	movhi	r5,33042
81102604:	29581d04 	addi	r5,r5,24692
81102608:	012044f4 	movhi	r4,33043
8110260c:	21233704 	addi	r4,r4,-29476
81102610:	111173c0 	call	8111173c <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
81102614:	d0a03117 	ldw	r2,-32572(gp)
81102618:	016044f4 	movhi	r5,33043
8110261c:	29633704 	addi	r5,r5,-29476
81102620:	1009883a 	mov	r4,r2
81102624:	11100880 	call	81110088 <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102628:	e0bffa17 	ldw	r2,-24(fp)
8110262c:	10800058 	cmpnei	r2,r2,1
81102630:	10001d1e 	bne	r2,zero,811026a8 <bDdr2MemoryRandomReadTest+0x2ec>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
81102634:	e0bff217 	ldw	r2,-56(fp)
81102638:	e0fff317 	ldw	r3,-52(fp)
8110263c:	18801a2e 	bgeu	r3,r2,811026a8 <bDdr2MemoryRandomReadTest+0x2ec>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102640:	e0bff403 	ldbu	r2,-48(fp)
81102644:	100d883a 	mov	r6,r2
81102648:	016044b4 	movhi	r5,33042
8110264c:	2957ef04 	addi	r5,r5,24508
81102650:	012044f4 	movhi	r4,33043
81102654:	21233704 	addi	r4,r4,-29476
81102658:	111173c0 	call	8111173c <sprintf>
			debug(fp, cDebugBuffer);
8110265c:	d0a03117 	ldw	r2,-32572(gp)
81102660:	016044f4 	movhi	r5,33043
81102664:	29633704 	addi	r5,r5,-29476
81102668:	1009883a 	mov	r4,r2
8110266c:	11100880 	call	81110088 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
81102670:	e0fff117 	ldw	r3,-60(fp)
81102674:	00b33374 	movhi	r2,52429
81102678:	10b33344 	addi	r2,r2,-13107
8110267c:	1888383a 	mulxuu	r4,r3,r2
81102680:	1885383a 	mul	r2,r3,r2
81102684:	1021883a 	mov	r16,r2
81102688:	2023883a 	mov	r17,r4
8110268c:	8804d13a 	srli	r2,r17,4
81102690:	e0fff317 	ldw	r3,-52(fp)
81102694:	1885883a 	add	r2,r3,r2
81102698:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
8110269c:	e0bff403 	ldbu	r2,-48(fp)
811026a0:	10800144 	addi	r2,r2,5
811026a4:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
811026a8:	e0bff217 	ldw	r2,-56(fp)
811026ac:	10800104 	addi	r2,r2,4
811026b0:	e0bff215 	stw	r2,-56(fp)
811026b4:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
811026b8:	e0bff517 	ldw	r2,-44(fp)
811026bc:	18bfc336 	bltu	r3,r2,811025cc <__reset+0xfb0e25cc>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
811026c0:	e0bffa17 	ldw	r2,-24(fp)
811026c4:	10800058 	cmpnei	r2,r2,1
811026c8:	10000a1e 	bne	r2,zero,811026f4 <bDdr2MemoryRandomReadTest+0x338>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811026cc:	016044b4 	movhi	r5,33042
811026d0:	2957f204 	addi	r5,r5,24520
811026d4:	012044f4 	movhi	r4,33043
811026d8:	21233704 	addi	r4,r4,-29476
811026dc:	111173c0 	call	8111173c <sprintf>
		debug(fp, cDebugBuffer);
811026e0:	d0a03117 	ldw	r2,-32572(gp)
811026e4:	016044f4 	movhi	r5,33043
811026e8:	29633704 	addi	r5,r5,-29476
811026ec:	1009883a 	mov	r4,r2
811026f0:	11100880 	call	81110088 <fprintf>
#endif
	}

	if (bSuccess) {
811026f4:	e0bfef17 	ldw	r2,-68(fp)
811026f8:	10003126 	beq	r2,zero,811027c0 <bDdr2MemoryRandomReadTest+0x404>
		if (bTime == TRUE) {
811026fc:	e0bffb17 	ldw	r2,-20(fp)
81102700:	10800058 	cmpnei	r2,r2,1
81102704:	1000221e 	bne	r2,zero,81102790 <bDdr2MemoryRandomReadTest+0x3d4>
81102708:	d0e03e17 	ldw	r3,-32520(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8110270c:	e0bff717 	ldw	r2,-36(fp)
81102710:	1885c83a 	sub	r2,r3,r2
81102714:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
81102718:	e13ff617 	ldw	r4,-40(fp)
8110271c:	110f30c0 	call	8110f30c <__floatsisf>
81102720:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102724:	d0a03d17 	ldw	r2,-32524(gp)
81102728:	1009883a 	mov	r4,r2
8110272c:	110f4300 	call	8110f430 <__floatunsisf>
81102730:	1007883a 	mov	r3,r2
81102734:	180b883a 	mov	r5,r3
81102738:	8009883a 	mov	r4,r16
8110273c:	110ead00 	call	8110ead0 <__divsf3>
81102740:	1007883a 	mov	r3,r2
81102744:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
81102748:	1009883a 	mov	r4,r2
8110274c:	110fc380 	call	8110fc38 <__extendsfdf2>
81102750:	1009883a 	mov	r4,r2
81102754:	180b883a 	mov	r5,r3
81102758:	d9400015 	stw	r5,0(sp)
8110275c:	200f883a 	mov	r7,r4
81102760:	e1bff117 	ldw	r6,-60(fp)
81102764:	016044b4 	movhi	r5,33042
81102768:	29582504 	addi	r5,r5,24724
8110276c:	012044f4 	movhi	r4,33043
81102770:	21233704 	addi	r4,r4,-29476
81102774:	111173c0 	call	8111173c <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
81102778:	d0a03117 	ldw	r2,-32572(gp)
8110277c:	016044f4 	movhi	r5,33043
81102780:	29633704 	addi	r5,r5,-29476
81102784:	1009883a 	mov	r4,r2
81102788:	11100880 	call	81110088 <fprintf>
8110278c:	00001b06 	br	811027fc <bDdr2MemoryRandomReadTest+0x440>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
81102790:	e1bff117 	ldw	r6,-60(fp)
81102794:	016044b4 	movhi	r5,33042
81102798:	29583104 	addi	r5,r5,24772
8110279c:	012044f4 	movhi	r4,33043
811027a0:	21233704 	addi	r4,r4,-29476
811027a4:	111173c0 	call	8111173c <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
811027a8:	d0a03117 	ldw	r2,-32572(gp)
811027ac:	016044f4 	movhi	r5,33043
811027b0:	29633704 	addi	r5,r5,-29476
811027b4:	1009883a 	mov	r4,r2
811027b8:	11100880 	call	81110088 <fprintf>
811027bc:	00000f06 	br	811027fc <bDdr2MemoryRandomReadTest+0x440>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
811027c0:	00e044f4 	movhi	r3,33043
811027c4:	18e33704 	addi	r3,r3,-29476
811027c8:	00a044b4 	movhi	r2,33042
811027cc:	1097d504 	addi	r2,r2,24404
811027d0:	1009883a 	mov	r4,r2
811027d4:	00800544 	movi	r2,21
811027d8:	100d883a 	mov	r6,r2
811027dc:	200b883a 	mov	r5,r4
811027e0:	1809883a 	mov	r4,r3
811027e4:	11111480 	call	81111148 <memcpy>
		debug(fp, cDebugBuffer);
811027e8:	d0a03117 	ldw	r2,-32572(gp)
811027ec:	016044f4 	movhi	r5,33043
811027f0:	29633704 	addi	r5,r5,-29476
811027f4:	1009883a 	mov	r4,r2
811027f8:	11100880 	call	81110088 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811027fc:	00a044f4 	movhi	r2,33043
81102800:	10a33704 	addi	r2,r2,-29476
81102804:	00c00284 	movi	r3,10
81102808:	10c00005 	stb	r3,0(r2)
8110280c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102810:	d0a03117 	ldw	r2,-32572(gp)
81102814:	016044f4 	movhi	r5,33043
81102818:	29633704 	addi	r5,r5,-29476
8110281c:	1009883a 	mov	r4,r2
81102820:	11100880 	call	81110088 <fprintf>
#endif

	return bSuccess;
81102824:	e0bfef17 	ldw	r2,-68(fp)
}
81102828:	e6fffc04 	addi	sp,fp,-16
8110282c:	dfc00517 	ldw	ra,20(sp)
81102830:	df000417 	ldw	fp,16(sp)
81102834:	dcc00317 	ldw	r19,12(sp)
81102838:	dc800217 	ldw	r18,8(sp)
8110283c:	dc400117 	ldw	r17,4(sp)
81102840:	dc000017 	ldw	r16,0(sp)
81102844:	dec00604 	addi	sp,sp,24
81102848:	f800283a 	ret

8110284c <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
8110284c:	defffd04 	addi	sp,sp,-12
81102850:	df000215 	stw	fp,8(sp)
81102854:	df000204 	addi	fp,sp,8
81102858:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
8110285c:	e0bfff17 	ldw	r2,-4(fp)
81102860:	10800017 	ldw	r2,0(r2)
81102864:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
81102868:	e0bffe17 	ldw	r2,-8(fp)
8110286c:	1004937a 	slli	r2,r2,13
81102870:	e0fffe17 	ldw	r3,-8(fp)
81102874:	1884f03a 	xor	r2,r3,r2
81102878:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
8110287c:	e0bffe17 	ldw	r2,-8(fp)
81102880:	1004d47a 	srli	r2,r2,17
81102884:	e0fffe17 	ldw	r3,-8(fp)
81102888:	1884f03a 	xor	r2,r3,r2
8110288c:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81102890:	e0bffe17 	ldw	r2,-8(fp)
81102894:	1004917a 	slli	r2,r2,5
81102898:	e0fffe17 	ldw	r3,-8(fp)
8110289c:	1884f03a 	xor	r2,r3,r2
811028a0:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
811028a4:	e0bfff17 	ldw	r2,-4(fp)
811028a8:	e0fffe17 	ldw	r3,-8(fp)
811028ac:	10c00015 	stw	r3,0(r2)

	return uliX;
811028b0:	e0bffe17 	ldw	r2,-8(fp)
}
811028b4:	e037883a 	mov	sp,fp
811028b8:	df000017 	ldw	fp,0(sp)
811028bc:	dec00104 	addi	sp,sp,4
811028c0:	f800283a 	ret

811028c4 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
811028c4:	deffef04 	addi	sp,sp,-68
811028c8:	dfc01015 	stw	ra,64(sp)
811028cc:	df000f15 	stw	fp,60(sp)
811028d0:	df000f04 	addi	fp,sp,60
811028d4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
811028d8:	00800044 	movi	r2,1
811028dc:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
811028e0:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
811028e4:	00800204 	movi	r2,8
811028e8:	e0bffc15 	stw	r2,-16(fp)
811028ec:	00800104 	movi	r2,4
811028f0:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
811028f4:	00800044 	movi	r2,1
811028f8:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
811028fc:	00800044 	movi	r2,1
81102900:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102904:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102908:	e03ff515 	stw	zero,-44(fp)
8110290c:	00009206 	br	81102b58 <POWER_Read+0x294>
		NextChannel = 0;
81102910:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81102914:	e0bff517 	ldw	r2,-44(fp)
81102918:	10c03fcc 	andi	r3,r2,255
8110291c:	e13ffa03 	ldbu	r4,-24(fp)
81102920:	e0bfff17 	ldw	r2,-4(fp)
81102924:	d8800115 	stw	r2,4(sp)
81102928:	e0bff917 	ldw	r2,-28(fp)
8110292c:	d8800015 	stw	r2,0(sp)
81102930:	e1fff817 	ldw	r7,-32(fp)
81102934:	e1bff717 	ldw	r6,-36(fp)
81102938:	200b883a 	mov	r5,r4
8110293c:	1809883a 	mov	r4,r3
81102940:	110aa1c0 	call	8110aa1c <POWER_SPI_RW>
81102944:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81102948:	e03ff415 	stw	zero,-48(fp)
8110294c:	00007406 	br	81102b20 <POWER_Read+0x25c>
			NextChannel = i + 1;
81102950:	e0bff417 	ldw	r2,-48(fp)
81102954:	10800044 	addi	r2,r2,1
81102958:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
8110295c:	e0bff517 	ldw	r2,-44(fp)
81102960:	10c03fcc 	andi	r3,r2,255
81102964:	e13ffa03 	ldbu	r4,-24(fp)
81102968:	e0bffe04 	addi	r2,fp,-8
8110296c:	d8800115 	stw	r2,4(sp)
81102970:	e0bff917 	ldw	r2,-28(fp)
81102974:	d8800015 	stw	r2,0(sp)
81102978:	e1fff817 	ldw	r7,-32(fp)
8110297c:	e1bff717 	ldw	r6,-36(fp)
81102980:	200b883a 	mov	r5,r4
81102984:	1809883a 	mov	r4,r3
81102988:	110aa1c0 	call	8110aa1c <POWER_SPI_RW>
8110298c:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
81102990:	e0bff317 	ldw	r2,-52(fp)
81102994:	10005026 	beq	r2,zero,81102ad8 <POWER_Read+0x214>
				HEAD = (Value32 >> 30) & 0x03;
81102998:	e0bffe17 	ldw	r2,-8(fp)
8110299c:	1004d7ba 	srli	r2,r2,30
811029a0:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
811029a4:	e0bffe17 	ldw	r2,-8(fp)
811029a8:	1004d07a 	srli	r2,r2,1
811029ac:	108001cc 	andi	r2,r2,7
811029b0:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
811029b4:	e0bffe17 	ldw	r2,-8(fp)
811029b8:	1004d13a 	srli	r2,r2,4
811029bc:	1080004c 	andi	r2,r2,1
811029c0:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
811029c4:	e0bffe17 	ldw	r2,-8(fp)
811029c8:	1004d17a 	srli	r2,r2,5
811029cc:	1080004c 	andi	r2,r2,1
811029d0:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
811029d4:	e0bffe17 	ldw	r2,-8(fp)
811029d8:	1080004c 	andi	r2,r2,1
811029dc:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
811029e0:	e0bffa43 	ldbu	r2,-23(fp)
811029e4:	10000d26 	beq	r2,zero,81102a1c <POWER_Read+0x158>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
811029e8:	e1bff417 	ldw	r6,-48(fp)
811029ec:	016044b4 	movhi	r5,33042
811029f0:	29583b04 	addi	r5,r5,24812
811029f4:	012044f4 	movhi	r4,33043
811029f8:	21233704 	addi	r4,r4,-29476
811029fc:	111173c0 	call	8111173c <sprintf>
					debug(fp, cDebugBuffer);
81102a00:	d0a03117 	ldw	r2,-32572(gp)
81102a04:	016044f4 	movhi	r5,33043
81102a08:	29633704 	addi	r5,r5,-29476
81102a0c:	1009883a 	mov	r4,r2
81102a10:	11100880 	call	81110088 <fprintf>
#endif
					bSuccess = FALSE;
81102a14:	e03ff315 	stw	zero,-52(fp)
81102a18:	00002206 	br	81102aa4 <POWER_Read+0x1e0>
				} else if (Channel != i) {
81102a1c:	e0fffa83 	ldbu	r3,-22(fp)
81102a20:	e0bff417 	ldw	r2,-48(fp)
81102a24:	18801026 	beq	r3,r2,81102a68 <POWER_Read+0x1a4>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
81102a28:	e0bffa83 	ldbu	r2,-22(fp)
81102a2c:	d8800015 	stw	r2,0(sp)
81102a30:	e1fff417 	ldw	r7,-48(fp)
81102a34:	e1bff417 	ldw	r6,-48(fp)
81102a38:	016044b4 	movhi	r5,33042
81102a3c:	29584104 	addi	r5,r5,24836
81102a40:	012044f4 	movhi	r4,33043
81102a44:	21233704 	addi	r4,r4,-29476
81102a48:	111173c0 	call	8111173c <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
81102a4c:	d0a03117 	ldw	r2,-32572(gp)
81102a50:	016044f4 	movhi	r5,33043
81102a54:	29633704 	addi	r5,r5,-29476
81102a58:	1009883a 	mov	r4,r2
81102a5c:	11100880 	call	81110088 <fprintf>
#endif
					bSuccess = FALSE;
81102a60:	e03ff315 	stw	zero,-52(fp)
81102a64:	00000f06 	br	81102aa4 <POWER_Read+0x1e0>
				} else if (SIGN ^ bSIGN) {
81102a68:	e0fffac3 	ldbu	r3,-21(fp)
81102a6c:	e0bff817 	ldw	r2,-32(fp)
81102a70:	18800c26 	beq	r3,r2,81102aa4 <POWER_Read+0x1e0>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
81102a74:	e1bff417 	ldw	r6,-48(fp)
81102a78:	016044b4 	movhi	r5,33042
81102a7c:	29584d04 	addi	r5,r5,24884
81102a80:	012044f4 	movhi	r4,33043
81102a84:	21233704 	addi	r4,r4,-29476
81102a88:	111173c0 	call	8111173c <sprintf>
					debug(fp, cDebugBuffer);
81102a8c:	d0a03117 	ldw	r2,-32572(gp)
81102a90:	016044f4 	movhi	r5,33043
81102a94:	29633704 	addi	r5,r5,-29476
81102a98:	1009883a 	mov	r4,r2
81102a9c:	11100880 	call	81110088 <fprintf>
#endif
					bSuccess = FALSE;
81102aa0:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81102aa4:	e0bff317 	ldw	r2,-52(fp)
81102aa8:	10001a26 	beq	r2,zero,81102b14 <POWER_Read+0x250>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81102aac:	e0bff617 	ldw	r2,-40(fp)
81102ab0:	10c00044 	addi	r3,r2,1
81102ab4:	e0fff615 	stw	r3,-40(fp)
81102ab8:	1085883a 	add	r2,r2,r2
81102abc:	1085883a 	add	r2,r2,r2
81102ac0:	1007883a 	mov	r3,r2
81102ac4:	e0bfff17 	ldw	r2,-4(fp)
81102ac8:	10c5883a 	add	r2,r2,r3
81102acc:	e0fffe17 	ldw	r3,-8(fp)
81102ad0:	10c00015 	stw	r3,0(r2)
81102ad4:	00000f06 	br	81102b14 <POWER_Read+0x250>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
81102ad8:	00e044f4 	movhi	r3,33043
81102adc:	18e33704 	addi	r3,r3,-29476
81102ae0:	00a044b4 	movhi	r2,33042
81102ae4:	10985304 	addi	r2,r2,24908
81102ae8:	1009883a 	mov	r4,r2
81102aec:	00800444 	movi	r2,17
81102af0:	100d883a 	mov	r6,r2
81102af4:	200b883a 	mov	r5,r4
81102af8:	1809883a 	mov	r4,r3
81102afc:	11111480 	call	81111148 <memcpy>
				debug(fp, cDebugBuffer);
81102b00:	d0a03117 	ldw	r2,-32572(gp)
81102b04:	016044f4 	movhi	r5,33043
81102b08:	29633704 	addi	r5,r5,-29476
81102b0c:	1009883a 	mov	r4,r2
81102b10:	11100880 	call	81110088 <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81102b14:	e0bff417 	ldw	r2,-48(fp)
81102b18:	10800044 	addi	r2,r2,1
81102b1c:	e0bff415 	stw	r2,-48(fp)
81102b20:	e0bff517 	ldw	r2,-44(fp)
81102b24:	1085883a 	add	r2,r2,r2
81102b28:	1085883a 	add	r2,r2,r2
81102b2c:	e0fff304 	addi	r3,fp,-52
81102b30:	1885883a 	add	r2,r3,r2
81102b34:	10800904 	addi	r2,r2,36
81102b38:	10800017 	ldw	r2,0(r2)
81102b3c:	e0fff417 	ldw	r3,-48(fp)
81102b40:	1880020e 	bge	r3,r2,81102b4c <POWER_Read+0x288>
81102b44:	e0bff317 	ldw	r2,-52(fp)
81102b48:	103f811e 	bne	r2,zero,81102950 <__reset+0xfb0e2950>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102b4c:	e0bff517 	ldw	r2,-44(fp)
81102b50:	10800044 	addi	r2,r2,1
81102b54:	e0bff515 	stw	r2,-44(fp)
81102b58:	e0bff517 	ldw	r2,-44(fp)
81102b5c:	10800088 	cmpgei	r2,r2,2
81102b60:	1000021e 	bne	r2,zero,81102b6c <POWER_Read+0x2a8>
81102b64:	e0bff317 	ldw	r2,-52(fp)
81102b68:	103f691e 	bne	r2,zero,81102910 <__reset+0xfb0e2910>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
81102b6c:	e0bff317 	ldw	r2,-52(fp)
}
81102b70:	e037883a 	mov	sp,fp
81102b74:	dfc00117 	ldw	ra,4(sp)
81102b78:	df000017 	ldw	fp,0(sp)
81102b7c:	dec00204 	addi	sp,sp,8
81102b80:	f800283a 	ret

81102b84 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81102b84:	defff904 	addi	sp,sp,-28
81102b88:	dfc00615 	stw	ra,24(sp)
81102b8c:	df000515 	stw	fp,20(sp)
81102b90:	df000504 	addi	fp,sp,20
81102b94:	e13ffe15 	stw	r4,-8(fp)
81102b98:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81102b9c:	00800c04 	movi	r2,48
81102ba0:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81102ba4:	e0bffd83 	ldbu	r2,-10(fp)
81102ba8:	10c03fcc 	andi	r3,r2,255
81102bac:	18c0201c 	xori	r3,r3,128
81102bb0:	18ffe004 	addi	r3,r3,-128
81102bb4:	e0bffdc4 	addi	r2,fp,-9
81102bb8:	d8800015 	stw	r2,0(sp)
81102bbc:	000f883a 	mov	r7,zero
81102bc0:	180d883a 	mov	r6,r3
81102bc4:	01600034 	movhi	r5,32768
81102bc8:	29426004 	addi	r5,r5,2432
81102bcc:	01200034 	movhi	r4,32768
81102bd0:	21026404 	addi	r4,r4,2448
81102bd4:	110997c0 	call	8110997c <I2C_Read>
81102bd8:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
81102bdc:	e0bffc17 	ldw	r2,-16(fp)
81102be0:	10000226 	beq	r2,zero,81102bec <TEMP_Read+0x68>
		BoardTemp = Data;
81102be4:	e0bffdc3 	ldbu	r2,-9(fp)
81102be8:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
81102bec:	e0bffc17 	ldw	r2,-16(fp)
81102bf0:	10001226 	beq	r2,zero,81102c3c <TEMP_Read+0xb8>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
81102bf4:	e0bffd83 	ldbu	r2,-10(fp)
81102bf8:	10c03fcc 	andi	r3,r2,255
81102bfc:	18c0201c 	xori	r3,r3,128
81102c00:	18ffe004 	addi	r3,r3,-128
81102c04:	e0bffdc4 	addi	r2,fp,-9
81102c08:	d8800015 	stw	r2,0(sp)
81102c0c:	01c00044 	movi	r7,1
81102c10:	180d883a 	mov	r6,r3
81102c14:	01600034 	movhi	r5,32768
81102c18:	29426004 	addi	r5,r5,2432
81102c1c:	01200034 	movhi	r4,32768
81102c20:	21026404 	addi	r4,r4,2448
81102c24:	110997c0 	call	8110997c <I2C_Read>
81102c28:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
81102c2c:	e0bffc17 	ldw	r2,-16(fp)
81102c30:	10000226 	beq	r2,zero,81102c3c <TEMP_Read+0xb8>
			FpgaTemp = Data;
81102c34:	e0bffdc3 	ldbu	r2,-9(fp)
81102c38:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
81102c3c:	e0bffc17 	ldw	r2,-16(fp)
81102c40:	10000626 	beq	r2,zero,81102c5c <TEMP_Read+0xd8>
		*pFpgaTemp = FpgaTemp;
81102c44:	e0bffe17 	ldw	r2,-8(fp)
81102c48:	e0fffd03 	ldbu	r3,-12(fp)
81102c4c:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
81102c50:	e0bfff17 	ldw	r2,-4(fp)
81102c54:	e0fffd43 	ldbu	r3,-11(fp)
81102c58:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
81102c5c:	e0bffc17 	ldw	r2,-16(fp)
}
81102c60:	e037883a 	mov	sp,fp
81102c64:	dfc00117 	ldw	ra,4(sp)
81102c68:	df000017 	ldw	fp,0(sp)
81102c6c:	dec00204 	addi	sp,sp,8
81102c70:	f800283a 	ret

81102c74 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
81102c74:	defffb04 	addi	sp,sp,-20
81102c78:	dfc00415 	stw	ra,16(sp)
81102c7c:	df000315 	stw	fp,12(sp)
81102c80:	df000304 	addi	fp,sp,12
81102c84:	e13ffe15 	stw	r4,-8(fp)
81102c88:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81102c8c:	e17fff17 	ldw	r5,-4(fp)
81102c90:	e13ffe17 	ldw	r4,-8(fp)
81102c94:	1102b840 	call	81102b84 <TEMP_Read>
81102c98:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81102c9c:	e0bffd17 	ldw	r2,-12(fp)
}
81102ca0:	e037883a 	mov	sp,fp
81102ca4:	dfc00117 	ldw	ra,4(sp)
81102ca8:	df000017 	ldw	fp,0(sp)
81102cac:	dec00204 	addi	sp,sp,8
81102cb0:	f800283a 	ret

81102cb4 <sense_log>:

void sense_log(void) {
81102cb4:	deff0404 	addi	sp,sp,-1008
81102cb8:	dfc0fb15 	stw	ra,1004(sp)
81102cbc:	df00fa15 	stw	fp,1000(sp)
81102cc0:	dd40f915 	stw	r21,996(sp)
81102cc4:	dd00f815 	stw	r20,992(sp)
81102cc8:	dcc0f715 	stw	r19,988(sp)
81102ccc:	dc80f615 	stw	r18,984(sp)
81102cd0:	dc40f515 	stw	r17,980(sp)
81102cd4:	dc00f415 	stw	r16,976(sp)
81102cd8:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
81102cdc:	00902834 	movhi	r2,16544
81102ce0:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
81102ce4:	008ed174 	movhi	r2,15173
81102ce8:	10a6e984 	addi	r2,r2,-25690
81102cec:	e0bf2215 	stw	r2,-888(fp)
81102cf0:	008ea0f4 	movhi	r2,14979
81102cf4:	10849bc4 	addi	r2,r2,4719
81102cf8:	e0bf2315 	stw	r2,-884(fp)
81102cfc:	008ed174 	movhi	r2,15173
81102d00:	10a6e984 	addi	r2,r2,-25690
81102d04:	e0bf2415 	stw	r2,-880(fp)
81102d08:	008ed174 	movhi	r2,15173
81102d0c:	10a6e984 	addi	r2,r2,-25690
81102d10:	e0bf2515 	stw	r2,-876(fp)
81102d14:	008ed174 	movhi	r2,15173
81102d18:	10a6e984 	addi	r2,r2,-25690
81102d1c:	e0bf2615 	stw	r2,-872(fp)
81102d20:	008ed174 	movhi	r2,15173
81102d24:	10a6e984 	addi	r2,r2,-25690
81102d28:	e0bf2715 	stw	r2,-868(fp)
81102d2c:	008ed174 	movhi	r2,15173
81102d30:	10a6e984 	addi	r2,r2,-25690
81102d34:	e0bf2815 	stw	r2,-864(fp)
81102d38:	008ed174 	movhi	r2,15173
81102d3c:	10a6e984 	addi	r2,r2,-25690
81102d40:	e0bf2915 	stw	r2,-860(fp)
81102d44:	008ed174 	movhi	r2,15173
81102d48:	10a6e984 	addi	r2,r2,-25690
81102d4c:	e0bf2a15 	stw	r2,-856(fp)
81102d50:	008ed174 	movhi	r2,15173
81102d54:	10a6e984 	addi	r2,r2,-25690
81102d58:	e0bf2b15 	stw	r2,-852(fp)
81102d5c:	008ed174 	movhi	r2,15173
81102d60:	10a6e984 	addi	r2,r2,-25690
81102d64:	e0bf2c15 	stw	r2,-848(fp)
81102d68:	008ed174 	movhi	r2,15173
81102d6c:	10a6e984 	addi	r2,r2,-25690
81102d70:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81102d74:	008fd9b4 	movhi	r2,16230
81102d78:	10999984 	addi	r2,r2,26214
81102d7c:	e0bf2e15 	stw	r2,-840(fp)
81102d80:	008fd9b4 	movhi	r2,16230
81102d84:	10999984 	addi	r2,r2,26214
81102d88:	e0bf2f15 	stw	r2,-836(fp)
81102d8c:	00901034 	movhi	r2,16448
81102d90:	e0bf3015 	stw	r2,-832(fp)
81102d94:	008fd9b4 	movhi	r2,16230
81102d98:	10999984 	addi	r2,r2,26214
81102d9c:	e0bf3115 	stw	r2,-828(fp)
81102da0:	008ff9b4 	movhi	r2,16358
81102da4:	10999984 	addi	r2,r2,26214
81102da8:	e0bf3215 	stw	r2,-824(fp)
81102dac:	00900834 	movhi	r2,16416
81102db0:	e0bf3315 	stw	r2,-820(fp)
81102db4:	008ff9b4 	movhi	r2,16358
81102db8:	10999984 	addi	r2,r2,26214
81102dbc:	e0bf3415 	stw	r2,-816(fp)
81102dc0:	00900834 	movhi	r2,16416
81102dc4:	e0bf3515 	stw	r2,-812(fp)
81102dc8:	008fe374 	movhi	r2,16269
81102dcc:	10b33344 	addi	r2,r2,-13107
81102dd0:	e0bf3615 	stw	r2,-808(fp)
81102dd4:	008fecf4 	movhi	r2,16307
81102dd8:	108cccc4 	addi	r2,r2,13107
81102ddc:	e0bf3715 	stw	r2,-804(fp)
81102de0:	009014f4 	movhi	r2,16467
81102de4:	108cccc4 	addi	r2,r2,13107
81102de8:	e0bf3815 	stw	r2,-800(fp)
81102dec:	00900834 	movhi	r2,16416
81102df0:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
81102df4:	00a044b4 	movhi	r2,33042
81102df8:	10988a04 	addi	r2,r2,25128
81102dfc:	e0ff3a04 	addi	r3,fp,-792
81102e00:	1009883a 	mov	r4,r2
81102e04:	0080c004 	movi	r2,768
81102e08:	100d883a 	mov	r6,r2
81102e0c:	200b883a 	mov	r5,r4
81102e10:	1809883a 	mov	r4,r3
81102e14:	11111480 	call	81111148 <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
81102e18:	e0bf1604 	addi	r2,fp,-936
81102e1c:	1009883a 	mov	r4,r2
81102e20:	11028c40 	call	811028c4 <POWER_Read>
81102e24:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
81102e28:	e0bf0f17 	ldw	r2,-964(fp)
81102e2c:	10016026 	beq	r2,zero,811033b0 <sense_log+0x6fc>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81102e30:	e03f0c15 	stw	zero,-976(fp)
81102e34:	00014c06 	br	81103368 <sense_log+0x6b4>
			SIG = (szVol[i] >> 29) & 0x01;
81102e38:	e0bf0c17 	ldw	r2,-976(fp)
81102e3c:	1085883a 	add	r2,r2,r2
81102e40:	1085883a 	add	r2,r2,r2
81102e44:	e0ff0c04 	addi	r3,fp,-976
81102e48:	1885883a 	add	r2,r3,r2
81102e4c:	10800a04 	addi	r2,r2,40
81102e50:	10800017 	ldw	r2,0(r2)
81102e54:	1004d77a 	srli	r2,r2,29
81102e58:	1080004c 	andi	r2,r2,1
81102e5c:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
81102e60:	e0bf0c17 	ldw	r2,-976(fp)
81102e64:	1085883a 	add	r2,r2,r2
81102e68:	1085883a 	add	r2,r2,r2
81102e6c:	e0ff0c04 	addi	r3,fp,-976
81102e70:	1885883a 	add	r2,r3,r2
81102e74:	10800a04 	addi	r2,r2,40
81102e78:	10800017 	ldw	r2,0(r2)
81102e7c:	1004d73a 	srli	r2,r2,28
81102e80:	1080004c 	andi	r2,r2,1
81102e84:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
81102e88:	e0bf0c17 	ldw	r2,-976(fp)
81102e8c:	1085883a 	add	r2,r2,r2
81102e90:	1085883a 	add	r2,r2,r2
81102e94:	e0ff0c04 	addi	r3,fp,-976
81102e98:	1885883a 	add	r2,r3,r2
81102e9c:	10800a04 	addi	r2,r2,40
81102ea0:	10800017 	ldw	r2,0(r2)
81102ea4:	1006d1ba 	srli	r3,r2,6
81102ea8:	00801034 	movhi	r2,64
81102eac:	10bfffc4 	addi	r2,r2,-1
81102eb0:	1884703a 	and	r2,r3,r2
81102eb4:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
81102eb8:	e0bf1117 	ldw	r2,-956(fp)
81102ebc:	1000091e 	bne	r2,zero,81102ee4 <sense_log+0x230>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
81102ec0:	e13f1217 	ldw	r4,-952(fp)
81102ec4:	110f4300 	call	8110f430 <__floatunsisf>
81102ec8:	1007883a 	mov	r3,r2
81102ecc:	0152a034 	movhi	r5,19072
81102ed0:	1809883a 	mov	r4,r3
81102ed4:	110ead00 	call	8110ead0 <__divsf3>
81102ed8:	1007883a 	mov	r3,r2
81102edc:	e0ff0d15 	stw	r3,-972(fp)
81102ee0:	00000106 	br	81102ee8 <sense_log+0x234>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
81102ee4:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
81102ee8:	e0bf1017 	ldw	r2,-960(fp)
81102eec:	10002626 	beq	r2,zero,81102f88 <sense_log+0x2d4>
81102ef0:	e0bf1117 	ldw	r2,-956(fp)
81102ef4:	10002426 	beq	r2,zero,81102f88 <sense_log+0x2d4>
				fVol = fRef * 0.5;
81102ef8:	014fc034 	movhi	r5,16128
81102efc:	e13f0e17 	ldw	r4,-968(fp)
81102f00:	110ef100 	call	8110ef10 <__mulsf3>
81102f04:	1007883a 	mov	r3,r2
81102f08:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81102f0c:	e0ff3a04 	addi	r3,fp,-792
81102f10:	e0bf0c17 	ldw	r2,-976(fp)
81102f14:	100491ba 	slli	r2,r2,6
81102f18:	18a1883a 	add	r16,r3,r2
81102f1c:	e0bf0c17 	ldw	r2,-976(fp)
81102f20:	1085883a 	add	r2,r2,r2
81102f24:	1085883a 	add	r2,r2,r2
81102f28:	e0ff0c04 	addi	r3,fp,-976
81102f2c:	1885883a 	add	r2,r3,r2
81102f30:	10800a04 	addi	r2,r2,40
81102f34:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
81102f38:	1023883a 	mov	r17,r2
81102f3c:	e13f1317 	ldw	r4,-948(fp)
81102f40:	110fc380 	call	8110fc38 <__extendsfdf2>
81102f44:	1009883a 	mov	r4,r2
81102f48:	180b883a 	mov	r5,r3
81102f4c:	d9000015 	stw	r4,0(sp)
81102f50:	d9400115 	stw	r5,4(sp)
81102f54:	880f883a 	mov	r7,r17
81102f58:	800d883a 	mov	r6,r16
81102f5c:	016044b4 	movhi	r5,33042
81102f60:	29585804 	addi	r5,r5,24928
81102f64:	012044f4 	movhi	r4,33043
81102f68:	21233704 	addi	r4,r4,-29476
81102f6c:	111173c0 	call	8111173c <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81102f70:	d0a03117 	ldw	r2,-32572(gp)
81102f74:	016044f4 	movhi	r5,33043
81102f78:	29633704 	addi	r5,r5,-29476
81102f7c:	1009883a 	mov	r4,r2
81102f80:	11100880 	call	81110088 <fprintf>
81102f84:	0000f506 	br	8110335c <sense_log+0x6a8>
#endif
			} else if (SIG && !MSB) {
81102f88:	e0bf1017 	ldw	r2,-960(fp)
81102f8c:	10006426 	beq	r2,zero,81103120 <sense_log+0x46c>
81102f90:	e0bf1117 	ldw	r2,-956(fp)
81102f94:	1000621e 	bne	r2,zero,81103120 <sense_log+0x46c>
				fVol = fRef * 0.5 * fVolDrop;
81102f98:	e13f0e17 	ldw	r4,-968(fp)
81102f9c:	110fc380 	call	8110fc38 <__extendsfdf2>
81102fa0:	1011883a 	mov	r8,r2
81102fa4:	1813883a 	mov	r9,r3
81102fa8:	000d883a 	mov	r6,zero
81102fac:	01cff834 	movhi	r7,16352
81102fb0:	4009883a 	mov	r4,r8
81102fb4:	480b883a 	mov	r5,r9
81102fb8:	110f5200 	call	8110f520 <__muldf3>
81102fbc:	1009883a 	mov	r4,r2
81102fc0:	180b883a 	mov	r5,r3
81102fc4:	2021883a 	mov	r16,r4
81102fc8:	2823883a 	mov	r17,r5
81102fcc:	e13f0d17 	ldw	r4,-972(fp)
81102fd0:	110fc380 	call	8110fc38 <__extendsfdf2>
81102fd4:	1009883a 	mov	r4,r2
81102fd8:	180b883a 	mov	r5,r3
81102fdc:	200d883a 	mov	r6,r4
81102fe0:	280f883a 	mov	r7,r5
81102fe4:	8009883a 	mov	r4,r16
81102fe8:	880b883a 	mov	r5,r17
81102fec:	110f5200 	call	8110f520 <__muldf3>
81102ff0:	1009883a 	mov	r4,r2
81102ff4:	180b883a 	mov	r5,r3
81102ff8:	2005883a 	mov	r2,r4
81102ffc:	2807883a 	mov	r3,r5
81103000:	1009883a 	mov	r4,r2
81103004:	180b883a 	mov	r5,r3
81103008:	110fd480 	call	8110fd48 <__truncdfsf2>
8110300c:	1007883a 	mov	r3,r2
81103010:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103014:	e0bf0c17 	ldw	r2,-976(fp)
81103018:	1085883a 	add	r2,r2,r2
8110301c:	1085883a 	add	r2,r2,r2
81103020:	e0ff0c04 	addi	r3,fp,-976
81103024:	1885883a 	add	r2,r3,r2
81103028:	10801604 	addi	r2,r2,88
8110302c:	10c00017 	ldw	r3,0(r2)
81103030:	180b883a 	mov	r5,r3
81103034:	e13f0d17 	ldw	r4,-972(fp)
81103038:	110ead00 	call	8110ead0 <__divsf3>
8110303c:	1007883a 	mov	r3,r2
81103040:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103044:	e0bf0c17 	ldw	r2,-976(fp)
81103048:	1085883a 	add	r2,r2,r2
8110304c:	1085883a 	add	r2,r2,r2
81103050:	e0ff0c04 	addi	r3,fp,-976
81103054:	1885883a 	add	r2,r3,r2
81103058:	10802204 	addi	r2,r2,136
8110305c:	10c00017 	ldw	r3,0(r2)
81103060:	e17f1417 	ldw	r5,-944(fp)
81103064:	1809883a 	mov	r4,r3
81103068:	110ef100 	call	8110ef10 <__mulsf3>
8110306c:	1007883a 	mov	r3,r2
81103070:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103074:	e0ff3a04 	addi	r3,fp,-792
81103078:	e0bf0c17 	ldw	r2,-976(fp)
8110307c:	100491ba 	slli	r2,r2,6
81103080:	18a9883a 	add	r20,r3,r2
81103084:	e0bf0c17 	ldw	r2,-976(fp)
81103088:	1085883a 	add	r2,r2,r2
8110308c:	1085883a 	add	r2,r2,r2
81103090:	e0ff0c04 	addi	r3,fp,-976
81103094:	1885883a 	add	r2,r3,r2
81103098:	10800a04 	addi	r2,r2,40
8110309c:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811030a0:	102b883a 	mov	r21,r2
811030a4:	e13f0d17 	ldw	r4,-972(fp)
811030a8:	110fc380 	call	8110fc38 <__extendsfdf2>
811030ac:	1021883a 	mov	r16,r2
811030b0:	1823883a 	mov	r17,r3
811030b4:	e13f1417 	ldw	r4,-944(fp)
811030b8:	110fc380 	call	8110fc38 <__extendsfdf2>
811030bc:	1025883a 	mov	r18,r2
811030c0:	1827883a 	mov	r19,r3
811030c4:	e13f1517 	ldw	r4,-940(fp)
811030c8:	110fc380 	call	8110fc38 <__extendsfdf2>
811030cc:	1009883a 	mov	r4,r2
811030d0:	180b883a 	mov	r5,r3
811030d4:	d9000415 	stw	r4,16(sp)
811030d8:	d9400515 	stw	r5,20(sp)
811030dc:	dc800215 	stw	r18,8(sp)
811030e0:	dcc00315 	stw	r19,12(sp)
811030e4:	dc000015 	stw	r16,0(sp)
811030e8:	dc400115 	stw	r17,4(sp)
811030ec:	a80f883a 	mov	r7,r21
811030f0:	a00d883a 	mov	r6,r20
811030f4:	016044b4 	movhi	r5,33042
811030f8:	29586104 	addi	r5,r5,24964
811030fc:	012044f4 	movhi	r4,33043
81103100:	21233704 	addi	r4,r4,-29476
81103104:	111173c0 	call	8111173c <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
81103108:	d0a03117 	ldw	r2,-32572(gp)
8110310c:	016044f4 	movhi	r5,33043
81103110:	29633704 	addi	r5,r5,-29476
81103114:	1009883a 	mov	r4,r2
81103118:	11100880 	call	81110088 <fprintf>
8110311c:	00008f06 	br	8110335c <sense_log+0x6a8>
#endif
			} else if (!SIG && MSB) {
81103120:	e0bf1017 	ldw	r2,-960(fp)
81103124:	1000641e 	bne	r2,zero,811032b8 <sense_log+0x604>
81103128:	e0bf1117 	ldw	r2,-956(fp)
8110312c:	10006226 	beq	r2,zero,811032b8 <sense_log+0x604>
				fVol = fRef * 0.5 * fVolDrop;
81103130:	e13f0e17 	ldw	r4,-968(fp)
81103134:	110fc380 	call	8110fc38 <__extendsfdf2>
81103138:	1011883a 	mov	r8,r2
8110313c:	1813883a 	mov	r9,r3
81103140:	000d883a 	mov	r6,zero
81103144:	01cff834 	movhi	r7,16352
81103148:	4009883a 	mov	r4,r8
8110314c:	480b883a 	mov	r5,r9
81103150:	110f5200 	call	8110f520 <__muldf3>
81103154:	1009883a 	mov	r4,r2
81103158:	180b883a 	mov	r5,r3
8110315c:	2021883a 	mov	r16,r4
81103160:	2823883a 	mov	r17,r5
81103164:	e13f0d17 	ldw	r4,-972(fp)
81103168:	110fc380 	call	8110fc38 <__extendsfdf2>
8110316c:	1009883a 	mov	r4,r2
81103170:	180b883a 	mov	r5,r3
81103174:	200d883a 	mov	r6,r4
81103178:	280f883a 	mov	r7,r5
8110317c:	8009883a 	mov	r4,r16
81103180:	880b883a 	mov	r5,r17
81103184:	110f5200 	call	8110f520 <__muldf3>
81103188:	1009883a 	mov	r4,r2
8110318c:	180b883a 	mov	r5,r3
81103190:	2005883a 	mov	r2,r4
81103194:	2807883a 	mov	r3,r5
81103198:	1009883a 	mov	r4,r2
8110319c:	180b883a 	mov	r5,r3
811031a0:	110fd480 	call	8110fd48 <__truncdfsf2>
811031a4:	1007883a 	mov	r3,r2
811031a8:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811031ac:	e0bf0c17 	ldw	r2,-976(fp)
811031b0:	1085883a 	add	r2,r2,r2
811031b4:	1085883a 	add	r2,r2,r2
811031b8:	e0ff0c04 	addi	r3,fp,-976
811031bc:	1885883a 	add	r2,r3,r2
811031c0:	10801604 	addi	r2,r2,88
811031c4:	10c00017 	ldw	r3,0(r2)
811031c8:	180b883a 	mov	r5,r3
811031cc:	e13f0d17 	ldw	r4,-972(fp)
811031d0:	110ead00 	call	8110ead0 <__divsf3>
811031d4:	1007883a 	mov	r3,r2
811031d8:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811031dc:	e0bf0c17 	ldw	r2,-976(fp)
811031e0:	1085883a 	add	r2,r2,r2
811031e4:	1085883a 	add	r2,r2,r2
811031e8:	e0ff0c04 	addi	r3,fp,-976
811031ec:	1885883a 	add	r2,r3,r2
811031f0:	10802204 	addi	r2,r2,136
811031f4:	10c00017 	ldw	r3,0(r2)
811031f8:	e17f1417 	ldw	r5,-944(fp)
811031fc:	1809883a 	mov	r4,r3
81103200:	110ef100 	call	8110ef10 <__mulsf3>
81103204:	1007883a 	mov	r3,r2
81103208:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
8110320c:	e0ff3a04 	addi	r3,fp,-792
81103210:	e0bf0c17 	ldw	r2,-976(fp)
81103214:	100491ba 	slli	r2,r2,6
81103218:	18a9883a 	add	r20,r3,r2
8110321c:	e0bf0c17 	ldw	r2,-976(fp)
81103220:	1085883a 	add	r2,r2,r2
81103224:	1085883a 	add	r2,r2,r2
81103228:	e0ff0c04 	addi	r3,fp,-976
8110322c:	1885883a 	add	r2,r3,r2
81103230:	10800a04 	addi	r2,r2,40
81103234:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81103238:	102b883a 	mov	r21,r2
8110323c:	e13f0d17 	ldw	r4,-972(fp)
81103240:	110fc380 	call	8110fc38 <__extendsfdf2>
81103244:	1021883a 	mov	r16,r2
81103248:	1823883a 	mov	r17,r3
8110324c:	e13f1417 	ldw	r4,-944(fp)
81103250:	110fc380 	call	8110fc38 <__extendsfdf2>
81103254:	1025883a 	mov	r18,r2
81103258:	1827883a 	mov	r19,r3
8110325c:	e13f1517 	ldw	r4,-940(fp)
81103260:	110fc380 	call	8110fc38 <__extendsfdf2>
81103264:	1009883a 	mov	r4,r2
81103268:	180b883a 	mov	r5,r3
8110326c:	d9000415 	stw	r4,16(sp)
81103270:	d9400515 	stw	r5,20(sp)
81103274:	dc800215 	stw	r18,8(sp)
81103278:	dcc00315 	stw	r19,12(sp)
8110327c:	dc000015 	stw	r16,0(sp)
81103280:	dc400115 	stw	r17,4(sp)
81103284:	a80f883a 	mov	r7,r21
81103288:	a00d883a 	mov	r6,r20
8110328c:	016044b4 	movhi	r5,33042
81103290:	29587104 	addi	r5,r5,25028
81103294:	012044f4 	movhi	r4,33043
81103298:	21233704 	addi	r4,r4,-29476
8110329c:	111173c0 	call	8111173c <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
811032a0:	d0a03117 	ldw	r2,-32572(gp)
811032a4:	016044f4 	movhi	r5,33043
811032a8:	29633704 	addi	r5,r5,-29476
811032ac:	1009883a 	mov	r4,r2
811032b0:	11100880 	call	81110088 <fprintf>
811032b4:	00002906 	br	8110335c <sense_log+0x6a8>
#endif
			} else if (!SIG && !MSB) {
811032b8:	e0bf1017 	ldw	r2,-960(fp)
811032bc:	1000271e 	bne	r2,zero,8110335c <sense_log+0x6a8>
811032c0:	e0bf1117 	ldw	r2,-956(fp)
811032c4:	1000251e 	bne	r2,zero,8110335c <sense_log+0x6a8>
				fVol = -fRef * 0.5;
811032c8:	e0bf0e17 	ldw	r2,-968(fp)
811032cc:	10a0003c 	xorhi	r2,r2,32768
811032d0:	014fc034 	movhi	r5,16128
811032d4:	1009883a 	mov	r4,r2
811032d8:	110ef100 	call	8110ef10 <__mulsf3>
811032dc:	1007883a 	mov	r3,r2
811032e0:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
811032e4:	e0ff3a04 	addi	r3,fp,-792
811032e8:	e0bf0c17 	ldw	r2,-976(fp)
811032ec:	100491ba 	slli	r2,r2,6
811032f0:	18a1883a 	add	r16,r3,r2
811032f4:	e0bf0c17 	ldw	r2,-976(fp)
811032f8:	1085883a 	add	r2,r2,r2
811032fc:	1085883a 	add	r2,r2,r2
81103300:	e0ff0c04 	addi	r3,fp,-976
81103304:	1885883a 	add	r2,r3,r2
81103308:	10800a04 	addi	r2,r2,40
8110330c:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
81103310:	1023883a 	mov	r17,r2
81103314:	e13f1317 	ldw	r4,-948(fp)
81103318:	110fc380 	call	8110fc38 <__extendsfdf2>
8110331c:	1009883a 	mov	r4,r2
81103320:	180b883a 	mov	r5,r3
81103324:	d9000015 	stw	r4,0(sp)
81103328:	d9400115 	stw	r5,4(sp)
8110332c:	880f883a 	mov	r7,r17
81103330:	800d883a 	mov	r6,r16
81103334:	016044b4 	movhi	r5,33042
81103338:	29588104 	addi	r5,r5,25092
8110333c:	012044f4 	movhi	r4,33043
81103340:	21233704 	addi	r4,r4,-29476
81103344:	111173c0 	call	8111173c <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103348:	d0a03117 	ldw	r2,-32572(gp)
8110334c:	016044f4 	movhi	r5,33043
81103350:	29633704 	addi	r5,r5,-29476
81103354:	1009883a 	mov	r4,r2
81103358:	11100880 	call	81110088 <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
8110335c:	e0bf0c17 	ldw	r2,-976(fp)
81103360:	10800044 	addi	r2,r2,1
81103364:	e0bf0c15 	stw	r2,-976(fp)
81103368:	e0bf0c17 	ldw	r2,-976(fp)
8110336c:	10800308 	cmpgei	r2,r2,12
81103370:	1000021e 	bne	r2,zero,8110337c <sense_log+0x6c8>
81103374:	e0bf0f17 	ldw	r2,-964(fp)
81103378:	103eaf1e 	bne	r2,zero,81102e38 <__reset+0xfb0e2e38>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
8110337c:	00a044f4 	movhi	r2,33043
81103380:	10a33704 	addi	r2,r2,-29476
81103384:	00c00344 	movi	r3,13
81103388:	10c00005 	stb	r3,0(r2)
8110338c:	00c00284 	movi	r3,10
81103390:	10c00045 	stb	r3,1(r2)
81103394:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
81103398:	d0a03117 	ldw	r2,-32572(gp)
8110339c:	016044f4 	movhi	r5,33043
811033a0:	29633704 	addi	r5,r5,-29476
811033a4:	1009883a 	mov	r4,r2
811033a8:	11100880 	call	81110088 <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
811033ac:	00001606 	br	81103408 <sense_log+0x754>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
811033b0:	00a044f4 	movhi	r2,33043
811033b4:	10a33704 	addi	r2,r2,-29476
811033b8:	00c01144 	movi	r3,69
811033bc:	10c00005 	stb	r3,0(r2)
811033c0:	00c01c84 	movi	r3,114
811033c4:	10c00045 	stb	r3,1(r2)
811033c8:	00c01c84 	movi	r3,114
811033cc:	10c00085 	stb	r3,2(r2)
811033d0:	00c01bc4 	movi	r3,111
811033d4:	10c000c5 	stb	r3,3(r2)
811033d8:	00c01c84 	movi	r3,114
811033dc:	10c00105 	stb	r3,4(r2)
811033e0:	00c00344 	movi	r3,13
811033e4:	10c00145 	stb	r3,5(r2)
811033e8:	00c00284 	movi	r3,10
811033ec:	10c00185 	stb	r3,6(r2)
811033f0:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
811033f4:	d0a03117 	ldw	r2,-32572(gp)
811033f8:	016044f4 	movhi	r5,33043
811033fc:	29633704 	addi	r5,r5,-29476
81103400:	1009883a 	mov	r4,r2
81103404:	11100880 	call	81110088 <fprintf>
#endif
	}
}
81103408:	0001883a 	nop
8110340c:	e6fffa04 	addi	sp,fp,-24
81103410:	dfc00717 	ldw	ra,28(sp)
81103414:	df000617 	ldw	fp,24(sp)
81103418:	dd400517 	ldw	r21,20(sp)
8110341c:	dd000417 	ldw	r20,16(sp)
81103420:	dcc00317 	ldw	r19,12(sp)
81103424:	dc800217 	ldw	r18,8(sp)
81103428:	dc400117 	ldw	r17,4(sp)
8110342c:	dc000017 	ldw	r16,0(sp)
81103430:	dec00804 	addi	sp,sp,32
81103434:	f800283a 	ret

81103438 <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103438:	defffc04 	addi	sp,sp,-16
8110343c:	dfc00315 	stw	ra,12(sp)
81103440:	df000215 	stw	fp,8(sp)
81103444:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103448:	00800044 	movi	r2,1
8110344c:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103450:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103454:	012044b4 	movhi	r4,33042
81103458:	21194a04 	addi	r4,r4,25896
8110345c:	11241f80 	call	811241f8 <alt_msgdma_open>
81103460:	d0a01515 	stw	r2,-32684(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103464:	d0a01517 	ldw	r2,-32684(gp)
81103468:	1000021e 	bne	r2,zero,81103474 <bSdmaInitM1Dma+0x3c>
		// device not opened
		bStatus = FALSE;
8110346c:	e03ffe15 	stw	zero,-8(fp)
81103470:	00001506 	br	811034c8 <bSdmaInitM1Dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103474:	d0a01517 	ldw	r2,-32684(gp)
81103478:	10800317 	ldw	r2,12(r2)
8110347c:	10800104 	addi	r2,r2,4
81103480:	00c00084 	movi	r3,2
81103484:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103488:	00000a06 	br	811034b4 <bSdmaInitM1Dma+0x7c>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
8110348c:	01000044 	movi	r4,1
81103490:	1120f980 	call	81120f98 <usleep>
			usiCounter++;
81103494:	e0bfff0b 	ldhu	r2,-4(fp)
81103498:	10800044 	addi	r2,r2,1
8110349c:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
811034a0:	e0bfff0b 	ldhu	r2,-4(fp)
811034a4:	1084e230 	cmpltui	r2,r2,5000
811034a8:	1000021e 	bne	r2,zero,811034b4 <bSdmaInitM1Dma+0x7c>
				bStatus = FALSE;
811034ac:	e03ffe15 	stw	zero,-8(fp)
				break;
811034b0:	00000506 	br	811034c8 <bSdmaInitM1Dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
811034b4:	d0a01517 	ldw	r2,-32684(gp)
811034b8:	10800317 	ldw	r2,12(r2)
811034bc:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
811034c0:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
811034c4:	103ff11e 	bne	r2,zero,8110348c <__reset+0xfb0e348c>
				break;
			}
		}
	}

	return bStatus;
811034c8:	e0bffe17 	ldw	r2,-8(fp)
}
811034cc:	e037883a 	mov	sp,fp
811034d0:	dfc00117 	ldw	ra,4(sp)
811034d4:	df000017 	ldw	fp,0(sp)
811034d8:	dec00204 	addi	sp,sp,8
811034dc:	f800283a 	ret

811034e0 <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
811034e0:	defffc04 	addi	sp,sp,-16
811034e4:	dfc00315 	stw	ra,12(sp)
811034e8:	df000215 	stw	fp,8(sp)
811034ec:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
811034f0:	00800044 	movi	r2,1
811034f4:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
811034f8:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
811034fc:	012044b4 	movhi	r4,33042
81103500:	21194f04 	addi	r4,r4,25916
81103504:	11241f80 	call	811241f8 <alt_msgdma_open>
81103508:	d0a01615 	stw	r2,-32680(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
8110350c:	d0a01617 	ldw	r2,-32680(gp)
81103510:	1000021e 	bne	r2,zero,8110351c <bSdmaInitM2Dma+0x3c>
		// device not opened
		bStatus = FALSE;
81103514:	e03ffe15 	stw	zero,-8(fp)
81103518:	00001506 	br	81103570 <bSdmaInitM2Dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
8110351c:	d0a01617 	ldw	r2,-32680(gp)
81103520:	10800317 	ldw	r2,12(r2)
81103524:	10800104 	addi	r2,r2,4
81103528:	00c00084 	movi	r3,2
8110352c:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103530:	00000a06 	br	8110355c <bSdmaInitM2Dma+0x7c>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103534:	01000044 	movi	r4,1
81103538:	1120f980 	call	81120f98 <usleep>
			usiCounter++;
8110353c:	e0bfff0b 	ldhu	r2,-4(fp)
81103540:	10800044 	addi	r2,r2,1
81103544:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103548:	e0bfff0b 	ldhu	r2,-4(fp)
8110354c:	1084e230 	cmpltui	r2,r2,5000
81103550:	1000021e 	bne	r2,zero,8110355c <bSdmaInitM2Dma+0x7c>
				bStatus = FALSE;
81103554:	e03ffe15 	stw	zero,-8(fp)
				break;
81103558:	00000506 	br	81103570 <bSdmaInitM2Dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
8110355c:	d0a01617 	ldw	r2,-32680(gp)
81103560:	10800317 	ldw	r2,12(r2)
81103564:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103568:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
8110356c:	103ff11e 	bne	r2,zero,81103534 <__reset+0xfb0e3534>
				break;
			}
		}
	}

	return bStatus;
81103570:	e0bffe17 	ldw	r2,-8(fp)
}
81103574:	e037883a 	mov	sp,fp
81103578:	dfc00117 	ldw	ra,4(sp)
8110357c:	df000017 	ldw	fp,0(sp)
81103580:	dec00204 	addi	sp,sp,8
81103584:	f800283a 	ret

81103588 <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103588:	deffe804 	addi	sp,sp,-96
8110358c:	dfc01715 	stw	ra,92(sp)
81103590:	df001615 	stw	fp,88(sp)
81103594:	dc001515 	stw	r16,84(sp)
81103598:	df001604 	addi	fp,sp,88
8110359c:	e13ffb15 	stw	r4,-20(fp)
811035a0:	2809883a 	mov	r4,r5
811035a4:	3007883a 	mov	r3,r6
811035a8:	3805883a 	mov	r2,r7
811035ac:	e13ffc0d 	sth	r4,-16(fp)
811035b0:	e0fffd05 	stb	r3,-12(fp)
811035b4:	e0bffe05 	stb	r2,-8(fp)
811035b8:	defff004 	addi	sp,sp,-64
811035bc:	d8800904 	addi	r2,sp,36
811035c0:	108007c4 	addi	r2,r2,31
811035c4:	1004d17a 	srli	r2,r2,5
811035c8:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
811035cc:	00800044 	movi	r2,1
811035d0:	e0bff315 	stw	r2,-52(fp)
	alt_u16 usiCnt = 0;
811035d4:	e03ff40d 	sth	zero,-48(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
811035d8:	e03ff515 	stw	zero,-44(fp)
	alt_u32 uliDestAddrHigh = 0;
811035dc:	e03ff615 	stw	zero,-40(fp)

	alt_u32 uliSrcAddrLow = 0;
811035e0:	e03ff715 	stw	zero,-36(fp)
	alt_u32 uliSrcAddrHigh = 0;
811035e4:	e03ff815 	stw	zero,-32(fp)

	alt_u32 uliControlBits = 0x00000000;
811035e8:	e03ffa15 	stw	zero,-24(fp)

	bool bBufferEmptyFlag = FALSE;
811035ec:	e03ff915 	stw	zero,-28(fp)

	switch (ucChBufferId) {
811035f0:	e0bffe03 	ldbu	r2,-8(fp)
811035f4:	10c00228 	cmpgeui	r3,r2,8
811035f8:	1800b81e 	bne	r3,zero,811038dc <bSdmaDmaM1Transfer+0x354>
811035fc:	100690ba 	slli	r3,r2,2
81103600:	00a04434 	movhi	r2,33040
81103604:	108d8504 	addi	r2,r2,13844
81103608:	1885883a 	add	r2,r3,r2
8110360c:	10800017 	ldw	r2,0(r2)
81103610:	1000683a 	jmp	r2
81103614:	81103634 	orhi	r4,r16,16600
81103618:	81103688 	cmpgei	r4,r16,16602
8110361c:	811036e4 	muli	r4,r16,16603
81103620:	81103738 	rdprs	r4,r16,16604
81103624:	8110378c 	andi	r4,r16,16606
81103628:	811037e0 	cmpeqi	r4,r16,16607
8110362c:	81103834 	orhi	r4,r16,16608
81103630:	81103888 	cmpgei	r4,r16,16610
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103634:	e0bffd03 	ldbu	r2,-12(fp)
81103638:	10000826 	beq	r2,zero,8110365c <bSdmaDmaM1Transfer+0xd4>
8110363c:	10800060 	cmpeqi	r2,r2,1
81103640:	10000d26 	beq	r2,zero,81103678 <bSdmaDmaM1Transfer+0xf0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103644:	e03ff515 	stw	zero,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103648:	00800044 	movi	r2,1
8110364c:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = bFeebGetCh1RightBufferEmpty();
81103650:	1105b080 	call	81105b08 <bFeebGetCh1RightBufferEmpty>
81103654:	e0bff915 	stw	r2,-28(fp)
			break;
81103658:	00000a06 	br	81103684 <bSdmaDmaM1Transfer+0xfc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
8110365c:	00800074 	movhi	r2,1
81103660:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103664:	00800044 	movi	r2,1
81103668:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = bFeebGetCh1LeftBufferEmpty();
8110366c:	1105aa80 	call	81105aa8 <bFeebGetCh1LeftBufferEmpty>
81103670:	e0bff915 	stw	r2,-28(fp)
			break;
81103674:	00000306 	br	81103684 <bSdmaDmaM1Transfer+0xfc>
		default:
			bStatus = FALSE;
81103678:	e03ff315 	stw	zero,-52(fp)
			bBufferEmptyFlag = FALSE;
8110367c:	e03ff915 	stw	zero,-28(fp)
			break;
81103680:	0001883a 	nop
		}
		break;
81103684:	00009706 	br	811038e4 <bSdmaDmaM1Transfer+0x35c>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103688:	e0bffd03 	ldbu	r2,-12(fp)
8110368c:	10000926 	beq	r2,zero,811036b4 <bSdmaDmaM1Transfer+0x12c>
81103690:	10800060 	cmpeqi	r2,r2,1
81103694:	10000f26 	beq	r2,zero,811036d4 <bSdmaDmaM1Transfer+0x14c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103698:	00880004 	movi	r2,8192
8110369c:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
811036a0:	00800044 	movi	r2,1
811036a4:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = bFeebGetCh2RightBufferEmpty();
811036a8:	1105bc80 	call	81105bc8 <bFeebGetCh2RightBufferEmpty>
811036ac:	e0bff915 	stw	r2,-28(fp)
			break;
811036b0:	00000b06 	br	811036e0 <bSdmaDmaM1Transfer+0x158>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
811036b4:	00800074 	movhi	r2,1
811036b8:	10880004 	addi	r2,r2,8192
811036bc:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
811036c0:	00800044 	movi	r2,1
811036c4:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = bFeebGetCh2LeftBufferEmpty();
811036c8:	1105b680 	call	81105b68 <bFeebGetCh2LeftBufferEmpty>
811036cc:	e0bff915 	stw	r2,-28(fp)
			break;
811036d0:	00000306 	br	811036e0 <bSdmaDmaM1Transfer+0x158>
		default:
			bStatus = FALSE;
811036d4:	e03ff315 	stw	zero,-52(fp)
			bBufferEmptyFlag = FALSE;
811036d8:	e03ff915 	stw	zero,-28(fp)
			break;
811036dc:	0001883a 	nop
		}
		break;
811036e0:	00008006 	br	811038e4 <bSdmaDmaM1Transfer+0x35c>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
811036e4:	e0bffd03 	ldbu	r2,-12(fp)
811036e8:	10000826 	beq	r2,zero,8110370c <bSdmaDmaM1Transfer+0x184>
811036ec:	10800060 	cmpeqi	r2,r2,1
811036f0:	10000d26 	beq	r2,zero,81103728 <bSdmaDmaM1Transfer+0x1a0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
811036f4:	00900004 	movi	r2,16384
811036f8:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
811036fc:	00800044 	movi	r2,1
81103700:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
81103704:	e03ff915 	stw	zero,-28(fp)
			break;
81103708:	00000a06 	br	81103734 <bSdmaDmaM1Transfer+0x1ac>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
8110370c:	00800074 	movhi	r2,1
81103710:	10900004 	addi	r2,r2,16384
81103714:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103718:	00800044 	movi	r2,1
8110371c:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
81103720:	e03ff915 	stw	zero,-28(fp)
			break;
81103724:	00000306 	br	81103734 <bSdmaDmaM1Transfer+0x1ac>
		default:
			bStatus = FALSE;
81103728:	e03ff315 	stw	zero,-52(fp)
			bBufferEmptyFlag = FALSE;
8110372c:	e03ff915 	stw	zero,-28(fp)
			break;
81103730:	0001883a 	nop
		}
		break;
81103734:	00006b06 	br	811038e4 <bSdmaDmaM1Transfer+0x35c>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103738:	e0bffd03 	ldbu	r2,-12(fp)
8110373c:	10000826 	beq	r2,zero,81103760 <bSdmaDmaM1Transfer+0x1d8>
81103740:	10800060 	cmpeqi	r2,r2,1
81103744:	10000d26 	beq	r2,zero,8110377c <bSdmaDmaM1Transfer+0x1f4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103748:	00980004 	movi	r2,24576
8110374c:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103750:	00800044 	movi	r2,1
81103754:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
81103758:	e03ff915 	stw	zero,-28(fp)
			break;
8110375c:	00000a06 	br	81103788 <bSdmaDmaM1Transfer+0x200>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103760:	00800074 	movhi	r2,1
81103764:	10980004 	addi	r2,r2,24576
81103768:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
8110376c:	00800044 	movi	r2,1
81103770:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
81103774:	e03ff915 	stw	zero,-28(fp)
			break;
81103778:	00000306 	br	81103788 <bSdmaDmaM1Transfer+0x200>
		default:
			bStatus = FALSE;
8110377c:	e03ff315 	stw	zero,-52(fp)
			bBufferEmptyFlag = FALSE;
81103780:	e03ff915 	stw	zero,-28(fp)
			break;
81103784:	0001883a 	nop
		}
		break;
81103788:	00005606 	br	811038e4 <bSdmaDmaM1Transfer+0x35c>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
8110378c:	e0bffd03 	ldbu	r2,-12(fp)
81103790:	10000826 	beq	r2,zero,811037b4 <bSdmaDmaM1Transfer+0x22c>
81103794:	10800060 	cmpeqi	r2,r2,1
81103798:	10000d26 	beq	r2,zero,811037d0 <bSdmaDmaM1Transfer+0x248>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8110379c:	00a00014 	movui	r2,32768
811037a0:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
811037a4:	00800044 	movi	r2,1
811037a8:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
811037ac:	e03ff915 	stw	zero,-28(fp)
			break;
811037b0:	00000a06 	br	811037dc <bSdmaDmaM1Transfer+0x254>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
811037b4:	008000b4 	movhi	r2,2
811037b8:	10a00004 	addi	r2,r2,-32768
811037bc:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
811037c0:	00800044 	movi	r2,1
811037c4:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
811037c8:	e03ff915 	stw	zero,-28(fp)
			break;
811037cc:	00000306 	br	811037dc <bSdmaDmaM1Transfer+0x254>
		default:
			bStatus = FALSE;
811037d0:	e03ff315 	stw	zero,-52(fp)
			bBufferEmptyFlag = FALSE;
811037d4:	e03ff915 	stw	zero,-28(fp)
			break;
811037d8:	0001883a 	nop
		}
		break;
811037dc:	00004106 	br	811038e4 <bSdmaDmaM1Transfer+0x35c>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
811037e0:	e0bffd03 	ldbu	r2,-12(fp)
811037e4:	10000826 	beq	r2,zero,81103808 <bSdmaDmaM1Transfer+0x280>
811037e8:	10800060 	cmpeqi	r2,r2,1
811037ec:	10000d26 	beq	r2,zero,81103824 <bSdmaDmaM1Transfer+0x29c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
811037f0:	00a80014 	movui	r2,40960
811037f4:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
811037f8:	00800044 	movi	r2,1
811037fc:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
81103800:	e03ff915 	stw	zero,-28(fp)
			break;
81103804:	00000a06 	br	81103830 <bSdmaDmaM1Transfer+0x2a8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103808:	008000b4 	movhi	r2,2
8110380c:	10a80004 	addi	r2,r2,-24576
81103810:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103814:	00800044 	movi	r2,1
81103818:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
8110381c:	e03ff915 	stw	zero,-28(fp)
			break;
81103820:	00000306 	br	81103830 <bSdmaDmaM1Transfer+0x2a8>
		default:
			bStatus = FALSE;
81103824:	e03ff315 	stw	zero,-52(fp)
			bBufferEmptyFlag = FALSE;
81103828:	e03ff915 	stw	zero,-28(fp)
			break;
8110382c:	0001883a 	nop
		}
		break;
81103830:	00002c06 	br	811038e4 <bSdmaDmaM1Transfer+0x35c>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103834:	e0bffd03 	ldbu	r2,-12(fp)
81103838:	10000826 	beq	r2,zero,8110385c <bSdmaDmaM1Transfer+0x2d4>
8110383c:	10800060 	cmpeqi	r2,r2,1
81103840:	10000d26 	beq	r2,zero,81103878 <bSdmaDmaM1Transfer+0x2f0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103844:	00b00014 	movui	r2,49152
81103848:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
8110384c:	00800044 	movi	r2,1
81103850:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
81103854:	e03ff915 	stw	zero,-28(fp)
			break;
81103858:	00000a06 	br	81103884 <bSdmaDmaM1Transfer+0x2fc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
8110385c:	008000b4 	movhi	r2,2
81103860:	10b00004 	addi	r2,r2,-16384
81103864:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103868:	00800044 	movi	r2,1
8110386c:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
81103870:	e03ff915 	stw	zero,-28(fp)
			break;
81103874:	00000306 	br	81103884 <bSdmaDmaM1Transfer+0x2fc>
		default:
			bStatus = FALSE;
81103878:	e03ff315 	stw	zero,-52(fp)
			bBufferEmptyFlag = FALSE;
8110387c:	e03ff915 	stw	zero,-28(fp)
			break;
81103880:	0001883a 	nop
		}
		break;
81103884:	00001706 	br	811038e4 <bSdmaDmaM1Transfer+0x35c>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103888:	e0bffd03 	ldbu	r2,-12(fp)
8110388c:	10000826 	beq	r2,zero,811038b0 <bSdmaDmaM1Transfer+0x328>
81103890:	10800060 	cmpeqi	r2,r2,1
81103894:	10000d26 	beq	r2,zero,811038cc <bSdmaDmaM1Transfer+0x344>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103898:	00b80014 	movui	r2,57344
8110389c:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
811038a0:	00800044 	movi	r2,1
811038a4:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
811038a8:	e03ff915 	stw	zero,-28(fp)
			break;
811038ac:	00000a06 	br	811038d8 <bSdmaDmaM1Transfer+0x350>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
811038b0:	008000b4 	movhi	r2,2
811038b4:	10b80004 	addi	r2,r2,-8192
811038b8:	e0bff515 	stw	r2,-44(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
811038bc:	00800044 	movi	r2,1
811038c0:	e0bff615 	stw	r2,-40(fp)
			bBufferEmptyFlag = FALSE;
811038c4:	e03ff915 	stw	zero,-28(fp)
			break;
811038c8:	00000306 	br	811038d8 <bSdmaDmaM1Transfer+0x350>
		default:
			bStatus = FALSE;
811038cc:	e03ff315 	stw	zero,-52(fp)
			bBufferEmptyFlag = FALSE;
811038d0:	e03ff915 	stw	zero,-28(fp)
			break;
811038d4:	0001883a 	nop
		}
		break;
811038d8:	00000206 	br	811038e4 <bSdmaDmaM1Transfer+0x35c>
	default:
		bStatus = FALSE;
811038dc:	e03ff315 	stw	zero,-52(fp)
		break;
811038e0:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
811038e4:	e0bffb17 	ldw	r2,-20(fp)
811038e8:	e0bff715 	stw	r2,-36(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
811038ec:	e03ff815 	stw	zero,-32(fp)

	if ((bStatus) && (bBufferEmptyFlag)) {
811038f0:	e0bff317 	ldw	r2,-52(fp)
811038f4:	10003d26 	beq	r2,zero,811039ec <bSdmaDmaM1Transfer+0x464>
811038f8:	e0bff917 	ldw	r2,-28(fp)
811038fc:	10003b26 	beq	r2,zero,811039ec <bSdmaDmaM1Transfer+0x464>
		if (pxDmaM1Dev == NULL) {
81103900:	d0a01517 	ldw	r2,-32684(gp)
81103904:	1000021e 	bne	r2,zero,81103910 <bSdmaDmaM1Transfer+0x388>
			bStatus = FALSE;
81103908:	e03ff315 	stw	zero,-52(fp)
8110390c:	00003706 	br	811039ec <bSdmaDmaM1Transfer+0x464>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103910:	e03ff40d 	sth	zero,-48(fp)
81103914:	00003206 	br	811039e0 <bSdmaDmaM1Transfer+0x458>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103918:	01000044 	movi	r4,1
8110391c:	11201b40 	call	811201b4 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103920:	d0a01517 	ldw	r2,-32684(gp)
81103924:	10800317 	ldw	r2,12(r2)
81103928:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
8110392c:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103930:	103ff91e 	bne	r2,zero,81103918 <__reset+0xfb0e3918>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
81103934:	d2201517 	ldw	r8,-32684(gp)
81103938:	e17ff717 	ldw	r5,-36(fp)
8110393c:	e1bff517 	ldw	r6,-44(fp)
81103940:	e0bff817 	ldw	r2,-32(fp)
81103944:	e0fff617 	ldw	r3,-40(fp)
81103948:	01000044 	movi	r4,1
8110394c:	d9000815 	stw	r4,32(sp)
81103950:	01000044 	movi	r4,1
81103954:	d9000715 	stw	r4,28(sp)
81103958:	01000044 	movi	r4,1
8110395c:	d9000615 	stw	r4,24(sp)
81103960:	01000044 	movi	r4,1
81103964:	d9000515 	stw	r4,20(sp)
81103968:	01000044 	movi	r4,1
8110396c:	d9000415 	stw	r4,16(sp)
81103970:	d8c00315 	stw	r3,12(sp)
81103974:	d8800215 	stw	r2,8(sp)
81103978:	e0bffa17 	ldw	r2,-24(fp)
8110397c:	d8800115 	stw	r2,4(sp)
81103980:	00802204 	movi	r2,136
81103984:	d8800015 	stw	r2,0(sp)
81103988:	300f883a 	mov	r7,r6
8110398c:	280d883a 	mov	r6,r5
81103990:	800b883a 	mov	r5,r16
81103994:	4009883a 	mov	r4,r8
81103998:	110a8ec0 	call	8110a8ec <iMsgdmaConstructExtendedMmToMmDescriptor>
8110399c:	10000226 	beq	r2,zero,811039a8 <bSdmaDmaM1Transfer+0x420>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
811039a0:	e03ff315 	stw	zero,-52(fp)
					break;
811039a4:	00001106 	br	811039ec <bSdmaDmaM1Transfer+0x464>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
811039a8:	d0a01517 	ldw	r2,-32684(gp)
811039ac:	800b883a 	mov	r5,r16
811039b0:	1009883a 	mov	r4,r2
811039b4:	110a9e00 	call	8110a9e0 <iMsgdmaExtendedDescriptorSyncTransfer>
811039b8:	10000226 	beq	r2,zero,811039c4 <bSdmaDmaM1Transfer+0x43c>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
811039bc:	e03ff315 	stw	zero,-52(fp)
						break;
811039c0:	00000a06 	br	811039ec <bSdmaDmaM1Transfer+0x464>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
811039c4:	e0bff717 	ldw	r2,-36(fp)
811039c8:	10802204 	addi	r2,r2,136
811039cc:	e0bff715 	stw	r2,-36(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
811039d0:	e03ff815 	stw	zero,-32(fp)

	if ((bStatus) && (bBufferEmptyFlag)) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
811039d4:	e0bff40b 	ldhu	r2,-48(fp)
811039d8:	10800044 	addi	r2,r2,1
811039dc:	e0bff40d 	sth	r2,-48(fp)
811039e0:	e0fff40b 	ldhu	r3,-48(fp)
811039e4:	e0bffc0b 	ldhu	r2,-16(fp)
811039e8:	18bfcd36 	bltu	r3,r2,81103920 <__reset+0xfb0e3920>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
811039ec:	e0bff317 	ldw	r2,-52(fp)
}
811039f0:	e6ffff04 	addi	sp,fp,-4
811039f4:	dfc00217 	ldw	ra,8(sp)
811039f8:	df000117 	ldw	fp,4(sp)
811039fc:	dc000017 	ldw	r16,0(sp)
81103a00:	dec00304 	addi	sp,sp,12
81103a04:	f800283a 	ret

81103a08 <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103a08:	deffe904 	addi	sp,sp,-92
81103a0c:	dfc01615 	stw	ra,88(sp)
81103a10:	df001515 	stw	fp,84(sp)
81103a14:	dc001415 	stw	r16,80(sp)
81103a18:	df001504 	addi	fp,sp,84
81103a1c:	e13ffb15 	stw	r4,-20(fp)
81103a20:	2809883a 	mov	r4,r5
81103a24:	3007883a 	mov	r3,r6
81103a28:	3805883a 	mov	r2,r7
81103a2c:	e13ffc0d 	sth	r4,-16(fp)
81103a30:	e0fffd05 	stb	r3,-12(fp)
81103a34:	e0bffe05 	stb	r2,-8(fp)
81103a38:	defff004 	addi	sp,sp,-64
81103a3c:	d8800904 	addi	r2,sp,36
81103a40:	108007c4 	addi	r2,r2,31
81103a44:	1004d17a 	srli	r2,r2,5
81103a48:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103a4c:	00800044 	movi	r2,1
81103a50:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103a54:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103a58:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103a5c:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103a60:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103a64:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103a68:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103a6c:	e0bffe03 	ldbu	r2,-8(fp)
81103a70:	10c00228 	cmpgeui	r3,r2,8
81103a74:	18009c1e 	bne	r3,zero,81103ce8 <bSdmaDmaM2Transfer+0x2e0>
81103a78:	100690ba 	slli	r3,r2,2
81103a7c:	00a04434 	movhi	r2,33040
81103a80:	108ea404 	addi	r2,r2,14992
81103a84:	1885883a 	add	r2,r3,r2
81103a88:	10800017 	ldw	r2,0(r2)
81103a8c:	1000683a 	jmp	r2
81103a90:	81103ab0 	cmpltui	r4,r16,16618
81103a94:	81103af0 	cmpltui	r4,r16,16619
81103a98:	81103b38 	rdprs	r4,r16,16620
81103a9c:	81103b80 	call	881103b8 <__reset+0x20f03b8>
81103aa0:	81103bc8 	cmpgei	r4,r16,16623
81103aa4:	81103c10 	cmplti	r4,r16,16624
81103aa8:	81103c58 	cmpnei	r4,r16,16625
81103aac:	81103ca0 	cmpeqi	r4,r16,16626
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103ab0:	e0bffd03 	ldbu	r2,-12(fp)
81103ab4:	10000626 	beq	r2,zero,81103ad0 <bSdmaDmaM2Transfer+0xc8>
81103ab8:	10800060 	cmpeqi	r2,r2,1
81103abc:	10000926 	beq	r2,zero,81103ae4 <bSdmaDmaM2Transfer+0xdc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103ac0:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103ac4:	00800044 	movi	r2,1
81103ac8:	e0bff715 	stw	r2,-36(fp)
			break;
81103acc:	00000706 	br	81103aec <bSdmaDmaM2Transfer+0xe4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103ad0:	00800074 	movhi	r2,1
81103ad4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103ad8:	00800044 	movi	r2,1
81103adc:	e0bff715 	stw	r2,-36(fp)
			break;
81103ae0:	00000206 	br	81103aec <bSdmaDmaM2Transfer+0xe4>
		default:
			bStatus = FALSE;
81103ae4:	e03ff415 	stw	zero,-48(fp)
			break;
81103ae8:	0001883a 	nop
		}
		break;
81103aec:	00008006 	br	81103cf0 <bSdmaDmaM2Transfer+0x2e8>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103af0:	e0bffd03 	ldbu	r2,-12(fp)
81103af4:	10000726 	beq	r2,zero,81103b14 <bSdmaDmaM2Transfer+0x10c>
81103af8:	10800060 	cmpeqi	r2,r2,1
81103afc:	10000b26 	beq	r2,zero,81103b2c <bSdmaDmaM2Transfer+0x124>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103b00:	00880004 	movi	r2,8192
81103b04:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103b08:	00800044 	movi	r2,1
81103b0c:	e0bff715 	stw	r2,-36(fp)
			break;
81103b10:	00000806 	br	81103b34 <bSdmaDmaM2Transfer+0x12c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103b14:	00800074 	movhi	r2,1
81103b18:	10880004 	addi	r2,r2,8192
81103b1c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103b20:	00800044 	movi	r2,1
81103b24:	e0bff715 	stw	r2,-36(fp)
			break;
81103b28:	00000206 	br	81103b34 <bSdmaDmaM2Transfer+0x12c>
		default:
			bStatus = FALSE;
81103b2c:	e03ff415 	stw	zero,-48(fp)
			break;
81103b30:	0001883a 	nop
		}
		break;
81103b34:	00006e06 	br	81103cf0 <bSdmaDmaM2Transfer+0x2e8>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103b38:	e0bffd03 	ldbu	r2,-12(fp)
81103b3c:	10000726 	beq	r2,zero,81103b5c <bSdmaDmaM2Transfer+0x154>
81103b40:	10800060 	cmpeqi	r2,r2,1
81103b44:	10000b26 	beq	r2,zero,81103b74 <bSdmaDmaM2Transfer+0x16c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103b48:	00900004 	movi	r2,16384
81103b4c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103b50:	00800044 	movi	r2,1
81103b54:	e0bff715 	stw	r2,-36(fp)
			break;
81103b58:	00000806 	br	81103b7c <bSdmaDmaM2Transfer+0x174>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103b5c:	00800074 	movhi	r2,1
81103b60:	10900004 	addi	r2,r2,16384
81103b64:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103b68:	00800044 	movi	r2,1
81103b6c:	e0bff715 	stw	r2,-36(fp)
			break;
81103b70:	00000206 	br	81103b7c <bSdmaDmaM2Transfer+0x174>
		default:
			bStatus = FALSE;
81103b74:	e03ff415 	stw	zero,-48(fp)
			break;
81103b78:	0001883a 	nop
		}
		break;
81103b7c:	00005c06 	br	81103cf0 <bSdmaDmaM2Transfer+0x2e8>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103b80:	e0bffd03 	ldbu	r2,-12(fp)
81103b84:	10000726 	beq	r2,zero,81103ba4 <bSdmaDmaM2Transfer+0x19c>
81103b88:	10800060 	cmpeqi	r2,r2,1
81103b8c:	10000b26 	beq	r2,zero,81103bbc <bSdmaDmaM2Transfer+0x1b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103b90:	00980004 	movi	r2,24576
81103b94:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103b98:	00800044 	movi	r2,1
81103b9c:	e0bff715 	stw	r2,-36(fp)
			break;
81103ba0:	00000806 	br	81103bc4 <bSdmaDmaM2Transfer+0x1bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103ba4:	00800074 	movhi	r2,1
81103ba8:	10980004 	addi	r2,r2,24576
81103bac:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103bb0:	00800044 	movi	r2,1
81103bb4:	e0bff715 	stw	r2,-36(fp)
			break;
81103bb8:	00000206 	br	81103bc4 <bSdmaDmaM2Transfer+0x1bc>
		default:
			bStatus = FALSE;
81103bbc:	e03ff415 	stw	zero,-48(fp)
			break;
81103bc0:	0001883a 	nop
		}
		break;
81103bc4:	00004a06 	br	81103cf0 <bSdmaDmaM2Transfer+0x2e8>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103bc8:	e0bffd03 	ldbu	r2,-12(fp)
81103bcc:	10000726 	beq	r2,zero,81103bec <bSdmaDmaM2Transfer+0x1e4>
81103bd0:	10800060 	cmpeqi	r2,r2,1
81103bd4:	10000b26 	beq	r2,zero,81103c04 <bSdmaDmaM2Transfer+0x1fc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103bd8:	00a00014 	movui	r2,32768
81103bdc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103be0:	00800044 	movi	r2,1
81103be4:	e0bff715 	stw	r2,-36(fp)
			break;
81103be8:	00000806 	br	81103c0c <bSdmaDmaM2Transfer+0x204>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103bec:	008000b4 	movhi	r2,2
81103bf0:	10a00004 	addi	r2,r2,-32768
81103bf4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103bf8:	00800044 	movi	r2,1
81103bfc:	e0bff715 	stw	r2,-36(fp)
			break;
81103c00:	00000206 	br	81103c0c <bSdmaDmaM2Transfer+0x204>
		default:
			bStatus = FALSE;
81103c04:	e03ff415 	stw	zero,-48(fp)
			break;
81103c08:	0001883a 	nop
		}
		break;
81103c0c:	00003806 	br	81103cf0 <bSdmaDmaM2Transfer+0x2e8>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103c10:	e0bffd03 	ldbu	r2,-12(fp)
81103c14:	10000726 	beq	r2,zero,81103c34 <bSdmaDmaM2Transfer+0x22c>
81103c18:	10800060 	cmpeqi	r2,r2,1
81103c1c:	10000b26 	beq	r2,zero,81103c4c <bSdmaDmaM2Transfer+0x244>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103c20:	00a80014 	movui	r2,40960
81103c24:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103c28:	00800044 	movi	r2,1
81103c2c:	e0bff715 	stw	r2,-36(fp)
			break;
81103c30:	00000806 	br	81103c54 <bSdmaDmaM2Transfer+0x24c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103c34:	008000b4 	movhi	r2,2
81103c38:	10a80004 	addi	r2,r2,-24576
81103c3c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103c40:	00800044 	movi	r2,1
81103c44:	e0bff715 	stw	r2,-36(fp)
			break;
81103c48:	00000206 	br	81103c54 <bSdmaDmaM2Transfer+0x24c>
		default:
			bStatus = FALSE;
81103c4c:	e03ff415 	stw	zero,-48(fp)
			break;
81103c50:	0001883a 	nop
		}
		break;
81103c54:	00002606 	br	81103cf0 <bSdmaDmaM2Transfer+0x2e8>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103c58:	e0bffd03 	ldbu	r2,-12(fp)
81103c5c:	10000726 	beq	r2,zero,81103c7c <bSdmaDmaM2Transfer+0x274>
81103c60:	10800060 	cmpeqi	r2,r2,1
81103c64:	10000b26 	beq	r2,zero,81103c94 <bSdmaDmaM2Transfer+0x28c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103c68:	00b00014 	movui	r2,49152
81103c6c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103c70:	00800044 	movi	r2,1
81103c74:	e0bff715 	stw	r2,-36(fp)
			break;
81103c78:	00000806 	br	81103c9c <bSdmaDmaM2Transfer+0x294>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103c7c:	008000b4 	movhi	r2,2
81103c80:	10b00004 	addi	r2,r2,-16384
81103c84:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103c88:	00800044 	movi	r2,1
81103c8c:	e0bff715 	stw	r2,-36(fp)
			break;
81103c90:	00000206 	br	81103c9c <bSdmaDmaM2Transfer+0x294>
		default:
			bStatus = FALSE;
81103c94:	e03ff415 	stw	zero,-48(fp)
			break;
81103c98:	0001883a 	nop
		}
		break;
81103c9c:	00001406 	br	81103cf0 <bSdmaDmaM2Transfer+0x2e8>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103ca0:	e0bffd03 	ldbu	r2,-12(fp)
81103ca4:	10000726 	beq	r2,zero,81103cc4 <bSdmaDmaM2Transfer+0x2bc>
81103ca8:	10800060 	cmpeqi	r2,r2,1
81103cac:	10000b26 	beq	r2,zero,81103cdc <bSdmaDmaM2Transfer+0x2d4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103cb0:	00b80014 	movui	r2,57344
81103cb4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103cb8:	00800044 	movi	r2,1
81103cbc:	e0bff715 	stw	r2,-36(fp)
			break;
81103cc0:	00000806 	br	81103ce4 <bSdmaDmaM2Transfer+0x2dc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103cc4:	008000b4 	movhi	r2,2
81103cc8:	10b80004 	addi	r2,r2,-8192
81103ccc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103cd0:	00800044 	movi	r2,1
81103cd4:	e0bff715 	stw	r2,-36(fp)
			break;
81103cd8:	00000206 	br	81103ce4 <bSdmaDmaM2Transfer+0x2dc>
		default:
			bStatus = FALSE;
81103cdc:	e03ff415 	stw	zero,-48(fp)
			break;
81103ce0:	0001883a 	nop
		}
		break;
81103ce4:	00000206 	br	81103cf0 <bSdmaDmaM2Transfer+0x2e8>
	default:
		bStatus = FALSE;
81103ce8:	e03ff415 	stw	zero,-48(fp)
		break;
81103cec:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
81103cf0:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
81103cf4:	00a00034 	movhi	r2,32768
81103cf8:	1885883a 	add	r2,r3,r2
81103cfc:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
81103d00:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103d04:	e0bff417 	ldw	r2,-48(fp)
81103d08:	10003b26 	beq	r2,zero,81103df8 <bSdmaDmaM2Transfer+0x3f0>
		if (pxDmaM2Dev == NULL) {
81103d0c:	d0a01617 	ldw	r2,-32680(gp)
81103d10:	1000021e 	bne	r2,zero,81103d1c <bSdmaDmaM2Transfer+0x314>
			bStatus = FALSE;
81103d14:	e03ff415 	stw	zero,-48(fp)
81103d18:	00003706 	br	81103df8 <bSdmaDmaM2Transfer+0x3f0>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103d1c:	e03ff50d 	sth	zero,-44(fp)
81103d20:	00003206 	br	81103dec <bSdmaDmaM2Transfer+0x3e4>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103d24:	01000044 	movi	r4,1
81103d28:	11201b40 	call	811201b4 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103d2c:	d0a01617 	ldw	r2,-32680(gp)
81103d30:	10800317 	ldw	r2,12(r2)
81103d34:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103d38:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103d3c:	103ff91e 	bne	r2,zero,81103d24 <__reset+0xfb0e3d24>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
81103d40:	d2201617 	ldw	r8,-32680(gp)
81103d44:	e17ff817 	ldw	r5,-32(fp)
81103d48:	e1bff617 	ldw	r6,-40(fp)
81103d4c:	e0bff917 	ldw	r2,-28(fp)
81103d50:	e0fff717 	ldw	r3,-36(fp)
81103d54:	01000044 	movi	r4,1
81103d58:	d9000815 	stw	r4,32(sp)
81103d5c:	01000044 	movi	r4,1
81103d60:	d9000715 	stw	r4,28(sp)
81103d64:	01000044 	movi	r4,1
81103d68:	d9000615 	stw	r4,24(sp)
81103d6c:	01000044 	movi	r4,1
81103d70:	d9000515 	stw	r4,20(sp)
81103d74:	01000044 	movi	r4,1
81103d78:	d9000415 	stw	r4,16(sp)
81103d7c:	d8c00315 	stw	r3,12(sp)
81103d80:	d8800215 	stw	r2,8(sp)
81103d84:	e0bffa17 	ldw	r2,-24(fp)
81103d88:	d8800115 	stw	r2,4(sp)
81103d8c:	00802204 	movi	r2,136
81103d90:	d8800015 	stw	r2,0(sp)
81103d94:	300f883a 	mov	r7,r6
81103d98:	280d883a 	mov	r6,r5
81103d9c:	800b883a 	mov	r5,r16
81103da0:	4009883a 	mov	r4,r8
81103da4:	110a8ec0 	call	8110a8ec <iMsgdmaConstructExtendedMmToMmDescriptor>
81103da8:	10000226 	beq	r2,zero,81103db4 <bSdmaDmaM2Transfer+0x3ac>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81103dac:	e03ff415 	stw	zero,-48(fp)
					break;
81103db0:	00001106 	br	81103df8 <bSdmaDmaM2Transfer+0x3f0>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
81103db4:	d0a01617 	ldw	r2,-32680(gp)
81103db8:	800b883a 	mov	r5,r16
81103dbc:	1009883a 	mov	r4,r2
81103dc0:	110a9e00 	call	8110a9e0 <iMsgdmaExtendedDescriptorSyncTransfer>
81103dc4:	10000226 	beq	r2,zero,81103dd0 <bSdmaDmaM2Transfer+0x3c8>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81103dc8:	e03ff415 	stw	zero,-48(fp)
						break;
81103dcc:	00000a06 	br	81103df8 <bSdmaDmaM2Transfer+0x3f0>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81103dd0:	e0bff817 	ldw	r2,-32(fp)
81103dd4:	10802204 	addi	r2,r2,136
81103dd8:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
81103ddc:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103de0:	e0bff50b 	ldhu	r2,-44(fp)
81103de4:	10800044 	addi	r2,r2,1
81103de8:	e0bff50d 	sth	r2,-44(fp)
81103dec:	e0fff50b 	ldhu	r3,-44(fp)
81103df0:	e0bffc0b 	ldhu	r2,-16(fp)
81103df4:	18bfcd36 	bltu	r3,r2,81103d2c <__reset+0xfb0e3d2c>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81103df8:	e0bff417 	ldw	r2,-48(fp)
}
81103dfc:	e6ffff04 	addi	sp,fp,-4
81103e00:	dfc00217 	ldw	ra,8(sp)
81103e04:	df000117 	ldw	fp,4(sp)
81103e08:	dc000017 	ldw	r16,0(sp)
81103e0c:	dec00304 	addi	sp,sp,12
81103e10:	f800283a 	ret

81103e14 <bCommSetGlobalIrqEn>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bCommSetGlobalIrqEn(bool bGlobalIrqEnable, alt_u8 ucCommCh) {
81103e14:	defff904 	addi	sp,sp,-28
81103e18:	dfc00615 	stw	ra,24(sp)
81103e1c:	df000515 	stw	fp,20(sp)
81103e20:	df000504 	addi	fp,sp,20
81103e24:	e13ffe15 	stw	r4,-8(fp)
81103e28:	2805883a 	mov	r2,r5
81103e2c:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
81103e30:	00800044 	movi	r2,1
81103e34:	e0bffb15 	stw	r2,-20(fp)
	alt_u32 uliReg = 0;
81103e38:	e03ffc15 	stw	zero,-16(fp)
	alt_u32 *puliCommAddr = 0;
81103e3c:	e03ffd15 	stw	zero,-12(fp)

	switch (ucCommCh) {
81103e40:	e0bfff03 	ldbu	r2,-4(fp)
81103e44:	10c00228 	cmpgeui	r3,r2,8
81103e48:	18002e1e 	bne	r3,zero,81103f04 <bCommSetGlobalIrqEn+0xf0>
81103e4c:	100690ba 	slli	r3,r2,2
81103e50:	00a04434 	movhi	r2,33040
81103e54:	108f9904 	addi	r2,r2,15972
81103e58:	1885883a 	add	r2,r3,r2
81103e5c:	10800017 	ldw	r2,0(r2)
81103e60:	1000683a 	jmp	r2
81103e64:	81103e84 	addi	r4,r16,16634
81103e68:	81103e94 	ori	r4,r16,16634
81103e6c:	81103ea4 	muli	r4,r16,16634
81103e70:	81103eb4 	orhi	r4,r16,16634
81103e74:	81103ec4 	addi	r4,r16,16635
81103e78:	81103ed4 	ori	r4,r16,16635
81103e7c:	81103ee4 	muli	r4,r16,16635
81103e80:	81103ef4 	orhi	r4,r16,16635
	case eCommSpwCh1:
		puliCommAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81103e84:	00a04834 	movhi	r2,33056
81103e88:	108b0004 	addi	r2,r2,11264
81103e8c:	e0bffd15 	stw	r2,-12(fp)
		break;
81103e90:	00001e06 	br	81103f0c <bCommSetGlobalIrqEn+0xf8>
	case eCommSpwCh2:
		puliCommAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
81103e94:	00a04834 	movhi	r2,33056
81103e98:	108a0004 	addi	r2,r2,10240
81103e9c:	e0bffd15 	stw	r2,-12(fp)
		break;
81103ea0:	00001a06 	br	81103f0c <bCommSetGlobalIrqEn+0xf8>
	case eCommSpwCh3:
		puliCommAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
81103ea4:	00a04834 	movhi	r2,33056
81103ea8:	108b0004 	addi	r2,r2,11264
81103eac:	e0bffd15 	stw	r2,-12(fp)
		break;
81103eb0:	00001606 	br	81103f0c <bCommSetGlobalIrqEn+0xf8>
	case eCommSpwCh4:
		puliCommAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
81103eb4:	00a04834 	movhi	r2,33056
81103eb8:	108a0004 	addi	r2,r2,10240
81103ebc:	e0bffd15 	stw	r2,-12(fp)
		break;
81103ec0:	00001206 	br	81103f0c <bCommSetGlobalIrqEn+0xf8>
	case eCommSpwCh5:
		puliCommAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
81103ec4:	00a04834 	movhi	r2,33056
81103ec8:	108b0004 	addi	r2,r2,11264
81103ecc:	e0bffd15 	stw	r2,-12(fp)
		break;
81103ed0:	00000e06 	br	81103f0c <bCommSetGlobalIrqEn+0xf8>
	case eCommSpwCh6:
		puliCommAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
81103ed4:	00a04834 	movhi	r2,33056
81103ed8:	108a0004 	addi	r2,r2,10240
81103edc:	e0bffd15 	stw	r2,-12(fp)
		break;
81103ee0:	00000a06 	br	81103f0c <bCommSetGlobalIrqEn+0xf8>
	case eCommSpwCh7:
		puliCommAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81103ee4:	00a04834 	movhi	r2,33056
81103ee8:	108b0004 	addi	r2,r2,11264
81103eec:	e0bffd15 	stw	r2,-12(fp)
		break;
81103ef0:	00000606 	br	81103f0c <bCommSetGlobalIrqEn+0xf8>
	case eCommSpwCh8:
		puliCommAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
81103ef4:	00a04834 	movhi	r2,33056
81103ef8:	108a0004 	addi	r2,r2,10240
81103efc:	e0bffd15 	stw	r2,-12(fp)
		break;
81103f00:	00000206 	br	81103f0c <bCommSetGlobalIrqEn+0xf8>
	default:
		bStatus = FALSE;
81103f04:	e03ffb15 	stw	zero,-20(fp)
		break;
81103f08:	0001883a 	nop
	}

	if (bStatus) {
81103f0c:	e0bffb17 	ldw	r2,-20(fp)
81103f10:	10001326 	beq	r2,zero,81103f60 <bCommSetGlobalIrqEn+0x14c>
		uliReg = uliCommReadReg(puliCommAddr,
81103f14:	01400444 	movi	r5,17
81103f18:	e13ffd17 	ldw	r4,-12(fp)
81103f1c:	11040980 	call	81104098 <uliCommReadReg>
81103f20:	e0bffc15 	stw	r2,-16(fp)
		COMM_IRQ_CONTROL_REG_OFST);

		if (bGlobalIrqEnable) {
81103f24:	e0bffe17 	ldw	r2,-8(fp)
81103f28:	10000426 	beq	r2,zero,81103f3c <bCommSetGlobalIrqEn+0x128>
			uliReg |= COMM_IRQ_GLOBAL_EN_MSK;
81103f2c:	e0bffc17 	ldw	r2,-16(fp)
81103f30:	10800074 	orhi	r2,r2,1
81103f34:	e0bffc15 	stw	r2,-16(fp)
81103f38:	00000506 	br	81103f50 <bCommSetGlobalIrqEn+0x13c>
		} else {
			uliReg &= (~COMM_IRQ_GLOBAL_EN_MSK);
81103f3c:	e0fffc17 	ldw	r3,-16(fp)
81103f40:	00bffff4 	movhi	r2,65535
81103f44:	10bfffc4 	addi	r2,r2,-1
81103f48:	1884703a 	and	r2,r3,r2
81103f4c:	e0bffc15 	stw	r2,-16(fp)
		}

		vCommWriteReg(puliCommAddr, COMM_IRQ_CONTROL_REG_OFST, uliReg);
81103f50:	e1bffc17 	ldw	r6,-16(fp)
81103f54:	01400444 	movi	r5,17
81103f58:	e13ffd17 	ldw	r4,-12(fp)
81103f5c:	110404c0 	call	8110404c <vCommWriteReg>
	}

	return bStatus;
81103f60:	e0bffb17 	ldw	r2,-20(fp)
}
81103f64:	e037883a 	mov	sp,fp
81103f68:	dfc00117 	ldw	ra,4(sp)
81103f6c:	df000017 	ldw	fp,0(sp)
81103f70:	dec00204 	addi	sp,sp,8
81103f74:	f800283a 	ret

81103f78 <bCommInitCh>:

bool bCommInitCh(TCommChannel *pxCommCh, alt_u8 ucCommCh) {
81103f78:	defffb04 	addi	sp,sp,-20
81103f7c:	dfc00415 	stw	ra,16(sp)
81103f80:	df000315 	stw	fp,12(sp)
81103f84:	df000304 	addi	fp,sp,12
81103f88:	e13ffe15 	stw	r4,-8(fp)
81103f8c:	2805883a 	mov	r2,r5
81103f90:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
81103f94:	00800044 	movi	r2,1
81103f98:	e0bffd15 	stw	r2,-12(fp)

	if (!bSpwcInitCh(&(pxCommCh->xSpacewire), ucCommCh)) {
81103f9c:	e0bffe17 	ldw	r2,-8(fp)
81103fa0:	10805704 	addi	r2,r2,348
81103fa4:	e0ffff03 	ldbu	r3,-4(fp)
81103fa8:	180b883a 	mov	r5,r3
81103fac:	1009883a 	mov	r4,r2
81103fb0:	11094c00 	call	811094c0 <bSpwcInitCh>
81103fb4:	1000011e 	bne	r2,zero,81103fbc <bCommInitCh+0x44>
		bStatus = FALSE;
81103fb8:	e03ffd15 	stw	zero,-12(fp)
	}
	vFeebInitIrq(ucCommCh);
81103fbc:	e0bfff03 	ldbu	r2,-4(fp)
81103fc0:	1009883a 	mov	r4,r2
81103fc4:	11055600 	call	81105560 <vFeebInitIrq>

	if (!bFeebInitCh(&(pxCommCh->xFeeBuffer), ucCommCh)) {
81103fc8:	e0bffe17 	ldw	r2,-8(fp)
81103fcc:	10800904 	addi	r2,r2,36
81103fd0:	e0ffff03 	ldbu	r3,-4(fp)
81103fd4:	180b883a 	mov	r5,r3
81103fd8:	1009883a 	mov	r4,r2
81103fdc:	1105fa00 	call	81105fa0 <bFeebInitCh>
81103fe0:	1000011e 	bne	r2,zero,81103fe8 <bCommInitCh+0x70>
		bStatus = FALSE;
81103fe4:	e03ffd15 	stw	zero,-12(fp)
	}
	if (!bRmapInitCh(&(pxCommCh->xRmap), ucCommCh)) {
81103fe8:	e0bffe17 	ldw	r2,-8(fp)
81103fec:	10801104 	addi	r2,r2,68
81103ff0:	e0ffff03 	ldbu	r3,-4(fp)
81103ff4:	180b883a 	mov	r5,r3
81103ff8:	1009883a 	mov	r4,r2
81103ffc:	1108b6c0 	call	81108b6c <bRmapInitCh>
81104000:	1000011e 	bne	r2,zero,81104008 <bCommInitCh+0x90>
		bStatus = FALSE;
81104004:	e03ffd15 	stw	zero,-12(fp)
	}
	vRmapInitIrq(ucCommCh);
81104008:	e0bfff03 	ldbu	r2,-4(fp)
8110400c:	1009883a 	mov	r4,r2
81104010:	1106a100 	call	81106a10 <vRmapInitIrq>

	if (!bDpktInitCh(&(pxCommCh->xDataPacket), ucCommCh)) {
81104014:	e0bffe17 	ldw	r2,-8(fp)
81104018:	10800104 	addi	r2,r2,4
8110401c:	e0ffff03 	ldbu	r3,-4(fp)
81104020:	180b883a 	mov	r5,r3
81104024:	1009883a 	mov	r4,r2
81104028:	11046e00 	call	811046e0 <bDpktInitCh>
8110402c:	1000011e 	bne	r2,zero,81104034 <bCommInitCh+0xbc>
		bStatus = FALSE;
81104030:	e03ffd15 	stw	zero,-12(fp)
	}
	return bStatus;
81104034:	e0bffd17 	ldw	r2,-12(fp)
}
81104038:	e037883a 	mov	sp,fp
8110403c:	dfc00117 	ldw	ra,4(sp)
81104040:	df000017 	ldw	fp,0(sp)
81104044:	dec00204 	addi	sp,sp,8
81104048:	f800283a 	ret

8110404c <vCommWriteReg>:
//! [public functions]

//! [private functions]
static void vCommWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
8110404c:	defffc04 	addi	sp,sp,-16
81104050:	df000315 	stw	fp,12(sp)
81104054:	df000304 	addi	fp,sp,12
81104058:	e13ffd15 	stw	r4,-12(fp)
8110405c:	e17ffe15 	stw	r5,-8(fp)
81104060:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81104064:	e0bffe17 	ldw	r2,-8(fp)
81104068:	1085883a 	add	r2,r2,r2
8110406c:	1085883a 	add	r2,r2,r2
81104070:	1007883a 	mov	r3,r2
81104074:	e0bffd17 	ldw	r2,-12(fp)
81104078:	10c5883a 	add	r2,r2,r3
8110407c:	e0ffff17 	ldw	r3,-4(fp)
81104080:	10c00015 	stw	r3,0(r2)
}
81104084:	0001883a 	nop
81104088:	e037883a 	mov	sp,fp
8110408c:	df000017 	ldw	fp,0(sp)
81104090:	dec00104 	addi	sp,sp,4
81104094:	f800283a 	ret

81104098 <uliCommReadReg>:

static alt_u32 uliCommReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81104098:	defffc04 	addi	sp,sp,-16
8110409c:	df000315 	stw	fp,12(sp)
811040a0:	df000304 	addi	fp,sp,12
811040a4:	e13ffe15 	stw	r4,-8(fp)
811040a8:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811040ac:	e0bfff17 	ldw	r2,-4(fp)
811040b0:	1085883a 	add	r2,r2,r2
811040b4:	1085883a 	add	r2,r2,r2
811040b8:	1007883a 	mov	r3,r2
811040bc:	e0bffe17 	ldw	r2,-8(fp)
811040c0:	10c5883a 	add	r2,r2,r3
811040c4:	10800017 	ldw	r2,0(r2)
811040c8:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
811040cc:	e0bffd17 	ldw	r2,-12(fp)
}
811040d0:	e037883a 	mov	sp,fp
811040d4:	df000017 	ldw	fp,0(sp)
811040d8:	dec00104 	addi	sp,sp,4
811040dc:	f800283a 	ret

811040e0 <bDpktSetPacketConfig>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bDpktSetPacketConfig(TDpktChannel *pxDpktCh) {
811040e0:	defffb04 	addi	sp,sp,-20
811040e4:	dfc00415 	stw	ra,16(sp)
811040e8:	df000315 	stw	fp,12(sp)
811040ec:	df000304 	addi	fp,sp,12
811040f0:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811040f4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811040f8:	e03ffe15 	stw	zero,-8(fp)

	if (pxDpktCh != NULL) {
811040fc:	e0bfff17 	ldw	r2,-4(fp)
81104100:	10007a26 	beq	r2,zero,811042ec <bDpktSetPacketConfig+0x20c>

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104104:	e0bfff17 	ldw	r2,-4(fp)
81104108:	10800017 	ldw	r2,0(r2)
8110410c:	01400204 	movi	r5,8
81104110:	1009883a 	mov	r4,r2
81104114:	11048980 	call	81104898 <uliDpktReadReg>
81104118:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_CFG_1_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_CCD_X_SIZE_MSK);
8110411c:	e0bffe17 	ldw	r2,-8(fp)
81104120:	10bfffec 	andhi	r2,r2,65535
81104124:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_DATA_PKT_CCD_X_SIZE_MSK
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.usiCcdXSize << 0));
81104128:	e0bfff17 	ldw	r2,-4(fp)
8110412c:	1080010b 	ldhu	r2,4(r2)
81104130:	10bfffcc 	andi	r2,r2,65535

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_CFG_1_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_CCD_X_SIZE_MSK);
		uliReg |= (COMM_DATA_PKT_CCD_X_SIZE_MSK
81104134:	e0fffe17 	ldw	r3,-8(fp)
81104138:	1884b03a 	or	r2,r3,r2
8110413c:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.usiCcdXSize << 0));
		uliReg &= (~COMM_DATA_PKT_CCD_Y_SIZE_MSK);
81104140:	e0bffe17 	ldw	r2,-8(fp)
81104144:	10bfffcc 	andi	r2,r2,65535
81104148:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_DATA_PKT_CCD_Y_SIZE_MSK
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.usiCcdYSize << 16));
8110414c:	e0bfff17 	ldw	r2,-4(fp)
81104150:	1080018b 	ldhu	r2,6(r2)
81104154:	10bfffcc 	andi	r2,r2,65535
81104158:	1004943a 	slli	r2,r2,16
8110415c:	1007883a 	mov	r3,r2

		uliReg &= (~COMM_DATA_PKT_CCD_X_SIZE_MSK);
		uliReg |= (COMM_DATA_PKT_CCD_X_SIZE_MSK
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.usiCcdXSize << 0));
		uliReg &= (~COMM_DATA_PKT_CCD_Y_SIZE_MSK);
		uliReg |= (COMM_DATA_PKT_CCD_Y_SIZE_MSK
81104160:	e0bffe17 	ldw	r2,-8(fp)
81104164:	10c4b03a 	or	r2,r2,r3
81104168:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.usiCcdYSize << 16));

		vDpktWriteReg(pxDpktCh->puliDpktChAddr, COMM_DATA_PKT_CFG_1_REG_OFST,
8110416c:	e0bfff17 	ldw	r2,-4(fp)
81104170:	10800017 	ldw	r2,0(r2)
81104174:	e1bffe17 	ldw	r6,-8(fp)
81104178:	01400204 	movi	r5,8
8110417c:	1009883a 	mov	r4,r2
81104180:	110484c0 	call	8110484c <vDpktWriteReg>
				uliReg);
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104184:	e0bfff17 	ldw	r2,-4(fp)
81104188:	10800017 	ldw	r2,0(r2)
8110418c:	01400244 	movi	r5,9
81104190:	1009883a 	mov	r4,r2
81104194:	11048980 	call	81104898 <uliDpktReadReg>
81104198:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_CFG_2_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_DATA_Y_SIZE_MSK);
8110419c:	e0bffe17 	ldw	r2,-8(fp)
811041a0:	10bfffec 	andhi	r2,r2,65535
811041a4:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_DATA_PKT_DATA_Y_SIZE_MSK
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.usiDataYSize << 0));
811041a8:	e0bfff17 	ldw	r2,-4(fp)
811041ac:	1080020b 	ldhu	r2,8(r2)
811041b0:	10bfffcc 	andi	r2,r2,65535
				uliReg);
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_CFG_2_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_DATA_Y_SIZE_MSK);
		uliReg |= (COMM_DATA_PKT_DATA_Y_SIZE_MSK
811041b4:	e0fffe17 	ldw	r3,-8(fp)
811041b8:	1884b03a 	or	r2,r3,r2
811041bc:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.usiDataYSize << 0));
		uliReg &= (~COMM_DATA_PKT_OVER_Y_SIZE_MSK);
811041c0:	e0bffe17 	ldw	r2,-8(fp)
811041c4:	10bfffcc 	andi	r2,r2,65535
811041c8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |=
				(COMM_DATA_PKT_OVER_Y_SIZE_MSK
						& (alt_u32)(
								pxDpktCh->xDpktDataPacketConfig.usiOverscanYSize
811041cc:	e0bfff17 	ldw	r2,-4(fp)
811041d0:	1080028b 	ldhu	r2,10(r2)
										<< 16));
811041d4:	10bfffcc 	andi	r2,r2,65535
811041d8:	1004943a 	slli	r2,r2,16
		uliReg |= (COMM_DATA_PKT_DATA_Y_SIZE_MSK
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.usiDataYSize << 0));
		uliReg &= (~COMM_DATA_PKT_OVER_Y_SIZE_MSK);
		uliReg |=
				(COMM_DATA_PKT_OVER_Y_SIZE_MSK
						& (alt_u32)(
811041dc:	1007883a 	mov	r3,r2

		uliReg &= (~COMM_DATA_PKT_DATA_Y_SIZE_MSK);
		uliReg |= (COMM_DATA_PKT_DATA_Y_SIZE_MSK
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.usiDataYSize << 0));
		uliReg &= (~COMM_DATA_PKT_OVER_Y_SIZE_MSK);
		uliReg |=
811041e0:	e0bffe17 	ldw	r2,-8(fp)
811041e4:	10c4b03a 	or	r2,r2,r3
811041e8:	e0bffe15 	stw	r2,-8(fp)
				(COMM_DATA_PKT_OVER_Y_SIZE_MSK
						& (alt_u32)(
								pxDpktCh->xDpktDataPacketConfig.usiOverscanYSize
										<< 16));

		vDpktWriteReg(pxDpktCh->puliDpktChAddr, COMM_DATA_PKT_CFG_2_REG_OFST,
811041ec:	e0bfff17 	ldw	r2,-4(fp)
811041f0:	10800017 	ldw	r2,0(r2)
811041f4:	e1bffe17 	ldw	r6,-8(fp)
811041f8:	01400244 	movi	r5,9
811041fc:	1009883a 	mov	r4,r2
81104200:	110484c0 	call	8110484c <vDpktWriteReg>
				uliReg);
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104204:	e0bfff17 	ldw	r2,-4(fp)
81104208:	10800017 	ldw	r2,0(r2)
8110420c:	01400284 	movi	r5,10
81104210:	1009883a 	mov	r4,r2
81104214:	11048980 	call	81104898 <uliDpktReadReg>
81104218:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_CFG_3_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_LENGTH_MSK);
8110421c:	e0bffe17 	ldw	r2,-8(fp)
81104220:	10bfffec 	andhi	r2,r2,65535
81104224:	e0bffe15 	stw	r2,-8(fp)
		uliReg |=
				(COMM_DATA_PKT_LENGTH_MSK
						& (alt_u32)(
								pxDpktCh->xDpktDataPacketConfig.usiPacketLength
81104228:	e0bfff17 	ldw	r2,-4(fp)
8110422c:	1080030b 	ldhu	r2,12(r2)
				COMM_DATA_PKT_CFG_3_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_LENGTH_MSK);
		uliReg |=
				(COMM_DATA_PKT_LENGTH_MSK
						& (alt_u32)(
81104230:	10bfffcc 	andi	r2,r2,65535
				uliReg);
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_CFG_3_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_LENGTH_MSK);
		uliReg |=
81104234:	e0fffe17 	ldw	r3,-8(fp)
81104238:	1884b03a 	or	r2,r3,r2
8110423c:	e0bffe15 	stw	r2,-8(fp)
				(COMM_DATA_PKT_LENGTH_MSK
						& (alt_u32)(
								pxDpktCh->xDpktDataPacketConfig.usiPacketLength
										<< 0));

		vDpktWriteReg(pxDpktCh->puliDpktChAddr, COMM_DATA_PKT_CFG_3_REG_OFST,
81104240:	e0bfff17 	ldw	r2,-4(fp)
81104244:	10800017 	ldw	r2,0(r2)
81104248:	e1bffe17 	ldw	r6,-8(fp)
8110424c:	01400284 	movi	r5,10
81104250:	1009883a 	mov	r4,r2
81104254:	110484c0 	call	8110484c <vDpktWriteReg>
				uliReg);
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104258:	e0bfff17 	ldw	r2,-4(fp)
8110425c:	10800017 	ldw	r2,0(r2)
81104260:	014002c4 	movi	r5,11
81104264:	1009883a 	mov	r4,r2
81104268:	11048980 	call	81104898 <uliDpktReadReg>
8110426c:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_CFG_4_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_FEE_MODE_MSK);
81104270:	e0fffe17 	ldw	r3,-8(fp)
81104274:	00bfc004 	movi	r2,-256
81104278:	1884703a 	and	r2,r3,r2
8110427c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_DATA_PKT_FEE_MODE_MSK
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.ucFeeMode << 0));
81104280:	e0bfff17 	ldw	r2,-4(fp)
81104284:	10800383 	ldbu	r2,14(r2)
81104288:	10803fcc 	andi	r2,r2,255
				uliReg);
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_CFG_4_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_FEE_MODE_MSK);
		uliReg |= (COMM_DATA_PKT_FEE_MODE_MSK
8110428c:	e0fffe17 	ldw	r3,-8(fp)
81104290:	1884b03a 	or	r2,r3,r2
81104294:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.ucFeeMode << 0));
		uliReg &= (~COMM_DATA_PKT_CCD_NUMBER_MSK);
81104298:	e0fffe17 	ldw	r3,-8(fp)
8110429c:	00bffff4 	movhi	r2,65535
811042a0:	10803fc4 	addi	r2,r2,255
811042a4:	1884703a 	and	r2,r3,r2
811042a8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_DATA_PKT_CCD_NUMBER_MSK
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.ucCcdNumber << 8));
811042ac:	e0bfff17 	ldw	r2,-4(fp)
811042b0:	108003c3 	ldbu	r2,15(r2)
811042b4:	10803fcc 	andi	r2,r2,255
811042b8:	1004923a 	slli	r2,r2,8
811042bc:	10bfffcc 	andi	r2,r2,65535

		uliReg &= (~COMM_DATA_PKT_FEE_MODE_MSK);
		uliReg |= (COMM_DATA_PKT_FEE_MODE_MSK
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.ucFeeMode << 0));
		uliReg &= (~COMM_DATA_PKT_CCD_NUMBER_MSK);
		uliReg |= (COMM_DATA_PKT_CCD_NUMBER_MSK
811042c0:	e0fffe17 	ldw	r3,-8(fp)
811042c4:	1884b03a 	or	r2,r3,r2
811042c8:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32)(pxDpktCh->xDpktDataPacketConfig.ucCcdNumber << 8));

		vDpktWriteReg(pxDpktCh->puliDpktChAddr, COMM_DATA_PKT_CFG_4_REG_OFST,
811042cc:	e0bfff17 	ldw	r2,-4(fp)
811042d0:	10800017 	ldw	r2,0(r2)
811042d4:	e1bffe17 	ldw	r6,-8(fp)
811042d8:	014002c4 	movi	r5,11
811042dc:	1009883a 	mov	r4,r2
811042e0:	110484c0 	call	8110484c <vDpktWriteReg>
				uliReg);

		bStatus = TRUE;
811042e4:	00800044 	movi	r2,1
811042e8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811042ec:	e0bffd17 	ldw	r2,-12(fp)
}
811042f0:	e037883a 	mov	sp,fp
811042f4:	dfc00117 	ldw	ra,4(sp)
811042f8:	df000017 	ldw	fp,0(sp)
811042fc:	dec00204 	addi	sp,sp,8
81104300:	f800283a 	ret

81104304 <bDpktGetPacketConfig>:

bool bDpktGetPacketConfig(TDpktChannel *pxDpktCh) {
81104304:	defffb04 	addi	sp,sp,-20
81104308:	dfc00415 	stw	ra,16(sp)
8110430c:	df000315 	stw	fp,12(sp)
81104310:	df000304 	addi	fp,sp,12
81104314:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104318:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110431c:	e03ffe15 	stw	zero,-8(fp)

	if (pxDpktCh != NULL) {
81104320:	e0bfff17 	ldw	r2,-4(fp)
81104324:	10003a26 	beq	r2,zero,81104410 <bDpktGetPacketConfig+0x10c>

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104328:	e0bfff17 	ldw	r2,-4(fp)
8110432c:	10800017 	ldw	r2,0(r2)
81104330:	01400204 	movi	r5,8
81104334:	1009883a 	mov	r4,r2
81104338:	11048980 	call	81104898 <uliDpktReadReg>
8110433c:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_CFG_1_REG_OFST);

		pxDpktCh->xDpktDataPacketConfig.usiCcdXSize = (alt_u16)(
81104340:	e0bffe17 	ldw	r2,-8(fp)
81104344:	1007883a 	mov	r3,r2
81104348:	e0bfff17 	ldw	r2,-4(fp)
8110434c:	10c0010d 	sth	r3,4(r2)
				(uliReg & COMM_DATA_PKT_CCD_X_SIZE_MSK) >> 0);
		pxDpktCh->xDpktDataPacketConfig.usiCcdYSize = (alt_u16)(
				(uliReg & COMM_DATA_PKT_CCD_Y_SIZE_MSK) >> 16);
81104350:	e0bffe17 	ldw	r2,-8(fp)
81104354:	1004d43a 	srli	r2,r2,16
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_CFG_1_REG_OFST);

		pxDpktCh->xDpktDataPacketConfig.usiCcdXSize = (alt_u16)(
				(uliReg & COMM_DATA_PKT_CCD_X_SIZE_MSK) >> 0);
		pxDpktCh->xDpktDataPacketConfig.usiCcdYSize = (alt_u16)(
81104358:	1007883a 	mov	r3,r2
8110435c:	e0bfff17 	ldw	r2,-4(fp)
81104360:	10c0018d 	sth	r3,6(r2)
				(uliReg & COMM_DATA_PKT_CCD_Y_SIZE_MSK) >> 16);

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104364:	e0bfff17 	ldw	r2,-4(fp)
81104368:	10800017 	ldw	r2,0(r2)
8110436c:	01400244 	movi	r5,9
81104370:	1009883a 	mov	r4,r2
81104374:	11048980 	call	81104898 <uliDpktReadReg>
81104378:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_CFG_2_REG_OFST);

		pxDpktCh->xDpktDataPacketConfig.usiDataYSize = (alt_u16)(
8110437c:	e0bffe17 	ldw	r2,-8(fp)
81104380:	1007883a 	mov	r3,r2
81104384:	e0bfff17 	ldw	r2,-4(fp)
81104388:	10c0020d 	sth	r3,8(r2)
				(uliReg & COMM_DATA_PKT_DATA_Y_SIZE_MSK) >> 0);
		pxDpktCh->xDpktDataPacketConfig.usiOverscanYSize = (alt_u16)(
				(uliReg & COMM_DATA_PKT_OVER_Y_SIZE_MSK) >> 16);
8110438c:	e0bffe17 	ldw	r2,-8(fp)
81104390:	1004d43a 	srli	r2,r2,16
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_CFG_2_REG_OFST);

		pxDpktCh->xDpktDataPacketConfig.usiDataYSize = (alt_u16)(
				(uliReg & COMM_DATA_PKT_DATA_Y_SIZE_MSK) >> 0);
		pxDpktCh->xDpktDataPacketConfig.usiOverscanYSize = (alt_u16)(
81104394:	1007883a 	mov	r3,r2
81104398:	e0bfff17 	ldw	r2,-4(fp)
8110439c:	10c0028d 	sth	r3,10(r2)
				(uliReg & COMM_DATA_PKT_OVER_Y_SIZE_MSK) >> 16);

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
811043a0:	e0bfff17 	ldw	r2,-4(fp)
811043a4:	10800017 	ldw	r2,0(r2)
811043a8:	01400284 	movi	r5,10
811043ac:	1009883a 	mov	r4,r2
811043b0:	11048980 	call	81104898 <uliDpktReadReg>
811043b4:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_CFG_3_REG_OFST);

		pxDpktCh->xDpktDataPacketConfig.usiPacketLength = (alt_u16)(
811043b8:	e0bffe17 	ldw	r2,-8(fp)
811043bc:	1007883a 	mov	r3,r2
811043c0:	e0bfff17 	ldw	r2,-4(fp)
811043c4:	10c0030d 	sth	r3,12(r2)
				(uliReg & COMM_DATA_PKT_LENGTH_MSK) >> 0);

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
811043c8:	e0bfff17 	ldw	r2,-4(fp)
811043cc:	10800017 	ldw	r2,0(r2)
811043d0:	014002c4 	movi	r5,11
811043d4:	1009883a 	mov	r4,r2
811043d8:	11048980 	call	81104898 <uliDpktReadReg>
811043dc:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_CFG_4_REG_OFST);

		pxDpktCh->xDpktDataPacketConfig.ucFeeMode= (alt_u8)(
811043e0:	e0bffe17 	ldw	r2,-8(fp)
811043e4:	1007883a 	mov	r3,r2
811043e8:	e0bfff17 	ldw	r2,-4(fp)
811043ec:	10c00385 	stb	r3,14(r2)
				(uliReg & COMM_DATA_PKT_FEE_MODE_MSK) >> 0);
		pxDpktCh->xDpktDataPacketConfig.ucCcdNumber= (alt_u8)(
				(uliReg & COMM_DATA_PKT_CCD_NUMBER_MSK) >> 8);
811043f0:	e0bffe17 	ldw	r2,-8(fp)
811043f4:	10bfc00c 	andi	r2,r2,65280
811043f8:	1004d23a 	srli	r2,r2,8
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_CFG_4_REG_OFST);

		pxDpktCh->xDpktDataPacketConfig.ucFeeMode= (alt_u8)(
				(uliReg & COMM_DATA_PKT_FEE_MODE_MSK) >> 0);
		pxDpktCh->xDpktDataPacketConfig.ucCcdNumber= (alt_u8)(
811043fc:	1007883a 	mov	r3,r2
81104400:	e0bfff17 	ldw	r2,-4(fp)
81104404:	10c003c5 	stb	r3,15(r2)
				(uliReg & COMM_DATA_PKT_CCD_NUMBER_MSK) >> 8);

		bStatus = TRUE;
81104408:	00800044 	movi	r2,1
8110440c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104410:	e0bffd17 	ldw	r2,-12(fp)
}
81104414:	e037883a 	mov	sp,fp
81104418:	dfc00117 	ldw	ra,4(sp)
8110441c:	df000017 	ldw	fp,0(sp)
81104420:	dec00204 	addi	sp,sp,8
81104424:	f800283a 	ret

81104428 <bDpktGetPacketHeader>:

bool bDpktGetPacketHeader(TDpktChannel *pxDpktCh) {
81104428:	defffb04 	addi	sp,sp,-20
8110442c:	dfc00415 	stw	ra,16(sp)
81104430:	df000315 	stw	fp,12(sp)
81104434:	df000304 	addi	fp,sp,12
81104438:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
8110443c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104440:	e03ffe15 	stw	zero,-8(fp)

	if (pxDpktCh != NULL) {
81104444:	e0bfff17 	ldw	r2,-4(fp)
81104448:	10002026 	beq	r2,zero,811044cc <bDpktGetPacketHeader+0xa4>

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
8110444c:	e0bfff17 	ldw	r2,-4(fp)
81104450:	10800017 	ldw	r2,0(r2)
81104454:	01400304 	movi	r5,12
81104458:	1009883a 	mov	r4,r2
8110445c:	11048980 	call	81104898 <uliDpktReadReg>
81104460:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_HDR_1_REG_OFST);

		pxDpktCh->xDpktDataPacketHeader.usiLength = (alt_u16)(
81104464:	e0bffe17 	ldw	r2,-8(fp)
81104468:	1007883a 	mov	r3,r2
8110446c:	e0bfff17 	ldw	r2,-4(fp)
81104470:	10c0040d 	sth	r3,16(r2)
				(uliReg & COMM_DATA_PKT_HDR_LENGTH_MSK) >> 0);
		pxDpktCh->xDpktDataPacketHeader.usiType = (alt_u16)(
				(uliReg & COMM_DATA_PKT_HDR_TYPE_MSK) >> 16);
81104474:	e0bffe17 	ldw	r2,-8(fp)
81104478:	1004d43a 	srli	r2,r2,16
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_HDR_1_REG_OFST);

		pxDpktCh->xDpktDataPacketHeader.usiLength = (alt_u16)(
				(uliReg & COMM_DATA_PKT_HDR_LENGTH_MSK) >> 0);
		pxDpktCh->xDpktDataPacketHeader.usiType = (alt_u16)(
8110447c:	1007883a 	mov	r3,r2
81104480:	e0bfff17 	ldw	r2,-4(fp)
81104484:	10c0048d 	sth	r3,18(r2)
				(uliReg & COMM_DATA_PKT_HDR_TYPE_MSK) >> 16);

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104488:	e0bfff17 	ldw	r2,-4(fp)
8110448c:	10800017 	ldw	r2,0(r2)
81104490:	01400344 	movi	r5,13
81104494:	1009883a 	mov	r4,r2
81104498:	11048980 	call	81104898 <uliDpktReadReg>
8110449c:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_HDR_2_REG_OFST);

		pxDpktCh->xDpktDataPacketHeader.usiFrameCounter = (alt_u16)(
811044a0:	e0bffe17 	ldw	r2,-8(fp)
811044a4:	1007883a 	mov	r3,r2
811044a8:	e0bfff17 	ldw	r2,-4(fp)
811044ac:	10c0050d 	sth	r3,20(r2)
				(uliReg & COMM_DATA_PKT_HDR_FRAME_CNT_MSK) >> 0);
		pxDpktCh->xDpktDataPacketHeader.usiSequenceCounter = (alt_u16)(
				(uliReg & COMM_DATA_PKT_SEQ_CNT_MSK) >> 16);
811044b0:	e0bffe17 	ldw	r2,-8(fp)
811044b4:	1004d43a 	srli	r2,r2,16
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_HDR_2_REG_OFST);

		pxDpktCh->xDpktDataPacketHeader.usiFrameCounter = (alt_u16)(
				(uliReg & COMM_DATA_PKT_HDR_FRAME_CNT_MSK) >> 0);
		pxDpktCh->xDpktDataPacketHeader.usiSequenceCounter = (alt_u16)(
811044b8:	1007883a 	mov	r3,r2
811044bc:	e0bfff17 	ldw	r2,-4(fp)
811044c0:	10c0058d 	sth	r3,22(r2)
				(uliReg & COMM_DATA_PKT_SEQ_CNT_MSK) >> 16);

		bStatus = TRUE;
811044c4:	00800044 	movi	r2,1
811044c8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811044cc:	e0bffd17 	ldw	r2,-12(fp)
}
811044d0:	e037883a 	mov	sp,fp
811044d4:	dfc00117 	ldw	ra,4(sp)
811044d8:	df000017 	ldw	fp,0(sp)
811044dc:	dec00204 	addi	sp,sp,8
811044e0:	f800283a 	ret

811044e4 <bDpktSetPixelDelay>:

bool bDpktSetPixelDelay(TDpktChannel *pxDpktCh) {
811044e4:	defffb04 	addi	sp,sp,-20
811044e8:	dfc00415 	stw	ra,16(sp)
811044ec:	df000315 	stw	fp,12(sp)
811044f0:	df000304 	addi	fp,sp,12
811044f4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811044f8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811044fc:	e03ffe15 	stw	zero,-8(fp)

	if (pxDpktCh != NULL) {
81104500:	e0bfff17 	ldw	r2,-4(fp)
81104504:	10004126 	beq	r2,zero,8110460c <bDpktSetPixelDelay+0x128>

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104508:	e0bfff17 	ldw	r2,-4(fp)
8110450c:	10800017 	ldw	r2,0(r2)
81104510:	01400384 	movi	r5,14
81104514:	1009883a 	mov	r4,r2
81104518:	11048980 	call	81104898 <uliDpktReadReg>
8110451c:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_PX_DLY_1_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_LINE_DLY_MSK);
81104520:	e0bffe17 	ldw	r2,-8(fp)
81104524:	10bfffec 	andhi	r2,r2,65535
81104528:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_DATA_PKT_LINE_DLY_MSK
				& (alt_u32)(pxDpktCh->xDpktPixelDelay.usiLineDelay << 0));
8110452c:	e0bfff17 	ldw	r2,-4(fp)
81104530:	1080060b 	ldhu	r2,24(r2)
81104534:	10bfffcc 	andi	r2,r2,65535

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_PX_DLY_1_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_LINE_DLY_MSK);
		uliReg |= (COMM_DATA_PKT_LINE_DLY_MSK
81104538:	e0fffe17 	ldw	r3,-8(fp)
8110453c:	1884b03a 	or	r2,r3,r2
81104540:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32)(pxDpktCh->xDpktPixelDelay.usiLineDelay << 0));

		vDpktWriteReg(pxDpktCh->puliDpktChAddr, COMM_DATA_PKT_PX_DLY_1_REG_OFST,
81104544:	e0bfff17 	ldw	r2,-4(fp)
81104548:	10800017 	ldw	r2,0(r2)
8110454c:	e1bffe17 	ldw	r6,-8(fp)
81104550:	01400384 	movi	r5,14
81104554:	1009883a 	mov	r4,r2
81104558:	110484c0 	call	8110484c <vDpktWriteReg>
				uliReg);
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
8110455c:	e0bfff17 	ldw	r2,-4(fp)
81104560:	10800017 	ldw	r2,0(r2)
81104564:	014003c4 	movi	r5,15
81104568:	1009883a 	mov	r4,r2
8110456c:	11048980 	call	81104898 <uliDpktReadReg>
81104570:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_PX_DLY_2_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_COLUMN_DLY_MSK);
81104574:	e0bffe17 	ldw	r2,-8(fp)
81104578:	10bfffec 	andhi	r2,r2,65535
8110457c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_DATA_PKT_COLUMN_DLY_MSK
				& (alt_u32)(pxDpktCh->xDpktPixelDelay.usiColumnDelay << 0));
81104580:	e0bfff17 	ldw	r2,-4(fp)
81104584:	1080068b 	ldhu	r2,26(r2)
81104588:	10bfffcc 	andi	r2,r2,65535
				uliReg);
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_PX_DLY_2_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_COLUMN_DLY_MSK);
		uliReg |= (COMM_DATA_PKT_COLUMN_DLY_MSK
8110458c:	e0fffe17 	ldw	r3,-8(fp)
81104590:	1884b03a 	or	r2,r3,r2
81104594:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32)(pxDpktCh->xDpktPixelDelay.usiColumnDelay << 0));

		vDpktWriteReg(pxDpktCh->puliDpktChAddr, COMM_DATA_PKT_PX_DLY_2_REG_OFST,
81104598:	e0bfff17 	ldw	r2,-4(fp)
8110459c:	10800017 	ldw	r2,0(r2)
811045a0:	e1bffe17 	ldw	r6,-8(fp)
811045a4:	014003c4 	movi	r5,15
811045a8:	1009883a 	mov	r4,r2
811045ac:	110484c0 	call	8110484c <vDpktWriteReg>
				uliReg);
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
811045b0:	e0bfff17 	ldw	r2,-4(fp)
811045b4:	10800017 	ldw	r2,0(r2)
811045b8:	01400404 	movi	r5,16
811045bc:	1009883a 	mov	r4,r2
811045c0:	11048980 	call	81104898 <uliDpktReadReg>
811045c4:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_PX_DLY_3_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_ADC_DLY_MSK);
811045c8:	e0bffe17 	ldw	r2,-8(fp)
811045cc:	10bfffec 	andhi	r2,r2,65535
811045d0:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_DATA_PKT_ADC_DLY_MSK
				& (alt_u32)(pxDpktCh->xDpktPixelDelay.usiAdcDelay << 0));
811045d4:	e0bfff17 	ldw	r2,-4(fp)
811045d8:	1080070b 	ldhu	r2,28(r2)
811045dc:	10bfffcc 	andi	r2,r2,65535
				uliReg);
		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
				COMM_DATA_PKT_PX_DLY_3_REG_OFST);

		uliReg &= (~COMM_DATA_PKT_ADC_DLY_MSK);
		uliReg |= (COMM_DATA_PKT_ADC_DLY_MSK
811045e0:	e0fffe17 	ldw	r3,-8(fp)
811045e4:	1884b03a 	or	r2,r3,r2
811045e8:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32)(pxDpktCh->xDpktPixelDelay.usiAdcDelay << 0));

		vDpktWriteReg(pxDpktCh->puliDpktChAddr, COMM_DATA_PKT_PX_DLY_3_REG_OFST,
811045ec:	e0bfff17 	ldw	r2,-4(fp)
811045f0:	10800017 	ldw	r2,0(r2)
811045f4:	e1bffe17 	ldw	r6,-8(fp)
811045f8:	01400404 	movi	r5,16
811045fc:	1009883a 	mov	r4,r2
81104600:	110484c0 	call	8110484c <vDpktWriteReg>
				uliReg);

		bStatus = TRUE;
81104604:	00800044 	movi	r2,1
81104608:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
8110460c:	e0bffd17 	ldw	r2,-12(fp)
}
81104610:	e037883a 	mov	sp,fp
81104614:	dfc00117 	ldw	ra,4(sp)
81104618:	df000017 	ldw	fp,0(sp)
8110461c:	dec00204 	addi	sp,sp,8
81104620:	f800283a 	ret

81104624 <bDpktGetPixelDelay>:

bool bDpktGetPixelDelay(TDpktChannel *pxDpktCh) {
81104624:	defffb04 	addi	sp,sp,-20
81104628:	dfc00415 	stw	ra,16(sp)
8110462c:	df000315 	stw	fp,12(sp)
81104630:	df000304 	addi	fp,sp,12
81104634:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104638:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110463c:	e03ffe15 	stw	zero,-8(fp)

	if (pxDpktCh != NULL) {
81104640:	e0bfff17 	ldw	r2,-4(fp)
81104644:	10002026 	beq	r2,zero,811046c8 <bDpktGetPixelDelay+0xa4>

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104648:	e0bfff17 	ldw	r2,-4(fp)
8110464c:	10800017 	ldw	r2,0(r2)
81104650:	01400384 	movi	r5,14
81104654:	1009883a 	mov	r4,r2
81104658:	11048980 	call	81104898 <uliDpktReadReg>
8110465c:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_PX_DLY_1_REG_OFST);

		pxDpktCh->xDpktPixelDelay.usiLineDelay = (alt_u16)(
81104660:	e0bffe17 	ldw	r2,-8(fp)
81104664:	1007883a 	mov	r3,r2
81104668:	e0bfff17 	ldw	r2,-4(fp)
8110466c:	10c0060d 	sth	r3,24(r2)
				(uliReg & COMM_DATA_PKT_LINE_DLY_MSK) >> 0);

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104670:	e0bfff17 	ldw	r2,-4(fp)
81104674:	10800017 	ldw	r2,0(r2)
81104678:	014003c4 	movi	r5,15
8110467c:	1009883a 	mov	r4,r2
81104680:	11048980 	call	81104898 <uliDpktReadReg>
81104684:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_PX_DLY_2_REG_OFST);

		pxDpktCh->xDpktPixelDelay.usiColumnDelay = (alt_u16)(
81104688:	e0bffe17 	ldw	r2,-8(fp)
8110468c:	1007883a 	mov	r3,r2
81104690:	e0bfff17 	ldw	r2,-4(fp)
81104694:	10c0068d 	sth	r3,26(r2)
				(uliReg & COMM_DATA_PKT_COLUMN_DLY_MSK) >> 0);

		uliReg = uliDpktReadReg(pxDpktCh->puliDpktChAddr,
81104698:	e0bfff17 	ldw	r2,-4(fp)
8110469c:	10800017 	ldw	r2,0(r2)
811046a0:	01400404 	movi	r5,16
811046a4:	1009883a 	mov	r4,r2
811046a8:	11048980 	call	81104898 <uliDpktReadReg>
811046ac:	e0bffe15 	stw	r2,-8(fp)
				COMM_DATA_PKT_PX_DLY_3_REG_OFST);

		pxDpktCh->xDpktPixelDelay.usiAdcDelay = (alt_u16)(
811046b0:	e0bffe17 	ldw	r2,-8(fp)
811046b4:	1007883a 	mov	r3,r2
811046b8:	e0bfff17 	ldw	r2,-4(fp)
811046bc:	10c0070d 	sth	r3,28(r2)
				(uliReg & COMM_DATA_PKT_ADC_DLY_MSK) >> 0);

		bStatus = TRUE;
811046c0:	00800044 	movi	r2,1
811046c4:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811046c8:	e0bffd17 	ldw	r2,-12(fp)
}
811046cc:	e037883a 	mov	sp,fp
811046d0:	dfc00117 	ldw	ra,4(sp)
811046d4:	df000017 	ldw	fp,0(sp)
811046d8:	dec00204 	addi	sp,sp,8
811046dc:	f800283a 	ret

811046e0 <bDpktInitCh>:

bool bDpktInitCh(TDpktChannel *pxDpktCh, alt_u8 ucCommCh) {
811046e0:	defffb04 	addi	sp,sp,-20
811046e4:	dfc00415 	stw	ra,16(sp)
811046e8:	df000315 	stw	fp,12(sp)
811046ec:	df000304 	addi	fp,sp,12
811046f0:	e13ffe15 	stw	r4,-8(fp)
811046f4:	2805883a 	mov	r2,r5
811046f8:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
811046fc:	e03ffd15 	stw	zero,-12(fp)

	if (pxDpktCh != NULL) {
81104700:	e0bffe17 	ldw	r2,-8(fp)
81104704:	10004b26 	beq	r2,zero,81104834 <bDpktInitCh+0x154>
		bStatus = TRUE;
81104708:	00800044 	movi	r2,1
8110470c:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
81104710:	e0bfff03 	ldbu	r2,-4(fp)
81104714:	10c00228 	cmpgeui	r3,r2,8
81104718:	1800361e 	bne	r3,zero,811047f4 <bDpktInitCh+0x114>
8110471c:	100690ba 	slli	r3,r2,2
81104720:	00a04434 	movhi	r2,33040
81104724:	1091cd04 	addi	r2,r2,18228
81104728:	1885883a 	add	r2,r3,r2
8110472c:	10800017 	ldw	r2,0(r2)
81104730:	1000683a 	jmp	r2
81104734:	81104754 	ori	r4,r16,16669
81104738:	81104768 	cmpgeui	r4,r16,16669
8110473c:	8110477c 	xorhi	r4,r16,16669
81104740:	81104790 	cmplti	r4,r16,16670
81104744:	811047a4 	muli	r4,r16,16670
81104748:	811047b8 	rdprs	r4,r16,16670
8110474c:	811047cc 	andi	r4,r16,16671
81104750:	811047e0 	cmpeqi	r4,r16,16671
		case eCommSpwCh1:
			pxDpktCh->puliDpktChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81104754:	e0fffe17 	ldw	r3,-8(fp)
81104758:	00a04834 	movhi	r2,33056
8110475c:	108b0004 	addi	r2,r2,11264
81104760:	18800015 	stw	r2,0(r3)
			break;
81104764:	00002506 	br	811047fc <bDpktInitCh+0x11c>
		case eCommSpwCh2:
			pxDpktCh->puliDpktChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
81104768:	e0fffe17 	ldw	r3,-8(fp)
8110476c:	00a04834 	movhi	r2,33056
81104770:	108a0004 	addi	r2,r2,10240
81104774:	18800015 	stw	r2,0(r3)
			break;
81104778:	00002006 	br	811047fc <bDpktInitCh+0x11c>
		case eCommSpwCh3:
			pxDpktCh->puliDpktChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
8110477c:	e0fffe17 	ldw	r3,-8(fp)
81104780:	00a04834 	movhi	r2,33056
81104784:	108b0004 	addi	r2,r2,11264
81104788:	18800015 	stw	r2,0(r3)
			break;
8110478c:	00001b06 	br	811047fc <bDpktInitCh+0x11c>
		case eCommSpwCh4:
			pxDpktCh->puliDpktChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
81104790:	e0fffe17 	ldw	r3,-8(fp)
81104794:	00a04834 	movhi	r2,33056
81104798:	108a0004 	addi	r2,r2,10240
8110479c:	18800015 	stw	r2,0(r3)
			break;
811047a0:	00001606 	br	811047fc <bDpktInitCh+0x11c>
		case eCommSpwCh5:
			pxDpktCh->puliDpktChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
811047a4:	e0fffe17 	ldw	r3,-8(fp)
811047a8:	00a04834 	movhi	r2,33056
811047ac:	108b0004 	addi	r2,r2,11264
811047b0:	18800015 	stw	r2,0(r3)
			break;
811047b4:	00001106 	br	811047fc <bDpktInitCh+0x11c>
		case eCommSpwCh6:
			pxDpktCh->puliDpktChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
811047b8:	e0fffe17 	ldw	r3,-8(fp)
811047bc:	00a04834 	movhi	r2,33056
811047c0:	108a0004 	addi	r2,r2,10240
811047c4:	18800015 	stw	r2,0(r3)
			break;
811047c8:	00000c06 	br	811047fc <bDpktInitCh+0x11c>
		case eCommSpwCh7:
			pxDpktCh->puliDpktChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
811047cc:	e0fffe17 	ldw	r3,-8(fp)
811047d0:	00a04834 	movhi	r2,33056
811047d4:	108b0004 	addi	r2,r2,11264
811047d8:	18800015 	stw	r2,0(r3)
			break;
811047dc:	00000706 	br	811047fc <bDpktInitCh+0x11c>
		case eCommSpwCh8:
			pxDpktCh->puliDpktChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
811047e0:	e0fffe17 	ldw	r3,-8(fp)
811047e4:	00a04834 	movhi	r2,33056
811047e8:	108a0004 	addi	r2,r2,10240
811047ec:	18800015 	stw	r2,0(r3)
			break;
811047f0:	00000206 	br	811047fc <bDpktInitCh+0x11c>
		default:
			bStatus = FALSE;
811047f4:	e03ffd15 	stw	zero,-12(fp)
			break;
811047f8:	0001883a 	nop
		}

		if (bStatus) {
811047fc:	e0bffd17 	ldw	r2,-12(fp)
81104800:	10000c26 	beq	r2,zero,81104834 <bDpktInitCh+0x154>
			if (!bDpktGetPacketConfig(pxDpktCh)) {
81104804:	e13ffe17 	ldw	r4,-8(fp)
81104808:	11043040 	call	81104304 <bDpktGetPacketConfig>
8110480c:	1000011e 	bne	r2,zero,81104814 <bDpktInitCh+0x134>
				bStatus = FALSE;
81104810:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bDpktGetPacketHeader(pxDpktCh)) {
81104814:	e13ffe17 	ldw	r4,-8(fp)
81104818:	11044280 	call	81104428 <bDpktGetPacketHeader>
8110481c:	1000011e 	bne	r2,zero,81104824 <bDpktInitCh+0x144>
				bStatus = FALSE;
81104820:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bDpktGetPixelDelay(pxDpktCh)) {
81104824:	e13ffe17 	ldw	r4,-8(fp)
81104828:	11046240 	call	81104624 <bDpktGetPixelDelay>
8110482c:	1000011e 	bne	r2,zero,81104834 <bDpktInitCh+0x154>
				bStatus = FALSE;
81104830:	e03ffd15 	stw	zero,-12(fp)
			}
		}
	}
	return bStatus;
81104834:	e0bffd17 	ldw	r2,-12(fp)
}
81104838:	e037883a 	mov	sp,fp
8110483c:	dfc00117 	ldw	ra,4(sp)
81104840:	df000017 	ldw	fp,0(sp)
81104844:	dec00204 	addi	sp,sp,8
81104848:	f800283a 	ret

8110484c <vDpktWriteReg>:
//! [public functions]

//! [private functions]
static void vDpktWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
8110484c:	defffc04 	addi	sp,sp,-16
81104850:	df000315 	stw	fp,12(sp)
81104854:	df000304 	addi	fp,sp,12
81104858:	e13ffd15 	stw	r4,-12(fp)
8110485c:	e17ffe15 	stw	r5,-8(fp)
81104860:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81104864:	e0bffe17 	ldw	r2,-8(fp)
81104868:	1085883a 	add	r2,r2,r2
8110486c:	1085883a 	add	r2,r2,r2
81104870:	1007883a 	mov	r3,r2
81104874:	e0bffd17 	ldw	r2,-12(fp)
81104878:	10c5883a 	add	r2,r2,r3
8110487c:	e0ffff17 	ldw	r3,-4(fp)
81104880:	10c00015 	stw	r3,0(r2)
}
81104884:	0001883a 	nop
81104888:	e037883a 	mov	sp,fp
8110488c:	df000017 	ldw	fp,0(sp)
81104890:	dec00104 	addi	sp,sp,4
81104894:	f800283a 	ret

81104898 <uliDpktReadReg>:

static alt_u32 uliDpktReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81104898:	defffc04 	addi	sp,sp,-16
8110489c:	df000315 	stw	fp,12(sp)
811048a0:	df000304 	addi	fp,sp,12
811048a4:	e13ffe15 	stw	r4,-8(fp)
811048a8:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811048ac:	e0bfff17 	ldw	r2,-4(fp)
811048b0:	1085883a 	add	r2,r2,r2
811048b4:	1085883a 	add	r2,r2,r2
811048b8:	1007883a 	mov	r3,r2
811048bc:	e0bffe17 	ldw	r2,-8(fp)
811048c0:	10c5883a 	add	r2,r2,r3
811048c4:	10800017 	ldw	r2,0(r2)
811048c8:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
811048cc:	e0bffd17 	ldw	r2,-12(fp)
}
811048d0:	e037883a 	mov	sp,fp
811048d4:	df000017 	ldw	fp,0(sp)
811048d8:	dec00104 	addi	sp,sp,4
811048dc:	f800283a 	ret

811048e0 <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
811048e0:	defffc04 	addi	sp,sp,-16
811048e4:	dfc00315 	stw	ra,12(sp)
811048e8:	df000215 	stw	fp,8(sp)
811048ec:	df000204 	addi	fp,sp,8
811048f0:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811048f4:	e0bfff17 	ldw	r2,-4(fp)
811048f8:	e0bffe15 	stw	r2,-8(fp)
//	fprintf(fp,"Interrupcao fee buffer\n");
#endif

	/* Make one requests for the Double buffer */
	/* Address of the NFEE is hard coded */
	vFeebCh1IrqFlagClrBufferEmpty();
811048fc:	1104aa00 	call	81104aa0 <vFeebCh1IrqFlagClrBufferEmpty>
}
81104900:	0001883a 	nop
81104904:	e037883a 	mov	sp,fp
81104908:	dfc00117 	ldw	ra,4(sp)
8110490c:	df000017 	ldw	fp,0(sp)
81104910:	dec00204 	addi	sp,sp,8
81104914:	f800283a 	ret

81104918 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
81104918:	defffc04 	addi	sp,sp,-16
8110491c:	dfc00315 	stw	ra,12(sp)
81104920:	df000215 	stw	fp,8(sp)
81104924:	df000204 	addi	fp,sp,8
81104928:	e13fff15 	stw	r4,-4(fp)
	volatile int* pviHoldContext = (volatile int*) pvContext;
8110492c:	e0bfff17 	ldw	r2,-4(fp)
81104930:	e0bffe15 	stw	r2,-8(fp)
	error_codel = OSQPost(xNfeeSchedule, (void *) uiCmdtoSend.ulWord);
	if (error_codel != OS_ERR_NONE) {
		vFailRequestDMAFromIRQ(1);
	}
*/
	vFeebCh2IrqFlagClrBufferEmpty();
81104934:	1104adc0 	call	81104adc <vFeebCh2IrqFlagClrBufferEmpty>
}
81104938:	0001883a 	nop
8110493c:	e037883a 	mov	sp,fp
81104940:	dfc00117 	ldw	ra,4(sp)
81104944:	df000017 	ldw	fp,0(sp)
81104948:	dec00204 	addi	sp,sp,8
8110494c:	f800283a 	ret

81104950 <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81104950:	defffc04 	addi	sp,sp,-16
81104954:	dfc00315 	stw	ra,12(sp)
81104958:	df000215 	stw	fp,8(sp)
8110495c:	df000204 	addi	fp,sp,8
81104960:	e13fff15 	stw	r4,-4(fp)
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104964:	e0bfff17 	ldw	r2,-4(fp)
81104968:	e0bffe15 	stw	r2,-8(fp)
	error_codel = OSQPost(xNfeeSchedule, (void *) uiCmdtoSend.ulWord);
	if (error_codel != OS_ERR_NONE) {
		vFailRequestDMAFromIRQ(2);
	}
*/
	vFeebCh3IrqFlagClrBufferEmpty();
8110496c:	1104b180 	call	81104b18 <vFeebCh3IrqFlagClrBufferEmpty>
}
81104970:	0001883a 	nop
81104974:	e037883a 	mov	sp,fp
81104978:	dfc00117 	ldw	ra,4(sp)
8110497c:	df000017 	ldw	fp,0(sp)
81104980:	dec00204 	addi	sp,sp,8
81104984:	f800283a 	ret

81104988 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
81104988:	defffc04 	addi	sp,sp,-16
8110498c:	dfc00315 	stw	ra,12(sp)
81104990:	df000215 	stw	fp,8(sp)
81104994:	df000204 	addi	fp,sp,8
81104998:	e13fff15 	stw	r4,-4(fp)
	volatile int* pviHoldContext = (volatile int*) pvContext;
8110499c:	e0bfff17 	ldw	r2,-4(fp)
811049a0:	e0bffe15 	stw	r2,-8(fp)
	error_codel = OSQPost(xNfeeSchedule, (void *) uiCmdtoSend.ulWord);
	if (error_codel != OS_ERR_NONE) {
		vFailRequestDMAFromIRQ(3);
	}
*/
	vFeebCh4IrqFlagClrBufferEmpty();
811049a4:	1104b540 	call	81104b54 <vFeebCh4IrqFlagClrBufferEmpty>
}
811049a8:	0001883a 	nop
811049ac:	e037883a 	mov	sp,fp
811049b0:	dfc00117 	ldw	ra,4(sp)
811049b4:	df000017 	ldw	fp,0(sp)
811049b8:	dec00204 	addi	sp,sp,8
811049bc:	f800283a 	ret

811049c0 <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
811049c0:	defffc04 	addi	sp,sp,-16
811049c4:	dfc00315 	stw	ra,12(sp)
811049c8:	df000215 	stw	fp,8(sp)
811049cc:	df000204 	addi	fp,sp,8
811049d0:	e13fff15 	stw	r4,-4(fp)
	volatile int* pviHoldContext = (volatile int*) pvContext;
811049d4:	e0bfff17 	ldw	r2,-4(fp)
811049d8:	e0bffe15 	stw	r2,-8(fp)
	error_codel = OSQPost(xNfeeSchedule, (void *) uiCmdtoSend.ulWord);
	if (error_codel != OS_ERR_NONE) {
		vFailRequestDMAFromIRQ(4);
	}
*/
	vFeebCh5IrqFlagClrBufferEmpty();
811049dc:	1104b900 	call	81104b90 <vFeebCh5IrqFlagClrBufferEmpty>
}
811049e0:	0001883a 	nop
811049e4:	e037883a 	mov	sp,fp
811049e8:	dfc00117 	ldw	ra,4(sp)
811049ec:	df000017 	ldw	fp,0(sp)
811049f0:	dec00204 	addi	sp,sp,8
811049f4:	f800283a 	ret

811049f8 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
811049f8:	defffc04 	addi	sp,sp,-16
811049fc:	dfc00315 	stw	ra,12(sp)
81104a00:	df000215 	stw	fp,8(sp)
81104a04:	df000204 	addi	fp,sp,8
81104a08:	e13fff15 	stw	r4,-4(fp)
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104a0c:	e0bfff17 	ldw	r2,-4(fp)
81104a10:	e0bffe15 	stw	r2,-8(fp)
	error_codel = OSQPost(xNfeeSchedule, (void *) uiCmdtoSend.ulWord);
	if (error_codel != OS_ERR_NONE) {
		vFailRequestDMAFromIRQ(5);
	}
*/
	vFeebCh6IrqFlagClrBufferEmpty();
81104a14:	1104bcc0 	call	81104bcc <vFeebCh6IrqFlagClrBufferEmpty>
}
81104a18:	0001883a 	nop
81104a1c:	e037883a 	mov	sp,fp
81104a20:	dfc00117 	ldw	ra,4(sp)
81104a24:	df000017 	ldw	fp,0(sp)
81104a28:	dec00204 	addi	sp,sp,8
81104a2c:	f800283a 	ret

81104a30 <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81104a30:	defffc04 	addi	sp,sp,-16
81104a34:	dfc00315 	stw	ra,12(sp)
81104a38:	df000215 	stw	fp,8(sp)
81104a3c:	df000204 	addi	fp,sp,8
81104a40:	e13fff15 	stw	r4,-4(fp)
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104a44:	e0bfff17 	ldw	r2,-4(fp)
81104a48:	e0bffe15 	stw	r2,-8(fp)

	vFeebCh7IrqFlagClrBufferEmpty();
81104a4c:	1104c080 	call	81104c08 <vFeebCh7IrqFlagClrBufferEmpty>
}
81104a50:	0001883a 	nop
81104a54:	e037883a 	mov	sp,fp
81104a58:	dfc00117 	ldw	ra,4(sp)
81104a5c:	df000017 	ldw	fp,0(sp)
81104a60:	dec00204 	addi	sp,sp,8
81104a64:	f800283a 	ret

81104a68 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
81104a68:	defffc04 	addi	sp,sp,-16
81104a6c:	dfc00315 	stw	ra,12(sp)
81104a70:	df000215 	stw	fp,8(sp)
81104a74:	df000204 	addi	fp,sp,8
81104a78:	e13fff15 	stw	r4,-4(fp)
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104a7c:	e0bfff17 	ldw	r2,-4(fp)
81104a80:	e0bffe15 	stw	r2,-8(fp)

	vFeebCh8IrqFlagClrBufferEmpty();
81104a84:	1104c440 	call	81104c44 <vFeebCh8IrqFlagClrBufferEmpty>
}
81104a88:	0001883a 	nop
81104a8c:	e037883a 	mov	sp,fp
81104a90:	dfc00117 	ldw	ra,4(sp)
81104a94:	df000017 	ldw	fp,0(sp)
81104a98:	dec00204 	addi	sp,sp,8
81104a9c:	f800283a 	ret

81104aa0 <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81104aa0:	defffe04 	addi	sp,sp,-8
81104aa4:	dfc00115 	stw	ra,4(sp)
81104aa8:	df000015 	stw	fp,0(sp)
81104aac:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81104ab0:	01804004 	movi	r6,256
81104ab4:	014004c4 	movi	r5,19
81104ab8:	01204834 	movhi	r4,33056
81104abc:	210b0004 	addi	r4,r4,11264
81104ac0:	110611c0 	call	8110611c <vFeebWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_BUFF_EPY_FLG_CLR_MSK);
}
81104ac4:	0001883a 	nop
81104ac8:	e037883a 	mov	sp,fp
81104acc:	dfc00117 	ldw	ra,4(sp)
81104ad0:	df000017 	ldw	fp,0(sp)
81104ad4:	dec00204 	addi	sp,sp,8
81104ad8:	f800283a 	ret

81104adc <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
81104adc:	defffe04 	addi	sp,sp,-8
81104ae0:	dfc00115 	stw	ra,4(sp)
81104ae4:	df000015 	stw	fp,0(sp)
81104ae8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104aec:	01804004 	movi	r6,256
81104af0:	014004c4 	movi	r5,19
81104af4:	01204834 	movhi	r4,33056
81104af8:	210a0004 	addi	r4,r4,10240
81104afc:	110611c0 	call	8110611c <vFeebWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_BUFF_EPY_FLG_CLR_MSK);
}
81104b00:	0001883a 	nop
81104b04:	e037883a 	mov	sp,fp
81104b08:	dfc00117 	ldw	ra,4(sp)
81104b0c:	df000017 	ldw	fp,0(sp)
81104b10:	dec00204 	addi	sp,sp,8
81104b14:	f800283a 	ret

81104b18 <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
81104b18:	defffe04 	addi	sp,sp,-8
81104b1c:	dfc00115 	stw	ra,4(sp)
81104b20:	df000015 	stw	fp,0(sp)
81104b24:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104b28:	01804004 	movi	r6,256
81104b2c:	014004c4 	movi	r5,19
81104b30:	01204834 	movhi	r4,33056
81104b34:	210b0004 	addi	r4,r4,11264
81104b38:	110611c0 	call	8110611c <vFeebWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_BUFF_EPY_FLG_CLR_MSK);
}
81104b3c:	0001883a 	nop
81104b40:	e037883a 	mov	sp,fp
81104b44:	dfc00117 	ldw	ra,4(sp)
81104b48:	df000017 	ldw	fp,0(sp)
81104b4c:	dec00204 	addi	sp,sp,8
81104b50:	f800283a 	ret

81104b54 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
81104b54:	defffe04 	addi	sp,sp,-8
81104b58:	dfc00115 	stw	ra,4(sp)
81104b5c:	df000015 	stw	fp,0(sp)
81104b60:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104b64:	01804004 	movi	r6,256
81104b68:	014004c4 	movi	r5,19
81104b6c:	01204834 	movhi	r4,33056
81104b70:	210a0004 	addi	r4,r4,10240
81104b74:	110611c0 	call	8110611c <vFeebWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_BUFF_EPY_FLG_CLR_MSK);
}
81104b78:	0001883a 	nop
81104b7c:	e037883a 	mov	sp,fp
81104b80:	dfc00117 	ldw	ra,4(sp)
81104b84:	df000017 	ldw	fp,0(sp)
81104b88:	dec00204 	addi	sp,sp,8
81104b8c:	f800283a 	ret

81104b90 <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
81104b90:	defffe04 	addi	sp,sp,-8
81104b94:	dfc00115 	stw	ra,4(sp)
81104b98:	df000015 	stw	fp,0(sp)
81104b9c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104ba0:	01804004 	movi	r6,256
81104ba4:	014004c4 	movi	r5,19
81104ba8:	01204834 	movhi	r4,33056
81104bac:	210b0004 	addi	r4,r4,11264
81104bb0:	110611c0 	call	8110611c <vFeebWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_BUFF_EPY_FLG_CLR_MSK);
}
81104bb4:	0001883a 	nop
81104bb8:	e037883a 	mov	sp,fp
81104bbc:	dfc00117 	ldw	ra,4(sp)
81104bc0:	df000017 	ldw	fp,0(sp)
81104bc4:	dec00204 	addi	sp,sp,8
81104bc8:	f800283a 	ret

81104bcc <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
81104bcc:	defffe04 	addi	sp,sp,-8
81104bd0:	dfc00115 	stw	ra,4(sp)
81104bd4:	df000015 	stw	fp,0(sp)
81104bd8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104bdc:	01804004 	movi	r6,256
81104be0:	014004c4 	movi	r5,19
81104be4:	01204834 	movhi	r4,33056
81104be8:	210a0004 	addi	r4,r4,10240
81104bec:	110611c0 	call	8110611c <vFeebWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_BUFF_EPY_FLG_CLR_MSK);
}
81104bf0:	0001883a 	nop
81104bf4:	e037883a 	mov	sp,fp
81104bf8:	dfc00117 	ldw	ra,4(sp)
81104bfc:	df000017 	ldw	fp,0(sp)
81104c00:	dec00204 	addi	sp,sp,8
81104c04:	f800283a 	ret

81104c08 <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
81104c08:	defffe04 	addi	sp,sp,-8
81104c0c:	dfc00115 	stw	ra,4(sp)
81104c10:	df000015 	stw	fp,0(sp)
81104c14:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104c18:	01804004 	movi	r6,256
81104c1c:	014004c4 	movi	r5,19
81104c20:	01204834 	movhi	r4,33056
81104c24:	210b0004 	addi	r4,r4,11264
81104c28:	110611c0 	call	8110611c <vFeebWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_BUFF_EPY_FLG_CLR_MSK);
}
81104c2c:	0001883a 	nop
81104c30:	e037883a 	mov	sp,fp
81104c34:	dfc00117 	ldw	ra,4(sp)
81104c38:	df000017 	ldw	fp,0(sp)
81104c3c:	dec00204 	addi	sp,sp,8
81104c40:	f800283a 	ret

81104c44 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
81104c44:	defffe04 	addi	sp,sp,-8
81104c48:	dfc00115 	stw	ra,4(sp)
81104c4c:	df000015 	stw	fp,0(sp)
81104c50:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104c54:	01804004 	movi	r6,256
81104c58:	014004c4 	movi	r5,19
81104c5c:	01204834 	movhi	r4,33056
81104c60:	210a0004 	addi	r4,r4,10240
81104c64:	110611c0 	call	8110611c <vFeebWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_BUFF_EPY_FLG_CLR_MSK);
}
81104c68:	0001883a 	nop
81104c6c:	e037883a 	mov	sp,fp
81104c70:	dfc00117 	ldw	ra,4(sp)
81104c74:	df000017 	ldw	fp,0(sp)
81104c78:	dec00204 	addi	sp,sp,8
81104c7c:	f800283a 	ret

81104c80 <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
81104c80:	defffd04 	addi	sp,sp,-12
81104c84:	dfc00215 	stw	ra,8(sp)
81104c88:	df000115 	stw	fp,4(sp)
81104c8c:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81104c90:	01400484 	movi	r5,18
81104c94:	01204834 	movhi	r4,33056
81104c98:	210b0004 	addi	r4,r4,11264
81104c9c:	11061680 	call	81106168 <uliFeebReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
81104ca0:	1080400c 	andi	r2,r2,256
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81104ca4:	10000326 	beq	r2,zero,81104cb4 <bFeebCh1IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
		bFlag = TRUE;
81104ca8:	00800044 	movi	r2,1
81104cac:	e0bfff15 	stw	r2,-4(fp)
81104cb0:	00000106 	br	81104cb8 <bFeebCh1IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104cb4:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104cb8:	e0bfff17 	ldw	r2,-4(fp)
}
81104cbc:	e037883a 	mov	sp,fp
81104cc0:	dfc00117 	ldw	ra,4(sp)
81104cc4:	df000017 	ldw	fp,0(sp)
81104cc8:	dec00204 	addi	sp,sp,8
81104ccc:	f800283a 	ret

81104cd0 <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
81104cd0:	defffd04 	addi	sp,sp,-12
81104cd4:	dfc00215 	stw	ra,8(sp)
81104cd8:	df000115 	stw	fp,4(sp)
81104cdc:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104ce0:	01400484 	movi	r5,18
81104ce4:	01204834 	movhi	r4,33056
81104ce8:	210a0004 	addi	r4,r4,10240
81104cec:	11061680 	call	81106168 <uliFeebReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
81104cf0:	1080400c 	andi	r2,r2,256
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104cf4:	10000326 	beq	r2,zero,81104d04 <bFeebCh2IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
		bFlag = TRUE;
81104cf8:	00800044 	movi	r2,1
81104cfc:	e0bfff15 	stw	r2,-4(fp)
81104d00:	00000106 	br	81104d08 <bFeebCh2IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104d04:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104d08:	e0bfff17 	ldw	r2,-4(fp)
}
81104d0c:	e037883a 	mov	sp,fp
81104d10:	dfc00117 	ldw	ra,4(sp)
81104d14:	df000017 	ldw	fp,0(sp)
81104d18:	dec00204 	addi	sp,sp,8
81104d1c:	f800283a 	ret

81104d20 <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
81104d20:	defffd04 	addi	sp,sp,-12
81104d24:	dfc00215 	stw	ra,8(sp)
81104d28:	df000115 	stw	fp,4(sp)
81104d2c:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104d30:	01400484 	movi	r5,18
81104d34:	01204834 	movhi	r4,33056
81104d38:	210b0004 	addi	r4,r4,11264
81104d3c:	11061680 	call	81106168 <uliFeebReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
81104d40:	1080400c 	andi	r2,r2,256
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104d44:	10000326 	beq	r2,zero,81104d54 <bFeebCh3IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
		bFlag = TRUE;
81104d48:	00800044 	movi	r2,1
81104d4c:	e0bfff15 	stw	r2,-4(fp)
81104d50:	00000106 	br	81104d58 <bFeebCh3IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104d54:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104d58:	e0bfff17 	ldw	r2,-4(fp)
}
81104d5c:	e037883a 	mov	sp,fp
81104d60:	dfc00117 	ldw	ra,4(sp)
81104d64:	df000017 	ldw	fp,0(sp)
81104d68:	dec00204 	addi	sp,sp,8
81104d6c:	f800283a 	ret

81104d70 <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
81104d70:	defffd04 	addi	sp,sp,-12
81104d74:	dfc00215 	stw	ra,8(sp)
81104d78:	df000115 	stw	fp,4(sp)
81104d7c:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104d80:	01400484 	movi	r5,18
81104d84:	01204834 	movhi	r4,33056
81104d88:	210a0004 	addi	r4,r4,10240
81104d8c:	11061680 	call	81106168 <uliFeebReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
81104d90:	1080400c 	andi	r2,r2,256
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104d94:	10000326 	beq	r2,zero,81104da4 <bFeebCh4IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
		bFlag = TRUE;
81104d98:	00800044 	movi	r2,1
81104d9c:	e0bfff15 	stw	r2,-4(fp)
81104da0:	00000106 	br	81104da8 <bFeebCh4IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104da4:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104da8:	e0bfff17 	ldw	r2,-4(fp)
}
81104dac:	e037883a 	mov	sp,fp
81104db0:	dfc00117 	ldw	ra,4(sp)
81104db4:	df000017 	ldw	fp,0(sp)
81104db8:	dec00204 	addi	sp,sp,8
81104dbc:	f800283a 	ret

81104dc0 <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
81104dc0:	defffd04 	addi	sp,sp,-12
81104dc4:	dfc00215 	stw	ra,8(sp)
81104dc8:	df000115 	stw	fp,4(sp)
81104dcc:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104dd0:	01400484 	movi	r5,18
81104dd4:	01204834 	movhi	r4,33056
81104dd8:	210b0004 	addi	r4,r4,11264
81104ddc:	11061680 	call	81106168 <uliFeebReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
81104de0:	1080400c 	andi	r2,r2,256
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104de4:	10000326 	beq	r2,zero,81104df4 <bFeebCh5IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
		bFlag = TRUE;
81104de8:	00800044 	movi	r2,1
81104dec:	e0bfff15 	stw	r2,-4(fp)
81104df0:	00000106 	br	81104df8 <bFeebCh5IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104df4:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104df8:	e0bfff17 	ldw	r2,-4(fp)
}
81104dfc:	e037883a 	mov	sp,fp
81104e00:	dfc00117 	ldw	ra,4(sp)
81104e04:	df000017 	ldw	fp,0(sp)
81104e08:	dec00204 	addi	sp,sp,8
81104e0c:	f800283a 	ret

81104e10 <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
81104e10:	defffd04 	addi	sp,sp,-12
81104e14:	dfc00215 	stw	ra,8(sp)
81104e18:	df000115 	stw	fp,4(sp)
81104e1c:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104e20:	01400484 	movi	r5,18
81104e24:	01204834 	movhi	r4,33056
81104e28:	210a0004 	addi	r4,r4,10240
81104e2c:	11061680 	call	81106168 <uliFeebReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
81104e30:	1080400c 	andi	r2,r2,256
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104e34:	10000326 	beq	r2,zero,81104e44 <bFeebCh6IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
		bFlag = TRUE;
81104e38:	00800044 	movi	r2,1
81104e3c:	e0bfff15 	stw	r2,-4(fp)
81104e40:	00000106 	br	81104e48 <bFeebCh6IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104e44:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104e48:	e0bfff17 	ldw	r2,-4(fp)
}
81104e4c:	e037883a 	mov	sp,fp
81104e50:	dfc00117 	ldw	ra,4(sp)
81104e54:	df000017 	ldw	fp,0(sp)
81104e58:	dec00204 	addi	sp,sp,8
81104e5c:	f800283a 	ret

81104e60 <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
81104e60:	defffd04 	addi	sp,sp,-12
81104e64:	dfc00215 	stw	ra,8(sp)
81104e68:	df000115 	stw	fp,4(sp)
81104e6c:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104e70:	01400484 	movi	r5,18
81104e74:	01204834 	movhi	r4,33056
81104e78:	210b0004 	addi	r4,r4,11264
81104e7c:	11061680 	call	81106168 <uliFeebReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
81104e80:	1080400c 	andi	r2,r2,256
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104e84:	10000326 	beq	r2,zero,81104e94 <bFeebCh7IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
		bFlag = TRUE;
81104e88:	00800044 	movi	r2,1
81104e8c:	e0bfff15 	stw	r2,-4(fp)
81104e90:	00000106 	br	81104e98 <bFeebCh7IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104e94:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104e98:	e0bfff17 	ldw	r2,-4(fp)
}
81104e9c:	e037883a 	mov	sp,fp
81104ea0:	dfc00117 	ldw	ra,4(sp)
81104ea4:	df000017 	ldw	fp,0(sp)
81104ea8:	dec00204 	addi	sp,sp,8
81104eac:	f800283a 	ret

81104eb0 <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
81104eb0:	defffd04 	addi	sp,sp,-12
81104eb4:	dfc00215 	stw	ra,8(sp)
81104eb8:	df000115 	stw	fp,4(sp)
81104ebc:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104ec0:	01400484 	movi	r5,18
81104ec4:	01204834 	movhi	r4,33056
81104ec8:	210a0004 	addi	r4,r4,10240
81104ecc:	11061680 	call	81106168 <uliFeebReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
81104ed0:	1080400c 	andi	r2,r2,256
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104ed4:	10000326 	beq	r2,zero,81104ee4 <bFeebCh8IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_BUFF_EPY_FLG_MSK) {
		bFlag = TRUE;
81104ed8:	00800044 	movi	r2,1
81104edc:	e0bfff15 	stw	r2,-4(fp)
81104ee0:	00000106 	br	81104ee8 <bFeebCh8IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104ee4:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104ee8:	e0bfff17 	ldw	r2,-4(fp)
}
81104eec:	e037883a 	mov	sp,fp
81104ef0:	dfc00117 	ldw	ra,4(sp)
81104ef4:	df000017 	ldw	fp,0(sp)
81104ef8:	dec00204 	addi	sp,sp,8
81104efc:	f800283a 	ret

81104f00 <bFeebCh1SetBufferSize>:

bool bFeebCh1SetBufferSize(alt_u8 ucBufferSizeInBlocks, alt_u8 ucBufferSide) {
81104f00:	defffa04 	addi	sp,sp,-24
81104f04:	dfc00515 	stw	ra,20(sp)
81104f08:	df000415 	stw	fp,16(sp)
81104f0c:	df000404 	addi	fp,sp,16
81104f10:	2007883a 	mov	r3,r4
81104f14:	2805883a 	mov	r2,r5
81104f18:	e0fffe05 	stb	r3,-8(fp)
81104f1c:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
81104f20:	00800044 	movi	r2,1
81104f24:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 uliReg = 0;
81104f28:	e03ffd15 	stw	zero,-12(fp)

	if ((0 < ucBufferSizeInBlocks) && (16 >= ucBufferSizeInBlocks)) {
81104f2c:	e0bffe03 	ldbu	r2,-8(fp)
81104f30:	10001f26 	beq	r2,zero,81104fb0 <bFeebCh1SetBufferSize+0xb0>
81104f34:	e0bffe03 	ldbu	r2,-8(fp)
81104f38:	10800468 	cmpgeui	r2,r2,17
81104f3c:	10001c1e 	bne	r2,zero,81104fb0 <bFeebCh1SetBufferSize+0xb0>
		switch (ucBufferSide) {
81104f40:	e0bfff03 	ldbu	r2,-4(fp)
81104f44:	10000326 	beq	r2,zero,81104f54 <bFeebCh1SetBufferSize+0x54>
81104f48:	10800060 	cmpeqi	r2,r2,1
81104f4c:	10000b1e 	bne	r2,zero,81104f7c <bFeebCh1SetBufferSize+0x7c>
81104f50:	00001406 	br	81104fa4 <bFeebCh1SetBufferSize+0xa4>
		case eCommLeftBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81104f54:	e0bffe03 	ldbu	r2,-8(fp)
81104f58:	10bfffc4 	addi	r2,r2,-1
81104f5c:	108003cc 	andi	r2,r2,15
81104f60:	e0bffd15 	stw	r2,-12(fp)
					& COMM_LEFT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81104f64:	e1bffd17 	ldw	r6,-12(fp)
81104f68:	01400544 	movi	r5,21
81104f6c:	01204834 	movhi	r4,33056
81104f70:	210b0004 	addi	r4,r4,11264
81104f74:	110611c0 	call	8110611c <vFeebWriteReg>
					COMM_LEFT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81104f78:	00000c06 	br	81104fac <bFeebCh1SetBufferSize+0xac>
		case eCommRightBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81104f7c:	e0bffe03 	ldbu	r2,-8(fp)
81104f80:	10bfffc4 	addi	r2,r2,-1
81104f84:	108003cc 	andi	r2,r2,15
81104f88:	e0bffd15 	stw	r2,-12(fp)
					& COMM_RIGT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81104f8c:	e1bffd17 	ldw	r6,-12(fp)
81104f90:	01400504 	movi	r5,20
81104f94:	01204834 	movhi	r4,33056
81104f98:	210b0004 	addi	r4,r4,11264
81104f9c:	110611c0 	call	8110611c <vFeebWriteReg>
					COMM_RIGT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81104fa0:	00000206 	br	81104fac <bFeebCh1SetBufferSize+0xac>
		default:
			bStatus = FALSE;
81104fa4:	e03ffc15 	stw	zero,-16(fp)
			break;
81104fa8:	0001883a 	nop
		}
	} else {
81104fac:	00000106 	br	81104fb4 <bFeebCh1SetBufferSize+0xb4>
		bStatus = FALSE;
81104fb0:	e03ffc15 	stw	zero,-16(fp)
	}

	return bStatus;
81104fb4:	e0bffc17 	ldw	r2,-16(fp)
}
81104fb8:	e037883a 	mov	sp,fp
81104fbc:	dfc00117 	ldw	ra,4(sp)
81104fc0:	df000017 	ldw	fp,0(sp)
81104fc4:	dec00204 	addi	sp,sp,8
81104fc8:	f800283a 	ret

81104fcc <bFeebCh2SetBufferSize>:

bool bFeebCh2SetBufferSize(alt_u8 ucBufferSizeInBlocks, alt_u8 ucBufferSide) {
81104fcc:	defffa04 	addi	sp,sp,-24
81104fd0:	dfc00515 	stw	ra,20(sp)
81104fd4:	df000415 	stw	fp,16(sp)
81104fd8:	df000404 	addi	fp,sp,16
81104fdc:	2007883a 	mov	r3,r4
81104fe0:	2805883a 	mov	r2,r5
81104fe4:	e0fffe05 	stb	r3,-8(fp)
81104fe8:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
81104fec:	00800044 	movi	r2,1
81104ff0:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 uliReg = 0;
81104ff4:	e03ffd15 	stw	zero,-12(fp)

	if ((0 < ucBufferSizeInBlocks) && (16 >= ucBufferSizeInBlocks)) {
81104ff8:	e0bffe03 	ldbu	r2,-8(fp)
81104ffc:	10001f26 	beq	r2,zero,8110507c <bFeebCh2SetBufferSize+0xb0>
81105000:	e0bffe03 	ldbu	r2,-8(fp)
81105004:	10800468 	cmpgeui	r2,r2,17
81105008:	10001c1e 	bne	r2,zero,8110507c <bFeebCh2SetBufferSize+0xb0>
		switch (ucBufferSide) {
8110500c:	e0bfff03 	ldbu	r2,-4(fp)
81105010:	10000326 	beq	r2,zero,81105020 <bFeebCh2SetBufferSize+0x54>
81105014:	10800060 	cmpeqi	r2,r2,1
81105018:	10000b1e 	bne	r2,zero,81105048 <bFeebCh2SetBufferSize+0x7c>
8110501c:	00001406 	br	81105070 <bFeebCh2SetBufferSize+0xa4>
		case eCommLeftBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81105020:	e0bffe03 	ldbu	r2,-8(fp)
81105024:	10bfffc4 	addi	r2,r2,-1
81105028:	108003cc 	andi	r2,r2,15
8110502c:	e0bffd15 	stw	r2,-12(fp)
					& COMM_LEFT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81105030:	e1bffd17 	ldw	r6,-12(fp)
81105034:	01400544 	movi	r5,21
81105038:	01204834 	movhi	r4,33056
8110503c:	210a0004 	addi	r4,r4,10240
81105040:	110611c0 	call	8110611c <vFeebWriteReg>
					COMM_LEFT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81105044:	00000c06 	br	81105078 <bFeebCh2SetBufferSize+0xac>
		case eCommRightBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81105048:	e0bffe03 	ldbu	r2,-8(fp)
8110504c:	10bfffc4 	addi	r2,r2,-1
81105050:	108003cc 	andi	r2,r2,15
81105054:	e0bffd15 	stw	r2,-12(fp)
					& COMM_RIGT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81105058:	e1bffd17 	ldw	r6,-12(fp)
8110505c:	01400504 	movi	r5,20
81105060:	01204834 	movhi	r4,33056
81105064:	210a0004 	addi	r4,r4,10240
81105068:	110611c0 	call	8110611c <vFeebWriteReg>
					COMM_RIGT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
8110506c:	00000206 	br	81105078 <bFeebCh2SetBufferSize+0xac>
		default:
			bStatus = FALSE;
81105070:	e03ffc15 	stw	zero,-16(fp)
			break;
81105074:	0001883a 	nop
		}
	} else {
81105078:	00000106 	br	81105080 <bFeebCh2SetBufferSize+0xb4>
		bStatus = FALSE;
8110507c:	e03ffc15 	stw	zero,-16(fp)
	}

	return bStatus;
81105080:	e0bffc17 	ldw	r2,-16(fp)
}
81105084:	e037883a 	mov	sp,fp
81105088:	dfc00117 	ldw	ra,4(sp)
8110508c:	df000017 	ldw	fp,0(sp)
81105090:	dec00204 	addi	sp,sp,8
81105094:	f800283a 	ret

81105098 <bFeebCh3SetBufferSize>:

bool bFeebCh3SetBufferSize(alt_u8 ucBufferSizeInBlocks, alt_u8 ucBufferSide) {
81105098:	defffa04 	addi	sp,sp,-24
8110509c:	dfc00515 	stw	ra,20(sp)
811050a0:	df000415 	stw	fp,16(sp)
811050a4:	df000404 	addi	fp,sp,16
811050a8:	2007883a 	mov	r3,r4
811050ac:	2805883a 	mov	r2,r5
811050b0:	e0fffe05 	stb	r3,-8(fp)
811050b4:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
811050b8:	00800044 	movi	r2,1
811050bc:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 uliReg = 0;
811050c0:	e03ffd15 	stw	zero,-12(fp)

	if ((0 < ucBufferSizeInBlocks) && (16 >= ucBufferSizeInBlocks)) {
811050c4:	e0bffe03 	ldbu	r2,-8(fp)
811050c8:	10001f26 	beq	r2,zero,81105148 <bFeebCh3SetBufferSize+0xb0>
811050cc:	e0bffe03 	ldbu	r2,-8(fp)
811050d0:	10800468 	cmpgeui	r2,r2,17
811050d4:	10001c1e 	bne	r2,zero,81105148 <bFeebCh3SetBufferSize+0xb0>
		switch (ucBufferSide) {
811050d8:	e0bfff03 	ldbu	r2,-4(fp)
811050dc:	10000326 	beq	r2,zero,811050ec <bFeebCh3SetBufferSize+0x54>
811050e0:	10800060 	cmpeqi	r2,r2,1
811050e4:	10000b1e 	bne	r2,zero,81105114 <bFeebCh3SetBufferSize+0x7c>
811050e8:	00001406 	br	8110513c <bFeebCh3SetBufferSize+0xa4>
		case eCommLeftBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
811050ec:	e0bffe03 	ldbu	r2,-8(fp)
811050f0:	10bfffc4 	addi	r2,r2,-1
811050f4:	108003cc 	andi	r2,r2,15
811050f8:	e0bffd15 	stw	r2,-12(fp)
					& COMM_LEFT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
811050fc:	e1bffd17 	ldw	r6,-12(fp)
81105100:	01400544 	movi	r5,21
81105104:	01204834 	movhi	r4,33056
81105108:	210b0004 	addi	r4,r4,11264
8110510c:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_LEFT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81105110:	00000c06 	br	81105144 <bFeebCh3SetBufferSize+0xac>
		case eCommRightBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81105114:	e0bffe03 	ldbu	r2,-8(fp)
81105118:	10bfffc4 	addi	r2,r2,-1
8110511c:	108003cc 	andi	r2,r2,15
81105120:	e0bffd15 	stw	r2,-12(fp)
					& COMM_RIGT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81105124:	e1bffd17 	ldw	r6,-12(fp)
81105128:	01400504 	movi	r5,20
8110512c:	01204834 	movhi	r4,33056
81105130:	210b0004 	addi	r4,r4,11264
81105134:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_RIGT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81105138:	00000206 	br	81105144 <bFeebCh3SetBufferSize+0xac>
		default:
			bStatus = FALSE;
8110513c:	e03ffc15 	stw	zero,-16(fp)
			break;
81105140:	0001883a 	nop
		}
	} else {
81105144:	00000106 	br	8110514c <bFeebCh3SetBufferSize+0xb4>
		bStatus = FALSE;
81105148:	e03ffc15 	stw	zero,-16(fp)
	}

	return bStatus;
8110514c:	e0bffc17 	ldw	r2,-16(fp)
}
81105150:	e037883a 	mov	sp,fp
81105154:	dfc00117 	ldw	ra,4(sp)
81105158:	df000017 	ldw	fp,0(sp)
8110515c:	dec00204 	addi	sp,sp,8
81105160:	f800283a 	ret

81105164 <bFeebCh4SetBufferSize>:

bool bFeebCh4SetBufferSize(alt_u8 ucBufferSizeInBlocks, alt_u8 ucBufferSide) {
81105164:	defffa04 	addi	sp,sp,-24
81105168:	dfc00515 	stw	ra,20(sp)
8110516c:	df000415 	stw	fp,16(sp)
81105170:	df000404 	addi	fp,sp,16
81105174:	2007883a 	mov	r3,r4
81105178:	2805883a 	mov	r2,r5
8110517c:	e0fffe05 	stb	r3,-8(fp)
81105180:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
81105184:	00800044 	movi	r2,1
81105188:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 uliReg = 0;
8110518c:	e03ffd15 	stw	zero,-12(fp)

	if ((0 < ucBufferSizeInBlocks) && (16 >= ucBufferSizeInBlocks)) {
81105190:	e0bffe03 	ldbu	r2,-8(fp)
81105194:	10001f26 	beq	r2,zero,81105214 <bFeebCh4SetBufferSize+0xb0>
81105198:	e0bffe03 	ldbu	r2,-8(fp)
8110519c:	10800468 	cmpgeui	r2,r2,17
811051a0:	10001c1e 	bne	r2,zero,81105214 <bFeebCh4SetBufferSize+0xb0>
		switch (ucBufferSide) {
811051a4:	e0bfff03 	ldbu	r2,-4(fp)
811051a8:	10000326 	beq	r2,zero,811051b8 <bFeebCh4SetBufferSize+0x54>
811051ac:	10800060 	cmpeqi	r2,r2,1
811051b0:	10000b1e 	bne	r2,zero,811051e0 <bFeebCh4SetBufferSize+0x7c>
811051b4:	00001406 	br	81105208 <bFeebCh4SetBufferSize+0xa4>
		case eCommLeftBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
811051b8:	e0bffe03 	ldbu	r2,-8(fp)
811051bc:	10bfffc4 	addi	r2,r2,-1
811051c0:	108003cc 	andi	r2,r2,15
811051c4:	e0bffd15 	stw	r2,-12(fp)
					& COMM_LEFT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811051c8:	e1bffd17 	ldw	r6,-12(fp)
811051cc:	01400544 	movi	r5,21
811051d0:	01204834 	movhi	r4,33056
811051d4:	210a0004 	addi	r4,r4,10240
811051d8:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_LEFT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
811051dc:	00000c06 	br	81105210 <bFeebCh4SetBufferSize+0xac>
		case eCommRightBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
811051e0:	e0bffe03 	ldbu	r2,-8(fp)
811051e4:	10bfffc4 	addi	r2,r2,-1
811051e8:	108003cc 	andi	r2,r2,15
811051ec:	e0bffd15 	stw	r2,-12(fp)
					& COMM_RIGT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811051f0:	e1bffd17 	ldw	r6,-12(fp)
811051f4:	01400504 	movi	r5,20
811051f8:	01204834 	movhi	r4,33056
811051fc:	210a0004 	addi	r4,r4,10240
81105200:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_RIGT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81105204:	00000206 	br	81105210 <bFeebCh4SetBufferSize+0xac>
		default:
			bStatus = FALSE;
81105208:	e03ffc15 	stw	zero,-16(fp)
			break;
8110520c:	0001883a 	nop
		}
	} else {
81105210:	00000106 	br	81105218 <bFeebCh4SetBufferSize+0xb4>
		bStatus = FALSE;
81105214:	e03ffc15 	stw	zero,-16(fp)
	}

	return bStatus;
81105218:	e0bffc17 	ldw	r2,-16(fp)
}
8110521c:	e037883a 	mov	sp,fp
81105220:	dfc00117 	ldw	ra,4(sp)
81105224:	df000017 	ldw	fp,0(sp)
81105228:	dec00204 	addi	sp,sp,8
8110522c:	f800283a 	ret

81105230 <bFeebCh5SetBufferSize>:

bool bFeebCh5SetBufferSize(alt_u8 ucBufferSizeInBlocks, alt_u8 ucBufferSide) {
81105230:	defffa04 	addi	sp,sp,-24
81105234:	dfc00515 	stw	ra,20(sp)
81105238:	df000415 	stw	fp,16(sp)
8110523c:	df000404 	addi	fp,sp,16
81105240:	2007883a 	mov	r3,r4
81105244:	2805883a 	mov	r2,r5
81105248:	e0fffe05 	stb	r3,-8(fp)
8110524c:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
81105250:	00800044 	movi	r2,1
81105254:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 uliReg = 0;
81105258:	e03ffd15 	stw	zero,-12(fp)

	if ((0 < ucBufferSizeInBlocks) && (16 >= ucBufferSizeInBlocks)) {
8110525c:	e0bffe03 	ldbu	r2,-8(fp)
81105260:	10001f26 	beq	r2,zero,811052e0 <bFeebCh5SetBufferSize+0xb0>
81105264:	e0bffe03 	ldbu	r2,-8(fp)
81105268:	10800468 	cmpgeui	r2,r2,17
8110526c:	10001c1e 	bne	r2,zero,811052e0 <bFeebCh5SetBufferSize+0xb0>
		switch (ucBufferSide) {
81105270:	e0bfff03 	ldbu	r2,-4(fp)
81105274:	10000326 	beq	r2,zero,81105284 <bFeebCh5SetBufferSize+0x54>
81105278:	10800060 	cmpeqi	r2,r2,1
8110527c:	10000b1e 	bne	r2,zero,811052ac <bFeebCh5SetBufferSize+0x7c>
81105280:	00001406 	br	811052d4 <bFeebCh5SetBufferSize+0xa4>
		case eCommLeftBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81105284:	e0bffe03 	ldbu	r2,-8(fp)
81105288:	10bfffc4 	addi	r2,r2,-1
8110528c:	108003cc 	andi	r2,r2,15
81105290:	e0bffd15 	stw	r2,-12(fp)
					& COMM_LEFT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81105294:	e1bffd17 	ldw	r6,-12(fp)
81105298:	01400544 	movi	r5,21
8110529c:	01204834 	movhi	r4,33056
811052a0:	210b0004 	addi	r4,r4,11264
811052a4:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_LEFT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
811052a8:	00000c06 	br	811052dc <bFeebCh5SetBufferSize+0xac>
		case eCommRightBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
811052ac:	e0bffe03 	ldbu	r2,-8(fp)
811052b0:	10bfffc4 	addi	r2,r2,-1
811052b4:	108003cc 	andi	r2,r2,15
811052b8:	e0bffd15 	stw	r2,-12(fp)
					& COMM_RIGT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
811052bc:	e1bffd17 	ldw	r6,-12(fp)
811052c0:	01400504 	movi	r5,20
811052c4:	01204834 	movhi	r4,33056
811052c8:	210b0004 	addi	r4,r4,11264
811052cc:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_RIGT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
811052d0:	00000206 	br	811052dc <bFeebCh5SetBufferSize+0xac>
		default:
			bStatus = FALSE;
811052d4:	e03ffc15 	stw	zero,-16(fp)
			break;
811052d8:	0001883a 	nop
		}
	} else {
811052dc:	00000106 	br	811052e4 <bFeebCh5SetBufferSize+0xb4>
		bStatus = FALSE;
811052e0:	e03ffc15 	stw	zero,-16(fp)
	}

	return bStatus;
811052e4:	e0bffc17 	ldw	r2,-16(fp)
}
811052e8:	e037883a 	mov	sp,fp
811052ec:	dfc00117 	ldw	ra,4(sp)
811052f0:	df000017 	ldw	fp,0(sp)
811052f4:	dec00204 	addi	sp,sp,8
811052f8:	f800283a 	ret

811052fc <bFeebCh6SetBufferSize>:

bool bFeebCh6SetBufferSize(alt_u8 ucBufferSizeInBlocks, alt_u8 ucBufferSide) {
811052fc:	defffa04 	addi	sp,sp,-24
81105300:	dfc00515 	stw	ra,20(sp)
81105304:	df000415 	stw	fp,16(sp)
81105308:	df000404 	addi	fp,sp,16
8110530c:	2007883a 	mov	r3,r4
81105310:	2805883a 	mov	r2,r5
81105314:	e0fffe05 	stb	r3,-8(fp)
81105318:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
8110531c:	00800044 	movi	r2,1
81105320:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 uliReg = 0;
81105324:	e03ffd15 	stw	zero,-12(fp)

	if ((0 < ucBufferSizeInBlocks) && (16 >= ucBufferSizeInBlocks)) {
81105328:	e0bffe03 	ldbu	r2,-8(fp)
8110532c:	10001f26 	beq	r2,zero,811053ac <bFeebCh6SetBufferSize+0xb0>
81105330:	e0bffe03 	ldbu	r2,-8(fp)
81105334:	10800468 	cmpgeui	r2,r2,17
81105338:	10001c1e 	bne	r2,zero,811053ac <bFeebCh6SetBufferSize+0xb0>
		switch (ucBufferSide) {
8110533c:	e0bfff03 	ldbu	r2,-4(fp)
81105340:	10000326 	beq	r2,zero,81105350 <bFeebCh6SetBufferSize+0x54>
81105344:	10800060 	cmpeqi	r2,r2,1
81105348:	10000b1e 	bne	r2,zero,81105378 <bFeebCh6SetBufferSize+0x7c>
8110534c:	00001406 	br	811053a0 <bFeebCh6SetBufferSize+0xa4>
		case eCommLeftBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81105350:	e0bffe03 	ldbu	r2,-8(fp)
81105354:	10bfffc4 	addi	r2,r2,-1
81105358:	108003cc 	andi	r2,r2,15
8110535c:	e0bffd15 	stw	r2,-12(fp)
					& COMM_LEFT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81105360:	e1bffd17 	ldw	r6,-12(fp)
81105364:	01400544 	movi	r5,21
81105368:	01204834 	movhi	r4,33056
8110536c:	210a0004 	addi	r4,r4,10240
81105370:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_LEFT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81105374:	00000c06 	br	811053a8 <bFeebCh6SetBufferSize+0xac>
		case eCommRightBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81105378:	e0bffe03 	ldbu	r2,-8(fp)
8110537c:	10bfffc4 	addi	r2,r2,-1
81105380:	108003cc 	andi	r2,r2,15
81105384:	e0bffd15 	stw	r2,-12(fp)
					& COMM_RIGT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81105388:	e1bffd17 	ldw	r6,-12(fp)
8110538c:	01400504 	movi	r5,20
81105390:	01204834 	movhi	r4,33056
81105394:	210a0004 	addi	r4,r4,10240
81105398:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_RIGT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
8110539c:	00000206 	br	811053a8 <bFeebCh6SetBufferSize+0xac>
		default:
			bStatus = FALSE;
811053a0:	e03ffc15 	stw	zero,-16(fp)
			break;
811053a4:	0001883a 	nop
		}
	} else {
811053a8:	00000106 	br	811053b0 <bFeebCh6SetBufferSize+0xb4>
		bStatus = FALSE;
811053ac:	e03ffc15 	stw	zero,-16(fp)
	}

	return bStatus;
811053b0:	e0bffc17 	ldw	r2,-16(fp)
}
811053b4:	e037883a 	mov	sp,fp
811053b8:	dfc00117 	ldw	ra,4(sp)
811053bc:	df000017 	ldw	fp,0(sp)
811053c0:	dec00204 	addi	sp,sp,8
811053c4:	f800283a 	ret

811053c8 <bFeebCh7SetBufferSize>:

bool bFeebCh7SetBufferSize(alt_u8 ucBufferSizeInBlocks, alt_u8 ucBufferSide) {
811053c8:	defffa04 	addi	sp,sp,-24
811053cc:	dfc00515 	stw	ra,20(sp)
811053d0:	df000415 	stw	fp,16(sp)
811053d4:	df000404 	addi	fp,sp,16
811053d8:	2007883a 	mov	r3,r4
811053dc:	2805883a 	mov	r2,r5
811053e0:	e0fffe05 	stb	r3,-8(fp)
811053e4:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
811053e8:	00800044 	movi	r2,1
811053ec:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 uliReg = 0;
811053f0:	e03ffd15 	stw	zero,-12(fp)

	if ((0 < ucBufferSizeInBlocks) && (16 >= ucBufferSizeInBlocks)) {
811053f4:	e0bffe03 	ldbu	r2,-8(fp)
811053f8:	10001f26 	beq	r2,zero,81105478 <bFeebCh7SetBufferSize+0xb0>
811053fc:	e0bffe03 	ldbu	r2,-8(fp)
81105400:	10800468 	cmpgeui	r2,r2,17
81105404:	10001c1e 	bne	r2,zero,81105478 <bFeebCh7SetBufferSize+0xb0>
		switch (ucBufferSide) {
81105408:	e0bfff03 	ldbu	r2,-4(fp)
8110540c:	10000326 	beq	r2,zero,8110541c <bFeebCh7SetBufferSize+0x54>
81105410:	10800060 	cmpeqi	r2,r2,1
81105414:	10000b1e 	bne	r2,zero,81105444 <bFeebCh7SetBufferSize+0x7c>
81105418:	00001406 	br	8110546c <bFeebCh7SetBufferSize+0xa4>
		case eCommLeftBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
8110541c:	e0bffe03 	ldbu	r2,-8(fp)
81105420:	10bfffc4 	addi	r2,r2,-1
81105424:	108003cc 	andi	r2,r2,15
81105428:	e0bffd15 	stw	r2,-12(fp)
					& COMM_LEFT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
8110542c:	e1bffd17 	ldw	r6,-12(fp)
81105430:	01400544 	movi	r5,21
81105434:	01204834 	movhi	r4,33056
81105438:	210b0004 	addi	r4,r4,11264
8110543c:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_LEFT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81105440:	00000c06 	br	81105474 <bFeebCh7SetBufferSize+0xac>
		case eCommRightBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81105444:	e0bffe03 	ldbu	r2,-8(fp)
81105448:	10bfffc4 	addi	r2,r2,-1
8110544c:	108003cc 	andi	r2,r2,15
81105450:	e0bffd15 	stw	r2,-12(fp)
					& COMM_RIGT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81105454:	e1bffd17 	ldw	r6,-12(fp)
81105458:	01400504 	movi	r5,20
8110545c:	01204834 	movhi	r4,33056
81105460:	210b0004 	addi	r4,r4,11264
81105464:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_RIGT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81105468:	00000206 	br	81105474 <bFeebCh7SetBufferSize+0xac>
		default:
			bStatus = FALSE;
8110546c:	e03ffc15 	stw	zero,-16(fp)
			break;
81105470:	0001883a 	nop
		}
	} else {
81105474:	00000106 	br	8110547c <bFeebCh7SetBufferSize+0xb4>
		bStatus = FALSE;
81105478:	e03ffc15 	stw	zero,-16(fp)
	}

	return bStatus;
8110547c:	e0bffc17 	ldw	r2,-16(fp)
}
81105480:	e037883a 	mov	sp,fp
81105484:	dfc00117 	ldw	ra,4(sp)
81105488:	df000017 	ldw	fp,0(sp)
8110548c:	dec00204 	addi	sp,sp,8
81105490:	f800283a 	ret

81105494 <bFeebCh8SetBufferSize>:

bool bFeebCh8SetBufferSize(alt_u8 ucBufferSizeInBlocks, alt_u8 ucBufferSide) {
81105494:	defffa04 	addi	sp,sp,-24
81105498:	dfc00515 	stw	ra,20(sp)
8110549c:	df000415 	stw	fp,16(sp)
811054a0:	df000404 	addi	fp,sp,16
811054a4:	2007883a 	mov	r3,r4
811054a8:	2805883a 	mov	r2,r5
811054ac:	e0fffe05 	stb	r3,-8(fp)
811054b0:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
811054b4:	00800044 	movi	r2,1
811054b8:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 uliReg = 0;
811054bc:	e03ffd15 	stw	zero,-12(fp)

	if ((0 < ucBufferSizeInBlocks) && (16 >= ucBufferSizeInBlocks)) {
811054c0:	e0bffe03 	ldbu	r2,-8(fp)
811054c4:	10001f26 	beq	r2,zero,81105544 <bFeebCh8SetBufferSize+0xb0>
811054c8:	e0bffe03 	ldbu	r2,-8(fp)
811054cc:	10800468 	cmpgeui	r2,r2,17
811054d0:	10001c1e 	bne	r2,zero,81105544 <bFeebCh8SetBufferSize+0xb0>
		switch (ucBufferSide) {
811054d4:	e0bfff03 	ldbu	r2,-4(fp)
811054d8:	10000326 	beq	r2,zero,811054e8 <bFeebCh8SetBufferSize+0x54>
811054dc:	10800060 	cmpeqi	r2,r2,1
811054e0:	10000b1e 	bne	r2,zero,81105510 <bFeebCh8SetBufferSize+0x7c>
811054e4:	00001406 	br	81105538 <bFeebCh8SetBufferSize+0xa4>
		case eCommLeftBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
811054e8:	e0bffe03 	ldbu	r2,-8(fp)
811054ec:	10bfffc4 	addi	r2,r2,-1
811054f0:	108003cc 	andi	r2,r2,15
811054f4:	e0bffd15 	stw	r2,-12(fp)
					& COMM_LEFT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
811054f8:	e1bffd17 	ldw	r6,-12(fp)
811054fc:	01400544 	movi	r5,21
81105500:	01204834 	movhi	r4,33056
81105504:	210a0004 	addi	r4,r4,10240
81105508:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_LEFT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
8110550c:	00000c06 	br	81105540 <bFeebCh8SetBufferSize+0xac>
		case eCommRightBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81105510:	e0bffe03 	ldbu	r2,-8(fp)
81105514:	10bfffc4 	addi	r2,r2,-1
81105518:	108003cc 	andi	r2,r2,15
8110551c:	e0bffd15 	stw	r2,-12(fp)
					& COMM_RIGT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81105520:	e1bffd17 	ldw	r6,-12(fp)
81105524:	01400504 	movi	r5,20
81105528:	01204834 	movhi	r4,33056
8110552c:	210a0004 	addi	r4,r4,10240
81105530:	110611c0 	call	8110611c <vFeebWriteReg>
			COMM_RIGT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81105534:	00000206 	br	81105540 <bFeebCh8SetBufferSize+0xac>
		default:
			bStatus = FALSE;
81105538:	e03ffc15 	stw	zero,-16(fp)
			break;
8110553c:	0001883a 	nop
		}
	} else {
81105540:	00000106 	br	81105548 <bFeebCh8SetBufferSize+0xb4>
		bStatus = FALSE;
81105544:	e03ffc15 	stw	zero,-16(fp)
	}

	return bStatus;
81105548:	e0bffc17 	ldw	r2,-16(fp)
}
8110554c:	e037883a 	mov	sp,fp
81105550:	dfc00117 	ldw	ra,4(sp)
81105554:	df000017 	ldw	fp,0(sp)
81105558:	dec00204 	addi	sp,sp,8
8110555c:	f800283a 	ret

81105560 <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
81105560:	defffc04 	addi	sp,sp,-16
81105564:	dfc00315 	stw	ra,12(sp)
81105568:	df000215 	stw	fp,8(sp)
8110556c:	df000204 	addi	fp,sp,8
81105570:	2005883a 	mov	r2,r4
81105574:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81105578:	e0bfff03 	ldbu	r2,-4(fp)
8110557c:	10c00228 	cmpgeui	r3,r2,8
81105580:	18004e1e 	bne	r3,zero,811056bc <vFeebInitIrq+0x15c>
81105584:	100690ba 	slli	r3,r2,2
81105588:	00a04434 	movhi	r2,33040
8110558c:	10956704 	addi	r2,r2,21916
81105590:	1885883a 	add	r2,r3,r2
81105594:	10800017 	ldw	r2,0(r2)
81105598:	1000683a 	jmp	r2
8110559c:	811055bc 	xorhi	r4,r16,16726
811055a0:	811055dc 	xori	r4,r16,16727
811055a4:	811055fc 	xorhi	r4,r16,16727
811055a8:	8110561c 	xori	r4,r16,16728
811055ac:	8110563c 	xorhi	r4,r16,16728
811055b0:	8110565c 	xori	r4,r16,16729
811055b4:	8110567c 	xorhi	r4,r16,16729
811055b8:	8110569c 	xori	r4,r16,16730
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
811055bc:	d0a01c04 	addi	r2,gp,-32656
811055c0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_1_BUFFERS_IRQ, pvHoldContext,
811055c4:	01a04434 	movhi	r6,33040
811055c8:	31923804 	addi	r6,r6,18656
811055cc:	e17ffe17 	ldw	r5,-8(fp)
811055d0:	01000584 	movi	r4,22
811055d4:	11205200 	call	81120520 <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
811055d8:	00003806 	br	811056bc <vFeebInitIrq+0x15c>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
811055dc:	d0a01d04 	addi	r2,gp,-32652
811055e0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_2_BUFFERS_IRQ, pvHoldContext,
811055e4:	01a04434 	movhi	r6,33040
811055e8:	31924604 	addi	r6,r6,18712
811055ec:	e17ffe17 	ldw	r5,-8(fp)
811055f0:	01000504 	movi	r4,20
811055f4:	11205200 	call	81120520 <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
811055f8:	00003006 	br	811056bc <vFeebInitIrq+0x15c>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
811055fc:	d0a01e04 	addi	r2,gp,-32648
81105600:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_3_BUFFERS_IRQ, pvHoldContext,
81105604:	01a04434 	movhi	r6,33040
81105608:	31925404 	addi	r6,r6,18768
8110560c:	e17ffe17 	ldw	r5,-8(fp)
81105610:	01000484 	movi	r4,18
81105614:	11205200 	call	81120520 <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
81105618:	00002806 	br	811056bc <vFeebInitIrq+0x15c>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
8110561c:	d0a01f04 	addi	r2,gp,-32644
81105620:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_4_BUFFERS_IRQ, pvHoldContext,
81105624:	01a04434 	movhi	r6,33040
81105628:	31926204 	addi	r6,r6,18824
8110562c:	e17ffe17 	ldw	r5,-8(fp)
81105630:	01000404 	movi	r4,16
81105634:	11205200 	call	81120520 <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
81105638:	00002006 	br	811056bc <vFeebInitIrq+0x15c>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
8110563c:	d0a02004 	addi	r2,gp,-32640
81105640:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_5_BUFFERS_IRQ, pvHoldContext,
81105644:	01a04434 	movhi	r6,33040
81105648:	31927004 	addi	r6,r6,18880
8110564c:	e17ffe17 	ldw	r5,-8(fp)
81105650:	01000204 	movi	r4,8
81105654:	11205200 	call	81120520 <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81105658:	00001806 	br	811056bc <vFeebInitIrq+0x15c>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
8110565c:	d0a02104 	addi	r2,gp,-32636
81105660:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_6_BUFFERS_IRQ, pvHoldContext,
81105664:	01a04434 	movhi	r6,33040
81105668:	31927e04 	addi	r6,r6,18936
8110566c:	e17ffe17 	ldw	r5,-8(fp)
81105670:	01000184 	movi	r4,6
81105674:	11205200 	call	81120520 <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81105678:	00001006 	br	811056bc <vFeebInitIrq+0x15c>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
8110567c:	d0a02204 	addi	r2,gp,-32632
81105680:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_7_BUFFERS_IRQ, pvHoldContext,
81105684:	01a04434 	movhi	r6,33040
81105688:	31928c04 	addi	r6,r6,18992
8110568c:	e17ffe17 	ldw	r5,-8(fp)
81105690:	01000144 	movi	r4,5
81105694:	11205200 	call	81120520 <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81105698:	00000806 	br	811056bc <vFeebInitIrq+0x15c>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
8110569c:	d0a02304 	addi	r2,gp,-32628
811056a0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_8_BUFFERS_IRQ, pvHoldContext,
811056a4:	01a04434 	movhi	r6,33040
811056a8:	31929a04 	addi	r6,r6,19048
811056ac:	e17ffe17 	ldw	r5,-8(fp)
811056b0:	01000084 	movi	r4,2
811056b4:	11205200 	call	81120520 <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
811056b8:	0001883a 	nop
	}
}
811056bc:	0001883a 	nop
811056c0:	e037883a 	mov	sp,fp
811056c4:	dfc00117 	ldw	ra,4(sp)
811056c8:	df000017 	ldw	fp,0(sp)
811056cc:	dec00204 	addi	sp,sp,8
811056d0:	f800283a 	ret

811056d4 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
811056d4:	defffb04 	addi	sp,sp,-20
811056d8:	dfc00415 	stw	ra,16(sp)
811056dc:	df000315 	stw	fp,12(sp)
811056e0:	df000304 	addi	fp,sp,12
811056e4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811056e8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811056ec:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811056f0:	e0bfff17 	ldw	r2,-4(fp)
811056f4:	10002426 	beq	r2,zero,81105788 <bFeebSetIrqControl+0xb4>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811056f8:	e0bfff17 	ldw	r2,-4(fp)
811056fc:	10800017 	ldw	r2,0(r2)
81105700:	01400444 	movi	r5,17
81105704:	1009883a 	mov	r4,r2
81105708:	11061680 	call	81106168 <uliFeebReadReg>
8110570c:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CONTROL_REG_OFST);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
81105710:	e0bfff17 	ldw	r2,-4(fp)
81105714:	10800217 	ldw	r2,8(r2)
81105718:	10000426 	beq	r2,zero,8110572c <bFeebSetIrqControl+0x58>
			uliReg |= COMM_IRQ_LEFT_BUFF_EPY_EN_MSK;
8110571c:	e0bffe17 	ldw	r2,-8(fp)
81105720:	10808014 	ori	r2,r2,512
81105724:	e0bffe15 	stw	r2,-8(fp)
81105728:	00000406 	br	8110573c <bFeebSetIrqControl+0x68>
		} else {
			uliReg &= (~COMM_IRQ_LEFT_BUFF_EPY_EN_MSK);
8110572c:	e0fffe17 	ldw	r3,-8(fp)
81105730:	00bf7fc4 	movi	r2,-513
81105734:	1884703a 	and	r2,r3,r2
81105738:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
8110573c:	e0bfff17 	ldw	r2,-4(fp)
81105740:	10800317 	ldw	r2,12(r2)
81105744:	10000426 	beq	r2,zero,81105758 <bFeebSetIrqControl+0x84>
			uliReg |= COMM_IRQ_RIGH_BUFF_EPY_EN_MSK;
81105748:	e0bffe17 	ldw	r2,-8(fp)
8110574c:	10804014 	ori	r2,r2,256
81105750:	e0bffe15 	stw	r2,-8(fp)
81105754:	00000406 	br	81105768 <bFeebSetIrqControl+0x94>
		} else {
			uliReg &= (~COMM_IRQ_RIGH_BUFF_EPY_EN_MSK);
81105758:	e0fffe17 	ldw	r3,-8(fp)
8110575c:	00bfbfc4 	movi	r2,-257
81105760:	1884703a 	and	r2,r3,r2
81105764:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CONTROL_REG_OFST,
81105768:	e0bfff17 	ldw	r2,-4(fp)
8110576c:	10800017 	ldw	r2,0(r2)
81105770:	e1bffe17 	ldw	r6,-8(fp)
81105774:	01400444 	movi	r5,17
81105778:	1009883a 	mov	r4,r2
8110577c:	110611c0 	call	8110611c <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81105780:	00800044 	movi	r2,1
81105784:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105788:	e0bffd17 	ldw	r2,-12(fp)
}
8110578c:	e037883a 	mov	sp,fp
81105790:	dfc00117 	ldw	ra,4(sp)
81105794:	df000017 	ldw	fp,0(sp)
81105798:	dec00204 	addi	sp,sp,8
8110579c:	f800283a 	ret

811057a0 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
811057a0:	defffb04 	addi	sp,sp,-20
811057a4:	dfc00415 	stw	ra,16(sp)
811057a8:	df000315 	stw	fp,12(sp)
811057ac:	df000304 	addi	fp,sp,12
811057b0:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811057b4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811057b8:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811057bc:	e0bfff17 	ldw	r2,-4(fp)
811057c0:	10001a26 	beq	r2,zero,8110582c <bFeebGetIrqControl+0x8c>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811057c4:	e0bfff17 	ldw	r2,-4(fp)
811057c8:	10800017 	ldw	r2,0(r2)
811057cc:	01400444 	movi	r5,17
811057d0:	1009883a 	mov	r4,r2
811057d4:	11061680 	call	81106168 <uliFeebReadReg>
811057d8:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CONTROL_REG_OFST);

		if (uliReg & COMM_IRQ_LEFT_BUFF_EPY_EN_MSK) {
811057dc:	e0bffe17 	ldw	r2,-8(fp)
811057e0:	1080800c 	andi	r2,r2,512
811057e4:	10000426 	beq	r2,zero,811057f8 <bFeebGetIrqControl+0x58>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
811057e8:	e0bfff17 	ldw	r2,-4(fp)
811057ec:	00c00044 	movi	r3,1
811057f0:	10c00215 	stw	r3,8(r2)
811057f4:	00000206 	br	81105800 <bFeebGetIrqControl+0x60>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
811057f8:	e0bfff17 	ldw	r2,-4(fp)
811057fc:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_RIGH_BUFF_EPY_EN_MSK) {
81105800:	e0bffe17 	ldw	r2,-8(fp)
81105804:	1080400c 	andi	r2,r2,256
81105808:	10000426 	beq	r2,zero,8110581c <bFeebGetIrqControl+0x7c>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
8110580c:	e0bfff17 	ldw	r2,-4(fp)
81105810:	00c00044 	movi	r3,1
81105814:	10c00315 	stw	r3,12(r2)
81105818:	00000206 	br	81105824 <bFeebGetIrqControl+0x84>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
8110581c:	e0bfff17 	ldw	r2,-4(fp)
81105820:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81105824:	00800044 	movi	r2,1
81105828:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
8110582c:	e0bffd17 	ldw	r2,-12(fp)
}
81105830:	e037883a 	mov	sp,fp
81105834:	dfc00117 	ldw	ra,4(sp)
81105838:	df000017 	ldw	fp,0(sp)
8110583c:	dec00204 	addi	sp,sp,8
81105840:	f800283a 	ret

81105844 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81105844:	defffb04 	addi	sp,sp,-20
81105848:	dfc00415 	stw	ra,16(sp)
8110584c:	df000315 	stw	fp,12(sp)
81105850:	df000304 	addi	fp,sp,12
81105854:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105858:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110585c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105860:	e0bfff17 	ldw	r2,-4(fp)
81105864:	10001126 	beq	r2,zero,811058ac <bFeebGetIrqFlags+0x68>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105868:	e0bfff17 	ldw	r2,-4(fp)
8110586c:	10800017 	ldw	r2,0(r2)
81105870:	01400484 	movi	r5,18
81105874:	1009883a 	mov	r4,r2
81105878:	11061680 	call	81106168 <uliFeebReadReg>
8110587c:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAGS_REG_OFST);

		if (uliReg & COMM_IRQ_BUFF_EPY_FLG_MSK) {
81105880:	e0bffe17 	ldw	r2,-8(fp)
81105884:	1080400c 	andi	r2,r2,256
81105888:	10000426 	beq	r2,zero,8110589c <bFeebGetIrqFlags+0x58>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
8110588c:	e0bfff17 	ldw	r2,-4(fp)
81105890:	00c00044 	movi	r3,1
81105894:	10c00415 	stw	r3,16(r2)
81105898:	00000206 	br	811058a4 <bFeebGetIrqFlags+0x60>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
8110589c:	e0bfff17 	ldw	r2,-4(fp)
811058a0:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
811058a4:	00800044 	movi	r2,1
811058a8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811058ac:	e0bffd17 	ldw	r2,-12(fp)
}
811058b0:	e037883a 	mov	sp,fp
811058b4:	dfc00117 	ldw	ra,4(sp)
811058b8:	df000017 	ldw	fp,0(sp)
811058bc:	dec00204 	addi	sp,sp,8
811058c0:	f800283a 	ret

811058c4 <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
811058c4:	defffb04 	addi	sp,sp,-20
811058c8:	dfc00415 	stw	ra,16(sp)
811058cc:	df000315 	stw	fp,12(sp)
811058d0:	df000304 	addi	fp,sp,12
811058d4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811058d8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811058dc:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811058e0:	e0bfff17 	ldw	r2,-4(fp)
811058e4:	10003226 	beq	r2,zero,811059b0 <bFeebGetBuffersStatus+0xec>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811058e8:	e0bfff17 	ldw	r2,-4(fp)
811058ec:	10800017 	ldw	r2,0(r2)
811058f0:	014000c4 	movi	r5,3
811058f4:	1009883a 	mov	r4,r2
811058f8:	11061680 	call	81106168 <uliFeebReadReg>
811058fc:	e0bffe15 	stw	r2,-8(fp)
		COMM_FEE_BUFF_STAT_REG_OFST);

		if (uliReg & COMM_WIND_LEFT_BUFF_EMPTY_MSK) {
81105900:	e0bffe17 	ldw	r2,-8(fp)
81105904:	1080008c 	andi	r2,r2,2
81105908:	10000426 	beq	r2,zero,8110591c <bFeebGetBuffersStatus+0x58>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
8110590c:	e0bfff17 	ldw	r2,-4(fp)
81105910:	00c00044 	movi	r3,1
81105914:	10c00515 	stw	r3,20(r2)
81105918:	00000206 	br	81105924 <bFeebGetBuffersStatus+0x60>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
8110591c:	e0bfff17 	ldw	r2,-4(fp)
81105920:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_WIND_RIGH_BUFF_EMPTY_MSK) {
81105924:	e0bffe17 	ldw	r2,-8(fp)
81105928:	1080004c 	andi	r2,r2,1
8110592c:	10000426 	beq	r2,zero,81105940 <bFeebGetBuffersStatus+0x7c>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
81105930:	e0bfff17 	ldw	r2,-4(fp)
81105934:	00c00044 	movi	r3,1
81105938:	10c00615 	stw	r3,24(r2)
8110593c:	00000206 	br	81105948 <bFeebGetBuffersStatus+0x84>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
81105940:	e0bfff17 	ldw	r2,-4(fp)
81105944:	10000615 	stw	zero,24(r2)
		}

		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105948:	e0bfff17 	ldw	r2,-4(fp)
8110594c:	10800017 	ldw	r2,0(r2)
81105950:	01400504 	movi	r5,20
81105954:	1009883a 	mov	r4,r2
81105958:	11061680 	call	81106168 <uliFeebReadReg>
8110595c:	e0bffe15 	stw	r2,-8(fp)
				COMM_RIGT_FEEBUFF_SIZE_REG_OFST);
		pxFeebCh->xBufferStatus.ucRightBufferSize = (alt_u8) (uliReg
81105960:	e0bffe17 	ldw	r2,-8(fp)
81105964:	108003cc 	andi	r2,r2,15
81105968:	10800044 	addi	r2,r2,1
8110596c:	1007883a 	mov	r3,r2
81105970:	e0bfff17 	ldw	r2,-4(fp)
81105974:	10c00745 	stb	r3,29(r2)
				& COMM_RIGT_FEEBUFF_SIZE_MSK) + 1;

		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105978:	e0bfff17 	ldw	r2,-4(fp)
8110597c:	10800017 	ldw	r2,0(r2)
81105980:	01400544 	movi	r5,21
81105984:	1009883a 	mov	r4,r2
81105988:	11061680 	call	81106168 <uliFeebReadReg>
8110598c:	e0bffe15 	stw	r2,-8(fp)
				COMM_LEFT_FEEBUFF_SIZE_REG_OFST);
		pxFeebCh->xBufferStatus.ucRightBufferSize = (alt_u8) (uliReg
81105990:	e0bffe17 	ldw	r2,-8(fp)
81105994:	108003cc 	andi	r2,r2,15
81105998:	10800044 	addi	r2,r2,1
8110599c:	1007883a 	mov	r3,r2
811059a0:	e0bfff17 	ldw	r2,-4(fp)
811059a4:	10c00745 	stb	r3,29(r2)
				& COMM_LEFT_FEEBUFF_SIZE_MSK) + 1;

		bStatus = TRUE;
811059a8:	00800044 	movi	r2,1
811059ac:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811059b0:	e0bffd17 	ldw	r2,-12(fp)
}
811059b4:	e037883a 	mov	sp,fp
811059b8:	dfc00117 	ldw	ra,4(sp)
811059bc:	df000017 	ldw	fp,0(sp)
811059c0:	dec00204 	addi	sp,sp,8
811059c4:	f800283a 	ret

811059c8 <bFeebGetLeftBufferEmpty>:

bool bFeebGetLeftBufferEmpty(TFeebChannel *pxFeebCh){
811059c8:	defffb04 	addi	sp,sp,-20
811059cc:	dfc00415 	stw	ra,16(sp)
811059d0:	df000315 	stw	fp,12(sp)
811059d4:	df000304 	addi	fp,sp,12
811059d8:	e13fff15 	stw	r4,-4(fp)
	bool bFlag = FALSE;
811059dc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811059e0:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811059e4:	e0bfff17 	ldw	r2,-4(fp)
811059e8:	10000d26 	beq	r2,zero,81105a20 <bFeebGetLeftBufferEmpty+0x58>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811059ec:	e0bfff17 	ldw	r2,-4(fp)
811059f0:	10800017 	ldw	r2,0(r2)
811059f4:	014000c4 	movi	r5,3
811059f8:	1009883a 	mov	r4,r2
811059fc:	11061680 	call	81106168 <uliFeebReadReg>
81105a00:	e0bffe15 	stw	r2,-8(fp)
		COMM_FEE_BUFF_STAT_REG_OFST);

		if (uliReg & COMM_WIND_LEFT_BUFF_EMPTY_MSK) {
81105a04:	e0bffe17 	ldw	r2,-8(fp)
81105a08:	1080008c 	andi	r2,r2,2
81105a0c:	10000326 	beq	r2,zero,81105a1c <bFeebGetLeftBufferEmpty+0x54>
			bFlag = TRUE;
81105a10:	00800044 	movi	r2,1
81105a14:	e0bffd15 	stw	r2,-12(fp)
81105a18:	00000106 	br	81105a20 <bFeebGetLeftBufferEmpty+0x58>
		} else {
			bFlag = FALSE;
81105a1c:	e03ffd15 	stw	zero,-12(fp)
		}

	}

	return bFlag;
81105a20:	e0bffd17 	ldw	r2,-12(fp)
}
81105a24:	e037883a 	mov	sp,fp
81105a28:	dfc00117 	ldw	ra,4(sp)
81105a2c:	df000017 	ldw	fp,0(sp)
81105a30:	dec00204 	addi	sp,sp,8
81105a34:	f800283a 	ret

81105a38 <bFeebGetRightBufferEmpty>:

bool bFeebGetRightBufferEmpty(TFeebChannel *pxFeebCh){
81105a38:	defffb04 	addi	sp,sp,-20
81105a3c:	dfc00415 	stw	ra,16(sp)
81105a40:	df000315 	stw	fp,12(sp)
81105a44:	df000304 	addi	fp,sp,12
81105a48:	e13fff15 	stw	r4,-4(fp)
	bool bFlag = FALSE;
81105a4c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105a50:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105a54:	e0bfff17 	ldw	r2,-4(fp)
81105a58:	10000d26 	beq	r2,zero,81105a90 <bFeebGetRightBufferEmpty+0x58>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105a5c:	e0bfff17 	ldw	r2,-4(fp)
81105a60:	10800017 	ldw	r2,0(r2)
81105a64:	014000c4 	movi	r5,3
81105a68:	1009883a 	mov	r4,r2
81105a6c:	11061680 	call	81106168 <uliFeebReadReg>
81105a70:	e0bffe15 	stw	r2,-8(fp)
		COMM_FEE_BUFF_STAT_REG_OFST);

		if (uliReg & COMM_WIND_RIGH_BUFF_EMPTY_MSK) {
81105a74:	e0bffe17 	ldw	r2,-8(fp)
81105a78:	1080004c 	andi	r2,r2,1
81105a7c:	10000326 	beq	r2,zero,81105a8c <bFeebGetRightBufferEmpty+0x54>
			bFlag = TRUE;
81105a80:	00800044 	movi	r2,1
81105a84:	e0bffd15 	stw	r2,-12(fp)
81105a88:	00000106 	br	81105a90 <bFeebGetRightBufferEmpty+0x58>
		} else {
			bFlag = FALSE;
81105a8c:	e03ffd15 	stw	zero,-12(fp)
		}

	}

	return bFlag;
81105a90:	e0bffd17 	ldw	r2,-12(fp)
}
81105a94:	e037883a 	mov	sp,fp
81105a98:	dfc00117 	ldw	ra,4(sp)
81105a9c:	df000017 	ldw	fp,0(sp)
81105aa0:	dec00204 	addi	sp,sp,8
81105aa4:	f800283a 	ret

81105aa8 <bFeebGetCh1LeftBufferEmpty>:

bool bFeebGetCh1LeftBufferEmpty(void){
81105aa8:	defffc04 	addi	sp,sp,-16
81105aac:	dfc00315 	stw	ra,12(sp)
81105ab0:	df000215 	stw	fp,8(sp)
81105ab4:	df000204 	addi	fp,sp,8
	bool bFlag = FALSE;
81105ab8:	e03ffe15 	stw	zero,-8(fp)
	alt_u32 uliReg = 0;
81105abc:	e03fff15 	stw	zero,-4(fp)

		uliReg = uliFeebReadReg((alt_u32 *) COMM_CHANNEL_1_BASE_ADDR,
81105ac0:	014000c4 	movi	r5,3
81105ac4:	01204834 	movhi	r4,33056
81105ac8:	210b0004 	addi	r4,r4,11264
81105acc:	11061680 	call	81106168 <uliFeebReadReg>
81105ad0:	e0bfff15 	stw	r2,-4(fp)
		COMM_FEE_BUFF_STAT_REG_OFST);

		if (uliReg & COMM_WIND_LEFT_BUFF_EMPTY_MSK) {
81105ad4:	e0bfff17 	ldw	r2,-4(fp)
81105ad8:	1080008c 	andi	r2,r2,2
81105adc:	10000326 	beq	r2,zero,81105aec <bFeebGetCh1LeftBufferEmpty+0x44>
			bFlag = TRUE;
81105ae0:	00800044 	movi	r2,1
81105ae4:	e0bffe15 	stw	r2,-8(fp)
81105ae8:	00000106 	br	81105af0 <bFeebGetCh1LeftBufferEmpty+0x48>
		} else {
			bFlag = FALSE;
81105aec:	e03ffe15 	stw	zero,-8(fp)

	}

		return bFlag;
81105af0:	e0bffe17 	ldw	r2,-8(fp)
}
81105af4:	e037883a 	mov	sp,fp
81105af8:	dfc00117 	ldw	ra,4(sp)
81105afc:	df000017 	ldw	fp,0(sp)
81105b00:	dec00204 	addi	sp,sp,8
81105b04:	f800283a 	ret

81105b08 <bFeebGetCh1RightBufferEmpty>:

bool bFeebGetCh1RightBufferEmpty(void){
81105b08:	defffc04 	addi	sp,sp,-16
81105b0c:	dfc00315 	stw	ra,12(sp)
81105b10:	df000215 	stw	fp,8(sp)
81105b14:	df000204 	addi	fp,sp,8
	bool bFlag = FALSE;
81105b18:	e03ffe15 	stw	zero,-8(fp)
	alt_u32 uliReg = 0;
81105b1c:	e03fff15 	stw	zero,-4(fp)

		uliReg = uliFeebReadReg((alt_u32 *) COMM_CHANNEL_1_BASE_ADDR,
81105b20:	014000c4 	movi	r5,3
81105b24:	01204834 	movhi	r4,33056
81105b28:	210b0004 	addi	r4,r4,11264
81105b2c:	11061680 	call	81106168 <uliFeebReadReg>
81105b30:	e0bfff15 	stw	r2,-4(fp)
		COMM_FEE_BUFF_STAT_REG_OFST);

		if (uliReg & COMM_WIND_RIGH_BUFF_EMPTY_MSK) {
81105b34:	e0bfff17 	ldw	r2,-4(fp)
81105b38:	1080004c 	andi	r2,r2,1
81105b3c:	10000326 	beq	r2,zero,81105b4c <bFeebGetCh1RightBufferEmpty+0x44>
			bFlag = TRUE;
81105b40:	00800044 	movi	r2,1
81105b44:	e0bffe15 	stw	r2,-8(fp)
81105b48:	00000106 	br	81105b50 <bFeebGetCh1RightBufferEmpty+0x48>
		} else {
			bFlag = FALSE;
81105b4c:	e03ffe15 	stw	zero,-8(fp)

	}

		return bFlag;
81105b50:	e0bffe17 	ldw	r2,-8(fp)
}
81105b54:	e037883a 	mov	sp,fp
81105b58:	dfc00117 	ldw	ra,4(sp)
81105b5c:	df000017 	ldw	fp,0(sp)
81105b60:	dec00204 	addi	sp,sp,8
81105b64:	f800283a 	ret

81105b68 <bFeebGetCh2LeftBufferEmpty>:

bool bFeebGetCh2LeftBufferEmpty(void){
81105b68:	defffc04 	addi	sp,sp,-16
81105b6c:	dfc00315 	stw	ra,12(sp)
81105b70:	df000215 	stw	fp,8(sp)
81105b74:	df000204 	addi	fp,sp,8
	bool bFlag = FALSE;
81105b78:	e03ffe15 	stw	zero,-8(fp)
	alt_u32 uliReg = 0;
81105b7c:	e03fff15 	stw	zero,-4(fp)

		uliReg = uliFeebReadReg((alt_u32 *) COMM_CHANNEL_2_BASE_ADDR,
81105b80:	014000c4 	movi	r5,3
81105b84:	01204834 	movhi	r4,33056
81105b88:	210a0004 	addi	r4,r4,10240
81105b8c:	11061680 	call	81106168 <uliFeebReadReg>
81105b90:	e0bfff15 	stw	r2,-4(fp)
		COMM_FEE_BUFF_STAT_REG_OFST);

		if (uliReg & COMM_WIND_LEFT_BUFF_EMPTY_MSK) {
81105b94:	e0bfff17 	ldw	r2,-4(fp)
81105b98:	1080008c 	andi	r2,r2,2
81105b9c:	10000326 	beq	r2,zero,81105bac <bFeebGetCh2LeftBufferEmpty+0x44>
			bFlag = TRUE;
81105ba0:	00800044 	movi	r2,1
81105ba4:	e0bffe15 	stw	r2,-8(fp)
81105ba8:	00000106 	br	81105bb0 <bFeebGetCh2LeftBufferEmpty+0x48>
		} else {
			bFlag = FALSE;
81105bac:	e03ffe15 	stw	zero,-8(fp)

	}

		return bFlag;
81105bb0:	e0bffe17 	ldw	r2,-8(fp)
}
81105bb4:	e037883a 	mov	sp,fp
81105bb8:	dfc00117 	ldw	ra,4(sp)
81105bbc:	df000017 	ldw	fp,0(sp)
81105bc0:	dec00204 	addi	sp,sp,8
81105bc4:	f800283a 	ret

81105bc8 <bFeebGetCh2RightBufferEmpty>:

bool bFeebGetCh2RightBufferEmpty(void){
81105bc8:	defffc04 	addi	sp,sp,-16
81105bcc:	dfc00315 	stw	ra,12(sp)
81105bd0:	df000215 	stw	fp,8(sp)
81105bd4:	df000204 	addi	fp,sp,8
	bool bFlag = FALSE;
81105bd8:	e03ffe15 	stw	zero,-8(fp)
	alt_u32 uliReg = 0;
81105bdc:	e03fff15 	stw	zero,-4(fp)

		uliReg = uliFeebReadReg((alt_u32 *) COMM_CHANNEL_2_BASE_ADDR,
81105be0:	014000c4 	movi	r5,3
81105be4:	01204834 	movhi	r4,33056
81105be8:	210a0004 	addi	r4,r4,10240
81105bec:	11061680 	call	81106168 <uliFeebReadReg>
81105bf0:	e0bfff15 	stw	r2,-4(fp)
		COMM_FEE_BUFF_STAT_REG_OFST);

		if (uliReg & COMM_WIND_RIGH_BUFF_EMPTY_MSK) {
81105bf4:	e0bfff17 	ldw	r2,-4(fp)
81105bf8:	1080004c 	andi	r2,r2,1
81105bfc:	10000326 	beq	r2,zero,81105c0c <bFeebGetCh2RightBufferEmpty+0x44>
			bFlag = TRUE;
81105c00:	00800044 	movi	r2,1
81105c04:	e0bffe15 	stw	r2,-8(fp)
81105c08:	00000106 	br	81105c10 <bFeebGetCh2RightBufferEmpty+0x48>
		} else {
			bFlag = FALSE;
81105c0c:	e03ffe15 	stw	zero,-8(fp)

	}

		return bFlag;
81105c10:	e0bffe17 	ldw	r2,-8(fp)
}
81105c14:	e037883a 	mov	sp,fp
81105c18:	dfc00117 	ldw	ra,4(sp)
81105c1c:	df000017 	ldw	fp,0(sp)
81105c20:	dec00204 	addi	sp,sp,8
81105c24:	f800283a 	ret

81105c28 <bFeebSetBufferSize>:

bool bFeebSetBufferSize(TFeebChannel *pxFeebCh, alt_u8 ucBufferSizeInBlocks,
		alt_u8 ucBufferSide) {
81105c28:	defff904 	addi	sp,sp,-28
81105c2c:	dfc00615 	stw	ra,24(sp)
81105c30:	df000515 	stw	fp,20(sp)
81105c34:	df000504 	addi	fp,sp,20
81105c38:	e13ffd15 	stw	r4,-12(fp)
81105c3c:	2807883a 	mov	r3,r5
81105c40:	3005883a 	mov	r2,r6
81105c44:	e0fffe05 	stb	r3,-8(fp)
81105c48:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = TRUE;
81105c4c:	00800044 	movi	r2,1
81105c50:	e0bffb15 	stw	r2,-20(fp)
	alt_u32 uliReg = 0;
81105c54:	e03ffc15 	stw	zero,-16(fp)

	if ((0 < ucBufferSizeInBlocks) && (16 >= ucBufferSizeInBlocks)) {
81105c58:	e0bffe03 	ldbu	r2,-8(fp)
81105c5c:	10002126 	beq	r2,zero,81105ce4 <bFeebSetBufferSize+0xbc>
81105c60:	e0bffe03 	ldbu	r2,-8(fp)
81105c64:	10800468 	cmpgeui	r2,r2,17
81105c68:	10001e1e 	bne	r2,zero,81105ce4 <bFeebSetBufferSize+0xbc>
		switch (ucBufferSide) {
81105c6c:	e0bfff03 	ldbu	r2,-4(fp)
81105c70:	10000326 	beq	r2,zero,81105c80 <bFeebSetBufferSize+0x58>
81105c74:	10800060 	cmpeqi	r2,r2,1
81105c78:	10000c1e 	bne	r2,zero,81105cac <bFeebSetBufferSize+0x84>
81105c7c:	00001606 	br	81105cd8 <bFeebSetBufferSize+0xb0>
		case eCommLeftBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81105c80:	e0bffe03 	ldbu	r2,-8(fp)
81105c84:	10bfffc4 	addi	r2,r2,-1
81105c88:	108003cc 	andi	r2,r2,15
81105c8c:	e0bffc15 	stw	r2,-16(fp)
					& COMM_LEFT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg(pxFeebCh->puliFeebChAddr,
81105c90:	e0bffd17 	ldw	r2,-12(fp)
81105c94:	10800017 	ldw	r2,0(r2)
81105c98:	e1bffc17 	ldw	r6,-16(fp)
81105c9c:	01400544 	movi	r5,21
81105ca0:	1009883a 	mov	r4,r2
81105ca4:	110611c0 	call	8110611c <vFeebWriteReg>
					COMM_LEFT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81105ca8:	00000d06 	br	81105ce0 <bFeebSetBufferSize+0xb8>
		case eCommRightBuffer:
			uliReg = (alt_u32) ((ucBufferSizeInBlocks - 1)
81105cac:	e0bffe03 	ldbu	r2,-8(fp)
81105cb0:	10bfffc4 	addi	r2,r2,-1
81105cb4:	108003cc 	andi	r2,r2,15
81105cb8:	e0bffc15 	stw	r2,-16(fp)
					& COMM_RIGT_FEEBUFF_SIZE_MSK);
			vFeebWriteReg(pxFeebCh->puliFeebChAddr,
81105cbc:	e0bffd17 	ldw	r2,-12(fp)
81105cc0:	10800017 	ldw	r2,0(r2)
81105cc4:	e1bffc17 	ldw	r6,-16(fp)
81105cc8:	01400504 	movi	r5,20
81105ccc:	1009883a 	mov	r4,r2
81105cd0:	110611c0 	call	8110611c <vFeebWriteReg>
					COMM_RIGT_FEEBUFF_SIZE_REG_OFST, uliReg);
			break;
81105cd4:	00000206 	br	81105ce0 <bFeebSetBufferSize+0xb8>
		default:
			bStatus = FALSE;
81105cd8:	e03ffb15 	stw	zero,-20(fp)
			break;
81105cdc:	0001883a 	nop
		}
	} else {
81105ce0:	00000106 	br	81105ce8 <bFeebSetBufferSize+0xc0>
		bStatus = FALSE;
81105ce4:	e03ffb15 	stw	zero,-20(fp)
	}

	return bStatus;
81105ce8:	e0bffb17 	ldw	r2,-20(fp)
}
81105cec:	e037883a 	mov	sp,fp
81105cf0:	dfc00117 	ldw	ra,4(sp)
81105cf4:	df000017 	ldw	fp,0(sp)
81105cf8:	dec00204 	addi	sp,sp,8
81105cfc:	f800283a 	ret

81105d00 <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81105d00:	defffb04 	addi	sp,sp,-20
81105d04:	dfc00415 	stw	ra,16(sp)
81105d08:	df000315 	stw	fp,12(sp)
81105d0c:	df000304 	addi	fp,sp,12
81105d10:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105d14:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105d18:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105d1c:	e0bfff17 	ldw	r2,-4(fp)
81105d20:	10001926 	beq	r2,zero,81105d88 <bFeebSetWindowing+0x88>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105d24:	e0bfff17 	ldw	r2,-4(fp)
81105d28:	10800017 	ldw	r2,0(r2)
81105d2c:	01400084 	movi	r5,2
81105d30:	1009883a 	mov	r4,r2
81105d34:	11061680 	call	81106168 <uliFeebReadReg>
81105d38:	e0bffe15 	stw	r2,-8(fp)
		COMM_FEE_BUFF_CFG_REG_OFST);

		if (pxFeebCh->xWindowingConfig.bMasking) {
81105d3c:	e0bfff17 	ldw	r2,-4(fp)
81105d40:	10800117 	ldw	r2,4(r2)
81105d44:	10000426 	beq	r2,zero,81105d58 <bFeebSetWindowing+0x58>
			uliReg |= COMM_FEE_MASKING_EN_MSK;
81105d48:	e0bffe17 	ldw	r2,-8(fp)
81105d4c:	10800214 	ori	r2,r2,8
81105d50:	e0bffe15 	stw	r2,-8(fp)
81105d54:	00000406 	br	81105d68 <bFeebSetWindowing+0x68>
		} else {
			uliReg &= (~COMM_FEE_MASKING_EN_MSK);
81105d58:	e0fffe17 	ldw	r3,-8(fp)
81105d5c:	00bffdc4 	movi	r2,-9
81105d60:	1884703a 	and	r2,r3,r2
81105d64:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_FEE_BUFF_CFG_REG_OFST,
81105d68:	e0bfff17 	ldw	r2,-4(fp)
81105d6c:	10800017 	ldw	r2,0(r2)
81105d70:	e1bffe17 	ldw	r6,-8(fp)
81105d74:	01400084 	movi	r5,2
81105d78:	1009883a 	mov	r4,r2
81105d7c:	110611c0 	call	8110611c <vFeebWriteReg>
				uliReg);

		bStatus = TRUE;
81105d80:	00800044 	movi	r2,1
81105d84:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105d88:	e0bffd17 	ldw	r2,-12(fp)
}
81105d8c:	e037883a 	mov	sp,fp
81105d90:	dfc00117 	ldw	ra,4(sp)
81105d94:	df000017 	ldw	fp,0(sp)
81105d98:	dec00204 	addi	sp,sp,8
81105d9c:	f800283a 	ret

81105da0 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81105da0:	defffb04 	addi	sp,sp,-20
81105da4:	dfc00415 	stw	ra,16(sp)
81105da8:	df000315 	stw	fp,12(sp)
81105dac:	df000304 	addi	fp,sp,12
81105db0:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105db4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105db8:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105dbc:	e0bfff17 	ldw	r2,-4(fp)
81105dc0:	10001126 	beq	r2,zero,81105e08 <bFeebGetWindowing+0x68>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105dc4:	e0bfff17 	ldw	r2,-4(fp)
81105dc8:	10800017 	ldw	r2,0(r2)
81105dcc:	01400084 	movi	r5,2
81105dd0:	1009883a 	mov	r4,r2
81105dd4:	11061680 	call	81106168 <uliFeebReadReg>
81105dd8:	e0bffe15 	stw	r2,-8(fp)
		COMM_FEE_BUFF_CFG_REG_OFST);

		if (uliReg & COMM_FEE_MASKING_EN_MSK) {
81105ddc:	e0bffe17 	ldw	r2,-8(fp)
81105de0:	1080020c 	andi	r2,r2,8
81105de4:	10000426 	beq	r2,zero,81105df8 <bFeebGetWindowing+0x58>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
81105de8:	e0bfff17 	ldw	r2,-4(fp)
81105dec:	00c00044 	movi	r3,1
81105df0:	10c00115 	stw	r3,4(r2)
81105df4:	00000206 	br	81105e00 <bFeebGetWindowing+0x60>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
81105df8:	e0bfff17 	ldw	r2,-4(fp)
81105dfc:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
81105e00:	00800044 	movi	r2,1
81105e04:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105e08:	e0bffd17 	ldw	r2,-12(fp)
}
81105e0c:	e037883a 	mov	sp,fp
81105e10:	dfc00117 	ldw	ra,4(sp)
81105e14:	df000017 	ldw	fp,0(sp)
81105e18:	dec00204 	addi	sp,sp,8
81105e1c:	f800283a 	ret

81105e20 <bFeebStartCh>:

bool bFeebStartCh(TFeebChannel *pxFeebCh) {
81105e20:	defffb04 	addi	sp,sp,-20
81105e24:	dfc00415 	stw	ra,16(sp)
81105e28:	df000315 	stw	fp,12(sp)
81105e2c:	df000304 	addi	fp,sp,12
81105e30:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105e34:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105e38:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105e3c:	e0bfff17 	ldw	r2,-4(fp)
81105e40:	10001126 	beq	r2,zero,81105e88 <bFeebStartCh+0x68>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105e44:	e0bfff17 	ldw	r2,-4(fp)
81105e48:	10800017 	ldw	r2,0(r2)
81105e4c:	01400084 	movi	r5,2
81105e50:	1009883a 	mov	r4,r2
81105e54:	11061680 	call	81106168 <uliFeebReadReg>
81105e58:	e0bffe15 	stw	r2,-8(fp)
		COMM_FEE_BUFF_CFG_REG_OFST);

		uliReg |= COMM_FEE_MACHINE_START_MSK;
81105e5c:	e0bffe17 	ldw	r2,-8(fp)
81105e60:	10800114 	ori	r2,r2,4
81105e64:	e0bffe15 	stw	r2,-8(fp)

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_FEE_BUFF_CFG_REG_OFST,
81105e68:	e0bfff17 	ldw	r2,-4(fp)
81105e6c:	10800017 	ldw	r2,0(r2)
81105e70:	e1bffe17 	ldw	r6,-8(fp)
81105e74:	01400084 	movi	r5,2
81105e78:	1009883a 	mov	r4,r2
81105e7c:	110611c0 	call	8110611c <vFeebWriteReg>
				uliReg);

		bStatus = TRUE;
81105e80:	00800044 	movi	r2,1
81105e84:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105e88:	e0bffd17 	ldw	r2,-12(fp)
}
81105e8c:	e037883a 	mov	sp,fp
81105e90:	dfc00117 	ldw	ra,4(sp)
81105e94:	df000017 	ldw	fp,0(sp)
81105e98:	dec00204 	addi	sp,sp,8
81105e9c:	f800283a 	ret

81105ea0 <bFeebStopCh>:

bool bFeebStopCh(TFeebChannel *pxFeebCh) {
81105ea0:	defffb04 	addi	sp,sp,-20
81105ea4:	dfc00415 	stw	ra,16(sp)
81105ea8:	df000315 	stw	fp,12(sp)
81105eac:	df000304 	addi	fp,sp,12
81105eb0:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105eb4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105eb8:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105ebc:	e0bfff17 	ldw	r2,-4(fp)
81105ec0:	10001126 	beq	r2,zero,81105f08 <bFeebStopCh+0x68>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105ec4:	e0bfff17 	ldw	r2,-4(fp)
81105ec8:	10800017 	ldw	r2,0(r2)
81105ecc:	01400084 	movi	r5,2
81105ed0:	1009883a 	mov	r4,r2
81105ed4:	11061680 	call	81106168 <uliFeebReadReg>
81105ed8:	e0bffe15 	stw	r2,-8(fp)
		COMM_FEE_BUFF_CFG_REG_OFST);

		uliReg |= COMM_FEE_MACHINE_STOP_MSK;
81105edc:	e0bffe17 	ldw	r2,-8(fp)
81105ee0:	10800094 	ori	r2,r2,2
81105ee4:	e0bffe15 	stw	r2,-8(fp)

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_FEE_BUFF_CFG_REG_OFST,
81105ee8:	e0bfff17 	ldw	r2,-4(fp)
81105eec:	10800017 	ldw	r2,0(r2)
81105ef0:	e1bffe17 	ldw	r6,-8(fp)
81105ef4:	01400084 	movi	r5,2
81105ef8:	1009883a 	mov	r4,r2
81105efc:	110611c0 	call	8110611c <vFeebWriteReg>
				uliReg);

		bStatus = TRUE;
81105f00:	00800044 	movi	r2,1
81105f04:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105f08:	e0bffd17 	ldw	r2,-12(fp)
}
81105f0c:	e037883a 	mov	sp,fp
81105f10:	dfc00117 	ldw	ra,4(sp)
81105f14:	df000017 	ldw	fp,0(sp)
81105f18:	dec00204 	addi	sp,sp,8
81105f1c:	f800283a 	ret

81105f20 <bFeebClrCh>:

bool bFeebClrCh(TFeebChannel *pxFeebCh) {
81105f20:	defffb04 	addi	sp,sp,-20
81105f24:	dfc00415 	stw	ra,16(sp)
81105f28:	df000315 	stw	fp,12(sp)
81105f2c:	df000304 	addi	fp,sp,12
81105f30:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105f34:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105f38:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105f3c:	e0bfff17 	ldw	r2,-4(fp)
81105f40:	10001126 	beq	r2,zero,81105f88 <bFeebClrCh+0x68>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105f44:	e0bfff17 	ldw	r2,-4(fp)
81105f48:	10800017 	ldw	r2,0(r2)
81105f4c:	01400084 	movi	r5,2
81105f50:	1009883a 	mov	r4,r2
81105f54:	11061680 	call	81106168 <uliFeebReadReg>
81105f58:	e0bffe15 	stw	r2,-8(fp)
		COMM_FEE_BUFF_CFG_REG_OFST);

		uliReg |= COMM_FEE_MACHINE_CLR_MSK;
81105f5c:	e0bffe17 	ldw	r2,-8(fp)
81105f60:	10800054 	ori	r2,r2,1
81105f64:	e0bffe15 	stw	r2,-8(fp)

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_FEE_BUFF_CFG_REG_OFST,
81105f68:	e0bfff17 	ldw	r2,-4(fp)
81105f6c:	10800017 	ldw	r2,0(r2)
81105f70:	e1bffe17 	ldw	r6,-8(fp)
81105f74:	01400084 	movi	r5,2
81105f78:	1009883a 	mov	r4,r2
81105f7c:	110611c0 	call	8110611c <vFeebWriteReg>
				uliReg);

		bStatus = TRUE;
81105f80:	00800044 	movi	r2,1
81105f84:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105f88:	e0bffd17 	ldw	r2,-12(fp)
}
81105f8c:	e037883a 	mov	sp,fp
81105f90:	dfc00117 	ldw	ra,4(sp)
81105f94:	df000017 	ldw	fp,0(sp)
81105f98:	dec00204 	addi	sp,sp,8
81105f9c:	f800283a 	ret

81105fa0 <bFeebInitCh>:

bool bFeebInitCh(TFeebChannel *pxFeebCh, alt_u8 ucCommCh) {
81105fa0:	defffb04 	addi	sp,sp,-20
81105fa4:	dfc00415 	stw	ra,16(sp)
81105fa8:	df000315 	stw	fp,12(sp)
81105fac:	df000304 	addi	fp,sp,12
81105fb0:	e13ffe15 	stw	r4,-8(fp)
81105fb4:	2805883a 	mov	r2,r5
81105fb8:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
81105fbc:	e03ffd15 	stw	zero,-12(fp)

	if (pxFeebCh != NULL) {
81105fc0:	e0bffe17 	ldw	r2,-8(fp)
81105fc4:	10004f26 	beq	r2,zero,81106104 <bFeebInitCh+0x164>
		bStatus = TRUE;
81105fc8:	00800044 	movi	r2,1
81105fcc:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
81105fd0:	e0bfff03 	ldbu	r2,-4(fp)
81105fd4:	10c00228 	cmpgeui	r3,r2,8
81105fd8:	1800361e 	bne	r3,zero,811060b4 <bFeebInitCh+0x114>
81105fdc:	100690ba 	slli	r3,r2,2
81105fe0:	00a04434 	movhi	r2,33040
81105fe4:	1097fd04 	addi	r2,r2,24564
81105fe8:	1885883a 	add	r2,r3,r2
81105fec:	10800017 	ldw	r2,0(r2)
81105ff0:	1000683a 	jmp	r2
81105ff4:	81106014 	ori	r4,r16,16768
81105ff8:	81106028 	cmpgeui	r4,r16,16768
81105ffc:	8110603c 	xorhi	r4,r16,16768
81106000:	81106050 	cmplti	r4,r16,16769
81106004:	81106064 	muli	r4,r16,16769
81106008:	81106078 	rdprs	r4,r16,16769
8110600c:	8110608c 	andi	r4,r16,16770
81106010:	811060a0 	cmpeqi	r4,r16,16770
		case eCommSpwCh1:
			pxFeebCh->puliFeebChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81106014:	e0fffe17 	ldw	r3,-8(fp)
81106018:	00a04834 	movhi	r2,33056
8110601c:	108b0004 	addi	r2,r2,11264
81106020:	18800015 	stw	r2,0(r3)
			break;
81106024:	00002506 	br	811060bc <bFeebInitCh+0x11c>
		case eCommSpwCh2:
			pxFeebCh->puliFeebChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
81106028:	e0fffe17 	ldw	r3,-8(fp)
8110602c:	00a04834 	movhi	r2,33056
81106030:	108a0004 	addi	r2,r2,10240
81106034:	18800015 	stw	r2,0(r3)
			break;
81106038:	00002006 	br	811060bc <bFeebInitCh+0x11c>
		case eCommSpwCh3:
			pxFeebCh->puliFeebChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
8110603c:	e0fffe17 	ldw	r3,-8(fp)
81106040:	00a04834 	movhi	r2,33056
81106044:	108b0004 	addi	r2,r2,11264
81106048:	18800015 	stw	r2,0(r3)
			break;
8110604c:	00001b06 	br	811060bc <bFeebInitCh+0x11c>
		case eCommSpwCh4:
			pxFeebCh->puliFeebChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
81106050:	e0fffe17 	ldw	r3,-8(fp)
81106054:	00a04834 	movhi	r2,33056
81106058:	108a0004 	addi	r2,r2,10240
8110605c:	18800015 	stw	r2,0(r3)
			break;
81106060:	00001606 	br	811060bc <bFeebInitCh+0x11c>
		case eCommSpwCh5:
			pxFeebCh->puliFeebChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
81106064:	e0fffe17 	ldw	r3,-8(fp)
81106068:	00a04834 	movhi	r2,33056
8110606c:	108b0004 	addi	r2,r2,11264
81106070:	18800015 	stw	r2,0(r3)
			break;
81106074:	00001106 	br	811060bc <bFeebInitCh+0x11c>
		case eCommSpwCh6:
			pxFeebCh->puliFeebChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
81106078:	e0fffe17 	ldw	r3,-8(fp)
8110607c:	00a04834 	movhi	r2,33056
81106080:	108a0004 	addi	r2,r2,10240
81106084:	18800015 	stw	r2,0(r3)
			break;
81106088:	00000c06 	br	811060bc <bFeebInitCh+0x11c>
		case eCommSpwCh7:
			pxFeebCh->puliFeebChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
8110608c:	e0fffe17 	ldw	r3,-8(fp)
81106090:	00a04834 	movhi	r2,33056
81106094:	108b0004 	addi	r2,r2,11264
81106098:	18800015 	stw	r2,0(r3)
			break;
8110609c:	00000706 	br	811060bc <bFeebInitCh+0x11c>
		case eCommSpwCh8:
			pxFeebCh->puliFeebChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
811060a0:	e0fffe17 	ldw	r3,-8(fp)
811060a4:	00a04834 	movhi	r2,33056
811060a8:	108a0004 	addi	r2,r2,10240
811060ac:	18800015 	stw	r2,0(r3)
			break;
811060b0:	00000206 	br	811060bc <bFeebInitCh+0x11c>
		default:
			bStatus = FALSE;
811060b4:	e03ffd15 	stw	zero,-12(fp)
			break;
811060b8:	0001883a 	nop
		}

		if (bStatus) {
811060bc:	e0bffd17 	ldw	r2,-12(fp)
811060c0:	10001026 	beq	r2,zero,81106104 <bFeebInitCh+0x164>
			if (!bFeebGetIrqControl(pxFeebCh)) {
811060c4:	e13ffe17 	ldw	r4,-8(fp)
811060c8:	11057a00 	call	811057a0 <bFeebGetIrqControl>
811060cc:	1000011e 	bne	r2,zero,811060d4 <bFeebInitCh+0x134>
				bStatus = FALSE;
811060d0:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bFeebGetIrqFlags(pxFeebCh)) {
811060d4:	e13ffe17 	ldw	r4,-8(fp)
811060d8:	11058440 	call	81105844 <bFeebGetIrqFlags>
811060dc:	1000011e 	bne	r2,zero,811060e4 <bFeebInitCh+0x144>
				bStatus = FALSE;
811060e0:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bFeebGetBuffersStatus(pxFeebCh)) {
811060e4:	e13ffe17 	ldw	r4,-8(fp)
811060e8:	11058c40 	call	811058c4 <bFeebGetBuffersStatus>
811060ec:	1000011e 	bne	r2,zero,811060f4 <bFeebInitCh+0x154>
				bStatus = FALSE;
811060f0:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bFeebGetWindowing(pxFeebCh)) {
811060f4:	e13ffe17 	ldw	r4,-8(fp)
811060f8:	1105da00 	call	81105da0 <bFeebGetWindowing>
811060fc:	1000011e 	bne	r2,zero,81106104 <bFeebInitCh+0x164>
				bStatus = FALSE;
81106100:	e03ffd15 	stw	zero,-12(fp)
			}
		}
	}
	return bStatus;
81106104:	e0bffd17 	ldw	r2,-12(fp)
}
81106108:	e037883a 	mov	sp,fp
8110610c:	dfc00117 	ldw	ra,4(sp)
81106110:	df000017 	ldw	fp,0(sp)
81106114:	dec00204 	addi	sp,sp,8
81106118:	f800283a 	ret

8110611c <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
8110611c:	defffc04 	addi	sp,sp,-16
81106120:	df000315 	stw	fp,12(sp)
81106124:	df000304 	addi	fp,sp,12
81106128:	e13ffd15 	stw	r4,-12(fp)
8110612c:	e17ffe15 	stw	r5,-8(fp)
81106130:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81106134:	e0bffe17 	ldw	r2,-8(fp)
81106138:	1085883a 	add	r2,r2,r2
8110613c:	1085883a 	add	r2,r2,r2
81106140:	1007883a 	mov	r3,r2
81106144:	e0bffd17 	ldw	r2,-12(fp)
81106148:	10c5883a 	add	r2,r2,r3
8110614c:	e0ffff17 	ldw	r3,-4(fp)
81106150:	10c00015 	stw	r3,0(r2)
}
81106154:	0001883a 	nop
81106158:	e037883a 	mov	sp,fp
8110615c:	df000017 	ldw	fp,0(sp)
81106160:	dec00104 	addi	sp,sp,4
81106164:	f800283a 	ret

81106168 <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81106168:	defffc04 	addi	sp,sp,-16
8110616c:	df000315 	stw	fp,12(sp)
81106170:	df000304 	addi	fp,sp,12
81106174:	e13ffe15 	stw	r4,-8(fp)
81106178:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
8110617c:	e0bfff17 	ldw	r2,-4(fp)
81106180:	1085883a 	add	r2,r2,r2
81106184:	1085883a 	add	r2,r2,r2
81106188:	1007883a 	mov	r3,r2
8110618c:	e0bffe17 	ldw	r2,-8(fp)
81106190:	10c5883a 	add	r2,r2,r3
81106194:	10800017 	ldw	r2,0(r2)
81106198:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
8110619c:	e0bffd17 	ldw	r2,-12(fp)
}
811061a0:	e037883a 	mov	sp,fp
811061a4:	df000017 	ldw	fp,0(sp)
811061a8:	dec00104 	addi	sp,sp,4
811061ac:	f800283a 	ret

811061b0 <vRmapCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRmapCh1HandleIrq(void* pvContext) {
811061b0:	defffc04 	addi	sp,sp,-16
811061b4:	dfc00315 	stw	ra,12(sp)
811061b8:	df000215 	stw	fp,8(sp)
811061bc:	df000204 	addi	fp,sp,8
811061c0:	e13fff15 	stw	r4,-4(fp)
	volatile int* pviHoldContext = (volatile int*) pvContext;
811061c4:	e0bfff17 	ldw	r2,-4(fp)
811061c8:	e0bffe15 	stw	r2,-8(fp)
	error_codel = OSQPost(xFeeQ[0], (void *)uiCmdRmap.ulWord);
	if ( error_codel != OS_ERR_NONE ) {
		vFailSendRMAPFromIRQ( 0 );
	}
*/
	vRmapCh1IrqFlagClrWriteCmd();
811061cc:	11063700 	call	81106370 <vRmapCh1IrqFlagClrWriteCmd>
}
811061d0:	0001883a 	nop
811061d4:	e037883a 	mov	sp,fp
811061d8:	dfc00117 	ldw	ra,4(sp)
811061dc:	df000017 	ldw	fp,0(sp)
811061e0:	dec00204 	addi	sp,sp,8
811061e4:	f800283a 	ret

811061e8 <vRmapCh2HandleIrq>:

void vRmapCh2HandleIrq(void* pvContext) {
811061e8:	defffc04 	addi	sp,sp,-16
811061ec:	dfc00315 	stw	ra,12(sp)
811061f0:	df000215 	stw	fp,8(sp)
811061f4:	df000204 	addi	fp,sp,8
811061f8:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811061fc:	e0bfff17 	ldw	r2,-4(fp)
81106200:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vRmapCh2IrqFlagClrWriteCmd();
81106204:	11063ac0 	call	811063ac <vRmapCh2IrqFlagClrWriteCmd>
}
81106208:	0001883a 	nop
8110620c:	e037883a 	mov	sp,fp
81106210:	dfc00117 	ldw	ra,4(sp)
81106214:	df000017 	ldw	fp,0(sp)
81106218:	dec00204 	addi	sp,sp,8
8110621c:	f800283a 	ret

81106220 <vRmapCh3HandleIrq>:

void vRmapCh3HandleIrq(void* pvContext) {
81106220:	defffc04 	addi	sp,sp,-16
81106224:	dfc00315 	stw	ra,12(sp)
81106228:	df000215 	stw	fp,8(sp)
8110622c:	df000204 	addi	fp,sp,8
81106230:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81106234:	e0bfff17 	ldw	r2,-4(fp)
81106238:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vRmapCh3IrqFlagClrWriteCmd();
8110623c:	11063e80 	call	811063e8 <vRmapCh3IrqFlagClrWriteCmd>
}
81106240:	0001883a 	nop
81106244:	e037883a 	mov	sp,fp
81106248:	dfc00117 	ldw	ra,4(sp)
8110624c:	df000017 	ldw	fp,0(sp)
81106250:	dec00204 	addi	sp,sp,8
81106254:	f800283a 	ret

81106258 <vRmapCh4HandleIrq>:

void vRmapCh4HandleIrq(void* pvContext) {
81106258:	defffc04 	addi	sp,sp,-16
8110625c:	dfc00315 	stw	ra,12(sp)
81106260:	df000215 	stw	fp,8(sp)
81106264:	df000204 	addi	fp,sp,8
81106268:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
8110626c:	e0bfff17 	ldw	r2,-4(fp)
81106270:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vRmapCh4IrqFlagClrWriteCmd();
81106274:	11064240 	call	81106424 <vRmapCh4IrqFlagClrWriteCmd>
}
81106278:	0001883a 	nop
8110627c:	e037883a 	mov	sp,fp
81106280:	dfc00117 	ldw	ra,4(sp)
81106284:	df000017 	ldw	fp,0(sp)
81106288:	dec00204 	addi	sp,sp,8
8110628c:	f800283a 	ret

81106290 <vRmapCh5HandleIrq>:

void vRmapCh5HandleIrq(void* pvContext) {
81106290:	defffc04 	addi	sp,sp,-16
81106294:	dfc00315 	stw	ra,12(sp)
81106298:	df000215 	stw	fp,8(sp)
8110629c:	df000204 	addi	fp,sp,8
811062a0:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811062a4:	e0bfff17 	ldw	r2,-4(fp)
811062a8:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vRmapCh5IrqFlagClrWriteCmd();
811062ac:	11064600 	call	81106460 <vRmapCh5IrqFlagClrWriteCmd>
}
811062b0:	0001883a 	nop
811062b4:	e037883a 	mov	sp,fp
811062b8:	dfc00117 	ldw	ra,4(sp)
811062bc:	df000017 	ldw	fp,0(sp)
811062c0:	dec00204 	addi	sp,sp,8
811062c4:	f800283a 	ret

811062c8 <vRmapCh6HandleIrq>:

void vRmapCh6HandleIrq(void* pvContext) {
811062c8:	defffc04 	addi	sp,sp,-16
811062cc:	dfc00315 	stw	ra,12(sp)
811062d0:	df000215 	stw	fp,8(sp)
811062d4:	df000204 	addi	fp,sp,8
811062d8:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811062dc:	e0bfff17 	ldw	r2,-4(fp)
811062e0:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vRmapCh6IrqFlagClrWriteCmd();
811062e4:	110649c0 	call	8110649c <vRmapCh6IrqFlagClrWriteCmd>
}
811062e8:	0001883a 	nop
811062ec:	e037883a 	mov	sp,fp
811062f0:	dfc00117 	ldw	ra,4(sp)
811062f4:	df000017 	ldw	fp,0(sp)
811062f8:	dec00204 	addi	sp,sp,8
811062fc:	f800283a 	ret

81106300 <vRmapCh7HandleIrq>:

void vRmapCh7HandleIrq(void* pvContext) {
81106300:	defffc04 	addi	sp,sp,-16
81106304:	dfc00315 	stw	ra,12(sp)
81106308:	df000215 	stw	fp,8(sp)
8110630c:	df000204 	addi	fp,sp,8
81106310:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81106314:	e0bfff17 	ldw	r2,-4(fp)
81106318:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vRmapCh7IrqFlagClrWriteCmd();
8110631c:	11064d80 	call	811064d8 <vRmapCh7IrqFlagClrWriteCmd>
}
81106320:	0001883a 	nop
81106324:	e037883a 	mov	sp,fp
81106328:	dfc00117 	ldw	ra,4(sp)
8110632c:	df000017 	ldw	fp,0(sp)
81106330:	dec00204 	addi	sp,sp,8
81106334:	f800283a 	ret

81106338 <vRmapCh8HandleIrq>:

void vRmapCh8HandleIrq(void* pvContext) {
81106338:	defffc04 	addi	sp,sp,-16
8110633c:	dfc00315 	stw	ra,12(sp)
81106340:	df000215 	stw	fp,8(sp)
81106344:	df000204 	addi	fp,sp,8
81106348:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
8110634c:	e0bfff17 	ldw	r2,-4(fp)
81106350:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vRmapCh8IrqFlagClrWriteCmd();
81106354:	11065140 	call	81106514 <vRmapCh8IrqFlagClrWriteCmd>
}
81106358:	0001883a 	nop
8110635c:	e037883a 	mov	sp,fp
81106360:	dfc00117 	ldw	ra,4(sp)
81106364:	df000017 	ldw	fp,0(sp)
81106368:	dec00204 	addi	sp,sp,8
8110636c:	f800283a 	ret

81106370 <vRmapCh1IrqFlagClrWriteCmd>:

void vRmapCh1IrqFlagClrWriteCmd(void) {
81106370:	defffe04 	addi	sp,sp,-8
81106374:	dfc00115 	stw	ra,4(sp)
81106378:	df000015 	stw	fp,0(sp)
8110637c:	d839883a 	mov	fp,sp
	vRmapWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81106380:	01800044 	movi	r6,1
81106384:	014004c4 	movi	r5,19
81106388:	01204834 	movhi	r4,33056
8110638c:	210b0004 	addi	r4,r4,11264
81106390:	1108d080 	call	81108d08 <vRmapWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_RMAP_WRCMD_FLG_CLR_MSK);
}
81106394:	0001883a 	nop
81106398:	e037883a 	mov	sp,fp
8110639c:	dfc00117 	ldw	ra,4(sp)
811063a0:	df000017 	ldw	fp,0(sp)
811063a4:	dec00204 	addi	sp,sp,8
811063a8:	f800283a 	ret

811063ac <vRmapCh2IrqFlagClrWriteCmd>:

void vRmapCh2IrqFlagClrWriteCmd(void) {
811063ac:	defffe04 	addi	sp,sp,-8
811063b0:	dfc00115 	stw	ra,4(sp)
811063b4:	df000015 	stw	fp,0(sp)
811063b8:	d839883a 	mov	fp,sp
	vRmapWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811063bc:	01800044 	movi	r6,1
811063c0:	014004c4 	movi	r5,19
811063c4:	01204834 	movhi	r4,33056
811063c8:	210a0004 	addi	r4,r4,10240
811063cc:	1108d080 	call	81108d08 <vRmapWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_RMAP_WRCMD_FLG_CLR_MSK);
}
811063d0:	0001883a 	nop
811063d4:	e037883a 	mov	sp,fp
811063d8:	dfc00117 	ldw	ra,4(sp)
811063dc:	df000017 	ldw	fp,0(sp)
811063e0:	dec00204 	addi	sp,sp,8
811063e4:	f800283a 	ret

811063e8 <vRmapCh3IrqFlagClrWriteCmd>:

void vRmapCh3IrqFlagClrWriteCmd(void) {
811063e8:	defffe04 	addi	sp,sp,-8
811063ec:	dfc00115 	stw	ra,4(sp)
811063f0:	df000015 	stw	fp,0(sp)
811063f4:	d839883a 	mov	fp,sp
	vRmapWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
811063f8:	01800044 	movi	r6,1
811063fc:	014004c4 	movi	r5,19
81106400:	01204834 	movhi	r4,33056
81106404:	210b0004 	addi	r4,r4,11264
81106408:	1108d080 	call	81108d08 <vRmapWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_RMAP_WRCMD_FLG_CLR_MSK);
}
8110640c:	0001883a 	nop
81106410:	e037883a 	mov	sp,fp
81106414:	dfc00117 	ldw	ra,4(sp)
81106418:	df000017 	ldw	fp,0(sp)
8110641c:	dec00204 	addi	sp,sp,8
81106420:	f800283a 	ret

81106424 <vRmapCh4IrqFlagClrWriteCmd>:

void vRmapCh4IrqFlagClrWriteCmd(void) {
81106424:	defffe04 	addi	sp,sp,-8
81106428:	dfc00115 	stw	ra,4(sp)
8110642c:	df000015 	stw	fp,0(sp)
81106430:	d839883a 	mov	fp,sp
	vRmapWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81106434:	01800044 	movi	r6,1
81106438:	014004c4 	movi	r5,19
8110643c:	01204834 	movhi	r4,33056
81106440:	210a0004 	addi	r4,r4,10240
81106444:	1108d080 	call	81108d08 <vRmapWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_RMAP_WRCMD_FLG_CLR_MSK);
}
81106448:	0001883a 	nop
8110644c:	e037883a 	mov	sp,fp
81106450:	dfc00117 	ldw	ra,4(sp)
81106454:	df000017 	ldw	fp,0(sp)
81106458:	dec00204 	addi	sp,sp,8
8110645c:	f800283a 	ret

81106460 <vRmapCh5IrqFlagClrWriteCmd>:

void vRmapCh5IrqFlagClrWriteCmd(void) {
81106460:	defffe04 	addi	sp,sp,-8
81106464:	dfc00115 	stw	ra,4(sp)
81106468:	df000015 	stw	fp,0(sp)
8110646c:	d839883a 	mov	fp,sp
	vRmapWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81106470:	01800044 	movi	r6,1
81106474:	014004c4 	movi	r5,19
81106478:	01204834 	movhi	r4,33056
8110647c:	210b0004 	addi	r4,r4,11264
81106480:	1108d080 	call	81108d08 <vRmapWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_RMAP_WRCMD_FLG_CLR_MSK);
}
81106484:	0001883a 	nop
81106488:	e037883a 	mov	sp,fp
8110648c:	dfc00117 	ldw	ra,4(sp)
81106490:	df000017 	ldw	fp,0(sp)
81106494:	dec00204 	addi	sp,sp,8
81106498:	f800283a 	ret

8110649c <vRmapCh6IrqFlagClrWriteCmd>:

void vRmapCh6IrqFlagClrWriteCmd(void) {
8110649c:	defffe04 	addi	sp,sp,-8
811064a0:	dfc00115 	stw	ra,4(sp)
811064a4:	df000015 	stw	fp,0(sp)
811064a8:	d839883a 	mov	fp,sp
	vRmapWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
811064ac:	01800044 	movi	r6,1
811064b0:	014004c4 	movi	r5,19
811064b4:	01204834 	movhi	r4,33056
811064b8:	210a0004 	addi	r4,r4,10240
811064bc:	1108d080 	call	81108d08 <vRmapWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_RMAP_WRCMD_FLG_CLR_MSK);
}
811064c0:	0001883a 	nop
811064c4:	e037883a 	mov	sp,fp
811064c8:	dfc00117 	ldw	ra,4(sp)
811064cc:	df000017 	ldw	fp,0(sp)
811064d0:	dec00204 	addi	sp,sp,8
811064d4:	f800283a 	ret

811064d8 <vRmapCh7IrqFlagClrWriteCmd>:

void vRmapCh7IrqFlagClrWriteCmd(void) {
811064d8:	defffe04 	addi	sp,sp,-8
811064dc:	dfc00115 	stw	ra,4(sp)
811064e0:	df000015 	stw	fp,0(sp)
811064e4:	d839883a 	mov	fp,sp
	vRmapWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
811064e8:	01800044 	movi	r6,1
811064ec:	014004c4 	movi	r5,19
811064f0:	01204834 	movhi	r4,33056
811064f4:	210b0004 	addi	r4,r4,11264
811064f8:	1108d080 	call	81108d08 <vRmapWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_RMAP_WRCMD_FLG_CLR_MSK);
}
811064fc:	0001883a 	nop
81106500:	e037883a 	mov	sp,fp
81106504:	dfc00117 	ldw	ra,4(sp)
81106508:	df000017 	ldw	fp,0(sp)
8110650c:	dec00204 	addi	sp,sp,8
81106510:	f800283a 	ret

81106514 <vRmapCh8IrqFlagClrWriteCmd>:

void vRmapCh8IrqFlagClrWriteCmd(void) {
81106514:	defffe04 	addi	sp,sp,-8
81106518:	dfc00115 	stw	ra,4(sp)
8110651c:	df000015 	stw	fp,0(sp)
81106520:	d839883a 	mov	fp,sp
	vRmapWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81106524:	01800044 	movi	r6,1
81106528:	014004c4 	movi	r5,19
8110652c:	01204834 	movhi	r4,33056
81106530:	210a0004 	addi	r4,r4,10240
81106534:	1108d080 	call	81108d08 <vRmapWriteReg>
	COMM_IRQ_FLAGS_CLR_REG_OFST, (alt_u32) COMM_IRQ_RMAP_WRCMD_FLG_CLR_MSK);
}
81106538:	0001883a 	nop
8110653c:	e037883a 	mov	sp,fp
81106540:	dfc00117 	ldw	ra,4(sp)
81106544:	df000017 	ldw	fp,0(sp)
81106548:	dec00204 	addi	sp,sp,8
8110654c:	f800283a 	ret

81106550 <bRmapCh1IrqFlagWriteCmd>:

bool bRmapCh1IrqFlagWriteCmd(void) {
81106550:	defffd04 	addi	sp,sp,-12
81106554:	dfc00215 	stw	ra,8(sp)
81106558:	df000115 	stw	fp,4(sp)
8110655c:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81106560:	01400484 	movi	r5,18
81106564:	01204834 	movhi	r4,33056
81106568:	210b0004 	addi	r4,r4,11264
8110656c:	1108d540 	call	81108d54 <uliRmapReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
81106570:	1080004c 	andi	r2,r2,1
}

bool bRmapCh1IrqFlagWriteCmd(void) {
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81106574:	10000326 	beq	r2,zero,81106584 <bRmapCh1IrqFlagWriteCmd+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
		bFlag = TRUE;
81106578:	00800044 	movi	r2,1
8110657c:	e0bfff15 	stw	r2,-4(fp)
81106580:	00000106 	br	81106588 <bRmapCh1IrqFlagWriteCmd+0x38>
	} else {
		bFlag = FALSE;
81106584:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81106588:	e0bfff17 	ldw	r2,-4(fp)
}
8110658c:	e037883a 	mov	sp,fp
81106590:	dfc00117 	ldw	ra,4(sp)
81106594:	df000017 	ldw	fp,0(sp)
81106598:	dec00204 	addi	sp,sp,8
8110659c:	f800283a 	ret

811065a0 <bRmapCh2IrqFlagWriteCmd>:

bool bRmapCh2IrqFlagWriteCmd(void) {
811065a0:	defffd04 	addi	sp,sp,-12
811065a4:	dfc00215 	stw	ra,8(sp)
811065a8:	df000115 	stw	fp,4(sp)
811065ac:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811065b0:	01400484 	movi	r5,18
811065b4:	01204834 	movhi	r4,33056
811065b8:	210a0004 	addi	r4,r4,10240
811065bc:	1108d540 	call	81108d54 <uliRmapReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
811065c0:	1080004c 	andi	r2,r2,1
}

bool bRmapCh2IrqFlagWriteCmd(void) {
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811065c4:	10000326 	beq	r2,zero,811065d4 <bRmapCh2IrqFlagWriteCmd+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
		bFlag = TRUE;
811065c8:	00800044 	movi	r2,1
811065cc:	e0bfff15 	stw	r2,-4(fp)
811065d0:	00000106 	br	811065d8 <bRmapCh2IrqFlagWriteCmd+0x38>
	} else {
		bFlag = FALSE;
811065d4:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811065d8:	e0bfff17 	ldw	r2,-4(fp)
}
811065dc:	e037883a 	mov	sp,fp
811065e0:	dfc00117 	ldw	ra,4(sp)
811065e4:	df000017 	ldw	fp,0(sp)
811065e8:	dec00204 	addi	sp,sp,8
811065ec:	f800283a 	ret

811065f0 <bRmapCh3IrqFlagWriteCmd>:

bool bRmapCh3IrqFlagWriteCmd(void) {
811065f0:	defffd04 	addi	sp,sp,-12
811065f4:	dfc00215 	stw	ra,8(sp)
811065f8:	df000115 	stw	fp,4(sp)
811065fc:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81106600:	01400484 	movi	r5,18
81106604:	01204834 	movhi	r4,33056
81106608:	210b0004 	addi	r4,r4,11264
8110660c:	1108d540 	call	81108d54 <uliRmapReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
81106610:	1080004c 	andi	r2,r2,1
}

bool bRmapCh3IrqFlagWriteCmd(void) {
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81106614:	10000326 	beq	r2,zero,81106624 <bRmapCh3IrqFlagWriteCmd+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
		bFlag = TRUE;
81106618:	00800044 	movi	r2,1
8110661c:	e0bfff15 	stw	r2,-4(fp)
81106620:	00000106 	br	81106628 <bRmapCh3IrqFlagWriteCmd+0x38>
	} else {
		bFlag = FALSE;
81106624:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81106628:	e0bfff17 	ldw	r2,-4(fp)
}
8110662c:	e037883a 	mov	sp,fp
81106630:	dfc00117 	ldw	ra,4(sp)
81106634:	df000017 	ldw	fp,0(sp)
81106638:	dec00204 	addi	sp,sp,8
8110663c:	f800283a 	ret

81106640 <bRmapCh4IrqFlagWriteCmd>:

bool bRmapCh4IrqFlagWriteCmd(void) {
81106640:	defffd04 	addi	sp,sp,-12
81106644:	dfc00215 	stw	ra,8(sp)
81106648:	df000115 	stw	fp,4(sp)
8110664c:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81106650:	01400484 	movi	r5,18
81106654:	01204834 	movhi	r4,33056
81106658:	210a0004 	addi	r4,r4,10240
8110665c:	1108d540 	call	81108d54 <uliRmapReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
81106660:	1080004c 	andi	r2,r2,1
}

bool bRmapCh4IrqFlagWriteCmd(void) {
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81106664:	10000326 	beq	r2,zero,81106674 <bRmapCh4IrqFlagWriteCmd+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
		bFlag = TRUE;
81106668:	00800044 	movi	r2,1
8110666c:	e0bfff15 	stw	r2,-4(fp)
81106670:	00000106 	br	81106678 <bRmapCh4IrqFlagWriteCmd+0x38>
	} else {
		bFlag = FALSE;
81106674:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81106678:	e0bfff17 	ldw	r2,-4(fp)
}
8110667c:	e037883a 	mov	sp,fp
81106680:	dfc00117 	ldw	ra,4(sp)
81106684:	df000017 	ldw	fp,0(sp)
81106688:	dec00204 	addi	sp,sp,8
8110668c:	f800283a 	ret

81106690 <bRmapCh5IrqFlagWriteCmd>:

bool bRmapCh5IrqFlagWriteCmd(void) {
81106690:	defffd04 	addi	sp,sp,-12
81106694:	dfc00215 	stw	ra,8(sp)
81106698:	df000115 	stw	fp,4(sp)
8110669c:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
811066a0:	01400484 	movi	r5,18
811066a4:	01204834 	movhi	r4,33056
811066a8:	210b0004 	addi	r4,r4,11264
811066ac:	1108d540 	call	81108d54 <uliRmapReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
811066b0:	1080004c 	andi	r2,r2,1
}

bool bRmapCh5IrqFlagWriteCmd(void) {
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
811066b4:	10000326 	beq	r2,zero,811066c4 <bRmapCh5IrqFlagWriteCmd+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
		bFlag = TRUE;
811066b8:	00800044 	movi	r2,1
811066bc:	e0bfff15 	stw	r2,-4(fp)
811066c0:	00000106 	br	811066c8 <bRmapCh5IrqFlagWriteCmd+0x38>
	} else {
		bFlag = FALSE;
811066c4:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811066c8:	e0bfff17 	ldw	r2,-4(fp)
}
811066cc:	e037883a 	mov	sp,fp
811066d0:	dfc00117 	ldw	ra,4(sp)
811066d4:	df000017 	ldw	fp,0(sp)
811066d8:	dec00204 	addi	sp,sp,8
811066dc:	f800283a 	ret

811066e0 <bRmapCh6IrqFlagWriteCmd>:

bool bRmapCh6IrqFlagWriteCmd(void) {
811066e0:	defffd04 	addi	sp,sp,-12
811066e4:	dfc00215 	stw	ra,8(sp)
811066e8:	df000115 	stw	fp,4(sp)
811066ec:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
811066f0:	01400484 	movi	r5,18
811066f4:	01204834 	movhi	r4,33056
811066f8:	210a0004 	addi	r4,r4,10240
811066fc:	1108d540 	call	81108d54 <uliRmapReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
81106700:	1080004c 	andi	r2,r2,1
}

bool bRmapCh6IrqFlagWriteCmd(void) {
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81106704:	10000326 	beq	r2,zero,81106714 <bRmapCh6IrqFlagWriteCmd+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
		bFlag = TRUE;
81106708:	00800044 	movi	r2,1
8110670c:	e0bfff15 	stw	r2,-4(fp)
81106710:	00000106 	br	81106718 <bRmapCh6IrqFlagWriteCmd+0x38>
	} else {
		bFlag = FALSE;
81106714:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81106718:	e0bfff17 	ldw	r2,-4(fp)
}
8110671c:	e037883a 	mov	sp,fp
81106720:	dfc00117 	ldw	ra,4(sp)
81106724:	df000017 	ldw	fp,0(sp)
81106728:	dec00204 	addi	sp,sp,8
8110672c:	f800283a 	ret

81106730 <bRmapCh7IrqFlagWriteCmd>:

bool bRmapCh7IrqFlagWriteCmd(void) {
81106730:	defffd04 	addi	sp,sp,-12
81106734:	dfc00215 	stw	ra,8(sp)
81106738:	df000115 	stw	fp,4(sp)
8110673c:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81106740:	01400484 	movi	r5,18
81106744:	01204834 	movhi	r4,33056
81106748:	210b0004 	addi	r4,r4,11264
8110674c:	1108d540 	call	81108d54 <uliRmapReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
81106750:	1080004c 	andi	r2,r2,1
}

bool bRmapCh7IrqFlagWriteCmd(void) {
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81106754:	10000326 	beq	r2,zero,81106764 <bRmapCh7IrqFlagWriteCmd+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
		bFlag = TRUE;
81106758:	00800044 	movi	r2,1
8110675c:	e0bfff15 	stw	r2,-4(fp)
81106760:	00000106 	br	81106768 <bRmapCh7IrqFlagWriteCmd+0x38>
	} else {
		bFlag = FALSE;
81106764:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81106768:	e0bfff17 	ldw	r2,-4(fp)
}
8110676c:	e037883a 	mov	sp,fp
81106770:	dfc00117 	ldw	ra,4(sp)
81106774:	df000017 	ldw	fp,0(sp)
81106778:	dec00204 	addi	sp,sp,8
8110677c:	f800283a 	ret

81106780 <bRmapCh8IrqFlagWriteCmd>:

bool bRmapCh8IrqFlagWriteCmd(void) {
81106780:	defffd04 	addi	sp,sp,-12
81106784:	dfc00215 	stw	ra,8(sp)
81106788:	df000115 	stw	fp,4(sp)
8110678c:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81106790:	01400484 	movi	r5,18
81106794:	01204834 	movhi	r4,33056
81106798:	210a0004 	addi	r4,r4,10240
8110679c:	1108d540 	call	81108d54 <uliRmapReadReg>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
811067a0:	1080004c 	andi	r2,r2,1
}

bool bRmapCh8IrqFlagWriteCmd(void) {
	bool bFlag;

	if (uliRmapReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
811067a4:	10000326 	beq	r2,zero,811067b4 <bRmapCh8IrqFlagWriteCmd+0x34>
	COMM_IRQ_FLAGS_REG_OFST) & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
		bFlag = TRUE;
811067a8:	00800044 	movi	r2,1
811067ac:	e0bfff15 	stw	r2,-4(fp)
811067b0:	00000106 	br	811067b8 <bRmapCh8IrqFlagWriteCmd+0x38>
	} else {
		bFlag = FALSE;
811067b4:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811067b8:	e0bfff17 	ldw	r2,-4(fp)
}
811067bc:	e037883a 	mov	sp,fp
811067c0:	dfc00117 	ldw	ra,4(sp)
811067c4:	df000017 	ldw	fp,0(sp)
811067c8:	dec00204 	addi	sp,sp,8
811067cc:	f800283a 	ret

811067d0 <uliRmapCh1WriteCmdAddress>:

alt_u32 uliRmapCh1WriteCmdAddress(void) {
811067d0:	defffd04 	addi	sp,sp,-12
811067d4:	dfc00215 	stw	ra,8(sp)
811067d8:	df000115 	stw	fp,4(sp)
811067dc:	df000104 	addi	fp,sp,4
	alt_u32 uliWriteAddr;

	uliWriteAddr = uliRmapReadReg((alt_u32*)
811067e0:	01400184 	movi	r5,6
811067e4:	01204834 	movhi	r4,33056
811067e8:	210b0004 	addi	r4,r4,11264
811067ec:	1108d540 	call	81108d54 <uliRmapReadReg>
811067f0:	e0bfff15 	stw	r2,-4(fp)
	COMM_CHANNEL_1_BASE_ADDR, COMM_RMAP_LST_WR_ADDR_REG_OFST);

	uliWriteAddr = uliConvRmapCfgAddr(uliWriteAddr);
811067f4:	e13fff17 	ldw	r4,-4(fp)
811067f8:	1108d9c0 	call	81108d9c <uliConvRmapCfgAddr>
811067fc:	e0bfff15 	stw	r2,-4(fp)

	return uliWriteAddr;
81106800:	e0bfff17 	ldw	r2,-4(fp)
}
81106804:	e037883a 	mov	sp,fp
81106808:	dfc00117 	ldw	ra,4(sp)
8110680c:	df000017 	ldw	fp,0(sp)
81106810:	dec00204 	addi	sp,sp,8
81106814:	f800283a 	ret

81106818 <uliRmapCh2WriteCmdAddress>:

alt_u32 uliRmapCh2WriteCmdAddress(void) {
81106818:	defffd04 	addi	sp,sp,-12
8110681c:	dfc00215 	stw	ra,8(sp)
81106820:	df000115 	stw	fp,4(sp)
81106824:	df000104 	addi	fp,sp,4
	alt_u32 uliWriteAddr;

	uliWriteAddr = uliRmapReadReg((alt_u32*)
81106828:	01400184 	movi	r5,6
8110682c:	01204834 	movhi	r4,33056
81106830:	210a0004 	addi	r4,r4,10240
81106834:	1108d540 	call	81108d54 <uliRmapReadReg>
81106838:	e0bfff15 	stw	r2,-4(fp)
	COMM_CHANNEL_2_BASE_ADDR, COMM_RMAP_LST_WR_ADDR_REG_OFST);

	uliWriteAddr = uliConvRmapCfgAddr(uliWriteAddr);
8110683c:	e13fff17 	ldw	r4,-4(fp)
81106840:	1108d9c0 	call	81108d9c <uliConvRmapCfgAddr>
81106844:	e0bfff15 	stw	r2,-4(fp)

	return uliWriteAddr;
81106848:	e0bfff17 	ldw	r2,-4(fp)
}
8110684c:	e037883a 	mov	sp,fp
81106850:	dfc00117 	ldw	ra,4(sp)
81106854:	df000017 	ldw	fp,0(sp)
81106858:	dec00204 	addi	sp,sp,8
8110685c:	f800283a 	ret

81106860 <uliRmapCh3WriteCmdAddress>:

alt_u32 uliRmapCh3WriteCmdAddress(void) {
81106860:	defffd04 	addi	sp,sp,-12
81106864:	dfc00215 	stw	ra,8(sp)
81106868:	df000115 	stw	fp,4(sp)
8110686c:	df000104 	addi	fp,sp,4
	alt_u32 uliWriteAddr;

	uliWriteAddr = uliRmapReadReg((alt_u32*)
81106870:	01400184 	movi	r5,6
81106874:	01204834 	movhi	r4,33056
81106878:	210b0004 	addi	r4,r4,11264
8110687c:	1108d540 	call	81108d54 <uliRmapReadReg>
81106880:	e0bfff15 	stw	r2,-4(fp)
	COMM_CHANNEL_3_BASE_ADDR, COMM_RMAP_LST_WR_ADDR_REG_OFST);

	uliWriteAddr = uliConvRmapCfgAddr(uliWriteAddr);
81106884:	e13fff17 	ldw	r4,-4(fp)
81106888:	1108d9c0 	call	81108d9c <uliConvRmapCfgAddr>
8110688c:	e0bfff15 	stw	r2,-4(fp)

	return uliWriteAddr;
81106890:	e0bfff17 	ldw	r2,-4(fp)
}
81106894:	e037883a 	mov	sp,fp
81106898:	dfc00117 	ldw	ra,4(sp)
8110689c:	df000017 	ldw	fp,0(sp)
811068a0:	dec00204 	addi	sp,sp,8
811068a4:	f800283a 	ret

811068a8 <uliRmapCh4WriteCmdAddress>:

alt_u32 uliRmapCh4WriteCmdAddress(void) {
811068a8:	defffd04 	addi	sp,sp,-12
811068ac:	dfc00215 	stw	ra,8(sp)
811068b0:	df000115 	stw	fp,4(sp)
811068b4:	df000104 	addi	fp,sp,4
	alt_u32 uliWriteAddr;

	uliWriteAddr = uliRmapReadReg((alt_u32*)
811068b8:	01400184 	movi	r5,6
811068bc:	01204834 	movhi	r4,33056
811068c0:	210a0004 	addi	r4,r4,10240
811068c4:	1108d540 	call	81108d54 <uliRmapReadReg>
811068c8:	e0bfff15 	stw	r2,-4(fp)
	COMM_CHANNEL_4_BASE_ADDR, COMM_RMAP_LST_WR_ADDR_REG_OFST);

	uliWriteAddr = uliConvRmapCfgAddr(uliWriteAddr);
811068cc:	e13fff17 	ldw	r4,-4(fp)
811068d0:	1108d9c0 	call	81108d9c <uliConvRmapCfgAddr>
811068d4:	e0bfff15 	stw	r2,-4(fp)

	return uliWriteAddr;
811068d8:	e0bfff17 	ldw	r2,-4(fp)
}
811068dc:	e037883a 	mov	sp,fp
811068e0:	dfc00117 	ldw	ra,4(sp)
811068e4:	df000017 	ldw	fp,0(sp)
811068e8:	dec00204 	addi	sp,sp,8
811068ec:	f800283a 	ret

811068f0 <uliRmapCh5WriteCmdAddress>:

alt_u32 uliRmapCh5WriteCmdAddress(void) {
811068f0:	defffd04 	addi	sp,sp,-12
811068f4:	dfc00215 	stw	ra,8(sp)
811068f8:	df000115 	stw	fp,4(sp)
811068fc:	df000104 	addi	fp,sp,4
	alt_u32 uliWriteAddr;

	uliWriteAddr = uliRmapReadReg((alt_u32*)
81106900:	01400184 	movi	r5,6
81106904:	01204834 	movhi	r4,33056
81106908:	210b0004 	addi	r4,r4,11264
8110690c:	1108d540 	call	81108d54 <uliRmapReadReg>
81106910:	e0bfff15 	stw	r2,-4(fp)
	COMM_CHANNEL_5_BASE_ADDR, COMM_RMAP_LST_WR_ADDR_REG_OFST);

	uliWriteAddr = uliConvRmapCfgAddr(uliWriteAddr);
81106914:	e13fff17 	ldw	r4,-4(fp)
81106918:	1108d9c0 	call	81108d9c <uliConvRmapCfgAddr>
8110691c:	e0bfff15 	stw	r2,-4(fp)

	return uliWriteAddr;
81106920:	e0bfff17 	ldw	r2,-4(fp)
}
81106924:	e037883a 	mov	sp,fp
81106928:	dfc00117 	ldw	ra,4(sp)
8110692c:	df000017 	ldw	fp,0(sp)
81106930:	dec00204 	addi	sp,sp,8
81106934:	f800283a 	ret

81106938 <uliRmapCh6WriteCmdAddress>:

alt_u32 uliRmapCh6WriteCmdAddress(void) {
81106938:	defffd04 	addi	sp,sp,-12
8110693c:	dfc00215 	stw	ra,8(sp)
81106940:	df000115 	stw	fp,4(sp)
81106944:	df000104 	addi	fp,sp,4
	alt_u32 uliWriteAddr;

	uliWriteAddr = uliRmapReadReg((alt_u32*)
81106948:	01400184 	movi	r5,6
8110694c:	01204834 	movhi	r4,33056
81106950:	210a0004 	addi	r4,r4,10240
81106954:	1108d540 	call	81108d54 <uliRmapReadReg>
81106958:	e0bfff15 	stw	r2,-4(fp)
	COMM_CHANNEL_6_BASE_ADDR, COMM_RMAP_LST_WR_ADDR_REG_OFST);

	uliWriteAddr = uliConvRmapCfgAddr(uliWriteAddr);
8110695c:	e13fff17 	ldw	r4,-4(fp)
81106960:	1108d9c0 	call	81108d9c <uliConvRmapCfgAddr>
81106964:	e0bfff15 	stw	r2,-4(fp)

	return uliWriteAddr;
81106968:	e0bfff17 	ldw	r2,-4(fp)
}
8110696c:	e037883a 	mov	sp,fp
81106970:	dfc00117 	ldw	ra,4(sp)
81106974:	df000017 	ldw	fp,0(sp)
81106978:	dec00204 	addi	sp,sp,8
8110697c:	f800283a 	ret

81106980 <uliRmapCh7WriteCmdAddress>:

alt_u32 uliRmapCh7WriteCmdAddress(void) {
81106980:	defffd04 	addi	sp,sp,-12
81106984:	dfc00215 	stw	ra,8(sp)
81106988:	df000115 	stw	fp,4(sp)
8110698c:	df000104 	addi	fp,sp,4
	alt_u32 uliWriteAddr;

	uliWriteAddr = uliRmapReadReg((alt_u32*)
81106990:	01400184 	movi	r5,6
81106994:	01204834 	movhi	r4,33056
81106998:	210b0004 	addi	r4,r4,11264
8110699c:	1108d540 	call	81108d54 <uliRmapReadReg>
811069a0:	e0bfff15 	stw	r2,-4(fp)
	COMM_CHANNEL_7_BASE_ADDR, COMM_RMAP_LST_WR_ADDR_REG_OFST);

	uliWriteAddr = uliConvRmapCfgAddr(uliWriteAddr);
811069a4:	e13fff17 	ldw	r4,-4(fp)
811069a8:	1108d9c0 	call	81108d9c <uliConvRmapCfgAddr>
811069ac:	e0bfff15 	stw	r2,-4(fp)

	return uliWriteAddr;
811069b0:	e0bfff17 	ldw	r2,-4(fp)
}
811069b4:	e037883a 	mov	sp,fp
811069b8:	dfc00117 	ldw	ra,4(sp)
811069bc:	df000017 	ldw	fp,0(sp)
811069c0:	dec00204 	addi	sp,sp,8
811069c4:	f800283a 	ret

811069c8 <uliRmapCh8WriteCmdAddress>:

alt_u32 uliRmapCh8WriteCmdAddress(void) {
811069c8:	defffd04 	addi	sp,sp,-12
811069cc:	dfc00215 	stw	ra,8(sp)
811069d0:	df000115 	stw	fp,4(sp)
811069d4:	df000104 	addi	fp,sp,4
	alt_u32 uliWriteAddr;

	uliWriteAddr = uliRmapReadReg((alt_u32*)
811069d8:	01400184 	movi	r5,6
811069dc:	01204834 	movhi	r4,33056
811069e0:	210a0004 	addi	r4,r4,10240
811069e4:	1108d540 	call	81108d54 <uliRmapReadReg>
811069e8:	e0bfff15 	stw	r2,-4(fp)
	COMM_CHANNEL_8_BASE_ADDR, COMM_RMAP_LST_WR_ADDR_REG_OFST);

	uliWriteAddr = uliConvRmapCfgAddr(uliWriteAddr);
811069ec:	e13fff17 	ldw	r4,-4(fp)
811069f0:	1108d9c0 	call	81108d9c <uliConvRmapCfgAddr>
811069f4:	e0bfff15 	stw	r2,-4(fp)

	return uliWriteAddr;
811069f8:	e0bfff17 	ldw	r2,-4(fp)
}
811069fc:	e037883a 	mov	sp,fp
81106a00:	dfc00117 	ldw	ra,4(sp)
81106a04:	df000017 	ldw	fp,0(sp)
81106a08:	dec00204 	addi	sp,sp,8
81106a0c:	f800283a 	ret

81106a10 <vRmapInitIrq>:

void vRmapInitIrq(alt_u8 ucCommCh) {
81106a10:	defffc04 	addi	sp,sp,-16
81106a14:	dfc00315 	stw	ra,12(sp)
81106a18:	df000215 	stw	fp,8(sp)
81106a1c:	df000204 	addi	fp,sp,8
81106a20:	2005883a 	mov	r2,r4
81106a24:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81106a28:	e0bfff03 	ldbu	r2,-4(fp)
81106a2c:	10c00228 	cmpgeui	r3,r2,8
81106a30:	18004e1e 	bne	r3,zero,81106b6c <vRmapInitIrq+0x15c>
81106a34:	100690ba 	slli	r3,r2,2
81106a38:	00a04434 	movhi	r2,33040
81106a3c:	109a9304 	addi	r2,r2,27212
81106a40:	1885883a 	add	r2,r3,r2
81106a44:	10800017 	ldw	r2,0(r2)
81106a48:	1000683a 	jmp	r2
81106a4c:	81106a6c 	andhi	r4,r16,16809
81106a50:	81106a8c 	andi	r4,r16,16810
81106a54:	81106aac 	andhi	r4,r16,16810
81106a58:	81106acc 	andi	r4,r16,16811
81106a5c:	81106aec 	andhi	r4,r16,16811
81106a60:	81106b0c 	andi	r4,r16,16812
81106a64:	81106b2c 	andhi	r4,r16,16812
81106a68:	81106b4c 	andi	r4,r16,16813
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
81106a6c:	d0a02404 	addi	r2,gp,-32624
81106a70:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_1_RMAP_IRQ, pvHoldContext, vRmapCh1HandleIrq);
81106a74:	01a04434 	movhi	r6,33040
81106a78:	31986c04 	addi	r6,r6,25008
81106a7c:	e17ffe17 	ldw	r5,-8(fp)
81106a80:	010005c4 	movi	r4,23
81106a84:	11205200 	call	81120520 <alt_irq_register>
		break;
81106a88:	00003806 	br	81106b6c <vRmapInitIrq+0x15c>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
81106a8c:	d0a02504 	addi	r2,gp,-32620
81106a90:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_2_RMAP_IRQ, pvHoldContext, vRmapCh2HandleIrq);
81106a94:	01a04434 	movhi	r6,33040
81106a98:	31987a04 	addi	r6,r6,25064
81106a9c:	e17ffe17 	ldw	r5,-8(fp)
81106aa0:	01000544 	movi	r4,21
81106aa4:	11205200 	call	81120520 <alt_irq_register>
		break;
81106aa8:	00003006 	br	81106b6c <vRmapInitIrq+0x15c>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
81106aac:	d0a02604 	addi	r2,gp,-32616
81106ab0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_3_RMAP_IRQ, pvHoldContext, vRmapCh3HandleIrq);
81106ab4:	01a04434 	movhi	r6,33040
81106ab8:	31988804 	addi	r6,r6,25120
81106abc:	e17ffe17 	ldw	r5,-8(fp)
81106ac0:	010004c4 	movi	r4,19
81106ac4:	11205200 	call	81120520 <alt_irq_register>
		break;
81106ac8:	00002806 	br	81106b6c <vRmapInitIrq+0x15c>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
81106acc:	d0a02704 	addi	r2,gp,-32612
81106ad0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_4_RMAP_IRQ, pvHoldContext, vRmapCh4HandleIrq);
81106ad4:	01a04434 	movhi	r6,33040
81106ad8:	31989604 	addi	r6,r6,25176
81106adc:	e17ffe17 	ldw	r5,-8(fp)
81106ae0:	01000444 	movi	r4,17
81106ae4:	11205200 	call	81120520 <alt_irq_register>
		break;
81106ae8:	00002006 	br	81106b6c <vRmapInitIrq+0x15c>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
81106aec:	d0a02804 	addi	r2,gp,-32608
81106af0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_5_RMAP_IRQ, pvHoldContext, vRmapCh5HandleIrq);
81106af4:	01a04434 	movhi	r6,33040
81106af8:	3198a404 	addi	r6,r6,25232
81106afc:	e17ffe17 	ldw	r5,-8(fp)
81106b00:	01000244 	movi	r4,9
81106b04:	11205200 	call	81120520 <alt_irq_register>
		break;
81106b08:	00001806 	br	81106b6c <vRmapInitIrq+0x15c>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
81106b0c:	d0a02904 	addi	r2,gp,-32604
81106b10:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_6_RMAP_IRQ, pvHoldContext, vRmapCh6HandleIrq);
81106b14:	01a04434 	movhi	r6,33040
81106b18:	3198b204 	addi	r6,r6,25288
81106b1c:	e17ffe17 	ldw	r5,-8(fp)
81106b20:	010001c4 	movi	r4,7
81106b24:	11205200 	call	81120520 <alt_irq_register>
		break;
81106b28:	00001006 	br	81106b6c <vRmapInitIrq+0x15c>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
81106b2c:	d0a02a04 	addi	r2,gp,-32600
81106b30:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_7_RMAP_IRQ, pvHoldContext, vRmapCh7HandleIrq);
81106b34:	01a04434 	movhi	r6,33040
81106b38:	3198c004 	addi	r6,r6,25344
81106b3c:	e17ffe17 	ldw	r5,-8(fp)
81106b40:	01000104 	movi	r4,4
81106b44:	11205200 	call	81120520 <alt_irq_register>
		break;
81106b48:	00000806 	br	81106b6c <vRmapInitIrq+0x15c>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
81106b4c:	d0a02b04 	addi	r2,gp,-32596
81106b50:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_CH_8_RMAP_IRQ, pvHoldContext, vRmapCh8HandleIrq);
81106b54:	01a04434 	movhi	r6,33040
81106b58:	3198ce04 	addi	r6,r6,25400
81106b5c:	e17ffe17 	ldw	r5,-8(fp)
81106b60:	010000c4 	movi	r4,3
81106b64:	11205200 	call	81120520 <alt_irq_register>
		break;
81106b68:	0001883a 	nop
	}
}
81106b6c:	0001883a 	nop
81106b70:	e037883a 	mov	sp,fp
81106b74:	dfc00117 	ldw	ra,4(sp)
81106b78:	df000017 	ldw	fp,0(sp)
81106b7c:	dec00204 	addi	sp,sp,8
81106b80:	f800283a 	ret

81106b84 <bRmapSetIrqControl>:

bool bRmapSetIrqControl(TRmapChannel *pxRmapCh) {
81106b84:	defffb04 	addi	sp,sp,-20
81106b88:	dfc00415 	stw	ra,16(sp)
81106b8c:	df000315 	stw	fp,12(sp)
81106b90:	df000304 	addi	fp,sp,12
81106b94:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81106b98:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81106b9c:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
81106ba0:	e0bfff17 	ldw	r2,-4(fp)
81106ba4:	10001926 	beq	r2,zero,81106c0c <bRmapSetIrqControl+0x88>
		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81106ba8:	e0bfff17 	ldw	r2,-4(fp)
81106bac:	10800017 	ldw	r2,0(r2)
81106bb0:	01400444 	movi	r5,17
81106bb4:	1009883a 	mov	r4,r2
81106bb8:	1108d540 	call	81108d54 <uliRmapReadReg>
81106bbc:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CONTROL_REG_OFST);

		if (pxRmapCh->xRmapIrqControl.bWriteCmdEn) {
81106bc0:	e0bfff17 	ldw	r2,-4(fp)
81106bc4:	10801017 	ldw	r2,64(r2)
81106bc8:	10000426 	beq	r2,zero,81106bdc <bRmapSetIrqControl+0x58>
			uliReg |= COMM_IRQ_RMAP_WRCMD_EN_MSK;
81106bcc:	e0bffe17 	ldw	r2,-8(fp)
81106bd0:	10800054 	ori	r2,r2,1
81106bd4:	e0bffe15 	stw	r2,-8(fp)
81106bd8:	00000406 	br	81106bec <bRmapSetIrqControl+0x68>
		} else {
			uliReg &= (~COMM_IRQ_RMAP_WRCMD_EN_MSK);
81106bdc:	e0fffe17 	ldw	r3,-8(fp)
81106be0:	00bfff84 	movi	r2,-2
81106be4:	1884703a 	and	r2,r3,r2
81106be8:	e0bffe15 	stw	r2,-8(fp)
		}

		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_IRQ_CONTROL_REG_OFST,
81106bec:	e0bfff17 	ldw	r2,-4(fp)
81106bf0:	10800017 	ldw	r2,0(r2)
81106bf4:	e1bffe17 	ldw	r6,-8(fp)
81106bf8:	01400444 	movi	r5,17
81106bfc:	1009883a 	mov	r4,r2
81106c00:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);
		bStatus = TRUE;
81106c04:	00800044 	movi	r2,1
81106c08:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81106c0c:	e0bffd17 	ldw	r2,-12(fp)
}
81106c10:	e037883a 	mov	sp,fp
81106c14:	dfc00117 	ldw	ra,4(sp)
81106c18:	df000017 	ldw	fp,0(sp)
81106c1c:	dec00204 	addi	sp,sp,8
81106c20:	f800283a 	ret

81106c24 <bRmapGetIrqControl>:

bool bRmapGetIrqControl(TRmapChannel *pxRmapCh) {
81106c24:	defffb04 	addi	sp,sp,-20
81106c28:	dfc00415 	stw	ra,16(sp)
81106c2c:	df000315 	stw	fp,12(sp)
81106c30:	df000304 	addi	fp,sp,12
81106c34:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81106c38:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81106c3c:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
81106c40:	e0bfff17 	ldw	r2,-4(fp)
81106c44:	10001126 	beq	r2,zero,81106c8c <bRmapGetIrqControl+0x68>
		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81106c48:	e0bfff17 	ldw	r2,-4(fp)
81106c4c:	10800017 	ldw	r2,0(r2)
81106c50:	01400444 	movi	r5,17
81106c54:	1009883a 	mov	r4,r2
81106c58:	1108d540 	call	81108d54 <uliRmapReadReg>
81106c5c:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CONTROL_REG_OFST);

		if (uliReg & COMM_IRQ_RMAP_WRCMD_EN_MSK) {
81106c60:	e0bffe17 	ldw	r2,-8(fp)
81106c64:	1080004c 	andi	r2,r2,1
81106c68:	10000426 	beq	r2,zero,81106c7c <bRmapGetIrqControl+0x58>
			pxRmapCh->xRmapIrqControl.bWriteCmdEn = TRUE;
81106c6c:	e0bfff17 	ldw	r2,-4(fp)
81106c70:	00c00044 	movi	r3,1
81106c74:	10c01015 	stw	r3,64(r2)
81106c78:	00000206 	br	81106c84 <bRmapGetIrqControl+0x60>
		} else {
			pxRmapCh->xRmapIrqControl.bWriteCmdEn = FALSE;
81106c7c:	e0bfff17 	ldw	r2,-4(fp)
81106c80:	10001015 	stw	zero,64(r2)
		}

		bStatus = TRUE;
81106c84:	00800044 	movi	r2,1
81106c88:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81106c8c:	e0bffd17 	ldw	r2,-12(fp)
}
81106c90:	e037883a 	mov	sp,fp
81106c94:	dfc00117 	ldw	ra,4(sp)
81106c98:	df000017 	ldw	fp,0(sp)
81106c9c:	dec00204 	addi	sp,sp,8
81106ca0:	f800283a 	ret

81106ca4 <bRmapGetIrqFlags>:

bool bRmapGetIrqFlags(TRmapChannel *pxRmapCh) {
81106ca4:	defffb04 	addi	sp,sp,-20
81106ca8:	dfc00415 	stw	ra,16(sp)
81106cac:	df000315 	stw	fp,12(sp)
81106cb0:	df000304 	addi	fp,sp,12
81106cb4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81106cb8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81106cbc:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
81106cc0:	e0bfff17 	ldw	r2,-4(fp)
81106cc4:	10001126 	beq	r2,zero,81106d0c <bRmapGetIrqFlags+0x68>
		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81106cc8:	e0bfff17 	ldw	r2,-4(fp)
81106ccc:	10800017 	ldw	r2,0(r2)
81106cd0:	01400484 	movi	r5,18
81106cd4:	1009883a 	mov	r4,r2
81106cd8:	1108d540 	call	81108d54 <uliRmapReadReg>
81106cdc:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAGS_REG_OFST);

		if (uliReg & COMM_IRQ_RMAP_WRCMD_FLG_MSK) {
81106ce0:	e0bffe17 	ldw	r2,-8(fp)
81106ce4:	1080004c 	andi	r2,r2,1
81106ce8:	10000426 	beq	r2,zero,81106cfc <bRmapGetIrqFlags+0x58>
			pxRmapCh->xRmapIrqFlag.bWriteCmdFlag = TRUE;
81106cec:	e0bfff17 	ldw	r2,-4(fp)
81106cf0:	00c00044 	movi	r3,1
81106cf4:	10c01115 	stw	r3,68(r2)
81106cf8:	00000206 	br	81106d04 <bRmapGetIrqFlags+0x60>
		} else {
			pxRmapCh->xRmapIrqFlag.bWriteCmdFlag = FALSE;
81106cfc:	e0bfff17 	ldw	r2,-4(fp)
81106d00:	10001115 	stw	zero,68(r2)
		}

		bStatus = TRUE;
81106d04:	00800044 	movi	r2,1
81106d08:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81106d0c:	e0bffd17 	ldw	r2,-12(fp)
}
81106d10:	e037883a 	mov	sp,fp
81106d14:	dfc00117 	ldw	ra,4(sp)
81106d18:	df000017 	ldw	fp,0(sp)
81106d1c:	dec00204 	addi	sp,sp,8
81106d20:	f800283a 	ret

81106d24 <bRmapSetCodecConfig>:

bool bRmapSetCodecConfig(TRmapChannel *pxRmapCh) {
81106d24:	defffb04 	addi	sp,sp,-20
81106d28:	dfc00415 	stw	ra,16(sp)
81106d2c:	df000315 	stw	fp,12(sp)
81106d30:	df000304 	addi	fp,sp,12
81106d34:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81106d38:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81106d3c:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
81106d40:	e0bfff17 	ldw	r2,-4(fp)
81106d44:	10002526 	beq	r2,zero,81106ddc <bRmapSetCodecConfig+0xb8>

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81106d48:	e0bfff17 	ldw	r2,-4(fp)
81106d4c:	10800017 	ldw	r2,0(r2)
81106d50:	01400104 	movi	r5,4
81106d54:	1009883a 	mov	r4,r2
81106d58:	1108d540 	call	81108d54 <uliRmapReadReg>
81106d5c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CODEC_CFG_REG_OFST);

		uliReg &= (~COMM_RMAP_TARGET_LOG_ADDR_MSK);
81106d60:	e0fffe17 	ldw	r3,-8(fp)
81106d64:	00bfc004 	movi	r2,-256
81106d68:	1884703a 	and	r2,r3,r2
81106d6c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_TARGET_LOG_ADDR_MSK
				& (alt_u32) (pxRmapCh->xRmapCodecConfig.ucLogicalAddress << 0));
81106d70:	e0bfff17 	ldw	r2,-4(fp)
81106d74:	10800143 	ldbu	r2,5(r2)
81106d78:	10803fcc 	andi	r2,r2,255

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_CODEC_CFG_REG_OFST);

		uliReg &= (~COMM_RMAP_TARGET_LOG_ADDR_MSK);
		uliReg |= (COMM_RMAP_TARGET_LOG_ADDR_MSK
81106d7c:	e0fffe17 	ldw	r3,-8(fp)
81106d80:	1884b03a 	or	r2,r3,r2
81106d84:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapCodecConfig.ucLogicalAddress << 0));
		uliReg &= (~COMM_RMAP_TARGET_KEY_MSK);
81106d88:	e0fffe17 	ldw	r3,-8(fp)
81106d8c:	00bffff4 	movhi	r2,65535
81106d90:	10803fc4 	addi	r2,r2,255
81106d94:	1884703a 	and	r2,r3,r2
81106d98:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_TARGET_KEY_MSK
				& (alt_u32) (pxRmapCh->xRmapCodecConfig.ucKey << 8));
81106d9c:	e0bfff17 	ldw	r2,-4(fp)
81106da0:	10800103 	ldbu	r2,4(r2)
81106da4:	10803fcc 	andi	r2,r2,255
81106da8:	1004923a 	slli	r2,r2,8
81106dac:	10bfffcc 	andi	r2,r2,65535

		uliReg &= (~COMM_RMAP_TARGET_LOG_ADDR_MSK);
		uliReg |= (COMM_RMAP_TARGET_LOG_ADDR_MSK
				& (alt_u32) (pxRmapCh->xRmapCodecConfig.ucLogicalAddress << 0));
		uliReg &= (~COMM_RMAP_TARGET_KEY_MSK);
		uliReg |= (COMM_RMAP_TARGET_KEY_MSK
81106db0:	e0fffe17 	ldw	r3,-8(fp)
81106db4:	1884b03a 	or	r2,r3,r2
81106db8:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapCodecConfig.ucKey << 8));

		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CODEC_CFG_REG_OFST,
81106dbc:	e0bfff17 	ldw	r2,-4(fp)
81106dc0:	10800017 	ldw	r2,0(r2)
81106dc4:	e1bffe17 	ldw	r6,-8(fp)
81106dc8:	01400104 	movi	r5,4
81106dcc:	1009883a 	mov	r4,r2
81106dd0:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		bStatus = TRUE;
81106dd4:	00800044 	movi	r2,1
81106dd8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81106ddc:	e0bffd17 	ldw	r2,-12(fp)
}
81106de0:	e037883a 	mov	sp,fp
81106de4:	dfc00117 	ldw	ra,4(sp)
81106de8:	df000017 	ldw	fp,0(sp)
81106dec:	dec00204 	addi	sp,sp,8
81106df0:	f800283a 	ret

81106df4 <bRmapGetCodecConfig>:

bool bRmapGetCodecConfig(TRmapChannel *pxRmapCh) {
81106df4:	defffb04 	addi	sp,sp,-20
81106df8:	dfc00415 	stw	ra,16(sp)
81106dfc:	df000315 	stw	fp,12(sp)
81106e00:	df000304 	addi	fp,sp,12
81106e04:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81106e08:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81106e0c:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
81106e10:	e0bfff17 	ldw	r2,-4(fp)
81106e14:	10001226 	beq	r2,zero,81106e60 <bRmapGetCodecConfig+0x6c>
		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81106e18:	e0bfff17 	ldw	r2,-4(fp)
81106e1c:	10800017 	ldw	r2,0(r2)
81106e20:	01400104 	movi	r5,4
81106e24:	1009883a 	mov	r4,r2
81106e28:	1108d540 	call	81108d54 <uliRmapReadReg>
81106e2c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CODEC_CFG_REG_OFST);

		pxRmapCh->xRmapCodecConfig.ucLogicalAddress = (alt_u8) ((uliReg
81106e30:	e0bffe17 	ldw	r2,-8(fp)
81106e34:	1007883a 	mov	r3,r2
81106e38:	e0bfff17 	ldw	r2,-4(fp)
81106e3c:	10c00145 	stb	r3,5(r2)
				& COMM_RMAP_TARGET_LOG_ADDR_MSK) >> 0);
		pxRmapCh->xRmapCodecConfig.ucKey = (alt_u8) ((uliReg
				& COMM_RMAP_TARGET_KEY_MSK) >> 8);
81106e40:	e0bffe17 	ldw	r2,-8(fp)
81106e44:	10bfc00c 	andi	r2,r2,65280
81106e48:	1004d23a 	srli	r2,r2,8
		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_CODEC_CFG_REG_OFST);

		pxRmapCh->xRmapCodecConfig.ucLogicalAddress = (alt_u8) ((uliReg
				& COMM_RMAP_TARGET_LOG_ADDR_MSK) >> 0);
		pxRmapCh->xRmapCodecConfig.ucKey = (alt_u8) ((uliReg
81106e4c:	1007883a 	mov	r3,r2
81106e50:	e0bfff17 	ldw	r2,-4(fp)
81106e54:	10c00105 	stb	r3,4(r2)
				& COMM_RMAP_TARGET_KEY_MSK) >> 8);

		bStatus = TRUE;
81106e58:	00800044 	movi	r2,1
81106e5c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81106e60:	e0bffd17 	ldw	r2,-12(fp)
}
81106e64:	e037883a 	mov	sp,fp
81106e68:	dfc00117 	ldw	ra,4(sp)
81106e6c:	df000017 	ldw	fp,0(sp)
81106e70:	dec00204 	addi	sp,sp,8
81106e74:	f800283a 	ret

81106e78 <bRmapGetCodecStatus>:

bool bRmapGetCodecStatus(TRmapChannel *pxRmapCh) {
81106e78:	defffb04 	addi	sp,sp,-20
81106e7c:	dfc00415 	stw	ra,16(sp)
81106e80:	df000315 	stw	fp,12(sp)
81106e84:	df000304 	addi	fp,sp,12
81106e88:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81106e8c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81106e90:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
81106e94:	e0bfff17 	ldw	r2,-4(fp)
81106e98:	10004726 	beq	r2,zero,81106fb8 <bRmapGetCodecStatus+0x140>
		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81106e9c:	e0bfff17 	ldw	r2,-4(fp)
81106ea0:	10800017 	ldw	r2,0(r2)
81106ea4:	01400144 	movi	r5,5
81106ea8:	1009883a 	mov	r4,r2
81106eac:	1108d540 	call	81108d54 <uliRmapReadReg>
81106eb0:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CODEC_STAT_REG_OFST);

		if (uliReg & COMM_RMAP_STAT_CMD_RECEIVED_MSK) {
81106eb4:	e0bffe17 	ldw	r2,-8(fp)
81106eb8:	1080004c 	andi	r2,r2,1
81106ebc:	10000426 	beq	r2,zero,81106ed0 <bRmapGetCodecStatus+0x58>
			pxRmapCh->xRmapCodecStatus.bCommandReceived = TRUE;
81106ec0:	e0bfff17 	ldw	r2,-4(fp)
81106ec4:	00c00044 	movi	r3,1
81106ec8:	10c00215 	stw	r3,8(r2)
81106ecc:	00000206 	br	81106ed8 <bRmapGetCodecStatus+0x60>
		} else {
			pxRmapCh->xRmapCodecStatus.bCommandReceived = FALSE;
81106ed0:	e0bfff17 	ldw	r2,-4(fp)
81106ed4:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_RMAP_STAT_WR_REQ_MSK) {
81106ed8:	e0bffe17 	ldw	r2,-8(fp)
81106edc:	1080008c 	andi	r2,r2,2
81106ee0:	10000426 	beq	r2,zero,81106ef4 <bRmapGetCodecStatus+0x7c>
			pxRmapCh->xRmapCodecStatus.bWriteRequested = TRUE;
81106ee4:	e0bfff17 	ldw	r2,-4(fp)
81106ee8:	00c00044 	movi	r3,1
81106eec:	10c00315 	stw	r3,12(r2)
81106ef0:	00000206 	br	81106efc <bRmapGetCodecStatus+0x84>
		} else {
			pxRmapCh->xRmapCodecStatus.bWriteRequested = FALSE;
81106ef4:	e0bfff17 	ldw	r2,-4(fp)
81106ef8:	10000315 	stw	zero,12(r2)
		}
		if (uliReg & COMM_RMAP_STAT_WR_AUTH_MSK) {
81106efc:	e0bffe17 	ldw	r2,-8(fp)
81106f00:	1080010c 	andi	r2,r2,4
81106f04:	10000426 	beq	r2,zero,81106f18 <bRmapGetCodecStatus+0xa0>
			pxRmapCh->xRmapCodecStatus.bWriteAuthorized = TRUE;
81106f08:	e0bfff17 	ldw	r2,-4(fp)
81106f0c:	00c00044 	movi	r3,1
81106f10:	10c00415 	stw	r3,16(r2)
81106f14:	00000206 	br	81106f20 <bRmapGetCodecStatus+0xa8>
		} else {
			pxRmapCh->xRmapCodecStatus.bWriteAuthorized = FALSE;
81106f18:	e0bfff17 	ldw	r2,-4(fp)
81106f1c:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_RMAP_STAT_RD_REQ_MSK) {
81106f20:	e0bffe17 	ldw	r2,-8(fp)
81106f24:	1080020c 	andi	r2,r2,8
81106f28:	10000426 	beq	r2,zero,81106f3c <bRmapGetCodecStatus+0xc4>
			pxRmapCh->xRmapCodecStatus.bReadRequested = TRUE;
81106f2c:	e0bfff17 	ldw	r2,-4(fp)
81106f30:	00c00044 	movi	r3,1
81106f34:	10c00515 	stw	r3,20(r2)
81106f38:	00000206 	br	81106f44 <bRmapGetCodecStatus+0xcc>
		} else {
			pxRmapCh->xRmapCodecStatus.bReadRequested = FALSE;
81106f3c:	e0bfff17 	ldw	r2,-4(fp)
81106f40:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_RMAP_STAT_RD_AUTH_MSK) {
81106f44:	e0bffe17 	ldw	r2,-8(fp)
81106f48:	1080040c 	andi	r2,r2,16
81106f4c:	10000426 	beq	r2,zero,81106f60 <bRmapGetCodecStatus+0xe8>
			pxRmapCh->xRmapCodecStatus.bReadAuthorized = TRUE;
81106f50:	e0bfff17 	ldw	r2,-4(fp)
81106f54:	00c00044 	movi	r3,1
81106f58:	10c00615 	stw	r3,24(r2)
81106f5c:	00000206 	br	81106f68 <bRmapGetCodecStatus+0xf0>
		} else {
			pxRmapCh->xRmapCodecStatus.bReadAuthorized = FALSE;
81106f60:	e0bfff17 	ldw	r2,-4(fp)
81106f64:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_RMAP_STAT_REPLY_SEND_MSK) {
81106f68:	e0bffe17 	ldw	r2,-8(fp)
81106f6c:	1080080c 	andi	r2,r2,32
81106f70:	10000426 	beq	r2,zero,81106f84 <bRmapGetCodecStatus+0x10c>
			pxRmapCh->xRmapCodecStatus.bReplySended = TRUE;
81106f74:	e0bfff17 	ldw	r2,-4(fp)
81106f78:	00c00044 	movi	r3,1
81106f7c:	10c00715 	stw	r3,28(r2)
81106f80:	00000206 	br	81106f8c <bRmapGetCodecStatus+0x114>
		} else {
			pxRmapCh->xRmapCodecStatus.bReplySended = FALSE;
81106f84:	e0bfff17 	ldw	r2,-4(fp)
81106f88:	10000715 	stw	zero,28(r2)
		}
		if (uliReg & COMM_RMAP_STAT_DISCARD_PKG_MSK) {
81106f8c:	e0bffe17 	ldw	r2,-8(fp)
81106f90:	1080100c 	andi	r2,r2,64
81106f94:	10000426 	beq	r2,zero,81106fa8 <bRmapGetCodecStatus+0x130>
			pxRmapCh->xRmapCodecStatus.bDiscardedPackage = TRUE;
81106f98:	e0bfff17 	ldw	r2,-4(fp)
81106f9c:	00c00044 	movi	r3,1
81106fa0:	10c00815 	stw	r3,32(r2)
81106fa4:	00000206 	br	81106fb0 <bRmapGetCodecStatus+0x138>
		} else {
			pxRmapCh->xRmapCodecStatus.bCommandReceived = FALSE;
81106fa8:	e0bfff17 	ldw	r2,-4(fp)
81106fac:	10000215 	stw	zero,8(r2)
		}

		bStatus = TRUE;
81106fb0:	00800044 	movi	r2,1
81106fb4:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81106fb8:	e0bffd17 	ldw	r2,-12(fp)
}
81106fbc:	e037883a 	mov	sp,fp
81106fc0:	dfc00117 	ldw	ra,4(sp)
81106fc4:	df000017 	ldw	fp,0(sp)
81106fc8:	dec00204 	addi	sp,sp,8
81106fcc:	f800283a 	ret

81106fd0 <bRmapGetCodecError>:

bool bRmapGetCodecError(TRmapChannel *pxRmapCh) {
81106fd0:	defffb04 	addi	sp,sp,-20
81106fd4:	dfc00415 	stw	ra,16(sp)
81106fd8:	df000315 	stw	fp,12(sp)
81106fdc:	df000304 	addi	fp,sp,12
81106fe0:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81106fe4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81106fe8:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
81106fec:	e0bfff17 	ldw	r2,-4(fp)
81106ff0:	10004726 	beq	r2,zero,81107110 <bRmapGetCodecError+0x140>
		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81106ff4:	e0bfff17 	ldw	r2,-4(fp)
81106ff8:	10800017 	ldw	r2,0(r2)
81106ffc:	01400144 	movi	r5,5
81107000:	1009883a 	mov	r4,r2
81107004:	1108d540 	call	81108d54 <uliRmapReadReg>
81107008:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CODEC_STAT_REG_OFST);

		if (uliReg & COMM_RMAP_ERR_EARLY_EOP_MSK) {
8110700c:	e0bffe17 	ldw	r2,-8(fp)
81107010:	1080006c 	andhi	r2,r2,1
81107014:	10000426 	beq	r2,zero,81107028 <bRmapGetCodecError+0x58>
			pxRmapCh->xRmapCodecError.bEarlyEop = TRUE;
81107018:	e0bfff17 	ldw	r2,-4(fp)
8110701c:	00c00044 	movi	r3,1
81107020:	10c00915 	stw	r3,36(r2)
81107024:	00000206 	br	81107030 <bRmapGetCodecError+0x60>
		} else {
			pxRmapCh->xRmapCodecError.bEarlyEop = FALSE;
81107028:	e0bfff17 	ldw	r2,-4(fp)
8110702c:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_RMAP_ERR_EEP_MSK) {
81107030:	e0bffe17 	ldw	r2,-8(fp)
81107034:	108000ac 	andhi	r2,r2,2
81107038:	10000426 	beq	r2,zero,8110704c <bRmapGetCodecError+0x7c>
			pxRmapCh->xRmapCodecError.bEep = TRUE;
8110703c:	e0bfff17 	ldw	r2,-4(fp)
81107040:	00c00044 	movi	r3,1
81107044:	10c00a15 	stw	r3,40(r2)
81107048:	00000206 	br	81107054 <bRmapGetCodecError+0x84>
		} else {
			pxRmapCh->xRmapCodecError.bEep = FALSE;
8110704c:	e0bfff17 	ldw	r2,-4(fp)
81107050:	10000a15 	stw	zero,40(r2)
		}
		if (uliReg & COMM_RMAP_ERR_HEADER_CRC_MSK) {
81107054:	e0bffe17 	ldw	r2,-8(fp)
81107058:	1080012c 	andhi	r2,r2,4
8110705c:	10000426 	beq	r2,zero,81107070 <bRmapGetCodecError+0xa0>
			pxRmapCh->xRmapCodecError.bHeaderCRC = TRUE;
81107060:	e0bfff17 	ldw	r2,-4(fp)
81107064:	00c00044 	movi	r3,1
81107068:	10c00b15 	stw	r3,44(r2)
8110706c:	00000206 	br	81107078 <bRmapGetCodecError+0xa8>
		} else {
			pxRmapCh->xRmapCodecError.bHeaderCRC = FALSE;
81107070:	e0bfff17 	ldw	r2,-4(fp)
81107074:	10000b15 	stw	zero,44(r2)
		}
		if (uliReg & COMM_RMAP_ERR_UNUSED_PKT_MSK) {
81107078:	e0bffe17 	ldw	r2,-8(fp)
8110707c:	1080022c 	andhi	r2,r2,8
81107080:	10000426 	beq	r2,zero,81107094 <bRmapGetCodecError+0xc4>
			pxRmapCh->xRmapCodecError.bUnusedPacketType = TRUE;
81107084:	e0bfff17 	ldw	r2,-4(fp)
81107088:	00c00044 	movi	r3,1
8110708c:	10c00c15 	stw	r3,48(r2)
81107090:	00000206 	br	8110709c <bRmapGetCodecError+0xcc>
		} else {
			pxRmapCh->xRmapCodecError.bUnusedPacketType = FALSE;
81107094:	e0bfff17 	ldw	r2,-4(fp)
81107098:	10000c15 	stw	zero,48(r2)
		}
		if (uliReg & COMM_RMAP_ERR_INVALID_CMD_MSK) {
8110709c:	e0bffe17 	ldw	r2,-8(fp)
811070a0:	1080042c 	andhi	r2,r2,16
811070a4:	10000426 	beq	r2,zero,811070b8 <bRmapGetCodecError+0xe8>
			pxRmapCh->xRmapCodecError.bInvalidCommandCode = TRUE;
811070a8:	e0bfff17 	ldw	r2,-4(fp)
811070ac:	00c00044 	movi	r3,1
811070b0:	10c00d15 	stw	r3,52(r2)
811070b4:	00000206 	br	811070c0 <bRmapGetCodecError+0xf0>
		} else {
			pxRmapCh->xRmapCodecError.bInvalidCommandCode = FALSE;
811070b8:	e0bfff17 	ldw	r2,-4(fp)
811070bc:	10000d15 	stw	zero,52(r2)
		}
		if (uliReg & COMM_RMAP_ERR_TOO_MUCH_DATA_MSK) {
811070c0:	e0bffe17 	ldw	r2,-8(fp)
811070c4:	1080082c 	andhi	r2,r2,32
811070c8:	10000426 	beq	r2,zero,811070dc <bRmapGetCodecError+0x10c>
			pxRmapCh->xRmapCodecError.bTooMuchData = TRUE;
811070cc:	e0bfff17 	ldw	r2,-4(fp)
811070d0:	00c00044 	movi	r3,1
811070d4:	10c00e15 	stw	r3,56(r2)
811070d8:	00000206 	br	811070e4 <bRmapGetCodecError+0x114>
		} else {
			pxRmapCh->xRmapCodecError.bTooMuchData = FALSE;
811070dc:	e0bfff17 	ldw	r2,-4(fp)
811070e0:	10000e15 	stw	zero,56(r2)
		}
		if (uliReg & COMM_RMAP_ERR_INVALID_DCRC_MSK) {
811070e4:	e0bffe17 	ldw	r2,-8(fp)
811070e8:	1080102c 	andhi	r2,r2,64
811070ec:	10000426 	beq	r2,zero,81107100 <bRmapGetCodecError+0x130>
			pxRmapCh->xRmapCodecError.bInvalidDataCrc = TRUE;
811070f0:	e0bfff17 	ldw	r2,-4(fp)
811070f4:	00c00044 	movi	r3,1
811070f8:	10c00f15 	stw	r3,60(r2)
811070fc:	00000206 	br	81107108 <bRmapGetCodecError+0x138>
		} else {
			pxRmapCh->xRmapCodecError.bInvalidDataCrc = FALSE;
81107100:	e0bfff17 	ldw	r2,-4(fp)
81107104:	10000f15 	stw	zero,60(r2)
		}

		bStatus = TRUE;
81107108:	00800044 	movi	r2,1
8110710c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81107110:	e0bffd17 	ldw	r2,-12(fp)
}
81107114:	e037883a 	mov	sp,fp
81107118:	dfc00117 	ldw	ra,4(sp)
8110711c:	df000017 	ldw	fp,0(sp)
81107120:	dec00204 	addi	sp,sp,8
81107124:	f800283a 	ret

81107128 <bRmapSetMemConfigArea>:

bool bRmapSetMemConfigArea(TRmapChannel *pxRmapCh) {
81107128:	defffb04 	addi	sp,sp,-20
8110712c:	dfc00415 	stw	ra,16(sp)
81107130:	df000315 	stw	fp,12(sp)
81107134:	df000304 	addi	fp,sp,12
81107138:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
8110713c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81107140:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
81107144:	e0bfff17 	ldw	r2,-4(fp)
81107148:	1000aa26 	beq	r2,zero,811073f4 <bRmapSetMemConfigArea+0x2cc>

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CCD_SEQ_1_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliCcdSeq1Config;
8110714c:	e0bfff17 	ldw	r2,-4(fp)
81107150:	10801217 	ldw	r2,72(r2)
81107154:	e0bffe15 	stw	r2,-8(fp)
//			uliReg |= (COMM_RMAP_REGCLK_DIR_CTRL_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcdSeq1Config. << 3));
//			uliReg &= (~COMM_RMAP_IMGCLK_TRCNT_CTRL_MSK);
//			uliReg |= (COMM_RMAP_IMGCLK_TRCNT_CTRL_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcdSeq1Config. << 4));
//			uliReg &= (~COMM_RMAP_REGCLK_TRCNT_CTRL_MSK);
//			uliReg |= (COMM_RMAP_REGCLK_TRCNT_CTRL_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcdSeq1Config. << 20));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
81107158:	e0bfff17 	ldw	r2,-4(fp)
8110715c:	10800017 	ldw	r2,0(r2)
81107160:	e1bffe17 	ldw	r6,-8(fp)
81107164:	01401004 	movi	r5,64
81107168:	1009883a 	mov	r4,r2
8110716c:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CCD_SEQ_1_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CCD_SEQ_2_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliCcdSeq2Config;
81107170:	e0bfff17 	ldw	r2,-4(fp)
81107174:	10801317 	ldw	r2,76(r2)
81107178:	e0bffe15 	stw	r2,-8(fp)
//			uliReg &= (~COMM_RMAP_SL_RDOUT_PAUSE_CNT_MSK);
//			uliReg |= (COMM_RMAP_SL_RDOUT_PAUSE_CNT_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcdSeq2Config. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
8110717c:	e0bfff17 	ldw	r2,-4(fp)
81107180:	10800017 	ldw	r2,0(r2)
81107184:	e1bffe17 	ldw	r6,-8(fp)
81107188:	01401044 	movi	r5,65
8110718c:	1009883a 	mov	r4,r2
81107190:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CCD_SEQ_2_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_SPW_PKT_1_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliSpwPacket1Config;
81107194:	e0bfff17 	ldw	r2,-4(fp)
81107198:	10801417 	ldw	r2,80(r2)
8110719c:	e0bffe15 	stw	r2,-8(fp)
//			uliReg |= (COMM_RMAP_DIGITISE_CTRL_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliSpwPacket1Config. << 0));
//			uliReg &= (~COMM_RMAP_CCD_DTRAN_SEL_CTRL_MSK);
//			uliReg |= (COMM_RMAP_CCD_DTRAN_SEL_CTRL_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliSpwPacket1Config. << 0));
//			uliReg &= (~COMM_RMAP_PACKET_SIZE_CTRL_MSK);
//			uliReg |= (COMM_RMAP_PACKET_SIZE_CTRL_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliSpwPacket1Config. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
811071a0:	e0bfff17 	ldw	r2,-4(fp)
811071a4:	10800017 	ldw	r2,0(r2)
811071a8:	e1bffe17 	ldw	r6,-8(fp)
811071ac:	01401084 	movi	r5,66
811071b0:	1009883a 	mov	r4,r2
811071b4:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_SPW_PKT_1_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_SPW_PKT_2_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliSpwPacket2Config;
811071b8:	e0bfff17 	ldw	r2,-4(fp)
811071bc:	10801517 	ldw	r2,84(r2)
811071c0:	e0bffe15 	stw	r2,-8(fp)
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
811071c4:	e0bfff17 	ldw	r2,-4(fp)
811071c8:	10800017 	ldw	r2,0(r2)
811071cc:	e1bffe17 	ldw	r6,-8(fp)
811071d0:	014010c4 	movi	r5,67
811071d4:	1009883a 	mov	r4,r2
811071d8:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_SPW_PKT_2_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CCD_1_W_1_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliFrameNumber;
811071dc:	e0bfff17 	ldw	r2,-4(fp)
811071e0:	10802217 	ldw	r2,136(r2)
811071e4:	e0bffe15 	stw	r2,-8(fp)
//			uliReg &= (~COMM_RMAP_WLIST_P_IADDR_CCD1_MSK);
//			uliReg |= (COMM_RMAP_WLIST_P_IADDR_CCD1_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd1Windowing1Config. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
811071e8:	e0bfff17 	ldw	r2,-4(fp)
811071ec:	10800017 	ldw	r2,0(r2)
811071f0:	e1bffe17 	ldw	r6,-8(fp)
811071f4:	01401104 	movi	r5,68
811071f8:	1009883a 	mov	r4,r2
811071fc:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CCD_1_W_1_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CCD_1_W_2_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliCcd1Windowing2Config;
81107200:	e0bfff17 	ldw	r2,-4(fp)
81107204:	10801717 	ldw	r2,92(r2)
81107208:	e0bffe15 	stw	r2,-8(fp)
//			uliReg |= (COMM_RMAP_WINDOW_WIDTH_CCD1_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd1Windowing2Config. << 0));
//			uliReg &= (~COMM_RMAP_WINDOW_HEIGHT_CCD1_MSK);
//			uliReg |= (COMM_RMAP_WINDOW_HEIGHT_CCD1_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd1Windowing2Config. << 0));
//			uliReg &= (~COMM_RMAP_WLIST_LENGTH_CCD1_MSK);
//			uliReg |= (COMM_RMAP_WLIST_LENGTH_CCD1_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd1Windowing2Config. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
8110720c:	e0bfff17 	ldw	r2,-4(fp)
81107210:	10800017 	ldw	r2,0(r2)
81107214:	e1bffe17 	ldw	r6,-8(fp)
81107218:	01401144 	movi	r5,69
8110721c:	1009883a 	mov	r4,r2
81107220:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CCD_1_W_2_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CCD_2_W_1_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliCcd2Windowing1Config;
81107224:	e0bfff17 	ldw	r2,-4(fp)
81107228:	10801817 	ldw	r2,96(r2)
8110722c:	e0bffe15 	stw	r2,-8(fp)
//			uliReg &= (~COMM_RMAP_WLIST_P_IADDR_CCD2_MSK);
//			uliReg |= (COMM_RMAP_WLIST_P_IADDR_CCD2_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd2Windowing1Config. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
81107230:	e0bfff17 	ldw	r2,-4(fp)
81107234:	10800017 	ldw	r2,0(r2)
81107238:	e1bffe17 	ldw	r6,-8(fp)
8110723c:	01401184 	movi	r5,70
81107240:	1009883a 	mov	r4,r2
81107244:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CCD_2_W_1_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CCD_2_W_2_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliCcd2Windowing2Config;
81107248:	e0bfff17 	ldw	r2,-4(fp)
8110724c:	10801917 	ldw	r2,100(r2)
81107250:	e0bffe15 	stw	r2,-8(fp)
//			uliReg |= (COMM_RMAP_WINDOW_WIDTH_CCD2_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd2Windowing2Config. << 0));
//			uliReg &= (~COMM_RMAP_WINDOW_HEIGHT_CCD2_MSK);
//			uliReg |= (COMM_RMAP_WINDOW_HEIGHT_CCD2_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd2Windowing2Config. << 0));
//			uliReg &= (~COMM_RMAP_WLIST_LENGTH_CCD2_MSK);
//			uliReg |= (COMM_RMAP_WLIST_LENGTH_CCD2_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd2Windowing2Config. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
81107254:	e0bfff17 	ldw	r2,-4(fp)
81107258:	10800017 	ldw	r2,0(r2)
8110725c:	e1bffe17 	ldw	r6,-8(fp)
81107260:	014011c4 	movi	r5,71
81107264:	1009883a 	mov	r4,r2
81107268:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CCD_2_W_2_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CCD_3_W_1_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliCcd3Windowing1Config;
8110726c:	e0bfff17 	ldw	r2,-4(fp)
81107270:	10801a17 	ldw	r2,104(r2)
81107274:	e0bffe15 	stw	r2,-8(fp)
//			uliReg &= (~COMM_RMAP_WLIST_P_IADDR_CCD3_MSK);
//			uliReg |= (COMM_RMAP_WLIST_P_IADDR_CCD3_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd3Windowing1Config. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
81107278:	e0bfff17 	ldw	r2,-4(fp)
8110727c:	10800017 	ldw	r2,0(r2)
81107280:	e1bffe17 	ldw	r6,-8(fp)
81107284:	01401204 	movi	r5,72
81107288:	1009883a 	mov	r4,r2
8110728c:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CCD_3_W_1_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CCD_3_W_2_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliCcd3Windowing2Config;
81107290:	e0bfff17 	ldw	r2,-4(fp)
81107294:	10801b17 	ldw	r2,108(r2)
81107298:	e0bffe15 	stw	r2,-8(fp)
//			uliReg |= (COMM_RMAP_WINDOW_WIDTH_CCD3_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd3Windowing2Config. << 0));
//			uliReg &= (~COMM_RMAP_WINDOW_HEIGHT_CCD3_MSK);
//			uliReg |= (COMM_RMAP_WINDOW_HEIGHT_CCD3_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd3Windowing2Config. << 0));
//			uliReg &= (~COMM_RMAP_WLIST_LENGTH_CCD3_MSK);
//			uliReg |= (COMM_RMAP_WLIST_LENGTH_CCD3_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd3Windowing2Config. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
8110729c:	e0bfff17 	ldw	r2,-4(fp)
811072a0:	10800017 	ldw	r2,0(r2)
811072a4:	e1bffe17 	ldw	r6,-8(fp)
811072a8:	01401244 	movi	r5,73
811072ac:	1009883a 	mov	r4,r2
811072b0:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CCD_3_W_2_CFG_REG_OFST, uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811072b4:	e0bfff17 	ldw	r2,-4(fp)
811072b8:	10800017 	ldw	r2,0(r2)
811072bc:	01401284 	movi	r5,74
811072c0:	1009883a 	mov	r4,r2
811072c4:	1108d540 	call	81108d54 <uliRmapReadReg>
811072c8:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_4_W_1_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliCcd4Windowing1Config;
811072cc:	e0bfff17 	ldw	r2,-4(fp)
811072d0:	10801c17 	ldw	r2,112(r2)
811072d4:	e0bffe15 	stw	r2,-8(fp)
//			uliReg &= (~COMM_RMAP_WLIST_P_IADDR_CCD4_MSK);
//			uliReg |= (COMM_RMAP_WLIST_P_IADDR_CCD4_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd4Windowing1Config. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
811072d8:	e0bfff17 	ldw	r2,-4(fp)
811072dc:	10800017 	ldw	r2,0(r2)
811072e0:	e1bffe17 	ldw	r6,-8(fp)
811072e4:	01401284 	movi	r5,74
811072e8:	1009883a 	mov	r4,r2
811072ec:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CCD_4_W_1_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CCD_4_W_2_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliCcd4Windowing2Config;
811072f0:	e0bfff17 	ldw	r2,-4(fp)
811072f4:	10801d17 	ldw	r2,116(r2)
811072f8:	e0bffe15 	stw	r2,-8(fp)
//			uliReg |= (COMM_RMAP_WINDOW_WIDTH_CCD4_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd4Windowing2Config. << 0));
//			uliReg &= (~COMM_RMAP_WINDOW_HEIGHT_CCD4_MSK);
//			uliReg |= (COMM_RMAP_WINDOW_HEIGHT_CCD4_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd4Windowing2Config. << 0));
//			uliReg &= (~COMM_RMAP_WLIST_LENGTH_CCD4_MSK);
//			uliReg |= (COMM_RMAP_WLIST_LENGTH_CCD4_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCcd4Windowing2Config. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
811072fc:	e0bfff17 	ldw	r2,-4(fp)
81107300:	10800017 	ldw	r2,0(r2)
81107304:	e1bffe17 	ldw	r6,-8(fp)
81107308:	014012c4 	movi	r5,75
8110730c:	1009883a 	mov	r4,r2
81107310:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CCD_4_W_2_CFG_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_OP_MODE_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliOperationModeConfig;
81107314:	e0bfff17 	ldw	r2,-4(fp)
81107318:	10801e17 	ldw	r2,120(r2)
8110731c:	e0bffe15 	stw	r2,-8(fp)
//			uliReg &= (~COMM_RMAP_MODE_SEL_CTRL_MSK);
//			uliReg |= (COMM_RMAP_MODE_SEL_CTRL_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliOperationModeConfig. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_OP_MODE_CFG_REG_OFST,
81107320:	e0bfff17 	ldw	r2,-4(fp)
81107324:	10800017 	ldw	r2,0(r2)
81107328:	e1bffe17 	ldw	r6,-8(fp)
8110732c:	01401304 	movi	r5,76
81107330:	1009883a 	mov	r4,r2
81107334:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_SYNC_CFG_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliSyncConfig;
81107338:	e0bfff17 	ldw	r2,-4(fp)
8110733c:	10801f17 	ldw	r2,124(r2)
81107340:	e0bffe15 	stw	r2,-8(fp)
//			uliReg &= (~COMM_RMAP_SYNC_CFG_MSK);
//			uliReg |= (COMM_RMAP_SYNC_CFG_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliSyncConfig. << 0));
//			uliReg &= (~COMM_RMAP_SELF_TRIGGER_CTRL_MSK);
//			uliReg |= (COMM_RMAP_SELF_TRIGGER_CTRL_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliSyncConfig. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_SYNC_CFG_REG_OFST,
81107344:	e0bfff17 	ldw	r2,-4(fp)
81107348:	10800017 	ldw	r2,0(r2)
8110734c:	e1bffe17 	ldw	r6,-8(fp)
81107350:	01401344 	movi	r5,77
81107354:	1009883a 	mov	r4,r2
81107358:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_DAC_CTRL_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliDacControl;
8110735c:	e0bfff17 	ldw	r2,-4(fp)
81107360:	10802017 	ldw	r2,128(r2)
81107364:	e0bffe15 	stw	r2,-8(fp)
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_DAC_CTRL_REG_OFST,
81107368:	e0bfff17 	ldw	r2,-4(fp)
8110736c:	10800017 	ldw	r2,0(r2)
81107370:	e1bffe17 	ldw	r6,-8(fp)
81107374:	01401384 	movi	r5,78
81107378:	1009883a 	mov	r4,r2
8110737c:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CLK_SRCE_CTRL_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliFrameNumber;
81107380:	e0bfff17 	ldw	r2,-4(fp)
81107384:	10802217 	ldw	r2,136(r2)
81107388:	e0bffe15 	stw	r2,-8(fp)
		vRmapWriteReg(pxRmapCh->puliRmapChAddr,
8110738c:	e0bfff17 	ldw	r2,-4(fp)
81107390:	10800017 	ldw	r2,0(r2)
81107394:	e1bffe17 	ldw	r6,-8(fp)
81107398:	014013c4 	movi	r5,79
8110739c:	1009883a 	mov	r4,r2
811073a0:	1108d080 	call	81108d08 <vRmapWriteReg>
		COMM_RMAP_CLK_SRCE_CTRL_REG_OFST, uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_FRAME_NUMBER_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliFrameNumber;
811073a4:	e0bfff17 	ldw	r2,-4(fp)
811073a8:	10802217 	ldw	r2,136(r2)
811073ac:	e0bffe15 	stw	r2,-8(fp)
//			uliReg &= (~COMM_RMAP_FRAME_NUMBER_MSK);
//			uliReg |= (COMM_RMAP_FRAME_NUMBER_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliFrameNumber. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_FRAME_NUMBER_REG_OFST,
811073b0:	e0bfff17 	ldw	r2,-4(fp)
811073b4:	10800017 	ldw	r2,0(r2)
811073b8:	e1bffe17 	ldw	r6,-8(fp)
811073bc:	01401404 	movi	r5,80
811073c0:	1009883a 	mov	r4,r2
811073c4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

//		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CURRENT_MODE_REG_OFST);
		uliReg = pxRmapCh->xRmapMemConfigArea.uliCurrentMode;
811073c8:	e0bfff17 	ldw	r2,-4(fp)
811073cc:	10802317 	ldw	r2,140(r2)
811073d0:	e0bffe15 	stw	r2,-8(fp)
//			uliReg &= (~COMM_RMAP_CURRENT_MODE_MSK);
//			uliReg |= (COMM_RMAP_CURRENT_MODE_MSK & (alt_u32)(pxRmapCh->xRmapMemConfigArea.uliCurrentMode. << 0));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_CURRENT_MODE_REG_OFST,
811073d4:	e0bfff17 	ldw	r2,-4(fp)
811073d8:	10800017 	ldw	r2,0(r2)
811073dc:	e1bffe17 	ldw	r6,-8(fp)
811073e0:	01401444 	movi	r5,81
811073e4:	1009883a 	mov	r4,r2
811073e8:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		bStatus = TRUE;
811073ec:	00800044 	movi	r2,1
811073f0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811073f4:	e0bffd17 	ldw	r2,-12(fp)
}
811073f8:	e037883a 	mov	sp,fp
811073fc:	dfc00117 	ldw	ra,4(sp)
81107400:	df000017 	ldw	fp,0(sp)
81107404:	dec00204 	addi	sp,sp,8
81107408:	f800283a 	ret

8110740c <bRmapGetMemConfigArea>:

bool bRmapGetMemConfigArea(TRmapChannel *pxRmapCh) {
8110740c:	defffb04 	addi	sp,sp,-20
81107410:	dfc00415 	stw	ra,16(sp)
81107414:	df000315 	stw	fp,12(sp)
81107418:	df000304 	addi	fp,sp,12
8110741c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81107420:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81107424:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
81107428:	e0bfff17 	ldw	r2,-4(fp)
8110742c:	1000a426 	beq	r2,zero,811076c0 <bRmapGetMemConfigArea+0x2b4>

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107430:	e0bfff17 	ldw	r2,-4(fp)
81107434:	10800017 	ldw	r2,0(r2)
81107438:	01401004 	movi	r5,64
8110743c:	1009883a 	mov	r4,r2
81107440:	1108d540 	call	81108d54 <uliRmapReadReg>
81107444:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_SEQ_1_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliCcdSeq1Config = uliReg;
81107448:	e0bfff17 	ldw	r2,-4(fp)
8110744c:	e0fffe17 	ldw	r3,-8(fp)
81107450:	10c01215 	stw	r3,72(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107454:	e0bfff17 	ldw	r2,-4(fp)
81107458:	10800017 	ldw	r2,0(r2)
8110745c:	01401044 	movi	r5,65
81107460:	1009883a 	mov	r4,r2
81107464:	1108d540 	call	81108d54 <uliRmapReadReg>
81107468:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_SEQ_2_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliCcdSeq2Config = uliReg;
8110746c:	e0bfff17 	ldw	r2,-4(fp)
81107470:	e0fffe17 	ldw	r3,-8(fp)
81107474:	10c01315 	stw	r3,76(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107478:	e0bfff17 	ldw	r2,-4(fp)
8110747c:	10800017 	ldw	r2,0(r2)
81107480:	01401084 	movi	r5,66
81107484:	1009883a 	mov	r4,r2
81107488:	1108d540 	call	81108d54 <uliRmapReadReg>
8110748c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_SPW_PKT_1_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliSpwPacket1Config = uliReg;
81107490:	e0bfff17 	ldw	r2,-4(fp)
81107494:	e0fffe17 	ldw	r3,-8(fp)
81107498:	10c01415 	stw	r3,80(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
8110749c:	e0bfff17 	ldw	r2,-4(fp)
811074a0:	10800017 	ldw	r2,0(r2)
811074a4:	014010c4 	movi	r5,67
811074a8:	1009883a 	mov	r4,r2
811074ac:	1108d540 	call	81108d54 <uliRmapReadReg>
811074b0:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_SPW_PKT_2_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliSpwPacket2Config = uliReg;
811074b4:	e0bfff17 	ldw	r2,-4(fp)
811074b8:	e0fffe17 	ldw	r3,-8(fp)
811074bc:	10c01515 	stw	r3,84(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811074c0:	e0bfff17 	ldw	r2,-4(fp)
811074c4:	10800017 	ldw	r2,0(r2)
811074c8:	01401104 	movi	r5,68
811074cc:	1009883a 	mov	r4,r2
811074d0:	1108d540 	call	81108d54 <uliRmapReadReg>
811074d4:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_1_W_1_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliFrameNumber = uliReg;
811074d8:	e0bfff17 	ldw	r2,-4(fp)
811074dc:	e0fffe17 	ldw	r3,-8(fp)
811074e0:	10c02215 	stw	r3,136(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811074e4:	e0bfff17 	ldw	r2,-4(fp)
811074e8:	10800017 	ldw	r2,0(r2)
811074ec:	01401144 	movi	r5,69
811074f0:	1009883a 	mov	r4,r2
811074f4:	1108d540 	call	81108d54 <uliRmapReadReg>
811074f8:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_1_W_2_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliCcd1Windowing2Config = uliReg;
811074fc:	e0bfff17 	ldw	r2,-4(fp)
81107500:	e0fffe17 	ldw	r3,-8(fp)
81107504:	10c01715 	stw	r3,92(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107508:	e0bfff17 	ldw	r2,-4(fp)
8110750c:	10800017 	ldw	r2,0(r2)
81107510:	01401184 	movi	r5,70
81107514:	1009883a 	mov	r4,r2
81107518:	1108d540 	call	81108d54 <uliRmapReadReg>
8110751c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_2_W_1_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliCcd2Windowing1Config = uliReg;
81107520:	e0bfff17 	ldw	r2,-4(fp)
81107524:	e0fffe17 	ldw	r3,-8(fp)
81107528:	10c01815 	stw	r3,96(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
8110752c:	e0bfff17 	ldw	r2,-4(fp)
81107530:	10800017 	ldw	r2,0(r2)
81107534:	014011c4 	movi	r5,71
81107538:	1009883a 	mov	r4,r2
8110753c:	1108d540 	call	81108d54 <uliRmapReadReg>
81107540:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_2_W_2_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliCcd2Windowing2Config = uliReg;
81107544:	e0bfff17 	ldw	r2,-4(fp)
81107548:	e0fffe17 	ldw	r3,-8(fp)
8110754c:	10c01915 	stw	r3,100(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107550:	e0bfff17 	ldw	r2,-4(fp)
81107554:	10800017 	ldw	r2,0(r2)
81107558:	01401204 	movi	r5,72
8110755c:	1009883a 	mov	r4,r2
81107560:	1108d540 	call	81108d54 <uliRmapReadReg>
81107564:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_3_W_1_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliCcd3Windowing1Config = uliReg;
81107568:	e0bfff17 	ldw	r2,-4(fp)
8110756c:	e0fffe17 	ldw	r3,-8(fp)
81107570:	10c01a15 	stw	r3,104(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107574:	e0bfff17 	ldw	r2,-4(fp)
81107578:	10800017 	ldw	r2,0(r2)
8110757c:	01401244 	movi	r5,73
81107580:	1009883a 	mov	r4,r2
81107584:	1108d540 	call	81108d54 <uliRmapReadReg>
81107588:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_3_W_2_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliCcd3Windowing2Config = uliReg;
8110758c:	e0bfff17 	ldw	r2,-4(fp)
81107590:	e0fffe17 	ldw	r3,-8(fp)
81107594:	10c01b15 	stw	r3,108(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107598:	e0bfff17 	ldw	r2,-4(fp)
8110759c:	10800017 	ldw	r2,0(r2)
811075a0:	01401284 	movi	r5,74
811075a4:	1009883a 	mov	r4,r2
811075a8:	1108d540 	call	81108d54 <uliRmapReadReg>
811075ac:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_4_W_1_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliCcd4Windowing1Config = uliReg;
811075b0:	e0bfff17 	ldw	r2,-4(fp)
811075b4:	e0fffe17 	ldw	r3,-8(fp)
811075b8:	10c01c15 	stw	r3,112(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811075bc:	e0bfff17 	ldw	r2,-4(fp)
811075c0:	10800017 	ldw	r2,0(r2)
811075c4:	014012c4 	movi	r5,75
811075c8:	1009883a 	mov	r4,r2
811075cc:	1108d540 	call	81108d54 <uliRmapReadReg>
811075d0:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CCD_4_W_2_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliCcd4Windowing2Config = uliReg;
811075d4:	e0bfff17 	ldw	r2,-4(fp)
811075d8:	e0fffe17 	ldw	r3,-8(fp)
811075dc:	10c01d15 	stw	r3,116(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811075e0:	e0bfff17 	ldw	r2,-4(fp)
811075e4:	10800017 	ldw	r2,0(r2)
811075e8:	01401304 	movi	r5,76
811075ec:	1009883a 	mov	r4,r2
811075f0:	1108d540 	call	81108d54 <uliRmapReadReg>
811075f4:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_OP_MODE_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliOperationModeConfig = uliReg;
811075f8:	e0bfff17 	ldw	r2,-4(fp)
811075fc:	e0fffe17 	ldw	r3,-8(fp)
81107600:	10c01e15 	stw	r3,120(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107604:	e0bfff17 	ldw	r2,-4(fp)
81107608:	10800017 	ldw	r2,0(r2)
8110760c:	01401344 	movi	r5,77
81107610:	1009883a 	mov	r4,r2
81107614:	1108d540 	call	81108d54 <uliRmapReadReg>
81107618:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_SYNC_CFG_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliSyncConfig = uliReg;
8110761c:	e0bfff17 	ldw	r2,-4(fp)
81107620:	e0fffe17 	ldw	r3,-8(fp)
81107624:	10c01f15 	stw	r3,124(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107628:	e0bfff17 	ldw	r2,-4(fp)
8110762c:	10800017 	ldw	r2,0(r2)
81107630:	01401384 	movi	r5,78
81107634:	1009883a 	mov	r4,r2
81107638:	1108d540 	call	81108d54 <uliRmapReadReg>
8110763c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_DAC_CTRL_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliDacControl = uliReg;
81107640:	e0bfff17 	ldw	r2,-4(fp)
81107644:	e0fffe17 	ldw	r3,-8(fp)
81107648:	10c02015 	stw	r3,128(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
8110764c:	e0bfff17 	ldw	r2,-4(fp)
81107650:	10800017 	ldw	r2,0(r2)
81107654:	014013c4 	movi	r5,79
81107658:	1009883a 	mov	r4,r2
8110765c:	1108d540 	call	81108d54 <uliRmapReadReg>
81107660:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CLK_SRCE_CTRL_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliFrameNumber = uliReg;
81107664:	e0bfff17 	ldw	r2,-4(fp)
81107668:	e0fffe17 	ldw	r3,-8(fp)
8110766c:	10c02215 	stw	r3,136(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107670:	e0bfff17 	ldw	r2,-4(fp)
81107674:	10800017 	ldw	r2,0(r2)
81107678:	01401404 	movi	r5,80
8110767c:	1009883a 	mov	r4,r2
81107680:	1108d540 	call	81108d54 <uliRmapReadReg>
81107684:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_FRAME_NUMBER_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliFrameNumber = uliReg;
81107688:	e0bfff17 	ldw	r2,-4(fp)
8110768c:	e0fffe17 	ldw	r3,-8(fp)
81107690:	10c02215 	stw	r3,136(r2)

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107694:	e0bfff17 	ldw	r2,-4(fp)
81107698:	10800017 	ldw	r2,0(r2)
8110769c:	01401444 	movi	r5,81
811076a0:	1009883a 	mov	r4,r2
811076a4:	1108d540 	call	81108d54 <uliRmapReadReg>
811076a8:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_CURRENT_MODE_REG_OFST);
		pxRmapCh->xRmapMemConfigArea.uliCurrentMode = uliReg;
811076ac:	e0bfff17 	ldw	r2,-4(fp)
811076b0:	e0fffe17 	ldw	r3,-8(fp)
811076b4:	10c02315 	stw	r3,140(r2)

		bStatus = TRUE;
811076b8:	00800044 	movi	r2,1
811076bc:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811076c0:	e0bffd17 	ldw	r2,-12(fp)
}
811076c4:	e037883a 	mov	sp,fp
811076c8:	dfc00117 	ldw	ra,4(sp)
811076cc:	df000017 	ldw	fp,0(sp)
811076d0:	dec00204 	addi	sp,sp,8
811076d4:	f800283a 	ret

811076d8 <bRmapGetMemConfigStat>:

bool bRmapGetMemConfigStat(TRmapChannel *pxRmapCh) {
811076d8:	defffb04 	addi	sp,sp,-20
811076dc:	dfc00415 	stw	ra,16(sp)
811076e0:	df000315 	stw	fp,12(sp)
811076e4:	df000304 	addi	fp,sp,12
811076e8:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811076ec:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811076f0:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
811076f4:	e0bfff17 	ldw	r2,-4(fp)
811076f8:	10001426 	beq	r2,zero,8110774c <bRmapGetMemConfigStat+0x74>

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811076fc:	e0bfff17 	ldw	r2,-4(fp)
81107700:	10800017 	ldw	r2,0(r2)
81107704:	014001c4 	movi	r5,7
81107708:	1009883a 	mov	r4,r2
8110770c:	1108d540 	call	81108d54 <uliRmapReadReg>
81107710:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_LST_RD_ADDR_REG_OFST);

		pxRmapCh->xRmapMemConfigStat.uliLastReadAddress = (alt_u32) ((uliReg
81107714:	e0bfff17 	ldw	r2,-4(fp)
81107718:	e0fffe17 	ldw	r3,-8(fp)
8110771c:	10c02515 	stw	r3,148(r2)
				& COMM_RMAP_LST_RD_ADDR_MSK) >> 0);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107720:	e0bfff17 	ldw	r2,-4(fp)
81107724:	10800017 	ldw	r2,0(r2)
81107728:	01400184 	movi	r5,6
8110772c:	1009883a 	mov	r4,r2
81107730:	1108d540 	call	81108d54 <uliRmapReadReg>
81107734:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_LST_WR_ADDR_REG_OFST);

		pxRmapCh->xRmapMemConfigStat.uliLastWriteAddress = (alt_u32) ((uliReg
81107738:	e0bfff17 	ldw	r2,-4(fp)
8110773c:	e0fffe17 	ldw	r3,-8(fp)
81107740:	10c02415 	stw	r3,144(r2)
				& COMM_RMAP_LST_WR_ADDR_MSK) >> 0);

		bStatus = TRUE;
81107744:	00800044 	movi	r2,1
81107748:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
8110774c:	e0bffd17 	ldw	r2,-12(fp)
}
81107750:	e037883a 	mov	sp,fp
81107754:	dfc00117 	ldw	ra,4(sp)
81107758:	df000017 	ldw	fp,0(sp)
8110775c:	dec00204 	addi	sp,sp,8
81107760:	f800283a 	ret

81107764 <bRmapSetRmapMemHKArea>:

bool bRmapSetRmapMemHKArea(TRmapChannel *pxRmapCh) {
81107764:	defffb04 	addi	sp,sp,-20
81107768:	dfc00415 	stw	ra,16(sp)
8110776c:	df000315 	stw	fp,12(sp)
81107770:	df000304 	addi	fp,sp,12
81107774:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81107778:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110777c:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
81107780:	e0bfff17 	ldw	r2,-4(fp)
81107784:	10030226 	beq	r2,zero,81108390 <bRmapSetRmapMemHKArea+0xc2c>

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107788:	e0bfff17 	ldw	r2,-4(fp)
8110778c:	10800017 	ldw	r2,0(r2)
81107790:	01402804 	movi	r5,160
81107794:	1009883a 	mov	r4,r2
81107798:	1108d540 	call	81108d54 <uliRmapReadReg>
8110779c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_0_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD1_VOD_E_MSK);
811077a0:	e0bffe17 	ldw	r2,-8(fp)
811077a4:	10bfffec 	andhi	r2,r2,65535
811077a8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD1_VOD_E_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd1VodE >> 0));
811077ac:	e0bfff17 	ldw	r2,-4(fp)
811077b0:	1080260b 	ldhu	r2,152(r2)
811077b4:	10bfffcc 	andi	r2,r2,65535
	if (pxRmapCh != NULL) {

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_0_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD1_VOD_E_MSK);
		uliReg |= (COMM_RMAP_HK_CCD1_VOD_E_MSK
811077b8:	e0fffe17 	ldw	r3,-8(fp)
811077bc:	1884b03a 	or	r2,r3,r2
811077c0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd1VodE >> 0));
		uliReg &= (~COMM_RMAP_HK_CCD1_VOD_F_MSK);
811077c4:	e0bffe17 	ldw	r2,-8(fp)
811077c8:	10bfffcc 	andi	r2,r2,65535
811077cc:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD1_VOD_F_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd1VodF >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_0_REG_OFST,
811077d0:	e0bfff17 	ldw	r2,-4(fp)
811077d4:	10800017 	ldw	r2,0(r2)
811077d8:	e1bffe17 	ldw	r6,-8(fp)
811077dc:	01402804 	movi	r5,160
811077e0:	1009883a 	mov	r4,r2
811077e4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811077e8:	e0bfff17 	ldw	r2,-4(fp)
811077ec:	10800017 	ldw	r2,0(r2)
811077f0:	01402844 	movi	r5,161
811077f4:	1009883a 	mov	r4,r2
811077f8:	1108d540 	call	81108d54 <uliRmapReadReg>
811077fc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_1_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD1_VRD_MON_MSK);
81107800:	e0bffe17 	ldw	r2,-8(fp)
81107804:	10bfffec 	andhi	r2,r2,65535
81107808:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD1_VRD_MON_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd1VrdMon >> 0));
8110780c:	e0bfff17 	ldw	r2,-4(fp)
81107810:	1080270b 	ldhu	r2,156(r2)
81107814:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_1_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD1_VRD_MON_MSK);
		uliReg |= (COMM_RMAP_HK_CCD1_VRD_MON_MSK
81107818:	e0fffe17 	ldw	r3,-8(fp)
8110781c:	1884b03a 	or	r2,r3,r2
81107820:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd1VrdMon >> 0));
		uliReg &= (~COMM_RMAP_HK_CCD2_VOD_E_MSK);
81107824:	e0bffe17 	ldw	r2,-8(fp)
81107828:	10bfffcc 	andi	r2,r2,65535
8110782c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD2_VOD_E_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd2VodE >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_1_REG_OFST,
81107830:	e0bfff17 	ldw	r2,-4(fp)
81107834:	10800017 	ldw	r2,0(r2)
81107838:	e1bffe17 	ldw	r6,-8(fp)
8110783c:	01402844 	movi	r5,161
81107840:	1009883a 	mov	r4,r2
81107844:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107848:	e0bfff17 	ldw	r2,-4(fp)
8110784c:	10800017 	ldw	r2,0(r2)
81107850:	01402884 	movi	r5,162
81107854:	1009883a 	mov	r4,r2
81107858:	1108d540 	call	81108d54 <uliRmapReadReg>
8110785c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_2_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD2_VOD_F_MSK);
81107860:	e0bffe17 	ldw	r2,-8(fp)
81107864:	10bfffec 	andhi	r2,r2,65535
81107868:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD2_VOD_F_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd2VodF >> 0));
8110786c:	e0bfff17 	ldw	r2,-4(fp)
81107870:	1080280b 	ldhu	r2,160(r2)
81107874:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_2_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD2_VOD_F_MSK);
		uliReg |= (COMM_RMAP_HK_CCD2_VOD_F_MSK
81107878:	e0fffe17 	ldw	r3,-8(fp)
8110787c:	1884b03a 	or	r2,r3,r2
81107880:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd2VodF >> 0));
		uliReg &= (~COMM_RMAP_HK_CCD2_VRD_MON_MSK);
81107884:	e0bffe17 	ldw	r2,-8(fp)
81107888:	10bfffcc 	andi	r2,r2,65535
8110788c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD2_VRD_MON_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd2VrdMon >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_2_REG_OFST,
81107890:	e0bfff17 	ldw	r2,-4(fp)
81107894:	10800017 	ldw	r2,0(r2)
81107898:	e1bffe17 	ldw	r6,-8(fp)
8110789c:	01402884 	movi	r5,162
811078a0:	1009883a 	mov	r4,r2
811078a4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811078a8:	e0bfff17 	ldw	r2,-4(fp)
811078ac:	10800017 	ldw	r2,0(r2)
811078b0:	014028c4 	movi	r5,163
811078b4:	1009883a 	mov	r4,r2
811078b8:	1108d540 	call	81108d54 <uliRmapReadReg>
811078bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_3_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD3_VOD_E_MSK);
811078c0:	e0bffe17 	ldw	r2,-8(fp)
811078c4:	10bfffec 	andhi	r2,r2,65535
811078c8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD3_VOD_E_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd3VodE >> 0));
811078cc:	e0bfff17 	ldw	r2,-4(fp)
811078d0:	1080290b 	ldhu	r2,164(r2)
811078d4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_3_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD3_VOD_E_MSK);
		uliReg |= (COMM_RMAP_HK_CCD3_VOD_E_MSK
811078d8:	e0fffe17 	ldw	r3,-8(fp)
811078dc:	1884b03a 	or	r2,r3,r2
811078e0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd3VodE >> 0));
		uliReg &= (~COMM_RMAP_HK_CCD3_VOD_F_MSK);
811078e4:	e0bffe17 	ldw	r2,-8(fp)
811078e8:	10bfffcc 	andi	r2,r2,65535
811078ec:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD3_VOD_F_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd3VodF >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_3_REG_OFST,
811078f0:	e0bfff17 	ldw	r2,-4(fp)
811078f4:	10800017 	ldw	r2,0(r2)
811078f8:	e1bffe17 	ldw	r6,-8(fp)
811078fc:	014028c4 	movi	r5,163
81107900:	1009883a 	mov	r4,r2
81107904:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107908:	e0bfff17 	ldw	r2,-4(fp)
8110790c:	10800017 	ldw	r2,0(r2)
81107910:	01402904 	movi	r5,164
81107914:	1009883a 	mov	r4,r2
81107918:	1108d540 	call	81108d54 <uliRmapReadReg>
8110791c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_4_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD3_VRD_MON_MSK);
81107920:	e0bffe17 	ldw	r2,-8(fp)
81107924:	10bfffec 	andhi	r2,r2,65535
81107928:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD3_VRD_MON_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd3VrdMon >> 0));
8110792c:	e0bfff17 	ldw	r2,-4(fp)
81107930:	10802a0b 	ldhu	r2,168(r2)
81107934:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_4_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD3_VRD_MON_MSK);
		uliReg |= (COMM_RMAP_HK_CCD3_VRD_MON_MSK
81107938:	e0fffe17 	ldw	r3,-8(fp)
8110793c:	1884b03a 	or	r2,r3,r2
81107940:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd3VrdMon >> 0));
		uliReg &= (~COMM_RMAP_HK_CCD4_VOD_E_MSK);
81107944:	e0bffe17 	ldw	r2,-8(fp)
81107948:	10bfffcc 	andi	r2,r2,65535
8110794c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD4_VOD_E_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd4VodE >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_4_REG_OFST,
81107950:	e0bfff17 	ldw	r2,-4(fp)
81107954:	10800017 	ldw	r2,0(r2)
81107958:	e1bffe17 	ldw	r6,-8(fp)
8110795c:	01402904 	movi	r5,164
81107960:	1009883a 	mov	r4,r2
81107964:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107968:	e0bfff17 	ldw	r2,-4(fp)
8110796c:	10800017 	ldw	r2,0(r2)
81107970:	01402944 	movi	r5,165
81107974:	1009883a 	mov	r4,r2
81107978:	1108d540 	call	81108d54 <uliRmapReadReg>
8110797c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_5_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD4_VOD_F_MSK);
81107980:	e0bffe17 	ldw	r2,-8(fp)
81107984:	10bfffec 	andhi	r2,r2,65535
81107988:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD4_VOD_F_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd4VodF >> 0));
8110798c:	e0bfff17 	ldw	r2,-4(fp)
81107990:	10802b0b 	ldhu	r2,172(r2)
81107994:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_5_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD4_VOD_F_MSK);
		uliReg |= (COMM_RMAP_HK_CCD4_VOD_F_MSK
81107998:	e0fffe17 	ldw	r3,-8(fp)
8110799c:	1884b03a 	or	r2,r3,r2
811079a0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd4VodF >> 0));
		uliReg &= (~COMM_RMAP_HK_CCD4_VRD_MON_MSK);
811079a4:	e0bffe17 	ldw	r2,-8(fp)
811079a8:	10bfffcc 	andi	r2,r2,65535
811079ac:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD4_VRD_MON_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd4VrdMon >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_5_REG_OFST,
811079b0:	e0bfff17 	ldw	r2,-4(fp)
811079b4:	10800017 	ldw	r2,0(r2)
811079b8:	e1bffe17 	ldw	r6,-8(fp)
811079bc:	01402944 	movi	r5,165
811079c0:	1009883a 	mov	r4,r2
811079c4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811079c8:	e0bfff17 	ldw	r2,-4(fp)
811079cc:	10800017 	ldw	r2,0(r2)
811079d0:	01402984 	movi	r5,166
811079d4:	1009883a 	mov	r4,r2
811079d8:	1108d540 	call	81108d54 <uliRmapReadReg>
811079dc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_6_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VCCD_MSK);
811079e0:	e0bffe17 	ldw	r2,-8(fp)
811079e4:	10bfffec 	andhi	r2,r2,65535
811079e8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VCCD_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVccd >> 0));
811079ec:	e0bfff17 	ldw	r2,-4(fp)
811079f0:	10802c0b 	ldhu	r2,176(r2)
811079f4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_6_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VCCD_MSK);
		uliReg |= (COMM_RMAP_HK_VCCD_MSK
811079f8:	e0fffe17 	ldw	r3,-8(fp)
811079fc:	1884b03a 	or	r2,r3,r2
81107a00:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVccd >> 0));
		uliReg &= (~COMM_RMAP_HK_VRCLK_MSK);
81107a04:	e0bffe17 	ldw	r2,-8(fp)
81107a08:	10bfffcc 	andi	r2,r2,65535
81107a0c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VRCLK_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVrclk >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_6_REG_OFST,
81107a10:	e0bfff17 	ldw	r2,-4(fp)
81107a14:	10800017 	ldw	r2,0(r2)
81107a18:	e1bffe17 	ldw	r6,-8(fp)
81107a1c:	01402984 	movi	r5,166
81107a20:	1009883a 	mov	r4,r2
81107a24:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107a28:	e0bfff17 	ldw	r2,-4(fp)
81107a2c:	10800017 	ldw	r2,0(r2)
81107a30:	014029c4 	movi	r5,167
81107a34:	1009883a 	mov	r4,r2
81107a38:	1108d540 	call	81108d54 <uliRmapReadReg>
81107a3c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_7_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VICLK_MSK);
81107a40:	e0bffe17 	ldw	r2,-8(fp)
81107a44:	10bfffec 	andhi	r2,r2,65535
81107a48:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VICLK_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkViclk >> 0));
81107a4c:	e0bfff17 	ldw	r2,-4(fp)
81107a50:	10802d0b 	ldhu	r2,180(r2)
81107a54:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_7_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VICLK_MSK);
		uliReg |= (COMM_RMAP_HK_VICLK_MSK
81107a58:	e0fffe17 	ldw	r3,-8(fp)
81107a5c:	1884b03a 	or	r2,r3,r2
81107a60:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkViclk >> 0));
		uliReg &= (~COMM_RMAP_HK_VRCLK_LOW_MSK);
81107a64:	e0bffe17 	ldw	r2,-8(fp)
81107a68:	10bfffcc 	andi	r2,r2,65535
81107a6c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VRCLK_LOW_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVrclkLow >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_7_REG_OFST,
81107a70:	e0bfff17 	ldw	r2,-4(fp)
81107a74:	10800017 	ldw	r2,0(r2)
81107a78:	e1bffe17 	ldw	r6,-8(fp)
81107a7c:	014029c4 	movi	r5,167
81107a80:	1009883a 	mov	r4,r2
81107a84:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107a88:	e0bfff17 	ldw	r2,-4(fp)
81107a8c:	10800017 	ldw	r2,0(r2)
81107a90:	01402a04 	movi	r5,168
81107a94:	1009883a 	mov	r4,r2
81107a98:	1108d540 	call	81108d54 <uliRmapReadReg>
81107a9c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_8_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_5VB_POS_MSK);
81107aa0:	e0bffe17 	ldw	r2,-8(fp)
81107aa4:	10bfffec 	andhi	r2,r2,65535
81107aa8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_5VB_POS_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk5vbPos >> 0));
81107aac:	e0bfff17 	ldw	r2,-4(fp)
81107ab0:	10802e0b 	ldhu	r2,184(r2)
81107ab4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_8_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_5VB_POS_MSK);
		uliReg |= (COMM_RMAP_HK_5VB_POS_MSK
81107ab8:	e0fffe17 	ldw	r3,-8(fp)
81107abc:	1884b03a 	or	r2,r3,r2
81107ac0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk5vbPos >> 0));
		uliReg &= (~COMM_RMAP_HK_5VB_NEG_MSK);
81107ac4:	e0bffe17 	ldw	r2,-8(fp)
81107ac8:	10bfffcc 	andi	r2,r2,65535
81107acc:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_5VB_NEG_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk5vbNeg >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_8_REG_OFST,
81107ad0:	e0bfff17 	ldw	r2,-4(fp)
81107ad4:	10800017 	ldw	r2,0(r2)
81107ad8:	e1bffe17 	ldw	r6,-8(fp)
81107adc:	01402a04 	movi	r5,168
81107ae0:	1009883a 	mov	r4,r2
81107ae4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107ae8:	e0bfff17 	ldw	r2,-4(fp)
81107aec:	10800017 	ldw	r2,0(r2)
81107af0:	01402a44 	movi	r5,169
81107af4:	1009883a 	mov	r4,r2
81107af8:	1108d540 	call	81108d54 <uliRmapReadReg>
81107afc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_9_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_3_3VB_POS_MSK);
81107b00:	e0bffe17 	ldw	r2,-8(fp)
81107b04:	10bfffec 	andhi	r2,r2,65535
81107b08:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_3_3VB_POS_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk33vbPos >> 0));
81107b0c:	e0bfff17 	ldw	r2,-4(fp)
81107b10:	10802f0b 	ldhu	r2,188(r2)
81107b14:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_9_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_3_3VB_POS_MSK);
		uliReg |= (COMM_RMAP_HK_3_3VB_POS_MSK
81107b18:	e0fffe17 	ldw	r3,-8(fp)
81107b1c:	1884b03a 	or	r2,r3,r2
81107b20:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk33vbPos >> 0));
		uliReg &= (~COMM_RMAP_HK_2_5VA_POS_MSK);
81107b24:	e0bffe17 	ldw	r2,-8(fp)
81107b28:	10bfffcc 	andi	r2,r2,65535
81107b2c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_2_5VA_POS_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk25vaPos >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_9_REG_OFST,
81107b30:	e0bfff17 	ldw	r2,-4(fp)
81107b34:	10800017 	ldw	r2,0(r2)
81107b38:	e1bffe17 	ldw	r6,-8(fp)
81107b3c:	01402a44 	movi	r5,169
81107b40:	1009883a 	mov	r4,r2
81107b44:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107b48:	e0bfff17 	ldw	r2,-4(fp)
81107b4c:	10800017 	ldw	r2,0(r2)
81107b50:	01402a84 	movi	r5,170
81107b54:	1009883a 	mov	r4,r2
81107b58:	1108d540 	call	81108d54 <uliRmapReadReg>
81107b5c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_10_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_3_3VD_POS_MSK);
81107b60:	e0bffe17 	ldw	r2,-8(fp)
81107b64:	10bfffec 	andhi	r2,r2,65535
81107b68:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_3_3VD_POS_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk33vdPos >> 0));
81107b6c:	e0bfff17 	ldw	r2,-4(fp)
81107b70:	1080300b 	ldhu	r2,192(r2)
81107b74:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_10_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_3_3VD_POS_MSK);
		uliReg |= (COMM_RMAP_HK_3_3VD_POS_MSK
81107b78:	e0fffe17 	ldw	r3,-8(fp)
81107b7c:	1884b03a 	or	r2,r3,r2
81107b80:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk33vdPos >> 0));
		uliReg &= (~COMM_RMAP_HK_2_5VD_POS_MSK);
81107b84:	e0bffe17 	ldw	r2,-8(fp)
81107b88:	10bfffcc 	andi	r2,r2,65535
81107b8c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_2_5VD_POS_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk25vdPos >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_10_REG_OFST,
81107b90:	e0bfff17 	ldw	r2,-4(fp)
81107b94:	10800017 	ldw	r2,0(r2)
81107b98:	e1bffe17 	ldw	r6,-8(fp)
81107b9c:	01402a84 	movi	r5,170
81107ba0:	1009883a 	mov	r4,r2
81107ba4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107ba8:	e0bfff17 	ldw	r2,-4(fp)
81107bac:	10800017 	ldw	r2,0(r2)
81107bb0:	01402ac4 	movi	r5,171
81107bb4:	1009883a 	mov	r4,r2
81107bb8:	1108d540 	call	81108d54 <uliRmapReadReg>
81107bbc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_11_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_1_5VD_POS_MSK);
81107bc0:	e0bffe17 	ldw	r2,-8(fp)
81107bc4:	10bfffec 	andhi	r2,r2,65535
81107bc8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_1_5VD_POS_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk15vdPos >> 0));
81107bcc:	e0bfff17 	ldw	r2,-4(fp)
81107bd0:	1080310b 	ldhu	r2,196(r2)
81107bd4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_11_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_1_5VD_POS_MSK);
		uliReg |= (COMM_RMAP_HK_1_5VD_POS_MSK
81107bd8:	e0fffe17 	ldw	r3,-8(fp)
81107bdc:	1884b03a 	or	r2,r3,r2
81107be0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk15vdPos >> 0));
		uliReg &= (~COMM_RMAP_HK_5VREF_MSK);
81107be4:	e0bffe17 	ldw	r2,-8(fp)
81107be8:	10bfffcc 	andi	r2,r2,65535
81107bec:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_5VREF_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHk5vref >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_11_REG_OFST,
81107bf0:	e0bfff17 	ldw	r2,-4(fp)
81107bf4:	10800017 	ldw	r2,0(r2)
81107bf8:	e1bffe17 	ldw	r6,-8(fp)
81107bfc:	01402ac4 	movi	r5,171
81107c00:	1009883a 	mov	r4,r2
81107c04:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107c08:	e0bfff17 	ldw	r2,-4(fp)
81107c0c:	10800017 	ldw	r2,0(r2)
81107c10:	01402b04 	movi	r5,172
81107c14:	1009883a 	mov	r4,r2
81107c18:	1108d540 	call	81108d54 <uliRmapReadReg>
81107c1c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_12_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VCCD_POS_RAW_MSK);
81107c20:	e0bffe17 	ldw	r2,-8(fp)
81107c24:	10bfffec 	andhi	r2,r2,65535
81107c28:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VCCD_POS_RAW_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVccdPosRaw >> 0));
81107c2c:	e0bfff17 	ldw	r2,-4(fp)
81107c30:	1080320b 	ldhu	r2,200(r2)
81107c34:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_12_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VCCD_POS_RAW_MSK);
		uliReg |= (COMM_RMAP_HK_VCCD_POS_RAW_MSK
81107c38:	e0fffe17 	ldw	r3,-8(fp)
81107c3c:	1884b03a 	or	r2,r3,r2
81107c40:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVccdPosRaw >> 0));
		uliReg &= (~COMM_RMAP_HK_VCLK_POS_RAW_MSK);
81107c44:	e0bffe17 	ldw	r2,-8(fp)
81107c48:	10bfffcc 	andi	r2,r2,65535
81107c4c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VCLK_POS_RAW_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVclkPosRaw >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_12_REG_OFST,
81107c50:	e0bfff17 	ldw	r2,-4(fp)
81107c54:	10800017 	ldw	r2,0(r2)
81107c58:	e1bffe17 	ldw	r6,-8(fp)
81107c5c:	01402b04 	movi	r5,172
81107c60:	1009883a 	mov	r4,r2
81107c64:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107c68:	e0bfff17 	ldw	r2,-4(fp)
81107c6c:	10800017 	ldw	r2,0(r2)
81107c70:	01402b44 	movi	r5,173
81107c74:	1009883a 	mov	r4,r2
81107c78:	1108d540 	call	81108d54 <uliRmapReadReg>
81107c7c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_13_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VAN1_POS_RAW_MSK);
81107c80:	e0bffe17 	ldw	r2,-8(fp)
81107c84:	10bfffec 	andhi	r2,r2,65535
81107c88:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VAN1_POS_RAW_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVan1PosRaw >> 0));
81107c8c:	e0bfff17 	ldw	r2,-4(fp)
81107c90:	1080330b 	ldhu	r2,204(r2)
81107c94:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_13_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VAN1_POS_RAW_MSK);
		uliReg |= (COMM_RMAP_HK_VAN1_POS_RAW_MSK
81107c98:	e0fffe17 	ldw	r3,-8(fp)
81107c9c:	1884b03a 	or	r2,r3,r2
81107ca0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVan1PosRaw >> 0));
		uliReg &= (~COMM_RMAP_HK_VAN3_NEG_RAW_MSK);
81107ca4:	e0bffe17 	ldw	r2,-8(fp)
81107ca8:	10bfffcc 	andi	r2,r2,65535
81107cac:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VAN3_NEG_RAW_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVan3NegRaw >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_13_REG_OFST,
81107cb0:	e0bfff17 	ldw	r2,-4(fp)
81107cb4:	10800017 	ldw	r2,0(r2)
81107cb8:	e1bffe17 	ldw	r6,-8(fp)
81107cbc:	01402b44 	movi	r5,173
81107cc0:	1009883a 	mov	r4,r2
81107cc4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107cc8:	e0bfff17 	ldw	r2,-4(fp)
81107ccc:	10800017 	ldw	r2,0(r2)
81107cd0:	01402b84 	movi	r5,174
81107cd4:	1009883a 	mov	r4,r2
81107cd8:	1108d540 	call	81108d54 <uliRmapReadReg>
81107cdc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_14_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VAN2_POS_RAW_MSK);
81107ce0:	e0bffe17 	ldw	r2,-8(fp)
81107ce4:	10bfffec 	andhi	r2,r2,65535
81107ce8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VAN2_POS_RAW_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVan2PosRaw >> 0));
81107cec:	e0bfff17 	ldw	r2,-4(fp)
81107cf0:	1080340b 	ldhu	r2,208(r2)
81107cf4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_14_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VAN2_POS_RAW_MSK);
		uliReg |= (COMM_RMAP_HK_VAN2_POS_RAW_MSK
81107cf8:	e0fffe17 	ldw	r3,-8(fp)
81107cfc:	1884b03a 	or	r2,r3,r2
81107d00:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVan2PosRaw >> 0));
		uliReg &= (~COMM_RMAP_HK_VDIG_FPGA_RAW_MSK);
81107d04:	e0bffe17 	ldw	r2,-8(fp)
81107d08:	10bfffcc 	andi	r2,r2,65535
81107d0c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VDIG_FPGA_RAW_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVdigFpgaRaw >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_14_REG_OFST,
81107d10:	e0bfff17 	ldw	r2,-4(fp)
81107d14:	10800017 	ldw	r2,0(r2)
81107d18:	e1bffe17 	ldw	r6,-8(fp)
81107d1c:	01402b84 	movi	r5,174
81107d20:	1009883a 	mov	r4,r2
81107d24:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107d28:	e0bfff17 	ldw	r2,-4(fp)
81107d2c:	10800017 	ldw	r2,0(r2)
81107d30:	01402bc4 	movi	r5,175
81107d34:	1009883a 	mov	r4,r2
81107d38:	1108d540 	call	81108d54 <uliRmapReadReg>
81107d3c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_15_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VDIG_SPW_RAW_MSK);
81107d40:	e0bffe17 	ldw	r2,-8(fp)
81107d44:	10bfffec 	andhi	r2,r2,65535
81107d48:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VDIG_SPW_RAW_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVdigSpwRaw >> 0));
81107d4c:	e0bfff17 	ldw	r2,-4(fp)
81107d50:	1080350b 	ldhu	r2,212(r2)
81107d54:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_15_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_VDIG_SPW_RAW_MSK);
		uliReg |= (COMM_RMAP_HK_VDIG_SPW_RAW_MSK
81107d58:	e0fffe17 	ldw	r3,-8(fp)
81107d5c:	1884b03a 	or	r2,r3,r2
81107d60:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkVdigSpwRaw >> 0));
		uliReg &= (~COMM_RMAP_HK_VICLK_LOW_MSK);
81107d64:	e0bffe17 	ldw	r2,-8(fp)
81107d68:	10bfffcc 	andi	r2,r2,65535
81107d6c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_VICLK_LOW_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkViclkLow >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_15_REG_OFST,
81107d70:	e0bfff17 	ldw	r2,-4(fp)
81107d74:	10800017 	ldw	r2,0(r2)
81107d78:	e1bffe17 	ldw	r6,-8(fp)
81107d7c:	01402bc4 	movi	r5,175
81107d80:	1009883a 	mov	r4,r2
81107d84:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107d88:	e0bfff17 	ldw	r2,-4(fp)
81107d8c:	10800017 	ldw	r2,0(r2)
81107d90:	01402c04 	movi	r5,176
81107d94:	1009883a 	mov	r4,r2
81107d98:	1108d540 	call	81108d54 <uliRmapReadReg>
81107d9c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_16_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_ADC_TEMP_A_E_MSK);
81107da0:	e0bffe17 	ldw	r2,-8(fp)
81107da4:	10bfffec 	andhi	r2,r2,65535
81107da8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_ADC_TEMP_A_E_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkAdcTempAE >> 0));
81107dac:	e0bfff17 	ldw	r2,-4(fp)
81107db0:	1080360b 	ldhu	r2,216(r2)
81107db4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_16_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_ADC_TEMP_A_E_MSK);
		uliReg |= (COMM_RMAP_HK_ADC_TEMP_A_E_MSK
81107db8:	e0fffe17 	ldw	r3,-8(fp)
81107dbc:	1884b03a 	or	r2,r3,r2
81107dc0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkAdcTempAE >> 0));
		uliReg &= (~COMM_RMAP_HK_ADC_TEMP_A_F_MSK);
81107dc4:	e0bffe17 	ldw	r2,-8(fp)
81107dc8:	10bfffcc 	andi	r2,r2,65535
81107dcc:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_ADC_TEMP_A_F_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkAdcTempAF >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_16_REG_OFST,
81107dd0:	e0bfff17 	ldw	r2,-4(fp)
81107dd4:	10800017 	ldw	r2,0(r2)
81107dd8:	e1bffe17 	ldw	r6,-8(fp)
81107ddc:	01402c04 	movi	r5,176
81107de0:	1009883a 	mov	r4,r2
81107de4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107de8:	e0bfff17 	ldw	r2,-4(fp)
81107dec:	10800017 	ldw	r2,0(r2)
81107df0:	01402c44 	movi	r5,177
81107df4:	1009883a 	mov	r4,r2
81107df8:	1108d540 	call	81108d54 <uliRmapReadReg>
81107dfc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_17_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD1_TEMP_MSK);
81107e00:	e0bffe17 	ldw	r2,-8(fp)
81107e04:	10bfffec 	andhi	r2,r2,65535
81107e08:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD1_TEMP_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd1Temp >> 0));
81107e0c:	e0bfff17 	ldw	r2,-4(fp)
81107e10:	1080370b 	ldhu	r2,220(r2)
81107e14:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_17_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD1_TEMP_MSK);
		uliReg |= (COMM_RMAP_HK_CCD1_TEMP_MSK
81107e18:	e0fffe17 	ldw	r3,-8(fp)
81107e1c:	1884b03a 	or	r2,r3,r2
81107e20:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd1Temp >> 0));
		uliReg &= (~COMM_RMAP_HK_CCD2_TEMP_MSK);
81107e24:	e0bffe17 	ldw	r2,-8(fp)
81107e28:	10bfffcc 	andi	r2,r2,65535
81107e2c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD2_TEMP_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd2Temp >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_17_REG_OFST,
81107e30:	e0bfff17 	ldw	r2,-4(fp)
81107e34:	10800017 	ldw	r2,0(r2)
81107e38:	e1bffe17 	ldw	r6,-8(fp)
81107e3c:	01402c44 	movi	r5,177
81107e40:	1009883a 	mov	r4,r2
81107e44:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107e48:	e0bfff17 	ldw	r2,-4(fp)
81107e4c:	10800017 	ldw	r2,0(r2)
81107e50:	01402c84 	movi	r5,178
81107e54:	1009883a 	mov	r4,r2
81107e58:	1108d540 	call	81108d54 <uliRmapReadReg>
81107e5c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_18_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD3_TEMP_MSK);
81107e60:	e0bffe17 	ldw	r2,-8(fp)
81107e64:	10bfffec 	andhi	r2,r2,65535
81107e68:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD3_TEMP_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd3Temp >> 0));
81107e6c:	e0bfff17 	ldw	r2,-4(fp)
81107e70:	1080380b 	ldhu	r2,224(r2)
81107e74:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_18_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_CCD3_TEMP_MSK);
		uliReg |= (COMM_RMAP_HK_CCD3_TEMP_MSK
81107e78:	e0fffe17 	ldw	r3,-8(fp)
81107e7c:	1884b03a 	or	r2,r3,r2
81107e80:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd3Temp >> 0));
		uliReg &= (~COMM_RMAP_HK_CCD4_TEMP_MSK);
81107e84:	e0bffe17 	ldw	r2,-8(fp)
81107e88:	10bfffcc 	andi	r2,r2,65535
81107e8c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_CCD4_TEMP_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkCcd4Temp >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_18_REG_OFST,
81107e90:	e0bfff17 	ldw	r2,-4(fp)
81107e94:	10800017 	ldw	r2,0(r2)
81107e98:	e1bffe17 	ldw	r6,-8(fp)
81107e9c:	01402c84 	movi	r5,178
81107ea0:	1009883a 	mov	r4,r2
81107ea4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107ea8:	e0bfff17 	ldw	r2,-4(fp)
81107eac:	10800017 	ldw	r2,0(r2)
81107eb0:	01402cc4 	movi	r5,179
81107eb4:	1009883a 	mov	r4,r2
81107eb8:	1108d540 	call	81108d54 <uliRmapReadReg>
81107ebc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_19_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_WP605_SPARE_MSK);
81107ec0:	e0bffe17 	ldw	r2,-8(fp)
81107ec4:	10bfffec 	andhi	r2,r2,65535
81107ec8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_HK_WP605_SPARE_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkWp605Spare >> 0));
81107ecc:	e0bfff17 	ldw	r2,-4(fp)
81107ed0:	1080390b 	ldhu	r2,228(r2)
81107ed4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_19_REG_OFST);
		uliReg &= (~COMM_RMAP_HK_WP605_SPARE_MSK);
		uliReg |= (COMM_RMAP_HK_WP605_SPARE_MSK
81107ed8:	e0fffe17 	ldw	r3,-8(fp)
81107edc:	1884b03a 	or	r2,r3,r2
81107ee0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiHkWp605Spare >> 0));
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_0_MSK);
81107ee4:	e0bffe17 	ldw	r2,-8(fp)
81107ee8:	10bfffcc 	andi	r2,r2,65535
81107eec:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_0_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA0 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_19_REG_OFST,
81107ef0:	e0bfff17 	ldw	r2,-4(fp)
81107ef4:	10800017 	ldw	r2,0(r2)
81107ef8:	e1bffe17 	ldw	r6,-8(fp)
81107efc:	01402cc4 	movi	r5,179
81107f00:	1009883a 	mov	r4,r2
81107f04:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107f08:	e0bfff17 	ldw	r2,-4(fp)
81107f0c:	10800017 	ldw	r2,0(r2)
81107f10:	01402d04 	movi	r5,180
81107f14:	1009883a 	mov	r4,r2
81107f18:	1108d540 	call	81108d54 <uliRmapReadReg>
81107f1c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_20_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_1_MSK);
81107f20:	e0bffe17 	ldw	r2,-8(fp)
81107f24:	10bfffec 	andhi	r2,r2,65535
81107f28:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_1_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA1 >> 0));
81107f2c:	e0bfff17 	ldw	r2,-4(fp)
81107f30:	10803a0b 	ldhu	r2,232(r2)
81107f34:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_20_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_1_MSK);
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_1_MSK
81107f38:	e0fffe17 	ldw	r3,-8(fp)
81107f3c:	1884b03a 	or	r2,r3,r2
81107f40:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA1 >> 0));
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_2_MSK);
81107f44:	e0bffe17 	ldw	r2,-8(fp)
81107f48:	10bfffcc 	andi	r2,r2,65535
81107f4c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_2_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA2 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_20_REG_OFST,
81107f50:	e0bfff17 	ldw	r2,-4(fp)
81107f54:	10800017 	ldw	r2,0(r2)
81107f58:	e1bffe17 	ldw	r6,-8(fp)
81107f5c:	01402d04 	movi	r5,180
81107f60:	1009883a 	mov	r4,r2
81107f64:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107f68:	e0bfff17 	ldw	r2,-4(fp)
81107f6c:	10800017 	ldw	r2,0(r2)
81107f70:	01402d44 	movi	r5,181
81107f74:	1009883a 	mov	r4,r2
81107f78:	1108d540 	call	81108d54 <uliRmapReadReg>
81107f7c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_21_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_3_MSK);
81107f80:	e0bffe17 	ldw	r2,-8(fp)
81107f84:	10bfffec 	andhi	r2,r2,65535
81107f88:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_3_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA3 >> 0));
81107f8c:	e0bfff17 	ldw	r2,-4(fp)
81107f90:	10803b0b 	ldhu	r2,236(r2)
81107f94:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_21_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_3_MSK);
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_3_MSK
81107f98:	e0fffe17 	ldw	r3,-8(fp)
81107f9c:	1884b03a 	or	r2,r3,r2
81107fa0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA3 >> 0));
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_4_MSK);
81107fa4:	e0bffe17 	ldw	r2,-8(fp)
81107fa8:	10bfffcc 	andi	r2,r2,65535
81107fac:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_4_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA4 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_21_REG_OFST,
81107fb0:	e0bfff17 	ldw	r2,-4(fp)
81107fb4:	10800017 	ldw	r2,0(r2)
81107fb8:	e1bffe17 	ldw	r6,-8(fp)
81107fbc:	01402d44 	movi	r5,181
81107fc0:	1009883a 	mov	r4,r2
81107fc4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81107fc8:	e0bfff17 	ldw	r2,-4(fp)
81107fcc:	10800017 	ldw	r2,0(r2)
81107fd0:	01402d84 	movi	r5,182
81107fd4:	1009883a 	mov	r4,r2
81107fd8:	1108d540 	call	81108d54 <uliRmapReadReg>
81107fdc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_22_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_5_MSK);
81107fe0:	e0bffe17 	ldw	r2,-8(fp)
81107fe4:	10bfffec 	andhi	r2,r2,65535
81107fe8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_5_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA5 >> 0));
81107fec:	e0bfff17 	ldw	r2,-4(fp)
81107ff0:	10803c0b 	ldhu	r2,240(r2)
81107ff4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_22_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_5_MSK);
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_5_MSK
81107ff8:	e0fffe17 	ldw	r3,-8(fp)
81107ffc:	1884b03a 	or	r2,r3,r2
81108000:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA5 >> 0));
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_6_MSK);
81108004:	e0bffe17 	ldw	r2,-8(fp)
81108008:	10bfffcc 	andi	r2,r2,65535
8110800c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_6_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA6 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_22_REG_OFST,
81108010:	e0bfff17 	ldw	r2,-4(fp)
81108014:	10800017 	ldw	r2,0(r2)
81108018:	e1bffe17 	ldw	r6,-8(fp)
8110801c:	01402d84 	movi	r5,182
81108020:	1009883a 	mov	r4,r2
81108024:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108028:	e0bfff17 	ldw	r2,-4(fp)
8110802c:	10800017 	ldw	r2,0(r2)
81108030:	01402dc4 	movi	r5,183
81108034:	1009883a 	mov	r4,r2
81108038:	1108d540 	call	81108d54 <uliRmapReadReg>
8110803c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_23_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_7_MSK);
81108040:	e0bffe17 	ldw	r2,-8(fp)
81108044:	10bfffec 	andhi	r2,r2,65535
81108048:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_7_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA7 >> 0));
8110804c:	e0bfff17 	ldw	r2,-4(fp)
81108050:	10803d0b 	ldhu	r2,244(r2)
81108054:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_23_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_7_MSK);
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_7_MSK
81108058:	e0fffe17 	ldw	r3,-8(fp)
8110805c:	1884b03a 	or	r2,r3,r2
81108060:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA7 >> 0));
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_8_MSK);
81108064:	e0bffe17 	ldw	r2,-8(fp)
81108068:	10bfffcc 	andi	r2,r2,65535
8110806c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_8_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA8 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_23_REG_OFST,
81108070:	e0bfff17 	ldw	r2,-4(fp)
81108074:	10800017 	ldw	r2,0(r2)
81108078:	e1bffe17 	ldw	r6,-8(fp)
8110807c:	01402dc4 	movi	r5,183
81108080:	1009883a 	mov	r4,r2
81108084:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108088:	e0bfff17 	ldw	r2,-4(fp)
8110808c:	10800017 	ldw	r2,0(r2)
81108090:	01402e04 	movi	r5,184
81108094:	1009883a 	mov	r4,r2
81108098:	1108d540 	call	81108d54 <uliRmapReadReg>
8110809c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_24_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_9_MSK);
811080a0:	e0bffe17 	ldw	r2,-8(fp)
811080a4:	10bfffec 	andhi	r2,r2,65535
811080a8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_9_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA9 >> 0));
811080ac:	e0bfff17 	ldw	r2,-4(fp)
811080b0:	10803e0b 	ldhu	r2,248(r2)
811080b4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_24_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_9_MSK);
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_9_MSK
811080b8:	e0fffe17 	ldw	r3,-8(fp)
811080bc:	1884b03a 	or	r2,r3,r2
811080c0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA9 >> 0));
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_10_MSK);
811080c4:	e0bffe17 	ldw	r2,-8(fp)
811080c8:	10bfffcc 	andi	r2,r2,65535
811080cc:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_10_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA10 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_24_REG_OFST,
811080d0:	e0bfff17 	ldw	r2,-4(fp)
811080d4:	10800017 	ldw	r2,0(r2)
811080d8:	e1bffe17 	ldw	r6,-8(fp)
811080dc:	01402e04 	movi	r5,184
811080e0:	1009883a 	mov	r4,r2
811080e4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811080e8:	e0bfff17 	ldw	r2,-4(fp)
811080ec:	10800017 	ldw	r2,0(r2)
811080f0:	01402e44 	movi	r5,185
811080f4:	1009883a 	mov	r4,r2
811080f8:	1108d540 	call	81108d54 <uliRmapReadReg>
811080fc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_25_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_11_MSK);
81108100:	e0bffe17 	ldw	r2,-8(fp)
81108104:	10bfffec 	andhi	r2,r2,65535
81108108:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_11_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA11 >> 0));
8110810c:	e0bfff17 	ldw	r2,-4(fp)
81108110:	10803f0b 	ldhu	r2,252(r2)
81108114:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_25_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_11_MSK);
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_11_MSK
81108118:	e0fffe17 	ldw	r3,-8(fp)
8110811c:	1884b03a 	or	r2,r3,r2
81108120:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA11 >> 0));
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_12_MSK);
81108124:	e0bffe17 	ldw	r2,-8(fp)
81108128:	10bfffcc 	andi	r2,r2,65535
8110812c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_12_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA12 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_25_REG_OFST,
81108130:	e0bfff17 	ldw	r2,-4(fp)
81108134:	10800017 	ldw	r2,0(r2)
81108138:	e1bffe17 	ldw	r6,-8(fp)
8110813c:	01402e44 	movi	r5,185
81108140:	1009883a 	mov	r4,r2
81108144:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108148:	e0bfff17 	ldw	r2,-4(fp)
8110814c:	10800017 	ldw	r2,0(r2)
81108150:	01402e84 	movi	r5,186
81108154:	1009883a 	mov	r4,r2
81108158:	1108d540 	call	81108d54 <uliRmapReadReg>
8110815c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_26_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_13_MSK);
81108160:	e0bffe17 	ldw	r2,-8(fp)
81108164:	10bfffec 	andhi	r2,r2,65535
81108168:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_13_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA13 >> 0));
8110816c:	e0bfff17 	ldw	r2,-4(fp)
81108170:	1080400b 	ldhu	r2,256(r2)
81108174:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_26_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_13_MSK);
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_13_MSK
81108178:	e0fffe17 	ldw	r3,-8(fp)
8110817c:	1884b03a 	or	r2,r3,r2
81108180:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA13 >> 0));
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_14_MSK);
81108184:	e0bffe17 	ldw	r2,-8(fp)
81108188:	10bfffcc 	andi	r2,r2,65535
8110818c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_14_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA14 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_26_REG_OFST,
81108190:	e0bfff17 	ldw	r2,-4(fp)
81108194:	10800017 	ldw	r2,0(r2)
81108198:	e1bffe17 	ldw	r6,-8(fp)
8110819c:	01402e84 	movi	r5,186
811081a0:	1009883a 	mov	r4,r2
811081a4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811081a8:	e0bfff17 	ldw	r2,-4(fp)
811081ac:	10800017 	ldw	r2,0(r2)
811081b0:	01402ec4 	movi	r5,187
811081b4:	1009883a 	mov	r4,r2
811081b8:	1108d540 	call	81108d54 <uliRmapReadReg>
811081bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_27_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_15_MSK);
811081c0:	e0bffe17 	ldw	r2,-8(fp)
811081c4:	10bfffec 	andhi	r2,r2,65535
811081c8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_15_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA15 >> 0));
811081cc:	e0bfff17 	ldw	r2,-4(fp)
811081d0:	1080410b 	ldhu	r2,260(r2)
811081d4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_27_REG_OFST);
		uliReg &= (~COMM_RMAP_LOWRES_PRT_A_15_MSK);
		uliReg |= (COMM_RMAP_LOWRES_PRT_A_15_MSK
811081d8:	e0fffe17 	ldw	r3,-8(fp)
811081dc:	1884b03a 	or	r2,r3,r2
811081e0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiLowresPrtA15 >> 0));
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT0_MSK);
811081e4:	e0bffe17 	ldw	r2,-8(fp)
811081e8:	10bfffcc 	andi	r2,r2,65535
811081ec:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT0_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt0 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_27_REG_OFST,
811081f0:	e0bfff17 	ldw	r2,-4(fp)
811081f4:	10800017 	ldw	r2,0(r2)
811081f8:	e1bffe17 	ldw	r6,-8(fp)
811081fc:	01402ec4 	movi	r5,187
81108200:	1009883a 	mov	r4,r2
81108204:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108208:	e0bfff17 	ldw	r2,-4(fp)
8110820c:	10800017 	ldw	r2,0(r2)
81108210:	01402f04 	movi	r5,188
81108214:	1009883a 	mov	r4,r2
81108218:	1108d540 	call	81108d54 <uliRmapReadReg>
8110821c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_28_REG_OFST);
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT1_MSK);
81108220:	e0bffe17 	ldw	r2,-8(fp)
81108224:	10bfffec 	andhi	r2,r2,65535
81108228:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT1_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt1 >> 0));
8110822c:	e0bfff17 	ldw	r2,-4(fp)
81108230:	1080420b 	ldhu	r2,264(r2)
81108234:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_28_REG_OFST);
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT1_MSK);
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT1_MSK
81108238:	e0fffe17 	ldw	r3,-8(fp)
8110823c:	1884b03a 	or	r2,r3,r2
81108240:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt1 >> 0));
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT2_MSK);
81108244:	e0bffe17 	ldw	r2,-8(fp)
81108248:	10bfffcc 	andi	r2,r2,65535
8110824c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT2_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt2 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_28_REG_OFST,
81108250:	e0bfff17 	ldw	r2,-4(fp)
81108254:	10800017 	ldw	r2,0(r2)
81108258:	e1bffe17 	ldw	r6,-8(fp)
8110825c:	01402f04 	movi	r5,188
81108260:	1009883a 	mov	r4,r2
81108264:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108268:	e0bfff17 	ldw	r2,-4(fp)
8110826c:	10800017 	ldw	r2,0(r2)
81108270:	01402f44 	movi	r5,189
81108274:	1009883a 	mov	r4,r2
81108278:	1108d540 	call	81108d54 <uliRmapReadReg>
8110827c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_29_REG_OFST);
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT3_MSK);
81108280:	e0bffe17 	ldw	r2,-8(fp)
81108284:	10bfffec 	andhi	r2,r2,65535
81108288:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT3_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt3 >> 0));
8110828c:	e0bfff17 	ldw	r2,-4(fp)
81108290:	1080430b 	ldhu	r2,268(r2)
81108294:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_29_REG_OFST);
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT3_MSK);
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT3_MSK
81108298:	e0fffe17 	ldw	r3,-8(fp)
8110829c:	1884b03a 	or	r2,r3,r2
811082a0:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt3 >> 0));
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT4_MSK);
811082a4:	e0bffe17 	ldw	r2,-8(fp)
811082a8:	10bfffcc 	andi	r2,r2,65535
811082ac:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT4_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt4 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_29_REG_OFST,
811082b0:	e0bfff17 	ldw	r2,-4(fp)
811082b4:	10800017 	ldw	r2,0(r2)
811082b8:	e1bffe17 	ldw	r6,-8(fp)
811082bc:	01402f44 	movi	r5,189
811082c0:	1009883a 	mov	r4,r2
811082c4:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811082c8:	e0bfff17 	ldw	r2,-4(fp)
811082cc:	10800017 	ldw	r2,0(r2)
811082d0:	01402f84 	movi	r5,190
811082d4:	1009883a 	mov	r4,r2
811082d8:	1108d540 	call	81108d54 <uliRmapReadReg>
811082dc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_30_REG_OFST);
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT5_MSK);
811082e0:	e0bffe17 	ldw	r2,-8(fp)
811082e4:	10bfffec 	andhi	r2,r2,65535
811082e8:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT5_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt5 >> 0));
811082ec:	e0bfff17 	ldw	r2,-4(fp)
811082f0:	1080440b 	ldhu	r2,272(r2)
811082f4:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_30_REG_OFST);
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT5_MSK);
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT5_MSK
811082f8:	e0fffe17 	ldw	r3,-8(fp)
811082fc:	1884b03a 	or	r2,r3,r2
81108300:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt5 >> 0));
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT6_MSK);
81108304:	e0bffe17 	ldw	r2,-8(fp)
81108308:	10bfffcc 	andi	r2,r2,65535
8110830c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT6_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt6 >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_30_REG_OFST,
81108310:	e0bfff17 	ldw	r2,-4(fp)
81108314:	10800017 	ldw	r2,0(r2)
81108318:	e1bffe17 	ldw	r6,-8(fp)
8110831c:	01402f84 	movi	r5,190
81108320:	1009883a 	mov	r4,r2
81108324:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108328:	e0bfff17 	ldw	r2,-4(fp)
8110832c:	10800017 	ldw	r2,0(r2)
81108330:	01402fc4 	movi	r5,191
81108334:	1009883a 	mov	r4,r2
81108338:	1108d540 	call	81108d54 <uliRmapReadReg>
8110833c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_31_REG_OFST);
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT7_MSK);
81108340:	e0bffe17 	ldw	r2,-8(fp)
81108344:	10bfffec 	andhi	r2,r2,65535
81108348:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT7_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt7 >> 0));
8110834c:	e0bfff17 	ldw	r2,-4(fp)
81108350:	1080450b 	ldhu	r2,276(r2)
81108354:	10bfffcc 	andi	r2,r2,65535
				uliReg);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_31_REG_OFST);
		uliReg &= (~COMM_RMAP_SEL_HIRES_PRT7_MSK);
		uliReg |= (COMM_RMAP_SEL_HIRES_PRT7_MSK
81108358:	e0fffe17 	ldw	r3,-8(fp)
8110835c:	1884b03a 	or	r2,r3,r2
81108360:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiSelHiresPrt7 >> 0));
		uliReg &= (~COMM_RMAP_ZERO_HIRES_AMP_MSK);
81108364:	e0bffe17 	ldw	r2,-8(fp)
81108368:	10bfffcc 	andi	r2,r2,65535
8110836c:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_RMAP_ZERO_HIRES_AMP_MSK
				& (alt_u32) (pxRmapCh->xRmapMemHKArea.usiZeroHiresAmp >> 16));
		vRmapWriteReg(pxRmapCh->puliRmapChAddr, COMM_RMAP_HK_31_REG_OFST,
81108370:	e0bfff17 	ldw	r2,-4(fp)
81108374:	10800017 	ldw	r2,0(r2)
81108378:	e1bffe17 	ldw	r6,-8(fp)
8110837c:	01402fc4 	movi	r5,191
81108380:	1009883a 	mov	r4,r2
81108384:	1108d080 	call	81108d08 <vRmapWriteReg>
				uliReg);

		bStatus = TRUE;
81108388:	00800044 	movi	r2,1
8110838c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81108390:	e0bffd17 	ldw	r2,-12(fp)
}
81108394:	e037883a 	mov	sp,fp
81108398:	dfc00117 	ldw	ra,4(sp)
8110839c:	df000017 	ldw	fp,0(sp)
811083a0:	dec00204 	addi	sp,sp,8
811083a4:	f800283a 	ret

811083a8 <bRmapGetRmapMemHKArea>:

bool bRmapGetRmapMemHKArea(TRmapChannel *pxRmapCh) {
811083a8:	defffb04 	addi	sp,sp,-20
811083ac:	dfc00415 	stw	ra,16(sp)
811083b0:	df000315 	stw	fp,12(sp)
811083b4:	df000304 	addi	fp,sp,12
811083b8:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811083bc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811083c0:	e03ffe15 	stw	zero,-8(fp)

	if (pxRmapCh != NULL) {
811083c4:	e0bfff17 	ldw	r2,-4(fp)
811083c8:	1001e226 	beq	r2,zero,81108b54 <bRmapGetRmapMemHKArea+0x7ac>

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811083cc:	e0bfff17 	ldw	r2,-4(fp)
811083d0:	10800017 	ldw	r2,0(r2)
811083d4:	01402804 	movi	r5,160
811083d8:	1009883a 	mov	r4,r2
811083dc:	1108d540 	call	81108d54 <uliRmapReadReg>
811083e0:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_0_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd1VodE = (alt_u16) ((uliReg
811083e4:	e0bffe17 	ldw	r2,-8(fp)
811083e8:	1007883a 	mov	r3,r2
811083ec:	e0bfff17 	ldw	r2,-4(fp)
811083f0:	10c0260d 	sth	r3,152(r2)
				& COMM_RMAP_HK_CCD1_VOD_E_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd1VodF = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD1_VOD_F_MSK) >> 16);
811083f4:	e0bffe17 	ldw	r2,-8(fp)
811083f8:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_0_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd1VodE = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD1_VOD_E_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd1VodF = (alt_u16) ((uliReg
811083fc:	1007883a 	mov	r3,r2
81108400:	e0bfff17 	ldw	r2,-4(fp)
81108404:	10c0268d 	sth	r3,154(r2)
				& COMM_RMAP_HK_CCD1_VOD_F_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108408:	e0bfff17 	ldw	r2,-4(fp)
8110840c:	10800017 	ldw	r2,0(r2)
81108410:	01402844 	movi	r5,161
81108414:	1009883a 	mov	r4,r2
81108418:	1108d540 	call	81108d54 <uliRmapReadReg>
8110841c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_1_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd1VrdMon = (alt_u16) ((uliReg
81108420:	e0bffe17 	ldw	r2,-8(fp)
81108424:	1007883a 	mov	r3,r2
81108428:	e0bfff17 	ldw	r2,-4(fp)
8110842c:	10c0270d 	sth	r3,156(r2)
				& COMM_RMAP_HK_CCD1_VRD_MON_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd2VodE = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD2_VOD_E_MSK) >> 16);
81108430:	e0bffe17 	ldw	r2,-8(fp)
81108434:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_1_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd1VrdMon = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD1_VRD_MON_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd2VodE = (alt_u16) ((uliReg
81108438:	1007883a 	mov	r3,r2
8110843c:	e0bfff17 	ldw	r2,-4(fp)
81108440:	10c0278d 	sth	r3,158(r2)
				& COMM_RMAP_HK_CCD2_VOD_E_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108444:	e0bfff17 	ldw	r2,-4(fp)
81108448:	10800017 	ldw	r2,0(r2)
8110844c:	01402884 	movi	r5,162
81108450:	1009883a 	mov	r4,r2
81108454:	1108d540 	call	81108d54 <uliRmapReadReg>
81108458:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_2_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd2VodF = (alt_u16) ((uliReg
8110845c:	e0bffe17 	ldw	r2,-8(fp)
81108460:	1007883a 	mov	r3,r2
81108464:	e0bfff17 	ldw	r2,-4(fp)
81108468:	10c0280d 	sth	r3,160(r2)
				& COMM_RMAP_HK_CCD2_VOD_F_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd2VrdMon = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD2_VRD_MON_MSK) >> 16);
8110846c:	e0bffe17 	ldw	r2,-8(fp)
81108470:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_2_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd2VodF = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD2_VOD_F_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd2VrdMon = (alt_u16) ((uliReg
81108474:	1007883a 	mov	r3,r2
81108478:	e0bfff17 	ldw	r2,-4(fp)
8110847c:	10c0288d 	sth	r3,162(r2)
				& COMM_RMAP_HK_CCD2_VRD_MON_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108480:	e0bfff17 	ldw	r2,-4(fp)
81108484:	10800017 	ldw	r2,0(r2)
81108488:	014028c4 	movi	r5,163
8110848c:	1009883a 	mov	r4,r2
81108490:	1108d540 	call	81108d54 <uliRmapReadReg>
81108494:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_3_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd3VodE = (alt_u16) ((uliReg
81108498:	e0bffe17 	ldw	r2,-8(fp)
8110849c:	1007883a 	mov	r3,r2
811084a0:	e0bfff17 	ldw	r2,-4(fp)
811084a4:	10c0290d 	sth	r3,164(r2)
				& COMM_RMAP_HK_CCD3_VOD_E_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd3VodF = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD3_VOD_F_MSK) >> 16);
811084a8:	e0bffe17 	ldw	r2,-8(fp)
811084ac:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_3_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd3VodE = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD3_VOD_E_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd3VodF = (alt_u16) ((uliReg
811084b0:	1007883a 	mov	r3,r2
811084b4:	e0bfff17 	ldw	r2,-4(fp)
811084b8:	10c0298d 	sth	r3,166(r2)
				& COMM_RMAP_HK_CCD3_VOD_F_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811084bc:	e0bfff17 	ldw	r2,-4(fp)
811084c0:	10800017 	ldw	r2,0(r2)
811084c4:	01402904 	movi	r5,164
811084c8:	1009883a 	mov	r4,r2
811084cc:	1108d540 	call	81108d54 <uliRmapReadReg>
811084d0:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_4_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd3VrdMon = (alt_u16) ((uliReg
811084d4:	e0bffe17 	ldw	r2,-8(fp)
811084d8:	1007883a 	mov	r3,r2
811084dc:	e0bfff17 	ldw	r2,-4(fp)
811084e0:	10c02a0d 	sth	r3,168(r2)
				& COMM_RMAP_HK_CCD3_VRD_MON_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd4VodE = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD4_VOD_E_MSK) >> 16);
811084e4:	e0bffe17 	ldw	r2,-8(fp)
811084e8:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_4_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd3VrdMon = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD3_VRD_MON_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd4VodE = (alt_u16) ((uliReg
811084ec:	1007883a 	mov	r3,r2
811084f0:	e0bfff17 	ldw	r2,-4(fp)
811084f4:	10c02a8d 	sth	r3,170(r2)
				& COMM_RMAP_HK_CCD4_VOD_E_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811084f8:	e0bfff17 	ldw	r2,-4(fp)
811084fc:	10800017 	ldw	r2,0(r2)
81108500:	01402944 	movi	r5,165
81108504:	1009883a 	mov	r4,r2
81108508:	1108d540 	call	81108d54 <uliRmapReadReg>
8110850c:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_5_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd4VodF = (alt_u16) ((uliReg
81108510:	e0bffe17 	ldw	r2,-8(fp)
81108514:	1007883a 	mov	r3,r2
81108518:	e0bfff17 	ldw	r2,-4(fp)
8110851c:	10c02b0d 	sth	r3,172(r2)
				& COMM_RMAP_HK_CCD4_VOD_F_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd4VrdMon = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD4_VRD_MON_MSK) >> 16);
81108520:	e0bffe17 	ldw	r2,-8(fp)
81108524:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_5_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd4VodF = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD4_VOD_F_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd4VrdMon = (alt_u16) ((uliReg
81108528:	1007883a 	mov	r3,r2
8110852c:	e0bfff17 	ldw	r2,-4(fp)
81108530:	10c02b8d 	sth	r3,174(r2)
				& COMM_RMAP_HK_CCD4_VRD_MON_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108534:	e0bfff17 	ldw	r2,-4(fp)
81108538:	10800017 	ldw	r2,0(r2)
8110853c:	01402984 	movi	r5,166
81108540:	1009883a 	mov	r4,r2
81108544:	1108d540 	call	81108d54 <uliRmapReadReg>
81108548:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_6_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkVccd = (alt_u16) ((uliReg
8110854c:	e0bffe17 	ldw	r2,-8(fp)
81108550:	1007883a 	mov	r3,r2
81108554:	e0bfff17 	ldw	r2,-4(fp)
81108558:	10c02c0d 	sth	r3,176(r2)
				& COMM_RMAP_HK_VCCD_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkVrclk = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VRCLK_MSK) >> 16);
8110855c:	e0bffe17 	ldw	r2,-8(fp)
81108560:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_6_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkVccd = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VCCD_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkVrclk = (alt_u16) ((uliReg
81108564:	1007883a 	mov	r3,r2
81108568:	e0bfff17 	ldw	r2,-4(fp)
8110856c:	10c02c8d 	sth	r3,178(r2)
				& COMM_RMAP_HK_VRCLK_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108570:	e0bfff17 	ldw	r2,-4(fp)
81108574:	10800017 	ldw	r2,0(r2)
81108578:	014029c4 	movi	r5,167
8110857c:	1009883a 	mov	r4,r2
81108580:	1108d540 	call	81108d54 <uliRmapReadReg>
81108584:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_7_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkViclk = (alt_u16) ((uliReg
81108588:	e0bffe17 	ldw	r2,-8(fp)
8110858c:	1007883a 	mov	r3,r2
81108590:	e0bfff17 	ldw	r2,-4(fp)
81108594:	10c02d0d 	sth	r3,180(r2)
				& COMM_RMAP_HK_VICLK_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkVrclkLow = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VRCLK_LOW_MSK) >> 16);
81108598:	e0bffe17 	ldw	r2,-8(fp)
8110859c:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_7_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkViclk = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VICLK_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkVrclkLow = (alt_u16) ((uliReg
811085a0:	1007883a 	mov	r3,r2
811085a4:	e0bfff17 	ldw	r2,-4(fp)
811085a8:	10c02d8d 	sth	r3,182(r2)
				& COMM_RMAP_HK_VRCLK_LOW_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811085ac:	e0bfff17 	ldw	r2,-4(fp)
811085b0:	10800017 	ldw	r2,0(r2)
811085b4:	01402a04 	movi	r5,168
811085b8:	1009883a 	mov	r4,r2
811085bc:	1108d540 	call	81108d54 <uliRmapReadReg>
811085c0:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_8_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHk5vbPos = (alt_u16) ((uliReg
811085c4:	e0bffe17 	ldw	r2,-8(fp)
811085c8:	1007883a 	mov	r3,r2
811085cc:	e0bfff17 	ldw	r2,-4(fp)
811085d0:	10c02e0d 	sth	r3,184(r2)
				& COMM_RMAP_HK_5VB_POS_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHk5vbNeg = (alt_u16) ((uliReg
				& COMM_RMAP_HK_5VB_NEG_MSK) >> 16);
811085d4:	e0bffe17 	ldw	r2,-8(fp)
811085d8:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_8_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHk5vbPos = (alt_u16) ((uliReg
				& COMM_RMAP_HK_5VB_POS_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHk5vbNeg = (alt_u16) ((uliReg
811085dc:	1007883a 	mov	r3,r2
811085e0:	e0bfff17 	ldw	r2,-4(fp)
811085e4:	10c02e8d 	sth	r3,186(r2)
				& COMM_RMAP_HK_5VB_NEG_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811085e8:	e0bfff17 	ldw	r2,-4(fp)
811085ec:	10800017 	ldw	r2,0(r2)
811085f0:	01402a44 	movi	r5,169
811085f4:	1009883a 	mov	r4,r2
811085f8:	1108d540 	call	81108d54 <uliRmapReadReg>
811085fc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_9_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHk33vbPos = (alt_u16) ((uliReg
81108600:	e0bffe17 	ldw	r2,-8(fp)
81108604:	1007883a 	mov	r3,r2
81108608:	e0bfff17 	ldw	r2,-4(fp)
8110860c:	10c02f0d 	sth	r3,188(r2)
				& COMM_RMAP_HK_3_3VB_POS_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHk25vaPos = (alt_u16) ((uliReg
				& COMM_RMAP_HK_2_5VA_POS_MSK) >> 16);
81108610:	e0bffe17 	ldw	r2,-8(fp)
81108614:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_9_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHk33vbPos = (alt_u16) ((uliReg
				& COMM_RMAP_HK_3_3VB_POS_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHk25vaPos = (alt_u16) ((uliReg
81108618:	1007883a 	mov	r3,r2
8110861c:	e0bfff17 	ldw	r2,-4(fp)
81108620:	10c02f8d 	sth	r3,190(r2)
				& COMM_RMAP_HK_2_5VA_POS_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108624:	e0bfff17 	ldw	r2,-4(fp)
81108628:	10800017 	ldw	r2,0(r2)
8110862c:	01402a84 	movi	r5,170
81108630:	1009883a 	mov	r4,r2
81108634:	1108d540 	call	81108d54 <uliRmapReadReg>
81108638:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_10_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHk33vdPos = (alt_u16) ((uliReg
8110863c:	e0bffe17 	ldw	r2,-8(fp)
81108640:	1007883a 	mov	r3,r2
81108644:	e0bfff17 	ldw	r2,-4(fp)
81108648:	10c0300d 	sth	r3,192(r2)
				& COMM_RMAP_HK_3_3VD_POS_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHk25vdPos = (alt_u16) ((uliReg
				& COMM_RMAP_HK_2_5VD_POS_MSK) >> 16);
8110864c:	e0bffe17 	ldw	r2,-8(fp)
81108650:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_10_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHk33vdPos = (alt_u16) ((uliReg
				& COMM_RMAP_HK_3_3VD_POS_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHk25vdPos = (alt_u16) ((uliReg
81108654:	1007883a 	mov	r3,r2
81108658:	e0bfff17 	ldw	r2,-4(fp)
8110865c:	10c0308d 	sth	r3,194(r2)
				& COMM_RMAP_HK_2_5VD_POS_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108660:	e0bfff17 	ldw	r2,-4(fp)
81108664:	10800017 	ldw	r2,0(r2)
81108668:	01402ac4 	movi	r5,171
8110866c:	1009883a 	mov	r4,r2
81108670:	1108d540 	call	81108d54 <uliRmapReadReg>
81108674:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_11_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHk15vdPos = (alt_u16) ((uliReg
81108678:	e0bffe17 	ldw	r2,-8(fp)
8110867c:	1007883a 	mov	r3,r2
81108680:	e0bfff17 	ldw	r2,-4(fp)
81108684:	10c0310d 	sth	r3,196(r2)
				& COMM_RMAP_HK_1_5VD_POS_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHk5vref = (alt_u16) ((uliReg
				& COMM_RMAP_HK_5VREF_MSK) >> 16);
81108688:	e0bffe17 	ldw	r2,-8(fp)
8110868c:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_11_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHk15vdPos = (alt_u16) ((uliReg
				& COMM_RMAP_HK_1_5VD_POS_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHk5vref = (alt_u16) ((uliReg
81108690:	1007883a 	mov	r3,r2
81108694:	e0bfff17 	ldw	r2,-4(fp)
81108698:	10c0318d 	sth	r3,198(r2)
				& COMM_RMAP_HK_5VREF_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
8110869c:	e0bfff17 	ldw	r2,-4(fp)
811086a0:	10800017 	ldw	r2,0(r2)
811086a4:	01402b04 	movi	r5,172
811086a8:	1009883a 	mov	r4,r2
811086ac:	1108d540 	call	81108d54 <uliRmapReadReg>
811086b0:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_12_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkVccdPosRaw = (alt_u16) ((uliReg
811086b4:	e0bffe17 	ldw	r2,-8(fp)
811086b8:	1007883a 	mov	r3,r2
811086bc:	e0bfff17 	ldw	r2,-4(fp)
811086c0:	10c0320d 	sth	r3,200(r2)
				& COMM_RMAP_HK_VCCD_POS_RAW_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkVclkPosRaw = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VCLK_POS_RAW_MSK) >> 16);
811086c4:	e0bffe17 	ldw	r2,-8(fp)
811086c8:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_12_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkVccdPosRaw = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VCCD_POS_RAW_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkVclkPosRaw = (alt_u16) ((uliReg
811086cc:	1007883a 	mov	r3,r2
811086d0:	e0bfff17 	ldw	r2,-4(fp)
811086d4:	10c0328d 	sth	r3,202(r2)
				& COMM_RMAP_HK_VCLK_POS_RAW_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811086d8:	e0bfff17 	ldw	r2,-4(fp)
811086dc:	10800017 	ldw	r2,0(r2)
811086e0:	01402b44 	movi	r5,173
811086e4:	1009883a 	mov	r4,r2
811086e8:	1108d540 	call	81108d54 <uliRmapReadReg>
811086ec:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_13_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkVan1PosRaw = (alt_u16) ((uliReg
811086f0:	e0bffe17 	ldw	r2,-8(fp)
811086f4:	1007883a 	mov	r3,r2
811086f8:	e0bfff17 	ldw	r2,-4(fp)
811086fc:	10c0330d 	sth	r3,204(r2)
				& COMM_RMAP_HK_VAN1_POS_RAW_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkVan3NegRaw = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VAN3_NEG_RAW_MSK) >> 16);
81108700:	e0bffe17 	ldw	r2,-8(fp)
81108704:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_13_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkVan1PosRaw = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VAN1_POS_RAW_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkVan3NegRaw = (alt_u16) ((uliReg
81108708:	1007883a 	mov	r3,r2
8110870c:	e0bfff17 	ldw	r2,-4(fp)
81108710:	10c0338d 	sth	r3,206(r2)
				& COMM_RMAP_HK_VAN3_NEG_RAW_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108714:	e0bfff17 	ldw	r2,-4(fp)
81108718:	10800017 	ldw	r2,0(r2)
8110871c:	01402b84 	movi	r5,174
81108720:	1009883a 	mov	r4,r2
81108724:	1108d540 	call	81108d54 <uliRmapReadReg>
81108728:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_14_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkVan2PosRaw = (alt_u16) ((uliReg
8110872c:	e0bffe17 	ldw	r2,-8(fp)
81108730:	1007883a 	mov	r3,r2
81108734:	e0bfff17 	ldw	r2,-4(fp)
81108738:	10c0340d 	sth	r3,208(r2)
				& COMM_RMAP_HK_VAN2_POS_RAW_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkVdigFpgaRaw = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VDIG_FPGA_RAW_MSK) >> 16);
8110873c:	e0bffe17 	ldw	r2,-8(fp)
81108740:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_14_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkVan2PosRaw = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VAN2_POS_RAW_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkVdigFpgaRaw = (alt_u16) ((uliReg
81108744:	1007883a 	mov	r3,r2
81108748:	e0bfff17 	ldw	r2,-4(fp)
8110874c:	10c0348d 	sth	r3,210(r2)
				& COMM_RMAP_HK_VDIG_FPGA_RAW_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108750:	e0bfff17 	ldw	r2,-4(fp)
81108754:	10800017 	ldw	r2,0(r2)
81108758:	01402bc4 	movi	r5,175
8110875c:	1009883a 	mov	r4,r2
81108760:	1108d540 	call	81108d54 <uliRmapReadReg>
81108764:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_15_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkVdigSpwRaw = (alt_u16) ((uliReg
81108768:	e0bffe17 	ldw	r2,-8(fp)
8110876c:	1007883a 	mov	r3,r2
81108770:	e0bfff17 	ldw	r2,-4(fp)
81108774:	10c0350d 	sth	r3,212(r2)
				& COMM_RMAP_HK_VDIG_SPW_RAW_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkViclkLow = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VICLK_LOW_MSK) >> 16);
81108778:	e0bffe17 	ldw	r2,-8(fp)
8110877c:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_15_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkVdigSpwRaw = (alt_u16) ((uliReg
				& COMM_RMAP_HK_VDIG_SPW_RAW_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkViclkLow = (alt_u16) ((uliReg
81108780:	1007883a 	mov	r3,r2
81108784:	e0bfff17 	ldw	r2,-4(fp)
81108788:	10c0358d 	sth	r3,214(r2)
				& COMM_RMAP_HK_VICLK_LOW_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
8110878c:	e0bfff17 	ldw	r2,-4(fp)
81108790:	10800017 	ldw	r2,0(r2)
81108794:	01402c04 	movi	r5,176
81108798:	1009883a 	mov	r4,r2
8110879c:	1108d540 	call	81108d54 <uliRmapReadReg>
811087a0:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_16_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkAdcTempAE = (alt_u16) ((uliReg
811087a4:	e0bffe17 	ldw	r2,-8(fp)
811087a8:	1007883a 	mov	r3,r2
811087ac:	e0bfff17 	ldw	r2,-4(fp)
811087b0:	10c0360d 	sth	r3,216(r2)
				& COMM_RMAP_HK_ADC_TEMP_A_E_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkAdcTempAF = (alt_u16) ((uliReg
				& COMM_RMAP_HK_ADC_TEMP_A_F_MSK) >> 16);
811087b4:	e0bffe17 	ldw	r2,-8(fp)
811087b8:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_16_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkAdcTempAE = (alt_u16) ((uliReg
				& COMM_RMAP_HK_ADC_TEMP_A_E_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkAdcTempAF = (alt_u16) ((uliReg
811087bc:	1007883a 	mov	r3,r2
811087c0:	e0bfff17 	ldw	r2,-4(fp)
811087c4:	10c0368d 	sth	r3,218(r2)
				& COMM_RMAP_HK_ADC_TEMP_A_F_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811087c8:	e0bfff17 	ldw	r2,-4(fp)
811087cc:	10800017 	ldw	r2,0(r2)
811087d0:	01402c44 	movi	r5,177
811087d4:	1009883a 	mov	r4,r2
811087d8:	1108d540 	call	81108d54 <uliRmapReadReg>
811087dc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_17_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd1Temp = (alt_u16) ((uliReg
811087e0:	e0bffe17 	ldw	r2,-8(fp)
811087e4:	1007883a 	mov	r3,r2
811087e8:	e0bfff17 	ldw	r2,-4(fp)
811087ec:	10c0370d 	sth	r3,220(r2)
				& COMM_RMAP_HK_CCD1_TEMP_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd2Temp = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD2_TEMP_MSK) >> 16);
811087f0:	e0bffe17 	ldw	r2,-8(fp)
811087f4:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_17_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd1Temp = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD1_TEMP_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd2Temp = (alt_u16) ((uliReg
811087f8:	1007883a 	mov	r3,r2
811087fc:	e0bfff17 	ldw	r2,-4(fp)
81108800:	10c0378d 	sth	r3,222(r2)
				& COMM_RMAP_HK_CCD2_TEMP_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108804:	e0bfff17 	ldw	r2,-4(fp)
81108808:	10800017 	ldw	r2,0(r2)
8110880c:	01402c84 	movi	r5,178
81108810:	1009883a 	mov	r4,r2
81108814:	1108d540 	call	81108d54 <uliRmapReadReg>
81108818:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_18_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd3Temp = (alt_u16) ((uliReg
8110881c:	e0bffe17 	ldw	r2,-8(fp)
81108820:	1007883a 	mov	r3,r2
81108824:	e0bfff17 	ldw	r2,-4(fp)
81108828:	10c0380d 	sth	r3,224(r2)
				& COMM_RMAP_HK_CCD3_TEMP_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd4Temp = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD4_TEMP_MSK) >> 16);
8110882c:	e0bffe17 	ldw	r2,-8(fp)
81108830:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_18_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkCcd3Temp = (alt_u16) ((uliReg
				& COMM_RMAP_HK_CCD3_TEMP_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiHkCcd4Temp = (alt_u16) ((uliReg
81108834:	1007883a 	mov	r3,r2
81108838:	e0bfff17 	ldw	r2,-4(fp)
8110883c:	10c0388d 	sth	r3,226(r2)
				& COMM_RMAP_HK_CCD4_TEMP_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108840:	e0bfff17 	ldw	r2,-4(fp)
81108844:	10800017 	ldw	r2,0(r2)
81108848:	01402cc4 	movi	r5,179
8110884c:	1009883a 	mov	r4,r2
81108850:	1108d540 	call	81108d54 <uliRmapReadReg>
81108854:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_19_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkWp605Spare = (alt_u16) ((uliReg
81108858:	e0bffe17 	ldw	r2,-8(fp)
8110885c:	1007883a 	mov	r3,r2
81108860:	e0bfff17 	ldw	r2,-4(fp)
81108864:	10c0390d 	sth	r3,228(r2)
				& COMM_RMAP_HK_WP605_SPARE_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA0 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_0_MSK) >> 16);
81108868:	e0bffe17 	ldw	r2,-8(fp)
8110886c:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_19_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiHkWp605Spare = (alt_u16) ((uliReg
				& COMM_RMAP_HK_WP605_SPARE_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA0 = (alt_u16) ((uliReg
81108870:	1007883a 	mov	r3,r2
81108874:	e0bfff17 	ldw	r2,-4(fp)
81108878:	10c0398d 	sth	r3,230(r2)
				& COMM_RMAP_LOWRES_PRT_A_0_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
8110887c:	e0bfff17 	ldw	r2,-4(fp)
81108880:	10800017 	ldw	r2,0(r2)
81108884:	01402d04 	movi	r5,180
81108888:	1009883a 	mov	r4,r2
8110888c:	1108d540 	call	81108d54 <uliRmapReadReg>
81108890:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_20_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA1 = (alt_u16) ((uliReg
81108894:	e0bffe17 	ldw	r2,-8(fp)
81108898:	1007883a 	mov	r3,r2
8110889c:	e0bfff17 	ldw	r2,-4(fp)
811088a0:	10c03a0d 	sth	r3,232(r2)
				& COMM_RMAP_LOWRES_PRT_A_1_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA2 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_2_MSK) >> 16);
811088a4:	e0bffe17 	ldw	r2,-8(fp)
811088a8:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_20_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA1 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_1_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA2 = (alt_u16) ((uliReg
811088ac:	1007883a 	mov	r3,r2
811088b0:	e0bfff17 	ldw	r2,-4(fp)
811088b4:	10c03a8d 	sth	r3,234(r2)
				& COMM_RMAP_LOWRES_PRT_A_2_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811088b8:	e0bfff17 	ldw	r2,-4(fp)
811088bc:	10800017 	ldw	r2,0(r2)
811088c0:	01402d44 	movi	r5,181
811088c4:	1009883a 	mov	r4,r2
811088c8:	1108d540 	call	81108d54 <uliRmapReadReg>
811088cc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_21_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA3 = (alt_u16) ((uliReg
811088d0:	e0bffe17 	ldw	r2,-8(fp)
811088d4:	1007883a 	mov	r3,r2
811088d8:	e0bfff17 	ldw	r2,-4(fp)
811088dc:	10c03b0d 	sth	r3,236(r2)
				& COMM_RMAP_LOWRES_PRT_A_3_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA4 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_4_MSK) >> 16);
811088e0:	e0bffe17 	ldw	r2,-8(fp)
811088e4:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_21_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA3 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_3_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA4 = (alt_u16) ((uliReg
811088e8:	1007883a 	mov	r3,r2
811088ec:	e0bfff17 	ldw	r2,-4(fp)
811088f0:	10c03b8d 	sth	r3,238(r2)
				& COMM_RMAP_LOWRES_PRT_A_4_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811088f4:	e0bfff17 	ldw	r2,-4(fp)
811088f8:	10800017 	ldw	r2,0(r2)
811088fc:	01402d84 	movi	r5,182
81108900:	1009883a 	mov	r4,r2
81108904:	1108d540 	call	81108d54 <uliRmapReadReg>
81108908:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_22_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA5 = (alt_u16) ((uliReg
8110890c:	e0bffe17 	ldw	r2,-8(fp)
81108910:	1007883a 	mov	r3,r2
81108914:	e0bfff17 	ldw	r2,-4(fp)
81108918:	10c03c0d 	sth	r3,240(r2)
				& COMM_RMAP_LOWRES_PRT_A_5_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA6 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_6_MSK) >> 16);
8110891c:	e0bffe17 	ldw	r2,-8(fp)
81108920:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_22_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA5 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_5_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA6 = (alt_u16) ((uliReg
81108924:	1007883a 	mov	r3,r2
81108928:	e0bfff17 	ldw	r2,-4(fp)
8110892c:	10c03c8d 	sth	r3,242(r2)
				& COMM_RMAP_LOWRES_PRT_A_6_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108930:	e0bfff17 	ldw	r2,-4(fp)
81108934:	10800017 	ldw	r2,0(r2)
81108938:	01402dc4 	movi	r5,183
8110893c:	1009883a 	mov	r4,r2
81108940:	1108d540 	call	81108d54 <uliRmapReadReg>
81108944:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_23_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA7 = (alt_u16) ((uliReg
81108948:	e0bffe17 	ldw	r2,-8(fp)
8110894c:	1007883a 	mov	r3,r2
81108950:	e0bfff17 	ldw	r2,-4(fp)
81108954:	10c03d0d 	sth	r3,244(r2)
				& COMM_RMAP_LOWRES_PRT_A_7_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA8 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_8_MSK) >> 16);
81108958:	e0bffe17 	ldw	r2,-8(fp)
8110895c:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_23_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA7 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_7_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA8 = (alt_u16) ((uliReg
81108960:	1007883a 	mov	r3,r2
81108964:	e0bfff17 	ldw	r2,-4(fp)
81108968:	10c03d8d 	sth	r3,246(r2)
				& COMM_RMAP_LOWRES_PRT_A_8_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
8110896c:	e0bfff17 	ldw	r2,-4(fp)
81108970:	10800017 	ldw	r2,0(r2)
81108974:	01402e04 	movi	r5,184
81108978:	1009883a 	mov	r4,r2
8110897c:	1108d540 	call	81108d54 <uliRmapReadReg>
81108980:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_24_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA9 = (alt_u16) ((uliReg
81108984:	e0bffe17 	ldw	r2,-8(fp)
81108988:	1007883a 	mov	r3,r2
8110898c:	e0bfff17 	ldw	r2,-4(fp)
81108990:	10c03e0d 	sth	r3,248(r2)
				& COMM_RMAP_LOWRES_PRT_A_9_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA10 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_10_MSK) >> 16);
81108994:	e0bffe17 	ldw	r2,-8(fp)
81108998:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_24_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA9 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_9_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA10 = (alt_u16) ((uliReg
8110899c:	1007883a 	mov	r3,r2
811089a0:	e0bfff17 	ldw	r2,-4(fp)
811089a4:	10c03e8d 	sth	r3,250(r2)
				& COMM_RMAP_LOWRES_PRT_A_10_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811089a8:	e0bfff17 	ldw	r2,-4(fp)
811089ac:	10800017 	ldw	r2,0(r2)
811089b0:	01402e44 	movi	r5,185
811089b4:	1009883a 	mov	r4,r2
811089b8:	1108d540 	call	81108d54 <uliRmapReadReg>
811089bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_25_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA11 = (alt_u16) ((uliReg
811089c0:	e0bffe17 	ldw	r2,-8(fp)
811089c4:	1007883a 	mov	r3,r2
811089c8:	e0bfff17 	ldw	r2,-4(fp)
811089cc:	10c03f0d 	sth	r3,252(r2)
				& COMM_RMAP_LOWRES_PRT_A_11_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA12 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_12_MSK) >> 16);
811089d0:	e0bffe17 	ldw	r2,-8(fp)
811089d4:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_25_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA11 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_11_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA12 = (alt_u16) ((uliReg
811089d8:	1007883a 	mov	r3,r2
811089dc:	e0bfff17 	ldw	r2,-4(fp)
811089e0:	10c03f8d 	sth	r3,254(r2)
				& COMM_RMAP_LOWRES_PRT_A_12_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
811089e4:	e0bfff17 	ldw	r2,-4(fp)
811089e8:	10800017 	ldw	r2,0(r2)
811089ec:	01402e84 	movi	r5,186
811089f0:	1009883a 	mov	r4,r2
811089f4:	1108d540 	call	81108d54 <uliRmapReadReg>
811089f8:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_26_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA13 = (alt_u16) ((uliReg
811089fc:	e0bffe17 	ldw	r2,-8(fp)
81108a00:	1007883a 	mov	r3,r2
81108a04:	e0bfff17 	ldw	r2,-4(fp)
81108a08:	10c0400d 	sth	r3,256(r2)
				& COMM_RMAP_LOWRES_PRT_A_13_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA14 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_14_MSK) >> 16);
81108a0c:	e0bffe17 	ldw	r2,-8(fp)
81108a10:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_26_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA13 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_13_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA14 = (alt_u16) ((uliReg
81108a14:	1007883a 	mov	r3,r2
81108a18:	e0bfff17 	ldw	r2,-4(fp)
81108a1c:	10c0408d 	sth	r3,258(r2)
				& COMM_RMAP_LOWRES_PRT_A_14_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108a20:	e0bfff17 	ldw	r2,-4(fp)
81108a24:	10800017 	ldw	r2,0(r2)
81108a28:	01402ec4 	movi	r5,187
81108a2c:	1009883a 	mov	r4,r2
81108a30:	1108d540 	call	81108d54 <uliRmapReadReg>
81108a34:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_27_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA15 = (alt_u16) ((uliReg
81108a38:	e0bffe17 	ldw	r2,-8(fp)
81108a3c:	1007883a 	mov	r3,r2
81108a40:	e0bfff17 	ldw	r2,-4(fp)
81108a44:	10c0410d 	sth	r3,260(r2)
				& COMM_RMAP_LOWRES_PRT_A_15_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt0 = (alt_u16) ((uliReg
				& COMM_RMAP_SEL_HIRES_PRT0_MSK) >> 16);
81108a48:	e0bffe17 	ldw	r2,-8(fp)
81108a4c:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_27_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiLowresPrtA15 = (alt_u16) ((uliReg
				& COMM_RMAP_LOWRES_PRT_A_15_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt0 = (alt_u16) ((uliReg
81108a50:	1007883a 	mov	r3,r2
81108a54:	e0bfff17 	ldw	r2,-4(fp)
81108a58:	10c0418d 	sth	r3,262(r2)
				& COMM_RMAP_SEL_HIRES_PRT0_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108a5c:	e0bfff17 	ldw	r2,-4(fp)
81108a60:	10800017 	ldw	r2,0(r2)
81108a64:	01402f04 	movi	r5,188
81108a68:	1009883a 	mov	r4,r2
81108a6c:	1108d540 	call	81108d54 <uliRmapReadReg>
81108a70:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_28_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt1 = (alt_u16) ((uliReg
81108a74:	e0bffe17 	ldw	r2,-8(fp)
81108a78:	1007883a 	mov	r3,r2
81108a7c:	e0bfff17 	ldw	r2,-4(fp)
81108a80:	10c0420d 	sth	r3,264(r2)
				& COMM_RMAP_SEL_HIRES_PRT1_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt2 = (alt_u16) ((uliReg
				& COMM_RMAP_SEL_HIRES_PRT2_MSK) >> 16);
81108a84:	e0bffe17 	ldw	r2,-8(fp)
81108a88:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_28_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt1 = (alt_u16) ((uliReg
				& COMM_RMAP_SEL_HIRES_PRT1_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt2 = (alt_u16) ((uliReg
81108a8c:	1007883a 	mov	r3,r2
81108a90:	e0bfff17 	ldw	r2,-4(fp)
81108a94:	10c0428d 	sth	r3,266(r2)
				& COMM_RMAP_SEL_HIRES_PRT2_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108a98:	e0bfff17 	ldw	r2,-4(fp)
81108a9c:	10800017 	ldw	r2,0(r2)
81108aa0:	01402f44 	movi	r5,189
81108aa4:	1009883a 	mov	r4,r2
81108aa8:	1108d540 	call	81108d54 <uliRmapReadReg>
81108aac:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_29_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt3 = (alt_u16) ((uliReg
81108ab0:	e0bffe17 	ldw	r2,-8(fp)
81108ab4:	1007883a 	mov	r3,r2
81108ab8:	e0bfff17 	ldw	r2,-4(fp)
81108abc:	10c0430d 	sth	r3,268(r2)
				& COMM_RMAP_SEL_HIRES_PRT3_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt4 = (alt_u16) ((uliReg
				& COMM_RMAP_SEL_HIRES_PRT4_MSK) >> 16);
81108ac0:	e0bffe17 	ldw	r2,-8(fp)
81108ac4:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_29_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt3 = (alt_u16) ((uliReg
				& COMM_RMAP_SEL_HIRES_PRT3_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt4 = (alt_u16) ((uliReg
81108ac8:	1007883a 	mov	r3,r2
81108acc:	e0bfff17 	ldw	r2,-4(fp)
81108ad0:	10c0438d 	sth	r3,270(r2)
				& COMM_RMAP_SEL_HIRES_PRT4_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108ad4:	e0bfff17 	ldw	r2,-4(fp)
81108ad8:	10800017 	ldw	r2,0(r2)
81108adc:	01402f84 	movi	r5,190
81108ae0:	1009883a 	mov	r4,r2
81108ae4:	1108d540 	call	81108d54 <uliRmapReadReg>
81108ae8:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_30_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt5 = (alt_u16) ((uliReg
81108aec:	e0bffe17 	ldw	r2,-8(fp)
81108af0:	1007883a 	mov	r3,r2
81108af4:	e0bfff17 	ldw	r2,-4(fp)
81108af8:	10c0440d 	sth	r3,272(r2)
				& COMM_RMAP_SEL_HIRES_PRT5_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt6 = (alt_u16) ((uliReg
				& COMM_RMAP_SEL_HIRES_PRT6_MSK) >> 16);
81108afc:	e0bffe17 	ldw	r2,-8(fp)
81108b00:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_30_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt5 = (alt_u16) ((uliReg
				& COMM_RMAP_SEL_HIRES_PRT5_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt6 = (alt_u16) ((uliReg
81108b04:	1007883a 	mov	r3,r2
81108b08:	e0bfff17 	ldw	r2,-4(fp)
81108b0c:	10c0448d 	sth	r3,274(r2)
				& COMM_RMAP_SEL_HIRES_PRT6_MSK) >> 16);

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
81108b10:	e0bfff17 	ldw	r2,-4(fp)
81108b14:	10800017 	ldw	r2,0(r2)
81108b18:	01402fc4 	movi	r5,191
81108b1c:	1009883a 	mov	r4,r2
81108b20:	1108d540 	call	81108d54 <uliRmapReadReg>
81108b24:	e0bffe15 	stw	r2,-8(fp)
		COMM_RMAP_HK_31_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt7 = (alt_u16) ((uliReg
81108b28:	e0bffe17 	ldw	r2,-8(fp)
81108b2c:	1007883a 	mov	r3,r2
81108b30:	e0bfff17 	ldw	r2,-4(fp)
81108b34:	10c0450d 	sth	r3,276(r2)
				& COMM_RMAP_SEL_HIRES_PRT7_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiZeroHiresAmp = (alt_u16) ((uliReg
				& COMM_RMAP_ZERO_HIRES_AMP_MSK) >> 16);
81108b38:	e0bffe17 	ldw	r2,-8(fp)
81108b3c:	1004d43a 	srli	r2,r2,16

		uliReg = uliRmapReadReg(pxRmapCh->puliRmapChAddr,
		COMM_RMAP_HK_31_REG_OFST);
		pxRmapCh->xRmapMemHKArea.usiSelHiresPrt7 = (alt_u16) ((uliReg
				& COMM_RMAP_SEL_HIRES_PRT7_MSK) >> 0);
		pxRmapCh->xRmapMemHKArea.usiZeroHiresAmp = (alt_u16) ((uliReg
81108b40:	1007883a 	mov	r3,r2
81108b44:	e0bfff17 	ldw	r2,-4(fp)
81108b48:	10c0458d 	sth	r3,278(r2)
				& COMM_RMAP_ZERO_HIRES_AMP_MSK) >> 16);

		bStatus = TRUE;
81108b4c:	00800044 	movi	r2,1
81108b50:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81108b54:	e0bffd17 	ldw	r2,-12(fp)
}
81108b58:	e037883a 	mov	sp,fp
81108b5c:	dfc00117 	ldw	ra,4(sp)
81108b60:	df000017 	ldw	fp,0(sp)
81108b64:	dec00204 	addi	sp,sp,8
81108b68:	f800283a 	ret

81108b6c <bRmapInitCh>:

bool bRmapInitCh(TRmapChannel *pxRmapCh, alt_u8 ucCommCh) {
81108b6c:	defffb04 	addi	sp,sp,-20
81108b70:	dfc00415 	stw	ra,16(sp)
81108b74:	df000315 	stw	fp,12(sp)
81108b78:	df000304 	addi	fp,sp,12
81108b7c:	e13ffe15 	stw	r4,-8(fp)
81108b80:	2805883a 	mov	r2,r5
81108b84:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
81108b88:	e03ffd15 	stw	zero,-12(fp)

	if (pxRmapCh != NULL) {
81108b8c:	e0bffe17 	ldw	r2,-8(fp)
81108b90:	10005726 	beq	r2,zero,81108cf0 <bRmapInitCh+0x184>
		bStatus = TRUE;
81108b94:	00800044 	movi	r2,1
81108b98:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
81108b9c:	e0bfff03 	ldbu	r2,-4(fp)
81108ba0:	10c00228 	cmpgeui	r3,r2,8
81108ba4:	1800361e 	bne	r3,zero,81108c80 <bRmapInitCh+0x114>
81108ba8:	100690ba 	slli	r3,r2,2
81108bac:	00a04474 	movhi	r2,33041
81108bb0:	10a2f004 	addi	r2,r2,-29760
81108bb4:	1885883a 	add	r2,r3,r2
81108bb8:	10800017 	ldw	r2,0(r2)
81108bbc:	1000683a 	jmp	r2
81108bc0:	81108be0 	cmpeqi	r4,r16,16943
81108bc4:	81108bf4 	orhi	r4,r16,16943
81108bc8:	81108c08 	cmpgei	r4,r16,16944
81108bcc:	81108c1c 	xori	r4,r16,16944
81108bd0:	81108c30 	cmpltui	r4,r16,16944
81108bd4:	81108c44 	addi	r4,r16,16945
81108bd8:	81108c58 	cmpnei	r4,r16,16945
81108bdc:	81108c6c 	andhi	r4,r16,16945
		case eCommSpwCh1:
			pxRmapCh->puliRmapChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81108be0:	e0fffe17 	ldw	r3,-8(fp)
81108be4:	00a04834 	movhi	r2,33056
81108be8:	108b0004 	addi	r2,r2,11264
81108bec:	18800015 	stw	r2,0(r3)
			break;
81108bf0:	00002506 	br	81108c88 <bRmapInitCh+0x11c>
		case eCommSpwCh2:
			pxRmapCh->puliRmapChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
81108bf4:	e0fffe17 	ldw	r3,-8(fp)
81108bf8:	00a04834 	movhi	r2,33056
81108bfc:	108a0004 	addi	r2,r2,10240
81108c00:	18800015 	stw	r2,0(r3)
			break;
81108c04:	00002006 	br	81108c88 <bRmapInitCh+0x11c>
		case eCommSpwCh3:
			pxRmapCh->puliRmapChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
81108c08:	e0fffe17 	ldw	r3,-8(fp)
81108c0c:	00a04834 	movhi	r2,33056
81108c10:	108b0004 	addi	r2,r2,11264
81108c14:	18800015 	stw	r2,0(r3)
			break;
81108c18:	00001b06 	br	81108c88 <bRmapInitCh+0x11c>
		case eCommSpwCh4:
			pxRmapCh->puliRmapChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
81108c1c:	e0fffe17 	ldw	r3,-8(fp)
81108c20:	00a04834 	movhi	r2,33056
81108c24:	108a0004 	addi	r2,r2,10240
81108c28:	18800015 	stw	r2,0(r3)
			break;
81108c2c:	00001606 	br	81108c88 <bRmapInitCh+0x11c>
		case eCommSpwCh5:
			pxRmapCh->puliRmapChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
81108c30:	e0fffe17 	ldw	r3,-8(fp)
81108c34:	00a04834 	movhi	r2,33056
81108c38:	108b0004 	addi	r2,r2,11264
81108c3c:	18800015 	stw	r2,0(r3)
			break;
81108c40:	00001106 	br	81108c88 <bRmapInitCh+0x11c>
		case eCommSpwCh6:
			pxRmapCh->puliRmapChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
81108c44:	e0fffe17 	ldw	r3,-8(fp)
81108c48:	00a04834 	movhi	r2,33056
81108c4c:	108a0004 	addi	r2,r2,10240
81108c50:	18800015 	stw	r2,0(r3)
			break;
81108c54:	00000c06 	br	81108c88 <bRmapInitCh+0x11c>
		case eCommSpwCh7:
			pxRmapCh->puliRmapChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81108c58:	e0fffe17 	ldw	r3,-8(fp)
81108c5c:	00a04834 	movhi	r2,33056
81108c60:	108b0004 	addi	r2,r2,11264
81108c64:	18800015 	stw	r2,0(r3)
			break;
81108c68:	00000706 	br	81108c88 <bRmapInitCh+0x11c>
		case eCommSpwCh8:
			pxRmapCh->puliRmapChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
81108c6c:	e0fffe17 	ldw	r3,-8(fp)
81108c70:	00a04834 	movhi	r2,33056
81108c74:	108a0004 	addi	r2,r2,10240
81108c78:	18800015 	stw	r2,0(r3)
			break;
81108c7c:	00000206 	br	81108c88 <bRmapInitCh+0x11c>
		default:
			bStatus = FALSE;
81108c80:	e03ffd15 	stw	zero,-12(fp)
			break;
81108c84:	0001883a 	nop
		}

		if (bStatus) {
81108c88:	e0bffd17 	ldw	r2,-12(fp)
81108c8c:	10001826 	beq	r2,zero,81108cf0 <bRmapInitCh+0x184>
			if (!bRmapGetIrqControl(pxRmapCh)) {
81108c90:	e13ffe17 	ldw	r4,-8(fp)
81108c94:	1106c240 	call	81106c24 <bRmapGetIrqControl>
81108c98:	1000011e 	bne	r2,zero,81108ca0 <bRmapInitCh+0x134>
				bStatus = FALSE;
81108c9c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bRmapGetCodecConfig(pxRmapCh)) {
81108ca0:	e13ffe17 	ldw	r4,-8(fp)
81108ca4:	1106df40 	call	81106df4 <bRmapGetCodecConfig>
81108ca8:	1000011e 	bne	r2,zero,81108cb0 <bRmapInitCh+0x144>
				bStatus = FALSE;
81108cac:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bRmapGetCodecStatus(pxRmapCh)) {
81108cb0:	e13ffe17 	ldw	r4,-8(fp)
81108cb4:	1106e780 	call	81106e78 <bRmapGetCodecStatus>
81108cb8:	1000011e 	bne	r2,zero,81108cc0 <bRmapInitCh+0x154>
				bStatus = FALSE;
81108cbc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bRmapGetMemConfigArea(pxRmapCh)) {
81108cc0:	e13ffe17 	ldw	r4,-8(fp)
81108cc4:	110740c0 	call	8110740c <bRmapGetMemConfigArea>
81108cc8:	1000011e 	bne	r2,zero,81108cd0 <bRmapInitCh+0x164>
				bStatus = FALSE;
81108ccc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bRmapGetMemConfigStat(pxRmapCh)) {
81108cd0:	e13ffe17 	ldw	r4,-8(fp)
81108cd4:	11076d80 	call	811076d8 <bRmapGetMemConfigStat>
81108cd8:	1000011e 	bne	r2,zero,81108ce0 <bRmapInitCh+0x174>
				bStatus = FALSE;
81108cdc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bRmapGetRmapMemHKArea(pxRmapCh)) {
81108ce0:	e13ffe17 	ldw	r4,-8(fp)
81108ce4:	11083a80 	call	811083a8 <bRmapGetRmapMemHKArea>
81108ce8:	1000011e 	bne	r2,zero,81108cf0 <bRmapInitCh+0x184>
				bStatus = FALSE;
81108cec:	e03ffd15 	stw	zero,-12(fp)
			}
		}
	}
	return bStatus;
81108cf0:	e0bffd17 	ldw	r2,-12(fp)
}
81108cf4:	e037883a 	mov	sp,fp
81108cf8:	dfc00117 	ldw	ra,4(sp)
81108cfc:	df000017 	ldw	fp,0(sp)
81108d00:	dec00204 	addi	sp,sp,8
81108d04:	f800283a 	ret

81108d08 <vRmapWriteReg>:
//! [public functions]

//! [private functions]
static void vRmapWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81108d08:	defffc04 	addi	sp,sp,-16
81108d0c:	df000315 	stw	fp,12(sp)
81108d10:	df000304 	addi	fp,sp,12
81108d14:	e13ffd15 	stw	r4,-12(fp)
81108d18:	e17ffe15 	stw	r5,-8(fp)
81108d1c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81108d20:	e0bffe17 	ldw	r2,-8(fp)
81108d24:	1085883a 	add	r2,r2,r2
81108d28:	1085883a 	add	r2,r2,r2
81108d2c:	1007883a 	mov	r3,r2
81108d30:	e0bffd17 	ldw	r2,-12(fp)
81108d34:	10c5883a 	add	r2,r2,r3
81108d38:	e0ffff17 	ldw	r3,-4(fp)
81108d3c:	10c00015 	stw	r3,0(r2)
}
81108d40:	0001883a 	nop
81108d44:	e037883a 	mov	sp,fp
81108d48:	df000017 	ldw	fp,0(sp)
81108d4c:	dec00104 	addi	sp,sp,4
81108d50:	f800283a 	ret

81108d54 <uliRmapReadReg>:

alt_u32 uliRmapReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81108d54:	defffc04 	addi	sp,sp,-16
81108d58:	df000315 	stw	fp,12(sp)
81108d5c:	df000304 	addi	fp,sp,12
81108d60:	e13ffe15 	stw	r4,-8(fp)
81108d64:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81108d68:	e0bfff17 	ldw	r2,-4(fp)
81108d6c:	1085883a 	add	r2,r2,r2
81108d70:	1085883a 	add	r2,r2,r2
81108d74:	1007883a 	mov	r3,r2
81108d78:	e0bffe17 	ldw	r2,-8(fp)
81108d7c:	10c5883a 	add	r2,r2,r3
81108d80:	10800017 	ldw	r2,0(r2)
81108d84:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81108d88:	e0bffd17 	ldw	r2,-12(fp)
}
81108d8c:	e037883a 	mov	sp,fp
81108d90:	df000017 	ldw	fp,0(sp)
81108d94:	dec00104 	addi	sp,sp,4
81108d98:	f800283a 	ret

81108d9c <uliConvRmapCfgAddr>:

static alt_u32 uliConvRmapCfgAddr(alt_u32 puliRmapAddr) {
81108d9c:	defffd04 	addi	sp,sp,-12
81108da0:	df000215 	stw	fp,8(sp)
81108da4:	df000204 	addi	fp,sp,8
81108da8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliValue;

	switch (puliRmapAddr) {
81108dac:	e0bfff17 	ldw	r2,-4(fp)
81108db0:	10801368 	cmpgeui	r2,r2,77
81108db4:	10008a1e 	bne	r2,zero,81108fe0 <uliConvRmapCfgAddr+0x244>
81108db8:	e0bfff17 	ldw	r2,-4(fp)
81108dbc:	100690ba 	slli	r3,r2,2
81108dc0:	00a04474 	movhi	r2,33041
81108dc4:	10a37504 	addi	r2,r2,-29228
81108dc8:	1885883a 	add	r2,r3,r2
81108dcc:	10800017 	ldw	r2,0(r2)
81108dd0:	1000683a 	jmp	r2
81108dd4:	81108f08 	cmpgei	r4,r16,16956
81108dd8:	81108fe0 	cmpeqi	r4,r16,16959
81108ddc:	81108fe0 	cmpeqi	r4,r16,16959
81108de0:	81108fe0 	cmpeqi	r4,r16,16959
81108de4:	81108f14 	ori	r4,r16,16956
81108de8:	81108fe0 	cmpeqi	r4,r16,16959
81108dec:	81108fe0 	cmpeqi	r4,r16,16959
81108df0:	81108fe0 	cmpeqi	r4,r16,16959
81108df4:	81108f20 	cmpeqi	r4,r16,16956
81108df8:	81108fe0 	cmpeqi	r4,r16,16959
81108dfc:	81108fe0 	cmpeqi	r4,r16,16959
81108e00:	81108fe0 	cmpeqi	r4,r16,16959
81108e04:	81108f2c 	andhi	r4,r16,16956
81108e08:	81108fe0 	cmpeqi	r4,r16,16959
81108e0c:	81108fe0 	cmpeqi	r4,r16,16959
81108e10:	81108fe0 	cmpeqi	r4,r16,16959
81108e14:	81108f38 	rdprs	r4,r16,16956
81108e18:	81108fe0 	cmpeqi	r4,r16,16959
81108e1c:	81108fe0 	cmpeqi	r4,r16,16959
81108e20:	81108fe0 	cmpeqi	r4,r16,16959
81108e24:	81108f44 	addi	r4,r16,16957
81108e28:	81108fe0 	cmpeqi	r4,r16,16959
81108e2c:	81108fe0 	cmpeqi	r4,r16,16959
81108e30:	81108fe0 	cmpeqi	r4,r16,16959
81108e34:	81108f50 	cmplti	r4,r16,16957
81108e38:	81108fe0 	cmpeqi	r4,r16,16959
81108e3c:	81108fe0 	cmpeqi	r4,r16,16959
81108e40:	81108fe0 	cmpeqi	r4,r16,16959
81108e44:	81108f5c 	xori	r4,r16,16957
81108e48:	81108fe0 	cmpeqi	r4,r16,16959
81108e4c:	81108fe0 	cmpeqi	r4,r16,16959
81108e50:	81108fe0 	cmpeqi	r4,r16,16959
81108e54:	81108f68 	cmpgeui	r4,r16,16957
81108e58:	81108fe0 	cmpeqi	r4,r16,16959
81108e5c:	81108fe0 	cmpeqi	r4,r16,16959
81108e60:	81108fe0 	cmpeqi	r4,r16,16959
81108e64:	81108f74 	orhi	r4,r16,16957
81108e68:	81108fe0 	cmpeqi	r4,r16,16959
81108e6c:	81108fe0 	cmpeqi	r4,r16,16959
81108e70:	81108fe0 	cmpeqi	r4,r16,16959
81108e74:	81108f80 	call	881108f8 <__reset+0x20f08f8>
81108e78:	81108fe0 	cmpeqi	r4,r16,16959
81108e7c:	81108fe0 	cmpeqi	r4,r16,16959
81108e80:	81108fe0 	cmpeqi	r4,r16,16959
81108e84:	81108f8c 	andi	r4,r16,16958
81108e88:	81108fe0 	cmpeqi	r4,r16,16959
81108e8c:	81108fe0 	cmpeqi	r4,r16,16959
81108e90:	81108fe0 	cmpeqi	r4,r16,16959
81108e94:	81108fe0 	cmpeqi	r4,r16,16959
81108e98:	81108fe0 	cmpeqi	r4,r16,16959
81108e9c:	81108fe0 	cmpeqi	r4,r16,16959
81108ea0:	81108fe0 	cmpeqi	r4,r16,16959
81108ea4:	81108fe0 	cmpeqi	r4,r16,16959
81108ea8:	81108fe0 	cmpeqi	r4,r16,16959
81108eac:	81108fe0 	cmpeqi	r4,r16,16959
81108eb0:	81108fe0 	cmpeqi	r4,r16,16959
81108eb4:	81108f98 	cmpnei	r4,r16,16958
81108eb8:	81108fe0 	cmpeqi	r4,r16,16959
81108ebc:	81108fe0 	cmpeqi	r4,r16,16959
81108ec0:	81108fe0 	cmpeqi	r4,r16,16959
81108ec4:	81108fa4 	muli	r4,r16,16958
81108ec8:	81108fe0 	cmpeqi	r4,r16,16959
81108ecc:	81108fe0 	cmpeqi	r4,r16,16959
81108ed0:	81108fe0 	cmpeqi	r4,r16,16959
81108ed4:	81108fb0 	cmpltui	r4,r16,16958
81108ed8:	81108fe0 	cmpeqi	r4,r16,16959
81108edc:	81108fe0 	cmpeqi	r4,r16,16959
81108ee0:	81108fe0 	cmpeqi	r4,r16,16959
81108ee4:	81108fbc 	xorhi	r4,r16,16958
81108ee8:	81108fe0 	cmpeqi	r4,r16,16959
81108eec:	81108fe0 	cmpeqi	r4,r16,16959
81108ef0:	81108fe0 	cmpeqi	r4,r16,16959
81108ef4:	81108fc8 	cmpgei	r4,r16,16959
81108ef8:	81108fe0 	cmpeqi	r4,r16,16959
81108efc:	81108fe0 	cmpeqi	r4,r16,16959
81108f00:	81108fe0 	cmpeqi	r4,r16,16959
81108f04:	81108fd4 	ori	r4,r16,16959
	case 0x00000000:
		uliValue = 0x00000040;
81108f08:	00801004 	movi	r2,64
81108f0c:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f10:	00003506 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000004:
		uliValue = 0x00000041;
81108f14:	00801044 	movi	r2,65
81108f18:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f1c:	00003206 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000008:
		uliValue = 0x00000042;
81108f20:	00801084 	movi	r2,66
81108f24:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f28:	00002f06 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x0000000C:
		uliValue = 0x00000043;
81108f2c:	008010c4 	movi	r2,67
81108f30:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f34:	00002c06 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000010:
		uliValue = 0x00000044;
81108f38:	00801104 	movi	r2,68
81108f3c:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f40:	00002906 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000014:
		uliValue = 0x00000045;
81108f44:	00801144 	movi	r2,69
81108f48:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f4c:	00002606 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000018:
		uliValue = 0x00000046;
81108f50:	00801184 	movi	r2,70
81108f54:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f58:	00002306 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x0000001C:
		uliValue = 0x00000047;
81108f5c:	008011c4 	movi	r2,71
81108f60:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f64:	00002006 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000020:
		uliValue = 0x00000048;
81108f68:	00801204 	movi	r2,72
81108f6c:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f70:	00001d06 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000024:
		uliValue = 0x00000049;
81108f74:	00801244 	movi	r2,73
81108f78:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f7c:	00001a06 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000028:
		uliValue = 0x0000004A;
81108f80:	00801284 	movi	r2,74
81108f84:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f88:	00001706 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x0000002C:
		uliValue = 0x0000004B;
81108f8c:	008012c4 	movi	r2,75
81108f90:	e0bffe15 	stw	r2,-8(fp)
		break;
81108f94:	00001406 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000038:
		uliValue = 0x0000004C;
81108f98:	00801304 	movi	r2,76
81108f9c:	e0bffe15 	stw	r2,-8(fp)
		break;
81108fa0:	00001106 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x0000003C:
		uliValue = 0x0000004D;
81108fa4:	00801344 	movi	r2,77
81108fa8:	e0bffe15 	stw	r2,-8(fp)
		break;
81108fac:	00000e06 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000040:
		uliValue = 0x0000004E;
81108fb0:	00801384 	movi	r2,78
81108fb4:	e0bffe15 	stw	r2,-8(fp)
		break;
81108fb8:	00000b06 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000044:
		uliValue = 0x0000004F;
81108fbc:	008013c4 	movi	r2,79
81108fc0:	e0bffe15 	stw	r2,-8(fp)
		break;
81108fc4:	00000806 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x00000048:
		uliValue = 0x00000050;
81108fc8:	00801404 	movi	r2,80
81108fcc:	e0bffe15 	stw	r2,-8(fp)
		break;
81108fd0:	00000506 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	case 0x0000004C:
		uliValue = 0x00000051;
81108fd4:	00801444 	movi	r2,81
81108fd8:	e0bffe15 	stw	r2,-8(fp)
		break;
81108fdc:	00000206 	br	81108fe8 <uliConvRmapCfgAddr+0x24c>
	default:
		uliValue = 0x00000000;
81108fe0:	e03ffe15 	stw	zero,-8(fp)
		break;
81108fe4:	0001883a 	nop
	}

	return uliValue;
81108fe8:	e0bffe17 	ldw	r2,-8(fp)
}
81108fec:	e037883a 	mov	sp,fp
81108ff0:	df000017 	ldw	fp,0(sp)
81108ff4:	dec00104 	addi	sp,sp,4
81108ff8:	f800283a 	ret

81108ffc <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
81108ffc:	defffb04 	addi	sp,sp,-20
81109000:	dfc00415 	stw	ra,16(sp)
81109004:	df000315 	stw	fp,12(sp)
81109008:	df000304 	addi	fp,sp,12
8110900c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81109010:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81109014:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81109018:	e0bfff17 	ldw	r2,-4(fp)
8110901c:	10003c26 	beq	r2,zero,81109110 <bSpwcSetLink+0x114>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81109020:	e0bfff17 	ldw	r2,-4(fp)
81109024:	10800017 	ldw	r2,0(r2)
81109028:	000b883a 	mov	r5,zero
8110902c:	1009883a 	mov	r4,r2
81109030:	11095e00 	call	811095e0 <uliSpwcReadReg>
81109034:	e0bffe15 	stw	r2,-8(fp)
		COMM_LINK_CFG_STAT_REG_OFST);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
81109038:	e0bfff17 	ldw	r2,-4(fp)
8110903c:	10800117 	ldw	r2,4(r2)
81109040:	10000426 	beq	r2,zero,81109054 <bSpwcSetLink+0x58>
			uliReg |= COMM_SPW_LNKCFG_AUTOSTART_MSK;
81109044:	e0bffe17 	ldw	r2,-8(fp)
81109048:	10800114 	ori	r2,r2,4
8110904c:	e0bffe15 	stw	r2,-8(fp)
81109050:	00000406 	br	81109064 <bSpwcSetLink+0x68>
		} else {
			uliReg &= (~COMM_SPW_LNKCFG_AUTOSTART_MSK);
81109054:	e0fffe17 	ldw	r3,-8(fp)
81109058:	00bffec4 	movi	r2,-5
8110905c:	1884703a 	and	r2,r3,r2
81109060:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bLinkStart) {
81109064:	e0bfff17 	ldw	r2,-4(fp)
81109068:	10800217 	ldw	r2,8(r2)
8110906c:	10000426 	beq	r2,zero,81109080 <bSpwcSetLink+0x84>
			uliReg |= COMM_SPW_LNKCFG_LINKSTART_MSK;
81109070:	e0bffe17 	ldw	r2,-8(fp)
81109074:	10800094 	ori	r2,r2,2
81109078:	e0bffe15 	stw	r2,-8(fp)
8110907c:	00000406 	br	81109090 <bSpwcSetLink+0x94>
		} else {
			uliReg &= (~COMM_SPW_LNKCFG_LINKSTART_MSK);
81109080:	e0fffe17 	ldw	r3,-8(fp)
81109084:	00bfff44 	movi	r2,-3
81109088:	1884703a 	and	r2,r3,r2
8110908c:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81109090:	e0bfff17 	ldw	r2,-4(fp)
81109094:	10800317 	ldw	r2,12(r2)
81109098:	10000426 	beq	r2,zero,811090ac <bSpwcSetLink+0xb0>
			uliReg |= COMM_SPW_LNKCFG_DISCONNECT_MSK;
8110909c:	e0bffe17 	ldw	r2,-8(fp)
811090a0:	10800054 	ori	r2,r2,1
811090a4:	e0bffe15 	stw	r2,-8(fp)
811090a8:	00000406 	br	811090bc <bSpwcSetLink+0xc0>
		} else {
			uliReg &= (~COMM_SPW_LNKCFG_DISCONNECT_MSK);
811090ac:	e0fffe17 	ldw	r3,-8(fp)
811090b0:	00bfff84 	movi	r2,-2
811090b4:	1884703a 	and	r2,r3,r2
811090b8:	e0bffe15 	stw	r2,-8(fp)
		}
		uliReg &= (~COMM_SPW_LNKCFG_TXDIVCNT_MSK);
811090bc:	e0fffe17 	ldw	r3,-8(fp)
811090c0:	00804034 	movhi	r2,256
811090c4:	10bfffc4 	addi	r2,r2,-1
811090c8:	1884703a 	and	r2,r3,r2
811090cc:	e0bffe15 	stw	r2,-8(fp)
		uliReg |= (COMM_SPW_LNKCFG_TXDIVCNT_MSK
				& (alt_u32)(pxSpwcCh->xLinkConfig.ucTxDivCnt << 24));
811090d0:	e0bfff17 	ldw	r2,-4(fp)
811090d4:	10800403 	ldbu	r2,16(r2)
811090d8:	10803fcc 	andi	r2,r2,255
811090dc:	1004963a 	slli	r2,r2,24
811090e0:	1007883a 	mov	r3,r2
			uliReg |= COMM_SPW_LNKCFG_DISCONNECT_MSK;
		} else {
			uliReg &= (~COMM_SPW_LNKCFG_DISCONNECT_MSK);
		}
		uliReg &= (~COMM_SPW_LNKCFG_TXDIVCNT_MSK);
		uliReg |= (COMM_SPW_LNKCFG_TXDIVCNT_MSK
811090e4:	e0bffe17 	ldw	r2,-8(fp)
811090e8:	10c4b03a 	or	r2,r2,r3
811090ec:	e0bffe15 	stw	r2,-8(fp)
				& (alt_u32)(pxSpwcCh->xLinkConfig.ucTxDivCnt << 24));

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_LINK_CFG_STAT_REG_OFST,
811090f0:	e0bfff17 	ldw	r2,-4(fp)
811090f4:	10800017 	ldw	r2,0(r2)
811090f8:	e1bffe17 	ldw	r6,-8(fp)
811090fc:	000b883a 	mov	r5,zero
81109100:	1009883a 	mov	r4,r2
81109104:	11095940 	call	81109594 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
81109108:	00800044 	movi	r2,1
8110910c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81109110:	e0bffd17 	ldw	r2,-12(fp)
}
81109114:	e037883a 	mov	sp,fp
81109118:	dfc00117 	ldw	ra,4(sp)
8110911c:	df000017 	ldw	fp,0(sp)
81109120:	dec00204 	addi	sp,sp,8
81109124:	f800283a 	ret

81109128 <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
81109128:	defffb04 	addi	sp,sp,-20
8110912c:	dfc00415 	stw	ra,16(sp)
81109130:	df000315 	stw	fp,12(sp)
81109134:	df000304 	addi	fp,sp,12
81109138:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
8110913c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81109140:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81109144:	e0bfff17 	ldw	r2,-4(fp)
81109148:	10002826 	beq	r2,zero,811091ec <bSpwcGetLink+0xc4>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
8110914c:	e0bfff17 	ldw	r2,-4(fp)
81109150:	10800017 	ldw	r2,0(r2)
81109154:	000b883a 	mov	r5,zero
81109158:	1009883a 	mov	r4,r2
8110915c:	11095e00 	call	811095e0 <uliSpwcReadReg>
81109160:	e0bffe15 	stw	r2,-8(fp)
		COMM_LINK_CFG_STAT_REG_OFST);

		if (uliReg & COMM_SPW_LNKCFG_AUTOSTART_MSK) {
81109164:	e0bffe17 	ldw	r2,-8(fp)
81109168:	1080010c 	andi	r2,r2,4
8110916c:	10000426 	beq	r2,zero,81109180 <bSpwcGetLink+0x58>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
81109170:	e0bfff17 	ldw	r2,-4(fp)
81109174:	00c00044 	movi	r3,1
81109178:	10c00115 	stw	r3,4(r2)
8110917c:	00000206 	br	81109188 <bSpwcGetLink+0x60>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
81109180:	e0bfff17 	ldw	r2,-4(fp)
81109184:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_SPW_LNKCFG_LINKSTART_MSK) {
81109188:	e0bffe17 	ldw	r2,-8(fp)
8110918c:	1080008c 	andi	r2,r2,2
81109190:	10000426 	beq	r2,zero,811091a4 <bSpwcGetLink+0x7c>
			pxSpwcCh->xLinkConfig.bLinkStart = TRUE;
81109194:	e0bfff17 	ldw	r2,-4(fp)
81109198:	00c00044 	movi	r3,1
8110919c:	10c00215 	stw	r3,8(r2)
811091a0:	00000206 	br	811091ac <bSpwcGetLink+0x84>
		} else {
			pxSpwcCh->xLinkConfig.bLinkStart = FALSE;
811091a4:	e0bfff17 	ldw	r2,-4(fp)
811091a8:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_SPW_LNKCFG_DISCONNECT_MSK) {
811091ac:	e0bffe17 	ldw	r2,-8(fp)
811091b0:	1080004c 	andi	r2,r2,1
811091b4:	10000426 	beq	r2,zero,811091c8 <bSpwcGetLink+0xa0>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
811091b8:	e0bfff17 	ldw	r2,-4(fp)
811091bc:	00c00044 	movi	r3,1
811091c0:	10c00315 	stw	r3,12(r2)
811091c4:	00000206 	br	811091d0 <bSpwcGetLink+0xa8>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
811091c8:	e0bfff17 	ldw	r2,-4(fp)
811091cc:	10000315 	stw	zero,12(r2)
		}
		pxSpwcCh->xLinkConfig.ucTxDivCnt= (alt_u8)(
				(uliReg & COMM_SPW_LNKCFG_TXDIVCNT_MSK) >> 24);
811091d0:	e0bffe17 	ldw	r2,-8(fp)
811091d4:	1004d63a 	srli	r2,r2,24
		if (uliReg & COMM_SPW_LNKCFG_DISCONNECT_MSK) {
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
		}
		pxSpwcCh->xLinkConfig.ucTxDivCnt= (alt_u8)(
811091d8:	1007883a 	mov	r3,r2
811091dc:	e0bfff17 	ldw	r2,-4(fp)
811091e0:	10c00405 	stb	r3,16(r2)
				(uliReg & COMM_SPW_LNKCFG_TXDIVCNT_MSK) >> 24);

		bStatus = TRUE;
811091e4:	00800044 	movi	r2,1
811091e8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811091ec:	e0bffd17 	ldw	r2,-12(fp)
}
811091f0:	e037883a 	mov	sp,fp
811091f4:	dfc00117 	ldw	ra,4(sp)
811091f8:	df000017 	ldw	fp,0(sp)
811091fc:	dec00204 	addi	sp,sp,8
81109200:	f800283a 	ret

81109204 <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
81109204:	defffb04 	addi	sp,sp,-20
81109208:	dfc00415 	stw	ra,16(sp)
8110920c:	df000315 	stw	fp,12(sp)
81109210:	df000304 	addi	fp,sp,12
81109214:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81109218:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110921c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81109220:	e0bfff17 	ldw	r2,-4(fp)
81109224:	10002c26 	beq	r2,zero,811092d8 <bSpwcGetLinkError+0xd4>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81109228:	e0bfff17 	ldw	r2,-4(fp)
8110922c:	10800017 	ldw	r2,0(r2)
81109230:	000b883a 	mov	r5,zero
81109234:	1009883a 	mov	r4,r2
81109238:	11095e00 	call	811095e0 <uliSpwcReadReg>
8110923c:	e0bffe15 	stw	r2,-8(fp)
		COMM_LINK_CFG_STAT_REG_OFST);

		if (uliReg & COMM_SPW_LNKERR_DISCONNECT_MSK) {
81109240:	e0bffe17 	ldw	r2,-8(fp)
81109244:	1080006c 	andhi	r2,r2,1
81109248:	10000426 	beq	r2,zero,8110925c <bSpwcGetLinkError+0x58>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
8110924c:	e0bfff17 	ldw	r2,-4(fp)
81109250:	00c00044 	movi	r3,1
81109254:	10c00515 	stw	r3,20(r2)
81109258:	00000206 	br	81109264 <bSpwcGetLinkError+0x60>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
8110925c:	e0bfff17 	ldw	r2,-4(fp)
81109260:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_SPW_LNKERR_PARITY_MSK) {
81109264:	e0bffe17 	ldw	r2,-8(fp)
81109268:	108000ac 	andhi	r2,r2,2
8110926c:	10000426 	beq	r2,zero,81109280 <bSpwcGetLinkError+0x7c>
			pxSpwcCh->xLinkError.bParity = TRUE;
81109270:	e0bfff17 	ldw	r2,-4(fp)
81109274:	00c00044 	movi	r3,1
81109278:	10c00615 	stw	r3,24(r2)
8110927c:	00000206 	br	81109288 <bSpwcGetLinkError+0x84>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
81109280:	e0bfff17 	ldw	r2,-4(fp)
81109284:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_SPW_LNKERR_ESCAPE_MSK) {
81109288:	e0bffe17 	ldw	r2,-8(fp)
8110928c:	1080012c 	andhi	r2,r2,4
81109290:	10000426 	beq	r2,zero,811092a4 <bSpwcGetLinkError+0xa0>
			pxSpwcCh->xLinkError.bEscape = TRUE;
81109294:	e0bfff17 	ldw	r2,-4(fp)
81109298:	00c00044 	movi	r3,1
8110929c:	10c00715 	stw	r3,28(r2)
811092a0:	00000206 	br	811092ac <bSpwcGetLinkError+0xa8>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
811092a4:	e0bfff17 	ldw	r2,-4(fp)
811092a8:	10000715 	stw	zero,28(r2)
		}
		if (uliReg & COMM_SPW_LNKERR_CREDIT_MSK) {
811092ac:	e0bffe17 	ldw	r2,-8(fp)
811092b0:	1080022c 	andhi	r2,r2,8
811092b4:	10000426 	beq	r2,zero,811092c8 <bSpwcGetLinkError+0xc4>
			pxSpwcCh->xLinkError.bCredit = TRUE;
811092b8:	e0bfff17 	ldw	r2,-4(fp)
811092bc:	00c00044 	movi	r3,1
811092c0:	10c00815 	stw	r3,32(r2)
811092c4:	00000206 	br	811092d0 <bSpwcGetLinkError+0xcc>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
811092c8:	e0bfff17 	ldw	r2,-4(fp)
811092cc:	10000815 	stw	zero,32(r2)
		}

		bStatus = TRUE;
811092d0:	00800044 	movi	r2,1
811092d4:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811092d8:	e0bffd17 	ldw	r2,-12(fp)
}
811092dc:	e037883a 	mov	sp,fp
811092e0:	dfc00117 	ldw	ra,4(sp)
811092e4:	df000017 	ldw	fp,0(sp)
811092e8:	dec00204 	addi	sp,sp,8
811092ec:	f800283a 	ret

811092f0 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
811092f0:	defffb04 	addi	sp,sp,-20
811092f4:	dfc00415 	stw	ra,16(sp)
811092f8:	df000315 	stw	fp,12(sp)
811092fc:	df000304 	addi	fp,sp,12
81109300:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81109304:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81109308:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
8110930c:	e0bfff17 	ldw	r2,-4(fp)
81109310:	10002326 	beq	r2,zero,811093a0 <bSpwcGetLinkStatus+0xb0>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81109314:	e0bfff17 	ldw	r2,-4(fp)
81109318:	10800017 	ldw	r2,0(r2)
8110931c:	000b883a 	mov	r5,zero
81109320:	1009883a 	mov	r4,r2
81109324:	11095e00 	call	811095e0 <uliSpwcReadReg>
81109328:	e0bffe15 	stw	r2,-8(fp)
		COMM_LINK_CFG_STAT_REG_OFST);

		if (uliReg & COMM_SPW_LNKSTAT_STARTED_MSK) {
8110932c:	e0bffe17 	ldw	r2,-8(fp)
81109330:	1081000c 	andi	r2,r2,1024
81109334:	10000426 	beq	r2,zero,81109348 <bSpwcGetLinkStatus+0x58>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81109338:	e0bfff17 	ldw	r2,-4(fp)
8110933c:	00c00044 	movi	r3,1
81109340:	10c00915 	stw	r3,36(r2)
81109344:	00000206 	br	81109350 <bSpwcGetLinkStatus+0x60>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
81109348:	e0bfff17 	ldw	r2,-4(fp)
8110934c:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_SPW_LNKSTAT_CONNECTING_MSK) {
81109350:	e0bffe17 	ldw	r2,-8(fp)
81109354:	1080800c 	andi	r2,r2,512
81109358:	10000426 	beq	r2,zero,8110936c <bSpwcGetLinkStatus+0x7c>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
8110935c:	e0bfff17 	ldw	r2,-4(fp)
81109360:	00c00044 	movi	r3,1
81109364:	10c00a15 	stw	r3,40(r2)
81109368:	00000206 	br	81109374 <bSpwcGetLinkStatus+0x84>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
8110936c:	e0bfff17 	ldw	r2,-4(fp)
81109370:	10000a15 	stw	zero,40(r2)
		}
		if (uliReg & COMM_SPW_LNKSTAT_RUNNING_MSK) {
81109374:	e0bffe17 	ldw	r2,-8(fp)
81109378:	1080400c 	andi	r2,r2,256
8110937c:	10000426 	beq	r2,zero,81109390 <bSpwcGetLinkStatus+0xa0>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
81109380:	e0bfff17 	ldw	r2,-4(fp)
81109384:	00c00044 	movi	r3,1
81109388:	10c00b15 	stw	r3,44(r2)
8110938c:	00000206 	br	81109398 <bSpwcGetLinkStatus+0xa8>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
81109390:	e0bfff17 	ldw	r2,-4(fp)
81109394:	10000b15 	stw	zero,44(r2)
		}

		bStatus = TRUE;
81109398:	00800044 	movi	r2,1
8110939c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811093a0:	e0bffd17 	ldw	r2,-12(fp)
}
811093a4:	e037883a 	mov	sp,fp
811093a8:	dfc00117 	ldw	ra,4(sp)
811093ac:	df000017 	ldw	fp,0(sp)
811093b0:	dec00204 	addi	sp,sp,8
811093b4:	f800283a 	ret

811093b8 <bSpwcGetTimecode>:

bool bSpwcGetTimecode(TSpwcChannel *pxSpwcCh) {
811093b8:	defffb04 	addi	sp,sp,-20
811093bc:	dfc00415 	stw	ra,16(sp)
811093c0:	df000315 	stw	fp,12(sp)
811093c4:	df000304 	addi	fp,sp,12
811093c8:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811093cc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811093d0:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811093d4:	e0bfff17 	ldw	r2,-4(fp)
811093d8:	10001326 	beq	r2,zero,81109428 <bSpwcGetTimecode+0x70>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811093dc:	e0bfff17 	ldw	r2,-4(fp)
811093e0:	10800017 	ldw	r2,0(r2)
811093e4:	01400044 	movi	r5,1
811093e8:	1009883a 	mov	r4,r2
811093ec:	11095e00 	call	811095e0 <uliSpwcReadReg>
811093f0:	e0bffe15 	stw	r2,-8(fp)
		COMM_TIMECODE_REG_OFST);

		pxSpwcCh->xTimecode.ucControl= (alt_u8)(
				(uliReg & COMM_TIMECODE_CONTROL_MSK) >> 6);
811093f4:	e0bffe17 	ldw	r2,-8(fp)
811093f8:	1080300c 	andi	r2,r2,192
811093fc:	1004d1ba 	srli	r2,r2,6

	if (pxSpwcCh != NULL) {
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
		COMM_TIMECODE_REG_OFST);

		pxSpwcCh->xTimecode.ucControl= (alt_u8)(
81109400:	1007883a 	mov	r3,r2
81109404:	e0bfff17 	ldw	r2,-4(fp)
81109408:	10c00c05 	stb	r3,48(r2)
				(uliReg & COMM_TIMECODE_CONTROL_MSK) >> 6);
		pxSpwcCh->xTimecode.ucCounter= (alt_u8)(
8110940c:	e0bffe17 	ldw	r2,-8(fp)
81109410:	10800fcc 	andi	r2,r2,63
81109414:	1007883a 	mov	r3,r2
81109418:	e0bfff17 	ldw	r2,-4(fp)
8110941c:	10c00c45 	stb	r3,49(r2)
				(uliReg & COMM_TIMECODE_TIME_MSK) >> 0);

		bStatus = TRUE;
81109420:	00800044 	movi	r2,1
81109424:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81109428:	e0bffd17 	ldw	r2,-12(fp)
}
8110942c:	e037883a 	mov	sp,fp
81109430:	dfc00117 	ldw	ra,4(sp)
81109434:	df000017 	ldw	fp,0(sp)
81109438:	dec00204 	addi	sp,sp,8
8110943c:	f800283a 	ret

81109440 <bSpwcClearTimecode>:

bool bSpwcClearTimecode(TSpwcChannel *pxSpwcCh) {
81109440:	defffb04 	addi	sp,sp,-20
81109444:	dfc00415 	stw	ra,16(sp)
81109448:	df000315 	stw	fp,12(sp)
8110944c:	df000304 	addi	fp,sp,12
81109450:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81109454:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81109458:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
8110945c:	e0bfff17 	ldw	r2,-4(fp)
81109460:	10001126 	beq	r2,zero,811094a8 <bSpwcClearTimecode+0x68>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81109464:	e0bfff17 	ldw	r2,-4(fp)
81109468:	10800017 	ldw	r2,0(r2)
8110946c:	01400044 	movi	r5,1
81109470:	1009883a 	mov	r4,r2
81109474:	11095e00 	call	811095e0 <uliSpwcReadReg>
81109478:	e0bffe15 	stw	r2,-8(fp)
		COMM_TIMECODE_REG_OFST);

		uliReg |= COMM_TIMECODE_CLR_MSK;
8110947c:	e0bffe17 	ldw	r2,-8(fp)
81109480:	10804014 	ori	r2,r2,256
81109484:	e0bffe15 	stw	r2,-8(fp)

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_TIMECODE_REG_OFST, uliReg);
81109488:	e0bfff17 	ldw	r2,-4(fp)
8110948c:	10800017 	ldw	r2,0(r2)
81109490:	e1bffe17 	ldw	r6,-8(fp)
81109494:	01400044 	movi	r5,1
81109498:	1009883a 	mov	r4,r2
8110949c:	11095940 	call	81109594 <vSpwcWriteReg>
		bStatus = TRUE;
811094a0:	00800044 	movi	r2,1
811094a4:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811094a8:	e0bffd17 	ldw	r2,-12(fp)
}
811094ac:	e037883a 	mov	sp,fp
811094b0:	dfc00117 	ldw	ra,4(sp)
811094b4:	df000017 	ldw	fp,0(sp)
811094b8:	dec00204 	addi	sp,sp,8
811094bc:	f800283a 	ret

811094c0 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
811094c0:	defffb04 	addi	sp,sp,-20
811094c4:	dfc00415 	stw	ra,16(sp)
811094c8:	df000315 	stw	fp,12(sp)
811094cc:	df000304 	addi	fp,sp,12
811094d0:	e13ffe15 	stw	r4,-8(fp)
811094d4:	2805883a 	mov	r2,r5
811094d8:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
811094dc:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
811094e0:	e0bffe17 	ldw	r2,-8(fp)
811094e4:	10002526 	beq	r2,zero,8110957c <bSpwcInitCh+0xbc>
		bStatus = TRUE;
811094e8:	00800044 	movi	r2,1
811094ec:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
811094f0:	e0bfff03 	ldbu	r2,-4(fp)
811094f4:	10000326 	beq	r2,zero,81109504 <bSpwcInitCh+0x44>
811094f8:	10800060 	cmpeqi	r2,r2,1
811094fc:	1000061e 	bne	r2,zero,81109518 <bSpwcInitCh+0x58>
81109500:	00000a06 	br	8110952c <bSpwcInitCh+0x6c>
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81109504:	e0fffe17 	ldw	r3,-8(fp)
81109508:	00a04834 	movhi	r2,33056
8110950c:	108b0004 	addi	r2,r2,11264
81109510:	18800015 	stw	r2,0(r3)
			break;
81109514:	00000706 	br	81109534 <bSpwcInitCh+0x74>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
81109518:	e0fffe17 	ldw	r3,-8(fp)
8110951c:	00a04834 	movhi	r2,33056
81109520:	108a0004 	addi	r2,r2,10240
81109524:	18800015 	stw	r2,0(r3)
			break;
81109528:	00000206 	br	81109534 <bSpwcInitCh+0x74>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
			break;
*/
		default:
			bStatus = FALSE;
8110952c:	e03ffd15 	stw	zero,-12(fp)
			break;
81109530:	0001883a 	nop
		}

		if (bStatus) {
81109534:	e0bffd17 	ldw	r2,-12(fp)
81109538:	10001026 	beq	r2,zero,8110957c <bSpwcInitCh+0xbc>
			if (!bSpwcGetLink(pxSpwcCh)) {
8110953c:	e13ffe17 	ldw	r4,-8(fp)
81109540:	11091280 	call	81109128 <bSpwcGetLink>
81109544:	1000011e 	bne	r2,zero,8110954c <bSpwcInitCh+0x8c>
				bStatus = FALSE;
81109548:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
8110954c:	e13ffe17 	ldw	r4,-8(fp)
81109550:	11092040 	call	81109204 <bSpwcGetLinkError>
81109554:	1000011e 	bne	r2,zero,8110955c <bSpwcInitCh+0x9c>
				bStatus = FALSE;
81109558:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
8110955c:	e13ffe17 	ldw	r4,-8(fp)
81109560:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
81109564:	1000011e 	bne	r2,zero,8110956c <bSpwcInitCh+0xac>
				bStatus = FALSE;
81109568:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetTimecode(pxSpwcCh)) {
8110956c:	e13ffe17 	ldw	r4,-8(fp)
81109570:	11093b80 	call	811093b8 <bSpwcGetTimecode>
81109574:	1000011e 	bne	r2,zero,8110957c <bSpwcInitCh+0xbc>
				bStatus = FALSE;
81109578:	e03ffd15 	stw	zero,-12(fp)
			}
		}
	}
	return bStatus;
8110957c:	e0bffd17 	ldw	r2,-12(fp)
}
81109580:	e037883a 	mov	sp,fp
81109584:	dfc00117 	ldw	ra,4(sp)
81109588:	df000017 	ldw	fp,0(sp)
8110958c:	dec00204 	addi	sp,sp,8
81109590:	f800283a 	ret

81109594 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81109594:	defffc04 	addi	sp,sp,-16
81109598:	df000315 	stw	fp,12(sp)
8110959c:	df000304 	addi	fp,sp,12
811095a0:	e13ffd15 	stw	r4,-12(fp)
811095a4:	e17ffe15 	stw	r5,-8(fp)
811095a8:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811095ac:	e0bffe17 	ldw	r2,-8(fp)
811095b0:	1085883a 	add	r2,r2,r2
811095b4:	1085883a 	add	r2,r2,r2
811095b8:	1007883a 	mov	r3,r2
811095bc:	e0bffd17 	ldw	r2,-12(fp)
811095c0:	10c5883a 	add	r2,r2,r3
811095c4:	e0ffff17 	ldw	r3,-4(fp)
811095c8:	10c00015 	stw	r3,0(r2)
}
811095cc:	0001883a 	nop
811095d0:	e037883a 	mov	sp,fp
811095d4:	df000017 	ldw	fp,0(sp)
811095d8:	dec00104 	addi	sp,sp,4
811095dc:	f800283a 	ret

811095e0 <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811095e0:	defffc04 	addi	sp,sp,-16
811095e4:	df000315 	stw	fp,12(sp)
811095e8:	df000304 	addi	fp,sp,12
811095ec:	e13ffe15 	stw	r4,-8(fp)
811095f0:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811095f4:	e0bfff17 	ldw	r2,-4(fp)
811095f8:	1085883a 	add	r2,r2,r2
811095fc:	1085883a 	add	r2,r2,r2
81109600:	1007883a 	mov	r3,r2
81109604:	e0bffe17 	ldw	r2,-8(fp)
81109608:	10c5883a 	add	r2,r2,r3
8110960c:	10800017 	ldw	r2,0(r2)
81109610:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81109614:	e0bffd17 	ldw	r2,-12(fp)
}
81109618:	e037883a 	mov	sp,fp
8110961c:	df000017 	ldw	fp,0(sp)
81109620:	dec00104 	addi	sp,sp,4
81109624:	f800283a 	ret

81109628 <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
81109628:	defffe04 	addi	sp,sp,-8
8110962c:	dfc00115 	stw	ra,4(sp)
81109630:	df000015 	stw	fp,0(sp)
81109634:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
81109638:	01400204 	movi	r5,8
8110963c:	01000044 	movi	r4,1
81109640:	11097b00 	call	811097b0 <bCtrlIoLvdsDrive>
  return  TRUE;
81109644:	00800044 	movi	r2,1
}
81109648:	e037883a 	mov	sp,fp
8110964c:	dfc00117 	ldw	ra,4(sp)
81109650:	df000017 	ldw	fp,0(sp)
81109654:	dec00204 	addi	sp,sp,8
81109658:	f800283a 	ret

8110965c <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
8110965c:	defffe04 	addi	sp,sp,-8
81109660:	dfc00115 	stw	ra,4(sp)
81109664:	df000015 	stw	fp,0(sp)
81109668:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
8110966c:	01400204 	movi	r5,8
81109670:	0009883a 	mov	r4,zero
81109674:	11097b00 	call	811097b0 <bCtrlIoLvdsDrive>
  return  TRUE;
81109678:	00800044 	movi	r2,1
}
8110967c:	e037883a 	mov	sp,fp
81109680:	dfc00117 	ldw	ra,4(sp)
81109684:	df000017 	ldw	fp,0(sp)
81109688:	dec00204 	addi	sp,sp,8
8110968c:	f800283a 	ret

81109690 <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
81109690:	defffe04 	addi	sp,sp,-8
81109694:	dfc00115 	stw	ra,4(sp)
81109698:	df000015 	stw	fp,0(sp)
8110969c:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
811096a0:	01400104 	movi	r5,4
811096a4:	01000044 	movi	r4,1
811096a8:	11097b00 	call	811097b0 <bCtrlIoLvdsDrive>
  return  TRUE;
811096ac:	00800044 	movi	r2,1
}
811096b0:	e037883a 	mov	sp,fp
811096b4:	dfc00117 	ldw	ra,4(sp)
811096b8:	df000017 	ldw	fp,0(sp)
811096bc:	dec00204 	addi	sp,sp,8
811096c0:	f800283a 	ret

811096c4 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
811096c4:	defffe04 	addi	sp,sp,-8
811096c8:	dfc00115 	stw	ra,4(sp)
811096cc:	df000015 	stw	fp,0(sp)
811096d0:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
811096d4:	01400104 	movi	r5,4
811096d8:	0009883a 	mov	r4,zero
811096dc:	11097b00 	call	811097b0 <bCtrlIoLvdsDrive>
  return  TRUE;
811096e0:	00800044 	movi	r2,1
}
811096e4:	e037883a 	mov	sp,fp
811096e8:	dfc00117 	ldw	ra,4(sp)
811096ec:	df000017 	ldw	fp,0(sp)
811096f0:	dec00204 	addi	sp,sp,8
811096f4:	f800283a 	ret

811096f8 <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
811096f8:	defffd04 	addi	sp,sp,-12
811096fc:	dfc00215 	stw	ra,8(sp)
81109700:	df000115 	stw	fp,4(sp)
81109704:	df000104 	addi	fp,sp,4
81109708:	2005883a 	mov	r2,r4
8110970c:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
81109710:	e0bfff03 	ldbu	r2,-4(fp)
81109714:	10c00060 	cmpeqi	r3,r2,1
81109718:	18000d1e 	bne	r3,zero,81109750 <bSetPreEmphasys+0x58>
8110971c:	10c00088 	cmpgei	r3,r2,2
81109720:	1800021e 	bne	r3,zero,8110972c <bSetPreEmphasys+0x34>
81109724:	10000626 	beq	r2,zero,81109740 <bSetPreEmphasys+0x48>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81109728:	00001b06 	br	81109798 <bSetPreEmphasys+0xa0>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
8110972c:	10c000a0 	cmpeqi	r3,r2,2
81109730:	18000e1e 	bne	r3,zero,8110976c <bSetPreEmphasys+0x74>
81109734:	108000e0 	cmpeqi	r2,r2,3
81109738:	1000131e 	bne	r2,zero,81109788 <bSetPreEmphasys+0x90>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
8110973c:	00001606 	br	81109798 <bSetPreEmphasys+0xa0>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
81109740:	014000c4 	movi	r5,3
81109744:	0009883a 	mov	r4,zero
81109748:	11097b00 	call	811097b0 <bCtrlIoLvdsDrive>
      break;
8110974c:	00001206 	br	81109798 <bSetPreEmphasys+0xa0>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
81109750:	01400084 	movi	r5,2
81109754:	0009883a 	mov	r4,zero
81109758:	11097b00 	call	811097b0 <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
8110975c:	01400044 	movi	r5,1
81109760:	01000044 	movi	r4,1
81109764:	11097b00 	call	811097b0 <bCtrlIoLvdsDrive>
      break;
81109768:	00000b06 	br	81109798 <bSetPreEmphasys+0xa0>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
8110976c:	01400044 	movi	r5,1
81109770:	0009883a 	mov	r4,zero
81109774:	11097b00 	call	811097b0 <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
81109778:	01400084 	movi	r5,2
8110977c:	01000044 	movi	r4,1
81109780:	11097b00 	call	811097b0 <bCtrlIoLvdsDrive>
      break;
81109784:	00000406 	br	81109798 <bSetPreEmphasys+0xa0>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
81109788:	014000c4 	movi	r5,3
8110978c:	01000044 	movi	r4,1
81109790:	11097b00 	call	811097b0 <bCtrlIoLvdsDrive>
      break;
81109794:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
81109798:	00800044 	movi	r2,1
}
8110979c:	e037883a 	mov	sp,fp
811097a0:	dfc00117 	ldw	ra,4(sp)
811097a4:	df000017 	ldw	fp,0(sp)
811097a8:	dec00204 	addi	sp,sp,8
811097ac:	f800283a 	ret

811097b0 <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
811097b0:	defffd04 	addi	sp,sp,-12
811097b4:	df000215 	stw	fp,8(sp)
811097b8:	df000204 	addi	fp,sp,8
811097bc:	e13ffe15 	stw	r4,-8(fp)
811097c0:	2805883a 	mov	r2,r5
811097c4:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
811097c8:	e0bffe17 	ldw	r2,-8(fp)
811097cc:	1000071e 	bne	r2,zero,811097ec <bCtrlIoLvdsDrive+0x3c>
	 ucIoValue &= (~ucMask);
811097d0:	e0bfff03 	ldbu	r2,-4(fp)
811097d4:	0084303a 	nor	r2,zero,r2
811097d8:	1007883a 	mov	r3,r2
811097dc:	d0a00003 	ldbu	r2,-32768(gp)
811097e0:	1884703a 	and	r2,r3,r2
811097e4:	d0a00005 	stb	r2,-32768(gp)
811097e8:	00000406 	br	811097fc <bCtrlIoLvdsDrive+0x4c>
  }
  else {
	 ucIoValue |= ucMask;
811097ec:	d0e00003 	ldbu	r3,-32768(gp)
811097f0:	e0bfff03 	ldbu	r2,-4(fp)
811097f4:	1884b03a 	or	r2,r3,r2
811097f8:	d0a00005 	stb	r2,-32768(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
811097fc:	d0a00003 	ldbu	r2,-32768(gp)
81109800:	10c03fcc 	andi	r3,r2,255
81109804:	00a00034 	movhi	r2,32768
81109808:	10822804 	addi	r2,r2,2208
8110980c:	10c00035 	stwio	r3,0(r2)
  return TRUE;
81109810:	00800044 	movi	r2,1
}
81109814:	e037883a 	mov	sp,fp
81109818:	df000017 	ldw	fp,0(sp)
8110981c:	dec00104 	addi	sp,sp,4
81109820:	f800283a 	ret

81109824 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81109824:	defffa04 	addi	sp,sp,-24
81109828:	dfc00515 	stw	ra,20(sp)
8110982c:	df000415 	stw	fp,16(sp)
81109830:	df000404 	addi	fp,sp,16
81109834:	e13ffd15 	stw	r4,-12(fp)
81109838:	e17ffe15 	stw	r5,-8(fp)
8110983c:	3005883a 	mov	r2,r6
81109840:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81109844:	00800044 	movi	r2,1
81109848:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
8110984c:	e17ffe17 	ldw	r5,-8(fp)
81109850:	e13ffd17 	ldw	r4,-12(fp)
81109854:	1109bd40 	call	81109bd4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81109858:	e0bfff03 	ldbu	r2,-4(fp)
8110985c:	10803fcc 	andi	r2,r2,255
81109860:	100d883a 	mov	r6,r2
81109864:	e17ffe17 	ldw	r5,-8(fp)
81109868:	e13ffd17 	ldw	r4,-12(fp)
8110986c:	1109cd80 	call	81109cd8 <i2c_write>
81109870:	1000011e 	bne	r2,zero,81109878 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
81109874:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81109878:	e17ffe17 	ldw	r5,-8(fp)
8110987c:	e13ffd17 	ldw	r4,-12(fp)
81109880:	1109c600 	call	81109c60 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81109884:	0106d604 	movi	r4,7000
81109888:	1120f980 	call	81120f98 <usleep>
    
    return bSuccess;
8110988c:	e0bffc17 	ldw	r2,-16(fp)

}
81109890:	e037883a 	mov	sp,fp
81109894:	dfc00117 	ldw	ra,4(sp)
81109898:	df000017 	ldw	fp,0(sp)
8110989c:	dec00204 	addi	sp,sp,8
811098a0:	f800283a 	ret

811098a4 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
811098a4:	defff804 	addi	sp,sp,-32
811098a8:	dfc00715 	stw	ra,28(sp)
811098ac:	df000615 	stw	fp,24(sp)
811098b0:	df000604 	addi	fp,sp,24
811098b4:	e13ffb15 	stw	r4,-20(fp)
811098b8:	e17ffc15 	stw	r5,-16(fp)
811098bc:	3009883a 	mov	r4,r6
811098c0:	3807883a 	mov	r3,r7
811098c4:	e0800217 	ldw	r2,8(fp)
811098c8:	e13ffd05 	stb	r4,-12(fp)
811098cc:	e0fffe05 	stb	r3,-8(fp)
811098d0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811098d4:	00800044 	movi	r2,1
811098d8:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811098dc:	e17ffc17 	ldw	r5,-16(fp)
811098e0:	e13ffb17 	ldw	r4,-20(fp)
811098e4:	1109bd40 	call	81109bd4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811098e8:	e0bffd03 	ldbu	r2,-12(fp)
811098ec:	10803fcc 	andi	r2,r2,255
811098f0:	100d883a 	mov	r6,r2
811098f4:	e17ffc17 	ldw	r5,-16(fp)
811098f8:	e13ffb17 	ldw	r4,-20(fp)
811098fc:	1109cd80 	call	81109cd8 <i2c_write>
81109900:	1000011e 	bne	r2,zero,81109908 <I2C_Write+0x64>
        bSuccess = FALSE;
81109904:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81109908:	e0bffa17 	ldw	r2,-24(fp)
8110990c:	10000726 	beq	r2,zero,8110992c <I2C_Write+0x88>
81109910:	e0bffe03 	ldbu	r2,-8(fp)
81109914:	100d883a 	mov	r6,r2
81109918:	e17ffc17 	ldw	r5,-16(fp)
8110991c:	e13ffb17 	ldw	r4,-20(fp)
81109920:	1109cd80 	call	81109cd8 <i2c_write>
81109924:	1000011e 	bne	r2,zero,8110992c <I2C_Write+0x88>
        bSuccess = FALSE;
81109928:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
8110992c:	e0bffa17 	ldw	r2,-24(fp)
81109930:	10000726 	beq	r2,zero,81109950 <I2C_Write+0xac>
81109934:	e0bfff03 	ldbu	r2,-4(fp)
81109938:	100d883a 	mov	r6,r2
8110993c:	e17ffc17 	ldw	r5,-16(fp)
81109940:	e13ffb17 	ldw	r4,-20(fp)
81109944:	1109cd80 	call	81109cd8 <i2c_write>
81109948:	1000011e 	bne	r2,zero,81109950 <I2C_Write+0xac>
        bSuccess = FALSE;
8110994c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81109950:	e17ffc17 	ldw	r5,-16(fp)
81109954:	e13ffb17 	ldw	r4,-20(fp)
81109958:	1109c600 	call	81109c60 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
8110995c:	0106d604 	movi	r4,7000
81109960:	1120f980 	call	81120f98 <usleep>
    
    return bSuccess;
81109964:	e0bffa17 	ldw	r2,-24(fp)

}
81109968:	e037883a 	mov	sp,fp
8110996c:	dfc00117 	ldw	ra,4(sp)
81109970:	df000017 	ldw	fp,0(sp)
81109974:	dec00204 	addi	sp,sp,8
81109978:	f800283a 	ret

8110997c <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
8110997c:	defff904 	addi	sp,sp,-28
81109980:	dfc00615 	stw	ra,24(sp)
81109984:	df000515 	stw	fp,20(sp)
81109988:	df000504 	addi	fp,sp,20
8110998c:	e13ffc15 	stw	r4,-16(fp)
81109990:	e17ffd15 	stw	r5,-12(fp)
81109994:	3007883a 	mov	r3,r6
81109998:	3805883a 	mov	r2,r7
8110999c:	e0fffe05 	stb	r3,-8(fp)
811099a0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811099a4:	00800044 	movi	r2,1
811099a8:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811099ac:	e17ffd17 	ldw	r5,-12(fp)
811099b0:	e13ffc17 	ldw	r4,-16(fp)
811099b4:	1109bd40 	call	81109bd4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811099b8:	e0bffe03 	ldbu	r2,-8(fp)
811099bc:	10803fcc 	andi	r2,r2,255
811099c0:	100d883a 	mov	r6,r2
811099c4:	e17ffd17 	ldw	r5,-12(fp)
811099c8:	e13ffc17 	ldw	r4,-16(fp)
811099cc:	1109cd80 	call	81109cd8 <i2c_write>
811099d0:	1000011e 	bne	r2,zero,811099d8 <I2C_Read+0x5c>
        bSuccess = FALSE;
811099d4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
811099d8:	e0bffb17 	ldw	r2,-20(fp)
811099dc:	10000726 	beq	r2,zero,811099fc <I2C_Read+0x80>
811099e0:	e0bfff03 	ldbu	r2,-4(fp)
811099e4:	100d883a 	mov	r6,r2
811099e8:	e17ffd17 	ldw	r5,-12(fp)
811099ec:	e13ffc17 	ldw	r4,-16(fp)
811099f0:	1109cd80 	call	81109cd8 <i2c_write>
811099f4:	1000011e 	bne	r2,zero,811099fc <I2C_Read+0x80>
        bSuccess = FALSE;
811099f8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
811099fc:	e17ffd17 	ldw	r5,-12(fp)
81109a00:	e13ffc17 	ldw	r4,-16(fp)
81109a04:	1109bd40 	call	81109bd4 <i2c_start>
    DeviceAddr |= 1; // Read
81109a08:	e0bffe03 	ldbu	r2,-8(fp)
81109a0c:	10800054 	ori	r2,r2,1
81109a10:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81109a14:	e0bffb17 	ldw	r2,-20(fp)
81109a18:	10000826 	beq	r2,zero,81109a3c <I2C_Read+0xc0>
81109a1c:	e0bffe03 	ldbu	r2,-8(fp)
81109a20:	10803fcc 	andi	r2,r2,255
81109a24:	100d883a 	mov	r6,r2
81109a28:	e17ffd17 	ldw	r5,-12(fp)
81109a2c:	e13ffc17 	ldw	r4,-16(fp)
81109a30:	1109cd80 	call	81109cd8 <i2c_write>
81109a34:	1000011e 	bne	r2,zero,81109a3c <I2C_Read+0xc0>
        bSuccess = FALSE;
81109a38:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81109a3c:	e0bffb17 	ldw	r2,-20(fp)
81109a40:	10000526 	beq	r2,zero,81109a58 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81109a44:	000f883a 	mov	r7,zero
81109a48:	e1800217 	ldw	r6,8(fp)
81109a4c:	e17ffd17 	ldw	r5,-12(fp)
81109a50:	e13ffc17 	ldw	r4,-16(fp)
81109a54:	1109e080 	call	81109e08 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81109a58:	e17ffd17 	ldw	r5,-12(fp)
81109a5c:	e13ffc17 	ldw	r4,-16(fp)
81109a60:	1109c600 	call	81109c60 <i2c_stop>
    
    return bSuccess;
81109a64:	e0bffb17 	ldw	r2,-20(fp)
}
81109a68:	e037883a 	mov	sp,fp
81109a6c:	dfc00117 	ldw	ra,4(sp)
81109a70:	df000017 	ldw	fp,0(sp)
81109a74:	dec00204 	addi	sp,sp,8
81109a78:	f800283a 	ret

81109a7c <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81109a7c:	defff604 	addi	sp,sp,-40
81109a80:	dfc00915 	stw	ra,36(sp)
81109a84:	df000815 	stw	fp,32(sp)
81109a88:	df000804 	addi	fp,sp,32
81109a8c:	e13ffb15 	stw	r4,-20(fp)
81109a90:	e17ffc15 	stw	r5,-16(fp)
81109a94:	3007883a 	mov	r3,r6
81109a98:	e1fffe15 	stw	r7,-8(fp)
81109a9c:	e0800217 	ldw	r2,8(fp)
81109aa0:	e0fffd05 	stb	r3,-12(fp)
81109aa4:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81109aa8:	00800044 	movi	r2,1
81109aac:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81109ab0:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81109ab4:	e17ffc17 	ldw	r5,-16(fp)
81109ab8:	e13ffb17 	ldw	r4,-20(fp)
81109abc:	1109bd40 	call	81109bd4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81109ac0:	e0bffd03 	ldbu	r2,-12(fp)
81109ac4:	10803fcc 	andi	r2,r2,255
81109ac8:	100d883a 	mov	r6,r2
81109acc:	e17ffc17 	ldw	r5,-16(fp)
81109ad0:	e13ffb17 	ldw	r4,-20(fp)
81109ad4:	1109cd80 	call	81109cd8 <i2c_write>
81109ad8:	1000011e 	bne	r2,zero,81109ae0 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
81109adc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81109ae0:	e0bff917 	ldw	r2,-28(fp)
81109ae4:	10000726 	beq	r2,zero,81109b04 <I2C_MultipleRead+0x88>
81109ae8:	e0bffa03 	ldbu	r2,-24(fp)
81109aec:	100d883a 	mov	r6,r2
81109af0:	e17ffc17 	ldw	r5,-16(fp)
81109af4:	e13ffb17 	ldw	r4,-20(fp)
81109af8:	1109cd80 	call	81109cd8 <i2c_write>
81109afc:	1000011e 	bne	r2,zero,81109b04 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
81109b00:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81109b04:	e0bff917 	ldw	r2,-28(fp)
81109b08:	10000326 	beq	r2,zero,81109b18 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
81109b0c:	e17ffc17 	ldw	r5,-16(fp)
81109b10:	e13ffb17 	ldw	r4,-20(fp)
81109b14:	1109bd40 	call	81109bd4 <i2c_start>
    DeviceAddr |= 1; // Read
81109b18:	e0bffd03 	ldbu	r2,-12(fp)
81109b1c:	10800054 	ori	r2,r2,1
81109b20:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81109b24:	e0bff917 	ldw	r2,-28(fp)
81109b28:	10000826 	beq	r2,zero,81109b4c <I2C_MultipleRead+0xd0>
81109b2c:	e0bffd03 	ldbu	r2,-12(fp)
81109b30:	10803fcc 	andi	r2,r2,255
81109b34:	100d883a 	mov	r6,r2
81109b38:	e17ffc17 	ldw	r5,-16(fp)
81109b3c:	e13ffb17 	ldw	r4,-20(fp)
81109b40:	1109cd80 	call	81109cd8 <i2c_write>
81109b44:	1000011e 	bne	r2,zero,81109b4c <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
81109b48:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81109b4c:	e0bff917 	ldw	r2,-28(fp)
81109b50:	10001726 	beq	r2,zero,81109bb0 <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
81109b54:	e03ff815 	stw	zero,-32(fp)
81109b58:	00001006 	br	81109b9c <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81109b5c:	e0bff817 	ldw	r2,-32(fp)
81109b60:	e0fffe17 	ldw	r3,-8(fp)
81109b64:	1889883a 	add	r4,r3,r2
81109b68:	e0bfff0b 	ldhu	r2,-4(fp)
81109b6c:	10ffffc4 	addi	r3,r2,-1
81109b70:	e0bff817 	ldw	r2,-32(fp)
81109b74:	1884c03a 	cmpne	r2,r3,r2
81109b78:	10803fcc 	andi	r2,r2,255
81109b7c:	100f883a 	mov	r7,r2
81109b80:	200d883a 	mov	r6,r4
81109b84:	e17ffc17 	ldw	r5,-16(fp)
81109b88:	e13ffb17 	ldw	r4,-20(fp)
81109b8c:	1109e080 	call	81109e08 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81109b90:	e0bff817 	ldw	r2,-32(fp)
81109b94:	10800044 	addi	r2,r2,1
81109b98:	e0bff815 	stw	r2,-32(fp)
81109b9c:	e0bfff0b 	ldhu	r2,-4(fp)
81109ba0:	e0fff817 	ldw	r3,-32(fp)
81109ba4:	1880020e 	bge	r3,r2,81109bb0 <I2C_MultipleRead+0x134>
81109ba8:	e0bff917 	ldw	r2,-28(fp)
81109bac:	103feb1e 	bne	r2,zero,81109b5c <__reset+0xfb0e9b5c>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81109bb0:	e17ffc17 	ldw	r5,-16(fp)
81109bb4:	e13ffb17 	ldw	r4,-20(fp)
81109bb8:	1109c600 	call	81109c60 <i2c_stop>
    
    return bSuccess;    
81109bbc:	e0bff917 	ldw	r2,-28(fp)
    
}
81109bc0:	e037883a 	mov	sp,fp
81109bc4:	dfc00117 	ldw	ra,4(sp)
81109bc8:	df000017 	ldw	fp,0(sp)
81109bcc:	dec00204 	addi	sp,sp,8
81109bd0:	f800283a 	ret

81109bd4 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81109bd4:	defffc04 	addi	sp,sp,-16
81109bd8:	dfc00315 	stw	ra,12(sp)
81109bdc:	df000215 	stw	fp,8(sp)
81109be0:	df000204 	addi	fp,sp,8
81109be4:	e13ffe15 	stw	r4,-8(fp)
81109be8:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81109bec:	e0bfff17 	ldw	r2,-4(fp)
81109bf0:	10800104 	addi	r2,r2,4
81109bf4:	1007883a 	mov	r3,r2
81109bf8:	00800044 	movi	r2,1
81109bfc:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81109c00:	e0bfff17 	ldw	r2,-4(fp)
81109c04:	00c00044 	movi	r3,1
81109c08:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81109c0c:	e0bffe17 	ldw	r2,-8(fp)
81109c10:	00c00044 	movi	r3,1
81109c14:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81109c18:	01000044 	movi	r4,1
81109c1c:	1120f980 	call	81120f98 <usleep>
     
    SDA_LOW(data_base); // data low
81109c20:	e0bfff17 	ldw	r2,-4(fp)
81109c24:	0007883a 	mov	r3,zero
81109c28:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81109c2c:	01000044 	movi	r4,1
81109c30:	1120f980 	call	81120f98 <usleep>
    SCL_LOW(clk_base); // clock low
81109c34:	e0bffe17 	ldw	r2,-8(fp)
81109c38:	0007883a 	mov	r3,zero
81109c3c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81109c40:	01000044 	movi	r4,1
81109c44:	1120f980 	call	81120f98 <usleep>
}
81109c48:	0001883a 	nop
81109c4c:	e037883a 	mov	sp,fp
81109c50:	dfc00117 	ldw	ra,4(sp)
81109c54:	df000017 	ldw	fp,0(sp)
81109c58:	dec00204 	addi	sp,sp,8
81109c5c:	f800283a 	ret

81109c60 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81109c60:	defffc04 	addi	sp,sp,-16
81109c64:	dfc00315 	stw	ra,12(sp)
81109c68:	df000215 	stw	fp,8(sp)
81109c6c:	df000204 	addi	fp,sp,8
81109c70:	e13ffe15 	stw	r4,-8(fp)
81109c74:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81109c78:	e0bfff17 	ldw	r2,-4(fp)
81109c7c:	10800104 	addi	r2,r2,4
81109c80:	1007883a 	mov	r3,r2
81109c84:	00800044 	movi	r2,1
81109c88:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81109c8c:	e0bfff17 	ldw	r2,-4(fp)
81109c90:	0007883a 	mov	r3,zero
81109c94:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81109c98:	e0bffe17 	ldw	r2,-8(fp)
81109c9c:	00c00044 	movi	r3,1
81109ca0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81109ca4:	01000044 	movi	r4,1
81109ca8:	1120f980 	call	81120f98 <usleep>
    SDA_HIGH(data_base); // data high
81109cac:	e0bfff17 	ldw	r2,-4(fp)
81109cb0:	00c00044 	movi	r3,1
81109cb4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81109cb8:	01000044 	movi	r4,1
81109cbc:	1120f980 	call	81120f98 <usleep>
    

    
}
81109cc0:	0001883a 	nop
81109cc4:	e037883a 	mov	sp,fp
81109cc8:	dfc00117 	ldw	ra,4(sp)
81109ccc:	df000017 	ldw	fp,0(sp)
81109cd0:	dec00204 	addi	sp,sp,8
81109cd4:	f800283a 	ret

81109cd8 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81109cd8:	defff804 	addi	sp,sp,-32
81109cdc:	dfc00715 	stw	ra,28(sp)
81109ce0:	df000615 	stw	fp,24(sp)
81109ce4:	df000604 	addi	fp,sp,24
81109ce8:	e13ffd15 	stw	r4,-12(fp)
81109cec:	e17ffe15 	stw	r5,-8(fp)
81109cf0:	3005883a 	mov	r2,r6
81109cf4:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81109cf8:	00bfe004 	movi	r2,-128
81109cfc:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81109d00:	e0bffe17 	ldw	r2,-8(fp)
81109d04:	10800104 	addi	r2,r2,4
81109d08:	1007883a 	mov	r3,r2
81109d0c:	00800044 	movi	r2,1
81109d10:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81109d14:	e03ffb15 	stw	zero,-20(fp)
81109d18:	00001f06 	br	81109d98 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81109d1c:	e0bffd17 	ldw	r2,-12(fp)
81109d20:	0007883a 	mov	r3,zero
81109d24:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81109d28:	e0ffff03 	ldbu	r3,-4(fp)
81109d2c:	e0bffa03 	ldbu	r2,-24(fp)
81109d30:	1884703a 	and	r2,r3,r2
81109d34:	10803fcc 	andi	r2,r2,255
81109d38:	10000426 	beq	r2,zero,81109d4c <i2c_write+0x74>
            SDA_HIGH(data_base);
81109d3c:	e0bffe17 	ldw	r2,-8(fp)
81109d40:	00c00044 	movi	r3,1
81109d44:	10c00035 	stwio	r3,0(r2)
81109d48:	00000306 	br	81109d58 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
81109d4c:	e0bffe17 	ldw	r2,-8(fp)
81109d50:	0007883a 	mov	r3,zero
81109d54:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81109d58:	e0bffa03 	ldbu	r2,-24(fp)
81109d5c:	1004d07a 	srli	r2,r2,1
81109d60:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81109d64:	e0bffd17 	ldw	r2,-12(fp)
81109d68:	00c00044 	movi	r3,1
81109d6c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81109d70:	01000044 	movi	r4,1
81109d74:	1120f980 	call	81120f98 <usleep>
        SCL_LOW(clk_base);
81109d78:	e0bffd17 	ldw	r2,-12(fp)
81109d7c:	0007883a 	mov	r3,zero
81109d80:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81109d84:	01000044 	movi	r4,1
81109d88:	1120f980 	call	81120f98 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81109d8c:	e0bffb17 	ldw	r2,-20(fp)
81109d90:	10800044 	addi	r2,r2,1
81109d94:	e0bffb15 	stw	r2,-20(fp)
81109d98:	e0bffb17 	ldw	r2,-20(fp)
81109d9c:	10800210 	cmplti	r2,r2,8
81109da0:	103fde1e 	bne	r2,zero,81109d1c <__reset+0xfb0e9d1c>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81109da4:	e0bffe17 	ldw	r2,-8(fp)
81109da8:	10800104 	addi	r2,r2,4
81109dac:	0007883a 	mov	r3,zero
81109db0:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81109db4:	e0bffd17 	ldw	r2,-12(fp)
81109db8:	00c00044 	movi	r3,1
81109dbc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81109dc0:	01000044 	movi	r4,1
81109dc4:	1120f980 	call	81120f98 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81109dc8:	e0bffe17 	ldw	r2,-8(fp)
81109dcc:	10800037 	ldwio	r2,0(r2)
81109dd0:	1005003a 	cmpeq	r2,r2,zero
81109dd4:	10803fcc 	andi	r2,r2,255
81109dd8:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81109ddc:	e0bffd17 	ldw	r2,-12(fp)
81109de0:	0007883a 	mov	r3,zero
81109de4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81109de8:	01000044 	movi	r4,1
81109dec:	1120f980 	call	81120f98 <usleep>
    return bAck;
81109df0:	e0bffc17 	ldw	r2,-16(fp)
}    
81109df4:	e037883a 	mov	sp,fp
81109df8:	dfc00117 	ldw	ra,4(sp)
81109dfc:	df000017 	ldw	fp,0(sp)
81109e00:	dec00204 	addi	sp,sp,8
81109e04:	f800283a 	ret

81109e08 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81109e08:	defff804 	addi	sp,sp,-32
81109e0c:	dfc00715 	stw	ra,28(sp)
81109e10:	df000615 	stw	fp,24(sp)
81109e14:	df000604 	addi	fp,sp,24
81109e18:	e13ffc15 	stw	r4,-16(fp)
81109e1c:	e17ffd15 	stw	r5,-12(fp)
81109e20:	e1bffe15 	stw	r6,-8(fp)
81109e24:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
81109e28:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81109e2c:	e0bffd17 	ldw	r2,-12(fp)
81109e30:	10800104 	addi	r2,r2,4
81109e34:	0007883a 	mov	r3,zero
81109e38:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81109e3c:	e0bffc17 	ldw	r2,-16(fp)
81109e40:	0007883a 	mov	r3,zero
81109e44:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81109e48:	01000044 	movi	r4,1
81109e4c:	1120f980 	call	81120f98 <usleep>

    for(i=0;i<8;i++){
81109e50:	e03ffb15 	stw	zero,-20(fp)
81109e54:	00001606 	br	81109eb0 <i2c_read+0xa8>
        Data <<= 1;
81109e58:	e0bffa03 	ldbu	r2,-24(fp)
81109e5c:	1085883a 	add	r2,r2,r2
81109e60:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81109e64:	e0bffc17 	ldw	r2,-16(fp)
81109e68:	00c00044 	movi	r3,1
81109e6c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81109e70:	01000044 	movi	r4,1
81109e74:	1120f980 	call	81120f98 <usleep>
        if (SDA_READ(data_base))  // read data   
81109e78:	e0bffd17 	ldw	r2,-12(fp)
81109e7c:	10800037 	ldwio	r2,0(r2)
81109e80:	10000326 	beq	r2,zero,81109e90 <i2c_read+0x88>
            Data |= 0x01;
81109e84:	e0bffa03 	ldbu	r2,-24(fp)
81109e88:	10800054 	ori	r2,r2,1
81109e8c:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81109e90:	e0bffc17 	ldw	r2,-16(fp)
81109e94:	0007883a 	mov	r3,zero
81109e98:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81109e9c:	01000044 	movi	r4,1
81109ea0:	1120f980 	call	81120f98 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81109ea4:	e0bffb17 	ldw	r2,-20(fp)
81109ea8:	10800044 	addi	r2,r2,1
81109eac:	e0bffb15 	stw	r2,-20(fp)
81109eb0:	e0bffb17 	ldw	r2,-20(fp)
81109eb4:	10800210 	cmplti	r2,r2,8
81109eb8:	103fe71e 	bne	r2,zero,81109e58 <__reset+0xfb0e9e58>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81109ebc:	e0bffc17 	ldw	r2,-16(fp)
81109ec0:	0007883a 	mov	r3,zero
81109ec4:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
81109ec8:	e0bffd17 	ldw	r2,-12(fp)
81109ecc:	10800104 	addi	r2,r2,4
81109ed0:	1007883a 	mov	r3,r2
81109ed4:	00800044 	movi	r2,1
81109ed8:	18800035 	stwio	r2,0(r3)
    if (bAck)
81109edc:	e0bfff17 	ldw	r2,-4(fp)
81109ee0:	10000426 	beq	r2,zero,81109ef4 <i2c_read+0xec>
        SDA_LOW(data_base);
81109ee4:	e0bffd17 	ldw	r2,-12(fp)
81109ee8:	0007883a 	mov	r3,zero
81109eec:	10c00035 	stwio	r3,0(r2)
81109ef0:	00000306 	br	81109f00 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
81109ef4:	e0bffd17 	ldw	r2,-12(fp)
81109ef8:	00c00044 	movi	r3,1
81109efc:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
81109f00:	e0bffc17 	ldw	r2,-16(fp)
81109f04:	00c00044 	movi	r3,1
81109f08:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
81109f0c:	01000044 	movi	r4,1
81109f10:	1120f980 	call	81120f98 <usleep>
    SCL_LOW(clk_base); // clock low
81109f14:	e0bffc17 	ldw	r2,-16(fp)
81109f18:	0007883a 	mov	r3,zero
81109f1c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81109f20:	01000044 	movi	r4,1
81109f24:	1120f980 	call	81120f98 <usleep>
    SDA_LOW(data_base);  // data low
81109f28:	e0bffd17 	ldw	r2,-12(fp)
81109f2c:	0007883a 	mov	r3,zero
81109f30:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
81109f34:	01000044 	movi	r4,1
81109f38:	1120f980 	call	81120f98 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
81109f3c:	e0bffe17 	ldw	r2,-8(fp)
81109f40:	e0fffa03 	ldbu	r3,-24(fp)
81109f44:	10c00005 	stb	r3,0(r2)
}
81109f48:	0001883a 	nop
81109f4c:	e037883a 	mov	sp,fp
81109f50:	dfc00117 	ldw	ra,4(sp)
81109f54:	df000017 	ldw	fp,0(sp)
81109f58:	dec00204 	addi	sp,sp,8
81109f5c:	f800283a 	ret

81109f60 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
81109f60:	defffd04 	addi	sp,sp,-12
81109f64:	df000215 	stw	fp,8(sp)
81109f68:	df000204 	addi	fp,sp,8
81109f6c:	e13ffe15 	stw	r4,-8(fp)
81109f70:	2805883a 	mov	r2,r5
81109f74:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
81109f78:	e0bffe17 	ldw	r2,-8(fp)
81109f7c:	10800058 	cmpnei	r2,r2,1
81109f80:	1000071e 	bne	r2,zero,81109fa0 <bSetBoardLeds+0x40>
	LedsBoardControl &= (~LedsMask);
81109f84:	e0bfff03 	ldbu	r2,-4(fp)
81109f88:	0084303a 	nor	r2,zero,r2
81109f8c:	1007883a 	mov	r3,r2
81109f90:	d0a02c03 	ldbu	r2,-32592(gp)
81109f94:	1884703a 	and	r2,r3,r2
81109f98:	d0a02c05 	stb	r2,-32592(gp)
81109f9c:	00000406 	br	81109fb0 <bSetBoardLeds+0x50>
  } else {
	LedsBoardControl |= LedsMask;
81109fa0:	d0e02c03 	ldbu	r3,-32592(gp)
81109fa4:	e0bfff03 	ldbu	r2,-4(fp)
81109fa8:	1884b03a 	or	r2,r3,r2
81109fac:	d0a02c05 	stb	r2,-32592(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
81109fb0:	d0a02c03 	ldbu	r2,-32592(gp)
81109fb4:	10c03fcc 	andi	r3,r2,255
81109fb8:	00a00034 	movhi	r2,32768
81109fbc:	10827404 	addi	r2,r2,2512
81109fc0:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81109fc4:	00800044 	movi	r2,1
}
81109fc8:	e037883a 	mov	sp,fp
81109fcc:	df000017 	ldw	fp,0(sp)
81109fd0:	dec00104 	addi	sp,sp,4
81109fd4:	f800283a 	ret

81109fd8 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
81109fd8:	defffd04 	addi	sp,sp,-12
81109fdc:	df000215 	stw	fp,8(sp)
81109fe0:	df000204 	addi	fp,sp,8
81109fe4:	e13ffe15 	stw	r4,-8(fp)
81109fe8:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81109fec:	e0bffe17 	ldw	r2,-8(fp)
81109ff0:	10800058 	cmpnei	r2,r2,1
81109ff4:	1000051e 	bne	r2,zero,8110a00c <bSetPainelLeds+0x34>
	LedsPainelControl |= LedsMask;
81109ff8:	d0e00117 	ldw	r3,-32764(gp)
81109ffc:	e0bfff17 	ldw	r2,-4(fp)
8110a000:	1884b03a 	or	r2,r3,r2
8110a004:	d0a00115 	stw	r2,-32764(gp)
8110a008:	00000506 	br	8110a020 <bSetPainelLeds+0x48>
  } else {
	LedsPainelControl &= (~LedsMask);
8110a00c:	e0bfff17 	ldw	r2,-4(fp)
8110a010:	0086303a 	nor	r3,zero,r2
8110a014:	d0a00117 	ldw	r2,-32764(gp)
8110a018:	1884703a 	and	r2,r3,r2
8110a01c:	d0a00115 	stw	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
8110a020:	d0a00117 	ldw	r2,-32764(gp)
8110a024:	1007883a 	mov	r3,r2
8110a028:	00a00034 	movhi	r2,32768
8110a02c:	10824004 	addi	r2,r2,2304
8110a030:	10c00035 	stwio	r3,0(r2)

  return TRUE;
8110a034:	00800044 	movi	r2,1
}
8110a038:	e037883a 	mov	sp,fp
8110a03c:	df000017 	ldw	fp,0(sp)
8110a040:	dec00104 	addi	sp,sp,4
8110a044:	f800283a 	ret

8110a048 <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
8110a048:	defffc04 	addi	sp,sp,-16
8110a04c:	df000315 	stw	fp,12(sp)
8110a050:	df000304 	addi	fp,sp,12
8110a054:	e13ffd15 	stw	r4,-12(fp)
8110a058:	e17ffe15 	stw	r5,-8(fp)
8110a05c:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
8110a060:	e0bffd17 	ldw	r2,-12(fp)
8110a064:	10800037 	ldwio	r2,0(r2)
8110a068:	1080010c 	andi	r2,r2,4
8110a06c:	10000226 	beq	r2,zero,8110a078 <msgdma_write_extended_descriptor+0x30>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
8110a070:	00bff904 	movi	r2,-28
8110a074:	00003d06 	br	8110a16c <msgdma_write_extended_descriptor+0x124>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
8110a078:	e0bfff17 	ldw	r2,-4(fp)
8110a07c:	10800017 	ldw	r2,0(r2)
8110a080:	1007883a 	mov	r3,r2
8110a084:	e0bffe17 	ldw	r2,-8(fp)
8110a088:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
8110a08c:	e0bffe17 	ldw	r2,-8(fp)
8110a090:	10800104 	addi	r2,r2,4
8110a094:	e0ffff17 	ldw	r3,-4(fp)
8110a098:	18c00117 	ldw	r3,4(r3)
8110a09c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
8110a0a0:	e0bffe17 	ldw	r2,-8(fp)
8110a0a4:	10800204 	addi	r2,r2,8
8110a0a8:	e0ffff17 	ldw	r3,-4(fp)
8110a0ac:	18c00217 	ldw	r3,8(r3)
8110a0b0:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
8110a0b4:	e0bffe17 	ldw	r2,-8(fp)
8110a0b8:	10800304 	addi	r2,r2,12
8110a0bc:	e0ffff17 	ldw	r3,-4(fp)
8110a0c0:	18c0030b 	ldhu	r3,12(r3)
8110a0c4:	18ffffcc 	andi	r3,r3,65535
8110a0c8:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
8110a0cc:	e0bffe17 	ldw	r2,-8(fp)
8110a0d0:	10800384 	addi	r2,r2,14
8110a0d4:	e0ffff17 	ldw	r3,-4(fp)
8110a0d8:	18c00383 	ldbu	r3,14(r3)
8110a0dc:	18c03fcc 	andi	r3,r3,255
8110a0e0:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
8110a0e4:	e0bffe17 	ldw	r2,-8(fp)
8110a0e8:	108003c4 	addi	r2,r2,15
8110a0ec:	e0ffff17 	ldw	r3,-4(fp)
8110a0f0:	18c003c3 	ldbu	r3,15(r3)
8110a0f4:	18c03fcc 	andi	r3,r3,255
8110a0f8:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
8110a0fc:	e0bffe17 	ldw	r2,-8(fp)
8110a100:	10800404 	addi	r2,r2,16
8110a104:	e0ffff17 	ldw	r3,-4(fp)
8110a108:	18c0040b 	ldhu	r3,16(r3)
8110a10c:	18ffffcc 	andi	r3,r3,65535
8110a110:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
8110a114:	e0bffe17 	ldw	r2,-8(fp)
8110a118:	10800484 	addi	r2,r2,18
8110a11c:	e0ffff17 	ldw	r3,-4(fp)
8110a120:	18c0048b 	ldhu	r3,18(r3)
8110a124:	18ffffcc 	andi	r3,r3,65535
8110a128:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
8110a12c:	e0bffe17 	ldw	r2,-8(fp)
8110a130:	10800504 	addi	r2,r2,20
8110a134:	e0ffff17 	ldw	r3,-4(fp)
8110a138:	18c00517 	ldw	r3,20(r3)
8110a13c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
8110a140:	e0bffe17 	ldw	r2,-8(fp)
8110a144:	10800604 	addi	r2,r2,24
8110a148:	e0ffff17 	ldw	r3,-4(fp)
8110a14c:	18c00617 	ldw	r3,24(r3)
8110a150:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
8110a154:	e0bffe17 	ldw	r2,-8(fp)
8110a158:	10800704 	addi	r2,r2,28
8110a15c:	e0ffff17 	ldw	r3,-4(fp)
8110a160:	18c00717 	ldw	r3,28(r3)
8110a164:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
8110a168:	0005883a 	mov	r2,zero
}
8110a16c:	e037883a 	mov	sp,fp
8110a170:	df000017 	ldw	fp,0(sp)
8110a174:	dec00104 	addi	sp,sp,4
8110a178:	f800283a 	ret

8110a17c <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
8110a17c:	defff604 	addi	sp,sp,-40
8110a180:	df000915 	stw	fp,36(sp)
8110a184:	df000904 	addi	fp,sp,36
8110a188:	e13ff715 	stw	r4,-36(fp)
8110a18c:	e17ff815 	stw	r5,-32(fp)
8110a190:	e1bff915 	stw	r6,-28(fp)
8110a194:	e1fffa15 	stw	r7,-24(fp)
8110a198:	e1800517 	ldw	r6,20(fp)
8110a19c:	e1400617 	ldw	r5,24(fp)
8110a1a0:	e1000717 	ldw	r4,28(fp)
8110a1a4:	e0c00817 	ldw	r3,32(fp)
8110a1a8:	e0800917 	ldw	r2,36(fp)
8110a1ac:	e1bffb0d 	sth	r6,-20(fp)
8110a1b0:	e17ffc05 	stb	r5,-16(fp)
8110a1b4:	e13ffd05 	stb	r4,-12(fp)
8110a1b8:	e0fffe0d 	sth	r3,-8(fp)
8110a1bc:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
8110a1c0:	e0bff717 	ldw	r2,-36(fp)
8110a1c4:	10c01217 	ldw	r3,72(r2)
8110a1c8:	e0800117 	ldw	r2,4(fp)
8110a1cc:	18801936 	bltu	r3,r2,8110a234 <msgdma_construct_extended_descriptor+0xb8>
8110a1d0:	e13ff717 	ldw	r4,-36(fp)
8110a1d4:	20801317 	ldw	r2,76(r4)
8110a1d8:	20c01417 	ldw	r3,80(r4)
8110a1dc:	e13ffe0b 	ldhu	r4,-8(fp)
8110a1e0:	213fffcc 	andi	r4,r4,65535
8110a1e4:	2015883a 	mov	r10,r4
8110a1e8:	0017883a 	mov	r11,zero
8110a1ec:	1ac01136 	bltu	r3,r11,8110a234 <msgdma_construct_extended_descriptor+0xb8>
8110a1f0:	58c0011e 	bne	r11,r3,8110a1f8 <msgdma_construct_extended_descriptor+0x7c>
8110a1f4:	12800f36 	bltu	r2,r10,8110a234 <msgdma_construct_extended_descriptor+0xb8>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
8110a1f8:	e13ff717 	ldw	r4,-36(fp)
8110a1fc:	20801317 	ldw	r2,76(r4)
8110a200:	20c01417 	ldw	r3,80(r4)
8110a204:	e13fff0b 	ldhu	r4,-4(fp)
8110a208:	213fffcc 	andi	r4,r4,65535
8110a20c:	2011883a 	mov	r8,r4
8110a210:	0013883a 	mov	r9,zero
8110a214:	1a400736 	bltu	r3,r9,8110a234 <msgdma_construct_extended_descriptor+0xb8>
8110a218:	48c0011e 	bne	r9,r3,8110a220 <msgdma_construct_extended_descriptor+0xa4>
8110a21c:	12000536 	bltu	r2,r8,8110a234 <msgdma_construct_extended_descriptor+0xb8>
8110a220:	e0bff717 	ldw	r2,-36(fp)
8110a224:	10801703 	ldbu	r2,92(r2)
8110a228:	10803fcc 	andi	r2,r2,255
8110a22c:	10800060 	cmpeqi	r2,r2,1
8110a230:	1000021e 	bne	r2,zero,8110a23c <msgdma_construct_extended_descriptor+0xc0>
		return -EINVAL;
8110a234:	00bffa84 	movi	r2,-22
8110a238:	00002306 	br	8110a2c8 <msgdma_construct_extended_descriptor+0x14c>
	}

	descriptor->read_address_low = read_address;
8110a23c:	e0bff817 	ldw	r2,-32(fp)
8110a240:	e0fff917 	ldw	r3,-28(fp)
8110a244:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
8110a248:	e0bff817 	ldw	r2,-32(fp)
8110a24c:	e0fffa17 	ldw	r3,-24(fp)
8110a250:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
8110a254:	e0bff817 	ldw	r2,-32(fp)
8110a258:	e0c00117 	ldw	r3,4(fp)
8110a25c:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
8110a260:	e0bff817 	ldw	r2,-32(fp)
8110a264:	e0fffb0b 	ldhu	r3,-20(fp)
8110a268:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
8110a26c:	e0bff817 	ldw	r2,-32(fp)
8110a270:	e0fffc03 	ldbu	r3,-16(fp)
8110a274:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
8110a278:	e0bff817 	ldw	r2,-32(fp)
8110a27c:	e0fffd03 	ldbu	r3,-12(fp)
8110a280:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
8110a284:	e0bff817 	ldw	r2,-32(fp)
8110a288:	e0fffe0b 	ldhu	r3,-8(fp)
8110a28c:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
8110a290:	e0bff817 	ldw	r2,-32(fp)
8110a294:	e0ffff0b 	ldhu	r3,-4(fp)
8110a298:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
8110a29c:	e0bff817 	ldw	r2,-32(fp)
8110a2a0:	e0c00317 	ldw	r3,12(fp)
8110a2a4:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
8110a2a8:	e0bff817 	ldw	r2,-32(fp)
8110a2ac:	e0c00417 	ldw	r3,16(fp)
8110a2b0:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8110a2b4:	e0800217 	ldw	r2,8(fp)
8110a2b8:	10e00034 	orhi	r3,r2,32768
8110a2bc:	e0bff817 	ldw	r2,-32(fp)
8110a2c0:	10c00715 	stw	r3,28(r2)

	return 0;
8110a2c4:	0005883a 	mov	r2,zero

}
8110a2c8:	e037883a 	mov	sp,fp
8110a2cc:	df000017 	ldw	fp,0(sp)
8110a2d0:	dec00104 	addi	sp,sp,4
8110a2d4:	f800283a 	ret

8110a2d8 <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
8110a2d8:	defff004 	addi	sp,sp,-64
8110a2dc:	dfc00f15 	stw	ra,60(sp)
8110a2e0:	df000e15 	stw	fp,56(sp)
8110a2e4:	df000e04 	addi	fp,sp,56
8110a2e8:	e13ffd15 	stw	r4,-12(fp)
8110a2ec:	e17ffe15 	stw	r5,-8(fp)
8110a2f0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
8110a2f4:	e03ff315 	stw	zero,-52(fp)
	alt_irq_context context = 0;
8110a2f8:	e03ff415 	stw	zero,-48(fp)
	alt_u16 counter = 0;
8110a2fc:	e03ff20d 	sth	zero,-56(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110a300:	e0bffd17 	ldw	r2,-12(fp)
8110a304:	10800317 	ldw	r2,12(r2)
8110a308:	10800204 	addi	r2,r2,8
8110a30c:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
8110a310:	10bfffcc 	andi	r2,r2,65535
8110a314:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110a318:	e0bffd17 	ldw	r2,-12(fp)
8110a31c:	10800317 	ldw	r2,12(r2)
8110a320:	10800204 	addi	r2,r2,8
8110a324:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
8110a328:	1004d43a 	srli	r2,r2,16
8110a32c:	e0bff615 	stw	r2,-40(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
8110a330:	e0bffd17 	ldw	r2,-12(fp)
8110a334:	10800917 	ldw	r2,36(r2)
8110a338:	e0fff617 	ldw	r3,-40(fp)
8110a33c:	1880042e 	bgeu	r3,r2,8110a350 <msgdma_descriptor_async_transfer+0x78>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
8110a340:	e0bffd17 	ldw	r2,-12(fp)
8110a344:	10800917 	ldw	r2,36(r2)
8110a348:	e0fff517 	ldw	r3,-44(fp)
8110a34c:	18800236 	bltu	r3,r2,8110a358 <msgdma_descriptor_async_transfer+0x80>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
8110a350:	00bff904 	movi	r2,-28
8110a354:	00008506 	br	8110a56c <msgdma_descriptor_async_transfer+0x294>
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110a358:	00800804 	movi	r2,32
8110a35c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8110a360:	0005303a 	rdctl	r2,status
8110a364:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110a368:	e0fff717 	ldw	r3,-36(fp)
8110a36c:	00bfff84 	movi	r2,-2
8110a370:	1884703a 	and	r2,r3,r2
8110a374:	1001703a 	wrctl	status,r2
  
  return context;
8110a378:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8110a37c:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8110a380:	e0bffd17 	ldw	r2,-12(fp)
8110a384:	10800317 	ldw	r2,12(r2)
8110a388:	10800104 	addi	r2,r2,4
8110a38c:	e0fff317 	ldw	r3,-52(fp)
8110a390:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8110a394:	e0bffd17 	ldw	r2,-12(fp)
8110a398:	10800317 	ldw	r2,12(r2)
8110a39c:	e0fffd17 	ldw	r3,-12(fp)
8110a3a0:	18c00317 	ldw	r3,12(r3)
8110a3a4:	18c00037 	ldwio	r3,0(r3)
8110a3a8:	10c00035 	stwio	r3,0(r2)
8110a3ac:	e0bff417 	ldw	r2,-48(fp)
8110a3b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110a3b4:	e0bffc17 	ldw	r2,-16(fp)
8110a3b8:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
8110a3bc:	e0bffe17 	ldw	r2,-8(fp)
8110a3c0:	10000c26 	beq	r2,zero,8110a3f4 <msgdma_descriptor_async_transfer+0x11c>
8110a3c4:	e0bfff17 	ldw	r2,-4(fp)
8110a3c8:	10000a1e 	bne	r2,zero,8110a3f4 <msgdma_descriptor_async_transfer+0x11c>
		counter = 0; /* reset counter */
8110a3cc:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
8110a3d0:	d0a03117 	ldw	r2,-32572(gp)
8110a3d4:	100f883a 	mov	r7,r2
8110a3d8:	01800784 	movi	r6,30
8110a3dc:	01400044 	movi	r5,1
8110a3e0:	012044b4 	movhi	r4,33042
8110a3e4:	21195404 	addi	r4,r4,25936
8110a3e8:	11106540 	call	81110654 <fwrite>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
8110a3ec:	00bff084 	movi	r2,-62
8110a3f0:	00005e06 	br	8110a56c <msgdma_descriptor_async_transfer+0x294>
	} else if (NULL == standard_desc && NULL != extended_desc) {
8110a3f4:	e0bffe17 	ldw	r2,-8(fp)
8110a3f8:	10001f1e 	bne	r2,zero,8110a478 <msgdma_descriptor_async_transfer+0x1a0>
8110a3fc:	e0bfff17 	ldw	r2,-4(fp)
8110a400:	10001d26 	beq	r2,zero,8110a478 <msgdma_descriptor_async_transfer+0x1a0>
		counter = 0; /* reset counter */
8110a404:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8110a408:	00001106 	br	8110a450 <msgdma_descriptor_async_transfer+0x178>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
8110a40c:	01000044 	movi	r4,1
8110a410:	11201b40 	call	811201b4 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110a414:	e0bff20b 	ldhu	r2,-56(fp)
8110a418:	1084e230 	cmpltui	r2,r2,5000
8110a41c:	1000091e 	bne	r2,zero,8110a444 <msgdma_descriptor_async_transfer+0x16c>
			{
#ifdef DEBUG_ON
				debug(fp,
8110a420:	d0a03117 	ldw	r2,-32572(gp)
8110a424:	100f883a 	mov	r7,r2
8110a428:	01801544 	movi	r6,85
8110a42c:	01400044 	movi	r5,1
8110a430:	012044b4 	movhi	r4,33042
8110a434:	21195c04 	addi	r4,r4,25968
8110a438:	11106540 	call	81110654 <fwrite>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
8110a43c:	00bff084 	movi	r2,-62
8110a440:	00004a06 	br	8110a56c <msgdma_descriptor_async_transfer+0x294>
			}
			counter++;
8110a444:	e0bff20b 	ldhu	r2,-56(fp)
8110a448:	10800044 	addi	r2,r2,1
8110a44c:	e0bff20d 	sth	r2,-56(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
8110a450:	e0bffd17 	ldw	r2,-12(fp)
8110a454:	10c00317 	ldw	r3,12(r2)
8110a458:	e0bffd17 	ldw	r2,-12(fp)
8110a45c:	10800417 	ldw	r2,16(r2)
8110a460:	e1bfff17 	ldw	r6,-4(fp)
8110a464:	100b883a 	mov	r5,r2
8110a468:	1809883a 	mov	r4,r3
8110a46c:	110a0480 	call	8110a048 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8110a470:	103fe61e 	bne	r2,zero,8110a40c <__reset+0xfb0ea40c>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
8110a474:	00000206 	br	8110a480 <msgdma_descriptor_async_transfer+0x1a8>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
8110a478:	00bfffc4 	movi	r2,-1
8110a47c:	00003b06 	br	8110a56c <msgdma_descriptor_async_transfer+0x294>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
8110a480:	e0bffd17 	ldw	r2,-12(fp)
8110a484:	10800b17 	ldw	r2,44(r2)
8110a488:	10001c26 	beq	r2,zero,8110a4fc <msgdma_descriptor_async_transfer+0x224>

		control |= (dev->control |
8110a48c:	e0bffd17 	ldw	r2,-12(fp)
8110a490:	10c00d17 	ldw	r3,52(r2)
8110a494:	e0bff317 	ldw	r2,-52(fp)
8110a498:	1884b03a 	or	r2,r3,r2
8110a49c:	10800514 	ori	r2,r2,20
8110a4a0:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8110a4a4:	e0fff317 	ldw	r3,-52(fp)
8110a4a8:	00bff7c4 	movi	r2,-33
8110a4ac:	1884703a 	and	r2,r3,r2
8110a4b0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8110a4b4:	0005303a 	rdctl	r2,status
8110a4b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110a4bc:	e0fff917 	ldw	r3,-28(fp)
8110a4c0:	00bfff84 	movi	r2,-2
8110a4c4:	1884703a 	and	r2,r3,r2
8110a4c8:	1001703a 	wrctl	status,r2
  
  return context;
8110a4cc:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
8110a4d0:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8110a4d4:	e0bffd17 	ldw	r2,-12(fp)
8110a4d8:	10800317 	ldw	r2,12(r2)
8110a4dc:	10800104 	addi	r2,r2,4
8110a4e0:	e0fff317 	ldw	r3,-52(fp)
8110a4e4:	10c00035 	stwio	r3,0(r2)
8110a4e8:	e0bff417 	ldw	r2,-48(fp)
8110a4ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110a4f0:	e0bffb17 	ldw	r2,-20(fp)
8110a4f4:	1001703a 	wrctl	status,r2
8110a4f8:	00001b06 	br	8110a568 <msgdma_descriptor_async_transfer+0x290>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
8110a4fc:	e0bffd17 	ldw	r2,-12(fp)
8110a500:	10c00d17 	ldw	r3,52(r2)
8110a504:	e0bff317 	ldw	r2,-52(fp)
8110a508:	1884b03a 	or	r2,r3,r2
8110a50c:	10800114 	ori	r2,r2,4
8110a510:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
8110a514:	e0fff317 	ldw	r3,-52(fp)
8110a518:	00bff3c4 	movi	r2,-49
8110a51c:	1884703a 	and	r2,r3,r2
8110a520:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8110a524:	0005303a 	rdctl	r2,status
8110a528:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110a52c:	e0fffa17 	ldw	r3,-24(fp)
8110a530:	00bfff84 	movi	r2,-2
8110a534:	1884703a 	and	r2,r3,r2
8110a538:	1001703a 	wrctl	status,r2
  
  return context;
8110a53c:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
8110a540:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8110a544:	e0bffd17 	ldw	r2,-12(fp)
8110a548:	10800317 	ldw	r2,12(r2)
8110a54c:	10800104 	addi	r2,r2,4
8110a550:	e0fff317 	ldw	r3,-52(fp)
8110a554:	10c00035 	stwio	r3,0(r2)
8110a558:	e0bff417 	ldw	r2,-48(fp)
8110a55c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110a560:	e0bff817 	ldw	r2,-32(fp)
8110a564:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
8110a568:	0005883a 	mov	r2,zero
}
8110a56c:	e037883a 	mov	sp,fp
8110a570:	dfc00117 	ldw	ra,4(sp)
8110a574:	df000017 	ldw	fp,0(sp)
8110a578:	dec00204 	addi	sp,sp,8
8110a57c:	f800283a 	ret

8110a580 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
8110a580:	defff004 	addi	sp,sp,-64
8110a584:	dfc00f15 	stw	ra,60(sp)
8110a588:	df000e15 	stw	fp,56(sp)
8110a58c:	df000e04 	addi	fp,sp,56
8110a590:	e13ffd15 	stw	r4,-12(fp)
8110a594:	e17ffe15 	stw	r5,-8(fp)
8110a598:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
8110a59c:	e03ff615 	stw	zero,-40(fp)
	alt_irq_context context = 0;
8110a5a0:	e03ff715 	stw	zero,-36(fp)
	alt_u32 csr_status = 0;
8110a5a4:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
8110a5a8:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110a5ac:	e0bffd17 	ldw	r2,-12(fp)
8110a5b0:	10800317 	ldw	r2,12(r2)
8110a5b4:	10800204 	addi	r2,r2,8
8110a5b8:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
8110a5bc:	10bfffcc 	andi	r2,r2,65535
8110a5c0:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110a5c4:	e0bffd17 	ldw	r2,-12(fp)
8110a5c8:	10800317 	ldw	r2,12(r2)
8110a5cc:	10800204 	addi	r2,r2,8
8110a5d0:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
8110a5d4:	1004d43a 	srli	r2,r2,16
8110a5d8:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
8110a5dc:	00807804 	movi	r2,480
8110a5e0:	e0bff815 	stw	r2,-32(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
8110a5e4:	00001d06 	br	8110a65c <msgdma_descriptor_sync_transfer+0xdc>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
8110a5e8:	01000044 	movi	r4,1
8110a5ec:	11201b40 	call	811201b4 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110a5f0:	e0bff30b 	ldhu	r2,-52(fp)
8110a5f4:	1084e230 	cmpltui	r2,r2,5000
8110a5f8:	1000091e 	bne	r2,zero,8110a620 <msgdma_descriptor_sync_transfer+0xa0>
		{
#ifdef DEBUG_ON
			debug(fp,
8110a5fc:	d0a03117 	ldw	r2,-32572(gp)
8110a600:	100f883a 	mov	r7,r2
8110a604:	01801304 	movi	r6,76
8110a608:	01400044 	movi	r5,1
8110a60c:	012044b4 	movhi	r4,33042
8110a610:	21197204 	addi	r4,r4,26056
8110a614:	11106540 	call	81110654 <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
8110a618:	00bff084 	movi	r2,-62
8110a61c:	0000ae06 	br	8110a8d8 <msgdma_descriptor_sync_transfer+0x358>
		}
		counter++;
8110a620:	e0bff30b 	ldhu	r2,-52(fp)
8110a624:	10800044 	addi	r2,r2,1
8110a628:	e0bff30d 	sth	r2,-52(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110a62c:	e0bffd17 	ldw	r2,-12(fp)
8110a630:	10800317 	ldw	r2,12(r2)
8110a634:	10800204 	addi	r2,r2,8
8110a638:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
8110a63c:	10bfffcc 	andi	r2,r2,65535
8110a640:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110a644:	e0bffd17 	ldw	r2,-12(fp)
8110a648:	10800317 	ldw	r2,12(r2)
8110a64c:	10800204 	addi	r2,r2,8
8110a650:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
8110a654:	1004d43a 	srli	r2,r2,16
8110a658:	e0bff515 	stw	r2,-44(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
8110a65c:	e0bffd17 	ldw	r2,-12(fp)
8110a660:	10800917 	ldw	r2,36(r2)
8110a664:	e0fff517 	ldw	r3,-44(fp)
8110a668:	18bfdf2e 	bgeu	r3,r2,8110a5e8 <__reset+0xfb0ea5e8>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
8110a66c:	e0bffd17 	ldw	r2,-12(fp)
8110a670:	10800917 	ldw	r2,36(r2)
8110a674:	e0fff417 	ldw	r3,-48(fp)
8110a678:	18bfdb2e 	bgeu	r3,r2,8110a5e8 <__reset+0xfb0ea5e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8110a67c:	0005303a 	rdctl	r2,status
8110a680:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110a684:	e0fffc17 	ldw	r3,-16(fp)
8110a688:	00bfff84 	movi	r2,-2
8110a68c:	1884703a 	and	r2,r3,r2
8110a690:	1001703a 	wrctl	status,r2
  
  return context;
8110a694:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8110a698:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8110a69c:	e0bffd17 	ldw	r2,-12(fp)
8110a6a0:	10800317 	ldw	r2,12(r2)
8110a6a4:	10800104 	addi	r2,r2,4
8110a6a8:	00c00804 	movi	r3,32
8110a6ac:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8110a6b0:	e0bffd17 	ldw	r2,-12(fp)
8110a6b4:	10800317 	ldw	r2,12(r2)
8110a6b8:	e0fffd17 	ldw	r3,-12(fp)
8110a6bc:	18c00317 	ldw	r3,12(r3)
8110a6c0:	18c00037 	ldwio	r3,0(r3)
8110a6c4:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
8110a6c8:	e0bffe17 	ldw	r2,-8(fp)
8110a6cc:	10000c26 	beq	r2,zero,8110a700 <msgdma_descriptor_sync_transfer+0x180>
8110a6d0:	e0bfff17 	ldw	r2,-4(fp)
8110a6d4:	10000a1e 	bne	r2,zero,8110a700 <msgdma_descriptor_sync_transfer+0x180>
		counter = 0; /* reset counter */
8110a6d8:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
8110a6dc:	d0a03117 	ldw	r2,-32572(gp)
8110a6e0:	100f883a 	mov	r7,r2
8110a6e4:	01800784 	movi	r6,30
8110a6e8:	01400044 	movi	r5,1
8110a6ec:	012044b4 	movhi	r4,33042
8110a6f0:	21195404 	addi	r4,r4,25936
8110a6f4:	11106540 	call	81110654 <fwrite>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
8110a6f8:	00bff084 	movi	r2,-62
8110a6fc:	00007606 	br	8110a8d8 <msgdma_descriptor_sync_transfer+0x358>
	} else if (NULL == standard_desc && NULL != extended_desc) {
8110a700:	e0bffe17 	ldw	r2,-8(fp)
8110a704:	10001f1e 	bne	r2,zero,8110a784 <msgdma_descriptor_sync_transfer+0x204>
8110a708:	e0bfff17 	ldw	r2,-4(fp)
8110a70c:	10001d26 	beq	r2,zero,8110a784 <msgdma_descriptor_sync_transfer+0x204>
		counter = 0; /* reset counter */
8110a710:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8110a714:	00001106 	br	8110a75c <msgdma_descriptor_sync_transfer+0x1dc>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
8110a718:	01000044 	movi	r4,1
8110a71c:	11201b40 	call	811201b4 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110a720:	e0bff30b 	ldhu	r2,-52(fp)
8110a724:	1084e230 	cmpltui	r2,r2,5000
8110a728:	1000091e 	bne	r2,zero,8110a750 <msgdma_descriptor_sync_transfer+0x1d0>
			{
#ifdef DEBUG_ON
				debug(fp,
8110a72c:	d0a03117 	ldw	r2,-32572(gp)
8110a730:	100f883a 	mov	r7,r2
8110a734:	01801004 	movi	r6,64
8110a738:	01400044 	movi	r5,1
8110a73c:	012044b4 	movhi	r4,33042
8110a740:	21198604 	addi	r4,r4,26136
8110a744:	11106540 	call	81110654 <fwrite>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
8110a748:	00bff084 	movi	r2,-62
8110a74c:	00006206 	br	8110a8d8 <msgdma_descriptor_sync_transfer+0x358>
			}
			counter++;
8110a750:	e0bff30b 	ldhu	r2,-52(fp)
8110a754:	10800044 	addi	r2,r2,1
8110a758:	e0bff30d 	sth	r2,-52(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
8110a75c:	e0bffd17 	ldw	r2,-12(fp)
8110a760:	10c00317 	ldw	r3,12(r2)
8110a764:	e0bffd17 	ldw	r2,-12(fp)
8110a768:	10800417 	ldw	r2,16(r2)
8110a76c:	e1bfff17 	ldw	r6,-4(fp)
8110a770:	100b883a 	mov	r5,r2
8110a774:	1809883a 	mov	r4,r3
8110a778:	110a0480 	call	8110a048 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8110a77c:	103fe61e 	bne	r2,zero,8110a718 <__reset+0xfb0ea718>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
8110a780:	00000206 	br	8110a78c <msgdma_descriptor_sync_transfer+0x20c>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
8110a784:	00bfffc4 	movi	r2,-1
8110a788:	00005306 	br	8110a8d8 <msgdma_descriptor_sync_transfer+0x358>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8110a78c:	e0bffd17 	ldw	r2,-12(fp)
8110a790:	10800317 	ldw	r2,12(r2)
8110a794:	10800104 	addi	r2,r2,4
8110a798:	e0fffd17 	ldw	r3,-12(fp)
8110a79c:	19000d17 	ldw	r4,52(r3)
8110a7a0:	00fff2c4 	movi	r3,-53
8110a7a4:	20c6703a 	and	r3,r4,r3
8110a7a8:	18c00114 	ori	r3,r3,4
8110a7ac:	10c00035 	stwio	r3,0(r2)
8110a7b0:	e0bff717 	ldw	r2,-36(fp)
8110a7b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110a7b8:	e0bffb17 	ldw	r2,-20(fp)
8110a7bc:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
8110a7c0:	e03ff30d 	sth	zero,-52(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8110a7c4:	e0bffd17 	ldw	r2,-12(fp)
8110a7c8:	10800317 	ldw	r2,12(r2)
8110a7cc:	10800037 	ldwio	r2,0(r2)
8110a7d0:	e0bff215 	stw	r2,-56(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
8110a7d4:	00001506 	br	8110a82c <msgdma_descriptor_sync_transfer+0x2ac>
		alt_busy_sleep(1); /* delay 1us */
8110a7d8:	01000044 	movi	r4,1
8110a7dc:	11201b40 	call	811201b4 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110a7e0:	e0bff30b 	ldhu	r2,-52(fp)
8110a7e4:	1084e230 	cmpltui	r2,r2,5000
8110a7e8:	1000091e 	bne	r2,zero,8110a810 <msgdma_descriptor_sync_transfer+0x290>
		{
#ifdef DEBUG_ON
			debug(fp,
8110a7ec:	d0a03117 	ldw	r2,-32572(gp)
8110a7f0:	100f883a 	mov	r7,r2
8110a7f4:	01801184 	movi	r6,70
8110a7f8:	01400044 	movi	r5,1
8110a7fc:	012044b4 	movhi	r4,33042
8110a800:	21199704 	addi	r4,r4,26204
8110a804:	11106540 	call	81110654 <fwrite>
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);

			return -ETIME;
8110a808:	00bff084 	movi	r2,-62
8110a80c:	00003206 	br	8110a8d8 <msgdma_descriptor_sync_transfer+0x358>
		}
		counter++;
8110a810:	e0bff30b 	ldhu	r2,-52(fp)
8110a814:	10800044 	addi	r2,r2,1
8110a818:	e0bff30d 	sth	r2,-52(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8110a81c:	e0bffd17 	ldw	r2,-12(fp)
8110a820:	10800317 	ldw	r2,12(r2)
8110a824:	10800037 	ldwio	r2,0(r2)
8110a828:	e0bff215 	stw	r2,-56(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
8110a82c:	e0fff217 	ldw	r3,-56(fp)
8110a830:	e0bff817 	ldw	r2,-32(fp)
8110a834:	1884703a 	and	r2,r3,r2
8110a838:	1000031e 	bne	r2,zero,8110a848 <msgdma_descriptor_sync_transfer+0x2c8>
8110a83c:	e0bff217 	ldw	r2,-56(fp)
8110a840:	1080004c 	andi	r2,r2,1
8110a844:	103fe41e 	bne	r2,zero,8110a7d8 <__reset+0xfb0ea7d8>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
8110a848:	e0fff217 	ldw	r3,-56(fp)
8110a84c:	e0bff817 	ldw	r2,-32(fp)
8110a850:	1884703a 	and	r2,r3,r2
8110a854:	10000226 	beq	r2,zero,8110a860 <msgdma_descriptor_sync_transfer+0x2e0>
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return error;
8110a858:	e0bff817 	ldw	r2,-32(fp)
8110a85c:	00001e06 	br	8110a8d8 <msgdma_descriptor_sync_transfer+0x358>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
8110a860:	e0bffd17 	ldw	r2,-12(fp)
8110a864:	10800317 	ldw	r2,12(r2)
8110a868:	10800104 	addi	r2,r2,4
8110a86c:	10800037 	ldwio	r2,0(r2)
8110a870:	10800814 	ori	r2,r2,32
8110a874:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8110a878:	0005303a 	rdctl	r2,status
8110a87c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110a880:	e0fff917 	ldw	r3,-28(fp)
8110a884:	00bfff84 	movi	r2,-2
8110a888:	1884703a 	and	r2,r3,r2
8110a88c:	1001703a 	wrctl	status,r2
  
  return context;
8110a890:	e0bff917 	ldw	r2,-28(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8110a894:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8110a898:	e0bffd17 	ldw	r2,-12(fp)
8110a89c:	10800317 	ldw	r2,12(r2)
8110a8a0:	10800104 	addi	r2,r2,4
8110a8a4:	e0fff617 	ldw	r3,-40(fp)
8110a8a8:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8110a8ac:	e0bffd17 	ldw	r2,-12(fp)
8110a8b0:	10800317 	ldw	r2,12(r2)
8110a8b4:	e0fffd17 	ldw	r3,-12(fp)
8110a8b8:	18c00317 	ldw	r3,12(r3)
8110a8bc:	18c00037 	ldwio	r3,0(r3)
8110a8c0:	10c00035 	stwio	r3,0(r2)
8110a8c4:	e0bff717 	ldw	r2,-36(fp)
8110a8c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110a8cc:	e0bffa17 	ldw	r2,-24(fp)
8110a8d0:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
8110a8d4:	0005883a 	mov	r2,zero

}
8110a8d8:	e037883a 	mov	sp,fp
8110a8dc:	dfc00117 	ldw	ra,4(sp)
8110a8e0:	df000017 	ldw	fp,0(sp)
8110a8e4:	dec00204 	addi	sp,sp,8
8110a8e8:	f800283a 	ret

8110a8ec <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
8110a8ec:	deffec04 	addi	sp,sp,-80
8110a8f0:	dfc01315 	stw	ra,76(sp)
8110a8f4:	df001215 	stw	fp,72(sp)
8110a8f8:	df001204 	addi	fp,sp,72
8110a8fc:	e13ff715 	stw	r4,-36(fp)
8110a900:	e17ff815 	stw	r5,-32(fp)
8110a904:	e1bff915 	stw	r6,-28(fp)
8110a908:	e1fffa15 	stw	r7,-24(fp)
8110a90c:	e1800617 	ldw	r6,24(fp)
8110a910:	e1400717 	ldw	r5,28(fp)
8110a914:	e1000817 	ldw	r4,32(fp)
8110a918:	e0c00917 	ldw	r3,36(fp)
8110a91c:	e0800a17 	ldw	r2,40(fp)
8110a920:	e1bffb0d 	sth	r6,-20(fp)
8110a924:	e17ffc05 	stb	r5,-16(fp)
8110a928:	e13ffd05 	stb	r4,-12(fp)
8110a92c:	e0fffe0d 	sth	r3,-8(fp)
8110a930:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
8110a934:	e0bffb0b 	ldhu	r2,-20(fp)
8110a938:	e0fffc03 	ldbu	r3,-16(fp)
8110a93c:	e13ffd03 	ldbu	r4,-12(fp)
8110a940:	e17ffe0b 	ldhu	r5,-8(fp)
8110a944:	e1bfff0b 	ldhu	r6,-4(fp)
8110a948:	d9800815 	stw	r6,32(sp)
8110a94c:	d9400715 	stw	r5,28(sp)
8110a950:	d9000615 	stw	r4,24(sp)
8110a954:	d8c00515 	stw	r3,20(sp)
8110a958:	d8800415 	stw	r2,16(sp)
8110a95c:	e0800517 	ldw	r2,20(fp)
8110a960:	d8800315 	stw	r2,12(sp)
8110a964:	e0800417 	ldw	r2,16(fp)
8110a968:	d8800215 	stw	r2,8(sp)
8110a96c:	e0800317 	ldw	r2,12(fp)
8110a970:	d8800115 	stw	r2,4(sp)
8110a974:	e0800217 	ldw	r2,8(fp)
8110a978:	d8800015 	stw	r2,0(sp)
8110a97c:	e1fffa17 	ldw	r7,-24(fp)
8110a980:	e1bff917 	ldw	r6,-28(fp)
8110a984:	e17ff817 	ldw	r5,-32(fp)
8110a988:	e13ff717 	ldw	r4,-36(fp)
8110a98c:	110a17c0 	call	8110a17c <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
8110a990:	e037883a 	mov	sp,fp
8110a994:	dfc00117 	ldw	ra,4(sp)
8110a998:	df000017 	ldw	fp,0(sp)
8110a99c:	dec00204 	addi	sp,sp,8
8110a9a0:	f800283a 	ret

8110a9a4 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
8110a9a4:	defffc04 	addi	sp,sp,-16
8110a9a8:	dfc00315 	stw	ra,12(sp)
8110a9ac:	df000215 	stw	fp,8(sp)
8110a9b0:	df000204 	addi	fp,sp,8
8110a9b4:	e13ffe15 	stw	r4,-8(fp)
8110a9b8:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
8110a9bc:	e1bfff17 	ldw	r6,-4(fp)
8110a9c0:	000b883a 	mov	r5,zero
8110a9c4:	e13ffe17 	ldw	r4,-8(fp)
8110a9c8:	110a2d80 	call	8110a2d8 <msgdma_descriptor_async_transfer>
}
8110a9cc:	e037883a 	mov	sp,fp
8110a9d0:	dfc00117 	ldw	ra,4(sp)
8110a9d4:	df000017 	ldw	fp,0(sp)
8110a9d8:	dec00204 	addi	sp,sp,8
8110a9dc:	f800283a 	ret

8110a9e0 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
8110a9e0:	defffc04 	addi	sp,sp,-16
8110a9e4:	dfc00315 	stw	ra,12(sp)
8110a9e8:	df000215 	stw	fp,8(sp)
8110a9ec:	df000204 	addi	fp,sp,8
8110a9f0:	e13ffe15 	stw	r4,-8(fp)
8110a9f4:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
8110a9f8:	e1bfff17 	ldw	r6,-4(fp)
8110a9fc:	000b883a 	mov	r5,zero
8110aa00:	e13ffe17 	ldw	r4,-8(fp)
8110aa04:	110a5800 	call	8110a580 <msgdma_descriptor_sync_transfer>
}
8110aa08:	e037883a 	mov	sp,fp
8110aa0c:	dfc00117 	ldw	ra,4(sp)
8110aa10:	df000017 	ldw	fp,0(sp)
8110aa14:	dec00204 	addi	sp,sp,8
8110aa18:	f800283a 	ret

8110aa1c <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
8110aa1c:	defff204 	addi	sp,sp,-56
8110aa20:	dfc00d15 	stw	ra,52(sp)
8110aa24:	df000c15 	stw	fp,48(sp)
8110aa28:	df000c04 	addi	fp,sp,48
8110aa2c:	2007883a 	mov	r3,r4
8110aa30:	2805883a 	mov	r2,r5
8110aa34:	e1bffe15 	stw	r6,-8(fp)
8110aa38:	e1ffff15 	stw	r7,-4(fp)
8110aa3c:	e0fffc05 	stb	r3,-16(fp)
8110aa40:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
8110aa44:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
8110aa48:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
8110aa4c:	008003f4 	movhi	r2,15
8110aa50:	10909004 	addi	r2,r2,16960
8110aa54:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
8110aa58:	00bfe004 	movi	r2,-128
8110aa5c:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
8110aa60:	e0bffe17 	ldw	r2,-8(fp)
8110aa64:	10000226 	beq	r2,zero,8110aa70 <POWER_SPI_RW+0x54>
8110aa68:	00800804 	movi	r2,32
8110aa6c:	00000106 	br	8110aa74 <POWER_SPI_RW+0x58>
8110aa70:	0005883a 	mov	r2,zero
8110aa74:	e0fff403 	ldbu	r3,-48(fp)
8110aa78:	10c4b03a 	or	r2,r2,r3
8110aa7c:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
8110aa80:	e0800217 	ldw	r2,8(fp)
8110aa84:	10000226 	beq	r2,zero,8110aa90 <POWER_SPI_RW+0x74>
8110aa88:	00800404 	movi	r2,16
8110aa8c:	00000106 	br	8110aa94 <POWER_SPI_RW+0x78>
8110aa90:	0005883a 	mov	r2,zero
8110aa94:	e0fff403 	ldbu	r3,-48(fp)
8110aa98:	10c4b03a 	or	r2,r2,r3
8110aa9c:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
8110aaa0:	e0bfff17 	ldw	r2,-4(fp)
8110aaa4:	10000226 	beq	r2,zero,8110aab0 <POWER_SPI_RW+0x94>
8110aaa8:	00800204 	movi	r2,8
8110aaac:	00000106 	br	8110aab4 <POWER_SPI_RW+0x98>
8110aab0:	0005883a 	mov	r2,zero
8110aab4:	e0fff403 	ldbu	r3,-48(fp)
8110aab8:	10c4b03a 	or	r2,r2,r3
8110aabc:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
8110aac0:	e0bffd03 	ldbu	r2,-12(fp)
8110aac4:	108001cc 	andi	r2,r2,7
8110aac8:	1007883a 	mov	r3,r2
8110aacc:	e0bff403 	ldbu	r2,-48(fp)
8110aad0:	1884b03a 	or	r2,r3,r2
8110aad4:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
8110aad8:	0007883a 	mov	r3,zero
8110aadc:	00a00034 	movhi	r2,32768
8110aae0:	10824404 	addi	r2,r2,2320
8110aae4:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
8110aae8:	0007883a 	mov	r3,zero
8110aaec:	00a00034 	movhi	r2,32768
8110aaf0:	10824c04 	addi	r2,r2,2352
8110aaf4:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
8110aaf8:	e0bffc03 	ldbu	r2,-16(fp)
8110aafc:	1000021e 	bne	r2,zero,8110ab08 <POWER_SPI_RW+0xec>
8110ab00:	00c00084 	movi	r3,2
8110ab04:	00000106 	br	8110ab0c <POWER_SPI_RW+0xf0>
8110ab08:	00c00044 	movi	r3,1
8110ab0c:	00a00034 	movhi	r2,32768
8110ab10:	10824804 	addi	r2,r2,2336
8110ab14:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
8110ab18:	010003c4 	movi	r4,15
8110ab1c:	1120f980 	call	81120f98 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
8110ab20:	00000306 	br	8110ab30 <POWER_SPI_RW+0x114>
		nWait++;
8110ab24:	e0bff817 	ldw	r2,-32(fp)
8110ab28:	10800044 	addi	r2,r2,1
8110ab2c:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
8110ab30:	00a00034 	movhi	r2,32768
8110ab34:	10825404 	addi	r2,r2,2384
8110ab38:	10800037 	ldwio	r2,0(r2)
8110ab3c:	1080004c 	andi	r2,r2,1
8110ab40:	10000326 	beq	r2,zero,8110ab50 <POWER_SPI_RW+0x134>
8110ab44:	e0fff817 	ldw	r3,-32(fp)
8110ab48:	e0bffa17 	ldw	r2,-24(fp)
8110ab4c:	18bff516 	blt	r3,r2,8110ab24 <__reset+0xfb0eab24>
		nWait++;
	}

	if (SPI_SDO) {
8110ab50:	00a00034 	movhi	r2,32768
8110ab54:	10825404 	addi	r2,r2,2384
8110ab58:	10800037 	ldwio	r2,0(r2)
8110ab5c:	1080004c 	andi	r2,r2,1
8110ab60:	10000626 	beq	r2,zero,8110ab7c <POWER_SPI_RW+0x160>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
8110ab64:	00c000c4 	movi	r3,3
8110ab68:	00a00034 	movhi	r2,32768
8110ab6c:	10824804 	addi	r2,r2,2336
8110ab70:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
8110ab74:	0005883a 	mov	r2,zero
8110ab78:	0000db06 	br	8110aee8 <POWER_SPI_RW+0x4cc>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
8110ab7c:	e03ff715 	stw	zero,-36(fp)
8110ab80:	00002406 	br	8110ac14 <POWER_SPI_RW+0x1f8>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
8110ab84:	e0bff403 	ldbu	r2,-48(fp)
8110ab88:	10803fcc 	andi	r2,r2,255
8110ab8c:	1004d1fa 	srli	r2,r2,7
8110ab90:	10c03fcc 	andi	r3,r2,255
8110ab94:	00a00034 	movhi	r2,32768
8110ab98:	10825004 	addi	r2,r2,2368
8110ab9c:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
8110aba0:	e0bff403 	ldbu	r2,-48(fp)
8110aba4:	1085883a 	add	r2,r2,r2
8110aba8:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
8110abac:	e0bff517 	ldw	r2,-44(fp)
8110abb0:	1085883a 	add	r2,r2,r2
8110abb4:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
8110abb8:	00a00034 	movhi	r2,32768
8110abbc:	10825404 	addi	r2,r2,2384
8110abc0:	10800037 	ldwio	r2,0(r2)
8110abc4:	1080004c 	andi	r2,r2,1
8110abc8:	1007883a 	mov	r3,r2
8110abcc:	e0bff517 	ldw	r2,-44(fp)
8110abd0:	10c4b03a 	or	r2,r2,r3
8110abd4:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8110abd8:	00c00044 	movi	r3,1
8110abdc:	00a00034 	movhi	r2,32768
8110abe0:	10824c04 	addi	r2,r2,2352
8110abe4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110abe8:	010003c4 	movi	r4,15
8110abec:	1120f980 	call	81120f98 <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110abf0:	0007883a 	mov	r3,zero
8110abf4:	00a00034 	movhi	r2,32768
8110abf8:	10824c04 	addi	r2,r2,2352
8110abfc:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110ac00:	010003c4 	movi	r4,15
8110ac04:	1120f980 	call	81120f98 <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
8110ac08:	e0bff717 	ldw	r2,-36(fp)
8110ac0c:	10800044 	addi	r2,r2,1
8110ac10:	e0bff715 	stw	r2,-36(fp)
8110ac14:	e0bff717 	ldw	r2,-36(fp)
8110ac18:	10800090 	cmplti	r2,r2,2
8110ac1c:	103fd91e 	bne	r2,zero,8110ab84 <__reset+0xfb0eab84>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
8110ac20:	e03ff715 	stw	zero,-36(fp)
8110ac24:	00002406 	br	8110acb8 <POWER_SPI_RW+0x29c>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
8110ac28:	e0bff403 	ldbu	r2,-48(fp)
8110ac2c:	10803fcc 	andi	r2,r2,255
8110ac30:	1004d1fa 	srli	r2,r2,7
8110ac34:	10c03fcc 	andi	r3,r2,255
8110ac38:	00a00034 	movhi	r2,32768
8110ac3c:	10825004 	addi	r2,r2,2368
8110ac40:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
8110ac44:	e0bff403 	ldbu	r2,-48(fp)
8110ac48:	1085883a 	add	r2,r2,r2
8110ac4c:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
8110ac50:	e0bff517 	ldw	r2,-44(fp)
8110ac54:	1085883a 	add	r2,r2,r2
8110ac58:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
8110ac5c:	00a00034 	movhi	r2,32768
8110ac60:	10825404 	addi	r2,r2,2384
8110ac64:	10800037 	ldwio	r2,0(r2)
8110ac68:	1080004c 	andi	r2,r2,1
8110ac6c:	1007883a 	mov	r3,r2
8110ac70:	e0bff517 	ldw	r2,-44(fp)
8110ac74:	10c4b03a 	or	r2,r2,r3
8110ac78:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8110ac7c:	00c00044 	movi	r3,1
8110ac80:	00a00034 	movhi	r2,32768
8110ac84:	10824c04 	addi	r2,r2,2352
8110ac88:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110ac8c:	010003c4 	movi	r4,15
8110ac90:	1120f980 	call	81120f98 <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110ac94:	0007883a 	mov	r3,zero
8110ac98:	00a00034 	movhi	r2,32768
8110ac9c:	10824c04 	addi	r2,r2,2352
8110aca0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110aca4:	010003c4 	movi	r4,15
8110aca8:	1120f980 	call	81120f98 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
8110acac:	e0bff717 	ldw	r2,-36(fp)
8110acb0:	10800044 	addi	r2,r2,1
8110acb4:	e0bff715 	stw	r2,-36(fp)
8110acb8:	e0bff717 	ldw	r2,-36(fp)
8110acbc:	10800210 	cmplti	r2,r2,8
8110acc0:	103fd91e 	bne	r2,zero,8110ac28 <__reset+0xfb0eac28>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
8110acc4:	e03ff715 	stw	zero,-36(fp)
8110acc8:	00001a06 	br	8110ad34 <POWER_SPI_RW+0x318>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
8110accc:	e0bff517 	ldw	r2,-44(fp)
8110acd0:	1085883a 	add	r2,r2,r2
8110acd4:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
8110acd8:	00a00034 	movhi	r2,32768
8110acdc:	10825404 	addi	r2,r2,2384
8110ace0:	10800037 	ldwio	r2,0(r2)
8110ace4:	1080004c 	andi	r2,r2,1
8110ace8:	1007883a 	mov	r3,r2
8110acec:	e0bff517 	ldw	r2,-44(fp)
8110acf0:	10c4b03a 	or	r2,r2,r3
8110acf4:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8110acf8:	00c00044 	movi	r3,1
8110acfc:	00a00034 	movhi	r2,32768
8110ad00:	10824c04 	addi	r2,r2,2352
8110ad04:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110ad08:	010003c4 	movi	r4,15
8110ad0c:	1120f980 	call	81120f98 <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110ad10:	0007883a 	mov	r3,zero
8110ad14:	00a00034 	movhi	r2,32768
8110ad18:	10824c04 	addi	r2,r2,2352
8110ad1c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110ad20:	010003c4 	movi	r4,15
8110ad24:	1120f980 	call	81120f98 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
8110ad28:	e0bff717 	ldw	r2,-36(fp)
8110ad2c:	10800044 	addi	r2,r2,1
8110ad30:	e0bff715 	stw	r2,-36(fp)
8110ad34:	e0bff717 	ldw	r2,-36(fp)
8110ad38:	10800210 	cmplti	r2,r2,8
8110ad3c:	103fe31e 	bne	r2,zero,8110accc <__reset+0xfb0eaccc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
8110ad40:	e03ff715 	stw	zero,-36(fp)
8110ad44:	00001a06 	br	8110adb0 <POWER_SPI_RW+0x394>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
8110ad48:	e0bff517 	ldw	r2,-44(fp)
8110ad4c:	1085883a 	add	r2,r2,r2
8110ad50:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
8110ad54:	00a00034 	movhi	r2,32768
8110ad58:	10825404 	addi	r2,r2,2384
8110ad5c:	10800037 	ldwio	r2,0(r2)
8110ad60:	1080004c 	andi	r2,r2,1
8110ad64:	1007883a 	mov	r3,r2
8110ad68:	e0bff517 	ldw	r2,-44(fp)
8110ad6c:	10c4b03a 	or	r2,r2,r3
8110ad70:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8110ad74:	00c00044 	movi	r3,1
8110ad78:	00a00034 	movhi	r2,32768
8110ad7c:	10824c04 	addi	r2,r2,2352
8110ad80:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110ad84:	010003c4 	movi	r4,15
8110ad88:	1120f980 	call	81120f98 <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110ad8c:	0007883a 	mov	r3,zero
8110ad90:	00a00034 	movhi	r2,32768
8110ad94:	10824c04 	addi	r2,r2,2352
8110ad98:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110ad9c:	010003c4 	movi	r4,15
8110ada0:	1120f980 	call	81120f98 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
8110ada4:	e0bff717 	ldw	r2,-36(fp)
8110ada8:	10800044 	addi	r2,r2,1
8110adac:	e0bff715 	stw	r2,-36(fp)
8110adb0:	e0bff717 	ldw	r2,-36(fp)
8110adb4:	10800210 	cmplti	r2,r2,8
8110adb8:	103fe31e 	bne	r2,zero,8110ad48 <__reset+0xfb0ead48>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
8110adbc:	e03ff715 	stw	zero,-36(fp)
8110adc0:	00001a06 	br	8110ae2c <POWER_SPI_RW+0x410>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
8110adc4:	e0bff517 	ldw	r2,-44(fp)
8110adc8:	1085883a 	add	r2,r2,r2
8110adcc:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
8110add0:	00a00034 	movhi	r2,32768
8110add4:	10825404 	addi	r2,r2,2384
8110add8:	10800037 	ldwio	r2,0(r2)
8110addc:	1080004c 	andi	r2,r2,1
8110ade0:	1007883a 	mov	r3,r2
8110ade4:	e0bff517 	ldw	r2,-44(fp)
8110ade8:	10c4b03a 	or	r2,r2,r3
8110adec:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8110adf0:	00c00044 	movi	r3,1
8110adf4:	00a00034 	movhi	r2,32768
8110adf8:	10824c04 	addi	r2,r2,2352
8110adfc:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110ae00:	010003c4 	movi	r4,15
8110ae04:	1120f980 	call	81120f98 <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110ae08:	0007883a 	mov	r3,zero
8110ae0c:	00a00034 	movhi	r2,32768
8110ae10:	10824c04 	addi	r2,r2,2352
8110ae14:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110ae18:	010003c4 	movi	r4,15
8110ae1c:	1120f980 	call	81120f98 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
8110ae20:	e0bff717 	ldw	r2,-36(fp)
8110ae24:	10800044 	addi	r2,r2,1
8110ae28:	e0bff715 	stw	r2,-36(fp)
8110ae2c:	e0bff717 	ldw	r2,-36(fp)
8110ae30:	10800190 	cmplti	r2,r2,6
8110ae34:	103fe31e 	bne	r2,zero,8110adc4 <__reset+0xfb0eadc4>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
8110ae38:	00c00044 	movi	r3,1
8110ae3c:	00a00034 	movhi	r2,32768
8110ae40:	10824c04 	addi	r2,r2,2352
8110ae44:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
8110ae48:	010003c4 	movi	r4,15
8110ae4c:	1120f980 	call	81120f98 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
8110ae50:	00c000c4 	movi	r3,3
8110ae54:	00a00034 	movhi	r2,32768
8110ae58:	10824804 	addi	r2,r2,2336
8110ae5c:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
8110ae60:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
8110ae64:	00800044 	movi	r2,1
8110ae68:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
8110ae6c:	e03ff715 	stw	zero,-36(fp)
8110ae70:	00000d06 	br	8110aea8 <POWER_SPI_RW+0x48c>
		if ((Value32 & Mask32) == 0x00) {
8110ae74:	e0fff517 	ldw	r3,-44(fp)
8110ae78:	e0bff617 	ldw	r2,-40(fp)
8110ae7c:	1884703a 	and	r2,r3,r2
8110ae80:	1000031e 	bne	r2,zero,8110ae90 <POWER_SPI_RW+0x474>
			nZeroCnt++;
8110ae84:	e0bff917 	ldw	r2,-28(fp)
8110ae88:	10800044 	addi	r2,r2,1
8110ae8c:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
8110ae90:	e0bff617 	ldw	r2,-40(fp)
8110ae94:	1085883a 	add	r2,r2,r2
8110ae98:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
8110ae9c:	e0bff717 	ldw	r2,-36(fp)
8110aea0:	10800044 	addi	r2,r2,1
8110aea4:	e0bff715 	stw	r2,-36(fp)
8110aea8:	e0bff717 	ldw	r2,-36(fp)
8110aeac:	10800810 	cmplti	r2,r2,32
8110aeb0:	103ff01e 	bne	r2,zero,8110ae74 <__reset+0xfb0eae74>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
8110aeb4:	e0bff917 	ldw	r2,-28(fp)
8110aeb8:	1080004c 	andi	r2,r2,1
8110aebc:	1005003a 	cmpeq	r2,r2,zero
8110aec0:	10803fcc 	andi	r2,r2,255
8110aec4:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
8110aec8:	e0bffb17 	ldw	r2,-20(fp)
8110aecc:	1000021e 	bne	r2,zero,8110aed8 <POWER_SPI_RW+0x4bc>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
8110aed0:	0005883a 	mov	r2,zero
8110aed4:	00000406 	br	8110aee8 <POWER_SPI_RW+0x4cc>
	}

	*pValue = Value32;
8110aed8:	e0800317 	ldw	r2,12(fp)
8110aedc:	e0fff517 	ldw	r3,-44(fp)
8110aee0:	10c00015 	stw	r3,0(r2)

	return bSuccess;
8110aee4:	e0bffb17 	ldw	r2,-20(fp)
}
8110aee8:	e037883a 	mov	sp,fp
8110aeec:	dfc00117 	ldw	ra,4(sp)
8110aef0:	df000017 	ldw	fp,0(sp)
8110aef4:	dec00204 	addi	sp,sp,8
8110aef8:	f800283a 	ret

8110aefc <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
8110aefc:	defffc04 	addi	sp,sp,-16
8110af00:	dfc00315 	stw	ra,12(sp)
8110af04:	df000215 	stw	fp,8(sp)
8110af08:	df000204 	addi	fp,sp,8
8110af0c:	2005883a 	mov	r2,r4
8110af10:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
8110af14:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
8110af18:	e0bfff0b 	ldhu	r2,-4(fp)
8110af1c:	e0fffe17 	ldw	r3,-8(fp)
8110af20:	1884b03a 	or	r2,r3,r2
8110af24:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
8110af28:	e0bffe17 	ldw	r2,-8(fp)
8110af2c:	10800074 	orhi	r2,r2,1
8110af30:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8110af34:	e1bffe17 	ldw	r6,-8(fp)
8110af38:	000b883a 	mov	r5,zero
8110af3c:	01200034 	movhi	r4,32768
8110af40:	21020004 	addi	r4,r4,2048
8110af44:	110b0340 	call	8110b034 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
8110af48:	0001883a 	nop
8110af4c:	e037883a 	mov	sp,fp
8110af50:	dfc00117 	ldw	ra,4(sp)
8110af54:	df000017 	ldw	fp,0(sp)
8110af58:	dec00204 	addi	sp,sp,8
8110af5c:	f800283a 	ret

8110af60 <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110af60:	defffc04 	addi	sp,sp,-16
8110af64:	dfc00315 	stw	ra,12(sp)
8110af68:	df000215 	stw	fp,8(sp)
8110af6c:	df000204 	addi	fp,sp,8
8110af70:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
8110af74:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8110af78:	01400044 	movi	r5,1
8110af7c:	01200034 	movhi	r4,32768
8110af80:	21020004 	addi	r4,r4,2048
8110af84:	110b0800 	call	8110b080 <uliRstReadReg>
8110af88:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
8110af8c:	e0bfff17 	ldw	r2,-4(fp)
8110af90:	0084303a 	nor	r2,zero,r2
8110af94:	e0fffe17 	ldw	r3,-8(fp)
8110af98:	1884703a 	and	r2,r3,r2
8110af9c:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8110afa0:	e1bffe17 	ldw	r6,-8(fp)
8110afa4:	01400044 	movi	r5,1
8110afa8:	01200034 	movhi	r4,32768
8110afac:	21020004 	addi	r4,r4,2048
8110afb0:	110b0340 	call	8110b034 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
8110afb4:	0001883a 	nop
8110afb8:	e037883a 	mov	sp,fp
8110afbc:	dfc00117 	ldw	ra,4(sp)
8110afc0:	df000017 	ldw	fp,0(sp)
8110afc4:	dec00204 	addi	sp,sp,8
8110afc8:	f800283a 	ret

8110afcc <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
8110afcc:	defffc04 	addi	sp,sp,-16
8110afd0:	dfc00315 	stw	ra,12(sp)
8110afd4:	df000215 	stw	fp,8(sp)
8110afd8:	df000204 	addi	fp,sp,8
8110afdc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
8110afe0:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8110afe4:	01400044 	movi	r5,1
8110afe8:	01200034 	movhi	r4,32768
8110afec:	21020004 	addi	r4,r4,2048
8110aff0:	110b0800 	call	8110b080 <uliRstReadReg>
8110aff4:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
8110aff8:	e0fffe17 	ldw	r3,-8(fp)
8110affc:	e0bfff17 	ldw	r2,-4(fp)
8110b000:	1884b03a 	or	r2,r3,r2
8110b004:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8110b008:	e1bffe17 	ldw	r6,-8(fp)
8110b00c:	01400044 	movi	r5,1
8110b010:	01200034 	movhi	r4,32768
8110b014:	21020004 	addi	r4,r4,2048
8110b018:	110b0340 	call	8110b034 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
8110b01c:	0001883a 	nop
8110b020:	e037883a 	mov	sp,fp
8110b024:	dfc00117 	ldw	ra,4(sp)
8110b028:	df000017 	ldw	fp,0(sp)
8110b02c:	dec00204 	addi	sp,sp,8
8110b030:	f800283a 	ret

8110b034 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
8110b034:	defffc04 	addi	sp,sp,-16
8110b038:	df000315 	stw	fp,12(sp)
8110b03c:	df000304 	addi	fp,sp,12
8110b040:	e13ffd15 	stw	r4,-12(fp)
8110b044:	e17ffe15 	stw	r5,-8(fp)
8110b048:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
8110b04c:	e0bffe17 	ldw	r2,-8(fp)
8110b050:	1085883a 	add	r2,r2,r2
8110b054:	1085883a 	add	r2,r2,r2
8110b058:	1007883a 	mov	r3,r2
8110b05c:	e0bffd17 	ldw	r2,-12(fp)
8110b060:	10c5883a 	add	r2,r2,r3
8110b064:	e0ffff17 	ldw	r3,-4(fp)
8110b068:	10c00015 	stw	r3,0(r2)
}
8110b06c:	0001883a 	nop
8110b070:	e037883a 	mov	sp,fp
8110b074:	df000017 	ldw	fp,0(sp)
8110b078:	dec00104 	addi	sp,sp,4
8110b07c:	f800283a 	ret

8110b080 <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110b080:	defffc04 	addi	sp,sp,-16
8110b084:	df000315 	stw	fp,12(sp)
8110b088:	df000304 	addi	fp,sp,12
8110b08c:	e13ffe15 	stw	r4,-8(fp)
8110b090:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
8110b094:	e0bfff17 	ldw	r2,-4(fp)
8110b098:	1085883a 	add	r2,r2,r2
8110b09c:	1085883a 	add	r2,r2,r2
8110b0a0:	1007883a 	mov	r3,r2
8110b0a4:	e0bffe17 	ldw	r2,-8(fp)
8110b0a8:	10c5883a 	add	r2,r2,r3
8110b0ac:	10800017 	ldw	r2,0(r2)
8110b0b0:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
8110b0b4:	e0bffd17 	ldw	r2,-12(fp)
}
8110b0b8:	e037883a 	mov	sp,fp
8110b0bc:	df000017 	ldw	fp,0(sp)
8110b0c0:	dec00104 	addi	sp,sp,4
8110b0c4:	f800283a 	ret

8110b0c8 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
8110b0c8:	defffe04 	addi	sp,sp,-8
8110b0cc:	dfc00115 	stw	ra,4(sp)
8110b0d0:	df000015 	stw	fp,0(sp)
8110b0d4:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
8110b0d8:	0007883a 	mov	r3,zero
8110b0dc:	00a00034 	movhi	r2,32768
8110b0e0:	10823004 	addi	r2,r2,2240
8110b0e4:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
8110b0e8:	0007883a 	mov	r3,zero
8110b0ec:	00a00034 	movhi	r2,32768
8110b0f0:	10822c04 	addi	r2,r2,2224
8110b0f4:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110b0f8:	01002584 	movi	r4,150
8110b0fc:	1120f980 	call	81120f98 <usleep>
}
8110b100:	0001883a 	nop
8110b104:	e037883a 	mov	sp,fp
8110b108:	dfc00117 	ldw	ra,4(sp)
8110b10c:	df000017 	ldw	fp,0(sp)
8110b110:	dec00204 	addi	sp,sp,8
8110b114:	f800283a 	ret

8110b118 <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
8110b118:	defffc04 	addi	sp,sp,-16
8110b11c:	dfc00315 	stw	ra,12(sp)
8110b120:	df000215 	stw	fp,8(sp)
8110b124:	df000204 	addi	fp,sp,8
8110b128:	2005883a 	mov	r2,r4
8110b12c:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
8110b130:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
8110b134:	00bfe004 	movi	r2,-128
8110b138:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
8110b13c:	e03ffe05 	stb	zero,-8(fp)
8110b140:	00001b06 	br	8110b1b0 <v_spi_send_byte+0x98>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
8110b144:	e0ffff03 	ldbu	r3,-4(fp)
8110b148:	e0bffe43 	ldbu	r2,-7(fp)
8110b14c:	1884703a 	and	r2,r3,r2
8110b150:	10803fcc 	andi	r2,r2,255
8110b154:	1004c03a 	cmpne	r2,r2,zero
8110b158:	10c03fcc 	andi	r3,r2,255
8110b15c:	00a00034 	movhi	r2,32768
8110b160:	10823404 	addi	r2,r2,2256
8110b164:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
8110b168:	e0bffe43 	ldbu	r2,-7(fp)
8110b16c:	1004d07a 	srli	r2,r2,1
8110b170:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
8110b174:	00c00044 	movi	r3,1
8110b178:	00a00034 	movhi	r2,32768
8110b17c:	10823004 	addi	r2,r2,2240
8110b180:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110b184:	01002584 	movi	r4,150
8110b188:	1120f980 	call	81120f98 <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110b18c:	0007883a 	mov	r3,zero
8110b190:	00a00034 	movhi	r2,32768
8110b194:	10823004 	addi	r2,r2,2240
8110b198:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110b19c:	01002584 	movi	r4,150
8110b1a0:	1120f980 	call	81120f98 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
8110b1a4:	e0bffe03 	ldbu	r2,-8(fp)
8110b1a8:	10800044 	addi	r2,r2,1
8110b1ac:	e0bffe05 	stb	r2,-8(fp)
8110b1b0:	e0bffe03 	ldbu	r2,-8(fp)
8110b1b4:	10800230 	cmpltui	r2,r2,8
8110b1b8:	103fe21e 	bne	r2,zero,8110b144 <__reset+0xfb0eb144>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
8110b1bc:	0001883a 	nop
8110b1c0:	e037883a 	mov	sp,fp
8110b1c4:	dfc00117 	ldw	ra,4(sp)
8110b1c8:	df000017 	ldw	fp,0(sp)
8110b1cc:	dec00204 	addi	sp,sp,8
8110b1d0:	f800283a 	ret

8110b1d4 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
8110b1d4:	defffd04 	addi	sp,sp,-12
8110b1d8:	dfc00215 	stw	ra,8(sp)
8110b1dc:	df000115 	stw	fp,4(sp)
8110b1e0:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
8110b1e4:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
8110b1e8:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
8110b1ec:	e03fff05 	stb	zero,-4(fp)
8110b1f0:	00001a06 	br	8110b25c <uc_spi_get_byte+0x88>
    {
        uc_data <<= 1;
8110b1f4:	e0bfff43 	ldbu	r2,-3(fp)
8110b1f8:	1085883a 	add	r2,r2,r2
8110b1fc:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
8110b200:	00a00034 	movhi	r2,32768
8110b204:	10823804 	addi	r2,r2,2272
8110b208:	10800037 	ldwio	r2,0(r2)
8110b20c:	1080004c 	andi	r2,r2,1
8110b210:	1007883a 	mov	r3,r2
8110b214:	e0bfff43 	ldbu	r2,-3(fp)
8110b218:	1884b03a 	or	r2,r3,r2
8110b21c:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
8110b220:	00c00044 	movi	r3,1
8110b224:	00a00034 	movhi	r2,32768
8110b228:	10823004 	addi	r2,r2,2240
8110b22c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110b230:	01002584 	movi	r4,150
8110b234:	1120f980 	call	81120f98 <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110b238:	0007883a 	mov	r3,zero
8110b23c:	00a00034 	movhi	r2,32768
8110b240:	10823004 	addi	r2,r2,2240
8110b244:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110b248:	01002584 	movi	r4,150
8110b24c:	1120f980 	call	81120f98 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
8110b250:	e0bfff03 	ldbu	r2,-4(fp)
8110b254:	10800044 	addi	r2,r2,1
8110b258:	e0bfff05 	stb	r2,-4(fp)
8110b25c:	e0bfff03 	ldbu	r2,-4(fp)
8110b260:	10800230 	cmpltui	r2,r2,8
8110b264:	103fe31e 	bne	r2,zero,8110b1f4 <__reset+0xfb0eb1f4>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
8110b268:	e0bfff43 	ldbu	r2,-3(fp)
}
8110b26c:	e037883a 	mov	sp,fp
8110b270:	dfc00117 	ldw	ra,4(sp)
8110b274:	df000017 	ldw	fp,0(sp)
8110b278:	dec00204 	addi	sp,sp,8
8110b27c:	f800283a 	ret

8110b280 <v_spi_end>:

void v_spi_end(void){
8110b280:	defffe04 	addi	sp,sp,-8
8110b284:	dfc00115 	stw	ra,4(sp)
8110b288:	df000015 	stw	fp,0(sp)
8110b28c:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
8110b290:	0007883a 	mov	r3,zero
8110b294:	00a00034 	movhi	r2,32768
8110b298:	10823004 	addi	r2,r2,2240
8110b29c:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110b2a0:	01002584 	movi	r4,150
8110b2a4:	1120f980 	call	81120f98 <usleep>
    SPI_CS_N(1);
8110b2a8:	00c00044 	movi	r3,1
8110b2ac:	00a00034 	movhi	r2,32768
8110b2b0:	10822c04 	addi	r2,r2,2224
8110b2b4:	10c00035 	stwio	r3,0(r2)
}
8110b2b8:	0001883a 	nop
8110b2bc:	e037883a 	mov	sp,fp
8110b2c0:	dfc00117 	ldw	ra,4(sp)
8110b2c4:	df000017 	ldw	fp,0(sp)
8110b2c8:	dec00204 	addi	sp,sp,8
8110b2cc:	f800283a 	ret

8110b2d0 <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
8110b2d0:	defff604 	addi	sp,sp,-40
8110b2d4:	dfc00915 	stw	ra,36(sp)
8110b2d8:	df000815 	stw	fp,32(sp)
8110b2dc:	df000804 	addi	fp,sp,32
8110b2e0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110b2e4:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
8110b2e8:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
8110b2ec:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
8110b2f0:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
8110b2f4:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
8110b2f8:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
8110b2fc:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
8110b300:	00800084 	movi	r2,2
8110b304:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
8110b308:	00800cc4 	movi	r2,51
8110b30c:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
8110b310:	110b0c80 	call	8110b0c8 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
8110b314:	e0bffec3 	ldbu	r2,-5(fp)
8110b318:	1009883a 	mov	r4,r2
8110b31c:	110b1180 	call	8110b118 <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
8110b320:	e0bffe83 	ldbu	r2,-6(fp)
8110b324:	1009883a 	mov	r4,r2
8110b328:	110b1180 	call	8110b118 <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
8110b32c:	110b1d40 	call	8110b1d4 <uc_spi_get_byte>
8110b330:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
8110b334:	110b1d40 	call	8110b1d4 <uc_spi_get_byte>
8110b338:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
8110b33c:	110b1d40 	call	8110b1d4 <uc_spi_get_byte>
8110b340:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
8110b344:	110b1d40 	call	8110b1d4 <uc_spi_get_byte>
8110b348:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
8110b34c:	110b1d40 	call	8110b1d4 <uc_spi_get_byte>
8110b350:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
8110b354:	110b1d40 	call	8110b1d4 <uc_spi_get_byte>
8110b358:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
8110b35c:	110b2800 	call	8110b280 <v_spi_end>

    bSuccess = TRUE;
8110b360:	00800044 	movi	r2,1
8110b364:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
8110b368:	e0bfff17 	ldw	r2,-4(fp)
8110b36c:	e0fffd03 	ldbu	r3,-12(fp)
8110b370:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
8110b374:	e0bfff17 	ldw	r2,-4(fp)
8110b378:	10800044 	addi	r2,r2,1
8110b37c:	e0fffd43 	ldbu	r3,-11(fp)
8110b380:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
8110b384:	e0bfff17 	ldw	r2,-4(fp)
8110b388:	10800084 	addi	r2,r2,2
8110b38c:	e0fffd83 	ldbu	r3,-10(fp)
8110b390:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
8110b394:	e0bfff17 	ldw	r2,-4(fp)
8110b398:	108000c4 	addi	r2,r2,3
8110b39c:	e0fffdc3 	ldbu	r3,-9(fp)
8110b3a0:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
8110b3a4:	e0bfff17 	ldw	r2,-4(fp)
8110b3a8:	10800104 	addi	r2,r2,4
8110b3ac:	e0fffe03 	ldbu	r3,-8(fp)
8110b3b0:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
8110b3b4:	e0bfff17 	ldw	r2,-4(fp)
8110b3b8:	10800144 	addi	r2,r2,5
8110b3bc:	e0fffe43 	ldbu	r3,-7(fp)
8110b3c0:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
8110b3c4:	e1bffd03 	ldbu	r6,-12(fp)
8110b3c8:	e1fffd43 	ldbu	r7,-11(fp)
8110b3cc:	e0bffd83 	ldbu	r2,-10(fp)
8110b3d0:	e0fffdc3 	ldbu	r3,-9(fp)
8110b3d4:	e13ffe03 	ldbu	r4,-8(fp)
8110b3d8:	e17ffe43 	ldbu	r5,-7(fp)
8110b3dc:	d9400315 	stw	r5,12(sp)
8110b3e0:	d9000215 	stw	r4,8(sp)
8110b3e4:	d8c00115 	stw	r3,4(sp)
8110b3e8:	d8800015 	stw	r2,0(sp)
8110b3ec:	016044b4 	movhi	r5,33042
8110b3f0:	2959a904 	addi	r5,r5,26276
8110b3f4:	012044f4 	movhi	r4,33043
8110b3f8:	21233704 	addi	r4,r4,-29476
8110b3fc:	111173c0 	call	8111173c <sprintf>
	debug(fp, cDebugBuffer);
8110b400:	d0a03117 	ldw	r2,-32572(gp)
8110b404:	016044f4 	movhi	r5,33043
8110b408:	29633704 	addi	r5,r5,-29476
8110b40c:	1009883a 	mov	r4,r2
8110b410:	11100880 	call	81110088 <fprintf>
#endif

    return bSuccess;
8110b414:	e0bffc17 	ldw	r2,-16(fp)
}
8110b418:	e037883a 	mov	sp,fp
8110b41c:	dfc00117 	ldw	ra,4(sp)
8110b420:	df000017 	ldw	fp,0(sp)
8110b424:	dec00204 	addi	sp,sp,8
8110b428:	f800283a 	ret

8110b42c <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
8110b42c:	defffd04 	addi	sp,sp,-12
8110b430:	df000215 	stw	fp,8(sp)
8110b434:	df000204 	addi	fp,sp,8
8110b438:	2005883a 	mov	r2,r4
8110b43c:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
8110b440:	e0bfff03 	ldbu	r2,-4(fp)
8110b444:	10c00168 	cmpgeui	r3,r2,5
8110b448:	18001c1e 	bne	r3,zero,8110b4bc <bSSDisplayConfig+0x90>
8110b44c:	100690ba 	slli	r3,r2,2
8110b450:	00a04474 	movhi	r2,33041
8110b454:	10ad1904 	addi	r2,r2,-19356
8110b458:	1885883a 	add	r2,r3,r2
8110b45c:	10800017 	ldw	r2,0(r2)
8110b460:	1000683a 	jmp	r2
8110b464:	8110b478 	rdprs	r4,r16,17105
8110b468:	8110b484 	addi	r4,r16,17106
8110b46c:	8110b490 	cmplti	r4,r16,17106
8110b470:	8110b4a4 	muli	r4,r16,17106
8110b474:	8110b4b4 	orhi	r4,r16,17106
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
8110b478:	00800cc4 	movi	r2,51
8110b47c:	d0a02e05 	stb	r2,-32584(gp)
	    break;
8110b480:	00001006 	br	8110b4c4 <bSSDisplayConfig+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
8110b484:	00801544 	movi	r2,85
8110b488:	d0a02e05 	stb	r2,-32584(gp)
	    break;
8110b48c:	00000d06 	br	8110b4c4 <bSSDisplayConfig+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110b490:	d0e02e03 	ldbu	r3,-32584(gp)
8110b494:	00bff744 	movi	r2,-35
8110b498:	1884703a 	and	r2,r3,r2
8110b49c:	d0a02e05 	stb	r2,-32584(gp)
	    break;
8110b4a0:	00000806 	br	8110b4c4 <bSSDisplayConfig+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
8110b4a4:	d0a02e03 	ldbu	r2,-32584(gp)
8110b4a8:	10800894 	ori	r2,r2,34
8110b4ac:	d0a02e05 	stb	r2,-32584(gp)
	    break;
8110b4b0:	00000406 	br	8110b4c4 <bSSDisplayConfig+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
8110b4b4:	d0202e05 	stb	zero,-32584(gp)
	    break;
8110b4b8:	00000206 	br	8110b4c4 <bSSDisplayConfig+0x98>
		
		default:
		    return FALSE;
8110b4bc:	0005883a 	mov	r2,zero
8110b4c0:	00000806 	br	8110b4e4 <bSSDisplayConfig+0xb8>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110b4c4:	00a00034 	movhi	r2,32768
8110b4c8:	10828404 	addi	r2,r2,2576
8110b4cc:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
8110b4d0:	d0a02e03 	ldbu	r2,-32584(gp)
8110b4d4:	10c03fcc 	andi	r3,r2,255
8110b4d8:	e0bffe17 	ldw	r2,-8(fp)
8110b4dc:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8110b4e0:	00800044 	movi	r2,1
}
8110b4e4:	e037883a 	mov	sp,fp
8110b4e8:	df000017 	ldw	fp,0(sp)
8110b4ec:	dec00104 	addi	sp,sp,4
8110b4f0:	f800283a 	ret

8110b4f4 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
8110b4f4:	defffd04 	addi	sp,sp,-12
8110b4f8:	df000215 	stw	fp,8(sp)
8110b4fc:	df000204 	addi	fp,sp,8
8110b500:	2005883a 	mov	r2,r4
8110b504:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110b508:	00a00034 	movhi	r2,32768
8110b50c:	10828404 	addi	r2,r2,2576
8110b510:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
8110b514:	e0bffe17 	ldw	r2,-8(fp)
8110b518:	10800104 	addi	r2,r2,4
8110b51c:	e0ffff03 	ldbu	r3,-4(fp)
8110b520:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8110b524:	00800044 	movi	r2,1
}
8110b528:	e037883a 	mov	sp,fp
8110b52c:	df000017 	ldw	fp,0(sp)
8110b530:	dec00104 	addi	sp,sp,4
8110b534:	f800283a 	ret

8110b538 <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
8110b538:	defffc04 	addi	sp,sp,-16
8110b53c:	dfc00315 	stw	ra,12(sp)
8110b540:	df000215 	stw	fp,8(sp)
8110b544:	df000204 	addi	fp,sp,8
8110b548:	e13fff15 	stw	r4,-4(fp)
	unsigned char ucIL;
	unsigned char ucSyncL;
	unsigned char error_codel;
	tQMask uiCmdtoSend;
*/
	volatile int* pviHoldContext = (volatile int*) pvContext;
8110b54c:	e0bfff17 	ldw	r2,-4(fp)
8110b550:	e0bffe15 	stw	r2,-8(fp)

	#ifdef DEBUG_ON
		fprintf(fp,"Sync %hu \n", ucSyncL);
	#endif
*/
	vSyncIrqFlagClrSync();
8110b554:	110b5d80 	call	8110b5d8 <vSyncIrqFlagClrSync>
}
8110b558:	0001883a 	nop
8110b55c:	e037883a 	mov	sp,fp
8110b560:	dfc00117 	ldw	ra,4(sp)
8110b564:	df000017 	ldw	fp,0(sp)
8110b568:	dec00204 	addi	sp,sp,8
8110b56c:	f800283a 	ret

8110b570 <vSyncClearCounter>:

void vSyncClearCounter(void) {
8110b570:	deffff04 	addi	sp,sp,-4
8110b574:	df000015 	stw	fp,0(sp)
8110b578:	d839883a 	mov	fp,sp
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	vucN = 0;
8110b57c:	d0203005 	stb	zero,-32576(gp)
}
8110b580:	0001883a 	nop
8110b584:	e037883a 	mov	sp,fp
8110b588:	df000017 	ldw	fp,0(sp)
8110b58c:	dec00104 	addi	sp,sp,4
8110b590:	f800283a 	ret

8110b594 <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
8110b594:	defffd04 	addi	sp,sp,-12
8110b598:	dfc00215 	stw	ra,8(sp)
8110b59c:	df000115 	stw	fp,4(sp)
8110b5a0:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
8110b5a4:	d0a02f04 	addi	r2,gp,-32580
8110b5a8:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
8110b5ac:	01a04474 	movhi	r6,33041
8110b5b0:	31ad4e04 	addi	r6,r6,-19144
8110b5b4:	e17fff17 	ldw	r5,-4(fp)
8110b5b8:	01000284 	movi	r4,10
8110b5bc:	11205200 	call	81120520 <alt_irq_register>
}
8110b5c0:	0001883a 	nop
8110b5c4:	e037883a 	mov	sp,fp
8110b5c8:	dfc00117 	ldw	ra,4(sp)
8110b5cc:	df000017 	ldw	fp,0(sp)
8110b5d0:	dec00204 	addi	sp,sp,8
8110b5d4:	f800283a 	ret

8110b5d8 <vSyncIrqFlagClrSync>:

void vSyncIrqFlagClrSync(void) {
8110b5d8:	defffe04 	addi	sp,sp,-8
8110b5dc:	dfc00115 	stw	ra,4(sp)
8110b5e0:	df000015 	stw	fp,0(sp)
8110b5e4:	d839883a 	mov	fp,sp
	bSyncWriteReg(SYNC_IRQ_FG_CLR_REG_OFFSET, (alt_u32) SYNC_IRQ_FG_CLR_MSK);
8110b5e8:	01400044 	movi	r5,1
8110b5ec:	010002c4 	movi	r4,11
8110b5f0:	110c2780 	call	8110c278 <bSyncWriteReg>
}
8110b5f4:	0001883a 	nop
8110b5f8:	e037883a 	mov	sp,fp
8110b5fc:	dfc00117 	ldw	ra,4(sp)
8110b600:	df000017 	ldw	fp,0(sp)
8110b604:	dec00204 	addi	sp,sp,8
8110b608:	f800283a 	ret

8110b60c <bSyncIrqFlagSync>:

bool bSyncIrqFlagSync(void) {
8110b60c:	defffd04 	addi	sp,sp,-12
8110b610:	dfc00215 	stw	ra,8(sp)
8110b614:	df000115 	stw	fp,4(sp)
8110b618:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliSyncReadReg(SYNC_IRQ_FG_REG_OFFSET) & SYNC_IRQ_FG_MSK) {
8110b61c:	01000304 	movi	r4,12
8110b620:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b624:	1080004c 	andi	r2,r2,1
8110b628:	10000326 	beq	r2,zero,8110b638 <bSyncIrqFlagSync+0x2c>
		bFlag = TRUE;
8110b62c:	00800044 	movi	r2,1
8110b630:	e0bfff15 	stw	r2,-4(fp)
8110b634:	00000106 	br	8110b63c <bSyncIrqFlagSync+0x30>
	} else {
		bFlag = FALSE;
8110b638:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
8110b63c:	e0bfff17 	ldw	r2,-4(fp)
}
8110b640:	e037883a 	mov	sp,fp
8110b644:	dfc00117 	ldw	ra,4(sp)
8110b648:	df000017 	ldw	fp,0(sp)
8110b64c:	dec00204 	addi	sp,sp,8
8110b650:	f800283a 	ret

8110b654 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
8110b654:	defffc04 	addi	sp,sp,-16
8110b658:	dfc00315 	stw	ra,12(sp)
8110b65c:	df000215 	stw	fp,8(sp)
8110b660:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
8110b664:	0009883a 	mov	r4,zero
8110b668:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b66c:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
8110b670:	e0bfff17 	ldw	r2,-4(fp)
8110b674:	1000030e 	bge	r2,zero,8110b684 <bSyncStatusExtnIrq+0x30>
		bResult = TRUE;
8110b678:	00800044 	movi	r2,1
8110b67c:	e0bffe15 	stw	r2,-8(fp)
8110b680:	00000106 	br	8110b688 <bSyncStatusExtnIrq+0x34>
	} else {
		bResult = FALSE;
8110b684:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110b688:	e0bffe17 	ldw	r2,-8(fp)
}
8110b68c:	e037883a 	mov	sp,fp
8110b690:	dfc00117 	ldw	ra,4(sp)
8110b694:	df000017 	ldw	fp,0(sp)
8110b698:	dec00204 	addi	sp,sp,8
8110b69c:	f800283a 	ret

8110b6a0 <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
8110b6a0:	defffc04 	addi	sp,sp,-16
8110b6a4:	dfc00315 	stw	ra,12(sp)
8110b6a8:	df000215 	stw	fp,8(sp)
8110b6ac:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
8110b6b0:	0009883a 	mov	r4,zero
8110b6b4:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b6b8:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
8110b6bc:	e0bffe17 	ldw	r2,-8(fp)
8110b6c0:	10803fec 	andhi	r2,r2,255
8110b6c4:	1004d43a 	srli	r2,r2,16
8110b6c8:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
8110b6cc:	e0bfff03 	ldbu	r2,-4(fp)
}
8110b6d0:	e037883a 	mov	sp,fp
8110b6d4:	dfc00117 	ldw	ra,4(sp)
8110b6d8:	df000017 	ldw	fp,0(sp)
8110b6dc:	dec00204 	addi	sp,sp,8
8110b6e0:	f800283a 	ret

8110b6e4 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
8110b6e4:	defffc04 	addi	sp,sp,-16
8110b6e8:	dfc00315 	stw	ra,12(sp)
8110b6ec:	df000215 	stw	fp,8(sp)
8110b6f0:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
8110b6f4:	0009883a 	mov	r4,zero
8110b6f8:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b6fc:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
8110b700:	e0bffe17 	ldw	r2,-8(fp)
8110b704:	10bfc00c 	andi	r2,r2,65280
8110b708:	1004d23a 	srli	r2,r2,8
8110b70c:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
8110b710:	e0bfff03 	ldbu	r2,-4(fp)
}
8110b714:	e037883a 	mov	sp,fp
8110b718:	dfc00117 	ldw	ra,4(sp)
8110b71c:	df000017 	ldw	fp,0(sp)
8110b720:	dec00204 	addi	sp,sp,8
8110b724:	f800283a 	ret

8110b728 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
8110b728:	defffc04 	addi	sp,sp,-16
8110b72c:	dfc00315 	stw	ra,12(sp)
8110b730:	df000215 	stw	fp,8(sp)
8110b734:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
8110b738:	0009883a 	mov	r4,zero
8110b73c:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b740:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
8110b744:	e0bffe17 	ldw	r2,-8(fp)
8110b748:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
8110b74c:	e0bfff03 	ldbu	r2,-4(fp)
}
8110b750:	e037883a 	mov	sp,fp
8110b754:	dfc00117 	ldw	ra,4(sp)
8110b758:	df000017 	ldw	fp,0(sp)
8110b75c:	dec00204 	addi	sp,sp,8
8110b760:	f800283a 	ret

8110b764 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
8110b764:	defffd04 	addi	sp,sp,-12
8110b768:	dfc00215 	stw	ra,8(sp)
8110b76c:	df000115 	stw	fp,4(sp)
8110b770:	df000104 	addi	fp,sp,4
8110b774:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
8110b778:	e17fff17 	ldw	r5,-4(fp)
8110b77c:	01000104 	movi	r4,4
8110b780:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110b784:	00800044 	movi	r2,1
}
8110b788:	e037883a 	mov	sp,fp
8110b78c:	dfc00117 	ldw	ra,4(sp)
8110b790:	df000017 	ldw	fp,0(sp)
8110b794:	dec00204 	addi	sp,sp,8
8110b798:	f800283a 	ret

8110b79c <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
8110b79c:	defffd04 	addi	sp,sp,-12
8110b7a0:	dfc00215 	stw	ra,8(sp)
8110b7a4:	df000115 	stw	fp,4(sp)
8110b7a8:	df000104 	addi	fp,sp,4
8110b7ac:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
8110b7b0:	e17fff17 	ldw	r5,-4(fp)
8110b7b4:	01000144 	movi	r4,5
8110b7b8:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110b7bc:	00800044 	movi	r2,1
}
8110b7c0:	e037883a 	mov	sp,fp
8110b7c4:	dfc00117 	ldw	ra,4(sp)
8110b7c8:	df000017 	ldw	fp,0(sp)
8110b7cc:	dec00204 	addi	sp,sp,8
8110b7d0:	f800283a 	ret

8110b7d4 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
8110b7d4:	defffd04 	addi	sp,sp,-12
8110b7d8:	dfc00215 	stw	ra,8(sp)
8110b7dc:	df000115 	stw	fp,4(sp)
8110b7e0:	df000104 	addi	fp,sp,4
8110b7e4:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
8110b7e8:	e17fff17 	ldw	r5,-4(fp)
8110b7ec:	01000184 	movi	r4,6
8110b7f0:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110b7f4:	00800044 	movi	r2,1
}
8110b7f8:	e037883a 	mov	sp,fp
8110b7fc:	dfc00117 	ldw	ra,4(sp)
8110b800:	df000017 	ldw	fp,0(sp)
8110b804:	dec00204 	addi	sp,sp,8
8110b808:	f800283a 	ret

8110b80c <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
8110b80c:	defffd04 	addi	sp,sp,-12
8110b810:	dfc00215 	stw	ra,8(sp)
8110b814:	df000115 	stw	fp,4(sp)
8110b818:	df000104 	addi	fp,sp,4
8110b81c:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
8110b820:	e17fff17 	ldw	r5,-4(fp)
8110b824:	010001c4 	movi	r4,7
8110b828:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110b82c:	00800044 	movi	r2,1
}
8110b830:	e037883a 	mov	sp,fp
8110b834:	dfc00117 	ldw	ra,4(sp)
8110b838:	df000017 	ldw	fp,0(sp)
8110b83c:	dec00204 	addi	sp,sp,8
8110b840:	f800283a 	ret

8110b844 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
8110b844:	defffc04 	addi	sp,sp,-16
8110b848:	dfc00315 	stw	ra,12(sp)
8110b84c:	df000215 	stw	fp,8(sp)
8110b850:	df000204 	addi	fp,sp,8
8110b854:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
8110b858:	01000204 	movi	r4,8
8110b85c:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b860:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110b864:	e0bfff17 	ldw	r2,-4(fp)
8110b868:	1000051e 	bne	r2,zero,8110b880 <bSyncSetPolarity+0x3c>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
8110b86c:	e0fffe17 	ldw	r3,-8(fp)
8110b870:	00bfbfc4 	movi	r2,-257
8110b874:	1884703a 	and	r2,r3,r2
8110b878:	e0bffe15 	stw	r2,-8(fp)
8110b87c:	00000306 	br	8110b88c <bSyncSetPolarity+0x48>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
8110b880:	e0bffe17 	ldw	r2,-8(fp)
8110b884:	10804014 	ori	r2,r2,256
8110b888:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
8110b88c:	e17ffe17 	ldw	r5,-8(fp)
8110b890:	01000204 	movi	r4,8
8110b894:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110b898:	00800044 	movi	r2,1
}
8110b89c:	e037883a 	mov	sp,fp
8110b8a0:	dfc00117 	ldw	ra,4(sp)
8110b8a4:	df000017 	ldw	fp,0(sp)
8110b8a8:	dec00204 	addi	sp,sp,8
8110b8ac:	f800283a 	ret

8110b8b0 <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
8110b8b0:	defffc04 	addi	sp,sp,-16
8110b8b4:	dfc00315 	stw	ra,12(sp)
8110b8b8:	df000215 	stw	fp,8(sp)
8110b8bc:	df000204 	addi	fp,sp,8
8110b8c0:	2005883a 	mov	r2,r4
8110b8c4:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
8110b8c8:	01000204 	movi	r4,8
8110b8cc:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b8d0:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
8110b8d4:	e0fffe17 	ldw	r3,-8(fp)
8110b8d8:	00bfc004 	movi	r2,-256
8110b8dc:	1884703a 	and	r2,r3,r2
8110b8e0:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
8110b8e4:	e0bfff03 	ldbu	r2,-4(fp)
8110b8e8:	e0fffe17 	ldw	r3,-8(fp)
8110b8ec:	1884b03a 	or	r2,r3,r2
8110b8f0:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
8110b8f4:	e17ffe17 	ldw	r5,-8(fp)
8110b8f8:	01000204 	movi	r4,8
8110b8fc:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110b900:	00800044 	movi	r2,1
}
8110b904:	e037883a 	mov	sp,fp
8110b908:	dfc00117 	ldw	ra,4(sp)
8110b90c:	df000017 	ldw	fp,0(sp)
8110b910:	dec00204 	addi	sp,sp,8
8110b914:	f800283a 	ret

8110b918 <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
8110b918:	defffd04 	addi	sp,sp,-12
8110b91c:	dfc00215 	stw	ra,8(sp)
8110b920:	df000115 	stw	fp,4(sp)
8110b924:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
8110b928:	01000104 	movi	r4,4
8110b92c:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b930:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
8110b934:	e0bfff17 	ldw	r2,-4(fp)
}
8110b938:	e037883a 	mov	sp,fp
8110b93c:	dfc00117 	ldw	ra,4(sp)
8110b940:	df000017 	ldw	fp,0(sp)
8110b944:	dec00204 	addi	sp,sp,8
8110b948:	f800283a 	ret

8110b94c <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
8110b94c:	defffd04 	addi	sp,sp,-12
8110b950:	dfc00215 	stw	ra,8(sp)
8110b954:	df000115 	stw	fp,4(sp)
8110b958:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
8110b95c:	01000144 	movi	r4,5
8110b960:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b964:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
8110b968:	e0bfff17 	ldw	r2,-4(fp)
}
8110b96c:	e037883a 	mov	sp,fp
8110b970:	dfc00117 	ldw	ra,4(sp)
8110b974:	df000017 	ldw	fp,0(sp)
8110b978:	dec00204 	addi	sp,sp,8
8110b97c:	f800283a 	ret

8110b980 <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
8110b980:	defffd04 	addi	sp,sp,-12
8110b984:	dfc00215 	stw	ra,8(sp)
8110b988:	df000115 	stw	fp,4(sp)
8110b98c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
8110b990:	01000184 	movi	r4,6
8110b994:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b998:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
8110b99c:	e0bfff17 	ldw	r2,-4(fp)
}
8110b9a0:	e037883a 	mov	sp,fp
8110b9a4:	dfc00117 	ldw	ra,4(sp)
8110b9a8:	df000017 	ldw	fp,0(sp)
8110b9ac:	dec00204 	addi	sp,sp,8
8110b9b0:	f800283a 	ret

8110b9b4 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
8110b9b4:	defffd04 	addi	sp,sp,-12
8110b9b8:	dfc00215 	stw	ra,8(sp)
8110b9bc:	df000115 	stw	fp,4(sp)
8110b9c0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
8110b9c4:	010001c4 	movi	r4,7
8110b9c8:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110b9cc:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
8110b9d0:	e0bfff17 	ldw	r2,-4(fp)
}
8110b9d4:	e037883a 	mov	sp,fp
8110b9d8:	dfc00117 	ldw	ra,4(sp)
8110b9dc:	df000017 	ldw	fp,0(sp)
8110b9e0:	dec00204 	addi	sp,sp,8
8110b9e4:	f800283a 	ret

8110b9e8 <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
8110b9e8:	defffd04 	addi	sp,sp,-12
8110b9ec:	dfc00215 	stw	ra,8(sp)
8110b9f0:	df000115 	stw	fp,4(sp)
8110b9f4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
8110b9f8:	01000204 	movi	r4,8
8110b9fc:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110ba00:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
8110ba04:	e0bfff17 	ldw	r2,-4(fp)
}
8110ba08:	e037883a 	mov	sp,fp
8110ba0c:	dfc00117 	ldw	ra,4(sp)
8110ba10:	df000017 	ldw	fp,0(sp)
8110ba14:	dec00204 	addi	sp,sp,8
8110ba18:	f800283a 	ret

8110ba1c <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
8110ba1c:	defffd04 	addi	sp,sp,-12
8110ba20:	dfc00215 	stw	ra,8(sp)
8110ba24:	df000115 	stw	fp,4(sp)
8110ba28:	df000104 	addi	fp,sp,4
8110ba2c:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
8110ba30:	e17fff17 	ldw	r5,-4(fp)
8110ba34:	01000244 	movi	r4,9
8110ba38:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110ba3c:	00800044 	movi	r2,1
}
8110ba40:	e037883a 	mov	sp,fp
8110ba44:	dfc00117 	ldw	ra,4(sp)
8110ba48:	df000017 	ldw	fp,0(sp)
8110ba4c:	dec00204 	addi	sp,sp,8
8110ba50:	f800283a 	ret

8110ba54 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
8110ba54:	defffc04 	addi	sp,sp,-16
8110ba58:	dfc00315 	stw	ra,12(sp)
8110ba5c:	df000215 	stw	fp,8(sp)
8110ba60:	df000204 	addi	fp,sp,8
8110ba64:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110ba68:	01000284 	movi	r4,10
8110ba6c:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110ba70:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110ba74:	e0bfff17 	ldw	r2,-4(fp)
8110ba78:	1000061e 	bne	r2,zero,8110ba94 <bSyncCtrExtnIrq+0x40>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
8110ba7c:	e0fffe17 	ldw	r3,-8(fp)
8110ba80:	00a00034 	movhi	r2,32768
8110ba84:	10bfffc4 	addi	r2,r2,-1
8110ba88:	1884703a 	and	r2,r3,r2
8110ba8c:	e0bffe15 	stw	r2,-8(fp)
8110ba90:	00000306 	br	8110baa0 <bSyncCtrExtnIrq+0x4c>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
8110ba94:	e0bffe17 	ldw	r2,-8(fp)
8110ba98:	10a00034 	orhi	r2,r2,32768
8110ba9c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110baa0:	e17ffe17 	ldw	r5,-8(fp)
8110baa4:	01000284 	movi	r4,10
8110baa8:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110baac:	00800044 	movi	r2,1
}
8110bab0:	e037883a 	mov	sp,fp
8110bab4:	dfc00117 	ldw	ra,4(sp)
8110bab8:	df000017 	ldw	fp,0(sp)
8110babc:	dec00204 	addi	sp,sp,8
8110bac0:	f800283a 	ret

8110bac4 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
8110bac4:	defffd04 	addi	sp,sp,-12
8110bac8:	dfc00215 	stw	ra,8(sp)
8110bacc:	df000115 	stw	fp,4(sp)
8110bad0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110bad4:	01000284 	movi	r4,10
8110bad8:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110badc:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
8110bae0:	e0bfff17 	ldw	r2,-4(fp)
8110bae4:	10800234 	orhi	r2,r2,8
8110bae8:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110baec:	e17fff17 	ldw	r5,-4(fp)
8110baf0:	01000284 	movi	r4,10
8110baf4:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110baf8:	00800044 	movi	r2,1
}
8110bafc:	e037883a 	mov	sp,fp
8110bb00:	dfc00117 	ldw	ra,4(sp)
8110bb04:	df000017 	ldw	fp,0(sp)
8110bb08:	dec00204 	addi	sp,sp,8
8110bb0c:	f800283a 	ret

8110bb10 <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
8110bb10:	defffd04 	addi	sp,sp,-12
8110bb14:	dfc00215 	stw	ra,8(sp)
8110bb18:	df000115 	stw	fp,4(sp)
8110bb1c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110bb20:	01000284 	movi	r4,10
8110bb24:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bb28:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
8110bb2c:	e0bfff17 	ldw	r2,-4(fp)
8110bb30:	10800134 	orhi	r2,r2,4
8110bb34:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bb38:	e17fff17 	ldw	r5,-4(fp)
8110bb3c:	01000284 	movi	r4,10
8110bb40:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bb44:	00800044 	movi	r2,1
}
8110bb48:	e037883a 	mov	sp,fp
8110bb4c:	dfc00117 	ldw	ra,4(sp)
8110bb50:	df000017 	ldw	fp,0(sp)
8110bb54:	dec00204 	addi	sp,sp,8
8110bb58:	f800283a 	ret

8110bb5c <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
8110bb5c:	defffd04 	addi	sp,sp,-12
8110bb60:	dfc00215 	stw	ra,8(sp)
8110bb64:	df000115 	stw	fp,4(sp)
8110bb68:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110bb6c:	01000284 	movi	r4,10
8110bb70:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bb74:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
8110bb78:	e0bfff17 	ldw	r2,-4(fp)
8110bb7c:	108000b4 	orhi	r2,r2,2
8110bb80:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bb84:	e17fff17 	ldw	r5,-4(fp)
8110bb88:	01000284 	movi	r4,10
8110bb8c:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bb90:	00800044 	movi	r2,1
}
8110bb94:	e037883a 	mov	sp,fp
8110bb98:	dfc00117 	ldw	ra,4(sp)
8110bb9c:	df000017 	ldw	fp,0(sp)
8110bba0:	dec00204 	addi	sp,sp,8
8110bba4:	f800283a 	ret

8110bba8 <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
8110bba8:	defffd04 	addi	sp,sp,-12
8110bbac:	dfc00215 	stw	ra,8(sp)
8110bbb0:	df000115 	stw	fp,4(sp)
8110bbb4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110bbb8:	01000284 	movi	r4,10
8110bbbc:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bbc0:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
8110bbc4:	e0bfff17 	ldw	r2,-4(fp)
8110bbc8:	10800074 	orhi	r2,r2,1
8110bbcc:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bbd0:	e17fff17 	ldw	r5,-4(fp)
8110bbd4:	01000284 	movi	r4,10
8110bbd8:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bbdc:	00800044 	movi	r2,1
}
8110bbe0:	e037883a 	mov	sp,fp
8110bbe4:	dfc00117 	ldw	ra,4(sp)
8110bbe8:	df000017 	ldw	fp,0(sp)
8110bbec:	dec00204 	addi	sp,sp,8
8110bbf0:	f800283a 	ret

8110bbf4 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
8110bbf4:	defffc04 	addi	sp,sp,-16
8110bbf8:	dfc00315 	stw	ra,12(sp)
8110bbfc:	df000215 	stw	fp,8(sp)
8110bc00:	df000204 	addi	fp,sp,8
8110bc04:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110bc08:	01000284 	movi	r4,10
8110bc0c:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bc10:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110bc14:	e0bfff17 	ldw	r2,-4(fp)
8110bc18:	1000051e 	bne	r2,zero,8110bc30 <bSyncCtrSyncOutEnable+0x3c>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
8110bc1c:	e0fffe17 	ldw	r3,-8(fp)
8110bc20:	00bfbfc4 	movi	r2,-257
8110bc24:	1884703a 	and	r2,r3,r2
8110bc28:	e0bffe15 	stw	r2,-8(fp)
8110bc2c:	00000306 	br	8110bc3c <bSyncCtrSyncOutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
8110bc30:	e0bffe17 	ldw	r2,-8(fp)
8110bc34:	10804014 	ori	r2,r2,256
8110bc38:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bc3c:	e17ffe17 	ldw	r5,-8(fp)
8110bc40:	01000284 	movi	r4,10
8110bc44:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bc48:	00800044 	movi	r2,1
}
8110bc4c:	e037883a 	mov	sp,fp
8110bc50:	dfc00117 	ldw	ra,4(sp)
8110bc54:	df000017 	ldw	fp,0(sp)
8110bc58:	dec00204 	addi	sp,sp,8
8110bc5c:	f800283a 	ret

8110bc60 <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
8110bc60:	defffc04 	addi	sp,sp,-16
8110bc64:	dfc00315 	stw	ra,12(sp)
8110bc68:	df000215 	stw	fp,8(sp)
8110bc6c:	df000204 	addi	fp,sp,8
8110bc70:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110bc74:	01000284 	movi	r4,10
8110bc78:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bc7c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110bc80:	e0bfff17 	ldw	r2,-4(fp)
8110bc84:	1000051e 	bne	r2,zero,8110bc9c <bSyncCtrCh1OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
8110bc88:	e0fffe17 	ldw	r3,-8(fp)
8110bc8c:	00bfff84 	movi	r2,-2
8110bc90:	1884703a 	and	r2,r3,r2
8110bc94:	e0bffe15 	stw	r2,-8(fp)
8110bc98:	00000306 	br	8110bca8 <bSyncCtrCh1OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
8110bc9c:	e0bffe17 	ldw	r2,-8(fp)
8110bca0:	10800054 	ori	r2,r2,1
8110bca4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bca8:	e17ffe17 	ldw	r5,-8(fp)
8110bcac:	01000284 	movi	r4,10
8110bcb0:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bcb4:	00800044 	movi	r2,1
}
8110bcb8:	e037883a 	mov	sp,fp
8110bcbc:	dfc00117 	ldw	ra,4(sp)
8110bcc0:	df000017 	ldw	fp,0(sp)
8110bcc4:	dec00204 	addi	sp,sp,8
8110bcc8:	f800283a 	ret

8110bccc <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
8110bccc:	defffc04 	addi	sp,sp,-16
8110bcd0:	dfc00315 	stw	ra,12(sp)
8110bcd4:	df000215 	stw	fp,8(sp)
8110bcd8:	df000204 	addi	fp,sp,8
8110bcdc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110bce0:	01000284 	movi	r4,10
8110bce4:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bce8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110bcec:	e0bfff17 	ldw	r2,-4(fp)
8110bcf0:	1000051e 	bne	r2,zero,8110bd08 <bSyncCtrCh2OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
8110bcf4:	e0fffe17 	ldw	r3,-8(fp)
8110bcf8:	00bfff44 	movi	r2,-3
8110bcfc:	1884703a 	and	r2,r3,r2
8110bd00:	e0bffe15 	stw	r2,-8(fp)
8110bd04:	00000306 	br	8110bd14 <bSyncCtrCh2OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
8110bd08:	e0bffe17 	ldw	r2,-8(fp)
8110bd0c:	10800094 	ori	r2,r2,2
8110bd10:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bd14:	e17ffe17 	ldw	r5,-8(fp)
8110bd18:	01000284 	movi	r4,10
8110bd1c:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bd20:	00800044 	movi	r2,1
}
8110bd24:	e037883a 	mov	sp,fp
8110bd28:	dfc00117 	ldw	ra,4(sp)
8110bd2c:	df000017 	ldw	fp,0(sp)
8110bd30:	dec00204 	addi	sp,sp,8
8110bd34:	f800283a 	ret

8110bd38 <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
8110bd38:	defffc04 	addi	sp,sp,-16
8110bd3c:	dfc00315 	stw	ra,12(sp)
8110bd40:	df000215 	stw	fp,8(sp)
8110bd44:	df000204 	addi	fp,sp,8
8110bd48:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110bd4c:	01000284 	movi	r4,10
8110bd50:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bd54:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110bd58:	e0bfff17 	ldw	r2,-4(fp)
8110bd5c:	1000051e 	bne	r2,zero,8110bd74 <bSyncCtrCh3OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
8110bd60:	e0fffe17 	ldw	r3,-8(fp)
8110bd64:	00bffec4 	movi	r2,-5
8110bd68:	1884703a 	and	r2,r3,r2
8110bd6c:	e0bffe15 	stw	r2,-8(fp)
8110bd70:	00000306 	br	8110bd80 <bSyncCtrCh3OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
8110bd74:	e0bffe17 	ldw	r2,-8(fp)
8110bd78:	10800114 	ori	r2,r2,4
8110bd7c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bd80:	e17ffe17 	ldw	r5,-8(fp)
8110bd84:	01000284 	movi	r4,10
8110bd88:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bd8c:	00800044 	movi	r2,1
}
8110bd90:	e037883a 	mov	sp,fp
8110bd94:	dfc00117 	ldw	ra,4(sp)
8110bd98:	df000017 	ldw	fp,0(sp)
8110bd9c:	dec00204 	addi	sp,sp,8
8110bda0:	f800283a 	ret

8110bda4 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
8110bda4:	defffc04 	addi	sp,sp,-16
8110bda8:	dfc00315 	stw	ra,12(sp)
8110bdac:	df000215 	stw	fp,8(sp)
8110bdb0:	df000204 	addi	fp,sp,8
8110bdb4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110bdb8:	01000284 	movi	r4,10
8110bdbc:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bdc0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110bdc4:	e0bfff17 	ldw	r2,-4(fp)
8110bdc8:	1000051e 	bne	r2,zero,8110bde0 <bSyncCtrCh4OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
8110bdcc:	e0fffe17 	ldw	r3,-8(fp)
8110bdd0:	00bffdc4 	movi	r2,-9
8110bdd4:	1884703a 	and	r2,r3,r2
8110bdd8:	e0bffe15 	stw	r2,-8(fp)
8110bddc:	00000306 	br	8110bdec <bSyncCtrCh4OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
8110bde0:	e0bffe17 	ldw	r2,-8(fp)
8110bde4:	10800214 	ori	r2,r2,8
8110bde8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bdec:	e17ffe17 	ldw	r5,-8(fp)
8110bdf0:	01000284 	movi	r4,10
8110bdf4:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bdf8:	00800044 	movi	r2,1
}
8110bdfc:	e037883a 	mov	sp,fp
8110be00:	dfc00117 	ldw	ra,4(sp)
8110be04:	df000017 	ldw	fp,0(sp)
8110be08:	dec00204 	addi	sp,sp,8
8110be0c:	f800283a 	ret

8110be10 <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
8110be10:	defffc04 	addi	sp,sp,-16
8110be14:	dfc00315 	stw	ra,12(sp)
8110be18:	df000215 	stw	fp,8(sp)
8110be1c:	df000204 	addi	fp,sp,8
8110be20:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110be24:	01000284 	movi	r4,10
8110be28:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110be2c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110be30:	e0bfff17 	ldw	r2,-4(fp)
8110be34:	1000051e 	bne	r2,zero,8110be4c <bSyncCtrCh5OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
8110be38:	e0fffe17 	ldw	r3,-8(fp)
8110be3c:	00bffbc4 	movi	r2,-17
8110be40:	1884703a 	and	r2,r3,r2
8110be44:	e0bffe15 	stw	r2,-8(fp)
8110be48:	00000306 	br	8110be58 <bSyncCtrCh5OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
8110be4c:	e0bffe17 	ldw	r2,-8(fp)
8110be50:	10800414 	ori	r2,r2,16
8110be54:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110be58:	e17ffe17 	ldw	r5,-8(fp)
8110be5c:	01000284 	movi	r4,10
8110be60:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110be64:	00800044 	movi	r2,1
}
8110be68:	e037883a 	mov	sp,fp
8110be6c:	dfc00117 	ldw	ra,4(sp)
8110be70:	df000017 	ldw	fp,0(sp)
8110be74:	dec00204 	addi	sp,sp,8
8110be78:	f800283a 	ret

8110be7c <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
8110be7c:	defffc04 	addi	sp,sp,-16
8110be80:	dfc00315 	stw	ra,12(sp)
8110be84:	df000215 	stw	fp,8(sp)
8110be88:	df000204 	addi	fp,sp,8
8110be8c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110be90:	01000284 	movi	r4,10
8110be94:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110be98:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110be9c:	e0bfff17 	ldw	r2,-4(fp)
8110bea0:	1000051e 	bne	r2,zero,8110beb8 <bSyncCtrCh6OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
8110bea4:	e0fffe17 	ldw	r3,-8(fp)
8110bea8:	00bff7c4 	movi	r2,-33
8110beac:	1884703a 	and	r2,r3,r2
8110beb0:	e0bffe15 	stw	r2,-8(fp)
8110beb4:	00000306 	br	8110bec4 <bSyncCtrCh6OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
8110beb8:	e0bffe17 	ldw	r2,-8(fp)
8110bebc:	10800814 	ori	r2,r2,32
8110bec0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bec4:	e17ffe17 	ldw	r5,-8(fp)
8110bec8:	01000284 	movi	r4,10
8110becc:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bed0:	00800044 	movi	r2,1
}
8110bed4:	e037883a 	mov	sp,fp
8110bed8:	dfc00117 	ldw	ra,4(sp)
8110bedc:	df000017 	ldw	fp,0(sp)
8110bee0:	dec00204 	addi	sp,sp,8
8110bee4:	f800283a 	ret

8110bee8 <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
8110bee8:	defffc04 	addi	sp,sp,-16
8110beec:	dfc00315 	stw	ra,12(sp)
8110bef0:	df000215 	stw	fp,8(sp)
8110bef4:	df000204 	addi	fp,sp,8
8110bef8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110befc:	01000284 	movi	r4,10
8110bf00:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bf04:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110bf08:	e0bfff17 	ldw	r2,-4(fp)
8110bf0c:	1000051e 	bne	r2,zero,8110bf24 <bSyncCtrCh7OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
8110bf10:	e0fffe17 	ldw	r3,-8(fp)
8110bf14:	00bfefc4 	movi	r2,-65
8110bf18:	1884703a 	and	r2,r3,r2
8110bf1c:	e0bffe15 	stw	r2,-8(fp)
8110bf20:	00000306 	br	8110bf30 <bSyncCtrCh7OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
8110bf24:	e0bffe17 	ldw	r2,-8(fp)
8110bf28:	10801014 	ori	r2,r2,64
8110bf2c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bf30:	e17ffe17 	ldw	r5,-8(fp)
8110bf34:	01000284 	movi	r4,10
8110bf38:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bf3c:	00800044 	movi	r2,1
}
8110bf40:	e037883a 	mov	sp,fp
8110bf44:	dfc00117 	ldw	ra,4(sp)
8110bf48:	df000017 	ldw	fp,0(sp)
8110bf4c:	dec00204 	addi	sp,sp,8
8110bf50:	f800283a 	ret

8110bf54 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
8110bf54:	defffc04 	addi	sp,sp,-16
8110bf58:	dfc00315 	stw	ra,12(sp)
8110bf5c:	df000215 	stw	fp,8(sp)
8110bf60:	df000204 	addi	fp,sp,8
8110bf64:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110bf68:	01000284 	movi	r4,10
8110bf6c:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bf70:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110bf74:	e0bfff17 	ldw	r2,-4(fp)
8110bf78:	1000051e 	bne	r2,zero,8110bf90 <bSyncCtrCh8OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
8110bf7c:	e0fffe17 	ldw	r3,-8(fp)
8110bf80:	00bfdfc4 	movi	r2,-129
8110bf84:	1884703a 	and	r2,r3,r2
8110bf88:	e0bffe15 	stw	r2,-8(fp)
8110bf8c:	00000306 	br	8110bf9c <bSyncCtrCh8OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
8110bf90:	e0bffe17 	ldw	r2,-8(fp)
8110bf94:	10802014 	ori	r2,r2,128
8110bf98:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110bf9c:	e17ffe17 	ldw	r5,-8(fp)
8110bfa0:	01000284 	movi	r4,10
8110bfa4:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110bfa8:	00800044 	movi	r2,1
}
8110bfac:	e037883a 	mov	sp,fp
8110bfb0:	dfc00117 	ldw	ra,4(sp)
8110bfb4:	df000017 	ldw	fp,0(sp)
8110bfb8:	dec00204 	addi	sp,sp,8
8110bfbc:	f800283a 	ret

8110bfc0 <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
8110bfc0:	defffc04 	addi	sp,sp,-16
8110bfc4:	dfc00315 	stw	ra,12(sp)
8110bfc8:	df000215 	stw	fp,8(sp)
8110bfcc:	df000204 	addi	fp,sp,8
8110bfd0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
8110bfd4:	01000044 	movi	r4,1
8110bfd8:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110bfdc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110bfe0:	e0bfff17 	ldw	r2,-4(fp)
8110bfe4:	1000051e 	bne	r2,zero,8110bffc <bSyncIrqEnableError+0x3c>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
8110bfe8:	e0fffe17 	ldw	r3,-8(fp)
8110bfec:	00bfff44 	movi	r2,-3
8110bff0:	1884703a 	and	r2,r3,r2
8110bff4:	e0bffe15 	stw	r2,-8(fp)
8110bff8:	00000306 	br	8110c008 <bSyncIrqEnableError+0x48>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
8110bffc:	e0bffe17 	ldw	r2,-8(fp)
8110c000:	10800094 	ori	r2,r2,2
8110c004:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
8110c008:	e17ffe17 	ldw	r5,-8(fp)
8110c00c:	01000044 	movi	r4,1
8110c010:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110c014:	00800044 	movi	r2,1
}
8110c018:	e037883a 	mov	sp,fp
8110c01c:	dfc00117 	ldw	ra,4(sp)
8110c020:	df000017 	ldw	fp,0(sp)
8110c024:	dec00204 	addi	sp,sp,8
8110c028:	f800283a 	ret

8110c02c <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
8110c02c:	defffc04 	addi	sp,sp,-16
8110c030:	dfc00315 	stw	ra,12(sp)
8110c034:	df000215 	stw	fp,8(sp)
8110c038:	df000204 	addi	fp,sp,8
8110c03c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
8110c040:	01000044 	movi	r4,1
8110c044:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110c048:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110c04c:	e0bfff17 	ldw	r2,-4(fp)
8110c050:	1000051e 	bne	r2,zero,8110c068 <bSyncIrqEnableBlank+0x3c>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
8110c054:	e0fffe17 	ldw	r3,-8(fp)
8110c058:	00bfff84 	movi	r2,-2
8110c05c:	1884703a 	and	r2,r3,r2
8110c060:	e0bffe15 	stw	r2,-8(fp)
8110c064:	00000306 	br	8110c074 <bSyncIrqEnableBlank+0x48>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
8110c068:	e0bffe17 	ldw	r2,-8(fp)
8110c06c:	10800054 	ori	r2,r2,1
8110c070:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
8110c074:	e17ffe17 	ldw	r5,-8(fp)
8110c078:	01000044 	movi	r4,1
8110c07c:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110c080:	00800044 	movi	r2,1
}
8110c084:	e037883a 	mov	sp,fp
8110c088:	dfc00117 	ldw	ra,4(sp)
8110c08c:	df000017 	ldw	fp,0(sp)
8110c090:	dec00204 	addi	sp,sp,8
8110c094:	f800283a 	ret

8110c098 <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
8110c098:	defffc04 	addi	sp,sp,-16
8110c09c:	dfc00315 	stw	ra,12(sp)
8110c0a0:	df000215 	stw	fp,8(sp)
8110c0a4:	df000204 	addi	fp,sp,8
8110c0a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
8110c0ac:	01000084 	movi	r4,2
8110c0b0:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110c0b4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110c0b8:	e0bfff17 	ldw	r2,-4(fp)
8110c0bc:	1000051e 	bne	r2,zero,8110c0d4 <bSyncIrqFlagClrError+0x3c>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
8110c0c0:	e0fffe17 	ldw	r3,-8(fp)
8110c0c4:	00bfff44 	movi	r2,-3
8110c0c8:	1884703a 	and	r2,r3,r2
8110c0cc:	e0bffe15 	stw	r2,-8(fp)
8110c0d0:	00000306 	br	8110c0e0 <bSyncIrqFlagClrError+0x48>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
8110c0d4:	e0bffe17 	ldw	r2,-8(fp)
8110c0d8:	10800094 	ori	r2,r2,2
8110c0dc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
8110c0e0:	e17ffe17 	ldw	r5,-8(fp)
8110c0e4:	01000084 	movi	r4,2
8110c0e8:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110c0ec:	00800044 	movi	r2,1
}
8110c0f0:	e037883a 	mov	sp,fp
8110c0f4:	dfc00117 	ldw	ra,4(sp)
8110c0f8:	df000017 	ldw	fp,0(sp)
8110c0fc:	dec00204 	addi	sp,sp,8
8110c100:	f800283a 	ret

8110c104 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
8110c104:	defffc04 	addi	sp,sp,-16
8110c108:	dfc00315 	stw	ra,12(sp)
8110c10c:	df000215 	stw	fp,8(sp)
8110c110:	df000204 	addi	fp,sp,8
8110c114:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
8110c118:	01000084 	movi	r4,2
8110c11c:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110c120:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110c124:	e0bfff17 	ldw	r2,-4(fp)
8110c128:	1000051e 	bne	r2,zero,8110c140 <bSyncIrqFlagClrBlank+0x3c>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
8110c12c:	e0fffe17 	ldw	r3,-8(fp)
8110c130:	00bfff84 	movi	r2,-2
8110c134:	1884703a 	and	r2,r3,r2
8110c138:	e0bffe15 	stw	r2,-8(fp)
8110c13c:	00000306 	br	8110c14c <bSyncIrqFlagClrBlank+0x48>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
8110c140:	e0bffe17 	ldw	r2,-8(fp)
8110c144:	10800054 	ori	r2,r2,1
8110c148:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
8110c14c:	e17ffe17 	ldw	r5,-8(fp)
8110c150:	01000084 	movi	r4,2
8110c154:	110c2780 	call	8110c278 <bSyncWriteReg>
	return TRUE;
8110c158:	00800044 	movi	r2,1
}
8110c15c:	e037883a 	mov	sp,fp
8110c160:	dfc00117 	ldw	ra,4(sp)
8110c164:	df000017 	ldw	fp,0(sp)
8110c168:	dec00204 	addi	sp,sp,8
8110c16c:	f800283a 	ret

8110c170 <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
8110c170:	defffc04 	addi	sp,sp,-16
8110c174:	dfc00315 	stw	ra,12(sp)
8110c178:	df000215 	stw	fp,8(sp)
8110c17c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110c180:	010000c4 	movi	r4,3
8110c184:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110c188:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
8110c18c:	e0bfff17 	ldw	r2,-4(fp)
8110c190:	1080008c 	andi	r2,r2,2
8110c194:	10000326 	beq	r2,zero,8110c1a4 <bSyncIrqFlagError+0x34>
		bResult = TRUE;
8110c198:	00800044 	movi	r2,1
8110c19c:	e0bffe15 	stw	r2,-8(fp)
8110c1a0:	00000106 	br	8110c1a8 <bSyncIrqFlagError+0x38>
	} else {
		bResult = FALSE;
8110c1a4:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110c1a8:	e0bffe17 	ldw	r2,-8(fp)
}
8110c1ac:	e037883a 	mov	sp,fp
8110c1b0:	dfc00117 	ldw	ra,4(sp)
8110c1b4:	df000017 	ldw	fp,0(sp)
8110c1b8:	dec00204 	addi	sp,sp,8
8110c1bc:	f800283a 	ret

8110c1c0 <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
8110c1c0:	defffc04 	addi	sp,sp,-16
8110c1c4:	dfc00315 	stw	ra,12(sp)
8110c1c8:	df000215 	stw	fp,8(sp)
8110c1cc:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110c1d0:	010000c4 	movi	r4,3
8110c1d4:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110c1d8:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
8110c1dc:	e0bfff17 	ldw	r2,-4(fp)
8110c1e0:	1080004c 	andi	r2,r2,1
8110c1e4:	10000326 	beq	r2,zero,8110c1f4 <bSyncIrqFlagBlank+0x34>
		bResult = TRUE;
8110c1e8:	00800044 	movi	r2,1
8110c1ec:	e0bffe15 	stw	r2,-8(fp)
8110c1f0:	00000106 	br	8110c1f8 <bSyncIrqFlagBlank+0x38>
	} else {
		bResult = FALSE;
8110c1f4:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110c1f8:	e0bffe17 	ldw	r2,-8(fp)
}
8110c1fc:	e037883a 	mov	sp,fp
8110c200:	dfc00117 	ldw	ra,4(sp)
8110c204:	df000017 	ldw	fp,0(sp)
8110c208:	dec00204 	addi	sp,sp,8
8110c20c:	f800283a 	ret

8110c210 <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
8110c210:	defffd04 	addi	sp,sp,-12
8110c214:	dfc00215 	stw	ra,8(sp)
8110c218:	df000115 	stw	fp,4(sp)
8110c21c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110c220:	01000284 	movi	r4,10
8110c224:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110c228:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
8110c22c:	e0bfff17 	ldw	r2,-4(fp)
}
8110c230:	e037883a 	mov	sp,fp
8110c234:	dfc00117 	ldw	ra,4(sp)
8110c238:	df000017 	ldw	fp,0(sp)
8110c23c:	dec00204 	addi	sp,sp,8
8110c240:	f800283a 	ret

8110c244 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
8110c244:	defffd04 	addi	sp,sp,-12
8110c248:	dfc00215 	stw	ra,8(sp)
8110c24c:	df000115 	stw	fp,4(sp)
8110c250:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
8110c254:	0009883a 	mov	r4,zero
8110c258:	110c2cc0 	call	8110c2cc <uliSyncReadReg>
8110c25c:	e0bfff15 	stw	r2,-4(fp)
	return aux;
8110c260:	e0bfff17 	ldw	r2,-4(fp)
}
8110c264:	e037883a 	mov	sp,fp
8110c268:	dfc00117 	ldw	ra,4(sp)
8110c26c:	df000017 	ldw	fp,0(sp)
8110c270:	dec00204 	addi	sp,sp,8
8110c274:	f800283a 	ret

8110c278 <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
8110c278:	defffc04 	addi	sp,sp,-16
8110c27c:	df000315 	stw	fp,12(sp)
8110c280:	df000304 	addi	fp,sp,12
8110c284:	e13ffe15 	stw	r4,-8(fp)
8110c288:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
8110c28c:	00a00034 	movhi	r2,32768
8110c290:	10810004 	addi	r2,r2,1024
8110c294:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
8110c298:	e0bffe17 	ldw	r2,-8(fp)
8110c29c:	1085883a 	add	r2,r2,r2
8110c2a0:	1085883a 	add	r2,r2,r2
8110c2a4:	1007883a 	mov	r3,r2
8110c2a8:	e0bffd17 	ldw	r2,-12(fp)
8110c2ac:	10c5883a 	add	r2,r2,r3
8110c2b0:	e0ffff17 	ldw	r3,-4(fp)
8110c2b4:	10c00015 	stw	r3,0(r2)
	return TRUE;
8110c2b8:	00800044 	movi	r2,1
}
8110c2bc:	e037883a 	mov	sp,fp
8110c2c0:	df000017 	ldw	fp,0(sp)
8110c2c4:	dec00104 	addi	sp,sp,4
8110c2c8:	f800283a 	ret

8110c2cc <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
8110c2cc:	defffc04 	addi	sp,sp,-16
8110c2d0:	df000315 	stw	fp,12(sp)
8110c2d4:	df000304 	addi	fp,sp,12
8110c2d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
8110c2dc:	00a00034 	movhi	r2,32768
8110c2e0:	10810004 	addi	r2,r2,1024
8110c2e4:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
8110c2e8:	e0bfff17 	ldw	r2,-4(fp)
8110c2ec:	1085883a 	add	r2,r2,r2
8110c2f0:	1085883a 	add	r2,r2,r2
8110c2f4:	1007883a 	mov	r3,r2
8110c2f8:	e0bffd17 	ldw	r2,-12(fp)
8110c2fc:	10c5883a 	add	r2,r2,r3
8110c300:	10800017 	ldw	r2,0(r2)
8110c304:	e0bffe15 	stw	r2,-8(fp)
	return value;
8110c308:	e0bffe17 	ldw	r2,-8(fp)
}
8110c30c:	e037883a 	mov	sp,fp
8110c310:	df000017 	ldw	fp,0(sp)
8110c314:	dec00104 	addi	sp,sp,4
8110c318:	f800283a 	ret

8110c31c <main>:
TCommChannel xComm5;
TCommChannel xComm6;
TCommChannel xComm7;
TCommChannel xComm8;

int main(void) {
8110c31c:	defff804 	addi	sp,sp,-32
8110c320:	dfc00715 	stw	ra,28(sp)
8110c324:	df000615 	stw	fp,24(sp)
8110c328:	df000604 	addi	fp,sp,24

	/* Debug device initialization - JTAG USB */
#ifdef DEBUG_ON
	fp = fopen(JTAG_UART_0_NAME, "r+");
8110c32c:	016044b4 	movhi	r5,33042
8110c330:	2959b804 	addi	r5,r5,26336
8110c334:	012044b4 	movhi	r4,33042
8110c338:	2119b904 	addi	r4,r4,26340
8110c33c:	11100480 	call	81110048 <fopen>
8110c340:	d0a03115 	stw	r2,-32572(gp)
#endif

//	vRstcHoldDeviceReset(RSTC_DEV_ALL_MSK);
//	usleep(5000);
	vRstcReleaseDeviceReset(RSTC_DEV_ALL_MSK);
8110c344:	0101ffc4 	movi	r4,2047
8110c348:	110af600 	call	8110af60 <vRstcReleaseDeviceReset>
	usleep(5000);
8110c34c:	0104e204 	movi	r4,5000
8110c350:	1120f980 	call	81120f98 <usleep>
	usleep(1000000);
8110c354:	010003f4 	movhi	r4,15
8110c358:	21109004 	addi	r4,r4,16960
8110c35c:	1120f980 	call	81120f98 <usleep>

	bDisableIsoDrivers();
8110c360:	110965c0 	call	8110965c <bDisableIsoDrivers>
	bDisableLvdsBoard();
8110c364:	11096c40 	call	811096c4 <bDisableLvdsBoard>

	usleep(50000);
8110c368:	0130d414 	movui	r4,50000
8110c36c:	1120f980 	call	81120f98 <usleep>

	bEnableIsoDrivers();
8110c370:	11096280 	call	81109628 <bEnableIsoDrivers>
	bEnableLvdsBoard();
8110c374:	11096900 	call	81109690 <bEnableLvdsBoard>

	alt_8 ucTempFpga = 0;
8110c378:	e03fff05 	stb	zero,-4(fp)
	alt_8 ucTempBoard = 0;
8110c37c:	e03fff45 	stb	zero,-3(fp)

#ifdef DEBUG_ON
	debug(fp, "\n Nucleo de Sistemas Eletronicos Embarcados - MebX\n\n");
8110c380:	d0a03117 	ldw	r2,-32572(gp)
8110c384:	100f883a 	mov	r7,r2
8110c388:	01800d04 	movi	r6,52
8110c38c:	01400044 	movi	r5,1
8110c390:	012044b4 	movhi	r4,33042
8110c394:	2119be04 	addi	r4,r4,26360
8110c398:	11106540 	call	81110654 <fwrite>
#endif

	//Configura Display de 7 segmentos
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110c39c:	0009883a 	mov	r4,zero
8110c3a0:	110b42c0 	call	8110b42c <bSSDisplayConfig>

	bSpwcInitCh(&xComm1.xSpacewire, eCommSpwCh1);
8110c3a4:	000b883a 	mov	r5,zero
8110c3a8:	012044f4 	movhi	r4,33043
8110c3ac:	2124ce04 	addi	r4,r4,-27848
8110c3b0:	11094c00 	call	811094c0 <bSpwcInitCh>
	bSpwcInitCh(&xComm2.xSpacewire, eCommSpwCh2);
8110c3b4:	01400044 	movi	r5,1
8110c3b8:	012044f4 	movhi	r4,33043
8110c3bc:	21253204 	addi	r4,r4,-27448
8110c3c0:	11094c00 	call	811094c0 <bSpwcInitCh>
	bSpwcInitCh(&xComm3.xSpacewire, eCommSpwCh3);
8110c3c4:	01400084 	movi	r5,2
8110c3c8:	012044f4 	movhi	r4,33043
8110c3cc:	21265e04 	addi	r4,r4,-26248
8110c3d0:	11094c00 	call	811094c0 <bSpwcInitCh>
	bSpwcInitCh(&xComm4.xSpacewire, eCommSpwCh4);
8110c3d4:	014000c4 	movi	r5,3
8110c3d8:	012044f4 	movhi	r4,33043
8110c3dc:	21278a04 	addi	r4,r4,-25048
8110c3e0:	11094c00 	call	811094c0 <bSpwcInitCh>
	bSpwcInitCh(&xComm5.xSpacewire, eCommSpwCh5);
8110c3e4:	01400104 	movi	r5,4
8110c3e8:	012044f4 	movhi	r4,33043
8110c3ec:	2125fa04 	addi	r4,r4,-26648
8110c3f0:	11094c00 	call	811094c0 <bSpwcInitCh>
	bSpwcInitCh(&xComm6.xSpacewire, eCommSpwCh6);
8110c3f4:	01400144 	movi	r5,5
8110c3f8:	012044f4 	movhi	r4,33043
8110c3fc:	21259604 	addi	r4,r4,-27048
8110c400:	11094c00 	call	811094c0 <bSpwcInitCh>
	bSpwcInitCh(&xComm7.xSpacewire, eCommSpwCh7);
8110c404:	01400184 	movi	r5,6
8110c408:	012044f4 	movhi	r4,33043
8110c40c:	2126c204 	addi	r4,r4,-25848
8110c410:	11094c00 	call	811094c0 <bSpwcInitCh>
	bSpwcInitCh(&xComm8.xSpacewire, eCommSpwCh8);
8110c414:	014001c4 	movi	r5,7
8110c418:	012044f4 	movhi	r4,33043
8110c41c:	21272604 	addi	r4,r4,-25448
8110c420:	11094c00 	call	811094c0 <bSpwcInitCh>
//	printf("int_cnt: %u \n", int_cnt);
//
//	xComm1.xIrqControl.bRightBufferEmptyEn = FALSE;
//	bFeebSetIrqControl(&xComm1);

	xComm1.xSpacewire.xLinkConfig.bAutostart = FALSE;
8110c424:	00a044f4 	movhi	r2,33043
8110c428:	10a47704 	addi	r2,r2,-28196
8110c42c:	10005815 	stw	zero,352(r2)
	xComm1.xSpacewire.xLinkConfig.bLinkStart = FALSE;
8110c430:	00a044f4 	movhi	r2,33043
8110c434:	10a47704 	addi	r2,r2,-28196
8110c438:	10005915 	stw	zero,356(r2)
	xComm1.xSpacewire.xLinkConfig.bDisconnect = TRUE;
8110c43c:	00a044f4 	movhi	r2,33043
8110c440:	10a47704 	addi	r2,r2,-28196
8110c444:	00c00044 	movi	r3,1
8110c448:	10c05a15 	stw	r3,360(r2)
	xComm2.xSpacewire.xLinkConfig.bAutostart = FALSE;
8110c44c:	00a044f4 	movhi	r2,33043
8110c450:	10a4db04 	addi	r2,r2,-27796
8110c454:	10005815 	stw	zero,352(r2)
	xComm2.xSpacewire.xLinkConfig.bLinkStart = FALSE;
8110c458:	00a044f4 	movhi	r2,33043
8110c45c:	10a4db04 	addi	r2,r2,-27796
8110c460:	10005915 	stw	zero,356(r2)
	xComm2.xSpacewire.xLinkConfig.bDisconnect = TRUE;
8110c464:	00a044f4 	movhi	r2,33043
8110c468:	10a4db04 	addi	r2,r2,-27796
8110c46c:	00c00044 	movi	r3,1
8110c470:	10c05a15 	stw	r3,360(r2)
	xComm3.xSpacewire.xLinkConfig.bAutostart = FALSE;
8110c474:	00a044f4 	movhi	r2,33043
8110c478:	10a60704 	addi	r2,r2,-26596
8110c47c:	10005815 	stw	zero,352(r2)
	xComm3.xSpacewire.xLinkConfig.bLinkStart = FALSE;
8110c480:	00a044f4 	movhi	r2,33043
8110c484:	10a60704 	addi	r2,r2,-26596
8110c488:	10005915 	stw	zero,356(r2)
	xComm3.xSpacewire.xLinkConfig.bDisconnect = TRUE;
8110c48c:	00a044f4 	movhi	r2,33043
8110c490:	10a60704 	addi	r2,r2,-26596
8110c494:	00c00044 	movi	r3,1
8110c498:	10c05a15 	stw	r3,360(r2)
	xComm4.xSpacewire.xLinkConfig.bAutostart = FALSE;
8110c49c:	00a044f4 	movhi	r2,33043
8110c4a0:	10a73304 	addi	r2,r2,-25396
8110c4a4:	10005815 	stw	zero,352(r2)
	xComm4.xSpacewire.xLinkConfig.bLinkStart = FALSE;
8110c4a8:	00a044f4 	movhi	r2,33043
8110c4ac:	10a73304 	addi	r2,r2,-25396
8110c4b0:	10005915 	stw	zero,356(r2)
	xComm4.xSpacewire.xLinkConfig.bDisconnect = TRUE;
8110c4b4:	00a044f4 	movhi	r2,33043
8110c4b8:	10a73304 	addi	r2,r2,-25396
8110c4bc:	00c00044 	movi	r3,1
8110c4c0:	10c05a15 	stw	r3,360(r2)
	xComm5.xSpacewire.xLinkConfig.bAutostart = FALSE;
8110c4c4:	00a044f4 	movhi	r2,33043
8110c4c8:	10a5a304 	addi	r2,r2,-26996
8110c4cc:	10005815 	stw	zero,352(r2)
	xComm5.xSpacewire.xLinkConfig.bLinkStart = FALSE;
8110c4d0:	00a044f4 	movhi	r2,33043
8110c4d4:	10a5a304 	addi	r2,r2,-26996
8110c4d8:	10005915 	stw	zero,356(r2)
	xComm5.xSpacewire.xLinkConfig.bDisconnect = TRUE;
8110c4dc:	00a044f4 	movhi	r2,33043
8110c4e0:	10a5a304 	addi	r2,r2,-26996
8110c4e4:	00c00044 	movi	r3,1
8110c4e8:	10c05a15 	stw	r3,360(r2)
	xComm6.xSpacewire.xLinkConfig.bAutostart = FALSE;
8110c4ec:	00a044f4 	movhi	r2,33043
8110c4f0:	10a53f04 	addi	r2,r2,-27396
8110c4f4:	10005815 	stw	zero,352(r2)
	xComm6.xSpacewire.xLinkConfig.bLinkStart = FALSE;
8110c4f8:	00a044f4 	movhi	r2,33043
8110c4fc:	10a53f04 	addi	r2,r2,-27396
8110c500:	10005915 	stw	zero,356(r2)
	xComm6.xSpacewire.xLinkConfig.bDisconnect = TRUE;
8110c504:	00a044f4 	movhi	r2,33043
8110c508:	10a53f04 	addi	r2,r2,-27396
8110c50c:	00c00044 	movi	r3,1
8110c510:	10c05a15 	stw	r3,360(r2)
	xComm7.xSpacewire.xLinkConfig.bAutostart = FALSE;
8110c514:	00a044f4 	movhi	r2,33043
8110c518:	10a66b04 	addi	r2,r2,-26196
8110c51c:	10005815 	stw	zero,352(r2)
	xComm7.xSpacewire.xLinkConfig.bLinkStart = FALSE;
8110c520:	00a044f4 	movhi	r2,33043
8110c524:	10a66b04 	addi	r2,r2,-26196
8110c528:	10005915 	stw	zero,356(r2)
	xComm7.xSpacewire.xLinkConfig.bDisconnect = TRUE;
8110c52c:	00a044f4 	movhi	r2,33043
8110c530:	10a66b04 	addi	r2,r2,-26196
8110c534:	00c00044 	movi	r3,1
8110c538:	10c05a15 	stw	r3,360(r2)
	xComm8.xSpacewire.xLinkConfig.bAutostart = FALSE;
8110c53c:	00a044f4 	movhi	r2,33043
8110c540:	10a6cf04 	addi	r2,r2,-25796
8110c544:	10005815 	stw	zero,352(r2)
	xComm8.xSpacewire.xLinkConfig.bLinkStart = FALSE;
8110c548:	00a044f4 	movhi	r2,33043
8110c54c:	10a6cf04 	addi	r2,r2,-25796
8110c550:	10005915 	stw	zero,356(r2)
	xComm8.xSpacewire.xLinkConfig.bDisconnect = TRUE;
8110c554:	00a044f4 	movhi	r2,33043
8110c558:	10a6cf04 	addi	r2,r2,-25796
8110c55c:	00c00044 	movi	r3,1
8110c560:	10c05a15 	stw	r3,360(r2)
	bSpwcSetLink(&xComm1.xSpacewire);
8110c564:	012044f4 	movhi	r4,33043
8110c568:	2124ce04 	addi	r4,r4,-27848
8110c56c:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm2.xSpacewire);
8110c570:	012044f4 	movhi	r4,33043
8110c574:	21253204 	addi	r4,r4,-27448
8110c578:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm3.xSpacewire);
8110c57c:	012044f4 	movhi	r4,33043
8110c580:	21265e04 	addi	r4,r4,-26248
8110c584:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm4.xSpacewire);
8110c588:	012044f4 	movhi	r4,33043
8110c58c:	21278a04 	addi	r4,r4,-25048
8110c590:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm5.xSpacewire);
8110c594:	012044f4 	movhi	r4,33043
8110c598:	2125fa04 	addi	r4,r4,-26648
8110c59c:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm6.xSpacewire);
8110c5a0:	012044f4 	movhi	r4,33043
8110c5a4:	21259604 	addi	r4,r4,-27048
8110c5a8:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm7.xSpacewire);
8110c5ac:	012044f4 	movhi	r4,33043
8110c5b0:	2126c204 	addi	r4,r4,-25848
8110c5b4:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm8.xSpacewire);
8110c5b8:	012044f4 	movhi	r4,33043
8110c5bc:	21272604 	addi	r4,r4,-25448
8110c5c0:	1108ffc0 	call	81108ffc <bSpwcSetLink>

	usleep(50000);
8110c5c4:	0130d414 	movui	r4,50000
8110c5c8:	1120f980 	call	81120f98 <usleep>
	usleep(1000000);
8110c5cc:	010003f4 	movhi	r4,15
8110c5d0:	21109004 	addi	r4,r4,16960
8110c5d4:	1120f980 	call	81120f98 <usleep>

	xComm1.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
8110c5d8:	00a044f4 	movhi	r2,33043
8110c5dc:	10a47704 	addi	r2,r2,-28196
8110c5e0:	00c00044 	movi	r3,1
8110c5e4:	10c00a15 	stw	r3,40(r2)
	xComm1.xSpacewire.xLinkConfig.bAutostart = TRUE;
8110c5e8:	00a044f4 	movhi	r2,33043
8110c5ec:	10a47704 	addi	r2,r2,-28196
8110c5f0:	00c00044 	movi	r3,1
8110c5f4:	10c05815 	stw	r3,352(r2)
	xComm1.xSpacewire.xLinkConfig.bLinkStart = TRUE;
8110c5f8:	00a044f4 	movhi	r2,33043
8110c5fc:	10a47704 	addi	r2,r2,-28196
8110c600:	00c00044 	movi	r3,1
8110c604:	10c05915 	stw	r3,356(r2)
	xComm1.xSpacewire.xLinkConfig.bDisconnect = FALSE;
8110c608:	00a044f4 	movhi	r2,33043
8110c60c:	10a47704 	addi	r2,r2,-28196
8110c610:	10005a15 	stw	zero,360(r2)
	xComm2.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
8110c614:	00a044f4 	movhi	r2,33043
8110c618:	10a4db04 	addi	r2,r2,-27796
8110c61c:	00c00044 	movi	r3,1
8110c620:	10c00a15 	stw	r3,40(r2)
	xComm2.xSpacewire.xLinkConfig.bAutostart = TRUE;
8110c624:	00a044f4 	movhi	r2,33043
8110c628:	10a4db04 	addi	r2,r2,-27796
8110c62c:	00c00044 	movi	r3,1
8110c630:	10c05815 	stw	r3,352(r2)
//	xComm2.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm2.xSpacewire.xLinkConfig.bDisconnect = FALSE;
8110c634:	00a044f4 	movhi	r2,33043
8110c638:	10a4db04 	addi	r2,r2,-27796
8110c63c:	10005a15 	stw	zero,360(r2)
	xComm3.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
8110c640:	00a044f4 	movhi	r2,33043
8110c644:	10a60704 	addi	r2,r2,-26596
8110c648:	00c00044 	movi	r3,1
8110c64c:	10c00a15 	stw	r3,40(r2)
	xComm3.xSpacewire.xLinkConfig.bAutostart = TRUE;
8110c650:	00a044f4 	movhi	r2,33043
8110c654:	10a60704 	addi	r2,r2,-26596
8110c658:	00c00044 	movi	r3,1
8110c65c:	10c05815 	stw	r3,352(r2)
//	xComm3.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm3.xSpacewire.xLinkConfig.bDisconnect = FALSE;
8110c660:	00a044f4 	movhi	r2,33043
8110c664:	10a60704 	addi	r2,r2,-26596
8110c668:	10005a15 	stw	zero,360(r2)
	xComm4.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
8110c66c:	00a044f4 	movhi	r2,33043
8110c670:	10a73304 	addi	r2,r2,-25396
8110c674:	00c00044 	movi	r3,1
8110c678:	10c00a15 	stw	r3,40(r2)
	xComm4.xSpacewire.xLinkConfig.bAutostart = TRUE;
8110c67c:	00a044f4 	movhi	r2,33043
8110c680:	10a73304 	addi	r2,r2,-25396
8110c684:	00c00044 	movi	r3,1
8110c688:	10c05815 	stw	r3,352(r2)
//	xComm4.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm4.xSpacewire.xLinkConfig.bDisconnect = FALSE;
8110c68c:	00a044f4 	movhi	r2,33043
8110c690:	10a73304 	addi	r2,r2,-25396
8110c694:	10005a15 	stw	zero,360(r2)
	xComm5.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
8110c698:	00a044f4 	movhi	r2,33043
8110c69c:	10a5a304 	addi	r2,r2,-26996
8110c6a0:	00c00044 	movi	r3,1
8110c6a4:	10c00a15 	stw	r3,40(r2)
	xComm5.xSpacewire.xLinkConfig.bAutostart = TRUE;
8110c6a8:	00a044f4 	movhi	r2,33043
8110c6ac:	10a5a304 	addi	r2,r2,-26996
8110c6b0:	00c00044 	movi	r3,1
8110c6b4:	10c05815 	stw	r3,352(r2)
//	xComm5.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm5.xSpacewire.xLinkConfig.bDisconnect = FALSE;
8110c6b8:	00a044f4 	movhi	r2,33043
8110c6bc:	10a5a304 	addi	r2,r2,-26996
8110c6c0:	10005a15 	stw	zero,360(r2)
	xComm6.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
8110c6c4:	00a044f4 	movhi	r2,33043
8110c6c8:	10a53f04 	addi	r2,r2,-27396
8110c6cc:	00c00044 	movi	r3,1
8110c6d0:	10c00a15 	stw	r3,40(r2)
	xComm6.xSpacewire.xLinkConfig.bAutostart = TRUE;
8110c6d4:	00a044f4 	movhi	r2,33043
8110c6d8:	10a53f04 	addi	r2,r2,-27396
8110c6dc:	00c00044 	movi	r3,1
8110c6e0:	10c05815 	stw	r3,352(r2)
//	xComm6.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm6.xSpacewire.xLinkConfig.bDisconnect = FALSE;
8110c6e4:	00a044f4 	movhi	r2,33043
8110c6e8:	10a53f04 	addi	r2,r2,-27396
8110c6ec:	10005a15 	stw	zero,360(r2)
	xComm7.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
8110c6f0:	00a044f4 	movhi	r2,33043
8110c6f4:	10a66b04 	addi	r2,r2,-26196
8110c6f8:	00c00044 	movi	r3,1
8110c6fc:	10c00a15 	stw	r3,40(r2)
	xComm7.xSpacewire.xLinkConfig.bAutostart = TRUE;
8110c700:	00a044f4 	movhi	r2,33043
8110c704:	10a66b04 	addi	r2,r2,-26196
8110c708:	00c00044 	movi	r3,1
8110c70c:	10c05815 	stw	r3,352(r2)
//	xComm7.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm7.xSpacewire.xLinkConfig.bDisconnect = FALSE;
8110c710:	00a044f4 	movhi	r2,33043
8110c714:	10a66b04 	addi	r2,r2,-26196
8110c718:	10005a15 	stw	zero,360(r2)
	xComm8.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
8110c71c:	00a044f4 	movhi	r2,33043
8110c720:	10a6cf04 	addi	r2,r2,-25796
8110c724:	00c00044 	movi	r3,1
8110c728:	10c00a15 	stw	r3,40(r2)
	xComm8.xSpacewire.xLinkConfig.bAutostart = TRUE;
8110c72c:	00a044f4 	movhi	r2,33043
8110c730:	10a6cf04 	addi	r2,r2,-25796
8110c734:	00c00044 	movi	r3,1
8110c738:	10c05815 	stw	r3,352(r2)
//	xComm8.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm8.xSpacewire.xLinkConfig.bDisconnect = FALSE;
8110c73c:	00a044f4 	movhi	r2,33043
8110c740:	10a6cf04 	addi	r2,r2,-25796
8110c744:	10005a15 	stw	zero,360(r2)
	bFeebSetWindowing(&xComm1.xFeeBuffer);
8110c748:	012044f4 	movhi	r4,33043
8110c74c:	21248004 	addi	r4,r4,-28160
8110c750:	1105d000 	call	81105d00 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm2.xFeeBuffer);
8110c754:	012044f4 	movhi	r4,33043
8110c758:	2124e404 	addi	r4,r4,-27760
8110c75c:	1105d000 	call	81105d00 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm3.xFeeBuffer);
8110c760:	012044f4 	movhi	r4,33043
8110c764:	21261004 	addi	r4,r4,-26560
8110c768:	1105d000 	call	81105d00 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm4.xFeeBuffer);
8110c76c:	012044f4 	movhi	r4,33043
8110c770:	21273c04 	addi	r4,r4,-25360
8110c774:	1105d000 	call	81105d00 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm5.xFeeBuffer);
8110c778:	012044f4 	movhi	r4,33043
8110c77c:	2125ac04 	addi	r4,r4,-26960
8110c780:	1105d000 	call	81105d00 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm6.xFeeBuffer);
8110c784:	012044f4 	movhi	r4,33043
8110c788:	21254804 	addi	r4,r4,-27360
8110c78c:	1105d000 	call	81105d00 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm7.xFeeBuffer);
8110c790:	012044f4 	movhi	r4,33043
8110c794:	21267404 	addi	r4,r4,-26160
8110c798:	1105d000 	call	81105d00 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm8.xFeeBuffer);
8110c79c:	012044f4 	movhi	r4,33043
8110c7a0:	2126d804 	addi	r4,r4,-25760
8110c7a4:	1105d000 	call	81105d00 <bFeebSetWindowing>
	bSpwcSetLink(&xComm1.xSpacewire);
8110c7a8:	012044f4 	movhi	r4,33043
8110c7ac:	2124ce04 	addi	r4,r4,-27848
8110c7b0:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm2.xSpacewire);
8110c7b4:	012044f4 	movhi	r4,33043
8110c7b8:	21253204 	addi	r4,r4,-27448
8110c7bc:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm3.xSpacewire);
8110c7c0:	012044f4 	movhi	r4,33043
8110c7c4:	21265e04 	addi	r4,r4,-26248
8110c7c8:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm4.xSpacewire);
8110c7cc:	012044f4 	movhi	r4,33043
8110c7d0:	21278a04 	addi	r4,r4,-25048
8110c7d4:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm5.xSpacewire);
8110c7d8:	012044f4 	movhi	r4,33043
8110c7dc:	2125fa04 	addi	r4,r4,-26648
8110c7e0:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm6.xSpacewire);
8110c7e4:	012044f4 	movhi	r4,33043
8110c7e8:	21259604 	addi	r4,r4,-27048
8110c7ec:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm7.xSpacewire);
8110c7f0:	012044f4 	movhi	r4,33043
8110c7f4:	2126c204 	addi	r4,r4,-25848
8110c7f8:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm8.xSpacewire);
8110c7fc:	012044f4 	movhi	r4,33043
8110c800:	21272604 	addi	r4,r4,-25448
8110c804:	1108ffc0 	call	81108ffc <bSpwcSetLink>
//	bSpwcSetLink(&xComm8);
//
//	bSpwcGetLink(&xComm8);
//	printf("empty r: %u \n", xComm8.xLinkConfig.bAutostart);

	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110c808:	01400074 	movhi	r5,1
8110c80c:	01000044 	movi	r4,1
8110c810:	1109fd80 	call	81109fd8 <bSetPainelLeds>

	bSetPainelLeds(LEDS_OFF, LEDS_1G_MASK);
8110c814:	01400044 	movi	r5,1
8110c818:	0009883a 	mov	r4,zero
8110c81c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_1R_MASK);
8110c820:	01400084 	movi	r5,2
8110c824:	01000044 	movi	r4,1
8110c828:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_2G_MASK);
8110c82c:	01400104 	movi	r5,4
8110c830:	0009883a 	mov	r4,zero
8110c834:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_2R_MASK);
8110c838:	01400204 	movi	r5,8
8110c83c:	01000044 	movi	r4,1
8110c840:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_3G_MASK);
8110c844:	01400404 	movi	r5,16
8110c848:	0009883a 	mov	r4,zero
8110c84c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_3R_MASK);
8110c850:	01400804 	movi	r5,32
8110c854:	01000044 	movi	r4,1
8110c858:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_4G_MASK);
8110c85c:	01401004 	movi	r5,64
8110c860:	0009883a 	mov	r4,zero
8110c864:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_4R_MASK);
8110c868:	01402004 	movi	r5,128
8110c86c:	01000044 	movi	r4,1
8110c870:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_5G_MASK);
8110c874:	01404004 	movi	r5,256
8110c878:	0009883a 	mov	r4,zero
8110c87c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_5R_MASK);
8110c880:	01408004 	movi	r5,512
8110c884:	01000044 	movi	r4,1
8110c888:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_6G_MASK);
8110c88c:	01410004 	movi	r5,1024
8110c890:	0009883a 	mov	r4,zero
8110c894:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_6R_MASK);
8110c898:	01420004 	movi	r5,2048
8110c89c:	01000044 	movi	r4,1
8110c8a0:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_7G_MASK);
8110c8a4:	01440004 	movi	r5,4096
8110c8a8:	0009883a 	mov	r4,zero
8110c8ac:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_7R_MASK);
8110c8b0:	01480004 	movi	r5,8192
8110c8b4:	01000044 	movi	r4,1
8110c8b8:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_8G_MASK);
8110c8bc:	01500004 	movi	r5,16384
8110c8c0:	0009883a 	mov	r4,zero
8110c8c4:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
8110c8c8:	01600014 	movui	r5,32768
8110c8cc:	01000044 	movi	r4,1
8110c8d0:	1109fd80 	call	81109fd8 <bSetPainelLeds>

//	bSetPainelLeds(LEDS_ON, LEDS_ST_ALL_MASK);
	bSetPainelLeds(LEDS_ON, LEDS_ST_1_MASK);
8110c8d4:	014000b4 	movhi	r5,2
8110c8d8:	01000044 	movi	r4,1
8110c8dc:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_ST_3_MASK);
8110c8e0:	01400234 	movhi	r5,8
8110c8e4:	01000044 	movi	r4,1
8110c8e8:	1109fd80 	call	81109fd8 <bSetPainelLeds>
//
//	printf("esperando \n");
////	getchar();
//	printf("foi \n");

	bDdr2SwitchMemory(DDR2_M1_ID);
8110c8ec:	0009883a 	mov	r4,zero
8110c8f0:	110142c0 	call	8110142c <bDdr2SwitchMemory>
	alt_u32 uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110c8f4:	e03ffc15 	stw	zero,-16(fp)

// buffer: 2176 B -> 544 dwords

//	int iDataCounter = 0;

	TSdmaBufferDataBlock *pxBufferDataM1 = (TSdmaBufferDataBlock *) uliDdr2Base;
8110c8f8:	e0bffc17 	ldw	r2,-16(fp)
8110c8fc:	e0bffd15 	stw	r2,-12(fp)

	pxBufferDataM1->xPixelDataBlock[0].usiPixel[0] = 0x0100;
8110c900:	e0bffd17 	ldw	r2,-12(fp)
8110c904:	00c04004 	movi	r3,256
8110c908:	10c0000d 	sth	r3,0(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[1] = 0x0302;
8110c90c:	e0bffd17 	ldw	r2,-12(fp)
8110c910:	00c0c084 	movi	r3,770
8110c914:	10c0008d 	sth	r3,2(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[2] = 0x0504;
8110c918:	e0bffd17 	ldw	r2,-12(fp)
8110c91c:	00c14104 	movi	r3,1284
8110c920:	10c0010d 	sth	r3,4(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[3] = 0x0706;
8110c924:	e0bffd17 	ldw	r2,-12(fp)
8110c928:	00c1c184 	movi	r3,1798
8110c92c:	10c0018d 	sth	r3,6(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[4] = 0x0908;
8110c930:	e0bffd17 	ldw	r2,-12(fp)
8110c934:	00c24204 	movi	r3,2312
8110c938:	10c0020d 	sth	r3,8(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[5] = 0x0B0A;
8110c93c:	e0bffd17 	ldw	r2,-12(fp)
8110c940:	00c2c284 	movi	r3,2826
8110c944:	10c0028d 	sth	r3,10(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[6] = 0x0D0C;
8110c948:	e0bffd17 	ldw	r2,-12(fp)
8110c94c:	00c34304 	movi	r3,3340
8110c950:	10c0030d 	sth	r3,12(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[7] = 0x0F0E;
8110c954:	e0bffd17 	ldw	r2,-12(fp)
8110c958:	00c3c384 	movi	r3,3854
8110c95c:	10c0038d 	sth	r3,14(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[8] = 0x1110;
8110c960:	e0bffd17 	ldw	r2,-12(fp)
8110c964:	00c44404 	movi	r3,4368
8110c968:	10c0040d 	sth	r3,16(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[9] = 0x1312;
8110c96c:	e0bffd17 	ldw	r2,-12(fp)
8110c970:	00c4c484 	movi	r3,4882
8110c974:	10c0048d 	sth	r3,18(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[10] = 0x1514;
8110c978:	e0bffd17 	ldw	r2,-12(fp)
8110c97c:	00c54504 	movi	r3,5396
8110c980:	10c0050d 	sth	r3,20(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[11] = 0x1716;
8110c984:	e0bffd17 	ldw	r2,-12(fp)
8110c988:	00c5c584 	movi	r3,5910
8110c98c:	10c0058d 	sth	r3,22(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[12] = 0x1918;
8110c990:	e0bffd17 	ldw	r2,-12(fp)
8110c994:	00c64604 	movi	r3,6424
8110c998:	10c0060d 	sth	r3,24(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[13] = 0x1B1A;
8110c99c:	e0bffd17 	ldw	r2,-12(fp)
8110c9a0:	00c6c684 	movi	r3,6938
8110c9a4:	10c0068d 	sth	r3,26(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[14] = 0x1D1C;
8110c9a8:	e0bffd17 	ldw	r2,-12(fp)
8110c9ac:	00c74704 	movi	r3,7452
8110c9b0:	10c0070d 	sth	r3,28(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[15] = 0x1F1E;
8110c9b4:	e0bffd17 	ldw	r2,-12(fp)
8110c9b8:	00c7c784 	movi	r3,7966
8110c9bc:	10c0078d 	sth	r3,30(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[16] = 0x2120;
8110c9c0:	e0bffd17 	ldw	r2,-12(fp)
8110c9c4:	00c84804 	movi	r3,8480
8110c9c8:	10c0080d 	sth	r3,32(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[17] = 0x2322;
8110c9cc:	e0bffd17 	ldw	r2,-12(fp)
8110c9d0:	00c8c884 	movi	r3,8994
8110c9d4:	10c0088d 	sth	r3,34(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[18] = 0x2524;
8110c9d8:	e0bffd17 	ldw	r2,-12(fp)
8110c9dc:	00c94904 	movi	r3,9508
8110c9e0:	10c0090d 	sth	r3,36(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[19] = 0x2726;
8110c9e4:	e0bffd17 	ldw	r2,-12(fp)
8110c9e8:	00c9c984 	movi	r3,10022
8110c9ec:	10c0098d 	sth	r3,38(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[20] = 0x2928;
8110c9f0:	e0bffd17 	ldw	r2,-12(fp)
8110c9f4:	00ca4a04 	movi	r3,10536
8110c9f8:	10c00a0d 	sth	r3,40(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[21] = 0x2B2A;
8110c9fc:	e0bffd17 	ldw	r2,-12(fp)
8110ca00:	00caca84 	movi	r3,11050
8110ca04:	10c00a8d 	sth	r3,42(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[22] = 0x2D2C;
8110ca08:	e0bffd17 	ldw	r2,-12(fp)
8110ca0c:	00cb4b04 	movi	r3,11564
8110ca10:	10c00b0d 	sth	r3,44(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[23] = 0x2F2E;
8110ca14:	e0bffd17 	ldw	r2,-12(fp)
8110ca18:	00cbcb84 	movi	r3,12078
8110ca1c:	10c00b8d 	sth	r3,46(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[24] = 0x3130;
8110ca20:	e0bffd17 	ldw	r2,-12(fp)
8110ca24:	00cc4c04 	movi	r3,12592
8110ca28:	10c00c0d 	sth	r3,48(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[25] = 0x3332;
8110ca2c:	e0bffd17 	ldw	r2,-12(fp)
8110ca30:	00cccc84 	movi	r3,13106
8110ca34:	10c00c8d 	sth	r3,50(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[26] = 0x3534;
8110ca38:	e0bffd17 	ldw	r2,-12(fp)
8110ca3c:	00cd4d04 	movi	r3,13620
8110ca40:	10c00d0d 	sth	r3,52(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[27] = 0x3736;
8110ca44:	e0bffd17 	ldw	r2,-12(fp)
8110ca48:	00cdcd84 	movi	r3,14134
8110ca4c:	10c00d8d 	sth	r3,54(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[28] = 0x3938;
8110ca50:	e0bffd17 	ldw	r2,-12(fp)
8110ca54:	00ce4e04 	movi	r3,14648
8110ca58:	10c00e0d 	sth	r3,56(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[29] = 0x3B3A;
8110ca5c:	e0bffd17 	ldw	r2,-12(fp)
8110ca60:	00cece84 	movi	r3,15162
8110ca64:	10c00e8d 	sth	r3,58(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[30] = 0x3D3C;
8110ca68:	e0bffd17 	ldw	r2,-12(fp)
8110ca6c:	00cf4f04 	movi	r3,15676
8110ca70:	10c00f0d 	sth	r3,60(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[31] = 0x3F3E;
8110ca74:	e0bffd17 	ldw	r2,-12(fp)
8110ca78:	00cfcf84 	movi	r3,16190
8110ca7c:	10c00f8d 	sth	r3,62(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[32] = 0x4140;
8110ca80:	e0bffd17 	ldw	r2,-12(fp)
8110ca84:	00d05004 	movi	r3,16704
8110ca88:	10c0100d 	sth	r3,64(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[33] = 0x4342;
8110ca8c:	e0bffd17 	ldw	r2,-12(fp)
8110ca90:	00d0d084 	movi	r3,17218
8110ca94:	10c0108d 	sth	r3,66(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[34] = 0x4544;
8110ca98:	e0bffd17 	ldw	r2,-12(fp)
8110ca9c:	00d15104 	movi	r3,17732
8110caa0:	10c0110d 	sth	r3,68(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[35] = 0x4746;
8110caa4:	e0bffd17 	ldw	r2,-12(fp)
8110caa8:	00d1d184 	movi	r3,18246
8110caac:	10c0118d 	sth	r3,70(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[36] = 0x4948;
8110cab0:	e0bffd17 	ldw	r2,-12(fp)
8110cab4:	00d25204 	movi	r3,18760
8110cab8:	10c0120d 	sth	r3,72(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[37] = 0x4B4A;
8110cabc:	e0bffd17 	ldw	r2,-12(fp)
8110cac0:	00d2d284 	movi	r3,19274
8110cac4:	10c0128d 	sth	r3,74(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[38] = 0x4D4C;
8110cac8:	e0bffd17 	ldw	r2,-12(fp)
8110cacc:	00d35304 	movi	r3,19788
8110cad0:	10c0130d 	sth	r3,76(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[39] = 0x4F4E;
8110cad4:	e0bffd17 	ldw	r2,-12(fp)
8110cad8:	00d3d384 	movi	r3,20302
8110cadc:	10c0138d 	sth	r3,78(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[40] = 0x5150;
8110cae0:	e0bffd17 	ldw	r2,-12(fp)
8110cae4:	00d45404 	movi	r3,20816
8110cae8:	10c0140d 	sth	r3,80(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[41] = 0x5352;
8110caec:	e0bffd17 	ldw	r2,-12(fp)
8110caf0:	00d4d484 	movi	r3,21330
8110caf4:	10c0148d 	sth	r3,82(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[42] = 0x5554;
8110caf8:	e0bffd17 	ldw	r2,-12(fp)
8110cafc:	00d55504 	movi	r3,21844
8110cb00:	10c0150d 	sth	r3,84(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[43] = 0x5756;
8110cb04:	e0bffd17 	ldw	r2,-12(fp)
8110cb08:	00d5d584 	movi	r3,22358
8110cb0c:	10c0158d 	sth	r3,86(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[44] = 0x5958;
8110cb10:	e0bffd17 	ldw	r2,-12(fp)
8110cb14:	00d65604 	movi	r3,22872
8110cb18:	10c0160d 	sth	r3,88(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[45] = 0x5B5A;
8110cb1c:	e0bffd17 	ldw	r2,-12(fp)
8110cb20:	00d6d684 	movi	r3,23386
8110cb24:	10c0168d 	sth	r3,90(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[46] = 0x5D5C;
8110cb28:	e0bffd17 	ldw	r2,-12(fp)
8110cb2c:	00d75704 	movi	r3,23900
8110cb30:	10c0170d 	sth	r3,92(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[47] = 0x5F5E;
8110cb34:	e0bffd17 	ldw	r2,-12(fp)
8110cb38:	00d7d784 	movi	r3,24414
8110cb3c:	10c0178d 	sth	r3,94(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[48] = 0x6160;
8110cb40:	e0bffd17 	ldw	r2,-12(fp)
8110cb44:	00d85804 	movi	r3,24928
8110cb48:	10c0180d 	sth	r3,96(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[49] = 0x6362;
8110cb4c:	e0bffd17 	ldw	r2,-12(fp)
8110cb50:	00d8d884 	movi	r3,25442
8110cb54:	10c0188d 	sth	r3,98(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[50] = 0x6564;
8110cb58:	e0bffd17 	ldw	r2,-12(fp)
8110cb5c:	00d95904 	movi	r3,25956
8110cb60:	10c0190d 	sth	r3,100(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[51] = 0x6766;
8110cb64:	e0bffd17 	ldw	r2,-12(fp)
8110cb68:	00d9d984 	movi	r3,26470
8110cb6c:	10c0198d 	sth	r3,102(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[52] = 0x6968;
8110cb70:	e0bffd17 	ldw	r2,-12(fp)
8110cb74:	00da5a04 	movi	r3,26984
8110cb78:	10c01a0d 	sth	r3,104(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[53] = 0x6B6A;
8110cb7c:	e0bffd17 	ldw	r2,-12(fp)
8110cb80:	00dada84 	movi	r3,27498
8110cb84:	10c01a8d 	sth	r3,106(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[54] = 0x6D6C;
8110cb88:	e0bffd17 	ldw	r2,-12(fp)
8110cb8c:	00db5b04 	movi	r3,28012
8110cb90:	10c01b0d 	sth	r3,108(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[55] = 0x6F6E;
8110cb94:	e0bffd17 	ldw	r2,-12(fp)
8110cb98:	00dbdb84 	movi	r3,28526
8110cb9c:	10c01b8d 	sth	r3,110(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[56] = 0x7170;
8110cba0:	e0bffd17 	ldw	r2,-12(fp)
8110cba4:	00dc5c04 	movi	r3,29040
8110cba8:	10c01c0d 	sth	r3,112(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[57] = 0x7372;
8110cbac:	e0bffd17 	ldw	r2,-12(fp)
8110cbb0:	00dcdc84 	movi	r3,29554
8110cbb4:	10c01c8d 	sth	r3,114(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[58] = 0x7574;
8110cbb8:	e0bffd17 	ldw	r2,-12(fp)
8110cbbc:	00dd5d04 	movi	r3,30068
8110cbc0:	10c01d0d 	sth	r3,116(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[59] = 0x7776;
8110cbc4:	e0bffd17 	ldw	r2,-12(fp)
8110cbc8:	00dddd84 	movi	r3,30582
8110cbcc:	10c01d8d 	sth	r3,118(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[60] = 0x7978;
8110cbd0:	e0bffd17 	ldw	r2,-12(fp)
8110cbd4:	00de5e04 	movi	r3,31096
8110cbd8:	10c01e0d 	sth	r3,120(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[61] = 0x7B7A;
8110cbdc:	e0bffd17 	ldw	r2,-12(fp)
8110cbe0:	00dede84 	movi	r3,31610
8110cbe4:	10c01e8d 	sth	r3,122(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[62] = 0x7D7C;
8110cbe8:	e0bffd17 	ldw	r2,-12(fp)
8110cbec:	00df5f04 	movi	r3,32124
8110cbf0:	10c01f0d 	sth	r3,124(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[63] = 0x7F7E;
8110cbf4:	e0bffd17 	ldw	r2,-12(fp)
8110cbf8:	00dfdf84 	movi	r3,32638
8110cbfc:	10c01f8d 	sth	r3,126(r2)
	pxBufferDataM1->xPixelDataBlock[0].ulliMask = 0xFFFFFFFFFFFFFFFF;
8110cc00:	e0bffd17 	ldw	r2,-12(fp)
8110cc04:	00ffffc4 	movi	r3,-1
8110cc08:	10c02015 	stw	r3,128(r2)
8110cc0c:	00ffffc4 	movi	r3,-1
8110cc10:	10c02115 	stw	r3,132(r2)

	pxBufferDataM1->xPixelDataBlock[1].usiPixel[0] = 0x8180;
8110cc14:	e0bffd17 	ldw	r2,-12(fp)
8110cc18:	00e06004 	movi	r3,-32384
8110cc1c:	10c0220d 	sth	r3,136(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[1] = 0x8382;
8110cc20:	e0bffd17 	ldw	r2,-12(fp)
8110cc24:	00e0e084 	movi	r3,-31870
8110cc28:	10c0228d 	sth	r3,138(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[2] = 0x8584;
8110cc2c:	e0bffd17 	ldw	r2,-12(fp)
8110cc30:	00e16104 	movi	r3,-31356
8110cc34:	10c0230d 	sth	r3,140(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[3] = 0x8786;
8110cc38:	e0bffd17 	ldw	r2,-12(fp)
8110cc3c:	00e1e184 	movi	r3,-30842
8110cc40:	10c0238d 	sth	r3,142(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[4] = 0x8988;
8110cc44:	e0bffd17 	ldw	r2,-12(fp)
8110cc48:	00e26204 	movi	r3,-30328
8110cc4c:	10c0240d 	sth	r3,144(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[5] = 0x8B8A;
8110cc50:	e0bffd17 	ldw	r2,-12(fp)
8110cc54:	00e2e284 	movi	r3,-29814
8110cc58:	10c0248d 	sth	r3,146(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[6] = 0x8D8C;
8110cc5c:	e0bffd17 	ldw	r2,-12(fp)
8110cc60:	00e36304 	movi	r3,-29300
8110cc64:	10c0250d 	sth	r3,148(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[7] = 0x8F8E;
8110cc68:	e0bffd17 	ldw	r2,-12(fp)
8110cc6c:	00e3e384 	movi	r3,-28786
8110cc70:	10c0258d 	sth	r3,150(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[8] = 0x9190;
8110cc74:	e0bffd17 	ldw	r2,-12(fp)
8110cc78:	00e46404 	movi	r3,-28272
8110cc7c:	10c0260d 	sth	r3,152(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[9] = 0x9392;
8110cc80:	e0bffd17 	ldw	r2,-12(fp)
8110cc84:	00e4e484 	movi	r3,-27758
8110cc88:	10c0268d 	sth	r3,154(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[10] = 0x9594;
8110cc8c:	e0bffd17 	ldw	r2,-12(fp)
8110cc90:	00e56504 	movi	r3,-27244
8110cc94:	10c0270d 	sth	r3,156(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[11] = 0x9796;
8110cc98:	e0bffd17 	ldw	r2,-12(fp)
8110cc9c:	00e5e584 	movi	r3,-26730
8110cca0:	10c0278d 	sth	r3,158(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[12] = 0x9998;
8110cca4:	e0bffd17 	ldw	r2,-12(fp)
8110cca8:	00e66604 	movi	r3,-26216
8110ccac:	10c0280d 	sth	r3,160(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[13] = 0x9B9A;
8110ccb0:	e0bffd17 	ldw	r2,-12(fp)
8110ccb4:	00e6e684 	movi	r3,-25702
8110ccb8:	10c0288d 	sth	r3,162(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[14] = 0x9D9C;
8110ccbc:	e0bffd17 	ldw	r2,-12(fp)
8110ccc0:	00e76704 	movi	r3,-25188
8110ccc4:	10c0290d 	sth	r3,164(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[15] = 0x9F9E;
8110ccc8:	e0bffd17 	ldw	r2,-12(fp)
8110cccc:	00e7e784 	movi	r3,-24674
8110ccd0:	10c0298d 	sth	r3,166(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[16] = 0xA1A0;
8110ccd4:	e0bffd17 	ldw	r2,-12(fp)
8110ccd8:	00e86804 	movi	r3,-24160
8110ccdc:	10c02a0d 	sth	r3,168(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[17] = 0xA3A2;
8110cce0:	e0bffd17 	ldw	r2,-12(fp)
8110cce4:	00e8e884 	movi	r3,-23646
8110cce8:	10c02a8d 	sth	r3,170(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[18] = 0xA5A4;
8110ccec:	e0bffd17 	ldw	r2,-12(fp)
8110ccf0:	00e96904 	movi	r3,-23132
8110ccf4:	10c02b0d 	sth	r3,172(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[19] = 0xA7A6;
8110ccf8:	e0bffd17 	ldw	r2,-12(fp)
8110ccfc:	00e9e984 	movi	r3,-22618
8110cd00:	10c02b8d 	sth	r3,174(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[20] = 0xA9A8;
8110cd04:	e0bffd17 	ldw	r2,-12(fp)
8110cd08:	00ea6a04 	movi	r3,-22104
8110cd0c:	10c02c0d 	sth	r3,176(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[21] = 0xABAA;
8110cd10:	e0bffd17 	ldw	r2,-12(fp)
8110cd14:	00eaea84 	movi	r3,-21590
8110cd18:	10c02c8d 	sth	r3,178(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[22] = 0xADAC;
8110cd1c:	e0bffd17 	ldw	r2,-12(fp)
8110cd20:	00eb6b04 	movi	r3,-21076
8110cd24:	10c02d0d 	sth	r3,180(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[23] = 0xAFAE;
8110cd28:	e0bffd17 	ldw	r2,-12(fp)
8110cd2c:	00ebeb84 	movi	r3,-20562
8110cd30:	10c02d8d 	sth	r3,182(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[24] = 0xB1B0;
8110cd34:	e0bffd17 	ldw	r2,-12(fp)
8110cd38:	00ec6c04 	movi	r3,-20048
8110cd3c:	10c02e0d 	sth	r3,184(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[25] = 0xB3B2;
8110cd40:	e0bffd17 	ldw	r2,-12(fp)
8110cd44:	00ecec84 	movi	r3,-19534
8110cd48:	10c02e8d 	sth	r3,186(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[26] = 0xB5B4;
8110cd4c:	e0bffd17 	ldw	r2,-12(fp)
8110cd50:	00ed6d04 	movi	r3,-19020
8110cd54:	10c02f0d 	sth	r3,188(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[27] = 0xB7B6;
8110cd58:	e0bffd17 	ldw	r2,-12(fp)
8110cd5c:	00eded84 	movi	r3,-18506
8110cd60:	10c02f8d 	sth	r3,190(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[28] = 0xB9B8;
8110cd64:	e0bffd17 	ldw	r2,-12(fp)
8110cd68:	00ee6e04 	movi	r3,-17992
8110cd6c:	10c0300d 	sth	r3,192(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[29] = 0xBBBA;
8110cd70:	e0bffd17 	ldw	r2,-12(fp)
8110cd74:	00eeee84 	movi	r3,-17478
8110cd78:	10c0308d 	sth	r3,194(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[30] = 0xBDBC;
8110cd7c:	e0bffd17 	ldw	r2,-12(fp)
8110cd80:	00ef6f04 	movi	r3,-16964
8110cd84:	10c0310d 	sth	r3,196(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[31] = 0xBFBE;
8110cd88:	e0bffd17 	ldw	r2,-12(fp)
8110cd8c:	00efef84 	movi	r3,-16450
8110cd90:	10c0318d 	sth	r3,198(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[32] = 0xC1C0;
8110cd94:	e0bffd17 	ldw	r2,-12(fp)
8110cd98:	00f07004 	movi	r3,-15936
8110cd9c:	10c0320d 	sth	r3,200(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[33] = 0xC3C2;
8110cda0:	e0bffd17 	ldw	r2,-12(fp)
8110cda4:	00f0f084 	movi	r3,-15422
8110cda8:	10c0328d 	sth	r3,202(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[34] = 0xC5C4;
8110cdac:	e0bffd17 	ldw	r2,-12(fp)
8110cdb0:	00f17104 	movi	r3,-14908
8110cdb4:	10c0330d 	sth	r3,204(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[35] = 0xC7C6;
8110cdb8:	e0bffd17 	ldw	r2,-12(fp)
8110cdbc:	00f1f184 	movi	r3,-14394
8110cdc0:	10c0338d 	sth	r3,206(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[36] = 0xC9C8;
8110cdc4:	e0bffd17 	ldw	r2,-12(fp)
8110cdc8:	00f27204 	movi	r3,-13880
8110cdcc:	10c0340d 	sth	r3,208(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[37] = 0xCBCA;
8110cdd0:	e0bffd17 	ldw	r2,-12(fp)
8110cdd4:	00f2f284 	movi	r3,-13366
8110cdd8:	10c0348d 	sth	r3,210(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[38] = 0xCDCC;
8110cddc:	e0bffd17 	ldw	r2,-12(fp)
8110cde0:	00f37304 	movi	r3,-12852
8110cde4:	10c0350d 	sth	r3,212(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[39] = 0xCFCE;
8110cde8:	e0bffd17 	ldw	r2,-12(fp)
8110cdec:	00f3f384 	movi	r3,-12338
8110cdf0:	10c0358d 	sth	r3,214(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[40] = 0xD1D0;
8110cdf4:	e0bffd17 	ldw	r2,-12(fp)
8110cdf8:	00f47404 	movi	r3,-11824
8110cdfc:	10c0360d 	sth	r3,216(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[41] = 0xD3D2;
8110ce00:	e0bffd17 	ldw	r2,-12(fp)
8110ce04:	00f4f484 	movi	r3,-11310
8110ce08:	10c0368d 	sth	r3,218(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[42] = 0xD5D4;
8110ce0c:	e0bffd17 	ldw	r2,-12(fp)
8110ce10:	00f57504 	movi	r3,-10796
8110ce14:	10c0370d 	sth	r3,220(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[43] = 0xD7D6;
8110ce18:	e0bffd17 	ldw	r2,-12(fp)
8110ce1c:	00f5f584 	movi	r3,-10282
8110ce20:	10c0378d 	sth	r3,222(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[44] = 0xD9D8;
8110ce24:	e0bffd17 	ldw	r2,-12(fp)
8110ce28:	00f67604 	movi	r3,-9768
8110ce2c:	10c0380d 	sth	r3,224(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[45] = 0xDBDA;
8110ce30:	e0bffd17 	ldw	r2,-12(fp)
8110ce34:	00f6f684 	movi	r3,-9254
8110ce38:	10c0388d 	sth	r3,226(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[46] = 0xDDDC;
8110ce3c:	e0bffd17 	ldw	r2,-12(fp)
8110ce40:	00f77704 	movi	r3,-8740
8110ce44:	10c0390d 	sth	r3,228(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[47] = 0xDFDE;
8110ce48:	e0bffd17 	ldw	r2,-12(fp)
8110ce4c:	00f7f784 	movi	r3,-8226
8110ce50:	10c0398d 	sth	r3,230(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[48] = 0xE1E0;
8110ce54:	e0bffd17 	ldw	r2,-12(fp)
8110ce58:	00f87804 	movi	r3,-7712
8110ce5c:	10c03a0d 	sth	r3,232(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[49] = 0xE3E2;
8110ce60:	e0bffd17 	ldw	r2,-12(fp)
8110ce64:	00f8f884 	movi	r3,-7198
8110ce68:	10c03a8d 	sth	r3,234(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[50] = 0xE5E4;
8110ce6c:	e0bffd17 	ldw	r2,-12(fp)
8110ce70:	00f97904 	movi	r3,-6684
8110ce74:	10c03b0d 	sth	r3,236(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[51] = 0xE7E6;
8110ce78:	e0bffd17 	ldw	r2,-12(fp)
8110ce7c:	00f9f984 	movi	r3,-6170
8110ce80:	10c03b8d 	sth	r3,238(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[52] = 0xE9E8;
8110ce84:	e0bffd17 	ldw	r2,-12(fp)
8110ce88:	00fa7a04 	movi	r3,-5656
8110ce8c:	10c03c0d 	sth	r3,240(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[53] = 0xEBEA;
8110ce90:	e0bffd17 	ldw	r2,-12(fp)
8110ce94:	00fafa84 	movi	r3,-5142
8110ce98:	10c03c8d 	sth	r3,242(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[54] = 0xEDEC;
8110ce9c:	e0bffd17 	ldw	r2,-12(fp)
8110cea0:	00fb7b04 	movi	r3,-4628
8110cea4:	10c03d0d 	sth	r3,244(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[55] = 0xEFEE;
8110cea8:	e0bffd17 	ldw	r2,-12(fp)
8110ceac:	00fbfb84 	movi	r3,-4114
8110ceb0:	10c03d8d 	sth	r3,246(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[56] = 0xF1F0;
8110ceb4:	e0bffd17 	ldw	r2,-12(fp)
8110ceb8:	00fc7c04 	movi	r3,-3600
8110cebc:	10c03e0d 	sth	r3,248(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[57] = 0xF3F2;
8110cec0:	e0bffd17 	ldw	r2,-12(fp)
8110cec4:	00fcfc84 	movi	r3,-3086
8110cec8:	10c03e8d 	sth	r3,250(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[58] = 0xF5F4;
8110cecc:	e0bffd17 	ldw	r2,-12(fp)
8110ced0:	00fd7d04 	movi	r3,-2572
8110ced4:	10c03f0d 	sth	r3,252(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[59] = 0xF7F6;
8110ced8:	e0bffd17 	ldw	r2,-12(fp)
8110cedc:	00fdfd84 	movi	r3,-2058
8110cee0:	10c03f8d 	sth	r3,254(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[60] = 0xF9F8;
8110cee4:	e0bffd17 	ldw	r2,-12(fp)
8110cee8:	00fe7e04 	movi	r3,-1544
8110ceec:	10c0400d 	sth	r3,256(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[61] = 0xFBFA;
8110cef0:	e0bffd17 	ldw	r2,-12(fp)
8110cef4:	00fefe84 	movi	r3,-1030
8110cef8:	10c0408d 	sth	r3,258(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[62] = 0xFDFC;
8110cefc:	e0bffd17 	ldw	r2,-12(fp)
8110cf00:	00ff7f04 	movi	r3,-516
8110cf04:	10c0410d 	sth	r3,260(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[63] = 0xFFFE;
8110cf08:	e0bffd17 	ldw	r2,-12(fp)
8110cf0c:	00ffff84 	movi	r3,-2
8110cf10:	10c0418d 	sth	r3,262(r2)
	pxBufferDataM1->xPixelDataBlock[1].ulliMask = 0xFFFFFFFFFFFFFFFF;
8110cf14:	e0bffd17 	ldw	r2,-12(fp)
8110cf18:	00ffffc4 	movi	r3,-1
8110cf1c:	10c04215 	stw	r3,264(r2)
8110cf20:	00ffffc4 	movi	r3,-1
8110cf24:	10c04315 	stw	r3,268(r2)

	pxBufferDataM1->xPixelDataBlock[2] = pxBufferDataM1->xPixelDataBlock[0];
8110cf28:	e0bffd17 	ldw	r2,-12(fp)
8110cf2c:	e0fffd17 	ldw	r3,-12(fp)
8110cf30:	10804404 	addi	r2,r2,272
8110cf34:	1809883a 	mov	r4,r3
8110cf38:	00c02204 	movi	r3,136
8110cf3c:	180d883a 	mov	r6,r3
8110cf40:	200b883a 	mov	r5,r4
8110cf44:	1009883a 	mov	r4,r2
8110cf48:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[3] = pxBufferDataM1->xPixelDataBlock[1];
8110cf4c:	e0fffd17 	ldw	r3,-12(fp)
8110cf50:	e0bffd17 	ldw	r2,-12(fp)
8110cf54:	18c06604 	addi	r3,r3,408
8110cf58:	10802204 	addi	r2,r2,136
8110cf5c:	01002204 	movi	r4,136
8110cf60:	200d883a 	mov	r6,r4
8110cf64:	100b883a 	mov	r5,r2
8110cf68:	1809883a 	mov	r4,r3
8110cf6c:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[4] = pxBufferDataM1->xPixelDataBlock[2];
8110cf70:	e0fffd17 	ldw	r3,-12(fp)
8110cf74:	e0bffd17 	ldw	r2,-12(fp)
8110cf78:	18c08804 	addi	r3,r3,544
8110cf7c:	10804404 	addi	r2,r2,272
8110cf80:	01002204 	movi	r4,136
8110cf84:	200d883a 	mov	r6,r4
8110cf88:	100b883a 	mov	r5,r2
8110cf8c:	1809883a 	mov	r4,r3
8110cf90:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[5] = pxBufferDataM1->xPixelDataBlock[3];
8110cf94:	e0fffd17 	ldw	r3,-12(fp)
8110cf98:	e0bffd17 	ldw	r2,-12(fp)
8110cf9c:	18c0aa04 	addi	r3,r3,680
8110cfa0:	10806604 	addi	r2,r2,408
8110cfa4:	01002204 	movi	r4,136
8110cfa8:	200d883a 	mov	r6,r4
8110cfac:	100b883a 	mov	r5,r2
8110cfb0:	1809883a 	mov	r4,r3
8110cfb4:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[6] = pxBufferDataM1->xPixelDataBlock[4];
8110cfb8:	e0fffd17 	ldw	r3,-12(fp)
8110cfbc:	e0bffd17 	ldw	r2,-12(fp)
8110cfc0:	18c0cc04 	addi	r3,r3,816
8110cfc4:	10808804 	addi	r2,r2,544
8110cfc8:	01002204 	movi	r4,136
8110cfcc:	200d883a 	mov	r6,r4
8110cfd0:	100b883a 	mov	r5,r2
8110cfd4:	1809883a 	mov	r4,r3
8110cfd8:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[7] = pxBufferDataM1->xPixelDataBlock[5];
8110cfdc:	e0fffd17 	ldw	r3,-12(fp)
8110cfe0:	e0bffd17 	ldw	r2,-12(fp)
8110cfe4:	18c0ee04 	addi	r3,r3,952
8110cfe8:	1080aa04 	addi	r2,r2,680
8110cfec:	01002204 	movi	r4,136
8110cff0:	200d883a 	mov	r6,r4
8110cff4:	100b883a 	mov	r5,r2
8110cff8:	1809883a 	mov	r4,r3
8110cffc:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[8] = pxBufferDataM1->xPixelDataBlock[6];
8110d000:	e0fffd17 	ldw	r3,-12(fp)
8110d004:	e0bffd17 	ldw	r2,-12(fp)
8110d008:	18c11004 	addi	r3,r3,1088
8110d00c:	1080cc04 	addi	r2,r2,816
8110d010:	01002204 	movi	r4,136
8110d014:	200d883a 	mov	r6,r4
8110d018:	100b883a 	mov	r5,r2
8110d01c:	1809883a 	mov	r4,r3
8110d020:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[9] = pxBufferDataM1->xPixelDataBlock[7];
8110d024:	e0fffd17 	ldw	r3,-12(fp)
8110d028:	e0bffd17 	ldw	r2,-12(fp)
8110d02c:	18c13204 	addi	r3,r3,1224
8110d030:	1080ee04 	addi	r2,r2,952
8110d034:	01002204 	movi	r4,136
8110d038:	200d883a 	mov	r6,r4
8110d03c:	100b883a 	mov	r5,r2
8110d040:	1809883a 	mov	r4,r3
8110d044:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[10] = pxBufferDataM1->xPixelDataBlock[8];
8110d048:	e0fffd17 	ldw	r3,-12(fp)
8110d04c:	e0bffd17 	ldw	r2,-12(fp)
8110d050:	18c15404 	addi	r3,r3,1360
8110d054:	10811004 	addi	r2,r2,1088
8110d058:	01002204 	movi	r4,136
8110d05c:	200d883a 	mov	r6,r4
8110d060:	100b883a 	mov	r5,r2
8110d064:	1809883a 	mov	r4,r3
8110d068:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[11] = pxBufferDataM1->xPixelDataBlock[9];
8110d06c:	e0fffd17 	ldw	r3,-12(fp)
8110d070:	e0bffd17 	ldw	r2,-12(fp)
8110d074:	18c17604 	addi	r3,r3,1496
8110d078:	10813204 	addi	r2,r2,1224
8110d07c:	01002204 	movi	r4,136
8110d080:	200d883a 	mov	r6,r4
8110d084:	100b883a 	mov	r5,r2
8110d088:	1809883a 	mov	r4,r3
8110d08c:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[12] = pxBufferDataM1->xPixelDataBlock[10];
8110d090:	e0fffd17 	ldw	r3,-12(fp)
8110d094:	e0bffd17 	ldw	r2,-12(fp)
8110d098:	18c19804 	addi	r3,r3,1632
8110d09c:	10815404 	addi	r2,r2,1360
8110d0a0:	01002204 	movi	r4,136
8110d0a4:	200d883a 	mov	r6,r4
8110d0a8:	100b883a 	mov	r5,r2
8110d0ac:	1809883a 	mov	r4,r3
8110d0b0:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[13] = pxBufferDataM1->xPixelDataBlock[11];
8110d0b4:	e0fffd17 	ldw	r3,-12(fp)
8110d0b8:	e0bffd17 	ldw	r2,-12(fp)
8110d0bc:	18c1ba04 	addi	r3,r3,1768
8110d0c0:	10817604 	addi	r2,r2,1496
8110d0c4:	01002204 	movi	r4,136
8110d0c8:	200d883a 	mov	r6,r4
8110d0cc:	100b883a 	mov	r5,r2
8110d0d0:	1809883a 	mov	r4,r3
8110d0d4:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[14] = pxBufferDataM1->xPixelDataBlock[12];
8110d0d8:	e0fffd17 	ldw	r3,-12(fp)
8110d0dc:	e0bffd17 	ldw	r2,-12(fp)
8110d0e0:	18c1dc04 	addi	r3,r3,1904
8110d0e4:	10819804 	addi	r2,r2,1632
8110d0e8:	01002204 	movi	r4,136
8110d0ec:	200d883a 	mov	r6,r4
8110d0f0:	100b883a 	mov	r5,r2
8110d0f4:	1809883a 	mov	r4,r3
8110d0f8:	11111480 	call	81111148 <memcpy>
	pxBufferDataM1->xPixelDataBlock[15] = pxBufferDataM1->xPixelDataBlock[13];
8110d0fc:	e0fffd17 	ldw	r3,-12(fp)
8110d100:	e0bffd17 	ldw	r2,-12(fp)
8110d104:	18c1fe04 	addi	r3,r3,2040
8110d108:	1081ba04 	addi	r2,r2,1768
8110d10c:	01002204 	movi	r4,136
8110d110:	200d883a 	mov	r6,r4
8110d114:	100b883a 	mov	r5,r2
8110d118:	1809883a 	mov	r4,r3
8110d11c:	11111480 	call	81111148 <memcpy>

	bDdr2SwitchMemory(DDR2_M2_ID);
8110d120:	01000044 	movi	r4,1
8110d124:	110142c0 	call	8110142c <bDdr2SwitchMemory>
//	puliDdr++;
//	printf("add : %u \n", *puliDdr);

// buffer: 2176 B -> 544 dwords

	TSdmaBufferDataBlock *pxBufferDataM2 = (TSdmaBufferDataBlock *) uliDdr2Base;
8110d128:	e0bffc17 	ldw	r2,-16(fp)
8110d12c:	e0bffe15 	stw	r2,-8(fp)

	pxBufferDataM2->xPixelDataBlock[0].usiPixel[0] = 0x0100;
8110d130:	e0bffe17 	ldw	r2,-8(fp)
8110d134:	00c04004 	movi	r3,256
8110d138:	10c0000d 	sth	r3,0(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[1] = 0x0302;
8110d13c:	e0bffe17 	ldw	r2,-8(fp)
8110d140:	00c0c084 	movi	r3,770
8110d144:	10c0008d 	sth	r3,2(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[2] = 0x0504;
8110d148:	e0bffe17 	ldw	r2,-8(fp)
8110d14c:	00c14104 	movi	r3,1284
8110d150:	10c0010d 	sth	r3,4(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[3] = 0x0706;
8110d154:	e0bffe17 	ldw	r2,-8(fp)
8110d158:	00c1c184 	movi	r3,1798
8110d15c:	10c0018d 	sth	r3,6(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[4] = 0x0908;
8110d160:	e0bffe17 	ldw	r2,-8(fp)
8110d164:	00c24204 	movi	r3,2312
8110d168:	10c0020d 	sth	r3,8(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[5] = 0x0B0A;
8110d16c:	e0bffe17 	ldw	r2,-8(fp)
8110d170:	00c2c284 	movi	r3,2826
8110d174:	10c0028d 	sth	r3,10(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[6] = 0x0D0C;
8110d178:	e0bffe17 	ldw	r2,-8(fp)
8110d17c:	00c34304 	movi	r3,3340
8110d180:	10c0030d 	sth	r3,12(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[7] = 0x0F0E;
8110d184:	e0bffe17 	ldw	r2,-8(fp)
8110d188:	00c3c384 	movi	r3,3854
8110d18c:	10c0038d 	sth	r3,14(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[8] = 0x1110;
8110d190:	e0bffe17 	ldw	r2,-8(fp)
8110d194:	00c44404 	movi	r3,4368
8110d198:	10c0040d 	sth	r3,16(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[9] = 0x1312;
8110d19c:	e0bffe17 	ldw	r2,-8(fp)
8110d1a0:	00c4c484 	movi	r3,4882
8110d1a4:	10c0048d 	sth	r3,18(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[10] = 0x1514;
8110d1a8:	e0bffe17 	ldw	r2,-8(fp)
8110d1ac:	00c54504 	movi	r3,5396
8110d1b0:	10c0050d 	sth	r3,20(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[11] = 0x1716;
8110d1b4:	e0bffe17 	ldw	r2,-8(fp)
8110d1b8:	00c5c584 	movi	r3,5910
8110d1bc:	10c0058d 	sth	r3,22(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[12] = 0x1918;
8110d1c0:	e0bffe17 	ldw	r2,-8(fp)
8110d1c4:	00c64604 	movi	r3,6424
8110d1c8:	10c0060d 	sth	r3,24(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[13] = 0x1B1A;
8110d1cc:	e0bffe17 	ldw	r2,-8(fp)
8110d1d0:	00c6c684 	movi	r3,6938
8110d1d4:	10c0068d 	sth	r3,26(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[14] = 0x1D1C;
8110d1d8:	e0bffe17 	ldw	r2,-8(fp)
8110d1dc:	00c74704 	movi	r3,7452
8110d1e0:	10c0070d 	sth	r3,28(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[15] = 0x1F1E;
8110d1e4:	e0bffe17 	ldw	r2,-8(fp)
8110d1e8:	00c7c784 	movi	r3,7966
8110d1ec:	10c0078d 	sth	r3,30(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[16] = 0x2120;
8110d1f0:	e0bffe17 	ldw	r2,-8(fp)
8110d1f4:	00c84804 	movi	r3,8480
8110d1f8:	10c0080d 	sth	r3,32(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[17] = 0x2322;
8110d1fc:	e0bffe17 	ldw	r2,-8(fp)
8110d200:	00c8c884 	movi	r3,8994
8110d204:	10c0088d 	sth	r3,34(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[18] = 0x2524;
8110d208:	e0bffe17 	ldw	r2,-8(fp)
8110d20c:	00c94904 	movi	r3,9508
8110d210:	10c0090d 	sth	r3,36(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[19] = 0x2726;
8110d214:	e0bffe17 	ldw	r2,-8(fp)
8110d218:	00c9c984 	movi	r3,10022
8110d21c:	10c0098d 	sth	r3,38(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[20] = 0x2928;
8110d220:	e0bffe17 	ldw	r2,-8(fp)
8110d224:	00ca4a04 	movi	r3,10536
8110d228:	10c00a0d 	sth	r3,40(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[21] = 0x2B2A;
8110d22c:	e0bffe17 	ldw	r2,-8(fp)
8110d230:	00caca84 	movi	r3,11050
8110d234:	10c00a8d 	sth	r3,42(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[22] = 0x2D2C;
8110d238:	e0bffe17 	ldw	r2,-8(fp)
8110d23c:	00cb4b04 	movi	r3,11564
8110d240:	10c00b0d 	sth	r3,44(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[23] = 0x2F2E;
8110d244:	e0bffe17 	ldw	r2,-8(fp)
8110d248:	00cbcb84 	movi	r3,12078
8110d24c:	10c00b8d 	sth	r3,46(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[24] = 0x3130;
8110d250:	e0bffe17 	ldw	r2,-8(fp)
8110d254:	00cc4c04 	movi	r3,12592
8110d258:	10c00c0d 	sth	r3,48(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[25] = 0x3332;
8110d25c:	e0bffe17 	ldw	r2,-8(fp)
8110d260:	00cccc84 	movi	r3,13106
8110d264:	10c00c8d 	sth	r3,50(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[26] = 0x3534;
8110d268:	e0bffe17 	ldw	r2,-8(fp)
8110d26c:	00cd4d04 	movi	r3,13620
8110d270:	10c00d0d 	sth	r3,52(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[27] = 0x3736;
8110d274:	e0bffe17 	ldw	r2,-8(fp)
8110d278:	00cdcd84 	movi	r3,14134
8110d27c:	10c00d8d 	sth	r3,54(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[28] = 0x3938;
8110d280:	e0bffe17 	ldw	r2,-8(fp)
8110d284:	00ce4e04 	movi	r3,14648
8110d288:	10c00e0d 	sth	r3,56(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[29] = 0x3B3A;
8110d28c:	e0bffe17 	ldw	r2,-8(fp)
8110d290:	00cece84 	movi	r3,15162
8110d294:	10c00e8d 	sth	r3,58(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[30] = 0x3D3C;
8110d298:	e0bffe17 	ldw	r2,-8(fp)
8110d29c:	00cf4f04 	movi	r3,15676
8110d2a0:	10c00f0d 	sth	r3,60(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[31] = 0x3F3E;
8110d2a4:	e0bffe17 	ldw	r2,-8(fp)
8110d2a8:	00cfcf84 	movi	r3,16190
8110d2ac:	10c00f8d 	sth	r3,62(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[32] = 0x4140;
8110d2b0:	e0bffe17 	ldw	r2,-8(fp)
8110d2b4:	00d05004 	movi	r3,16704
8110d2b8:	10c0100d 	sth	r3,64(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[33] = 0x4342;
8110d2bc:	e0bffe17 	ldw	r2,-8(fp)
8110d2c0:	00d0d084 	movi	r3,17218
8110d2c4:	10c0108d 	sth	r3,66(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[34] = 0x4544;
8110d2c8:	e0bffe17 	ldw	r2,-8(fp)
8110d2cc:	00d15104 	movi	r3,17732
8110d2d0:	10c0110d 	sth	r3,68(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[35] = 0x4746;
8110d2d4:	e0bffe17 	ldw	r2,-8(fp)
8110d2d8:	00d1d184 	movi	r3,18246
8110d2dc:	10c0118d 	sth	r3,70(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[36] = 0x4948;
8110d2e0:	e0bffe17 	ldw	r2,-8(fp)
8110d2e4:	00d25204 	movi	r3,18760
8110d2e8:	10c0120d 	sth	r3,72(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[37] = 0x4B4A;
8110d2ec:	e0bffe17 	ldw	r2,-8(fp)
8110d2f0:	00d2d284 	movi	r3,19274
8110d2f4:	10c0128d 	sth	r3,74(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[38] = 0x4D4C;
8110d2f8:	e0bffe17 	ldw	r2,-8(fp)
8110d2fc:	00d35304 	movi	r3,19788
8110d300:	10c0130d 	sth	r3,76(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[39] = 0x4F4E;
8110d304:	e0bffe17 	ldw	r2,-8(fp)
8110d308:	00d3d384 	movi	r3,20302
8110d30c:	10c0138d 	sth	r3,78(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[40] = 0x5150;
8110d310:	e0bffe17 	ldw	r2,-8(fp)
8110d314:	00d45404 	movi	r3,20816
8110d318:	10c0140d 	sth	r3,80(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[41] = 0x5352;
8110d31c:	e0bffe17 	ldw	r2,-8(fp)
8110d320:	00d4d484 	movi	r3,21330
8110d324:	10c0148d 	sth	r3,82(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[42] = 0x5554;
8110d328:	e0bffe17 	ldw	r2,-8(fp)
8110d32c:	00d55504 	movi	r3,21844
8110d330:	10c0150d 	sth	r3,84(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[43] = 0x5756;
8110d334:	e0bffe17 	ldw	r2,-8(fp)
8110d338:	00d5d584 	movi	r3,22358
8110d33c:	10c0158d 	sth	r3,86(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[44] = 0x5958;
8110d340:	e0bffe17 	ldw	r2,-8(fp)
8110d344:	00d65604 	movi	r3,22872
8110d348:	10c0160d 	sth	r3,88(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[45] = 0x5B5A;
8110d34c:	e0bffe17 	ldw	r2,-8(fp)
8110d350:	00d6d684 	movi	r3,23386
8110d354:	10c0168d 	sth	r3,90(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[46] = 0x5D5C;
8110d358:	e0bffe17 	ldw	r2,-8(fp)
8110d35c:	00d75704 	movi	r3,23900
8110d360:	10c0170d 	sth	r3,92(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[47] = 0x5F5E;
8110d364:	e0bffe17 	ldw	r2,-8(fp)
8110d368:	00d7d784 	movi	r3,24414
8110d36c:	10c0178d 	sth	r3,94(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[48] = 0x6160;
8110d370:	e0bffe17 	ldw	r2,-8(fp)
8110d374:	00d85804 	movi	r3,24928
8110d378:	10c0180d 	sth	r3,96(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[49] = 0x6362;
8110d37c:	e0bffe17 	ldw	r2,-8(fp)
8110d380:	00d8d884 	movi	r3,25442
8110d384:	10c0188d 	sth	r3,98(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[50] = 0x6564;
8110d388:	e0bffe17 	ldw	r2,-8(fp)
8110d38c:	00d95904 	movi	r3,25956
8110d390:	10c0190d 	sth	r3,100(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[51] = 0x6766;
8110d394:	e0bffe17 	ldw	r2,-8(fp)
8110d398:	00d9d984 	movi	r3,26470
8110d39c:	10c0198d 	sth	r3,102(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[52] = 0x6968;
8110d3a0:	e0bffe17 	ldw	r2,-8(fp)
8110d3a4:	00da5a04 	movi	r3,26984
8110d3a8:	10c01a0d 	sth	r3,104(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[53] = 0x6B6A;
8110d3ac:	e0bffe17 	ldw	r2,-8(fp)
8110d3b0:	00dada84 	movi	r3,27498
8110d3b4:	10c01a8d 	sth	r3,106(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[54] = 0x6D6C;
8110d3b8:	e0bffe17 	ldw	r2,-8(fp)
8110d3bc:	00db5b04 	movi	r3,28012
8110d3c0:	10c01b0d 	sth	r3,108(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[55] = 0x6F6E;
8110d3c4:	e0bffe17 	ldw	r2,-8(fp)
8110d3c8:	00dbdb84 	movi	r3,28526
8110d3cc:	10c01b8d 	sth	r3,110(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[56] = 0x7170;
8110d3d0:	e0bffe17 	ldw	r2,-8(fp)
8110d3d4:	00dc5c04 	movi	r3,29040
8110d3d8:	10c01c0d 	sth	r3,112(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[57] = 0x7372;
8110d3dc:	e0bffe17 	ldw	r2,-8(fp)
8110d3e0:	00dcdc84 	movi	r3,29554
8110d3e4:	10c01c8d 	sth	r3,114(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[58] = 0x7574;
8110d3e8:	e0bffe17 	ldw	r2,-8(fp)
8110d3ec:	00dd5d04 	movi	r3,30068
8110d3f0:	10c01d0d 	sth	r3,116(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[59] = 0x7776;
8110d3f4:	e0bffe17 	ldw	r2,-8(fp)
8110d3f8:	00dddd84 	movi	r3,30582
8110d3fc:	10c01d8d 	sth	r3,118(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[60] = 0x7978;
8110d400:	e0bffe17 	ldw	r2,-8(fp)
8110d404:	00de5e04 	movi	r3,31096
8110d408:	10c01e0d 	sth	r3,120(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[61] = 0x7B7A;
8110d40c:	e0bffe17 	ldw	r2,-8(fp)
8110d410:	00dede84 	movi	r3,31610
8110d414:	10c01e8d 	sth	r3,122(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[62] = 0x7D7C;
8110d418:	e0bffe17 	ldw	r2,-8(fp)
8110d41c:	00df5f04 	movi	r3,32124
8110d420:	10c01f0d 	sth	r3,124(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[63] = 0x7F7E;
8110d424:	e0bffe17 	ldw	r2,-8(fp)
8110d428:	00dfdf84 	movi	r3,32638
8110d42c:	10c01f8d 	sth	r3,126(r2)
	pxBufferDataM2->xPixelDataBlock[0].ulliMask = 0xFFFFFFFFFFFFFFFF;
8110d430:	e0bffe17 	ldw	r2,-8(fp)
8110d434:	00ffffc4 	movi	r3,-1
8110d438:	10c02015 	stw	r3,128(r2)
8110d43c:	00ffffc4 	movi	r3,-1
8110d440:	10c02115 	stw	r3,132(r2)

	pxBufferDataM2->xPixelDataBlock[1].usiPixel[0] = 0x8180;
8110d444:	e0bffe17 	ldw	r2,-8(fp)
8110d448:	00e06004 	movi	r3,-32384
8110d44c:	10c0220d 	sth	r3,136(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[1] = 0x8382;
8110d450:	e0bffe17 	ldw	r2,-8(fp)
8110d454:	00e0e084 	movi	r3,-31870
8110d458:	10c0228d 	sth	r3,138(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[2] = 0x8584;
8110d45c:	e0bffe17 	ldw	r2,-8(fp)
8110d460:	00e16104 	movi	r3,-31356
8110d464:	10c0230d 	sth	r3,140(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[3] = 0x8786;
8110d468:	e0bffe17 	ldw	r2,-8(fp)
8110d46c:	00e1e184 	movi	r3,-30842
8110d470:	10c0238d 	sth	r3,142(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[4] = 0x8988;
8110d474:	e0bffe17 	ldw	r2,-8(fp)
8110d478:	00e26204 	movi	r3,-30328
8110d47c:	10c0240d 	sth	r3,144(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[5] = 0x8B8A;
8110d480:	e0bffe17 	ldw	r2,-8(fp)
8110d484:	00e2e284 	movi	r3,-29814
8110d488:	10c0248d 	sth	r3,146(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[6] = 0x8D8C;
8110d48c:	e0bffe17 	ldw	r2,-8(fp)
8110d490:	00e36304 	movi	r3,-29300
8110d494:	10c0250d 	sth	r3,148(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[7] = 0x8F8E;
8110d498:	e0bffe17 	ldw	r2,-8(fp)
8110d49c:	00e3e384 	movi	r3,-28786
8110d4a0:	10c0258d 	sth	r3,150(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[8] = 0x9190;
8110d4a4:	e0bffe17 	ldw	r2,-8(fp)
8110d4a8:	00e46404 	movi	r3,-28272
8110d4ac:	10c0260d 	sth	r3,152(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[9] = 0x9392;
8110d4b0:	e0bffe17 	ldw	r2,-8(fp)
8110d4b4:	00e4e484 	movi	r3,-27758
8110d4b8:	10c0268d 	sth	r3,154(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[10] = 0x9594;
8110d4bc:	e0bffe17 	ldw	r2,-8(fp)
8110d4c0:	00e56504 	movi	r3,-27244
8110d4c4:	10c0270d 	sth	r3,156(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[11] = 0x9796;
8110d4c8:	e0bffe17 	ldw	r2,-8(fp)
8110d4cc:	00e5e584 	movi	r3,-26730
8110d4d0:	10c0278d 	sth	r3,158(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[12] = 0x9998;
8110d4d4:	e0bffe17 	ldw	r2,-8(fp)
8110d4d8:	00e66604 	movi	r3,-26216
8110d4dc:	10c0280d 	sth	r3,160(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[13] = 0x9B9A;
8110d4e0:	e0bffe17 	ldw	r2,-8(fp)
8110d4e4:	00e6e684 	movi	r3,-25702
8110d4e8:	10c0288d 	sth	r3,162(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[14] = 0x9D9C;
8110d4ec:	e0bffe17 	ldw	r2,-8(fp)
8110d4f0:	00e76704 	movi	r3,-25188
8110d4f4:	10c0290d 	sth	r3,164(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[15] = 0x9F9E;
8110d4f8:	e0bffe17 	ldw	r2,-8(fp)
8110d4fc:	00e7e784 	movi	r3,-24674
8110d500:	10c0298d 	sth	r3,166(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[16] = 0xA1A0;
8110d504:	e0bffe17 	ldw	r2,-8(fp)
8110d508:	00e86804 	movi	r3,-24160
8110d50c:	10c02a0d 	sth	r3,168(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[17] = 0xA3A2;
8110d510:	e0bffe17 	ldw	r2,-8(fp)
8110d514:	00e8e884 	movi	r3,-23646
8110d518:	10c02a8d 	sth	r3,170(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[18] = 0xA5A4;
8110d51c:	e0bffe17 	ldw	r2,-8(fp)
8110d520:	00e96904 	movi	r3,-23132
8110d524:	10c02b0d 	sth	r3,172(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[19] = 0xA7A6;
8110d528:	e0bffe17 	ldw	r2,-8(fp)
8110d52c:	00e9e984 	movi	r3,-22618
8110d530:	10c02b8d 	sth	r3,174(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[20] = 0xA9A8;
8110d534:	e0bffe17 	ldw	r2,-8(fp)
8110d538:	00ea6a04 	movi	r3,-22104
8110d53c:	10c02c0d 	sth	r3,176(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[21] = 0xABAA;
8110d540:	e0bffe17 	ldw	r2,-8(fp)
8110d544:	00eaea84 	movi	r3,-21590
8110d548:	10c02c8d 	sth	r3,178(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[22] = 0xADAC;
8110d54c:	e0bffe17 	ldw	r2,-8(fp)
8110d550:	00eb6b04 	movi	r3,-21076
8110d554:	10c02d0d 	sth	r3,180(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[23] = 0xAFAE;
8110d558:	e0bffe17 	ldw	r2,-8(fp)
8110d55c:	00ebeb84 	movi	r3,-20562
8110d560:	10c02d8d 	sth	r3,182(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[24] = 0xB1B0;
8110d564:	e0bffe17 	ldw	r2,-8(fp)
8110d568:	00ec6c04 	movi	r3,-20048
8110d56c:	10c02e0d 	sth	r3,184(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[25] = 0xB3B2;
8110d570:	e0bffe17 	ldw	r2,-8(fp)
8110d574:	00ecec84 	movi	r3,-19534
8110d578:	10c02e8d 	sth	r3,186(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[26] = 0xB5B4;
8110d57c:	e0bffe17 	ldw	r2,-8(fp)
8110d580:	00ed6d04 	movi	r3,-19020
8110d584:	10c02f0d 	sth	r3,188(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[27] = 0xB7B6;
8110d588:	e0bffe17 	ldw	r2,-8(fp)
8110d58c:	00eded84 	movi	r3,-18506
8110d590:	10c02f8d 	sth	r3,190(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[28] = 0xB9B8;
8110d594:	e0bffe17 	ldw	r2,-8(fp)
8110d598:	00ee6e04 	movi	r3,-17992
8110d59c:	10c0300d 	sth	r3,192(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[29] = 0xBBBA;
8110d5a0:	e0bffe17 	ldw	r2,-8(fp)
8110d5a4:	00eeee84 	movi	r3,-17478
8110d5a8:	10c0308d 	sth	r3,194(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[30] = 0xBDBC;
8110d5ac:	e0bffe17 	ldw	r2,-8(fp)
8110d5b0:	00ef6f04 	movi	r3,-16964
8110d5b4:	10c0310d 	sth	r3,196(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[31] = 0xBFBE;
8110d5b8:	e0bffe17 	ldw	r2,-8(fp)
8110d5bc:	00efef84 	movi	r3,-16450
8110d5c0:	10c0318d 	sth	r3,198(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[32] = 0xC1C0;
8110d5c4:	e0bffe17 	ldw	r2,-8(fp)
8110d5c8:	00f07004 	movi	r3,-15936
8110d5cc:	10c0320d 	sth	r3,200(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[33] = 0xC3C2;
8110d5d0:	e0bffe17 	ldw	r2,-8(fp)
8110d5d4:	00f0f084 	movi	r3,-15422
8110d5d8:	10c0328d 	sth	r3,202(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[34] = 0xC5C4;
8110d5dc:	e0bffe17 	ldw	r2,-8(fp)
8110d5e0:	00f17104 	movi	r3,-14908
8110d5e4:	10c0330d 	sth	r3,204(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[35] = 0xC7C6;
8110d5e8:	e0bffe17 	ldw	r2,-8(fp)
8110d5ec:	00f1f184 	movi	r3,-14394
8110d5f0:	10c0338d 	sth	r3,206(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[36] = 0xC9C8;
8110d5f4:	e0bffe17 	ldw	r2,-8(fp)
8110d5f8:	00f27204 	movi	r3,-13880
8110d5fc:	10c0340d 	sth	r3,208(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[37] = 0xCBCA;
8110d600:	e0bffe17 	ldw	r2,-8(fp)
8110d604:	00f2f284 	movi	r3,-13366
8110d608:	10c0348d 	sth	r3,210(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[38] = 0xCDCC;
8110d60c:	e0bffe17 	ldw	r2,-8(fp)
8110d610:	00f37304 	movi	r3,-12852
8110d614:	10c0350d 	sth	r3,212(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[39] = 0xCFCE;
8110d618:	e0bffe17 	ldw	r2,-8(fp)
8110d61c:	00f3f384 	movi	r3,-12338
8110d620:	10c0358d 	sth	r3,214(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[40] = 0xD1D0;
8110d624:	e0bffe17 	ldw	r2,-8(fp)
8110d628:	00f47404 	movi	r3,-11824
8110d62c:	10c0360d 	sth	r3,216(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[41] = 0xD3D2;
8110d630:	e0bffe17 	ldw	r2,-8(fp)
8110d634:	00f4f484 	movi	r3,-11310
8110d638:	10c0368d 	sth	r3,218(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[42] = 0xD5D4;
8110d63c:	e0bffe17 	ldw	r2,-8(fp)
8110d640:	00f57504 	movi	r3,-10796
8110d644:	10c0370d 	sth	r3,220(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[43] = 0xD7D6;
8110d648:	e0bffe17 	ldw	r2,-8(fp)
8110d64c:	00f5f584 	movi	r3,-10282
8110d650:	10c0378d 	sth	r3,222(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[44] = 0xD9D8;
8110d654:	e0bffe17 	ldw	r2,-8(fp)
8110d658:	00f67604 	movi	r3,-9768
8110d65c:	10c0380d 	sth	r3,224(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[45] = 0xDBDA;
8110d660:	e0bffe17 	ldw	r2,-8(fp)
8110d664:	00f6f684 	movi	r3,-9254
8110d668:	10c0388d 	sth	r3,226(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[46] = 0xDDDC;
8110d66c:	e0bffe17 	ldw	r2,-8(fp)
8110d670:	00f77704 	movi	r3,-8740
8110d674:	10c0390d 	sth	r3,228(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[47] = 0xDFDE;
8110d678:	e0bffe17 	ldw	r2,-8(fp)
8110d67c:	00f7f784 	movi	r3,-8226
8110d680:	10c0398d 	sth	r3,230(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[48] = 0xE1E0;
8110d684:	e0bffe17 	ldw	r2,-8(fp)
8110d688:	00f87804 	movi	r3,-7712
8110d68c:	10c03a0d 	sth	r3,232(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[49] = 0xE3E2;
8110d690:	e0bffe17 	ldw	r2,-8(fp)
8110d694:	00f8f884 	movi	r3,-7198
8110d698:	10c03a8d 	sth	r3,234(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[50] = 0xE5E4;
8110d69c:	e0bffe17 	ldw	r2,-8(fp)
8110d6a0:	00f97904 	movi	r3,-6684
8110d6a4:	10c03b0d 	sth	r3,236(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[51] = 0xE7E6;
8110d6a8:	e0bffe17 	ldw	r2,-8(fp)
8110d6ac:	00f9f984 	movi	r3,-6170
8110d6b0:	10c03b8d 	sth	r3,238(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[52] = 0xE9E8;
8110d6b4:	e0bffe17 	ldw	r2,-8(fp)
8110d6b8:	00fa7a04 	movi	r3,-5656
8110d6bc:	10c03c0d 	sth	r3,240(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[53] = 0xEBEA;
8110d6c0:	e0bffe17 	ldw	r2,-8(fp)
8110d6c4:	00fafa84 	movi	r3,-5142
8110d6c8:	10c03c8d 	sth	r3,242(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[54] = 0xEDEC;
8110d6cc:	e0bffe17 	ldw	r2,-8(fp)
8110d6d0:	00fb7b04 	movi	r3,-4628
8110d6d4:	10c03d0d 	sth	r3,244(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[55] = 0xEFEE;
8110d6d8:	e0bffe17 	ldw	r2,-8(fp)
8110d6dc:	00fbfb84 	movi	r3,-4114
8110d6e0:	10c03d8d 	sth	r3,246(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[56] = 0xF1F0;
8110d6e4:	e0bffe17 	ldw	r2,-8(fp)
8110d6e8:	00fc7c04 	movi	r3,-3600
8110d6ec:	10c03e0d 	sth	r3,248(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[57] = 0xF3F2;
8110d6f0:	e0bffe17 	ldw	r2,-8(fp)
8110d6f4:	00fcfc84 	movi	r3,-3086
8110d6f8:	10c03e8d 	sth	r3,250(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[58] = 0xF5F4;
8110d6fc:	e0bffe17 	ldw	r2,-8(fp)
8110d700:	00fd7d04 	movi	r3,-2572
8110d704:	10c03f0d 	sth	r3,252(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[59] = 0xF7F6;
8110d708:	e0bffe17 	ldw	r2,-8(fp)
8110d70c:	00fdfd84 	movi	r3,-2058
8110d710:	10c03f8d 	sth	r3,254(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[60] = 0xF9F8;
8110d714:	e0bffe17 	ldw	r2,-8(fp)
8110d718:	00fe7e04 	movi	r3,-1544
8110d71c:	10c0400d 	sth	r3,256(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[61] = 0xFBFA;
8110d720:	e0bffe17 	ldw	r2,-8(fp)
8110d724:	00fefe84 	movi	r3,-1030
8110d728:	10c0408d 	sth	r3,258(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[62] = 0xFDFC;
8110d72c:	e0bffe17 	ldw	r2,-8(fp)
8110d730:	00ff7f04 	movi	r3,-516
8110d734:	10c0410d 	sth	r3,260(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[63] = 0xFFFE;
8110d738:	e0bffe17 	ldw	r2,-8(fp)
8110d73c:	00ffff84 	movi	r3,-2
8110d740:	10c0418d 	sth	r3,262(r2)
	pxBufferDataM2->xPixelDataBlock[1].ulliMask = 0xFFFFFFFFFFFFFFFF;
8110d744:	e0bffe17 	ldw	r2,-8(fp)
8110d748:	00ffffc4 	movi	r3,-1
8110d74c:	10c04215 	stw	r3,264(r2)
8110d750:	00ffffc4 	movi	r3,-1
8110d754:	10c04315 	stw	r3,268(r2)

	pxBufferDataM2->xPixelDataBlock[2] = pxBufferDataM2->xPixelDataBlock[0];
8110d758:	e0bffe17 	ldw	r2,-8(fp)
8110d75c:	e0fffe17 	ldw	r3,-8(fp)
8110d760:	10804404 	addi	r2,r2,272
8110d764:	1809883a 	mov	r4,r3
8110d768:	00c02204 	movi	r3,136
8110d76c:	180d883a 	mov	r6,r3
8110d770:	200b883a 	mov	r5,r4
8110d774:	1009883a 	mov	r4,r2
8110d778:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[3] = pxBufferDataM2->xPixelDataBlock[1];
8110d77c:	e0fffe17 	ldw	r3,-8(fp)
8110d780:	e0bffe17 	ldw	r2,-8(fp)
8110d784:	18c06604 	addi	r3,r3,408
8110d788:	10802204 	addi	r2,r2,136
8110d78c:	01002204 	movi	r4,136
8110d790:	200d883a 	mov	r6,r4
8110d794:	100b883a 	mov	r5,r2
8110d798:	1809883a 	mov	r4,r3
8110d79c:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[4] = pxBufferDataM2->xPixelDataBlock[2];
8110d7a0:	e0fffe17 	ldw	r3,-8(fp)
8110d7a4:	e0bffe17 	ldw	r2,-8(fp)
8110d7a8:	18c08804 	addi	r3,r3,544
8110d7ac:	10804404 	addi	r2,r2,272
8110d7b0:	01002204 	movi	r4,136
8110d7b4:	200d883a 	mov	r6,r4
8110d7b8:	100b883a 	mov	r5,r2
8110d7bc:	1809883a 	mov	r4,r3
8110d7c0:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[5] = pxBufferDataM2->xPixelDataBlock[3];
8110d7c4:	e0fffe17 	ldw	r3,-8(fp)
8110d7c8:	e0bffe17 	ldw	r2,-8(fp)
8110d7cc:	18c0aa04 	addi	r3,r3,680
8110d7d0:	10806604 	addi	r2,r2,408
8110d7d4:	01002204 	movi	r4,136
8110d7d8:	200d883a 	mov	r6,r4
8110d7dc:	100b883a 	mov	r5,r2
8110d7e0:	1809883a 	mov	r4,r3
8110d7e4:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[6] = pxBufferDataM2->xPixelDataBlock[4];
8110d7e8:	e0fffe17 	ldw	r3,-8(fp)
8110d7ec:	e0bffe17 	ldw	r2,-8(fp)
8110d7f0:	18c0cc04 	addi	r3,r3,816
8110d7f4:	10808804 	addi	r2,r2,544
8110d7f8:	01002204 	movi	r4,136
8110d7fc:	200d883a 	mov	r6,r4
8110d800:	100b883a 	mov	r5,r2
8110d804:	1809883a 	mov	r4,r3
8110d808:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[7] = pxBufferDataM2->xPixelDataBlock[5];
8110d80c:	e0fffe17 	ldw	r3,-8(fp)
8110d810:	e0bffe17 	ldw	r2,-8(fp)
8110d814:	18c0ee04 	addi	r3,r3,952
8110d818:	1080aa04 	addi	r2,r2,680
8110d81c:	01002204 	movi	r4,136
8110d820:	200d883a 	mov	r6,r4
8110d824:	100b883a 	mov	r5,r2
8110d828:	1809883a 	mov	r4,r3
8110d82c:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[8] = pxBufferDataM2->xPixelDataBlock[6];
8110d830:	e0fffe17 	ldw	r3,-8(fp)
8110d834:	e0bffe17 	ldw	r2,-8(fp)
8110d838:	18c11004 	addi	r3,r3,1088
8110d83c:	1080cc04 	addi	r2,r2,816
8110d840:	01002204 	movi	r4,136
8110d844:	200d883a 	mov	r6,r4
8110d848:	100b883a 	mov	r5,r2
8110d84c:	1809883a 	mov	r4,r3
8110d850:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[9] = pxBufferDataM2->xPixelDataBlock[7];
8110d854:	e0fffe17 	ldw	r3,-8(fp)
8110d858:	e0bffe17 	ldw	r2,-8(fp)
8110d85c:	18c13204 	addi	r3,r3,1224
8110d860:	1080ee04 	addi	r2,r2,952
8110d864:	01002204 	movi	r4,136
8110d868:	200d883a 	mov	r6,r4
8110d86c:	100b883a 	mov	r5,r2
8110d870:	1809883a 	mov	r4,r3
8110d874:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[10] = pxBufferDataM2->xPixelDataBlock[8];
8110d878:	e0fffe17 	ldw	r3,-8(fp)
8110d87c:	e0bffe17 	ldw	r2,-8(fp)
8110d880:	18c15404 	addi	r3,r3,1360
8110d884:	10811004 	addi	r2,r2,1088
8110d888:	01002204 	movi	r4,136
8110d88c:	200d883a 	mov	r6,r4
8110d890:	100b883a 	mov	r5,r2
8110d894:	1809883a 	mov	r4,r3
8110d898:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[11] = pxBufferDataM2->xPixelDataBlock[9];
8110d89c:	e0fffe17 	ldw	r3,-8(fp)
8110d8a0:	e0bffe17 	ldw	r2,-8(fp)
8110d8a4:	18c17604 	addi	r3,r3,1496
8110d8a8:	10813204 	addi	r2,r2,1224
8110d8ac:	01002204 	movi	r4,136
8110d8b0:	200d883a 	mov	r6,r4
8110d8b4:	100b883a 	mov	r5,r2
8110d8b8:	1809883a 	mov	r4,r3
8110d8bc:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[12] = pxBufferDataM2->xPixelDataBlock[10];
8110d8c0:	e0fffe17 	ldw	r3,-8(fp)
8110d8c4:	e0bffe17 	ldw	r2,-8(fp)
8110d8c8:	18c19804 	addi	r3,r3,1632
8110d8cc:	10815404 	addi	r2,r2,1360
8110d8d0:	01002204 	movi	r4,136
8110d8d4:	200d883a 	mov	r6,r4
8110d8d8:	100b883a 	mov	r5,r2
8110d8dc:	1809883a 	mov	r4,r3
8110d8e0:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[13] = pxBufferDataM2->xPixelDataBlock[11];
8110d8e4:	e0fffe17 	ldw	r3,-8(fp)
8110d8e8:	e0bffe17 	ldw	r2,-8(fp)
8110d8ec:	18c1ba04 	addi	r3,r3,1768
8110d8f0:	10817604 	addi	r2,r2,1496
8110d8f4:	01002204 	movi	r4,136
8110d8f8:	200d883a 	mov	r6,r4
8110d8fc:	100b883a 	mov	r5,r2
8110d900:	1809883a 	mov	r4,r3
8110d904:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[14] = pxBufferDataM2->xPixelDataBlock[12];
8110d908:	e0fffe17 	ldw	r3,-8(fp)
8110d90c:	e0bffe17 	ldw	r2,-8(fp)
8110d910:	18c1dc04 	addi	r3,r3,1904
8110d914:	10819804 	addi	r2,r2,1632
8110d918:	01002204 	movi	r4,136
8110d91c:	200d883a 	mov	r6,r4
8110d920:	100b883a 	mov	r5,r2
8110d924:	1809883a 	mov	r4,r3
8110d928:	11111480 	call	81111148 <memcpy>
	pxBufferDataM2->xPixelDataBlock[15] = pxBufferDataM2->xPixelDataBlock[13];
8110d92c:	e0fffe17 	ldw	r3,-8(fp)
8110d930:	e0bffe17 	ldw	r2,-8(fp)
8110d934:	18c1fe04 	addi	r3,r3,2040
8110d938:	1081ba04 	addi	r2,r2,1768
8110d93c:	01002204 	movi	r4,136
8110d940:	200d883a 	mov	r6,r4
8110d944:	100b883a 	mov	r5,r2
8110d948:	1809883a 	mov	r4,r3
8110d94c:	11111480 	call	81111148 <memcpy>
//		puliDdr++;
//	}

// init DMA

	if (bSdmaInitM1Dma()) {
8110d950:	11034380 	call	81103438 <bSdmaInitM1Dma>
8110d954:	10000726 	beq	r2,zero,8110d974 <main+0x1658>
#ifdef DEBUG_ON
		debug(fp, "dma_m1 iniciado corretamente \n");
8110d958:	d0a03117 	ldw	r2,-32572(gp)
8110d95c:	100f883a 	mov	r7,r2
8110d960:	01800784 	movi	r6,30
8110d964:	01400044 	movi	r5,1
8110d968:	012044b4 	movhi	r4,33042
8110d96c:	2119cc04 	addi	r4,r4,26416
8110d970:	11106540 	call	81110654 <fwrite>
#endif
	}

	if (bSdmaInitM2Dma()) {
8110d974:	11034e00 	call	811034e0 <bSdmaInitM2Dma>
8110d978:	10000726 	beq	r2,zero,8110d998 <main+0x167c>
#ifdef DEBUG_ON
		debug(fp, "dma_m2 iniciado corretamente \n");
8110d97c:	d0a03117 	ldw	r2,-32572(gp)
8110d980:	100f883a 	mov	r7,r2
8110d984:	01800784 	movi	r6,30
8110d988:	01400044 	movi	r5,1
8110d98c:	012044b4 	movhi	r4,33042
8110d990:	2119d404 	addi	r4,r4,26448
8110d994:	11106540 	call	81110654 <fwrite>
#endif
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh1Buffer)) {
8110d998:	000f883a 	mov	r7,zero
8110d99c:	01800044 	movi	r6,1
8110d9a0:	01400404 	movi	r5,16
8110d9a4:	0009883a 	mov	r4,zero
8110d9a8:	11035880 	call	81103588 <bSdmaDmaM1Transfer>
8110d9ac:	10000d26 	beq	r2,zero,8110d9e4 <main+0x16c8>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh1Buffer)) {
8110d9b0:	000f883a 	mov	r7,zero
8110d9b4:	000d883a 	mov	r6,zero
8110d9b8:	01400404 	movi	r5,16
8110d9bc:	0009883a 	mov	r4,zero
8110d9c0:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110d9c4:	10000726 	beq	r2,zero,8110d9e4 <main+0x16c8>
#ifdef DEBUG_ON
			debug(fp, "channel a transferido corretamente \n");
8110d9c8:	d0a03117 	ldw	r2,-32572(gp)
8110d9cc:	100f883a 	mov	r7,r2
8110d9d0:	01800904 	movi	r6,36
8110d9d4:	01400044 	movi	r5,1
8110d9d8:	012044b4 	movhi	r4,33042
8110d9dc:	2119dc04 	addi	r4,r4,26480
8110d9e0:	11106540 	call	81110654 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh2Buffer)) {
8110d9e4:	01c00044 	movi	r7,1
8110d9e8:	01800044 	movi	r6,1
8110d9ec:	01400404 	movi	r5,16
8110d9f0:	0009883a 	mov	r4,zero
8110d9f4:	11035880 	call	81103588 <bSdmaDmaM1Transfer>
8110d9f8:	10000d26 	beq	r2,zero,8110da30 <main+0x1714>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh2Buffer)) {
8110d9fc:	01c00044 	movi	r7,1
8110da00:	000d883a 	mov	r6,zero
8110da04:	01400404 	movi	r5,16
8110da08:	0009883a 	mov	r4,zero
8110da0c:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110da10:	10000726 	beq	r2,zero,8110da30 <main+0x1714>
#ifdef DEBUG_ON
			debug(fp, "channel b transferido corretamente \n");
8110da14:	d0a03117 	ldw	r2,-32572(gp)
8110da18:	100f883a 	mov	r7,r2
8110da1c:	01800904 	movi	r6,36
8110da20:	01400044 	movi	r5,1
8110da24:	012044b4 	movhi	r4,33042
8110da28:	2119e604 	addi	r4,r4,26520
8110da2c:	11106540 	call	81110654 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh3Buffer)) {
8110da30:	01c00084 	movi	r7,2
8110da34:	01800044 	movi	r6,1
8110da38:	01400404 	movi	r5,16
8110da3c:	0009883a 	mov	r4,zero
8110da40:	11035880 	call	81103588 <bSdmaDmaM1Transfer>
8110da44:	10000d26 	beq	r2,zero,8110da7c <main+0x1760>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh3Buffer)) {
8110da48:	01c00084 	movi	r7,2
8110da4c:	000d883a 	mov	r6,zero
8110da50:	01400404 	movi	r5,16
8110da54:	0009883a 	mov	r4,zero
8110da58:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110da5c:	10000726 	beq	r2,zero,8110da7c <main+0x1760>
#ifdef DEBUG_ON
			debug(fp, "channel c transferido corretamente \n");
8110da60:	d0a03117 	ldw	r2,-32572(gp)
8110da64:	100f883a 	mov	r7,r2
8110da68:	01800904 	movi	r6,36
8110da6c:	01400044 	movi	r5,1
8110da70:	012044b4 	movhi	r4,33042
8110da74:	2119f004 	addi	r4,r4,26560
8110da78:	11106540 	call	81110654 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh4Buffer)) {
8110da7c:	01c000c4 	movi	r7,3
8110da80:	01800044 	movi	r6,1
8110da84:	01400404 	movi	r5,16
8110da88:	0009883a 	mov	r4,zero
8110da8c:	11035880 	call	81103588 <bSdmaDmaM1Transfer>
8110da90:	10000d26 	beq	r2,zero,8110dac8 <main+0x17ac>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh4Buffer)) {
8110da94:	01c000c4 	movi	r7,3
8110da98:	000d883a 	mov	r6,zero
8110da9c:	01400404 	movi	r5,16
8110daa0:	0009883a 	mov	r4,zero
8110daa4:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110daa8:	10000726 	beq	r2,zero,8110dac8 <main+0x17ac>
#ifdef DEBUG_ON
			debug(fp, "channel d transferido corretamente \n");
8110daac:	d0a03117 	ldw	r2,-32572(gp)
8110dab0:	100f883a 	mov	r7,r2
8110dab4:	01800904 	movi	r6,36
8110dab8:	01400044 	movi	r5,1
8110dabc:	012044b4 	movhi	r4,33042
8110dac0:	2119fa04 	addi	r4,r4,26600
8110dac4:	11106540 	call	81110654 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh5Buffer)) {
8110dac8:	01c00104 	movi	r7,4
8110dacc:	01800044 	movi	r6,1
8110dad0:	01400404 	movi	r5,16
8110dad4:	0009883a 	mov	r4,zero
8110dad8:	11035880 	call	81103588 <bSdmaDmaM1Transfer>
8110dadc:	10000d26 	beq	r2,zero,8110db14 <main+0x17f8>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh5Buffer)) {
8110dae0:	01c00104 	movi	r7,4
8110dae4:	000d883a 	mov	r6,zero
8110dae8:	01400404 	movi	r5,16
8110daec:	0009883a 	mov	r4,zero
8110daf0:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110daf4:	10000726 	beq	r2,zero,8110db14 <main+0x17f8>
#ifdef DEBUG_ON
			debug(fp, "channel e transferido corretamente \n");
8110daf8:	d0a03117 	ldw	r2,-32572(gp)
8110dafc:	100f883a 	mov	r7,r2
8110db00:	01800904 	movi	r6,36
8110db04:	01400044 	movi	r5,1
8110db08:	012044b4 	movhi	r4,33042
8110db0c:	211a0404 	addi	r4,r4,26640
8110db10:	11106540 	call	81110654 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh6Buffer)) {
8110db14:	01c00144 	movi	r7,5
8110db18:	01800044 	movi	r6,1
8110db1c:	01400404 	movi	r5,16
8110db20:	0009883a 	mov	r4,zero
8110db24:	11035880 	call	81103588 <bSdmaDmaM1Transfer>
8110db28:	10000d26 	beq	r2,zero,8110db60 <main+0x1844>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh6Buffer)) {
8110db2c:	01c00144 	movi	r7,5
8110db30:	000d883a 	mov	r6,zero
8110db34:	01400404 	movi	r5,16
8110db38:	0009883a 	mov	r4,zero
8110db3c:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110db40:	10000726 	beq	r2,zero,8110db60 <main+0x1844>
#ifdef DEBUG_ON
			debug(fp, "channel f transferido corretamente \n");
8110db44:	d0a03117 	ldw	r2,-32572(gp)
8110db48:	100f883a 	mov	r7,r2
8110db4c:	01800904 	movi	r6,36
8110db50:	01400044 	movi	r5,1
8110db54:	012044b4 	movhi	r4,33042
8110db58:	211a0e04 	addi	r4,r4,26680
8110db5c:	11106540 	call	81110654 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh7Buffer)) {
8110db60:	01c00184 	movi	r7,6
8110db64:	01800044 	movi	r6,1
8110db68:	01400404 	movi	r5,16
8110db6c:	0009883a 	mov	r4,zero
8110db70:	11035880 	call	81103588 <bSdmaDmaM1Transfer>
8110db74:	10000d26 	beq	r2,zero,8110dbac <main+0x1890>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh7Buffer)) {
8110db78:	01c00184 	movi	r7,6
8110db7c:	000d883a 	mov	r6,zero
8110db80:	01400404 	movi	r5,16
8110db84:	0009883a 	mov	r4,zero
8110db88:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110db8c:	10000726 	beq	r2,zero,8110dbac <main+0x1890>
#ifdef DEBUG_ON
			debug(fp, "channel g transferido corretamente \n");
8110db90:	d0a03117 	ldw	r2,-32572(gp)
8110db94:	100f883a 	mov	r7,r2
8110db98:	01800904 	movi	r6,36
8110db9c:	01400044 	movi	r5,1
8110dba0:	012044b4 	movhi	r4,33042
8110dba4:	211a1804 	addi	r4,r4,26720
8110dba8:	11106540 	call	81110654 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh8Buffer)) {
8110dbac:	01c001c4 	movi	r7,7
8110dbb0:	01800044 	movi	r6,1
8110dbb4:	01400404 	movi	r5,16
8110dbb8:	0009883a 	mov	r4,zero
8110dbbc:	11035880 	call	81103588 <bSdmaDmaM1Transfer>
8110dbc0:	10000d26 	beq	r2,zero,8110dbf8 <main+0x18dc>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh8Buffer)) {
8110dbc4:	01c001c4 	movi	r7,7
8110dbc8:	000d883a 	mov	r6,zero
8110dbcc:	01400404 	movi	r5,16
8110dbd0:	0009883a 	mov	r4,zero
8110dbd4:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110dbd8:	10000726 	beq	r2,zero,8110dbf8 <main+0x18dc>
#ifdef DEBUG_ON
			debug(fp, "channel h transferido corretamente \n");
8110dbdc:	d0a03117 	ldw	r2,-32572(gp)
8110dbe0:	100f883a 	mov	r7,r2
8110dbe4:	01800904 	movi	r6,36
8110dbe8:	01400044 	movi	r5,1
8110dbec:	012044b4 	movhi	r4,33042
8110dbf0:	211a2204 	addi	r4,r4,26760
8110dbf4:	11106540 	call	81110654 <fwrite>
#endif
		}
	}

	bool bLoop = TRUE;
8110dbf8:	00800044 	movi	r2,1
8110dbfc:	e0bffa15 	stw	r2,-24(fp)

	while (bLoop) {
8110dc00:	0000a206 	br	8110de8c <main+0x1b70>
		usleep(5000);
8110dc04:	0104e204 	movi	r4,5000
8110dc08:	1120f980 	call	81120f98 <usleep>

		bSpwcGetLinkStatus(&xComm1.xSpacewire);
8110dc0c:	012044f4 	movhi	r4,33043
8110dc10:	2124ce04 	addi	r4,r4,-27848
8110dc14:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
		if (xComm1.xSpacewire.xLinkStatus.bRunning) {
8110dc18:	00a044f4 	movhi	r2,33043
8110dc1c:	10a47704 	addi	r2,r2,-28196
8110dc20:	10806217 	ldw	r2,392(r2)
8110dc24:	10000726 	beq	r2,zero,8110dc44 <main+0x1928>
			bSetPainelLeds(LEDS_OFF, LEDS_1R_MASK);
8110dc28:	01400084 	movi	r5,2
8110dc2c:	0009883a 	mov	r4,zero
8110dc30:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_1G_MASK);
8110dc34:	01400044 	movi	r5,1
8110dc38:	01000044 	movi	r4,1
8110dc3c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110dc40:	00000606 	br	8110dc5c <main+0x1940>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_1G_MASK);
8110dc44:	01400044 	movi	r5,1
8110dc48:	0009883a 	mov	r4,zero
8110dc4c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_1R_MASK);
8110dc50:	01400084 	movi	r5,2
8110dc54:	01000044 	movi	r4,1
8110dc58:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm2.xSpacewire);
8110dc5c:	012044f4 	movhi	r4,33043
8110dc60:	21253204 	addi	r4,r4,-27448
8110dc64:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
		if (xComm2.xSpacewire.xLinkStatus.bRunning) {
8110dc68:	00a044f4 	movhi	r2,33043
8110dc6c:	10a4db04 	addi	r2,r2,-27796
8110dc70:	10806217 	ldw	r2,392(r2)
8110dc74:	10000726 	beq	r2,zero,8110dc94 <main+0x1978>
			bSetPainelLeds(LEDS_OFF, LEDS_2R_MASK);
8110dc78:	01400204 	movi	r5,8
8110dc7c:	0009883a 	mov	r4,zero
8110dc80:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_2G_MASK);
8110dc84:	01400104 	movi	r5,4
8110dc88:	01000044 	movi	r4,1
8110dc8c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110dc90:	00000606 	br	8110dcac <main+0x1990>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_2G_MASK);
8110dc94:	01400104 	movi	r5,4
8110dc98:	0009883a 	mov	r4,zero
8110dc9c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_2R_MASK);
8110dca0:	01400204 	movi	r5,8
8110dca4:	01000044 	movi	r4,1
8110dca8:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm3.xSpacewire);
8110dcac:	012044f4 	movhi	r4,33043
8110dcb0:	21265e04 	addi	r4,r4,-26248
8110dcb4:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
		if (xComm3.xSpacewire.xLinkStatus.bRunning) {
8110dcb8:	00a044f4 	movhi	r2,33043
8110dcbc:	10a60704 	addi	r2,r2,-26596
8110dcc0:	10806217 	ldw	r2,392(r2)
8110dcc4:	10000726 	beq	r2,zero,8110dce4 <main+0x19c8>
			bSetPainelLeds(LEDS_OFF, LEDS_3R_MASK);
8110dcc8:	01400804 	movi	r5,32
8110dccc:	0009883a 	mov	r4,zero
8110dcd0:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_3G_MASK);
8110dcd4:	01400404 	movi	r5,16
8110dcd8:	01000044 	movi	r4,1
8110dcdc:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110dce0:	00000606 	br	8110dcfc <main+0x19e0>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_3G_MASK);
8110dce4:	01400404 	movi	r5,16
8110dce8:	0009883a 	mov	r4,zero
8110dcec:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_3R_MASK);
8110dcf0:	01400804 	movi	r5,32
8110dcf4:	01000044 	movi	r4,1
8110dcf8:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm4.xSpacewire);
8110dcfc:	012044f4 	movhi	r4,33043
8110dd00:	21278a04 	addi	r4,r4,-25048
8110dd04:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
		if (xComm4.xSpacewire.xLinkStatus.bRunning) {
8110dd08:	00a044f4 	movhi	r2,33043
8110dd0c:	10a73304 	addi	r2,r2,-25396
8110dd10:	10806217 	ldw	r2,392(r2)
8110dd14:	10000726 	beq	r2,zero,8110dd34 <main+0x1a18>
			bSetPainelLeds(LEDS_OFF, LEDS_4R_MASK);
8110dd18:	01402004 	movi	r5,128
8110dd1c:	0009883a 	mov	r4,zero
8110dd20:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_4G_MASK);
8110dd24:	01401004 	movi	r5,64
8110dd28:	01000044 	movi	r4,1
8110dd2c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110dd30:	00000606 	br	8110dd4c <main+0x1a30>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_4G_MASK);
8110dd34:	01401004 	movi	r5,64
8110dd38:	0009883a 	mov	r4,zero
8110dd3c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_4R_MASK);
8110dd40:	01402004 	movi	r5,128
8110dd44:	01000044 	movi	r4,1
8110dd48:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm5.xSpacewire);
8110dd4c:	012044f4 	movhi	r4,33043
8110dd50:	2125fa04 	addi	r4,r4,-26648
8110dd54:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
		if (xComm5.xSpacewire.xLinkStatus.bRunning) {
8110dd58:	00a044f4 	movhi	r2,33043
8110dd5c:	10a5a304 	addi	r2,r2,-26996
8110dd60:	10806217 	ldw	r2,392(r2)
8110dd64:	10000726 	beq	r2,zero,8110dd84 <main+0x1a68>
			bSetPainelLeds(LEDS_OFF, LEDS_5R_MASK);
8110dd68:	01408004 	movi	r5,512
8110dd6c:	0009883a 	mov	r4,zero
8110dd70:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_5G_MASK);
8110dd74:	01404004 	movi	r5,256
8110dd78:	01000044 	movi	r4,1
8110dd7c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110dd80:	00000606 	br	8110dd9c <main+0x1a80>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_5G_MASK);
8110dd84:	01404004 	movi	r5,256
8110dd88:	0009883a 	mov	r4,zero
8110dd8c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_5R_MASK);
8110dd90:	01408004 	movi	r5,512
8110dd94:	01000044 	movi	r4,1
8110dd98:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm6.xSpacewire);
8110dd9c:	012044f4 	movhi	r4,33043
8110dda0:	21259604 	addi	r4,r4,-27048
8110dda4:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
		if (xComm6.xSpacewire.xLinkStatus.bRunning) {
8110dda8:	00a044f4 	movhi	r2,33043
8110ddac:	10a53f04 	addi	r2,r2,-27396
8110ddb0:	10806217 	ldw	r2,392(r2)
8110ddb4:	10000726 	beq	r2,zero,8110ddd4 <main+0x1ab8>
			bSetPainelLeds(LEDS_OFF, LEDS_6R_MASK);
8110ddb8:	01420004 	movi	r5,2048
8110ddbc:	0009883a 	mov	r4,zero
8110ddc0:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_6G_MASK);
8110ddc4:	01410004 	movi	r5,1024
8110ddc8:	01000044 	movi	r4,1
8110ddcc:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110ddd0:	00000606 	br	8110ddec <main+0x1ad0>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_6G_MASK);
8110ddd4:	01410004 	movi	r5,1024
8110ddd8:	0009883a 	mov	r4,zero
8110dddc:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_6R_MASK);
8110dde0:	01420004 	movi	r5,2048
8110dde4:	01000044 	movi	r4,1
8110dde8:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm7.xSpacewire);
8110ddec:	012044f4 	movhi	r4,33043
8110ddf0:	2126c204 	addi	r4,r4,-25848
8110ddf4:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
		if (xComm7.xSpacewire.xLinkStatus.bRunning) {
8110ddf8:	00a044f4 	movhi	r2,33043
8110ddfc:	10a66b04 	addi	r2,r2,-26196
8110de00:	10806217 	ldw	r2,392(r2)
8110de04:	10000726 	beq	r2,zero,8110de24 <main+0x1b08>
			bSetPainelLeds(LEDS_OFF, LEDS_7R_MASK);
8110de08:	01480004 	movi	r5,8192
8110de0c:	0009883a 	mov	r4,zero
8110de10:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_7G_MASK);
8110de14:	01440004 	movi	r5,4096
8110de18:	01000044 	movi	r4,1
8110de1c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110de20:	00000606 	br	8110de3c <main+0x1b20>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_7G_MASK);
8110de24:	01440004 	movi	r5,4096
8110de28:	0009883a 	mov	r4,zero
8110de2c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_7R_MASK);
8110de30:	01480004 	movi	r5,8192
8110de34:	01000044 	movi	r4,1
8110de38:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm8.xSpacewire);
8110de3c:	012044f4 	movhi	r4,33043
8110de40:	21272604 	addi	r4,r4,-25448
8110de44:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
		if (xComm8.xSpacewire.xLinkStatus.bRunning) {
8110de48:	00a044f4 	movhi	r2,33043
8110de4c:	10a6cf04 	addi	r2,r2,-25796
8110de50:	10806217 	ldw	r2,392(r2)
8110de54:	10000726 	beq	r2,zero,8110de74 <main+0x1b58>
			bSetPainelLeds(LEDS_OFF, LEDS_8R_MASK);
8110de58:	01600014 	movui	r5,32768
8110de5c:	0009883a 	mov	r4,zero
8110de60:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_8G_MASK);
8110de64:	01500004 	movi	r5,16384
8110de68:	01000044 	movi	r4,1
8110de6c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110de70:	00000606 	br	8110de8c <main+0x1b70>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_8G_MASK);
8110de74:	01500004 	movi	r5,16384
8110de78:	0009883a 	mov	r4,zero
8110de7c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
8110de80:	01600014 	movui	r5,32768
8110de84:	01000044 	movi	r4,1
8110de88:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		}
	}

	bool bLoop = TRUE;

	while (bLoop) {
8110de8c:	e0bffa17 	ldw	r2,-24(fp)
8110de90:	103f5c1e 	bne	r2,zero,8110dc04 <__reset+0xfb0edc04>
			bSetPainelLeds(LEDS_OFF, LEDS_8G_MASK);
			bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
		}
	}

	while (bLoop) {
8110de94:	00009006 	br	8110e0d8 <main+0x1dbc>
#ifdef DEBUG_ON
		debug(fp, "selecione memoria \n");
8110de98:	d0a03117 	ldw	r2,-32572(gp)
8110de9c:	100f883a 	mov	r7,r2
8110dea0:	018004c4 	movi	r6,19
8110dea4:	01400044 	movi	r5,1
8110dea8:	012044b4 	movhi	r4,33042
8110deac:	211a2c04 	addi	r4,r4,26800
8110deb0:	11106540 	call	81110654 <fwrite>
		switch (getchar()) {
8110deb4:	d0a00317 	ldw	r2,-32756(gp)
8110deb8:	10800117 	ldw	r2,4(r2)
8110debc:	1009883a 	mov	r4,r2
8110dec0:	11106f80 	call	811106f8 <getc>
8110dec4:	10c00ca0 	cmpeqi	r3,r2,50
8110dec8:	18001f1e 	bne	r3,zero,8110df48 <main+0x1c2c>
8110decc:	10c00cc8 	cmpgei	r3,r2,51
8110ded0:	1800031e 	bne	r3,zero,8110dee0 <main+0x1bc4>
8110ded4:	10800c60 	cmpeqi	r2,r2,49
8110ded8:	1000061e 	bne	r2,zero,8110def4 <main+0x1bd8>
8110dedc:	00006706 	br	8110e07c <main+0x1d60>
8110dee0:	10c01860 	cmpeqi	r3,r2,97
8110dee4:	18002d1e 	bne	r3,zero,8110df9c <main+0x1c80>
8110dee8:	10801ca0 	cmpeqi	r2,r2,114
8110deec:	1000531e 	bne	r2,zero,8110e03c <main+0x1d20>
8110def0:	00006206 	br	8110e07c <main+0x1d60>
		case '1':
			debug(fp, "m2 R \n")
8110def4:	d0a03117 	ldw	r2,-32572(gp)
8110def8:	100f883a 	mov	r7,r2
8110defc:	01800184 	movi	r6,6
8110df00:	01400044 	movi	r5,1
8110df04:	012044b4 	movhi	r4,33042
8110df08:	211a3104 	addi	r4,r4,26820
8110df0c:	11106540 	call	81110654 <fwrite>
			;
			if (bSdmaDmaM2Transfer(0, 16, eSdmaRightBuffer, eSdmaCh1Buffer)) {
8110df10:	000f883a 	mov	r7,zero
8110df14:	01800044 	movi	r6,1
8110df18:	01400404 	movi	r5,16
8110df1c:	0009883a 	mov	r4,zero
8110df20:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110df24:	10006c26 	beq	r2,zero,8110e0d8 <main+0x1dbc>

				debug(fp, "dma_m2 transferido corretamente \n");
8110df28:	d0a03117 	ldw	r2,-32572(gp)
8110df2c:	100f883a 	mov	r7,r2
8110df30:	01800844 	movi	r6,33
8110df34:	01400044 	movi	r5,1
8110df38:	012044b4 	movhi	r4,33042
8110df3c:	211a3304 	addi	r4,r4,26828
8110df40:	11106540 	call	81110654 <fwrite>

			}
			break;
8110df44:	00006406 	br	8110e0d8 <main+0x1dbc>

		case '2':
			debug(fp, "m2 L \n")
8110df48:	d0a03117 	ldw	r2,-32572(gp)
8110df4c:	100f883a 	mov	r7,r2
8110df50:	01800184 	movi	r6,6
8110df54:	01400044 	movi	r5,1
8110df58:	012044b4 	movhi	r4,33042
8110df5c:	211a3c04 	addi	r4,r4,26864
8110df60:	11106540 	call	81110654 <fwrite>
			;
			if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh1Buffer)) {
8110df64:	000f883a 	mov	r7,zero
8110df68:	000d883a 	mov	r6,zero
8110df6c:	01400404 	movi	r5,16
8110df70:	0009883a 	mov	r4,zero
8110df74:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110df78:	10005726 	beq	r2,zero,8110e0d8 <main+0x1dbc>
				debug(fp, "dma_m2 transferido corretamente \n");
8110df7c:	d0a03117 	ldw	r2,-32572(gp)
8110df80:	100f883a 	mov	r7,r2
8110df84:	01800844 	movi	r6,33
8110df88:	01400044 	movi	r5,1
8110df8c:	012044b4 	movhi	r4,33042
8110df90:	211a3304 	addi	r4,r4,26828
8110df94:	11106540 	call	81110654 <fwrite>

			}
			break;
8110df98:	00004f06 	br	8110e0d8 <main+0x1dbc>

		case 'a':
			debug(fp, "a \n")
8110df9c:	d0a03117 	ldw	r2,-32572(gp)
8110dfa0:	100f883a 	mov	r7,r2
8110dfa4:	018000c4 	movi	r6,3
8110dfa8:	01400044 	movi	r5,1
8110dfac:	012044b4 	movhi	r4,33042
8110dfb0:	211a3e04 	addi	r4,r4,26872
8110dfb4:	11106540 	call	81110654 <fwrite>
			;
			if (bSdmaDmaM2Transfer(0, 16, eSdmaRightBuffer, eSdmaCh1Buffer)) {
8110dfb8:	000f883a 	mov	r7,zero
8110dfbc:	01800044 	movi	r6,1
8110dfc0:	01400404 	movi	r5,16
8110dfc4:	0009883a 	mov	r4,zero
8110dfc8:	1103a080 	call	81103a08 <bSdmaDmaM2Transfer>
8110dfcc:	10000726 	beq	r2,zero,8110dfec <main+0x1cd0>
				debug(fp, "dma_m2 transferido corretamente \n");
8110dfd0:	d0a03117 	ldw	r2,-32572(gp)
8110dfd4:	100f883a 	mov	r7,r2
8110dfd8:	01800844 	movi	r6,33
8110dfdc:	01400044 	movi	r5,1
8110dfe0:	012044b4 	movhi	r4,33042
8110dfe4:	211a3304 	addi	r4,r4,26828
8110dfe8:	11106540 	call	81110654 <fwrite>
			}
//			if (bSdmaDmaM1Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh1Buffer)) {
//				debug(fp, "dma_m1 transferido corretamente \n");
//			}
			usleep(500);
8110dfec:	01007d04 	movi	r4,500
8110dff0:	1120f980 	call	81120f98 <usleep>
			bFeebGetBuffersStatus(&xComm1.xFeeBuffer);
8110dff4:	012044f4 	movhi	r4,33043
8110dff8:	21248004 	addi	r4,r4,-28160
8110dffc:	11058c40 	call	811058c4 <bFeebGetBuffersStatus>
			sprintf(cDebugBuffer, "empty: %u \n",
					xComm1.xFeeBuffer.xBufferStatus.bRightBufferEmpty);
8110e000:	00a044f4 	movhi	r2,33043
8110e004:	10a47704 	addi	r2,r2,-28196
8110e008:	10800f17 	ldw	r2,60(r2)
//			if (bSdmaDmaM1Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh1Buffer)) {
//				debug(fp, "dma_m1 transferido corretamente \n");
//			}
			usleep(500);
			bFeebGetBuffersStatus(&xComm1.xFeeBuffer);
			sprintf(cDebugBuffer, "empty: %u \n",
8110e00c:	100d883a 	mov	r6,r2
8110e010:	016044b4 	movhi	r5,33042
8110e014:	295a3f04 	addi	r5,r5,26876
8110e018:	012044f4 	movhi	r4,33043
8110e01c:	21233704 	addi	r4,r4,-29476
8110e020:	111173c0 	call	8111173c <sprintf>
					xComm1.xFeeBuffer.xBufferStatus.bRightBufferEmpty);
			debug(fp, cDebugBuffer)
8110e024:	d0a03117 	ldw	r2,-32572(gp)
8110e028:	016044f4 	movhi	r5,33043
8110e02c:	29633704 	addi	r5,r5,-29476
8110e030:	1009883a 	mov	r4,r2
8110e034:	11100880 	call	81110088 <fprintf>
			;
			break;
8110e038:	00002706 	br	8110e0d8 <main+0x1dbc>

		case 'r':
			sprintf(cDebugBuffer, "r \n");
8110e03c:	00a044f4 	movhi	r2,33043
8110e040:	10a33704 	addi	r2,r2,-29476
8110e044:	00c01c84 	movi	r3,114
8110e048:	10c00005 	stb	r3,0(r2)
8110e04c:	00c00804 	movi	r3,32
8110e050:	10c00045 	stb	r3,1(r2)
8110e054:	00c00284 	movi	r3,10
8110e058:	10c00085 	stb	r3,2(r2)
8110e05c:	100000c5 	stb	zero,3(r2)
			debug(fp, cDebugBuffer)
8110e060:	d0a03117 	ldw	r2,-32572(gp)
8110e064:	016044f4 	movhi	r5,33043
8110e068:	29633704 	addi	r5,r5,-29476
8110e06c:	1009883a 	mov	r4,r2
8110e070:	11100880 	call	81110088 <fprintf>
			;
			bLoop = FALSE;
8110e074:	e03ffa15 	stw	zero,-24(fp)
			break;
8110e078:	00001706 	br	8110e0d8 <main+0x1dbc>

		default:
			sprintf(cDebugBuffer, "errou \n");
8110e07c:	00a044f4 	movhi	r2,33043
8110e080:	10a33704 	addi	r2,r2,-29476
8110e084:	00c01944 	movi	r3,101
8110e088:	10c00005 	stb	r3,0(r2)
8110e08c:	00c01c84 	movi	r3,114
8110e090:	10c00045 	stb	r3,1(r2)
8110e094:	00c01c84 	movi	r3,114
8110e098:	10c00085 	stb	r3,2(r2)
8110e09c:	00c01bc4 	movi	r3,111
8110e0a0:	10c000c5 	stb	r3,3(r2)
8110e0a4:	00c01d44 	movi	r3,117
8110e0a8:	10c00105 	stb	r3,4(r2)
8110e0ac:	00c00804 	movi	r3,32
8110e0b0:	10c00145 	stb	r3,5(r2)
8110e0b4:	00c00284 	movi	r3,10
8110e0b8:	10c00185 	stb	r3,6(r2)
8110e0bc:	100001c5 	stb	zero,7(r2)
			debug(fp, cDebugBuffer)
8110e0c0:	d0a03117 	ldw	r2,-32572(gp)
8110e0c4:	016044f4 	movhi	r5,33043
8110e0c8:	29633704 	addi	r5,r5,-29476
8110e0cc:	1009883a 	mov	r4,r2
8110e0d0:	11100880 	call	81110088 <fprintf>
			;
			break;
8110e0d4:	0001883a 	nop
			bSetPainelLeds(LEDS_OFF, LEDS_8G_MASK);
			bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
		}
	}

	while (bLoop) {
8110e0d8:	e0bffa17 	ldw	r2,-24(fp)
8110e0dc:	103f6e1e 	bne	r2,zero,8110de98 <__reset+0xfb0ede98>
			break;
		}
	}
#endif

	bSpwcSetLink(&xComm1.xSpacewire);
8110e0e0:	012044f4 	movhi	r4,33043
8110e0e4:	2124ce04 	addi	r4,r4,-27848
8110e0e8:	1108ffc0 	call	81108ffc <bSpwcSetLink>
	bSpwcSetLink(&xComm8.xSpacewire);
8110e0ec:	012044f4 	movhi	r4,33043
8110e0f0:	21272604 	addi	r4,r4,-25448
8110e0f4:	1108ffc0 	call	81108ffc <bSpwcSetLink>

	//*xComm1.puliSpwcChAddr = 0x102;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "%08lX", *(xComm1.xSpacewire.puliSpwcChAddr));
8110e0f8:	00a044f4 	movhi	r2,33043
8110e0fc:	10a47704 	addi	r2,r2,-28196
8110e100:	10805717 	ldw	r2,348(r2)
8110e104:	10800017 	ldw	r2,0(r2)
8110e108:	100d883a 	mov	r6,r2
8110e10c:	016044b4 	movhi	r5,33042
8110e110:	295a4204 	addi	r5,r5,26888
8110e114:	012044f4 	movhi	r4,33043
8110e118:	21233704 	addi	r4,r4,-29476
8110e11c:	111173c0 	call	8111173c <sprintf>
	debug(fp, cDebugBuffer);
8110e120:	d0a03117 	ldw	r2,-32572(gp)
8110e124:	016044f4 	movhi	r5,33043
8110e128:	29633704 	addi	r5,r5,-29476
8110e12c:	1009883a 	mov	r4,r2
8110e130:	11100880 	call	81110088 <fprintf>
#endif
	usleep(10000);
8110e134:	0109c404 	movi	r4,10000
8110e138:	1120f980 	call	81120f98 <usleep>

	bSpwcGetLinkStatus(&xComm1.xSpacewire);
8110e13c:	012044f4 	movhi	r4,33043
8110e140:	2124ce04 	addi	r4,r4,-27848
8110e144:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
	if (xComm1.xSpacewire.xLinkStatus.bRunning) {
8110e148:	00a044f4 	movhi	r2,33043
8110e14c:	10a47704 	addi	r2,r2,-28196
8110e150:	10806217 	ldw	r2,392(r2)
8110e154:	10000726 	beq	r2,zero,8110e174 <main+0x1e58>
		bSetPainelLeds(LEDS_OFF, LEDS_1R_MASK);
8110e158:	01400084 	movi	r5,2
8110e15c:	0009883a 	mov	r4,zero
8110e160:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, LEDS_1G_MASK);
8110e164:	01400044 	movi	r5,1
8110e168:	01000044 	movi	r4,1
8110e16c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110e170:	00000606 	br	8110e18c <main+0x1e70>
	} else {
		bSetPainelLeds(LEDS_OFF, LEDS_1G_MASK);
8110e174:	01400044 	movi	r5,1
8110e178:	0009883a 	mov	r4,zero
8110e17c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, LEDS_1R_MASK);
8110e180:	01400084 	movi	r5,2
8110e184:	01000044 	movi	r4,1
8110e188:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	}

	bSpwcGetLinkStatus(&xComm8.xSpacewire);
8110e18c:	012044f4 	movhi	r4,33043
8110e190:	21272604 	addi	r4,r4,-25448
8110e194:	11092f00 	call	811092f0 <bSpwcGetLinkStatus>
	if (xComm8.xSpacewire.xLinkStatus.bRunning) {
8110e198:	00a044f4 	movhi	r2,33043
8110e19c:	10a6cf04 	addi	r2,r2,-25796
8110e1a0:	10806217 	ldw	r2,392(r2)
8110e1a4:	10000726 	beq	r2,zero,8110e1c4 <main+0x1ea8>
		bSetPainelLeds(LEDS_OFF, LEDS_8R_MASK);
8110e1a8:	01600014 	movui	r5,32768
8110e1ac:	0009883a 	mov	r4,zero
8110e1b0:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, LEDS_8G_MASK);
8110e1b4:	01500004 	movi	r5,16384
8110e1b8:	01000044 	movi	r4,1
8110e1bc:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110e1c0:	00000606 	br	8110e1dc <main+0x1ec0>
	} else {
		bSetPainelLeds(LEDS_OFF, LEDS_8G_MASK);
8110e1c4:	01500004 	movi	r5,16384
8110e1c8:	0009883a 	mov	r4,zero
8110e1cc:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
8110e1d0:	01600014 	movui	r5,32768
8110e1d4:	01000044 	movi	r4,1
8110e1d8:	1109fd80 	call	81109fd8 <bSetPainelLeds>
	}

	int i = 0;
8110e1dc:	e03ffb15 	stw	zero,-20(fp)
	bLoop = TRUE;
8110e1e0:	00800044 	movi	r2,1
8110e1e4:	e0bffa15 	stw	r2,-24(fp)
	while (bLoop) {
8110e1e8:	00002906 	br	8110e290 <main+0x1f74>
		for (i = 0; i < 1000; i++) {
8110e1ec:	e03ffb15 	stw	zero,-20(fp)
8110e1f0:	00000506 	br	8110e208 <main+0x1eec>
			usleep(1000);
8110e1f4:	0100fa04 	movi	r4,1000
8110e1f8:	1120f980 	call	81120f98 <usleep>
	}

	int i = 0;
	bLoop = TRUE;
	while (bLoop) {
		for (i = 0; i < 1000; i++) {
8110e1fc:	e0bffb17 	ldw	r2,-20(fp)
8110e200:	10800044 	addi	r2,r2,1
8110e204:	e0bffb15 	stw	r2,-20(fp)
8110e208:	e0bffb17 	ldw	r2,-20(fp)
8110e20c:	1080fa10 	cmplti	r2,r2,1000
8110e210:	103ff81e 	bne	r2,zero,8110e1f4 <__reset+0xfb0ee1f4>
			usleep(1000);
		}
#ifdef DEBUG_ON
		bFeebGetBuffersStatus(&xComm1.xFeeBuffer);
8110e214:	012044f4 	movhi	r4,33043
8110e218:	21248004 	addi	r4,r4,-28160
8110e21c:	11058c40 	call	811058c4 <bFeebGetBuffersStatus>
		sprintf(cDebugBuffer, "empty r: %u \n",
				xComm1.xFeeBuffer.xBufferStatus.bRightBufferEmpty);
8110e220:	00a044f4 	movhi	r2,33043
8110e224:	10a47704 	addi	r2,r2,-28196
8110e228:	10800f17 	ldw	r2,60(r2)
		for (i = 0; i < 1000; i++) {
			usleep(1000);
		}
#ifdef DEBUG_ON
		bFeebGetBuffersStatus(&xComm1.xFeeBuffer);
		sprintf(cDebugBuffer, "empty r: %u \n",
8110e22c:	100d883a 	mov	r6,r2
8110e230:	016044b4 	movhi	r5,33042
8110e234:	295a4404 	addi	r5,r5,26896
8110e238:	012044f4 	movhi	r4,33043
8110e23c:	21233704 	addi	r4,r4,-29476
8110e240:	111173c0 	call	8111173c <sprintf>
				xComm1.xFeeBuffer.xBufferStatus.bRightBufferEmpty);
		debug(fp, cDebugBuffer);
8110e244:	d0a03117 	ldw	r2,-32572(gp)
8110e248:	016044f4 	movhi	r5,33043
8110e24c:	29633704 	addi	r5,r5,-29476
8110e250:	1009883a 	mov	r4,r2
8110e254:	11100880 	call	81110088 <fprintf>
		sprintf(cDebugBuffer, "empty l: %u \n",
				xComm1.xFeeBuffer.xBufferStatus.bLeftBufferEmpty);
8110e258:	00a044f4 	movhi	r2,33043
8110e25c:	10a47704 	addi	r2,r2,-28196
8110e260:	10800e17 	ldw	r2,56(r2)
#ifdef DEBUG_ON
		bFeebGetBuffersStatus(&xComm1.xFeeBuffer);
		sprintf(cDebugBuffer, "empty r: %u \n",
				xComm1.xFeeBuffer.xBufferStatus.bRightBufferEmpty);
		debug(fp, cDebugBuffer);
		sprintf(cDebugBuffer, "empty l: %u \n",
8110e264:	100d883a 	mov	r6,r2
8110e268:	016044b4 	movhi	r5,33042
8110e26c:	295a4804 	addi	r5,r5,26912
8110e270:	012044f4 	movhi	r4,33043
8110e274:	21233704 	addi	r4,r4,-29476
8110e278:	111173c0 	call	8111173c <sprintf>
				xComm1.xFeeBuffer.xBufferStatus.bLeftBufferEmpty);
		debug(fp, cDebugBuffer);
8110e27c:	d0a03117 	ldw	r2,-32572(gp)
8110e280:	016044f4 	movhi	r5,33043
8110e284:	29633704 	addi	r5,r5,-29476
8110e288:	1009883a 	mov	r4,r2
8110e28c:	11100880 	call	81110088 <fprintf>
		bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
	}

	int i = 0;
	bLoop = TRUE;
	while (bLoop) {
8110e290:	e0bffa17 	ldw	r2,-24(fp)
8110e294:	103fd51e 	bne	r2,zero,8110e1ec <__reset+0xfb0ee1ec>

//}

//getchar();
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "passou 1 \n");
8110e298:	00a044f4 	movhi	r2,33043
8110e29c:	10a33704 	addi	r2,r2,-29476
8110e2a0:	00c01c04 	movi	r3,112
8110e2a4:	10c00005 	stb	r3,0(r2)
8110e2a8:	00c01844 	movi	r3,97
8110e2ac:	10c00045 	stb	r3,1(r2)
8110e2b0:	00c01cc4 	movi	r3,115
8110e2b4:	10c00085 	stb	r3,2(r2)
8110e2b8:	00c01cc4 	movi	r3,115
8110e2bc:	10c000c5 	stb	r3,3(r2)
8110e2c0:	00c01bc4 	movi	r3,111
8110e2c4:	10c00105 	stb	r3,4(r2)
8110e2c8:	00c01d44 	movi	r3,117
8110e2cc:	10c00145 	stb	r3,5(r2)
8110e2d0:	00c00804 	movi	r3,32
8110e2d4:	10c00185 	stb	r3,6(r2)
8110e2d8:	00c00c44 	movi	r3,49
8110e2dc:	10c001c5 	stb	r3,7(r2)
8110e2e0:	00c00804 	movi	r3,32
8110e2e4:	10c00205 	stb	r3,8(r2)
8110e2e8:	00c00284 	movi	r3,10
8110e2ec:	10c00245 	stb	r3,9(r2)
8110e2f0:	10000285 	stb	zero,10(r2)
	debug(fp, cDebugBuffer);
8110e2f4:	d0a03117 	ldw	r2,-32572(gp)
8110e2f8:	016044f4 	movhi	r5,33043
8110e2fc:	29633704 	addi	r5,r5,-29476
8110e300:	1009883a 	mov	r4,r2
8110e304:	11100880 	call	81110088 <fprintf>
//printf("%d \n", data);

//if (*pSrc++ != *pDes++){

//Realiza teste dos LEDS, entra em um bLoop infinito.
	vTestLeds();
8110e308:	110e34c0 	call	8110e34c <vTestLeds>

//Teste de transferencia com DMA (M2 -> M1);
//TestDMA_M2_M1();

//Acende os leds de status e atualiza a temperatura da FPGA no display de 7 segmentos a cada 1 segundo
	bSetPainelLeds(LEDS_ON, LEDS_ST_ALL_MASK);
8110e30c:	014007f4 	movhi	r5,31
8110e310:	01000044 	movi	r4,1
8110e314:	1109fd80 	call	81109fd8 <bSetPainelLeds>

//FTDI_WRITE_REG(FTDI_BYTE_ENABLE_BURST_REG_OFFSET, 0b00001111);
//FTDI_WRITE_REG(FTDI_DATA_BURST_REG_OFFSET, 0xF0A0B0C0);

	while (1) {
		TEMP_Read(&ucTempFpga, &ucTempBoard);
8110e318:	e0ffff44 	addi	r3,fp,-3
8110e31c:	e0bfff04 	addi	r2,fp,-4
8110e320:	180b883a 	mov	r5,r3
8110e324:	1009883a 	mov	r4,r2
8110e328:	1102b840 	call	81102b84 <TEMP_Read>
		bSSDisplayUpdate(ucTempFpga);
8110e32c:	e0bfff03 	ldbu	r2,-4(fp)
8110e330:	10803fcc 	andi	r2,r2,255
8110e334:	1009883a 	mov	r4,r2
8110e338:	110b4f40 	call	8110b4f4 <bSSDisplayUpdate>
		usleep(1000 * 1000);
8110e33c:	010003f4 	movhi	r4,15
8110e340:	21109004 	addi	r4,r4,16960
8110e344:	1120f980 	call	81120f98 <usleep>
		// TESTE EPC - Write
		//ConfigFTDIWrite();
		//WriteCicle();

//DummyWrite();
	}
8110e348:	003ff306 	br	8110e318 <__reset+0xfb0ee318>

8110e34c <vTestLeds>:
 usleep(5*1000);
 }
 }
 */

void vTestLeds(void) {
8110e34c:	defffd04 	addi	sp,sp,-12
8110e350:	dfc00215 	stw	ra,8(sp)
8110e354:	df000115 	stw	fp,4(sp)
8110e358:	df000104 	addi	fp,sp,4
	alt_8 led = 1;
8110e35c:	00800044 	movi	r2,1
8110e360:	e0bfff05 	stb	r2,-4(fp)
	//SSDP_CONFIG(SSDP_TEST_MODE);

	alt_8 tempFPGA = 0;
8110e364:	e03fff85 	stb	zero,-2(fp)
	alt_8 tempBoard = 0;
8110e368:	e03fffc5 	stb	zero,-1(fp)

	alt_u8 red = 0;
8110e36c:	e03fff45 	stb	zero,-3(fp)

	TEMP_Read(&tempFPGA, &tempBoard);
8110e370:	e0ffffc4 	addi	r3,fp,-1
8110e374:	e0bfff84 	addi	r2,fp,-2
8110e378:	180b883a 	mov	r5,r3
8110e37c:	1009883a 	mov	r4,r2
8110e380:	1102b840 	call	81102b84 <TEMP_Read>
	bSSDisplayUpdate(tempFPGA);
8110e384:	e0bfff83 	ldbu	r2,-2(fp)
8110e388:	10803fcc 	andi	r2,r2,255
8110e38c:	1009883a 	mov	r4,r2
8110e390:	110b4f40 	call	8110b4f4 <bSSDisplayUpdate>

	while (1) {
		switch (led) {
8110e394:	e0bfff07 	ldb	r2,-4(fp)
8110e398:	10c00268 	cmpgeui	r3,r2,9
8110e39c:	1800ac1e 	bne	r3,zero,8110e650 <vTestLeds+0x304>
8110e3a0:	100690ba 	slli	r3,r2,2
8110e3a4:	00a04474 	movhi	r2,33041
8110e3a8:	10b8ee04 	addi	r2,r2,-7240
8110e3ac:	1885883a 	add	r2,r3,r2
8110e3b0:	10800017 	ldw	r2,0(r2)
8110e3b4:	1000683a 	jmp	r2
8110e3b8:	8110e650 	cmplti	r4,r16,17305
8110e3bc:	8110e3dc 	xori	r4,r16,17295
8110e3c0:	8110e428 	cmpgeui	r4,r16,17296
8110e3c4:	8110e474 	orhi	r4,r16,17297
8110e3c8:	8110e4c0 	call	88110e4c <__reset+0x20f0e4c>
8110e3cc:	8110e50c 	andi	r4,r16,17300
8110e3d0:	8110e558 	cmpnei	r4,r16,17301
8110e3d4:	8110e5a4 	muli	r4,r16,17302
8110e3d8:	8110e5f0 	cmpltui	r4,r16,17303
		case 1:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_0_MASK);
8110e3dc:	01400044 	movi	r5,1
8110e3e0:	01000044 	movi	r4,1
8110e3e4:	1109f600 	call	81109f60 <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_1_MASK);
8110e3e8:	014000b4 	movhi	r5,2
8110e3ec:	01000044 	movi	r4,1
8110e3f0:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			if (red) {
8110e3f4:	e0bfff43 	ldbu	r2,-3(fp)
8110e3f8:	10000426 	beq	r2,zero,8110e40c <vTestLeds+0xc0>
				bSetPainelLeds(LEDS_ON, LEDS_1R_MASK);
8110e3fc:	01400084 	movi	r5,2
8110e400:	01000044 	movi	r4,1
8110e404:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110e408:	00000306 	br	8110e418 <vTestLeds+0xcc>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_1G_MASK);
8110e40c:	01400044 	movi	r5,1
8110e410:	01000044 	movi	r4,1
8110e414:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			}
			led++;
8110e418:	e0bfff03 	ldbu	r2,-4(fp)
8110e41c:	10800044 	addi	r2,r2,1
8110e420:	e0bfff05 	stb	r2,-4(fp)
			break;
8110e424:	00008b06 	br	8110e654 <vTestLeds+0x308>
		case 2:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_1_MASK);
8110e428:	01400084 	movi	r5,2
8110e42c:	01000044 	movi	r4,1
8110e430:	1109f600 	call	81109f60 <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_2_MASK);
8110e434:	01400134 	movhi	r5,4
8110e438:	01000044 	movi	r4,1
8110e43c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			if (red) {
8110e440:	e0bfff43 	ldbu	r2,-3(fp)
8110e444:	10000426 	beq	r2,zero,8110e458 <vTestLeds+0x10c>
				bSetPainelLeds(LEDS_ON, LEDS_2R_MASK);
8110e448:	01400204 	movi	r5,8
8110e44c:	01000044 	movi	r4,1
8110e450:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110e454:	00000306 	br	8110e464 <vTestLeds+0x118>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_2G_MASK);
8110e458:	01400104 	movi	r5,4
8110e45c:	01000044 	movi	r4,1
8110e460:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			}
			led++;
8110e464:	e0bfff03 	ldbu	r2,-4(fp)
8110e468:	10800044 	addi	r2,r2,1
8110e46c:	e0bfff05 	stb	r2,-4(fp)
			break;
8110e470:	00007806 	br	8110e654 <vTestLeds+0x308>
		case 3:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_2_MASK);
8110e474:	01400104 	movi	r5,4
8110e478:	01000044 	movi	r4,1
8110e47c:	1109f600 	call	81109f60 <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_3_MASK);
8110e480:	01400234 	movhi	r5,8
8110e484:	01000044 	movi	r4,1
8110e488:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			if (red) {
8110e48c:	e0bfff43 	ldbu	r2,-3(fp)
8110e490:	10000426 	beq	r2,zero,8110e4a4 <vTestLeds+0x158>
				bSetPainelLeds(LEDS_ON, LEDS_3R_MASK);
8110e494:	01400804 	movi	r5,32
8110e498:	01000044 	movi	r4,1
8110e49c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110e4a0:	00000306 	br	8110e4b0 <vTestLeds+0x164>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_3G_MASK);
8110e4a4:	01400404 	movi	r5,16
8110e4a8:	01000044 	movi	r4,1
8110e4ac:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			}
			led++;
8110e4b0:	e0bfff03 	ldbu	r2,-4(fp)
8110e4b4:	10800044 	addi	r2,r2,1
8110e4b8:	e0bfff05 	stb	r2,-4(fp)
			break;
8110e4bc:	00006506 	br	8110e654 <vTestLeds+0x308>
		case 4:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_3_MASK);
8110e4c0:	01400204 	movi	r5,8
8110e4c4:	01000044 	movi	r4,1
8110e4c8:	1109f600 	call	81109f60 <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_4_MASK);
8110e4cc:	01400434 	movhi	r5,16
8110e4d0:	01000044 	movi	r4,1
8110e4d4:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			if (red) {
8110e4d8:	e0bfff43 	ldbu	r2,-3(fp)
8110e4dc:	10000426 	beq	r2,zero,8110e4f0 <vTestLeds+0x1a4>
				bSetPainelLeds(LEDS_ON, LEDS_4R_MASK);
8110e4e0:	01402004 	movi	r5,128
8110e4e4:	01000044 	movi	r4,1
8110e4e8:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110e4ec:	00000306 	br	8110e4fc <vTestLeds+0x1b0>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_4G_MASK);
8110e4f0:	01401004 	movi	r5,64
8110e4f4:	01000044 	movi	r4,1
8110e4f8:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			}
			led++;
8110e4fc:	e0bfff03 	ldbu	r2,-4(fp)
8110e500:	10800044 	addi	r2,r2,1
8110e504:	e0bfff05 	stb	r2,-4(fp)
			break;
8110e508:	00005206 	br	8110e654 <vTestLeds+0x308>
		case 5:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_4_MASK);
8110e50c:	01400404 	movi	r5,16
8110e510:	01000044 	movi	r4,1
8110e514:	1109f600 	call	81109f60 <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_1_MASK);
8110e518:	014000b4 	movhi	r5,2
8110e51c:	01000044 	movi	r4,1
8110e520:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			if (red) {
8110e524:	e0bfff43 	ldbu	r2,-3(fp)
8110e528:	10000426 	beq	r2,zero,8110e53c <vTestLeds+0x1f0>
				bSetPainelLeds(LEDS_ON, LEDS_5R_MASK);
8110e52c:	01408004 	movi	r5,512
8110e530:	01000044 	movi	r4,1
8110e534:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110e538:	00000306 	br	8110e548 <vTestLeds+0x1fc>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_5G_MASK);
8110e53c:	01404004 	movi	r5,256
8110e540:	01000044 	movi	r4,1
8110e544:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			}
			led++;
8110e548:	e0bfff03 	ldbu	r2,-4(fp)
8110e54c:	10800044 	addi	r2,r2,1
8110e550:	e0bfff05 	stb	r2,-4(fp)
			break;
8110e554:	00003f06 	br	8110e654 <vTestLeds+0x308>
		case 6:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_5_MASK);
8110e558:	01400804 	movi	r5,32
8110e55c:	01000044 	movi	r4,1
8110e560:	1109f600 	call	81109f60 <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_2_MASK);
8110e564:	01400134 	movhi	r5,4
8110e568:	01000044 	movi	r4,1
8110e56c:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			if (red) {
8110e570:	e0bfff43 	ldbu	r2,-3(fp)
8110e574:	10000426 	beq	r2,zero,8110e588 <vTestLeds+0x23c>
				bSetPainelLeds(LEDS_ON, LEDS_6R_MASK);
8110e578:	01420004 	movi	r5,2048
8110e57c:	01000044 	movi	r4,1
8110e580:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110e584:	00000306 	br	8110e594 <vTestLeds+0x248>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_6G_MASK);
8110e588:	01410004 	movi	r5,1024
8110e58c:	01000044 	movi	r4,1
8110e590:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			}
			led++;
8110e594:	e0bfff03 	ldbu	r2,-4(fp)
8110e598:	10800044 	addi	r2,r2,1
8110e59c:	e0bfff05 	stb	r2,-4(fp)
			break;
8110e5a0:	00002c06 	br	8110e654 <vTestLeds+0x308>
		case 7:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_6_MASK);
8110e5a4:	01401004 	movi	r5,64
8110e5a8:	01000044 	movi	r4,1
8110e5ac:	1109f600 	call	81109f60 <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_3_MASK);
8110e5b0:	01400234 	movhi	r5,8
8110e5b4:	01000044 	movi	r4,1
8110e5b8:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			if (red) {
8110e5bc:	e0bfff43 	ldbu	r2,-3(fp)
8110e5c0:	10000426 	beq	r2,zero,8110e5d4 <vTestLeds+0x288>
				bSetPainelLeds(LEDS_ON, LEDS_7R_MASK);
8110e5c4:	01480004 	movi	r5,8192
8110e5c8:	01000044 	movi	r4,1
8110e5cc:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110e5d0:	00000306 	br	8110e5e0 <vTestLeds+0x294>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_7G_MASK);
8110e5d4:	01440004 	movi	r5,4096
8110e5d8:	01000044 	movi	r4,1
8110e5dc:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			}
			led++;
8110e5e0:	e0bfff03 	ldbu	r2,-4(fp)
8110e5e4:	10800044 	addi	r2,r2,1
8110e5e8:	e0bfff05 	stb	r2,-4(fp)
			break;
8110e5ec:	00001906 	br	8110e654 <vTestLeds+0x308>
		case 8:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_7_MASK);
8110e5f0:	01402004 	movi	r5,128
8110e5f4:	01000044 	movi	r4,1
8110e5f8:	1109f600 	call	81109f60 <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_4_MASK);
8110e5fc:	01400434 	movhi	r5,16
8110e600:	01000044 	movi	r4,1
8110e604:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			if (red) {
8110e608:	e0bfff43 	ldbu	r2,-3(fp)
8110e60c:	10000426 	beq	r2,zero,8110e620 <vTestLeds+0x2d4>
				bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
8110e610:	01600014 	movui	r5,32768
8110e614:	01000044 	movi	r4,1
8110e618:	1109fd80 	call	81109fd8 <bSetPainelLeds>
8110e61c:	00000306 	br	8110e62c <vTestLeds+0x2e0>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_8G_MASK);
8110e620:	01500004 	movi	r5,16384
8110e624:	01000044 	movi	r4,1
8110e628:	1109fd80 	call	81109fd8 <bSetPainelLeds>
			}
			led = 1;
8110e62c:	00800044 	movi	r2,1
8110e630:	e0bfff05 	stb	r2,-4(fp)
			if (red) {
8110e634:	e0bfff43 	ldbu	r2,-3(fp)
8110e638:	10000226 	beq	r2,zero,8110e644 <vTestLeds+0x2f8>
				red = 0;
8110e63c:	e03fff45 	stb	zero,-3(fp)
			} else {
				red = 1;
			}
			break;
8110e640:	00000406 	br	8110e654 <vTestLeds+0x308>
			}
			led = 1;
			if (red) {
				red = 0;
			} else {
				red = 1;
8110e644:	00800044 	movi	r2,1
8110e648:	e0bfff45 	stb	r2,-3(fp)
			}
			break;
8110e64c:	00000106 	br	8110e654 <vTestLeds+0x308>
		default:
			led = 0;
8110e650:	e03fff05 	stb	zero,-4(fp)
		}

		usleep(1000 * 1000);
8110e654:	010003f4 	movhi	r4,15
8110e658:	21109004 	addi	r4,r4,16960
8110e65c:	1120f980 	call	81120f98 <usleep>

		bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110e660:	01403fc4 	movi	r5,255
8110e664:	0009883a 	mov	r4,zero
8110e668:	1109f600 	call	81109f60 <bSetBoardLeds>
		bSetPainelLeds(LEDS_OFF, LEDS_ST_ALL_MASK);
8110e66c:	014007f4 	movhi	r5,31
8110e670:	0009883a 	mov	r4,zero
8110e674:	1109fd80 	call	81109fd8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_OFF, LEDS_GR_ALL_MASK);
8110e678:	017fffd4 	movui	r5,65535
8110e67c:	0009883a 	mov	r4,zero
8110e680:	1109fd80 	call	81109fd8 <bSetPainelLeds>

		TEMP_Read(&tempFPGA, &tempBoard);
8110e684:	e0ffffc4 	addi	r3,fp,-1
8110e688:	e0bfff84 	addi	r2,fp,-2
8110e68c:	180b883a 	mov	r5,r3
8110e690:	1009883a 	mov	r4,r2
8110e694:	1102b840 	call	81102b84 <TEMP_Read>
		bSSDisplayUpdate(tempFPGA);
8110e698:	e0bfff83 	ldbu	r2,-2(fp)
8110e69c:	10803fcc 	andi	r2,r2,255
8110e6a0:	1009883a 	mov	r4,r2
8110e6a4:	110b4f40 	call	8110b4f4 <bSSDisplayUpdate>

	}
8110e6a8:	003f3a06 	br	8110e394 <__reset+0xfb0ee394>

8110e6ac <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
8110e6ac:	defffc04 	addi	sp,sp,-16
8110e6b0:	df000315 	stw	fp,12(sp)
8110e6b4:	df000304 	addi	fp,sp,12
8110e6b8:	e13ffd15 	stw	r4,-12(fp)
8110e6bc:	e17ffe15 	stw	r5,-8(fp)
8110e6c0:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
8110e6c4:	e0bffe17 	ldw	r2,-8(fp)
8110e6c8:	1085883a 	add	r2,r2,r2
8110e6cc:	1085883a 	add	r2,r2,r2
8110e6d0:	1007883a 	mov	r3,r2
8110e6d4:	e0bffd17 	ldw	r2,-12(fp)
8110e6d8:	1885883a 	add	r2,r3,r2
8110e6dc:	1007883a 	mov	r3,r2
8110e6e0:	e0bfff17 	ldw	r2,-4(fp)
8110e6e4:	18800035 	stwio	r2,0(r3)
	return 1;
8110e6e8:	00800044 	movi	r2,1

}
8110e6ec:	e037883a 	mov	sp,fp
8110e6f0:	df000017 	ldw	fp,0(sp)
8110e6f4:	dec00104 	addi	sp,sp,4
8110e6f8:	f800283a 	ret

8110e6fc <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
8110e6fc:	defffc04 	addi	sp,sp,-16
8110e700:	df000315 	stw	fp,12(sp)
8110e704:	df000304 	addi	fp,sp,12
8110e708:	e13ffd15 	stw	r4,-12(fp)
8110e70c:	e17ffe15 	stw	r5,-8(fp)
8110e710:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
8110e714:	e0bffe17 	ldw	r2,-8(fp)
8110e718:	1085883a 	add	r2,r2,r2
8110e71c:	1085883a 	add	r2,r2,r2
8110e720:	1007883a 	mov	r3,r2
8110e724:	e0bffd17 	ldw	r2,-12(fp)
8110e728:	1885883a 	add	r2,r3,r2
8110e72c:	10c00037 	ldwio	r3,0(r2)
8110e730:	e0bfff17 	ldw	r2,-4(fp)
8110e734:	10c00015 	stw	r3,0(r2)
	return 1;
8110e738:	00800044 	movi	r2,1

}
8110e73c:	e037883a 	mov	sp,fp
8110e740:	df000017 	ldw	fp,0(sp)
8110e744:	dec00104 	addi	sp,sp,4
8110e748:	f800283a 	ret

8110e74c <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
8110e74c:	defffa04 	addi	sp,sp,-24
8110e750:	dfc00515 	stw	ra,20(sp)
8110e754:	df000415 	stw	fp,16(sp)
8110e758:	df000404 	addi	fp,sp,16
8110e75c:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
8110e760:	e0bfff17 	ldw	r2,-4(fp)
8110e764:	1005d1ba 	srai	r2,r2,6
8110e768:	1080004c 	andi	r2,r2,1
8110e76c:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
8110e770:	e0bfff17 	ldw	r2,-4(fp)
8110e774:	1005d17a 	srai	r2,r2,5
8110e778:	1080004c 	andi	r2,r2,1
8110e77c:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110e780:	e0bfff17 	ldw	r2,-4(fp)
8110e784:	1005d13a 	srai	r2,r2,4
8110e788:	1080004c 	andi	r2,r2,1
8110e78c:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
8110e790:	00e044f4 	movhi	r3,33043
8110e794:	18e33704 	addi	r3,r3,-29476
8110e798:	00a044b4 	movhi	r2,33042
8110e79c:	109a4c04 	addi	r2,r2,26928
8110e7a0:	1009883a 	mov	r4,r2
8110e7a4:	008005c4 	movi	r2,23
8110e7a8:	100d883a 	mov	r6,r2
8110e7ac:	200b883a 	mov	r5,r4
8110e7b0:	1809883a 	mov	r4,r3
8110e7b4:	11111480 	call	81111148 <memcpy>
	debug(fp, cDebugBuffer);
8110e7b8:	d0a03117 	ldw	r2,-32572(gp)
8110e7bc:	016044f4 	movhi	r5,33043
8110e7c0:	29633704 	addi	r5,r5,-29476
8110e7c4:	1009883a 	mov	r4,r2
8110e7c8:	11100880 	call	81110088 <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
8110e7cc:	e0bffc17 	ldw	r2,-16(fp)
8110e7d0:	10800058 	cmpnei	r2,r2,1
8110e7d4:	1000031e 	bne	r2,zero,8110e7e4 <_print_codec_status+0x98>
8110e7d8:	00a044b4 	movhi	r2,33042
8110e7dc:	109a5204 	addi	r2,r2,26952
8110e7e0:	00000206 	br	8110e7ec <_print_codec_status+0xa0>
8110e7e4:	00a044b4 	movhi	r2,33042
8110e7e8:	109a5304 	addi	r2,r2,26956
8110e7ec:	100d883a 	mov	r6,r2
8110e7f0:	016044b4 	movhi	r5,33042
8110e7f4:	295a5404 	addi	r5,r5,26960
8110e7f8:	012044f4 	movhi	r4,33043
8110e7fc:	21233704 	addi	r4,r4,-29476
8110e800:	111173c0 	call	8111173c <sprintf>
	debug(fp, cDebugBuffer);
8110e804:	d0a03117 	ldw	r2,-32572(gp)
8110e808:	016044f4 	movhi	r5,33043
8110e80c:	29633704 	addi	r5,r5,-29476
8110e810:	1009883a 	mov	r4,r2
8110e814:	11100880 	call	81110088 <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8110e818:	e0bffd17 	ldw	r2,-12(fp)
8110e81c:	10800058 	cmpnei	r2,r2,1
8110e820:	1000031e 	bne	r2,zero,8110e830 <_print_codec_status+0xe4>
8110e824:	00a044b4 	movhi	r2,33042
8110e828:	109a5204 	addi	r2,r2,26952
8110e82c:	00000206 	br	8110e838 <_print_codec_status+0xec>
8110e830:	00a044b4 	movhi	r2,33042
8110e834:	109a5304 	addi	r2,r2,26956
8110e838:	100d883a 	mov	r6,r2
8110e83c:	016044b4 	movhi	r5,33042
8110e840:	295a5a04 	addi	r5,r5,26984
8110e844:	012044f4 	movhi	r4,33043
8110e848:	21233704 	addi	r4,r4,-29476
8110e84c:	111173c0 	call	8111173c <sprintf>
	debug(fp, cDebugBuffer);
8110e850:	d0a03117 	ldw	r2,-32572(gp)
8110e854:	016044f4 	movhi	r5,33043
8110e858:	29633704 	addi	r5,r5,-29476
8110e85c:	1009883a 	mov	r4,r2
8110e860:	11100880 	call	81110088 <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
8110e864:	e0bffe17 	ldw	r2,-8(fp)
8110e868:	10800058 	cmpnei	r2,r2,1
8110e86c:	1000031e 	bne	r2,zero,8110e87c <_print_codec_status+0x130>
8110e870:	00a044b4 	movhi	r2,33042
8110e874:	109a5204 	addi	r2,r2,26952
8110e878:	00000206 	br	8110e884 <_print_codec_status+0x138>
8110e87c:	00a044b4 	movhi	r2,33042
8110e880:	109a5304 	addi	r2,r2,26956
8110e884:	100d883a 	mov	r6,r2
8110e888:	016044b4 	movhi	r5,33042
8110e88c:	295a6004 	addi	r5,r5,27008
8110e890:	012044f4 	movhi	r4,33043
8110e894:	21233704 	addi	r4,r4,-29476
8110e898:	111173c0 	call	8111173c <sprintf>
	debug(fp, cDebugBuffer);
8110e89c:	d0a03117 	ldw	r2,-32572(gp)
8110e8a0:	016044f4 	movhi	r5,33043
8110e8a4:	29633704 	addi	r5,r5,-29476
8110e8a8:	1009883a 	mov	r4,r2
8110e8ac:	11100880 	call	81110088 <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
8110e8b0:	00a044f4 	movhi	r2,33043
8110e8b4:	10a33704 	addi	r2,r2,-29476
8110e8b8:	00c00b44 	movi	r3,45
8110e8bc:	10c00005 	stb	r3,0(r2)
8110e8c0:	00c00b44 	movi	r3,45
8110e8c4:	10c00045 	stb	r3,1(r2)
8110e8c8:	00c00b44 	movi	r3,45
8110e8cc:	10c00085 	stb	r3,2(r2)
8110e8d0:	00c00b44 	movi	r3,45
8110e8d4:	10c000c5 	stb	r3,3(r2)
8110e8d8:	00c00b44 	movi	r3,45
8110e8dc:	10c00105 	stb	r3,4(r2)
8110e8e0:	00c00b44 	movi	r3,45
8110e8e4:	10c00145 	stb	r3,5(r2)
8110e8e8:	00c00b44 	movi	r3,45
8110e8ec:	10c00185 	stb	r3,6(r2)
8110e8f0:	00c00b44 	movi	r3,45
8110e8f4:	10c001c5 	stb	r3,7(r2)
8110e8f8:	00c00804 	movi	r3,32
8110e8fc:	10c00205 	stb	r3,8(r2)
8110e900:	00c00804 	movi	r3,32
8110e904:	10c00245 	stb	r3,9(r2)
8110e908:	00c00284 	movi	r3,10
8110e90c:	10c00285 	stb	r3,10(r2)
8110e910:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
8110e914:	d0a03117 	ldw	r2,-32572(gp)
8110e918:	016044f4 	movhi	r5,33043
8110e91c:	29633704 	addi	r5,r5,-29476
8110e920:	1009883a 	mov	r4,r2
8110e924:	11100880 	call	81110088 <fprintf>
#endif
}
8110e928:	0001883a 	nop
8110e92c:	e037883a 	mov	sp,fp
8110e930:	dfc00117 	ldw	ra,4(sp)
8110e934:	df000017 	ldw	fp,0(sp)
8110e938:	dec00204 	addi	sp,sp,8
8110e93c:	f800283a 	ret

8110e940 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
8110e940:	defffb04 	addi	sp,sp,-20
8110e944:	df000415 	stw	fp,16(sp)
8110e948:	df000404 	addi	fp,sp,16
8110e94c:	e13ffc15 	stw	r4,-16(fp)
8110e950:	e17ffd15 	stw	r5,-12(fp)
8110e954:	e1bffe15 	stw	r6,-8(fp)
8110e958:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
8110e95c:	e0bffc17 	ldw	r2,-16(fp)
8110e960:	1005d1ba 	srai	r2,r2,6
8110e964:	10c0004c 	andi	r3,r2,1
8110e968:	e0bffd17 	ldw	r2,-12(fp)
8110e96c:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8110e970:	e0bffc17 	ldw	r2,-16(fp)
8110e974:	1005d17a 	srai	r2,r2,5
8110e978:	10c0004c 	andi	r3,r2,1
8110e97c:	e0bffe17 	ldw	r2,-8(fp)
8110e980:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8110e984:	e0bffc17 	ldw	r2,-16(fp)
8110e988:	1005d13a 	srai	r2,r2,4
8110e98c:	10c0004c 	andi	r3,r2,1
8110e990:	e0bfff17 	ldw	r2,-4(fp)
8110e994:	10c00015 	stw	r3,0(r2)
}
8110e998:	0001883a 	nop
8110e99c:	e037883a 	mov	sp,fp
8110e9a0:	df000017 	ldw	fp,0(sp)
8110e9a4:	dec00104 	addi	sp,sp,4
8110e9a8:	f800283a 	ret

8110e9ac <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
8110e9ac:	defffc04 	addi	sp,sp,-16
8110e9b0:	df000315 	stw	fp,12(sp)
8110e9b4:	df000304 	addi	fp,sp,12
8110e9b8:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
8110e9bc:	e0bfff17 	ldw	r2,-4(fp)
8110e9c0:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110e9c4:	e0bffd17 	ldw	r2,-12(fp)
8110e9c8:	10c00003 	ldbu	r3,0(r2)
8110e9cc:	e0bffd17 	ldw	r2,-12(fp)
8110e9d0:	10800003 	ldbu	r2,0(r2)
8110e9d4:	10803fcc 	andi	r2,r2,255
8110e9d8:	10800eb0 	cmpltui	r2,r2,58
8110e9dc:	1000021e 	bne	r2,zero,8110e9e8 <aatoh+0x3c>
8110e9e0:	00800dc4 	movi	r2,55
8110e9e4:	00000106 	br	8110e9ec <aatoh+0x40>
8110e9e8:	00800c04 	movi	r2,48
8110e9ec:	1885c83a 	sub	r2,r3,r2
8110e9f0:	1004913a 	slli	r2,r2,4
8110e9f4:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
8110e9f8:	e0bffd17 	ldw	r2,-12(fp)
8110e9fc:	10800044 	addi	r2,r2,1
8110ea00:	10c00003 	ldbu	r3,0(r2)
8110ea04:	e0bffd17 	ldw	r2,-12(fp)
8110ea08:	10800044 	addi	r2,r2,1
8110ea0c:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110ea10:	10803fcc 	andi	r2,r2,255
8110ea14:	10800eb0 	cmpltui	r2,r2,58
8110ea18:	1000021e 	bne	r2,zero,8110ea24 <aatoh+0x78>
8110ea1c:	00800dc4 	movi	r2,55
8110ea20:	00000106 	br	8110ea28 <aatoh+0x7c>
8110ea24:	00800c04 	movi	r2,48
8110ea28:	1885c83a 	sub	r2,r3,r2
8110ea2c:	2085883a 	add	r2,r4,r2
8110ea30:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
8110ea34:	e0bffe03 	ldbu	r2,-8(fp)
}
8110ea38:	e037883a 	mov	sp,fp
8110ea3c:	df000017 	ldw	fp,0(sp)
8110ea40:	dec00104 	addi	sp,sp,4
8110ea44:	f800283a 	ret

8110ea48 <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
8110ea48:	defffd04 	addi	sp,sp,-12
8110ea4c:	dfc00215 	stw	ra,8(sp)
8110ea50:	df000115 	stw	fp,4(sp)
8110ea54:	df000104 	addi	fp,sp,4
8110ea58:	2005883a 	mov	r2,r4
8110ea5c:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
8110ea60:	e0bfff03 	ldbu	r2,-4(fp)
8110ea64:	1000091e 	bne	r2,zero,8110ea8c <Verif_Error+0x44>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
8110ea68:	d0a03117 	ldw	r2,-32572(gp)
8110ea6c:	100f883a 	mov	r7,r2
8110ea70:	018001c4 	movi	r6,7
8110ea74:	01400044 	movi	r5,1
8110ea78:	012044b4 	movhi	r4,33042
8110ea7c:	211a6604 	addi	r4,r4,27032
8110ea80:	11106540 	call	81110654 <fwrite>
#endif
		return 0;
8110ea84:	0005883a 	mov	r2,zero
8110ea88:	00000106 	br	8110ea90 <Verif_Error+0x48>
	} else
		return 1;
8110ea8c:	00800044 	movi	r2,1
}
8110ea90:	e037883a 	mov	sp,fp
8110ea94:	dfc00117 	ldw	ra,4(sp)
8110ea98:	df000017 	ldw	fp,0(sp)
8110ea9c:	dec00204 	addi	sp,sp,8
8110eaa0:	f800283a 	ret

8110eaa4 <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
8110eaa4:	defffe04 	addi	sp,sp,-8
8110eaa8:	df000115 	stw	fp,4(sp)
8110eaac:	df000104 	addi	fp,sp,4
8110eab0:	2005883a 	mov	r2,r4
8110eab4:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
8110eab8:	e0bfff03 	ldbu	r2,-4(fp)
8110eabc:	10bff404 	addi	r2,r2,-48
}
8110eac0:	e037883a 	mov	sp,fp
8110eac4:	df000017 	ldw	fp,0(sp)
8110eac8:	dec00104 	addi	sp,sp,4
8110eacc:	f800283a 	ret

8110ead0 <__divsf3>:
8110ead0:	defff504 	addi	sp,sp,-44
8110ead4:	200cd5fa 	srli	r6,r4,23
8110ead8:	dcc00415 	stw	r19,16(sp)
8110eadc:	2026d7fa 	srli	r19,r4,31
8110eae0:	00c02034 	movhi	r3,128
8110eae4:	dd800715 	stw	r22,28(sp)
8110eae8:	dd000515 	stw	r20,20(sp)
8110eaec:	dc800315 	stw	r18,12(sp)
8110eaf0:	18ffffc4 	addi	r3,r3,-1
8110eaf4:	dfc00a15 	stw	ra,40(sp)
8110eaf8:	df000915 	stw	fp,36(sp)
8110eafc:	ddc00815 	stw	r23,32(sp)
8110eb00:	dd400615 	stw	r21,24(sp)
8110eb04:	dc400215 	stw	r17,8(sp)
8110eb08:	dc000115 	stw	r16,4(sp)
8110eb0c:	35003fcc 	andi	r20,r6,255
8110eb10:	1924703a 	and	r18,r3,r4
8110eb14:	9d803fcc 	andi	r22,r19,255
8110eb18:	a0005226 	beq	r20,zero,8110ec64 <__divsf3+0x194>
8110eb1c:	00803fc4 	movi	r2,255
8110eb20:	a0802e26 	beq	r20,r2,8110ebdc <__divsf3+0x10c>
8110eb24:	91002034 	orhi	r4,r18,128
8110eb28:	202490fa 	slli	r18,r4,3
8110eb2c:	a53fe044 	addi	r20,r20,-127
8110eb30:	0021883a 	mov	r16,zero
8110eb34:	002f883a 	mov	r23,zero
8110eb38:	280cd5fa 	srli	r6,r5,23
8110eb3c:	282ad7fa 	srli	r21,r5,31
8110eb40:	00c02034 	movhi	r3,128
8110eb44:	18ffffc4 	addi	r3,r3,-1
8110eb48:	31803fcc 	andi	r6,r6,255
8110eb4c:	1962703a 	and	r17,r3,r5
8110eb50:	af003fcc 	andi	fp,r21,255
8110eb54:	30004a26 	beq	r6,zero,8110ec80 <__divsf3+0x1b0>
8110eb58:	00803fc4 	movi	r2,255
8110eb5c:	30804526 	beq	r6,r2,8110ec74 <__divsf3+0x1a4>
8110eb60:	89402034 	orhi	r5,r17,128
8110eb64:	282290fa 	slli	r17,r5,3
8110eb68:	31bfe044 	addi	r6,r6,-127
8110eb6c:	000b883a 	mov	r5,zero
8110eb70:	2c20b03a 	or	r16,r5,r16
8110eb74:	802090ba 	slli	r16,r16,2
8110eb78:	00a04474 	movhi	r2,33041
8110eb7c:	10bae704 	addi	r2,r2,-5220
8110eb80:	80a1883a 	add	r16,r16,r2
8110eb84:	81000017 	ldw	r4,0(r16)
8110eb88:	9d46f03a 	xor	r3,r19,r21
8110eb8c:	180f883a 	mov	r7,r3
8110eb90:	18803fcc 	andi	r2,r3,255
8110eb94:	a18dc83a 	sub	r6,r20,r6
8110eb98:	2000683a 	jmp	r4
8110eb9c:	8110ed80 	call	88110ed8 <__reset+0x20f0ed8>
8110eba0:	8110ec04 	addi	r4,r16,17328
8110eba4:	8110ed74 	orhi	r4,r16,17333
8110eba8:	8110ebf0 	cmpltui	r4,r16,17327
8110ebac:	8110ed74 	orhi	r4,r16,17333
8110ebb0:	8110ed4c 	andi	r4,r16,17333
8110ebb4:	8110ed74 	orhi	r4,r16,17333
8110ebb8:	8110ebf0 	cmpltui	r4,r16,17327
8110ebbc:	8110ec04 	addi	r4,r16,17328
8110ebc0:	8110ec04 	addi	r4,r16,17328
8110ebc4:	8110ed4c 	andi	r4,r16,17333
8110ebc8:	8110ebf0 	cmpltui	r4,r16,17327
8110ebcc:	8110ee60 	cmpeqi	r4,r16,17337
8110ebd0:	8110ee60 	cmpeqi	r4,r16,17337
8110ebd4:	8110ee60 	cmpeqi	r4,r16,17337
8110ebd8:	8110ee14 	ori	r4,r16,17336
8110ebdc:	9000581e 	bne	r18,zero,8110ed40 <__divsf3+0x270>
8110ebe0:	04000204 	movi	r16,8
8110ebe4:	05c00084 	movi	r23,2
8110ebe8:	003fd306 	br	8110eb38 <__reset+0xfb0eeb38>
8110ebec:	0023883a 	mov	r17,zero
8110ebf0:	e02d883a 	mov	r22,fp
8110ebf4:	282f883a 	mov	r23,r5
8110ebf8:	00800084 	movi	r2,2
8110ebfc:	b8808f1e 	bne	r23,r2,8110ee3c <__divsf3+0x36c>
8110ec00:	b005883a 	mov	r2,r22
8110ec04:	11c0004c 	andi	r7,r2,1
8110ec08:	013fffc4 	movi	r4,-1
8110ec0c:	000d883a 	mov	r6,zero
8110ec10:	21003fcc 	andi	r4,r4,255
8110ec14:	200895fa 	slli	r4,r4,23
8110ec18:	38803fcc 	andi	r2,r7,255
8110ec1c:	00c02034 	movhi	r3,128
8110ec20:	100497fa 	slli	r2,r2,31
8110ec24:	18ffffc4 	addi	r3,r3,-1
8110ec28:	30c6703a 	and	r3,r6,r3
8110ec2c:	1906b03a 	or	r3,r3,r4
8110ec30:	1884b03a 	or	r2,r3,r2
8110ec34:	dfc00a17 	ldw	ra,40(sp)
8110ec38:	df000917 	ldw	fp,36(sp)
8110ec3c:	ddc00817 	ldw	r23,32(sp)
8110ec40:	dd800717 	ldw	r22,28(sp)
8110ec44:	dd400617 	ldw	r21,24(sp)
8110ec48:	dd000517 	ldw	r20,20(sp)
8110ec4c:	dcc00417 	ldw	r19,16(sp)
8110ec50:	dc800317 	ldw	r18,12(sp)
8110ec54:	dc400217 	ldw	r17,8(sp)
8110ec58:	dc000117 	ldw	r16,4(sp)
8110ec5c:	dec00b04 	addi	sp,sp,44
8110ec60:	f800283a 	ret
8110ec64:	90002b1e 	bne	r18,zero,8110ed14 <__divsf3+0x244>
8110ec68:	04000104 	movi	r16,4
8110ec6c:	05c00044 	movi	r23,1
8110ec70:	003fb106 	br	8110eb38 <__reset+0xfb0eeb38>
8110ec74:	8800251e 	bne	r17,zero,8110ed0c <__divsf3+0x23c>
8110ec78:	01400084 	movi	r5,2
8110ec7c:	00000206 	br	8110ec88 <__divsf3+0x1b8>
8110ec80:	88001a1e 	bne	r17,zero,8110ecec <__divsf3+0x21c>
8110ec84:	01400044 	movi	r5,1
8110ec88:	8160b03a 	or	r16,r16,r5
8110ec8c:	802090ba 	slli	r16,r16,2
8110ec90:	00e04474 	movhi	r3,33041
8110ec94:	18fb2b04 	addi	r3,r3,-4948
8110ec98:	80e1883a 	add	r16,r16,r3
8110ec9c:	80c00017 	ldw	r3,0(r16)
8110eca0:	9d44f03a 	xor	r2,r19,r21
8110eca4:	a18dc83a 	sub	r6,r20,r6
8110eca8:	1800683a 	jmp	r3
8110ecac:	8110ec04 	addi	r4,r16,17328
8110ecb0:	8110ec04 	addi	r4,r16,17328
8110ecb4:	8110ee50 	cmplti	r4,r16,17337
8110ecb8:	8110ebec 	andhi	r4,r16,17327
8110ecbc:	8110ee50 	cmplti	r4,r16,17337
8110ecc0:	8110ed4c 	andi	r4,r16,17333
8110ecc4:	8110ee50 	cmplti	r4,r16,17337
8110ecc8:	8110ebec 	andhi	r4,r16,17327
8110eccc:	8110ec04 	addi	r4,r16,17328
8110ecd0:	8110ec04 	addi	r4,r16,17328
8110ecd4:	8110ed4c 	andi	r4,r16,17333
8110ecd8:	8110ebec 	andhi	r4,r16,17327
8110ecdc:	8110ee60 	cmpeqi	r4,r16,17337
8110ece0:	8110ee60 	cmpeqi	r4,r16,17337
8110ece4:	8110ee60 	cmpeqi	r4,r16,17337
8110ece8:	8110ee78 	rdprs	r4,r16,17337
8110ecec:	8809883a 	mov	r4,r17
8110ecf0:	110fef00 	call	8110fef0 <__clzsi2>
8110ecf4:	10fffec4 	addi	r3,r2,-5
8110ecf8:	10801d84 	addi	r2,r2,118
8110ecfc:	88e2983a 	sll	r17,r17,r3
8110ed00:	008dc83a 	sub	r6,zero,r2
8110ed04:	000b883a 	mov	r5,zero
8110ed08:	003f9906 	br	8110eb70 <__reset+0xfb0eeb70>
8110ed0c:	014000c4 	movi	r5,3
8110ed10:	003f9706 	br	8110eb70 <__reset+0xfb0eeb70>
8110ed14:	9009883a 	mov	r4,r18
8110ed18:	d9400015 	stw	r5,0(sp)
8110ed1c:	110fef00 	call	8110fef0 <__clzsi2>
8110ed20:	10fffec4 	addi	r3,r2,-5
8110ed24:	11801d84 	addi	r6,r2,118
8110ed28:	90e4983a 	sll	r18,r18,r3
8110ed2c:	01a9c83a 	sub	r20,zero,r6
8110ed30:	0021883a 	mov	r16,zero
8110ed34:	002f883a 	mov	r23,zero
8110ed38:	d9400017 	ldw	r5,0(sp)
8110ed3c:	003f7e06 	br	8110eb38 <__reset+0xfb0eeb38>
8110ed40:	04000304 	movi	r16,12
8110ed44:	05c000c4 	movi	r23,3
8110ed48:	003f7b06 	br	8110eb38 <__reset+0xfb0eeb38>
8110ed4c:	01802034 	movhi	r6,128
8110ed50:	000f883a 	mov	r7,zero
8110ed54:	31bfffc4 	addi	r6,r6,-1
8110ed58:	013fffc4 	movi	r4,-1
8110ed5c:	003fac06 	br	8110ec10 <__reset+0xfb0eec10>
8110ed60:	01400044 	movi	r5,1
8110ed64:	2909c83a 	sub	r4,r5,r4
8110ed68:	00c006c4 	movi	r3,27
8110ed6c:	19004b0e 	bge	r3,r4,8110ee9c <__divsf3+0x3cc>
8110ed70:	114e703a 	and	r7,r2,r5
8110ed74:	0009883a 	mov	r4,zero
8110ed78:	000d883a 	mov	r6,zero
8110ed7c:	003fa406 	br	8110ec10 <__reset+0xfb0eec10>
8110ed80:	9006917a 	slli	r3,r18,5
8110ed84:	8822917a 	slli	r17,r17,5
8110ed88:	1c40372e 	bgeu	r3,r17,8110ee68 <__divsf3+0x398>
8110ed8c:	31bfffc4 	addi	r6,r6,-1
8110ed90:	010006c4 	movi	r4,27
8110ed94:	000b883a 	mov	r5,zero
8110ed98:	180f883a 	mov	r7,r3
8110ed9c:	294b883a 	add	r5,r5,r5
8110eda0:	18c7883a 	add	r3,r3,r3
8110eda4:	38000116 	blt	r7,zero,8110edac <__divsf3+0x2dc>
8110eda8:	1c400236 	bltu	r3,r17,8110edb4 <__divsf3+0x2e4>
8110edac:	1c47c83a 	sub	r3,r3,r17
8110edb0:	29400054 	ori	r5,r5,1
8110edb4:	213fffc4 	addi	r4,r4,-1
8110edb8:	203ff71e 	bne	r4,zero,8110ed98 <__reset+0xfb0eed98>
8110edbc:	1806c03a 	cmpne	r3,r3,zero
8110edc0:	1962b03a 	or	r17,r3,r5
8110edc4:	31001fc4 	addi	r4,r6,127
8110edc8:	013fe50e 	bge	zero,r4,8110ed60 <__reset+0xfb0eed60>
8110edcc:	88c001cc 	andi	r3,r17,7
8110edd0:	18000426 	beq	r3,zero,8110ede4 <__divsf3+0x314>
8110edd4:	88c003cc 	andi	r3,r17,15
8110edd8:	01400104 	movi	r5,4
8110eddc:	19400126 	beq	r3,r5,8110ede4 <__divsf3+0x314>
8110ede0:	8963883a 	add	r17,r17,r5
8110ede4:	88c2002c 	andhi	r3,r17,2048
8110ede8:	18000426 	beq	r3,zero,8110edfc <__divsf3+0x32c>
8110edec:	00fe0034 	movhi	r3,63488
8110edf0:	18ffffc4 	addi	r3,r3,-1
8110edf4:	31002004 	addi	r4,r6,128
8110edf8:	88e2703a 	and	r17,r17,r3
8110edfc:	00c03f84 	movi	r3,254
8110ee00:	193f8016 	blt	r3,r4,8110ec04 <__reset+0xfb0eec04>
8110ee04:	880c91ba 	slli	r6,r17,6
8110ee08:	11c0004c 	andi	r7,r2,1
8110ee0c:	300cd27a 	srli	r6,r6,9
8110ee10:	003f7f06 	br	8110ec10 <__reset+0xfb0eec10>
8110ee14:	9080102c 	andhi	r2,r18,64
8110ee18:	10000226 	beq	r2,zero,8110ee24 <__divsf3+0x354>
8110ee1c:	8880102c 	andhi	r2,r17,64
8110ee20:	10001826 	beq	r2,zero,8110ee84 <__divsf3+0x3b4>
8110ee24:	00802034 	movhi	r2,128
8110ee28:	91801034 	orhi	r6,r18,64
8110ee2c:	10bfffc4 	addi	r2,r2,-1
8110ee30:	980f883a 	mov	r7,r19
8110ee34:	308c703a 	and	r6,r6,r2
8110ee38:	003fc706 	br	8110ed58 <__reset+0xfb0eed58>
8110ee3c:	008000c4 	movi	r2,3
8110ee40:	b8802d26 	beq	r23,r2,8110eef8 <__divsf3+0x428>
8110ee44:	00c00044 	movi	r3,1
8110ee48:	b005883a 	mov	r2,r22
8110ee4c:	b8ffdd1e 	bne	r23,r3,8110edc4 <__reset+0xfb0eedc4>
8110ee50:	11c0004c 	andi	r7,r2,1
8110ee54:	0009883a 	mov	r4,zero
8110ee58:	000d883a 	mov	r6,zero
8110ee5c:	003f6c06 	br	8110ec10 <__reset+0xfb0eec10>
8110ee60:	9023883a 	mov	r17,r18
8110ee64:	003f6406 	br	8110ebf8 <__reset+0xfb0eebf8>
8110ee68:	1c47c83a 	sub	r3,r3,r17
8110ee6c:	01000684 	movi	r4,26
8110ee70:	01400044 	movi	r5,1
8110ee74:	003fc806 	br	8110ed98 <__reset+0xfb0eed98>
8110ee78:	9080102c 	andhi	r2,r18,64
8110ee7c:	103fe926 	beq	r2,zero,8110ee24 <__reset+0xfb0eee24>
8110ee80:	0023883a 	mov	r17,zero
8110ee84:	00802034 	movhi	r2,128
8110ee88:	89801034 	orhi	r6,r17,64
8110ee8c:	10bfffc4 	addi	r2,r2,-1
8110ee90:	a80f883a 	mov	r7,r21
8110ee94:	308c703a 	and	r6,r6,r2
8110ee98:	003faf06 	br	8110ed58 <__reset+0xfb0eed58>
8110ee9c:	01c00804 	movi	r7,32
8110eea0:	390fc83a 	sub	r7,r7,r4
8110eea4:	89ce983a 	sll	r7,r17,r7
8110eea8:	890ad83a 	srl	r5,r17,r4
8110eeac:	380ec03a 	cmpne	r7,r7,zero
8110eeb0:	29cab03a 	or	r5,r5,r7
8110eeb4:	28c001cc 	andi	r3,r5,7
8110eeb8:	18000426 	beq	r3,zero,8110eecc <__divsf3+0x3fc>
8110eebc:	28c003cc 	andi	r3,r5,15
8110eec0:	01000104 	movi	r4,4
8110eec4:	19000126 	beq	r3,r4,8110eecc <__divsf3+0x3fc>
8110eec8:	290b883a 	add	r5,r5,r4
8110eecc:	28c1002c 	andhi	r3,r5,1024
8110eed0:	18000426 	beq	r3,zero,8110eee4 <__divsf3+0x414>
8110eed4:	11c0004c 	andi	r7,r2,1
8110eed8:	01000044 	movi	r4,1
8110eedc:	000d883a 	mov	r6,zero
8110eee0:	003f4b06 	br	8110ec10 <__reset+0xfb0eec10>
8110eee4:	280a91ba 	slli	r5,r5,6
8110eee8:	11c0004c 	andi	r7,r2,1
8110eeec:	0009883a 	mov	r4,zero
8110eef0:	280cd27a 	srli	r6,r5,9
8110eef4:	003f4606 	br	8110ec10 <__reset+0xfb0eec10>
8110eef8:	00802034 	movhi	r2,128
8110eefc:	89801034 	orhi	r6,r17,64
8110ef00:	10bfffc4 	addi	r2,r2,-1
8110ef04:	b00f883a 	mov	r7,r22
8110ef08:	308c703a 	and	r6,r6,r2
8110ef0c:	003f9206 	br	8110ed58 <__reset+0xfb0eed58>

8110ef10 <__mulsf3>:
8110ef10:	defff504 	addi	sp,sp,-44
8110ef14:	dc000115 	stw	r16,4(sp)
8110ef18:	2020d5fa 	srli	r16,r4,23
8110ef1c:	dd400615 	stw	r21,24(sp)
8110ef20:	202ad7fa 	srli	r21,r4,31
8110ef24:	dc800315 	stw	r18,12(sp)
8110ef28:	04802034 	movhi	r18,128
8110ef2c:	df000915 	stw	fp,36(sp)
8110ef30:	dd000515 	stw	r20,20(sp)
8110ef34:	94bfffc4 	addi	r18,r18,-1
8110ef38:	dfc00a15 	stw	ra,40(sp)
8110ef3c:	ddc00815 	stw	r23,32(sp)
8110ef40:	dd800715 	stw	r22,28(sp)
8110ef44:	dcc00415 	stw	r19,16(sp)
8110ef48:	dc400215 	stw	r17,8(sp)
8110ef4c:	84003fcc 	andi	r16,r16,255
8110ef50:	9124703a 	and	r18,r18,r4
8110ef54:	a829883a 	mov	r20,r21
8110ef58:	af003fcc 	andi	fp,r21,255
8110ef5c:	80005426 	beq	r16,zero,8110f0b0 <__mulsf3+0x1a0>
8110ef60:	00803fc4 	movi	r2,255
8110ef64:	80802f26 	beq	r16,r2,8110f024 <__mulsf3+0x114>
8110ef68:	91002034 	orhi	r4,r18,128
8110ef6c:	202490fa 	slli	r18,r4,3
8110ef70:	843fe044 	addi	r16,r16,-127
8110ef74:	0023883a 	mov	r17,zero
8110ef78:	002f883a 	mov	r23,zero
8110ef7c:	2804d5fa 	srli	r2,r5,23
8110ef80:	282cd7fa 	srli	r22,r5,31
8110ef84:	01002034 	movhi	r4,128
8110ef88:	213fffc4 	addi	r4,r4,-1
8110ef8c:	10803fcc 	andi	r2,r2,255
8110ef90:	2166703a 	and	r19,r4,r5
8110ef94:	b1803fcc 	andi	r6,r22,255
8110ef98:	10004c26 	beq	r2,zero,8110f0cc <__mulsf3+0x1bc>
8110ef9c:	00c03fc4 	movi	r3,255
8110efa0:	10c04726 	beq	r2,r3,8110f0c0 <__mulsf3+0x1b0>
8110efa4:	99002034 	orhi	r4,r19,128
8110efa8:	202690fa 	slli	r19,r4,3
8110efac:	10bfe044 	addi	r2,r2,-127
8110efb0:	0007883a 	mov	r3,zero
8110efb4:	80a1883a 	add	r16,r16,r2
8110efb8:	010003c4 	movi	r4,15
8110efbc:	1c44b03a 	or	r2,r3,r17
8110efc0:	b56af03a 	xor	r21,r22,r21
8110efc4:	81c00044 	addi	r7,r16,1
8110efc8:	20806b36 	bltu	r4,r2,8110f178 <__mulsf3+0x268>
8110efcc:	100490ba 	slli	r2,r2,2
8110efd0:	01204474 	movhi	r4,33041
8110efd4:	213bf904 	addi	r4,r4,-4124
8110efd8:	1105883a 	add	r2,r2,r4
8110efdc:	10800017 	ldw	r2,0(r2)
8110efe0:	1000683a 	jmp	r2
8110efe4:	8110f178 	rdprs	r4,r16,17349
8110efe8:	8110f038 	rdprs	r4,r16,17344
8110efec:	8110f038 	rdprs	r4,r16,17344
8110eff0:	8110f034 	orhi	r4,r16,17344
8110eff4:	8110f15c 	xori	r4,r16,17349
8110eff8:	8110f15c 	xori	r4,r16,17349
8110effc:	8110f148 	cmpgei	r4,r16,17349
8110f000:	8110f034 	orhi	r4,r16,17344
8110f004:	8110f15c 	xori	r4,r16,17349
8110f008:	8110f148 	cmpgei	r4,r16,17349
8110f00c:	8110f15c 	xori	r4,r16,17349
8110f010:	8110f034 	orhi	r4,r16,17344
8110f014:	8110f168 	cmpgeui	r4,r16,17349
8110f018:	8110f168 	cmpgeui	r4,r16,17349
8110f01c:	8110f168 	cmpgeui	r4,r16,17349
8110f020:	8110f244 	addi	r4,r16,17353
8110f024:	90003b1e 	bne	r18,zero,8110f114 <__mulsf3+0x204>
8110f028:	04400204 	movi	r17,8
8110f02c:	05c00084 	movi	r23,2
8110f030:	003fd206 	br	8110ef7c <__reset+0xfb0eef7c>
8110f034:	302b883a 	mov	r21,r6
8110f038:	00800084 	movi	r2,2
8110f03c:	18802626 	beq	r3,r2,8110f0d8 <__mulsf3+0x1c8>
8110f040:	008000c4 	movi	r2,3
8110f044:	1880ab26 	beq	r3,r2,8110f2f4 <__mulsf3+0x3e4>
8110f048:	00800044 	movi	r2,1
8110f04c:	1880a21e 	bne	r3,r2,8110f2d8 <__mulsf3+0x3c8>
8110f050:	a829883a 	mov	r20,r21
8110f054:	0007883a 	mov	r3,zero
8110f058:	0009883a 	mov	r4,zero
8110f05c:	18803fcc 	andi	r2,r3,255
8110f060:	100695fa 	slli	r3,r2,23
8110f064:	a0803fcc 	andi	r2,r20,255
8110f068:	100a97fa 	slli	r5,r2,31
8110f06c:	00802034 	movhi	r2,128
8110f070:	10bfffc4 	addi	r2,r2,-1
8110f074:	2084703a 	and	r2,r4,r2
8110f078:	10c4b03a 	or	r2,r2,r3
8110f07c:	1144b03a 	or	r2,r2,r5
8110f080:	dfc00a17 	ldw	ra,40(sp)
8110f084:	df000917 	ldw	fp,36(sp)
8110f088:	ddc00817 	ldw	r23,32(sp)
8110f08c:	dd800717 	ldw	r22,28(sp)
8110f090:	dd400617 	ldw	r21,24(sp)
8110f094:	dd000517 	ldw	r20,20(sp)
8110f098:	dcc00417 	ldw	r19,16(sp)
8110f09c:	dc800317 	ldw	r18,12(sp)
8110f0a0:	dc400217 	ldw	r17,8(sp)
8110f0a4:	dc000117 	ldw	r16,4(sp)
8110f0a8:	dec00b04 	addi	sp,sp,44
8110f0ac:	f800283a 	ret
8110f0b0:	90000d1e 	bne	r18,zero,8110f0e8 <__mulsf3+0x1d8>
8110f0b4:	04400104 	movi	r17,4
8110f0b8:	05c00044 	movi	r23,1
8110f0bc:	003faf06 	br	8110ef7c <__reset+0xfb0eef7c>
8110f0c0:	9806c03a 	cmpne	r3,r19,zero
8110f0c4:	18c00084 	addi	r3,r3,2
8110f0c8:	003fba06 	br	8110efb4 <__reset+0xfb0eefb4>
8110f0cc:	9800141e 	bne	r19,zero,8110f120 <__mulsf3+0x210>
8110f0d0:	00c00044 	movi	r3,1
8110f0d4:	003fb706 	br	8110efb4 <__reset+0xfb0eefb4>
8110f0d8:	a829883a 	mov	r20,r21
8110f0dc:	00ffffc4 	movi	r3,-1
8110f0e0:	0009883a 	mov	r4,zero
8110f0e4:	003fdd06 	br	8110f05c <__reset+0xfb0ef05c>
8110f0e8:	9009883a 	mov	r4,r18
8110f0ec:	d9400015 	stw	r5,0(sp)
8110f0f0:	110fef00 	call	8110fef0 <__clzsi2>
8110f0f4:	10fffec4 	addi	r3,r2,-5
8110f0f8:	10801d84 	addi	r2,r2,118
8110f0fc:	90e4983a 	sll	r18,r18,r3
8110f100:	00a1c83a 	sub	r16,zero,r2
8110f104:	0023883a 	mov	r17,zero
8110f108:	002f883a 	mov	r23,zero
8110f10c:	d9400017 	ldw	r5,0(sp)
8110f110:	003f9a06 	br	8110ef7c <__reset+0xfb0eef7c>
8110f114:	04400304 	movi	r17,12
8110f118:	05c000c4 	movi	r23,3
8110f11c:	003f9706 	br	8110ef7c <__reset+0xfb0eef7c>
8110f120:	9809883a 	mov	r4,r19
8110f124:	d9800015 	stw	r6,0(sp)
8110f128:	110fef00 	call	8110fef0 <__clzsi2>
8110f12c:	10fffec4 	addi	r3,r2,-5
8110f130:	10801d84 	addi	r2,r2,118
8110f134:	98e6983a 	sll	r19,r19,r3
8110f138:	0085c83a 	sub	r2,zero,r2
8110f13c:	0007883a 	mov	r3,zero
8110f140:	d9800017 	ldw	r6,0(sp)
8110f144:	003f9b06 	br	8110efb4 <__reset+0xfb0eefb4>
8110f148:	01002034 	movhi	r4,128
8110f14c:	0029883a 	mov	r20,zero
8110f150:	213fffc4 	addi	r4,r4,-1
8110f154:	00ffffc4 	movi	r3,-1
8110f158:	003fc006 	br	8110f05c <__reset+0xfb0ef05c>
8110f15c:	9027883a 	mov	r19,r18
8110f160:	b807883a 	mov	r3,r23
8110f164:	003fb406 	br	8110f038 <__reset+0xfb0ef038>
8110f168:	9027883a 	mov	r19,r18
8110f16c:	e02b883a 	mov	r21,fp
8110f170:	b807883a 	mov	r3,r23
8110f174:	003fb006 	br	8110f038 <__reset+0xfb0ef038>
8110f178:	9004d43a 	srli	r2,r18,16
8110f17c:	9810d43a 	srli	r8,r19,16
8110f180:	94bfffcc 	andi	r18,r18,65535
8110f184:	993fffcc 	andi	r4,r19,65535
8110f188:	910d383a 	mul	r6,r18,r4
8110f18c:	20a7383a 	mul	r19,r4,r2
8110f190:	9225383a 	mul	r18,r18,r8
8110f194:	3006d43a 	srli	r3,r6,16
8110f198:	1211383a 	mul	r8,r2,r8
8110f19c:	94e5883a 	add	r18,r18,r19
8110f1a0:	1c87883a 	add	r3,r3,r18
8110f1a4:	1cc0022e 	bgeu	r3,r19,8110f1b0 <__mulsf3+0x2a0>
8110f1a8:	00800074 	movhi	r2,1
8110f1ac:	4091883a 	add	r8,r8,r2
8110f1b0:	1804943a 	slli	r2,r3,16
8110f1b4:	31bfffcc 	andi	r6,r6,65535
8110f1b8:	1806d43a 	srli	r3,r3,16
8110f1bc:	1185883a 	add	r2,r2,r6
8110f1c0:	102691ba 	slli	r19,r2,6
8110f1c4:	1a07883a 	add	r3,r3,r8
8110f1c8:	1004d6ba 	srli	r2,r2,26
8110f1cc:	180891ba 	slli	r4,r3,6
8110f1d0:	9826c03a 	cmpne	r19,r19,zero
8110f1d4:	9884b03a 	or	r2,r19,r2
8110f1d8:	1126b03a 	or	r19,r2,r4
8110f1dc:	9882002c 	andhi	r2,r19,2048
8110f1e0:	10000426 	beq	r2,zero,8110f1f4 <__mulsf3+0x2e4>
8110f1e4:	9804d07a 	srli	r2,r19,1
8110f1e8:	9900004c 	andi	r4,r19,1
8110f1ec:	3821883a 	mov	r16,r7
8110f1f0:	1126b03a 	or	r19,r2,r4
8110f1f4:	80c01fc4 	addi	r3,r16,127
8110f1f8:	00c0210e 	bge	zero,r3,8110f280 <__mulsf3+0x370>
8110f1fc:	988001cc 	andi	r2,r19,7
8110f200:	10000426 	beq	r2,zero,8110f214 <__mulsf3+0x304>
8110f204:	988003cc 	andi	r2,r19,15
8110f208:	01000104 	movi	r4,4
8110f20c:	11000126 	beq	r2,r4,8110f214 <__mulsf3+0x304>
8110f210:	9927883a 	add	r19,r19,r4
8110f214:	9882002c 	andhi	r2,r19,2048
8110f218:	10000426 	beq	r2,zero,8110f22c <__mulsf3+0x31c>
8110f21c:	00be0034 	movhi	r2,63488
8110f220:	10bfffc4 	addi	r2,r2,-1
8110f224:	80c02004 	addi	r3,r16,128
8110f228:	98a6703a 	and	r19,r19,r2
8110f22c:	00803f84 	movi	r2,254
8110f230:	10ffa916 	blt	r2,r3,8110f0d8 <__reset+0xfb0ef0d8>
8110f234:	980891ba 	slli	r4,r19,6
8110f238:	a829883a 	mov	r20,r21
8110f23c:	2008d27a 	srli	r4,r4,9
8110f240:	003f8606 	br	8110f05c <__reset+0xfb0ef05c>
8110f244:	9080102c 	andhi	r2,r18,64
8110f248:	10000826 	beq	r2,zero,8110f26c <__mulsf3+0x35c>
8110f24c:	9880102c 	andhi	r2,r19,64
8110f250:	1000061e 	bne	r2,zero,8110f26c <__mulsf3+0x35c>
8110f254:	00802034 	movhi	r2,128
8110f258:	99001034 	orhi	r4,r19,64
8110f25c:	10bfffc4 	addi	r2,r2,-1
8110f260:	b029883a 	mov	r20,r22
8110f264:	2088703a 	and	r4,r4,r2
8110f268:	003fba06 	br	8110f154 <__reset+0xfb0ef154>
8110f26c:	00802034 	movhi	r2,128
8110f270:	91001034 	orhi	r4,r18,64
8110f274:	10bfffc4 	addi	r2,r2,-1
8110f278:	2088703a 	and	r4,r4,r2
8110f27c:	003fb506 	br	8110f154 <__reset+0xfb0ef154>
8110f280:	00800044 	movi	r2,1
8110f284:	10c7c83a 	sub	r3,r2,r3
8110f288:	008006c4 	movi	r2,27
8110f28c:	10ff7016 	blt	r2,r3,8110f050 <__reset+0xfb0ef050>
8110f290:	00800804 	movi	r2,32
8110f294:	10c5c83a 	sub	r2,r2,r3
8110f298:	9884983a 	sll	r2,r19,r2
8110f29c:	98c6d83a 	srl	r3,r19,r3
8110f2a0:	1004c03a 	cmpne	r2,r2,zero
8110f2a4:	1884b03a 	or	r2,r3,r2
8110f2a8:	10c001cc 	andi	r3,r2,7
8110f2ac:	18000426 	beq	r3,zero,8110f2c0 <__mulsf3+0x3b0>
8110f2b0:	10c003cc 	andi	r3,r2,15
8110f2b4:	01000104 	movi	r4,4
8110f2b8:	19000126 	beq	r3,r4,8110f2c0 <__mulsf3+0x3b0>
8110f2bc:	1105883a 	add	r2,r2,r4
8110f2c0:	10c1002c 	andhi	r3,r2,1024
8110f2c4:	18000626 	beq	r3,zero,8110f2e0 <__mulsf3+0x3d0>
8110f2c8:	a829883a 	mov	r20,r21
8110f2cc:	00c00044 	movi	r3,1
8110f2d0:	0009883a 	mov	r4,zero
8110f2d4:	003f6106 	br	8110f05c <__reset+0xfb0ef05c>
8110f2d8:	3821883a 	mov	r16,r7
8110f2dc:	003fc506 	br	8110f1f4 <__reset+0xfb0ef1f4>
8110f2e0:	100491ba 	slli	r2,r2,6
8110f2e4:	a829883a 	mov	r20,r21
8110f2e8:	0007883a 	mov	r3,zero
8110f2ec:	1008d27a 	srli	r4,r2,9
8110f2f0:	003f5a06 	br	8110f05c <__reset+0xfb0ef05c>
8110f2f4:	00802034 	movhi	r2,128
8110f2f8:	99001034 	orhi	r4,r19,64
8110f2fc:	10bfffc4 	addi	r2,r2,-1
8110f300:	a829883a 	mov	r20,r21
8110f304:	2088703a 	and	r4,r4,r2
8110f308:	003f9206 	br	8110f154 <__reset+0xfb0ef154>

8110f30c <__floatsisf>:
8110f30c:	defffd04 	addi	sp,sp,-12
8110f310:	dfc00215 	stw	ra,8(sp)
8110f314:	dc400115 	stw	r17,4(sp)
8110f318:	dc000015 	stw	r16,0(sp)
8110f31c:	20003526 	beq	r4,zero,8110f3f4 <__floatsisf+0xe8>
8110f320:	2021883a 	mov	r16,r4
8110f324:	2022d7fa 	srli	r17,r4,31
8110f328:	20003616 	blt	r4,zero,8110f404 <__floatsisf+0xf8>
8110f32c:	8009883a 	mov	r4,r16
8110f330:	110fef00 	call	8110fef0 <__clzsi2>
8110f334:	00c02784 	movi	r3,158
8110f338:	1887c83a 	sub	r3,r3,r2
8110f33c:	01002584 	movi	r4,150
8110f340:	20c01416 	blt	r4,r3,8110f394 <__floatsisf+0x88>
8110f344:	20c9c83a 	sub	r4,r4,r3
8110f348:	8120983a 	sll	r16,r16,r4
8110f34c:	00802034 	movhi	r2,128
8110f350:	10bfffc4 	addi	r2,r2,-1
8110f354:	8809883a 	mov	r4,r17
8110f358:	80a0703a 	and	r16,r16,r2
8110f35c:	18803fcc 	andi	r2,r3,255
8110f360:	100695fa 	slli	r3,r2,23
8110f364:	20803fcc 	andi	r2,r4,255
8110f368:	100897fa 	slli	r4,r2,31
8110f36c:	00802034 	movhi	r2,128
8110f370:	10bfffc4 	addi	r2,r2,-1
8110f374:	8084703a 	and	r2,r16,r2
8110f378:	10c4b03a 	or	r2,r2,r3
8110f37c:	1104b03a 	or	r2,r2,r4
8110f380:	dfc00217 	ldw	ra,8(sp)
8110f384:	dc400117 	ldw	r17,4(sp)
8110f388:	dc000017 	ldw	r16,0(sp)
8110f38c:	dec00304 	addi	sp,sp,12
8110f390:	f800283a 	ret
8110f394:	01002644 	movi	r4,153
8110f398:	20c01c16 	blt	r4,r3,8110f40c <__floatsisf+0x100>
8110f39c:	20c9c83a 	sub	r4,r4,r3
8110f3a0:	8120983a 	sll	r16,r16,r4
8110f3a4:	013f0034 	movhi	r4,64512
8110f3a8:	213fffc4 	addi	r4,r4,-1
8110f3ac:	814001cc 	andi	r5,r16,7
8110f3b0:	8108703a 	and	r4,r16,r4
8110f3b4:	28000426 	beq	r5,zero,8110f3c8 <__floatsisf+0xbc>
8110f3b8:	840003cc 	andi	r16,r16,15
8110f3bc:	01400104 	movi	r5,4
8110f3c0:	81400126 	beq	r16,r5,8110f3c8 <__floatsisf+0xbc>
8110f3c4:	2149883a 	add	r4,r4,r5
8110f3c8:	2141002c 	andhi	r5,r4,1024
8110f3cc:	28000526 	beq	r5,zero,8110f3e4 <__floatsisf+0xd8>
8110f3d0:	00c027c4 	movi	r3,159
8110f3d4:	1887c83a 	sub	r3,r3,r2
8110f3d8:	00bf0034 	movhi	r2,64512
8110f3dc:	10bfffc4 	addi	r2,r2,-1
8110f3e0:	2088703a 	and	r4,r4,r2
8110f3e4:	202091ba 	slli	r16,r4,6
8110f3e8:	8809883a 	mov	r4,r17
8110f3ec:	8020d27a 	srli	r16,r16,9
8110f3f0:	003fda06 	br	8110f35c <__reset+0xfb0ef35c>
8110f3f4:	0009883a 	mov	r4,zero
8110f3f8:	0007883a 	mov	r3,zero
8110f3fc:	0021883a 	mov	r16,zero
8110f400:	003fd606 	br	8110f35c <__reset+0xfb0ef35c>
8110f404:	0121c83a 	sub	r16,zero,r4
8110f408:	003fc806 	br	8110f32c <__reset+0xfb0ef32c>
8110f40c:	01002e44 	movi	r4,185
8110f410:	20c9c83a 	sub	r4,r4,r3
8110f414:	01400144 	movi	r5,5
8110f418:	8108983a 	sll	r4,r16,r4
8110f41c:	288bc83a 	sub	r5,r5,r2
8110f420:	8160d83a 	srl	r16,r16,r5
8110f424:	2008c03a 	cmpne	r4,r4,zero
8110f428:	8120b03a 	or	r16,r16,r4
8110f42c:	003fdd06 	br	8110f3a4 <__reset+0xfb0ef3a4>

8110f430 <__floatunsisf>:
8110f430:	defffe04 	addi	sp,sp,-8
8110f434:	dfc00115 	stw	ra,4(sp)
8110f438:	dc000015 	stw	r16,0(sp)
8110f43c:	20002c26 	beq	r4,zero,8110f4f0 <__floatunsisf+0xc0>
8110f440:	2021883a 	mov	r16,r4
8110f444:	110fef00 	call	8110fef0 <__clzsi2>
8110f448:	00c02784 	movi	r3,158
8110f44c:	1887c83a 	sub	r3,r3,r2
8110f450:	01002584 	movi	r4,150
8110f454:	20c00f16 	blt	r4,r3,8110f494 <__floatunsisf+0x64>
8110f458:	20c9c83a 	sub	r4,r4,r3
8110f45c:	8108983a 	sll	r4,r16,r4
8110f460:	00802034 	movhi	r2,128
8110f464:	10bfffc4 	addi	r2,r2,-1
8110f468:	2088703a 	and	r4,r4,r2
8110f46c:	18803fcc 	andi	r2,r3,255
8110f470:	100695fa 	slli	r3,r2,23
8110f474:	00802034 	movhi	r2,128
8110f478:	10bfffc4 	addi	r2,r2,-1
8110f47c:	2084703a 	and	r2,r4,r2
8110f480:	10c4b03a 	or	r2,r2,r3
8110f484:	dfc00117 	ldw	ra,4(sp)
8110f488:	dc000017 	ldw	r16,0(sp)
8110f48c:	dec00204 	addi	sp,sp,8
8110f490:	f800283a 	ret
8110f494:	01002644 	movi	r4,153
8110f498:	20c01816 	blt	r4,r3,8110f4fc <__floatunsisf+0xcc>
8110f49c:	20c9c83a 	sub	r4,r4,r3
8110f4a0:	8108983a 	sll	r4,r16,r4
8110f4a4:	017f0034 	movhi	r5,64512
8110f4a8:	297fffc4 	addi	r5,r5,-1
8110f4ac:	218001cc 	andi	r6,r4,7
8110f4b0:	214a703a 	and	r5,r4,r5
8110f4b4:	30000426 	beq	r6,zero,8110f4c8 <__floatunsisf+0x98>
8110f4b8:	210003cc 	andi	r4,r4,15
8110f4bc:	01800104 	movi	r6,4
8110f4c0:	21800126 	beq	r4,r6,8110f4c8 <__floatunsisf+0x98>
8110f4c4:	298b883a 	add	r5,r5,r6
8110f4c8:	2901002c 	andhi	r4,r5,1024
8110f4cc:	20000526 	beq	r4,zero,8110f4e4 <__floatunsisf+0xb4>
8110f4d0:	00c027c4 	movi	r3,159
8110f4d4:	1887c83a 	sub	r3,r3,r2
8110f4d8:	00bf0034 	movhi	r2,64512
8110f4dc:	10bfffc4 	addi	r2,r2,-1
8110f4e0:	288a703a 	and	r5,r5,r2
8110f4e4:	280891ba 	slli	r4,r5,6
8110f4e8:	2008d27a 	srli	r4,r4,9
8110f4ec:	003fdf06 	br	8110f46c <__reset+0xfb0ef46c>
8110f4f0:	0007883a 	mov	r3,zero
8110f4f4:	0009883a 	mov	r4,zero
8110f4f8:	003fdc06 	br	8110f46c <__reset+0xfb0ef46c>
8110f4fc:	01402e44 	movi	r5,185
8110f500:	28cbc83a 	sub	r5,r5,r3
8110f504:	01000144 	movi	r4,5
8110f508:	2089c83a 	sub	r4,r4,r2
8110f50c:	814a983a 	sll	r5,r16,r5
8110f510:	8108d83a 	srl	r4,r16,r4
8110f514:	2820c03a 	cmpne	r16,r5,zero
8110f518:	2408b03a 	or	r4,r4,r16
8110f51c:	003fe106 	br	8110f4a4 <__reset+0xfb0ef4a4>

8110f520 <__muldf3>:
8110f520:	defff304 	addi	sp,sp,-52
8110f524:	2804d53a 	srli	r2,r5,20
8110f528:	dd800915 	stw	r22,36(sp)
8110f52c:	282cd7fa 	srli	r22,r5,31
8110f530:	dc000315 	stw	r16,12(sp)
8110f534:	04000434 	movhi	r16,16
8110f538:	dd400815 	stw	r21,32(sp)
8110f53c:	dc800515 	stw	r18,20(sp)
8110f540:	843fffc4 	addi	r16,r16,-1
8110f544:	dfc00c15 	stw	ra,48(sp)
8110f548:	df000b15 	stw	fp,44(sp)
8110f54c:	ddc00a15 	stw	r23,40(sp)
8110f550:	dd000715 	stw	r20,28(sp)
8110f554:	dcc00615 	stw	r19,24(sp)
8110f558:	dc400415 	stw	r17,16(sp)
8110f55c:	1481ffcc 	andi	r18,r2,2047
8110f560:	2c20703a 	and	r16,r5,r16
8110f564:	b02b883a 	mov	r21,r22
8110f568:	b2403fcc 	andi	r9,r22,255
8110f56c:	90006026 	beq	r18,zero,8110f6f0 <__muldf3+0x1d0>
8110f570:	0081ffc4 	movi	r2,2047
8110f574:	2029883a 	mov	r20,r4
8110f578:	90803626 	beq	r18,r2,8110f654 <__muldf3+0x134>
8110f57c:	80800434 	orhi	r2,r16,16
8110f580:	100490fa 	slli	r2,r2,3
8110f584:	2020d77a 	srli	r16,r4,29
8110f588:	202890fa 	slli	r20,r4,3
8110f58c:	94bf0044 	addi	r18,r18,-1023
8110f590:	80a0b03a 	or	r16,r16,r2
8110f594:	0027883a 	mov	r19,zero
8110f598:	0039883a 	mov	fp,zero
8110f59c:	3804d53a 	srli	r2,r7,20
8110f5a0:	382ed7fa 	srli	r23,r7,31
8110f5a4:	04400434 	movhi	r17,16
8110f5a8:	8c7fffc4 	addi	r17,r17,-1
8110f5ac:	1081ffcc 	andi	r2,r2,2047
8110f5b0:	3011883a 	mov	r8,r6
8110f5b4:	3c62703a 	and	r17,r7,r17
8110f5b8:	ba803fcc 	andi	r10,r23,255
8110f5bc:	10006d26 	beq	r2,zero,8110f774 <__muldf3+0x254>
8110f5c0:	00c1ffc4 	movi	r3,2047
8110f5c4:	10c06526 	beq	r2,r3,8110f75c <__muldf3+0x23c>
8110f5c8:	88c00434 	orhi	r3,r17,16
8110f5cc:	180690fa 	slli	r3,r3,3
8110f5d0:	3022d77a 	srli	r17,r6,29
8110f5d4:	301090fa 	slli	r8,r6,3
8110f5d8:	10bf0044 	addi	r2,r2,-1023
8110f5dc:	88e2b03a 	or	r17,r17,r3
8110f5e0:	000b883a 	mov	r5,zero
8110f5e4:	9085883a 	add	r2,r18,r2
8110f5e8:	2cc8b03a 	or	r4,r5,r19
8110f5ec:	00c003c4 	movi	r3,15
8110f5f0:	bdacf03a 	xor	r22,r23,r22
8110f5f4:	12c00044 	addi	r11,r2,1
8110f5f8:	19009936 	bltu	r3,r4,8110f860 <__muldf3+0x340>
8110f5fc:	200890ba 	slli	r4,r4,2
8110f600:	00e04474 	movhi	r3,33041
8110f604:	18fd8504 	addi	r3,r3,-2540
8110f608:	20c9883a 	add	r4,r4,r3
8110f60c:	20c00017 	ldw	r3,0(r4)
8110f610:	1800683a 	jmp	r3
8110f614:	8110f860 	cmpeqi	r4,r16,17377
8110f618:	8110f674 	orhi	r4,r16,17369
8110f61c:	8110f674 	orhi	r4,r16,17369
8110f620:	8110f670 	cmpltui	r4,r16,17369
8110f624:	8110f83c 	xorhi	r4,r16,17376
8110f628:	8110f83c 	xorhi	r4,r16,17376
8110f62c:	8110f824 	muli	r4,r16,17376
8110f630:	8110f670 	cmpltui	r4,r16,17369
8110f634:	8110f83c 	xorhi	r4,r16,17376
8110f638:	8110f824 	muli	r4,r16,17376
8110f63c:	8110f83c 	xorhi	r4,r16,17376
8110f640:	8110f670 	cmpltui	r4,r16,17369
8110f644:	8110f84c 	andi	r4,r16,17377
8110f648:	8110f84c 	andi	r4,r16,17377
8110f64c:	8110f84c 	andi	r4,r16,17377
8110f650:	8110fa68 	cmpgeui	r4,r16,17385
8110f654:	2404b03a 	or	r2,r4,r16
8110f658:	10006f1e 	bne	r2,zero,8110f818 <__muldf3+0x2f8>
8110f65c:	04c00204 	movi	r19,8
8110f660:	0021883a 	mov	r16,zero
8110f664:	0029883a 	mov	r20,zero
8110f668:	07000084 	movi	fp,2
8110f66c:	003fcb06 	br	8110f59c <__reset+0xfb0ef59c>
8110f670:	502d883a 	mov	r22,r10
8110f674:	00800084 	movi	r2,2
8110f678:	28805726 	beq	r5,r2,8110f7d8 <__muldf3+0x2b8>
8110f67c:	008000c4 	movi	r2,3
8110f680:	28816626 	beq	r5,r2,8110fc1c <__muldf3+0x6fc>
8110f684:	00800044 	movi	r2,1
8110f688:	2881411e 	bne	r5,r2,8110fb90 <__muldf3+0x670>
8110f68c:	b02b883a 	mov	r21,r22
8110f690:	0005883a 	mov	r2,zero
8110f694:	000b883a 	mov	r5,zero
8110f698:	0029883a 	mov	r20,zero
8110f69c:	1004953a 	slli	r2,r2,20
8110f6a0:	a8c03fcc 	andi	r3,r21,255
8110f6a4:	04400434 	movhi	r17,16
8110f6a8:	8c7fffc4 	addi	r17,r17,-1
8110f6ac:	180697fa 	slli	r3,r3,31
8110f6b0:	2c4a703a 	and	r5,r5,r17
8110f6b4:	288ab03a 	or	r5,r5,r2
8110f6b8:	28c6b03a 	or	r3,r5,r3
8110f6bc:	a005883a 	mov	r2,r20
8110f6c0:	dfc00c17 	ldw	ra,48(sp)
8110f6c4:	df000b17 	ldw	fp,44(sp)
8110f6c8:	ddc00a17 	ldw	r23,40(sp)
8110f6cc:	dd800917 	ldw	r22,36(sp)
8110f6d0:	dd400817 	ldw	r21,32(sp)
8110f6d4:	dd000717 	ldw	r20,28(sp)
8110f6d8:	dcc00617 	ldw	r19,24(sp)
8110f6dc:	dc800517 	ldw	r18,20(sp)
8110f6e0:	dc400417 	ldw	r17,16(sp)
8110f6e4:	dc000317 	ldw	r16,12(sp)
8110f6e8:	dec00d04 	addi	sp,sp,52
8110f6ec:	f800283a 	ret
8110f6f0:	2404b03a 	or	r2,r4,r16
8110f6f4:	2027883a 	mov	r19,r4
8110f6f8:	10004226 	beq	r2,zero,8110f804 <__muldf3+0x2e4>
8110f6fc:	8000fc26 	beq	r16,zero,8110faf0 <__muldf3+0x5d0>
8110f700:	8009883a 	mov	r4,r16
8110f704:	d9800215 	stw	r6,8(sp)
8110f708:	d9c00015 	stw	r7,0(sp)
8110f70c:	da400115 	stw	r9,4(sp)
8110f710:	110fef00 	call	8110fef0 <__clzsi2>
8110f714:	d9800217 	ldw	r6,8(sp)
8110f718:	d9c00017 	ldw	r7,0(sp)
8110f71c:	da400117 	ldw	r9,4(sp)
8110f720:	113ffd44 	addi	r4,r2,-11
8110f724:	00c00704 	movi	r3,28
8110f728:	1900ed16 	blt	r3,r4,8110fae0 <__muldf3+0x5c0>
8110f72c:	00c00744 	movi	r3,29
8110f730:	147ffe04 	addi	r17,r2,-8
8110f734:	1907c83a 	sub	r3,r3,r4
8110f738:	8460983a 	sll	r16,r16,r17
8110f73c:	98c6d83a 	srl	r3,r19,r3
8110f740:	9c68983a 	sll	r20,r19,r17
8110f744:	1c20b03a 	or	r16,r3,r16
8110f748:	1080fcc4 	addi	r2,r2,1011
8110f74c:	00a5c83a 	sub	r18,zero,r2
8110f750:	0027883a 	mov	r19,zero
8110f754:	0039883a 	mov	fp,zero
8110f758:	003f9006 	br	8110f59c <__reset+0xfb0ef59c>
8110f75c:	3446b03a 	or	r3,r6,r17
8110f760:	1800261e 	bne	r3,zero,8110f7fc <__muldf3+0x2dc>
8110f764:	0023883a 	mov	r17,zero
8110f768:	0011883a 	mov	r8,zero
8110f76c:	01400084 	movi	r5,2
8110f770:	003f9c06 	br	8110f5e4 <__reset+0xfb0ef5e4>
8110f774:	3446b03a 	or	r3,r6,r17
8110f778:	18001c26 	beq	r3,zero,8110f7ec <__muldf3+0x2cc>
8110f77c:	8800ce26 	beq	r17,zero,8110fab8 <__muldf3+0x598>
8110f780:	8809883a 	mov	r4,r17
8110f784:	d9800215 	stw	r6,8(sp)
8110f788:	da400115 	stw	r9,4(sp)
8110f78c:	da800015 	stw	r10,0(sp)
8110f790:	110fef00 	call	8110fef0 <__clzsi2>
8110f794:	d9800217 	ldw	r6,8(sp)
8110f798:	da400117 	ldw	r9,4(sp)
8110f79c:	da800017 	ldw	r10,0(sp)
8110f7a0:	113ffd44 	addi	r4,r2,-11
8110f7a4:	00c00704 	movi	r3,28
8110f7a8:	1900bf16 	blt	r3,r4,8110faa8 <__muldf3+0x588>
8110f7ac:	00c00744 	movi	r3,29
8110f7b0:	123ffe04 	addi	r8,r2,-8
8110f7b4:	1907c83a 	sub	r3,r3,r4
8110f7b8:	8a22983a 	sll	r17,r17,r8
8110f7bc:	30c6d83a 	srl	r3,r6,r3
8110f7c0:	3210983a 	sll	r8,r6,r8
8110f7c4:	1c62b03a 	or	r17,r3,r17
8110f7c8:	1080fcc4 	addi	r2,r2,1011
8110f7cc:	0085c83a 	sub	r2,zero,r2
8110f7d0:	000b883a 	mov	r5,zero
8110f7d4:	003f8306 	br	8110f5e4 <__reset+0xfb0ef5e4>
8110f7d8:	b02b883a 	mov	r21,r22
8110f7dc:	0081ffc4 	movi	r2,2047
8110f7e0:	000b883a 	mov	r5,zero
8110f7e4:	0029883a 	mov	r20,zero
8110f7e8:	003fac06 	br	8110f69c <__reset+0xfb0ef69c>
8110f7ec:	0023883a 	mov	r17,zero
8110f7f0:	0011883a 	mov	r8,zero
8110f7f4:	01400044 	movi	r5,1
8110f7f8:	003f7a06 	br	8110f5e4 <__reset+0xfb0ef5e4>
8110f7fc:	014000c4 	movi	r5,3
8110f800:	003f7806 	br	8110f5e4 <__reset+0xfb0ef5e4>
8110f804:	04c00104 	movi	r19,4
8110f808:	0021883a 	mov	r16,zero
8110f80c:	0029883a 	mov	r20,zero
8110f810:	07000044 	movi	fp,1
8110f814:	003f6106 	br	8110f59c <__reset+0xfb0ef59c>
8110f818:	04c00304 	movi	r19,12
8110f81c:	070000c4 	movi	fp,3
8110f820:	003f5e06 	br	8110f59c <__reset+0xfb0ef59c>
8110f824:	01400434 	movhi	r5,16
8110f828:	002b883a 	mov	r21,zero
8110f82c:	297fffc4 	addi	r5,r5,-1
8110f830:	053fffc4 	movi	r20,-1
8110f834:	0081ffc4 	movi	r2,2047
8110f838:	003f9806 	br	8110f69c <__reset+0xfb0ef69c>
8110f83c:	8023883a 	mov	r17,r16
8110f840:	a011883a 	mov	r8,r20
8110f844:	e00b883a 	mov	r5,fp
8110f848:	003f8a06 	br	8110f674 <__reset+0xfb0ef674>
8110f84c:	8023883a 	mov	r17,r16
8110f850:	a011883a 	mov	r8,r20
8110f854:	482d883a 	mov	r22,r9
8110f858:	e00b883a 	mov	r5,fp
8110f85c:	003f8506 	br	8110f674 <__reset+0xfb0ef674>
8110f860:	a00ad43a 	srli	r5,r20,16
8110f864:	401ad43a 	srli	r13,r8,16
8110f868:	a53fffcc 	andi	r20,r20,65535
8110f86c:	423fffcc 	andi	r8,r8,65535
8110f870:	4519383a 	mul	r12,r8,r20
8110f874:	4147383a 	mul	r3,r8,r5
8110f878:	6d09383a 	mul	r4,r13,r20
8110f87c:	600cd43a 	srli	r6,r12,16
8110f880:	2b5d383a 	mul	r14,r5,r13
8110f884:	20c9883a 	add	r4,r4,r3
8110f888:	310d883a 	add	r6,r6,r4
8110f88c:	30c0022e 	bgeu	r6,r3,8110f898 <__muldf3+0x378>
8110f890:	00c00074 	movhi	r3,1
8110f894:	70dd883a 	add	r14,r14,r3
8110f898:	8826d43a 	srli	r19,r17,16
8110f89c:	8bffffcc 	andi	r15,r17,65535
8110f8a0:	7d23383a 	mul	r17,r15,r20
8110f8a4:	7949383a 	mul	r4,r15,r5
8110f8a8:	9d29383a 	mul	r20,r19,r20
8110f8ac:	8814d43a 	srli	r10,r17,16
8110f8b0:	3012943a 	slli	r9,r6,16
8110f8b4:	a129883a 	add	r20,r20,r4
8110f8b8:	633fffcc 	andi	r12,r12,65535
8110f8bc:	5515883a 	add	r10,r10,r20
8110f8c0:	3006d43a 	srli	r3,r6,16
8110f8c4:	4b13883a 	add	r9,r9,r12
8110f8c8:	2ccb383a 	mul	r5,r5,r19
8110f8cc:	5100022e 	bgeu	r10,r4,8110f8d8 <__muldf3+0x3b8>
8110f8d0:	01000074 	movhi	r4,1
8110f8d4:	290b883a 	add	r5,r5,r4
8110f8d8:	802ad43a 	srli	r21,r16,16
8110f8dc:	843fffcc 	andi	r16,r16,65535
8110f8e0:	440d383a 	mul	r6,r8,r16
8110f8e4:	4565383a 	mul	r18,r8,r21
8110f8e8:	8349383a 	mul	r4,r16,r13
8110f8ec:	500e943a 	slli	r7,r10,16
8110f8f0:	3010d43a 	srli	r8,r6,16
8110f8f4:	5028d43a 	srli	r20,r10,16
8110f8f8:	2489883a 	add	r4,r4,r18
8110f8fc:	8abfffcc 	andi	r10,r17,65535
8110f900:	3a95883a 	add	r10,r7,r10
8110f904:	4119883a 	add	r12,r8,r4
8110f908:	a169883a 	add	r20,r20,r5
8110f90c:	1a87883a 	add	r3,r3,r10
8110f910:	6d5b383a 	mul	r13,r13,r21
8110f914:	6480022e 	bgeu	r12,r18,8110f920 <__muldf3+0x400>
8110f918:	01000074 	movhi	r4,1
8110f91c:	691b883a 	add	r13,r13,r4
8110f920:	7c25383a 	mul	r18,r15,r16
8110f924:	7d4b383a 	mul	r5,r15,r21
8110f928:	84cf383a 	mul	r7,r16,r19
8110f92c:	901ed43a 	srli	r15,r18,16
8110f930:	6008d43a 	srli	r4,r12,16
8110f934:	6010943a 	slli	r8,r12,16
8110f938:	394f883a 	add	r7,r7,r5
8110f93c:	333fffcc 	andi	r12,r6,65535
8110f940:	79df883a 	add	r15,r15,r7
8110f944:	235b883a 	add	r13,r4,r13
8110f948:	9d63383a 	mul	r17,r19,r21
8110f94c:	4309883a 	add	r4,r8,r12
8110f950:	7940022e 	bgeu	r15,r5,8110f95c <__muldf3+0x43c>
8110f954:	01400074 	movhi	r5,1
8110f958:	8963883a 	add	r17,r17,r5
8110f95c:	780a943a 	slli	r5,r15,16
8110f960:	91bfffcc 	andi	r6,r18,65535
8110f964:	70c7883a 	add	r3,r14,r3
8110f968:	298d883a 	add	r6,r5,r6
8110f96c:	1a8f803a 	cmpltu	r7,r3,r10
8110f970:	350b883a 	add	r5,r6,r20
8110f974:	20c7883a 	add	r3,r4,r3
8110f978:	3955883a 	add	r10,r7,r5
8110f97c:	1909803a 	cmpltu	r4,r3,r4
8110f980:	6a91883a 	add	r8,r13,r10
8110f984:	780cd43a 	srli	r6,r15,16
8110f988:	2219883a 	add	r12,r4,r8
8110f98c:	2d0b803a 	cmpltu	r5,r5,r20
8110f990:	51cf803a 	cmpltu	r7,r10,r7
8110f994:	29ceb03a 	or	r7,r5,r7
8110f998:	4351803a 	cmpltu	r8,r8,r13
8110f99c:	610b803a 	cmpltu	r5,r12,r4
8110f9a0:	4148b03a 	or	r4,r8,r5
8110f9a4:	398f883a 	add	r7,r7,r6
8110f9a8:	3909883a 	add	r4,r7,r4
8110f9ac:	1810927a 	slli	r8,r3,9
8110f9b0:	2449883a 	add	r4,r4,r17
8110f9b4:	2008927a 	slli	r4,r4,9
8110f9b8:	6022d5fa 	srli	r17,r12,23
8110f9bc:	1806d5fa 	srli	r3,r3,23
8110f9c0:	4252b03a 	or	r9,r8,r9
8110f9c4:	600a927a 	slli	r5,r12,9
8110f9c8:	4810c03a 	cmpne	r8,r9,zero
8110f9cc:	2462b03a 	or	r17,r4,r17
8110f9d0:	40c6b03a 	or	r3,r8,r3
8110f9d4:	8900402c 	andhi	r4,r17,256
8110f9d8:	1950b03a 	or	r8,r3,r5
8110f9dc:	20000726 	beq	r4,zero,8110f9fc <__muldf3+0x4dc>
8110f9e0:	4006d07a 	srli	r3,r8,1
8110f9e4:	880497fa 	slli	r2,r17,31
8110f9e8:	4200004c 	andi	r8,r8,1
8110f9ec:	8822d07a 	srli	r17,r17,1
8110f9f0:	1a10b03a 	or	r8,r3,r8
8110f9f4:	1210b03a 	or	r8,r2,r8
8110f9f8:	5805883a 	mov	r2,r11
8110f9fc:	1140ffc4 	addi	r5,r2,1023
8110fa00:	0140440e 	bge	zero,r5,8110fb14 <__muldf3+0x5f4>
8110fa04:	40c001cc 	andi	r3,r8,7
8110fa08:	18000726 	beq	r3,zero,8110fa28 <__muldf3+0x508>
8110fa0c:	40c003cc 	andi	r3,r8,15
8110fa10:	01000104 	movi	r4,4
8110fa14:	19000426 	beq	r3,r4,8110fa28 <__muldf3+0x508>
8110fa18:	4107883a 	add	r3,r8,r4
8110fa1c:	1a11803a 	cmpltu	r8,r3,r8
8110fa20:	8a23883a 	add	r17,r17,r8
8110fa24:	1811883a 	mov	r8,r3
8110fa28:	88c0402c 	andhi	r3,r17,256
8110fa2c:	18000426 	beq	r3,zero,8110fa40 <__muldf3+0x520>
8110fa30:	11410004 	addi	r5,r2,1024
8110fa34:	00bfc034 	movhi	r2,65280
8110fa38:	10bfffc4 	addi	r2,r2,-1
8110fa3c:	88a2703a 	and	r17,r17,r2
8110fa40:	0081ff84 	movi	r2,2046
8110fa44:	117f6416 	blt	r2,r5,8110f7d8 <__reset+0xfb0ef7d8>
8110fa48:	8828977a 	slli	r20,r17,29
8110fa4c:	4010d0fa 	srli	r8,r8,3
8110fa50:	8822927a 	slli	r17,r17,9
8110fa54:	2881ffcc 	andi	r2,r5,2047
8110fa58:	a228b03a 	or	r20,r20,r8
8110fa5c:	880ad33a 	srli	r5,r17,12
8110fa60:	b02b883a 	mov	r21,r22
8110fa64:	003f0d06 	br	8110f69c <__reset+0xfb0ef69c>
8110fa68:	8080022c 	andhi	r2,r16,8
8110fa6c:	10000926 	beq	r2,zero,8110fa94 <__muldf3+0x574>
8110fa70:	8880022c 	andhi	r2,r17,8
8110fa74:	1000071e 	bne	r2,zero,8110fa94 <__muldf3+0x574>
8110fa78:	00800434 	movhi	r2,16
8110fa7c:	89400234 	orhi	r5,r17,8
8110fa80:	10bfffc4 	addi	r2,r2,-1
8110fa84:	b82b883a 	mov	r21,r23
8110fa88:	288a703a 	and	r5,r5,r2
8110fa8c:	4029883a 	mov	r20,r8
8110fa90:	003f6806 	br	8110f834 <__reset+0xfb0ef834>
8110fa94:	00800434 	movhi	r2,16
8110fa98:	81400234 	orhi	r5,r16,8
8110fa9c:	10bfffc4 	addi	r2,r2,-1
8110faa0:	288a703a 	and	r5,r5,r2
8110faa4:	003f6306 	br	8110f834 <__reset+0xfb0ef834>
8110faa8:	147ff604 	addi	r17,r2,-40
8110faac:	3462983a 	sll	r17,r6,r17
8110fab0:	0011883a 	mov	r8,zero
8110fab4:	003f4406 	br	8110f7c8 <__reset+0xfb0ef7c8>
8110fab8:	3009883a 	mov	r4,r6
8110fabc:	d9800215 	stw	r6,8(sp)
8110fac0:	da400115 	stw	r9,4(sp)
8110fac4:	da800015 	stw	r10,0(sp)
8110fac8:	110fef00 	call	8110fef0 <__clzsi2>
8110facc:	10800804 	addi	r2,r2,32
8110fad0:	da800017 	ldw	r10,0(sp)
8110fad4:	da400117 	ldw	r9,4(sp)
8110fad8:	d9800217 	ldw	r6,8(sp)
8110fadc:	003f3006 	br	8110f7a0 <__reset+0xfb0ef7a0>
8110fae0:	143ff604 	addi	r16,r2,-40
8110fae4:	9c20983a 	sll	r16,r19,r16
8110fae8:	0029883a 	mov	r20,zero
8110faec:	003f1606 	br	8110f748 <__reset+0xfb0ef748>
8110faf0:	d9800215 	stw	r6,8(sp)
8110faf4:	d9c00015 	stw	r7,0(sp)
8110faf8:	da400115 	stw	r9,4(sp)
8110fafc:	110fef00 	call	8110fef0 <__clzsi2>
8110fb00:	10800804 	addi	r2,r2,32
8110fb04:	da400117 	ldw	r9,4(sp)
8110fb08:	d9c00017 	ldw	r7,0(sp)
8110fb0c:	d9800217 	ldw	r6,8(sp)
8110fb10:	003f0306 	br	8110f720 <__reset+0xfb0ef720>
8110fb14:	00c00044 	movi	r3,1
8110fb18:	1947c83a 	sub	r3,r3,r5
8110fb1c:	00800e04 	movi	r2,56
8110fb20:	10feda16 	blt	r2,r3,8110f68c <__reset+0xfb0ef68c>
8110fb24:	008007c4 	movi	r2,31
8110fb28:	10c01b16 	blt	r2,r3,8110fb98 <__muldf3+0x678>
8110fb2c:	00800804 	movi	r2,32
8110fb30:	10c5c83a 	sub	r2,r2,r3
8110fb34:	888a983a 	sll	r5,r17,r2
8110fb38:	40c8d83a 	srl	r4,r8,r3
8110fb3c:	4084983a 	sll	r2,r8,r2
8110fb40:	88e2d83a 	srl	r17,r17,r3
8110fb44:	2906b03a 	or	r3,r5,r4
8110fb48:	1004c03a 	cmpne	r2,r2,zero
8110fb4c:	1886b03a 	or	r3,r3,r2
8110fb50:	188001cc 	andi	r2,r3,7
8110fb54:	10000726 	beq	r2,zero,8110fb74 <__muldf3+0x654>
8110fb58:	188003cc 	andi	r2,r3,15
8110fb5c:	01000104 	movi	r4,4
8110fb60:	11000426 	beq	r2,r4,8110fb74 <__muldf3+0x654>
8110fb64:	1805883a 	mov	r2,r3
8110fb68:	10c00104 	addi	r3,r2,4
8110fb6c:	1885803a 	cmpltu	r2,r3,r2
8110fb70:	88a3883a 	add	r17,r17,r2
8110fb74:	8880202c 	andhi	r2,r17,128
8110fb78:	10001c26 	beq	r2,zero,8110fbec <__muldf3+0x6cc>
8110fb7c:	b02b883a 	mov	r21,r22
8110fb80:	00800044 	movi	r2,1
8110fb84:	000b883a 	mov	r5,zero
8110fb88:	0029883a 	mov	r20,zero
8110fb8c:	003ec306 	br	8110f69c <__reset+0xfb0ef69c>
8110fb90:	5805883a 	mov	r2,r11
8110fb94:	003f9906 	br	8110f9fc <__reset+0xfb0ef9fc>
8110fb98:	00bff844 	movi	r2,-31
8110fb9c:	1145c83a 	sub	r2,r2,r5
8110fba0:	8888d83a 	srl	r4,r17,r2
8110fba4:	00800804 	movi	r2,32
8110fba8:	18801a26 	beq	r3,r2,8110fc14 <__muldf3+0x6f4>
8110fbac:	00801004 	movi	r2,64
8110fbb0:	10c5c83a 	sub	r2,r2,r3
8110fbb4:	8884983a 	sll	r2,r17,r2
8110fbb8:	1204b03a 	or	r2,r2,r8
8110fbbc:	1004c03a 	cmpne	r2,r2,zero
8110fbc0:	2084b03a 	or	r2,r4,r2
8110fbc4:	144001cc 	andi	r17,r2,7
8110fbc8:	88000d1e 	bne	r17,zero,8110fc00 <__muldf3+0x6e0>
8110fbcc:	000b883a 	mov	r5,zero
8110fbd0:	1028d0fa 	srli	r20,r2,3
8110fbd4:	b02b883a 	mov	r21,r22
8110fbd8:	0005883a 	mov	r2,zero
8110fbdc:	a468b03a 	or	r20,r20,r17
8110fbe0:	003eae06 	br	8110f69c <__reset+0xfb0ef69c>
8110fbe4:	1007883a 	mov	r3,r2
8110fbe8:	0023883a 	mov	r17,zero
8110fbec:	880a927a 	slli	r5,r17,9
8110fbf0:	1805883a 	mov	r2,r3
8110fbf4:	8822977a 	slli	r17,r17,29
8110fbf8:	280ad33a 	srli	r5,r5,12
8110fbfc:	003ff406 	br	8110fbd0 <__reset+0xfb0efbd0>
8110fc00:	10c003cc 	andi	r3,r2,15
8110fc04:	01000104 	movi	r4,4
8110fc08:	193ff626 	beq	r3,r4,8110fbe4 <__reset+0xfb0efbe4>
8110fc0c:	0023883a 	mov	r17,zero
8110fc10:	003fd506 	br	8110fb68 <__reset+0xfb0efb68>
8110fc14:	0005883a 	mov	r2,zero
8110fc18:	003fe706 	br	8110fbb8 <__reset+0xfb0efbb8>
8110fc1c:	00800434 	movhi	r2,16
8110fc20:	89400234 	orhi	r5,r17,8
8110fc24:	10bfffc4 	addi	r2,r2,-1
8110fc28:	b02b883a 	mov	r21,r22
8110fc2c:	288a703a 	and	r5,r5,r2
8110fc30:	4029883a 	mov	r20,r8
8110fc34:	003eff06 	br	8110f834 <__reset+0xfb0ef834>

8110fc38 <__extendsfdf2>:
8110fc38:	200ad5fa 	srli	r5,r4,23
8110fc3c:	defffd04 	addi	sp,sp,-12
8110fc40:	dc400115 	stw	r17,4(sp)
8110fc44:	29403fcc 	andi	r5,r5,255
8110fc48:	29800044 	addi	r6,r5,1
8110fc4c:	04402034 	movhi	r17,128
8110fc50:	dc000015 	stw	r16,0(sp)
8110fc54:	8c7fffc4 	addi	r17,r17,-1
8110fc58:	dfc00215 	stw	ra,8(sp)
8110fc5c:	31803fcc 	andi	r6,r6,255
8110fc60:	00800044 	movi	r2,1
8110fc64:	8922703a 	and	r17,r17,r4
8110fc68:	2020d7fa 	srli	r16,r4,31
8110fc6c:	1180110e 	bge	r2,r6,8110fcb4 <__extendsfdf2+0x7c>
8110fc70:	880cd0fa 	srli	r6,r17,3
8110fc74:	8822977a 	slli	r17,r17,29
8110fc78:	2940e004 	addi	r5,r5,896
8110fc7c:	2941ffcc 	andi	r5,r5,2047
8110fc80:	2804953a 	slli	r2,r5,20
8110fc84:	01400434 	movhi	r5,16
8110fc88:	800697fa 	slli	r3,r16,31
8110fc8c:	297fffc4 	addi	r5,r5,-1
8110fc90:	314a703a 	and	r5,r6,r5
8110fc94:	288ab03a 	or	r5,r5,r2
8110fc98:	28c6b03a 	or	r3,r5,r3
8110fc9c:	8805883a 	mov	r2,r17
8110fca0:	dfc00217 	ldw	ra,8(sp)
8110fca4:	dc400117 	ldw	r17,4(sp)
8110fca8:	dc000017 	ldw	r16,0(sp)
8110fcac:	dec00304 	addi	sp,sp,12
8110fcb0:	f800283a 	ret
8110fcb4:	2800111e 	bne	r5,zero,8110fcfc <__extendsfdf2+0xc4>
8110fcb8:	88001c26 	beq	r17,zero,8110fd2c <__extendsfdf2+0xf4>
8110fcbc:	8809883a 	mov	r4,r17
8110fcc0:	110fef00 	call	8110fef0 <__clzsi2>
8110fcc4:	00c00284 	movi	r3,10
8110fcc8:	18801b16 	blt	r3,r2,8110fd38 <__extendsfdf2+0x100>
8110fccc:	018002c4 	movi	r6,11
8110fcd0:	308dc83a 	sub	r6,r6,r2
8110fcd4:	11000544 	addi	r4,r2,21
8110fcd8:	8986d83a 	srl	r3,r17,r6
8110fcdc:	8922983a 	sll	r17,r17,r4
8110fce0:	0180e244 	movi	r6,905
8110fce4:	01400434 	movhi	r5,16
8110fce8:	3085c83a 	sub	r2,r6,r2
8110fcec:	297fffc4 	addi	r5,r5,-1
8110fcf0:	194c703a 	and	r6,r3,r5
8110fcf4:	1141ffcc 	andi	r5,r2,2047
8110fcf8:	003fe006 	br	8110fc7c <__reset+0xfb0efc7c>
8110fcfc:	88000826 	beq	r17,zero,8110fd20 <__extendsfdf2+0xe8>
8110fd00:	880cd0fa 	srli	r6,r17,3
8110fd04:	00800434 	movhi	r2,16
8110fd08:	10bfffc4 	addi	r2,r2,-1
8110fd0c:	31800234 	orhi	r6,r6,8
8110fd10:	8822977a 	slli	r17,r17,29
8110fd14:	308c703a 	and	r6,r6,r2
8110fd18:	0141ffc4 	movi	r5,2047
8110fd1c:	003fd706 	br	8110fc7c <__reset+0xfb0efc7c>
8110fd20:	0141ffc4 	movi	r5,2047
8110fd24:	000d883a 	mov	r6,zero
8110fd28:	003fd406 	br	8110fc7c <__reset+0xfb0efc7c>
8110fd2c:	000b883a 	mov	r5,zero
8110fd30:	000d883a 	mov	r6,zero
8110fd34:	003fd106 	br	8110fc7c <__reset+0xfb0efc7c>
8110fd38:	11bffd44 	addi	r6,r2,-11
8110fd3c:	8986983a 	sll	r3,r17,r6
8110fd40:	0023883a 	mov	r17,zero
8110fd44:	003fe606 	br	8110fce0 <__reset+0xfb0efce0>

8110fd48 <__truncdfsf2>:
8110fd48:	2810d53a 	srli	r8,r5,20
8110fd4c:	01c00434 	movhi	r7,16
8110fd50:	39ffffc4 	addi	r7,r7,-1
8110fd54:	29ce703a 	and	r7,r5,r7
8110fd58:	4201ffcc 	andi	r8,r8,2047
8110fd5c:	380e90fa 	slli	r7,r7,3
8110fd60:	200cd77a 	srli	r6,r4,29
8110fd64:	42400044 	addi	r9,r8,1
8110fd68:	4a41ffcc 	andi	r9,r9,2047
8110fd6c:	00c00044 	movi	r3,1
8110fd70:	280ad7fa 	srli	r5,r5,31
8110fd74:	31ceb03a 	or	r7,r6,r7
8110fd78:	200490fa 	slli	r2,r4,3
8110fd7c:	1a40230e 	bge	r3,r9,8110fe0c <__truncdfsf2+0xc4>
8110fd80:	40ff2004 	addi	r3,r8,-896
8110fd84:	01803f84 	movi	r6,254
8110fd88:	30c01516 	blt	r6,r3,8110fde0 <__truncdfsf2+0x98>
8110fd8c:	00c0380e 	bge	zero,r3,8110fe70 <__truncdfsf2+0x128>
8110fd90:	200c91ba 	slli	r6,r4,6
8110fd94:	380e90fa 	slli	r7,r7,3
8110fd98:	1004d77a 	srli	r2,r2,29
8110fd9c:	300cc03a 	cmpne	r6,r6,zero
8110fda0:	31ccb03a 	or	r6,r6,r7
8110fda4:	308cb03a 	or	r6,r6,r2
8110fda8:	308001cc 	andi	r2,r6,7
8110fdac:	10000426 	beq	r2,zero,8110fdc0 <__truncdfsf2+0x78>
8110fdb0:	308003cc 	andi	r2,r6,15
8110fdb4:	01000104 	movi	r4,4
8110fdb8:	11000126 	beq	r2,r4,8110fdc0 <__truncdfsf2+0x78>
8110fdbc:	31800104 	addi	r6,r6,4
8110fdc0:	3081002c 	andhi	r2,r6,1024
8110fdc4:	10001626 	beq	r2,zero,8110fe20 <__truncdfsf2+0xd8>
8110fdc8:	18c00044 	addi	r3,r3,1
8110fdcc:	00803fc4 	movi	r2,255
8110fdd0:	18800326 	beq	r3,r2,8110fde0 <__truncdfsf2+0x98>
8110fdd4:	300c91ba 	slli	r6,r6,6
8110fdd8:	300cd27a 	srli	r6,r6,9
8110fddc:	00000206 	br	8110fde8 <__truncdfsf2+0xa0>
8110fde0:	00ffffc4 	movi	r3,-1
8110fde4:	000d883a 	mov	r6,zero
8110fde8:	18c03fcc 	andi	r3,r3,255
8110fdec:	180895fa 	slli	r4,r3,23
8110fdf0:	00c02034 	movhi	r3,128
8110fdf4:	280a97fa 	slli	r5,r5,31
8110fdf8:	18ffffc4 	addi	r3,r3,-1
8110fdfc:	30c6703a 	and	r3,r6,r3
8110fe00:	1906b03a 	or	r3,r3,r4
8110fe04:	1944b03a 	or	r2,r3,r5
8110fe08:	f800283a 	ret
8110fe0c:	40000b1e 	bne	r8,zero,8110fe3c <__truncdfsf2+0xf4>
8110fe10:	388cb03a 	or	r6,r7,r2
8110fe14:	0007883a 	mov	r3,zero
8110fe18:	30000426 	beq	r6,zero,8110fe2c <__truncdfsf2+0xe4>
8110fe1c:	01800144 	movi	r6,5
8110fe20:	00803fc4 	movi	r2,255
8110fe24:	300cd0fa 	srli	r6,r6,3
8110fe28:	18800a26 	beq	r3,r2,8110fe54 <__truncdfsf2+0x10c>
8110fe2c:	00802034 	movhi	r2,128
8110fe30:	10bfffc4 	addi	r2,r2,-1
8110fe34:	308c703a 	and	r6,r6,r2
8110fe38:	003feb06 	br	8110fde8 <__reset+0xfb0efde8>
8110fe3c:	3888b03a 	or	r4,r7,r2
8110fe40:	203fe726 	beq	r4,zero,8110fde0 <__reset+0xfb0efde0>
8110fe44:	380c90fa 	slli	r6,r7,3
8110fe48:	00c03fc4 	movi	r3,255
8110fe4c:	31808034 	orhi	r6,r6,512
8110fe50:	003fd506 	br	8110fda8 <__reset+0xfb0efda8>
8110fe54:	303fe226 	beq	r6,zero,8110fde0 <__reset+0xfb0efde0>
8110fe58:	00802034 	movhi	r2,128
8110fe5c:	31801034 	orhi	r6,r6,64
8110fe60:	10bfffc4 	addi	r2,r2,-1
8110fe64:	00ffffc4 	movi	r3,-1
8110fe68:	308c703a 	and	r6,r6,r2
8110fe6c:	003fde06 	br	8110fde8 <__reset+0xfb0efde8>
8110fe70:	013ffa44 	movi	r4,-23
8110fe74:	19000e16 	blt	r3,r4,8110feb0 <__truncdfsf2+0x168>
8110fe78:	01000784 	movi	r4,30
8110fe7c:	20c9c83a 	sub	r4,r4,r3
8110fe80:	018007c4 	movi	r6,31
8110fe84:	39c02034 	orhi	r7,r7,128
8110fe88:	31000b16 	blt	r6,r4,8110feb8 <__truncdfsf2+0x170>
8110fe8c:	423f2084 	addi	r8,r8,-894
8110fe90:	120c983a 	sll	r6,r2,r8
8110fe94:	3a0e983a 	sll	r7,r7,r8
8110fe98:	1104d83a 	srl	r2,r2,r4
8110fe9c:	300cc03a 	cmpne	r6,r6,zero
8110fea0:	31ceb03a 	or	r7,r6,r7
8110fea4:	388cb03a 	or	r6,r7,r2
8110fea8:	0007883a 	mov	r3,zero
8110feac:	003fbe06 	br	8110fda8 <__reset+0xfb0efda8>
8110feb0:	0007883a 	mov	r3,zero
8110feb4:	003fd906 	br	8110fe1c <__reset+0xfb0efe1c>
8110feb8:	01bfff84 	movi	r6,-2
8110febc:	30cdc83a 	sub	r6,r6,r3
8110fec0:	00c00804 	movi	r3,32
8110fec4:	398cd83a 	srl	r6,r7,r6
8110fec8:	20c00726 	beq	r4,r3,8110fee8 <__truncdfsf2+0x1a0>
8110fecc:	423f2884 	addi	r8,r8,-862
8110fed0:	3a0e983a 	sll	r7,r7,r8
8110fed4:	3884b03a 	or	r2,r7,r2
8110fed8:	1004c03a 	cmpne	r2,r2,zero
8110fedc:	118cb03a 	or	r6,r2,r6
8110fee0:	0007883a 	mov	r3,zero
8110fee4:	003fb006 	br	8110fda8 <__reset+0xfb0efda8>
8110fee8:	000f883a 	mov	r7,zero
8110feec:	003ff906 	br	8110fed4 <__reset+0xfb0efed4>

8110fef0 <__clzsi2>:
8110fef0:	00bfffd4 	movui	r2,65535
8110fef4:	11000536 	bltu	r2,r4,8110ff0c <__clzsi2+0x1c>
8110fef8:	00803fc4 	movi	r2,255
8110fefc:	11000f36 	bltu	r2,r4,8110ff3c <__clzsi2+0x4c>
8110ff00:	00800804 	movi	r2,32
8110ff04:	0007883a 	mov	r3,zero
8110ff08:	00000506 	br	8110ff20 <__clzsi2+0x30>
8110ff0c:	00804034 	movhi	r2,256
8110ff10:	10bfffc4 	addi	r2,r2,-1
8110ff14:	11000c2e 	bgeu	r2,r4,8110ff48 <__clzsi2+0x58>
8110ff18:	00800204 	movi	r2,8
8110ff1c:	00c00604 	movi	r3,24
8110ff20:	20c8d83a 	srl	r4,r4,r3
8110ff24:	00e044b4 	movhi	r3,33042
8110ff28:	18da6804 	addi	r3,r3,27040
8110ff2c:	1909883a 	add	r4,r3,r4
8110ff30:	20c00003 	ldbu	r3,0(r4)
8110ff34:	10c5c83a 	sub	r2,r2,r3
8110ff38:	f800283a 	ret
8110ff3c:	00800604 	movi	r2,24
8110ff40:	00c00204 	movi	r3,8
8110ff44:	003ff606 	br	8110ff20 <__reset+0xfb0eff20>
8110ff48:	00800404 	movi	r2,16
8110ff4c:	1007883a 	mov	r3,r2
8110ff50:	003ff306 	br	8110ff20 <__reset+0xfb0eff20>

8110ff54 <_fopen_r>:
8110ff54:	defffa04 	addi	sp,sp,-24
8110ff58:	3005883a 	mov	r2,r6
8110ff5c:	dcc00415 	stw	r19,16(sp)
8110ff60:	d80d883a 	mov	r6,sp
8110ff64:	2827883a 	mov	r19,r5
8110ff68:	100b883a 	mov	r5,r2
8110ff6c:	dc800315 	stw	r18,12(sp)
8110ff70:	dfc00515 	stw	ra,20(sp)
8110ff74:	dc400215 	stw	r17,8(sp)
8110ff78:	dc000115 	stw	r16,4(sp)
8110ff7c:	2025883a 	mov	r18,r4
8110ff80:	1117e640 	call	81117e64 <__sflags>
8110ff84:	10002726 	beq	r2,zero,81110024 <_fopen_r+0xd0>
8110ff88:	9009883a 	mov	r4,r18
8110ff8c:	1023883a 	mov	r17,r2
8110ff90:	1117ce40 	call	81117ce4 <__sfp>
8110ff94:	1021883a 	mov	r16,r2
8110ff98:	10002226 	beq	r2,zero,81110024 <_fopen_r+0xd0>
8110ff9c:	d9800017 	ldw	r6,0(sp)
8110ffa0:	01c06d84 	movi	r7,438
8110ffa4:	980b883a 	mov	r5,r19
8110ffa8:	9009883a 	mov	r4,r18
8110ffac:	11113b80 	call	811113b8 <_open_r>
8110ffb0:	10001916 	blt	r2,zero,81110018 <_fopen_r+0xc4>
8110ffb4:	8080038d 	sth	r2,14(r16)
8110ffb8:	00a04474 	movhi	r2,33041
8110ffbc:	1085ea04 	addi	r2,r2,6056
8110ffc0:	80800815 	stw	r2,32(r16)
8110ffc4:	00a04474 	movhi	r2,33041
8110ffc8:	10860104 	addi	r2,r2,6148
8110ffcc:	80800915 	stw	r2,36(r16)
8110ffd0:	00a04474 	movhi	r2,33041
8110ffd4:	10862004 	addi	r2,r2,6272
8110ffd8:	80800a15 	stw	r2,40(r16)
8110ffdc:	00a04474 	movhi	r2,33041
8110ffe0:	10863704 	addi	r2,r2,6364
8110ffe4:	8440030d 	sth	r17,12(r16)
8110ffe8:	84000715 	stw	r16,28(r16)
8110ffec:	80800b15 	stw	r2,44(r16)
8110fff0:	8c40400c 	andi	r17,r17,256
8110fff4:	88000d1e 	bne	r17,zero,8111002c <_fopen_r+0xd8>
8110fff8:	8005883a 	mov	r2,r16
8110fffc:	dfc00517 	ldw	ra,20(sp)
81110000:	dcc00417 	ldw	r19,16(sp)
81110004:	dc800317 	ldw	r18,12(sp)
81110008:	dc400217 	ldw	r17,8(sp)
8111000c:	dc000117 	ldw	r16,4(sp)
81110010:	dec00604 	addi	sp,sp,24
81110014:	f800283a 	ret
81110018:	1117e240 	call	81117e24 <__sfp_lock_acquire>
8111001c:	8000030d 	sth	zero,12(r16)
81110020:	1117e280 	call	81117e28 <__sfp_lock_release>
81110024:	0005883a 	mov	r2,zero
81110028:	003ff406 	br	8110fffc <__reset+0xfb0efffc>
8111002c:	01c00084 	movi	r7,2
81110030:	000d883a 	mov	r6,zero
81110034:	800b883a 	mov	r5,r16
81110038:	9009883a 	mov	r4,r18
8111003c:	11100ac0 	call	811100ac <_fseek_r>
81110040:	8005883a 	mov	r2,r16
81110044:	003fed06 	br	8110fffc <__reset+0xfb0efffc>

81110048 <fopen>:
81110048:	00a044f4 	movhi	r2,33043
8111004c:	10a2f004 	addi	r2,r2,-29760
81110050:	280d883a 	mov	r6,r5
81110054:	200b883a 	mov	r5,r4
81110058:	11000017 	ldw	r4,0(r2)
8111005c:	110ff541 	jmpi	8110ff54 <_fopen_r>

81110060 <_fprintf_r>:
81110060:	defffe04 	addi	sp,sp,-8
81110064:	2809883a 	mov	r4,r5
81110068:	300b883a 	mov	r5,r6
8111006c:	dfc00015 	stw	ra,0(sp)
81110070:	d9c00115 	stw	r7,4(sp)
81110074:	d9800104 	addi	r6,sp,4
81110078:	1115cb40 	call	81115cb4 <__vfprintf_internal>
8111007c:	dfc00017 	ldw	ra,0(sp)
81110080:	dec00204 	addi	sp,sp,8
81110084:	f800283a 	ret

81110088 <fprintf>:
81110088:	defffd04 	addi	sp,sp,-12
8111008c:	dfc00015 	stw	ra,0(sp)
81110090:	d9800115 	stw	r6,4(sp)
81110094:	d9c00215 	stw	r7,8(sp)
81110098:	d9800104 	addi	r6,sp,4
8111009c:	1115cb40 	call	81115cb4 <__vfprintf_internal>
811100a0:	dfc00017 	ldw	ra,0(sp)
811100a4:	dec00304 	addi	sp,sp,12
811100a8:	f800283a 	ret

811100ac <_fseek_r>:
811100ac:	11100cc1 	jmpi	811100cc <_fseeko_r>

811100b0 <fseek>:
811100b0:	00a044f4 	movhi	r2,33043
811100b4:	10a2f004 	addi	r2,r2,-29760
811100b8:	300f883a 	mov	r7,r6
811100bc:	280d883a 	mov	r6,r5
811100c0:	200b883a 	mov	r5,r4
811100c4:	11000017 	ldw	r4,0(r2)
811100c8:	11100cc1 	jmpi	811100cc <_fseeko_r>

811100cc <_fseeko_r>:
811100cc:	deffe804 	addi	sp,sp,-96
811100d0:	dd401415 	stw	r21,80(sp)
811100d4:	dc801115 	stw	r18,68(sp)
811100d8:	dc401015 	stw	r17,64(sp)
811100dc:	dc000f15 	stw	r16,60(sp)
811100e0:	dfc01715 	stw	ra,92(sp)
811100e4:	ddc01615 	stw	r23,88(sp)
811100e8:	dd801515 	stw	r22,84(sp)
811100ec:	dd001315 	stw	r20,76(sp)
811100f0:	dcc01215 	stw	r19,72(sp)
811100f4:	2023883a 	mov	r17,r4
811100f8:	2821883a 	mov	r16,r5
811100fc:	302b883a 	mov	r21,r6
81110100:	3825883a 	mov	r18,r7
81110104:	20000226 	beq	r4,zero,81110110 <_fseeko_r+0x44>
81110108:	20800e17 	ldw	r2,56(r4)
8111010c:	10005a26 	beq	r2,zero,81110278 <_fseeko_r+0x1ac>
81110110:	8080030b 	ldhu	r2,12(r16)
81110114:	00c04204 	movi	r3,264
81110118:	1080420c 	andi	r2,r2,264
8111011c:	10c05b26 	beq	r2,r3,8111028c <_fseeko_r+0x1c0>
81110120:	85000a17 	ldw	r20,40(r16)
81110124:	a000f626 	beq	r20,zero,81110500 <_fseeko_r+0x434>
81110128:	00800044 	movi	r2,1
8111012c:	90803e26 	beq	r18,r2,81110228 <_fseeko_r+0x15c>
81110130:	00800084 	movi	r2,2
81110134:	90801026 	beq	r18,r2,81110178 <_fseeko_r+0xac>
81110138:	90000f26 	beq	r18,zero,81110178 <_fseeko_r+0xac>
8111013c:	00800584 	movi	r2,22
81110140:	88800015 	stw	r2,0(r17)
81110144:	04ffffc4 	movi	r19,-1
81110148:	9805883a 	mov	r2,r19
8111014c:	dfc01717 	ldw	ra,92(sp)
81110150:	ddc01617 	ldw	r23,88(sp)
81110154:	dd801517 	ldw	r22,84(sp)
81110158:	dd401417 	ldw	r21,80(sp)
8111015c:	dd001317 	ldw	r20,76(sp)
81110160:	dcc01217 	ldw	r19,72(sp)
81110164:	dc801117 	ldw	r18,68(sp)
81110168:	dc401017 	ldw	r17,64(sp)
8111016c:	dc000f17 	ldw	r16,60(sp)
81110170:	dec01804 	addi	sp,sp,96
81110174:	f800283a 	ret
81110178:	80800417 	ldw	r2,16(r16)
8111017c:	002f883a 	mov	r23,zero
81110180:	0027883a 	mov	r19,zero
81110184:	1000cb26 	beq	r2,zero,811104b4 <_fseeko_r+0x3e8>
81110188:	8080030b 	ldhu	r2,12(r16)
8111018c:	10c2068c 	andi	r3,r2,2074
81110190:	1800071e 	bne	r3,zero,811101b0 <_fseeko_r+0xe4>
81110194:	10c1000c 	andi	r3,r2,1024
81110198:	1800451e 	bne	r3,zero,811102b0 <_fseeko_r+0x1e4>
8111019c:	00e04474 	movhi	r3,33041
811101a0:	18c62004 	addi	r3,r3,6272
811101a4:	a0c0b726 	beq	r20,r3,81110484 <_fseeko_r+0x3b8>
811101a8:	10820014 	ori	r2,r2,2048
811101ac:	8080030d 	sth	r2,12(r16)
811101b0:	800b883a 	mov	r5,r16
811101b4:	8809883a 	mov	r4,r17
811101b8:	1117a380 	call	81117a38 <_fflush_r>
811101bc:	1027883a 	mov	r19,r2
811101c0:	103fe01e 	bne	r2,zero,81110144 <__reset+0xfb0f0144>
811101c4:	81400717 	ldw	r5,28(r16)
811101c8:	900f883a 	mov	r7,r18
811101cc:	a80d883a 	mov	r6,r21
811101d0:	8809883a 	mov	r4,r17
811101d4:	a03ee83a 	callr	r20
811101d8:	00ffffc4 	movi	r3,-1
811101dc:	10ffd926 	beq	r2,r3,81110144 <__reset+0xfb0f0144>
811101e0:	81400c17 	ldw	r5,48(r16)
811101e4:	28000526 	beq	r5,zero,811101fc <_fseeko_r+0x130>
811101e8:	80801004 	addi	r2,r16,64
811101ec:	28800226 	beq	r5,r2,811101f8 <_fseeko_r+0x12c>
811101f0:	8809883a 	mov	r4,r17
811101f4:	11180340 	call	81118034 <_free_r>
811101f8:	80000c15 	stw	zero,48(r16)
811101fc:	8080030b 	ldhu	r2,12(r16)
81110200:	80c00417 	ldw	r3,16(r16)
81110204:	80000115 	stw	zero,4(r16)
81110208:	10bdf7cc 	andi	r2,r2,63455
8111020c:	80c00015 	stw	r3,0(r16)
81110210:	8080030d 	sth	r2,12(r16)
81110214:	01800204 	movi	r6,8
81110218:	000b883a 	mov	r5,zero
8111021c:	81001704 	addi	r4,r16,92
81110220:	11112900 	call	81111290 <memset>
81110224:	003fc806 	br	81110148 <__reset+0xfb0f0148>
81110228:	800b883a 	mov	r5,r16
8111022c:	8809883a 	mov	r4,r17
81110230:	1117a380 	call	81117a38 <_fflush_r>
81110234:	8080030b 	ldhu	r2,12(r16)
81110238:	10c4000c 	andi	r3,r2,4096
8111023c:	18008726 	beq	r3,zero,8111045c <_fseeko_r+0x390>
81110240:	84c01417 	ldw	r19,80(r16)
81110244:	10c0010c 	andi	r3,r2,4
81110248:	1800431e 	bne	r3,zero,81110358 <_fseeko_r+0x28c>
8111024c:	1080020c 	andi	r2,r2,8
81110250:	10008026 	beq	r2,zero,81110454 <_fseeko_r+0x388>
81110254:	80c00017 	ldw	r3,0(r16)
81110258:	80800417 	ldw	r2,16(r16)
8111025c:	18000226 	beq	r3,zero,81110268 <_fseeko_r+0x19c>
81110260:	1887c83a 	sub	r3,r3,r2
81110264:	98e7883a 	add	r19,r19,r3
81110268:	aceb883a 	add	r21,r21,r19
8111026c:	05c00044 	movi	r23,1
81110270:	0025883a 	mov	r18,zero
81110274:	003fc306 	br	81110184 <__reset+0xfb0f0184>
81110278:	1117e140 	call	81117e14 <__sinit>
8111027c:	8080030b 	ldhu	r2,12(r16)
81110280:	00c04204 	movi	r3,264
81110284:	1080420c 	andi	r2,r2,264
81110288:	10ffa51e 	bne	r2,r3,81110120 <__reset+0xfb0f0120>
8111028c:	800b883a 	mov	r5,r16
81110290:	8809883a 	mov	r4,r17
81110294:	1117a380 	call	81117a38 <_fflush_r>
81110298:	003fa106 	br	81110120 <__reset+0xfb0f0120>
8111029c:	8080030b 	ldhu	r2,12(r16)
811102a0:	00c10004 	movi	r3,1024
811102a4:	80c01315 	stw	r3,76(r16)
811102a8:	10c4b03a 	or	r2,r2,r3
811102ac:	8080030d 	sth	r2,12(r16)
811102b0:	9000311e 	bne	r18,zero,81110378 <_fseeko_r+0x2ac>
811102b4:	a82d883a 	mov	r22,r21
811102b8:	b800371e 	bne	r23,zero,81110398 <_fseeko_r+0x2cc>
811102bc:	8080030b 	ldhu	r2,12(r16)
811102c0:	1084000c 	andi	r2,r2,4096
811102c4:	10007f26 	beq	r2,zero,811104c4 <_fseeko_r+0x3f8>
811102c8:	80801417 	ldw	r2,80(r16)
811102cc:	81800117 	ldw	r6,4(r16)
811102d0:	81400c17 	ldw	r5,48(r16)
811102d4:	11a7c83a 	sub	r19,r2,r6
811102d8:	28008226 	beq	r5,zero,811104e4 <_fseeko_r+0x418>
811102dc:	81c00f17 	ldw	r7,60(r16)
811102e0:	99e7c83a 	sub	r19,r19,r7
811102e4:	81000e17 	ldw	r4,56(r16)
811102e8:	80800417 	ldw	r2,16(r16)
811102ec:	99a7883a 	add	r19,r19,r6
811102f0:	2087c83a 	sub	r3,r4,r2
811102f4:	98e7c83a 	sub	r19,r19,r3
811102f8:	38c7883a 	add	r3,r7,r3
811102fc:	b4c02b16 	blt	r22,r19,811103ac <_fseeko_r+0x2e0>
81110300:	98c9883a 	add	r4,r19,r3
81110304:	b100292e 	bgeu	r22,r4,811103ac <_fseeko_r+0x2e0>
81110308:	b4e7c83a 	sub	r19,r22,r19
8111030c:	14c5883a 	add	r2,r2,r19
81110310:	1ce7c83a 	sub	r19,r3,r19
81110314:	80800015 	stw	r2,0(r16)
81110318:	84c00115 	stw	r19,4(r16)
8111031c:	28000526 	beq	r5,zero,81110334 <_fseeko_r+0x268>
81110320:	80801004 	addi	r2,r16,64
81110324:	28800226 	beq	r5,r2,81110330 <_fseeko_r+0x264>
81110328:	8809883a 	mov	r4,r17
8111032c:	11180340 	call	81118034 <_free_r>
81110330:	80000c15 	stw	zero,48(r16)
81110334:	8080030b 	ldhu	r2,12(r16)
81110338:	01800204 	movi	r6,8
8111033c:	000b883a 	mov	r5,zero
81110340:	10bff7cc 	andi	r2,r2,65503
81110344:	8080030d 	sth	r2,12(r16)
81110348:	81001704 	addi	r4,r16,92
8111034c:	11112900 	call	81111290 <memset>
81110350:	0027883a 	mov	r19,zero
81110354:	003f7c06 	br	81110148 <__reset+0xfb0f0148>
81110358:	80c00117 	ldw	r3,4(r16)
8111035c:	80800c17 	ldw	r2,48(r16)
81110360:	98e7c83a 	sub	r19,r19,r3
81110364:	10003b26 	beq	r2,zero,81110454 <_fseeko_r+0x388>
81110368:	80c00f17 	ldw	r3,60(r16)
8111036c:	80800417 	ldw	r2,16(r16)
81110370:	98e7c83a 	sub	r19,r19,r3
81110374:	003fbc06 	br	81110268 <__reset+0xfb0f0268>
81110378:	8140038f 	ldh	r5,14(r16)
8111037c:	d80d883a 	mov	r6,sp
81110380:	8809883a 	mov	r4,r17
81110384:	111052c0 	call	8111052c <_fstat_r>
81110388:	103f891e 	bne	r2,zero,811101b0 <__reset+0xfb0f01b0>
8111038c:	dd800417 	ldw	r22,16(sp)
81110390:	adad883a 	add	r22,r21,r22
81110394:	b83fc926 	beq	r23,zero,811102bc <__reset+0xfb0f02bc>
81110398:	81400c17 	ldw	r5,48(r16)
8111039c:	81800117 	ldw	r6,4(r16)
811103a0:	28005026 	beq	r5,zero,811104e4 <_fseeko_r+0x418>
811103a4:	81c00f17 	ldw	r7,60(r16)
811103a8:	003fce06 	br	811102e4 <__reset+0xfb0f02e4>
811103ac:	84c01317 	ldw	r19,76(r16)
811103b0:	81400717 	ldw	r5,28(r16)
811103b4:	000f883a 	mov	r7,zero
811103b8:	04e7c83a 	sub	r19,zero,r19
811103bc:	9da6703a 	and	r19,r19,r22
811103c0:	980d883a 	mov	r6,r19
811103c4:	8809883a 	mov	r4,r17
811103c8:	a03ee83a 	callr	r20
811103cc:	00ffffc4 	movi	r3,-1
811103d0:	10ff7726 	beq	r2,r3,811101b0 <__reset+0xfb0f01b0>
811103d4:	80800417 	ldw	r2,16(r16)
811103d8:	81400c17 	ldw	r5,48(r16)
811103dc:	80000115 	stw	zero,4(r16)
811103e0:	80800015 	stw	r2,0(r16)
811103e4:	28000526 	beq	r5,zero,811103fc <_fseeko_r+0x330>
811103e8:	80801004 	addi	r2,r16,64
811103ec:	28800226 	beq	r5,r2,811103f8 <_fseeko_r+0x32c>
811103f0:	8809883a 	mov	r4,r17
811103f4:	11180340 	call	81118034 <_free_r>
811103f8:	80000c15 	stw	zero,48(r16)
811103fc:	8080030b 	ldhu	r2,12(r16)
81110400:	b4e7c83a 	sub	r19,r22,r19
81110404:	10bff7cc 	andi	r2,r2,65503
81110408:	8080030d 	sth	r2,12(r16)
8111040c:	98000b26 	beq	r19,zero,8111043c <_fseeko_r+0x370>
81110410:	800b883a 	mov	r5,r16
81110414:	8809883a 	mov	r4,r17
81110418:	11114340 	call	81111434 <__srefill_r>
8111041c:	103f641e 	bne	r2,zero,811101b0 <__reset+0xfb0f01b0>
81110420:	80800117 	ldw	r2,4(r16)
81110424:	14ff6236 	bltu	r2,r19,811101b0 <__reset+0xfb0f01b0>
81110428:	80c00017 	ldw	r3,0(r16)
8111042c:	14c5c83a 	sub	r2,r2,r19
81110430:	80800115 	stw	r2,4(r16)
81110434:	1ce7883a 	add	r19,r3,r19
81110438:	84c00015 	stw	r19,0(r16)
8111043c:	01800204 	movi	r6,8
81110440:	000b883a 	mov	r5,zero
81110444:	81001704 	addi	r4,r16,92
81110448:	11112900 	call	81111290 <memset>
8111044c:	0027883a 	mov	r19,zero
81110450:	003f3d06 	br	81110148 <__reset+0xfb0f0148>
81110454:	80800417 	ldw	r2,16(r16)
81110458:	003f8306 	br	81110268 <__reset+0xfb0f0268>
8111045c:	81400717 	ldw	r5,28(r16)
81110460:	900f883a 	mov	r7,r18
81110464:	000d883a 	mov	r6,zero
81110468:	8809883a 	mov	r4,r17
8111046c:	a03ee83a 	callr	r20
81110470:	1027883a 	mov	r19,r2
81110474:	00bfffc4 	movi	r2,-1
81110478:	98bf3226 	beq	r19,r2,81110144 <__reset+0xfb0f0144>
8111047c:	8080030b 	ldhu	r2,12(r16)
81110480:	003f7006 	br	81110244 <__reset+0xfb0f0244>
81110484:	8140038f 	ldh	r5,14(r16)
81110488:	283f4716 	blt	r5,zero,811101a8 <__reset+0xfb0f01a8>
8111048c:	d80d883a 	mov	r6,sp
81110490:	8809883a 	mov	r4,r17
81110494:	111052c0 	call	8111052c <_fstat_r>
81110498:	1000041e 	bne	r2,zero,811104ac <_fseeko_r+0x3e0>
8111049c:	d8800117 	ldw	r2,4(sp)
811104a0:	00e00014 	movui	r3,32768
811104a4:	10bc000c 	andi	r2,r2,61440
811104a8:	10ff7c26 	beq	r2,r3,8111029c <__reset+0xfb0f029c>
811104ac:	8080030b 	ldhu	r2,12(r16)
811104b0:	003f3d06 	br	811101a8 <__reset+0xfb0f01a8>
811104b4:	800b883a 	mov	r5,r16
811104b8:	8809883a 	mov	r4,r17
811104bc:	11107800 	call	81110780 <__smakebuf_r>
811104c0:	003f3106 	br	81110188 <__reset+0xfb0f0188>
811104c4:	81400717 	ldw	r5,28(r16)
811104c8:	01c00044 	movi	r7,1
811104cc:	000d883a 	mov	r6,zero
811104d0:	8809883a 	mov	r4,r17
811104d4:	a03ee83a 	callr	r20
811104d8:	00ffffc4 	movi	r3,-1
811104dc:	10ff7b1e 	bne	r2,r3,811102cc <__reset+0xfb0f02cc>
811104e0:	003f3306 	br	811101b0 <__reset+0xfb0f01b0>
811104e4:	80c00017 	ldw	r3,0(r16)
811104e8:	80800417 	ldw	r2,16(r16)
811104ec:	000b883a 	mov	r5,zero
811104f0:	1887c83a 	sub	r3,r3,r2
811104f4:	98e7c83a 	sub	r19,r19,r3
811104f8:	30c7883a 	add	r3,r6,r3
811104fc:	003f7f06 	br	811102fc <__reset+0xfb0f02fc>
81110500:	00800744 	movi	r2,29
81110504:	88800015 	stw	r2,0(r17)
81110508:	04ffffc4 	movi	r19,-1
8111050c:	003f0e06 	br	81110148 <__reset+0xfb0f0148>

81110510 <fseeko>:
81110510:	00a044f4 	movhi	r2,33043
81110514:	10a2f004 	addi	r2,r2,-29760
81110518:	300f883a 	mov	r7,r6
8111051c:	280d883a 	mov	r6,r5
81110520:	200b883a 	mov	r5,r4
81110524:	11000017 	ldw	r4,0(r2)
81110528:	11100cc1 	jmpi	811100cc <_fseeko_r>

8111052c <_fstat_r>:
8111052c:	defffd04 	addi	sp,sp,-12
81110530:	2805883a 	mov	r2,r5
81110534:	dc000015 	stw	r16,0(sp)
81110538:	042044f4 	movhi	r16,33043
8111053c:	dc400115 	stw	r17,4(sp)
81110540:	84231f04 	addi	r16,r16,-29572
81110544:	2023883a 	mov	r17,r4
81110548:	300b883a 	mov	r5,r6
8111054c:	1009883a 	mov	r4,r2
81110550:	dfc00215 	stw	ra,8(sp)
81110554:	80000015 	stw	zero,0(r16)
81110558:	11204700 	call	81120470 <fstat>
8111055c:	00ffffc4 	movi	r3,-1
81110560:	10c00526 	beq	r2,r3,81110578 <_fstat_r+0x4c>
81110564:	dfc00217 	ldw	ra,8(sp)
81110568:	dc400117 	ldw	r17,4(sp)
8111056c:	dc000017 	ldw	r16,0(sp)
81110570:	dec00304 	addi	sp,sp,12
81110574:	f800283a 	ret
81110578:	80c00017 	ldw	r3,0(r16)
8111057c:	183ff926 	beq	r3,zero,81110564 <__reset+0xfb0f0564>
81110580:	88c00015 	stw	r3,0(r17)
81110584:	003ff706 	br	81110564 <__reset+0xfb0f0564>

81110588 <_fwrite_r>:
81110588:	defff504 	addi	sp,sp,-44
8111058c:	dc800815 	stw	r18,32(sp)
81110590:	39a5383a 	mul	r18,r7,r6
81110594:	d8800304 	addi	r2,sp,12
81110598:	d8800015 	stw	r2,0(sp)
8111059c:	00800044 	movi	r2,1
811105a0:	dcc00915 	stw	r19,36(sp)
811105a4:	dc400715 	stw	r17,28(sp)
811105a8:	dc000615 	stw	r16,24(sp)
811105ac:	d9400315 	stw	r5,12(sp)
811105b0:	dfc00a15 	stw	ra,40(sp)
811105b4:	dc800415 	stw	r18,16(sp)
811105b8:	dc800215 	stw	r18,8(sp)
811105bc:	d8800115 	stw	r2,4(sp)
811105c0:	3027883a 	mov	r19,r6
811105c4:	3821883a 	mov	r16,r7
811105c8:	2023883a 	mov	r17,r4
811105cc:	d9400b17 	ldw	r5,44(sp)
811105d0:	20000226 	beq	r4,zero,811105dc <_fwrite_r+0x54>
811105d4:	20800e17 	ldw	r2,56(r4)
811105d8:	10001a26 	beq	r2,zero,81110644 <_fwrite_r+0xbc>
811105dc:	2880030b 	ldhu	r2,12(r5)
811105e0:	10c8000c 	andi	r3,r2,8192
811105e4:	1800061e 	bne	r3,zero,81110600 <_fwrite_r+0x78>
811105e8:	29001917 	ldw	r4,100(r5)
811105ec:	00f7ffc4 	movi	r3,-8193
811105f0:	10880014 	ori	r2,r2,8192
811105f4:	20c6703a 	and	r3,r4,r3
811105f8:	2880030d 	sth	r2,12(r5)
811105fc:	28c01915 	stw	r3,100(r5)
81110600:	d80d883a 	mov	r6,sp
81110604:	8809883a 	mov	r4,r17
81110608:	11183440 	call	81118344 <__sfvwrite_r>
8111060c:	10000b26 	beq	r2,zero,8111063c <_fwrite_r+0xb4>
81110610:	d9000217 	ldw	r4,8(sp)
81110614:	980b883a 	mov	r5,r19
81110618:	9109c83a 	sub	r4,r18,r4
8111061c:	111e20c0 	call	8111e20c <__udivsi3>
81110620:	dfc00a17 	ldw	ra,40(sp)
81110624:	dcc00917 	ldw	r19,36(sp)
81110628:	dc800817 	ldw	r18,32(sp)
8111062c:	dc400717 	ldw	r17,28(sp)
81110630:	dc000617 	ldw	r16,24(sp)
81110634:	dec00b04 	addi	sp,sp,44
81110638:	f800283a 	ret
8111063c:	8005883a 	mov	r2,r16
81110640:	003ff706 	br	81110620 <__reset+0xfb0f0620>
81110644:	d9400515 	stw	r5,20(sp)
81110648:	1117e140 	call	81117e14 <__sinit>
8111064c:	d9400517 	ldw	r5,20(sp)
81110650:	003fe206 	br	811105dc <__reset+0xfb0f05dc>

81110654 <fwrite>:
81110654:	defffe04 	addi	sp,sp,-8
81110658:	00a044f4 	movhi	r2,33043
8111065c:	d9c00015 	stw	r7,0(sp)
81110660:	10a2f004 	addi	r2,r2,-29760
81110664:	300f883a 	mov	r7,r6
81110668:	280d883a 	mov	r6,r5
8111066c:	200b883a 	mov	r5,r4
81110670:	11000017 	ldw	r4,0(r2)
81110674:	dfc00115 	stw	ra,4(sp)
81110678:	11105880 	call	81110588 <_fwrite_r>
8111067c:	dfc00117 	ldw	ra,4(sp)
81110680:	dec00204 	addi	sp,sp,8
81110684:	f800283a 	ret

81110688 <_getc_r>:
81110688:	defffd04 	addi	sp,sp,-12
8111068c:	dc000115 	stw	r16,4(sp)
81110690:	dfc00215 	stw	ra,8(sp)
81110694:	2021883a 	mov	r16,r4
81110698:	20000226 	beq	r4,zero,811106a4 <_getc_r+0x1c>
8111069c:	20800e17 	ldw	r2,56(r4)
811106a0:	10000c26 	beq	r2,zero,811106d4 <_getc_r+0x4c>
811106a4:	28800117 	ldw	r2,4(r5)
811106a8:	10bfffc4 	addi	r2,r2,-1
811106ac:	28800115 	stw	r2,4(r5)
811106b0:	10000c16 	blt	r2,zero,811106e4 <_getc_r+0x5c>
811106b4:	28800017 	ldw	r2,0(r5)
811106b8:	10c00044 	addi	r3,r2,1
811106bc:	28c00015 	stw	r3,0(r5)
811106c0:	10800003 	ldbu	r2,0(r2)
811106c4:	dfc00217 	ldw	ra,8(sp)
811106c8:	dc000117 	ldw	r16,4(sp)
811106cc:	dec00304 	addi	sp,sp,12
811106d0:	f800283a 	ret
811106d4:	d9400015 	stw	r5,0(sp)
811106d8:	1117e140 	call	81117e14 <__sinit>
811106dc:	d9400017 	ldw	r5,0(sp)
811106e0:	003ff006 	br	811106a4 <__reset+0xfb0f06a4>
811106e4:	8009883a 	mov	r4,r16
811106e8:	dfc00217 	ldw	ra,8(sp)
811106ec:	dc000117 	ldw	r16,4(sp)
811106f0:	dec00304 	addi	sp,sp,12
811106f4:	11116081 	jmpi	81111608 <__srget_r>

811106f8 <getc>:
811106f8:	00a044f4 	movhi	r2,33043
811106fc:	defffd04 	addi	sp,sp,-12
81110700:	10a2f004 	addi	r2,r2,-29760
81110704:	dc400115 	stw	r17,4(sp)
81110708:	14400017 	ldw	r17,0(r2)
8111070c:	dc000015 	stw	r16,0(sp)
81110710:	dfc00215 	stw	ra,8(sp)
81110714:	2021883a 	mov	r16,r4
81110718:	88000226 	beq	r17,zero,81110724 <getc+0x2c>
8111071c:	88800e17 	ldw	r2,56(r17)
81110720:	10000d26 	beq	r2,zero,81110758 <getc+0x60>
81110724:	80800117 	ldw	r2,4(r16)
81110728:	10bfffc4 	addi	r2,r2,-1
8111072c:	80800115 	stw	r2,4(r16)
81110730:	10000c16 	blt	r2,zero,81110764 <getc+0x6c>
81110734:	80800017 	ldw	r2,0(r16)
81110738:	10c00044 	addi	r3,r2,1
8111073c:	80c00015 	stw	r3,0(r16)
81110740:	10800003 	ldbu	r2,0(r2)
81110744:	dfc00217 	ldw	ra,8(sp)
81110748:	dc400117 	ldw	r17,4(sp)
8111074c:	dc000017 	ldw	r16,0(sp)
81110750:	dec00304 	addi	sp,sp,12
81110754:	f800283a 	ret
81110758:	8809883a 	mov	r4,r17
8111075c:	1117e140 	call	81117e14 <__sinit>
81110760:	003ff006 	br	81110724 <__reset+0xfb0f0724>
81110764:	800b883a 	mov	r5,r16
81110768:	8809883a 	mov	r4,r17
8111076c:	dfc00217 	ldw	ra,8(sp)
81110770:	dc400117 	ldw	r17,4(sp)
81110774:	dc000017 	ldw	r16,0(sp)
81110778:	dec00304 	addi	sp,sp,12
8111077c:	11116081 	jmpi	81111608 <__srget_r>

81110780 <__smakebuf_r>:
81110780:	2880030b 	ldhu	r2,12(r5)
81110784:	10c0008c 	andi	r3,r2,2
81110788:	1800411e 	bne	r3,zero,81110890 <__smakebuf_r+0x110>
8111078c:	deffec04 	addi	sp,sp,-80
81110790:	dc000f15 	stw	r16,60(sp)
81110794:	2821883a 	mov	r16,r5
81110798:	2940038f 	ldh	r5,14(r5)
8111079c:	dc401015 	stw	r17,64(sp)
811107a0:	dfc01315 	stw	ra,76(sp)
811107a4:	dcc01215 	stw	r19,72(sp)
811107a8:	dc801115 	stw	r18,68(sp)
811107ac:	2023883a 	mov	r17,r4
811107b0:	28001c16 	blt	r5,zero,81110824 <__smakebuf_r+0xa4>
811107b4:	d80d883a 	mov	r6,sp
811107b8:	111052c0 	call	8111052c <_fstat_r>
811107bc:	10001816 	blt	r2,zero,81110820 <__smakebuf_r+0xa0>
811107c0:	d8800117 	ldw	r2,4(sp)
811107c4:	00e00014 	movui	r3,32768
811107c8:	10bc000c 	andi	r2,r2,61440
811107cc:	14c80020 	cmpeqi	r19,r2,8192
811107d0:	10c03726 	beq	r2,r3,811108b0 <__smakebuf_r+0x130>
811107d4:	80c0030b 	ldhu	r3,12(r16)
811107d8:	18c20014 	ori	r3,r3,2048
811107dc:	80c0030d 	sth	r3,12(r16)
811107e0:	00c80004 	movi	r3,8192
811107e4:	10c0521e 	bne	r2,r3,81110930 <__smakebuf_r+0x1b0>
811107e8:	8140038f 	ldh	r5,14(r16)
811107ec:	8809883a 	mov	r4,r17
811107f0:	11189880 	call	81118988 <_isatty_r>
811107f4:	10004c26 	beq	r2,zero,81110928 <__smakebuf_r+0x1a8>
811107f8:	8080030b 	ldhu	r2,12(r16)
811107fc:	80c010c4 	addi	r3,r16,67
81110800:	80c00015 	stw	r3,0(r16)
81110804:	10800054 	ori	r2,r2,1
81110808:	8080030d 	sth	r2,12(r16)
8111080c:	00800044 	movi	r2,1
81110810:	80c00415 	stw	r3,16(r16)
81110814:	80800515 	stw	r2,20(r16)
81110818:	04810004 	movi	r18,1024
8111081c:	00000706 	br	8111083c <__smakebuf_r+0xbc>
81110820:	8080030b 	ldhu	r2,12(r16)
81110824:	10c0200c 	andi	r3,r2,128
81110828:	18001f1e 	bne	r3,zero,811108a8 <__smakebuf_r+0x128>
8111082c:	04810004 	movi	r18,1024
81110830:	10820014 	ori	r2,r2,2048
81110834:	8080030d 	sth	r2,12(r16)
81110838:	0027883a 	mov	r19,zero
8111083c:	900b883a 	mov	r5,r18
81110840:	8809883a 	mov	r4,r17
81110844:	111093c0 	call	8111093c <_malloc_r>
81110848:	10002c26 	beq	r2,zero,811108fc <__smakebuf_r+0x17c>
8111084c:	80c0030b 	ldhu	r3,12(r16)
81110850:	01204474 	movhi	r4,33041
81110854:	211eb304 	addi	r4,r4,31436
81110858:	89000f15 	stw	r4,60(r17)
8111085c:	18c02014 	ori	r3,r3,128
81110860:	80c0030d 	sth	r3,12(r16)
81110864:	80800015 	stw	r2,0(r16)
81110868:	80800415 	stw	r2,16(r16)
8111086c:	84800515 	stw	r18,20(r16)
81110870:	98001a1e 	bne	r19,zero,811108dc <__smakebuf_r+0x15c>
81110874:	dfc01317 	ldw	ra,76(sp)
81110878:	dcc01217 	ldw	r19,72(sp)
8111087c:	dc801117 	ldw	r18,68(sp)
81110880:	dc401017 	ldw	r17,64(sp)
81110884:	dc000f17 	ldw	r16,60(sp)
81110888:	dec01404 	addi	sp,sp,80
8111088c:	f800283a 	ret
81110890:	288010c4 	addi	r2,r5,67
81110894:	28800015 	stw	r2,0(r5)
81110898:	28800415 	stw	r2,16(r5)
8111089c:	00800044 	movi	r2,1
811108a0:	28800515 	stw	r2,20(r5)
811108a4:	f800283a 	ret
811108a8:	04801004 	movi	r18,64
811108ac:	003fe006 	br	81110830 <__reset+0xfb0f0830>
811108b0:	81000a17 	ldw	r4,40(r16)
811108b4:	00e04474 	movhi	r3,33041
811108b8:	18c62004 	addi	r3,r3,6272
811108bc:	20ffc51e 	bne	r4,r3,811107d4 <__reset+0xfb0f07d4>
811108c0:	8080030b 	ldhu	r2,12(r16)
811108c4:	04810004 	movi	r18,1024
811108c8:	84801315 	stw	r18,76(r16)
811108cc:	1484b03a 	or	r2,r2,r18
811108d0:	8080030d 	sth	r2,12(r16)
811108d4:	0027883a 	mov	r19,zero
811108d8:	003fd806 	br	8111083c <__reset+0xfb0f083c>
811108dc:	8140038f 	ldh	r5,14(r16)
811108e0:	8809883a 	mov	r4,r17
811108e4:	11189880 	call	81118988 <_isatty_r>
811108e8:	103fe226 	beq	r2,zero,81110874 <__reset+0xfb0f0874>
811108ec:	8080030b 	ldhu	r2,12(r16)
811108f0:	10800054 	ori	r2,r2,1
811108f4:	8080030d 	sth	r2,12(r16)
811108f8:	003fde06 	br	81110874 <__reset+0xfb0f0874>
811108fc:	8080030b 	ldhu	r2,12(r16)
81110900:	10c0800c 	andi	r3,r2,512
81110904:	183fdb1e 	bne	r3,zero,81110874 <__reset+0xfb0f0874>
81110908:	10800094 	ori	r2,r2,2
8111090c:	80c010c4 	addi	r3,r16,67
81110910:	8080030d 	sth	r2,12(r16)
81110914:	00800044 	movi	r2,1
81110918:	80c00015 	stw	r3,0(r16)
8111091c:	80c00415 	stw	r3,16(r16)
81110920:	80800515 	stw	r2,20(r16)
81110924:	003fd306 	br	81110874 <__reset+0xfb0f0874>
81110928:	04810004 	movi	r18,1024
8111092c:	003fc306 	br	8111083c <__reset+0xfb0f083c>
81110930:	0027883a 	mov	r19,zero
81110934:	04810004 	movi	r18,1024
81110938:	003fc006 	br	8111083c <__reset+0xfb0f083c>

8111093c <_malloc_r>:
8111093c:	defff504 	addi	sp,sp,-44
81110940:	dc800315 	stw	r18,12(sp)
81110944:	dfc00a15 	stw	ra,40(sp)
81110948:	df000915 	stw	fp,36(sp)
8111094c:	ddc00815 	stw	r23,32(sp)
81110950:	dd800715 	stw	r22,28(sp)
81110954:	dd400615 	stw	r21,24(sp)
81110958:	dd000515 	stw	r20,20(sp)
8111095c:	dcc00415 	stw	r19,16(sp)
81110960:	dc400215 	stw	r17,8(sp)
81110964:	dc000115 	stw	r16,4(sp)
81110968:	288002c4 	addi	r2,r5,11
8111096c:	00c00584 	movi	r3,22
81110970:	2025883a 	mov	r18,r4
81110974:	18807f2e 	bgeu	r3,r2,81110b74 <_malloc_r+0x238>
81110978:	047ffe04 	movi	r17,-8
8111097c:	1462703a 	and	r17,r2,r17
81110980:	8800a316 	blt	r17,zero,81110c10 <_malloc_r+0x2d4>
81110984:	8940a236 	bltu	r17,r5,81110c10 <_malloc_r+0x2d4>
81110988:	112090c0 	call	8112090c <__malloc_lock>
8111098c:	00807dc4 	movi	r2,503
81110990:	1441e92e 	bgeu	r2,r17,81111138 <_malloc_r+0x7fc>
81110994:	8804d27a 	srli	r2,r17,9
81110998:	1000a126 	beq	r2,zero,81110c20 <_malloc_r+0x2e4>
8111099c:	00c00104 	movi	r3,4
811109a0:	18811e36 	bltu	r3,r2,81110e1c <_malloc_r+0x4e0>
811109a4:	8804d1ba 	srli	r2,r17,6
811109a8:	12000e44 	addi	r8,r2,57
811109ac:	11c00e04 	addi	r7,r2,56
811109b0:	4209883a 	add	r4,r8,r8
811109b4:	04e044b4 	movhi	r19,33042
811109b8:	2109883a 	add	r4,r4,r4
811109bc:	9cdcdf04 	addi	r19,r19,29564
811109c0:	2109883a 	add	r4,r4,r4
811109c4:	9909883a 	add	r4,r19,r4
811109c8:	24000117 	ldw	r16,4(r4)
811109cc:	213ffe04 	addi	r4,r4,-8
811109d0:	24009726 	beq	r4,r16,81110c30 <_malloc_r+0x2f4>
811109d4:	80800117 	ldw	r2,4(r16)
811109d8:	01bfff04 	movi	r6,-4
811109dc:	014003c4 	movi	r5,15
811109e0:	1184703a 	and	r2,r2,r6
811109e4:	1447c83a 	sub	r3,r2,r17
811109e8:	28c00716 	blt	r5,r3,81110a08 <_malloc_r+0xcc>
811109ec:	1800920e 	bge	r3,zero,81110c38 <_malloc_r+0x2fc>
811109f0:	84000317 	ldw	r16,12(r16)
811109f4:	24008e26 	beq	r4,r16,81110c30 <_malloc_r+0x2f4>
811109f8:	80800117 	ldw	r2,4(r16)
811109fc:	1184703a 	and	r2,r2,r6
81110a00:	1447c83a 	sub	r3,r2,r17
81110a04:	28fff90e 	bge	r5,r3,811109ec <__reset+0xfb0f09ec>
81110a08:	3809883a 	mov	r4,r7
81110a0c:	01a044b4 	movhi	r6,33042
81110a10:	9c000417 	ldw	r16,16(r19)
81110a14:	319cdf04 	addi	r6,r6,29564
81110a18:	32000204 	addi	r8,r6,8
81110a1c:	82013426 	beq	r16,r8,81110ef0 <_malloc_r+0x5b4>
81110a20:	80c00117 	ldw	r3,4(r16)
81110a24:	00bfff04 	movi	r2,-4
81110a28:	188e703a 	and	r7,r3,r2
81110a2c:	3c45c83a 	sub	r2,r7,r17
81110a30:	00c003c4 	movi	r3,15
81110a34:	18811f16 	blt	r3,r2,81110eb4 <_malloc_r+0x578>
81110a38:	32000515 	stw	r8,20(r6)
81110a3c:	32000415 	stw	r8,16(r6)
81110a40:	10007f0e 	bge	r2,zero,81110c40 <_malloc_r+0x304>
81110a44:	00807fc4 	movi	r2,511
81110a48:	11c0fd36 	bltu	r2,r7,81110e40 <_malloc_r+0x504>
81110a4c:	3806d0fa 	srli	r3,r7,3
81110a50:	01c00044 	movi	r7,1
81110a54:	30800117 	ldw	r2,4(r6)
81110a58:	19400044 	addi	r5,r3,1
81110a5c:	294b883a 	add	r5,r5,r5
81110a60:	1807d0ba 	srai	r3,r3,2
81110a64:	294b883a 	add	r5,r5,r5
81110a68:	294b883a 	add	r5,r5,r5
81110a6c:	298b883a 	add	r5,r5,r6
81110a70:	38c6983a 	sll	r3,r7,r3
81110a74:	29c00017 	ldw	r7,0(r5)
81110a78:	2a7ffe04 	addi	r9,r5,-8
81110a7c:	1886b03a 	or	r3,r3,r2
81110a80:	82400315 	stw	r9,12(r16)
81110a84:	81c00215 	stw	r7,8(r16)
81110a88:	30c00115 	stw	r3,4(r6)
81110a8c:	2c000015 	stw	r16,0(r5)
81110a90:	3c000315 	stw	r16,12(r7)
81110a94:	2005d0ba 	srai	r2,r4,2
81110a98:	01400044 	movi	r5,1
81110a9c:	288a983a 	sll	r5,r5,r2
81110aa0:	19406f36 	bltu	r3,r5,81110c60 <_malloc_r+0x324>
81110aa4:	28c4703a 	and	r2,r5,r3
81110aa8:	10000a1e 	bne	r2,zero,81110ad4 <_malloc_r+0x198>
81110aac:	00bfff04 	movi	r2,-4
81110ab0:	294b883a 	add	r5,r5,r5
81110ab4:	2088703a 	and	r4,r4,r2
81110ab8:	28c4703a 	and	r2,r5,r3
81110abc:	21000104 	addi	r4,r4,4
81110ac0:	1000041e 	bne	r2,zero,81110ad4 <_malloc_r+0x198>
81110ac4:	294b883a 	add	r5,r5,r5
81110ac8:	28c4703a 	and	r2,r5,r3
81110acc:	21000104 	addi	r4,r4,4
81110ad0:	103ffc26 	beq	r2,zero,81110ac4 <__reset+0xfb0f0ac4>
81110ad4:	02bfff04 	movi	r10,-4
81110ad8:	024003c4 	movi	r9,15
81110adc:	21800044 	addi	r6,r4,1
81110ae0:	318d883a 	add	r6,r6,r6
81110ae4:	318d883a 	add	r6,r6,r6
81110ae8:	318d883a 	add	r6,r6,r6
81110aec:	998d883a 	add	r6,r19,r6
81110af0:	333ffe04 	addi	r12,r6,-8
81110af4:	2017883a 	mov	r11,r4
81110af8:	31800104 	addi	r6,r6,4
81110afc:	34000017 	ldw	r16,0(r6)
81110b00:	31fffd04 	addi	r7,r6,-12
81110b04:	81c0041e 	bne	r16,r7,81110b18 <_malloc_r+0x1dc>
81110b08:	0000fb06 	br	81110ef8 <_malloc_r+0x5bc>
81110b0c:	1801030e 	bge	r3,zero,81110f1c <_malloc_r+0x5e0>
81110b10:	84000317 	ldw	r16,12(r16)
81110b14:	81c0f826 	beq	r16,r7,81110ef8 <_malloc_r+0x5bc>
81110b18:	80800117 	ldw	r2,4(r16)
81110b1c:	1284703a 	and	r2,r2,r10
81110b20:	1447c83a 	sub	r3,r2,r17
81110b24:	48fff90e 	bge	r9,r3,81110b0c <__reset+0xfb0f0b0c>
81110b28:	80800317 	ldw	r2,12(r16)
81110b2c:	81000217 	ldw	r4,8(r16)
81110b30:	89400054 	ori	r5,r17,1
81110b34:	81400115 	stw	r5,4(r16)
81110b38:	20800315 	stw	r2,12(r4)
81110b3c:	11000215 	stw	r4,8(r2)
81110b40:	8463883a 	add	r17,r16,r17
81110b44:	9c400515 	stw	r17,20(r19)
81110b48:	9c400415 	stw	r17,16(r19)
81110b4c:	18800054 	ori	r2,r3,1
81110b50:	88800115 	stw	r2,4(r17)
81110b54:	8a000315 	stw	r8,12(r17)
81110b58:	8a000215 	stw	r8,8(r17)
81110b5c:	88e3883a 	add	r17,r17,r3
81110b60:	88c00015 	stw	r3,0(r17)
81110b64:	9009883a 	mov	r4,r18
81110b68:	11209300 	call	81120930 <__malloc_unlock>
81110b6c:	80800204 	addi	r2,r16,8
81110b70:	00001b06 	br	81110be0 <_malloc_r+0x2a4>
81110b74:	04400404 	movi	r17,16
81110b78:	89402536 	bltu	r17,r5,81110c10 <_malloc_r+0x2d4>
81110b7c:	112090c0 	call	8112090c <__malloc_lock>
81110b80:	00800184 	movi	r2,6
81110b84:	01000084 	movi	r4,2
81110b88:	04e044b4 	movhi	r19,33042
81110b8c:	1085883a 	add	r2,r2,r2
81110b90:	9cdcdf04 	addi	r19,r19,29564
81110b94:	1085883a 	add	r2,r2,r2
81110b98:	9885883a 	add	r2,r19,r2
81110b9c:	14000117 	ldw	r16,4(r2)
81110ba0:	10fffe04 	addi	r3,r2,-8
81110ba4:	80c0d926 	beq	r16,r3,81110f0c <_malloc_r+0x5d0>
81110ba8:	80c00117 	ldw	r3,4(r16)
81110bac:	81000317 	ldw	r4,12(r16)
81110bb0:	00bfff04 	movi	r2,-4
81110bb4:	1884703a 	and	r2,r3,r2
81110bb8:	81400217 	ldw	r5,8(r16)
81110bbc:	8085883a 	add	r2,r16,r2
81110bc0:	10c00117 	ldw	r3,4(r2)
81110bc4:	29000315 	stw	r4,12(r5)
81110bc8:	21400215 	stw	r5,8(r4)
81110bcc:	18c00054 	ori	r3,r3,1
81110bd0:	10c00115 	stw	r3,4(r2)
81110bd4:	9009883a 	mov	r4,r18
81110bd8:	11209300 	call	81120930 <__malloc_unlock>
81110bdc:	80800204 	addi	r2,r16,8
81110be0:	dfc00a17 	ldw	ra,40(sp)
81110be4:	df000917 	ldw	fp,36(sp)
81110be8:	ddc00817 	ldw	r23,32(sp)
81110bec:	dd800717 	ldw	r22,28(sp)
81110bf0:	dd400617 	ldw	r21,24(sp)
81110bf4:	dd000517 	ldw	r20,20(sp)
81110bf8:	dcc00417 	ldw	r19,16(sp)
81110bfc:	dc800317 	ldw	r18,12(sp)
81110c00:	dc400217 	ldw	r17,8(sp)
81110c04:	dc000117 	ldw	r16,4(sp)
81110c08:	dec00b04 	addi	sp,sp,44
81110c0c:	f800283a 	ret
81110c10:	00800304 	movi	r2,12
81110c14:	90800015 	stw	r2,0(r18)
81110c18:	0005883a 	mov	r2,zero
81110c1c:	003ff006 	br	81110be0 <__reset+0xfb0f0be0>
81110c20:	01002004 	movi	r4,128
81110c24:	02001004 	movi	r8,64
81110c28:	01c00fc4 	movi	r7,63
81110c2c:	003f6106 	br	811109b4 <__reset+0xfb0f09b4>
81110c30:	4009883a 	mov	r4,r8
81110c34:	003f7506 	br	81110a0c <__reset+0xfb0f0a0c>
81110c38:	81000317 	ldw	r4,12(r16)
81110c3c:	003fde06 	br	81110bb8 <__reset+0xfb0f0bb8>
81110c40:	81c5883a 	add	r2,r16,r7
81110c44:	11400117 	ldw	r5,4(r2)
81110c48:	9009883a 	mov	r4,r18
81110c4c:	29400054 	ori	r5,r5,1
81110c50:	11400115 	stw	r5,4(r2)
81110c54:	11209300 	call	81120930 <__malloc_unlock>
81110c58:	80800204 	addi	r2,r16,8
81110c5c:	003fe006 	br	81110be0 <__reset+0xfb0f0be0>
81110c60:	9c000217 	ldw	r16,8(r19)
81110c64:	00bfff04 	movi	r2,-4
81110c68:	85800117 	ldw	r22,4(r16)
81110c6c:	b0ac703a 	and	r22,r22,r2
81110c70:	b4400336 	bltu	r22,r17,81110c80 <_malloc_r+0x344>
81110c74:	b445c83a 	sub	r2,r22,r17
81110c78:	00c003c4 	movi	r3,15
81110c7c:	18805d16 	blt	r3,r2,81110df4 <_malloc_r+0x4b8>
81110c80:	05e044f4 	movhi	r23,33043
81110c84:	00a044f4 	movhi	r2,33043
81110c88:	10a32204 	addi	r2,r2,-29560
81110c8c:	bde2f104 	addi	r23,r23,-29756
81110c90:	15400017 	ldw	r21,0(r2)
81110c94:	b8c00017 	ldw	r3,0(r23)
81110c98:	00bfffc4 	movi	r2,-1
81110c9c:	858d883a 	add	r6,r16,r22
81110ca0:	8d6b883a 	add	r21,r17,r21
81110ca4:	1880ea26 	beq	r3,r2,81111050 <_malloc_r+0x714>
81110ca8:	ad4403c4 	addi	r21,r21,4111
81110cac:	00bc0004 	movi	r2,-4096
81110cb0:	a8aa703a 	and	r21,r21,r2
81110cb4:	a80b883a 	mov	r5,r21
81110cb8:	9009883a 	mov	r4,r18
81110cbc:	d9800015 	stw	r6,0(sp)
81110cc0:	11116900 	call	81111690 <_sbrk_r>
81110cc4:	1029883a 	mov	r20,r2
81110cc8:	00bfffc4 	movi	r2,-1
81110ccc:	d9800017 	ldw	r6,0(sp)
81110cd0:	a080e826 	beq	r20,r2,81111074 <_malloc_r+0x738>
81110cd4:	a180a636 	bltu	r20,r6,81110f70 <_malloc_r+0x634>
81110cd8:	072044f4 	movhi	fp,33043
81110cdc:	e7232d04 	addi	fp,fp,-29516
81110ce0:	e0800017 	ldw	r2,0(fp)
81110ce4:	a887883a 	add	r3,r21,r2
81110ce8:	e0c00015 	stw	r3,0(fp)
81110cec:	3500e626 	beq	r6,r20,81111088 <_malloc_r+0x74c>
81110cf0:	b9000017 	ldw	r4,0(r23)
81110cf4:	00bfffc4 	movi	r2,-1
81110cf8:	2080ee26 	beq	r4,r2,811110b4 <_malloc_r+0x778>
81110cfc:	a185c83a 	sub	r2,r20,r6
81110d00:	10c5883a 	add	r2,r2,r3
81110d04:	e0800015 	stw	r2,0(fp)
81110d08:	a0c001cc 	andi	r3,r20,7
81110d0c:	1800bc26 	beq	r3,zero,81111000 <_malloc_r+0x6c4>
81110d10:	a0e9c83a 	sub	r20,r20,r3
81110d14:	00840204 	movi	r2,4104
81110d18:	a5000204 	addi	r20,r20,8
81110d1c:	10c7c83a 	sub	r3,r2,r3
81110d20:	a545883a 	add	r2,r20,r21
81110d24:	1083ffcc 	andi	r2,r2,4095
81110d28:	18abc83a 	sub	r21,r3,r2
81110d2c:	a80b883a 	mov	r5,r21
81110d30:	9009883a 	mov	r4,r18
81110d34:	11116900 	call	81111690 <_sbrk_r>
81110d38:	00ffffc4 	movi	r3,-1
81110d3c:	10c0e126 	beq	r2,r3,811110c4 <_malloc_r+0x788>
81110d40:	1505c83a 	sub	r2,r2,r20
81110d44:	1545883a 	add	r2,r2,r21
81110d48:	10800054 	ori	r2,r2,1
81110d4c:	e0c00017 	ldw	r3,0(fp)
81110d50:	9d000215 	stw	r20,8(r19)
81110d54:	a0800115 	stw	r2,4(r20)
81110d58:	a8c7883a 	add	r3,r21,r3
81110d5c:	e0c00015 	stw	r3,0(fp)
81110d60:	84c00e26 	beq	r16,r19,81110d9c <_malloc_r+0x460>
81110d64:	018003c4 	movi	r6,15
81110d68:	3580a72e 	bgeu	r6,r22,81111008 <_malloc_r+0x6cc>
81110d6c:	81400117 	ldw	r5,4(r16)
81110d70:	013ffe04 	movi	r4,-8
81110d74:	b0bffd04 	addi	r2,r22,-12
81110d78:	1104703a 	and	r2,r2,r4
81110d7c:	2900004c 	andi	r4,r5,1
81110d80:	2088b03a 	or	r4,r4,r2
81110d84:	81000115 	stw	r4,4(r16)
81110d88:	01400144 	movi	r5,5
81110d8c:	8089883a 	add	r4,r16,r2
81110d90:	21400115 	stw	r5,4(r4)
81110d94:	21400215 	stw	r5,8(r4)
81110d98:	3080cd36 	bltu	r6,r2,811110d0 <_malloc_r+0x794>
81110d9c:	00a044f4 	movhi	r2,33043
81110da0:	10a32104 	addi	r2,r2,-29564
81110da4:	11000017 	ldw	r4,0(r2)
81110da8:	20c0012e 	bgeu	r4,r3,81110db0 <_malloc_r+0x474>
81110dac:	10c00015 	stw	r3,0(r2)
81110db0:	00a044f4 	movhi	r2,33043
81110db4:	10a32004 	addi	r2,r2,-29568
81110db8:	11000017 	ldw	r4,0(r2)
81110dbc:	9c000217 	ldw	r16,8(r19)
81110dc0:	20c0012e 	bgeu	r4,r3,81110dc8 <_malloc_r+0x48c>
81110dc4:	10c00015 	stw	r3,0(r2)
81110dc8:	80c00117 	ldw	r3,4(r16)
81110dcc:	00bfff04 	movi	r2,-4
81110dd0:	1886703a 	and	r3,r3,r2
81110dd4:	1c45c83a 	sub	r2,r3,r17
81110dd8:	1c400236 	bltu	r3,r17,81110de4 <_malloc_r+0x4a8>
81110ddc:	00c003c4 	movi	r3,15
81110de0:	18800416 	blt	r3,r2,81110df4 <_malloc_r+0x4b8>
81110de4:	9009883a 	mov	r4,r18
81110de8:	11209300 	call	81120930 <__malloc_unlock>
81110dec:	0005883a 	mov	r2,zero
81110df0:	003f7b06 	br	81110be0 <__reset+0xfb0f0be0>
81110df4:	88c00054 	ori	r3,r17,1
81110df8:	80c00115 	stw	r3,4(r16)
81110dfc:	8463883a 	add	r17,r16,r17
81110e00:	10800054 	ori	r2,r2,1
81110e04:	9c400215 	stw	r17,8(r19)
81110e08:	88800115 	stw	r2,4(r17)
81110e0c:	9009883a 	mov	r4,r18
81110e10:	11209300 	call	81120930 <__malloc_unlock>
81110e14:	80800204 	addi	r2,r16,8
81110e18:	003f7106 	br	81110be0 <__reset+0xfb0f0be0>
81110e1c:	00c00504 	movi	r3,20
81110e20:	18804a2e 	bgeu	r3,r2,81110f4c <_malloc_r+0x610>
81110e24:	00c01504 	movi	r3,84
81110e28:	18806e36 	bltu	r3,r2,81110fe4 <_malloc_r+0x6a8>
81110e2c:	8804d33a 	srli	r2,r17,12
81110e30:	12001bc4 	addi	r8,r2,111
81110e34:	11c01b84 	addi	r7,r2,110
81110e38:	4209883a 	add	r4,r8,r8
81110e3c:	003edd06 	br	811109b4 <__reset+0xfb0f09b4>
81110e40:	3804d27a 	srli	r2,r7,9
81110e44:	00c00104 	movi	r3,4
81110e48:	1880442e 	bgeu	r3,r2,81110f5c <_malloc_r+0x620>
81110e4c:	00c00504 	movi	r3,20
81110e50:	18808136 	bltu	r3,r2,81111058 <_malloc_r+0x71c>
81110e54:	11401704 	addi	r5,r2,92
81110e58:	10c016c4 	addi	r3,r2,91
81110e5c:	294b883a 	add	r5,r5,r5
81110e60:	294b883a 	add	r5,r5,r5
81110e64:	294b883a 	add	r5,r5,r5
81110e68:	994b883a 	add	r5,r19,r5
81110e6c:	28800017 	ldw	r2,0(r5)
81110e70:	01a044b4 	movhi	r6,33042
81110e74:	297ffe04 	addi	r5,r5,-8
81110e78:	319cdf04 	addi	r6,r6,29564
81110e7c:	28806526 	beq	r5,r2,81111014 <_malloc_r+0x6d8>
81110e80:	01bfff04 	movi	r6,-4
81110e84:	10c00117 	ldw	r3,4(r2)
81110e88:	1986703a 	and	r3,r3,r6
81110e8c:	38c0022e 	bgeu	r7,r3,81110e98 <_malloc_r+0x55c>
81110e90:	10800217 	ldw	r2,8(r2)
81110e94:	28bffb1e 	bne	r5,r2,81110e84 <__reset+0xfb0f0e84>
81110e98:	11400317 	ldw	r5,12(r2)
81110e9c:	98c00117 	ldw	r3,4(r19)
81110ea0:	81400315 	stw	r5,12(r16)
81110ea4:	80800215 	stw	r2,8(r16)
81110ea8:	2c000215 	stw	r16,8(r5)
81110eac:	14000315 	stw	r16,12(r2)
81110eb0:	003ef806 	br	81110a94 <__reset+0xfb0f0a94>
81110eb4:	88c00054 	ori	r3,r17,1
81110eb8:	80c00115 	stw	r3,4(r16)
81110ebc:	8463883a 	add	r17,r16,r17
81110ec0:	34400515 	stw	r17,20(r6)
81110ec4:	34400415 	stw	r17,16(r6)
81110ec8:	10c00054 	ori	r3,r2,1
81110ecc:	8a000315 	stw	r8,12(r17)
81110ed0:	8a000215 	stw	r8,8(r17)
81110ed4:	88c00115 	stw	r3,4(r17)
81110ed8:	88a3883a 	add	r17,r17,r2
81110edc:	88800015 	stw	r2,0(r17)
81110ee0:	9009883a 	mov	r4,r18
81110ee4:	11209300 	call	81120930 <__malloc_unlock>
81110ee8:	80800204 	addi	r2,r16,8
81110eec:	003f3c06 	br	81110be0 <__reset+0xfb0f0be0>
81110ef0:	30c00117 	ldw	r3,4(r6)
81110ef4:	003ee706 	br	81110a94 <__reset+0xfb0f0a94>
81110ef8:	5ac00044 	addi	r11,r11,1
81110efc:	588000cc 	andi	r2,r11,3
81110f00:	31800204 	addi	r6,r6,8
81110f04:	103efd1e 	bne	r2,zero,81110afc <__reset+0xfb0f0afc>
81110f08:	00002406 	br	81110f9c <_malloc_r+0x660>
81110f0c:	14000317 	ldw	r16,12(r2)
81110f10:	143f251e 	bne	r2,r16,81110ba8 <__reset+0xfb0f0ba8>
81110f14:	21000084 	addi	r4,r4,2
81110f18:	003ebc06 	br	81110a0c <__reset+0xfb0f0a0c>
81110f1c:	8085883a 	add	r2,r16,r2
81110f20:	10c00117 	ldw	r3,4(r2)
81110f24:	81000317 	ldw	r4,12(r16)
81110f28:	81400217 	ldw	r5,8(r16)
81110f2c:	18c00054 	ori	r3,r3,1
81110f30:	10c00115 	stw	r3,4(r2)
81110f34:	29000315 	stw	r4,12(r5)
81110f38:	21400215 	stw	r5,8(r4)
81110f3c:	9009883a 	mov	r4,r18
81110f40:	11209300 	call	81120930 <__malloc_unlock>
81110f44:	80800204 	addi	r2,r16,8
81110f48:	003f2506 	br	81110be0 <__reset+0xfb0f0be0>
81110f4c:	12001704 	addi	r8,r2,92
81110f50:	11c016c4 	addi	r7,r2,91
81110f54:	4209883a 	add	r4,r8,r8
81110f58:	003e9606 	br	811109b4 <__reset+0xfb0f09b4>
81110f5c:	3804d1ba 	srli	r2,r7,6
81110f60:	11400e44 	addi	r5,r2,57
81110f64:	10c00e04 	addi	r3,r2,56
81110f68:	294b883a 	add	r5,r5,r5
81110f6c:	003fbc06 	br	81110e60 <__reset+0xfb0f0e60>
81110f70:	84ff5926 	beq	r16,r19,81110cd8 <__reset+0xfb0f0cd8>
81110f74:	00a044b4 	movhi	r2,33042
81110f78:	109cdf04 	addi	r2,r2,29564
81110f7c:	14000217 	ldw	r16,8(r2)
81110f80:	00bfff04 	movi	r2,-4
81110f84:	80c00117 	ldw	r3,4(r16)
81110f88:	1886703a 	and	r3,r3,r2
81110f8c:	003f9106 	br	81110dd4 <__reset+0xfb0f0dd4>
81110f90:	60800217 	ldw	r2,8(r12)
81110f94:	213fffc4 	addi	r4,r4,-1
81110f98:	1300651e 	bne	r2,r12,81111130 <_malloc_r+0x7f4>
81110f9c:	208000cc 	andi	r2,r4,3
81110fa0:	633ffe04 	addi	r12,r12,-8
81110fa4:	103ffa1e 	bne	r2,zero,81110f90 <__reset+0xfb0f0f90>
81110fa8:	98800117 	ldw	r2,4(r19)
81110fac:	0146303a 	nor	r3,zero,r5
81110fb0:	1884703a 	and	r2,r3,r2
81110fb4:	98800115 	stw	r2,4(r19)
81110fb8:	294b883a 	add	r5,r5,r5
81110fbc:	117f2836 	bltu	r2,r5,81110c60 <__reset+0xfb0f0c60>
81110fc0:	283f2726 	beq	r5,zero,81110c60 <__reset+0xfb0f0c60>
81110fc4:	2886703a 	and	r3,r5,r2
81110fc8:	5809883a 	mov	r4,r11
81110fcc:	183ec31e 	bne	r3,zero,81110adc <__reset+0xfb0f0adc>
81110fd0:	294b883a 	add	r5,r5,r5
81110fd4:	2886703a 	and	r3,r5,r2
81110fd8:	21000104 	addi	r4,r4,4
81110fdc:	183ffc26 	beq	r3,zero,81110fd0 <__reset+0xfb0f0fd0>
81110fe0:	003ebe06 	br	81110adc <__reset+0xfb0f0adc>
81110fe4:	00c05504 	movi	r3,340
81110fe8:	18801236 	bltu	r3,r2,81111034 <_malloc_r+0x6f8>
81110fec:	8804d3fa 	srli	r2,r17,15
81110ff0:	12001e04 	addi	r8,r2,120
81110ff4:	11c01dc4 	addi	r7,r2,119
81110ff8:	4209883a 	add	r4,r8,r8
81110ffc:	003e6d06 	br	811109b4 <__reset+0xfb0f09b4>
81111000:	00c40004 	movi	r3,4096
81111004:	003f4606 	br	81110d20 <__reset+0xfb0f0d20>
81111008:	00800044 	movi	r2,1
8111100c:	a0800115 	stw	r2,4(r20)
81111010:	003f7406 	br	81110de4 <__reset+0xfb0f0de4>
81111014:	1805d0ba 	srai	r2,r3,2
81111018:	01c00044 	movi	r7,1
8111101c:	30c00117 	ldw	r3,4(r6)
81111020:	388e983a 	sll	r7,r7,r2
81111024:	2805883a 	mov	r2,r5
81111028:	38c6b03a 	or	r3,r7,r3
8111102c:	30c00115 	stw	r3,4(r6)
81111030:	003f9b06 	br	81110ea0 <__reset+0xfb0f0ea0>
81111034:	00c15504 	movi	r3,1364
81111038:	18801a36 	bltu	r3,r2,811110a4 <_malloc_r+0x768>
8111103c:	8804d4ba 	srli	r2,r17,18
81111040:	12001f44 	addi	r8,r2,125
81111044:	11c01f04 	addi	r7,r2,124
81111048:	4209883a 	add	r4,r8,r8
8111104c:	003e5906 	br	811109b4 <__reset+0xfb0f09b4>
81111050:	ad400404 	addi	r21,r21,16
81111054:	003f1706 	br	81110cb4 <__reset+0xfb0f0cb4>
81111058:	00c01504 	movi	r3,84
8111105c:	18802336 	bltu	r3,r2,811110ec <_malloc_r+0x7b0>
81111060:	3804d33a 	srli	r2,r7,12
81111064:	11401bc4 	addi	r5,r2,111
81111068:	10c01b84 	addi	r3,r2,110
8111106c:	294b883a 	add	r5,r5,r5
81111070:	003f7b06 	br	81110e60 <__reset+0xfb0f0e60>
81111074:	9c000217 	ldw	r16,8(r19)
81111078:	00bfff04 	movi	r2,-4
8111107c:	80c00117 	ldw	r3,4(r16)
81111080:	1886703a 	and	r3,r3,r2
81111084:	003f5306 	br	81110dd4 <__reset+0xfb0f0dd4>
81111088:	3083ffcc 	andi	r2,r6,4095
8111108c:	103f181e 	bne	r2,zero,81110cf0 <__reset+0xfb0f0cf0>
81111090:	99000217 	ldw	r4,8(r19)
81111094:	b545883a 	add	r2,r22,r21
81111098:	10800054 	ori	r2,r2,1
8111109c:	20800115 	stw	r2,4(r4)
811110a0:	003f3e06 	br	81110d9c <__reset+0xfb0f0d9c>
811110a4:	01003f84 	movi	r4,254
811110a8:	02001fc4 	movi	r8,127
811110ac:	01c01f84 	movi	r7,126
811110b0:	003e4006 	br	811109b4 <__reset+0xfb0f09b4>
811110b4:	00a044f4 	movhi	r2,33043
811110b8:	10a2f104 	addi	r2,r2,-29756
811110bc:	15000015 	stw	r20,0(r2)
811110c0:	003f1106 	br	81110d08 <__reset+0xfb0f0d08>
811110c4:	00800044 	movi	r2,1
811110c8:	002b883a 	mov	r21,zero
811110cc:	003f1f06 	br	81110d4c <__reset+0xfb0f0d4c>
811110d0:	81400204 	addi	r5,r16,8
811110d4:	9009883a 	mov	r4,r18
811110d8:	11180340 	call	81118034 <_free_r>
811110dc:	00a044f4 	movhi	r2,33043
811110e0:	10a32d04 	addi	r2,r2,-29516
811110e4:	10c00017 	ldw	r3,0(r2)
811110e8:	003f2c06 	br	81110d9c <__reset+0xfb0f0d9c>
811110ec:	00c05504 	movi	r3,340
811110f0:	18800536 	bltu	r3,r2,81111108 <_malloc_r+0x7cc>
811110f4:	3804d3fa 	srli	r2,r7,15
811110f8:	11401e04 	addi	r5,r2,120
811110fc:	10c01dc4 	addi	r3,r2,119
81111100:	294b883a 	add	r5,r5,r5
81111104:	003f5606 	br	81110e60 <__reset+0xfb0f0e60>
81111108:	00c15504 	movi	r3,1364
8111110c:	18800536 	bltu	r3,r2,81111124 <_malloc_r+0x7e8>
81111110:	3804d4ba 	srli	r2,r7,18
81111114:	11401f44 	addi	r5,r2,125
81111118:	10c01f04 	addi	r3,r2,124
8111111c:	294b883a 	add	r5,r5,r5
81111120:	003f4f06 	br	81110e60 <__reset+0xfb0f0e60>
81111124:	01403f84 	movi	r5,254
81111128:	00c01f84 	movi	r3,126
8111112c:	003f4c06 	br	81110e60 <__reset+0xfb0f0e60>
81111130:	98800117 	ldw	r2,4(r19)
81111134:	003fa006 	br	81110fb8 <__reset+0xfb0f0fb8>
81111138:	8808d0fa 	srli	r4,r17,3
8111113c:	20800044 	addi	r2,r4,1
81111140:	1085883a 	add	r2,r2,r2
81111144:	003e9006 	br	81110b88 <__reset+0xfb0f0b88>

81111148 <memcpy>:
81111148:	defffd04 	addi	sp,sp,-12
8111114c:	dfc00215 	stw	ra,8(sp)
81111150:	dc400115 	stw	r17,4(sp)
81111154:	dc000015 	stw	r16,0(sp)
81111158:	00c003c4 	movi	r3,15
8111115c:	2005883a 	mov	r2,r4
81111160:	1980452e 	bgeu	r3,r6,81111278 <memcpy+0x130>
81111164:	2906b03a 	or	r3,r5,r4
81111168:	18c000cc 	andi	r3,r3,3
8111116c:	1800441e 	bne	r3,zero,81111280 <memcpy+0x138>
81111170:	347ffc04 	addi	r17,r6,-16
81111174:	8822d13a 	srli	r17,r17,4
81111178:	28c00104 	addi	r3,r5,4
8111117c:	23400104 	addi	r13,r4,4
81111180:	8820913a 	slli	r16,r17,4
81111184:	2b000204 	addi	r12,r5,8
81111188:	22c00204 	addi	r11,r4,8
8111118c:	84000504 	addi	r16,r16,20
81111190:	2a800304 	addi	r10,r5,12
81111194:	22400304 	addi	r9,r4,12
81111198:	2c21883a 	add	r16,r5,r16
8111119c:	2811883a 	mov	r8,r5
811111a0:	200f883a 	mov	r7,r4
811111a4:	41000017 	ldw	r4,0(r8)
811111a8:	1fc00017 	ldw	ra,0(r3)
811111ac:	63c00017 	ldw	r15,0(r12)
811111b0:	39000015 	stw	r4,0(r7)
811111b4:	53800017 	ldw	r14,0(r10)
811111b8:	6fc00015 	stw	ra,0(r13)
811111bc:	5bc00015 	stw	r15,0(r11)
811111c0:	4b800015 	stw	r14,0(r9)
811111c4:	18c00404 	addi	r3,r3,16
811111c8:	39c00404 	addi	r7,r7,16
811111cc:	42000404 	addi	r8,r8,16
811111d0:	6b400404 	addi	r13,r13,16
811111d4:	63000404 	addi	r12,r12,16
811111d8:	5ac00404 	addi	r11,r11,16
811111dc:	52800404 	addi	r10,r10,16
811111e0:	4a400404 	addi	r9,r9,16
811111e4:	1c3fef1e 	bne	r3,r16,811111a4 <__reset+0xfb0f11a4>
811111e8:	89c00044 	addi	r7,r17,1
811111ec:	380e913a 	slli	r7,r7,4
811111f0:	310003cc 	andi	r4,r6,15
811111f4:	02c000c4 	movi	r11,3
811111f8:	11c7883a 	add	r3,r2,r7
811111fc:	29cb883a 	add	r5,r5,r7
81111200:	5900212e 	bgeu	r11,r4,81111288 <memcpy+0x140>
81111204:	1813883a 	mov	r9,r3
81111208:	2811883a 	mov	r8,r5
8111120c:	200f883a 	mov	r7,r4
81111210:	42800017 	ldw	r10,0(r8)
81111214:	4a400104 	addi	r9,r9,4
81111218:	39ffff04 	addi	r7,r7,-4
8111121c:	4abfff15 	stw	r10,-4(r9)
81111220:	42000104 	addi	r8,r8,4
81111224:	59fffa36 	bltu	r11,r7,81111210 <__reset+0xfb0f1210>
81111228:	213fff04 	addi	r4,r4,-4
8111122c:	2008d0ba 	srli	r4,r4,2
81111230:	318000cc 	andi	r6,r6,3
81111234:	21000044 	addi	r4,r4,1
81111238:	2109883a 	add	r4,r4,r4
8111123c:	2109883a 	add	r4,r4,r4
81111240:	1907883a 	add	r3,r3,r4
81111244:	290b883a 	add	r5,r5,r4
81111248:	30000626 	beq	r6,zero,81111264 <memcpy+0x11c>
8111124c:	198d883a 	add	r6,r3,r6
81111250:	29c00003 	ldbu	r7,0(r5)
81111254:	18c00044 	addi	r3,r3,1
81111258:	29400044 	addi	r5,r5,1
8111125c:	19ffffc5 	stb	r7,-1(r3)
81111260:	19bffb1e 	bne	r3,r6,81111250 <__reset+0xfb0f1250>
81111264:	dfc00217 	ldw	ra,8(sp)
81111268:	dc400117 	ldw	r17,4(sp)
8111126c:	dc000017 	ldw	r16,0(sp)
81111270:	dec00304 	addi	sp,sp,12
81111274:	f800283a 	ret
81111278:	2007883a 	mov	r3,r4
8111127c:	003ff206 	br	81111248 <__reset+0xfb0f1248>
81111280:	2007883a 	mov	r3,r4
81111284:	003ff106 	br	8111124c <__reset+0xfb0f124c>
81111288:	200d883a 	mov	r6,r4
8111128c:	003fee06 	br	81111248 <__reset+0xfb0f1248>

81111290 <memset>:
81111290:	20c000cc 	andi	r3,r4,3
81111294:	2005883a 	mov	r2,r4
81111298:	18004426 	beq	r3,zero,811113ac <memset+0x11c>
8111129c:	31ffffc4 	addi	r7,r6,-1
811112a0:	30004026 	beq	r6,zero,811113a4 <memset+0x114>
811112a4:	2813883a 	mov	r9,r5
811112a8:	200d883a 	mov	r6,r4
811112ac:	2007883a 	mov	r3,r4
811112b0:	00000406 	br	811112c4 <memset+0x34>
811112b4:	3a3fffc4 	addi	r8,r7,-1
811112b8:	31800044 	addi	r6,r6,1
811112bc:	38003926 	beq	r7,zero,811113a4 <memset+0x114>
811112c0:	400f883a 	mov	r7,r8
811112c4:	18c00044 	addi	r3,r3,1
811112c8:	32400005 	stb	r9,0(r6)
811112cc:	1a0000cc 	andi	r8,r3,3
811112d0:	403ff81e 	bne	r8,zero,811112b4 <__reset+0xfb0f12b4>
811112d4:	010000c4 	movi	r4,3
811112d8:	21c02d2e 	bgeu	r4,r7,81111390 <memset+0x100>
811112dc:	29003fcc 	andi	r4,r5,255
811112e0:	200c923a 	slli	r6,r4,8
811112e4:	3108b03a 	or	r4,r6,r4
811112e8:	200c943a 	slli	r6,r4,16
811112ec:	218cb03a 	or	r6,r4,r6
811112f0:	010003c4 	movi	r4,15
811112f4:	21c0182e 	bgeu	r4,r7,81111358 <memset+0xc8>
811112f8:	3b3ffc04 	addi	r12,r7,-16
811112fc:	6018d13a 	srli	r12,r12,4
81111300:	1a000104 	addi	r8,r3,4
81111304:	1ac00204 	addi	r11,r3,8
81111308:	6008913a 	slli	r4,r12,4
8111130c:	1a800304 	addi	r10,r3,12
81111310:	1813883a 	mov	r9,r3
81111314:	21000504 	addi	r4,r4,20
81111318:	1909883a 	add	r4,r3,r4
8111131c:	49800015 	stw	r6,0(r9)
81111320:	41800015 	stw	r6,0(r8)
81111324:	59800015 	stw	r6,0(r11)
81111328:	51800015 	stw	r6,0(r10)
8111132c:	42000404 	addi	r8,r8,16
81111330:	4a400404 	addi	r9,r9,16
81111334:	5ac00404 	addi	r11,r11,16
81111338:	52800404 	addi	r10,r10,16
8111133c:	413ff71e 	bne	r8,r4,8111131c <__reset+0xfb0f131c>
81111340:	63000044 	addi	r12,r12,1
81111344:	6018913a 	slli	r12,r12,4
81111348:	39c003cc 	andi	r7,r7,15
8111134c:	010000c4 	movi	r4,3
81111350:	1b07883a 	add	r3,r3,r12
81111354:	21c00e2e 	bgeu	r4,r7,81111390 <memset+0x100>
81111358:	1813883a 	mov	r9,r3
8111135c:	3811883a 	mov	r8,r7
81111360:	010000c4 	movi	r4,3
81111364:	49800015 	stw	r6,0(r9)
81111368:	423fff04 	addi	r8,r8,-4
8111136c:	4a400104 	addi	r9,r9,4
81111370:	223ffc36 	bltu	r4,r8,81111364 <__reset+0xfb0f1364>
81111374:	393fff04 	addi	r4,r7,-4
81111378:	2008d0ba 	srli	r4,r4,2
8111137c:	39c000cc 	andi	r7,r7,3
81111380:	21000044 	addi	r4,r4,1
81111384:	2109883a 	add	r4,r4,r4
81111388:	2109883a 	add	r4,r4,r4
8111138c:	1907883a 	add	r3,r3,r4
81111390:	38000526 	beq	r7,zero,811113a8 <memset+0x118>
81111394:	19cf883a 	add	r7,r3,r7
81111398:	19400005 	stb	r5,0(r3)
8111139c:	18c00044 	addi	r3,r3,1
811113a0:	38fffd1e 	bne	r7,r3,81111398 <__reset+0xfb0f1398>
811113a4:	f800283a 	ret
811113a8:	f800283a 	ret
811113ac:	2007883a 	mov	r3,r4
811113b0:	300f883a 	mov	r7,r6
811113b4:	003fc706 	br	811112d4 <__reset+0xfb0f12d4>

811113b8 <_open_r>:
811113b8:	defffd04 	addi	sp,sp,-12
811113bc:	2805883a 	mov	r2,r5
811113c0:	dc000015 	stw	r16,0(sp)
811113c4:	042044f4 	movhi	r16,33043
811113c8:	dc400115 	stw	r17,4(sp)
811113cc:	300b883a 	mov	r5,r6
811113d0:	84231f04 	addi	r16,r16,-29572
811113d4:	2023883a 	mov	r17,r4
811113d8:	380d883a 	mov	r6,r7
811113dc:	1009883a 	mov	r4,r2
811113e0:	dfc00215 	stw	ra,8(sp)
811113e4:	80000015 	stw	zero,0(r16)
811113e8:	1120a540 	call	81120a54 <open>
811113ec:	00ffffc4 	movi	r3,-1
811113f0:	10c00526 	beq	r2,r3,81111408 <_open_r+0x50>
811113f4:	dfc00217 	ldw	ra,8(sp)
811113f8:	dc400117 	ldw	r17,4(sp)
811113fc:	dc000017 	ldw	r16,0(sp)
81111400:	dec00304 	addi	sp,sp,12
81111404:	f800283a 	ret
81111408:	80c00017 	ldw	r3,0(r16)
8111140c:	183ff926 	beq	r3,zero,811113f4 <__reset+0xfb0f13f4>
81111410:	88c00015 	stw	r3,0(r17)
81111414:	003ff706 	br	811113f4 <__reset+0xfb0f13f4>

81111418 <lflush>:
81111418:	2080030b 	ldhu	r2,12(r4)
8111141c:	00c00244 	movi	r3,9
81111420:	1080024c 	andi	r2,r2,9
81111424:	10c00226 	beq	r2,r3,81111430 <lflush+0x18>
81111428:	0005883a 	mov	r2,zero
8111142c:	f800283a 	ret
81111430:	1117a941 	jmpi	81117a94 <fflush>

81111434 <__srefill_r>:
81111434:	defffc04 	addi	sp,sp,-16
81111438:	dc400115 	stw	r17,4(sp)
8111143c:	dc000015 	stw	r16,0(sp)
81111440:	dfc00315 	stw	ra,12(sp)
81111444:	dc800215 	stw	r18,8(sp)
81111448:	2023883a 	mov	r17,r4
8111144c:	2821883a 	mov	r16,r5
81111450:	20000226 	beq	r4,zero,8111145c <__srefill_r+0x28>
81111454:	20800e17 	ldw	r2,56(r4)
81111458:	10003c26 	beq	r2,zero,8111154c <__srefill_r+0x118>
8111145c:	80c0030b 	ldhu	r3,12(r16)
81111460:	1908000c 	andi	r4,r3,8192
81111464:	1805883a 	mov	r2,r3
81111468:	2000071e 	bne	r4,zero,81111488 <__srefill_r+0x54>
8111146c:	81001917 	ldw	r4,100(r16)
81111470:	18880014 	ori	r2,r3,8192
81111474:	00f7ffc4 	movi	r3,-8193
81111478:	20c8703a 	and	r4,r4,r3
8111147c:	8080030d 	sth	r2,12(r16)
81111480:	1007883a 	mov	r3,r2
81111484:	81001915 	stw	r4,100(r16)
81111488:	80000115 	stw	zero,4(r16)
8111148c:	1100080c 	andi	r4,r2,32
81111490:	2000571e 	bne	r4,zero,811115f0 <__srefill_r+0x1bc>
81111494:	1100010c 	andi	r4,r2,4
81111498:	20001f26 	beq	r4,zero,81111518 <__srefill_r+0xe4>
8111149c:	81400c17 	ldw	r5,48(r16)
811114a0:	28000826 	beq	r5,zero,811114c4 <__srefill_r+0x90>
811114a4:	80801004 	addi	r2,r16,64
811114a8:	28800226 	beq	r5,r2,811114b4 <__srefill_r+0x80>
811114ac:	8809883a 	mov	r4,r17
811114b0:	11180340 	call	81118034 <_free_r>
811114b4:	80800f17 	ldw	r2,60(r16)
811114b8:	80000c15 	stw	zero,48(r16)
811114bc:	80800115 	stw	r2,4(r16)
811114c0:	1000391e 	bne	r2,zero,811115a8 <__srefill_r+0x174>
811114c4:	80800417 	ldw	r2,16(r16)
811114c8:	10004b26 	beq	r2,zero,811115f8 <__srefill_r+0x1c4>
811114cc:	8480030b 	ldhu	r18,12(r16)
811114d0:	908000cc 	andi	r2,r18,3
811114d4:	10001f1e 	bne	r2,zero,81111554 <__srefill_r+0x120>
811114d8:	81800417 	ldw	r6,16(r16)
811114dc:	80800817 	ldw	r2,32(r16)
811114e0:	81c00517 	ldw	r7,20(r16)
811114e4:	81400717 	ldw	r5,28(r16)
811114e8:	81800015 	stw	r6,0(r16)
811114ec:	8809883a 	mov	r4,r17
811114f0:	103ee83a 	callr	r2
811114f4:	80800115 	stw	r2,4(r16)
811114f8:	00800e0e 	bge	zero,r2,81111534 <__srefill_r+0x100>
811114fc:	0005883a 	mov	r2,zero
81111500:	dfc00317 	ldw	ra,12(sp)
81111504:	dc800217 	ldw	r18,8(sp)
81111508:	dc400117 	ldw	r17,4(sp)
8111150c:	dc000017 	ldw	r16,0(sp)
81111510:	dec00404 	addi	sp,sp,16
81111514:	f800283a 	ret
81111518:	1100040c 	andi	r4,r2,16
8111151c:	20003026 	beq	r4,zero,811115e0 <__srefill_r+0x1ac>
81111520:	1080020c 	andi	r2,r2,8
81111524:	1000241e 	bne	r2,zero,811115b8 <__srefill_r+0x184>
81111528:	18c00114 	ori	r3,r3,4
8111152c:	80c0030d 	sth	r3,12(r16)
81111530:	003fe406 	br	811114c4 <__reset+0xfb0f14c4>
81111534:	80c0030b 	ldhu	r3,12(r16)
81111538:	1000161e 	bne	r2,zero,81111594 <__srefill_r+0x160>
8111153c:	18c00814 	ori	r3,r3,32
81111540:	00bfffc4 	movi	r2,-1
81111544:	80c0030d 	sth	r3,12(r16)
81111548:	003fed06 	br	81111500 <__reset+0xfb0f1500>
8111154c:	1117e140 	call	81117e14 <__sinit>
81111550:	003fc206 	br	8111145c <__reset+0xfb0f145c>
81111554:	00a044f4 	movhi	r2,33043
81111558:	10a2ef04 	addi	r2,r2,-29764
8111155c:	11000017 	ldw	r4,0(r2)
81111560:	01604474 	movhi	r5,33041
81111564:	00800044 	movi	r2,1
81111568:	29450604 	addi	r5,r5,5144
8111156c:	8080030d 	sth	r2,12(r16)
81111570:	11188000 	call	81118800 <_fwalk>
81111574:	00800244 	movi	r2,9
81111578:	8480030d 	sth	r18,12(r16)
8111157c:	9480024c 	andi	r18,r18,9
81111580:	90bfd51e 	bne	r18,r2,811114d8 <__reset+0xfb0f14d8>
81111584:	800b883a 	mov	r5,r16
81111588:	8809883a 	mov	r4,r17
8111158c:	111781c0 	call	8111781c <__sflush_r>
81111590:	003fd106 	br	811114d8 <__reset+0xfb0f14d8>
81111594:	18c01014 	ori	r3,r3,64
81111598:	80000115 	stw	zero,4(r16)
8111159c:	00bfffc4 	movi	r2,-1
811115a0:	80c0030d 	sth	r3,12(r16)
811115a4:	003fd606 	br	81111500 <__reset+0xfb0f1500>
811115a8:	80c00e17 	ldw	r3,56(r16)
811115ac:	0005883a 	mov	r2,zero
811115b0:	80c00015 	stw	r3,0(r16)
811115b4:	003fd206 	br	81111500 <__reset+0xfb0f1500>
811115b8:	800b883a 	mov	r5,r16
811115bc:	8809883a 	mov	r4,r17
811115c0:	1117a380 	call	81117a38 <_fflush_r>
811115c4:	10000a1e 	bne	r2,zero,811115f0 <__srefill_r+0x1bc>
811115c8:	8080030b 	ldhu	r2,12(r16)
811115cc:	00fffdc4 	movi	r3,-9
811115d0:	80000215 	stw	zero,8(r16)
811115d4:	1886703a 	and	r3,r3,r2
811115d8:	80000615 	stw	zero,24(r16)
811115dc:	003fd206 	br	81111528 <__reset+0xfb0f1528>
811115e0:	00800244 	movi	r2,9
811115e4:	88800015 	stw	r2,0(r17)
811115e8:	18c01014 	ori	r3,r3,64
811115ec:	80c0030d 	sth	r3,12(r16)
811115f0:	00bfffc4 	movi	r2,-1
811115f4:	003fc206 	br	81111500 <__reset+0xfb0f1500>
811115f8:	800b883a 	mov	r5,r16
811115fc:	8809883a 	mov	r4,r17
81111600:	11107800 	call	81110780 <__smakebuf_r>
81111604:	003fb106 	br	811114cc <__reset+0xfb0f14cc>

81111608 <__srget_r>:
81111608:	defffd04 	addi	sp,sp,-12
8111160c:	dc400115 	stw	r17,4(sp)
81111610:	dc000015 	stw	r16,0(sp)
81111614:	dfc00215 	stw	ra,8(sp)
81111618:	2023883a 	mov	r17,r4
8111161c:	2821883a 	mov	r16,r5
81111620:	20000226 	beq	r4,zero,8111162c <__srget_r+0x24>
81111624:	20800e17 	ldw	r2,56(r4)
81111628:	10001026 	beq	r2,zero,8111166c <__srget_r+0x64>
8111162c:	800b883a 	mov	r5,r16
81111630:	8809883a 	mov	r4,r17
81111634:	11114340 	call	81111434 <__srefill_r>
81111638:	10000e1e 	bne	r2,zero,81111674 <__srget_r+0x6c>
8111163c:	80c00017 	ldw	r3,0(r16)
81111640:	80800117 	ldw	r2,4(r16)
81111644:	19000044 	addi	r4,r3,1
81111648:	10bfffc4 	addi	r2,r2,-1
8111164c:	80800115 	stw	r2,4(r16)
81111650:	81000015 	stw	r4,0(r16)
81111654:	18800003 	ldbu	r2,0(r3)
81111658:	dfc00217 	ldw	ra,8(sp)
8111165c:	dc400117 	ldw	r17,4(sp)
81111660:	dc000017 	ldw	r16,0(sp)
81111664:	dec00304 	addi	sp,sp,12
81111668:	f800283a 	ret
8111166c:	1117e140 	call	81117e14 <__sinit>
81111670:	003fee06 	br	8111162c <__reset+0xfb0f162c>
81111674:	00bfffc4 	movi	r2,-1
81111678:	003ff706 	br	81111658 <__reset+0xfb0f1658>

8111167c <__srget>:
8111167c:	00a044f4 	movhi	r2,33043
81111680:	10a2f004 	addi	r2,r2,-29760
81111684:	200b883a 	mov	r5,r4
81111688:	11000017 	ldw	r4,0(r2)
8111168c:	11116081 	jmpi	81111608 <__srget_r>

81111690 <_sbrk_r>:
81111690:	defffd04 	addi	sp,sp,-12
81111694:	dc000015 	stw	r16,0(sp)
81111698:	042044f4 	movhi	r16,33043
8111169c:	dc400115 	stw	r17,4(sp)
811116a0:	84231f04 	addi	r16,r16,-29572
811116a4:	2023883a 	mov	r17,r4
811116a8:	2809883a 	mov	r4,r5
811116ac:	dfc00215 	stw	ra,8(sp)
811116b0:	80000015 	stw	zero,0(r16)
811116b4:	1120d440 	call	81120d44 <sbrk>
811116b8:	00ffffc4 	movi	r3,-1
811116bc:	10c00526 	beq	r2,r3,811116d4 <_sbrk_r+0x44>
811116c0:	dfc00217 	ldw	ra,8(sp)
811116c4:	dc400117 	ldw	r17,4(sp)
811116c8:	dc000017 	ldw	r16,0(sp)
811116cc:	dec00304 	addi	sp,sp,12
811116d0:	f800283a 	ret
811116d4:	80c00017 	ldw	r3,0(r16)
811116d8:	183ff926 	beq	r3,zero,811116c0 <__reset+0xfb0f16c0>
811116dc:	88c00015 	stw	r3,0(r17)
811116e0:	003ff706 	br	811116c0 <__reset+0xfb0f16c0>

811116e4 <_sprintf_r>:
811116e4:	deffe404 	addi	sp,sp,-112
811116e8:	2807883a 	mov	r3,r5
811116ec:	dfc01a15 	stw	ra,104(sp)
811116f0:	d9c01b15 	stw	r7,108(sp)
811116f4:	00a00034 	movhi	r2,32768
811116f8:	10bfffc4 	addi	r2,r2,-1
811116fc:	02008204 	movi	r8,520
81111700:	d8800215 	stw	r2,8(sp)
81111704:	d8800515 	stw	r2,20(sp)
81111708:	d9c01b04 	addi	r7,sp,108
8111170c:	d80b883a 	mov	r5,sp
81111710:	00bfffc4 	movi	r2,-1
81111714:	d8c00015 	stw	r3,0(sp)
81111718:	d8c00415 	stw	r3,16(sp)
8111171c:	da00030d 	sth	r8,12(sp)
81111720:	d880038d 	sth	r2,14(sp)
81111724:	11118e40 	call	811118e4 <___svfprintf_internal_r>
81111728:	d8c00017 	ldw	r3,0(sp)
8111172c:	18000005 	stb	zero,0(r3)
81111730:	dfc01a17 	ldw	ra,104(sp)
81111734:	dec01c04 	addi	sp,sp,112
81111738:	f800283a 	ret

8111173c <sprintf>:
8111173c:	deffe304 	addi	sp,sp,-116
81111740:	2007883a 	mov	r3,r4
81111744:	dfc01a15 	stw	ra,104(sp)
81111748:	d9801b15 	stw	r6,108(sp)
8111174c:	d9c01c15 	stw	r7,112(sp)
81111750:	012044f4 	movhi	r4,33043
81111754:	2122f004 	addi	r4,r4,-29760
81111758:	21000017 	ldw	r4,0(r4)
8111175c:	00a00034 	movhi	r2,32768
81111760:	10bfffc4 	addi	r2,r2,-1
81111764:	280d883a 	mov	r6,r5
81111768:	02008204 	movi	r8,520
8111176c:	d8800215 	stw	r2,8(sp)
81111770:	d8800515 	stw	r2,20(sp)
81111774:	d9c01b04 	addi	r7,sp,108
81111778:	d80b883a 	mov	r5,sp
8111177c:	00bfffc4 	movi	r2,-1
81111780:	d8c00015 	stw	r3,0(sp)
81111784:	d8c00415 	stw	r3,16(sp)
81111788:	da00030d 	sth	r8,12(sp)
8111178c:	d880038d 	sth	r2,14(sp)
81111790:	11118e40 	call	811118e4 <___svfprintf_internal_r>
81111794:	d8c00017 	ldw	r3,0(sp)
81111798:	18000005 	stb	zero,0(r3)
8111179c:	dfc01a17 	ldw	ra,104(sp)
811117a0:	dec01d04 	addi	sp,sp,116
811117a4:	f800283a 	ret

811117a8 <__sread>:
811117a8:	defffe04 	addi	sp,sp,-8
811117ac:	dc000015 	stw	r16,0(sp)
811117b0:	2821883a 	mov	r16,r5
811117b4:	2940038f 	ldh	r5,14(r5)
811117b8:	dfc00115 	stw	ra,4(sp)
811117bc:	1119d540 	call	81119d54 <_read_r>
811117c0:	10000716 	blt	r2,zero,811117e0 <__sread+0x38>
811117c4:	80c01417 	ldw	r3,80(r16)
811117c8:	1887883a 	add	r3,r3,r2
811117cc:	80c01415 	stw	r3,80(r16)
811117d0:	dfc00117 	ldw	ra,4(sp)
811117d4:	dc000017 	ldw	r16,0(sp)
811117d8:	dec00204 	addi	sp,sp,8
811117dc:	f800283a 	ret
811117e0:	80c0030b 	ldhu	r3,12(r16)
811117e4:	18fbffcc 	andi	r3,r3,61439
811117e8:	80c0030d 	sth	r3,12(r16)
811117ec:	dfc00117 	ldw	ra,4(sp)
811117f0:	dc000017 	ldw	r16,0(sp)
811117f4:	dec00204 	addi	sp,sp,8
811117f8:	f800283a 	ret

811117fc <__seofread>:
811117fc:	0005883a 	mov	r2,zero
81111800:	f800283a 	ret

81111804 <__swrite>:
81111804:	2880030b 	ldhu	r2,12(r5)
81111808:	defffb04 	addi	sp,sp,-20
8111180c:	dcc00315 	stw	r19,12(sp)
81111810:	dc800215 	stw	r18,8(sp)
81111814:	dc400115 	stw	r17,4(sp)
81111818:	dc000015 	stw	r16,0(sp)
8111181c:	dfc00415 	stw	ra,16(sp)
81111820:	10c0400c 	andi	r3,r2,256
81111824:	2821883a 	mov	r16,r5
81111828:	2023883a 	mov	r17,r4
8111182c:	3025883a 	mov	r18,r6
81111830:	3827883a 	mov	r19,r7
81111834:	18000526 	beq	r3,zero,8111184c <__swrite+0x48>
81111838:	2940038f 	ldh	r5,14(r5)
8111183c:	01c00084 	movi	r7,2
81111840:	000d883a 	mov	r6,zero
81111844:	1118ab80 	call	81118ab8 <_lseek_r>
81111848:	8080030b 	ldhu	r2,12(r16)
8111184c:	8140038f 	ldh	r5,14(r16)
81111850:	10bbffcc 	andi	r2,r2,61439
81111854:	980f883a 	mov	r7,r19
81111858:	900d883a 	mov	r6,r18
8111185c:	8809883a 	mov	r4,r17
81111860:	8080030d 	sth	r2,12(r16)
81111864:	dfc00417 	ldw	ra,16(sp)
81111868:	dcc00317 	ldw	r19,12(sp)
8111186c:	dc800217 	ldw	r18,8(sp)
81111870:	dc400117 	ldw	r17,4(sp)
81111874:	dc000017 	ldw	r16,0(sp)
81111878:	dec00504 	addi	sp,sp,20
8111187c:	1115d8c1 	jmpi	81115d8c <_write_r>

81111880 <__sseek>:
81111880:	defffe04 	addi	sp,sp,-8
81111884:	dc000015 	stw	r16,0(sp)
81111888:	2821883a 	mov	r16,r5
8111188c:	2940038f 	ldh	r5,14(r5)
81111890:	dfc00115 	stw	ra,4(sp)
81111894:	1118ab80 	call	81118ab8 <_lseek_r>
81111898:	00ffffc4 	movi	r3,-1
8111189c:	10c00826 	beq	r2,r3,811118c0 <__sseek+0x40>
811118a0:	80c0030b 	ldhu	r3,12(r16)
811118a4:	80801415 	stw	r2,80(r16)
811118a8:	18c40014 	ori	r3,r3,4096
811118ac:	80c0030d 	sth	r3,12(r16)
811118b0:	dfc00117 	ldw	ra,4(sp)
811118b4:	dc000017 	ldw	r16,0(sp)
811118b8:	dec00204 	addi	sp,sp,8
811118bc:	f800283a 	ret
811118c0:	80c0030b 	ldhu	r3,12(r16)
811118c4:	18fbffcc 	andi	r3,r3,61439
811118c8:	80c0030d 	sth	r3,12(r16)
811118cc:	dfc00117 	ldw	ra,4(sp)
811118d0:	dc000017 	ldw	r16,0(sp)
811118d4:	dec00204 	addi	sp,sp,8
811118d8:	f800283a 	ret

811118dc <__sclose>:
811118dc:	2940038f 	ldh	r5,14(r5)
811118e0:	1115f401 	jmpi	81115f40 <_close_r>

811118e4 <___svfprintf_internal_r>:
811118e4:	deffb704 	addi	sp,sp,-292
811118e8:	dfc04815 	stw	ra,288(sp)
811118ec:	ddc04615 	stw	r23,280(sp)
811118f0:	d9402c15 	stw	r5,176(sp)
811118f4:	d9003915 	stw	r4,228(sp)
811118f8:	302f883a 	mov	r23,r6
811118fc:	d9c02d15 	stw	r7,180(sp)
81111900:	df004715 	stw	fp,284(sp)
81111904:	dd804515 	stw	r22,276(sp)
81111908:	dd404415 	stw	r21,272(sp)
8111190c:	dd004315 	stw	r20,268(sp)
81111910:	dcc04215 	stw	r19,264(sp)
81111914:	dc804115 	stw	r18,260(sp)
81111918:	dc404015 	stw	r17,256(sp)
8111191c:	dc003f15 	stw	r16,252(sp)
81111920:	1118a880 	call	81118a88 <_localeconv_r>
81111924:	10800017 	ldw	r2,0(r2)
81111928:	1009883a 	mov	r4,r2
8111192c:	d8803415 	stw	r2,208(sp)
81111930:	111a4680 	call	8111a468 <strlen>
81111934:	d8c02c17 	ldw	r3,176(sp)
81111938:	d8803815 	stw	r2,224(sp)
8111193c:	1880030b 	ldhu	r2,12(r3)
81111940:	1080200c 	andi	r2,r2,128
81111944:	10000226 	beq	r2,zero,81111950 <___svfprintf_internal_r+0x6c>
81111948:	18800417 	ldw	r2,16(r3)
8111194c:	10067f26 	beq	r2,zero,8111334c <___svfprintf_internal_r+0x1a68>
81111950:	dcc03917 	ldw	r19,228(sp)
81111954:	d8c00404 	addi	r3,sp,16
81111958:	056044b4 	movhi	r21,33042
8111195c:	d9001e04 	addi	r4,sp,120
81111960:	ad5ab984 	addi	r21,r21,27366
81111964:	d8c01e15 	stw	r3,120(sp)
81111968:	d8002015 	stw	zero,128(sp)
8111196c:	d8001f15 	stw	zero,124(sp)
81111970:	d8003315 	stw	zero,204(sp)
81111974:	d8003615 	stw	zero,216(sp)
81111978:	d8003715 	stw	zero,220(sp)
8111197c:	1811883a 	mov	r8,r3
81111980:	d8003a15 	stw	zero,232(sp)
81111984:	d8003b15 	stw	zero,236(sp)
81111988:	d8002f15 	stw	zero,188(sp)
8111198c:	d9002815 	stw	r4,160(sp)
81111990:	b8800007 	ldb	r2,0(r23)
81111994:	10026726 	beq	r2,zero,81112334 <___svfprintf_internal_r+0xa50>
81111998:	00c00944 	movi	r3,37
8111199c:	b821883a 	mov	r16,r23
811119a0:	10c0021e 	bne	r2,r3,811119ac <___svfprintf_internal_r+0xc8>
811119a4:	00001406 	br	811119f8 <___svfprintf_internal_r+0x114>
811119a8:	10c00326 	beq	r2,r3,811119b8 <___svfprintf_internal_r+0xd4>
811119ac:	84000044 	addi	r16,r16,1
811119b0:	80800007 	ldb	r2,0(r16)
811119b4:	103ffc1e 	bne	r2,zero,811119a8 <__reset+0xfb0f19a8>
811119b8:	85e3c83a 	sub	r17,r16,r23
811119bc:	88000e26 	beq	r17,zero,811119f8 <___svfprintf_internal_r+0x114>
811119c0:	d8c02017 	ldw	r3,128(sp)
811119c4:	d8801f17 	ldw	r2,124(sp)
811119c8:	45c00015 	stw	r23,0(r8)
811119cc:	1c47883a 	add	r3,r3,r17
811119d0:	10800044 	addi	r2,r2,1
811119d4:	d8c02015 	stw	r3,128(sp)
811119d8:	44400115 	stw	r17,4(r8)
811119dc:	d8801f15 	stw	r2,124(sp)
811119e0:	00c001c4 	movi	r3,7
811119e4:	18809716 	blt	r3,r2,81111c44 <___svfprintf_internal_r+0x360>
811119e8:	42000204 	addi	r8,r8,8
811119ec:	d9402f17 	ldw	r5,188(sp)
811119f0:	2c4b883a 	add	r5,r5,r17
811119f4:	d9402f15 	stw	r5,188(sp)
811119f8:	80800007 	ldb	r2,0(r16)
811119fc:	10009826 	beq	r2,zero,81111c60 <___svfprintf_internal_r+0x37c>
81111a00:	84400047 	ldb	r17,1(r16)
81111a04:	00bfffc4 	movi	r2,-1
81111a08:	85c00044 	addi	r23,r16,1
81111a0c:	d8002785 	stb	zero,158(sp)
81111a10:	0007883a 	mov	r3,zero
81111a14:	000f883a 	mov	r7,zero
81111a18:	d8802915 	stw	r2,164(sp)
81111a1c:	d8003115 	stw	zero,196(sp)
81111a20:	0025883a 	mov	r18,zero
81111a24:	01401604 	movi	r5,88
81111a28:	01800244 	movi	r6,9
81111a2c:	02800a84 	movi	r10,42
81111a30:	02401b04 	movi	r9,108
81111a34:	bdc00044 	addi	r23,r23,1
81111a38:	88bff804 	addi	r2,r17,-32
81111a3c:	2882f036 	bltu	r5,r2,81112600 <___svfprintf_internal_r+0xd1c>
81111a40:	100490ba 	slli	r2,r2,2
81111a44:	01204474 	movhi	r4,33041
81111a48:	21069604 	addi	r4,r4,6744
81111a4c:	1105883a 	add	r2,r2,r4
81111a50:	10800017 	ldw	r2,0(r2)
81111a54:	1000683a 	jmp	r2
81111a58:	81112568 	cmpgeui	r4,r16,17557
81111a5c:	81112600 	call	88111260 <__reset+0x20f1260>
81111a60:	81112600 	call	88111260 <__reset+0x20f1260>
81111a64:	8111255c 	xori	r4,r16,17557
81111a68:	81112600 	call	88111260 <__reset+0x20f1260>
81111a6c:	81112600 	call	88111260 <__reset+0x20f1260>
81111a70:	81112600 	call	88111260 <__reset+0x20f1260>
81111a74:	81112600 	call	88111260 <__reset+0x20f1260>
81111a78:	81112600 	call	88111260 <__reset+0x20f1260>
81111a7c:	81112600 	call	88111260 <__reset+0x20f1260>
81111a80:	81111cbc 	xorhi	r4,r16,17522
81111a84:	81112498 	cmpnei	r4,r16,17554
81111a88:	81112600 	call	88111260 <__reset+0x20f1260>
81111a8c:	81111bcc 	andi	r4,r16,17519
81111a90:	81111ce4 	muli	r4,r16,17523
81111a94:	81112600 	call	88111260 <__reset+0x20f1260>
81111a98:	81111d58 	cmpnei	r4,r16,17525
81111a9c:	81111d24 	muli	r4,r16,17524
81111aa0:	81111d24 	muli	r4,r16,17524
81111aa4:	81111d24 	muli	r4,r16,17524
81111aa8:	81111d24 	muli	r4,r16,17524
81111aac:	81111d24 	muli	r4,r16,17524
81111ab0:	81111d24 	muli	r4,r16,17524
81111ab4:	81111d24 	muli	r4,r16,17524
81111ab8:	81111d24 	muli	r4,r16,17524
81111abc:	81111d24 	muli	r4,r16,17524
81111ac0:	81112600 	call	88111260 <__reset+0x20f1260>
81111ac4:	81112600 	call	88111260 <__reset+0x20f1260>
81111ac8:	81112600 	call	88111260 <__reset+0x20f1260>
81111acc:	81112600 	call	88111260 <__reset+0x20f1260>
81111ad0:	81112600 	call	88111260 <__reset+0x20f1260>
81111ad4:	81112600 	call	88111260 <__reset+0x20f1260>
81111ad8:	81112600 	call	88111260 <__reset+0x20f1260>
81111adc:	81112600 	call	88111260 <__reset+0x20f1260>
81111ae0:	81112600 	call	88111260 <__reset+0x20f1260>
81111ae4:	81112600 	call	88111260 <__reset+0x20f1260>
81111ae8:	81111e10 	cmplti	r4,r16,17528
81111aec:	81111d64 	muli	r4,r16,17525
81111af0:	81112600 	call	88111260 <__reset+0x20f1260>
81111af4:	81111d64 	muli	r4,r16,17525
81111af8:	81112600 	call	88111260 <__reset+0x20f1260>
81111afc:	81112600 	call	88111260 <__reset+0x20f1260>
81111b00:	81112600 	call	88111260 <__reset+0x20f1260>
81111b04:	81112600 	call	88111260 <__reset+0x20f1260>
81111b08:	81111e04 	addi	r4,r16,17528
81111b0c:	81112600 	call	88111260 <__reset+0x20f1260>
81111b10:	81112600 	call	88111260 <__reset+0x20f1260>
81111b14:	81111ecc 	andi	r4,r16,17531
81111b18:	81112600 	call	88111260 <__reset+0x20f1260>
81111b1c:	81112600 	call	88111260 <__reset+0x20f1260>
81111b20:	81112600 	call	88111260 <__reset+0x20f1260>
81111b24:	81112600 	call	88111260 <__reset+0x20f1260>
81111b28:	81112600 	call	88111260 <__reset+0x20f1260>
81111b2c:	8111233c 	xorhi	r4,r16,17548
81111b30:	81112600 	call	88111260 <__reset+0x20f1260>
81111b34:	81112600 	call	88111260 <__reset+0x20f1260>
81111b38:	8111239c 	xori	r4,r16,17550
81111b3c:	81112600 	call	88111260 <__reset+0x20f1260>
81111b40:	81112600 	call	88111260 <__reset+0x20f1260>
81111b44:	81112600 	call	88111260 <__reset+0x20f1260>
81111b48:	81112600 	call	88111260 <__reset+0x20f1260>
81111b4c:	81112600 	call	88111260 <__reset+0x20f1260>
81111b50:	81112600 	call	88111260 <__reset+0x20f1260>
81111b54:	81112600 	call	88111260 <__reset+0x20f1260>
81111b58:	81112600 	call	88111260 <__reset+0x20f1260>
81111b5c:	81112600 	call	88111260 <__reset+0x20f1260>
81111b60:	81112600 	call	88111260 <__reset+0x20f1260>
81111b64:	8111244c 	andi	r4,r16,17553
81111b68:	81112588 	cmpgei	r4,r16,17558
81111b6c:	81111d64 	muli	r4,r16,17525
81111b70:	81111d64 	muli	r4,r16,17525
81111b74:	81111d64 	muli	r4,r16,17525
81111b78:	811125dc 	xori	r4,r16,17559
81111b7c:	81112588 	cmpgei	r4,r16,17558
81111b80:	81112600 	call	88111260 <__reset+0x20f1260>
81111b84:	81112600 	call	88111260 <__reset+0x20f1260>
81111b88:	81112598 	cmpnei	r4,r16,17558
81111b8c:	81112600 	call	88111260 <__reset+0x20f1260>
81111b90:	811125a8 	cmpgeui	r4,r16,17558
81111b94:	81112488 	cmpgei	r4,r16,17554
81111b98:	81111bd8 	cmpnei	r4,r16,17519
81111b9c:	811124a8 	cmpgeui	r4,r16,17554
81111ba0:	81112600 	call	88111260 <__reset+0x20f1260>
81111ba4:	811124b4 	orhi	r4,r16,17554
81111ba8:	81112600 	call	88111260 <__reset+0x20f1260>
81111bac:	81112510 	cmplti	r4,r16,17556
81111bb0:	81112600 	call	88111260 <__reset+0x20f1260>
81111bb4:	81112600 	call	88111260 <__reset+0x20f1260>
81111bb8:	81112520 	cmpeqi	r4,r16,17556
81111bbc:	d9003117 	ldw	r4,196(sp)
81111bc0:	d8802d15 	stw	r2,180(sp)
81111bc4:	0109c83a 	sub	r4,zero,r4
81111bc8:	d9003115 	stw	r4,196(sp)
81111bcc:	94800114 	ori	r18,r18,4
81111bd0:	bc400007 	ldb	r17,0(r23)
81111bd4:	003f9706 	br	81111a34 <__reset+0xfb0f1a34>
81111bd8:	00800c04 	movi	r2,48
81111bdc:	d9002d17 	ldw	r4,180(sp)
81111be0:	d9402917 	ldw	r5,164(sp)
81111be4:	d8802705 	stb	r2,156(sp)
81111be8:	00801e04 	movi	r2,120
81111bec:	d8802745 	stb	r2,157(sp)
81111bf0:	d8002785 	stb	zero,158(sp)
81111bf4:	20c00104 	addi	r3,r4,4
81111bf8:	25000017 	ldw	r20,0(r4)
81111bfc:	002d883a 	mov	r22,zero
81111c00:	90800094 	ori	r2,r18,2
81111c04:	28028616 	blt	r5,zero,81112620 <___svfprintf_internal_r+0xd3c>
81111c08:	00bfdfc4 	movi	r2,-129
81111c0c:	90a4703a 	and	r18,r18,r2
81111c10:	d8c02d15 	stw	r3,180(sp)
81111c14:	94800094 	ori	r18,r18,2
81111c18:	a002731e 	bne	r20,zero,811125e8 <___svfprintf_internal_r+0xd04>
81111c1c:	00a044b4 	movhi	r2,33042
81111c20:	109ab204 	addi	r2,r2,27336
81111c24:	d8803a15 	stw	r2,232(sp)
81111c28:	04401e04 	movi	r17,120
81111c2c:	d8c02917 	ldw	r3,164(sp)
81111c30:	0039883a 	mov	fp,zero
81111c34:	1801d526 	beq	r3,zero,8111238c <___svfprintf_internal_r+0xaa8>
81111c38:	0029883a 	mov	r20,zero
81111c3c:	002d883a 	mov	r22,zero
81111c40:	0001f106 	br	81112408 <___svfprintf_internal_r+0xb24>
81111c44:	d9402c17 	ldw	r5,176(sp)
81111c48:	d9801e04 	addi	r6,sp,120
81111c4c:	9809883a 	mov	r4,r19
81111c50:	111a5000 	call	8111a500 <__ssprint_r>
81111c54:	1000081e 	bne	r2,zero,81111c78 <___svfprintf_internal_r+0x394>
81111c58:	da000404 	addi	r8,sp,16
81111c5c:	003f6306 	br	811119ec <__reset+0xfb0f19ec>
81111c60:	d8802017 	ldw	r2,128(sp)
81111c64:	10000426 	beq	r2,zero,81111c78 <___svfprintf_internal_r+0x394>
81111c68:	d9402c17 	ldw	r5,176(sp)
81111c6c:	d9003917 	ldw	r4,228(sp)
81111c70:	d9801e04 	addi	r6,sp,120
81111c74:	111a5000 	call	8111a500 <__ssprint_r>
81111c78:	d8802c17 	ldw	r2,176(sp)
81111c7c:	10c0030b 	ldhu	r3,12(r2)
81111c80:	d8802f17 	ldw	r2,188(sp)
81111c84:	18c0100c 	andi	r3,r3,64
81111c88:	1805f51e 	bne	r3,zero,81113460 <___svfprintf_internal_r+0x1b7c>
81111c8c:	dfc04817 	ldw	ra,288(sp)
81111c90:	df004717 	ldw	fp,284(sp)
81111c94:	ddc04617 	ldw	r23,280(sp)
81111c98:	dd804517 	ldw	r22,276(sp)
81111c9c:	dd404417 	ldw	r21,272(sp)
81111ca0:	dd004317 	ldw	r20,268(sp)
81111ca4:	dcc04217 	ldw	r19,264(sp)
81111ca8:	dc804117 	ldw	r18,260(sp)
81111cac:	dc404017 	ldw	r17,256(sp)
81111cb0:	dc003f17 	ldw	r16,252(sp)
81111cb4:	dec04904 	addi	sp,sp,292
81111cb8:	f800283a 	ret
81111cbc:	d8802d17 	ldw	r2,180(sp)
81111cc0:	d9002d17 	ldw	r4,180(sp)
81111cc4:	10800017 	ldw	r2,0(r2)
81111cc8:	d8803115 	stw	r2,196(sp)
81111ccc:	20800104 	addi	r2,r4,4
81111cd0:	d9003117 	ldw	r4,196(sp)
81111cd4:	203fb916 	blt	r4,zero,81111bbc <__reset+0xfb0f1bbc>
81111cd8:	d8802d15 	stw	r2,180(sp)
81111cdc:	bc400007 	ldb	r17,0(r23)
81111ce0:	003f5406 	br	81111a34 <__reset+0xfb0f1a34>
81111ce4:	bc400007 	ldb	r17,0(r23)
81111ce8:	bac00044 	addi	r11,r23,1
81111cec:	8a873926 	beq	r17,r10,811139d4 <___svfprintf_internal_r+0x20f0>
81111cf0:	88bff404 	addi	r2,r17,-48
81111cf4:	0009883a 	mov	r4,zero
81111cf8:	30868836 	bltu	r6,r2,8111371c <___svfprintf_internal_r+0x1e38>
81111cfc:	5c400007 	ldb	r17,0(r11)
81111d00:	210002a4 	muli	r4,r4,10
81111d04:	5dc00044 	addi	r23,r11,1
81111d08:	b817883a 	mov	r11,r23
81111d0c:	2089883a 	add	r4,r4,r2
81111d10:	88bff404 	addi	r2,r17,-48
81111d14:	30bff92e 	bgeu	r6,r2,81111cfc <__reset+0xfb0f1cfc>
81111d18:	2005d716 	blt	r4,zero,81113478 <___svfprintf_internal_r+0x1b94>
81111d1c:	d9002915 	stw	r4,164(sp)
81111d20:	003f4506 	br	81111a38 <__reset+0xfb0f1a38>
81111d24:	b809883a 	mov	r4,r23
81111d28:	d8003115 	stw	zero,196(sp)
81111d2c:	88bff404 	addi	r2,r17,-48
81111d30:	0017883a 	mov	r11,zero
81111d34:	24400007 	ldb	r17,0(r4)
81111d38:	5ac002a4 	muli	r11,r11,10
81111d3c:	bdc00044 	addi	r23,r23,1
81111d40:	b809883a 	mov	r4,r23
81111d44:	12d7883a 	add	r11,r2,r11
81111d48:	88bff404 	addi	r2,r17,-48
81111d4c:	30bff92e 	bgeu	r6,r2,81111d34 <__reset+0xfb0f1d34>
81111d50:	dac03115 	stw	r11,196(sp)
81111d54:	003f3806 	br	81111a38 <__reset+0xfb0f1a38>
81111d58:	94802014 	ori	r18,r18,128
81111d5c:	bc400007 	ldb	r17,0(r23)
81111d60:	003f3406 	br	81111a34 <__reset+0xfb0f1a34>
81111d64:	18c03fcc 	andi	r3,r3,255
81111d68:	1807471e 	bne	r3,zero,81113a88 <___svfprintf_internal_r+0x21a4>
81111d6c:	9080020c 	andi	r2,r18,8
81111d70:	10047d26 	beq	r2,zero,81112f68 <___svfprintf_internal_r+0x1684>
81111d74:	d8c02d17 	ldw	r3,180(sp)
81111d78:	d9002d17 	ldw	r4,180(sp)
81111d7c:	d9402d17 	ldw	r5,180(sp)
81111d80:	18c00017 	ldw	r3,0(r3)
81111d84:	21000117 	ldw	r4,4(r4)
81111d88:	29400204 	addi	r5,r5,8
81111d8c:	d8c03615 	stw	r3,216(sp)
81111d90:	d9003715 	stw	r4,220(sp)
81111d94:	d9402d15 	stw	r5,180(sp)
81111d98:	d9003617 	ldw	r4,216(sp)
81111d9c:	d9403717 	ldw	r5,220(sp)
81111da0:	da003e15 	stw	r8,248(sp)
81111da4:	04000044 	movi	r16,1
81111da8:	111a3180 	call	8111a318 <__fpclassifyd>
81111dac:	da003e17 	ldw	r8,248(sp)
81111db0:	14044b1e 	bne	r2,r16,81112ee0 <___svfprintf_internal_r+0x15fc>
81111db4:	d9003617 	ldw	r4,216(sp)
81111db8:	d9403717 	ldw	r5,220(sp)
81111dbc:	000d883a 	mov	r6,zero
81111dc0:	000f883a 	mov	r7,zero
81111dc4:	111f5c00 	call	8111f5c0 <__ledf2>
81111dc8:	da003e17 	ldw	r8,248(sp)
81111dcc:	1005f316 	blt	r2,zero,8111359c <___svfprintf_internal_r+0x1cb8>
81111dd0:	df002783 	ldbu	fp,158(sp)
81111dd4:	008011c4 	movi	r2,71
81111dd8:	1445590e 	bge	r2,r17,81113340 <___svfprintf_internal_r+0x1a5c>
81111ddc:	042044b4 	movhi	r16,33042
81111de0:	841aaa04 	addi	r16,r16,27304
81111de4:	00c000c4 	movi	r3,3
81111de8:	00bfdfc4 	movi	r2,-129
81111dec:	d8c02a15 	stw	r3,168(sp)
81111df0:	90a4703a 	and	r18,r18,r2
81111df4:	d8c02e15 	stw	r3,184(sp)
81111df8:	d8002915 	stw	zero,164(sp)
81111dfc:	d8003215 	stw	zero,200(sp)
81111e00:	00006606 	br	81111f9c <___svfprintf_internal_r+0x6b8>
81111e04:	94800214 	ori	r18,r18,8
81111e08:	bc400007 	ldb	r17,0(r23)
81111e0c:	003f0906 	br	81111a34 <__reset+0xfb0f1a34>
81111e10:	18c03fcc 	andi	r3,r3,255
81111e14:	1807181e 	bne	r3,zero,81113a78 <___svfprintf_internal_r+0x2194>
81111e18:	94800414 	ori	r18,r18,16
81111e1c:	9080080c 	andi	r2,r18,32
81111e20:	10039626 	beq	r2,zero,81112c7c <___svfprintf_internal_r+0x1398>
81111e24:	d9402d17 	ldw	r5,180(sp)
81111e28:	28800117 	ldw	r2,4(r5)
81111e2c:	2d000017 	ldw	r20,0(r5)
81111e30:	29400204 	addi	r5,r5,8
81111e34:	d9402d15 	stw	r5,180(sp)
81111e38:	102d883a 	mov	r22,r2
81111e3c:	10039816 	blt	r2,zero,81112ca0 <___svfprintf_internal_r+0x13bc>
81111e40:	d9402917 	ldw	r5,164(sp)
81111e44:	df002783 	ldbu	fp,158(sp)
81111e48:	2803ab16 	blt	r5,zero,81112cf8 <___svfprintf_internal_r+0x1414>
81111e4c:	00ffdfc4 	movi	r3,-129
81111e50:	a584b03a 	or	r2,r20,r22
81111e54:	90e4703a 	and	r18,r18,r3
81111e58:	10014a26 	beq	r2,zero,81112384 <___svfprintf_internal_r+0xaa0>
81111e5c:	b0034b26 	beq	r22,zero,81112b8c <___svfprintf_internal_r+0x12a8>
81111e60:	dc402a15 	stw	r17,168(sp)
81111e64:	dc001e04 	addi	r16,sp,120
81111e68:	b023883a 	mov	r17,r22
81111e6c:	402d883a 	mov	r22,r8
81111e70:	a009883a 	mov	r4,r20
81111e74:	880b883a 	mov	r5,r17
81111e78:	01800284 	movi	r6,10
81111e7c:	000f883a 	mov	r7,zero
81111e80:	111dbdc0 	call	8111dbdc <__umoddi3>
81111e84:	10800c04 	addi	r2,r2,48
81111e88:	843fffc4 	addi	r16,r16,-1
81111e8c:	a009883a 	mov	r4,r20
81111e90:	880b883a 	mov	r5,r17
81111e94:	80800005 	stb	r2,0(r16)
81111e98:	01800284 	movi	r6,10
81111e9c:	000f883a 	mov	r7,zero
81111ea0:	111d6640 	call	8111d664 <__udivdi3>
81111ea4:	1029883a 	mov	r20,r2
81111ea8:	10c4b03a 	or	r2,r2,r3
81111eac:	1823883a 	mov	r17,r3
81111eb0:	103fef1e 	bne	r2,zero,81111e70 <__reset+0xfb0f1e70>
81111eb4:	d8c02817 	ldw	r3,160(sp)
81111eb8:	dc402a17 	ldw	r17,168(sp)
81111ebc:	b011883a 	mov	r8,r22
81111ec0:	1c07c83a 	sub	r3,r3,r16
81111ec4:	d8c02e15 	stw	r3,184(sp)
81111ec8:	00002e06 	br	81111f84 <___svfprintf_internal_r+0x6a0>
81111ecc:	18c03fcc 	andi	r3,r3,255
81111ed0:	1806e71e 	bne	r3,zero,81113a70 <___svfprintf_internal_r+0x218c>
81111ed4:	94800414 	ori	r18,r18,16
81111ed8:	9080080c 	andi	r2,r18,32
81111edc:	1002d426 	beq	r2,zero,81112a30 <___svfprintf_internal_r+0x114c>
81111ee0:	d9402d17 	ldw	r5,180(sp)
81111ee4:	d8c02917 	ldw	r3,164(sp)
81111ee8:	d8002785 	stb	zero,158(sp)
81111eec:	28800204 	addi	r2,r5,8
81111ef0:	2d000017 	ldw	r20,0(r5)
81111ef4:	2d800117 	ldw	r22,4(r5)
81111ef8:	18041516 	blt	r3,zero,81112f50 <___svfprintf_internal_r+0x166c>
81111efc:	013fdfc4 	movi	r4,-129
81111f00:	a586b03a 	or	r3,r20,r22
81111f04:	d8802d15 	stw	r2,180(sp)
81111f08:	9124703a 	and	r18,r18,r4
81111f0c:	1802d51e 	bne	r3,zero,81112a64 <___svfprintf_internal_r+0x1180>
81111f10:	d9402917 	ldw	r5,164(sp)
81111f14:	0039883a 	mov	fp,zero
81111f18:	2806be26 	beq	r5,zero,81113a14 <___svfprintf_internal_r+0x2130>
81111f1c:	0029883a 	mov	r20,zero
81111f20:	002d883a 	mov	r22,zero
81111f24:	dc001e04 	addi	r16,sp,120
81111f28:	a006d0fa 	srli	r3,r20,3
81111f2c:	b008977a 	slli	r4,r22,29
81111f30:	b02cd0fa 	srli	r22,r22,3
81111f34:	a50001cc 	andi	r20,r20,7
81111f38:	a0800c04 	addi	r2,r20,48
81111f3c:	843fffc4 	addi	r16,r16,-1
81111f40:	20e8b03a 	or	r20,r4,r3
81111f44:	80800005 	stb	r2,0(r16)
81111f48:	a586b03a 	or	r3,r20,r22
81111f4c:	183ff61e 	bne	r3,zero,81111f28 <__reset+0xfb0f1f28>
81111f50:	90c0004c 	andi	r3,r18,1
81111f54:	18013926 	beq	r3,zero,8111243c <___svfprintf_internal_r+0xb58>
81111f58:	10803fcc 	andi	r2,r2,255
81111f5c:	1080201c 	xori	r2,r2,128
81111f60:	10bfe004 	addi	r2,r2,-128
81111f64:	00c00c04 	movi	r3,48
81111f68:	10c13426 	beq	r2,r3,8111243c <___svfprintf_internal_r+0xb58>
81111f6c:	80ffffc5 	stb	r3,-1(r16)
81111f70:	d8c02817 	ldw	r3,160(sp)
81111f74:	80bfffc4 	addi	r2,r16,-1
81111f78:	1021883a 	mov	r16,r2
81111f7c:	1887c83a 	sub	r3,r3,r2
81111f80:	d8c02e15 	stw	r3,184(sp)
81111f84:	d8802e17 	ldw	r2,184(sp)
81111f88:	d9002917 	ldw	r4,164(sp)
81111f8c:	1100010e 	bge	r2,r4,81111f94 <___svfprintf_internal_r+0x6b0>
81111f90:	2005883a 	mov	r2,r4
81111f94:	d8802a15 	stw	r2,168(sp)
81111f98:	d8003215 	stw	zero,200(sp)
81111f9c:	e7003fcc 	andi	fp,fp,255
81111fa0:	e700201c 	xori	fp,fp,128
81111fa4:	e73fe004 	addi	fp,fp,-128
81111fa8:	e0000326 	beq	fp,zero,81111fb8 <___svfprintf_internal_r+0x6d4>
81111fac:	d8c02a17 	ldw	r3,168(sp)
81111fb0:	18c00044 	addi	r3,r3,1
81111fb4:	d8c02a15 	stw	r3,168(sp)
81111fb8:	90c0008c 	andi	r3,r18,2
81111fbc:	d8c02b15 	stw	r3,172(sp)
81111fc0:	18000326 	beq	r3,zero,81111fd0 <___svfprintf_internal_r+0x6ec>
81111fc4:	d8c02a17 	ldw	r3,168(sp)
81111fc8:	18c00084 	addi	r3,r3,2
81111fcc:	d8c02a15 	stw	r3,168(sp)
81111fd0:	90c0210c 	andi	r3,r18,132
81111fd4:	d8c03015 	stw	r3,192(sp)
81111fd8:	1801a11e 	bne	r3,zero,81112660 <___svfprintf_internal_r+0xd7c>
81111fdc:	d9003117 	ldw	r4,196(sp)
81111fe0:	d8c02a17 	ldw	r3,168(sp)
81111fe4:	20e9c83a 	sub	r20,r4,r3
81111fe8:	05019d0e 	bge	zero,r20,81112660 <___svfprintf_internal_r+0xd7c>
81111fec:	02400404 	movi	r9,16
81111ff0:	d8c02017 	ldw	r3,128(sp)
81111ff4:	d8801f17 	ldw	r2,124(sp)
81111ff8:	4d051b0e 	bge	r9,r20,81113468 <___svfprintf_internal_r+0x1b84>
81111ffc:	016044b4 	movhi	r5,33042
81112000:	295abd84 	addi	r5,r5,27382
81112004:	dc403c15 	stw	r17,240(sp)
81112008:	d9403515 	stw	r5,212(sp)
8111200c:	a023883a 	mov	r17,r20
81112010:	482d883a 	mov	r22,r9
81112014:	9029883a 	mov	r20,r18
81112018:	070001c4 	movi	fp,7
8111201c:	8025883a 	mov	r18,r16
81112020:	dc002c17 	ldw	r16,176(sp)
81112024:	00000306 	br	81112034 <___svfprintf_internal_r+0x750>
81112028:	8c7ffc04 	addi	r17,r17,-16
8111202c:	42000204 	addi	r8,r8,8
81112030:	b440130e 	bge	r22,r17,81112080 <___svfprintf_internal_r+0x79c>
81112034:	012044b4 	movhi	r4,33042
81112038:	18c00404 	addi	r3,r3,16
8111203c:	10800044 	addi	r2,r2,1
81112040:	211abd84 	addi	r4,r4,27382
81112044:	41000015 	stw	r4,0(r8)
81112048:	45800115 	stw	r22,4(r8)
8111204c:	d8c02015 	stw	r3,128(sp)
81112050:	d8801f15 	stw	r2,124(sp)
81112054:	e0bff40e 	bge	fp,r2,81112028 <__reset+0xfb0f2028>
81112058:	d9801e04 	addi	r6,sp,120
8111205c:	800b883a 	mov	r5,r16
81112060:	9809883a 	mov	r4,r19
81112064:	111a5000 	call	8111a500 <__ssprint_r>
81112068:	103f031e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
8111206c:	8c7ffc04 	addi	r17,r17,-16
81112070:	d8c02017 	ldw	r3,128(sp)
81112074:	d8801f17 	ldw	r2,124(sp)
81112078:	da000404 	addi	r8,sp,16
8111207c:	b47fed16 	blt	r22,r17,81112034 <__reset+0xfb0f2034>
81112080:	9021883a 	mov	r16,r18
81112084:	a025883a 	mov	r18,r20
81112088:	8829883a 	mov	r20,r17
8111208c:	dc403c17 	ldw	r17,240(sp)
81112090:	d9403517 	ldw	r5,212(sp)
81112094:	a0c7883a 	add	r3,r20,r3
81112098:	10800044 	addi	r2,r2,1
8111209c:	41400015 	stw	r5,0(r8)
811120a0:	45000115 	stw	r20,4(r8)
811120a4:	d8c02015 	stw	r3,128(sp)
811120a8:	d8801f15 	stw	r2,124(sp)
811120ac:	010001c4 	movi	r4,7
811120b0:	20829f16 	blt	r4,r2,81112b30 <___svfprintf_internal_r+0x124c>
811120b4:	df002787 	ldb	fp,158(sp)
811120b8:	42000204 	addi	r8,r8,8
811120bc:	e0000c26 	beq	fp,zero,811120f0 <___svfprintf_internal_r+0x80c>
811120c0:	d8801f17 	ldw	r2,124(sp)
811120c4:	d9002784 	addi	r4,sp,158
811120c8:	18c00044 	addi	r3,r3,1
811120cc:	10800044 	addi	r2,r2,1
811120d0:	41000015 	stw	r4,0(r8)
811120d4:	01000044 	movi	r4,1
811120d8:	41000115 	stw	r4,4(r8)
811120dc:	d8c02015 	stw	r3,128(sp)
811120e0:	d8801f15 	stw	r2,124(sp)
811120e4:	010001c4 	movi	r4,7
811120e8:	20823816 	blt	r4,r2,811129cc <___svfprintf_internal_r+0x10e8>
811120ec:	42000204 	addi	r8,r8,8
811120f0:	d8802b17 	ldw	r2,172(sp)
811120f4:	10000c26 	beq	r2,zero,81112128 <___svfprintf_internal_r+0x844>
811120f8:	d8801f17 	ldw	r2,124(sp)
811120fc:	d9002704 	addi	r4,sp,156
81112100:	18c00084 	addi	r3,r3,2
81112104:	10800044 	addi	r2,r2,1
81112108:	41000015 	stw	r4,0(r8)
8111210c:	01000084 	movi	r4,2
81112110:	41000115 	stw	r4,4(r8)
81112114:	d8c02015 	stw	r3,128(sp)
81112118:	d8801f15 	stw	r2,124(sp)
8111211c:	010001c4 	movi	r4,7
81112120:	20823216 	blt	r4,r2,811129ec <___svfprintf_internal_r+0x1108>
81112124:	42000204 	addi	r8,r8,8
81112128:	d9003017 	ldw	r4,192(sp)
8111212c:	00802004 	movi	r2,128
81112130:	20819726 	beq	r4,r2,81112790 <___svfprintf_internal_r+0xeac>
81112134:	d9402917 	ldw	r5,164(sp)
81112138:	d8802e17 	ldw	r2,184(sp)
8111213c:	28adc83a 	sub	r22,r5,r2
81112140:	05802f0e 	bge	zero,r22,81112200 <___svfprintf_internal_r+0x91c>
81112144:	07000404 	movi	fp,16
81112148:	d8801f17 	ldw	r2,124(sp)
8111214c:	e583c00e 	bge	fp,r22,81113050 <___svfprintf_internal_r+0x176c>
81112150:	016044b4 	movhi	r5,33042
81112154:	295ab984 	addi	r5,r5,27366
81112158:	dc402915 	stw	r17,164(sp)
8111215c:	d9402b15 	stw	r5,172(sp)
81112160:	b023883a 	mov	r17,r22
81112164:	050001c4 	movi	r20,7
81112168:	902d883a 	mov	r22,r18
8111216c:	8025883a 	mov	r18,r16
81112170:	dc002c17 	ldw	r16,176(sp)
81112174:	00000306 	br	81112184 <___svfprintf_internal_r+0x8a0>
81112178:	8c7ffc04 	addi	r17,r17,-16
8111217c:	42000204 	addi	r8,r8,8
81112180:	e440110e 	bge	fp,r17,811121c8 <___svfprintf_internal_r+0x8e4>
81112184:	18c00404 	addi	r3,r3,16
81112188:	10800044 	addi	r2,r2,1
8111218c:	45400015 	stw	r21,0(r8)
81112190:	47000115 	stw	fp,4(r8)
81112194:	d8c02015 	stw	r3,128(sp)
81112198:	d8801f15 	stw	r2,124(sp)
8111219c:	a0bff60e 	bge	r20,r2,81112178 <__reset+0xfb0f2178>
811121a0:	d9801e04 	addi	r6,sp,120
811121a4:	800b883a 	mov	r5,r16
811121a8:	9809883a 	mov	r4,r19
811121ac:	111a5000 	call	8111a500 <__ssprint_r>
811121b0:	103eb11e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
811121b4:	8c7ffc04 	addi	r17,r17,-16
811121b8:	d8c02017 	ldw	r3,128(sp)
811121bc:	d8801f17 	ldw	r2,124(sp)
811121c0:	da000404 	addi	r8,sp,16
811121c4:	e47fef16 	blt	fp,r17,81112184 <__reset+0xfb0f2184>
811121c8:	9021883a 	mov	r16,r18
811121cc:	b025883a 	mov	r18,r22
811121d0:	882d883a 	mov	r22,r17
811121d4:	dc402917 	ldw	r17,164(sp)
811121d8:	d9002b17 	ldw	r4,172(sp)
811121dc:	1d87883a 	add	r3,r3,r22
811121e0:	10800044 	addi	r2,r2,1
811121e4:	41000015 	stw	r4,0(r8)
811121e8:	45800115 	stw	r22,4(r8)
811121ec:	d8c02015 	stw	r3,128(sp)
811121f0:	d8801f15 	stw	r2,124(sp)
811121f4:	010001c4 	movi	r4,7
811121f8:	2081ec16 	blt	r4,r2,811129ac <___svfprintf_internal_r+0x10c8>
811121fc:	42000204 	addi	r8,r8,8
81112200:	9080400c 	andi	r2,r18,256
81112204:	1001181e 	bne	r2,zero,81112668 <___svfprintf_internal_r+0xd84>
81112208:	d9402e17 	ldw	r5,184(sp)
8111220c:	d8801f17 	ldw	r2,124(sp)
81112210:	44000015 	stw	r16,0(r8)
81112214:	1947883a 	add	r3,r3,r5
81112218:	10800044 	addi	r2,r2,1
8111221c:	41400115 	stw	r5,4(r8)
81112220:	d8c02015 	stw	r3,128(sp)
81112224:	d8801f15 	stw	r2,124(sp)
81112228:	010001c4 	movi	r4,7
8111222c:	2081d116 	blt	r4,r2,81112974 <___svfprintf_internal_r+0x1090>
81112230:	42000204 	addi	r8,r8,8
81112234:	9480010c 	andi	r18,r18,4
81112238:	90003226 	beq	r18,zero,81112304 <___svfprintf_internal_r+0xa20>
8111223c:	d9403117 	ldw	r5,196(sp)
81112240:	d8802a17 	ldw	r2,168(sp)
81112244:	28a1c83a 	sub	r16,r5,r2
81112248:	04002e0e 	bge	zero,r16,81112304 <___svfprintf_internal_r+0xa20>
8111224c:	04400404 	movi	r17,16
81112250:	d8801f17 	ldw	r2,124(sp)
81112254:	8c04b90e 	bge	r17,r16,8111353c <___svfprintf_internal_r+0x1c58>
81112258:	016044b4 	movhi	r5,33042
8111225c:	295abd84 	addi	r5,r5,27382
81112260:	d9403515 	stw	r5,212(sp)
81112264:	048001c4 	movi	r18,7
81112268:	dd002c17 	ldw	r20,176(sp)
8111226c:	00000306 	br	8111227c <___svfprintf_internal_r+0x998>
81112270:	843ffc04 	addi	r16,r16,-16
81112274:	42000204 	addi	r8,r8,8
81112278:	8c00130e 	bge	r17,r16,811122c8 <___svfprintf_internal_r+0x9e4>
8111227c:	012044b4 	movhi	r4,33042
81112280:	18c00404 	addi	r3,r3,16
81112284:	10800044 	addi	r2,r2,1
81112288:	211abd84 	addi	r4,r4,27382
8111228c:	41000015 	stw	r4,0(r8)
81112290:	44400115 	stw	r17,4(r8)
81112294:	d8c02015 	stw	r3,128(sp)
81112298:	d8801f15 	stw	r2,124(sp)
8111229c:	90bff40e 	bge	r18,r2,81112270 <__reset+0xfb0f2270>
811122a0:	d9801e04 	addi	r6,sp,120
811122a4:	a00b883a 	mov	r5,r20
811122a8:	9809883a 	mov	r4,r19
811122ac:	111a5000 	call	8111a500 <__ssprint_r>
811122b0:	103e711e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
811122b4:	843ffc04 	addi	r16,r16,-16
811122b8:	d8c02017 	ldw	r3,128(sp)
811122bc:	d8801f17 	ldw	r2,124(sp)
811122c0:	da000404 	addi	r8,sp,16
811122c4:	8c3fed16 	blt	r17,r16,8111227c <__reset+0xfb0f227c>
811122c8:	d9403517 	ldw	r5,212(sp)
811122cc:	1c07883a 	add	r3,r3,r16
811122d0:	10800044 	addi	r2,r2,1
811122d4:	41400015 	stw	r5,0(r8)
811122d8:	44000115 	stw	r16,4(r8)
811122dc:	d8c02015 	stw	r3,128(sp)
811122e0:	d8801f15 	stw	r2,124(sp)
811122e4:	010001c4 	movi	r4,7
811122e8:	2080060e 	bge	r4,r2,81112304 <___svfprintf_internal_r+0xa20>
811122ec:	d9402c17 	ldw	r5,176(sp)
811122f0:	d9801e04 	addi	r6,sp,120
811122f4:	9809883a 	mov	r4,r19
811122f8:	111a5000 	call	8111a500 <__ssprint_r>
811122fc:	103e5e1e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112300:	d8c02017 	ldw	r3,128(sp)
81112304:	d8803117 	ldw	r2,196(sp)
81112308:	d9002a17 	ldw	r4,168(sp)
8111230c:	1100010e 	bge	r2,r4,81112314 <___svfprintf_internal_r+0xa30>
81112310:	2005883a 	mov	r2,r4
81112314:	d9402f17 	ldw	r5,188(sp)
81112318:	288b883a 	add	r5,r5,r2
8111231c:	d9402f15 	stw	r5,188(sp)
81112320:	18019c1e 	bne	r3,zero,81112994 <___svfprintf_internal_r+0x10b0>
81112324:	b8800007 	ldb	r2,0(r23)
81112328:	d8001f15 	stw	zero,124(sp)
8111232c:	da000404 	addi	r8,sp,16
81112330:	103d991e 	bne	r2,zero,81111998 <__reset+0xfb0f1998>
81112334:	b821883a 	mov	r16,r23
81112338:	003daf06 	br	811119f8 <__reset+0xfb0f19f8>
8111233c:	18c03fcc 	andi	r3,r3,255
81112340:	1805c71e 	bne	r3,zero,81113a60 <___svfprintf_internal_r+0x217c>
81112344:	94800414 	ori	r18,r18,16
81112348:	9080080c 	andi	r2,r18,32
8111234c:	10020126 	beq	r2,zero,81112b54 <___svfprintf_internal_r+0x1270>
81112350:	d8802d17 	ldw	r2,180(sp)
81112354:	d9002917 	ldw	r4,164(sp)
81112358:	d8002785 	stb	zero,158(sp)
8111235c:	10c00204 	addi	r3,r2,8
81112360:	15000017 	ldw	r20,0(r2)
81112364:	15800117 	ldw	r22,4(r2)
81112368:	20038e16 	blt	r4,zero,811131a4 <___svfprintf_internal_r+0x18c0>
8111236c:	013fdfc4 	movi	r4,-129
81112370:	a584b03a 	or	r2,r20,r22
81112374:	d8c02d15 	stw	r3,180(sp)
81112378:	9124703a 	and	r18,r18,r4
8111237c:	0039883a 	mov	fp,zero
81112380:	103eb61e 	bne	r2,zero,81111e5c <__reset+0xfb0f1e5c>
81112384:	d8802917 	ldw	r2,164(sp)
81112388:	1002c81e 	bne	r2,zero,81112eac <___svfprintf_internal_r+0x15c8>
8111238c:	d8002915 	stw	zero,164(sp)
81112390:	d8002e15 	stw	zero,184(sp)
81112394:	dc001e04 	addi	r16,sp,120
81112398:	003efa06 	br	81111f84 <__reset+0xfb0f1f84>
8111239c:	18c03fcc 	andi	r3,r3,255
811123a0:	1805ad1e 	bne	r3,zero,81113a58 <___svfprintf_internal_r+0x2174>
811123a4:	016044b4 	movhi	r5,33042
811123a8:	295aad04 	addi	r5,r5,27316
811123ac:	d9403a15 	stw	r5,232(sp)
811123b0:	9080080c 	andi	r2,r18,32
811123b4:	10006126 	beq	r2,zero,8111253c <___svfprintf_internal_r+0xc58>
811123b8:	d8802d17 	ldw	r2,180(sp)
811123bc:	15000017 	ldw	r20,0(r2)
811123c0:	15800117 	ldw	r22,4(r2)
811123c4:	10800204 	addi	r2,r2,8
811123c8:	d8802d15 	stw	r2,180(sp)
811123cc:	9080004c 	andi	r2,r18,1
811123d0:	10018e26 	beq	r2,zero,81112a0c <___svfprintf_internal_r+0x1128>
811123d4:	a584b03a 	or	r2,r20,r22
811123d8:	10030926 	beq	r2,zero,81113000 <___svfprintf_internal_r+0x171c>
811123dc:	d8c02917 	ldw	r3,164(sp)
811123e0:	00800c04 	movi	r2,48
811123e4:	d8802705 	stb	r2,156(sp)
811123e8:	dc402745 	stb	r17,157(sp)
811123ec:	d8002785 	stb	zero,158(sp)
811123f0:	90800094 	ori	r2,r18,2
811123f4:	18048716 	blt	r3,zero,81113614 <___svfprintf_internal_r+0x1d30>
811123f8:	00bfdfc4 	movi	r2,-129
811123fc:	90a4703a 	and	r18,r18,r2
81112400:	94800094 	ori	r18,r18,2
81112404:	0039883a 	mov	fp,zero
81112408:	d9003a17 	ldw	r4,232(sp)
8111240c:	dc001e04 	addi	r16,sp,120
81112410:	a08003cc 	andi	r2,r20,15
81112414:	b006973a 	slli	r3,r22,28
81112418:	2085883a 	add	r2,r4,r2
8111241c:	a028d13a 	srli	r20,r20,4
81112420:	10800003 	ldbu	r2,0(r2)
81112424:	b02cd13a 	srli	r22,r22,4
81112428:	843fffc4 	addi	r16,r16,-1
8111242c:	1d28b03a 	or	r20,r3,r20
81112430:	80800005 	stb	r2,0(r16)
81112434:	a584b03a 	or	r2,r20,r22
81112438:	103ff51e 	bne	r2,zero,81112410 <__reset+0xfb0f2410>
8111243c:	d8c02817 	ldw	r3,160(sp)
81112440:	1c07c83a 	sub	r3,r3,r16
81112444:	d8c02e15 	stw	r3,184(sp)
81112448:	003ece06 	br	81111f84 <__reset+0xfb0f1f84>
8111244c:	d8c02d17 	ldw	r3,180(sp)
81112450:	d9002d17 	ldw	r4,180(sp)
81112454:	d8002785 	stb	zero,158(sp)
81112458:	18800017 	ldw	r2,0(r3)
8111245c:	21000104 	addi	r4,r4,4
81112460:	00c00044 	movi	r3,1
81112464:	d8c02a15 	stw	r3,168(sp)
81112468:	d8801405 	stb	r2,80(sp)
8111246c:	d9002d15 	stw	r4,180(sp)
81112470:	d8c02e15 	stw	r3,184(sp)
81112474:	d8002915 	stw	zero,164(sp)
81112478:	d8003215 	stw	zero,200(sp)
8111247c:	dc001404 	addi	r16,sp,80
81112480:	0039883a 	mov	fp,zero
81112484:	003ecc06 	br	81111fb8 <__reset+0xfb0f1fb8>
81112488:	18c03fcc 	andi	r3,r3,255
8111248c:	183e9226 	beq	r3,zero,81111ed8 <__reset+0xfb0f1ed8>
81112490:	d9c02785 	stb	r7,158(sp)
81112494:	003e9006 	br	81111ed8 <__reset+0xfb0f1ed8>
81112498:	00c00044 	movi	r3,1
8111249c:	01c00ac4 	movi	r7,43
811124a0:	bc400007 	ldb	r17,0(r23)
811124a4:	003d6306 	br	81111a34 <__reset+0xfb0f1a34>
811124a8:	94800814 	ori	r18,r18,32
811124ac:	bc400007 	ldb	r17,0(r23)
811124b0:	003d6006 	br	81111a34 <__reset+0xfb0f1a34>
811124b4:	d8c02d17 	ldw	r3,180(sp)
811124b8:	d8002785 	stb	zero,158(sp)
811124bc:	1c000017 	ldw	r16,0(r3)
811124c0:	1d000104 	addi	r20,r3,4
811124c4:	80040f26 	beq	r16,zero,81113504 <___svfprintf_internal_r+0x1c20>
811124c8:	d9002917 	ldw	r4,164(sp)
811124cc:	2003dc16 	blt	r4,zero,81113440 <___svfprintf_internal_r+0x1b5c>
811124d0:	200d883a 	mov	r6,r4
811124d4:	000b883a 	mov	r5,zero
811124d8:	8009883a 	mov	r4,r16
811124dc:	da003e15 	stw	r8,248(sp)
811124e0:	1118b180 	call	81118b18 <memchr>
811124e4:	da003e17 	ldw	r8,248(sp)
811124e8:	10045826 	beq	r2,zero,8111364c <___svfprintf_internal_r+0x1d68>
811124ec:	1405c83a 	sub	r2,r2,r16
811124f0:	d8802e15 	stw	r2,184(sp)
811124f4:	1003d816 	blt	r2,zero,81113458 <___svfprintf_internal_r+0x1b74>
811124f8:	df002783 	ldbu	fp,158(sp)
811124fc:	d8802a15 	stw	r2,168(sp)
81112500:	dd002d15 	stw	r20,180(sp)
81112504:	d8002915 	stw	zero,164(sp)
81112508:	d8003215 	stw	zero,200(sp)
8111250c:	003ea306 	br	81111f9c <__reset+0xfb0f1f9c>
81112510:	18c03fcc 	andi	r3,r3,255
81112514:	183f8c26 	beq	r3,zero,81112348 <__reset+0xfb0f2348>
81112518:	d9c02785 	stb	r7,158(sp)
8111251c:	003f8a06 	br	81112348 <__reset+0xfb0f2348>
81112520:	18c03fcc 	andi	r3,r3,255
81112524:	1805631e 	bne	r3,zero,81113ab4 <___svfprintf_internal_r+0x21d0>
81112528:	016044b4 	movhi	r5,33042
8111252c:	295ab204 	addi	r5,r5,27336
81112530:	d9403a15 	stw	r5,232(sp)
81112534:	9080080c 	andi	r2,r18,32
81112538:	103f9f1e 	bne	r2,zero,811123b8 <__reset+0xfb0f23b8>
8111253c:	9080040c 	andi	r2,r18,16
81112540:	10029c26 	beq	r2,zero,81112fb4 <___svfprintf_internal_r+0x16d0>
81112544:	d8c02d17 	ldw	r3,180(sp)
81112548:	002d883a 	mov	r22,zero
8111254c:	1d000017 	ldw	r20,0(r3)
81112550:	18c00104 	addi	r3,r3,4
81112554:	d8c02d15 	stw	r3,180(sp)
81112558:	003f9c06 	br	811123cc <__reset+0xfb0f23cc>
8111255c:	94800054 	ori	r18,r18,1
81112560:	bc400007 	ldb	r17,0(r23)
81112564:	003d3306 	br	81111a34 <__reset+0xfb0f1a34>
81112568:	38803fcc 	andi	r2,r7,255
8111256c:	1080201c 	xori	r2,r2,128
81112570:	10bfe004 	addi	r2,r2,-128
81112574:	1002971e 	bne	r2,zero,81112fd4 <___svfprintf_internal_r+0x16f0>
81112578:	00c00044 	movi	r3,1
8111257c:	01c00804 	movi	r7,32
81112580:	bc400007 	ldb	r17,0(r23)
81112584:	003d2b06 	br	81111a34 <__reset+0xfb0f1a34>
81112588:	18c03fcc 	andi	r3,r3,255
8111258c:	183e2326 	beq	r3,zero,81111e1c <__reset+0xfb0f1e1c>
81112590:	d9c02785 	stb	r7,158(sp)
81112594:	003e2106 	br	81111e1c <__reset+0xfb0f1e1c>
81112598:	bc400007 	ldb	r17,0(r23)
8111259c:	8a430426 	beq	r17,r9,811131b0 <___svfprintf_internal_r+0x18cc>
811125a0:	94800414 	ori	r18,r18,16
811125a4:	003d2306 	br	81111a34 <__reset+0xfb0f1a34>
811125a8:	18c03fcc 	andi	r3,r3,255
811125ac:	18053f1e 	bne	r3,zero,81113aac <___svfprintf_internal_r+0x21c8>
811125b0:	9080080c 	andi	r2,r18,32
811125b4:	10028926 	beq	r2,zero,81112fdc <___svfprintf_internal_r+0x16f8>
811125b8:	d9402d17 	ldw	r5,180(sp)
811125bc:	d9002f17 	ldw	r4,188(sp)
811125c0:	28800017 	ldw	r2,0(r5)
811125c4:	2007d7fa 	srai	r3,r4,31
811125c8:	29400104 	addi	r5,r5,4
811125cc:	d9402d15 	stw	r5,180(sp)
811125d0:	11000015 	stw	r4,0(r2)
811125d4:	10c00115 	stw	r3,4(r2)
811125d8:	003ced06 	br	81111990 <__reset+0xfb0f1990>
811125dc:	94801014 	ori	r18,r18,64
811125e0:	bc400007 	ldb	r17,0(r23)
811125e4:	003d1306 	br	81111a34 <__reset+0xfb0f1a34>
811125e8:	012044b4 	movhi	r4,33042
811125ec:	211ab204 	addi	r4,r4,27336
811125f0:	0039883a 	mov	fp,zero
811125f4:	d9003a15 	stw	r4,232(sp)
811125f8:	04401e04 	movi	r17,120
811125fc:	003f8206 	br	81112408 <__reset+0xfb0f2408>
81112600:	18c03fcc 	andi	r3,r3,255
81112604:	1805221e 	bne	r3,zero,81113a90 <___svfprintf_internal_r+0x21ac>
81112608:	883d9526 	beq	r17,zero,81111c60 <__reset+0xfb0f1c60>
8111260c:	00c00044 	movi	r3,1
81112610:	d8c02a15 	stw	r3,168(sp)
81112614:	dc401405 	stb	r17,80(sp)
81112618:	d8002785 	stb	zero,158(sp)
8111261c:	003f9406 	br	81112470 <__reset+0xfb0f2470>
81112620:	012044b4 	movhi	r4,33042
81112624:	211ab204 	addi	r4,r4,27336
81112628:	d9003a15 	stw	r4,232(sp)
8111262c:	d8c02d15 	stw	r3,180(sp)
81112630:	1025883a 	mov	r18,r2
81112634:	04401e04 	movi	r17,120
81112638:	a584b03a 	or	r2,r20,r22
8111263c:	1000fa1e 	bne	r2,zero,81112a28 <___svfprintf_internal_r+0x1144>
81112640:	0039883a 	mov	fp,zero
81112644:	00800084 	movi	r2,2
81112648:	10803fcc 	andi	r2,r2,255
8111264c:	00c00044 	movi	r3,1
81112650:	10c21626 	beq	r2,r3,81112eac <___svfprintf_internal_r+0x15c8>
81112654:	00c00084 	movi	r3,2
81112658:	10fe301e 	bne	r2,r3,81111f1c <__reset+0xfb0f1f1c>
8111265c:	003d7606 	br	81111c38 <__reset+0xfb0f1c38>
81112660:	d8c02017 	ldw	r3,128(sp)
81112664:	003e9506 	br	811120bc <__reset+0xfb0f20bc>
81112668:	00801944 	movi	r2,101
8111266c:	14407c0e 	bge	r2,r17,81112860 <___svfprintf_internal_r+0xf7c>
81112670:	d9003617 	ldw	r4,216(sp)
81112674:	d9403717 	ldw	r5,220(sp)
81112678:	000d883a 	mov	r6,zero
8111267c:	000f883a 	mov	r7,zero
81112680:	d8c03d15 	stw	r3,244(sp)
81112684:	da003e15 	stw	r8,248(sp)
81112688:	111f45c0 	call	8111f45c <__eqdf2>
8111268c:	d8c03d17 	ldw	r3,244(sp)
81112690:	da003e17 	ldw	r8,248(sp)
81112694:	1000f51e 	bne	r2,zero,81112a6c <___svfprintf_internal_r+0x1188>
81112698:	d8801f17 	ldw	r2,124(sp)
8111269c:	012044b4 	movhi	r4,33042
811126a0:	211ab904 	addi	r4,r4,27364
811126a4:	18c00044 	addi	r3,r3,1
811126a8:	10800044 	addi	r2,r2,1
811126ac:	41000015 	stw	r4,0(r8)
811126b0:	01000044 	movi	r4,1
811126b4:	41000115 	stw	r4,4(r8)
811126b8:	d8c02015 	stw	r3,128(sp)
811126bc:	d8801f15 	stw	r2,124(sp)
811126c0:	010001c4 	movi	r4,7
811126c4:	20826616 	blt	r4,r2,81113060 <___svfprintf_internal_r+0x177c>
811126c8:	42000204 	addi	r8,r8,8
811126cc:	d8802617 	ldw	r2,152(sp)
811126d0:	d9403317 	ldw	r5,204(sp)
811126d4:	11400216 	blt	r2,r5,811126e0 <___svfprintf_internal_r+0xdfc>
811126d8:	9080004c 	andi	r2,r18,1
811126dc:	103ed526 	beq	r2,zero,81112234 <__reset+0xfb0f2234>
811126e0:	d8803817 	ldw	r2,224(sp)
811126e4:	d9003417 	ldw	r4,208(sp)
811126e8:	d9403817 	ldw	r5,224(sp)
811126ec:	1887883a 	add	r3,r3,r2
811126f0:	d8801f17 	ldw	r2,124(sp)
811126f4:	41000015 	stw	r4,0(r8)
811126f8:	41400115 	stw	r5,4(r8)
811126fc:	10800044 	addi	r2,r2,1
81112700:	d8c02015 	stw	r3,128(sp)
81112704:	d8801f15 	stw	r2,124(sp)
81112708:	010001c4 	movi	r4,7
8111270c:	2082af16 	blt	r4,r2,811131cc <___svfprintf_internal_r+0x18e8>
81112710:	42000204 	addi	r8,r8,8
81112714:	d8803317 	ldw	r2,204(sp)
81112718:	143fffc4 	addi	r16,r2,-1
8111271c:	043ec50e 	bge	zero,r16,81112234 <__reset+0xfb0f2234>
81112720:	04400404 	movi	r17,16
81112724:	d8801f17 	ldw	r2,124(sp)
81112728:	8c00860e 	bge	r17,r16,81112944 <___svfprintf_internal_r+0x1060>
8111272c:	016044b4 	movhi	r5,33042
81112730:	295ab984 	addi	r5,r5,27366
81112734:	d9402b15 	stw	r5,172(sp)
81112738:	058001c4 	movi	r22,7
8111273c:	dd002c17 	ldw	r20,176(sp)
81112740:	00000306 	br	81112750 <___svfprintf_internal_r+0xe6c>
81112744:	42000204 	addi	r8,r8,8
81112748:	843ffc04 	addi	r16,r16,-16
8111274c:	8c00800e 	bge	r17,r16,81112950 <___svfprintf_internal_r+0x106c>
81112750:	18c00404 	addi	r3,r3,16
81112754:	10800044 	addi	r2,r2,1
81112758:	45400015 	stw	r21,0(r8)
8111275c:	44400115 	stw	r17,4(r8)
81112760:	d8c02015 	stw	r3,128(sp)
81112764:	d8801f15 	stw	r2,124(sp)
81112768:	b0bff60e 	bge	r22,r2,81112744 <__reset+0xfb0f2744>
8111276c:	d9801e04 	addi	r6,sp,120
81112770:	a00b883a 	mov	r5,r20
81112774:	9809883a 	mov	r4,r19
81112778:	111a5000 	call	8111a500 <__ssprint_r>
8111277c:	103d3e1e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112780:	d8c02017 	ldw	r3,128(sp)
81112784:	d8801f17 	ldw	r2,124(sp)
81112788:	da000404 	addi	r8,sp,16
8111278c:	003fee06 	br	81112748 <__reset+0xfb0f2748>
81112790:	d9403117 	ldw	r5,196(sp)
81112794:	d8802a17 	ldw	r2,168(sp)
81112798:	28adc83a 	sub	r22,r5,r2
8111279c:	05be650e 	bge	zero,r22,81112134 <__reset+0xfb0f2134>
811127a0:	07000404 	movi	fp,16
811127a4:	d8801f17 	ldw	r2,124(sp)
811127a8:	e583a20e 	bge	fp,r22,81113634 <___svfprintf_internal_r+0x1d50>
811127ac:	016044b4 	movhi	r5,33042
811127b0:	295ab984 	addi	r5,r5,27366
811127b4:	dc403015 	stw	r17,192(sp)
811127b8:	d9402b15 	stw	r5,172(sp)
811127bc:	b023883a 	mov	r17,r22
811127c0:	050001c4 	movi	r20,7
811127c4:	902d883a 	mov	r22,r18
811127c8:	8025883a 	mov	r18,r16
811127cc:	dc002c17 	ldw	r16,176(sp)
811127d0:	00000306 	br	811127e0 <___svfprintf_internal_r+0xefc>
811127d4:	8c7ffc04 	addi	r17,r17,-16
811127d8:	42000204 	addi	r8,r8,8
811127dc:	e440110e 	bge	fp,r17,81112824 <___svfprintf_internal_r+0xf40>
811127e0:	18c00404 	addi	r3,r3,16
811127e4:	10800044 	addi	r2,r2,1
811127e8:	45400015 	stw	r21,0(r8)
811127ec:	47000115 	stw	fp,4(r8)
811127f0:	d8c02015 	stw	r3,128(sp)
811127f4:	d8801f15 	stw	r2,124(sp)
811127f8:	a0bff60e 	bge	r20,r2,811127d4 <__reset+0xfb0f27d4>
811127fc:	d9801e04 	addi	r6,sp,120
81112800:	800b883a 	mov	r5,r16
81112804:	9809883a 	mov	r4,r19
81112808:	111a5000 	call	8111a500 <__ssprint_r>
8111280c:	103d1a1e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112810:	8c7ffc04 	addi	r17,r17,-16
81112814:	d8c02017 	ldw	r3,128(sp)
81112818:	d8801f17 	ldw	r2,124(sp)
8111281c:	da000404 	addi	r8,sp,16
81112820:	e47fef16 	blt	fp,r17,811127e0 <__reset+0xfb0f27e0>
81112824:	9021883a 	mov	r16,r18
81112828:	b025883a 	mov	r18,r22
8111282c:	882d883a 	mov	r22,r17
81112830:	dc403017 	ldw	r17,192(sp)
81112834:	d9002b17 	ldw	r4,172(sp)
81112838:	1d87883a 	add	r3,r3,r22
8111283c:	10800044 	addi	r2,r2,1
81112840:	41000015 	stw	r4,0(r8)
81112844:	45800115 	stw	r22,4(r8)
81112848:	d8c02015 	stw	r3,128(sp)
8111284c:	d8801f15 	stw	r2,124(sp)
81112850:	010001c4 	movi	r4,7
81112854:	20819a16 	blt	r4,r2,81112ec0 <___svfprintf_internal_r+0x15dc>
81112858:	42000204 	addi	r8,r8,8
8111285c:	003e3506 	br	81112134 <__reset+0xfb0f2134>
81112860:	d9403317 	ldw	r5,204(sp)
81112864:	00800044 	movi	r2,1
81112868:	18c00044 	addi	r3,r3,1
8111286c:	1141710e 	bge	r2,r5,81112e34 <___svfprintf_internal_r+0x1550>
81112870:	dc401f17 	ldw	r17,124(sp)
81112874:	00800044 	movi	r2,1
81112878:	40800115 	stw	r2,4(r8)
8111287c:	8c400044 	addi	r17,r17,1
81112880:	44000015 	stw	r16,0(r8)
81112884:	d8c02015 	stw	r3,128(sp)
81112888:	dc401f15 	stw	r17,124(sp)
8111288c:	008001c4 	movi	r2,7
81112890:	14417416 	blt	r2,r17,81112e64 <___svfprintf_internal_r+0x1580>
81112894:	42000204 	addi	r8,r8,8
81112898:	d8803817 	ldw	r2,224(sp)
8111289c:	d9003417 	ldw	r4,208(sp)
811128a0:	8c400044 	addi	r17,r17,1
811128a4:	10c7883a 	add	r3,r2,r3
811128a8:	40800115 	stw	r2,4(r8)
811128ac:	41000015 	stw	r4,0(r8)
811128b0:	d8c02015 	stw	r3,128(sp)
811128b4:	dc401f15 	stw	r17,124(sp)
811128b8:	008001c4 	movi	r2,7
811128bc:	14417216 	blt	r2,r17,81112e88 <___svfprintf_internal_r+0x15a4>
811128c0:	45800204 	addi	r22,r8,8
811128c4:	d9003617 	ldw	r4,216(sp)
811128c8:	d9403717 	ldw	r5,220(sp)
811128cc:	000d883a 	mov	r6,zero
811128d0:	000f883a 	mov	r7,zero
811128d4:	d8c03d15 	stw	r3,244(sp)
811128d8:	111f45c0 	call	8111f45c <__eqdf2>
811128dc:	d8c03d17 	ldw	r3,244(sp)
811128e0:	1000b326 	beq	r2,zero,81112bb0 <___svfprintf_internal_r+0x12cc>
811128e4:	d9403317 	ldw	r5,204(sp)
811128e8:	84000044 	addi	r16,r16,1
811128ec:	8c400044 	addi	r17,r17,1
811128f0:	28bfffc4 	addi	r2,r5,-1
811128f4:	1887883a 	add	r3,r3,r2
811128f8:	b0800115 	stw	r2,4(r22)
811128fc:	b4000015 	stw	r16,0(r22)
81112900:	d8c02015 	stw	r3,128(sp)
81112904:	dc401f15 	stw	r17,124(sp)
81112908:	008001c4 	movi	r2,7
8111290c:	1440d216 	blt	r2,r17,81112c58 <___svfprintf_internal_r+0x1374>
81112910:	b5800204 	addi	r22,r22,8
81112914:	d9003b17 	ldw	r4,236(sp)
81112918:	df0022c4 	addi	fp,sp,139
8111291c:	8c400044 	addi	r17,r17,1
81112920:	20c7883a 	add	r3,r4,r3
81112924:	b7000015 	stw	fp,0(r22)
81112928:	b1000115 	stw	r4,4(r22)
8111292c:	d8c02015 	stw	r3,128(sp)
81112930:	dc401f15 	stw	r17,124(sp)
81112934:	008001c4 	movi	r2,7
81112938:	14400e16 	blt	r2,r17,81112974 <___svfprintf_internal_r+0x1090>
8111293c:	b2000204 	addi	r8,r22,8
81112940:	003e3c06 	br	81112234 <__reset+0xfb0f2234>
81112944:	012044b4 	movhi	r4,33042
81112948:	211ab984 	addi	r4,r4,27366
8111294c:	d9002b15 	stw	r4,172(sp)
81112950:	d9002b17 	ldw	r4,172(sp)
81112954:	1c07883a 	add	r3,r3,r16
81112958:	44000115 	stw	r16,4(r8)
8111295c:	41000015 	stw	r4,0(r8)
81112960:	10800044 	addi	r2,r2,1
81112964:	d8c02015 	stw	r3,128(sp)
81112968:	d8801f15 	stw	r2,124(sp)
8111296c:	010001c4 	movi	r4,7
81112970:	20be2f0e 	bge	r4,r2,81112230 <__reset+0xfb0f2230>
81112974:	d9402c17 	ldw	r5,176(sp)
81112978:	d9801e04 	addi	r6,sp,120
8111297c:	9809883a 	mov	r4,r19
81112980:	111a5000 	call	8111a500 <__ssprint_r>
81112984:	103cbc1e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112988:	d8c02017 	ldw	r3,128(sp)
8111298c:	da000404 	addi	r8,sp,16
81112990:	003e2806 	br	81112234 <__reset+0xfb0f2234>
81112994:	d9402c17 	ldw	r5,176(sp)
81112998:	d9801e04 	addi	r6,sp,120
8111299c:	9809883a 	mov	r4,r19
811129a0:	111a5000 	call	8111a500 <__ssprint_r>
811129a4:	103e5f26 	beq	r2,zero,81112324 <__reset+0xfb0f2324>
811129a8:	003cb306 	br	81111c78 <__reset+0xfb0f1c78>
811129ac:	d9402c17 	ldw	r5,176(sp)
811129b0:	d9801e04 	addi	r6,sp,120
811129b4:	9809883a 	mov	r4,r19
811129b8:	111a5000 	call	8111a500 <__ssprint_r>
811129bc:	103cae1e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
811129c0:	d8c02017 	ldw	r3,128(sp)
811129c4:	da000404 	addi	r8,sp,16
811129c8:	003e0d06 	br	81112200 <__reset+0xfb0f2200>
811129cc:	d9402c17 	ldw	r5,176(sp)
811129d0:	d9801e04 	addi	r6,sp,120
811129d4:	9809883a 	mov	r4,r19
811129d8:	111a5000 	call	8111a500 <__ssprint_r>
811129dc:	103ca61e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
811129e0:	d8c02017 	ldw	r3,128(sp)
811129e4:	da000404 	addi	r8,sp,16
811129e8:	003dc106 	br	811120f0 <__reset+0xfb0f20f0>
811129ec:	d9402c17 	ldw	r5,176(sp)
811129f0:	d9801e04 	addi	r6,sp,120
811129f4:	9809883a 	mov	r4,r19
811129f8:	111a5000 	call	8111a500 <__ssprint_r>
811129fc:	103c9e1e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112a00:	d8c02017 	ldw	r3,128(sp)
81112a04:	da000404 	addi	r8,sp,16
81112a08:	003dc706 	br	81112128 <__reset+0xfb0f2128>
81112a0c:	d8802917 	ldw	r2,164(sp)
81112a10:	d8002785 	stb	zero,158(sp)
81112a14:	103f0816 	blt	r2,zero,81112638 <__reset+0xfb0f2638>
81112a18:	00ffdfc4 	movi	r3,-129
81112a1c:	a584b03a 	or	r2,r20,r22
81112a20:	90e4703a 	and	r18,r18,r3
81112a24:	103c8126 	beq	r2,zero,81111c2c <__reset+0xfb0f1c2c>
81112a28:	0039883a 	mov	fp,zero
81112a2c:	003e7606 	br	81112408 <__reset+0xfb0f2408>
81112a30:	9080040c 	andi	r2,r18,16
81112a34:	10013d26 	beq	r2,zero,81112f2c <___svfprintf_internal_r+0x1648>
81112a38:	d9002d17 	ldw	r4,180(sp)
81112a3c:	d9402917 	ldw	r5,164(sp)
81112a40:	d8002785 	stb	zero,158(sp)
81112a44:	20800104 	addi	r2,r4,4
81112a48:	25000017 	ldw	r20,0(r4)
81112a4c:	002d883a 	mov	r22,zero
81112a50:	28013f16 	blt	r5,zero,81112f50 <___svfprintf_internal_r+0x166c>
81112a54:	00ffdfc4 	movi	r3,-129
81112a58:	d8802d15 	stw	r2,180(sp)
81112a5c:	90e4703a 	and	r18,r18,r3
81112a60:	a03d2b26 	beq	r20,zero,81111f10 <__reset+0xfb0f1f10>
81112a64:	0039883a 	mov	fp,zero
81112a68:	003d2e06 	br	81111f24 <__reset+0xfb0f1f24>
81112a6c:	dc402617 	ldw	r17,152(sp)
81112a70:	0441830e 	bge	zero,r17,81113080 <___svfprintf_internal_r+0x179c>
81112a74:	dc403217 	ldw	r17,200(sp)
81112a78:	d8803317 	ldw	r2,204(sp)
81112a7c:	1440010e 	bge	r2,r17,81112a84 <___svfprintf_internal_r+0x11a0>
81112a80:	1023883a 	mov	r17,r2
81112a84:	04400a0e 	bge	zero,r17,81112ab0 <___svfprintf_internal_r+0x11cc>
81112a88:	d8801f17 	ldw	r2,124(sp)
81112a8c:	1c47883a 	add	r3,r3,r17
81112a90:	44000015 	stw	r16,0(r8)
81112a94:	10800044 	addi	r2,r2,1
81112a98:	44400115 	stw	r17,4(r8)
81112a9c:	d8c02015 	stw	r3,128(sp)
81112aa0:	d8801f15 	stw	r2,124(sp)
81112aa4:	010001c4 	movi	r4,7
81112aa8:	20827516 	blt	r4,r2,81113480 <___svfprintf_internal_r+0x1b9c>
81112aac:	42000204 	addi	r8,r8,8
81112ab0:	88027b16 	blt	r17,zero,811134a0 <___svfprintf_internal_r+0x1bbc>
81112ab4:	d9003217 	ldw	r4,200(sp)
81112ab8:	2463c83a 	sub	r17,r4,r17
81112abc:	0440990e 	bge	zero,r17,81112d24 <___svfprintf_internal_r+0x1440>
81112ac0:	05800404 	movi	r22,16
81112ac4:	d8801f17 	ldw	r2,124(sp)
81112ac8:	b441530e 	bge	r22,r17,81113018 <___svfprintf_internal_r+0x1734>
81112acc:	012044b4 	movhi	r4,33042
81112ad0:	211ab984 	addi	r4,r4,27366
81112ad4:	d9002b15 	stw	r4,172(sp)
81112ad8:	070001c4 	movi	fp,7
81112adc:	dd002c17 	ldw	r20,176(sp)
81112ae0:	00000306 	br	81112af0 <___svfprintf_internal_r+0x120c>
81112ae4:	42000204 	addi	r8,r8,8
81112ae8:	8c7ffc04 	addi	r17,r17,-16
81112aec:	b4414d0e 	bge	r22,r17,81113024 <___svfprintf_internal_r+0x1740>
81112af0:	18c00404 	addi	r3,r3,16
81112af4:	10800044 	addi	r2,r2,1
81112af8:	45400015 	stw	r21,0(r8)
81112afc:	45800115 	stw	r22,4(r8)
81112b00:	d8c02015 	stw	r3,128(sp)
81112b04:	d8801f15 	stw	r2,124(sp)
81112b08:	e0bff60e 	bge	fp,r2,81112ae4 <__reset+0xfb0f2ae4>
81112b0c:	d9801e04 	addi	r6,sp,120
81112b10:	a00b883a 	mov	r5,r20
81112b14:	9809883a 	mov	r4,r19
81112b18:	111a5000 	call	8111a500 <__ssprint_r>
81112b1c:	103c561e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112b20:	d8c02017 	ldw	r3,128(sp)
81112b24:	d8801f17 	ldw	r2,124(sp)
81112b28:	da000404 	addi	r8,sp,16
81112b2c:	003fee06 	br	81112ae8 <__reset+0xfb0f2ae8>
81112b30:	d9402c17 	ldw	r5,176(sp)
81112b34:	d9801e04 	addi	r6,sp,120
81112b38:	9809883a 	mov	r4,r19
81112b3c:	111a5000 	call	8111a500 <__ssprint_r>
81112b40:	103c4d1e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112b44:	d8c02017 	ldw	r3,128(sp)
81112b48:	df002787 	ldb	fp,158(sp)
81112b4c:	da000404 	addi	r8,sp,16
81112b50:	003d5a06 	br	811120bc <__reset+0xfb0f20bc>
81112b54:	9080040c 	andi	r2,r18,16
81112b58:	10005c26 	beq	r2,zero,81112ccc <___svfprintf_internal_r+0x13e8>
81112b5c:	d9402d17 	ldw	r5,180(sp)
81112b60:	d8c02917 	ldw	r3,164(sp)
81112b64:	d8002785 	stb	zero,158(sp)
81112b68:	28800104 	addi	r2,r5,4
81112b6c:	2d000017 	ldw	r20,0(r5)
81112b70:	002d883a 	mov	r22,zero
81112b74:	18005e16 	blt	r3,zero,81112cf0 <___svfprintf_internal_r+0x140c>
81112b78:	00ffdfc4 	movi	r3,-129
81112b7c:	d8802d15 	stw	r2,180(sp)
81112b80:	90e4703a 	and	r18,r18,r3
81112b84:	0039883a 	mov	fp,zero
81112b88:	a03dfe26 	beq	r20,zero,81112384 <__reset+0xfb0f2384>
81112b8c:	00800244 	movi	r2,9
81112b90:	153cb336 	bltu	r2,r20,81111e60 <__reset+0xfb0f1e60>
81112b94:	a5000c04 	addi	r20,r20,48
81112b98:	dc001dc4 	addi	r16,sp,119
81112b9c:	dd001dc5 	stb	r20,119(sp)
81112ba0:	d8c02817 	ldw	r3,160(sp)
81112ba4:	1c07c83a 	sub	r3,r3,r16
81112ba8:	d8c02e15 	stw	r3,184(sp)
81112bac:	003cf506 	br	81111f84 <__reset+0xfb0f1f84>
81112bb0:	d8803317 	ldw	r2,204(sp)
81112bb4:	143fffc4 	addi	r16,r2,-1
81112bb8:	043f560e 	bge	zero,r16,81112914 <__reset+0xfb0f2914>
81112bbc:	07000404 	movi	fp,16
81112bc0:	e403530e 	bge	fp,r16,81113910 <___svfprintf_internal_r+0x202c>
81112bc4:	016044b4 	movhi	r5,33042
81112bc8:	295ab984 	addi	r5,r5,27366
81112bcc:	d9402b15 	stw	r5,172(sp)
81112bd0:	01c001c4 	movi	r7,7
81112bd4:	dd002c17 	ldw	r20,176(sp)
81112bd8:	00000306 	br	81112be8 <___svfprintf_internal_r+0x1304>
81112bdc:	843ffc04 	addi	r16,r16,-16
81112be0:	b5800204 	addi	r22,r22,8
81112be4:	e400130e 	bge	fp,r16,81112c34 <___svfprintf_internal_r+0x1350>
81112be8:	18c00404 	addi	r3,r3,16
81112bec:	8c400044 	addi	r17,r17,1
81112bf0:	b5400015 	stw	r21,0(r22)
81112bf4:	b7000115 	stw	fp,4(r22)
81112bf8:	d8c02015 	stw	r3,128(sp)
81112bfc:	dc401f15 	stw	r17,124(sp)
81112c00:	3c7ff60e 	bge	r7,r17,81112bdc <__reset+0xfb0f2bdc>
81112c04:	d9801e04 	addi	r6,sp,120
81112c08:	a00b883a 	mov	r5,r20
81112c0c:	9809883a 	mov	r4,r19
81112c10:	d9c03d15 	stw	r7,244(sp)
81112c14:	111a5000 	call	8111a500 <__ssprint_r>
81112c18:	d9c03d17 	ldw	r7,244(sp)
81112c1c:	103c161e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112c20:	843ffc04 	addi	r16,r16,-16
81112c24:	d8c02017 	ldw	r3,128(sp)
81112c28:	dc401f17 	ldw	r17,124(sp)
81112c2c:	dd800404 	addi	r22,sp,16
81112c30:	e43fed16 	blt	fp,r16,81112be8 <__reset+0xfb0f2be8>
81112c34:	d8802b17 	ldw	r2,172(sp)
81112c38:	1c07883a 	add	r3,r3,r16
81112c3c:	8c400044 	addi	r17,r17,1
81112c40:	b0800015 	stw	r2,0(r22)
81112c44:	b4000115 	stw	r16,4(r22)
81112c48:	d8c02015 	stw	r3,128(sp)
81112c4c:	dc401f15 	stw	r17,124(sp)
81112c50:	008001c4 	movi	r2,7
81112c54:	147f2e0e 	bge	r2,r17,81112910 <__reset+0xfb0f2910>
81112c58:	d9402c17 	ldw	r5,176(sp)
81112c5c:	d9801e04 	addi	r6,sp,120
81112c60:	9809883a 	mov	r4,r19
81112c64:	111a5000 	call	8111a500 <__ssprint_r>
81112c68:	103c031e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112c6c:	d8c02017 	ldw	r3,128(sp)
81112c70:	dc401f17 	ldw	r17,124(sp)
81112c74:	dd800404 	addi	r22,sp,16
81112c78:	003f2606 	br	81112914 <__reset+0xfb0f2914>
81112c7c:	9080040c 	andi	r2,r18,16
81112c80:	1000c326 	beq	r2,zero,81112f90 <___svfprintf_internal_r+0x16ac>
81112c84:	d8802d17 	ldw	r2,180(sp)
81112c88:	15000017 	ldw	r20,0(r2)
81112c8c:	10800104 	addi	r2,r2,4
81112c90:	d8802d15 	stw	r2,180(sp)
81112c94:	a02dd7fa 	srai	r22,r20,31
81112c98:	b005883a 	mov	r2,r22
81112c9c:	103c680e 	bge	r2,zero,81111e40 <__reset+0xfb0f1e40>
81112ca0:	0529c83a 	sub	r20,zero,r20
81112ca4:	a004c03a 	cmpne	r2,r20,zero
81112ca8:	05adc83a 	sub	r22,zero,r22
81112cac:	b0adc83a 	sub	r22,r22,r2
81112cb0:	d8802917 	ldw	r2,164(sp)
81112cb4:	07000b44 	movi	fp,45
81112cb8:	df002785 	stb	fp,158(sp)
81112cbc:	10022e16 	blt	r2,zero,81113578 <___svfprintf_internal_r+0x1c94>
81112cc0:	00bfdfc4 	movi	r2,-129
81112cc4:	90a4703a 	and	r18,r18,r2
81112cc8:	003c6406 	br	81111e5c <__reset+0xfb0f1e5c>
81112ccc:	9080100c 	andi	r2,r18,64
81112cd0:	d8002785 	stb	zero,158(sp)
81112cd4:	10012526 	beq	r2,zero,8111316c <___svfprintf_internal_r+0x1888>
81112cd8:	d9002d17 	ldw	r4,180(sp)
81112cdc:	d9402917 	ldw	r5,164(sp)
81112ce0:	002d883a 	mov	r22,zero
81112ce4:	20800104 	addi	r2,r4,4
81112ce8:	2500000b 	ldhu	r20,0(r4)
81112cec:	283fa20e 	bge	r5,zero,81112b78 <__reset+0xfb0f2b78>
81112cf0:	d8802d15 	stw	r2,180(sp)
81112cf4:	0039883a 	mov	fp,zero
81112cf8:	a584b03a 	or	r2,r20,r22
81112cfc:	103c571e 	bne	r2,zero,81111e5c <__reset+0xfb0f1e5c>
81112d00:	00800044 	movi	r2,1
81112d04:	003e5006 	br	81112648 <__reset+0xfb0f2648>
81112d08:	d9402c17 	ldw	r5,176(sp)
81112d0c:	d9801e04 	addi	r6,sp,120
81112d10:	9809883a 	mov	r4,r19
81112d14:	111a5000 	call	8111a500 <__ssprint_r>
81112d18:	103bd71e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112d1c:	d8c02017 	ldw	r3,128(sp)
81112d20:	da000404 	addi	r8,sp,16
81112d24:	d9003217 	ldw	r4,200(sp)
81112d28:	d8802617 	ldw	r2,152(sp)
81112d2c:	d9403317 	ldw	r5,204(sp)
81112d30:	8123883a 	add	r17,r16,r4
81112d34:	11400216 	blt	r2,r5,81112d40 <___svfprintf_internal_r+0x145c>
81112d38:	9100004c 	andi	r4,r18,1
81112d3c:	20000d26 	beq	r4,zero,81112d74 <___svfprintf_internal_r+0x1490>
81112d40:	d9003817 	ldw	r4,224(sp)
81112d44:	d9403417 	ldw	r5,208(sp)
81112d48:	1907883a 	add	r3,r3,r4
81112d4c:	d9001f17 	ldw	r4,124(sp)
81112d50:	41400015 	stw	r5,0(r8)
81112d54:	d9403817 	ldw	r5,224(sp)
81112d58:	21000044 	addi	r4,r4,1
81112d5c:	d8c02015 	stw	r3,128(sp)
81112d60:	41400115 	stw	r5,4(r8)
81112d64:	d9001f15 	stw	r4,124(sp)
81112d68:	014001c4 	movi	r5,7
81112d6c:	2901dc16 	blt	r5,r4,811134e0 <___svfprintf_internal_r+0x1bfc>
81112d70:	42000204 	addi	r8,r8,8
81112d74:	d9003317 	ldw	r4,204(sp)
81112d78:	8121883a 	add	r16,r16,r4
81112d7c:	2085c83a 	sub	r2,r4,r2
81112d80:	8461c83a 	sub	r16,r16,r17
81112d84:	1400010e 	bge	r2,r16,81112d8c <___svfprintf_internal_r+0x14a8>
81112d88:	1021883a 	mov	r16,r2
81112d8c:	04000a0e 	bge	zero,r16,81112db8 <___svfprintf_internal_r+0x14d4>
81112d90:	d9001f17 	ldw	r4,124(sp)
81112d94:	1c07883a 	add	r3,r3,r16
81112d98:	44400015 	stw	r17,0(r8)
81112d9c:	21000044 	addi	r4,r4,1
81112da0:	44000115 	stw	r16,4(r8)
81112da4:	d8c02015 	stw	r3,128(sp)
81112da8:	d9001f15 	stw	r4,124(sp)
81112dac:	014001c4 	movi	r5,7
81112db0:	2901e616 	blt	r5,r4,8111354c <___svfprintf_internal_r+0x1c68>
81112db4:	42000204 	addi	r8,r8,8
81112db8:	8001f616 	blt	r16,zero,81113594 <___svfprintf_internal_r+0x1cb0>
81112dbc:	1421c83a 	sub	r16,r2,r16
81112dc0:	043d1c0e 	bge	zero,r16,81112234 <__reset+0xfb0f2234>
81112dc4:	04400404 	movi	r17,16
81112dc8:	d8801f17 	ldw	r2,124(sp)
81112dcc:	8c3edd0e 	bge	r17,r16,81112944 <__reset+0xfb0f2944>
81112dd0:	016044b4 	movhi	r5,33042
81112dd4:	295ab984 	addi	r5,r5,27366
81112dd8:	d9402b15 	stw	r5,172(sp)
81112ddc:	058001c4 	movi	r22,7
81112de0:	dd002c17 	ldw	r20,176(sp)
81112de4:	00000306 	br	81112df4 <___svfprintf_internal_r+0x1510>
81112de8:	42000204 	addi	r8,r8,8
81112dec:	843ffc04 	addi	r16,r16,-16
81112df0:	8c3ed70e 	bge	r17,r16,81112950 <__reset+0xfb0f2950>
81112df4:	18c00404 	addi	r3,r3,16
81112df8:	10800044 	addi	r2,r2,1
81112dfc:	45400015 	stw	r21,0(r8)
81112e00:	44400115 	stw	r17,4(r8)
81112e04:	d8c02015 	stw	r3,128(sp)
81112e08:	d8801f15 	stw	r2,124(sp)
81112e0c:	b0bff60e 	bge	r22,r2,81112de8 <__reset+0xfb0f2de8>
81112e10:	d9801e04 	addi	r6,sp,120
81112e14:	a00b883a 	mov	r5,r20
81112e18:	9809883a 	mov	r4,r19
81112e1c:	111a5000 	call	8111a500 <__ssprint_r>
81112e20:	103b951e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112e24:	d8c02017 	ldw	r3,128(sp)
81112e28:	d8801f17 	ldw	r2,124(sp)
81112e2c:	da000404 	addi	r8,sp,16
81112e30:	003fee06 	br	81112dec <__reset+0xfb0f2dec>
81112e34:	9088703a 	and	r4,r18,r2
81112e38:	203e8d1e 	bne	r4,zero,81112870 <__reset+0xfb0f2870>
81112e3c:	dc401f17 	ldw	r17,124(sp)
81112e40:	40800115 	stw	r2,4(r8)
81112e44:	44000015 	stw	r16,0(r8)
81112e48:	8c400044 	addi	r17,r17,1
81112e4c:	d8c02015 	stw	r3,128(sp)
81112e50:	dc401f15 	stw	r17,124(sp)
81112e54:	008001c4 	movi	r2,7
81112e58:	147f7f16 	blt	r2,r17,81112c58 <__reset+0xfb0f2c58>
81112e5c:	45800204 	addi	r22,r8,8
81112e60:	003eac06 	br	81112914 <__reset+0xfb0f2914>
81112e64:	d9402c17 	ldw	r5,176(sp)
81112e68:	d9801e04 	addi	r6,sp,120
81112e6c:	9809883a 	mov	r4,r19
81112e70:	111a5000 	call	8111a500 <__ssprint_r>
81112e74:	103b801e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112e78:	d8c02017 	ldw	r3,128(sp)
81112e7c:	dc401f17 	ldw	r17,124(sp)
81112e80:	da000404 	addi	r8,sp,16
81112e84:	003e8406 	br	81112898 <__reset+0xfb0f2898>
81112e88:	d9402c17 	ldw	r5,176(sp)
81112e8c:	d9801e04 	addi	r6,sp,120
81112e90:	9809883a 	mov	r4,r19
81112e94:	111a5000 	call	8111a500 <__ssprint_r>
81112e98:	103b771e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112e9c:	d8c02017 	ldw	r3,128(sp)
81112ea0:	dc401f17 	ldw	r17,124(sp)
81112ea4:	dd800404 	addi	r22,sp,16
81112ea8:	003e8606 	br	811128c4 <__reset+0xfb0f28c4>
81112eac:	0029883a 	mov	r20,zero
81112eb0:	a5000c04 	addi	r20,r20,48
81112eb4:	dc001dc4 	addi	r16,sp,119
81112eb8:	dd001dc5 	stb	r20,119(sp)
81112ebc:	003f3806 	br	81112ba0 <__reset+0xfb0f2ba0>
81112ec0:	d9402c17 	ldw	r5,176(sp)
81112ec4:	d9801e04 	addi	r6,sp,120
81112ec8:	9809883a 	mov	r4,r19
81112ecc:	111a5000 	call	8111a500 <__ssprint_r>
81112ed0:	103b691e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81112ed4:	d8c02017 	ldw	r3,128(sp)
81112ed8:	da000404 	addi	r8,sp,16
81112edc:	003c9506 	br	81112134 <__reset+0xfb0f2134>
81112ee0:	d9003617 	ldw	r4,216(sp)
81112ee4:	d9403717 	ldw	r5,220(sp)
81112ee8:	da003e15 	stw	r8,248(sp)
81112eec:	111a3180 	call	8111a318 <__fpclassifyd>
81112ef0:	da003e17 	ldw	r8,248(sp)
81112ef4:	1000bd1e 	bne	r2,zero,811131ec <___svfprintf_internal_r+0x1908>
81112ef8:	008011c4 	movi	r2,71
81112efc:	14411e0e 	bge	r2,r17,81113378 <___svfprintf_internal_r+0x1a94>
81112f00:	042044b4 	movhi	r16,33042
81112f04:	841aac04 	addi	r16,r16,27312
81112f08:	00c000c4 	movi	r3,3
81112f0c:	00bfdfc4 	movi	r2,-129
81112f10:	d8c02a15 	stw	r3,168(sp)
81112f14:	90a4703a 	and	r18,r18,r2
81112f18:	df002783 	ldbu	fp,158(sp)
81112f1c:	d8c02e15 	stw	r3,184(sp)
81112f20:	d8002915 	stw	zero,164(sp)
81112f24:	d8003215 	stw	zero,200(sp)
81112f28:	003c1c06 	br	81111f9c <__reset+0xfb0f1f9c>
81112f2c:	9080100c 	andi	r2,r18,64
81112f30:	d8002785 	stb	zero,158(sp)
81112f34:	10009426 	beq	r2,zero,81113188 <___svfprintf_internal_r+0x18a4>
81112f38:	d8c02d17 	ldw	r3,180(sp)
81112f3c:	d9002917 	ldw	r4,164(sp)
81112f40:	002d883a 	mov	r22,zero
81112f44:	18800104 	addi	r2,r3,4
81112f48:	1d00000b 	ldhu	r20,0(r3)
81112f4c:	203ec10e 	bge	r4,zero,81112a54 <__reset+0xfb0f2a54>
81112f50:	a586b03a 	or	r3,r20,r22
81112f54:	d8802d15 	stw	r2,180(sp)
81112f58:	183ec21e 	bne	r3,zero,81112a64 <__reset+0xfb0f2a64>
81112f5c:	0039883a 	mov	fp,zero
81112f60:	0005883a 	mov	r2,zero
81112f64:	003db806 	br	81112648 <__reset+0xfb0f2648>
81112f68:	d8802d17 	ldw	r2,180(sp)
81112f6c:	d8c02d17 	ldw	r3,180(sp)
81112f70:	d9002d17 	ldw	r4,180(sp)
81112f74:	10800017 	ldw	r2,0(r2)
81112f78:	18c00117 	ldw	r3,4(r3)
81112f7c:	21000204 	addi	r4,r4,8
81112f80:	d8803615 	stw	r2,216(sp)
81112f84:	d8c03715 	stw	r3,220(sp)
81112f88:	d9002d15 	stw	r4,180(sp)
81112f8c:	003b8206 	br	81111d98 <__reset+0xfb0f1d98>
81112f90:	9080100c 	andi	r2,r18,64
81112f94:	10010726 	beq	r2,zero,811133b4 <___svfprintf_internal_r+0x1ad0>
81112f98:	d8c02d17 	ldw	r3,180(sp)
81112f9c:	1d00000f 	ldh	r20,0(r3)
81112fa0:	18c00104 	addi	r3,r3,4
81112fa4:	d8c02d15 	stw	r3,180(sp)
81112fa8:	a02dd7fa 	srai	r22,r20,31
81112fac:	b005883a 	mov	r2,r22
81112fb0:	003ba206 	br	81111e3c <__reset+0xfb0f1e3c>
81112fb4:	9080100c 	andi	r2,r18,64
81112fb8:	10010526 	beq	r2,zero,811133d0 <___svfprintf_internal_r+0x1aec>
81112fbc:	d9002d17 	ldw	r4,180(sp)
81112fc0:	002d883a 	mov	r22,zero
81112fc4:	2500000b 	ldhu	r20,0(r4)
81112fc8:	21000104 	addi	r4,r4,4
81112fcc:	d9002d15 	stw	r4,180(sp)
81112fd0:	003cfe06 	br	811123cc <__reset+0xfb0f23cc>
81112fd4:	bc400007 	ldb	r17,0(r23)
81112fd8:	003a9606 	br	81111a34 <__reset+0xfb0f1a34>
81112fdc:	9080040c 	andi	r2,r18,16
81112fe0:	10010126 	beq	r2,zero,811133e8 <___svfprintf_internal_r+0x1b04>
81112fe4:	d9402d17 	ldw	r5,180(sp)
81112fe8:	d8c02f17 	ldw	r3,188(sp)
81112fec:	28800017 	ldw	r2,0(r5)
81112ff0:	29400104 	addi	r5,r5,4
81112ff4:	d9402d15 	stw	r5,180(sp)
81112ff8:	10c00015 	stw	r3,0(r2)
81112ffc:	003a6406 	br	81111990 <__reset+0xfb0f1990>
81113000:	d9002917 	ldw	r4,164(sp)
81113004:	d8002785 	stb	zero,158(sp)
81113008:	203d8d16 	blt	r4,zero,81112640 <__reset+0xfb0f2640>
8111300c:	00bfdfc4 	movi	r2,-129
81113010:	90a4703a 	and	r18,r18,r2
81113014:	003b0506 	br	81111c2c <__reset+0xfb0f1c2c>
81113018:	016044b4 	movhi	r5,33042
8111301c:	295ab984 	addi	r5,r5,27366
81113020:	d9402b15 	stw	r5,172(sp)
81113024:	d9402b17 	ldw	r5,172(sp)
81113028:	1c47883a 	add	r3,r3,r17
8111302c:	10800044 	addi	r2,r2,1
81113030:	41400015 	stw	r5,0(r8)
81113034:	44400115 	stw	r17,4(r8)
81113038:	d8c02015 	stw	r3,128(sp)
8111303c:	d8801f15 	stw	r2,124(sp)
81113040:	010001c4 	movi	r4,7
81113044:	20bf3016 	blt	r4,r2,81112d08 <__reset+0xfb0f2d08>
81113048:	42000204 	addi	r8,r8,8
8111304c:	003f3506 	br	81112d24 <__reset+0xfb0f2d24>
81113050:	012044b4 	movhi	r4,33042
81113054:	211ab984 	addi	r4,r4,27366
81113058:	d9002b15 	stw	r4,172(sp)
8111305c:	003c5e06 	br	811121d8 <__reset+0xfb0f21d8>
81113060:	d9402c17 	ldw	r5,176(sp)
81113064:	d9801e04 	addi	r6,sp,120
81113068:	9809883a 	mov	r4,r19
8111306c:	111a5000 	call	8111a500 <__ssprint_r>
81113070:	103b011e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81113074:	d8c02017 	ldw	r3,128(sp)
81113078:	da000404 	addi	r8,sp,16
8111307c:	003d9306 	br	811126cc <__reset+0xfb0f26cc>
81113080:	d8801f17 	ldw	r2,124(sp)
81113084:	016044b4 	movhi	r5,33042
81113088:	01000044 	movi	r4,1
8111308c:	18c00044 	addi	r3,r3,1
81113090:	10800044 	addi	r2,r2,1
81113094:	295ab904 	addi	r5,r5,27364
81113098:	41000115 	stw	r4,4(r8)
8111309c:	41400015 	stw	r5,0(r8)
811130a0:	d8c02015 	stw	r3,128(sp)
811130a4:	d8801f15 	stw	r2,124(sp)
811130a8:	010001c4 	movi	r4,7
811130ac:	2080b516 	blt	r4,r2,81113384 <___svfprintf_internal_r+0x1aa0>
811130b0:	42000204 	addi	r8,r8,8
811130b4:	8800041e 	bne	r17,zero,811130c8 <___svfprintf_internal_r+0x17e4>
811130b8:	d8803317 	ldw	r2,204(sp)
811130bc:	1000021e 	bne	r2,zero,811130c8 <___svfprintf_internal_r+0x17e4>
811130c0:	9080004c 	andi	r2,r18,1
811130c4:	103c5b26 	beq	r2,zero,81112234 <__reset+0xfb0f2234>
811130c8:	d9003817 	ldw	r4,224(sp)
811130cc:	d8801f17 	ldw	r2,124(sp)
811130d0:	d9403417 	ldw	r5,208(sp)
811130d4:	20c7883a 	add	r3,r4,r3
811130d8:	10800044 	addi	r2,r2,1
811130dc:	41000115 	stw	r4,4(r8)
811130e0:	41400015 	stw	r5,0(r8)
811130e4:	d8c02015 	stw	r3,128(sp)
811130e8:	d8801f15 	stw	r2,124(sp)
811130ec:	010001c4 	movi	r4,7
811130f0:	20818016 	blt	r4,r2,811136f4 <___svfprintf_internal_r+0x1e10>
811130f4:	42000204 	addi	r8,r8,8
811130f8:	0463c83a 	sub	r17,zero,r17
811130fc:	0440cb0e 	bge	zero,r17,8111342c <___svfprintf_internal_r+0x1b48>
81113100:	05800404 	movi	r22,16
81113104:	b440e80e 	bge	r22,r17,811134a8 <___svfprintf_internal_r+0x1bc4>
81113108:	016044b4 	movhi	r5,33042
8111310c:	295ab984 	addi	r5,r5,27366
81113110:	d9402b15 	stw	r5,172(sp)
81113114:	070001c4 	movi	fp,7
81113118:	dd002c17 	ldw	r20,176(sp)
8111311c:	00000306 	br	8111312c <___svfprintf_internal_r+0x1848>
81113120:	42000204 	addi	r8,r8,8
81113124:	8c7ffc04 	addi	r17,r17,-16
81113128:	b440e20e 	bge	r22,r17,811134b4 <___svfprintf_internal_r+0x1bd0>
8111312c:	18c00404 	addi	r3,r3,16
81113130:	10800044 	addi	r2,r2,1
81113134:	45400015 	stw	r21,0(r8)
81113138:	45800115 	stw	r22,4(r8)
8111313c:	d8c02015 	stw	r3,128(sp)
81113140:	d8801f15 	stw	r2,124(sp)
81113144:	e0bff60e 	bge	fp,r2,81113120 <__reset+0xfb0f3120>
81113148:	d9801e04 	addi	r6,sp,120
8111314c:	a00b883a 	mov	r5,r20
81113150:	9809883a 	mov	r4,r19
81113154:	111a5000 	call	8111a500 <__ssprint_r>
81113158:	103ac71e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
8111315c:	d8c02017 	ldw	r3,128(sp)
81113160:	d8801f17 	ldw	r2,124(sp)
81113164:	da000404 	addi	r8,sp,16
81113168:	003fee06 	br	81113124 <__reset+0xfb0f3124>
8111316c:	d8c02d17 	ldw	r3,180(sp)
81113170:	d9002917 	ldw	r4,164(sp)
81113174:	002d883a 	mov	r22,zero
81113178:	18800104 	addi	r2,r3,4
8111317c:	1d000017 	ldw	r20,0(r3)
81113180:	203e7d0e 	bge	r4,zero,81112b78 <__reset+0xfb0f2b78>
81113184:	003eda06 	br	81112cf0 <__reset+0xfb0f2cf0>
81113188:	d9402d17 	ldw	r5,180(sp)
8111318c:	d8c02917 	ldw	r3,164(sp)
81113190:	002d883a 	mov	r22,zero
81113194:	28800104 	addi	r2,r5,4
81113198:	2d000017 	ldw	r20,0(r5)
8111319c:	183e2d0e 	bge	r3,zero,81112a54 <__reset+0xfb0f2a54>
811131a0:	003f6b06 	br	81112f50 <__reset+0xfb0f2f50>
811131a4:	d8c02d15 	stw	r3,180(sp)
811131a8:	0039883a 	mov	fp,zero
811131ac:	003ed206 	br	81112cf8 <__reset+0xfb0f2cf8>
811131b0:	bc400043 	ldbu	r17,1(r23)
811131b4:	94800814 	ori	r18,r18,32
811131b8:	bdc00044 	addi	r23,r23,1
811131bc:	8c403fcc 	andi	r17,r17,255
811131c0:	8c40201c 	xori	r17,r17,128
811131c4:	8c7fe004 	addi	r17,r17,-128
811131c8:	003a1a06 	br	81111a34 <__reset+0xfb0f1a34>
811131cc:	d9402c17 	ldw	r5,176(sp)
811131d0:	d9801e04 	addi	r6,sp,120
811131d4:	9809883a 	mov	r4,r19
811131d8:	111a5000 	call	8111a500 <__ssprint_r>
811131dc:	103aa61e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
811131e0:	d8c02017 	ldw	r3,128(sp)
811131e4:	da000404 	addi	r8,sp,16
811131e8:	003d4a06 	br	81112714 <__reset+0xfb0f2714>
811131ec:	d9002917 	ldw	r4,164(sp)
811131f0:	05bff7c4 	movi	r22,-33
811131f4:	00bfffc4 	movi	r2,-1
811131f8:	8dac703a 	and	r22,r17,r22
811131fc:	20806a26 	beq	r4,r2,811133a8 <___svfprintf_internal_r+0x1ac4>
81113200:	008011c4 	movi	r2,71
81113204:	b0813726 	beq	r22,r2,811136e4 <___svfprintf_internal_r+0x1e00>
81113208:	d9003717 	ldw	r4,220(sp)
8111320c:	90c04014 	ori	r3,r18,256
81113210:	d8c02b15 	stw	r3,172(sp)
81113214:	20015d16 	blt	r4,zero,8111378c <___svfprintf_internal_r+0x1ea8>
81113218:	dd003717 	ldw	r20,220(sp)
8111321c:	d8002a05 	stb	zero,168(sp)
81113220:	00801984 	movi	r2,102
81113224:	88814026 	beq	r17,r2,81113728 <___svfprintf_internal_r+0x1e44>
81113228:	00801184 	movi	r2,70
8111322c:	88817126 	beq	r17,r2,811137f4 <___svfprintf_internal_r+0x1f10>
81113230:	00801144 	movi	r2,69
81113234:	b0816226 	beq	r22,r2,811137c0 <___svfprintf_internal_r+0x1edc>
81113238:	d8c02917 	ldw	r3,164(sp)
8111323c:	d8802104 	addi	r2,sp,132
81113240:	d8800315 	stw	r2,12(sp)
81113244:	d9403617 	ldw	r5,216(sp)
81113248:	d8802504 	addi	r2,sp,148
8111324c:	d8800215 	stw	r2,8(sp)
81113250:	d8802604 	addi	r2,sp,152
81113254:	d8c00015 	stw	r3,0(sp)
81113258:	d8800115 	stw	r2,4(sp)
8111325c:	01c00084 	movi	r7,2
81113260:	a00d883a 	mov	r6,r20
81113264:	9809883a 	mov	r4,r19
81113268:	d8c03d15 	stw	r3,244(sp)
8111326c:	da003e15 	stw	r8,248(sp)
81113270:	11161940 	call	81116194 <_dtoa_r>
81113274:	1021883a 	mov	r16,r2
81113278:	008019c4 	movi	r2,103
8111327c:	d8c03d17 	ldw	r3,244(sp)
81113280:	da003e17 	ldw	r8,248(sp)
81113284:	8880e726 	beq	r17,r2,81113624 <___svfprintf_internal_r+0x1d40>
81113288:	008011c4 	movi	r2,71
8111328c:	8880d426 	beq	r17,r2,811135e0 <___svfprintf_internal_r+0x1cfc>
81113290:	80f9883a 	add	fp,r16,r3
81113294:	d9003617 	ldw	r4,216(sp)
81113298:	000d883a 	mov	r6,zero
8111329c:	000f883a 	mov	r7,zero
811132a0:	a00b883a 	mov	r5,r20
811132a4:	da003e15 	stw	r8,248(sp)
811132a8:	111f45c0 	call	8111f45c <__eqdf2>
811132ac:	da003e17 	ldw	r8,248(sp)
811132b0:	1000e426 	beq	r2,zero,81113644 <___svfprintf_internal_r+0x1d60>
811132b4:	d8802117 	ldw	r2,132(sp)
811132b8:	1700062e 	bgeu	r2,fp,811132d4 <___svfprintf_internal_r+0x19f0>
811132bc:	01000c04 	movi	r4,48
811132c0:	10c00044 	addi	r3,r2,1
811132c4:	d8c02115 	stw	r3,132(sp)
811132c8:	11000005 	stb	r4,0(r2)
811132cc:	d8802117 	ldw	r2,132(sp)
811132d0:	173ffb36 	bltu	r2,fp,811132c0 <__reset+0xfb0f32c0>
811132d4:	1405c83a 	sub	r2,r2,r16
811132d8:	d8803315 	stw	r2,204(sp)
811132dc:	008011c4 	movi	r2,71
811132e0:	b080c526 	beq	r22,r2,811135f8 <___svfprintf_internal_r+0x1d14>
811132e4:	00801944 	movi	r2,101
811132e8:	1441d90e 	bge	r2,r17,81113a50 <___svfprintf_internal_r+0x216c>
811132ec:	d8c02617 	ldw	r3,152(sp)
811132f0:	00801984 	movi	r2,102
811132f4:	d8c03215 	stw	r3,200(sp)
811132f8:	88813426 	beq	r17,r2,811137cc <___svfprintf_internal_r+0x1ee8>
811132fc:	d8c03217 	ldw	r3,200(sp)
81113300:	d9003317 	ldw	r4,204(sp)
81113304:	19012516 	blt	r3,r4,8111379c <___svfprintf_internal_r+0x1eb8>
81113308:	9480004c 	andi	r18,r18,1
8111330c:	9001841e 	bne	r18,zero,81113920 <___svfprintf_internal_r+0x203c>
81113310:	1805883a 	mov	r2,r3
81113314:	1801cc16 	blt	r3,zero,81113a48 <___svfprintf_internal_r+0x2164>
81113318:	d8c03217 	ldw	r3,200(sp)
8111331c:	044019c4 	movi	r17,103
81113320:	d8c02e15 	stw	r3,184(sp)
81113324:	df002a07 	ldb	fp,168(sp)
81113328:	e000a61e 	bne	fp,zero,811135c4 <___svfprintf_internal_r+0x1ce0>
8111332c:	df002783 	ldbu	fp,158(sp)
81113330:	d8802a15 	stw	r2,168(sp)
81113334:	dc802b17 	ldw	r18,172(sp)
81113338:	d8002915 	stw	zero,164(sp)
8111333c:	003b1706 	br	81111f9c <__reset+0xfb0f1f9c>
81113340:	042044b4 	movhi	r16,33042
81113344:	841aa904 	addi	r16,r16,27300
81113348:	003aa606 	br	81111de4 <__reset+0xfb0f1de4>
8111334c:	d9003917 	ldw	r4,228(sp)
81113350:	04001004 	movi	r16,64
81113354:	800b883a 	mov	r5,r16
81113358:	111093c0 	call	8111093c <_malloc_r>
8111335c:	d9002c17 	ldw	r4,176(sp)
81113360:	20800015 	stw	r2,0(r4)
81113364:	20800415 	stw	r2,16(r4)
81113368:	1001cb26 	beq	r2,zero,81113a98 <___svfprintf_internal_r+0x21b4>
8111336c:	d8802c17 	ldw	r2,176(sp)
81113370:	14000515 	stw	r16,20(r2)
81113374:	00397606 	br	81111950 <__reset+0xfb0f1950>
81113378:	042044b4 	movhi	r16,33042
8111337c:	841aab04 	addi	r16,r16,27308
81113380:	003ee106 	br	81112f08 <__reset+0xfb0f2f08>
81113384:	d9402c17 	ldw	r5,176(sp)
81113388:	d9801e04 	addi	r6,sp,120
8111338c:	9809883a 	mov	r4,r19
81113390:	111a5000 	call	8111a500 <__ssprint_r>
81113394:	103a381e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81113398:	dc402617 	ldw	r17,152(sp)
8111339c:	d8c02017 	ldw	r3,128(sp)
811133a0:	da000404 	addi	r8,sp,16
811133a4:	003f4306 	br	811130b4 <__reset+0xfb0f30b4>
811133a8:	01400184 	movi	r5,6
811133ac:	d9402915 	stw	r5,164(sp)
811133b0:	003f9506 	br	81113208 <__reset+0xfb0f3208>
811133b4:	d9002d17 	ldw	r4,180(sp)
811133b8:	25000017 	ldw	r20,0(r4)
811133bc:	21000104 	addi	r4,r4,4
811133c0:	d9002d15 	stw	r4,180(sp)
811133c4:	a02dd7fa 	srai	r22,r20,31
811133c8:	b005883a 	mov	r2,r22
811133cc:	003a9b06 	br	81111e3c <__reset+0xfb0f1e3c>
811133d0:	d9402d17 	ldw	r5,180(sp)
811133d4:	002d883a 	mov	r22,zero
811133d8:	2d000017 	ldw	r20,0(r5)
811133dc:	29400104 	addi	r5,r5,4
811133e0:	d9402d15 	stw	r5,180(sp)
811133e4:	003bf906 	br	811123cc <__reset+0xfb0f23cc>
811133e8:	9480100c 	andi	r18,r18,64
811133ec:	90006e26 	beq	r18,zero,811135a8 <___svfprintf_internal_r+0x1cc4>
811133f0:	d9002d17 	ldw	r4,180(sp)
811133f4:	d9402f17 	ldw	r5,188(sp)
811133f8:	20800017 	ldw	r2,0(r4)
811133fc:	21000104 	addi	r4,r4,4
81113400:	d9002d15 	stw	r4,180(sp)
81113404:	1140000d 	sth	r5,0(r2)
81113408:	00396106 	br	81111990 <__reset+0xfb0f1990>
8111340c:	d9402c17 	ldw	r5,176(sp)
81113410:	d9801e04 	addi	r6,sp,120
81113414:	9809883a 	mov	r4,r19
81113418:	111a5000 	call	8111a500 <__ssprint_r>
8111341c:	103a161e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81113420:	d8c02017 	ldw	r3,128(sp)
81113424:	d8801f17 	ldw	r2,124(sp)
81113428:	da000404 	addi	r8,sp,16
8111342c:	d9403317 	ldw	r5,204(sp)
81113430:	10800044 	addi	r2,r2,1
81113434:	44000015 	stw	r16,0(r8)
81113438:	28c7883a 	add	r3,r5,r3
8111343c:	003b7706 	br	8111221c <__reset+0xfb0f221c>
81113440:	8009883a 	mov	r4,r16
81113444:	da003e15 	stw	r8,248(sp)
81113448:	111a4680 	call	8111a468 <strlen>
8111344c:	d8802e15 	stw	r2,184(sp)
81113450:	da003e17 	ldw	r8,248(sp)
81113454:	103c280e 	bge	r2,zero,811124f8 <__reset+0xfb0f24f8>
81113458:	0005883a 	mov	r2,zero
8111345c:	003c2606 	br	811124f8 <__reset+0xfb0f24f8>
81113460:	00bfffc4 	movi	r2,-1
81113464:	003a0906 	br	81111c8c <__reset+0xfb0f1c8c>
81113468:	012044b4 	movhi	r4,33042
8111346c:	211abd84 	addi	r4,r4,27382
81113470:	d9003515 	stw	r4,212(sp)
81113474:	003b0606 	br	81112090 <__reset+0xfb0f2090>
81113478:	013fffc4 	movi	r4,-1
8111347c:	003a2706 	br	81111d1c <__reset+0xfb0f1d1c>
81113480:	d9402c17 	ldw	r5,176(sp)
81113484:	d9801e04 	addi	r6,sp,120
81113488:	9809883a 	mov	r4,r19
8111348c:	111a5000 	call	8111a500 <__ssprint_r>
81113490:	1039f91e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81113494:	d8c02017 	ldw	r3,128(sp)
81113498:	da000404 	addi	r8,sp,16
8111349c:	003d8406 	br	81112ab0 <__reset+0xfb0f2ab0>
811134a0:	0023883a 	mov	r17,zero
811134a4:	003d8306 	br	81112ab4 <__reset+0xfb0f2ab4>
811134a8:	012044b4 	movhi	r4,33042
811134ac:	211ab984 	addi	r4,r4,27366
811134b0:	d9002b15 	stw	r4,172(sp)
811134b4:	d9002b17 	ldw	r4,172(sp)
811134b8:	1c47883a 	add	r3,r3,r17
811134bc:	10800044 	addi	r2,r2,1
811134c0:	41000015 	stw	r4,0(r8)
811134c4:	44400115 	stw	r17,4(r8)
811134c8:	d8c02015 	stw	r3,128(sp)
811134cc:	d8801f15 	stw	r2,124(sp)
811134d0:	010001c4 	movi	r4,7
811134d4:	20bfcd16 	blt	r4,r2,8111340c <__reset+0xfb0f340c>
811134d8:	42000204 	addi	r8,r8,8
811134dc:	003fd306 	br	8111342c <__reset+0xfb0f342c>
811134e0:	d9402c17 	ldw	r5,176(sp)
811134e4:	d9801e04 	addi	r6,sp,120
811134e8:	9809883a 	mov	r4,r19
811134ec:	111a5000 	call	8111a500 <__ssprint_r>
811134f0:	1039e11e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
811134f4:	d8802617 	ldw	r2,152(sp)
811134f8:	d8c02017 	ldw	r3,128(sp)
811134fc:	da000404 	addi	r8,sp,16
81113500:	003e1c06 	br	81112d74 <__reset+0xfb0f2d74>
81113504:	d8802917 	ldw	r2,164(sp)
81113508:	00c00184 	movi	r3,6
8111350c:	1880012e 	bgeu	r3,r2,81113514 <___svfprintf_internal_r+0x1c30>
81113510:	1805883a 	mov	r2,r3
81113514:	d8802e15 	stw	r2,184(sp)
81113518:	1000f316 	blt	r2,zero,811138e8 <___svfprintf_internal_r+0x2004>
8111351c:	042044b4 	movhi	r16,33042
81113520:	d8802a15 	stw	r2,168(sp)
81113524:	dd002d15 	stw	r20,180(sp)
81113528:	d8002915 	stw	zero,164(sp)
8111352c:	d8003215 	stw	zero,200(sp)
81113530:	841ab704 	addi	r16,r16,27356
81113534:	0039883a 	mov	fp,zero
81113538:	003a9f06 	br	81111fb8 <__reset+0xfb0f1fb8>
8111353c:	012044b4 	movhi	r4,33042
81113540:	211abd84 	addi	r4,r4,27382
81113544:	d9003515 	stw	r4,212(sp)
81113548:	003b5f06 	br	811122c8 <__reset+0xfb0f22c8>
8111354c:	d9402c17 	ldw	r5,176(sp)
81113550:	d9801e04 	addi	r6,sp,120
81113554:	9809883a 	mov	r4,r19
81113558:	111a5000 	call	8111a500 <__ssprint_r>
8111355c:	1039c61e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81113560:	d8802617 	ldw	r2,152(sp)
81113564:	d9403317 	ldw	r5,204(sp)
81113568:	d8c02017 	ldw	r3,128(sp)
8111356c:	da000404 	addi	r8,sp,16
81113570:	2885c83a 	sub	r2,r5,r2
81113574:	003e1006 	br	81112db8 <__reset+0xfb0f2db8>
81113578:	00800044 	movi	r2,1
8111357c:	10803fcc 	andi	r2,r2,255
81113580:	00c00044 	movi	r3,1
81113584:	10fa3526 	beq	r2,r3,81111e5c <__reset+0xfb0f1e5c>
81113588:	00c00084 	movi	r3,2
8111358c:	10fb9e26 	beq	r2,r3,81112408 <__reset+0xfb0f2408>
81113590:	003a6406 	br	81111f24 <__reset+0xfb0f1f24>
81113594:	0021883a 	mov	r16,zero
81113598:	003e0806 	br	81112dbc <__reset+0xfb0f2dbc>
8111359c:	07000b44 	movi	fp,45
811135a0:	df002785 	stb	fp,158(sp)
811135a4:	003a0b06 	br	81111dd4 <__reset+0xfb0f1dd4>
811135a8:	d8c02d17 	ldw	r3,180(sp)
811135ac:	d9002f17 	ldw	r4,188(sp)
811135b0:	18800017 	ldw	r2,0(r3)
811135b4:	18c00104 	addi	r3,r3,4
811135b8:	d8c02d15 	stw	r3,180(sp)
811135bc:	11000015 	stw	r4,0(r2)
811135c0:	0038f306 	br	81111990 <__reset+0xfb0f1990>
811135c4:	00c00b44 	movi	r3,45
811135c8:	d8c02785 	stb	r3,158(sp)
811135cc:	d8802a15 	stw	r2,168(sp)
811135d0:	dc802b17 	ldw	r18,172(sp)
811135d4:	d8002915 	stw	zero,164(sp)
811135d8:	07000b44 	movi	fp,45
811135dc:	003a7306 	br	81111fac <__reset+0xfb0f1fac>
811135e0:	9080004c 	andi	r2,r18,1
811135e4:	1000941e 	bne	r2,zero,81113838 <___svfprintf_internal_r+0x1f54>
811135e8:	d8802117 	ldw	r2,132(sp)
811135ec:	1405c83a 	sub	r2,r2,r16
811135f0:	d8803315 	stw	r2,204(sp)
811135f4:	b441161e 	bne	r22,r17,81113a50 <___svfprintf_internal_r+0x216c>
811135f8:	dd802617 	ldw	r22,152(sp)
811135fc:	00bfff44 	movi	r2,-3
81113600:	b0801a16 	blt	r22,r2,8111366c <___svfprintf_internal_r+0x1d88>
81113604:	d9402917 	ldw	r5,164(sp)
81113608:	2d801816 	blt	r5,r22,8111366c <___svfprintf_internal_r+0x1d88>
8111360c:	dd803215 	stw	r22,200(sp)
81113610:	003f3a06 	br	811132fc <__reset+0xfb0f32fc>
81113614:	1025883a 	mov	r18,r2
81113618:	0039883a 	mov	fp,zero
8111361c:	00800084 	movi	r2,2
81113620:	003fd606 	br	8111357c <__reset+0xfb0f357c>
81113624:	9080004c 	andi	r2,r18,1
81113628:	103f191e 	bne	r2,zero,81113290 <__reset+0xfb0f3290>
8111362c:	d8802117 	ldw	r2,132(sp)
81113630:	003f2806 	br	811132d4 <__reset+0xfb0f32d4>
81113634:	012044b4 	movhi	r4,33042
81113638:	211ab984 	addi	r4,r4,27366
8111363c:	d9002b15 	stw	r4,172(sp)
81113640:	003c7c06 	br	81112834 <__reset+0xfb0f2834>
81113644:	e005883a 	mov	r2,fp
81113648:	003f2206 	br	811132d4 <__reset+0xfb0f32d4>
8111364c:	d9402917 	ldw	r5,164(sp)
81113650:	df002783 	ldbu	fp,158(sp)
81113654:	dd002d15 	stw	r20,180(sp)
81113658:	d9402a15 	stw	r5,168(sp)
8111365c:	d9402e15 	stw	r5,184(sp)
81113660:	d8002915 	stw	zero,164(sp)
81113664:	d8003215 	stw	zero,200(sp)
81113668:	003a4c06 	br	81111f9c <__reset+0xfb0f1f9c>
8111366c:	8c7fff84 	addi	r17,r17,-2
81113670:	b5bfffc4 	addi	r22,r22,-1
81113674:	dd802615 	stw	r22,152(sp)
81113678:	dc4022c5 	stb	r17,139(sp)
8111367c:	b000c316 	blt	r22,zero,8111398c <___svfprintf_internal_r+0x20a8>
81113680:	00800ac4 	movi	r2,43
81113684:	d8802305 	stb	r2,140(sp)
81113688:	00800244 	movi	r2,9
8111368c:	15806e16 	blt	r2,r22,81113848 <___svfprintf_internal_r+0x1f64>
81113690:	00800c04 	movi	r2,48
81113694:	b5800c04 	addi	r22,r22,48
81113698:	d8802345 	stb	r2,141(sp)
8111369c:	dd802385 	stb	r22,142(sp)
811136a0:	d88023c4 	addi	r2,sp,143
811136a4:	df0022c4 	addi	fp,sp,139
811136a8:	d8c03317 	ldw	r3,204(sp)
811136ac:	1739c83a 	sub	fp,r2,fp
811136b0:	d9003317 	ldw	r4,204(sp)
811136b4:	e0c7883a 	add	r3,fp,r3
811136b8:	df003b15 	stw	fp,236(sp)
811136bc:	d8c02e15 	stw	r3,184(sp)
811136c0:	00800044 	movi	r2,1
811136c4:	1100b70e 	bge	r2,r4,811139a4 <___svfprintf_internal_r+0x20c0>
811136c8:	d8c02e17 	ldw	r3,184(sp)
811136cc:	18c00044 	addi	r3,r3,1
811136d0:	d8c02e15 	stw	r3,184(sp)
811136d4:	1805883a 	mov	r2,r3
811136d8:	1800b016 	blt	r3,zero,8111399c <___svfprintf_internal_r+0x20b8>
811136dc:	d8003215 	stw	zero,200(sp)
811136e0:	003f1006 	br	81113324 <__reset+0xfb0f3324>
811136e4:	d8802917 	ldw	r2,164(sp)
811136e8:	103ec71e 	bne	r2,zero,81113208 <__reset+0xfb0f3208>
811136ec:	dc002915 	stw	r16,164(sp)
811136f0:	003ec506 	br	81113208 <__reset+0xfb0f3208>
811136f4:	d9402c17 	ldw	r5,176(sp)
811136f8:	d9801e04 	addi	r6,sp,120
811136fc:	9809883a 	mov	r4,r19
81113700:	111a5000 	call	8111a500 <__ssprint_r>
81113704:	10395c1e 	bne	r2,zero,81111c78 <__reset+0xfb0f1c78>
81113708:	dc402617 	ldw	r17,152(sp)
8111370c:	d8c02017 	ldw	r3,128(sp)
81113710:	d8801f17 	ldw	r2,124(sp)
81113714:	da000404 	addi	r8,sp,16
81113718:	003e7706 	br	811130f8 <__reset+0xfb0f30f8>
8111371c:	582f883a 	mov	r23,r11
81113720:	d8002915 	stw	zero,164(sp)
81113724:	0038c406 	br	81111a38 <__reset+0xfb0f1a38>
81113728:	d8c02917 	ldw	r3,164(sp)
8111372c:	d8802104 	addi	r2,sp,132
81113730:	d8800315 	stw	r2,12(sp)
81113734:	d9403617 	ldw	r5,216(sp)
81113738:	d8802504 	addi	r2,sp,148
8111373c:	d8800215 	stw	r2,8(sp)
81113740:	d8802604 	addi	r2,sp,152
81113744:	d8c00015 	stw	r3,0(sp)
81113748:	9809883a 	mov	r4,r19
8111374c:	d8800115 	stw	r2,4(sp)
81113750:	01c000c4 	movi	r7,3
81113754:	a00d883a 	mov	r6,r20
81113758:	da003e15 	stw	r8,248(sp)
8111375c:	11161940 	call	81116194 <_dtoa_r>
81113760:	d9002917 	ldw	r4,164(sp)
81113764:	da003e17 	ldw	r8,248(sp)
81113768:	1021883a 	mov	r16,r2
8111376c:	1139883a 	add	fp,r2,r4
81113770:	2007883a 	mov	r3,r4
81113774:	81000007 	ldb	r4,0(r16)
81113778:	00800c04 	movi	r2,48
8111377c:	20806f26 	beq	r4,r2,8111393c <___svfprintf_internal_r+0x2058>
81113780:	d8c02617 	ldw	r3,152(sp)
81113784:	e0f9883a 	add	fp,fp,r3
81113788:	003ec206 	br	81113294 <__reset+0xfb0f3294>
8111378c:	00c00b44 	movi	r3,45
81113790:	2520003c 	xorhi	r20,r4,32768
81113794:	d8c02a05 	stb	r3,168(sp)
81113798:	003ea106 	br	81113220 <__reset+0xfb0f3220>
8111379c:	d8c03217 	ldw	r3,200(sp)
811137a0:	00c0890e 	bge	zero,r3,811139c8 <___svfprintf_internal_r+0x20e4>
811137a4:	00800044 	movi	r2,1
811137a8:	d9003317 	ldw	r4,204(sp)
811137ac:	1105883a 	add	r2,r2,r4
811137b0:	d8802e15 	stw	r2,184(sp)
811137b4:	10005f16 	blt	r2,zero,81113934 <___svfprintf_internal_r+0x2050>
811137b8:	044019c4 	movi	r17,103
811137bc:	003ed906 	br	81113324 <__reset+0xfb0f3324>
811137c0:	d9002917 	ldw	r4,164(sp)
811137c4:	20c00044 	addi	r3,r4,1
811137c8:	003e9c06 	br	8111323c <__reset+0xfb0f323c>
811137cc:	d9002917 	ldw	r4,164(sp)
811137d0:	00c0680e 	bge	zero,r3,81113974 <___svfprintf_internal_r+0x2090>
811137d4:	2000461e 	bne	r4,zero,811138f0 <___svfprintf_internal_r+0x200c>
811137d8:	9480004c 	andi	r18,r18,1
811137dc:	9000441e 	bne	r18,zero,811138f0 <___svfprintf_internal_r+0x200c>
811137e0:	1805883a 	mov	r2,r3
811137e4:	1800a016 	blt	r3,zero,81113a68 <___svfprintf_internal_r+0x2184>
811137e8:	d8c03217 	ldw	r3,200(sp)
811137ec:	d8c02e15 	stw	r3,184(sp)
811137f0:	003ecc06 	br	81113324 <__reset+0xfb0f3324>
811137f4:	d9402917 	ldw	r5,164(sp)
811137f8:	d8802104 	addi	r2,sp,132
811137fc:	d8800315 	stw	r2,12(sp)
81113800:	d9400015 	stw	r5,0(sp)
81113804:	d8802504 	addi	r2,sp,148
81113808:	d9403617 	ldw	r5,216(sp)
8111380c:	d8800215 	stw	r2,8(sp)
81113810:	d8802604 	addi	r2,sp,152
81113814:	d8800115 	stw	r2,4(sp)
81113818:	01c000c4 	movi	r7,3
8111381c:	a00d883a 	mov	r6,r20
81113820:	9809883a 	mov	r4,r19
81113824:	da003e15 	stw	r8,248(sp)
81113828:	11161940 	call	81116194 <_dtoa_r>
8111382c:	d8c02917 	ldw	r3,164(sp)
81113830:	da003e17 	ldw	r8,248(sp)
81113834:	1021883a 	mov	r16,r2
81113838:	00801184 	movi	r2,70
8111383c:	80f9883a 	add	fp,r16,r3
81113840:	88bfcc26 	beq	r17,r2,81113774 <__reset+0xfb0f3774>
81113844:	003e9306 	br	81113294 <__reset+0xfb0f3294>
81113848:	df0022c4 	addi	fp,sp,139
8111384c:	dc002915 	stw	r16,164(sp)
81113850:	9829883a 	mov	r20,r19
81113854:	e021883a 	mov	r16,fp
81113858:	4027883a 	mov	r19,r8
8111385c:	b009883a 	mov	r4,r22
81113860:	01400284 	movi	r5,10
81113864:	111e1980 	call	8111e198 <__modsi3>
81113868:	10800c04 	addi	r2,r2,48
8111386c:	843fffc4 	addi	r16,r16,-1
81113870:	b009883a 	mov	r4,r22
81113874:	01400284 	movi	r5,10
81113878:	80800005 	stb	r2,0(r16)
8111387c:	111e1140 	call	8111e114 <__divsi3>
81113880:	102d883a 	mov	r22,r2
81113884:	00800244 	movi	r2,9
81113888:	15bff416 	blt	r2,r22,8111385c <__reset+0xfb0f385c>
8111388c:	9811883a 	mov	r8,r19
81113890:	b0800c04 	addi	r2,r22,48
81113894:	a027883a 	mov	r19,r20
81113898:	8029883a 	mov	r20,r16
8111389c:	a17fffc4 	addi	r5,r20,-1
811138a0:	a0bfffc5 	stb	r2,-1(r20)
811138a4:	dc002917 	ldw	r16,164(sp)
811138a8:	2f00752e 	bgeu	r5,fp,81113a80 <___svfprintf_internal_r+0x219c>
811138ac:	d9c02384 	addi	r7,sp,142
811138b0:	3d0fc83a 	sub	r7,r7,r20
811138b4:	d9002344 	addi	r4,sp,141
811138b8:	e1cf883a 	add	r7,fp,r7
811138bc:	00000106 	br	811138c4 <___svfprintf_internal_r+0x1fe0>
811138c0:	28800003 	ldbu	r2,0(r5)
811138c4:	20800005 	stb	r2,0(r4)
811138c8:	21000044 	addi	r4,r4,1
811138cc:	29400044 	addi	r5,r5,1
811138d0:	21fffb1e 	bne	r4,r7,811138c0 <__reset+0xfb0f38c0>
811138d4:	d8802304 	addi	r2,sp,140
811138d8:	1505c83a 	sub	r2,r2,r20
811138dc:	d8c02344 	addi	r3,sp,141
811138e0:	1885883a 	add	r2,r3,r2
811138e4:	003f7006 	br	811136a8 <__reset+0xfb0f36a8>
811138e8:	0005883a 	mov	r2,zero
811138ec:	003f0b06 	br	8111351c <__reset+0xfb0f351c>
811138f0:	d9002917 	ldw	r4,164(sp)
811138f4:	d8c03217 	ldw	r3,200(sp)
811138f8:	20800044 	addi	r2,r4,1
811138fc:	1885883a 	add	r2,r3,r2
81113900:	d8802e15 	stw	r2,184(sp)
81113904:	103e870e 	bge	r2,zero,81113324 <__reset+0xfb0f3324>
81113908:	0005883a 	mov	r2,zero
8111390c:	003e8506 	br	81113324 <__reset+0xfb0f3324>
81113910:	012044b4 	movhi	r4,33042
81113914:	211ab984 	addi	r4,r4,27366
81113918:	d9002b15 	stw	r4,172(sp)
8111391c:	003cc506 	br	81112c34 <__reset+0xfb0f2c34>
81113920:	d8c03217 	ldw	r3,200(sp)
81113924:	18c00044 	addi	r3,r3,1
81113928:	d8c02e15 	stw	r3,184(sp)
8111392c:	1805883a 	mov	r2,r3
81113930:	183fa10e 	bge	r3,zero,811137b8 <__reset+0xfb0f37b8>
81113934:	0005883a 	mov	r2,zero
81113938:	003f9f06 	br	811137b8 <__reset+0xfb0f37b8>
8111393c:	d9003617 	ldw	r4,216(sp)
81113940:	000d883a 	mov	r6,zero
81113944:	000f883a 	mov	r7,zero
81113948:	a00b883a 	mov	r5,r20
8111394c:	d8c03d15 	stw	r3,244(sp)
81113950:	da003e15 	stw	r8,248(sp)
81113954:	111f45c0 	call	8111f45c <__eqdf2>
81113958:	d8c03d17 	ldw	r3,244(sp)
8111395c:	da003e17 	ldw	r8,248(sp)
81113960:	103f8726 	beq	r2,zero,81113780 <__reset+0xfb0f3780>
81113964:	00800044 	movi	r2,1
81113968:	10c7c83a 	sub	r3,r2,r3
8111396c:	d8c02615 	stw	r3,152(sp)
81113970:	003f8406 	br	81113784 <__reset+0xfb0f3784>
81113974:	20000e1e 	bne	r4,zero,811139b0 <___svfprintf_internal_r+0x20cc>
81113978:	9480004c 	andi	r18,r18,1
8111397c:	90000c1e 	bne	r18,zero,811139b0 <___svfprintf_internal_r+0x20cc>
81113980:	00800044 	movi	r2,1
81113984:	d8802e15 	stw	r2,184(sp)
81113988:	003e6606 	br	81113324 <__reset+0xfb0f3324>
8111398c:	00800b44 	movi	r2,45
81113990:	05adc83a 	sub	r22,zero,r22
81113994:	d8802305 	stb	r2,140(sp)
81113998:	003f3b06 	br	81113688 <__reset+0xfb0f3688>
8111399c:	0005883a 	mov	r2,zero
811139a0:	003f4e06 	br	811136dc <__reset+0xfb0f36dc>
811139a4:	90a4703a 	and	r18,r18,r2
811139a8:	903f4a26 	beq	r18,zero,811136d4 <__reset+0xfb0f36d4>
811139ac:	003f4606 	br	811136c8 <__reset+0xfb0f36c8>
811139b0:	d8c02917 	ldw	r3,164(sp)
811139b4:	18c00084 	addi	r3,r3,2
811139b8:	d8c02e15 	stw	r3,184(sp)
811139bc:	1805883a 	mov	r2,r3
811139c0:	183e580e 	bge	r3,zero,81113324 <__reset+0xfb0f3324>
811139c4:	003fd006 	br	81113908 <__reset+0xfb0f3908>
811139c8:	00800084 	movi	r2,2
811139cc:	10c5c83a 	sub	r2,r2,r3
811139d0:	003f7506 	br	811137a8 <__reset+0xfb0f37a8>
811139d4:	d8802d17 	ldw	r2,180(sp)
811139d8:	d9002d17 	ldw	r4,180(sp)
811139dc:	bc400043 	ldbu	r17,1(r23)
811139e0:	10800017 	ldw	r2,0(r2)
811139e4:	582f883a 	mov	r23,r11
811139e8:	d8802915 	stw	r2,164(sp)
811139ec:	20800104 	addi	r2,r4,4
811139f0:	d9002917 	ldw	r4,164(sp)
811139f4:	d8802d15 	stw	r2,180(sp)
811139f8:	203df00e 	bge	r4,zero,811131bc <__reset+0xfb0f31bc>
811139fc:	8c403fcc 	andi	r17,r17,255
81113a00:	00bfffc4 	movi	r2,-1
81113a04:	8c40201c 	xori	r17,r17,128
81113a08:	d8802915 	stw	r2,164(sp)
81113a0c:	8c7fe004 	addi	r17,r17,-128
81113a10:	00380806 	br	81111a34 <__reset+0xfb0f1a34>
81113a14:	9080004c 	andi	r2,r18,1
81113a18:	0039883a 	mov	fp,zero
81113a1c:	10000726 	beq	r2,zero,81113a3c <___svfprintf_internal_r+0x2158>
81113a20:	d8c02817 	ldw	r3,160(sp)
81113a24:	dc001dc4 	addi	r16,sp,119
81113a28:	00800c04 	movi	r2,48
81113a2c:	1c07c83a 	sub	r3,r3,r16
81113a30:	d8801dc5 	stb	r2,119(sp)
81113a34:	d8c02e15 	stw	r3,184(sp)
81113a38:	00395206 	br	81111f84 <__reset+0xfb0f1f84>
81113a3c:	d8002e15 	stw	zero,184(sp)
81113a40:	dc001e04 	addi	r16,sp,120
81113a44:	00394f06 	br	81111f84 <__reset+0xfb0f1f84>
81113a48:	0005883a 	mov	r2,zero
81113a4c:	003e3206 	br	81113318 <__reset+0xfb0f3318>
81113a50:	dd802617 	ldw	r22,152(sp)
81113a54:	003f0606 	br	81113670 <__reset+0xfb0f3670>
81113a58:	d9c02785 	stb	r7,158(sp)
81113a5c:	003a5106 	br	811123a4 <__reset+0xfb0f23a4>
81113a60:	d9c02785 	stb	r7,158(sp)
81113a64:	003a3706 	br	81112344 <__reset+0xfb0f2344>
81113a68:	0005883a 	mov	r2,zero
81113a6c:	003f5e06 	br	811137e8 <__reset+0xfb0f37e8>
81113a70:	d9c02785 	stb	r7,158(sp)
81113a74:	00391706 	br	81111ed4 <__reset+0xfb0f1ed4>
81113a78:	d9c02785 	stb	r7,158(sp)
81113a7c:	0038e606 	br	81111e18 <__reset+0xfb0f1e18>
81113a80:	d8802344 	addi	r2,sp,141
81113a84:	003f0806 	br	811136a8 <__reset+0xfb0f36a8>
81113a88:	d9c02785 	stb	r7,158(sp)
81113a8c:	0038b706 	br	81111d6c <__reset+0xfb0f1d6c>
81113a90:	d9c02785 	stb	r7,158(sp)
81113a94:	003adc06 	br	81112608 <__reset+0xfb0f2608>
81113a98:	d9403917 	ldw	r5,228(sp)
81113a9c:	00800304 	movi	r2,12
81113aa0:	28800015 	stw	r2,0(r5)
81113aa4:	00bfffc4 	movi	r2,-1
81113aa8:	00387806 	br	81111c8c <__reset+0xfb0f1c8c>
81113aac:	d9c02785 	stb	r7,158(sp)
81113ab0:	003abf06 	br	811125b0 <__reset+0xfb0f25b0>
81113ab4:	d9c02785 	stb	r7,158(sp)
81113ab8:	003a9b06 	br	81112528 <__reset+0xfb0f2528>

81113abc <___vfprintf_internal_r>:
81113abc:	deffb804 	addi	sp,sp,-288
81113ac0:	dfc04715 	stw	ra,284(sp)
81113ac4:	ddc04515 	stw	r23,276(sp)
81113ac8:	dd404315 	stw	r21,268(sp)
81113acc:	d9002c15 	stw	r4,176(sp)
81113ad0:	282f883a 	mov	r23,r5
81113ad4:	302b883a 	mov	r21,r6
81113ad8:	d9c02d15 	stw	r7,180(sp)
81113adc:	df004615 	stw	fp,280(sp)
81113ae0:	dd804415 	stw	r22,272(sp)
81113ae4:	dd004215 	stw	r20,264(sp)
81113ae8:	dcc04115 	stw	r19,260(sp)
81113aec:	dc804015 	stw	r18,256(sp)
81113af0:	dc403f15 	stw	r17,252(sp)
81113af4:	dc003e15 	stw	r16,248(sp)
81113af8:	1118a880 	call	81118a88 <_localeconv_r>
81113afc:	10800017 	ldw	r2,0(r2)
81113b00:	1009883a 	mov	r4,r2
81113b04:	d8803415 	stw	r2,208(sp)
81113b08:	111a4680 	call	8111a468 <strlen>
81113b0c:	d8803715 	stw	r2,220(sp)
81113b10:	d8802c17 	ldw	r2,176(sp)
81113b14:	10000226 	beq	r2,zero,81113b20 <___vfprintf_internal_r+0x64>
81113b18:	10800e17 	ldw	r2,56(r2)
81113b1c:	1000f926 	beq	r2,zero,81113f04 <___vfprintf_internal_r+0x448>
81113b20:	b880030b 	ldhu	r2,12(r23)
81113b24:	10c8000c 	andi	r3,r2,8192
81113b28:	1800061e 	bne	r3,zero,81113b44 <___vfprintf_internal_r+0x88>
81113b2c:	b9001917 	ldw	r4,100(r23)
81113b30:	00f7ffc4 	movi	r3,-8193
81113b34:	10880014 	ori	r2,r2,8192
81113b38:	20c6703a 	and	r3,r4,r3
81113b3c:	b880030d 	sth	r2,12(r23)
81113b40:	b8c01915 	stw	r3,100(r23)
81113b44:	10c0020c 	andi	r3,r2,8
81113b48:	1800c126 	beq	r3,zero,81113e50 <___vfprintf_internal_r+0x394>
81113b4c:	b8c00417 	ldw	r3,16(r23)
81113b50:	1800bf26 	beq	r3,zero,81113e50 <___vfprintf_internal_r+0x394>
81113b54:	1080068c 	andi	r2,r2,26
81113b58:	00c00284 	movi	r3,10
81113b5c:	10c0c426 	beq	r2,r3,81113e70 <___vfprintf_internal_r+0x3b4>
81113b60:	d8c00404 	addi	r3,sp,16
81113b64:	052044b4 	movhi	r20,33042
81113b68:	d9001e04 	addi	r4,sp,120
81113b6c:	a51ac184 	addi	r20,r20,27398
81113b70:	d8c01e15 	stw	r3,120(sp)
81113b74:	d8002015 	stw	zero,128(sp)
81113b78:	d8001f15 	stw	zero,124(sp)
81113b7c:	d8003315 	stw	zero,204(sp)
81113b80:	d8003615 	stw	zero,216(sp)
81113b84:	d8003815 	stw	zero,224(sp)
81113b88:	1811883a 	mov	r8,r3
81113b8c:	d8003915 	stw	zero,228(sp)
81113b90:	d8003a15 	stw	zero,232(sp)
81113b94:	d8002f15 	stw	zero,188(sp)
81113b98:	d9002815 	stw	r4,160(sp)
81113b9c:	a8800007 	ldb	r2,0(r21)
81113ba0:	10027b26 	beq	r2,zero,81114590 <___vfprintf_internal_r+0xad4>
81113ba4:	00c00944 	movi	r3,37
81113ba8:	a821883a 	mov	r16,r21
81113bac:	10c0021e 	bne	r2,r3,81113bb8 <___vfprintf_internal_r+0xfc>
81113bb0:	00001406 	br	81113c04 <___vfprintf_internal_r+0x148>
81113bb4:	10c00326 	beq	r2,r3,81113bc4 <___vfprintf_internal_r+0x108>
81113bb8:	84000044 	addi	r16,r16,1
81113bbc:	80800007 	ldb	r2,0(r16)
81113bc0:	103ffc1e 	bne	r2,zero,81113bb4 <__reset+0xfb0f3bb4>
81113bc4:	8563c83a 	sub	r17,r16,r21
81113bc8:	88000e26 	beq	r17,zero,81113c04 <___vfprintf_internal_r+0x148>
81113bcc:	d8c02017 	ldw	r3,128(sp)
81113bd0:	d8801f17 	ldw	r2,124(sp)
81113bd4:	45400015 	stw	r21,0(r8)
81113bd8:	1c47883a 	add	r3,r3,r17
81113bdc:	10800044 	addi	r2,r2,1
81113be0:	d8c02015 	stw	r3,128(sp)
81113be4:	44400115 	stw	r17,4(r8)
81113be8:	d8801f15 	stw	r2,124(sp)
81113bec:	00c001c4 	movi	r3,7
81113bf0:	1880a716 	blt	r3,r2,81113e90 <___vfprintf_internal_r+0x3d4>
81113bf4:	42000204 	addi	r8,r8,8
81113bf8:	d9402f17 	ldw	r5,188(sp)
81113bfc:	2c4b883a 	add	r5,r5,r17
81113c00:	d9402f15 	stw	r5,188(sp)
81113c04:	80800007 	ldb	r2,0(r16)
81113c08:	1000a826 	beq	r2,zero,81113eac <___vfprintf_internal_r+0x3f0>
81113c0c:	84400047 	ldb	r17,1(r16)
81113c10:	00bfffc4 	movi	r2,-1
81113c14:	85400044 	addi	r21,r16,1
81113c18:	d8002785 	stb	zero,158(sp)
81113c1c:	0007883a 	mov	r3,zero
81113c20:	000f883a 	mov	r7,zero
81113c24:	d8802915 	stw	r2,164(sp)
81113c28:	d8003115 	stw	zero,196(sp)
81113c2c:	0025883a 	mov	r18,zero
81113c30:	01401604 	movi	r5,88
81113c34:	01800244 	movi	r6,9
81113c38:	02800a84 	movi	r10,42
81113c3c:	02401b04 	movi	r9,108
81113c40:	ad400044 	addi	r21,r21,1
81113c44:	88bff804 	addi	r2,r17,-32
81113c48:	28830436 	bltu	r5,r2,8111485c <___vfprintf_internal_r+0xda0>
81113c4c:	100490ba 	slli	r2,r2,2
81113c50:	01204474 	movhi	r4,33041
81113c54:	210f1904 	addi	r4,r4,15460
81113c58:	1105883a 	add	r2,r2,r4
81113c5c:	10800017 	ldw	r2,0(r2)
81113c60:	1000683a 	jmp	r2
81113c64:	8111477c 	xorhi	r4,r16,17693
81113c68:	8111485c 	xori	r4,r16,17697
81113c6c:	8111485c 	xori	r4,r16,17697
81113c70:	8111479c 	xori	r4,r16,17694
81113c74:	8111485c 	xori	r4,r16,17697
81113c78:	8111485c 	xori	r4,r16,17697
81113c7c:	8111485c 	xori	r4,r16,17697
81113c80:	8111485c 	xori	r4,r16,17697
81113c84:	8111485c 	xori	r4,r16,17697
81113c88:	8111485c 	xori	r4,r16,17697
81113c8c:	81113f10 	cmplti	r4,r16,17660
81113c90:	811146b8 	rdprs	r4,r16,17690
81113c94:	8111485c 	xori	r4,r16,17697
81113c98:	81113dd8 	cmpnei	r4,r16,17655
81113c9c:	81113f38 	rdprs	r4,r16,17660
81113ca0:	8111485c 	xori	r4,r16,17697
81113ca4:	81113f78 	rdprs	r4,r16,17661
81113ca8:	81113f84 	addi	r4,r16,17662
81113cac:	81113f84 	addi	r4,r16,17662
81113cb0:	81113f84 	addi	r4,r16,17662
81113cb4:	81113f84 	addi	r4,r16,17662
81113cb8:	81113f84 	addi	r4,r16,17662
81113cbc:	81113f84 	addi	r4,r16,17662
81113cc0:	81113f84 	addi	r4,r16,17662
81113cc4:	81113f84 	addi	r4,r16,17662
81113cc8:	81113f84 	addi	r4,r16,17662
81113ccc:	8111485c 	xori	r4,r16,17697
81113cd0:	8111485c 	xori	r4,r16,17697
81113cd4:	8111485c 	xori	r4,r16,17697
81113cd8:	8111485c 	xori	r4,r16,17697
81113cdc:	8111485c 	xori	r4,r16,17697
81113ce0:	8111485c 	xori	r4,r16,17697
81113ce4:	8111485c 	xori	r4,r16,17697
81113ce8:	8111485c 	xori	r4,r16,17697
81113cec:	8111485c 	xori	r4,r16,17697
81113cf0:	8111485c 	xori	r4,r16,17697
81113cf4:	81113fb8 	rdprs	r4,r16,17662
81113cf8:	81114074 	orhi	r4,r16,17665
81113cfc:	8111485c 	xori	r4,r16,17697
81113d00:	81114074 	orhi	r4,r16,17665
81113d04:	8111485c 	xori	r4,r16,17697
81113d08:	8111485c 	xori	r4,r16,17697
81113d0c:	8111485c 	xori	r4,r16,17697
81113d10:	8111485c 	xori	r4,r16,17697
81113d14:	81114114 	ori	r4,r16,17668
81113d18:	8111485c 	xori	r4,r16,17697
81113d1c:	8111485c 	xori	r4,r16,17697
81113d20:	81114120 	cmpeqi	r4,r16,17668
81113d24:	8111485c 	xori	r4,r16,17697
81113d28:	8111485c 	xori	r4,r16,17697
81113d2c:	8111485c 	xori	r4,r16,17697
81113d30:	8111485c 	xori	r4,r16,17697
81113d34:	8111485c 	xori	r4,r16,17697
81113d38:	81114598 	cmpnei	r4,r16,17686
81113d3c:	8111485c 	xori	r4,r16,17697
81113d40:	8111485c 	xori	r4,r16,17697
81113d44:	811145f8 	rdprs	r4,r16,17687
81113d48:	8111485c 	xori	r4,r16,17697
81113d4c:	8111485c 	xori	r4,r16,17697
81113d50:	8111485c 	xori	r4,r16,17697
81113d54:	8111485c 	xori	r4,r16,17697
81113d58:	8111485c 	xori	r4,r16,17697
81113d5c:	8111485c 	xori	r4,r16,17697
81113d60:	8111485c 	xori	r4,r16,17697
81113d64:	8111485c 	xori	r4,r16,17697
81113d68:	8111485c 	xori	r4,r16,17697
81113d6c:	8111485c 	xori	r4,r16,17697
81113d70:	81114808 	cmpgei	r4,r16,17696
81113d74:	811147a8 	cmpgeui	r4,r16,17694
81113d78:	81114074 	orhi	r4,r16,17665
81113d7c:	81114074 	orhi	r4,r16,17665
81113d80:	81114074 	orhi	r4,r16,17665
81113d84:	811147b8 	rdprs	r4,r16,17694
81113d88:	811147a8 	cmpgeui	r4,r16,17694
81113d8c:	8111485c 	xori	r4,r16,17697
81113d90:	8111485c 	xori	r4,r16,17697
81113d94:	811147c4 	addi	r4,r16,17695
81113d98:	8111485c 	xori	r4,r16,17697
81113d9c:	811147d4 	ori	r4,r16,17695
81113da0:	811146a8 	cmpgeui	r4,r16,17690
81113da4:	81113de4 	muli	r4,r16,17655
81113da8:	811146c8 	cmpgei	r4,r16,17691
81113dac:	8111485c 	xori	r4,r16,17697
81113db0:	811146d4 	ori	r4,r16,17691
81113db4:	8111485c 	xori	r4,r16,17697
81113db8:	81114730 	cmpltui	r4,r16,17692
81113dbc:	8111485c 	xori	r4,r16,17697
81113dc0:	8111485c 	xori	r4,r16,17697
81113dc4:	81114740 	call	88111474 <__reset+0x20f1474>
81113dc8:	d9003117 	ldw	r4,196(sp)
81113dcc:	d8802d15 	stw	r2,180(sp)
81113dd0:	0109c83a 	sub	r4,zero,r4
81113dd4:	d9003115 	stw	r4,196(sp)
81113dd8:	94800114 	ori	r18,r18,4
81113ddc:	ac400007 	ldb	r17,0(r21)
81113de0:	003f9706 	br	81113c40 <__reset+0xfb0f3c40>
81113de4:	00800c04 	movi	r2,48
81113de8:	d9002d17 	ldw	r4,180(sp)
81113dec:	d9402917 	ldw	r5,164(sp)
81113df0:	d8802705 	stb	r2,156(sp)
81113df4:	00801e04 	movi	r2,120
81113df8:	d8802745 	stb	r2,157(sp)
81113dfc:	d8002785 	stb	zero,158(sp)
81113e00:	20c00104 	addi	r3,r4,4
81113e04:	24c00017 	ldw	r19,0(r4)
81113e08:	002d883a 	mov	r22,zero
81113e0c:	90800094 	ori	r2,r18,2
81113e10:	28029a16 	blt	r5,zero,8111487c <___vfprintf_internal_r+0xdc0>
81113e14:	00bfdfc4 	movi	r2,-129
81113e18:	90a4703a 	and	r18,r18,r2
81113e1c:	d8c02d15 	stw	r3,180(sp)
81113e20:	94800094 	ori	r18,r18,2
81113e24:	9802871e 	bne	r19,zero,81114844 <___vfprintf_internal_r+0xd88>
81113e28:	00a044b4 	movhi	r2,33042
81113e2c:	109ab204 	addi	r2,r2,27336
81113e30:	d8803915 	stw	r2,228(sp)
81113e34:	04401e04 	movi	r17,120
81113e38:	d8802917 	ldw	r2,164(sp)
81113e3c:	0039883a 	mov	fp,zero
81113e40:	1001e926 	beq	r2,zero,811145e8 <___vfprintf_internal_r+0xb2c>
81113e44:	0027883a 	mov	r19,zero
81113e48:	002d883a 	mov	r22,zero
81113e4c:	00020506 	br	81114664 <___vfprintf_internal_r+0xba8>
81113e50:	d9002c17 	ldw	r4,176(sp)
81113e54:	b80b883a 	mov	r5,r23
81113e58:	1115dec0 	call	81115dec <__swsetup_r>
81113e5c:	1005ac1e 	bne	r2,zero,81115510 <___vfprintf_internal_r+0x1a54>
81113e60:	b880030b 	ldhu	r2,12(r23)
81113e64:	00c00284 	movi	r3,10
81113e68:	1080068c 	andi	r2,r2,26
81113e6c:	10ff3c1e 	bne	r2,r3,81113b60 <__reset+0xfb0f3b60>
81113e70:	b880038f 	ldh	r2,14(r23)
81113e74:	103f3a16 	blt	r2,zero,81113b60 <__reset+0xfb0f3b60>
81113e78:	d9c02d17 	ldw	r7,180(sp)
81113e7c:	d9002c17 	ldw	r4,176(sp)
81113e80:	a80d883a 	mov	r6,r21
81113e84:	b80b883a 	mov	r5,r23
81113e88:	1115cd00 	call	81115cd0 <__sbprintf>
81113e8c:	00001106 	br	81113ed4 <___vfprintf_internal_r+0x418>
81113e90:	d9002c17 	ldw	r4,176(sp)
81113e94:	d9801e04 	addi	r6,sp,120
81113e98:	b80b883a 	mov	r5,r23
81113e9c:	111ba080 	call	8111ba08 <__sprint_r>
81113ea0:	1000081e 	bne	r2,zero,81113ec4 <___vfprintf_internal_r+0x408>
81113ea4:	da000404 	addi	r8,sp,16
81113ea8:	003f5306 	br	81113bf8 <__reset+0xfb0f3bf8>
81113eac:	d8802017 	ldw	r2,128(sp)
81113eb0:	10000426 	beq	r2,zero,81113ec4 <___vfprintf_internal_r+0x408>
81113eb4:	d9002c17 	ldw	r4,176(sp)
81113eb8:	d9801e04 	addi	r6,sp,120
81113ebc:	b80b883a 	mov	r5,r23
81113ec0:	111ba080 	call	8111ba08 <__sprint_r>
81113ec4:	b880030b 	ldhu	r2,12(r23)
81113ec8:	1080100c 	andi	r2,r2,64
81113ecc:	1005901e 	bne	r2,zero,81115510 <___vfprintf_internal_r+0x1a54>
81113ed0:	d8802f17 	ldw	r2,188(sp)
81113ed4:	dfc04717 	ldw	ra,284(sp)
81113ed8:	df004617 	ldw	fp,280(sp)
81113edc:	ddc04517 	ldw	r23,276(sp)
81113ee0:	dd804417 	ldw	r22,272(sp)
81113ee4:	dd404317 	ldw	r21,268(sp)
81113ee8:	dd004217 	ldw	r20,264(sp)
81113eec:	dcc04117 	ldw	r19,260(sp)
81113ef0:	dc804017 	ldw	r18,256(sp)
81113ef4:	dc403f17 	ldw	r17,252(sp)
81113ef8:	dc003e17 	ldw	r16,248(sp)
81113efc:	dec04804 	addi	sp,sp,288
81113f00:	f800283a 	ret
81113f04:	d9002c17 	ldw	r4,176(sp)
81113f08:	1117e140 	call	81117e14 <__sinit>
81113f0c:	003f0406 	br	81113b20 <__reset+0xfb0f3b20>
81113f10:	d8802d17 	ldw	r2,180(sp)
81113f14:	d9002d17 	ldw	r4,180(sp)
81113f18:	10800017 	ldw	r2,0(r2)
81113f1c:	d8803115 	stw	r2,196(sp)
81113f20:	20800104 	addi	r2,r4,4
81113f24:	d9003117 	ldw	r4,196(sp)
81113f28:	203fa716 	blt	r4,zero,81113dc8 <__reset+0xfb0f3dc8>
81113f2c:	d8802d15 	stw	r2,180(sp)
81113f30:	ac400007 	ldb	r17,0(r21)
81113f34:	003f4206 	br	81113c40 <__reset+0xfb0f3c40>
81113f38:	ac400007 	ldb	r17,0(r21)
81113f3c:	aac00044 	addi	r11,r21,1
81113f40:	8a872826 	beq	r17,r10,81115be4 <___vfprintf_internal_r+0x2128>
81113f44:	88bff404 	addi	r2,r17,-48
81113f48:	0009883a 	mov	r4,zero
81113f4c:	30867d36 	bltu	r6,r2,81115944 <___vfprintf_internal_r+0x1e88>
81113f50:	5c400007 	ldb	r17,0(r11)
81113f54:	210002a4 	muli	r4,r4,10
81113f58:	5d400044 	addi	r21,r11,1
81113f5c:	a817883a 	mov	r11,r21
81113f60:	2089883a 	add	r4,r4,r2
81113f64:	88bff404 	addi	r2,r17,-48
81113f68:	30bff92e 	bgeu	r6,r2,81113f50 <__reset+0xfb0f3f50>
81113f6c:	2005c916 	blt	r4,zero,81115694 <___vfprintf_internal_r+0x1bd8>
81113f70:	d9002915 	stw	r4,164(sp)
81113f74:	003f3306 	br	81113c44 <__reset+0xfb0f3c44>
81113f78:	94802014 	ori	r18,r18,128
81113f7c:	ac400007 	ldb	r17,0(r21)
81113f80:	003f2f06 	br	81113c40 <__reset+0xfb0f3c40>
81113f84:	a809883a 	mov	r4,r21
81113f88:	d8003115 	stw	zero,196(sp)
81113f8c:	88bff404 	addi	r2,r17,-48
81113f90:	0017883a 	mov	r11,zero
81113f94:	24400007 	ldb	r17,0(r4)
81113f98:	5ac002a4 	muli	r11,r11,10
81113f9c:	ad400044 	addi	r21,r21,1
81113fa0:	a809883a 	mov	r4,r21
81113fa4:	12d7883a 	add	r11,r2,r11
81113fa8:	88bff404 	addi	r2,r17,-48
81113fac:	30bff92e 	bgeu	r6,r2,81113f94 <__reset+0xfb0f3f94>
81113fb0:	dac03115 	stw	r11,196(sp)
81113fb4:	003f2306 	br	81113c44 <__reset+0xfb0f3c44>
81113fb8:	18c03fcc 	andi	r3,r3,255
81113fbc:	18072b1e 	bne	r3,zero,81115c6c <___vfprintf_internal_r+0x21b0>
81113fc0:	94800414 	ori	r18,r18,16
81113fc4:	9080080c 	andi	r2,r18,32
81113fc8:	10037b26 	beq	r2,zero,81114db8 <___vfprintf_internal_r+0x12fc>
81113fcc:	d9402d17 	ldw	r5,180(sp)
81113fd0:	28800117 	ldw	r2,4(r5)
81113fd4:	2cc00017 	ldw	r19,0(r5)
81113fd8:	29400204 	addi	r5,r5,8
81113fdc:	d9402d15 	stw	r5,180(sp)
81113fe0:	102d883a 	mov	r22,r2
81113fe4:	10044b16 	blt	r2,zero,81115114 <___vfprintf_internal_r+0x1658>
81113fe8:	d9402917 	ldw	r5,164(sp)
81113fec:	df002783 	ldbu	fp,158(sp)
81113ff0:	2803bc16 	blt	r5,zero,81114ee4 <___vfprintf_internal_r+0x1428>
81113ff4:	00ffdfc4 	movi	r3,-129
81113ff8:	9d84b03a 	or	r2,r19,r22
81113ffc:	90e4703a 	and	r18,r18,r3
81114000:	10017726 	beq	r2,zero,811145e0 <___vfprintf_internal_r+0xb24>
81114004:	b0038326 	beq	r22,zero,81114e14 <___vfprintf_internal_r+0x1358>
81114008:	dc402a15 	stw	r17,168(sp)
8111400c:	dc001e04 	addi	r16,sp,120
81114010:	b023883a 	mov	r17,r22
81114014:	402d883a 	mov	r22,r8
81114018:	9809883a 	mov	r4,r19
8111401c:	880b883a 	mov	r5,r17
81114020:	01800284 	movi	r6,10
81114024:	000f883a 	mov	r7,zero
81114028:	111dbdc0 	call	8111dbdc <__umoddi3>
8111402c:	10800c04 	addi	r2,r2,48
81114030:	843fffc4 	addi	r16,r16,-1
81114034:	9809883a 	mov	r4,r19
81114038:	880b883a 	mov	r5,r17
8111403c:	80800005 	stb	r2,0(r16)
81114040:	01800284 	movi	r6,10
81114044:	000f883a 	mov	r7,zero
81114048:	111d6640 	call	8111d664 <__udivdi3>
8111404c:	1027883a 	mov	r19,r2
81114050:	10c4b03a 	or	r2,r2,r3
81114054:	1823883a 	mov	r17,r3
81114058:	103fef1e 	bne	r2,zero,81114018 <__reset+0xfb0f4018>
8111405c:	d8c02817 	ldw	r3,160(sp)
81114060:	dc402a17 	ldw	r17,168(sp)
81114064:	b011883a 	mov	r8,r22
81114068:	1c07c83a 	sub	r3,r3,r16
8111406c:	d8c02e15 	stw	r3,184(sp)
81114070:	00005906 	br	811141d8 <___vfprintf_internal_r+0x71c>
81114074:	18c03fcc 	andi	r3,r3,255
81114078:	1806fa1e 	bne	r3,zero,81115c64 <___vfprintf_internal_r+0x21a8>
8111407c:	9080020c 	andi	r2,r18,8
81114080:	10048a26 	beq	r2,zero,811152ac <___vfprintf_internal_r+0x17f0>
81114084:	d8c02d17 	ldw	r3,180(sp)
81114088:	d9002d17 	ldw	r4,180(sp)
8111408c:	d9402d17 	ldw	r5,180(sp)
81114090:	18c00017 	ldw	r3,0(r3)
81114094:	21000117 	ldw	r4,4(r4)
81114098:	29400204 	addi	r5,r5,8
8111409c:	d8c03615 	stw	r3,216(sp)
811140a0:	d9003815 	stw	r4,224(sp)
811140a4:	d9402d15 	stw	r5,180(sp)
811140a8:	d9003617 	ldw	r4,216(sp)
811140ac:	d9403817 	ldw	r5,224(sp)
811140b0:	da003d15 	stw	r8,244(sp)
811140b4:	04000044 	movi	r16,1
811140b8:	111a3180 	call	8111a318 <__fpclassifyd>
811140bc:	da003d17 	ldw	r8,244(sp)
811140c0:	14041f1e 	bne	r2,r16,81115140 <___vfprintf_internal_r+0x1684>
811140c4:	d9003617 	ldw	r4,216(sp)
811140c8:	d9403817 	ldw	r5,224(sp)
811140cc:	000d883a 	mov	r6,zero
811140d0:	000f883a 	mov	r7,zero
811140d4:	111f5c00 	call	8111f5c0 <__ledf2>
811140d8:	da003d17 	ldw	r8,244(sp)
811140dc:	1005be16 	blt	r2,zero,811157d8 <___vfprintf_internal_r+0x1d1c>
811140e0:	df002783 	ldbu	fp,158(sp)
811140e4:	008011c4 	movi	r2,71
811140e8:	1445330e 	bge	r2,r17,811155b8 <___vfprintf_internal_r+0x1afc>
811140ec:	042044b4 	movhi	r16,33042
811140f0:	841aaa04 	addi	r16,r16,27304
811140f4:	00c000c4 	movi	r3,3
811140f8:	00bfdfc4 	movi	r2,-129
811140fc:	d8c02a15 	stw	r3,168(sp)
81114100:	90a4703a 	and	r18,r18,r2
81114104:	d8c02e15 	stw	r3,184(sp)
81114108:	d8002915 	stw	zero,164(sp)
8111410c:	d8003215 	stw	zero,200(sp)
81114110:	00003706 	br	811141f0 <___vfprintf_internal_r+0x734>
81114114:	94800214 	ori	r18,r18,8
81114118:	ac400007 	ldb	r17,0(r21)
8111411c:	003ec806 	br	81113c40 <__reset+0xfb0f3c40>
81114120:	18c03fcc 	andi	r3,r3,255
81114124:	1806db1e 	bne	r3,zero,81115c94 <___vfprintf_internal_r+0x21d8>
81114128:	94800414 	ori	r18,r18,16
8111412c:	9080080c 	andi	r2,r18,32
81114130:	1002d826 	beq	r2,zero,81114c94 <___vfprintf_internal_r+0x11d8>
81114134:	d9402d17 	ldw	r5,180(sp)
81114138:	d8c02917 	ldw	r3,164(sp)
8111413c:	d8002785 	stb	zero,158(sp)
81114140:	28800204 	addi	r2,r5,8
81114144:	2cc00017 	ldw	r19,0(r5)
81114148:	2d800117 	ldw	r22,4(r5)
8111414c:	18048f16 	blt	r3,zero,8111538c <___vfprintf_internal_r+0x18d0>
81114150:	013fdfc4 	movi	r4,-129
81114154:	9d86b03a 	or	r3,r19,r22
81114158:	d8802d15 	stw	r2,180(sp)
8111415c:	9124703a 	and	r18,r18,r4
81114160:	1802d91e 	bne	r3,zero,81114cc8 <___vfprintf_internal_r+0x120c>
81114164:	d8c02917 	ldw	r3,164(sp)
81114168:	0039883a 	mov	fp,zero
8111416c:	1805c326 	beq	r3,zero,8111587c <___vfprintf_internal_r+0x1dc0>
81114170:	0027883a 	mov	r19,zero
81114174:	002d883a 	mov	r22,zero
81114178:	dc001e04 	addi	r16,sp,120
8111417c:	9806d0fa 	srli	r3,r19,3
81114180:	b008977a 	slli	r4,r22,29
81114184:	b02cd0fa 	srli	r22,r22,3
81114188:	9cc001cc 	andi	r19,r19,7
8111418c:	98800c04 	addi	r2,r19,48
81114190:	843fffc4 	addi	r16,r16,-1
81114194:	20e6b03a 	or	r19,r4,r3
81114198:	80800005 	stb	r2,0(r16)
8111419c:	9d86b03a 	or	r3,r19,r22
811141a0:	183ff61e 	bne	r3,zero,8111417c <__reset+0xfb0f417c>
811141a4:	90c0004c 	andi	r3,r18,1
811141a8:	18013b26 	beq	r3,zero,81114698 <___vfprintf_internal_r+0xbdc>
811141ac:	10803fcc 	andi	r2,r2,255
811141b0:	1080201c 	xori	r2,r2,128
811141b4:	10bfe004 	addi	r2,r2,-128
811141b8:	00c00c04 	movi	r3,48
811141bc:	10c13626 	beq	r2,r3,81114698 <___vfprintf_internal_r+0xbdc>
811141c0:	80ffffc5 	stb	r3,-1(r16)
811141c4:	d8c02817 	ldw	r3,160(sp)
811141c8:	80bfffc4 	addi	r2,r16,-1
811141cc:	1021883a 	mov	r16,r2
811141d0:	1887c83a 	sub	r3,r3,r2
811141d4:	d8c02e15 	stw	r3,184(sp)
811141d8:	d8802e17 	ldw	r2,184(sp)
811141dc:	d9002917 	ldw	r4,164(sp)
811141e0:	1100010e 	bge	r2,r4,811141e8 <___vfprintf_internal_r+0x72c>
811141e4:	2005883a 	mov	r2,r4
811141e8:	d8802a15 	stw	r2,168(sp)
811141ec:	d8003215 	stw	zero,200(sp)
811141f0:	e7003fcc 	andi	fp,fp,255
811141f4:	e700201c 	xori	fp,fp,128
811141f8:	e73fe004 	addi	fp,fp,-128
811141fc:	e0000326 	beq	fp,zero,8111420c <___vfprintf_internal_r+0x750>
81114200:	d8c02a17 	ldw	r3,168(sp)
81114204:	18c00044 	addi	r3,r3,1
81114208:	d8c02a15 	stw	r3,168(sp)
8111420c:	90c0008c 	andi	r3,r18,2
81114210:	d8c02b15 	stw	r3,172(sp)
81114214:	18000326 	beq	r3,zero,81114224 <___vfprintf_internal_r+0x768>
81114218:	d8c02a17 	ldw	r3,168(sp)
8111421c:	18c00084 	addi	r3,r3,2
81114220:	d8c02a15 	stw	r3,168(sp)
81114224:	90c0210c 	andi	r3,r18,132
81114228:	d8c03015 	stw	r3,192(sp)
8111422c:	1801a31e 	bne	r3,zero,811148bc <___vfprintf_internal_r+0xe00>
81114230:	d9003117 	ldw	r4,196(sp)
81114234:	d8c02a17 	ldw	r3,168(sp)
81114238:	20e7c83a 	sub	r19,r4,r3
8111423c:	04c19f0e 	bge	zero,r19,811148bc <___vfprintf_internal_r+0xe00>
81114240:	02400404 	movi	r9,16
81114244:	d8c02017 	ldw	r3,128(sp)
81114248:	d8801f17 	ldw	r2,124(sp)
8111424c:	4cc50d0e 	bge	r9,r19,81115684 <___vfprintf_internal_r+0x1bc8>
81114250:	016044b4 	movhi	r5,33042
81114254:	295ac584 	addi	r5,r5,27414
81114258:	dc403b15 	stw	r17,236(sp)
8111425c:	d9403515 	stw	r5,212(sp)
81114260:	9823883a 	mov	r17,r19
81114264:	482d883a 	mov	r22,r9
81114268:	9027883a 	mov	r19,r18
8111426c:	070001c4 	movi	fp,7
81114270:	8025883a 	mov	r18,r16
81114274:	dc002c17 	ldw	r16,176(sp)
81114278:	00000306 	br	81114288 <___vfprintf_internal_r+0x7cc>
8111427c:	8c7ffc04 	addi	r17,r17,-16
81114280:	42000204 	addi	r8,r8,8
81114284:	b440130e 	bge	r22,r17,811142d4 <___vfprintf_internal_r+0x818>
81114288:	012044b4 	movhi	r4,33042
8111428c:	18c00404 	addi	r3,r3,16
81114290:	10800044 	addi	r2,r2,1
81114294:	211ac584 	addi	r4,r4,27414
81114298:	41000015 	stw	r4,0(r8)
8111429c:	45800115 	stw	r22,4(r8)
811142a0:	d8c02015 	stw	r3,128(sp)
811142a4:	d8801f15 	stw	r2,124(sp)
811142a8:	e0bff40e 	bge	fp,r2,8111427c <__reset+0xfb0f427c>
811142ac:	d9801e04 	addi	r6,sp,120
811142b0:	b80b883a 	mov	r5,r23
811142b4:	8009883a 	mov	r4,r16
811142b8:	111ba080 	call	8111ba08 <__sprint_r>
811142bc:	103f011e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
811142c0:	8c7ffc04 	addi	r17,r17,-16
811142c4:	d8c02017 	ldw	r3,128(sp)
811142c8:	d8801f17 	ldw	r2,124(sp)
811142cc:	da000404 	addi	r8,sp,16
811142d0:	b47fed16 	blt	r22,r17,81114288 <__reset+0xfb0f4288>
811142d4:	9021883a 	mov	r16,r18
811142d8:	9825883a 	mov	r18,r19
811142dc:	8827883a 	mov	r19,r17
811142e0:	dc403b17 	ldw	r17,236(sp)
811142e4:	d9403517 	ldw	r5,212(sp)
811142e8:	98c7883a 	add	r3,r19,r3
811142ec:	10800044 	addi	r2,r2,1
811142f0:	41400015 	stw	r5,0(r8)
811142f4:	44c00115 	stw	r19,4(r8)
811142f8:	d8c02015 	stw	r3,128(sp)
811142fc:	d8801f15 	stw	r2,124(sp)
81114300:	010001c4 	movi	r4,7
81114304:	2082a316 	blt	r4,r2,81114d94 <___vfprintf_internal_r+0x12d8>
81114308:	df002787 	ldb	fp,158(sp)
8111430c:	42000204 	addi	r8,r8,8
81114310:	e0000c26 	beq	fp,zero,81114344 <___vfprintf_internal_r+0x888>
81114314:	d8801f17 	ldw	r2,124(sp)
81114318:	d9002784 	addi	r4,sp,158
8111431c:	18c00044 	addi	r3,r3,1
81114320:	10800044 	addi	r2,r2,1
81114324:	41000015 	stw	r4,0(r8)
81114328:	01000044 	movi	r4,1
8111432c:	41000115 	stw	r4,4(r8)
81114330:	d8c02015 	stw	r3,128(sp)
81114334:	d8801f15 	stw	r2,124(sp)
81114338:	010001c4 	movi	r4,7
8111433c:	20823c16 	blt	r4,r2,81114c30 <___vfprintf_internal_r+0x1174>
81114340:	42000204 	addi	r8,r8,8
81114344:	d8802b17 	ldw	r2,172(sp)
81114348:	10000c26 	beq	r2,zero,8111437c <___vfprintf_internal_r+0x8c0>
8111434c:	d8801f17 	ldw	r2,124(sp)
81114350:	d9002704 	addi	r4,sp,156
81114354:	18c00084 	addi	r3,r3,2
81114358:	10800044 	addi	r2,r2,1
8111435c:	41000015 	stw	r4,0(r8)
81114360:	01000084 	movi	r4,2
81114364:	41000115 	stw	r4,4(r8)
81114368:	d8c02015 	stw	r3,128(sp)
8111436c:	d8801f15 	stw	r2,124(sp)
81114370:	010001c4 	movi	r4,7
81114374:	20823616 	blt	r4,r2,81114c50 <___vfprintf_internal_r+0x1194>
81114378:	42000204 	addi	r8,r8,8
8111437c:	d9003017 	ldw	r4,192(sp)
81114380:	00802004 	movi	r2,128
81114384:	20819926 	beq	r4,r2,811149ec <___vfprintf_internal_r+0xf30>
81114388:	d9402917 	ldw	r5,164(sp)
8111438c:	d8802e17 	ldw	r2,184(sp)
81114390:	28adc83a 	sub	r22,r5,r2
81114394:	0580310e 	bge	zero,r22,8111445c <___vfprintf_internal_r+0x9a0>
81114398:	07000404 	movi	fp,16
8111439c:	d8801f17 	ldw	r2,124(sp)
811143a0:	e584140e 	bge	fp,r22,811153f4 <___vfprintf_internal_r+0x1938>
811143a4:	016044b4 	movhi	r5,33042
811143a8:	295ac184 	addi	r5,r5,27398
811143ac:	dc402915 	stw	r17,164(sp)
811143b0:	d9402b15 	stw	r5,172(sp)
811143b4:	b023883a 	mov	r17,r22
811143b8:	04c001c4 	movi	r19,7
811143bc:	a82d883a 	mov	r22,r21
811143c0:	902b883a 	mov	r21,r18
811143c4:	8025883a 	mov	r18,r16
811143c8:	dc002c17 	ldw	r16,176(sp)
811143cc:	00000306 	br	811143dc <___vfprintf_internal_r+0x920>
811143d0:	8c7ffc04 	addi	r17,r17,-16
811143d4:	42000204 	addi	r8,r8,8
811143d8:	e440110e 	bge	fp,r17,81114420 <___vfprintf_internal_r+0x964>
811143dc:	18c00404 	addi	r3,r3,16
811143e0:	10800044 	addi	r2,r2,1
811143e4:	45000015 	stw	r20,0(r8)
811143e8:	47000115 	stw	fp,4(r8)
811143ec:	d8c02015 	stw	r3,128(sp)
811143f0:	d8801f15 	stw	r2,124(sp)
811143f4:	98bff60e 	bge	r19,r2,811143d0 <__reset+0xfb0f43d0>
811143f8:	d9801e04 	addi	r6,sp,120
811143fc:	b80b883a 	mov	r5,r23
81114400:	8009883a 	mov	r4,r16
81114404:	111ba080 	call	8111ba08 <__sprint_r>
81114408:	103eae1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
8111440c:	8c7ffc04 	addi	r17,r17,-16
81114410:	d8c02017 	ldw	r3,128(sp)
81114414:	d8801f17 	ldw	r2,124(sp)
81114418:	da000404 	addi	r8,sp,16
8111441c:	e47fef16 	blt	fp,r17,811143dc <__reset+0xfb0f43dc>
81114420:	9021883a 	mov	r16,r18
81114424:	a825883a 	mov	r18,r21
81114428:	b02b883a 	mov	r21,r22
8111442c:	882d883a 	mov	r22,r17
81114430:	dc402917 	ldw	r17,164(sp)
81114434:	d9002b17 	ldw	r4,172(sp)
81114438:	1d87883a 	add	r3,r3,r22
8111443c:	10800044 	addi	r2,r2,1
81114440:	41000015 	stw	r4,0(r8)
81114444:	45800115 	stw	r22,4(r8)
81114448:	d8c02015 	stw	r3,128(sp)
8111444c:	d8801f15 	stw	r2,124(sp)
81114450:	010001c4 	movi	r4,7
81114454:	2081ee16 	blt	r4,r2,81114c10 <___vfprintf_internal_r+0x1154>
81114458:	42000204 	addi	r8,r8,8
8111445c:	9080400c 	andi	r2,r18,256
81114460:	1001181e 	bne	r2,zero,811148c4 <___vfprintf_internal_r+0xe08>
81114464:	d9402e17 	ldw	r5,184(sp)
81114468:	d8801f17 	ldw	r2,124(sp)
8111446c:	44000015 	stw	r16,0(r8)
81114470:	1947883a 	add	r3,r3,r5
81114474:	10800044 	addi	r2,r2,1
81114478:	41400115 	stw	r5,4(r8)
8111447c:	d8c02015 	stw	r3,128(sp)
81114480:	d8801f15 	stw	r2,124(sp)
81114484:	010001c4 	movi	r4,7
81114488:	2081d316 	blt	r4,r2,81114bd8 <___vfprintf_internal_r+0x111c>
8111448c:	42000204 	addi	r8,r8,8
81114490:	9480010c 	andi	r18,r18,4
81114494:	90003226 	beq	r18,zero,81114560 <___vfprintf_internal_r+0xaa4>
81114498:	d9403117 	ldw	r5,196(sp)
8111449c:	d8802a17 	ldw	r2,168(sp)
811144a0:	28a1c83a 	sub	r16,r5,r2
811144a4:	04002e0e 	bge	zero,r16,81114560 <___vfprintf_internal_r+0xaa4>
811144a8:	04400404 	movi	r17,16
811144ac:	d8801f17 	ldw	r2,124(sp)
811144b0:	8c04a20e 	bge	r17,r16,8111573c <___vfprintf_internal_r+0x1c80>
811144b4:	016044b4 	movhi	r5,33042
811144b8:	295ac584 	addi	r5,r5,27414
811144bc:	d9403515 	stw	r5,212(sp)
811144c0:	048001c4 	movi	r18,7
811144c4:	dcc02c17 	ldw	r19,176(sp)
811144c8:	00000306 	br	811144d8 <___vfprintf_internal_r+0xa1c>
811144cc:	843ffc04 	addi	r16,r16,-16
811144d0:	42000204 	addi	r8,r8,8
811144d4:	8c00130e 	bge	r17,r16,81114524 <___vfprintf_internal_r+0xa68>
811144d8:	012044b4 	movhi	r4,33042
811144dc:	18c00404 	addi	r3,r3,16
811144e0:	10800044 	addi	r2,r2,1
811144e4:	211ac584 	addi	r4,r4,27414
811144e8:	41000015 	stw	r4,0(r8)
811144ec:	44400115 	stw	r17,4(r8)
811144f0:	d8c02015 	stw	r3,128(sp)
811144f4:	d8801f15 	stw	r2,124(sp)
811144f8:	90bff40e 	bge	r18,r2,811144cc <__reset+0xfb0f44cc>
811144fc:	d9801e04 	addi	r6,sp,120
81114500:	b80b883a 	mov	r5,r23
81114504:	9809883a 	mov	r4,r19
81114508:	111ba080 	call	8111ba08 <__sprint_r>
8111450c:	103e6d1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81114510:	843ffc04 	addi	r16,r16,-16
81114514:	d8c02017 	ldw	r3,128(sp)
81114518:	d8801f17 	ldw	r2,124(sp)
8111451c:	da000404 	addi	r8,sp,16
81114520:	8c3fed16 	blt	r17,r16,811144d8 <__reset+0xfb0f44d8>
81114524:	d9403517 	ldw	r5,212(sp)
81114528:	1c07883a 	add	r3,r3,r16
8111452c:	10800044 	addi	r2,r2,1
81114530:	41400015 	stw	r5,0(r8)
81114534:	44000115 	stw	r16,4(r8)
81114538:	d8c02015 	stw	r3,128(sp)
8111453c:	d8801f15 	stw	r2,124(sp)
81114540:	010001c4 	movi	r4,7
81114544:	2080060e 	bge	r4,r2,81114560 <___vfprintf_internal_r+0xaa4>
81114548:	d9002c17 	ldw	r4,176(sp)
8111454c:	d9801e04 	addi	r6,sp,120
81114550:	b80b883a 	mov	r5,r23
81114554:	111ba080 	call	8111ba08 <__sprint_r>
81114558:	103e5a1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
8111455c:	d8c02017 	ldw	r3,128(sp)
81114560:	d8803117 	ldw	r2,196(sp)
81114564:	d9002a17 	ldw	r4,168(sp)
81114568:	1100010e 	bge	r2,r4,81114570 <___vfprintf_internal_r+0xab4>
8111456c:	2005883a 	mov	r2,r4
81114570:	d9402f17 	ldw	r5,188(sp)
81114574:	288b883a 	add	r5,r5,r2
81114578:	d9402f15 	stw	r5,188(sp)
8111457c:	18019e1e 	bne	r3,zero,81114bf8 <___vfprintf_internal_r+0x113c>
81114580:	a8800007 	ldb	r2,0(r21)
81114584:	d8001f15 	stw	zero,124(sp)
81114588:	da000404 	addi	r8,sp,16
8111458c:	103d851e 	bne	r2,zero,81113ba4 <__reset+0xfb0f3ba4>
81114590:	a821883a 	mov	r16,r21
81114594:	003d9b06 	br	81113c04 <__reset+0xfb0f3c04>
81114598:	18c03fcc 	andi	r3,r3,255
8111459c:	1805c11e 	bne	r3,zero,81115ca4 <___vfprintf_internal_r+0x21e8>
811145a0:	94800414 	ori	r18,r18,16
811145a4:	9080080c 	andi	r2,r18,32
811145a8:	10020c26 	beq	r2,zero,81114ddc <___vfprintf_internal_r+0x1320>
811145ac:	d8802d17 	ldw	r2,180(sp)
811145b0:	d9002917 	ldw	r4,164(sp)
811145b4:	d8002785 	stb	zero,158(sp)
811145b8:	10c00204 	addi	r3,r2,8
811145bc:	14c00017 	ldw	r19,0(r2)
811145c0:	15800117 	ldw	r22,4(r2)
811145c4:	20040f16 	blt	r4,zero,81115604 <___vfprintf_internal_r+0x1b48>
811145c8:	013fdfc4 	movi	r4,-129
811145cc:	9d84b03a 	or	r2,r19,r22
811145d0:	d8c02d15 	stw	r3,180(sp)
811145d4:	9124703a 	and	r18,r18,r4
811145d8:	0039883a 	mov	fp,zero
811145dc:	103e891e 	bne	r2,zero,81114004 <__reset+0xfb0f4004>
811145e0:	d9002917 	ldw	r4,164(sp)
811145e4:	2002c11e 	bne	r4,zero,811150ec <___vfprintf_internal_r+0x1630>
811145e8:	d8002915 	stw	zero,164(sp)
811145ec:	d8002e15 	stw	zero,184(sp)
811145f0:	dc001e04 	addi	r16,sp,120
811145f4:	003ef806 	br	811141d8 <__reset+0xfb0f41d8>
811145f8:	18c03fcc 	andi	r3,r3,255
811145fc:	18059d1e 	bne	r3,zero,81115c74 <___vfprintf_internal_r+0x21b8>
81114600:	016044b4 	movhi	r5,33042
81114604:	295aad04 	addi	r5,r5,27316
81114608:	d9403915 	stw	r5,228(sp)
8111460c:	9080080c 	andi	r2,r18,32
81114610:	10005226 	beq	r2,zero,8111475c <___vfprintf_internal_r+0xca0>
81114614:	d8802d17 	ldw	r2,180(sp)
81114618:	14c00017 	ldw	r19,0(r2)
8111461c:	15800117 	ldw	r22,4(r2)
81114620:	10800204 	addi	r2,r2,8
81114624:	d8802d15 	stw	r2,180(sp)
81114628:	9080004c 	andi	r2,r18,1
8111462c:	10019026 	beq	r2,zero,81114c70 <___vfprintf_internal_r+0x11b4>
81114630:	9d84b03a 	or	r2,r19,r22
81114634:	10036926 	beq	r2,zero,811153dc <___vfprintf_internal_r+0x1920>
81114638:	d8c02917 	ldw	r3,164(sp)
8111463c:	00800c04 	movi	r2,48
81114640:	d8802705 	stb	r2,156(sp)
81114644:	dc402745 	stb	r17,157(sp)
81114648:	d8002785 	stb	zero,158(sp)
8111464c:	90800094 	ori	r2,r18,2
81114650:	18045d16 	blt	r3,zero,811157c8 <___vfprintf_internal_r+0x1d0c>
81114654:	00bfdfc4 	movi	r2,-129
81114658:	90a4703a 	and	r18,r18,r2
8111465c:	94800094 	ori	r18,r18,2
81114660:	0039883a 	mov	fp,zero
81114664:	d9003917 	ldw	r4,228(sp)
81114668:	dc001e04 	addi	r16,sp,120
8111466c:	988003cc 	andi	r2,r19,15
81114670:	b006973a 	slli	r3,r22,28
81114674:	2085883a 	add	r2,r4,r2
81114678:	9826d13a 	srli	r19,r19,4
8111467c:	10800003 	ldbu	r2,0(r2)
81114680:	b02cd13a 	srli	r22,r22,4
81114684:	843fffc4 	addi	r16,r16,-1
81114688:	1ce6b03a 	or	r19,r3,r19
8111468c:	80800005 	stb	r2,0(r16)
81114690:	9d84b03a 	or	r2,r19,r22
81114694:	103ff51e 	bne	r2,zero,8111466c <__reset+0xfb0f466c>
81114698:	d8c02817 	ldw	r3,160(sp)
8111469c:	1c07c83a 	sub	r3,r3,r16
811146a0:	d8c02e15 	stw	r3,184(sp)
811146a4:	003ecc06 	br	811141d8 <__reset+0xfb0f41d8>
811146a8:	18c03fcc 	andi	r3,r3,255
811146ac:	183e9f26 	beq	r3,zero,8111412c <__reset+0xfb0f412c>
811146b0:	d9c02785 	stb	r7,158(sp)
811146b4:	003e9d06 	br	8111412c <__reset+0xfb0f412c>
811146b8:	00c00044 	movi	r3,1
811146bc:	01c00ac4 	movi	r7,43
811146c0:	ac400007 	ldb	r17,0(r21)
811146c4:	003d5e06 	br	81113c40 <__reset+0xfb0f3c40>
811146c8:	94800814 	ori	r18,r18,32
811146cc:	ac400007 	ldb	r17,0(r21)
811146d0:	003d5b06 	br	81113c40 <__reset+0xfb0f3c40>
811146d4:	d8c02d17 	ldw	r3,180(sp)
811146d8:	d8002785 	stb	zero,158(sp)
811146dc:	1c000017 	ldw	r16,0(r3)
811146e0:	1cc00104 	addi	r19,r3,4
811146e4:	80041926 	beq	r16,zero,8111574c <___vfprintf_internal_r+0x1c90>
811146e8:	d9002917 	ldw	r4,164(sp)
811146ec:	2003d016 	blt	r4,zero,81115630 <___vfprintf_internal_r+0x1b74>
811146f0:	200d883a 	mov	r6,r4
811146f4:	000b883a 	mov	r5,zero
811146f8:	8009883a 	mov	r4,r16
811146fc:	da003d15 	stw	r8,244(sp)
81114700:	1118b180 	call	81118b18 <memchr>
81114704:	da003d17 	ldw	r8,244(sp)
81114708:	10045426 	beq	r2,zero,8111585c <___vfprintf_internal_r+0x1da0>
8111470c:	1405c83a 	sub	r2,r2,r16
81114710:	d8802e15 	stw	r2,184(sp)
81114714:	1003cc16 	blt	r2,zero,81115648 <___vfprintf_internal_r+0x1b8c>
81114718:	df002783 	ldbu	fp,158(sp)
8111471c:	d8802a15 	stw	r2,168(sp)
81114720:	dcc02d15 	stw	r19,180(sp)
81114724:	d8002915 	stw	zero,164(sp)
81114728:	d8003215 	stw	zero,200(sp)
8111472c:	003eb006 	br	811141f0 <__reset+0xfb0f41f0>
81114730:	18c03fcc 	andi	r3,r3,255
81114734:	183f9b26 	beq	r3,zero,811145a4 <__reset+0xfb0f45a4>
81114738:	d9c02785 	stb	r7,158(sp)
8111473c:	003f9906 	br	811145a4 <__reset+0xfb0f45a4>
81114740:	18c03fcc 	andi	r3,r3,255
81114744:	1805551e 	bne	r3,zero,81115c9c <___vfprintf_internal_r+0x21e0>
81114748:	016044b4 	movhi	r5,33042
8111474c:	295ab204 	addi	r5,r5,27336
81114750:	d9403915 	stw	r5,228(sp)
81114754:	9080080c 	andi	r2,r18,32
81114758:	103fae1e 	bne	r2,zero,81114614 <__reset+0xfb0f4614>
8111475c:	9080040c 	andi	r2,r18,16
81114760:	1002de26 	beq	r2,zero,811152dc <___vfprintf_internal_r+0x1820>
81114764:	d8c02d17 	ldw	r3,180(sp)
81114768:	002d883a 	mov	r22,zero
8111476c:	1cc00017 	ldw	r19,0(r3)
81114770:	18c00104 	addi	r3,r3,4
81114774:	d8c02d15 	stw	r3,180(sp)
81114778:	003fab06 	br	81114628 <__reset+0xfb0f4628>
8111477c:	38803fcc 	andi	r2,r7,255
81114780:	1080201c 	xori	r2,r2,128
81114784:	10bfe004 	addi	r2,r2,-128
81114788:	1002d21e 	bne	r2,zero,811152d4 <___vfprintf_internal_r+0x1818>
8111478c:	00c00044 	movi	r3,1
81114790:	01c00804 	movi	r7,32
81114794:	ac400007 	ldb	r17,0(r21)
81114798:	003d2906 	br	81113c40 <__reset+0xfb0f3c40>
8111479c:	94800054 	ori	r18,r18,1
811147a0:	ac400007 	ldb	r17,0(r21)
811147a4:	003d2606 	br	81113c40 <__reset+0xfb0f3c40>
811147a8:	18c03fcc 	andi	r3,r3,255
811147ac:	183e0526 	beq	r3,zero,81113fc4 <__reset+0xfb0f3fc4>
811147b0:	d9c02785 	stb	r7,158(sp)
811147b4:	003e0306 	br	81113fc4 <__reset+0xfb0f3fc4>
811147b8:	94801014 	ori	r18,r18,64
811147bc:	ac400007 	ldb	r17,0(r21)
811147c0:	003d1f06 	br	81113c40 <__reset+0xfb0f3c40>
811147c4:	ac400007 	ldb	r17,0(r21)
811147c8:	8a438726 	beq	r17,r9,811155e8 <___vfprintf_internal_r+0x1b2c>
811147cc:	94800414 	ori	r18,r18,16
811147d0:	003d1b06 	br	81113c40 <__reset+0xfb0f3c40>
811147d4:	18c03fcc 	andi	r3,r3,255
811147d8:	1805341e 	bne	r3,zero,81115cac <___vfprintf_internal_r+0x21f0>
811147dc:	9080080c 	andi	r2,r18,32
811147e0:	1002cd26 	beq	r2,zero,81115318 <___vfprintf_internal_r+0x185c>
811147e4:	d9402d17 	ldw	r5,180(sp)
811147e8:	d9002f17 	ldw	r4,188(sp)
811147ec:	28800017 	ldw	r2,0(r5)
811147f0:	2007d7fa 	srai	r3,r4,31
811147f4:	29400104 	addi	r5,r5,4
811147f8:	d9402d15 	stw	r5,180(sp)
811147fc:	11000015 	stw	r4,0(r2)
81114800:	10c00115 	stw	r3,4(r2)
81114804:	003ce506 	br	81113b9c <__reset+0xfb0f3b9c>
81114808:	d8c02d17 	ldw	r3,180(sp)
8111480c:	d9002d17 	ldw	r4,180(sp)
81114810:	d8002785 	stb	zero,158(sp)
81114814:	18800017 	ldw	r2,0(r3)
81114818:	21000104 	addi	r4,r4,4
8111481c:	00c00044 	movi	r3,1
81114820:	d8c02a15 	stw	r3,168(sp)
81114824:	d8801405 	stb	r2,80(sp)
81114828:	d9002d15 	stw	r4,180(sp)
8111482c:	d8c02e15 	stw	r3,184(sp)
81114830:	d8002915 	stw	zero,164(sp)
81114834:	d8003215 	stw	zero,200(sp)
81114838:	dc001404 	addi	r16,sp,80
8111483c:	0039883a 	mov	fp,zero
81114840:	003e7206 	br	8111420c <__reset+0xfb0f420c>
81114844:	012044b4 	movhi	r4,33042
81114848:	211ab204 	addi	r4,r4,27336
8111484c:	0039883a 	mov	fp,zero
81114850:	d9003915 	stw	r4,228(sp)
81114854:	04401e04 	movi	r17,120
81114858:	003f8206 	br	81114664 <__reset+0xfb0f4664>
8111485c:	18c03fcc 	andi	r3,r3,255
81114860:	1805061e 	bne	r3,zero,81115c7c <___vfprintf_internal_r+0x21c0>
81114864:	883d9126 	beq	r17,zero,81113eac <__reset+0xfb0f3eac>
81114868:	00c00044 	movi	r3,1
8111486c:	d8c02a15 	stw	r3,168(sp)
81114870:	dc401405 	stb	r17,80(sp)
81114874:	d8002785 	stb	zero,158(sp)
81114878:	003fec06 	br	8111482c <__reset+0xfb0f482c>
8111487c:	016044b4 	movhi	r5,33042
81114880:	295ab204 	addi	r5,r5,27336
81114884:	d9403915 	stw	r5,228(sp)
81114888:	d8c02d15 	stw	r3,180(sp)
8111488c:	1025883a 	mov	r18,r2
81114890:	04401e04 	movi	r17,120
81114894:	9d84b03a 	or	r2,r19,r22
81114898:	1000fc1e 	bne	r2,zero,81114c8c <___vfprintf_internal_r+0x11d0>
8111489c:	0039883a 	mov	fp,zero
811148a0:	00800084 	movi	r2,2
811148a4:	10803fcc 	andi	r2,r2,255
811148a8:	00c00044 	movi	r3,1
811148ac:	10c20f26 	beq	r2,r3,811150ec <___vfprintf_internal_r+0x1630>
811148b0:	00c00084 	movi	r3,2
811148b4:	10fd6326 	beq	r2,r3,81113e44 <__reset+0xfb0f3e44>
811148b8:	003e2d06 	br	81114170 <__reset+0xfb0f4170>
811148bc:	d8c02017 	ldw	r3,128(sp)
811148c0:	003e9306 	br	81114310 <__reset+0xfb0f4310>
811148c4:	00801944 	movi	r2,101
811148c8:	14407e0e 	bge	r2,r17,81114ac4 <___vfprintf_internal_r+0x1008>
811148cc:	d9003617 	ldw	r4,216(sp)
811148d0:	d9403817 	ldw	r5,224(sp)
811148d4:	000d883a 	mov	r6,zero
811148d8:	000f883a 	mov	r7,zero
811148dc:	d8c03c15 	stw	r3,240(sp)
811148e0:	da003d15 	stw	r8,244(sp)
811148e4:	111f45c0 	call	8111f45c <__eqdf2>
811148e8:	d8c03c17 	ldw	r3,240(sp)
811148ec:	da003d17 	ldw	r8,244(sp)
811148f0:	1000f71e 	bne	r2,zero,81114cd0 <___vfprintf_internal_r+0x1214>
811148f4:	d8801f17 	ldw	r2,124(sp)
811148f8:	012044b4 	movhi	r4,33042
811148fc:	211ab904 	addi	r4,r4,27364
81114900:	18c00044 	addi	r3,r3,1
81114904:	10800044 	addi	r2,r2,1
81114908:	41000015 	stw	r4,0(r8)
8111490c:	01000044 	movi	r4,1
81114910:	41000115 	stw	r4,4(r8)
81114914:	d8c02015 	stw	r3,128(sp)
81114918:	d8801f15 	stw	r2,124(sp)
8111491c:	010001c4 	movi	r4,7
81114920:	2082b816 	blt	r4,r2,81115404 <___vfprintf_internal_r+0x1948>
81114924:	42000204 	addi	r8,r8,8
81114928:	d8802617 	ldw	r2,152(sp)
8111492c:	d9403317 	ldw	r5,204(sp)
81114930:	11400216 	blt	r2,r5,8111493c <___vfprintf_internal_r+0xe80>
81114934:	9080004c 	andi	r2,r18,1
81114938:	103ed526 	beq	r2,zero,81114490 <__reset+0xfb0f4490>
8111493c:	d8803717 	ldw	r2,220(sp)
81114940:	d9003417 	ldw	r4,208(sp)
81114944:	d9403717 	ldw	r5,220(sp)
81114948:	1887883a 	add	r3,r3,r2
8111494c:	d8801f17 	ldw	r2,124(sp)
81114950:	41000015 	stw	r4,0(r8)
81114954:	41400115 	stw	r5,4(r8)
81114958:	10800044 	addi	r2,r2,1
8111495c:	d8c02015 	stw	r3,128(sp)
81114960:	d8801f15 	stw	r2,124(sp)
81114964:	010001c4 	movi	r4,7
81114968:	20832916 	blt	r4,r2,81115610 <___vfprintf_internal_r+0x1b54>
8111496c:	42000204 	addi	r8,r8,8
81114970:	d8803317 	ldw	r2,204(sp)
81114974:	143fffc4 	addi	r16,r2,-1
81114978:	043ec50e 	bge	zero,r16,81114490 <__reset+0xfb0f4490>
8111497c:	04400404 	movi	r17,16
81114980:	d8801f17 	ldw	r2,124(sp)
81114984:	8c00880e 	bge	r17,r16,81114ba8 <___vfprintf_internal_r+0x10ec>
81114988:	016044b4 	movhi	r5,33042
8111498c:	295ac184 	addi	r5,r5,27398
81114990:	d9402b15 	stw	r5,172(sp)
81114994:	058001c4 	movi	r22,7
81114998:	dcc02c17 	ldw	r19,176(sp)
8111499c:	00000306 	br	811149ac <___vfprintf_internal_r+0xef0>
811149a0:	42000204 	addi	r8,r8,8
811149a4:	843ffc04 	addi	r16,r16,-16
811149a8:	8c00820e 	bge	r17,r16,81114bb4 <___vfprintf_internal_r+0x10f8>
811149ac:	18c00404 	addi	r3,r3,16
811149b0:	10800044 	addi	r2,r2,1
811149b4:	45000015 	stw	r20,0(r8)
811149b8:	44400115 	stw	r17,4(r8)
811149bc:	d8c02015 	stw	r3,128(sp)
811149c0:	d8801f15 	stw	r2,124(sp)
811149c4:	b0bff60e 	bge	r22,r2,811149a0 <__reset+0xfb0f49a0>
811149c8:	d9801e04 	addi	r6,sp,120
811149cc:	b80b883a 	mov	r5,r23
811149d0:	9809883a 	mov	r4,r19
811149d4:	111ba080 	call	8111ba08 <__sprint_r>
811149d8:	103d3a1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
811149dc:	d8c02017 	ldw	r3,128(sp)
811149e0:	d8801f17 	ldw	r2,124(sp)
811149e4:	da000404 	addi	r8,sp,16
811149e8:	003fee06 	br	811149a4 <__reset+0xfb0f49a4>
811149ec:	d9403117 	ldw	r5,196(sp)
811149f0:	d8802a17 	ldw	r2,168(sp)
811149f4:	28adc83a 	sub	r22,r5,r2
811149f8:	05be630e 	bge	zero,r22,81114388 <__reset+0xfb0f4388>
811149fc:	07000404 	movi	fp,16
81114a00:	d8801f17 	ldw	r2,124(sp)
81114a04:	e5838f0e 	bge	fp,r22,81115844 <___vfprintf_internal_r+0x1d88>
81114a08:	016044b4 	movhi	r5,33042
81114a0c:	295ac184 	addi	r5,r5,27398
81114a10:	dc403015 	stw	r17,192(sp)
81114a14:	d9402b15 	stw	r5,172(sp)
81114a18:	b023883a 	mov	r17,r22
81114a1c:	04c001c4 	movi	r19,7
81114a20:	a82d883a 	mov	r22,r21
81114a24:	902b883a 	mov	r21,r18
81114a28:	8025883a 	mov	r18,r16
81114a2c:	dc002c17 	ldw	r16,176(sp)
81114a30:	00000306 	br	81114a40 <___vfprintf_internal_r+0xf84>
81114a34:	8c7ffc04 	addi	r17,r17,-16
81114a38:	42000204 	addi	r8,r8,8
81114a3c:	e440110e 	bge	fp,r17,81114a84 <___vfprintf_internal_r+0xfc8>
81114a40:	18c00404 	addi	r3,r3,16
81114a44:	10800044 	addi	r2,r2,1
81114a48:	45000015 	stw	r20,0(r8)
81114a4c:	47000115 	stw	fp,4(r8)
81114a50:	d8c02015 	stw	r3,128(sp)
81114a54:	d8801f15 	stw	r2,124(sp)
81114a58:	98bff60e 	bge	r19,r2,81114a34 <__reset+0xfb0f4a34>
81114a5c:	d9801e04 	addi	r6,sp,120
81114a60:	b80b883a 	mov	r5,r23
81114a64:	8009883a 	mov	r4,r16
81114a68:	111ba080 	call	8111ba08 <__sprint_r>
81114a6c:	103d151e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81114a70:	8c7ffc04 	addi	r17,r17,-16
81114a74:	d8c02017 	ldw	r3,128(sp)
81114a78:	d8801f17 	ldw	r2,124(sp)
81114a7c:	da000404 	addi	r8,sp,16
81114a80:	e47fef16 	blt	fp,r17,81114a40 <__reset+0xfb0f4a40>
81114a84:	9021883a 	mov	r16,r18
81114a88:	a825883a 	mov	r18,r21
81114a8c:	b02b883a 	mov	r21,r22
81114a90:	882d883a 	mov	r22,r17
81114a94:	dc403017 	ldw	r17,192(sp)
81114a98:	d9002b17 	ldw	r4,172(sp)
81114a9c:	1d87883a 	add	r3,r3,r22
81114aa0:	10800044 	addi	r2,r2,1
81114aa4:	41000015 	stw	r4,0(r8)
81114aa8:	45800115 	stw	r22,4(r8)
81114aac:	d8c02015 	stw	r3,128(sp)
81114ab0:	d8801f15 	stw	r2,124(sp)
81114ab4:	010001c4 	movi	r4,7
81114ab8:	20818e16 	blt	r4,r2,811150f4 <___vfprintf_internal_r+0x1638>
81114abc:	42000204 	addi	r8,r8,8
81114ac0:	003e3106 	br	81114388 <__reset+0xfb0f4388>
81114ac4:	d9403317 	ldw	r5,204(sp)
81114ac8:	00800044 	movi	r2,1
81114acc:	18c00044 	addi	r3,r3,1
81114ad0:	1141530e 	bge	r2,r5,81115020 <___vfprintf_internal_r+0x1564>
81114ad4:	dc401f17 	ldw	r17,124(sp)
81114ad8:	00800044 	movi	r2,1
81114adc:	40800115 	stw	r2,4(r8)
81114ae0:	8c400044 	addi	r17,r17,1
81114ae4:	44000015 	stw	r16,0(r8)
81114ae8:	d8c02015 	stw	r3,128(sp)
81114aec:	dc401f15 	stw	r17,124(sp)
81114af0:	008001c4 	movi	r2,7
81114af4:	14416b16 	blt	r2,r17,811150a4 <___vfprintf_internal_r+0x15e8>
81114af8:	42000204 	addi	r8,r8,8
81114afc:	d8803717 	ldw	r2,220(sp)
81114b00:	d9003417 	ldw	r4,208(sp)
81114b04:	8c400044 	addi	r17,r17,1
81114b08:	10c7883a 	add	r3,r2,r3
81114b0c:	40800115 	stw	r2,4(r8)
81114b10:	41000015 	stw	r4,0(r8)
81114b14:	d8c02015 	stw	r3,128(sp)
81114b18:	dc401f15 	stw	r17,124(sp)
81114b1c:	008001c4 	movi	r2,7
81114b20:	14416916 	blt	r2,r17,811150c8 <___vfprintf_internal_r+0x160c>
81114b24:	45800204 	addi	r22,r8,8
81114b28:	d9003617 	ldw	r4,216(sp)
81114b2c:	d9403817 	ldw	r5,224(sp)
81114b30:	000d883a 	mov	r6,zero
81114b34:	000f883a 	mov	r7,zero
81114b38:	d8c03c15 	stw	r3,240(sp)
81114b3c:	111f45c0 	call	8111f45c <__eqdf2>
81114b40:	d8c03c17 	ldw	r3,240(sp)
81114b44:	1000bc26 	beq	r2,zero,81114e38 <___vfprintf_internal_r+0x137c>
81114b48:	d9403317 	ldw	r5,204(sp)
81114b4c:	84000044 	addi	r16,r16,1
81114b50:	8c400044 	addi	r17,r17,1
81114b54:	28bfffc4 	addi	r2,r5,-1
81114b58:	1887883a 	add	r3,r3,r2
81114b5c:	b0800115 	stw	r2,4(r22)
81114b60:	b4000015 	stw	r16,0(r22)
81114b64:	d8c02015 	stw	r3,128(sp)
81114b68:	dc401f15 	stw	r17,124(sp)
81114b6c:	008001c4 	movi	r2,7
81114b70:	14414316 	blt	r2,r17,81115080 <___vfprintf_internal_r+0x15c4>
81114b74:	b5800204 	addi	r22,r22,8
81114b78:	d9003a17 	ldw	r4,232(sp)
81114b7c:	df0022c4 	addi	fp,sp,139
81114b80:	8c400044 	addi	r17,r17,1
81114b84:	20c7883a 	add	r3,r4,r3
81114b88:	b7000015 	stw	fp,0(r22)
81114b8c:	b1000115 	stw	r4,4(r22)
81114b90:	d8c02015 	stw	r3,128(sp)
81114b94:	dc401f15 	stw	r17,124(sp)
81114b98:	008001c4 	movi	r2,7
81114b9c:	14400e16 	blt	r2,r17,81114bd8 <___vfprintf_internal_r+0x111c>
81114ba0:	b2000204 	addi	r8,r22,8
81114ba4:	003e3a06 	br	81114490 <__reset+0xfb0f4490>
81114ba8:	012044b4 	movhi	r4,33042
81114bac:	211ac184 	addi	r4,r4,27398
81114bb0:	d9002b15 	stw	r4,172(sp)
81114bb4:	d9002b17 	ldw	r4,172(sp)
81114bb8:	1c07883a 	add	r3,r3,r16
81114bbc:	44000115 	stw	r16,4(r8)
81114bc0:	41000015 	stw	r4,0(r8)
81114bc4:	10800044 	addi	r2,r2,1
81114bc8:	d8c02015 	stw	r3,128(sp)
81114bcc:	d8801f15 	stw	r2,124(sp)
81114bd0:	010001c4 	movi	r4,7
81114bd4:	20be2d0e 	bge	r4,r2,8111448c <__reset+0xfb0f448c>
81114bd8:	d9002c17 	ldw	r4,176(sp)
81114bdc:	d9801e04 	addi	r6,sp,120
81114be0:	b80b883a 	mov	r5,r23
81114be4:	111ba080 	call	8111ba08 <__sprint_r>
81114be8:	103cb61e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81114bec:	d8c02017 	ldw	r3,128(sp)
81114bf0:	da000404 	addi	r8,sp,16
81114bf4:	003e2606 	br	81114490 <__reset+0xfb0f4490>
81114bf8:	d9002c17 	ldw	r4,176(sp)
81114bfc:	d9801e04 	addi	r6,sp,120
81114c00:	b80b883a 	mov	r5,r23
81114c04:	111ba080 	call	8111ba08 <__sprint_r>
81114c08:	103e5d26 	beq	r2,zero,81114580 <__reset+0xfb0f4580>
81114c0c:	003cad06 	br	81113ec4 <__reset+0xfb0f3ec4>
81114c10:	d9002c17 	ldw	r4,176(sp)
81114c14:	d9801e04 	addi	r6,sp,120
81114c18:	b80b883a 	mov	r5,r23
81114c1c:	111ba080 	call	8111ba08 <__sprint_r>
81114c20:	103ca81e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81114c24:	d8c02017 	ldw	r3,128(sp)
81114c28:	da000404 	addi	r8,sp,16
81114c2c:	003e0b06 	br	8111445c <__reset+0xfb0f445c>
81114c30:	d9002c17 	ldw	r4,176(sp)
81114c34:	d9801e04 	addi	r6,sp,120
81114c38:	b80b883a 	mov	r5,r23
81114c3c:	111ba080 	call	8111ba08 <__sprint_r>
81114c40:	103ca01e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81114c44:	d8c02017 	ldw	r3,128(sp)
81114c48:	da000404 	addi	r8,sp,16
81114c4c:	003dbd06 	br	81114344 <__reset+0xfb0f4344>
81114c50:	d9002c17 	ldw	r4,176(sp)
81114c54:	d9801e04 	addi	r6,sp,120
81114c58:	b80b883a 	mov	r5,r23
81114c5c:	111ba080 	call	8111ba08 <__sprint_r>
81114c60:	103c981e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81114c64:	d8c02017 	ldw	r3,128(sp)
81114c68:	da000404 	addi	r8,sp,16
81114c6c:	003dc306 	br	8111437c <__reset+0xfb0f437c>
81114c70:	d8802917 	ldw	r2,164(sp)
81114c74:	d8002785 	stb	zero,158(sp)
81114c78:	103f0616 	blt	r2,zero,81114894 <__reset+0xfb0f4894>
81114c7c:	00ffdfc4 	movi	r3,-129
81114c80:	9d84b03a 	or	r2,r19,r22
81114c84:	90e4703a 	and	r18,r18,r3
81114c88:	103c6b26 	beq	r2,zero,81113e38 <__reset+0xfb0f3e38>
81114c8c:	0039883a 	mov	fp,zero
81114c90:	003e7406 	br	81114664 <__reset+0xfb0f4664>
81114c94:	9080040c 	andi	r2,r18,16
81114c98:	1001b326 	beq	r2,zero,81115368 <___vfprintf_internal_r+0x18ac>
81114c9c:	d9002d17 	ldw	r4,180(sp)
81114ca0:	d9402917 	ldw	r5,164(sp)
81114ca4:	d8002785 	stb	zero,158(sp)
81114ca8:	20800104 	addi	r2,r4,4
81114cac:	24c00017 	ldw	r19,0(r4)
81114cb0:	002d883a 	mov	r22,zero
81114cb4:	2801b516 	blt	r5,zero,8111538c <___vfprintf_internal_r+0x18d0>
81114cb8:	00ffdfc4 	movi	r3,-129
81114cbc:	d8802d15 	stw	r2,180(sp)
81114cc0:	90e4703a 	and	r18,r18,r3
81114cc4:	983d2726 	beq	r19,zero,81114164 <__reset+0xfb0f4164>
81114cc8:	0039883a 	mov	fp,zero
81114ccc:	003d2a06 	br	81114178 <__reset+0xfb0f4178>
81114cd0:	dc402617 	ldw	r17,152(sp)
81114cd4:	0441d30e 	bge	zero,r17,81115424 <___vfprintf_internal_r+0x1968>
81114cd8:	dc403217 	ldw	r17,200(sp)
81114cdc:	d8803317 	ldw	r2,204(sp)
81114ce0:	1440010e 	bge	r2,r17,81114ce8 <___vfprintf_internal_r+0x122c>
81114ce4:	1023883a 	mov	r17,r2
81114ce8:	04400a0e 	bge	zero,r17,81114d14 <___vfprintf_internal_r+0x1258>
81114cec:	d8801f17 	ldw	r2,124(sp)
81114cf0:	1c47883a 	add	r3,r3,r17
81114cf4:	44000015 	stw	r16,0(r8)
81114cf8:	10800044 	addi	r2,r2,1
81114cfc:	44400115 	stw	r17,4(r8)
81114d00:	d8c02015 	stw	r3,128(sp)
81114d04:	d8801f15 	stw	r2,124(sp)
81114d08:	010001c4 	movi	r4,7
81114d0c:	20826516 	blt	r4,r2,811156a4 <___vfprintf_internal_r+0x1be8>
81114d10:	42000204 	addi	r8,r8,8
81114d14:	88026116 	blt	r17,zero,8111569c <___vfprintf_internal_r+0x1be0>
81114d18:	d9003217 	ldw	r4,200(sp)
81114d1c:	2463c83a 	sub	r17,r4,r17
81114d20:	04407b0e 	bge	zero,r17,81114f10 <___vfprintf_internal_r+0x1454>
81114d24:	05800404 	movi	r22,16
81114d28:	d8801f17 	ldw	r2,124(sp)
81114d2c:	b4419d0e 	bge	r22,r17,811153a4 <___vfprintf_internal_r+0x18e8>
81114d30:	012044b4 	movhi	r4,33042
81114d34:	211ac184 	addi	r4,r4,27398
81114d38:	d9002b15 	stw	r4,172(sp)
81114d3c:	070001c4 	movi	fp,7
81114d40:	dcc02c17 	ldw	r19,176(sp)
81114d44:	00000306 	br	81114d54 <___vfprintf_internal_r+0x1298>
81114d48:	42000204 	addi	r8,r8,8
81114d4c:	8c7ffc04 	addi	r17,r17,-16
81114d50:	b441970e 	bge	r22,r17,811153b0 <___vfprintf_internal_r+0x18f4>
81114d54:	18c00404 	addi	r3,r3,16
81114d58:	10800044 	addi	r2,r2,1
81114d5c:	45000015 	stw	r20,0(r8)
81114d60:	45800115 	stw	r22,4(r8)
81114d64:	d8c02015 	stw	r3,128(sp)
81114d68:	d8801f15 	stw	r2,124(sp)
81114d6c:	e0bff60e 	bge	fp,r2,81114d48 <__reset+0xfb0f4d48>
81114d70:	d9801e04 	addi	r6,sp,120
81114d74:	b80b883a 	mov	r5,r23
81114d78:	9809883a 	mov	r4,r19
81114d7c:	111ba080 	call	8111ba08 <__sprint_r>
81114d80:	103c501e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81114d84:	d8c02017 	ldw	r3,128(sp)
81114d88:	d8801f17 	ldw	r2,124(sp)
81114d8c:	da000404 	addi	r8,sp,16
81114d90:	003fee06 	br	81114d4c <__reset+0xfb0f4d4c>
81114d94:	d9002c17 	ldw	r4,176(sp)
81114d98:	d9801e04 	addi	r6,sp,120
81114d9c:	b80b883a 	mov	r5,r23
81114da0:	111ba080 	call	8111ba08 <__sprint_r>
81114da4:	103c471e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81114da8:	d8c02017 	ldw	r3,128(sp)
81114dac:	df002787 	ldb	fp,158(sp)
81114db0:	da000404 	addi	r8,sp,16
81114db4:	003d5606 	br	81114310 <__reset+0xfb0f4310>
81114db8:	9080040c 	andi	r2,r18,16
81114dbc:	10016126 	beq	r2,zero,81115344 <___vfprintf_internal_r+0x1888>
81114dc0:	d8802d17 	ldw	r2,180(sp)
81114dc4:	14c00017 	ldw	r19,0(r2)
81114dc8:	10800104 	addi	r2,r2,4
81114dcc:	d8802d15 	stw	r2,180(sp)
81114dd0:	982dd7fa 	srai	r22,r19,31
81114dd4:	b005883a 	mov	r2,r22
81114dd8:	003c8206 	br	81113fe4 <__reset+0xfb0f3fe4>
81114ddc:	9080040c 	andi	r2,r18,16
81114de0:	10003526 	beq	r2,zero,81114eb8 <___vfprintf_internal_r+0x13fc>
81114de4:	d9402d17 	ldw	r5,180(sp)
81114de8:	d8c02917 	ldw	r3,164(sp)
81114dec:	d8002785 	stb	zero,158(sp)
81114df0:	28800104 	addi	r2,r5,4
81114df4:	2cc00017 	ldw	r19,0(r5)
81114df8:	002d883a 	mov	r22,zero
81114dfc:	18003716 	blt	r3,zero,81114edc <___vfprintf_internal_r+0x1420>
81114e00:	00ffdfc4 	movi	r3,-129
81114e04:	d8802d15 	stw	r2,180(sp)
81114e08:	90e4703a 	and	r18,r18,r3
81114e0c:	0039883a 	mov	fp,zero
81114e10:	983df326 	beq	r19,zero,811145e0 <__reset+0xfb0f45e0>
81114e14:	00800244 	movi	r2,9
81114e18:	14fc7b36 	bltu	r2,r19,81114008 <__reset+0xfb0f4008>
81114e1c:	d8c02817 	ldw	r3,160(sp)
81114e20:	dc001dc4 	addi	r16,sp,119
81114e24:	9cc00c04 	addi	r19,r19,48
81114e28:	1c07c83a 	sub	r3,r3,r16
81114e2c:	dcc01dc5 	stb	r19,119(sp)
81114e30:	d8c02e15 	stw	r3,184(sp)
81114e34:	003ce806 	br	811141d8 <__reset+0xfb0f41d8>
81114e38:	d8803317 	ldw	r2,204(sp)
81114e3c:	143fffc4 	addi	r16,r2,-1
81114e40:	043f4d0e 	bge	zero,r16,81114b78 <__reset+0xfb0f4b78>
81114e44:	07000404 	movi	fp,16
81114e48:	e400810e 	bge	fp,r16,81115050 <___vfprintf_internal_r+0x1594>
81114e4c:	016044b4 	movhi	r5,33042
81114e50:	295ac184 	addi	r5,r5,27398
81114e54:	d9402b15 	stw	r5,172(sp)
81114e58:	01c001c4 	movi	r7,7
81114e5c:	dcc02c17 	ldw	r19,176(sp)
81114e60:	00000306 	br	81114e70 <___vfprintf_internal_r+0x13b4>
81114e64:	b5800204 	addi	r22,r22,8
81114e68:	843ffc04 	addi	r16,r16,-16
81114e6c:	e4007b0e 	bge	fp,r16,8111505c <___vfprintf_internal_r+0x15a0>
81114e70:	18c00404 	addi	r3,r3,16
81114e74:	8c400044 	addi	r17,r17,1
81114e78:	b5000015 	stw	r20,0(r22)
81114e7c:	b7000115 	stw	fp,4(r22)
81114e80:	d8c02015 	stw	r3,128(sp)
81114e84:	dc401f15 	stw	r17,124(sp)
81114e88:	3c7ff60e 	bge	r7,r17,81114e64 <__reset+0xfb0f4e64>
81114e8c:	d9801e04 	addi	r6,sp,120
81114e90:	b80b883a 	mov	r5,r23
81114e94:	9809883a 	mov	r4,r19
81114e98:	d9c03c15 	stw	r7,240(sp)
81114e9c:	111ba080 	call	8111ba08 <__sprint_r>
81114ea0:	d9c03c17 	ldw	r7,240(sp)
81114ea4:	103c071e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81114ea8:	d8c02017 	ldw	r3,128(sp)
81114eac:	dc401f17 	ldw	r17,124(sp)
81114eb0:	dd800404 	addi	r22,sp,16
81114eb4:	003fec06 	br	81114e68 <__reset+0xfb0f4e68>
81114eb8:	9080100c 	andi	r2,r18,64
81114ebc:	d8002785 	stb	zero,158(sp)
81114ec0:	10010e26 	beq	r2,zero,811152fc <___vfprintf_internal_r+0x1840>
81114ec4:	d9002d17 	ldw	r4,180(sp)
81114ec8:	d9402917 	ldw	r5,164(sp)
81114ecc:	002d883a 	mov	r22,zero
81114ed0:	20800104 	addi	r2,r4,4
81114ed4:	24c0000b 	ldhu	r19,0(r4)
81114ed8:	283fc90e 	bge	r5,zero,81114e00 <__reset+0xfb0f4e00>
81114edc:	d8802d15 	stw	r2,180(sp)
81114ee0:	0039883a 	mov	fp,zero
81114ee4:	9d84b03a 	or	r2,r19,r22
81114ee8:	103c461e 	bne	r2,zero,81114004 <__reset+0xfb0f4004>
81114eec:	00800044 	movi	r2,1
81114ef0:	003e6c06 	br	811148a4 <__reset+0xfb0f48a4>
81114ef4:	d9002c17 	ldw	r4,176(sp)
81114ef8:	d9801e04 	addi	r6,sp,120
81114efc:	b80b883a 	mov	r5,r23
81114f00:	111ba080 	call	8111ba08 <__sprint_r>
81114f04:	103bef1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81114f08:	d8c02017 	ldw	r3,128(sp)
81114f0c:	da000404 	addi	r8,sp,16
81114f10:	d9003217 	ldw	r4,200(sp)
81114f14:	d8802617 	ldw	r2,152(sp)
81114f18:	d9403317 	ldw	r5,204(sp)
81114f1c:	8123883a 	add	r17,r16,r4
81114f20:	11400216 	blt	r2,r5,81114f2c <___vfprintf_internal_r+0x1470>
81114f24:	9100004c 	andi	r4,r18,1
81114f28:	20000d26 	beq	r4,zero,81114f60 <___vfprintf_internal_r+0x14a4>
81114f2c:	d9003717 	ldw	r4,220(sp)
81114f30:	d9403417 	ldw	r5,208(sp)
81114f34:	1907883a 	add	r3,r3,r4
81114f38:	d9001f17 	ldw	r4,124(sp)
81114f3c:	41400015 	stw	r5,0(r8)
81114f40:	d9403717 	ldw	r5,220(sp)
81114f44:	21000044 	addi	r4,r4,1
81114f48:	d8c02015 	stw	r3,128(sp)
81114f4c:	41400115 	stw	r5,4(r8)
81114f50:	d9001f15 	stw	r4,124(sp)
81114f54:	014001c4 	movi	r5,7
81114f58:	2901e816 	blt	r5,r4,811156fc <___vfprintf_internal_r+0x1c40>
81114f5c:	42000204 	addi	r8,r8,8
81114f60:	d9003317 	ldw	r4,204(sp)
81114f64:	8121883a 	add	r16,r16,r4
81114f68:	2085c83a 	sub	r2,r4,r2
81114f6c:	8461c83a 	sub	r16,r16,r17
81114f70:	1400010e 	bge	r2,r16,81114f78 <___vfprintf_internal_r+0x14bc>
81114f74:	1021883a 	mov	r16,r2
81114f78:	04000a0e 	bge	zero,r16,81114fa4 <___vfprintf_internal_r+0x14e8>
81114f7c:	d9001f17 	ldw	r4,124(sp)
81114f80:	1c07883a 	add	r3,r3,r16
81114f84:	44400015 	stw	r17,0(r8)
81114f88:	21000044 	addi	r4,r4,1
81114f8c:	44000115 	stw	r16,4(r8)
81114f90:	d8c02015 	stw	r3,128(sp)
81114f94:	d9001f15 	stw	r4,124(sp)
81114f98:	014001c4 	movi	r5,7
81114f9c:	2901fb16 	blt	r5,r4,8111578c <___vfprintf_internal_r+0x1cd0>
81114fa0:	42000204 	addi	r8,r8,8
81114fa4:	8001f716 	blt	r16,zero,81115784 <___vfprintf_internal_r+0x1cc8>
81114fa8:	1421c83a 	sub	r16,r2,r16
81114fac:	043d380e 	bge	zero,r16,81114490 <__reset+0xfb0f4490>
81114fb0:	04400404 	movi	r17,16
81114fb4:	d8801f17 	ldw	r2,124(sp)
81114fb8:	8c3efb0e 	bge	r17,r16,81114ba8 <__reset+0xfb0f4ba8>
81114fbc:	016044b4 	movhi	r5,33042
81114fc0:	295ac184 	addi	r5,r5,27398
81114fc4:	d9402b15 	stw	r5,172(sp)
81114fc8:	058001c4 	movi	r22,7
81114fcc:	dcc02c17 	ldw	r19,176(sp)
81114fd0:	00000306 	br	81114fe0 <___vfprintf_internal_r+0x1524>
81114fd4:	42000204 	addi	r8,r8,8
81114fd8:	843ffc04 	addi	r16,r16,-16
81114fdc:	8c3ef50e 	bge	r17,r16,81114bb4 <__reset+0xfb0f4bb4>
81114fe0:	18c00404 	addi	r3,r3,16
81114fe4:	10800044 	addi	r2,r2,1
81114fe8:	45000015 	stw	r20,0(r8)
81114fec:	44400115 	stw	r17,4(r8)
81114ff0:	d8c02015 	stw	r3,128(sp)
81114ff4:	d8801f15 	stw	r2,124(sp)
81114ff8:	b0bff60e 	bge	r22,r2,81114fd4 <__reset+0xfb0f4fd4>
81114ffc:	d9801e04 	addi	r6,sp,120
81115000:	b80b883a 	mov	r5,r23
81115004:	9809883a 	mov	r4,r19
81115008:	111ba080 	call	8111ba08 <__sprint_r>
8111500c:	103bad1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81115010:	d8c02017 	ldw	r3,128(sp)
81115014:	d8801f17 	ldw	r2,124(sp)
81115018:	da000404 	addi	r8,sp,16
8111501c:	003fee06 	br	81114fd8 <__reset+0xfb0f4fd8>
81115020:	9088703a 	and	r4,r18,r2
81115024:	203eab1e 	bne	r4,zero,81114ad4 <__reset+0xfb0f4ad4>
81115028:	dc401f17 	ldw	r17,124(sp)
8111502c:	40800115 	stw	r2,4(r8)
81115030:	44000015 	stw	r16,0(r8)
81115034:	8c400044 	addi	r17,r17,1
81115038:	d8c02015 	stw	r3,128(sp)
8111503c:	dc401f15 	stw	r17,124(sp)
81115040:	008001c4 	movi	r2,7
81115044:	14400e16 	blt	r2,r17,81115080 <___vfprintf_internal_r+0x15c4>
81115048:	45800204 	addi	r22,r8,8
8111504c:	003eca06 	br	81114b78 <__reset+0xfb0f4b78>
81115050:	012044b4 	movhi	r4,33042
81115054:	211ac184 	addi	r4,r4,27398
81115058:	d9002b15 	stw	r4,172(sp)
8111505c:	d8802b17 	ldw	r2,172(sp)
81115060:	1c07883a 	add	r3,r3,r16
81115064:	8c400044 	addi	r17,r17,1
81115068:	b0800015 	stw	r2,0(r22)
8111506c:	b4000115 	stw	r16,4(r22)
81115070:	d8c02015 	stw	r3,128(sp)
81115074:	dc401f15 	stw	r17,124(sp)
81115078:	008001c4 	movi	r2,7
8111507c:	147ebd0e 	bge	r2,r17,81114b74 <__reset+0xfb0f4b74>
81115080:	d9002c17 	ldw	r4,176(sp)
81115084:	d9801e04 	addi	r6,sp,120
81115088:	b80b883a 	mov	r5,r23
8111508c:	111ba080 	call	8111ba08 <__sprint_r>
81115090:	103b8c1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81115094:	d8c02017 	ldw	r3,128(sp)
81115098:	dc401f17 	ldw	r17,124(sp)
8111509c:	dd800404 	addi	r22,sp,16
811150a0:	003eb506 	br	81114b78 <__reset+0xfb0f4b78>
811150a4:	d9002c17 	ldw	r4,176(sp)
811150a8:	d9801e04 	addi	r6,sp,120
811150ac:	b80b883a 	mov	r5,r23
811150b0:	111ba080 	call	8111ba08 <__sprint_r>
811150b4:	103b831e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
811150b8:	d8c02017 	ldw	r3,128(sp)
811150bc:	dc401f17 	ldw	r17,124(sp)
811150c0:	da000404 	addi	r8,sp,16
811150c4:	003e8d06 	br	81114afc <__reset+0xfb0f4afc>
811150c8:	d9002c17 	ldw	r4,176(sp)
811150cc:	d9801e04 	addi	r6,sp,120
811150d0:	b80b883a 	mov	r5,r23
811150d4:	111ba080 	call	8111ba08 <__sprint_r>
811150d8:	103b7a1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
811150dc:	d8c02017 	ldw	r3,128(sp)
811150e0:	dc401f17 	ldw	r17,124(sp)
811150e4:	dd800404 	addi	r22,sp,16
811150e8:	003e8f06 	br	81114b28 <__reset+0xfb0f4b28>
811150ec:	0027883a 	mov	r19,zero
811150f0:	003f4a06 	br	81114e1c <__reset+0xfb0f4e1c>
811150f4:	d9002c17 	ldw	r4,176(sp)
811150f8:	d9801e04 	addi	r6,sp,120
811150fc:	b80b883a 	mov	r5,r23
81115100:	111ba080 	call	8111ba08 <__sprint_r>
81115104:	103b6f1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81115108:	d8c02017 	ldw	r3,128(sp)
8111510c:	da000404 	addi	r8,sp,16
81115110:	003c9d06 	br	81114388 <__reset+0xfb0f4388>
81115114:	04e7c83a 	sub	r19,zero,r19
81115118:	9804c03a 	cmpne	r2,r19,zero
8111511c:	05adc83a 	sub	r22,zero,r22
81115120:	b0adc83a 	sub	r22,r22,r2
81115124:	d8802917 	ldw	r2,164(sp)
81115128:	07000b44 	movi	fp,45
8111512c:	df002785 	stb	fp,158(sp)
81115130:	10017b16 	blt	r2,zero,81115720 <___vfprintf_internal_r+0x1c64>
81115134:	00bfdfc4 	movi	r2,-129
81115138:	90a4703a 	and	r18,r18,r2
8111513c:	003bb106 	br	81114004 <__reset+0xfb0f4004>
81115140:	d9003617 	ldw	r4,216(sp)
81115144:	d9403817 	ldw	r5,224(sp)
81115148:	da003d15 	stw	r8,244(sp)
8111514c:	111a3180 	call	8111a318 <__fpclassifyd>
81115150:	da003d17 	ldw	r8,244(sp)
81115154:	1000f026 	beq	r2,zero,81115518 <___vfprintf_internal_r+0x1a5c>
81115158:	d9002917 	ldw	r4,164(sp)
8111515c:	05bff7c4 	movi	r22,-33
81115160:	00bfffc4 	movi	r2,-1
81115164:	8dac703a 	and	r22,r17,r22
81115168:	20820026 	beq	r4,r2,8111596c <___vfprintf_internal_r+0x1eb0>
8111516c:	008011c4 	movi	r2,71
81115170:	b081f726 	beq	r22,r2,81115950 <___vfprintf_internal_r+0x1e94>
81115174:	d9003817 	ldw	r4,224(sp)
81115178:	90c04014 	ori	r3,r18,256
8111517c:	d8c02b15 	stw	r3,172(sp)
81115180:	20021516 	blt	r4,zero,811159d8 <___vfprintf_internal_r+0x1f1c>
81115184:	dcc03817 	ldw	r19,224(sp)
81115188:	d8002a05 	stb	zero,168(sp)
8111518c:	00801984 	movi	r2,102
81115190:	8881f926 	beq	r17,r2,81115978 <___vfprintf_internal_r+0x1ebc>
81115194:	00801184 	movi	r2,70
81115198:	88821c26 	beq	r17,r2,81115a0c <___vfprintf_internal_r+0x1f50>
8111519c:	00801144 	movi	r2,69
811151a0:	b081ef26 	beq	r22,r2,81115960 <___vfprintf_internal_r+0x1ea4>
811151a4:	d8c02917 	ldw	r3,164(sp)
811151a8:	d8802104 	addi	r2,sp,132
811151ac:	d8800315 	stw	r2,12(sp)
811151b0:	d9403617 	ldw	r5,216(sp)
811151b4:	d8802504 	addi	r2,sp,148
811151b8:	d9002c17 	ldw	r4,176(sp)
811151bc:	d8800215 	stw	r2,8(sp)
811151c0:	d8802604 	addi	r2,sp,152
811151c4:	d8c00015 	stw	r3,0(sp)
811151c8:	d8800115 	stw	r2,4(sp)
811151cc:	01c00084 	movi	r7,2
811151d0:	980d883a 	mov	r6,r19
811151d4:	d8c03c15 	stw	r3,240(sp)
811151d8:	da003d15 	stw	r8,244(sp)
811151dc:	11161940 	call	81116194 <_dtoa_r>
811151e0:	1021883a 	mov	r16,r2
811151e4:	008019c4 	movi	r2,103
811151e8:	d8c03c17 	ldw	r3,240(sp)
811151ec:	da003d17 	ldw	r8,244(sp)
811151f0:	88817126 	beq	r17,r2,811157b8 <___vfprintf_internal_r+0x1cfc>
811151f4:	008011c4 	movi	r2,71
811151f8:	88829226 	beq	r17,r2,81115c44 <___vfprintf_internal_r+0x2188>
811151fc:	80f9883a 	add	fp,r16,r3
81115200:	d9003617 	ldw	r4,216(sp)
81115204:	000d883a 	mov	r6,zero
81115208:	000f883a 	mov	r7,zero
8111520c:	980b883a 	mov	r5,r19
81115210:	da003d15 	stw	r8,244(sp)
81115214:	111f45c0 	call	8111f45c <__eqdf2>
81115218:	da003d17 	ldw	r8,244(sp)
8111521c:	10018d26 	beq	r2,zero,81115854 <___vfprintf_internal_r+0x1d98>
81115220:	d8802117 	ldw	r2,132(sp)
81115224:	1700062e 	bgeu	r2,fp,81115240 <___vfprintf_internal_r+0x1784>
81115228:	01000c04 	movi	r4,48
8111522c:	10c00044 	addi	r3,r2,1
81115230:	d8c02115 	stw	r3,132(sp)
81115234:	11000005 	stb	r4,0(r2)
81115238:	d8802117 	ldw	r2,132(sp)
8111523c:	173ffb36 	bltu	r2,fp,8111522c <__reset+0xfb0f522c>
81115240:	1405c83a 	sub	r2,r2,r16
81115244:	d8803315 	stw	r2,204(sp)
81115248:	008011c4 	movi	r2,71
8111524c:	b0817626 	beq	r22,r2,81115828 <___vfprintf_internal_r+0x1d6c>
81115250:	00801944 	movi	r2,101
81115254:	1442810e 	bge	r2,r17,81115c5c <___vfprintf_internal_r+0x21a0>
81115258:	d8c02617 	ldw	r3,152(sp)
8111525c:	00801984 	movi	r2,102
81115260:	d8c03215 	stw	r3,200(sp)
81115264:	8881fe26 	beq	r17,r2,81115a60 <___vfprintf_internal_r+0x1fa4>
81115268:	d8c03217 	ldw	r3,200(sp)
8111526c:	d9003317 	ldw	r4,204(sp)
81115270:	1901dd16 	blt	r3,r4,811159e8 <___vfprintf_internal_r+0x1f2c>
81115274:	9480004c 	andi	r18,r18,1
81115278:	90022b1e 	bne	r18,zero,81115b28 <___vfprintf_internal_r+0x206c>
8111527c:	1805883a 	mov	r2,r3
81115280:	18028016 	blt	r3,zero,81115c84 <___vfprintf_internal_r+0x21c8>
81115284:	d8c03217 	ldw	r3,200(sp)
81115288:	044019c4 	movi	r17,103
8111528c:	d8c02e15 	stw	r3,184(sp)
81115290:	df002a07 	ldb	fp,168(sp)
81115294:	e001531e 	bne	fp,zero,811157e4 <___vfprintf_internal_r+0x1d28>
81115298:	df002783 	ldbu	fp,158(sp)
8111529c:	d8802a15 	stw	r2,168(sp)
811152a0:	dc802b17 	ldw	r18,172(sp)
811152a4:	d8002915 	stw	zero,164(sp)
811152a8:	003bd106 	br	811141f0 <__reset+0xfb0f41f0>
811152ac:	d8802d17 	ldw	r2,180(sp)
811152b0:	d8c02d17 	ldw	r3,180(sp)
811152b4:	d9002d17 	ldw	r4,180(sp)
811152b8:	10800017 	ldw	r2,0(r2)
811152bc:	18c00117 	ldw	r3,4(r3)
811152c0:	21000204 	addi	r4,r4,8
811152c4:	d8803615 	stw	r2,216(sp)
811152c8:	d8c03815 	stw	r3,224(sp)
811152cc:	d9002d15 	stw	r4,180(sp)
811152d0:	003b7506 	br	811140a8 <__reset+0xfb0f40a8>
811152d4:	ac400007 	ldb	r17,0(r21)
811152d8:	003a5906 	br	81113c40 <__reset+0xfb0f3c40>
811152dc:	9080100c 	andi	r2,r18,64
811152e0:	1000a826 	beq	r2,zero,81115584 <___vfprintf_internal_r+0x1ac8>
811152e4:	d9002d17 	ldw	r4,180(sp)
811152e8:	002d883a 	mov	r22,zero
811152ec:	24c0000b 	ldhu	r19,0(r4)
811152f0:	21000104 	addi	r4,r4,4
811152f4:	d9002d15 	stw	r4,180(sp)
811152f8:	003ccb06 	br	81114628 <__reset+0xfb0f4628>
811152fc:	d8c02d17 	ldw	r3,180(sp)
81115300:	d9002917 	ldw	r4,164(sp)
81115304:	002d883a 	mov	r22,zero
81115308:	18800104 	addi	r2,r3,4
8111530c:	1cc00017 	ldw	r19,0(r3)
81115310:	203ebb0e 	bge	r4,zero,81114e00 <__reset+0xfb0f4e00>
81115314:	003ef106 	br	81114edc <__reset+0xfb0f4edc>
81115318:	9080040c 	andi	r2,r18,16
8111531c:	1000921e 	bne	r2,zero,81115568 <___vfprintf_internal_r+0x1aac>
81115320:	9480100c 	andi	r18,r18,64
81115324:	90013926 	beq	r18,zero,8111580c <___vfprintf_internal_r+0x1d50>
81115328:	d9002d17 	ldw	r4,180(sp)
8111532c:	d9402f17 	ldw	r5,188(sp)
81115330:	20800017 	ldw	r2,0(r4)
81115334:	21000104 	addi	r4,r4,4
81115338:	d9002d15 	stw	r4,180(sp)
8111533c:	1140000d 	sth	r5,0(r2)
81115340:	003a1606 	br	81113b9c <__reset+0xfb0f3b9c>
81115344:	9080100c 	andi	r2,r18,64
81115348:	10008026 	beq	r2,zero,8111554c <___vfprintf_internal_r+0x1a90>
8111534c:	d8c02d17 	ldw	r3,180(sp)
81115350:	1cc0000f 	ldh	r19,0(r3)
81115354:	18c00104 	addi	r3,r3,4
81115358:	d8c02d15 	stw	r3,180(sp)
8111535c:	982dd7fa 	srai	r22,r19,31
81115360:	b005883a 	mov	r2,r22
81115364:	003b1f06 	br	81113fe4 <__reset+0xfb0f3fe4>
81115368:	9080100c 	andi	r2,r18,64
8111536c:	d8002785 	stb	zero,158(sp)
81115370:	10008a1e 	bne	r2,zero,8111559c <___vfprintf_internal_r+0x1ae0>
81115374:	d9402d17 	ldw	r5,180(sp)
81115378:	d8c02917 	ldw	r3,164(sp)
8111537c:	002d883a 	mov	r22,zero
81115380:	28800104 	addi	r2,r5,4
81115384:	2cc00017 	ldw	r19,0(r5)
81115388:	183e4b0e 	bge	r3,zero,81114cb8 <__reset+0xfb0f4cb8>
8111538c:	9d86b03a 	or	r3,r19,r22
81115390:	d8802d15 	stw	r2,180(sp)
81115394:	183e4c1e 	bne	r3,zero,81114cc8 <__reset+0xfb0f4cc8>
81115398:	0039883a 	mov	fp,zero
8111539c:	0005883a 	mov	r2,zero
811153a0:	003d4006 	br	811148a4 <__reset+0xfb0f48a4>
811153a4:	016044b4 	movhi	r5,33042
811153a8:	295ac184 	addi	r5,r5,27398
811153ac:	d9402b15 	stw	r5,172(sp)
811153b0:	d9402b17 	ldw	r5,172(sp)
811153b4:	1c47883a 	add	r3,r3,r17
811153b8:	10800044 	addi	r2,r2,1
811153bc:	41400015 	stw	r5,0(r8)
811153c0:	44400115 	stw	r17,4(r8)
811153c4:	d8c02015 	stw	r3,128(sp)
811153c8:	d8801f15 	stw	r2,124(sp)
811153cc:	010001c4 	movi	r4,7
811153d0:	20bec816 	blt	r4,r2,81114ef4 <__reset+0xfb0f4ef4>
811153d4:	42000204 	addi	r8,r8,8
811153d8:	003ecd06 	br	81114f10 <__reset+0xfb0f4f10>
811153dc:	d9002917 	ldw	r4,164(sp)
811153e0:	d8002785 	stb	zero,158(sp)
811153e4:	203d2d16 	blt	r4,zero,8111489c <__reset+0xfb0f489c>
811153e8:	00bfdfc4 	movi	r2,-129
811153ec:	90a4703a 	and	r18,r18,r2
811153f0:	003a9106 	br	81113e38 <__reset+0xfb0f3e38>
811153f4:	012044b4 	movhi	r4,33042
811153f8:	211ac184 	addi	r4,r4,27398
811153fc:	d9002b15 	stw	r4,172(sp)
81115400:	003c0c06 	br	81114434 <__reset+0xfb0f4434>
81115404:	d9002c17 	ldw	r4,176(sp)
81115408:	d9801e04 	addi	r6,sp,120
8111540c:	b80b883a 	mov	r5,r23
81115410:	111ba080 	call	8111ba08 <__sprint_r>
81115414:	103aab1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81115418:	d8c02017 	ldw	r3,128(sp)
8111541c:	da000404 	addi	r8,sp,16
81115420:	003d4106 	br	81114928 <__reset+0xfb0f4928>
81115424:	d8801f17 	ldw	r2,124(sp)
81115428:	016044b4 	movhi	r5,33042
8111542c:	01000044 	movi	r4,1
81115430:	18c00044 	addi	r3,r3,1
81115434:	10800044 	addi	r2,r2,1
81115438:	295ab904 	addi	r5,r5,27364
8111543c:	41000115 	stw	r4,4(r8)
81115440:	41400015 	stw	r5,0(r8)
81115444:	d8c02015 	stw	r3,128(sp)
81115448:	d8801f15 	stw	r2,124(sp)
8111544c:	010001c4 	movi	r4,7
81115450:	20805c16 	blt	r4,r2,811155c4 <___vfprintf_internal_r+0x1b08>
81115454:	42000204 	addi	r8,r8,8
81115458:	8800041e 	bne	r17,zero,8111546c <___vfprintf_internal_r+0x19b0>
8111545c:	d8803317 	ldw	r2,204(sp)
81115460:	1000021e 	bne	r2,zero,8111546c <___vfprintf_internal_r+0x19b0>
81115464:	9080004c 	andi	r2,r18,1
81115468:	103c0926 	beq	r2,zero,81114490 <__reset+0xfb0f4490>
8111546c:	d9003717 	ldw	r4,220(sp)
81115470:	d8801f17 	ldw	r2,124(sp)
81115474:	d9403417 	ldw	r5,208(sp)
81115478:	20c7883a 	add	r3,r4,r3
8111547c:	10800044 	addi	r2,r2,1
81115480:	41000115 	stw	r4,4(r8)
81115484:	41400015 	stw	r5,0(r8)
81115488:	d8c02015 	stw	r3,128(sp)
8111548c:	d8801f15 	stw	r2,124(sp)
81115490:	010001c4 	movi	r4,7
81115494:	20812116 	blt	r4,r2,8111591c <___vfprintf_internal_r+0x1e60>
81115498:	42000204 	addi	r8,r8,8
8111549c:	0463c83a 	sub	r17,zero,r17
811154a0:	0440730e 	bge	zero,r17,81115670 <___vfprintf_internal_r+0x1bb4>
811154a4:	05800404 	movi	r22,16
811154a8:	b440860e 	bge	r22,r17,811156c4 <___vfprintf_internal_r+0x1c08>
811154ac:	016044b4 	movhi	r5,33042
811154b0:	295ac184 	addi	r5,r5,27398
811154b4:	d9402b15 	stw	r5,172(sp)
811154b8:	070001c4 	movi	fp,7
811154bc:	dcc02c17 	ldw	r19,176(sp)
811154c0:	00000306 	br	811154d0 <___vfprintf_internal_r+0x1a14>
811154c4:	42000204 	addi	r8,r8,8
811154c8:	8c7ffc04 	addi	r17,r17,-16
811154cc:	b440800e 	bge	r22,r17,811156d0 <___vfprintf_internal_r+0x1c14>
811154d0:	18c00404 	addi	r3,r3,16
811154d4:	10800044 	addi	r2,r2,1
811154d8:	45000015 	stw	r20,0(r8)
811154dc:	45800115 	stw	r22,4(r8)
811154e0:	d8c02015 	stw	r3,128(sp)
811154e4:	d8801f15 	stw	r2,124(sp)
811154e8:	e0bff60e 	bge	fp,r2,811154c4 <__reset+0xfb0f54c4>
811154ec:	d9801e04 	addi	r6,sp,120
811154f0:	b80b883a 	mov	r5,r23
811154f4:	9809883a 	mov	r4,r19
811154f8:	111ba080 	call	8111ba08 <__sprint_r>
811154fc:	103a711e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81115500:	d8c02017 	ldw	r3,128(sp)
81115504:	d8801f17 	ldw	r2,124(sp)
81115508:	da000404 	addi	r8,sp,16
8111550c:	003fee06 	br	811154c8 <__reset+0xfb0f54c8>
81115510:	00bfffc4 	movi	r2,-1
81115514:	003a6f06 	br	81113ed4 <__reset+0xfb0f3ed4>
81115518:	008011c4 	movi	r2,71
8111551c:	1440b816 	blt	r2,r17,81115800 <___vfprintf_internal_r+0x1d44>
81115520:	042044b4 	movhi	r16,33042
81115524:	841aab04 	addi	r16,r16,27308
81115528:	00c000c4 	movi	r3,3
8111552c:	00bfdfc4 	movi	r2,-129
81115530:	d8c02a15 	stw	r3,168(sp)
81115534:	90a4703a 	and	r18,r18,r2
81115538:	df002783 	ldbu	fp,158(sp)
8111553c:	d8c02e15 	stw	r3,184(sp)
81115540:	d8002915 	stw	zero,164(sp)
81115544:	d8003215 	stw	zero,200(sp)
81115548:	003b2906 	br	811141f0 <__reset+0xfb0f41f0>
8111554c:	d9002d17 	ldw	r4,180(sp)
81115550:	24c00017 	ldw	r19,0(r4)
81115554:	21000104 	addi	r4,r4,4
81115558:	d9002d15 	stw	r4,180(sp)
8111555c:	982dd7fa 	srai	r22,r19,31
81115560:	b005883a 	mov	r2,r22
81115564:	003a9f06 	br	81113fe4 <__reset+0xfb0f3fe4>
81115568:	d9402d17 	ldw	r5,180(sp)
8111556c:	d8c02f17 	ldw	r3,188(sp)
81115570:	28800017 	ldw	r2,0(r5)
81115574:	29400104 	addi	r5,r5,4
81115578:	d9402d15 	stw	r5,180(sp)
8111557c:	10c00015 	stw	r3,0(r2)
81115580:	00398606 	br	81113b9c <__reset+0xfb0f3b9c>
81115584:	d9402d17 	ldw	r5,180(sp)
81115588:	002d883a 	mov	r22,zero
8111558c:	2cc00017 	ldw	r19,0(r5)
81115590:	29400104 	addi	r5,r5,4
81115594:	d9402d15 	stw	r5,180(sp)
81115598:	003c2306 	br	81114628 <__reset+0xfb0f4628>
8111559c:	d8c02d17 	ldw	r3,180(sp)
811155a0:	d9002917 	ldw	r4,164(sp)
811155a4:	002d883a 	mov	r22,zero
811155a8:	18800104 	addi	r2,r3,4
811155ac:	1cc0000b 	ldhu	r19,0(r3)
811155b0:	203dc10e 	bge	r4,zero,81114cb8 <__reset+0xfb0f4cb8>
811155b4:	003f7506 	br	8111538c <__reset+0xfb0f538c>
811155b8:	042044b4 	movhi	r16,33042
811155bc:	841aa904 	addi	r16,r16,27300
811155c0:	003acc06 	br	811140f4 <__reset+0xfb0f40f4>
811155c4:	d9002c17 	ldw	r4,176(sp)
811155c8:	d9801e04 	addi	r6,sp,120
811155cc:	b80b883a 	mov	r5,r23
811155d0:	111ba080 	call	8111ba08 <__sprint_r>
811155d4:	103a3b1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
811155d8:	dc402617 	ldw	r17,152(sp)
811155dc:	d8c02017 	ldw	r3,128(sp)
811155e0:	da000404 	addi	r8,sp,16
811155e4:	003f9c06 	br	81115458 <__reset+0xfb0f5458>
811155e8:	ac400043 	ldbu	r17,1(r21)
811155ec:	94800814 	ori	r18,r18,32
811155f0:	ad400044 	addi	r21,r21,1
811155f4:	8c403fcc 	andi	r17,r17,255
811155f8:	8c40201c 	xori	r17,r17,128
811155fc:	8c7fe004 	addi	r17,r17,-128
81115600:	00398f06 	br	81113c40 <__reset+0xfb0f3c40>
81115604:	d8c02d15 	stw	r3,180(sp)
81115608:	0039883a 	mov	fp,zero
8111560c:	003e3506 	br	81114ee4 <__reset+0xfb0f4ee4>
81115610:	d9002c17 	ldw	r4,176(sp)
81115614:	d9801e04 	addi	r6,sp,120
81115618:	b80b883a 	mov	r5,r23
8111561c:	111ba080 	call	8111ba08 <__sprint_r>
81115620:	103a281e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81115624:	d8c02017 	ldw	r3,128(sp)
81115628:	da000404 	addi	r8,sp,16
8111562c:	003cd006 	br	81114970 <__reset+0xfb0f4970>
81115630:	8009883a 	mov	r4,r16
81115634:	da003d15 	stw	r8,244(sp)
81115638:	111a4680 	call	8111a468 <strlen>
8111563c:	d8802e15 	stw	r2,184(sp)
81115640:	da003d17 	ldw	r8,244(sp)
81115644:	103c340e 	bge	r2,zero,81114718 <__reset+0xfb0f4718>
81115648:	0005883a 	mov	r2,zero
8111564c:	003c3206 	br	81114718 <__reset+0xfb0f4718>
81115650:	d9002c17 	ldw	r4,176(sp)
81115654:	d9801e04 	addi	r6,sp,120
81115658:	b80b883a 	mov	r5,r23
8111565c:	111ba080 	call	8111ba08 <__sprint_r>
81115660:	103a181e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81115664:	d8c02017 	ldw	r3,128(sp)
81115668:	d8801f17 	ldw	r2,124(sp)
8111566c:	da000404 	addi	r8,sp,16
81115670:	d9403317 	ldw	r5,204(sp)
81115674:	10800044 	addi	r2,r2,1
81115678:	44000015 	stw	r16,0(r8)
8111567c:	28c7883a 	add	r3,r5,r3
81115680:	003b7d06 	br	81114478 <__reset+0xfb0f4478>
81115684:	012044b4 	movhi	r4,33042
81115688:	211ac584 	addi	r4,r4,27414
8111568c:	d9003515 	stw	r4,212(sp)
81115690:	003b1406 	br	811142e4 <__reset+0xfb0f42e4>
81115694:	013fffc4 	movi	r4,-1
81115698:	003a3506 	br	81113f70 <__reset+0xfb0f3f70>
8111569c:	0023883a 	mov	r17,zero
811156a0:	003d9d06 	br	81114d18 <__reset+0xfb0f4d18>
811156a4:	d9002c17 	ldw	r4,176(sp)
811156a8:	d9801e04 	addi	r6,sp,120
811156ac:	b80b883a 	mov	r5,r23
811156b0:	111ba080 	call	8111ba08 <__sprint_r>
811156b4:	103a031e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
811156b8:	d8c02017 	ldw	r3,128(sp)
811156bc:	da000404 	addi	r8,sp,16
811156c0:	003d9406 	br	81114d14 <__reset+0xfb0f4d14>
811156c4:	012044b4 	movhi	r4,33042
811156c8:	211ac184 	addi	r4,r4,27398
811156cc:	d9002b15 	stw	r4,172(sp)
811156d0:	d9002b17 	ldw	r4,172(sp)
811156d4:	1c47883a 	add	r3,r3,r17
811156d8:	10800044 	addi	r2,r2,1
811156dc:	41000015 	stw	r4,0(r8)
811156e0:	44400115 	stw	r17,4(r8)
811156e4:	d8c02015 	stw	r3,128(sp)
811156e8:	d8801f15 	stw	r2,124(sp)
811156ec:	010001c4 	movi	r4,7
811156f0:	20bfd716 	blt	r4,r2,81115650 <__reset+0xfb0f5650>
811156f4:	42000204 	addi	r8,r8,8
811156f8:	003fdd06 	br	81115670 <__reset+0xfb0f5670>
811156fc:	d9002c17 	ldw	r4,176(sp)
81115700:	d9801e04 	addi	r6,sp,120
81115704:	b80b883a 	mov	r5,r23
81115708:	111ba080 	call	8111ba08 <__sprint_r>
8111570c:	1039ed1e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81115710:	d8802617 	ldw	r2,152(sp)
81115714:	d8c02017 	ldw	r3,128(sp)
81115718:	da000404 	addi	r8,sp,16
8111571c:	003e1006 	br	81114f60 <__reset+0xfb0f4f60>
81115720:	00800044 	movi	r2,1
81115724:	10803fcc 	andi	r2,r2,255
81115728:	00c00044 	movi	r3,1
8111572c:	10fa3526 	beq	r2,r3,81114004 <__reset+0xfb0f4004>
81115730:	00c00084 	movi	r3,2
81115734:	10fbcb26 	beq	r2,r3,81114664 <__reset+0xfb0f4664>
81115738:	003a8f06 	br	81114178 <__reset+0xfb0f4178>
8111573c:	012044b4 	movhi	r4,33042
81115740:	211ac584 	addi	r4,r4,27414
81115744:	d9003515 	stw	r4,212(sp)
81115748:	003b7606 	br	81114524 <__reset+0xfb0f4524>
8111574c:	d8802917 	ldw	r2,164(sp)
81115750:	00c00184 	movi	r3,6
81115754:	1880012e 	bgeu	r3,r2,8111575c <___vfprintf_internal_r+0x1ca0>
81115758:	1805883a 	mov	r2,r3
8111575c:	d8802e15 	stw	r2,184(sp)
81115760:	1000ef16 	blt	r2,zero,81115b20 <___vfprintf_internal_r+0x2064>
81115764:	042044b4 	movhi	r16,33042
81115768:	d8802a15 	stw	r2,168(sp)
8111576c:	dcc02d15 	stw	r19,180(sp)
81115770:	d8002915 	stw	zero,164(sp)
81115774:	d8003215 	stw	zero,200(sp)
81115778:	841ab704 	addi	r16,r16,27356
8111577c:	0039883a 	mov	fp,zero
81115780:	003aa206 	br	8111420c <__reset+0xfb0f420c>
81115784:	0021883a 	mov	r16,zero
81115788:	003e0706 	br	81114fa8 <__reset+0xfb0f4fa8>
8111578c:	d9002c17 	ldw	r4,176(sp)
81115790:	d9801e04 	addi	r6,sp,120
81115794:	b80b883a 	mov	r5,r23
81115798:	111ba080 	call	8111ba08 <__sprint_r>
8111579c:	1039c91e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
811157a0:	d8802617 	ldw	r2,152(sp)
811157a4:	d9403317 	ldw	r5,204(sp)
811157a8:	d8c02017 	ldw	r3,128(sp)
811157ac:	da000404 	addi	r8,sp,16
811157b0:	2885c83a 	sub	r2,r5,r2
811157b4:	003dfb06 	br	81114fa4 <__reset+0xfb0f4fa4>
811157b8:	9080004c 	andi	r2,r18,1
811157bc:	103e8f1e 	bne	r2,zero,811151fc <__reset+0xfb0f51fc>
811157c0:	d8802117 	ldw	r2,132(sp)
811157c4:	003e9e06 	br	81115240 <__reset+0xfb0f5240>
811157c8:	1025883a 	mov	r18,r2
811157cc:	0039883a 	mov	fp,zero
811157d0:	00800084 	movi	r2,2
811157d4:	003fd306 	br	81115724 <__reset+0xfb0f5724>
811157d8:	07000b44 	movi	fp,45
811157dc:	df002785 	stb	fp,158(sp)
811157e0:	003a4006 	br	811140e4 <__reset+0xfb0f40e4>
811157e4:	00c00b44 	movi	r3,45
811157e8:	d8c02785 	stb	r3,158(sp)
811157ec:	d8802a15 	stw	r2,168(sp)
811157f0:	dc802b17 	ldw	r18,172(sp)
811157f4:	d8002915 	stw	zero,164(sp)
811157f8:	07000b44 	movi	fp,45
811157fc:	003a8006 	br	81114200 <__reset+0xfb0f4200>
81115800:	042044b4 	movhi	r16,33042
81115804:	841aac04 	addi	r16,r16,27312
81115808:	003f4706 	br	81115528 <__reset+0xfb0f5528>
8111580c:	d8c02d17 	ldw	r3,180(sp)
81115810:	d9002f17 	ldw	r4,188(sp)
81115814:	18800017 	ldw	r2,0(r3)
81115818:	18c00104 	addi	r3,r3,4
8111581c:	d8c02d15 	stw	r3,180(sp)
81115820:	11000015 	stw	r4,0(r2)
81115824:	0038dd06 	br	81113b9c <__reset+0xfb0f3b9c>
81115828:	dd802617 	ldw	r22,152(sp)
8111582c:	00bfff44 	movi	r2,-3
81115830:	b0801c16 	blt	r22,r2,811158a4 <___vfprintf_internal_r+0x1de8>
81115834:	d9402917 	ldw	r5,164(sp)
81115838:	2d801a16 	blt	r5,r22,811158a4 <___vfprintf_internal_r+0x1de8>
8111583c:	dd803215 	stw	r22,200(sp)
81115840:	003e8906 	br	81115268 <__reset+0xfb0f5268>
81115844:	012044b4 	movhi	r4,33042
81115848:	211ac184 	addi	r4,r4,27398
8111584c:	d9002b15 	stw	r4,172(sp)
81115850:	003c9106 	br	81114a98 <__reset+0xfb0f4a98>
81115854:	e005883a 	mov	r2,fp
81115858:	003e7906 	br	81115240 <__reset+0xfb0f5240>
8111585c:	d9402917 	ldw	r5,164(sp)
81115860:	df002783 	ldbu	fp,158(sp)
81115864:	dcc02d15 	stw	r19,180(sp)
81115868:	d9402a15 	stw	r5,168(sp)
8111586c:	d9402e15 	stw	r5,184(sp)
81115870:	d8002915 	stw	zero,164(sp)
81115874:	d8003215 	stw	zero,200(sp)
81115878:	003a5d06 	br	811141f0 <__reset+0xfb0f41f0>
8111587c:	9080004c 	andi	r2,r18,1
81115880:	0039883a 	mov	fp,zero
81115884:	10000426 	beq	r2,zero,81115898 <___vfprintf_internal_r+0x1ddc>
81115888:	00800c04 	movi	r2,48
8111588c:	dc001dc4 	addi	r16,sp,119
81115890:	d8801dc5 	stb	r2,119(sp)
81115894:	003b8006 	br	81114698 <__reset+0xfb0f4698>
81115898:	d8002e15 	stw	zero,184(sp)
8111589c:	dc001e04 	addi	r16,sp,120
811158a0:	003a4d06 	br	811141d8 <__reset+0xfb0f41d8>
811158a4:	8c7fff84 	addi	r17,r17,-2
811158a8:	b5bfffc4 	addi	r22,r22,-1
811158ac:	dd802615 	stw	r22,152(sp)
811158b0:	dc4022c5 	stb	r17,139(sp)
811158b4:	b000bf16 	blt	r22,zero,81115bb4 <___vfprintf_internal_r+0x20f8>
811158b8:	00800ac4 	movi	r2,43
811158bc:	d8802305 	stb	r2,140(sp)
811158c0:	00800244 	movi	r2,9
811158c4:	15807016 	blt	r2,r22,81115a88 <___vfprintf_internal_r+0x1fcc>
811158c8:	00800c04 	movi	r2,48
811158cc:	b5800c04 	addi	r22,r22,48
811158d0:	d8802345 	stb	r2,141(sp)
811158d4:	dd802385 	stb	r22,142(sp)
811158d8:	d88023c4 	addi	r2,sp,143
811158dc:	df0022c4 	addi	fp,sp,139
811158e0:	d8c03317 	ldw	r3,204(sp)
811158e4:	1739c83a 	sub	fp,r2,fp
811158e8:	d9003317 	ldw	r4,204(sp)
811158ec:	e0c7883a 	add	r3,fp,r3
811158f0:	df003a15 	stw	fp,232(sp)
811158f4:	d8c02e15 	stw	r3,184(sp)
811158f8:	00800044 	movi	r2,1
811158fc:	1100b30e 	bge	r2,r4,81115bcc <___vfprintf_internal_r+0x2110>
81115900:	d8c02e17 	ldw	r3,184(sp)
81115904:	18c00044 	addi	r3,r3,1
81115908:	d8c02e15 	stw	r3,184(sp)
8111590c:	1805883a 	mov	r2,r3
81115910:	1800ac16 	blt	r3,zero,81115bc4 <___vfprintf_internal_r+0x2108>
81115914:	d8003215 	stw	zero,200(sp)
81115918:	003e5d06 	br	81115290 <__reset+0xfb0f5290>
8111591c:	d9002c17 	ldw	r4,176(sp)
81115920:	d9801e04 	addi	r6,sp,120
81115924:	b80b883a 	mov	r5,r23
81115928:	111ba080 	call	8111ba08 <__sprint_r>
8111592c:	1039651e 	bne	r2,zero,81113ec4 <__reset+0xfb0f3ec4>
81115930:	dc402617 	ldw	r17,152(sp)
81115934:	d8c02017 	ldw	r3,128(sp)
81115938:	d8801f17 	ldw	r2,124(sp)
8111593c:	da000404 	addi	r8,sp,16
81115940:	003ed606 	br	8111549c <__reset+0xfb0f549c>
81115944:	582b883a 	mov	r21,r11
81115948:	d8002915 	stw	zero,164(sp)
8111594c:	0038bd06 	br	81113c44 <__reset+0xfb0f3c44>
81115950:	d8802917 	ldw	r2,164(sp)
81115954:	103e071e 	bne	r2,zero,81115174 <__reset+0xfb0f5174>
81115958:	dc002915 	stw	r16,164(sp)
8111595c:	003e0506 	br	81115174 <__reset+0xfb0f5174>
81115960:	d9002917 	ldw	r4,164(sp)
81115964:	20c00044 	addi	r3,r4,1
81115968:	003e0f06 	br	811151a8 <__reset+0xfb0f51a8>
8111596c:	01400184 	movi	r5,6
81115970:	d9402915 	stw	r5,164(sp)
81115974:	003dff06 	br	81115174 <__reset+0xfb0f5174>
81115978:	d8802104 	addi	r2,sp,132
8111597c:	d8800315 	stw	r2,12(sp)
81115980:	d8802504 	addi	r2,sp,148
81115984:	d8800215 	stw	r2,8(sp)
81115988:	d8802604 	addi	r2,sp,152
8111598c:	d8800115 	stw	r2,4(sp)
81115990:	d8802917 	ldw	r2,164(sp)
81115994:	d9403617 	ldw	r5,216(sp)
81115998:	d9002c17 	ldw	r4,176(sp)
8111599c:	d8800015 	stw	r2,0(sp)
811159a0:	01c000c4 	movi	r7,3
811159a4:	980d883a 	mov	r6,r19
811159a8:	da003d15 	stw	r8,244(sp)
811159ac:	11161940 	call	81116194 <_dtoa_r>
811159b0:	d8c02917 	ldw	r3,164(sp)
811159b4:	da003d17 	ldw	r8,244(sp)
811159b8:	1021883a 	mov	r16,r2
811159bc:	10f9883a 	add	fp,r2,r3
811159c0:	81000007 	ldb	r4,0(r16)
811159c4:	00800c04 	movi	r2,48
811159c8:	20805e26 	beq	r4,r2,81115b44 <___vfprintf_internal_r+0x2088>
811159cc:	d8c02617 	ldw	r3,152(sp)
811159d0:	e0f9883a 	add	fp,fp,r3
811159d4:	003e0a06 	br	81115200 <__reset+0xfb0f5200>
811159d8:	00c00b44 	movi	r3,45
811159dc:	24e0003c 	xorhi	r19,r4,32768
811159e0:	d8c02a05 	stb	r3,168(sp)
811159e4:	003de906 	br	8111518c <__reset+0xfb0f518c>
811159e8:	d8c03217 	ldw	r3,200(sp)
811159ec:	00c07a0e 	bge	zero,r3,81115bd8 <___vfprintf_internal_r+0x211c>
811159f0:	00800044 	movi	r2,1
811159f4:	d9003317 	ldw	r4,204(sp)
811159f8:	1105883a 	add	r2,r2,r4
811159fc:	d8802e15 	stw	r2,184(sp)
81115a00:	10004e16 	blt	r2,zero,81115b3c <___vfprintf_internal_r+0x2080>
81115a04:	044019c4 	movi	r17,103
81115a08:	003e2106 	br	81115290 <__reset+0xfb0f5290>
81115a0c:	d9002917 	ldw	r4,164(sp)
81115a10:	d8802104 	addi	r2,sp,132
81115a14:	d8800315 	stw	r2,12(sp)
81115a18:	d9000015 	stw	r4,0(sp)
81115a1c:	d8802504 	addi	r2,sp,148
81115a20:	d9403617 	ldw	r5,216(sp)
81115a24:	d9002c17 	ldw	r4,176(sp)
81115a28:	d8800215 	stw	r2,8(sp)
81115a2c:	d8802604 	addi	r2,sp,152
81115a30:	d8800115 	stw	r2,4(sp)
81115a34:	01c000c4 	movi	r7,3
81115a38:	980d883a 	mov	r6,r19
81115a3c:	da003d15 	stw	r8,244(sp)
81115a40:	11161940 	call	81116194 <_dtoa_r>
81115a44:	d8c02917 	ldw	r3,164(sp)
81115a48:	da003d17 	ldw	r8,244(sp)
81115a4c:	1021883a 	mov	r16,r2
81115a50:	00801184 	movi	r2,70
81115a54:	80f9883a 	add	fp,r16,r3
81115a58:	88bfd926 	beq	r17,r2,811159c0 <__reset+0xfb0f59c0>
81115a5c:	003de806 	br	81115200 <__reset+0xfb0f5200>
81115a60:	d9002917 	ldw	r4,164(sp)
81115a64:	00c04d0e 	bge	zero,r3,81115b9c <___vfprintf_internal_r+0x20e0>
81115a68:	2000441e 	bne	r4,zero,81115b7c <___vfprintf_internal_r+0x20c0>
81115a6c:	9480004c 	andi	r18,r18,1
81115a70:	9000421e 	bne	r18,zero,81115b7c <___vfprintf_internal_r+0x20c0>
81115a74:	1805883a 	mov	r2,r3
81115a78:	18007016 	blt	r3,zero,81115c3c <___vfprintf_internal_r+0x2180>
81115a7c:	d8c03217 	ldw	r3,200(sp)
81115a80:	d8c02e15 	stw	r3,184(sp)
81115a84:	003e0206 	br	81115290 <__reset+0xfb0f5290>
81115a88:	df0022c4 	addi	fp,sp,139
81115a8c:	dc002915 	stw	r16,164(sp)
81115a90:	4027883a 	mov	r19,r8
81115a94:	e021883a 	mov	r16,fp
81115a98:	b009883a 	mov	r4,r22
81115a9c:	01400284 	movi	r5,10
81115aa0:	111e1980 	call	8111e198 <__modsi3>
81115aa4:	10800c04 	addi	r2,r2,48
81115aa8:	843fffc4 	addi	r16,r16,-1
81115aac:	b009883a 	mov	r4,r22
81115ab0:	01400284 	movi	r5,10
81115ab4:	80800005 	stb	r2,0(r16)
81115ab8:	111e1140 	call	8111e114 <__divsi3>
81115abc:	102d883a 	mov	r22,r2
81115ac0:	00800244 	movi	r2,9
81115ac4:	15bff416 	blt	r2,r22,81115a98 <__reset+0xfb0f5a98>
81115ac8:	9811883a 	mov	r8,r19
81115acc:	b0800c04 	addi	r2,r22,48
81115ad0:	8027883a 	mov	r19,r16
81115ad4:	997fffc4 	addi	r5,r19,-1
81115ad8:	98bfffc5 	stb	r2,-1(r19)
81115adc:	dc002917 	ldw	r16,164(sp)
81115ae0:	2f006a2e 	bgeu	r5,fp,81115c8c <___vfprintf_internal_r+0x21d0>
81115ae4:	d9c02384 	addi	r7,sp,142
81115ae8:	3ccfc83a 	sub	r7,r7,r19
81115aec:	d9002344 	addi	r4,sp,141
81115af0:	e1cf883a 	add	r7,fp,r7
81115af4:	00000106 	br	81115afc <___vfprintf_internal_r+0x2040>
81115af8:	28800003 	ldbu	r2,0(r5)
81115afc:	20800005 	stb	r2,0(r4)
81115b00:	21000044 	addi	r4,r4,1
81115b04:	29400044 	addi	r5,r5,1
81115b08:	393ffb1e 	bne	r7,r4,81115af8 <__reset+0xfb0f5af8>
81115b0c:	d8802304 	addi	r2,sp,140
81115b10:	14c5c83a 	sub	r2,r2,r19
81115b14:	d8c02344 	addi	r3,sp,141
81115b18:	1885883a 	add	r2,r3,r2
81115b1c:	003f7006 	br	811158e0 <__reset+0xfb0f58e0>
81115b20:	0005883a 	mov	r2,zero
81115b24:	003f0f06 	br	81115764 <__reset+0xfb0f5764>
81115b28:	d8c03217 	ldw	r3,200(sp)
81115b2c:	18c00044 	addi	r3,r3,1
81115b30:	d8c02e15 	stw	r3,184(sp)
81115b34:	1805883a 	mov	r2,r3
81115b38:	183fb20e 	bge	r3,zero,81115a04 <__reset+0xfb0f5a04>
81115b3c:	0005883a 	mov	r2,zero
81115b40:	003fb006 	br	81115a04 <__reset+0xfb0f5a04>
81115b44:	d9003617 	ldw	r4,216(sp)
81115b48:	000d883a 	mov	r6,zero
81115b4c:	000f883a 	mov	r7,zero
81115b50:	980b883a 	mov	r5,r19
81115b54:	d8c03c15 	stw	r3,240(sp)
81115b58:	da003d15 	stw	r8,244(sp)
81115b5c:	111f45c0 	call	8111f45c <__eqdf2>
81115b60:	d8c03c17 	ldw	r3,240(sp)
81115b64:	da003d17 	ldw	r8,244(sp)
81115b68:	103f9826 	beq	r2,zero,811159cc <__reset+0xfb0f59cc>
81115b6c:	00800044 	movi	r2,1
81115b70:	10c7c83a 	sub	r3,r2,r3
81115b74:	d8c02615 	stw	r3,152(sp)
81115b78:	003f9506 	br	811159d0 <__reset+0xfb0f59d0>
81115b7c:	d9002917 	ldw	r4,164(sp)
81115b80:	d8c03217 	ldw	r3,200(sp)
81115b84:	20800044 	addi	r2,r4,1
81115b88:	1885883a 	add	r2,r3,r2
81115b8c:	d8802e15 	stw	r2,184(sp)
81115b90:	103dbf0e 	bge	r2,zero,81115290 <__reset+0xfb0f5290>
81115b94:	0005883a 	mov	r2,zero
81115b98:	003dbd06 	br	81115290 <__reset+0xfb0f5290>
81115b9c:	2000211e 	bne	r4,zero,81115c24 <___vfprintf_internal_r+0x2168>
81115ba0:	9480004c 	andi	r18,r18,1
81115ba4:	90001f1e 	bne	r18,zero,81115c24 <___vfprintf_internal_r+0x2168>
81115ba8:	00800044 	movi	r2,1
81115bac:	d8802e15 	stw	r2,184(sp)
81115bb0:	003db706 	br	81115290 <__reset+0xfb0f5290>
81115bb4:	00800b44 	movi	r2,45
81115bb8:	05adc83a 	sub	r22,zero,r22
81115bbc:	d8802305 	stb	r2,140(sp)
81115bc0:	003f3f06 	br	811158c0 <__reset+0xfb0f58c0>
81115bc4:	0005883a 	mov	r2,zero
81115bc8:	003f5206 	br	81115914 <__reset+0xfb0f5914>
81115bcc:	90a4703a 	and	r18,r18,r2
81115bd0:	903f4e26 	beq	r18,zero,8111590c <__reset+0xfb0f590c>
81115bd4:	003f4a06 	br	81115900 <__reset+0xfb0f5900>
81115bd8:	00800084 	movi	r2,2
81115bdc:	10c5c83a 	sub	r2,r2,r3
81115be0:	003f8406 	br	811159f4 <__reset+0xfb0f59f4>
81115be4:	d8802d17 	ldw	r2,180(sp)
81115be8:	d9002d17 	ldw	r4,180(sp)
81115bec:	ac400043 	ldbu	r17,1(r21)
81115bf0:	10800017 	ldw	r2,0(r2)
81115bf4:	582b883a 	mov	r21,r11
81115bf8:	d8802915 	stw	r2,164(sp)
81115bfc:	20800104 	addi	r2,r4,4
81115c00:	d9002917 	ldw	r4,164(sp)
81115c04:	d8802d15 	stw	r2,180(sp)
81115c08:	203e7a0e 	bge	r4,zero,811155f4 <__reset+0xfb0f55f4>
81115c0c:	8c403fcc 	andi	r17,r17,255
81115c10:	00bfffc4 	movi	r2,-1
81115c14:	8c40201c 	xori	r17,r17,128
81115c18:	d8802915 	stw	r2,164(sp)
81115c1c:	8c7fe004 	addi	r17,r17,-128
81115c20:	00380706 	br	81113c40 <__reset+0xfb0f3c40>
81115c24:	d8c02917 	ldw	r3,164(sp)
81115c28:	18c00084 	addi	r3,r3,2
81115c2c:	d8c02e15 	stw	r3,184(sp)
81115c30:	1805883a 	mov	r2,r3
81115c34:	183d960e 	bge	r3,zero,81115290 <__reset+0xfb0f5290>
81115c38:	003fd606 	br	81115b94 <__reset+0xfb0f5b94>
81115c3c:	0005883a 	mov	r2,zero
81115c40:	003f8e06 	br	81115a7c <__reset+0xfb0f5a7c>
81115c44:	9080004c 	andi	r2,r18,1
81115c48:	103f811e 	bne	r2,zero,81115a50 <__reset+0xfb0f5a50>
81115c4c:	d8802117 	ldw	r2,132(sp)
81115c50:	1405c83a 	sub	r2,r2,r16
81115c54:	d8803315 	stw	r2,204(sp)
81115c58:	b47ef326 	beq	r22,r17,81115828 <__reset+0xfb0f5828>
81115c5c:	dd802617 	ldw	r22,152(sp)
81115c60:	003f1106 	br	811158a8 <__reset+0xfb0f58a8>
81115c64:	d9c02785 	stb	r7,158(sp)
81115c68:	00390406 	br	8111407c <__reset+0xfb0f407c>
81115c6c:	d9c02785 	stb	r7,158(sp)
81115c70:	0038d306 	br	81113fc0 <__reset+0xfb0f3fc0>
81115c74:	d9c02785 	stb	r7,158(sp)
81115c78:	003a6106 	br	81114600 <__reset+0xfb0f4600>
81115c7c:	d9c02785 	stb	r7,158(sp)
81115c80:	003af806 	br	81114864 <__reset+0xfb0f4864>
81115c84:	0005883a 	mov	r2,zero
81115c88:	003d7e06 	br	81115284 <__reset+0xfb0f5284>
81115c8c:	d8802344 	addi	r2,sp,141
81115c90:	003f1306 	br	811158e0 <__reset+0xfb0f58e0>
81115c94:	d9c02785 	stb	r7,158(sp)
81115c98:	00392306 	br	81114128 <__reset+0xfb0f4128>
81115c9c:	d9c02785 	stb	r7,158(sp)
81115ca0:	003aa906 	br	81114748 <__reset+0xfb0f4748>
81115ca4:	d9c02785 	stb	r7,158(sp)
81115ca8:	003a3d06 	br	811145a0 <__reset+0xfb0f45a0>
81115cac:	d9c02785 	stb	r7,158(sp)
81115cb0:	003aca06 	br	811147dc <__reset+0xfb0f47dc>

81115cb4 <__vfprintf_internal>:
81115cb4:	00a044f4 	movhi	r2,33043
81115cb8:	10a2f004 	addi	r2,r2,-29760
81115cbc:	300f883a 	mov	r7,r6
81115cc0:	280d883a 	mov	r6,r5
81115cc4:	200b883a 	mov	r5,r4
81115cc8:	11000017 	ldw	r4,0(r2)
81115ccc:	1113abc1 	jmpi	81113abc <___vfprintf_internal_r>

81115cd0 <__sbprintf>:
81115cd0:	2880030b 	ldhu	r2,12(r5)
81115cd4:	2ac01917 	ldw	r11,100(r5)
81115cd8:	2a80038b 	ldhu	r10,14(r5)
81115cdc:	2a400717 	ldw	r9,28(r5)
81115ce0:	2a000917 	ldw	r8,36(r5)
81115ce4:	defee204 	addi	sp,sp,-1144
81115ce8:	00c10004 	movi	r3,1024
81115cec:	dc011a15 	stw	r16,1128(sp)
81115cf0:	10bfff4c 	andi	r2,r2,65533
81115cf4:	2821883a 	mov	r16,r5
81115cf8:	d8cb883a 	add	r5,sp,r3
81115cfc:	dc811c15 	stw	r18,1136(sp)
81115d00:	dc411b15 	stw	r17,1132(sp)
81115d04:	dfc11d15 	stw	ra,1140(sp)
81115d08:	2025883a 	mov	r18,r4
81115d0c:	d881030d 	sth	r2,1036(sp)
81115d10:	dac11915 	stw	r11,1124(sp)
81115d14:	da81038d 	sth	r10,1038(sp)
81115d18:	da410715 	stw	r9,1052(sp)
81115d1c:	da010915 	stw	r8,1060(sp)
81115d20:	dec10015 	stw	sp,1024(sp)
81115d24:	dec10415 	stw	sp,1040(sp)
81115d28:	d8c10215 	stw	r3,1032(sp)
81115d2c:	d8c10515 	stw	r3,1044(sp)
81115d30:	d8010615 	stw	zero,1048(sp)
81115d34:	1113abc0 	call	81113abc <___vfprintf_internal_r>
81115d38:	1023883a 	mov	r17,r2
81115d3c:	10000416 	blt	r2,zero,81115d50 <__sbprintf+0x80>
81115d40:	d9410004 	addi	r5,sp,1024
81115d44:	9009883a 	mov	r4,r18
81115d48:	1117a380 	call	81117a38 <_fflush_r>
81115d4c:	10000d1e 	bne	r2,zero,81115d84 <__sbprintf+0xb4>
81115d50:	d881030b 	ldhu	r2,1036(sp)
81115d54:	1080100c 	andi	r2,r2,64
81115d58:	10000326 	beq	r2,zero,81115d68 <__sbprintf+0x98>
81115d5c:	8080030b 	ldhu	r2,12(r16)
81115d60:	10801014 	ori	r2,r2,64
81115d64:	8080030d 	sth	r2,12(r16)
81115d68:	8805883a 	mov	r2,r17
81115d6c:	dfc11d17 	ldw	ra,1140(sp)
81115d70:	dc811c17 	ldw	r18,1136(sp)
81115d74:	dc411b17 	ldw	r17,1132(sp)
81115d78:	dc011a17 	ldw	r16,1128(sp)
81115d7c:	dec11e04 	addi	sp,sp,1144
81115d80:	f800283a 	ret
81115d84:	047fffc4 	movi	r17,-1
81115d88:	003ff106 	br	81115d50 <__reset+0xfb0f5d50>

81115d8c <_write_r>:
81115d8c:	defffd04 	addi	sp,sp,-12
81115d90:	2805883a 	mov	r2,r5
81115d94:	dc000015 	stw	r16,0(sp)
81115d98:	042044f4 	movhi	r16,33043
81115d9c:	dc400115 	stw	r17,4(sp)
81115da0:	300b883a 	mov	r5,r6
81115da4:	84231f04 	addi	r16,r16,-29572
81115da8:	2023883a 	mov	r17,r4
81115dac:	380d883a 	mov	r6,r7
81115db0:	1009883a 	mov	r4,r2
81115db4:	dfc00215 	stw	ra,8(sp)
81115db8:	80000015 	stw	zero,0(r16)
81115dbc:	11210040 	call	81121004 <write>
81115dc0:	00ffffc4 	movi	r3,-1
81115dc4:	10c00526 	beq	r2,r3,81115ddc <_write_r+0x50>
81115dc8:	dfc00217 	ldw	ra,8(sp)
81115dcc:	dc400117 	ldw	r17,4(sp)
81115dd0:	dc000017 	ldw	r16,0(sp)
81115dd4:	dec00304 	addi	sp,sp,12
81115dd8:	f800283a 	ret
81115ddc:	80c00017 	ldw	r3,0(r16)
81115de0:	183ff926 	beq	r3,zero,81115dc8 <__reset+0xfb0f5dc8>
81115de4:	88c00015 	stw	r3,0(r17)
81115de8:	003ff706 	br	81115dc8 <__reset+0xfb0f5dc8>

81115dec <__swsetup_r>:
81115dec:	00a044f4 	movhi	r2,33043
81115df0:	defffd04 	addi	sp,sp,-12
81115df4:	10a2f004 	addi	r2,r2,-29760
81115df8:	dc400115 	stw	r17,4(sp)
81115dfc:	2023883a 	mov	r17,r4
81115e00:	11000017 	ldw	r4,0(r2)
81115e04:	dc000015 	stw	r16,0(sp)
81115e08:	dfc00215 	stw	ra,8(sp)
81115e0c:	2821883a 	mov	r16,r5
81115e10:	20000226 	beq	r4,zero,81115e1c <__swsetup_r+0x30>
81115e14:	20800e17 	ldw	r2,56(r4)
81115e18:	10003126 	beq	r2,zero,81115ee0 <__swsetup_r+0xf4>
81115e1c:	8080030b 	ldhu	r2,12(r16)
81115e20:	10c0020c 	andi	r3,r2,8
81115e24:	1009883a 	mov	r4,r2
81115e28:	18000f26 	beq	r3,zero,81115e68 <__swsetup_r+0x7c>
81115e2c:	80c00417 	ldw	r3,16(r16)
81115e30:	18001526 	beq	r3,zero,81115e88 <__swsetup_r+0x9c>
81115e34:	1100004c 	andi	r4,r2,1
81115e38:	20001c1e 	bne	r4,zero,81115eac <__swsetup_r+0xc0>
81115e3c:	1080008c 	andi	r2,r2,2
81115e40:	1000291e 	bne	r2,zero,81115ee8 <__swsetup_r+0xfc>
81115e44:	80800517 	ldw	r2,20(r16)
81115e48:	80800215 	stw	r2,8(r16)
81115e4c:	18001c26 	beq	r3,zero,81115ec0 <__swsetup_r+0xd4>
81115e50:	0005883a 	mov	r2,zero
81115e54:	dfc00217 	ldw	ra,8(sp)
81115e58:	dc400117 	ldw	r17,4(sp)
81115e5c:	dc000017 	ldw	r16,0(sp)
81115e60:	dec00304 	addi	sp,sp,12
81115e64:	f800283a 	ret
81115e68:	2080040c 	andi	r2,r4,16
81115e6c:	10002e26 	beq	r2,zero,81115f28 <__swsetup_r+0x13c>
81115e70:	2080010c 	andi	r2,r4,4
81115e74:	10001e1e 	bne	r2,zero,81115ef0 <__swsetup_r+0x104>
81115e78:	80c00417 	ldw	r3,16(r16)
81115e7c:	20800214 	ori	r2,r4,8
81115e80:	8080030d 	sth	r2,12(r16)
81115e84:	183feb1e 	bne	r3,zero,81115e34 <__reset+0xfb0f5e34>
81115e88:	1100a00c 	andi	r4,r2,640
81115e8c:	01408004 	movi	r5,512
81115e90:	217fe826 	beq	r4,r5,81115e34 <__reset+0xfb0f5e34>
81115e94:	800b883a 	mov	r5,r16
81115e98:	8809883a 	mov	r4,r17
81115e9c:	11107800 	call	81110780 <__smakebuf_r>
81115ea0:	8080030b 	ldhu	r2,12(r16)
81115ea4:	80c00417 	ldw	r3,16(r16)
81115ea8:	003fe206 	br	81115e34 <__reset+0xfb0f5e34>
81115eac:	80800517 	ldw	r2,20(r16)
81115eb0:	80000215 	stw	zero,8(r16)
81115eb4:	0085c83a 	sub	r2,zero,r2
81115eb8:	80800615 	stw	r2,24(r16)
81115ebc:	183fe41e 	bne	r3,zero,81115e50 <__reset+0xfb0f5e50>
81115ec0:	80c0030b 	ldhu	r3,12(r16)
81115ec4:	0005883a 	mov	r2,zero
81115ec8:	1900200c 	andi	r4,r3,128
81115ecc:	203fe126 	beq	r4,zero,81115e54 <__reset+0xfb0f5e54>
81115ed0:	18c01014 	ori	r3,r3,64
81115ed4:	80c0030d 	sth	r3,12(r16)
81115ed8:	00bfffc4 	movi	r2,-1
81115edc:	003fdd06 	br	81115e54 <__reset+0xfb0f5e54>
81115ee0:	1117e140 	call	81117e14 <__sinit>
81115ee4:	003fcd06 	br	81115e1c <__reset+0xfb0f5e1c>
81115ee8:	0005883a 	mov	r2,zero
81115eec:	003fd606 	br	81115e48 <__reset+0xfb0f5e48>
81115ef0:	81400c17 	ldw	r5,48(r16)
81115ef4:	28000626 	beq	r5,zero,81115f10 <__swsetup_r+0x124>
81115ef8:	80801004 	addi	r2,r16,64
81115efc:	28800326 	beq	r5,r2,81115f0c <__swsetup_r+0x120>
81115f00:	8809883a 	mov	r4,r17
81115f04:	11180340 	call	81118034 <_free_r>
81115f08:	8100030b 	ldhu	r4,12(r16)
81115f0c:	80000c15 	stw	zero,48(r16)
81115f10:	80c00417 	ldw	r3,16(r16)
81115f14:	00bff6c4 	movi	r2,-37
81115f18:	1108703a 	and	r4,r2,r4
81115f1c:	80000115 	stw	zero,4(r16)
81115f20:	80c00015 	stw	r3,0(r16)
81115f24:	003fd506 	br	81115e7c <__reset+0xfb0f5e7c>
81115f28:	00800244 	movi	r2,9
81115f2c:	88800015 	stw	r2,0(r17)
81115f30:	20801014 	ori	r2,r4,64
81115f34:	8080030d 	sth	r2,12(r16)
81115f38:	00bfffc4 	movi	r2,-1
81115f3c:	003fc506 	br	81115e54 <__reset+0xfb0f5e54>

81115f40 <_close_r>:
81115f40:	defffd04 	addi	sp,sp,-12
81115f44:	dc000015 	stw	r16,0(sp)
81115f48:	042044f4 	movhi	r16,33043
81115f4c:	dc400115 	stw	r17,4(sp)
81115f50:	84231f04 	addi	r16,r16,-29572
81115f54:	2023883a 	mov	r17,r4
81115f58:	2809883a 	mov	r4,r5
81115f5c:	dfc00215 	stw	ra,8(sp)
81115f60:	80000015 	stw	zero,0(r16)
81115f64:	11203180 	call	81120318 <close>
81115f68:	00ffffc4 	movi	r3,-1
81115f6c:	10c00526 	beq	r2,r3,81115f84 <_close_r+0x44>
81115f70:	dfc00217 	ldw	ra,8(sp)
81115f74:	dc400117 	ldw	r17,4(sp)
81115f78:	dc000017 	ldw	r16,0(sp)
81115f7c:	dec00304 	addi	sp,sp,12
81115f80:	f800283a 	ret
81115f84:	80c00017 	ldw	r3,0(r16)
81115f88:	183ff926 	beq	r3,zero,81115f70 <__reset+0xfb0f5f70>
81115f8c:	88c00015 	stw	r3,0(r17)
81115f90:	003ff706 	br	81115f70 <__reset+0xfb0f5f70>

81115f94 <quorem>:
81115f94:	defff704 	addi	sp,sp,-36
81115f98:	dc800215 	stw	r18,8(sp)
81115f9c:	20800417 	ldw	r2,16(r4)
81115fa0:	2c800417 	ldw	r18,16(r5)
81115fa4:	dfc00815 	stw	ra,32(sp)
81115fa8:	ddc00715 	stw	r23,28(sp)
81115fac:	dd800615 	stw	r22,24(sp)
81115fb0:	dd400515 	stw	r21,20(sp)
81115fb4:	dd000415 	stw	r20,16(sp)
81115fb8:	dcc00315 	stw	r19,12(sp)
81115fbc:	dc400115 	stw	r17,4(sp)
81115fc0:	dc000015 	stw	r16,0(sp)
81115fc4:	14807116 	blt	r2,r18,8111618c <quorem+0x1f8>
81115fc8:	94bfffc4 	addi	r18,r18,-1
81115fcc:	94ad883a 	add	r22,r18,r18
81115fd0:	b5ad883a 	add	r22,r22,r22
81115fd4:	2c400504 	addi	r17,r5,20
81115fd8:	8da9883a 	add	r20,r17,r22
81115fdc:	25400504 	addi	r21,r4,20
81115fe0:	282f883a 	mov	r23,r5
81115fe4:	adad883a 	add	r22,r21,r22
81115fe8:	a1400017 	ldw	r5,0(r20)
81115fec:	2021883a 	mov	r16,r4
81115ff0:	b1000017 	ldw	r4,0(r22)
81115ff4:	29400044 	addi	r5,r5,1
81115ff8:	111e20c0 	call	8111e20c <__udivsi3>
81115ffc:	1027883a 	mov	r19,r2
81116000:	10002c26 	beq	r2,zero,811160b4 <quorem+0x120>
81116004:	a813883a 	mov	r9,r21
81116008:	880b883a 	mov	r5,r17
8111600c:	0009883a 	mov	r4,zero
81116010:	000d883a 	mov	r6,zero
81116014:	2a000017 	ldw	r8,0(r5)
81116018:	49c00017 	ldw	r7,0(r9)
8111601c:	29400104 	addi	r5,r5,4
81116020:	40bfffcc 	andi	r2,r8,65535
81116024:	14c5383a 	mul	r2,r2,r19
81116028:	4010d43a 	srli	r8,r8,16
8111602c:	38ffffcc 	andi	r3,r7,65535
81116030:	1105883a 	add	r2,r2,r4
81116034:	1008d43a 	srli	r4,r2,16
81116038:	44d1383a 	mul	r8,r8,r19
8111603c:	198d883a 	add	r6,r3,r6
81116040:	10ffffcc 	andi	r3,r2,65535
81116044:	30c7c83a 	sub	r3,r6,r3
81116048:	380ed43a 	srli	r7,r7,16
8111604c:	4105883a 	add	r2,r8,r4
81116050:	180dd43a 	srai	r6,r3,16
81116054:	113fffcc 	andi	r4,r2,65535
81116058:	390fc83a 	sub	r7,r7,r4
8111605c:	398d883a 	add	r6,r7,r6
81116060:	300e943a 	slli	r7,r6,16
81116064:	18ffffcc 	andi	r3,r3,65535
81116068:	1008d43a 	srli	r4,r2,16
8111606c:	38ceb03a 	or	r7,r7,r3
81116070:	49c00015 	stw	r7,0(r9)
81116074:	300dd43a 	srai	r6,r6,16
81116078:	4a400104 	addi	r9,r9,4
8111607c:	a17fe52e 	bgeu	r20,r5,81116014 <__reset+0xfb0f6014>
81116080:	b0800017 	ldw	r2,0(r22)
81116084:	10000b1e 	bne	r2,zero,811160b4 <quorem+0x120>
81116088:	b0bfff04 	addi	r2,r22,-4
8111608c:	a880082e 	bgeu	r21,r2,811160b0 <quorem+0x11c>
81116090:	b0ffff17 	ldw	r3,-4(r22)
81116094:	18000326 	beq	r3,zero,811160a4 <quorem+0x110>
81116098:	00000506 	br	811160b0 <quorem+0x11c>
8111609c:	10c00017 	ldw	r3,0(r2)
811160a0:	1800031e 	bne	r3,zero,811160b0 <quorem+0x11c>
811160a4:	10bfff04 	addi	r2,r2,-4
811160a8:	94bfffc4 	addi	r18,r18,-1
811160ac:	a8bffb36 	bltu	r21,r2,8111609c <__reset+0xfb0f609c>
811160b0:	84800415 	stw	r18,16(r16)
811160b4:	b80b883a 	mov	r5,r23
811160b8:	8009883a 	mov	r4,r16
811160bc:	11196200 	call	81119620 <__mcmp>
811160c0:	10002616 	blt	r2,zero,8111615c <quorem+0x1c8>
811160c4:	9cc00044 	addi	r19,r19,1
811160c8:	a805883a 	mov	r2,r21
811160cc:	000b883a 	mov	r5,zero
811160d0:	11000017 	ldw	r4,0(r2)
811160d4:	89800017 	ldw	r6,0(r17)
811160d8:	10800104 	addi	r2,r2,4
811160dc:	20ffffcc 	andi	r3,r4,65535
811160e0:	194b883a 	add	r5,r3,r5
811160e4:	30ffffcc 	andi	r3,r6,65535
811160e8:	28c7c83a 	sub	r3,r5,r3
811160ec:	300cd43a 	srli	r6,r6,16
811160f0:	2008d43a 	srli	r4,r4,16
811160f4:	180bd43a 	srai	r5,r3,16
811160f8:	18ffffcc 	andi	r3,r3,65535
811160fc:	2189c83a 	sub	r4,r4,r6
81116100:	2149883a 	add	r4,r4,r5
81116104:	200c943a 	slli	r6,r4,16
81116108:	8c400104 	addi	r17,r17,4
8111610c:	200bd43a 	srai	r5,r4,16
81116110:	30c6b03a 	or	r3,r6,r3
81116114:	10ffff15 	stw	r3,-4(r2)
81116118:	a47fed2e 	bgeu	r20,r17,811160d0 <__reset+0xfb0f60d0>
8111611c:	9485883a 	add	r2,r18,r18
81116120:	1085883a 	add	r2,r2,r2
81116124:	a887883a 	add	r3,r21,r2
81116128:	18800017 	ldw	r2,0(r3)
8111612c:	10000b1e 	bne	r2,zero,8111615c <quorem+0x1c8>
81116130:	18bfff04 	addi	r2,r3,-4
81116134:	a880082e 	bgeu	r21,r2,81116158 <quorem+0x1c4>
81116138:	18ffff17 	ldw	r3,-4(r3)
8111613c:	18000326 	beq	r3,zero,8111614c <quorem+0x1b8>
81116140:	00000506 	br	81116158 <quorem+0x1c4>
81116144:	10c00017 	ldw	r3,0(r2)
81116148:	1800031e 	bne	r3,zero,81116158 <quorem+0x1c4>
8111614c:	10bfff04 	addi	r2,r2,-4
81116150:	94bfffc4 	addi	r18,r18,-1
81116154:	a8bffb36 	bltu	r21,r2,81116144 <__reset+0xfb0f6144>
81116158:	84800415 	stw	r18,16(r16)
8111615c:	9805883a 	mov	r2,r19
81116160:	dfc00817 	ldw	ra,32(sp)
81116164:	ddc00717 	ldw	r23,28(sp)
81116168:	dd800617 	ldw	r22,24(sp)
8111616c:	dd400517 	ldw	r21,20(sp)
81116170:	dd000417 	ldw	r20,16(sp)
81116174:	dcc00317 	ldw	r19,12(sp)
81116178:	dc800217 	ldw	r18,8(sp)
8111617c:	dc400117 	ldw	r17,4(sp)
81116180:	dc000017 	ldw	r16,0(sp)
81116184:	dec00904 	addi	sp,sp,36
81116188:	f800283a 	ret
8111618c:	0005883a 	mov	r2,zero
81116190:	003ff306 	br	81116160 <__reset+0xfb0f6160>

81116194 <_dtoa_r>:
81116194:	20801017 	ldw	r2,64(r4)
81116198:	deffde04 	addi	sp,sp,-136
8111619c:	df002015 	stw	fp,128(sp)
811161a0:	dcc01b15 	stw	r19,108(sp)
811161a4:	dc801a15 	stw	r18,104(sp)
811161a8:	dc401915 	stw	r17,100(sp)
811161ac:	dc001815 	stw	r16,96(sp)
811161b0:	dfc02115 	stw	ra,132(sp)
811161b4:	ddc01f15 	stw	r23,124(sp)
811161b8:	dd801e15 	stw	r22,120(sp)
811161bc:	dd401d15 	stw	r21,116(sp)
811161c0:	dd001c15 	stw	r20,112(sp)
811161c4:	d9c00315 	stw	r7,12(sp)
811161c8:	2039883a 	mov	fp,r4
811161cc:	3023883a 	mov	r17,r6
811161d0:	2825883a 	mov	r18,r5
811161d4:	dc002417 	ldw	r16,144(sp)
811161d8:	3027883a 	mov	r19,r6
811161dc:	10000826 	beq	r2,zero,81116200 <_dtoa_r+0x6c>
811161e0:	21801117 	ldw	r6,68(r4)
811161e4:	00c00044 	movi	r3,1
811161e8:	100b883a 	mov	r5,r2
811161ec:	1986983a 	sll	r3,r3,r6
811161f0:	11800115 	stw	r6,4(r2)
811161f4:	10c00215 	stw	r3,8(r2)
811161f8:	1118e000 	call	81118e00 <_Bfree>
811161fc:	e0001015 	stw	zero,64(fp)
81116200:	88002e16 	blt	r17,zero,811162bc <_dtoa_r+0x128>
81116204:	80000015 	stw	zero,0(r16)
81116208:	889ffc2c 	andhi	r2,r17,32752
8111620c:	00dffc34 	movhi	r3,32752
81116210:	10c01c26 	beq	r2,r3,81116284 <_dtoa_r+0xf0>
81116214:	000d883a 	mov	r6,zero
81116218:	000f883a 	mov	r7,zero
8111621c:	9009883a 	mov	r4,r18
81116220:	980b883a 	mov	r5,r19
81116224:	111f45c0 	call	8111f45c <__eqdf2>
81116228:	10002b1e 	bne	r2,zero,811162d8 <_dtoa_r+0x144>
8111622c:	d9c02317 	ldw	r7,140(sp)
81116230:	00800044 	movi	r2,1
81116234:	38800015 	stw	r2,0(r7)
81116238:	d8802517 	ldw	r2,148(sp)
8111623c:	10019e26 	beq	r2,zero,811168b8 <_dtoa_r+0x724>
81116240:	d8c02517 	ldw	r3,148(sp)
81116244:	00a044b4 	movhi	r2,33042
81116248:	109ab944 	addi	r2,r2,27365
8111624c:	18800015 	stw	r2,0(r3)
81116250:	10bfffc4 	addi	r2,r2,-1
81116254:	dfc02117 	ldw	ra,132(sp)
81116258:	df002017 	ldw	fp,128(sp)
8111625c:	ddc01f17 	ldw	r23,124(sp)
81116260:	dd801e17 	ldw	r22,120(sp)
81116264:	dd401d17 	ldw	r21,116(sp)
81116268:	dd001c17 	ldw	r20,112(sp)
8111626c:	dcc01b17 	ldw	r19,108(sp)
81116270:	dc801a17 	ldw	r18,104(sp)
81116274:	dc401917 	ldw	r17,100(sp)
81116278:	dc001817 	ldw	r16,96(sp)
8111627c:	dec02204 	addi	sp,sp,136
81116280:	f800283a 	ret
81116284:	d8c02317 	ldw	r3,140(sp)
81116288:	0089c3c4 	movi	r2,9999
8111628c:	18800015 	stw	r2,0(r3)
81116290:	90017726 	beq	r18,zero,81116870 <_dtoa_r+0x6dc>
81116294:	00a044b4 	movhi	r2,33042
81116298:	109acd04 	addi	r2,r2,27444
8111629c:	d9002517 	ldw	r4,148(sp)
811162a0:	203fec26 	beq	r4,zero,81116254 <__reset+0xfb0f6254>
811162a4:	10c000c7 	ldb	r3,3(r2)
811162a8:	1801781e 	bne	r3,zero,8111688c <_dtoa_r+0x6f8>
811162ac:	10c000c4 	addi	r3,r2,3
811162b0:	d9802517 	ldw	r6,148(sp)
811162b4:	30c00015 	stw	r3,0(r6)
811162b8:	003fe606 	br	81116254 <__reset+0xfb0f6254>
811162bc:	04e00034 	movhi	r19,32768
811162c0:	9cffffc4 	addi	r19,r19,-1
811162c4:	00800044 	movi	r2,1
811162c8:	8ce6703a 	and	r19,r17,r19
811162cc:	80800015 	stw	r2,0(r16)
811162d0:	9823883a 	mov	r17,r19
811162d4:	003fcc06 	br	81116208 <__reset+0xfb0f6208>
811162d8:	d8800204 	addi	r2,sp,8
811162dc:	d8800015 	stw	r2,0(sp)
811162e0:	d9c00104 	addi	r7,sp,4
811162e4:	900b883a 	mov	r5,r18
811162e8:	980d883a 	mov	r6,r19
811162ec:	e009883a 	mov	r4,fp
811162f0:	8820d53a 	srli	r16,r17,20
811162f4:	11199ec0 	call	811199ec <__d2b>
811162f8:	d8800915 	stw	r2,36(sp)
811162fc:	8001651e 	bne	r16,zero,81116894 <_dtoa_r+0x700>
81116300:	dd800217 	ldw	r22,8(sp)
81116304:	dc000117 	ldw	r16,4(sp)
81116308:	00800804 	movi	r2,32
8111630c:	b421883a 	add	r16,r22,r16
81116310:	80c10c84 	addi	r3,r16,1074
81116314:	10c2d10e 	bge	r2,r3,81116e5c <_dtoa_r+0xcc8>
81116318:	00801004 	movi	r2,64
8111631c:	81010484 	addi	r4,r16,1042
81116320:	10c7c83a 	sub	r3,r2,r3
81116324:	9108d83a 	srl	r4,r18,r4
81116328:	88e2983a 	sll	r17,r17,r3
8111632c:	2448b03a 	or	r4,r4,r17
81116330:	112010c0 	call	8112010c <__floatunsidf>
81116334:	017f8434 	movhi	r5,65040
81116338:	01800044 	movi	r6,1
8111633c:	1009883a 	mov	r4,r2
81116340:	194b883a 	add	r5,r3,r5
81116344:	843fffc4 	addi	r16,r16,-1
81116348:	d9801115 	stw	r6,68(sp)
8111634c:	000d883a 	mov	r6,zero
81116350:	01cffe34 	movhi	r7,16376
81116354:	111f6b40 	call	8111f6b4 <__subdf3>
81116358:	0198dbf4 	movhi	r6,25455
8111635c:	01cff4f4 	movhi	r7,16339
81116360:	3190d844 	addi	r6,r6,17249
81116364:	39e1e9c4 	addi	r7,r7,-30809
81116368:	1009883a 	mov	r4,r2
8111636c:	180b883a 	mov	r5,r3
81116370:	110f5200 	call	8110f520 <__muldf3>
81116374:	01a2d874 	movhi	r6,35681
81116378:	01cff1f4 	movhi	r7,16327
8111637c:	31b22cc4 	addi	r6,r6,-14157
81116380:	39e28a04 	addi	r7,r7,-30168
81116384:	180b883a 	mov	r5,r3
81116388:	1009883a 	mov	r4,r2
8111638c:	111e2c80 	call	8111e2c8 <__adddf3>
81116390:	8009883a 	mov	r4,r16
81116394:	1029883a 	mov	r20,r2
81116398:	1823883a 	mov	r17,r3
8111639c:	11200300 	call	81120030 <__floatsidf>
811163a0:	019427f4 	movhi	r6,20639
811163a4:	01cff4f4 	movhi	r7,16339
811163a8:	319e7ec4 	addi	r6,r6,31227
811163ac:	39d104c4 	addi	r7,r7,17427
811163b0:	1009883a 	mov	r4,r2
811163b4:	180b883a 	mov	r5,r3
811163b8:	110f5200 	call	8110f520 <__muldf3>
811163bc:	100d883a 	mov	r6,r2
811163c0:	180f883a 	mov	r7,r3
811163c4:	a009883a 	mov	r4,r20
811163c8:	880b883a 	mov	r5,r17
811163cc:	111e2c80 	call	8111e2c8 <__adddf3>
811163d0:	1009883a 	mov	r4,r2
811163d4:	180b883a 	mov	r5,r3
811163d8:	1029883a 	mov	r20,r2
811163dc:	1823883a 	mov	r17,r3
811163e0:	111ffb00 	call	8111ffb0 <__fixdfsi>
811163e4:	000d883a 	mov	r6,zero
811163e8:	000f883a 	mov	r7,zero
811163ec:	a009883a 	mov	r4,r20
811163f0:	880b883a 	mov	r5,r17
811163f4:	d8800515 	stw	r2,20(sp)
811163f8:	111f5c00 	call	8111f5c0 <__ledf2>
811163fc:	10028716 	blt	r2,zero,81116e1c <_dtoa_r+0xc88>
81116400:	d8c00517 	ldw	r3,20(sp)
81116404:	00800584 	movi	r2,22
81116408:	10c27536 	bltu	r2,r3,81116de0 <_dtoa_r+0xc4c>
8111640c:	180490fa 	slli	r2,r3,3
81116410:	00e044b4 	movhi	r3,33042
81116414:	18dae804 	addi	r3,r3,27552
81116418:	1885883a 	add	r2,r3,r2
8111641c:	11000017 	ldw	r4,0(r2)
81116420:	11400117 	ldw	r5,4(r2)
81116424:	900d883a 	mov	r6,r18
81116428:	980f883a 	mov	r7,r19
8111642c:	111f4e40 	call	8111f4e4 <__gedf2>
81116430:	00828d0e 	bge	zero,r2,81116e68 <_dtoa_r+0xcd4>
81116434:	d9000517 	ldw	r4,20(sp)
81116438:	d8000e15 	stw	zero,56(sp)
8111643c:	213fffc4 	addi	r4,r4,-1
81116440:	d9000515 	stw	r4,20(sp)
81116444:	b42dc83a 	sub	r22,r22,r16
81116448:	b5bfffc4 	addi	r22,r22,-1
8111644c:	b0026f16 	blt	r22,zero,81116e0c <_dtoa_r+0xc78>
81116450:	d8000815 	stw	zero,32(sp)
81116454:	d9c00517 	ldw	r7,20(sp)
81116458:	38026416 	blt	r7,zero,81116dec <_dtoa_r+0xc58>
8111645c:	b1ed883a 	add	r22,r22,r7
81116460:	d9c00d15 	stw	r7,52(sp)
81116464:	d8000a15 	stw	zero,40(sp)
81116468:	d9800317 	ldw	r6,12(sp)
8111646c:	00800244 	movi	r2,9
81116470:	11811436 	bltu	r2,r6,811168c4 <_dtoa_r+0x730>
81116474:	00800144 	movi	r2,5
81116478:	1184e10e 	bge	r2,r6,81117800 <_dtoa_r+0x166c>
8111647c:	31bfff04 	addi	r6,r6,-4
81116480:	d9800315 	stw	r6,12(sp)
81116484:	0023883a 	mov	r17,zero
81116488:	d9800317 	ldw	r6,12(sp)
8111648c:	008000c4 	movi	r2,3
81116490:	30836726 	beq	r6,r2,81117230 <_dtoa_r+0x109c>
81116494:	1183410e 	bge	r2,r6,8111719c <_dtoa_r+0x1008>
81116498:	d9c00317 	ldw	r7,12(sp)
8111649c:	00800104 	movi	r2,4
811164a0:	38827c26 	beq	r7,r2,81116e94 <_dtoa_r+0xd00>
811164a4:	00800144 	movi	r2,5
811164a8:	3884c41e 	bne	r7,r2,811177bc <_dtoa_r+0x1628>
811164ac:	00800044 	movi	r2,1
811164b0:	d8800b15 	stw	r2,44(sp)
811164b4:	d8c00517 	ldw	r3,20(sp)
811164b8:	d9002217 	ldw	r4,136(sp)
811164bc:	1907883a 	add	r3,r3,r4
811164c0:	19800044 	addi	r6,r3,1
811164c4:	d8c00c15 	stw	r3,48(sp)
811164c8:	d9800615 	stw	r6,24(sp)
811164cc:	0183a40e 	bge	zero,r6,81117360 <_dtoa_r+0x11cc>
811164d0:	d9800617 	ldw	r6,24(sp)
811164d4:	3021883a 	mov	r16,r6
811164d8:	e0001115 	stw	zero,68(fp)
811164dc:	008005c4 	movi	r2,23
811164e0:	1184c92e 	bgeu	r2,r6,81117808 <_dtoa_r+0x1674>
811164e4:	00c00044 	movi	r3,1
811164e8:	00800104 	movi	r2,4
811164ec:	1085883a 	add	r2,r2,r2
811164f0:	11000504 	addi	r4,r2,20
811164f4:	180b883a 	mov	r5,r3
811164f8:	18c00044 	addi	r3,r3,1
811164fc:	313ffb2e 	bgeu	r6,r4,811164ec <__reset+0xfb0f64ec>
81116500:	e1401115 	stw	r5,68(fp)
81116504:	e009883a 	mov	r4,fp
81116508:	1118d580 	call	81118d58 <_Balloc>
8111650c:	d8800715 	stw	r2,28(sp)
81116510:	e0801015 	stw	r2,64(fp)
81116514:	00800384 	movi	r2,14
81116518:	1400f736 	bltu	r2,r16,811168f8 <_dtoa_r+0x764>
8111651c:	8800f626 	beq	r17,zero,811168f8 <_dtoa_r+0x764>
81116520:	d9c00517 	ldw	r7,20(sp)
81116524:	01c39a0e 	bge	zero,r7,81117390 <_dtoa_r+0x11fc>
81116528:	388003cc 	andi	r2,r7,15
8111652c:	100490fa 	slli	r2,r2,3
81116530:	382bd13a 	srai	r21,r7,4
81116534:	00e044b4 	movhi	r3,33042
81116538:	18dae804 	addi	r3,r3,27552
8111653c:	1885883a 	add	r2,r3,r2
81116540:	a8c0040c 	andi	r3,r21,16
81116544:	12400017 	ldw	r9,0(r2)
81116548:	12000117 	ldw	r8,4(r2)
8111654c:	18037926 	beq	r3,zero,81117334 <_dtoa_r+0x11a0>
81116550:	00a044b4 	movhi	r2,33042
81116554:	109ade04 	addi	r2,r2,27512
81116558:	11800817 	ldw	r6,32(r2)
8111655c:	11c00917 	ldw	r7,36(r2)
81116560:	9009883a 	mov	r4,r18
81116564:	980b883a 	mov	r5,r19
81116568:	da001715 	stw	r8,92(sp)
8111656c:	da401615 	stw	r9,88(sp)
81116570:	111eb740 	call	8111eb74 <__divdf3>
81116574:	da001717 	ldw	r8,92(sp)
81116578:	da401617 	ldw	r9,88(sp)
8111657c:	ad4003cc 	andi	r21,r21,15
81116580:	040000c4 	movi	r16,3
81116584:	1023883a 	mov	r17,r2
81116588:	1829883a 	mov	r20,r3
8111658c:	a8001126 	beq	r21,zero,811165d4 <_dtoa_r+0x440>
81116590:	05e044b4 	movhi	r23,33042
81116594:	bddade04 	addi	r23,r23,27512
81116598:	4805883a 	mov	r2,r9
8111659c:	4007883a 	mov	r3,r8
811165a0:	a980004c 	andi	r6,r21,1
811165a4:	1009883a 	mov	r4,r2
811165a8:	a82bd07a 	srai	r21,r21,1
811165ac:	180b883a 	mov	r5,r3
811165b0:	30000426 	beq	r6,zero,811165c4 <_dtoa_r+0x430>
811165b4:	b9800017 	ldw	r6,0(r23)
811165b8:	b9c00117 	ldw	r7,4(r23)
811165bc:	84000044 	addi	r16,r16,1
811165c0:	110f5200 	call	8110f520 <__muldf3>
811165c4:	bdc00204 	addi	r23,r23,8
811165c8:	a83ff51e 	bne	r21,zero,811165a0 <__reset+0xfb0f65a0>
811165cc:	1013883a 	mov	r9,r2
811165d0:	1811883a 	mov	r8,r3
811165d4:	480d883a 	mov	r6,r9
811165d8:	400f883a 	mov	r7,r8
811165dc:	8809883a 	mov	r4,r17
811165e0:	a00b883a 	mov	r5,r20
811165e4:	111eb740 	call	8111eb74 <__divdf3>
811165e8:	d8800f15 	stw	r2,60(sp)
811165ec:	d8c01015 	stw	r3,64(sp)
811165f0:	d8c00e17 	ldw	r3,56(sp)
811165f4:	18000626 	beq	r3,zero,81116610 <_dtoa_r+0x47c>
811165f8:	d9000f17 	ldw	r4,60(sp)
811165fc:	d9401017 	ldw	r5,64(sp)
81116600:	000d883a 	mov	r6,zero
81116604:	01cffc34 	movhi	r7,16368
81116608:	111f5c00 	call	8111f5c0 <__ledf2>
8111660c:	10040b16 	blt	r2,zero,8111763c <_dtoa_r+0x14a8>
81116610:	8009883a 	mov	r4,r16
81116614:	11200300 	call	81120030 <__floatsidf>
81116618:	d9800f17 	ldw	r6,60(sp)
8111661c:	d9c01017 	ldw	r7,64(sp)
81116620:	1009883a 	mov	r4,r2
81116624:	180b883a 	mov	r5,r3
81116628:	110f5200 	call	8110f520 <__muldf3>
8111662c:	000d883a 	mov	r6,zero
81116630:	01d00734 	movhi	r7,16412
81116634:	1009883a 	mov	r4,r2
81116638:	180b883a 	mov	r5,r3
8111663c:	111e2c80 	call	8111e2c8 <__adddf3>
81116640:	1021883a 	mov	r16,r2
81116644:	d8800617 	ldw	r2,24(sp)
81116648:	047f3034 	movhi	r17,64704
8111664c:	1c63883a 	add	r17,r3,r17
81116650:	10031826 	beq	r2,zero,811172b4 <_dtoa_r+0x1120>
81116654:	d8c00517 	ldw	r3,20(sp)
81116658:	db000617 	ldw	r12,24(sp)
8111665c:	d8c01315 	stw	r3,76(sp)
81116660:	d9000b17 	ldw	r4,44(sp)
81116664:	20038f26 	beq	r4,zero,811174a4 <_dtoa_r+0x1310>
81116668:	60bfffc4 	addi	r2,r12,-1
8111666c:	100490fa 	slli	r2,r2,3
81116670:	00e044b4 	movhi	r3,33042
81116674:	18dae804 	addi	r3,r3,27552
81116678:	1885883a 	add	r2,r3,r2
8111667c:	11800017 	ldw	r6,0(r2)
81116680:	11c00117 	ldw	r7,4(r2)
81116684:	d8800717 	ldw	r2,28(sp)
81116688:	0009883a 	mov	r4,zero
8111668c:	014ff834 	movhi	r5,16352
81116690:	db001615 	stw	r12,88(sp)
81116694:	15c00044 	addi	r23,r2,1
81116698:	111eb740 	call	8111eb74 <__divdf3>
8111669c:	800d883a 	mov	r6,r16
811166a0:	880f883a 	mov	r7,r17
811166a4:	1009883a 	mov	r4,r2
811166a8:	180b883a 	mov	r5,r3
811166ac:	111f6b40 	call	8111f6b4 <__subdf3>
811166b0:	d9401017 	ldw	r5,64(sp)
811166b4:	d9000f17 	ldw	r4,60(sp)
811166b8:	102b883a 	mov	r21,r2
811166bc:	d8c01215 	stw	r3,72(sp)
811166c0:	111ffb00 	call	8111ffb0 <__fixdfsi>
811166c4:	1009883a 	mov	r4,r2
811166c8:	1029883a 	mov	r20,r2
811166cc:	11200300 	call	81120030 <__floatsidf>
811166d0:	d9000f17 	ldw	r4,60(sp)
811166d4:	d9401017 	ldw	r5,64(sp)
811166d8:	100d883a 	mov	r6,r2
811166dc:	180f883a 	mov	r7,r3
811166e0:	111f6b40 	call	8111f6b4 <__subdf3>
811166e4:	1823883a 	mov	r17,r3
811166e8:	d8c00717 	ldw	r3,28(sp)
811166ec:	d9401217 	ldw	r5,72(sp)
811166f0:	a2000c04 	addi	r8,r20,48
811166f4:	1021883a 	mov	r16,r2
811166f8:	1a000005 	stb	r8,0(r3)
811166fc:	800d883a 	mov	r6,r16
81116700:	880f883a 	mov	r7,r17
81116704:	a809883a 	mov	r4,r21
81116708:	4029883a 	mov	r20,r8
8111670c:	111f4e40 	call	8111f4e4 <__gedf2>
81116710:	00841d16 	blt	zero,r2,81117788 <_dtoa_r+0x15f4>
81116714:	800d883a 	mov	r6,r16
81116718:	880f883a 	mov	r7,r17
8111671c:	0009883a 	mov	r4,zero
81116720:	014ffc34 	movhi	r5,16368
81116724:	111f6b40 	call	8111f6b4 <__subdf3>
81116728:	d9401217 	ldw	r5,72(sp)
8111672c:	100d883a 	mov	r6,r2
81116730:	180f883a 	mov	r7,r3
81116734:	a809883a 	mov	r4,r21
81116738:	111f4e40 	call	8111f4e4 <__gedf2>
8111673c:	db001617 	ldw	r12,88(sp)
81116740:	00840e16 	blt	zero,r2,8111777c <_dtoa_r+0x15e8>
81116744:	00800044 	movi	r2,1
81116748:	13006b0e 	bge	r2,r12,811168f8 <_dtoa_r+0x764>
8111674c:	d9000717 	ldw	r4,28(sp)
81116750:	dd800f15 	stw	r22,60(sp)
81116754:	dcc01015 	stw	r19,64(sp)
81116758:	2319883a 	add	r12,r4,r12
8111675c:	dcc01217 	ldw	r19,72(sp)
81116760:	602d883a 	mov	r22,r12
81116764:	dc801215 	stw	r18,72(sp)
81116768:	b825883a 	mov	r18,r23
8111676c:	00000906 	br	81116794 <_dtoa_r+0x600>
81116770:	111f6b40 	call	8111f6b4 <__subdf3>
81116774:	a80d883a 	mov	r6,r21
81116778:	980f883a 	mov	r7,r19
8111677c:	1009883a 	mov	r4,r2
81116780:	180b883a 	mov	r5,r3
81116784:	111f5c00 	call	8111f5c0 <__ledf2>
81116788:	1003e816 	blt	r2,zero,8111772c <_dtoa_r+0x1598>
8111678c:	b825883a 	mov	r18,r23
81116790:	bd83e926 	beq	r23,r22,81117738 <_dtoa_r+0x15a4>
81116794:	a809883a 	mov	r4,r21
81116798:	980b883a 	mov	r5,r19
8111679c:	000d883a 	mov	r6,zero
811167a0:	01d00934 	movhi	r7,16420
811167a4:	110f5200 	call	8110f520 <__muldf3>
811167a8:	000d883a 	mov	r6,zero
811167ac:	01d00934 	movhi	r7,16420
811167b0:	8009883a 	mov	r4,r16
811167b4:	880b883a 	mov	r5,r17
811167b8:	102b883a 	mov	r21,r2
811167bc:	1827883a 	mov	r19,r3
811167c0:	110f5200 	call	8110f520 <__muldf3>
811167c4:	180b883a 	mov	r5,r3
811167c8:	1009883a 	mov	r4,r2
811167cc:	1821883a 	mov	r16,r3
811167d0:	1023883a 	mov	r17,r2
811167d4:	111ffb00 	call	8111ffb0 <__fixdfsi>
811167d8:	1009883a 	mov	r4,r2
811167dc:	1029883a 	mov	r20,r2
811167e0:	11200300 	call	81120030 <__floatsidf>
811167e4:	8809883a 	mov	r4,r17
811167e8:	800b883a 	mov	r5,r16
811167ec:	100d883a 	mov	r6,r2
811167f0:	180f883a 	mov	r7,r3
811167f4:	111f6b40 	call	8111f6b4 <__subdf3>
811167f8:	a5000c04 	addi	r20,r20,48
811167fc:	a80d883a 	mov	r6,r21
81116800:	980f883a 	mov	r7,r19
81116804:	1009883a 	mov	r4,r2
81116808:	180b883a 	mov	r5,r3
8111680c:	95000005 	stb	r20,0(r18)
81116810:	1021883a 	mov	r16,r2
81116814:	1823883a 	mov	r17,r3
81116818:	111f5c00 	call	8111f5c0 <__ledf2>
8111681c:	bdc00044 	addi	r23,r23,1
81116820:	800d883a 	mov	r6,r16
81116824:	880f883a 	mov	r7,r17
81116828:	0009883a 	mov	r4,zero
8111682c:	014ffc34 	movhi	r5,16368
81116830:	103fcf0e 	bge	r2,zero,81116770 <__reset+0xfb0f6770>
81116834:	d8c01317 	ldw	r3,76(sp)
81116838:	d8c00515 	stw	r3,20(sp)
8111683c:	d9400917 	ldw	r5,36(sp)
81116840:	e009883a 	mov	r4,fp
81116844:	1118e000 	call	81118e00 <_Bfree>
81116848:	d9000517 	ldw	r4,20(sp)
8111684c:	d9802317 	ldw	r6,140(sp)
81116850:	d9c02517 	ldw	r7,148(sp)
81116854:	b8000005 	stb	zero,0(r23)
81116858:	20800044 	addi	r2,r4,1
8111685c:	30800015 	stw	r2,0(r6)
81116860:	3802aa26 	beq	r7,zero,8111730c <_dtoa_r+0x1178>
81116864:	3dc00015 	stw	r23,0(r7)
81116868:	d8800717 	ldw	r2,28(sp)
8111686c:	003e7906 	br	81116254 <__reset+0xfb0f6254>
81116870:	00800434 	movhi	r2,16
81116874:	10bfffc4 	addi	r2,r2,-1
81116878:	88a2703a 	and	r17,r17,r2
8111687c:	883e851e 	bne	r17,zero,81116294 <__reset+0xfb0f6294>
81116880:	00a044b4 	movhi	r2,33042
81116884:	109aca04 	addi	r2,r2,27432
81116888:	003e8406 	br	8111629c <__reset+0xfb0f629c>
8111688c:	10c00204 	addi	r3,r2,8
81116890:	003e8706 	br	811162b0 <__reset+0xfb0f62b0>
81116894:	01400434 	movhi	r5,16
81116898:	297fffc4 	addi	r5,r5,-1
8111689c:	994a703a 	and	r5,r19,r5
811168a0:	9009883a 	mov	r4,r18
811168a4:	843f0044 	addi	r16,r16,-1023
811168a8:	294ffc34 	orhi	r5,r5,16368
811168ac:	dd800217 	ldw	r22,8(sp)
811168b0:	d8001115 	stw	zero,68(sp)
811168b4:	003ea506 	br	8111634c <__reset+0xfb0f634c>
811168b8:	00a044b4 	movhi	r2,33042
811168bc:	109ab904 	addi	r2,r2,27364
811168c0:	003e6406 	br	81116254 <__reset+0xfb0f6254>
811168c4:	e0001115 	stw	zero,68(fp)
811168c8:	000b883a 	mov	r5,zero
811168cc:	e009883a 	mov	r4,fp
811168d0:	1118d580 	call	81118d58 <_Balloc>
811168d4:	01bfffc4 	movi	r6,-1
811168d8:	01c00044 	movi	r7,1
811168dc:	d8800715 	stw	r2,28(sp)
811168e0:	d9800c15 	stw	r6,48(sp)
811168e4:	e0801015 	stw	r2,64(fp)
811168e8:	d8000315 	stw	zero,12(sp)
811168ec:	d9c00b15 	stw	r7,44(sp)
811168f0:	d9800615 	stw	r6,24(sp)
811168f4:	d8002215 	stw	zero,136(sp)
811168f8:	d8800117 	ldw	r2,4(sp)
811168fc:	10008916 	blt	r2,zero,81116b24 <_dtoa_r+0x990>
81116900:	d9000517 	ldw	r4,20(sp)
81116904:	00c00384 	movi	r3,14
81116908:	19008616 	blt	r3,r4,81116b24 <_dtoa_r+0x990>
8111690c:	200490fa 	slli	r2,r4,3
81116910:	00e044b4 	movhi	r3,33042
81116914:	d9802217 	ldw	r6,136(sp)
81116918:	18dae804 	addi	r3,r3,27552
8111691c:	1885883a 	add	r2,r3,r2
81116920:	14000017 	ldw	r16,0(r2)
81116924:	14400117 	ldw	r17,4(r2)
81116928:	30016316 	blt	r6,zero,81116eb8 <_dtoa_r+0xd24>
8111692c:	800d883a 	mov	r6,r16
81116930:	880f883a 	mov	r7,r17
81116934:	9009883a 	mov	r4,r18
81116938:	980b883a 	mov	r5,r19
8111693c:	111eb740 	call	8111eb74 <__divdf3>
81116940:	180b883a 	mov	r5,r3
81116944:	1009883a 	mov	r4,r2
81116948:	111ffb00 	call	8111ffb0 <__fixdfsi>
8111694c:	1009883a 	mov	r4,r2
81116950:	102b883a 	mov	r21,r2
81116954:	11200300 	call	81120030 <__floatsidf>
81116958:	800d883a 	mov	r6,r16
8111695c:	880f883a 	mov	r7,r17
81116960:	1009883a 	mov	r4,r2
81116964:	180b883a 	mov	r5,r3
81116968:	110f5200 	call	8110f520 <__muldf3>
8111696c:	100d883a 	mov	r6,r2
81116970:	180f883a 	mov	r7,r3
81116974:	9009883a 	mov	r4,r18
81116978:	980b883a 	mov	r5,r19
8111697c:	111f6b40 	call	8111f6b4 <__subdf3>
81116980:	d9c00717 	ldw	r7,28(sp)
81116984:	1009883a 	mov	r4,r2
81116988:	a8800c04 	addi	r2,r21,48
8111698c:	38800005 	stb	r2,0(r7)
81116990:	3dc00044 	addi	r23,r7,1
81116994:	d9c00617 	ldw	r7,24(sp)
81116998:	01800044 	movi	r6,1
8111699c:	180b883a 	mov	r5,r3
811169a0:	2005883a 	mov	r2,r4
811169a4:	39803826 	beq	r7,r6,81116a88 <_dtoa_r+0x8f4>
811169a8:	000d883a 	mov	r6,zero
811169ac:	01d00934 	movhi	r7,16420
811169b0:	110f5200 	call	8110f520 <__muldf3>
811169b4:	000d883a 	mov	r6,zero
811169b8:	000f883a 	mov	r7,zero
811169bc:	1009883a 	mov	r4,r2
811169c0:	180b883a 	mov	r5,r3
811169c4:	1025883a 	mov	r18,r2
811169c8:	1827883a 	mov	r19,r3
811169cc:	111f45c0 	call	8111f45c <__eqdf2>
811169d0:	103f9a26 	beq	r2,zero,8111683c <__reset+0xfb0f683c>
811169d4:	d9c00617 	ldw	r7,24(sp)
811169d8:	d8c00717 	ldw	r3,28(sp)
811169dc:	b829883a 	mov	r20,r23
811169e0:	38bfffc4 	addi	r2,r7,-1
811169e4:	18ad883a 	add	r22,r3,r2
811169e8:	00000a06 	br	81116a14 <_dtoa_r+0x880>
811169ec:	110f5200 	call	8110f520 <__muldf3>
811169f0:	000d883a 	mov	r6,zero
811169f4:	000f883a 	mov	r7,zero
811169f8:	1009883a 	mov	r4,r2
811169fc:	180b883a 	mov	r5,r3
81116a00:	1025883a 	mov	r18,r2
81116a04:	1827883a 	mov	r19,r3
81116a08:	b829883a 	mov	r20,r23
81116a0c:	111f45c0 	call	8111f45c <__eqdf2>
81116a10:	103f8a26 	beq	r2,zero,8111683c <__reset+0xfb0f683c>
81116a14:	800d883a 	mov	r6,r16
81116a18:	880f883a 	mov	r7,r17
81116a1c:	9009883a 	mov	r4,r18
81116a20:	980b883a 	mov	r5,r19
81116a24:	111eb740 	call	8111eb74 <__divdf3>
81116a28:	180b883a 	mov	r5,r3
81116a2c:	1009883a 	mov	r4,r2
81116a30:	111ffb00 	call	8111ffb0 <__fixdfsi>
81116a34:	1009883a 	mov	r4,r2
81116a38:	102b883a 	mov	r21,r2
81116a3c:	11200300 	call	81120030 <__floatsidf>
81116a40:	800d883a 	mov	r6,r16
81116a44:	880f883a 	mov	r7,r17
81116a48:	1009883a 	mov	r4,r2
81116a4c:	180b883a 	mov	r5,r3
81116a50:	110f5200 	call	8110f520 <__muldf3>
81116a54:	100d883a 	mov	r6,r2
81116a58:	180f883a 	mov	r7,r3
81116a5c:	9009883a 	mov	r4,r18
81116a60:	980b883a 	mov	r5,r19
81116a64:	111f6b40 	call	8111f6b4 <__subdf3>
81116a68:	aa000c04 	addi	r8,r21,48
81116a6c:	a2000005 	stb	r8,0(r20)
81116a70:	000d883a 	mov	r6,zero
81116a74:	01d00934 	movhi	r7,16420
81116a78:	1009883a 	mov	r4,r2
81116a7c:	180b883a 	mov	r5,r3
81116a80:	a5c00044 	addi	r23,r20,1
81116a84:	b53fd91e 	bne	r22,r20,811169ec <__reset+0xfb0f69ec>
81116a88:	100d883a 	mov	r6,r2
81116a8c:	180f883a 	mov	r7,r3
81116a90:	1009883a 	mov	r4,r2
81116a94:	180b883a 	mov	r5,r3
81116a98:	111e2c80 	call	8111e2c8 <__adddf3>
81116a9c:	100d883a 	mov	r6,r2
81116aa0:	180f883a 	mov	r7,r3
81116aa4:	8009883a 	mov	r4,r16
81116aa8:	880b883a 	mov	r5,r17
81116aac:	1027883a 	mov	r19,r2
81116ab0:	1825883a 	mov	r18,r3
81116ab4:	111f5c00 	call	8111f5c0 <__ledf2>
81116ab8:	10000816 	blt	r2,zero,81116adc <_dtoa_r+0x948>
81116abc:	980d883a 	mov	r6,r19
81116ac0:	900f883a 	mov	r7,r18
81116ac4:	8009883a 	mov	r4,r16
81116ac8:	880b883a 	mov	r5,r17
81116acc:	111f45c0 	call	8111f45c <__eqdf2>
81116ad0:	103f5a1e 	bne	r2,zero,8111683c <__reset+0xfb0f683c>
81116ad4:	ad40004c 	andi	r21,r21,1
81116ad8:	a83f5826 	beq	r21,zero,8111683c <__reset+0xfb0f683c>
81116adc:	bd3fffc3 	ldbu	r20,-1(r23)
81116ae0:	b8bfffc4 	addi	r2,r23,-1
81116ae4:	1007883a 	mov	r3,r2
81116ae8:	01400e44 	movi	r5,57
81116aec:	d9800717 	ldw	r6,28(sp)
81116af0:	00000506 	br	81116b08 <_dtoa_r+0x974>
81116af4:	18ffffc4 	addi	r3,r3,-1
81116af8:	11824726 	beq	r2,r6,81117418 <_dtoa_r+0x1284>
81116afc:	1d000003 	ldbu	r20,0(r3)
81116b00:	102f883a 	mov	r23,r2
81116b04:	10bfffc4 	addi	r2,r2,-1
81116b08:	a1003fcc 	andi	r4,r20,255
81116b0c:	2100201c 	xori	r4,r4,128
81116b10:	213fe004 	addi	r4,r4,-128
81116b14:	217ff726 	beq	r4,r5,81116af4 <__reset+0xfb0f6af4>
81116b18:	a2000044 	addi	r8,r20,1
81116b1c:	12000005 	stb	r8,0(r2)
81116b20:	003f4606 	br	8111683c <__reset+0xfb0f683c>
81116b24:	d9000b17 	ldw	r4,44(sp)
81116b28:	2000c826 	beq	r4,zero,81116e4c <_dtoa_r+0xcb8>
81116b2c:	d9800317 	ldw	r6,12(sp)
81116b30:	00c00044 	movi	r3,1
81116b34:	1980f90e 	bge	r3,r6,81116f1c <_dtoa_r+0xd88>
81116b38:	d8800617 	ldw	r2,24(sp)
81116b3c:	d8c00a17 	ldw	r3,40(sp)
81116b40:	157fffc4 	addi	r21,r2,-1
81116b44:	1d41f316 	blt	r3,r21,81117314 <_dtoa_r+0x1180>
81116b48:	1d6bc83a 	sub	r21,r3,r21
81116b4c:	d9c00617 	ldw	r7,24(sp)
81116b50:	3802aa16 	blt	r7,zero,811175fc <_dtoa_r+0x1468>
81116b54:	dd000817 	ldw	r20,32(sp)
81116b58:	d8800617 	ldw	r2,24(sp)
81116b5c:	d8c00817 	ldw	r3,32(sp)
81116b60:	01400044 	movi	r5,1
81116b64:	e009883a 	mov	r4,fp
81116b68:	1887883a 	add	r3,r3,r2
81116b6c:	d8c00815 	stw	r3,32(sp)
81116b70:	b0ad883a 	add	r22,r22,r2
81116b74:	11191640 	call	81119164 <__i2b>
81116b78:	1023883a 	mov	r17,r2
81116b7c:	a0000826 	beq	r20,zero,81116ba0 <_dtoa_r+0xa0c>
81116b80:	0580070e 	bge	zero,r22,81116ba0 <_dtoa_r+0xa0c>
81116b84:	a005883a 	mov	r2,r20
81116b88:	b500b916 	blt	r22,r20,81116e70 <_dtoa_r+0xcdc>
81116b8c:	d9000817 	ldw	r4,32(sp)
81116b90:	a0a9c83a 	sub	r20,r20,r2
81116b94:	b0adc83a 	sub	r22,r22,r2
81116b98:	2089c83a 	sub	r4,r4,r2
81116b9c:	d9000815 	stw	r4,32(sp)
81116ba0:	d9800a17 	ldw	r6,40(sp)
81116ba4:	0181810e 	bge	zero,r6,811171ac <_dtoa_r+0x1018>
81116ba8:	d9c00b17 	ldw	r7,44(sp)
81116bac:	3800b326 	beq	r7,zero,81116e7c <_dtoa_r+0xce8>
81116bb0:	a800b226 	beq	r21,zero,81116e7c <_dtoa_r+0xce8>
81116bb4:	880b883a 	mov	r5,r17
81116bb8:	a80d883a 	mov	r6,r21
81116bbc:	e009883a 	mov	r4,fp
81116bc0:	11193980 	call	81119398 <__pow5mult>
81116bc4:	d9800917 	ldw	r6,36(sp)
81116bc8:	100b883a 	mov	r5,r2
81116bcc:	e009883a 	mov	r4,fp
81116bd0:	1023883a 	mov	r17,r2
81116bd4:	11191a00 	call	811191a0 <__multiply>
81116bd8:	1021883a 	mov	r16,r2
81116bdc:	d8800a17 	ldw	r2,40(sp)
81116be0:	d9400917 	ldw	r5,36(sp)
81116be4:	e009883a 	mov	r4,fp
81116be8:	1545c83a 	sub	r2,r2,r21
81116bec:	d8800a15 	stw	r2,40(sp)
81116bf0:	1118e000 	call	81118e00 <_Bfree>
81116bf4:	d8c00a17 	ldw	r3,40(sp)
81116bf8:	18009f1e 	bne	r3,zero,81116e78 <_dtoa_r+0xce4>
81116bfc:	05c00044 	movi	r23,1
81116c00:	e009883a 	mov	r4,fp
81116c04:	b80b883a 	mov	r5,r23
81116c08:	11191640 	call	81119164 <__i2b>
81116c0c:	d9000d17 	ldw	r4,52(sp)
81116c10:	102b883a 	mov	r21,r2
81116c14:	2000ce26 	beq	r4,zero,81116f50 <_dtoa_r+0xdbc>
81116c18:	200d883a 	mov	r6,r4
81116c1c:	100b883a 	mov	r5,r2
81116c20:	e009883a 	mov	r4,fp
81116c24:	11193980 	call	81119398 <__pow5mult>
81116c28:	d9800317 	ldw	r6,12(sp)
81116c2c:	102b883a 	mov	r21,r2
81116c30:	b981810e 	bge	r23,r6,81117238 <_dtoa_r+0x10a4>
81116c34:	0027883a 	mov	r19,zero
81116c38:	a8800417 	ldw	r2,16(r21)
81116c3c:	05c00804 	movi	r23,32
81116c40:	10800104 	addi	r2,r2,4
81116c44:	1085883a 	add	r2,r2,r2
81116c48:	1085883a 	add	r2,r2,r2
81116c4c:	a885883a 	add	r2,r21,r2
81116c50:	11000017 	ldw	r4,0(r2)
81116c54:	111904c0 	call	8111904c <__hi0bits>
81116c58:	b885c83a 	sub	r2,r23,r2
81116c5c:	1585883a 	add	r2,r2,r22
81116c60:	108007cc 	andi	r2,r2,31
81116c64:	1000b326 	beq	r2,zero,81116f34 <_dtoa_r+0xda0>
81116c68:	00c00804 	movi	r3,32
81116c6c:	1887c83a 	sub	r3,r3,r2
81116c70:	01000104 	movi	r4,4
81116c74:	20c2cd0e 	bge	r4,r3,811177ac <_dtoa_r+0x1618>
81116c78:	00c00704 	movi	r3,28
81116c7c:	1885c83a 	sub	r2,r3,r2
81116c80:	d8c00817 	ldw	r3,32(sp)
81116c84:	a0a9883a 	add	r20,r20,r2
81116c88:	b0ad883a 	add	r22,r22,r2
81116c8c:	1887883a 	add	r3,r3,r2
81116c90:	d8c00815 	stw	r3,32(sp)
81116c94:	d9800817 	ldw	r6,32(sp)
81116c98:	0180040e 	bge	zero,r6,81116cac <_dtoa_r+0xb18>
81116c9c:	800b883a 	mov	r5,r16
81116ca0:	e009883a 	mov	r4,fp
81116ca4:	11194d80 	call	811194d8 <__lshift>
81116ca8:	1021883a 	mov	r16,r2
81116cac:	0580050e 	bge	zero,r22,81116cc4 <_dtoa_r+0xb30>
81116cb0:	a80b883a 	mov	r5,r21
81116cb4:	b00d883a 	mov	r6,r22
81116cb8:	e009883a 	mov	r4,fp
81116cbc:	11194d80 	call	811194d8 <__lshift>
81116cc0:	102b883a 	mov	r21,r2
81116cc4:	d9c00e17 	ldw	r7,56(sp)
81116cc8:	3801211e 	bne	r7,zero,81117150 <_dtoa_r+0xfbc>
81116ccc:	d9800617 	ldw	r6,24(sp)
81116cd0:	0181380e 	bge	zero,r6,811171b4 <_dtoa_r+0x1020>
81116cd4:	d8c00b17 	ldw	r3,44(sp)
81116cd8:	1800ab1e 	bne	r3,zero,81116f88 <_dtoa_r+0xdf4>
81116cdc:	dc800717 	ldw	r18,28(sp)
81116ce0:	dcc00617 	ldw	r19,24(sp)
81116ce4:	9029883a 	mov	r20,r18
81116ce8:	00000206 	br	81116cf4 <_dtoa_r+0xb60>
81116cec:	1118e280 	call	81118e28 <__multadd>
81116cf0:	1021883a 	mov	r16,r2
81116cf4:	a80b883a 	mov	r5,r21
81116cf8:	8009883a 	mov	r4,r16
81116cfc:	1115f940 	call	81115f94 <quorem>
81116d00:	10800c04 	addi	r2,r2,48
81116d04:	90800005 	stb	r2,0(r18)
81116d08:	94800044 	addi	r18,r18,1
81116d0c:	9507c83a 	sub	r3,r18,r20
81116d10:	000f883a 	mov	r7,zero
81116d14:	01800284 	movi	r6,10
81116d18:	800b883a 	mov	r5,r16
81116d1c:	e009883a 	mov	r4,fp
81116d20:	1cfff216 	blt	r3,r19,81116cec <__reset+0xfb0f6cec>
81116d24:	1011883a 	mov	r8,r2
81116d28:	d8800617 	ldw	r2,24(sp)
81116d2c:	0082370e 	bge	zero,r2,8111760c <_dtoa_r+0x1478>
81116d30:	d9000717 	ldw	r4,28(sp)
81116d34:	0025883a 	mov	r18,zero
81116d38:	20af883a 	add	r23,r4,r2
81116d3c:	01800044 	movi	r6,1
81116d40:	800b883a 	mov	r5,r16
81116d44:	e009883a 	mov	r4,fp
81116d48:	da001715 	stw	r8,92(sp)
81116d4c:	11194d80 	call	811194d8 <__lshift>
81116d50:	a80b883a 	mov	r5,r21
81116d54:	1009883a 	mov	r4,r2
81116d58:	d8800915 	stw	r2,36(sp)
81116d5c:	11196200 	call	81119620 <__mcmp>
81116d60:	da001717 	ldw	r8,92(sp)
81116d64:	0081800e 	bge	zero,r2,81117368 <_dtoa_r+0x11d4>
81116d68:	b93fffc3 	ldbu	r4,-1(r23)
81116d6c:	b8bfffc4 	addi	r2,r23,-1
81116d70:	1007883a 	mov	r3,r2
81116d74:	01800e44 	movi	r6,57
81116d78:	d9c00717 	ldw	r7,28(sp)
81116d7c:	00000506 	br	81116d94 <_dtoa_r+0xc00>
81116d80:	18ffffc4 	addi	r3,r3,-1
81116d84:	11c12326 	beq	r2,r7,81117214 <_dtoa_r+0x1080>
81116d88:	19000003 	ldbu	r4,0(r3)
81116d8c:	102f883a 	mov	r23,r2
81116d90:	10bfffc4 	addi	r2,r2,-1
81116d94:	21403fcc 	andi	r5,r4,255
81116d98:	2940201c 	xori	r5,r5,128
81116d9c:	297fe004 	addi	r5,r5,-128
81116da0:	29bff726 	beq	r5,r6,81116d80 <__reset+0xfb0f6d80>
81116da4:	21000044 	addi	r4,r4,1
81116da8:	11000005 	stb	r4,0(r2)
81116dac:	a80b883a 	mov	r5,r21
81116db0:	e009883a 	mov	r4,fp
81116db4:	1118e000 	call	81118e00 <_Bfree>
81116db8:	883ea026 	beq	r17,zero,8111683c <__reset+0xfb0f683c>
81116dbc:	90000426 	beq	r18,zero,81116dd0 <_dtoa_r+0xc3c>
81116dc0:	94400326 	beq	r18,r17,81116dd0 <_dtoa_r+0xc3c>
81116dc4:	900b883a 	mov	r5,r18
81116dc8:	e009883a 	mov	r4,fp
81116dcc:	1118e000 	call	81118e00 <_Bfree>
81116dd0:	880b883a 	mov	r5,r17
81116dd4:	e009883a 	mov	r4,fp
81116dd8:	1118e000 	call	81118e00 <_Bfree>
81116ddc:	003e9706 	br	8111683c <__reset+0xfb0f683c>
81116de0:	01800044 	movi	r6,1
81116de4:	d9800e15 	stw	r6,56(sp)
81116de8:	003d9606 	br	81116444 <__reset+0xfb0f6444>
81116dec:	d8800817 	ldw	r2,32(sp)
81116df0:	d8c00517 	ldw	r3,20(sp)
81116df4:	d8000d15 	stw	zero,52(sp)
81116df8:	10c5c83a 	sub	r2,r2,r3
81116dfc:	00c9c83a 	sub	r4,zero,r3
81116e00:	d8800815 	stw	r2,32(sp)
81116e04:	d9000a15 	stw	r4,40(sp)
81116e08:	003d9706 	br	81116468 <__reset+0xfb0f6468>
81116e0c:	05adc83a 	sub	r22,zero,r22
81116e10:	dd800815 	stw	r22,32(sp)
81116e14:	002d883a 	mov	r22,zero
81116e18:	003d8e06 	br	81116454 <__reset+0xfb0f6454>
81116e1c:	d9000517 	ldw	r4,20(sp)
81116e20:	11200300 	call	81120030 <__floatsidf>
81116e24:	100d883a 	mov	r6,r2
81116e28:	180f883a 	mov	r7,r3
81116e2c:	a009883a 	mov	r4,r20
81116e30:	880b883a 	mov	r5,r17
81116e34:	111f45c0 	call	8111f45c <__eqdf2>
81116e38:	103d7126 	beq	r2,zero,81116400 <__reset+0xfb0f6400>
81116e3c:	d9c00517 	ldw	r7,20(sp)
81116e40:	39ffffc4 	addi	r7,r7,-1
81116e44:	d9c00515 	stw	r7,20(sp)
81116e48:	003d6d06 	br	81116400 <__reset+0xfb0f6400>
81116e4c:	dd400a17 	ldw	r21,40(sp)
81116e50:	dd000817 	ldw	r20,32(sp)
81116e54:	0023883a 	mov	r17,zero
81116e58:	003f4806 	br	81116b7c <__reset+0xfb0f6b7c>
81116e5c:	10e3c83a 	sub	r17,r2,r3
81116e60:	9448983a 	sll	r4,r18,r17
81116e64:	003d3206 	br	81116330 <__reset+0xfb0f6330>
81116e68:	d8000e15 	stw	zero,56(sp)
81116e6c:	003d7506 	br	81116444 <__reset+0xfb0f6444>
81116e70:	b005883a 	mov	r2,r22
81116e74:	003f4506 	br	81116b8c <__reset+0xfb0f6b8c>
81116e78:	dc000915 	stw	r16,36(sp)
81116e7c:	d9800a17 	ldw	r6,40(sp)
81116e80:	d9400917 	ldw	r5,36(sp)
81116e84:	e009883a 	mov	r4,fp
81116e88:	11193980 	call	81119398 <__pow5mult>
81116e8c:	1021883a 	mov	r16,r2
81116e90:	003f5a06 	br	81116bfc <__reset+0xfb0f6bfc>
81116e94:	01c00044 	movi	r7,1
81116e98:	d9c00b15 	stw	r7,44(sp)
81116e9c:	d8802217 	ldw	r2,136(sp)
81116ea0:	0081280e 	bge	zero,r2,81117344 <_dtoa_r+0x11b0>
81116ea4:	100d883a 	mov	r6,r2
81116ea8:	1021883a 	mov	r16,r2
81116eac:	d8800c15 	stw	r2,48(sp)
81116eb0:	d8800615 	stw	r2,24(sp)
81116eb4:	003d8806 	br	811164d8 <__reset+0xfb0f64d8>
81116eb8:	d8800617 	ldw	r2,24(sp)
81116ebc:	00be9b16 	blt	zero,r2,8111692c <__reset+0xfb0f692c>
81116ec0:	10010f1e 	bne	r2,zero,81117300 <_dtoa_r+0x116c>
81116ec4:	880b883a 	mov	r5,r17
81116ec8:	000d883a 	mov	r6,zero
81116ecc:	01d00534 	movhi	r7,16404
81116ed0:	8009883a 	mov	r4,r16
81116ed4:	110f5200 	call	8110f520 <__muldf3>
81116ed8:	900d883a 	mov	r6,r18
81116edc:	980f883a 	mov	r7,r19
81116ee0:	1009883a 	mov	r4,r2
81116ee4:	180b883a 	mov	r5,r3
81116ee8:	111f4e40 	call	8111f4e4 <__gedf2>
81116eec:	002b883a 	mov	r21,zero
81116ef0:	0023883a 	mov	r17,zero
81116ef4:	1000bf16 	blt	r2,zero,811171f4 <_dtoa_r+0x1060>
81116ef8:	d9802217 	ldw	r6,136(sp)
81116efc:	ddc00717 	ldw	r23,28(sp)
81116f00:	018c303a 	nor	r6,zero,r6
81116f04:	d9800515 	stw	r6,20(sp)
81116f08:	a80b883a 	mov	r5,r21
81116f0c:	e009883a 	mov	r4,fp
81116f10:	1118e000 	call	81118e00 <_Bfree>
81116f14:	883e4926 	beq	r17,zero,8111683c <__reset+0xfb0f683c>
81116f18:	003fad06 	br	81116dd0 <__reset+0xfb0f6dd0>
81116f1c:	d9c01117 	ldw	r7,68(sp)
81116f20:	3801bc26 	beq	r7,zero,81117614 <_dtoa_r+0x1480>
81116f24:	10810cc4 	addi	r2,r2,1075
81116f28:	dd400a17 	ldw	r21,40(sp)
81116f2c:	dd000817 	ldw	r20,32(sp)
81116f30:	003f0a06 	br	81116b5c <__reset+0xfb0f6b5c>
81116f34:	00800704 	movi	r2,28
81116f38:	d9000817 	ldw	r4,32(sp)
81116f3c:	a0a9883a 	add	r20,r20,r2
81116f40:	b0ad883a 	add	r22,r22,r2
81116f44:	2089883a 	add	r4,r4,r2
81116f48:	d9000815 	stw	r4,32(sp)
81116f4c:	003f5106 	br	81116c94 <__reset+0xfb0f6c94>
81116f50:	d8c00317 	ldw	r3,12(sp)
81116f54:	b8c1fc0e 	bge	r23,r3,81117748 <_dtoa_r+0x15b4>
81116f58:	0027883a 	mov	r19,zero
81116f5c:	b805883a 	mov	r2,r23
81116f60:	003f3e06 	br	81116c5c <__reset+0xfb0f6c5c>
81116f64:	880b883a 	mov	r5,r17
81116f68:	e009883a 	mov	r4,fp
81116f6c:	000f883a 	mov	r7,zero
81116f70:	01800284 	movi	r6,10
81116f74:	1118e280 	call	81118e28 <__multadd>
81116f78:	d9000c17 	ldw	r4,48(sp)
81116f7c:	1023883a 	mov	r17,r2
81116f80:	0102040e 	bge	zero,r4,81117794 <_dtoa_r+0x1600>
81116f84:	d9000615 	stw	r4,24(sp)
81116f88:	0500050e 	bge	zero,r20,81116fa0 <_dtoa_r+0xe0c>
81116f8c:	880b883a 	mov	r5,r17
81116f90:	a00d883a 	mov	r6,r20
81116f94:	e009883a 	mov	r4,fp
81116f98:	11194d80 	call	811194d8 <__lshift>
81116f9c:	1023883a 	mov	r17,r2
81116fa0:	9801241e 	bne	r19,zero,81117434 <_dtoa_r+0x12a0>
81116fa4:	8829883a 	mov	r20,r17
81116fa8:	d9000617 	ldw	r4,24(sp)
81116fac:	dcc00717 	ldw	r19,28(sp)
81116fb0:	9480004c 	andi	r18,r18,1
81116fb4:	20bfffc4 	addi	r2,r4,-1
81116fb8:	9885883a 	add	r2,r19,r2
81116fbc:	d8800415 	stw	r2,16(sp)
81116fc0:	dc800615 	stw	r18,24(sp)
81116fc4:	a80b883a 	mov	r5,r21
81116fc8:	8009883a 	mov	r4,r16
81116fcc:	1115f940 	call	81115f94 <quorem>
81116fd0:	880b883a 	mov	r5,r17
81116fd4:	8009883a 	mov	r4,r16
81116fd8:	102f883a 	mov	r23,r2
81116fdc:	11196200 	call	81119620 <__mcmp>
81116fe0:	a80b883a 	mov	r5,r21
81116fe4:	a00d883a 	mov	r6,r20
81116fe8:	e009883a 	mov	r4,fp
81116fec:	102d883a 	mov	r22,r2
81116ff0:	11196800 	call	81119680 <__mdiff>
81116ff4:	1007883a 	mov	r3,r2
81116ff8:	10800317 	ldw	r2,12(r2)
81116ffc:	bc800c04 	addi	r18,r23,48
81117000:	180b883a 	mov	r5,r3
81117004:	10004e1e 	bne	r2,zero,81117140 <_dtoa_r+0xfac>
81117008:	8009883a 	mov	r4,r16
8111700c:	d8c01615 	stw	r3,88(sp)
81117010:	11196200 	call	81119620 <__mcmp>
81117014:	d8c01617 	ldw	r3,88(sp)
81117018:	e009883a 	mov	r4,fp
8111701c:	d8801615 	stw	r2,88(sp)
81117020:	180b883a 	mov	r5,r3
81117024:	1118e000 	call	81118e00 <_Bfree>
81117028:	d8801617 	ldw	r2,88(sp)
8111702c:	1000041e 	bne	r2,zero,81117040 <_dtoa_r+0xeac>
81117030:	d9800317 	ldw	r6,12(sp)
81117034:	3000021e 	bne	r6,zero,81117040 <_dtoa_r+0xeac>
81117038:	d8c00617 	ldw	r3,24(sp)
8111703c:	18003726 	beq	r3,zero,8111711c <_dtoa_r+0xf88>
81117040:	b0002016 	blt	r22,zero,811170c4 <_dtoa_r+0xf30>
81117044:	b000041e 	bne	r22,zero,81117058 <_dtoa_r+0xec4>
81117048:	d9000317 	ldw	r4,12(sp)
8111704c:	2000021e 	bne	r4,zero,81117058 <_dtoa_r+0xec4>
81117050:	d8c00617 	ldw	r3,24(sp)
81117054:	18001b26 	beq	r3,zero,811170c4 <_dtoa_r+0xf30>
81117058:	00810716 	blt	zero,r2,81117478 <_dtoa_r+0x12e4>
8111705c:	d8c00417 	ldw	r3,16(sp)
81117060:	9d800044 	addi	r22,r19,1
81117064:	9c800005 	stb	r18,0(r19)
81117068:	b02f883a 	mov	r23,r22
8111706c:	98c10626 	beq	r19,r3,81117488 <_dtoa_r+0x12f4>
81117070:	800b883a 	mov	r5,r16
81117074:	000f883a 	mov	r7,zero
81117078:	01800284 	movi	r6,10
8111707c:	e009883a 	mov	r4,fp
81117080:	1118e280 	call	81118e28 <__multadd>
81117084:	1021883a 	mov	r16,r2
81117088:	000f883a 	mov	r7,zero
8111708c:	01800284 	movi	r6,10
81117090:	880b883a 	mov	r5,r17
81117094:	e009883a 	mov	r4,fp
81117098:	8d002526 	beq	r17,r20,81117130 <_dtoa_r+0xf9c>
8111709c:	1118e280 	call	81118e28 <__multadd>
811170a0:	a00b883a 	mov	r5,r20
811170a4:	000f883a 	mov	r7,zero
811170a8:	01800284 	movi	r6,10
811170ac:	e009883a 	mov	r4,fp
811170b0:	1023883a 	mov	r17,r2
811170b4:	1118e280 	call	81118e28 <__multadd>
811170b8:	1029883a 	mov	r20,r2
811170bc:	b027883a 	mov	r19,r22
811170c0:	003fc006 	br	81116fc4 <__reset+0xfb0f6fc4>
811170c4:	9011883a 	mov	r8,r18
811170c8:	00800e0e 	bge	zero,r2,81117104 <_dtoa_r+0xf70>
811170cc:	800b883a 	mov	r5,r16
811170d0:	01800044 	movi	r6,1
811170d4:	e009883a 	mov	r4,fp
811170d8:	da001715 	stw	r8,92(sp)
811170dc:	11194d80 	call	811194d8 <__lshift>
811170e0:	a80b883a 	mov	r5,r21
811170e4:	1009883a 	mov	r4,r2
811170e8:	1021883a 	mov	r16,r2
811170ec:	11196200 	call	81119620 <__mcmp>
811170f0:	da001717 	ldw	r8,92(sp)
811170f4:	0081960e 	bge	zero,r2,81117750 <_dtoa_r+0x15bc>
811170f8:	00800e44 	movi	r2,57
811170fc:	40817026 	beq	r8,r2,811176c0 <_dtoa_r+0x152c>
81117100:	ba000c44 	addi	r8,r23,49
81117104:	8825883a 	mov	r18,r17
81117108:	9dc00044 	addi	r23,r19,1
8111710c:	9a000005 	stb	r8,0(r19)
81117110:	a023883a 	mov	r17,r20
81117114:	dc000915 	stw	r16,36(sp)
81117118:	003f2406 	br	81116dac <__reset+0xfb0f6dac>
8111711c:	00800e44 	movi	r2,57
81117120:	9011883a 	mov	r8,r18
81117124:	90816626 	beq	r18,r2,811176c0 <_dtoa_r+0x152c>
81117128:	05bff516 	blt	zero,r22,81117100 <__reset+0xfb0f7100>
8111712c:	003ff506 	br	81117104 <__reset+0xfb0f7104>
81117130:	1118e280 	call	81118e28 <__multadd>
81117134:	1023883a 	mov	r17,r2
81117138:	1029883a 	mov	r20,r2
8111713c:	003fdf06 	br	811170bc <__reset+0xfb0f70bc>
81117140:	e009883a 	mov	r4,fp
81117144:	1118e000 	call	81118e00 <_Bfree>
81117148:	00800044 	movi	r2,1
8111714c:	003fbc06 	br	81117040 <__reset+0xfb0f7040>
81117150:	a80b883a 	mov	r5,r21
81117154:	8009883a 	mov	r4,r16
81117158:	11196200 	call	81119620 <__mcmp>
8111715c:	103edb0e 	bge	r2,zero,81116ccc <__reset+0xfb0f6ccc>
81117160:	800b883a 	mov	r5,r16
81117164:	000f883a 	mov	r7,zero
81117168:	01800284 	movi	r6,10
8111716c:	e009883a 	mov	r4,fp
81117170:	1118e280 	call	81118e28 <__multadd>
81117174:	1021883a 	mov	r16,r2
81117178:	d8800517 	ldw	r2,20(sp)
8111717c:	d8c00b17 	ldw	r3,44(sp)
81117180:	10bfffc4 	addi	r2,r2,-1
81117184:	d8800515 	stw	r2,20(sp)
81117188:	183f761e 	bne	r3,zero,81116f64 <__reset+0xfb0f6f64>
8111718c:	d9000c17 	ldw	r4,48(sp)
81117190:	0101730e 	bge	zero,r4,81117760 <_dtoa_r+0x15cc>
81117194:	d9000615 	stw	r4,24(sp)
81117198:	003ed006 	br	81116cdc <__reset+0xfb0f6cdc>
8111719c:	00800084 	movi	r2,2
811171a0:	3081861e 	bne	r6,r2,811177bc <_dtoa_r+0x1628>
811171a4:	d8000b15 	stw	zero,44(sp)
811171a8:	003f3c06 	br	81116e9c <__reset+0xfb0f6e9c>
811171ac:	dc000917 	ldw	r16,36(sp)
811171b0:	003e9206 	br	81116bfc <__reset+0xfb0f6bfc>
811171b4:	d9c00317 	ldw	r7,12(sp)
811171b8:	00800084 	movi	r2,2
811171bc:	11fec50e 	bge	r2,r7,81116cd4 <__reset+0xfb0f6cd4>
811171c0:	d9000617 	ldw	r4,24(sp)
811171c4:	20013c1e 	bne	r4,zero,811176b8 <_dtoa_r+0x1524>
811171c8:	a80b883a 	mov	r5,r21
811171cc:	000f883a 	mov	r7,zero
811171d0:	01800144 	movi	r6,5
811171d4:	e009883a 	mov	r4,fp
811171d8:	1118e280 	call	81118e28 <__multadd>
811171dc:	100b883a 	mov	r5,r2
811171e0:	8009883a 	mov	r4,r16
811171e4:	102b883a 	mov	r21,r2
811171e8:	11196200 	call	81119620 <__mcmp>
811171ec:	dc000915 	stw	r16,36(sp)
811171f0:	00bf410e 	bge	zero,r2,81116ef8 <__reset+0xfb0f6ef8>
811171f4:	d9c00717 	ldw	r7,28(sp)
811171f8:	00800c44 	movi	r2,49
811171fc:	38800005 	stb	r2,0(r7)
81117200:	d8800517 	ldw	r2,20(sp)
81117204:	3dc00044 	addi	r23,r7,1
81117208:	10800044 	addi	r2,r2,1
8111720c:	d8800515 	stw	r2,20(sp)
81117210:	003f3d06 	br	81116f08 <__reset+0xfb0f6f08>
81117214:	d9800517 	ldw	r6,20(sp)
81117218:	d9c00717 	ldw	r7,28(sp)
8111721c:	00800c44 	movi	r2,49
81117220:	31800044 	addi	r6,r6,1
81117224:	d9800515 	stw	r6,20(sp)
81117228:	38800005 	stb	r2,0(r7)
8111722c:	003edf06 	br	81116dac <__reset+0xfb0f6dac>
81117230:	d8000b15 	stw	zero,44(sp)
81117234:	003c9f06 	br	811164b4 <__reset+0xfb0f64b4>
81117238:	903e7e1e 	bne	r18,zero,81116c34 <__reset+0xfb0f6c34>
8111723c:	00800434 	movhi	r2,16
81117240:	10bfffc4 	addi	r2,r2,-1
81117244:	9884703a 	and	r2,r19,r2
81117248:	1000ea1e 	bne	r2,zero,811175f4 <_dtoa_r+0x1460>
8111724c:	9cdffc2c 	andhi	r19,r19,32752
81117250:	9800e826 	beq	r19,zero,811175f4 <_dtoa_r+0x1460>
81117254:	d9c00817 	ldw	r7,32(sp)
81117258:	b5800044 	addi	r22,r22,1
8111725c:	04c00044 	movi	r19,1
81117260:	39c00044 	addi	r7,r7,1
81117264:	d9c00815 	stw	r7,32(sp)
81117268:	d8800d17 	ldw	r2,52(sp)
8111726c:	103e721e 	bne	r2,zero,81116c38 <__reset+0xfb0f6c38>
81117270:	00800044 	movi	r2,1
81117274:	003e7906 	br	81116c5c <__reset+0xfb0f6c5c>
81117278:	8009883a 	mov	r4,r16
8111727c:	11200300 	call	81120030 <__floatsidf>
81117280:	d9800f17 	ldw	r6,60(sp)
81117284:	d9c01017 	ldw	r7,64(sp)
81117288:	1009883a 	mov	r4,r2
8111728c:	180b883a 	mov	r5,r3
81117290:	110f5200 	call	8110f520 <__muldf3>
81117294:	000d883a 	mov	r6,zero
81117298:	01d00734 	movhi	r7,16412
8111729c:	1009883a 	mov	r4,r2
811172a0:	180b883a 	mov	r5,r3
811172a4:	111e2c80 	call	8111e2c8 <__adddf3>
811172a8:	047f3034 	movhi	r17,64704
811172ac:	1021883a 	mov	r16,r2
811172b0:	1c63883a 	add	r17,r3,r17
811172b4:	d9000f17 	ldw	r4,60(sp)
811172b8:	d9401017 	ldw	r5,64(sp)
811172bc:	000d883a 	mov	r6,zero
811172c0:	01d00534 	movhi	r7,16404
811172c4:	111f6b40 	call	8111f6b4 <__subdf3>
811172c8:	800d883a 	mov	r6,r16
811172cc:	880f883a 	mov	r7,r17
811172d0:	1009883a 	mov	r4,r2
811172d4:	180b883a 	mov	r5,r3
811172d8:	102b883a 	mov	r21,r2
811172dc:	1829883a 	mov	r20,r3
811172e0:	111f4e40 	call	8111f4e4 <__gedf2>
811172e4:	00806c16 	blt	zero,r2,81117498 <_dtoa_r+0x1304>
811172e8:	89e0003c 	xorhi	r7,r17,32768
811172ec:	800d883a 	mov	r6,r16
811172f0:	a809883a 	mov	r4,r21
811172f4:	a00b883a 	mov	r5,r20
811172f8:	111f5c00 	call	8111f5c0 <__ledf2>
811172fc:	103d7e0e 	bge	r2,zero,811168f8 <__reset+0xfb0f68f8>
81117300:	002b883a 	mov	r21,zero
81117304:	0023883a 	mov	r17,zero
81117308:	003efb06 	br	81116ef8 <__reset+0xfb0f6ef8>
8111730c:	d8800717 	ldw	r2,28(sp)
81117310:	003bd006 	br	81116254 <__reset+0xfb0f6254>
81117314:	d9000a17 	ldw	r4,40(sp)
81117318:	d9800d17 	ldw	r6,52(sp)
8111731c:	dd400a15 	stw	r21,40(sp)
81117320:	a905c83a 	sub	r2,r21,r4
81117324:	308d883a 	add	r6,r6,r2
81117328:	d9800d15 	stw	r6,52(sp)
8111732c:	002b883a 	mov	r21,zero
81117330:	003e0606 	br	81116b4c <__reset+0xfb0f6b4c>
81117334:	9023883a 	mov	r17,r18
81117338:	9829883a 	mov	r20,r19
8111733c:	04000084 	movi	r16,2
81117340:	003c9206 	br	8111658c <__reset+0xfb0f658c>
81117344:	04000044 	movi	r16,1
81117348:	dc000c15 	stw	r16,48(sp)
8111734c:	dc000615 	stw	r16,24(sp)
81117350:	dc002215 	stw	r16,136(sp)
81117354:	e0001115 	stw	zero,68(fp)
81117358:	000b883a 	mov	r5,zero
8111735c:	003c6906 	br	81116504 <__reset+0xfb0f6504>
81117360:	3021883a 	mov	r16,r6
81117364:	003ffb06 	br	81117354 <__reset+0xfb0f7354>
81117368:	1000021e 	bne	r2,zero,81117374 <_dtoa_r+0x11e0>
8111736c:	4200004c 	andi	r8,r8,1
81117370:	403e7d1e 	bne	r8,zero,81116d68 <__reset+0xfb0f6d68>
81117374:	01000c04 	movi	r4,48
81117378:	00000106 	br	81117380 <_dtoa_r+0x11ec>
8111737c:	102f883a 	mov	r23,r2
81117380:	b8bfffc4 	addi	r2,r23,-1
81117384:	10c00007 	ldb	r3,0(r2)
81117388:	193ffc26 	beq	r3,r4,8111737c <__reset+0xfb0f737c>
8111738c:	003e8706 	br	81116dac <__reset+0xfb0f6dac>
81117390:	d8800517 	ldw	r2,20(sp)
81117394:	00a3c83a 	sub	r17,zero,r2
81117398:	8800a426 	beq	r17,zero,8111762c <_dtoa_r+0x1498>
8111739c:	888003cc 	andi	r2,r17,15
811173a0:	100490fa 	slli	r2,r2,3
811173a4:	00e044b4 	movhi	r3,33042
811173a8:	18dae804 	addi	r3,r3,27552
811173ac:	1885883a 	add	r2,r3,r2
811173b0:	11800017 	ldw	r6,0(r2)
811173b4:	11c00117 	ldw	r7,4(r2)
811173b8:	9009883a 	mov	r4,r18
811173bc:	980b883a 	mov	r5,r19
811173c0:	8823d13a 	srai	r17,r17,4
811173c4:	110f5200 	call	8110f520 <__muldf3>
811173c8:	d8800f15 	stw	r2,60(sp)
811173cc:	d8c01015 	stw	r3,64(sp)
811173d0:	8800e826 	beq	r17,zero,81117774 <_dtoa_r+0x15e0>
811173d4:	052044b4 	movhi	r20,33042
811173d8:	a51ade04 	addi	r20,r20,27512
811173dc:	04000084 	movi	r16,2
811173e0:	8980004c 	andi	r6,r17,1
811173e4:	1009883a 	mov	r4,r2
811173e8:	8823d07a 	srai	r17,r17,1
811173ec:	180b883a 	mov	r5,r3
811173f0:	30000426 	beq	r6,zero,81117404 <_dtoa_r+0x1270>
811173f4:	a1800017 	ldw	r6,0(r20)
811173f8:	a1c00117 	ldw	r7,4(r20)
811173fc:	84000044 	addi	r16,r16,1
81117400:	110f5200 	call	8110f520 <__muldf3>
81117404:	a5000204 	addi	r20,r20,8
81117408:	883ff51e 	bne	r17,zero,811173e0 <__reset+0xfb0f73e0>
8111740c:	d8800f15 	stw	r2,60(sp)
81117410:	d8c01015 	stw	r3,64(sp)
81117414:	003c7606 	br	811165f0 <__reset+0xfb0f65f0>
81117418:	00c00c04 	movi	r3,48
8111741c:	10c00005 	stb	r3,0(r2)
81117420:	d8c00517 	ldw	r3,20(sp)
81117424:	bd3fffc3 	ldbu	r20,-1(r23)
81117428:	18c00044 	addi	r3,r3,1
8111742c:	d8c00515 	stw	r3,20(sp)
81117430:	003db906 	br	81116b18 <__reset+0xfb0f6b18>
81117434:	89400117 	ldw	r5,4(r17)
81117438:	e009883a 	mov	r4,fp
8111743c:	1118d580 	call	81118d58 <_Balloc>
81117440:	89800417 	ldw	r6,16(r17)
81117444:	89400304 	addi	r5,r17,12
81117448:	11000304 	addi	r4,r2,12
8111744c:	31800084 	addi	r6,r6,2
81117450:	318d883a 	add	r6,r6,r6
81117454:	318d883a 	add	r6,r6,r6
81117458:	1027883a 	mov	r19,r2
8111745c:	11111480 	call	81111148 <memcpy>
81117460:	01800044 	movi	r6,1
81117464:	980b883a 	mov	r5,r19
81117468:	e009883a 	mov	r4,fp
8111746c:	11194d80 	call	811194d8 <__lshift>
81117470:	1029883a 	mov	r20,r2
81117474:	003ecc06 	br	81116fa8 <__reset+0xfb0f6fa8>
81117478:	00800e44 	movi	r2,57
8111747c:	90809026 	beq	r18,r2,811176c0 <_dtoa_r+0x152c>
81117480:	92000044 	addi	r8,r18,1
81117484:	003f1f06 	br	81117104 <__reset+0xfb0f7104>
81117488:	9011883a 	mov	r8,r18
8111748c:	8825883a 	mov	r18,r17
81117490:	a023883a 	mov	r17,r20
81117494:	003e2906 	br	81116d3c <__reset+0xfb0f6d3c>
81117498:	002b883a 	mov	r21,zero
8111749c:	0023883a 	mov	r17,zero
811174a0:	003f5406 	br	811171f4 <__reset+0xfb0f71f4>
811174a4:	61bfffc4 	addi	r6,r12,-1
811174a8:	300490fa 	slli	r2,r6,3
811174ac:	00e044b4 	movhi	r3,33042
811174b0:	18dae804 	addi	r3,r3,27552
811174b4:	1885883a 	add	r2,r3,r2
811174b8:	11000017 	ldw	r4,0(r2)
811174bc:	11400117 	ldw	r5,4(r2)
811174c0:	d8800717 	ldw	r2,28(sp)
811174c4:	880f883a 	mov	r7,r17
811174c8:	d9801215 	stw	r6,72(sp)
811174cc:	800d883a 	mov	r6,r16
811174d0:	db001615 	stw	r12,88(sp)
811174d4:	15c00044 	addi	r23,r2,1
811174d8:	110f5200 	call	8110f520 <__muldf3>
811174dc:	d9401017 	ldw	r5,64(sp)
811174e0:	d9000f17 	ldw	r4,60(sp)
811174e4:	d8c01515 	stw	r3,84(sp)
811174e8:	d8801415 	stw	r2,80(sp)
811174ec:	111ffb00 	call	8111ffb0 <__fixdfsi>
811174f0:	1009883a 	mov	r4,r2
811174f4:	1021883a 	mov	r16,r2
811174f8:	11200300 	call	81120030 <__floatsidf>
811174fc:	d9000f17 	ldw	r4,60(sp)
81117500:	d9401017 	ldw	r5,64(sp)
81117504:	100d883a 	mov	r6,r2
81117508:	180f883a 	mov	r7,r3
8111750c:	111f6b40 	call	8111f6b4 <__subdf3>
81117510:	1829883a 	mov	r20,r3
81117514:	d8c00717 	ldw	r3,28(sp)
81117518:	84000c04 	addi	r16,r16,48
8111751c:	1023883a 	mov	r17,r2
81117520:	1c000005 	stb	r16,0(r3)
81117524:	db001617 	ldw	r12,88(sp)
81117528:	00800044 	movi	r2,1
8111752c:	60802226 	beq	r12,r2,811175b8 <_dtoa_r+0x1424>
81117530:	d9c00717 	ldw	r7,28(sp)
81117534:	8805883a 	mov	r2,r17
81117538:	b82b883a 	mov	r21,r23
8111753c:	3b19883a 	add	r12,r7,r12
81117540:	6023883a 	mov	r17,r12
81117544:	a007883a 	mov	r3,r20
81117548:	dc800f15 	stw	r18,60(sp)
8111754c:	000d883a 	mov	r6,zero
81117550:	01d00934 	movhi	r7,16420
81117554:	1009883a 	mov	r4,r2
81117558:	180b883a 	mov	r5,r3
8111755c:	110f5200 	call	8110f520 <__muldf3>
81117560:	180b883a 	mov	r5,r3
81117564:	1009883a 	mov	r4,r2
81117568:	1829883a 	mov	r20,r3
8111756c:	1025883a 	mov	r18,r2
81117570:	111ffb00 	call	8111ffb0 <__fixdfsi>
81117574:	1009883a 	mov	r4,r2
81117578:	1021883a 	mov	r16,r2
8111757c:	11200300 	call	81120030 <__floatsidf>
81117580:	100d883a 	mov	r6,r2
81117584:	180f883a 	mov	r7,r3
81117588:	9009883a 	mov	r4,r18
8111758c:	a00b883a 	mov	r5,r20
81117590:	84000c04 	addi	r16,r16,48
81117594:	111f6b40 	call	8111f6b4 <__subdf3>
81117598:	ad400044 	addi	r21,r21,1
8111759c:	ac3fffc5 	stb	r16,-1(r21)
811175a0:	ac7fea1e 	bne	r21,r17,8111754c <__reset+0xfb0f754c>
811175a4:	1023883a 	mov	r17,r2
811175a8:	d8801217 	ldw	r2,72(sp)
811175ac:	dc800f17 	ldw	r18,60(sp)
811175b0:	1829883a 	mov	r20,r3
811175b4:	b8af883a 	add	r23,r23,r2
811175b8:	d9001417 	ldw	r4,80(sp)
811175bc:	d9401517 	ldw	r5,84(sp)
811175c0:	000d883a 	mov	r6,zero
811175c4:	01cff834 	movhi	r7,16352
811175c8:	111e2c80 	call	8111e2c8 <__adddf3>
811175cc:	880d883a 	mov	r6,r17
811175d0:	a00f883a 	mov	r7,r20
811175d4:	1009883a 	mov	r4,r2
811175d8:	180b883a 	mov	r5,r3
811175dc:	111f5c00 	call	8111f5c0 <__ledf2>
811175e0:	10003e0e 	bge	r2,zero,811176dc <_dtoa_r+0x1548>
811175e4:	d9001317 	ldw	r4,76(sp)
811175e8:	bd3fffc3 	ldbu	r20,-1(r23)
811175ec:	d9000515 	stw	r4,20(sp)
811175f0:	003d3b06 	br	81116ae0 <__reset+0xfb0f6ae0>
811175f4:	0027883a 	mov	r19,zero
811175f8:	003f1b06 	br	81117268 <__reset+0xfb0f7268>
811175fc:	d8800817 	ldw	r2,32(sp)
81117600:	11e9c83a 	sub	r20,r2,r7
81117604:	0005883a 	mov	r2,zero
81117608:	003d5406 	br	81116b5c <__reset+0xfb0f6b5c>
8111760c:	00800044 	movi	r2,1
81117610:	003dc706 	br	81116d30 <__reset+0xfb0f6d30>
81117614:	d8c00217 	ldw	r3,8(sp)
81117618:	00800d84 	movi	r2,54
8111761c:	dd400a17 	ldw	r21,40(sp)
81117620:	10c5c83a 	sub	r2,r2,r3
81117624:	dd000817 	ldw	r20,32(sp)
81117628:	003d4c06 	br	81116b5c <__reset+0xfb0f6b5c>
8111762c:	dc800f15 	stw	r18,60(sp)
81117630:	dcc01015 	stw	r19,64(sp)
81117634:	04000084 	movi	r16,2
81117638:	003bed06 	br	811165f0 <__reset+0xfb0f65f0>
8111763c:	d9000617 	ldw	r4,24(sp)
81117640:	203f0d26 	beq	r4,zero,81117278 <__reset+0xfb0f7278>
81117644:	d9800c17 	ldw	r6,48(sp)
81117648:	01bcab0e 	bge	zero,r6,811168f8 <__reset+0xfb0f68f8>
8111764c:	d9401017 	ldw	r5,64(sp)
81117650:	d9000f17 	ldw	r4,60(sp)
81117654:	000d883a 	mov	r6,zero
81117658:	01d00934 	movhi	r7,16420
8111765c:	110f5200 	call	8110f520 <__muldf3>
81117660:	81000044 	addi	r4,r16,1
81117664:	d8800f15 	stw	r2,60(sp)
81117668:	d8c01015 	stw	r3,64(sp)
8111766c:	11200300 	call	81120030 <__floatsidf>
81117670:	d9800f17 	ldw	r6,60(sp)
81117674:	d9c01017 	ldw	r7,64(sp)
81117678:	1009883a 	mov	r4,r2
8111767c:	180b883a 	mov	r5,r3
81117680:	110f5200 	call	8110f520 <__muldf3>
81117684:	01d00734 	movhi	r7,16412
81117688:	000d883a 	mov	r6,zero
8111768c:	1009883a 	mov	r4,r2
81117690:	180b883a 	mov	r5,r3
81117694:	111e2c80 	call	8111e2c8 <__adddf3>
81117698:	d9c00517 	ldw	r7,20(sp)
8111769c:	047f3034 	movhi	r17,64704
811176a0:	1021883a 	mov	r16,r2
811176a4:	39ffffc4 	addi	r7,r7,-1
811176a8:	d9c01315 	stw	r7,76(sp)
811176ac:	1c63883a 	add	r17,r3,r17
811176b0:	db000c17 	ldw	r12,48(sp)
811176b4:	003bea06 	br	81116660 <__reset+0xfb0f6660>
811176b8:	dc000915 	stw	r16,36(sp)
811176bc:	003e0e06 	br	81116ef8 <__reset+0xfb0f6ef8>
811176c0:	01000e44 	movi	r4,57
811176c4:	8825883a 	mov	r18,r17
811176c8:	9dc00044 	addi	r23,r19,1
811176cc:	99000005 	stb	r4,0(r19)
811176d0:	a023883a 	mov	r17,r20
811176d4:	dc000915 	stw	r16,36(sp)
811176d8:	003da406 	br	81116d6c <__reset+0xfb0f6d6c>
811176dc:	d9801417 	ldw	r6,80(sp)
811176e0:	d9c01517 	ldw	r7,84(sp)
811176e4:	0009883a 	mov	r4,zero
811176e8:	014ff834 	movhi	r5,16352
811176ec:	111f6b40 	call	8111f6b4 <__subdf3>
811176f0:	880d883a 	mov	r6,r17
811176f4:	a00f883a 	mov	r7,r20
811176f8:	1009883a 	mov	r4,r2
811176fc:	180b883a 	mov	r5,r3
81117700:	111f4e40 	call	8111f4e4 <__gedf2>
81117704:	00bc7c0e 	bge	zero,r2,811168f8 <__reset+0xfb0f68f8>
81117708:	01000c04 	movi	r4,48
8111770c:	00000106 	br	81117714 <_dtoa_r+0x1580>
81117710:	102f883a 	mov	r23,r2
81117714:	b8bfffc4 	addi	r2,r23,-1
81117718:	10c00007 	ldb	r3,0(r2)
8111771c:	193ffc26 	beq	r3,r4,81117710 <__reset+0xfb0f7710>
81117720:	d9801317 	ldw	r6,76(sp)
81117724:	d9800515 	stw	r6,20(sp)
81117728:	003c4406 	br	8111683c <__reset+0xfb0f683c>
8111772c:	d9801317 	ldw	r6,76(sp)
81117730:	d9800515 	stw	r6,20(sp)
81117734:	003cea06 	br	81116ae0 <__reset+0xfb0f6ae0>
81117738:	dd800f17 	ldw	r22,60(sp)
8111773c:	dcc01017 	ldw	r19,64(sp)
81117740:	dc801217 	ldw	r18,72(sp)
81117744:	003c6c06 	br	811168f8 <__reset+0xfb0f68f8>
81117748:	903e031e 	bne	r18,zero,81116f58 <__reset+0xfb0f6f58>
8111774c:	003ebb06 	br	8111723c <__reset+0xfb0f723c>
81117750:	103e6c1e 	bne	r2,zero,81117104 <__reset+0xfb0f7104>
81117754:	4080004c 	andi	r2,r8,1
81117758:	103e6a26 	beq	r2,zero,81117104 <__reset+0xfb0f7104>
8111775c:	003e6606 	br	811170f8 <__reset+0xfb0f70f8>
81117760:	d8c00317 	ldw	r3,12(sp)
81117764:	00800084 	movi	r2,2
81117768:	10c02916 	blt	r2,r3,81117810 <_dtoa_r+0x167c>
8111776c:	d9000c17 	ldw	r4,48(sp)
81117770:	003e8806 	br	81117194 <__reset+0xfb0f7194>
81117774:	04000084 	movi	r16,2
81117778:	003b9d06 	br	811165f0 <__reset+0xfb0f65f0>
8111777c:	d9001317 	ldw	r4,76(sp)
81117780:	d9000515 	stw	r4,20(sp)
81117784:	003cd606 	br	81116ae0 <__reset+0xfb0f6ae0>
81117788:	d8801317 	ldw	r2,76(sp)
8111778c:	d8800515 	stw	r2,20(sp)
81117790:	003c2a06 	br	8111683c <__reset+0xfb0f683c>
81117794:	d9800317 	ldw	r6,12(sp)
81117798:	00800084 	movi	r2,2
8111779c:	11801516 	blt	r2,r6,811177f4 <_dtoa_r+0x1660>
811177a0:	d9c00c17 	ldw	r7,48(sp)
811177a4:	d9c00615 	stw	r7,24(sp)
811177a8:	003df706 	br	81116f88 <__reset+0xfb0f6f88>
811177ac:	193d3926 	beq	r3,r4,81116c94 <__reset+0xfb0f6c94>
811177b0:	00c00f04 	movi	r3,60
811177b4:	1885c83a 	sub	r2,r3,r2
811177b8:	003ddf06 	br	81116f38 <__reset+0xfb0f6f38>
811177bc:	e009883a 	mov	r4,fp
811177c0:	e0001115 	stw	zero,68(fp)
811177c4:	000b883a 	mov	r5,zero
811177c8:	1118d580 	call	81118d58 <_Balloc>
811177cc:	d8800715 	stw	r2,28(sp)
811177d0:	d8c00717 	ldw	r3,28(sp)
811177d4:	00bfffc4 	movi	r2,-1
811177d8:	01000044 	movi	r4,1
811177dc:	d8800c15 	stw	r2,48(sp)
811177e0:	e0c01015 	stw	r3,64(fp)
811177e4:	d9000b15 	stw	r4,44(sp)
811177e8:	d8800615 	stw	r2,24(sp)
811177ec:	d8002215 	stw	zero,136(sp)
811177f0:	003c4106 	br	811168f8 <__reset+0xfb0f68f8>
811177f4:	d8c00c17 	ldw	r3,48(sp)
811177f8:	d8c00615 	stw	r3,24(sp)
811177fc:	003e7006 	br	811171c0 <__reset+0xfb0f71c0>
81117800:	04400044 	movi	r17,1
81117804:	003b2006 	br	81116488 <__reset+0xfb0f6488>
81117808:	000b883a 	mov	r5,zero
8111780c:	003b3d06 	br	81116504 <__reset+0xfb0f6504>
81117810:	d8800c17 	ldw	r2,48(sp)
81117814:	d8800615 	stw	r2,24(sp)
81117818:	003e6906 	br	811171c0 <__reset+0xfb0f71c0>

8111781c <__sflush_r>:
8111781c:	2880030b 	ldhu	r2,12(r5)
81117820:	defffb04 	addi	sp,sp,-20
81117824:	dcc00315 	stw	r19,12(sp)
81117828:	dc400115 	stw	r17,4(sp)
8111782c:	dfc00415 	stw	ra,16(sp)
81117830:	dc800215 	stw	r18,8(sp)
81117834:	dc000015 	stw	r16,0(sp)
81117838:	10c0020c 	andi	r3,r2,8
8111783c:	2823883a 	mov	r17,r5
81117840:	2027883a 	mov	r19,r4
81117844:	1800311e 	bne	r3,zero,8111790c <__sflush_r+0xf0>
81117848:	28c00117 	ldw	r3,4(r5)
8111784c:	10820014 	ori	r2,r2,2048
81117850:	2880030d 	sth	r2,12(r5)
81117854:	00c04b0e 	bge	zero,r3,81117984 <__sflush_r+0x168>
81117858:	8a000a17 	ldw	r8,40(r17)
8111785c:	40002326 	beq	r8,zero,811178ec <__sflush_r+0xd0>
81117860:	9c000017 	ldw	r16,0(r19)
81117864:	10c4000c 	andi	r3,r2,4096
81117868:	98000015 	stw	zero,0(r19)
8111786c:	18004826 	beq	r3,zero,81117990 <__sflush_r+0x174>
81117870:	89801417 	ldw	r6,80(r17)
81117874:	10c0010c 	andi	r3,r2,4
81117878:	18000626 	beq	r3,zero,81117894 <__sflush_r+0x78>
8111787c:	88c00117 	ldw	r3,4(r17)
81117880:	88800c17 	ldw	r2,48(r17)
81117884:	30cdc83a 	sub	r6,r6,r3
81117888:	10000226 	beq	r2,zero,81117894 <__sflush_r+0x78>
8111788c:	88800f17 	ldw	r2,60(r17)
81117890:	308dc83a 	sub	r6,r6,r2
81117894:	89400717 	ldw	r5,28(r17)
81117898:	000f883a 	mov	r7,zero
8111789c:	9809883a 	mov	r4,r19
811178a0:	403ee83a 	callr	r8
811178a4:	00ffffc4 	movi	r3,-1
811178a8:	10c04426 	beq	r2,r3,811179bc <__sflush_r+0x1a0>
811178ac:	88c0030b 	ldhu	r3,12(r17)
811178b0:	89000417 	ldw	r4,16(r17)
811178b4:	88000115 	stw	zero,4(r17)
811178b8:	197dffcc 	andi	r5,r3,63487
811178bc:	8940030d 	sth	r5,12(r17)
811178c0:	89000015 	stw	r4,0(r17)
811178c4:	18c4000c 	andi	r3,r3,4096
811178c8:	18002c1e 	bne	r3,zero,8111797c <__sflush_r+0x160>
811178cc:	89400c17 	ldw	r5,48(r17)
811178d0:	9c000015 	stw	r16,0(r19)
811178d4:	28000526 	beq	r5,zero,811178ec <__sflush_r+0xd0>
811178d8:	88801004 	addi	r2,r17,64
811178dc:	28800226 	beq	r5,r2,811178e8 <__sflush_r+0xcc>
811178e0:	9809883a 	mov	r4,r19
811178e4:	11180340 	call	81118034 <_free_r>
811178e8:	88000c15 	stw	zero,48(r17)
811178ec:	0005883a 	mov	r2,zero
811178f0:	dfc00417 	ldw	ra,16(sp)
811178f4:	dcc00317 	ldw	r19,12(sp)
811178f8:	dc800217 	ldw	r18,8(sp)
811178fc:	dc400117 	ldw	r17,4(sp)
81117900:	dc000017 	ldw	r16,0(sp)
81117904:	dec00504 	addi	sp,sp,20
81117908:	f800283a 	ret
8111790c:	2c800417 	ldw	r18,16(r5)
81117910:	903ff626 	beq	r18,zero,811178ec <__reset+0xfb0f78ec>
81117914:	2c000017 	ldw	r16,0(r5)
81117918:	108000cc 	andi	r2,r2,3
8111791c:	2c800015 	stw	r18,0(r5)
81117920:	84a1c83a 	sub	r16,r16,r18
81117924:	1000131e 	bne	r2,zero,81117974 <__sflush_r+0x158>
81117928:	28800517 	ldw	r2,20(r5)
8111792c:	88800215 	stw	r2,8(r17)
81117930:	04000316 	blt	zero,r16,81117940 <__sflush_r+0x124>
81117934:	003fed06 	br	811178ec <__reset+0xfb0f78ec>
81117938:	90a5883a 	add	r18,r18,r2
8111793c:	043feb0e 	bge	zero,r16,811178ec <__reset+0xfb0f78ec>
81117940:	88800917 	ldw	r2,36(r17)
81117944:	89400717 	ldw	r5,28(r17)
81117948:	800f883a 	mov	r7,r16
8111794c:	900d883a 	mov	r6,r18
81117950:	9809883a 	mov	r4,r19
81117954:	103ee83a 	callr	r2
81117958:	80a1c83a 	sub	r16,r16,r2
8111795c:	00bff616 	blt	zero,r2,81117938 <__reset+0xfb0f7938>
81117960:	88c0030b 	ldhu	r3,12(r17)
81117964:	00bfffc4 	movi	r2,-1
81117968:	18c01014 	ori	r3,r3,64
8111796c:	88c0030d 	sth	r3,12(r17)
81117970:	003fdf06 	br	811178f0 <__reset+0xfb0f78f0>
81117974:	0005883a 	mov	r2,zero
81117978:	003fec06 	br	8111792c <__reset+0xfb0f792c>
8111797c:	88801415 	stw	r2,80(r17)
81117980:	003fd206 	br	811178cc <__reset+0xfb0f78cc>
81117984:	28c00f17 	ldw	r3,60(r5)
81117988:	00ffb316 	blt	zero,r3,81117858 <__reset+0xfb0f7858>
8111798c:	003fd706 	br	811178ec <__reset+0xfb0f78ec>
81117990:	89400717 	ldw	r5,28(r17)
81117994:	000d883a 	mov	r6,zero
81117998:	01c00044 	movi	r7,1
8111799c:	9809883a 	mov	r4,r19
811179a0:	403ee83a 	callr	r8
811179a4:	100d883a 	mov	r6,r2
811179a8:	00bfffc4 	movi	r2,-1
811179ac:	30801426 	beq	r6,r2,81117a00 <__sflush_r+0x1e4>
811179b0:	8880030b 	ldhu	r2,12(r17)
811179b4:	8a000a17 	ldw	r8,40(r17)
811179b8:	003fae06 	br	81117874 <__reset+0xfb0f7874>
811179bc:	98c00017 	ldw	r3,0(r19)
811179c0:	183fba26 	beq	r3,zero,811178ac <__reset+0xfb0f78ac>
811179c4:	01000744 	movi	r4,29
811179c8:	19000626 	beq	r3,r4,811179e4 <__sflush_r+0x1c8>
811179cc:	01000584 	movi	r4,22
811179d0:	19000426 	beq	r3,r4,811179e4 <__sflush_r+0x1c8>
811179d4:	88c0030b 	ldhu	r3,12(r17)
811179d8:	18c01014 	ori	r3,r3,64
811179dc:	88c0030d 	sth	r3,12(r17)
811179e0:	003fc306 	br	811178f0 <__reset+0xfb0f78f0>
811179e4:	8880030b 	ldhu	r2,12(r17)
811179e8:	88c00417 	ldw	r3,16(r17)
811179ec:	88000115 	stw	zero,4(r17)
811179f0:	10bdffcc 	andi	r2,r2,63487
811179f4:	8880030d 	sth	r2,12(r17)
811179f8:	88c00015 	stw	r3,0(r17)
811179fc:	003fb306 	br	811178cc <__reset+0xfb0f78cc>
81117a00:	98800017 	ldw	r2,0(r19)
81117a04:	103fea26 	beq	r2,zero,811179b0 <__reset+0xfb0f79b0>
81117a08:	00c00744 	movi	r3,29
81117a0c:	10c00226 	beq	r2,r3,81117a18 <__sflush_r+0x1fc>
81117a10:	00c00584 	movi	r3,22
81117a14:	10c0031e 	bne	r2,r3,81117a24 <__sflush_r+0x208>
81117a18:	9c000015 	stw	r16,0(r19)
81117a1c:	0005883a 	mov	r2,zero
81117a20:	003fb306 	br	811178f0 <__reset+0xfb0f78f0>
81117a24:	88c0030b 	ldhu	r3,12(r17)
81117a28:	3005883a 	mov	r2,r6
81117a2c:	18c01014 	ori	r3,r3,64
81117a30:	88c0030d 	sth	r3,12(r17)
81117a34:	003fae06 	br	811178f0 <__reset+0xfb0f78f0>

81117a38 <_fflush_r>:
81117a38:	defffd04 	addi	sp,sp,-12
81117a3c:	dc000115 	stw	r16,4(sp)
81117a40:	dfc00215 	stw	ra,8(sp)
81117a44:	2021883a 	mov	r16,r4
81117a48:	20000226 	beq	r4,zero,81117a54 <_fflush_r+0x1c>
81117a4c:	20800e17 	ldw	r2,56(r4)
81117a50:	10000c26 	beq	r2,zero,81117a84 <_fflush_r+0x4c>
81117a54:	2880030f 	ldh	r2,12(r5)
81117a58:	1000051e 	bne	r2,zero,81117a70 <_fflush_r+0x38>
81117a5c:	0005883a 	mov	r2,zero
81117a60:	dfc00217 	ldw	ra,8(sp)
81117a64:	dc000117 	ldw	r16,4(sp)
81117a68:	dec00304 	addi	sp,sp,12
81117a6c:	f800283a 	ret
81117a70:	8009883a 	mov	r4,r16
81117a74:	dfc00217 	ldw	ra,8(sp)
81117a78:	dc000117 	ldw	r16,4(sp)
81117a7c:	dec00304 	addi	sp,sp,12
81117a80:	111781c1 	jmpi	8111781c <__sflush_r>
81117a84:	d9400015 	stw	r5,0(sp)
81117a88:	1117e140 	call	81117e14 <__sinit>
81117a8c:	d9400017 	ldw	r5,0(sp)
81117a90:	003ff006 	br	81117a54 <__reset+0xfb0f7a54>

81117a94 <fflush>:
81117a94:	20000526 	beq	r4,zero,81117aac <fflush+0x18>
81117a98:	00a044f4 	movhi	r2,33043
81117a9c:	10a2f004 	addi	r2,r2,-29760
81117aa0:	200b883a 	mov	r5,r4
81117aa4:	11000017 	ldw	r4,0(r2)
81117aa8:	1117a381 	jmpi	81117a38 <_fflush_r>
81117aac:	00a044f4 	movhi	r2,33043
81117ab0:	10a2ef04 	addi	r2,r2,-29764
81117ab4:	11000017 	ldw	r4,0(r2)
81117ab8:	01604474 	movhi	r5,33041
81117abc:	295e8e04 	addi	r5,r5,31288
81117ac0:	11188c41 	jmpi	811188c4 <_fwalk_reent>

81117ac4 <__fp_unlock>:
81117ac4:	0005883a 	mov	r2,zero
81117ac8:	f800283a 	ret

81117acc <_cleanup_r>:
81117acc:	016044b4 	movhi	r5,33042
81117ad0:	29740604 	addi	r5,r5,-12264
81117ad4:	11188c41 	jmpi	811188c4 <_fwalk_reent>

81117ad8 <__sinit.part.1>:
81117ad8:	defff704 	addi	sp,sp,-36
81117adc:	00e04474 	movhi	r3,33041
81117ae0:	dfc00815 	stw	ra,32(sp)
81117ae4:	ddc00715 	stw	r23,28(sp)
81117ae8:	dd800615 	stw	r22,24(sp)
81117aec:	dd400515 	stw	r21,20(sp)
81117af0:	dd000415 	stw	r20,16(sp)
81117af4:	dcc00315 	stw	r19,12(sp)
81117af8:	dc800215 	stw	r18,8(sp)
81117afc:	dc400115 	stw	r17,4(sp)
81117b00:	dc000015 	stw	r16,0(sp)
81117b04:	18deb304 	addi	r3,r3,31436
81117b08:	24000117 	ldw	r16,4(r4)
81117b0c:	20c00f15 	stw	r3,60(r4)
81117b10:	2080bb04 	addi	r2,r4,748
81117b14:	00c000c4 	movi	r3,3
81117b18:	20c0b915 	stw	r3,740(r4)
81117b1c:	2080ba15 	stw	r2,744(r4)
81117b20:	2000b815 	stw	zero,736(r4)
81117b24:	05c00204 	movi	r23,8
81117b28:	00800104 	movi	r2,4
81117b2c:	2025883a 	mov	r18,r4
81117b30:	b80d883a 	mov	r6,r23
81117b34:	81001704 	addi	r4,r16,92
81117b38:	000b883a 	mov	r5,zero
81117b3c:	80000015 	stw	zero,0(r16)
81117b40:	80000115 	stw	zero,4(r16)
81117b44:	80000215 	stw	zero,8(r16)
81117b48:	8080030d 	sth	r2,12(r16)
81117b4c:	80001915 	stw	zero,100(r16)
81117b50:	8000038d 	sth	zero,14(r16)
81117b54:	80000415 	stw	zero,16(r16)
81117b58:	80000515 	stw	zero,20(r16)
81117b5c:	80000615 	stw	zero,24(r16)
81117b60:	11112900 	call	81111290 <memset>
81117b64:	05a04474 	movhi	r22,33041
81117b68:	94400217 	ldw	r17,8(r18)
81117b6c:	05604474 	movhi	r21,33041
81117b70:	05204474 	movhi	r20,33041
81117b74:	04e04474 	movhi	r19,33041
81117b78:	b585ea04 	addi	r22,r22,6056
81117b7c:	ad460104 	addi	r21,r21,6148
81117b80:	a5062004 	addi	r20,r20,6272
81117b84:	9cc63704 	addi	r19,r19,6364
81117b88:	85800815 	stw	r22,32(r16)
81117b8c:	85400915 	stw	r21,36(r16)
81117b90:	85000a15 	stw	r20,40(r16)
81117b94:	84c00b15 	stw	r19,44(r16)
81117b98:	84000715 	stw	r16,28(r16)
81117b9c:	00800284 	movi	r2,10
81117ba0:	8880030d 	sth	r2,12(r17)
81117ba4:	00800044 	movi	r2,1
81117ba8:	b80d883a 	mov	r6,r23
81117bac:	89001704 	addi	r4,r17,92
81117bb0:	000b883a 	mov	r5,zero
81117bb4:	88000015 	stw	zero,0(r17)
81117bb8:	88000115 	stw	zero,4(r17)
81117bbc:	88000215 	stw	zero,8(r17)
81117bc0:	88001915 	stw	zero,100(r17)
81117bc4:	8880038d 	sth	r2,14(r17)
81117bc8:	88000415 	stw	zero,16(r17)
81117bcc:	88000515 	stw	zero,20(r17)
81117bd0:	88000615 	stw	zero,24(r17)
81117bd4:	11112900 	call	81111290 <memset>
81117bd8:	94000317 	ldw	r16,12(r18)
81117bdc:	00800484 	movi	r2,18
81117be0:	8c400715 	stw	r17,28(r17)
81117be4:	8d800815 	stw	r22,32(r17)
81117be8:	8d400915 	stw	r21,36(r17)
81117bec:	8d000a15 	stw	r20,40(r17)
81117bf0:	8cc00b15 	stw	r19,44(r17)
81117bf4:	8080030d 	sth	r2,12(r16)
81117bf8:	00800084 	movi	r2,2
81117bfc:	80000015 	stw	zero,0(r16)
81117c00:	80000115 	stw	zero,4(r16)
81117c04:	80000215 	stw	zero,8(r16)
81117c08:	80001915 	stw	zero,100(r16)
81117c0c:	8080038d 	sth	r2,14(r16)
81117c10:	80000415 	stw	zero,16(r16)
81117c14:	80000515 	stw	zero,20(r16)
81117c18:	80000615 	stw	zero,24(r16)
81117c1c:	b80d883a 	mov	r6,r23
81117c20:	000b883a 	mov	r5,zero
81117c24:	81001704 	addi	r4,r16,92
81117c28:	11112900 	call	81111290 <memset>
81117c2c:	00800044 	movi	r2,1
81117c30:	84000715 	stw	r16,28(r16)
81117c34:	85800815 	stw	r22,32(r16)
81117c38:	85400915 	stw	r21,36(r16)
81117c3c:	85000a15 	stw	r20,40(r16)
81117c40:	84c00b15 	stw	r19,44(r16)
81117c44:	90800e15 	stw	r2,56(r18)
81117c48:	dfc00817 	ldw	ra,32(sp)
81117c4c:	ddc00717 	ldw	r23,28(sp)
81117c50:	dd800617 	ldw	r22,24(sp)
81117c54:	dd400517 	ldw	r21,20(sp)
81117c58:	dd000417 	ldw	r20,16(sp)
81117c5c:	dcc00317 	ldw	r19,12(sp)
81117c60:	dc800217 	ldw	r18,8(sp)
81117c64:	dc400117 	ldw	r17,4(sp)
81117c68:	dc000017 	ldw	r16,0(sp)
81117c6c:	dec00904 	addi	sp,sp,36
81117c70:	f800283a 	ret

81117c74 <__fp_lock>:
81117c74:	0005883a 	mov	r2,zero
81117c78:	f800283a 	ret

81117c7c <__sfmoreglue>:
81117c7c:	defffc04 	addi	sp,sp,-16
81117c80:	dc400115 	stw	r17,4(sp)
81117c84:	2c7fffc4 	addi	r17,r5,-1
81117c88:	8c401a24 	muli	r17,r17,104
81117c8c:	dc800215 	stw	r18,8(sp)
81117c90:	2825883a 	mov	r18,r5
81117c94:	89401d04 	addi	r5,r17,116
81117c98:	dc000015 	stw	r16,0(sp)
81117c9c:	dfc00315 	stw	ra,12(sp)
81117ca0:	111093c0 	call	8111093c <_malloc_r>
81117ca4:	1021883a 	mov	r16,r2
81117ca8:	10000726 	beq	r2,zero,81117cc8 <__sfmoreglue+0x4c>
81117cac:	11000304 	addi	r4,r2,12
81117cb0:	10000015 	stw	zero,0(r2)
81117cb4:	14800115 	stw	r18,4(r2)
81117cb8:	11000215 	stw	r4,8(r2)
81117cbc:	89801a04 	addi	r6,r17,104
81117cc0:	000b883a 	mov	r5,zero
81117cc4:	11112900 	call	81111290 <memset>
81117cc8:	8005883a 	mov	r2,r16
81117ccc:	dfc00317 	ldw	ra,12(sp)
81117cd0:	dc800217 	ldw	r18,8(sp)
81117cd4:	dc400117 	ldw	r17,4(sp)
81117cd8:	dc000017 	ldw	r16,0(sp)
81117cdc:	dec00404 	addi	sp,sp,16
81117ce0:	f800283a 	ret

81117ce4 <__sfp>:
81117ce4:	defffb04 	addi	sp,sp,-20
81117ce8:	dc000015 	stw	r16,0(sp)
81117cec:	042044f4 	movhi	r16,33043
81117cf0:	8422ef04 	addi	r16,r16,-29764
81117cf4:	dcc00315 	stw	r19,12(sp)
81117cf8:	2027883a 	mov	r19,r4
81117cfc:	81000017 	ldw	r4,0(r16)
81117d00:	dfc00415 	stw	ra,16(sp)
81117d04:	dc800215 	stw	r18,8(sp)
81117d08:	20800e17 	ldw	r2,56(r4)
81117d0c:	dc400115 	stw	r17,4(sp)
81117d10:	1000021e 	bne	r2,zero,81117d1c <__sfp+0x38>
81117d14:	1117ad80 	call	81117ad8 <__sinit.part.1>
81117d18:	81000017 	ldw	r4,0(r16)
81117d1c:	2480b804 	addi	r18,r4,736
81117d20:	047fffc4 	movi	r17,-1
81117d24:	91000117 	ldw	r4,4(r18)
81117d28:	94000217 	ldw	r16,8(r18)
81117d2c:	213fffc4 	addi	r4,r4,-1
81117d30:	20000a16 	blt	r4,zero,81117d5c <__sfp+0x78>
81117d34:	8080030f 	ldh	r2,12(r16)
81117d38:	10000c26 	beq	r2,zero,81117d6c <__sfp+0x88>
81117d3c:	80c01d04 	addi	r3,r16,116
81117d40:	00000206 	br	81117d4c <__sfp+0x68>
81117d44:	18bfe60f 	ldh	r2,-104(r3)
81117d48:	10000826 	beq	r2,zero,81117d6c <__sfp+0x88>
81117d4c:	213fffc4 	addi	r4,r4,-1
81117d50:	1c3ffd04 	addi	r16,r3,-12
81117d54:	18c01a04 	addi	r3,r3,104
81117d58:	247ffa1e 	bne	r4,r17,81117d44 <__reset+0xfb0f7d44>
81117d5c:	90800017 	ldw	r2,0(r18)
81117d60:	10001d26 	beq	r2,zero,81117dd8 <__sfp+0xf4>
81117d64:	1025883a 	mov	r18,r2
81117d68:	003fee06 	br	81117d24 <__reset+0xfb0f7d24>
81117d6c:	00bfffc4 	movi	r2,-1
81117d70:	8080038d 	sth	r2,14(r16)
81117d74:	00800044 	movi	r2,1
81117d78:	8080030d 	sth	r2,12(r16)
81117d7c:	80001915 	stw	zero,100(r16)
81117d80:	80000015 	stw	zero,0(r16)
81117d84:	80000215 	stw	zero,8(r16)
81117d88:	80000115 	stw	zero,4(r16)
81117d8c:	80000415 	stw	zero,16(r16)
81117d90:	80000515 	stw	zero,20(r16)
81117d94:	80000615 	stw	zero,24(r16)
81117d98:	01800204 	movi	r6,8
81117d9c:	000b883a 	mov	r5,zero
81117da0:	81001704 	addi	r4,r16,92
81117da4:	11112900 	call	81111290 <memset>
81117da8:	8005883a 	mov	r2,r16
81117dac:	80000c15 	stw	zero,48(r16)
81117db0:	80000d15 	stw	zero,52(r16)
81117db4:	80001115 	stw	zero,68(r16)
81117db8:	80001215 	stw	zero,72(r16)
81117dbc:	dfc00417 	ldw	ra,16(sp)
81117dc0:	dcc00317 	ldw	r19,12(sp)
81117dc4:	dc800217 	ldw	r18,8(sp)
81117dc8:	dc400117 	ldw	r17,4(sp)
81117dcc:	dc000017 	ldw	r16,0(sp)
81117dd0:	dec00504 	addi	sp,sp,20
81117dd4:	f800283a 	ret
81117dd8:	01400104 	movi	r5,4
81117ddc:	9809883a 	mov	r4,r19
81117de0:	1117c7c0 	call	81117c7c <__sfmoreglue>
81117de4:	90800015 	stw	r2,0(r18)
81117de8:	103fde1e 	bne	r2,zero,81117d64 <__reset+0xfb0f7d64>
81117dec:	00800304 	movi	r2,12
81117df0:	98800015 	stw	r2,0(r19)
81117df4:	0005883a 	mov	r2,zero
81117df8:	003ff006 	br	81117dbc <__reset+0xfb0f7dbc>

81117dfc <_cleanup>:
81117dfc:	00a044f4 	movhi	r2,33043
81117e00:	10a2ef04 	addi	r2,r2,-29764
81117e04:	11000017 	ldw	r4,0(r2)
81117e08:	016044b4 	movhi	r5,33042
81117e0c:	29740604 	addi	r5,r5,-12264
81117e10:	11188c41 	jmpi	811188c4 <_fwalk_reent>

81117e14 <__sinit>:
81117e14:	20800e17 	ldw	r2,56(r4)
81117e18:	10000126 	beq	r2,zero,81117e20 <__sinit+0xc>
81117e1c:	f800283a 	ret
81117e20:	1117ad81 	jmpi	81117ad8 <__sinit.part.1>

81117e24 <__sfp_lock_acquire>:
81117e24:	f800283a 	ret

81117e28 <__sfp_lock_release>:
81117e28:	f800283a 	ret

81117e2c <__sinit_lock_acquire>:
81117e2c:	f800283a 	ret

81117e30 <__sinit_lock_release>:
81117e30:	f800283a 	ret

81117e34 <__fp_lock_all>:
81117e34:	00a044f4 	movhi	r2,33043
81117e38:	10a2f004 	addi	r2,r2,-29760
81117e3c:	11000017 	ldw	r4,0(r2)
81117e40:	01604474 	movhi	r5,33041
81117e44:	295f1d04 	addi	r5,r5,31860
81117e48:	11188001 	jmpi	81118800 <_fwalk>

81117e4c <__fp_unlock_all>:
81117e4c:	00a044f4 	movhi	r2,33043
81117e50:	10a2f004 	addi	r2,r2,-29760
81117e54:	11000017 	ldw	r4,0(r2)
81117e58:	01604474 	movhi	r5,33041
81117e5c:	295eb104 	addi	r5,r5,31428
81117e60:	11188001 	jmpi	81118800 <_fwalk>

81117e64 <__sflags>:
81117e64:	28800007 	ldb	r2,0(r5)
81117e68:	00c01c84 	movi	r3,114
81117e6c:	10c02426 	beq	r2,r3,81117f00 <__sflags+0x9c>
81117e70:	00c01dc4 	movi	r3,119
81117e74:	10c01e26 	beq	r2,r3,81117ef0 <__sflags+0x8c>
81117e78:	00c01844 	movi	r3,97
81117e7c:	10c00426 	beq	r2,r3,81117e90 <__sflags+0x2c>
81117e80:	00800584 	movi	r2,22
81117e84:	20800015 	stw	r2,0(r4)
81117e88:	0005883a 	mov	r2,zero
81117e8c:	f800283a 	ret
81117e90:	02c08204 	movi	r11,520
81117e94:	01000044 	movi	r4,1
81117e98:	00804204 	movi	r2,264
81117e9c:	01c00ac4 	movi	r7,43
81117ea0:	02bff8c4 	movi	r10,-29
81117ea4:	027fff04 	movi	r9,-4
81117ea8:	02001e04 	movi	r8,120
81117eac:	29400044 	addi	r5,r5,1
81117eb0:	28c00007 	ldb	r3,0(r5)
81117eb4:	18000626 	beq	r3,zero,81117ed0 <__sflags+0x6c>
81117eb8:	19c00826 	beq	r3,r7,81117edc <__sflags+0x78>
81117ebc:	1a3ffb1e 	bne	r3,r8,81117eac <__reset+0xfb0f7eac>
81117ec0:	29400044 	addi	r5,r5,1
81117ec4:	28c00007 	ldb	r3,0(r5)
81117ec8:	21020014 	ori	r4,r4,2048
81117ecc:	183ffa1e 	bne	r3,zero,81117eb8 <__reset+0xfb0f7eb8>
81117ed0:	22c8b03a 	or	r4,r4,r11
81117ed4:	31000015 	stw	r4,0(r6)
81117ed8:	f800283a 	ret
81117edc:	1284703a 	and	r2,r2,r10
81117ee0:	2248703a 	and	r4,r4,r9
81117ee4:	10800414 	ori	r2,r2,16
81117ee8:	21000094 	ori	r4,r4,2
81117eec:	003fef06 	br	81117eac <__reset+0xfb0f7eac>
81117ef0:	02c18004 	movi	r11,1536
81117ef4:	01000044 	movi	r4,1
81117ef8:	00800204 	movi	r2,8
81117efc:	003fe706 	br	81117e9c <__reset+0xfb0f7e9c>
81117f00:	0017883a 	mov	r11,zero
81117f04:	0009883a 	mov	r4,zero
81117f08:	00800104 	movi	r2,4
81117f0c:	003fe306 	br	81117e9c <__reset+0xfb0f7e9c>

81117f10 <_malloc_trim_r>:
81117f10:	defffb04 	addi	sp,sp,-20
81117f14:	dcc00315 	stw	r19,12(sp)
81117f18:	04e044b4 	movhi	r19,33042
81117f1c:	dc800215 	stw	r18,8(sp)
81117f20:	dc400115 	stw	r17,4(sp)
81117f24:	dc000015 	stw	r16,0(sp)
81117f28:	dfc00415 	stw	ra,16(sp)
81117f2c:	2821883a 	mov	r16,r5
81117f30:	9cdcdf04 	addi	r19,r19,29564
81117f34:	2025883a 	mov	r18,r4
81117f38:	112090c0 	call	8112090c <__malloc_lock>
81117f3c:	98800217 	ldw	r2,8(r19)
81117f40:	14400117 	ldw	r17,4(r2)
81117f44:	00bfff04 	movi	r2,-4
81117f48:	88a2703a 	and	r17,r17,r2
81117f4c:	8c21c83a 	sub	r16,r17,r16
81117f50:	8403fbc4 	addi	r16,r16,4079
81117f54:	8020d33a 	srli	r16,r16,12
81117f58:	0083ffc4 	movi	r2,4095
81117f5c:	843fffc4 	addi	r16,r16,-1
81117f60:	8020933a 	slli	r16,r16,12
81117f64:	1400060e 	bge	r2,r16,81117f80 <_malloc_trim_r+0x70>
81117f68:	000b883a 	mov	r5,zero
81117f6c:	9009883a 	mov	r4,r18
81117f70:	11116900 	call	81111690 <_sbrk_r>
81117f74:	98c00217 	ldw	r3,8(r19)
81117f78:	1c47883a 	add	r3,r3,r17
81117f7c:	10c00a26 	beq	r2,r3,81117fa8 <_malloc_trim_r+0x98>
81117f80:	9009883a 	mov	r4,r18
81117f84:	11209300 	call	81120930 <__malloc_unlock>
81117f88:	0005883a 	mov	r2,zero
81117f8c:	dfc00417 	ldw	ra,16(sp)
81117f90:	dcc00317 	ldw	r19,12(sp)
81117f94:	dc800217 	ldw	r18,8(sp)
81117f98:	dc400117 	ldw	r17,4(sp)
81117f9c:	dc000017 	ldw	r16,0(sp)
81117fa0:	dec00504 	addi	sp,sp,20
81117fa4:	f800283a 	ret
81117fa8:	040bc83a 	sub	r5,zero,r16
81117fac:	9009883a 	mov	r4,r18
81117fb0:	11116900 	call	81111690 <_sbrk_r>
81117fb4:	00ffffc4 	movi	r3,-1
81117fb8:	10c00d26 	beq	r2,r3,81117ff0 <_malloc_trim_r+0xe0>
81117fbc:	00e044f4 	movhi	r3,33043
81117fc0:	18e32d04 	addi	r3,r3,-29516
81117fc4:	18800017 	ldw	r2,0(r3)
81117fc8:	99000217 	ldw	r4,8(r19)
81117fcc:	8c23c83a 	sub	r17,r17,r16
81117fd0:	8c400054 	ori	r17,r17,1
81117fd4:	1421c83a 	sub	r16,r2,r16
81117fd8:	24400115 	stw	r17,4(r4)
81117fdc:	9009883a 	mov	r4,r18
81117fe0:	1c000015 	stw	r16,0(r3)
81117fe4:	11209300 	call	81120930 <__malloc_unlock>
81117fe8:	00800044 	movi	r2,1
81117fec:	003fe706 	br	81117f8c <__reset+0xfb0f7f8c>
81117ff0:	000b883a 	mov	r5,zero
81117ff4:	9009883a 	mov	r4,r18
81117ff8:	11116900 	call	81111690 <_sbrk_r>
81117ffc:	99000217 	ldw	r4,8(r19)
81118000:	014003c4 	movi	r5,15
81118004:	1107c83a 	sub	r3,r2,r4
81118008:	28ffdd0e 	bge	r5,r3,81117f80 <__reset+0xfb0f7f80>
8111800c:	016044f4 	movhi	r5,33043
81118010:	2962f104 	addi	r5,r5,-29756
81118014:	29400017 	ldw	r5,0(r5)
81118018:	18c00054 	ori	r3,r3,1
8111801c:	20c00115 	stw	r3,4(r4)
81118020:	00e044f4 	movhi	r3,33043
81118024:	1145c83a 	sub	r2,r2,r5
81118028:	18e32d04 	addi	r3,r3,-29516
8111802c:	18800015 	stw	r2,0(r3)
81118030:	003fd306 	br	81117f80 <__reset+0xfb0f7f80>

81118034 <_free_r>:
81118034:	28004126 	beq	r5,zero,8111813c <_free_r+0x108>
81118038:	defffd04 	addi	sp,sp,-12
8111803c:	dc400115 	stw	r17,4(sp)
81118040:	dc000015 	stw	r16,0(sp)
81118044:	2023883a 	mov	r17,r4
81118048:	2821883a 	mov	r16,r5
8111804c:	dfc00215 	stw	ra,8(sp)
81118050:	112090c0 	call	8112090c <__malloc_lock>
81118054:	81ffff17 	ldw	r7,-4(r16)
81118058:	00bfff84 	movi	r2,-2
8111805c:	012044b4 	movhi	r4,33042
81118060:	81bffe04 	addi	r6,r16,-8
81118064:	3884703a 	and	r2,r7,r2
81118068:	211cdf04 	addi	r4,r4,29564
8111806c:	308b883a 	add	r5,r6,r2
81118070:	2a400117 	ldw	r9,4(r5)
81118074:	22000217 	ldw	r8,8(r4)
81118078:	00ffff04 	movi	r3,-4
8111807c:	48c6703a 	and	r3,r9,r3
81118080:	2a005726 	beq	r5,r8,811181e0 <_free_r+0x1ac>
81118084:	28c00115 	stw	r3,4(r5)
81118088:	39c0004c 	andi	r7,r7,1
8111808c:	3800091e 	bne	r7,zero,811180b4 <_free_r+0x80>
81118090:	823ffe17 	ldw	r8,-8(r16)
81118094:	22400204 	addi	r9,r4,8
81118098:	320dc83a 	sub	r6,r6,r8
8111809c:	31c00217 	ldw	r7,8(r6)
811180a0:	1205883a 	add	r2,r2,r8
811180a4:	3a406526 	beq	r7,r9,8111823c <_free_r+0x208>
811180a8:	32000317 	ldw	r8,12(r6)
811180ac:	3a000315 	stw	r8,12(r7)
811180b0:	41c00215 	stw	r7,8(r8)
811180b4:	28cf883a 	add	r7,r5,r3
811180b8:	39c00117 	ldw	r7,4(r7)
811180bc:	39c0004c 	andi	r7,r7,1
811180c0:	38003a26 	beq	r7,zero,811181ac <_free_r+0x178>
811180c4:	10c00054 	ori	r3,r2,1
811180c8:	30c00115 	stw	r3,4(r6)
811180cc:	3087883a 	add	r3,r6,r2
811180d0:	18800015 	stw	r2,0(r3)
811180d4:	00c07fc4 	movi	r3,511
811180d8:	18801936 	bltu	r3,r2,81118140 <_free_r+0x10c>
811180dc:	1004d0fa 	srli	r2,r2,3
811180e0:	01c00044 	movi	r7,1
811180e4:	21400117 	ldw	r5,4(r4)
811180e8:	10c00044 	addi	r3,r2,1
811180ec:	18c7883a 	add	r3,r3,r3
811180f0:	1005d0ba 	srai	r2,r2,2
811180f4:	18c7883a 	add	r3,r3,r3
811180f8:	18c7883a 	add	r3,r3,r3
811180fc:	1907883a 	add	r3,r3,r4
81118100:	3884983a 	sll	r2,r7,r2
81118104:	19c00017 	ldw	r7,0(r3)
81118108:	1a3ffe04 	addi	r8,r3,-8
8111810c:	1144b03a 	or	r2,r2,r5
81118110:	32000315 	stw	r8,12(r6)
81118114:	31c00215 	stw	r7,8(r6)
81118118:	20800115 	stw	r2,4(r4)
8111811c:	19800015 	stw	r6,0(r3)
81118120:	39800315 	stw	r6,12(r7)
81118124:	8809883a 	mov	r4,r17
81118128:	dfc00217 	ldw	ra,8(sp)
8111812c:	dc400117 	ldw	r17,4(sp)
81118130:	dc000017 	ldw	r16,0(sp)
81118134:	dec00304 	addi	sp,sp,12
81118138:	11209301 	jmpi	81120930 <__malloc_unlock>
8111813c:	f800283a 	ret
81118140:	100ad27a 	srli	r5,r2,9
81118144:	00c00104 	movi	r3,4
81118148:	19404a36 	bltu	r3,r5,81118274 <_free_r+0x240>
8111814c:	100ad1ba 	srli	r5,r2,6
81118150:	28c00e44 	addi	r3,r5,57
81118154:	18c7883a 	add	r3,r3,r3
81118158:	29400e04 	addi	r5,r5,56
8111815c:	18c7883a 	add	r3,r3,r3
81118160:	18c7883a 	add	r3,r3,r3
81118164:	1909883a 	add	r4,r3,r4
81118168:	20c00017 	ldw	r3,0(r4)
8111816c:	01e044b4 	movhi	r7,33042
81118170:	213ffe04 	addi	r4,r4,-8
81118174:	39dcdf04 	addi	r7,r7,29564
81118178:	20c04426 	beq	r4,r3,8111828c <_free_r+0x258>
8111817c:	01ffff04 	movi	r7,-4
81118180:	19400117 	ldw	r5,4(r3)
81118184:	29ca703a 	and	r5,r5,r7
81118188:	1140022e 	bgeu	r2,r5,81118194 <_free_r+0x160>
8111818c:	18c00217 	ldw	r3,8(r3)
81118190:	20fffb1e 	bne	r4,r3,81118180 <__reset+0xfb0f8180>
81118194:	19000317 	ldw	r4,12(r3)
81118198:	31000315 	stw	r4,12(r6)
8111819c:	30c00215 	stw	r3,8(r6)
811181a0:	21800215 	stw	r6,8(r4)
811181a4:	19800315 	stw	r6,12(r3)
811181a8:	003fde06 	br	81118124 <__reset+0xfb0f8124>
811181ac:	29c00217 	ldw	r7,8(r5)
811181b0:	10c5883a 	add	r2,r2,r3
811181b4:	00e044b4 	movhi	r3,33042
811181b8:	18dce104 	addi	r3,r3,29572
811181bc:	38c03b26 	beq	r7,r3,811182ac <_free_r+0x278>
811181c0:	2a000317 	ldw	r8,12(r5)
811181c4:	11400054 	ori	r5,r2,1
811181c8:	3087883a 	add	r3,r6,r2
811181cc:	3a000315 	stw	r8,12(r7)
811181d0:	41c00215 	stw	r7,8(r8)
811181d4:	31400115 	stw	r5,4(r6)
811181d8:	18800015 	stw	r2,0(r3)
811181dc:	003fbd06 	br	811180d4 <__reset+0xfb0f80d4>
811181e0:	39c0004c 	andi	r7,r7,1
811181e4:	10c5883a 	add	r2,r2,r3
811181e8:	3800071e 	bne	r7,zero,81118208 <_free_r+0x1d4>
811181ec:	81fffe17 	ldw	r7,-8(r16)
811181f0:	31cdc83a 	sub	r6,r6,r7
811181f4:	30c00317 	ldw	r3,12(r6)
811181f8:	31400217 	ldw	r5,8(r6)
811181fc:	11c5883a 	add	r2,r2,r7
81118200:	28c00315 	stw	r3,12(r5)
81118204:	19400215 	stw	r5,8(r3)
81118208:	10c00054 	ori	r3,r2,1
8111820c:	30c00115 	stw	r3,4(r6)
81118210:	00e044f4 	movhi	r3,33043
81118214:	18e2f204 	addi	r3,r3,-29752
81118218:	18c00017 	ldw	r3,0(r3)
8111821c:	21800215 	stw	r6,8(r4)
81118220:	10ffc036 	bltu	r2,r3,81118124 <__reset+0xfb0f8124>
81118224:	00a044f4 	movhi	r2,33043
81118228:	10a32204 	addi	r2,r2,-29560
8111822c:	11400017 	ldw	r5,0(r2)
81118230:	8809883a 	mov	r4,r17
81118234:	1117f100 	call	81117f10 <_malloc_trim_r>
81118238:	003fba06 	br	81118124 <__reset+0xfb0f8124>
8111823c:	28c9883a 	add	r4,r5,r3
81118240:	21000117 	ldw	r4,4(r4)
81118244:	2100004c 	andi	r4,r4,1
81118248:	2000391e 	bne	r4,zero,81118330 <_free_r+0x2fc>
8111824c:	29c00217 	ldw	r7,8(r5)
81118250:	29000317 	ldw	r4,12(r5)
81118254:	1885883a 	add	r2,r3,r2
81118258:	10c00054 	ori	r3,r2,1
8111825c:	39000315 	stw	r4,12(r7)
81118260:	21c00215 	stw	r7,8(r4)
81118264:	30c00115 	stw	r3,4(r6)
81118268:	308d883a 	add	r6,r6,r2
8111826c:	30800015 	stw	r2,0(r6)
81118270:	003fac06 	br	81118124 <__reset+0xfb0f8124>
81118274:	00c00504 	movi	r3,20
81118278:	19401536 	bltu	r3,r5,811182d0 <_free_r+0x29c>
8111827c:	28c01704 	addi	r3,r5,92
81118280:	18c7883a 	add	r3,r3,r3
81118284:	294016c4 	addi	r5,r5,91
81118288:	003fb406 	br	8111815c <__reset+0xfb0f815c>
8111828c:	280bd0ba 	srai	r5,r5,2
81118290:	00c00044 	movi	r3,1
81118294:	38800117 	ldw	r2,4(r7)
81118298:	194a983a 	sll	r5,r3,r5
8111829c:	2007883a 	mov	r3,r4
811182a0:	2884b03a 	or	r2,r5,r2
811182a4:	38800115 	stw	r2,4(r7)
811182a8:	003fbb06 	br	81118198 <__reset+0xfb0f8198>
811182ac:	21800515 	stw	r6,20(r4)
811182b0:	21800415 	stw	r6,16(r4)
811182b4:	10c00054 	ori	r3,r2,1
811182b8:	31c00315 	stw	r7,12(r6)
811182bc:	31c00215 	stw	r7,8(r6)
811182c0:	30c00115 	stw	r3,4(r6)
811182c4:	308d883a 	add	r6,r6,r2
811182c8:	30800015 	stw	r2,0(r6)
811182cc:	003f9506 	br	81118124 <__reset+0xfb0f8124>
811182d0:	00c01504 	movi	r3,84
811182d4:	19400536 	bltu	r3,r5,811182ec <_free_r+0x2b8>
811182d8:	100ad33a 	srli	r5,r2,12
811182dc:	28c01bc4 	addi	r3,r5,111
811182e0:	18c7883a 	add	r3,r3,r3
811182e4:	29401b84 	addi	r5,r5,110
811182e8:	003f9c06 	br	8111815c <__reset+0xfb0f815c>
811182ec:	00c05504 	movi	r3,340
811182f0:	19400536 	bltu	r3,r5,81118308 <_free_r+0x2d4>
811182f4:	100ad3fa 	srli	r5,r2,15
811182f8:	28c01e04 	addi	r3,r5,120
811182fc:	18c7883a 	add	r3,r3,r3
81118300:	29401dc4 	addi	r5,r5,119
81118304:	003f9506 	br	8111815c <__reset+0xfb0f815c>
81118308:	00c15504 	movi	r3,1364
8111830c:	19400536 	bltu	r3,r5,81118324 <_free_r+0x2f0>
81118310:	100ad4ba 	srli	r5,r2,18
81118314:	28c01f44 	addi	r3,r5,125
81118318:	18c7883a 	add	r3,r3,r3
8111831c:	29401f04 	addi	r5,r5,124
81118320:	003f8e06 	br	8111815c <__reset+0xfb0f815c>
81118324:	00c03f84 	movi	r3,254
81118328:	01401f84 	movi	r5,126
8111832c:	003f8b06 	br	8111815c <__reset+0xfb0f815c>
81118330:	10c00054 	ori	r3,r2,1
81118334:	30c00115 	stw	r3,4(r6)
81118338:	308d883a 	add	r6,r6,r2
8111833c:	30800015 	stw	r2,0(r6)
81118340:	003f7806 	br	81118124 <__reset+0xfb0f8124>

81118344 <__sfvwrite_r>:
81118344:	30800217 	ldw	r2,8(r6)
81118348:	10006726 	beq	r2,zero,811184e8 <__sfvwrite_r+0x1a4>
8111834c:	28c0030b 	ldhu	r3,12(r5)
81118350:	defff404 	addi	sp,sp,-48
81118354:	dd400715 	stw	r21,28(sp)
81118358:	dd000615 	stw	r20,24(sp)
8111835c:	dc000215 	stw	r16,8(sp)
81118360:	dfc00b15 	stw	ra,44(sp)
81118364:	df000a15 	stw	fp,40(sp)
81118368:	ddc00915 	stw	r23,36(sp)
8111836c:	dd800815 	stw	r22,32(sp)
81118370:	dcc00515 	stw	r19,20(sp)
81118374:	dc800415 	stw	r18,16(sp)
81118378:	dc400315 	stw	r17,12(sp)
8111837c:	1880020c 	andi	r2,r3,8
81118380:	2821883a 	mov	r16,r5
81118384:	202b883a 	mov	r21,r4
81118388:	3029883a 	mov	r20,r6
8111838c:	10002726 	beq	r2,zero,8111842c <__sfvwrite_r+0xe8>
81118390:	28800417 	ldw	r2,16(r5)
81118394:	10002526 	beq	r2,zero,8111842c <__sfvwrite_r+0xe8>
81118398:	1880008c 	andi	r2,r3,2
8111839c:	a4400017 	ldw	r17,0(r20)
811183a0:	10002a26 	beq	r2,zero,8111844c <__sfvwrite_r+0x108>
811183a4:	05a00034 	movhi	r22,32768
811183a8:	0027883a 	mov	r19,zero
811183ac:	0025883a 	mov	r18,zero
811183b0:	b5bf0004 	addi	r22,r22,-1024
811183b4:	980d883a 	mov	r6,r19
811183b8:	a809883a 	mov	r4,r21
811183bc:	90004626 	beq	r18,zero,811184d8 <__sfvwrite_r+0x194>
811183c0:	900f883a 	mov	r7,r18
811183c4:	b480022e 	bgeu	r22,r18,811183d0 <__sfvwrite_r+0x8c>
811183c8:	01e00034 	movhi	r7,32768
811183cc:	39ff0004 	addi	r7,r7,-1024
811183d0:	80800917 	ldw	r2,36(r16)
811183d4:	81400717 	ldw	r5,28(r16)
811183d8:	103ee83a 	callr	r2
811183dc:	0080570e 	bge	zero,r2,8111853c <__sfvwrite_r+0x1f8>
811183e0:	a0c00217 	ldw	r3,8(r20)
811183e4:	98a7883a 	add	r19,r19,r2
811183e8:	90a5c83a 	sub	r18,r18,r2
811183ec:	1885c83a 	sub	r2,r3,r2
811183f0:	a0800215 	stw	r2,8(r20)
811183f4:	103fef1e 	bne	r2,zero,811183b4 <__reset+0xfb0f83b4>
811183f8:	0005883a 	mov	r2,zero
811183fc:	dfc00b17 	ldw	ra,44(sp)
81118400:	df000a17 	ldw	fp,40(sp)
81118404:	ddc00917 	ldw	r23,36(sp)
81118408:	dd800817 	ldw	r22,32(sp)
8111840c:	dd400717 	ldw	r21,28(sp)
81118410:	dd000617 	ldw	r20,24(sp)
81118414:	dcc00517 	ldw	r19,20(sp)
81118418:	dc800417 	ldw	r18,16(sp)
8111841c:	dc400317 	ldw	r17,12(sp)
81118420:	dc000217 	ldw	r16,8(sp)
81118424:	dec00c04 	addi	sp,sp,48
81118428:	f800283a 	ret
8111842c:	800b883a 	mov	r5,r16
81118430:	a809883a 	mov	r4,r21
81118434:	1115dec0 	call	81115dec <__swsetup_r>
81118438:	1000eb1e 	bne	r2,zero,811187e8 <__sfvwrite_r+0x4a4>
8111843c:	80c0030b 	ldhu	r3,12(r16)
81118440:	a4400017 	ldw	r17,0(r20)
81118444:	1880008c 	andi	r2,r3,2
81118448:	103fd61e 	bne	r2,zero,811183a4 <__reset+0xfb0f83a4>
8111844c:	1880004c 	andi	r2,r3,1
81118450:	10003f1e 	bne	r2,zero,81118550 <__sfvwrite_r+0x20c>
81118454:	0039883a 	mov	fp,zero
81118458:	0025883a 	mov	r18,zero
8111845c:	90001a26 	beq	r18,zero,811184c8 <__sfvwrite_r+0x184>
81118460:	1880800c 	andi	r2,r3,512
81118464:	84c00217 	ldw	r19,8(r16)
81118468:	10002126 	beq	r2,zero,811184f0 <__sfvwrite_r+0x1ac>
8111846c:	982f883a 	mov	r23,r19
81118470:	94c09336 	bltu	r18,r19,811186c0 <__sfvwrite_r+0x37c>
81118474:	1881200c 	andi	r2,r3,1152
81118478:	10009e1e 	bne	r2,zero,811186f4 <__sfvwrite_r+0x3b0>
8111847c:	81000017 	ldw	r4,0(r16)
81118480:	b80d883a 	mov	r6,r23
81118484:	e00b883a 	mov	r5,fp
81118488:	1118bfc0 	call	81118bfc <memmove>
8111848c:	80c00217 	ldw	r3,8(r16)
81118490:	81000017 	ldw	r4,0(r16)
81118494:	9005883a 	mov	r2,r18
81118498:	1ce7c83a 	sub	r19,r3,r19
8111849c:	25cf883a 	add	r7,r4,r23
811184a0:	84c00215 	stw	r19,8(r16)
811184a4:	81c00015 	stw	r7,0(r16)
811184a8:	a0c00217 	ldw	r3,8(r20)
811184ac:	e0b9883a 	add	fp,fp,r2
811184b0:	90a5c83a 	sub	r18,r18,r2
811184b4:	18a7c83a 	sub	r19,r3,r2
811184b8:	a4c00215 	stw	r19,8(r20)
811184bc:	983fce26 	beq	r19,zero,811183f8 <__reset+0xfb0f83f8>
811184c0:	80c0030b 	ldhu	r3,12(r16)
811184c4:	903fe61e 	bne	r18,zero,81118460 <__reset+0xfb0f8460>
811184c8:	8f000017 	ldw	fp,0(r17)
811184cc:	8c800117 	ldw	r18,4(r17)
811184d0:	8c400204 	addi	r17,r17,8
811184d4:	003fe106 	br	8111845c <__reset+0xfb0f845c>
811184d8:	8cc00017 	ldw	r19,0(r17)
811184dc:	8c800117 	ldw	r18,4(r17)
811184e0:	8c400204 	addi	r17,r17,8
811184e4:	003fb306 	br	811183b4 <__reset+0xfb0f83b4>
811184e8:	0005883a 	mov	r2,zero
811184ec:	f800283a 	ret
811184f0:	81000017 	ldw	r4,0(r16)
811184f4:	80800417 	ldw	r2,16(r16)
811184f8:	11005736 	bltu	r2,r4,81118658 <__sfvwrite_r+0x314>
811184fc:	85c00517 	ldw	r23,20(r16)
81118500:	95c05536 	bltu	r18,r23,81118658 <__sfvwrite_r+0x314>
81118504:	00a00034 	movhi	r2,32768
81118508:	10bfffc4 	addi	r2,r2,-1
8111850c:	9009883a 	mov	r4,r18
81118510:	1480012e 	bgeu	r2,r18,81118518 <__sfvwrite_r+0x1d4>
81118514:	1009883a 	mov	r4,r2
81118518:	b80b883a 	mov	r5,r23
8111851c:	111e1140 	call	8111e114 <__divsi3>
81118520:	15cf383a 	mul	r7,r2,r23
81118524:	81400717 	ldw	r5,28(r16)
81118528:	80800917 	ldw	r2,36(r16)
8111852c:	e00d883a 	mov	r6,fp
81118530:	a809883a 	mov	r4,r21
81118534:	103ee83a 	callr	r2
81118538:	00bfdb16 	blt	zero,r2,811184a8 <__reset+0xfb0f84a8>
8111853c:	8080030b 	ldhu	r2,12(r16)
81118540:	10801014 	ori	r2,r2,64
81118544:	8080030d 	sth	r2,12(r16)
81118548:	00bfffc4 	movi	r2,-1
8111854c:	003fab06 	br	811183fc <__reset+0xfb0f83fc>
81118550:	0027883a 	mov	r19,zero
81118554:	0011883a 	mov	r8,zero
81118558:	0039883a 	mov	fp,zero
8111855c:	0025883a 	mov	r18,zero
81118560:	90001f26 	beq	r18,zero,811185e0 <__sfvwrite_r+0x29c>
81118564:	40005a26 	beq	r8,zero,811186d0 <__sfvwrite_r+0x38c>
81118568:	982d883a 	mov	r22,r19
8111856c:	94c0012e 	bgeu	r18,r19,81118574 <__sfvwrite_r+0x230>
81118570:	902d883a 	mov	r22,r18
81118574:	81000017 	ldw	r4,0(r16)
81118578:	80800417 	ldw	r2,16(r16)
8111857c:	b02f883a 	mov	r23,r22
81118580:	81c00517 	ldw	r7,20(r16)
81118584:	1100032e 	bgeu	r2,r4,81118594 <__sfvwrite_r+0x250>
81118588:	80c00217 	ldw	r3,8(r16)
8111858c:	38c7883a 	add	r3,r7,r3
81118590:	1d801816 	blt	r3,r22,811185f4 <__sfvwrite_r+0x2b0>
81118594:	b1c03e16 	blt	r22,r7,81118690 <__sfvwrite_r+0x34c>
81118598:	80800917 	ldw	r2,36(r16)
8111859c:	81400717 	ldw	r5,28(r16)
811185a0:	e00d883a 	mov	r6,fp
811185a4:	da000115 	stw	r8,4(sp)
811185a8:	a809883a 	mov	r4,r21
811185ac:	103ee83a 	callr	r2
811185b0:	102f883a 	mov	r23,r2
811185b4:	da000117 	ldw	r8,4(sp)
811185b8:	00bfe00e 	bge	zero,r2,8111853c <__reset+0xfb0f853c>
811185bc:	9de7c83a 	sub	r19,r19,r23
811185c0:	98001f26 	beq	r19,zero,81118640 <__sfvwrite_r+0x2fc>
811185c4:	a0800217 	ldw	r2,8(r20)
811185c8:	e5f9883a 	add	fp,fp,r23
811185cc:	95e5c83a 	sub	r18,r18,r23
811185d0:	15efc83a 	sub	r23,r2,r23
811185d4:	a5c00215 	stw	r23,8(r20)
811185d8:	b83f8726 	beq	r23,zero,811183f8 <__reset+0xfb0f83f8>
811185dc:	903fe11e 	bne	r18,zero,81118564 <__reset+0xfb0f8564>
811185e0:	8f000017 	ldw	fp,0(r17)
811185e4:	8c800117 	ldw	r18,4(r17)
811185e8:	0011883a 	mov	r8,zero
811185ec:	8c400204 	addi	r17,r17,8
811185f0:	003fdb06 	br	81118560 <__reset+0xfb0f8560>
811185f4:	180d883a 	mov	r6,r3
811185f8:	e00b883a 	mov	r5,fp
811185fc:	da000115 	stw	r8,4(sp)
81118600:	d8c00015 	stw	r3,0(sp)
81118604:	1118bfc0 	call	81118bfc <memmove>
81118608:	d8c00017 	ldw	r3,0(sp)
8111860c:	80800017 	ldw	r2,0(r16)
81118610:	800b883a 	mov	r5,r16
81118614:	a809883a 	mov	r4,r21
81118618:	10c5883a 	add	r2,r2,r3
8111861c:	80800015 	stw	r2,0(r16)
81118620:	d8c00015 	stw	r3,0(sp)
81118624:	1117a380 	call	81117a38 <_fflush_r>
81118628:	d8c00017 	ldw	r3,0(sp)
8111862c:	da000117 	ldw	r8,4(sp)
81118630:	103fc21e 	bne	r2,zero,8111853c <__reset+0xfb0f853c>
81118634:	182f883a 	mov	r23,r3
81118638:	9de7c83a 	sub	r19,r19,r23
8111863c:	983fe11e 	bne	r19,zero,811185c4 <__reset+0xfb0f85c4>
81118640:	800b883a 	mov	r5,r16
81118644:	a809883a 	mov	r4,r21
81118648:	1117a380 	call	81117a38 <_fflush_r>
8111864c:	103fbb1e 	bne	r2,zero,8111853c <__reset+0xfb0f853c>
81118650:	0011883a 	mov	r8,zero
81118654:	003fdb06 	br	811185c4 <__reset+0xfb0f85c4>
81118658:	94c0012e 	bgeu	r18,r19,81118660 <__sfvwrite_r+0x31c>
8111865c:	9027883a 	mov	r19,r18
81118660:	980d883a 	mov	r6,r19
81118664:	e00b883a 	mov	r5,fp
81118668:	1118bfc0 	call	81118bfc <memmove>
8111866c:	80800217 	ldw	r2,8(r16)
81118670:	80c00017 	ldw	r3,0(r16)
81118674:	14c5c83a 	sub	r2,r2,r19
81118678:	1cc7883a 	add	r3,r3,r19
8111867c:	80800215 	stw	r2,8(r16)
81118680:	80c00015 	stw	r3,0(r16)
81118684:	10004326 	beq	r2,zero,81118794 <__sfvwrite_r+0x450>
81118688:	9805883a 	mov	r2,r19
8111868c:	003f8606 	br	811184a8 <__reset+0xfb0f84a8>
81118690:	b00d883a 	mov	r6,r22
81118694:	e00b883a 	mov	r5,fp
81118698:	da000115 	stw	r8,4(sp)
8111869c:	1118bfc0 	call	81118bfc <memmove>
811186a0:	80800217 	ldw	r2,8(r16)
811186a4:	80c00017 	ldw	r3,0(r16)
811186a8:	da000117 	ldw	r8,4(sp)
811186ac:	1585c83a 	sub	r2,r2,r22
811186b0:	1dad883a 	add	r22,r3,r22
811186b4:	80800215 	stw	r2,8(r16)
811186b8:	85800015 	stw	r22,0(r16)
811186bc:	003fbf06 	br	811185bc <__reset+0xfb0f85bc>
811186c0:	81000017 	ldw	r4,0(r16)
811186c4:	9027883a 	mov	r19,r18
811186c8:	902f883a 	mov	r23,r18
811186cc:	003f6c06 	br	81118480 <__reset+0xfb0f8480>
811186d0:	900d883a 	mov	r6,r18
811186d4:	01400284 	movi	r5,10
811186d8:	e009883a 	mov	r4,fp
811186dc:	1118b180 	call	81118b18 <memchr>
811186e0:	10003e26 	beq	r2,zero,811187dc <__sfvwrite_r+0x498>
811186e4:	10800044 	addi	r2,r2,1
811186e8:	1727c83a 	sub	r19,r2,fp
811186ec:	02000044 	movi	r8,1
811186f0:	003f9d06 	br	81118568 <__reset+0xfb0f8568>
811186f4:	80800517 	ldw	r2,20(r16)
811186f8:	81400417 	ldw	r5,16(r16)
811186fc:	81c00017 	ldw	r7,0(r16)
81118700:	10a7883a 	add	r19,r2,r2
81118704:	9885883a 	add	r2,r19,r2
81118708:	1026d7fa 	srli	r19,r2,31
8111870c:	396dc83a 	sub	r22,r7,r5
81118710:	b1000044 	addi	r4,r22,1
81118714:	9885883a 	add	r2,r19,r2
81118718:	1027d07a 	srai	r19,r2,1
8111871c:	2485883a 	add	r2,r4,r18
81118720:	980d883a 	mov	r6,r19
81118724:	9880022e 	bgeu	r19,r2,81118730 <__sfvwrite_r+0x3ec>
81118728:	1027883a 	mov	r19,r2
8111872c:	100d883a 	mov	r6,r2
81118730:	18c1000c 	andi	r3,r3,1024
81118734:	18001c26 	beq	r3,zero,811187a8 <__sfvwrite_r+0x464>
81118738:	300b883a 	mov	r5,r6
8111873c:	a809883a 	mov	r4,r21
81118740:	111093c0 	call	8111093c <_malloc_r>
81118744:	102f883a 	mov	r23,r2
81118748:	10002926 	beq	r2,zero,811187f0 <__sfvwrite_r+0x4ac>
8111874c:	81400417 	ldw	r5,16(r16)
81118750:	b00d883a 	mov	r6,r22
81118754:	1009883a 	mov	r4,r2
81118758:	11111480 	call	81111148 <memcpy>
8111875c:	8080030b 	ldhu	r2,12(r16)
81118760:	00fedfc4 	movi	r3,-1153
81118764:	10c4703a 	and	r2,r2,r3
81118768:	10802014 	ori	r2,r2,128
8111876c:	8080030d 	sth	r2,12(r16)
81118770:	bd89883a 	add	r4,r23,r22
81118774:	9d8fc83a 	sub	r7,r19,r22
81118778:	85c00415 	stw	r23,16(r16)
8111877c:	84c00515 	stw	r19,20(r16)
81118780:	81000015 	stw	r4,0(r16)
81118784:	9027883a 	mov	r19,r18
81118788:	81c00215 	stw	r7,8(r16)
8111878c:	902f883a 	mov	r23,r18
81118790:	003f3b06 	br	81118480 <__reset+0xfb0f8480>
81118794:	800b883a 	mov	r5,r16
81118798:	a809883a 	mov	r4,r21
8111879c:	1117a380 	call	81117a38 <_fflush_r>
811187a0:	103fb926 	beq	r2,zero,81118688 <__reset+0xfb0f8688>
811187a4:	003f6506 	br	8111853c <__reset+0xfb0f853c>
811187a8:	a809883a 	mov	r4,r21
811187ac:	1119db40 	call	81119db4 <_realloc_r>
811187b0:	102f883a 	mov	r23,r2
811187b4:	103fee1e 	bne	r2,zero,81118770 <__reset+0xfb0f8770>
811187b8:	81400417 	ldw	r5,16(r16)
811187bc:	a809883a 	mov	r4,r21
811187c0:	11180340 	call	81118034 <_free_r>
811187c4:	8080030b 	ldhu	r2,12(r16)
811187c8:	00ffdfc4 	movi	r3,-129
811187cc:	1884703a 	and	r2,r3,r2
811187d0:	00c00304 	movi	r3,12
811187d4:	a8c00015 	stw	r3,0(r21)
811187d8:	003f5906 	br	81118540 <__reset+0xfb0f8540>
811187dc:	94c00044 	addi	r19,r18,1
811187e0:	02000044 	movi	r8,1
811187e4:	003f6006 	br	81118568 <__reset+0xfb0f8568>
811187e8:	00bfffc4 	movi	r2,-1
811187ec:	003f0306 	br	811183fc <__reset+0xfb0f83fc>
811187f0:	00800304 	movi	r2,12
811187f4:	a8800015 	stw	r2,0(r21)
811187f8:	8080030b 	ldhu	r2,12(r16)
811187fc:	003f5006 	br	81118540 <__reset+0xfb0f8540>

81118800 <_fwalk>:
81118800:	defff704 	addi	sp,sp,-36
81118804:	dd000415 	stw	r20,16(sp)
81118808:	dfc00815 	stw	ra,32(sp)
8111880c:	ddc00715 	stw	r23,28(sp)
81118810:	dd800615 	stw	r22,24(sp)
81118814:	dd400515 	stw	r21,20(sp)
81118818:	dcc00315 	stw	r19,12(sp)
8111881c:	dc800215 	stw	r18,8(sp)
81118820:	dc400115 	stw	r17,4(sp)
81118824:	dc000015 	stw	r16,0(sp)
81118828:	2500b804 	addi	r20,r4,736
8111882c:	a0002326 	beq	r20,zero,811188bc <_fwalk+0xbc>
81118830:	282b883a 	mov	r21,r5
81118834:	002f883a 	mov	r23,zero
81118838:	05800044 	movi	r22,1
8111883c:	04ffffc4 	movi	r19,-1
81118840:	a4400117 	ldw	r17,4(r20)
81118844:	a4800217 	ldw	r18,8(r20)
81118848:	8c7fffc4 	addi	r17,r17,-1
8111884c:	88000d16 	blt	r17,zero,81118884 <_fwalk+0x84>
81118850:	94000304 	addi	r16,r18,12
81118854:	94800384 	addi	r18,r18,14
81118858:	8080000b 	ldhu	r2,0(r16)
8111885c:	8c7fffc4 	addi	r17,r17,-1
81118860:	813ffd04 	addi	r4,r16,-12
81118864:	b080042e 	bgeu	r22,r2,81118878 <_fwalk+0x78>
81118868:	9080000f 	ldh	r2,0(r18)
8111886c:	14c00226 	beq	r2,r19,81118878 <_fwalk+0x78>
81118870:	a83ee83a 	callr	r21
81118874:	b8aeb03a 	or	r23,r23,r2
81118878:	84001a04 	addi	r16,r16,104
8111887c:	94801a04 	addi	r18,r18,104
81118880:	8cfff51e 	bne	r17,r19,81118858 <__reset+0xfb0f8858>
81118884:	a5000017 	ldw	r20,0(r20)
81118888:	a03fed1e 	bne	r20,zero,81118840 <__reset+0xfb0f8840>
8111888c:	b805883a 	mov	r2,r23
81118890:	dfc00817 	ldw	ra,32(sp)
81118894:	ddc00717 	ldw	r23,28(sp)
81118898:	dd800617 	ldw	r22,24(sp)
8111889c:	dd400517 	ldw	r21,20(sp)
811188a0:	dd000417 	ldw	r20,16(sp)
811188a4:	dcc00317 	ldw	r19,12(sp)
811188a8:	dc800217 	ldw	r18,8(sp)
811188ac:	dc400117 	ldw	r17,4(sp)
811188b0:	dc000017 	ldw	r16,0(sp)
811188b4:	dec00904 	addi	sp,sp,36
811188b8:	f800283a 	ret
811188bc:	002f883a 	mov	r23,zero
811188c0:	003ff206 	br	8111888c <__reset+0xfb0f888c>

811188c4 <_fwalk_reent>:
811188c4:	defff704 	addi	sp,sp,-36
811188c8:	dd000415 	stw	r20,16(sp)
811188cc:	dfc00815 	stw	ra,32(sp)
811188d0:	ddc00715 	stw	r23,28(sp)
811188d4:	dd800615 	stw	r22,24(sp)
811188d8:	dd400515 	stw	r21,20(sp)
811188dc:	dcc00315 	stw	r19,12(sp)
811188e0:	dc800215 	stw	r18,8(sp)
811188e4:	dc400115 	stw	r17,4(sp)
811188e8:	dc000015 	stw	r16,0(sp)
811188ec:	2500b804 	addi	r20,r4,736
811188f0:	a0002326 	beq	r20,zero,81118980 <_fwalk_reent+0xbc>
811188f4:	282b883a 	mov	r21,r5
811188f8:	2027883a 	mov	r19,r4
811188fc:	002f883a 	mov	r23,zero
81118900:	05800044 	movi	r22,1
81118904:	04bfffc4 	movi	r18,-1
81118908:	a4400117 	ldw	r17,4(r20)
8111890c:	a4000217 	ldw	r16,8(r20)
81118910:	8c7fffc4 	addi	r17,r17,-1
81118914:	88000c16 	blt	r17,zero,81118948 <_fwalk_reent+0x84>
81118918:	84000304 	addi	r16,r16,12
8111891c:	8080000b 	ldhu	r2,0(r16)
81118920:	8c7fffc4 	addi	r17,r17,-1
81118924:	817ffd04 	addi	r5,r16,-12
81118928:	b080052e 	bgeu	r22,r2,81118940 <_fwalk_reent+0x7c>
8111892c:	8080008f 	ldh	r2,2(r16)
81118930:	9809883a 	mov	r4,r19
81118934:	14800226 	beq	r2,r18,81118940 <_fwalk_reent+0x7c>
81118938:	a83ee83a 	callr	r21
8111893c:	b8aeb03a 	or	r23,r23,r2
81118940:	84001a04 	addi	r16,r16,104
81118944:	8cbff51e 	bne	r17,r18,8111891c <__reset+0xfb0f891c>
81118948:	a5000017 	ldw	r20,0(r20)
8111894c:	a03fee1e 	bne	r20,zero,81118908 <__reset+0xfb0f8908>
81118950:	b805883a 	mov	r2,r23
81118954:	dfc00817 	ldw	ra,32(sp)
81118958:	ddc00717 	ldw	r23,28(sp)
8111895c:	dd800617 	ldw	r22,24(sp)
81118960:	dd400517 	ldw	r21,20(sp)
81118964:	dd000417 	ldw	r20,16(sp)
81118968:	dcc00317 	ldw	r19,12(sp)
8111896c:	dc800217 	ldw	r18,8(sp)
81118970:	dc400117 	ldw	r17,4(sp)
81118974:	dc000017 	ldw	r16,0(sp)
81118978:	dec00904 	addi	sp,sp,36
8111897c:	f800283a 	ret
81118980:	002f883a 	mov	r23,zero
81118984:	003ff206 	br	81118950 <__reset+0xfb0f8950>

81118988 <_isatty_r>:
81118988:	defffd04 	addi	sp,sp,-12
8111898c:	dc000015 	stw	r16,0(sp)
81118990:	042044f4 	movhi	r16,33043
81118994:	dc400115 	stw	r17,4(sp)
81118998:	84231f04 	addi	r16,r16,-29572
8111899c:	2023883a 	mov	r17,r4
811189a0:	2809883a 	mov	r4,r5
811189a4:	dfc00215 	stw	ra,8(sp)
811189a8:	80000015 	stw	zero,0(r16)
811189ac:	11206dc0 	call	811206dc <isatty>
811189b0:	00ffffc4 	movi	r3,-1
811189b4:	10c00526 	beq	r2,r3,811189cc <_isatty_r+0x44>
811189b8:	dfc00217 	ldw	ra,8(sp)
811189bc:	dc400117 	ldw	r17,4(sp)
811189c0:	dc000017 	ldw	r16,0(sp)
811189c4:	dec00304 	addi	sp,sp,12
811189c8:	f800283a 	ret
811189cc:	80c00017 	ldw	r3,0(r16)
811189d0:	183ff926 	beq	r3,zero,811189b8 <__reset+0xfb0f89b8>
811189d4:	88c00015 	stw	r3,0(r17)
811189d8:	003ff706 	br	811189b8 <__reset+0xfb0f89b8>

811189dc <_setlocale_r>:
811189dc:	30001b26 	beq	r6,zero,81118a4c <_setlocale_r+0x70>
811189e0:	016044b4 	movhi	r5,33042
811189e4:	defffe04 	addi	sp,sp,-8
811189e8:	295ace04 	addi	r5,r5,27448
811189ec:	3009883a 	mov	r4,r6
811189f0:	dc000015 	stw	r16,0(sp)
811189f4:	dfc00115 	stw	ra,4(sp)
811189f8:	3021883a 	mov	r16,r6
811189fc:	111a38c0 	call	8111a38c <strcmp>
81118a00:	1000061e 	bne	r2,zero,81118a1c <_setlocale_r+0x40>
81118a04:	00a044b4 	movhi	r2,33042
81118a08:	109aa804 	addi	r2,r2,27296
81118a0c:	dfc00117 	ldw	ra,4(sp)
81118a10:	dc000017 	ldw	r16,0(sp)
81118a14:	dec00204 	addi	sp,sp,8
81118a18:	f800283a 	ret
81118a1c:	016044b4 	movhi	r5,33042
81118a20:	295aa804 	addi	r5,r5,27296
81118a24:	8009883a 	mov	r4,r16
81118a28:	111a38c0 	call	8111a38c <strcmp>
81118a2c:	103ff526 	beq	r2,zero,81118a04 <__reset+0xfb0f8a04>
81118a30:	016044b4 	movhi	r5,33042
81118a34:	295ab104 	addi	r5,r5,27332
81118a38:	8009883a 	mov	r4,r16
81118a3c:	111a38c0 	call	8111a38c <strcmp>
81118a40:	103ff026 	beq	r2,zero,81118a04 <__reset+0xfb0f8a04>
81118a44:	0005883a 	mov	r2,zero
81118a48:	003ff006 	br	81118a0c <__reset+0xfb0f8a0c>
81118a4c:	00a044b4 	movhi	r2,33042
81118a50:	109aa804 	addi	r2,r2,27296
81118a54:	f800283a 	ret

81118a58 <__locale_charset>:
81118a58:	00a044b4 	movhi	r2,33042
81118a5c:	109de904 	addi	r2,r2,30628
81118a60:	f800283a 	ret

81118a64 <__locale_mb_cur_max>:
81118a64:	00a044f4 	movhi	r2,33043
81118a68:	10a2f304 	addi	r2,r2,-29748
81118a6c:	10800017 	ldw	r2,0(r2)
81118a70:	f800283a 	ret

81118a74 <__locale_msgcharset>:
81118a74:	00a044b4 	movhi	r2,33042
81118a78:	109de104 	addi	r2,r2,30596
81118a7c:	f800283a 	ret

81118a80 <__locale_cjk_lang>:
81118a80:	0005883a 	mov	r2,zero
81118a84:	f800283a 	ret

81118a88 <_localeconv_r>:
81118a88:	00a044b4 	movhi	r2,33042
81118a8c:	109df104 	addi	r2,r2,30660
81118a90:	f800283a 	ret

81118a94 <setlocale>:
81118a94:	00a044f4 	movhi	r2,33043
81118a98:	10a2f004 	addi	r2,r2,-29760
81118a9c:	280d883a 	mov	r6,r5
81118aa0:	200b883a 	mov	r5,r4
81118aa4:	11000017 	ldw	r4,0(r2)
81118aa8:	11189dc1 	jmpi	811189dc <_setlocale_r>

81118aac <localeconv>:
81118aac:	00a044b4 	movhi	r2,33042
81118ab0:	109df104 	addi	r2,r2,30660
81118ab4:	f800283a 	ret

81118ab8 <_lseek_r>:
81118ab8:	defffd04 	addi	sp,sp,-12
81118abc:	2805883a 	mov	r2,r5
81118ac0:	dc000015 	stw	r16,0(sp)
81118ac4:	042044f4 	movhi	r16,33043
81118ac8:	dc400115 	stw	r17,4(sp)
81118acc:	300b883a 	mov	r5,r6
81118ad0:	84231f04 	addi	r16,r16,-29572
81118ad4:	2023883a 	mov	r17,r4
81118ad8:	380d883a 	mov	r6,r7
81118adc:	1009883a 	mov	r4,r2
81118ae0:	dfc00215 	stw	ra,8(sp)
81118ae4:	80000015 	stw	zero,0(r16)
81118ae8:	11207bc0 	call	811207bc <lseek>
81118aec:	00ffffc4 	movi	r3,-1
81118af0:	10c00526 	beq	r2,r3,81118b08 <_lseek_r+0x50>
81118af4:	dfc00217 	ldw	ra,8(sp)
81118af8:	dc400117 	ldw	r17,4(sp)
81118afc:	dc000017 	ldw	r16,0(sp)
81118b00:	dec00304 	addi	sp,sp,12
81118b04:	f800283a 	ret
81118b08:	80c00017 	ldw	r3,0(r16)
81118b0c:	183ff926 	beq	r3,zero,81118af4 <__reset+0xfb0f8af4>
81118b10:	88c00015 	stw	r3,0(r17)
81118b14:	003ff706 	br	81118af4 <__reset+0xfb0f8af4>

81118b18 <memchr>:
81118b18:	208000cc 	andi	r2,r4,3
81118b1c:	280f883a 	mov	r7,r5
81118b20:	10003426 	beq	r2,zero,81118bf4 <memchr+0xdc>
81118b24:	30bfffc4 	addi	r2,r6,-1
81118b28:	30001a26 	beq	r6,zero,81118b94 <memchr+0x7c>
81118b2c:	20c00003 	ldbu	r3,0(r4)
81118b30:	29803fcc 	andi	r6,r5,255
81118b34:	30c0051e 	bne	r6,r3,81118b4c <memchr+0x34>
81118b38:	00001806 	br	81118b9c <memchr+0x84>
81118b3c:	10001526 	beq	r2,zero,81118b94 <memchr+0x7c>
81118b40:	20c00003 	ldbu	r3,0(r4)
81118b44:	10bfffc4 	addi	r2,r2,-1
81118b48:	30c01426 	beq	r6,r3,81118b9c <memchr+0x84>
81118b4c:	21000044 	addi	r4,r4,1
81118b50:	20c000cc 	andi	r3,r4,3
81118b54:	183ff91e 	bne	r3,zero,81118b3c <__reset+0xfb0f8b3c>
81118b58:	020000c4 	movi	r8,3
81118b5c:	40801136 	bltu	r8,r2,81118ba4 <memchr+0x8c>
81118b60:	10000c26 	beq	r2,zero,81118b94 <memchr+0x7c>
81118b64:	20c00003 	ldbu	r3,0(r4)
81118b68:	29403fcc 	andi	r5,r5,255
81118b6c:	28c00b26 	beq	r5,r3,81118b9c <memchr+0x84>
81118b70:	20c00044 	addi	r3,r4,1
81118b74:	39803fcc 	andi	r6,r7,255
81118b78:	2089883a 	add	r4,r4,r2
81118b7c:	00000306 	br	81118b8c <memchr+0x74>
81118b80:	18c00044 	addi	r3,r3,1
81118b84:	197fffc3 	ldbu	r5,-1(r3)
81118b88:	31400526 	beq	r6,r5,81118ba0 <memchr+0x88>
81118b8c:	1805883a 	mov	r2,r3
81118b90:	20fffb1e 	bne	r4,r3,81118b80 <__reset+0xfb0f8b80>
81118b94:	0005883a 	mov	r2,zero
81118b98:	f800283a 	ret
81118b9c:	2005883a 	mov	r2,r4
81118ba0:	f800283a 	ret
81118ba4:	28c03fcc 	andi	r3,r5,255
81118ba8:	1812923a 	slli	r9,r3,8
81118bac:	02ffbff4 	movhi	r11,65279
81118bb0:	02a02074 	movhi	r10,32897
81118bb4:	48d2b03a 	or	r9,r9,r3
81118bb8:	4806943a 	slli	r3,r9,16
81118bbc:	5affbfc4 	addi	r11,r11,-257
81118bc0:	52a02004 	addi	r10,r10,-32640
81118bc4:	48d2b03a 	or	r9,r9,r3
81118bc8:	20c00017 	ldw	r3,0(r4)
81118bcc:	48c6f03a 	xor	r3,r9,r3
81118bd0:	1acd883a 	add	r6,r3,r11
81118bd4:	00c6303a 	nor	r3,zero,r3
81118bd8:	30c6703a 	and	r3,r6,r3
81118bdc:	1a86703a 	and	r3,r3,r10
81118be0:	183fe01e 	bne	r3,zero,81118b64 <__reset+0xfb0f8b64>
81118be4:	10bfff04 	addi	r2,r2,-4
81118be8:	21000104 	addi	r4,r4,4
81118bec:	40bff636 	bltu	r8,r2,81118bc8 <__reset+0xfb0f8bc8>
81118bf0:	003fdb06 	br	81118b60 <__reset+0xfb0f8b60>
81118bf4:	3005883a 	mov	r2,r6
81118bf8:	003fd706 	br	81118b58 <__reset+0xfb0f8b58>

81118bfc <memmove>:
81118bfc:	2005883a 	mov	r2,r4
81118c00:	29000b2e 	bgeu	r5,r4,81118c30 <memmove+0x34>
81118c04:	298f883a 	add	r7,r5,r6
81118c08:	21c0092e 	bgeu	r4,r7,81118c30 <memmove+0x34>
81118c0c:	2187883a 	add	r3,r4,r6
81118c10:	198bc83a 	sub	r5,r3,r6
81118c14:	30004826 	beq	r6,zero,81118d38 <memmove+0x13c>
81118c18:	39ffffc4 	addi	r7,r7,-1
81118c1c:	39000003 	ldbu	r4,0(r7)
81118c20:	18ffffc4 	addi	r3,r3,-1
81118c24:	19000005 	stb	r4,0(r3)
81118c28:	28fffb1e 	bne	r5,r3,81118c18 <__reset+0xfb0f8c18>
81118c2c:	f800283a 	ret
81118c30:	00c003c4 	movi	r3,15
81118c34:	1980412e 	bgeu	r3,r6,81118d3c <memmove+0x140>
81118c38:	2886b03a 	or	r3,r5,r2
81118c3c:	18c000cc 	andi	r3,r3,3
81118c40:	1800401e 	bne	r3,zero,81118d44 <memmove+0x148>
81118c44:	33fffc04 	addi	r15,r6,-16
81118c48:	781ed13a 	srli	r15,r15,4
81118c4c:	28c00104 	addi	r3,r5,4
81118c50:	13400104 	addi	r13,r2,4
81118c54:	781c913a 	slli	r14,r15,4
81118c58:	2b000204 	addi	r12,r5,8
81118c5c:	12c00204 	addi	r11,r2,8
81118c60:	73800504 	addi	r14,r14,20
81118c64:	2a800304 	addi	r10,r5,12
81118c68:	12400304 	addi	r9,r2,12
81118c6c:	2b9d883a 	add	r14,r5,r14
81118c70:	2811883a 	mov	r8,r5
81118c74:	100f883a 	mov	r7,r2
81118c78:	41000017 	ldw	r4,0(r8)
81118c7c:	39c00404 	addi	r7,r7,16
81118c80:	18c00404 	addi	r3,r3,16
81118c84:	393ffc15 	stw	r4,-16(r7)
81118c88:	193ffc17 	ldw	r4,-16(r3)
81118c8c:	6b400404 	addi	r13,r13,16
81118c90:	5ac00404 	addi	r11,r11,16
81118c94:	693ffc15 	stw	r4,-16(r13)
81118c98:	61000017 	ldw	r4,0(r12)
81118c9c:	4a400404 	addi	r9,r9,16
81118ca0:	42000404 	addi	r8,r8,16
81118ca4:	593ffc15 	stw	r4,-16(r11)
81118ca8:	51000017 	ldw	r4,0(r10)
81118cac:	63000404 	addi	r12,r12,16
81118cb0:	52800404 	addi	r10,r10,16
81118cb4:	493ffc15 	stw	r4,-16(r9)
81118cb8:	1bbfef1e 	bne	r3,r14,81118c78 <__reset+0xfb0f8c78>
81118cbc:	79000044 	addi	r4,r15,1
81118cc0:	2008913a 	slli	r4,r4,4
81118cc4:	328003cc 	andi	r10,r6,15
81118cc8:	02c000c4 	movi	r11,3
81118ccc:	1107883a 	add	r3,r2,r4
81118cd0:	290b883a 	add	r5,r5,r4
81118cd4:	5a801e2e 	bgeu	r11,r10,81118d50 <memmove+0x154>
81118cd8:	1813883a 	mov	r9,r3
81118cdc:	2811883a 	mov	r8,r5
81118ce0:	500f883a 	mov	r7,r10
81118ce4:	41000017 	ldw	r4,0(r8)
81118ce8:	4a400104 	addi	r9,r9,4
81118cec:	39ffff04 	addi	r7,r7,-4
81118cf0:	493fff15 	stw	r4,-4(r9)
81118cf4:	42000104 	addi	r8,r8,4
81118cf8:	59fffa36 	bltu	r11,r7,81118ce4 <__reset+0xfb0f8ce4>
81118cfc:	513fff04 	addi	r4,r10,-4
81118d00:	2008d0ba 	srli	r4,r4,2
81118d04:	318000cc 	andi	r6,r6,3
81118d08:	21000044 	addi	r4,r4,1
81118d0c:	2109883a 	add	r4,r4,r4
81118d10:	2109883a 	add	r4,r4,r4
81118d14:	1907883a 	add	r3,r3,r4
81118d18:	290b883a 	add	r5,r5,r4
81118d1c:	30000b26 	beq	r6,zero,81118d4c <memmove+0x150>
81118d20:	198d883a 	add	r6,r3,r6
81118d24:	29c00003 	ldbu	r7,0(r5)
81118d28:	18c00044 	addi	r3,r3,1
81118d2c:	29400044 	addi	r5,r5,1
81118d30:	19ffffc5 	stb	r7,-1(r3)
81118d34:	19bffb1e 	bne	r3,r6,81118d24 <__reset+0xfb0f8d24>
81118d38:	f800283a 	ret
81118d3c:	1007883a 	mov	r3,r2
81118d40:	003ff606 	br	81118d1c <__reset+0xfb0f8d1c>
81118d44:	1007883a 	mov	r3,r2
81118d48:	003ff506 	br	81118d20 <__reset+0xfb0f8d20>
81118d4c:	f800283a 	ret
81118d50:	500d883a 	mov	r6,r10
81118d54:	003ff106 	br	81118d1c <__reset+0xfb0f8d1c>

81118d58 <_Balloc>:
81118d58:	20801317 	ldw	r2,76(r4)
81118d5c:	defffc04 	addi	sp,sp,-16
81118d60:	dc400115 	stw	r17,4(sp)
81118d64:	dc000015 	stw	r16,0(sp)
81118d68:	dfc00315 	stw	ra,12(sp)
81118d6c:	dc800215 	stw	r18,8(sp)
81118d70:	2023883a 	mov	r17,r4
81118d74:	2821883a 	mov	r16,r5
81118d78:	10000f26 	beq	r2,zero,81118db8 <_Balloc+0x60>
81118d7c:	8407883a 	add	r3,r16,r16
81118d80:	18c7883a 	add	r3,r3,r3
81118d84:	10c7883a 	add	r3,r2,r3
81118d88:	18800017 	ldw	r2,0(r3)
81118d8c:	10001126 	beq	r2,zero,81118dd4 <_Balloc+0x7c>
81118d90:	11000017 	ldw	r4,0(r2)
81118d94:	19000015 	stw	r4,0(r3)
81118d98:	10000415 	stw	zero,16(r2)
81118d9c:	10000315 	stw	zero,12(r2)
81118da0:	dfc00317 	ldw	ra,12(sp)
81118da4:	dc800217 	ldw	r18,8(sp)
81118da8:	dc400117 	ldw	r17,4(sp)
81118dac:	dc000017 	ldw	r16,0(sp)
81118db0:	dec00404 	addi	sp,sp,16
81118db4:	f800283a 	ret
81118db8:	01800844 	movi	r6,33
81118dbc:	01400104 	movi	r5,4
81118dc0:	111cf540 	call	8111cf54 <_calloc_r>
81118dc4:	88801315 	stw	r2,76(r17)
81118dc8:	103fec1e 	bne	r2,zero,81118d7c <__reset+0xfb0f8d7c>
81118dcc:	0005883a 	mov	r2,zero
81118dd0:	003ff306 	br	81118da0 <__reset+0xfb0f8da0>
81118dd4:	01400044 	movi	r5,1
81118dd8:	2c24983a 	sll	r18,r5,r16
81118ddc:	8809883a 	mov	r4,r17
81118de0:	91800144 	addi	r6,r18,5
81118de4:	318d883a 	add	r6,r6,r6
81118de8:	318d883a 	add	r6,r6,r6
81118dec:	111cf540 	call	8111cf54 <_calloc_r>
81118df0:	103ff626 	beq	r2,zero,81118dcc <__reset+0xfb0f8dcc>
81118df4:	14000115 	stw	r16,4(r2)
81118df8:	14800215 	stw	r18,8(r2)
81118dfc:	003fe606 	br	81118d98 <__reset+0xfb0f8d98>

81118e00 <_Bfree>:
81118e00:	28000826 	beq	r5,zero,81118e24 <_Bfree+0x24>
81118e04:	28c00117 	ldw	r3,4(r5)
81118e08:	20801317 	ldw	r2,76(r4)
81118e0c:	18c7883a 	add	r3,r3,r3
81118e10:	18c7883a 	add	r3,r3,r3
81118e14:	10c5883a 	add	r2,r2,r3
81118e18:	10c00017 	ldw	r3,0(r2)
81118e1c:	28c00015 	stw	r3,0(r5)
81118e20:	11400015 	stw	r5,0(r2)
81118e24:	f800283a 	ret

81118e28 <__multadd>:
81118e28:	defffa04 	addi	sp,sp,-24
81118e2c:	dc800315 	stw	r18,12(sp)
81118e30:	dc400215 	stw	r17,8(sp)
81118e34:	dc000115 	stw	r16,4(sp)
81118e38:	2823883a 	mov	r17,r5
81118e3c:	2c000417 	ldw	r16,16(r5)
81118e40:	dfc00515 	stw	ra,20(sp)
81118e44:	dcc00415 	stw	r19,16(sp)
81118e48:	2025883a 	mov	r18,r4
81118e4c:	29400504 	addi	r5,r5,20
81118e50:	0011883a 	mov	r8,zero
81118e54:	28c00017 	ldw	r3,0(r5)
81118e58:	29400104 	addi	r5,r5,4
81118e5c:	42000044 	addi	r8,r8,1
81118e60:	18bfffcc 	andi	r2,r3,65535
81118e64:	1185383a 	mul	r2,r2,r6
81118e68:	1806d43a 	srli	r3,r3,16
81118e6c:	11cf883a 	add	r7,r2,r7
81118e70:	3808d43a 	srli	r4,r7,16
81118e74:	1987383a 	mul	r3,r3,r6
81118e78:	38bfffcc 	andi	r2,r7,65535
81118e7c:	1907883a 	add	r3,r3,r4
81118e80:	1808943a 	slli	r4,r3,16
81118e84:	180ed43a 	srli	r7,r3,16
81118e88:	2085883a 	add	r2,r4,r2
81118e8c:	28bfff15 	stw	r2,-4(r5)
81118e90:	443ff016 	blt	r8,r16,81118e54 <__reset+0xfb0f8e54>
81118e94:	38000926 	beq	r7,zero,81118ebc <__multadd+0x94>
81118e98:	88800217 	ldw	r2,8(r17)
81118e9c:	80800f0e 	bge	r16,r2,81118edc <__multadd+0xb4>
81118ea0:	80800144 	addi	r2,r16,5
81118ea4:	1085883a 	add	r2,r2,r2
81118ea8:	1085883a 	add	r2,r2,r2
81118eac:	8885883a 	add	r2,r17,r2
81118eb0:	11c00015 	stw	r7,0(r2)
81118eb4:	84000044 	addi	r16,r16,1
81118eb8:	8c000415 	stw	r16,16(r17)
81118ebc:	8805883a 	mov	r2,r17
81118ec0:	dfc00517 	ldw	ra,20(sp)
81118ec4:	dcc00417 	ldw	r19,16(sp)
81118ec8:	dc800317 	ldw	r18,12(sp)
81118ecc:	dc400217 	ldw	r17,8(sp)
81118ed0:	dc000117 	ldw	r16,4(sp)
81118ed4:	dec00604 	addi	sp,sp,24
81118ed8:	f800283a 	ret
81118edc:	89400117 	ldw	r5,4(r17)
81118ee0:	9009883a 	mov	r4,r18
81118ee4:	d9c00015 	stw	r7,0(sp)
81118ee8:	29400044 	addi	r5,r5,1
81118eec:	1118d580 	call	81118d58 <_Balloc>
81118ef0:	89800417 	ldw	r6,16(r17)
81118ef4:	89400304 	addi	r5,r17,12
81118ef8:	11000304 	addi	r4,r2,12
81118efc:	31800084 	addi	r6,r6,2
81118f00:	318d883a 	add	r6,r6,r6
81118f04:	318d883a 	add	r6,r6,r6
81118f08:	1027883a 	mov	r19,r2
81118f0c:	11111480 	call	81111148 <memcpy>
81118f10:	d9c00017 	ldw	r7,0(sp)
81118f14:	88000a26 	beq	r17,zero,81118f40 <__multadd+0x118>
81118f18:	88c00117 	ldw	r3,4(r17)
81118f1c:	90801317 	ldw	r2,76(r18)
81118f20:	18c7883a 	add	r3,r3,r3
81118f24:	18c7883a 	add	r3,r3,r3
81118f28:	10c5883a 	add	r2,r2,r3
81118f2c:	10c00017 	ldw	r3,0(r2)
81118f30:	88c00015 	stw	r3,0(r17)
81118f34:	14400015 	stw	r17,0(r2)
81118f38:	9823883a 	mov	r17,r19
81118f3c:	003fd806 	br	81118ea0 <__reset+0xfb0f8ea0>
81118f40:	9823883a 	mov	r17,r19
81118f44:	003fd606 	br	81118ea0 <__reset+0xfb0f8ea0>

81118f48 <__s2b>:
81118f48:	defff904 	addi	sp,sp,-28
81118f4c:	dc400115 	stw	r17,4(sp)
81118f50:	dc000015 	stw	r16,0(sp)
81118f54:	2023883a 	mov	r17,r4
81118f58:	2821883a 	mov	r16,r5
81118f5c:	39000204 	addi	r4,r7,8
81118f60:	01400244 	movi	r5,9
81118f64:	dcc00315 	stw	r19,12(sp)
81118f68:	dc800215 	stw	r18,8(sp)
81118f6c:	dfc00615 	stw	ra,24(sp)
81118f70:	dd400515 	stw	r21,20(sp)
81118f74:	dd000415 	stw	r20,16(sp)
81118f78:	3825883a 	mov	r18,r7
81118f7c:	3027883a 	mov	r19,r6
81118f80:	111e1140 	call	8111e114 <__divsi3>
81118f84:	00c00044 	movi	r3,1
81118f88:	000b883a 	mov	r5,zero
81118f8c:	1880030e 	bge	r3,r2,81118f9c <__s2b+0x54>
81118f90:	18c7883a 	add	r3,r3,r3
81118f94:	29400044 	addi	r5,r5,1
81118f98:	18bffd16 	blt	r3,r2,81118f90 <__reset+0xfb0f8f90>
81118f9c:	8809883a 	mov	r4,r17
81118fa0:	1118d580 	call	81118d58 <_Balloc>
81118fa4:	d8c00717 	ldw	r3,28(sp)
81118fa8:	10c00515 	stw	r3,20(r2)
81118fac:	00c00044 	movi	r3,1
81118fb0:	10c00415 	stw	r3,16(r2)
81118fb4:	00c00244 	movi	r3,9
81118fb8:	1cc0210e 	bge	r3,r19,81119040 <__s2b+0xf8>
81118fbc:	80eb883a 	add	r21,r16,r3
81118fc0:	a829883a 	mov	r20,r21
81118fc4:	84e1883a 	add	r16,r16,r19
81118fc8:	a1c00007 	ldb	r7,0(r20)
81118fcc:	01800284 	movi	r6,10
81118fd0:	a5000044 	addi	r20,r20,1
81118fd4:	100b883a 	mov	r5,r2
81118fd8:	39fff404 	addi	r7,r7,-48
81118fdc:	8809883a 	mov	r4,r17
81118fe0:	1118e280 	call	81118e28 <__multadd>
81118fe4:	a43ff81e 	bne	r20,r16,81118fc8 <__reset+0xfb0f8fc8>
81118fe8:	ace1883a 	add	r16,r21,r19
81118fec:	843ffe04 	addi	r16,r16,-8
81118ff0:	9c800a0e 	bge	r19,r18,8111901c <__s2b+0xd4>
81118ff4:	94e5c83a 	sub	r18,r18,r19
81118ff8:	84a5883a 	add	r18,r16,r18
81118ffc:	81c00007 	ldb	r7,0(r16)
81119000:	01800284 	movi	r6,10
81119004:	84000044 	addi	r16,r16,1
81119008:	100b883a 	mov	r5,r2
8111900c:	39fff404 	addi	r7,r7,-48
81119010:	8809883a 	mov	r4,r17
81119014:	1118e280 	call	81118e28 <__multadd>
81119018:	84bff81e 	bne	r16,r18,81118ffc <__reset+0xfb0f8ffc>
8111901c:	dfc00617 	ldw	ra,24(sp)
81119020:	dd400517 	ldw	r21,20(sp)
81119024:	dd000417 	ldw	r20,16(sp)
81119028:	dcc00317 	ldw	r19,12(sp)
8111902c:	dc800217 	ldw	r18,8(sp)
81119030:	dc400117 	ldw	r17,4(sp)
81119034:	dc000017 	ldw	r16,0(sp)
81119038:	dec00704 	addi	sp,sp,28
8111903c:	f800283a 	ret
81119040:	84000284 	addi	r16,r16,10
81119044:	1827883a 	mov	r19,r3
81119048:	003fe906 	br	81118ff0 <__reset+0xfb0f8ff0>

8111904c <__hi0bits>:
8111904c:	20bfffec 	andhi	r2,r4,65535
81119050:	1000141e 	bne	r2,zero,811190a4 <__hi0bits+0x58>
81119054:	2008943a 	slli	r4,r4,16
81119058:	00800404 	movi	r2,16
8111905c:	20ffc02c 	andhi	r3,r4,65280
81119060:	1800021e 	bne	r3,zero,8111906c <__hi0bits+0x20>
81119064:	2008923a 	slli	r4,r4,8
81119068:	10800204 	addi	r2,r2,8
8111906c:	20fc002c 	andhi	r3,r4,61440
81119070:	1800021e 	bne	r3,zero,8111907c <__hi0bits+0x30>
81119074:	2008913a 	slli	r4,r4,4
81119078:	10800104 	addi	r2,r2,4
8111907c:	20f0002c 	andhi	r3,r4,49152
81119080:	1800031e 	bne	r3,zero,81119090 <__hi0bits+0x44>
81119084:	2109883a 	add	r4,r4,r4
81119088:	10800084 	addi	r2,r2,2
8111908c:	2109883a 	add	r4,r4,r4
81119090:	20000316 	blt	r4,zero,811190a0 <__hi0bits+0x54>
81119094:	2110002c 	andhi	r4,r4,16384
81119098:	2000041e 	bne	r4,zero,811190ac <__hi0bits+0x60>
8111909c:	00800804 	movi	r2,32
811190a0:	f800283a 	ret
811190a4:	0005883a 	mov	r2,zero
811190a8:	003fec06 	br	8111905c <__reset+0xfb0f905c>
811190ac:	10800044 	addi	r2,r2,1
811190b0:	f800283a 	ret

811190b4 <__lo0bits>:
811190b4:	20c00017 	ldw	r3,0(r4)
811190b8:	188001cc 	andi	r2,r3,7
811190bc:	10000826 	beq	r2,zero,811190e0 <__lo0bits+0x2c>
811190c0:	1880004c 	andi	r2,r3,1
811190c4:	1000211e 	bne	r2,zero,8111914c <__lo0bits+0x98>
811190c8:	1880008c 	andi	r2,r3,2
811190cc:	1000211e 	bne	r2,zero,81119154 <__lo0bits+0xa0>
811190d0:	1806d0ba 	srli	r3,r3,2
811190d4:	00800084 	movi	r2,2
811190d8:	20c00015 	stw	r3,0(r4)
811190dc:	f800283a 	ret
811190e0:	18bfffcc 	andi	r2,r3,65535
811190e4:	10001326 	beq	r2,zero,81119134 <__lo0bits+0x80>
811190e8:	0005883a 	mov	r2,zero
811190ec:	19403fcc 	andi	r5,r3,255
811190f0:	2800021e 	bne	r5,zero,811190fc <__lo0bits+0x48>
811190f4:	1806d23a 	srli	r3,r3,8
811190f8:	10800204 	addi	r2,r2,8
811190fc:	194003cc 	andi	r5,r3,15
81119100:	2800021e 	bne	r5,zero,8111910c <__lo0bits+0x58>
81119104:	1806d13a 	srli	r3,r3,4
81119108:	10800104 	addi	r2,r2,4
8111910c:	194000cc 	andi	r5,r3,3
81119110:	2800021e 	bne	r5,zero,8111911c <__lo0bits+0x68>
81119114:	1806d0ba 	srli	r3,r3,2
81119118:	10800084 	addi	r2,r2,2
8111911c:	1940004c 	andi	r5,r3,1
81119120:	2800081e 	bne	r5,zero,81119144 <__lo0bits+0x90>
81119124:	1806d07a 	srli	r3,r3,1
81119128:	1800051e 	bne	r3,zero,81119140 <__lo0bits+0x8c>
8111912c:	00800804 	movi	r2,32
81119130:	f800283a 	ret
81119134:	1806d43a 	srli	r3,r3,16
81119138:	00800404 	movi	r2,16
8111913c:	003feb06 	br	811190ec <__reset+0xfb0f90ec>
81119140:	10800044 	addi	r2,r2,1
81119144:	20c00015 	stw	r3,0(r4)
81119148:	f800283a 	ret
8111914c:	0005883a 	mov	r2,zero
81119150:	f800283a 	ret
81119154:	1806d07a 	srli	r3,r3,1
81119158:	00800044 	movi	r2,1
8111915c:	20c00015 	stw	r3,0(r4)
81119160:	f800283a 	ret

81119164 <__i2b>:
81119164:	defffd04 	addi	sp,sp,-12
81119168:	dc000015 	stw	r16,0(sp)
8111916c:	04000044 	movi	r16,1
81119170:	dc400115 	stw	r17,4(sp)
81119174:	2823883a 	mov	r17,r5
81119178:	800b883a 	mov	r5,r16
8111917c:	dfc00215 	stw	ra,8(sp)
81119180:	1118d580 	call	81118d58 <_Balloc>
81119184:	14400515 	stw	r17,20(r2)
81119188:	14000415 	stw	r16,16(r2)
8111918c:	dfc00217 	ldw	ra,8(sp)
81119190:	dc400117 	ldw	r17,4(sp)
81119194:	dc000017 	ldw	r16,0(sp)
81119198:	dec00304 	addi	sp,sp,12
8111919c:	f800283a 	ret

811191a0 <__multiply>:
811191a0:	defffa04 	addi	sp,sp,-24
811191a4:	dcc00315 	stw	r19,12(sp)
811191a8:	dc800215 	stw	r18,8(sp)
811191ac:	34c00417 	ldw	r19,16(r6)
811191b0:	2c800417 	ldw	r18,16(r5)
811191b4:	dd000415 	stw	r20,16(sp)
811191b8:	dc400115 	stw	r17,4(sp)
811191bc:	dfc00515 	stw	ra,20(sp)
811191c0:	dc000015 	stw	r16,0(sp)
811191c4:	2829883a 	mov	r20,r5
811191c8:	3023883a 	mov	r17,r6
811191cc:	94c0050e 	bge	r18,r19,811191e4 <__multiply+0x44>
811191d0:	9007883a 	mov	r3,r18
811191d4:	3029883a 	mov	r20,r6
811191d8:	9825883a 	mov	r18,r19
811191dc:	2823883a 	mov	r17,r5
811191e0:	1827883a 	mov	r19,r3
811191e4:	a0800217 	ldw	r2,8(r20)
811191e8:	94e1883a 	add	r16,r18,r19
811191ec:	a1400117 	ldw	r5,4(r20)
811191f0:	1400010e 	bge	r2,r16,811191f8 <__multiply+0x58>
811191f4:	29400044 	addi	r5,r5,1
811191f8:	1118d580 	call	81118d58 <_Balloc>
811191fc:	8415883a 	add	r10,r16,r16
81119200:	12c00504 	addi	r11,r2,20
81119204:	5295883a 	add	r10,r10,r10
81119208:	5a95883a 	add	r10,r11,r10
8111920c:	5807883a 	mov	r3,r11
81119210:	5a80032e 	bgeu	r11,r10,81119220 <__multiply+0x80>
81119214:	18000015 	stw	zero,0(r3)
81119218:	18c00104 	addi	r3,r3,4
8111921c:	1abffd36 	bltu	r3,r10,81119214 <__reset+0xfb0f9214>
81119220:	9ce7883a 	add	r19,r19,r19
81119224:	94a5883a 	add	r18,r18,r18
81119228:	89800504 	addi	r6,r17,20
8111922c:	9ce7883a 	add	r19,r19,r19
81119230:	a3400504 	addi	r13,r20,20
81119234:	94a5883a 	add	r18,r18,r18
81119238:	34d9883a 	add	r12,r6,r19
8111923c:	6c93883a 	add	r9,r13,r18
81119240:	3300422e 	bgeu	r6,r12,8111934c <__multiply+0x1ac>
81119244:	37c00017 	ldw	ra,0(r6)
81119248:	fbffffcc 	andi	r15,ra,65535
8111924c:	78001b26 	beq	r15,zero,811192bc <__multiply+0x11c>
81119250:	5811883a 	mov	r8,r11
81119254:	681d883a 	mov	r14,r13
81119258:	000f883a 	mov	r7,zero
8111925c:	71000017 	ldw	r4,0(r14)
81119260:	40c00017 	ldw	r3,0(r8)
81119264:	73800104 	addi	r14,r14,4
81119268:	217fffcc 	andi	r5,r4,65535
8111926c:	2bcb383a 	mul	r5,r5,r15
81119270:	2008d43a 	srli	r4,r4,16
81119274:	1c7fffcc 	andi	r17,r3,65535
81119278:	2c4b883a 	add	r5,r5,r17
8111927c:	29cb883a 	add	r5,r5,r7
81119280:	23c9383a 	mul	r4,r4,r15
81119284:	1806d43a 	srli	r3,r3,16
81119288:	280ed43a 	srli	r7,r5,16
8111928c:	297fffcc 	andi	r5,r5,65535
81119290:	20c7883a 	add	r3,r4,r3
81119294:	19c7883a 	add	r3,r3,r7
81119298:	1808943a 	slli	r4,r3,16
8111929c:	4023883a 	mov	r17,r8
811192a0:	180ed43a 	srli	r7,r3,16
811192a4:	214ab03a 	or	r5,r4,r5
811192a8:	41400015 	stw	r5,0(r8)
811192ac:	42000104 	addi	r8,r8,4
811192b0:	727fea36 	bltu	r14,r9,8111925c <__reset+0xfb0f925c>
811192b4:	89c00115 	stw	r7,4(r17)
811192b8:	37c00017 	ldw	ra,0(r6)
811192bc:	f83ed43a 	srli	ra,ra,16
811192c0:	f8001f26 	beq	ra,zero,81119340 <__multiply+0x1a0>
811192c4:	58c00017 	ldw	r3,0(r11)
811192c8:	681d883a 	mov	r14,r13
811192cc:	581f883a 	mov	r15,r11
811192d0:	1811883a 	mov	r8,r3
811192d4:	5825883a 	mov	r18,r11
811192d8:	000f883a 	mov	r7,zero
811192dc:	00000106 	br	811192e4 <__multiply+0x144>
811192e0:	8825883a 	mov	r18,r17
811192e4:	7140000b 	ldhu	r5,0(r14)
811192e8:	4010d43a 	srli	r8,r8,16
811192ec:	193fffcc 	andi	r4,r3,65535
811192f0:	2fcb383a 	mul	r5,r5,ra
811192f4:	7bc00104 	addi	r15,r15,4
811192f8:	73800104 	addi	r14,r14,4
811192fc:	2a0b883a 	add	r5,r5,r8
81119300:	29cb883a 	add	r5,r5,r7
81119304:	2806943a 	slli	r3,r5,16
81119308:	94400104 	addi	r17,r18,4
8111930c:	280ad43a 	srli	r5,r5,16
81119310:	1908b03a 	or	r4,r3,r4
81119314:	793fff15 	stw	r4,-4(r15)
81119318:	70ffff17 	ldw	r3,-4(r14)
8111931c:	8a000017 	ldw	r8,0(r17)
81119320:	1806d43a 	srli	r3,r3,16
81119324:	413fffcc 	andi	r4,r8,65535
81119328:	1fc7383a 	mul	r3,r3,ra
8111932c:	1907883a 	add	r3,r3,r4
81119330:	1947883a 	add	r3,r3,r5
81119334:	180ed43a 	srli	r7,r3,16
81119338:	727fe936 	bltu	r14,r9,811192e0 <__reset+0xfb0f92e0>
8111933c:	90c00115 	stw	r3,4(r18)
81119340:	31800104 	addi	r6,r6,4
81119344:	5ac00104 	addi	r11,r11,4
81119348:	333fbe36 	bltu	r6,r12,81119244 <__reset+0xfb0f9244>
8111934c:	0400090e 	bge	zero,r16,81119374 <__multiply+0x1d4>
81119350:	50ffff17 	ldw	r3,-4(r10)
81119354:	52bfff04 	addi	r10,r10,-4
81119358:	18000326 	beq	r3,zero,81119368 <__multiply+0x1c8>
8111935c:	00000506 	br	81119374 <__multiply+0x1d4>
81119360:	50c00017 	ldw	r3,0(r10)
81119364:	1800031e 	bne	r3,zero,81119374 <__multiply+0x1d4>
81119368:	843fffc4 	addi	r16,r16,-1
8111936c:	52bfff04 	addi	r10,r10,-4
81119370:	803ffb1e 	bne	r16,zero,81119360 <__reset+0xfb0f9360>
81119374:	14000415 	stw	r16,16(r2)
81119378:	dfc00517 	ldw	ra,20(sp)
8111937c:	dd000417 	ldw	r20,16(sp)
81119380:	dcc00317 	ldw	r19,12(sp)
81119384:	dc800217 	ldw	r18,8(sp)
81119388:	dc400117 	ldw	r17,4(sp)
8111938c:	dc000017 	ldw	r16,0(sp)
81119390:	dec00604 	addi	sp,sp,24
81119394:	f800283a 	ret

81119398 <__pow5mult>:
81119398:	defffa04 	addi	sp,sp,-24
8111939c:	dcc00315 	stw	r19,12(sp)
811193a0:	dc000015 	stw	r16,0(sp)
811193a4:	dfc00515 	stw	ra,20(sp)
811193a8:	dd000415 	stw	r20,16(sp)
811193ac:	dc800215 	stw	r18,8(sp)
811193b0:	dc400115 	stw	r17,4(sp)
811193b4:	308000cc 	andi	r2,r6,3
811193b8:	3021883a 	mov	r16,r6
811193bc:	2027883a 	mov	r19,r4
811193c0:	10002f1e 	bne	r2,zero,81119480 <__pow5mult+0xe8>
811193c4:	2825883a 	mov	r18,r5
811193c8:	8021d0ba 	srai	r16,r16,2
811193cc:	80001a26 	beq	r16,zero,81119438 <__pow5mult+0xa0>
811193d0:	9c401217 	ldw	r17,72(r19)
811193d4:	8800061e 	bne	r17,zero,811193f0 <__pow5mult+0x58>
811193d8:	00003406 	br	811194ac <__pow5mult+0x114>
811193dc:	8021d07a 	srai	r16,r16,1
811193e0:	80001526 	beq	r16,zero,81119438 <__pow5mult+0xa0>
811193e4:	88800017 	ldw	r2,0(r17)
811193e8:	10001c26 	beq	r2,zero,8111945c <__pow5mult+0xc4>
811193ec:	1023883a 	mov	r17,r2
811193f0:	8080004c 	andi	r2,r16,1
811193f4:	103ff926 	beq	r2,zero,811193dc <__reset+0xfb0f93dc>
811193f8:	880d883a 	mov	r6,r17
811193fc:	900b883a 	mov	r5,r18
81119400:	9809883a 	mov	r4,r19
81119404:	11191a00 	call	811191a0 <__multiply>
81119408:	90001b26 	beq	r18,zero,81119478 <__pow5mult+0xe0>
8111940c:	91000117 	ldw	r4,4(r18)
81119410:	98c01317 	ldw	r3,76(r19)
81119414:	8021d07a 	srai	r16,r16,1
81119418:	2109883a 	add	r4,r4,r4
8111941c:	2109883a 	add	r4,r4,r4
81119420:	1907883a 	add	r3,r3,r4
81119424:	19000017 	ldw	r4,0(r3)
81119428:	91000015 	stw	r4,0(r18)
8111942c:	1c800015 	stw	r18,0(r3)
81119430:	1025883a 	mov	r18,r2
81119434:	803feb1e 	bne	r16,zero,811193e4 <__reset+0xfb0f93e4>
81119438:	9005883a 	mov	r2,r18
8111943c:	dfc00517 	ldw	ra,20(sp)
81119440:	dd000417 	ldw	r20,16(sp)
81119444:	dcc00317 	ldw	r19,12(sp)
81119448:	dc800217 	ldw	r18,8(sp)
8111944c:	dc400117 	ldw	r17,4(sp)
81119450:	dc000017 	ldw	r16,0(sp)
81119454:	dec00604 	addi	sp,sp,24
81119458:	f800283a 	ret
8111945c:	880d883a 	mov	r6,r17
81119460:	880b883a 	mov	r5,r17
81119464:	9809883a 	mov	r4,r19
81119468:	11191a00 	call	811191a0 <__multiply>
8111946c:	88800015 	stw	r2,0(r17)
81119470:	10000015 	stw	zero,0(r2)
81119474:	003fdd06 	br	811193ec <__reset+0xfb0f93ec>
81119478:	1025883a 	mov	r18,r2
8111947c:	003fd706 	br	811193dc <__reset+0xfb0f93dc>
81119480:	10bfffc4 	addi	r2,r2,-1
81119484:	1085883a 	add	r2,r2,r2
81119488:	00e044b4 	movhi	r3,33042
8111948c:	18dad104 	addi	r3,r3,27460
81119490:	1085883a 	add	r2,r2,r2
81119494:	1885883a 	add	r2,r3,r2
81119498:	11800017 	ldw	r6,0(r2)
8111949c:	000f883a 	mov	r7,zero
811194a0:	1118e280 	call	81118e28 <__multadd>
811194a4:	1025883a 	mov	r18,r2
811194a8:	003fc706 	br	811193c8 <__reset+0xfb0f93c8>
811194ac:	05000044 	movi	r20,1
811194b0:	a00b883a 	mov	r5,r20
811194b4:	9809883a 	mov	r4,r19
811194b8:	1118d580 	call	81118d58 <_Balloc>
811194bc:	1023883a 	mov	r17,r2
811194c0:	00809c44 	movi	r2,625
811194c4:	88800515 	stw	r2,20(r17)
811194c8:	8d000415 	stw	r20,16(r17)
811194cc:	9c401215 	stw	r17,72(r19)
811194d0:	88000015 	stw	zero,0(r17)
811194d4:	003fc606 	br	811193f0 <__reset+0xfb0f93f0>

811194d8 <__lshift>:
811194d8:	defff904 	addi	sp,sp,-28
811194dc:	dd400515 	stw	r21,20(sp)
811194e0:	dcc00315 	stw	r19,12(sp)
811194e4:	302bd17a 	srai	r21,r6,5
811194e8:	2cc00417 	ldw	r19,16(r5)
811194ec:	28800217 	ldw	r2,8(r5)
811194f0:	dd000415 	stw	r20,16(sp)
811194f4:	ace7883a 	add	r19,r21,r19
811194f8:	dc800215 	stw	r18,8(sp)
811194fc:	dc400115 	stw	r17,4(sp)
81119500:	dc000015 	stw	r16,0(sp)
81119504:	dfc00615 	stw	ra,24(sp)
81119508:	9c000044 	addi	r16,r19,1
8111950c:	2823883a 	mov	r17,r5
81119510:	3029883a 	mov	r20,r6
81119514:	2025883a 	mov	r18,r4
81119518:	29400117 	ldw	r5,4(r5)
8111951c:	1400030e 	bge	r2,r16,8111952c <__lshift+0x54>
81119520:	1085883a 	add	r2,r2,r2
81119524:	29400044 	addi	r5,r5,1
81119528:	143ffd16 	blt	r2,r16,81119520 <__reset+0xfb0f9520>
8111952c:	9009883a 	mov	r4,r18
81119530:	1118d580 	call	81118d58 <_Balloc>
81119534:	10c00504 	addi	r3,r2,20
81119538:	0540070e 	bge	zero,r21,81119558 <__lshift+0x80>
8111953c:	ad6b883a 	add	r21,r21,r21
81119540:	ad6b883a 	add	r21,r21,r21
81119544:	1809883a 	mov	r4,r3
81119548:	1d47883a 	add	r3,r3,r21
8111954c:	20000015 	stw	zero,0(r4)
81119550:	21000104 	addi	r4,r4,4
81119554:	193ffd1e 	bne	r3,r4,8111954c <__reset+0xfb0f954c>
81119558:	8a000417 	ldw	r8,16(r17)
8111955c:	89000504 	addi	r4,r17,20
81119560:	a18007cc 	andi	r6,r20,31
81119564:	4211883a 	add	r8,r8,r8
81119568:	4211883a 	add	r8,r8,r8
8111956c:	2211883a 	add	r8,r4,r8
81119570:	30002326 	beq	r6,zero,81119600 <__lshift+0x128>
81119574:	02400804 	movi	r9,32
81119578:	4993c83a 	sub	r9,r9,r6
8111957c:	000b883a 	mov	r5,zero
81119580:	21c00017 	ldw	r7,0(r4)
81119584:	1815883a 	mov	r10,r3
81119588:	18c00104 	addi	r3,r3,4
8111958c:	398e983a 	sll	r7,r7,r6
81119590:	21000104 	addi	r4,r4,4
81119594:	394ab03a 	or	r5,r7,r5
81119598:	197fff15 	stw	r5,-4(r3)
8111959c:	217fff17 	ldw	r5,-4(r4)
811195a0:	2a4ad83a 	srl	r5,r5,r9
811195a4:	223ff636 	bltu	r4,r8,81119580 <__reset+0xfb0f9580>
811195a8:	51400115 	stw	r5,4(r10)
811195ac:	28001a1e 	bne	r5,zero,81119618 <__lshift+0x140>
811195b0:	843fffc4 	addi	r16,r16,-1
811195b4:	14000415 	stw	r16,16(r2)
811195b8:	88000826 	beq	r17,zero,811195dc <__lshift+0x104>
811195bc:	89000117 	ldw	r4,4(r17)
811195c0:	90c01317 	ldw	r3,76(r18)
811195c4:	2109883a 	add	r4,r4,r4
811195c8:	2109883a 	add	r4,r4,r4
811195cc:	1907883a 	add	r3,r3,r4
811195d0:	19000017 	ldw	r4,0(r3)
811195d4:	89000015 	stw	r4,0(r17)
811195d8:	1c400015 	stw	r17,0(r3)
811195dc:	dfc00617 	ldw	ra,24(sp)
811195e0:	dd400517 	ldw	r21,20(sp)
811195e4:	dd000417 	ldw	r20,16(sp)
811195e8:	dcc00317 	ldw	r19,12(sp)
811195ec:	dc800217 	ldw	r18,8(sp)
811195f0:	dc400117 	ldw	r17,4(sp)
811195f4:	dc000017 	ldw	r16,0(sp)
811195f8:	dec00704 	addi	sp,sp,28
811195fc:	f800283a 	ret
81119600:	21400017 	ldw	r5,0(r4)
81119604:	18c00104 	addi	r3,r3,4
81119608:	21000104 	addi	r4,r4,4
8111960c:	197fff15 	stw	r5,-4(r3)
81119610:	223ffb36 	bltu	r4,r8,81119600 <__reset+0xfb0f9600>
81119614:	003fe606 	br	811195b0 <__reset+0xfb0f95b0>
81119618:	9c000084 	addi	r16,r19,2
8111961c:	003fe406 	br	811195b0 <__reset+0xfb0f95b0>

81119620 <__mcmp>:
81119620:	20800417 	ldw	r2,16(r4)
81119624:	28c00417 	ldw	r3,16(r5)
81119628:	10c5c83a 	sub	r2,r2,r3
8111962c:	1000111e 	bne	r2,zero,81119674 <__mcmp+0x54>
81119630:	18c7883a 	add	r3,r3,r3
81119634:	18c7883a 	add	r3,r3,r3
81119638:	21000504 	addi	r4,r4,20
8111963c:	29400504 	addi	r5,r5,20
81119640:	20c5883a 	add	r2,r4,r3
81119644:	28cb883a 	add	r5,r5,r3
81119648:	00000106 	br	81119650 <__mcmp+0x30>
8111964c:	20800a2e 	bgeu	r4,r2,81119678 <__mcmp+0x58>
81119650:	10bfff04 	addi	r2,r2,-4
81119654:	297fff04 	addi	r5,r5,-4
81119658:	11800017 	ldw	r6,0(r2)
8111965c:	28c00017 	ldw	r3,0(r5)
81119660:	30fffa26 	beq	r6,r3,8111964c <__reset+0xfb0f964c>
81119664:	30c00236 	bltu	r6,r3,81119670 <__mcmp+0x50>
81119668:	00800044 	movi	r2,1
8111966c:	f800283a 	ret
81119670:	00bfffc4 	movi	r2,-1
81119674:	f800283a 	ret
81119678:	0005883a 	mov	r2,zero
8111967c:	f800283a 	ret

81119680 <__mdiff>:
81119680:	28c00417 	ldw	r3,16(r5)
81119684:	30800417 	ldw	r2,16(r6)
81119688:	defffa04 	addi	sp,sp,-24
8111968c:	dcc00315 	stw	r19,12(sp)
81119690:	dc800215 	stw	r18,8(sp)
81119694:	dfc00515 	stw	ra,20(sp)
81119698:	dd000415 	stw	r20,16(sp)
8111969c:	dc400115 	stw	r17,4(sp)
811196a0:	dc000015 	stw	r16,0(sp)
811196a4:	1887c83a 	sub	r3,r3,r2
811196a8:	2825883a 	mov	r18,r5
811196ac:	3027883a 	mov	r19,r6
811196b0:	1800141e 	bne	r3,zero,81119704 <__mdiff+0x84>
811196b4:	1085883a 	add	r2,r2,r2
811196b8:	1085883a 	add	r2,r2,r2
811196bc:	2a000504 	addi	r8,r5,20
811196c0:	34000504 	addi	r16,r6,20
811196c4:	4087883a 	add	r3,r8,r2
811196c8:	8085883a 	add	r2,r16,r2
811196cc:	00000106 	br	811196d4 <__mdiff+0x54>
811196d0:	40c0592e 	bgeu	r8,r3,81119838 <__mdiff+0x1b8>
811196d4:	18ffff04 	addi	r3,r3,-4
811196d8:	10bfff04 	addi	r2,r2,-4
811196dc:	19c00017 	ldw	r7,0(r3)
811196e0:	11400017 	ldw	r5,0(r2)
811196e4:	397ffa26 	beq	r7,r5,811196d0 <__reset+0xfb0f96d0>
811196e8:	3940592e 	bgeu	r7,r5,81119850 <__mdiff+0x1d0>
811196ec:	9005883a 	mov	r2,r18
811196f0:	4023883a 	mov	r17,r8
811196f4:	9825883a 	mov	r18,r19
811196f8:	05000044 	movi	r20,1
811196fc:	1027883a 	mov	r19,r2
81119700:	00000406 	br	81119714 <__mdiff+0x94>
81119704:	18005616 	blt	r3,zero,81119860 <__mdiff+0x1e0>
81119708:	34400504 	addi	r17,r6,20
8111970c:	2c000504 	addi	r16,r5,20
81119710:	0029883a 	mov	r20,zero
81119714:	91400117 	ldw	r5,4(r18)
81119718:	1118d580 	call	81118d58 <_Balloc>
8111971c:	92400417 	ldw	r9,16(r18)
81119720:	9b000417 	ldw	r12,16(r19)
81119724:	12c00504 	addi	r11,r2,20
81119728:	4a51883a 	add	r8,r9,r9
8111972c:	6319883a 	add	r12,r12,r12
81119730:	4211883a 	add	r8,r8,r8
81119734:	6319883a 	add	r12,r12,r12
81119738:	15000315 	stw	r20,12(r2)
8111973c:	8211883a 	add	r8,r16,r8
81119740:	8b19883a 	add	r12,r17,r12
81119744:	0007883a 	mov	r3,zero
81119748:	81400017 	ldw	r5,0(r16)
8111974c:	89c00017 	ldw	r7,0(r17)
81119750:	59800104 	addi	r6,r11,4
81119754:	293fffcc 	andi	r4,r5,65535
81119758:	20c7883a 	add	r3,r4,r3
8111975c:	393fffcc 	andi	r4,r7,65535
81119760:	1909c83a 	sub	r4,r3,r4
81119764:	280ad43a 	srli	r5,r5,16
81119768:	380ed43a 	srli	r7,r7,16
8111976c:	2007d43a 	srai	r3,r4,16
81119770:	213fffcc 	andi	r4,r4,65535
81119774:	29cbc83a 	sub	r5,r5,r7
81119778:	28c7883a 	add	r3,r5,r3
8111977c:	180a943a 	slli	r5,r3,16
81119780:	8c400104 	addi	r17,r17,4
81119784:	84000104 	addi	r16,r16,4
81119788:	2908b03a 	or	r4,r5,r4
8111978c:	59000015 	stw	r4,0(r11)
81119790:	1807d43a 	srai	r3,r3,16
81119794:	3015883a 	mov	r10,r6
81119798:	3017883a 	mov	r11,r6
8111979c:	8b3fea36 	bltu	r17,r12,81119748 <__reset+0xfb0f9748>
811197a0:	8200162e 	bgeu	r16,r8,811197fc <__mdiff+0x17c>
811197a4:	8017883a 	mov	r11,r16
811197a8:	59400017 	ldw	r5,0(r11)
811197ac:	31800104 	addi	r6,r6,4
811197b0:	5ac00104 	addi	r11,r11,4
811197b4:	293fffcc 	andi	r4,r5,65535
811197b8:	20c7883a 	add	r3,r4,r3
811197bc:	280ed43a 	srli	r7,r5,16
811197c0:	180bd43a 	srai	r5,r3,16
811197c4:	193fffcc 	andi	r4,r3,65535
811197c8:	3947883a 	add	r3,r7,r5
811197cc:	180a943a 	slli	r5,r3,16
811197d0:	1807d43a 	srai	r3,r3,16
811197d4:	2908b03a 	or	r4,r5,r4
811197d8:	313fff15 	stw	r4,-4(r6)
811197dc:	5a3ff236 	bltu	r11,r8,811197a8 <__reset+0xfb0f97a8>
811197e0:	0406303a 	nor	r3,zero,r16
811197e4:	1a07883a 	add	r3,r3,r8
811197e8:	1806d0ba 	srli	r3,r3,2
811197ec:	18c00044 	addi	r3,r3,1
811197f0:	18c7883a 	add	r3,r3,r3
811197f4:	18c7883a 	add	r3,r3,r3
811197f8:	50d5883a 	add	r10,r10,r3
811197fc:	50ffff04 	addi	r3,r10,-4
81119800:	2000041e 	bne	r4,zero,81119814 <__mdiff+0x194>
81119804:	18ffff04 	addi	r3,r3,-4
81119808:	19000017 	ldw	r4,0(r3)
8111980c:	4a7fffc4 	addi	r9,r9,-1
81119810:	203ffc26 	beq	r4,zero,81119804 <__reset+0xfb0f9804>
81119814:	12400415 	stw	r9,16(r2)
81119818:	dfc00517 	ldw	ra,20(sp)
8111981c:	dd000417 	ldw	r20,16(sp)
81119820:	dcc00317 	ldw	r19,12(sp)
81119824:	dc800217 	ldw	r18,8(sp)
81119828:	dc400117 	ldw	r17,4(sp)
8111982c:	dc000017 	ldw	r16,0(sp)
81119830:	dec00604 	addi	sp,sp,24
81119834:	f800283a 	ret
81119838:	000b883a 	mov	r5,zero
8111983c:	1118d580 	call	81118d58 <_Balloc>
81119840:	00c00044 	movi	r3,1
81119844:	10c00415 	stw	r3,16(r2)
81119848:	10000515 	stw	zero,20(r2)
8111984c:	003ff206 	br	81119818 <__reset+0xfb0f9818>
81119850:	8023883a 	mov	r17,r16
81119854:	0029883a 	mov	r20,zero
81119858:	4021883a 	mov	r16,r8
8111985c:	003fad06 	br	81119714 <__reset+0xfb0f9714>
81119860:	9005883a 	mov	r2,r18
81119864:	94400504 	addi	r17,r18,20
81119868:	9c000504 	addi	r16,r19,20
8111986c:	9825883a 	mov	r18,r19
81119870:	05000044 	movi	r20,1
81119874:	1027883a 	mov	r19,r2
81119878:	003fa606 	br	81119714 <__reset+0xfb0f9714>

8111987c <__ulp>:
8111987c:	295ffc2c 	andhi	r5,r5,32752
81119880:	00bf3034 	movhi	r2,64704
81119884:	2887883a 	add	r3,r5,r2
81119888:	00c0020e 	bge	zero,r3,81119894 <__ulp+0x18>
8111988c:	0005883a 	mov	r2,zero
81119890:	f800283a 	ret
81119894:	00c7c83a 	sub	r3,zero,r3
81119898:	1807d53a 	srai	r3,r3,20
8111989c:	008004c4 	movi	r2,19
811198a0:	10c00b0e 	bge	r2,r3,811198d0 <__ulp+0x54>
811198a4:	18bffb04 	addi	r2,r3,-20
811198a8:	01000784 	movi	r4,30
811198ac:	0007883a 	mov	r3,zero
811198b0:	20800516 	blt	r4,r2,811198c8 <__ulp+0x4c>
811198b4:	010007c4 	movi	r4,31
811198b8:	2089c83a 	sub	r4,r4,r2
811198bc:	00800044 	movi	r2,1
811198c0:	1104983a 	sll	r2,r2,r4
811198c4:	f800283a 	ret
811198c8:	00800044 	movi	r2,1
811198cc:	f800283a 	ret
811198d0:	01400234 	movhi	r5,8
811198d4:	28c7d83a 	sra	r3,r5,r3
811198d8:	0005883a 	mov	r2,zero
811198dc:	f800283a 	ret

811198e0 <__b2d>:
811198e0:	defffa04 	addi	sp,sp,-24
811198e4:	dc000015 	stw	r16,0(sp)
811198e8:	24000417 	ldw	r16,16(r4)
811198ec:	dc400115 	stw	r17,4(sp)
811198f0:	24400504 	addi	r17,r4,20
811198f4:	8421883a 	add	r16,r16,r16
811198f8:	8421883a 	add	r16,r16,r16
811198fc:	8c21883a 	add	r16,r17,r16
81119900:	dc800215 	stw	r18,8(sp)
81119904:	84bfff17 	ldw	r18,-4(r16)
81119908:	dd000415 	stw	r20,16(sp)
8111990c:	dcc00315 	stw	r19,12(sp)
81119910:	9009883a 	mov	r4,r18
81119914:	2829883a 	mov	r20,r5
81119918:	dfc00515 	stw	ra,20(sp)
8111991c:	111904c0 	call	8111904c <__hi0bits>
81119920:	00c00804 	movi	r3,32
81119924:	1889c83a 	sub	r4,r3,r2
81119928:	a1000015 	stw	r4,0(r20)
8111992c:	01000284 	movi	r4,10
81119930:	84ffff04 	addi	r19,r16,-4
81119934:	20801216 	blt	r4,r2,81119980 <__b2d+0xa0>
81119938:	018002c4 	movi	r6,11
8111993c:	308dc83a 	sub	r6,r6,r2
81119940:	9186d83a 	srl	r3,r18,r6
81119944:	18cffc34 	orhi	r3,r3,16368
81119948:	8cc0212e 	bgeu	r17,r19,811199d0 <__b2d+0xf0>
8111994c:	813ffe17 	ldw	r4,-8(r16)
81119950:	218cd83a 	srl	r6,r4,r6
81119954:	10800544 	addi	r2,r2,21
81119958:	9084983a 	sll	r2,r18,r2
8111995c:	1184b03a 	or	r2,r2,r6
81119960:	dfc00517 	ldw	ra,20(sp)
81119964:	dd000417 	ldw	r20,16(sp)
81119968:	dcc00317 	ldw	r19,12(sp)
8111996c:	dc800217 	ldw	r18,8(sp)
81119970:	dc400117 	ldw	r17,4(sp)
81119974:	dc000017 	ldw	r16,0(sp)
81119978:	dec00604 	addi	sp,sp,24
8111997c:	f800283a 	ret
81119980:	8cc00f2e 	bgeu	r17,r19,811199c0 <__b2d+0xe0>
81119984:	117ffd44 	addi	r5,r2,-11
81119988:	80bffe17 	ldw	r2,-8(r16)
8111998c:	28000e26 	beq	r5,zero,811199c8 <__b2d+0xe8>
81119990:	1949c83a 	sub	r4,r3,r5
81119994:	9164983a 	sll	r18,r18,r5
81119998:	1106d83a 	srl	r3,r2,r4
8111999c:	81bffe04 	addi	r6,r16,-8
811199a0:	948ffc34 	orhi	r18,r18,16368
811199a4:	90c6b03a 	or	r3,r18,r3
811199a8:	89800e2e 	bgeu	r17,r6,811199e4 <__b2d+0x104>
811199ac:	81bffd17 	ldw	r6,-12(r16)
811199b0:	1144983a 	sll	r2,r2,r5
811199b4:	310ad83a 	srl	r5,r6,r4
811199b8:	2884b03a 	or	r2,r5,r2
811199bc:	003fe806 	br	81119960 <__reset+0xfb0f9960>
811199c0:	10bffd44 	addi	r2,r2,-11
811199c4:	1000041e 	bne	r2,zero,811199d8 <__b2d+0xf8>
811199c8:	90cffc34 	orhi	r3,r18,16368
811199cc:	003fe406 	br	81119960 <__reset+0xfb0f9960>
811199d0:	000d883a 	mov	r6,zero
811199d4:	003fdf06 	br	81119954 <__reset+0xfb0f9954>
811199d8:	90a4983a 	sll	r18,r18,r2
811199dc:	0005883a 	mov	r2,zero
811199e0:	003ff906 	br	811199c8 <__reset+0xfb0f99c8>
811199e4:	1144983a 	sll	r2,r2,r5
811199e8:	003fdd06 	br	81119960 <__reset+0xfb0f9960>

811199ec <__d2b>:
811199ec:	defff804 	addi	sp,sp,-32
811199f0:	dc000215 	stw	r16,8(sp)
811199f4:	3021883a 	mov	r16,r6
811199f8:	dc400315 	stw	r17,12(sp)
811199fc:	8022907a 	slli	r17,r16,1
81119a00:	dd000615 	stw	r20,24(sp)
81119a04:	2829883a 	mov	r20,r5
81119a08:	01400044 	movi	r5,1
81119a0c:	dcc00515 	stw	r19,20(sp)
81119a10:	dc800415 	stw	r18,16(sp)
81119a14:	dfc00715 	stw	ra,28(sp)
81119a18:	3825883a 	mov	r18,r7
81119a1c:	8822d57a 	srli	r17,r17,21
81119a20:	1118d580 	call	81118d58 <_Balloc>
81119a24:	1027883a 	mov	r19,r2
81119a28:	00800434 	movhi	r2,16
81119a2c:	10bfffc4 	addi	r2,r2,-1
81119a30:	808c703a 	and	r6,r16,r2
81119a34:	88000126 	beq	r17,zero,81119a3c <__d2b+0x50>
81119a38:	31800434 	orhi	r6,r6,16
81119a3c:	d9800015 	stw	r6,0(sp)
81119a40:	a0002426 	beq	r20,zero,81119ad4 <__d2b+0xe8>
81119a44:	d9000104 	addi	r4,sp,4
81119a48:	dd000115 	stw	r20,4(sp)
81119a4c:	11190b40 	call	811190b4 <__lo0bits>
81119a50:	d8c00017 	ldw	r3,0(sp)
81119a54:	10002f1e 	bne	r2,zero,81119b14 <__d2b+0x128>
81119a58:	d9000117 	ldw	r4,4(sp)
81119a5c:	99000515 	stw	r4,20(r19)
81119a60:	1821003a 	cmpeq	r16,r3,zero
81119a64:	01000084 	movi	r4,2
81119a68:	2421c83a 	sub	r16,r4,r16
81119a6c:	98c00615 	stw	r3,24(r19)
81119a70:	9c000415 	stw	r16,16(r19)
81119a74:	88001f1e 	bne	r17,zero,81119af4 <__d2b+0x108>
81119a78:	10bef384 	addi	r2,r2,-1074
81119a7c:	90800015 	stw	r2,0(r18)
81119a80:	00900034 	movhi	r2,16384
81119a84:	10bfffc4 	addi	r2,r2,-1
81119a88:	8085883a 	add	r2,r16,r2
81119a8c:	1085883a 	add	r2,r2,r2
81119a90:	1085883a 	add	r2,r2,r2
81119a94:	9885883a 	add	r2,r19,r2
81119a98:	11000517 	ldw	r4,20(r2)
81119a9c:	8020917a 	slli	r16,r16,5
81119aa0:	111904c0 	call	8111904c <__hi0bits>
81119aa4:	d8c00817 	ldw	r3,32(sp)
81119aa8:	8085c83a 	sub	r2,r16,r2
81119aac:	18800015 	stw	r2,0(r3)
81119ab0:	9805883a 	mov	r2,r19
81119ab4:	dfc00717 	ldw	ra,28(sp)
81119ab8:	dd000617 	ldw	r20,24(sp)
81119abc:	dcc00517 	ldw	r19,20(sp)
81119ac0:	dc800417 	ldw	r18,16(sp)
81119ac4:	dc400317 	ldw	r17,12(sp)
81119ac8:	dc000217 	ldw	r16,8(sp)
81119acc:	dec00804 	addi	sp,sp,32
81119ad0:	f800283a 	ret
81119ad4:	d809883a 	mov	r4,sp
81119ad8:	11190b40 	call	811190b4 <__lo0bits>
81119adc:	d8c00017 	ldw	r3,0(sp)
81119ae0:	04000044 	movi	r16,1
81119ae4:	9c000415 	stw	r16,16(r19)
81119ae8:	98c00515 	stw	r3,20(r19)
81119aec:	10800804 	addi	r2,r2,32
81119af0:	883fe126 	beq	r17,zero,81119a78 <__reset+0xfb0f9a78>
81119af4:	00c00d44 	movi	r3,53
81119af8:	8c7ef344 	addi	r17,r17,-1075
81119afc:	88a3883a 	add	r17,r17,r2
81119b00:	1885c83a 	sub	r2,r3,r2
81119b04:	d8c00817 	ldw	r3,32(sp)
81119b08:	94400015 	stw	r17,0(r18)
81119b0c:	18800015 	stw	r2,0(r3)
81119b10:	003fe706 	br	81119ab0 <__reset+0xfb0f9ab0>
81119b14:	01000804 	movi	r4,32
81119b18:	2089c83a 	sub	r4,r4,r2
81119b1c:	1908983a 	sll	r4,r3,r4
81119b20:	d9400117 	ldw	r5,4(sp)
81119b24:	1886d83a 	srl	r3,r3,r2
81119b28:	2148b03a 	or	r4,r4,r5
81119b2c:	99000515 	stw	r4,20(r19)
81119b30:	d8c00015 	stw	r3,0(sp)
81119b34:	003fca06 	br	81119a60 <__reset+0xfb0f9a60>

81119b38 <__ratio>:
81119b38:	defff904 	addi	sp,sp,-28
81119b3c:	dc400315 	stw	r17,12(sp)
81119b40:	2823883a 	mov	r17,r5
81119b44:	d9400104 	addi	r5,sp,4
81119b48:	dfc00615 	stw	ra,24(sp)
81119b4c:	dcc00515 	stw	r19,20(sp)
81119b50:	dc800415 	stw	r18,16(sp)
81119b54:	2027883a 	mov	r19,r4
81119b58:	dc000215 	stw	r16,8(sp)
81119b5c:	11198e00 	call	811198e0 <__b2d>
81119b60:	d80b883a 	mov	r5,sp
81119b64:	8809883a 	mov	r4,r17
81119b68:	1025883a 	mov	r18,r2
81119b6c:	1821883a 	mov	r16,r3
81119b70:	11198e00 	call	811198e0 <__b2d>
81119b74:	8a000417 	ldw	r8,16(r17)
81119b78:	99000417 	ldw	r4,16(r19)
81119b7c:	d9400117 	ldw	r5,4(sp)
81119b80:	2209c83a 	sub	r4,r4,r8
81119b84:	2010917a 	slli	r8,r4,5
81119b88:	d9000017 	ldw	r4,0(sp)
81119b8c:	2909c83a 	sub	r4,r5,r4
81119b90:	4109883a 	add	r4,r8,r4
81119b94:	01000e0e 	bge	zero,r4,81119bd0 <__ratio+0x98>
81119b98:	2008953a 	slli	r4,r4,20
81119b9c:	2421883a 	add	r16,r4,r16
81119ba0:	100d883a 	mov	r6,r2
81119ba4:	180f883a 	mov	r7,r3
81119ba8:	9009883a 	mov	r4,r18
81119bac:	800b883a 	mov	r5,r16
81119bb0:	111eb740 	call	8111eb74 <__divdf3>
81119bb4:	dfc00617 	ldw	ra,24(sp)
81119bb8:	dcc00517 	ldw	r19,20(sp)
81119bbc:	dc800417 	ldw	r18,16(sp)
81119bc0:	dc400317 	ldw	r17,12(sp)
81119bc4:	dc000217 	ldw	r16,8(sp)
81119bc8:	dec00704 	addi	sp,sp,28
81119bcc:	f800283a 	ret
81119bd0:	2008953a 	slli	r4,r4,20
81119bd4:	1907c83a 	sub	r3,r3,r4
81119bd8:	003ff106 	br	81119ba0 <__reset+0xfb0f9ba0>

81119bdc <_mprec_log10>:
81119bdc:	defffe04 	addi	sp,sp,-8
81119be0:	dc000015 	stw	r16,0(sp)
81119be4:	dfc00115 	stw	ra,4(sp)
81119be8:	008005c4 	movi	r2,23
81119bec:	2021883a 	mov	r16,r4
81119bf0:	11000d0e 	bge	r2,r4,81119c28 <_mprec_log10+0x4c>
81119bf4:	0005883a 	mov	r2,zero
81119bf8:	00cffc34 	movhi	r3,16368
81119bfc:	843fffc4 	addi	r16,r16,-1
81119c00:	000d883a 	mov	r6,zero
81119c04:	01d00934 	movhi	r7,16420
81119c08:	1009883a 	mov	r4,r2
81119c0c:	180b883a 	mov	r5,r3
81119c10:	110f5200 	call	8110f520 <__muldf3>
81119c14:	803ff91e 	bne	r16,zero,81119bfc <__reset+0xfb0f9bfc>
81119c18:	dfc00117 	ldw	ra,4(sp)
81119c1c:	dc000017 	ldw	r16,0(sp)
81119c20:	dec00204 	addi	sp,sp,8
81119c24:	f800283a 	ret
81119c28:	202090fa 	slli	r16,r4,3
81119c2c:	00a044b4 	movhi	r2,33042
81119c30:	109ae804 	addi	r2,r2,27552
81119c34:	1421883a 	add	r16,r2,r16
81119c38:	80800017 	ldw	r2,0(r16)
81119c3c:	80c00117 	ldw	r3,4(r16)
81119c40:	dfc00117 	ldw	ra,4(sp)
81119c44:	dc000017 	ldw	r16,0(sp)
81119c48:	dec00204 	addi	sp,sp,8
81119c4c:	f800283a 	ret

81119c50 <__copybits>:
81119c50:	297fffc4 	addi	r5,r5,-1
81119c54:	280fd17a 	srai	r7,r5,5
81119c58:	30c00417 	ldw	r3,16(r6)
81119c5c:	30800504 	addi	r2,r6,20
81119c60:	39c00044 	addi	r7,r7,1
81119c64:	18c7883a 	add	r3,r3,r3
81119c68:	39cf883a 	add	r7,r7,r7
81119c6c:	18c7883a 	add	r3,r3,r3
81119c70:	39cf883a 	add	r7,r7,r7
81119c74:	10c7883a 	add	r3,r2,r3
81119c78:	21cf883a 	add	r7,r4,r7
81119c7c:	10c00d2e 	bgeu	r2,r3,81119cb4 <__copybits+0x64>
81119c80:	200b883a 	mov	r5,r4
81119c84:	12000017 	ldw	r8,0(r2)
81119c88:	29400104 	addi	r5,r5,4
81119c8c:	10800104 	addi	r2,r2,4
81119c90:	2a3fff15 	stw	r8,-4(r5)
81119c94:	10fffb36 	bltu	r2,r3,81119c84 <__reset+0xfb0f9c84>
81119c98:	1985c83a 	sub	r2,r3,r6
81119c9c:	10bffac4 	addi	r2,r2,-21
81119ca0:	1004d0ba 	srli	r2,r2,2
81119ca4:	10800044 	addi	r2,r2,1
81119ca8:	1085883a 	add	r2,r2,r2
81119cac:	1085883a 	add	r2,r2,r2
81119cb0:	2089883a 	add	r4,r4,r2
81119cb4:	21c0032e 	bgeu	r4,r7,81119cc4 <__copybits+0x74>
81119cb8:	20000015 	stw	zero,0(r4)
81119cbc:	21000104 	addi	r4,r4,4
81119cc0:	21fffd36 	bltu	r4,r7,81119cb8 <__reset+0xfb0f9cb8>
81119cc4:	f800283a 	ret

81119cc8 <__any_on>:
81119cc8:	20c00417 	ldw	r3,16(r4)
81119ccc:	2805d17a 	srai	r2,r5,5
81119cd0:	21000504 	addi	r4,r4,20
81119cd4:	18800d0e 	bge	r3,r2,81119d0c <__any_on+0x44>
81119cd8:	18c7883a 	add	r3,r3,r3
81119cdc:	18c7883a 	add	r3,r3,r3
81119ce0:	20c7883a 	add	r3,r4,r3
81119ce4:	20c0192e 	bgeu	r4,r3,81119d4c <__any_on+0x84>
81119ce8:	18bfff17 	ldw	r2,-4(r3)
81119cec:	18ffff04 	addi	r3,r3,-4
81119cf0:	1000041e 	bne	r2,zero,81119d04 <__any_on+0x3c>
81119cf4:	20c0142e 	bgeu	r4,r3,81119d48 <__any_on+0x80>
81119cf8:	18ffff04 	addi	r3,r3,-4
81119cfc:	19400017 	ldw	r5,0(r3)
81119d00:	283ffc26 	beq	r5,zero,81119cf4 <__reset+0xfb0f9cf4>
81119d04:	00800044 	movi	r2,1
81119d08:	f800283a 	ret
81119d0c:	10c00a0e 	bge	r2,r3,81119d38 <__any_on+0x70>
81119d10:	1085883a 	add	r2,r2,r2
81119d14:	1085883a 	add	r2,r2,r2
81119d18:	294007cc 	andi	r5,r5,31
81119d1c:	2087883a 	add	r3,r4,r2
81119d20:	283ff026 	beq	r5,zero,81119ce4 <__reset+0xfb0f9ce4>
81119d24:	19800017 	ldw	r6,0(r3)
81119d28:	3144d83a 	srl	r2,r6,r5
81119d2c:	114a983a 	sll	r5,r2,r5
81119d30:	317ff41e 	bne	r6,r5,81119d04 <__reset+0xfb0f9d04>
81119d34:	003feb06 	br	81119ce4 <__reset+0xfb0f9ce4>
81119d38:	1085883a 	add	r2,r2,r2
81119d3c:	1085883a 	add	r2,r2,r2
81119d40:	2087883a 	add	r3,r4,r2
81119d44:	003fe706 	br	81119ce4 <__reset+0xfb0f9ce4>
81119d48:	f800283a 	ret
81119d4c:	0005883a 	mov	r2,zero
81119d50:	f800283a 	ret

81119d54 <_read_r>:
81119d54:	defffd04 	addi	sp,sp,-12
81119d58:	2805883a 	mov	r2,r5
81119d5c:	dc000015 	stw	r16,0(sp)
81119d60:	042044f4 	movhi	r16,33043
81119d64:	dc400115 	stw	r17,4(sp)
81119d68:	300b883a 	mov	r5,r6
81119d6c:	84231f04 	addi	r16,r16,-29572
81119d70:	2023883a 	mov	r17,r4
81119d74:	380d883a 	mov	r6,r7
81119d78:	1009883a 	mov	r4,r2
81119d7c:	dfc00215 	stw	ra,8(sp)
81119d80:	80000015 	stw	zero,0(r16)
81119d84:	1120be40 	call	81120be4 <read>
81119d88:	00ffffc4 	movi	r3,-1
81119d8c:	10c00526 	beq	r2,r3,81119da4 <_read_r+0x50>
81119d90:	dfc00217 	ldw	ra,8(sp)
81119d94:	dc400117 	ldw	r17,4(sp)
81119d98:	dc000017 	ldw	r16,0(sp)
81119d9c:	dec00304 	addi	sp,sp,12
81119da0:	f800283a 	ret
81119da4:	80c00017 	ldw	r3,0(r16)
81119da8:	183ff926 	beq	r3,zero,81119d90 <__reset+0xfb0f9d90>
81119dac:	88c00015 	stw	r3,0(r17)
81119db0:	003ff706 	br	81119d90 <__reset+0xfb0f9d90>

81119db4 <_realloc_r>:
81119db4:	defff604 	addi	sp,sp,-40
81119db8:	dc800215 	stw	r18,8(sp)
81119dbc:	dfc00915 	stw	ra,36(sp)
81119dc0:	df000815 	stw	fp,32(sp)
81119dc4:	ddc00715 	stw	r23,28(sp)
81119dc8:	dd800615 	stw	r22,24(sp)
81119dcc:	dd400515 	stw	r21,20(sp)
81119dd0:	dd000415 	stw	r20,16(sp)
81119dd4:	dcc00315 	stw	r19,12(sp)
81119dd8:	dc400115 	stw	r17,4(sp)
81119ddc:	dc000015 	stw	r16,0(sp)
81119de0:	3025883a 	mov	r18,r6
81119de4:	2800b726 	beq	r5,zero,8111a0c4 <_realloc_r+0x310>
81119de8:	282b883a 	mov	r21,r5
81119dec:	2029883a 	mov	r20,r4
81119df0:	112090c0 	call	8112090c <__malloc_lock>
81119df4:	a8bfff17 	ldw	r2,-4(r21)
81119df8:	043fff04 	movi	r16,-4
81119dfc:	90c002c4 	addi	r3,r18,11
81119e00:	01000584 	movi	r4,22
81119e04:	acfffe04 	addi	r19,r21,-8
81119e08:	1420703a 	and	r16,r2,r16
81119e0c:	20c0332e 	bgeu	r4,r3,81119edc <_realloc_r+0x128>
81119e10:	047ffe04 	movi	r17,-8
81119e14:	1c62703a 	and	r17,r3,r17
81119e18:	8807883a 	mov	r3,r17
81119e1c:	88005816 	blt	r17,zero,81119f80 <_realloc_r+0x1cc>
81119e20:	8c805736 	bltu	r17,r18,81119f80 <_realloc_r+0x1cc>
81119e24:	80c0300e 	bge	r16,r3,81119ee8 <_realloc_r+0x134>
81119e28:	072044b4 	movhi	fp,33042
81119e2c:	e71cdf04 	addi	fp,fp,29564
81119e30:	e1c00217 	ldw	r7,8(fp)
81119e34:	9c09883a 	add	r4,r19,r16
81119e38:	22000117 	ldw	r8,4(r4)
81119e3c:	21c06326 	beq	r4,r7,81119fcc <_realloc_r+0x218>
81119e40:	017fff84 	movi	r5,-2
81119e44:	414a703a 	and	r5,r8,r5
81119e48:	214b883a 	add	r5,r4,r5
81119e4c:	29800117 	ldw	r6,4(r5)
81119e50:	3180004c 	andi	r6,r6,1
81119e54:	30003f26 	beq	r6,zero,81119f54 <_realloc_r+0x1a0>
81119e58:	1080004c 	andi	r2,r2,1
81119e5c:	10008326 	beq	r2,zero,8111a06c <_realloc_r+0x2b8>
81119e60:	900b883a 	mov	r5,r18
81119e64:	a009883a 	mov	r4,r20
81119e68:	111093c0 	call	8111093c <_malloc_r>
81119e6c:	1025883a 	mov	r18,r2
81119e70:	10011e26 	beq	r2,zero,8111a2ec <_realloc_r+0x538>
81119e74:	a93fff17 	ldw	r4,-4(r21)
81119e78:	10fffe04 	addi	r3,r2,-8
81119e7c:	00bfff84 	movi	r2,-2
81119e80:	2084703a 	and	r2,r4,r2
81119e84:	9885883a 	add	r2,r19,r2
81119e88:	1880ee26 	beq	r3,r2,8111a244 <_realloc_r+0x490>
81119e8c:	81bfff04 	addi	r6,r16,-4
81119e90:	00800904 	movi	r2,36
81119e94:	1180b836 	bltu	r2,r6,8111a178 <_realloc_r+0x3c4>
81119e98:	00c004c4 	movi	r3,19
81119e9c:	19809636 	bltu	r3,r6,8111a0f8 <_realloc_r+0x344>
81119ea0:	9005883a 	mov	r2,r18
81119ea4:	a807883a 	mov	r3,r21
81119ea8:	19000017 	ldw	r4,0(r3)
81119eac:	11000015 	stw	r4,0(r2)
81119eb0:	19000117 	ldw	r4,4(r3)
81119eb4:	11000115 	stw	r4,4(r2)
81119eb8:	18c00217 	ldw	r3,8(r3)
81119ebc:	10c00215 	stw	r3,8(r2)
81119ec0:	a80b883a 	mov	r5,r21
81119ec4:	a009883a 	mov	r4,r20
81119ec8:	11180340 	call	81118034 <_free_r>
81119ecc:	a009883a 	mov	r4,r20
81119ed0:	11209300 	call	81120930 <__malloc_unlock>
81119ed4:	9005883a 	mov	r2,r18
81119ed8:	00001206 	br	81119f24 <_realloc_r+0x170>
81119edc:	00c00404 	movi	r3,16
81119ee0:	1823883a 	mov	r17,r3
81119ee4:	003fce06 	br	81119e20 <__reset+0xfb0f9e20>
81119ee8:	a825883a 	mov	r18,r21
81119eec:	8445c83a 	sub	r2,r16,r17
81119ef0:	00c003c4 	movi	r3,15
81119ef4:	18802636 	bltu	r3,r2,81119f90 <_realloc_r+0x1dc>
81119ef8:	99800117 	ldw	r6,4(r19)
81119efc:	9c07883a 	add	r3,r19,r16
81119f00:	3180004c 	andi	r6,r6,1
81119f04:	3420b03a 	or	r16,r6,r16
81119f08:	9c000115 	stw	r16,4(r19)
81119f0c:	18800117 	ldw	r2,4(r3)
81119f10:	10800054 	ori	r2,r2,1
81119f14:	18800115 	stw	r2,4(r3)
81119f18:	a009883a 	mov	r4,r20
81119f1c:	11209300 	call	81120930 <__malloc_unlock>
81119f20:	9005883a 	mov	r2,r18
81119f24:	dfc00917 	ldw	ra,36(sp)
81119f28:	df000817 	ldw	fp,32(sp)
81119f2c:	ddc00717 	ldw	r23,28(sp)
81119f30:	dd800617 	ldw	r22,24(sp)
81119f34:	dd400517 	ldw	r21,20(sp)
81119f38:	dd000417 	ldw	r20,16(sp)
81119f3c:	dcc00317 	ldw	r19,12(sp)
81119f40:	dc800217 	ldw	r18,8(sp)
81119f44:	dc400117 	ldw	r17,4(sp)
81119f48:	dc000017 	ldw	r16,0(sp)
81119f4c:	dec00a04 	addi	sp,sp,40
81119f50:	f800283a 	ret
81119f54:	017fff04 	movi	r5,-4
81119f58:	414a703a 	and	r5,r8,r5
81119f5c:	814d883a 	add	r6,r16,r5
81119f60:	30c01f16 	blt	r6,r3,81119fe0 <_realloc_r+0x22c>
81119f64:	20800317 	ldw	r2,12(r4)
81119f68:	20c00217 	ldw	r3,8(r4)
81119f6c:	a825883a 	mov	r18,r21
81119f70:	3021883a 	mov	r16,r6
81119f74:	18800315 	stw	r2,12(r3)
81119f78:	10c00215 	stw	r3,8(r2)
81119f7c:	003fdb06 	br	81119eec <__reset+0xfb0f9eec>
81119f80:	00800304 	movi	r2,12
81119f84:	a0800015 	stw	r2,0(r20)
81119f88:	0005883a 	mov	r2,zero
81119f8c:	003fe506 	br	81119f24 <__reset+0xfb0f9f24>
81119f90:	98c00117 	ldw	r3,4(r19)
81119f94:	9c4b883a 	add	r5,r19,r17
81119f98:	11000054 	ori	r4,r2,1
81119f9c:	18c0004c 	andi	r3,r3,1
81119fa0:	1c62b03a 	or	r17,r3,r17
81119fa4:	9c400115 	stw	r17,4(r19)
81119fa8:	29000115 	stw	r4,4(r5)
81119fac:	2885883a 	add	r2,r5,r2
81119fb0:	10c00117 	ldw	r3,4(r2)
81119fb4:	29400204 	addi	r5,r5,8
81119fb8:	a009883a 	mov	r4,r20
81119fbc:	18c00054 	ori	r3,r3,1
81119fc0:	10c00115 	stw	r3,4(r2)
81119fc4:	11180340 	call	81118034 <_free_r>
81119fc8:	003fd306 	br	81119f18 <__reset+0xfb0f9f18>
81119fcc:	017fff04 	movi	r5,-4
81119fd0:	414a703a 	and	r5,r8,r5
81119fd4:	89800404 	addi	r6,r17,16
81119fd8:	8151883a 	add	r8,r16,r5
81119fdc:	4180590e 	bge	r8,r6,8111a144 <_realloc_r+0x390>
81119fe0:	1080004c 	andi	r2,r2,1
81119fe4:	103f9e1e 	bne	r2,zero,81119e60 <__reset+0xfb0f9e60>
81119fe8:	adbffe17 	ldw	r22,-8(r21)
81119fec:	00bfff04 	movi	r2,-4
81119ff0:	9dadc83a 	sub	r22,r19,r22
81119ff4:	b1800117 	ldw	r6,4(r22)
81119ff8:	3084703a 	and	r2,r6,r2
81119ffc:	20002026 	beq	r4,zero,8111a080 <_realloc_r+0x2cc>
8111a000:	80af883a 	add	r23,r16,r2
8111a004:	b96f883a 	add	r23,r23,r5
8111a008:	21c05f26 	beq	r4,r7,8111a188 <_realloc_r+0x3d4>
8111a00c:	b8c01c16 	blt	r23,r3,8111a080 <_realloc_r+0x2cc>
8111a010:	20800317 	ldw	r2,12(r4)
8111a014:	20c00217 	ldw	r3,8(r4)
8111a018:	81bfff04 	addi	r6,r16,-4
8111a01c:	01000904 	movi	r4,36
8111a020:	18800315 	stw	r2,12(r3)
8111a024:	10c00215 	stw	r3,8(r2)
8111a028:	b0c00217 	ldw	r3,8(r22)
8111a02c:	b0800317 	ldw	r2,12(r22)
8111a030:	b4800204 	addi	r18,r22,8
8111a034:	18800315 	stw	r2,12(r3)
8111a038:	10c00215 	stw	r3,8(r2)
8111a03c:	21801b36 	bltu	r4,r6,8111a0ac <_realloc_r+0x2f8>
8111a040:	008004c4 	movi	r2,19
8111a044:	1180352e 	bgeu	r2,r6,8111a11c <_realloc_r+0x368>
8111a048:	a8800017 	ldw	r2,0(r21)
8111a04c:	b0800215 	stw	r2,8(r22)
8111a050:	a8800117 	ldw	r2,4(r21)
8111a054:	b0800315 	stw	r2,12(r22)
8111a058:	008006c4 	movi	r2,27
8111a05c:	11807f36 	bltu	r2,r6,8111a25c <_realloc_r+0x4a8>
8111a060:	b0800404 	addi	r2,r22,16
8111a064:	ad400204 	addi	r21,r21,8
8111a068:	00002d06 	br	8111a120 <_realloc_r+0x36c>
8111a06c:	adbffe17 	ldw	r22,-8(r21)
8111a070:	00bfff04 	movi	r2,-4
8111a074:	9dadc83a 	sub	r22,r19,r22
8111a078:	b1000117 	ldw	r4,4(r22)
8111a07c:	2084703a 	and	r2,r4,r2
8111a080:	b03f7726 	beq	r22,zero,81119e60 <__reset+0xfb0f9e60>
8111a084:	80af883a 	add	r23,r16,r2
8111a088:	b8ff7516 	blt	r23,r3,81119e60 <__reset+0xfb0f9e60>
8111a08c:	b0800317 	ldw	r2,12(r22)
8111a090:	b0c00217 	ldw	r3,8(r22)
8111a094:	81bfff04 	addi	r6,r16,-4
8111a098:	01000904 	movi	r4,36
8111a09c:	18800315 	stw	r2,12(r3)
8111a0a0:	10c00215 	stw	r3,8(r2)
8111a0a4:	b4800204 	addi	r18,r22,8
8111a0a8:	21bfe52e 	bgeu	r4,r6,8111a040 <__reset+0xfb0fa040>
8111a0ac:	a80b883a 	mov	r5,r21
8111a0b0:	9009883a 	mov	r4,r18
8111a0b4:	1118bfc0 	call	81118bfc <memmove>
8111a0b8:	b821883a 	mov	r16,r23
8111a0bc:	b027883a 	mov	r19,r22
8111a0c0:	003f8a06 	br	81119eec <__reset+0xfb0f9eec>
8111a0c4:	300b883a 	mov	r5,r6
8111a0c8:	dfc00917 	ldw	ra,36(sp)
8111a0cc:	df000817 	ldw	fp,32(sp)
8111a0d0:	ddc00717 	ldw	r23,28(sp)
8111a0d4:	dd800617 	ldw	r22,24(sp)
8111a0d8:	dd400517 	ldw	r21,20(sp)
8111a0dc:	dd000417 	ldw	r20,16(sp)
8111a0e0:	dcc00317 	ldw	r19,12(sp)
8111a0e4:	dc800217 	ldw	r18,8(sp)
8111a0e8:	dc400117 	ldw	r17,4(sp)
8111a0ec:	dc000017 	ldw	r16,0(sp)
8111a0f0:	dec00a04 	addi	sp,sp,40
8111a0f4:	111093c1 	jmpi	8111093c <_malloc_r>
8111a0f8:	a8c00017 	ldw	r3,0(r21)
8111a0fc:	90c00015 	stw	r3,0(r18)
8111a100:	a8c00117 	ldw	r3,4(r21)
8111a104:	90c00115 	stw	r3,4(r18)
8111a108:	00c006c4 	movi	r3,27
8111a10c:	19804536 	bltu	r3,r6,8111a224 <_realloc_r+0x470>
8111a110:	90800204 	addi	r2,r18,8
8111a114:	a8c00204 	addi	r3,r21,8
8111a118:	003f6306 	br	81119ea8 <__reset+0xfb0f9ea8>
8111a11c:	9005883a 	mov	r2,r18
8111a120:	a8c00017 	ldw	r3,0(r21)
8111a124:	b821883a 	mov	r16,r23
8111a128:	b027883a 	mov	r19,r22
8111a12c:	10c00015 	stw	r3,0(r2)
8111a130:	a8c00117 	ldw	r3,4(r21)
8111a134:	10c00115 	stw	r3,4(r2)
8111a138:	a8c00217 	ldw	r3,8(r21)
8111a13c:	10c00215 	stw	r3,8(r2)
8111a140:	003f6a06 	br	81119eec <__reset+0xfb0f9eec>
8111a144:	9c67883a 	add	r19,r19,r17
8111a148:	4445c83a 	sub	r2,r8,r17
8111a14c:	e4c00215 	stw	r19,8(fp)
8111a150:	10800054 	ori	r2,r2,1
8111a154:	98800115 	stw	r2,4(r19)
8111a158:	a8bfff17 	ldw	r2,-4(r21)
8111a15c:	a009883a 	mov	r4,r20
8111a160:	1080004c 	andi	r2,r2,1
8111a164:	1462b03a 	or	r17,r2,r17
8111a168:	ac7fff15 	stw	r17,-4(r21)
8111a16c:	11209300 	call	81120930 <__malloc_unlock>
8111a170:	a805883a 	mov	r2,r21
8111a174:	003f6b06 	br	81119f24 <__reset+0xfb0f9f24>
8111a178:	a80b883a 	mov	r5,r21
8111a17c:	9009883a 	mov	r4,r18
8111a180:	1118bfc0 	call	81118bfc <memmove>
8111a184:	003f4e06 	br	81119ec0 <__reset+0xfb0f9ec0>
8111a188:	89000404 	addi	r4,r17,16
8111a18c:	b93fbc16 	blt	r23,r4,8111a080 <__reset+0xfb0fa080>
8111a190:	b0800317 	ldw	r2,12(r22)
8111a194:	b0c00217 	ldw	r3,8(r22)
8111a198:	81bfff04 	addi	r6,r16,-4
8111a19c:	01000904 	movi	r4,36
8111a1a0:	18800315 	stw	r2,12(r3)
8111a1a4:	10c00215 	stw	r3,8(r2)
8111a1a8:	b4800204 	addi	r18,r22,8
8111a1ac:	21804336 	bltu	r4,r6,8111a2bc <_realloc_r+0x508>
8111a1b0:	008004c4 	movi	r2,19
8111a1b4:	11803f2e 	bgeu	r2,r6,8111a2b4 <_realloc_r+0x500>
8111a1b8:	a8800017 	ldw	r2,0(r21)
8111a1bc:	b0800215 	stw	r2,8(r22)
8111a1c0:	a8800117 	ldw	r2,4(r21)
8111a1c4:	b0800315 	stw	r2,12(r22)
8111a1c8:	008006c4 	movi	r2,27
8111a1cc:	11803f36 	bltu	r2,r6,8111a2cc <_realloc_r+0x518>
8111a1d0:	b0800404 	addi	r2,r22,16
8111a1d4:	ad400204 	addi	r21,r21,8
8111a1d8:	a8c00017 	ldw	r3,0(r21)
8111a1dc:	10c00015 	stw	r3,0(r2)
8111a1e0:	a8c00117 	ldw	r3,4(r21)
8111a1e4:	10c00115 	stw	r3,4(r2)
8111a1e8:	a8c00217 	ldw	r3,8(r21)
8111a1ec:	10c00215 	stw	r3,8(r2)
8111a1f0:	b447883a 	add	r3,r22,r17
8111a1f4:	bc45c83a 	sub	r2,r23,r17
8111a1f8:	e0c00215 	stw	r3,8(fp)
8111a1fc:	10800054 	ori	r2,r2,1
8111a200:	18800115 	stw	r2,4(r3)
8111a204:	b0800117 	ldw	r2,4(r22)
8111a208:	a009883a 	mov	r4,r20
8111a20c:	1080004c 	andi	r2,r2,1
8111a210:	1462b03a 	or	r17,r2,r17
8111a214:	b4400115 	stw	r17,4(r22)
8111a218:	11209300 	call	81120930 <__malloc_unlock>
8111a21c:	9005883a 	mov	r2,r18
8111a220:	003f4006 	br	81119f24 <__reset+0xfb0f9f24>
8111a224:	a8c00217 	ldw	r3,8(r21)
8111a228:	90c00215 	stw	r3,8(r18)
8111a22c:	a8c00317 	ldw	r3,12(r21)
8111a230:	90c00315 	stw	r3,12(r18)
8111a234:	30801126 	beq	r6,r2,8111a27c <_realloc_r+0x4c8>
8111a238:	90800404 	addi	r2,r18,16
8111a23c:	a8c00404 	addi	r3,r21,16
8111a240:	003f1906 	br	81119ea8 <__reset+0xfb0f9ea8>
8111a244:	90ffff17 	ldw	r3,-4(r18)
8111a248:	00bfff04 	movi	r2,-4
8111a24c:	a825883a 	mov	r18,r21
8111a250:	1884703a 	and	r2,r3,r2
8111a254:	80a1883a 	add	r16,r16,r2
8111a258:	003f2406 	br	81119eec <__reset+0xfb0f9eec>
8111a25c:	a8800217 	ldw	r2,8(r21)
8111a260:	b0800415 	stw	r2,16(r22)
8111a264:	a8800317 	ldw	r2,12(r21)
8111a268:	b0800515 	stw	r2,20(r22)
8111a26c:	31000a26 	beq	r6,r4,8111a298 <_realloc_r+0x4e4>
8111a270:	b0800604 	addi	r2,r22,24
8111a274:	ad400404 	addi	r21,r21,16
8111a278:	003fa906 	br	8111a120 <__reset+0xfb0fa120>
8111a27c:	a9000417 	ldw	r4,16(r21)
8111a280:	90800604 	addi	r2,r18,24
8111a284:	a8c00604 	addi	r3,r21,24
8111a288:	91000415 	stw	r4,16(r18)
8111a28c:	a9000517 	ldw	r4,20(r21)
8111a290:	91000515 	stw	r4,20(r18)
8111a294:	003f0406 	br	81119ea8 <__reset+0xfb0f9ea8>
8111a298:	a8c00417 	ldw	r3,16(r21)
8111a29c:	ad400604 	addi	r21,r21,24
8111a2a0:	b0800804 	addi	r2,r22,32
8111a2a4:	b0c00615 	stw	r3,24(r22)
8111a2a8:	a8ffff17 	ldw	r3,-4(r21)
8111a2ac:	b0c00715 	stw	r3,28(r22)
8111a2b0:	003f9b06 	br	8111a120 <__reset+0xfb0fa120>
8111a2b4:	9005883a 	mov	r2,r18
8111a2b8:	003fc706 	br	8111a1d8 <__reset+0xfb0fa1d8>
8111a2bc:	a80b883a 	mov	r5,r21
8111a2c0:	9009883a 	mov	r4,r18
8111a2c4:	1118bfc0 	call	81118bfc <memmove>
8111a2c8:	003fc906 	br	8111a1f0 <__reset+0xfb0fa1f0>
8111a2cc:	a8800217 	ldw	r2,8(r21)
8111a2d0:	b0800415 	stw	r2,16(r22)
8111a2d4:	a8800317 	ldw	r2,12(r21)
8111a2d8:	b0800515 	stw	r2,20(r22)
8111a2dc:	31000726 	beq	r6,r4,8111a2fc <_realloc_r+0x548>
8111a2e0:	b0800604 	addi	r2,r22,24
8111a2e4:	ad400404 	addi	r21,r21,16
8111a2e8:	003fbb06 	br	8111a1d8 <__reset+0xfb0fa1d8>
8111a2ec:	a009883a 	mov	r4,r20
8111a2f0:	11209300 	call	81120930 <__malloc_unlock>
8111a2f4:	0005883a 	mov	r2,zero
8111a2f8:	003f0a06 	br	81119f24 <__reset+0xfb0f9f24>
8111a2fc:	a8c00417 	ldw	r3,16(r21)
8111a300:	ad400604 	addi	r21,r21,24
8111a304:	b0800804 	addi	r2,r22,32
8111a308:	b0c00615 	stw	r3,24(r22)
8111a30c:	a8ffff17 	ldw	r3,-4(r21)
8111a310:	b0c00715 	stw	r3,28(r22)
8111a314:	003fb006 	br	8111a1d8 <__reset+0xfb0fa1d8>

8111a318 <__fpclassifyd>:
8111a318:	00a00034 	movhi	r2,32768
8111a31c:	10bfffc4 	addi	r2,r2,-1
8111a320:	2884703a 	and	r2,r5,r2
8111a324:	10000726 	beq	r2,zero,8111a344 <__fpclassifyd+0x2c>
8111a328:	00fffc34 	movhi	r3,65520
8111a32c:	019ff834 	movhi	r6,32736
8111a330:	28c7883a 	add	r3,r5,r3
8111a334:	31bfffc4 	addi	r6,r6,-1
8111a338:	30c00536 	bltu	r6,r3,8111a350 <__fpclassifyd+0x38>
8111a33c:	00800104 	movi	r2,4
8111a340:	f800283a 	ret
8111a344:	2000021e 	bne	r4,zero,8111a350 <__fpclassifyd+0x38>
8111a348:	00800084 	movi	r2,2
8111a34c:	f800283a 	ret
8111a350:	00dffc34 	movhi	r3,32752
8111a354:	019ff834 	movhi	r6,32736
8111a358:	28cb883a 	add	r5,r5,r3
8111a35c:	31bfffc4 	addi	r6,r6,-1
8111a360:	317ff62e 	bgeu	r6,r5,8111a33c <__reset+0xfb0fa33c>
8111a364:	01400434 	movhi	r5,16
8111a368:	297fffc4 	addi	r5,r5,-1
8111a36c:	28800236 	bltu	r5,r2,8111a378 <__fpclassifyd+0x60>
8111a370:	008000c4 	movi	r2,3
8111a374:	f800283a 	ret
8111a378:	10c00226 	beq	r2,r3,8111a384 <__fpclassifyd+0x6c>
8111a37c:	0005883a 	mov	r2,zero
8111a380:	f800283a 	ret
8111a384:	2005003a 	cmpeq	r2,r4,zero
8111a388:	f800283a 	ret

8111a38c <strcmp>:
8111a38c:	2144b03a 	or	r2,r4,r5
8111a390:	108000cc 	andi	r2,r2,3
8111a394:	1000171e 	bne	r2,zero,8111a3f4 <strcmp+0x68>
8111a398:	20800017 	ldw	r2,0(r4)
8111a39c:	28c00017 	ldw	r3,0(r5)
8111a3a0:	10c0141e 	bne	r2,r3,8111a3f4 <strcmp+0x68>
8111a3a4:	027fbff4 	movhi	r9,65279
8111a3a8:	4a7fbfc4 	addi	r9,r9,-257
8111a3ac:	0086303a 	nor	r3,zero,r2
8111a3b0:	02202074 	movhi	r8,32897
8111a3b4:	1245883a 	add	r2,r2,r9
8111a3b8:	42202004 	addi	r8,r8,-32640
8111a3bc:	10c4703a 	and	r2,r2,r3
8111a3c0:	1204703a 	and	r2,r2,r8
8111a3c4:	10000226 	beq	r2,zero,8111a3d0 <strcmp+0x44>
8111a3c8:	00002306 	br	8111a458 <strcmp+0xcc>
8111a3cc:	1000221e 	bne	r2,zero,8111a458 <strcmp+0xcc>
8111a3d0:	21000104 	addi	r4,r4,4
8111a3d4:	20c00017 	ldw	r3,0(r4)
8111a3d8:	29400104 	addi	r5,r5,4
8111a3dc:	29800017 	ldw	r6,0(r5)
8111a3e0:	1a4f883a 	add	r7,r3,r9
8111a3e4:	00c4303a 	nor	r2,zero,r3
8111a3e8:	3884703a 	and	r2,r7,r2
8111a3ec:	1204703a 	and	r2,r2,r8
8111a3f0:	19bff626 	beq	r3,r6,8111a3cc <__reset+0xfb0fa3cc>
8111a3f4:	20800003 	ldbu	r2,0(r4)
8111a3f8:	10c03fcc 	andi	r3,r2,255
8111a3fc:	18c0201c 	xori	r3,r3,128
8111a400:	18ffe004 	addi	r3,r3,-128
8111a404:	18000c26 	beq	r3,zero,8111a438 <strcmp+0xac>
8111a408:	29800007 	ldb	r6,0(r5)
8111a40c:	19800326 	beq	r3,r6,8111a41c <strcmp+0x90>
8111a410:	00001306 	br	8111a460 <strcmp+0xd4>
8111a414:	29800007 	ldb	r6,0(r5)
8111a418:	11800b1e 	bne	r2,r6,8111a448 <strcmp+0xbc>
8111a41c:	21000044 	addi	r4,r4,1
8111a420:	20c00003 	ldbu	r3,0(r4)
8111a424:	29400044 	addi	r5,r5,1
8111a428:	18803fcc 	andi	r2,r3,255
8111a42c:	1080201c 	xori	r2,r2,128
8111a430:	10bfe004 	addi	r2,r2,-128
8111a434:	103ff71e 	bne	r2,zero,8111a414 <__reset+0xfb0fa414>
8111a438:	0007883a 	mov	r3,zero
8111a43c:	28800003 	ldbu	r2,0(r5)
8111a440:	1885c83a 	sub	r2,r3,r2
8111a444:	f800283a 	ret
8111a448:	28800003 	ldbu	r2,0(r5)
8111a44c:	18c03fcc 	andi	r3,r3,255
8111a450:	1885c83a 	sub	r2,r3,r2
8111a454:	f800283a 	ret
8111a458:	0005883a 	mov	r2,zero
8111a45c:	f800283a 	ret
8111a460:	10c03fcc 	andi	r3,r2,255
8111a464:	003ff506 	br	8111a43c <__reset+0xfb0fa43c>

8111a468 <strlen>:
8111a468:	208000cc 	andi	r2,r4,3
8111a46c:	10002026 	beq	r2,zero,8111a4f0 <strlen+0x88>
8111a470:	20800007 	ldb	r2,0(r4)
8111a474:	10002026 	beq	r2,zero,8111a4f8 <strlen+0x90>
8111a478:	2005883a 	mov	r2,r4
8111a47c:	00000206 	br	8111a488 <strlen+0x20>
8111a480:	10c00007 	ldb	r3,0(r2)
8111a484:	18001826 	beq	r3,zero,8111a4e8 <strlen+0x80>
8111a488:	10800044 	addi	r2,r2,1
8111a48c:	10c000cc 	andi	r3,r2,3
8111a490:	183ffb1e 	bne	r3,zero,8111a480 <__reset+0xfb0fa480>
8111a494:	10c00017 	ldw	r3,0(r2)
8111a498:	01ffbff4 	movhi	r7,65279
8111a49c:	39ffbfc4 	addi	r7,r7,-257
8111a4a0:	00ca303a 	nor	r5,zero,r3
8111a4a4:	01a02074 	movhi	r6,32897
8111a4a8:	19c7883a 	add	r3,r3,r7
8111a4ac:	31a02004 	addi	r6,r6,-32640
8111a4b0:	1946703a 	and	r3,r3,r5
8111a4b4:	1986703a 	and	r3,r3,r6
8111a4b8:	1800091e 	bne	r3,zero,8111a4e0 <strlen+0x78>
8111a4bc:	10800104 	addi	r2,r2,4
8111a4c0:	10c00017 	ldw	r3,0(r2)
8111a4c4:	19cb883a 	add	r5,r3,r7
8111a4c8:	00c6303a 	nor	r3,zero,r3
8111a4cc:	28c6703a 	and	r3,r5,r3
8111a4d0:	1986703a 	and	r3,r3,r6
8111a4d4:	183ff926 	beq	r3,zero,8111a4bc <__reset+0xfb0fa4bc>
8111a4d8:	00000106 	br	8111a4e0 <strlen+0x78>
8111a4dc:	10800044 	addi	r2,r2,1
8111a4e0:	10c00007 	ldb	r3,0(r2)
8111a4e4:	183ffd1e 	bne	r3,zero,8111a4dc <__reset+0xfb0fa4dc>
8111a4e8:	1105c83a 	sub	r2,r2,r4
8111a4ec:	f800283a 	ret
8111a4f0:	2005883a 	mov	r2,r4
8111a4f4:	003fe706 	br	8111a494 <__reset+0xfb0fa494>
8111a4f8:	0005883a 	mov	r2,zero
8111a4fc:	f800283a 	ret

8111a500 <__ssprint_r>:
8111a500:	30800217 	ldw	r2,8(r6)
8111a504:	defff604 	addi	sp,sp,-40
8111a508:	dc800215 	stw	r18,8(sp)
8111a50c:	dfc00915 	stw	ra,36(sp)
8111a510:	df000815 	stw	fp,32(sp)
8111a514:	ddc00715 	stw	r23,28(sp)
8111a518:	dd800615 	stw	r22,24(sp)
8111a51c:	dd400515 	stw	r21,20(sp)
8111a520:	dd000415 	stw	r20,16(sp)
8111a524:	dcc00315 	stw	r19,12(sp)
8111a528:	dc400115 	stw	r17,4(sp)
8111a52c:	dc000015 	stw	r16,0(sp)
8111a530:	3025883a 	mov	r18,r6
8111a534:	10005826 	beq	r2,zero,8111a698 <__ssprint_r+0x198>
8111a538:	2027883a 	mov	r19,r4
8111a53c:	35c00017 	ldw	r23,0(r6)
8111a540:	29000017 	ldw	r4,0(r5)
8111a544:	28800217 	ldw	r2,8(r5)
8111a548:	2823883a 	mov	r17,r5
8111a54c:	0039883a 	mov	fp,zero
8111a550:	0021883a 	mov	r16,zero
8111a554:	80003926 	beq	r16,zero,8111a63c <__ssprint_r+0x13c>
8111a558:	102b883a 	mov	r21,r2
8111a55c:	102d883a 	mov	r22,r2
8111a560:	80803a36 	bltu	r16,r2,8111a64c <__ssprint_r+0x14c>
8111a564:	88c0030b 	ldhu	r3,12(r17)
8111a568:	1881200c 	andi	r2,r3,1152
8111a56c:	10002626 	beq	r2,zero,8111a608 <__ssprint_r+0x108>
8111a570:	88800517 	ldw	r2,20(r17)
8111a574:	89400417 	ldw	r5,16(r17)
8111a578:	81800044 	addi	r6,r16,1
8111a57c:	108f883a 	add	r7,r2,r2
8111a580:	3885883a 	add	r2,r7,r2
8111a584:	100ed7fa 	srli	r7,r2,31
8111a588:	216dc83a 	sub	r22,r4,r5
8111a58c:	3589883a 	add	r4,r6,r22
8111a590:	3885883a 	add	r2,r7,r2
8111a594:	102bd07a 	srai	r21,r2,1
8111a598:	a80d883a 	mov	r6,r21
8111a59c:	a900022e 	bgeu	r21,r4,8111a5a8 <__ssprint_r+0xa8>
8111a5a0:	202b883a 	mov	r21,r4
8111a5a4:	200d883a 	mov	r6,r4
8111a5a8:	18c1000c 	andi	r3,r3,1024
8111a5ac:	18002a26 	beq	r3,zero,8111a658 <__ssprint_r+0x158>
8111a5b0:	300b883a 	mov	r5,r6
8111a5b4:	9809883a 	mov	r4,r19
8111a5b8:	111093c0 	call	8111093c <_malloc_r>
8111a5bc:	1029883a 	mov	r20,r2
8111a5c0:	10002c26 	beq	r2,zero,8111a674 <__ssprint_r+0x174>
8111a5c4:	89400417 	ldw	r5,16(r17)
8111a5c8:	b00d883a 	mov	r6,r22
8111a5cc:	1009883a 	mov	r4,r2
8111a5d0:	11111480 	call	81111148 <memcpy>
8111a5d4:	8880030b 	ldhu	r2,12(r17)
8111a5d8:	00fedfc4 	movi	r3,-1153
8111a5dc:	10c4703a 	and	r2,r2,r3
8111a5e0:	10802014 	ori	r2,r2,128
8111a5e4:	8880030d 	sth	r2,12(r17)
8111a5e8:	a589883a 	add	r4,r20,r22
8111a5ec:	adadc83a 	sub	r22,r21,r22
8111a5f0:	8d400515 	stw	r21,20(r17)
8111a5f4:	8d800215 	stw	r22,8(r17)
8111a5f8:	8d000415 	stw	r20,16(r17)
8111a5fc:	89000015 	stw	r4,0(r17)
8111a600:	802b883a 	mov	r21,r16
8111a604:	802d883a 	mov	r22,r16
8111a608:	b00d883a 	mov	r6,r22
8111a60c:	e00b883a 	mov	r5,fp
8111a610:	1118bfc0 	call	81118bfc <memmove>
8111a614:	88800217 	ldw	r2,8(r17)
8111a618:	89000017 	ldw	r4,0(r17)
8111a61c:	90c00217 	ldw	r3,8(r18)
8111a620:	1545c83a 	sub	r2,r2,r21
8111a624:	2589883a 	add	r4,r4,r22
8111a628:	88800215 	stw	r2,8(r17)
8111a62c:	89000015 	stw	r4,0(r17)
8111a630:	1c21c83a 	sub	r16,r3,r16
8111a634:	94000215 	stw	r16,8(r18)
8111a638:	80001726 	beq	r16,zero,8111a698 <__ssprint_r+0x198>
8111a63c:	bf000017 	ldw	fp,0(r23)
8111a640:	bc000117 	ldw	r16,4(r23)
8111a644:	bdc00204 	addi	r23,r23,8
8111a648:	003fc206 	br	8111a554 <__reset+0xfb0fa554>
8111a64c:	802b883a 	mov	r21,r16
8111a650:	802d883a 	mov	r22,r16
8111a654:	003fec06 	br	8111a608 <__reset+0xfb0fa608>
8111a658:	9809883a 	mov	r4,r19
8111a65c:	1119db40 	call	81119db4 <_realloc_r>
8111a660:	1029883a 	mov	r20,r2
8111a664:	103fe01e 	bne	r2,zero,8111a5e8 <__reset+0xfb0fa5e8>
8111a668:	89400417 	ldw	r5,16(r17)
8111a66c:	9809883a 	mov	r4,r19
8111a670:	11180340 	call	81118034 <_free_r>
8111a674:	88c0030b 	ldhu	r3,12(r17)
8111a678:	00800304 	movi	r2,12
8111a67c:	98800015 	stw	r2,0(r19)
8111a680:	18c01014 	ori	r3,r3,64
8111a684:	88c0030d 	sth	r3,12(r17)
8111a688:	00bfffc4 	movi	r2,-1
8111a68c:	90000215 	stw	zero,8(r18)
8111a690:	90000115 	stw	zero,4(r18)
8111a694:	00000206 	br	8111a6a0 <__ssprint_r+0x1a0>
8111a698:	90000115 	stw	zero,4(r18)
8111a69c:	0005883a 	mov	r2,zero
8111a6a0:	dfc00917 	ldw	ra,36(sp)
8111a6a4:	df000817 	ldw	fp,32(sp)
8111a6a8:	ddc00717 	ldw	r23,28(sp)
8111a6ac:	dd800617 	ldw	r22,24(sp)
8111a6b0:	dd400517 	ldw	r21,20(sp)
8111a6b4:	dd000417 	ldw	r20,16(sp)
8111a6b8:	dcc00317 	ldw	r19,12(sp)
8111a6bc:	dc800217 	ldw	r18,8(sp)
8111a6c0:	dc400117 	ldw	r17,4(sp)
8111a6c4:	dc000017 	ldw	r16,0(sp)
8111a6c8:	dec00a04 	addi	sp,sp,40
8111a6cc:	f800283a 	ret

8111a6d0 <___svfiprintf_internal_r>:
8111a6d0:	2880030b 	ldhu	r2,12(r5)
8111a6d4:	deffc804 	addi	sp,sp,-224
8111a6d8:	dcc03115 	stw	r19,196(sp)
8111a6dc:	dfc03715 	stw	ra,220(sp)
8111a6e0:	df003615 	stw	fp,216(sp)
8111a6e4:	ddc03515 	stw	r23,212(sp)
8111a6e8:	dd803415 	stw	r22,208(sp)
8111a6ec:	dd403315 	stw	r21,204(sp)
8111a6f0:	dd003215 	stw	r20,200(sp)
8111a6f4:	dc803015 	stw	r18,192(sp)
8111a6f8:	dc402f15 	stw	r17,188(sp)
8111a6fc:	dc002e15 	stw	r16,184(sp)
8111a700:	d9402715 	stw	r5,156(sp)
8111a704:	d9002a15 	stw	r4,168(sp)
8111a708:	1080200c 	andi	r2,r2,128
8111a70c:	d9c02315 	stw	r7,140(sp)
8111a710:	3027883a 	mov	r19,r6
8111a714:	10000226 	beq	r2,zero,8111a720 <___svfiprintf_internal_r+0x50>
8111a718:	28800417 	ldw	r2,16(r5)
8111a71c:	10041d26 	beq	r2,zero,8111b794 <___svfiprintf_internal_r+0x10c4>
8111a720:	dac01a04 	addi	r11,sp,104
8111a724:	dac01e15 	stw	r11,120(sp)
8111a728:	d8801e17 	ldw	r2,120(sp)
8111a72c:	dac019c4 	addi	r11,sp,103
8111a730:	dd402a17 	ldw	r21,168(sp)
8111a734:	ddc02717 	ldw	r23,156(sp)
8111a738:	05a044b4 	movhi	r22,33042
8111a73c:	052044b4 	movhi	r20,33042
8111a740:	dac01f15 	stw	r11,124(sp)
8111a744:	12d7c83a 	sub	r11,r2,r11
8111a748:	b59b1e04 	addi	r22,r22,27768
8111a74c:	a51b1a04 	addi	r20,r20,27752
8111a750:	dec01a15 	stw	sp,104(sp)
8111a754:	d8001c15 	stw	zero,112(sp)
8111a758:	d8001b15 	stw	zero,108(sp)
8111a75c:	d811883a 	mov	r8,sp
8111a760:	d8002915 	stw	zero,164(sp)
8111a764:	d8002515 	stw	zero,148(sp)
8111a768:	dac02b15 	stw	r11,172(sp)
8111a76c:	98800007 	ldb	r2,0(r19)
8111a770:	1002dd26 	beq	r2,zero,8111b2e8 <___svfiprintf_internal_r+0xc18>
8111a774:	00c00944 	movi	r3,37
8111a778:	9823883a 	mov	r17,r19
8111a77c:	10c0021e 	bne	r2,r3,8111a788 <___svfiprintf_internal_r+0xb8>
8111a780:	00001406 	br	8111a7d4 <___svfiprintf_internal_r+0x104>
8111a784:	10c00326 	beq	r2,r3,8111a794 <___svfiprintf_internal_r+0xc4>
8111a788:	8c400044 	addi	r17,r17,1
8111a78c:	88800007 	ldb	r2,0(r17)
8111a790:	103ffc1e 	bne	r2,zero,8111a784 <__reset+0xfb0fa784>
8111a794:	8ce1c83a 	sub	r16,r17,r19
8111a798:	80000e26 	beq	r16,zero,8111a7d4 <___svfiprintf_internal_r+0x104>
8111a79c:	d8c01c17 	ldw	r3,112(sp)
8111a7a0:	d8801b17 	ldw	r2,108(sp)
8111a7a4:	44c00015 	stw	r19,0(r8)
8111a7a8:	1c07883a 	add	r3,r3,r16
8111a7ac:	10800044 	addi	r2,r2,1
8111a7b0:	d8c01c15 	stw	r3,112(sp)
8111a7b4:	44000115 	stw	r16,4(r8)
8111a7b8:	d8801b15 	stw	r2,108(sp)
8111a7bc:	00c001c4 	movi	r3,7
8111a7c0:	18831e16 	blt	r3,r2,8111b43c <___svfiprintf_internal_r+0xd6c>
8111a7c4:	42000204 	addi	r8,r8,8
8111a7c8:	dac02517 	ldw	r11,148(sp)
8111a7cc:	5c17883a 	add	r11,r11,r16
8111a7d0:	dac02515 	stw	r11,148(sp)
8111a7d4:	88800007 	ldb	r2,0(r17)
8111a7d8:	1002c526 	beq	r2,zero,8111b2f0 <___svfiprintf_internal_r+0xc20>
8111a7dc:	88c00047 	ldb	r3,1(r17)
8111a7e0:	8cc00044 	addi	r19,r17,1
8111a7e4:	d8001d85 	stb	zero,118(sp)
8111a7e8:	0009883a 	mov	r4,zero
8111a7ec:	000f883a 	mov	r7,zero
8111a7f0:	043fffc4 	movi	r16,-1
8111a7f4:	d8002415 	stw	zero,144(sp)
8111a7f8:	0025883a 	mov	r18,zero
8111a7fc:	01401604 	movi	r5,88
8111a800:	01800244 	movi	r6,9
8111a804:	02800a84 	movi	r10,42
8111a808:	02401b04 	movi	r9,108
8111a80c:	9cc00044 	addi	r19,r19,1
8111a810:	18bff804 	addi	r2,r3,-32
8111a814:	2881dd36 	bltu	r5,r2,8111af8c <___svfiprintf_internal_r+0x8bc>
8111a818:	100490ba 	slli	r2,r2,2
8111a81c:	02e044b4 	movhi	r11,33042
8111a820:	5aea0c04 	addi	r11,r11,-22480
8111a824:	12c5883a 	add	r2,r2,r11
8111a828:	10800017 	ldw	r2,0(r2)
8111a82c:	1000683a 	jmp	r2
8111a830:	8111aa2c 	andhi	r4,r16,18088
8111a834:	8111af8c 	andi	r4,r16,18110
8111a838:	8111af8c 	andi	r4,r16,18110
8111a83c:	8111aa20 	cmpeqi	r4,r16,18088
8111a840:	8111af8c 	andi	r4,r16,18110
8111a844:	8111af8c 	andi	r4,r16,18110
8111a848:	8111af8c 	andi	r4,r16,18110
8111a84c:	8111af8c 	andi	r4,r16,18110
8111a850:	8111af8c 	andi	r4,r16,18110
8111a854:	8111af8c 	andi	r4,r16,18110
8111a858:	8111a994 	ori	r4,r16,18086
8111a85c:	8111ab70 	cmpltui	r4,r16,18093
8111a860:	8111af8c 	andi	r4,r16,18110
8111a864:	8111a9c0 	call	88111a9c <__reset+0x20f1a9c>
8111a868:	8111afc0 	call	88111afc <__reset+0x20f1afc>
8111a86c:	8111af8c 	andi	r4,r16,18110
8111a870:	8111afb4 	orhi	r4,r16,18110
8111a874:	8111af54 	ori	r4,r16,18109
8111a878:	8111af54 	ori	r4,r16,18109
8111a87c:	8111af54 	ori	r4,r16,18109
8111a880:	8111af54 	ori	r4,r16,18109
8111a884:	8111af54 	ori	r4,r16,18109
8111a888:	8111af54 	ori	r4,r16,18109
8111a88c:	8111af54 	ori	r4,r16,18109
8111a890:	8111af54 	ori	r4,r16,18109
8111a894:	8111af54 	ori	r4,r16,18109
8111a898:	8111af8c 	andi	r4,r16,18110
8111a89c:	8111af8c 	andi	r4,r16,18110
8111a8a0:	8111af8c 	andi	r4,r16,18110
8111a8a4:	8111af8c 	andi	r4,r16,18110
8111a8a8:	8111af8c 	andi	r4,r16,18110
8111a8ac:	8111af8c 	andi	r4,r16,18110
8111a8b0:	8111af8c 	andi	r4,r16,18110
8111a8b4:	8111af8c 	andi	r4,r16,18110
8111a8b8:	8111af8c 	andi	r4,r16,18110
8111a8bc:	8111af8c 	andi	r4,r16,18110
8111a8c0:	8111aef0 	cmpltui	r4,r16,18107
8111a8c4:	8111af8c 	andi	r4,r16,18110
8111a8c8:	8111af8c 	andi	r4,r16,18110
8111a8cc:	8111af8c 	andi	r4,r16,18110
8111a8d0:	8111af8c 	andi	r4,r16,18110
8111a8d4:	8111af8c 	andi	r4,r16,18110
8111a8d8:	8111af8c 	andi	r4,r16,18110
8111a8dc:	8111af8c 	andi	r4,r16,18110
8111a8e0:	8111af8c 	andi	r4,r16,18110
8111a8e4:	8111af8c 	andi	r4,r16,18110
8111a8e8:	8111af8c 	andi	r4,r16,18110
8111a8ec:	8111b068 	cmpgeui	r4,r16,18113
8111a8f0:	8111af8c 	andi	r4,r16,18110
8111a8f4:	8111af8c 	andi	r4,r16,18110
8111a8f8:	8111af8c 	andi	r4,r16,18110
8111a8fc:	8111af8c 	andi	r4,r16,18110
8111a900:	8111af8c 	andi	r4,r16,18110
8111a904:	8111b000 	call	88111b00 <__reset+0x20f1b00>
8111a908:	8111af8c 	andi	r4,r16,18110
8111a90c:	8111af8c 	andi	r4,r16,18110
8111a910:	8111ad34 	orhi	r4,r16,18100
8111a914:	8111af8c 	andi	r4,r16,18110
8111a918:	8111af8c 	andi	r4,r16,18110
8111a91c:	8111af8c 	andi	r4,r16,18110
8111a920:	8111af8c 	andi	r4,r16,18110
8111a924:	8111af8c 	andi	r4,r16,18110
8111a928:	8111af8c 	andi	r4,r16,18110
8111a92c:	8111af8c 	andi	r4,r16,18110
8111a930:	8111af8c 	andi	r4,r16,18110
8111a934:	8111af8c 	andi	r4,r16,18110
8111a938:	8111af8c 	andi	r4,r16,18110
8111a93c:	8111ac24 	muli	r4,r16,18096
8111a940:	8111add0 	cmplti	r4,r16,18103
8111a944:	8111af8c 	andi	r4,r16,18110
8111a948:	8111af8c 	andi	r4,r16,18110
8111a94c:	8111af8c 	andi	r4,r16,18110
8111a950:	8111adc4 	addi	r4,r16,18103
8111a954:	8111add0 	cmplti	r4,r16,18103
8111a958:	8111af8c 	andi	r4,r16,18110
8111a95c:	8111af8c 	andi	r4,r16,18110
8111a960:	8111adb4 	orhi	r4,r16,18102
8111a964:	8111af8c 	andi	r4,r16,18110
8111a968:	8111ad78 	rdprs	r4,r16,18101
8111a96c:	8111ab80 	call	88111ab8 <__reset+0x20f1ab8>
8111a970:	8111a9cc 	andi	r4,r16,18087
8111a974:	8111aee4 	muli	r4,r16,18107
8111a978:	8111af8c 	andi	r4,r16,18110
8111a97c:	8111ae98 	cmpnei	r4,r16,18106
8111a980:	8111af8c 	andi	r4,r16,18110
8111a984:	8111aaf0 	cmpltui	r4,r16,18091
8111a988:	8111af8c 	andi	r4,r16,18110
8111a98c:	8111af8c 	andi	r4,r16,18110
8111a990:	8111aa4c 	andi	r4,r16,18089
8111a994:	dac02317 	ldw	r11,140(sp)
8111a998:	5ac00017 	ldw	r11,0(r11)
8111a99c:	dac02415 	stw	r11,144(sp)
8111a9a0:	dac02317 	ldw	r11,140(sp)
8111a9a4:	58800104 	addi	r2,r11,4
8111a9a8:	dac02417 	ldw	r11,144(sp)
8111a9ac:	5802e90e 	bge	r11,zero,8111b554 <___svfiprintf_internal_r+0xe84>
8111a9b0:	dac02417 	ldw	r11,144(sp)
8111a9b4:	d8802315 	stw	r2,140(sp)
8111a9b8:	02d7c83a 	sub	r11,zero,r11
8111a9bc:	dac02415 	stw	r11,144(sp)
8111a9c0:	94800114 	ori	r18,r18,4
8111a9c4:	98c00007 	ldb	r3,0(r19)
8111a9c8:	003f9006 	br	8111a80c <__reset+0xfb0fa80c>
8111a9cc:	00800c04 	movi	r2,48
8111a9d0:	dac02317 	ldw	r11,140(sp)
8111a9d4:	d8801d05 	stb	r2,116(sp)
8111a9d8:	00801e04 	movi	r2,120
8111a9dc:	d8801d45 	stb	r2,117(sp)
8111a9e0:	d8001d85 	stb	zero,118(sp)
8111a9e4:	58c00104 	addi	r3,r11,4
8111a9e8:	5f000017 	ldw	fp,0(r11)
8111a9ec:	0013883a 	mov	r9,zero
8111a9f0:	90800094 	ori	r2,r18,2
8111a9f4:	80032b16 	blt	r16,zero,8111b6a4 <___svfiprintf_internal_r+0xfd4>
8111a9f8:	00bfdfc4 	movi	r2,-129
8111a9fc:	90a4703a 	and	r18,r18,r2
8111aa00:	d8c02315 	stw	r3,140(sp)
8111aa04:	94800094 	ori	r18,r18,2
8111aa08:	e002dc26 	beq	fp,zero,8111b57c <___svfiprintf_internal_r+0xeac>
8111aa0c:	012044b4 	movhi	r4,33042
8111aa10:	211ab204 	addi	r4,r4,27336
8111aa14:	0015883a 	mov	r10,zero
8111aa18:	d9002915 	stw	r4,164(sp)
8111aa1c:	00002306 	br	8111aaac <___svfiprintf_internal_r+0x3dc>
8111aa20:	94800054 	ori	r18,r18,1
8111aa24:	98c00007 	ldb	r3,0(r19)
8111aa28:	003f7806 	br	8111a80c <__reset+0xfb0fa80c>
8111aa2c:	38803fcc 	andi	r2,r7,255
8111aa30:	1080201c 	xori	r2,r2,128
8111aa34:	10bfe004 	addi	r2,r2,-128
8111aa38:	1002f31e 	bne	r2,zero,8111b608 <___svfiprintf_internal_r+0xf38>
8111aa3c:	01000044 	movi	r4,1
8111aa40:	01c00804 	movi	r7,32
8111aa44:	98c00007 	ldb	r3,0(r19)
8111aa48:	003f7006 	br	8111a80c <__reset+0xfb0fa80c>
8111aa4c:	21003fcc 	andi	r4,r4,255
8111aa50:	2003aa1e 	bne	r4,zero,8111b8fc <___svfiprintf_internal_r+0x122c>
8111aa54:	00a044b4 	movhi	r2,33042
8111aa58:	109ab204 	addi	r2,r2,27336
8111aa5c:	d8802915 	stw	r2,164(sp)
8111aa60:	9080080c 	andi	r2,r18,32
8111aa64:	1000ba26 	beq	r2,zero,8111ad50 <___svfiprintf_internal_r+0x680>
8111aa68:	dac02317 	ldw	r11,140(sp)
8111aa6c:	5f000017 	ldw	fp,0(r11)
8111aa70:	5a400117 	ldw	r9,4(r11)
8111aa74:	5ac00204 	addi	r11,r11,8
8111aa78:	dac02315 	stw	r11,140(sp)
8111aa7c:	9080004c 	andi	r2,r18,1
8111aa80:	10029026 	beq	r2,zero,8111b4c4 <___svfiprintf_internal_r+0xdf4>
8111aa84:	e244b03a 	or	r2,fp,r9
8111aa88:	1002d41e 	bne	r2,zero,8111b5dc <___svfiprintf_internal_r+0xf0c>
8111aa8c:	d8001d85 	stb	zero,118(sp)
8111aa90:	80030b16 	blt	r16,zero,8111b6c0 <___svfiprintf_internal_r+0xff0>
8111aa94:	00bfdfc4 	movi	r2,-129
8111aa98:	90a4703a 	and	r18,r18,r2
8111aa9c:	0015883a 	mov	r10,zero
8111aaa0:	80002426 	beq	r16,zero,8111ab34 <___svfiprintf_internal_r+0x464>
8111aaa4:	0039883a 	mov	fp,zero
8111aaa8:	0013883a 	mov	r9,zero
8111aaac:	d9002917 	ldw	r4,164(sp)
8111aab0:	dc401a04 	addi	r17,sp,104
8111aab4:	e08003cc 	andi	r2,fp,15
8111aab8:	4806973a 	slli	r3,r9,28
8111aabc:	2085883a 	add	r2,r4,r2
8111aac0:	e038d13a 	srli	fp,fp,4
8111aac4:	10800003 	ldbu	r2,0(r2)
8111aac8:	4812d13a 	srli	r9,r9,4
8111aacc:	8c7fffc4 	addi	r17,r17,-1
8111aad0:	1f38b03a 	or	fp,r3,fp
8111aad4:	88800005 	stb	r2,0(r17)
8111aad8:	e244b03a 	or	r2,fp,r9
8111aadc:	103ff51e 	bne	r2,zero,8111aab4 <__reset+0xfb0faab4>
8111aae0:	dac01e17 	ldw	r11,120(sp)
8111aae4:	5c57c83a 	sub	r11,r11,r17
8111aae8:	dac02115 	stw	r11,132(sp)
8111aaec:	00001406 	br	8111ab40 <___svfiprintf_internal_r+0x470>
8111aaf0:	21003fcc 	andi	r4,r4,255
8111aaf4:	2003741e 	bne	r4,zero,8111b8c8 <___svfiprintf_internal_r+0x11f8>
8111aaf8:	9080080c 	andi	r2,r18,32
8111aafc:	10014526 	beq	r2,zero,8111b014 <___svfiprintf_internal_r+0x944>
8111ab00:	dac02317 	ldw	r11,140(sp)
8111ab04:	d8001d85 	stb	zero,118(sp)
8111ab08:	58c00204 	addi	r3,r11,8
8111ab0c:	5f000017 	ldw	fp,0(r11)
8111ab10:	5a400117 	ldw	r9,4(r11)
8111ab14:	8002d916 	blt	r16,zero,8111b67c <___svfiprintf_internal_r+0xfac>
8111ab18:	013fdfc4 	movi	r4,-129
8111ab1c:	e244b03a 	or	r2,fp,r9
8111ab20:	d8c02315 	stw	r3,140(sp)
8111ab24:	9124703a 	and	r18,r18,r4
8111ab28:	0015883a 	mov	r10,zero
8111ab2c:	1000b91e 	bne	r2,zero,8111ae14 <___svfiprintf_internal_r+0x744>
8111ab30:	8002e61e 	bne	r16,zero,8111b6cc <___svfiprintf_internal_r+0xffc>
8111ab34:	0021883a 	mov	r16,zero
8111ab38:	d8002115 	stw	zero,132(sp)
8111ab3c:	dc401a04 	addi	r17,sp,104
8111ab40:	d8c02117 	ldw	r3,132(sp)
8111ab44:	dc002015 	stw	r16,128(sp)
8111ab48:	80c0010e 	bge	r16,r3,8111ab50 <___svfiprintf_internal_r+0x480>
8111ab4c:	d8c02015 	stw	r3,128(sp)
8111ab50:	52803fcc 	andi	r10,r10,255
8111ab54:	5280201c 	xori	r10,r10,128
8111ab58:	52bfe004 	addi	r10,r10,-128
8111ab5c:	50003c26 	beq	r10,zero,8111ac50 <___svfiprintf_internal_r+0x580>
8111ab60:	dac02017 	ldw	r11,128(sp)
8111ab64:	5ac00044 	addi	r11,r11,1
8111ab68:	dac02015 	stw	r11,128(sp)
8111ab6c:	00003806 	br	8111ac50 <___svfiprintf_internal_r+0x580>
8111ab70:	01000044 	movi	r4,1
8111ab74:	01c00ac4 	movi	r7,43
8111ab78:	98c00007 	ldb	r3,0(r19)
8111ab7c:	003f2306 	br	8111a80c <__reset+0xfb0fa80c>
8111ab80:	21003fcc 	andi	r4,r4,255
8111ab84:	2003481e 	bne	r4,zero,8111b8a8 <___svfiprintf_internal_r+0x11d8>
8111ab88:	9080080c 	andi	r2,r18,32
8111ab8c:	10013b26 	beq	r2,zero,8111b07c <___svfiprintf_internal_r+0x9ac>
8111ab90:	dac02317 	ldw	r11,140(sp)
8111ab94:	d8001d85 	stb	zero,118(sp)
8111ab98:	58800204 	addi	r2,r11,8
8111ab9c:	5f000017 	ldw	fp,0(r11)
8111aba0:	5a400117 	ldw	r9,4(r11)
8111aba4:	8002a816 	blt	r16,zero,8111b648 <___svfiprintf_internal_r+0xf78>
8111aba8:	013fdfc4 	movi	r4,-129
8111abac:	e246b03a 	or	r3,fp,r9
8111abb0:	d8802315 	stw	r2,140(sp)
8111abb4:	9124703a 	and	r18,r18,r4
8111abb8:	18013c26 	beq	r3,zero,8111b0ac <___svfiprintf_internal_r+0x9dc>
8111abbc:	0015883a 	mov	r10,zero
8111abc0:	dc401a04 	addi	r17,sp,104
8111abc4:	e006d0fa 	srli	r3,fp,3
8111abc8:	4808977a 	slli	r4,r9,29
8111abcc:	4812d0fa 	srli	r9,r9,3
8111abd0:	e70001cc 	andi	fp,fp,7
8111abd4:	e0800c04 	addi	r2,fp,48
8111abd8:	8c7fffc4 	addi	r17,r17,-1
8111abdc:	20f8b03a 	or	fp,r4,r3
8111abe0:	88800005 	stb	r2,0(r17)
8111abe4:	e246b03a 	or	r3,fp,r9
8111abe8:	183ff61e 	bne	r3,zero,8111abc4 <__reset+0xfb0fabc4>
8111abec:	90c0004c 	andi	r3,r18,1
8111abf0:	1800a526 	beq	r3,zero,8111ae88 <___svfiprintf_internal_r+0x7b8>
8111abf4:	10803fcc 	andi	r2,r2,255
8111abf8:	1080201c 	xori	r2,r2,128
8111abfc:	10bfe004 	addi	r2,r2,-128
8111ac00:	00c00c04 	movi	r3,48
8111ac04:	10ffb626 	beq	r2,r3,8111aae0 <__reset+0xfb0faae0>
8111ac08:	88ffffc5 	stb	r3,-1(r17)
8111ac0c:	d8c01e17 	ldw	r3,120(sp)
8111ac10:	88bfffc4 	addi	r2,r17,-1
8111ac14:	1023883a 	mov	r17,r2
8111ac18:	1887c83a 	sub	r3,r3,r2
8111ac1c:	d8c02115 	stw	r3,132(sp)
8111ac20:	003fc706 	br	8111ab40 <__reset+0xfb0fab40>
8111ac24:	dac02317 	ldw	r11,140(sp)
8111ac28:	00c00044 	movi	r3,1
8111ac2c:	d8c02015 	stw	r3,128(sp)
8111ac30:	58800017 	ldw	r2,0(r11)
8111ac34:	5ac00104 	addi	r11,r11,4
8111ac38:	d8001d85 	stb	zero,118(sp)
8111ac3c:	d8801005 	stb	r2,64(sp)
8111ac40:	dac02315 	stw	r11,140(sp)
8111ac44:	d8c02115 	stw	r3,132(sp)
8111ac48:	dc401004 	addi	r17,sp,64
8111ac4c:	0021883a 	mov	r16,zero
8111ac50:	90c0008c 	andi	r3,r18,2
8111ac54:	d8c02215 	stw	r3,136(sp)
8111ac58:	18000326 	beq	r3,zero,8111ac68 <___svfiprintf_internal_r+0x598>
8111ac5c:	dac02017 	ldw	r11,128(sp)
8111ac60:	5ac00084 	addi	r11,r11,2
8111ac64:	dac02015 	stw	r11,128(sp)
8111ac68:	90c0210c 	andi	r3,r18,132
8111ac6c:	d8c02615 	stw	r3,152(sp)
8111ac70:	1801131e 	bne	r3,zero,8111b0c0 <___svfiprintf_internal_r+0x9f0>
8111ac74:	dac02417 	ldw	r11,144(sp)
8111ac78:	d8c02017 	ldw	r3,128(sp)
8111ac7c:	58f9c83a 	sub	fp,r11,r3
8111ac80:	07010f0e 	bge	zero,fp,8111b0c0 <___svfiprintf_internal_r+0x9f0>
8111ac84:	02400404 	movi	r9,16
8111ac88:	d8c01c17 	ldw	r3,112(sp)
8111ac8c:	d8801b17 	ldw	r2,108(sp)
8111ac90:	4f02d60e 	bge	r9,fp,8111b7ec <___svfiprintf_internal_r+0x111c>
8111ac94:	016044b4 	movhi	r5,33042
8111ac98:	295b1e04 	addi	r5,r5,27768
8111ac9c:	d9402815 	stw	r5,160(sp)
8111aca0:	028001c4 	movi	r10,7
8111aca4:	00000306 	br	8111acb4 <___svfiprintf_internal_r+0x5e4>
8111aca8:	e73ffc04 	addi	fp,fp,-16
8111acac:	42000204 	addi	r8,r8,8
8111acb0:	4f00150e 	bge	r9,fp,8111ad08 <___svfiprintf_internal_r+0x638>
8111acb4:	18c00404 	addi	r3,r3,16
8111acb8:	10800044 	addi	r2,r2,1
8111acbc:	45800015 	stw	r22,0(r8)
8111acc0:	42400115 	stw	r9,4(r8)
8111acc4:	d8c01c15 	stw	r3,112(sp)
8111acc8:	d8801b15 	stw	r2,108(sp)
8111accc:	50bff60e 	bge	r10,r2,8111aca8 <__reset+0xfb0faca8>
8111acd0:	d9801a04 	addi	r6,sp,104
8111acd4:	b80b883a 	mov	r5,r23
8111acd8:	a809883a 	mov	r4,r21
8111acdc:	da402c15 	stw	r9,176(sp)
8111ace0:	da802d15 	stw	r10,180(sp)
8111ace4:	111a5000 	call	8111a500 <__ssprint_r>
8111ace8:	da402c17 	ldw	r9,176(sp)
8111acec:	da802d17 	ldw	r10,180(sp)
8111acf0:	1001851e 	bne	r2,zero,8111b308 <___svfiprintf_internal_r+0xc38>
8111acf4:	e73ffc04 	addi	fp,fp,-16
8111acf8:	d8c01c17 	ldw	r3,112(sp)
8111acfc:	d8801b17 	ldw	r2,108(sp)
8111ad00:	d811883a 	mov	r8,sp
8111ad04:	4f3feb16 	blt	r9,fp,8111acb4 <__reset+0xfb0facb4>
8111ad08:	dac02817 	ldw	r11,160(sp)
8111ad0c:	e0c7883a 	add	r3,fp,r3
8111ad10:	10800044 	addi	r2,r2,1
8111ad14:	42c00015 	stw	r11,0(r8)
8111ad18:	47000115 	stw	fp,4(r8)
8111ad1c:	d8c01c15 	stw	r3,112(sp)
8111ad20:	d8801b15 	stw	r2,108(sp)
8111ad24:	010001c4 	movi	r4,7
8111ad28:	2081ee16 	blt	r4,r2,8111b4e4 <___svfiprintf_internal_r+0xe14>
8111ad2c:	42000204 	addi	r8,r8,8
8111ad30:	0000e506 	br	8111b0c8 <___svfiprintf_internal_r+0x9f8>
8111ad34:	21003fcc 	andi	r4,r4,255
8111ad38:	2002dd1e 	bne	r4,zero,8111b8b0 <___svfiprintf_internal_r+0x11e0>
8111ad3c:	00a044b4 	movhi	r2,33042
8111ad40:	109aad04 	addi	r2,r2,27316
8111ad44:	d8802915 	stw	r2,164(sp)
8111ad48:	9080080c 	andi	r2,r18,32
8111ad4c:	103f461e 	bne	r2,zero,8111aa68 <__reset+0xfb0faa68>
8111ad50:	9080040c 	andi	r2,r18,16
8111ad54:	10022e1e 	bne	r2,zero,8111b610 <___svfiprintf_internal_r+0xf40>
8111ad58:	9080100c 	andi	r2,r18,64
8111ad5c:	dac02317 	ldw	r11,140(sp)
8111ad60:	10027326 	beq	r2,zero,8111b730 <___svfiprintf_internal_r+0x1060>
8111ad64:	5f00000b 	ldhu	fp,0(r11)
8111ad68:	5ac00104 	addi	r11,r11,4
8111ad6c:	0013883a 	mov	r9,zero
8111ad70:	dac02315 	stw	r11,140(sp)
8111ad74:	003f4106 	br	8111aa7c <__reset+0xfb0faa7c>
8111ad78:	21003fcc 	andi	r4,r4,255
8111ad7c:	2002e11e 	bne	r4,zero,8111b904 <___svfiprintf_internal_r+0x1234>
8111ad80:	9080080c 	andi	r2,r18,32
8111ad84:	1002011e 	bne	r2,zero,8111b58c <___svfiprintf_internal_r+0xebc>
8111ad88:	9080040c 	andi	r2,r18,16
8111ad8c:	10023e1e 	bne	r2,zero,8111b688 <___svfiprintf_internal_r+0xfb8>
8111ad90:	9480100c 	andi	r18,r18,64
8111ad94:	90023c26 	beq	r18,zero,8111b688 <___svfiprintf_internal_r+0xfb8>
8111ad98:	dac02317 	ldw	r11,140(sp)
8111ad9c:	58800017 	ldw	r2,0(r11)
8111ada0:	5ac00104 	addi	r11,r11,4
8111ada4:	dac02315 	stw	r11,140(sp)
8111ada8:	dac02517 	ldw	r11,148(sp)
8111adac:	12c0000d 	sth	r11,0(r2)
8111adb0:	003e6e06 	br	8111a76c <__reset+0xfb0fa76c>
8111adb4:	98c00007 	ldb	r3,0(r19)
8111adb8:	1a422926 	beq	r3,r9,8111b660 <___svfiprintf_internal_r+0xf90>
8111adbc:	94800414 	ori	r18,r18,16
8111adc0:	003e9206 	br	8111a80c <__reset+0xfb0fa80c>
8111adc4:	94801014 	ori	r18,r18,64
8111adc8:	98c00007 	ldb	r3,0(r19)
8111adcc:	003e8f06 	br	8111a80c <__reset+0xfb0fa80c>
8111add0:	21003fcc 	andi	r4,r4,255
8111add4:	2002c71e 	bne	r4,zero,8111b8f4 <___svfiprintf_internal_r+0x1224>
8111add8:	9080080c 	andi	r2,r18,32
8111addc:	10004926 	beq	r2,zero,8111af04 <___svfiprintf_internal_r+0x834>
8111ade0:	dac02317 	ldw	r11,140(sp)
8111ade4:	58800117 	ldw	r2,4(r11)
8111ade8:	5f000017 	ldw	fp,0(r11)
8111adec:	5ac00204 	addi	r11,r11,8
8111adf0:	dac02315 	stw	r11,140(sp)
8111adf4:	1013883a 	mov	r9,r2
8111adf8:	10004b16 	blt	r2,zero,8111af28 <___svfiprintf_internal_r+0x858>
8111adfc:	da801d83 	ldbu	r10,118(sp)
8111ae00:	8001cb16 	blt	r16,zero,8111b530 <___svfiprintf_internal_r+0xe60>
8111ae04:	00ffdfc4 	movi	r3,-129
8111ae08:	e244b03a 	or	r2,fp,r9
8111ae0c:	90e4703a 	and	r18,r18,r3
8111ae10:	103f4726 	beq	r2,zero,8111ab30 <__reset+0xfb0fab30>
8111ae14:	48008c26 	beq	r9,zero,8111b048 <___svfiprintf_internal_r+0x978>
8111ae18:	dc802015 	stw	r18,128(sp)
8111ae1c:	dc002115 	stw	r16,132(sp)
8111ae20:	dc401a04 	addi	r17,sp,104
8111ae24:	e021883a 	mov	r16,fp
8111ae28:	da002215 	stw	r8,136(sp)
8111ae2c:	5039883a 	mov	fp,r10
8111ae30:	4825883a 	mov	r18,r9
8111ae34:	8009883a 	mov	r4,r16
8111ae38:	900b883a 	mov	r5,r18
8111ae3c:	01800284 	movi	r6,10
8111ae40:	000f883a 	mov	r7,zero
8111ae44:	111dbdc0 	call	8111dbdc <__umoddi3>
8111ae48:	10800c04 	addi	r2,r2,48
8111ae4c:	8c7fffc4 	addi	r17,r17,-1
8111ae50:	8009883a 	mov	r4,r16
8111ae54:	900b883a 	mov	r5,r18
8111ae58:	88800005 	stb	r2,0(r17)
8111ae5c:	01800284 	movi	r6,10
8111ae60:	000f883a 	mov	r7,zero
8111ae64:	111d6640 	call	8111d664 <__udivdi3>
8111ae68:	1021883a 	mov	r16,r2
8111ae6c:	10c4b03a 	or	r2,r2,r3
8111ae70:	1825883a 	mov	r18,r3
8111ae74:	103fef1e 	bne	r2,zero,8111ae34 <__reset+0xfb0fae34>
8111ae78:	dc802017 	ldw	r18,128(sp)
8111ae7c:	dc002117 	ldw	r16,132(sp)
8111ae80:	da002217 	ldw	r8,136(sp)
8111ae84:	e015883a 	mov	r10,fp
8111ae88:	d8c01e17 	ldw	r3,120(sp)
8111ae8c:	1c47c83a 	sub	r3,r3,r17
8111ae90:	d8c02115 	stw	r3,132(sp)
8111ae94:	003f2a06 	br	8111ab40 <__reset+0xfb0fab40>
8111ae98:	dac02317 	ldw	r11,140(sp)
8111ae9c:	d8001d85 	stb	zero,118(sp)
8111aea0:	5c400017 	ldw	r17,0(r11)
8111aea4:	5f000104 	addi	fp,r11,4
8111aea8:	88022f26 	beq	r17,zero,8111b768 <___svfiprintf_internal_r+0x1098>
8111aeac:	80022516 	blt	r16,zero,8111b744 <___svfiprintf_internal_r+0x1074>
8111aeb0:	800d883a 	mov	r6,r16
8111aeb4:	000b883a 	mov	r5,zero
8111aeb8:	8809883a 	mov	r4,r17
8111aebc:	da002c15 	stw	r8,176(sp)
8111aec0:	1118b180 	call	81118b18 <memchr>
8111aec4:	da002c17 	ldw	r8,176(sp)
8111aec8:	10026426 	beq	r2,zero,8111b85c <___svfiprintf_internal_r+0x118c>
8111aecc:	1445c83a 	sub	r2,r2,r17
8111aed0:	d8802115 	stw	r2,132(sp)
8111aed4:	da801d83 	ldbu	r10,118(sp)
8111aed8:	df002315 	stw	fp,140(sp)
8111aedc:	0021883a 	mov	r16,zero
8111aee0:	003f1706 	br	8111ab40 <__reset+0xfb0fab40>
8111aee4:	94800814 	ori	r18,r18,32
8111aee8:	98c00007 	ldb	r3,0(r19)
8111aeec:	003e4706 	br	8111a80c <__reset+0xfb0fa80c>
8111aef0:	21003fcc 	andi	r4,r4,255
8111aef4:	2002701e 	bne	r4,zero,8111b8b8 <___svfiprintf_internal_r+0x11e8>
8111aef8:	94800414 	ori	r18,r18,16
8111aefc:	9080080c 	andi	r2,r18,32
8111af00:	103fb71e 	bne	r2,zero,8111ade0 <__reset+0xfb0fade0>
8111af04:	9080040c 	andi	r2,r18,16
8111af08:	1001ab26 	beq	r2,zero,8111b5b8 <___svfiprintf_internal_r+0xee8>
8111af0c:	dac02317 	ldw	r11,140(sp)
8111af10:	5f000017 	ldw	fp,0(r11)
8111af14:	5ac00104 	addi	r11,r11,4
8111af18:	dac02315 	stw	r11,140(sp)
8111af1c:	e013d7fa 	srai	r9,fp,31
8111af20:	4805883a 	mov	r2,r9
8111af24:	103fb50e 	bge	r2,zero,8111adfc <__reset+0xfb0fadfc>
8111af28:	0739c83a 	sub	fp,zero,fp
8111af2c:	02800b44 	movi	r10,45
8111af30:	e004c03a 	cmpne	r2,fp,zero
8111af34:	0253c83a 	sub	r9,zero,r9
8111af38:	da801d85 	stb	r10,118(sp)
8111af3c:	4893c83a 	sub	r9,r9,r2
8111af40:	80023016 	blt	r16,zero,8111b804 <___svfiprintf_internal_r+0x1134>
8111af44:	00bfdfc4 	movi	r2,-129
8111af48:	90a4703a 	and	r18,r18,r2
8111af4c:	483fb21e 	bne	r9,zero,8111ae18 <__reset+0xfb0fae18>
8111af50:	00003d06 	br	8111b048 <___svfiprintf_internal_r+0x978>
8111af54:	9817883a 	mov	r11,r19
8111af58:	d8002415 	stw	zero,144(sp)
8111af5c:	18bff404 	addi	r2,r3,-48
8111af60:	0019883a 	mov	r12,zero
8111af64:	58c00007 	ldb	r3,0(r11)
8111af68:	630002a4 	muli	r12,r12,10
8111af6c:	9cc00044 	addi	r19,r19,1
8111af70:	9817883a 	mov	r11,r19
8111af74:	1319883a 	add	r12,r2,r12
8111af78:	18bff404 	addi	r2,r3,-48
8111af7c:	30bff92e 	bgeu	r6,r2,8111af64 <__reset+0xfb0faf64>
8111af80:	db002415 	stw	r12,144(sp)
8111af84:	18bff804 	addi	r2,r3,-32
8111af88:	28be232e 	bgeu	r5,r2,8111a818 <__reset+0xfb0fa818>
8111af8c:	21003fcc 	andi	r4,r4,255
8111af90:	20024b1e 	bne	r4,zero,8111b8c0 <___svfiprintf_internal_r+0x11f0>
8111af94:	1800d626 	beq	r3,zero,8111b2f0 <___svfiprintf_internal_r+0xc20>
8111af98:	02c00044 	movi	r11,1
8111af9c:	dac02015 	stw	r11,128(sp)
8111afa0:	d8c01005 	stb	r3,64(sp)
8111afa4:	d8001d85 	stb	zero,118(sp)
8111afa8:	dac02115 	stw	r11,132(sp)
8111afac:	dc401004 	addi	r17,sp,64
8111afb0:	003f2606 	br	8111ac4c <__reset+0xfb0fac4c>
8111afb4:	94802014 	ori	r18,r18,128
8111afb8:	98c00007 	ldb	r3,0(r19)
8111afbc:	003e1306 	br	8111a80c <__reset+0xfb0fa80c>
8111afc0:	98c00007 	ldb	r3,0(r19)
8111afc4:	9ac00044 	addi	r11,r19,1
8111afc8:	1a822b26 	beq	r3,r10,8111b878 <___svfiprintf_internal_r+0x11a8>
8111afcc:	18bff404 	addi	r2,r3,-48
8111afd0:	0021883a 	mov	r16,zero
8111afd4:	30821e36 	bltu	r6,r2,8111b850 <___svfiprintf_internal_r+0x1180>
8111afd8:	58c00007 	ldb	r3,0(r11)
8111afdc:	840002a4 	muli	r16,r16,10
8111afe0:	5cc00044 	addi	r19,r11,1
8111afe4:	9817883a 	mov	r11,r19
8111afe8:	80a1883a 	add	r16,r16,r2
8111afec:	18bff404 	addi	r2,r3,-48
8111aff0:	30bff92e 	bgeu	r6,r2,8111afd8 <__reset+0xfb0fafd8>
8111aff4:	803e060e 	bge	r16,zero,8111a810 <__reset+0xfb0fa810>
8111aff8:	043fffc4 	movi	r16,-1
8111affc:	003e0406 	br	8111a810 <__reset+0xfb0fa810>
8111b000:	21003fcc 	andi	r4,r4,255
8111b004:	2002371e 	bne	r4,zero,8111b8e4 <___svfiprintf_internal_r+0x1214>
8111b008:	94800414 	ori	r18,r18,16
8111b00c:	9080080c 	andi	r2,r18,32
8111b010:	103ebb1e 	bne	r2,zero,8111ab00 <__reset+0xfb0fab00>
8111b014:	9080040c 	andi	r2,r18,16
8111b018:	10013b26 	beq	r2,zero,8111b508 <___svfiprintf_internal_r+0xe38>
8111b01c:	dac02317 	ldw	r11,140(sp)
8111b020:	d8001d85 	stb	zero,118(sp)
8111b024:	0013883a 	mov	r9,zero
8111b028:	58800104 	addi	r2,r11,4
8111b02c:	5f000017 	ldw	fp,0(r11)
8111b030:	80013d16 	blt	r16,zero,8111b528 <___svfiprintf_internal_r+0xe58>
8111b034:	00ffdfc4 	movi	r3,-129
8111b038:	d8802315 	stw	r2,140(sp)
8111b03c:	90e4703a 	and	r18,r18,r3
8111b040:	0015883a 	mov	r10,zero
8111b044:	e03eba26 	beq	fp,zero,8111ab30 <__reset+0xfb0fab30>
8111b048:	00800244 	movi	r2,9
8111b04c:	173f7236 	bltu	r2,fp,8111ae18 <__reset+0xfb0fae18>
8111b050:	dac02b17 	ldw	r11,172(sp)
8111b054:	e7000c04 	addi	fp,fp,48
8111b058:	df0019c5 	stb	fp,103(sp)
8111b05c:	dac02115 	stw	r11,132(sp)
8111b060:	dc4019c4 	addi	r17,sp,103
8111b064:	003eb606 	br	8111ab40 <__reset+0xfb0fab40>
8111b068:	21003fcc 	andi	r4,r4,255
8111b06c:	20021f1e 	bne	r4,zero,8111b8ec <___svfiprintf_internal_r+0x121c>
8111b070:	94800414 	ori	r18,r18,16
8111b074:	9080080c 	andi	r2,r18,32
8111b078:	103ec51e 	bne	r2,zero,8111ab90 <__reset+0xfb0fab90>
8111b07c:	9080040c 	andi	r2,r18,16
8111b080:	10016926 	beq	r2,zero,8111b628 <___svfiprintf_internal_r+0xf58>
8111b084:	dac02317 	ldw	r11,140(sp)
8111b088:	d8001d85 	stb	zero,118(sp)
8111b08c:	0013883a 	mov	r9,zero
8111b090:	58800104 	addi	r2,r11,4
8111b094:	5f000017 	ldw	fp,0(r11)
8111b098:	80016b16 	blt	r16,zero,8111b648 <___svfiprintf_internal_r+0xf78>
8111b09c:	00ffdfc4 	movi	r3,-129
8111b0a0:	d8802315 	stw	r2,140(sp)
8111b0a4:	90e4703a 	and	r18,r18,r3
8111b0a8:	e03ec41e 	bne	fp,zero,8111abbc <__reset+0xfb0fabbc>
8111b0ac:	0015883a 	mov	r10,zero
8111b0b0:	8001c226 	beq	r16,zero,8111b7bc <___svfiprintf_internal_r+0x10ec>
8111b0b4:	0039883a 	mov	fp,zero
8111b0b8:	0013883a 	mov	r9,zero
8111b0bc:	003ec006 	br	8111abc0 <__reset+0xfb0fabc0>
8111b0c0:	d8c01c17 	ldw	r3,112(sp)
8111b0c4:	d8801b17 	ldw	r2,108(sp)
8111b0c8:	d9001d87 	ldb	r4,118(sp)
8111b0cc:	20000b26 	beq	r4,zero,8111b0fc <___svfiprintf_internal_r+0xa2c>
8111b0d0:	d9001d84 	addi	r4,sp,118
8111b0d4:	18c00044 	addi	r3,r3,1
8111b0d8:	10800044 	addi	r2,r2,1
8111b0dc:	41000015 	stw	r4,0(r8)
8111b0e0:	01000044 	movi	r4,1
8111b0e4:	41000115 	stw	r4,4(r8)
8111b0e8:	d8c01c15 	stw	r3,112(sp)
8111b0ec:	d8801b15 	stw	r2,108(sp)
8111b0f0:	010001c4 	movi	r4,7
8111b0f4:	2080e116 	blt	r4,r2,8111b47c <___svfiprintf_internal_r+0xdac>
8111b0f8:	42000204 	addi	r8,r8,8
8111b0fc:	dac02217 	ldw	r11,136(sp)
8111b100:	58000b26 	beq	r11,zero,8111b130 <___svfiprintf_internal_r+0xa60>
8111b104:	d9001d04 	addi	r4,sp,116
8111b108:	18c00084 	addi	r3,r3,2
8111b10c:	10800044 	addi	r2,r2,1
8111b110:	41000015 	stw	r4,0(r8)
8111b114:	01000084 	movi	r4,2
8111b118:	41000115 	stw	r4,4(r8)
8111b11c:	d8c01c15 	stw	r3,112(sp)
8111b120:	d8801b15 	stw	r2,108(sp)
8111b124:	010001c4 	movi	r4,7
8111b128:	2080dd16 	blt	r4,r2,8111b4a0 <___svfiprintf_internal_r+0xdd0>
8111b12c:	42000204 	addi	r8,r8,8
8111b130:	dac02617 	ldw	r11,152(sp)
8111b134:	01002004 	movi	r4,128
8111b138:	59008426 	beq	r11,r4,8111b34c <___svfiprintf_internal_r+0xc7c>
8111b13c:	dac02117 	ldw	r11,132(sp)
8111b140:	82e1c83a 	sub	r16,r16,r11
8111b144:	0400270e 	bge	zero,r16,8111b1e4 <___svfiprintf_internal_r+0xb14>
8111b148:	01c00404 	movi	r7,16
8111b14c:	3c016a0e 	bge	r7,r16,8111b6f8 <___svfiprintf_internal_r+0x1028>
8111b150:	016044b4 	movhi	r5,33042
8111b154:	295b1a04 	addi	r5,r5,27752
8111b158:	d9402215 	stw	r5,136(sp)
8111b15c:	070001c4 	movi	fp,7
8111b160:	00000306 	br	8111b170 <___svfiprintf_internal_r+0xaa0>
8111b164:	843ffc04 	addi	r16,r16,-16
8111b168:	42000204 	addi	r8,r8,8
8111b16c:	3c00130e 	bge	r7,r16,8111b1bc <___svfiprintf_internal_r+0xaec>
8111b170:	18c00404 	addi	r3,r3,16
8111b174:	10800044 	addi	r2,r2,1
8111b178:	45000015 	stw	r20,0(r8)
8111b17c:	41c00115 	stw	r7,4(r8)
8111b180:	d8c01c15 	stw	r3,112(sp)
8111b184:	d8801b15 	stw	r2,108(sp)
8111b188:	e0bff60e 	bge	fp,r2,8111b164 <__reset+0xfb0fb164>
8111b18c:	d9801a04 	addi	r6,sp,104
8111b190:	b80b883a 	mov	r5,r23
8111b194:	a809883a 	mov	r4,r21
8111b198:	d9c02c15 	stw	r7,176(sp)
8111b19c:	111a5000 	call	8111a500 <__ssprint_r>
8111b1a0:	d9c02c17 	ldw	r7,176(sp)
8111b1a4:	1000581e 	bne	r2,zero,8111b308 <___svfiprintf_internal_r+0xc38>
8111b1a8:	843ffc04 	addi	r16,r16,-16
8111b1ac:	d8c01c17 	ldw	r3,112(sp)
8111b1b0:	d8801b17 	ldw	r2,108(sp)
8111b1b4:	d811883a 	mov	r8,sp
8111b1b8:	3c3fed16 	blt	r7,r16,8111b170 <__reset+0xfb0fb170>
8111b1bc:	dac02217 	ldw	r11,136(sp)
8111b1c0:	1c07883a 	add	r3,r3,r16
8111b1c4:	10800044 	addi	r2,r2,1
8111b1c8:	42c00015 	stw	r11,0(r8)
8111b1cc:	44000115 	stw	r16,4(r8)
8111b1d0:	d8c01c15 	stw	r3,112(sp)
8111b1d4:	d8801b15 	stw	r2,108(sp)
8111b1d8:	010001c4 	movi	r4,7
8111b1dc:	20809e16 	blt	r4,r2,8111b458 <___svfiprintf_internal_r+0xd88>
8111b1e0:	42000204 	addi	r8,r8,8
8111b1e4:	dac02117 	ldw	r11,132(sp)
8111b1e8:	10800044 	addi	r2,r2,1
8111b1ec:	44400015 	stw	r17,0(r8)
8111b1f0:	58c7883a 	add	r3,r11,r3
8111b1f4:	42c00115 	stw	r11,4(r8)
8111b1f8:	d8c01c15 	stw	r3,112(sp)
8111b1fc:	d8801b15 	stw	r2,108(sp)
8111b200:	010001c4 	movi	r4,7
8111b204:	20807f16 	blt	r4,r2,8111b404 <___svfiprintf_internal_r+0xd34>
8111b208:	42000204 	addi	r8,r8,8
8111b20c:	9480010c 	andi	r18,r18,4
8111b210:	90002926 	beq	r18,zero,8111b2b8 <___svfiprintf_internal_r+0xbe8>
8111b214:	dac02417 	ldw	r11,144(sp)
8111b218:	d8802017 	ldw	r2,128(sp)
8111b21c:	58a1c83a 	sub	r16,r11,r2
8111b220:	0400250e 	bge	zero,r16,8111b2b8 <___svfiprintf_internal_r+0xbe8>
8111b224:	04400404 	movi	r17,16
8111b228:	d8801b17 	ldw	r2,108(sp)
8111b22c:	8c017c0e 	bge	r17,r16,8111b820 <___svfiprintf_internal_r+0x1150>
8111b230:	016044b4 	movhi	r5,33042
8111b234:	295b1e04 	addi	r5,r5,27768
8111b238:	d9402815 	stw	r5,160(sp)
8111b23c:	048001c4 	movi	r18,7
8111b240:	00000306 	br	8111b250 <___svfiprintf_internal_r+0xb80>
8111b244:	843ffc04 	addi	r16,r16,-16
8111b248:	42000204 	addi	r8,r8,8
8111b24c:	8c00110e 	bge	r17,r16,8111b294 <___svfiprintf_internal_r+0xbc4>
8111b250:	18c00404 	addi	r3,r3,16
8111b254:	10800044 	addi	r2,r2,1
8111b258:	45800015 	stw	r22,0(r8)
8111b25c:	44400115 	stw	r17,4(r8)
8111b260:	d8c01c15 	stw	r3,112(sp)
8111b264:	d8801b15 	stw	r2,108(sp)
8111b268:	90bff60e 	bge	r18,r2,8111b244 <__reset+0xfb0fb244>
8111b26c:	d9801a04 	addi	r6,sp,104
8111b270:	b80b883a 	mov	r5,r23
8111b274:	a809883a 	mov	r4,r21
8111b278:	111a5000 	call	8111a500 <__ssprint_r>
8111b27c:	1000221e 	bne	r2,zero,8111b308 <___svfiprintf_internal_r+0xc38>
8111b280:	843ffc04 	addi	r16,r16,-16
8111b284:	d8c01c17 	ldw	r3,112(sp)
8111b288:	d8801b17 	ldw	r2,108(sp)
8111b28c:	d811883a 	mov	r8,sp
8111b290:	8c3fef16 	blt	r17,r16,8111b250 <__reset+0xfb0fb250>
8111b294:	dac02817 	ldw	r11,160(sp)
8111b298:	1c07883a 	add	r3,r3,r16
8111b29c:	10800044 	addi	r2,r2,1
8111b2a0:	42c00015 	stw	r11,0(r8)
8111b2a4:	44000115 	stw	r16,4(r8)
8111b2a8:	d8c01c15 	stw	r3,112(sp)
8111b2ac:	d8801b15 	stw	r2,108(sp)
8111b2b0:	010001c4 	movi	r4,7
8111b2b4:	2080aa16 	blt	r4,r2,8111b560 <___svfiprintf_internal_r+0xe90>
8111b2b8:	d8802417 	ldw	r2,144(sp)
8111b2bc:	dac02017 	ldw	r11,128(sp)
8111b2c0:	12c0010e 	bge	r2,r11,8111b2c8 <___svfiprintf_internal_r+0xbf8>
8111b2c4:	5805883a 	mov	r2,r11
8111b2c8:	dac02517 	ldw	r11,148(sp)
8111b2cc:	5897883a 	add	r11,r11,r2
8111b2d0:	dac02515 	stw	r11,148(sp)
8111b2d4:	1800531e 	bne	r3,zero,8111b424 <___svfiprintf_internal_r+0xd54>
8111b2d8:	98800007 	ldb	r2,0(r19)
8111b2dc:	d8001b15 	stw	zero,108(sp)
8111b2e0:	d811883a 	mov	r8,sp
8111b2e4:	103d231e 	bne	r2,zero,8111a774 <__reset+0xfb0fa774>
8111b2e8:	9823883a 	mov	r17,r19
8111b2ec:	003d3906 	br	8111a7d4 <__reset+0xfb0fa7d4>
8111b2f0:	d8801c17 	ldw	r2,112(sp)
8111b2f4:	10000426 	beq	r2,zero,8111b308 <___svfiprintf_internal_r+0xc38>
8111b2f8:	d9402717 	ldw	r5,156(sp)
8111b2fc:	d9002a17 	ldw	r4,168(sp)
8111b300:	d9801a04 	addi	r6,sp,104
8111b304:	111a5000 	call	8111a500 <__ssprint_r>
8111b308:	dac02717 	ldw	r11,156(sp)
8111b30c:	d8802517 	ldw	r2,148(sp)
8111b310:	58c0030b 	ldhu	r3,12(r11)
8111b314:	18c0100c 	andi	r3,r3,64
8111b318:	1801381e 	bne	r3,zero,8111b7fc <___svfiprintf_internal_r+0x112c>
8111b31c:	dfc03717 	ldw	ra,220(sp)
8111b320:	df003617 	ldw	fp,216(sp)
8111b324:	ddc03517 	ldw	r23,212(sp)
8111b328:	dd803417 	ldw	r22,208(sp)
8111b32c:	dd403317 	ldw	r21,204(sp)
8111b330:	dd003217 	ldw	r20,200(sp)
8111b334:	dcc03117 	ldw	r19,196(sp)
8111b338:	dc803017 	ldw	r18,192(sp)
8111b33c:	dc402f17 	ldw	r17,188(sp)
8111b340:	dc002e17 	ldw	r16,184(sp)
8111b344:	dec03804 	addi	sp,sp,224
8111b348:	f800283a 	ret
8111b34c:	dac02417 	ldw	r11,144(sp)
8111b350:	d9002017 	ldw	r4,128(sp)
8111b354:	5939c83a 	sub	fp,r11,r4
8111b358:	073f780e 	bge	zero,fp,8111b13c <__reset+0xfb0fb13c>
8111b35c:	02400404 	movi	r9,16
8111b360:	4f01370e 	bge	r9,fp,8111b840 <___svfiprintf_internal_r+0x1170>
8111b364:	02e044b4 	movhi	r11,33042
8111b368:	5adb1a04 	addi	r11,r11,27752
8111b36c:	dac02215 	stw	r11,136(sp)
8111b370:	028001c4 	movi	r10,7
8111b374:	00000306 	br	8111b384 <___svfiprintf_internal_r+0xcb4>
8111b378:	e73ffc04 	addi	fp,fp,-16
8111b37c:	42000204 	addi	r8,r8,8
8111b380:	4f00150e 	bge	r9,fp,8111b3d8 <___svfiprintf_internal_r+0xd08>
8111b384:	18c00404 	addi	r3,r3,16
8111b388:	10800044 	addi	r2,r2,1
8111b38c:	45000015 	stw	r20,0(r8)
8111b390:	42400115 	stw	r9,4(r8)
8111b394:	d8c01c15 	stw	r3,112(sp)
8111b398:	d8801b15 	stw	r2,108(sp)
8111b39c:	50bff60e 	bge	r10,r2,8111b378 <__reset+0xfb0fb378>
8111b3a0:	d9801a04 	addi	r6,sp,104
8111b3a4:	b80b883a 	mov	r5,r23
8111b3a8:	a809883a 	mov	r4,r21
8111b3ac:	da402c15 	stw	r9,176(sp)
8111b3b0:	da802d15 	stw	r10,180(sp)
8111b3b4:	111a5000 	call	8111a500 <__ssprint_r>
8111b3b8:	da402c17 	ldw	r9,176(sp)
8111b3bc:	da802d17 	ldw	r10,180(sp)
8111b3c0:	103fd11e 	bne	r2,zero,8111b308 <__reset+0xfb0fb308>
8111b3c4:	e73ffc04 	addi	fp,fp,-16
8111b3c8:	d8c01c17 	ldw	r3,112(sp)
8111b3cc:	d8801b17 	ldw	r2,108(sp)
8111b3d0:	d811883a 	mov	r8,sp
8111b3d4:	4f3feb16 	blt	r9,fp,8111b384 <__reset+0xfb0fb384>
8111b3d8:	dac02217 	ldw	r11,136(sp)
8111b3dc:	1f07883a 	add	r3,r3,fp
8111b3e0:	10800044 	addi	r2,r2,1
8111b3e4:	42c00015 	stw	r11,0(r8)
8111b3e8:	47000115 	stw	fp,4(r8)
8111b3ec:	d8c01c15 	stw	r3,112(sp)
8111b3f0:	d8801b15 	stw	r2,108(sp)
8111b3f4:	010001c4 	movi	r4,7
8111b3f8:	2080b616 	blt	r4,r2,8111b6d4 <___svfiprintf_internal_r+0x1004>
8111b3fc:	42000204 	addi	r8,r8,8
8111b400:	003f4e06 	br	8111b13c <__reset+0xfb0fb13c>
8111b404:	d9801a04 	addi	r6,sp,104
8111b408:	b80b883a 	mov	r5,r23
8111b40c:	a809883a 	mov	r4,r21
8111b410:	111a5000 	call	8111a500 <__ssprint_r>
8111b414:	103fbc1e 	bne	r2,zero,8111b308 <__reset+0xfb0fb308>
8111b418:	d8c01c17 	ldw	r3,112(sp)
8111b41c:	d811883a 	mov	r8,sp
8111b420:	003f7a06 	br	8111b20c <__reset+0xfb0fb20c>
8111b424:	d9801a04 	addi	r6,sp,104
8111b428:	b80b883a 	mov	r5,r23
8111b42c:	a809883a 	mov	r4,r21
8111b430:	111a5000 	call	8111a500 <__ssprint_r>
8111b434:	103fa826 	beq	r2,zero,8111b2d8 <__reset+0xfb0fb2d8>
8111b438:	003fb306 	br	8111b308 <__reset+0xfb0fb308>
8111b43c:	d9801a04 	addi	r6,sp,104
8111b440:	b80b883a 	mov	r5,r23
8111b444:	a809883a 	mov	r4,r21
8111b448:	111a5000 	call	8111a500 <__ssprint_r>
8111b44c:	103fae1e 	bne	r2,zero,8111b308 <__reset+0xfb0fb308>
8111b450:	d811883a 	mov	r8,sp
8111b454:	003cdc06 	br	8111a7c8 <__reset+0xfb0fa7c8>
8111b458:	d9801a04 	addi	r6,sp,104
8111b45c:	b80b883a 	mov	r5,r23
8111b460:	a809883a 	mov	r4,r21
8111b464:	111a5000 	call	8111a500 <__ssprint_r>
8111b468:	103fa71e 	bne	r2,zero,8111b308 <__reset+0xfb0fb308>
8111b46c:	d8c01c17 	ldw	r3,112(sp)
8111b470:	d8801b17 	ldw	r2,108(sp)
8111b474:	d811883a 	mov	r8,sp
8111b478:	003f5a06 	br	8111b1e4 <__reset+0xfb0fb1e4>
8111b47c:	d9801a04 	addi	r6,sp,104
8111b480:	b80b883a 	mov	r5,r23
8111b484:	a809883a 	mov	r4,r21
8111b488:	111a5000 	call	8111a500 <__ssprint_r>
8111b48c:	103f9e1e 	bne	r2,zero,8111b308 <__reset+0xfb0fb308>
8111b490:	d8c01c17 	ldw	r3,112(sp)
8111b494:	d8801b17 	ldw	r2,108(sp)
8111b498:	d811883a 	mov	r8,sp
8111b49c:	003f1706 	br	8111b0fc <__reset+0xfb0fb0fc>
8111b4a0:	d9801a04 	addi	r6,sp,104
8111b4a4:	b80b883a 	mov	r5,r23
8111b4a8:	a809883a 	mov	r4,r21
8111b4ac:	111a5000 	call	8111a500 <__ssprint_r>
8111b4b0:	103f951e 	bne	r2,zero,8111b308 <__reset+0xfb0fb308>
8111b4b4:	d8c01c17 	ldw	r3,112(sp)
8111b4b8:	d8801b17 	ldw	r2,108(sp)
8111b4bc:	d811883a 	mov	r8,sp
8111b4c0:	003f1b06 	br	8111b130 <__reset+0xfb0fb130>
8111b4c4:	d8001d85 	stb	zero,118(sp)
8111b4c8:	80007b16 	blt	r16,zero,8111b6b8 <___svfiprintf_internal_r+0xfe8>
8111b4cc:	00ffdfc4 	movi	r3,-129
8111b4d0:	e244b03a 	or	r2,fp,r9
8111b4d4:	90e4703a 	and	r18,r18,r3
8111b4d8:	103d7026 	beq	r2,zero,8111aa9c <__reset+0xfb0faa9c>
8111b4dc:	0015883a 	mov	r10,zero
8111b4e0:	003d7206 	br	8111aaac <__reset+0xfb0faaac>
8111b4e4:	d9801a04 	addi	r6,sp,104
8111b4e8:	b80b883a 	mov	r5,r23
8111b4ec:	a809883a 	mov	r4,r21
8111b4f0:	111a5000 	call	8111a500 <__ssprint_r>
8111b4f4:	103f841e 	bne	r2,zero,8111b308 <__reset+0xfb0fb308>
8111b4f8:	d8c01c17 	ldw	r3,112(sp)
8111b4fc:	d8801b17 	ldw	r2,108(sp)
8111b500:	d811883a 	mov	r8,sp
8111b504:	003ef006 	br	8111b0c8 <__reset+0xfb0fb0c8>
8111b508:	9080100c 	andi	r2,r18,64
8111b50c:	d8001d85 	stb	zero,118(sp)
8111b510:	dac02317 	ldw	r11,140(sp)
8111b514:	10008126 	beq	r2,zero,8111b71c <___svfiprintf_internal_r+0x104c>
8111b518:	58800104 	addi	r2,r11,4
8111b51c:	5f00000b 	ldhu	fp,0(r11)
8111b520:	0013883a 	mov	r9,zero
8111b524:	803ec30e 	bge	r16,zero,8111b034 <__reset+0xfb0fb034>
8111b528:	d8802315 	stw	r2,140(sp)
8111b52c:	0015883a 	mov	r10,zero
8111b530:	e244b03a 	or	r2,fp,r9
8111b534:	103e371e 	bne	r2,zero,8111ae14 <__reset+0xfb0fae14>
8111b538:	00800044 	movi	r2,1
8111b53c:	10803fcc 	andi	r2,r2,255
8111b540:	00c00044 	movi	r3,1
8111b544:	10c06126 	beq	r2,r3,8111b6cc <___svfiprintf_internal_r+0xffc>
8111b548:	00c00084 	movi	r3,2
8111b54c:	10fd5526 	beq	r2,r3,8111aaa4 <__reset+0xfb0faaa4>
8111b550:	003ed806 	br	8111b0b4 <__reset+0xfb0fb0b4>
8111b554:	d8802315 	stw	r2,140(sp)
8111b558:	98c00007 	ldb	r3,0(r19)
8111b55c:	003cab06 	br	8111a80c <__reset+0xfb0fa80c>
8111b560:	d9801a04 	addi	r6,sp,104
8111b564:	b80b883a 	mov	r5,r23
8111b568:	a809883a 	mov	r4,r21
8111b56c:	111a5000 	call	8111a500 <__ssprint_r>
8111b570:	103f651e 	bne	r2,zero,8111b308 <__reset+0xfb0fb308>
8111b574:	d8c01c17 	ldw	r3,112(sp)
8111b578:	003f4f06 	br	8111b2b8 <__reset+0xfb0fb2b8>
8111b57c:	00a044b4 	movhi	r2,33042
8111b580:	109ab204 	addi	r2,r2,27336
8111b584:	d8802915 	stw	r2,164(sp)
8111b588:	003d4406 	br	8111aa9c <__reset+0xfb0faa9c>
8111b58c:	dac02317 	ldw	r11,140(sp)
8111b590:	58800017 	ldw	r2,0(r11)
8111b594:	dac02517 	ldw	r11,148(sp)
8111b598:	5807d7fa 	srai	r3,r11,31
8111b59c:	dac02317 	ldw	r11,140(sp)
8111b5a0:	10c00115 	stw	r3,4(r2)
8111b5a4:	5ac00104 	addi	r11,r11,4
8111b5a8:	dac02315 	stw	r11,140(sp)
8111b5ac:	dac02517 	ldw	r11,148(sp)
8111b5b0:	12c00015 	stw	r11,0(r2)
8111b5b4:	003c6d06 	br	8111a76c <__reset+0xfb0fa76c>
8111b5b8:	9080100c 	andi	r2,r18,64
8111b5bc:	dac02317 	ldw	r11,140(sp)
8111b5c0:	103e5326 	beq	r2,zero,8111af10 <__reset+0xfb0faf10>
8111b5c4:	5f00000f 	ldh	fp,0(r11)
8111b5c8:	5ac00104 	addi	r11,r11,4
8111b5cc:	dac02315 	stw	r11,140(sp)
8111b5d0:	e013d7fa 	srai	r9,fp,31
8111b5d4:	4805883a 	mov	r2,r9
8111b5d8:	003e0706 	br	8111adf8 <__reset+0xfb0fadf8>
8111b5dc:	00800c04 	movi	r2,48
8111b5e0:	d8801d05 	stb	r2,116(sp)
8111b5e4:	d8c01d45 	stb	r3,117(sp)
8111b5e8:	d8001d85 	stb	zero,118(sp)
8111b5ec:	90800094 	ori	r2,r18,2
8111b5f0:	80008f16 	blt	r16,zero,8111b830 <___svfiprintf_internal_r+0x1160>
8111b5f4:	00bfdfc4 	movi	r2,-129
8111b5f8:	90a4703a 	and	r18,r18,r2
8111b5fc:	94800094 	ori	r18,r18,2
8111b600:	0015883a 	mov	r10,zero
8111b604:	003d2906 	br	8111aaac <__reset+0xfb0faaac>
8111b608:	98c00007 	ldb	r3,0(r19)
8111b60c:	003c7f06 	br	8111a80c <__reset+0xfb0fa80c>
8111b610:	dac02317 	ldw	r11,140(sp)
8111b614:	0013883a 	mov	r9,zero
8111b618:	5f000017 	ldw	fp,0(r11)
8111b61c:	5ac00104 	addi	r11,r11,4
8111b620:	dac02315 	stw	r11,140(sp)
8111b624:	003d1506 	br	8111aa7c <__reset+0xfb0faa7c>
8111b628:	9080100c 	andi	r2,r18,64
8111b62c:	d8001d85 	stb	zero,118(sp)
8111b630:	dac02317 	ldw	r11,140(sp)
8111b634:	10003426 	beq	r2,zero,8111b708 <___svfiprintf_internal_r+0x1038>
8111b638:	58800104 	addi	r2,r11,4
8111b63c:	5f00000b 	ldhu	fp,0(r11)
8111b640:	0013883a 	mov	r9,zero
8111b644:	803e950e 	bge	r16,zero,8111b09c <__reset+0xfb0fb09c>
8111b648:	e246b03a 	or	r3,fp,r9
8111b64c:	d8802315 	stw	r2,140(sp)
8111b650:	183d5a1e 	bne	r3,zero,8111abbc <__reset+0xfb0fabbc>
8111b654:	0015883a 	mov	r10,zero
8111b658:	0005883a 	mov	r2,zero
8111b65c:	003fb706 	br	8111b53c <__reset+0xfb0fb53c>
8111b660:	98c00043 	ldbu	r3,1(r19)
8111b664:	94800814 	ori	r18,r18,32
8111b668:	9cc00044 	addi	r19,r19,1
8111b66c:	18c03fcc 	andi	r3,r3,255
8111b670:	18c0201c 	xori	r3,r3,128
8111b674:	18ffe004 	addi	r3,r3,-128
8111b678:	003c6406 	br	8111a80c <__reset+0xfb0fa80c>
8111b67c:	d8c02315 	stw	r3,140(sp)
8111b680:	0015883a 	mov	r10,zero
8111b684:	003faa06 	br	8111b530 <__reset+0xfb0fb530>
8111b688:	dac02317 	ldw	r11,140(sp)
8111b68c:	58800017 	ldw	r2,0(r11)
8111b690:	5ac00104 	addi	r11,r11,4
8111b694:	dac02315 	stw	r11,140(sp)
8111b698:	dac02517 	ldw	r11,148(sp)
8111b69c:	12c00015 	stw	r11,0(r2)
8111b6a0:	003c3206 	br	8111a76c <__reset+0xfb0fa76c>
8111b6a4:	012044b4 	movhi	r4,33042
8111b6a8:	211ab204 	addi	r4,r4,27336
8111b6ac:	d9002915 	stw	r4,164(sp)
8111b6b0:	d8c02315 	stw	r3,140(sp)
8111b6b4:	1025883a 	mov	r18,r2
8111b6b8:	e244b03a 	or	r2,fp,r9
8111b6bc:	103f871e 	bne	r2,zero,8111b4dc <__reset+0xfb0fb4dc>
8111b6c0:	0015883a 	mov	r10,zero
8111b6c4:	00800084 	movi	r2,2
8111b6c8:	003f9c06 	br	8111b53c <__reset+0xfb0fb53c>
8111b6cc:	0039883a 	mov	fp,zero
8111b6d0:	003e5f06 	br	8111b050 <__reset+0xfb0fb050>
8111b6d4:	d9801a04 	addi	r6,sp,104
8111b6d8:	b80b883a 	mov	r5,r23
8111b6dc:	a809883a 	mov	r4,r21
8111b6e0:	111a5000 	call	8111a500 <__ssprint_r>
8111b6e4:	103f081e 	bne	r2,zero,8111b308 <__reset+0xfb0fb308>
8111b6e8:	d8c01c17 	ldw	r3,112(sp)
8111b6ec:	d8801b17 	ldw	r2,108(sp)
8111b6f0:	d811883a 	mov	r8,sp
8111b6f4:	003e9106 	br	8111b13c <__reset+0xfb0fb13c>
8111b6f8:	012044b4 	movhi	r4,33042
8111b6fc:	211b1a04 	addi	r4,r4,27752
8111b700:	d9002215 	stw	r4,136(sp)
8111b704:	003ead06 	br	8111b1bc <__reset+0xfb0fb1bc>
8111b708:	58800104 	addi	r2,r11,4
8111b70c:	5f000017 	ldw	fp,0(r11)
8111b710:	0013883a 	mov	r9,zero
8111b714:	803e610e 	bge	r16,zero,8111b09c <__reset+0xfb0fb09c>
8111b718:	003fcb06 	br	8111b648 <__reset+0xfb0fb648>
8111b71c:	58800104 	addi	r2,r11,4
8111b720:	5f000017 	ldw	fp,0(r11)
8111b724:	0013883a 	mov	r9,zero
8111b728:	803e420e 	bge	r16,zero,8111b034 <__reset+0xfb0fb034>
8111b72c:	003f7e06 	br	8111b528 <__reset+0xfb0fb528>
8111b730:	5f000017 	ldw	fp,0(r11)
8111b734:	5ac00104 	addi	r11,r11,4
8111b738:	0013883a 	mov	r9,zero
8111b73c:	dac02315 	stw	r11,140(sp)
8111b740:	003cce06 	br	8111aa7c <__reset+0xfb0faa7c>
8111b744:	8809883a 	mov	r4,r17
8111b748:	da002c15 	stw	r8,176(sp)
8111b74c:	111a4680 	call	8111a468 <strlen>
8111b750:	d8802115 	stw	r2,132(sp)
8111b754:	da801d83 	ldbu	r10,118(sp)
8111b758:	df002315 	stw	fp,140(sp)
8111b75c:	0021883a 	mov	r16,zero
8111b760:	da002c17 	ldw	r8,176(sp)
8111b764:	003cf606 	br	8111ab40 <__reset+0xfb0fab40>
8111b768:	00800184 	movi	r2,6
8111b76c:	1400012e 	bgeu	r2,r16,8111b774 <___svfiprintf_internal_r+0x10a4>
8111b770:	1021883a 	mov	r16,r2
8111b774:	dc002115 	stw	r16,132(sp)
8111b778:	8005883a 	mov	r2,r16
8111b77c:	80003c16 	blt	r16,zero,8111b870 <___svfiprintf_internal_r+0x11a0>
8111b780:	046044b4 	movhi	r17,33042
8111b784:	d8802015 	stw	r2,128(sp)
8111b788:	df002315 	stw	fp,140(sp)
8111b78c:	8c5ab704 	addi	r17,r17,27356
8111b790:	003d2e06 	br	8111ac4c <__reset+0xfb0fac4c>
8111b794:	04001004 	movi	r16,64
8111b798:	800b883a 	mov	r5,r16
8111b79c:	111093c0 	call	8111093c <_malloc_r>
8111b7a0:	dac02717 	ldw	r11,156(sp)
8111b7a4:	58800015 	stw	r2,0(r11)
8111b7a8:	58800415 	stw	r2,16(r11)
8111b7ac:	10004826 	beq	r2,zero,8111b8d0 <___svfiprintf_internal_r+0x1200>
8111b7b0:	dac02717 	ldw	r11,156(sp)
8111b7b4:	5c000515 	stw	r16,20(r11)
8111b7b8:	003bd906 	br	8111a720 <__reset+0xfb0fa720>
8111b7bc:	9080004c 	andi	r2,r18,1
8111b7c0:	0015883a 	mov	r10,zero
8111b7c4:	10000626 	beq	r2,zero,8111b7e0 <___svfiprintf_internal_r+0x1110>
8111b7c8:	dac02b17 	ldw	r11,172(sp)
8111b7cc:	00800c04 	movi	r2,48
8111b7d0:	d88019c5 	stb	r2,103(sp)
8111b7d4:	dac02115 	stw	r11,132(sp)
8111b7d8:	dc4019c4 	addi	r17,sp,103
8111b7dc:	003cd806 	br	8111ab40 <__reset+0xfb0fab40>
8111b7e0:	d8002115 	stw	zero,132(sp)
8111b7e4:	dc401a04 	addi	r17,sp,104
8111b7e8:	003cd506 	br	8111ab40 <__reset+0xfb0fab40>
8111b7ec:	012044b4 	movhi	r4,33042
8111b7f0:	211b1e04 	addi	r4,r4,27768
8111b7f4:	d9002815 	stw	r4,160(sp)
8111b7f8:	003d4306 	br	8111ad08 <__reset+0xfb0fad08>
8111b7fc:	00bfffc4 	movi	r2,-1
8111b800:	003ec606 	br	8111b31c <__reset+0xfb0fb31c>
8111b804:	00800044 	movi	r2,1
8111b808:	10803fcc 	andi	r2,r2,255
8111b80c:	00c00044 	movi	r3,1
8111b810:	10fd8026 	beq	r2,r3,8111ae14 <__reset+0xfb0fae14>
8111b814:	00c00084 	movi	r3,2
8111b818:	10fca426 	beq	r2,r3,8111aaac <__reset+0xfb0faaac>
8111b81c:	003ce806 	br	8111abc0 <__reset+0xfb0fabc0>
8111b820:	012044b4 	movhi	r4,33042
8111b824:	211b1e04 	addi	r4,r4,27768
8111b828:	d9002815 	stw	r4,160(sp)
8111b82c:	003e9906 	br	8111b294 <__reset+0xfb0fb294>
8111b830:	1025883a 	mov	r18,r2
8111b834:	0015883a 	mov	r10,zero
8111b838:	00800084 	movi	r2,2
8111b83c:	003ff206 	br	8111b808 <__reset+0xfb0fb808>
8111b840:	016044b4 	movhi	r5,33042
8111b844:	295b1a04 	addi	r5,r5,27752
8111b848:	d9402215 	stw	r5,136(sp)
8111b84c:	003ee206 	br	8111b3d8 <__reset+0xfb0fb3d8>
8111b850:	5827883a 	mov	r19,r11
8111b854:	0021883a 	mov	r16,zero
8111b858:	003bed06 	br	8111a810 <__reset+0xfb0fa810>
8111b85c:	dc002115 	stw	r16,132(sp)
8111b860:	da801d83 	ldbu	r10,118(sp)
8111b864:	df002315 	stw	fp,140(sp)
8111b868:	0021883a 	mov	r16,zero
8111b86c:	003cb406 	br	8111ab40 <__reset+0xfb0fab40>
8111b870:	0005883a 	mov	r2,zero
8111b874:	003fc206 	br	8111b780 <__reset+0xfb0fb780>
8111b878:	d8802317 	ldw	r2,140(sp)
8111b87c:	98c00043 	ldbu	r3,1(r19)
8111b880:	5827883a 	mov	r19,r11
8111b884:	14000017 	ldw	r16,0(r2)
8111b888:	10800104 	addi	r2,r2,4
8111b88c:	d8802315 	stw	r2,140(sp)
8111b890:	803f760e 	bge	r16,zero,8111b66c <__reset+0xfb0fb66c>
8111b894:	18c03fcc 	andi	r3,r3,255
8111b898:	18c0201c 	xori	r3,r3,128
8111b89c:	043fffc4 	movi	r16,-1
8111b8a0:	18ffe004 	addi	r3,r3,-128
8111b8a4:	003bd906 	br	8111a80c <__reset+0xfb0fa80c>
8111b8a8:	d9c01d85 	stb	r7,118(sp)
8111b8ac:	003cb606 	br	8111ab88 <__reset+0xfb0fab88>
8111b8b0:	d9c01d85 	stb	r7,118(sp)
8111b8b4:	003d2106 	br	8111ad3c <__reset+0xfb0fad3c>
8111b8b8:	d9c01d85 	stb	r7,118(sp)
8111b8bc:	003d8e06 	br	8111aef8 <__reset+0xfb0faef8>
8111b8c0:	d9c01d85 	stb	r7,118(sp)
8111b8c4:	003db306 	br	8111af94 <__reset+0xfb0faf94>
8111b8c8:	d9c01d85 	stb	r7,118(sp)
8111b8cc:	003c8a06 	br	8111aaf8 <__reset+0xfb0faaf8>
8111b8d0:	dac02a17 	ldw	r11,168(sp)
8111b8d4:	00800304 	movi	r2,12
8111b8d8:	58800015 	stw	r2,0(r11)
8111b8dc:	00bfffc4 	movi	r2,-1
8111b8e0:	003e8e06 	br	8111b31c <__reset+0xfb0fb31c>
8111b8e4:	d9c01d85 	stb	r7,118(sp)
8111b8e8:	003dc706 	br	8111b008 <__reset+0xfb0fb008>
8111b8ec:	d9c01d85 	stb	r7,118(sp)
8111b8f0:	003ddf06 	br	8111b070 <__reset+0xfb0fb070>
8111b8f4:	d9c01d85 	stb	r7,118(sp)
8111b8f8:	003d3706 	br	8111add8 <__reset+0xfb0fadd8>
8111b8fc:	d9c01d85 	stb	r7,118(sp)
8111b900:	003c5406 	br	8111aa54 <__reset+0xfb0faa54>
8111b904:	d9c01d85 	stb	r7,118(sp)
8111b908:	003d1d06 	br	8111ad80 <__reset+0xfb0fad80>

8111b90c <__sprint_r.part.0>:
8111b90c:	28801917 	ldw	r2,100(r5)
8111b910:	defff604 	addi	sp,sp,-40
8111b914:	dd400515 	stw	r21,20(sp)
8111b918:	dfc00915 	stw	ra,36(sp)
8111b91c:	df000815 	stw	fp,32(sp)
8111b920:	ddc00715 	stw	r23,28(sp)
8111b924:	dd800615 	stw	r22,24(sp)
8111b928:	dd000415 	stw	r20,16(sp)
8111b92c:	dcc00315 	stw	r19,12(sp)
8111b930:	dc800215 	stw	r18,8(sp)
8111b934:	dc400115 	stw	r17,4(sp)
8111b938:	dc000015 	stw	r16,0(sp)
8111b93c:	1088000c 	andi	r2,r2,8192
8111b940:	302b883a 	mov	r21,r6
8111b944:	10002e26 	beq	r2,zero,8111ba00 <__sprint_r.part.0+0xf4>
8111b948:	30800217 	ldw	r2,8(r6)
8111b94c:	35800017 	ldw	r22,0(r6)
8111b950:	10002926 	beq	r2,zero,8111b9f8 <__sprint_r.part.0+0xec>
8111b954:	2827883a 	mov	r19,r5
8111b958:	2029883a 	mov	r20,r4
8111b95c:	b5c00104 	addi	r23,r22,4
8111b960:	04bfffc4 	movi	r18,-1
8111b964:	bc400017 	ldw	r17,0(r23)
8111b968:	b4000017 	ldw	r16,0(r22)
8111b96c:	0039883a 	mov	fp,zero
8111b970:	8822d0ba 	srli	r17,r17,2
8111b974:	8800031e 	bne	r17,zero,8111b984 <__sprint_r.part.0+0x78>
8111b978:	00001806 	br	8111b9dc <__sprint_r.part.0+0xd0>
8111b97c:	84000104 	addi	r16,r16,4
8111b980:	8f001526 	beq	r17,fp,8111b9d8 <__sprint_r.part.0+0xcc>
8111b984:	81400017 	ldw	r5,0(r16)
8111b988:	980d883a 	mov	r6,r19
8111b98c:	a009883a 	mov	r4,r20
8111b990:	111d2800 	call	8111d280 <_fputwc_r>
8111b994:	e7000044 	addi	fp,fp,1
8111b998:	14bff81e 	bne	r2,r18,8111b97c <__reset+0xfb0fb97c>
8111b99c:	9005883a 	mov	r2,r18
8111b9a0:	a8000215 	stw	zero,8(r21)
8111b9a4:	a8000115 	stw	zero,4(r21)
8111b9a8:	dfc00917 	ldw	ra,36(sp)
8111b9ac:	df000817 	ldw	fp,32(sp)
8111b9b0:	ddc00717 	ldw	r23,28(sp)
8111b9b4:	dd800617 	ldw	r22,24(sp)
8111b9b8:	dd400517 	ldw	r21,20(sp)
8111b9bc:	dd000417 	ldw	r20,16(sp)
8111b9c0:	dcc00317 	ldw	r19,12(sp)
8111b9c4:	dc800217 	ldw	r18,8(sp)
8111b9c8:	dc400117 	ldw	r17,4(sp)
8111b9cc:	dc000017 	ldw	r16,0(sp)
8111b9d0:	dec00a04 	addi	sp,sp,40
8111b9d4:	f800283a 	ret
8111b9d8:	a8800217 	ldw	r2,8(r21)
8111b9dc:	8c63883a 	add	r17,r17,r17
8111b9e0:	8c63883a 	add	r17,r17,r17
8111b9e4:	1445c83a 	sub	r2,r2,r17
8111b9e8:	a8800215 	stw	r2,8(r21)
8111b9ec:	b5800204 	addi	r22,r22,8
8111b9f0:	bdc00204 	addi	r23,r23,8
8111b9f4:	103fdb1e 	bne	r2,zero,8111b964 <__reset+0xfb0fb964>
8111b9f8:	0005883a 	mov	r2,zero
8111b9fc:	003fe806 	br	8111b9a0 <__reset+0xfb0fb9a0>
8111ba00:	11183440 	call	81118344 <__sfvwrite_r>
8111ba04:	003fe606 	br	8111b9a0 <__reset+0xfb0fb9a0>

8111ba08 <__sprint_r>:
8111ba08:	30c00217 	ldw	r3,8(r6)
8111ba0c:	18000126 	beq	r3,zero,8111ba14 <__sprint_r+0xc>
8111ba10:	111b90c1 	jmpi	8111b90c <__sprint_r.part.0>
8111ba14:	30000115 	stw	zero,4(r6)
8111ba18:	0005883a 	mov	r2,zero
8111ba1c:	f800283a 	ret

8111ba20 <___vfiprintf_internal_r>:
8111ba20:	deffc904 	addi	sp,sp,-220
8111ba24:	df003515 	stw	fp,212(sp)
8111ba28:	dd003115 	stw	r20,196(sp)
8111ba2c:	dfc03615 	stw	ra,216(sp)
8111ba30:	ddc03415 	stw	r23,208(sp)
8111ba34:	dd803315 	stw	r22,204(sp)
8111ba38:	dd403215 	stw	r21,200(sp)
8111ba3c:	dcc03015 	stw	r19,192(sp)
8111ba40:	dc802f15 	stw	r18,188(sp)
8111ba44:	dc402e15 	stw	r17,184(sp)
8111ba48:	dc002d15 	stw	r16,180(sp)
8111ba4c:	d9002015 	stw	r4,128(sp)
8111ba50:	d9c02215 	stw	r7,136(sp)
8111ba54:	2829883a 	mov	r20,r5
8111ba58:	3039883a 	mov	fp,r6
8111ba5c:	20000226 	beq	r4,zero,8111ba68 <___vfiprintf_internal_r+0x48>
8111ba60:	20800e17 	ldw	r2,56(r4)
8111ba64:	1000cf26 	beq	r2,zero,8111bda4 <___vfiprintf_internal_r+0x384>
8111ba68:	a080030b 	ldhu	r2,12(r20)
8111ba6c:	10c8000c 	andi	r3,r2,8192
8111ba70:	1800061e 	bne	r3,zero,8111ba8c <___vfiprintf_internal_r+0x6c>
8111ba74:	a1001917 	ldw	r4,100(r20)
8111ba78:	00f7ffc4 	movi	r3,-8193
8111ba7c:	10880014 	ori	r2,r2,8192
8111ba80:	20c6703a 	and	r3,r4,r3
8111ba84:	a080030d 	sth	r2,12(r20)
8111ba88:	a0c01915 	stw	r3,100(r20)
8111ba8c:	10c0020c 	andi	r3,r2,8
8111ba90:	1800a926 	beq	r3,zero,8111bd38 <___vfiprintf_internal_r+0x318>
8111ba94:	a0c00417 	ldw	r3,16(r20)
8111ba98:	1800a726 	beq	r3,zero,8111bd38 <___vfiprintf_internal_r+0x318>
8111ba9c:	1080068c 	andi	r2,r2,26
8111baa0:	00c00284 	movi	r3,10
8111baa4:	10c0ac26 	beq	r2,r3,8111bd58 <___vfiprintf_internal_r+0x338>
8111baa8:	da801a04 	addi	r10,sp,104
8111baac:	da801e15 	stw	r10,120(sp)
8111bab0:	d8801e17 	ldw	r2,120(sp)
8111bab4:	da8019c4 	addi	r10,sp,103
8111bab8:	05a044b4 	movhi	r22,33042
8111babc:	05e044b4 	movhi	r23,33042
8111bac0:	da801f15 	stw	r10,124(sp)
8111bac4:	1295c83a 	sub	r10,r2,r10
8111bac8:	b59b2604 	addi	r22,r22,27800
8111bacc:	bddb2204 	addi	r23,r23,27784
8111bad0:	dec01a15 	stw	sp,104(sp)
8111bad4:	d8001c15 	stw	zero,112(sp)
8111bad8:	d8001b15 	stw	zero,108(sp)
8111badc:	d8002615 	stw	zero,152(sp)
8111bae0:	d8002315 	stw	zero,140(sp)
8111bae4:	da802715 	stw	r10,156(sp)
8111bae8:	d811883a 	mov	r8,sp
8111baec:	dd002115 	stw	r20,132(sp)
8111baf0:	e021883a 	mov	r16,fp
8111baf4:	80800007 	ldb	r2,0(r16)
8111baf8:	1003ea26 	beq	r2,zero,8111caa4 <___vfiprintf_internal_r+0x1084>
8111bafc:	00c00944 	movi	r3,37
8111bb00:	8025883a 	mov	r18,r16
8111bb04:	10c0021e 	bne	r2,r3,8111bb10 <___vfiprintf_internal_r+0xf0>
8111bb08:	00001606 	br	8111bb64 <___vfiprintf_internal_r+0x144>
8111bb0c:	10c00326 	beq	r2,r3,8111bb1c <___vfiprintf_internal_r+0xfc>
8111bb10:	94800044 	addi	r18,r18,1
8111bb14:	90800007 	ldb	r2,0(r18)
8111bb18:	103ffc1e 	bne	r2,zero,8111bb0c <__reset+0xfb0fbb0c>
8111bb1c:	9423c83a 	sub	r17,r18,r16
8111bb20:	88001026 	beq	r17,zero,8111bb64 <___vfiprintf_internal_r+0x144>
8111bb24:	d8c01c17 	ldw	r3,112(sp)
8111bb28:	d8801b17 	ldw	r2,108(sp)
8111bb2c:	44000015 	stw	r16,0(r8)
8111bb30:	88c7883a 	add	r3,r17,r3
8111bb34:	10800044 	addi	r2,r2,1
8111bb38:	44400115 	stw	r17,4(r8)
8111bb3c:	d8c01c15 	stw	r3,112(sp)
8111bb40:	d8801b15 	stw	r2,108(sp)
8111bb44:	010001c4 	movi	r4,7
8111bb48:	2080760e 	bge	r4,r2,8111bd24 <___vfiprintf_internal_r+0x304>
8111bb4c:	1803821e 	bne	r3,zero,8111c958 <___vfiprintf_internal_r+0xf38>
8111bb50:	da802317 	ldw	r10,140(sp)
8111bb54:	d8001b15 	stw	zero,108(sp)
8111bb58:	d811883a 	mov	r8,sp
8111bb5c:	5455883a 	add	r10,r10,r17
8111bb60:	da802315 	stw	r10,140(sp)
8111bb64:	90800007 	ldb	r2,0(r18)
8111bb68:	10044626 	beq	r2,zero,8111cc84 <___vfiprintf_internal_r+0x1264>
8111bb6c:	90c00047 	ldb	r3,1(r18)
8111bb70:	94000044 	addi	r16,r18,1
8111bb74:	d8001d85 	stb	zero,118(sp)
8111bb78:	0009883a 	mov	r4,zero
8111bb7c:	000f883a 	mov	r7,zero
8111bb80:	027fffc4 	movi	r9,-1
8111bb84:	0023883a 	mov	r17,zero
8111bb88:	0029883a 	mov	r20,zero
8111bb8c:	01401604 	movi	r5,88
8111bb90:	01800244 	movi	r6,9
8111bb94:	03400a84 	movi	r13,42
8111bb98:	03001b04 	movi	r12,108
8111bb9c:	84000044 	addi	r16,r16,1
8111bba0:	18bff804 	addi	r2,r3,-32
8111bba4:	28827336 	bltu	r5,r2,8111c574 <___vfiprintf_internal_r+0xb54>
8111bba8:	100490ba 	slli	r2,r2,2
8111bbac:	02a044b4 	movhi	r10,33042
8111bbb0:	52aef004 	addi	r10,r10,-17472
8111bbb4:	1285883a 	add	r2,r2,r10
8111bbb8:	10800017 	ldw	r2,0(r2)
8111bbbc:	1000683a 	jmp	r2
8111bbc0:	8111c2a8 	cmpgeui	r4,r16,18186
8111bbc4:	8111c574 	orhi	r4,r16,18197
8111bbc8:	8111c574 	orhi	r4,r16,18197
8111bbcc:	8111c2c8 	cmpgei	r4,r16,18187
8111bbd0:	8111c574 	orhi	r4,r16,18197
8111bbd4:	8111c574 	orhi	r4,r16,18197
8111bbd8:	8111c574 	orhi	r4,r16,18197
8111bbdc:	8111c574 	orhi	r4,r16,18197
8111bbe0:	8111c574 	orhi	r4,r16,18197
8111bbe4:	8111c574 	orhi	r4,r16,18197
8111bbe8:	8111c4b0 	cmpltui	r4,r16,18194
8111bbec:	8111c4cc 	andi	r4,r16,18195
8111bbf0:	8111c574 	orhi	r4,r16,18197
8111bbf4:	8111bdb4 	orhi	r4,r16,18166
8111bbf8:	8111c4dc 	xori	r4,r16,18195
8111bbfc:	8111c574 	orhi	r4,r16,18197
8111bc00:	8111c2d4 	ori	r4,r16,18187
8111bc04:	8111c2e0 	cmpeqi	r4,r16,18187
8111bc08:	8111c2e0 	cmpeqi	r4,r16,18187
8111bc0c:	8111c2e0 	cmpeqi	r4,r16,18187
8111bc10:	8111c2e0 	cmpeqi	r4,r16,18187
8111bc14:	8111c2e0 	cmpeqi	r4,r16,18187
8111bc18:	8111c2e0 	cmpeqi	r4,r16,18187
8111bc1c:	8111c2e0 	cmpeqi	r4,r16,18187
8111bc20:	8111c2e0 	cmpeqi	r4,r16,18187
8111bc24:	8111c2e0 	cmpeqi	r4,r16,18187
8111bc28:	8111c574 	orhi	r4,r16,18197
8111bc2c:	8111c574 	orhi	r4,r16,18197
8111bc30:	8111c574 	orhi	r4,r16,18197
8111bc34:	8111c574 	orhi	r4,r16,18197
8111bc38:	8111c574 	orhi	r4,r16,18197
8111bc3c:	8111c574 	orhi	r4,r16,18197
8111bc40:	8111c574 	orhi	r4,r16,18197
8111bc44:	8111c574 	orhi	r4,r16,18197
8111bc48:	8111c574 	orhi	r4,r16,18197
8111bc4c:	8111c574 	orhi	r4,r16,18197
8111bc50:	8111c30c 	andi	r4,r16,18188
8111bc54:	8111c574 	orhi	r4,r16,18197
8111bc58:	8111c574 	orhi	r4,r16,18197
8111bc5c:	8111c574 	orhi	r4,r16,18197
8111bc60:	8111c574 	orhi	r4,r16,18197
8111bc64:	8111c574 	orhi	r4,r16,18197
8111bc68:	8111c574 	orhi	r4,r16,18197
8111bc6c:	8111c574 	orhi	r4,r16,18197
8111bc70:	8111c574 	orhi	r4,r16,18197
8111bc74:	8111c574 	orhi	r4,r16,18197
8111bc78:	8111c574 	orhi	r4,r16,18197
8111bc7c:	8111c344 	addi	r4,r16,18189
8111bc80:	8111c574 	orhi	r4,r16,18197
8111bc84:	8111c574 	orhi	r4,r16,18197
8111bc88:	8111c574 	orhi	r4,r16,18197
8111bc8c:	8111c574 	orhi	r4,r16,18197
8111bc90:	8111c574 	orhi	r4,r16,18197
8111bc94:	8111c39c 	xori	r4,r16,18190
8111bc98:	8111c574 	orhi	r4,r16,18197
8111bc9c:	8111c574 	orhi	r4,r16,18197
8111bca0:	8111c40c 	andi	r4,r16,18192
8111bca4:	8111c574 	orhi	r4,r16,18197
8111bca8:	8111c574 	orhi	r4,r16,18197
8111bcac:	8111c574 	orhi	r4,r16,18197
8111bcb0:	8111c574 	orhi	r4,r16,18197
8111bcb4:	8111c574 	orhi	r4,r16,18197
8111bcb8:	8111c574 	orhi	r4,r16,18197
8111bcbc:	8111c574 	orhi	r4,r16,18197
8111bcc0:	8111c574 	orhi	r4,r16,18197
8111bcc4:	8111c574 	orhi	r4,r16,18197
8111bcc8:	8111c574 	orhi	r4,r16,18197
8111bccc:	8111c1b8 	rdprs	r4,r16,18182
8111bcd0:	8111c1e4 	muli	r4,r16,18183
8111bcd4:	8111c574 	orhi	r4,r16,18197
8111bcd8:	8111c574 	orhi	r4,r16,18197
8111bcdc:	8111c574 	orhi	r4,r16,18197
8111bce0:	8111c51c 	xori	r4,r16,18196
8111bce4:	8111c1e4 	muli	r4,r16,18183
8111bce8:	8111c574 	orhi	r4,r16,18197
8111bcec:	8111c574 	orhi	r4,r16,18197
8111bcf0:	8111c078 	rdprs	r4,r16,18177
8111bcf4:	8111c574 	orhi	r4,r16,18197
8111bcf8:	8111c088 	cmpgei	r4,r16,18178
8111bcfc:	8111c0c4 	addi	r4,r16,18179
8111bd00:	8111bdc0 	call	88111bdc <__reset+0x20f1bdc>
8111bd04:	8111c06c 	andhi	r4,r16,18177
8111bd08:	8111c574 	orhi	r4,r16,18197
8111bd0c:	8111c448 	cmpgei	r4,r16,18193
8111bd10:	8111c574 	orhi	r4,r16,18197
8111bd14:	8111c4a0 	cmpeqi	r4,r16,18194
8111bd18:	8111c574 	orhi	r4,r16,18197
8111bd1c:	8111c574 	orhi	r4,r16,18197
8111bd20:	8111c164 	muli	r4,r16,18181
8111bd24:	42000204 	addi	r8,r8,8
8111bd28:	da802317 	ldw	r10,140(sp)
8111bd2c:	5455883a 	add	r10,r10,r17
8111bd30:	da802315 	stw	r10,140(sp)
8111bd34:	003f8b06 	br	8111bb64 <__reset+0xfb0fbb64>
8111bd38:	d9002017 	ldw	r4,128(sp)
8111bd3c:	a00b883a 	mov	r5,r20
8111bd40:	1115dec0 	call	81115dec <__swsetup_r>
8111bd44:	1003b11e 	bne	r2,zero,8111cc0c <___vfiprintf_internal_r+0x11ec>
8111bd48:	a080030b 	ldhu	r2,12(r20)
8111bd4c:	00c00284 	movi	r3,10
8111bd50:	1080068c 	andi	r2,r2,26
8111bd54:	10ff541e 	bne	r2,r3,8111baa8 <__reset+0xfb0fbaa8>
8111bd58:	a080038f 	ldh	r2,14(r20)
8111bd5c:	103f5216 	blt	r2,zero,8111baa8 <__reset+0xfb0fbaa8>
8111bd60:	d9c02217 	ldw	r7,136(sp)
8111bd64:	d9002017 	ldw	r4,128(sp)
8111bd68:	e00d883a 	mov	r6,fp
8111bd6c:	a00b883a 	mov	r5,r20
8111bd70:	111ce980 	call	8111ce98 <__sbprintf>
8111bd74:	dfc03617 	ldw	ra,216(sp)
8111bd78:	df003517 	ldw	fp,212(sp)
8111bd7c:	ddc03417 	ldw	r23,208(sp)
8111bd80:	dd803317 	ldw	r22,204(sp)
8111bd84:	dd403217 	ldw	r21,200(sp)
8111bd88:	dd003117 	ldw	r20,196(sp)
8111bd8c:	dcc03017 	ldw	r19,192(sp)
8111bd90:	dc802f17 	ldw	r18,188(sp)
8111bd94:	dc402e17 	ldw	r17,184(sp)
8111bd98:	dc002d17 	ldw	r16,180(sp)
8111bd9c:	dec03704 	addi	sp,sp,220
8111bda0:	f800283a 	ret
8111bda4:	1117e140 	call	81117e14 <__sinit>
8111bda8:	003f2f06 	br	8111ba68 <__reset+0xfb0fba68>
8111bdac:	0463c83a 	sub	r17,zero,r17
8111bdb0:	d8802215 	stw	r2,136(sp)
8111bdb4:	a5000114 	ori	r20,r20,4
8111bdb8:	80c00007 	ldb	r3,0(r16)
8111bdbc:	003f7706 	br	8111bb9c <__reset+0xfb0fbb9c>
8111bdc0:	00800c04 	movi	r2,48
8111bdc4:	da802217 	ldw	r10,136(sp)
8111bdc8:	d8801d05 	stb	r2,116(sp)
8111bdcc:	00801e04 	movi	r2,120
8111bdd0:	d8801d45 	stb	r2,117(sp)
8111bdd4:	d8001d85 	stb	zero,118(sp)
8111bdd8:	50c00104 	addi	r3,r10,4
8111bddc:	54800017 	ldw	r18,0(r10)
8111bde0:	0027883a 	mov	r19,zero
8111bde4:	a0800094 	ori	r2,r20,2
8111bde8:	48030b16 	blt	r9,zero,8111ca18 <___vfiprintf_internal_r+0xff8>
8111bdec:	00bfdfc4 	movi	r2,-129
8111bdf0:	a096703a 	and	r11,r20,r2
8111bdf4:	d8c02215 	stw	r3,136(sp)
8111bdf8:	5d000094 	ori	r20,r11,2
8111bdfc:	90032b1e 	bne	r18,zero,8111caac <___vfiprintf_internal_r+0x108c>
8111be00:	00a044b4 	movhi	r2,33042
8111be04:	109ab204 	addi	r2,r2,27336
8111be08:	d8802615 	stw	r2,152(sp)
8111be0c:	0039883a 	mov	fp,zero
8111be10:	48017b1e 	bne	r9,zero,8111c400 <___vfiprintf_internal_r+0x9e0>
8111be14:	0013883a 	mov	r9,zero
8111be18:	0027883a 	mov	r19,zero
8111be1c:	dd401a04 	addi	r21,sp,104
8111be20:	4825883a 	mov	r18,r9
8111be24:	4cc0010e 	bge	r9,r19,8111be2c <___vfiprintf_internal_r+0x40c>
8111be28:	9825883a 	mov	r18,r19
8111be2c:	e7003fcc 	andi	fp,fp,255
8111be30:	e700201c 	xori	fp,fp,128
8111be34:	e73fe004 	addi	fp,fp,-128
8111be38:	e0000126 	beq	fp,zero,8111be40 <___vfiprintf_internal_r+0x420>
8111be3c:	94800044 	addi	r18,r18,1
8111be40:	a380008c 	andi	r14,r20,2
8111be44:	70000126 	beq	r14,zero,8111be4c <___vfiprintf_internal_r+0x42c>
8111be48:	94800084 	addi	r18,r18,2
8111be4c:	a700210c 	andi	fp,r20,132
8111be50:	e001df1e 	bne	fp,zero,8111c5d0 <___vfiprintf_internal_r+0xbb0>
8111be54:	8c87c83a 	sub	r3,r17,r18
8111be58:	00c1dd0e 	bge	zero,r3,8111c5d0 <___vfiprintf_internal_r+0xbb0>
8111be5c:	01c00404 	movi	r7,16
8111be60:	d8801c17 	ldw	r2,112(sp)
8111be64:	38c3ad0e 	bge	r7,r3,8111cd1c <___vfiprintf_internal_r+0x12fc>
8111be68:	02a044b4 	movhi	r10,33042
8111be6c:	529b2604 	addi	r10,r10,27800
8111be70:	dc002915 	stw	r16,164(sp)
8111be74:	d9801b17 	ldw	r6,108(sp)
8111be78:	da802415 	stw	r10,144(sp)
8111be7c:	03c001c4 	movi	r15,7
8111be80:	da402515 	stw	r9,148(sp)
8111be84:	db802815 	stw	r14,160(sp)
8111be88:	1821883a 	mov	r16,r3
8111be8c:	00000506 	br	8111bea4 <___vfiprintf_internal_r+0x484>
8111be90:	31400084 	addi	r5,r6,2
8111be94:	42000204 	addi	r8,r8,8
8111be98:	200d883a 	mov	r6,r4
8111be9c:	843ffc04 	addi	r16,r16,-16
8111bea0:	3c000d0e 	bge	r7,r16,8111bed8 <___vfiprintf_internal_r+0x4b8>
8111bea4:	10800404 	addi	r2,r2,16
8111bea8:	31000044 	addi	r4,r6,1
8111beac:	45800015 	stw	r22,0(r8)
8111beb0:	41c00115 	stw	r7,4(r8)
8111beb4:	d8801c15 	stw	r2,112(sp)
8111beb8:	d9001b15 	stw	r4,108(sp)
8111bebc:	793ff40e 	bge	r15,r4,8111be90 <__reset+0xfb0fbe90>
8111bec0:	1001b51e 	bne	r2,zero,8111c598 <___vfiprintf_internal_r+0xb78>
8111bec4:	843ffc04 	addi	r16,r16,-16
8111bec8:	000d883a 	mov	r6,zero
8111becc:	01400044 	movi	r5,1
8111bed0:	d811883a 	mov	r8,sp
8111bed4:	3c3ff316 	blt	r7,r16,8111bea4 <__reset+0xfb0fbea4>
8111bed8:	8007883a 	mov	r3,r16
8111bedc:	da402517 	ldw	r9,148(sp)
8111bee0:	db802817 	ldw	r14,160(sp)
8111bee4:	dc002917 	ldw	r16,164(sp)
8111bee8:	da802417 	ldw	r10,144(sp)
8111beec:	1885883a 	add	r2,r3,r2
8111bef0:	40c00115 	stw	r3,4(r8)
8111bef4:	42800015 	stw	r10,0(r8)
8111bef8:	d8801c15 	stw	r2,112(sp)
8111befc:	d9401b15 	stw	r5,108(sp)
8111bf00:	00c001c4 	movi	r3,7
8111bf04:	19426016 	blt	r3,r5,8111c888 <___vfiprintf_internal_r+0xe68>
8111bf08:	d8c01d87 	ldb	r3,118(sp)
8111bf0c:	42000204 	addi	r8,r8,8
8111bf10:	29000044 	addi	r4,r5,1
8111bf14:	1801b31e 	bne	r3,zero,8111c5e4 <___vfiprintf_internal_r+0xbc4>
8111bf18:	7001c026 	beq	r14,zero,8111c61c <___vfiprintf_internal_r+0xbfc>
8111bf1c:	d8c01d04 	addi	r3,sp,116
8111bf20:	10800084 	addi	r2,r2,2
8111bf24:	40c00015 	stw	r3,0(r8)
8111bf28:	00c00084 	movi	r3,2
8111bf2c:	40c00115 	stw	r3,4(r8)
8111bf30:	d8801c15 	stw	r2,112(sp)
8111bf34:	d9001b15 	stw	r4,108(sp)
8111bf38:	00c001c4 	movi	r3,7
8111bf3c:	1902650e 	bge	r3,r4,8111c8d4 <___vfiprintf_internal_r+0xeb4>
8111bf40:	10029a1e 	bne	r2,zero,8111c9ac <___vfiprintf_internal_r+0xf8c>
8111bf44:	00c02004 	movi	r3,128
8111bf48:	01000044 	movi	r4,1
8111bf4c:	000b883a 	mov	r5,zero
8111bf50:	d811883a 	mov	r8,sp
8111bf54:	e0c1b31e 	bne	fp,r3,8111c624 <___vfiprintf_internal_r+0xc04>
8111bf58:	8cb9c83a 	sub	fp,r17,r18
8111bf5c:	0701b10e 	bge	zero,fp,8111c624 <___vfiprintf_internal_r+0xc04>
8111bf60:	01c00404 	movi	r7,16
8111bf64:	3f03890e 	bge	r7,fp,8111cd8c <___vfiprintf_internal_r+0x136c>
8111bf68:	00e044b4 	movhi	r3,33042
8111bf6c:	18db2204 	addi	r3,r3,27784
8111bf70:	d8c02415 	stw	r3,144(sp)
8111bf74:	8007883a 	mov	r3,r16
8111bf78:	034001c4 	movi	r13,7
8111bf7c:	e021883a 	mov	r16,fp
8111bf80:	da402515 	stw	r9,148(sp)
8111bf84:	1839883a 	mov	fp,r3
8111bf88:	00000506 	br	8111bfa0 <___vfiprintf_internal_r+0x580>
8111bf8c:	29800084 	addi	r6,r5,2
8111bf90:	42000204 	addi	r8,r8,8
8111bf94:	180b883a 	mov	r5,r3
8111bf98:	843ffc04 	addi	r16,r16,-16
8111bf9c:	3c000d0e 	bge	r7,r16,8111bfd4 <___vfiprintf_internal_r+0x5b4>
8111bfa0:	10800404 	addi	r2,r2,16
8111bfa4:	28c00044 	addi	r3,r5,1
8111bfa8:	45c00015 	stw	r23,0(r8)
8111bfac:	41c00115 	stw	r7,4(r8)
8111bfb0:	d8801c15 	stw	r2,112(sp)
8111bfb4:	d8c01b15 	stw	r3,108(sp)
8111bfb8:	68fff40e 	bge	r13,r3,8111bf8c <__reset+0xfb0fbf8c>
8111bfbc:	1002241e 	bne	r2,zero,8111c850 <___vfiprintf_internal_r+0xe30>
8111bfc0:	843ffc04 	addi	r16,r16,-16
8111bfc4:	01800044 	movi	r6,1
8111bfc8:	000b883a 	mov	r5,zero
8111bfcc:	d811883a 	mov	r8,sp
8111bfd0:	3c3ff316 	blt	r7,r16,8111bfa0 <__reset+0xfb0fbfa0>
8111bfd4:	da402517 	ldw	r9,148(sp)
8111bfd8:	e007883a 	mov	r3,fp
8111bfdc:	8039883a 	mov	fp,r16
8111bfe0:	1821883a 	mov	r16,r3
8111bfe4:	d8c02417 	ldw	r3,144(sp)
8111bfe8:	1705883a 	add	r2,r2,fp
8111bfec:	47000115 	stw	fp,4(r8)
8111bff0:	40c00015 	stw	r3,0(r8)
8111bff4:	d8801c15 	stw	r2,112(sp)
8111bff8:	d9801b15 	stw	r6,108(sp)
8111bffc:	00c001c4 	movi	r3,7
8111c000:	19827616 	blt	r3,r6,8111c9dc <___vfiprintf_internal_r+0xfbc>
8111c004:	4cf9c83a 	sub	fp,r9,r19
8111c008:	42000204 	addi	r8,r8,8
8111c00c:	31000044 	addi	r4,r6,1
8111c010:	300b883a 	mov	r5,r6
8111c014:	07018516 	blt	zero,fp,8111c62c <___vfiprintf_internal_r+0xc0c>
8111c018:	9885883a 	add	r2,r19,r2
8111c01c:	45400015 	stw	r21,0(r8)
8111c020:	44c00115 	stw	r19,4(r8)
8111c024:	d8801c15 	stw	r2,112(sp)
8111c028:	d9001b15 	stw	r4,108(sp)
8111c02c:	00c001c4 	movi	r3,7
8111c030:	1901dd0e 	bge	r3,r4,8111c7a8 <___vfiprintf_internal_r+0xd88>
8111c034:	1002401e 	bne	r2,zero,8111c938 <___vfiprintf_internal_r+0xf18>
8111c038:	d8001b15 	stw	zero,108(sp)
8111c03c:	a2c0010c 	andi	r11,r20,4
8111c040:	58000226 	beq	r11,zero,8111c04c <___vfiprintf_internal_r+0x62c>
8111c044:	8ca7c83a 	sub	r19,r17,r18
8111c048:	04c2f216 	blt	zero,r19,8111cc14 <___vfiprintf_internal_r+0x11f4>
8111c04c:	8c80010e 	bge	r17,r18,8111c054 <___vfiprintf_internal_r+0x634>
8111c050:	9023883a 	mov	r17,r18
8111c054:	da802317 	ldw	r10,140(sp)
8111c058:	5455883a 	add	r10,r10,r17
8111c05c:	da802315 	stw	r10,140(sp)
8111c060:	d8001b15 	stw	zero,108(sp)
8111c064:	d811883a 	mov	r8,sp
8111c068:	003ea206 	br	8111baf4 <__reset+0xfb0fbaf4>
8111c06c:	a5000814 	ori	r20,r20,32
8111c070:	80c00007 	ldb	r3,0(r16)
8111c074:	003ec906 	br	8111bb9c <__reset+0xfb0fbb9c>
8111c078:	80c00007 	ldb	r3,0(r16)
8111c07c:	1b030926 	beq	r3,r12,8111cca4 <___vfiprintf_internal_r+0x1284>
8111c080:	a5000414 	ori	r20,r20,16
8111c084:	003ec506 	br	8111bb9c <__reset+0xfb0fbb9c>
8111c088:	21003fcc 	andi	r4,r4,255
8111c08c:	20035e1e 	bne	r4,zero,8111ce08 <___vfiprintf_internal_r+0x13e8>
8111c090:	a080080c 	andi	r2,r20,32
8111c094:	1002a526 	beq	r2,zero,8111cb2c <___vfiprintf_internal_r+0x110c>
8111c098:	da802217 	ldw	r10,136(sp)
8111c09c:	50800017 	ldw	r2,0(r10)
8111c0a0:	da802317 	ldw	r10,140(sp)
8111c0a4:	5007d7fa 	srai	r3,r10,31
8111c0a8:	da802217 	ldw	r10,136(sp)
8111c0ac:	10c00115 	stw	r3,4(r2)
8111c0b0:	52800104 	addi	r10,r10,4
8111c0b4:	da802215 	stw	r10,136(sp)
8111c0b8:	da802317 	ldw	r10,140(sp)
8111c0bc:	12800015 	stw	r10,0(r2)
8111c0c0:	003e8c06 	br	8111baf4 <__reset+0xfb0fbaf4>
8111c0c4:	21003fcc 	andi	r4,r4,255
8111c0c8:	2003511e 	bne	r4,zero,8111ce10 <___vfiprintf_internal_r+0x13f0>
8111c0cc:	a080080c 	andi	r2,r20,32
8111c0d0:	1000a126 	beq	r2,zero,8111c358 <___vfiprintf_internal_r+0x938>
8111c0d4:	da802217 	ldw	r10,136(sp)
8111c0d8:	d8001d85 	stb	zero,118(sp)
8111c0dc:	50800204 	addi	r2,r10,8
8111c0e0:	54800017 	ldw	r18,0(r10)
8111c0e4:	54c00117 	ldw	r19,4(r10)
8111c0e8:	4802b416 	blt	r9,zero,8111cbbc <___vfiprintf_internal_r+0x119c>
8111c0ec:	013fdfc4 	movi	r4,-129
8111c0f0:	94c6b03a 	or	r3,r18,r19
8111c0f4:	d8802215 	stw	r2,136(sp)
8111c0f8:	a128703a 	and	r20,r20,r4
8111c0fc:	1800a226 	beq	r3,zero,8111c388 <___vfiprintf_internal_r+0x968>
8111c100:	0039883a 	mov	fp,zero
8111c104:	dd401a04 	addi	r21,sp,104
8111c108:	9006d0fa 	srli	r3,r18,3
8111c10c:	9808977a 	slli	r4,r19,29
8111c110:	9826d0fa 	srli	r19,r19,3
8111c114:	948001cc 	andi	r18,r18,7
8111c118:	90800c04 	addi	r2,r18,48
8111c11c:	ad7fffc4 	addi	r21,r21,-1
8111c120:	20e4b03a 	or	r18,r4,r3
8111c124:	a8800005 	stb	r2,0(r21)
8111c128:	94c6b03a 	or	r3,r18,r19
8111c12c:	183ff61e 	bne	r3,zero,8111c108 <__reset+0xfb0fc108>
8111c130:	a0c0004c 	andi	r3,r20,1
8111c134:	18005926 	beq	r3,zero,8111c29c <___vfiprintf_internal_r+0x87c>
8111c138:	10803fcc 	andi	r2,r2,255
8111c13c:	1080201c 	xori	r2,r2,128
8111c140:	10bfe004 	addi	r2,r2,-128
8111c144:	00c00c04 	movi	r3,48
8111c148:	10c05426 	beq	r2,r3,8111c29c <___vfiprintf_internal_r+0x87c>
8111c14c:	da801e17 	ldw	r10,120(sp)
8111c150:	a8bfffc4 	addi	r2,r21,-1
8111c154:	a8ffffc5 	stb	r3,-1(r21)
8111c158:	50a7c83a 	sub	r19,r10,r2
8111c15c:	102b883a 	mov	r21,r2
8111c160:	003f2f06 	br	8111be20 <__reset+0xfb0fbe20>
8111c164:	21003fcc 	andi	r4,r4,255
8111c168:	2003421e 	bne	r4,zero,8111ce74 <___vfiprintf_internal_r+0x1454>
8111c16c:	00a044b4 	movhi	r2,33042
8111c170:	109ab204 	addi	r2,r2,27336
8111c174:	d8802615 	stw	r2,152(sp)
8111c178:	a080080c 	andi	r2,r20,32
8111c17c:	1000aa26 	beq	r2,zero,8111c428 <___vfiprintf_internal_r+0xa08>
8111c180:	da802217 	ldw	r10,136(sp)
8111c184:	54800017 	ldw	r18,0(r10)
8111c188:	54c00117 	ldw	r19,4(r10)
8111c18c:	52800204 	addi	r10,r10,8
8111c190:	da802215 	stw	r10,136(sp)
8111c194:	a080004c 	andi	r2,r20,1
8111c198:	1001d226 	beq	r2,zero,8111c8e4 <___vfiprintf_internal_r+0xec4>
8111c19c:	94c4b03a 	or	r2,r18,r19
8111c1a0:	1002351e 	bne	r2,zero,8111ca78 <___vfiprintf_internal_r+0x1058>
8111c1a4:	d8001d85 	stb	zero,118(sp)
8111c1a8:	48022216 	blt	r9,zero,8111ca34 <___vfiprintf_internal_r+0x1014>
8111c1ac:	00bfdfc4 	movi	r2,-129
8111c1b0:	a0a8703a 	and	r20,r20,r2
8111c1b4:	003f1506 	br	8111be0c <__reset+0xfb0fbe0c>
8111c1b8:	da802217 	ldw	r10,136(sp)
8111c1bc:	04800044 	movi	r18,1
8111c1c0:	d8001d85 	stb	zero,118(sp)
8111c1c4:	50800017 	ldw	r2,0(r10)
8111c1c8:	52800104 	addi	r10,r10,4
8111c1cc:	da802215 	stw	r10,136(sp)
8111c1d0:	d8801005 	stb	r2,64(sp)
8111c1d4:	9027883a 	mov	r19,r18
8111c1d8:	dd401004 	addi	r21,sp,64
8111c1dc:	0013883a 	mov	r9,zero
8111c1e0:	003f1706 	br	8111be40 <__reset+0xfb0fbe40>
8111c1e4:	21003fcc 	andi	r4,r4,255
8111c1e8:	2003201e 	bne	r4,zero,8111ce6c <___vfiprintf_internal_r+0x144c>
8111c1ec:	a080080c 	andi	r2,r20,32
8111c1f0:	10004b26 	beq	r2,zero,8111c320 <___vfiprintf_internal_r+0x900>
8111c1f4:	da802217 	ldw	r10,136(sp)
8111c1f8:	50800117 	ldw	r2,4(r10)
8111c1fc:	54800017 	ldw	r18,0(r10)
8111c200:	52800204 	addi	r10,r10,8
8111c204:	da802215 	stw	r10,136(sp)
8111c208:	1027883a 	mov	r19,r2
8111c20c:	10022c16 	blt	r2,zero,8111cac0 <___vfiprintf_internal_r+0x10a0>
8111c210:	df001d83 	ldbu	fp,118(sp)
8111c214:	48007216 	blt	r9,zero,8111c3e0 <___vfiprintf_internal_r+0x9c0>
8111c218:	00ffdfc4 	movi	r3,-129
8111c21c:	94c4b03a 	or	r2,r18,r19
8111c220:	a0e8703a 	and	r20,r20,r3
8111c224:	1000cc26 	beq	r2,zero,8111c558 <___vfiprintf_internal_r+0xb38>
8111c228:	98021026 	beq	r19,zero,8111ca6c <___vfiprintf_internal_r+0x104c>
8111c22c:	dc402415 	stw	r17,144(sp)
8111c230:	dc002515 	stw	r16,148(sp)
8111c234:	9823883a 	mov	r17,r19
8111c238:	9021883a 	mov	r16,r18
8111c23c:	dd401a04 	addi	r21,sp,104
8111c240:	4825883a 	mov	r18,r9
8111c244:	4027883a 	mov	r19,r8
8111c248:	8009883a 	mov	r4,r16
8111c24c:	880b883a 	mov	r5,r17
8111c250:	01800284 	movi	r6,10
8111c254:	000f883a 	mov	r7,zero
8111c258:	111dbdc0 	call	8111dbdc <__umoddi3>
8111c25c:	10800c04 	addi	r2,r2,48
8111c260:	ad7fffc4 	addi	r21,r21,-1
8111c264:	8009883a 	mov	r4,r16
8111c268:	880b883a 	mov	r5,r17
8111c26c:	a8800005 	stb	r2,0(r21)
8111c270:	01800284 	movi	r6,10
8111c274:	000f883a 	mov	r7,zero
8111c278:	111d6640 	call	8111d664 <__udivdi3>
8111c27c:	1021883a 	mov	r16,r2
8111c280:	10c4b03a 	or	r2,r2,r3
8111c284:	1823883a 	mov	r17,r3
8111c288:	103fef1e 	bne	r2,zero,8111c248 <__reset+0xfb0fc248>
8111c28c:	dc402417 	ldw	r17,144(sp)
8111c290:	dc002517 	ldw	r16,148(sp)
8111c294:	9013883a 	mov	r9,r18
8111c298:	9811883a 	mov	r8,r19
8111c29c:	da801e17 	ldw	r10,120(sp)
8111c2a0:	5567c83a 	sub	r19,r10,r21
8111c2a4:	003ede06 	br	8111be20 <__reset+0xfb0fbe20>
8111c2a8:	38803fcc 	andi	r2,r7,255
8111c2ac:	1080201c 	xori	r2,r2,128
8111c2b0:	10bfe004 	addi	r2,r2,-128
8111c2b4:	1002371e 	bne	r2,zero,8111cb94 <___vfiprintf_internal_r+0x1174>
8111c2b8:	01000044 	movi	r4,1
8111c2bc:	01c00804 	movi	r7,32
8111c2c0:	80c00007 	ldb	r3,0(r16)
8111c2c4:	003e3506 	br	8111bb9c <__reset+0xfb0fbb9c>
8111c2c8:	a5000054 	ori	r20,r20,1
8111c2cc:	80c00007 	ldb	r3,0(r16)
8111c2d0:	003e3206 	br	8111bb9c <__reset+0xfb0fbb9c>
8111c2d4:	a5002014 	ori	r20,r20,128
8111c2d8:	80c00007 	ldb	r3,0(r16)
8111c2dc:	003e2f06 	br	8111bb9c <__reset+0xfb0fbb9c>
8111c2e0:	8015883a 	mov	r10,r16
8111c2e4:	0023883a 	mov	r17,zero
8111c2e8:	18bff404 	addi	r2,r3,-48
8111c2ec:	50c00007 	ldb	r3,0(r10)
8111c2f0:	8c4002a4 	muli	r17,r17,10
8111c2f4:	84000044 	addi	r16,r16,1
8111c2f8:	8015883a 	mov	r10,r16
8111c2fc:	1463883a 	add	r17,r2,r17
8111c300:	18bff404 	addi	r2,r3,-48
8111c304:	30bff92e 	bgeu	r6,r2,8111c2ec <__reset+0xfb0fc2ec>
8111c308:	003e2506 	br	8111bba0 <__reset+0xfb0fbba0>
8111c30c:	21003fcc 	andi	r4,r4,255
8111c310:	2002d41e 	bne	r4,zero,8111ce64 <___vfiprintf_internal_r+0x1444>
8111c314:	a5000414 	ori	r20,r20,16
8111c318:	a080080c 	andi	r2,r20,32
8111c31c:	103fb51e 	bne	r2,zero,8111c1f4 <__reset+0xfb0fc1f4>
8111c320:	a080040c 	andi	r2,r20,16
8111c324:	1001f826 	beq	r2,zero,8111cb08 <___vfiprintf_internal_r+0x10e8>
8111c328:	da802217 	ldw	r10,136(sp)
8111c32c:	54800017 	ldw	r18,0(r10)
8111c330:	52800104 	addi	r10,r10,4
8111c334:	da802215 	stw	r10,136(sp)
8111c338:	9027d7fa 	srai	r19,r18,31
8111c33c:	9805883a 	mov	r2,r19
8111c340:	003fb206 	br	8111c20c <__reset+0xfb0fc20c>
8111c344:	21003fcc 	andi	r4,r4,255
8111c348:	2002c41e 	bne	r4,zero,8111ce5c <___vfiprintf_internal_r+0x143c>
8111c34c:	a5000414 	ori	r20,r20,16
8111c350:	a080080c 	andi	r2,r20,32
8111c354:	103f5f1e 	bne	r2,zero,8111c0d4 <__reset+0xfb0fc0d4>
8111c358:	a080040c 	andi	r2,r20,16
8111c35c:	10020f26 	beq	r2,zero,8111cb9c <___vfiprintf_internal_r+0x117c>
8111c360:	da802217 	ldw	r10,136(sp)
8111c364:	d8001d85 	stb	zero,118(sp)
8111c368:	0027883a 	mov	r19,zero
8111c36c:	50800104 	addi	r2,r10,4
8111c370:	54800017 	ldw	r18,0(r10)
8111c374:	48021116 	blt	r9,zero,8111cbbc <___vfiprintf_internal_r+0x119c>
8111c378:	00ffdfc4 	movi	r3,-129
8111c37c:	d8802215 	stw	r2,136(sp)
8111c380:	a0e8703a 	and	r20,r20,r3
8111c384:	903f5e1e 	bne	r18,zero,8111c100 <__reset+0xfb0fc100>
8111c388:	0039883a 	mov	fp,zero
8111c38c:	4802a626 	beq	r9,zero,8111ce28 <___vfiprintf_internal_r+0x1408>
8111c390:	0025883a 	mov	r18,zero
8111c394:	0027883a 	mov	r19,zero
8111c398:	003f5a06 	br	8111c104 <__reset+0xfb0fc104>
8111c39c:	21003fcc 	andi	r4,r4,255
8111c3a0:	20029f1e 	bne	r4,zero,8111ce20 <___vfiprintf_internal_r+0x1400>
8111c3a4:	a5000414 	ori	r20,r20,16
8111c3a8:	a080080c 	andi	r2,r20,32
8111c3ac:	10005e1e 	bne	r2,zero,8111c528 <___vfiprintf_internal_r+0xb08>
8111c3b0:	a080040c 	andi	r2,r20,16
8111c3b4:	1001a21e 	bne	r2,zero,8111ca40 <___vfiprintf_internal_r+0x1020>
8111c3b8:	a080100c 	andi	r2,r20,64
8111c3bc:	d8001d85 	stb	zero,118(sp)
8111c3c0:	da802217 	ldw	r10,136(sp)
8111c3c4:	1002231e 	bne	r2,zero,8111cc54 <___vfiprintf_internal_r+0x1234>
8111c3c8:	50800104 	addi	r2,r10,4
8111c3cc:	54800017 	ldw	r18,0(r10)
8111c3d0:	0027883a 	mov	r19,zero
8111c3d4:	4801a00e 	bge	r9,zero,8111ca58 <___vfiprintf_internal_r+0x1038>
8111c3d8:	d8802215 	stw	r2,136(sp)
8111c3dc:	0039883a 	mov	fp,zero
8111c3e0:	94c4b03a 	or	r2,r18,r19
8111c3e4:	103f901e 	bne	r2,zero,8111c228 <__reset+0xfb0fc228>
8111c3e8:	00800044 	movi	r2,1
8111c3ec:	10803fcc 	andi	r2,r2,255
8111c3f0:	00c00044 	movi	r3,1
8111c3f4:	10c05926 	beq	r2,r3,8111c55c <___vfiprintf_internal_r+0xb3c>
8111c3f8:	00c00084 	movi	r3,2
8111c3fc:	10ffe41e 	bne	r2,r3,8111c390 <__reset+0xfb0fc390>
8111c400:	0025883a 	mov	r18,zero
8111c404:	0027883a 	mov	r19,zero
8111c408:	00013d06 	br	8111c900 <___vfiprintf_internal_r+0xee0>
8111c40c:	21003fcc 	andi	r4,r4,255
8111c410:	2002811e 	bne	r4,zero,8111ce18 <___vfiprintf_internal_r+0x13f8>
8111c414:	00a044b4 	movhi	r2,33042
8111c418:	109aad04 	addi	r2,r2,27316
8111c41c:	d8802615 	stw	r2,152(sp)
8111c420:	a080080c 	andi	r2,r20,32
8111c424:	103f561e 	bne	r2,zero,8111c180 <__reset+0xfb0fc180>
8111c428:	a080040c 	andi	r2,r20,16
8111c42c:	1001d126 	beq	r2,zero,8111cb74 <___vfiprintf_internal_r+0x1154>
8111c430:	da802217 	ldw	r10,136(sp)
8111c434:	0027883a 	mov	r19,zero
8111c438:	54800017 	ldw	r18,0(r10)
8111c43c:	52800104 	addi	r10,r10,4
8111c440:	da802215 	stw	r10,136(sp)
8111c444:	003f5306 	br	8111c194 <__reset+0xfb0fc194>
8111c448:	da802217 	ldw	r10,136(sp)
8111c44c:	d8001d85 	stb	zero,118(sp)
8111c450:	55400017 	ldw	r21,0(r10)
8111c454:	50c00104 	addi	r3,r10,4
8111c458:	a8024226 	beq	r21,zero,8111cd64 <___vfiprintf_internal_r+0x1344>
8111c45c:	48021816 	blt	r9,zero,8111ccc0 <___vfiprintf_internal_r+0x12a0>
8111c460:	480d883a 	mov	r6,r9
8111c464:	000b883a 	mov	r5,zero
8111c468:	a809883a 	mov	r4,r21
8111c46c:	d8c02a15 	stw	r3,168(sp)
8111c470:	da002b15 	stw	r8,172(sp)
8111c474:	da402c15 	stw	r9,176(sp)
8111c478:	1118b180 	call	81118b18 <memchr>
8111c47c:	d8c02a17 	ldw	r3,168(sp)
8111c480:	da002b17 	ldw	r8,172(sp)
8111c484:	da402c17 	ldw	r9,176(sp)
8111c488:	10024826 	beq	r2,zero,8111cdac <___vfiprintf_internal_r+0x138c>
8111c48c:	1567c83a 	sub	r19,r2,r21
8111c490:	df001d83 	ldbu	fp,118(sp)
8111c494:	d8c02215 	stw	r3,136(sp)
8111c498:	0013883a 	mov	r9,zero
8111c49c:	003e6006 	br	8111be20 <__reset+0xfb0fbe20>
8111c4a0:	21003fcc 	andi	r4,r4,255
8111c4a4:	203fc026 	beq	r4,zero,8111c3a8 <__reset+0xfb0fc3a8>
8111c4a8:	d9c01d85 	stb	r7,118(sp)
8111c4ac:	003fbe06 	br	8111c3a8 <__reset+0xfb0fc3a8>
8111c4b0:	da802217 	ldw	r10,136(sp)
8111c4b4:	54400017 	ldw	r17,0(r10)
8111c4b8:	50800104 	addi	r2,r10,4
8111c4bc:	883e3b16 	blt	r17,zero,8111bdac <__reset+0xfb0fbdac>
8111c4c0:	d8802215 	stw	r2,136(sp)
8111c4c4:	80c00007 	ldb	r3,0(r16)
8111c4c8:	003db406 	br	8111bb9c <__reset+0xfb0fbb9c>
8111c4cc:	01000044 	movi	r4,1
8111c4d0:	01c00ac4 	movi	r7,43
8111c4d4:	80c00007 	ldb	r3,0(r16)
8111c4d8:	003db006 	br	8111bb9c <__reset+0xfb0fbb9c>
8111c4dc:	80c00007 	ldb	r3,0(r16)
8111c4e0:	82800044 	addi	r10,r16,1
8111c4e4:	1b423c26 	beq	r3,r13,8111cdd8 <___vfiprintf_internal_r+0x13b8>
8111c4e8:	18bff404 	addi	r2,r3,-48
8111c4ec:	0013883a 	mov	r9,zero
8111c4f0:	30822b36 	bltu	r6,r2,8111cda0 <___vfiprintf_internal_r+0x1380>
8111c4f4:	50c00007 	ldb	r3,0(r10)
8111c4f8:	4a4002a4 	muli	r9,r9,10
8111c4fc:	54000044 	addi	r16,r10,1
8111c500:	8015883a 	mov	r10,r16
8111c504:	4893883a 	add	r9,r9,r2
8111c508:	18bff404 	addi	r2,r3,-48
8111c50c:	30bff92e 	bgeu	r6,r2,8111c4f4 <__reset+0xfb0fc4f4>
8111c510:	483da30e 	bge	r9,zero,8111bba0 <__reset+0xfb0fbba0>
8111c514:	027fffc4 	movi	r9,-1
8111c518:	003da106 	br	8111bba0 <__reset+0xfb0fbba0>
8111c51c:	a5001014 	ori	r20,r20,64
8111c520:	80c00007 	ldb	r3,0(r16)
8111c524:	003d9d06 	br	8111bb9c <__reset+0xfb0fbb9c>
8111c528:	da802217 	ldw	r10,136(sp)
8111c52c:	d8001d85 	stb	zero,118(sp)
8111c530:	50c00204 	addi	r3,r10,8
8111c534:	54800017 	ldw	r18,0(r10)
8111c538:	54c00117 	ldw	r19,4(r10)
8111c53c:	4801ca16 	blt	r9,zero,8111cc68 <___vfiprintf_internal_r+0x1248>
8111c540:	013fdfc4 	movi	r4,-129
8111c544:	94c4b03a 	or	r2,r18,r19
8111c548:	d8c02215 	stw	r3,136(sp)
8111c54c:	a128703a 	and	r20,r20,r4
8111c550:	0039883a 	mov	fp,zero
8111c554:	103f341e 	bne	r2,zero,8111c228 <__reset+0xfb0fc228>
8111c558:	483e2e26 	beq	r9,zero,8111be14 <__reset+0xfb0fbe14>
8111c55c:	0025883a 	mov	r18,zero
8111c560:	94800c04 	addi	r18,r18,48
8111c564:	dc8019c5 	stb	r18,103(sp)
8111c568:	dcc02717 	ldw	r19,156(sp)
8111c56c:	dd4019c4 	addi	r21,sp,103
8111c570:	003e2b06 	br	8111be20 <__reset+0xfb0fbe20>
8111c574:	21003fcc 	andi	r4,r4,255
8111c578:	2002361e 	bne	r4,zero,8111ce54 <___vfiprintf_internal_r+0x1434>
8111c57c:	1801c126 	beq	r3,zero,8111cc84 <___vfiprintf_internal_r+0x1264>
8111c580:	04800044 	movi	r18,1
8111c584:	d8c01005 	stb	r3,64(sp)
8111c588:	d8001d85 	stb	zero,118(sp)
8111c58c:	9027883a 	mov	r19,r18
8111c590:	dd401004 	addi	r21,sp,64
8111c594:	003f1106 	br	8111c1dc <__reset+0xfb0fc1dc>
8111c598:	d9402117 	ldw	r5,132(sp)
8111c59c:	d9002017 	ldw	r4,128(sp)
8111c5a0:	d9801a04 	addi	r6,sp,104
8111c5a4:	d9c02b15 	stw	r7,172(sp)
8111c5a8:	dbc02a15 	stw	r15,168(sp)
8111c5ac:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111c5b0:	d9c02b17 	ldw	r7,172(sp)
8111c5b4:	dbc02a17 	ldw	r15,168(sp)
8111c5b8:	10006d1e 	bne	r2,zero,8111c770 <___vfiprintf_internal_r+0xd50>
8111c5bc:	d9801b17 	ldw	r6,108(sp)
8111c5c0:	d8801c17 	ldw	r2,112(sp)
8111c5c4:	d811883a 	mov	r8,sp
8111c5c8:	31400044 	addi	r5,r6,1
8111c5cc:	003e3306 	br	8111be9c <__reset+0xfb0fbe9c>
8111c5d0:	d9401b17 	ldw	r5,108(sp)
8111c5d4:	d8801c17 	ldw	r2,112(sp)
8111c5d8:	29000044 	addi	r4,r5,1
8111c5dc:	d8c01d87 	ldb	r3,118(sp)
8111c5e0:	183e4d26 	beq	r3,zero,8111bf18 <__reset+0xfb0fbf18>
8111c5e4:	00c00044 	movi	r3,1
8111c5e8:	d9401d84 	addi	r5,sp,118
8111c5ec:	10c5883a 	add	r2,r2,r3
8111c5f0:	41400015 	stw	r5,0(r8)
8111c5f4:	40c00115 	stw	r3,4(r8)
8111c5f8:	d8801c15 	stw	r2,112(sp)
8111c5fc:	d9001b15 	stw	r4,108(sp)
8111c600:	014001c4 	movi	r5,7
8111c604:	2900a90e 	bge	r5,r4,8111c8ac <___vfiprintf_internal_r+0xe8c>
8111c608:	1000da1e 	bne	r2,zero,8111c974 <___vfiprintf_internal_r+0xf54>
8111c60c:	7000ab1e 	bne	r14,zero,8111c8bc <___vfiprintf_internal_r+0xe9c>
8111c610:	000b883a 	mov	r5,zero
8111c614:	1809883a 	mov	r4,r3
8111c618:	d811883a 	mov	r8,sp
8111c61c:	00c02004 	movi	r3,128
8111c620:	e0fe4d26 	beq	fp,r3,8111bf58 <__reset+0xfb0fbf58>
8111c624:	4cf9c83a 	sub	fp,r9,r19
8111c628:	073e7b0e 	bge	zero,fp,8111c018 <__reset+0xfb0fc018>
8111c62c:	01c00404 	movi	r7,16
8111c630:	3f01900e 	bge	r7,fp,8111cc74 <___vfiprintf_internal_r+0x1254>
8111c634:	00e044b4 	movhi	r3,33042
8111c638:	18db2204 	addi	r3,r3,27784
8111c63c:	d8c02415 	stw	r3,144(sp)
8111c640:	034001c4 	movi	r13,7
8111c644:	00000506 	br	8111c65c <___vfiprintf_internal_r+0xc3c>
8111c648:	29000084 	addi	r4,r5,2
8111c64c:	42000204 	addi	r8,r8,8
8111c650:	180b883a 	mov	r5,r3
8111c654:	e73ffc04 	addi	fp,fp,-16
8111c658:	3f000d0e 	bge	r7,fp,8111c690 <___vfiprintf_internal_r+0xc70>
8111c65c:	10800404 	addi	r2,r2,16
8111c660:	28c00044 	addi	r3,r5,1
8111c664:	45c00015 	stw	r23,0(r8)
8111c668:	41c00115 	stw	r7,4(r8)
8111c66c:	d8801c15 	stw	r2,112(sp)
8111c670:	d8c01b15 	stw	r3,108(sp)
8111c674:	68fff40e 	bge	r13,r3,8111c648 <__reset+0xfb0fc648>
8111c678:	1000101e 	bne	r2,zero,8111c6bc <___vfiprintf_internal_r+0xc9c>
8111c67c:	e73ffc04 	addi	fp,fp,-16
8111c680:	01000044 	movi	r4,1
8111c684:	000b883a 	mov	r5,zero
8111c688:	d811883a 	mov	r8,sp
8111c68c:	3f3ff316 	blt	r7,fp,8111c65c <__reset+0xfb0fc65c>
8111c690:	da802417 	ldw	r10,144(sp)
8111c694:	1705883a 	add	r2,r2,fp
8111c698:	47000115 	stw	fp,4(r8)
8111c69c:	42800015 	stw	r10,0(r8)
8111c6a0:	d8801c15 	stw	r2,112(sp)
8111c6a4:	d9001b15 	stw	r4,108(sp)
8111c6a8:	00c001c4 	movi	r3,7
8111c6ac:	19003616 	blt	r3,r4,8111c788 <___vfiprintf_internal_r+0xd68>
8111c6b0:	42000204 	addi	r8,r8,8
8111c6b4:	21000044 	addi	r4,r4,1
8111c6b8:	003e5706 	br	8111c018 <__reset+0xfb0fc018>
8111c6bc:	d9402117 	ldw	r5,132(sp)
8111c6c0:	d9002017 	ldw	r4,128(sp)
8111c6c4:	d9801a04 	addi	r6,sp,104
8111c6c8:	d9c02b15 	stw	r7,172(sp)
8111c6cc:	db402a15 	stw	r13,168(sp)
8111c6d0:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111c6d4:	d9c02b17 	ldw	r7,172(sp)
8111c6d8:	db402a17 	ldw	r13,168(sp)
8111c6dc:	1000241e 	bne	r2,zero,8111c770 <___vfiprintf_internal_r+0xd50>
8111c6e0:	d9401b17 	ldw	r5,108(sp)
8111c6e4:	d8801c17 	ldw	r2,112(sp)
8111c6e8:	d811883a 	mov	r8,sp
8111c6ec:	29000044 	addi	r4,r5,1
8111c6f0:	003fd806 	br	8111c654 <__reset+0xfb0fc654>
8111c6f4:	d9401b17 	ldw	r5,108(sp)
8111c6f8:	00e044b4 	movhi	r3,33042
8111c6fc:	18db2604 	addi	r3,r3,27800
8111c700:	d8c02415 	stw	r3,144(sp)
8111c704:	29400044 	addi	r5,r5,1
8111c708:	d8c02417 	ldw	r3,144(sp)
8111c70c:	14c5883a 	add	r2,r2,r19
8111c710:	44c00115 	stw	r19,4(r8)
8111c714:	40c00015 	stw	r3,0(r8)
8111c718:	d8801c15 	stw	r2,112(sp)
8111c71c:	d9401b15 	stw	r5,108(sp)
8111c720:	00c001c4 	movi	r3,7
8111c724:	1940070e 	bge	r3,r5,8111c744 <___vfiprintf_internal_r+0xd24>
8111c728:	103e4826 	beq	r2,zero,8111c04c <__reset+0xfb0fc04c>
8111c72c:	d9402117 	ldw	r5,132(sp)
8111c730:	d9002017 	ldw	r4,128(sp)
8111c734:	d9801a04 	addi	r6,sp,104
8111c738:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111c73c:	10000c1e 	bne	r2,zero,8111c770 <___vfiprintf_internal_r+0xd50>
8111c740:	d8801c17 	ldw	r2,112(sp)
8111c744:	8c80010e 	bge	r17,r18,8111c74c <___vfiprintf_internal_r+0xd2c>
8111c748:	9023883a 	mov	r17,r18
8111c74c:	da802317 	ldw	r10,140(sp)
8111c750:	5455883a 	add	r10,r10,r17
8111c754:	da802315 	stw	r10,140(sp)
8111c758:	103e4126 	beq	r2,zero,8111c060 <__reset+0xfb0fc060>
8111c75c:	d9402117 	ldw	r5,132(sp)
8111c760:	d9002017 	ldw	r4,128(sp)
8111c764:	d9801a04 	addi	r6,sp,104
8111c768:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111c76c:	103e3c26 	beq	r2,zero,8111c060 <__reset+0xfb0fc060>
8111c770:	dd002117 	ldw	r20,132(sp)
8111c774:	a080030b 	ldhu	r2,12(r20)
8111c778:	1080100c 	andi	r2,r2,64
8111c77c:	1001231e 	bne	r2,zero,8111cc0c <___vfiprintf_internal_r+0x11ec>
8111c780:	d8802317 	ldw	r2,140(sp)
8111c784:	003d7b06 	br	8111bd74 <__reset+0xfb0fbd74>
8111c788:	1000991e 	bne	r2,zero,8111c9f0 <___vfiprintf_internal_r+0xfd0>
8111c78c:	00c00044 	movi	r3,1
8111c790:	9805883a 	mov	r2,r19
8111c794:	dd400015 	stw	r21,0(sp)
8111c798:	dcc00115 	stw	r19,4(sp)
8111c79c:	dcc01c15 	stw	r19,112(sp)
8111c7a0:	d8c01b15 	stw	r3,108(sp)
8111c7a4:	d811883a 	mov	r8,sp
8111c7a8:	42000204 	addi	r8,r8,8
8111c7ac:	a2c0010c 	andi	r11,r20,4
8111c7b0:	583fe426 	beq	r11,zero,8111c744 <__reset+0xfb0fc744>
8111c7b4:	8ca7c83a 	sub	r19,r17,r18
8111c7b8:	04ffe20e 	bge	zero,r19,8111c744 <__reset+0xfb0fc744>
8111c7bc:	01c00404 	movi	r7,16
8111c7c0:	3cffcc0e 	bge	r7,r19,8111c6f4 <__reset+0xfb0fc6f4>
8111c7c4:	02a044b4 	movhi	r10,33042
8111c7c8:	529b2604 	addi	r10,r10,27800
8111c7cc:	d9001b17 	ldw	r4,108(sp)
8111c7d0:	da802415 	stw	r10,144(sp)
8111c7d4:	382b883a 	mov	r21,r7
8111c7d8:	050001c4 	movi	r20,7
8111c7dc:	df002017 	ldw	fp,128(sp)
8111c7e0:	00000506 	br	8111c7f8 <___vfiprintf_internal_r+0xdd8>
8111c7e4:	21400084 	addi	r5,r4,2
8111c7e8:	42000204 	addi	r8,r8,8
8111c7ec:	1809883a 	mov	r4,r3
8111c7f0:	9cfffc04 	addi	r19,r19,-16
8111c7f4:	acffc40e 	bge	r21,r19,8111c708 <__reset+0xfb0fc708>
8111c7f8:	10800404 	addi	r2,r2,16
8111c7fc:	20c00044 	addi	r3,r4,1
8111c800:	45800015 	stw	r22,0(r8)
8111c804:	45400115 	stw	r21,4(r8)
8111c808:	d8801c15 	stw	r2,112(sp)
8111c80c:	d8c01b15 	stw	r3,108(sp)
8111c810:	a0fff40e 	bge	r20,r3,8111c7e4 <__reset+0xfb0fc7e4>
8111c814:	1000041e 	bne	r2,zero,8111c828 <___vfiprintf_internal_r+0xe08>
8111c818:	01400044 	movi	r5,1
8111c81c:	0009883a 	mov	r4,zero
8111c820:	d811883a 	mov	r8,sp
8111c824:	003ff206 	br	8111c7f0 <__reset+0xfb0fc7f0>
8111c828:	d9402117 	ldw	r5,132(sp)
8111c82c:	d9801a04 	addi	r6,sp,104
8111c830:	e009883a 	mov	r4,fp
8111c834:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111c838:	103fcd1e 	bne	r2,zero,8111c770 <__reset+0xfb0fc770>
8111c83c:	d9001b17 	ldw	r4,108(sp)
8111c840:	d8801c17 	ldw	r2,112(sp)
8111c844:	d811883a 	mov	r8,sp
8111c848:	21400044 	addi	r5,r4,1
8111c84c:	003fe806 	br	8111c7f0 <__reset+0xfb0fc7f0>
8111c850:	d9402117 	ldw	r5,132(sp)
8111c854:	d9002017 	ldw	r4,128(sp)
8111c858:	d9801a04 	addi	r6,sp,104
8111c85c:	d9c02b15 	stw	r7,172(sp)
8111c860:	db402a15 	stw	r13,168(sp)
8111c864:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111c868:	d9c02b17 	ldw	r7,172(sp)
8111c86c:	db402a17 	ldw	r13,168(sp)
8111c870:	103fbf1e 	bne	r2,zero,8111c770 <__reset+0xfb0fc770>
8111c874:	d9401b17 	ldw	r5,108(sp)
8111c878:	d8801c17 	ldw	r2,112(sp)
8111c87c:	d811883a 	mov	r8,sp
8111c880:	29800044 	addi	r6,r5,1
8111c884:	003dc406 	br	8111bf98 <__reset+0xfb0fbf98>
8111c888:	1000d21e 	bne	r2,zero,8111cbd4 <___vfiprintf_internal_r+0x11b4>
8111c88c:	d8c01d87 	ldb	r3,118(sp)
8111c890:	18009526 	beq	r3,zero,8111cae8 <___vfiprintf_internal_r+0x10c8>
8111c894:	00800044 	movi	r2,1
8111c898:	d8c01d84 	addi	r3,sp,118
8111c89c:	1009883a 	mov	r4,r2
8111c8a0:	d8c00015 	stw	r3,0(sp)
8111c8a4:	d8800115 	stw	r2,4(sp)
8111c8a8:	d811883a 	mov	r8,sp
8111c8ac:	200b883a 	mov	r5,r4
8111c8b0:	42000204 	addi	r8,r8,8
8111c8b4:	21000044 	addi	r4,r4,1
8111c8b8:	003d9706 	br	8111bf18 <__reset+0xfb0fbf18>
8111c8bc:	d9001d04 	addi	r4,sp,116
8111c8c0:	00800084 	movi	r2,2
8111c8c4:	d9000015 	stw	r4,0(sp)
8111c8c8:	d8800115 	stw	r2,4(sp)
8111c8cc:	1809883a 	mov	r4,r3
8111c8d0:	d811883a 	mov	r8,sp
8111c8d4:	200b883a 	mov	r5,r4
8111c8d8:	42000204 	addi	r8,r8,8
8111c8dc:	21000044 	addi	r4,r4,1
8111c8e0:	003f4e06 	br	8111c61c <__reset+0xfb0fc61c>
8111c8e4:	d8001d85 	stb	zero,118(sp)
8111c8e8:	48005016 	blt	r9,zero,8111ca2c <___vfiprintf_internal_r+0x100c>
8111c8ec:	00ffdfc4 	movi	r3,-129
8111c8f0:	94c4b03a 	or	r2,r18,r19
8111c8f4:	a0e8703a 	and	r20,r20,r3
8111c8f8:	103d4426 	beq	r2,zero,8111be0c <__reset+0xfb0fbe0c>
8111c8fc:	0039883a 	mov	fp,zero
8111c900:	d9002617 	ldw	r4,152(sp)
8111c904:	dd401a04 	addi	r21,sp,104
8111c908:	908003cc 	andi	r2,r18,15
8111c90c:	9806973a 	slli	r3,r19,28
8111c910:	2085883a 	add	r2,r4,r2
8111c914:	9024d13a 	srli	r18,r18,4
8111c918:	10800003 	ldbu	r2,0(r2)
8111c91c:	9826d13a 	srli	r19,r19,4
8111c920:	ad7fffc4 	addi	r21,r21,-1
8111c924:	1ca4b03a 	or	r18,r3,r18
8111c928:	a8800005 	stb	r2,0(r21)
8111c92c:	94c4b03a 	or	r2,r18,r19
8111c930:	103ff51e 	bne	r2,zero,8111c908 <__reset+0xfb0fc908>
8111c934:	003e5906 	br	8111c29c <__reset+0xfb0fc29c>
8111c938:	d9402117 	ldw	r5,132(sp)
8111c93c:	d9002017 	ldw	r4,128(sp)
8111c940:	d9801a04 	addi	r6,sp,104
8111c944:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111c948:	103f891e 	bne	r2,zero,8111c770 <__reset+0xfb0fc770>
8111c94c:	d8801c17 	ldw	r2,112(sp)
8111c950:	d811883a 	mov	r8,sp
8111c954:	003f9506 	br	8111c7ac <__reset+0xfb0fc7ac>
8111c958:	d9402117 	ldw	r5,132(sp)
8111c95c:	d9002017 	ldw	r4,128(sp)
8111c960:	d9801a04 	addi	r6,sp,104
8111c964:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111c968:	103f811e 	bne	r2,zero,8111c770 <__reset+0xfb0fc770>
8111c96c:	d811883a 	mov	r8,sp
8111c970:	003ced06 	br	8111bd28 <__reset+0xfb0fbd28>
8111c974:	d9402117 	ldw	r5,132(sp)
8111c978:	d9002017 	ldw	r4,128(sp)
8111c97c:	d9801a04 	addi	r6,sp,104
8111c980:	da402c15 	stw	r9,176(sp)
8111c984:	db802a15 	stw	r14,168(sp)
8111c988:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111c98c:	da402c17 	ldw	r9,176(sp)
8111c990:	db802a17 	ldw	r14,168(sp)
8111c994:	103f761e 	bne	r2,zero,8111c770 <__reset+0xfb0fc770>
8111c998:	d9401b17 	ldw	r5,108(sp)
8111c99c:	d8801c17 	ldw	r2,112(sp)
8111c9a0:	d811883a 	mov	r8,sp
8111c9a4:	29000044 	addi	r4,r5,1
8111c9a8:	003d5b06 	br	8111bf18 <__reset+0xfb0fbf18>
8111c9ac:	d9402117 	ldw	r5,132(sp)
8111c9b0:	d9002017 	ldw	r4,128(sp)
8111c9b4:	d9801a04 	addi	r6,sp,104
8111c9b8:	da402c15 	stw	r9,176(sp)
8111c9bc:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111c9c0:	da402c17 	ldw	r9,176(sp)
8111c9c4:	103f6a1e 	bne	r2,zero,8111c770 <__reset+0xfb0fc770>
8111c9c8:	d9401b17 	ldw	r5,108(sp)
8111c9cc:	d8801c17 	ldw	r2,112(sp)
8111c9d0:	d811883a 	mov	r8,sp
8111c9d4:	29000044 	addi	r4,r5,1
8111c9d8:	003f1006 	br	8111c61c <__reset+0xfb0fc61c>
8111c9dc:	1000c31e 	bne	r2,zero,8111ccec <___vfiprintf_internal_r+0x12cc>
8111c9e0:	01000044 	movi	r4,1
8111c9e4:	000b883a 	mov	r5,zero
8111c9e8:	d811883a 	mov	r8,sp
8111c9ec:	003f0d06 	br	8111c624 <__reset+0xfb0fc624>
8111c9f0:	d9402117 	ldw	r5,132(sp)
8111c9f4:	d9002017 	ldw	r4,128(sp)
8111c9f8:	d9801a04 	addi	r6,sp,104
8111c9fc:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111ca00:	103f5b1e 	bne	r2,zero,8111c770 <__reset+0xfb0fc770>
8111ca04:	d9001b17 	ldw	r4,108(sp)
8111ca08:	d8801c17 	ldw	r2,112(sp)
8111ca0c:	d811883a 	mov	r8,sp
8111ca10:	21000044 	addi	r4,r4,1
8111ca14:	003d8006 	br	8111c018 <__reset+0xfb0fc018>
8111ca18:	012044b4 	movhi	r4,33042
8111ca1c:	211ab204 	addi	r4,r4,27336
8111ca20:	d9002615 	stw	r4,152(sp)
8111ca24:	d8c02215 	stw	r3,136(sp)
8111ca28:	1029883a 	mov	r20,r2
8111ca2c:	94c4b03a 	or	r2,r18,r19
8111ca30:	103fb21e 	bne	r2,zero,8111c8fc <__reset+0xfb0fc8fc>
8111ca34:	0039883a 	mov	fp,zero
8111ca38:	00800084 	movi	r2,2
8111ca3c:	003e6b06 	br	8111c3ec <__reset+0xfb0fc3ec>
8111ca40:	da802217 	ldw	r10,136(sp)
8111ca44:	d8001d85 	stb	zero,118(sp)
8111ca48:	0027883a 	mov	r19,zero
8111ca4c:	50800104 	addi	r2,r10,4
8111ca50:	54800017 	ldw	r18,0(r10)
8111ca54:	483e6016 	blt	r9,zero,8111c3d8 <__reset+0xfb0fc3d8>
8111ca58:	00ffdfc4 	movi	r3,-129
8111ca5c:	d8802215 	stw	r2,136(sp)
8111ca60:	a0e8703a 	and	r20,r20,r3
8111ca64:	0039883a 	mov	fp,zero
8111ca68:	903ebb26 	beq	r18,zero,8111c558 <__reset+0xfb0fc558>
8111ca6c:	00800244 	movi	r2,9
8111ca70:	14bdee36 	bltu	r2,r18,8111c22c <__reset+0xfb0fc22c>
8111ca74:	003eba06 	br	8111c560 <__reset+0xfb0fc560>
8111ca78:	00800c04 	movi	r2,48
8111ca7c:	d8c01d45 	stb	r3,117(sp)
8111ca80:	d8801d05 	stb	r2,116(sp)
8111ca84:	d8001d85 	stb	zero,118(sp)
8111ca88:	a0c00094 	ori	r3,r20,2
8111ca8c:	4800a916 	blt	r9,zero,8111cd34 <___vfiprintf_internal_r+0x1314>
8111ca90:	00bfdfc4 	movi	r2,-129
8111ca94:	a096703a 	and	r11,r20,r2
8111ca98:	5d000094 	ori	r20,r11,2
8111ca9c:	0039883a 	mov	fp,zero
8111caa0:	003f9706 	br	8111c900 <__reset+0xfb0fc900>
8111caa4:	8025883a 	mov	r18,r16
8111caa8:	003c2e06 	br	8111bb64 <__reset+0xfb0fbb64>
8111caac:	00a044b4 	movhi	r2,33042
8111cab0:	109ab204 	addi	r2,r2,27336
8111cab4:	0039883a 	mov	fp,zero
8111cab8:	d8802615 	stw	r2,152(sp)
8111cabc:	003f9006 	br	8111c900 <__reset+0xfb0fc900>
8111cac0:	04a5c83a 	sub	r18,zero,r18
8111cac4:	07000b44 	movi	fp,45
8111cac8:	9004c03a 	cmpne	r2,r18,zero
8111cacc:	04e7c83a 	sub	r19,zero,r19
8111cad0:	df001d85 	stb	fp,118(sp)
8111cad4:	98a7c83a 	sub	r19,r19,r2
8111cad8:	48009f16 	blt	r9,zero,8111cd58 <___vfiprintf_internal_r+0x1338>
8111cadc:	00bfdfc4 	movi	r2,-129
8111cae0:	a0a8703a 	and	r20,r20,r2
8111cae4:	003dd006 	br	8111c228 <__reset+0xfb0fc228>
8111cae8:	70004c26 	beq	r14,zero,8111cc1c <___vfiprintf_internal_r+0x11fc>
8111caec:	00800084 	movi	r2,2
8111caf0:	d8c01d04 	addi	r3,sp,116
8111caf4:	d8c00015 	stw	r3,0(sp)
8111caf8:	d8800115 	stw	r2,4(sp)
8111cafc:	01000044 	movi	r4,1
8111cb00:	d811883a 	mov	r8,sp
8111cb04:	003f7306 	br	8111c8d4 <__reset+0xfb0fc8d4>
8111cb08:	a080100c 	andi	r2,r20,64
8111cb0c:	da802217 	ldw	r10,136(sp)
8111cb10:	103e0626 	beq	r2,zero,8111c32c <__reset+0xfb0fc32c>
8111cb14:	5480000f 	ldh	r18,0(r10)
8111cb18:	52800104 	addi	r10,r10,4
8111cb1c:	da802215 	stw	r10,136(sp)
8111cb20:	9027d7fa 	srai	r19,r18,31
8111cb24:	9805883a 	mov	r2,r19
8111cb28:	003db806 	br	8111c20c <__reset+0xfb0fc20c>
8111cb2c:	a080040c 	andi	r2,r20,16
8111cb30:	1000091e 	bne	r2,zero,8111cb58 <___vfiprintf_internal_r+0x1138>
8111cb34:	a2c0100c 	andi	r11,r20,64
8111cb38:	58000726 	beq	r11,zero,8111cb58 <___vfiprintf_internal_r+0x1138>
8111cb3c:	da802217 	ldw	r10,136(sp)
8111cb40:	50800017 	ldw	r2,0(r10)
8111cb44:	52800104 	addi	r10,r10,4
8111cb48:	da802215 	stw	r10,136(sp)
8111cb4c:	da802317 	ldw	r10,140(sp)
8111cb50:	1280000d 	sth	r10,0(r2)
8111cb54:	003be706 	br	8111baf4 <__reset+0xfb0fbaf4>
8111cb58:	da802217 	ldw	r10,136(sp)
8111cb5c:	50800017 	ldw	r2,0(r10)
8111cb60:	52800104 	addi	r10,r10,4
8111cb64:	da802215 	stw	r10,136(sp)
8111cb68:	da802317 	ldw	r10,140(sp)
8111cb6c:	12800015 	stw	r10,0(r2)
8111cb70:	003be006 	br	8111baf4 <__reset+0xfb0fbaf4>
8111cb74:	a080100c 	andi	r2,r20,64
8111cb78:	da802217 	ldw	r10,136(sp)
8111cb7c:	10003026 	beq	r2,zero,8111cc40 <___vfiprintf_internal_r+0x1220>
8111cb80:	5480000b 	ldhu	r18,0(r10)
8111cb84:	52800104 	addi	r10,r10,4
8111cb88:	0027883a 	mov	r19,zero
8111cb8c:	da802215 	stw	r10,136(sp)
8111cb90:	003d8006 	br	8111c194 <__reset+0xfb0fc194>
8111cb94:	80c00007 	ldb	r3,0(r16)
8111cb98:	003c0006 	br	8111bb9c <__reset+0xfb0fbb9c>
8111cb9c:	a080100c 	andi	r2,r20,64
8111cba0:	d8001d85 	stb	zero,118(sp)
8111cba4:	da802217 	ldw	r10,136(sp)
8111cba8:	1000201e 	bne	r2,zero,8111cc2c <___vfiprintf_internal_r+0x120c>
8111cbac:	50800104 	addi	r2,r10,4
8111cbb0:	54800017 	ldw	r18,0(r10)
8111cbb4:	0027883a 	mov	r19,zero
8111cbb8:	483def0e 	bge	r9,zero,8111c378 <__reset+0xfb0fc378>
8111cbbc:	94c6b03a 	or	r3,r18,r19
8111cbc0:	d8802215 	stw	r2,136(sp)
8111cbc4:	183d4e1e 	bne	r3,zero,8111c100 <__reset+0xfb0fc100>
8111cbc8:	0039883a 	mov	fp,zero
8111cbcc:	0005883a 	mov	r2,zero
8111cbd0:	003e0606 	br	8111c3ec <__reset+0xfb0fc3ec>
8111cbd4:	d9402117 	ldw	r5,132(sp)
8111cbd8:	d9002017 	ldw	r4,128(sp)
8111cbdc:	d9801a04 	addi	r6,sp,104
8111cbe0:	da402c15 	stw	r9,176(sp)
8111cbe4:	db802a15 	stw	r14,168(sp)
8111cbe8:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111cbec:	da402c17 	ldw	r9,176(sp)
8111cbf0:	db802a17 	ldw	r14,168(sp)
8111cbf4:	103ede1e 	bne	r2,zero,8111c770 <__reset+0xfb0fc770>
8111cbf8:	d9401b17 	ldw	r5,108(sp)
8111cbfc:	d8801c17 	ldw	r2,112(sp)
8111cc00:	d811883a 	mov	r8,sp
8111cc04:	29000044 	addi	r4,r5,1
8111cc08:	003e7406 	br	8111c5dc <__reset+0xfb0fc5dc>
8111cc0c:	00bfffc4 	movi	r2,-1
8111cc10:	003c5806 	br	8111bd74 <__reset+0xfb0fbd74>
8111cc14:	d811883a 	mov	r8,sp
8111cc18:	003ee806 	br	8111c7bc <__reset+0xfb0fc7bc>
8111cc1c:	000b883a 	mov	r5,zero
8111cc20:	01000044 	movi	r4,1
8111cc24:	d811883a 	mov	r8,sp
8111cc28:	003e7c06 	br	8111c61c <__reset+0xfb0fc61c>
8111cc2c:	50800104 	addi	r2,r10,4
8111cc30:	5480000b 	ldhu	r18,0(r10)
8111cc34:	0027883a 	mov	r19,zero
8111cc38:	483dcf0e 	bge	r9,zero,8111c378 <__reset+0xfb0fc378>
8111cc3c:	003fdf06 	br	8111cbbc <__reset+0xfb0fcbbc>
8111cc40:	54800017 	ldw	r18,0(r10)
8111cc44:	52800104 	addi	r10,r10,4
8111cc48:	0027883a 	mov	r19,zero
8111cc4c:	da802215 	stw	r10,136(sp)
8111cc50:	003d5006 	br	8111c194 <__reset+0xfb0fc194>
8111cc54:	50800104 	addi	r2,r10,4
8111cc58:	5480000b 	ldhu	r18,0(r10)
8111cc5c:	0027883a 	mov	r19,zero
8111cc60:	483f7d0e 	bge	r9,zero,8111ca58 <__reset+0xfb0fca58>
8111cc64:	003ddc06 	br	8111c3d8 <__reset+0xfb0fc3d8>
8111cc68:	d8c02215 	stw	r3,136(sp)
8111cc6c:	0039883a 	mov	fp,zero
8111cc70:	003ddb06 	br	8111c3e0 <__reset+0xfb0fc3e0>
8111cc74:	02a044b4 	movhi	r10,33042
8111cc78:	529b2204 	addi	r10,r10,27784
8111cc7c:	da802415 	stw	r10,144(sp)
8111cc80:	003e8306 	br	8111c690 <__reset+0xfb0fc690>
8111cc84:	d8801c17 	ldw	r2,112(sp)
8111cc88:	dd002117 	ldw	r20,132(sp)
8111cc8c:	103eb926 	beq	r2,zero,8111c774 <__reset+0xfb0fc774>
8111cc90:	d9002017 	ldw	r4,128(sp)
8111cc94:	d9801a04 	addi	r6,sp,104
8111cc98:	a00b883a 	mov	r5,r20
8111cc9c:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111cca0:	003eb406 	br	8111c774 <__reset+0xfb0fc774>
8111cca4:	80c00043 	ldbu	r3,1(r16)
8111cca8:	a5000814 	ori	r20,r20,32
8111ccac:	84000044 	addi	r16,r16,1
8111ccb0:	18c03fcc 	andi	r3,r3,255
8111ccb4:	18c0201c 	xori	r3,r3,128
8111ccb8:	18ffe004 	addi	r3,r3,-128
8111ccbc:	003bb706 	br	8111bb9c <__reset+0xfb0fbb9c>
8111ccc0:	a809883a 	mov	r4,r21
8111ccc4:	d8c02a15 	stw	r3,168(sp)
8111ccc8:	da002b15 	stw	r8,172(sp)
8111cccc:	111a4680 	call	8111a468 <strlen>
8111ccd0:	d8c02a17 	ldw	r3,168(sp)
8111ccd4:	1027883a 	mov	r19,r2
8111ccd8:	df001d83 	ldbu	fp,118(sp)
8111ccdc:	d8c02215 	stw	r3,136(sp)
8111cce0:	0013883a 	mov	r9,zero
8111cce4:	da002b17 	ldw	r8,172(sp)
8111cce8:	003c4d06 	br	8111be20 <__reset+0xfb0fbe20>
8111ccec:	d9402117 	ldw	r5,132(sp)
8111ccf0:	d9002017 	ldw	r4,128(sp)
8111ccf4:	d9801a04 	addi	r6,sp,104
8111ccf8:	da402c15 	stw	r9,176(sp)
8111ccfc:	111b90c0 	call	8111b90c <__sprint_r.part.0>
8111cd00:	da402c17 	ldw	r9,176(sp)
8111cd04:	103e9a1e 	bne	r2,zero,8111c770 <__reset+0xfb0fc770>
8111cd08:	d9401b17 	ldw	r5,108(sp)
8111cd0c:	d8801c17 	ldw	r2,112(sp)
8111cd10:	d811883a 	mov	r8,sp
8111cd14:	29000044 	addi	r4,r5,1
8111cd18:	003e4206 	br	8111c624 <__reset+0xfb0fc624>
8111cd1c:	d9401b17 	ldw	r5,108(sp)
8111cd20:	012044b4 	movhi	r4,33042
8111cd24:	211b2604 	addi	r4,r4,27800
8111cd28:	d9002415 	stw	r4,144(sp)
8111cd2c:	29400044 	addi	r5,r5,1
8111cd30:	003c6d06 	br	8111bee8 <__reset+0xfb0fbee8>
8111cd34:	0039883a 	mov	fp,zero
8111cd38:	00800084 	movi	r2,2
8111cd3c:	10803fcc 	andi	r2,r2,255
8111cd40:	01000044 	movi	r4,1
8111cd44:	11001e26 	beq	r2,r4,8111cdc0 <___vfiprintf_internal_r+0x13a0>
8111cd48:	01000084 	movi	r4,2
8111cd4c:	11001e1e 	bne	r2,r4,8111cdc8 <___vfiprintf_internal_r+0x13a8>
8111cd50:	1829883a 	mov	r20,r3
8111cd54:	003eea06 	br	8111c900 <__reset+0xfb0fc900>
8111cd58:	a007883a 	mov	r3,r20
8111cd5c:	00800044 	movi	r2,1
8111cd60:	003ff606 	br	8111cd3c <__reset+0xfb0fcd3c>
8111cd64:	00800184 	movi	r2,6
8111cd68:	1240012e 	bgeu	r2,r9,8111cd70 <___vfiprintf_internal_r+0x1350>
8111cd6c:	1013883a 	mov	r9,r2
8111cd70:	4827883a 	mov	r19,r9
8111cd74:	4825883a 	mov	r18,r9
8111cd78:	48001516 	blt	r9,zero,8111cdd0 <___vfiprintf_internal_r+0x13b0>
8111cd7c:	056044b4 	movhi	r21,33042
8111cd80:	d8c02215 	stw	r3,136(sp)
8111cd84:	ad5ab704 	addi	r21,r21,27356
8111cd88:	003d1406 	br	8111c1dc <__reset+0xfb0fc1dc>
8111cd8c:	02a044b4 	movhi	r10,33042
8111cd90:	529b2204 	addi	r10,r10,27784
8111cd94:	da802415 	stw	r10,144(sp)
8111cd98:	200d883a 	mov	r6,r4
8111cd9c:	003c9106 	br	8111bfe4 <__reset+0xfb0fbfe4>
8111cda0:	5021883a 	mov	r16,r10
8111cda4:	0013883a 	mov	r9,zero
8111cda8:	003b7d06 	br	8111bba0 <__reset+0xfb0fbba0>
8111cdac:	4827883a 	mov	r19,r9
8111cdb0:	df001d83 	ldbu	fp,118(sp)
8111cdb4:	d8c02215 	stw	r3,136(sp)
8111cdb8:	0013883a 	mov	r9,zero
8111cdbc:	003c1806 	br	8111be20 <__reset+0xfb0fbe20>
8111cdc0:	1829883a 	mov	r20,r3
8111cdc4:	003d1806 	br	8111c228 <__reset+0xfb0fc228>
8111cdc8:	1829883a 	mov	r20,r3
8111cdcc:	003ccd06 	br	8111c104 <__reset+0xfb0fc104>
8111cdd0:	0025883a 	mov	r18,zero
8111cdd4:	003fe906 	br	8111cd7c <__reset+0xfb0fcd7c>
8111cdd8:	d8802217 	ldw	r2,136(sp)
8111cddc:	80c00043 	ldbu	r3,1(r16)
8111cde0:	5021883a 	mov	r16,r10
8111cde4:	12400017 	ldw	r9,0(r2)
8111cde8:	10800104 	addi	r2,r2,4
8111cdec:	d8802215 	stw	r2,136(sp)
8111cdf0:	483faf0e 	bge	r9,zero,8111ccb0 <__reset+0xfb0fccb0>
8111cdf4:	18c03fcc 	andi	r3,r3,255
8111cdf8:	18c0201c 	xori	r3,r3,128
8111cdfc:	027fffc4 	movi	r9,-1
8111ce00:	18ffe004 	addi	r3,r3,-128
8111ce04:	003b6506 	br	8111bb9c <__reset+0xfb0fbb9c>
8111ce08:	d9c01d85 	stb	r7,118(sp)
8111ce0c:	003ca006 	br	8111c090 <__reset+0xfb0fc090>
8111ce10:	d9c01d85 	stb	r7,118(sp)
8111ce14:	003cad06 	br	8111c0cc <__reset+0xfb0fc0cc>
8111ce18:	d9c01d85 	stb	r7,118(sp)
8111ce1c:	003d7d06 	br	8111c414 <__reset+0xfb0fc414>
8111ce20:	d9c01d85 	stb	r7,118(sp)
8111ce24:	003d5f06 	br	8111c3a4 <__reset+0xfb0fc3a4>
8111ce28:	a080004c 	andi	r2,r20,1
8111ce2c:	0039883a 	mov	fp,zero
8111ce30:	10000526 	beq	r2,zero,8111ce48 <___vfiprintf_internal_r+0x1428>
8111ce34:	00800c04 	movi	r2,48
8111ce38:	d88019c5 	stb	r2,103(sp)
8111ce3c:	dcc02717 	ldw	r19,156(sp)
8111ce40:	dd4019c4 	addi	r21,sp,103
8111ce44:	003bf606 	br	8111be20 <__reset+0xfb0fbe20>
8111ce48:	0027883a 	mov	r19,zero
8111ce4c:	dd401a04 	addi	r21,sp,104
8111ce50:	003bf306 	br	8111be20 <__reset+0xfb0fbe20>
8111ce54:	d9c01d85 	stb	r7,118(sp)
8111ce58:	003dc806 	br	8111c57c <__reset+0xfb0fc57c>
8111ce5c:	d9c01d85 	stb	r7,118(sp)
8111ce60:	003d3a06 	br	8111c34c <__reset+0xfb0fc34c>
8111ce64:	d9c01d85 	stb	r7,118(sp)
8111ce68:	003d2a06 	br	8111c314 <__reset+0xfb0fc314>
8111ce6c:	d9c01d85 	stb	r7,118(sp)
8111ce70:	003cde06 	br	8111c1ec <__reset+0xfb0fc1ec>
8111ce74:	d9c01d85 	stb	r7,118(sp)
8111ce78:	003cbc06 	br	8111c16c <__reset+0xfb0fc16c>

8111ce7c <__vfiprintf_internal>:
8111ce7c:	00a044f4 	movhi	r2,33043
8111ce80:	10a2f004 	addi	r2,r2,-29760
8111ce84:	300f883a 	mov	r7,r6
8111ce88:	280d883a 	mov	r6,r5
8111ce8c:	200b883a 	mov	r5,r4
8111ce90:	11000017 	ldw	r4,0(r2)
8111ce94:	111ba201 	jmpi	8111ba20 <___vfiprintf_internal_r>

8111ce98 <__sbprintf>:
8111ce98:	2880030b 	ldhu	r2,12(r5)
8111ce9c:	2ac01917 	ldw	r11,100(r5)
8111cea0:	2a80038b 	ldhu	r10,14(r5)
8111cea4:	2a400717 	ldw	r9,28(r5)
8111cea8:	2a000917 	ldw	r8,36(r5)
8111ceac:	defee204 	addi	sp,sp,-1144
8111ceb0:	00c10004 	movi	r3,1024
8111ceb4:	dc011a15 	stw	r16,1128(sp)
8111ceb8:	10bfff4c 	andi	r2,r2,65533
8111cebc:	2821883a 	mov	r16,r5
8111cec0:	d8cb883a 	add	r5,sp,r3
8111cec4:	dc811c15 	stw	r18,1136(sp)
8111cec8:	dc411b15 	stw	r17,1132(sp)
8111cecc:	dfc11d15 	stw	ra,1140(sp)
8111ced0:	2025883a 	mov	r18,r4
8111ced4:	d881030d 	sth	r2,1036(sp)
8111ced8:	dac11915 	stw	r11,1124(sp)
8111cedc:	da81038d 	sth	r10,1038(sp)
8111cee0:	da410715 	stw	r9,1052(sp)
8111cee4:	da010915 	stw	r8,1060(sp)
8111cee8:	dec10015 	stw	sp,1024(sp)
8111ceec:	dec10415 	stw	sp,1040(sp)
8111cef0:	d8c10215 	stw	r3,1032(sp)
8111cef4:	d8c10515 	stw	r3,1044(sp)
8111cef8:	d8010615 	stw	zero,1048(sp)
8111cefc:	111ba200 	call	8111ba20 <___vfiprintf_internal_r>
8111cf00:	1023883a 	mov	r17,r2
8111cf04:	10000416 	blt	r2,zero,8111cf18 <__sbprintf+0x80>
8111cf08:	d9410004 	addi	r5,sp,1024
8111cf0c:	9009883a 	mov	r4,r18
8111cf10:	1117a380 	call	81117a38 <_fflush_r>
8111cf14:	10000d1e 	bne	r2,zero,8111cf4c <__sbprintf+0xb4>
8111cf18:	d881030b 	ldhu	r2,1036(sp)
8111cf1c:	1080100c 	andi	r2,r2,64
8111cf20:	10000326 	beq	r2,zero,8111cf30 <__sbprintf+0x98>
8111cf24:	8080030b 	ldhu	r2,12(r16)
8111cf28:	10801014 	ori	r2,r2,64
8111cf2c:	8080030d 	sth	r2,12(r16)
8111cf30:	8805883a 	mov	r2,r17
8111cf34:	dfc11d17 	ldw	ra,1140(sp)
8111cf38:	dc811c17 	ldw	r18,1136(sp)
8111cf3c:	dc411b17 	ldw	r17,1132(sp)
8111cf40:	dc011a17 	ldw	r16,1128(sp)
8111cf44:	dec11e04 	addi	sp,sp,1144
8111cf48:	f800283a 	ret
8111cf4c:	047fffc4 	movi	r17,-1
8111cf50:	003ff106 	br	8111cf18 <__reset+0xfb0fcf18>

8111cf54 <_calloc_r>:
8111cf54:	298b383a 	mul	r5,r5,r6
8111cf58:	defffe04 	addi	sp,sp,-8
8111cf5c:	dfc00115 	stw	ra,4(sp)
8111cf60:	dc000015 	stw	r16,0(sp)
8111cf64:	111093c0 	call	8111093c <_malloc_r>
8111cf68:	10002926 	beq	r2,zero,8111d010 <_calloc_r+0xbc>
8111cf6c:	11bfff17 	ldw	r6,-4(r2)
8111cf70:	1021883a 	mov	r16,r2
8111cf74:	00bfff04 	movi	r2,-4
8111cf78:	308c703a 	and	r6,r6,r2
8111cf7c:	00c00904 	movi	r3,36
8111cf80:	308d883a 	add	r6,r6,r2
8111cf84:	19801636 	bltu	r3,r6,8111cfe0 <_calloc_r+0x8c>
8111cf88:	008004c4 	movi	r2,19
8111cf8c:	11800b2e 	bgeu	r2,r6,8111cfbc <_calloc_r+0x68>
8111cf90:	80000015 	stw	zero,0(r16)
8111cf94:	80000115 	stw	zero,4(r16)
8111cf98:	008006c4 	movi	r2,27
8111cf9c:	11801a2e 	bgeu	r2,r6,8111d008 <_calloc_r+0xb4>
8111cfa0:	80000215 	stw	zero,8(r16)
8111cfa4:	80000315 	stw	zero,12(r16)
8111cfa8:	30c0151e 	bne	r6,r3,8111d000 <_calloc_r+0xac>
8111cfac:	80000415 	stw	zero,16(r16)
8111cfb0:	80800604 	addi	r2,r16,24
8111cfb4:	80000515 	stw	zero,20(r16)
8111cfb8:	00000106 	br	8111cfc0 <_calloc_r+0x6c>
8111cfbc:	8005883a 	mov	r2,r16
8111cfc0:	10000015 	stw	zero,0(r2)
8111cfc4:	10000115 	stw	zero,4(r2)
8111cfc8:	10000215 	stw	zero,8(r2)
8111cfcc:	8005883a 	mov	r2,r16
8111cfd0:	dfc00117 	ldw	ra,4(sp)
8111cfd4:	dc000017 	ldw	r16,0(sp)
8111cfd8:	dec00204 	addi	sp,sp,8
8111cfdc:	f800283a 	ret
8111cfe0:	000b883a 	mov	r5,zero
8111cfe4:	8009883a 	mov	r4,r16
8111cfe8:	11112900 	call	81111290 <memset>
8111cfec:	8005883a 	mov	r2,r16
8111cff0:	dfc00117 	ldw	ra,4(sp)
8111cff4:	dc000017 	ldw	r16,0(sp)
8111cff8:	dec00204 	addi	sp,sp,8
8111cffc:	f800283a 	ret
8111d000:	80800404 	addi	r2,r16,16
8111d004:	003fee06 	br	8111cfc0 <__reset+0xfb0fcfc0>
8111d008:	80800204 	addi	r2,r16,8
8111d00c:	003fec06 	br	8111cfc0 <__reset+0xfb0fcfc0>
8111d010:	0005883a 	mov	r2,zero
8111d014:	003fee06 	br	8111cfd0 <__reset+0xfb0fcfd0>

8111d018 <_fclose_r>:
8111d018:	28003926 	beq	r5,zero,8111d100 <_fclose_r+0xe8>
8111d01c:	defffc04 	addi	sp,sp,-16
8111d020:	dc400115 	stw	r17,4(sp)
8111d024:	dc000015 	stw	r16,0(sp)
8111d028:	dfc00315 	stw	ra,12(sp)
8111d02c:	dc800215 	stw	r18,8(sp)
8111d030:	2023883a 	mov	r17,r4
8111d034:	2821883a 	mov	r16,r5
8111d038:	20000226 	beq	r4,zero,8111d044 <_fclose_r+0x2c>
8111d03c:	20800e17 	ldw	r2,56(r4)
8111d040:	10002726 	beq	r2,zero,8111d0e0 <_fclose_r+0xc8>
8111d044:	8080030f 	ldh	r2,12(r16)
8111d048:	1000071e 	bne	r2,zero,8111d068 <_fclose_r+0x50>
8111d04c:	0005883a 	mov	r2,zero
8111d050:	dfc00317 	ldw	ra,12(sp)
8111d054:	dc800217 	ldw	r18,8(sp)
8111d058:	dc400117 	ldw	r17,4(sp)
8111d05c:	dc000017 	ldw	r16,0(sp)
8111d060:	dec00404 	addi	sp,sp,16
8111d064:	f800283a 	ret
8111d068:	800b883a 	mov	r5,r16
8111d06c:	8809883a 	mov	r4,r17
8111d070:	111781c0 	call	8111781c <__sflush_r>
8111d074:	1025883a 	mov	r18,r2
8111d078:	80800b17 	ldw	r2,44(r16)
8111d07c:	10000426 	beq	r2,zero,8111d090 <_fclose_r+0x78>
8111d080:	81400717 	ldw	r5,28(r16)
8111d084:	8809883a 	mov	r4,r17
8111d088:	103ee83a 	callr	r2
8111d08c:	10001616 	blt	r2,zero,8111d0e8 <_fclose_r+0xd0>
8111d090:	8080030b 	ldhu	r2,12(r16)
8111d094:	1080200c 	andi	r2,r2,128
8111d098:	1000151e 	bne	r2,zero,8111d0f0 <_fclose_r+0xd8>
8111d09c:	81400c17 	ldw	r5,48(r16)
8111d0a0:	28000526 	beq	r5,zero,8111d0b8 <_fclose_r+0xa0>
8111d0a4:	80801004 	addi	r2,r16,64
8111d0a8:	28800226 	beq	r5,r2,8111d0b4 <_fclose_r+0x9c>
8111d0ac:	8809883a 	mov	r4,r17
8111d0b0:	11180340 	call	81118034 <_free_r>
8111d0b4:	80000c15 	stw	zero,48(r16)
8111d0b8:	81401117 	ldw	r5,68(r16)
8111d0bc:	28000326 	beq	r5,zero,8111d0cc <_fclose_r+0xb4>
8111d0c0:	8809883a 	mov	r4,r17
8111d0c4:	11180340 	call	81118034 <_free_r>
8111d0c8:	80001115 	stw	zero,68(r16)
8111d0cc:	1117e240 	call	81117e24 <__sfp_lock_acquire>
8111d0d0:	8000030d 	sth	zero,12(r16)
8111d0d4:	1117e280 	call	81117e28 <__sfp_lock_release>
8111d0d8:	9005883a 	mov	r2,r18
8111d0dc:	003fdc06 	br	8111d050 <__reset+0xfb0fd050>
8111d0e0:	1117e140 	call	81117e14 <__sinit>
8111d0e4:	003fd706 	br	8111d044 <__reset+0xfb0fd044>
8111d0e8:	04bfffc4 	movi	r18,-1
8111d0ec:	003fe806 	br	8111d090 <__reset+0xfb0fd090>
8111d0f0:	81400417 	ldw	r5,16(r16)
8111d0f4:	8809883a 	mov	r4,r17
8111d0f8:	11180340 	call	81118034 <_free_r>
8111d0fc:	003fe706 	br	8111d09c <__reset+0xfb0fd09c>
8111d100:	0005883a 	mov	r2,zero
8111d104:	f800283a 	ret

8111d108 <fclose>:
8111d108:	00a044f4 	movhi	r2,33043
8111d10c:	10a2f004 	addi	r2,r2,-29760
8111d110:	200b883a 	mov	r5,r4
8111d114:	11000017 	ldw	r4,0(r2)
8111d118:	111d0181 	jmpi	8111d018 <_fclose_r>

8111d11c <__fputwc>:
8111d11c:	defff804 	addi	sp,sp,-32
8111d120:	dcc00415 	stw	r19,16(sp)
8111d124:	dc800315 	stw	r18,12(sp)
8111d128:	dc000115 	stw	r16,4(sp)
8111d12c:	dfc00715 	stw	ra,28(sp)
8111d130:	dd400615 	stw	r21,24(sp)
8111d134:	dd000515 	stw	r20,20(sp)
8111d138:	dc400215 	stw	r17,8(sp)
8111d13c:	2027883a 	mov	r19,r4
8111d140:	2825883a 	mov	r18,r5
8111d144:	3021883a 	mov	r16,r6
8111d148:	1118a640 	call	81118a64 <__locale_mb_cur_max>
8111d14c:	00c00044 	movi	r3,1
8111d150:	10c03e26 	beq	r2,r3,8111d24c <__fputwc+0x130>
8111d154:	81c01704 	addi	r7,r16,92
8111d158:	900d883a 	mov	r6,r18
8111d15c:	d80b883a 	mov	r5,sp
8111d160:	9809883a 	mov	r4,r19
8111d164:	111d47c0 	call	8111d47c <_wcrtomb_r>
8111d168:	1029883a 	mov	r20,r2
8111d16c:	00bfffc4 	movi	r2,-1
8111d170:	a0802026 	beq	r20,r2,8111d1f4 <__fputwc+0xd8>
8111d174:	d9400003 	ldbu	r5,0(sp)
8111d178:	a0001c26 	beq	r20,zero,8111d1ec <__fputwc+0xd0>
8111d17c:	0023883a 	mov	r17,zero
8111d180:	05400284 	movi	r21,10
8111d184:	00000906 	br	8111d1ac <__fputwc+0x90>
8111d188:	80800017 	ldw	r2,0(r16)
8111d18c:	11400005 	stb	r5,0(r2)
8111d190:	80c00017 	ldw	r3,0(r16)
8111d194:	18c00044 	addi	r3,r3,1
8111d198:	80c00015 	stw	r3,0(r16)
8111d19c:	8c400044 	addi	r17,r17,1
8111d1a0:	dc45883a 	add	r2,sp,r17
8111d1a4:	8d00112e 	bgeu	r17,r20,8111d1ec <__fputwc+0xd0>
8111d1a8:	11400003 	ldbu	r5,0(r2)
8111d1ac:	80c00217 	ldw	r3,8(r16)
8111d1b0:	18ffffc4 	addi	r3,r3,-1
8111d1b4:	80c00215 	stw	r3,8(r16)
8111d1b8:	183ff30e 	bge	r3,zero,8111d188 <__reset+0xfb0fd188>
8111d1bc:	80800617 	ldw	r2,24(r16)
8111d1c0:	18801916 	blt	r3,r2,8111d228 <__fputwc+0x10c>
8111d1c4:	80800017 	ldw	r2,0(r16)
8111d1c8:	11400005 	stb	r5,0(r2)
8111d1cc:	80800017 	ldw	r2,0(r16)
8111d1d0:	10c00003 	ldbu	r3,0(r2)
8111d1d4:	10800044 	addi	r2,r2,1
8111d1d8:	1d402326 	beq	r3,r21,8111d268 <__fputwc+0x14c>
8111d1dc:	80800015 	stw	r2,0(r16)
8111d1e0:	8c400044 	addi	r17,r17,1
8111d1e4:	dc45883a 	add	r2,sp,r17
8111d1e8:	8d3fef36 	bltu	r17,r20,8111d1a8 <__reset+0xfb0fd1a8>
8111d1ec:	9005883a 	mov	r2,r18
8111d1f0:	00000406 	br	8111d204 <__fputwc+0xe8>
8111d1f4:	80c0030b 	ldhu	r3,12(r16)
8111d1f8:	a005883a 	mov	r2,r20
8111d1fc:	18c01014 	ori	r3,r3,64
8111d200:	80c0030d 	sth	r3,12(r16)
8111d204:	dfc00717 	ldw	ra,28(sp)
8111d208:	dd400617 	ldw	r21,24(sp)
8111d20c:	dd000517 	ldw	r20,20(sp)
8111d210:	dcc00417 	ldw	r19,16(sp)
8111d214:	dc800317 	ldw	r18,12(sp)
8111d218:	dc400217 	ldw	r17,8(sp)
8111d21c:	dc000117 	ldw	r16,4(sp)
8111d220:	dec00804 	addi	sp,sp,32
8111d224:	f800283a 	ret
8111d228:	800d883a 	mov	r6,r16
8111d22c:	29403fcc 	andi	r5,r5,255
8111d230:	9809883a 	mov	r4,r19
8111d234:	111d3240 	call	8111d324 <__swbuf_r>
8111d238:	10bfffe0 	cmpeqi	r2,r2,-1
8111d23c:	10803fcc 	andi	r2,r2,255
8111d240:	103fd626 	beq	r2,zero,8111d19c <__reset+0xfb0fd19c>
8111d244:	00bfffc4 	movi	r2,-1
8111d248:	003fee06 	br	8111d204 <__reset+0xfb0fd204>
8111d24c:	90ffffc4 	addi	r3,r18,-1
8111d250:	01003f84 	movi	r4,254
8111d254:	20ffbf36 	bltu	r4,r3,8111d154 <__reset+0xfb0fd154>
8111d258:	900b883a 	mov	r5,r18
8111d25c:	dc800005 	stb	r18,0(sp)
8111d260:	1029883a 	mov	r20,r2
8111d264:	003fc506 	br	8111d17c <__reset+0xfb0fd17c>
8111d268:	800d883a 	mov	r6,r16
8111d26c:	a80b883a 	mov	r5,r21
8111d270:	9809883a 	mov	r4,r19
8111d274:	111d3240 	call	8111d324 <__swbuf_r>
8111d278:	10bfffe0 	cmpeqi	r2,r2,-1
8111d27c:	003fef06 	br	8111d23c <__reset+0xfb0fd23c>

8111d280 <_fputwc_r>:
8111d280:	3080030b 	ldhu	r2,12(r6)
8111d284:	10c8000c 	andi	r3,r2,8192
8111d288:	1800051e 	bne	r3,zero,8111d2a0 <_fputwc_r+0x20>
8111d28c:	30c01917 	ldw	r3,100(r6)
8111d290:	10880014 	ori	r2,r2,8192
8111d294:	3080030d 	sth	r2,12(r6)
8111d298:	18880014 	ori	r2,r3,8192
8111d29c:	30801915 	stw	r2,100(r6)
8111d2a0:	111d11c1 	jmpi	8111d11c <__fputwc>

8111d2a4 <fputwc>:
8111d2a4:	00a044f4 	movhi	r2,33043
8111d2a8:	defffc04 	addi	sp,sp,-16
8111d2ac:	10a2f004 	addi	r2,r2,-29760
8111d2b0:	dc000115 	stw	r16,4(sp)
8111d2b4:	14000017 	ldw	r16,0(r2)
8111d2b8:	dc400215 	stw	r17,8(sp)
8111d2bc:	dfc00315 	stw	ra,12(sp)
8111d2c0:	2023883a 	mov	r17,r4
8111d2c4:	80000226 	beq	r16,zero,8111d2d0 <fputwc+0x2c>
8111d2c8:	80800e17 	ldw	r2,56(r16)
8111d2cc:	10001026 	beq	r2,zero,8111d310 <fputwc+0x6c>
8111d2d0:	2880030b 	ldhu	r2,12(r5)
8111d2d4:	10c8000c 	andi	r3,r2,8192
8111d2d8:	1800051e 	bne	r3,zero,8111d2f0 <fputwc+0x4c>
8111d2dc:	28c01917 	ldw	r3,100(r5)
8111d2e0:	10880014 	ori	r2,r2,8192
8111d2e4:	2880030d 	sth	r2,12(r5)
8111d2e8:	18880014 	ori	r2,r3,8192
8111d2ec:	28801915 	stw	r2,100(r5)
8111d2f0:	280d883a 	mov	r6,r5
8111d2f4:	8009883a 	mov	r4,r16
8111d2f8:	880b883a 	mov	r5,r17
8111d2fc:	dfc00317 	ldw	ra,12(sp)
8111d300:	dc400217 	ldw	r17,8(sp)
8111d304:	dc000117 	ldw	r16,4(sp)
8111d308:	dec00404 	addi	sp,sp,16
8111d30c:	111d11c1 	jmpi	8111d11c <__fputwc>
8111d310:	8009883a 	mov	r4,r16
8111d314:	d9400015 	stw	r5,0(sp)
8111d318:	1117e140 	call	81117e14 <__sinit>
8111d31c:	d9400017 	ldw	r5,0(sp)
8111d320:	003feb06 	br	8111d2d0 <__reset+0xfb0fd2d0>

8111d324 <__swbuf_r>:
8111d324:	defffb04 	addi	sp,sp,-20
8111d328:	dcc00315 	stw	r19,12(sp)
8111d32c:	dc800215 	stw	r18,8(sp)
8111d330:	dc000015 	stw	r16,0(sp)
8111d334:	dfc00415 	stw	ra,16(sp)
8111d338:	dc400115 	stw	r17,4(sp)
8111d33c:	2025883a 	mov	r18,r4
8111d340:	2827883a 	mov	r19,r5
8111d344:	3021883a 	mov	r16,r6
8111d348:	20000226 	beq	r4,zero,8111d354 <__swbuf_r+0x30>
8111d34c:	20800e17 	ldw	r2,56(r4)
8111d350:	10004226 	beq	r2,zero,8111d45c <__swbuf_r+0x138>
8111d354:	80800617 	ldw	r2,24(r16)
8111d358:	8100030b 	ldhu	r4,12(r16)
8111d35c:	80800215 	stw	r2,8(r16)
8111d360:	2080020c 	andi	r2,r4,8
8111d364:	10003626 	beq	r2,zero,8111d440 <__swbuf_r+0x11c>
8111d368:	80c00417 	ldw	r3,16(r16)
8111d36c:	18003426 	beq	r3,zero,8111d440 <__swbuf_r+0x11c>
8111d370:	2088000c 	andi	r2,r4,8192
8111d374:	9c403fcc 	andi	r17,r19,255
8111d378:	10001a26 	beq	r2,zero,8111d3e4 <__swbuf_r+0xc0>
8111d37c:	80800017 	ldw	r2,0(r16)
8111d380:	81000517 	ldw	r4,20(r16)
8111d384:	10c7c83a 	sub	r3,r2,r3
8111d388:	1900200e 	bge	r3,r4,8111d40c <__swbuf_r+0xe8>
8111d38c:	18c00044 	addi	r3,r3,1
8111d390:	81000217 	ldw	r4,8(r16)
8111d394:	11400044 	addi	r5,r2,1
8111d398:	81400015 	stw	r5,0(r16)
8111d39c:	213fffc4 	addi	r4,r4,-1
8111d3a0:	81000215 	stw	r4,8(r16)
8111d3a4:	14c00005 	stb	r19,0(r2)
8111d3a8:	80800517 	ldw	r2,20(r16)
8111d3ac:	10c01e26 	beq	r2,r3,8111d428 <__swbuf_r+0x104>
8111d3b0:	8080030b 	ldhu	r2,12(r16)
8111d3b4:	1080004c 	andi	r2,r2,1
8111d3b8:	10000226 	beq	r2,zero,8111d3c4 <__swbuf_r+0xa0>
8111d3bc:	00800284 	movi	r2,10
8111d3c0:	88801926 	beq	r17,r2,8111d428 <__swbuf_r+0x104>
8111d3c4:	8805883a 	mov	r2,r17
8111d3c8:	dfc00417 	ldw	ra,16(sp)
8111d3cc:	dcc00317 	ldw	r19,12(sp)
8111d3d0:	dc800217 	ldw	r18,8(sp)
8111d3d4:	dc400117 	ldw	r17,4(sp)
8111d3d8:	dc000017 	ldw	r16,0(sp)
8111d3dc:	dec00504 	addi	sp,sp,20
8111d3e0:	f800283a 	ret
8111d3e4:	81401917 	ldw	r5,100(r16)
8111d3e8:	00b7ffc4 	movi	r2,-8193
8111d3ec:	21080014 	ori	r4,r4,8192
8111d3f0:	2884703a 	and	r2,r5,r2
8111d3f4:	80801915 	stw	r2,100(r16)
8111d3f8:	80800017 	ldw	r2,0(r16)
8111d3fc:	8100030d 	sth	r4,12(r16)
8111d400:	81000517 	ldw	r4,20(r16)
8111d404:	10c7c83a 	sub	r3,r2,r3
8111d408:	193fe016 	blt	r3,r4,8111d38c <__reset+0xfb0fd38c>
8111d40c:	800b883a 	mov	r5,r16
8111d410:	9009883a 	mov	r4,r18
8111d414:	1117a380 	call	81117a38 <_fflush_r>
8111d418:	1000071e 	bne	r2,zero,8111d438 <__swbuf_r+0x114>
8111d41c:	80800017 	ldw	r2,0(r16)
8111d420:	00c00044 	movi	r3,1
8111d424:	003fda06 	br	8111d390 <__reset+0xfb0fd390>
8111d428:	800b883a 	mov	r5,r16
8111d42c:	9009883a 	mov	r4,r18
8111d430:	1117a380 	call	81117a38 <_fflush_r>
8111d434:	103fe326 	beq	r2,zero,8111d3c4 <__reset+0xfb0fd3c4>
8111d438:	00bfffc4 	movi	r2,-1
8111d43c:	003fe206 	br	8111d3c8 <__reset+0xfb0fd3c8>
8111d440:	800b883a 	mov	r5,r16
8111d444:	9009883a 	mov	r4,r18
8111d448:	1115dec0 	call	81115dec <__swsetup_r>
8111d44c:	103ffa1e 	bne	r2,zero,8111d438 <__reset+0xfb0fd438>
8111d450:	8100030b 	ldhu	r4,12(r16)
8111d454:	80c00417 	ldw	r3,16(r16)
8111d458:	003fc506 	br	8111d370 <__reset+0xfb0fd370>
8111d45c:	1117e140 	call	81117e14 <__sinit>
8111d460:	003fbc06 	br	8111d354 <__reset+0xfb0fd354>

8111d464 <__swbuf>:
8111d464:	00a044f4 	movhi	r2,33043
8111d468:	10a2f004 	addi	r2,r2,-29760
8111d46c:	280d883a 	mov	r6,r5
8111d470:	200b883a 	mov	r5,r4
8111d474:	11000017 	ldw	r4,0(r2)
8111d478:	111d3241 	jmpi	8111d324 <__swbuf_r>

8111d47c <_wcrtomb_r>:
8111d47c:	defff604 	addi	sp,sp,-40
8111d480:	00a044f4 	movhi	r2,33043
8111d484:	dc800815 	stw	r18,32(sp)
8111d488:	dc400715 	stw	r17,28(sp)
8111d48c:	dc000615 	stw	r16,24(sp)
8111d490:	10a2f404 	addi	r2,r2,-29744
8111d494:	dfc00915 	stw	ra,36(sp)
8111d498:	2021883a 	mov	r16,r4
8111d49c:	3823883a 	mov	r17,r7
8111d4a0:	14800017 	ldw	r18,0(r2)
8111d4a4:	28001426 	beq	r5,zero,8111d4f8 <_wcrtomb_r+0x7c>
8111d4a8:	d9400415 	stw	r5,16(sp)
8111d4ac:	d9800515 	stw	r6,20(sp)
8111d4b0:	1118a580 	call	81118a58 <__locale_charset>
8111d4b4:	d9800517 	ldw	r6,20(sp)
8111d4b8:	d9400417 	ldw	r5,16(sp)
8111d4bc:	100f883a 	mov	r7,r2
8111d4c0:	dc400015 	stw	r17,0(sp)
8111d4c4:	8009883a 	mov	r4,r16
8111d4c8:	903ee83a 	callr	r18
8111d4cc:	00ffffc4 	movi	r3,-1
8111d4d0:	10c0031e 	bne	r2,r3,8111d4e0 <_wcrtomb_r+0x64>
8111d4d4:	88000015 	stw	zero,0(r17)
8111d4d8:	00c02284 	movi	r3,138
8111d4dc:	80c00015 	stw	r3,0(r16)
8111d4e0:	dfc00917 	ldw	ra,36(sp)
8111d4e4:	dc800817 	ldw	r18,32(sp)
8111d4e8:	dc400717 	ldw	r17,28(sp)
8111d4ec:	dc000617 	ldw	r16,24(sp)
8111d4f0:	dec00a04 	addi	sp,sp,40
8111d4f4:	f800283a 	ret
8111d4f8:	1118a580 	call	81118a58 <__locale_charset>
8111d4fc:	100f883a 	mov	r7,r2
8111d500:	dc400015 	stw	r17,0(sp)
8111d504:	000d883a 	mov	r6,zero
8111d508:	d9400104 	addi	r5,sp,4
8111d50c:	8009883a 	mov	r4,r16
8111d510:	903ee83a 	callr	r18
8111d514:	003fed06 	br	8111d4cc <__reset+0xfb0fd4cc>

8111d518 <wcrtomb>:
8111d518:	defff604 	addi	sp,sp,-40
8111d51c:	00a044f4 	movhi	r2,33043
8111d520:	dc800615 	stw	r18,24(sp)
8111d524:	dc400515 	stw	r17,20(sp)
8111d528:	10a2f004 	addi	r2,r2,-29760
8111d52c:	dfc00915 	stw	ra,36(sp)
8111d530:	dd000815 	stw	r20,32(sp)
8111d534:	dcc00715 	stw	r19,28(sp)
8111d538:	dc000415 	stw	r16,16(sp)
8111d53c:	3025883a 	mov	r18,r6
8111d540:	14400017 	ldw	r17,0(r2)
8111d544:	20001926 	beq	r4,zero,8111d5ac <wcrtomb+0x94>
8111d548:	00a044f4 	movhi	r2,33043
8111d54c:	10a2f404 	addi	r2,r2,-29744
8111d550:	15000017 	ldw	r20,0(r2)
8111d554:	2021883a 	mov	r16,r4
8111d558:	2827883a 	mov	r19,r5
8111d55c:	1118a580 	call	81118a58 <__locale_charset>
8111d560:	100f883a 	mov	r7,r2
8111d564:	dc800015 	stw	r18,0(sp)
8111d568:	980d883a 	mov	r6,r19
8111d56c:	800b883a 	mov	r5,r16
8111d570:	8809883a 	mov	r4,r17
8111d574:	a03ee83a 	callr	r20
8111d578:	00ffffc4 	movi	r3,-1
8111d57c:	10c0031e 	bne	r2,r3,8111d58c <wcrtomb+0x74>
8111d580:	90000015 	stw	zero,0(r18)
8111d584:	00c02284 	movi	r3,138
8111d588:	88c00015 	stw	r3,0(r17)
8111d58c:	dfc00917 	ldw	ra,36(sp)
8111d590:	dd000817 	ldw	r20,32(sp)
8111d594:	dcc00717 	ldw	r19,28(sp)
8111d598:	dc800617 	ldw	r18,24(sp)
8111d59c:	dc400517 	ldw	r17,20(sp)
8111d5a0:	dc000417 	ldw	r16,16(sp)
8111d5a4:	dec00a04 	addi	sp,sp,40
8111d5a8:	f800283a 	ret
8111d5ac:	00a044f4 	movhi	r2,33043
8111d5b0:	10a2f404 	addi	r2,r2,-29744
8111d5b4:	14000017 	ldw	r16,0(r2)
8111d5b8:	1118a580 	call	81118a58 <__locale_charset>
8111d5bc:	100f883a 	mov	r7,r2
8111d5c0:	dc800015 	stw	r18,0(sp)
8111d5c4:	000d883a 	mov	r6,zero
8111d5c8:	d9400104 	addi	r5,sp,4
8111d5cc:	8809883a 	mov	r4,r17
8111d5d0:	803ee83a 	callr	r16
8111d5d4:	003fe806 	br	8111d578 <__reset+0xfb0fd578>

8111d5d8 <__ascii_wctomb>:
8111d5d8:	28000526 	beq	r5,zero,8111d5f0 <__ascii_wctomb+0x18>
8111d5dc:	00803fc4 	movi	r2,255
8111d5e0:	11800536 	bltu	r2,r6,8111d5f8 <__ascii_wctomb+0x20>
8111d5e4:	29800005 	stb	r6,0(r5)
8111d5e8:	00800044 	movi	r2,1
8111d5ec:	f800283a 	ret
8111d5f0:	0005883a 	mov	r2,zero
8111d5f4:	f800283a 	ret
8111d5f8:	00802284 	movi	r2,138
8111d5fc:	20800015 	stw	r2,0(r4)
8111d600:	00bfffc4 	movi	r2,-1
8111d604:	f800283a 	ret

8111d608 <_wctomb_r>:
8111d608:	00a044f4 	movhi	r2,33043
8111d60c:	defff904 	addi	sp,sp,-28
8111d610:	10a2f404 	addi	r2,r2,-29744
8111d614:	dfc00615 	stw	ra,24(sp)
8111d618:	dc400515 	stw	r17,20(sp)
8111d61c:	dc000415 	stw	r16,16(sp)
8111d620:	3823883a 	mov	r17,r7
8111d624:	14000017 	ldw	r16,0(r2)
8111d628:	d9000115 	stw	r4,4(sp)
8111d62c:	d9400215 	stw	r5,8(sp)
8111d630:	d9800315 	stw	r6,12(sp)
8111d634:	1118a580 	call	81118a58 <__locale_charset>
8111d638:	d9800317 	ldw	r6,12(sp)
8111d63c:	d9400217 	ldw	r5,8(sp)
8111d640:	d9000117 	ldw	r4,4(sp)
8111d644:	100f883a 	mov	r7,r2
8111d648:	dc400015 	stw	r17,0(sp)
8111d64c:	803ee83a 	callr	r16
8111d650:	dfc00617 	ldw	ra,24(sp)
8111d654:	dc400517 	ldw	r17,20(sp)
8111d658:	dc000417 	ldw	r16,16(sp)
8111d65c:	dec00704 	addi	sp,sp,28
8111d660:	f800283a 	ret

8111d664 <__udivdi3>:
8111d664:	defff504 	addi	sp,sp,-44
8111d668:	dcc00415 	stw	r19,16(sp)
8111d66c:	dc000115 	stw	r16,4(sp)
8111d670:	dfc00a15 	stw	ra,40(sp)
8111d674:	df000915 	stw	fp,36(sp)
8111d678:	ddc00815 	stw	r23,32(sp)
8111d67c:	dd800715 	stw	r22,28(sp)
8111d680:	dd400615 	stw	r21,24(sp)
8111d684:	dd000515 	stw	r20,20(sp)
8111d688:	dc800315 	stw	r18,12(sp)
8111d68c:	dc400215 	stw	r17,8(sp)
8111d690:	2027883a 	mov	r19,r4
8111d694:	2821883a 	mov	r16,r5
8111d698:	3800411e 	bne	r7,zero,8111d7a0 <__udivdi3+0x13c>
8111d69c:	3023883a 	mov	r17,r6
8111d6a0:	2025883a 	mov	r18,r4
8111d6a4:	2980522e 	bgeu	r5,r6,8111d7f0 <__udivdi3+0x18c>
8111d6a8:	00bfffd4 	movui	r2,65535
8111d6ac:	282d883a 	mov	r22,r5
8111d6b0:	1180a836 	bltu	r2,r6,8111d954 <__udivdi3+0x2f0>
8111d6b4:	00803fc4 	movi	r2,255
8111d6b8:	1185803a 	cmpltu	r2,r2,r6
8111d6bc:	100490fa 	slli	r2,r2,3
8111d6c0:	3086d83a 	srl	r3,r6,r2
8111d6c4:	012044b4 	movhi	r4,33042
8111d6c8:	211a6804 	addi	r4,r4,27040
8111d6cc:	20c7883a 	add	r3,r4,r3
8111d6d0:	18c00003 	ldbu	r3,0(r3)
8111d6d4:	1885883a 	add	r2,r3,r2
8111d6d8:	00c00804 	movi	r3,32
8111d6dc:	1887c83a 	sub	r3,r3,r2
8111d6e0:	18000526 	beq	r3,zero,8111d6f8 <__udivdi3+0x94>
8111d6e4:	80e0983a 	sll	r16,r16,r3
8111d6e8:	9884d83a 	srl	r2,r19,r2
8111d6ec:	30e2983a 	sll	r17,r6,r3
8111d6f0:	98e4983a 	sll	r18,r19,r3
8111d6f4:	142cb03a 	or	r22,r2,r16
8111d6f8:	882ad43a 	srli	r21,r17,16
8111d6fc:	b009883a 	mov	r4,r22
8111d700:	8d3fffcc 	andi	r20,r17,65535
8111d704:	a80b883a 	mov	r5,r21
8111d708:	111e2700 	call	8111e270 <__umodsi3>
8111d70c:	b009883a 	mov	r4,r22
8111d710:	a80b883a 	mov	r5,r21
8111d714:	1027883a 	mov	r19,r2
8111d718:	111e20c0 	call	8111e20c <__udivsi3>
8111d71c:	102d883a 	mov	r22,r2
8111d720:	9826943a 	slli	r19,r19,16
8111d724:	9004d43a 	srli	r2,r18,16
8111d728:	a5a1383a 	mul	r16,r20,r22
8111d72c:	14c4b03a 	or	r2,r2,r19
8111d730:	1400052e 	bgeu	r2,r16,8111d748 <__udivdi3+0xe4>
8111d734:	1445883a 	add	r2,r2,r17
8111d738:	b0ffffc4 	addi	r3,r22,-1
8111d73c:	14400136 	bltu	r2,r17,8111d744 <__udivdi3+0xe0>
8111d740:	14012336 	bltu	r2,r16,8111dbd0 <__udivdi3+0x56c>
8111d744:	182d883a 	mov	r22,r3
8111d748:	1421c83a 	sub	r16,r2,r16
8111d74c:	a80b883a 	mov	r5,r21
8111d750:	8009883a 	mov	r4,r16
8111d754:	111e2700 	call	8111e270 <__umodsi3>
8111d758:	1027883a 	mov	r19,r2
8111d75c:	a80b883a 	mov	r5,r21
8111d760:	8009883a 	mov	r4,r16
8111d764:	111e20c0 	call	8111e20c <__udivsi3>
8111d768:	9826943a 	slli	r19,r19,16
8111d76c:	a0a9383a 	mul	r20,r20,r2
8111d770:	94bfffcc 	andi	r18,r18,65535
8111d774:	94e4b03a 	or	r18,r18,r19
8111d778:	9500052e 	bgeu	r18,r20,8111d790 <__udivdi3+0x12c>
8111d77c:	8ca5883a 	add	r18,r17,r18
8111d780:	10ffffc4 	addi	r3,r2,-1
8111d784:	9440f136 	bltu	r18,r17,8111db4c <__udivdi3+0x4e8>
8111d788:	9500f02e 	bgeu	r18,r20,8111db4c <__udivdi3+0x4e8>
8111d78c:	10bfff84 	addi	r2,r2,-2
8111d790:	b00c943a 	slli	r6,r22,16
8111d794:	0007883a 	mov	r3,zero
8111d798:	3084b03a 	or	r2,r6,r2
8111d79c:	00005906 	br	8111d904 <__udivdi3+0x2a0>
8111d7a0:	29c05636 	bltu	r5,r7,8111d8fc <__udivdi3+0x298>
8111d7a4:	00bfffd4 	movui	r2,65535
8111d7a8:	11c0622e 	bgeu	r2,r7,8111d934 <__udivdi3+0x2d0>
8111d7ac:	00804034 	movhi	r2,256
8111d7b0:	10bfffc4 	addi	r2,r2,-1
8111d7b4:	11c0ee36 	bltu	r2,r7,8111db70 <__udivdi3+0x50c>
8111d7b8:	00800404 	movi	r2,16
8111d7bc:	3886d83a 	srl	r3,r7,r2
8111d7c0:	012044b4 	movhi	r4,33042
8111d7c4:	211a6804 	addi	r4,r4,27040
8111d7c8:	20c7883a 	add	r3,r4,r3
8111d7cc:	18c00003 	ldbu	r3,0(r3)
8111d7d0:	05400804 	movi	r21,32
8111d7d4:	1885883a 	add	r2,r3,r2
8111d7d8:	a8abc83a 	sub	r21,r21,r2
8111d7dc:	a800621e 	bne	r21,zero,8111d968 <__udivdi3+0x304>
8111d7e0:	3c00e936 	bltu	r7,r16,8111db88 <__udivdi3+0x524>
8111d7e4:	9985403a 	cmpgeu	r2,r19,r6
8111d7e8:	0007883a 	mov	r3,zero
8111d7ec:	00004506 	br	8111d904 <__udivdi3+0x2a0>
8111d7f0:	3000041e 	bne	r6,zero,8111d804 <__udivdi3+0x1a0>
8111d7f4:	000b883a 	mov	r5,zero
8111d7f8:	01000044 	movi	r4,1
8111d7fc:	111e20c0 	call	8111e20c <__udivsi3>
8111d800:	1023883a 	mov	r17,r2
8111d804:	00bfffd4 	movui	r2,65535
8111d808:	14404e2e 	bgeu	r2,r17,8111d944 <__udivdi3+0x2e0>
8111d80c:	00804034 	movhi	r2,256
8111d810:	10bfffc4 	addi	r2,r2,-1
8111d814:	1440d836 	bltu	r2,r17,8111db78 <__udivdi3+0x514>
8111d818:	00800404 	movi	r2,16
8111d81c:	8886d83a 	srl	r3,r17,r2
8111d820:	012044b4 	movhi	r4,33042
8111d824:	211a6804 	addi	r4,r4,27040
8111d828:	20c7883a 	add	r3,r4,r3
8111d82c:	18c00003 	ldbu	r3,0(r3)
8111d830:	1885883a 	add	r2,r3,r2
8111d834:	00c00804 	movi	r3,32
8111d838:	1887c83a 	sub	r3,r3,r2
8111d83c:	18008f1e 	bne	r3,zero,8111da7c <__udivdi3+0x418>
8111d840:	882ad43a 	srli	r21,r17,16
8111d844:	8461c83a 	sub	r16,r16,r17
8111d848:	8d3fffcc 	andi	r20,r17,65535
8111d84c:	00c00044 	movi	r3,1
8111d850:	8009883a 	mov	r4,r16
8111d854:	a80b883a 	mov	r5,r21
8111d858:	d8c00015 	stw	r3,0(sp)
8111d85c:	111e2700 	call	8111e270 <__umodsi3>
8111d860:	8009883a 	mov	r4,r16
8111d864:	a80b883a 	mov	r5,r21
8111d868:	1027883a 	mov	r19,r2
8111d86c:	111e20c0 	call	8111e20c <__udivsi3>
8111d870:	9826943a 	slli	r19,r19,16
8111d874:	9008d43a 	srli	r4,r18,16
8111d878:	1521383a 	mul	r16,r2,r20
8111d87c:	102d883a 	mov	r22,r2
8111d880:	24c8b03a 	or	r4,r4,r19
8111d884:	d8c00017 	ldw	r3,0(sp)
8111d888:	2400052e 	bgeu	r4,r16,8111d8a0 <__udivdi3+0x23c>
8111d88c:	2449883a 	add	r4,r4,r17
8111d890:	b0bfffc4 	addi	r2,r22,-1
8111d894:	24400136 	bltu	r4,r17,8111d89c <__udivdi3+0x238>
8111d898:	2400ca36 	bltu	r4,r16,8111dbc4 <__udivdi3+0x560>
8111d89c:	102d883a 	mov	r22,r2
8111d8a0:	2421c83a 	sub	r16,r4,r16
8111d8a4:	a80b883a 	mov	r5,r21
8111d8a8:	8009883a 	mov	r4,r16
8111d8ac:	d8c00015 	stw	r3,0(sp)
8111d8b0:	111e2700 	call	8111e270 <__umodsi3>
8111d8b4:	1027883a 	mov	r19,r2
8111d8b8:	a80b883a 	mov	r5,r21
8111d8bc:	8009883a 	mov	r4,r16
8111d8c0:	111e20c0 	call	8111e20c <__udivsi3>
8111d8c4:	9826943a 	slli	r19,r19,16
8111d8c8:	1529383a 	mul	r20,r2,r20
8111d8cc:	94bfffcc 	andi	r18,r18,65535
8111d8d0:	94e4b03a 	or	r18,r18,r19
8111d8d4:	d8c00017 	ldw	r3,0(sp)
8111d8d8:	9500052e 	bgeu	r18,r20,8111d8f0 <__udivdi3+0x28c>
8111d8dc:	8ca5883a 	add	r18,r17,r18
8111d8e0:	113fffc4 	addi	r4,r2,-1
8111d8e4:	94409736 	bltu	r18,r17,8111db44 <__udivdi3+0x4e0>
8111d8e8:	9500962e 	bgeu	r18,r20,8111db44 <__udivdi3+0x4e0>
8111d8ec:	10bfff84 	addi	r2,r2,-2
8111d8f0:	b00c943a 	slli	r6,r22,16
8111d8f4:	3084b03a 	or	r2,r6,r2
8111d8f8:	00000206 	br	8111d904 <__udivdi3+0x2a0>
8111d8fc:	0007883a 	mov	r3,zero
8111d900:	0005883a 	mov	r2,zero
8111d904:	dfc00a17 	ldw	ra,40(sp)
8111d908:	df000917 	ldw	fp,36(sp)
8111d90c:	ddc00817 	ldw	r23,32(sp)
8111d910:	dd800717 	ldw	r22,28(sp)
8111d914:	dd400617 	ldw	r21,24(sp)
8111d918:	dd000517 	ldw	r20,20(sp)
8111d91c:	dcc00417 	ldw	r19,16(sp)
8111d920:	dc800317 	ldw	r18,12(sp)
8111d924:	dc400217 	ldw	r17,8(sp)
8111d928:	dc000117 	ldw	r16,4(sp)
8111d92c:	dec00b04 	addi	sp,sp,44
8111d930:	f800283a 	ret
8111d934:	00803fc4 	movi	r2,255
8111d938:	11c5803a 	cmpltu	r2,r2,r7
8111d93c:	100490fa 	slli	r2,r2,3
8111d940:	003f9e06 	br	8111d7bc <__reset+0xfb0fd7bc>
8111d944:	00803fc4 	movi	r2,255
8111d948:	1445803a 	cmpltu	r2,r2,r17
8111d94c:	100490fa 	slli	r2,r2,3
8111d950:	003fb206 	br	8111d81c <__reset+0xfb0fd81c>
8111d954:	00804034 	movhi	r2,256
8111d958:	10bfffc4 	addi	r2,r2,-1
8111d95c:	11808836 	bltu	r2,r6,8111db80 <__udivdi3+0x51c>
8111d960:	00800404 	movi	r2,16
8111d964:	003f5606 	br	8111d6c0 <__reset+0xfb0fd6c0>
8111d968:	30aed83a 	srl	r23,r6,r2
8111d96c:	3d4e983a 	sll	r7,r7,r21
8111d970:	80acd83a 	srl	r22,r16,r2
8111d974:	9884d83a 	srl	r2,r19,r2
8111d978:	3deeb03a 	or	r23,r7,r23
8111d97c:	b824d43a 	srli	r18,r23,16
8111d980:	8560983a 	sll	r16,r16,r21
8111d984:	b009883a 	mov	r4,r22
8111d988:	900b883a 	mov	r5,r18
8111d98c:	3568983a 	sll	r20,r6,r21
8111d990:	1420b03a 	or	r16,r2,r16
8111d994:	111e2700 	call	8111e270 <__umodsi3>
8111d998:	b009883a 	mov	r4,r22
8111d99c:	900b883a 	mov	r5,r18
8111d9a0:	1023883a 	mov	r17,r2
8111d9a4:	111e20c0 	call	8111e20c <__udivsi3>
8111d9a8:	8808943a 	slli	r4,r17,16
8111d9ac:	bf3fffcc 	andi	fp,r23,65535
8111d9b0:	8006d43a 	srli	r3,r16,16
8111d9b4:	e0a3383a 	mul	r17,fp,r2
8111d9b8:	100d883a 	mov	r6,r2
8111d9bc:	1906b03a 	or	r3,r3,r4
8111d9c0:	1c40042e 	bgeu	r3,r17,8111d9d4 <__udivdi3+0x370>
8111d9c4:	1dc7883a 	add	r3,r3,r23
8111d9c8:	10bfffc4 	addi	r2,r2,-1
8111d9cc:	1dc0752e 	bgeu	r3,r23,8111dba4 <__udivdi3+0x540>
8111d9d0:	100d883a 	mov	r6,r2
8111d9d4:	1c63c83a 	sub	r17,r3,r17
8111d9d8:	900b883a 	mov	r5,r18
8111d9dc:	8809883a 	mov	r4,r17
8111d9e0:	d9800015 	stw	r6,0(sp)
8111d9e4:	111e2700 	call	8111e270 <__umodsi3>
8111d9e8:	102d883a 	mov	r22,r2
8111d9ec:	8809883a 	mov	r4,r17
8111d9f0:	900b883a 	mov	r5,r18
8111d9f4:	111e20c0 	call	8111e20c <__udivsi3>
8111d9f8:	b02c943a 	slli	r22,r22,16
8111d9fc:	e089383a 	mul	r4,fp,r2
8111da00:	843fffcc 	andi	r16,r16,65535
8111da04:	85a0b03a 	or	r16,r16,r22
8111da08:	d9800017 	ldw	r6,0(sp)
8111da0c:	8100042e 	bgeu	r16,r4,8111da20 <__udivdi3+0x3bc>
8111da10:	85e1883a 	add	r16,r16,r23
8111da14:	10ffffc4 	addi	r3,r2,-1
8111da18:	85c05e2e 	bgeu	r16,r23,8111db94 <__udivdi3+0x530>
8111da1c:	1805883a 	mov	r2,r3
8111da20:	300c943a 	slli	r6,r6,16
8111da24:	a17fffcc 	andi	r5,r20,65535
8111da28:	a028d43a 	srli	r20,r20,16
8111da2c:	3084b03a 	or	r2,r6,r2
8111da30:	10ffffcc 	andi	r3,r2,65535
8111da34:	100cd43a 	srli	r6,r2,16
8111da38:	194f383a 	mul	r7,r3,r5
8111da3c:	1d07383a 	mul	r3,r3,r20
8111da40:	314b383a 	mul	r5,r6,r5
8111da44:	3810d43a 	srli	r8,r7,16
8111da48:	8121c83a 	sub	r16,r16,r4
8111da4c:	1947883a 	add	r3,r3,r5
8111da50:	40c7883a 	add	r3,r8,r3
8111da54:	350d383a 	mul	r6,r6,r20
8111da58:	1940022e 	bgeu	r3,r5,8111da64 <__udivdi3+0x400>
8111da5c:	01000074 	movhi	r4,1
8111da60:	310d883a 	add	r6,r6,r4
8111da64:	1828d43a 	srli	r20,r3,16
8111da68:	a18d883a 	add	r6,r20,r6
8111da6c:	81803e36 	bltu	r16,r6,8111db68 <__udivdi3+0x504>
8111da70:	81803826 	beq	r16,r6,8111db54 <__udivdi3+0x4f0>
8111da74:	0007883a 	mov	r3,zero
8111da78:	003fa206 	br	8111d904 <__reset+0xfb0fd904>
8111da7c:	88e2983a 	sll	r17,r17,r3
8111da80:	80a8d83a 	srl	r20,r16,r2
8111da84:	80e0983a 	sll	r16,r16,r3
8111da88:	882ad43a 	srli	r21,r17,16
8111da8c:	9884d83a 	srl	r2,r19,r2
8111da90:	a009883a 	mov	r4,r20
8111da94:	a80b883a 	mov	r5,r21
8111da98:	142eb03a 	or	r23,r2,r16
8111da9c:	98e4983a 	sll	r18,r19,r3
8111daa0:	111e2700 	call	8111e270 <__umodsi3>
8111daa4:	a009883a 	mov	r4,r20
8111daa8:	a80b883a 	mov	r5,r21
8111daac:	1021883a 	mov	r16,r2
8111dab0:	111e20c0 	call	8111e20c <__udivsi3>
8111dab4:	1039883a 	mov	fp,r2
8111dab8:	8d3fffcc 	andi	r20,r17,65535
8111dabc:	8020943a 	slli	r16,r16,16
8111dac0:	b804d43a 	srli	r2,r23,16
8111dac4:	a72d383a 	mul	r22,r20,fp
8111dac8:	1404b03a 	or	r2,r2,r16
8111dacc:	1580062e 	bgeu	r2,r22,8111dae8 <__udivdi3+0x484>
8111dad0:	1445883a 	add	r2,r2,r17
8111dad4:	e0ffffc4 	addi	r3,fp,-1
8111dad8:	14403836 	bltu	r2,r17,8111dbbc <__udivdi3+0x558>
8111dadc:	1580372e 	bgeu	r2,r22,8111dbbc <__udivdi3+0x558>
8111dae0:	e73fff84 	addi	fp,fp,-2
8111dae4:	1445883a 	add	r2,r2,r17
8111dae8:	15adc83a 	sub	r22,r2,r22
8111daec:	a80b883a 	mov	r5,r21
8111daf0:	b009883a 	mov	r4,r22
8111daf4:	111e2700 	call	8111e270 <__umodsi3>
8111daf8:	1027883a 	mov	r19,r2
8111dafc:	b009883a 	mov	r4,r22
8111db00:	a80b883a 	mov	r5,r21
8111db04:	111e20c0 	call	8111e20c <__udivsi3>
8111db08:	9826943a 	slli	r19,r19,16
8111db0c:	a0a1383a 	mul	r16,r20,r2
8111db10:	b93fffcc 	andi	r4,r23,65535
8111db14:	24c8b03a 	or	r4,r4,r19
8111db18:	2400062e 	bgeu	r4,r16,8111db34 <__udivdi3+0x4d0>
8111db1c:	2449883a 	add	r4,r4,r17
8111db20:	10ffffc4 	addi	r3,r2,-1
8111db24:	24402336 	bltu	r4,r17,8111dbb4 <__udivdi3+0x550>
8111db28:	2400222e 	bgeu	r4,r16,8111dbb4 <__udivdi3+0x550>
8111db2c:	10bfff84 	addi	r2,r2,-2
8111db30:	2449883a 	add	r4,r4,r17
8111db34:	e038943a 	slli	fp,fp,16
8111db38:	2421c83a 	sub	r16,r4,r16
8111db3c:	e086b03a 	or	r3,fp,r2
8111db40:	003f4306 	br	8111d850 <__reset+0xfb0fd850>
8111db44:	2005883a 	mov	r2,r4
8111db48:	003f6906 	br	8111d8f0 <__reset+0xfb0fd8f0>
8111db4c:	1805883a 	mov	r2,r3
8111db50:	003f0f06 	br	8111d790 <__reset+0xfb0fd790>
8111db54:	1806943a 	slli	r3,r3,16
8111db58:	9d66983a 	sll	r19,r19,r21
8111db5c:	39ffffcc 	andi	r7,r7,65535
8111db60:	19c7883a 	add	r3,r3,r7
8111db64:	98ffc32e 	bgeu	r19,r3,8111da74 <__reset+0xfb0fda74>
8111db68:	10bfffc4 	addi	r2,r2,-1
8111db6c:	003fc106 	br	8111da74 <__reset+0xfb0fda74>
8111db70:	00800604 	movi	r2,24
8111db74:	003f1106 	br	8111d7bc <__reset+0xfb0fd7bc>
8111db78:	00800604 	movi	r2,24
8111db7c:	003f2706 	br	8111d81c <__reset+0xfb0fd81c>
8111db80:	00800604 	movi	r2,24
8111db84:	003ece06 	br	8111d6c0 <__reset+0xfb0fd6c0>
8111db88:	0007883a 	mov	r3,zero
8111db8c:	00800044 	movi	r2,1
8111db90:	003f5c06 	br	8111d904 <__reset+0xfb0fd904>
8111db94:	813fa12e 	bgeu	r16,r4,8111da1c <__reset+0xfb0fda1c>
8111db98:	10bfff84 	addi	r2,r2,-2
8111db9c:	85e1883a 	add	r16,r16,r23
8111dba0:	003f9f06 	br	8111da20 <__reset+0xfb0fda20>
8111dba4:	1c7f8a2e 	bgeu	r3,r17,8111d9d0 <__reset+0xfb0fd9d0>
8111dba8:	31bfff84 	addi	r6,r6,-2
8111dbac:	1dc7883a 	add	r3,r3,r23
8111dbb0:	003f8806 	br	8111d9d4 <__reset+0xfb0fd9d4>
8111dbb4:	1805883a 	mov	r2,r3
8111dbb8:	003fde06 	br	8111db34 <__reset+0xfb0fdb34>
8111dbbc:	1839883a 	mov	fp,r3
8111dbc0:	003fc906 	br	8111dae8 <__reset+0xfb0fdae8>
8111dbc4:	b5bfff84 	addi	r22,r22,-2
8111dbc8:	2449883a 	add	r4,r4,r17
8111dbcc:	003f3406 	br	8111d8a0 <__reset+0xfb0fd8a0>
8111dbd0:	b5bfff84 	addi	r22,r22,-2
8111dbd4:	1445883a 	add	r2,r2,r17
8111dbd8:	003edb06 	br	8111d748 <__reset+0xfb0fd748>

8111dbdc <__umoddi3>:
8111dbdc:	defff404 	addi	sp,sp,-48
8111dbe0:	df000a15 	stw	fp,40(sp)
8111dbe4:	dc400315 	stw	r17,12(sp)
8111dbe8:	dc000215 	stw	r16,8(sp)
8111dbec:	dfc00b15 	stw	ra,44(sp)
8111dbf0:	ddc00915 	stw	r23,36(sp)
8111dbf4:	dd800815 	stw	r22,32(sp)
8111dbf8:	dd400715 	stw	r21,28(sp)
8111dbfc:	dd000615 	stw	r20,24(sp)
8111dc00:	dcc00515 	stw	r19,20(sp)
8111dc04:	dc800415 	stw	r18,16(sp)
8111dc08:	2021883a 	mov	r16,r4
8111dc0c:	2823883a 	mov	r17,r5
8111dc10:	2839883a 	mov	fp,r5
8111dc14:	38003c1e 	bne	r7,zero,8111dd08 <__umoddi3+0x12c>
8111dc18:	3027883a 	mov	r19,r6
8111dc1c:	2029883a 	mov	r20,r4
8111dc20:	2980512e 	bgeu	r5,r6,8111dd68 <__umoddi3+0x18c>
8111dc24:	00bfffd4 	movui	r2,65535
8111dc28:	11809a36 	bltu	r2,r6,8111de94 <__umoddi3+0x2b8>
8111dc2c:	01003fc4 	movi	r4,255
8111dc30:	2189803a 	cmpltu	r4,r4,r6
8111dc34:	200890fa 	slli	r4,r4,3
8111dc38:	3104d83a 	srl	r2,r6,r4
8111dc3c:	00e044b4 	movhi	r3,33042
8111dc40:	18da6804 	addi	r3,r3,27040
8111dc44:	1885883a 	add	r2,r3,r2
8111dc48:	10c00003 	ldbu	r3,0(r2)
8111dc4c:	00800804 	movi	r2,32
8111dc50:	1909883a 	add	r4,r3,r4
8111dc54:	1125c83a 	sub	r18,r2,r4
8111dc58:	90000526 	beq	r18,zero,8111dc70 <__umoddi3+0x94>
8111dc5c:	8ca2983a 	sll	r17,r17,r18
8111dc60:	8108d83a 	srl	r4,r16,r4
8111dc64:	34a6983a 	sll	r19,r6,r18
8111dc68:	84a8983a 	sll	r20,r16,r18
8111dc6c:	2478b03a 	or	fp,r4,r17
8111dc70:	982ed43a 	srli	r23,r19,16
8111dc74:	e009883a 	mov	r4,fp
8111dc78:	9dbfffcc 	andi	r22,r19,65535
8111dc7c:	b80b883a 	mov	r5,r23
8111dc80:	111e2700 	call	8111e270 <__umodsi3>
8111dc84:	e009883a 	mov	r4,fp
8111dc88:	b80b883a 	mov	r5,r23
8111dc8c:	102b883a 	mov	r21,r2
8111dc90:	111e20c0 	call	8111e20c <__udivsi3>
8111dc94:	a806943a 	slli	r3,r21,16
8111dc98:	a008d43a 	srli	r4,r20,16
8111dc9c:	b085383a 	mul	r2,r22,r2
8111dca0:	20c8b03a 	or	r4,r4,r3
8111dca4:	2080032e 	bgeu	r4,r2,8111dcb4 <__umoddi3+0xd8>
8111dca8:	24c9883a 	add	r4,r4,r19
8111dcac:	24c00136 	bltu	r4,r19,8111dcb4 <__umoddi3+0xd8>
8111dcb0:	20811036 	bltu	r4,r2,8111e0f4 <__umoddi3+0x518>
8111dcb4:	20abc83a 	sub	r21,r4,r2
8111dcb8:	b80b883a 	mov	r5,r23
8111dcbc:	a809883a 	mov	r4,r21
8111dcc0:	111e2700 	call	8111e270 <__umodsi3>
8111dcc4:	1023883a 	mov	r17,r2
8111dcc8:	b80b883a 	mov	r5,r23
8111dccc:	a809883a 	mov	r4,r21
8111dcd0:	111e20c0 	call	8111e20c <__udivsi3>
8111dcd4:	8822943a 	slli	r17,r17,16
8111dcd8:	b085383a 	mul	r2,r22,r2
8111dcdc:	a0ffffcc 	andi	r3,r20,65535
8111dce0:	1c46b03a 	or	r3,r3,r17
8111dce4:	1880042e 	bgeu	r3,r2,8111dcf8 <__umoddi3+0x11c>
8111dce8:	1cc7883a 	add	r3,r3,r19
8111dcec:	1cc00236 	bltu	r3,r19,8111dcf8 <__umoddi3+0x11c>
8111dcf0:	1880012e 	bgeu	r3,r2,8111dcf8 <__umoddi3+0x11c>
8111dcf4:	1cc7883a 	add	r3,r3,r19
8111dcf8:	1885c83a 	sub	r2,r3,r2
8111dcfc:	1484d83a 	srl	r2,r2,r18
8111dd00:	0007883a 	mov	r3,zero
8111dd04:	00004f06 	br	8111de44 <__umoddi3+0x268>
8111dd08:	29c04c36 	bltu	r5,r7,8111de3c <__umoddi3+0x260>
8111dd0c:	00bfffd4 	movui	r2,65535
8111dd10:	11c0582e 	bgeu	r2,r7,8111de74 <__umoddi3+0x298>
8111dd14:	00804034 	movhi	r2,256
8111dd18:	10bfffc4 	addi	r2,r2,-1
8111dd1c:	11c0e736 	bltu	r2,r7,8111e0bc <__umoddi3+0x4e0>
8111dd20:	01000404 	movi	r4,16
8111dd24:	3904d83a 	srl	r2,r7,r4
8111dd28:	00e044b4 	movhi	r3,33042
8111dd2c:	18da6804 	addi	r3,r3,27040
8111dd30:	1885883a 	add	r2,r3,r2
8111dd34:	14c00003 	ldbu	r19,0(r2)
8111dd38:	00c00804 	movi	r3,32
8111dd3c:	9927883a 	add	r19,r19,r4
8111dd40:	1ce9c83a 	sub	r20,r3,r19
8111dd44:	a000581e 	bne	r20,zero,8111dea8 <__umoddi3+0x2cc>
8111dd48:	3c400136 	bltu	r7,r17,8111dd50 <__umoddi3+0x174>
8111dd4c:	8180eb36 	bltu	r16,r6,8111e0fc <__umoddi3+0x520>
8111dd50:	8185c83a 	sub	r2,r16,r6
8111dd54:	89e3c83a 	sub	r17,r17,r7
8111dd58:	8089803a 	cmpltu	r4,r16,r2
8111dd5c:	8939c83a 	sub	fp,r17,r4
8111dd60:	e007883a 	mov	r3,fp
8111dd64:	00003706 	br	8111de44 <__umoddi3+0x268>
8111dd68:	3000041e 	bne	r6,zero,8111dd7c <__umoddi3+0x1a0>
8111dd6c:	000b883a 	mov	r5,zero
8111dd70:	01000044 	movi	r4,1
8111dd74:	111e20c0 	call	8111e20c <__udivsi3>
8111dd78:	1027883a 	mov	r19,r2
8111dd7c:	00bfffd4 	movui	r2,65535
8111dd80:	14c0402e 	bgeu	r2,r19,8111de84 <__umoddi3+0x2a8>
8111dd84:	00804034 	movhi	r2,256
8111dd88:	10bfffc4 	addi	r2,r2,-1
8111dd8c:	14c0cd36 	bltu	r2,r19,8111e0c4 <__umoddi3+0x4e8>
8111dd90:	00800404 	movi	r2,16
8111dd94:	9886d83a 	srl	r3,r19,r2
8111dd98:	012044b4 	movhi	r4,33042
8111dd9c:	211a6804 	addi	r4,r4,27040
8111dda0:	20c7883a 	add	r3,r4,r3
8111dda4:	18c00003 	ldbu	r3,0(r3)
8111dda8:	1887883a 	add	r3,r3,r2
8111ddac:	00800804 	movi	r2,32
8111ddb0:	10e5c83a 	sub	r18,r2,r3
8111ddb4:	9000901e 	bne	r18,zero,8111dff8 <__umoddi3+0x41c>
8111ddb8:	982cd43a 	srli	r22,r19,16
8111ddbc:	8ce3c83a 	sub	r17,r17,r19
8111ddc0:	9d7fffcc 	andi	r21,r19,65535
8111ddc4:	b00b883a 	mov	r5,r22
8111ddc8:	8809883a 	mov	r4,r17
8111ddcc:	111e2700 	call	8111e270 <__umodsi3>
8111ddd0:	8809883a 	mov	r4,r17
8111ddd4:	b00b883a 	mov	r5,r22
8111ddd8:	1021883a 	mov	r16,r2
8111dddc:	111e20c0 	call	8111e20c <__udivsi3>
8111dde0:	8006943a 	slli	r3,r16,16
8111dde4:	a008d43a 	srli	r4,r20,16
8111dde8:	1545383a 	mul	r2,r2,r21
8111ddec:	20c8b03a 	or	r4,r4,r3
8111ddf0:	2080042e 	bgeu	r4,r2,8111de04 <__umoddi3+0x228>
8111ddf4:	24c9883a 	add	r4,r4,r19
8111ddf8:	24c00236 	bltu	r4,r19,8111de04 <__umoddi3+0x228>
8111ddfc:	2080012e 	bgeu	r4,r2,8111de04 <__umoddi3+0x228>
8111de00:	24c9883a 	add	r4,r4,r19
8111de04:	20a1c83a 	sub	r16,r4,r2
8111de08:	b00b883a 	mov	r5,r22
8111de0c:	8009883a 	mov	r4,r16
8111de10:	111e2700 	call	8111e270 <__umodsi3>
8111de14:	1023883a 	mov	r17,r2
8111de18:	b00b883a 	mov	r5,r22
8111de1c:	8009883a 	mov	r4,r16
8111de20:	111e20c0 	call	8111e20c <__udivsi3>
8111de24:	8822943a 	slli	r17,r17,16
8111de28:	1545383a 	mul	r2,r2,r21
8111de2c:	a53fffcc 	andi	r20,r20,65535
8111de30:	a446b03a 	or	r3,r20,r17
8111de34:	18bfb02e 	bgeu	r3,r2,8111dcf8 <__reset+0xfb0fdcf8>
8111de38:	003fab06 	br	8111dce8 <__reset+0xfb0fdce8>
8111de3c:	2005883a 	mov	r2,r4
8111de40:	2807883a 	mov	r3,r5
8111de44:	dfc00b17 	ldw	ra,44(sp)
8111de48:	df000a17 	ldw	fp,40(sp)
8111de4c:	ddc00917 	ldw	r23,36(sp)
8111de50:	dd800817 	ldw	r22,32(sp)
8111de54:	dd400717 	ldw	r21,28(sp)
8111de58:	dd000617 	ldw	r20,24(sp)
8111de5c:	dcc00517 	ldw	r19,20(sp)
8111de60:	dc800417 	ldw	r18,16(sp)
8111de64:	dc400317 	ldw	r17,12(sp)
8111de68:	dc000217 	ldw	r16,8(sp)
8111de6c:	dec00c04 	addi	sp,sp,48
8111de70:	f800283a 	ret
8111de74:	04c03fc4 	movi	r19,255
8111de78:	99c9803a 	cmpltu	r4,r19,r7
8111de7c:	200890fa 	slli	r4,r4,3
8111de80:	003fa806 	br	8111dd24 <__reset+0xfb0fdd24>
8111de84:	00803fc4 	movi	r2,255
8111de88:	14c5803a 	cmpltu	r2,r2,r19
8111de8c:	100490fa 	slli	r2,r2,3
8111de90:	003fc006 	br	8111dd94 <__reset+0xfb0fdd94>
8111de94:	00804034 	movhi	r2,256
8111de98:	10bfffc4 	addi	r2,r2,-1
8111de9c:	11808b36 	bltu	r2,r6,8111e0cc <__umoddi3+0x4f0>
8111dea0:	01000404 	movi	r4,16
8111dea4:	003f6406 	br	8111dc38 <__reset+0xfb0fdc38>
8111dea8:	34c4d83a 	srl	r2,r6,r19
8111deac:	3d0e983a 	sll	r7,r7,r20
8111deb0:	8cf8d83a 	srl	fp,r17,r19
8111deb4:	8d10983a 	sll	r8,r17,r20
8111deb8:	38aab03a 	or	r21,r7,r2
8111debc:	a82cd43a 	srli	r22,r21,16
8111dec0:	84e2d83a 	srl	r17,r16,r19
8111dec4:	e009883a 	mov	r4,fp
8111dec8:	b00b883a 	mov	r5,r22
8111decc:	8a22b03a 	or	r17,r17,r8
8111ded0:	3524983a 	sll	r18,r6,r20
8111ded4:	111e2700 	call	8111e270 <__umodsi3>
8111ded8:	e009883a 	mov	r4,fp
8111dedc:	b00b883a 	mov	r5,r22
8111dee0:	102f883a 	mov	r23,r2
8111dee4:	111e20c0 	call	8111e20c <__udivsi3>
8111dee8:	100d883a 	mov	r6,r2
8111deec:	b808943a 	slli	r4,r23,16
8111def0:	aa3fffcc 	andi	r8,r21,65535
8111def4:	8804d43a 	srli	r2,r17,16
8111def8:	41af383a 	mul	r23,r8,r6
8111defc:	8520983a 	sll	r16,r16,r20
8111df00:	1104b03a 	or	r2,r2,r4
8111df04:	15c0042e 	bgeu	r2,r23,8111df18 <__umoddi3+0x33c>
8111df08:	1545883a 	add	r2,r2,r21
8111df0c:	30ffffc4 	addi	r3,r6,-1
8111df10:	1540742e 	bgeu	r2,r21,8111e0e4 <__umoddi3+0x508>
8111df14:	180d883a 	mov	r6,r3
8111df18:	15efc83a 	sub	r23,r2,r23
8111df1c:	b00b883a 	mov	r5,r22
8111df20:	b809883a 	mov	r4,r23
8111df24:	d9800115 	stw	r6,4(sp)
8111df28:	da000015 	stw	r8,0(sp)
8111df2c:	111e2700 	call	8111e270 <__umodsi3>
8111df30:	b00b883a 	mov	r5,r22
8111df34:	b809883a 	mov	r4,r23
8111df38:	1039883a 	mov	fp,r2
8111df3c:	111e20c0 	call	8111e20c <__udivsi3>
8111df40:	da000017 	ldw	r8,0(sp)
8111df44:	e038943a 	slli	fp,fp,16
8111df48:	100b883a 	mov	r5,r2
8111df4c:	4089383a 	mul	r4,r8,r2
8111df50:	8a3fffcc 	andi	r8,r17,65535
8111df54:	4710b03a 	or	r8,r8,fp
8111df58:	d9800117 	ldw	r6,4(sp)
8111df5c:	4100042e 	bgeu	r8,r4,8111df70 <__umoddi3+0x394>
8111df60:	4551883a 	add	r8,r8,r21
8111df64:	10bfffc4 	addi	r2,r2,-1
8111df68:	45405a2e 	bgeu	r8,r21,8111e0d4 <__umoddi3+0x4f8>
8111df6c:	100b883a 	mov	r5,r2
8111df70:	300c943a 	slli	r6,r6,16
8111df74:	91ffffcc 	andi	r7,r18,65535
8111df78:	9004d43a 	srli	r2,r18,16
8111df7c:	314cb03a 	or	r6,r6,r5
8111df80:	317fffcc 	andi	r5,r6,65535
8111df84:	300cd43a 	srli	r6,r6,16
8111df88:	29d3383a 	mul	r9,r5,r7
8111df8c:	288b383a 	mul	r5,r5,r2
8111df90:	31cf383a 	mul	r7,r6,r7
8111df94:	4806d43a 	srli	r3,r9,16
8111df98:	4111c83a 	sub	r8,r8,r4
8111df9c:	29cb883a 	add	r5,r5,r7
8111dfa0:	194b883a 	add	r5,r3,r5
8111dfa4:	3085383a 	mul	r2,r6,r2
8111dfa8:	29c0022e 	bgeu	r5,r7,8111dfb4 <__umoddi3+0x3d8>
8111dfac:	00c00074 	movhi	r3,1
8111dfb0:	10c5883a 	add	r2,r2,r3
8111dfb4:	2808d43a 	srli	r4,r5,16
8111dfb8:	280a943a 	slli	r5,r5,16
8111dfbc:	4a7fffcc 	andi	r9,r9,65535
8111dfc0:	2085883a 	add	r2,r4,r2
8111dfc4:	2a4b883a 	add	r5,r5,r9
8111dfc8:	40803636 	bltu	r8,r2,8111e0a4 <__umoddi3+0x4c8>
8111dfcc:	40804d26 	beq	r8,r2,8111e104 <__umoddi3+0x528>
8111dfd0:	4089c83a 	sub	r4,r8,r2
8111dfd4:	280f883a 	mov	r7,r5
8111dfd8:	81cfc83a 	sub	r7,r16,r7
8111dfdc:	81c7803a 	cmpltu	r3,r16,r7
8111dfe0:	20c7c83a 	sub	r3,r4,r3
8111dfe4:	1cc4983a 	sll	r2,r3,r19
8111dfe8:	3d0ed83a 	srl	r7,r7,r20
8111dfec:	1d06d83a 	srl	r3,r3,r20
8111dff0:	11c4b03a 	or	r2,r2,r7
8111dff4:	003f9306 	br	8111de44 <__reset+0xfb0fde44>
8111dff8:	9ca6983a 	sll	r19,r19,r18
8111dffc:	88e8d83a 	srl	r20,r17,r3
8111e000:	80c4d83a 	srl	r2,r16,r3
8111e004:	982cd43a 	srli	r22,r19,16
8111e008:	8ca2983a 	sll	r17,r17,r18
8111e00c:	a009883a 	mov	r4,r20
8111e010:	b00b883a 	mov	r5,r22
8111e014:	1478b03a 	or	fp,r2,r17
8111e018:	111e2700 	call	8111e270 <__umodsi3>
8111e01c:	a009883a 	mov	r4,r20
8111e020:	b00b883a 	mov	r5,r22
8111e024:	1023883a 	mov	r17,r2
8111e028:	111e20c0 	call	8111e20c <__udivsi3>
8111e02c:	9d7fffcc 	andi	r21,r19,65535
8111e030:	880a943a 	slli	r5,r17,16
8111e034:	e008d43a 	srli	r4,fp,16
8111e038:	a885383a 	mul	r2,r21,r2
8111e03c:	84a8983a 	sll	r20,r16,r18
8111e040:	2148b03a 	or	r4,r4,r5
8111e044:	2080042e 	bgeu	r4,r2,8111e058 <__umoddi3+0x47c>
8111e048:	24c9883a 	add	r4,r4,r19
8111e04c:	24c00236 	bltu	r4,r19,8111e058 <__umoddi3+0x47c>
8111e050:	2080012e 	bgeu	r4,r2,8111e058 <__umoddi3+0x47c>
8111e054:	24c9883a 	add	r4,r4,r19
8111e058:	20a3c83a 	sub	r17,r4,r2
8111e05c:	b00b883a 	mov	r5,r22
8111e060:	8809883a 	mov	r4,r17
8111e064:	111e2700 	call	8111e270 <__umodsi3>
8111e068:	102f883a 	mov	r23,r2
8111e06c:	8809883a 	mov	r4,r17
8111e070:	b00b883a 	mov	r5,r22
8111e074:	111e20c0 	call	8111e20c <__udivsi3>
8111e078:	b82e943a 	slli	r23,r23,16
8111e07c:	a885383a 	mul	r2,r21,r2
8111e080:	e13fffcc 	andi	r4,fp,65535
8111e084:	25c8b03a 	or	r4,r4,r23
8111e088:	2080042e 	bgeu	r4,r2,8111e09c <__umoddi3+0x4c0>
8111e08c:	24c9883a 	add	r4,r4,r19
8111e090:	24c00236 	bltu	r4,r19,8111e09c <__umoddi3+0x4c0>
8111e094:	2080012e 	bgeu	r4,r2,8111e09c <__umoddi3+0x4c0>
8111e098:	24c9883a 	add	r4,r4,r19
8111e09c:	20a3c83a 	sub	r17,r4,r2
8111e0a0:	003f4806 	br	8111ddc4 <__reset+0xfb0fddc4>
8111e0a4:	2c8fc83a 	sub	r7,r5,r18
8111e0a8:	1545c83a 	sub	r2,r2,r21
8111e0ac:	29cb803a 	cmpltu	r5,r5,r7
8111e0b0:	1145c83a 	sub	r2,r2,r5
8111e0b4:	4089c83a 	sub	r4,r8,r2
8111e0b8:	003fc706 	br	8111dfd8 <__reset+0xfb0fdfd8>
8111e0bc:	01000604 	movi	r4,24
8111e0c0:	003f1806 	br	8111dd24 <__reset+0xfb0fdd24>
8111e0c4:	00800604 	movi	r2,24
8111e0c8:	003f3206 	br	8111dd94 <__reset+0xfb0fdd94>
8111e0cc:	01000604 	movi	r4,24
8111e0d0:	003ed906 	br	8111dc38 <__reset+0xfb0fdc38>
8111e0d4:	413fa52e 	bgeu	r8,r4,8111df6c <__reset+0xfb0fdf6c>
8111e0d8:	297fff84 	addi	r5,r5,-2
8111e0dc:	4551883a 	add	r8,r8,r21
8111e0e0:	003fa306 	br	8111df70 <__reset+0xfb0fdf70>
8111e0e4:	15ff8b2e 	bgeu	r2,r23,8111df14 <__reset+0xfb0fdf14>
8111e0e8:	31bfff84 	addi	r6,r6,-2
8111e0ec:	1545883a 	add	r2,r2,r21
8111e0f0:	003f8906 	br	8111df18 <__reset+0xfb0fdf18>
8111e0f4:	24c9883a 	add	r4,r4,r19
8111e0f8:	003eee06 	br	8111dcb4 <__reset+0xfb0fdcb4>
8111e0fc:	8005883a 	mov	r2,r16
8111e100:	003f1706 	br	8111dd60 <__reset+0xfb0fdd60>
8111e104:	817fe736 	bltu	r16,r5,8111e0a4 <__reset+0xfb0fe0a4>
8111e108:	280f883a 	mov	r7,r5
8111e10c:	0009883a 	mov	r4,zero
8111e110:	003fb106 	br	8111dfd8 <__reset+0xfb0fdfd8>

8111e114 <__divsi3>:
8111e114:	20001b16 	blt	r4,zero,8111e184 <__divsi3+0x70>
8111e118:	000f883a 	mov	r7,zero
8111e11c:	28001616 	blt	r5,zero,8111e178 <__divsi3+0x64>
8111e120:	200d883a 	mov	r6,r4
8111e124:	29001a2e 	bgeu	r5,r4,8111e190 <__divsi3+0x7c>
8111e128:	00800804 	movi	r2,32
8111e12c:	00c00044 	movi	r3,1
8111e130:	00000106 	br	8111e138 <__divsi3+0x24>
8111e134:	10000d26 	beq	r2,zero,8111e16c <__divsi3+0x58>
8111e138:	294b883a 	add	r5,r5,r5
8111e13c:	10bfffc4 	addi	r2,r2,-1
8111e140:	18c7883a 	add	r3,r3,r3
8111e144:	293ffb36 	bltu	r5,r4,8111e134 <__reset+0xfb0fe134>
8111e148:	0005883a 	mov	r2,zero
8111e14c:	18000726 	beq	r3,zero,8111e16c <__divsi3+0x58>
8111e150:	0005883a 	mov	r2,zero
8111e154:	31400236 	bltu	r6,r5,8111e160 <__divsi3+0x4c>
8111e158:	314dc83a 	sub	r6,r6,r5
8111e15c:	10c4b03a 	or	r2,r2,r3
8111e160:	1806d07a 	srli	r3,r3,1
8111e164:	280ad07a 	srli	r5,r5,1
8111e168:	183ffa1e 	bne	r3,zero,8111e154 <__reset+0xfb0fe154>
8111e16c:	38000126 	beq	r7,zero,8111e174 <__divsi3+0x60>
8111e170:	0085c83a 	sub	r2,zero,r2
8111e174:	f800283a 	ret
8111e178:	014bc83a 	sub	r5,zero,r5
8111e17c:	39c0005c 	xori	r7,r7,1
8111e180:	003fe706 	br	8111e120 <__reset+0xfb0fe120>
8111e184:	0109c83a 	sub	r4,zero,r4
8111e188:	01c00044 	movi	r7,1
8111e18c:	003fe306 	br	8111e11c <__reset+0xfb0fe11c>
8111e190:	00c00044 	movi	r3,1
8111e194:	003fee06 	br	8111e150 <__reset+0xfb0fe150>

8111e198 <__modsi3>:
8111e198:	20001716 	blt	r4,zero,8111e1f8 <__modsi3+0x60>
8111e19c:	000f883a 	mov	r7,zero
8111e1a0:	2005883a 	mov	r2,r4
8111e1a4:	28001216 	blt	r5,zero,8111e1f0 <__modsi3+0x58>
8111e1a8:	2900162e 	bgeu	r5,r4,8111e204 <__modsi3+0x6c>
8111e1ac:	01800804 	movi	r6,32
8111e1b0:	00c00044 	movi	r3,1
8111e1b4:	00000106 	br	8111e1bc <__modsi3+0x24>
8111e1b8:	30000a26 	beq	r6,zero,8111e1e4 <__modsi3+0x4c>
8111e1bc:	294b883a 	add	r5,r5,r5
8111e1c0:	31bfffc4 	addi	r6,r6,-1
8111e1c4:	18c7883a 	add	r3,r3,r3
8111e1c8:	293ffb36 	bltu	r5,r4,8111e1b8 <__reset+0xfb0fe1b8>
8111e1cc:	18000526 	beq	r3,zero,8111e1e4 <__modsi3+0x4c>
8111e1d0:	1806d07a 	srli	r3,r3,1
8111e1d4:	11400136 	bltu	r2,r5,8111e1dc <__modsi3+0x44>
8111e1d8:	1145c83a 	sub	r2,r2,r5
8111e1dc:	280ad07a 	srli	r5,r5,1
8111e1e0:	183ffb1e 	bne	r3,zero,8111e1d0 <__reset+0xfb0fe1d0>
8111e1e4:	38000126 	beq	r7,zero,8111e1ec <__modsi3+0x54>
8111e1e8:	0085c83a 	sub	r2,zero,r2
8111e1ec:	f800283a 	ret
8111e1f0:	014bc83a 	sub	r5,zero,r5
8111e1f4:	003fec06 	br	8111e1a8 <__reset+0xfb0fe1a8>
8111e1f8:	0109c83a 	sub	r4,zero,r4
8111e1fc:	01c00044 	movi	r7,1
8111e200:	003fe706 	br	8111e1a0 <__reset+0xfb0fe1a0>
8111e204:	00c00044 	movi	r3,1
8111e208:	003ff106 	br	8111e1d0 <__reset+0xfb0fe1d0>

8111e20c <__udivsi3>:
8111e20c:	200d883a 	mov	r6,r4
8111e210:	2900152e 	bgeu	r5,r4,8111e268 <__udivsi3+0x5c>
8111e214:	28001416 	blt	r5,zero,8111e268 <__udivsi3+0x5c>
8111e218:	00800804 	movi	r2,32
8111e21c:	00c00044 	movi	r3,1
8111e220:	00000206 	br	8111e22c <__udivsi3+0x20>
8111e224:	10000e26 	beq	r2,zero,8111e260 <__udivsi3+0x54>
8111e228:	28000516 	blt	r5,zero,8111e240 <__udivsi3+0x34>
8111e22c:	294b883a 	add	r5,r5,r5
8111e230:	10bfffc4 	addi	r2,r2,-1
8111e234:	18c7883a 	add	r3,r3,r3
8111e238:	293ffa36 	bltu	r5,r4,8111e224 <__reset+0xfb0fe224>
8111e23c:	18000826 	beq	r3,zero,8111e260 <__udivsi3+0x54>
8111e240:	0005883a 	mov	r2,zero
8111e244:	31400236 	bltu	r6,r5,8111e250 <__udivsi3+0x44>
8111e248:	314dc83a 	sub	r6,r6,r5
8111e24c:	10c4b03a 	or	r2,r2,r3
8111e250:	1806d07a 	srli	r3,r3,1
8111e254:	280ad07a 	srli	r5,r5,1
8111e258:	183ffa1e 	bne	r3,zero,8111e244 <__reset+0xfb0fe244>
8111e25c:	f800283a 	ret
8111e260:	0005883a 	mov	r2,zero
8111e264:	f800283a 	ret
8111e268:	00c00044 	movi	r3,1
8111e26c:	003ff406 	br	8111e240 <__reset+0xfb0fe240>

8111e270 <__umodsi3>:
8111e270:	2005883a 	mov	r2,r4
8111e274:	2900122e 	bgeu	r5,r4,8111e2c0 <__umodsi3+0x50>
8111e278:	28001116 	blt	r5,zero,8111e2c0 <__umodsi3+0x50>
8111e27c:	01800804 	movi	r6,32
8111e280:	00c00044 	movi	r3,1
8111e284:	00000206 	br	8111e290 <__umodsi3+0x20>
8111e288:	30000c26 	beq	r6,zero,8111e2bc <__umodsi3+0x4c>
8111e28c:	28000516 	blt	r5,zero,8111e2a4 <__umodsi3+0x34>
8111e290:	294b883a 	add	r5,r5,r5
8111e294:	31bfffc4 	addi	r6,r6,-1
8111e298:	18c7883a 	add	r3,r3,r3
8111e29c:	293ffa36 	bltu	r5,r4,8111e288 <__reset+0xfb0fe288>
8111e2a0:	18000626 	beq	r3,zero,8111e2bc <__umodsi3+0x4c>
8111e2a4:	1806d07a 	srli	r3,r3,1
8111e2a8:	11400136 	bltu	r2,r5,8111e2b0 <__umodsi3+0x40>
8111e2ac:	1145c83a 	sub	r2,r2,r5
8111e2b0:	280ad07a 	srli	r5,r5,1
8111e2b4:	183ffb1e 	bne	r3,zero,8111e2a4 <__reset+0xfb0fe2a4>
8111e2b8:	f800283a 	ret
8111e2bc:	f800283a 	ret
8111e2c0:	00c00044 	movi	r3,1
8111e2c4:	003ff706 	br	8111e2a4 <__reset+0xfb0fe2a4>

8111e2c8 <__adddf3>:
8111e2c8:	02c00434 	movhi	r11,16
8111e2cc:	5affffc4 	addi	r11,r11,-1
8111e2d0:	2806d7fa 	srli	r3,r5,31
8111e2d4:	2ad4703a 	and	r10,r5,r11
8111e2d8:	3ad2703a 	and	r9,r7,r11
8111e2dc:	3804d53a 	srli	r2,r7,20
8111e2e0:	3018d77a 	srli	r12,r6,29
8111e2e4:	280ad53a 	srli	r5,r5,20
8111e2e8:	501490fa 	slli	r10,r10,3
8111e2ec:	2010d77a 	srli	r8,r4,29
8111e2f0:	481290fa 	slli	r9,r9,3
8111e2f4:	380ed7fa 	srli	r7,r7,31
8111e2f8:	defffb04 	addi	sp,sp,-20
8111e2fc:	dc800215 	stw	r18,8(sp)
8111e300:	dc400115 	stw	r17,4(sp)
8111e304:	dc000015 	stw	r16,0(sp)
8111e308:	dfc00415 	stw	ra,16(sp)
8111e30c:	dcc00315 	stw	r19,12(sp)
8111e310:	1c803fcc 	andi	r18,r3,255
8111e314:	2c01ffcc 	andi	r16,r5,2047
8111e318:	5210b03a 	or	r8,r10,r8
8111e31c:	202290fa 	slli	r17,r4,3
8111e320:	1081ffcc 	andi	r2,r2,2047
8111e324:	4b12b03a 	or	r9,r9,r12
8111e328:	300c90fa 	slli	r6,r6,3
8111e32c:	91c07526 	beq	r18,r7,8111e504 <__adddf3+0x23c>
8111e330:	8087c83a 	sub	r3,r16,r2
8111e334:	00c0ab0e 	bge	zero,r3,8111e5e4 <__adddf3+0x31c>
8111e338:	10002a1e 	bne	r2,zero,8111e3e4 <__adddf3+0x11c>
8111e33c:	4984b03a 	or	r2,r9,r6
8111e340:	1000961e 	bne	r2,zero,8111e59c <__adddf3+0x2d4>
8111e344:	888001cc 	andi	r2,r17,7
8111e348:	10000726 	beq	r2,zero,8111e368 <__adddf3+0xa0>
8111e34c:	888003cc 	andi	r2,r17,15
8111e350:	00c00104 	movi	r3,4
8111e354:	10c00426 	beq	r2,r3,8111e368 <__adddf3+0xa0>
8111e358:	88c7883a 	add	r3,r17,r3
8111e35c:	1c63803a 	cmpltu	r17,r3,r17
8111e360:	4451883a 	add	r8,r8,r17
8111e364:	1823883a 	mov	r17,r3
8111e368:	4080202c 	andhi	r2,r8,128
8111e36c:	10005926 	beq	r2,zero,8111e4d4 <__adddf3+0x20c>
8111e370:	84000044 	addi	r16,r16,1
8111e374:	0081ffc4 	movi	r2,2047
8111e378:	8080ba26 	beq	r16,r2,8111e664 <__adddf3+0x39c>
8111e37c:	00bfe034 	movhi	r2,65408
8111e380:	10bfffc4 	addi	r2,r2,-1
8111e384:	4090703a 	and	r8,r8,r2
8111e388:	4004977a 	slli	r2,r8,29
8111e38c:	4010927a 	slli	r8,r8,9
8111e390:	8822d0fa 	srli	r17,r17,3
8111e394:	8401ffcc 	andi	r16,r16,2047
8111e398:	4010d33a 	srli	r8,r8,12
8111e39c:	9007883a 	mov	r3,r18
8111e3a0:	1444b03a 	or	r2,r2,r17
8111e3a4:	8401ffcc 	andi	r16,r16,2047
8111e3a8:	8020953a 	slli	r16,r16,20
8111e3ac:	18c03fcc 	andi	r3,r3,255
8111e3b0:	01000434 	movhi	r4,16
8111e3b4:	213fffc4 	addi	r4,r4,-1
8111e3b8:	180697fa 	slli	r3,r3,31
8111e3bc:	4110703a 	and	r8,r8,r4
8111e3c0:	4410b03a 	or	r8,r8,r16
8111e3c4:	40c6b03a 	or	r3,r8,r3
8111e3c8:	dfc00417 	ldw	ra,16(sp)
8111e3cc:	dcc00317 	ldw	r19,12(sp)
8111e3d0:	dc800217 	ldw	r18,8(sp)
8111e3d4:	dc400117 	ldw	r17,4(sp)
8111e3d8:	dc000017 	ldw	r16,0(sp)
8111e3dc:	dec00504 	addi	sp,sp,20
8111e3e0:	f800283a 	ret
8111e3e4:	0081ffc4 	movi	r2,2047
8111e3e8:	80bfd626 	beq	r16,r2,8111e344 <__reset+0xfb0fe344>
8111e3ec:	4a402034 	orhi	r9,r9,128
8111e3f0:	00800e04 	movi	r2,56
8111e3f4:	10c09f16 	blt	r2,r3,8111e674 <__adddf3+0x3ac>
8111e3f8:	008007c4 	movi	r2,31
8111e3fc:	10c0c216 	blt	r2,r3,8111e708 <__adddf3+0x440>
8111e400:	00800804 	movi	r2,32
8111e404:	10c5c83a 	sub	r2,r2,r3
8111e408:	488a983a 	sll	r5,r9,r2
8111e40c:	30c8d83a 	srl	r4,r6,r3
8111e410:	3084983a 	sll	r2,r6,r2
8111e414:	48c6d83a 	srl	r3,r9,r3
8111e418:	290cb03a 	or	r6,r5,r4
8111e41c:	1004c03a 	cmpne	r2,r2,zero
8111e420:	308cb03a 	or	r6,r6,r2
8111e424:	898dc83a 	sub	r6,r17,r6
8111e428:	89a3803a 	cmpltu	r17,r17,r6
8111e42c:	40d1c83a 	sub	r8,r8,r3
8111e430:	4451c83a 	sub	r8,r8,r17
8111e434:	3023883a 	mov	r17,r6
8111e438:	4080202c 	andhi	r2,r8,128
8111e43c:	10002326 	beq	r2,zero,8111e4cc <__adddf3+0x204>
8111e440:	04c02034 	movhi	r19,128
8111e444:	9cffffc4 	addi	r19,r19,-1
8111e448:	44e6703a 	and	r19,r8,r19
8111e44c:	98007626 	beq	r19,zero,8111e628 <__adddf3+0x360>
8111e450:	9809883a 	mov	r4,r19
8111e454:	110fef00 	call	8110fef0 <__clzsi2>
8111e458:	10fffe04 	addi	r3,r2,-8
8111e45c:	010007c4 	movi	r4,31
8111e460:	20c07716 	blt	r4,r3,8111e640 <__adddf3+0x378>
8111e464:	00800804 	movi	r2,32
8111e468:	10c5c83a 	sub	r2,r2,r3
8111e46c:	8884d83a 	srl	r2,r17,r2
8111e470:	98d0983a 	sll	r8,r19,r3
8111e474:	88e2983a 	sll	r17,r17,r3
8111e478:	1204b03a 	or	r2,r2,r8
8111e47c:	1c007416 	blt	r3,r16,8111e650 <__adddf3+0x388>
8111e480:	1c21c83a 	sub	r16,r3,r16
8111e484:	82000044 	addi	r8,r16,1
8111e488:	00c007c4 	movi	r3,31
8111e48c:	1a009116 	blt	r3,r8,8111e6d4 <__adddf3+0x40c>
8111e490:	00c00804 	movi	r3,32
8111e494:	1a07c83a 	sub	r3,r3,r8
8111e498:	8a08d83a 	srl	r4,r17,r8
8111e49c:	88e2983a 	sll	r17,r17,r3
8111e4a0:	10c6983a 	sll	r3,r2,r3
8111e4a4:	1210d83a 	srl	r8,r2,r8
8111e4a8:	8804c03a 	cmpne	r2,r17,zero
8111e4ac:	1906b03a 	or	r3,r3,r4
8111e4b0:	18a2b03a 	or	r17,r3,r2
8111e4b4:	0021883a 	mov	r16,zero
8111e4b8:	003fa206 	br	8111e344 <__reset+0xfb0fe344>
8111e4bc:	1890b03a 	or	r8,r3,r2
8111e4c0:	40017d26 	beq	r8,zero,8111eab8 <__adddf3+0x7f0>
8111e4c4:	1011883a 	mov	r8,r2
8111e4c8:	1823883a 	mov	r17,r3
8111e4cc:	888001cc 	andi	r2,r17,7
8111e4d0:	103f9e1e 	bne	r2,zero,8111e34c <__reset+0xfb0fe34c>
8111e4d4:	4004977a 	slli	r2,r8,29
8111e4d8:	8822d0fa 	srli	r17,r17,3
8111e4dc:	4010d0fa 	srli	r8,r8,3
8111e4e0:	9007883a 	mov	r3,r18
8111e4e4:	1444b03a 	or	r2,r2,r17
8111e4e8:	0101ffc4 	movi	r4,2047
8111e4ec:	81002426 	beq	r16,r4,8111e580 <__adddf3+0x2b8>
8111e4f0:	8120703a 	and	r16,r16,r4
8111e4f4:	01000434 	movhi	r4,16
8111e4f8:	213fffc4 	addi	r4,r4,-1
8111e4fc:	4110703a 	and	r8,r8,r4
8111e500:	003fa806 	br	8111e3a4 <__reset+0xfb0fe3a4>
8111e504:	8089c83a 	sub	r4,r16,r2
8111e508:	01005e0e 	bge	zero,r4,8111e684 <__adddf3+0x3bc>
8111e50c:	10002b26 	beq	r2,zero,8111e5bc <__adddf3+0x2f4>
8111e510:	0081ffc4 	movi	r2,2047
8111e514:	80bf8b26 	beq	r16,r2,8111e344 <__reset+0xfb0fe344>
8111e518:	4a402034 	orhi	r9,r9,128
8111e51c:	00800e04 	movi	r2,56
8111e520:	1100a40e 	bge	r2,r4,8111e7b4 <__adddf3+0x4ec>
8111e524:	498cb03a 	or	r6,r9,r6
8111e528:	300ac03a 	cmpne	r5,r6,zero
8111e52c:	0013883a 	mov	r9,zero
8111e530:	2c4b883a 	add	r5,r5,r17
8111e534:	2c63803a 	cmpltu	r17,r5,r17
8111e538:	4a11883a 	add	r8,r9,r8
8111e53c:	8a11883a 	add	r8,r17,r8
8111e540:	2823883a 	mov	r17,r5
8111e544:	4080202c 	andhi	r2,r8,128
8111e548:	103fe026 	beq	r2,zero,8111e4cc <__reset+0xfb0fe4cc>
8111e54c:	84000044 	addi	r16,r16,1
8111e550:	0081ffc4 	movi	r2,2047
8111e554:	8080d226 	beq	r16,r2,8111e8a0 <__adddf3+0x5d8>
8111e558:	00bfe034 	movhi	r2,65408
8111e55c:	10bfffc4 	addi	r2,r2,-1
8111e560:	4090703a 	and	r8,r8,r2
8111e564:	880ad07a 	srli	r5,r17,1
8111e568:	400897fa 	slli	r4,r8,31
8111e56c:	88c0004c 	andi	r3,r17,1
8111e570:	28e2b03a 	or	r17,r5,r3
8111e574:	4010d07a 	srli	r8,r8,1
8111e578:	2462b03a 	or	r17,r4,r17
8111e57c:	003f7106 	br	8111e344 <__reset+0xfb0fe344>
8111e580:	4088b03a 	or	r4,r8,r2
8111e584:	20014526 	beq	r4,zero,8111ea9c <__adddf3+0x7d4>
8111e588:	01000434 	movhi	r4,16
8111e58c:	42000234 	orhi	r8,r8,8
8111e590:	213fffc4 	addi	r4,r4,-1
8111e594:	4110703a 	and	r8,r8,r4
8111e598:	003f8206 	br	8111e3a4 <__reset+0xfb0fe3a4>
8111e59c:	18ffffc4 	addi	r3,r3,-1
8111e5a0:	1800491e 	bne	r3,zero,8111e6c8 <__adddf3+0x400>
8111e5a4:	898bc83a 	sub	r5,r17,r6
8111e5a8:	8963803a 	cmpltu	r17,r17,r5
8111e5ac:	4251c83a 	sub	r8,r8,r9
8111e5b0:	4451c83a 	sub	r8,r8,r17
8111e5b4:	2823883a 	mov	r17,r5
8111e5b8:	003f9f06 	br	8111e438 <__reset+0xfb0fe438>
8111e5bc:	4984b03a 	or	r2,r9,r6
8111e5c0:	103f6026 	beq	r2,zero,8111e344 <__reset+0xfb0fe344>
8111e5c4:	213fffc4 	addi	r4,r4,-1
8111e5c8:	2000931e 	bne	r4,zero,8111e818 <__adddf3+0x550>
8111e5cc:	898d883a 	add	r6,r17,r6
8111e5d0:	3463803a 	cmpltu	r17,r6,r17
8111e5d4:	4251883a 	add	r8,r8,r9
8111e5d8:	8a11883a 	add	r8,r17,r8
8111e5dc:	3023883a 	mov	r17,r6
8111e5e0:	003fd806 	br	8111e544 <__reset+0xfb0fe544>
8111e5e4:	1800541e 	bne	r3,zero,8111e738 <__adddf3+0x470>
8111e5e8:	80800044 	addi	r2,r16,1
8111e5ec:	1081ffcc 	andi	r2,r2,2047
8111e5f0:	00c00044 	movi	r3,1
8111e5f4:	1880a00e 	bge	r3,r2,8111e878 <__adddf3+0x5b0>
8111e5f8:	8989c83a 	sub	r4,r17,r6
8111e5fc:	8905803a 	cmpltu	r2,r17,r4
8111e600:	4267c83a 	sub	r19,r8,r9
8111e604:	98a7c83a 	sub	r19,r19,r2
8111e608:	9880202c 	andhi	r2,r19,128
8111e60c:	10006326 	beq	r2,zero,8111e79c <__adddf3+0x4d4>
8111e610:	3463c83a 	sub	r17,r6,r17
8111e614:	4a07c83a 	sub	r3,r9,r8
8111e618:	344d803a 	cmpltu	r6,r6,r17
8111e61c:	19a7c83a 	sub	r19,r3,r6
8111e620:	3825883a 	mov	r18,r7
8111e624:	983f8a1e 	bne	r19,zero,8111e450 <__reset+0xfb0fe450>
8111e628:	8809883a 	mov	r4,r17
8111e62c:	110fef00 	call	8110fef0 <__clzsi2>
8111e630:	10800804 	addi	r2,r2,32
8111e634:	10fffe04 	addi	r3,r2,-8
8111e638:	010007c4 	movi	r4,31
8111e63c:	20ff890e 	bge	r4,r3,8111e464 <__reset+0xfb0fe464>
8111e640:	10bff604 	addi	r2,r2,-40
8111e644:	8884983a 	sll	r2,r17,r2
8111e648:	0023883a 	mov	r17,zero
8111e64c:	1c3f8c0e 	bge	r3,r16,8111e480 <__reset+0xfb0fe480>
8111e650:	023fe034 	movhi	r8,65408
8111e654:	423fffc4 	addi	r8,r8,-1
8111e658:	80e1c83a 	sub	r16,r16,r3
8111e65c:	1210703a 	and	r8,r2,r8
8111e660:	003f3806 	br	8111e344 <__reset+0xfb0fe344>
8111e664:	9007883a 	mov	r3,r18
8111e668:	0011883a 	mov	r8,zero
8111e66c:	0005883a 	mov	r2,zero
8111e670:	003f4c06 	br	8111e3a4 <__reset+0xfb0fe3a4>
8111e674:	498cb03a 	or	r6,r9,r6
8111e678:	300cc03a 	cmpne	r6,r6,zero
8111e67c:	0007883a 	mov	r3,zero
8111e680:	003f6806 	br	8111e424 <__reset+0xfb0fe424>
8111e684:	20009c1e 	bne	r4,zero,8111e8f8 <__adddf3+0x630>
8111e688:	80800044 	addi	r2,r16,1
8111e68c:	1141ffcc 	andi	r5,r2,2047
8111e690:	01000044 	movi	r4,1
8111e694:	2140670e 	bge	r4,r5,8111e834 <__adddf3+0x56c>
8111e698:	0101ffc4 	movi	r4,2047
8111e69c:	11007f26 	beq	r2,r4,8111e89c <__adddf3+0x5d4>
8111e6a0:	898d883a 	add	r6,r17,r6
8111e6a4:	4247883a 	add	r3,r8,r9
8111e6a8:	3451803a 	cmpltu	r8,r6,r17
8111e6ac:	40d1883a 	add	r8,r8,r3
8111e6b0:	402297fa 	slli	r17,r8,31
8111e6b4:	300cd07a 	srli	r6,r6,1
8111e6b8:	4010d07a 	srli	r8,r8,1
8111e6bc:	1021883a 	mov	r16,r2
8111e6c0:	89a2b03a 	or	r17,r17,r6
8111e6c4:	003f1f06 	br	8111e344 <__reset+0xfb0fe344>
8111e6c8:	0081ffc4 	movi	r2,2047
8111e6cc:	80bf481e 	bne	r16,r2,8111e3f0 <__reset+0xfb0fe3f0>
8111e6d0:	003f1c06 	br	8111e344 <__reset+0xfb0fe344>
8111e6d4:	843ff844 	addi	r16,r16,-31
8111e6d8:	01000804 	movi	r4,32
8111e6dc:	1406d83a 	srl	r3,r2,r16
8111e6e0:	41005026 	beq	r8,r4,8111e824 <__adddf3+0x55c>
8111e6e4:	01001004 	movi	r4,64
8111e6e8:	2211c83a 	sub	r8,r4,r8
8111e6ec:	1204983a 	sll	r2,r2,r8
8111e6f0:	88a2b03a 	or	r17,r17,r2
8111e6f4:	8822c03a 	cmpne	r17,r17,zero
8111e6f8:	1c62b03a 	or	r17,r3,r17
8111e6fc:	0011883a 	mov	r8,zero
8111e700:	0021883a 	mov	r16,zero
8111e704:	003f7106 	br	8111e4cc <__reset+0xfb0fe4cc>
8111e708:	193ff804 	addi	r4,r3,-32
8111e70c:	00800804 	movi	r2,32
8111e710:	4908d83a 	srl	r4,r9,r4
8111e714:	18804526 	beq	r3,r2,8111e82c <__adddf3+0x564>
8111e718:	00801004 	movi	r2,64
8111e71c:	10c5c83a 	sub	r2,r2,r3
8111e720:	4886983a 	sll	r3,r9,r2
8111e724:	198cb03a 	or	r6,r3,r6
8111e728:	300cc03a 	cmpne	r6,r6,zero
8111e72c:	218cb03a 	or	r6,r4,r6
8111e730:	0007883a 	mov	r3,zero
8111e734:	003f3b06 	br	8111e424 <__reset+0xfb0fe424>
8111e738:	80002a26 	beq	r16,zero,8111e7e4 <__adddf3+0x51c>
8111e73c:	0101ffc4 	movi	r4,2047
8111e740:	11006826 	beq	r2,r4,8111e8e4 <__adddf3+0x61c>
8111e744:	00c7c83a 	sub	r3,zero,r3
8111e748:	42002034 	orhi	r8,r8,128
8111e74c:	01000e04 	movi	r4,56
8111e750:	20c07c16 	blt	r4,r3,8111e944 <__adddf3+0x67c>
8111e754:	010007c4 	movi	r4,31
8111e758:	20c0da16 	blt	r4,r3,8111eac4 <__adddf3+0x7fc>
8111e75c:	01000804 	movi	r4,32
8111e760:	20c9c83a 	sub	r4,r4,r3
8111e764:	4114983a 	sll	r10,r8,r4
8111e768:	88cad83a 	srl	r5,r17,r3
8111e76c:	8908983a 	sll	r4,r17,r4
8111e770:	40c6d83a 	srl	r3,r8,r3
8111e774:	5162b03a 	or	r17,r10,r5
8111e778:	2008c03a 	cmpne	r4,r4,zero
8111e77c:	8922b03a 	or	r17,r17,r4
8111e780:	3463c83a 	sub	r17,r6,r17
8111e784:	48c7c83a 	sub	r3,r9,r3
8111e788:	344d803a 	cmpltu	r6,r6,r17
8111e78c:	1991c83a 	sub	r8,r3,r6
8111e790:	1021883a 	mov	r16,r2
8111e794:	3825883a 	mov	r18,r7
8111e798:	003f2706 	br	8111e438 <__reset+0xfb0fe438>
8111e79c:	24d0b03a 	or	r8,r4,r19
8111e7a0:	40001b1e 	bne	r8,zero,8111e810 <__adddf3+0x548>
8111e7a4:	0005883a 	mov	r2,zero
8111e7a8:	0007883a 	mov	r3,zero
8111e7ac:	0021883a 	mov	r16,zero
8111e7b0:	003f4d06 	br	8111e4e8 <__reset+0xfb0fe4e8>
8111e7b4:	008007c4 	movi	r2,31
8111e7b8:	11003c16 	blt	r2,r4,8111e8ac <__adddf3+0x5e4>
8111e7bc:	00800804 	movi	r2,32
8111e7c0:	1105c83a 	sub	r2,r2,r4
8111e7c4:	488e983a 	sll	r7,r9,r2
8111e7c8:	310ad83a 	srl	r5,r6,r4
8111e7cc:	3084983a 	sll	r2,r6,r2
8111e7d0:	4912d83a 	srl	r9,r9,r4
8111e7d4:	394ab03a 	or	r5,r7,r5
8111e7d8:	1004c03a 	cmpne	r2,r2,zero
8111e7dc:	288ab03a 	or	r5,r5,r2
8111e7e0:	003f5306 	br	8111e530 <__reset+0xfb0fe530>
8111e7e4:	4448b03a 	or	r4,r8,r17
8111e7e8:	20003e26 	beq	r4,zero,8111e8e4 <__adddf3+0x61c>
8111e7ec:	00c6303a 	nor	r3,zero,r3
8111e7f0:	18003a1e 	bne	r3,zero,8111e8dc <__adddf3+0x614>
8111e7f4:	3463c83a 	sub	r17,r6,r17
8111e7f8:	4a07c83a 	sub	r3,r9,r8
8111e7fc:	344d803a 	cmpltu	r6,r6,r17
8111e800:	1991c83a 	sub	r8,r3,r6
8111e804:	1021883a 	mov	r16,r2
8111e808:	3825883a 	mov	r18,r7
8111e80c:	003f0a06 	br	8111e438 <__reset+0xfb0fe438>
8111e810:	2023883a 	mov	r17,r4
8111e814:	003f0d06 	br	8111e44c <__reset+0xfb0fe44c>
8111e818:	0081ffc4 	movi	r2,2047
8111e81c:	80bf3f1e 	bne	r16,r2,8111e51c <__reset+0xfb0fe51c>
8111e820:	003ec806 	br	8111e344 <__reset+0xfb0fe344>
8111e824:	0005883a 	mov	r2,zero
8111e828:	003fb106 	br	8111e6f0 <__reset+0xfb0fe6f0>
8111e82c:	0007883a 	mov	r3,zero
8111e830:	003fbc06 	br	8111e724 <__reset+0xfb0fe724>
8111e834:	4444b03a 	or	r2,r8,r17
8111e838:	8000871e 	bne	r16,zero,8111ea58 <__adddf3+0x790>
8111e83c:	1000ba26 	beq	r2,zero,8111eb28 <__adddf3+0x860>
8111e840:	4984b03a 	or	r2,r9,r6
8111e844:	103ebf26 	beq	r2,zero,8111e344 <__reset+0xfb0fe344>
8111e848:	8985883a 	add	r2,r17,r6
8111e84c:	4247883a 	add	r3,r8,r9
8111e850:	1451803a 	cmpltu	r8,r2,r17
8111e854:	40d1883a 	add	r8,r8,r3
8111e858:	40c0202c 	andhi	r3,r8,128
8111e85c:	1023883a 	mov	r17,r2
8111e860:	183f1a26 	beq	r3,zero,8111e4cc <__reset+0xfb0fe4cc>
8111e864:	00bfe034 	movhi	r2,65408
8111e868:	10bfffc4 	addi	r2,r2,-1
8111e86c:	2021883a 	mov	r16,r4
8111e870:	4090703a 	and	r8,r8,r2
8111e874:	003eb306 	br	8111e344 <__reset+0xfb0fe344>
8111e878:	4444b03a 	or	r2,r8,r17
8111e87c:	8000291e 	bne	r16,zero,8111e924 <__adddf3+0x65c>
8111e880:	10004b1e 	bne	r2,zero,8111e9b0 <__adddf3+0x6e8>
8111e884:	4990b03a 	or	r8,r9,r6
8111e888:	40008b26 	beq	r8,zero,8111eab8 <__adddf3+0x7f0>
8111e88c:	4811883a 	mov	r8,r9
8111e890:	3023883a 	mov	r17,r6
8111e894:	3825883a 	mov	r18,r7
8111e898:	003eaa06 	br	8111e344 <__reset+0xfb0fe344>
8111e89c:	1021883a 	mov	r16,r2
8111e8a0:	0011883a 	mov	r8,zero
8111e8a4:	0005883a 	mov	r2,zero
8111e8a8:	003f0f06 	br	8111e4e8 <__reset+0xfb0fe4e8>
8111e8ac:	217ff804 	addi	r5,r4,-32
8111e8b0:	00800804 	movi	r2,32
8111e8b4:	494ad83a 	srl	r5,r9,r5
8111e8b8:	20807d26 	beq	r4,r2,8111eab0 <__adddf3+0x7e8>
8111e8bc:	00801004 	movi	r2,64
8111e8c0:	1109c83a 	sub	r4,r2,r4
8111e8c4:	4912983a 	sll	r9,r9,r4
8111e8c8:	498cb03a 	or	r6,r9,r6
8111e8cc:	300cc03a 	cmpne	r6,r6,zero
8111e8d0:	298ab03a 	or	r5,r5,r6
8111e8d4:	0013883a 	mov	r9,zero
8111e8d8:	003f1506 	br	8111e530 <__reset+0xfb0fe530>
8111e8dc:	0101ffc4 	movi	r4,2047
8111e8e0:	113f9a1e 	bne	r2,r4,8111e74c <__reset+0xfb0fe74c>
8111e8e4:	4811883a 	mov	r8,r9
8111e8e8:	3023883a 	mov	r17,r6
8111e8ec:	1021883a 	mov	r16,r2
8111e8f0:	3825883a 	mov	r18,r7
8111e8f4:	003e9306 	br	8111e344 <__reset+0xfb0fe344>
8111e8f8:	8000161e 	bne	r16,zero,8111e954 <__adddf3+0x68c>
8111e8fc:	444ab03a 	or	r5,r8,r17
8111e900:	28005126 	beq	r5,zero,8111ea48 <__adddf3+0x780>
8111e904:	0108303a 	nor	r4,zero,r4
8111e908:	20004d1e 	bne	r4,zero,8111ea40 <__adddf3+0x778>
8111e90c:	89a3883a 	add	r17,r17,r6
8111e910:	4253883a 	add	r9,r8,r9
8111e914:	898d803a 	cmpltu	r6,r17,r6
8111e918:	3251883a 	add	r8,r6,r9
8111e91c:	1021883a 	mov	r16,r2
8111e920:	003f0806 	br	8111e544 <__reset+0xfb0fe544>
8111e924:	1000301e 	bne	r2,zero,8111e9e8 <__adddf3+0x720>
8111e928:	4984b03a 	or	r2,r9,r6
8111e92c:	10007126 	beq	r2,zero,8111eaf4 <__adddf3+0x82c>
8111e930:	4811883a 	mov	r8,r9
8111e934:	3023883a 	mov	r17,r6
8111e938:	3825883a 	mov	r18,r7
8111e93c:	0401ffc4 	movi	r16,2047
8111e940:	003e8006 	br	8111e344 <__reset+0xfb0fe344>
8111e944:	4462b03a 	or	r17,r8,r17
8111e948:	8822c03a 	cmpne	r17,r17,zero
8111e94c:	0007883a 	mov	r3,zero
8111e950:	003f8b06 	br	8111e780 <__reset+0xfb0fe780>
8111e954:	0141ffc4 	movi	r5,2047
8111e958:	11403b26 	beq	r2,r5,8111ea48 <__adddf3+0x780>
8111e95c:	0109c83a 	sub	r4,zero,r4
8111e960:	42002034 	orhi	r8,r8,128
8111e964:	01400e04 	movi	r5,56
8111e968:	29006716 	blt	r5,r4,8111eb08 <__adddf3+0x840>
8111e96c:	014007c4 	movi	r5,31
8111e970:	29007016 	blt	r5,r4,8111eb34 <__adddf3+0x86c>
8111e974:	01400804 	movi	r5,32
8111e978:	290bc83a 	sub	r5,r5,r4
8111e97c:	4154983a 	sll	r10,r8,r5
8111e980:	890ed83a 	srl	r7,r17,r4
8111e984:	894a983a 	sll	r5,r17,r5
8111e988:	4108d83a 	srl	r4,r8,r4
8111e98c:	51e2b03a 	or	r17,r10,r7
8111e990:	280ac03a 	cmpne	r5,r5,zero
8111e994:	8962b03a 	or	r17,r17,r5
8111e998:	89a3883a 	add	r17,r17,r6
8111e99c:	2253883a 	add	r9,r4,r9
8111e9a0:	898d803a 	cmpltu	r6,r17,r6
8111e9a4:	3251883a 	add	r8,r6,r9
8111e9a8:	1021883a 	mov	r16,r2
8111e9ac:	003ee506 	br	8111e544 <__reset+0xfb0fe544>
8111e9b0:	4984b03a 	or	r2,r9,r6
8111e9b4:	103e6326 	beq	r2,zero,8111e344 <__reset+0xfb0fe344>
8111e9b8:	8987c83a 	sub	r3,r17,r6
8111e9bc:	88c9803a 	cmpltu	r4,r17,r3
8111e9c0:	4245c83a 	sub	r2,r8,r9
8111e9c4:	1105c83a 	sub	r2,r2,r4
8111e9c8:	1100202c 	andhi	r4,r2,128
8111e9cc:	203ebb26 	beq	r4,zero,8111e4bc <__reset+0xfb0fe4bc>
8111e9d0:	3463c83a 	sub	r17,r6,r17
8111e9d4:	4a07c83a 	sub	r3,r9,r8
8111e9d8:	344d803a 	cmpltu	r6,r6,r17
8111e9dc:	1991c83a 	sub	r8,r3,r6
8111e9e0:	3825883a 	mov	r18,r7
8111e9e4:	003e5706 	br	8111e344 <__reset+0xfb0fe344>
8111e9e8:	4984b03a 	or	r2,r9,r6
8111e9ec:	10002e26 	beq	r2,zero,8111eaa8 <__adddf3+0x7e0>
8111e9f0:	4004d0fa 	srli	r2,r8,3
8111e9f4:	8822d0fa 	srli	r17,r17,3
8111e9f8:	4010977a 	slli	r8,r8,29
8111e9fc:	10c0022c 	andhi	r3,r2,8
8111ea00:	4462b03a 	or	r17,r8,r17
8111ea04:	18000826 	beq	r3,zero,8111ea28 <__adddf3+0x760>
8111ea08:	4808d0fa 	srli	r4,r9,3
8111ea0c:	20c0022c 	andhi	r3,r4,8
8111ea10:	1800051e 	bne	r3,zero,8111ea28 <__adddf3+0x760>
8111ea14:	300cd0fa 	srli	r6,r6,3
8111ea18:	4806977a 	slli	r3,r9,29
8111ea1c:	2005883a 	mov	r2,r4
8111ea20:	3825883a 	mov	r18,r7
8111ea24:	19a2b03a 	or	r17,r3,r6
8111ea28:	8810d77a 	srli	r8,r17,29
8111ea2c:	100490fa 	slli	r2,r2,3
8111ea30:	882290fa 	slli	r17,r17,3
8111ea34:	0401ffc4 	movi	r16,2047
8111ea38:	4090b03a 	or	r8,r8,r2
8111ea3c:	003e4106 	br	8111e344 <__reset+0xfb0fe344>
8111ea40:	0141ffc4 	movi	r5,2047
8111ea44:	117fc71e 	bne	r2,r5,8111e964 <__reset+0xfb0fe964>
8111ea48:	4811883a 	mov	r8,r9
8111ea4c:	3023883a 	mov	r17,r6
8111ea50:	1021883a 	mov	r16,r2
8111ea54:	003e3b06 	br	8111e344 <__reset+0xfb0fe344>
8111ea58:	10002f26 	beq	r2,zero,8111eb18 <__adddf3+0x850>
8111ea5c:	4984b03a 	or	r2,r9,r6
8111ea60:	10001126 	beq	r2,zero,8111eaa8 <__adddf3+0x7e0>
8111ea64:	4004d0fa 	srli	r2,r8,3
8111ea68:	8822d0fa 	srli	r17,r17,3
8111ea6c:	4010977a 	slli	r8,r8,29
8111ea70:	10c0022c 	andhi	r3,r2,8
8111ea74:	4462b03a 	or	r17,r8,r17
8111ea78:	183feb26 	beq	r3,zero,8111ea28 <__reset+0xfb0fea28>
8111ea7c:	4808d0fa 	srli	r4,r9,3
8111ea80:	20c0022c 	andhi	r3,r4,8
8111ea84:	183fe81e 	bne	r3,zero,8111ea28 <__reset+0xfb0fea28>
8111ea88:	300cd0fa 	srli	r6,r6,3
8111ea8c:	4806977a 	slli	r3,r9,29
8111ea90:	2005883a 	mov	r2,r4
8111ea94:	19a2b03a 	or	r17,r3,r6
8111ea98:	003fe306 	br	8111ea28 <__reset+0xfb0fea28>
8111ea9c:	0011883a 	mov	r8,zero
8111eaa0:	0005883a 	mov	r2,zero
8111eaa4:	003e3f06 	br	8111e3a4 <__reset+0xfb0fe3a4>
8111eaa8:	0401ffc4 	movi	r16,2047
8111eaac:	003e2506 	br	8111e344 <__reset+0xfb0fe344>
8111eab0:	0013883a 	mov	r9,zero
8111eab4:	003f8406 	br	8111e8c8 <__reset+0xfb0fe8c8>
8111eab8:	0005883a 	mov	r2,zero
8111eabc:	0007883a 	mov	r3,zero
8111eac0:	003e8906 	br	8111e4e8 <__reset+0xfb0fe4e8>
8111eac4:	197ff804 	addi	r5,r3,-32
8111eac8:	01000804 	movi	r4,32
8111eacc:	414ad83a 	srl	r5,r8,r5
8111ead0:	19002426 	beq	r3,r4,8111eb64 <__adddf3+0x89c>
8111ead4:	01001004 	movi	r4,64
8111ead8:	20c7c83a 	sub	r3,r4,r3
8111eadc:	40c6983a 	sll	r3,r8,r3
8111eae0:	1c46b03a 	or	r3,r3,r17
8111eae4:	1806c03a 	cmpne	r3,r3,zero
8111eae8:	28e2b03a 	or	r17,r5,r3
8111eaec:	0007883a 	mov	r3,zero
8111eaf0:	003f2306 	br	8111e780 <__reset+0xfb0fe780>
8111eaf4:	0007883a 	mov	r3,zero
8111eaf8:	5811883a 	mov	r8,r11
8111eafc:	00bfffc4 	movi	r2,-1
8111eb00:	0401ffc4 	movi	r16,2047
8111eb04:	003e7806 	br	8111e4e8 <__reset+0xfb0fe4e8>
8111eb08:	4462b03a 	or	r17,r8,r17
8111eb0c:	8822c03a 	cmpne	r17,r17,zero
8111eb10:	0009883a 	mov	r4,zero
8111eb14:	003fa006 	br	8111e998 <__reset+0xfb0fe998>
8111eb18:	4811883a 	mov	r8,r9
8111eb1c:	3023883a 	mov	r17,r6
8111eb20:	0401ffc4 	movi	r16,2047
8111eb24:	003e0706 	br	8111e344 <__reset+0xfb0fe344>
8111eb28:	4811883a 	mov	r8,r9
8111eb2c:	3023883a 	mov	r17,r6
8111eb30:	003e0406 	br	8111e344 <__reset+0xfb0fe344>
8111eb34:	21fff804 	addi	r7,r4,-32
8111eb38:	01400804 	movi	r5,32
8111eb3c:	41ced83a 	srl	r7,r8,r7
8111eb40:	21400a26 	beq	r4,r5,8111eb6c <__adddf3+0x8a4>
8111eb44:	01401004 	movi	r5,64
8111eb48:	2909c83a 	sub	r4,r5,r4
8111eb4c:	4108983a 	sll	r4,r8,r4
8111eb50:	2448b03a 	or	r4,r4,r17
8111eb54:	2008c03a 	cmpne	r4,r4,zero
8111eb58:	3922b03a 	or	r17,r7,r4
8111eb5c:	0009883a 	mov	r4,zero
8111eb60:	003f8d06 	br	8111e998 <__reset+0xfb0fe998>
8111eb64:	0007883a 	mov	r3,zero
8111eb68:	003fdd06 	br	8111eae0 <__reset+0xfb0feae0>
8111eb6c:	0009883a 	mov	r4,zero
8111eb70:	003ff706 	br	8111eb50 <__reset+0xfb0feb50>

8111eb74 <__divdf3>:
8111eb74:	defff204 	addi	sp,sp,-56
8111eb78:	dd400915 	stw	r21,36(sp)
8111eb7c:	282ad53a 	srli	r21,r5,20
8111eb80:	dd000815 	stw	r20,32(sp)
8111eb84:	2828d7fa 	srli	r20,r5,31
8111eb88:	dc000415 	stw	r16,16(sp)
8111eb8c:	04000434 	movhi	r16,16
8111eb90:	df000c15 	stw	fp,48(sp)
8111eb94:	843fffc4 	addi	r16,r16,-1
8111eb98:	dfc00d15 	stw	ra,52(sp)
8111eb9c:	ddc00b15 	stw	r23,44(sp)
8111eba0:	dd800a15 	stw	r22,40(sp)
8111eba4:	dcc00715 	stw	r19,28(sp)
8111eba8:	dc800615 	stw	r18,24(sp)
8111ebac:	dc400515 	stw	r17,20(sp)
8111ebb0:	ad41ffcc 	andi	r21,r21,2047
8111ebb4:	2c20703a 	and	r16,r5,r16
8111ebb8:	a7003fcc 	andi	fp,r20,255
8111ebbc:	a8006126 	beq	r21,zero,8111ed44 <__divdf3+0x1d0>
8111ebc0:	0081ffc4 	movi	r2,2047
8111ebc4:	2025883a 	mov	r18,r4
8111ebc8:	a8803726 	beq	r21,r2,8111eca8 <__divdf3+0x134>
8111ebcc:	80800434 	orhi	r2,r16,16
8111ebd0:	100490fa 	slli	r2,r2,3
8111ebd4:	2020d77a 	srli	r16,r4,29
8111ebd8:	202490fa 	slli	r18,r4,3
8111ebdc:	ad7f0044 	addi	r21,r21,-1023
8111ebe0:	80a0b03a 	or	r16,r16,r2
8111ebe4:	0027883a 	mov	r19,zero
8111ebe8:	0013883a 	mov	r9,zero
8111ebec:	3804d53a 	srli	r2,r7,20
8111ebf0:	382cd7fa 	srli	r22,r7,31
8111ebf4:	04400434 	movhi	r17,16
8111ebf8:	8c7fffc4 	addi	r17,r17,-1
8111ebfc:	1081ffcc 	andi	r2,r2,2047
8111ec00:	3011883a 	mov	r8,r6
8111ec04:	3c62703a 	and	r17,r7,r17
8111ec08:	b5c03fcc 	andi	r23,r22,255
8111ec0c:	10006c26 	beq	r2,zero,8111edc0 <__divdf3+0x24c>
8111ec10:	00c1ffc4 	movi	r3,2047
8111ec14:	10c06426 	beq	r2,r3,8111eda8 <__divdf3+0x234>
8111ec18:	88c00434 	orhi	r3,r17,16
8111ec1c:	180690fa 	slli	r3,r3,3
8111ec20:	3022d77a 	srli	r17,r6,29
8111ec24:	301090fa 	slli	r8,r6,3
8111ec28:	10bf0044 	addi	r2,r2,-1023
8111ec2c:	88e2b03a 	or	r17,r17,r3
8111ec30:	000f883a 	mov	r7,zero
8111ec34:	a58cf03a 	xor	r6,r20,r22
8111ec38:	3cc8b03a 	or	r4,r7,r19
8111ec3c:	a8abc83a 	sub	r21,r21,r2
8111ec40:	008003c4 	movi	r2,15
8111ec44:	3007883a 	mov	r3,r6
8111ec48:	34c03fcc 	andi	r19,r6,255
8111ec4c:	11009036 	bltu	r2,r4,8111ee90 <__divdf3+0x31c>
8111ec50:	200890ba 	slli	r4,r4,2
8111ec54:	00a044b4 	movhi	r2,33042
8111ec58:	10bb1a04 	addi	r2,r2,-5016
8111ec5c:	2089883a 	add	r4,r4,r2
8111ec60:	20800017 	ldw	r2,0(r4)
8111ec64:	1000683a 	jmp	r2
8111ec68:	8111ee90 	cmplti	r4,r16,18362
8111ec6c:	8111ece0 	cmpeqi	r4,r16,18355
8111ec70:	8111ee80 	call	88111ee8 <__reset+0x20f1ee8>
8111ec74:	8111ecd4 	ori	r4,r16,18355
8111ec78:	8111ee80 	call	88111ee8 <__reset+0x20f1ee8>
8111ec7c:	8111ee54 	ori	r4,r16,18361
8111ec80:	8111ee80 	call	88111ee8 <__reset+0x20f1ee8>
8111ec84:	8111ecd4 	ori	r4,r16,18355
8111ec88:	8111ece0 	cmpeqi	r4,r16,18355
8111ec8c:	8111ece0 	cmpeqi	r4,r16,18355
8111ec90:	8111ee54 	ori	r4,r16,18361
8111ec94:	8111ecd4 	ori	r4,r16,18355
8111ec98:	8111ecc4 	addi	r4,r16,18355
8111ec9c:	8111ecc4 	addi	r4,r16,18355
8111eca0:	8111ecc4 	addi	r4,r16,18355
8111eca4:	8111f174 	orhi	r4,r16,18373
8111eca8:	2404b03a 	or	r2,r4,r16
8111ecac:	1000661e 	bne	r2,zero,8111ee48 <__divdf3+0x2d4>
8111ecb0:	04c00204 	movi	r19,8
8111ecb4:	0021883a 	mov	r16,zero
8111ecb8:	0025883a 	mov	r18,zero
8111ecbc:	02400084 	movi	r9,2
8111ecc0:	003fca06 	br	8111ebec <__reset+0xfb0febec>
8111ecc4:	8023883a 	mov	r17,r16
8111ecc8:	9011883a 	mov	r8,r18
8111eccc:	e02f883a 	mov	r23,fp
8111ecd0:	480f883a 	mov	r7,r9
8111ecd4:	00800084 	movi	r2,2
8111ecd8:	3881311e 	bne	r7,r2,8111f1a0 <__divdf3+0x62c>
8111ecdc:	b827883a 	mov	r19,r23
8111ece0:	98c0004c 	andi	r3,r19,1
8111ece4:	0081ffc4 	movi	r2,2047
8111ece8:	000b883a 	mov	r5,zero
8111ecec:	0025883a 	mov	r18,zero
8111ecf0:	1004953a 	slli	r2,r2,20
8111ecf4:	18c03fcc 	andi	r3,r3,255
8111ecf8:	04400434 	movhi	r17,16
8111ecfc:	8c7fffc4 	addi	r17,r17,-1
8111ed00:	180697fa 	slli	r3,r3,31
8111ed04:	2c4a703a 	and	r5,r5,r17
8111ed08:	288ab03a 	or	r5,r5,r2
8111ed0c:	28c6b03a 	or	r3,r5,r3
8111ed10:	9005883a 	mov	r2,r18
8111ed14:	dfc00d17 	ldw	ra,52(sp)
8111ed18:	df000c17 	ldw	fp,48(sp)
8111ed1c:	ddc00b17 	ldw	r23,44(sp)
8111ed20:	dd800a17 	ldw	r22,40(sp)
8111ed24:	dd400917 	ldw	r21,36(sp)
8111ed28:	dd000817 	ldw	r20,32(sp)
8111ed2c:	dcc00717 	ldw	r19,28(sp)
8111ed30:	dc800617 	ldw	r18,24(sp)
8111ed34:	dc400517 	ldw	r17,20(sp)
8111ed38:	dc000417 	ldw	r16,16(sp)
8111ed3c:	dec00e04 	addi	sp,sp,56
8111ed40:	f800283a 	ret
8111ed44:	2404b03a 	or	r2,r4,r16
8111ed48:	2027883a 	mov	r19,r4
8111ed4c:	10003926 	beq	r2,zero,8111ee34 <__divdf3+0x2c0>
8111ed50:	80012e26 	beq	r16,zero,8111f20c <__divdf3+0x698>
8111ed54:	8009883a 	mov	r4,r16
8111ed58:	d9800315 	stw	r6,12(sp)
8111ed5c:	d9c00215 	stw	r7,8(sp)
8111ed60:	110fef00 	call	8110fef0 <__clzsi2>
8111ed64:	d9800317 	ldw	r6,12(sp)
8111ed68:	d9c00217 	ldw	r7,8(sp)
8111ed6c:	113ffd44 	addi	r4,r2,-11
8111ed70:	00c00704 	movi	r3,28
8111ed74:	19012116 	blt	r3,r4,8111f1fc <__divdf3+0x688>
8111ed78:	00c00744 	movi	r3,29
8111ed7c:	147ffe04 	addi	r17,r2,-8
8111ed80:	1907c83a 	sub	r3,r3,r4
8111ed84:	8460983a 	sll	r16,r16,r17
8111ed88:	98c6d83a 	srl	r3,r19,r3
8111ed8c:	9c64983a 	sll	r18,r19,r17
8111ed90:	1c20b03a 	or	r16,r3,r16
8111ed94:	1080fcc4 	addi	r2,r2,1011
8111ed98:	00abc83a 	sub	r21,zero,r2
8111ed9c:	0027883a 	mov	r19,zero
8111eda0:	0013883a 	mov	r9,zero
8111eda4:	003f9106 	br	8111ebec <__reset+0xfb0febec>
8111eda8:	3446b03a 	or	r3,r6,r17
8111edac:	18001f1e 	bne	r3,zero,8111ee2c <__divdf3+0x2b8>
8111edb0:	0023883a 	mov	r17,zero
8111edb4:	0011883a 	mov	r8,zero
8111edb8:	01c00084 	movi	r7,2
8111edbc:	003f9d06 	br	8111ec34 <__reset+0xfb0fec34>
8111edc0:	3446b03a 	or	r3,r6,r17
8111edc4:	18001526 	beq	r3,zero,8111ee1c <__divdf3+0x2a8>
8111edc8:	88011b26 	beq	r17,zero,8111f238 <__divdf3+0x6c4>
8111edcc:	8809883a 	mov	r4,r17
8111edd0:	d9800315 	stw	r6,12(sp)
8111edd4:	da400115 	stw	r9,4(sp)
8111edd8:	110fef00 	call	8110fef0 <__clzsi2>
8111eddc:	d9800317 	ldw	r6,12(sp)
8111ede0:	da400117 	ldw	r9,4(sp)
8111ede4:	113ffd44 	addi	r4,r2,-11
8111ede8:	00c00704 	movi	r3,28
8111edec:	19010e16 	blt	r3,r4,8111f228 <__divdf3+0x6b4>
8111edf0:	00c00744 	movi	r3,29
8111edf4:	123ffe04 	addi	r8,r2,-8
8111edf8:	1907c83a 	sub	r3,r3,r4
8111edfc:	8a22983a 	sll	r17,r17,r8
8111ee00:	30c6d83a 	srl	r3,r6,r3
8111ee04:	3210983a 	sll	r8,r6,r8
8111ee08:	1c62b03a 	or	r17,r3,r17
8111ee0c:	1080fcc4 	addi	r2,r2,1011
8111ee10:	0085c83a 	sub	r2,zero,r2
8111ee14:	000f883a 	mov	r7,zero
8111ee18:	003f8606 	br	8111ec34 <__reset+0xfb0fec34>
8111ee1c:	0023883a 	mov	r17,zero
8111ee20:	0011883a 	mov	r8,zero
8111ee24:	01c00044 	movi	r7,1
8111ee28:	003f8206 	br	8111ec34 <__reset+0xfb0fec34>
8111ee2c:	01c000c4 	movi	r7,3
8111ee30:	003f8006 	br	8111ec34 <__reset+0xfb0fec34>
8111ee34:	04c00104 	movi	r19,4
8111ee38:	0021883a 	mov	r16,zero
8111ee3c:	0025883a 	mov	r18,zero
8111ee40:	02400044 	movi	r9,1
8111ee44:	003f6906 	br	8111ebec <__reset+0xfb0febec>
8111ee48:	04c00304 	movi	r19,12
8111ee4c:	024000c4 	movi	r9,3
8111ee50:	003f6606 	br	8111ebec <__reset+0xfb0febec>
8111ee54:	01400434 	movhi	r5,16
8111ee58:	0007883a 	mov	r3,zero
8111ee5c:	297fffc4 	addi	r5,r5,-1
8111ee60:	04bfffc4 	movi	r18,-1
8111ee64:	0081ffc4 	movi	r2,2047
8111ee68:	003fa106 	br	8111ecf0 <__reset+0xfb0fecf0>
8111ee6c:	00c00044 	movi	r3,1
8111ee70:	1887c83a 	sub	r3,r3,r2
8111ee74:	01000e04 	movi	r4,56
8111ee78:	20c1210e 	bge	r4,r3,8111f300 <__divdf3+0x78c>
8111ee7c:	98c0004c 	andi	r3,r19,1
8111ee80:	0005883a 	mov	r2,zero
8111ee84:	000b883a 	mov	r5,zero
8111ee88:	0025883a 	mov	r18,zero
8111ee8c:	003f9806 	br	8111ecf0 <__reset+0xfb0fecf0>
8111ee90:	8c00fd36 	bltu	r17,r16,8111f288 <__divdf3+0x714>
8111ee94:	8440fb26 	beq	r16,r17,8111f284 <__divdf3+0x710>
8111ee98:	8007883a 	mov	r3,r16
8111ee9c:	ad7fffc4 	addi	r21,r21,-1
8111eea0:	0021883a 	mov	r16,zero
8111eea4:	4004d63a 	srli	r2,r8,24
8111eea8:	8822923a 	slli	r17,r17,8
8111eeac:	1809883a 	mov	r4,r3
8111eeb0:	402c923a 	slli	r22,r8,8
8111eeb4:	88b8b03a 	or	fp,r17,r2
8111eeb8:	e028d43a 	srli	r20,fp,16
8111eebc:	d8c00015 	stw	r3,0(sp)
8111eec0:	e5ffffcc 	andi	r23,fp,65535
8111eec4:	a00b883a 	mov	r5,r20
8111eec8:	111e20c0 	call	8111e20c <__udivsi3>
8111eecc:	d8c00017 	ldw	r3,0(sp)
8111eed0:	a00b883a 	mov	r5,r20
8111eed4:	d8800315 	stw	r2,12(sp)
8111eed8:	1809883a 	mov	r4,r3
8111eedc:	111e2700 	call	8111e270 <__umodsi3>
8111eee0:	d9800317 	ldw	r6,12(sp)
8111eee4:	1006943a 	slli	r3,r2,16
8111eee8:	9004d43a 	srli	r2,r18,16
8111eeec:	b9a3383a 	mul	r17,r23,r6
8111eef0:	10c4b03a 	or	r2,r2,r3
8111eef4:	1440062e 	bgeu	r2,r17,8111ef10 <__divdf3+0x39c>
8111eef8:	1705883a 	add	r2,r2,fp
8111eefc:	30ffffc4 	addi	r3,r6,-1
8111ef00:	1700ee36 	bltu	r2,fp,8111f2bc <__divdf3+0x748>
8111ef04:	1440ed2e 	bgeu	r2,r17,8111f2bc <__divdf3+0x748>
8111ef08:	31bfff84 	addi	r6,r6,-2
8111ef0c:	1705883a 	add	r2,r2,fp
8111ef10:	1463c83a 	sub	r17,r2,r17
8111ef14:	a00b883a 	mov	r5,r20
8111ef18:	8809883a 	mov	r4,r17
8111ef1c:	d9800315 	stw	r6,12(sp)
8111ef20:	111e20c0 	call	8111e20c <__udivsi3>
8111ef24:	a00b883a 	mov	r5,r20
8111ef28:	8809883a 	mov	r4,r17
8111ef2c:	d8800215 	stw	r2,8(sp)
8111ef30:	111e2700 	call	8111e270 <__umodsi3>
8111ef34:	d9c00217 	ldw	r7,8(sp)
8111ef38:	1004943a 	slli	r2,r2,16
8111ef3c:	94bfffcc 	andi	r18,r18,65535
8111ef40:	b9d1383a 	mul	r8,r23,r7
8111ef44:	90a4b03a 	or	r18,r18,r2
8111ef48:	d9800317 	ldw	r6,12(sp)
8111ef4c:	9200062e 	bgeu	r18,r8,8111ef68 <__divdf3+0x3f4>
8111ef50:	9725883a 	add	r18,r18,fp
8111ef54:	38bfffc4 	addi	r2,r7,-1
8111ef58:	9700d636 	bltu	r18,fp,8111f2b4 <__divdf3+0x740>
8111ef5c:	9200d52e 	bgeu	r18,r8,8111f2b4 <__divdf3+0x740>
8111ef60:	39ffff84 	addi	r7,r7,-2
8111ef64:	9725883a 	add	r18,r18,fp
8111ef68:	3004943a 	slli	r2,r6,16
8111ef6c:	b012d43a 	srli	r9,r22,16
8111ef70:	b1bfffcc 	andi	r6,r22,65535
8111ef74:	11e2b03a 	or	r17,r2,r7
8111ef78:	8806d43a 	srli	r3,r17,16
8111ef7c:	893fffcc 	andi	r4,r17,65535
8111ef80:	218b383a 	mul	r5,r4,r6
8111ef84:	30c5383a 	mul	r2,r6,r3
8111ef88:	2249383a 	mul	r4,r4,r9
8111ef8c:	280ed43a 	srli	r7,r5,16
8111ef90:	9225c83a 	sub	r18,r18,r8
8111ef94:	2089883a 	add	r4,r4,r2
8111ef98:	3909883a 	add	r4,r7,r4
8111ef9c:	1a47383a 	mul	r3,r3,r9
8111efa0:	2080022e 	bgeu	r4,r2,8111efac <__divdf3+0x438>
8111efa4:	00800074 	movhi	r2,1
8111efa8:	1887883a 	add	r3,r3,r2
8111efac:	2004d43a 	srli	r2,r4,16
8111efb0:	2008943a 	slli	r4,r4,16
8111efb4:	297fffcc 	andi	r5,r5,65535
8111efb8:	10c7883a 	add	r3,r2,r3
8111efbc:	2149883a 	add	r4,r4,r5
8111efc0:	90c0a536 	bltu	r18,r3,8111f258 <__divdf3+0x6e4>
8111efc4:	90c0bf26 	beq	r18,r3,8111f2c4 <__divdf3+0x750>
8111efc8:	90c7c83a 	sub	r3,r18,r3
8111efcc:	810fc83a 	sub	r7,r16,r4
8111efd0:	81e5803a 	cmpltu	r18,r16,r7
8111efd4:	1ca5c83a 	sub	r18,r3,r18
8111efd8:	e480c126 	beq	fp,r18,8111f2e0 <__divdf3+0x76c>
8111efdc:	a00b883a 	mov	r5,r20
8111efe0:	9009883a 	mov	r4,r18
8111efe4:	d9800315 	stw	r6,12(sp)
8111efe8:	d9c00215 	stw	r7,8(sp)
8111efec:	da400115 	stw	r9,4(sp)
8111eff0:	111e20c0 	call	8111e20c <__udivsi3>
8111eff4:	a00b883a 	mov	r5,r20
8111eff8:	9009883a 	mov	r4,r18
8111effc:	d8800015 	stw	r2,0(sp)
8111f000:	111e2700 	call	8111e270 <__umodsi3>
8111f004:	d9c00217 	ldw	r7,8(sp)
8111f008:	da000017 	ldw	r8,0(sp)
8111f00c:	1006943a 	slli	r3,r2,16
8111f010:	3804d43a 	srli	r2,r7,16
8111f014:	ba21383a 	mul	r16,r23,r8
8111f018:	d9800317 	ldw	r6,12(sp)
8111f01c:	10c4b03a 	or	r2,r2,r3
8111f020:	da400117 	ldw	r9,4(sp)
8111f024:	1400062e 	bgeu	r2,r16,8111f040 <__divdf3+0x4cc>
8111f028:	1705883a 	add	r2,r2,fp
8111f02c:	40ffffc4 	addi	r3,r8,-1
8111f030:	1700ad36 	bltu	r2,fp,8111f2e8 <__divdf3+0x774>
8111f034:	1400ac2e 	bgeu	r2,r16,8111f2e8 <__divdf3+0x774>
8111f038:	423fff84 	addi	r8,r8,-2
8111f03c:	1705883a 	add	r2,r2,fp
8111f040:	1421c83a 	sub	r16,r2,r16
8111f044:	a00b883a 	mov	r5,r20
8111f048:	8009883a 	mov	r4,r16
8111f04c:	d9800315 	stw	r6,12(sp)
8111f050:	d9c00215 	stw	r7,8(sp)
8111f054:	da000015 	stw	r8,0(sp)
8111f058:	da400115 	stw	r9,4(sp)
8111f05c:	111e20c0 	call	8111e20c <__udivsi3>
8111f060:	8009883a 	mov	r4,r16
8111f064:	a00b883a 	mov	r5,r20
8111f068:	1025883a 	mov	r18,r2
8111f06c:	111e2700 	call	8111e270 <__umodsi3>
8111f070:	d9c00217 	ldw	r7,8(sp)
8111f074:	1004943a 	slli	r2,r2,16
8111f078:	bcaf383a 	mul	r23,r23,r18
8111f07c:	393fffcc 	andi	r4,r7,65535
8111f080:	2088b03a 	or	r4,r4,r2
8111f084:	d9800317 	ldw	r6,12(sp)
8111f088:	da000017 	ldw	r8,0(sp)
8111f08c:	da400117 	ldw	r9,4(sp)
8111f090:	25c0062e 	bgeu	r4,r23,8111f0ac <__divdf3+0x538>
8111f094:	2709883a 	add	r4,r4,fp
8111f098:	90bfffc4 	addi	r2,r18,-1
8111f09c:	27009436 	bltu	r4,fp,8111f2f0 <__divdf3+0x77c>
8111f0a0:	25c0932e 	bgeu	r4,r23,8111f2f0 <__divdf3+0x77c>
8111f0a4:	94bfff84 	addi	r18,r18,-2
8111f0a8:	2709883a 	add	r4,r4,fp
8111f0ac:	4004943a 	slli	r2,r8,16
8111f0b0:	25efc83a 	sub	r23,r4,r23
8111f0b4:	1490b03a 	or	r8,r2,r18
8111f0b8:	4008d43a 	srli	r4,r8,16
8111f0bc:	40ffffcc 	andi	r3,r8,65535
8111f0c0:	30c5383a 	mul	r2,r6,r3
8111f0c4:	1a47383a 	mul	r3,r3,r9
8111f0c8:	310d383a 	mul	r6,r6,r4
8111f0cc:	100ad43a 	srli	r5,r2,16
8111f0d0:	4913383a 	mul	r9,r9,r4
8111f0d4:	1987883a 	add	r3,r3,r6
8111f0d8:	28c7883a 	add	r3,r5,r3
8111f0dc:	1980022e 	bgeu	r3,r6,8111f0e8 <__divdf3+0x574>
8111f0e0:	01000074 	movhi	r4,1
8111f0e4:	4913883a 	add	r9,r9,r4
8111f0e8:	1808d43a 	srli	r4,r3,16
8111f0ec:	1806943a 	slli	r3,r3,16
8111f0f0:	10bfffcc 	andi	r2,r2,65535
8111f0f4:	2253883a 	add	r9,r4,r9
8111f0f8:	1887883a 	add	r3,r3,r2
8111f0fc:	ba403836 	bltu	r23,r9,8111f1e0 <__divdf3+0x66c>
8111f100:	ba403626 	beq	r23,r9,8111f1dc <__divdf3+0x668>
8111f104:	42000054 	ori	r8,r8,1
8111f108:	a880ffc4 	addi	r2,r21,1023
8111f10c:	00bf570e 	bge	zero,r2,8111ee6c <__reset+0xfb0fee6c>
8111f110:	40c001cc 	andi	r3,r8,7
8111f114:	18000726 	beq	r3,zero,8111f134 <__divdf3+0x5c0>
8111f118:	40c003cc 	andi	r3,r8,15
8111f11c:	01000104 	movi	r4,4
8111f120:	19000426 	beq	r3,r4,8111f134 <__divdf3+0x5c0>
8111f124:	4107883a 	add	r3,r8,r4
8111f128:	1a11803a 	cmpltu	r8,r3,r8
8111f12c:	8a23883a 	add	r17,r17,r8
8111f130:	1811883a 	mov	r8,r3
8111f134:	88c0402c 	andhi	r3,r17,256
8111f138:	18000426 	beq	r3,zero,8111f14c <__divdf3+0x5d8>
8111f13c:	00ffc034 	movhi	r3,65280
8111f140:	18ffffc4 	addi	r3,r3,-1
8111f144:	a8810004 	addi	r2,r21,1024
8111f148:	88e2703a 	and	r17,r17,r3
8111f14c:	00c1ff84 	movi	r3,2046
8111f150:	18bee316 	blt	r3,r2,8111ece0 <__reset+0xfb0fece0>
8111f154:	8824977a 	slli	r18,r17,29
8111f158:	4010d0fa 	srli	r8,r8,3
8111f15c:	8822927a 	slli	r17,r17,9
8111f160:	1081ffcc 	andi	r2,r2,2047
8111f164:	9224b03a 	or	r18,r18,r8
8111f168:	880ad33a 	srli	r5,r17,12
8111f16c:	98c0004c 	andi	r3,r19,1
8111f170:	003edf06 	br	8111ecf0 <__reset+0xfb0fecf0>
8111f174:	8080022c 	andhi	r2,r16,8
8111f178:	10001226 	beq	r2,zero,8111f1c4 <__divdf3+0x650>
8111f17c:	8880022c 	andhi	r2,r17,8
8111f180:	1000101e 	bne	r2,zero,8111f1c4 <__divdf3+0x650>
8111f184:	00800434 	movhi	r2,16
8111f188:	89400234 	orhi	r5,r17,8
8111f18c:	10bfffc4 	addi	r2,r2,-1
8111f190:	b007883a 	mov	r3,r22
8111f194:	288a703a 	and	r5,r5,r2
8111f198:	4025883a 	mov	r18,r8
8111f19c:	003f3106 	br	8111ee64 <__reset+0xfb0fee64>
8111f1a0:	008000c4 	movi	r2,3
8111f1a4:	3880a626 	beq	r7,r2,8111f440 <__divdf3+0x8cc>
8111f1a8:	00800044 	movi	r2,1
8111f1ac:	3880521e 	bne	r7,r2,8111f2f8 <__divdf3+0x784>
8111f1b0:	b807883a 	mov	r3,r23
8111f1b4:	0005883a 	mov	r2,zero
8111f1b8:	000b883a 	mov	r5,zero
8111f1bc:	0025883a 	mov	r18,zero
8111f1c0:	003ecb06 	br	8111ecf0 <__reset+0xfb0fecf0>
8111f1c4:	00800434 	movhi	r2,16
8111f1c8:	81400234 	orhi	r5,r16,8
8111f1cc:	10bfffc4 	addi	r2,r2,-1
8111f1d0:	a007883a 	mov	r3,r20
8111f1d4:	288a703a 	and	r5,r5,r2
8111f1d8:	003f2206 	br	8111ee64 <__reset+0xfb0fee64>
8111f1dc:	183fca26 	beq	r3,zero,8111f108 <__reset+0xfb0ff108>
8111f1e0:	e5ef883a 	add	r23,fp,r23
8111f1e4:	40bfffc4 	addi	r2,r8,-1
8111f1e8:	bf00392e 	bgeu	r23,fp,8111f2d0 <__divdf3+0x75c>
8111f1ec:	1011883a 	mov	r8,r2
8111f1f0:	ba7fc41e 	bne	r23,r9,8111f104 <__reset+0xfb0ff104>
8111f1f4:	b0ffc31e 	bne	r22,r3,8111f104 <__reset+0xfb0ff104>
8111f1f8:	003fc306 	br	8111f108 <__reset+0xfb0ff108>
8111f1fc:	143ff604 	addi	r16,r2,-40
8111f200:	9c20983a 	sll	r16,r19,r16
8111f204:	0025883a 	mov	r18,zero
8111f208:	003ee206 	br	8111ed94 <__reset+0xfb0fed94>
8111f20c:	d9800315 	stw	r6,12(sp)
8111f210:	d9c00215 	stw	r7,8(sp)
8111f214:	110fef00 	call	8110fef0 <__clzsi2>
8111f218:	10800804 	addi	r2,r2,32
8111f21c:	d9c00217 	ldw	r7,8(sp)
8111f220:	d9800317 	ldw	r6,12(sp)
8111f224:	003ed106 	br	8111ed6c <__reset+0xfb0fed6c>
8111f228:	147ff604 	addi	r17,r2,-40
8111f22c:	3462983a 	sll	r17,r6,r17
8111f230:	0011883a 	mov	r8,zero
8111f234:	003ef506 	br	8111ee0c <__reset+0xfb0fee0c>
8111f238:	3009883a 	mov	r4,r6
8111f23c:	d9800315 	stw	r6,12(sp)
8111f240:	da400115 	stw	r9,4(sp)
8111f244:	110fef00 	call	8110fef0 <__clzsi2>
8111f248:	10800804 	addi	r2,r2,32
8111f24c:	da400117 	ldw	r9,4(sp)
8111f250:	d9800317 	ldw	r6,12(sp)
8111f254:	003ee306 	br	8111ede4 <__reset+0xfb0fede4>
8111f258:	85a1883a 	add	r16,r16,r22
8111f25c:	8585803a 	cmpltu	r2,r16,r22
8111f260:	1705883a 	add	r2,r2,fp
8111f264:	14a5883a 	add	r18,r2,r18
8111f268:	88bfffc4 	addi	r2,r17,-1
8111f26c:	e4800c2e 	bgeu	fp,r18,8111f2a0 <__divdf3+0x72c>
8111f270:	90c03e36 	bltu	r18,r3,8111f36c <__divdf3+0x7f8>
8111f274:	1c806926 	beq	r3,r18,8111f41c <__divdf3+0x8a8>
8111f278:	90c7c83a 	sub	r3,r18,r3
8111f27c:	1023883a 	mov	r17,r2
8111f280:	003f5206 	br	8111efcc <__reset+0xfb0fefcc>
8111f284:	923f0436 	bltu	r18,r8,8111ee98 <__reset+0xfb0fee98>
8111f288:	800897fa 	slli	r4,r16,31
8111f28c:	9004d07a 	srli	r2,r18,1
8111f290:	8006d07a 	srli	r3,r16,1
8111f294:	902097fa 	slli	r16,r18,31
8111f298:	20a4b03a 	or	r18,r4,r2
8111f29c:	003f0106 	br	8111eea4 <__reset+0xfb0feea4>
8111f2a0:	e4bff51e 	bne	fp,r18,8111f278 <__reset+0xfb0ff278>
8111f2a4:	85bff22e 	bgeu	r16,r22,8111f270 <__reset+0xfb0ff270>
8111f2a8:	e0c7c83a 	sub	r3,fp,r3
8111f2ac:	1023883a 	mov	r17,r2
8111f2b0:	003f4606 	br	8111efcc <__reset+0xfb0fefcc>
8111f2b4:	100f883a 	mov	r7,r2
8111f2b8:	003f2b06 	br	8111ef68 <__reset+0xfb0fef68>
8111f2bc:	180d883a 	mov	r6,r3
8111f2c0:	003f1306 	br	8111ef10 <__reset+0xfb0fef10>
8111f2c4:	813fe436 	bltu	r16,r4,8111f258 <__reset+0xfb0ff258>
8111f2c8:	0007883a 	mov	r3,zero
8111f2cc:	003f3f06 	br	8111efcc <__reset+0xfb0fefcc>
8111f2d0:	ba402c36 	bltu	r23,r9,8111f384 <__divdf3+0x810>
8111f2d4:	4dc05426 	beq	r9,r23,8111f428 <__divdf3+0x8b4>
8111f2d8:	1011883a 	mov	r8,r2
8111f2dc:	003f8906 	br	8111f104 <__reset+0xfb0ff104>
8111f2e0:	023fffc4 	movi	r8,-1
8111f2e4:	003f8806 	br	8111f108 <__reset+0xfb0ff108>
8111f2e8:	1811883a 	mov	r8,r3
8111f2ec:	003f5406 	br	8111f040 <__reset+0xfb0ff040>
8111f2f0:	1025883a 	mov	r18,r2
8111f2f4:	003f6d06 	br	8111f0ac <__reset+0xfb0ff0ac>
8111f2f8:	b827883a 	mov	r19,r23
8111f2fc:	003f8206 	br	8111f108 <__reset+0xfb0ff108>
8111f300:	010007c4 	movi	r4,31
8111f304:	20c02616 	blt	r4,r3,8111f3a0 <__divdf3+0x82c>
8111f308:	00800804 	movi	r2,32
8111f30c:	10c5c83a 	sub	r2,r2,r3
8111f310:	888a983a 	sll	r5,r17,r2
8111f314:	40c8d83a 	srl	r4,r8,r3
8111f318:	4084983a 	sll	r2,r8,r2
8111f31c:	88e2d83a 	srl	r17,r17,r3
8111f320:	2906b03a 	or	r3,r5,r4
8111f324:	1004c03a 	cmpne	r2,r2,zero
8111f328:	1886b03a 	or	r3,r3,r2
8111f32c:	188001cc 	andi	r2,r3,7
8111f330:	10000726 	beq	r2,zero,8111f350 <__divdf3+0x7dc>
8111f334:	188003cc 	andi	r2,r3,15
8111f338:	01000104 	movi	r4,4
8111f33c:	11000426 	beq	r2,r4,8111f350 <__divdf3+0x7dc>
8111f340:	1805883a 	mov	r2,r3
8111f344:	10c00104 	addi	r3,r2,4
8111f348:	1885803a 	cmpltu	r2,r3,r2
8111f34c:	88a3883a 	add	r17,r17,r2
8111f350:	8880202c 	andhi	r2,r17,128
8111f354:	10002726 	beq	r2,zero,8111f3f4 <__divdf3+0x880>
8111f358:	98c0004c 	andi	r3,r19,1
8111f35c:	00800044 	movi	r2,1
8111f360:	000b883a 	mov	r5,zero
8111f364:	0025883a 	mov	r18,zero
8111f368:	003e6106 	br	8111ecf0 <__reset+0xfb0fecf0>
8111f36c:	85a1883a 	add	r16,r16,r22
8111f370:	8585803a 	cmpltu	r2,r16,r22
8111f374:	1705883a 	add	r2,r2,fp
8111f378:	14a5883a 	add	r18,r2,r18
8111f37c:	8c7fff84 	addi	r17,r17,-2
8111f380:	003f1106 	br	8111efc8 <__reset+0xfb0fefc8>
8111f384:	b589883a 	add	r4,r22,r22
8111f388:	25ad803a 	cmpltu	r22,r4,r22
8111f38c:	b739883a 	add	fp,r22,fp
8111f390:	40bfff84 	addi	r2,r8,-2
8111f394:	bf2f883a 	add	r23,r23,fp
8111f398:	202d883a 	mov	r22,r4
8111f39c:	003f9306 	br	8111f1ec <__reset+0xfb0ff1ec>
8111f3a0:	013ff844 	movi	r4,-31
8111f3a4:	2085c83a 	sub	r2,r4,r2
8111f3a8:	8888d83a 	srl	r4,r17,r2
8111f3ac:	00800804 	movi	r2,32
8111f3b0:	18802126 	beq	r3,r2,8111f438 <__divdf3+0x8c4>
8111f3b4:	00801004 	movi	r2,64
8111f3b8:	10c5c83a 	sub	r2,r2,r3
8111f3bc:	8884983a 	sll	r2,r17,r2
8111f3c0:	1204b03a 	or	r2,r2,r8
8111f3c4:	1004c03a 	cmpne	r2,r2,zero
8111f3c8:	2084b03a 	or	r2,r4,r2
8111f3cc:	144001cc 	andi	r17,r2,7
8111f3d0:	88000d1e 	bne	r17,zero,8111f408 <__divdf3+0x894>
8111f3d4:	000b883a 	mov	r5,zero
8111f3d8:	1024d0fa 	srli	r18,r2,3
8111f3dc:	98c0004c 	andi	r3,r19,1
8111f3e0:	0005883a 	mov	r2,zero
8111f3e4:	9464b03a 	or	r18,r18,r17
8111f3e8:	003e4106 	br	8111ecf0 <__reset+0xfb0fecf0>
8111f3ec:	1007883a 	mov	r3,r2
8111f3f0:	0023883a 	mov	r17,zero
8111f3f4:	880a927a 	slli	r5,r17,9
8111f3f8:	1805883a 	mov	r2,r3
8111f3fc:	8822977a 	slli	r17,r17,29
8111f400:	280ad33a 	srli	r5,r5,12
8111f404:	003ff406 	br	8111f3d8 <__reset+0xfb0ff3d8>
8111f408:	10c003cc 	andi	r3,r2,15
8111f40c:	01000104 	movi	r4,4
8111f410:	193ff626 	beq	r3,r4,8111f3ec <__reset+0xfb0ff3ec>
8111f414:	0023883a 	mov	r17,zero
8111f418:	003fca06 	br	8111f344 <__reset+0xfb0ff344>
8111f41c:	813fd336 	bltu	r16,r4,8111f36c <__reset+0xfb0ff36c>
8111f420:	1023883a 	mov	r17,r2
8111f424:	003fa806 	br	8111f2c8 <__reset+0xfb0ff2c8>
8111f428:	b0ffd636 	bltu	r22,r3,8111f384 <__reset+0xfb0ff384>
8111f42c:	1011883a 	mov	r8,r2
8111f430:	b0ff341e 	bne	r22,r3,8111f104 <__reset+0xfb0ff104>
8111f434:	003f3406 	br	8111f108 <__reset+0xfb0ff108>
8111f438:	0005883a 	mov	r2,zero
8111f43c:	003fe006 	br	8111f3c0 <__reset+0xfb0ff3c0>
8111f440:	00800434 	movhi	r2,16
8111f444:	89400234 	orhi	r5,r17,8
8111f448:	10bfffc4 	addi	r2,r2,-1
8111f44c:	b807883a 	mov	r3,r23
8111f450:	288a703a 	and	r5,r5,r2
8111f454:	4025883a 	mov	r18,r8
8111f458:	003e8206 	br	8111ee64 <__reset+0xfb0fee64>

8111f45c <__eqdf2>:
8111f45c:	2804d53a 	srli	r2,r5,20
8111f460:	3806d53a 	srli	r3,r7,20
8111f464:	02000434 	movhi	r8,16
8111f468:	423fffc4 	addi	r8,r8,-1
8111f46c:	1081ffcc 	andi	r2,r2,2047
8111f470:	0281ffc4 	movi	r10,2047
8111f474:	2a12703a 	and	r9,r5,r8
8111f478:	18c1ffcc 	andi	r3,r3,2047
8111f47c:	3a10703a 	and	r8,r7,r8
8111f480:	280ad7fa 	srli	r5,r5,31
8111f484:	380ed7fa 	srli	r7,r7,31
8111f488:	12801026 	beq	r2,r10,8111f4cc <__eqdf2+0x70>
8111f48c:	0281ffc4 	movi	r10,2047
8111f490:	1a800a26 	beq	r3,r10,8111f4bc <__eqdf2+0x60>
8111f494:	10c00226 	beq	r2,r3,8111f4a0 <__eqdf2+0x44>
8111f498:	00800044 	movi	r2,1
8111f49c:	f800283a 	ret
8111f4a0:	4a3ffd1e 	bne	r9,r8,8111f498 <__reset+0xfb0ff498>
8111f4a4:	21bffc1e 	bne	r4,r6,8111f498 <__reset+0xfb0ff498>
8111f4a8:	29c00c26 	beq	r5,r7,8111f4dc <__eqdf2+0x80>
8111f4ac:	103ffa1e 	bne	r2,zero,8111f498 <__reset+0xfb0ff498>
8111f4b0:	2244b03a 	or	r2,r4,r9
8111f4b4:	1004c03a 	cmpne	r2,r2,zero
8111f4b8:	f800283a 	ret
8111f4bc:	3214b03a 	or	r10,r6,r8
8111f4c0:	503ff426 	beq	r10,zero,8111f494 <__reset+0xfb0ff494>
8111f4c4:	00800044 	movi	r2,1
8111f4c8:	f800283a 	ret
8111f4cc:	2254b03a 	or	r10,r4,r9
8111f4d0:	503fee26 	beq	r10,zero,8111f48c <__reset+0xfb0ff48c>
8111f4d4:	00800044 	movi	r2,1
8111f4d8:	f800283a 	ret
8111f4dc:	0005883a 	mov	r2,zero
8111f4e0:	f800283a 	ret

8111f4e4 <__gedf2>:
8111f4e4:	2804d53a 	srli	r2,r5,20
8111f4e8:	3806d53a 	srli	r3,r7,20
8111f4ec:	02000434 	movhi	r8,16
8111f4f0:	423fffc4 	addi	r8,r8,-1
8111f4f4:	1081ffcc 	andi	r2,r2,2047
8111f4f8:	0241ffc4 	movi	r9,2047
8111f4fc:	2a14703a 	and	r10,r5,r8
8111f500:	18c1ffcc 	andi	r3,r3,2047
8111f504:	3a10703a 	and	r8,r7,r8
8111f508:	280ad7fa 	srli	r5,r5,31
8111f50c:	380ed7fa 	srli	r7,r7,31
8111f510:	12401d26 	beq	r2,r9,8111f588 <__gedf2+0xa4>
8111f514:	0241ffc4 	movi	r9,2047
8111f518:	1a401226 	beq	r3,r9,8111f564 <__gedf2+0x80>
8111f51c:	1000081e 	bne	r2,zero,8111f540 <__gedf2+0x5c>
8111f520:	2296b03a 	or	r11,r4,r10
8111f524:	5813003a 	cmpeq	r9,r11,zero
8111f528:	1800091e 	bne	r3,zero,8111f550 <__gedf2+0x6c>
8111f52c:	3218b03a 	or	r12,r6,r8
8111f530:	6000071e 	bne	r12,zero,8111f550 <__gedf2+0x6c>
8111f534:	0005883a 	mov	r2,zero
8111f538:	5800101e 	bne	r11,zero,8111f57c <__gedf2+0x98>
8111f53c:	f800283a 	ret
8111f540:	18000c1e 	bne	r3,zero,8111f574 <__gedf2+0x90>
8111f544:	3212b03a 	or	r9,r6,r8
8111f548:	48000c26 	beq	r9,zero,8111f57c <__gedf2+0x98>
8111f54c:	0013883a 	mov	r9,zero
8111f550:	39c03fcc 	andi	r7,r7,255
8111f554:	48000826 	beq	r9,zero,8111f578 <__gedf2+0x94>
8111f558:	38000926 	beq	r7,zero,8111f580 <__gedf2+0x9c>
8111f55c:	00800044 	movi	r2,1
8111f560:	f800283a 	ret
8111f564:	3212b03a 	or	r9,r6,r8
8111f568:	483fec26 	beq	r9,zero,8111f51c <__reset+0xfb0ff51c>
8111f56c:	00bfff84 	movi	r2,-2
8111f570:	f800283a 	ret
8111f574:	39c03fcc 	andi	r7,r7,255
8111f578:	29c00626 	beq	r5,r7,8111f594 <__gedf2+0xb0>
8111f57c:	283ff726 	beq	r5,zero,8111f55c <__reset+0xfb0ff55c>
8111f580:	00bfffc4 	movi	r2,-1
8111f584:	f800283a 	ret
8111f588:	2292b03a 	or	r9,r4,r10
8111f58c:	483fe126 	beq	r9,zero,8111f514 <__reset+0xfb0ff514>
8111f590:	003ff606 	br	8111f56c <__reset+0xfb0ff56c>
8111f594:	18bff916 	blt	r3,r2,8111f57c <__reset+0xfb0ff57c>
8111f598:	10c00316 	blt	r2,r3,8111f5a8 <__gedf2+0xc4>
8111f59c:	42bff736 	bltu	r8,r10,8111f57c <__reset+0xfb0ff57c>
8111f5a0:	52000326 	beq	r10,r8,8111f5b0 <__gedf2+0xcc>
8111f5a4:	5200042e 	bgeu	r10,r8,8111f5b8 <__gedf2+0xd4>
8111f5a8:	283fec1e 	bne	r5,zero,8111f55c <__reset+0xfb0ff55c>
8111f5ac:	003ff406 	br	8111f580 <__reset+0xfb0ff580>
8111f5b0:	313ff236 	bltu	r6,r4,8111f57c <__reset+0xfb0ff57c>
8111f5b4:	21bffc36 	bltu	r4,r6,8111f5a8 <__reset+0xfb0ff5a8>
8111f5b8:	0005883a 	mov	r2,zero
8111f5bc:	f800283a 	ret

8111f5c0 <__ledf2>:
8111f5c0:	2804d53a 	srli	r2,r5,20
8111f5c4:	3810d53a 	srli	r8,r7,20
8111f5c8:	00c00434 	movhi	r3,16
8111f5cc:	18ffffc4 	addi	r3,r3,-1
8111f5d0:	1081ffcc 	andi	r2,r2,2047
8111f5d4:	0241ffc4 	movi	r9,2047
8111f5d8:	28d4703a 	and	r10,r5,r3
8111f5dc:	4201ffcc 	andi	r8,r8,2047
8111f5e0:	38c6703a 	and	r3,r7,r3
8111f5e4:	280ad7fa 	srli	r5,r5,31
8111f5e8:	380ed7fa 	srli	r7,r7,31
8111f5ec:	12401f26 	beq	r2,r9,8111f66c <__ledf2+0xac>
8111f5f0:	0241ffc4 	movi	r9,2047
8111f5f4:	42401426 	beq	r8,r9,8111f648 <__ledf2+0x88>
8111f5f8:	1000091e 	bne	r2,zero,8111f620 <__ledf2+0x60>
8111f5fc:	2296b03a 	or	r11,r4,r10
8111f600:	5813003a 	cmpeq	r9,r11,zero
8111f604:	29403fcc 	andi	r5,r5,255
8111f608:	40000a1e 	bne	r8,zero,8111f634 <__ledf2+0x74>
8111f60c:	30d8b03a 	or	r12,r6,r3
8111f610:	6000081e 	bne	r12,zero,8111f634 <__ledf2+0x74>
8111f614:	0005883a 	mov	r2,zero
8111f618:	5800111e 	bne	r11,zero,8111f660 <__ledf2+0xa0>
8111f61c:	f800283a 	ret
8111f620:	29403fcc 	andi	r5,r5,255
8111f624:	40000c1e 	bne	r8,zero,8111f658 <__ledf2+0x98>
8111f628:	30d2b03a 	or	r9,r6,r3
8111f62c:	48000c26 	beq	r9,zero,8111f660 <__ledf2+0xa0>
8111f630:	0013883a 	mov	r9,zero
8111f634:	39c03fcc 	andi	r7,r7,255
8111f638:	48000826 	beq	r9,zero,8111f65c <__ledf2+0x9c>
8111f63c:	38001126 	beq	r7,zero,8111f684 <__ledf2+0xc4>
8111f640:	00800044 	movi	r2,1
8111f644:	f800283a 	ret
8111f648:	30d2b03a 	or	r9,r6,r3
8111f64c:	483fea26 	beq	r9,zero,8111f5f8 <__reset+0xfb0ff5f8>
8111f650:	00800084 	movi	r2,2
8111f654:	f800283a 	ret
8111f658:	39c03fcc 	andi	r7,r7,255
8111f65c:	39400726 	beq	r7,r5,8111f67c <__ledf2+0xbc>
8111f660:	2800081e 	bne	r5,zero,8111f684 <__ledf2+0xc4>
8111f664:	00800044 	movi	r2,1
8111f668:	f800283a 	ret
8111f66c:	2292b03a 	or	r9,r4,r10
8111f670:	483fdf26 	beq	r9,zero,8111f5f0 <__reset+0xfb0ff5f0>
8111f674:	00800084 	movi	r2,2
8111f678:	f800283a 	ret
8111f67c:	4080030e 	bge	r8,r2,8111f68c <__ledf2+0xcc>
8111f680:	383fef26 	beq	r7,zero,8111f640 <__reset+0xfb0ff640>
8111f684:	00bfffc4 	movi	r2,-1
8111f688:	f800283a 	ret
8111f68c:	123feb16 	blt	r2,r8,8111f63c <__reset+0xfb0ff63c>
8111f690:	1abff336 	bltu	r3,r10,8111f660 <__reset+0xfb0ff660>
8111f694:	50c00326 	beq	r10,r3,8111f6a4 <__ledf2+0xe4>
8111f698:	50c0042e 	bgeu	r10,r3,8111f6ac <__ledf2+0xec>
8111f69c:	283fe81e 	bne	r5,zero,8111f640 <__reset+0xfb0ff640>
8111f6a0:	003ff806 	br	8111f684 <__reset+0xfb0ff684>
8111f6a4:	313fee36 	bltu	r6,r4,8111f660 <__reset+0xfb0ff660>
8111f6a8:	21bffc36 	bltu	r4,r6,8111f69c <__reset+0xfb0ff69c>
8111f6ac:	0005883a 	mov	r2,zero
8111f6b0:	f800283a 	ret

8111f6b4 <__subdf3>:
8111f6b4:	02000434 	movhi	r8,16
8111f6b8:	423fffc4 	addi	r8,r8,-1
8111f6bc:	defffb04 	addi	sp,sp,-20
8111f6c0:	2a14703a 	and	r10,r5,r8
8111f6c4:	3812d53a 	srli	r9,r7,20
8111f6c8:	3a10703a 	and	r8,r7,r8
8111f6cc:	2006d77a 	srli	r3,r4,29
8111f6d0:	3004d77a 	srli	r2,r6,29
8111f6d4:	dc000015 	stw	r16,0(sp)
8111f6d8:	501490fa 	slli	r10,r10,3
8111f6dc:	2820d53a 	srli	r16,r5,20
8111f6e0:	401090fa 	slli	r8,r8,3
8111f6e4:	dc800215 	stw	r18,8(sp)
8111f6e8:	dc400115 	stw	r17,4(sp)
8111f6ec:	dfc00415 	stw	ra,16(sp)
8111f6f0:	202290fa 	slli	r17,r4,3
8111f6f4:	dcc00315 	stw	r19,12(sp)
8111f6f8:	4a41ffcc 	andi	r9,r9,2047
8111f6fc:	0101ffc4 	movi	r4,2047
8111f700:	2824d7fa 	srli	r18,r5,31
8111f704:	8401ffcc 	andi	r16,r16,2047
8111f708:	50c6b03a 	or	r3,r10,r3
8111f70c:	380ed7fa 	srli	r7,r7,31
8111f710:	408ab03a 	or	r5,r8,r2
8111f714:	300c90fa 	slli	r6,r6,3
8111f718:	49009626 	beq	r9,r4,8111f974 <__subdf3+0x2c0>
8111f71c:	39c0005c 	xori	r7,r7,1
8111f720:	8245c83a 	sub	r2,r16,r9
8111f724:	3c807426 	beq	r7,r18,8111f8f8 <__subdf3+0x244>
8111f728:	0080af0e 	bge	zero,r2,8111f9e8 <__subdf3+0x334>
8111f72c:	48002a1e 	bne	r9,zero,8111f7d8 <__subdf3+0x124>
8111f730:	2988b03a 	or	r4,r5,r6
8111f734:	20009a1e 	bne	r4,zero,8111f9a0 <__subdf3+0x2ec>
8111f738:	888001cc 	andi	r2,r17,7
8111f73c:	10000726 	beq	r2,zero,8111f75c <__subdf3+0xa8>
8111f740:	888003cc 	andi	r2,r17,15
8111f744:	01000104 	movi	r4,4
8111f748:	11000426 	beq	r2,r4,8111f75c <__subdf3+0xa8>
8111f74c:	890b883a 	add	r5,r17,r4
8111f750:	2c63803a 	cmpltu	r17,r5,r17
8111f754:	1c47883a 	add	r3,r3,r17
8111f758:	2823883a 	mov	r17,r5
8111f75c:	1880202c 	andhi	r2,r3,128
8111f760:	10005926 	beq	r2,zero,8111f8c8 <__subdf3+0x214>
8111f764:	84000044 	addi	r16,r16,1
8111f768:	0081ffc4 	movi	r2,2047
8111f76c:	8080be26 	beq	r16,r2,8111fa68 <__subdf3+0x3b4>
8111f770:	017fe034 	movhi	r5,65408
8111f774:	297fffc4 	addi	r5,r5,-1
8111f778:	1946703a 	and	r3,r3,r5
8111f77c:	1804977a 	slli	r2,r3,29
8111f780:	1806927a 	slli	r3,r3,9
8111f784:	8822d0fa 	srli	r17,r17,3
8111f788:	8401ffcc 	andi	r16,r16,2047
8111f78c:	180ad33a 	srli	r5,r3,12
8111f790:	9100004c 	andi	r4,r18,1
8111f794:	1444b03a 	or	r2,r2,r17
8111f798:	80c1ffcc 	andi	r3,r16,2047
8111f79c:	1820953a 	slli	r16,r3,20
8111f7a0:	20c03fcc 	andi	r3,r4,255
8111f7a4:	180897fa 	slli	r4,r3,31
8111f7a8:	00c00434 	movhi	r3,16
8111f7ac:	18ffffc4 	addi	r3,r3,-1
8111f7b0:	28c6703a 	and	r3,r5,r3
8111f7b4:	1c06b03a 	or	r3,r3,r16
8111f7b8:	1906b03a 	or	r3,r3,r4
8111f7bc:	dfc00417 	ldw	ra,16(sp)
8111f7c0:	dcc00317 	ldw	r19,12(sp)
8111f7c4:	dc800217 	ldw	r18,8(sp)
8111f7c8:	dc400117 	ldw	r17,4(sp)
8111f7cc:	dc000017 	ldw	r16,0(sp)
8111f7d0:	dec00504 	addi	sp,sp,20
8111f7d4:	f800283a 	ret
8111f7d8:	0101ffc4 	movi	r4,2047
8111f7dc:	813fd626 	beq	r16,r4,8111f738 <__reset+0xfb0ff738>
8111f7e0:	29402034 	orhi	r5,r5,128
8111f7e4:	01000e04 	movi	r4,56
8111f7e8:	2080a316 	blt	r4,r2,8111fa78 <__subdf3+0x3c4>
8111f7ec:	010007c4 	movi	r4,31
8111f7f0:	2080c616 	blt	r4,r2,8111fb0c <__subdf3+0x458>
8111f7f4:	01000804 	movi	r4,32
8111f7f8:	2089c83a 	sub	r4,r4,r2
8111f7fc:	2910983a 	sll	r8,r5,r4
8111f800:	308ed83a 	srl	r7,r6,r2
8111f804:	3108983a 	sll	r4,r6,r4
8111f808:	2884d83a 	srl	r2,r5,r2
8111f80c:	41ccb03a 	or	r6,r8,r7
8111f810:	2008c03a 	cmpne	r4,r4,zero
8111f814:	310cb03a 	or	r6,r6,r4
8111f818:	898dc83a 	sub	r6,r17,r6
8111f81c:	89a3803a 	cmpltu	r17,r17,r6
8111f820:	1887c83a 	sub	r3,r3,r2
8111f824:	1c47c83a 	sub	r3,r3,r17
8111f828:	3023883a 	mov	r17,r6
8111f82c:	1880202c 	andhi	r2,r3,128
8111f830:	10002326 	beq	r2,zero,8111f8c0 <__subdf3+0x20c>
8111f834:	04c02034 	movhi	r19,128
8111f838:	9cffffc4 	addi	r19,r19,-1
8111f83c:	1ce6703a 	and	r19,r3,r19
8111f840:	98007a26 	beq	r19,zero,8111fa2c <__subdf3+0x378>
8111f844:	9809883a 	mov	r4,r19
8111f848:	110fef00 	call	8110fef0 <__clzsi2>
8111f84c:	113ffe04 	addi	r4,r2,-8
8111f850:	00c007c4 	movi	r3,31
8111f854:	19007b16 	blt	r3,r4,8111fa44 <__subdf3+0x390>
8111f858:	00800804 	movi	r2,32
8111f85c:	1105c83a 	sub	r2,r2,r4
8111f860:	8884d83a 	srl	r2,r17,r2
8111f864:	9906983a 	sll	r3,r19,r4
8111f868:	8922983a 	sll	r17,r17,r4
8111f86c:	10c4b03a 	or	r2,r2,r3
8111f870:	24007816 	blt	r4,r16,8111fa54 <__subdf3+0x3a0>
8111f874:	2421c83a 	sub	r16,r4,r16
8111f878:	80c00044 	addi	r3,r16,1
8111f87c:	010007c4 	movi	r4,31
8111f880:	20c09516 	blt	r4,r3,8111fad8 <__subdf3+0x424>
8111f884:	01400804 	movi	r5,32
8111f888:	28cbc83a 	sub	r5,r5,r3
8111f88c:	88c8d83a 	srl	r4,r17,r3
8111f890:	8962983a 	sll	r17,r17,r5
8111f894:	114a983a 	sll	r5,r2,r5
8111f898:	10c6d83a 	srl	r3,r2,r3
8111f89c:	8804c03a 	cmpne	r2,r17,zero
8111f8a0:	290ab03a 	or	r5,r5,r4
8111f8a4:	28a2b03a 	or	r17,r5,r2
8111f8a8:	0021883a 	mov	r16,zero
8111f8ac:	003fa206 	br	8111f738 <__reset+0xfb0ff738>
8111f8b0:	2090b03a 	or	r8,r4,r2
8111f8b4:	40018e26 	beq	r8,zero,8111fef0 <__subdf3+0x83c>
8111f8b8:	1007883a 	mov	r3,r2
8111f8bc:	2023883a 	mov	r17,r4
8111f8c0:	888001cc 	andi	r2,r17,7
8111f8c4:	103f9e1e 	bne	r2,zero,8111f740 <__reset+0xfb0ff740>
8111f8c8:	1804977a 	slli	r2,r3,29
8111f8cc:	8822d0fa 	srli	r17,r17,3
8111f8d0:	1810d0fa 	srli	r8,r3,3
8111f8d4:	9100004c 	andi	r4,r18,1
8111f8d8:	1444b03a 	or	r2,r2,r17
8111f8dc:	00c1ffc4 	movi	r3,2047
8111f8e0:	80c02826 	beq	r16,r3,8111f984 <__subdf3+0x2d0>
8111f8e4:	01400434 	movhi	r5,16
8111f8e8:	297fffc4 	addi	r5,r5,-1
8111f8ec:	80e0703a 	and	r16,r16,r3
8111f8f0:	414a703a 	and	r5,r8,r5
8111f8f4:	003fa806 	br	8111f798 <__reset+0xfb0ff798>
8111f8f8:	0080630e 	bge	zero,r2,8111fa88 <__subdf3+0x3d4>
8111f8fc:	48003026 	beq	r9,zero,8111f9c0 <__subdf3+0x30c>
8111f900:	0101ffc4 	movi	r4,2047
8111f904:	813f8c26 	beq	r16,r4,8111f738 <__reset+0xfb0ff738>
8111f908:	29402034 	orhi	r5,r5,128
8111f90c:	01000e04 	movi	r4,56
8111f910:	2080a90e 	bge	r4,r2,8111fbb8 <__subdf3+0x504>
8111f914:	298cb03a 	or	r6,r5,r6
8111f918:	3012c03a 	cmpne	r9,r6,zero
8111f91c:	0005883a 	mov	r2,zero
8111f920:	4c53883a 	add	r9,r9,r17
8111f924:	4c63803a 	cmpltu	r17,r9,r17
8111f928:	10c7883a 	add	r3,r2,r3
8111f92c:	88c7883a 	add	r3,r17,r3
8111f930:	4823883a 	mov	r17,r9
8111f934:	1880202c 	andhi	r2,r3,128
8111f938:	1000d026 	beq	r2,zero,8111fc7c <__subdf3+0x5c8>
8111f93c:	84000044 	addi	r16,r16,1
8111f940:	0081ffc4 	movi	r2,2047
8111f944:	8080fe26 	beq	r16,r2,8111fd40 <__subdf3+0x68c>
8111f948:	00bfe034 	movhi	r2,65408
8111f94c:	10bfffc4 	addi	r2,r2,-1
8111f950:	1886703a 	and	r3,r3,r2
8111f954:	880ad07a 	srli	r5,r17,1
8111f958:	180497fa 	slli	r2,r3,31
8111f95c:	8900004c 	andi	r4,r17,1
8111f960:	2922b03a 	or	r17,r5,r4
8111f964:	1806d07a 	srli	r3,r3,1
8111f968:	1462b03a 	or	r17,r2,r17
8111f96c:	3825883a 	mov	r18,r7
8111f970:	003f7106 	br	8111f738 <__reset+0xfb0ff738>
8111f974:	2984b03a 	or	r2,r5,r6
8111f978:	103f6826 	beq	r2,zero,8111f71c <__reset+0xfb0ff71c>
8111f97c:	39c03fcc 	andi	r7,r7,255
8111f980:	003f6706 	br	8111f720 <__reset+0xfb0ff720>
8111f984:	4086b03a 	or	r3,r8,r2
8111f988:	18015226 	beq	r3,zero,8111fed4 <__subdf3+0x820>
8111f98c:	00c00434 	movhi	r3,16
8111f990:	41400234 	orhi	r5,r8,8
8111f994:	18ffffc4 	addi	r3,r3,-1
8111f998:	28ca703a 	and	r5,r5,r3
8111f99c:	003f7e06 	br	8111f798 <__reset+0xfb0ff798>
8111f9a0:	10bfffc4 	addi	r2,r2,-1
8111f9a4:	1000491e 	bne	r2,zero,8111facc <__subdf3+0x418>
8111f9a8:	898fc83a 	sub	r7,r17,r6
8111f9ac:	89e3803a 	cmpltu	r17,r17,r7
8111f9b0:	1947c83a 	sub	r3,r3,r5
8111f9b4:	1c47c83a 	sub	r3,r3,r17
8111f9b8:	3823883a 	mov	r17,r7
8111f9bc:	003f9b06 	br	8111f82c <__reset+0xfb0ff82c>
8111f9c0:	2988b03a 	or	r4,r5,r6
8111f9c4:	203f5c26 	beq	r4,zero,8111f738 <__reset+0xfb0ff738>
8111f9c8:	10bfffc4 	addi	r2,r2,-1
8111f9cc:	1000931e 	bne	r2,zero,8111fc1c <__subdf3+0x568>
8111f9d0:	898d883a 	add	r6,r17,r6
8111f9d4:	3463803a 	cmpltu	r17,r6,r17
8111f9d8:	1947883a 	add	r3,r3,r5
8111f9dc:	88c7883a 	add	r3,r17,r3
8111f9e0:	3023883a 	mov	r17,r6
8111f9e4:	003fd306 	br	8111f934 <__reset+0xfb0ff934>
8111f9e8:	1000541e 	bne	r2,zero,8111fb3c <__subdf3+0x488>
8111f9ec:	80800044 	addi	r2,r16,1
8111f9f0:	1081ffcc 	andi	r2,r2,2047
8111f9f4:	01000044 	movi	r4,1
8111f9f8:	2080a20e 	bge	r4,r2,8111fc84 <__subdf3+0x5d0>
8111f9fc:	8989c83a 	sub	r4,r17,r6
8111fa00:	8905803a 	cmpltu	r2,r17,r4
8111fa04:	1967c83a 	sub	r19,r3,r5
8111fa08:	98a7c83a 	sub	r19,r19,r2
8111fa0c:	9880202c 	andhi	r2,r19,128
8111fa10:	10006326 	beq	r2,zero,8111fba0 <__subdf3+0x4ec>
8111fa14:	3463c83a 	sub	r17,r6,r17
8111fa18:	28c7c83a 	sub	r3,r5,r3
8111fa1c:	344d803a 	cmpltu	r6,r6,r17
8111fa20:	19a7c83a 	sub	r19,r3,r6
8111fa24:	3825883a 	mov	r18,r7
8111fa28:	983f861e 	bne	r19,zero,8111f844 <__reset+0xfb0ff844>
8111fa2c:	8809883a 	mov	r4,r17
8111fa30:	110fef00 	call	8110fef0 <__clzsi2>
8111fa34:	10800804 	addi	r2,r2,32
8111fa38:	113ffe04 	addi	r4,r2,-8
8111fa3c:	00c007c4 	movi	r3,31
8111fa40:	193f850e 	bge	r3,r4,8111f858 <__reset+0xfb0ff858>
8111fa44:	10bff604 	addi	r2,r2,-40
8111fa48:	8884983a 	sll	r2,r17,r2
8111fa4c:	0023883a 	mov	r17,zero
8111fa50:	243f880e 	bge	r4,r16,8111f874 <__reset+0xfb0ff874>
8111fa54:	00ffe034 	movhi	r3,65408
8111fa58:	18ffffc4 	addi	r3,r3,-1
8111fa5c:	8121c83a 	sub	r16,r16,r4
8111fa60:	10c6703a 	and	r3,r2,r3
8111fa64:	003f3406 	br	8111f738 <__reset+0xfb0ff738>
8111fa68:	9100004c 	andi	r4,r18,1
8111fa6c:	000b883a 	mov	r5,zero
8111fa70:	0005883a 	mov	r2,zero
8111fa74:	003f4806 	br	8111f798 <__reset+0xfb0ff798>
8111fa78:	298cb03a 	or	r6,r5,r6
8111fa7c:	300cc03a 	cmpne	r6,r6,zero
8111fa80:	0005883a 	mov	r2,zero
8111fa84:	003f6406 	br	8111f818 <__reset+0xfb0ff818>
8111fa88:	10009a1e 	bne	r2,zero,8111fcf4 <__subdf3+0x640>
8111fa8c:	82400044 	addi	r9,r16,1
8111fa90:	4881ffcc 	andi	r2,r9,2047
8111fa94:	02800044 	movi	r10,1
8111fa98:	5080670e 	bge	r10,r2,8111fc38 <__subdf3+0x584>
8111fa9c:	0081ffc4 	movi	r2,2047
8111faa0:	4880af26 	beq	r9,r2,8111fd60 <__subdf3+0x6ac>
8111faa4:	898d883a 	add	r6,r17,r6
8111faa8:	1945883a 	add	r2,r3,r5
8111faac:	3447803a 	cmpltu	r3,r6,r17
8111fab0:	1887883a 	add	r3,r3,r2
8111fab4:	182297fa 	slli	r17,r3,31
8111fab8:	300cd07a 	srli	r6,r6,1
8111fabc:	1806d07a 	srli	r3,r3,1
8111fac0:	4821883a 	mov	r16,r9
8111fac4:	89a2b03a 	or	r17,r17,r6
8111fac8:	003f1b06 	br	8111f738 <__reset+0xfb0ff738>
8111facc:	0101ffc4 	movi	r4,2047
8111fad0:	813f441e 	bne	r16,r4,8111f7e4 <__reset+0xfb0ff7e4>
8111fad4:	003f1806 	br	8111f738 <__reset+0xfb0ff738>
8111fad8:	843ff844 	addi	r16,r16,-31
8111fadc:	01400804 	movi	r5,32
8111fae0:	1408d83a 	srl	r4,r2,r16
8111fae4:	19405026 	beq	r3,r5,8111fc28 <__subdf3+0x574>
8111fae8:	01401004 	movi	r5,64
8111faec:	28c7c83a 	sub	r3,r5,r3
8111faf0:	10c4983a 	sll	r2,r2,r3
8111faf4:	88a2b03a 	or	r17,r17,r2
8111faf8:	8822c03a 	cmpne	r17,r17,zero
8111fafc:	2462b03a 	or	r17,r4,r17
8111fb00:	0007883a 	mov	r3,zero
8111fb04:	0021883a 	mov	r16,zero
8111fb08:	003f6d06 	br	8111f8c0 <__reset+0xfb0ff8c0>
8111fb0c:	11fff804 	addi	r7,r2,-32
8111fb10:	01000804 	movi	r4,32
8111fb14:	29ced83a 	srl	r7,r5,r7
8111fb18:	11004526 	beq	r2,r4,8111fc30 <__subdf3+0x57c>
8111fb1c:	01001004 	movi	r4,64
8111fb20:	2089c83a 	sub	r4,r4,r2
8111fb24:	2904983a 	sll	r2,r5,r4
8111fb28:	118cb03a 	or	r6,r2,r6
8111fb2c:	300cc03a 	cmpne	r6,r6,zero
8111fb30:	398cb03a 	or	r6,r7,r6
8111fb34:	0005883a 	mov	r2,zero
8111fb38:	003f3706 	br	8111f818 <__reset+0xfb0ff818>
8111fb3c:	80002a26 	beq	r16,zero,8111fbe8 <__subdf3+0x534>
8111fb40:	0101ffc4 	movi	r4,2047
8111fb44:	49006626 	beq	r9,r4,8111fce0 <__subdf3+0x62c>
8111fb48:	0085c83a 	sub	r2,zero,r2
8111fb4c:	18c02034 	orhi	r3,r3,128
8111fb50:	01000e04 	movi	r4,56
8111fb54:	20807e16 	blt	r4,r2,8111fd50 <__subdf3+0x69c>
8111fb58:	010007c4 	movi	r4,31
8111fb5c:	2080e716 	blt	r4,r2,8111fefc <__subdf3+0x848>
8111fb60:	01000804 	movi	r4,32
8111fb64:	2089c83a 	sub	r4,r4,r2
8111fb68:	1914983a 	sll	r10,r3,r4
8111fb6c:	8890d83a 	srl	r8,r17,r2
8111fb70:	8908983a 	sll	r4,r17,r4
8111fb74:	1884d83a 	srl	r2,r3,r2
8111fb78:	5222b03a 	or	r17,r10,r8
8111fb7c:	2006c03a 	cmpne	r3,r4,zero
8111fb80:	88e2b03a 	or	r17,r17,r3
8111fb84:	3463c83a 	sub	r17,r6,r17
8111fb88:	2885c83a 	sub	r2,r5,r2
8111fb8c:	344d803a 	cmpltu	r6,r6,r17
8111fb90:	1187c83a 	sub	r3,r2,r6
8111fb94:	4821883a 	mov	r16,r9
8111fb98:	3825883a 	mov	r18,r7
8111fb9c:	003f2306 	br	8111f82c <__reset+0xfb0ff82c>
8111fba0:	24d0b03a 	or	r8,r4,r19
8111fba4:	40001b1e 	bne	r8,zero,8111fc14 <__subdf3+0x560>
8111fba8:	0005883a 	mov	r2,zero
8111fbac:	0009883a 	mov	r4,zero
8111fbb0:	0021883a 	mov	r16,zero
8111fbb4:	003f4906 	br	8111f8dc <__reset+0xfb0ff8dc>
8111fbb8:	010007c4 	movi	r4,31
8111fbbc:	20803a16 	blt	r4,r2,8111fca8 <__subdf3+0x5f4>
8111fbc0:	01000804 	movi	r4,32
8111fbc4:	2089c83a 	sub	r4,r4,r2
8111fbc8:	2912983a 	sll	r9,r5,r4
8111fbcc:	3090d83a 	srl	r8,r6,r2
8111fbd0:	3108983a 	sll	r4,r6,r4
8111fbd4:	2884d83a 	srl	r2,r5,r2
8111fbd8:	4a12b03a 	or	r9,r9,r8
8111fbdc:	2008c03a 	cmpne	r4,r4,zero
8111fbe0:	4912b03a 	or	r9,r9,r4
8111fbe4:	003f4e06 	br	8111f920 <__reset+0xfb0ff920>
8111fbe8:	1c48b03a 	or	r4,r3,r17
8111fbec:	20003c26 	beq	r4,zero,8111fce0 <__subdf3+0x62c>
8111fbf0:	0084303a 	nor	r2,zero,r2
8111fbf4:	1000381e 	bne	r2,zero,8111fcd8 <__subdf3+0x624>
8111fbf8:	3463c83a 	sub	r17,r6,r17
8111fbfc:	28c5c83a 	sub	r2,r5,r3
8111fc00:	344d803a 	cmpltu	r6,r6,r17
8111fc04:	1187c83a 	sub	r3,r2,r6
8111fc08:	4821883a 	mov	r16,r9
8111fc0c:	3825883a 	mov	r18,r7
8111fc10:	003f0606 	br	8111f82c <__reset+0xfb0ff82c>
8111fc14:	2023883a 	mov	r17,r4
8111fc18:	003f0906 	br	8111f840 <__reset+0xfb0ff840>
8111fc1c:	0101ffc4 	movi	r4,2047
8111fc20:	813f3a1e 	bne	r16,r4,8111f90c <__reset+0xfb0ff90c>
8111fc24:	003ec406 	br	8111f738 <__reset+0xfb0ff738>
8111fc28:	0005883a 	mov	r2,zero
8111fc2c:	003fb106 	br	8111faf4 <__reset+0xfb0ffaf4>
8111fc30:	0005883a 	mov	r2,zero
8111fc34:	003fbc06 	br	8111fb28 <__reset+0xfb0ffb28>
8111fc38:	1c44b03a 	or	r2,r3,r17
8111fc3c:	80008e1e 	bne	r16,zero,8111fe78 <__subdf3+0x7c4>
8111fc40:	1000c826 	beq	r2,zero,8111ff64 <__subdf3+0x8b0>
8111fc44:	2984b03a 	or	r2,r5,r6
8111fc48:	103ebb26 	beq	r2,zero,8111f738 <__reset+0xfb0ff738>
8111fc4c:	8989883a 	add	r4,r17,r6
8111fc50:	1945883a 	add	r2,r3,r5
8111fc54:	2447803a 	cmpltu	r3,r4,r17
8111fc58:	1887883a 	add	r3,r3,r2
8111fc5c:	1880202c 	andhi	r2,r3,128
8111fc60:	2023883a 	mov	r17,r4
8111fc64:	103f1626 	beq	r2,zero,8111f8c0 <__reset+0xfb0ff8c0>
8111fc68:	00bfe034 	movhi	r2,65408
8111fc6c:	10bfffc4 	addi	r2,r2,-1
8111fc70:	5021883a 	mov	r16,r10
8111fc74:	1886703a 	and	r3,r3,r2
8111fc78:	003eaf06 	br	8111f738 <__reset+0xfb0ff738>
8111fc7c:	3825883a 	mov	r18,r7
8111fc80:	003f0f06 	br	8111f8c0 <__reset+0xfb0ff8c0>
8111fc84:	1c44b03a 	or	r2,r3,r17
8111fc88:	8000251e 	bne	r16,zero,8111fd20 <__subdf3+0x66c>
8111fc8c:	1000661e 	bne	r2,zero,8111fe28 <__subdf3+0x774>
8111fc90:	2990b03a 	or	r8,r5,r6
8111fc94:	40009626 	beq	r8,zero,8111fef0 <__subdf3+0x83c>
8111fc98:	2807883a 	mov	r3,r5
8111fc9c:	3023883a 	mov	r17,r6
8111fca0:	3825883a 	mov	r18,r7
8111fca4:	003ea406 	br	8111f738 <__reset+0xfb0ff738>
8111fca8:	127ff804 	addi	r9,r2,-32
8111fcac:	01000804 	movi	r4,32
8111fcb0:	2a52d83a 	srl	r9,r5,r9
8111fcb4:	11008c26 	beq	r2,r4,8111fee8 <__subdf3+0x834>
8111fcb8:	01001004 	movi	r4,64
8111fcbc:	2085c83a 	sub	r2,r4,r2
8111fcc0:	2884983a 	sll	r2,r5,r2
8111fcc4:	118cb03a 	or	r6,r2,r6
8111fcc8:	300cc03a 	cmpne	r6,r6,zero
8111fccc:	4992b03a 	or	r9,r9,r6
8111fcd0:	0005883a 	mov	r2,zero
8111fcd4:	003f1206 	br	8111f920 <__reset+0xfb0ff920>
8111fcd8:	0101ffc4 	movi	r4,2047
8111fcdc:	493f9c1e 	bne	r9,r4,8111fb50 <__reset+0xfb0ffb50>
8111fce0:	2807883a 	mov	r3,r5
8111fce4:	3023883a 	mov	r17,r6
8111fce8:	4821883a 	mov	r16,r9
8111fcec:	3825883a 	mov	r18,r7
8111fcf0:	003e9106 	br	8111f738 <__reset+0xfb0ff738>
8111fcf4:	80001f1e 	bne	r16,zero,8111fd74 <__subdf3+0x6c0>
8111fcf8:	1c48b03a 	or	r4,r3,r17
8111fcfc:	20005a26 	beq	r4,zero,8111fe68 <__subdf3+0x7b4>
8111fd00:	0084303a 	nor	r2,zero,r2
8111fd04:	1000561e 	bne	r2,zero,8111fe60 <__subdf3+0x7ac>
8111fd08:	89a3883a 	add	r17,r17,r6
8111fd0c:	1945883a 	add	r2,r3,r5
8111fd10:	898d803a 	cmpltu	r6,r17,r6
8111fd14:	3087883a 	add	r3,r6,r2
8111fd18:	4821883a 	mov	r16,r9
8111fd1c:	003f0506 	br	8111f934 <__reset+0xfb0ff934>
8111fd20:	10002b1e 	bne	r2,zero,8111fdd0 <__subdf3+0x71c>
8111fd24:	2984b03a 	or	r2,r5,r6
8111fd28:	10008026 	beq	r2,zero,8111ff2c <__subdf3+0x878>
8111fd2c:	2807883a 	mov	r3,r5
8111fd30:	3023883a 	mov	r17,r6
8111fd34:	3825883a 	mov	r18,r7
8111fd38:	0401ffc4 	movi	r16,2047
8111fd3c:	003e7e06 	br	8111f738 <__reset+0xfb0ff738>
8111fd40:	3809883a 	mov	r4,r7
8111fd44:	0011883a 	mov	r8,zero
8111fd48:	0005883a 	mov	r2,zero
8111fd4c:	003ee306 	br	8111f8dc <__reset+0xfb0ff8dc>
8111fd50:	1c62b03a 	or	r17,r3,r17
8111fd54:	8822c03a 	cmpne	r17,r17,zero
8111fd58:	0005883a 	mov	r2,zero
8111fd5c:	003f8906 	br	8111fb84 <__reset+0xfb0ffb84>
8111fd60:	3809883a 	mov	r4,r7
8111fd64:	4821883a 	mov	r16,r9
8111fd68:	0011883a 	mov	r8,zero
8111fd6c:	0005883a 	mov	r2,zero
8111fd70:	003eda06 	br	8111f8dc <__reset+0xfb0ff8dc>
8111fd74:	0101ffc4 	movi	r4,2047
8111fd78:	49003b26 	beq	r9,r4,8111fe68 <__subdf3+0x7b4>
8111fd7c:	0085c83a 	sub	r2,zero,r2
8111fd80:	18c02034 	orhi	r3,r3,128
8111fd84:	01000e04 	movi	r4,56
8111fd88:	20806e16 	blt	r4,r2,8111ff44 <__subdf3+0x890>
8111fd8c:	010007c4 	movi	r4,31
8111fd90:	20807716 	blt	r4,r2,8111ff70 <__subdf3+0x8bc>
8111fd94:	01000804 	movi	r4,32
8111fd98:	2089c83a 	sub	r4,r4,r2
8111fd9c:	1914983a 	sll	r10,r3,r4
8111fda0:	8890d83a 	srl	r8,r17,r2
8111fda4:	8908983a 	sll	r4,r17,r4
8111fda8:	1884d83a 	srl	r2,r3,r2
8111fdac:	5222b03a 	or	r17,r10,r8
8111fdb0:	2006c03a 	cmpne	r3,r4,zero
8111fdb4:	88e2b03a 	or	r17,r17,r3
8111fdb8:	89a3883a 	add	r17,r17,r6
8111fdbc:	1145883a 	add	r2,r2,r5
8111fdc0:	898d803a 	cmpltu	r6,r17,r6
8111fdc4:	3087883a 	add	r3,r6,r2
8111fdc8:	4821883a 	mov	r16,r9
8111fdcc:	003ed906 	br	8111f934 <__reset+0xfb0ff934>
8111fdd0:	2984b03a 	or	r2,r5,r6
8111fdd4:	10004226 	beq	r2,zero,8111fee0 <__subdf3+0x82c>
8111fdd8:	1808d0fa 	srli	r4,r3,3
8111fddc:	8822d0fa 	srli	r17,r17,3
8111fde0:	1806977a 	slli	r3,r3,29
8111fde4:	2080022c 	andhi	r2,r4,8
8111fde8:	1c62b03a 	or	r17,r3,r17
8111fdec:	10000826 	beq	r2,zero,8111fe10 <__subdf3+0x75c>
8111fdf0:	2812d0fa 	srli	r9,r5,3
8111fdf4:	4880022c 	andhi	r2,r9,8
8111fdf8:	1000051e 	bne	r2,zero,8111fe10 <__subdf3+0x75c>
8111fdfc:	300cd0fa 	srli	r6,r6,3
8111fe00:	2804977a 	slli	r2,r5,29
8111fe04:	4809883a 	mov	r4,r9
8111fe08:	3825883a 	mov	r18,r7
8111fe0c:	11a2b03a 	or	r17,r2,r6
8111fe10:	8806d77a 	srli	r3,r17,29
8111fe14:	200890fa 	slli	r4,r4,3
8111fe18:	882290fa 	slli	r17,r17,3
8111fe1c:	0401ffc4 	movi	r16,2047
8111fe20:	1906b03a 	or	r3,r3,r4
8111fe24:	003e4406 	br	8111f738 <__reset+0xfb0ff738>
8111fe28:	2984b03a 	or	r2,r5,r6
8111fe2c:	103e4226 	beq	r2,zero,8111f738 <__reset+0xfb0ff738>
8111fe30:	8989c83a 	sub	r4,r17,r6
8111fe34:	8911803a 	cmpltu	r8,r17,r4
8111fe38:	1945c83a 	sub	r2,r3,r5
8111fe3c:	1205c83a 	sub	r2,r2,r8
8111fe40:	1200202c 	andhi	r8,r2,128
8111fe44:	403e9a26 	beq	r8,zero,8111f8b0 <__reset+0xfb0ff8b0>
8111fe48:	3463c83a 	sub	r17,r6,r17
8111fe4c:	28c5c83a 	sub	r2,r5,r3
8111fe50:	344d803a 	cmpltu	r6,r6,r17
8111fe54:	1187c83a 	sub	r3,r2,r6
8111fe58:	3825883a 	mov	r18,r7
8111fe5c:	003e3606 	br	8111f738 <__reset+0xfb0ff738>
8111fe60:	0101ffc4 	movi	r4,2047
8111fe64:	493fc71e 	bne	r9,r4,8111fd84 <__reset+0xfb0ffd84>
8111fe68:	2807883a 	mov	r3,r5
8111fe6c:	3023883a 	mov	r17,r6
8111fe70:	4821883a 	mov	r16,r9
8111fe74:	003e3006 	br	8111f738 <__reset+0xfb0ff738>
8111fe78:	10003626 	beq	r2,zero,8111ff54 <__subdf3+0x8a0>
8111fe7c:	2984b03a 	or	r2,r5,r6
8111fe80:	10001726 	beq	r2,zero,8111fee0 <__subdf3+0x82c>
8111fe84:	1808d0fa 	srli	r4,r3,3
8111fe88:	8822d0fa 	srli	r17,r17,3
8111fe8c:	1806977a 	slli	r3,r3,29
8111fe90:	2080022c 	andhi	r2,r4,8
8111fe94:	1c62b03a 	or	r17,r3,r17
8111fe98:	10000726 	beq	r2,zero,8111feb8 <__subdf3+0x804>
8111fe9c:	2812d0fa 	srli	r9,r5,3
8111fea0:	4880022c 	andhi	r2,r9,8
8111fea4:	1000041e 	bne	r2,zero,8111feb8 <__subdf3+0x804>
8111fea8:	300cd0fa 	srli	r6,r6,3
8111feac:	2804977a 	slli	r2,r5,29
8111feb0:	4809883a 	mov	r4,r9
8111feb4:	11a2b03a 	or	r17,r2,r6
8111feb8:	8806d77a 	srli	r3,r17,29
8111febc:	200890fa 	slli	r4,r4,3
8111fec0:	882290fa 	slli	r17,r17,3
8111fec4:	3825883a 	mov	r18,r7
8111fec8:	1906b03a 	or	r3,r3,r4
8111fecc:	0401ffc4 	movi	r16,2047
8111fed0:	003e1906 	br	8111f738 <__reset+0xfb0ff738>
8111fed4:	000b883a 	mov	r5,zero
8111fed8:	0005883a 	mov	r2,zero
8111fedc:	003e2e06 	br	8111f798 <__reset+0xfb0ff798>
8111fee0:	0401ffc4 	movi	r16,2047
8111fee4:	003e1406 	br	8111f738 <__reset+0xfb0ff738>
8111fee8:	0005883a 	mov	r2,zero
8111feec:	003f7506 	br	8111fcc4 <__reset+0xfb0ffcc4>
8111fef0:	0005883a 	mov	r2,zero
8111fef4:	0009883a 	mov	r4,zero
8111fef8:	003e7806 	br	8111f8dc <__reset+0xfb0ff8dc>
8111fefc:	123ff804 	addi	r8,r2,-32
8111ff00:	01000804 	movi	r4,32
8111ff04:	1a10d83a 	srl	r8,r3,r8
8111ff08:	11002526 	beq	r2,r4,8111ffa0 <__subdf3+0x8ec>
8111ff0c:	01001004 	movi	r4,64
8111ff10:	2085c83a 	sub	r2,r4,r2
8111ff14:	1884983a 	sll	r2,r3,r2
8111ff18:	1444b03a 	or	r2,r2,r17
8111ff1c:	1004c03a 	cmpne	r2,r2,zero
8111ff20:	40a2b03a 	or	r17,r8,r2
8111ff24:	0005883a 	mov	r2,zero
8111ff28:	003f1606 	br	8111fb84 <__reset+0xfb0ffb84>
8111ff2c:	02000434 	movhi	r8,16
8111ff30:	0009883a 	mov	r4,zero
8111ff34:	423fffc4 	addi	r8,r8,-1
8111ff38:	00bfffc4 	movi	r2,-1
8111ff3c:	0401ffc4 	movi	r16,2047
8111ff40:	003e6606 	br	8111f8dc <__reset+0xfb0ff8dc>
8111ff44:	1c62b03a 	or	r17,r3,r17
8111ff48:	8822c03a 	cmpne	r17,r17,zero
8111ff4c:	0005883a 	mov	r2,zero
8111ff50:	003f9906 	br	8111fdb8 <__reset+0xfb0ffdb8>
8111ff54:	2807883a 	mov	r3,r5
8111ff58:	3023883a 	mov	r17,r6
8111ff5c:	0401ffc4 	movi	r16,2047
8111ff60:	003df506 	br	8111f738 <__reset+0xfb0ff738>
8111ff64:	2807883a 	mov	r3,r5
8111ff68:	3023883a 	mov	r17,r6
8111ff6c:	003df206 	br	8111f738 <__reset+0xfb0ff738>
8111ff70:	123ff804 	addi	r8,r2,-32
8111ff74:	01000804 	movi	r4,32
8111ff78:	1a10d83a 	srl	r8,r3,r8
8111ff7c:	11000a26 	beq	r2,r4,8111ffa8 <__subdf3+0x8f4>
8111ff80:	01001004 	movi	r4,64
8111ff84:	2085c83a 	sub	r2,r4,r2
8111ff88:	1884983a 	sll	r2,r3,r2
8111ff8c:	1444b03a 	or	r2,r2,r17
8111ff90:	1004c03a 	cmpne	r2,r2,zero
8111ff94:	40a2b03a 	or	r17,r8,r2
8111ff98:	0005883a 	mov	r2,zero
8111ff9c:	003f8606 	br	8111fdb8 <__reset+0xfb0ffdb8>
8111ffa0:	0005883a 	mov	r2,zero
8111ffa4:	003fdc06 	br	8111ff18 <__reset+0xfb0fff18>
8111ffa8:	0005883a 	mov	r2,zero
8111ffac:	003ff706 	br	8111ff8c <__reset+0xfb0fff8c>

8111ffb0 <__fixdfsi>:
8111ffb0:	280cd53a 	srli	r6,r5,20
8111ffb4:	00c00434 	movhi	r3,16
8111ffb8:	18ffffc4 	addi	r3,r3,-1
8111ffbc:	3181ffcc 	andi	r6,r6,2047
8111ffc0:	01c0ff84 	movi	r7,1022
8111ffc4:	28c6703a 	and	r3,r5,r3
8111ffc8:	280ad7fa 	srli	r5,r5,31
8111ffcc:	3980120e 	bge	r7,r6,81120018 <__fixdfsi+0x68>
8111ffd0:	00810744 	movi	r2,1053
8111ffd4:	11800c16 	blt	r2,r6,81120008 <__fixdfsi+0x58>
8111ffd8:	00810cc4 	movi	r2,1075
8111ffdc:	1185c83a 	sub	r2,r2,r6
8111ffe0:	01c007c4 	movi	r7,31
8111ffe4:	18c00434 	orhi	r3,r3,16
8111ffe8:	38800d16 	blt	r7,r2,81120020 <__fixdfsi+0x70>
8111ffec:	31befb44 	addi	r6,r6,-1043
8111fff0:	2084d83a 	srl	r2,r4,r2
8111fff4:	1986983a 	sll	r3,r3,r6
8111fff8:	1884b03a 	or	r2,r3,r2
8111fffc:	28000726 	beq	r5,zero,8112001c <__fixdfsi+0x6c>
81120000:	0085c83a 	sub	r2,zero,r2
81120004:	f800283a 	ret
81120008:	00a00034 	movhi	r2,32768
8112000c:	10bfffc4 	addi	r2,r2,-1
81120010:	2885883a 	add	r2,r5,r2
81120014:	f800283a 	ret
81120018:	0005883a 	mov	r2,zero
8112001c:	f800283a 	ret
81120020:	008104c4 	movi	r2,1043
81120024:	1185c83a 	sub	r2,r2,r6
81120028:	1884d83a 	srl	r2,r3,r2
8112002c:	003ff306 	br	8111fffc <__reset+0xfb0ffffc>

81120030 <__floatsidf>:
81120030:	defffd04 	addi	sp,sp,-12
81120034:	dfc00215 	stw	ra,8(sp)
81120038:	dc400115 	stw	r17,4(sp)
8112003c:	dc000015 	stw	r16,0(sp)
81120040:	20002b26 	beq	r4,zero,811200f0 <__floatsidf+0xc0>
81120044:	2023883a 	mov	r17,r4
81120048:	2020d7fa 	srli	r16,r4,31
8112004c:	20002d16 	blt	r4,zero,81120104 <__floatsidf+0xd4>
81120050:	8809883a 	mov	r4,r17
81120054:	110fef00 	call	8110fef0 <__clzsi2>
81120058:	01410784 	movi	r5,1054
8112005c:	288bc83a 	sub	r5,r5,r2
81120060:	01010cc4 	movi	r4,1075
81120064:	2149c83a 	sub	r4,r4,r5
81120068:	00c007c4 	movi	r3,31
8112006c:	1900160e 	bge	r3,r4,811200c8 <__floatsidf+0x98>
81120070:	00c104c4 	movi	r3,1043
81120074:	1947c83a 	sub	r3,r3,r5
81120078:	88c6983a 	sll	r3,r17,r3
8112007c:	00800434 	movhi	r2,16
81120080:	10bfffc4 	addi	r2,r2,-1
81120084:	1886703a 	and	r3,r3,r2
81120088:	2941ffcc 	andi	r5,r5,2047
8112008c:	800d883a 	mov	r6,r16
81120090:	0005883a 	mov	r2,zero
81120094:	280a953a 	slli	r5,r5,20
81120098:	31803fcc 	andi	r6,r6,255
8112009c:	01000434 	movhi	r4,16
811200a0:	300c97fa 	slli	r6,r6,31
811200a4:	213fffc4 	addi	r4,r4,-1
811200a8:	1906703a 	and	r3,r3,r4
811200ac:	1946b03a 	or	r3,r3,r5
811200b0:	1986b03a 	or	r3,r3,r6
811200b4:	dfc00217 	ldw	ra,8(sp)
811200b8:	dc400117 	ldw	r17,4(sp)
811200bc:	dc000017 	ldw	r16,0(sp)
811200c0:	dec00304 	addi	sp,sp,12
811200c4:	f800283a 	ret
811200c8:	00c002c4 	movi	r3,11
811200cc:	1887c83a 	sub	r3,r3,r2
811200d0:	88c6d83a 	srl	r3,r17,r3
811200d4:	8904983a 	sll	r2,r17,r4
811200d8:	01000434 	movhi	r4,16
811200dc:	213fffc4 	addi	r4,r4,-1
811200e0:	2941ffcc 	andi	r5,r5,2047
811200e4:	1906703a 	and	r3,r3,r4
811200e8:	800d883a 	mov	r6,r16
811200ec:	003fe906 	br	81120094 <__reset+0xfb100094>
811200f0:	000d883a 	mov	r6,zero
811200f4:	000b883a 	mov	r5,zero
811200f8:	0007883a 	mov	r3,zero
811200fc:	0005883a 	mov	r2,zero
81120100:	003fe406 	br	81120094 <__reset+0xfb100094>
81120104:	0123c83a 	sub	r17,zero,r4
81120108:	003fd106 	br	81120050 <__reset+0xfb100050>

8112010c <__floatunsidf>:
8112010c:	defffe04 	addi	sp,sp,-8
81120110:	dc000015 	stw	r16,0(sp)
81120114:	dfc00115 	stw	ra,4(sp)
81120118:	2021883a 	mov	r16,r4
8112011c:	20002226 	beq	r4,zero,811201a8 <__floatunsidf+0x9c>
81120120:	110fef00 	call	8110fef0 <__clzsi2>
81120124:	01010784 	movi	r4,1054
81120128:	2089c83a 	sub	r4,r4,r2
8112012c:	01810cc4 	movi	r6,1075
81120130:	310dc83a 	sub	r6,r6,r4
81120134:	00c007c4 	movi	r3,31
81120138:	1980120e 	bge	r3,r6,81120184 <__floatunsidf+0x78>
8112013c:	00c104c4 	movi	r3,1043
81120140:	1907c83a 	sub	r3,r3,r4
81120144:	80ca983a 	sll	r5,r16,r3
81120148:	00800434 	movhi	r2,16
8112014c:	10bfffc4 	addi	r2,r2,-1
81120150:	2101ffcc 	andi	r4,r4,2047
81120154:	0021883a 	mov	r16,zero
81120158:	288a703a 	and	r5,r5,r2
8112015c:	2008953a 	slli	r4,r4,20
81120160:	00c00434 	movhi	r3,16
81120164:	18ffffc4 	addi	r3,r3,-1
81120168:	28c6703a 	and	r3,r5,r3
8112016c:	8005883a 	mov	r2,r16
81120170:	1906b03a 	or	r3,r3,r4
81120174:	dfc00117 	ldw	ra,4(sp)
81120178:	dc000017 	ldw	r16,0(sp)
8112017c:	dec00204 	addi	sp,sp,8
81120180:	f800283a 	ret
81120184:	00c002c4 	movi	r3,11
81120188:	188bc83a 	sub	r5,r3,r2
8112018c:	814ad83a 	srl	r5,r16,r5
81120190:	00c00434 	movhi	r3,16
81120194:	18ffffc4 	addi	r3,r3,-1
81120198:	81a0983a 	sll	r16,r16,r6
8112019c:	2101ffcc 	andi	r4,r4,2047
811201a0:	28ca703a 	and	r5,r5,r3
811201a4:	003fed06 	br	8112015c <__reset+0xfb10015c>
811201a8:	0009883a 	mov	r4,zero
811201ac:	000b883a 	mov	r5,zero
811201b0:	003fea06 	br	8112015c <__reset+0xfb10015c>

811201b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
811201b4:	defffb04 	addi	sp,sp,-20
811201b8:	df000415 	stw	fp,16(sp)
811201bc:	df000404 	addi	fp,sp,16
811201c0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
811201c4:	008000c4 	movi	r2,3
811201c8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
811201cc:	e0fffd17 	ldw	r3,-12(fp)
811201d0:	008003f4 	movhi	r2,15
811201d4:	10909004 	addi	r2,r2,16960
811201d8:	1887383a 	mul	r3,r3,r2
811201dc:	00817db4 	movhi	r2,1526
811201e0:	10b84004 	addi	r2,r2,-7936
811201e4:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
811201e8:	00a00034 	movhi	r2,32768
811201ec:	10bfffc4 	addi	r2,r2,-1
811201f0:	10c5203a 	divu	r2,r2,r3
811201f4:	e0ffff17 	ldw	r3,-4(fp)
811201f8:	1885203a 	divu	r2,r3,r2
811201fc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81120200:	e0bffe17 	ldw	r2,-8(fp)
81120204:	10002526 	beq	r2,zero,8112029c <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
81120208:	e03ffc15 	stw	zero,-16(fp)
8112020c:	00001406 	br	81120260 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81120210:	00a00034 	movhi	r2,32768
81120214:	10bfffc4 	addi	r2,r2,-1
81120218:	10bfffc4 	addi	r2,r2,-1
8112021c:	103ffe1e 	bne	r2,zero,81120218 <__reset+0xfb100218>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81120220:	e0fffd17 	ldw	r3,-12(fp)
81120224:	008003f4 	movhi	r2,15
81120228:	10909004 	addi	r2,r2,16960
8112022c:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81120230:	00817db4 	movhi	r2,1526
81120234:	10b84004 	addi	r2,r2,-7936
81120238:	10c7203a 	divu	r3,r2,r3
8112023c:	00a00034 	movhi	r2,32768
81120240:	10bfffc4 	addi	r2,r2,-1
81120244:	10c5203a 	divu	r2,r2,r3
81120248:	e0ffff17 	ldw	r3,-4(fp)
8112024c:	1885c83a 	sub	r2,r3,r2
81120250:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81120254:	e0bffc17 	ldw	r2,-16(fp)
81120258:	10800044 	addi	r2,r2,1
8112025c:	e0bffc15 	stw	r2,-16(fp)
81120260:	e0fffc17 	ldw	r3,-16(fp)
81120264:	e0bffe17 	ldw	r2,-8(fp)
81120268:	18bfe916 	blt	r3,r2,81120210 <__reset+0xfb100210>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
8112026c:	e0fffd17 	ldw	r3,-12(fp)
81120270:	008003f4 	movhi	r2,15
81120274:	10909004 	addi	r2,r2,16960
81120278:	1887383a 	mul	r3,r3,r2
8112027c:	00817db4 	movhi	r2,1526
81120280:	10b84004 	addi	r2,r2,-7936
81120284:	10c7203a 	divu	r3,r2,r3
81120288:	e0bfff17 	ldw	r2,-4(fp)
8112028c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81120290:	10bfffc4 	addi	r2,r2,-1
81120294:	103ffe1e 	bne	r2,zero,81120290 <__reset+0xfb100290>
81120298:	00000b06 	br	811202c8 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
8112029c:	e0fffd17 	ldw	r3,-12(fp)
811202a0:	008003f4 	movhi	r2,15
811202a4:	10909004 	addi	r2,r2,16960
811202a8:	1887383a 	mul	r3,r3,r2
811202ac:	00817db4 	movhi	r2,1526
811202b0:	10b84004 	addi	r2,r2,-7936
811202b4:	10c7203a 	divu	r3,r2,r3
811202b8:	e0bfff17 	ldw	r2,-4(fp)
811202bc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
811202c0:	10bfffc4 	addi	r2,r2,-1
811202c4:	00bffe16 	blt	zero,r2,811202c0 <__reset+0xfb1002c0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
811202c8:	0005883a 	mov	r2,zero
}
811202cc:	e037883a 	mov	sp,fp
811202d0:	df000017 	ldw	fp,0(sp)
811202d4:	dec00104 	addi	sp,sp,4
811202d8:	f800283a 	ret

811202dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811202dc:	defffe04 	addi	sp,sp,-8
811202e0:	dfc00115 	stw	ra,4(sp)
811202e4:	df000015 	stw	fp,0(sp)
811202e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811202ec:	d0a00d17 	ldw	r2,-32716(gp)
811202f0:	10000326 	beq	r2,zero,81120300 <alt_get_errno+0x24>
811202f4:	d0a00d17 	ldw	r2,-32716(gp)
811202f8:	103ee83a 	callr	r2
811202fc:	00000106 	br	81120304 <alt_get_errno+0x28>
81120300:	d0a03204 	addi	r2,gp,-32568
}
81120304:	e037883a 	mov	sp,fp
81120308:	dfc00117 	ldw	ra,4(sp)
8112030c:	df000017 	ldw	fp,0(sp)
81120310:	dec00204 	addi	sp,sp,8
81120314:	f800283a 	ret

81120318 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
81120318:	defffb04 	addi	sp,sp,-20
8112031c:	dfc00415 	stw	ra,16(sp)
81120320:	df000315 	stw	fp,12(sp)
81120324:	df000304 	addi	fp,sp,12
81120328:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
8112032c:	e0bfff17 	ldw	r2,-4(fp)
81120330:	10000616 	blt	r2,zero,8112034c <close+0x34>
81120334:	e0bfff17 	ldw	r2,-4(fp)
81120338:	10c00324 	muli	r3,r2,12
8112033c:	00a044b4 	movhi	r2,33042
81120340:	109e0904 	addi	r2,r2,30756
81120344:	1885883a 	add	r2,r3,r2
81120348:	00000106 	br	81120350 <close+0x38>
8112034c:	0005883a 	mov	r2,zero
81120350:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
81120354:	e0bffd17 	ldw	r2,-12(fp)
81120358:	10001926 	beq	r2,zero,811203c0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
8112035c:	e0bffd17 	ldw	r2,-12(fp)
81120360:	10800017 	ldw	r2,0(r2)
81120364:	10800417 	ldw	r2,16(r2)
81120368:	10000626 	beq	r2,zero,81120384 <close+0x6c>
8112036c:	e0bffd17 	ldw	r2,-12(fp)
81120370:	10800017 	ldw	r2,0(r2)
81120374:	10800417 	ldw	r2,16(r2)
81120378:	e13ffd17 	ldw	r4,-12(fp)
8112037c:	103ee83a 	callr	r2
81120380:	00000106 	br	81120388 <close+0x70>
81120384:	0005883a 	mov	r2,zero
81120388:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
8112038c:	e13fff17 	ldw	r4,-4(fp)
81120390:	1120ce00 	call	81120ce0 <alt_release_fd>
    if (rval < 0)
81120394:	e0bffe17 	ldw	r2,-8(fp)
81120398:	1000070e 	bge	r2,zero,811203b8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
8112039c:	11202dc0 	call	811202dc <alt_get_errno>
811203a0:	1007883a 	mov	r3,r2
811203a4:	e0bffe17 	ldw	r2,-8(fp)
811203a8:	0085c83a 	sub	r2,zero,r2
811203ac:	18800015 	stw	r2,0(r3)
      return -1;
811203b0:	00bfffc4 	movi	r2,-1
811203b4:	00000706 	br	811203d4 <close+0xbc>
    }
    return 0;
811203b8:	0005883a 	mov	r2,zero
811203bc:	00000506 	br	811203d4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
811203c0:	11202dc0 	call	811202dc <alt_get_errno>
811203c4:	1007883a 	mov	r3,r2
811203c8:	00801444 	movi	r2,81
811203cc:	18800015 	stw	r2,0(r3)
    return -1;
811203d0:	00bfffc4 	movi	r2,-1
  }
}
811203d4:	e037883a 	mov	sp,fp
811203d8:	dfc00117 	ldw	ra,4(sp)
811203dc:	df000017 	ldw	fp,0(sp)
811203e0:	dec00204 	addi	sp,sp,8
811203e4:	f800283a 	ret

811203e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
811203e8:	deffff04 	addi	sp,sp,-4
811203ec:	df000015 	stw	fp,0(sp)
811203f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
811203f4:	0001883a 	nop
811203f8:	e037883a 	mov	sp,fp
811203fc:	df000017 	ldw	fp,0(sp)
81120400:	dec00104 	addi	sp,sp,4
81120404:	f800283a 	ret

81120408 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
81120408:	defffc04 	addi	sp,sp,-16
8112040c:	df000315 	stw	fp,12(sp)
81120410:	df000304 	addi	fp,sp,12
81120414:	e13ffd15 	stw	r4,-12(fp)
81120418:	e17ffe15 	stw	r5,-8(fp)
8112041c:	e1bfff15 	stw	r6,-4(fp)
  return len;
81120420:	e0bfff17 	ldw	r2,-4(fp)
}
81120424:	e037883a 	mov	sp,fp
81120428:	df000017 	ldw	fp,0(sp)
8112042c:	dec00104 	addi	sp,sp,4
81120430:	f800283a 	ret

81120434 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81120434:	defffe04 	addi	sp,sp,-8
81120438:	dfc00115 	stw	ra,4(sp)
8112043c:	df000015 	stw	fp,0(sp)
81120440:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81120444:	d0a00d17 	ldw	r2,-32716(gp)
81120448:	10000326 	beq	r2,zero,81120458 <alt_get_errno+0x24>
8112044c:	d0a00d17 	ldw	r2,-32716(gp)
81120450:	103ee83a 	callr	r2
81120454:	00000106 	br	8112045c <alt_get_errno+0x28>
81120458:	d0a03204 	addi	r2,gp,-32568
}
8112045c:	e037883a 	mov	sp,fp
81120460:	dfc00117 	ldw	ra,4(sp)
81120464:	df000017 	ldw	fp,0(sp)
81120468:	dec00204 	addi	sp,sp,8
8112046c:	f800283a 	ret

81120470 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81120470:	defffb04 	addi	sp,sp,-20
81120474:	dfc00415 	stw	ra,16(sp)
81120478:	df000315 	stw	fp,12(sp)
8112047c:	df000304 	addi	fp,sp,12
81120480:	e13ffe15 	stw	r4,-8(fp)
81120484:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81120488:	e0bffe17 	ldw	r2,-8(fp)
8112048c:	10000616 	blt	r2,zero,811204a8 <fstat+0x38>
81120490:	e0bffe17 	ldw	r2,-8(fp)
81120494:	10c00324 	muli	r3,r2,12
81120498:	00a044b4 	movhi	r2,33042
8112049c:	109e0904 	addi	r2,r2,30756
811204a0:	1885883a 	add	r2,r3,r2
811204a4:	00000106 	br	811204ac <fstat+0x3c>
811204a8:	0005883a 	mov	r2,zero
811204ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
811204b0:	e0bffd17 	ldw	r2,-12(fp)
811204b4:	10001026 	beq	r2,zero,811204f8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
811204b8:	e0bffd17 	ldw	r2,-12(fp)
811204bc:	10800017 	ldw	r2,0(r2)
811204c0:	10800817 	ldw	r2,32(r2)
811204c4:	10000726 	beq	r2,zero,811204e4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
811204c8:	e0bffd17 	ldw	r2,-12(fp)
811204cc:	10800017 	ldw	r2,0(r2)
811204d0:	10800817 	ldw	r2,32(r2)
811204d4:	e17fff17 	ldw	r5,-4(fp)
811204d8:	e13ffd17 	ldw	r4,-12(fp)
811204dc:	103ee83a 	callr	r2
811204e0:	00000a06 	br	8112050c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
811204e4:	e0bfff17 	ldw	r2,-4(fp)
811204e8:	00c80004 	movi	r3,8192
811204ec:	10c00115 	stw	r3,4(r2)
      return 0;
811204f0:	0005883a 	mov	r2,zero
811204f4:	00000506 	br	8112050c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811204f8:	11204340 	call	81120434 <alt_get_errno>
811204fc:	1007883a 	mov	r3,r2
81120500:	00801444 	movi	r2,81
81120504:	18800015 	stw	r2,0(r3)
    return -1;
81120508:	00bfffc4 	movi	r2,-1
  }
}
8112050c:	e037883a 	mov	sp,fp
81120510:	dfc00117 	ldw	ra,4(sp)
81120514:	df000017 	ldw	fp,0(sp)
81120518:	dec00204 	addi	sp,sp,8
8112051c:	f800283a 	ret

81120520 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
81120520:	defff004 	addi	sp,sp,-64
81120524:	df000f15 	stw	fp,60(sp)
81120528:	df000f04 	addi	fp,sp,60
8112052c:	e13ffd15 	stw	r4,-12(fp)
81120530:	e17ffe15 	stw	r5,-8(fp)
81120534:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
81120538:	00bffa84 	movi	r2,-22
8112053c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81120540:	e0bffd17 	ldw	r2,-12(fp)
81120544:	10800828 	cmpgeui	r2,r2,32
81120548:	1000501e 	bne	r2,zero,8112068c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112054c:	0005303a 	rdctl	r2,status
81120550:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120554:	e0fff617 	ldw	r3,-40(fp)
81120558:	00bfff84 	movi	r2,-2
8112055c:	1884703a 	and	r2,r3,r2
81120560:	1001703a 	wrctl	status,r2
  
  return context;
81120564:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
81120568:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
8112056c:	00a044f4 	movhi	r2,33043
81120570:	10a79704 	addi	r2,r2,-24996
81120574:	e0fffd17 	ldw	r3,-12(fp)
81120578:	180690fa 	slli	r3,r3,3
8112057c:	10c5883a 	add	r2,r2,r3
81120580:	e0ffff17 	ldw	r3,-4(fp)
81120584:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
81120588:	00a044f4 	movhi	r2,33043
8112058c:	10a79704 	addi	r2,r2,-24996
81120590:	e0fffd17 	ldw	r3,-12(fp)
81120594:	180690fa 	slli	r3,r3,3
81120598:	10c5883a 	add	r2,r2,r3
8112059c:	10800104 	addi	r2,r2,4
811205a0:	e0fffe17 	ldw	r3,-8(fp)
811205a4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
811205a8:	e0bfff17 	ldw	r2,-4(fp)
811205ac:	10001926 	beq	r2,zero,81120614 <alt_irq_register+0xf4>
811205b0:	e0bffd17 	ldw	r2,-12(fp)
811205b4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811205b8:	0005303a 	rdctl	r2,status
811205bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811205c0:	e0fff717 	ldw	r3,-36(fp)
811205c4:	00bfff84 	movi	r2,-2
811205c8:	1884703a 	and	r2,r3,r2
811205cc:	1001703a 	wrctl	status,r2
  
  return context;
811205d0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811205d4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
811205d8:	00c00044 	movi	r3,1
811205dc:	e0bff217 	ldw	r2,-56(fp)
811205e0:	1884983a 	sll	r2,r3,r2
811205e4:	1007883a 	mov	r3,r2
811205e8:	d0a03917 	ldw	r2,-32540(gp)
811205ec:	1884b03a 	or	r2,r3,r2
811205f0:	d0a03915 	stw	r2,-32540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811205f4:	d0a03917 	ldw	r2,-32540(gp)
811205f8:	100170fa 	wrctl	ienable,r2
811205fc:	e0bff817 	ldw	r2,-32(fp)
81120600:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120604:	e0bff917 	ldw	r2,-28(fp)
81120608:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8112060c:	0005883a 	mov	r2,zero
81120610:	00001906 	br	81120678 <alt_irq_register+0x158>
81120614:	e0bffd17 	ldw	r2,-12(fp)
81120618:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112061c:	0005303a 	rdctl	r2,status
81120620:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120624:	e0fffa17 	ldw	r3,-24(fp)
81120628:	00bfff84 	movi	r2,-2
8112062c:	1884703a 	and	r2,r3,r2
81120630:	1001703a 	wrctl	status,r2
  
  return context;
81120634:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81120638:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
8112063c:	00c00044 	movi	r3,1
81120640:	e0bff417 	ldw	r2,-48(fp)
81120644:	1884983a 	sll	r2,r3,r2
81120648:	0084303a 	nor	r2,zero,r2
8112064c:	1007883a 	mov	r3,r2
81120650:	d0a03917 	ldw	r2,-32540(gp)
81120654:	1884703a 	and	r2,r3,r2
81120658:	d0a03915 	stw	r2,-32540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8112065c:	d0a03917 	ldw	r2,-32540(gp)
81120660:	100170fa 	wrctl	ienable,r2
81120664:	e0bffb17 	ldw	r2,-20(fp)
81120668:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112066c:	e0bffc17 	ldw	r2,-16(fp)
81120670:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81120674:	0005883a 	mov	r2,zero
81120678:	e0bff115 	stw	r2,-60(fp)
8112067c:	e0bff317 	ldw	r2,-52(fp)
81120680:	e0bff515 	stw	r2,-44(fp)
81120684:	e0bff517 	ldw	r2,-44(fp)
81120688:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
8112068c:	e0bff117 	ldw	r2,-60(fp)
}
81120690:	e037883a 	mov	sp,fp
81120694:	df000017 	ldw	fp,0(sp)
81120698:	dec00104 	addi	sp,sp,4
8112069c:	f800283a 	ret

811206a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811206a0:	defffe04 	addi	sp,sp,-8
811206a4:	dfc00115 	stw	ra,4(sp)
811206a8:	df000015 	stw	fp,0(sp)
811206ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811206b0:	d0a00d17 	ldw	r2,-32716(gp)
811206b4:	10000326 	beq	r2,zero,811206c4 <alt_get_errno+0x24>
811206b8:	d0a00d17 	ldw	r2,-32716(gp)
811206bc:	103ee83a 	callr	r2
811206c0:	00000106 	br	811206c8 <alt_get_errno+0x28>
811206c4:	d0a03204 	addi	r2,gp,-32568
}
811206c8:	e037883a 	mov	sp,fp
811206cc:	dfc00117 	ldw	ra,4(sp)
811206d0:	df000017 	ldw	fp,0(sp)
811206d4:	dec00204 	addi	sp,sp,8
811206d8:	f800283a 	ret

811206dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
811206dc:	deffed04 	addi	sp,sp,-76
811206e0:	dfc01215 	stw	ra,72(sp)
811206e4:	df001115 	stw	fp,68(sp)
811206e8:	df001104 	addi	fp,sp,68
811206ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811206f0:	e0bfff17 	ldw	r2,-4(fp)
811206f4:	10000616 	blt	r2,zero,81120710 <isatty+0x34>
811206f8:	e0bfff17 	ldw	r2,-4(fp)
811206fc:	10c00324 	muli	r3,r2,12
81120700:	00a044b4 	movhi	r2,33042
81120704:	109e0904 	addi	r2,r2,30756
81120708:	1885883a 	add	r2,r3,r2
8112070c:	00000106 	br	81120714 <isatty+0x38>
81120710:	0005883a 	mov	r2,zero
81120714:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81120718:	e0bfef17 	ldw	r2,-68(fp)
8112071c:	10000e26 	beq	r2,zero,81120758 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81120720:	e0bfef17 	ldw	r2,-68(fp)
81120724:	10800017 	ldw	r2,0(r2)
81120728:	10800817 	ldw	r2,32(r2)
8112072c:	1000021e 	bne	r2,zero,81120738 <isatty+0x5c>
    {
      return 1;
81120730:	00800044 	movi	r2,1
81120734:	00000d06 	br	8112076c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81120738:	e0bff004 	addi	r2,fp,-64
8112073c:	100b883a 	mov	r5,r2
81120740:	e13fff17 	ldw	r4,-4(fp)
81120744:	11204700 	call	81120470 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81120748:	e0bff117 	ldw	r2,-60(fp)
8112074c:	10880020 	cmpeqi	r2,r2,8192
81120750:	10803fcc 	andi	r2,r2,255
81120754:	00000506 	br	8112076c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81120758:	11206a00 	call	811206a0 <alt_get_errno>
8112075c:	1007883a 	mov	r3,r2
81120760:	00801444 	movi	r2,81
81120764:	18800015 	stw	r2,0(r3)
    return 0;
81120768:	0005883a 	mov	r2,zero
  }
}
8112076c:	e037883a 	mov	sp,fp
81120770:	dfc00117 	ldw	ra,4(sp)
81120774:	df000017 	ldw	fp,0(sp)
81120778:	dec00204 	addi	sp,sp,8
8112077c:	f800283a 	ret

81120780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81120780:	defffe04 	addi	sp,sp,-8
81120784:	dfc00115 	stw	ra,4(sp)
81120788:	df000015 	stw	fp,0(sp)
8112078c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81120790:	d0a00d17 	ldw	r2,-32716(gp)
81120794:	10000326 	beq	r2,zero,811207a4 <alt_get_errno+0x24>
81120798:	d0a00d17 	ldw	r2,-32716(gp)
8112079c:	103ee83a 	callr	r2
811207a0:	00000106 	br	811207a8 <alt_get_errno+0x28>
811207a4:	d0a03204 	addi	r2,gp,-32568
}
811207a8:	e037883a 	mov	sp,fp
811207ac:	dfc00117 	ldw	ra,4(sp)
811207b0:	df000017 	ldw	fp,0(sp)
811207b4:	dec00204 	addi	sp,sp,8
811207b8:	f800283a 	ret

811207bc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
811207bc:	defff904 	addi	sp,sp,-28
811207c0:	dfc00615 	stw	ra,24(sp)
811207c4:	df000515 	stw	fp,20(sp)
811207c8:	df000504 	addi	fp,sp,20
811207cc:	e13ffd15 	stw	r4,-12(fp)
811207d0:	e17ffe15 	stw	r5,-8(fp)
811207d4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
811207d8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811207dc:	e0bffd17 	ldw	r2,-12(fp)
811207e0:	10000616 	blt	r2,zero,811207fc <lseek+0x40>
811207e4:	e0bffd17 	ldw	r2,-12(fp)
811207e8:	10c00324 	muli	r3,r2,12
811207ec:	00a044b4 	movhi	r2,33042
811207f0:	109e0904 	addi	r2,r2,30756
811207f4:	1885883a 	add	r2,r3,r2
811207f8:	00000106 	br	81120800 <lseek+0x44>
811207fc:	0005883a 	mov	r2,zero
81120800:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81120804:	e0bffc17 	ldw	r2,-16(fp)
81120808:	10001026 	beq	r2,zero,8112084c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8112080c:	e0bffc17 	ldw	r2,-16(fp)
81120810:	10800017 	ldw	r2,0(r2)
81120814:	10800717 	ldw	r2,28(r2)
81120818:	10000926 	beq	r2,zero,81120840 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8112081c:	e0bffc17 	ldw	r2,-16(fp)
81120820:	10800017 	ldw	r2,0(r2)
81120824:	10800717 	ldw	r2,28(r2)
81120828:	e1bfff17 	ldw	r6,-4(fp)
8112082c:	e17ffe17 	ldw	r5,-8(fp)
81120830:	e13ffc17 	ldw	r4,-16(fp)
81120834:	103ee83a 	callr	r2
81120838:	e0bffb15 	stw	r2,-20(fp)
8112083c:	00000506 	br	81120854 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81120840:	00bfde84 	movi	r2,-134
81120844:	e0bffb15 	stw	r2,-20(fp)
81120848:	00000206 	br	81120854 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
8112084c:	00bfebc4 	movi	r2,-81
81120850:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81120854:	e0bffb17 	ldw	r2,-20(fp)
81120858:	1000070e 	bge	r2,zero,81120878 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
8112085c:	11207800 	call	81120780 <alt_get_errno>
81120860:	1007883a 	mov	r3,r2
81120864:	e0bffb17 	ldw	r2,-20(fp)
81120868:	0085c83a 	sub	r2,zero,r2
8112086c:	18800015 	stw	r2,0(r3)
    rc = -1;
81120870:	00bfffc4 	movi	r2,-1
81120874:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81120878:	e0bffb17 	ldw	r2,-20(fp)
}
8112087c:	e037883a 	mov	sp,fp
81120880:	dfc00117 	ldw	ra,4(sp)
81120884:	df000017 	ldw	fp,0(sp)
81120888:	dec00204 	addi	sp,sp,8
8112088c:	f800283a 	ret

81120890 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81120890:	defffd04 	addi	sp,sp,-12
81120894:	dfc00215 	stw	ra,8(sp)
81120898:	df000115 	stw	fp,4(sp)
8112089c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
811208a0:	0009883a 	mov	r4,zero
811208a4:	11211300 	call	81121130 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
811208a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
811208ac:	11211680 	call	81121168 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
811208b0:	01a044b4 	movhi	r6,33042
811208b4:	319b2d04 	addi	r6,r6,27828
811208b8:	016044b4 	movhi	r5,33042
811208bc:	295b3204 	addi	r5,r5,27848
811208c0:	012044b4 	movhi	r4,33042
811208c4:	211b3204 	addi	r4,r4,27848
811208c8:	1124d6c0 	call	81124d6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
811208cc:	112470c0 	call	8112470c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
811208d0:	012044b4 	movhi	r4,33042
811208d4:	2111db04 	addi	r4,r4,18284
811208d8:	11251100 	call	81125110 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
811208dc:	d0a03a17 	ldw	r2,-32536(gp)
811208e0:	d0e03b17 	ldw	r3,-32532(gp)
811208e4:	d1203c17 	ldw	r4,-32528(gp)
811208e8:	200d883a 	mov	r6,r4
811208ec:	180b883a 	mov	r5,r3
811208f0:	1009883a 	mov	r4,r2
811208f4:	110c31c0 	call	8110c31c <main>
811208f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
811208fc:	01000044 	movi	r4,1
81120900:	11203180 	call	81120318 <close>
  exit (result);
81120904:	e13fff17 	ldw	r4,-4(fp)
81120908:	11251240 	call	81125124 <exit>

8112090c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
8112090c:	defffe04 	addi	sp,sp,-8
81120910:	df000115 	stw	fp,4(sp)
81120914:	df000104 	addi	fp,sp,4
81120918:	e13fff15 	stw	r4,-4(fp)
}
8112091c:	0001883a 	nop
81120920:	e037883a 	mov	sp,fp
81120924:	df000017 	ldw	fp,0(sp)
81120928:	dec00104 	addi	sp,sp,4
8112092c:	f800283a 	ret

81120930 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81120930:	defffe04 	addi	sp,sp,-8
81120934:	df000115 	stw	fp,4(sp)
81120938:	df000104 	addi	fp,sp,4
8112093c:	e13fff15 	stw	r4,-4(fp)
}
81120940:	0001883a 	nop
81120944:	e037883a 	mov	sp,fp
81120948:	df000017 	ldw	fp,0(sp)
8112094c:	dec00104 	addi	sp,sp,4
81120950:	f800283a 	ret

81120954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81120954:	defffe04 	addi	sp,sp,-8
81120958:	dfc00115 	stw	ra,4(sp)
8112095c:	df000015 	stw	fp,0(sp)
81120960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81120964:	d0a00d17 	ldw	r2,-32716(gp)
81120968:	10000326 	beq	r2,zero,81120978 <alt_get_errno+0x24>
8112096c:	d0a00d17 	ldw	r2,-32716(gp)
81120970:	103ee83a 	callr	r2
81120974:	00000106 	br	8112097c <alt_get_errno+0x28>
81120978:	d0a03204 	addi	r2,gp,-32568
}
8112097c:	e037883a 	mov	sp,fp
81120980:	dfc00117 	ldw	ra,4(sp)
81120984:	df000017 	ldw	fp,0(sp)
81120988:	dec00204 	addi	sp,sp,8
8112098c:	f800283a 	ret

81120990 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81120990:	defffd04 	addi	sp,sp,-12
81120994:	df000215 	stw	fp,8(sp)
81120998:	df000204 	addi	fp,sp,8
8112099c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
811209a0:	e0bfff17 	ldw	r2,-4(fp)
811209a4:	10800217 	ldw	r2,8(r2)
811209a8:	10d00034 	orhi	r3,r2,16384
811209ac:	e0bfff17 	ldw	r2,-4(fp)
811209b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
811209b4:	e03ffe15 	stw	zero,-8(fp)
811209b8:	00001d06 	br	81120a30 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
811209bc:	00a044b4 	movhi	r2,33042
811209c0:	109e0904 	addi	r2,r2,30756
811209c4:	e0fffe17 	ldw	r3,-8(fp)
811209c8:	18c00324 	muli	r3,r3,12
811209cc:	10c5883a 	add	r2,r2,r3
811209d0:	10c00017 	ldw	r3,0(r2)
811209d4:	e0bfff17 	ldw	r2,-4(fp)
811209d8:	10800017 	ldw	r2,0(r2)
811209dc:	1880111e 	bne	r3,r2,81120a24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
811209e0:	00a044b4 	movhi	r2,33042
811209e4:	109e0904 	addi	r2,r2,30756
811209e8:	e0fffe17 	ldw	r3,-8(fp)
811209ec:	18c00324 	muli	r3,r3,12
811209f0:	10c5883a 	add	r2,r2,r3
811209f4:	10800204 	addi	r2,r2,8
811209f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
811209fc:	1000090e 	bge	r2,zero,81120a24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
81120a00:	e0bffe17 	ldw	r2,-8(fp)
81120a04:	10c00324 	muli	r3,r2,12
81120a08:	00a044b4 	movhi	r2,33042
81120a0c:	109e0904 	addi	r2,r2,30756
81120a10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81120a14:	e0bfff17 	ldw	r2,-4(fp)
81120a18:	18800226 	beq	r3,r2,81120a24 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
81120a1c:	00bffcc4 	movi	r2,-13
81120a20:	00000806 	br	81120a44 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81120a24:	e0bffe17 	ldw	r2,-8(fp)
81120a28:	10800044 	addi	r2,r2,1
81120a2c:	e0bffe15 	stw	r2,-8(fp)
81120a30:	d0a00c17 	ldw	r2,-32720(gp)
81120a34:	1007883a 	mov	r3,r2
81120a38:	e0bffe17 	ldw	r2,-8(fp)
81120a3c:	18bfdf2e 	bgeu	r3,r2,811209bc <__reset+0xfb1009bc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
81120a40:	0005883a 	mov	r2,zero
}
81120a44:	e037883a 	mov	sp,fp
81120a48:	df000017 	ldw	fp,0(sp)
81120a4c:	dec00104 	addi	sp,sp,4
81120a50:	f800283a 	ret

81120a54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81120a54:	defff604 	addi	sp,sp,-40
81120a58:	dfc00915 	stw	ra,36(sp)
81120a5c:	df000815 	stw	fp,32(sp)
81120a60:	df000804 	addi	fp,sp,32
81120a64:	e13ffd15 	stw	r4,-12(fp)
81120a68:	e17ffe15 	stw	r5,-8(fp)
81120a6c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81120a70:	00bfffc4 	movi	r2,-1
81120a74:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
81120a78:	00bffb44 	movi	r2,-19
81120a7c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81120a80:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
81120a84:	d1600a04 	addi	r5,gp,-32728
81120a88:	e13ffd17 	ldw	r4,-12(fp)
81120a8c:	11247cc0 	call	811247cc <alt_find_dev>
81120a90:	e0bff815 	stw	r2,-32(fp)
81120a94:	e0bff817 	ldw	r2,-32(fp)
81120a98:	1000051e 	bne	r2,zero,81120ab0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81120a9c:	e13ffd17 	ldw	r4,-12(fp)
81120aa0:	112485c0 	call	8112485c <alt_find_file>
81120aa4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81120aa8:	00800044 	movi	r2,1
81120aac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81120ab0:	e0bff817 	ldw	r2,-32(fp)
81120ab4:	10002926 	beq	r2,zero,81120b5c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
81120ab8:	e13ff817 	ldw	r4,-32(fp)
81120abc:	11249640 	call	81124964 <alt_get_fd>
81120ac0:	e0bff915 	stw	r2,-28(fp)
81120ac4:	e0bff917 	ldw	r2,-28(fp)
81120ac8:	1000030e 	bge	r2,zero,81120ad8 <open+0x84>
    {
      status = index;
81120acc:	e0bff917 	ldw	r2,-28(fp)
81120ad0:	e0bffa15 	stw	r2,-24(fp)
81120ad4:	00002306 	br	81120b64 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
81120ad8:	e0bff917 	ldw	r2,-28(fp)
81120adc:	10c00324 	muli	r3,r2,12
81120ae0:	00a044b4 	movhi	r2,33042
81120ae4:	109e0904 	addi	r2,r2,30756
81120ae8:	1885883a 	add	r2,r3,r2
81120aec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
81120af0:	e0fffe17 	ldw	r3,-8(fp)
81120af4:	00900034 	movhi	r2,16384
81120af8:	10bfffc4 	addi	r2,r2,-1
81120afc:	1886703a 	and	r3,r3,r2
81120b00:	e0bffc17 	ldw	r2,-16(fp)
81120b04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
81120b08:	e0bffb17 	ldw	r2,-20(fp)
81120b0c:	1000051e 	bne	r2,zero,81120b24 <open+0xd0>
81120b10:	e13ffc17 	ldw	r4,-16(fp)
81120b14:	11209900 	call	81120990 <alt_file_locked>
81120b18:	e0bffa15 	stw	r2,-24(fp)
81120b1c:	e0bffa17 	ldw	r2,-24(fp)
81120b20:	10001016 	blt	r2,zero,81120b64 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
81120b24:	e0bff817 	ldw	r2,-32(fp)
81120b28:	10800317 	ldw	r2,12(r2)
81120b2c:	10000826 	beq	r2,zero,81120b50 <open+0xfc>
81120b30:	e0bff817 	ldw	r2,-32(fp)
81120b34:	10800317 	ldw	r2,12(r2)
81120b38:	e1ffff17 	ldw	r7,-4(fp)
81120b3c:	e1bffe17 	ldw	r6,-8(fp)
81120b40:	e17ffd17 	ldw	r5,-12(fp)
81120b44:	e13ffc17 	ldw	r4,-16(fp)
81120b48:	103ee83a 	callr	r2
81120b4c:	00000106 	br	81120b54 <open+0x100>
81120b50:	0005883a 	mov	r2,zero
81120b54:	e0bffa15 	stw	r2,-24(fp)
81120b58:	00000206 	br	81120b64 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
81120b5c:	00bffb44 	movi	r2,-19
81120b60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
81120b64:	e0bffa17 	ldw	r2,-24(fp)
81120b68:	1000090e 	bge	r2,zero,81120b90 <open+0x13c>
  {
    alt_release_fd (index);  
81120b6c:	e13ff917 	ldw	r4,-28(fp)
81120b70:	1120ce00 	call	81120ce0 <alt_release_fd>
    ALT_ERRNO = -status;
81120b74:	11209540 	call	81120954 <alt_get_errno>
81120b78:	1007883a 	mov	r3,r2
81120b7c:	e0bffa17 	ldw	r2,-24(fp)
81120b80:	0085c83a 	sub	r2,zero,r2
81120b84:	18800015 	stw	r2,0(r3)
    return -1;
81120b88:	00bfffc4 	movi	r2,-1
81120b8c:	00000106 	br	81120b94 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
81120b90:	e0bff917 	ldw	r2,-28(fp)
}
81120b94:	e037883a 	mov	sp,fp
81120b98:	dfc00117 	ldw	ra,4(sp)
81120b9c:	df000017 	ldw	fp,0(sp)
81120ba0:	dec00204 	addi	sp,sp,8
81120ba4:	f800283a 	ret

81120ba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81120ba8:	defffe04 	addi	sp,sp,-8
81120bac:	dfc00115 	stw	ra,4(sp)
81120bb0:	df000015 	stw	fp,0(sp)
81120bb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81120bb8:	d0a00d17 	ldw	r2,-32716(gp)
81120bbc:	10000326 	beq	r2,zero,81120bcc <alt_get_errno+0x24>
81120bc0:	d0a00d17 	ldw	r2,-32716(gp)
81120bc4:	103ee83a 	callr	r2
81120bc8:	00000106 	br	81120bd0 <alt_get_errno+0x28>
81120bcc:	d0a03204 	addi	r2,gp,-32568
}
81120bd0:	e037883a 	mov	sp,fp
81120bd4:	dfc00117 	ldw	ra,4(sp)
81120bd8:	df000017 	ldw	fp,0(sp)
81120bdc:	dec00204 	addi	sp,sp,8
81120be0:	f800283a 	ret

81120be4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81120be4:	defff904 	addi	sp,sp,-28
81120be8:	dfc00615 	stw	ra,24(sp)
81120bec:	df000515 	stw	fp,20(sp)
81120bf0:	df000504 	addi	fp,sp,20
81120bf4:	e13ffd15 	stw	r4,-12(fp)
81120bf8:	e17ffe15 	stw	r5,-8(fp)
81120bfc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81120c00:	e0bffd17 	ldw	r2,-12(fp)
81120c04:	10000616 	blt	r2,zero,81120c20 <read+0x3c>
81120c08:	e0bffd17 	ldw	r2,-12(fp)
81120c0c:	10c00324 	muli	r3,r2,12
81120c10:	00a044b4 	movhi	r2,33042
81120c14:	109e0904 	addi	r2,r2,30756
81120c18:	1885883a 	add	r2,r3,r2
81120c1c:	00000106 	br	81120c24 <read+0x40>
81120c20:	0005883a 	mov	r2,zero
81120c24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81120c28:	e0bffb17 	ldw	r2,-20(fp)
81120c2c:	10002226 	beq	r2,zero,81120cb8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81120c30:	e0bffb17 	ldw	r2,-20(fp)
81120c34:	10800217 	ldw	r2,8(r2)
81120c38:	108000cc 	andi	r2,r2,3
81120c3c:	10800060 	cmpeqi	r2,r2,1
81120c40:	1000181e 	bne	r2,zero,81120ca4 <read+0xc0>
        (fd->dev->read))
81120c44:	e0bffb17 	ldw	r2,-20(fp)
81120c48:	10800017 	ldw	r2,0(r2)
81120c4c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81120c50:	10001426 	beq	r2,zero,81120ca4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81120c54:	e0bffb17 	ldw	r2,-20(fp)
81120c58:	10800017 	ldw	r2,0(r2)
81120c5c:	10800517 	ldw	r2,20(r2)
81120c60:	e0ffff17 	ldw	r3,-4(fp)
81120c64:	180d883a 	mov	r6,r3
81120c68:	e17ffe17 	ldw	r5,-8(fp)
81120c6c:	e13ffb17 	ldw	r4,-20(fp)
81120c70:	103ee83a 	callr	r2
81120c74:	e0bffc15 	stw	r2,-16(fp)
81120c78:	e0bffc17 	ldw	r2,-16(fp)
81120c7c:	1000070e 	bge	r2,zero,81120c9c <read+0xb8>
        {
          ALT_ERRNO = -rval;
81120c80:	1120ba80 	call	81120ba8 <alt_get_errno>
81120c84:	1007883a 	mov	r3,r2
81120c88:	e0bffc17 	ldw	r2,-16(fp)
81120c8c:	0085c83a 	sub	r2,zero,r2
81120c90:	18800015 	stw	r2,0(r3)
          return -1;
81120c94:	00bfffc4 	movi	r2,-1
81120c98:	00000c06 	br	81120ccc <read+0xe8>
        }
        return rval;
81120c9c:	e0bffc17 	ldw	r2,-16(fp)
81120ca0:	00000a06 	br	81120ccc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
81120ca4:	1120ba80 	call	81120ba8 <alt_get_errno>
81120ca8:	1007883a 	mov	r3,r2
81120cac:	00800344 	movi	r2,13
81120cb0:	18800015 	stw	r2,0(r3)
81120cb4:	00000406 	br	81120cc8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81120cb8:	1120ba80 	call	81120ba8 <alt_get_errno>
81120cbc:	1007883a 	mov	r3,r2
81120cc0:	00801444 	movi	r2,81
81120cc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
81120cc8:	00bfffc4 	movi	r2,-1
}
81120ccc:	e037883a 	mov	sp,fp
81120cd0:	dfc00117 	ldw	ra,4(sp)
81120cd4:	df000017 	ldw	fp,0(sp)
81120cd8:	dec00204 	addi	sp,sp,8
81120cdc:	f800283a 	ret

81120ce0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81120ce0:	defffe04 	addi	sp,sp,-8
81120ce4:	df000115 	stw	fp,4(sp)
81120ce8:	df000104 	addi	fp,sp,4
81120cec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81120cf0:	e0bfff17 	ldw	r2,-4(fp)
81120cf4:	108000d0 	cmplti	r2,r2,3
81120cf8:	10000d1e 	bne	r2,zero,81120d30 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
81120cfc:	00a044b4 	movhi	r2,33042
81120d00:	109e0904 	addi	r2,r2,30756
81120d04:	e0ffff17 	ldw	r3,-4(fp)
81120d08:	18c00324 	muli	r3,r3,12
81120d0c:	10c5883a 	add	r2,r2,r3
81120d10:	10800204 	addi	r2,r2,8
81120d14:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81120d18:	00a044b4 	movhi	r2,33042
81120d1c:	109e0904 	addi	r2,r2,30756
81120d20:	e0ffff17 	ldw	r3,-4(fp)
81120d24:	18c00324 	muli	r3,r3,12
81120d28:	10c5883a 	add	r2,r2,r3
81120d2c:	10000015 	stw	zero,0(r2)
  }
}
81120d30:	0001883a 	nop
81120d34:	e037883a 	mov	sp,fp
81120d38:	df000017 	ldw	fp,0(sp)
81120d3c:	dec00104 	addi	sp,sp,4
81120d40:	f800283a 	ret

81120d44 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81120d44:	defff904 	addi	sp,sp,-28
81120d48:	df000615 	stw	fp,24(sp)
81120d4c:	df000604 	addi	fp,sp,24
81120d50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120d54:	0005303a 	rdctl	r2,status
81120d58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120d5c:	e0fffe17 	ldw	r3,-8(fp)
81120d60:	00bfff84 	movi	r2,-2
81120d64:	1884703a 	and	r2,r3,r2
81120d68:	1001703a 	wrctl	status,r2
  
  return context;
81120d6c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81120d70:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81120d74:	d0a00f17 	ldw	r2,-32708(gp)
81120d78:	10c000c4 	addi	r3,r2,3
81120d7c:	00bfff04 	movi	r2,-4
81120d80:	1884703a 	and	r2,r3,r2
81120d84:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81120d88:	d0e00f17 	ldw	r3,-32708(gp)
81120d8c:	e0bfff17 	ldw	r2,-4(fp)
81120d90:	1887883a 	add	r3,r3,r2
81120d94:	00a04834 	movhi	r2,33056
81120d98:	10a80004 	addi	r2,r2,-24576
81120d9c:	10c0062e 	bgeu	r2,r3,81120db8 <sbrk+0x74>
81120da0:	e0bffb17 	ldw	r2,-20(fp)
81120da4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120da8:	e0bffa17 	ldw	r2,-24(fp)
81120dac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81120db0:	00bfffc4 	movi	r2,-1
81120db4:	00000b06 	br	81120de4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
81120db8:	d0a00f17 	ldw	r2,-32708(gp)
81120dbc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
81120dc0:	d0e00f17 	ldw	r3,-32708(gp)
81120dc4:	e0bfff17 	ldw	r2,-4(fp)
81120dc8:	1885883a 	add	r2,r3,r2
81120dcc:	d0a00f15 	stw	r2,-32708(gp)
81120dd0:	e0bffb17 	ldw	r2,-20(fp)
81120dd4:	e0bffc15 	stw	r2,-16(fp)
81120dd8:	e0bffc17 	ldw	r2,-16(fp)
81120ddc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81120de0:	e0bffd17 	ldw	r2,-12(fp)
} 
81120de4:	e037883a 	mov	sp,fp
81120de8:	df000017 	ldw	fp,0(sp)
81120dec:	dec00104 	addi	sp,sp,4
81120df0:	f800283a 	ret

81120df4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81120df4:	defffa04 	addi	sp,sp,-24
81120df8:	df000515 	stw	fp,20(sp)
81120dfc:	df000504 	addi	fp,sp,20
81120e00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120e04:	0005303a 	rdctl	r2,status
81120e08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120e0c:	e0fffc17 	ldw	r3,-16(fp)
81120e10:	00bfff84 	movi	r2,-2
81120e14:	1884703a 	and	r2,r3,r2
81120e18:	1001703a 	wrctl	status,r2
  
  return context;
81120e1c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81120e20:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81120e24:	e0bfff17 	ldw	r2,-4(fp)
81120e28:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
81120e2c:	e0bffd17 	ldw	r2,-12(fp)
81120e30:	10800017 	ldw	r2,0(r2)
81120e34:	e0fffd17 	ldw	r3,-12(fp)
81120e38:	18c00117 	ldw	r3,4(r3)
81120e3c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81120e40:	e0bffd17 	ldw	r2,-12(fp)
81120e44:	10800117 	ldw	r2,4(r2)
81120e48:	e0fffd17 	ldw	r3,-12(fp)
81120e4c:	18c00017 	ldw	r3,0(r3)
81120e50:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81120e54:	e0bffd17 	ldw	r2,-12(fp)
81120e58:	e0fffd17 	ldw	r3,-12(fp)
81120e5c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81120e60:	e0bffd17 	ldw	r2,-12(fp)
81120e64:	e0fffd17 	ldw	r3,-12(fp)
81120e68:	10c00015 	stw	r3,0(r2)
81120e6c:	e0bffb17 	ldw	r2,-20(fp)
81120e70:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120e74:	e0bffe17 	ldw	r2,-8(fp)
81120e78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81120e7c:	0001883a 	nop
81120e80:	e037883a 	mov	sp,fp
81120e84:	df000017 	ldw	fp,0(sp)
81120e88:	dec00104 	addi	sp,sp,4
81120e8c:	f800283a 	ret

81120e90 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81120e90:	defffb04 	addi	sp,sp,-20
81120e94:	dfc00415 	stw	ra,16(sp)
81120e98:	df000315 	stw	fp,12(sp)
81120e9c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81120ea0:	d0a01017 	ldw	r2,-32704(gp)
81120ea4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81120ea8:	d0a03e17 	ldw	r2,-32520(gp)
81120eac:	10800044 	addi	r2,r2,1
81120eb0:	d0a03e15 	stw	r2,-32520(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81120eb4:	00002e06 	br	81120f70 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
81120eb8:	e0bffd17 	ldw	r2,-12(fp)
81120ebc:	10800017 	ldw	r2,0(r2)
81120ec0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81120ec4:	e0bffd17 	ldw	r2,-12(fp)
81120ec8:	10800403 	ldbu	r2,16(r2)
81120ecc:	10803fcc 	andi	r2,r2,255
81120ed0:	10000426 	beq	r2,zero,81120ee4 <alt_tick+0x54>
81120ed4:	d0a03e17 	ldw	r2,-32520(gp)
81120ed8:	1000021e 	bne	r2,zero,81120ee4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
81120edc:	e0bffd17 	ldw	r2,-12(fp)
81120ee0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81120ee4:	e0bffd17 	ldw	r2,-12(fp)
81120ee8:	10800217 	ldw	r2,8(r2)
81120eec:	d0e03e17 	ldw	r3,-32520(gp)
81120ef0:	18801d36 	bltu	r3,r2,81120f68 <alt_tick+0xd8>
81120ef4:	e0bffd17 	ldw	r2,-12(fp)
81120ef8:	10800403 	ldbu	r2,16(r2)
81120efc:	10803fcc 	andi	r2,r2,255
81120f00:	1000191e 	bne	r2,zero,81120f68 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
81120f04:	e0bffd17 	ldw	r2,-12(fp)
81120f08:	10800317 	ldw	r2,12(r2)
81120f0c:	e0fffd17 	ldw	r3,-12(fp)
81120f10:	18c00517 	ldw	r3,20(r3)
81120f14:	1809883a 	mov	r4,r3
81120f18:	103ee83a 	callr	r2
81120f1c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
81120f20:	e0bfff17 	ldw	r2,-4(fp)
81120f24:	1000031e 	bne	r2,zero,81120f34 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
81120f28:	e13ffd17 	ldw	r4,-12(fp)
81120f2c:	1120df40 	call	81120df4 <alt_alarm_stop>
81120f30:	00000d06 	br	81120f68 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
81120f34:	e0bffd17 	ldw	r2,-12(fp)
81120f38:	10c00217 	ldw	r3,8(r2)
81120f3c:	e0bfff17 	ldw	r2,-4(fp)
81120f40:	1887883a 	add	r3,r3,r2
81120f44:	e0bffd17 	ldw	r2,-12(fp)
81120f48:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81120f4c:	e0bffd17 	ldw	r2,-12(fp)
81120f50:	10c00217 	ldw	r3,8(r2)
81120f54:	d0a03e17 	ldw	r2,-32520(gp)
81120f58:	1880032e 	bgeu	r3,r2,81120f68 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
81120f5c:	e0bffd17 	ldw	r2,-12(fp)
81120f60:	00c00044 	movi	r3,1
81120f64:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81120f68:	e0bffe17 	ldw	r2,-8(fp)
81120f6c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81120f70:	e0fffd17 	ldw	r3,-12(fp)
81120f74:	d0a01004 	addi	r2,gp,-32704
81120f78:	18bfcf1e 	bne	r3,r2,81120eb8 <__reset+0xfb100eb8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81120f7c:	0001883a 	nop
}
81120f80:	0001883a 	nop
81120f84:	e037883a 	mov	sp,fp
81120f88:	dfc00117 	ldw	ra,4(sp)
81120f8c:	df000017 	ldw	fp,0(sp)
81120f90:	dec00204 	addi	sp,sp,8
81120f94:	f800283a 	ret

81120f98 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
81120f98:	defffd04 	addi	sp,sp,-12
81120f9c:	dfc00215 	stw	ra,8(sp)
81120fa0:	df000115 	stw	fp,4(sp)
81120fa4:	df000104 	addi	fp,sp,4
81120fa8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
81120fac:	e13fff17 	ldw	r4,-4(fp)
81120fb0:	11201b40 	call	811201b4 <alt_busy_sleep>
}
81120fb4:	e037883a 	mov	sp,fp
81120fb8:	dfc00117 	ldw	ra,4(sp)
81120fbc:	df000017 	ldw	fp,0(sp)
81120fc0:	dec00204 	addi	sp,sp,8
81120fc4:	f800283a 	ret

81120fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81120fc8:	defffe04 	addi	sp,sp,-8
81120fcc:	dfc00115 	stw	ra,4(sp)
81120fd0:	df000015 	stw	fp,0(sp)
81120fd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81120fd8:	d0a00d17 	ldw	r2,-32716(gp)
81120fdc:	10000326 	beq	r2,zero,81120fec <alt_get_errno+0x24>
81120fe0:	d0a00d17 	ldw	r2,-32716(gp)
81120fe4:	103ee83a 	callr	r2
81120fe8:	00000106 	br	81120ff0 <alt_get_errno+0x28>
81120fec:	d0a03204 	addi	r2,gp,-32568
}
81120ff0:	e037883a 	mov	sp,fp
81120ff4:	dfc00117 	ldw	ra,4(sp)
81120ff8:	df000017 	ldw	fp,0(sp)
81120ffc:	dec00204 	addi	sp,sp,8
81121000:	f800283a 	ret

81121004 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
81121004:	defff904 	addi	sp,sp,-28
81121008:	dfc00615 	stw	ra,24(sp)
8112100c:	df000515 	stw	fp,20(sp)
81121010:	df000504 	addi	fp,sp,20
81121014:	e13ffd15 	stw	r4,-12(fp)
81121018:	e17ffe15 	stw	r5,-8(fp)
8112101c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81121020:	e0bffd17 	ldw	r2,-12(fp)
81121024:	10000616 	blt	r2,zero,81121040 <write+0x3c>
81121028:	e0bffd17 	ldw	r2,-12(fp)
8112102c:	10c00324 	muli	r3,r2,12
81121030:	00a044b4 	movhi	r2,33042
81121034:	109e0904 	addi	r2,r2,30756
81121038:	1885883a 	add	r2,r3,r2
8112103c:	00000106 	br	81121044 <write+0x40>
81121040:	0005883a 	mov	r2,zero
81121044:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81121048:	e0bffb17 	ldw	r2,-20(fp)
8112104c:	10002126 	beq	r2,zero,811210d4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81121050:	e0bffb17 	ldw	r2,-20(fp)
81121054:	10800217 	ldw	r2,8(r2)
81121058:	108000cc 	andi	r2,r2,3
8112105c:	10001826 	beq	r2,zero,811210c0 <write+0xbc>
81121060:	e0bffb17 	ldw	r2,-20(fp)
81121064:	10800017 	ldw	r2,0(r2)
81121068:	10800617 	ldw	r2,24(r2)
8112106c:	10001426 	beq	r2,zero,811210c0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81121070:	e0bffb17 	ldw	r2,-20(fp)
81121074:	10800017 	ldw	r2,0(r2)
81121078:	10800617 	ldw	r2,24(r2)
8112107c:	e0ffff17 	ldw	r3,-4(fp)
81121080:	180d883a 	mov	r6,r3
81121084:	e17ffe17 	ldw	r5,-8(fp)
81121088:	e13ffb17 	ldw	r4,-20(fp)
8112108c:	103ee83a 	callr	r2
81121090:	e0bffc15 	stw	r2,-16(fp)
81121094:	e0bffc17 	ldw	r2,-16(fp)
81121098:	1000070e 	bge	r2,zero,811210b8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
8112109c:	1120fc80 	call	81120fc8 <alt_get_errno>
811210a0:	1007883a 	mov	r3,r2
811210a4:	e0bffc17 	ldw	r2,-16(fp)
811210a8:	0085c83a 	sub	r2,zero,r2
811210ac:	18800015 	stw	r2,0(r3)
        return -1;
811210b0:	00bfffc4 	movi	r2,-1
811210b4:	00000c06 	br	811210e8 <write+0xe4>
      }
      return rval;
811210b8:	e0bffc17 	ldw	r2,-16(fp)
811210bc:	00000a06 	br	811210e8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
811210c0:	1120fc80 	call	81120fc8 <alt_get_errno>
811210c4:	1007883a 	mov	r3,r2
811210c8:	00800344 	movi	r2,13
811210cc:	18800015 	stw	r2,0(r3)
811210d0:	00000406 	br	811210e4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
811210d4:	1120fc80 	call	81120fc8 <alt_get_errno>
811210d8:	1007883a 	mov	r3,r2
811210dc:	00801444 	movi	r2,81
811210e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
811210e4:	00bfffc4 	movi	r2,-1
}
811210e8:	e037883a 	mov	sp,fp
811210ec:	dfc00117 	ldw	ra,4(sp)
811210f0:	df000017 	ldw	fp,0(sp)
811210f4:	dec00204 	addi	sp,sp,8
811210f8:	f800283a 	ret

811210fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
811210fc:	defffd04 	addi	sp,sp,-12
81121100:	dfc00215 	stw	ra,8(sp)
81121104:	df000115 	stw	fp,4(sp)
81121108:	df000104 	addi	fp,sp,4
8112110c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
81121110:	d1600a04 	addi	r5,gp,-32728
81121114:	e13fff17 	ldw	r4,-4(fp)
81121118:	11246680 	call	81124668 <alt_dev_llist_insert>
}
8112111c:	e037883a 	mov	sp,fp
81121120:	dfc00117 	ldw	ra,4(sp)
81121124:	df000017 	ldw	fp,0(sp)
81121128:	dec00204 	addi	sp,sp,8
8112112c:	f800283a 	ret

81121130 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
81121130:	defffd04 	addi	sp,sp,-12
81121134:	dfc00215 	stw	ra,8(sp)
81121138:	df000115 	stw	fp,4(sp)
8112113c:	df000104 	addi	fp,sp,4
81121140:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
81121144:	11250500 	call	81125050 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
81121148:	00800044 	movi	r2,1
8112114c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
81121150:	0001883a 	nop
81121154:	e037883a 	mov	sp,fp
81121158:	dfc00117 	ldw	ra,4(sp)
8112115c:	df000017 	ldw	fp,0(sp)
81121160:	dec00204 	addi	sp,sp,8
81121164:	f800283a 	ret

81121168 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
81121168:	defffe04 	addi	sp,sp,-8
8112116c:	dfc00115 	stw	ra,4(sp)
81121170:	df000015 	stw	fp,0(sp)
81121174:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
81121178:	01c0fa04 	movi	r7,1000
8112117c:	01800304 	movi	r6,12
81121180:	000b883a 	mov	r5,zero
81121184:	01200034 	movhi	r4,32768
81121188:	21022004 	addi	r4,r4,2176
8112118c:	1121d300 	call	81121d30 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81121190:	018002c4 	movi	r6,11
81121194:	000b883a 	mov	r5,zero
81121198:	012044b4 	movhi	r4,33042
8112119c:	211e7304 	addi	r4,r4,31180
811211a0:	11213b40 	call	811213b4 <altera_avalon_jtag_uart_init>
811211a4:	012044b4 	movhi	r4,33042
811211a8:	211e6904 	addi	r4,r4,31140
811211ac:	11210fc0 	call	811210fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
811211b0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
811211b4:	018003c4 	movi	r6,15
811211b8:	000b883a 	mov	r5,zero
811211bc:	012044f4 	movhi	r4,33043
811211c0:	21228b04 	addi	r4,r4,-30164
811211c4:	1121ebc0 	call	81121ebc <altera_avalon_uart_init>
811211c8:	012044f4 	movhi	r4,33043
811211cc:	21228104 	addi	r4,r4,-30204
811211d0:	11210fc0 	call	811210fc <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
811211d4:	00a044f4 	movhi	r2,33043
811211d8:	10a2b204 	addi	r2,r2,-30008
811211dc:	10c00717 	ldw	r3,28(r2)
811211e0:	00a044f4 	movhi	r2,33043
811211e4:	10a2b204 	addi	r2,r2,-30008
811211e8:	10800817 	ldw	r2,32(r2)
811211ec:	100d883a 	mov	r6,r2
811211f0:	180b883a 	mov	r5,r3
811211f4:	012044f4 	movhi	r4,33043
811211f8:	2122b204 	addi	r4,r4,-30008
811211fc:	11242500 	call	81124250 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
81121200:	00a044f4 	movhi	r2,33043
81121204:	10a2ca04 	addi	r2,r2,-29912
81121208:	10c00717 	ldw	r3,28(r2)
8112120c:	00a044f4 	movhi	r2,33043
81121210:	10a2ca04 	addi	r2,r2,-29912
81121214:	10800817 	ldw	r2,32(r2)
81121218:	100d883a 	mov	r6,r2
8112121c:	180b883a 	mov	r5,r3
81121220:	012044f4 	movhi	r4,33043
81121224:	2122ca04 	addi	r4,r4,-29912
81121228:	11242500 	call	81124250 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
8112122c:	012044f4 	movhi	r4,33043
81121230:	2122e204 	addi	r4,r4,-29816
81121234:	11210fc0 	call	811210fc <alt_dev_reg>
}
81121238:	0001883a 	nop
8112123c:	e037883a 	mov	sp,fp
81121240:	dfc00117 	ldw	ra,4(sp)
81121244:	df000017 	ldw	fp,0(sp)
81121248:	dec00204 	addi	sp,sp,8
8112124c:	f800283a 	ret

81121250 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81121250:	defffa04 	addi	sp,sp,-24
81121254:	dfc00515 	stw	ra,20(sp)
81121258:	df000415 	stw	fp,16(sp)
8112125c:	df000404 	addi	fp,sp,16
81121260:	e13ffd15 	stw	r4,-12(fp)
81121264:	e17ffe15 	stw	r5,-8(fp)
81121268:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8112126c:	e0bffd17 	ldw	r2,-12(fp)
81121270:	10800017 	ldw	r2,0(r2)
81121274:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
81121278:	e0bffc17 	ldw	r2,-16(fp)
8112127c:	10c00a04 	addi	r3,r2,40
81121280:	e0bffd17 	ldw	r2,-12(fp)
81121284:	10800217 	ldw	r2,8(r2)
81121288:	100f883a 	mov	r7,r2
8112128c:	e1bfff17 	ldw	r6,-4(fp)
81121290:	e17ffe17 	ldw	r5,-8(fp)
81121294:	1809883a 	mov	r4,r3
81121298:	11218780 	call	81121878 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8112129c:	e037883a 	mov	sp,fp
811212a0:	dfc00117 	ldw	ra,4(sp)
811212a4:	df000017 	ldw	fp,0(sp)
811212a8:	dec00204 	addi	sp,sp,8
811212ac:	f800283a 	ret

811212b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
811212b0:	defffa04 	addi	sp,sp,-24
811212b4:	dfc00515 	stw	ra,20(sp)
811212b8:	df000415 	stw	fp,16(sp)
811212bc:	df000404 	addi	fp,sp,16
811212c0:	e13ffd15 	stw	r4,-12(fp)
811212c4:	e17ffe15 	stw	r5,-8(fp)
811212c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811212cc:	e0bffd17 	ldw	r2,-12(fp)
811212d0:	10800017 	ldw	r2,0(r2)
811212d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
811212d8:	e0bffc17 	ldw	r2,-16(fp)
811212dc:	10c00a04 	addi	r3,r2,40
811212e0:	e0bffd17 	ldw	r2,-12(fp)
811212e4:	10800217 	ldw	r2,8(r2)
811212e8:	100f883a 	mov	r7,r2
811212ec:	e1bfff17 	ldw	r6,-4(fp)
811212f0:	e17ffe17 	ldw	r5,-8(fp)
811212f4:	1809883a 	mov	r4,r3
811212f8:	1121a940 	call	81121a94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
811212fc:	e037883a 	mov	sp,fp
81121300:	dfc00117 	ldw	ra,4(sp)
81121304:	df000017 	ldw	fp,0(sp)
81121308:	dec00204 	addi	sp,sp,8
8112130c:	f800283a 	ret

81121310 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
81121310:	defffc04 	addi	sp,sp,-16
81121314:	dfc00315 	stw	ra,12(sp)
81121318:	df000215 	stw	fp,8(sp)
8112131c:	df000204 	addi	fp,sp,8
81121320:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81121324:	e0bfff17 	ldw	r2,-4(fp)
81121328:	10800017 	ldw	r2,0(r2)
8112132c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
81121330:	e0bffe17 	ldw	r2,-8(fp)
81121334:	10c00a04 	addi	r3,r2,40
81121338:	e0bfff17 	ldw	r2,-4(fp)
8112133c:	10800217 	ldw	r2,8(r2)
81121340:	100b883a 	mov	r5,r2
81121344:	1809883a 	mov	r4,r3
81121348:	11217200 	call	81121720 <altera_avalon_jtag_uart_close>
}
8112134c:	e037883a 	mov	sp,fp
81121350:	dfc00117 	ldw	ra,4(sp)
81121354:	df000017 	ldw	fp,0(sp)
81121358:	dec00204 	addi	sp,sp,8
8112135c:	f800283a 	ret

81121360 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81121360:	defffa04 	addi	sp,sp,-24
81121364:	dfc00515 	stw	ra,20(sp)
81121368:	df000415 	stw	fp,16(sp)
8112136c:	df000404 	addi	fp,sp,16
81121370:	e13ffd15 	stw	r4,-12(fp)
81121374:	e17ffe15 	stw	r5,-8(fp)
81121378:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8112137c:	e0bffd17 	ldw	r2,-12(fp)
81121380:	10800017 	ldw	r2,0(r2)
81121384:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81121388:	e0bffc17 	ldw	r2,-16(fp)
8112138c:	10800a04 	addi	r2,r2,40
81121390:	e1bfff17 	ldw	r6,-4(fp)
81121394:	e17ffe17 	ldw	r5,-8(fp)
81121398:	1009883a 	mov	r4,r2
8112139c:	11217880 	call	81121788 <altera_avalon_jtag_uart_ioctl>
}
811213a0:	e037883a 	mov	sp,fp
811213a4:	dfc00117 	ldw	ra,4(sp)
811213a8:	df000017 	ldw	fp,0(sp)
811213ac:	dec00204 	addi	sp,sp,8
811213b0:	f800283a 	ret

811213b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
811213b4:	defffa04 	addi	sp,sp,-24
811213b8:	dfc00515 	stw	ra,20(sp)
811213bc:	df000415 	stw	fp,16(sp)
811213c0:	df000404 	addi	fp,sp,16
811213c4:	e13ffd15 	stw	r4,-12(fp)
811213c8:	e17ffe15 	stw	r5,-8(fp)
811213cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
811213d0:	e0bffd17 	ldw	r2,-12(fp)
811213d4:	00c00044 	movi	r3,1
811213d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
811213dc:	e0bffd17 	ldw	r2,-12(fp)
811213e0:	10800017 	ldw	r2,0(r2)
811213e4:	10800104 	addi	r2,r2,4
811213e8:	1007883a 	mov	r3,r2
811213ec:	e0bffd17 	ldw	r2,-12(fp)
811213f0:	10800817 	ldw	r2,32(r2)
811213f4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
811213f8:	e0bffe17 	ldw	r2,-8(fp)
811213fc:	e0ffff17 	ldw	r3,-4(fp)
81121400:	d8000015 	stw	zero,0(sp)
81121404:	e1fffd17 	ldw	r7,-12(fp)
81121408:	01a044b4 	movhi	r6,33042
8112140c:	31851d04 	addi	r6,r6,5236
81121410:	180b883a 	mov	r5,r3
81121414:	1009883a 	mov	r4,r2
81121418:	1124a080 	call	81124a08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8112141c:	e0bffd17 	ldw	r2,-12(fp)
81121420:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
81121424:	e0bffd17 	ldw	r2,-12(fp)
81121428:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8112142c:	d0e03d17 	ldw	r3,-32524(gp)
81121430:	e1fffd17 	ldw	r7,-12(fp)
81121434:	01a044b4 	movhi	r6,33042
81121438:	3185a004 	addi	r6,r6,5760
8112143c:	180b883a 	mov	r5,r3
81121440:	1009883a 	mov	r4,r2
81121444:	11245000 	call	81124500 <alt_alarm_start>
81121448:	1000040e 	bge	r2,zero,8112145c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8112144c:	e0fffd17 	ldw	r3,-12(fp)
81121450:	00a00034 	movhi	r2,32768
81121454:	10bfffc4 	addi	r2,r2,-1
81121458:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8112145c:	0001883a 	nop
81121460:	e037883a 	mov	sp,fp
81121464:	dfc00117 	ldw	ra,4(sp)
81121468:	df000017 	ldw	fp,0(sp)
8112146c:	dec00204 	addi	sp,sp,8
81121470:	f800283a 	ret

81121474 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81121474:	defff804 	addi	sp,sp,-32
81121478:	df000715 	stw	fp,28(sp)
8112147c:	df000704 	addi	fp,sp,28
81121480:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81121484:	e0bfff17 	ldw	r2,-4(fp)
81121488:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
8112148c:	e0bffb17 	ldw	r2,-20(fp)
81121490:	10800017 	ldw	r2,0(r2)
81121494:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81121498:	e0bffc17 	ldw	r2,-16(fp)
8112149c:	10800104 	addi	r2,r2,4
811214a0:	10800037 	ldwio	r2,0(r2)
811214a4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
811214a8:	e0bffd17 	ldw	r2,-12(fp)
811214ac:	1080c00c 	andi	r2,r2,768
811214b0:	10006d26 	beq	r2,zero,81121668 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
811214b4:	e0bffd17 	ldw	r2,-12(fp)
811214b8:	1080400c 	andi	r2,r2,256
811214bc:	10003526 	beq	r2,zero,81121594 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
811214c0:	00800074 	movhi	r2,1
811214c4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811214c8:	e0bffb17 	ldw	r2,-20(fp)
811214cc:	10800a17 	ldw	r2,40(r2)
811214d0:	10800044 	addi	r2,r2,1
811214d4:	1081ffcc 	andi	r2,r2,2047
811214d8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
811214dc:	e0bffb17 	ldw	r2,-20(fp)
811214e0:	10c00b17 	ldw	r3,44(r2)
811214e4:	e0bffe17 	ldw	r2,-8(fp)
811214e8:	18801526 	beq	r3,r2,81121540 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
811214ec:	e0bffc17 	ldw	r2,-16(fp)
811214f0:	10800037 	ldwio	r2,0(r2)
811214f4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
811214f8:	e0bff917 	ldw	r2,-28(fp)
811214fc:	10a0000c 	andi	r2,r2,32768
81121500:	10001126 	beq	r2,zero,81121548 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
81121504:	e0bffb17 	ldw	r2,-20(fp)
81121508:	10800a17 	ldw	r2,40(r2)
8112150c:	e0fff917 	ldw	r3,-28(fp)
81121510:	1809883a 	mov	r4,r3
81121514:	e0fffb17 	ldw	r3,-20(fp)
81121518:	1885883a 	add	r2,r3,r2
8112151c:	10800e04 	addi	r2,r2,56
81121520:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81121524:	e0bffb17 	ldw	r2,-20(fp)
81121528:	10800a17 	ldw	r2,40(r2)
8112152c:	10800044 	addi	r2,r2,1
81121530:	10c1ffcc 	andi	r3,r2,2047
81121534:	e0bffb17 	ldw	r2,-20(fp)
81121538:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
8112153c:	003fe206 	br	811214c8 <__reset+0xfb1014c8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81121540:	0001883a 	nop
81121544:	00000106 	br	8112154c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81121548:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8112154c:	e0bff917 	ldw	r2,-28(fp)
81121550:	10bfffec 	andhi	r2,r2,65535
81121554:	10000f26 	beq	r2,zero,81121594 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81121558:	e0bffb17 	ldw	r2,-20(fp)
8112155c:	10c00817 	ldw	r3,32(r2)
81121560:	00bfff84 	movi	r2,-2
81121564:	1886703a 	and	r3,r3,r2
81121568:	e0bffb17 	ldw	r2,-20(fp)
8112156c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81121570:	e0bffc17 	ldw	r2,-16(fp)
81121574:	10800104 	addi	r2,r2,4
81121578:	1007883a 	mov	r3,r2
8112157c:	e0bffb17 	ldw	r2,-20(fp)
81121580:	10800817 	ldw	r2,32(r2)
81121584:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81121588:	e0bffc17 	ldw	r2,-16(fp)
8112158c:	10800104 	addi	r2,r2,4
81121590:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81121594:	e0bffd17 	ldw	r2,-12(fp)
81121598:	1080800c 	andi	r2,r2,512
8112159c:	103fbe26 	beq	r2,zero,81121498 <__reset+0xfb101498>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
811215a0:	e0bffd17 	ldw	r2,-12(fp)
811215a4:	1004d43a 	srli	r2,r2,16
811215a8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
811215ac:	00001406 	br	81121600 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
811215b0:	e0bffc17 	ldw	r2,-16(fp)
811215b4:	e0fffb17 	ldw	r3,-20(fp)
811215b8:	18c00d17 	ldw	r3,52(r3)
811215bc:	e13ffb17 	ldw	r4,-20(fp)
811215c0:	20c7883a 	add	r3,r4,r3
811215c4:	18c20e04 	addi	r3,r3,2104
811215c8:	18c00003 	ldbu	r3,0(r3)
811215cc:	18c03fcc 	andi	r3,r3,255
811215d0:	18c0201c 	xori	r3,r3,128
811215d4:	18ffe004 	addi	r3,r3,-128
811215d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811215dc:	e0bffb17 	ldw	r2,-20(fp)
811215e0:	10800d17 	ldw	r2,52(r2)
811215e4:	10800044 	addi	r2,r2,1
811215e8:	10c1ffcc 	andi	r3,r2,2047
811215ec:	e0bffb17 	ldw	r2,-20(fp)
811215f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
811215f4:	e0bffa17 	ldw	r2,-24(fp)
811215f8:	10bfffc4 	addi	r2,r2,-1
811215fc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
81121600:	e0bffa17 	ldw	r2,-24(fp)
81121604:	10000526 	beq	r2,zero,8112161c <altera_avalon_jtag_uart_irq+0x1a8>
81121608:	e0bffb17 	ldw	r2,-20(fp)
8112160c:	10c00d17 	ldw	r3,52(r2)
81121610:	e0bffb17 	ldw	r2,-20(fp)
81121614:	10800c17 	ldw	r2,48(r2)
81121618:	18bfe51e 	bne	r3,r2,811215b0 <__reset+0xfb1015b0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
8112161c:	e0bffa17 	ldw	r2,-24(fp)
81121620:	103f9d26 	beq	r2,zero,81121498 <__reset+0xfb101498>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81121624:	e0bffb17 	ldw	r2,-20(fp)
81121628:	10c00817 	ldw	r3,32(r2)
8112162c:	00bfff44 	movi	r2,-3
81121630:	1886703a 	and	r3,r3,r2
81121634:	e0bffb17 	ldw	r2,-20(fp)
81121638:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8112163c:	e0bffb17 	ldw	r2,-20(fp)
81121640:	10800017 	ldw	r2,0(r2)
81121644:	10800104 	addi	r2,r2,4
81121648:	1007883a 	mov	r3,r2
8112164c:	e0bffb17 	ldw	r2,-20(fp)
81121650:	10800817 	ldw	r2,32(r2)
81121654:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81121658:	e0bffc17 	ldw	r2,-16(fp)
8112165c:	10800104 	addi	r2,r2,4
81121660:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81121664:	003f8c06 	br	81121498 <__reset+0xfb101498>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81121668:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8112166c:	0001883a 	nop
81121670:	e037883a 	mov	sp,fp
81121674:	df000017 	ldw	fp,0(sp)
81121678:	dec00104 	addi	sp,sp,4
8112167c:	f800283a 	ret

81121680 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81121680:	defff804 	addi	sp,sp,-32
81121684:	df000715 	stw	fp,28(sp)
81121688:	df000704 	addi	fp,sp,28
8112168c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81121690:	e0bffb17 	ldw	r2,-20(fp)
81121694:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81121698:	e0bff917 	ldw	r2,-28(fp)
8112169c:	10800017 	ldw	r2,0(r2)
811216a0:	10800104 	addi	r2,r2,4
811216a4:	10800037 	ldwio	r2,0(r2)
811216a8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
811216ac:	e0bffa17 	ldw	r2,-24(fp)
811216b0:	1081000c 	andi	r2,r2,1024
811216b4:	10000b26 	beq	r2,zero,811216e4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
811216b8:	e0bff917 	ldw	r2,-28(fp)
811216bc:	10800017 	ldw	r2,0(r2)
811216c0:	10800104 	addi	r2,r2,4
811216c4:	1007883a 	mov	r3,r2
811216c8:	e0bff917 	ldw	r2,-28(fp)
811216cc:	10800817 	ldw	r2,32(r2)
811216d0:	10810014 	ori	r2,r2,1024
811216d4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
811216d8:	e0bff917 	ldw	r2,-28(fp)
811216dc:	10000915 	stw	zero,36(r2)
811216e0:	00000a06 	br	8112170c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
811216e4:	e0bff917 	ldw	r2,-28(fp)
811216e8:	10c00917 	ldw	r3,36(r2)
811216ec:	00a00034 	movhi	r2,32768
811216f0:	10bfff04 	addi	r2,r2,-4
811216f4:	10c00536 	bltu	r2,r3,8112170c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
811216f8:	e0bff917 	ldw	r2,-28(fp)
811216fc:	10800917 	ldw	r2,36(r2)
81121700:	10c00044 	addi	r3,r2,1
81121704:	e0bff917 	ldw	r2,-28(fp)
81121708:	10c00915 	stw	r3,36(r2)
8112170c:	d0a03d17 	ldw	r2,-32524(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
81121710:	e037883a 	mov	sp,fp
81121714:	df000017 	ldw	fp,0(sp)
81121718:	dec00104 	addi	sp,sp,4
8112171c:	f800283a 	ret

81121720 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
81121720:	defffd04 	addi	sp,sp,-12
81121724:	df000215 	stw	fp,8(sp)
81121728:	df000204 	addi	fp,sp,8
8112172c:	e13ffe15 	stw	r4,-8(fp)
81121730:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81121734:	00000506 	br	8112174c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
81121738:	e0bfff17 	ldw	r2,-4(fp)
8112173c:	1090000c 	andi	r2,r2,16384
81121740:	10000226 	beq	r2,zero,8112174c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
81121744:	00bffd44 	movi	r2,-11
81121748:	00000b06 	br	81121778 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8112174c:	e0bffe17 	ldw	r2,-8(fp)
81121750:	10c00d17 	ldw	r3,52(r2)
81121754:	e0bffe17 	ldw	r2,-8(fp)
81121758:	10800c17 	ldw	r2,48(r2)
8112175c:	18800526 	beq	r3,r2,81121774 <altera_avalon_jtag_uart_close+0x54>
81121760:	e0bffe17 	ldw	r2,-8(fp)
81121764:	10c00917 	ldw	r3,36(r2)
81121768:	e0bffe17 	ldw	r2,-8(fp)
8112176c:	10800117 	ldw	r2,4(r2)
81121770:	18bff136 	bltu	r3,r2,81121738 <__reset+0xfb101738>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81121774:	0005883a 	mov	r2,zero
}
81121778:	e037883a 	mov	sp,fp
8112177c:	df000017 	ldw	fp,0(sp)
81121780:	dec00104 	addi	sp,sp,4
81121784:	f800283a 	ret

81121788 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81121788:	defffa04 	addi	sp,sp,-24
8112178c:	df000515 	stw	fp,20(sp)
81121790:	df000504 	addi	fp,sp,20
81121794:	e13ffd15 	stw	r4,-12(fp)
81121798:	e17ffe15 	stw	r5,-8(fp)
8112179c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
811217a0:	00bff9c4 	movi	r2,-25
811217a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
811217a8:	e0bffe17 	ldw	r2,-8(fp)
811217ac:	10da8060 	cmpeqi	r3,r2,27137
811217b0:	1800031e 	bne	r3,zero,811217c0 <altera_avalon_jtag_uart_ioctl+0x38>
811217b4:	109a80a0 	cmpeqi	r2,r2,27138
811217b8:	1000181e 	bne	r2,zero,8112181c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
811217bc:	00002906 	br	81121864 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
811217c0:	e0bffd17 	ldw	r2,-12(fp)
811217c4:	10c00117 	ldw	r3,4(r2)
811217c8:	00a00034 	movhi	r2,32768
811217cc:	10bfffc4 	addi	r2,r2,-1
811217d0:	18802126 	beq	r3,r2,81121858 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
811217d4:	e0bfff17 	ldw	r2,-4(fp)
811217d8:	10800017 	ldw	r2,0(r2)
811217dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
811217e0:	e0bffc17 	ldw	r2,-16(fp)
811217e4:	10800090 	cmplti	r2,r2,2
811217e8:	1000061e 	bne	r2,zero,81121804 <altera_avalon_jtag_uart_ioctl+0x7c>
811217ec:	e0fffc17 	ldw	r3,-16(fp)
811217f0:	00a00034 	movhi	r2,32768
811217f4:	10bfffc4 	addi	r2,r2,-1
811217f8:	18800226 	beq	r3,r2,81121804 <altera_avalon_jtag_uart_ioctl+0x7c>
811217fc:	e0bffc17 	ldw	r2,-16(fp)
81121800:	00000206 	br	8112180c <altera_avalon_jtag_uart_ioctl+0x84>
81121804:	00a00034 	movhi	r2,32768
81121808:	10bfff84 	addi	r2,r2,-2
8112180c:	e0fffd17 	ldw	r3,-12(fp)
81121810:	18800115 	stw	r2,4(r3)
      rc = 0;
81121814:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81121818:	00000f06 	br	81121858 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8112181c:	e0bffd17 	ldw	r2,-12(fp)
81121820:	10c00117 	ldw	r3,4(r2)
81121824:	00a00034 	movhi	r2,32768
81121828:	10bfffc4 	addi	r2,r2,-1
8112182c:	18800c26 	beq	r3,r2,81121860 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
81121830:	e0bffd17 	ldw	r2,-12(fp)
81121834:	10c00917 	ldw	r3,36(r2)
81121838:	e0bffd17 	ldw	r2,-12(fp)
8112183c:	10800117 	ldw	r2,4(r2)
81121840:	1885803a 	cmpltu	r2,r3,r2
81121844:	10c03fcc 	andi	r3,r2,255
81121848:	e0bfff17 	ldw	r2,-4(fp)
8112184c:	10c00015 	stw	r3,0(r2)
      rc = 0;
81121850:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81121854:	00000206 	br	81121860 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81121858:	0001883a 	nop
8112185c:	00000106 	br	81121864 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81121860:	0001883a 	nop

  default:
    break;
  }

  return rc;
81121864:	e0bffb17 	ldw	r2,-20(fp)
}
81121868:	e037883a 	mov	sp,fp
8112186c:	df000017 	ldw	fp,0(sp)
81121870:	dec00104 	addi	sp,sp,4
81121874:	f800283a 	ret

81121878 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81121878:	defff304 	addi	sp,sp,-52
8112187c:	dfc00c15 	stw	ra,48(sp)
81121880:	df000b15 	stw	fp,44(sp)
81121884:	df000b04 	addi	fp,sp,44
81121888:	e13ffc15 	stw	r4,-16(fp)
8112188c:	e17ffd15 	stw	r5,-12(fp)
81121890:	e1bffe15 	stw	r6,-8(fp)
81121894:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81121898:	e0bffd17 	ldw	r2,-12(fp)
8112189c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
811218a0:	00004706 	br	811219c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
811218a4:	e0bffc17 	ldw	r2,-16(fp)
811218a8:	10800a17 	ldw	r2,40(r2)
811218ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
811218b0:	e0bffc17 	ldw	r2,-16(fp)
811218b4:	10800b17 	ldw	r2,44(r2)
811218b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
811218bc:	e0fff717 	ldw	r3,-36(fp)
811218c0:	e0bff817 	ldw	r2,-32(fp)
811218c4:	18800536 	bltu	r3,r2,811218dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
811218c8:	e0fff717 	ldw	r3,-36(fp)
811218cc:	e0bff817 	ldw	r2,-32(fp)
811218d0:	1885c83a 	sub	r2,r3,r2
811218d4:	e0bff615 	stw	r2,-40(fp)
811218d8:	00000406 	br	811218ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
811218dc:	00c20004 	movi	r3,2048
811218e0:	e0bff817 	ldw	r2,-32(fp)
811218e4:	1885c83a 	sub	r2,r3,r2
811218e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
811218ec:	e0bff617 	ldw	r2,-40(fp)
811218f0:	10001e26 	beq	r2,zero,8112196c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
811218f4:	e0fffe17 	ldw	r3,-8(fp)
811218f8:	e0bff617 	ldw	r2,-40(fp)
811218fc:	1880022e 	bgeu	r3,r2,81121908 <altera_avalon_jtag_uart_read+0x90>
        n = space;
81121900:	e0bffe17 	ldw	r2,-8(fp)
81121904:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
81121908:	e0bffc17 	ldw	r2,-16(fp)
8112190c:	10c00e04 	addi	r3,r2,56
81121910:	e0bff817 	ldw	r2,-32(fp)
81121914:	1885883a 	add	r2,r3,r2
81121918:	e1bff617 	ldw	r6,-40(fp)
8112191c:	100b883a 	mov	r5,r2
81121920:	e13ff517 	ldw	r4,-44(fp)
81121924:	11111480 	call	81111148 <memcpy>
      ptr   += n;
81121928:	e0fff517 	ldw	r3,-44(fp)
8112192c:	e0bff617 	ldw	r2,-40(fp)
81121930:	1885883a 	add	r2,r3,r2
81121934:	e0bff515 	stw	r2,-44(fp)
      space -= n;
81121938:	e0fffe17 	ldw	r3,-8(fp)
8112193c:	e0bff617 	ldw	r2,-40(fp)
81121940:	1885c83a 	sub	r2,r3,r2
81121944:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81121948:	e0fff817 	ldw	r3,-32(fp)
8112194c:	e0bff617 	ldw	r2,-40(fp)
81121950:	1885883a 	add	r2,r3,r2
81121954:	10c1ffcc 	andi	r3,r2,2047
81121958:	e0bffc17 	ldw	r2,-16(fp)
8112195c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
81121960:	e0bffe17 	ldw	r2,-8(fp)
81121964:	00bfcf16 	blt	zero,r2,811218a4 <__reset+0xfb1018a4>
81121968:	00000106 	br	81121970 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8112196c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81121970:	e0fff517 	ldw	r3,-44(fp)
81121974:	e0bffd17 	ldw	r2,-12(fp)
81121978:	1880141e 	bne	r3,r2,811219cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8112197c:	e0bfff17 	ldw	r2,-4(fp)
81121980:	1090000c 	andi	r2,r2,16384
81121984:	1000131e 	bne	r2,zero,811219d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81121988:	0001883a 	nop
8112198c:	e0bffc17 	ldw	r2,-16(fp)
81121990:	10c00a17 	ldw	r3,40(r2)
81121994:	e0bff717 	ldw	r2,-36(fp)
81121998:	1880051e 	bne	r3,r2,811219b0 <altera_avalon_jtag_uart_read+0x138>
8112199c:	e0bffc17 	ldw	r2,-16(fp)
811219a0:	10c00917 	ldw	r3,36(r2)
811219a4:	e0bffc17 	ldw	r2,-16(fp)
811219a8:	10800117 	ldw	r2,4(r2)
811219ac:	18bff736 	bltu	r3,r2,8112198c <__reset+0xfb10198c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
811219b0:	e0bffc17 	ldw	r2,-16(fp)
811219b4:	10c00a17 	ldw	r3,40(r2)
811219b8:	e0bff717 	ldw	r2,-36(fp)
811219bc:	18800726 	beq	r3,r2,811219dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
811219c0:	e0bffe17 	ldw	r2,-8(fp)
811219c4:	00bfb716 	blt	zero,r2,811218a4 <__reset+0xfb1018a4>
811219c8:	00000506 	br	811219e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
811219cc:	0001883a 	nop
811219d0:	00000306 	br	811219e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
811219d4:	0001883a 	nop
811219d8:	00000106 	br	811219e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
811219dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
811219e0:	e0fff517 	ldw	r3,-44(fp)
811219e4:	e0bffd17 	ldw	r2,-12(fp)
811219e8:	18801826 	beq	r3,r2,81121a4c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811219ec:	0005303a 	rdctl	r2,status
811219f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811219f4:	e0fffb17 	ldw	r3,-20(fp)
811219f8:	00bfff84 	movi	r2,-2
811219fc:	1884703a 	and	r2,r3,r2
81121a00:	1001703a 	wrctl	status,r2
  
  return context;
81121a04:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
81121a08:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81121a0c:	e0bffc17 	ldw	r2,-16(fp)
81121a10:	10800817 	ldw	r2,32(r2)
81121a14:	10c00054 	ori	r3,r2,1
81121a18:	e0bffc17 	ldw	r2,-16(fp)
81121a1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81121a20:	e0bffc17 	ldw	r2,-16(fp)
81121a24:	10800017 	ldw	r2,0(r2)
81121a28:	10800104 	addi	r2,r2,4
81121a2c:	1007883a 	mov	r3,r2
81121a30:	e0bffc17 	ldw	r2,-16(fp)
81121a34:	10800817 	ldw	r2,32(r2)
81121a38:	18800035 	stwio	r2,0(r3)
81121a3c:	e0bffa17 	ldw	r2,-24(fp)
81121a40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81121a44:	e0bff917 	ldw	r2,-28(fp)
81121a48:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
81121a4c:	e0fff517 	ldw	r3,-44(fp)
81121a50:	e0bffd17 	ldw	r2,-12(fp)
81121a54:	18800426 	beq	r3,r2,81121a68 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
81121a58:	e0fff517 	ldw	r3,-44(fp)
81121a5c:	e0bffd17 	ldw	r2,-12(fp)
81121a60:	1885c83a 	sub	r2,r3,r2
81121a64:	00000606 	br	81121a80 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
81121a68:	e0bfff17 	ldw	r2,-4(fp)
81121a6c:	1090000c 	andi	r2,r2,16384
81121a70:	10000226 	beq	r2,zero,81121a7c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
81121a74:	00bffd44 	movi	r2,-11
81121a78:	00000106 	br	81121a80 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
81121a7c:	00bffec4 	movi	r2,-5
}
81121a80:	e037883a 	mov	sp,fp
81121a84:	dfc00117 	ldw	ra,4(sp)
81121a88:	df000017 	ldw	fp,0(sp)
81121a8c:	dec00204 	addi	sp,sp,8
81121a90:	f800283a 	ret

81121a94 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81121a94:	defff304 	addi	sp,sp,-52
81121a98:	dfc00c15 	stw	ra,48(sp)
81121a9c:	df000b15 	stw	fp,44(sp)
81121aa0:	df000b04 	addi	fp,sp,44
81121aa4:	e13ffc15 	stw	r4,-16(fp)
81121aa8:	e17ffd15 	stw	r5,-12(fp)
81121aac:	e1bffe15 	stw	r6,-8(fp)
81121ab0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
81121ab4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81121ab8:	e0bffd17 	ldw	r2,-12(fp)
81121abc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81121ac0:	00003706 	br	81121ba0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
81121ac4:	e0bffc17 	ldw	r2,-16(fp)
81121ac8:	10800c17 	ldw	r2,48(r2)
81121acc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
81121ad0:	e0bffc17 	ldw	r2,-16(fp)
81121ad4:	10800d17 	ldw	r2,52(r2)
81121ad8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
81121adc:	e0fff917 	ldw	r3,-28(fp)
81121ae0:	e0bff517 	ldw	r2,-44(fp)
81121ae4:	1880062e 	bgeu	r3,r2,81121b00 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
81121ae8:	e0fff517 	ldw	r3,-44(fp)
81121aec:	e0bff917 	ldw	r2,-28(fp)
81121af0:	1885c83a 	sub	r2,r3,r2
81121af4:	10bfffc4 	addi	r2,r2,-1
81121af8:	e0bff615 	stw	r2,-40(fp)
81121afc:	00000b06 	br	81121b2c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
81121b00:	e0bff517 	ldw	r2,-44(fp)
81121b04:	10000526 	beq	r2,zero,81121b1c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
81121b08:	00c20004 	movi	r3,2048
81121b0c:	e0bff917 	ldw	r2,-28(fp)
81121b10:	1885c83a 	sub	r2,r3,r2
81121b14:	e0bff615 	stw	r2,-40(fp)
81121b18:	00000406 	br	81121b2c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
81121b1c:	00c1ffc4 	movi	r3,2047
81121b20:	e0bff917 	ldw	r2,-28(fp)
81121b24:	1885c83a 	sub	r2,r3,r2
81121b28:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
81121b2c:	e0bff617 	ldw	r2,-40(fp)
81121b30:	10001e26 	beq	r2,zero,81121bac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
81121b34:	e0fffe17 	ldw	r3,-8(fp)
81121b38:	e0bff617 	ldw	r2,-40(fp)
81121b3c:	1880022e 	bgeu	r3,r2,81121b48 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
81121b40:	e0bffe17 	ldw	r2,-8(fp)
81121b44:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
81121b48:	e0bffc17 	ldw	r2,-16(fp)
81121b4c:	10c20e04 	addi	r3,r2,2104
81121b50:	e0bff917 	ldw	r2,-28(fp)
81121b54:	1885883a 	add	r2,r3,r2
81121b58:	e1bff617 	ldw	r6,-40(fp)
81121b5c:	e17ffd17 	ldw	r5,-12(fp)
81121b60:	1009883a 	mov	r4,r2
81121b64:	11111480 	call	81111148 <memcpy>
      ptr   += n;
81121b68:	e0fffd17 	ldw	r3,-12(fp)
81121b6c:	e0bff617 	ldw	r2,-40(fp)
81121b70:	1885883a 	add	r2,r3,r2
81121b74:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81121b78:	e0fffe17 	ldw	r3,-8(fp)
81121b7c:	e0bff617 	ldw	r2,-40(fp)
81121b80:	1885c83a 	sub	r2,r3,r2
81121b84:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81121b88:	e0fff917 	ldw	r3,-28(fp)
81121b8c:	e0bff617 	ldw	r2,-40(fp)
81121b90:	1885883a 	add	r2,r3,r2
81121b94:	10c1ffcc 	andi	r3,r2,2047
81121b98:	e0bffc17 	ldw	r2,-16(fp)
81121b9c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81121ba0:	e0bffe17 	ldw	r2,-8(fp)
81121ba4:	00bfc716 	blt	zero,r2,81121ac4 <__reset+0xfb101ac4>
81121ba8:	00000106 	br	81121bb0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
81121bac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81121bb0:	0005303a 	rdctl	r2,status
81121bb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81121bb8:	e0fffb17 	ldw	r3,-20(fp)
81121bbc:	00bfff84 	movi	r2,-2
81121bc0:	1884703a 	and	r2,r3,r2
81121bc4:	1001703a 	wrctl	status,r2
  
  return context;
81121bc8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
81121bcc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81121bd0:	e0bffc17 	ldw	r2,-16(fp)
81121bd4:	10800817 	ldw	r2,32(r2)
81121bd8:	10c00094 	ori	r3,r2,2
81121bdc:	e0bffc17 	ldw	r2,-16(fp)
81121be0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81121be4:	e0bffc17 	ldw	r2,-16(fp)
81121be8:	10800017 	ldw	r2,0(r2)
81121bec:	10800104 	addi	r2,r2,4
81121bf0:	1007883a 	mov	r3,r2
81121bf4:	e0bffc17 	ldw	r2,-16(fp)
81121bf8:	10800817 	ldw	r2,32(r2)
81121bfc:	18800035 	stwio	r2,0(r3)
81121c00:	e0bffa17 	ldw	r2,-24(fp)
81121c04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81121c08:	e0bff817 	ldw	r2,-32(fp)
81121c0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
81121c10:	e0bffe17 	ldw	r2,-8(fp)
81121c14:	0080100e 	bge	zero,r2,81121c58 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
81121c18:	e0bfff17 	ldw	r2,-4(fp)
81121c1c:	1090000c 	andi	r2,r2,16384
81121c20:	1000101e 	bne	r2,zero,81121c64 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
81121c24:	0001883a 	nop
81121c28:	e0bffc17 	ldw	r2,-16(fp)
81121c2c:	10c00d17 	ldw	r3,52(r2)
81121c30:	e0bff517 	ldw	r2,-44(fp)
81121c34:	1880051e 	bne	r3,r2,81121c4c <altera_avalon_jtag_uart_write+0x1b8>
81121c38:	e0bffc17 	ldw	r2,-16(fp)
81121c3c:	10c00917 	ldw	r3,36(r2)
81121c40:	e0bffc17 	ldw	r2,-16(fp)
81121c44:	10800117 	ldw	r2,4(r2)
81121c48:	18bff736 	bltu	r3,r2,81121c28 <__reset+0xfb101c28>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
81121c4c:	e0bffc17 	ldw	r2,-16(fp)
81121c50:	10800917 	ldw	r2,36(r2)
81121c54:	1000051e 	bne	r2,zero,81121c6c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
81121c58:	e0bffe17 	ldw	r2,-8(fp)
81121c5c:	00bfd016 	blt	zero,r2,81121ba0 <__reset+0xfb101ba0>
81121c60:	00000306 	br	81121c70 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
81121c64:	0001883a 	nop
81121c68:	00000106 	br	81121c70 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81121c6c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
81121c70:	e0fffd17 	ldw	r3,-12(fp)
81121c74:	e0bff717 	ldw	r2,-36(fp)
81121c78:	18800426 	beq	r3,r2,81121c8c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
81121c7c:	e0fffd17 	ldw	r3,-12(fp)
81121c80:	e0bff717 	ldw	r2,-36(fp)
81121c84:	1885c83a 	sub	r2,r3,r2
81121c88:	00000606 	br	81121ca4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
81121c8c:	e0bfff17 	ldw	r2,-4(fp)
81121c90:	1090000c 	andi	r2,r2,16384
81121c94:	10000226 	beq	r2,zero,81121ca0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
81121c98:	00bffd44 	movi	r2,-11
81121c9c:	00000106 	br	81121ca4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81121ca0:	00bffec4 	movi	r2,-5
}
81121ca4:	e037883a 	mov	sp,fp
81121ca8:	dfc00117 	ldw	ra,4(sp)
81121cac:	df000017 	ldw	fp,0(sp)
81121cb0:	dec00204 	addi	sp,sp,8
81121cb4:	f800283a 	ret

81121cb8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
81121cb8:	defffa04 	addi	sp,sp,-24
81121cbc:	dfc00515 	stw	ra,20(sp)
81121cc0:	df000415 	stw	fp,16(sp)
81121cc4:	df000404 	addi	fp,sp,16
81121cc8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81121ccc:	0007883a 	mov	r3,zero
81121cd0:	e0bfff17 	ldw	r2,-4(fp)
81121cd4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
81121cd8:	e0bfff17 	ldw	r2,-4(fp)
81121cdc:	10800104 	addi	r2,r2,4
81121ce0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81121ce4:	0005303a 	rdctl	r2,status
81121ce8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81121cec:	e0fffd17 	ldw	r3,-12(fp)
81121cf0:	00bfff84 	movi	r2,-2
81121cf4:	1884703a 	and	r2,r3,r2
81121cf8:	1001703a 	wrctl	status,r2
  
  return context;
81121cfc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
81121d00:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81121d04:	1120e900 	call	81120e90 <alt_tick>
81121d08:	e0bffc17 	ldw	r2,-16(fp)
81121d0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81121d10:	e0bffe17 	ldw	r2,-8(fp)
81121d14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
81121d18:	0001883a 	nop
81121d1c:	e037883a 	mov	sp,fp
81121d20:	dfc00117 	ldw	ra,4(sp)
81121d24:	df000017 	ldw	fp,0(sp)
81121d28:	dec00204 	addi	sp,sp,8
81121d2c:	f800283a 	ret

81121d30 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81121d30:	defff804 	addi	sp,sp,-32
81121d34:	dfc00715 	stw	ra,28(sp)
81121d38:	df000615 	stw	fp,24(sp)
81121d3c:	df000604 	addi	fp,sp,24
81121d40:	e13ffc15 	stw	r4,-16(fp)
81121d44:	e17ffd15 	stw	r5,-12(fp)
81121d48:	e1bffe15 	stw	r6,-8(fp)
81121d4c:	e1ffff15 	stw	r7,-4(fp)
81121d50:	e0bfff17 	ldw	r2,-4(fp)
81121d54:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81121d58:	d0a03d17 	ldw	r2,-32524(gp)
81121d5c:	1000021e 	bne	r2,zero,81121d68 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
81121d60:	e0bffb17 	ldw	r2,-20(fp)
81121d64:	d0a03d15 	stw	r2,-32524(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
81121d68:	e0bffc17 	ldw	r2,-16(fp)
81121d6c:	10800104 	addi	r2,r2,4
81121d70:	00c001c4 	movi	r3,7
81121d74:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
81121d78:	d8000015 	stw	zero,0(sp)
81121d7c:	e1fffc17 	ldw	r7,-16(fp)
81121d80:	01a044b4 	movhi	r6,33042
81121d84:	31872e04 	addi	r6,r6,7352
81121d88:	e17ffe17 	ldw	r5,-8(fp)
81121d8c:	e13ffd17 	ldw	r4,-12(fp)
81121d90:	1124a080 	call	81124a08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81121d94:	0001883a 	nop
81121d98:	e037883a 	mov	sp,fp
81121d9c:	dfc00117 	ldw	ra,4(sp)
81121da0:	df000017 	ldw	fp,0(sp)
81121da4:	dec00204 	addi	sp,sp,8
81121da8:	f800283a 	ret

81121dac <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81121dac:	defffa04 	addi	sp,sp,-24
81121db0:	dfc00515 	stw	ra,20(sp)
81121db4:	df000415 	stw	fp,16(sp)
81121db8:	df000404 	addi	fp,sp,16
81121dbc:	e13ffd15 	stw	r4,-12(fp)
81121dc0:	e17ffe15 	stw	r5,-8(fp)
81121dc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81121dc8:	e0bffd17 	ldw	r2,-12(fp)
81121dcc:	10800017 	ldw	r2,0(r2)
81121dd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
81121dd4:	e0bffc17 	ldw	r2,-16(fp)
81121dd8:	10c00a04 	addi	r3,r2,40
81121ddc:	e0bffd17 	ldw	r2,-12(fp)
81121de0:	10800217 	ldw	r2,8(r2)
81121de4:	100f883a 	mov	r7,r2
81121de8:	e1bfff17 	ldw	r6,-4(fp)
81121dec:	e17ffe17 	ldw	r5,-8(fp)
81121df0:	1809883a 	mov	r4,r3
81121df4:	11222c00 	call	811222c0 <altera_avalon_uart_read>
      fd->fd_flags);
}
81121df8:	e037883a 	mov	sp,fp
81121dfc:	dfc00117 	ldw	ra,4(sp)
81121e00:	df000017 	ldw	fp,0(sp)
81121e04:	dec00204 	addi	sp,sp,8
81121e08:	f800283a 	ret

81121e0c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81121e0c:	defffa04 	addi	sp,sp,-24
81121e10:	dfc00515 	stw	ra,20(sp)
81121e14:	df000415 	stw	fp,16(sp)
81121e18:	df000404 	addi	fp,sp,16
81121e1c:	e13ffd15 	stw	r4,-12(fp)
81121e20:	e17ffe15 	stw	r5,-8(fp)
81121e24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81121e28:	e0bffd17 	ldw	r2,-12(fp)
81121e2c:	10800017 	ldw	r2,0(r2)
81121e30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
81121e34:	e0bffc17 	ldw	r2,-16(fp)
81121e38:	10c00a04 	addi	r3,r2,40
81121e3c:	e0bffd17 	ldw	r2,-12(fp)
81121e40:	10800217 	ldw	r2,8(r2)
81121e44:	100f883a 	mov	r7,r2
81121e48:	e1bfff17 	ldw	r6,-4(fp)
81121e4c:	e17ffe17 	ldw	r5,-8(fp)
81121e50:	1809883a 	mov	r4,r3
81121e54:	11224d80 	call	811224d8 <altera_avalon_uart_write>
      fd->fd_flags);
}
81121e58:	e037883a 	mov	sp,fp
81121e5c:	dfc00117 	ldw	ra,4(sp)
81121e60:	df000017 	ldw	fp,0(sp)
81121e64:	dec00204 	addi	sp,sp,8
81121e68:	f800283a 	ret

81121e6c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
81121e6c:	defffc04 	addi	sp,sp,-16
81121e70:	dfc00315 	stw	ra,12(sp)
81121e74:	df000215 	stw	fp,8(sp)
81121e78:	df000204 	addi	fp,sp,8
81121e7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81121e80:	e0bfff17 	ldw	r2,-4(fp)
81121e84:	10800017 	ldw	r2,0(r2)
81121e88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
81121e8c:	e0bffe17 	ldw	r2,-8(fp)
81121e90:	10c00a04 	addi	r3,r2,40
81121e94:	e0bfff17 	ldw	r2,-4(fp)
81121e98:	10800217 	ldw	r2,8(r2)
81121e9c:	100b883a 	mov	r5,r2
81121ea0:	1809883a 	mov	r4,r3
81121ea4:	11222300 	call	81122230 <altera_avalon_uart_close>
}
81121ea8:	e037883a 	mov	sp,fp
81121eac:	dfc00117 	ldw	ra,4(sp)
81121eb0:	df000017 	ldw	fp,0(sp)
81121eb4:	dec00204 	addi	sp,sp,8
81121eb8:	f800283a 	ret

81121ebc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
81121ebc:	defff804 	addi	sp,sp,-32
81121ec0:	dfc00715 	stw	ra,28(sp)
81121ec4:	df000615 	stw	fp,24(sp)
81121ec8:	df000604 	addi	fp,sp,24
81121ecc:	e13ffd15 	stw	r4,-12(fp)
81121ed0:	e17ffe15 	stw	r5,-8(fp)
81121ed4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
81121ed8:	e0bffd17 	ldw	r2,-12(fp)
81121edc:	10800017 	ldw	r2,0(r2)
81121ee0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
81121ee4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81121ee8:	1000041e 	bne	r2,zero,81121efc <altera_avalon_uart_init+0x40>
81121eec:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81121ef0:	1000021e 	bne	r2,zero,81121efc <altera_avalon_uart_init+0x40>
81121ef4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81121ef8:	10000226 	beq	r2,zero,81121f04 <altera_avalon_uart_init+0x48>
81121efc:	00800044 	movi	r2,1
81121f00:	00000106 	br	81121f08 <altera_avalon_uart_init+0x4c>
81121f04:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81121f08:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
81121f0c:	e0bffc17 	ldw	r2,-16(fp)
81121f10:	10000f1e 	bne	r2,zero,81121f50 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
81121f14:	e0bffd17 	ldw	r2,-12(fp)
81121f18:	00c32004 	movi	r3,3200
81121f1c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
81121f20:	e0bffb17 	ldw	r2,-20(fp)
81121f24:	10800304 	addi	r2,r2,12
81121f28:	e0fffd17 	ldw	r3,-12(fp)
81121f2c:	18c00117 	ldw	r3,4(r3)
81121f30:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
81121f34:	d8000015 	stw	zero,0(sp)
81121f38:	e1fffd17 	ldw	r7,-12(fp)
81121f3c:	01a044b4 	movhi	r6,33042
81121f40:	3187da04 	addi	r6,r6,8040
81121f44:	e17fff17 	ldw	r5,-4(fp)
81121f48:	e13ffe17 	ldw	r4,-8(fp)
81121f4c:	1124a080 	call	81124a08 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
81121f50:	0001883a 	nop
81121f54:	e037883a 	mov	sp,fp
81121f58:	dfc00117 	ldw	ra,4(sp)
81121f5c:	df000017 	ldw	fp,0(sp)
81121f60:	dec00204 	addi	sp,sp,8
81121f64:	f800283a 	ret

81121f68 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
81121f68:	defffa04 	addi	sp,sp,-24
81121f6c:	dfc00515 	stw	ra,20(sp)
81121f70:	df000415 	stw	fp,16(sp)
81121f74:	df000404 	addi	fp,sp,16
81121f78:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
81121f7c:	e0bfff17 	ldw	r2,-4(fp)
81121f80:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
81121f84:	e0bffc17 	ldw	r2,-16(fp)
81121f88:	10800017 	ldw	r2,0(r2)
81121f8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
81121f90:	e0bffd17 	ldw	r2,-12(fp)
81121f94:	10800204 	addi	r2,r2,8
81121f98:	10800037 	ldwio	r2,0(r2)
81121f9c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
81121fa0:	e0bffd17 	ldw	r2,-12(fp)
81121fa4:	10800204 	addi	r2,r2,8
81121fa8:	0007883a 	mov	r3,zero
81121fac:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
81121fb0:	e0bffd17 	ldw	r2,-12(fp)
81121fb4:	10800204 	addi	r2,r2,8
81121fb8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
81121fbc:	e0bffe17 	ldw	r2,-8(fp)
81121fc0:	1080200c 	andi	r2,r2,128
81121fc4:	10000326 	beq	r2,zero,81121fd4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
81121fc8:	e17ffe17 	ldw	r5,-8(fp)
81121fcc:	e13ffc17 	ldw	r4,-16(fp)
81121fd0:	11220040 	call	81122004 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
81121fd4:	e0bffe17 	ldw	r2,-8(fp)
81121fd8:	1081100c 	andi	r2,r2,1088
81121fdc:	10000326 	beq	r2,zero,81121fec <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
81121fe0:	e17ffe17 	ldw	r5,-8(fp)
81121fe4:	e13ffc17 	ldw	r4,-16(fp)
81121fe8:	11220e80 	call	811220e8 <altera_avalon_uart_txirq>
  }
  

}
81121fec:	0001883a 	nop
81121ff0:	e037883a 	mov	sp,fp
81121ff4:	dfc00117 	ldw	ra,4(sp)
81121ff8:	df000017 	ldw	fp,0(sp)
81121ffc:	dec00204 	addi	sp,sp,8
81122000:	f800283a 	ret

81122004 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81122004:	defffc04 	addi	sp,sp,-16
81122008:	df000315 	stw	fp,12(sp)
8112200c:	df000304 	addi	fp,sp,12
81122010:	e13ffe15 	stw	r4,-8(fp)
81122014:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
81122018:	e0bfff17 	ldw	r2,-4(fp)
8112201c:	108000cc 	andi	r2,r2,3
81122020:	10002c1e 	bne	r2,zero,811220d4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
81122024:	e0bffe17 	ldw	r2,-8(fp)
81122028:	10800317 	ldw	r2,12(r2)
8112202c:	e0bffe17 	ldw	r2,-8(fp)
81122030:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81122034:	e0bffe17 	ldw	r2,-8(fp)
81122038:	10800317 	ldw	r2,12(r2)
8112203c:	10800044 	addi	r2,r2,1
81122040:	10800fcc 	andi	r2,r2,63
81122044:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
81122048:	e0bffe17 	ldw	r2,-8(fp)
8112204c:	10800317 	ldw	r2,12(r2)
81122050:	e0fffe17 	ldw	r3,-8(fp)
81122054:	18c00017 	ldw	r3,0(r3)
81122058:	18c00037 	ldwio	r3,0(r3)
8112205c:	1809883a 	mov	r4,r3
81122060:	e0fffe17 	ldw	r3,-8(fp)
81122064:	1885883a 	add	r2,r3,r2
81122068:	10800704 	addi	r2,r2,28
8112206c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
81122070:	e0bffe17 	ldw	r2,-8(fp)
81122074:	e0fffd17 	ldw	r3,-12(fp)
81122078:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8112207c:	e0bffe17 	ldw	r2,-8(fp)
81122080:	10800317 	ldw	r2,12(r2)
81122084:	10800044 	addi	r2,r2,1
81122088:	10800fcc 	andi	r2,r2,63
8112208c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
81122090:	e0bffe17 	ldw	r2,-8(fp)
81122094:	10c00217 	ldw	r3,8(r2)
81122098:	e0bffd17 	ldw	r2,-12(fp)
8112209c:	18800e1e 	bne	r3,r2,811220d8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
811220a0:	e0bffe17 	ldw	r2,-8(fp)
811220a4:	10c00117 	ldw	r3,4(r2)
811220a8:	00bfdfc4 	movi	r2,-129
811220ac:	1886703a 	and	r3,r3,r2
811220b0:	e0bffe17 	ldw	r2,-8(fp)
811220b4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
811220b8:	e0bffe17 	ldw	r2,-8(fp)
811220bc:	10800017 	ldw	r2,0(r2)
811220c0:	10800304 	addi	r2,r2,12
811220c4:	e0fffe17 	ldw	r3,-8(fp)
811220c8:	18c00117 	ldw	r3,4(r3)
811220cc:	10c00035 	stwio	r3,0(r2)
811220d0:	00000106 	br	811220d8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
811220d4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
811220d8:	e037883a 	mov	sp,fp
811220dc:	df000017 	ldw	fp,0(sp)
811220e0:	dec00104 	addi	sp,sp,4
811220e4:	f800283a 	ret

811220e8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
811220e8:	defffb04 	addi	sp,sp,-20
811220ec:	df000415 	stw	fp,16(sp)
811220f0:	df000404 	addi	fp,sp,16
811220f4:	e13ffc15 	stw	r4,-16(fp)
811220f8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
811220fc:	e0bffc17 	ldw	r2,-16(fp)
81122100:	10c00417 	ldw	r3,16(r2)
81122104:	e0bffc17 	ldw	r2,-16(fp)
81122108:	10800517 	ldw	r2,20(r2)
8112210c:	18803226 	beq	r3,r2,811221d8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81122110:	e0bffc17 	ldw	r2,-16(fp)
81122114:	10800617 	ldw	r2,24(r2)
81122118:	1080008c 	andi	r2,r2,2
8112211c:	10000326 	beq	r2,zero,8112212c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81122120:	e0bffd17 	ldw	r2,-12(fp)
81122124:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81122128:	10001d26 	beq	r2,zero,811221a0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
8112212c:	e0bffc17 	ldw	r2,-16(fp)
81122130:	10800417 	ldw	r2,16(r2)
81122134:	e0bffc17 	ldw	r2,-16(fp)
81122138:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
8112213c:	e0bffc17 	ldw	r2,-16(fp)
81122140:	10800017 	ldw	r2,0(r2)
81122144:	10800104 	addi	r2,r2,4
81122148:	e0fffc17 	ldw	r3,-16(fp)
8112214c:	18c00417 	ldw	r3,16(r3)
81122150:	e13ffc17 	ldw	r4,-16(fp)
81122154:	20c7883a 	add	r3,r4,r3
81122158:	18c01704 	addi	r3,r3,92
8112215c:	18c00003 	ldbu	r3,0(r3)
81122160:	18c03fcc 	andi	r3,r3,255
81122164:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
81122168:	e0bffc17 	ldw	r2,-16(fp)
8112216c:	10800417 	ldw	r2,16(r2)
81122170:	10800044 	addi	r2,r2,1
81122174:	e0fffc17 	ldw	r3,-16(fp)
81122178:	18800415 	stw	r2,16(r3)
8112217c:	10c00fcc 	andi	r3,r2,63
81122180:	e0bffc17 	ldw	r2,-16(fp)
81122184:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81122188:	e0bffc17 	ldw	r2,-16(fp)
8112218c:	10800117 	ldw	r2,4(r2)
81122190:	10c01014 	ori	r3,r2,64
81122194:	e0bffc17 	ldw	r2,-16(fp)
81122198:	10c00115 	stw	r3,4(r2)
8112219c:	00000e06 	br	811221d8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
811221a0:	e0bffc17 	ldw	r2,-16(fp)
811221a4:	10800017 	ldw	r2,0(r2)
811221a8:	10800204 	addi	r2,r2,8
811221ac:	10800037 	ldwio	r2,0(r2)
811221b0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
811221b4:	e0bffd17 	ldw	r2,-12(fp)
811221b8:	1082000c 	andi	r2,r2,2048
811221bc:	1000061e 	bne	r2,zero,811221d8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
811221c0:	e0bffc17 	ldw	r2,-16(fp)
811221c4:	10c00117 	ldw	r3,4(r2)
811221c8:	00bfefc4 	movi	r2,-65
811221cc:	1886703a 	and	r3,r3,r2
811221d0:	e0bffc17 	ldw	r2,-16(fp)
811221d4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
811221d8:	e0bffc17 	ldw	r2,-16(fp)
811221dc:	10c00417 	ldw	r3,16(r2)
811221e0:	e0bffc17 	ldw	r2,-16(fp)
811221e4:	10800517 	ldw	r2,20(r2)
811221e8:	1880061e 	bne	r3,r2,81122204 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
811221ec:	e0bffc17 	ldw	r2,-16(fp)
811221f0:	10c00117 	ldw	r3,4(r2)
811221f4:	00beefc4 	movi	r2,-1089
811221f8:	1886703a 	and	r3,r3,r2
811221fc:	e0bffc17 	ldw	r2,-16(fp)
81122200:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81122204:	e0bffc17 	ldw	r2,-16(fp)
81122208:	10800017 	ldw	r2,0(r2)
8112220c:	10800304 	addi	r2,r2,12
81122210:	e0fffc17 	ldw	r3,-16(fp)
81122214:	18c00117 	ldw	r3,4(r3)
81122218:	10c00035 	stwio	r3,0(r2)
}
8112221c:	0001883a 	nop
81122220:	e037883a 	mov	sp,fp
81122224:	df000017 	ldw	fp,0(sp)
81122228:	dec00104 	addi	sp,sp,4
8112222c:	f800283a 	ret

81122230 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
81122230:	defffd04 	addi	sp,sp,-12
81122234:	df000215 	stw	fp,8(sp)
81122238:	df000204 	addi	fp,sp,8
8112223c:	e13ffe15 	stw	r4,-8(fp)
81122240:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81122244:	00000506 	br	8112225c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
81122248:	e0bfff17 	ldw	r2,-4(fp)
8112224c:	1090000c 	andi	r2,r2,16384
81122250:	10000226 	beq	r2,zero,8112225c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
81122254:	00bffd44 	movi	r2,-11
81122258:	00000606 	br	81122274 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8112225c:	e0bffe17 	ldw	r2,-8(fp)
81122260:	10c00417 	ldw	r3,16(r2)
81122264:	e0bffe17 	ldw	r2,-8(fp)
81122268:	10800517 	ldw	r2,20(r2)
8112226c:	18bff61e 	bne	r3,r2,81122248 <__reset+0xfb102248>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81122270:	0005883a 	mov	r2,zero
}
81122274:	e037883a 	mov	sp,fp
81122278:	df000017 	ldw	fp,0(sp)
8112227c:	dec00104 	addi	sp,sp,4
81122280:	f800283a 	ret

81122284 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81122284:	defffe04 	addi	sp,sp,-8
81122288:	dfc00115 	stw	ra,4(sp)
8112228c:	df000015 	stw	fp,0(sp)
81122290:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81122294:	d0a00d17 	ldw	r2,-32716(gp)
81122298:	10000326 	beq	r2,zero,811222a8 <alt_get_errno+0x24>
8112229c:	d0a00d17 	ldw	r2,-32716(gp)
811222a0:	103ee83a 	callr	r2
811222a4:	00000106 	br	811222ac <alt_get_errno+0x28>
811222a8:	d0a03204 	addi	r2,gp,-32568
}
811222ac:	e037883a 	mov	sp,fp
811222b0:	dfc00117 	ldw	ra,4(sp)
811222b4:	df000017 	ldw	fp,0(sp)
811222b8:	dec00204 	addi	sp,sp,8
811222bc:	f800283a 	ret

811222c0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
811222c0:	defff204 	addi	sp,sp,-56
811222c4:	dfc00d15 	stw	ra,52(sp)
811222c8:	df000c15 	stw	fp,48(sp)
811222cc:	df000c04 	addi	fp,sp,48
811222d0:	e13ffc15 	stw	r4,-16(fp)
811222d4:	e17ffd15 	stw	r5,-12(fp)
811222d8:	e1bffe15 	stw	r6,-8(fp)
811222dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
811222e0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
811222e4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
811222e8:	e0bfff17 	ldw	r2,-4(fp)
811222ec:	1090000c 	andi	r2,r2,16384
811222f0:	1005003a 	cmpeq	r2,r2,zero
811222f4:	10803fcc 	andi	r2,r2,255
811222f8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
811222fc:	00001306 	br	8112234c <altera_avalon_uart_read+0x8c>
    {
      count++;
81122300:	e0bff517 	ldw	r2,-44(fp)
81122304:	10800044 	addi	r2,r2,1
81122308:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
8112230c:	e0bffd17 	ldw	r2,-12(fp)
81122310:	10c00044 	addi	r3,r2,1
81122314:	e0fffd15 	stw	r3,-12(fp)
81122318:	e0fffc17 	ldw	r3,-16(fp)
8112231c:	18c00217 	ldw	r3,8(r3)
81122320:	e13ffc17 	ldw	r4,-16(fp)
81122324:	20c7883a 	add	r3,r4,r3
81122328:	18c00704 	addi	r3,r3,28
8112232c:	18c00003 	ldbu	r3,0(r3)
81122330:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
81122334:	e0bffc17 	ldw	r2,-16(fp)
81122338:	10800217 	ldw	r2,8(r2)
8112233c:	10800044 	addi	r2,r2,1
81122340:	10c00fcc 	andi	r3,r2,63
81122344:	e0bffc17 	ldw	r2,-16(fp)
81122348:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8112234c:	e0fff517 	ldw	r3,-44(fp)
81122350:	e0bffe17 	ldw	r2,-8(fp)
81122354:	1880050e 	bge	r3,r2,8112236c <altera_avalon_uart_read+0xac>
81122358:	e0bffc17 	ldw	r2,-16(fp)
8112235c:	10c00217 	ldw	r3,8(r2)
81122360:	e0bffc17 	ldw	r2,-16(fp)
81122364:	10800317 	ldw	r2,12(r2)
81122368:	18bfe51e 	bne	r3,r2,81122300 <__reset+0xfb102300>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
8112236c:	e0bff517 	ldw	r2,-44(fp)
81122370:	1000251e 	bne	r2,zero,81122408 <altera_avalon_uart_read+0x148>
81122374:	e0bffc17 	ldw	r2,-16(fp)
81122378:	10c00217 	ldw	r3,8(r2)
8112237c:	e0bffc17 	ldw	r2,-16(fp)
81122380:	10800317 	ldw	r2,12(r2)
81122384:	1880201e 	bne	r3,r2,81122408 <altera_avalon_uart_read+0x148>
    {
      if (!block)
81122388:	e0bff617 	ldw	r2,-40(fp)
8112238c:	1000071e 	bne	r2,zero,811223ac <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
81122390:	11222840 	call	81122284 <alt_get_errno>
81122394:	1007883a 	mov	r3,r2
81122398:	008002c4 	movi	r2,11
8112239c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
811223a0:	00800044 	movi	r2,1
811223a4:	e0bff405 	stb	r2,-48(fp)
        break;
811223a8:	00001b06 	br	81122418 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811223ac:	0005303a 	rdctl	r2,status
811223b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811223b4:	e0fff917 	ldw	r3,-28(fp)
811223b8:	00bfff84 	movi	r2,-2
811223bc:	1884703a 	and	r2,r3,r2
811223c0:	1001703a 	wrctl	status,r2
  
  return context;
811223c4:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
811223c8:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
811223cc:	e0bffc17 	ldw	r2,-16(fp)
811223d0:	10800117 	ldw	r2,4(r2)
811223d4:	10c02014 	ori	r3,r2,128
811223d8:	e0bffc17 	ldw	r2,-16(fp)
811223dc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811223e0:	e0bffc17 	ldw	r2,-16(fp)
811223e4:	10800017 	ldw	r2,0(r2)
811223e8:	10800304 	addi	r2,r2,12
811223ec:	e0fffc17 	ldw	r3,-16(fp)
811223f0:	18c00117 	ldw	r3,4(r3)
811223f4:	10c00035 	stwio	r3,0(r2)
811223f8:	e0bff817 	ldw	r2,-32(fp)
811223fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122400:	e0bffa17 	ldw	r2,-24(fp)
81122404:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
81122408:	e0bff517 	ldw	r2,-44(fp)
8112240c:	1000021e 	bne	r2,zero,81122418 <altera_avalon_uart_read+0x158>
81122410:	e0bffe17 	ldw	r2,-8(fp)
81122414:	103fcd1e 	bne	r2,zero,8112234c <__reset+0xfb10234c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122418:	0005303a 	rdctl	r2,status
8112241c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122420:	e0fffb17 	ldw	r3,-20(fp)
81122424:	00bfff84 	movi	r2,-2
81122428:	1884703a 	and	r2,r3,r2
8112242c:	1001703a 	wrctl	status,r2
  
  return context;
81122430:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
81122434:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81122438:	e0bffc17 	ldw	r2,-16(fp)
8112243c:	10800117 	ldw	r2,4(r2)
81122440:	10c02014 	ori	r3,r2,128
81122444:	e0bffc17 	ldw	r2,-16(fp)
81122448:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8112244c:	e0bffc17 	ldw	r2,-16(fp)
81122450:	10800017 	ldw	r2,0(r2)
81122454:	10800304 	addi	r2,r2,12
81122458:	e0fffc17 	ldw	r3,-16(fp)
8112245c:	18c00117 	ldw	r3,4(r3)
81122460:	10c00035 	stwio	r3,0(r2)
81122464:	e0bff817 	ldw	r2,-32(fp)
81122468:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112246c:	e0bff717 	ldw	r2,-36(fp)
81122470:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
81122474:	e0bff403 	ldbu	r2,-48(fp)
81122478:	10000226 	beq	r2,zero,81122484 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
8112247c:	00bffd44 	movi	r2,-11
81122480:	00000106 	br	81122488 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
81122484:	e0bff517 	ldw	r2,-44(fp)
  }
}
81122488:	e037883a 	mov	sp,fp
8112248c:	dfc00117 	ldw	ra,4(sp)
81122490:	df000017 	ldw	fp,0(sp)
81122494:	dec00204 	addi	sp,sp,8
81122498:	f800283a 	ret

8112249c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112249c:	defffe04 	addi	sp,sp,-8
811224a0:	dfc00115 	stw	ra,4(sp)
811224a4:	df000015 	stw	fp,0(sp)
811224a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811224ac:	d0a00d17 	ldw	r2,-32716(gp)
811224b0:	10000326 	beq	r2,zero,811224c0 <alt_get_errno+0x24>
811224b4:	d0a00d17 	ldw	r2,-32716(gp)
811224b8:	103ee83a 	callr	r2
811224bc:	00000106 	br	811224c4 <alt_get_errno+0x28>
811224c0:	d0a03204 	addi	r2,gp,-32568
}
811224c4:	e037883a 	mov	sp,fp
811224c8:	dfc00117 	ldw	ra,4(sp)
811224cc:	df000017 	ldw	fp,0(sp)
811224d0:	dec00204 	addi	sp,sp,8
811224d4:	f800283a 	ret

811224d8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
811224d8:	defff204 	addi	sp,sp,-56
811224dc:	dfc00d15 	stw	ra,52(sp)
811224e0:	df000c15 	stw	fp,48(sp)
811224e4:	df000c04 	addi	fp,sp,48
811224e8:	e13ffc15 	stw	r4,-16(fp)
811224ec:	e17ffd15 	stw	r5,-12(fp)
811224f0:	e1bffe15 	stw	r6,-8(fp)
811224f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
811224f8:	e0bffe17 	ldw	r2,-8(fp)
811224fc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
81122500:	e0bfff17 	ldw	r2,-4(fp)
81122504:	1090000c 	andi	r2,r2,16384
81122508:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8112250c:	00003c06 	br	81122600 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81122510:	e0bffc17 	ldw	r2,-16(fp)
81122514:	10800517 	ldw	r2,20(r2)
81122518:	10800044 	addi	r2,r2,1
8112251c:	10800fcc 	andi	r2,r2,63
81122520:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
81122524:	e0bffc17 	ldw	r2,-16(fp)
81122528:	10c00417 	ldw	r3,16(r2)
8112252c:	e0bff717 	ldw	r2,-36(fp)
81122530:	1880221e 	bne	r3,r2,811225bc <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
81122534:	e0bff517 	ldw	r2,-44(fp)
81122538:	10000526 	beq	r2,zero,81122550 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
8112253c:	112249c0 	call	8112249c <alt_get_errno>
81122540:	1007883a 	mov	r3,r2
81122544:	008002c4 	movi	r2,11
81122548:	18800015 	stw	r2,0(r3)
        break;
8112254c:	00002e06 	br	81122608 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122550:	0005303a 	rdctl	r2,status
81122554:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122558:	e0fff917 	ldw	r3,-28(fp)
8112255c:	00bfff84 	movi	r2,-2
81122560:	1884703a 	and	r2,r3,r2
81122564:	1001703a 	wrctl	status,r2
  
  return context;
81122568:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8112256c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81122570:	e0bffc17 	ldw	r2,-16(fp)
81122574:	10800117 	ldw	r2,4(r2)
81122578:	10c11014 	ori	r3,r2,1088
8112257c:	e0bffc17 	ldw	r2,-16(fp)
81122580:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81122584:	e0bffc17 	ldw	r2,-16(fp)
81122588:	10800017 	ldw	r2,0(r2)
8112258c:	10800304 	addi	r2,r2,12
81122590:	e0fffc17 	ldw	r3,-16(fp)
81122594:	18c00117 	ldw	r3,4(r3)
81122598:	10c00035 	stwio	r3,0(r2)
8112259c:	e0bff817 	ldw	r2,-32(fp)
811225a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811225a4:	e0bff617 	ldw	r2,-40(fp)
811225a8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
811225ac:	e0bffc17 	ldw	r2,-16(fp)
811225b0:	10c00417 	ldw	r3,16(r2)
811225b4:	e0bff717 	ldw	r2,-36(fp)
811225b8:	18bffc26 	beq	r3,r2,811225ac <__reset+0xfb1025ac>
      }
    }

    count--;
811225bc:	e0bff417 	ldw	r2,-48(fp)
811225c0:	10bfffc4 	addi	r2,r2,-1
811225c4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
811225c8:	e0bffc17 	ldw	r2,-16(fp)
811225cc:	10c00517 	ldw	r3,20(r2)
811225d0:	e0bffd17 	ldw	r2,-12(fp)
811225d4:	11000044 	addi	r4,r2,1
811225d8:	e13ffd15 	stw	r4,-12(fp)
811225dc:	10800003 	ldbu	r2,0(r2)
811225e0:	1009883a 	mov	r4,r2
811225e4:	e0bffc17 	ldw	r2,-16(fp)
811225e8:	10c5883a 	add	r2,r2,r3
811225ec:	10801704 	addi	r2,r2,92
811225f0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
811225f4:	e0bffc17 	ldw	r2,-16(fp)
811225f8:	e0fff717 	ldw	r3,-36(fp)
811225fc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81122600:	e0bff417 	ldw	r2,-48(fp)
81122604:	103fc21e 	bne	r2,zero,81122510 <__reset+0xfb102510>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122608:	0005303a 	rdctl	r2,status
8112260c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122610:	e0fffb17 	ldw	r3,-20(fp)
81122614:	00bfff84 	movi	r2,-2
81122618:	1884703a 	and	r2,r3,r2
8112261c:	1001703a 	wrctl	status,r2
  
  return context;
81122620:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
81122624:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81122628:	e0bffc17 	ldw	r2,-16(fp)
8112262c:	10800117 	ldw	r2,4(r2)
81122630:	10c11014 	ori	r3,r2,1088
81122634:	e0bffc17 	ldw	r2,-16(fp)
81122638:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8112263c:	e0bffc17 	ldw	r2,-16(fp)
81122640:	10800017 	ldw	r2,0(r2)
81122644:	10800304 	addi	r2,r2,12
81122648:	e0fffc17 	ldw	r3,-16(fp)
8112264c:	18c00117 	ldw	r3,4(r3)
81122650:	10c00035 	stwio	r3,0(r2)
81122654:	e0bff817 	ldw	r2,-32(fp)
81122658:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112265c:	e0bffa17 	ldw	r2,-24(fp)
81122660:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
81122664:	e0fffe17 	ldw	r3,-8(fp)
81122668:	e0bff417 	ldw	r2,-48(fp)
8112266c:	1885c83a 	sub	r2,r3,r2
}
81122670:	e037883a 	mov	sp,fp
81122674:	dfc00117 	ldw	ra,4(sp)
81122678:	df000017 	ldw	fp,0(sp)
8112267c:	dec00204 	addi	sp,sp,8
81122680:	f800283a 	ret

81122684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81122684:	defffe04 	addi	sp,sp,-8
81122688:	dfc00115 	stw	ra,4(sp)
8112268c:	df000015 	stw	fp,0(sp)
81122690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81122694:	d0a00d17 	ldw	r2,-32716(gp)
81122698:	10000326 	beq	r2,zero,811226a8 <alt_get_errno+0x24>
8112269c:	d0a00d17 	ldw	r2,-32716(gp)
811226a0:	103ee83a 	callr	r2
811226a4:	00000106 	br	811226ac <alt_get_errno+0x28>
811226a8:	d0a03204 	addi	r2,gp,-32568
}
811226ac:	e037883a 	mov	sp,fp
811226b0:	dfc00117 	ldw	ra,4(sp)
811226b4:	df000017 	ldw	fp,0(sp)
811226b8:	dec00204 	addi	sp,sp,8
811226bc:	f800283a 	ret

811226c0 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
811226c0:	defffc04 	addi	sp,sp,-16
811226c4:	df000315 	stw	fp,12(sp)
811226c8:	df000304 	addi	fp,sp,12
811226cc:	e13ffd15 	stw	r4,-12(fp)
811226d0:	e17ffe15 	stw	r5,-8(fp)
811226d4:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
811226d8:	e0bffd17 	ldw	r2,-12(fp)
811226dc:	10800037 	ldwio	r2,0(r2)
811226e0:	1080010c 	andi	r2,r2,4
811226e4:	10000226 	beq	r2,zero,811226f0 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
811226e8:	00bff904 	movi	r2,-28
811226ec:	00001506 	br	81122744 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
811226f0:	e0bfff17 	ldw	r2,-4(fp)
811226f4:	10800017 	ldw	r2,0(r2)
811226f8:	1007883a 	mov	r3,r2
811226fc:	e0bffe17 	ldw	r2,-8(fp)
81122700:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
81122704:	e0bffe17 	ldw	r2,-8(fp)
81122708:	10800104 	addi	r2,r2,4
8112270c:	e0ffff17 	ldw	r3,-4(fp)
81122710:	18c00117 	ldw	r3,4(r3)
81122714:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81122718:	e0bffe17 	ldw	r2,-8(fp)
8112271c:	10800204 	addi	r2,r2,8
81122720:	e0ffff17 	ldw	r3,-4(fp)
81122724:	18c00217 	ldw	r3,8(r3)
81122728:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8112272c:	e0bffe17 	ldw	r2,-8(fp)
81122730:	10800304 	addi	r2,r2,12
81122734:	e0ffff17 	ldw	r3,-4(fp)
81122738:	18c00317 	ldw	r3,12(r3)
8112273c:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
81122740:	0005883a 	mov	r2,zero
}
81122744:	e037883a 	mov	sp,fp
81122748:	df000017 	ldw	fp,0(sp)
8112274c:	dec00104 	addi	sp,sp,4
81122750:	f800283a 	ret

81122754 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
81122754:	defffc04 	addi	sp,sp,-16
81122758:	df000315 	stw	fp,12(sp)
8112275c:	df000304 	addi	fp,sp,12
81122760:	e13ffd15 	stw	r4,-12(fp)
81122764:	e17ffe15 	stw	r5,-8(fp)
81122768:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8112276c:	e0bffd17 	ldw	r2,-12(fp)
81122770:	10800037 	ldwio	r2,0(r2)
81122774:	1080010c 	andi	r2,r2,4
81122778:	10000226 	beq	r2,zero,81122784 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
8112277c:	00bff904 	movi	r2,-28
81122780:	00003b06 	br	81122870 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
81122784:	e0bfff17 	ldw	r2,-4(fp)
81122788:	10800017 	ldw	r2,0(r2)
8112278c:	1007883a 	mov	r3,r2
81122790:	e0bffe17 	ldw	r2,-8(fp)
81122794:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81122798:	e0bffe17 	ldw	r2,-8(fp)
8112279c:	10800104 	addi	r2,r2,4
811227a0:	e0ffff17 	ldw	r3,-4(fp)
811227a4:	18c00117 	ldw	r3,4(r3)
811227a8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
811227ac:	e0bffe17 	ldw	r2,-8(fp)
811227b0:	10800204 	addi	r2,r2,8
811227b4:	e0ffff17 	ldw	r3,-4(fp)
811227b8:	18c00217 	ldw	r3,8(r3)
811227bc:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
811227c0:	e0bffe17 	ldw	r2,-8(fp)
811227c4:	10800304 	addi	r2,r2,12
811227c8:	e0ffff17 	ldw	r3,-4(fp)
811227cc:	18c0030b 	ldhu	r3,12(r3)
811227d0:	18ffffcc 	andi	r3,r3,65535
811227d4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
811227d8:	e0bffe17 	ldw	r2,-8(fp)
811227dc:	10800384 	addi	r2,r2,14
811227e0:	e0ffff17 	ldw	r3,-4(fp)
811227e4:	18c00383 	ldbu	r3,14(r3)
811227e8:	18c03fcc 	andi	r3,r3,255
811227ec:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
811227f0:	e0bffe17 	ldw	r2,-8(fp)
811227f4:	108003c4 	addi	r2,r2,15
811227f8:	e0ffff17 	ldw	r3,-4(fp)
811227fc:	18c003c3 	ldbu	r3,15(r3)
81122800:	18c03fcc 	andi	r3,r3,255
81122804:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
81122808:	e0bffe17 	ldw	r2,-8(fp)
8112280c:	10800404 	addi	r2,r2,16
81122810:	e0ffff17 	ldw	r3,-4(fp)
81122814:	18c0040b 	ldhu	r3,16(r3)
81122818:	18ffffcc 	andi	r3,r3,65535
8112281c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81122820:	e0bffe17 	ldw	r2,-8(fp)
81122824:	10800484 	addi	r2,r2,18
81122828:	e0ffff17 	ldw	r3,-4(fp)
8112282c:	18c0048b 	ldhu	r3,18(r3)
81122830:	18ffffcc 	andi	r3,r3,65535
81122834:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
81122838:	e0bffe17 	ldw	r2,-8(fp)
8112283c:	10800504 	addi	r2,r2,20
81122840:	0007883a 	mov	r3,zero
81122844:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
81122848:	e0bffe17 	ldw	r2,-8(fp)
8112284c:	10800604 	addi	r2,r2,24
81122850:	0007883a 	mov	r3,zero
81122854:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
81122858:	e0bffe17 	ldw	r2,-8(fp)
8112285c:	10800704 	addi	r2,r2,28
81122860:	e0ffff17 	ldw	r3,-4(fp)
81122864:	18c00717 	ldw	r3,28(r3)
81122868:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
8112286c:	0005883a 	mov	r2,zero
}
81122870:	e037883a 	mov	sp,fp
81122874:	df000017 	ldw	fp,0(sp)
81122878:	dec00104 	addi	sp,sp,4
8112287c:	f800283a 	ret

81122880 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
81122880:	defff804 	addi	sp,sp,-32
81122884:	dfc00715 	stw	ra,28(sp)
81122888:	df000615 	stw	fp,24(sp)
8112288c:	df000604 	addi	fp,sp,24
81122890:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
81122894:	e0bfff17 	ldw	r2,-4(fp)
81122898:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8112289c:	e0bffa17 	ldw	r2,-24(fp)
811228a0:	10801783 	ldbu	r2,94(r2)
811228a4:	10803fcc 	andi	r2,r2,255
811228a8:	10001126 	beq	r2,zero,811228f0 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
811228ac:	e0bffa17 	ldw	r2,-24(fp)
811228b0:	10800617 	ldw	r2,24(r2)
811228b4:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
811228b8:	1007883a 	mov	r3,r2
811228bc:	00bffdc4 	movi	r2,-9
811228c0:	1884703a 	and	r2,r3,r2
811228c4:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
811228c8:	e0bffa17 	ldw	r2,-24(fp)
811228cc:	10800617 	ldw	r2,24(r2)
811228d0:	e0fffb17 	ldw	r3,-20(fp)
811228d4:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
811228d8:	e0bffa17 	ldw	r2,-24(fp)
811228dc:	10800617 	ldw	r2,24(r2)
811228e0:	10800404 	addi	r2,r2,16
811228e4:	00c00044 	movi	r3,1
811228e8:	10c00035 	stwio	r3,0(r2)
811228ec:	00001106 	br	81122934 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
811228f0:	e0bffa17 	ldw	r2,-24(fp)
811228f4:	10800317 	ldw	r2,12(r2)
811228f8:	10800104 	addi	r2,r2,4
811228fc:	10800037 	ldwio	r2,0(r2)
81122900:	1007883a 	mov	r3,r2
81122904:	00bffbc4 	movi	r2,-17
81122908:	1884703a 	and	r2,r3,r2
8112290c:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81122910:	e0bffa17 	ldw	r2,-24(fp)
81122914:	10800317 	ldw	r2,12(r2)
81122918:	10800104 	addi	r2,r2,4
8112291c:	e0fffb17 	ldw	r3,-20(fp)
81122920:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81122924:	e0bffa17 	ldw	r2,-24(fp)
81122928:	10800317 	ldw	r2,12(r2)
8112292c:	00c08004 	movi	r3,512
81122930:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
81122934:	e0bffa17 	ldw	r2,-24(fp)
81122938:	10800b17 	ldw	r2,44(r2)
8112293c:	10001226 	beq	r2,zero,81122988 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122940:	0005303a 	rdctl	r2,status
81122944:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122948:	e0fffd17 	ldw	r3,-12(fp)
8112294c:	00bfff84 	movi	r2,-2
81122950:	1884703a 	and	r2,r3,r2
81122954:	1001703a 	wrctl	status,r2
  
  return context;
81122958:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8112295c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
81122960:	e0bffa17 	ldw	r2,-24(fp)
81122964:	10800b17 	ldw	r2,44(r2)
81122968:	e0fffa17 	ldw	r3,-24(fp)
8112296c:	18c00c17 	ldw	r3,48(r3)
81122970:	1809883a 	mov	r4,r3
81122974:	103ee83a 	callr	r2
81122978:	e0bffc17 	ldw	r2,-16(fp)
8112297c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122980:	e0bffe17 	ldw	r2,-8(fp)
81122984:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
81122988:	e0bffa17 	ldw	r2,-24(fp)
8112298c:	10801783 	ldbu	r2,94(r2)
81122990:	10803fcc 	andi	r2,r2,255
81122994:	10000a26 	beq	r2,zero,811229c0 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81122998:	e0bffa17 	ldw	r2,-24(fp)
8112299c:	10800617 	ldw	r2,24(r2)
811229a0:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
811229a4:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
811229a8:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
811229ac:	e0bffa17 	ldw	r2,-24(fp)
811229b0:	10800617 	ldw	r2,24(r2)
811229b4:	e0fffb17 	ldw	r3,-20(fp)
811229b8:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
811229bc:	00000c06 	br	811229f0 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
811229c0:	e0bffa17 	ldw	r2,-24(fp)
811229c4:	10800317 	ldw	r2,12(r2)
811229c8:	10800104 	addi	r2,r2,4
811229cc:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
811229d0:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
811229d4:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
811229d8:	e0bffa17 	ldw	r2,-24(fp)
811229dc:	10800317 	ldw	r2,12(r2)
811229e0:	10800104 	addi	r2,r2,4
811229e4:	e0fffb17 	ldw	r3,-20(fp)
811229e8:	10c00035 	stwio	r3,0(r2)
    }

    return;
811229ec:	0001883a 	nop
}
811229f0:	e037883a 	mov	sp,fp
811229f4:	dfc00117 	ldw	ra,4(sp)
811229f8:	df000017 	ldw	fp,0(sp)
811229fc:	dec00204 	addi	sp,sp,8
81122a00:	f800283a 	ret

81122a04 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81122a04:	defffb04 	addi	sp,sp,-20
81122a08:	df000415 	stw	fp,16(sp)
81122a0c:	df000404 	addi	fp,sp,16
81122a10:	e13ffc15 	stw	r4,-16(fp)
81122a14:	e17ffd15 	stw	r5,-12(fp)
81122a18:	e1bffe15 	stw	r6,-8(fp)
81122a1c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81122a20:	e0bffc17 	ldw	r2,-16(fp)
81122a24:	10c01217 	ldw	r3,72(r2)
81122a28:	e0800117 	ldw	r2,4(fp)
81122a2c:	18800436 	bltu	r3,r2,81122a40 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
81122a30:	e0bffc17 	ldw	r2,-16(fp)
81122a34:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81122a38:	10803fcc 	andi	r2,r2,255
81122a3c:	10000226 	beq	r2,zero,81122a48 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81122a40:	00bffa84 	movi	r2,-22
81122a44:	00000e06 	br	81122a80 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
81122a48:	e0bffd17 	ldw	r2,-12(fp)
81122a4c:	e0fffe17 	ldw	r3,-8(fp)
81122a50:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81122a54:	e0bffd17 	ldw	r2,-12(fp)
81122a58:	e0ffff17 	ldw	r3,-4(fp)
81122a5c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81122a60:	e0bffd17 	ldw	r2,-12(fp)
81122a64:	e0c00117 	ldw	r3,4(fp)
81122a68:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81122a6c:	e0800217 	ldw	r2,8(fp)
81122a70:	10e00034 	orhi	r3,r2,32768
81122a74:	e0bffd17 	ldw	r2,-12(fp)
81122a78:	10c00315 	stw	r3,12(r2)
    
    return 0;
81122a7c:	0005883a 	mov	r2,zero
}
81122a80:	e037883a 	mov	sp,fp
81122a84:	df000017 	ldw	fp,0(sp)
81122a88:	dec00104 	addi	sp,sp,4
81122a8c:	f800283a 	ret

81122a90 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81122a90:	defff604 	addi	sp,sp,-40
81122a94:	df000915 	stw	fp,36(sp)
81122a98:	df000904 	addi	fp,sp,36
81122a9c:	e13ff715 	stw	r4,-36(fp)
81122aa0:	e17ff815 	stw	r5,-32(fp)
81122aa4:	e1bff915 	stw	r6,-28(fp)
81122aa8:	e1fffa15 	stw	r7,-24(fp)
81122aac:	e1800317 	ldw	r6,12(fp)
81122ab0:	e1400417 	ldw	r5,16(fp)
81122ab4:	e1000517 	ldw	r4,20(fp)
81122ab8:	e0c00617 	ldw	r3,24(fp)
81122abc:	e0800717 	ldw	r2,28(fp)
81122ac0:	e1bffb0d 	sth	r6,-20(fp)
81122ac4:	e17ffc05 	stb	r5,-16(fp)
81122ac8:	e13ffd05 	stb	r4,-12(fp)
81122acc:	e0fffe0d 	sth	r3,-8(fp)
81122ad0:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
81122ad4:	e0bff717 	ldw	r2,-36(fp)
81122ad8:	10c01217 	ldw	r3,72(r2)
81122adc:	e0800117 	ldw	r2,4(fp)
81122ae0:	18801936 	bltu	r3,r2,81122b48 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81122ae4:	e13ff717 	ldw	r4,-36(fp)
81122ae8:	20801317 	ldw	r2,76(r4)
81122aec:	20c01417 	ldw	r3,80(r4)
81122af0:	e13ffe0b 	ldhu	r4,-8(fp)
81122af4:	213fffcc 	andi	r4,r4,65535
81122af8:	2015883a 	mov	r10,r4
81122afc:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81122b00:	1ac01136 	bltu	r3,r11,81122b48 <alt_msgdma_construct_extended_descriptor+0xb8>
81122b04:	58c0011e 	bne	r11,r3,81122b0c <alt_msgdma_construct_extended_descriptor+0x7c>
81122b08:	12800f36 	bltu	r2,r10,81122b48 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81122b0c:	e13ff717 	ldw	r4,-36(fp)
81122b10:	20801317 	ldw	r2,76(r4)
81122b14:	20c01417 	ldw	r3,80(r4)
81122b18:	e13fff0b 	ldhu	r4,-4(fp)
81122b1c:	213fffcc 	andi	r4,r4,65535
81122b20:	2011883a 	mov	r8,r4
81122b24:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81122b28:	1a400736 	bltu	r3,r9,81122b48 <alt_msgdma_construct_extended_descriptor+0xb8>
81122b2c:	48c0011e 	bne	r9,r3,81122b34 <alt_msgdma_construct_extended_descriptor+0xa4>
81122b30:	12000536 	bltu	r2,r8,81122b48 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81122b34:	e0bff717 	ldw	r2,-36(fp)
81122b38:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81122b3c:	10803fcc 	andi	r2,r2,255
81122b40:	10800060 	cmpeqi	r2,r2,1
81122b44:	1000021e 	bne	r2,zero,81122b50 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81122b48:	00bffa84 	movi	r2,-22
81122b4c:	00002106 	br	81122bd4 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
81122b50:	e0bff817 	ldw	r2,-32(fp)
81122b54:	e0fff917 	ldw	r3,-28(fp)
81122b58:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
81122b5c:	e0bff817 	ldw	r2,-32(fp)
81122b60:	e0fffa17 	ldw	r3,-24(fp)
81122b64:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81122b68:	e0bff817 	ldw	r2,-32(fp)
81122b6c:	e0c00117 	ldw	r3,4(fp)
81122b70:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81122b74:	e0bff817 	ldw	r2,-32(fp)
81122b78:	e0fffb0b 	ldhu	r3,-20(fp)
81122b7c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
81122b80:	e0bff817 	ldw	r2,-32(fp)
81122b84:	e0fffc03 	ldbu	r3,-16(fp)
81122b88:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
81122b8c:	e0bff817 	ldw	r2,-32(fp)
81122b90:	e0fffd03 	ldbu	r3,-12(fp)
81122b94:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
81122b98:	e0bff817 	ldw	r2,-32(fp)
81122b9c:	e0fffe0b 	ldhu	r3,-8(fp)
81122ba0:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
81122ba4:	e0bff817 	ldw	r2,-32(fp)
81122ba8:	e0ffff0b 	ldhu	r3,-4(fp)
81122bac:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81122bb0:	e0bff817 	ldw	r2,-32(fp)
81122bb4:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
81122bb8:	e0bff817 	ldw	r2,-32(fp)
81122bbc:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81122bc0:	e0800217 	ldw	r2,8(fp)
81122bc4:	10e00034 	orhi	r3,r2,32768
81122bc8:	e0bff817 	ldw	r2,-32(fp)
81122bcc:	10c00715 	stw	r3,28(r2)

  return 0 ;
81122bd0:	0005883a 	mov	r2,zero

}
81122bd4:	e037883a 	mov	sp,fp
81122bd8:	df000017 	ldw	fp,0(sp)
81122bdc:	dec00104 	addi	sp,sp,4
81122be0:	f800283a 	ret

81122be4 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81122be4:	defff004 	addi	sp,sp,-64
81122be8:	dfc00f15 	stw	ra,60(sp)
81122bec:	df000e15 	stw	fp,56(sp)
81122bf0:	df000e04 	addi	fp,sp,56
81122bf4:	e13ffd15 	stw	r4,-12(fp)
81122bf8:	e17ffe15 	stw	r5,-8(fp)
81122bfc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81122c00:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
81122c04:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
81122c08:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81122c0c:	e0bffd17 	ldw	r2,-12(fp)
81122c10:	10800317 	ldw	r2,12(r2)
81122c14:	10800204 	addi	r2,r2,8
81122c18:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81122c1c:	10bfffcc 	andi	r2,r2,65535
81122c20:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81122c24:	e0bffd17 	ldw	r2,-12(fp)
81122c28:	10800317 	ldw	r2,12(r2)
81122c2c:	10800204 	addi	r2,r2,8
81122c30:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81122c34:	1004d43a 	srli	r2,r2,16
81122c38:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81122c3c:	e0bffd17 	ldw	r2,-12(fp)
81122c40:	10800917 	ldw	r2,36(r2)
81122c44:	e0fff617 	ldw	r3,-40(fp)
81122c48:	1880042e 	bgeu	r3,r2,81122c5c <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81122c4c:	e0bffd17 	ldw	r2,-12(fp)
81122c50:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81122c54:	e0fff517 	ldw	r3,-44(fp)
81122c58:	18800236 	bltu	r3,r2,81122c64 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
81122c5c:	00bff904 	movi	r2,-28
81122c60:	00008f06 	br	81122ea0 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81122c64:	00800804 	movi	r2,32
81122c68:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122c6c:	0005303a 	rdctl	r2,status
81122c70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122c74:	e0fff717 	ldw	r3,-36(fp)
81122c78:	00bfff84 	movi	r2,-2
81122c7c:	1884703a 	and	r2,r3,r2
81122c80:	1001703a 	wrctl	status,r2
  
  return context;
81122c84:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81122c88:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81122c8c:	e0bffd17 	ldw	r2,-12(fp)
81122c90:	10800317 	ldw	r2,12(r2)
81122c94:	10800104 	addi	r2,r2,4
81122c98:	e0fff317 	ldw	r3,-52(fp)
81122c9c:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81122ca0:	e0bffd17 	ldw	r2,-12(fp)
81122ca4:	10800317 	ldw	r2,12(r2)
81122ca8:	e0fffd17 	ldw	r3,-12(fp)
81122cac:	18c00317 	ldw	r3,12(r3)
81122cb0:	18c00037 	ldwio	r3,0(r3)
81122cb4:	10c00035 	stwio	r3,0(r2)
81122cb8:	e0bff417 	ldw	r2,-48(fp)
81122cbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122cc0:	e0bffc17 	ldw	r2,-16(fp)
81122cc4:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81122cc8:	e0bffe17 	ldw	r2,-8(fp)
81122ccc:	10001a26 	beq	r2,zero,81122d38 <alt_msgdma_descriptor_async_transfer+0x154>
81122cd0:	e0bfff17 	ldw	r2,-4(fp)
81122cd4:	1000181e 	bne	r2,zero,81122d38 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81122cd8:	00000d06 	br	81122d10 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81122cdc:	01000044 	movi	r4,1
81122ce0:	11201b40 	call	811201b4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81122ce4:	e0bff20b 	ldhu	r2,-56(fp)
81122ce8:	1084e230 	cmpltui	r2,r2,5000
81122cec:	1000051e 	bne	r2,zero,81122d04 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
81122cf0:	012044b4 	movhi	r4,33042
81122cf4:	211b5a04 	addi	r4,r4,28008
81122cf8:	1124de80 	call	81124de8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81122cfc:	00bff084 	movi	r2,-62
81122d00:	00006706 	br	81122ea0 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
81122d04:	e0bff20b 	ldhu	r2,-56(fp)
81122d08:	10800044 	addi	r2,r2,1
81122d0c:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81122d10:	e0bffd17 	ldw	r2,-12(fp)
81122d14:	10c00317 	ldw	r3,12(r2)
81122d18:	e0bffd17 	ldw	r2,-12(fp)
81122d1c:	10800417 	ldw	r2,16(r2)
81122d20:	e1bffe17 	ldw	r6,-8(fp)
81122d24:	100b883a 	mov	r5,r2
81122d28:	1809883a 	mov	r4,r3
81122d2c:	11226c00 	call	811226c0 <alt_msgdma_write_standard_descriptor>
81122d30:	103fea1e 	bne	r2,zero,81122cdc <__reset+0xfb102cdc>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81122d34:	00001f06 	br	81122db4 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81122d38:	e0bffe17 	ldw	r2,-8(fp)
81122d3c:	10001b1e 	bne	r2,zero,81122dac <alt_msgdma_descriptor_async_transfer+0x1c8>
81122d40:	e0bfff17 	ldw	r2,-4(fp)
81122d44:	10001926 	beq	r2,zero,81122dac <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
81122d48:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81122d4c:	00000d06 	br	81122d84 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81122d50:	01000044 	movi	r4,1
81122d54:	11201b40 	call	811201b4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81122d58:	e0bff20b 	ldhu	r2,-56(fp)
81122d5c:	1084e230 	cmpltui	r2,r2,5000
81122d60:	1000051e 	bne	r2,zero,81122d78 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
81122d64:	012044b4 	movhi	r4,33042
81122d68:	211b7004 	addi	r4,r4,28096
81122d6c:	1124de80 	call	81124de8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81122d70:	00bff084 	movi	r2,-62
81122d74:	00004a06 	br	81122ea0 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
81122d78:	e0bff20b 	ldhu	r2,-56(fp)
81122d7c:	10800044 	addi	r2,r2,1
81122d80:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81122d84:	e0bffd17 	ldw	r2,-12(fp)
81122d88:	10c00317 	ldw	r3,12(r2)
81122d8c:	e0bffd17 	ldw	r2,-12(fp)
81122d90:	10800417 	ldw	r2,16(r2)
81122d94:	e1bfff17 	ldw	r6,-4(fp)
81122d98:	100b883a 	mov	r5,r2
81122d9c:	1809883a 	mov	r4,r3
81122da0:	11227540 	call	81122754 <alt_msgdma_write_extended_descriptor>
81122da4:	103fea1e 	bne	r2,zero,81122d50 <__reset+0xfb102d50>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81122da8:	00000206 	br	81122db4 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81122dac:	00bfffc4 	movi	r2,-1
81122db0:	00003b06 	br	81122ea0 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
81122db4:	e0bffd17 	ldw	r2,-12(fp)
81122db8:	10800b17 	ldw	r2,44(r2)
81122dbc:	10001c26 	beq	r2,zero,81122e30 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
81122dc0:	e0bffd17 	ldw	r2,-12(fp)
81122dc4:	10c00d17 	ldw	r3,52(r2)
81122dc8:	e0bff317 	ldw	r2,-52(fp)
81122dcc:	1884b03a 	or	r2,r3,r2
81122dd0:	10800514 	ori	r2,r2,20
81122dd4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81122dd8:	e0fff317 	ldw	r3,-52(fp)
81122ddc:	00bff7c4 	movi	r2,-33
81122de0:	1884703a 	and	r2,r3,r2
81122de4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122de8:	0005303a 	rdctl	r2,status
81122dec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122df0:	e0fffa17 	ldw	r3,-24(fp)
81122df4:	00bfff84 	movi	r2,-2
81122df8:	1884703a 	and	r2,r3,r2
81122dfc:	1001703a 	wrctl	status,r2
  
  return context;
81122e00:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
81122e04:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81122e08:	e0bffd17 	ldw	r2,-12(fp)
81122e0c:	10800317 	ldw	r2,12(r2)
81122e10:	10800104 	addi	r2,r2,4
81122e14:	e0fff317 	ldw	r3,-52(fp)
81122e18:	10c00035 	stwio	r3,0(r2)
81122e1c:	e0bff417 	ldw	r2,-48(fp)
81122e20:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122e24:	e0bff817 	ldw	r2,-32(fp)
81122e28:	1001703a 	wrctl	status,r2
81122e2c:	00001b06 	br	81122e9c <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
81122e30:	e0bffd17 	ldw	r2,-12(fp)
81122e34:	10c00d17 	ldw	r3,52(r2)
81122e38:	e0bff317 	ldw	r2,-52(fp)
81122e3c:	1884b03a 	or	r2,r3,r2
81122e40:	10800114 	ori	r2,r2,4
81122e44:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
81122e48:	e0fff317 	ldw	r3,-52(fp)
81122e4c:	00bff3c4 	movi	r2,-49
81122e50:	1884703a 	and	r2,r3,r2
81122e54:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122e58:	0005303a 	rdctl	r2,status
81122e5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122e60:	e0fffb17 	ldw	r3,-20(fp)
81122e64:	00bfff84 	movi	r2,-2
81122e68:	1884703a 	and	r2,r3,r2
81122e6c:	1001703a 	wrctl	status,r2
  
  return context;
81122e70:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
81122e74:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81122e78:	e0bffd17 	ldw	r2,-12(fp)
81122e7c:	10800317 	ldw	r2,12(r2)
81122e80:	10800104 	addi	r2,r2,4
81122e84:	e0fff317 	ldw	r3,-52(fp)
81122e88:	10c00035 	stwio	r3,0(r2)
81122e8c:	e0bff417 	ldw	r2,-48(fp)
81122e90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122e94:	e0bff917 	ldw	r2,-28(fp)
81122e98:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
81122e9c:	0005883a 	mov	r2,zero
}
81122ea0:	e037883a 	mov	sp,fp
81122ea4:	dfc00117 	ldw	ra,4(sp)
81122ea8:	df000017 	ldw	fp,0(sp)
81122eac:	dec00204 	addi	sp,sp,8
81122eb0:	f800283a 	ret

81122eb4 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81122eb4:	defff004 	addi	sp,sp,-64
81122eb8:	dfc00f15 	stw	ra,60(sp)
81122ebc:	df000e15 	stw	fp,56(sp)
81122ec0:	df000e04 	addi	fp,sp,56
81122ec4:	e13ffd15 	stw	r4,-12(fp)
81122ec8:	e17ffe15 	stw	r5,-8(fp)
81122ecc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
81122ed0:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
81122ed4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
81122ed8:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81122edc:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81122ee0:	e0bffd17 	ldw	r2,-12(fp)
81122ee4:	10800317 	ldw	r2,12(r2)
81122ee8:	10800204 	addi	r2,r2,8
81122eec:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81122ef0:	10bfffcc 	andi	r2,r2,65535
81122ef4:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81122ef8:	e0bffd17 	ldw	r2,-12(fp)
81122efc:	10800317 	ldw	r2,12(r2)
81122f00:	10800204 	addi	r2,r2,8
81122f04:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81122f08:	1004d43a 	srli	r2,r2,16
81122f0c:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
81122f10:	00807804 	movi	r2,480
81122f14:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81122f18:	00001906 	br	81122f80 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
81122f1c:	01000044 	movi	r4,1
81122f20:	11201b40 	call	811201b4 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81122f24:	e0bff30b 	ldhu	r2,-52(fp)
81122f28:	1084e230 	cmpltui	r2,r2,5000
81122f2c:	1000051e 	bne	r2,zero,81122f44 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
81122f30:	012044b4 	movhi	r4,33042
81122f34:	211b8604 	addi	r4,r4,28184
81122f38:	1124de80 	call	81124de8 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81122f3c:	00bff084 	movi	r2,-62
81122f40:	0000b506 	br	81123218 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
81122f44:	e0bff30b 	ldhu	r2,-52(fp)
81122f48:	10800044 	addi	r2,r2,1
81122f4c:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81122f50:	e0bffd17 	ldw	r2,-12(fp)
81122f54:	10800317 	ldw	r2,12(r2)
81122f58:	10800204 	addi	r2,r2,8
81122f5c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
81122f60:	10bfffcc 	andi	r2,r2,65535
81122f64:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81122f68:	e0bffd17 	ldw	r2,-12(fp)
81122f6c:	10800317 	ldw	r2,12(r2)
81122f70:	10800204 	addi	r2,r2,8
81122f74:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81122f78:	1004d43a 	srli	r2,r2,16
81122f7c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81122f80:	e0bffd17 	ldw	r2,-12(fp)
81122f84:	10800917 	ldw	r2,36(r2)
81122f88:	e0fff517 	ldw	r3,-44(fp)
81122f8c:	18bfe32e 	bgeu	r3,r2,81122f1c <__reset+0xfb102f1c>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81122f90:	e0bffd17 	ldw	r2,-12(fp)
81122f94:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81122f98:	e0fff417 	ldw	r3,-48(fp)
81122f9c:	18bfdf2e 	bgeu	r3,r2,81122f1c <__reset+0xfb102f1c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122fa0:	0005303a 	rdctl	r2,status
81122fa4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122fa8:	e0fffc17 	ldw	r3,-16(fp)
81122fac:	00bfff84 	movi	r2,-2
81122fb0:	1884703a 	and	r2,r3,r2
81122fb4:	1001703a 	wrctl	status,r2
  
  return context;
81122fb8:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
81122fbc:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81122fc0:	e0bffd17 	ldw	r2,-12(fp)
81122fc4:	10800317 	ldw	r2,12(r2)
81122fc8:	10800104 	addi	r2,r2,4
81122fcc:	00c00804 	movi	r3,32
81122fd0:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81122fd4:	e0bffd17 	ldw	r2,-12(fp)
81122fd8:	10800317 	ldw	r2,12(r2)
81122fdc:	e0fffd17 	ldw	r3,-12(fp)
81122fe0:	18c00317 	ldw	r3,12(r3)
81122fe4:	18c00037 	ldwio	r3,0(r3)
81122fe8:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81122fec:	e0bffe17 	ldw	r2,-8(fp)
81122ff0:	10001b26 	beq	r2,zero,81123060 <alt_msgdma_descriptor_sync_transfer+0x1ac>
81122ff4:	e0bfff17 	ldw	r2,-4(fp)
81122ff8:	1000191e 	bne	r2,zero,81123060 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
81122ffc:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81123000:	00000d06 	br	81123038 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
81123004:	01000044 	movi	r4,1
81123008:	11201b40 	call	811201b4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8112300c:	e0bff30b 	ldhu	r2,-52(fp)
81123010:	1084e230 	cmpltui	r2,r2,5000
81123014:	1000051e 	bne	r2,zero,8112302c <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
81123018:	012044b4 	movhi	r4,33042
8112301c:	211b9a04 	addi	r4,r4,28264
81123020:	1124de80 	call	81124de8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81123024:	00bff084 	movi	r2,-62
81123028:	00007b06 	br	81123218 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
8112302c:	e0bff30b 	ldhu	r2,-52(fp)
81123030:	10800044 	addi	r2,r2,1
81123034:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81123038:	e0bffd17 	ldw	r2,-12(fp)
8112303c:	10c00317 	ldw	r3,12(r2)
81123040:	e0bffd17 	ldw	r2,-12(fp)
81123044:	10800417 	ldw	r2,16(r2)
81123048:	e1bffe17 	ldw	r6,-8(fp)
8112304c:	100b883a 	mov	r5,r2
81123050:	1809883a 	mov	r4,r3
81123054:	11226c00 	call	811226c0 <alt_msgdma_write_standard_descriptor>
81123058:	103fea1e 	bne	r2,zero,81123004 <__reset+0xfb103004>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8112305c:	00001f06 	br	811230dc <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81123060:	e0bffe17 	ldw	r2,-8(fp)
81123064:	10001b1e 	bne	r2,zero,811230d4 <alt_msgdma_descriptor_sync_transfer+0x220>
81123068:	e0bfff17 	ldw	r2,-4(fp)
8112306c:	10001926 	beq	r2,zero,811230d4 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
81123070:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81123074:	00000d06 	br	811230ac <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81123078:	01000044 	movi	r4,1
8112307c:	11201b40 	call	811201b4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81123080:	e0bff30b 	ldhu	r2,-52(fp)
81123084:	1084e230 	cmpltui	r2,r2,5000
81123088:	1000051e 	bne	r2,zero,811230a0 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
8112308c:	012044b4 	movhi	r4,33042
81123090:	211bab04 	addi	r4,r4,28332
81123094:	1124de80 	call	81124de8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81123098:	00bff084 	movi	r2,-62
8112309c:	00005e06 	br	81123218 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
811230a0:	e0bff30b 	ldhu	r2,-52(fp)
811230a4:	10800044 	addi	r2,r2,1
811230a8:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811230ac:	e0bffd17 	ldw	r2,-12(fp)
811230b0:	10c00317 	ldw	r3,12(r2)
811230b4:	e0bffd17 	ldw	r2,-12(fp)
811230b8:	10800417 	ldw	r2,16(r2)
811230bc:	e1bfff17 	ldw	r6,-4(fp)
811230c0:	100b883a 	mov	r5,r2
811230c4:	1809883a 	mov	r4,r3
811230c8:	11227540 	call	81122754 <alt_msgdma_write_extended_descriptor>
811230cc:	103fea1e 	bne	r2,zero,81123078 <__reset+0xfb103078>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811230d0:	00000206 	br	811230dc <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
811230d4:	00bfffc4 	movi	r2,-1
811230d8:	00004f06 	br	81123218 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811230dc:	e0bffd17 	ldw	r2,-12(fp)
811230e0:	10800317 	ldw	r2,12(r2)
811230e4:	10800104 	addi	r2,r2,4
811230e8:	e0fffd17 	ldw	r3,-12(fp)
811230ec:	19000d17 	ldw	r4,52(r3)
811230f0:	00fff2c4 	movi	r3,-53
811230f4:	20c6703a 	and	r3,r4,r3
811230f8:	18c00114 	ori	r3,r3,4
811230fc:	10c00035 	stwio	r3,0(r2)
81123100:	e0bff717 	ldw	r2,-36(fp)
81123104:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123108:	e0bff917 	ldw	r2,-28(fp)
8112310c:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81123110:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81123114:	e0bffd17 	ldw	r2,-12(fp)
81123118:	10800317 	ldw	r2,12(r2)
8112311c:	10800037 	ldwio	r2,0(r2)
81123120:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81123124:	00001106 	br	8112316c <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
81123128:	01000044 	movi	r4,1
8112312c:	11201b40 	call	811201b4 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81123130:	e0bff30b 	ldhu	r2,-52(fp)
81123134:	1084e230 	cmpltui	r2,r2,5000
81123138:	1000051e 	bne	r2,zero,81123150 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8112313c:	012044b4 	movhi	r4,33042
81123140:	211bbc04 	addi	r4,r4,28400
81123144:	1124de80 	call	81124de8 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
81123148:	00bff084 	movi	r2,-62
8112314c:	00003206 	br	81123218 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
81123150:	e0bff30b 	ldhu	r2,-52(fp)
81123154:	10800044 	addi	r2,r2,1
81123158:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8112315c:	e0bffd17 	ldw	r2,-12(fp)
81123160:	10800317 	ldw	r2,12(r2)
81123164:	10800037 	ldwio	r2,0(r2)
81123168:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8112316c:	e0fff217 	ldw	r3,-56(fp)
81123170:	e0bff817 	ldw	r2,-32(fp)
81123174:	1884703a 	and	r2,r3,r2
81123178:	1000031e 	bne	r2,zero,81123188 <alt_msgdma_descriptor_sync_transfer+0x2d4>
8112317c:	e0bff217 	ldw	r2,-56(fp)
81123180:	1080004c 	andi	r2,r2,1
81123184:	103fe81e 	bne	r2,zero,81123128 <__reset+0xfb103128>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
81123188:	e0fff217 	ldw	r3,-56(fp)
8112318c:	e0bff817 	ldw	r2,-32(fp)
81123190:	1884703a 	and	r2,r3,r2
81123194:	10000226 	beq	r2,zero,811231a0 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
81123198:	e0bff817 	ldw	r2,-32(fp)
8112319c:	00001e06 	br	81123218 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
811231a0:	e0bffd17 	ldw	r2,-12(fp)
811231a4:	10800317 	ldw	r2,12(r2)
811231a8:	10800104 	addi	r2,r2,4
811231ac:	10800037 	ldwio	r2,0(r2)
811231b0:	10800814 	ori	r2,r2,32
811231b4:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811231b8:	0005303a 	rdctl	r2,status
811231bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811231c0:	e0fffa17 	ldw	r3,-24(fp)
811231c4:	00bfff84 	movi	r2,-2
811231c8:	1884703a 	and	r2,r3,r2
811231cc:	1001703a 	wrctl	status,r2
  
  return context;
811231d0:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
811231d4:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811231d8:	e0bffd17 	ldw	r2,-12(fp)
811231dc:	10800317 	ldw	r2,12(r2)
811231e0:	10800104 	addi	r2,r2,4
811231e4:	e0fff617 	ldw	r3,-40(fp)
811231e8:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
811231ec:	e0bffd17 	ldw	r2,-12(fp)
811231f0:	10800317 	ldw	r2,12(r2)
811231f4:	e0fffd17 	ldw	r3,-12(fp)
811231f8:	18c00317 	ldw	r3,12(r3)
811231fc:	18c00037 	ldwio	r3,0(r3)
81123200:	10c00035 	stwio	r3,0(r2)
81123204:	e0bff717 	ldw	r2,-36(fp)
81123208:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112320c:	e0bffb17 	ldw	r2,-20(fp)
81123210:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
81123214:	0005883a 	mov	r2,zero

}
81123218:	e037883a 	mov	sp,fp
8112321c:	dfc00117 	ldw	ra,4(sp)
81123220:	df000017 	ldw	fp,0(sp)
81123224:	dec00204 	addi	sp,sp,8
81123228:	f800283a 	ret

8112322c <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8112322c:	defff804 	addi	sp,sp,-32
81123230:	dfc00715 	stw	ra,28(sp)
81123234:	df000615 	stw	fp,24(sp)
81123238:	df000604 	addi	fp,sp,24
8112323c:	e13ffc15 	stw	r4,-16(fp)
81123240:	e17ffd15 	stw	r5,-12(fp)
81123244:	e1bffe15 	stw	r6,-8(fp)
81123248:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8112324c:	e0800217 	ldw	r2,8(fp)
81123250:	d8800115 	stw	r2,4(sp)
81123254:	e0bfff17 	ldw	r2,-4(fp)
81123258:	d8800015 	stw	r2,0(sp)
8112325c:	e1fffe17 	ldw	r7,-8(fp)
81123260:	000d883a 	mov	r6,zero
81123264:	e17ffd17 	ldw	r5,-12(fp)
81123268:	e13ffc17 	ldw	r4,-16(fp)
8112326c:	1122a040 	call	81122a04 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81123270:	e037883a 	mov	sp,fp
81123274:	dfc00117 	ldw	ra,4(sp)
81123278:	df000017 	ldw	fp,0(sp)
8112327c:	dec00204 	addi	sp,sp,8
81123280:	f800283a 	ret

81123284 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
81123284:	defff804 	addi	sp,sp,-32
81123288:	dfc00715 	stw	ra,28(sp)
8112328c:	df000615 	stw	fp,24(sp)
81123290:	df000604 	addi	fp,sp,24
81123294:	e13ffc15 	stw	r4,-16(fp)
81123298:	e17ffd15 	stw	r5,-12(fp)
8112329c:	e1bffe15 	stw	r6,-8(fp)
811232a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
811232a4:	e0800217 	ldw	r2,8(fp)
811232a8:	d8800115 	stw	r2,4(sp)
811232ac:	e0bfff17 	ldw	r2,-4(fp)
811232b0:	d8800015 	stw	r2,0(sp)
811232b4:	000f883a 	mov	r7,zero
811232b8:	e1bffe17 	ldw	r6,-8(fp)
811232bc:	e17ffd17 	ldw	r5,-12(fp)
811232c0:	e13ffc17 	ldw	r4,-16(fp)
811232c4:	1122a040 	call	81122a04 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
811232c8:	e037883a 	mov	sp,fp
811232cc:	dfc00117 	ldw	ra,4(sp)
811232d0:	df000017 	ldw	fp,0(sp)
811232d4:	dec00204 	addi	sp,sp,8
811232d8:	f800283a 	ret

811232dc <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811232dc:	defff804 	addi	sp,sp,-32
811232e0:	dfc00715 	stw	ra,28(sp)
811232e4:	df000615 	stw	fp,24(sp)
811232e8:	df000604 	addi	fp,sp,24
811232ec:	e13ffc15 	stw	r4,-16(fp)
811232f0:	e17ffd15 	stw	r5,-12(fp)
811232f4:	e1bffe15 	stw	r6,-8(fp)
811232f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
811232fc:	e0800317 	ldw	r2,12(fp)
81123300:	d8800115 	stw	r2,4(sp)
81123304:	e0800217 	ldw	r2,8(fp)
81123308:	d8800015 	stw	r2,0(sp)
8112330c:	e1ffff17 	ldw	r7,-4(fp)
81123310:	e1bffe17 	ldw	r6,-8(fp)
81123314:	e17ffd17 	ldw	r5,-12(fp)
81123318:	e13ffc17 	ldw	r4,-16(fp)
8112331c:	1122a040 	call	81122a04 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81123320:	e037883a 	mov	sp,fp
81123324:	dfc00117 	ldw	ra,4(sp)
81123328:	df000017 	ldw	fp,0(sp)
8112332c:	dec00204 	addi	sp,sp,8
81123330:	f800283a 	ret

81123334 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
81123334:	defff004 	addi	sp,sp,-64
81123338:	dfc00f15 	stw	ra,60(sp)
8112333c:	df000e15 	stw	fp,56(sp)
81123340:	df000e04 	addi	fp,sp,56
81123344:	e13ff915 	stw	r4,-28(fp)
81123348:	e17ffa15 	stw	r5,-24(fp)
8112334c:	e1bffb15 	stw	r6,-20(fp)
81123350:	e1fffc15 	stw	r7,-16(fp)
81123354:	e1000317 	ldw	r4,12(fp)
81123358:	e0c00417 	ldw	r3,16(fp)
8112335c:	e0800517 	ldw	r2,20(fp)
81123360:	e13ffd0d 	sth	r4,-12(fp)
81123364:	e0fffe05 	stb	r3,-8(fp)
81123368:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8112336c:	e0bffd0b 	ldhu	r2,-12(fp)
81123370:	e0fffe03 	ldbu	r3,-8(fp)
81123374:	e13fff0b 	ldhu	r4,-4(fp)
81123378:	d9000615 	stw	r4,24(sp)
8112337c:	d8000515 	stw	zero,20(sp)
81123380:	d8c00415 	stw	r3,16(sp)
81123384:	d8000315 	stw	zero,12(sp)
81123388:	d8800215 	stw	r2,8(sp)
8112338c:	e0800217 	ldw	r2,8(fp)
81123390:	d8800115 	stw	r2,4(sp)
81123394:	e0bffc17 	ldw	r2,-16(fp)
81123398:	d8800015 	stw	r2,0(sp)
8112339c:	e1fffb17 	ldw	r7,-20(fp)
811233a0:	000d883a 	mov	r6,zero
811233a4:	e17ffa17 	ldw	r5,-24(fp)
811233a8:	e13ff917 	ldw	r4,-28(fp)
811233ac:	1122a900 	call	81122a90 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
811233b0:	e037883a 	mov	sp,fp
811233b4:	dfc00117 	ldw	ra,4(sp)
811233b8:	df000017 	ldw	fp,0(sp)
811233bc:	dec00204 	addi	sp,sp,8
811233c0:	f800283a 	ret

811233c4 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
811233c4:	defff004 	addi	sp,sp,-64
811233c8:	dfc00f15 	stw	ra,60(sp)
811233cc:	df000e15 	stw	fp,56(sp)
811233d0:	df000e04 	addi	fp,sp,56
811233d4:	e13ff915 	stw	r4,-28(fp)
811233d8:	e17ffa15 	stw	r5,-24(fp)
811233dc:	e1bffb15 	stw	r6,-20(fp)
811233e0:	e1fffc15 	stw	r7,-16(fp)
811233e4:	e1000317 	ldw	r4,12(fp)
811233e8:	e0c00417 	ldw	r3,16(fp)
811233ec:	e0800517 	ldw	r2,20(fp)
811233f0:	e13ffd0d 	sth	r4,-12(fp)
811233f4:	e0fffe05 	stb	r3,-8(fp)
811233f8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
811233fc:	e0bffd0b 	ldhu	r2,-12(fp)
81123400:	e0fffe03 	ldbu	r3,-8(fp)
81123404:	e13fff0b 	ldhu	r4,-4(fp)
81123408:	d8000615 	stw	zero,24(sp)
8112340c:	d9000515 	stw	r4,20(sp)
81123410:	d8000415 	stw	zero,16(sp)
81123414:	d8c00315 	stw	r3,12(sp)
81123418:	d8800215 	stw	r2,8(sp)
8112341c:	e0800217 	ldw	r2,8(fp)
81123420:	d8800115 	stw	r2,4(sp)
81123424:	e0bffc17 	ldw	r2,-16(fp)
81123428:	d8800015 	stw	r2,0(sp)
8112342c:	000f883a 	mov	r7,zero
81123430:	e1bffb17 	ldw	r6,-20(fp)
81123434:	e17ffa17 	ldw	r5,-24(fp)
81123438:	e13ff917 	ldw	r4,-28(fp)
8112343c:	1122a900 	call	81122a90 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
81123440:	e037883a 	mov	sp,fp
81123444:	dfc00117 	ldw	ra,4(sp)
81123448:	df000017 	ldw	fp,0(sp)
8112344c:	dec00204 	addi	sp,sp,8
81123450:	f800283a 	ret

81123454 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
81123454:	deffee04 	addi	sp,sp,-72
81123458:	dfc01115 	stw	ra,68(sp)
8112345c:	df001015 	stw	fp,64(sp)
81123460:	df001004 	addi	fp,sp,64
81123464:	e13ff715 	stw	r4,-36(fp)
81123468:	e17ff815 	stw	r5,-32(fp)
8112346c:	e1bff915 	stw	r6,-28(fp)
81123470:	e1fffa15 	stw	r7,-24(fp)
81123474:	e1800417 	ldw	r6,16(fp)
81123478:	e1400517 	ldw	r5,20(fp)
8112347c:	e1000617 	ldw	r4,24(fp)
81123480:	e0c00717 	ldw	r3,28(fp)
81123484:	e0800817 	ldw	r2,32(fp)
81123488:	e1bffb0d 	sth	r6,-20(fp)
8112348c:	e17ffc05 	stb	r5,-16(fp)
81123490:	e13ffd05 	stb	r4,-12(fp)
81123494:	e0fffe0d 	sth	r3,-8(fp)
81123498:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8112349c:	e0bffb0b 	ldhu	r2,-20(fp)
811234a0:	e0fffc03 	ldbu	r3,-16(fp)
811234a4:	e13ffd03 	ldbu	r4,-12(fp)
811234a8:	e17ffe0b 	ldhu	r5,-8(fp)
811234ac:	e1bfff0b 	ldhu	r6,-4(fp)
811234b0:	d9800615 	stw	r6,24(sp)
811234b4:	d9400515 	stw	r5,20(sp)
811234b8:	d9000415 	stw	r4,16(sp)
811234bc:	d8c00315 	stw	r3,12(sp)
811234c0:	d8800215 	stw	r2,8(sp)
811234c4:	e0800317 	ldw	r2,12(fp)
811234c8:	d8800115 	stw	r2,4(sp)
811234cc:	e0800217 	ldw	r2,8(fp)
811234d0:	d8800015 	stw	r2,0(sp)
811234d4:	e1fffa17 	ldw	r7,-24(fp)
811234d8:	e1bff917 	ldw	r6,-28(fp)
811234dc:	e17ff817 	ldw	r5,-32(fp)
811234e0:	e13ff717 	ldw	r4,-36(fp)
811234e4:	1122a900 	call	81122a90 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
811234e8:	e037883a 	mov	sp,fp
811234ec:	dfc00117 	ldw	ra,4(sp)
811234f0:	df000017 	ldw	fp,0(sp)
811234f4:	dec00204 	addi	sp,sp,8
811234f8:	f800283a 	ret

811234fc <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811234fc:	defffb04 	addi	sp,sp,-20
81123500:	df000415 	stw	fp,16(sp)
81123504:	df000404 	addi	fp,sp,16
81123508:	e13ffc15 	stw	r4,-16(fp)
8112350c:	e17ffd15 	stw	r5,-12(fp)
81123510:	e1bffe15 	stw	r6,-8(fp)
81123514:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81123518:	e0bffc17 	ldw	r2,-16(fp)
8112351c:	10c01217 	ldw	r3,72(r2)
81123520:	e0800117 	ldw	r2,4(fp)
81123524:	18800436 	bltu	r3,r2,81123538 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
81123528:	e0bffc17 	ldw	r2,-16(fp)
8112352c:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81123530:	10803fcc 	andi	r2,r2,255
81123534:	10000226 	beq	r2,zero,81123540 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81123538:	00bffa84 	movi	r2,-22
8112353c:	00001406 	br	81123590 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
81123540:	e0bffd17 	ldw	r2,-12(fp)
81123544:	e0fffe17 	ldw	r3,-8(fp)
81123548:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8112354c:	e0bffd17 	ldw	r2,-12(fp)
81123550:	e0ffff17 	ldw	r3,-4(fp)
81123554:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81123558:	e0bffd17 	ldw	r2,-12(fp)
8112355c:	e0c00117 	ldw	r3,4(fp)
81123560:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
81123564:	e0fffd17 	ldw	r3,-12(fp)
81123568:	e0bffd17 	ldw	r2,-12(fp)
8112356c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81123570:	e0c00217 	ldw	r3,8(fp)
81123574:	00900034 	movhi	r2,16384
81123578:	10bfffc4 	addi	r2,r2,-1
8112357c:	1884703a 	and	r2,r3,r2
81123580:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
81123584:	e0bffd17 	ldw	r2,-12(fp)
81123588:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8112358c:	0005883a 	mov	r2,zero
}
81123590:	e037883a 	mov	sp,fp
81123594:	df000017 	ldw	fp,0(sp)
81123598:	dec00104 	addi	sp,sp,4
8112359c:	f800283a 	ret

811235a0 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811235a0:	defff404 	addi	sp,sp,-48
811235a4:	df000b15 	stw	fp,44(sp)
811235a8:	df000b04 	addi	fp,sp,44
811235ac:	e13ff715 	stw	r4,-36(fp)
811235b0:	e17ff815 	stw	r5,-32(fp)
811235b4:	e1bff915 	stw	r6,-28(fp)
811235b8:	e1fffa15 	stw	r7,-24(fp)
811235bc:	e1800517 	ldw	r6,20(fp)
811235c0:	e1400617 	ldw	r5,24(fp)
811235c4:	e1000717 	ldw	r4,28(fp)
811235c8:	e0c00817 	ldw	r3,32(fp)
811235cc:	e0800917 	ldw	r2,36(fp)
811235d0:	e1bffb0d 	sth	r6,-20(fp)
811235d4:	e17ffc05 	stb	r5,-16(fp)
811235d8:	e13ffd05 	stb	r4,-12(fp)
811235dc:	e0fffe0d 	sth	r3,-8(fp)
811235e0:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
811235e4:	e0bff717 	ldw	r2,-36(fp)
811235e8:	10c01217 	ldw	r3,72(r2)
811235ec:	e0800317 	ldw	r2,12(fp)
811235f0:	18801936 	bltu	r3,r2,81123658 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
811235f4:	e13ff717 	ldw	r4,-36(fp)
811235f8:	20801317 	ldw	r2,76(r4)
811235fc:	20c01417 	ldw	r3,80(r4)
81123600:	e13ffe0b 	ldhu	r4,-8(fp)
81123604:	213fffcc 	andi	r4,r4,65535
81123608:	2015883a 	mov	r10,r4
8112360c:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81123610:	1ac01136 	bltu	r3,r11,81123658 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81123614:	58c0011e 	bne	r11,r3,8112361c <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
81123618:	12800f36 	bltu	r2,r10,81123658 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8112361c:	e13ff717 	ldw	r4,-36(fp)
81123620:	20801317 	ldw	r2,76(r4)
81123624:	20c01417 	ldw	r3,80(r4)
81123628:	e13fff0b 	ldhu	r4,-4(fp)
8112362c:	213fffcc 	andi	r4,r4,65535
81123630:	2011883a 	mov	r8,r4
81123634:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81123638:	1a400736 	bltu	r3,r9,81123658 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8112363c:	48c0011e 	bne	r9,r3,81123644 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
81123640:	12000536 	bltu	r2,r8,81123658 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81123644:	e0bff717 	ldw	r2,-36(fp)
81123648:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8112364c:	10803fcc 	andi	r2,r2,255
81123650:	10800060 	cmpeqi	r2,r2,1
81123654:	1000021e 	bne	r2,zero,81123660 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81123658:	00bffa84 	movi	r2,-22
8112365c:	00003106 	br	81123724 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
81123660:	e0bff817 	ldw	r2,-32(fp)
81123664:	e0fff917 	ldw	r3,-28(fp)
81123668:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8112366c:	e0bff817 	ldw	r2,-32(fp)
81123670:	e0fffa17 	ldw	r3,-24(fp)
81123674:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81123678:	e0bff817 	ldw	r2,-32(fp)
8112367c:	e0c00117 	ldw	r3,4(fp)
81123680:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
81123684:	e0bff817 	ldw	r2,-32(fp)
81123688:	e0c00217 	ldw	r3,8(fp)
8112368c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81123690:	e0bff817 	ldw	r2,-32(fp)
81123694:	e0c00317 	ldw	r3,12(fp)
81123698:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8112369c:	e0bff817 	ldw	r2,-32(fp)
811236a0:	e0fffb0b 	ldhu	r3,-20(fp)
811236a4:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
811236a8:	e0bff817 	ldw	r2,-32(fp)
811236ac:	e0fffc03 	ldbu	r3,-16(fp)
811236b0:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
811236b4:	e0bff817 	ldw	r2,-32(fp)
811236b8:	e0fffd03 	ldbu	r3,-12(fp)
811236bc:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
811236c0:	e0bff817 	ldw	r2,-32(fp)
811236c4:	e0fffe0b 	ldhu	r3,-8(fp)
811236c8:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
811236cc:	e0bff817 	ldw	r2,-32(fp)
811236d0:	e0ffff0b 	ldhu	r3,-4(fp)
811236d4:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
811236d8:	e0bff817 	ldw	r2,-32(fp)
811236dc:	1019883a 	mov	r12,r2
811236e0:	001b883a 	mov	r13,zero
811236e4:	e33ff515 	stw	r12,-44(fp)
811236e8:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
811236ec:	e0fff517 	ldw	r3,-44(fp)
811236f0:	e0bff817 	ldw	r2,-32(fp)
811236f4:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
811236f8:	e0fff617 	ldw	r3,-40(fp)
811236fc:	e0bff817 	ldw	r2,-32(fp)
81123700:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81123704:	e0c00417 	ldw	r3,16(fp)
81123708:	00900034 	movhi	r2,16384
8112370c:	10bfffc4 	addi	r2,r2,-1
81123710:	1884703a 	and	r2,r3,r2
81123714:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
81123718:	e0bff817 	ldw	r2,-32(fp)
8112371c:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
81123720:	0005883a 	mov	r2,zero
}
81123724:	e037883a 	mov	sp,fp
81123728:	df000017 	ldw	fp,0(sp)
8112372c:	dec00104 	addi	sp,sp,4
81123730:	f800283a 	ret

81123734 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
81123734:	defff804 	addi	sp,sp,-32
81123738:	dfc00715 	stw	ra,28(sp)
8112373c:	df000615 	stw	fp,24(sp)
81123740:	df000604 	addi	fp,sp,24
81123744:	e13ffc15 	stw	r4,-16(fp)
81123748:	e17ffd15 	stw	r5,-12(fp)
8112374c:	e1bffe15 	stw	r6,-8(fp)
81123750:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81123754:	e0800317 	ldw	r2,12(fp)
81123758:	d8800115 	stw	r2,4(sp)
8112375c:	e0800217 	ldw	r2,8(fp)
81123760:	d8800015 	stw	r2,0(sp)
81123764:	e1ffff17 	ldw	r7,-4(fp)
81123768:	e1bffe17 	ldw	r6,-8(fp)
8112376c:	e17ffd17 	ldw	r5,-12(fp)
81123770:	e13ffc17 	ldw	r4,-16(fp)
81123774:	11234fc0 	call	811234fc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
81123778:	e037883a 	mov	sp,fp
8112377c:	dfc00117 	ldw	ra,4(sp)
81123780:	df000017 	ldw	fp,0(sp)
81123784:	dec00204 	addi	sp,sp,8
81123788:	f800283a 	ret

8112378c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8112378c:	defff804 	addi	sp,sp,-32
81123790:	dfc00715 	stw	ra,28(sp)
81123794:	df000615 	stw	fp,24(sp)
81123798:	df000604 	addi	fp,sp,24
8112379c:	e13ffc15 	stw	r4,-16(fp)
811237a0:	e17ffd15 	stw	r5,-12(fp)
811237a4:	e1bffe15 	stw	r6,-8(fp)
811237a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
811237ac:	e0800217 	ldw	r2,8(fp)
811237b0:	d8800115 	stw	r2,4(sp)
811237b4:	e0bfff17 	ldw	r2,-4(fp)
811237b8:	d8800015 	stw	r2,0(sp)
811237bc:	e1fffe17 	ldw	r7,-8(fp)
811237c0:	000d883a 	mov	r6,zero
811237c4:	e17ffd17 	ldw	r5,-12(fp)
811237c8:	e13ffc17 	ldw	r4,-16(fp)
811237cc:	11234fc0 	call	811234fc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
811237d0:	e037883a 	mov	sp,fp
811237d4:	dfc00117 	ldw	ra,4(sp)
811237d8:	df000017 	ldw	fp,0(sp)
811237dc:	dec00204 	addi	sp,sp,8
811237e0:	f800283a 	ret

811237e4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
811237e4:	defff804 	addi	sp,sp,-32
811237e8:	dfc00715 	stw	ra,28(sp)
811237ec:	df000615 	stw	fp,24(sp)
811237f0:	df000604 	addi	fp,sp,24
811237f4:	e13ffc15 	stw	r4,-16(fp)
811237f8:	e17ffd15 	stw	r5,-12(fp)
811237fc:	e1bffe15 	stw	r6,-8(fp)
81123800:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81123804:	e0800217 	ldw	r2,8(fp)
81123808:	d8800115 	stw	r2,4(sp)
8112380c:	e0bfff17 	ldw	r2,-4(fp)
81123810:	d8800015 	stw	r2,0(sp)
81123814:	000f883a 	mov	r7,zero
81123818:	e1bffe17 	ldw	r6,-8(fp)
8112381c:	e17ffd17 	ldw	r5,-12(fp)
81123820:	e13ffc17 	ldw	r4,-16(fp)
81123824:	11234fc0 	call	811234fc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
81123828:	e037883a 	mov	sp,fp
8112382c:	dfc00117 	ldw	ra,4(sp)
81123830:	df000017 	ldw	fp,0(sp)
81123834:	dec00204 	addi	sp,sp,8
81123838:	f800283a 	ret

8112383c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8112383c:	deffee04 	addi	sp,sp,-72
81123840:	dfc01115 	stw	ra,68(sp)
81123844:	df001015 	stw	fp,64(sp)
81123848:	df001004 	addi	fp,sp,64
8112384c:	e13ff915 	stw	r4,-28(fp)
81123850:	e17ffa15 	stw	r5,-24(fp)
81123854:	e1bffb15 	stw	r6,-20(fp)
81123858:	e1fffc15 	stw	r7,-16(fp)
8112385c:	e1000417 	ldw	r4,16(fp)
81123860:	e0c00517 	ldw	r3,20(fp)
81123864:	e0800617 	ldw	r2,24(fp)
81123868:	e13ffd0d 	sth	r4,-12(fp)
8112386c:	e0fffe05 	stb	r3,-8(fp)
81123870:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
81123874:	e0bffd0b 	ldhu	r2,-12(fp)
81123878:	e0fffe03 	ldbu	r3,-8(fp)
8112387c:	e13fff0b 	ldhu	r4,-4(fp)
81123880:	d9000815 	stw	r4,32(sp)
81123884:	d8000715 	stw	zero,28(sp)
81123888:	d8c00615 	stw	r3,24(sp)
8112388c:	d8000515 	stw	zero,20(sp)
81123890:	d8800415 	stw	r2,16(sp)
81123894:	e0800317 	ldw	r2,12(fp)
81123898:	d8800315 	stw	r2,12(sp)
8112389c:	e0800217 	ldw	r2,8(fp)
811238a0:	d8800215 	stw	r2,8(sp)
811238a4:	e0bffc17 	ldw	r2,-16(fp)
811238a8:	d8800115 	stw	r2,4(sp)
811238ac:	e0bffb17 	ldw	r2,-20(fp)
811238b0:	d8800015 	stw	r2,0(sp)
811238b4:	000f883a 	mov	r7,zero
811238b8:	000d883a 	mov	r6,zero
811238bc:	e17ffa17 	ldw	r5,-24(fp)
811238c0:	e13ff917 	ldw	r4,-28(fp)
811238c4:	11235a00 	call	811235a0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
811238c8:	e037883a 	mov	sp,fp
811238cc:	dfc00117 	ldw	ra,4(sp)
811238d0:	df000017 	ldw	fp,0(sp)
811238d4:	dec00204 	addi	sp,sp,8
811238d8:	f800283a 	ret

811238dc <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
811238dc:	deffee04 	addi	sp,sp,-72
811238e0:	dfc01115 	stw	ra,68(sp)
811238e4:	df001015 	stw	fp,64(sp)
811238e8:	df001004 	addi	fp,sp,64
811238ec:	e13ff915 	stw	r4,-28(fp)
811238f0:	e17ffa15 	stw	r5,-24(fp)
811238f4:	e1bffb15 	stw	r6,-20(fp)
811238f8:	e1fffc15 	stw	r7,-16(fp)
811238fc:	e1000417 	ldw	r4,16(fp)
81123900:	e0c00517 	ldw	r3,20(fp)
81123904:	e0800617 	ldw	r2,24(fp)
81123908:	e13ffd0d 	sth	r4,-12(fp)
8112390c:	e0fffe05 	stb	r3,-8(fp)
81123910:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81123914:	e0bffd0b 	ldhu	r2,-12(fp)
81123918:	e0fffe03 	ldbu	r3,-8(fp)
8112391c:	e13fff0b 	ldhu	r4,-4(fp)
81123920:	d8000815 	stw	zero,32(sp)
81123924:	d9000715 	stw	r4,28(sp)
81123928:	d8000615 	stw	zero,24(sp)
8112392c:	d8c00515 	stw	r3,20(sp)
81123930:	d8800415 	stw	r2,16(sp)
81123934:	e0800317 	ldw	r2,12(fp)
81123938:	d8800315 	stw	r2,12(sp)
8112393c:	e0800217 	ldw	r2,8(fp)
81123940:	d8800215 	stw	r2,8(sp)
81123944:	d8000115 	stw	zero,4(sp)
81123948:	d8000015 	stw	zero,0(sp)
8112394c:	e1fffc17 	ldw	r7,-16(fp)
81123950:	e1bffb17 	ldw	r6,-20(fp)
81123954:	e17ffa17 	ldw	r5,-24(fp)
81123958:	e13ff917 	ldw	r4,-28(fp)
8112395c:	11235a00 	call	811235a0 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
81123960:	e037883a 	mov	sp,fp
81123964:	dfc00117 	ldw	ra,4(sp)
81123968:	df000017 	ldw	fp,0(sp)
8112396c:	dec00204 	addi	sp,sp,8
81123970:	f800283a 	ret

81123974 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81123974:	deffec04 	addi	sp,sp,-80
81123978:	dfc01315 	stw	ra,76(sp)
8112397c:	df001215 	stw	fp,72(sp)
81123980:	df001204 	addi	fp,sp,72
81123984:	e13ff715 	stw	r4,-36(fp)
81123988:	e17ff815 	stw	r5,-32(fp)
8112398c:	e1bff915 	stw	r6,-28(fp)
81123990:	e1fffa15 	stw	r7,-24(fp)
81123994:	e1800617 	ldw	r6,24(fp)
81123998:	e1400717 	ldw	r5,28(fp)
8112399c:	e1000817 	ldw	r4,32(fp)
811239a0:	e0c00917 	ldw	r3,36(fp)
811239a4:	e0800a17 	ldw	r2,40(fp)
811239a8:	e1bffb0d 	sth	r6,-20(fp)
811239ac:	e17ffc05 	stb	r5,-16(fp)
811239b0:	e13ffd05 	stb	r4,-12(fp)
811239b4:	e0fffe0d 	sth	r3,-8(fp)
811239b8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
811239bc:	e0bffb0b 	ldhu	r2,-20(fp)
811239c0:	e0fffc03 	ldbu	r3,-16(fp)
811239c4:	e13ffd03 	ldbu	r4,-12(fp)
811239c8:	e17ffe0b 	ldhu	r5,-8(fp)
811239cc:	e1bfff0b 	ldhu	r6,-4(fp)
811239d0:	d9800815 	stw	r6,32(sp)
811239d4:	d9400715 	stw	r5,28(sp)
811239d8:	d9000615 	stw	r4,24(sp)
811239dc:	d8c00515 	stw	r3,20(sp)
811239e0:	d8800415 	stw	r2,16(sp)
811239e4:	e0800517 	ldw	r2,20(fp)
811239e8:	d8800315 	stw	r2,12(sp)
811239ec:	e0800417 	ldw	r2,16(fp)
811239f0:	d8800215 	stw	r2,8(sp)
811239f4:	e0800317 	ldw	r2,12(fp)
811239f8:	d8800115 	stw	r2,4(sp)
811239fc:	e0800217 	ldw	r2,8(fp)
81123a00:	d8800015 	stw	r2,0(sp)
81123a04:	e1fffa17 	ldw	r7,-24(fp)
81123a08:	e1bff917 	ldw	r6,-28(fp)
81123a0c:	e17ff817 	ldw	r5,-32(fp)
81123a10:	e13ff717 	ldw	r4,-36(fp)
81123a14:	11235a00 	call	811235a0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
81123a18:	e037883a 	mov	sp,fp
81123a1c:	dfc00117 	ldw	ra,4(sp)
81123a20:	df000017 	ldw	fp,0(sp)
81123a24:	dec00204 	addi	sp,sp,8
81123a28:	f800283a 	ret

81123a2c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
81123a2c:	defffc04 	addi	sp,sp,-16
81123a30:	df000315 	stw	fp,12(sp)
81123a34:	df000304 	addi	fp,sp,12
81123a38:	e13ffe15 	stw	r4,-8(fp)
81123a3c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
81123a40:	e0bfff17 	ldw	r2,-4(fp)
81123a44:	1000021e 	bne	r2,zero,81123a50 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81123a48:	00bffa84 	movi	r2,-22
81123a4c:	00002f06 	br	81123b0c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
81123a50:	e0bfff17 	ldw	r2,-4(fp)
81123a54:	10c00317 	ldw	r3,12(r2)
81123a58:	e0bfff17 	ldw	r2,-4(fp)
81123a5c:	18800226 	beq	r3,r2,81123a68 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
81123a60:	00bffa84 	movi	r2,-22
81123a64:	00002906 	br	81123b0c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
81123a68:	e0bffe17 	ldw	r2,-8(fp)
81123a6c:	10800017 	ldw	r2,0(r2)
81123a70:	1000051e 	bne	r2,zero,81123a88 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
81123a74:	e0bffe17 	ldw	r2,-8(fp)
81123a78:	e0ffff17 	ldw	r3,-4(fp)
81123a7c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
81123a80:	0005883a 	mov	r2,zero
81123a84:	00002106 	br	81123b0c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
81123a88:	e0bffe17 	ldw	r2,-8(fp)
81123a8c:	10c00017 	ldw	r3,0(r2)
81123a90:	e0bfff17 	ldw	r2,-4(fp)
81123a94:	1880021e 	bne	r3,r2,81123aa0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81123a98:	00bffa84 	movi	r2,-22
81123a9c:	00001b06 	br	81123b0c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81123aa0:	e0bffe17 	ldw	r2,-8(fp)
81123aa4:	10800017 	ldw	r2,0(r2)
81123aa8:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81123aac:	00000906 	br	81123ad4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
81123ab0:	e0bffd17 	ldw	r2,-12(fp)
81123ab4:	10c00317 	ldw	r3,12(r2)
81123ab8:	e0bfff17 	ldw	r2,-4(fp)
81123abc:	1880021e 	bne	r3,r2,81123ac8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81123ac0:	00bffa84 	movi	r2,-22
81123ac4:	00001106 	br	81123b0c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81123ac8:	e0bffd17 	ldw	r2,-12(fp)
81123acc:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
81123ad0:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81123ad4:	e0bffd17 	ldw	r2,-12(fp)
81123ad8:	10800317 	ldw	r2,12(r2)
81123adc:	e0fffe17 	ldw	r3,-8(fp)
81123ae0:	18c00017 	ldw	r3,0(r3)
81123ae4:	10fff21e 	bne	r2,r3,81123ab0 <__reset+0xfb103ab0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
81123ae8:	e0ffff17 	ldw	r3,-4(fp)
81123aec:	e0bffd17 	ldw	r2,-12(fp)
81123af0:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
81123af4:	e0bffe17 	ldw	r2,-8(fp)
81123af8:	10800017 	ldw	r2,0(r2)
81123afc:	1007883a 	mov	r3,r2
81123b00:	e0bfff17 	ldw	r2,-4(fp)
81123b04:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
81123b08:	0005883a 	mov	r2,zero
}
81123b0c:	e037883a 	mov	sp,fp
81123b10:	df000017 	ldw	fp,0(sp)
81123b14:	dec00104 	addi	sp,sp,4
81123b18:	f800283a 	ret

81123b1c <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
81123b1c:	defff804 	addi	sp,sp,-32
81123b20:	df000715 	stw	fp,28(sp)
81123b24:	df000704 	addi	fp,sp,28
81123b28:	e13ffe15 	stw	r4,-8(fp)
81123b2c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
81123b30:	e13fff17 	ldw	r4,-4(fp)
81123b34:	2000021e 	bne	r4,zero,81123b40 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81123b38:	00bffa84 	movi	r2,-22
81123b3c:	00005906 	br	81123ca4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
81123b40:	e13fff17 	ldw	r4,-4(fp)
81123b44:	2015883a 	mov	r10,r4
81123b48:	0017883a 	mov	r11,zero
81123b4c:	e2bffc15 	stw	r10,-16(fp)
81123b50:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81123b54:	e13fff17 	ldw	r4,-4(fp)
81123b58:	21400317 	ldw	r5,12(r4)
81123b5c:	e13ffc17 	ldw	r4,-16(fp)
81123b60:	29000626 	beq	r5,r4,81123b7c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
81123b64:	e13fff17 	ldw	r4,-4(fp)
81123b68:	21400b17 	ldw	r5,44(r4)
81123b6c:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81123b70:	29000226 	beq	r5,r4,81123b7c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
81123b74:	00bffa84 	movi	r2,-22
81123b78:	00004a06 	br	81123ca4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
81123b7c:	e13ffe17 	ldw	r4,-8(fp)
81123b80:	21000017 	ldw	r4,0(r4)
81123b84:	2000051e 	bne	r4,zero,81123b9c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
81123b88:	e0bffe17 	ldw	r2,-8(fp)
81123b8c:	e0ffff17 	ldw	r3,-4(fp)
81123b90:	10c00015 	stw	r3,0(r2)
		return 0;
81123b94:	0005883a 	mov	r2,zero
81123b98:	00004206 	br	81123ca4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
81123b9c:	e13ffe17 	ldw	r4,-8(fp)
81123ba0:	21400017 	ldw	r5,0(r4)
81123ba4:	e13fff17 	ldw	r4,-4(fp)
81123ba8:	2900021e 	bne	r5,r4,81123bb4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81123bac:	00bffa84 	movi	r2,-22
81123bb0:	00003c06 	br	81123ca4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81123bb4:	e13ffe17 	ldw	r4,-8(fp)
81123bb8:	21000017 	ldw	r4,0(r4)
81123bbc:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
81123bc0:	e13ffe17 	ldw	r4,-8(fp)
81123bc4:	21000017 	ldw	r4,0(r4)
81123bc8:	2011883a 	mov	r8,r4
81123bcc:	0013883a 	mov	r9,zero
81123bd0:	e23ffa15 	stw	r8,-24(fp)
81123bd4:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81123bd8:	00001806 	br	81123c3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
81123bdc:	e13fff17 	ldw	r4,-4(fp)
81123be0:	200d883a 	mov	r6,r4
81123be4:	000f883a 	mov	r7,zero
81123be8:	e1bffc15 	stw	r6,-16(fp)
81123bec:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
81123bf0:	e13ff917 	ldw	r4,-28(fp)
81123bf4:	21400317 	ldw	r5,12(r4)
81123bf8:	e13ffc17 	ldw	r4,-16(fp)
81123bfc:	2900061e 	bne	r5,r4,81123c18 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81123c00:	e13ff917 	ldw	r4,-28(fp)
81123c04:	21400b17 	ldw	r5,44(r4)
81123c08:	e13ffd17 	ldw	r4,-12(fp)
81123c0c:	2900021e 	bne	r5,r4,81123c18 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81123c10:	00bffa84 	movi	r2,-22
81123c14:	00002306 	br	81123ca4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81123c18:	e13ff917 	ldw	r4,-28(fp)
81123c1c:	21000317 	ldw	r4,12(r4)
81123c20:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81123c24:	e13ff917 	ldw	r4,-28(fp)
81123c28:	21000b17 	ldw	r4,44(r4)
81123c2c:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81123c30:	e13ffc17 	ldw	r4,-16(fp)
81123c34:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81123c38:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81123c3c:	e13ff917 	ldw	r4,-28(fp)
81123c40:	21400317 	ldw	r5,12(r4)
81123c44:	e13ffa17 	ldw	r4,-24(fp)
81123c48:	29000426 	beq	r5,r4,81123c5c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81123c4c:	e13ff917 	ldw	r4,-28(fp)
81123c50:	21400b17 	ldw	r5,44(r4)
81123c54:	e13ffb17 	ldw	r4,-20(fp)
81123c58:	293fe01e 	bne	r5,r4,81123bdc <__reset+0xfb103bdc>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
81123c5c:	e13fff17 	ldw	r4,-4(fp)
81123c60:	2005883a 	mov	r2,r4
81123c64:	0007883a 	mov	r3,zero
81123c68:	e0bffc15 	stw	r2,-16(fp)
81123c6c:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
81123c70:	e0fffc17 	ldw	r3,-16(fp)
81123c74:	e0bff917 	ldw	r2,-28(fp)
81123c78:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
81123c7c:	e0fffd17 	ldw	r3,-12(fp)
81123c80:	e0bff917 	ldw	r2,-28(fp)
81123c84:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
81123c88:	e0fffa17 	ldw	r3,-24(fp)
81123c8c:	e0bfff17 	ldw	r2,-4(fp)
81123c90:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
81123c94:	e0fffb17 	ldw	r3,-20(fp)
81123c98:	e0bfff17 	ldw	r2,-4(fp)
81123c9c:	10c00b15 	stw	r3,44(r2)
	return 0;
81123ca0:	0005883a 	mov	r2,zero
}
81123ca4:	e037883a 	mov	sp,fp
81123ca8:	df000017 	ldw	fp,0(sp)
81123cac:	dec00104 	addi	sp,sp,4
81123cb0:	f800283a 	ret

81123cb4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
81123cb4:	defffc04 	addi	sp,sp,-16
81123cb8:	df000315 	stw	fp,12(sp)
81123cbc:	df000304 	addi	fp,sp,12
81123cc0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81123cc4:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
81123cc8:	e0bfff17 	ldw	r2,-4(fp)
81123ccc:	1000021e 	bne	r2,zero,81123cd8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
81123cd0:	00bffa84 	movi	r2,-22
81123cd4:	00001906 	br	81123d3c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81123cd8:	e0bfff17 	ldw	r2,-4(fp)
81123cdc:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81123ce0:	00000a06 	br	81123d0c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
81123ce4:	e0bffd17 	ldw	r2,-12(fp)
81123ce8:	10800717 	ldw	r2,28(r2)
81123cec:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81123cf0:	e0bffe17 	ldw	r2,-8(fp)
81123cf4:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81123cf8:	e0bffd17 	ldw	r2,-12(fp)
81123cfc:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81123d00:	e0bffd17 	ldw	r2,-12(fp)
81123d04:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
81123d08:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81123d0c:	e0bffd17 	ldw	r2,-12(fp)
81123d10:	10c00317 	ldw	r3,12(r2)
81123d14:	e0bfff17 	ldw	r2,-4(fp)
81123d18:	18bff21e 	bne	r3,r2,81123ce4 <__reset+0xfb103ce4>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81123d1c:	e0bffd17 	ldw	r2,-12(fp)
81123d20:	10800717 	ldw	r2,28(r2)
81123d24:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81123d28:	e0bffe17 	ldw	r2,-8(fp)
81123d2c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81123d30:	e0bffd17 	ldw	r2,-12(fp)
81123d34:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
81123d38:	0005883a 	mov	r2,zero
}
81123d3c:	e037883a 	mov	sp,fp
81123d40:	df000017 	ldw	fp,0(sp)
81123d44:	dec00104 	addi	sp,sp,4
81123d48:	f800283a 	ret

81123d4c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
81123d4c:	defff804 	addi	sp,sp,-32
81123d50:	df000715 	stw	fp,28(sp)
81123d54:	df000704 	addi	fp,sp,28
81123d58:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81123d5c:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
81123d60:	e13fff17 	ldw	r4,-4(fp)
81123d64:	2000021e 	bne	r4,zero,81123d70 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
81123d68:	00bffa84 	movi	r2,-22
81123d6c:	00002806 	br	81123e10 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81123d70:	e13fff17 	ldw	r4,-4(fp)
81123d74:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
81123d78:	e13fff17 	ldw	r4,-4(fp)
81123d7c:	2005883a 	mov	r2,r4
81123d80:	0007883a 	mov	r3,zero
81123d84:	e0bffb15 	stw	r2,-20(fp)
81123d88:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81123d8c:	00001006 	br	81123dd0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
81123d90:	e0bff917 	ldw	r2,-28(fp)
81123d94:	10800f17 	ldw	r2,60(r2)
81123d98:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81123d9c:	e0bffa17 	ldw	r2,-24(fp)
81123da0:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81123da4:	e0bff917 	ldw	r2,-28(fp)
81123da8:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81123dac:	e0bff917 	ldw	r2,-28(fp)
81123db0:	10800317 	ldw	r2,12(r2)
81123db4:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81123db8:	e0bff917 	ldw	r2,-28(fp)
81123dbc:	10800b17 	ldw	r2,44(r2)
81123dc0:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81123dc4:	e0bffd17 	ldw	r2,-12(fp)
81123dc8:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81123dcc:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81123dd0:	e0bff917 	ldw	r2,-28(fp)
81123dd4:	10c00317 	ldw	r3,12(r2)
81123dd8:	e0bffb17 	ldw	r2,-20(fp)
81123ddc:	18800426 	beq	r3,r2,81123df0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81123de0:	e0bff917 	ldw	r2,-28(fp)
81123de4:	10c00b17 	ldw	r3,44(r2)
81123de8:	e0bffc17 	ldw	r2,-16(fp)
81123dec:	18bfe81e 	bne	r3,r2,81123d90 <__reset+0xfb103d90>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81123df0:	e0bff917 	ldw	r2,-28(fp)
81123df4:	10800f17 	ldw	r2,60(r2)
81123df8:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81123dfc:	e0bffa17 	ldw	r2,-24(fp)
81123e00:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81123e04:	e0bff917 	ldw	r2,-28(fp)
81123e08:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81123e0c:	0005883a 	mov	r2,zero
}
81123e10:	e037883a 	mov	sp,fp
81123e14:	df000017 	ldw	fp,0(sp)
81123e18:	dec00104 	addi	sp,sp,4
81123e1c:	f800283a 	ret

81123e20 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81123e20:	deffef04 	addi	sp,sp,-68
81123e24:	df001015 	stw	fp,64(sp)
81123e28:	df001004 	addi	fp,sp,64
81123e2c:	e13ffb15 	stw	r4,-20(fp)
81123e30:	e17ffc15 	stw	r5,-16(fp)
81123e34:	e1bffd15 	stw	r6,-12(fp)
81123e38:	3807883a 	mov	r3,r7
81123e3c:	e0800117 	ldw	r2,4(fp)
81123e40:	e0fffe05 	stb	r3,-8(fp)
81123e44:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
81123e48:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
81123e4c:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81123e50:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
81123e54:	e0bffc17 	ldw	r2,-16(fp)
81123e58:	e0bff915 	stw	r2,-28(fp)
81123e5c:	e0bffd17 	ldw	r2,-12(fp)
81123e60:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
81123e64:	e0bffb17 	ldw	r2,-20(fp)
81123e68:	10800617 	ldw	r2,24(r2)
81123e6c:	10800037 	ldwio	r2,0(r2)
81123e70:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
81123e74:	e0bff017 	ldw	r2,-64(fp)
81123e78:	1080004c 	andi	r2,r2,1
81123e7c:	10000226 	beq	r2,zero,81123e88 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
81123e80:	00bffc04 	movi	r2,-16
81123e84:	00009206 	br	811240d0 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81123e88:	00800804 	movi	r2,32
81123e8c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123e90:	0005303a 	rdctl	r2,status
81123e94:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123e98:	e0fff517 	ldw	r3,-44(fp)
81123e9c:	00bfff84 	movi	r2,-2
81123ea0:	1884703a 	and	r2,r3,r2
81123ea4:	1001703a 	wrctl	status,r2
  
  return context;
81123ea8:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81123eac:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81123eb0:	e0bffb17 	ldw	r2,-20(fp)
81123eb4:	10800317 	ldw	r2,12(r2)
81123eb8:	10800104 	addi	r2,r2,4
81123ebc:	e0fff117 	ldw	r3,-60(fp)
81123ec0:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
81123ec4:	e0bffb17 	ldw	r2,-20(fp)
81123ec8:	10800317 	ldw	r2,12(r2)
81123ecc:	e0fffb17 	ldw	r3,-20(fp)
81123ed0:	18c00317 	ldw	r3,12(r3)
81123ed4:	18c00037 	ldwio	r3,0(r3)
81123ed8:	10c00035 	stwio	r3,0(r2)
81123edc:	e0bff217 	ldw	r2,-56(fp)
81123ee0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123ee4:	e0bff317 	ldw	r2,-52(fp)
81123ee8:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
81123eec:	e0bffb17 	ldw	r2,-20(fp)
81123ef0:	10800b17 	ldw	r2,44(r2)
81123ef4:	10002326 	beq	r2,zero,81123f84 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81123ef8:	e0bffb17 	ldw	r2,-20(fp)
81123efc:	10c00d17 	ldw	r3,52(r2)
81123f00:	e0bff117 	ldw	r2,-60(fp)
81123f04:	1884b03a 	or	r2,r3,r2
81123f08:	10800514 	ori	r2,r2,20
81123f0c:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81123f10:	e0fff117 	ldw	r3,-60(fp)
81123f14:	00bff7c4 	movi	r2,-33
81123f18:	1884703a 	and	r2,r3,r2
81123f1c:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81123f20:	e0bff017 	ldw	r2,-64(fp)
81123f24:	10800214 	ori	r2,r2,8
81123f28:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123f2c:	0005303a 	rdctl	r2,status
81123f30:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123f34:	e0fff717 	ldw	r3,-36(fp)
81123f38:	00bfff84 	movi	r2,-2
81123f3c:	1884703a 	and	r2,r3,r2
81123f40:	1001703a 	wrctl	status,r2
  
  return context;
81123f44:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
81123f48:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81123f4c:	e0bffb17 	ldw	r2,-20(fp)
81123f50:	10800317 	ldw	r2,12(r2)
81123f54:	10800104 	addi	r2,r2,4
81123f58:	e0fff117 	ldw	r3,-60(fp)
81123f5c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81123f60:	e0bffb17 	ldw	r2,-20(fp)
81123f64:	10800617 	ldw	r2,24(r2)
81123f68:	e0fff017 	ldw	r3,-64(fp)
81123f6c:	10c00035 	stwio	r3,0(r2)
81123f70:	e0bff217 	ldw	r2,-56(fp)
81123f74:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123f78:	e0bff417 	ldw	r2,-48(fp)
81123f7c:	1001703a 	wrctl	status,r2
81123f80:	00002306 	br	81124010 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
81123f84:	e0bffb17 	ldw	r2,-20(fp)
81123f88:	10c00d17 	ldw	r3,52(r2)
81123f8c:	e0bff117 	ldw	r2,-60(fp)
81123f90:	1884b03a 	or	r2,r3,r2
81123f94:	10800114 	ori	r2,r2,4
81123f98:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
81123f9c:	e0fff117 	ldw	r3,-60(fp)
81123fa0:	00bff3c4 	movi	r2,-49
81123fa4:	1884703a 	and	r2,r3,r2
81123fa8:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
81123fac:	e0fff017 	ldw	r3,-64(fp)
81123fb0:	00bffdc4 	movi	r2,-9
81123fb4:	1884703a 	and	r2,r3,r2
81123fb8:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123fbc:	0005303a 	rdctl	r2,status
81123fc0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123fc4:	e0fff817 	ldw	r3,-32(fp)
81123fc8:	00bfff84 	movi	r2,-2
81123fcc:	1884703a 	and	r2,r3,r2
81123fd0:	1001703a 	wrctl	status,r2
  
  return context;
81123fd4:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
81123fd8:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81123fdc:	e0bffb17 	ldw	r2,-20(fp)
81123fe0:	10800317 	ldw	r2,12(r2)
81123fe4:	10800104 	addi	r2,r2,4
81123fe8:	e0fff117 	ldw	r3,-60(fp)
81123fec:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81123ff0:	e0bffb17 	ldw	r2,-20(fp)
81123ff4:	10800617 	ldw	r2,24(r2)
81123ff8:	e0fff017 	ldw	r3,-64(fp)
81123ffc:	10c00035 	stwio	r3,0(r2)
81124000:	e0bff217 	ldw	r2,-56(fp)
81124004:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124008:	e0bff617 	ldw	r2,-40(fp)
8112400c:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
81124010:	e0bffb17 	ldw	r2,-20(fp)
81124014:	10800617 	ldw	r2,24(r2)
81124018:	10800104 	addi	r2,r2,4
8112401c:	e0fff917 	ldw	r3,-28(fp)
81124020:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
81124024:	e0bffb17 	ldw	r2,-20(fp)
81124028:	10800617 	ldw	r2,24(r2)
8112402c:	10800204 	addi	r2,r2,8
81124030:	e0fffa17 	ldw	r3,-24(fp)
81124034:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
81124038:	e0bffe03 	ldbu	r2,-8(fp)
8112403c:	10000426 	beq	r2,zero,81124050 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
81124040:	e0bff017 	ldw	r2,-64(fp)
81124044:	10800414 	ori	r2,r2,16
81124048:	e0bff015 	stw	r2,-64(fp)
8112404c:	00000406 	br	81124060 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
81124050:	e0fff017 	ldw	r3,-64(fp)
81124054:	00bffbc4 	movi	r2,-17
81124058:	1884703a 	and	r2,r3,r2
8112405c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
81124060:	e0bfff03 	ldbu	r2,-4(fp)
81124064:	10000e26 	beq	r2,zero,811240a0 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
81124068:	e0bff017 	ldw	r2,-64(fp)
8112406c:	10800094 	ori	r2,r2,2
81124070:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81124074:	e0bffb17 	ldw	r2,-20(fp)
81124078:	10800617 	ldw	r2,24(r2)
8112407c:	10800304 	addi	r2,r2,12
81124080:	10800037 	ldwio	r2,0(r2)
81124084:	10000a1e 	bne	r2,zero,811240b0 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81124088:	e0bffb17 	ldw	r2,-20(fp)
8112408c:	10800617 	ldw	r2,24(r2)
81124090:	10800304 	addi	r2,r2,12
81124094:	00c03fc4 	movi	r3,255
81124098:	10c00035 	stwio	r3,0(r2)
8112409c:	00000406 	br	811240b0 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
811240a0:	e0fff017 	ldw	r3,-64(fp)
811240a4:	00bfff44 	movi	r2,-3
811240a8:	1884703a 	and	r2,r3,r2
811240ac:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
811240b0:	e0bff017 	ldw	r2,-64(fp)
811240b4:	10800054 	ori	r2,r2,1
811240b8:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
811240bc:	e0bffb17 	ldw	r2,-20(fp)
811240c0:	10800617 	ldw	r2,24(r2)
811240c4:	e0fff017 	ldw	r3,-64(fp)
811240c8:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
811240cc:	0005883a 	mov	r2,zero
}
811240d0:	e037883a 	mov	sp,fp
811240d4:	df000017 	ldw	fp,0(sp)
811240d8:	dec00104 	addi	sp,sp,4
811240dc:	f800283a 	ret

811240e0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
811240e0:	defff704 	addi	sp,sp,-36
811240e4:	dfc00815 	stw	ra,32(sp)
811240e8:	df000715 	stw	fp,28(sp)
811240ec:	dc400615 	stw	r17,24(sp)
811240f0:	dc000515 	stw	r16,20(sp)
811240f4:	df000704 	addi	fp,sp,28
811240f8:	e13ffa15 	stw	r4,-24(fp)
811240fc:	e17ffb15 	stw	r5,-20(fp)
81124100:	3007883a 	mov	r3,r6
81124104:	3805883a 	mov	r2,r7
81124108:	e0fffc05 	stb	r3,-16(fp)
8112410c:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
81124110:	e13ffb17 	ldw	r4,-20(fp)
81124114:	1123cb40 	call	81123cb4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
81124118:	10000226 	beq	r2,zero,81124124 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
8112411c:	00bffa84 	movi	r2,-22
81124120:	00000b06 	br	81124150 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
81124124:	e0bffb17 	ldw	r2,-20(fp)
81124128:	1021883a 	mov	r16,r2
8112412c:	0023883a 	mov	r17,zero
81124130:	e0fffc03 	ldbu	r3,-16(fp)
81124134:	e0bffd03 	ldbu	r2,-12(fp)
81124138:	d8800015 	stw	r2,0(sp)
8112413c:	180f883a 	mov	r7,r3
81124140:	800b883a 	mov	r5,r16
81124144:	880d883a 	mov	r6,r17
81124148:	e13ffa17 	ldw	r4,-24(fp)
8112414c:	1123e200 	call	81123e20 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81124150:	e6fffe04 	addi	sp,fp,-8
81124154:	dfc00317 	ldw	ra,12(sp)
81124158:	df000217 	ldw	fp,8(sp)
8112415c:	dc400117 	ldw	r17,4(sp)
81124160:	dc000017 	ldw	r16,0(sp)
81124164:	dec00404 	addi	sp,sp,16
81124168:	f800283a 	ret

8112416c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8112416c:	defff704 	addi	sp,sp,-36
81124170:	dfc00815 	stw	ra,32(sp)
81124174:	df000715 	stw	fp,28(sp)
81124178:	dc400615 	stw	r17,24(sp)
8112417c:	dc000515 	stw	r16,20(sp)
81124180:	df000704 	addi	fp,sp,28
81124184:	e13ffa15 	stw	r4,-24(fp)
81124188:	e17ffb15 	stw	r5,-20(fp)
8112418c:	3007883a 	mov	r3,r6
81124190:	3805883a 	mov	r2,r7
81124194:	e0fffc05 	stb	r3,-16(fp)
81124198:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
8112419c:	e13ffb17 	ldw	r4,-20(fp)
811241a0:	1123d4c0 	call	81123d4c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
811241a4:	10000226 	beq	r2,zero,811241b0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
811241a8:	00bffa84 	movi	r2,-22
811241ac:	00000b06 	br	811241dc <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
811241b0:	e0bffb17 	ldw	r2,-20(fp)
811241b4:	1021883a 	mov	r16,r2
811241b8:	0023883a 	mov	r17,zero
811241bc:	e0fffc03 	ldbu	r3,-16(fp)
811241c0:	e0bffd03 	ldbu	r2,-12(fp)
811241c4:	d8800015 	stw	r2,0(sp)
811241c8:	180f883a 	mov	r7,r3
811241cc:	800b883a 	mov	r5,r16
811241d0:	880d883a 	mov	r6,r17
811241d4:	e13ffa17 	ldw	r4,-24(fp)
811241d8:	1123e200 	call	81123e20 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
811241dc:	e6fffe04 	addi	sp,fp,-8
811241e0:	dfc00317 	ldw	ra,12(sp)
811241e4:	df000217 	ldw	fp,8(sp)
811241e8:	dc400117 	ldw	r17,4(sp)
811241ec:	dc000017 	ldw	r16,0(sp)
811241f0:	dec00404 	addi	sp,sp,16
811241f4:	f800283a 	ret

811241f8 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
811241f8:	defffc04 	addi	sp,sp,-16
811241fc:	dfc00315 	stw	ra,12(sp)
81124200:	df000215 	stw	fp,8(sp)
81124204:	df000204 	addi	fp,sp,8
81124208:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8112420c:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
81124210:	d1601204 	addi	r5,gp,-32696
81124214:	e13fff17 	ldw	r4,-4(fp)
81124218:	11247cc0 	call	811247cc <alt_find_dev>
8112421c:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
81124220:	e0bffe17 	ldw	r2,-8(fp)
81124224:	1000041e 	bne	r2,zero,81124238 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
81124228:	11226840 	call	81122684 <alt_get_errno>
8112422c:	1007883a 	mov	r3,r2
81124230:	008004c4 	movi	r2,19
81124234:	18800015 	stw	r2,0(r3)
    }

    return dev;
81124238:	e0bffe17 	ldw	r2,-8(fp)
}
8112423c:	e037883a 	mov	sp,fp
81124240:	dfc00117 	ldw	ra,4(sp)
81124244:	df000017 	ldw	fp,0(sp)
81124248:	dec00204 	addi	sp,sp,8
8112424c:	f800283a 	ret

81124250 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81124250:	defff804 	addi	sp,sp,-32
81124254:	dfc00715 	stw	ra,28(sp)
81124258:	df000615 	stw	fp,24(sp)
8112425c:	df000604 	addi	fp,sp,24
81124260:	e13ffd15 	stw	r4,-12(fp)
81124264:	e17ffe15 	stw	r5,-8(fp)
81124268:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8112426c:	e0bffd17 	ldw	r2,-12(fp)
81124270:	10801783 	ldbu	r2,94(r2)
81124274:	10803fcc 	andi	r2,r2,255
81124278:	10000b26 	beq	r2,zero,811242a8 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8112427c:	e0bffd17 	ldw	r2,-12(fp)
81124280:	10800617 	ldw	r2,24(r2)
81124284:	00c00104 	movi	r3,4
81124288:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8112428c:	0001883a 	nop
81124290:	e0bffd17 	ldw	r2,-12(fp)
81124294:	10800617 	ldw	r2,24(r2)
81124298:	10800037 	ldwio	r2,0(r2)
8112429c:	1080010c 	andi	r2,r2,4
811242a0:	1005d0ba 	srai	r2,r2,2
811242a4:	103ffa1e 	bne	r2,zero,81124290 <__reset+0xfb104290>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
811242a8:	e0bffd17 	ldw	r2,-12(fp)
811242ac:	10800317 	ldw	r2,12(r2)
811242b0:	10800104 	addi	r2,r2,4
811242b4:	00c00084 	movi	r3,2
811242b8:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
811242bc:	0001883a 	nop
811242c0:	e0bffd17 	ldw	r2,-12(fp)
811242c4:	10800317 	ldw	r2,12(r2)
811242c8:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
811242cc:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
811242d0:	103ffb1e 	bne	r2,zero,811242c0 <__reset+0xfb1042c0>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
811242d4:	e0bffd17 	ldw	r2,-12(fp)
811242d8:	10800317 	ldw	r2,12(r2)
811242dc:	10800104 	addi	r2,r2,4
811242e0:	10800037 	ldwio	r2,0(r2)
811242e4:	1007883a 	mov	r3,r2
811242e8:	00bffbc4 	movi	r2,-17
811242ec:	1884703a 	and	r2,r3,r2
811242f0:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811242f4:	e0bffb17 	ldw	r2,-20(fp)
811242f8:	10800814 	ori	r2,r2,32
811242fc:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81124300:	e0bffd17 	ldw	r2,-12(fp)
81124304:	10800317 	ldw	r2,12(r2)
81124308:	10800104 	addi	r2,r2,4
8112430c:	e0fffb17 	ldw	r3,-20(fp)
81124310:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
81124314:	e0bffd17 	ldw	r2,-12(fp)
81124318:	10800317 	ldw	r2,12(r2)
8112431c:	e0fffd17 	ldw	r3,-12(fp)
81124320:	18c00317 	ldw	r3,12(r3)
81124324:	18c00037 	ldwio	r3,0(r3)
81124328:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8112432c:	e0bffd17 	ldw	r2,-12(fp)
81124330:	10801783 	ldbu	r2,94(r2)
81124334:	10803fcc 	andi	r2,r2,255
81124338:	10000826 	beq	r2,zero,8112435c <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8112433c:	e0bffd17 	ldw	r2,-12(fp)
81124340:	10800617 	ldw	r2,24(r2)
81124344:	10800404 	addi	r2,r2,16
81124348:	e0fffd17 	ldw	r3,-12(fp)
8112434c:	18c00617 	ldw	r3,24(r3)
81124350:	18c00404 	addi	r3,r3,16
81124354:	18c00037 	ldwio	r3,0(r3)
81124358:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8112435c:	d1601204 	addi	r5,gp,-32696
81124360:	e13ffd17 	ldw	r4,-12(fp)
81124364:	11246680 	call	81124668 <alt_dev_llist_insert>
81124368:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8112436c:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
81124370:	e0bffc17 	ldw	r2,-16(fp)
81124374:	1000081e 	bne	r2,zero,81124398 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
81124378:	d8000015 	stw	zero,0(sp)
8112437c:	e1fffd17 	ldw	r7,-12(fp)
81124380:	01a044b4 	movhi	r6,33042
81124384:	318a2004 	addi	r6,r6,10368
81124388:	e17fff17 	ldw	r5,-4(fp)
8112438c:	e13ffe17 	ldw	r4,-8(fp)
81124390:	1124a080 	call	81124a08 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
81124394:	00000406 	br	811243a8 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
81124398:	012044b4 	movhi	r4,33042
8112439c:	211bce04 	addi	r4,r4,28472
811243a0:	1124de80 	call	81124de8 <alt_printf>
    }
    
    return;
811243a4:	0001883a 	nop

}
811243a8:	e037883a 	mov	sp,fp
811243ac:	dfc00117 	ldw	ra,4(sp)
811243b0:	df000017 	ldw	fp,0(sp)
811243b4:	dec00204 	addi	sp,sp,8
811243b8:	f800283a 	ret

811243bc <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
811243bc:	defffb04 	addi	sp,sp,-20
811243c0:	df000415 	stw	fp,16(sp)
811243c4:	df000404 	addi	fp,sp,16
811243c8:	e13ffc15 	stw	r4,-16(fp)
811243cc:	e17ffd15 	stw	r5,-12(fp)
811243d0:	e1bffe15 	stw	r6,-8(fp)
811243d4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
811243d8:	e0bffc17 	ldw	r2,-16(fp)
811243dc:	e0fffd17 	ldw	r3,-12(fp)
811243e0:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
811243e4:	e0bffc17 	ldw	r2,-16(fp)
811243e8:	e0ffff17 	ldw	r3,-4(fp)
811243ec:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
811243f0:	e0bffc17 	ldw	r2,-16(fp)
811243f4:	e0fffe17 	ldw	r3,-8(fp)
811243f8:	10c00d15 	stw	r3,52(r2)

    return ;
811243fc:	0001883a 	nop
}
81124400:	e037883a 	mov	sp,fp
81124404:	df000017 	ldw	fp,0(sp)
81124408:	dec00104 	addi	sp,sp,4
8112440c:	f800283a 	ret

81124410 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81124410:	defffc04 	addi	sp,sp,-16
81124414:	dfc00315 	stw	ra,12(sp)
81124418:	df000215 	stw	fp,8(sp)
8112441c:	df000204 	addi	fp,sp,8
81124420:	e13ffe15 	stw	r4,-8(fp)
81124424:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
81124428:	000d883a 	mov	r6,zero
8112442c:	e17fff17 	ldw	r5,-4(fp)
81124430:	e13ffe17 	ldw	r4,-8(fp)
81124434:	1122be40 	call	81122be4 <alt_msgdma_descriptor_async_transfer>

}
81124438:	e037883a 	mov	sp,fp
8112443c:	dfc00117 	ldw	ra,4(sp)
81124440:	df000017 	ldw	fp,0(sp)
81124444:	dec00204 	addi	sp,sp,8
81124448:	f800283a 	ret

8112444c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8112444c:	defffc04 	addi	sp,sp,-16
81124450:	dfc00315 	stw	ra,12(sp)
81124454:	df000215 	stw	fp,8(sp)
81124458:	df000204 	addi	fp,sp,8
8112445c:	e13ffe15 	stw	r4,-8(fp)
81124460:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
81124464:	e1bfff17 	ldw	r6,-4(fp)
81124468:	000b883a 	mov	r5,zero
8112446c:	e13ffe17 	ldw	r4,-8(fp)
81124470:	1122be40 	call	81122be4 <alt_msgdma_descriptor_async_transfer>
}
81124474:	e037883a 	mov	sp,fp
81124478:	dfc00117 	ldw	ra,4(sp)
8112447c:	df000017 	ldw	fp,0(sp)
81124480:	dec00204 	addi	sp,sp,8
81124484:	f800283a 	ret

81124488 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81124488:	defffc04 	addi	sp,sp,-16
8112448c:	dfc00315 	stw	ra,12(sp)
81124490:	df000215 	stw	fp,8(sp)
81124494:	df000204 	addi	fp,sp,8
81124498:	e13ffe15 	stw	r4,-8(fp)
8112449c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
811244a0:	000d883a 	mov	r6,zero
811244a4:	e17fff17 	ldw	r5,-4(fp)
811244a8:	e13ffe17 	ldw	r4,-8(fp)
811244ac:	1122eb40 	call	81122eb4 <alt_msgdma_descriptor_sync_transfer>
}
811244b0:	e037883a 	mov	sp,fp
811244b4:	dfc00117 	ldw	ra,4(sp)
811244b8:	df000017 	ldw	fp,0(sp)
811244bc:	dec00204 	addi	sp,sp,8
811244c0:	f800283a 	ret

811244c4 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
811244c4:	defffc04 	addi	sp,sp,-16
811244c8:	dfc00315 	stw	ra,12(sp)
811244cc:	df000215 	stw	fp,8(sp)
811244d0:	df000204 	addi	fp,sp,8
811244d4:	e13ffe15 	stw	r4,-8(fp)
811244d8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
811244dc:	e1bfff17 	ldw	r6,-4(fp)
811244e0:	000b883a 	mov	r5,zero
811244e4:	e13ffe17 	ldw	r4,-8(fp)
811244e8:	1122eb40 	call	81122eb4 <alt_msgdma_descriptor_sync_transfer>
}
811244ec:	e037883a 	mov	sp,fp
811244f0:	dfc00117 	ldw	ra,4(sp)
811244f4:	df000017 	ldw	fp,0(sp)
811244f8:	dec00204 	addi	sp,sp,8
811244fc:	f800283a 	ret

81124500 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
81124500:	defff504 	addi	sp,sp,-44
81124504:	df000a15 	stw	fp,40(sp)
81124508:	df000a04 	addi	fp,sp,40
8112450c:	e13ffc15 	stw	r4,-16(fp)
81124510:	e17ffd15 	stw	r5,-12(fp)
81124514:	e1bffe15 	stw	r6,-8(fp)
81124518:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8112451c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81124520:	d0a03d17 	ldw	r2,-32524(gp)
  
  if (alt_ticks_per_second ())
81124524:	10003c26 	beq	r2,zero,81124618 <alt_alarm_start+0x118>
  {
    if (alarm)
81124528:	e0bffc17 	ldw	r2,-16(fp)
8112452c:	10003826 	beq	r2,zero,81124610 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
81124530:	e0bffc17 	ldw	r2,-16(fp)
81124534:	e0fffe17 	ldw	r3,-8(fp)
81124538:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8112453c:	e0bffc17 	ldw	r2,-16(fp)
81124540:	e0ffff17 	ldw	r3,-4(fp)
81124544:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124548:	0005303a 	rdctl	r2,status
8112454c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124550:	e0fff917 	ldw	r3,-28(fp)
81124554:	00bfff84 	movi	r2,-2
81124558:	1884703a 	and	r2,r3,r2
8112455c:	1001703a 	wrctl	status,r2
  
  return context;
81124560:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
81124564:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81124568:	d0a03e17 	ldw	r2,-32520(gp)
      
      current_nticks = alt_nticks();
8112456c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
81124570:	e0fffd17 	ldw	r3,-12(fp)
81124574:	e0bff617 	ldw	r2,-40(fp)
81124578:	1885883a 	add	r2,r3,r2
8112457c:	10c00044 	addi	r3,r2,1
81124580:	e0bffc17 	ldw	r2,-16(fp)
81124584:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
81124588:	e0bffc17 	ldw	r2,-16(fp)
8112458c:	10c00217 	ldw	r3,8(r2)
81124590:	e0bff617 	ldw	r2,-40(fp)
81124594:	1880042e 	bgeu	r3,r2,811245a8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
81124598:	e0bffc17 	ldw	r2,-16(fp)
8112459c:	00c00044 	movi	r3,1
811245a0:	10c00405 	stb	r3,16(r2)
811245a4:	00000206 	br	811245b0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
811245a8:	e0bffc17 	ldw	r2,-16(fp)
811245ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
811245b0:	e0bffc17 	ldw	r2,-16(fp)
811245b4:	d0e01004 	addi	r3,gp,-32704
811245b8:	e0fffa15 	stw	r3,-24(fp)
811245bc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
811245c0:	e0bffb17 	ldw	r2,-20(fp)
811245c4:	e0fffa17 	ldw	r3,-24(fp)
811245c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
811245cc:	e0bffa17 	ldw	r2,-24(fp)
811245d0:	10c00017 	ldw	r3,0(r2)
811245d4:	e0bffb17 	ldw	r2,-20(fp)
811245d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
811245dc:	e0bffa17 	ldw	r2,-24(fp)
811245e0:	10800017 	ldw	r2,0(r2)
811245e4:	e0fffb17 	ldw	r3,-20(fp)
811245e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
811245ec:	e0bffa17 	ldw	r2,-24(fp)
811245f0:	e0fffb17 	ldw	r3,-20(fp)
811245f4:	10c00015 	stw	r3,0(r2)
811245f8:	e0bff817 	ldw	r2,-32(fp)
811245fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124600:	e0bff717 	ldw	r2,-36(fp)
81124604:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
81124608:	0005883a 	mov	r2,zero
8112460c:	00000306 	br	8112461c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
81124610:	00bffa84 	movi	r2,-22
81124614:	00000106 	br	8112461c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
81124618:	00bfde84 	movi	r2,-134
  }
}
8112461c:	e037883a 	mov	sp,fp
81124620:	df000017 	ldw	fp,0(sp)
81124624:	dec00104 	addi	sp,sp,4
81124628:	f800283a 	ret

8112462c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112462c:	defffe04 	addi	sp,sp,-8
81124630:	dfc00115 	stw	ra,4(sp)
81124634:	df000015 	stw	fp,0(sp)
81124638:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112463c:	d0a00d17 	ldw	r2,-32716(gp)
81124640:	10000326 	beq	r2,zero,81124650 <alt_get_errno+0x24>
81124644:	d0a00d17 	ldw	r2,-32716(gp)
81124648:	103ee83a 	callr	r2
8112464c:	00000106 	br	81124654 <alt_get_errno+0x28>
81124650:	d0a03204 	addi	r2,gp,-32568
}
81124654:	e037883a 	mov	sp,fp
81124658:	dfc00117 	ldw	ra,4(sp)
8112465c:	df000017 	ldw	fp,0(sp)
81124660:	dec00204 	addi	sp,sp,8
81124664:	f800283a 	ret

81124668 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
81124668:	defffa04 	addi	sp,sp,-24
8112466c:	dfc00515 	stw	ra,20(sp)
81124670:	df000415 	stw	fp,16(sp)
81124674:	df000404 	addi	fp,sp,16
81124678:	e13ffe15 	stw	r4,-8(fp)
8112467c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
81124680:	e0bffe17 	ldw	r2,-8(fp)
81124684:	10000326 	beq	r2,zero,81124694 <alt_dev_llist_insert+0x2c>
81124688:	e0bffe17 	ldw	r2,-8(fp)
8112468c:	10800217 	ldw	r2,8(r2)
81124690:	1000061e 	bne	r2,zero,811246ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
81124694:	112462c0 	call	8112462c <alt_get_errno>
81124698:	1007883a 	mov	r3,r2
8112469c:	00800584 	movi	r2,22
811246a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
811246a4:	00bffa84 	movi	r2,-22
811246a8:	00001306 	br	811246f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
811246ac:	e0bffe17 	ldw	r2,-8(fp)
811246b0:	e0ffff17 	ldw	r3,-4(fp)
811246b4:	e0fffc15 	stw	r3,-16(fp)
811246b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
811246bc:	e0bffd17 	ldw	r2,-12(fp)
811246c0:	e0fffc17 	ldw	r3,-16(fp)
811246c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
811246c8:	e0bffc17 	ldw	r2,-16(fp)
811246cc:	10c00017 	ldw	r3,0(r2)
811246d0:	e0bffd17 	ldw	r2,-12(fp)
811246d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
811246d8:	e0bffc17 	ldw	r2,-16(fp)
811246dc:	10800017 	ldw	r2,0(r2)
811246e0:	e0fffd17 	ldw	r3,-12(fp)
811246e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
811246e8:	e0bffc17 	ldw	r2,-16(fp)
811246ec:	e0fffd17 	ldw	r3,-12(fp)
811246f0:	10c00015 	stw	r3,0(r2)

  return 0;  
811246f4:	0005883a 	mov	r2,zero
}
811246f8:	e037883a 	mov	sp,fp
811246fc:	dfc00117 	ldw	ra,4(sp)
81124700:	df000017 	ldw	fp,0(sp)
81124704:	dec00204 	addi	sp,sp,8
81124708:	f800283a 	ret

8112470c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8112470c:	defffd04 	addi	sp,sp,-12
81124710:	dfc00215 	stw	ra,8(sp)
81124714:	df000115 	stw	fp,4(sp)
81124718:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8112471c:	00a044b4 	movhi	r2,33042
81124720:	10958204 	addi	r2,r2,22024
81124724:	e0bfff15 	stw	r2,-4(fp)
81124728:	00000606 	br	81124744 <_do_ctors+0x38>
        (*ctor) (); 
8112472c:	e0bfff17 	ldw	r2,-4(fp)
81124730:	10800017 	ldw	r2,0(r2)
81124734:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81124738:	e0bfff17 	ldw	r2,-4(fp)
8112473c:	10bfff04 	addi	r2,r2,-4
81124740:	e0bfff15 	stw	r2,-4(fp)
81124744:	e0ffff17 	ldw	r3,-4(fp)
81124748:	00a044b4 	movhi	r2,33042
8112474c:	10958304 	addi	r2,r2,22028
81124750:	18bff62e 	bgeu	r3,r2,8112472c <__reset+0xfb10472c>
        (*ctor) (); 
}
81124754:	0001883a 	nop
81124758:	e037883a 	mov	sp,fp
8112475c:	dfc00117 	ldw	ra,4(sp)
81124760:	df000017 	ldw	fp,0(sp)
81124764:	dec00204 	addi	sp,sp,8
81124768:	f800283a 	ret

8112476c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8112476c:	defffd04 	addi	sp,sp,-12
81124770:	dfc00215 	stw	ra,8(sp)
81124774:	df000115 	stw	fp,4(sp)
81124778:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8112477c:	00a044b4 	movhi	r2,33042
81124780:	10958204 	addi	r2,r2,22024
81124784:	e0bfff15 	stw	r2,-4(fp)
81124788:	00000606 	br	811247a4 <_do_dtors+0x38>
        (*dtor) (); 
8112478c:	e0bfff17 	ldw	r2,-4(fp)
81124790:	10800017 	ldw	r2,0(r2)
81124794:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81124798:	e0bfff17 	ldw	r2,-4(fp)
8112479c:	10bfff04 	addi	r2,r2,-4
811247a0:	e0bfff15 	stw	r2,-4(fp)
811247a4:	e0ffff17 	ldw	r3,-4(fp)
811247a8:	00a044b4 	movhi	r2,33042
811247ac:	10958304 	addi	r2,r2,22028
811247b0:	18bff62e 	bgeu	r3,r2,8112478c <__reset+0xfb10478c>
        (*dtor) (); 
}
811247b4:	0001883a 	nop
811247b8:	e037883a 	mov	sp,fp
811247bc:	dfc00117 	ldw	ra,4(sp)
811247c0:	df000017 	ldw	fp,0(sp)
811247c4:	dec00204 	addi	sp,sp,8
811247c8:	f800283a 	ret

811247cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
811247cc:	defffa04 	addi	sp,sp,-24
811247d0:	dfc00515 	stw	ra,20(sp)
811247d4:	df000415 	stw	fp,16(sp)
811247d8:	df000404 	addi	fp,sp,16
811247dc:	e13ffe15 	stw	r4,-8(fp)
811247e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
811247e4:	e0bfff17 	ldw	r2,-4(fp)
811247e8:	10800017 	ldw	r2,0(r2)
811247ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
811247f0:	e13ffe17 	ldw	r4,-8(fp)
811247f4:	111a4680 	call	8111a468 <strlen>
811247f8:	10800044 	addi	r2,r2,1
811247fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81124800:	00000d06 	br	81124838 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
81124804:	e0bffc17 	ldw	r2,-16(fp)
81124808:	10800217 	ldw	r2,8(r2)
8112480c:	e0fffd17 	ldw	r3,-12(fp)
81124810:	180d883a 	mov	r6,r3
81124814:	e17ffe17 	ldw	r5,-8(fp)
81124818:	1009883a 	mov	r4,r2
8112481c:	112515c0 	call	8112515c <memcmp>
81124820:	1000021e 	bne	r2,zero,8112482c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
81124824:	e0bffc17 	ldw	r2,-16(fp)
81124828:	00000706 	br	81124848 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
8112482c:	e0bffc17 	ldw	r2,-16(fp)
81124830:	10800017 	ldw	r2,0(r2)
81124834:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81124838:	e0fffc17 	ldw	r3,-16(fp)
8112483c:	e0bfff17 	ldw	r2,-4(fp)
81124840:	18bff01e 	bne	r3,r2,81124804 <__reset+0xfb104804>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
81124844:	0005883a 	mov	r2,zero
}
81124848:	e037883a 	mov	sp,fp
8112484c:	dfc00117 	ldw	ra,4(sp)
81124850:	df000017 	ldw	fp,0(sp)
81124854:	dec00204 	addi	sp,sp,8
81124858:	f800283a 	ret

8112485c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8112485c:	defffb04 	addi	sp,sp,-20
81124860:	dfc00415 	stw	ra,16(sp)
81124864:	df000315 	stw	fp,12(sp)
81124868:	df000304 	addi	fp,sp,12
8112486c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
81124870:	d0a00817 	ldw	r2,-32736(gp)
81124874:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81124878:	00003106 	br	81124940 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
8112487c:	e0bffd17 	ldw	r2,-12(fp)
81124880:	10800217 	ldw	r2,8(r2)
81124884:	1009883a 	mov	r4,r2
81124888:	111a4680 	call	8111a468 <strlen>
8112488c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
81124890:	e0bffd17 	ldw	r2,-12(fp)
81124894:	10c00217 	ldw	r3,8(r2)
81124898:	e0bffe17 	ldw	r2,-8(fp)
8112489c:	10bfffc4 	addi	r2,r2,-1
811248a0:	1885883a 	add	r2,r3,r2
811248a4:	10800003 	ldbu	r2,0(r2)
811248a8:	10803fcc 	andi	r2,r2,255
811248ac:	1080201c 	xori	r2,r2,128
811248b0:	10bfe004 	addi	r2,r2,-128
811248b4:	10800bd8 	cmpnei	r2,r2,47
811248b8:	1000031e 	bne	r2,zero,811248c8 <alt_find_file+0x6c>
    {
      len -= 1;
811248bc:	e0bffe17 	ldw	r2,-8(fp)
811248c0:	10bfffc4 	addi	r2,r2,-1
811248c4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
811248c8:	e0bffe17 	ldw	r2,-8(fp)
811248cc:	e0ffff17 	ldw	r3,-4(fp)
811248d0:	1885883a 	add	r2,r3,r2
811248d4:	10800003 	ldbu	r2,0(r2)
811248d8:	10803fcc 	andi	r2,r2,255
811248dc:	1080201c 	xori	r2,r2,128
811248e0:	10bfe004 	addi	r2,r2,-128
811248e4:	10800be0 	cmpeqi	r2,r2,47
811248e8:	1000081e 	bne	r2,zero,8112490c <alt_find_file+0xb0>
811248ec:	e0bffe17 	ldw	r2,-8(fp)
811248f0:	e0ffff17 	ldw	r3,-4(fp)
811248f4:	1885883a 	add	r2,r3,r2
811248f8:	10800003 	ldbu	r2,0(r2)
811248fc:	10803fcc 	andi	r2,r2,255
81124900:	1080201c 	xori	r2,r2,128
81124904:	10bfe004 	addi	r2,r2,-128
81124908:	10000a1e 	bne	r2,zero,81124934 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
8112490c:	e0bffd17 	ldw	r2,-12(fp)
81124910:	10800217 	ldw	r2,8(r2)
81124914:	e0fffe17 	ldw	r3,-8(fp)
81124918:	180d883a 	mov	r6,r3
8112491c:	e17fff17 	ldw	r5,-4(fp)
81124920:	1009883a 	mov	r4,r2
81124924:	112515c0 	call	8112515c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81124928:	1000021e 	bne	r2,zero,81124934 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8112492c:	e0bffd17 	ldw	r2,-12(fp)
81124930:	00000706 	br	81124950 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
81124934:	e0bffd17 	ldw	r2,-12(fp)
81124938:	10800017 	ldw	r2,0(r2)
8112493c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81124940:	e0fffd17 	ldw	r3,-12(fp)
81124944:	d0a00804 	addi	r2,gp,-32736
81124948:	18bfcc1e 	bne	r3,r2,8112487c <__reset+0xfb10487c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8112494c:	0005883a 	mov	r2,zero
}
81124950:	e037883a 	mov	sp,fp
81124954:	dfc00117 	ldw	ra,4(sp)
81124958:	df000017 	ldw	fp,0(sp)
8112495c:	dec00204 	addi	sp,sp,8
81124960:	f800283a 	ret

81124964 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
81124964:	defffc04 	addi	sp,sp,-16
81124968:	df000315 	stw	fp,12(sp)
8112496c:	df000304 	addi	fp,sp,12
81124970:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
81124974:	00bffa04 	movi	r2,-24
81124978:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8112497c:	e03ffd15 	stw	zero,-12(fp)
81124980:	00001906 	br	811249e8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
81124984:	00a044b4 	movhi	r2,33042
81124988:	109e0904 	addi	r2,r2,30756
8112498c:	e0fffd17 	ldw	r3,-12(fp)
81124990:	18c00324 	muli	r3,r3,12
81124994:	10c5883a 	add	r2,r2,r3
81124998:	10800017 	ldw	r2,0(r2)
8112499c:	10000f1e 	bne	r2,zero,811249dc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
811249a0:	00a044b4 	movhi	r2,33042
811249a4:	109e0904 	addi	r2,r2,30756
811249a8:	e0fffd17 	ldw	r3,-12(fp)
811249ac:	18c00324 	muli	r3,r3,12
811249b0:	10c5883a 	add	r2,r2,r3
811249b4:	e0ffff17 	ldw	r3,-4(fp)
811249b8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
811249bc:	d0e00c17 	ldw	r3,-32720(gp)
811249c0:	e0bffd17 	ldw	r2,-12(fp)
811249c4:	1880020e 	bge	r3,r2,811249d0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
811249c8:	e0bffd17 	ldw	r2,-12(fp)
811249cc:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
811249d0:	e0bffd17 	ldw	r2,-12(fp)
811249d4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
811249d8:	00000606 	br	811249f4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
811249dc:	e0bffd17 	ldw	r2,-12(fp)
811249e0:	10800044 	addi	r2,r2,1
811249e4:	e0bffd15 	stw	r2,-12(fp)
811249e8:	e0bffd17 	ldw	r2,-12(fp)
811249ec:	10800810 	cmplti	r2,r2,32
811249f0:	103fe41e 	bne	r2,zero,81124984 <__reset+0xfb104984>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
811249f4:	e0bffe17 	ldw	r2,-8(fp)
}
811249f8:	e037883a 	mov	sp,fp
811249fc:	df000017 	ldw	fp,0(sp)
81124a00:	dec00104 	addi	sp,sp,4
81124a04:	f800283a 	ret

81124a08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81124a08:	defff904 	addi	sp,sp,-28
81124a0c:	dfc00615 	stw	ra,24(sp)
81124a10:	df000515 	stw	fp,20(sp)
81124a14:	df000504 	addi	fp,sp,20
81124a18:	e13ffc15 	stw	r4,-16(fp)
81124a1c:	e17ffd15 	stw	r5,-12(fp)
81124a20:	e1bffe15 	stw	r6,-8(fp)
81124a24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
81124a28:	e0800217 	ldw	r2,8(fp)
81124a2c:	d8800015 	stw	r2,0(sp)
81124a30:	e1ffff17 	ldw	r7,-4(fp)
81124a34:	e1bffe17 	ldw	r6,-8(fp)
81124a38:	e17ffd17 	ldw	r5,-12(fp)
81124a3c:	e13ffc17 	ldw	r4,-16(fp)
81124a40:	1124bb80 	call	81124bb8 <alt_iic_isr_register>
}  
81124a44:	e037883a 	mov	sp,fp
81124a48:	dfc00117 	ldw	ra,4(sp)
81124a4c:	df000017 	ldw	fp,0(sp)
81124a50:	dec00204 	addi	sp,sp,8
81124a54:	f800283a 	ret

81124a58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
81124a58:	defff904 	addi	sp,sp,-28
81124a5c:	df000615 	stw	fp,24(sp)
81124a60:	df000604 	addi	fp,sp,24
81124a64:	e13ffe15 	stw	r4,-8(fp)
81124a68:	e17fff15 	stw	r5,-4(fp)
81124a6c:	e0bfff17 	ldw	r2,-4(fp)
81124a70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124a74:	0005303a 	rdctl	r2,status
81124a78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124a7c:	e0fffb17 	ldw	r3,-20(fp)
81124a80:	00bfff84 	movi	r2,-2
81124a84:	1884703a 	and	r2,r3,r2
81124a88:	1001703a 	wrctl	status,r2
  
  return context;
81124a8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81124a90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
81124a94:	00c00044 	movi	r3,1
81124a98:	e0bffa17 	ldw	r2,-24(fp)
81124a9c:	1884983a 	sll	r2,r3,r2
81124aa0:	1007883a 	mov	r3,r2
81124aa4:	d0a03917 	ldw	r2,-32540(gp)
81124aa8:	1884b03a 	or	r2,r3,r2
81124aac:	d0a03915 	stw	r2,-32540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81124ab0:	d0a03917 	ldw	r2,-32540(gp)
81124ab4:	100170fa 	wrctl	ienable,r2
81124ab8:	e0bffc17 	ldw	r2,-16(fp)
81124abc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124ac0:	e0bffd17 	ldw	r2,-12(fp)
81124ac4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81124ac8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
81124acc:	0001883a 	nop
}
81124ad0:	e037883a 	mov	sp,fp
81124ad4:	df000017 	ldw	fp,0(sp)
81124ad8:	dec00104 	addi	sp,sp,4
81124adc:	f800283a 	ret

81124ae0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
81124ae0:	defff904 	addi	sp,sp,-28
81124ae4:	df000615 	stw	fp,24(sp)
81124ae8:	df000604 	addi	fp,sp,24
81124aec:	e13ffe15 	stw	r4,-8(fp)
81124af0:	e17fff15 	stw	r5,-4(fp)
81124af4:	e0bfff17 	ldw	r2,-4(fp)
81124af8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124afc:	0005303a 	rdctl	r2,status
81124b00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124b04:	e0fffb17 	ldw	r3,-20(fp)
81124b08:	00bfff84 	movi	r2,-2
81124b0c:	1884703a 	and	r2,r3,r2
81124b10:	1001703a 	wrctl	status,r2
  
  return context;
81124b14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81124b18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
81124b1c:	00c00044 	movi	r3,1
81124b20:	e0bffa17 	ldw	r2,-24(fp)
81124b24:	1884983a 	sll	r2,r3,r2
81124b28:	0084303a 	nor	r2,zero,r2
81124b2c:	1007883a 	mov	r3,r2
81124b30:	d0a03917 	ldw	r2,-32540(gp)
81124b34:	1884703a 	and	r2,r3,r2
81124b38:	d0a03915 	stw	r2,-32540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81124b3c:	d0a03917 	ldw	r2,-32540(gp)
81124b40:	100170fa 	wrctl	ienable,r2
81124b44:	e0bffc17 	ldw	r2,-16(fp)
81124b48:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124b4c:	e0bffd17 	ldw	r2,-12(fp)
81124b50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81124b54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
81124b58:	0001883a 	nop
}
81124b5c:	e037883a 	mov	sp,fp
81124b60:	df000017 	ldw	fp,0(sp)
81124b64:	dec00104 	addi	sp,sp,4
81124b68:	f800283a 	ret

81124b6c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
81124b6c:	defffc04 	addi	sp,sp,-16
81124b70:	df000315 	stw	fp,12(sp)
81124b74:	df000304 	addi	fp,sp,12
81124b78:	e13ffe15 	stw	r4,-8(fp)
81124b7c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
81124b80:	000530fa 	rdctl	r2,ienable
81124b84:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
81124b88:	00c00044 	movi	r3,1
81124b8c:	e0bfff17 	ldw	r2,-4(fp)
81124b90:	1884983a 	sll	r2,r3,r2
81124b94:	1007883a 	mov	r3,r2
81124b98:	e0bffd17 	ldw	r2,-12(fp)
81124b9c:	1884703a 	and	r2,r3,r2
81124ba0:	1004c03a 	cmpne	r2,r2,zero
81124ba4:	10803fcc 	andi	r2,r2,255
}
81124ba8:	e037883a 	mov	sp,fp
81124bac:	df000017 	ldw	fp,0(sp)
81124bb0:	dec00104 	addi	sp,sp,4
81124bb4:	f800283a 	ret

81124bb8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81124bb8:	defff504 	addi	sp,sp,-44
81124bbc:	dfc00a15 	stw	ra,40(sp)
81124bc0:	df000915 	stw	fp,36(sp)
81124bc4:	df000904 	addi	fp,sp,36
81124bc8:	e13ffc15 	stw	r4,-16(fp)
81124bcc:	e17ffd15 	stw	r5,-12(fp)
81124bd0:	e1bffe15 	stw	r6,-8(fp)
81124bd4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
81124bd8:	00bffa84 	movi	r2,-22
81124bdc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
81124be0:	e0bffd17 	ldw	r2,-12(fp)
81124be4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81124be8:	e0bff817 	ldw	r2,-32(fp)
81124bec:	10800808 	cmpgei	r2,r2,32
81124bf0:	1000271e 	bne	r2,zero,81124c90 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124bf4:	0005303a 	rdctl	r2,status
81124bf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124bfc:	e0fffb17 	ldw	r3,-20(fp)
81124c00:	00bfff84 	movi	r2,-2
81124c04:	1884703a 	and	r2,r3,r2
81124c08:	1001703a 	wrctl	status,r2
  
  return context;
81124c0c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
81124c10:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
81124c14:	00a044f4 	movhi	r2,33043
81124c18:	10a79704 	addi	r2,r2,-24996
81124c1c:	e0fff817 	ldw	r3,-32(fp)
81124c20:	180690fa 	slli	r3,r3,3
81124c24:	10c5883a 	add	r2,r2,r3
81124c28:	e0fffe17 	ldw	r3,-8(fp)
81124c2c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
81124c30:	00a044f4 	movhi	r2,33043
81124c34:	10a79704 	addi	r2,r2,-24996
81124c38:	e0fff817 	ldw	r3,-32(fp)
81124c3c:	180690fa 	slli	r3,r3,3
81124c40:	10c5883a 	add	r2,r2,r3
81124c44:	10800104 	addi	r2,r2,4
81124c48:	e0ffff17 	ldw	r3,-4(fp)
81124c4c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
81124c50:	e0bffe17 	ldw	r2,-8(fp)
81124c54:	10000526 	beq	r2,zero,81124c6c <alt_iic_isr_register+0xb4>
81124c58:	e0bff817 	ldw	r2,-32(fp)
81124c5c:	100b883a 	mov	r5,r2
81124c60:	e13ffc17 	ldw	r4,-16(fp)
81124c64:	1124a580 	call	81124a58 <alt_ic_irq_enable>
81124c68:	00000406 	br	81124c7c <alt_iic_isr_register+0xc4>
81124c6c:	e0bff817 	ldw	r2,-32(fp)
81124c70:	100b883a 	mov	r5,r2
81124c74:	e13ffc17 	ldw	r4,-16(fp)
81124c78:	1124ae00 	call	81124ae0 <alt_ic_irq_disable>
81124c7c:	e0bff715 	stw	r2,-36(fp)
81124c80:	e0bffa17 	ldw	r2,-24(fp)
81124c84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124c88:	e0bff917 	ldw	r2,-28(fp)
81124c8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
81124c90:	e0bff717 	ldw	r2,-36(fp)
}
81124c94:	e037883a 	mov	sp,fp
81124c98:	dfc00117 	ldw	ra,4(sp)
81124c9c:	df000017 	ldw	fp,0(sp)
81124ca0:	dec00204 	addi	sp,sp,8
81124ca4:	f800283a 	ret

81124ca8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
81124ca8:	defff904 	addi	sp,sp,-28
81124cac:	dfc00615 	stw	ra,24(sp)
81124cb0:	df000515 	stw	fp,20(sp)
81124cb4:	df000504 	addi	fp,sp,20
81124cb8:	e13ffc15 	stw	r4,-16(fp)
81124cbc:	e17ffd15 	stw	r5,-12(fp)
81124cc0:	e1bffe15 	stw	r6,-8(fp)
81124cc4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
81124cc8:	e1bfff17 	ldw	r6,-4(fp)
81124ccc:	e17ffe17 	ldw	r5,-8(fp)
81124cd0:	e13ffd17 	ldw	r4,-12(fp)
81124cd4:	1120a540 	call	81120a54 <open>
81124cd8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
81124cdc:	e0bffb17 	ldw	r2,-20(fp)
81124ce0:	10001c16 	blt	r2,zero,81124d54 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
81124ce4:	00a044b4 	movhi	r2,33042
81124ce8:	109e0904 	addi	r2,r2,30756
81124cec:	e0fffb17 	ldw	r3,-20(fp)
81124cf0:	18c00324 	muli	r3,r3,12
81124cf4:	10c5883a 	add	r2,r2,r3
81124cf8:	10c00017 	ldw	r3,0(r2)
81124cfc:	e0bffc17 	ldw	r2,-16(fp)
81124d00:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
81124d04:	00a044b4 	movhi	r2,33042
81124d08:	109e0904 	addi	r2,r2,30756
81124d0c:	e0fffb17 	ldw	r3,-20(fp)
81124d10:	18c00324 	muli	r3,r3,12
81124d14:	10c5883a 	add	r2,r2,r3
81124d18:	10800104 	addi	r2,r2,4
81124d1c:	10c00017 	ldw	r3,0(r2)
81124d20:	e0bffc17 	ldw	r2,-16(fp)
81124d24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
81124d28:	00a044b4 	movhi	r2,33042
81124d2c:	109e0904 	addi	r2,r2,30756
81124d30:	e0fffb17 	ldw	r3,-20(fp)
81124d34:	18c00324 	muli	r3,r3,12
81124d38:	10c5883a 	add	r2,r2,r3
81124d3c:	10800204 	addi	r2,r2,8
81124d40:	10c00017 	ldw	r3,0(r2)
81124d44:	e0bffc17 	ldw	r2,-16(fp)
81124d48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
81124d4c:	e13ffb17 	ldw	r4,-20(fp)
81124d50:	1120ce00 	call	81120ce0 <alt_release_fd>
  }
} 
81124d54:	0001883a 	nop
81124d58:	e037883a 	mov	sp,fp
81124d5c:	dfc00117 	ldw	ra,4(sp)
81124d60:	df000017 	ldw	fp,0(sp)
81124d64:	dec00204 	addi	sp,sp,8
81124d68:	f800283a 	ret

81124d6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
81124d6c:	defffb04 	addi	sp,sp,-20
81124d70:	dfc00415 	stw	ra,16(sp)
81124d74:	df000315 	stw	fp,12(sp)
81124d78:	df000304 	addi	fp,sp,12
81124d7c:	e13ffd15 	stw	r4,-12(fp)
81124d80:	e17ffe15 	stw	r5,-8(fp)
81124d84:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
81124d88:	01c07fc4 	movi	r7,511
81124d8c:	01800044 	movi	r6,1
81124d90:	e17ffd17 	ldw	r5,-12(fp)
81124d94:	012044b4 	movhi	r4,33042
81124d98:	211e0c04 	addi	r4,r4,30768
81124d9c:	1124ca80 	call	81124ca8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
81124da0:	01c07fc4 	movi	r7,511
81124da4:	000d883a 	mov	r6,zero
81124da8:	e17ffe17 	ldw	r5,-8(fp)
81124dac:	012044b4 	movhi	r4,33042
81124db0:	211e0904 	addi	r4,r4,30756
81124db4:	1124ca80 	call	81124ca8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
81124db8:	01c07fc4 	movi	r7,511
81124dbc:	01800044 	movi	r6,1
81124dc0:	e17fff17 	ldw	r5,-4(fp)
81124dc4:	012044b4 	movhi	r4,33042
81124dc8:	211e0f04 	addi	r4,r4,30780
81124dcc:	1124ca80 	call	81124ca8 <alt_open_fd>
}  
81124dd0:	0001883a 	nop
81124dd4:	e037883a 	mov	sp,fp
81124dd8:	dfc00117 	ldw	ra,4(sp)
81124ddc:	df000017 	ldw	fp,0(sp)
81124de0:	dec00204 	addi	sp,sp,8
81124de4:	f800283a 	ret

81124de8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
81124de8:	defff204 	addi	sp,sp,-56
81124dec:	dfc00a15 	stw	ra,40(sp)
81124df0:	df000915 	stw	fp,36(sp)
81124df4:	df000904 	addi	fp,sp,36
81124df8:	e13fff15 	stw	r4,-4(fp)
81124dfc:	e1400215 	stw	r5,8(fp)
81124e00:	e1800315 	stw	r6,12(fp)
81124e04:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
81124e08:	e0800204 	addi	r2,fp,8
81124e0c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
81124e10:	e0bfff17 	ldw	r2,-4(fp)
81124e14:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
81124e18:	00006f06 	br	81124fd8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
81124e1c:	e0bff807 	ldb	r2,-32(fp)
81124e20:	10800960 	cmpeqi	r2,r2,37
81124e24:	1000041e 	bne	r2,zero,81124e38 <alt_printf+0x50>
        {
            alt_putchar(c);
81124e28:	e0bff807 	ldb	r2,-32(fp)
81124e2c:	1009883a 	mov	r4,r2
81124e30:	11250140 	call	81125014 <alt_putchar>
81124e34:	00006806 	br	81124fd8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
81124e38:	e0bff717 	ldw	r2,-36(fp)
81124e3c:	10c00044 	addi	r3,r2,1
81124e40:	e0fff715 	stw	r3,-36(fp)
81124e44:	10800003 	ldbu	r2,0(r2)
81124e48:	e0bff805 	stb	r2,-32(fp)
81124e4c:	e0bff807 	ldb	r2,-32(fp)
81124e50:	10006926 	beq	r2,zero,81124ff8 <alt_printf+0x210>
            {
                if (c == '%')
81124e54:	e0bff807 	ldb	r2,-32(fp)
81124e58:	10800958 	cmpnei	r2,r2,37
81124e5c:	1000041e 	bne	r2,zero,81124e70 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
81124e60:	e0bff807 	ldb	r2,-32(fp)
81124e64:	1009883a 	mov	r4,r2
81124e68:	11250140 	call	81125014 <alt_putchar>
81124e6c:	00005a06 	br	81124fd8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
81124e70:	e0bff807 	ldb	r2,-32(fp)
81124e74:	108018d8 	cmpnei	r2,r2,99
81124e78:	1000081e 	bne	r2,zero,81124e9c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
81124e7c:	e0bffe17 	ldw	r2,-8(fp)
81124e80:	10c00104 	addi	r3,r2,4
81124e84:	e0fffe15 	stw	r3,-8(fp)
81124e88:	10800017 	ldw	r2,0(r2)
81124e8c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
81124e90:	e13ffd17 	ldw	r4,-12(fp)
81124e94:	11250140 	call	81125014 <alt_putchar>
81124e98:	00004f06 	br	81124fd8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
81124e9c:	e0bff807 	ldb	r2,-32(fp)
81124ea0:	10801e18 	cmpnei	r2,r2,120
81124ea4:	1000341e 	bne	r2,zero,81124f78 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
81124ea8:	e0bffe17 	ldw	r2,-8(fp)
81124eac:	10c00104 	addi	r3,r2,4
81124eb0:	e0fffe15 	stw	r3,-8(fp)
81124eb4:	10800017 	ldw	r2,0(r2)
81124eb8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81124ebc:	e0bffb17 	ldw	r2,-20(fp)
81124ec0:	1000031e 	bne	r2,zero,81124ed0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
81124ec4:	01000c04 	movi	r4,48
81124ec8:	11250140 	call	81125014 <alt_putchar>
                        continue;
81124ecc:	00004206 	br	81124fd8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81124ed0:	00800704 	movi	r2,28
81124ed4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81124ed8:	00000306 	br	81124ee8 <alt_printf+0x100>
                        digit_shift -= 4;
81124edc:	e0bff917 	ldw	r2,-28(fp)
81124ee0:	10bfff04 	addi	r2,r2,-4
81124ee4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81124ee8:	00c003c4 	movi	r3,15
81124eec:	e0bff917 	ldw	r2,-28(fp)
81124ef0:	1884983a 	sll	r2,r3,r2
81124ef4:	1007883a 	mov	r3,r2
81124ef8:	e0bffb17 	ldw	r2,-20(fp)
81124efc:	1884703a 	and	r2,r3,r2
81124f00:	103ff626 	beq	r2,zero,81124edc <__reset+0xfb104edc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81124f04:	00001906 	br	81124f6c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81124f08:	00c003c4 	movi	r3,15
81124f0c:	e0bff917 	ldw	r2,-28(fp)
81124f10:	1884983a 	sll	r2,r3,r2
81124f14:	1007883a 	mov	r3,r2
81124f18:	e0bffb17 	ldw	r2,-20(fp)
81124f1c:	1886703a 	and	r3,r3,r2
81124f20:	e0bff917 	ldw	r2,-28(fp)
81124f24:	1884d83a 	srl	r2,r3,r2
81124f28:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
81124f2c:	e0bffc17 	ldw	r2,-16(fp)
81124f30:	108002a8 	cmpgeui	r2,r2,10
81124f34:	1000041e 	bne	r2,zero,81124f48 <alt_printf+0x160>
                            c = '0' + digit;
81124f38:	e0bffc17 	ldw	r2,-16(fp)
81124f3c:	10800c04 	addi	r2,r2,48
81124f40:	e0bff805 	stb	r2,-32(fp)
81124f44:	00000306 	br	81124f54 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
81124f48:	e0bffc17 	ldw	r2,-16(fp)
81124f4c:	108015c4 	addi	r2,r2,87
81124f50:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
81124f54:	e0bff807 	ldb	r2,-32(fp)
81124f58:	1009883a 	mov	r4,r2
81124f5c:	11250140 	call	81125014 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81124f60:	e0bff917 	ldw	r2,-28(fp)
81124f64:	10bfff04 	addi	r2,r2,-4
81124f68:	e0bff915 	stw	r2,-28(fp)
81124f6c:	e0bff917 	ldw	r2,-28(fp)
81124f70:	103fe50e 	bge	r2,zero,81124f08 <__reset+0xfb104f08>
81124f74:	00001806 	br	81124fd8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
81124f78:	e0bff807 	ldb	r2,-32(fp)
81124f7c:	10801cd8 	cmpnei	r2,r2,115
81124f80:	1000151e 	bne	r2,zero,81124fd8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
81124f84:	e0bffe17 	ldw	r2,-8(fp)
81124f88:	10c00104 	addi	r3,r2,4
81124f8c:	e0fffe15 	stw	r3,-8(fp)
81124f90:	10800017 	ldw	r2,0(r2)
81124f94:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
81124f98:	00000906 	br	81124fc0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
81124f9c:	e0bffa17 	ldw	r2,-24(fp)
81124fa0:	10c00044 	addi	r3,r2,1
81124fa4:	e0fffa15 	stw	r3,-24(fp)
81124fa8:	10800003 	ldbu	r2,0(r2)
81124fac:	10803fcc 	andi	r2,r2,255
81124fb0:	1080201c 	xori	r2,r2,128
81124fb4:	10bfe004 	addi	r2,r2,-128
81124fb8:	1009883a 	mov	r4,r2
81124fbc:	11250140 	call	81125014 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81124fc0:	e0bffa17 	ldw	r2,-24(fp)
81124fc4:	10800003 	ldbu	r2,0(r2)
81124fc8:	10803fcc 	andi	r2,r2,255
81124fcc:	1080201c 	xori	r2,r2,128
81124fd0:	10bfe004 	addi	r2,r2,-128
81124fd4:	103ff11e 	bne	r2,zero,81124f9c <__reset+0xfb104f9c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81124fd8:	e0bff717 	ldw	r2,-36(fp)
81124fdc:	10c00044 	addi	r3,r2,1
81124fe0:	e0fff715 	stw	r3,-36(fp)
81124fe4:	10800003 	ldbu	r2,0(r2)
81124fe8:	e0bff805 	stb	r2,-32(fp)
81124fec:	e0bff807 	ldb	r2,-32(fp)
81124ff0:	103f8a1e 	bne	r2,zero,81124e1c <__reset+0xfb104e1c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81124ff4:	00000106 	br	81124ffc <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81124ff8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81124ffc:	0001883a 	nop
81125000:	e037883a 	mov	sp,fp
81125004:	dfc00117 	ldw	ra,4(sp)
81125008:	df000017 	ldw	fp,0(sp)
8112500c:	dec00504 	addi	sp,sp,20
81125010:	f800283a 	ret

81125014 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
81125014:	defffd04 	addi	sp,sp,-12
81125018:	dfc00215 	stw	ra,8(sp)
8112501c:	df000115 	stw	fp,4(sp)
81125020:	df000104 	addi	fp,sp,4
81125024:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
81125028:	d0a00317 	ldw	r2,-32756(gp)
8112502c:	10800217 	ldw	r2,8(r2)
81125030:	100b883a 	mov	r5,r2
81125034:	e13fff17 	ldw	r4,-4(fp)
81125038:	11252780 	call	81125278 <putc>
#endif
#endif
}
8112503c:	e037883a 	mov	sp,fp
81125040:	dfc00117 	ldw	ra,4(sp)
81125044:	df000017 	ldw	fp,0(sp)
81125048:	dec00204 	addi	sp,sp,8
8112504c:	f800283a 	ret

81125050 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
81125050:	deffff04 	addi	sp,sp,-4
81125054:	df000015 	stw	fp,0(sp)
81125058:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8112505c:	000170fa 	wrctl	ienable,zero
}
81125060:	0001883a 	nop
81125064:	e037883a 	mov	sp,fp
81125068:	df000017 	ldw	fp,0(sp)
8112506c:	dec00104 	addi	sp,sp,4
81125070:	f800283a 	ret

81125074 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
81125074:	defffe04 	addi	sp,sp,-8
81125078:	df000115 	stw	fp,4(sp)
8112507c:	df000104 	addi	fp,sp,4
81125080:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
81125084:	e0bfff17 	ldw	r2,-4(fp)
81125088:	10bffe84 	addi	r2,r2,-6
8112508c:	10c00428 	cmpgeui	r3,r2,16
81125090:	18001a1e 	bne	r3,zero,811250fc <alt_exception_cause_generated_bad_addr+0x88>
81125094:	100690ba 	slli	r3,r2,2
81125098:	00a044b4 	movhi	r2,33042
8112509c:	10942b04 	addi	r2,r2,20652
811250a0:	1885883a 	add	r2,r3,r2
811250a4:	10800017 	ldw	r2,0(r2)
811250a8:	1000683a 	jmp	r2
811250ac:	811250ec 	andhi	r4,r16,18755
811250b0:	811250ec 	andhi	r4,r16,18755
811250b4:	811250fc 	xorhi	r4,r16,18755
811250b8:	811250fc 	xorhi	r4,r16,18755
811250bc:	811250fc 	xorhi	r4,r16,18755
811250c0:	811250ec 	andhi	r4,r16,18755
811250c4:	811250f4 	orhi	r4,r16,18755
811250c8:	811250fc 	xorhi	r4,r16,18755
811250cc:	811250ec 	andhi	r4,r16,18755
811250d0:	811250ec 	andhi	r4,r16,18755
811250d4:	811250fc 	xorhi	r4,r16,18755
811250d8:	811250ec 	andhi	r4,r16,18755
811250dc:	811250f4 	orhi	r4,r16,18755
811250e0:	811250fc 	xorhi	r4,r16,18755
811250e4:	811250fc 	xorhi	r4,r16,18755
811250e8:	811250ec 	andhi	r4,r16,18755
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
811250ec:	00800044 	movi	r2,1
811250f0:	00000306 	br	81125100 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
811250f4:	0005883a 	mov	r2,zero
811250f8:	00000106 	br	81125100 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
811250fc:	0005883a 	mov	r2,zero
  }
}
81125100:	e037883a 	mov	sp,fp
81125104:	df000017 	ldw	fp,0(sp)
81125108:	dec00104 	addi	sp,sp,4
8112510c:	f800283a 	ret

81125110 <atexit>:
81125110:	200b883a 	mov	r5,r4
81125114:	000f883a 	mov	r7,zero
81125118:	000d883a 	mov	r6,zero
8112511c:	0009883a 	mov	r4,zero
81125120:	11253401 	jmpi	81125340 <__register_exitproc>

81125124 <exit>:
81125124:	defffe04 	addi	sp,sp,-8
81125128:	000b883a 	mov	r5,zero
8112512c:	dc000015 	stw	r16,0(sp)
81125130:	dfc00115 	stw	ra,4(sp)
81125134:	2021883a 	mov	r16,r4
81125138:	11254580 	call	81125458 <__call_exitprocs>
8112513c:	00a044f4 	movhi	r2,33043
81125140:	10a2ef04 	addi	r2,r2,-29764
81125144:	11000017 	ldw	r4,0(r2)
81125148:	20800f17 	ldw	r2,60(r4)
8112514c:	10000126 	beq	r2,zero,81125154 <exit+0x30>
81125150:	103ee83a 	callr	r2
81125154:	8009883a 	mov	r4,r16
81125158:	11255d80 	call	811255d8 <_exit>

8112515c <memcmp>:
8112515c:	01c000c4 	movi	r7,3
81125160:	3980192e 	bgeu	r7,r6,811251c8 <memcmp+0x6c>
81125164:	2144b03a 	or	r2,r4,r5
81125168:	11c4703a 	and	r2,r2,r7
8112516c:	10000f26 	beq	r2,zero,811251ac <memcmp+0x50>
81125170:	20800003 	ldbu	r2,0(r4)
81125174:	28c00003 	ldbu	r3,0(r5)
81125178:	10c0151e 	bne	r2,r3,811251d0 <memcmp+0x74>
8112517c:	31bfff84 	addi	r6,r6,-2
81125180:	01ffffc4 	movi	r7,-1
81125184:	00000406 	br	81125198 <memcmp+0x3c>
81125188:	20800003 	ldbu	r2,0(r4)
8112518c:	28c00003 	ldbu	r3,0(r5)
81125190:	31bfffc4 	addi	r6,r6,-1
81125194:	10c00e1e 	bne	r2,r3,811251d0 <memcmp+0x74>
81125198:	21000044 	addi	r4,r4,1
8112519c:	29400044 	addi	r5,r5,1
811251a0:	31fff91e 	bne	r6,r7,81125188 <__reset+0xfb105188>
811251a4:	0005883a 	mov	r2,zero
811251a8:	f800283a 	ret
811251ac:	20c00017 	ldw	r3,0(r4)
811251b0:	28800017 	ldw	r2,0(r5)
811251b4:	18bfee1e 	bne	r3,r2,81125170 <__reset+0xfb105170>
811251b8:	31bfff04 	addi	r6,r6,-4
811251bc:	21000104 	addi	r4,r4,4
811251c0:	29400104 	addi	r5,r5,4
811251c4:	39bff936 	bltu	r7,r6,811251ac <__reset+0xfb1051ac>
811251c8:	303fe91e 	bne	r6,zero,81125170 <__reset+0xfb105170>
811251cc:	003ff506 	br	811251a4 <__reset+0xfb1051a4>
811251d0:	10c5c83a 	sub	r2,r2,r3
811251d4:	f800283a 	ret

811251d8 <_putc_r>:
811251d8:	defffc04 	addi	sp,sp,-16
811251dc:	dc000215 	stw	r16,8(sp)
811251e0:	dfc00315 	stw	ra,12(sp)
811251e4:	2021883a 	mov	r16,r4
811251e8:	20000226 	beq	r4,zero,811251f4 <_putc_r+0x1c>
811251ec:	20800e17 	ldw	r2,56(r4)
811251f0:	10001b26 	beq	r2,zero,81125260 <_putc_r+0x88>
811251f4:	30800217 	ldw	r2,8(r6)
811251f8:	10bfffc4 	addi	r2,r2,-1
811251fc:	30800215 	stw	r2,8(r6)
81125200:	10000a16 	blt	r2,zero,8112522c <_putc_r+0x54>
81125204:	30800017 	ldw	r2,0(r6)
81125208:	11400005 	stb	r5,0(r2)
8112520c:	30800017 	ldw	r2,0(r6)
81125210:	10c00044 	addi	r3,r2,1
81125214:	30c00015 	stw	r3,0(r6)
81125218:	10800003 	ldbu	r2,0(r2)
8112521c:	dfc00317 	ldw	ra,12(sp)
81125220:	dc000217 	ldw	r16,8(sp)
81125224:	dec00404 	addi	sp,sp,16
81125228:	f800283a 	ret
8112522c:	30c00617 	ldw	r3,24(r6)
81125230:	10c00616 	blt	r2,r3,8112524c <_putc_r+0x74>
81125234:	30800017 	ldw	r2,0(r6)
81125238:	00c00284 	movi	r3,10
8112523c:	11400005 	stb	r5,0(r2)
81125240:	30800017 	ldw	r2,0(r6)
81125244:	11400003 	ldbu	r5,0(r2)
81125248:	28fff11e 	bne	r5,r3,81125210 <__reset+0xfb105210>
8112524c:	8009883a 	mov	r4,r16
81125250:	dfc00317 	ldw	ra,12(sp)
81125254:	dc000217 	ldw	r16,8(sp)
81125258:	dec00404 	addi	sp,sp,16
8112525c:	111d3241 	jmpi	8111d324 <__swbuf_r>
81125260:	d9400015 	stw	r5,0(sp)
81125264:	d9800115 	stw	r6,4(sp)
81125268:	1117e140 	call	81117e14 <__sinit>
8112526c:	d9800117 	ldw	r6,4(sp)
81125270:	d9400017 	ldw	r5,0(sp)
81125274:	003fdf06 	br	811251f4 <__reset+0xfb1051f4>

81125278 <putc>:
81125278:	00a044f4 	movhi	r2,33043
8112527c:	defffc04 	addi	sp,sp,-16
81125280:	10a2f004 	addi	r2,r2,-29760
81125284:	dc000115 	stw	r16,4(sp)
81125288:	14000017 	ldw	r16,0(r2)
8112528c:	dc400215 	stw	r17,8(sp)
81125290:	dfc00315 	stw	ra,12(sp)
81125294:	2023883a 	mov	r17,r4
81125298:	80000226 	beq	r16,zero,811252a4 <putc+0x2c>
8112529c:	80800e17 	ldw	r2,56(r16)
811252a0:	10001a26 	beq	r2,zero,8112530c <putc+0x94>
811252a4:	28800217 	ldw	r2,8(r5)
811252a8:	10bfffc4 	addi	r2,r2,-1
811252ac:	28800215 	stw	r2,8(r5)
811252b0:	10000b16 	blt	r2,zero,811252e0 <putc+0x68>
811252b4:	28800017 	ldw	r2,0(r5)
811252b8:	14400005 	stb	r17,0(r2)
811252bc:	28800017 	ldw	r2,0(r5)
811252c0:	10c00044 	addi	r3,r2,1
811252c4:	28c00015 	stw	r3,0(r5)
811252c8:	10800003 	ldbu	r2,0(r2)
811252cc:	dfc00317 	ldw	ra,12(sp)
811252d0:	dc400217 	ldw	r17,8(sp)
811252d4:	dc000117 	ldw	r16,4(sp)
811252d8:	dec00404 	addi	sp,sp,16
811252dc:	f800283a 	ret
811252e0:	28c00617 	ldw	r3,24(r5)
811252e4:	10c00e16 	blt	r2,r3,81125320 <putc+0xa8>
811252e8:	28800017 	ldw	r2,0(r5)
811252ec:	01000284 	movi	r4,10
811252f0:	14400005 	stb	r17,0(r2)
811252f4:	28800017 	ldw	r2,0(r5)
811252f8:	10c00003 	ldbu	r3,0(r2)
811252fc:	193ff01e 	bne	r3,r4,811252c0 <__reset+0xfb1052c0>
81125300:	280d883a 	mov	r6,r5
81125304:	180b883a 	mov	r5,r3
81125308:	00000706 	br	81125328 <putc+0xb0>
8112530c:	8009883a 	mov	r4,r16
81125310:	d9400015 	stw	r5,0(sp)
81125314:	1117e140 	call	81117e14 <__sinit>
81125318:	d9400017 	ldw	r5,0(sp)
8112531c:	003fe106 	br	811252a4 <__reset+0xfb1052a4>
81125320:	280d883a 	mov	r6,r5
81125324:	880b883a 	mov	r5,r17
81125328:	8009883a 	mov	r4,r16
8112532c:	dfc00317 	ldw	ra,12(sp)
81125330:	dc400217 	ldw	r17,8(sp)
81125334:	dc000117 	ldw	r16,4(sp)
81125338:	dec00404 	addi	sp,sp,16
8112533c:	111d3241 	jmpi	8111d324 <__swbuf_r>

81125340 <__register_exitproc>:
81125340:	defffa04 	addi	sp,sp,-24
81125344:	dc000315 	stw	r16,12(sp)
81125348:	042044f4 	movhi	r16,33043
8112534c:	8422ef04 	addi	r16,r16,-29764
81125350:	80c00017 	ldw	r3,0(r16)
81125354:	dc400415 	stw	r17,16(sp)
81125358:	dfc00515 	stw	ra,20(sp)
8112535c:	18805217 	ldw	r2,328(r3)
81125360:	2023883a 	mov	r17,r4
81125364:	10003726 	beq	r2,zero,81125444 <__register_exitproc+0x104>
81125368:	10c00117 	ldw	r3,4(r2)
8112536c:	010007c4 	movi	r4,31
81125370:	20c00e16 	blt	r4,r3,811253ac <__register_exitproc+0x6c>
81125374:	1a000044 	addi	r8,r3,1
81125378:	8800221e 	bne	r17,zero,81125404 <__register_exitproc+0xc4>
8112537c:	18c00084 	addi	r3,r3,2
81125380:	18c7883a 	add	r3,r3,r3
81125384:	18c7883a 	add	r3,r3,r3
81125388:	12000115 	stw	r8,4(r2)
8112538c:	10c7883a 	add	r3,r2,r3
81125390:	19400015 	stw	r5,0(r3)
81125394:	0005883a 	mov	r2,zero
81125398:	dfc00517 	ldw	ra,20(sp)
8112539c:	dc400417 	ldw	r17,16(sp)
811253a0:	dc000317 	ldw	r16,12(sp)
811253a4:	dec00604 	addi	sp,sp,24
811253a8:	f800283a 	ret
811253ac:	00800034 	movhi	r2,0
811253b0:	10800004 	addi	r2,r2,0
811253b4:	10002626 	beq	r2,zero,81125450 <__register_exitproc+0x110>
811253b8:	01006404 	movi	r4,400
811253bc:	d9400015 	stw	r5,0(sp)
811253c0:	d9800115 	stw	r6,4(sp)
811253c4:	d9c00215 	stw	r7,8(sp)
811253c8:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
811253cc:	d9400017 	ldw	r5,0(sp)
811253d0:	d9800117 	ldw	r6,4(sp)
811253d4:	d9c00217 	ldw	r7,8(sp)
811253d8:	10001d26 	beq	r2,zero,81125450 <__register_exitproc+0x110>
811253dc:	81000017 	ldw	r4,0(r16)
811253e0:	10000115 	stw	zero,4(r2)
811253e4:	02000044 	movi	r8,1
811253e8:	22405217 	ldw	r9,328(r4)
811253ec:	0007883a 	mov	r3,zero
811253f0:	12400015 	stw	r9,0(r2)
811253f4:	20805215 	stw	r2,328(r4)
811253f8:	10006215 	stw	zero,392(r2)
811253fc:	10006315 	stw	zero,396(r2)
81125400:	883fde26 	beq	r17,zero,8112537c <__reset+0xfb10537c>
81125404:	18c9883a 	add	r4,r3,r3
81125408:	2109883a 	add	r4,r4,r4
8112540c:	1109883a 	add	r4,r2,r4
81125410:	21802215 	stw	r6,136(r4)
81125414:	01800044 	movi	r6,1
81125418:	12406217 	ldw	r9,392(r2)
8112541c:	30cc983a 	sll	r6,r6,r3
81125420:	4992b03a 	or	r9,r9,r6
81125424:	12406215 	stw	r9,392(r2)
81125428:	21c04215 	stw	r7,264(r4)
8112542c:	01000084 	movi	r4,2
81125430:	893fd21e 	bne	r17,r4,8112537c <__reset+0xfb10537c>
81125434:	11006317 	ldw	r4,396(r2)
81125438:	218cb03a 	or	r6,r4,r6
8112543c:	11806315 	stw	r6,396(r2)
81125440:	003fce06 	br	8112537c <__reset+0xfb10537c>
81125444:	18805304 	addi	r2,r3,332
81125448:	18805215 	stw	r2,328(r3)
8112544c:	003fc606 	br	81125368 <__reset+0xfb105368>
81125450:	00bfffc4 	movi	r2,-1
81125454:	003fd006 	br	81125398 <__reset+0xfb105398>

81125458 <__call_exitprocs>:
81125458:	defff504 	addi	sp,sp,-44
8112545c:	df000915 	stw	fp,36(sp)
81125460:	dd400615 	stw	r21,24(sp)
81125464:	dc800315 	stw	r18,12(sp)
81125468:	dfc00a15 	stw	ra,40(sp)
8112546c:	ddc00815 	stw	r23,32(sp)
81125470:	dd800715 	stw	r22,28(sp)
81125474:	dd000515 	stw	r20,20(sp)
81125478:	dcc00415 	stw	r19,16(sp)
8112547c:	dc400215 	stw	r17,8(sp)
81125480:	dc000115 	stw	r16,4(sp)
81125484:	d9000015 	stw	r4,0(sp)
81125488:	2839883a 	mov	fp,r5
8112548c:	04800044 	movi	r18,1
81125490:	057fffc4 	movi	r21,-1
81125494:	00a044f4 	movhi	r2,33043
81125498:	10a2ef04 	addi	r2,r2,-29764
8112549c:	12000017 	ldw	r8,0(r2)
811254a0:	45005217 	ldw	r20,328(r8)
811254a4:	44c05204 	addi	r19,r8,328
811254a8:	a0001c26 	beq	r20,zero,8112551c <__call_exitprocs+0xc4>
811254ac:	a0800117 	ldw	r2,4(r20)
811254b0:	15ffffc4 	addi	r23,r2,-1
811254b4:	b8000d16 	blt	r23,zero,811254ec <__call_exitprocs+0x94>
811254b8:	14000044 	addi	r16,r2,1
811254bc:	8421883a 	add	r16,r16,r16
811254c0:	8421883a 	add	r16,r16,r16
811254c4:	84402004 	addi	r17,r16,128
811254c8:	a463883a 	add	r17,r20,r17
811254cc:	a421883a 	add	r16,r20,r16
811254d0:	e0001e26 	beq	fp,zero,8112554c <__call_exitprocs+0xf4>
811254d4:	80804017 	ldw	r2,256(r16)
811254d8:	e0801c26 	beq	fp,r2,8112554c <__call_exitprocs+0xf4>
811254dc:	bdffffc4 	addi	r23,r23,-1
811254e0:	843fff04 	addi	r16,r16,-4
811254e4:	8c7fff04 	addi	r17,r17,-4
811254e8:	bd7ff91e 	bne	r23,r21,811254d0 <__reset+0xfb1054d0>
811254ec:	00800034 	movhi	r2,0
811254f0:	10800004 	addi	r2,r2,0
811254f4:	10000926 	beq	r2,zero,8112551c <__call_exitprocs+0xc4>
811254f8:	a0800117 	ldw	r2,4(r20)
811254fc:	1000301e 	bne	r2,zero,811255c0 <__call_exitprocs+0x168>
81125500:	a0800017 	ldw	r2,0(r20)
81125504:	10003226 	beq	r2,zero,811255d0 <__call_exitprocs+0x178>
81125508:	a009883a 	mov	r4,r20
8112550c:	98800015 	stw	r2,0(r19)
81125510:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
81125514:	9d000017 	ldw	r20,0(r19)
81125518:	a03fe41e 	bne	r20,zero,811254ac <__reset+0xfb1054ac>
8112551c:	dfc00a17 	ldw	ra,40(sp)
81125520:	df000917 	ldw	fp,36(sp)
81125524:	ddc00817 	ldw	r23,32(sp)
81125528:	dd800717 	ldw	r22,28(sp)
8112552c:	dd400617 	ldw	r21,24(sp)
81125530:	dd000517 	ldw	r20,20(sp)
81125534:	dcc00417 	ldw	r19,16(sp)
81125538:	dc800317 	ldw	r18,12(sp)
8112553c:	dc400217 	ldw	r17,8(sp)
81125540:	dc000117 	ldw	r16,4(sp)
81125544:	dec00b04 	addi	sp,sp,44
81125548:	f800283a 	ret
8112554c:	a0800117 	ldw	r2,4(r20)
81125550:	80c00017 	ldw	r3,0(r16)
81125554:	10bfffc4 	addi	r2,r2,-1
81125558:	15c01426 	beq	r2,r23,811255ac <__call_exitprocs+0x154>
8112555c:	80000015 	stw	zero,0(r16)
81125560:	183fde26 	beq	r3,zero,811254dc <__reset+0xfb1054dc>
81125564:	95c8983a 	sll	r4,r18,r23
81125568:	a0806217 	ldw	r2,392(r20)
8112556c:	a5800117 	ldw	r22,4(r20)
81125570:	2084703a 	and	r2,r4,r2
81125574:	10000b26 	beq	r2,zero,811255a4 <__call_exitprocs+0x14c>
81125578:	a0806317 	ldw	r2,396(r20)
8112557c:	2088703a 	and	r4,r4,r2
81125580:	20000c1e 	bne	r4,zero,811255b4 <__call_exitprocs+0x15c>
81125584:	89400017 	ldw	r5,0(r17)
81125588:	d9000017 	ldw	r4,0(sp)
8112558c:	183ee83a 	callr	r3
81125590:	a0800117 	ldw	r2,4(r20)
81125594:	15bfbf1e 	bne	r2,r22,81125494 <__reset+0xfb105494>
81125598:	98800017 	ldw	r2,0(r19)
8112559c:	153fcf26 	beq	r2,r20,811254dc <__reset+0xfb1054dc>
811255a0:	003fbc06 	br	81125494 <__reset+0xfb105494>
811255a4:	183ee83a 	callr	r3
811255a8:	003ff906 	br	81125590 <__reset+0xfb105590>
811255ac:	a5c00115 	stw	r23,4(r20)
811255b0:	003feb06 	br	81125560 <__reset+0xfb105560>
811255b4:	89000017 	ldw	r4,0(r17)
811255b8:	183ee83a 	callr	r3
811255bc:	003ff406 	br	81125590 <__reset+0xfb105590>
811255c0:	a0800017 	ldw	r2,0(r20)
811255c4:	a027883a 	mov	r19,r20
811255c8:	1029883a 	mov	r20,r2
811255cc:	003fb606 	br	811254a8 <__reset+0xfb1054a8>
811255d0:	0005883a 	mov	r2,zero
811255d4:	003ffb06 	br	811255c4 <__reset+0xfb1055c4>

811255d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
811255d8:	defffd04 	addi	sp,sp,-12
811255dc:	df000215 	stw	fp,8(sp)
811255e0:	df000204 	addi	fp,sp,8
811255e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
811255e8:	0001883a 	nop
811255ec:	e0bfff17 	ldw	r2,-4(fp)
811255f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
811255f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
811255f8:	10000226 	beq	r2,zero,81125604 <_exit+0x2c>
    ALT_SIM_FAIL();
811255fc:	002af070 	cmpltui	zero,zero,43969
81125600:	00000106 	br	81125608 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
81125604:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
81125608:	003fff06 	br	81125608 <__reset+0xfb105608>
