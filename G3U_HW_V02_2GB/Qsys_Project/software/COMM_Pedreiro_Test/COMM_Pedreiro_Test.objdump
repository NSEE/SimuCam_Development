
COMM_Pedreiro_Test.elf:     file format elf32-littlenios2
COMM_Pedreiro_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00024460 memsz 0x00025710 flags rwx
    LOAD off    0x00026000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00026000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00020c54  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000193c  81120e98  81120e98  00021e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cac  811227d4  811227d4  000237d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000012b0  81124480  81124480  00025480  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  81125730  81125730  00026000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00026000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00026000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001440  00000000  00000000  00026028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003886d  00000000  00000000  00027468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000d9db  00000000  00000000  0005fcd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012aca  00000000  00000000  0006d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000044ec  00000000  00000000  0008017c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006abe  00000000  00000000  00084668  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ed47  00000000  00000000  0008b126  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000a9e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001da0  00000000  00000000  000a9eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000b14f5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000b14f8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b1504  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b1505  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b1506  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b150a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b150e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000b1512  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000b151d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000b1528  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  000b1533  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  000b1544  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00278448  00000000  00000000  000b1597  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
81120e98 l    d  .rodata	00000000 .rodata
811227d4 l    d  .rwdata	00000000 .rwdata
81124480 l    d  .bss	00000000 .bss
81125730 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../COMM_Pedreiro_Test_bsp//obj/HAL/src/crt0.o
81100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm.c
00000000 l    df *ABS*	00000000 data_packet.c
00000000 l    df *ABS*	00000000 fee_buffers.c
81124498 l     O .bss	00000004 viCh1HoldContext
8112449c l     O .bss	00000004 viCh2HoldContext
811244a0 l     O .bss	00000004 viCh3HoldContext
811244a4 l     O .bss	00000004 viCh4HoldContext
811244a8 l     O .bss	00000004 viCh5HoldContext
811244ac l     O .bss	00000004 viCh6HoldContext
811244b0 l     O .bss	00000004 viCh7HoldContext
811244b4 l     O .bss	00000004 viCh8HoldContext
81104948 l     F .text	0000004c vFeebWriteReg
81104994 l     F .text	00000048 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
00000000 l    df *ABS*	00000000 spw_controller.c
81104f0c l     F .text	00000048 uliSpwcReadReg
81104ec0 l     F .text	0000004c vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
81124430 l     O .rwdata	00000001 ucIoValue
811050dc l     F .text	00000074 bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
81105974 l     F .text	00000134 msgdma_write_extended_descriptor
81105aa8 l     F .text	0000015c msgdma_construct_extended_descriptor
81105c04 l     F .text	000002a8 msgdma_descriptor_async_transfer
81105eac l     F .text	0000036c msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81106960 l     F .text	0000004c vRstcWriteReg
811069ac l     F .text	00000048 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
811244c4 l     O .bss	00000004 viHoldContext
81107b58 l     F .text	00000050 uliSyncReadReg
81107b04 l     F .text	00000054 bSyncWriteReg
00000000 l    df *ABS*	00000000 mebxhwt01.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
811227d4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 refill.c
8110cca4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
81122372 l     O .rodata	00000010 zeroes.4389
81122382 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
81122392 l     O .rodata	00000010 zeroes.4404
8111155c l     F .text	000000bc __sbprintf
811223a2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81111820 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
81113350 l     F .text	00000008 __fp_unlock
81113364 l     F .text	0000019c __sinit.part.1
81113500 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
81123020 l     O .rwdata	00000020 lc_ctype_charset
81123000 l     O .rwdata	00000020 lc_message_charset
81123040 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
811223d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
81122504 l     O .rodata	00000010 blanks.4332
811224f4 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
81117198 l     F .text	000000fc __sprint_r.part.0
81122524 l     O .rodata	00000010 blanks.4348
81122514 l     O .rodata	00000010 zeroes.4349
81118724 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
8111bb68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
8111bc94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
8111bcc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
8111bf2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
8111c00c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
8111c1e0 l     F .text	0000003c alt_get_errno
8111c21c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
8111c434 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8112446c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
8111c854 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
8111c988 l     F .text	00000034 alt_dev_reg
81123220 l     O .rwdata	00001060 jtag_uart_0
81124280 l     O .rwdata	000000c4 rs232_uart
81124344 l     O .rwdata	00000060 dma_DDR_M1
811243a4 l     O .rwdata	00000060 dma_DDR_M2
81124404 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
8111cd00 l     F .text	0000020c altera_avalon_jtag_uart_irq
8111cf0c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8111d544 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
8111d7f4 l     F .text	0000009c altera_avalon_uart_irq
8111d890 l     F .text	000000e4 altera_avalon_uart_rxirq
8111d974 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
8111db10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
8111dd28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8111df10 l     F .text	0000003c alt_get_errno
8111df4c l     F .text	00000094 alt_msgdma_write_standard_descriptor
8111dfe0 l     F .text	0000012c alt_msgdma_write_extended_descriptor
8111e10c l     F .text	00000184 alt_msgdma_irq
8111e290 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
8111e31c l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8111e470 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
8111e740 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
8111ed88 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
8111ee2c l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8111feb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
81120534 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81124504 g     O .bss	00000004 alt_instruction_exception_handler
8111fc9c g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
81106e9c g     F .text	00000044 vSyncInitIrq
81115468 g     F .text	00000074 _mprec_log10
81106ff0 g     F .text	00000038 bSyncSetMbt
811052a8 g     F .text	00000100 I2C_Read
81115554 g     F .text	0000008c __any_on
81114214 g     F .text	00000054 _isatty_r
811223dc g     O .rodata	00000028 __mprec_tinytens
8111c11c g     F .text	0000007c alt_main
8110423c g     F .text	00000050 bFeebCh3IrqFlagBufferEmpty
81125630 g     O .bss	00000100 alt_irq
81114344 g     F .text	00000060 _lseek_r
811136f0 g     F .text	000000ac __sflags
8111ace8 g     F .text	00000088 .hidden __eqdf2
8111eb68 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
81125730 g       *ABS*	00000000 __alt_heap_start
811244c0 g     O .bss	00000001 SspdConfigControl
8110739c g     F .text	0000004c bSyncCtrReset
81124a30 g     O .bss	00000180 xComm1
8110a238 g     F .text	0000009c aatoh
81118d08 g     F .text	0000009c _wcrtomb_r
81104160 g     F .text	0000003c vFeebCh8IrqFlagClrBufferEmpty
81103e34 g     F .text	00000038 vFeebCh2HandleIrq
8110d10c g     F .text	0000005c __sseek
811136a0 g     F .text	00000010 __sinit
811062d0 g     F .text	0000003c iMsgdmaExtendedDescriptorAsyncTransfer
81118bb0 g     F .text	00000140 __swbuf_r
81104b9c g     F .text	000000ec bSpwcGetLinkError
81114268 g     F .text	0000007c _setlocale_r
81124434 g     O .rwdata	00000004 LedsPainelControl
81124530 g     O .bss	00000100 cDebugBuffer
81113508 g     F .text	00000068 __sfmoreglue
8111c1bc g     F .text	00000024 __malloc_unlock
81102868 g     F .text	00000078 uliXorshift32
8110a35c g     F .text	00000440 .hidden __divsf3
81104d50 g     F .text	00000170 bSpwcInitCh
811244cc g     O .bss	00000004 fp
81114488 g     F .text	0000015c memmove
811077e0 g     F .text	0000006c bSyncCtrCh8OutEnable
81113688 g     F .text	00000018 _cleanup
811145e4 g     F .text	000000a8 _Balloc
8111eab8 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
81124484 g     O .bss	00000004 pxDmaM1Dev
8110437c g     F .text	00000050 bFeebCh7IrqFlagBufferEmpty
81104f54 g     F .text	00000034 bEnableIsoDrivers
8111ad70 g     F .text	000000dc .hidden __gtdf2
811208dc g     F .text	00000024 altera_nios2_gen2_irq_init
8110713c g     F .text	00000068 bSyncSetNCycles
81107708 g     F .text	0000006c bSyncCtrCh6OutEnable
81105604 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
81102ba0 g     F .text	000000f0 TEMP_Read
81103ea4 g     F .text	00000038 vFeebCh4HandleIrq
8110bdb8 g     F .text	0000005c _fstat_r
811244d0 g     O .bss	00000004 errno
8110cf08 g     F .text	00000014 __srget
81107a9c g     F .text	00000034 uliSyncGetCtr
8110d088 g     F .text	00000008 __seofread
81115f5c g     F .text	0000123c ___svfiprintf_internal_r
811244f4 g     O .bss	00000004 alt_argv
8112c430 g       *ABS*	00000000 _gp
8111c824 g     F .text	00000030 usleep
8110588c g     F .text	00000078 bSetBoardLeds
8111f5d8 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
811230a0 g     O .rwdata	00000180 alt_fd_list
811042dc g     F .text	00000050 bFeebCh5IrqFlagBufferEmpty
8110bf14 g     F .text	00000070 _getc_r
8110bf84 g     F .text	00000088 getc
81124bb0 g     O .bss	00000180 xComm2
81120058 g     F .text	00000090 alt_find_dev
8110c9d4 g     F .text	00000148 memcpy
81113358 g     F .text	0000000c _cleanup_r
8111b8bc g     F .text	000000dc .hidden __floatsidf
81106f70 g     F .text	00000044 ucSyncStatusErrorCode
81124d30 g     O .bss	00000180 xComm6
811205f8 g     F .text	0000007c alt_io_redirect
8111ae4c g     F .text	000000f4 .hidden __ltdf2
81104594 g     F .text	000000cc bFeebSetIrqControl
811034fc g     F .text	000000a8 bSdmaInitM2Dma
81120e98 g       *ABS*	00000000 __DTOR_END__
8111f9f8 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
8111fcd8 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
81107434 g     F .text	0000004c bSyncCtrErrInj
8111fc48 g     F .text	00000054 alt_msgdma_register_callback
81120900 g     F .text	0000009c alt_exception_cause_generated_bad_addr
81106e64 g     F .text	00000038 vSyncHandleIrq
81103ff8 g     F .text	0000003c vFeebCh2IrqFlagClrBufferEmpty
8110769c g     F .text	0000006c bSyncCtrCh5OutEnable
811244c8 g     O .bss	00000001 vucN
81115ba4 g     F .text	00000074 __fpclassifyd
81106ee0 g     F .text	0000004c bSyncStatusExtnIrq
811153c4 g     F .text	000000a4 __ratio
81107028 g     F .text	00000038 bSyncSetBt
81118708 g     F .text	0000001c __vfiprintf_internal
81103fbc g     F .text	0000003c vFeebCh1IrqFlagClrBufferEmpty
8111d104 g     F .text	0000021c altera_avalon_jtag_uart_read
8111f2b8 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
81119a98 g     F .text	00000064 .hidden __udivsi3
8111bf68 g     F .text	000000a4 isatty
811244b8 g     O .bss	00000001 LedsBoardControl
8112242c g     O .rodata	000000c8 __mprec_tens
811142e4 g     F .text	0000000c __locale_charset
811075c4 g     F .text	0000006c bSyncCtrCh3OutEnable
811053a8 g     F .text	00000158 I2C_MultipleRead
811244dc g     O .bss	00000004 __malloc_top_pad
81124448 g     O .rwdata	00000004 __mb_cur_max
81114314 g     F .text	0000000c _localeconv_r
811068f8 g     F .text	00000068 vRstcHoldDeviceReset
811149f0 g     F .text	0000003c __i2b
81113bd0 g     F .text	000004bc __sfvwrite_r
8110cf1c g     F .text	00000054 _sbrk_r
811155e0 g     F .text	00000060 _read_r
811023d4 g     F .text	00000494 bDdr2MemoryRandomReadTest
81124460 g     O .rwdata	00000004 alt_max_fd
811188a4 g     F .text	000000f0 _fclose_r
81113320 g     F .text	00000030 fflush
811244d8 g     O .bss	00000004 __malloc_max_sbrked_mem
8111bdac g     F .text	00000180 alt_irq_register
8110b4c4 g     F .text	00000110 .hidden __extendsfdf2
81105150 g     F .text	00000080 I2C_TestAdress
81119b54 g     F .text	000008ac .hidden __adddf3
8111516c g     F .text	0000010c __b2d
8111f018 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
81119468 g     F .text	00000538 .hidden __umoddi3
8111c048 g     F .text	000000d4 lseek
81104c88 g     F .text	000000c8 bSpwcGetLinkStatus
81104824 g     F .text	00000080 bFeebGetWindowing
81124438 g     O .rwdata	00000004 _global_impure_ptr
81106e20 g     F .text	00000044 bSSDisplayUpdate
81115640 g     F .text	00000564 _realloc_r
81125730 g       *ABS*	00000000 __bss_end
81120444 g     F .text	000000f0 alt_iic_isr_register
8111c71c g     F .text	00000108 alt_tick
81106828 g     F .text	00000064 vRstcSimucamReset
8111fadc g     F .text	0000016c alt_msgdma_init
81118ef0 g     F .text	00000578 .hidden __udivdi3
81118b0c g     F .text	00000024 _fputwc_r
81122404 g     O .rodata	00000028 __mprec_bigtens
811147d4 g     F .text	00000104 __s2b
811070d0 g     F .text	0000006c bSyncSetPolarity
8111b998 g     F .text	000000a8 .hidden __floatunsidf
81114eac g     F .text	00000060 __mcmp
8111d748 g     F .text	000000ac altera_avalon_uart_init
8111fd50 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
811039cc g     F .text	00000430 bSdmaDmaM2Transfer
811136c0 g     F .text	00000018 __fp_lock_all
811203f8 g     F .text	0000004c alt_ic_irq_enabled
811051d0 g     F .text	000000d8 I2C_Write
8111c680 g     F .text	0000009c alt_alarm_stop
811244ec g     O .bss	00000004 alt_irq_active
8110b958 g     F .text	00000444 _fseeko_r
811000fc g     F .exceptions	000000d4 alt_irq_handler
81123078 g     O .rwdata	00000028 alt_dev_null
8111ec50 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
81107098 g     F .text	00000038 bSyncSetOst
81105500 g     F .text	0000008c i2c_start
81107630 g     F .text	0000006c bSyncCtrCh4OutEnable
8111f96c g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
8111bc74 g     F .text	00000020 alt_dcache_flush_all
811148d8 g     F .text	00000068 __hi0bits
8111b83c g     F .text	00000080 .hidden __fixdfsi
81107350 g     F .text	0000004c bSyncCtrStart
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
81124458 g     O .rwdata	00000008 alt_dev_list
8111c890 g     F .text	000000f8 write
81120a64 g     F .text	000000a0 _putc_r
8111bcfc g     F .text	000000b0 fstat
8110b914 g     F .text	00000024 fprintf
8110432c g     F .text	00000050 bFeebCh6IrqFlagBufferEmpty
81109f38 g     F .text	00000050 _reg_write
8111ae4c g     F .text	000000f4 .hidden __ledf2
811069f4 g     F .text	00000050 v_spi_start
81114c24 g     F .text	00000140 __pow5mult
811172ac g     F .text	0000145c ___vfiprintf_internal_r
811244e8 g     O .bss	00000004 __nlocale_changed
81119afc g     F .text	00000058 .hidden __umodsi3
81107480 g     F .text	0000006c bSyncCtrSyncOutEnable
8111f070 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81125730 g       *ABS*	00000000 end
81103f14 g     F .text	00000038 vFeebCh6HandleIrq
8110bd9c g     F .text	0000001c fseeko
81124eb0 g     O .bss	00000180 xComm5
8111dd64 g     F .text	000001ac altera_avalon_uart_write
8110b93c g     F .text	0000001c fseek
8111cc40 g     F .text	000000c0 altera_avalon_jtag_uart_init
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
81120e98 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81101f6c g     F .text	00000468 bDdr2MemoryRandomWriteTest
8111d5bc g     F .text	0000007c alt_avalon_timer_sc_init
81104784 g     F .text	000000a0 bFeebSetWindowing
8111d698 g     F .text	00000060 altera_avalon_uart_write_fd
8110b77c g     F .text	00000064 .hidden __clzsi2
8111d6f8 g     F .text	00000050 altera_avalon_uart_close_fd
8111d320 g     F .text	00000224 altera_avalon_jtag_uart_write
811136b0 g     F .text	00000004 __sfp_lock_acquire
81102c90 g     F .text	00000040 sense_log_temp
811143a4 g     F .text	000000e4 memchr
8110f348 g     F .text	000021f8 ___vfprintf_internal_r
8110cf70 g     F .text	00000058 _sprintf_r
811138c0 g     F .text	00000310 _free_r
81120674 g     F .text	0000022c alt_printf
81109fd8 g     F .text	000001f4 _print_codec_status
811142f0 g     F .text	00000010 __locale_mb_cur_max
81120ce4 g     F .text	00000180 __call_exitprocs
8110ce94 g     F .text	00000074 __srget_r
811244e4 g     O .bss	00000004 __mlocale_changed
811073e8 g     F .text	0000004c bSyncCtrOneShot
81124440 g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	00000038 _start
81107ad0 g     F .text	00000034 uliSyncReadStatus
811244fc g     O .bss	00000004 _alt_tick_rate
81114d64 g     F .text	00000148 __lshift
8111eb10 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
81124500 g     O .bss	00000004 _alt_nticks
8111c470 g     F .text	000000fc read
8111c9f4 g     F .text	000000e8 alt_sys_init
8110ab98 g     F .text	00000124 .hidden __floatsisf
81115d8c g     F .text	000001d0 __ssprint_r
8110cc44 g     F .text	00000060 _open_r
811048a4 g     F .text	000000a4 bFeebGetBuffersStatus
81100788 g     F .text	00000cac bDdr2EepromDump
81120bcc g     F .text	00000118 __register_exitproc
81114a2c g     F .text	000001f8 __multiply
8111cfac g     F .text	00000068 altera_avalon_jtag_uart_close
81106bac g     F .text	00000050 v_spi_end
81124508 g     O .bss	00000028 __malloc_current_mallinfo
81115278 g     F .text	0000014c __d2b
81104070 g     F .text	0000003c vFeebCh4IrqFlagClrBufferEmpty
81103f84 g     F .text	00000038 vFeebCh8HandleIrq
81106bfc g     F .text	0000015c RTCC_SPI_R_MAC
8111cadc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
811201f0 g     F .text	000000a4 alt_get_fd
811049dc g     F .text	000000f8 bSpwcSetLink
8111ba40 g     F .text	00000128 alt_busy_sleep
811074ec g     F .text	0000006c bSyncCtrCh1OutEnable
81125030 g     O .bss	00000180 xComm3
8110a1cc g     F .text	0000006c _split_codec_status
811117cc g     F .text	00000054 _close_r
8111efc0 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
811209e8 g     F .text	0000007c memcmp
8111cb9c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
81125730 g       *ABS*	00000000 __alt_stack_base
8111cbec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
811040ac g     F .text	0000003c vFeebCh5IrqFlagClrBufferEmpty
8110be14 g     F .text	000000cc _fwrite_r
811251b0 g     O .bss	00000180 xComm7
8111f0c8 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
8110419c g     F .text	00000050 bFeebCh1IrqFlagBufferEmpty
81111678 g     F .text	00000154 __swsetup_r
8111a400 g     F .text	000008e8 .hidden __divdf3
81113570 g     F .text	00000118 __sfp
811154dc g     F .text	00000078 __copybits
81122bf8 g     O .rwdata	00000408 __malloc_av_
811136bc g     F .text	00000004 __sinit_lock_release
81124480 g     O .bss	00000004 uliInitialState
8110558c g     F .text	00000078 i2c_stop
8110a2d4 g     F .text	0000005c Verif_Error
8110a330 g     F .text	0000002c toInt
8110adac g     F .text	00000718 .hidden __muldf3
8110d034 g     F .text	00000054 __sread
811200e8 g     F .text	00000108 alt_find_file
8111fef4 g     F .text	000000a4 alt_dev_llist_insert
8111c198 g     F .text	00000024 __malloc_lock
8110b8ec g     F .text	00000028 _fprintf_r
8111c5d0 g     F .text	000000b0 sbrk
8110d170 g     F .text	000021d8 ___svfprintf_internal_r
811132c4 g     F .text	0000005c _fflush_r
811187e0 g     F .text	000000c4 _calloc_r
81106fb4 g     F .text	0000003c ucSyncStatusCycleNumber
81103edc g     F .text	00000038 vFeebCh5HandleIrq
8110b8d4 g     F .text	00000018 fopen
81124480 g       *ABS*	00000000 __bss_start
8110cb1c g     F .text	00000128 memset
8111fa84 g     F .text	00000058 alt_msgdma_open
81107ba8 g     F .text	00002030 main
811244f8 g     O .bss	00000004 alt_envp
811244d4 g     O .bss	00000004 __malloc_max_total_mem
8111f3a8 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
8111cb3c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
811028e0 g     F .text	000002c0 POWER_Read
81105734 g     F .text	00000158 i2c_read
81118cf0 g     F .text	00000018 __swbuf
81125330 g     O .bss	00000180 xComm8
81104f88 g     F .text	00000034 bDisableIsoDrivers
8110d168 g     F .text	00000008 __sclose
811fa000 g       *ABS*	00000000 __alt_heap_limit
81118994 g     F .text	00000014 fclose
8110b5d4 g     F .text	000001a8 .hidden __truncdfsf2
81111a20 g     F .text	00001688 _dtoa_r
8111f6ac g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8110c1c8 g     F .text	0000080c _malloc_r
81118e64 g     F .text	00000030 __ascii_wctomb
81124464 g     O .rwdata	00000004 alt_errno
8111f200 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81104ad4 g     F .text	000000c8 bSpwcGetLink
81106348 g     F .text	000004e0 POWER_SPI_RW
8111408c g     F .text	000000c4 _fwalk
81124494 g     O .bss	00000004 ECommSpwCh
81120b04 g     F .text	000000c8 putc
811199a0 g     F .text	00000084 .hidden __divsi3
8111379c g     F .text	00000124 _malloc_trim_r
81120e98 g       *ABS*	00000000 __CTOR_END__
8110a79c g     F .text	000003fc .hidden __mulsf3
811244bc g     O .bss	00000004 pnt_memory
81107060 g     F .text	00000038 bSyncSetPer
8110027c g     F .text	0000050c bDdr2EepromTest
81107924 g     F .text	0000006c bSyncIrqFlagClrError
81115c18 g     F .text	000000dc strcmp
81120e98 g       *ABS*	00000000 __DTOR_LIST__
81109f88 g     F .text	00000050 _reg_read
8111ace8 g     F .text	00000088 .hidden __nedf2
81107774 g     F .text	0000006c bSyncCtrCh7OutEnable
8111c9bc g     F .text	00000038 alt_irq_init
8111c56c g     F .text	00000064 alt_release_fd
81107990 g     F .text	0000006c bSyncIrqFlagClrBlank
8111fd14 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8110cfc8 g     F .text	0000006c sprintf
8112222c g     O .rodata	00000100 .hidden __clz_tab
811014ec g     F .text	00000578 bDdr2MemoryWriteTest
811244e0 g     O .bss	00000004 _PathLocale
81107a4c g     F .text	00000050 bSyncIrqFlagBlank
81106218 g     F .text	000000b8 iMsgdmaConstructExtendedMmToMmDescriptor
8112099c g     F .text	00000014 atexit
81103e6c g     F .text	00000038 vFeebCh3HandleIrq
81111618 g     F .text	00000060 _write_r
8110688c g     F .text	0000006c vRstcReleaseDeviceReset
81114320 g     F .text	00000018 setlocale
8111f168 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8112443c g     O .rwdata	00000004 _impure_ptr
811244f0 g     O .bss	00000004 alt_argc
811130a8 g     F .text	0000021c __sflush_r
8111fff8 g     F .text	00000060 _do_dtors
8111430c g     F .text	00000008 __locale_cjk_lang
81102cd0 g     F .text	00000784 sense_log
8112448c g     O .bss	00000004 ESdmaBufferSide
8110b938 g     F .text	00000004 _fseek_r
8110ccc0 g     F .text	000001d4 __srefill_r
81104fbc g     F .text	00000034 bEnableLvdsBoard
81105024 g     F .text	000000b8 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
811072e0 g     F .text	00000070 bSyncCtrExtnIrq
81115108 g     F .text	00000064 __ulp
811136d8 g     F .text	00000018 __fp_unlock_all
81109bd8 g     F .text	00000360 vTestLeds
811072a8 g     F .text	00000038 bSyncErrInj
81124450 g     O .rwdata	00000008 alt_fs_list
81124630 g     O .bss	00000400 xSZData
811254b0 g     O .bss	00000180 xComm4
81103454 g     F .text	000000a8 bSdmaInitM1Dma
811078b8 g     F .text	0000006c bSyncIrqEnableBlank
811043cc g     F .text	00000050 bFeebCh8IrqFlagBufferEmpty
81114338 g     F .text	0000000c localeconv
81103dfc g     F .text	00000038 vFeebCh1HandleIrq
81103f4c g     F .text	00000038 vFeebCh7HandleIrq
81120294 g     F .text	00000050 alt_ic_isr_register
8110bee0 g     F .text	00000034 fwrite
81124480 g       *ABS*	00000000 _edata
8111d638 g     F .text	00000060 altera_avalon_uart_read_fd
81125730 g       *ABS*	00000000 _end
81101434 g     F .text	000000b8 bDdr2SwitchMemory
811189a8 g     F .text	00000164 __fputwc
8111d014 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
8112036c g     F .text	0000008c alt_ic_irq_disable
811035a4 g     F .text	00000428 bSdmaDmaM1Transfer
8110d090 g     F .text	0000007c __swrite
81124444 g     O .rwdata	00000004 __malloc_trim_threshold
81114300 g     F .text	0000000c __locale_msgcharset
8110630c g     F .text	0000003c iMsgdmaExtendedDescriptorSyncTransfer
811209b0 g     F .text	00000038 exit
811079fc g     F .text	00000050 bSyncIrqFlagError
81114150 g     F .text	000000c4 _fwalk_reent
8111f540 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8110acbc g     F .text	000000f0 .hidden __floatunsisf
81114f0c g     F .text	000001fc __mdiff
8110441c g     F .text	00000178 vFeebInitIrq
81119a24 g     F .text	00000074 .hidden __modsi3
8110720c g     F .text	00000034 uliSyncGetPer
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
811136b4 g     F .text	00000004 __sfp_lock_release
81104660 g     F .text	000000a4 bFeebGetIrqControl
81105904 g     F .text	00000070 bSetPainelLeds
8111ece0 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
81101a64 g     F .text	00000508 bDdr2MemoryReadTest
8110784c g     F .text	0000006c bSyncIrqEnableError
811041ec g     F .text	00000050 bFeebCh2IrqFlagBufferEmpty
811071d8 g     F .text	00000034 uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8111ebc0 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
8111dabc g     F .text	00000054 altera_avalon_uart_close
8110b7e0 g     F .text	000000f4 _fopen_r
81120e64 g     F .text	00000034 _exit
8111fd8c g     F .text	0000012c alt_alarm_start
81124490 g     O .bss	00000004 ESdmaChBufferId
8110c00c g     F .text	000001bc __smakebuf_r
8110428c g     F .text	00000050 bFeebCh4IrqFlagBufferEmpty
81124478 g     O .rwdata	00000008 alt_msgdma_list
81115cf4 g     F .text	00000098 strlen
81106b00 g     F .text	000000ac uc_spi_get_byte
8111c2e0 g     F .text	00000154 open
8111ad70 g     F .text	000000dc .hidden __gedf2
811208a0 g     F .text	0000003c alt_putchar
8112444c g     O .rwdata	00000004 __wctomb
81117294 g     F .text	00000018 __sprint_r
81104704 g     F .text	00000080 bFeebGetIrqFlags
81124488 g     O .bss	00000004 pxDmaM2Dev
81124468 g     O .rwdata	00000004 alt_priority_mask
81104ff0 g     F .text	00000034 bDisableLvdsBoard
81106a44 g     F .text	000000bc v_spi_send_byte
81106d58 g     F .text	000000c8 bSSDisplayConfig
811202e4 g     F .text	00000088 alt_ic_irq_enable
81111540 g     F .text	0000001c __vfprintf_internal
81107558 g     F .text	0000006c bSyncCtrCh2OutEnable
8111db4c g     F .text	000001dc altera_avalon_uart_read
81118e94 g     F .text	0000005c _wctomb_r
81104034 g     F .text	0000003c vFeebCh3IrqFlagClrBufferEmpty
8111af40 g     F .text	000008fc .hidden __subdf3
81107240 g     F .text	00000034 uliSyncGetOst
811040e8 g     F .text	0000003c vFeebCh6IrqFlagClrBufferEmpty
81114940 g     F .text	000000b0 __lo0bits
81124470 g     O .rwdata	00000008 alt_alarm_list
8111ff98 g     F .text	00000060 _do_ctors
81118da4 g     F .text	000000c0 wcrtomb
8111bba4 g     F .text	000000d0 close
81107274 g     F .text	00000034 uliSyncGetGeneral
81118b30 g     F .text	00000080 fputwc
811136b8 g     F .text	00000004 __sinit_lock_acquire
811146b4 g     F .text	00000120 __multadd
81104124 g     F .text	0000003c vFeebCh7IrqFlagClrBufferEmpty
81106f2c g     F .text	00000044 ucSyncStatusState
8111468c g     F .text	00000028 _Bfree
811071a4 g     F .text	00000034 uliSyncGetMbt



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a044b4 	movhi	r2,33042
81100140:	10958c04 	addi	r2,r2,22064
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a044b4 	movhi	r2,33042
81100158:	10958c04 	addi	r2,r2,22064
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	0001883a 	nop
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a03517 	ldw	r2,-32556(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a03517 	ldw	r2,-32556(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100244:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110024c:	06a044b4 	movhi	gp,33042
    ori gp, gp, %lo(_gp)
81100250:	d6b10c14 	ori	gp,gp,50224
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
81100254:	00a044b4 	movhi	r2,33042
    ori r2, r2, %lo(__bss_start)
81100258:	10912014 	ori	r2,r2,17536

    movhi r3, %hi(__bss_end)
8110025c:	00e044b4 	movhi	r3,33042
    ori r3, r3, %lo(__bss_end)
81100260:	18d5cc14 	ori	r3,r3,22320

    beq r2, r3, 1f
81100264:	10c00326 	beq	r2,r3,81100274 <_start+0x30>

0:
    stw zero, (r2)
81100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100270:	10fffd36 	bltu	r2,r3,81100268 <__reset+0xfb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100274:	111c11c0 	call	8111c11c <alt_main>

81100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100278:	003fff06 	br	81100278 <__reset+0xfb0e0278>

8110027c <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
8110027c:	defff604 	addi	sp,sp,-40
81100280:	dfc00915 	stw	ra,36(sp)
81100284:	df000815 	stw	fp,32(sp)
81100288:	df000804 	addi	fp,sp,32
8110028c:	2005883a 	mov	r2,r4
81100290:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
81100294:	00e044b4 	movhi	r3,33042
81100298:	18d14c04 	addi	r3,r3,17712
8110029c:	00a044b4 	movhi	r2,33042
811002a0:	1083a604 	addi	r2,r2,3736
811002a4:	1009883a 	mov	r4,r2
811002a8:	00800884 	movi	r2,34
811002ac:	100d883a 	mov	r6,r2
811002b0:	200b883a 	mov	r5,r4
811002b4:	1809883a 	mov	r4,r3
811002b8:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
811002bc:	d0a02717 	ldw	r2,-32612(gp)
811002c0:	016044b4 	movhi	r5,33042
811002c4:	29514c04 	addi	r5,r5,17712
811002c8:	1009883a 	mov	r4,r2
811002cc:	110b9140 	call	8110b914 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002d0:	00bfe804 	movi	r2,-96
811002d4:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
811002d8:	00800044 	movi	r2,1
811002dc:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
811002e0:	e0bfff03 	ldbu	r2,-4(fp)
811002e4:	10c00060 	cmpeqi	r3,r2,1
811002e8:	1800031e 	bne	r3,zero,811002f8 <bDdr2EepromTest+0x7c>
811002ec:	108000a0 	cmpeqi	r2,r2,2
811002f0:	1000081e 	bne	r2,zero,81100314 <bDdr2EepromTest+0x98>
811002f4:	00000e06 	br	81100330 <bDdr2EepromTest+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811002f8:	00a00034 	movhi	r2,32768
811002fc:	10827c04 	addi	r2,r2,2544
81100300:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100304:	00a00034 	movhi	r2,32768
81100308:	10828004 	addi	r2,r2,2560
8110030c:	e0bffb15 	stw	r2,-20(fp)
		break;
81100310:	00001906 	br	81100378 <bDdr2EepromTest+0xfc>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100314:	00a00034 	movhi	r2,32768
81100318:	10825804 	addi	r2,r2,2400
8110031c:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100320:	00a00034 	movhi	r2,32768
81100324:	10825c04 	addi	r2,r2,2416
81100328:	e0bffb15 	stw	r2,-20(fp)
		break;
8110032c:	00001206 	br	81100378 <bDdr2EepromTest+0xfc>
	default:
		bSuccess = FALSE;
81100330:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81100334:	00e044b4 	movhi	r3,33042
81100338:	18d14c04 	addi	r3,r3,17712
8110033c:	00a044b4 	movhi	r2,33042
81100340:	1083af04 	addi	r2,r2,3772
81100344:	1009883a 	mov	r4,r2
81100348:	00800bc4 	movi	r2,47
8110034c:	100d883a 	mov	r6,r2
81100350:	200b883a 	mov	r5,r4
81100354:	1809883a 	mov	r4,r3
81100358:	110c9d40 	call	8110c9d4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8110035c:	d0a02717 	ldw	r2,-32612(gp)
81100360:	016044b4 	movhi	r5,33042
81100364:	29514c04 	addi	r5,r5,17712
81100368:	1009883a 	mov	r4,r2
8110036c:	110b9140 	call	8110b914 <fprintf>
		;
#endif
		return bSuccess;
81100370:	e0bff917 	ldw	r2,-28(fp)
81100374:	0000ff06 	br	81100774 <bDdr2EepromTest+0x4f8>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
81100378:	00e044b4 	movhi	r3,33042
8110037c:	18d14c04 	addi	r3,r3,17712
81100380:	00a044b4 	movhi	r2,33042
81100384:	1083bb04 	addi	r2,r2,3820
81100388:	1009883a 	mov	r4,r2
8110038c:	008005c4 	movi	r2,23
81100390:	100d883a 	mov	r6,r2
81100394:	200b883a 	mov	r5,r4
81100398:	1809883a 	mov	r4,r3
8110039c:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
811003a0:	d0a02717 	ldw	r2,-32612(gp)
811003a4:	016044b4 	movhi	r5,33042
811003a8:	29514c04 	addi	r5,r5,17712
811003ac:	1009883a 	mov	r4,r2
811003b0:	110b9140 	call	8110b914 <fprintf>
#endif
	usleep(20 * 1000);
811003b4:	01138804 	movi	r4,20000
811003b8:	111c8240 	call	8111c824 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811003bc:	e03ffc15 	stw	zero,-16(fp)
811003c0:	00003306 	br	81100490 <bDdr2EepromTest+0x214>
		ucControlAddr = iI;
811003c4:	e0bffc17 	ldw	r2,-16(fp)
811003c8:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811003cc:	e0bffd03 	ldbu	r2,-12(fp)
811003d0:	10c03fcc 	andi	r3,r2,255
811003d4:	18c0201c 	xori	r3,r3,128
811003d8:	18ffe004 	addi	r3,r3,-128
811003dc:	e13ffd43 	ldbu	r4,-11(fp)
811003e0:	e0bffe04 	addi	r2,fp,-8
811003e4:	d8800015 	stw	r2,0(sp)
811003e8:	200f883a 	mov	r7,r4
811003ec:	180d883a 	mov	r6,r3
811003f0:	e17ffb17 	ldw	r5,-20(fp)
811003f4:	e13ffa17 	ldw	r4,-24(fp)
811003f8:	11052a80 	call	811052a8 <I2C_Read>
811003fc:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
81100400:	e0bff917 	ldw	r2,-28(fp)
81100404:	10001026 	beq	r2,zero,81100448 <bDdr2EepromTest+0x1cc>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
81100408:	e0bffd43 	ldbu	r2,-11(fp)
8110040c:	e0fffe03 	ldbu	r3,-8(fp)
81100410:	18c03fcc 	andi	r3,r3,255
81100414:	180f883a 	mov	r7,r3
81100418:	100d883a 	mov	r6,r2
8110041c:	016044b4 	movhi	r5,33042
81100420:	2943c104 	addi	r5,r5,3844
81100424:	012044b4 	movhi	r4,33042
81100428:	21114c04 	addi	r4,r4,17712
8110042c:	110cfc80 	call	8110cfc8 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
81100430:	d0a02717 	ldw	r2,-32612(gp)
81100434:	016044b4 	movhi	r5,33042
81100438:	29514c04 	addi	r5,r5,17712
8110043c:	1009883a 	mov	r4,r2
81100440:	110b9140 	call	8110b914 <fprintf>
81100444:	00000f06 	br	81100484 <bDdr2EepromTest+0x208>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
81100448:	00e044b4 	movhi	r3,33042
8110044c:	18d14c04 	addi	r3,r3,17712
81100450:	00a044b4 	movhi	r2,33042
81100454:	1083c604 	addi	r2,r2,3864
81100458:	1009883a 	mov	r4,r2
8110045c:	008005c4 	movi	r2,23
81100460:	100d883a 	mov	r6,r2
81100464:	200b883a 	mov	r5,r4
81100468:	1809883a 	mov	r4,r3
8110046c:	110c9d40 	call	8110c9d4 <memcpy>
			debug(fp, cDebugBuffer);
81100470:	d0a02717 	ldw	r2,-32612(gp)
81100474:	016044b4 	movhi	r5,33042
81100478:	29514c04 	addi	r5,r5,17712
8110047c:	1009883a 	mov	r4,r2
81100480:	110b9140 	call	8110b914 <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100484:	e0bffc17 	ldw	r2,-16(fp)
81100488:	10800044 	addi	r2,r2,1
8110048c:	e0bffc15 	stw	r2,-16(fp)
81100490:	e0bffc17 	ldw	r2,-16(fp)
81100494:	10804008 	cmpgei	r2,r2,256
81100498:	1000021e 	bne	r2,zero,811004a4 <bDdr2EepromTest+0x228>
8110049c:	e0bff917 	ldw	r2,-28(fp)
811004a0:	103fc81e 	bne	r2,zero,811003c4 <__reset+0xfb0e03c4>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
811004a4:	e0bff917 	ldw	r2,-28(fp)
811004a8:	10001026 	beq	r2,zero,811004ec <bDdr2EepromTest+0x270>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
811004ac:	00e044b4 	movhi	r3,33042
811004b0:	18d14c04 	addi	r3,r3,17712
811004b4:	00a044b4 	movhi	r2,33042
811004b8:	1083cc04 	addi	r2,r2,3888
811004bc:	1009883a 	mov	r4,r2
811004c0:	00800884 	movi	r2,34
811004c4:	100d883a 	mov	r6,r2
811004c8:	200b883a 	mov	r5,r4
811004cc:	1809883a 	mov	r4,r3
811004d0:	110c9d40 	call	8110c9d4 <memcpy>
		debug(fp, cDebugBuffer);
811004d4:	d0a02717 	ldw	r2,-32612(gp)
811004d8:	016044b4 	movhi	r5,33042
811004dc:	29514c04 	addi	r5,r5,17712
811004e0:	1009883a 	mov	r4,r2
811004e4:	110b9140 	call	8110b914 <fprintf>
811004e8:	00000f06 	br	81100528 <bDdr2EepromTest+0x2ac>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
811004ec:	00e044b4 	movhi	r3,33042
811004f0:	18d14c04 	addi	r3,r3,17712
811004f4:	00a044b4 	movhi	r2,33042
811004f8:	1083d504 	addi	r2,r2,3924
811004fc:	1009883a 	mov	r4,r2
81100500:	008007c4 	movi	r2,31
81100504:	100d883a 	mov	r6,r2
81100508:	200b883a 	mov	r5,r4
8110050c:	1809883a 	mov	r4,r3
81100510:	110c9d40 	call	8110c9d4 <memcpy>
		debug(fp, cDebugBuffer);
81100514:	d0a02717 	ldw	r2,-32612(gp)
81100518:	016044b4 	movhi	r5,33042
8110051c:	29514c04 	addi	r5,r5,17712
81100520:	1009883a 	mov	r4,r2
81100524:	110b9140 	call	8110b914 <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
81100528:	00e044b4 	movhi	r3,33042
8110052c:	18d14c04 	addi	r3,r3,17712
81100530:	00a044b4 	movhi	r2,33042
81100534:	1083dd04 	addi	r2,r2,3956
81100538:	1009883a 	mov	r4,r2
8110053c:	00800604 	movi	r2,24
81100540:	100d883a 	mov	r6,r2
81100544:	200b883a 	mov	r5,r4
81100548:	1809883a 	mov	r4,r3
8110054c:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
81100550:	d0a02717 	ldw	r2,-32612(gp)
81100554:	016044b4 	movhi	r5,33042
81100558:	29514c04 	addi	r5,r5,17712
8110055c:	1009883a 	mov	r4,r2
81100560:	110b9140 	call	8110b914 <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
81100564:	00800484 	movi	r2,18
81100568:	e0bffd85 	stb	r2,-10(fp)
8110056c:	00bfe004 	movi	r2,-128
81100570:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100574:	01138804 	movi	r4,20000
81100578:	111c8240 	call	8111c824 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110057c:	e0bffd03 	ldbu	r2,-12(fp)
81100580:	10c03fcc 	andi	r3,r2,255
81100584:	18c0201c 	xori	r3,r3,128
81100588:	18ffe004 	addi	r3,r3,-128
8110058c:	e13ffdc3 	ldbu	r4,-9(fp)
81100590:	e0bffd83 	ldbu	r2,-10(fp)
81100594:	d8800015 	stw	r2,0(sp)
81100598:	200f883a 	mov	r7,r4
8110059c:	180d883a 	mov	r6,r3
811005a0:	e17ffb17 	ldw	r5,-20(fp)
811005a4:	e13ffa17 	ldw	r4,-24(fp)
811005a8:	11051d00 	call	811051d0 <I2C_Write>
811005ac:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
811005b0:	e0bff917 	ldw	r2,-28(fp)
811005b4:	1000101e 	bne	r2,zero,811005f8 <bDdr2EepromTest+0x37c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
811005b8:	00e044b4 	movhi	r3,33042
811005bc:	18d14c04 	addi	r3,r3,17712
811005c0:	00a044b4 	movhi	r2,33042
811005c4:	1083e304 	addi	r2,r2,3980
811005c8:	1009883a 	mov	r4,r2
811005cc:	00800604 	movi	r2,24
811005d0:	100d883a 	mov	r6,r2
811005d4:	200b883a 	mov	r5,r4
811005d8:	1809883a 	mov	r4,r3
811005dc:	110c9d40 	call	8110c9d4 <memcpy>
		debug(fp, cDebugBuffer);
811005e0:	d0a02717 	ldw	r2,-32612(gp)
811005e4:	016044b4 	movhi	r5,33042
811005e8:	29514c04 	addi	r5,r5,17712
811005ec:	1009883a 	mov	r4,r2
811005f0:	110b9140 	call	8110b914 <fprintf>
811005f4:	00003306 	br	811006c4 <bDdr2EepromTest+0x448>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811005f8:	e0bffd03 	ldbu	r2,-12(fp)
811005fc:	10c03fcc 	andi	r3,r2,255
81100600:	18c0201c 	xori	r3,r3,128
81100604:	18ffe004 	addi	r3,r3,-128
81100608:	e13ffdc3 	ldbu	r4,-9(fp)
8110060c:	e0bffe44 	addi	r2,fp,-7
81100610:	d8800015 	stw	r2,0(sp)
81100614:	200f883a 	mov	r7,r4
81100618:	180d883a 	mov	r6,r3
8110061c:	e17ffb17 	ldw	r5,-20(fp)
81100620:	e13ffa17 	ldw	r4,-24(fp)
81100624:	11052a80 	call	811052a8 <I2C_Read>
81100628:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
8110062c:	e0bff917 	ldw	r2,-28(fp)
81100630:	1000101e 	bne	r2,zero,81100674 <bDdr2EepromTest+0x3f8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
81100634:	00e044b4 	movhi	r3,33042
81100638:	18d14c04 	addi	r3,r3,17712
8110063c:	00a044b4 	movhi	r2,33042
81100640:	1083e904 	addi	r2,r2,4004
81100644:	1009883a 	mov	r4,r2
81100648:	00800884 	movi	r2,34
8110064c:	100d883a 	mov	r6,r2
81100650:	200b883a 	mov	r5,r4
81100654:	1809883a 	mov	r4,r3
81100658:	110c9d40 	call	8110c9d4 <memcpy>
			debug(fp, cDebugBuffer);
8110065c:	d0a02717 	ldw	r2,-32612(gp)
81100660:	016044b4 	movhi	r5,33042
81100664:	29514c04 	addi	r5,r5,17712
81100668:	1009883a 	mov	r4,r2
8110066c:	110b9140 	call	8110b914 <fprintf>
81100670:	00001406 	br	811006c4 <bDdr2EepromTest+0x448>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100674:	e0bffe43 	ldbu	r2,-7(fp)
81100678:	10c03fcc 	andi	r3,r2,255
8110067c:	e0bffd83 	ldbu	r2,-10(fp)
81100680:	18801026 	beq	r3,r2,811006c4 <bDdr2EepromTest+0x448>
				bSuccess = FALSE;
81100684:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100688:	e0bffe43 	ldbu	r2,-7(fp)
8110068c:	10803fcc 	andi	r2,r2,255
81100690:	e0fffd83 	ldbu	r3,-10(fp)
81100694:	180f883a 	mov	r7,r3
81100698:	100d883a 	mov	r6,r2
8110069c:	016044b4 	movhi	r5,33042
811006a0:	2943f204 	addi	r5,r5,4040
811006a4:	012044b4 	movhi	r4,33042
811006a8:	21114c04 	addi	r4,r4,17712
811006ac:	110cfc80 	call	8110cfc8 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
811006b0:	d0a02717 	ldw	r2,-32612(gp)
811006b4:	016044b4 	movhi	r5,33042
811006b8:	29514c04 	addi	r5,r5,17712
811006bc:	1009883a 	mov	r4,r2
811006c0:	110b9140 	call	8110b914 <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
811006c4:	e0bff917 	ldw	r2,-28(fp)
811006c8:	10001026 	beq	r2,zero,8110070c <bDdr2EepromTest+0x490>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
811006cc:	00e044b4 	movhi	r3,33042
811006d0:	18d14c04 	addi	r3,r3,17712
811006d4:	00a044b4 	movhi	r2,33042
811006d8:	10840104 	addi	r2,r2,4100
811006dc:	1009883a 	mov	r4,r2
811006e0:	008008c4 	movi	r2,35
811006e4:	100d883a 	mov	r6,r2
811006e8:	200b883a 	mov	r5,r4
811006ec:	1809883a 	mov	r4,r3
811006f0:	110c9d40 	call	8110c9d4 <memcpy>
		debug(fp, cDebugBuffer);
811006f4:	d0a02717 	ldw	r2,-32612(gp)
811006f8:	016044b4 	movhi	r5,33042
811006fc:	29514c04 	addi	r5,r5,17712
81100700:	1009883a 	mov	r4,r2
81100704:	110b9140 	call	8110b914 <fprintf>
81100708:	00000f06 	br	81100748 <bDdr2EepromTest+0x4cc>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
8110070c:	00e044b4 	movhi	r3,33042
81100710:	18d14c04 	addi	r3,r3,17712
81100714:	00a044b4 	movhi	r2,33042
81100718:	10840a04 	addi	r2,r2,4136
8110071c:	1009883a 	mov	r4,r2
81100720:	00800804 	movi	r2,32
81100724:	100d883a 	mov	r6,r2
81100728:	200b883a 	mov	r5,r4
8110072c:	1809883a 	mov	r4,r3
81100730:	110c9d40 	call	8110c9d4 <memcpy>
		debug(fp, cDebugBuffer);
81100734:	d0a02717 	ldw	r2,-32612(gp)
81100738:	016044b4 	movhi	r5,33042
8110073c:	29514c04 	addi	r5,r5,17712
81100740:	1009883a 	mov	r4,r2
81100744:	110b9140 	call	8110b914 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81100748:	00a044b4 	movhi	r2,33042
8110074c:	10914c04 	addi	r2,r2,17712
81100750:	00c00284 	movi	r3,10
81100754:	10c00005 	stb	r3,0(r2)
81100758:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
8110075c:	d0a02717 	ldw	r2,-32612(gp)
81100760:	016044b4 	movhi	r5,33042
81100764:	29514c04 	addi	r5,r5,17712
81100768:	1009883a 	mov	r4,r2
8110076c:	110b9140 	call	8110b914 <fprintf>
#endif

	return bSuccess;
81100770:	e0bff917 	ldw	r2,-28(fp)
}
81100774:	e037883a 	mov	sp,fp
81100778:	dfc00117 	ldw	ra,4(sp)
8110077c:	df000017 	ldw	fp,0(sp)
81100780:	dec00204 	addi	sp,sp,8
81100784:	f800283a 	ret

81100788 <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
81100788:	deffb704 	addi	sp,sp,-292
8110078c:	dfc04815 	stw	ra,288(sp)
81100790:	df004715 	stw	fp,284(sp)
81100794:	df004704 	addi	fp,sp,284
81100798:	2005883a 	mov	r2,r4
8110079c:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
811007a0:	00e044b4 	movhi	r3,33042
811007a4:	18d14c04 	addi	r3,r3,17712
811007a8:	00a044b4 	movhi	r2,33042
811007ac:	10841204 	addi	r2,r2,4168
811007b0:	1009883a 	mov	r4,r2
811007b4:	00800884 	movi	r2,34
811007b8:	100d883a 	mov	r6,r2
811007bc:	200b883a 	mov	r5,r4
811007c0:	1809883a 	mov	r4,r3
811007c4:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
811007c8:	d0a02717 	ldw	r2,-32612(gp)
811007cc:	016044b4 	movhi	r5,33042
811007d0:	29514c04 	addi	r5,r5,17712
811007d4:	1009883a 	mov	r4,r2
811007d8:	110b9140 	call	8110b914 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811007dc:	00bfe804 	movi	r2,-96
811007e0:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
811007e4:	00800044 	movi	r2,1
811007e8:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
811007ec:	e0bfff03 	ldbu	r2,-4(fp)
811007f0:	10c00060 	cmpeqi	r3,r2,1
811007f4:	1800031e 	bne	r3,zero,81100804 <bDdr2EepromDump+0x7c>
811007f8:	108000a0 	cmpeqi	r2,r2,2
811007fc:	1000081e 	bne	r2,zero,81100820 <bDdr2EepromDump+0x98>
81100800:	00000e06 	br	8110083c <bDdr2EepromDump+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81100804:	00a00034 	movhi	r2,32768
81100808:	10827c04 	addi	r2,r2,2544
8110080c:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100810:	00a00034 	movhi	r2,32768
81100814:	10828004 	addi	r2,r2,2560
81100818:	e0bfbb15 	stw	r2,-276(fp)
		break;
8110081c:	00001906 	br	81100884 <bDdr2EepromDump+0xfc>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100820:	00a00034 	movhi	r2,32768
81100824:	10825804 	addi	r2,r2,2400
81100828:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
8110082c:	00a00034 	movhi	r2,32768
81100830:	10825c04 	addi	r2,r2,2416
81100834:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100838:	00001206 	br	81100884 <bDdr2EepromDump+0xfc>
	default:
		bSuccess = FALSE;
8110083c:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81100840:	00e044b4 	movhi	r3,33042
81100844:	18d14c04 	addi	r3,r3,17712
81100848:	00a044b4 	movhi	r2,33042
8110084c:	10841b04 	addi	r2,r2,4204
81100850:	1009883a 	mov	r4,r2
81100854:	00800bc4 	movi	r2,47
81100858:	100d883a 	mov	r6,r2
8110085c:	200b883a 	mov	r5,r4
81100860:	1809883a 	mov	r4,r3
81100864:	110c9d40 	call	8110c9d4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100868:	d0a02717 	ldw	r2,-32612(gp)
8110086c:	016044b4 	movhi	r5,33042
81100870:	29514c04 	addi	r5,r5,17712
81100874:	1009883a 	mov	r4,r2
81100878:	110b9140 	call	8110b914 <fprintf>
		;
#endif
		return bSuccess;
8110087c:	e0bfbe17 	ldw	r2,-264(fp)
81100880:	0002e706 	br	81101420 <bDdr2EepromDump+0xc98>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100884:	e0bfbd03 	ldbu	r2,-268(fp)
81100888:	10c03fcc 	andi	r3,r2,255
8110088c:	18c0201c 	xori	r3,r3,128
81100890:	18ffe004 	addi	r3,r3,-128
81100894:	e13fbf04 	addi	r4,fp,-260
81100898:	00804004 	movi	r2,256
8110089c:	d8800015 	stw	r2,0(sp)
811008a0:	200f883a 	mov	r7,r4
811008a4:	180d883a 	mov	r6,r3
811008a8:	e17fbb17 	ldw	r5,-276(fp)
811008ac:	e13fba17 	ldw	r4,-280(fp)
811008b0:	11053a80 	call	811053a8 <I2C_MultipleRead>
811008b4:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
811008b8:	e0bfbe17 	ldw	r2,-264(fp)
811008bc:	1002be26 	beq	r2,zero,811013b8 <bDdr2EepromDump+0xc30>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811008c0:	e03fbc15 	stw	zero,-272(fp)
811008c4:	0002b606 	br	811013a0 <bDdr2EepromDump+0xc18>
			if (iI == 0) {
811008c8:	e0bfbc17 	ldw	r2,-272(fp)
811008cc:	1000121e 	bne	r2,zero,81100918 <bDdr2EepromDump+0x190>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
811008d0:	e0ffbf04 	addi	r3,fp,-260
811008d4:	e0bfbc17 	ldw	r2,-272(fp)
811008d8:	1885883a 	add	r2,r3,r2
811008dc:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811008e0:	10803fcc 	andi	r2,r2,255
811008e4:	100f883a 	mov	r7,r2
811008e8:	e1bfbc17 	ldw	r6,-272(fp)
811008ec:	016044b4 	movhi	r5,33042
811008f0:	29442704 	addi	r5,r5,4252
811008f4:	012044b4 	movhi	r4,33042
811008f8:	21114c04 	addi	r4,r4,17712
811008fc:	110cfc80 	call	8110cfc8 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
81100900:	d0a02717 	ldw	r2,-32612(gp)
81100904:	016044b4 	movhi	r5,33042
81100908:	29514c04 	addi	r5,r5,17712
8110090c:	1009883a 	mov	r4,r2
81100910:	110b9140 	call	8110b914 <fprintf>
81100914:	00029f06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 1) {
81100918:	e0bfbc17 	ldw	r2,-272(fp)
8110091c:	10800058 	cmpnei	r2,r2,1
81100920:	1000101e 	bne	r2,zero,81100964 <bDdr2EepromDump+0x1dc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100924:	00e044b4 	movhi	r3,33042
81100928:	18d14c04 	addi	r3,r3,17712
8110092c:	00a044b4 	movhi	r2,33042
81100930:	10843304 	addi	r2,r2,4300
81100934:	1009883a 	mov	r4,r2
81100938:	00800c04 	movi	r2,48
8110093c:	100d883a 	mov	r6,r2
81100940:	200b883a 	mov	r5,r4
81100944:	1809883a 	mov	r4,r3
81100948:	110c9d40 	call	8110c9d4 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
8110094c:	d0a02717 	ldw	r2,-32612(gp)
81100950:	016044b4 	movhi	r5,33042
81100954:	29514c04 	addi	r5,r5,17712
81100958:	1009883a 	mov	r4,r2
8110095c:	110b9140 	call	8110b914 <fprintf>
81100960:	00028c06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 2) {
81100964:	e0bfbc17 	ldw	r2,-272(fp)
81100968:	10800098 	cmpnei	r2,r2,2
8110096c:	1000101e 	bne	r2,zero,811009b0 <bDdr2EepromDump+0x228>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
81100970:	00e044b4 	movhi	r3,33042
81100974:	18d14c04 	addi	r3,r3,17712
81100978:	00a044b4 	movhi	r2,33042
8110097c:	10843f04 	addi	r2,r2,4348
81100980:	1009883a 	mov	r4,r2
81100984:	008007c4 	movi	r2,31
81100988:	100d883a 	mov	r6,r2
8110098c:	200b883a 	mov	r5,r4
81100990:	1809883a 	mov	r4,r3
81100994:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81100998:	d0a02717 	ldw	r2,-32612(gp)
8110099c:	016044b4 	movhi	r5,33042
811009a0:	29514c04 	addi	r5,r5,17712
811009a4:	1009883a 	mov	r4,r2
811009a8:	110b9140 	call	8110b914 <fprintf>
811009ac:	00027906 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 3) {
811009b0:	e0bfbc17 	ldw	r2,-272(fp)
811009b4:	108000d8 	cmpnei	r2,r2,3
811009b8:	1000101e 	bne	r2,zero,811009fc <bDdr2EepromDump+0x274>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009bc:	00e044b4 	movhi	r3,33042
811009c0:	18d14c04 	addi	r3,r3,17712
811009c4:	00a044b4 	movhi	r2,33042
811009c8:	10844704 	addi	r2,r2,4380
811009cc:	1009883a 	mov	r4,r2
811009d0:	008009c4 	movi	r2,39
811009d4:	100d883a 	mov	r6,r2
811009d8:	200b883a 	mov	r5,r4
811009dc:	1809883a 	mov	r4,r3
811009e0:	110c9d40 	call	8110c9d4 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
811009e4:	d0a02717 	ldw	r2,-32612(gp)
811009e8:	016044b4 	movhi	r5,33042
811009ec:	29514c04 	addi	r5,r5,17712
811009f0:	1009883a 	mov	r4,r2
811009f4:	110b9140 	call	8110b914 <fprintf>
811009f8:	00026606 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 4) {
811009fc:	e0bfbc17 	ldw	r2,-272(fp)
81100a00:	10800118 	cmpnei	r2,r2,4
81100a04:	1000101e 	bne	r2,zero,81100a48 <bDdr2EepromDump+0x2c0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a08:	00e044b4 	movhi	r3,33042
81100a0c:	18d14c04 	addi	r3,r3,17712
81100a10:	00a044b4 	movhi	r2,33042
81100a14:	10845104 	addi	r2,r2,4420
81100a18:	1009883a 	mov	r4,r2
81100a1c:	00800a84 	movi	r2,42
81100a20:	100d883a 	mov	r6,r2
81100a24:	200b883a 	mov	r5,r4
81100a28:	1809883a 	mov	r4,r3
81100a2c:	110c9d40 	call	8110c9d4 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a30:	d0a02717 	ldw	r2,-32612(gp)
81100a34:	016044b4 	movhi	r5,33042
81100a38:	29514c04 	addi	r5,r5,17712
81100a3c:	1009883a 	mov	r4,r2
81100a40:	110b9140 	call	8110b914 <fprintf>
81100a44:	00025306 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 5) {
81100a48:	e0bfbc17 	ldw	r2,-272(fp)
81100a4c:	10800158 	cmpnei	r2,r2,5
81100a50:	1000101e 	bne	r2,zero,81100a94 <bDdr2EepromDump+0x30c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a54:	00e044b4 	movhi	r3,33042
81100a58:	18d14c04 	addi	r3,r3,17712
81100a5c:	00a044b4 	movhi	r2,33042
81100a60:	10845c04 	addi	r2,r2,4464
81100a64:	1009883a 	mov	r4,r2
81100a68:	00800c04 	movi	r2,48
81100a6c:	100d883a 	mov	r6,r2
81100a70:	200b883a 	mov	r5,r4
81100a74:	1809883a 	mov	r4,r3
81100a78:	110c9d40 	call	8110c9d4 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100a7c:	d0a02717 	ldw	r2,-32612(gp)
81100a80:	016044b4 	movhi	r5,33042
81100a84:	29514c04 	addi	r5,r5,17712
81100a88:	1009883a 	mov	r4,r2
81100a8c:	110b9140 	call	8110b914 <fprintf>
81100a90:	00024006 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 6) {
81100a94:	e0bfbc17 	ldw	r2,-272(fp)
81100a98:	10800198 	cmpnei	r2,r2,6
81100a9c:	1000101e 	bne	r2,zero,81100ae0 <bDdr2EepromDump+0x358>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100aa0:	00e044b4 	movhi	r3,33042
81100aa4:	18d14c04 	addi	r3,r3,17712
81100aa8:	00a044b4 	movhi	r2,33042
81100aac:	10846804 	addi	r2,r2,4512
81100ab0:	1009883a 	mov	r4,r2
81100ab4:	00800544 	movi	r2,21
81100ab8:	100d883a 	mov	r6,r2
81100abc:	200b883a 	mov	r5,r4
81100ac0:	1809883a 	mov	r4,r3
81100ac4:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81100ac8:	d0a02717 	ldw	r2,-32612(gp)
81100acc:	016044b4 	movhi	r5,33042
81100ad0:	29514c04 	addi	r5,r5,17712
81100ad4:	1009883a 	mov	r4,r2
81100ad8:	110b9140 	call	8110b914 <fprintf>
81100adc:	00022d06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 7) {
81100ae0:	e0bfbc17 	ldw	r2,-272(fp)
81100ae4:	108001d8 	cmpnei	r2,r2,7
81100ae8:	1000101e 	bne	r2,zero,81100b2c <bDdr2EepromDump+0x3a4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100aec:	00e044b4 	movhi	r3,33042
81100af0:	18d14c04 	addi	r3,r3,17712
81100af4:	00a044b4 	movhi	r2,33042
81100af8:	10846e04 	addi	r2,r2,4536
81100afc:	1009883a 	mov	r4,r2
81100b00:	00800804 	movi	r2,32
81100b04:	100d883a 	mov	r6,r2
81100b08:	200b883a 	mov	r5,r4
81100b0c:	1809883a 	mov	r4,r3
81100b10:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81100b14:	d0a02717 	ldw	r2,-32612(gp)
81100b18:	016044b4 	movhi	r5,33042
81100b1c:	29514c04 	addi	r5,r5,17712
81100b20:	1009883a 	mov	r4,r2
81100b24:	110b9140 	call	8110b914 <fprintf>
81100b28:	00021a06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 16) {
81100b2c:	e0bfbc17 	ldw	r2,-272(fp)
81100b30:	10800418 	cmpnei	r2,r2,16
81100b34:	1000101e 	bne	r2,zero,81100b78 <bDdr2EepromDump+0x3f0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100b38:	00e044b4 	movhi	r3,33042
81100b3c:	18d14c04 	addi	r3,r3,17712
81100b40:	00a044b4 	movhi	r2,33042
81100b44:	10847604 	addi	r2,r2,4568
81100b48:	1009883a 	mov	r4,r2
81100b4c:	00800d04 	movi	r2,52
81100b50:	100d883a 	mov	r6,r2
81100b54:	200b883a 	mov	r5,r4
81100b58:	1809883a 	mov	r4,r3
81100b5c:	110c9d40 	call	8110c9d4 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100b60:	d0a02717 	ldw	r2,-32612(gp)
81100b64:	016044b4 	movhi	r5,33042
81100b68:	29514c04 	addi	r5,r5,17712
81100b6c:	1009883a 	mov	r4,r2
81100b70:	110b9140 	call	8110b914 <fprintf>
81100b74:	00020706 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 13) {
81100b78:	e0bfbc17 	ldw	r2,-272(fp)
81100b7c:	10800358 	cmpnei	r2,r2,13
81100b80:	1000101e 	bne	r2,zero,81100bc4 <bDdr2EepromDump+0x43c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100b84:	00e044b4 	movhi	r3,33042
81100b88:	18d14c04 	addi	r3,r3,17712
81100b8c:	00a044b4 	movhi	r2,33042
81100b90:	10848304 	addi	r2,r2,4620
81100b94:	1009883a 	mov	r4,r2
81100b98:	008005c4 	movi	r2,23
81100b9c:	100d883a 	mov	r6,r2
81100ba0:	200b883a 	mov	r5,r4
81100ba4:	1809883a 	mov	r4,r3
81100ba8:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81100bac:	d0a02717 	ldw	r2,-32612(gp)
81100bb0:	016044b4 	movhi	r5,33042
81100bb4:	29514c04 	addi	r5,r5,17712
81100bb8:	1009883a 	mov	r4,r2
81100bbc:	110b9140 	call	8110b914 <fprintf>
81100bc0:	0001f406 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 14) {
81100bc4:	e0bfbc17 	ldw	r2,-272(fp)
81100bc8:	10800398 	cmpnei	r2,r2,14
81100bcc:	1000101e 	bne	r2,zero,81100c10 <bDdr2EepromDump+0x488>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100bd0:	00e044b4 	movhi	r3,33042
81100bd4:	18d14c04 	addi	r3,r3,17712
81100bd8:	00a044b4 	movhi	r2,33042
81100bdc:	10848904 	addi	r2,r2,4644
81100be0:	1009883a 	mov	r4,r2
81100be4:	008004c4 	movi	r2,19
81100be8:	100d883a 	mov	r6,r2
81100bec:	200b883a 	mov	r5,r4
81100bf0:	1809883a 	mov	r4,r3
81100bf4:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81100bf8:	d0a02717 	ldw	r2,-32612(gp)
81100bfc:	016044b4 	movhi	r5,33042
81100c00:	29514c04 	addi	r5,r5,17712
81100c04:	1009883a 	mov	r4,r2
81100c08:	110b9140 	call	8110b914 <fprintf>
81100c0c:	0001e106 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 17) {
81100c10:	e0bfbc17 	ldw	r2,-272(fp)
81100c14:	10800458 	cmpnei	r2,r2,17
81100c18:	1000101e 	bne	r2,zero,81100c5c <bDdr2EepromDump+0x4d4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100c1c:	00e044b4 	movhi	r3,33042
81100c20:	18d14c04 	addi	r3,r3,17712
81100c24:	00a044b4 	movhi	r2,33042
81100c28:	10848e04 	addi	r2,r2,4664
81100c2c:	1009883a 	mov	r4,r2
81100c30:	00800684 	movi	r2,26
81100c34:	100d883a 	mov	r6,r2
81100c38:	200b883a 	mov	r5,r4
81100c3c:	1809883a 	mov	r4,r3
81100c40:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81100c44:	d0a02717 	ldw	r2,-32612(gp)
81100c48:	016044b4 	movhi	r5,33042
81100c4c:	29514c04 	addi	r5,r5,17712
81100c50:	1009883a 	mov	r4,r2
81100c54:	110b9140 	call	8110b914 <fprintf>
81100c58:	0001ce06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 18) {
81100c5c:	e0bfbc17 	ldw	r2,-272(fp)
81100c60:	10800498 	cmpnei	r2,r2,18
81100c64:	1000101e 	bne	r2,zero,81100ca8 <bDdr2EepromDump+0x520>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100c68:	00e044b4 	movhi	r3,33042
81100c6c:	18d14c04 	addi	r3,r3,17712
81100c70:	00a044b4 	movhi	r2,33042
81100c74:	10849504 	addi	r2,r2,4692
81100c78:	1009883a 	mov	r4,r2
81100c7c:	00800d44 	movi	r2,53
81100c80:	100d883a 	mov	r6,r2
81100c84:	200b883a 	mov	r5,r4
81100c88:	1809883a 	mov	r4,r3
81100c8c:	110c9d40 	call	8110c9d4 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100c90:	d0a02717 	ldw	r2,-32612(gp)
81100c94:	016044b4 	movhi	r5,33042
81100c98:	29514c04 	addi	r5,r5,17712
81100c9c:	1009883a 	mov	r4,r2
81100ca0:	110b9140 	call	8110b914 <fprintf>
81100ca4:	0001bb06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 20) {
81100ca8:	e0bfbc17 	ldw	r2,-272(fp)
81100cac:	10800518 	cmpnei	r2,r2,20
81100cb0:	1000101e 	bne	r2,zero,81100cf4 <bDdr2EepromDump+0x56c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100cb4:	00e044b4 	movhi	r3,33042
81100cb8:	18d14c04 	addi	r3,r3,17712
81100cbc:	00a044b4 	movhi	r2,33042
81100cc0:	1084a304 	addi	r2,r2,4748
81100cc4:	1009883a 	mov	r4,r2
81100cc8:	00801204 	movi	r2,72
81100ccc:	100d883a 	mov	r6,r2
81100cd0:	200b883a 	mov	r5,r4
81100cd4:	1809883a 	mov	r4,r3
81100cd8:	110c9d40 	call	8110c9d4 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100cdc:	d0a02717 	ldw	r2,-32612(gp)
81100ce0:	016044b4 	movhi	r5,33042
81100ce4:	29514c04 	addi	r5,r5,17712
81100ce8:	1009883a 	mov	r4,r2
81100cec:	110b9140 	call	8110b914 <fprintf>
81100cf0:	0001a806 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 22) {
81100cf4:	e0bfbc17 	ldw	r2,-272(fp)
81100cf8:	10800598 	cmpnei	r2,r2,22
81100cfc:	1000101e 	bne	r2,zero,81100d40 <bDdr2EepromDump+0x5b8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100d00:	00e044b4 	movhi	r3,33042
81100d04:	18d14c04 	addi	r3,r3,17712
81100d08:	00a044b4 	movhi	r2,33042
81100d0c:	1084b504 	addi	r2,r2,4820
81100d10:	1009883a 	mov	r4,r2
81100d14:	00800784 	movi	r2,30
81100d18:	100d883a 	mov	r6,r2
81100d1c:	200b883a 	mov	r5,r4
81100d20:	1809883a 	mov	r4,r3
81100d24:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81100d28:	d0a02717 	ldw	r2,-32612(gp)
81100d2c:	016044b4 	movhi	r5,33042
81100d30:	29514c04 	addi	r5,r5,17712
81100d34:	1009883a 	mov	r4,r2
81100d38:	110b9140 	call	8110b914 <fprintf>
81100d3c:	00019506 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 27) {
81100d40:	e0bfbc17 	ldw	r2,-272(fp)
81100d44:	108006d8 	cmpnei	r2,r2,27
81100d48:	1000101e 	bne	r2,zero,81100d8c <bDdr2EepromDump+0x604>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d4c:	00e044b4 	movhi	r3,33042
81100d50:	18d14c04 	addi	r3,r3,17712
81100d54:	00a044b4 	movhi	r2,33042
81100d58:	1084bd04 	addi	r2,r2,4852
81100d5c:	1009883a 	mov	r4,r2
81100d60:	00800a04 	movi	r2,40
81100d64:	100d883a 	mov	r6,r2
81100d68:	200b883a 	mov	r5,r4
81100d6c:	1809883a 	mov	r4,r3
81100d70:	110c9d40 	call	8110c9d4 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100d74:	d0a02717 	ldw	r2,-32612(gp)
81100d78:	016044b4 	movhi	r5,33042
81100d7c:	29514c04 	addi	r5,r5,17712
81100d80:	1009883a 	mov	r4,r2
81100d84:	110b9140 	call	8110b914 <fprintf>
81100d88:	00018206 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 28) {
81100d8c:	e0bfbc17 	ldw	r2,-272(fp)
81100d90:	10800718 	cmpnei	r2,r2,28
81100d94:	1000101e 	bne	r2,zero,81100dd8 <bDdr2EepromDump+0x650>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d98:	00e044b4 	movhi	r3,33042
81100d9c:	18d14c04 	addi	r3,r3,17712
81100da0:	00a044b4 	movhi	r2,33042
81100da4:	1084c704 	addi	r2,r2,4892
81100da8:	1009883a 	mov	r4,r2
81100dac:	00800cc4 	movi	r2,51
81100db0:	100d883a 	mov	r6,r2
81100db4:	200b883a 	mov	r5,r4
81100db8:	1809883a 	mov	r4,r3
81100dbc:	110c9d40 	call	8110c9d4 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100dc0:	d0a02717 	ldw	r2,-32612(gp)
81100dc4:	016044b4 	movhi	r5,33042
81100dc8:	29514c04 	addi	r5,r5,17712
81100dcc:	1009883a 	mov	r4,r2
81100dd0:	110b9140 	call	8110b914 <fprintf>
81100dd4:	00016f06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 29) {
81100dd8:	e0bfbc17 	ldw	r2,-272(fp)
81100ddc:	10800758 	cmpnei	r2,r2,29
81100de0:	1000101e 	bne	r2,zero,81100e24 <bDdr2EepromDump+0x69c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100de4:	00e044b4 	movhi	r3,33042
81100de8:	18d14c04 	addi	r3,r3,17712
81100dec:	00a044b4 	movhi	r2,33042
81100df0:	1084d404 	addi	r2,r2,4944
81100df4:	1009883a 	mov	r4,r2
81100df8:	008009c4 	movi	r2,39
81100dfc:	100d883a 	mov	r6,r2
81100e00:	200b883a 	mov	r5,r4
81100e04:	1809883a 	mov	r4,r3
81100e08:	110c9d40 	call	8110c9d4 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e0c:	d0a02717 	ldw	r2,-32612(gp)
81100e10:	016044b4 	movhi	r5,33042
81100e14:	29514c04 	addi	r5,r5,17712
81100e18:	1009883a 	mov	r4,r2
81100e1c:	110b9140 	call	8110b914 <fprintf>
81100e20:	00015c06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 30) {
81100e24:	e0bfbc17 	ldw	r2,-272(fp)
81100e28:	10800798 	cmpnei	r2,r2,30
81100e2c:	1000101e 	bne	r2,zero,81100e70 <bDdr2EepromDump+0x6e8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e30:	00e044b4 	movhi	r3,33042
81100e34:	18d14c04 	addi	r3,r3,17712
81100e38:	00a044b4 	movhi	r2,33042
81100e3c:	1084de04 	addi	r2,r2,4984
81100e40:	1009883a 	mov	r4,r2
81100e44:	00800b04 	movi	r2,44
81100e48:	100d883a 	mov	r6,r2
81100e4c:	200b883a 	mov	r5,r4
81100e50:	1809883a 	mov	r4,r3
81100e54:	110c9d40 	call	8110c9d4 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100e58:	d0a02717 	ldw	r2,-32612(gp)
81100e5c:	016044b4 	movhi	r5,33042
81100e60:	29514c04 	addi	r5,r5,17712
81100e64:	1009883a 	mov	r4,r2
81100e68:	110b9140 	call	8110b914 <fprintf>
81100e6c:	00014906 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 31) {
81100e70:	e0bfbc17 	ldw	r2,-272(fp)
81100e74:	108007d8 	cmpnei	r2,r2,31
81100e78:	1000101e 	bne	r2,zero,81100ebc <bDdr2EepromDump+0x734>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e7c:	00e044b4 	movhi	r3,33042
81100e80:	18d14c04 	addi	r3,r3,17712
81100e84:	00a044b4 	movhi	r2,33042
81100e88:	1084e904 	addi	r2,r2,5028
81100e8c:	1009883a 	mov	r4,r2
81100e90:	008010c4 	movi	r2,67
81100e94:	100d883a 	mov	r6,r2
81100e98:	200b883a 	mov	r5,r4
81100e9c:	1809883a 	mov	r4,r3
81100ea0:	110c9d40 	call	8110c9d4 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100ea4:	d0a02717 	ldw	r2,-32612(gp)
81100ea8:	016044b4 	movhi	r5,33042
81100eac:	29514c04 	addi	r5,r5,17712
81100eb0:	1009883a 	mov	r4,r2
81100eb4:	110b9140 	call	8110b914 <fprintf>
81100eb8:	00013606 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 36) {
81100ebc:	e0bfbc17 	ldw	r2,-272(fp)
81100ec0:	10800918 	cmpnei	r2,r2,36
81100ec4:	1000101e 	bne	r2,zero,81100f08 <bDdr2EepromDump+0x780>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ec8:	00e044b4 	movhi	r3,33042
81100ecc:	18d14c04 	addi	r3,r3,17712
81100ed0:	00a044b4 	movhi	r2,33042
81100ed4:	1084fa04 	addi	r2,r2,5096
81100ed8:	1009883a 	mov	r4,r2
81100edc:	00800a84 	movi	r2,42
81100ee0:	100d883a 	mov	r6,r2
81100ee4:	200b883a 	mov	r5,r4
81100ee8:	1809883a 	mov	r4,r3
81100eec:	110c9d40 	call	8110c9d4 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100ef0:	d0a02717 	ldw	r2,-32612(gp)
81100ef4:	016044b4 	movhi	r5,33042
81100ef8:	29514c04 	addi	r5,r5,17712
81100efc:	1009883a 	mov	r4,r2
81100f00:	110b9140 	call	8110b914 <fprintf>
81100f04:	00012306 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 37) {
81100f08:	e0bfbc17 	ldw	r2,-272(fp)
81100f0c:	10800958 	cmpnei	r2,r2,37
81100f10:	1000101e 	bne	r2,zero,81100f54 <bDdr2EepromDump+0x7cc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f14:	00e044b4 	movhi	r3,33042
81100f18:	18d14c04 	addi	r3,r3,17712
81100f1c:	00a044b4 	movhi	r2,33042
81100f20:	10850504 	addi	r2,r2,5140
81100f24:	1009883a 	mov	r4,r2
81100f28:	00800cc4 	movi	r2,51
81100f2c:	100d883a 	mov	r6,r2
81100f30:	200b883a 	mov	r5,r4
81100f34:	1809883a 	mov	r4,r3
81100f38:	110c9d40 	call	8110c9d4 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f3c:	d0a02717 	ldw	r2,-32612(gp)
81100f40:	016044b4 	movhi	r5,33042
81100f44:	29514c04 	addi	r5,r5,17712
81100f48:	1009883a 	mov	r4,r2
81100f4c:	110b9140 	call	8110b914 <fprintf>
81100f50:	00011006 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 38) {
81100f54:	e0bfbc17 	ldw	r2,-272(fp)
81100f58:	10800998 	cmpnei	r2,r2,38
81100f5c:	1000101e 	bne	r2,zero,81100fa0 <bDdr2EepromDump+0x818>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f60:	00e044b4 	movhi	r3,33042
81100f64:	18d14c04 	addi	r3,r3,17712
81100f68:	00a044b4 	movhi	r2,33042
81100f6c:	10851204 	addi	r2,r2,5192
81100f70:	1009883a 	mov	r4,r2
81100f74:	00800dc4 	movi	r2,55
81100f78:	100d883a 	mov	r6,r2
81100f7c:	200b883a 	mov	r5,r4
81100f80:	1809883a 	mov	r4,r3
81100f84:	110c9d40 	call	8110c9d4 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f88:	d0a02717 	ldw	r2,-32612(gp)
81100f8c:	016044b4 	movhi	r5,33042
81100f90:	29514c04 	addi	r5,r5,17712
81100f94:	1009883a 	mov	r4,r2
81100f98:	110b9140 	call	8110b914 <fprintf>
81100f9c:	0000fd06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 41) {
81100fa0:	e0bfbc17 	ldw	r2,-272(fp)
81100fa4:	10800a58 	cmpnei	r2,r2,41
81100fa8:	1000101e 	bne	r2,zero,81100fec <bDdr2EepromDump+0x864>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fac:	00e044b4 	movhi	r3,33042
81100fb0:	18d14c04 	addi	r3,r3,17712
81100fb4:	00a044b4 	movhi	r2,33042
81100fb8:	10852004 	addi	r2,r2,5248
81100fbc:	1009883a 	mov	r4,r2
81100fc0:	00800c84 	movi	r2,50
81100fc4:	100d883a 	mov	r6,r2
81100fc8:	200b883a 	mov	r5,r4
81100fcc:	1809883a 	mov	r4,r3
81100fd0:	110c9d40 	call	8110c9d4 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81100fd4:	d0a02717 	ldw	r2,-32612(gp)
81100fd8:	016044b4 	movhi	r5,33042
81100fdc:	29514c04 	addi	r5,r5,17712
81100fe0:	1009883a 	mov	r4,r2
81100fe4:	110b9140 	call	8110b914 <fprintf>
81100fe8:	0000ea06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 42) {
81100fec:	e0bfbc17 	ldw	r2,-272(fp)
81100ff0:	10800a98 	cmpnei	r2,r2,42
81100ff4:	1000101e 	bne	r2,zero,81101038 <bDdr2EepromDump+0x8b0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ff8:	00e044b4 	movhi	r3,33042
81100ffc:	18d14c04 	addi	r3,r3,17712
81101000:	00a044b4 	movhi	r2,33042
81101004:	10852d04 	addi	r2,r2,5300
81101008:	1009883a 	mov	r4,r2
8110100c:	00800cc4 	movi	r2,51
81101010:	100d883a 	mov	r6,r2
81101014:	200b883a 	mov	r5,r4
81101018:	1809883a 	mov	r4,r3
8110101c:	110c9d40 	call	8110c9d4 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
81101020:	d0a02717 	ldw	r2,-32612(gp)
81101024:	016044b4 	movhi	r5,33042
81101028:	29514c04 	addi	r5,r5,17712
8110102c:	1009883a 	mov	r4,r2
81101030:	110b9140 	call	8110b914 <fprintf>
81101034:	0000d706 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 62) {
81101038:	e0bfbc17 	ldw	r2,-272(fp)
8110103c:	10800f98 	cmpnei	r2,r2,62
81101040:	1000101e 	bne	r2,zero,81101084 <bDdr2EepromDump+0x8fc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
81101044:	00e044b4 	movhi	r3,33042
81101048:	18d14c04 	addi	r3,r3,17712
8110104c:	00a044b4 	movhi	r2,33042
81101050:	10853a04 	addi	r2,r2,5352
81101054:	1009883a 	mov	r4,r2
81101058:	00800404 	movi	r2,16
8110105c:	100d883a 	mov	r6,r2
81101060:	200b883a 	mov	r5,r4
81101064:	1809883a 	mov	r4,r3
81101068:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
8110106c:	d0a02717 	ldw	r2,-32612(gp)
81101070:	016044b4 	movhi	r5,33042
81101074:	29514c04 	addi	r5,r5,17712
81101078:	1009883a 	mov	r4,r2
8110107c:	110b9140 	call	8110b914 <fprintf>
81101080:	0000c406 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 63) {
81101084:	e0bfbc17 	ldw	r2,-272(fp)
81101088:	10800fd8 	cmpnei	r2,r2,63
8110108c:	10001f1e 	bne	r2,zero,8110110c <bDdr2EepromDump+0x984>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
81101090:	00a044b4 	movhi	r2,33042
81101094:	10914c04 	addi	r2,r2,17712
81101098:	00c00a04 	movi	r3,40
8110109c:	10c00005 	stb	r3,0(r2)
811010a0:	00c010c4 	movi	r3,67
811010a4:	10c00045 	stb	r3,1(r2)
811010a8:	00c01a04 	movi	r3,104
811010ac:	10c00085 	stb	r3,2(r2)
811010b0:	00c01944 	movi	r3,101
811010b4:	10c000c5 	stb	r3,3(r2)
811010b8:	00c018c4 	movi	r3,99
811010bc:	10c00105 	stb	r3,4(r2)
811010c0:	00c01ac4 	movi	r3,107
811010c4:	10c00145 	stb	r3,5(r2)
811010c8:	00c01cc4 	movi	r3,115
811010cc:	10c00185 	stb	r3,6(r2)
811010d0:	00c01d44 	movi	r3,117
811010d4:	10c001c5 	stb	r3,7(r2)
811010d8:	00c01b44 	movi	r3,109
811010dc:	10c00205 	stb	r3,8(r2)
811010e0:	00c00a44 	movi	r3,41
811010e4:	10c00245 	stb	r3,9(r2)
811010e8:	00c00284 	movi	r3,10
811010ec:	10c00285 	stb	r3,10(r2)
811010f0:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
811010f4:	d0a02717 	ldw	r2,-32612(gp)
811010f8:	016044b4 	movhi	r5,33042
811010fc:	29514c04 	addi	r5,r5,17712
81101100:	1009883a 	mov	r4,r2
81101104:	110b9140 	call	8110b914 <fprintf>
81101108:	0000a206 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 64) {
8110110c:	e0bfbc17 	ldw	r2,-272(fp)
81101110:	10801018 	cmpnei	r2,r2,64
81101114:	1000101e 	bne	r2,zero,81101158 <bDdr2EepromDump+0x9d0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
81101118:	00e044b4 	movhi	r3,33042
8110111c:	18d14c04 	addi	r3,r3,17712
81101120:	00a044b4 	movhi	r2,33042
81101124:	10853e04 	addi	r2,r2,5368
81101128:	1009883a 	mov	r4,r2
8110112c:	00800804 	movi	r2,32
81101130:	100d883a 	mov	r6,r2
81101134:	200b883a 	mov	r5,r4
81101138:	1809883a 	mov	r4,r3
8110113c:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81101140:	d0a02717 	ldw	r2,-32612(gp)
81101144:	016044b4 	movhi	r5,33042
81101148:	29514c04 	addi	r5,r5,17712
8110114c:	1009883a 	mov	r4,r2
81101150:	110b9140 	call	8110b914 <fprintf>
81101154:	00008f06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 72) {
81101158:	e0bfbc17 	ldw	r2,-272(fp)
8110115c:	10801218 	cmpnei	r2,r2,72
81101160:	1000101e 	bne	r2,zero,811011a4 <bDdr2EepromDump+0xa1c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101164:	00e044b4 	movhi	r3,33042
81101168:	18d14c04 	addi	r3,r3,17712
8110116c:	00a044b4 	movhi	r2,33042
81101170:	10854604 	addi	r2,r2,5400
81101174:	1009883a 	mov	r4,r2
81101178:	00800dc4 	movi	r2,55
8110117c:	100d883a 	mov	r6,r2
81101180:	200b883a 	mov	r5,r4
81101184:	1809883a 	mov	r4,r3
81101188:	110c9d40 	call	8110c9d4 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
8110118c:	d0a02717 	ldw	r2,-32612(gp)
81101190:	016044b4 	movhi	r5,33042
81101194:	29514c04 	addi	r5,r5,17712
81101198:	1009883a 	mov	r4,r2
8110119c:	110b9140 	call	8110b914 <fprintf>
811011a0:	00007c06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 73) {
811011a4:	e0bfbc17 	ldw	r2,-272(fp)
811011a8:	10801258 	cmpnei	r2,r2,73
811011ac:	1000101e 	bne	r2,zero,811011f0 <bDdr2EepromDump+0xa68>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
811011b0:	00e044b4 	movhi	r3,33042
811011b4:	18d14c04 	addi	r3,r3,17712
811011b8:	00a044b4 	movhi	r2,33042
811011bc:	10855404 	addi	r2,r2,5456
811011c0:	1009883a 	mov	r4,r2
811011c4:	00800784 	movi	r2,30
811011c8:	100d883a 	mov	r6,r2
811011cc:	200b883a 	mov	r5,r4
811011d0:	1809883a 	mov	r4,r3
811011d4:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
811011d8:	d0a02717 	ldw	r2,-32612(gp)
811011dc:	016044b4 	movhi	r5,33042
811011e0:	29514c04 	addi	r5,r5,17712
811011e4:	1009883a 	mov	r4,r2
811011e8:	110b9140 	call	8110b914 <fprintf>
811011ec:	00006906 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 91) {
811011f0:	e0bfbc17 	ldw	r2,-272(fp)
811011f4:	108016d8 	cmpnei	r2,r2,91
811011f8:	1000101e 	bne	r2,zero,8110123c <bDdr2EepromDump+0xab4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
811011fc:	00e044b4 	movhi	r3,33042
81101200:	18d14c04 	addi	r3,r3,17712
81101204:	00a044b4 	movhi	r2,33042
81101208:	10855c04 	addi	r2,r2,5488
8110120c:	1009883a 	mov	r4,r2
81101210:	00800804 	movi	r2,32
81101214:	100d883a 	mov	r6,r2
81101218:	200b883a 	mov	r5,r4
8110121c:	1809883a 	mov	r4,r3
81101220:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81101224:	d0a02717 	ldw	r2,-32612(gp)
81101228:	016044b4 	movhi	r5,33042
8110122c:	29514c04 	addi	r5,r5,17712
81101230:	1009883a 	mov	r4,r2
81101234:	110b9140 	call	8110b914 <fprintf>
81101238:	00005606 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 93) {
8110123c:	e0bfbc17 	ldw	r2,-272(fp)
81101240:	10801758 	cmpnei	r2,r2,93
81101244:	1000101e 	bne	r2,zero,81101288 <bDdr2EepromDump+0xb00>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101248:	00e044b4 	movhi	r3,33042
8110124c:	18d14c04 	addi	r3,r3,17712
81101250:	00a044b4 	movhi	r2,33042
81101254:	10856404 	addi	r2,r2,5520
81101258:	1009883a 	mov	r4,r2
8110125c:	008009c4 	movi	r2,39
81101260:	100d883a 	mov	r6,r2
81101264:	200b883a 	mov	r5,r4
81101268:	1809883a 	mov	r4,r3
8110126c:	110c9d40 	call	8110c9d4 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
81101270:	d0a02717 	ldw	r2,-32612(gp)
81101274:	016044b4 	movhi	r5,33042
81101278:	29514c04 	addi	r5,r5,17712
8110127c:	1009883a 	mov	r4,r2
81101280:	110b9140 	call	8110b914 <fprintf>
81101284:	00004306 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 94) {
81101288:	e0bfbc17 	ldw	r2,-272(fp)
8110128c:	10801798 	cmpnei	r2,r2,94
81101290:	1000101e 	bne	r2,zero,811012d4 <bDdr2EepromDump+0xb4c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
81101294:	00e044b4 	movhi	r3,33042
81101298:	18d14c04 	addi	r3,r3,17712
8110129c:	00a044b4 	movhi	r2,33042
811012a0:	10856e04 	addi	r2,r2,5560
811012a4:	1009883a 	mov	r4,r2
811012a8:	008006c4 	movi	r2,27
811012ac:	100d883a 	mov	r6,r2
811012b0:	200b883a 	mov	r5,r4
811012b4:	1809883a 	mov	r4,r3
811012b8:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
811012bc:	d0a02717 	ldw	r2,-32612(gp)
811012c0:	016044b4 	movhi	r5,33042
811012c4:	29514c04 	addi	r5,r5,17712
811012c8:	1009883a 	mov	r4,r2
811012cc:	110b9140 	call	8110b914 <fprintf>
811012d0:	00003006 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 95) {
811012d4:	e0bfbc17 	ldw	r2,-272(fp)
811012d8:	108017d8 	cmpnei	r2,r2,95
811012dc:	1000101e 	bne	r2,zero,81101320 <bDdr2EepromDump+0xb98>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811012e0:	00e044b4 	movhi	r3,33042
811012e4:	18d14c04 	addi	r3,r3,17712
811012e8:	00a044b4 	movhi	r2,33042
811012ec:	10857504 	addi	r2,r2,5588
811012f0:	1009883a 	mov	r4,r2
811012f4:	00800a04 	movi	r2,40
811012f8:	100d883a 	mov	r6,r2
811012fc:	200b883a 	mov	r5,r4
81101300:	1809883a 	mov	r4,r3
81101304:	110c9d40 	call	8110c9d4 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
81101308:	d0a02717 	ldw	r2,-32612(gp)
8110130c:	016044b4 	movhi	r5,33042
81101310:	29514c04 	addi	r5,r5,17712
81101314:	1009883a 	mov	r4,r2
81101318:	110b9140 	call	8110b914 <fprintf>
8110131c:	00001d06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else if (iI == 99) {
81101320:	e0bfbc17 	ldw	r2,-272(fp)
81101324:	108018d8 	cmpnei	r2,r2,99
81101328:	1000101e 	bne	r2,zero,8110136c <bDdr2EepromDump+0xbe4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
8110132c:	00e044b4 	movhi	r3,33042
81101330:	18d14c04 	addi	r3,r3,17712
81101334:	00a044b4 	movhi	r2,33042
81101338:	10857f04 	addi	r2,r2,5628
8110133c:	1009883a 	mov	r4,r2
81101340:	00800984 	movi	r2,38
81101344:	100d883a 	mov	r6,r2
81101348:	200b883a 	mov	r5,r4
8110134c:	1809883a 	mov	r4,r3
81101350:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81101354:	d0a02717 	ldw	r2,-32612(gp)
81101358:	016044b4 	movhi	r5,33042
8110135c:	29514c04 	addi	r5,r5,17712
81101360:	1009883a 	mov	r4,r2
81101364:	110b9140 	call	8110b914 <fprintf>
81101368:	00000a06 	br	81101394 <bDdr2EepromDump+0xc0c>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
8110136c:	00a044b4 	movhi	r2,33042
81101370:	10914c04 	addi	r2,r2,17712
81101374:	00c00284 	movi	r3,10
81101378:	10c00005 	stb	r3,0(r2)
8110137c:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
81101380:	d0a02717 	ldw	r2,-32612(gp)
81101384:	016044b4 	movhi	r5,33042
81101388:	29514c04 	addi	r5,r5,17712
8110138c:	1009883a 	mov	r4,r2
81101390:	110b9140 	call	8110b914 <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
81101394:	e0bfbc17 	ldw	r2,-272(fp)
81101398:	10800044 	addi	r2,r2,1
8110139c:	e0bfbc15 	stw	r2,-272(fp)
811013a0:	e0bfbc17 	ldw	r2,-272(fp)
811013a4:	10804008 	cmpgei	r2,r2,256
811013a8:	1000121e 	bne	r2,zero,811013f4 <bDdr2EepromDump+0xc6c>
811013ac:	e0bfbe17 	ldw	r2,-264(fp)
811013b0:	103d451e 	bne	r2,zero,811008c8 <__reset+0xfb0e08c8>
811013b4:	00000f06 	br	811013f4 <bDdr2EepromDump+0xc6c>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
811013b8:	00e044b4 	movhi	r3,33042
811013bc:	18d14c04 	addi	r3,r3,17712
811013c0:	00a044b4 	movhi	r2,33042
811013c4:	10858904 	addi	r2,r2,5668
811013c8:	1009883a 	mov	r4,r2
811013cc:	008005c4 	movi	r2,23
811013d0:	100d883a 	mov	r6,r2
811013d4:	200b883a 	mov	r5,r4
811013d8:	1809883a 	mov	r4,r3
811013dc:	110c9d40 	call	8110c9d4 <memcpy>
		debug(fp, cDebugBuffer);
811013e0:	d0a02717 	ldw	r2,-32612(gp)
811013e4:	016044b4 	movhi	r5,33042
811013e8:	29514c04 	addi	r5,r5,17712
811013ec:	1009883a 	mov	r4,r2
811013f0:	110b9140 	call	8110b914 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811013f4:	00a044b4 	movhi	r2,33042
811013f8:	10914c04 	addi	r2,r2,17712
811013fc:	00c00284 	movi	r3,10
81101400:	10c00005 	stb	r3,0(r2)
81101404:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101408:	d0a02717 	ldw	r2,-32612(gp)
8110140c:	016044b4 	movhi	r5,33042
81101410:	29514c04 	addi	r5,r5,17712
81101414:	1009883a 	mov	r4,r2
81101418:	110b9140 	call	8110b914 <fprintf>
#endif

	return bSuccess;
8110141c:	e0bfbe17 	ldw	r2,-264(fp)
}
81101420:	e037883a 	mov	sp,fp
81101424:	dfc00117 	ldw	ra,4(sp)
81101428:	df000017 	ldw	fp,0(sp)
8110142c:	dec00204 	addi	sp,sp,8
81101430:	f800283a 	ret

81101434 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
81101434:	defffb04 	addi	sp,sp,-20
81101438:	dfc00415 	stw	ra,16(sp)
8110143c:	df000315 	stw	fp,12(sp)
81101440:	df000304 	addi	fp,sp,12
81101444:	2005883a 	mov	r2,r4
81101448:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
8110144c:	00a04834 	movhi	r2,33056
81101450:	108c2204 	addi	r2,r2,12424
81101454:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
81101458:	00800044 	movi	r2,1
8110145c:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101460:	e0bfff03 	ldbu	r2,-4(fp)
81101464:	10c00060 	cmpeqi	r3,r2,1
81101468:	1800031e 	bne	r3,zero,81101478 <bDdr2SwitchMemory+0x44>
8110146c:	108000a0 	cmpeqi	r2,r2,2
81101470:	1000041e 	bne	r2,zero,81101484 <bDdr2SwitchMemory+0x50>
81101474:	00000706 	br	81101494 <bDdr2SwitchMemory+0x60>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
81101478:	e0bffe17 	ldw	r2,-8(fp)
8110147c:	10000015 	stw	zero,0(r2)
		break;
81101480:	00001406 	br	811014d4 <bDdr2SwitchMemory+0xa0>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81101484:	e0bffe17 	ldw	r2,-8(fp)
81101488:	00e00034 	movhi	r3,32768
8110148c:	10c00015 	stw	r3,0(r2)
		break;
81101490:	00001006 	br	811014d4 <bDdr2SwitchMemory+0xa0>
	default:
		bSuccess = FALSE;
81101494:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101498:	00e044b4 	movhi	r3,33042
8110149c:	18d14c04 	addi	r3,r3,17712
811014a0:	00a044b4 	movhi	r2,33042
811014a4:	10858f04 	addi	r2,r2,5692
811014a8:	1009883a 	mov	r4,r2
811014ac:	00800f04 	movi	r2,60
811014b0:	100d883a 	mov	r6,r2
811014b4:	200b883a 	mov	r5,r4
811014b8:	1809883a 	mov	r4,r3
811014bc:	110c9d40 	call	8110c9d4 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
811014c0:	d0a02717 	ldw	r2,-32612(gp)
811014c4:	016044b4 	movhi	r5,33042
811014c8:	29514c04 	addi	r5,r5,17712
811014cc:	1009883a 	mov	r4,r2
811014d0:	110b9140 	call	8110b914 <fprintf>
		;
#endif
	}

	return bSuccess;
811014d4:	e0bffd17 	ldw	r2,-12(fp)
}
811014d8:	e037883a 	mov	sp,fp
811014dc:	dfc00117 	ldw	ra,4(sp)
811014e0:	df000017 	ldw	fp,0(sp)
811014e4:	dec00204 	addi	sp,sp,8
811014e8:	f800283a 	ret

811014ec <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
811014ec:	deffe204 	addi	sp,sp,-120
811014f0:	dfc01d15 	stw	ra,116(sp)
811014f4:	df001c15 	stw	fp,112(sp)
811014f8:	dc401b15 	stw	r17,108(sp)
811014fc:	dc001a15 	stw	r16,104(sp)
81101500:	df001c04 	addi	fp,sp,112
81101504:	2005883a 	mov	r2,r4
81101508:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
8110150c:	00e044b4 	movhi	r3,33042
81101510:	18d14c04 	addi	r3,r3,17712
81101514:	00a044b4 	movhi	r2,33042
81101518:	10859e04 	addi	r2,r2,5752
8110151c:	1009883a 	mov	r4,r2
81101520:	00800a04 	movi	r2,40
81101524:	100d883a 	mov	r6,r2
81101528:	200b883a 	mov	r5,r4
8110152c:	1809883a 	mov	r4,r3
81101530:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
81101534:	d0a02717 	ldw	r2,-32612(gp)
81101538:	016044b4 	movhi	r5,33042
8110153c:	29514c04 	addi	r5,r5,17712
81101540:	1009883a 	mov	r4,r2
81101544:	110b9140 	call	8110b914 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101548:	00800044 	movi	r2,1
8110154c:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
81101550:	e0bffd03 	ldbu	r2,-12(fp)
81101554:	10c00060 	cmpeqi	r3,r2,1
81101558:	1800031e 	bne	r3,zero,81101568 <bDdr2MemoryWriteTest+0x7c>
8110155c:	108000a0 	cmpeqi	r2,r2,2
81101560:	1000081e 	bne	r2,zero,81101584 <bDdr2MemoryWriteTest+0x98>
81101564:	00000e06 	br	811015a0 <bDdr2MemoryWriteTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101568:	e0bffd03 	ldbu	r2,-12(fp)
8110156c:	1009883a 	mov	r4,r2
81101570:	11014340 	call	81101434 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101574:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101578:	00a00034 	movhi	r2,32768
8110157c:	e0bfe615 	stw	r2,-104(fp)
		break;
81101580:	00001906 	br	811015e8 <bDdr2MemoryWriteTest+0xfc>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101584:	e0bffd03 	ldbu	r2,-12(fp)
81101588:	1009883a 	mov	r4,r2
8110158c:	11014340 	call	81101434 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101590:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101594:	00a00034 	movhi	r2,32768
81101598:	e0bfe615 	stw	r2,-104(fp)
		break;
8110159c:	00001206 	br	811015e8 <bDdr2MemoryWriteTest+0xfc>
	default:
		bSuccess = FALSE;
811015a0:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811015a4:	00e044b4 	movhi	r3,33042
811015a8:	18d14c04 	addi	r3,r3,17712
811015ac:	00a044b4 	movhi	r2,33042
811015b0:	1083af04 	addi	r2,r2,3772
811015b4:	1009883a 	mov	r4,r2
811015b8:	00800bc4 	movi	r2,47
811015bc:	100d883a 	mov	r6,r2
811015c0:	200b883a 	mov	r5,r4
811015c4:	1809883a 	mov	r4,r3
811015c8:	110c9d40 	call	8110c9d4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811015cc:	d0a02717 	ldw	r2,-32612(gp)
811015d0:	016044b4 	movhi	r5,33042
811015d4:	29514c04 	addi	r5,r5,17712
811015d8:	1009883a 	mov	r4,r2
811015dc:	110b9140 	call	8110b914 <fprintf>
		;
#endif
		return bSuccess;
811015e0:	e0bfed17 	ldw	r2,-76(fp)
811015e4:	00011806 	br	81101a48 <bDdr2MemoryWriteTest+0x55c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811015e8:	e0bfe617 	ldw	r2,-104(fp)
811015ec:	1004d53a 	srli	r2,r2,20
811015f0:	100d883a 	mov	r6,r2
811015f4:	016044b4 	movhi	r5,33042
811015f8:	2945a804 	addi	r5,r5,5792
811015fc:	012044b4 	movhi	r4,33042
81101600:	21114c04 	addi	r4,r4,17712
81101604:	110cfc80 	call	8110cfc8 <sprintf>
	debug(fp, cDebugBuffer);
81101608:	d0a02717 	ldw	r2,-32612(gp)
8110160c:	016044b4 	movhi	r5,33042
81101610:	29514c04 	addi	r5,r5,17712
81101614:	1009883a 	mov	r4,r2
81101618:	110b9140 	call	8110b914 <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
8110161c:	00800104 	movi	r2,4
81101620:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
81101624:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101628:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
8110162c:	e03fe715 	stw	zero,-100(fp)
81101630:	00001506 	br	81101688 <bDdr2MemoryWriteTest+0x19c>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101634:	e0ffe617 	ldw	r3,-104(fp)
81101638:	00b33374 	movhi	r2,52429
8110163c:	10b33344 	addi	r2,r2,-13107
81101640:	1888383a 	mulxuu	r4,r3,r2
81101644:	1885383a 	mul	r2,r3,r2
81101648:	1021883a 	mov	r16,r2
8110164c:	2023883a 	mov	r17,r4
81101650:	8804d0fa 	srli	r2,r17,3
81101654:	e0ffe717 	ldw	r3,-100(fp)
81101658:	18c00044 	addi	r3,r3,1
8110165c:	10c7383a 	mul	r3,r2,r3
81101660:	e0bfe717 	ldw	r2,-100(fp)
81101664:	1085883a 	add	r2,r2,r2
81101668:	1085883a 	add	r2,r2,r2
8110166c:	e13fe504 	addi	r4,fp,-108
81101670:	2085883a 	add	r2,r4,r2
81101674:	10800e04 	addi	r2,r2,56
81101678:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
8110167c:	e0bfe717 	ldw	r2,-100(fp)
81101680:	10800044 	addi	r2,r2,1
81101684:	e0bfe715 	stw	r2,-100(fp)
81101688:	e0bfe717 	ldw	r2,-100(fp)
8110168c:	10800290 	cmplti	r2,r2,10
81101690:	103fe81e 	bne	r2,zero,81101634 <__reset+0xfb0e1634>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101694:	d0a03417 	ldw	r2,-32560(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
81101698:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
8110169c:	00804004 	movi	r2,256
811016a0:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
811016a4:	e03fe715 	stw	zero,-100(fp)
811016a8:	00001e06 	br	81101724 <bDdr2MemoryWriteTest+0x238>
		if (iI == 0) {
811016ac:	e0bfe717 	ldw	r2,-100(fp)
811016b0:	1000091e 	bne	r2,zero,811016d8 <bDdr2MemoryWriteTest+0x1ec>
			xSZData[iI] = uliInitValue;
811016b4:	00a044b4 	movhi	r2,33042
811016b8:	10918c04 	addi	r2,r2,17968
811016bc:	e0ffe717 	ldw	r3,-100(fp)
811016c0:	18c7883a 	add	r3,r3,r3
811016c4:	18c7883a 	add	r3,r3,r3
811016c8:	10c5883a 	add	r2,r2,r3
811016cc:	e0fff017 	ldw	r3,-64(fp)
811016d0:	10c00015 	stw	r3,0(r2)
811016d4:	00001006 	br	81101718 <bDdr2MemoryWriteTest+0x22c>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
811016d8:	e0bfe717 	ldw	r2,-100(fp)
811016dc:	10ffffc4 	addi	r3,r2,-1
811016e0:	00a044b4 	movhi	r2,33042
811016e4:	10918c04 	addi	r2,r2,17968
811016e8:	18c7883a 	add	r3,r3,r3
811016ec:	18c7883a 	add	r3,r3,r3
811016f0:	10c5883a 	add	r2,r2,r3
811016f4:	10800017 	ldw	r2,0(r2)
811016f8:	11000364 	muli	r4,r2,13
811016fc:	00a044b4 	movhi	r2,33042
81101700:	10918c04 	addi	r2,r2,17968
81101704:	e0ffe717 	ldw	r3,-100(fp)
81101708:	18c7883a 	add	r3,r3,r3
8110170c:	18c7883a 	add	r3,r3,r3
81101710:	10c5883a 	add	r2,r2,r3
81101714:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
81101718:	e0bfe717 	ldw	r2,-100(fp)
8110171c:	10800044 	addi	r2,r2,1
81101720:	e0bfe715 	stw	r2,-100(fp)
81101724:	e0ffe717 	ldw	r3,-100(fp)
81101728:	e0bfea17 	ldw	r2,-88(fp)
8110172c:	18bfdf16 	blt	r3,r2,811016ac <__reset+0xfb0e16ac>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
81101730:	e0bfea17 	ldw	r2,-88(fp)
81101734:	10ffffc4 	addi	r3,r2,-1
81101738:	00a044b4 	movhi	r2,33042
8110173c:	10918c04 	addi	r2,r2,17968
81101740:	18c7883a 	add	r3,r3,r3
81101744:	18c7883a 	add	r3,r3,r3
81101748:	10c7883a 	add	r3,r2,r3
8110174c:	00aaaaf4 	movhi	r2,43691
81101750:	10aaaa84 	addi	r2,r2,-21846
81101754:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101758:	e0bfea17 	ldw	r2,-88(fp)
8110175c:	10ffff84 	addi	r3,r2,-2
81101760:	00a044b4 	movhi	r2,33042
81101764:	10918c04 	addi	r2,r2,17968
81101768:	18c7883a 	add	r3,r3,r3
8110176c:	18c7883a 	add	r3,r3,r3
81101770:	10c7883a 	add	r3,r2,r3
81101774:	00955574 	movhi	r2,21845
81101778:	10955544 	addi	r2,r2,21845
8110177c:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
81101780:	e0bfea17 	ldw	r2,-88(fp)
81101784:	10ffff44 	addi	r3,r2,-3
81101788:	00a044b4 	movhi	r2,33042
8110178c:	10918c04 	addi	r2,r2,17968
81101790:	18c7883a 	add	r3,r3,r3
81101794:	18c7883a 	add	r3,r3,r3
81101798:	10c5883a 	add	r2,r2,r3
8110179c:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
811017a0:	e0bfea17 	ldw	r2,-88(fp)
811017a4:	10ffff04 	addi	r3,r2,-4
811017a8:	00a044b4 	movhi	r2,33042
811017ac:	10918c04 	addi	r2,r2,17968
811017b0:	18c7883a 	add	r3,r3,r3
811017b4:	18c7883a 	add	r3,r3,r3
811017b8:	10c5883a 	add	r2,r2,r3
811017bc:	00ffffc4 	movi	r3,-1
811017c0:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
811017c4:	00e044b4 	movhi	r3,33042
811017c8:	18d14c04 	addi	r3,r3,17712
811017cc:	00a044b4 	movhi	r2,33042
811017d0:	1085ae04 	addi	r2,r2,5816
811017d4:	1009883a 	mov	r4,r2
811017d8:	00800444 	movi	r2,17
811017dc:	100d883a 	mov	r6,r2
811017e0:	200b883a 	mov	r5,r4
811017e4:	1809883a 	mov	r4,r3
811017e8:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
811017ec:	d0a02717 	ldw	r2,-32612(gp)
811017f0:	016044b4 	movhi	r5,33042
811017f4:	29514c04 	addi	r5,r5,17712
811017f8:	1009883a 	mov	r4,r2
811017fc:	110b9140 	call	8110b914 <fprintf>
81101800:	d0a03417 	ldw	r2,-32560(gp)
#endif
	iTimeStart = alt_nticks();
81101804:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
81101808:	e0bfe517 	ldw	r2,-108(fp)
8110180c:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
81101810:	00810004 	movi	r2,1024
81101814:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101818:	e0ffe817 	ldw	r3,-96(fp)
8110181c:	e0bfee17 	ldw	r2,-72(fp)
81101820:	1885283a 	div	r2,r3,r2
81101824:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
81101828:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
8110182c:	00003a06 	br	81101918 <bDdr2MemoryWriteTest+0x42c>
		iNRemainedLen = uliByteLen - iNPos;
81101830:	e0bfeb17 	ldw	r2,-84(fp)
81101834:	e0ffe617 	ldw	r3,-104(fp)
81101838:	1885c83a 	sub	r2,r3,r2
8110183c:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101840:	e0bfe817 	ldw	r2,-96(fp)
81101844:	e0fff217 	ldw	r3,-56(fp)
81101848:	1880060e 	bge	r3,r2,81101864 <bDdr2MemoryWriteTest+0x378>
			iNAccessLen = iNRemainedLen;
8110184c:	e0bff217 	ldw	r2,-56(fp)
81101850:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101854:	e0ffe817 	ldw	r3,-96(fp)
81101858:	e0bfee17 	ldw	r2,-72(fp)
8110185c:	1885283a 	div	r2,r3,r2
81101860:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
81101864:	e0bfe817 	ldw	r2,-96(fp)
81101868:	100d883a 	mov	r6,r2
8110186c:	016044b4 	movhi	r5,33042
81101870:	29518c04 	addi	r5,r5,17968
81101874:	e13fe917 	ldw	r4,-92(fp)
81101878:	110c9d40 	call	8110c9d4 <memcpy>
		pxDes += iNItemNum;
8110187c:	e0bfea17 	ldw	r2,-88(fp)
81101880:	1085883a 	add	r2,r2,r2
81101884:	1085883a 	add	r2,r2,r2
81101888:	1007883a 	mov	r3,r2
8110188c:	e0bfe917 	ldw	r2,-92(fp)
81101890:	10c5883a 	add	r2,r2,r3
81101894:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
81101898:	e0ffeb17 	ldw	r3,-84(fp)
8110189c:	e0bfe817 	ldw	r2,-96(fp)
811018a0:	1885883a 	add	r2,r3,r2
811018a4:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
811018a8:	e0bfec17 	ldw	r2,-80(fp)
811018ac:	10800288 	cmpgei	r2,r2,10
811018b0:	1000191e 	bne	r2,zero,81101918 <bDdr2MemoryWriteTest+0x42c>
811018b4:	e0bfec17 	ldw	r2,-80(fp)
811018b8:	1085883a 	add	r2,r2,r2
811018bc:	1085883a 	add	r2,r2,r2
811018c0:	e0ffe504 	addi	r3,fp,-108
811018c4:	1885883a 	add	r2,r3,r2
811018c8:	10800e04 	addi	r2,r2,56
811018cc:	10800017 	ldw	r2,0(r2)
811018d0:	e0ffeb17 	ldw	r3,-84(fp)
811018d4:	18801036 	bltu	r3,r2,81101918 <bDdr2MemoryWriteTest+0x42c>
			iNProgressIndex++;
811018d8:	e0bfec17 	ldw	r2,-80(fp)
811018dc:	10800044 	addi	r2,r2,1
811018e0:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
811018e4:	e0bfec17 	ldw	r2,-80(fp)
811018e8:	108002a4 	muli	r2,r2,10
811018ec:	100d883a 	mov	r6,r2
811018f0:	016044b4 	movhi	r5,33042
811018f4:	2945b304 	addi	r5,r5,5836
811018f8:	012044b4 	movhi	r4,33042
811018fc:	21114c04 	addi	r4,r4,17712
81101900:	110cfc80 	call	8110cfc8 <sprintf>
			debug(fp, cDebugBuffer);
81101904:	d0a02717 	ldw	r2,-32612(gp)
81101908:	016044b4 	movhi	r5,33042
8110190c:	29514c04 	addi	r5,r5,17712
81101910:	1009883a 	mov	r4,r2
81101914:	110b9140 	call	8110b914 <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
81101918:	e0ffeb17 	ldw	r3,-84(fp)
8110191c:	e0bfe617 	ldw	r2,-104(fp)
81101920:	18bfc336 	bltu	r3,r2,81101830 <__reset+0xfb0e1830>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
81101924:	111bc740 	call	8111bc74 <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101928:	00a044b4 	movhi	r2,33042
8110192c:	10914c04 	addi	r2,r2,17712
81101930:	00c00284 	movi	r3,10
81101934:	10c00005 	stb	r3,0(r2)
81101938:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
8110193c:	d0a02717 	ldw	r2,-32612(gp)
81101940:	016044b4 	movhi	r5,33042
81101944:	29514c04 	addi	r5,r5,17712
81101948:	1009883a 	mov	r4,r2
8110194c:	110b9140 	call	8110b914 <fprintf>
81101950:	d0e03417 	ldw	r3,-32560(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101954:	e0bff117 	ldw	r2,-60(fp)
81101958:	1885c83a 	sub	r2,r3,r2
8110195c:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
81101960:	e0bfed17 	ldw	r2,-76(fp)
81101964:	10001e26 	beq	r2,zero,811019e0 <bDdr2MemoryWriteTest+0x4f4>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101968:	e13fef17 	ldw	r4,-68(fp)
8110196c:	110ab980 	call	8110ab98 <__floatsisf>
81101970:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101974:	d0a03317 	ldw	r2,-32564(gp)
81101978:	1009883a 	mov	r4,r2
8110197c:	110acbc0 	call	8110acbc <__floatunsisf>
81101980:	1007883a 	mov	r3,r2
81101984:	180b883a 	mov	r5,r3
81101988:	8009883a 	mov	r4,r16
8110198c:	110a35c0 	call	8110a35c <__divsf3>
81101990:	1007883a 	mov	r3,r2
81101994:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101998:	1009883a 	mov	r4,r2
8110199c:	110b4c40 	call	8110b4c4 <__extendsfdf2>
811019a0:	1009883a 	mov	r4,r2
811019a4:	180b883a 	mov	r5,r3
811019a8:	d9400015 	stw	r5,0(sp)
811019ac:	200f883a 	mov	r7,r4
811019b0:	e1bfe617 	ldw	r6,-104(fp)
811019b4:	016044b4 	movhi	r5,33042
811019b8:	2945b504 	addi	r5,r5,5844
811019bc:	012044b4 	movhi	r4,33042
811019c0:	21114c04 	addi	r4,r4,17712
811019c4:	110cfc80 	call	8110cfc8 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
811019c8:	d0a02717 	ldw	r2,-32612(gp)
811019cc:	016044b4 	movhi	r5,33042
811019d0:	29514c04 	addi	r5,r5,17712
811019d4:	1009883a 	mov	r4,r2
811019d8:	110b9140 	call	8110b914 <fprintf>
811019dc:	00000f06 	br	81101a1c <bDdr2MemoryWriteTest+0x530>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
811019e0:	00e044b4 	movhi	r3,33042
811019e4:	18d14c04 	addi	r3,r3,17712
811019e8:	00a044b4 	movhi	r2,33042
811019ec:	1085c104 	addi	r2,r2,5892
811019f0:	1009883a 	mov	r4,r2
811019f4:	00800584 	movi	r2,22
811019f8:	100d883a 	mov	r6,r2
811019fc:	200b883a 	mov	r5,r4
81101a00:	1809883a 	mov	r4,r3
81101a04:	110c9d40 	call	8110c9d4 <memcpy>
		debug(fp, cDebugBuffer);
81101a08:	d0a02717 	ldw	r2,-32612(gp)
81101a0c:	016044b4 	movhi	r5,33042
81101a10:	29514c04 	addi	r5,r5,17712
81101a14:	1009883a 	mov	r4,r2
81101a18:	110b9140 	call	8110b914 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101a1c:	00a044b4 	movhi	r2,33042
81101a20:	10914c04 	addi	r2,r2,17712
81101a24:	00c00284 	movi	r3,10
81101a28:	10c00005 	stb	r3,0(r2)
81101a2c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101a30:	d0a02717 	ldw	r2,-32612(gp)
81101a34:	016044b4 	movhi	r5,33042
81101a38:	29514c04 	addi	r5,r5,17712
81101a3c:	1009883a 	mov	r4,r2
81101a40:	110b9140 	call	8110b914 <fprintf>
#endif

	return bSuccess;
81101a44:	e0bfed17 	ldw	r2,-76(fp)
}
81101a48:	e6fffe04 	addi	sp,fp,-8
81101a4c:	dfc00317 	ldw	ra,12(sp)
81101a50:	df000217 	ldw	fp,8(sp)
81101a54:	dc400117 	ldw	r17,4(sp)
81101a58:	dc000017 	ldw	r16,0(sp)
81101a5c:	dec00404 	addi	sp,sp,16
81101a60:	f800283a 	ret

81101a64 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101a64:	deffe204 	addi	sp,sp,-120
81101a68:	dfc01d15 	stw	ra,116(sp)
81101a6c:	df001c15 	stw	fp,112(sp)
81101a70:	dc401b15 	stw	r17,108(sp)
81101a74:	dc001a15 	stw	r16,104(sp)
81101a78:	df001c04 	addi	fp,sp,112
81101a7c:	2005883a 	mov	r2,r4
81101a80:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101a84:	00e044b4 	movhi	r3,33042
81101a88:	18d14c04 	addi	r3,r3,17712
81101a8c:	00a044b4 	movhi	r2,33042
81101a90:	1085c704 	addi	r2,r2,5916
81101a94:	1009883a 	mov	r4,r2
81101a98:	008009c4 	movi	r2,39
81101a9c:	100d883a 	mov	r6,r2
81101aa0:	200b883a 	mov	r5,r4
81101aa4:	1809883a 	mov	r4,r3
81101aa8:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
81101aac:	d0a02717 	ldw	r2,-32612(gp)
81101ab0:	016044b4 	movhi	r5,33042
81101ab4:	29514c04 	addi	r5,r5,17712
81101ab8:	1009883a 	mov	r4,r2
81101abc:	110b9140 	call	8110b914 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101ac0:	00800044 	movi	r2,1
81101ac4:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101ac8:	e0bffd03 	ldbu	r2,-12(fp)
81101acc:	10c00060 	cmpeqi	r3,r2,1
81101ad0:	1800031e 	bne	r3,zero,81101ae0 <bDdr2MemoryReadTest+0x7c>
81101ad4:	108000a0 	cmpeqi	r2,r2,2
81101ad8:	1000081e 	bne	r2,zero,81101afc <bDdr2MemoryReadTest+0x98>
81101adc:	00000e06 	br	81101b18 <bDdr2MemoryReadTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101ae0:	e0bffd03 	ldbu	r2,-12(fp)
81101ae4:	1009883a 	mov	r4,r2
81101ae8:	11014340 	call	81101434 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101aec:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101af0:	00a00034 	movhi	r2,32768
81101af4:	e0bfe715 	stw	r2,-100(fp)
		break;
81101af8:	00001906 	br	81101b60 <bDdr2MemoryReadTest+0xfc>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101afc:	e0bffd03 	ldbu	r2,-12(fp)
81101b00:	1009883a 	mov	r4,r2
81101b04:	11014340 	call	81101434 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b08:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101b0c:	00a00034 	movhi	r2,32768
81101b10:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b14:	00001206 	br	81101b60 <bDdr2MemoryReadTest+0xfc>
	default:
		bSuccess = FALSE;
81101b18:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101b1c:	00e044b4 	movhi	r3,33042
81101b20:	18d14c04 	addi	r3,r3,17712
81101b24:	00a044b4 	movhi	r2,33042
81101b28:	1083af04 	addi	r2,r2,3772
81101b2c:	1009883a 	mov	r4,r2
81101b30:	00800bc4 	movi	r2,47
81101b34:	100d883a 	mov	r6,r2
81101b38:	200b883a 	mov	r5,r4
81101b3c:	1809883a 	mov	r4,r3
81101b40:	110c9d40 	call	8110c9d4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101b44:	d0a02717 	ldw	r2,-32612(gp)
81101b48:	016044b4 	movhi	r5,33042
81101b4c:	29514c04 	addi	r5,r5,17712
81101b50:	1009883a 	mov	r4,r2
81101b54:	110b9140 	call	8110b914 <fprintf>
		;
#endif
		return bSuccess;
81101b58:	e0bfe517 	ldw	r2,-108(fp)
81101b5c:	0000fc06 	br	81101f50 <bDdr2MemoryReadTest+0x4ec>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101b60:	e0bfe717 	ldw	r2,-100(fp)
81101b64:	1004d53a 	srli	r2,r2,20
81101b68:	100d883a 	mov	r6,r2
81101b6c:	016044b4 	movhi	r5,33042
81101b70:	2945d104 	addi	r5,r5,5956
81101b74:	012044b4 	movhi	r4,33042
81101b78:	21114c04 	addi	r4,r4,17712
81101b7c:	110cfc80 	call	8110cfc8 <sprintf>
	debug(fp, cDebugBuffer);
81101b80:	d0a02717 	ldw	r2,-32612(gp)
81101b84:	016044b4 	movhi	r5,33042
81101b88:	29514c04 	addi	r5,r5,17712
81101b8c:	1009883a 	mov	r4,r2
81101b90:	110b9140 	call	8110b914 <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101b94:	00804004 	movi	r2,256
81101b98:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101b9c:	00800104 	movi	r2,4
81101ba0:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101ba4:	e0ffec17 	ldw	r3,-80(fp)
81101ba8:	e0bfef17 	ldw	r2,-68(fp)
81101bac:	1885383a 	mul	r2,r3,r2
81101bb0:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101bb4:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101bb8:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101bbc:	e03fe815 	stw	zero,-96(fp)
81101bc0:	00001506 	br	81101c18 <bDdr2MemoryReadTest+0x1b4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101bc4:	e0ffe717 	ldw	r3,-100(fp)
81101bc8:	00b33374 	movhi	r2,52429
81101bcc:	10b33344 	addi	r2,r2,-13107
81101bd0:	1888383a 	mulxuu	r4,r3,r2
81101bd4:	1885383a 	mul	r2,r3,r2
81101bd8:	1021883a 	mov	r16,r2
81101bdc:	2023883a 	mov	r17,r4
81101be0:	8804d0fa 	srli	r2,r17,3
81101be4:	e0ffe817 	ldw	r3,-96(fp)
81101be8:	18c00044 	addi	r3,r3,1
81101bec:	10c7383a 	mul	r3,r2,r3
81101bf0:	e0bfe817 	ldw	r2,-96(fp)
81101bf4:	1085883a 	add	r2,r2,r2
81101bf8:	1085883a 	add	r2,r2,r2
81101bfc:	e13fe504 	addi	r4,fp,-108
81101c00:	2085883a 	add	r2,r4,r2
81101c04:	10800e04 	addi	r2,r2,56
81101c08:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101c0c:	e0bfe817 	ldw	r2,-96(fp)
81101c10:	10800044 	addi	r2,r2,1
81101c14:	e0bfe815 	stw	r2,-96(fp)
81101c18:	e0bfe817 	ldw	r2,-96(fp)
81101c1c:	10800290 	cmplti	r2,r2,10
81101c20:	103fe81e 	bne	r2,zero,81101bc4 <__reset+0xfb0e1bc4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101c24:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101c28:	00e044b4 	movhi	r3,33042
81101c2c:	18d14c04 	addi	r3,r3,17712
81101c30:	00a044b4 	movhi	r2,33042
81101c34:	1085d704 	addi	r2,r2,5980
81101c38:	1009883a 	mov	r4,r2
81101c3c:	008006c4 	movi	r2,27
81101c40:	100d883a 	mov	r6,r2
81101c44:	200b883a 	mov	r5,r4
81101c48:	1809883a 	mov	r4,r3
81101c4c:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
81101c50:	d0a02717 	ldw	r2,-32612(gp)
81101c54:	016044b4 	movhi	r5,33042
81101c58:	29514c04 	addi	r5,r5,17712
81101c5c:	1009883a 	mov	r4,r2
81101c60:	110b9140 	call	8110b914 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101c64:	d0a03417 	ldw	r2,-32560(gp)
#endif
	iTimeStart = alt_nticks();
81101c68:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101c6c:	e0bfe617 	ldw	r2,-104(fp)
81101c70:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101c74:	00810004 	movi	r2,1024
81101c78:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101c7c:	e0ffe917 	ldw	r3,-92(fp)
81101c80:	e0bfef17 	ldw	r2,-68(fp)
81101c84:	1885283a 	div	r2,r3,r2
81101c88:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101c8c:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101c90:	00006206 	br	81101e1c <bDdr2MemoryReadTest+0x3b8>
		iNRemainedLen = uliByteLen - iNPos;
81101c94:	e0bfed17 	ldw	r2,-76(fp)
81101c98:	e0ffe717 	ldw	r3,-100(fp)
81101c9c:	1885c83a 	sub	r2,r3,r2
81101ca0:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101ca4:	e0bfe917 	ldw	r2,-92(fp)
81101ca8:	e0fff217 	ldw	r3,-56(fp)
81101cac:	1880060e 	bge	r3,r2,81101cc8 <bDdr2MemoryReadTest+0x264>
			iNAccessLen = iNRemainedLen;
81101cb0:	e0bff217 	ldw	r2,-56(fp)
81101cb4:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101cb8:	e0ffe917 	ldw	r3,-92(fp)
81101cbc:	e0bfef17 	ldw	r2,-68(fp)
81101cc0:	1885283a 	div	r2,r3,r2
81101cc4:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101cc8:	00a044b4 	movhi	r2,33042
81101ccc:	10918c04 	addi	r2,r2,17968
81101cd0:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101cd4:	e03fe815 	stw	zero,-96(fp)
81101cd8:	00002b06 	br	81101d88 <bDdr2MemoryReadTest+0x324>
			if (*pxSrc++ != *pxDes++) {
81101cdc:	e0bfeb17 	ldw	r2,-84(fp)
81101ce0:	10c00104 	addi	r3,r2,4
81101ce4:	e0ffeb15 	stw	r3,-84(fp)
81101ce8:	10c00017 	ldw	r3,0(r2)
81101cec:	e0bfea17 	ldw	r2,-88(fp)
81101cf0:	11000104 	addi	r4,r2,4
81101cf4:	e13fea15 	stw	r4,-88(fp)
81101cf8:	10800017 	ldw	r2,0(r2)
81101cfc:	18801f26 	beq	r3,r2,81101d7c <bDdr2MemoryReadTest+0x318>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d00:	e0bfeb17 	ldw	r2,-84(fp)
81101d04:	10bfff04 	addi	r2,r2,-4
81101d08:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d0c:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d10:	00a044b4 	movhi	r2,33042
81101d14:	10918c04 	addi	r2,r2,17968
81101d18:	e0ffe817 	ldw	r3,-96(fp)
81101d1c:	18c7883a 	add	r3,r3,r3
81101d20:	18c7883a 	add	r3,r3,r3
81101d24:	10c5883a 	add	r2,r2,r3
81101d28:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d2c:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101d30:	e0ffed17 	ldw	r3,-76(fp)
81101d34:	e0bfef17 	ldw	r2,-68(fp)
81101d38:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d3c:	e0bfe817 	ldw	r2,-96(fp)
81101d40:	1885883a 	add	r2,r3,r2
81101d44:	d8800015 	stw	r2,0(sp)
81101d48:	280f883a 	mov	r7,r5
81101d4c:	200d883a 	mov	r6,r4
81101d50:	016044b4 	movhi	r5,33042
81101d54:	2945de04 	addi	r5,r5,6008
81101d58:	012044b4 	movhi	r4,33042
81101d5c:	21114c04 	addi	r4,r4,17712
81101d60:	110cfc80 	call	8110cfc8 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101d64:	d0a02717 	ldw	r2,-32612(gp)
81101d68:	016044b4 	movhi	r5,33042
81101d6c:	29514c04 	addi	r5,r5,17712
81101d70:	1009883a 	mov	r4,r2
81101d74:	110b9140 	call	8110b914 <fprintf>
#endif
				bSuccess = FALSE;
81101d78:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d7c:	e0bfe817 	ldw	r2,-96(fp)
81101d80:	10800044 	addi	r2,r2,1
81101d84:	e0bfe815 	stw	r2,-96(fp)
81101d88:	e0ffe817 	ldw	r3,-96(fp)
81101d8c:	e0bfec17 	ldw	r2,-80(fp)
81101d90:	1880020e 	bge	r3,r2,81101d9c <bDdr2MemoryReadTest+0x338>
81101d94:	e0bfe517 	ldw	r2,-108(fp)
81101d98:	103fd01e 	bne	r2,zero,81101cdc <__reset+0xfb0e1cdc>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101d9c:	e0ffed17 	ldw	r3,-76(fp)
81101da0:	e0bfe917 	ldw	r2,-92(fp)
81101da4:	1885883a 	add	r2,r3,r2
81101da8:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101dac:	e0bfee17 	ldw	r2,-72(fp)
81101db0:	10800288 	cmpgei	r2,r2,10
81101db4:	1000191e 	bne	r2,zero,81101e1c <bDdr2MemoryReadTest+0x3b8>
81101db8:	e0bfee17 	ldw	r2,-72(fp)
81101dbc:	1085883a 	add	r2,r2,r2
81101dc0:	1085883a 	add	r2,r2,r2
81101dc4:	e0ffe504 	addi	r3,fp,-108
81101dc8:	1885883a 	add	r2,r3,r2
81101dcc:	10800e04 	addi	r2,r2,56
81101dd0:	10800017 	ldw	r2,0(r2)
81101dd4:	e0ffed17 	ldw	r3,-76(fp)
81101dd8:	18801036 	bltu	r3,r2,81101e1c <bDdr2MemoryReadTest+0x3b8>
			iNProgressIndex++;
81101ddc:	e0bfee17 	ldw	r2,-72(fp)
81101de0:	10800044 	addi	r2,r2,1
81101de4:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101de8:	e0bfee17 	ldw	r2,-72(fp)
81101dec:	108002a4 	muli	r2,r2,10
81101df0:	100d883a 	mov	r6,r2
81101df4:	016044b4 	movhi	r5,33042
81101df8:	2945b304 	addi	r5,r5,5836
81101dfc:	012044b4 	movhi	r4,33042
81101e00:	21114c04 	addi	r4,r4,17712
81101e04:	110cfc80 	call	8110cfc8 <sprintf>
			debug(fp, cDebugBuffer);
81101e08:	d0a02717 	ldw	r2,-32612(gp)
81101e0c:	016044b4 	movhi	r5,33042
81101e10:	29514c04 	addi	r5,r5,17712
81101e14:	1009883a 	mov	r4,r2
81101e18:	110b9140 	call	8110b914 <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101e1c:	e0bfe517 	ldw	r2,-108(fp)
81101e20:	10000326 	beq	r2,zero,81101e30 <bDdr2MemoryReadTest+0x3cc>
81101e24:	e0ffed17 	ldw	r3,-76(fp)
81101e28:	e0bfe717 	ldw	r2,-100(fp)
81101e2c:	18bf9936 	bltu	r3,r2,81101c94 <__reset+0xfb0e1c94>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101e30:	00a044b4 	movhi	r2,33042
81101e34:	10914c04 	addi	r2,r2,17712
81101e38:	00c00284 	movi	r3,10
81101e3c:	10c00005 	stb	r3,0(r2)
81101e40:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101e44:	d0a02717 	ldw	r2,-32612(gp)
81101e48:	016044b4 	movhi	r5,33042
81101e4c:	29514c04 	addi	r5,r5,17712
81101e50:	1009883a 	mov	r4,r2
81101e54:	110b9140 	call	8110b914 <fprintf>
81101e58:	d0e03417 	ldw	r3,-32560(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101e5c:	e0bff117 	ldw	r2,-60(fp)
81101e60:	1885c83a 	sub	r2,r3,r2
81101e64:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101e68:	e0bfe517 	ldw	r2,-108(fp)
81101e6c:	10001e26 	beq	r2,zero,81101ee8 <bDdr2MemoryReadTest+0x484>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101e70:	e13ff017 	ldw	r4,-64(fp)
81101e74:	110ab980 	call	8110ab98 <__floatsisf>
81101e78:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101e7c:	d0a03317 	ldw	r2,-32564(gp)
81101e80:	1009883a 	mov	r4,r2
81101e84:	110acbc0 	call	8110acbc <__floatunsisf>
81101e88:	1007883a 	mov	r3,r2
81101e8c:	180b883a 	mov	r5,r3
81101e90:	8009883a 	mov	r4,r16
81101e94:	110a35c0 	call	8110a35c <__divsf3>
81101e98:	1007883a 	mov	r3,r2
81101e9c:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101ea0:	1009883a 	mov	r4,r2
81101ea4:	110b4c40 	call	8110b4c4 <__extendsfdf2>
81101ea8:	1009883a 	mov	r4,r2
81101eac:	180b883a 	mov	r5,r3
81101eb0:	d9400015 	stw	r5,0(sp)
81101eb4:	200f883a 	mov	r7,r4
81101eb8:	e1bfe717 	ldw	r6,-100(fp)
81101ebc:	016044b4 	movhi	r5,33042
81101ec0:	2945ec04 	addi	r5,r5,6064
81101ec4:	012044b4 	movhi	r4,33042
81101ec8:	21114c04 	addi	r4,r4,17712
81101ecc:	110cfc80 	call	8110cfc8 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101ed0:	d0a02717 	ldw	r2,-32612(gp)
81101ed4:	016044b4 	movhi	r5,33042
81101ed8:	29514c04 	addi	r5,r5,17712
81101edc:	1009883a 	mov	r4,r2
81101ee0:	110b9140 	call	8110b914 <fprintf>
81101ee4:	00000f06 	br	81101f24 <bDdr2MemoryReadTest+0x4c0>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101ee8:	00e044b4 	movhi	r3,33042
81101eec:	18d14c04 	addi	r3,r3,17712
81101ef0:	00a044b4 	movhi	r2,33042
81101ef4:	1085f804 	addi	r2,r2,6112
81101ef8:	1009883a 	mov	r4,r2
81101efc:	00800544 	movi	r2,21
81101f00:	100d883a 	mov	r6,r2
81101f04:	200b883a 	mov	r5,r4
81101f08:	1809883a 	mov	r4,r3
81101f0c:	110c9d40 	call	8110c9d4 <memcpy>
		debug(fp, cDebugBuffer);
81101f10:	d0a02717 	ldw	r2,-32612(gp)
81101f14:	016044b4 	movhi	r5,33042
81101f18:	29514c04 	addi	r5,r5,17712
81101f1c:	1009883a 	mov	r4,r2
81101f20:	110b9140 	call	8110b914 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101f24:	00a044b4 	movhi	r2,33042
81101f28:	10914c04 	addi	r2,r2,17712
81101f2c:	00c00284 	movi	r3,10
81101f30:	10c00005 	stb	r3,0(r2)
81101f34:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101f38:	d0a02717 	ldw	r2,-32612(gp)
81101f3c:	016044b4 	movhi	r5,33042
81101f40:	29514c04 	addi	r5,r5,17712
81101f44:	1009883a 	mov	r4,r2
81101f48:	110b9140 	call	8110b914 <fprintf>
#endif

	return bSuccess;
81101f4c:	e0bfe517 	ldw	r2,-108(fp)
}
81101f50:	e6fffe04 	addi	sp,fp,-8
81101f54:	dfc00317 	ldw	ra,12(sp)
81101f58:	df000217 	ldw	fp,8(sp)
81101f5c:	dc400117 	ldw	r17,4(sp)
81101f60:	dc000017 	ldw	r16,0(sp)
81101f64:	dec00404 	addi	sp,sp,16
81101f68:	f800283a 	ret

81101f6c <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81101f6c:	deffec04 	addi	sp,sp,-80
81101f70:	dfc01315 	stw	ra,76(sp)
81101f74:	df001215 	stw	fp,72(sp)
81101f78:	dcc01115 	stw	r19,68(sp)
81101f7c:	dc801015 	stw	r18,64(sp)
81101f80:	dc400f15 	stw	r17,60(sp)
81101f84:	dc000e15 	stw	r16,56(sp)
81101f88:	df001204 	addi	fp,sp,72
81101f8c:	2005883a 	mov	r2,r4
81101f90:	e17ffa15 	stw	r5,-24(fp)
81101f94:	e1bffb15 	stw	r6,-20(fp)
81101f98:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81101f9c:	00e044b4 	movhi	r3,33042
81101fa0:	18d14c04 	addi	r3,r3,17712
81101fa4:	00a044b4 	movhi	r2,33042
81101fa8:	1085fe04 	addi	r2,r2,6136
81101fac:	1009883a 	mov	r4,r2
81101fb0:	00800bc4 	movi	r2,47
81101fb4:	100d883a 	mov	r6,r2
81101fb8:	200b883a 	mov	r5,r4
81101fbc:	1809883a 	mov	r4,r3
81101fc0:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
81101fc4:	d0a02717 	ldw	r2,-32612(gp)
81101fc8:	016044b4 	movhi	r5,33042
81101fcc:	29514c04 	addi	r5,r5,17712
81101fd0:	1009883a 	mov	r4,r2
81101fd4:	110b9140 	call	8110b914 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101fd8:	00800044 	movi	r2,1
81101fdc:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
81101fe0:	e0bff903 	ldbu	r2,-28(fp)
81101fe4:	10c00060 	cmpeqi	r3,r2,1
81101fe8:	1800031e 	bne	r3,zero,81101ff8 <bDdr2MemoryRandomWriteTest+0x8c>
81101fec:	108000a0 	cmpeqi	r2,r2,2
81101ff0:	1000081e 	bne	r2,zero,81102014 <bDdr2MemoryRandomWriteTest+0xa8>
81101ff4:	00000e06 	br	81102030 <bDdr2MemoryRandomWriteTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101ff8:	e0bff903 	ldbu	r2,-28(fp)
81101ffc:	1009883a 	mov	r4,r2
81102000:	11014340 	call	81101434 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102004:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102008:	00a00034 	movhi	r2,32768
8110200c:	e0bff015 	stw	r2,-64(fp)
		break;
81102010:	00001906 	br	81102078 <bDdr2MemoryRandomWriteTest+0x10c>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102014:	e0bff903 	ldbu	r2,-28(fp)
81102018:	1009883a 	mov	r4,r2
8110201c:	11014340 	call	81101434 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102020:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102024:	00a00034 	movhi	r2,32768
81102028:	e0bff015 	stw	r2,-64(fp)
		break;
8110202c:	00001206 	br	81102078 <bDdr2MemoryRandomWriteTest+0x10c>
	default:
		bSuccess = FALSE;
81102030:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102034:	00e044b4 	movhi	r3,33042
81102038:	18d14c04 	addi	r3,r3,17712
8110203c:	00a044b4 	movhi	r2,33042
81102040:	1083af04 	addi	r2,r2,3772
81102044:	1009883a 	mov	r4,r2
81102048:	00800bc4 	movi	r2,47
8110204c:	100d883a 	mov	r6,r2
81102050:	200b883a 	mov	r5,r4
81102054:	1809883a 	mov	r4,r3
81102058:	110c9d40 	call	8110c9d4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8110205c:	d0a02717 	ldw	r2,-32612(gp)
81102060:	016044b4 	movhi	r5,33042
81102064:	29514c04 	addi	r5,r5,17712
81102068:	1009883a 	mov	r4,r2
8110206c:	110b9140 	call	8110b914 <fprintf>
		;
#endif
		return bSuccess;
81102070:	e0bff417 	ldw	r2,-48(fp)
81102074:	0000ce06 	br	811023b0 <bDdr2MemoryRandomWriteTest+0x444>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102078:	e0bff017 	ldw	r2,-64(fp)
8110207c:	1004d53a 	srli	r2,r2,20
81102080:	100d883a 	mov	r6,r2
81102084:	016044b4 	movhi	r5,33042
81102088:	2945a804 	addi	r5,r5,5792
8110208c:	012044b4 	movhi	r4,33042
81102090:	21114c04 	addi	r4,r4,17712
81102094:	110cfc80 	call	8110cfc8 <sprintf>
	debug(fp, cDebugBuffer);
81102098:	d0a02717 	ldw	r2,-32612(gp)
8110209c:	016044b4 	movhi	r5,33042
811020a0:	29514c04 	addi	r5,r5,17712
811020a4:	1009883a 	mov	r4,r2
811020a8:	110b9140 	call	8110b914 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811020ac:	d0a03417 	ldw	r2,-32560(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
811020b0:	d0a01415 	stw	r2,-32688(gp)
	uliCurrentState = uliInitialState;
811020b4:	d0a01417 	ldw	r2,-32688(gp)
811020b8:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
811020bc:	e0ffef17 	ldw	r3,-68(fp)
811020c0:	e0bff017 	ldw	r2,-64(fp)
811020c4:	1885883a 	add	r2,r3,r2
811020c8:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
811020cc:	e0fff017 	ldw	r3,-64(fp)
811020d0:	00b33374 	movhi	r2,52429
811020d4:	10b33344 	addi	r2,r2,-13107
811020d8:	1888383a 	mulxuu	r4,r3,r2
811020dc:	1885383a 	mul	r2,r3,r2
811020e0:	1025883a 	mov	r18,r2
811020e4:	2027883a 	mov	r19,r4
811020e8:	9806d13a 	srli	r3,r19,4
811020ec:	e0bfef17 	ldw	r2,-68(fp)
811020f0:	1885883a 	add	r2,r3,r2
811020f4:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
811020f8:	00800144 	movi	r2,5
811020fc:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
81102100:	00e044b4 	movhi	r3,33042
81102104:	18d14c04 	addi	r3,r3,17712
81102108:	00a044b4 	movhi	r2,33042
8110210c:	10860a04 	addi	r2,r2,6184
81102110:	1009883a 	mov	r4,r2
81102114:	00800584 	movi	r2,22
81102118:	100d883a 	mov	r6,r2
8110211c:	200b883a 	mov	r5,r4
81102120:	1809883a 	mov	r4,r3
81102124:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
81102128:	d0a02717 	ldw	r2,-32612(gp)
8110212c:	016044b4 	movhi	r5,33042
81102130:	29514c04 	addi	r5,r5,17712
81102134:	1009883a 	mov	r4,r2
81102138:	110b9140 	call	8110b914 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
8110213c:	e0bffa17 	ldw	r2,-24(fp)
81102140:	10800058 	cmpnei	r2,r2,1
81102144:	10000a1e 	bne	r2,zero,81102170 <bDdr2MemoryRandomWriteTest+0x204>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102148:	016044b4 	movhi	r5,33042
8110214c:	29461004 	addi	r5,r5,6208
81102150:	012044b4 	movhi	r4,33042
81102154:	21114c04 	addi	r4,r4,17712
81102158:	110cfc80 	call	8110cfc8 <sprintf>
		debug(fp, cDebugBuffer);
8110215c:	d0a02717 	ldw	r2,-32612(gp)
81102160:	016044b4 	movhi	r5,33042
81102164:	29514c04 	addi	r5,r5,17712
81102168:	1009883a 	mov	r4,r2
8110216c:	110b9140 	call	8110b914 <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
81102170:	e03ff615 	stw	zero,-40(fp)
81102174:	d0a03417 	ldw	r2,-32560(gp)

	TimeStart = alt_nticks();
81102178:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
8110217c:	e0bfef17 	ldw	r2,-68(fp)
81102180:	e0bff115 	stw	r2,-60(fp)
81102184:	00002c06 	br	81102238 <bDdr2MemoryRandomWriteTest+0x2cc>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
81102188:	e0bff804 	addi	r2,fp,-32
8110218c:	1009883a 	mov	r4,r2
81102190:	11028680 	call	81102868 <uliXorshift32>
81102194:	1007883a 	mov	r3,r2
81102198:	e0bff117 	ldw	r2,-60(fp)
8110219c:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
811021a0:	e0bffa17 	ldw	r2,-24(fp)
811021a4:	10800060 	cmpeqi	r2,r2,1
811021a8:	1009883a 	mov	r4,r2
811021ac:	e0bff117 	ldw	r2,-60(fp)
811021b0:	e0fff217 	ldw	r3,-56(fp)
811021b4:	1885803a 	cmpltu	r2,r3,r2
811021b8:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
811021bc:	10803fcc 	andi	r2,r2,255
811021c0:	10001a26 	beq	r2,zero,8110222c <bDdr2MemoryRandomWriteTest+0x2c0>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
811021c4:	e0bff303 	ldbu	r2,-52(fp)
811021c8:	100d883a 	mov	r6,r2
811021cc:	016044b4 	movhi	r5,33042
811021d0:	29461204 	addi	r5,r5,6216
811021d4:	012044b4 	movhi	r4,33042
811021d8:	21114c04 	addi	r4,r4,17712
811021dc:	110cfc80 	call	8110cfc8 <sprintf>
			debug(fp, cDebugBuffer);
811021e0:	d0a02717 	ldw	r2,-32612(gp)
811021e4:	016044b4 	movhi	r5,33042
811021e8:	29514c04 	addi	r5,r5,17712
811021ec:	1009883a 	mov	r4,r2
811021f0:	110b9140 	call	8110b914 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811021f4:	e0fff017 	ldw	r3,-64(fp)
811021f8:	00b33374 	movhi	r2,52429
811021fc:	10b33344 	addi	r2,r2,-13107
81102200:	1888383a 	mulxuu	r4,r3,r2
81102204:	1885383a 	mul	r2,r3,r2
81102208:	1021883a 	mov	r16,r2
8110220c:	2023883a 	mov	r17,r4
81102210:	8804d13a 	srli	r2,r17,4
81102214:	e0fff217 	ldw	r3,-56(fp)
81102218:	1885883a 	add	r2,r3,r2
8110221c:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
81102220:	e0bff303 	ldbu	r2,-52(fp)
81102224:	10800144 	addi	r2,r2,5
81102228:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
8110222c:	e0bff117 	ldw	r2,-60(fp)
81102230:	10800104 	addi	r2,r2,4
81102234:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
81102238:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
8110223c:	e0bff517 	ldw	r2,-44(fp)
81102240:	18bfd136 	bltu	r3,r2,81102188 <__reset+0xfb0e2188>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81102244:	111bc740 	call	8111bc74 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102248:	e0bffa17 	ldw	r2,-24(fp)
8110224c:	10800058 	cmpnei	r2,r2,1
81102250:	10000a1e 	bne	r2,zero,8110227c <bDdr2MemoryRandomWriteTest+0x310>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
81102254:	016044b4 	movhi	r5,33042
81102258:	29461504 	addi	r5,r5,6228
8110225c:	012044b4 	movhi	r4,33042
81102260:	21114c04 	addi	r4,r4,17712
81102264:	110cfc80 	call	8110cfc8 <sprintf>
		debug(fp, cDebugBuffer);
81102268:	d0a02717 	ldw	r2,-32612(gp)
8110226c:	016044b4 	movhi	r5,33042
81102270:	29514c04 	addi	r5,r5,17712
81102274:	1009883a 	mov	r4,r2
81102278:	110b9140 	call	8110b914 <fprintf>
#endif
	}

	if (bSuccess) {
8110227c:	e0bff417 	ldw	r2,-48(fp)
81102280:	10003126 	beq	r2,zero,81102348 <bDdr2MemoryRandomWriteTest+0x3dc>
		if (bTime == TRUE) {
81102284:	e0bffb17 	ldw	r2,-20(fp)
81102288:	10800058 	cmpnei	r2,r2,1
8110228c:	1000221e 	bne	r2,zero,81102318 <bDdr2MemoryRandomWriteTest+0x3ac>
81102290:	d0e03417 	ldw	r3,-32560(gp)
			TimeElapsed = alt_nticks() - TimeStart;
81102294:	e0bff717 	ldw	r2,-36(fp)
81102298:	1885c83a 	sub	r2,r3,r2
8110229c:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811022a0:	e13ff617 	ldw	r4,-40(fp)
811022a4:	110ab980 	call	8110ab98 <__floatsisf>
811022a8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811022ac:	d0a03317 	ldw	r2,-32564(gp)
811022b0:	1009883a 	mov	r4,r2
811022b4:	110acbc0 	call	8110acbc <__floatunsisf>
811022b8:	1007883a 	mov	r3,r2
811022bc:	180b883a 	mov	r5,r3
811022c0:	8009883a 	mov	r4,r16
811022c4:	110a35c0 	call	8110a35c <__divsf3>
811022c8:	1007883a 	mov	r3,r2
811022cc:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
811022d0:	1009883a 	mov	r4,r2
811022d4:	110b4c40 	call	8110b4c4 <__extendsfdf2>
811022d8:	1009883a 	mov	r4,r2
811022dc:	180b883a 	mov	r5,r3
811022e0:	d9400015 	stw	r5,0(sp)
811022e4:	200f883a 	mov	r7,r4
811022e8:	e1bff017 	ldw	r6,-64(fp)
811022ec:	016044b4 	movhi	r5,33042
811022f0:	29461804 	addi	r5,r5,6240
811022f4:	012044b4 	movhi	r4,33042
811022f8:	21114c04 	addi	r4,r4,17712
811022fc:	110cfc80 	call	8110cfc8 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
81102300:	d0a02717 	ldw	r2,-32612(gp)
81102304:	016044b4 	movhi	r5,33042
81102308:	29514c04 	addi	r5,r5,17712
8110230c:	1009883a 	mov	r4,r2
81102310:	110b9140 	call	8110b914 <fprintf>
81102314:	00001b06 	br	81102384 <bDdr2MemoryRandomWriteTest+0x418>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
81102318:	e1bff017 	ldw	r6,-64(fp)
8110231c:	016044b4 	movhi	r5,33042
81102320:	29462404 	addi	r5,r5,6288
81102324:	012044b4 	movhi	r4,33042
81102328:	21114c04 	addi	r4,r4,17712
8110232c:	110cfc80 	call	8110cfc8 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102330:	d0a02717 	ldw	r2,-32612(gp)
81102334:	016044b4 	movhi	r5,33042
81102338:	29514c04 	addi	r5,r5,17712
8110233c:	1009883a 	mov	r4,r2
81102340:	110b9140 	call	8110b914 <fprintf>
81102344:	00000f06 	br	81102384 <bDdr2MemoryRandomWriteTest+0x418>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102348:	00e044b4 	movhi	r3,33042
8110234c:	18d14c04 	addi	r3,r3,17712
81102350:	00a044b4 	movhi	r2,33042
81102354:	1085c104 	addi	r2,r2,5892
81102358:	1009883a 	mov	r4,r2
8110235c:	00800584 	movi	r2,22
81102360:	100d883a 	mov	r6,r2
81102364:	200b883a 	mov	r5,r4
81102368:	1809883a 	mov	r4,r3
8110236c:	110c9d40 	call	8110c9d4 <memcpy>
		debug(fp, cDebugBuffer);
81102370:	d0a02717 	ldw	r2,-32612(gp)
81102374:	016044b4 	movhi	r5,33042
81102378:	29514c04 	addi	r5,r5,17712
8110237c:	1009883a 	mov	r4,r2
81102380:	110b9140 	call	8110b914 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81102384:	00a044b4 	movhi	r2,33042
81102388:	10914c04 	addi	r2,r2,17712
8110238c:	00c00284 	movi	r3,10
81102390:	10c00005 	stb	r3,0(r2)
81102394:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102398:	d0a02717 	ldw	r2,-32612(gp)
8110239c:	016044b4 	movhi	r5,33042
811023a0:	29514c04 	addi	r5,r5,17712
811023a4:	1009883a 	mov	r4,r2
811023a8:	110b9140 	call	8110b914 <fprintf>
#endif

	return bSuccess;
811023ac:	e0bff417 	ldw	r2,-48(fp)
}
811023b0:	e6fffc04 	addi	sp,fp,-16
811023b4:	dfc00517 	ldw	ra,20(sp)
811023b8:	df000417 	ldw	fp,16(sp)
811023bc:	dcc00317 	ldw	r19,12(sp)
811023c0:	dc800217 	ldw	r18,8(sp)
811023c4:	dc400117 	ldw	r17,4(sp)
811023c8:	dc000017 	ldw	r16,0(sp)
811023cc:	dec00604 	addi	sp,sp,24
811023d0:	f800283a 	ret

811023d4 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
811023d4:	deffec04 	addi	sp,sp,-80
811023d8:	dfc01315 	stw	ra,76(sp)
811023dc:	df001215 	stw	fp,72(sp)
811023e0:	dcc01115 	stw	r19,68(sp)
811023e4:	dc801015 	stw	r18,64(sp)
811023e8:	dc400f15 	stw	r17,60(sp)
811023ec:	dc000e15 	stw	r16,56(sp)
811023f0:	df001204 	addi	fp,sp,72
811023f4:	2005883a 	mov	r2,r4
811023f8:	e17ffa15 	stw	r5,-24(fp)
811023fc:	e1bffb15 	stw	r6,-20(fp)
81102400:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
81102404:	00e044b4 	movhi	r3,33042
81102408:	18d14c04 	addi	r3,r3,17712
8110240c:	00a044b4 	movhi	r2,33042
81102410:	10862e04 	addi	r2,r2,6328
81102414:	1009883a 	mov	r4,r2
81102418:	00800b84 	movi	r2,46
8110241c:	100d883a 	mov	r6,r2
81102420:	200b883a 	mov	r5,r4
81102424:	1809883a 	mov	r4,r3
81102428:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
8110242c:	d0a02717 	ldw	r2,-32612(gp)
81102430:	016044b4 	movhi	r5,33042
81102434:	29514c04 	addi	r5,r5,17712
81102438:	1009883a 	mov	r4,r2
8110243c:	110b9140 	call	8110b914 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102440:	00800044 	movi	r2,1
81102444:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
81102448:	e0bff903 	ldbu	r2,-28(fp)
8110244c:	10c00060 	cmpeqi	r3,r2,1
81102450:	1800031e 	bne	r3,zero,81102460 <bDdr2MemoryRandomReadTest+0x8c>
81102454:	108000a0 	cmpeqi	r2,r2,2
81102458:	1000081e 	bne	r2,zero,8110247c <bDdr2MemoryRandomReadTest+0xa8>
8110245c:	00000e06 	br	81102498 <bDdr2MemoryRandomReadTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102460:	e0bff903 	ldbu	r2,-28(fp)
81102464:	1009883a 	mov	r4,r2
81102468:	11014340 	call	81101434 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110246c:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102470:	00a00034 	movhi	r2,32768
81102474:	e0bff115 	stw	r2,-60(fp)
		break;
81102478:	00001906 	br	811024e0 <bDdr2MemoryRandomReadTest+0x10c>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
8110247c:	e0bff903 	ldbu	r2,-28(fp)
81102480:	1009883a 	mov	r4,r2
81102484:	11014340 	call	81101434 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102488:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
8110248c:	00a00034 	movhi	r2,32768
81102490:	e0bff115 	stw	r2,-60(fp)
		break;
81102494:	00001206 	br	811024e0 <bDdr2MemoryRandomReadTest+0x10c>
	default:
		bSuccess = FALSE;
81102498:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110249c:	00e044b4 	movhi	r3,33042
811024a0:	18d14c04 	addi	r3,r3,17712
811024a4:	00a044b4 	movhi	r2,33042
811024a8:	1083af04 	addi	r2,r2,3772
811024ac:	1009883a 	mov	r4,r2
811024b0:	00800bc4 	movi	r2,47
811024b4:	100d883a 	mov	r6,r2
811024b8:	200b883a 	mov	r5,r4
811024bc:	1809883a 	mov	r4,r3
811024c0:	110c9d40 	call	8110c9d4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811024c4:	d0a02717 	ldw	r2,-32612(gp)
811024c8:	016044b4 	movhi	r5,33042
811024cc:	29514c04 	addi	r5,r5,17712
811024d0:	1009883a 	mov	r4,r2
811024d4:	110b9140 	call	8110b914 <fprintf>
		;
#endif
		return bSuccess;
811024d8:	e0bfef17 	ldw	r2,-68(fp)
811024dc:	0000d906 	br	81102844 <bDdr2MemoryRandomReadTest+0x470>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811024e0:	e0bff117 	ldw	r2,-60(fp)
811024e4:	1004d53a 	srli	r2,r2,20
811024e8:	100d883a 	mov	r6,r2
811024ec:	016044b4 	movhi	r5,33042
811024f0:	2945a804 	addi	r5,r5,5792
811024f4:	012044b4 	movhi	r4,33042
811024f8:	21114c04 	addi	r4,r4,17712
811024fc:	110cfc80 	call	8110cfc8 <sprintf>
	debug(fp, cDebugBuffer);
81102500:	d0a02717 	ldw	r2,-32612(gp)
81102504:	016044b4 	movhi	r5,33042
81102508:	29514c04 	addi	r5,r5,17712
8110250c:	1009883a 	mov	r4,r2
81102510:	110b9140 	call	8110b914 <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
81102514:	d0a01417 	ldw	r2,-32688(gp)
81102518:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
8110251c:	e0fff017 	ldw	r3,-64(fp)
81102520:	e0bff117 	ldw	r2,-60(fp)
81102524:	1885883a 	add	r2,r3,r2
81102528:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
8110252c:	e0fff117 	ldw	r3,-60(fp)
81102530:	00b33374 	movhi	r2,52429
81102534:	10b33344 	addi	r2,r2,-13107
81102538:	1888383a 	mulxuu	r4,r3,r2
8110253c:	1885383a 	mul	r2,r3,r2
81102540:	1025883a 	mov	r18,r2
81102544:	2027883a 	mov	r19,r4
81102548:	9806d13a 	srli	r3,r19,4
8110254c:	e0bff017 	ldw	r2,-64(fp)
81102550:	1885883a 	add	r2,r3,r2
81102554:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
81102558:	00800144 	movi	r2,5
8110255c:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
81102560:	00e044b4 	movhi	r3,33042
81102564:	18d14c04 	addi	r3,r3,17712
81102568:	00a044b4 	movhi	r2,33042
8110256c:	10863a04 	addi	r2,r2,6376
81102570:	1009883a 	mov	r4,r2
81102574:	00800604 	movi	r2,24
81102578:	100d883a 	mov	r6,r2
8110257c:	200b883a 	mov	r5,r4
81102580:	1809883a 	mov	r4,r3
81102584:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
81102588:	d0a02717 	ldw	r2,-32612(gp)
8110258c:	016044b4 	movhi	r5,33042
81102590:	29514c04 	addi	r5,r5,17712
81102594:	1009883a 	mov	r4,r2
81102598:	110b9140 	call	8110b914 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
8110259c:	e0bffa17 	ldw	r2,-24(fp)
811025a0:	10800058 	cmpnei	r2,r2,1
811025a4:	10000a1e 	bne	r2,zero,811025d0 <bDdr2MemoryRandomReadTest+0x1fc>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
811025a8:	016044b4 	movhi	r5,33042
811025ac:	29461004 	addi	r5,r5,6208
811025b0:	012044b4 	movhi	r4,33042
811025b4:	21114c04 	addi	r4,r4,17712
811025b8:	110cfc80 	call	8110cfc8 <sprintf>
		debug(fp, cDebugBuffer);
811025bc:	d0a02717 	ldw	r2,-32612(gp)
811025c0:	016044b4 	movhi	r5,33042
811025c4:	29514c04 	addi	r5,r5,17712
811025c8:	1009883a 	mov	r4,r2
811025cc:	110b9140 	call	8110b914 <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
811025d0:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811025d4:	d0a03417 	ldw	r2,-32560(gp)

	TimeStart = alt_nticks();
811025d8:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
811025dc:	e0bff017 	ldw	r2,-64(fp)
811025e0:	e0bff215 	stw	r2,-56(fp)
811025e4:	00003a06 	br	811026d0 <bDdr2MemoryRandomReadTest+0x2fc>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
811025e8:	e0bff804 	addi	r2,fp,-32
811025ec:	1009883a 	mov	r4,r2
811025f0:	11028680 	call	81102868 <uliXorshift32>
811025f4:	1007883a 	mov	r3,r2
811025f8:	e0bff217 	ldw	r2,-56(fp)
811025fc:	10800017 	ldw	r2,0(r2)
81102600:	18801026 	beq	r3,r2,81102644 <bDdr2MemoryRandomReadTest+0x270>
			bSuccess = FALSE;
81102604:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
81102608:	e0bffa17 	ldw	r2,-24(fp)
8110260c:	10800058 	cmpnei	r2,r2,1
81102610:	10000c1e 	bne	r2,zero,81102644 <bDdr2MemoryRandomReadTest+0x270>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
81102614:	e0bff217 	ldw	r2,-56(fp)
81102618:	100d883a 	mov	r6,r2
8110261c:	016044b4 	movhi	r5,33042
81102620:	29464004 	addi	r5,r5,6400
81102624:	012044b4 	movhi	r4,33042
81102628:	21114c04 	addi	r4,r4,17712
8110262c:	110cfc80 	call	8110cfc8 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
81102630:	d0a02717 	ldw	r2,-32612(gp)
81102634:	016044b4 	movhi	r5,33042
81102638:	29514c04 	addi	r5,r5,17712
8110263c:	1009883a 	mov	r4,r2
81102640:	110b9140 	call	8110b914 <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102644:	e0bffa17 	ldw	r2,-24(fp)
81102648:	10800058 	cmpnei	r2,r2,1
8110264c:	10001d1e 	bne	r2,zero,811026c4 <bDdr2MemoryRandomReadTest+0x2f0>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
81102650:	e0bff217 	ldw	r2,-56(fp)
81102654:	e0fff317 	ldw	r3,-52(fp)
81102658:	18801a2e 	bgeu	r3,r2,811026c4 <bDdr2MemoryRandomReadTest+0x2f0>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
8110265c:	e0bff403 	ldbu	r2,-48(fp)
81102660:	100d883a 	mov	r6,r2
81102664:	016044b4 	movhi	r5,33042
81102668:	29461204 	addi	r5,r5,6216
8110266c:	012044b4 	movhi	r4,33042
81102670:	21114c04 	addi	r4,r4,17712
81102674:	110cfc80 	call	8110cfc8 <sprintf>
			debug(fp, cDebugBuffer);
81102678:	d0a02717 	ldw	r2,-32612(gp)
8110267c:	016044b4 	movhi	r5,33042
81102680:	29514c04 	addi	r5,r5,17712
81102684:	1009883a 	mov	r4,r2
81102688:	110b9140 	call	8110b914 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
8110268c:	e0fff117 	ldw	r3,-60(fp)
81102690:	00b33374 	movhi	r2,52429
81102694:	10b33344 	addi	r2,r2,-13107
81102698:	1888383a 	mulxuu	r4,r3,r2
8110269c:	1885383a 	mul	r2,r3,r2
811026a0:	1021883a 	mov	r16,r2
811026a4:	2023883a 	mov	r17,r4
811026a8:	8804d13a 	srli	r2,r17,4
811026ac:	e0fff317 	ldw	r3,-52(fp)
811026b0:	1885883a 	add	r2,r3,r2
811026b4:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
811026b8:	e0bff403 	ldbu	r2,-48(fp)
811026bc:	10800144 	addi	r2,r2,5
811026c0:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
811026c4:	e0bff217 	ldw	r2,-56(fp)
811026c8:	10800104 	addi	r2,r2,4
811026cc:	e0bff215 	stw	r2,-56(fp)
811026d0:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
811026d4:	e0bff517 	ldw	r2,-44(fp)
811026d8:	18bfc336 	bltu	r3,r2,811025e8 <__reset+0xfb0e25e8>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
811026dc:	e0bffa17 	ldw	r2,-24(fp)
811026e0:	10800058 	cmpnei	r2,r2,1
811026e4:	10000a1e 	bne	r2,zero,81102710 <bDdr2MemoryRandomReadTest+0x33c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811026e8:	016044b4 	movhi	r5,33042
811026ec:	29461504 	addi	r5,r5,6228
811026f0:	012044b4 	movhi	r4,33042
811026f4:	21114c04 	addi	r4,r4,17712
811026f8:	110cfc80 	call	8110cfc8 <sprintf>
		debug(fp, cDebugBuffer);
811026fc:	d0a02717 	ldw	r2,-32612(gp)
81102700:	016044b4 	movhi	r5,33042
81102704:	29514c04 	addi	r5,r5,17712
81102708:	1009883a 	mov	r4,r2
8110270c:	110b9140 	call	8110b914 <fprintf>
#endif
	}

	if (bSuccess) {
81102710:	e0bfef17 	ldw	r2,-68(fp)
81102714:	10003126 	beq	r2,zero,811027dc <bDdr2MemoryRandomReadTest+0x408>
		if (bTime == TRUE) {
81102718:	e0bffb17 	ldw	r2,-20(fp)
8110271c:	10800058 	cmpnei	r2,r2,1
81102720:	1000221e 	bne	r2,zero,811027ac <bDdr2MemoryRandomReadTest+0x3d8>
81102724:	d0e03417 	ldw	r3,-32560(gp)
			TimeElapsed = alt_nticks() - TimeStart;
81102728:	e0bff717 	ldw	r2,-36(fp)
8110272c:	1885c83a 	sub	r2,r3,r2
81102730:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
81102734:	e13ff617 	ldw	r4,-40(fp)
81102738:	110ab980 	call	8110ab98 <__floatsisf>
8110273c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102740:	d0a03317 	ldw	r2,-32564(gp)
81102744:	1009883a 	mov	r4,r2
81102748:	110acbc0 	call	8110acbc <__floatunsisf>
8110274c:	1007883a 	mov	r3,r2
81102750:	180b883a 	mov	r5,r3
81102754:	8009883a 	mov	r4,r16
81102758:	110a35c0 	call	8110a35c <__divsf3>
8110275c:	1007883a 	mov	r3,r2
81102760:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
81102764:	1009883a 	mov	r4,r2
81102768:	110b4c40 	call	8110b4c4 <__extendsfdf2>
8110276c:	1009883a 	mov	r4,r2
81102770:	180b883a 	mov	r5,r3
81102774:	d9400015 	stw	r5,0(sp)
81102778:	200f883a 	mov	r7,r4
8110277c:	e1bff117 	ldw	r6,-60(fp)
81102780:	016044b4 	movhi	r5,33042
81102784:	29464804 	addi	r5,r5,6432
81102788:	012044b4 	movhi	r4,33042
8110278c:	21114c04 	addi	r4,r4,17712
81102790:	110cfc80 	call	8110cfc8 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
81102794:	d0a02717 	ldw	r2,-32612(gp)
81102798:	016044b4 	movhi	r5,33042
8110279c:	29514c04 	addi	r5,r5,17712
811027a0:	1009883a 	mov	r4,r2
811027a4:	110b9140 	call	8110b914 <fprintf>
811027a8:	00001b06 	br	81102818 <bDdr2MemoryRandomReadTest+0x444>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
811027ac:	e1bff117 	ldw	r6,-60(fp)
811027b0:	016044b4 	movhi	r5,33042
811027b4:	29465404 	addi	r5,r5,6480
811027b8:	012044b4 	movhi	r4,33042
811027bc:	21114c04 	addi	r4,r4,17712
811027c0:	110cfc80 	call	8110cfc8 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
811027c4:	d0a02717 	ldw	r2,-32612(gp)
811027c8:	016044b4 	movhi	r5,33042
811027cc:	29514c04 	addi	r5,r5,17712
811027d0:	1009883a 	mov	r4,r2
811027d4:	110b9140 	call	8110b914 <fprintf>
811027d8:	00000f06 	br	81102818 <bDdr2MemoryRandomReadTest+0x444>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
811027dc:	00e044b4 	movhi	r3,33042
811027e0:	18d14c04 	addi	r3,r3,17712
811027e4:	00a044b4 	movhi	r2,33042
811027e8:	1085f804 	addi	r2,r2,6112
811027ec:	1009883a 	mov	r4,r2
811027f0:	00800544 	movi	r2,21
811027f4:	100d883a 	mov	r6,r2
811027f8:	200b883a 	mov	r5,r4
811027fc:	1809883a 	mov	r4,r3
81102800:	110c9d40 	call	8110c9d4 <memcpy>
		debug(fp, cDebugBuffer);
81102804:	d0a02717 	ldw	r2,-32612(gp)
81102808:	016044b4 	movhi	r5,33042
8110280c:	29514c04 	addi	r5,r5,17712
81102810:	1009883a 	mov	r4,r2
81102814:	110b9140 	call	8110b914 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81102818:	00a044b4 	movhi	r2,33042
8110281c:	10914c04 	addi	r2,r2,17712
81102820:	00c00284 	movi	r3,10
81102824:	10c00005 	stb	r3,0(r2)
81102828:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
8110282c:	d0a02717 	ldw	r2,-32612(gp)
81102830:	016044b4 	movhi	r5,33042
81102834:	29514c04 	addi	r5,r5,17712
81102838:	1009883a 	mov	r4,r2
8110283c:	110b9140 	call	8110b914 <fprintf>
#endif

	return bSuccess;
81102840:	e0bfef17 	ldw	r2,-68(fp)
}
81102844:	e6fffc04 	addi	sp,fp,-16
81102848:	dfc00517 	ldw	ra,20(sp)
8110284c:	df000417 	ldw	fp,16(sp)
81102850:	dcc00317 	ldw	r19,12(sp)
81102854:	dc800217 	ldw	r18,8(sp)
81102858:	dc400117 	ldw	r17,4(sp)
8110285c:	dc000017 	ldw	r16,0(sp)
81102860:	dec00604 	addi	sp,sp,24
81102864:	f800283a 	ret

81102868 <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
81102868:	defffd04 	addi	sp,sp,-12
8110286c:	df000215 	stw	fp,8(sp)
81102870:	df000204 	addi	fp,sp,8
81102874:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
81102878:	e0bfff17 	ldw	r2,-4(fp)
8110287c:	10800017 	ldw	r2,0(r2)
81102880:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
81102884:	e0bffe17 	ldw	r2,-8(fp)
81102888:	1004937a 	slli	r2,r2,13
8110288c:	e0fffe17 	ldw	r3,-8(fp)
81102890:	1884f03a 	xor	r2,r3,r2
81102894:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
81102898:	e0bffe17 	ldw	r2,-8(fp)
8110289c:	1004d47a 	srli	r2,r2,17
811028a0:	e0fffe17 	ldw	r3,-8(fp)
811028a4:	1884f03a 	xor	r2,r3,r2
811028a8:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
811028ac:	e0bffe17 	ldw	r2,-8(fp)
811028b0:	1004917a 	slli	r2,r2,5
811028b4:	e0fffe17 	ldw	r3,-8(fp)
811028b8:	1884f03a 	xor	r2,r3,r2
811028bc:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
811028c0:	e0bfff17 	ldw	r2,-4(fp)
811028c4:	e0fffe17 	ldw	r3,-8(fp)
811028c8:	10c00015 	stw	r3,0(r2)

	return uliX;
811028cc:	e0bffe17 	ldw	r2,-8(fp)
}
811028d0:	e037883a 	mov	sp,fp
811028d4:	df000017 	ldw	fp,0(sp)
811028d8:	dec00104 	addi	sp,sp,4
811028dc:	f800283a 	ret

811028e0 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
811028e0:	deffef04 	addi	sp,sp,-68
811028e4:	dfc01015 	stw	ra,64(sp)
811028e8:	df000f15 	stw	fp,60(sp)
811028ec:	df000f04 	addi	fp,sp,60
811028f0:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
811028f4:	00800044 	movi	r2,1
811028f8:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
811028fc:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
81102900:	00800204 	movi	r2,8
81102904:	e0bffc15 	stw	r2,-16(fp)
81102908:	00800104 	movi	r2,4
8110290c:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
81102910:	00800044 	movi	r2,1
81102914:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
81102918:	00800044 	movi	r2,1
8110291c:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102920:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102924:	e03ff515 	stw	zero,-44(fp)
81102928:	00009206 	br	81102b74 <POWER_Read+0x294>
		NextChannel = 0;
8110292c:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81102930:	e0bff517 	ldw	r2,-44(fp)
81102934:	10c03fcc 	andi	r3,r2,255
81102938:	e13ffa03 	ldbu	r4,-24(fp)
8110293c:	e0bfff17 	ldw	r2,-4(fp)
81102940:	d8800115 	stw	r2,4(sp)
81102944:	e0bff917 	ldw	r2,-28(fp)
81102948:	d8800015 	stw	r2,0(sp)
8110294c:	e1fff817 	ldw	r7,-32(fp)
81102950:	e1bff717 	ldw	r6,-36(fp)
81102954:	200b883a 	mov	r5,r4
81102958:	1809883a 	mov	r4,r3
8110295c:	11063480 	call	81106348 <POWER_SPI_RW>
81102960:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81102964:	e03ff415 	stw	zero,-48(fp)
81102968:	00007406 	br	81102b3c <POWER_Read+0x25c>
			NextChannel = i + 1;
8110296c:	e0bff417 	ldw	r2,-48(fp)
81102970:	10800044 	addi	r2,r2,1
81102974:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81102978:	e0bff517 	ldw	r2,-44(fp)
8110297c:	10c03fcc 	andi	r3,r2,255
81102980:	e13ffa03 	ldbu	r4,-24(fp)
81102984:	e0bffe04 	addi	r2,fp,-8
81102988:	d8800115 	stw	r2,4(sp)
8110298c:	e0bff917 	ldw	r2,-28(fp)
81102990:	d8800015 	stw	r2,0(sp)
81102994:	e1fff817 	ldw	r7,-32(fp)
81102998:	e1bff717 	ldw	r6,-36(fp)
8110299c:	200b883a 	mov	r5,r4
811029a0:	1809883a 	mov	r4,r3
811029a4:	11063480 	call	81106348 <POWER_SPI_RW>
811029a8:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
811029ac:	e0bff317 	ldw	r2,-52(fp)
811029b0:	10005026 	beq	r2,zero,81102af4 <POWER_Read+0x214>
				HEAD = (Value32 >> 30) & 0x03;
811029b4:	e0bffe17 	ldw	r2,-8(fp)
811029b8:	1004d7ba 	srli	r2,r2,30
811029bc:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
811029c0:	e0bffe17 	ldw	r2,-8(fp)
811029c4:	1004d07a 	srli	r2,r2,1
811029c8:	108001cc 	andi	r2,r2,7
811029cc:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
811029d0:	e0bffe17 	ldw	r2,-8(fp)
811029d4:	1004d13a 	srli	r2,r2,4
811029d8:	1080004c 	andi	r2,r2,1
811029dc:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
811029e0:	e0bffe17 	ldw	r2,-8(fp)
811029e4:	1004d17a 	srli	r2,r2,5
811029e8:	1080004c 	andi	r2,r2,1
811029ec:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
811029f0:	e0bffe17 	ldw	r2,-8(fp)
811029f4:	1080004c 	andi	r2,r2,1
811029f8:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
811029fc:	e0bffa43 	ldbu	r2,-23(fp)
81102a00:	10000d26 	beq	r2,zero,81102a38 <POWER_Read+0x158>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
81102a04:	e1bff417 	ldw	r6,-48(fp)
81102a08:	016044b4 	movhi	r5,33042
81102a0c:	29465e04 	addi	r5,r5,6520
81102a10:	012044b4 	movhi	r4,33042
81102a14:	21114c04 	addi	r4,r4,17712
81102a18:	110cfc80 	call	8110cfc8 <sprintf>
					debug(fp, cDebugBuffer);
81102a1c:	d0a02717 	ldw	r2,-32612(gp)
81102a20:	016044b4 	movhi	r5,33042
81102a24:	29514c04 	addi	r5,r5,17712
81102a28:	1009883a 	mov	r4,r2
81102a2c:	110b9140 	call	8110b914 <fprintf>
#endif
					bSuccess = FALSE;
81102a30:	e03ff315 	stw	zero,-52(fp)
81102a34:	00002206 	br	81102ac0 <POWER_Read+0x1e0>
				} else if (Channel != i) {
81102a38:	e0fffa83 	ldbu	r3,-22(fp)
81102a3c:	e0bff417 	ldw	r2,-48(fp)
81102a40:	18801026 	beq	r3,r2,81102a84 <POWER_Read+0x1a4>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
81102a44:	e0bffa83 	ldbu	r2,-22(fp)
81102a48:	d8800015 	stw	r2,0(sp)
81102a4c:	e1fff417 	ldw	r7,-48(fp)
81102a50:	e1bff417 	ldw	r6,-48(fp)
81102a54:	016044b4 	movhi	r5,33042
81102a58:	29466404 	addi	r5,r5,6544
81102a5c:	012044b4 	movhi	r4,33042
81102a60:	21114c04 	addi	r4,r4,17712
81102a64:	110cfc80 	call	8110cfc8 <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
81102a68:	d0a02717 	ldw	r2,-32612(gp)
81102a6c:	016044b4 	movhi	r5,33042
81102a70:	29514c04 	addi	r5,r5,17712
81102a74:	1009883a 	mov	r4,r2
81102a78:	110b9140 	call	8110b914 <fprintf>
#endif
					bSuccess = FALSE;
81102a7c:	e03ff315 	stw	zero,-52(fp)
81102a80:	00000f06 	br	81102ac0 <POWER_Read+0x1e0>
				} else if (SIGN ^ bSIGN) {
81102a84:	e0fffac3 	ldbu	r3,-21(fp)
81102a88:	e0bff817 	ldw	r2,-32(fp)
81102a8c:	18800c26 	beq	r3,r2,81102ac0 <POWER_Read+0x1e0>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
81102a90:	e1bff417 	ldw	r6,-48(fp)
81102a94:	016044b4 	movhi	r5,33042
81102a98:	29467004 	addi	r5,r5,6592
81102a9c:	012044b4 	movhi	r4,33042
81102aa0:	21114c04 	addi	r4,r4,17712
81102aa4:	110cfc80 	call	8110cfc8 <sprintf>
					debug(fp, cDebugBuffer);
81102aa8:	d0a02717 	ldw	r2,-32612(gp)
81102aac:	016044b4 	movhi	r5,33042
81102ab0:	29514c04 	addi	r5,r5,17712
81102ab4:	1009883a 	mov	r4,r2
81102ab8:	110b9140 	call	8110b914 <fprintf>
#endif
					bSuccess = FALSE;
81102abc:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81102ac0:	e0bff317 	ldw	r2,-52(fp)
81102ac4:	10001a26 	beq	r2,zero,81102b30 <POWER_Read+0x250>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81102ac8:	e0bff617 	ldw	r2,-40(fp)
81102acc:	10c00044 	addi	r3,r2,1
81102ad0:	e0fff615 	stw	r3,-40(fp)
81102ad4:	1085883a 	add	r2,r2,r2
81102ad8:	1085883a 	add	r2,r2,r2
81102adc:	1007883a 	mov	r3,r2
81102ae0:	e0bfff17 	ldw	r2,-4(fp)
81102ae4:	10c5883a 	add	r2,r2,r3
81102ae8:	e0fffe17 	ldw	r3,-8(fp)
81102aec:	10c00015 	stw	r3,0(r2)
81102af0:	00000f06 	br	81102b30 <POWER_Read+0x250>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
81102af4:	00e044b4 	movhi	r3,33042
81102af8:	18d14c04 	addi	r3,r3,17712
81102afc:	00a044b4 	movhi	r2,33042
81102b00:	10867604 	addi	r2,r2,6616
81102b04:	1009883a 	mov	r4,r2
81102b08:	00800444 	movi	r2,17
81102b0c:	100d883a 	mov	r6,r2
81102b10:	200b883a 	mov	r5,r4
81102b14:	1809883a 	mov	r4,r3
81102b18:	110c9d40 	call	8110c9d4 <memcpy>
				debug(fp, cDebugBuffer);
81102b1c:	d0a02717 	ldw	r2,-32612(gp)
81102b20:	016044b4 	movhi	r5,33042
81102b24:	29514c04 	addi	r5,r5,17712
81102b28:	1009883a 	mov	r4,r2
81102b2c:	110b9140 	call	8110b914 <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81102b30:	e0bff417 	ldw	r2,-48(fp)
81102b34:	10800044 	addi	r2,r2,1
81102b38:	e0bff415 	stw	r2,-48(fp)
81102b3c:	e0bff517 	ldw	r2,-44(fp)
81102b40:	1085883a 	add	r2,r2,r2
81102b44:	1085883a 	add	r2,r2,r2
81102b48:	e0fff304 	addi	r3,fp,-52
81102b4c:	1885883a 	add	r2,r3,r2
81102b50:	10800904 	addi	r2,r2,36
81102b54:	10800017 	ldw	r2,0(r2)
81102b58:	e0fff417 	ldw	r3,-48(fp)
81102b5c:	1880020e 	bge	r3,r2,81102b68 <POWER_Read+0x288>
81102b60:	e0bff317 	ldw	r2,-52(fp)
81102b64:	103f811e 	bne	r2,zero,8110296c <__reset+0xfb0e296c>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102b68:	e0bff517 	ldw	r2,-44(fp)
81102b6c:	10800044 	addi	r2,r2,1
81102b70:	e0bff515 	stw	r2,-44(fp)
81102b74:	e0bff517 	ldw	r2,-44(fp)
81102b78:	10800088 	cmpgei	r2,r2,2
81102b7c:	1000021e 	bne	r2,zero,81102b88 <POWER_Read+0x2a8>
81102b80:	e0bff317 	ldw	r2,-52(fp)
81102b84:	103f691e 	bne	r2,zero,8110292c <__reset+0xfb0e292c>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
81102b88:	e0bff317 	ldw	r2,-52(fp)
}
81102b8c:	e037883a 	mov	sp,fp
81102b90:	dfc00117 	ldw	ra,4(sp)
81102b94:	df000017 	ldw	fp,0(sp)
81102b98:	dec00204 	addi	sp,sp,8
81102b9c:	f800283a 	ret

81102ba0 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81102ba0:	defff904 	addi	sp,sp,-28
81102ba4:	dfc00615 	stw	ra,24(sp)
81102ba8:	df000515 	stw	fp,20(sp)
81102bac:	df000504 	addi	fp,sp,20
81102bb0:	e13ffe15 	stw	r4,-8(fp)
81102bb4:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81102bb8:	00800c04 	movi	r2,48
81102bbc:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81102bc0:	e0bffd83 	ldbu	r2,-10(fp)
81102bc4:	10c03fcc 	andi	r3,r2,255
81102bc8:	18c0201c 	xori	r3,r3,128
81102bcc:	18ffe004 	addi	r3,r3,-128
81102bd0:	e0bffdc4 	addi	r2,fp,-9
81102bd4:	d8800015 	stw	r2,0(sp)
81102bd8:	000f883a 	mov	r7,zero
81102bdc:	180d883a 	mov	r6,r3
81102be0:	01600034 	movhi	r5,32768
81102be4:	29426004 	addi	r5,r5,2432
81102be8:	01200034 	movhi	r4,32768
81102bec:	21026404 	addi	r4,r4,2448
81102bf0:	11052a80 	call	811052a8 <I2C_Read>
81102bf4:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
81102bf8:	e0bffc17 	ldw	r2,-16(fp)
81102bfc:	10000226 	beq	r2,zero,81102c08 <TEMP_Read+0x68>
		BoardTemp = Data;
81102c00:	e0bffdc3 	ldbu	r2,-9(fp)
81102c04:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
81102c08:	e0bffc17 	ldw	r2,-16(fp)
81102c0c:	10001226 	beq	r2,zero,81102c58 <TEMP_Read+0xb8>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
81102c10:	e0bffd83 	ldbu	r2,-10(fp)
81102c14:	10c03fcc 	andi	r3,r2,255
81102c18:	18c0201c 	xori	r3,r3,128
81102c1c:	18ffe004 	addi	r3,r3,-128
81102c20:	e0bffdc4 	addi	r2,fp,-9
81102c24:	d8800015 	stw	r2,0(sp)
81102c28:	01c00044 	movi	r7,1
81102c2c:	180d883a 	mov	r6,r3
81102c30:	01600034 	movhi	r5,32768
81102c34:	29426004 	addi	r5,r5,2432
81102c38:	01200034 	movhi	r4,32768
81102c3c:	21026404 	addi	r4,r4,2448
81102c40:	11052a80 	call	811052a8 <I2C_Read>
81102c44:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
81102c48:	e0bffc17 	ldw	r2,-16(fp)
81102c4c:	10000226 	beq	r2,zero,81102c58 <TEMP_Read+0xb8>
			FpgaTemp = Data;
81102c50:	e0bffdc3 	ldbu	r2,-9(fp)
81102c54:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
81102c58:	e0bffc17 	ldw	r2,-16(fp)
81102c5c:	10000626 	beq	r2,zero,81102c78 <TEMP_Read+0xd8>
		*pFpgaTemp = FpgaTemp;
81102c60:	e0bffe17 	ldw	r2,-8(fp)
81102c64:	e0fffd03 	ldbu	r3,-12(fp)
81102c68:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
81102c6c:	e0bfff17 	ldw	r2,-4(fp)
81102c70:	e0fffd43 	ldbu	r3,-11(fp)
81102c74:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
81102c78:	e0bffc17 	ldw	r2,-16(fp)
}
81102c7c:	e037883a 	mov	sp,fp
81102c80:	dfc00117 	ldw	ra,4(sp)
81102c84:	df000017 	ldw	fp,0(sp)
81102c88:	dec00204 	addi	sp,sp,8
81102c8c:	f800283a 	ret

81102c90 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
81102c90:	defffb04 	addi	sp,sp,-20
81102c94:	dfc00415 	stw	ra,16(sp)
81102c98:	df000315 	stw	fp,12(sp)
81102c9c:	df000304 	addi	fp,sp,12
81102ca0:	e13ffe15 	stw	r4,-8(fp)
81102ca4:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81102ca8:	e17fff17 	ldw	r5,-4(fp)
81102cac:	e13ffe17 	ldw	r4,-8(fp)
81102cb0:	1102ba00 	call	81102ba0 <TEMP_Read>
81102cb4:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81102cb8:	e0bffd17 	ldw	r2,-12(fp)
}
81102cbc:	e037883a 	mov	sp,fp
81102cc0:	dfc00117 	ldw	ra,4(sp)
81102cc4:	df000017 	ldw	fp,0(sp)
81102cc8:	dec00204 	addi	sp,sp,8
81102ccc:	f800283a 	ret

81102cd0 <sense_log>:

void sense_log(void) {
81102cd0:	deff0404 	addi	sp,sp,-1008
81102cd4:	dfc0fb15 	stw	ra,1004(sp)
81102cd8:	df00fa15 	stw	fp,1000(sp)
81102cdc:	dd40f915 	stw	r21,996(sp)
81102ce0:	dd00f815 	stw	r20,992(sp)
81102ce4:	dcc0f715 	stw	r19,988(sp)
81102ce8:	dc80f615 	stw	r18,984(sp)
81102cec:	dc40f515 	stw	r17,980(sp)
81102cf0:	dc00f415 	stw	r16,976(sp)
81102cf4:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
81102cf8:	00902834 	movhi	r2,16544
81102cfc:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
81102d00:	008ed174 	movhi	r2,15173
81102d04:	10a6e984 	addi	r2,r2,-25690
81102d08:	e0bf2215 	stw	r2,-888(fp)
81102d0c:	008ea0f4 	movhi	r2,14979
81102d10:	10849bc4 	addi	r2,r2,4719
81102d14:	e0bf2315 	stw	r2,-884(fp)
81102d18:	008ed174 	movhi	r2,15173
81102d1c:	10a6e984 	addi	r2,r2,-25690
81102d20:	e0bf2415 	stw	r2,-880(fp)
81102d24:	008ed174 	movhi	r2,15173
81102d28:	10a6e984 	addi	r2,r2,-25690
81102d2c:	e0bf2515 	stw	r2,-876(fp)
81102d30:	008ed174 	movhi	r2,15173
81102d34:	10a6e984 	addi	r2,r2,-25690
81102d38:	e0bf2615 	stw	r2,-872(fp)
81102d3c:	008ed174 	movhi	r2,15173
81102d40:	10a6e984 	addi	r2,r2,-25690
81102d44:	e0bf2715 	stw	r2,-868(fp)
81102d48:	008ed174 	movhi	r2,15173
81102d4c:	10a6e984 	addi	r2,r2,-25690
81102d50:	e0bf2815 	stw	r2,-864(fp)
81102d54:	008ed174 	movhi	r2,15173
81102d58:	10a6e984 	addi	r2,r2,-25690
81102d5c:	e0bf2915 	stw	r2,-860(fp)
81102d60:	008ed174 	movhi	r2,15173
81102d64:	10a6e984 	addi	r2,r2,-25690
81102d68:	e0bf2a15 	stw	r2,-856(fp)
81102d6c:	008ed174 	movhi	r2,15173
81102d70:	10a6e984 	addi	r2,r2,-25690
81102d74:	e0bf2b15 	stw	r2,-852(fp)
81102d78:	008ed174 	movhi	r2,15173
81102d7c:	10a6e984 	addi	r2,r2,-25690
81102d80:	e0bf2c15 	stw	r2,-848(fp)
81102d84:	008ed174 	movhi	r2,15173
81102d88:	10a6e984 	addi	r2,r2,-25690
81102d8c:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81102d90:	008fd9b4 	movhi	r2,16230
81102d94:	10999984 	addi	r2,r2,26214
81102d98:	e0bf2e15 	stw	r2,-840(fp)
81102d9c:	008fd9b4 	movhi	r2,16230
81102da0:	10999984 	addi	r2,r2,26214
81102da4:	e0bf2f15 	stw	r2,-836(fp)
81102da8:	00901034 	movhi	r2,16448
81102dac:	e0bf3015 	stw	r2,-832(fp)
81102db0:	008fd9b4 	movhi	r2,16230
81102db4:	10999984 	addi	r2,r2,26214
81102db8:	e0bf3115 	stw	r2,-828(fp)
81102dbc:	008ff9b4 	movhi	r2,16358
81102dc0:	10999984 	addi	r2,r2,26214
81102dc4:	e0bf3215 	stw	r2,-824(fp)
81102dc8:	00900834 	movhi	r2,16416
81102dcc:	e0bf3315 	stw	r2,-820(fp)
81102dd0:	008ff9b4 	movhi	r2,16358
81102dd4:	10999984 	addi	r2,r2,26214
81102dd8:	e0bf3415 	stw	r2,-816(fp)
81102ddc:	00900834 	movhi	r2,16416
81102de0:	e0bf3515 	stw	r2,-812(fp)
81102de4:	008fe374 	movhi	r2,16269
81102de8:	10b33344 	addi	r2,r2,-13107
81102dec:	e0bf3615 	stw	r2,-808(fp)
81102df0:	008fecf4 	movhi	r2,16307
81102df4:	108cccc4 	addi	r2,r2,13107
81102df8:	e0bf3715 	stw	r2,-804(fp)
81102dfc:	009014f4 	movhi	r2,16467
81102e00:	108cccc4 	addi	r2,r2,13107
81102e04:	e0bf3815 	stw	r2,-800(fp)
81102e08:	00900834 	movhi	r2,16416
81102e0c:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
81102e10:	00a044b4 	movhi	r2,33042
81102e14:	1086ad04 	addi	r2,r2,6836
81102e18:	e0ff3a04 	addi	r3,fp,-792
81102e1c:	1009883a 	mov	r4,r2
81102e20:	0080c004 	movi	r2,768
81102e24:	100d883a 	mov	r6,r2
81102e28:	200b883a 	mov	r5,r4
81102e2c:	1809883a 	mov	r4,r3
81102e30:	110c9d40 	call	8110c9d4 <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
81102e34:	e0bf1604 	addi	r2,fp,-936
81102e38:	1009883a 	mov	r4,r2
81102e3c:	11028e00 	call	811028e0 <POWER_Read>
81102e40:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
81102e44:	e0bf0f17 	ldw	r2,-964(fp)
81102e48:	10016026 	beq	r2,zero,811033cc <sense_log+0x6fc>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81102e4c:	e03f0c15 	stw	zero,-976(fp)
81102e50:	00014c06 	br	81103384 <sense_log+0x6b4>
			SIG = (szVol[i] >> 29) & 0x01;
81102e54:	e0bf0c17 	ldw	r2,-976(fp)
81102e58:	1085883a 	add	r2,r2,r2
81102e5c:	1085883a 	add	r2,r2,r2
81102e60:	e0ff0c04 	addi	r3,fp,-976
81102e64:	1885883a 	add	r2,r3,r2
81102e68:	10800a04 	addi	r2,r2,40
81102e6c:	10800017 	ldw	r2,0(r2)
81102e70:	1004d77a 	srli	r2,r2,29
81102e74:	1080004c 	andi	r2,r2,1
81102e78:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
81102e7c:	e0bf0c17 	ldw	r2,-976(fp)
81102e80:	1085883a 	add	r2,r2,r2
81102e84:	1085883a 	add	r2,r2,r2
81102e88:	e0ff0c04 	addi	r3,fp,-976
81102e8c:	1885883a 	add	r2,r3,r2
81102e90:	10800a04 	addi	r2,r2,40
81102e94:	10800017 	ldw	r2,0(r2)
81102e98:	1004d73a 	srli	r2,r2,28
81102e9c:	1080004c 	andi	r2,r2,1
81102ea0:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
81102ea4:	e0bf0c17 	ldw	r2,-976(fp)
81102ea8:	1085883a 	add	r2,r2,r2
81102eac:	1085883a 	add	r2,r2,r2
81102eb0:	e0ff0c04 	addi	r3,fp,-976
81102eb4:	1885883a 	add	r2,r3,r2
81102eb8:	10800a04 	addi	r2,r2,40
81102ebc:	10800017 	ldw	r2,0(r2)
81102ec0:	1006d1ba 	srli	r3,r2,6
81102ec4:	00801034 	movhi	r2,64
81102ec8:	10bfffc4 	addi	r2,r2,-1
81102ecc:	1884703a 	and	r2,r3,r2
81102ed0:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
81102ed4:	e0bf1117 	ldw	r2,-956(fp)
81102ed8:	1000091e 	bne	r2,zero,81102f00 <sense_log+0x230>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
81102edc:	e13f1217 	ldw	r4,-952(fp)
81102ee0:	110acbc0 	call	8110acbc <__floatunsisf>
81102ee4:	1007883a 	mov	r3,r2
81102ee8:	0152a034 	movhi	r5,19072
81102eec:	1809883a 	mov	r4,r3
81102ef0:	110a35c0 	call	8110a35c <__divsf3>
81102ef4:	1007883a 	mov	r3,r2
81102ef8:	e0ff0d15 	stw	r3,-972(fp)
81102efc:	00000106 	br	81102f04 <sense_log+0x234>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
81102f00:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
81102f04:	e0bf1017 	ldw	r2,-960(fp)
81102f08:	10002626 	beq	r2,zero,81102fa4 <sense_log+0x2d4>
81102f0c:	e0bf1117 	ldw	r2,-956(fp)
81102f10:	10002426 	beq	r2,zero,81102fa4 <sense_log+0x2d4>
				fVol = fRef * 0.5;
81102f14:	014fc034 	movhi	r5,16128
81102f18:	e13f0e17 	ldw	r4,-968(fp)
81102f1c:	110a79c0 	call	8110a79c <__mulsf3>
81102f20:	1007883a 	mov	r3,r2
81102f24:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81102f28:	e0ff3a04 	addi	r3,fp,-792
81102f2c:	e0bf0c17 	ldw	r2,-976(fp)
81102f30:	100491ba 	slli	r2,r2,6
81102f34:	18a1883a 	add	r16,r3,r2
81102f38:	e0bf0c17 	ldw	r2,-976(fp)
81102f3c:	1085883a 	add	r2,r2,r2
81102f40:	1085883a 	add	r2,r2,r2
81102f44:	e0ff0c04 	addi	r3,fp,-976
81102f48:	1885883a 	add	r2,r3,r2
81102f4c:	10800a04 	addi	r2,r2,40
81102f50:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
81102f54:	1023883a 	mov	r17,r2
81102f58:	e13f1317 	ldw	r4,-948(fp)
81102f5c:	110b4c40 	call	8110b4c4 <__extendsfdf2>
81102f60:	1009883a 	mov	r4,r2
81102f64:	180b883a 	mov	r5,r3
81102f68:	d9000015 	stw	r4,0(sp)
81102f6c:	d9400115 	stw	r5,4(sp)
81102f70:	880f883a 	mov	r7,r17
81102f74:	800d883a 	mov	r6,r16
81102f78:	016044b4 	movhi	r5,33042
81102f7c:	29467b04 	addi	r5,r5,6636
81102f80:	012044b4 	movhi	r4,33042
81102f84:	21114c04 	addi	r4,r4,17712
81102f88:	110cfc80 	call	8110cfc8 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81102f8c:	d0a02717 	ldw	r2,-32612(gp)
81102f90:	016044b4 	movhi	r5,33042
81102f94:	29514c04 	addi	r5,r5,17712
81102f98:	1009883a 	mov	r4,r2
81102f9c:	110b9140 	call	8110b914 <fprintf>
81102fa0:	0000f506 	br	81103378 <sense_log+0x6a8>
#endif
			} else if (SIG && !MSB) {
81102fa4:	e0bf1017 	ldw	r2,-960(fp)
81102fa8:	10006426 	beq	r2,zero,8110313c <sense_log+0x46c>
81102fac:	e0bf1117 	ldw	r2,-956(fp)
81102fb0:	1000621e 	bne	r2,zero,8110313c <sense_log+0x46c>
				fVol = fRef * 0.5 * fVolDrop;
81102fb4:	e13f0e17 	ldw	r4,-968(fp)
81102fb8:	110b4c40 	call	8110b4c4 <__extendsfdf2>
81102fbc:	1011883a 	mov	r8,r2
81102fc0:	1813883a 	mov	r9,r3
81102fc4:	000d883a 	mov	r6,zero
81102fc8:	01cff834 	movhi	r7,16352
81102fcc:	4009883a 	mov	r4,r8
81102fd0:	480b883a 	mov	r5,r9
81102fd4:	110adac0 	call	8110adac <__muldf3>
81102fd8:	1009883a 	mov	r4,r2
81102fdc:	180b883a 	mov	r5,r3
81102fe0:	2021883a 	mov	r16,r4
81102fe4:	2823883a 	mov	r17,r5
81102fe8:	e13f0d17 	ldw	r4,-972(fp)
81102fec:	110b4c40 	call	8110b4c4 <__extendsfdf2>
81102ff0:	1009883a 	mov	r4,r2
81102ff4:	180b883a 	mov	r5,r3
81102ff8:	200d883a 	mov	r6,r4
81102ffc:	280f883a 	mov	r7,r5
81103000:	8009883a 	mov	r4,r16
81103004:	880b883a 	mov	r5,r17
81103008:	110adac0 	call	8110adac <__muldf3>
8110300c:	1009883a 	mov	r4,r2
81103010:	180b883a 	mov	r5,r3
81103014:	2005883a 	mov	r2,r4
81103018:	2807883a 	mov	r3,r5
8110301c:	1009883a 	mov	r4,r2
81103020:	180b883a 	mov	r5,r3
81103024:	110b5d40 	call	8110b5d4 <__truncdfsf2>
81103028:	1007883a 	mov	r3,r2
8110302c:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103030:	e0bf0c17 	ldw	r2,-976(fp)
81103034:	1085883a 	add	r2,r2,r2
81103038:	1085883a 	add	r2,r2,r2
8110303c:	e0ff0c04 	addi	r3,fp,-976
81103040:	1885883a 	add	r2,r3,r2
81103044:	10801604 	addi	r2,r2,88
81103048:	10c00017 	ldw	r3,0(r2)
8110304c:	180b883a 	mov	r5,r3
81103050:	e13f0d17 	ldw	r4,-972(fp)
81103054:	110a35c0 	call	8110a35c <__divsf3>
81103058:	1007883a 	mov	r3,r2
8110305c:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103060:	e0bf0c17 	ldw	r2,-976(fp)
81103064:	1085883a 	add	r2,r2,r2
81103068:	1085883a 	add	r2,r2,r2
8110306c:	e0ff0c04 	addi	r3,fp,-976
81103070:	1885883a 	add	r2,r3,r2
81103074:	10802204 	addi	r2,r2,136
81103078:	10c00017 	ldw	r3,0(r2)
8110307c:	e17f1417 	ldw	r5,-944(fp)
81103080:	1809883a 	mov	r4,r3
81103084:	110a79c0 	call	8110a79c <__mulsf3>
81103088:	1007883a 	mov	r3,r2
8110308c:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103090:	e0ff3a04 	addi	r3,fp,-792
81103094:	e0bf0c17 	ldw	r2,-976(fp)
81103098:	100491ba 	slli	r2,r2,6
8110309c:	18a9883a 	add	r20,r3,r2
811030a0:	e0bf0c17 	ldw	r2,-976(fp)
811030a4:	1085883a 	add	r2,r2,r2
811030a8:	1085883a 	add	r2,r2,r2
811030ac:	e0ff0c04 	addi	r3,fp,-976
811030b0:	1885883a 	add	r2,r3,r2
811030b4:	10800a04 	addi	r2,r2,40
811030b8:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811030bc:	102b883a 	mov	r21,r2
811030c0:	e13f0d17 	ldw	r4,-972(fp)
811030c4:	110b4c40 	call	8110b4c4 <__extendsfdf2>
811030c8:	1021883a 	mov	r16,r2
811030cc:	1823883a 	mov	r17,r3
811030d0:	e13f1417 	ldw	r4,-944(fp)
811030d4:	110b4c40 	call	8110b4c4 <__extendsfdf2>
811030d8:	1025883a 	mov	r18,r2
811030dc:	1827883a 	mov	r19,r3
811030e0:	e13f1517 	ldw	r4,-940(fp)
811030e4:	110b4c40 	call	8110b4c4 <__extendsfdf2>
811030e8:	1009883a 	mov	r4,r2
811030ec:	180b883a 	mov	r5,r3
811030f0:	d9000415 	stw	r4,16(sp)
811030f4:	d9400515 	stw	r5,20(sp)
811030f8:	dc800215 	stw	r18,8(sp)
811030fc:	dcc00315 	stw	r19,12(sp)
81103100:	dc000015 	stw	r16,0(sp)
81103104:	dc400115 	stw	r17,4(sp)
81103108:	a80f883a 	mov	r7,r21
8110310c:	a00d883a 	mov	r6,r20
81103110:	016044b4 	movhi	r5,33042
81103114:	29468404 	addi	r5,r5,6672
81103118:	012044b4 	movhi	r4,33042
8110311c:	21114c04 	addi	r4,r4,17712
81103120:	110cfc80 	call	8110cfc8 <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
81103124:	d0a02717 	ldw	r2,-32612(gp)
81103128:	016044b4 	movhi	r5,33042
8110312c:	29514c04 	addi	r5,r5,17712
81103130:	1009883a 	mov	r4,r2
81103134:	110b9140 	call	8110b914 <fprintf>
81103138:	00008f06 	br	81103378 <sense_log+0x6a8>
#endif
			} else if (!SIG && MSB) {
8110313c:	e0bf1017 	ldw	r2,-960(fp)
81103140:	1000641e 	bne	r2,zero,811032d4 <sense_log+0x604>
81103144:	e0bf1117 	ldw	r2,-956(fp)
81103148:	10006226 	beq	r2,zero,811032d4 <sense_log+0x604>
				fVol = fRef * 0.5 * fVolDrop;
8110314c:	e13f0e17 	ldw	r4,-968(fp)
81103150:	110b4c40 	call	8110b4c4 <__extendsfdf2>
81103154:	1011883a 	mov	r8,r2
81103158:	1813883a 	mov	r9,r3
8110315c:	000d883a 	mov	r6,zero
81103160:	01cff834 	movhi	r7,16352
81103164:	4009883a 	mov	r4,r8
81103168:	480b883a 	mov	r5,r9
8110316c:	110adac0 	call	8110adac <__muldf3>
81103170:	1009883a 	mov	r4,r2
81103174:	180b883a 	mov	r5,r3
81103178:	2021883a 	mov	r16,r4
8110317c:	2823883a 	mov	r17,r5
81103180:	e13f0d17 	ldw	r4,-972(fp)
81103184:	110b4c40 	call	8110b4c4 <__extendsfdf2>
81103188:	1009883a 	mov	r4,r2
8110318c:	180b883a 	mov	r5,r3
81103190:	200d883a 	mov	r6,r4
81103194:	280f883a 	mov	r7,r5
81103198:	8009883a 	mov	r4,r16
8110319c:	880b883a 	mov	r5,r17
811031a0:	110adac0 	call	8110adac <__muldf3>
811031a4:	1009883a 	mov	r4,r2
811031a8:	180b883a 	mov	r5,r3
811031ac:	2005883a 	mov	r2,r4
811031b0:	2807883a 	mov	r3,r5
811031b4:	1009883a 	mov	r4,r2
811031b8:	180b883a 	mov	r5,r3
811031bc:	110b5d40 	call	8110b5d4 <__truncdfsf2>
811031c0:	1007883a 	mov	r3,r2
811031c4:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811031c8:	e0bf0c17 	ldw	r2,-976(fp)
811031cc:	1085883a 	add	r2,r2,r2
811031d0:	1085883a 	add	r2,r2,r2
811031d4:	e0ff0c04 	addi	r3,fp,-976
811031d8:	1885883a 	add	r2,r3,r2
811031dc:	10801604 	addi	r2,r2,88
811031e0:	10c00017 	ldw	r3,0(r2)
811031e4:	180b883a 	mov	r5,r3
811031e8:	e13f0d17 	ldw	r4,-972(fp)
811031ec:	110a35c0 	call	8110a35c <__divsf3>
811031f0:	1007883a 	mov	r3,r2
811031f4:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811031f8:	e0bf0c17 	ldw	r2,-976(fp)
811031fc:	1085883a 	add	r2,r2,r2
81103200:	1085883a 	add	r2,r2,r2
81103204:	e0ff0c04 	addi	r3,fp,-976
81103208:	1885883a 	add	r2,r3,r2
8110320c:	10802204 	addi	r2,r2,136
81103210:	10c00017 	ldw	r3,0(r2)
81103214:	e17f1417 	ldw	r5,-944(fp)
81103218:	1809883a 	mov	r4,r3
8110321c:	110a79c0 	call	8110a79c <__mulsf3>
81103220:	1007883a 	mov	r3,r2
81103224:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103228:	e0ff3a04 	addi	r3,fp,-792
8110322c:	e0bf0c17 	ldw	r2,-976(fp)
81103230:	100491ba 	slli	r2,r2,6
81103234:	18a9883a 	add	r20,r3,r2
81103238:	e0bf0c17 	ldw	r2,-976(fp)
8110323c:	1085883a 	add	r2,r2,r2
81103240:	1085883a 	add	r2,r2,r2
81103244:	e0ff0c04 	addi	r3,fp,-976
81103248:	1885883a 	add	r2,r3,r2
8110324c:	10800a04 	addi	r2,r2,40
81103250:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81103254:	102b883a 	mov	r21,r2
81103258:	e13f0d17 	ldw	r4,-972(fp)
8110325c:	110b4c40 	call	8110b4c4 <__extendsfdf2>
81103260:	1021883a 	mov	r16,r2
81103264:	1823883a 	mov	r17,r3
81103268:	e13f1417 	ldw	r4,-944(fp)
8110326c:	110b4c40 	call	8110b4c4 <__extendsfdf2>
81103270:	1025883a 	mov	r18,r2
81103274:	1827883a 	mov	r19,r3
81103278:	e13f1517 	ldw	r4,-940(fp)
8110327c:	110b4c40 	call	8110b4c4 <__extendsfdf2>
81103280:	1009883a 	mov	r4,r2
81103284:	180b883a 	mov	r5,r3
81103288:	d9000415 	stw	r4,16(sp)
8110328c:	d9400515 	stw	r5,20(sp)
81103290:	dc800215 	stw	r18,8(sp)
81103294:	dcc00315 	stw	r19,12(sp)
81103298:	dc000015 	stw	r16,0(sp)
8110329c:	dc400115 	stw	r17,4(sp)
811032a0:	a80f883a 	mov	r7,r21
811032a4:	a00d883a 	mov	r6,r20
811032a8:	016044b4 	movhi	r5,33042
811032ac:	29469404 	addi	r5,r5,6736
811032b0:	012044b4 	movhi	r4,33042
811032b4:	21114c04 	addi	r4,r4,17712
811032b8:	110cfc80 	call	8110cfc8 <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
811032bc:	d0a02717 	ldw	r2,-32612(gp)
811032c0:	016044b4 	movhi	r5,33042
811032c4:	29514c04 	addi	r5,r5,17712
811032c8:	1009883a 	mov	r4,r2
811032cc:	110b9140 	call	8110b914 <fprintf>
811032d0:	00002906 	br	81103378 <sense_log+0x6a8>
#endif
			} else if (!SIG && !MSB) {
811032d4:	e0bf1017 	ldw	r2,-960(fp)
811032d8:	1000271e 	bne	r2,zero,81103378 <sense_log+0x6a8>
811032dc:	e0bf1117 	ldw	r2,-956(fp)
811032e0:	1000251e 	bne	r2,zero,81103378 <sense_log+0x6a8>
				fVol = -fRef * 0.5;
811032e4:	e0bf0e17 	ldw	r2,-968(fp)
811032e8:	10a0003c 	xorhi	r2,r2,32768
811032ec:	014fc034 	movhi	r5,16128
811032f0:	1009883a 	mov	r4,r2
811032f4:	110a79c0 	call	8110a79c <__mulsf3>
811032f8:	1007883a 	mov	r3,r2
811032fc:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81103300:	e0ff3a04 	addi	r3,fp,-792
81103304:	e0bf0c17 	ldw	r2,-976(fp)
81103308:	100491ba 	slli	r2,r2,6
8110330c:	18a1883a 	add	r16,r3,r2
81103310:	e0bf0c17 	ldw	r2,-976(fp)
81103314:	1085883a 	add	r2,r2,r2
81103318:	1085883a 	add	r2,r2,r2
8110331c:	e0ff0c04 	addi	r3,fp,-976
81103320:	1885883a 	add	r2,r3,r2
81103324:	10800a04 	addi	r2,r2,40
81103328:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
8110332c:	1023883a 	mov	r17,r2
81103330:	e13f1317 	ldw	r4,-948(fp)
81103334:	110b4c40 	call	8110b4c4 <__extendsfdf2>
81103338:	1009883a 	mov	r4,r2
8110333c:	180b883a 	mov	r5,r3
81103340:	d9000015 	stw	r4,0(sp)
81103344:	d9400115 	stw	r5,4(sp)
81103348:	880f883a 	mov	r7,r17
8110334c:	800d883a 	mov	r6,r16
81103350:	016044b4 	movhi	r5,33042
81103354:	2946a404 	addi	r5,r5,6800
81103358:	012044b4 	movhi	r4,33042
8110335c:	21114c04 	addi	r4,r4,17712
81103360:	110cfc80 	call	8110cfc8 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103364:	d0a02717 	ldw	r2,-32612(gp)
81103368:	016044b4 	movhi	r5,33042
8110336c:	29514c04 	addi	r5,r5,17712
81103370:	1009883a 	mov	r4,r2
81103374:	110b9140 	call	8110b914 <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81103378:	e0bf0c17 	ldw	r2,-976(fp)
8110337c:	10800044 	addi	r2,r2,1
81103380:	e0bf0c15 	stw	r2,-976(fp)
81103384:	e0bf0c17 	ldw	r2,-976(fp)
81103388:	10800308 	cmpgei	r2,r2,12
8110338c:	1000021e 	bne	r2,zero,81103398 <sense_log+0x6c8>
81103390:	e0bf0f17 	ldw	r2,-964(fp)
81103394:	103eaf1e 	bne	r2,zero,81102e54 <__reset+0xfb0e2e54>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
81103398:	00a044b4 	movhi	r2,33042
8110339c:	10914c04 	addi	r2,r2,17712
811033a0:	00c00344 	movi	r3,13
811033a4:	10c00005 	stb	r3,0(r2)
811033a8:	00c00284 	movi	r3,10
811033ac:	10c00045 	stb	r3,1(r2)
811033b0:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
811033b4:	d0a02717 	ldw	r2,-32612(gp)
811033b8:	016044b4 	movhi	r5,33042
811033bc:	29514c04 	addi	r5,r5,17712
811033c0:	1009883a 	mov	r4,r2
811033c4:	110b9140 	call	8110b914 <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
811033c8:	00001606 	br	81103424 <sense_log+0x754>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
811033cc:	00a044b4 	movhi	r2,33042
811033d0:	10914c04 	addi	r2,r2,17712
811033d4:	00c01144 	movi	r3,69
811033d8:	10c00005 	stb	r3,0(r2)
811033dc:	00c01c84 	movi	r3,114
811033e0:	10c00045 	stb	r3,1(r2)
811033e4:	00c01c84 	movi	r3,114
811033e8:	10c00085 	stb	r3,2(r2)
811033ec:	00c01bc4 	movi	r3,111
811033f0:	10c000c5 	stb	r3,3(r2)
811033f4:	00c01c84 	movi	r3,114
811033f8:	10c00105 	stb	r3,4(r2)
811033fc:	00c00344 	movi	r3,13
81103400:	10c00145 	stb	r3,5(r2)
81103404:	00c00284 	movi	r3,10
81103408:	10c00185 	stb	r3,6(r2)
8110340c:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
81103410:	d0a02717 	ldw	r2,-32612(gp)
81103414:	016044b4 	movhi	r5,33042
81103418:	29514c04 	addi	r5,r5,17712
8110341c:	1009883a 	mov	r4,r2
81103420:	110b9140 	call	8110b914 <fprintf>
#endif
	}
}
81103424:	0001883a 	nop
81103428:	e6fffa04 	addi	sp,fp,-24
8110342c:	dfc00717 	ldw	ra,28(sp)
81103430:	df000617 	ldw	fp,24(sp)
81103434:	dd400517 	ldw	r21,20(sp)
81103438:	dd000417 	ldw	r20,16(sp)
8110343c:	dcc00317 	ldw	r19,12(sp)
81103440:	dc800217 	ldw	r18,8(sp)
81103444:	dc400117 	ldw	r17,4(sp)
81103448:	dc000017 	ldw	r16,0(sp)
8110344c:	dec00804 	addi	sp,sp,32
81103450:	f800283a 	ret

81103454 <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103454:	defffc04 	addi	sp,sp,-16
81103458:	dfc00315 	stw	ra,12(sp)
8110345c:	df000215 	stw	fp,8(sp)
81103460:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103464:	00800044 	movi	r2,1
81103468:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
8110346c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103470:	012044b4 	movhi	r4,33042
81103474:	21076d04 	addi	r4,r4,7604
81103478:	111fa840 	call	8111fa84 <alt_msgdma_open>
8110347c:	d0a01515 	stw	r2,-32684(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103480:	d0a01517 	ldw	r2,-32684(gp)
81103484:	1000021e 	bne	r2,zero,81103490 <bSdmaInitM1Dma+0x3c>
		// device not opened
		bStatus = FALSE;
81103488:	e03ffe15 	stw	zero,-8(fp)
8110348c:	00001506 	br	811034e4 <bSdmaInitM1Dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103490:	d0a01517 	ldw	r2,-32684(gp)
81103494:	10800317 	ldw	r2,12(r2)
81103498:	10800104 	addi	r2,r2,4
8110349c:	00c00084 	movi	r3,2
811034a0:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
811034a4:	00000a06 	br	811034d0 <bSdmaInitM1Dma+0x7c>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
811034a8:	01000044 	movi	r4,1
811034ac:	111c8240 	call	8111c824 <usleep>
			usiCounter++;
811034b0:	e0bfff0b 	ldhu	r2,-4(fp)
811034b4:	10800044 	addi	r2,r2,1
811034b8:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
811034bc:	e0bfff0b 	ldhu	r2,-4(fp)
811034c0:	1084e230 	cmpltui	r2,r2,5000
811034c4:	1000021e 	bne	r2,zero,811034d0 <bSdmaInitM1Dma+0x7c>
				bStatus = FALSE;
811034c8:	e03ffe15 	stw	zero,-8(fp)
				break;
811034cc:	00000506 	br	811034e4 <bSdmaInitM1Dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
811034d0:	d0a01517 	ldw	r2,-32684(gp)
811034d4:	10800317 	ldw	r2,12(r2)
811034d8:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
811034dc:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
811034e0:	103ff11e 	bne	r2,zero,811034a8 <__reset+0xfb0e34a8>
				break;
			}
		}
	}

	return bStatus;
811034e4:	e0bffe17 	ldw	r2,-8(fp)
}
811034e8:	e037883a 	mov	sp,fp
811034ec:	dfc00117 	ldw	ra,4(sp)
811034f0:	df000017 	ldw	fp,0(sp)
811034f4:	dec00204 	addi	sp,sp,8
811034f8:	f800283a 	ret

811034fc <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
811034fc:	defffc04 	addi	sp,sp,-16
81103500:	dfc00315 	stw	ra,12(sp)
81103504:	df000215 	stw	fp,8(sp)
81103508:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
8110350c:	00800044 	movi	r2,1
81103510:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103514:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
81103518:	012044b4 	movhi	r4,33042
8110351c:	21077204 	addi	r4,r4,7624
81103520:	111fa840 	call	8111fa84 <alt_msgdma_open>
81103524:	d0a01615 	stw	r2,-32680(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
81103528:	d0a01617 	ldw	r2,-32680(gp)
8110352c:	1000021e 	bne	r2,zero,81103538 <bSdmaInitM2Dma+0x3c>
		// device not opened
		bStatus = FALSE;
81103530:	e03ffe15 	stw	zero,-8(fp)
81103534:	00001506 	br	8110358c <bSdmaInitM2Dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
81103538:	d0a01617 	ldw	r2,-32680(gp)
8110353c:	10800317 	ldw	r2,12(r2)
81103540:	10800104 	addi	r2,r2,4
81103544:	00c00084 	movi	r3,2
81103548:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
8110354c:	00000a06 	br	81103578 <bSdmaInitM2Dma+0x7c>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103550:	01000044 	movi	r4,1
81103554:	111c8240 	call	8111c824 <usleep>
			usiCounter++;
81103558:	e0bfff0b 	ldhu	r2,-4(fp)
8110355c:	10800044 	addi	r2,r2,1
81103560:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103564:	e0bfff0b 	ldhu	r2,-4(fp)
81103568:	1084e230 	cmpltui	r2,r2,5000
8110356c:	1000021e 	bne	r2,zero,81103578 <bSdmaInitM2Dma+0x7c>
				bStatus = FALSE;
81103570:	e03ffe15 	stw	zero,-8(fp)
				break;
81103574:	00000506 	br	8110358c <bSdmaInitM2Dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103578:	d0a01617 	ldw	r2,-32680(gp)
8110357c:	10800317 	ldw	r2,12(r2)
81103580:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103584:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103588:	103ff11e 	bne	r2,zero,81103550 <__reset+0xfb0e3550>
				break;
			}
		}
	}

	return bStatus;
8110358c:	e0bffe17 	ldw	r2,-8(fp)
}
81103590:	e037883a 	mov	sp,fp
81103594:	dfc00117 	ldw	ra,4(sp)
81103598:	df000017 	ldw	fp,0(sp)
8110359c:	dec00204 	addi	sp,sp,8
811035a0:	f800283a 	ret

811035a4 <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
811035a4:	deffe904 	addi	sp,sp,-92
811035a8:	dfc01615 	stw	ra,88(sp)
811035ac:	df001515 	stw	fp,84(sp)
811035b0:	dc001415 	stw	r16,80(sp)
811035b4:	df001504 	addi	fp,sp,84
811035b8:	e13ffb15 	stw	r4,-20(fp)
811035bc:	2809883a 	mov	r4,r5
811035c0:	3007883a 	mov	r3,r6
811035c4:	3805883a 	mov	r2,r7
811035c8:	e13ffc0d 	sth	r4,-16(fp)
811035cc:	e0fffd05 	stb	r3,-12(fp)
811035d0:	e0bffe05 	stb	r2,-8(fp)
811035d4:	defff004 	addi	sp,sp,-64
811035d8:	d8800904 	addi	r2,sp,36
811035dc:	108007c4 	addi	r2,r2,31
811035e0:	1004d17a 	srli	r2,r2,5
811035e4:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
811035e8:	00800044 	movi	r2,1
811035ec:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
811035f0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
811035f4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
811035f8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
811035fc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103600:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103604:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103608:	e0bffe03 	ldbu	r2,-8(fp)
8110360c:	10c00268 	cmpgeui	r3,r2,9
81103610:	1800a51e 	bne	r3,zero,811038a8 <bSdmaDmaM1Transfer+0x304>
81103614:	100690ba 	slli	r3,r2,2
81103618:	00a04434 	movhi	r2,33040
8110361c:	108d8b04 	addi	r2,r2,13868
81103620:	1885883a 	add	r2,r3,r2
81103624:	10800017 	ldw	r2,0(r2)
81103628:	1000683a 	jmp	r2
8110362c:	811038a8 	cmpgeui	r4,r16,16610
81103630:	81103650 	cmplti	r4,r16,16601
81103634:	81103694 	ori	r4,r16,16602
81103638:	811036e0 	cmpeqi	r4,r16,16603
8110363c:	8110372c 	andhi	r4,r16,16604
81103640:	81103778 	rdprs	r4,r16,16605
81103644:	811037c4 	addi	r4,r16,16607
81103648:	81103810 	cmplti	r4,r16,16608
8110364c:	8110385c 	xori	r4,r16,16609
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103650:	e0bffd03 	ldbu	r2,-12(fp)
81103654:	10000326 	beq	r2,zero,81103664 <bSdmaDmaM1Transfer+0xc0>
81103658:	10800060 	cmpeqi	r2,r2,1
8110365c:	1000051e 	bne	r2,zero,81103674 <bSdmaDmaM1Transfer+0xd0>
81103660:	00000906 	br	81103688 <bSdmaDmaM1Transfer+0xe4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103664:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103668:	00800044 	movi	r2,1
8110366c:	e0bff715 	stw	r2,-36(fp)
			break;
81103670:	00000706 	br	81103690 <bSdmaDmaM1Transfer+0xec>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103674:	00800074 	movhi	r2,1
81103678:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
8110367c:	00800044 	movi	r2,1
81103680:	e0bff715 	stw	r2,-36(fp)
			break;
81103684:	00000206 	br	81103690 <bSdmaDmaM1Transfer+0xec>
		default:
			bStatus = FALSE;
81103688:	e03ff415 	stw	zero,-48(fp)
			break;
8110368c:	0001883a 	nop
		}
		break;
81103690:	00008706 	br	811038b0 <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103694:	e0bffd03 	ldbu	r2,-12(fp)
81103698:	10000326 	beq	r2,zero,811036a8 <bSdmaDmaM1Transfer+0x104>
8110369c:	10800060 	cmpeqi	r2,r2,1
811036a0:	1000061e 	bne	r2,zero,811036bc <bSdmaDmaM1Transfer+0x118>
811036a4:	00000b06 	br	811036d4 <bSdmaDmaM1Transfer+0x130>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
811036a8:	00880004 	movi	r2,8192
811036ac:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
811036b0:	00800044 	movi	r2,1
811036b4:	e0bff715 	stw	r2,-36(fp)
			break;
811036b8:	00000806 	br	811036dc <bSdmaDmaM1Transfer+0x138>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
811036bc:	00800074 	movhi	r2,1
811036c0:	10880004 	addi	r2,r2,8192
811036c4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
811036c8:	00800044 	movi	r2,1
811036cc:	e0bff715 	stw	r2,-36(fp)
			break;
811036d0:	00000206 	br	811036dc <bSdmaDmaM1Transfer+0x138>
		default:
			bStatus = FALSE;
811036d4:	e03ff415 	stw	zero,-48(fp)
			break;
811036d8:	0001883a 	nop
		}
		break;
811036dc:	00007406 	br	811038b0 <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
811036e0:	e0bffd03 	ldbu	r2,-12(fp)
811036e4:	10000326 	beq	r2,zero,811036f4 <bSdmaDmaM1Transfer+0x150>
811036e8:	10800060 	cmpeqi	r2,r2,1
811036ec:	1000061e 	bne	r2,zero,81103708 <bSdmaDmaM1Transfer+0x164>
811036f0:	00000b06 	br	81103720 <bSdmaDmaM1Transfer+0x17c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
811036f4:	00900004 	movi	r2,16384
811036f8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
811036fc:	00800044 	movi	r2,1
81103700:	e0bff715 	stw	r2,-36(fp)
			break;
81103704:	00000806 	br	81103728 <bSdmaDmaM1Transfer+0x184>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103708:	00800074 	movhi	r2,1
8110370c:	10900004 	addi	r2,r2,16384
81103710:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103714:	00800044 	movi	r2,1
81103718:	e0bff715 	stw	r2,-36(fp)
			break;
8110371c:	00000206 	br	81103728 <bSdmaDmaM1Transfer+0x184>
		default:
			bStatus = FALSE;
81103720:	e03ff415 	stw	zero,-48(fp)
			break;
81103724:	0001883a 	nop
		}
		break;
81103728:	00006106 	br	811038b0 <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
8110372c:	e0bffd03 	ldbu	r2,-12(fp)
81103730:	10000326 	beq	r2,zero,81103740 <bSdmaDmaM1Transfer+0x19c>
81103734:	10800060 	cmpeqi	r2,r2,1
81103738:	1000061e 	bne	r2,zero,81103754 <bSdmaDmaM1Transfer+0x1b0>
8110373c:	00000b06 	br	8110376c <bSdmaDmaM1Transfer+0x1c8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103740:	00980004 	movi	r2,24576
81103744:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103748:	00800044 	movi	r2,1
8110374c:	e0bff715 	stw	r2,-36(fp)
			break;
81103750:	00000806 	br	81103774 <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103754:	00800074 	movhi	r2,1
81103758:	10980004 	addi	r2,r2,24576
8110375c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103760:	00800044 	movi	r2,1
81103764:	e0bff715 	stw	r2,-36(fp)
			break;
81103768:	00000206 	br	81103774 <bSdmaDmaM1Transfer+0x1d0>
		default:
			bStatus = FALSE;
8110376c:	e03ff415 	stw	zero,-48(fp)
			break;
81103770:	0001883a 	nop
		}
		break;
81103774:	00004e06 	br	811038b0 <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103778:	e0bffd03 	ldbu	r2,-12(fp)
8110377c:	10000326 	beq	r2,zero,8110378c <bSdmaDmaM1Transfer+0x1e8>
81103780:	10800060 	cmpeqi	r2,r2,1
81103784:	1000061e 	bne	r2,zero,811037a0 <bSdmaDmaM1Transfer+0x1fc>
81103788:	00000b06 	br	811037b8 <bSdmaDmaM1Transfer+0x214>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8110378c:	00a00014 	movui	r2,32768
81103790:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103794:	00800044 	movi	r2,1
81103798:	e0bff715 	stw	r2,-36(fp)
			break;
8110379c:	00000806 	br	811037c0 <bSdmaDmaM1Transfer+0x21c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
811037a0:	008000b4 	movhi	r2,2
811037a4:	10a00004 	addi	r2,r2,-32768
811037a8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
811037ac:	00800044 	movi	r2,1
811037b0:	e0bff715 	stw	r2,-36(fp)
			break;
811037b4:	00000206 	br	811037c0 <bSdmaDmaM1Transfer+0x21c>
		default:
			bStatus = FALSE;
811037b8:	e03ff415 	stw	zero,-48(fp)
			break;
811037bc:	0001883a 	nop
		}
		break;
811037c0:	00003b06 	br	811038b0 <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
811037c4:	e0bffd03 	ldbu	r2,-12(fp)
811037c8:	10000326 	beq	r2,zero,811037d8 <bSdmaDmaM1Transfer+0x234>
811037cc:	10800060 	cmpeqi	r2,r2,1
811037d0:	1000061e 	bne	r2,zero,811037ec <bSdmaDmaM1Transfer+0x248>
811037d4:	00000b06 	br	81103804 <bSdmaDmaM1Transfer+0x260>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
811037d8:	00a80014 	movui	r2,40960
811037dc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
811037e0:	00800044 	movi	r2,1
811037e4:	e0bff715 	stw	r2,-36(fp)
			break;
811037e8:	00000806 	br	8110380c <bSdmaDmaM1Transfer+0x268>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
811037ec:	008000b4 	movhi	r2,2
811037f0:	10a80004 	addi	r2,r2,-24576
811037f4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
811037f8:	00800044 	movi	r2,1
811037fc:	e0bff715 	stw	r2,-36(fp)
			break;
81103800:	00000206 	br	8110380c <bSdmaDmaM1Transfer+0x268>
		default:
			bStatus = FALSE;
81103804:	e03ff415 	stw	zero,-48(fp)
			break;
81103808:	0001883a 	nop
		}
		break;
8110380c:	00002806 	br	811038b0 <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103810:	e0bffd03 	ldbu	r2,-12(fp)
81103814:	10000326 	beq	r2,zero,81103824 <bSdmaDmaM1Transfer+0x280>
81103818:	10800060 	cmpeqi	r2,r2,1
8110381c:	1000061e 	bne	r2,zero,81103838 <bSdmaDmaM1Transfer+0x294>
81103820:	00000b06 	br	81103850 <bSdmaDmaM1Transfer+0x2ac>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103824:	00b00014 	movui	r2,49152
81103828:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
8110382c:	00800044 	movi	r2,1
81103830:	e0bff715 	stw	r2,-36(fp)
			break;
81103834:	00000806 	br	81103858 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103838:	008000b4 	movhi	r2,2
8110383c:	10b00004 	addi	r2,r2,-16384
81103840:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103844:	00800044 	movi	r2,1
81103848:	e0bff715 	stw	r2,-36(fp)
			break;
8110384c:	00000206 	br	81103858 <bSdmaDmaM1Transfer+0x2b4>
		default:
			bStatus = FALSE;
81103850:	e03ff415 	stw	zero,-48(fp)
			break;
81103854:	0001883a 	nop
		}
		break;
81103858:	00001506 	br	811038b0 <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
8110385c:	e0bffd03 	ldbu	r2,-12(fp)
81103860:	10000326 	beq	r2,zero,81103870 <bSdmaDmaM1Transfer+0x2cc>
81103864:	10800060 	cmpeqi	r2,r2,1
81103868:	1000061e 	bne	r2,zero,81103884 <bSdmaDmaM1Transfer+0x2e0>
8110386c:	00000b06 	br	8110389c <bSdmaDmaM1Transfer+0x2f8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103870:	00b80014 	movui	r2,57344
81103874:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103878:	00800044 	movi	r2,1
8110387c:	e0bff715 	stw	r2,-36(fp)
			break;
81103880:	00000806 	br	811038a4 <bSdmaDmaM1Transfer+0x300>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103884:	008000b4 	movhi	r2,2
81103888:	10b80004 	addi	r2,r2,-8192
8110388c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103890:	00800044 	movi	r2,1
81103894:	e0bff715 	stw	r2,-36(fp)
			break;
81103898:	00000206 	br	811038a4 <bSdmaDmaM1Transfer+0x300>
		default:
			bStatus = FALSE;
8110389c:	e03ff415 	stw	zero,-48(fp)
			break;
811038a0:	0001883a 	nop
		}
		break;
811038a4:	00000206 	br	811038b0 <bSdmaDmaM1Transfer+0x30c>
	default:
		bStatus = FALSE;
811038a8:	e03ff415 	stw	zero,-48(fp)
		break;
811038ac:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
811038b0:	e0bffb17 	ldw	r2,-20(fp)
811038b4:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
811038b8:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
811038bc:	e0bff417 	ldw	r2,-48(fp)
811038c0:	10003b26 	beq	r2,zero,811039b0 <bSdmaDmaM1Transfer+0x40c>
		if (pxDmaM1Dev == NULL) {
811038c4:	d0a01517 	ldw	r2,-32684(gp)
811038c8:	1000021e 	bne	r2,zero,811038d4 <bSdmaDmaM1Transfer+0x330>
			bStatus = FALSE;
811038cc:	e03ff415 	stw	zero,-48(fp)
811038d0:	00003706 	br	811039b0 <bSdmaDmaM1Transfer+0x40c>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
811038d4:	e03ff50d 	sth	zero,-44(fp)
811038d8:	00003206 	br	811039a4 <bSdmaDmaM1Transfer+0x400>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
811038dc:	01000044 	movi	r4,1
811038e0:	111ba400 	call	8111ba40 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
811038e4:	d0a01517 	ldw	r2,-32684(gp)
811038e8:	10800317 	ldw	r2,12(r2)
811038ec:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
811038f0:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
811038f4:	103ff91e 	bne	r2,zero,811038dc <__reset+0xfb0e38dc>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
811038f8:	d2201517 	ldw	r8,-32684(gp)
811038fc:	e17ff817 	ldw	r5,-32(fp)
81103900:	e1bff617 	ldw	r6,-40(fp)
81103904:	e0bff917 	ldw	r2,-28(fp)
81103908:	e0fff717 	ldw	r3,-36(fp)
8110390c:	01000044 	movi	r4,1
81103910:	d9000815 	stw	r4,32(sp)
81103914:	01000044 	movi	r4,1
81103918:	d9000715 	stw	r4,28(sp)
8110391c:	01000044 	movi	r4,1
81103920:	d9000615 	stw	r4,24(sp)
81103924:	01000044 	movi	r4,1
81103928:	d9000515 	stw	r4,20(sp)
8110392c:	01000044 	movi	r4,1
81103930:	d9000415 	stw	r4,16(sp)
81103934:	d8c00315 	stw	r3,12(sp)
81103938:	d8800215 	stw	r2,8(sp)
8110393c:	e0bffa17 	ldw	r2,-24(fp)
81103940:	d8800115 	stw	r2,4(sp)
81103944:	00802204 	movi	r2,136
81103948:	d8800015 	stw	r2,0(sp)
8110394c:	300f883a 	mov	r7,r6
81103950:	280d883a 	mov	r6,r5
81103954:	800b883a 	mov	r5,r16
81103958:	4009883a 	mov	r4,r8
8110395c:	11062180 	call	81106218 <iMsgdmaConstructExtendedMmToMmDescriptor>
81103960:	10000226 	beq	r2,zero,8110396c <bSdmaDmaM1Transfer+0x3c8>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81103964:	e03ff415 	stw	zero,-48(fp)
					break;
81103968:	00001106 	br	811039b0 <bSdmaDmaM1Transfer+0x40c>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
8110396c:	d0a01517 	ldw	r2,-32684(gp)
81103970:	800b883a 	mov	r5,r16
81103974:	1009883a 	mov	r4,r2
81103978:	110630c0 	call	8110630c <iMsgdmaExtendedDescriptorSyncTransfer>
8110397c:	10000226 	beq	r2,zero,81103988 <bSdmaDmaM1Transfer+0x3e4>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81103980:	e03ff415 	stw	zero,-48(fp)
						break;
81103984:	00000a06 	br	811039b0 <bSdmaDmaM1Transfer+0x40c>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81103988:	e0bff817 	ldw	r2,-32(fp)
8110398c:	10802204 	addi	r2,r2,136
81103990:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81103994:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103998:	e0bff50b 	ldhu	r2,-44(fp)
8110399c:	10800044 	addi	r2,r2,1
811039a0:	e0bff50d 	sth	r2,-44(fp)
811039a4:	e0fff50b 	ldhu	r3,-44(fp)
811039a8:	e0bffc0b 	ldhu	r2,-16(fp)
811039ac:	18bfcd36 	bltu	r3,r2,811038e4 <__reset+0xfb0e38e4>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
811039b0:	e0bff417 	ldw	r2,-48(fp)
}
811039b4:	e6ffff04 	addi	sp,fp,-4
811039b8:	dfc00217 	ldw	ra,8(sp)
811039bc:	df000117 	ldw	fp,4(sp)
811039c0:	dc000017 	ldw	r16,0(sp)
811039c4:	dec00304 	addi	sp,sp,12
811039c8:	f800283a 	ret

811039cc <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
811039cc:	deffe904 	addi	sp,sp,-92
811039d0:	dfc01615 	stw	ra,88(sp)
811039d4:	df001515 	stw	fp,84(sp)
811039d8:	dc001415 	stw	r16,80(sp)
811039dc:	df001504 	addi	fp,sp,84
811039e0:	e13ffb15 	stw	r4,-20(fp)
811039e4:	2809883a 	mov	r4,r5
811039e8:	3007883a 	mov	r3,r6
811039ec:	3805883a 	mov	r2,r7
811039f0:	e13ffc0d 	sth	r4,-16(fp)
811039f4:	e0fffd05 	stb	r3,-12(fp)
811039f8:	e0bffe05 	stb	r2,-8(fp)
811039fc:	defff004 	addi	sp,sp,-64
81103a00:	d8800904 	addi	r2,sp,36
81103a04:	108007c4 	addi	r2,r2,31
81103a08:	1004d17a 	srli	r2,r2,5
81103a0c:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103a10:	00800044 	movi	r2,1
81103a14:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103a18:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103a1c:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103a20:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103a24:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103a28:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103a2c:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103a30:	e0bffe03 	ldbu	r2,-8(fp)
81103a34:	10c00268 	cmpgeui	r3,r2,9
81103a38:	1800a51e 	bne	r3,zero,81103cd0 <bSdmaDmaM2Transfer+0x304>
81103a3c:	100690ba 	slli	r3,r2,2
81103a40:	00a04434 	movhi	r2,33040
81103a44:	108e9504 	addi	r2,r2,14932
81103a48:	1885883a 	add	r2,r3,r2
81103a4c:	10800017 	ldw	r2,0(r2)
81103a50:	1000683a 	jmp	r2
81103a54:	81103cd0 	cmplti	r4,r16,16627
81103a58:	81103a78 	rdprs	r4,r16,16617
81103a5c:	81103abc 	xorhi	r4,r16,16618
81103a60:	81103b08 	cmpgei	r4,r16,16620
81103a64:	81103b54 	ori	r4,r16,16621
81103a68:	81103ba0 	cmpeqi	r4,r16,16622
81103a6c:	81103bec 	andhi	r4,r16,16623
81103a70:	81103c38 	rdprs	r4,r16,16624
81103a74:	81103c84 	addi	r4,r16,16626
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103a78:	e0bffd03 	ldbu	r2,-12(fp)
81103a7c:	10000326 	beq	r2,zero,81103a8c <bSdmaDmaM2Transfer+0xc0>
81103a80:	10800060 	cmpeqi	r2,r2,1
81103a84:	1000051e 	bne	r2,zero,81103a9c <bSdmaDmaM2Transfer+0xd0>
81103a88:	00000906 	br	81103ab0 <bSdmaDmaM2Transfer+0xe4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103a8c:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103a90:	00800044 	movi	r2,1
81103a94:	e0bff715 	stw	r2,-36(fp)
			break;
81103a98:	00000706 	br	81103ab8 <bSdmaDmaM2Transfer+0xec>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103a9c:	00800074 	movhi	r2,1
81103aa0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103aa4:	00800044 	movi	r2,1
81103aa8:	e0bff715 	stw	r2,-36(fp)
			break;
81103aac:	00000206 	br	81103ab8 <bSdmaDmaM2Transfer+0xec>
		default:
			bStatus = FALSE;
81103ab0:	e03ff415 	stw	zero,-48(fp)
			break;
81103ab4:	0001883a 	nop
		}
		break;
81103ab8:	00008706 	br	81103cd8 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103abc:	e0bffd03 	ldbu	r2,-12(fp)
81103ac0:	10000326 	beq	r2,zero,81103ad0 <bSdmaDmaM2Transfer+0x104>
81103ac4:	10800060 	cmpeqi	r2,r2,1
81103ac8:	1000061e 	bne	r2,zero,81103ae4 <bSdmaDmaM2Transfer+0x118>
81103acc:	00000b06 	br	81103afc <bSdmaDmaM2Transfer+0x130>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103ad0:	00880004 	movi	r2,8192
81103ad4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103ad8:	00800044 	movi	r2,1
81103adc:	e0bff715 	stw	r2,-36(fp)
			break;
81103ae0:	00000806 	br	81103b04 <bSdmaDmaM2Transfer+0x138>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103ae4:	00800074 	movhi	r2,1
81103ae8:	10880004 	addi	r2,r2,8192
81103aec:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103af0:	00800044 	movi	r2,1
81103af4:	e0bff715 	stw	r2,-36(fp)
			break;
81103af8:	00000206 	br	81103b04 <bSdmaDmaM2Transfer+0x138>
		default:
			bStatus = FALSE;
81103afc:	e03ff415 	stw	zero,-48(fp)
			break;
81103b00:	0001883a 	nop
		}
		break;
81103b04:	00007406 	br	81103cd8 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103b08:	e0bffd03 	ldbu	r2,-12(fp)
81103b0c:	10000326 	beq	r2,zero,81103b1c <bSdmaDmaM2Transfer+0x150>
81103b10:	10800060 	cmpeqi	r2,r2,1
81103b14:	1000061e 	bne	r2,zero,81103b30 <bSdmaDmaM2Transfer+0x164>
81103b18:	00000b06 	br	81103b48 <bSdmaDmaM2Transfer+0x17c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103b1c:	00900004 	movi	r2,16384
81103b20:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103b24:	00800044 	movi	r2,1
81103b28:	e0bff715 	stw	r2,-36(fp)
			break;
81103b2c:	00000806 	br	81103b50 <bSdmaDmaM2Transfer+0x184>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103b30:	00800074 	movhi	r2,1
81103b34:	10900004 	addi	r2,r2,16384
81103b38:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103b3c:	00800044 	movi	r2,1
81103b40:	e0bff715 	stw	r2,-36(fp)
			break;
81103b44:	00000206 	br	81103b50 <bSdmaDmaM2Transfer+0x184>
		default:
			bStatus = FALSE;
81103b48:	e03ff415 	stw	zero,-48(fp)
			break;
81103b4c:	0001883a 	nop
		}
		break;
81103b50:	00006106 	br	81103cd8 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103b54:	e0bffd03 	ldbu	r2,-12(fp)
81103b58:	10000326 	beq	r2,zero,81103b68 <bSdmaDmaM2Transfer+0x19c>
81103b5c:	10800060 	cmpeqi	r2,r2,1
81103b60:	1000061e 	bne	r2,zero,81103b7c <bSdmaDmaM2Transfer+0x1b0>
81103b64:	00000b06 	br	81103b94 <bSdmaDmaM2Transfer+0x1c8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103b68:	00980004 	movi	r2,24576
81103b6c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103b70:	00800044 	movi	r2,1
81103b74:	e0bff715 	stw	r2,-36(fp)
			break;
81103b78:	00000806 	br	81103b9c <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103b7c:	00800074 	movhi	r2,1
81103b80:	10980004 	addi	r2,r2,24576
81103b84:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103b88:	00800044 	movi	r2,1
81103b8c:	e0bff715 	stw	r2,-36(fp)
			break;
81103b90:	00000206 	br	81103b9c <bSdmaDmaM2Transfer+0x1d0>
		default:
			bStatus = FALSE;
81103b94:	e03ff415 	stw	zero,-48(fp)
			break;
81103b98:	0001883a 	nop
		}
		break;
81103b9c:	00004e06 	br	81103cd8 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103ba0:	e0bffd03 	ldbu	r2,-12(fp)
81103ba4:	10000326 	beq	r2,zero,81103bb4 <bSdmaDmaM2Transfer+0x1e8>
81103ba8:	10800060 	cmpeqi	r2,r2,1
81103bac:	1000061e 	bne	r2,zero,81103bc8 <bSdmaDmaM2Transfer+0x1fc>
81103bb0:	00000b06 	br	81103be0 <bSdmaDmaM2Transfer+0x214>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103bb4:	00a00014 	movui	r2,32768
81103bb8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103bbc:	00800044 	movi	r2,1
81103bc0:	e0bff715 	stw	r2,-36(fp)
			break;
81103bc4:	00000806 	br	81103be8 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103bc8:	008000b4 	movhi	r2,2
81103bcc:	10a00004 	addi	r2,r2,-32768
81103bd0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103bd4:	00800044 	movi	r2,1
81103bd8:	e0bff715 	stw	r2,-36(fp)
			break;
81103bdc:	00000206 	br	81103be8 <bSdmaDmaM2Transfer+0x21c>
		default:
			bStatus = FALSE;
81103be0:	e03ff415 	stw	zero,-48(fp)
			break;
81103be4:	0001883a 	nop
		}
		break;
81103be8:	00003b06 	br	81103cd8 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103bec:	e0bffd03 	ldbu	r2,-12(fp)
81103bf0:	10000326 	beq	r2,zero,81103c00 <bSdmaDmaM2Transfer+0x234>
81103bf4:	10800060 	cmpeqi	r2,r2,1
81103bf8:	1000061e 	bne	r2,zero,81103c14 <bSdmaDmaM2Transfer+0x248>
81103bfc:	00000b06 	br	81103c2c <bSdmaDmaM2Transfer+0x260>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103c00:	00a80014 	movui	r2,40960
81103c04:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103c08:	00800044 	movi	r2,1
81103c0c:	e0bff715 	stw	r2,-36(fp)
			break;
81103c10:	00000806 	br	81103c34 <bSdmaDmaM2Transfer+0x268>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103c14:	008000b4 	movhi	r2,2
81103c18:	10a80004 	addi	r2,r2,-24576
81103c1c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103c20:	00800044 	movi	r2,1
81103c24:	e0bff715 	stw	r2,-36(fp)
			break;
81103c28:	00000206 	br	81103c34 <bSdmaDmaM2Transfer+0x268>
		default:
			bStatus = FALSE;
81103c2c:	e03ff415 	stw	zero,-48(fp)
			break;
81103c30:	0001883a 	nop
		}
		break;
81103c34:	00002806 	br	81103cd8 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103c38:	e0bffd03 	ldbu	r2,-12(fp)
81103c3c:	10000326 	beq	r2,zero,81103c4c <bSdmaDmaM2Transfer+0x280>
81103c40:	10800060 	cmpeqi	r2,r2,1
81103c44:	1000061e 	bne	r2,zero,81103c60 <bSdmaDmaM2Transfer+0x294>
81103c48:	00000b06 	br	81103c78 <bSdmaDmaM2Transfer+0x2ac>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103c4c:	00b00014 	movui	r2,49152
81103c50:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103c54:	00800044 	movi	r2,1
81103c58:	e0bff715 	stw	r2,-36(fp)
			break;
81103c5c:	00000806 	br	81103c80 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103c60:	008000b4 	movhi	r2,2
81103c64:	10b00004 	addi	r2,r2,-16384
81103c68:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103c6c:	00800044 	movi	r2,1
81103c70:	e0bff715 	stw	r2,-36(fp)
			break;
81103c74:	00000206 	br	81103c80 <bSdmaDmaM2Transfer+0x2b4>
		default:
			bStatus = FALSE;
81103c78:	e03ff415 	stw	zero,-48(fp)
			break;
81103c7c:	0001883a 	nop
		}
		break;
81103c80:	00001506 	br	81103cd8 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103c84:	e0bffd03 	ldbu	r2,-12(fp)
81103c88:	10000326 	beq	r2,zero,81103c98 <bSdmaDmaM2Transfer+0x2cc>
81103c8c:	10800060 	cmpeqi	r2,r2,1
81103c90:	1000061e 	bne	r2,zero,81103cac <bSdmaDmaM2Transfer+0x2e0>
81103c94:	00000b06 	br	81103cc4 <bSdmaDmaM2Transfer+0x2f8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103c98:	00b80014 	movui	r2,57344
81103c9c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103ca0:	00800044 	movi	r2,1
81103ca4:	e0bff715 	stw	r2,-36(fp)
			break;
81103ca8:	00000806 	br	81103ccc <bSdmaDmaM2Transfer+0x300>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103cac:	008000b4 	movhi	r2,2
81103cb0:	10b80004 	addi	r2,r2,-8192
81103cb4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103cb8:	00800044 	movi	r2,1
81103cbc:	e0bff715 	stw	r2,-36(fp)
			break;
81103cc0:	00000206 	br	81103ccc <bSdmaDmaM2Transfer+0x300>
		default:
			bStatus = FALSE;
81103cc4:	e03ff415 	stw	zero,-48(fp)
			break;
81103cc8:	0001883a 	nop
		}
		break;
81103ccc:	00000206 	br	81103cd8 <bSdmaDmaM2Transfer+0x30c>
	default:
		bStatus = FALSE;
81103cd0:	e03ff415 	stw	zero,-48(fp)
		break;
81103cd4:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
81103cd8:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
81103cdc:	00a00034 	movhi	r2,32768
81103ce0:	1885883a 	add	r2,r3,r2
81103ce4:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
81103ce8:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103cec:	e0bff417 	ldw	r2,-48(fp)
81103cf0:	10003b26 	beq	r2,zero,81103de0 <bSdmaDmaM2Transfer+0x414>
		if (pxDmaM2Dev == NULL) {
81103cf4:	d0a01617 	ldw	r2,-32680(gp)
81103cf8:	1000021e 	bne	r2,zero,81103d04 <bSdmaDmaM2Transfer+0x338>
			bStatus = FALSE;
81103cfc:	e03ff415 	stw	zero,-48(fp)
81103d00:	00003706 	br	81103de0 <bSdmaDmaM2Transfer+0x414>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103d04:	e03ff50d 	sth	zero,-44(fp)
81103d08:	00003206 	br	81103dd4 <bSdmaDmaM2Transfer+0x408>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103d0c:	01000044 	movi	r4,1
81103d10:	111ba400 	call	8111ba40 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103d14:	d0a01617 	ldw	r2,-32680(gp)
81103d18:	10800317 	ldw	r2,12(r2)
81103d1c:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103d20:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103d24:	103ff91e 	bne	r2,zero,81103d0c <__reset+0xfb0e3d0c>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
81103d28:	d2201617 	ldw	r8,-32680(gp)
81103d2c:	e17ff817 	ldw	r5,-32(fp)
81103d30:	e1bff617 	ldw	r6,-40(fp)
81103d34:	e0bff917 	ldw	r2,-28(fp)
81103d38:	e0fff717 	ldw	r3,-36(fp)
81103d3c:	01000044 	movi	r4,1
81103d40:	d9000815 	stw	r4,32(sp)
81103d44:	01000044 	movi	r4,1
81103d48:	d9000715 	stw	r4,28(sp)
81103d4c:	01000044 	movi	r4,1
81103d50:	d9000615 	stw	r4,24(sp)
81103d54:	01000044 	movi	r4,1
81103d58:	d9000515 	stw	r4,20(sp)
81103d5c:	01000044 	movi	r4,1
81103d60:	d9000415 	stw	r4,16(sp)
81103d64:	d8c00315 	stw	r3,12(sp)
81103d68:	d8800215 	stw	r2,8(sp)
81103d6c:	e0bffa17 	ldw	r2,-24(fp)
81103d70:	d8800115 	stw	r2,4(sp)
81103d74:	00802204 	movi	r2,136
81103d78:	d8800015 	stw	r2,0(sp)
81103d7c:	300f883a 	mov	r7,r6
81103d80:	280d883a 	mov	r6,r5
81103d84:	800b883a 	mov	r5,r16
81103d88:	4009883a 	mov	r4,r8
81103d8c:	11062180 	call	81106218 <iMsgdmaConstructExtendedMmToMmDescriptor>
81103d90:	10000226 	beq	r2,zero,81103d9c <bSdmaDmaM2Transfer+0x3d0>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81103d94:	e03ff415 	stw	zero,-48(fp)
					break;
81103d98:	00001106 	br	81103de0 <bSdmaDmaM2Transfer+0x414>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
81103d9c:	d0a01617 	ldw	r2,-32680(gp)
81103da0:	800b883a 	mov	r5,r16
81103da4:	1009883a 	mov	r4,r2
81103da8:	110630c0 	call	8110630c <iMsgdmaExtendedDescriptorSyncTransfer>
81103dac:	10000226 	beq	r2,zero,81103db8 <bSdmaDmaM2Transfer+0x3ec>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81103db0:	e03ff415 	stw	zero,-48(fp)
						break;
81103db4:	00000a06 	br	81103de0 <bSdmaDmaM2Transfer+0x414>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81103db8:	e0bff817 	ldw	r2,-32(fp)
81103dbc:	10802204 	addi	r2,r2,136
81103dc0:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
81103dc4:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103dc8:	e0bff50b 	ldhu	r2,-44(fp)
81103dcc:	10800044 	addi	r2,r2,1
81103dd0:	e0bff50d 	sth	r2,-44(fp)
81103dd4:	e0fff50b 	ldhu	r3,-44(fp)
81103dd8:	e0bffc0b 	ldhu	r2,-16(fp)
81103ddc:	18bfcd36 	bltu	r3,r2,81103d14 <__reset+0xfb0e3d14>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81103de0:	e0bff417 	ldw	r2,-48(fp)
}
81103de4:	e6ffff04 	addi	sp,fp,-4
81103de8:	dfc00217 	ldw	ra,8(sp)
81103dec:	df000117 	ldw	fp,4(sp)
81103df0:	dc000017 	ldw	r16,0(sp)
81103df4:	dec00304 	addi	sp,sp,12
81103df8:	f800283a 	ret

81103dfc <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
81103dfc:	defffc04 	addi	sp,sp,-16
81103e00:	dfc00315 	stw	ra,12(sp)
81103e04:	df000215 	stw	fp,8(sp)
81103e08:	df000204 	addi	fp,sp,8
81103e0c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81103e10:	e0bfff17 	ldw	r2,-4(fp)
81103e14:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh1IrqFlagClrBufferEmpty();
81103e18:	1103fbc0 	call	81103fbc <vFeebCh1IrqFlagClrBufferEmpty>
}
81103e1c:	0001883a 	nop
81103e20:	e037883a 	mov	sp,fp
81103e24:	dfc00117 	ldw	ra,4(sp)
81103e28:	df000017 	ldw	fp,0(sp)
81103e2c:	dec00204 	addi	sp,sp,8
81103e30:	f800283a 	ret

81103e34 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
81103e34:	defffc04 	addi	sp,sp,-16
81103e38:	dfc00315 	stw	ra,12(sp)
81103e3c:	df000215 	stw	fp,8(sp)
81103e40:	df000204 	addi	fp,sp,8
81103e44:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81103e48:	e0bfff17 	ldw	r2,-4(fp)
81103e4c:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh2IrqFlagClrBufferEmpty();
81103e50:	1103ff80 	call	81103ff8 <vFeebCh2IrqFlagClrBufferEmpty>
}
81103e54:	0001883a 	nop
81103e58:	e037883a 	mov	sp,fp
81103e5c:	dfc00117 	ldw	ra,4(sp)
81103e60:	df000017 	ldw	fp,0(sp)
81103e64:	dec00204 	addi	sp,sp,8
81103e68:	f800283a 	ret

81103e6c <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81103e6c:	defffc04 	addi	sp,sp,-16
81103e70:	dfc00315 	stw	ra,12(sp)
81103e74:	df000215 	stw	fp,8(sp)
81103e78:	df000204 	addi	fp,sp,8
81103e7c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81103e80:	e0bfff17 	ldw	r2,-4(fp)
81103e84:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh3IrqFlagClrBufferEmpty();
81103e88:	11040340 	call	81104034 <vFeebCh3IrqFlagClrBufferEmpty>
}
81103e8c:	0001883a 	nop
81103e90:	e037883a 	mov	sp,fp
81103e94:	dfc00117 	ldw	ra,4(sp)
81103e98:	df000017 	ldw	fp,0(sp)
81103e9c:	dec00204 	addi	sp,sp,8
81103ea0:	f800283a 	ret

81103ea4 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
81103ea4:	defffc04 	addi	sp,sp,-16
81103ea8:	dfc00315 	stw	ra,12(sp)
81103eac:	df000215 	stw	fp,8(sp)
81103eb0:	df000204 	addi	fp,sp,8
81103eb4:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81103eb8:	e0bfff17 	ldw	r2,-4(fp)
81103ebc:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh4IrqFlagClrBufferEmpty();
81103ec0:	11040700 	call	81104070 <vFeebCh4IrqFlagClrBufferEmpty>
}
81103ec4:	0001883a 	nop
81103ec8:	e037883a 	mov	sp,fp
81103ecc:	dfc00117 	ldw	ra,4(sp)
81103ed0:	df000017 	ldw	fp,0(sp)
81103ed4:	dec00204 	addi	sp,sp,8
81103ed8:	f800283a 	ret

81103edc <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
81103edc:	defffc04 	addi	sp,sp,-16
81103ee0:	dfc00315 	stw	ra,12(sp)
81103ee4:	df000215 	stw	fp,8(sp)
81103ee8:	df000204 	addi	fp,sp,8
81103eec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81103ef0:	e0bfff17 	ldw	r2,-4(fp)
81103ef4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh5IrqFlagClrBufferEmpty();
81103ef8:	11040ac0 	call	811040ac <vFeebCh5IrqFlagClrBufferEmpty>
}
81103efc:	0001883a 	nop
81103f00:	e037883a 	mov	sp,fp
81103f04:	dfc00117 	ldw	ra,4(sp)
81103f08:	df000017 	ldw	fp,0(sp)
81103f0c:	dec00204 	addi	sp,sp,8
81103f10:	f800283a 	ret

81103f14 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
81103f14:	defffc04 	addi	sp,sp,-16
81103f18:	dfc00315 	stw	ra,12(sp)
81103f1c:	df000215 	stw	fp,8(sp)
81103f20:	df000204 	addi	fp,sp,8
81103f24:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81103f28:	e0bfff17 	ldw	r2,-4(fp)
81103f2c:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vFeebCh6IrqFlagClrBufferEmpty();
81103f30:	11040e80 	call	811040e8 <vFeebCh6IrqFlagClrBufferEmpty>
}
81103f34:	0001883a 	nop
81103f38:	e037883a 	mov	sp,fp
81103f3c:	dfc00117 	ldw	ra,4(sp)
81103f40:	df000017 	ldw	fp,0(sp)
81103f44:	dec00204 	addi	sp,sp,8
81103f48:	f800283a 	ret

81103f4c <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81103f4c:	defffc04 	addi	sp,sp,-16
81103f50:	dfc00315 	stw	ra,12(sp)
81103f54:	df000215 	stw	fp,8(sp)
81103f58:	df000204 	addi	fp,sp,8
81103f5c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81103f60:	e0bfff17 	ldw	r2,-4(fp)
81103f64:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh7IrqFlagClrBufferEmpty();
81103f68:	11041240 	call	81104124 <vFeebCh7IrqFlagClrBufferEmpty>
}
81103f6c:	0001883a 	nop
81103f70:	e037883a 	mov	sp,fp
81103f74:	dfc00117 	ldw	ra,4(sp)
81103f78:	df000017 	ldw	fp,0(sp)
81103f7c:	dec00204 	addi	sp,sp,8
81103f80:	f800283a 	ret

81103f84 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
81103f84:	defffc04 	addi	sp,sp,-16
81103f88:	dfc00315 	stw	ra,12(sp)
81103f8c:	df000215 	stw	fp,8(sp)
81103f90:	df000204 	addi	fp,sp,8
81103f94:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81103f98:	e0bfff17 	ldw	r2,-4(fp)
81103f9c:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh8IrqFlagClrBufferEmpty();
81103fa0:	11041600 	call	81104160 <vFeebCh8IrqFlagClrBufferEmpty>
}
81103fa4:	0001883a 	nop
81103fa8:	e037883a 	mov	sp,fp
81103fac:	dfc00117 	ldw	ra,4(sp)
81103fb0:	df000017 	ldw	fp,0(sp)
81103fb4:	dec00204 	addi	sp,sp,8
81103fb8:	f800283a 	ret

81103fbc <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81103fbc:	defffe04 	addi	sp,sp,-8
81103fc0:	dfc00115 	stw	ra,4(sp)
81103fc4:	df000015 	stw	fp,0(sp)
81103fc8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81103fcc:	01800044 	movi	r6,1
81103fd0:	01400144 	movi	r5,5
81103fd4:	01204834 	movhi	r4,33056
81103fd8:	210b0004 	addi	r4,r4,11264
81103fdc:	11049480 	call	81104948 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81103fe0:	0001883a 	nop
81103fe4:	e037883a 	mov	sp,fp
81103fe8:	dfc00117 	ldw	ra,4(sp)
81103fec:	df000017 	ldw	fp,0(sp)
81103ff0:	dec00204 	addi	sp,sp,8
81103ff4:	f800283a 	ret

81103ff8 <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
81103ff8:	defffe04 	addi	sp,sp,-8
81103ffc:	dfc00115 	stw	ra,4(sp)
81104000:	df000015 	stw	fp,0(sp)
81104004:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104008:	01800044 	movi	r6,1
8110400c:	01400144 	movi	r5,5
81104010:	01204834 	movhi	r4,33056
81104014:	210a0004 	addi	r4,r4,10240
81104018:	11049480 	call	81104948 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110401c:	0001883a 	nop
81104020:	e037883a 	mov	sp,fp
81104024:	dfc00117 	ldw	ra,4(sp)
81104028:	df000017 	ldw	fp,0(sp)
8110402c:	dec00204 	addi	sp,sp,8
81104030:	f800283a 	ret

81104034 <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
81104034:	defffe04 	addi	sp,sp,-8
81104038:	dfc00115 	stw	ra,4(sp)
8110403c:	df000015 	stw	fp,0(sp)
81104040:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104044:	01800044 	movi	r6,1
81104048:	01400144 	movi	r5,5
8110404c:	01204834 	movhi	r4,33056
81104050:	21090004 	addi	r4,r4,9216
81104054:	11049480 	call	81104948 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104058:	0001883a 	nop
8110405c:	e037883a 	mov	sp,fp
81104060:	dfc00117 	ldw	ra,4(sp)
81104064:	df000017 	ldw	fp,0(sp)
81104068:	dec00204 	addi	sp,sp,8
8110406c:	f800283a 	ret

81104070 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
81104070:	defffe04 	addi	sp,sp,-8
81104074:	dfc00115 	stw	ra,4(sp)
81104078:	df000015 	stw	fp,0(sp)
8110407c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104080:	01800044 	movi	r6,1
81104084:	01400144 	movi	r5,5
81104088:	01204834 	movhi	r4,33056
8110408c:	21080004 	addi	r4,r4,8192
81104090:	11049480 	call	81104948 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104094:	0001883a 	nop
81104098:	e037883a 	mov	sp,fp
8110409c:	dfc00117 	ldw	ra,4(sp)
811040a0:	df000017 	ldw	fp,0(sp)
811040a4:	dec00204 	addi	sp,sp,8
811040a8:	f800283a 	ret

811040ac <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
811040ac:	defffe04 	addi	sp,sp,-8
811040b0:	dfc00115 	stw	ra,4(sp)
811040b4:	df000015 	stw	fp,0(sp)
811040b8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
811040bc:	01800044 	movi	r6,1
811040c0:	01400144 	movi	r5,5
811040c4:	01204834 	movhi	r4,33056
811040c8:	21070004 	addi	r4,r4,7168
811040cc:	11049480 	call	81104948 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811040d0:	0001883a 	nop
811040d4:	e037883a 	mov	sp,fp
811040d8:	dfc00117 	ldw	ra,4(sp)
811040dc:	df000017 	ldw	fp,0(sp)
811040e0:	dec00204 	addi	sp,sp,8
811040e4:	f800283a 	ret

811040e8 <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
811040e8:	defffe04 	addi	sp,sp,-8
811040ec:	dfc00115 	stw	ra,4(sp)
811040f0:	df000015 	stw	fp,0(sp)
811040f4:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
811040f8:	01800044 	movi	r6,1
811040fc:	01400144 	movi	r5,5
81104100:	01204834 	movhi	r4,33056
81104104:	21060004 	addi	r4,r4,6144
81104108:	11049480 	call	81104948 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110410c:	0001883a 	nop
81104110:	e037883a 	mov	sp,fp
81104114:	dfc00117 	ldw	ra,4(sp)
81104118:	df000017 	ldw	fp,0(sp)
8110411c:	dec00204 	addi	sp,sp,8
81104120:	f800283a 	ret

81104124 <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
81104124:	defffe04 	addi	sp,sp,-8
81104128:	dfc00115 	stw	ra,4(sp)
8110412c:	df000015 	stw	fp,0(sp)
81104130:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104134:	01800044 	movi	r6,1
81104138:	01400144 	movi	r5,5
8110413c:	01204834 	movhi	r4,33056
81104140:	21050004 	addi	r4,r4,5120
81104144:	11049480 	call	81104948 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104148:	0001883a 	nop
8110414c:	e037883a 	mov	sp,fp
81104150:	dfc00117 	ldw	ra,4(sp)
81104154:	df000017 	ldw	fp,0(sp)
81104158:	dec00204 	addi	sp,sp,8
8110415c:	f800283a 	ret

81104160 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
81104160:	defffe04 	addi	sp,sp,-8
81104164:	dfc00115 	stw	ra,4(sp)
81104168:	df000015 	stw	fp,0(sp)
8110416c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104170:	01800044 	movi	r6,1
81104174:	01400144 	movi	r5,5
81104178:	01204834 	movhi	r4,33056
8110417c:	21040004 	addi	r4,r4,4096
81104180:	11049480 	call	81104948 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104184:	0001883a 	nop
81104188:	e037883a 	mov	sp,fp
8110418c:	dfc00117 	ldw	ra,4(sp)
81104190:	df000017 	ldw	fp,0(sp)
81104194:	dec00204 	addi	sp,sp,8
81104198:	f800283a 	ret

8110419c <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
8110419c:	defffd04 	addi	sp,sp,-12
811041a0:	dfc00215 	stw	ra,8(sp)
811041a4:	df000115 	stw	fp,4(sp)
811041a8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811041ac:	01400144 	movi	r5,5
811041b0:	01204834 	movhi	r4,33056
811041b4:	210b0004 	addi	r4,r4,11264
811041b8:	11049940 	call	81104994 <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811041bc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811041c0:	10000326 	beq	r2,zero,811041d0 <bFeebCh1IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811041c4:	00800044 	movi	r2,1
811041c8:	e0bfff15 	stw	r2,-4(fp)
811041cc:	00000106 	br	811041d4 <bFeebCh1IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
811041d0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811041d4:	e0bfff17 	ldw	r2,-4(fp)
}
811041d8:	e037883a 	mov	sp,fp
811041dc:	dfc00117 	ldw	ra,4(sp)
811041e0:	df000017 	ldw	fp,0(sp)
811041e4:	dec00204 	addi	sp,sp,8
811041e8:	f800283a 	ret

811041ec <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
811041ec:	defffd04 	addi	sp,sp,-12
811041f0:	dfc00215 	stw	ra,8(sp)
811041f4:	df000115 	stw	fp,4(sp)
811041f8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811041fc:	01400144 	movi	r5,5
81104200:	01204834 	movhi	r4,33056
81104204:	210a0004 	addi	r4,r4,10240
81104208:	11049940 	call	81104994 <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110420c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104210:	10000326 	beq	r2,zero,81104220 <bFeebCh2IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104214:	00800044 	movi	r2,1
81104218:	e0bfff15 	stw	r2,-4(fp)
8110421c:	00000106 	br	81104224 <bFeebCh2IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104220:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104224:	e0bfff17 	ldw	r2,-4(fp)
}
81104228:	e037883a 	mov	sp,fp
8110422c:	dfc00117 	ldw	ra,4(sp)
81104230:	df000017 	ldw	fp,0(sp)
81104234:	dec00204 	addi	sp,sp,8
81104238:	f800283a 	ret

8110423c <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
8110423c:	defffd04 	addi	sp,sp,-12
81104240:	dfc00215 	stw	ra,8(sp)
81104244:	df000115 	stw	fp,4(sp)
81104248:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
8110424c:	01400144 	movi	r5,5
81104250:	01204834 	movhi	r4,33056
81104254:	21090004 	addi	r4,r4,9216
81104258:	11049940 	call	81104994 <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110425c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104260:	10000326 	beq	r2,zero,81104270 <bFeebCh3IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104264:	00800044 	movi	r2,1
81104268:	e0bfff15 	stw	r2,-4(fp)
8110426c:	00000106 	br	81104274 <bFeebCh3IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104270:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104274:	e0bfff17 	ldw	r2,-4(fp)
}
81104278:	e037883a 	mov	sp,fp
8110427c:	dfc00117 	ldw	ra,4(sp)
81104280:	df000017 	ldw	fp,0(sp)
81104284:	dec00204 	addi	sp,sp,8
81104288:	f800283a 	ret

8110428c <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
8110428c:	defffd04 	addi	sp,sp,-12
81104290:	dfc00215 	stw	ra,8(sp)
81104294:	df000115 	stw	fp,4(sp)
81104298:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
8110429c:	01400144 	movi	r5,5
811042a0:	01204834 	movhi	r4,33056
811042a4:	21080004 	addi	r4,r4,8192
811042a8:	11049940 	call	81104994 <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811042ac:	1080004c 	andi	r2,r2,1
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811042b0:	10000326 	beq	r2,zero,811042c0 <bFeebCh4IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811042b4:	00800044 	movi	r2,1
811042b8:	e0bfff15 	stw	r2,-4(fp)
811042bc:	00000106 	br	811042c4 <bFeebCh4IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
811042c0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811042c4:	e0bfff17 	ldw	r2,-4(fp)
}
811042c8:	e037883a 	mov	sp,fp
811042cc:	dfc00117 	ldw	ra,4(sp)
811042d0:	df000017 	ldw	fp,0(sp)
811042d4:	dec00204 	addi	sp,sp,8
811042d8:	f800283a 	ret

811042dc <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
811042dc:	defffd04 	addi	sp,sp,-12
811042e0:	dfc00215 	stw	ra,8(sp)
811042e4:	df000115 	stw	fp,4(sp)
811042e8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
811042ec:	01400144 	movi	r5,5
811042f0:	01204834 	movhi	r4,33056
811042f4:	21070004 	addi	r4,r4,7168
811042f8:	11049940 	call	81104994 <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811042fc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104300:	10000326 	beq	r2,zero,81104310 <bFeebCh5IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104304:	00800044 	movi	r2,1
81104308:	e0bfff15 	stw	r2,-4(fp)
8110430c:	00000106 	br	81104314 <bFeebCh5IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104310:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104314:	e0bfff17 	ldw	r2,-4(fp)
}
81104318:	e037883a 	mov	sp,fp
8110431c:	dfc00117 	ldw	ra,4(sp)
81104320:	df000017 	ldw	fp,0(sp)
81104324:	dec00204 	addi	sp,sp,8
81104328:	f800283a 	ret

8110432c <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
8110432c:	defffd04 	addi	sp,sp,-12
81104330:	dfc00215 	stw	ra,8(sp)
81104334:	df000115 	stw	fp,4(sp)
81104338:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
8110433c:	01400144 	movi	r5,5
81104340:	01204834 	movhi	r4,33056
81104344:	21060004 	addi	r4,r4,6144
81104348:	11049940 	call	81104994 <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110434c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104350:	10000326 	beq	r2,zero,81104360 <bFeebCh6IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104354:	00800044 	movi	r2,1
81104358:	e0bfff15 	stw	r2,-4(fp)
8110435c:	00000106 	br	81104364 <bFeebCh6IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104360:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104364:	e0bfff17 	ldw	r2,-4(fp)
}
81104368:	e037883a 	mov	sp,fp
8110436c:	dfc00117 	ldw	ra,4(sp)
81104370:	df000017 	ldw	fp,0(sp)
81104374:	dec00204 	addi	sp,sp,8
81104378:	f800283a 	ret

8110437c <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
8110437c:	defffd04 	addi	sp,sp,-12
81104380:	dfc00215 	stw	ra,8(sp)
81104384:	df000115 	stw	fp,4(sp)
81104388:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
8110438c:	01400144 	movi	r5,5
81104390:	01204834 	movhi	r4,33056
81104394:	21050004 	addi	r4,r4,5120
81104398:	11049940 	call	81104994 <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110439c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
811043a0:	10000326 	beq	r2,zero,811043b0 <bFeebCh7IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811043a4:	00800044 	movi	r2,1
811043a8:	e0bfff15 	stw	r2,-4(fp)
811043ac:	00000106 	br	811043b4 <bFeebCh7IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
811043b0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811043b4:	e0bfff17 	ldw	r2,-4(fp)
}
811043b8:	e037883a 	mov	sp,fp
811043bc:	dfc00117 	ldw	ra,4(sp)
811043c0:	df000017 	ldw	fp,0(sp)
811043c4:	dec00204 	addi	sp,sp,8
811043c8:	f800283a 	ret

811043cc <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
811043cc:	defffd04 	addi	sp,sp,-12
811043d0:	dfc00215 	stw	ra,8(sp)
811043d4:	df000115 	stw	fp,4(sp)
811043d8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
811043dc:	01400144 	movi	r5,5
811043e0:	01204834 	movhi	r4,33056
811043e4:	21040004 	addi	r4,r4,4096
811043e8:	11049940 	call	81104994 <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811043ec:	1080004c 	andi	r2,r2,1
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
811043f0:	10000326 	beq	r2,zero,81104400 <bFeebCh8IrqFlagBufferEmpty+0x34>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811043f4:	00800044 	movi	r2,1
811043f8:	e0bfff15 	stw	r2,-4(fp)
811043fc:	00000106 	br	81104404 <bFeebCh8IrqFlagBufferEmpty+0x38>
	} else {
		bFlag = FALSE;
81104400:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104404:	e0bfff17 	ldw	r2,-4(fp)
}
81104408:	e037883a 	mov	sp,fp
8110440c:	dfc00117 	ldw	ra,4(sp)
81104410:	df000017 	ldw	fp,0(sp)
81104414:	dec00204 	addi	sp,sp,8
81104418:	f800283a 	ret

8110441c <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
8110441c:	defffc04 	addi	sp,sp,-16
81104420:	dfc00315 	stw	ra,12(sp)
81104424:	df000215 	stw	fp,8(sp)
81104428:	df000204 	addi	fp,sp,8
8110442c:	2005883a 	mov	r2,r4
81104430:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81104434:	e0bfff03 	ldbu	r2,-4(fp)
81104438:	10c00268 	cmpgeui	r3,r2,9
8110443c:	18004f1e 	bne	r3,zero,8110457c <vFeebInitIrq+0x160>
81104440:	100690ba 	slli	r3,r2,2
81104444:	00a04434 	movhi	r2,33040
81104448:	10911604 	addi	r2,r2,17496
8110444c:	1885883a 	add	r2,r3,r2
81104450:	10800017 	ldw	r2,0(r2)
81104454:	1000683a 	jmp	r2
81104458:	8110457c 	xorhi	r4,r16,16661
8110445c:	8110447c 	xorhi	r4,r16,16657
81104460:	8110449c 	xori	r4,r16,16658
81104464:	811044bc 	xorhi	r4,r16,16658
81104468:	811044dc 	xori	r4,r16,16659
8110446c:	811044fc 	xorhi	r4,r16,16659
81104470:	8110451c 	xori	r4,r16,16660
81104474:	8110453c 	xorhi	r4,r16,16660
81104478:	8110455c 	xori	r4,r16,16661
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
8110447c:	d0a01a04 	addi	r2,gp,-32664
81104480:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, pvHoldContext,
81104484:	01a04434 	movhi	r6,33040
81104488:	318f7f04 	addi	r6,r6,15868
8110448c:	e17ffe17 	ldw	r5,-8(fp)
81104490:	01000084 	movi	r4,2
81104494:	111bdac0 	call	8111bdac <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
81104498:	00003806 	br	8110457c <vFeebInitIrq+0x160>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
8110449c:	d0a01b04 	addi	r2,gp,-32660
811044a0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, pvHoldContext,
811044a4:	01a04434 	movhi	r6,33040
811044a8:	318f8d04 	addi	r6,r6,15924
811044ac:	e17ffe17 	ldw	r5,-8(fp)
811044b0:	010000c4 	movi	r4,3
811044b4:	111bdac0 	call	8111bdac <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
811044b8:	00003006 	br	8110457c <vFeebInitIrq+0x160>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
811044bc:	d0a01c04 	addi	r2,gp,-32656
811044c0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, pvHoldContext,
811044c4:	01a04434 	movhi	r6,33040
811044c8:	318f9b04 	addi	r6,r6,15980
811044cc:	e17ffe17 	ldw	r5,-8(fp)
811044d0:	01000104 	movi	r4,4
811044d4:	111bdac0 	call	8111bdac <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
811044d8:	00002806 	br	8110457c <vFeebInitIrq+0x160>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
811044dc:	d0a01d04 	addi	r2,gp,-32652
811044e0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, pvHoldContext,
811044e4:	01a04434 	movhi	r6,33040
811044e8:	318fa904 	addi	r6,r6,16036
811044ec:	e17ffe17 	ldw	r5,-8(fp)
811044f0:	01000204 	movi	r4,8
811044f4:	111bdac0 	call	8111bdac <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
811044f8:	00002006 	br	8110457c <vFeebInitIrq+0x160>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
811044fc:	d0a01e04 	addi	r2,gp,-32648
81104500:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, pvHoldContext,
81104504:	01a04434 	movhi	r6,33040
81104508:	318fb704 	addi	r6,r6,16092
8110450c:	e17ffe17 	ldw	r5,-8(fp)
81104510:	010001c4 	movi	r4,7
81104514:	111bdac0 	call	8111bdac <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81104518:	00001806 	br	8110457c <vFeebInitIrq+0x160>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
8110451c:	d0a01f04 	addi	r2,gp,-32644
81104520:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, pvHoldContext,
81104524:	01a04434 	movhi	r6,33040
81104528:	318fc504 	addi	r6,r6,16148
8110452c:	e17ffe17 	ldw	r5,-8(fp)
81104530:	01000184 	movi	r4,6
81104534:	111bdac0 	call	8111bdac <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81104538:	00001006 	br	8110457c <vFeebInitIrq+0x160>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
8110453c:	d0a02004 	addi	r2,gp,-32640
81104540:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, pvHoldContext,
81104544:	01a04434 	movhi	r6,33040
81104548:	318fd304 	addi	r6,r6,16204
8110454c:	e17ffe17 	ldw	r5,-8(fp)
81104550:	01000144 	movi	r4,5
81104554:	111bdac0 	call	8111bdac <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81104558:	00000806 	br	8110457c <vFeebInitIrq+0x160>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
8110455c:	d0a02104 	addi	r2,gp,-32636
81104560:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, pvHoldContext,
81104564:	01a04434 	movhi	r6,33040
81104568:	318fe104 	addi	r6,r6,16260
8110456c:	e17ffe17 	ldw	r5,-8(fp)
81104570:	01000244 	movi	r4,9
81104574:	111bdac0 	call	8111bdac <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
81104578:	0001883a 	nop
	}
}
8110457c:	0001883a 	nop
81104580:	e037883a 	mov	sp,fp
81104584:	dfc00117 	ldw	ra,4(sp)
81104588:	df000017 	ldw	fp,0(sp)
8110458c:	dec00204 	addi	sp,sp,8
81104590:	f800283a 	ret

81104594 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
81104594:	defffb04 	addi	sp,sp,-20
81104598:	dfc00415 	stw	ra,16(sp)
8110459c:	df000315 	stw	fp,12(sp)
811045a0:	df000304 	addi	fp,sp,12
811045a4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811045a8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811045ac:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811045b0:	e0bfff17 	ldw	r2,-4(fp)
811045b4:	10002426 	beq	r2,zero,81104648 <bFeebSetIrqControl+0xb4>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811045b8:	e0bfff17 	ldw	r2,-4(fp)
811045bc:	10800017 	ldw	r2,0(r2)
811045c0:	01400104 	movi	r5,4
811045c4:	1009883a 	mov	r4,r2
811045c8:	11049940 	call	81104994 <uliFeebReadReg>
811045cc:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
811045d0:	e0bfff17 	ldw	r2,-4(fp)
811045d4:	10800217 	ldw	r2,8(r2)
811045d8:	10000426 	beq	r2,zero,811045ec <bFeebSetIrqControl+0x58>
			uliReg |= COMM_IRQ_L_BUFFER_EMPTY_EN_MSK;
811045dc:	e0bffe17 	ldw	r2,-8(fp)
811045e0:	10804014 	ori	r2,r2,256
811045e4:	e0bffe15 	stw	r2,-8(fp)
811045e8:	00000406 	br	811045fc <bFeebSetIrqControl+0x68>
		} else {
			uliReg &= (~COMM_IRQ_L_BUFFER_EMPTY_EN_MSK);
811045ec:	e0fffe17 	ldw	r3,-8(fp)
811045f0:	00bfbfc4 	movi	r2,-257
811045f4:	1884703a 	and	r2,r3,r2
811045f8:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
811045fc:	e0bfff17 	ldw	r2,-4(fp)
81104600:	10800317 	ldw	r2,12(r2)
81104604:	10000426 	beq	r2,zero,81104618 <bFeebSetIrqControl+0x84>
			uliReg |= COMM_IRQ_R_BUFFER_EMPTY_EN_MSK;
81104608:	e0bffe17 	ldw	r2,-8(fp)
8110460c:	10800054 	ori	r2,r2,1
81104610:	e0bffe15 	stw	r2,-8(fp)
81104614:	00000406 	br	81104628 <bFeebSetIrqControl+0x94>
		} else {
			uliReg &= (~COMM_IRQ_R_BUFFER_EMPTY_EN_MSK);
81104618:	e0fffe17 	ldw	r3,-8(fp)
8110461c:	00bfff84 	movi	r2,-2
81104620:	1884703a 	and	r2,r3,r2
81104624:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CTRL_REG_OFFSET,
81104628:	e0bfff17 	ldw	r2,-4(fp)
8110462c:	10800017 	ldw	r2,0(r2)
81104630:	e1bffe17 	ldw	r6,-8(fp)
81104634:	01400104 	movi	r5,4
81104638:	1009883a 	mov	r4,r2
8110463c:	11049480 	call	81104948 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104640:	00800044 	movi	r2,1
81104644:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104648:	e0bffd17 	ldw	r2,-12(fp)
}
8110464c:	e037883a 	mov	sp,fp
81104650:	dfc00117 	ldw	ra,4(sp)
81104654:	df000017 	ldw	fp,0(sp)
81104658:	dec00204 	addi	sp,sp,8
8110465c:	f800283a 	ret

81104660 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
81104660:	defffb04 	addi	sp,sp,-20
81104664:	dfc00415 	stw	ra,16(sp)
81104668:	df000315 	stw	fp,12(sp)
8110466c:	df000304 	addi	fp,sp,12
81104670:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104674:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104678:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
8110467c:	e0bfff17 	ldw	r2,-4(fp)
81104680:	10001a26 	beq	r2,zero,811046ec <bFeebGetIrqControl+0x8c>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104684:	e0bfff17 	ldw	r2,-4(fp)
81104688:	10800017 	ldw	r2,0(r2)
8110468c:	01400104 	movi	r5,4
81104690:	1009883a 	mov	r4,r2
81104694:	11049940 	call	81104994 <uliFeebReadReg>
81104698:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (uliReg & COMM_IRQ_L_BUFFER_EMPTY_EN_MSK) {
8110469c:	e0bffe17 	ldw	r2,-8(fp)
811046a0:	1080400c 	andi	r2,r2,256
811046a4:	10000426 	beq	r2,zero,811046b8 <bFeebGetIrqControl+0x58>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
811046a8:	e0bfff17 	ldw	r2,-4(fp)
811046ac:	00c00044 	movi	r3,1
811046b0:	10c00215 	stw	r3,8(r2)
811046b4:	00000206 	br	811046c0 <bFeebGetIrqControl+0x60>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
811046b8:	e0bfff17 	ldw	r2,-4(fp)
811046bc:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_R_BUFFER_EMPTY_EN_MSK) {
811046c0:	e0bffe17 	ldw	r2,-8(fp)
811046c4:	1080004c 	andi	r2,r2,1
811046c8:	10000426 	beq	r2,zero,811046dc <bFeebGetIrqControl+0x7c>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
811046cc:	e0bfff17 	ldw	r2,-4(fp)
811046d0:	00c00044 	movi	r3,1
811046d4:	10c00315 	stw	r3,12(r2)
811046d8:	00000206 	br	811046e4 <bFeebGetIrqControl+0x84>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
811046dc:	e0bfff17 	ldw	r2,-4(fp)
811046e0:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
811046e4:	00800044 	movi	r2,1
811046e8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811046ec:	e0bffd17 	ldw	r2,-12(fp)
}
811046f0:	e037883a 	mov	sp,fp
811046f4:	dfc00117 	ldw	ra,4(sp)
811046f8:	df000017 	ldw	fp,0(sp)
811046fc:	dec00204 	addi	sp,sp,8
81104700:	f800283a 	ret

81104704 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81104704:	defffb04 	addi	sp,sp,-20
81104708:	dfc00415 	stw	ra,16(sp)
8110470c:	df000315 	stw	fp,12(sp)
81104710:	df000304 	addi	fp,sp,12
81104714:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104718:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110471c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104720:	e0bfff17 	ldw	r2,-4(fp)
81104724:	10001126 	beq	r2,zero,8110476c <bFeebGetIrqFlags+0x68>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104728:	e0bfff17 	ldw	r2,-4(fp)
8110472c:	10800017 	ldw	r2,0(r2)
81104730:	01400144 	movi	r5,5
81104734:	1009883a 	mov	r4,r2
81104738:	11049940 	call	81104994 <uliFeebReadReg>
8110473c:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAG_REG_OFFSET);

		if (uliReg & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104740:	e0bffe17 	ldw	r2,-8(fp)
81104744:	1080004c 	andi	r2,r2,1
81104748:	10000426 	beq	r2,zero,8110475c <bFeebGetIrqFlags+0x58>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
8110474c:	e0bfff17 	ldw	r2,-4(fp)
81104750:	00c00044 	movi	r3,1
81104754:	10c00415 	stw	r3,16(r2)
81104758:	00000206 	br	81104764 <bFeebGetIrqFlags+0x60>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
8110475c:	e0bfff17 	ldw	r2,-4(fp)
81104760:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
81104764:	00800044 	movi	r2,1
81104768:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
8110476c:	e0bffd17 	ldw	r2,-12(fp)
}
81104770:	e037883a 	mov	sp,fp
81104774:	dfc00117 	ldw	ra,4(sp)
81104778:	df000017 	ldw	fp,0(sp)
8110477c:	dec00204 	addi	sp,sp,8
81104780:	f800283a 	ret

81104784 <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81104784:	defffb04 	addi	sp,sp,-20
81104788:	dfc00415 	stw	ra,16(sp)
8110478c:	df000315 	stw	fp,12(sp)
81104790:	df000304 	addi	fp,sp,12
81104794:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104798:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110479c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811047a0:	e0bfff17 	ldw	r2,-4(fp)
811047a4:	10001926 	beq	r2,zero,8110480c <bFeebSetWindowing+0x88>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811047a8:	e0bfff17 	ldw	r2,-4(fp)
811047ac:	10800017 	ldw	r2,0(r2)
811047b0:	000b883a 	mov	r5,zero
811047b4:	1009883a 	mov	r4,r2
811047b8:	11049940 	call	81104994 <uliFeebReadReg>
811047bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxFeebCh->xWindowingConfig.bMasking) {
811047c0:	e0bfff17 	ldw	r2,-4(fp)
811047c4:	10800117 	ldw	r2,4(r2)
811047c8:	10000426 	beq	r2,zero,811047dc <bFeebSetWindowing+0x58>
			uliReg |= COMM_CTRL_MASKING_EN_MSK;
811047cc:	e0bffe17 	ldw	r2,-8(fp)
811047d0:	10804014 	ori	r2,r2,256
811047d4:	e0bffe15 	stw	r2,-8(fp)
811047d8:	00000406 	br	811047ec <bFeebSetWindowing+0x68>
		} else {
			uliReg &= (~COMM_CTRL_MASKING_EN_MSK);
811047dc:	e0fffe17 	ldw	r3,-8(fp)
811047e0:	00bfbfc4 	movi	r2,-257
811047e4:	1884703a 	and	r2,r3,r2
811047e8:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
811047ec:	e0bfff17 	ldw	r2,-4(fp)
811047f0:	10800017 	ldw	r2,0(r2)
811047f4:	e1bffe17 	ldw	r6,-8(fp)
811047f8:	000b883a 	mov	r5,zero
811047fc:	1009883a 	mov	r4,r2
81104800:	11049480 	call	81104948 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104804:	00800044 	movi	r2,1
81104808:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
8110480c:	e0bffd17 	ldw	r2,-12(fp)
}
81104810:	e037883a 	mov	sp,fp
81104814:	dfc00117 	ldw	ra,4(sp)
81104818:	df000017 	ldw	fp,0(sp)
8110481c:	dec00204 	addi	sp,sp,8
81104820:	f800283a 	ret

81104824 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81104824:	defffb04 	addi	sp,sp,-20
81104828:	dfc00415 	stw	ra,16(sp)
8110482c:	df000315 	stw	fp,12(sp)
81104830:	df000304 	addi	fp,sp,12
81104834:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104838:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110483c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104840:	e0bfff17 	ldw	r2,-4(fp)
81104844:	10001126 	beq	r2,zero,8110488c <bFeebGetWindowing+0x68>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104848:	e0bfff17 	ldw	r2,-4(fp)
8110484c:	10800017 	ldw	r2,0(r2)
81104850:	000b883a 	mov	r5,zero
81104854:	1009883a 	mov	r4,r2
81104858:	11049940 	call	81104994 <uliFeebReadReg>
8110485c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_MASKING_EN_MSK) {
81104860:	e0bffe17 	ldw	r2,-8(fp)
81104864:	1080400c 	andi	r2,r2,256
81104868:	10000426 	beq	r2,zero,8110487c <bFeebGetWindowing+0x58>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
8110486c:	e0bfff17 	ldw	r2,-4(fp)
81104870:	00c00044 	movi	r3,1
81104874:	10c00115 	stw	r3,4(r2)
81104878:	00000206 	br	81104884 <bFeebGetWindowing+0x60>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
8110487c:	e0bfff17 	ldw	r2,-4(fp)
81104880:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
81104884:	00800044 	movi	r2,1
81104888:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
8110488c:	e0bffd17 	ldw	r2,-12(fp)
}
81104890:	e037883a 	mov	sp,fp
81104894:	dfc00117 	ldw	ra,4(sp)
81104898:	df000017 	ldw	fp,0(sp)
8110489c:	dec00204 	addi	sp,sp,8
811048a0:	f800283a 	ret

811048a4 <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
811048a4:	defffb04 	addi	sp,sp,-20
811048a8:	dfc00415 	stw	ra,16(sp)
811048ac:	df000315 	stw	fp,12(sp)
811048b0:	df000304 	addi	fp,sp,12
811048b4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811048b8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811048bc:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811048c0:	e0bfff17 	ldw	r2,-4(fp)
811048c4:	10001a26 	beq	r2,zero,81104930 <bFeebGetBuffersStatus+0x8c>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811048c8:	e0bfff17 	ldw	r2,-4(fp)
811048cc:	10800017 	ldw	r2,0(r2)
811048d0:	01400184 	movi	r5,6
811048d4:	1009883a 	mov	r4,r2
811048d8:	11049940 	call	81104994 <uliFeebReadReg>
811048dc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_BUFFER_REG_OFFSET);

		if (uliReg & COMM_BUFF_STAT_L_BUFF_EPY_MSK) {
811048e0:	e0bffe17 	ldw	r2,-8(fp)
811048e4:	1080400c 	andi	r2,r2,256
811048e8:	10000426 	beq	r2,zero,811048fc <bFeebGetBuffersStatus+0x58>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
811048ec:	e0bfff17 	ldw	r2,-4(fp)
811048f0:	00c00044 	movi	r3,1
811048f4:	10c00515 	stw	r3,20(r2)
811048f8:	00000206 	br	81104904 <bFeebGetBuffersStatus+0x60>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
811048fc:	e0bfff17 	ldw	r2,-4(fp)
81104900:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_BUFF_STAT_R_BUFF_EPY_MSK) {
81104904:	e0bffe17 	ldw	r2,-8(fp)
81104908:	1080004c 	andi	r2,r2,1
8110490c:	10000426 	beq	r2,zero,81104920 <bFeebGetBuffersStatus+0x7c>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
81104910:	e0bfff17 	ldw	r2,-4(fp)
81104914:	00c00044 	movi	r3,1
81104918:	10c00615 	stw	r3,24(r2)
8110491c:	00000206 	br	81104928 <bFeebGetBuffersStatus+0x84>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
81104920:	e0bfff17 	ldw	r2,-4(fp)
81104924:	10000615 	stw	zero,24(r2)
		}

		bStatus = TRUE;
81104928:	00800044 	movi	r2,1
8110492c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104930:	e0bffd17 	ldw	r2,-12(fp)
}
81104934:	e037883a 	mov	sp,fp
81104938:	dfc00117 	ldw	ra,4(sp)
8110493c:	df000017 	ldw	fp,0(sp)
81104940:	dec00204 	addi	sp,sp,8
81104944:	f800283a 	ret

81104948 <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81104948:	defffc04 	addi	sp,sp,-16
8110494c:	df000315 	stw	fp,12(sp)
81104950:	df000304 	addi	fp,sp,12
81104954:	e13ffd15 	stw	r4,-12(fp)
81104958:	e17ffe15 	stw	r5,-8(fp)
8110495c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81104960:	e0bffe17 	ldw	r2,-8(fp)
81104964:	1085883a 	add	r2,r2,r2
81104968:	1085883a 	add	r2,r2,r2
8110496c:	1007883a 	mov	r3,r2
81104970:	e0bffd17 	ldw	r2,-12(fp)
81104974:	10c5883a 	add	r2,r2,r3
81104978:	e0ffff17 	ldw	r3,-4(fp)
8110497c:	10c00015 	stw	r3,0(r2)
}
81104980:	0001883a 	nop
81104984:	e037883a 	mov	sp,fp
81104988:	df000017 	ldw	fp,0(sp)
8110498c:	dec00104 	addi	sp,sp,4
81104990:	f800283a 	ret

81104994 <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81104994:	defffc04 	addi	sp,sp,-16
81104998:	df000315 	stw	fp,12(sp)
8110499c:	df000304 	addi	fp,sp,12
811049a0:	e13ffe15 	stw	r4,-8(fp)
811049a4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811049a8:	e0bfff17 	ldw	r2,-4(fp)
811049ac:	1085883a 	add	r2,r2,r2
811049b0:	1085883a 	add	r2,r2,r2
811049b4:	1007883a 	mov	r3,r2
811049b8:	e0bffe17 	ldw	r2,-8(fp)
811049bc:	10c5883a 	add	r2,r2,r3
811049c0:	10800017 	ldw	r2,0(r2)
811049c4:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
811049c8:	e0bffd17 	ldw	r2,-12(fp)
}
811049cc:	e037883a 	mov	sp,fp
811049d0:	df000017 	ldw	fp,0(sp)
811049d4:	dec00104 	addi	sp,sp,4
811049d8:	f800283a 	ret

811049dc <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
811049dc:	defffb04 	addi	sp,sp,-20
811049e0:	dfc00415 	stw	ra,16(sp)
811049e4:	df000315 	stw	fp,12(sp)
811049e8:	df000304 	addi	fp,sp,12
811049ec:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811049f0:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811049f4:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811049f8:	e0bfff17 	ldw	r2,-4(fp)
811049fc:	10002f26 	beq	r2,zero,81104abc <bSpwcSetLink+0xe0>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81104a00:	e0bfff17 	ldw	r2,-4(fp)
81104a04:	10800017 	ldw	r2,0(r2)
81104a08:	000b883a 	mov	r5,zero
81104a0c:	1009883a 	mov	r4,r2
81104a10:	1104f0c0 	call	81104f0c <uliSpwcReadReg>
81104a14:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
81104a18:	e0bfff17 	ldw	r2,-4(fp)
81104a1c:	10800117 	ldw	r2,4(r2)
81104a20:	10000426 	beq	r2,zero,81104a34 <bSpwcSetLink+0x58>
			uliReg |= COMM_CTRL_LINK_AUTOSTART_MSK;
81104a24:	e0bffe17 	ldw	r2,-8(fp)
81104a28:	10800114 	ori	r2,r2,4
81104a2c:	e0bffe15 	stw	r2,-8(fp)
81104a30:	00000406 	br	81104a44 <bSpwcSetLink+0x68>
		} else {
			uliReg &= (~COMM_CTRL_LINK_AUTOSTART_MSK);
81104a34:	e0fffe17 	ldw	r3,-8(fp)
81104a38:	00bffec4 	movi	r2,-5
81104a3c:	1884703a 	and	r2,r3,r2
81104a40:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bStart) {
81104a44:	e0bfff17 	ldw	r2,-4(fp)
81104a48:	10800217 	ldw	r2,8(r2)
81104a4c:	10000426 	beq	r2,zero,81104a60 <bSpwcSetLink+0x84>
			uliReg |= COMM_CTRL_LINK_START_MSK;
81104a50:	e0bffe17 	ldw	r2,-8(fp)
81104a54:	10800094 	ori	r2,r2,2
81104a58:	e0bffe15 	stw	r2,-8(fp)
81104a5c:	00000406 	br	81104a70 <bSpwcSetLink+0x94>
		} else {
			uliReg &= (~COMM_CTRL_LINK_START_MSK);
81104a60:	e0fffe17 	ldw	r3,-8(fp)
81104a64:	00bfff44 	movi	r2,-3
81104a68:	1884703a 	and	r2,r3,r2
81104a6c:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81104a70:	e0bfff17 	ldw	r2,-4(fp)
81104a74:	10800317 	ldw	r2,12(r2)
81104a78:	10000426 	beq	r2,zero,81104a8c <bSpwcSetLink+0xb0>
			uliReg |= COMM_CTRL_LINK_DISCONNECT_MSK;
81104a7c:	e0bffe17 	ldw	r2,-8(fp)
81104a80:	10800054 	ori	r2,r2,1
81104a84:	e0bffe15 	stw	r2,-8(fp)
81104a88:	00000406 	br	81104a9c <bSpwcSetLink+0xc0>
		} else {
			uliReg &= (~COMM_CTRL_LINK_DISCONNECT_MSK);
81104a8c:	e0fffe17 	ldw	r3,-8(fp)
81104a90:	00bfff84 	movi	r2,-2
81104a94:	1884703a 	and	r2,r3,r2
81104a98:	e0bffe15 	stw	r2,-8(fp)
		}

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81104a9c:	e0bfff17 	ldw	r2,-4(fp)
81104aa0:	10800017 	ldw	r2,0(r2)
81104aa4:	e1bffe17 	ldw	r6,-8(fp)
81104aa8:	000b883a 	mov	r5,zero
81104aac:	1009883a 	mov	r4,r2
81104ab0:	1104ec00 	call	81104ec0 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
81104ab4:	00800044 	movi	r2,1
81104ab8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104abc:	e0bffd17 	ldw	r2,-12(fp)
}
81104ac0:	e037883a 	mov	sp,fp
81104ac4:	dfc00117 	ldw	ra,4(sp)
81104ac8:	df000017 	ldw	fp,0(sp)
81104acc:	dec00204 	addi	sp,sp,8
81104ad0:	f800283a 	ret

81104ad4 <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
81104ad4:	defffb04 	addi	sp,sp,-20
81104ad8:	dfc00415 	stw	ra,16(sp)
81104adc:	df000315 	stw	fp,12(sp)
81104ae0:	df000304 	addi	fp,sp,12
81104ae4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104ae8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104aec:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81104af0:	e0bfff17 	ldw	r2,-4(fp)
81104af4:	10002326 	beq	r2,zero,81104b84 <bSpwcGetLink+0xb0>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81104af8:	e0bfff17 	ldw	r2,-4(fp)
81104afc:	10800017 	ldw	r2,0(r2)
81104b00:	000b883a 	mov	r5,zero
81104b04:	1009883a 	mov	r4,r2
81104b08:	1104f0c0 	call	81104f0c <uliSpwcReadReg>
81104b0c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_LINK_AUTOSTART_MSK) {
81104b10:	e0bffe17 	ldw	r2,-8(fp)
81104b14:	1080010c 	andi	r2,r2,4
81104b18:	10000426 	beq	r2,zero,81104b2c <bSpwcGetLink+0x58>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
81104b1c:	e0bfff17 	ldw	r2,-4(fp)
81104b20:	00c00044 	movi	r3,1
81104b24:	10c00115 	stw	r3,4(r2)
81104b28:	00000206 	br	81104b34 <bSpwcGetLink+0x60>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
81104b2c:	e0bfff17 	ldw	r2,-4(fp)
81104b30:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_CTRL_LINK_START_MSK) {
81104b34:	e0bffe17 	ldw	r2,-8(fp)
81104b38:	1080008c 	andi	r2,r2,2
81104b3c:	10000426 	beq	r2,zero,81104b50 <bSpwcGetLink+0x7c>
			pxSpwcCh->xLinkConfig.bStart = TRUE;
81104b40:	e0bfff17 	ldw	r2,-4(fp)
81104b44:	00c00044 	movi	r3,1
81104b48:	10c00215 	stw	r3,8(r2)
81104b4c:	00000206 	br	81104b58 <bSpwcGetLink+0x84>
		} else {
			pxSpwcCh->xLinkConfig.bStart = FALSE;
81104b50:	e0bfff17 	ldw	r2,-4(fp)
81104b54:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_CTRL_LINK_DISCONNECT_MSK) {
81104b58:	e0bffe17 	ldw	r2,-8(fp)
81104b5c:	1080004c 	andi	r2,r2,1
81104b60:	10000426 	beq	r2,zero,81104b74 <bSpwcGetLink+0xa0>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
81104b64:	e0bfff17 	ldw	r2,-4(fp)
81104b68:	00c00044 	movi	r3,1
81104b6c:	10c00315 	stw	r3,12(r2)
81104b70:	00000206 	br	81104b7c <bSpwcGetLink+0xa8>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
81104b74:	e0bfff17 	ldw	r2,-4(fp)
81104b78:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81104b7c:	00800044 	movi	r2,1
81104b80:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104b84:	e0bffd17 	ldw	r2,-12(fp)
}
81104b88:	e037883a 	mov	sp,fp
81104b8c:	dfc00117 	ldw	ra,4(sp)
81104b90:	df000017 	ldw	fp,0(sp)
81104b94:	dec00204 	addi	sp,sp,8
81104b98:	f800283a 	ret

81104b9c <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
81104b9c:	defffb04 	addi	sp,sp,-20
81104ba0:	dfc00415 	stw	ra,16(sp)
81104ba4:	df000315 	stw	fp,12(sp)
81104ba8:	df000304 	addi	fp,sp,12
81104bac:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104bb0:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104bb4:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81104bb8:	e0bfff17 	ldw	r2,-4(fp)
81104bbc:	10002c26 	beq	r2,zero,81104c70 <bSpwcGetLinkError+0xd4>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81104bc0:	e0bfff17 	ldw	r2,-4(fp)
81104bc4:	10800017 	ldw	r2,0(r2)
81104bc8:	01400044 	movi	r5,1
81104bcc:	1009883a 	mov	r4,r2
81104bd0:	1104f0c0 	call	81104f0c <uliSpwcReadReg>
81104bd4:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_DISC_ERR_MSK) {
81104bd8:	e0bffe17 	ldw	r2,-8(fp)
81104bdc:	1082000c 	andi	r2,r2,2048
81104be0:	10000426 	beq	r2,zero,81104bf4 <bSpwcGetLinkError+0x58>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
81104be4:	e0bfff17 	ldw	r2,-4(fp)
81104be8:	00c00044 	movi	r3,1
81104bec:	10c00415 	stw	r3,16(r2)
81104bf0:	00000206 	br	81104bfc <bSpwcGetLinkError+0x60>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
81104bf4:	e0bfff17 	ldw	r2,-4(fp)
81104bf8:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_STAT_LINK_PAR_ERR_MSK) {
81104bfc:	e0bffe17 	ldw	r2,-8(fp)
81104c00:	1081000c 	andi	r2,r2,1024
81104c04:	10000426 	beq	r2,zero,81104c18 <bSpwcGetLinkError+0x7c>
			pxSpwcCh->xLinkError.bParity = TRUE;
81104c08:	e0bfff17 	ldw	r2,-4(fp)
81104c0c:	00c00044 	movi	r3,1
81104c10:	10c00515 	stw	r3,20(r2)
81104c14:	00000206 	br	81104c20 <bSpwcGetLinkError+0x84>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
81104c18:	e0bfff17 	ldw	r2,-4(fp)
81104c1c:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_STAT_LINK_ESC_ERR_MSK) {
81104c20:	e0bffe17 	ldw	r2,-8(fp)
81104c24:	1080800c 	andi	r2,r2,512
81104c28:	10000426 	beq	r2,zero,81104c3c <bSpwcGetLinkError+0xa0>
			pxSpwcCh->xLinkError.bEscape = TRUE;
81104c2c:	e0bfff17 	ldw	r2,-4(fp)
81104c30:	00c00044 	movi	r3,1
81104c34:	10c00615 	stw	r3,24(r2)
81104c38:	00000206 	br	81104c44 <bSpwcGetLinkError+0xa8>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
81104c3c:	e0bfff17 	ldw	r2,-4(fp)
81104c40:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_STAT_LINK_CRED_ERR_MSK) {
81104c44:	e0bffe17 	ldw	r2,-8(fp)
81104c48:	1080400c 	andi	r2,r2,256
81104c4c:	10000426 	beq	r2,zero,81104c60 <bSpwcGetLinkError+0xc4>
			pxSpwcCh->xLinkError.bCredit = TRUE;
81104c50:	e0bfff17 	ldw	r2,-4(fp)
81104c54:	00c00044 	movi	r3,1
81104c58:	10c00715 	stw	r3,28(r2)
81104c5c:	00000206 	br	81104c68 <bSpwcGetLinkError+0xcc>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
81104c60:	e0bfff17 	ldw	r2,-4(fp)
81104c64:	10000715 	stw	zero,28(r2)
		}

		bStatus = TRUE;
81104c68:	00800044 	movi	r2,1
81104c6c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104c70:	e0bffd17 	ldw	r2,-12(fp)
}
81104c74:	e037883a 	mov	sp,fp
81104c78:	dfc00117 	ldw	ra,4(sp)
81104c7c:	df000017 	ldw	fp,0(sp)
81104c80:	dec00204 	addi	sp,sp,8
81104c84:	f800283a 	ret

81104c88 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
81104c88:	defffb04 	addi	sp,sp,-20
81104c8c:	dfc00415 	stw	ra,16(sp)
81104c90:	df000315 	stw	fp,12(sp)
81104c94:	df000304 	addi	fp,sp,12
81104c98:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104c9c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104ca0:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81104ca4:	e0bfff17 	ldw	r2,-4(fp)
81104ca8:	10002326 	beq	r2,zero,81104d38 <bSpwcGetLinkStatus+0xb0>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81104cac:	e0bfff17 	ldw	r2,-4(fp)
81104cb0:	10800017 	ldw	r2,0(r2)
81104cb4:	01400044 	movi	r5,1
81104cb8:	1009883a 	mov	r4,r2
81104cbc:	1104f0c0 	call	81104f0c <uliSpwcReadReg>
81104cc0:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_STARTED_MSK) {
81104cc4:	e0bffe17 	ldw	r2,-8(fp)
81104cc8:	1080010c 	andi	r2,r2,4
81104ccc:	10000426 	beq	r2,zero,81104ce0 <bSpwcGetLinkStatus+0x58>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81104cd0:	e0bfff17 	ldw	r2,-4(fp)
81104cd4:	00c00044 	movi	r3,1
81104cd8:	10c00815 	stw	r3,32(r2)
81104cdc:	00000206 	br	81104ce8 <bSpwcGetLinkStatus+0x60>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
81104ce0:	e0bfff17 	ldw	r2,-4(fp)
81104ce4:	10000815 	stw	zero,32(r2)
		}
		if (uliReg & COMM_STAT_LINK_CONNECTING_MSK) {
81104ce8:	e0bffe17 	ldw	r2,-8(fp)
81104cec:	1080008c 	andi	r2,r2,2
81104cf0:	10000426 	beq	r2,zero,81104d04 <bSpwcGetLinkStatus+0x7c>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
81104cf4:	e0bfff17 	ldw	r2,-4(fp)
81104cf8:	00c00044 	movi	r3,1
81104cfc:	10c00915 	stw	r3,36(r2)
81104d00:	00000206 	br	81104d0c <bSpwcGetLinkStatus+0x84>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
81104d04:	e0bfff17 	ldw	r2,-4(fp)
81104d08:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_STAT_LINK_RUNNING_MSK) {
81104d0c:	e0bffe17 	ldw	r2,-8(fp)
81104d10:	1080004c 	andi	r2,r2,1
81104d14:	10000426 	beq	r2,zero,81104d28 <bSpwcGetLinkStatus+0xa0>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
81104d18:	e0bfff17 	ldw	r2,-4(fp)
81104d1c:	00c00044 	movi	r3,1
81104d20:	10c00a15 	stw	r3,40(r2)
81104d24:	00000206 	br	81104d30 <bSpwcGetLinkStatus+0xa8>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
81104d28:	e0bfff17 	ldw	r2,-4(fp)
81104d2c:	10000a15 	stw	zero,40(r2)
		}

		bStatus = TRUE;
81104d30:	00800044 	movi	r2,1
81104d34:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104d38:	e0bffd17 	ldw	r2,-12(fp)
}
81104d3c:	e037883a 	mov	sp,fp
81104d40:	dfc00117 	ldw	ra,4(sp)
81104d44:	df000017 	ldw	fp,0(sp)
81104d48:	dec00204 	addi	sp,sp,8
81104d4c:	f800283a 	ret

81104d50 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
81104d50:	defffb04 	addi	sp,sp,-20
81104d54:	dfc00415 	stw	ra,16(sp)
81104d58:	df000315 	stw	fp,12(sp)
81104d5c:	df000304 	addi	fp,sp,12
81104d60:	e13ffe15 	stw	r4,-8(fp)
81104d64:	2805883a 	mov	r2,r5
81104d68:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
81104d6c:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
81104d70:	e0bffe17 	ldw	r2,-8(fp)
81104d74:	10004c26 	beq	r2,zero,81104ea8 <bSpwcInitCh+0x158>
		bStatus = TRUE;
81104d78:	00800044 	movi	r2,1
81104d7c:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
81104d80:	e0bfff03 	ldbu	r2,-4(fp)
81104d84:	10c00268 	cmpgeui	r3,r2,9
81104d88:	1800371e 	bne	r3,zero,81104e68 <bSpwcInitCh+0x118>
81104d8c:	100690ba 	slli	r3,r2,2
81104d90:	00a04434 	movhi	r2,33040
81104d94:	10936904 	addi	r2,r2,19876
81104d98:	1885883a 	add	r2,r3,r2
81104d9c:	10800017 	ldw	r2,0(r2)
81104da0:	1000683a 	jmp	r2
81104da4:	81104e68 	cmpgeui	r4,r16,16697
81104da8:	81104dc8 	cmpgei	r4,r16,16695
81104dac:	81104ddc 	xori	r4,r16,16695
81104db0:	81104df0 	cmpltui	r4,r16,16695
81104db4:	81104e04 	addi	r4,r16,16696
81104db8:	81104e18 	cmpnei	r4,r16,16696
81104dbc:	81104e2c 	andhi	r4,r16,16696
81104dc0:	81104e40 	call	881104e4 <__reset+0x20f04e4>
81104dc4:	81104e54 	ori	r4,r16,16697
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81104dc8:	e0fffe17 	ldw	r3,-8(fp)
81104dcc:	00a04834 	movhi	r2,33056
81104dd0:	108b0004 	addi	r2,r2,11264
81104dd4:	18800015 	stw	r2,0(r3)
			break;
81104dd8:	00002506 	br	81104e70 <bSpwcInitCh+0x120>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
81104ddc:	e0fffe17 	ldw	r3,-8(fp)
81104de0:	00a04834 	movhi	r2,33056
81104de4:	108a0004 	addi	r2,r2,10240
81104de8:	18800015 	stw	r2,0(r3)
			break;
81104dec:	00002006 	br	81104e70 <bSpwcInitCh+0x120>
		case eCommSpwCh3:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
81104df0:	e0fffe17 	ldw	r3,-8(fp)
81104df4:	00a04834 	movhi	r2,33056
81104df8:	10890004 	addi	r2,r2,9216
81104dfc:	18800015 	stw	r2,0(r3)
			break;
81104e00:	00001b06 	br	81104e70 <bSpwcInitCh+0x120>
		case eCommSpwCh4:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
81104e04:	e0fffe17 	ldw	r3,-8(fp)
81104e08:	00a04834 	movhi	r2,33056
81104e0c:	10880004 	addi	r2,r2,8192
81104e10:	18800015 	stw	r2,0(r3)
			break;
81104e14:	00001606 	br	81104e70 <bSpwcInitCh+0x120>
		case eCommSpwCh5:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
81104e18:	e0fffe17 	ldw	r3,-8(fp)
81104e1c:	00a04834 	movhi	r2,33056
81104e20:	10870004 	addi	r2,r2,7168
81104e24:	18800015 	stw	r2,0(r3)
			break;
81104e28:	00001106 	br	81104e70 <bSpwcInitCh+0x120>
		case eCommSpwCh6:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
81104e2c:	e0fffe17 	ldw	r3,-8(fp)
81104e30:	00a04834 	movhi	r2,33056
81104e34:	10860004 	addi	r2,r2,6144
81104e38:	18800015 	stw	r2,0(r3)
			break;
81104e3c:	00000c06 	br	81104e70 <bSpwcInitCh+0x120>
		case eCommSpwCh7:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81104e40:	e0fffe17 	ldw	r3,-8(fp)
81104e44:	00a04834 	movhi	r2,33056
81104e48:	10850004 	addi	r2,r2,5120
81104e4c:	18800015 	stw	r2,0(r3)
			break;
81104e50:	00000706 	br	81104e70 <bSpwcInitCh+0x120>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
81104e54:	e0fffe17 	ldw	r3,-8(fp)
81104e58:	00a04834 	movhi	r2,33056
81104e5c:	10840004 	addi	r2,r2,4096
81104e60:	18800015 	stw	r2,0(r3)
			break;
81104e64:	00000206 	br	81104e70 <bSpwcInitCh+0x120>
		default:
			bStatus = FALSE;
81104e68:	e03ffd15 	stw	zero,-12(fp)
			break;
81104e6c:	0001883a 	nop
		}

		if (bStatus) {
81104e70:	e0bffd17 	ldw	r2,-12(fp)
81104e74:	10000c26 	beq	r2,zero,81104ea8 <bSpwcInitCh+0x158>
//			if (!bFeebGetWindowing(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
			if (!bSpwcGetLink(pxSpwcCh)) {
81104e78:	e13ffe17 	ldw	r4,-8(fp)
81104e7c:	1104ad40 	call	81104ad4 <bSpwcGetLink>
81104e80:	1000011e 	bne	r2,zero,81104e88 <bSpwcInitCh+0x138>
				bStatus = FALSE;
81104e84:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
81104e88:	e13ffe17 	ldw	r4,-8(fp)
81104e8c:	1104b9c0 	call	81104b9c <bSpwcGetLinkError>
81104e90:	1000011e 	bne	r2,zero,81104e98 <bSpwcInitCh+0x148>
				bStatus = FALSE;
81104e94:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
81104e98:	e13ffe17 	ldw	r4,-8(fp)
81104e9c:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
81104ea0:	1000011e 	bne	r2,zero,81104ea8 <bSpwcInitCh+0x158>
				bStatus = FALSE;
81104ea4:	e03ffd15 	stw	zero,-12(fp)
//			if (!bFeebGetBuffersStatus(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
		}
	}
	return bStatus;
81104ea8:	e0bffd17 	ldw	r2,-12(fp)
}
81104eac:	e037883a 	mov	sp,fp
81104eb0:	dfc00117 	ldw	ra,4(sp)
81104eb4:	df000017 	ldw	fp,0(sp)
81104eb8:	dec00204 	addi	sp,sp,8
81104ebc:	f800283a 	ret

81104ec0 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81104ec0:	defffc04 	addi	sp,sp,-16
81104ec4:	df000315 	stw	fp,12(sp)
81104ec8:	df000304 	addi	fp,sp,12
81104ecc:	e13ffd15 	stw	r4,-12(fp)
81104ed0:	e17ffe15 	stw	r5,-8(fp)
81104ed4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81104ed8:	e0bffe17 	ldw	r2,-8(fp)
81104edc:	1085883a 	add	r2,r2,r2
81104ee0:	1085883a 	add	r2,r2,r2
81104ee4:	1007883a 	mov	r3,r2
81104ee8:	e0bffd17 	ldw	r2,-12(fp)
81104eec:	10c5883a 	add	r2,r2,r3
81104ef0:	e0ffff17 	ldw	r3,-4(fp)
81104ef4:	10c00015 	stw	r3,0(r2)
}
81104ef8:	0001883a 	nop
81104efc:	e037883a 	mov	sp,fp
81104f00:	df000017 	ldw	fp,0(sp)
81104f04:	dec00104 	addi	sp,sp,4
81104f08:	f800283a 	ret

81104f0c <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81104f0c:	defffc04 	addi	sp,sp,-16
81104f10:	df000315 	stw	fp,12(sp)
81104f14:	df000304 	addi	fp,sp,12
81104f18:	e13ffe15 	stw	r4,-8(fp)
81104f1c:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81104f20:	e0bfff17 	ldw	r2,-4(fp)
81104f24:	1085883a 	add	r2,r2,r2
81104f28:	1085883a 	add	r2,r2,r2
81104f2c:	1007883a 	mov	r3,r2
81104f30:	e0bffe17 	ldw	r2,-8(fp)
81104f34:	10c5883a 	add	r2,r2,r3
81104f38:	10800017 	ldw	r2,0(r2)
81104f3c:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81104f40:	e0bffd17 	ldw	r2,-12(fp)
}
81104f44:	e037883a 	mov	sp,fp
81104f48:	df000017 	ldw	fp,0(sp)
81104f4c:	dec00104 	addi	sp,sp,4
81104f50:	f800283a 	ret

81104f54 <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
81104f54:	defffe04 	addi	sp,sp,-8
81104f58:	dfc00115 	stw	ra,4(sp)
81104f5c:	df000015 	stw	fp,0(sp)
81104f60:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
81104f64:	01400204 	movi	r5,8
81104f68:	01000044 	movi	r4,1
81104f6c:	11050dc0 	call	811050dc <bCtrlIoLvdsDrive>
  return  TRUE;
81104f70:	00800044 	movi	r2,1
}
81104f74:	e037883a 	mov	sp,fp
81104f78:	dfc00117 	ldw	ra,4(sp)
81104f7c:	df000017 	ldw	fp,0(sp)
81104f80:	dec00204 	addi	sp,sp,8
81104f84:	f800283a 	ret

81104f88 <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
81104f88:	defffe04 	addi	sp,sp,-8
81104f8c:	dfc00115 	stw	ra,4(sp)
81104f90:	df000015 	stw	fp,0(sp)
81104f94:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
81104f98:	01400204 	movi	r5,8
81104f9c:	0009883a 	mov	r4,zero
81104fa0:	11050dc0 	call	811050dc <bCtrlIoLvdsDrive>
  return  TRUE;
81104fa4:	00800044 	movi	r2,1
}
81104fa8:	e037883a 	mov	sp,fp
81104fac:	dfc00117 	ldw	ra,4(sp)
81104fb0:	df000017 	ldw	fp,0(sp)
81104fb4:	dec00204 	addi	sp,sp,8
81104fb8:	f800283a 	ret

81104fbc <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
81104fbc:	defffe04 	addi	sp,sp,-8
81104fc0:	dfc00115 	stw	ra,4(sp)
81104fc4:	df000015 	stw	fp,0(sp)
81104fc8:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
81104fcc:	01400104 	movi	r5,4
81104fd0:	01000044 	movi	r4,1
81104fd4:	11050dc0 	call	811050dc <bCtrlIoLvdsDrive>
  return  TRUE;
81104fd8:	00800044 	movi	r2,1
}
81104fdc:	e037883a 	mov	sp,fp
81104fe0:	dfc00117 	ldw	ra,4(sp)
81104fe4:	df000017 	ldw	fp,0(sp)
81104fe8:	dec00204 	addi	sp,sp,8
81104fec:	f800283a 	ret

81104ff0 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
81104ff0:	defffe04 	addi	sp,sp,-8
81104ff4:	dfc00115 	stw	ra,4(sp)
81104ff8:	df000015 	stw	fp,0(sp)
81104ffc:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
81105000:	01400104 	movi	r5,4
81105004:	0009883a 	mov	r4,zero
81105008:	11050dc0 	call	811050dc <bCtrlIoLvdsDrive>
  return  TRUE;
8110500c:	00800044 	movi	r2,1
}
81105010:	e037883a 	mov	sp,fp
81105014:	dfc00117 	ldw	ra,4(sp)
81105018:	df000017 	ldw	fp,0(sp)
8110501c:	dec00204 	addi	sp,sp,8
81105020:	f800283a 	ret

81105024 <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
81105024:	defffd04 	addi	sp,sp,-12
81105028:	dfc00215 	stw	ra,8(sp)
8110502c:	df000115 	stw	fp,4(sp)
81105030:	df000104 	addi	fp,sp,4
81105034:	2005883a 	mov	r2,r4
81105038:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
8110503c:	e0bfff03 	ldbu	r2,-4(fp)
81105040:	10c00060 	cmpeqi	r3,r2,1
81105044:	18000d1e 	bne	r3,zero,8110507c <bSetPreEmphasys+0x58>
81105048:	10c00088 	cmpgei	r3,r2,2
8110504c:	1800021e 	bne	r3,zero,81105058 <bSetPreEmphasys+0x34>
81105050:	10000626 	beq	r2,zero,8110506c <bSetPreEmphasys+0x48>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105054:	00001b06 	br	811050c4 <bSetPreEmphasys+0xa0>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
81105058:	10c000a0 	cmpeqi	r3,r2,2
8110505c:	18000e1e 	bne	r3,zero,81105098 <bSetPreEmphasys+0x74>
81105060:	108000e0 	cmpeqi	r2,r2,3
81105064:	1000131e 	bne	r2,zero,811050b4 <bSetPreEmphasys+0x90>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105068:	00001606 	br	811050c4 <bSetPreEmphasys+0xa0>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
8110506c:	014000c4 	movi	r5,3
81105070:	0009883a 	mov	r4,zero
81105074:	11050dc0 	call	811050dc <bCtrlIoLvdsDrive>
      break;
81105078:	00001206 	br	811050c4 <bSetPreEmphasys+0xa0>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
8110507c:	01400084 	movi	r5,2
81105080:	0009883a 	mov	r4,zero
81105084:	11050dc0 	call	811050dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
81105088:	01400044 	movi	r5,1
8110508c:	01000044 	movi	r4,1
81105090:	11050dc0 	call	811050dc <bCtrlIoLvdsDrive>
      break;
81105094:	00000b06 	br	811050c4 <bSetPreEmphasys+0xa0>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
81105098:	01400044 	movi	r5,1
8110509c:	0009883a 	mov	r4,zero
811050a0:	11050dc0 	call	811050dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
811050a4:	01400084 	movi	r5,2
811050a8:	01000044 	movi	r4,1
811050ac:	11050dc0 	call	811050dc <bCtrlIoLvdsDrive>
      break;
811050b0:	00000406 	br	811050c4 <bSetPreEmphasys+0xa0>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
811050b4:	014000c4 	movi	r5,3
811050b8:	01000044 	movi	r4,1
811050bc:	11050dc0 	call	811050dc <bCtrlIoLvdsDrive>
      break;
811050c0:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
811050c4:	00800044 	movi	r2,1
}
811050c8:	e037883a 	mov	sp,fp
811050cc:	dfc00117 	ldw	ra,4(sp)
811050d0:	df000017 	ldw	fp,0(sp)
811050d4:	dec00204 	addi	sp,sp,8
811050d8:	f800283a 	ret

811050dc <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
811050dc:	defffd04 	addi	sp,sp,-12
811050e0:	df000215 	stw	fp,8(sp)
811050e4:	df000204 	addi	fp,sp,8
811050e8:	e13ffe15 	stw	r4,-8(fp)
811050ec:	2805883a 	mov	r2,r5
811050f0:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
811050f4:	e0bffe17 	ldw	r2,-8(fp)
811050f8:	1000071e 	bne	r2,zero,81105118 <bCtrlIoLvdsDrive+0x3c>
	 ucIoValue &= (~ucMask);
811050fc:	e0bfff03 	ldbu	r2,-4(fp)
81105100:	0084303a 	nor	r2,zero,r2
81105104:	1007883a 	mov	r3,r2
81105108:	d0a00003 	ldbu	r2,-32768(gp)
8110510c:	1884703a 	and	r2,r3,r2
81105110:	d0a00005 	stb	r2,-32768(gp)
81105114:	00000406 	br	81105128 <bCtrlIoLvdsDrive+0x4c>
  }
  else {
	 ucIoValue |= ucMask;
81105118:	d0e00003 	ldbu	r3,-32768(gp)
8110511c:	e0bfff03 	ldbu	r2,-4(fp)
81105120:	1884b03a 	or	r2,r3,r2
81105124:	d0a00005 	stb	r2,-32768(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
81105128:	d0a00003 	ldbu	r2,-32768(gp)
8110512c:	10c03fcc 	andi	r3,r2,255
81105130:	00a00034 	movhi	r2,32768
81105134:	10822804 	addi	r2,r2,2208
81105138:	10c00035 	stwio	r3,0(r2)
  return TRUE;
8110513c:	00800044 	movi	r2,1
}
81105140:	e037883a 	mov	sp,fp
81105144:	df000017 	ldw	fp,0(sp)
81105148:	dec00104 	addi	sp,sp,4
8110514c:	f800283a 	ret

81105150 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81105150:	defffa04 	addi	sp,sp,-24
81105154:	dfc00515 	stw	ra,20(sp)
81105158:	df000415 	stw	fp,16(sp)
8110515c:	df000404 	addi	fp,sp,16
81105160:	e13ffd15 	stw	r4,-12(fp)
81105164:	e17ffe15 	stw	r5,-8(fp)
81105168:	3005883a 	mov	r2,r6
8110516c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105170:	00800044 	movi	r2,1
81105174:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105178:	e17ffe17 	ldw	r5,-8(fp)
8110517c:	e13ffd17 	ldw	r4,-12(fp)
81105180:	11055000 	call	81105500 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105184:	e0bfff03 	ldbu	r2,-4(fp)
81105188:	10803fcc 	andi	r2,r2,255
8110518c:	100d883a 	mov	r6,r2
81105190:	e17ffe17 	ldw	r5,-8(fp)
81105194:	e13ffd17 	ldw	r4,-12(fp)
81105198:	11056040 	call	81105604 <i2c_write>
8110519c:	1000011e 	bne	r2,zero,811051a4 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
811051a0:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811051a4:	e17ffe17 	ldw	r5,-8(fp)
811051a8:	e13ffd17 	ldw	r4,-12(fp)
811051ac:	110558c0 	call	8110558c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
811051b0:	0106d604 	movi	r4,7000
811051b4:	111c8240 	call	8111c824 <usleep>
    
    return bSuccess;
811051b8:	e0bffc17 	ldw	r2,-16(fp)

}
811051bc:	e037883a 	mov	sp,fp
811051c0:	dfc00117 	ldw	ra,4(sp)
811051c4:	df000017 	ldw	fp,0(sp)
811051c8:	dec00204 	addi	sp,sp,8
811051cc:	f800283a 	ret

811051d0 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
811051d0:	defff804 	addi	sp,sp,-32
811051d4:	dfc00715 	stw	ra,28(sp)
811051d8:	df000615 	stw	fp,24(sp)
811051dc:	df000604 	addi	fp,sp,24
811051e0:	e13ffb15 	stw	r4,-20(fp)
811051e4:	e17ffc15 	stw	r5,-16(fp)
811051e8:	3009883a 	mov	r4,r6
811051ec:	3807883a 	mov	r3,r7
811051f0:	e0800217 	ldw	r2,8(fp)
811051f4:	e13ffd05 	stb	r4,-12(fp)
811051f8:	e0fffe05 	stb	r3,-8(fp)
811051fc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105200:	00800044 	movi	r2,1
81105204:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105208:	e17ffc17 	ldw	r5,-16(fp)
8110520c:	e13ffb17 	ldw	r4,-20(fp)
81105210:	11055000 	call	81105500 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105214:	e0bffd03 	ldbu	r2,-12(fp)
81105218:	10803fcc 	andi	r2,r2,255
8110521c:	100d883a 	mov	r6,r2
81105220:	e17ffc17 	ldw	r5,-16(fp)
81105224:	e13ffb17 	ldw	r4,-20(fp)
81105228:	11056040 	call	81105604 <i2c_write>
8110522c:	1000011e 	bne	r2,zero,81105234 <I2C_Write+0x64>
        bSuccess = FALSE;
81105230:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105234:	e0bffa17 	ldw	r2,-24(fp)
81105238:	10000726 	beq	r2,zero,81105258 <I2C_Write+0x88>
8110523c:	e0bffe03 	ldbu	r2,-8(fp)
81105240:	100d883a 	mov	r6,r2
81105244:	e17ffc17 	ldw	r5,-16(fp)
81105248:	e13ffb17 	ldw	r4,-20(fp)
8110524c:	11056040 	call	81105604 <i2c_write>
81105250:	1000011e 	bne	r2,zero,81105258 <I2C_Write+0x88>
        bSuccess = FALSE;
81105254:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105258:	e0bffa17 	ldw	r2,-24(fp)
8110525c:	10000726 	beq	r2,zero,8110527c <I2C_Write+0xac>
81105260:	e0bfff03 	ldbu	r2,-4(fp)
81105264:	100d883a 	mov	r6,r2
81105268:	e17ffc17 	ldw	r5,-16(fp)
8110526c:	e13ffb17 	ldw	r4,-20(fp)
81105270:	11056040 	call	81105604 <i2c_write>
81105274:	1000011e 	bne	r2,zero,8110527c <I2C_Write+0xac>
        bSuccess = FALSE;
81105278:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
8110527c:	e17ffc17 	ldw	r5,-16(fp)
81105280:	e13ffb17 	ldw	r4,-20(fp)
81105284:	110558c0 	call	8110558c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105288:	0106d604 	movi	r4,7000
8110528c:	111c8240 	call	8111c824 <usleep>
    
    return bSuccess;
81105290:	e0bffa17 	ldw	r2,-24(fp)

}
81105294:	e037883a 	mov	sp,fp
81105298:	dfc00117 	ldw	ra,4(sp)
8110529c:	df000017 	ldw	fp,0(sp)
811052a0:	dec00204 	addi	sp,sp,8
811052a4:	f800283a 	ret

811052a8 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
811052a8:	defff904 	addi	sp,sp,-28
811052ac:	dfc00615 	stw	ra,24(sp)
811052b0:	df000515 	stw	fp,20(sp)
811052b4:	df000504 	addi	fp,sp,20
811052b8:	e13ffc15 	stw	r4,-16(fp)
811052bc:	e17ffd15 	stw	r5,-12(fp)
811052c0:	3007883a 	mov	r3,r6
811052c4:	3805883a 	mov	r2,r7
811052c8:	e0fffe05 	stb	r3,-8(fp)
811052cc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811052d0:	00800044 	movi	r2,1
811052d4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811052d8:	e17ffd17 	ldw	r5,-12(fp)
811052dc:	e13ffc17 	ldw	r4,-16(fp)
811052e0:	11055000 	call	81105500 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811052e4:	e0bffe03 	ldbu	r2,-8(fp)
811052e8:	10803fcc 	andi	r2,r2,255
811052ec:	100d883a 	mov	r6,r2
811052f0:	e17ffd17 	ldw	r5,-12(fp)
811052f4:	e13ffc17 	ldw	r4,-16(fp)
811052f8:	11056040 	call	81105604 <i2c_write>
811052fc:	1000011e 	bne	r2,zero,81105304 <I2C_Read+0x5c>
        bSuccess = FALSE;
81105300:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105304:	e0bffb17 	ldw	r2,-20(fp)
81105308:	10000726 	beq	r2,zero,81105328 <I2C_Read+0x80>
8110530c:	e0bfff03 	ldbu	r2,-4(fp)
81105310:	100d883a 	mov	r6,r2
81105314:	e17ffd17 	ldw	r5,-12(fp)
81105318:	e13ffc17 	ldw	r4,-16(fp)
8110531c:	11056040 	call	81105604 <i2c_write>
81105320:	1000011e 	bne	r2,zero,81105328 <I2C_Read+0x80>
        bSuccess = FALSE;
81105324:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81105328:	e17ffd17 	ldw	r5,-12(fp)
8110532c:	e13ffc17 	ldw	r4,-16(fp)
81105330:	11055000 	call	81105500 <i2c_start>
    DeviceAddr |= 1; // Read
81105334:	e0bffe03 	ldbu	r2,-8(fp)
81105338:	10800054 	ori	r2,r2,1
8110533c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105340:	e0bffb17 	ldw	r2,-20(fp)
81105344:	10000826 	beq	r2,zero,81105368 <I2C_Read+0xc0>
81105348:	e0bffe03 	ldbu	r2,-8(fp)
8110534c:	10803fcc 	andi	r2,r2,255
81105350:	100d883a 	mov	r6,r2
81105354:	e17ffd17 	ldw	r5,-12(fp)
81105358:	e13ffc17 	ldw	r4,-16(fp)
8110535c:	11056040 	call	81105604 <i2c_write>
81105360:	1000011e 	bne	r2,zero,81105368 <I2C_Read+0xc0>
        bSuccess = FALSE;
81105364:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105368:	e0bffb17 	ldw	r2,-20(fp)
8110536c:	10000526 	beq	r2,zero,81105384 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105370:	000f883a 	mov	r7,zero
81105374:	e1800217 	ldw	r6,8(fp)
81105378:	e17ffd17 	ldw	r5,-12(fp)
8110537c:	e13ffc17 	ldw	r4,-16(fp)
81105380:	11057340 	call	81105734 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105384:	e17ffd17 	ldw	r5,-12(fp)
81105388:	e13ffc17 	ldw	r4,-16(fp)
8110538c:	110558c0 	call	8110558c <i2c_stop>
    
    return bSuccess;
81105390:	e0bffb17 	ldw	r2,-20(fp)
}
81105394:	e037883a 	mov	sp,fp
81105398:	dfc00117 	ldw	ra,4(sp)
8110539c:	df000017 	ldw	fp,0(sp)
811053a0:	dec00204 	addi	sp,sp,8
811053a4:	f800283a 	ret

811053a8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
811053a8:	defff604 	addi	sp,sp,-40
811053ac:	dfc00915 	stw	ra,36(sp)
811053b0:	df000815 	stw	fp,32(sp)
811053b4:	df000804 	addi	fp,sp,32
811053b8:	e13ffb15 	stw	r4,-20(fp)
811053bc:	e17ffc15 	stw	r5,-16(fp)
811053c0:	3007883a 	mov	r3,r6
811053c4:	e1fffe15 	stw	r7,-8(fp)
811053c8:	e0800217 	ldw	r2,8(fp)
811053cc:	e0fffd05 	stb	r3,-12(fp)
811053d0:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
811053d4:	00800044 	movi	r2,1
811053d8:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
811053dc:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811053e0:	e17ffc17 	ldw	r5,-16(fp)
811053e4:	e13ffb17 	ldw	r4,-20(fp)
811053e8:	11055000 	call	81105500 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811053ec:	e0bffd03 	ldbu	r2,-12(fp)
811053f0:	10803fcc 	andi	r2,r2,255
811053f4:	100d883a 	mov	r6,r2
811053f8:	e17ffc17 	ldw	r5,-16(fp)
811053fc:	e13ffb17 	ldw	r4,-20(fp)
81105400:	11056040 	call	81105604 <i2c_write>
81105404:	1000011e 	bne	r2,zero,8110540c <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
81105408:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
8110540c:	e0bff917 	ldw	r2,-28(fp)
81105410:	10000726 	beq	r2,zero,81105430 <I2C_MultipleRead+0x88>
81105414:	e0bffa03 	ldbu	r2,-24(fp)
81105418:	100d883a 	mov	r6,r2
8110541c:	e17ffc17 	ldw	r5,-16(fp)
81105420:	e13ffb17 	ldw	r4,-20(fp)
81105424:	11056040 	call	81105604 <i2c_write>
81105428:	1000011e 	bne	r2,zero,81105430 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
8110542c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81105430:	e0bff917 	ldw	r2,-28(fp)
81105434:	10000326 	beq	r2,zero,81105444 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
81105438:	e17ffc17 	ldw	r5,-16(fp)
8110543c:	e13ffb17 	ldw	r4,-20(fp)
81105440:	11055000 	call	81105500 <i2c_start>
    DeviceAddr |= 1; // Read
81105444:	e0bffd03 	ldbu	r2,-12(fp)
81105448:	10800054 	ori	r2,r2,1
8110544c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105450:	e0bff917 	ldw	r2,-28(fp)
81105454:	10000826 	beq	r2,zero,81105478 <I2C_MultipleRead+0xd0>
81105458:	e0bffd03 	ldbu	r2,-12(fp)
8110545c:	10803fcc 	andi	r2,r2,255
81105460:	100d883a 	mov	r6,r2
81105464:	e17ffc17 	ldw	r5,-16(fp)
81105468:	e13ffb17 	ldw	r4,-20(fp)
8110546c:	11056040 	call	81105604 <i2c_write>
81105470:	1000011e 	bne	r2,zero,81105478 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
81105474:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105478:	e0bff917 	ldw	r2,-28(fp)
8110547c:	10001726 	beq	r2,zero,811054dc <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
81105480:	e03ff815 	stw	zero,-32(fp)
81105484:	00001006 	br	811054c8 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105488:	e0bff817 	ldw	r2,-32(fp)
8110548c:	e0fffe17 	ldw	r3,-8(fp)
81105490:	1889883a 	add	r4,r3,r2
81105494:	e0bfff0b 	ldhu	r2,-4(fp)
81105498:	10ffffc4 	addi	r3,r2,-1
8110549c:	e0bff817 	ldw	r2,-32(fp)
811054a0:	1884c03a 	cmpne	r2,r3,r2
811054a4:	10803fcc 	andi	r2,r2,255
811054a8:	100f883a 	mov	r7,r2
811054ac:	200d883a 	mov	r6,r4
811054b0:	e17ffc17 	ldw	r5,-16(fp)
811054b4:	e13ffb17 	ldw	r4,-20(fp)
811054b8:	11057340 	call	81105734 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
811054bc:	e0bff817 	ldw	r2,-32(fp)
811054c0:	10800044 	addi	r2,r2,1
811054c4:	e0bff815 	stw	r2,-32(fp)
811054c8:	e0bfff0b 	ldhu	r2,-4(fp)
811054cc:	e0fff817 	ldw	r3,-32(fp)
811054d0:	1880020e 	bge	r3,r2,811054dc <I2C_MultipleRead+0x134>
811054d4:	e0bff917 	ldw	r2,-28(fp)
811054d8:	103feb1e 	bne	r2,zero,81105488 <__reset+0xfb0e5488>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
811054dc:	e17ffc17 	ldw	r5,-16(fp)
811054e0:	e13ffb17 	ldw	r4,-20(fp)
811054e4:	110558c0 	call	8110558c <i2c_stop>
    
    return bSuccess;    
811054e8:	e0bff917 	ldw	r2,-28(fp)
    
}
811054ec:	e037883a 	mov	sp,fp
811054f0:	dfc00117 	ldw	ra,4(sp)
811054f4:	df000017 	ldw	fp,0(sp)
811054f8:	dec00204 	addi	sp,sp,8
811054fc:	f800283a 	ret

81105500 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105500:	defffc04 	addi	sp,sp,-16
81105504:	dfc00315 	stw	ra,12(sp)
81105508:	df000215 	stw	fp,8(sp)
8110550c:	df000204 	addi	fp,sp,8
81105510:	e13ffe15 	stw	r4,-8(fp)
81105514:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105518:	e0bfff17 	ldw	r2,-4(fp)
8110551c:	10800104 	addi	r2,r2,4
81105520:	1007883a 	mov	r3,r2
81105524:	00800044 	movi	r2,1
81105528:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
8110552c:	e0bfff17 	ldw	r2,-4(fp)
81105530:	00c00044 	movi	r3,1
81105534:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81105538:	e0bffe17 	ldw	r2,-8(fp)
8110553c:	00c00044 	movi	r3,1
81105540:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105544:	01000044 	movi	r4,1
81105548:	111c8240 	call	8111c824 <usleep>
     
    SDA_LOW(data_base); // data low
8110554c:	e0bfff17 	ldw	r2,-4(fp)
81105550:	0007883a 	mov	r3,zero
81105554:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81105558:	01000044 	movi	r4,1
8110555c:	111c8240 	call	8111c824 <usleep>
    SCL_LOW(clk_base); // clock low
81105560:	e0bffe17 	ldw	r2,-8(fp)
81105564:	0007883a 	mov	r3,zero
81105568:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
8110556c:	01000044 	movi	r4,1
81105570:	111c8240 	call	8111c824 <usleep>
}
81105574:	0001883a 	nop
81105578:	e037883a 	mov	sp,fp
8110557c:	dfc00117 	ldw	ra,4(sp)
81105580:	df000017 	ldw	fp,0(sp)
81105584:	dec00204 	addi	sp,sp,8
81105588:	f800283a 	ret

8110558c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
8110558c:	defffc04 	addi	sp,sp,-16
81105590:	dfc00315 	stw	ra,12(sp)
81105594:	df000215 	stw	fp,8(sp)
81105598:	df000204 	addi	fp,sp,8
8110559c:	e13ffe15 	stw	r4,-8(fp)
811055a0:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
811055a4:	e0bfff17 	ldw	r2,-4(fp)
811055a8:	10800104 	addi	r2,r2,4
811055ac:	1007883a 	mov	r3,r2
811055b0:	00800044 	movi	r2,1
811055b4:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
811055b8:	e0bfff17 	ldw	r2,-4(fp)
811055bc:	0007883a 	mov	r3,zero
811055c0:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
811055c4:	e0bffe17 	ldw	r2,-8(fp)
811055c8:	00c00044 	movi	r3,1
811055cc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
811055d0:	01000044 	movi	r4,1
811055d4:	111c8240 	call	8111c824 <usleep>
    SDA_HIGH(data_base); // data high
811055d8:	e0bfff17 	ldw	r2,-4(fp)
811055dc:	00c00044 	movi	r3,1
811055e0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
811055e4:	01000044 	movi	r4,1
811055e8:	111c8240 	call	8111c824 <usleep>
    

    
}
811055ec:	0001883a 	nop
811055f0:	e037883a 	mov	sp,fp
811055f4:	dfc00117 	ldw	ra,4(sp)
811055f8:	df000017 	ldw	fp,0(sp)
811055fc:	dec00204 	addi	sp,sp,8
81105600:	f800283a 	ret

81105604 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105604:	defff804 	addi	sp,sp,-32
81105608:	dfc00715 	stw	ra,28(sp)
8110560c:	df000615 	stw	fp,24(sp)
81105610:	df000604 	addi	fp,sp,24
81105614:	e13ffd15 	stw	r4,-12(fp)
81105618:	e17ffe15 	stw	r5,-8(fp)
8110561c:	3005883a 	mov	r2,r6
81105620:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105624:	00bfe004 	movi	r2,-128
81105628:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
8110562c:	e0bffe17 	ldw	r2,-8(fp)
81105630:	10800104 	addi	r2,r2,4
81105634:	1007883a 	mov	r3,r2
81105638:	00800044 	movi	r2,1
8110563c:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105640:	e03ffb15 	stw	zero,-20(fp)
81105644:	00001f06 	br	811056c4 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81105648:	e0bffd17 	ldw	r2,-12(fp)
8110564c:	0007883a 	mov	r3,zero
81105650:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105654:	e0ffff03 	ldbu	r3,-4(fp)
81105658:	e0bffa03 	ldbu	r2,-24(fp)
8110565c:	1884703a 	and	r2,r3,r2
81105660:	10803fcc 	andi	r2,r2,255
81105664:	10000426 	beq	r2,zero,81105678 <i2c_write+0x74>
            SDA_HIGH(data_base);
81105668:	e0bffe17 	ldw	r2,-8(fp)
8110566c:	00c00044 	movi	r3,1
81105670:	10c00035 	stwio	r3,0(r2)
81105674:	00000306 	br	81105684 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
81105678:	e0bffe17 	ldw	r2,-8(fp)
8110567c:	0007883a 	mov	r3,zero
81105680:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105684:	e0bffa03 	ldbu	r2,-24(fp)
81105688:	1004d07a 	srli	r2,r2,1
8110568c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105690:	e0bffd17 	ldw	r2,-12(fp)
81105694:	00c00044 	movi	r3,1
81105698:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110569c:	01000044 	movi	r4,1
811056a0:	111c8240 	call	8111c824 <usleep>
        SCL_LOW(clk_base);
811056a4:	e0bffd17 	ldw	r2,-12(fp)
811056a8:	0007883a 	mov	r3,zero
811056ac:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
811056b0:	01000044 	movi	r4,1
811056b4:	111c8240 	call	8111c824 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
811056b8:	e0bffb17 	ldw	r2,-20(fp)
811056bc:	10800044 	addi	r2,r2,1
811056c0:	e0bffb15 	stw	r2,-20(fp)
811056c4:	e0bffb17 	ldw	r2,-20(fp)
811056c8:	10800210 	cmplti	r2,r2,8
811056cc:	103fde1e 	bne	r2,zero,81105648 <__reset+0xfb0e5648>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
811056d0:	e0bffe17 	ldw	r2,-8(fp)
811056d4:	10800104 	addi	r2,r2,4
811056d8:	0007883a 	mov	r3,zero
811056dc:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
811056e0:	e0bffd17 	ldw	r2,-12(fp)
811056e4:	00c00044 	movi	r3,1
811056e8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
811056ec:	01000044 	movi	r4,1
811056f0:	111c8240 	call	8111c824 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
811056f4:	e0bffe17 	ldw	r2,-8(fp)
811056f8:	10800037 	ldwio	r2,0(r2)
811056fc:	1005003a 	cmpeq	r2,r2,zero
81105700:	10803fcc 	andi	r2,r2,255
81105704:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105708:	e0bffd17 	ldw	r2,-12(fp)
8110570c:	0007883a 	mov	r3,zero
81105710:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105714:	01000044 	movi	r4,1
81105718:	111c8240 	call	8111c824 <usleep>
    return bAck;
8110571c:	e0bffc17 	ldw	r2,-16(fp)
}    
81105720:	e037883a 	mov	sp,fp
81105724:	dfc00117 	ldw	ra,4(sp)
81105728:	df000017 	ldw	fp,0(sp)
8110572c:	dec00204 	addi	sp,sp,8
81105730:	f800283a 	ret

81105734 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105734:	defff804 	addi	sp,sp,-32
81105738:	dfc00715 	stw	ra,28(sp)
8110573c:	df000615 	stw	fp,24(sp)
81105740:	df000604 	addi	fp,sp,24
81105744:	e13ffc15 	stw	r4,-16(fp)
81105748:	e17ffd15 	stw	r5,-12(fp)
8110574c:	e1bffe15 	stw	r6,-8(fp)
81105750:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
81105754:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81105758:	e0bffd17 	ldw	r2,-12(fp)
8110575c:	10800104 	addi	r2,r2,4
81105760:	0007883a 	mov	r3,zero
81105764:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81105768:	e0bffc17 	ldw	r2,-16(fp)
8110576c:	0007883a 	mov	r3,zero
81105770:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105774:	01000044 	movi	r4,1
81105778:	111c8240 	call	8111c824 <usleep>

    for(i=0;i<8;i++){
8110577c:	e03ffb15 	stw	zero,-20(fp)
81105780:	00001606 	br	811057dc <i2c_read+0xa8>
        Data <<= 1;
81105784:	e0bffa03 	ldbu	r2,-24(fp)
81105788:	1085883a 	add	r2,r2,r2
8110578c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81105790:	e0bffc17 	ldw	r2,-16(fp)
81105794:	00c00044 	movi	r3,1
81105798:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110579c:	01000044 	movi	r4,1
811057a0:	111c8240 	call	8111c824 <usleep>
        if (SDA_READ(data_base))  // read data   
811057a4:	e0bffd17 	ldw	r2,-12(fp)
811057a8:	10800037 	ldwio	r2,0(r2)
811057ac:	10000326 	beq	r2,zero,811057bc <i2c_read+0x88>
            Data |= 0x01;
811057b0:	e0bffa03 	ldbu	r2,-24(fp)
811057b4:	10800054 	ori	r2,r2,1
811057b8:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
811057bc:	e0bffc17 	ldw	r2,-16(fp)
811057c0:	0007883a 	mov	r3,zero
811057c4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
811057c8:	01000044 	movi	r4,1
811057cc:	111c8240 	call	8111c824 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
811057d0:	e0bffb17 	ldw	r2,-20(fp)
811057d4:	10800044 	addi	r2,r2,1
811057d8:	e0bffb15 	stw	r2,-20(fp)
811057dc:	e0bffb17 	ldw	r2,-20(fp)
811057e0:	10800210 	cmplti	r2,r2,8
811057e4:	103fe71e 	bne	r2,zero,81105784 <__reset+0xfb0e5784>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
811057e8:	e0bffc17 	ldw	r2,-16(fp)
811057ec:	0007883a 	mov	r3,zero
811057f0:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
811057f4:	e0bffd17 	ldw	r2,-12(fp)
811057f8:	10800104 	addi	r2,r2,4
811057fc:	1007883a 	mov	r3,r2
81105800:	00800044 	movi	r2,1
81105804:	18800035 	stwio	r2,0(r3)
    if (bAck)
81105808:	e0bfff17 	ldw	r2,-4(fp)
8110580c:	10000426 	beq	r2,zero,81105820 <i2c_read+0xec>
        SDA_LOW(data_base);
81105810:	e0bffd17 	ldw	r2,-12(fp)
81105814:	0007883a 	mov	r3,zero
81105818:	10c00035 	stwio	r3,0(r2)
8110581c:	00000306 	br	8110582c <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
81105820:	e0bffd17 	ldw	r2,-12(fp)
81105824:	00c00044 	movi	r3,1
81105828:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
8110582c:	e0bffc17 	ldw	r2,-16(fp)
81105830:	00c00044 	movi	r3,1
81105834:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
81105838:	01000044 	movi	r4,1
8110583c:	111c8240 	call	8111c824 <usleep>
    SCL_LOW(clk_base); // clock low
81105840:	e0bffc17 	ldw	r2,-16(fp)
81105844:	0007883a 	mov	r3,zero
81105848:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
8110584c:	01000044 	movi	r4,1
81105850:	111c8240 	call	8111c824 <usleep>
    SDA_LOW(data_base);  // data low
81105854:	e0bffd17 	ldw	r2,-12(fp)
81105858:	0007883a 	mov	r3,zero
8110585c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
81105860:	01000044 	movi	r4,1
81105864:	111c8240 	call	8111c824 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
81105868:	e0bffe17 	ldw	r2,-8(fp)
8110586c:	e0fffa03 	ldbu	r3,-24(fp)
81105870:	10c00005 	stb	r3,0(r2)
}
81105874:	0001883a 	nop
81105878:	e037883a 	mov	sp,fp
8110587c:	dfc00117 	ldw	ra,4(sp)
81105880:	df000017 	ldw	fp,0(sp)
81105884:	dec00204 	addi	sp,sp,8
81105888:	f800283a 	ret

8110588c <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
8110588c:	defffd04 	addi	sp,sp,-12
81105890:	df000215 	stw	fp,8(sp)
81105894:	df000204 	addi	fp,sp,8
81105898:	e13ffe15 	stw	r4,-8(fp)
8110589c:	2805883a 	mov	r2,r5
811058a0:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
811058a4:	e0bffe17 	ldw	r2,-8(fp)
811058a8:	10800058 	cmpnei	r2,r2,1
811058ac:	1000071e 	bne	r2,zero,811058cc <bSetBoardLeds+0x40>
	LedsBoardControl &= (~LedsMask);
811058b0:	e0bfff03 	ldbu	r2,-4(fp)
811058b4:	0084303a 	nor	r2,zero,r2
811058b8:	1007883a 	mov	r3,r2
811058bc:	d0a02203 	ldbu	r2,-32632(gp)
811058c0:	1884703a 	and	r2,r3,r2
811058c4:	d0a02205 	stb	r2,-32632(gp)
811058c8:	00000406 	br	811058dc <bSetBoardLeds+0x50>
  } else {
	LedsBoardControl |= LedsMask;
811058cc:	d0e02203 	ldbu	r3,-32632(gp)
811058d0:	e0bfff03 	ldbu	r2,-4(fp)
811058d4:	1884b03a 	or	r2,r3,r2
811058d8:	d0a02205 	stb	r2,-32632(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
811058dc:	d0a02203 	ldbu	r2,-32632(gp)
811058e0:	10c03fcc 	andi	r3,r2,255
811058e4:	00a00034 	movhi	r2,32768
811058e8:	10827404 	addi	r2,r2,2512
811058ec:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811058f0:	00800044 	movi	r2,1
}
811058f4:	e037883a 	mov	sp,fp
811058f8:	df000017 	ldw	fp,0(sp)
811058fc:	dec00104 	addi	sp,sp,4
81105900:	f800283a 	ret

81105904 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
81105904:	defffd04 	addi	sp,sp,-12
81105908:	df000215 	stw	fp,8(sp)
8110590c:	df000204 	addi	fp,sp,8
81105910:	e13ffe15 	stw	r4,-8(fp)
81105914:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81105918:	e0bffe17 	ldw	r2,-8(fp)
8110591c:	10800058 	cmpnei	r2,r2,1
81105920:	1000051e 	bne	r2,zero,81105938 <bSetPainelLeds+0x34>
	LedsPainelControl |= LedsMask;
81105924:	d0e00117 	ldw	r3,-32764(gp)
81105928:	e0bfff17 	ldw	r2,-4(fp)
8110592c:	1884b03a 	or	r2,r3,r2
81105930:	d0a00115 	stw	r2,-32764(gp)
81105934:	00000506 	br	8110594c <bSetPainelLeds+0x48>
  } else {
	LedsPainelControl &= (~LedsMask);
81105938:	e0bfff17 	ldw	r2,-4(fp)
8110593c:	0086303a 	nor	r3,zero,r2
81105940:	d0a00117 	ldw	r2,-32764(gp)
81105944:	1884703a 	and	r2,r3,r2
81105948:	d0a00115 	stw	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
8110594c:	d0a00117 	ldw	r2,-32764(gp)
81105950:	1007883a 	mov	r3,r2
81105954:	00a00034 	movhi	r2,32768
81105958:	10824004 	addi	r2,r2,2304
8110595c:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81105960:	00800044 	movi	r2,1
}
81105964:	e037883a 	mov	sp,fp
81105968:	df000017 	ldw	fp,0(sp)
8110596c:	dec00104 	addi	sp,sp,4
81105970:	f800283a 	ret

81105974 <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
81105974:	defffc04 	addi	sp,sp,-16
81105978:	df000315 	stw	fp,12(sp)
8110597c:	df000304 	addi	fp,sp,12
81105980:	e13ffd15 	stw	r4,-12(fp)
81105984:	e17ffe15 	stw	r5,-8(fp)
81105988:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
8110598c:	e0bffd17 	ldw	r2,-12(fp)
81105990:	10800037 	ldwio	r2,0(r2)
81105994:	1080010c 	andi	r2,r2,4
81105998:	10000226 	beq	r2,zero,811059a4 <msgdma_write_extended_descriptor+0x30>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
8110599c:	00bff904 	movi	r2,-28
811059a0:	00003d06 	br	81105a98 <msgdma_write_extended_descriptor+0x124>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
811059a4:	e0bfff17 	ldw	r2,-4(fp)
811059a8:	10800017 	ldw	r2,0(r2)
811059ac:	1007883a 	mov	r3,r2
811059b0:	e0bffe17 	ldw	r2,-8(fp)
811059b4:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
811059b8:	e0bffe17 	ldw	r2,-8(fp)
811059bc:	10800104 	addi	r2,r2,4
811059c0:	e0ffff17 	ldw	r3,-4(fp)
811059c4:	18c00117 	ldw	r3,4(r3)
811059c8:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
811059cc:	e0bffe17 	ldw	r2,-8(fp)
811059d0:	10800204 	addi	r2,r2,8
811059d4:	e0ffff17 	ldw	r3,-4(fp)
811059d8:	18c00217 	ldw	r3,8(r3)
811059dc:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
811059e0:	e0bffe17 	ldw	r2,-8(fp)
811059e4:	10800304 	addi	r2,r2,12
811059e8:	e0ffff17 	ldw	r3,-4(fp)
811059ec:	18c0030b 	ldhu	r3,12(r3)
811059f0:	18ffffcc 	andi	r3,r3,65535
811059f4:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
811059f8:	e0bffe17 	ldw	r2,-8(fp)
811059fc:	10800384 	addi	r2,r2,14
81105a00:	e0ffff17 	ldw	r3,-4(fp)
81105a04:	18c00383 	ldbu	r3,14(r3)
81105a08:	18c03fcc 	andi	r3,r3,255
81105a0c:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
81105a10:	e0bffe17 	ldw	r2,-8(fp)
81105a14:	108003c4 	addi	r2,r2,15
81105a18:	e0ffff17 	ldw	r3,-4(fp)
81105a1c:	18c003c3 	ldbu	r3,15(r3)
81105a20:	18c03fcc 	andi	r3,r3,255
81105a24:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
81105a28:	e0bffe17 	ldw	r2,-8(fp)
81105a2c:	10800404 	addi	r2,r2,16
81105a30:	e0ffff17 	ldw	r3,-4(fp)
81105a34:	18c0040b 	ldhu	r3,16(r3)
81105a38:	18ffffcc 	andi	r3,r3,65535
81105a3c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
81105a40:	e0bffe17 	ldw	r2,-8(fp)
81105a44:	10800484 	addi	r2,r2,18
81105a48:	e0ffff17 	ldw	r3,-4(fp)
81105a4c:	18c0048b 	ldhu	r3,18(r3)
81105a50:	18ffffcc 	andi	r3,r3,65535
81105a54:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
81105a58:	e0bffe17 	ldw	r2,-8(fp)
81105a5c:	10800504 	addi	r2,r2,20
81105a60:	e0ffff17 	ldw	r3,-4(fp)
81105a64:	18c00517 	ldw	r3,20(r3)
81105a68:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
81105a6c:	e0bffe17 	ldw	r2,-8(fp)
81105a70:	10800604 	addi	r2,r2,24
81105a74:	e0ffff17 	ldw	r3,-4(fp)
81105a78:	18c00617 	ldw	r3,24(r3)
81105a7c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
81105a80:	e0bffe17 	ldw	r2,-8(fp)
81105a84:	10800704 	addi	r2,r2,28
81105a88:	e0ffff17 	ldw	r3,-4(fp)
81105a8c:	18c00717 	ldw	r3,28(r3)
81105a90:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
81105a94:	0005883a 	mov	r2,zero
}
81105a98:	e037883a 	mov	sp,fp
81105a9c:	df000017 	ldw	fp,0(sp)
81105aa0:	dec00104 	addi	sp,sp,4
81105aa4:	f800283a 	ret

81105aa8 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81105aa8:	defff604 	addi	sp,sp,-40
81105aac:	df000915 	stw	fp,36(sp)
81105ab0:	df000904 	addi	fp,sp,36
81105ab4:	e13ff715 	stw	r4,-36(fp)
81105ab8:	e17ff815 	stw	r5,-32(fp)
81105abc:	e1bff915 	stw	r6,-28(fp)
81105ac0:	e1fffa15 	stw	r7,-24(fp)
81105ac4:	e1800517 	ldw	r6,20(fp)
81105ac8:	e1400617 	ldw	r5,24(fp)
81105acc:	e1000717 	ldw	r4,28(fp)
81105ad0:	e0c00817 	ldw	r3,32(fp)
81105ad4:	e0800917 	ldw	r2,36(fp)
81105ad8:	e1bffb0d 	sth	r6,-20(fp)
81105adc:	e17ffc05 	stb	r5,-16(fp)
81105ae0:	e13ffd05 	stb	r4,-12(fp)
81105ae4:	e0fffe0d 	sth	r3,-8(fp)
81105ae8:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
81105aec:	e0bff717 	ldw	r2,-36(fp)
81105af0:	10c01217 	ldw	r3,72(r2)
81105af4:	e0800117 	ldw	r2,4(fp)
81105af8:	18801936 	bltu	r3,r2,81105b60 <msgdma_construct_extended_descriptor+0xb8>
81105afc:	e13ff717 	ldw	r4,-36(fp)
81105b00:	20801317 	ldw	r2,76(r4)
81105b04:	20c01417 	ldw	r3,80(r4)
81105b08:	e13ffe0b 	ldhu	r4,-8(fp)
81105b0c:	213fffcc 	andi	r4,r4,65535
81105b10:	2015883a 	mov	r10,r4
81105b14:	0017883a 	mov	r11,zero
81105b18:	1ac01136 	bltu	r3,r11,81105b60 <msgdma_construct_extended_descriptor+0xb8>
81105b1c:	58c0011e 	bne	r11,r3,81105b24 <msgdma_construct_extended_descriptor+0x7c>
81105b20:	12800f36 	bltu	r2,r10,81105b60 <msgdma_construct_extended_descriptor+0xb8>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
81105b24:	e13ff717 	ldw	r4,-36(fp)
81105b28:	20801317 	ldw	r2,76(r4)
81105b2c:	20c01417 	ldw	r3,80(r4)
81105b30:	e13fff0b 	ldhu	r4,-4(fp)
81105b34:	213fffcc 	andi	r4,r4,65535
81105b38:	2011883a 	mov	r8,r4
81105b3c:	0013883a 	mov	r9,zero
81105b40:	1a400736 	bltu	r3,r9,81105b60 <msgdma_construct_extended_descriptor+0xb8>
81105b44:	48c0011e 	bne	r9,r3,81105b4c <msgdma_construct_extended_descriptor+0xa4>
81105b48:	12000536 	bltu	r2,r8,81105b60 <msgdma_construct_extended_descriptor+0xb8>
81105b4c:	e0bff717 	ldw	r2,-36(fp)
81105b50:	10801703 	ldbu	r2,92(r2)
81105b54:	10803fcc 	andi	r2,r2,255
81105b58:	10800060 	cmpeqi	r2,r2,1
81105b5c:	1000021e 	bne	r2,zero,81105b68 <msgdma_construct_extended_descriptor+0xc0>
		return -EINVAL;
81105b60:	00bffa84 	movi	r2,-22
81105b64:	00002306 	br	81105bf4 <msgdma_construct_extended_descriptor+0x14c>
	}

	descriptor->read_address_low = read_address;
81105b68:	e0bff817 	ldw	r2,-32(fp)
81105b6c:	e0fff917 	ldw	r3,-28(fp)
81105b70:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
81105b74:	e0bff817 	ldw	r2,-32(fp)
81105b78:	e0fffa17 	ldw	r3,-24(fp)
81105b7c:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
81105b80:	e0bff817 	ldw	r2,-32(fp)
81105b84:	e0c00117 	ldw	r3,4(fp)
81105b88:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
81105b8c:	e0bff817 	ldw	r2,-32(fp)
81105b90:	e0fffb0b 	ldhu	r3,-20(fp)
81105b94:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81105b98:	e0bff817 	ldw	r2,-32(fp)
81105b9c:	e0fffc03 	ldbu	r3,-16(fp)
81105ba0:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
81105ba4:	e0bff817 	ldw	r2,-32(fp)
81105ba8:	e0fffd03 	ldbu	r3,-12(fp)
81105bac:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81105bb0:	e0bff817 	ldw	r2,-32(fp)
81105bb4:	e0fffe0b 	ldhu	r3,-8(fp)
81105bb8:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81105bbc:	e0bff817 	ldw	r2,-32(fp)
81105bc0:	e0ffff0b 	ldhu	r3,-4(fp)
81105bc4:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
81105bc8:	e0bff817 	ldw	r2,-32(fp)
81105bcc:	e0c00317 	ldw	r3,12(fp)
81105bd0:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
81105bd4:	e0bff817 	ldw	r2,-32(fp)
81105bd8:	e0c00417 	ldw	r3,16(fp)
81105bdc:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81105be0:	e0800217 	ldw	r2,8(fp)
81105be4:	10e00034 	orhi	r3,r2,32768
81105be8:	e0bff817 	ldw	r2,-32(fp)
81105bec:	10c00715 	stw	r3,28(r2)

	return 0;
81105bf0:	0005883a 	mov	r2,zero

}
81105bf4:	e037883a 	mov	sp,fp
81105bf8:	df000017 	ldw	fp,0(sp)
81105bfc:	dec00104 	addi	sp,sp,4
81105c00:	f800283a 	ret

81105c04 <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
81105c04:	defff004 	addi	sp,sp,-64
81105c08:	dfc00f15 	stw	ra,60(sp)
81105c0c:	df000e15 	stw	fp,56(sp)
81105c10:	df000e04 	addi	fp,sp,56
81105c14:	e13ffd15 	stw	r4,-12(fp)
81105c18:	e17ffe15 	stw	r5,-8(fp)
81105c1c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81105c20:	e03ff315 	stw	zero,-52(fp)
	alt_irq_context context = 0;
81105c24:	e03ff415 	stw	zero,-48(fp)
	alt_u16 counter = 0;
81105c28:	e03ff20d 	sth	zero,-56(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81105c2c:	e0bffd17 	ldw	r2,-12(fp)
81105c30:	10800317 	ldw	r2,12(r2)
81105c34:	10800204 	addi	r2,r2,8
81105c38:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
81105c3c:	10bfffcc 	andi	r2,r2,65535
81105c40:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81105c44:	e0bffd17 	ldw	r2,-12(fp)
81105c48:	10800317 	ldw	r2,12(r2)
81105c4c:	10800204 	addi	r2,r2,8
81105c50:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81105c54:	1004d43a 	srli	r2,r2,16
81105c58:	e0bff615 	stw	r2,-40(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81105c5c:	e0bffd17 	ldw	r2,-12(fp)
81105c60:	10800917 	ldw	r2,36(r2)
81105c64:	e0fff617 	ldw	r3,-40(fp)
81105c68:	1880042e 	bgeu	r3,r2,81105c7c <msgdma_descriptor_async_transfer+0x78>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
81105c6c:	e0bffd17 	ldw	r2,-12(fp)
81105c70:	10800917 	ldw	r2,36(r2)
81105c74:	e0fff517 	ldw	r3,-44(fp)
81105c78:	18800236 	bltu	r3,r2,81105c84 <msgdma_descriptor_async_transfer+0x80>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
81105c7c:	00bff904 	movi	r2,-28
81105c80:	00008506 	br	81105e98 <msgdma_descriptor_async_transfer+0x294>
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81105c84:	00800804 	movi	r2,32
81105c88:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105c8c:	0005303a 	rdctl	r2,status
81105c90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105c94:	e0fff717 	ldw	r3,-36(fp)
81105c98:	00bfff84 	movi	r2,-2
81105c9c:	1884703a 	and	r2,r3,r2
81105ca0:	1001703a 	wrctl	status,r2
  
  return context;
81105ca4:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81105ca8:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81105cac:	e0bffd17 	ldw	r2,-12(fp)
81105cb0:	10800317 	ldw	r2,12(r2)
81105cb4:	10800104 	addi	r2,r2,4
81105cb8:	e0fff317 	ldw	r3,-52(fp)
81105cbc:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81105cc0:	e0bffd17 	ldw	r2,-12(fp)
81105cc4:	10800317 	ldw	r2,12(r2)
81105cc8:	e0fffd17 	ldw	r3,-12(fp)
81105ccc:	18c00317 	ldw	r3,12(r3)
81105cd0:	18c00037 	ldwio	r3,0(r3)
81105cd4:	10c00035 	stwio	r3,0(r2)
81105cd8:	e0bff417 	ldw	r2,-48(fp)
81105cdc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105ce0:	e0bffc17 	ldw	r2,-16(fp)
81105ce4:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
81105ce8:	e0bffe17 	ldw	r2,-8(fp)
81105cec:	10000c26 	beq	r2,zero,81105d20 <msgdma_descriptor_async_transfer+0x11c>
81105cf0:	e0bfff17 	ldw	r2,-4(fp)
81105cf4:	10000a1e 	bne	r2,zero,81105d20 <msgdma_descriptor_async_transfer+0x11c>
		counter = 0; /* reset counter */
81105cf8:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81105cfc:	d0a02717 	ldw	r2,-32612(gp)
81105d00:	100f883a 	mov	r7,r2
81105d04:	01800784 	movi	r6,30
81105d08:	01400044 	movi	r5,1
81105d0c:	012044b4 	movhi	r4,33042
81105d10:	21077704 	addi	r4,r4,7644
81105d14:	110bee00 	call	8110bee0 <fwrite>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
81105d18:	00bff084 	movi	r2,-62
81105d1c:	00005e06 	br	81105e98 <msgdma_descriptor_async_transfer+0x294>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81105d20:	e0bffe17 	ldw	r2,-8(fp)
81105d24:	10001f1e 	bne	r2,zero,81105da4 <msgdma_descriptor_async_transfer+0x1a0>
81105d28:	e0bfff17 	ldw	r2,-4(fp)
81105d2c:	10001d26 	beq	r2,zero,81105da4 <msgdma_descriptor_async_transfer+0x1a0>
		counter = 0; /* reset counter */
81105d30:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81105d34:	00001106 	br	81105d7c <msgdma_descriptor_async_transfer+0x178>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
81105d38:	01000044 	movi	r4,1
81105d3c:	111ba400 	call	8111ba40 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81105d40:	e0bff20b 	ldhu	r2,-56(fp)
81105d44:	1084e230 	cmpltui	r2,r2,5000
81105d48:	1000091e 	bne	r2,zero,81105d70 <msgdma_descriptor_async_transfer+0x16c>
			{
#ifdef DEBUG_ON
				debug(fp,
81105d4c:	d0a02717 	ldw	r2,-32612(gp)
81105d50:	100f883a 	mov	r7,r2
81105d54:	01801544 	movi	r6,85
81105d58:	01400044 	movi	r5,1
81105d5c:	012044b4 	movhi	r4,33042
81105d60:	21077f04 	addi	r4,r4,7676
81105d64:	110bee00 	call	8110bee0 <fwrite>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
81105d68:	00bff084 	movi	r2,-62
81105d6c:	00004a06 	br	81105e98 <msgdma_descriptor_async_transfer+0x294>
			}
			counter++;
81105d70:	e0bff20b 	ldhu	r2,-56(fp)
81105d74:	10800044 	addi	r2,r2,1
81105d78:	e0bff20d 	sth	r2,-56(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81105d7c:	e0bffd17 	ldw	r2,-12(fp)
81105d80:	10c00317 	ldw	r3,12(r2)
81105d84:	e0bffd17 	ldw	r2,-12(fp)
81105d88:	10800417 	ldw	r2,16(r2)
81105d8c:	e1bfff17 	ldw	r6,-4(fp)
81105d90:	100b883a 	mov	r5,r2
81105d94:	1809883a 	mov	r4,r3
81105d98:	11059740 	call	81105974 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81105d9c:	103fe61e 	bne	r2,zero,81105d38 <__reset+0xfb0e5d38>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81105da0:	00000206 	br	81105dac <msgdma_descriptor_async_transfer+0x1a8>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
81105da4:	00bfffc4 	movi	r2,-1
81105da8:	00003b06 	br	81105e98 <msgdma_descriptor_async_transfer+0x294>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
81105dac:	e0bffd17 	ldw	r2,-12(fp)
81105db0:	10800b17 	ldw	r2,44(r2)
81105db4:	10001c26 	beq	r2,zero,81105e28 <msgdma_descriptor_async_transfer+0x224>

		control |= (dev->control |
81105db8:	e0bffd17 	ldw	r2,-12(fp)
81105dbc:	10c00d17 	ldw	r3,52(r2)
81105dc0:	e0bff317 	ldw	r2,-52(fp)
81105dc4:	1884b03a 	or	r2,r3,r2
81105dc8:	10800514 	ori	r2,r2,20
81105dcc:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81105dd0:	e0fff317 	ldw	r3,-52(fp)
81105dd4:	00bff7c4 	movi	r2,-33
81105dd8:	1884703a 	and	r2,r3,r2
81105ddc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105de0:	0005303a 	rdctl	r2,status
81105de4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105de8:	e0fff917 	ldw	r3,-28(fp)
81105dec:	00bfff84 	movi	r2,-2
81105df0:	1884703a 	and	r2,r3,r2
81105df4:	1001703a 	wrctl	status,r2
  
  return context;
81105df8:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81105dfc:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81105e00:	e0bffd17 	ldw	r2,-12(fp)
81105e04:	10800317 	ldw	r2,12(r2)
81105e08:	10800104 	addi	r2,r2,4
81105e0c:	e0fff317 	ldw	r3,-52(fp)
81105e10:	10c00035 	stwio	r3,0(r2)
81105e14:	e0bff417 	ldw	r2,-48(fp)
81105e18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105e1c:	e0bffb17 	ldw	r2,-20(fp)
81105e20:	1001703a 	wrctl	status,r2
81105e24:	00001b06 	br	81105e94 <msgdma_descriptor_async_transfer+0x290>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
81105e28:	e0bffd17 	ldw	r2,-12(fp)
81105e2c:	10c00d17 	ldw	r3,52(r2)
81105e30:	e0bff317 	ldw	r2,-52(fp)
81105e34:	1884b03a 	or	r2,r3,r2
81105e38:	10800114 	ori	r2,r2,4
81105e3c:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81105e40:	e0fff317 	ldw	r3,-52(fp)
81105e44:	00bff3c4 	movi	r2,-49
81105e48:	1884703a 	and	r2,r3,r2
81105e4c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105e50:	0005303a 	rdctl	r2,status
81105e54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105e58:	e0fffa17 	ldw	r3,-24(fp)
81105e5c:	00bfff84 	movi	r2,-2
81105e60:	1884703a 	and	r2,r3,r2
81105e64:	1001703a 	wrctl	status,r2
  
  return context;
81105e68:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81105e6c:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81105e70:	e0bffd17 	ldw	r2,-12(fp)
81105e74:	10800317 	ldw	r2,12(r2)
81105e78:	10800104 	addi	r2,r2,4
81105e7c:	e0fff317 	ldw	r3,-52(fp)
81105e80:	10c00035 	stwio	r3,0(r2)
81105e84:	e0bff417 	ldw	r2,-48(fp)
81105e88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105e8c:	e0bff817 	ldw	r2,-32(fp)
81105e90:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
81105e94:	0005883a 	mov	r2,zero
}
81105e98:	e037883a 	mov	sp,fp
81105e9c:	dfc00117 	ldw	ra,4(sp)
81105ea0:	df000017 	ldw	fp,0(sp)
81105ea4:	dec00204 	addi	sp,sp,8
81105ea8:	f800283a 	ret

81105eac <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
81105eac:	defff004 	addi	sp,sp,-64
81105eb0:	dfc00f15 	stw	ra,60(sp)
81105eb4:	df000e15 	stw	fp,56(sp)
81105eb8:	df000e04 	addi	fp,sp,56
81105ebc:	e13ffd15 	stw	r4,-12(fp)
81105ec0:	e17ffe15 	stw	r5,-8(fp)
81105ec4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81105ec8:	e03ff615 	stw	zero,-40(fp)
	alt_irq_context context = 0;
81105ecc:	e03ff715 	stw	zero,-36(fp)
	alt_u32 csr_status = 0;
81105ed0:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81105ed4:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81105ed8:	e0bffd17 	ldw	r2,-12(fp)
81105edc:	10800317 	ldw	r2,12(r2)
81105ee0:	10800204 	addi	r2,r2,8
81105ee4:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
81105ee8:	10bfffcc 	andi	r2,r2,65535
81105eec:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81105ef0:	e0bffd17 	ldw	r2,-12(fp)
81105ef4:	10800317 	ldw	r2,12(r2)
81105ef8:	10800204 	addi	r2,r2,8
81105efc:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81105f00:	1004d43a 	srli	r2,r2,16
81105f04:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
81105f08:	00807804 	movi	r2,480
81105f0c:	e0bff815 	stw	r2,-32(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81105f10:	00001d06 	br	81105f88 <msgdma_descriptor_sync_transfer+0xdc>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
81105f14:	01000044 	movi	r4,1
81105f18:	111ba400 	call	8111ba40 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81105f1c:	e0bff30b 	ldhu	r2,-52(fp)
81105f20:	1084e230 	cmpltui	r2,r2,5000
81105f24:	1000091e 	bne	r2,zero,81105f4c <msgdma_descriptor_sync_transfer+0xa0>
		{
#ifdef DEBUG_ON
			debug(fp,
81105f28:	d0a02717 	ldw	r2,-32612(gp)
81105f2c:	100f883a 	mov	r7,r2
81105f30:	01801304 	movi	r6,76
81105f34:	01400044 	movi	r5,1
81105f38:	012044b4 	movhi	r4,33042
81105f3c:	21079504 	addi	r4,r4,7764
81105f40:	110bee00 	call	8110bee0 <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
81105f44:	00bff084 	movi	r2,-62
81105f48:	0000ae06 	br	81106204 <msgdma_descriptor_sync_transfer+0x358>
		}
		counter++;
81105f4c:	e0bff30b 	ldhu	r2,-52(fp)
81105f50:	10800044 	addi	r2,r2,1
81105f54:	e0bff30d 	sth	r2,-52(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81105f58:	e0bffd17 	ldw	r2,-12(fp)
81105f5c:	10800317 	ldw	r2,12(r2)
81105f60:	10800204 	addi	r2,r2,8
81105f64:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
81105f68:	10bfffcc 	andi	r2,r2,65535
81105f6c:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81105f70:	e0bffd17 	ldw	r2,-12(fp)
81105f74:	10800317 	ldw	r2,12(r2)
81105f78:	10800204 	addi	r2,r2,8
81105f7c:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
81105f80:	1004d43a 	srli	r2,r2,16
81105f84:	e0bff515 	stw	r2,-44(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81105f88:	e0bffd17 	ldw	r2,-12(fp)
81105f8c:	10800917 	ldw	r2,36(r2)
81105f90:	e0fff517 	ldw	r3,-44(fp)
81105f94:	18bfdf2e 	bgeu	r3,r2,81105f14 <__reset+0xfb0e5f14>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
81105f98:	e0bffd17 	ldw	r2,-12(fp)
81105f9c:	10800917 	ldw	r2,36(r2)
81105fa0:	e0fff417 	ldw	r3,-48(fp)
81105fa4:	18bfdb2e 	bgeu	r3,r2,81105f14 <__reset+0xfb0e5f14>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105fa8:	0005303a 	rdctl	r2,status
81105fac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105fb0:	e0fffc17 	ldw	r3,-16(fp)
81105fb4:	00bfff84 	movi	r2,-2
81105fb8:	1884703a 	and	r2,r3,r2
81105fbc:	1001703a 	wrctl	status,r2
  
  return context;
81105fc0:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81105fc4:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81105fc8:	e0bffd17 	ldw	r2,-12(fp)
81105fcc:	10800317 	ldw	r2,12(r2)
81105fd0:	10800104 	addi	r2,r2,4
81105fd4:	00c00804 	movi	r3,32
81105fd8:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81105fdc:	e0bffd17 	ldw	r2,-12(fp)
81105fe0:	10800317 	ldw	r2,12(r2)
81105fe4:	e0fffd17 	ldw	r3,-12(fp)
81105fe8:	18c00317 	ldw	r3,12(r3)
81105fec:	18c00037 	ldwio	r3,0(r3)
81105ff0:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
81105ff4:	e0bffe17 	ldw	r2,-8(fp)
81105ff8:	10000c26 	beq	r2,zero,8110602c <msgdma_descriptor_sync_transfer+0x180>
81105ffc:	e0bfff17 	ldw	r2,-4(fp)
81106000:	10000a1e 	bne	r2,zero,8110602c <msgdma_descriptor_sync_transfer+0x180>
		counter = 0; /* reset counter */
81106004:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106008:	d0a02717 	ldw	r2,-32612(gp)
8110600c:	100f883a 	mov	r7,r2
81106010:	01800784 	movi	r6,30
81106014:	01400044 	movi	r5,1
81106018:	012044b4 	movhi	r4,33042
8110601c:	21077704 	addi	r4,r4,7644
81106020:	110bee00 	call	8110bee0 <fwrite>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
81106024:	00bff084 	movi	r2,-62
81106028:	00007606 	br	81106204 <msgdma_descriptor_sync_transfer+0x358>
	} else if (NULL == standard_desc && NULL != extended_desc) {
8110602c:	e0bffe17 	ldw	r2,-8(fp)
81106030:	10001f1e 	bne	r2,zero,811060b0 <msgdma_descriptor_sync_transfer+0x204>
81106034:	e0bfff17 	ldw	r2,-4(fp)
81106038:	10001d26 	beq	r2,zero,811060b0 <msgdma_descriptor_sync_transfer+0x204>
		counter = 0; /* reset counter */
8110603c:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106040:	00001106 	br	81106088 <msgdma_descriptor_sync_transfer+0x1dc>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
81106044:	01000044 	movi	r4,1
81106048:	111ba400 	call	8111ba40 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110604c:	e0bff30b 	ldhu	r2,-52(fp)
81106050:	1084e230 	cmpltui	r2,r2,5000
81106054:	1000091e 	bne	r2,zero,8110607c <msgdma_descriptor_sync_transfer+0x1d0>
			{
#ifdef DEBUG_ON
				debug(fp,
81106058:	d0a02717 	ldw	r2,-32612(gp)
8110605c:	100f883a 	mov	r7,r2
81106060:	01801004 	movi	r6,64
81106064:	01400044 	movi	r5,1
81106068:	012044b4 	movhi	r4,33042
8110606c:	2107a904 	addi	r4,r4,7844
81106070:	110bee00 	call	8110bee0 <fwrite>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
81106074:	00bff084 	movi	r2,-62
81106078:	00006206 	br	81106204 <msgdma_descriptor_sync_transfer+0x358>
			}
			counter++;
8110607c:	e0bff30b 	ldhu	r2,-52(fp)
81106080:	10800044 	addi	r2,r2,1
81106084:	e0bff30d 	sth	r2,-52(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81106088:	e0bffd17 	ldw	r2,-12(fp)
8110608c:	10c00317 	ldw	r3,12(r2)
81106090:	e0bffd17 	ldw	r2,-12(fp)
81106094:	10800417 	ldw	r2,16(r2)
81106098:	e1bfff17 	ldw	r6,-4(fp)
8110609c:	100b883a 	mov	r5,r2
811060a0:	1809883a 	mov	r4,r3
811060a4:	11059740 	call	81105974 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811060a8:	103fe61e 	bne	r2,zero,81106044 <__reset+0xfb0e6044>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811060ac:	00000206 	br	811060b8 <msgdma_descriptor_sync_transfer+0x20c>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811060b0:	00bfffc4 	movi	r2,-1
811060b4:	00005306 	br	81106204 <msgdma_descriptor_sync_transfer+0x358>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811060b8:	e0bffd17 	ldw	r2,-12(fp)
811060bc:	10800317 	ldw	r2,12(r2)
811060c0:	10800104 	addi	r2,r2,4
811060c4:	e0fffd17 	ldw	r3,-12(fp)
811060c8:	19000d17 	ldw	r4,52(r3)
811060cc:	00fff2c4 	movi	r3,-53
811060d0:	20c6703a 	and	r3,r4,r3
811060d4:	18c00114 	ori	r3,r3,4
811060d8:	10c00035 	stwio	r3,0(r2)
811060dc:	e0bff717 	ldw	r2,-36(fp)
811060e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811060e4:	e0bffb17 	ldw	r2,-20(fp)
811060e8:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
811060ec:	e03ff30d 	sth	zero,-52(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
811060f0:	e0bffd17 	ldw	r2,-12(fp)
811060f4:	10800317 	ldw	r2,12(r2)
811060f8:	10800037 	ldwio	r2,0(r2)
811060fc:	e0bff215 	stw	r2,-56(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106100:	00001506 	br	81106158 <msgdma_descriptor_sync_transfer+0x2ac>
		alt_busy_sleep(1); /* delay 1us */
81106104:	01000044 	movi	r4,1
81106108:	111ba400 	call	8111ba40 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110610c:	e0bff30b 	ldhu	r2,-52(fp)
81106110:	1084e230 	cmpltui	r2,r2,5000
81106114:	1000091e 	bne	r2,zero,8110613c <msgdma_descriptor_sync_transfer+0x290>
		{
#ifdef DEBUG_ON
			debug(fp,
81106118:	d0a02717 	ldw	r2,-32612(gp)
8110611c:	100f883a 	mov	r7,r2
81106120:	01801184 	movi	r6,70
81106124:	01400044 	movi	r5,1
81106128:	012044b4 	movhi	r4,33042
8110612c:	2107ba04 	addi	r4,r4,7912
81106130:	110bee00 	call	8110bee0 <fwrite>
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);

			return -ETIME;
81106134:	00bff084 	movi	r2,-62
81106138:	00003206 	br	81106204 <msgdma_descriptor_sync_transfer+0x358>
		}
		counter++;
8110613c:	e0bff30b 	ldhu	r2,-52(fp)
81106140:	10800044 	addi	r2,r2,1
81106144:	e0bff30d 	sth	r2,-52(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106148:	e0bffd17 	ldw	r2,-12(fp)
8110614c:	10800317 	ldw	r2,12(r2)
81106150:	10800037 	ldwio	r2,0(r2)
81106154:	e0bff215 	stw	r2,-56(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106158:	e0fff217 	ldw	r3,-56(fp)
8110615c:	e0bff817 	ldw	r2,-32(fp)
81106160:	1884703a 	and	r2,r3,r2
81106164:	1000031e 	bne	r2,zero,81106174 <msgdma_descriptor_sync_transfer+0x2c8>
81106168:	e0bff217 	ldw	r2,-56(fp)
8110616c:	1080004c 	andi	r2,r2,1
81106170:	103fe41e 	bne	r2,zero,81106104 <__reset+0xfb0e6104>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81106174:	e0fff217 	ldw	r3,-56(fp)
81106178:	e0bff817 	ldw	r2,-32(fp)
8110617c:	1884703a 	and	r2,r3,r2
81106180:	10000226 	beq	r2,zero,8110618c <msgdma_descriptor_sync_transfer+0x2e0>
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return error;
81106184:	e0bff817 	ldw	r2,-32(fp)
81106188:	00001e06 	br	81106204 <msgdma_descriptor_sync_transfer+0x358>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
8110618c:	e0bffd17 	ldw	r2,-12(fp)
81106190:	10800317 	ldw	r2,12(r2)
81106194:	10800104 	addi	r2,r2,4
81106198:	10800037 	ldwio	r2,0(r2)
8110619c:	10800814 	ori	r2,r2,32
811061a0:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811061a4:	0005303a 	rdctl	r2,status
811061a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811061ac:	e0fff917 	ldw	r3,-28(fp)
811061b0:	00bfff84 	movi	r2,-2
811061b4:	1884703a 	and	r2,r3,r2
811061b8:	1001703a 	wrctl	status,r2
  
  return context;
811061bc:	e0bff917 	ldw	r2,-28(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811061c0:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811061c4:	e0bffd17 	ldw	r2,-12(fp)
811061c8:	10800317 	ldw	r2,12(r2)
811061cc:	10800104 	addi	r2,r2,4
811061d0:	e0fff617 	ldw	r3,-40(fp)
811061d4:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811061d8:	e0bffd17 	ldw	r2,-12(fp)
811061dc:	10800317 	ldw	r2,12(r2)
811061e0:	e0fffd17 	ldw	r3,-12(fp)
811061e4:	18c00317 	ldw	r3,12(r3)
811061e8:	18c00037 	ldwio	r3,0(r3)
811061ec:	10c00035 	stwio	r3,0(r2)
811061f0:	e0bff717 	ldw	r2,-36(fp)
811061f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811061f8:	e0bffa17 	ldw	r2,-24(fp)
811061fc:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
81106200:	0005883a 	mov	r2,zero

}
81106204:	e037883a 	mov	sp,fp
81106208:	dfc00117 	ldw	ra,4(sp)
8110620c:	df000017 	ldw	fp,0(sp)
81106210:	dec00204 	addi	sp,sp,8
81106214:	f800283a 	ret

81106218 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
81106218:	deffec04 	addi	sp,sp,-80
8110621c:	dfc01315 	stw	ra,76(sp)
81106220:	df001215 	stw	fp,72(sp)
81106224:	df001204 	addi	fp,sp,72
81106228:	e13ff715 	stw	r4,-36(fp)
8110622c:	e17ff815 	stw	r5,-32(fp)
81106230:	e1bff915 	stw	r6,-28(fp)
81106234:	e1fffa15 	stw	r7,-24(fp)
81106238:	e1800617 	ldw	r6,24(fp)
8110623c:	e1400717 	ldw	r5,28(fp)
81106240:	e1000817 	ldw	r4,32(fp)
81106244:	e0c00917 	ldw	r3,36(fp)
81106248:	e0800a17 	ldw	r2,40(fp)
8110624c:	e1bffb0d 	sth	r6,-20(fp)
81106250:	e17ffc05 	stb	r5,-16(fp)
81106254:	e13ffd05 	stb	r4,-12(fp)
81106258:	e0fffe0d 	sth	r3,-8(fp)
8110625c:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
81106260:	e0bffb0b 	ldhu	r2,-20(fp)
81106264:	e0fffc03 	ldbu	r3,-16(fp)
81106268:	e13ffd03 	ldbu	r4,-12(fp)
8110626c:	e17ffe0b 	ldhu	r5,-8(fp)
81106270:	e1bfff0b 	ldhu	r6,-4(fp)
81106274:	d9800815 	stw	r6,32(sp)
81106278:	d9400715 	stw	r5,28(sp)
8110627c:	d9000615 	stw	r4,24(sp)
81106280:	d8c00515 	stw	r3,20(sp)
81106284:	d8800415 	stw	r2,16(sp)
81106288:	e0800517 	ldw	r2,20(fp)
8110628c:	d8800315 	stw	r2,12(sp)
81106290:	e0800417 	ldw	r2,16(fp)
81106294:	d8800215 	stw	r2,8(sp)
81106298:	e0800317 	ldw	r2,12(fp)
8110629c:	d8800115 	stw	r2,4(sp)
811062a0:	e0800217 	ldw	r2,8(fp)
811062a4:	d8800015 	stw	r2,0(sp)
811062a8:	e1fffa17 	ldw	r7,-24(fp)
811062ac:	e1bff917 	ldw	r6,-28(fp)
811062b0:	e17ff817 	ldw	r5,-32(fp)
811062b4:	e13ff717 	ldw	r4,-36(fp)
811062b8:	1105aa80 	call	81105aa8 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
811062bc:	e037883a 	mov	sp,fp
811062c0:	dfc00117 	ldw	ra,4(sp)
811062c4:	df000017 	ldw	fp,0(sp)
811062c8:	dec00204 	addi	sp,sp,8
811062cc:	f800283a 	ret

811062d0 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
811062d0:	defffc04 	addi	sp,sp,-16
811062d4:	dfc00315 	stw	ra,12(sp)
811062d8:	df000215 	stw	fp,8(sp)
811062dc:	df000204 	addi	fp,sp,8
811062e0:	e13ffe15 	stw	r4,-8(fp)
811062e4:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
811062e8:	e1bfff17 	ldw	r6,-4(fp)
811062ec:	000b883a 	mov	r5,zero
811062f0:	e13ffe17 	ldw	r4,-8(fp)
811062f4:	1105c040 	call	81105c04 <msgdma_descriptor_async_transfer>
}
811062f8:	e037883a 	mov	sp,fp
811062fc:	dfc00117 	ldw	ra,4(sp)
81106300:	df000017 	ldw	fp,0(sp)
81106304:	dec00204 	addi	sp,sp,8
81106308:	f800283a 	ret

8110630c <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
8110630c:	defffc04 	addi	sp,sp,-16
81106310:	dfc00315 	stw	ra,12(sp)
81106314:	df000215 	stw	fp,8(sp)
81106318:	df000204 	addi	fp,sp,8
8110631c:	e13ffe15 	stw	r4,-8(fp)
81106320:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
81106324:	e1bfff17 	ldw	r6,-4(fp)
81106328:	000b883a 	mov	r5,zero
8110632c:	e13ffe17 	ldw	r4,-8(fp)
81106330:	1105eac0 	call	81105eac <msgdma_descriptor_sync_transfer>
}
81106334:	e037883a 	mov	sp,fp
81106338:	dfc00117 	ldw	ra,4(sp)
8110633c:	df000017 	ldw	fp,0(sp)
81106340:	dec00204 	addi	sp,sp,8
81106344:	f800283a 	ret

81106348 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
81106348:	defff204 	addi	sp,sp,-56
8110634c:	dfc00d15 	stw	ra,52(sp)
81106350:	df000c15 	stw	fp,48(sp)
81106354:	df000c04 	addi	fp,sp,48
81106358:	2007883a 	mov	r3,r4
8110635c:	2805883a 	mov	r2,r5
81106360:	e1bffe15 	stw	r6,-8(fp)
81106364:	e1ffff15 	stw	r7,-4(fp)
81106368:	e0fffc05 	stb	r3,-16(fp)
8110636c:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
81106370:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
81106374:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
81106378:	008003f4 	movhi	r2,15
8110637c:	10909004 	addi	r2,r2,16960
81106380:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
81106384:	00bfe004 	movi	r2,-128
81106388:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
8110638c:	e0bffe17 	ldw	r2,-8(fp)
81106390:	10000226 	beq	r2,zero,8110639c <POWER_SPI_RW+0x54>
81106394:	00800804 	movi	r2,32
81106398:	00000106 	br	811063a0 <POWER_SPI_RW+0x58>
8110639c:	0005883a 	mov	r2,zero
811063a0:	e0fff403 	ldbu	r3,-48(fp)
811063a4:	10c4b03a 	or	r2,r2,r3
811063a8:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
811063ac:	e0800217 	ldw	r2,8(fp)
811063b0:	10000226 	beq	r2,zero,811063bc <POWER_SPI_RW+0x74>
811063b4:	00800404 	movi	r2,16
811063b8:	00000106 	br	811063c0 <POWER_SPI_RW+0x78>
811063bc:	0005883a 	mov	r2,zero
811063c0:	e0fff403 	ldbu	r3,-48(fp)
811063c4:	10c4b03a 	or	r2,r2,r3
811063c8:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
811063cc:	e0bfff17 	ldw	r2,-4(fp)
811063d0:	10000226 	beq	r2,zero,811063dc <POWER_SPI_RW+0x94>
811063d4:	00800204 	movi	r2,8
811063d8:	00000106 	br	811063e0 <POWER_SPI_RW+0x98>
811063dc:	0005883a 	mov	r2,zero
811063e0:	e0fff403 	ldbu	r3,-48(fp)
811063e4:	10c4b03a 	or	r2,r2,r3
811063e8:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
811063ec:	e0bffd03 	ldbu	r2,-12(fp)
811063f0:	108001cc 	andi	r2,r2,7
811063f4:	1007883a 	mov	r3,r2
811063f8:	e0bff403 	ldbu	r2,-48(fp)
811063fc:	1884b03a 	or	r2,r3,r2
81106400:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
81106404:	0007883a 	mov	r3,zero
81106408:	00a00034 	movhi	r2,32768
8110640c:	10824404 	addi	r2,r2,2320
81106410:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
81106414:	0007883a 	mov	r3,zero
81106418:	00a00034 	movhi	r2,32768
8110641c:	10824c04 	addi	r2,r2,2352
81106420:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
81106424:	e0bffc03 	ldbu	r2,-16(fp)
81106428:	1000021e 	bne	r2,zero,81106434 <POWER_SPI_RW+0xec>
8110642c:	00c00084 	movi	r3,2
81106430:	00000106 	br	81106438 <POWER_SPI_RW+0xf0>
81106434:	00c00044 	movi	r3,1
81106438:	00a00034 	movhi	r2,32768
8110643c:	10824804 	addi	r2,r2,2336
81106440:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106444:	010003c4 	movi	r4,15
81106448:	111c8240 	call	8111c824 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
8110644c:	00000306 	br	8110645c <POWER_SPI_RW+0x114>
		nWait++;
81106450:	e0bff817 	ldw	r2,-32(fp)
81106454:	10800044 	addi	r2,r2,1
81106458:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
8110645c:	00a00034 	movhi	r2,32768
81106460:	10825404 	addi	r2,r2,2384
81106464:	10800037 	ldwio	r2,0(r2)
81106468:	1080004c 	andi	r2,r2,1
8110646c:	10000326 	beq	r2,zero,8110647c <POWER_SPI_RW+0x134>
81106470:	e0fff817 	ldw	r3,-32(fp)
81106474:	e0bffa17 	ldw	r2,-24(fp)
81106478:	18bff516 	blt	r3,r2,81106450 <__reset+0xfb0e6450>
		nWait++;
	}

	if (SPI_SDO) {
8110647c:	00a00034 	movhi	r2,32768
81106480:	10825404 	addi	r2,r2,2384
81106484:	10800037 	ldwio	r2,0(r2)
81106488:	1080004c 	andi	r2,r2,1
8110648c:	10000626 	beq	r2,zero,811064a8 <POWER_SPI_RW+0x160>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
81106490:	00c000c4 	movi	r3,3
81106494:	00a00034 	movhi	r2,32768
81106498:	10824804 	addi	r2,r2,2336
8110649c:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
811064a0:	0005883a 	mov	r2,zero
811064a4:	0000db06 	br	81106814 <POWER_SPI_RW+0x4cc>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
811064a8:	e03ff715 	stw	zero,-36(fp)
811064ac:	00002406 	br	81106540 <POWER_SPI_RW+0x1f8>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
811064b0:	e0bff403 	ldbu	r2,-48(fp)
811064b4:	10803fcc 	andi	r2,r2,255
811064b8:	1004d1fa 	srli	r2,r2,7
811064bc:	10c03fcc 	andi	r3,r2,255
811064c0:	00a00034 	movhi	r2,32768
811064c4:	10825004 	addi	r2,r2,2368
811064c8:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
811064cc:	e0bff403 	ldbu	r2,-48(fp)
811064d0:	1085883a 	add	r2,r2,r2
811064d4:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
811064d8:	e0bff517 	ldw	r2,-44(fp)
811064dc:	1085883a 	add	r2,r2,r2
811064e0:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
811064e4:	00a00034 	movhi	r2,32768
811064e8:	10825404 	addi	r2,r2,2384
811064ec:	10800037 	ldwio	r2,0(r2)
811064f0:	1080004c 	andi	r2,r2,1
811064f4:	1007883a 	mov	r3,r2
811064f8:	e0bff517 	ldw	r2,-44(fp)
811064fc:	10c4b03a 	or	r2,r2,r3
81106500:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106504:	00c00044 	movi	r3,1
81106508:	00a00034 	movhi	r2,32768
8110650c:	10824c04 	addi	r2,r2,2352
81106510:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106514:	010003c4 	movi	r4,15
81106518:	111c8240 	call	8111c824 <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110651c:	0007883a 	mov	r3,zero
81106520:	00a00034 	movhi	r2,32768
81106524:	10824c04 	addi	r2,r2,2352
81106528:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110652c:	010003c4 	movi	r4,15
81106530:	111c8240 	call	8111c824 <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106534:	e0bff717 	ldw	r2,-36(fp)
81106538:	10800044 	addi	r2,r2,1
8110653c:	e0bff715 	stw	r2,-36(fp)
81106540:	e0bff717 	ldw	r2,-36(fp)
81106544:	10800090 	cmplti	r2,r2,2
81106548:	103fd91e 	bne	r2,zero,811064b0 <__reset+0xfb0e64b0>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
8110654c:	e03ff715 	stw	zero,-36(fp)
81106550:	00002406 	br	811065e4 <POWER_SPI_RW+0x29c>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
81106554:	e0bff403 	ldbu	r2,-48(fp)
81106558:	10803fcc 	andi	r2,r2,255
8110655c:	1004d1fa 	srli	r2,r2,7
81106560:	10c03fcc 	andi	r3,r2,255
81106564:	00a00034 	movhi	r2,32768
81106568:	10825004 	addi	r2,r2,2368
8110656c:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106570:	e0bff403 	ldbu	r2,-48(fp)
81106574:	1085883a 	add	r2,r2,r2
81106578:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
8110657c:	e0bff517 	ldw	r2,-44(fp)
81106580:	1085883a 	add	r2,r2,r2
81106584:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81106588:	00a00034 	movhi	r2,32768
8110658c:	10825404 	addi	r2,r2,2384
81106590:	10800037 	ldwio	r2,0(r2)
81106594:	1080004c 	andi	r2,r2,1
81106598:	1007883a 	mov	r3,r2
8110659c:	e0bff517 	ldw	r2,-44(fp)
811065a0:	10c4b03a 	or	r2,r2,r3
811065a4:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
811065a8:	00c00044 	movi	r3,1
811065ac:	00a00034 	movhi	r2,32768
811065b0:	10824c04 	addi	r2,r2,2352
811065b4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811065b8:	010003c4 	movi	r4,15
811065bc:	111c8240 	call	8111c824 <usleep>
		SPI_SCK(0); //sck=0; // clock low
811065c0:	0007883a 	mov	r3,zero
811065c4:	00a00034 	movhi	r2,32768
811065c8:	10824c04 	addi	r2,r2,2352
811065cc:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811065d0:	010003c4 	movi	r4,15
811065d4:	111c8240 	call	8111c824 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
811065d8:	e0bff717 	ldw	r2,-36(fp)
811065dc:	10800044 	addi	r2,r2,1
811065e0:	e0bff715 	stw	r2,-36(fp)
811065e4:	e0bff717 	ldw	r2,-36(fp)
811065e8:	10800210 	cmplti	r2,r2,8
811065ec:	103fd91e 	bne	r2,zero,81106554 <__reset+0xfb0e6554>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
811065f0:	e03ff715 	stw	zero,-36(fp)
811065f4:	00001a06 	br	81106660 <POWER_SPI_RW+0x318>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
811065f8:	e0bff517 	ldw	r2,-44(fp)
811065fc:	1085883a 	add	r2,r2,r2
81106600:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106604:	00a00034 	movhi	r2,32768
81106608:	10825404 	addi	r2,r2,2384
8110660c:	10800037 	ldwio	r2,0(r2)
81106610:	1080004c 	andi	r2,r2,1
81106614:	1007883a 	mov	r3,r2
81106618:	e0bff517 	ldw	r2,-44(fp)
8110661c:	10c4b03a 	or	r2,r2,r3
81106620:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106624:	00c00044 	movi	r3,1
81106628:	00a00034 	movhi	r2,32768
8110662c:	10824c04 	addi	r2,r2,2352
81106630:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106634:	010003c4 	movi	r4,15
81106638:	111c8240 	call	8111c824 <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110663c:	0007883a 	mov	r3,zero
81106640:	00a00034 	movhi	r2,32768
81106644:	10824c04 	addi	r2,r2,2352
81106648:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110664c:	010003c4 	movi	r4,15
81106650:	111c8240 	call	8111c824 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106654:	e0bff717 	ldw	r2,-36(fp)
81106658:	10800044 	addi	r2,r2,1
8110665c:	e0bff715 	stw	r2,-36(fp)
81106660:	e0bff717 	ldw	r2,-36(fp)
81106664:	10800210 	cmplti	r2,r2,8
81106668:	103fe31e 	bne	r2,zero,811065f8 <__reset+0xfb0e65f8>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
8110666c:	e03ff715 	stw	zero,-36(fp)
81106670:	00001a06 	br	811066dc <POWER_SPI_RW+0x394>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
81106674:	e0bff517 	ldw	r2,-44(fp)
81106678:	1085883a 	add	r2,r2,r2
8110667c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
81106680:	00a00034 	movhi	r2,32768
81106684:	10825404 	addi	r2,r2,2384
81106688:	10800037 	ldwio	r2,0(r2)
8110668c:	1080004c 	andi	r2,r2,1
81106690:	1007883a 	mov	r3,r2
81106694:	e0bff517 	ldw	r2,-44(fp)
81106698:	10c4b03a 	or	r2,r2,r3
8110669c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
811066a0:	00c00044 	movi	r3,1
811066a4:	00a00034 	movhi	r2,32768
811066a8:	10824c04 	addi	r2,r2,2352
811066ac:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811066b0:	010003c4 	movi	r4,15
811066b4:	111c8240 	call	8111c824 <usleep>
		SPI_SCK(0); //sck=0; // clock low
811066b8:	0007883a 	mov	r3,zero
811066bc:	00a00034 	movhi	r2,32768
811066c0:	10824c04 	addi	r2,r2,2352
811066c4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811066c8:	010003c4 	movi	r4,15
811066cc:	111c8240 	call	8111c824 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
811066d0:	e0bff717 	ldw	r2,-36(fp)
811066d4:	10800044 	addi	r2,r2,1
811066d8:	e0bff715 	stw	r2,-36(fp)
811066dc:	e0bff717 	ldw	r2,-36(fp)
811066e0:	10800210 	cmplti	r2,r2,8
811066e4:	103fe31e 	bne	r2,zero,81106674 <__reset+0xfb0e6674>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
811066e8:	e03ff715 	stw	zero,-36(fp)
811066ec:	00001a06 	br	81106758 <POWER_SPI_RW+0x410>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
811066f0:	e0bff517 	ldw	r2,-44(fp)
811066f4:	1085883a 	add	r2,r2,r2
811066f8:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
811066fc:	00a00034 	movhi	r2,32768
81106700:	10825404 	addi	r2,r2,2384
81106704:	10800037 	ldwio	r2,0(r2)
81106708:	1080004c 	andi	r2,r2,1
8110670c:	1007883a 	mov	r3,r2
81106710:	e0bff517 	ldw	r2,-44(fp)
81106714:	10c4b03a 	or	r2,r2,r3
81106718:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8110671c:	00c00044 	movi	r3,1
81106720:	00a00034 	movhi	r2,32768
81106724:	10824c04 	addi	r2,r2,2352
81106728:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110672c:	010003c4 	movi	r4,15
81106730:	111c8240 	call	8111c824 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106734:	0007883a 	mov	r3,zero
81106738:	00a00034 	movhi	r2,32768
8110673c:	10824c04 	addi	r2,r2,2352
81106740:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106744:	010003c4 	movi	r4,15
81106748:	111c8240 	call	8111c824 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
8110674c:	e0bff717 	ldw	r2,-36(fp)
81106750:	10800044 	addi	r2,r2,1
81106754:	e0bff715 	stw	r2,-36(fp)
81106758:	e0bff717 	ldw	r2,-36(fp)
8110675c:	10800190 	cmplti	r2,r2,6
81106760:	103fe31e 	bne	r2,zero,811066f0 <__reset+0xfb0e66f0>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
81106764:	00c00044 	movi	r3,1
81106768:	00a00034 	movhi	r2,32768
8110676c:	10824c04 	addi	r2,r2,2352
81106770:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106774:	010003c4 	movi	r4,15
81106778:	111c8240 	call	8111c824 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
8110677c:	00c000c4 	movi	r3,3
81106780:	00a00034 	movhi	r2,32768
81106784:	10824804 	addi	r2,r2,2336
81106788:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
8110678c:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
81106790:	00800044 	movi	r2,1
81106794:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
81106798:	e03ff715 	stw	zero,-36(fp)
8110679c:	00000d06 	br	811067d4 <POWER_SPI_RW+0x48c>
		if ((Value32 & Mask32) == 0x00) {
811067a0:	e0fff517 	ldw	r3,-44(fp)
811067a4:	e0bff617 	ldw	r2,-40(fp)
811067a8:	1884703a 	and	r2,r3,r2
811067ac:	1000031e 	bne	r2,zero,811067bc <POWER_SPI_RW+0x474>
			nZeroCnt++;
811067b0:	e0bff917 	ldw	r2,-28(fp)
811067b4:	10800044 	addi	r2,r2,1
811067b8:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
811067bc:	e0bff617 	ldw	r2,-40(fp)
811067c0:	1085883a 	add	r2,r2,r2
811067c4:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
811067c8:	e0bff717 	ldw	r2,-36(fp)
811067cc:	10800044 	addi	r2,r2,1
811067d0:	e0bff715 	stw	r2,-36(fp)
811067d4:	e0bff717 	ldw	r2,-36(fp)
811067d8:	10800810 	cmplti	r2,r2,32
811067dc:	103ff01e 	bne	r2,zero,811067a0 <__reset+0xfb0e67a0>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
811067e0:	e0bff917 	ldw	r2,-28(fp)
811067e4:	1080004c 	andi	r2,r2,1
811067e8:	1005003a 	cmpeq	r2,r2,zero
811067ec:	10803fcc 	andi	r2,r2,255
811067f0:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
811067f4:	e0bffb17 	ldw	r2,-20(fp)
811067f8:	1000021e 	bne	r2,zero,81106804 <POWER_SPI_RW+0x4bc>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
811067fc:	0005883a 	mov	r2,zero
81106800:	00000406 	br	81106814 <POWER_SPI_RW+0x4cc>
	}

	*pValue = Value32;
81106804:	e0800317 	ldw	r2,12(fp)
81106808:	e0fff517 	ldw	r3,-44(fp)
8110680c:	10c00015 	stw	r3,0(r2)

	return bSuccess;
81106810:	e0bffb17 	ldw	r2,-20(fp)
}
81106814:	e037883a 	mov	sp,fp
81106818:	dfc00117 	ldw	ra,4(sp)
8110681c:	df000017 	ldw	fp,0(sp)
81106820:	dec00204 	addi	sp,sp,8
81106824:	f800283a 	ret

81106828 <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
81106828:	defffc04 	addi	sp,sp,-16
8110682c:	dfc00315 	stw	ra,12(sp)
81106830:	df000215 	stw	fp,8(sp)
81106834:	df000204 	addi	fp,sp,8
81106838:	2005883a 	mov	r2,r4
8110683c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
81106840:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
81106844:	e0bfff0b 	ldhu	r2,-4(fp)
81106848:	e0fffe17 	ldw	r3,-8(fp)
8110684c:	1884b03a 	or	r2,r3,r2
81106850:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
81106854:	e0bffe17 	ldw	r2,-8(fp)
81106858:	10800074 	orhi	r2,r2,1
8110685c:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81106860:	e1bffe17 	ldw	r6,-8(fp)
81106864:	000b883a 	mov	r5,zero
81106868:	01200034 	movhi	r4,32768
8110686c:	21020004 	addi	r4,r4,2048
81106870:	11069600 	call	81106960 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
81106874:	0001883a 	nop
81106878:	e037883a 	mov	sp,fp
8110687c:	dfc00117 	ldw	ra,4(sp)
81106880:	df000017 	ldw	fp,0(sp)
81106884:	dec00204 	addi	sp,sp,8
81106888:	f800283a 	ret

8110688c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110688c:	defffc04 	addi	sp,sp,-16
81106890:	dfc00315 	stw	ra,12(sp)
81106894:	df000215 	stw	fp,8(sp)
81106898:	df000204 	addi	fp,sp,8
8110689c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
811068a0:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811068a4:	01400044 	movi	r5,1
811068a8:	01200034 	movhi	r4,32768
811068ac:	21020004 	addi	r4,r4,2048
811068b0:	11069ac0 	call	811069ac <uliRstReadReg>
811068b4:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
811068b8:	e0bfff17 	ldw	r2,-4(fp)
811068bc:	0084303a 	nor	r2,zero,r2
811068c0:	e0fffe17 	ldw	r3,-8(fp)
811068c4:	1884703a 	and	r2,r3,r2
811068c8:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811068cc:	e1bffe17 	ldw	r6,-8(fp)
811068d0:	01400044 	movi	r5,1
811068d4:	01200034 	movhi	r4,32768
811068d8:	21020004 	addi	r4,r4,2048
811068dc:	11069600 	call	81106960 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
811068e0:	0001883a 	nop
811068e4:	e037883a 	mov	sp,fp
811068e8:	dfc00117 	ldw	ra,4(sp)
811068ec:	df000017 	ldw	fp,0(sp)
811068f0:	dec00204 	addi	sp,sp,8
811068f4:	f800283a 	ret

811068f8 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
811068f8:	defffc04 	addi	sp,sp,-16
811068fc:	dfc00315 	stw	ra,12(sp)
81106900:	df000215 	stw	fp,8(sp)
81106904:	df000204 	addi	fp,sp,8
81106908:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
8110690c:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81106910:	01400044 	movi	r5,1
81106914:	01200034 	movhi	r4,32768
81106918:	21020004 	addi	r4,r4,2048
8110691c:	11069ac0 	call	811069ac <uliRstReadReg>
81106920:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
81106924:	e0fffe17 	ldw	r3,-8(fp)
81106928:	e0bfff17 	ldw	r2,-4(fp)
8110692c:	1884b03a 	or	r2,r3,r2
81106930:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81106934:	e1bffe17 	ldw	r6,-8(fp)
81106938:	01400044 	movi	r5,1
8110693c:	01200034 	movhi	r4,32768
81106940:	21020004 	addi	r4,r4,2048
81106944:	11069600 	call	81106960 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
81106948:	0001883a 	nop
8110694c:	e037883a 	mov	sp,fp
81106950:	dfc00117 	ldw	ra,4(sp)
81106954:	df000017 	ldw	fp,0(sp)
81106958:	dec00204 	addi	sp,sp,8
8110695c:	f800283a 	ret

81106960 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81106960:	defffc04 	addi	sp,sp,-16
81106964:	df000315 	stw	fp,12(sp)
81106968:	df000304 	addi	fp,sp,12
8110696c:	e13ffd15 	stw	r4,-12(fp)
81106970:	e17ffe15 	stw	r5,-8(fp)
81106974:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81106978:	e0bffe17 	ldw	r2,-8(fp)
8110697c:	1085883a 	add	r2,r2,r2
81106980:	1085883a 	add	r2,r2,r2
81106984:	1007883a 	mov	r3,r2
81106988:	e0bffd17 	ldw	r2,-12(fp)
8110698c:	10c5883a 	add	r2,r2,r3
81106990:	e0ffff17 	ldw	r3,-4(fp)
81106994:	10c00015 	stw	r3,0(r2)
}
81106998:	0001883a 	nop
8110699c:	e037883a 	mov	sp,fp
811069a0:	df000017 	ldw	fp,0(sp)
811069a4:	dec00104 	addi	sp,sp,4
811069a8:	f800283a 	ret

811069ac <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811069ac:	defffc04 	addi	sp,sp,-16
811069b0:	df000315 	stw	fp,12(sp)
811069b4:	df000304 	addi	fp,sp,12
811069b8:	e13ffe15 	stw	r4,-8(fp)
811069bc:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811069c0:	e0bfff17 	ldw	r2,-4(fp)
811069c4:	1085883a 	add	r2,r2,r2
811069c8:	1085883a 	add	r2,r2,r2
811069cc:	1007883a 	mov	r3,r2
811069d0:	e0bffe17 	ldw	r2,-8(fp)
811069d4:	10c5883a 	add	r2,r2,r3
811069d8:	10800017 	ldw	r2,0(r2)
811069dc:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
811069e0:	e0bffd17 	ldw	r2,-12(fp)
}
811069e4:	e037883a 	mov	sp,fp
811069e8:	df000017 	ldw	fp,0(sp)
811069ec:	dec00104 	addi	sp,sp,4
811069f0:	f800283a 	ret

811069f4 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
811069f4:	defffe04 	addi	sp,sp,-8
811069f8:	dfc00115 	stw	ra,4(sp)
811069fc:	df000015 	stw	fp,0(sp)
81106a00:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
81106a04:	0007883a 	mov	r3,zero
81106a08:	00a00034 	movhi	r2,32768
81106a0c:	10823004 	addi	r2,r2,2240
81106a10:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
81106a14:	0007883a 	mov	r3,zero
81106a18:	00a00034 	movhi	r2,32768
81106a1c:	10822c04 	addi	r2,r2,2224
81106a20:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81106a24:	01002584 	movi	r4,150
81106a28:	111c8240 	call	8111c824 <usleep>
}
81106a2c:	0001883a 	nop
81106a30:	e037883a 	mov	sp,fp
81106a34:	dfc00117 	ldw	ra,4(sp)
81106a38:	df000017 	ldw	fp,0(sp)
81106a3c:	dec00204 	addi	sp,sp,8
81106a40:	f800283a 	ret

81106a44 <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
81106a44:	defffc04 	addi	sp,sp,-16
81106a48:	dfc00315 	stw	ra,12(sp)
81106a4c:	df000215 	stw	fp,8(sp)
81106a50:	df000204 	addi	fp,sp,8
81106a54:	2005883a 	mov	r2,r4
81106a58:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
81106a5c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81106a60:	00bfe004 	movi	r2,-128
81106a64:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81106a68:	e03ffe05 	stb	zero,-8(fp)
81106a6c:	00001b06 	br	81106adc <v_spi_send_byte+0x98>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
81106a70:	e0ffff03 	ldbu	r3,-4(fp)
81106a74:	e0bffe43 	ldbu	r2,-7(fp)
81106a78:	1884703a 	and	r2,r3,r2
81106a7c:	10803fcc 	andi	r2,r2,255
81106a80:	1004c03a 	cmpne	r2,r2,zero
81106a84:	10c03fcc 	andi	r3,r2,255
81106a88:	00a00034 	movhi	r2,32768
81106a8c:	10823404 	addi	r2,r2,2256
81106a90:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
81106a94:	e0bffe43 	ldbu	r2,-7(fp)
81106a98:	1004d07a 	srli	r2,r2,1
81106a9c:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
81106aa0:	00c00044 	movi	r3,1
81106aa4:	00a00034 	movhi	r2,32768
81106aa8:	10823004 	addi	r2,r2,2240
81106aac:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106ab0:	01002584 	movi	r4,150
81106ab4:	111c8240 	call	8111c824 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106ab8:	0007883a 	mov	r3,zero
81106abc:	00a00034 	movhi	r2,32768
81106ac0:	10823004 	addi	r2,r2,2240
81106ac4:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106ac8:	01002584 	movi	r4,150
81106acc:	111c8240 	call	8111c824 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81106ad0:	e0bffe03 	ldbu	r2,-8(fp)
81106ad4:	10800044 	addi	r2,r2,1
81106ad8:	e0bffe05 	stb	r2,-8(fp)
81106adc:	e0bffe03 	ldbu	r2,-8(fp)
81106ae0:	10800230 	cmpltui	r2,r2,8
81106ae4:	103fe21e 	bne	r2,zero,81106a70 <__reset+0xfb0e6a70>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
81106ae8:	0001883a 	nop
81106aec:	e037883a 	mov	sp,fp
81106af0:	dfc00117 	ldw	ra,4(sp)
81106af4:	df000017 	ldw	fp,0(sp)
81106af8:	dec00204 	addi	sp,sp,8
81106afc:	f800283a 	ret

81106b00 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
81106b00:	defffd04 	addi	sp,sp,-12
81106b04:	dfc00215 	stw	ra,8(sp)
81106b08:	df000115 	stw	fp,4(sp)
81106b0c:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
81106b10:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
81106b14:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
81106b18:	e03fff05 	stb	zero,-4(fp)
81106b1c:	00001a06 	br	81106b88 <uc_spi_get_byte+0x88>
    {
        uc_data <<= 1;
81106b20:	e0bfff43 	ldbu	r2,-3(fp)
81106b24:	1085883a 	add	r2,r2,r2
81106b28:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
81106b2c:	00a00034 	movhi	r2,32768
81106b30:	10823804 	addi	r2,r2,2272
81106b34:	10800037 	ldwio	r2,0(r2)
81106b38:	1080004c 	andi	r2,r2,1
81106b3c:	1007883a 	mov	r3,r2
81106b40:	e0bfff43 	ldbu	r2,-3(fp)
81106b44:	1884b03a 	or	r2,r3,r2
81106b48:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81106b4c:	00c00044 	movi	r3,1
81106b50:	00a00034 	movhi	r2,32768
81106b54:	10823004 	addi	r2,r2,2240
81106b58:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106b5c:	01002584 	movi	r4,150
81106b60:	111c8240 	call	8111c824 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106b64:	0007883a 	mov	r3,zero
81106b68:	00a00034 	movhi	r2,32768
81106b6c:	10823004 	addi	r2,r2,2240
81106b70:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106b74:	01002584 	movi	r4,150
81106b78:	111c8240 	call	8111c824 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
81106b7c:	e0bfff03 	ldbu	r2,-4(fp)
81106b80:	10800044 	addi	r2,r2,1
81106b84:	e0bfff05 	stb	r2,-4(fp)
81106b88:	e0bfff03 	ldbu	r2,-4(fp)
81106b8c:	10800230 	cmpltui	r2,r2,8
81106b90:	103fe31e 	bne	r2,zero,81106b20 <__reset+0xfb0e6b20>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
81106b94:	e0bfff43 	ldbu	r2,-3(fp)
}
81106b98:	e037883a 	mov	sp,fp
81106b9c:	dfc00117 	ldw	ra,4(sp)
81106ba0:	df000017 	ldw	fp,0(sp)
81106ba4:	dec00204 	addi	sp,sp,8
81106ba8:	f800283a 	ret

81106bac <v_spi_end>:

void v_spi_end(void){
81106bac:	defffe04 	addi	sp,sp,-8
81106bb0:	dfc00115 	stw	ra,4(sp)
81106bb4:	df000015 	stw	fp,0(sp)
81106bb8:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
81106bbc:	0007883a 	mov	r3,zero
81106bc0:	00a00034 	movhi	r2,32768
81106bc4:	10823004 	addi	r2,r2,2240
81106bc8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81106bcc:	01002584 	movi	r4,150
81106bd0:	111c8240 	call	8111c824 <usleep>
    SPI_CS_N(1);
81106bd4:	00c00044 	movi	r3,1
81106bd8:	00a00034 	movhi	r2,32768
81106bdc:	10822c04 	addi	r2,r2,2224
81106be0:	10c00035 	stwio	r3,0(r2)
}
81106be4:	0001883a 	nop
81106be8:	e037883a 	mov	sp,fp
81106bec:	dfc00117 	ldw	ra,4(sp)
81106bf0:	df000017 	ldw	fp,0(sp)
81106bf4:	dec00204 	addi	sp,sp,8
81106bf8:	f800283a 	ret

81106bfc <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
81106bfc:	defff604 	addi	sp,sp,-40
81106c00:	dfc00915 	stw	ra,36(sp)
81106c04:	df000815 	stw	fp,32(sp)
81106c08:	df000804 	addi	fp,sp,32
81106c0c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81106c10:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
81106c14:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
81106c18:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
81106c1c:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
81106c20:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
81106c24:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
81106c28:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81106c2c:	00800084 	movi	r2,2
81106c30:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
81106c34:	00800cc4 	movi	r2,51
81106c38:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
81106c3c:	11069f40 	call	811069f4 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81106c40:	e0bffec3 	ldbu	r2,-5(fp)
81106c44:	1009883a 	mov	r4,r2
81106c48:	1106a440 	call	81106a44 <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81106c4c:	e0bffe83 	ldbu	r2,-6(fp)
81106c50:	1009883a 	mov	r4,r2
81106c54:	1106a440 	call	81106a44 <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81106c58:	1106b000 	call	81106b00 <uc_spi_get_byte>
81106c5c:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
81106c60:	1106b000 	call	81106b00 <uc_spi_get_byte>
81106c64:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81106c68:	1106b000 	call	81106b00 <uc_spi_get_byte>
81106c6c:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
81106c70:	1106b000 	call	81106b00 <uc_spi_get_byte>
81106c74:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81106c78:	1106b000 	call	81106b00 <uc_spi_get_byte>
81106c7c:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
81106c80:	1106b000 	call	81106b00 <uc_spi_get_byte>
81106c84:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
81106c88:	1106bac0 	call	81106bac <v_spi_end>

    bSuccess = TRUE;
81106c8c:	00800044 	movi	r2,1
81106c90:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
81106c94:	e0bfff17 	ldw	r2,-4(fp)
81106c98:	e0fffd03 	ldbu	r3,-12(fp)
81106c9c:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
81106ca0:	e0bfff17 	ldw	r2,-4(fp)
81106ca4:	10800044 	addi	r2,r2,1
81106ca8:	e0fffd43 	ldbu	r3,-11(fp)
81106cac:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
81106cb0:	e0bfff17 	ldw	r2,-4(fp)
81106cb4:	10800084 	addi	r2,r2,2
81106cb8:	e0fffd83 	ldbu	r3,-10(fp)
81106cbc:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81106cc0:	e0bfff17 	ldw	r2,-4(fp)
81106cc4:	108000c4 	addi	r2,r2,3
81106cc8:	e0fffdc3 	ldbu	r3,-9(fp)
81106ccc:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
81106cd0:	e0bfff17 	ldw	r2,-4(fp)
81106cd4:	10800104 	addi	r2,r2,4
81106cd8:	e0fffe03 	ldbu	r3,-8(fp)
81106cdc:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
81106ce0:	e0bfff17 	ldw	r2,-4(fp)
81106ce4:	10800144 	addi	r2,r2,5
81106ce8:	e0fffe43 	ldbu	r3,-7(fp)
81106cec:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
81106cf0:	e1bffd03 	ldbu	r6,-12(fp)
81106cf4:	e1fffd43 	ldbu	r7,-11(fp)
81106cf8:	e0bffd83 	ldbu	r2,-10(fp)
81106cfc:	e0fffdc3 	ldbu	r3,-9(fp)
81106d00:	e13ffe03 	ldbu	r4,-8(fp)
81106d04:	e17ffe43 	ldbu	r5,-7(fp)
81106d08:	d9400315 	stw	r5,12(sp)
81106d0c:	d9000215 	stw	r4,8(sp)
81106d10:	d8c00115 	stw	r3,4(sp)
81106d14:	d8800015 	stw	r2,0(sp)
81106d18:	016044b4 	movhi	r5,33042
81106d1c:	2947cc04 	addi	r5,r5,7984
81106d20:	012044b4 	movhi	r4,33042
81106d24:	21114c04 	addi	r4,r4,17712
81106d28:	110cfc80 	call	8110cfc8 <sprintf>
	debug(fp, cDebugBuffer);
81106d2c:	d0a02717 	ldw	r2,-32612(gp)
81106d30:	016044b4 	movhi	r5,33042
81106d34:	29514c04 	addi	r5,r5,17712
81106d38:	1009883a 	mov	r4,r2
81106d3c:	110b9140 	call	8110b914 <fprintf>
#endif

    return bSuccess;
81106d40:	e0bffc17 	ldw	r2,-16(fp)
}
81106d44:	e037883a 	mov	sp,fp
81106d48:	dfc00117 	ldw	ra,4(sp)
81106d4c:	df000017 	ldw	fp,0(sp)
81106d50:	dec00204 	addi	sp,sp,8
81106d54:	f800283a 	ret

81106d58 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
81106d58:	defffd04 	addi	sp,sp,-12
81106d5c:	df000215 	stw	fp,8(sp)
81106d60:	df000204 	addi	fp,sp,8
81106d64:	2005883a 	mov	r2,r4
81106d68:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
81106d6c:	e0bfff03 	ldbu	r2,-4(fp)
81106d70:	10c00168 	cmpgeui	r3,r2,5
81106d74:	18001c1e 	bne	r3,zero,81106de8 <bSSDisplayConfig+0x90>
81106d78:	100690ba 	slli	r3,r2,2
81106d7c:	00a04434 	movhi	r2,33040
81106d80:	109b6404 	addi	r2,r2,28048
81106d84:	1885883a 	add	r2,r3,r2
81106d88:	10800017 	ldw	r2,0(r2)
81106d8c:	1000683a 	jmp	r2
81106d90:	81106da4 	muli	r4,r16,16822
81106d94:	81106db0 	cmpltui	r4,r16,16822
81106d98:	81106dbc 	xorhi	r4,r16,16822
81106d9c:	81106dd0 	cmplti	r4,r16,16823
81106da0:	81106de0 	cmpeqi	r4,r16,16823
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81106da4:	00800cc4 	movi	r2,51
81106da8:	d0a02405 	stb	r2,-32624(gp)
	    break;
81106dac:	00001006 	br	81106df0 <bSSDisplayConfig+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81106db0:	00801544 	movi	r2,85
81106db4:	d0a02405 	stb	r2,-32624(gp)
	    break;
81106db8:	00000d06 	br	81106df0 <bSSDisplayConfig+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
81106dbc:	d0e02403 	ldbu	r3,-32624(gp)
81106dc0:	00bff744 	movi	r2,-35
81106dc4:	1884703a 	and	r2,r3,r2
81106dc8:	d0a02405 	stb	r2,-32624(gp)
	    break;
81106dcc:	00000806 	br	81106df0 <bSSDisplayConfig+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81106dd0:	d0a02403 	ldbu	r2,-32624(gp)
81106dd4:	10800894 	ori	r2,r2,34
81106dd8:	d0a02405 	stb	r2,-32624(gp)
	    break;
81106ddc:	00000406 	br	81106df0 <bSSDisplayConfig+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81106de0:	d0202405 	stb	zero,-32624(gp)
	    break;
81106de4:	00000206 	br	81106df0 <bSSDisplayConfig+0x98>
		
		default:
		    return FALSE;
81106de8:	0005883a 	mov	r2,zero
81106dec:	00000806 	br	81106e10 <bSSDisplayConfig+0xb8>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
81106df0:	00a00034 	movhi	r2,32768
81106df4:	10828404 	addi	r2,r2,2576
81106df8:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
81106dfc:	d0a02403 	ldbu	r2,-32624(gp)
81106e00:	10c03fcc 	andi	r3,r2,255
81106e04:	e0bffe17 	ldw	r2,-8(fp)
81106e08:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81106e0c:	00800044 	movi	r2,1
}
81106e10:	e037883a 	mov	sp,fp
81106e14:	df000017 	ldw	fp,0(sp)
81106e18:	dec00104 	addi	sp,sp,4
81106e1c:	f800283a 	ret

81106e20 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
81106e20:	defffd04 	addi	sp,sp,-12
81106e24:	df000215 	stw	fp,8(sp)
81106e28:	df000204 	addi	fp,sp,8
81106e2c:	2005883a 	mov	r2,r4
81106e30:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
81106e34:	00a00034 	movhi	r2,32768
81106e38:	10828404 	addi	r2,r2,2576
81106e3c:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81106e40:	e0bffe17 	ldw	r2,-8(fp)
81106e44:	10800104 	addi	r2,r2,4
81106e48:	e0ffff03 	ldbu	r3,-4(fp)
81106e4c:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81106e50:	00800044 	movi	r2,1
}
81106e54:	e037883a 	mov	sp,fp
81106e58:	df000017 	ldw	fp,0(sp)
81106e5c:	dec00104 	addi	sp,sp,4
81106e60:	f800283a 	ret

81106e64 <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
81106e64:	defffd04 	addi	sp,sp,-12
81106e68:	df000215 	stw	fp,8(sp)
81106e6c:	df000204 	addi	fp,sp,8
81106e70:	e13fff15 	stw	r4,-4(fp)
	// Cast pvContext to viHoldContext's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81106e74:	e0bfff17 	ldw	r2,-4(fp)
81106e78:	e0bffe15 	stw	r2,-8(fp)
	// Use pvContext value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vucN += 1;
81106e7c:	d0a02603 	ldbu	r2,-32616(gp)
81106e80:	10800044 	addi	r2,r2,1
81106e84:	d0a02605 	stb	r2,-32616(gp)
}
81106e88:	0001883a 	nop
81106e8c:	e037883a 	mov	sp,fp
81106e90:	df000017 	ldw	fp,0(sp)
81106e94:	dec00104 	addi	sp,sp,4
81106e98:	f800283a 	ret

81106e9c <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
81106e9c:	defffd04 	addi	sp,sp,-12
81106ea0:	dfc00215 	stw	ra,8(sp)
81106ea4:	df000115 	stw	fp,4(sp)
81106ea8:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
81106eac:	d0a02504 	addi	r2,gp,-32620
81106eb0:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
81106eb4:	01a04434 	movhi	r6,33040
81106eb8:	319b9904 	addi	r6,r6,28260
81106ebc:	e17fff17 	ldw	r5,-4(fp)
81106ec0:	01000284 	movi	r4,10
81106ec4:	111bdac0 	call	8111bdac <alt_irq_register>
}
81106ec8:	0001883a 	nop
81106ecc:	e037883a 	mov	sp,fp
81106ed0:	dfc00117 	ldw	ra,4(sp)
81106ed4:	df000017 	ldw	fp,0(sp)
81106ed8:	dec00204 	addi	sp,sp,8
81106edc:	f800283a 	ret

81106ee0 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
81106ee0:	defffc04 	addi	sp,sp,-16
81106ee4:	dfc00315 	stw	ra,12(sp)
81106ee8:	df000215 	stw	fp,8(sp)
81106eec:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81106ef0:	0009883a 	mov	r4,zero
81106ef4:	1107b580 	call	81107b58 <uliSyncReadReg>
81106ef8:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
81106efc:	e0bfff17 	ldw	r2,-4(fp)
81106f00:	1000030e 	bge	r2,zero,81106f10 <bSyncStatusExtnIrq+0x30>
		bResult = TRUE;
81106f04:	00800044 	movi	r2,1
81106f08:	e0bffe15 	stw	r2,-8(fp)
81106f0c:	00000106 	br	81106f14 <bSyncStatusExtnIrq+0x34>
	} else {
		bResult = FALSE;
81106f10:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81106f14:	e0bffe17 	ldw	r2,-8(fp)
}
81106f18:	e037883a 	mov	sp,fp
81106f1c:	dfc00117 	ldw	ra,4(sp)
81106f20:	df000017 	ldw	fp,0(sp)
81106f24:	dec00204 	addi	sp,sp,8
81106f28:	f800283a 	ret

81106f2c <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
81106f2c:	defffc04 	addi	sp,sp,-16
81106f30:	dfc00315 	stw	ra,12(sp)
81106f34:	df000215 	stw	fp,8(sp)
81106f38:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81106f3c:	0009883a 	mov	r4,zero
81106f40:	1107b580 	call	81107b58 <uliSyncReadReg>
81106f44:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
81106f48:	e0bffe17 	ldw	r2,-8(fp)
81106f4c:	10803fec 	andhi	r2,r2,255
81106f50:	1004d43a 	srli	r2,r2,16
81106f54:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81106f58:	e0bfff03 	ldbu	r2,-4(fp)
}
81106f5c:	e037883a 	mov	sp,fp
81106f60:	dfc00117 	ldw	ra,4(sp)
81106f64:	df000017 	ldw	fp,0(sp)
81106f68:	dec00204 	addi	sp,sp,8
81106f6c:	f800283a 	ret

81106f70 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
81106f70:	defffc04 	addi	sp,sp,-16
81106f74:	dfc00315 	stw	ra,12(sp)
81106f78:	df000215 	stw	fp,8(sp)
81106f7c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81106f80:	0009883a 	mov	r4,zero
81106f84:	1107b580 	call	81107b58 <uliSyncReadReg>
81106f88:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
81106f8c:	e0bffe17 	ldw	r2,-8(fp)
81106f90:	10bfc00c 	andi	r2,r2,65280
81106f94:	1004d23a 	srli	r2,r2,8
81106f98:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81106f9c:	e0bfff03 	ldbu	r2,-4(fp)
}
81106fa0:	e037883a 	mov	sp,fp
81106fa4:	dfc00117 	ldw	ra,4(sp)
81106fa8:	df000017 	ldw	fp,0(sp)
81106fac:	dec00204 	addi	sp,sp,8
81106fb0:	f800283a 	ret

81106fb4 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
81106fb4:	defffc04 	addi	sp,sp,-16
81106fb8:	dfc00315 	stw	ra,12(sp)
81106fbc:	df000215 	stw	fp,8(sp)
81106fc0:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81106fc4:	0009883a 	mov	r4,zero
81106fc8:	1107b580 	call	81107b58 <uliSyncReadReg>
81106fcc:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
81106fd0:	e0bffe17 	ldw	r2,-8(fp)
81106fd4:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81106fd8:	e0bfff03 	ldbu	r2,-4(fp)
}
81106fdc:	e037883a 	mov	sp,fp
81106fe0:	dfc00117 	ldw	ra,4(sp)
81106fe4:	df000017 	ldw	fp,0(sp)
81106fe8:	dec00204 	addi	sp,sp,8
81106fec:	f800283a 	ret

81106ff0 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
81106ff0:	defffd04 	addi	sp,sp,-12
81106ff4:	dfc00215 	stw	ra,8(sp)
81106ff8:	df000115 	stw	fp,4(sp)
81106ffc:	df000104 	addi	fp,sp,4
81107000:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
81107004:	e17fff17 	ldw	r5,-4(fp)
81107008:	01000104 	movi	r4,4
8110700c:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107010:	00800044 	movi	r2,1
}
81107014:	e037883a 	mov	sp,fp
81107018:	dfc00117 	ldw	ra,4(sp)
8110701c:	df000017 	ldw	fp,0(sp)
81107020:	dec00204 	addi	sp,sp,8
81107024:	f800283a 	ret

81107028 <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
81107028:	defffd04 	addi	sp,sp,-12
8110702c:	dfc00215 	stw	ra,8(sp)
81107030:	df000115 	stw	fp,4(sp)
81107034:	df000104 	addi	fp,sp,4
81107038:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
8110703c:	e17fff17 	ldw	r5,-4(fp)
81107040:	01000144 	movi	r4,5
81107044:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107048:	00800044 	movi	r2,1
}
8110704c:	e037883a 	mov	sp,fp
81107050:	dfc00117 	ldw	ra,4(sp)
81107054:	df000017 	ldw	fp,0(sp)
81107058:	dec00204 	addi	sp,sp,8
8110705c:	f800283a 	ret

81107060 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
81107060:	defffd04 	addi	sp,sp,-12
81107064:	dfc00215 	stw	ra,8(sp)
81107068:	df000115 	stw	fp,4(sp)
8110706c:	df000104 	addi	fp,sp,4
81107070:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
81107074:	e17fff17 	ldw	r5,-4(fp)
81107078:	01000184 	movi	r4,6
8110707c:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107080:	00800044 	movi	r2,1
}
81107084:	e037883a 	mov	sp,fp
81107088:	dfc00117 	ldw	ra,4(sp)
8110708c:	df000017 	ldw	fp,0(sp)
81107090:	dec00204 	addi	sp,sp,8
81107094:	f800283a 	ret

81107098 <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
81107098:	defffd04 	addi	sp,sp,-12
8110709c:	dfc00215 	stw	ra,8(sp)
811070a0:	df000115 	stw	fp,4(sp)
811070a4:	df000104 	addi	fp,sp,4
811070a8:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
811070ac:	e17fff17 	ldw	r5,-4(fp)
811070b0:	010001c4 	movi	r4,7
811070b4:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
811070b8:	00800044 	movi	r2,1
}
811070bc:	e037883a 	mov	sp,fp
811070c0:	dfc00117 	ldw	ra,4(sp)
811070c4:	df000017 	ldw	fp,0(sp)
811070c8:	dec00204 	addi	sp,sp,8
811070cc:	f800283a 	ret

811070d0 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
811070d0:	defffc04 	addi	sp,sp,-16
811070d4:	dfc00315 	stw	ra,12(sp)
811070d8:	df000215 	stw	fp,8(sp)
811070dc:	df000204 	addi	fp,sp,8
811070e0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
811070e4:	01000204 	movi	r4,8
811070e8:	1107b580 	call	81107b58 <uliSyncReadReg>
811070ec:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811070f0:	e0bfff17 	ldw	r2,-4(fp)
811070f4:	1000051e 	bne	r2,zero,8110710c <bSyncSetPolarity+0x3c>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
811070f8:	e0fffe17 	ldw	r3,-8(fp)
811070fc:	00bfbfc4 	movi	r2,-257
81107100:	1884703a 	and	r2,r3,r2
81107104:	e0bffe15 	stw	r2,-8(fp)
81107108:	00000306 	br	81107118 <bSyncSetPolarity+0x48>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
8110710c:	e0bffe17 	ldw	r2,-8(fp)
81107110:	10804014 	ori	r2,r2,256
81107114:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107118:	e17ffe17 	ldw	r5,-8(fp)
8110711c:	01000204 	movi	r4,8
81107120:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107124:	00800044 	movi	r2,1
}
81107128:	e037883a 	mov	sp,fp
8110712c:	dfc00117 	ldw	ra,4(sp)
81107130:	df000017 	ldw	fp,0(sp)
81107134:	dec00204 	addi	sp,sp,8
81107138:	f800283a 	ret

8110713c <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
8110713c:	defffc04 	addi	sp,sp,-16
81107140:	dfc00315 	stw	ra,12(sp)
81107144:	df000215 	stw	fp,8(sp)
81107148:	df000204 	addi	fp,sp,8
8110714c:	2005883a 	mov	r2,r4
81107150:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107154:	01000204 	movi	r4,8
81107158:	1107b580 	call	81107b58 <uliSyncReadReg>
8110715c:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
81107160:	e0fffe17 	ldw	r3,-8(fp)
81107164:	00bfc004 	movi	r2,-256
81107168:	1884703a 	and	r2,r3,r2
8110716c:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
81107170:	e0bfff03 	ldbu	r2,-4(fp)
81107174:	e0fffe17 	ldw	r3,-8(fp)
81107178:	1884b03a 	or	r2,r3,r2
8110717c:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107180:	e17ffe17 	ldw	r5,-8(fp)
81107184:	01000204 	movi	r4,8
81107188:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
8110718c:	00800044 	movi	r2,1
}
81107190:	e037883a 	mov	sp,fp
81107194:	dfc00117 	ldw	ra,4(sp)
81107198:	df000017 	ldw	fp,0(sp)
8110719c:	dec00204 	addi	sp,sp,8
811071a0:	f800283a 	ret

811071a4 <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
811071a4:	defffd04 	addi	sp,sp,-12
811071a8:	dfc00215 	stw	ra,8(sp)
811071ac:	df000115 	stw	fp,4(sp)
811071b0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
811071b4:	01000104 	movi	r4,4
811071b8:	1107b580 	call	81107b58 <uliSyncReadReg>
811071bc:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
811071c0:	e0bfff17 	ldw	r2,-4(fp)
}
811071c4:	e037883a 	mov	sp,fp
811071c8:	dfc00117 	ldw	ra,4(sp)
811071cc:	df000017 	ldw	fp,0(sp)
811071d0:	dec00204 	addi	sp,sp,8
811071d4:	f800283a 	ret

811071d8 <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
811071d8:	defffd04 	addi	sp,sp,-12
811071dc:	dfc00215 	stw	ra,8(sp)
811071e0:	df000115 	stw	fp,4(sp)
811071e4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
811071e8:	01000144 	movi	r4,5
811071ec:	1107b580 	call	81107b58 <uliSyncReadReg>
811071f0:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
811071f4:	e0bfff17 	ldw	r2,-4(fp)
}
811071f8:	e037883a 	mov	sp,fp
811071fc:	dfc00117 	ldw	ra,4(sp)
81107200:	df000017 	ldw	fp,0(sp)
81107204:	dec00204 	addi	sp,sp,8
81107208:	f800283a 	ret

8110720c <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
8110720c:	defffd04 	addi	sp,sp,-12
81107210:	dfc00215 	stw	ra,8(sp)
81107214:	df000115 	stw	fp,4(sp)
81107218:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
8110721c:	01000184 	movi	r4,6
81107220:	1107b580 	call	81107b58 <uliSyncReadReg>
81107224:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107228:	e0bfff17 	ldw	r2,-4(fp)
}
8110722c:	e037883a 	mov	sp,fp
81107230:	dfc00117 	ldw	ra,4(sp)
81107234:	df000017 	ldw	fp,0(sp)
81107238:	dec00204 	addi	sp,sp,8
8110723c:	f800283a 	ret

81107240 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
81107240:	defffd04 	addi	sp,sp,-12
81107244:	dfc00215 	stw	ra,8(sp)
81107248:	df000115 	stw	fp,4(sp)
8110724c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
81107250:	010001c4 	movi	r4,7
81107254:	1107b580 	call	81107b58 <uliSyncReadReg>
81107258:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
8110725c:	e0bfff17 	ldw	r2,-4(fp)
}
81107260:	e037883a 	mov	sp,fp
81107264:	dfc00117 	ldw	ra,4(sp)
81107268:	df000017 	ldw	fp,0(sp)
8110726c:	dec00204 	addi	sp,sp,8
81107270:	f800283a 	ret

81107274 <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
81107274:	defffd04 	addi	sp,sp,-12
81107278:	dfc00215 	stw	ra,8(sp)
8110727c:	df000115 	stw	fp,4(sp)
81107280:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107284:	01000204 	movi	r4,8
81107288:	1107b580 	call	81107b58 <uliSyncReadReg>
8110728c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107290:	e0bfff17 	ldw	r2,-4(fp)
}
81107294:	e037883a 	mov	sp,fp
81107298:	dfc00117 	ldw	ra,4(sp)
8110729c:	df000017 	ldw	fp,0(sp)
811072a0:	dec00204 	addi	sp,sp,8
811072a4:	f800283a 	ret

811072a8 <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
811072a8:	defffd04 	addi	sp,sp,-12
811072ac:	dfc00215 	stw	ra,8(sp)
811072b0:	df000115 	stw	fp,4(sp)
811072b4:	df000104 	addi	fp,sp,4
811072b8:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
811072bc:	e17fff17 	ldw	r5,-4(fp)
811072c0:	01000244 	movi	r4,9
811072c4:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
811072c8:	00800044 	movi	r2,1
}
811072cc:	e037883a 	mov	sp,fp
811072d0:	dfc00117 	ldw	ra,4(sp)
811072d4:	df000017 	ldw	fp,0(sp)
811072d8:	dec00204 	addi	sp,sp,8
811072dc:	f800283a 	ret

811072e0 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
811072e0:	defffc04 	addi	sp,sp,-16
811072e4:	dfc00315 	stw	ra,12(sp)
811072e8:	df000215 	stw	fp,8(sp)
811072ec:	df000204 	addi	fp,sp,8
811072f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811072f4:	01000284 	movi	r4,10
811072f8:	1107b580 	call	81107b58 <uliSyncReadReg>
811072fc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107300:	e0bfff17 	ldw	r2,-4(fp)
81107304:	1000061e 	bne	r2,zero,81107320 <bSyncCtrExtnIrq+0x40>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
81107308:	e0fffe17 	ldw	r3,-8(fp)
8110730c:	00a00034 	movhi	r2,32768
81107310:	10bfffc4 	addi	r2,r2,-1
81107314:	1884703a 	and	r2,r3,r2
81107318:	e0bffe15 	stw	r2,-8(fp)
8110731c:	00000306 	br	8110732c <bSyncCtrExtnIrq+0x4c>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
81107320:	e0bffe17 	ldw	r2,-8(fp)
81107324:	10a00034 	orhi	r2,r2,32768
81107328:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110732c:	e17ffe17 	ldw	r5,-8(fp)
81107330:	01000284 	movi	r4,10
81107334:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107338:	00800044 	movi	r2,1
}
8110733c:	e037883a 	mov	sp,fp
81107340:	dfc00117 	ldw	ra,4(sp)
81107344:	df000017 	ldw	fp,0(sp)
81107348:	dec00204 	addi	sp,sp,8
8110734c:	f800283a 	ret

81107350 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
81107350:	defffd04 	addi	sp,sp,-12
81107354:	dfc00215 	stw	ra,8(sp)
81107358:	df000115 	stw	fp,4(sp)
8110735c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107360:	01000284 	movi	r4,10
81107364:	1107b580 	call	81107b58 <uliSyncReadReg>
81107368:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
8110736c:	e0bfff17 	ldw	r2,-4(fp)
81107370:	10800234 	orhi	r2,r2,8
81107374:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107378:	e17fff17 	ldw	r5,-4(fp)
8110737c:	01000284 	movi	r4,10
81107380:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107384:	00800044 	movi	r2,1
}
81107388:	e037883a 	mov	sp,fp
8110738c:	dfc00117 	ldw	ra,4(sp)
81107390:	df000017 	ldw	fp,0(sp)
81107394:	dec00204 	addi	sp,sp,8
81107398:	f800283a 	ret

8110739c <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
8110739c:	defffd04 	addi	sp,sp,-12
811073a0:	dfc00215 	stw	ra,8(sp)
811073a4:	df000115 	stw	fp,4(sp)
811073a8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811073ac:	01000284 	movi	r4,10
811073b0:	1107b580 	call	81107b58 <uliSyncReadReg>
811073b4:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
811073b8:	e0bfff17 	ldw	r2,-4(fp)
811073bc:	10800134 	orhi	r2,r2,4
811073c0:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811073c4:	e17fff17 	ldw	r5,-4(fp)
811073c8:	01000284 	movi	r4,10
811073cc:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
811073d0:	00800044 	movi	r2,1
}
811073d4:	e037883a 	mov	sp,fp
811073d8:	dfc00117 	ldw	ra,4(sp)
811073dc:	df000017 	ldw	fp,0(sp)
811073e0:	dec00204 	addi	sp,sp,8
811073e4:	f800283a 	ret

811073e8 <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
811073e8:	defffd04 	addi	sp,sp,-12
811073ec:	dfc00215 	stw	ra,8(sp)
811073f0:	df000115 	stw	fp,4(sp)
811073f4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811073f8:	01000284 	movi	r4,10
811073fc:	1107b580 	call	81107b58 <uliSyncReadReg>
81107400:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
81107404:	e0bfff17 	ldw	r2,-4(fp)
81107408:	108000b4 	orhi	r2,r2,2
8110740c:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107410:	e17fff17 	ldw	r5,-4(fp)
81107414:	01000284 	movi	r4,10
81107418:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
8110741c:	00800044 	movi	r2,1
}
81107420:	e037883a 	mov	sp,fp
81107424:	dfc00117 	ldw	ra,4(sp)
81107428:	df000017 	ldw	fp,0(sp)
8110742c:	dec00204 	addi	sp,sp,8
81107430:	f800283a 	ret

81107434 <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
81107434:	defffd04 	addi	sp,sp,-12
81107438:	dfc00215 	stw	ra,8(sp)
8110743c:	df000115 	stw	fp,4(sp)
81107440:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107444:	01000284 	movi	r4,10
81107448:	1107b580 	call	81107b58 <uliSyncReadReg>
8110744c:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
81107450:	e0bfff17 	ldw	r2,-4(fp)
81107454:	10800074 	orhi	r2,r2,1
81107458:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110745c:	e17fff17 	ldw	r5,-4(fp)
81107460:	01000284 	movi	r4,10
81107464:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107468:	00800044 	movi	r2,1
}
8110746c:	e037883a 	mov	sp,fp
81107470:	dfc00117 	ldw	ra,4(sp)
81107474:	df000017 	ldw	fp,0(sp)
81107478:	dec00204 	addi	sp,sp,8
8110747c:	f800283a 	ret

81107480 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
81107480:	defffc04 	addi	sp,sp,-16
81107484:	dfc00315 	stw	ra,12(sp)
81107488:	df000215 	stw	fp,8(sp)
8110748c:	df000204 	addi	fp,sp,8
81107490:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107494:	01000284 	movi	r4,10
81107498:	1107b580 	call	81107b58 <uliSyncReadReg>
8110749c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811074a0:	e0bfff17 	ldw	r2,-4(fp)
811074a4:	1000051e 	bne	r2,zero,811074bc <bSyncCtrSyncOutEnable+0x3c>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
811074a8:	e0fffe17 	ldw	r3,-8(fp)
811074ac:	00bfbfc4 	movi	r2,-257
811074b0:	1884703a 	and	r2,r3,r2
811074b4:	e0bffe15 	stw	r2,-8(fp)
811074b8:	00000306 	br	811074c8 <bSyncCtrSyncOutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
811074bc:	e0bffe17 	ldw	r2,-8(fp)
811074c0:	10804014 	ori	r2,r2,256
811074c4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811074c8:	e17ffe17 	ldw	r5,-8(fp)
811074cc:	01000284 	movi	r4,10
811074d0:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
811074d4:	00800044 	movi	r2,1
}
811074d8:	e037883a 	mov	sp,fp
811074dc:	dfc00117 	ldw	ra,4(sp)
811074e0:	df000017 	ldw	fp,0(sp)
811074e4:	dec00204 	addi	sp,sp,8
811074e8:	f800283a 	ret

811074ec <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
811074ec:	defffc04 	addi	sp,sp,-16
811074f0:	dfc00315 	stw	ra,12(sp)
811074f4:	df000215 	stw	fp,8(sp)
811074f8:	df000204 	addi	fp,sp,8
811074fc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107500:	01000284 	movi	r4,10
81107504:	1107b580 	call	81107b58 <uliSyncReadReg>
81107508:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110750c:	e0bfff17 	ldw	r2,-4(fp)
81107510:	1000051e 	bne	r2,zero,81107528 <bSyncCtrCh1OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
81107514:	e0fffe17 	ldw	r3,-8(fp)
81107518:	00bfff84 	movi	r2,-2
8110751c:	1884703a 	and	r2,r3,r2
81107520:	e0bffe15 	stw	r2,-8(fp)
81107524:	00000306 	br	81107534 <bSyncCtrCh1OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
81107528:	e0bffe17 	ldw	r2,-8(fp)
8110752c:	10800054 	ori	r2,r2,1
81107530:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107534:	e17ffe17 	ldw	r5,-8(fp)
81107538:	01000284 	movi	r4,10
8110753c:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107540:	00800044 	movi	r2,1
}
81107544:	e037883a 	mov	sp,fp
81107548:	dfc00117 	ldw	ra,4(sp)
8110754c:	df000017 	ldw	fp,0(sp)
81107550:	dec00204 	addi	sp,sp,8
81107554:	f800283a 	ret

81107558 <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
81107558:	defffc04 	addi	sp,sp,-16
8110755c:	dfc00315 	stw	ra,12(sp)
81107560:	df000215 	stw	fp,8(sp)
81107564:	df000204 	addi	fp,sp,8
81107568:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110756c:	01000284 	movi	r4,10
81107570:	1107b580 	call	81107b58 <uliSyncReadReg>
81107574:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107578:	e0bfff17 	ldw	r2,-4(fp)
8110757c:	1000051e 	bne	r2,zero,81107594 <bSyncCtrCh2OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
81107580:	e0fffe17 	ldw	r3,-8(fp)
81107584:	00bfff44 	movi	r2,-3
81107588:	1884703a 	and	r2,r3,r2
8110758c:	e0bffe15 	stw	r2,-8(fp)
81107590:	00000306 	br	811075a0 <bSyncCtrCh2OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
81107594:	e0bffe17 	ldw	r2,-8(fp)
81107598:	10800094 	ori	r2,r2,2
8110759c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811075a0:	e17ffe17 	ldw	r5,-8(fp)
811075a4:	01000284 	movi	r4,10
811075a8:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
811075ac:	00800044 	movi	r2,1
}
811075b0:	e037883a 	mov	sp,fp
811075b4:	dfc00117 	ldw	ra,4(sp)
811075b8:	df000017 	ldw	fp,0(sp)
811075bc:	dec00204 	addi	sp,sp,8
811075c0:	f800283a 	ret

811075c4 <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
811075c4:	defffc04 	addi	sp,sp,-16
811075c8:	dfc00315 	stw	ra,12(sp)
811075cc:	df000215 	stw	fp,8(sp)
811075d0:	df000204 	addi	fp,sp,8
811075d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811075d8:	01000284 	movi	r4,10
811075dc:	1107b580 	call	81107b58 <uliSyncReadReg>
811075e0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811075e4:	e0bfff17 	ldw	r2,-4(fp)
811075e8:	1000051e 	bne	r2,zero,81107600 <bSyncCtrCh3OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
811075ec:	e0fffe17 	ldw	r3,-8(fp)
811075f0:	00bffec4 	movi	r2,-5
811075f4:	1884703a 	and	r2,r3,r2
811075f8:	e0bffe15 	stw	r2,-8(fp)
811075fc:	00000306 	br	8110760c <bSyncCtrCh3OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
81107600:	e0bffe17 	ldw	r2,-8(fp)
81107604:	10800114 	ori	r2,r2,4
81107608:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110760c:	e17ffe17 	ldw	r5,-8(fp)
81107610:	01000284 	movi	r4,10
81107614:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107618:	00800044 	movi	r2,1
}
8110761c:	e037883a 	mov	sp,fp
81107620:	dfc00117 	ldw	ra,4(sp)
81107624:	df000017 	ldw	fp,0(sp)
81107628:	dec00204 	addi	sp,sp,8
8110762c:	f800283a 	ret

81107630 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
81107630:	defffc04 	addi	sp,sp,-16
81107634:	dfc00315 	stw	ra,12(sp)
81107638:	df000215 	stw	fp,8(sp)
8110763c:	df000204 	addi	fp,sp,8
81107640:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107644:	01000284 	movi	r4,10
81107648:	1107b580 	call	81107b58 <uliSyncReadReg>
8110764c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107650:	e0bfff17 	ldw	r2,-4(fp)
81107654:	1000051e 	bne	r2,zero,8110766c <bSyncCtrCh4OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
81107658:	e0fffe17 	ldw	r3,-8(fp)
8110765c:	00bffdc4 	movi	r2,-9
81107660:	1884703a 	and	r2,r3,r2
81107664:	e0bffe15 	stw	r2,-8(fp)
81107668:	00000306 	br	81107678 <bSyncCtrCh4OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
8110766c:	e0bffe17 	ldw	r2,-8(fp)
81107670:	10800214 	ori	r2,r2,8
81107674:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107678:	e17ffe17 	ldw	r5,-8(fp)
8110767c:	01000284 	movi	r4,10
81107680:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107684:	00800044 	movi	r2,1
}
81107688:	e037883a 	mov	sp,fp
8110768c:	dfc00117 	ldw	ra,4(sp)
81107690:	df000017 	ldw	fp,0(sp)
81107694:	dec00204 	addi	sp,sp,8
81107698:	f800283a 	ret

8110769c <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
8110769c:	defffc04 	addi	sp,sp,-16
811076a0:	dfc00315 	stw	ra,12(sp)
811076a4:	df000215 	stw	fp,8(sp)
811076a8:	df000204 	addi	fp,sp,8
811076ac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811076b0:	01000284 	movi	r4,10
811076b4:	1107b580 	call	81107b58 <uliSyncReadReg>
811076b8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811076bc:	e0bfff17 	ldw	r2,-4(fp)
811076c0:	1000051e 	bne	r2,zero,811076d8 <bSyncCtrCh5OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
811076c4:	e0fffe17 	ldw	r3,-8(fp)
811076c8:	00bffbc4 	movi	r2,-17
811076cc:	1884703a 	and	r2,r3,r2
811076d0:	e0bffe15 	stw	r2,-8(fp)
811076d4:	00000306 	br	811076e4 <bSyncCtrCh5OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
811076d8:	e0bffe17 	ldw	r2,-8(fp)
811076dc:	10800414 	ori	r2,r2,16
811076e0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811076e4:	e17ffe17 	ldw	r5,-8(fp)
811076e8:	01000284 	movi	r4,10
811076ec:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
811076f0:	00800044 	movi	r2,1
}
811076f4:	e037883a 	mov	sp,fp
811076f8:	dfc00117 	ldw	ra,4(sp)
811076fc:	df000017 	ldw	fp,0(sp)
81107700:	dec00204 	addi	sp,sp,8
81107704:	f800283a 	ret

81107708 <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
81107708:	defffc04 	addi	sp,sp,-16
8110770c:	dfc00315 	stw	ra,12(sp)
81107710:	df000215 	stw	fp,8(sp)
81107714:	df000204 	addi	fp,sp,8
81107718:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110771c:	01000284 	movi	r4,10
81107720:	1107b580 	call	81107b58 <uliSyncReadReg>
81107724:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107728:	e0bfff17 	ldw	r2,-4(fp)
8110772c:	1000051e 	bne	r2,zero,81107744 <bSyncCtrCh6OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
81107730:	e0fffe17 	ldw	r3,-8(fp)
81107734:	00bff7c4 	movi	r2,-33
81107738:	1884703a 	and	r2,r3,r2
8110773c:	e0bffe15 	stw	r2,-8(fp)
81107740:	00000306 	br	81107750 <bSyncCtrCh6OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
81107744:	e0bffe17 	ldw	r2,-8(fp)
81107748:	10800814 	ori	r2,r2,32
8110774c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107750:	e17ffe17 	ldw	r5,-8(fp)
81107754:	01000284 	movi	r4,10
81107758:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
8110775c:	00800044 	movi	r2,1
}
81107760:	e037883a 	mov	sp,fp
81107764:	dfc00117 	ldw	ra,4(sp)
81107768:	df000017 	ldw	fp,0(sp)
8110776c:	dec00204 	addi	sp,sp,8
81107770:	f800283a 	ret

81107774 <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
81107774:	defffc04 	addi	sp,sp,-16
81107778:	dfc00315 	stw	ra,12(sp)
8110777c:	df000215 	stw	fp,8(sp)
81107780:	df000204 	addi	fp,sp,8
81107784:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107788:	01000284 	movi	r4,10
8110778c:	1107b580 	call	81107b58 <uliSyncReadReg>
81107790:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107794:	e0bfff17 	ldw	r2,-4(fp)
81107798:	1000051e 	bne	r2,zero,811077b0 <bSyncCtrCh7OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
8110779c:	e0fffe17 	ldw	r3,-8(fp)
811077a0:	00bfefc4 	movi	r2,-65
811077a4:	1884703a 	and	r2,r3,r2
811077a8:	e0bffe15 	stw	r2,-8(fp)
811077ac:	00000306 	br	811077bc <bSyncCtrCh7OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
811077b0:	e0bffe17 	ldw	r2,-8(fp)
811077b4:	10801014 	ori	r2,r2,64
811077b8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811077bc:	e17ffe17 	ldw	r5,-8(fp)
811077c0:	01000284 	movi	r4,10
811077c4:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
811077c8:	00800044 	movi	r2,1
}
811077cc:	e037883a 	mov	sp,fp
811077d0:	dfc00117 	ldw	ra,4(sp)
811077d4:	df000017 	ldw	fp,0(sp)
811077d8:	dec00204 	addi	sp,sp,8
811077dc:	f800283a 	ret

811077e0 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
811077e0:	defffc04 	addi	sp,sp,-16
811077e4:	dfc00315 	stw	ra,12(sp)
811077e8:	df000215 	stw	fp,8(sp)
811077ec:	df000204 	addi	fp,sp,8
811077f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811077f4:	01000284 	movi	r4,10
811077f8:	1107b580 	call	81107b58 <uliSyncReadReg>
811077fc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107800:	e0bfff17 	ldw	r2,-4(fp)
81107804:	1000051e 	bne	r2,zero,8110781c <bSyncCtrCh8OutEnable+0x3c>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
81107808:	e0fffe17 	ldw	r3,-8(fp)
8110780c:	00bfdfc4 	movi	r2,-129
81107810:	1884703a 	and	r2,r3,r2
81107814:	e0bffe15 	stw	r2,-8(fp)
81107818:	00000306 	br	81107828 <bSyncCtrCh8OutEnable+0x48>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
8110781c:	e0bffe17 	ldw	r2,-8(fp)
81107820:	10802014 	ori	r2,r2,128
81107824:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107828:	e17ffe17 	ldw	r5,-8(fp)
8110782c:	01000284 	movi	r4,10
81107830:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107834:	00800044 	movi	r2,1
}
81107838:	e037883a 	mov	sp,fp
8110783c:	dfc00117 	ldw	ra,4(sp)
81107840:	df000017 	ldw	fp,0(sp)
81107844:	dec00204 	addi	sp,sp,8
81107848:	f800283a 	ret

8110784c <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
8110784c:	defffc04 	addi	sp,sp,-16
81107850:	dfc00315 	stw	ra,12(sp)
81107854:	df000215 	stw	fp,8(sp)
81107858:	df000204 	addi	fp,sp,8
8110785c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
81107860:	01000044 	movi	r4,1
81107864:	1107b580 	call	81107b58 <uliSyncReadReg>
81107868:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110786c:	e0bfff17 	ldw	r2,-4(fp)
81107870:	1000051e 	bne	r2,zero,81107888 <bSyncIrqEnableError+0x3c>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
81107874:	e0fffe17 	ldw	r3,-8(fp)
81107878:	00bfff44 	movi	r2,-3
8110787c:	1884703a 	and	r2,r3,r2
81107880:	e0bffe15 	stw	r2,-8(fp)
81107884:	00000306 	br	81107894 <bSyncIrqEnableError+0x48>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
81107888:	e0bffe17 	ldw	r2,-8(fp)
8110788c:	10800094 	ori	r2,r2,2
81107890:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81107894:	e17ffe17 	ldw	r5,-8(fp)
81107898:	01000044 	movi	r4,1
8110789c:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
811078a0:	00800044 	movi	r2,1
}
811078a4:	e037883a 	mov	sp,fp
811078a8:	dfc00117 	ldw	ra,4(sp)
811078ac:	df000017 	ldw	fp,0(sp)
811078b0:	dec00204 	addi	sp,sp,8
811078b4:	f800283a 	ret

811078b8 <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
811078b8:	defffc04 	addi	sp,sp,-16
811078bc:	dfc00315 	stw	ra,12(sp)
811078c0:	df000215 	stw	fp,8(sp)
811078c4:	df000204 	addi	fp,sp,8
811078c8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
811078cc:	01000044 	movi	r4,1
811078d0:	1107b580 	call	81107b58 <uliSyncReadReg>
811078d4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811078d8:	e0bfff17 	ldw	r2,-4(fp)
811078dc:	1000051e 	bne	r2,zero,811078f4 <bSyncIrqEnableBlank+0x3c>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
811078e0:	e0fffe17 	ldw	r3,-8(fp)
811078e4:	00bfff84 	movi	r2,-2
811078e8:	1884703a 	and	r2,r3,r2
811078ec:	e0bffe15 	stw	r2,-8(fp)
811078f0:	00000306 	br	81107900 <bSyncIrqEnableBlank+0x48>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
811078f4:	e0bffe17 	ldw	r2,-8(fp)
811078f8:	10800054 	ori	r2,r2,1
811078fc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81107900:	e17ffe17 	ldw	r5,-8(fp)
81107904:	01000044 	movi	r4,1
81107908:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
8110790c:	00800044 	movi	r2,1
}
81107910:	e037883a 	mov	sp,fp
81107914:	dfc00117 	ldw	ra,4(sp)
81107918:	df000017 	ldw	fp,0(sp)
8110791c:	dec00204 	addi	sp,sp,8
81107920:	f800283a 	ret

81107924 <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
81107924:	defffc04 	addi	sp,sp,-16
81107928:	dfc00315 	stw	ra,12(sp)
8110792c:	df000215 	stw	fp,8(sp)
81107930:	df000204 	addi	fp,sp,8
81107934:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
81107938:	01000084 	movi	r4,2
8110793c:	1107b580 	call	81107b58 <uliSyncReadReg>
81107940:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107944:	e0bfff17 	ldw	r2,-4(fp)
81107948:	1000051e 	bne	r2,zero,81107960 <bSyncIrqFlagClrError+0x3c>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
8110794c:	e0fffe17 	ldw	r3,-8(fp)
81107950:	00bfff44 	movi	r2,-3
81107954:	1884703a 	and	r2,r3,r2
81107958:	e0bffe15 	stw	r2,-8(fp)
8110795c:	00000306 	br	8110796c <bSyncIrqFlagClrError+0x48>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
81107960:	e0bffe17 	ldw	r2,-8(fp)
81107964:	10800094 	ori	r2,r2,2
81107968:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
8110796c:	e17ffe17 	ldw	r5,-8(fp)
81107970:	01000084 	movi	r4,2
81107974:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
81107978:	00800044 	movi	r2,1
}
8110797c:	e037883a 	mov	sp,fp
81107980:	dfc00117 	ldw	ra,4(sp)
81107984:	df000017 	ldw	fp,0(sp)
81107988:	dec00204 	addi	sp,sp,8
8110798c:	f800283a 	ret

81107990 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
81107990:	defffc04 	addi	sp,sp,-16
81107994:	dfc00315 	stw	ra,12(sp)
81107998:	df000215 	stw	fp,8(sp)
8110799c:	df000204 	addi	fp,sp,8
811079a0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
811079a4:	01000084 	movi	r4,2
811079a8:	1107b580 	call	81107b58 <uliSyncReadReg>
811079ac:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811079b0:	e0bfff17 	ldw	r2,-4(fp)
811079b4:	1000051e 	bne	r2,zero,811079cc <bSyncIrqFlagClrBlank+0x3c>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811079b8:	e0fffe17 	ldw	r3,-8(fp)
811079bc:	00bfff84 	movi	r2,-2
811079c0:	1884703a 	and	r2,r3,r2
811079c4:	e0bffe15 	stw	r2,-8(fp)
811079c8:	00000306 	br	811079d8 <bSyncIrqFlagClrBlank+0x48>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811079cc:	e0bffe17 	ldw	r2,-8(fp)
811079d0:	10800054 	ori	r2,r2,1
811079d4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
811079d8:	e17ffe17 	ldw	r5,-8(fp)
811079dc:	01000084 	movi	r4,2
811079e0:	1107b040 	call	81107b04 <bSyncWriteReg>
	return TRUE;
811079e4:	00800044 	movi	r2,1
}
811079e8:	e037883a 	mov	sp,fp
811079ec:	dfc00117 	ldw	ra,4(sp)
811079f0:	df000017 	ldw	fp,0(sp)
811079f4:	dec00204 	addi	sp,sp,8
811079f8:	f800283a 	ret

811079fc <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
811079fc:	defffc04 	addi	sp,sp,-16
81107a00:	dfc00315 	stw	ra,12(sp)
81107a04:	df000215 	stw	fp,8(sp)
81107a08:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
81107a0c:	010000c4 	movi	r4,3
81107a10:	1107b580 	call	81107b58 <uliSyncReadReg>
81107a14:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
81107a18:	e0bfff17 	ldw	r2,-4(fp)
81107a1c:	1080008c 	andi	r2,r2,2
81107a20:	10000326 	beq	r2,zero,81107a30 <bSyncIrqFlagError+0x34>
		bResult = TRUE;
81107a24:	00800044 	movi	r2,1
81107a28:	e0bffe15 	stw	r2,-8(fp)
81107a2c:	00000106 	br	81107a34 <bSyncIrqFlagError+0x38>
	} else {
		bResult = FALSE;
81107a30:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107a34:	e0bffe17 	ldw	r2,-8(fp)
}
81107a38:	e037883a 	mov	sp,fp
81107a3c:	dfc00117 	ldw	ra,4(sp)
81107a40:	df000017 	ldw	fp,0(sp)
81107a44:	dec00204 	addi	sp,sp,8
81107a48:	f800283a 	ret

81107a4c <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
81107a4c:	defffc04 	addi	sp,sp,-16
81107a50:	dfc00315 	stw	ra,12(sp)
81107a54:	df000215 	stw	fp,8(sp)
81107a58:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
81107a5c:	010000c4 	movi	r4,3
81107a60:	1107b580 	call	81107b58 <uliSyncReadReg>
81107a64:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
81107a68:	e0bfff17 	ldw	r2,-4(fp)
81107a6c:	1080004c 	andi	r2,r2,1
81107a70:	10000326 	beq	r2,zero,81107a80 <bSyncIrqFlagBlank+0x34>
		bResult = TRUE;
81107a74:	00800044 	movi	r2,1
81107a78:	e0bffe15 	stw	r2,-8(fp)
81107a7c:	00000106 	br	81107a84 <bSyncIrqFlagBlank+0x38>
	} else {
		bResult = FALSE;
81107a80:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107a84:	e0bffe17 	ldw	r2,-8(fp)
}
81107a88:	e037883a 	mov	sp,fp
81107a8c:	dfc00117 	ldw	ra,4(sp)
81107a90:	df000017 	ldw	fp,0(sp)
81107a94:	dec00204 	addi	sp,sp,8
81107a98:	f800283a 	ret

81107a9c <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
81107a9c:	defffd04 	addi	sp,sp,-12
81107aa0:	dfc00215 	stw	ra,8(sp)
81107aa4:	df000115 	stw	fp,4(sp)
81107aa8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107aac:	01000284 	movi	r4,10
81107ab0:	1107b580 	call	81107b58 <uliSyncReadReg>
81107ab4:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107ab8:	e0bfff17 	ldw	r2,-4(fp)
}
81107abc:	e037883a 	mov	sp,fp
81107ac0:	dfc00117 	ldw	ra,4(sp)
81107ac4:	df000017 	ldw	fp,0(sp)
81107ac8:	dec00204 	addi	sp,sp,8
81107acc:	f800283a 	ret

81107ad0 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
81107ad0:	defffd04 	addi	sp,sp,-12
81107ad4:	dfc00215 	stw	ra,8(sp)
81107ad8:	df000115 	stw	fp,4(sp)
81107adc:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107ae0:	0009883a 	mov	r4,zero
81107ae4:	1107b580 	call	81107b58 <uliSyncReadReg>
81107ae8:	e0bfff15 	stw	r2,-4(fp)
	return aux;
81107aec:	e0bfff17 	ldw	r2,-4(fp)
}
81107af0:	e037883a 	mov	sp,fp
81107af4:	dfc00117 	ldw	ra,4(sp)
81107af8:	df000017 	ldw	fp,0(sp)
81107afc:	dec00204 	addi	sp,sp,8
81107b00:	f800283a 	ret

81107b04 <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
static bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
81107b04:	defffc04 	addi	sp,sp,-16
81107b08:	df000315 	stw	fp,12(sp)
81107b0c:	df000304 	addi	fp,sp,12
81107b10:	e13ffe15 	stw	r4,-8(fp)
81107b14:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81107b18:	00a00034 	movhi	r2,32768
81107b1c:	10810004 	addi	r2,r2,1024
81107b20:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
81107b24:	e0bffe17 	ldw	r2,-8(fp)
81107b28:	1085883a 	add	r2,r2,r2
81107b2c:	1085883a 	add	r2,r2,r2
81107b30:	1007883a 	mov	r3,r2
81107b34:	e0bffd17 	ldw	r2,-12(fp)
81107b38:	10c5883a 	add	r2,r2,r3
81107b3c:	e0ffff17 	ldw	r3,-4(fp)
81107b40:	10c00015 	stw	r3,0(r2)
	return TRUE;
81107b44:	00800044 	movi	r2,1
}
81107b48:	e037883a 	mov	sp,fp
81107b4c:	df000017 	ldw	fp,0(sp)
81107b50:	dec00104 	addi	sp,sp,4
81107b54:	f800283a 	ret

81107b58 <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
static alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
81107b58:	defffc04 	addi	sp,sp,-16
81107b5c:	df000315 	stw	fp,12(sp)
81107b60:	df000304 	addi	fp,sp,12
81107b64:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81107b68:	00a00034 	movhi	r2,32768
81107b6c:	10810004 	addi	r2,r2,1024
81107b70:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
81107b74:	e0bfff17 	ldw	r2,-4(fp)
81107b78:	1085883a 	add	r2,r2,r2
81107b7c:	1085883a 	add	r2,r2,r2
81107b80:	1007883a 	mov	r3,r2
81107b84:	e0bffd17 	ldw	r2,-12(fp)
81107b88:	10c5883a 	add	r2,r2,r3
81107b8c:	10800017 	ldw	r2,0(r2)
81107b90:	e0bffe15 	stw	r2,-8(fp)
	return value;
81107b94:	e0bffe17 	ldw	r2,-8(fp)
}
81107b98:	e037883a 	mov	sp,fp
81107b9c:	df000017 	ldw	fp,0(sp)
81107ba0:	dec00104 	addi	sp,sp,4
81107ba4:	f800283a 	ret

81107ba8 <main>:
TCommChannel xComm5;
TCommChannel xComm6;
TCommChannel xComm7;
TCommChannel xComm8;

int main(void) {
81107ba8:	defff804 	addi	sp,sp,-32
81107bac:	dfc00715 	stw	ra,28(sp)
81107bb0:	df000615 	stw	fp,24(sp)
81107bb4:	df000604 	addi	fp,sp,24

	/* Debug device initialization - JTAG USB */
#ifdef DEBUG_ON
	fp = fopen(JTAG_UART_0_NAME, "r+");
81107bb8:	016044b4 	movhi	r5,33042
81107bbc:	2947db04 	addi	r5,r5,8044
81107bc0:	012044b4 	movhi	r4,33042
81107bc4:	2107dc04 	addi	r4,r4,8048
81107bc8:	110b8d40 	call	8110b8d4 <fopen>
81107bcc:	d0a02715 	stw	r2,-32612(gp)
#endif

//	vRstcHoldDeviceReset(RSTC_DEV_ALL_MSK);
//	usleep(5000);
	vRstcReleaseDeviceReset(RSTC_DEV_ALL_MSK);
81107bd0:	0101ffc4 	movi	r4,2047
81107bd4:	110688c0 	call	8110688c <vRstcReleaseDeviceReset>
	usleep(5000);
81107bd8:	0104e204 	movi	r4,5000
81107bdc:	111c8240 	call	8111c824 <usleep>
	usleep(1000000);
81107be0:	010003f4 	movhi	r4,15
81107be4:	21109004 	addi	r4,r4,16960
81107be8:	111c8240 	call	8111c824 <usleep>

	bDisableIsoDrivers();
81107bec:	1104f880 	call	81104f88 <bDisableIsoDrivers>
	bDisableLvdsBoard();
81107bf0:	1104ff00 	call	81104ff0 <bDisableLvdsBoard>

	usleep(50000);
81107bf4:	0130d414 	movui	r4,50000
81107bf8:	111c8240 	call	8111c824 <usleep>

	bEnableIsoDrivers();
81107bfc:	1104f540 	call	81104f54 <bEnableIsoDrivers>
	bEnableLvdsBoard();
81107c00:	1104fbc0 	call	81104fbc <bEnableLvdsBoard>

	alt_8 ucTempFpga = 0;
81107c04:	e03fff05 	stb	zero,-4(fp)
	alt_8 ucTempBoard = 0;
81107c08:	e03fff45 	stb	zero,-3(fp)

#ifdef DEBUG_ON
	debug(fp, "\n Nucleo de Sistemas Eletronicos Embarcados - MebX\n\n");
81107c0c:	d0a02717 	ldw	r2,-32612(gp)
81107c10:	100f883a 	mov	r7,r2
81107c14:	01800d04 	movi	r6,52
81107c18:	01400044 	movi	r5,1
81107c1c:	012044b4 	movhi	r4,33042
81107c20:	2107e104 	addi	r4,r4,8068
81107c24:	110bee00 	call	8110bee0 <fwrite>
#endif

	//Configura Display de 7 segmentos
	bSSDisplayConfig(SSDP_NORMAL_MODE);
81107c28:	0009883a 	mov	r4,zero
81107c2c:	1106d580 	call	81106d58 <bSSDisplayConfig>

	bSpwcInitCh(&xComm1.xSpacewire, eCommSpwCh1);
81107c30:	01400044 	movi	r5,1
81107c34:	012044b4 	movhi	r4,33042
81107c38:	2112e004 	addi	r4,r4,19328
81107c3c:	1104d500 	call	81104d50 <bSpwcInitCh>
	bSpwcInitCh(&xComm2.xSpacewire, eCommSpwCh2);
81107c40:	01400084 	movi	r5,2
81107c44:	012044b4 	movhi	r4,33042
81107c48:	21134004 	addi	r4,r4,19712
81107c4c:	1104d500 	call	81104d50 <bSpwcInitCh>
	bSpwcInitCh(&xComm3.xSpacewire, eCommSpwCh3);
81107c50:	014000c4 	movi	r5,3
81107c54:	012044b4 	movhi	r4,33042
81107c58:	21146004 	addi	r4,r4,20864
81107c5c:	1104d500 	call	81104d50 <bSpwcInitCh>
	bSpwcInitCh(&xComm4.xSpacewire, eCommSpwCh4);
81107c60:	01400104 	movi	r5,4
81107c64:	012044b4 	movhi	r4,33042
81107c68:	21158004 	addi	r4,r4,22016
81107c6c:	1104d500 	call	81104d50 <bSpwcInitCh>
	bSpwcInitCh(&xComm5.xSpacewire, eCommSpwCh5);
81107c70:	01400144 	movi	r5,5
81107c74:	012044b4 	movhi	r4,33042
81107c78:	21140004 	addi	r4,r4,20480
81107c7c:	1104d500 	call	81104d50 <bSpwcInitCh>
	bSpwcInitCh(&xComm6.xSpacewire, eCommSpwCh6);
81107c80:	01400184 	movi	r5,6
81107c84:	012044b4 	movhi	r4,33042
81107c88:	2113a004 	addi	r4,r4,20096
81107c8c:	1104d500 	call	81104d50 <bSpwcInitCh>
	bSpwcInitCh(&xComm7.xSpacewire, eCommSpwCh7);
81107c90:	014001c4 	movi	r5,7
81107c94:	012044b4 	movhi	r4,33042
81107c98:	2114c004 	addi	r4,r4,21248
81107c9c:	1104d500 	call	81104d50 <bSpwcInitCh>
	bSpwcInitCh(&xComm8.xSpacewire, eCommSpwCh8);
81107ca0:	01400204 	movi	r5,8
81107ca4:	012044b4 	movhi	r4,33042
81107ca8:	21152004 	addi	r4,r4,21632
81107cac:	1104d500 	call	81104d50 <bSpwcInitCh>
//	printf("int_cnt: %u \n", int_cnt);
//
//	xComm1.xIrqControl.bRightBufferEmptyEn = FALSE;
//	bFeebSetIrqControl(&xComm1);

	xComm1.xSpacewire.xLinkConfig.bAutostart = FALSE;
81107cb0:	00a044b4 	movhi	r2,33042
81107cb4:	10928c04 	addi	r2,r2,18992
81107cb8:	10005515 	stw	zero,340(r2)
	xComm1.xSpacewire.xLinkConfig.bStart = FALSE;
81107cbc:	00a044b4 	movhi	r2,33042
81107cc0:	10928c04 	addi	r2,r2,18992
81107cc4:	10005615 	stw	zero,344(r2)
	xComm1.xSpacewire.xLinkConfig.bDisconnect = TRUE;
81107cc8:	00a044b4 	movhi	r2,33042
81107ccc:	10928c04 	addi	r2,r2,18992
81107cd0:	00c00044 	movi	r3,1
81107cd4:	10c05715 	stw	r3,348(r2)
	xComm2.xSpacewire.xLinkConfig.bAutostart = FALSE;
81107cd8:	00a044b4 	movhi	r2,33042
81107cdc:	1092ec04 	addi	r2,r2,19376
81107ce0:	10005515 	stw	zero,340(r2)
	xComm2.xSpacewire.xLinkConfig.bStart = FALSE;
81107ce4:	00a044b4 	movhi	r2,33042
81107ce8:	1092ec04 	addi	r2,r2,19376
81107cec:	10005615 	stw	zero,344(r2)
	xComm2.xSpacewire.xLinkConfig.bDisconnect = TRUE;
81107cf0:	00a044b4 	movhi	r2,33042
81107cf4:	1092ec04 	addi	r2,r2,19376
81107cf8:	00c00044 	movi	r3,1
81107cfc:	10c05715 	stw	r3,348(r2)
	xComm3.xSpacewire.xLinkConfig.bAutostart = FALSE;
81107d00:	00a044b4 	movhi	r2,33042
81107d04:	10940c04 	addi	r2,r2,20528
81107d08:	10005515 	stw	zero,340(r2)
	xComm3.xSpacewire.xLinkConfig.bStart = FALSE;
81107d0c:	00a044b4 	movhi	r2,33042
81107d10:	10940c04 	addi	r2,r2,20528
81107d14:	10005615 	stw	zero,344(r2)
	xComm3.xSpacewire.xLinkConfig.bDisconnect = TRUE;
81107d18:	00a044b4 	movhi	r2,33042
81107d1c:	10940c04 	addi	r2,r2,20528
81107d20:	00c00044 	movi	r3,1
81107d24:	10c05715 	stw	r3,348(r2)
	xComm4.xSpacewire.xLinkConfig.bAutostart = FALSE;
81107d28:	00a044b4 	movhi	r2,33042
81107d2c:	10952c04 	addi	r2,r2,21680
81107d30:	10005515 	stw	zero,340(r2)
	xComm4.xSpacewire.xLinkConfig.bStart = FALSE;
81107d34:	00a044b4 	movhi	r2,33042
81107d38:	10952c04 	addi	r2,r2,21680
81107d3c:	10005615 	stw	zero,344(r2)
	xComm4.xSpacewire.xLinkConfig.bDisconnect = TRUE;
81107d40:	00a044b4 	movhi	r2,33042
81107d44:	10952c04 	addi	r2,r2,21680
81107d48:	00c00044 	movi	r3,1
81107d4c:	10c05715 	stw	r3,348(r2)
	xComm5.xSpacewire.xLinkConfig.bAutostart = FALSE;
81107d50:	00a044b4 	movhi	r2,33042
81107d54:	1093ac04 	addi	r2,r2,20144
81107d58:	10005515 	stw	zero,340(r2)
	xComm5.xSpacewire.xLinkConfig.bStart = FALSE;
81107d5c:	00a044b4 	movhi	r2,33042
81107d60:	1093ac04 	addi	r2,r2,20144
81107d64:	10005615 	stw	zero,344(r2)
	xComm5.xSpacewire.xLinkConfig.bDisconnect = TRUE;
81107d68:	00a044b4 	movhi	r2,33042
81107d6c:	1093ac04 	addi	r2,r2,20144
81107d70:	00c00044 	movi	r3,1
81107d74:	10c05715 	stw	r3,348(r2)
	xComm6.xSpacewire.xLinkConfig.bAutostart = FALSE;
81107d78:	00a044b4 	movhi	r2,33042
81107d7c:	10934c04 	addi	r2,r2,19760
81107d80:	10005515 	stw	zero,340(r2)
	xComm6.xSpacewire.xLinkConfig.bStart = FALSE;
81107d84:	00a044b4 	movhi	r2,33042
81107d88:	10934c04 	addi	r2,r2,19760
81107d8c:	10005615 	stw	zero,344(r2)
	xComm6.xSpacewire.xLinkConfig.bDisconnect = TRUE;
81107d90:	00a044b4 	movhi	r2,33042
81107d94:	10934c04 	addi	r2,r2,19760
81107d98:	00c00044 	movi	r3,1
81107d9c:	10c05715 	stw	r3,348(r2)
	xComm7.xSpacewire.xLinkConfig.bAutostart = FALSE;
81107da0:	00a044b4 	movhi	r2,33042
81107da4:	10946c04 	addi	r2,r2,20912
81107da8:	10005515 	stw	zero,340(r2)
	xComm7.xSpacewire.xLinkConfig.bStart = FALSE;
81107dac:	00a044b4 	movhi	r2,33042
81107db0:	10946c04 	addi	r2,r2,20912
81107db4:	10005615 	stw	zero,344(r2)
	xComm7.xSpacewire.xLinkConfig.bDisconnect = TRUE;
81107db8:	00a044b4 	movhi	r2,33042
81107dbc:	10946c04 	addi	r2,r2,20912
81107dc0:	00c00044 	movi	r3,1
81107dc4:	10c05715 	stw	r3,348(r2)
	xComm8.xSpacewire.xLinkConfig.bAutostart = FALSE;
81107dc8:	00a044b4 	movhi	r2,33042
81107dcc:	1094cc04 	addi	r2,r2,21296
81107dd0:	10005515 	stw	zero,340(r2)
	xComm8.xSpacewire.xLinkConfig.bStart = FALSE;
81107dd4:	00a044b4 	movhi	r2,33042
81107dd8:	1094cc04 	addi	r2,r2,21296
81107ddc:	10005615 	stw	zero,344(r2)
	xComm8.xSpacewire.xLinkConfig.bDisconnect = TRUE;
81107de0:	00a044b4 	movhi	r2,33042
81107de4:	1094cc04 	addi	r2,r2,21296
81107de8:	00c00044 	movi	r3,1
81107dec:	10c05715 	stw	r3,348(r2)
	bSpwcSetLink(&xComm1.xSpacewire);
81107df0:	012044b4 	movhi	r4,33042
81107df4:	2112e004 	addi	r4,r4,19328
81107df8:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm2.xSpacewire);
81107dfc:	012044b4 	movhi	r4,33042
81107e00:	21134004 	addi	r4,r4,19712
81107e04:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm3.xSpacewire);
81107e08:	012044b4 	movhi	r4,33042
81107e0c:	21146004 	addi	r4,r4,20864
81107e10:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm4.xSpacewire);
81107e14:	012044b4 	movhi	r4,33042
81107e18:	21158004 	addi	r4,r4,22016
81107e1c:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm5.xSpacewire);
81107e20:	012044b4 	movhi	r4,33042
81107e24:	21140004 	addi	r4,r4,20480
81107e28:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm6.xSpacewire);
81107e2c:	012044b4 	movhi	r4,33042
81107e30:	2113a004 	addi	r4,r4,20096
81107e34:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm7.xSpacewire);
81107e38:	012044b4 	movhi	r4,33042
81107e3c:	2114c004 	addi	r4,r4,21248
81107e40:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm8.xSpacewire);
81107e44:	012044b4 	movhi	r4,33042
81107e48:	21152004 	addi	r4,r4,21632
81107e4c:	11049dc0 	call	811049dc <bSpwcSetLink>

	usleep(50000);
81107e50:	0130d414 	movui	r4,50000
81107e54:	111c8240 	call	8111c824 <usleep>
	usleep(1000000);
81107e58:	010003f4 	movhi	r4,15
81107e5c:	21109004 	addi	r4,r4,16960
81107e60:	111c8240 	call	8111c824 <usleep>

	xComm1.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
81107e64:	00a044b4 	movhi	r2,33042
81107e68:	10928c04 	addi	r2,r2,18992
81107e6c:	00c00044 	movi	r3,1
81107e70:	10c00a15 	stw	r3,40(r2)
	xComm1.xSpacewire.xLinkConfig.bAutostart = TRUE;
81107e74:	00a044b4 	movhi	r2,33042
81107e78:	10928c04 	addi	r2,r2,18992
81107e7c:	00c00044 	movi	r3,1
81107e80:	10c05515 	stw	r3,340(r2)
	xComm1.xSpacewire.xLinkConfig.bStart = TRUE;
81107e84:	00a044b4 	movhi	r2,33042
81107e88:	10928c04 	addi	r2,r2,18992
81107e8c:	00c00044 	movi	r3,1
81107e90:	10c05615 	stw	r3,344(r2)
	xComm1.xSpacewire.xLinkConfig.bDisconnect = FALSE;
81107e94:	00a044b4 	movhi	r2,33042
81107e98:	10928c04 	addi	r2,r2,18992
81107e9c:	10005715 	stw	zero,348(r2)
	xComm2.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
81107ea0:	00a044b4 	movhi	r2,33042
81107ea4:	1092ec04 	addi	r2,r2,19376
81107ea8:	00c00044 	movi	r3,1
81107eac:	10c00a15 	stw	r3,40(r2)
	xComm2.xSpacewire.xLinkConfig.bAutostart = TRUE;
81107eb0:	00a044b4 	movhi	r2,33042
81107eb4:	1092ec04 	addi	r2,r2,19376
81107eb8:	00c00044 	movi	r3,1
81107ebc:	10c05515 	stw	r3,340(r2)
//	xComm2.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm2.xSpacewire.xLinkConfig.bDisconnect = FALSE;
81107ec0:	00a044b4 	movhi	r2,33042
81107ec4:	1092ec04 	addi	r2,r2,19376
81107ec8:	10005715 	stw	zero,348(r2)
	xComm3.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
81107ecc:	00a044b4 	movhi	r2,33042
81107ed0:	10940c04 	addi	r2,r2,20528
81107ed4:	00c00044 	movi	r3,1
81107ed8:	10c00a15 	stw	r3,40(r2)
	xComm3.xSpacewire.xLinkConfig.bAutostart = TRUE;
81107edc:	00a044b4 	movhi	r2,33042
81107ee0:	10940c04 	addi	r2,r2,20528
81107ee4:	00c00044 	movi	r3,1
81107ee8:	10c05515 	stw	r3,340(r2)
//	xComm3.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm3.xSpacewire.xLinkConfig.bDisconnect = FALSE;
81107eec:	00a044b4 	movhi	r2,33042
81107ef0:	10940c04 	addi	r2,r2,20528
81107ef4:	10005715 	stw	zero,348(r2)
	xComm4.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
81107ef8:	00a044b4 	movhi	r2,33042
81107efc:	10952c04 	addi	r2,r2,21680
81107f00:	00c00044 	movi	r3,1
81107f04:	10c00a15 	stw	r3,40(r2)
	xComm4.xSpacewire.xLinkConfig.bAutostart = TRUE;
81107f08:	00a044b4 	movhi	r2,33042
81107f0c:	10952c04 	addi	r2,r2,21680
81107f10:	00c00044 	movi	r3,1
81107f14:	10c05515 	stw	r3,340(r2)
//	xComm4.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm4.xSpacewire.xLinkConfig.bDisconnect = FALSE;
81107f18:	00a044b4 	movhi	r2,33042
81107f1c:	10952c04 	addi	r2,r2,21680
81107f20:	10005715 	stw	zero,348(r2)
	xComm5.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
81107f24:	00a044b4 	movhi	r2,33042
81107f28:	1093ac04 	addi	r2,r2,20144
81107f2c:	00c00044 	movi	r3,1
81107f30:	10c00a15 	stw	r3,40(r2)
	xComm5.xSpacewire.xLinkConfig.bAutostart = TRUE;
81107f34:	00a044b4 	movhi	r2,33042
81107f38:	1093ac04 	addi	r2,r2,20144
81107f3c:	00c00044 	movi	r3,1
81107f40:	10c05515 	stw	r3,340(r2)
//	xComm5.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm5.xSpacewire.xLinkConfig.bDisconnect = FALSE;
81107f44:	00a044b4 	movhi	r2,33042
81107f48:	1093ac04 	addi	r2,r2,20144
81107f4c:	10005715 	stw	zero,348(r2)
	xComm6.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
81107f50:	00a044b4 	movhi	r2,33042
81107f54:	10934c04 	addi	r2,r2,19760
81107f58:	00c00044 	movi	r3,1
81107f5c:	10c00a15 	stw	r3,40(r2)
	xComm6.xSpacewire.xLinkConfig.bAutostart = TRUE;
81107f60:	00a044b4 	movhi	r2,33042
81107f64:	10934c04 	addi	r2,r2,19760
81107f68:	00c00044 	movi	r3,1
81107f6c:	10c05515 	stw	r3,340(r2)
//	xComm6.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm6.xSpacewire.xLinkConfig.bDisconnect = FALSE;
81107f70:	00a044b4 	movhi	r2,33042
81107f74:	10934c04 	addi	r2,r2,19760
81107f78:	10005715 	stw	zero,348(r2)
	xComm7.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
81107f7c:	00a044b4 	movhi	r2,33042
81107f80:	10946c04 	addi	r2,r2,20912
81107f84:	00c00044 	movi	r3,1
81107f88:	10c00a15 	stw	r3,40(r2)
	xComm7.xSpacewire.xLinkConfig.bAutostart = TRUE;
81107f8c:	00a044b4 	movhi	r2,33042
81107f90:	10946c04 	addi	r2,r2,20912
81107f94:	00c00044 	movi	r3,1
81107f98:	10c05515 	stw	r3,340(r2)
//	xComm7.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm7.xSpacewire.xLinkConfig.bDisconnect = FALSE;
81107f9c:	00a044b4 	movhi	r2,33042
81107fa0:	10946c04 	addi	r2,r2,20912
81107fa4:	10005715 	stw	zero,348(r2)
	xComm8.xFeeBuffer.xWindowingConfig.bMasking = TRUE;
81107fa8:	00a044b4 	movhi	r2,33042
81107fac:	1094cc04 	addi	r2,r2,21296
81107fb0:	00c00044 	movi	r3,1
81107fb4:	10c00a15 	stw	r3,40(r2)
	xComm8.xSpacewire.xLinkConfig.bAutostart = TRUE;
81107fb8:	00a044b4 	movhi	r2,33042
81107fbc:	1094cc04 	addi	r2,r2,21296
81107fc0:	00c00044 	movi	r3,1
81107fc4:	10c05515 	stw	r3,340(r2)
//	xComm8.xSpacewire.xLinkConfig.bStart = TRUE;
	xComm8.xSpacewire.xLinkConfig.bDisconnect = FALSE;
81107fc8:	00a044b4 	movhi	r2,33042
81107fcc:	1094cc04 	addi	r2,r2,21296
81107fd0:	10005715 	stw	zero,348(r2)
	bFeebSetWindowing(&xComm1.xFeeBuffer);
81107fd4:	012044b4 	movhi	r4,33042
81107fd8:	21129504 	addi	r4,r4,19028
81107fdc:	11047840 	call	81104784 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm2.xFeeBuffer);
81107fe0:	012044b4 	movhi	r4,33042
81107fe4:	2112f504 	addi	r4,r4,19412
81107fe8:	11047840 	call	81104784 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm3.xFeeBuffer);
81107fec:	012044b4 	movhi	r4,33042
81107ff0:	21141504 	addi	r4,r4,20564
81107ff4:	11047840 	call	81104784 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm4.xFeeBuffer);
81107ff8:	012044b4 	movhi	r4,33042
81107ffc:	21153504 	addi	r4,r4,21716
81108000:	11047840 	call	81104784 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm5.xFeeBuffer);
81108004:	012044b4 	movhi	r4,33042
81108008:	2113b504 	addi	r4,r4,20180
8110800c:	11047840 	call	81104784 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm6.xFeeBuffer);
81108010:	012044b4 	movhi	r4,33042
81108014:	21135504 	addi	r4,r4,19796
81108018:	11047840 	call	81104784 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm7.xFeeBuffer);
8110801c:	012044b4 	movhi	r4,33042
81108020:	21147504 	addi	r4,r4,20948
81108024:	11047840 	call	81104784 <bFeebSetWindowing>
	bFeebSetWindowing(&xComm8.xFeeBuffer);
81108028:	012044b4 	movhi	r4,33042
8110802c:	2114d504 	addi	r4,r4,21332
81108030:	11047840 	call	81104784 <bFeebSetWindowing>
	bSpwcSetLink(&xComm1.xSpacewire);
81108034:	012044b4 	movhi	r4,33042
81108038:	2112e004 	addi	r4,r4,19328
8110803c:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm2.xSpacewire);
81108040:	012044b4 	movhi	r4,33042
81108044:	21134004 	addi	r4,r4,19712
81108048:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm3.xSpacewire);
8110804c:	012044b4 	movhi	r4,33042
81108050:	21146004 	addi	r4,r4,20864
81108054:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm4.xSpacewire);
81108058:	012044b4 	movhi	r4,33042
8110805c:	21158004 	addi	r4,r4,22016
81108060:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm5.xSpacewire);
81108064:	012044b4 	movhi	r4,33042
81108068:	21140004 	addi	r4,r4,20480
8110806c:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm6.xSpacewire);
81108070:	012044b4 	movhi	r4,33042
81108074:	2113a004 	addi	r4,r4,20096
81108078:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm7.xSpacewire);
8110807c:	012044b4 	movhi	r4,33042
81108080:	2114c004 	addi	r4,r4,21248
81108084:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm8.xSpacewire);
81108088:	012044b4 	movhi	r4,33042
8110808c:	21152004 	addi	r4,r4,21632
81108090:	11049dc0 	call	811049dc <bSpwcSetLink>
//	bSpwcSetLink(&xComm8);
//
//	bSpwcGetLink(&xComm8);
//	printf("empty r: %u \n", xComm8.xLinkConfig.bAutostart);

	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
81108094:	01400074 	movhi	r5,1
81108098:	01000044 	movi	r4,1
8110809c:	11059040 	call	81105904 <bSetPainelLeds>

	bSetPainelLeds(LEDS_OFF, LEDS_1G_MASK);
811080a0:	01400044 	movi	r5,1
811080a4:	0009883a 	mov	r4,zero
811080a8:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_1R_MASK);
811080ac:	01400084 	movi	r5,2
811080b0:	01000044 	movi	r4,1
811080b4:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_2G_MASK);
811080b8:	01400104 	movi	r5,4
811080bc:	0009883a 	mov	r4,zero
811080c0:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_2R_MASK);
811080c4:	01400204 	movi	r5,8
811080c8:	01000044 	movi	r4,1
811080cc:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_3G_MASK);
811080d0:	01400404 	movi	r5,16
811080d4:	0009883a 	mov	r4,zero
811080d8:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_3R_MASK);
811080dc:	01400804 	movi	r5,32
811080e0:	01000044 	movi	r4,1
811080e4:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_4G_MASK);
811080e8:	01401004 	movi	r5,64
811080ec:	0009883a 	mov	r4,zero
811080f0:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_4R_MASK);
811080f4:	01402004 	movi	r5,128
811080f8:	01000044 	movi	r4,1
811080fc:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_5G_MASK);
81108100:	01404004 	movi	r5,256
81108104:	0009883a 	mov	r4,zero
81108108:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_5R_MASK);
8110810c:	01408004 	movi	r5,512
81108110:	01000044 	movi	r4,1
81108114:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_6G_MASK);
81108118:	01410004 	movi	r5,1024
8110811c:	0009883a 	mov	r4,zero
81108120:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_6R_MASK);
81108124:	01420004 	movi	r5,2048
81108128:	01000044 	movi	r4,1
8110812c:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_7G_MASK);
81108130:	01440004 	movi	r5,4096
81108134:	0009883a 	mov	r4,zero
81108138:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_7R_MASK);
8110813c:	01480004 	movi	r5,8192
81108140:	01000044 	movi	r4,1
81108144:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_8G_MASK);
81108148:	01500004 	movi	r5,16384
8110814c:	0009883a 	mov	r4,zero
81108150:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
81108154:	01600014 	movui	r5,32768
81108158:	01000044 	movi	r4,1
8110815c:	11059040 	call	81105904 <bSetPainelLeds>

//	bSetPainelLeds(LEDS_ON, LEDS_ST_ALL_MASK);
	bSetPainelLeds(LEDS_ON, LEDS_ST_1_MASK);
81108160:	014000b4 	movhi	r5,2
81108164:	01000044 	movi	r4,1
81108168:	11059040 	call	81105904 <bSetPainelLeds>
	bSetPainelLeds(LEDS_ON, LEDS_ST_3_MASK);
8110816c:	01400234 	movhi	r5,8
81108170:	01000044 	movi	r4,1
81108174:	11059040 	call	81105904 <bSetPainelLeds>
//
//	printf("esperando \n");
////	getchar();
//	printf("foi \n");

	bDdr2SwitchMemory(DDR2_M1_ID);
81108178:	01000044 	movi	r4,1
8110817c:	11014340 	call	81101434 <bDdr2SwitchMemory>
	alt_u32 uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81108180:	e03ffc15 	stw	zero,-16(fp)

// buffer: 2176 B -> 544 dwords

//	int iDataCounter = 0;

	TSdmaBufferDataBlock *pxBufferDataM1 = (TSdmaBufferDataBlock *) uliDdr2Base;
81108184:	e0bffc17 	ldw	r2,-16(fp)
81108188:	e0bffd15 	stw	r2,-12(fp)

	pxBufferDataM1->xPixelDataBlock[0].usiPixel[0] = 0x0100;
8110818c:	e0bffd17 	ldw	r2,-12(fp)
81108190:	00c04004 	movi	r3,256
81108194:	10c0000d 	sth	r3,0(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[1] = 0x0302;
81108198:	e0bffd17 	ldw	r2,-12(fp)
8110819c:	00c0c084 	movi	r3,770
811081a0:	10c0008d 	sth	r3,2(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[2] = 0x0504;
811081a4:	e0bffd17 	ldw	r2,-12(fp)
811081a8:	00c14104 	movi	r3,1284
811081ac:	10c0010d 	sth	r3,4(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[3] = 0x0706;
811081b0:	e0bffd17 	ldw	r2,-12(fp)
811081b4:	00c1c184 	movi	r3,1798
811081b8:	10c0018d 	sth	r3,6(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[4] = 0x0908;
811081bc:	e0bffd17 	ldw	r2,-12(fp)
811081c0:	00c24204 	movi	r3,2312
811081c4:	10c0020d 	sth	r3,8(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[5] = 0x0B0A;
811081c8:	e0bffd17 	ldw	r2,-12(fp)
811081cc:	00c2c284 	movi	r3,2826
811081d0:	10c0028d 	sth	r3,10(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[6] = 0x0D0C;
811081d4:	e0bffd17 	ldw	r2,-12(fp)
811081d8:	00c34304 	movi	r3,3340
811081dc:	10c0030d 	sth	r3,12(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[7] = 0x0F0E;
811081e0:	e0bffd17 	ldw	r2,-12(fp)
811081e4:	00c3c384 	movi	r3,3854
811081e8:	10c0038d 	sth	r3,14(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[8] = 0x1110;
811081ec:	e0bffd17 	ldw	r2,-12(fp)
811081f0:	00c44404 	movi	r3,4368
811081f4:	10c0040d 	sth	r3,16(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[9] = 0x1312;
811081f8:	e0bffd17 	ldw	r2,-12(fp)
811081fc:	00c4c484 	movi	r3,4882
81108200:	10c0048d 	sth	r3,18(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[10] = 0x1514;
81108204:	e0bffd17 	ldw	r2,-12(fp)
81108208:	00c54504 	movi	r3,5396
8110820c:	10c0050d 	sth	r3,20(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[11] = 0x1716;
81108210:	e0bffd17 	ldw	r2,-12(fp)
81108214:	00c5c584 	movi	r3,5910
81108218:	10c0058d 	sth	r3,22(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[12] = 0x1918;
8110821c:	e0bffd17 	ldw	r2,-12(fp)
81108220:	00c64604 	movi	r3,6424
81108224:	10c0060d 	sth	r3,24(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[13] = 0x1B1A;
81108228:	e0bffd17 	ldw	r2,-12(fp)
8110822c:	00c6c684 	movi	r3,6938
81108230:	10c0068d 	sth	r3,26(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[14] = 0x1D1C;
81108234:	e0bffd17 	ldw	r2,-12(fp)
81108238:	00c74704 	movi	r3,7452
8110823c:	10c0070d 	sth	r3,28(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[15] = 0x1F1E;
81108240:	e0bffd17 	ldw	r2,-12(fp)
81108244:	00c7c784 	movi	r3,7966
81108248:	10c0078d 	sth	r3,30(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[16] = 0x2120;
8110824c:	e0bffd17 	ldw	r2,-12(fp)
81108250:	00c84804 	movi	r3,8480
81108254:	10c0080d 	sth	r3,32(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[17] = 0x2322;
81108258:	e0bffd17 	ldw	r2,-12(fp)
8110825c:	00c8c884 	movi	r3,8994
81108260:	10c0088d 	sth	r3,34(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[18] = 0x2524;
81108264:	e0bffd17 	ldw	r2,-12(fp)
81108268:	00c94904 	movi	r3,9508
8110826c:	10c0090d 	sth	r3,36(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[19] = 0x2726;
81108270:	e0bffd17 	ldw	r2,-12(fp)
81108274:	00c9c984 	movi	r3,10022
81108278:	10c0098d 	sth	r3,38(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[20] = 0x2928;
8110827c:	e0bffd17 	ldw	r2,-12(fp)
81108280:	00ca4a04 	movi	r3,10536
81108284:	10c00a0d 	sth	r3,40(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[21] = 0x2B2A;
81108288:	e0bffd17 	ldw	r2,-12(fp)
8110828c:	00caca84 	movi	r3,11050
81108290:	10c00a8d 	sth	r3,42(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[22] = 0x2D2C;
81108294:	e0bffd17 	ldw	r2,-12(fp)
81108298:	00cb4b04 	movi	r3,11564
8110829c:	10c00b0d 	sth	r3,44(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[23] = 0x2F2E;
811082a0:	e0bffd17 	ldw	r2,-12(fp)
811082a4:	00cbcb84 	movi	r3,12078
811082a8:	10c00b8d 	sth	r3,46(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[24] = 0x3130;
811082ac:	e0bffd17 	ldw	r2,-12(fp)
811082b0:	00cc4c04 	movi	r3,12592
811082b4:	10c00c0d 	sth	r3,48(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[25] = 0x3332;
811082b8:	e0bffd17 	ldw	r2,-12(fp)
811082bc:	00cccc84 	movi	r3,13106
811082c0:	10c00c8d 	sth	r3,50(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[26] = 0x3534;
811082c4:	e0bffd17 	ldw	r2,-12(fp)
811082c8:	00cd4d04 	movi	r3,13620
811082cc:	10c00d0d 	sth	r3,52(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[27] = 0x3736;
811082d0:	e0bffd17 	ldw	r2,-12(fp)
811082d4:	00cdcd84 	movi	r3,14134
811082d8:	10c00d8d 	sth	r3,54(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[28] = 0x3938;
811082dc:	e0bffd17 	ldw	r2,-12(fp)
811082e0:	00ce4e04 	movi	r3,14648
811082e4:	10c00e0d 	sth	r3,56(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[29] = 0x3B3A;
811082e8:	e0bffd17 	ldw	r2,-12(fp)
811082ec:	00cece84 	movi	r3,15162
811082f0:	10c00e8d 	sth	r3,58(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[30] = 0x3D3C;
811082f4:	e0bffd17 	ldw	r2,-12(fp)
811082f8:	00cf4f04 	movi	r3,15676
811082fc:	10c00f0d 	sth	r3,60(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[31] = 0x3F3E;
81108300:	e0bffd17 	ldw	r2,-12(fp)
81108304:	00cfcf84 	movi	r3,16190
81108308:	10c00f8d 	sth	r3,62(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[32] = 0x4140;
8110830c:	e0bffd17 	ldw	r2,-12(fp)
81108310:	00d05004 	movi	r3,16704
81108314:	10c0100d 	sth	r3,64(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[33] = 0x4342;
81108318:	e0bffd17 	ldw	r2,-12(fp)
8110831c:	00d0d084 	movi	r3,17218
81108320:	10c0108d 	sth	r3,66(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[34] = 0x4544;
81108324:	e0bffd17 	ldw	r2,-12(fp)
81108328:	00d15104 	movi	r3,17732
8110832c:	10c0110d 	sth	r3,68(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[35] = 0x4746;
81108330:	e0bffd17 	ldw	r2,-12(fp)
81108334:	00d1d184 	movi	r3,18246
81108338:	10c0118d 	sth	r3,70(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[36] = 0x4948;
8110833c:	e0bffd17 	ldw	r2,-12(fp)
81108340:	00d25204 	movi	r3,18760
81108344:	10c0120d 	sth	r3,72(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[37] = 0x4B4A;
81108348:	e0bffd17 	ldw	r2,-12(fp)
8110834c:	00d2d284 	movi	r3,19274
81108350:	10c0128d 	sth	r3,74(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[38] = 0x4D4C;
81108354:	e0bffd17 	ldw	r2,-12(fp)
81108358:	00d35304 	movi	r3,19788
8110835c:	10c0130d 	sth	r3,76(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[39] = 0x4F4E;
81108360:	e0bffd17 	ldw	r2,-12(fp)
81108364:	00d3d384 	movi	r3,20302
81108368:	10c0138d 	sth	r3,78(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[40] = 0x5150;
8110836c:	e0bffd17 	ldw	r2,-12(fp)
81108370:	00d45404 	movi	r3,20816
81108374:	10c0140d 	sth	r3,80(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[41] = 0x5352;
81108378:	e0bffd17 	ldw	r2,-12(fp)
8110837c:	00d4d484 	movi	r3,21330
81108380:	10c0148d 	sth	r3,82(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[42] = 0x5554;
81108384:	e0bffd17 	ldw	r2,-12(fp)
81108388:	00d55504 	movi	r3,21844
8110838c:	10c0150d 	sth	r3,84(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[43] = 0x5756;
81108390:	e0bffd17 	ldw	r2,-12(fp)
81108394:	00d5d584 	movi	r3,22358
81108398:	10c0158d 	sth	r3,86(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[44] = 0x5958;
8110839c:	e0bffd17 	ldw	r2,-12(fp)
811083a0:	00d65604 	movi	r3,22872
811083a4:	10c0160d 	sth	r3,88(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[45] = 0x5B5A;
811083a8:	e0bffd17 	ldw	r2,-12(fp)
811083ac:	00d6d684 	movi	r3,23386
811083b0:	10c0168d 	sth	r3,90(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[46] = 0x5D5C;
811083b4:	e0bffd17 	ldw	r2,-12(fp)
811083b8:	00d75704 	movi	r3,23900
811083bc:	10c0170d 	sth	r3,92(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[47] = 0x5F5E;
811083c0:	e0bffd17 	ldw	r2,-12(fp)
811083c4:	00d7d784 	movi	r3,24414
811083c8:	10c0178d 	sth	r3,94(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[48] = 0x6160;
811083cc:	e0bffd17 	ldw	r2,-12(fp)
811083d0:	00d85804 	movi	r3,24928
811083d4:	10c0180d 	sth	r3,96(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[49] = 0x6362;
811083d8:	e0bffd17 	ldw	r2,-12(fp)
811083dc:	00d8d884 	movi	r3,25442
811083e0:	10c0188d 	sth	r3,98(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[50] = 0x6564;
811083e4:	e0bffd17 	ldw	r2,-12(fp)
811083e8:	00d95904 	movi	r3,25956
811083ec:	10c0190d 	sth	r3,100(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[51] = 0x6766;
811083f0:	e0bffd17 	ldw	r2,-12(fp)
811083f4:	00d9d984 	movi	r3,26470
811083f8:	10c0198d 	sth	r3,102(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[52] = 0x6968;
811083fc:	e0bffd17 	ldw	r2,-12(fp)
81108400:	00da5a04 	movi	r3,26984
81108404:	10c01a0d 	sth	r3,104(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[53] = 0x6B6A;
81108408:	e0bffd17 	ldw	r2,-12(fp)
8110840c:	00dada84 	movi	r3,27498
81108410:	10c01a8d 	sth	r3,106(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[54] = 0x6D6C;
81108414:	e0bffd17 	ldw	r2,-12(fp)
81108418:	00db5b04 	movi	r3,28012
8110841c:	10c01b0d 	sth	r3,108(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[55] = 0x6F6E;
81108420:	e0bffd17 	ldw	r2,-12(fp)
81108424:	00dbdb84 	movi	r3,28526
81108428:	10c01b8d 	sth	r3,110(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[56] = 0x7170;
8110842c:	e0bffd17 	ldw	r2,-12(fp)
81108430:	00dc5c04 	movi	r3,29040
81108434:	10c01c0d 	sth	r3,112(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[57] = 0x7372;
81108438:	e0bffd17 	ldw	r2,-12(fp)
8110843c:	00dcdc84 	movi	r3,29554
81108440:	10c01c8d 	sth	r3,114(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[58] = 0x7574;
81108444:	e0bffd17 	ldw	r2,-12(fp)
81108448:	00dd5d04 	movi	r3,30068
8110844c:	10c01d0d 	sth	r3,116(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[59] = 0x7776;
81108450:	e0bffd17 	ldw	r2,-12(fp)
81108454:	00dddd84 	movi	r3,30582
81108458:	10c01d8d 	sth	r3,118(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[60] = 0x7978;
8110845c:	e0bffd17 	ldw	r2,-12(fp)
81108460:	00de5e04 	movi	r3,31096
81108464:	10c01e0d 	sth	r3,120(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[61] = 0x7B7A;
81108468:	e0bffd17 	ldw	r2,-12(fp)
8110846c:	00dede84 	movi	r3,31610
81108470:	10c01e8d 	sth	r3,122(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[62] = 0x7D7C;
81108474:	e0bffd17 	ldw	r2,-12(fp)
81108478:	00df5f04 	movi	r3,32124
8110847c:	10c01f0d 	sth	r3,124(r2)
	pxBufferDataM1->xPixelDataBlock[0].usiPixel[63] = 0x7F7E;
81108480:	e0bffd17 	ldw	r2,-12(fp)
81108484:	00dfdf84 	movi	r3,32638
81108488:	10c01f8d 	sth	r3,126(r2)
	pxBufferDataM1->xPixelDataBlock[0].ulliMask = 0xFFFFFFFFFFFFFFFF;
8110848c:	e0bffd17 	ldw	r2,-12(fp)
81108490:	00ffffc4 	movi	r3,-1
81108494:	10c02015 	stw	r3,128(r2)
81108498:	00ffffc4 	movi	r3,-1
8110849c:	10c02115 	stw	r3,132(r2)

	pxBufferDataM1->xPixelDataBlock[1].usiPixel[0] = 0x8180;
811084a0:	e0bffd17 	ldw	r2,-12(fp)
811084a4:	00e06004 	movi	r3,-32384
811084a8:	10c0220d 	sth	r3,136(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[1] = 0x8382;
811084ac:	e0bffd17 	ldw	r2,-12(fp)
811084b0:	00e0e084 	movi	r3,-31870
811084b4:	10c0228d 	sth	r3,138(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[2] = 0x8584;
811084b8:	e0bffd17 	ldw	r2,-12(fp)
811084bc:	00e16104 	movi	r3,-31356
811084c0:	10c0230d 	sth	r3,140(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[3] = 0x8786;
811084c4:	e0bffd17 	ldw	r2,-12(fp)
811084c8:	00e1e184 	movi	r3,-30842
811084cc:	10c0238d 	sth	r3,142(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[4] = 0x8988;
811084d0:	e0bffd17 	ldw	r2,-12(fp)
811084d4:	00e26204 	movi	r3,-30328
811084d8:	10c0240d 	sth	r3,144(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[5] = 0x8B8A;
811084dc:	e0bffd17 	ldw	r2,-12(fp)
811084e0:	00e2e284 	movi	r3,-29814
811084e4:	10c0248d 	sth	r3,146(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[6] = 0x8D8C;
811084e8:	e0bffd17 	ldw	r2,-12(fp)
811084ec:	00e36304 	movi	r3,-29300
811084f0:	10c0250d 	sth	r3,148(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[7] = 0x8F8E;
811084f4:	e0bffd17 	ldw	r2,-12(fp)
811084f8:	00e3e384 	movi	r3,-28786
811084fc:	10c0258d 	sth	r3,150(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[8] = 0x9190;
81108500:	e0bffd17 	ldw	r2,-12(fp)
81108504:	00e46404 	movi	r3,-28272
81108508:	10c0260d 	sth	r3,152(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[9] = 0x9392;
8110850c:	e0bffd17 	ldw	r2,-12(fp)
81108510:	00e4e484 	movi	r3,-27758
81108514:	10c0268d 	sth	r3,154(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[10] = 0x9594;
81108518:	e0bffd17 	ldw	r2,-12(fp)
8110851c:	00e56504 	movi	r3,-27244
81108520:	10c0270d 	sth	r3,156(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[11] = 0x9796;
81108524:	e0bffd17 	ldw	r2,-12(fp)
81108528:	00e5e584 	movi	r3,-26730
8110852c:	10c0278d 	sth	r3,158(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[12] = 0x9998;
81108530:	e0bffd17 	ldw	r2,-12(fp)
81108534:	00e66604 	movi	r3,-26216
81108538:	10c0280d 	sth	r3,160(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[13] = 0x9B9A;
8110853c:	e0bffd17 	ldw	r2,-12(fp)
81108540:	00e6e684 	movi	r3,-25702
81108544:	10c0288d 	sth	r3,162(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[14] = 0x9D9C;
81108548:	e0bffd17 	ldw	r2,-12(fp)
8110854c:	00e76704 	movi	r3,-25188
81108550:	10c0290d 	sth	r3,164(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[15] = 0x9F9E;
81108554:	e0bffd17 	ldw	r2,-12(fp)
81108558:	00e7e784 	movi	r3,-24674
8110855c:	10c0298d 	sth	r3,166(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[16] = 0xA1A0;
81108560:	e0bffd17 	ldw	r2,-12(fp)
81108564:	00e86804 	movi	r3,-24160
81108568:	10c02a0d 	sth	r3,168(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[17] = 0xA3A2;
8110856c:	e0bffd17 	ldw	r2,-12(fp)
81108570:	00e8e884 	movi	r3,-23646
81108574:	10c02a8d 	sth	r3,170(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[18] = 0xA5A4;
81108578:	e0bffd17 	ldw	r2,-12(fp)
8110857c:	00e96904 	movi	r3,-23132
81108580:	10c02b0d 	sth	r3,172(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[19] = 0xA7A6;
81108584:	e0bffd17 	ldw	r2,-12(fp)
81108588:	00e9e984 	movi	r3,-22618
8110858c:	10c02b8d 	sth	r3,174(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[20] = 0xA9A8;
81108590:	e0bffd17 	ldw	r2,-12(fp)
81108594:	00ea6a04 	movi	r3,-22104
81108598:	10c02c0d 	sth	r3,176(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[21] = 0xABAA;
8110859c:	e0bffd17 	ldw	r2,-12(fp)
811085a0:	00eaea84 	movi	r3,-21590
811085a4:	10c02c8d 	sth	r3,178(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[22] = 0xADAC;
811085a8:	e0bffd17 	ldw	r2,-12(fp)
811085ac:	00eb6b04 	movi	r3,-21076
811085b0:	10c02d0d 	sth	r3,180(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[23] = 0xAFAE;
811085b4:	e0bffd17 	ldw	r2,-12(fp)
811085b8:	00ebeb84 	movi	r3,-20562
811085bc:	10c02d8d 	sth	r3,182(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[24] = 0xB1B0;
811085c0:	e0bffd17 	ldw	r2,-12(fp)
811085c4:	00ec6c04 	movi	r3,-20048
811085c8:	10c02e0d 	sth	r3,184(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[25] = 0xB3B2;
811085cc:	e0bffd17 	ldw	r2,-12(fp)
811085d0:	00ecec84 	movi	r3,-19534
811085d4:	10c02e8d 	sth	r3,186(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[26] = 0xB5B4;
811085d8:	e0bffd17 	ldw	r2,-12(fp)
811085dc:	00ed6d04 	movi	r3,-19020
811085e0:	10c02f0d 	sth	r3,188(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[27] = 0xB7B6;
811085e4:	e0bffd17 	ldw	r2,-12(fp)
811085e8:	00eded84 	movi	r3,-18506
811085ec:	10c02f8d 	sth	r3,190(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[28] = 0xB9B8;
811085f0:	e0bffd17 	ldw	r2,-12(fp)
811085f4:	00ee6e04 	movi	r3,-17992
811085f8:	10c0300d 	sth	r3,192(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[29] = 0xBBBA;
811085fc:	e0bffd17 	ldw	r2,-12(fp)
81108600:	00eeee84 	movi	r3,-17478
81108604:	10c0308d 	sth	r3,194(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[30] = 0xBDBC;
81108608:	e0bffd17 	ldw	r2,-12(fp)
8110860c:	00ef6f04 	movi	r3,-16964
81108610:	10c0310d 	sth	r3,196(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[31] = 0xBFBE;
81108614:	e0bffd17 	ldw	r2,-12(fp)
81108618:	00efef84 	movi	r3,-16450
8110861c:	10c0318d 	sth	r3,198(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[32] = 0xC1C0;
81108620:	e0bffd17 	ldw	r2,-12(fp)
81108624:	00f07004 	movi	r3,-15936
81108628:	10c0320d 	sth	r3,200(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[33] = 0xC3C2;
8110862c:	e0bffd17 	ldw	r2,-12(fp)
81108630:	00f0f084 	movi	r3,-15422
81108634:	10c0328d 	sth	r3,202(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[34] = 0xC5C4;
81108638:	e0bffd17 	ldw	r2,-12(fp)
8110863c:	00f17104 	movi	r3,-14908
81108640:	10c0330d 	sth	r3,204(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[35] = 0xC7C6;
81108644:	e0bffd17 	ldw	r2,-12(fp)
81108648:	00f1f184 	movi	r3,-14394
8110864c:	10c0338d 	sth	r3,206(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[36] = 0xC9C8;
81108650:	e0bffd17 	ldw	r2,-12(fp)
81108654:	00f27204 	movi	r3,-13880
81108658:	10c0340d 	sth	r3,208(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[37] = 0xCBCA;
8110865c:	e0bffd17 	ldw	r2,-12(fp)
81108660:	00f2f284 	movi	r3,-13366
81108664:	10c0348d 	sth	r3,210(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[38] = 0xCDCC;
81108668:	e0bffd17 	ldw	r2,-12(fp)
8110866c:	00f37304 	movi	r3,-12852
81108670:	10c0350d 	sth	r3,212(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[39] = 0xCFCE;
81108674:	e0bffd17 	ldw	r2,-12(fp)
81108678:	00f3f384 	movi	r3,-12338
8110867c:	10c0358d 	sth	r3,214(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[40] = 0xD1D0;
81108680:	e0bffd17 	ldw	r2,-12(fp)
81108684:	00f47404 	movi	r3,-11824
81108688:	10c0360d 	sth	r3,216(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[41] = 0xD3D2;
8110868c:	e0bffd17 	ldw	r2,-12(fp)
81108690:	00f4f484 	movi	r3,-11310
81108694:	10c0368d 	sth	r3,218(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[42] = 0xD5D4;
81108698:	e0bffd17 	ldw	r2,-12(fp)
8110869c:	00f57504 	movi	r3,-10796
811086a0:	10c0370d 	sth	r3,220(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[43] = 0xD7D6;
811086a4:	e0bffd17 	ldw	r2,-12(fp)
811086a8:	00f5f584 	movi	r3,-10282
811086ac:	10c0378d 	sth	r3,222(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[44] = 0xD9D8;
811086b0:	e0bffd17 	ldw	r2,-12(fp)
811086b4:	00f67604 	movi	r3,-9768
811086b8:	10c0380d 	sth	r3,224(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[45] = 0xDBDA;
811086bc:	e0bffd17 	ldw	r2,-12(fp)
811086c0:	00f6f684 	movi	r3,-9254
811086c4:	10c0388d 	sth	r3,226(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[46] = 0xDDDC;
811086c8:	e0bffd17 	ldw	r2,-12(fp)
811086cc:	00f77704 	movi	r3,-8740
811086d0:	10c0390d 	sth	r3,228(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[47] = 0xDFDE;
811086d4:	e0bffd17 	ldw	r2,-12(fp)
811086d8:	00f7f784 	movi	r3,-8226
811086dc:	10c0398d 	sth	r3,230(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[48] = 0xE1E0;
811086e0:	e0bffd17 	ldw	r2,-12(fp)
811086e4:	00f87804 	movi	r3,-7712
811086e8:	10c03a0d 	sth	r3,232(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[49] = 0xE3E2;
811086ec:	e0bffd17 	ldw	r2,-12(fp)
811086f0:	00f8f884 	movi	r3,-7198
811086f4:	10c03a8d 	sth	r3,234(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[50] = 0xE5E4;
811086f8:	e0bffd17 	ldw	r2,-12(fp)
811086fc:	00f97904 	movi	r3,-6684
81108700:	10c03b0d 	sth	r3,236(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[51] = 0xE7E6;
81108704:	e0bffd17 	ldw	r2,-12(fp)
81108708:	00f9f984 	movi	r3,-6170
8110870c:	10c03b8d 	sth	r3,238(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[52] = 0xE9E8;
81108710:	e0bffd17 	ldw	r2,-12(fp)
81108714:	00fa7a04 	movi	r3,-5656
81108718:	10c03c0d 	sth	r3,240(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[53] = 0xEBEA;
8110871c:	e0bffd17 	ldw	r2,-12(fp)
81108720:	00fafa84 	movi	r3,-5142
81108724:	10c03c8d 	sth	r3,242(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[54] = 0xEDEC;
81108728:	e0bffd17 	ldw	r2,-12(fp)
8110872c:	00fb7b04 	movi	r3,-4628
81108730:	10c03d0d 	sth	r3,244(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[55] = 0xEFEE;
81108734:	e0bffd17 	ldw	r2,-12(fp)
81108738:	00fbfb84 	movi	r3,-4114
8110873c:	10c03d8d 	sth	r3,246(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[56] = 0xF1F0;
81108740:	e0bffd17 	ldw	r2,-12(fp)
81108744:	00fc7c04 	movi	r3,-3600
81108748:	10c03e0d 	sth	r3,248(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[57] = 0xF3F2;
8110874c:	e0bffd17 	ldw	r2,-12(fp)
81108750:	00fcfc84 	movi	r3,-3086
81108754:	10c03e8d 	sth	r3,250(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[58] = 0xF5F4;
81108758:	e0bffd17 	ldw	r2,-12(fp)
8110875c:	00fd7d04 	movi	r3,-2572
81108760:	10c03f0d 	sth	r3,252(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[59] = 0xF7F6;
81108764:	e0bffd17 	ldw	r2,-12(fp)
81108768:	00fdfd84 	movi	r3,-2058
8110876c:	10c03f8d 	sth	r3,254(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[60] = 0xF9F8;
81108770:	e0bffd17 	ldw	r2,-12(fp)
81108774:	00fe7e04 	movi	r3,-1544
81108778:	10c0400d 	sth	r3,256(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[61] = 0xFBFA;
8110877c:	e0bffd17 	ldw	r2,-12(fp)
81108780:	00fefe84 	movi	r3,-1030
81108784:	10c0408d 	sth	r3,258(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[62] = 0xFDFC;
81108788:	e0bffd17 	ldw	r2,-12(fp)
8110878c:	00ff7f04 	movi	r3,-516
81108790:	10c0410d 	sth	r3,260(r2)
	pxBufferDataM1->xPixelDataBlock[1].usiPixel[63] = 0xFFFE;
81108794:	e0bffd17 	ldw	r2,-12(fp)
81108798:	00ffff84 	movi	r3,-2
8110879c:	10c0418d 	sth	r3,262(r2)
	pxBufferDataM1->xPixelDataBlock[1].ulliMask = 0xFFFFFFFFFFFFFFFF;
811087a0:	e0bffd17 	ldw	r2,-12(fp)
811087a4:	00ffffc4 	movi	r3,-1
811087a8:	10c04215 	stw	r3,264(r2)
811087ac:	00ffffc4 	movi	r3,-1
811087b0:	10c04315 	stw	r3,268(r2)

	pxBufferDataM1->xPixelDataBlock[2] = pxBufferDataM1->xPixelDataBlock[0];
811087b4:	e0bffd17 	ldw	r2,-12(fp)
811087b8:	e0fffd17 	ldw	r3,-12(fp)
811087bc:	10804404 	addi	r2,r2,272
811087c0:	1809883a 	mov	r4,r3
811087c4:	00c02204 	movi	r3,136
811087c8:	180d883a 	mov	r6,r3
811087cc:	200b883a 	mov	r5,r4
811087d0:	1009883a 	mov	r4,r2
811087d4:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[3] = pxBufferDataM1->xPixelDataBlock[1];
811087d8:	e0fffd17 	ldw	r3,-12(fp)
811087dc:	e0bffd17 	ldw	r2,-12(fp)
811087e0:	18c06604 	addi	r3,r3,408
811087e4:	10802204 	addi	r2,r2,136
811087e8:	01002204 	movi	r4,136
811087ec:	200d883a 	mov	r6,r4
811087f0:	100b883a 	mov	r5,r2
811087f4:	1809883a 	mov	r4,r3
811087f8:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[4] = pxBufferDataM1->xPixelDataBlock[2];
811087fc:	e0fffd17 	ldw	r3,-12(fp)
81108800:	e0bffd17 	ldw	r2,-12(fp)
81108804:	18c08804 	addi	r3,r3,544
81108808:	10804404 	addi	r2,r2,272
8110880c:	01002204 	movi	r4,136
81108810:	200d883a 	mov	r6,r4
81108814:	100b883a 	mov	r5,r2
81108818:	1809883a 	mov	r4,r3
8110881c:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[5] = pxBufferDataM1->xPixelDataBlock[3];
81108820:	e0fffd17 	ldw	r3,-12(fp)
81108824:	e0bffd17 	ldw	r2,-12(fp)
81108828:	18c0aa04 	addi	r3,r3,680
8110882c:	10806604 	addi	r2,r2,408
81108830:	01002204 	movi	r4,136
81108834:	200d883a 	mov	r6,r4
81108838:	100b883a 	mov	r5,r2
8110883c:	1809883a 	mov	r4,r3
81108840:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[6] = pxBufferDataM1->xPixelDataBlock[4];
81108844:	e0fffd17 	ldw	r3,-12(fp)
81108848:	e0bffd17 	ldw	r2,-12(fp)
8110884c:	18c0cc04 	addi	r3,r3,816
81108850:	10808804 	addi	r2,r2,544
81108854:	01002204 	movi	r4,136
81108858:	200d883a 	mov	r6,r4
8110885c:	100b883a 	mov	r5,r2
81108860:	1809883a 	mov	r4,r3
81108864:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[7] = pxBufferDataM1->xPixelDataBlock[5];
81108868:	e0fffd17 	ldw	r3,-12(fp)
8110886c:	e0bffd17 	ldw	r2,-12(fp)
81108870:	18c0ee04 	addi	r3,r3,952
81108874:	1080aa04 	addi	r2,r2,680
81108878:	01002204 	movi	r4,136
8110887c:	200d883a 	mov	r6,r4
81108880:	100b883a 	mov	r5,r2
81108884:	1809883a 	mov	r4,r3
81108888:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[8] = pxBufferDataM1->xPixelDataBlock[6];
8110888c:	e0fffd17 	ldw	r3,-12(fp)
81108890:	e0bffd17 	ldw	r2,-12(fp)
81108894:	18c11004 	addi	r3,r3,1088
81108898:	1080cc04 	addi	r2,r2,816
8110889c:	01002204 	movi	r4,136
811088a0:	200d883a 	mov	r6,r4
811088a4:	100b883a 	mov	r5,r2
811088a8:	1809883a 	mov	r4,r3
811088ac:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[9] = pxBufferDataM1->xPixelDataBlock[7];
811088b0:	e0fffd17 	ldw	r3,-12(fp)
811088b4:	e0bffd17 	ldw	r2,-12(fp)
811088b8:	18c13204 	addi	r3,r3,1224
811088bc:	1080ee04 	addi	r2,r2,952
811088c0:	01002204 	movi	r4,136
811088c4:	200d883a 	mov	r6,r4
811088c8:	100b883a 	mov	r5,r2
811088cc:	1809883a 	mov	r4,r3
811088d0:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[10] = pxBufferDataM1->xPixelDataBlock[8];
811088d4:	e0fffd17 	ldw	r3,-12(fp)
811088d8:	e0bffd17 	ldw	r2,-12(fp)
811088dc:	18c15404 	addi	r3,r3,1360
811088e0:	10811004 	addi	r2,r2,1088
811088e4:	01002204 	movi	r4,136
811088e8:	200d883a 	mov	r6,r4
811088ec:	100b883a 	mov	r5,r2
811088f0:	1809883a 	mov	r4,r3
811088f4:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[11] = pxBufferDataM1->xPixelDataBlock[9];
811088f8:	e0fffd17 	ldw	r3,-12(fp)
811088fc:	e0bffd17 	ldw	r2,-12(fp)
81108900:	18c17604 	addi	r3,r3,1496
81108904:	10813204 	addi	r2,r2,1224
81108908:	01002204 	movi	r4,136
8110890c:	200d883a 	mov	r6,r4
81108910:	100b883a 	mov	r5,r2
81108914:	1809883a 	mov	r4,r3
81108918:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[12] = pxBufferDataM1->xPixelDataBlock[10];
8110891c:	e0fffd17 	ldw	r3,-12(fp)
81108920:	e0bffd17 	ldw	r2,-12(fp)
81108924:	18c19804 	addi	r3,r3,1632
81108928:	10815404 	addi	r2,r2,1360
8110892c:	01002204 	movi	r4,136
81108930:	200d883a 	mov	r6,r4
81108934:	100b883a 	mov	r5,r2
81108938:	1809883a 	mov	r4,r3
8110893c:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[13] = pxBufferDataM1->xPixelDataBlock[11];
81108940:	e0fffd17 	ldw	r3,-12(fp)
81108944:	e0bffd17 	ldw	r2,-12(fp)
81108948:	18c1ba04 	addi	r3,r3,1768
8110894c:	10817604 	addi	r2,r2,1496
81108950:	01002204 	movi	r4,136
81108954:	200d883a 	mov	r6,r4
81108958:	100b883a 	mov	r5,r2
8110895c:	1809883a 	mov	r4,r3
81108960:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[14] = pxBufferDataM1->xPixelDataBlock[12];
81108964:	e0fffd17 	ldw	r3,-12(fp)
81108968:	e0bffd17 	ldw	r2,-12(fp)
8110896c:	18c1dc04 	addi	r3,r3,1904
81108970:	10819804 	addi	r2,r2,1632
81108974:	01002204 	movi	r4,136
81108978:	200d883a 	mov	r6,r4
8110897c:	100b883a 	mov	r5,r2
81108980:	1809883a 	mov	r4,r3
81108984:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM1->xPixelDataBlock[15] = pxBufferDataM1->xPixelDataBlock[13];
81108988:	e0fffd17 	ldw	r3,-12(fp)
8110898c:	e0bffd17 	ldw	r2,-12(fp)
81108990:	18c1fe04 	addi	r3,r3,2040
81108994:	1081ba04 	addi	r2,r2,1768
81108998:	01002204 	movi	r4,136
8110899c:	200d883a 	mov	r6,r4
811089a0:	100b883a 	mov	r5,r2
811089a4:	1809883a 	mov	r4,r3
811089a8:	110c9d40 	call	8110c9d4 <memcpy>

	bDdr2SwitchMemory(DDR2_M2_ID);
811089ac:	01000084 	movi	r4,2
811089b0:	11014340 	call	81101434 <bDdr2SwitchMemory>
//	puliDdr++;
//	printf("add : %u \n", *puliDdr);

// buffer: 2176 B -> 544 dwords

	TSdmaBufferDataBlock *pxBufferDataM2 = (TSdmaBufferDataBlock *) uliDdr2Base;
811089b4:	e0bffc17 	ldw	r2,-16(fp)
811089b8:	e0bffe15 	stw	r2,-8(fp)

	pxBufferDataM2->xPixelDataBlock[0].usiPixel[0] = 0x0100;
811089bc:	e0bffe17 	ldw	r2,-8(fp)
811089c0:	00c04004 	movi	r3,256
811089c4:	10c0000d 	sth	r3,0(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[1] = 0x0302;
811089c8:	e0bffe17 	ldw	r2,-8(fp)
811089cc:	00c0c084 	movi	r3,770
811089d0:	10c0008d 	sth	r3,2(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[2] = 0x0504;
811089d4:	e0bffe17 	ldw	r2,-8(fp)
811089d8:	00c14104 	movi	r3,1284
811089dc:	10c0010d 	sth	r3,4(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[3] = 0x0706;
811089e0:	e0bffe17 	ldw	r2,-8(fp)
811089e4:	00c1c184 	movi	r3,1798
811089e8:	10c0018d 	sth	r3,6(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[4] = 0x0908;
811089ec:	e0bffe17 	ldw	r2,-8(fp)
811089f0:	00c24204 	movi	r3,2312
811089f4:	10c0020d 	sth	r3,8(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[5] = 0x0B0A;
811089f8:	e0bffe17 	ldw	r2,-8(fp)
811089fc:	00c2c284 	movi	r3,2826
81108a00:	10c0028d 	sth	r3,10(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[6] = 0x0D0C;
81108a04:	e0bffe17 	ldw	r2,-8(fp)
81108a08:	00c34304 	movi	r3,3340
81108a0c:	10c0030d 	sth	r3,12(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[7] = 0x0F0E;
81108a10:	e0bffe17 	ldw	r2,-8(fp)
81108a14:	00c3c384 	movi	r3,3854
81108a18:	10c0038d 	sth	r3,14(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[8] = 0x1110;
81108a1c:	e0bffe17 	ldw	r2,-8(fp)
81108a20:	00c44404 	movi	r3,4368
81108a24:	10c0040d 	sth	r3,16(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[9] = 0x1312;
81108a28:	e0bffe17 	ldw	r2,-8(fp)
81108a2c:	00c4c484 	movi	r3,4882
81108a30:	10c0048d 	sth	r3,18(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[10] = 0x1514;
81108a34:	e0bffe17 	ldw	r2,-8(fp)
81108a38:	00c54504 	movi	r3,5396
81108a3c:	10c0050d 	sth	r3,20(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[11] = 0x1716;
81108a40:	e0bffe17 	ldw	r2,-8(fp)
81108a44:	00c5c584 	movi	r3,5910
81108a48:	10c0058d 	sth	r3,22(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[12] = 0x1918;
81108a4c:	e0bffe17 	ldw	r2,-8(fp)
81108a50:	00c64604 	movi	r3,6424
81108a54:	10c0060d 	sth	r3,24(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[13] = 0x1B1A;
81108a58:	e0bffe17 	ldw	r2,-8(fp)
81108a5c:	00c6c684 	movi	r3,6938
81108a60:	10c0068d 	sth	r3,26(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[14] = 0x1D1C;
81108a64:	e0bffe17 	ldw	r2,-8(fp)
81108a68:	00c74704 	movi	r3,7452
81108a6c:	10c0070d 	sth	r3,28(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[15] = 0x1F1E;
81108a70:	e0bffe17 	ldw	r2,-8(fp)
81108a74:	00c7c784 	movi	r3,7966
81108a78:	10c0078d 	sth	r3,30(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[16] = 0x2120;
81108a7c:	e0bffe17 	ldw	r2,-8(fp)
81108a80:	00c84804 	movi	r3,8480
81108a84:	10c0080d 	sth	r3,32(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[17] = 0x2322;
81108a88:	e0bffe17 	ldw	r2,-8(fp)
81108a8c:	00c8c884 	movi	r3,8994
81108a90:	10c0088d 	sth	r3,34(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[18] = 0x2524;
81108a94:	e0bffe17 	ldw	r2,-8(fp)
81108a98:	00c94904 	movi	r3,9508
81108a9c:	10c0090d 	sth	r3,36(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[19] = 0x2726;
81108aa0:	e0bffe17 	ldw	r2,-8(fp)
81108aa4:	00c9c984 	movi	r3,10022
81108aa8:	10c0098d 	sth	r3,38(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[20] = 0x2928;
81108aac:	e0bffe17 	ldw	r2,-8(fp)
81108ab0:	00ca4a04 	movi	r3,10536
81108ab4:	10c00a0d 	sth	r3,40(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[21] = 0x2B2A;
81108ab8:	e0bffe17 	ldw	r2,-8(fp)
81108abc:	00caca84 	movi	r3,11050
81108ac0:	10c00a8d 	sth	r3,42(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[22] = 0x2D2C;
81108ac4:	e0bffe17 	ldw	r2,-8(fp)
81108ac8:	00cb4b04 	movi	r3,11564
81108acc:	10c00b0d 	sth	r3,44(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[23] = 0x2F2E;
81108ad0:	e0bffe17 	ldw	r2,-8(fp)
81108ad4:	00cbcb84 	movi	r3,12078
81108ad8:	10c00b8d 	sth	r3,46(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[24] = 0x3130;
81108adc:	e0bffe17 	ldw	r2,-8(fp)
81108ae0:	00cc4c04 	movi	r3,12592
81108ae4:	10c00c0d 	sth	r3,48(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[25] = 0x3332;
81108ae8:	e0bffe17 	ldw	r2,-8(fp)
81108aec:	00cccc84 	movi	r3,13106
81108af0:	10c00c8d 	sth	r3,50(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[26] = 0x3534;
81108af4:	e0bffe17 	ldw	r2,-8(fp)
81108af8:	00cd4d04 	movi	r3,13620
81108afc:	10c00d0d 	sth	r3,52(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[27] = 0x3736;
81108b00:	e0bffe17 	ldw	r2,-8(fp)
81108b04:	00cdcd84 	movi	r3,14134
81108b08:	10c00d8d 	sth	r3,54(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[28] = 0x3938;
81108b0c:	e0bffe17 	ldw	r2,-8(fp)
81108b10:	00ce4e04 	movi	r3,14648
81108b14:	10c00e0d 	sth	r3,56(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[29] = 0x3B3A;
81108b18:	e0bffe17 	ldw	r2,-8(fp)
81108b1c:	00cece84 	movi	r3,15162
81108b20:	10c00e8d 	sth	r3,58(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[30] = 0x3D3C;
81108b24:	e0bffe17 	ldw	r2,-8(fp)
81108b28:	00cf4f04 	movi	r3,15676
81108b2c:	10c00f0d 	sth	r3,60(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[31] = 0x3F3E;
81108b30:	e0bffe17 	ldw	r2,-8(fp)
81108b34:	00cfcf84 	movi	r3,16190
81108b38:	10c00f8d 	sth	r3,62(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[32] = 0x4140;
81108b3c:	e0bffe17 	ldw	r2,-8(fp)
81108b40:	00d05004 	movi	r3,16704
81108b44:	10c0100d 	sth	r3,64(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[33] = 0x4342;
81108b48:	e0bffe17 	ldw	r2,-8(fp)
81108b4c:	00d0d084 	movi	r3,17218
81108b50:	10c0108d 	sth	r3,66(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[34] = 0x4544;
81108b54:	e0bffe17 	ldw	r2,-8(fp)
81108b58:	00d15104 	movi	r3,17732
81108b5c:	10c0110d 	sth	r3,68(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[35] = 0x4746;
81108b60:	e0bffe17 	ldw	r2,-8(fp)
81108b64:	00d1d184 	movi	r3,18246
81108b68:	10c0118d 	sth	r3,70(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[36] = 0x4948;
81108b6c:	e0bffe17 	ldw	r2,-8(fp)
81108b70:	00d25204 	movi	r3,18760
81108b74:	10c0120d 	sth	r3,72(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[37] = 0x4B4A;
81108b78:	e0bffe17 	ldw	r2,-8(fp)
81108b7c:	00d2d284 	movi	r3,19274
81108b80:	10c0128d 	sth	r3,74(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[38] = 0x4D4C;
81108b84:	e0bffe17 	ldw	r2,-8(fp)
81108b88:	00d35304 	movi	r3,19788
81108b8c:	10c0130d 	sth	r3,76(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[39] = 0x4F4E;
81108b90:	e0bffe17 	ldw	r2,-8(fp)
81108b94:	00d3d384 	movi	r3,20302
81108b98:	10c0138d 	sth	r3,78(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[40] = 0x5150;
81108b9c:	e0bffe17 	ldw	r2,-8(fp)
81108ba0:	00d45404 	movi	r3,20816
81108ba4:	10c0140d 	sth	r3,80(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[41] = 0x5352;
81108ba8:	e0bffe17 	ldw	r2,-8(fp)
81108bac:	00d4d484 	movi	r3,21330
81108bb0:	10c0148d 	sth	r3,82(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[42] = 0x5554;
81108bb4:	e0bffe17 	ldw	r2,-8(fp)
81108bb8:	00d55504 	movi	r3,21844
81108bbc:	10c0150d 	sth	r3,84(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[43] = 0x5756;
81108bc0:	e0bffe17 	ldw	r2,-8(fp)
81108bc4:	00d5d584 	movi	r3,22358
81108bc8:	10c0158d 	sth	r3,86(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[44] = 0x5958;
81108bcc:	e0bffe17 	ldw	r2,-8(fp)
81108bd0:	00d65604 	movi	r3,22872
81108bd4:	10c0160d 	sth	r3,88(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[45] = 0x5B5A;
81108bd8:	e0bffe17 	ldw	r2,-8(fp)
81108bdc:	00d6d684 	movi	r3,23386
81108be0:	10c0168d 	sth	r3,90(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[46] = 0x5D5C;
81108be4:	e0bffe17 	ldw	r2,-8(fp)
81108be8:	00d75704 	movi	r3,23900
81108bec:	10c0170d 	sth	r3,92(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[47] = 0x5F5E;
81108bf0:	e0bffe17 	ldw	r2,-8(fp)
81108bf4:	00d7d784 	movi	r3,24414
81108bf8:	10c0178d 	sth	r3,94(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[48] = 0x6160;
81108bfc:	e0bffe17 	ldw	r2,-8(fp)
81108c00:	00d85804 	movi	r3,24928
81108c04:	10c0180d 	sth	r3,96(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[49] = 0x6362;
81108c08:	e0bffe17 	ldw	r2,-8(fp)
81108c0c:	00d8d884 	movi	r3,25442
81108c10:	10c0188d 	sth	r3,98(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[50] = 0x6564;
81108c14:	e0bffe17 	ldw	r2,-8(fp)
81108c18:	00d95904 	movi	r3,25956
81108c1c:	10c0190d 	sth	r3,100(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[51] = 0x6766;
81108c20:	e0bffe17 	ldw	r2,-8(fp)
81108c24:	00d9d984 	movi	r3,26470
81108c28:	10c0198d 	sth	r3,102(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[52] = 0x6968;
81108c2c:	e0bffe17 	ldw	r2,-8(fp)
81108c30:	00da5a04 	movi	r3,26984
81108c34:	10c01a0d 	sth	r3,104(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[53] = 0x6B6A;
81108c38:	e0bffe17 	ldw	r2,-8(fp)
81108c3c:	00dada84 	movi	r3,27498
81108c40:	10c01a8d 	sth	r3,106(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[54] = 0x6D6C;
81108c44:	e0bffe17 	ldw	r2,-8(fp)
81108c48:	00db5b04 	movi	r3,28012
81108c4c:	10c01b0d 	sth	r3,108(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[55] = 0x6F6E;
81108c50:	e0bffe17 	ldw	r2,-8(fp)
81108c54:	00dbdb84 	movi	r3,28526
81108c58:	10c01b8d 	sth	r3,110(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[56] = 0x7170;
81108c5c:	e0bffe17 	ldw	r2,-8(fp)
81108c60:	00dc5c04 	movi	r3,29040
81108c64:	10c01c0d 	sth	r3,112(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[57] = 0x7372;
81108c68:	e0bffe17 	ldw	r2,-8(fp)
81108c6c:	00dcdc84 	movi	r3,29554
81108c70:	10c01c8d 	sth	r3,114(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[58] = 0x7574;
81108c74:	e0bffe17 	ldw	r2,-8(fp)
81108c78:	00dd5d04 	movi	r3,30068
81108c7c:	10c01d0d 	sth	r3,116(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[59] = 0x7776;
81108c80:	e0bffe17 	ldw	r2,-8(fp)
81108c84:	00dddd84 	movi	r3,30582
81108c88:	10c01d8d 	sth	r3,118(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[60] = 0x7978;
81108c8c:	e0bffe17 	ldw	r2,-8(fp)
81108c90:	00de5e04 	movi	r3,31096
81108c94:	10c01e0d 	sth	r3,120(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[61] = 0x7B7A;
81108c98:	e0bffe17 	ldw	r2,-8(fp)
81108c9c:	00dede84 	movi	r3,31610
81108ca0:	10c01e8d 	sth	r3,122(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[62] = 0x7D7C;
81108ca4:	e0bffe17 	ldw	r2,-8(fp)
81108ca8:	00df5f04 	movi	r3,32124
81108cac:	10c01f0d 	sth	r3,124(r2)
	pxBufferDataM2->xPixelDataBlock[0].usiPixel[63] = 0x7F7E;
81108cb0:	e0bffe17 	ldw	r2,-8(fp)
81108cb4:	00dfdf84 	movi	r3,32638
81108cb8:	10c01f8d 	sth	r3,126(r2)
	pxBufferDataM2->xPixelDataBlock[0].ulliMask = 0xFFFFFFFFFFFFFFFF;
81108cbc:	e0bffe17 	ldw	r2,-8(fp)
81108cc0:	00ffffc4 	movi	r3,-1
81108cc4:	10c02015 	stw	r3,128(r2)
81108cc8:	00ffffc4 	movi	r3,-1
81108ccc:	10c02115 	stw	r3,132(r2)

	pxBufferDataM2->xPixelDataBlock[1].usiPixel[0] = 0x8180;
81108cd0:	e0bffe17 	ldw	r2,-8(fp)
81108cd4:	00e06004 	movi	r3,-32384
81108cd8:	10c0220d 	sth	r3,136(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[1] = 0x8382;
81108cdc:	e0bffe17 	ldw	r2,-8(fp)
81108ce0:	00e0e084 	movi	r3,-31870
81108ce4:	10c0228d 	sth	r3,138(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[2] = 0x8584;
81108ce8:	e0bffe17 	ldw	r2,-8(fp)
81108cec:	00e16104 	movi	r3,-31356
81108cf0:	10c0230d 	sth	r3,140(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[3] = 0x8786;
81108cf4:	e0bffe17 	ldw	r2,-8(fp)
81108cf8:	00e1e184 	movi	r3,-30842
81108cfc:	10c0238d 	sth	r3,142(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[4] = 0x8988;
81108d00:	e0bffe17 	ldw	r2,-8(fp)
81108d04:	00e26204 	movi	r3,-30328
81108d08:	10c0240d 	sth	r3,144(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[5] = 0x8B8A;
81108d0c:	e0bffe17 	ldw	r2,-8(fp)
81108d10:	00e2e284 	movi	r3,-29814
81108d14:	10c0248d 	sth	r3,146(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[6] = 0x8D8C;
81108d18:	e0bffe17 	ldw	r2,-8(fp)
81108d1c:	00e36304 	movi	r3,-29300
81108d20:	10c0250d 	sth	r3,148(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[7] = 0x8F8E;
81108d24:	e0bffe17 	ldw	r2,-8(fp)
81108d28:	00e3e384 	movi	r3,-28786
81108d2c:	10c0258d 	sth	r3,150(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[8] = 0x9190;
81108d30:	e0bffe17 	ldw	r2,-8(fp)
81108d34:	00e46404 	movi	r3,-28272
81108d38:	10c0260d 	sth	r3,152(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[9] = 0x9392;
81108d3c:	e0bffe17 	ldw	r2,-8(fp)
81108d40:	00e4e484 	movi	r3,-27758
81108d44:	10c0268d 	sth	r3,154(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[10] = 0x9594;
81108d48:	e0bffe17 	ldw	r2,-8(fp)
81108d4c:	00e56504 	movi	r3,-27244
81108d50:	10c0270d 	sth	r3,156(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[11] = 0x9796;
81108d54:	e0bffe17 	ldw	r2,-8(fp)
81108d58:	00e5e584 	movi	r3,-26730
81108d5c:	10c0278d 	sth	r3,158(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[12] = 0x9998;
81108d60:	e0bffe17 	ldw	r2,-8(fp)
81108d64:	00e66604 	movi	r3,-26216
81108d68:	10c0280d 	sth	r3,160(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[13] = 0x9B9A;
81108d6c:	e0bffe17 	ldw	r2,-8(fp)
81108d70:	00e6e684 	movi	r3,-25702
81108d74:	10c0288d 	sth	r3,162(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[14] = 0x9D9C;
81108d78:	e0bffe17 	ldw	r2,-8(fp)
81108d7c:	00e76704 	movi	r3,-25188
81108d80:	10c0290d 	sth	r3,164(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[15] = 0x9F9E;
81108d84:	e0bffe17 	ldw	r2,-8(fp)
81108d88:	00e7e784 	movi	r3,-24674
81108d8c:	10c0298d 	sth	r3,166(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[16] = 0xA1A0;
81108d90:	e0bffe17 	ldw	r2,-8(fp)
81108d94:	00e86804 	movi	r3,-24160
81108d98:	10c02a0d 	sth	r3,168(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[17] = 0xA3A2;
81108d9c:	e0bffe17 	ldw	r2,-8(fp)
81108da0:	00e8e884 	movi	r3,-23646
81108da4:	10c02a8d 	sth	r3,170(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[18] = 0xA5A4;
81108da8:	e0bffe17 	ldw	r2,-8(fp)
81108dac:	00e96904 	movi	r3,-23132
81108db0:	10c02b0d 	sth	r3,172(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[19] = 0xA7A6;
81108db4:	e0bffe17 	ldw	r2,-8(fp)
81108db8:	00e9e984 	movi	r3,-22618
81108dbc:	10c02b8d 	sth	r3,174(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[20] = 0xA9A8;
81108dc0:	e0bffe17 	ldw	r2,-8(fp)
81108dc4:	00ea6a04 	movi	r3,-22104
81108dc8:	10c02c0d 	sth	r3,176(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[21] = 0xABAA;
81108dcc:	e0bffe17 	ldw	r2,-8(fp)
81108dd0:	00eaea84 	movi	r3,-21590
81108dd4:	10c02c8d 	sth	r3,178(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[22] = 0xADAC;
81108dd8:	e0bffe17 	ldw	r2,-8(fp)
81108ddc:	00eb6b04 	movi	r3,-21076
81108de0:	10c02d0d 	sth	r3,180(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[23] = 0xAFAE;
81108de4:	e0bffe17 	ldw	r2,-8(fp)
81108de8:	00ebeb84 	movi	r3,-20562
81108dec:	10c02d8d 	sth	r3,182(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[24] = 0xB1B0;
81108df0:	e0bffe17 	ldw	r2,-8(fp)
81108df4:	00ec6c04 	movi	r3,-20048
81108df8:	10c02e0d 	sth	r3,184(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[25] = 0xB3B2;
81108dfc:	e0bffe17 	ldw	r2,-8(fp)
81108e00:	00ecec84 	movi	r3,-19534
81108e04:	10c02e8d 	sth	r3,186(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[26] = 0xB5B4;
81108e08:	e0bffe17 	ldw	r2,-8(fp)
81108e0c:	00ed6d04 	movi	r3,-19020
81108e10:	10c02f0d 	sth	r3,188(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[27] = 0xB7B6;
81108e14:	e0bffe17 	ldw	r2,-8(fp)
81108e18:	00eded84 	movi	r3,-18506
81108e1c:	10c02f8d 	sth	r3,190(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[28] = 0xB9B8;
81108e20:	e0bffe17 	ldw	r2,-8(fp)
81108e24:	00ee6e04 	movi	r3,-17992
81108e28:	10c0300d 	sth	r3,192(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[29] = 0xBBBA;
81108e2c:	e0bffe17 	ldw	r2,-8(fp)
81108e30:	00eeee84 	movi	r3,-17478
81108e34:	10c0308d 	sth	r3,194(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[30] = 0xBDBC;
81108e38:	e0bffe17 	ldw	r2,-8(fp)
81108e3c:	00ef6f04 	movi	r3,-16964
81108e40:	10c0310d 	sth	r3,196(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[31] = 0xBFBE;
81108e44:	e0bffe17 	ldw	r2,-8(fp)
81108e48:	00efef84 	movi	r3,-16450
81108e4c:	10c0318d 	sth	r3,198(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[32] = 0xC1C0;
81108e50:	e0bffe17 	ldw	r2,-8(fp)
81108e54:	00f07004 	movi	r3,-15936
81108e58:	10c0320d 	sth	r3,200(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[33] = 0xC3C2;
81108e5c:	e0bffe17 	ldw	r2,-8(fp)
81108e60:	00f0f084 	movi	r3,-15422
81108e64:	10c0328d 	sth	r3,202(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[34] = 0xC5C4;
81108e68:	e0bffe17 	ldw	r2,-8(fp)
81108e6c:	00f17104 	movi	r3,-14908
81108e70:	10c0330d 	sth	r3,204(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[35] = 0xC7C6;
81108e74:	e0bffe17 	ldw	r2,-8(fp)
81108e78:	00f1f184 	movi	r3,-14394
81108e7c:	10c0338d 	sth	r3,206(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[36] = 0xC9C8;
81108e80:	e0bffe17 	ldw	r2,-8(fp)
81108e84:	00f27204 	movi	r3,-13880
81108e88:	10c0340d 	sth	r3,208(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[37] = 0xCBCA;
81108e8c:	e0bffe17 	ldw	r2,-8(fp)
81108e90:	00f2f284 	movi	r3,-13366
81108e94:	10c0348d 	sth	r3,210(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[38] = 0xCDCC;
81108e98:	e0bffe17 	ldw	r2,-8(fp)
81108e9c:	00f37304 	movi	r3,-12852
81108ea0:	10c0350d 	sth	r3,212(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[39] = 0xCFCE;
81108ea4:	e0bffe17 	ldw	r2,-8(fp)
81108ea8:	00f3f384 	movi	r3,-12338
81108eac:	10c0358d 	sth	r3,214(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[40] = 0xD1D0;
81108eb0:	e0bffe17 	ldw	r2,-8(fp)
81108eb4:	00f47404 	movi	r3,-11824
81108eb8:	10c0360d 	sth	r3,216(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[41] = 0xD3D2;
81108ebc:	e0bffe17 	ldw	r2,-8(fp)
81108ec0:	00f4f484 	movi	r3,-11310
81108ec4:	10c0368d 	sth	r3,218(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[42] = 0xD5D4;
81108ec8:	e0bffe17 	ldw	r2,-8(fp)
81108ecc:	00f57504 	movi	r3,-10796
81108ed0:	10c0370d 	sth	r3,220(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[43] = 0xD7D6;
81108ed4:	e0bffe17 	ldw	r2,-8(fp)
81108ed8:	00f5f584 	movi	r3,-10282
81108edc:	10c0378d 	sth	r3,222(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[44] = 0xD9D8;
81108ee0:	e0bffe17 	ldw	r2,-8(fp)
81108ee4:	00f67604 	movi	r3,-9768
81108ee8:	10c0380d 	sth	r3,224(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[45] = 0xDBDA;
81108eec:	e0bffe17 	ldw	r2,-8(fp)
81108ef0:	00f6f684 	movi	r3,-9254
81108ef4:	10c0388d 	sth	r3,226(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[46] = 0xDDDC;
81108ef8:	e0bffe17 	ldw	r2,-8(fp)
81108efc:	00f77704 	movi	r3,-8740
81108f00:	10c0390d 	sth	r3,228(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[47] = 0xDFDE;
81108f04:	e0bffe17 	ldw	r2,-8(fp)
81108f08:	00f7f784 	movi	r3,-8226
81108f0c:	10c0398d 	sth	r3,230(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[48] = 0xE1E0;
81108f10:	e0bffe17 	ldw	r2,-8(fp)
81108f14:	00f87804 	movi	r3,-7712
81108f18:	10c03a0d 	sth	r3,232(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[49] = 0xE3E2;
81108f1c:	e0bffe17 	ldw	r2,-8(fp)
81108f20:	00f8f884 	movi	r3,-7198
81108f24:	10c03a8d 	sth	r3,234(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[50] = 0xE5E4;
81108f28:	e0bffe17 	ldw	r2,-8(fp)
81108f2c:	00f97904 	movi	r3,-6684
81108f30:	10c03b0d 	sth	r3,236(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[51] = 0xE7E6;
81108f34:	e0bffe17 	ldw	r2,-8(fp)
81108f38:	00f9f984 	movi	r3,-6170
81108f3c:	10c03b8d 	sth	r3,238(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[52] = 0xE9E8;
81108f40:	e0bffe17 	ldw	r2,-8(fp)
81108f44:	00fa7a04 	movi	r3,-5656
81108f48:	10c03c0d 	sth	r3,240(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[53] = 0xEBEA;
81108f4c:	e0bffe17 	ldw	r2,-8(fp)
81108f50:	00fafa84 	movi	r3,-5142
81108f54:	10c03c8d 	sth	r3,242(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[54] = 0xEDEC;
81108f58:	e0bffe17 	ldw	r2,-8(fp)
81108f5c:	00fb7b04 	movi	r3,-4628
81108f60:	10c03d0d 	sth	r3,244(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[55] = 0xEFEE;
81108f64:	e0bffe17 	ldw	r2,-8(fp)
81108f68:	00fbfb84 	movi	r3,-4114
81108f6c:	10c03d8d 	sth	r3,246(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[56] = 0xF1F0;
81108f70:	e0bffe17 	ldw	r2,-8(fp)
81108f74:	00fc7c04 	movi	r3,-3600
81108f78:	10c03e0d 	sth	r3,248(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[57] = 0xF3F2;
81108f7c:	e0bffe17 	ldw	r2,-8(fp)
81108f80:	00fcfc84 	movi	r3,-3086
81108f84:	10c03e8d 	sth	r3,250(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[58] = 0xF5F4;
81108f88:	e0bffe17 	ldw	r2,-8(fp)
81108f8c:	00fd7d04 	movi	r3,-2572
81108f90:	10c03f0d 	sth	r3,252(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[59] = 0xF7F6;
81108f94:	e0bffe17 	ldw	r2,-8(fp)
81108f98:	00fdfd84 	movi	r3,-2058
81108f9c:	10c03f8d 	sth	r3,254(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[60] = 0xF9F8;
81108fa0:	e0bffe17 	ldw	r2,-8(fp)
81108fa4:	00fe7e04 	movi	r3,-1544
81108fa8:	10c0400d 	sth	r3,256(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[61] = 0xFBFA;
81108fac:	e0bffe17 	ldw	r2,-8(fp)
81108fb0:	00fefe84 	movi	r3,-1030
81108fb4:	10c0408d 	sth	r3,258(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[62] = 0xFDFC;
81108fb8:	e0bffe17 	ldw	r2,-8(fp)
81108fbc:	00ff7f04 	movi	r3,-516
81108fc0:	10c0410d 	sth	r3,260(r2)
	pxBufferDataM2->xPixelDataBlock[1].usiPixel[63] = 0xFFFE;
81108fc4:	e0bffe17 	ldw	r2,-8(fp)
81108fc8:	00ffff84 	movi	r3,-2
81108fcc:	10c0418d 	sth	r3,262(r2)
	pxBufferDataM2->xPixelDataBlock[1].ulliMask = 0xFFFFFFFFFFFFFFFF;
81108fd0:	e0bffe17 	ldw	r2,-8(fp)
81108fd4:	00ffffc4 	movi	r3,-1
81108fd8:	10c04215 	stw	r3,264(r2)
81108fdc:	00ffffc4 	movi	r3,-1
81108fe0:	10c04315 	stw	r3,268(r2)

	pxBufferDataM2->xPixelDataBlock[2] = pxBufferDataM2->xPixelDataBlock[0];
81108fe4:	e0bffe17 	ldw	r2,-8(fp)
81108fe8:	e0fffe17 	ldw	r3,-8(fp)
81108fec:	10804404 	addi	r2,r2,272
81108ff0:	1809883a 	mov	r4,r3
81108ff4:	00c02204 	movi	r3,136
81108ff8:	180d883a 	mov	r6,r3
81108ffc:	200b883a 	mov	r5,r4
81109000:	1009883a 	mov	r4,r2
81109004:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[3] = pxBufferDataM2->xPixelDataBlock[1];
81109008:	e0fffe17 	ldw	r3,-8(fp)
8110900c:	e0bffe17 	ldw	r2,-8(fp)
81109010:	18c06604 	addi	r3,r3,408
81109014:	10802204 	addi	r2,r2,136
81109018:	01002204 	movi	r4,136
8110901c:	200d883a 	mov	r6,r4
81109020:	100b883a 	mov	r5,r2
81109024:	1809883a 	mov	r4,r3
81109028:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[4] = pxBufferDataM2->xPixelDataBlock[2];
8110902c:	e0fffe17 	ldw	r3,-8(fp)
81109030:	e0bffe17 	ldw	r2,-8(fp)
81109034:	18c08804 	addi	r3,r3,544
81109038:	10804404 	addi	r2,r2,272
8110903c:	01002204 	movi	r4,136
81109040:	200d883a 	mov	r6,r4
81109044:	100b883a 	mov	r5,r2
81109048:	1809883a 	mov	r4,r3
8110904c:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[5] = pxBufferDataM2->xPixelDataBlock[3];
81109050:	e0fffe17 	ldw	r3,-8(fp)
81109054:	e0bffe17 	ldw	r2,-8(fp)
81109058:	18c0aa04 	addi	r3,r3,680
8110905c:	10806604 	addi	r2,r2,408
81109060:	01002204 	movi	r4,136
81109064:	200d883a 	mov	r6,r4
81109068:	100b883a 	mov	r5,r2
8110906c:	1809883a 	mov	r4,r3
81109070:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[6] = pxBufferDataM2->xPixelDataBlock[4];
81109074:	e0fffe17 	ldw	r3,-8(fp)
81109078:	e0bffe17 	ldw	r2,-8(fp)
8110907c:	18c0cc04 	addi	r3,r3,816
81109080:	10808804 	addi	r2,r2,544
81109084:	01002204 	movi	r4,136
81109088:	200d883a 	mov	r6,r4
8110908c:	100b883a 	mov	r5,r2
81109090:	1809883a 	mov	r4,r3
81109094:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[7] = pxBufferDataM2->xPixelDataBlock[5];
81109098:	e0fffe17 	ldw	r3,-8(fp)
8110909c:	e0bffe17 	ldw	r2,-8(fp)
811090a0:	18c0ee04 	addi	r3,r3,952
811090a4:	1080aa04 	addi	r2,r2,680
811090a8:	01002204 	movi	r4,136
811090ac:	200d883a 	mov	r6,r4
811090b0:	100b883a 	mov	r5,r2
811090b4:	1809883a 	mov	r4,r3
811090b8:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[8] = pxBufferDataM2->xPixelDataBlock[6];
811090bc:	e0fffe17 	ldw	r3,-8(fp)
811090c0:	e0bffe17 	ldw	r2,-8(fp)
811090c4:	18c11004 	addi	r3,r3,1088
811090c8:	1080cc04 	addi	r2,r2,816
811090cc:	01002204 	movi	r4,136
811090d0:	200d883a 	mov	r6,r4
811090d4:	100b883a 	mov	r5,r2
811090d8:	1809883a 	mov	r4,r3
811090dc:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[9] = pxBufferDataM2->xPixelDataBlock[7];
811090e0:	e0fffe17 	ldw	r3,-8(fp)
811090e4:	e0bffe17 	ldw	r2,-8(fp)
811090e8:	18c13204 	addi	r3,r3,1224
811090ec:	1080ee04 	addi	r2,r2,952
811090f0:	01002204 	movi	r4,136
811090f4:	200d883a 	mov	r6,r4
811090f8:	100b883a 	mov	r5,r2
811090fc:	1809883a 	mov	r4,r3
81109100:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[10] = pxBufferDataM2->xPixelDataBlock[8];
81109104:	e0fffe17 	ldw	r3,-8(fp)
81109108:	e0bffe17 	ldw	r2,-8(fp)
8110910c:	18c15404 	addi	r3,r3,1360
81109110:	10811004 	addi	r2,r2,1088
81109114:	01002204 	movi	r4,136
81109118:	200d883a 	mov	r6,r4
8110911c:	100b883a 	mov	r5,r2
81109120:	1809883a 	mov	r4,r3
81109124:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[11] = pxBufferDataM2->xPixelDataBlock[9];
81109128:	e0fffe17 	ldw	r3,-8(fp)
8110912c:	e0bffe17 	ldw	r2,-8(fp)
81109130:	18c17604 	addi	r3,r3,1496
81109134:	10813204 	addi	r2,r2,1224
81109138:	01002204 	movi	r4,136
8110913c:	200d883a 	mov	r6,r4
81109140:	100b883a 	mov	r5,r2
81109144:	1809883a 	mov	r4,r3
81109148:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[12] = pxBufferDataM2->xPixelDataBlock[10];
8110914c:	e0fffe17 	ldw	r3,-8(fp)
81109150:	e0bffe17 	ldw	r2,-8(fp)
81109154:	18c19804 	addi	r3,r3,1632
81109158:	10815404 	addi	r2,r2,1360
8110915c:	01002204 	movi	r4,136
81109160:	200d883a 	mov	r6,r4
81109164:	100b883a 	mov	r5,r2
81109168:	1809883a 	mov	r4,r3
8110916c:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[13] = pxBufferDataM2->xPixelDataBlock[11];
81109170:	e0fffe17 	ldw	r3,-8(fp)
81109174:	e0bffe17 	ldw	r2,-8(fp)
81109178:	18c1ba04 	addi	r3,r3,1768
8110917c:	10817604 	addi	r2,r2,1496
81109180:	01002204 	movi	r4,136
81109184:	200d883a 	mov	r6,r4
81109188:	100b883a 	mov	r5,r2
8110918c:	1809883a 	mov	r4,r3
81109190:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[14] = pxBufferDataM2->xPixelDataBlock[12];
81109194:	e0fffe17 	ldw	r3,-8(fp)
81109198:	e0bffe17 	ldw	r2,-8(fp)
8110919c:	18c1dc04 	addi	r3,r3,1904
811091a0:	10819804 	addi	r2,r2,1632
811091a4:	01002204 	movi	r4,136
811091a8:	200d883a 	mov	r6,r4
811091ac:	100b883a 	mov	r5,r2
811091b0:	1809883a 	mov	r4,r3
811091b4:	110c9d40 	call	8110c9d4 <memcpy>
	pxBufferDataM2->xPixelDataBlock[15] = pxBufferDataM2->xPixelDataBlock[13];
811091b8:	e0fffe17 	ldw	r3,-8(fp)
811091bc:	e0bffe17 	ldw	r2,-8(fp)
811091c0:	18c1fe04 	addi	r3,r3,2040
811091c4:	1081ba04 	addi	r2,r2,1768
811091c8:	01002204 	movi	r4,136
811091cc:	200d883a 	mov	r6,r4
811091d0:	100b883a 	mov	r5,r2
811091d4:	1809883a 	mov	r4,r3
811091d8:	110c9d40 	call	8110c9d4 <memcpy>
//		puliDdr++;
//	}

// init DMA

	if (bSdmaInitM1Dma()) {
811091dc:	11034540 	call	81103454 <bSdmaInitM1Dma>
811091e0:	10000726 	beq	r2,zero,81109200 <main+0x1658>
#ifdef DEBUG_ON
		debug(fp, "dma_m1 iniciado corretamente \n");
811091e4:	d0a02717 	ldw	r2,-32612(gp)
811091e8:	100f883a 	mov	r7,r2
811091ec:	01800784 	movi	r6,30
811091f0:	01400044 	movi	r5,1
811091f4:	012044b4 	movhi	r4,33042
811091f8:	2107ef04 	addi	r4,r4,8124
811091fc:	110bee00 	call	8110bee0 <fwrite>
#endif
	}

	if (bSdmaInitM2Dma()) {
81109200:	11034fc0 	call	811034fc <bSdmaInitM2Dma>
81109204:	10000726 	beq	r2,zero,81109224 <main+0x167c>
#ifdef DEBUG_ON
		debug(fp, "dma_m2 iniciado corretamente \n");
81109208:	d0a02717 	ldw	r2,-32612(gp)
8110920c:	100f883a 	mov	r7,r2
81109210:	01800784 	movi	r6,30
81109214:	01400044 	movi	r5,1
81109218:	012044b4 	movhi	r4,33042
8110921c:	2107f704 	addi	r4,r4,8156
81109220:	110bee00 	call	8110bee0 <fwrite>
#endif
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh1Buffer)) {
81109224:	01c00044 	movi	r7,1
81109228:	000d883a 	mov	r6,zero
8110922c:	01400404 	movi	r5,16
81109230:	0009883a 	mov	r4,zero
81109234:	11035a40 	call	811035a4 <bSdmaDmaM1Transfer>
81109238:	10000d26 	beq	r2,zero,81109270 <main+0x16c8>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh1Buffer)) {
8110923c:	01c00044 	movi	r7,1
81109240:	01800044 	movi	r6,1
81109244:	01400404 	movi	r5,16
81109248:	0009883a 	mov	r4,zero
8110924c:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
81109250:	10000726 	beq	r2,zero,81109270 <main+0x16c8>
#ifdef DEBUG_ON
			debug(fp, "channel a transferido corretamente \n");
81109254:	d0a02717 	ldw	r2,-32612(gp)
81109258:	100f883a 	mov	r7,r2
8110925c:	01800904 	movi	r6,36
81109260:	01400044 	movi	r5,1
81109264:	012044b4 	movhi	r4,33042
81109268:	2107ff04 	addi	r4,r4,8188
8110926c:	110bee00 	call	8110bee0 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh2Buffer)) {
81109270:	01c00084 	movi	r7,2
81109274:	000d883a 	mov	r6,zero
81109278:	01400404 	movi	r5,16
8110927c:	0009883a 	mov	r4,zero
81109280:	11035a40 	call	811035a4 <bSdmaDmaM1Transfer>
81109284:	10000d26 	beq	r2,zero,811092bc <main+0x1714>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh2Buffer)) {
81109288:	01c00084 	movi	r7,2
8110928c:	01800044 	movi	r6,1
81109290:	01400404 	movi	r5,16
81109294:	0009883a 	mov	r4,zero
81109298:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
8110929c:	10000726 	beq	r2,zero,811092bc <main+0x1714>
#ifdef DEBUG_ON
			debug(fp, "channel b transferido corretamente \n");
811092a0:	d0a02717 	ldw	r2,-32612(gp)
811092a4:	100f883a 	mov	r7,r2
811092a8:	01800904 	movi	r6,36
811092ac:	01400044 	movi	r5,1
811092b0:	012044b4 	movhi	r4,33042
811092b4:	21080904 	addi	r4,r4,8228
811092b8:	110bee00 	call	8110bee0 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh3Buffer)) {
811092bc:	01c000c4 	movi	r7,3
811092c0:	000d883a 	mov	r6,zero
811092c4:	01400404 	movi	r5,16
811092c8:	0009883a 	mov	r4,zero
811092cc:	11035a40 	call	811035a4 <bSdmaDmaM1Transfer>
811092d0:	10000d26 	beq	r2,zero,81109308 <main+0x1760>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh3Buffer)) {
811092d4:	01c000c4 	movi	r7,3
811092d8:	01800044 	movi	r6,1
811092dc:	01400404 	movi	r5,16
811092e0:	0009883a 	mov	r4,zero
811092e4:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
811092e8:	10000726 	beq	r2,zero,81109308 <main+0x1760>
#ifdef DEBUG_ON
			debug(fp, "channel c transferido corretamente \n");
811092ec:	d0a02717 	ldw	r2,-32612(gp)
811092f0:	100f883a 	mov	r7,r2
811092f4:	01800904 	movi	r6,36
811092f8:	01400044 	movi	r5,1
811092fc:	012044b4 	movhi	r4,33042
81109300:	21081304 	addi	r4,r4,8268
81109304:	110bee00 	call	8110bee0 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh4Buffer)) {
81109308:	01c00104 	movi	r7,4
8110930c:	000d883a 	mov	r6,zero
81109310:	01400404 	movi	r5,16
81109314:	0009883a 	mov	r4,zero
81109318:	11035a40 	call	811035a4 <bSdmaDmaM1Transfer>
8110931c:	10000d26 	beq	r2,zero,81109354 <main+0x17ac>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh4Buffer)) {
81109320:	01c00104 	movi	r7,4
81109324:	01800044 	movi	r6,1
81109328:	01400404 	movi	r5,16
8110932c:	0009883a 	mov	r4,zero
81109330:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
81109334:	10000726 	beq	r2,zero,81109354 <main+0x17ac>
#ifdef DEBUG_ON
			debug(fp, "channel d transferido corretamente \n");
81109338:	d0a02717 	ldw	r2,-32612(gp)
8110933c:	100f883a 	mov	r7,r2
81109340:	01800904 	movi	r6,36
81109344:	01400044 	movi	r5,1
81109348:	012044b4 	movhi	r4,33042
8110934c:	21081d04 	addi	r4,r4,8308
81109350:	110bee00 	call	8110bee0 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh5Buffer)) {
81109354:	01c00144 	movi	r7,5
81109358:	000d883a 	mov	r6,zero
8110935c:	01400404 	movi	r5,16
81109360:	0009883a 	mov	r4,zero
81109364:	11035a40 	call	811035a4 <bSdmaDmaM1Transfer>
81109368:	10000d26 	beq	r2,zero,811093a0 <main+0x17f8>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh5Buffer)) {
8110936c:	01c00144 	movi	r7,5
81109370:	01800044 	movi	r6,1
81109374:	01400404 	movi	r5,16
81109378:	0009883a 	mov	r4,zero
8110937c:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
81109380:	10000726 	beq	r2,zero,811093a0 <main+0x17f8>
#ifdef DEBUG_ON
			debug(fp, "channel e transferido corretamente \n");
81109384:	d0a02717 	ldw	r2,-32612(gp)
81109388:	100f883a 	mov	r7,r2
8110938c:	01800904 	movi	r6,36
81109390:	01400044 	movi	r5,1
81109394:	012044b4 	movhi	r4,33042
81109398:	21082704 	addi	r4,r4,8348
8110939c:	110bee00 	call	8110bee0 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh6Buffer)) {
811093a0:	01c00184 	movi	r7,6
811093a4:	000d883a 	mov	r6,zero
811093a8:	01400404 	movi	r5,16
811093ac:	0009883a 	mov	r4,zero
811093b0:	11035a40 	call	811035a4 <bSdmaDmaM1Transfer>
811093b4:	10000d26 	beq	r2,zero,811093ec <main+0x1844>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh6Buffer)) {
811093b8:	01c00184 	movi	r7,6
811093bc:	01800044 	movi	r6,1
811093c0:	01400404 	movi	r5,16
811093c4:	0009883a 	mov	r4,zero
811093c8:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
811093cc:	10000726 	beq	r2,zero,811093ec <main+0x1844>
#ifdef DEBUG_ON
			debug(fp, "channel f transferido corretamente \n");
811093d0:	d0a02717 	ldw	r2,-32612(gp)
811093d4:	100f883a 	mov	r7,r2
811093d8:	01800904 	movi	r6,36
811093dc:	01400044 	movi	r5,1
811093e0:	012044b4 	movhi	r4,33042
811093e4:	21083104 	addi	r4,r4,8388
811093e8:	110bee00 	call	8110bee0 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh7Buffer)) {
811093ec:	01c001c4 	movi	r7,7
811093f0:	000d883a 	mov	r6,zero
811093f4:	01400404 	movi	r5,16
811093f8:	0009883a 	mov	r4,zero
811093fc:	11035a40 	call	811035a4 <bSdmaDmaM1Transfer>
81109400:	10000d26 	beq	r2,zero,81109438 <main+0x1890>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh7Buffer)) {
81109404:	01c001c4 	movi	r7,7
81109408:	01800044 	movi	r6,1
8110940c:	01400404 	movi	r5,16
81109410:	0009883a 	mov	r4,zero
81109414:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
81109418:	10000726 	beq	r2,zero,81109438 <main+0x1890>
#ifdef DEBUG_ON
			debug(fp, "channel g transferido corretamente \n");
8110941c:	d0a02717 	ldw	r2,-32612(gp)
81109420:	100f883a 	mov	r7,r2
81109424:	01800904 	movi	r6,36
81109428:	01400044 	movi	r5,1
8110942c:	012044b4 	movhi	r4,33042
81109430:	21083b04 	addi	r4,r4,8428
81109434:	110bee00 	call	8110bee0 <fwrite>
#endif
		}
	}

	if (bSdmaDmaM1Transfer(0, 16, eSdmaRightBuffer, eSdmaCh8Buffer)) {
81109438:	01c00204 	movi	r7,8
8110943c:	000d883a 	mov	r6,zero
81109440:	01400404 	movi	r5,16
81109444:	0009883a 	mov	r4,zero
81109448:	11035a40 	call	811035a4 <bSdmaDmaM1Transfer>
8110944c:	10000d26 	beq	r2,zero,81109484 <main+0x18dc>
		if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh8Buffer)) {
81109450:	01c00204 	movi	r7,8
81109454:	01800044 	movi	r6,1
81109458:	01400404 	movi	r5,16
8110945c:	0009883a 	mov	r4,zero
81109460:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
81109464:	10000726 	beq	r2,zero,81109484 <main+0x18dc>
#ifdef DEBUG_ON
			debug(fp, "channel h transferido corretamente \n");
81109468:	d0a02717 	ldw	r2,-32612(gp)
8110946c:	100f883a 	mov	r7,r2
81109470:	01800904 	movi	r6,36
81109474:	01400044 	movi	r5,1
81109478:	012044b4 	movhi	r4,33042
8110947c:	21084504 	addi	r4,r4,8468
81109480:	110bee00 	call	8110bee0 <fwrite>
#endif
		}
	}

	bool bLoop = TRUE;
81109484:	00800044 	movi	r2,1
81109488:	e0bffa15 	stw	r2,-24(fp)

	while (bLoop) {
8110948c:	0000a206 	br	81109718 <main+0x1b70>
		usleep(5000);
81109490:	0104e204 	movi	r4,5000
81109494:	111c8240 	call	8111c824 <usleep>

		bSpwcGetLinkStatus(&xComm1.xSpacewire);
81109498:	012044b4 	movhi	r4,33042
8110949c:	2112e004 	addi	r4,r4,19328
811094a0:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
		if (xComm1.xSpacewire.xLinkStatus.bRunning) {
811094a4:	00a044b4 	movhi	r2,33042
811094a8:	10928c04 	addi	r2,r2,18992
811094ac:	10805e17 	ldw	r2,376(r2)
811094b0:	10000726 	beq	r2,zero,811094d0 <main+0x1928>
			bSetPainelLeds(LEDS_OFF, LEDS_1R_MASK);
811094b4:	01400084 	movi	r5,2
811094b8:	0009883a 	mov	r4,zero
811094bc:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_1G_MASK);
811094c0:	01400044 	movi	r5,1
811094c4:	01000044 	movi	r4,1
811094c8:	11059040 	call	81105904 <bSetPainelLeds>
811094cc:	00000606 	br	811094e8 <main+0x1940>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_1G_MASK);
811094d0:	01400044 	movi	r5,1
811094d4:	0009883a 	mov	r4,zero
811094d8:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_1R_MASK);
811094dc:	01400084 	movi	r5,2
811094e0:	01000044 	movi	r4,1
811094e4:	11059040 	call	81105904 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm2.xSpacewire);
811094e8:	012044b4 	movhi	r4,33042
811094ec:	21134004 	addi	r4,r4,19712
811094f0:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
		if (xComm2.xSpacewire.xLinkStatus.bRunning) {
811094f4:	00a044b4 	movhi	r2,33042
811094f8:	1092ec04 	addi	r2,r2,19376
811094fc:	10805e17 	ldw	r2,376(r2)
81109500:	10000726 	beq	r2,zero,81109520 <main+0x1978>
			bSetPainelLeds(LEDS_OFF, LEDS_2R_MASK);
81109504:	01400204 	movi	r5,8
81109508:	0009883a 	mov	r4,zero
8110950c:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_2G_MASK);
81109510:	01400104 	movi	r5,4
81109514:	01000044 	movi	r4,1
81109518:	11059040 	call	81105904 <bSetPainelLeds>
8110951c:	00000606 	br	81109538 <main+0x1990>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_2G_MASK);
81109520:	01400104 	movi	r5,4
81109524:	0009883a 	mov	r4,zero
81109528:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_2R_MASK);
8110952c:	01400204 	movi	r5,8
81109530:	01000044 	movi	r4,1
81109534:	11059040 	call	81105904 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm3.xSpacewire);
81109538:	012044b4 	movhi	r4,33042
8110953c:	21146004 	addi	r4,r4,20864
81109540:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
		if (xComm3.xSpacewire.xLinkStatus.bRunning) {
81109544:	00a044b4 	movhi	r2,33042
81109548:	10940c04 	addi	r2,r2,20528
8110954c:	10805e17 	ldw	r2,376(r2)
81109550:	10000726 	beq	r2,zero,81109570 <main+0x19c8>
			bSetPainelLeds(LEDS_OFF, LEDS_3R_MASK);
81109554:	01400804 	movi	r5,32
81109558:	0009883a 	mov	r4,zero
8110955c:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_3G_MASK);
81109560:	01400404 	movi	r5,16
81109564:	01000044 	movi	r4,1
81109568:	11059040 	call	81105904 <bSetPainelLeds>
8110956c:	00000606 	br	81109588 <main+0x19e0>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_3G_MASK);
81109570:	01400404 	movi	r5,16
81109574:	0009883a 	mov	r4,zero
81109578:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_3R_MASK);
8110957c:	01400804 	movi	r5,32
81109580:	01000044 	movi	r4,1
81109584:	11059040 	call	81105904 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm4.xSpacewire);
81109588:	012044b4 	movhi	r4,33042
8110958c:	21158004 	addi	r4,r4,22016
81109590:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
		if (xComm4.xSpacewire.xLinkStatus.bRunning) {
81109594:	00a044b4 	movhi	r2,33042
81109598:	10952c04 	addi	r2,r2,21680
8110959c:	10805e17 	ldw	r2,376(r2)
811095a0:	10000726 	beq	r2,zero,811095c0 <main+0x1a18>
			bSetPainelLeds(LEDS_OFF, LEDS_4R_MASK);
811095a4:	01402004 	movi	r5,128
811095a8:	0009883a 	mov	r4,zero
811095ac:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_4G_MASK);
811095b0:	01401004 	movi	r5,64
811095b4:	01000044 	movi	r4,1
811095b8:	11059040 	call	81105904 <bSetPainelLeds>
811095bc:	00000606 	br	811095d8 <main+0x1a30>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_4G_MASK);
811095c0:	01401004 	movi	r5,64
811095c4:	0009883a 	mov	r4,zero
811095c8:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_4R_MASK);
811095cc:	01402004 	movi	r5,128
811095d0:	01000044 	movi	r4,1
811095d4:	11059040 	call	81105904 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm5.xSpacewire);
811095d8:	012044b4 	movhi	r4,33042
811095dc:	21140004 	addi	r4,r4,20480
811095e0:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
		if (xComm5.xSpacewire.xLinkStatus.bRunning) {
811095e4:	00a044b4 	movhi	r2,33042
811095e8:	1093ac04 	addi	r2,r2,20144
811095ec:	10805e17 	ldw	r2,376(r2)
811095f0:	10000726 	beq	r2,zero,81109610 <main+0x1a68>
			bSetPainelLeds(LEDS_OFF, LEDS_5R_MASK);
811095f4:	01408004 	movi	r5,512
811095f8:	0009883a 	mov	r4,zero
811095fc:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_5G_MASK);
81109600:	01404004 	movi	r5,256
81109604:	01000044 	movi	r4,1
81109608:	11059040 	call	81105904 <bSetPainelLeds>
8110960c:	00000606 	br	81109628 <main+0x1a80>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_5G_MASK);
81109610:	01404004 	movi	r5,256
81109614:	0009883a 	mov	r4,zero
81109618:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_5R_MASK);
8110961c:	01408004 	movi	r5,512
81109620:	01000044 	movi	r4,1
81109624:	11059040 	call	81105904 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm6.xSpacewire);
81109628:	012044b4 	movhi	r4,33042
8110962c:	2113a004 	addi	r4,r4,20096
81109630:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
		if (xComm6.xSpacewire.xLinkStatus.bRunning) {
81109634:	00a044b4 	movhi	r2,33042
81109638:	10934c04 	addi	r2,r2,19760
8110963c:	10805e17 	ldw	r2,376(r2)
81109640:	10000726 	beq	r2,zero,81109660 <main+0x1ab8>
			bSetPainelLeds(LEDS_OFF, LEDS_6R_MASK);
81109644:	01420004 	movi	r5,2048
81109648:	0009883a 	mov	r4,zero
8110964c:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_6G_MASK);
81109650:	01410004 	movi	r5,1024
81109654:	01000044 	movi	r4,1
81109658:	11059040 	call	81105904 <bSetPainelLeds>
8110965c:	00000606 	br	81109678 <main+0x1ad0>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_6G_MASK);
81109660:	01410004 	movi	r5,1024
81109664:	0009883a 	mov	r4,zero
81109668:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_6R_MASK);
8110966c:	01420004 	movi	r5,2048
81109670:	01000044 	movi	r4,1
81109674:	11059040 	call	81105904 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm7.xSpacewire);
81109678:	012044b4 	movhi	r4,33042
8110967c:	2114c004 	addi	r4,r4,21248
81109680:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
		if (xComm7.xSpacewire.xLinkStatus.bRunning) {
81109684:	00a044b4 	movhi	r2,33042
81109688:	10946c04 	addi	r2,r2,20912
8110968c:	10805e17 	ldw	r2,376(r2)
81109690:	10000726 	beq	r2,zero,811096b0 <main+0x1b08>
			bSetPainelLeds(LEDS_OFF, LEDS_7R_MASK);
81109694:	01480004 	movi	r5,8192
81109698:	0009883a 	mov	r4,zero
8110969c:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_7G_MASK);
811096a0:	01440004 	movi	r5,4096
811096a4:	01000044 	movi	r4,1
811096a8:	11059040 	call	81105904 <bSetPainelLeds>
811096ac:	00000606 	br	811096c8 <main+0x1b20>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_7G_MASK);
811096b0:	01440004 	movi	r5,4096
811096b4:	0009883a 	mov	r4,zero
811096b8:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_7R_MASK);
811096bc:	01480004 	movi	r5,8192
811096c0:	01000044 	movi	r4,1
811096c4:	11059040 	call	81105904 <bSetPainelLeds>
		}

		bSpwcGetLinkStatus(&xComm8.xSpacewire);
811096c8:	012044b4 	movhi	r4,33042
811096cc:	21152004 	addi	r4,r4,21632
811096d0:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
		if (xComm8.xSpacewire.xLinkStatus.bRunning) {
811096d4:	00a044b4 	movhi	r2,33042
811096d8:	1094cc04 	addi	r2,r2,21296
811096dc:	10805e17 	ldw	r2,376(r2)
811096e0:	10000726 	beq	r2,zero,81109700 <main+0x1b58>
			bSetPainelLeds(LEDS_OFF, LEDS_8R_MASK);
811096e4:	01600014 	movui	r5,32768
811096e8:	0009883a 	mov	r4,zero
811096ec:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_8G_MASK);
811096f0:	01500004 	movi	r5,16384
811096f4:	01000044 	movi	r4,1
811096f8:	11059040 	call	81105904 <bSetPainelLeds>
811096fc:	00000606 	br	81109718 <main+0x1b70>
		} else {
			bSetPainelLeds(LEDS_OFF, LEDS_8G_MASK);
81109700:	01500004 	movi	r5,16384
81109704:	0009883a 	mov	r4,zero
81109708:	11059040 	call	81105904 <bSetPainelLeds>
			bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
8110970c:	01600014 	movui	r5,32768
81109710:	01000044 	movi	r4,1
81109714:	11059040 	call	81105904 <bSetPainelLeds>
		}
	}

	bool bLoop = TRUE;

	while (bLoop) {
81109718:	e0bffa17 	ldw	r2,-24(fp)
8110971c:	103f5c1e 	bne	r2,zero,81109490 <__reset+0xfb0e9490>
			bSetPainelLeds(LEDS_OFF, LEDS_8G_MASK);
			bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
		}
	}

	while (bLoop) {
81109720:	00009006 	br	81109964 <main+0x1dbc>
#ifdef DEBUG_ON
		debug(fp, "selecione memoria \n");
81109724:	d0a02717 	ldw	r2,-32612(gp)
81109728:	100f883a 	mov	r7,r2
8110972c:	018004c4 	movi	r6,19
81109730:	01400044 	movi	r5,1
81109734:	012044b4 	movhi	r4,33042
81109738:	21084f04 	addi	r4,r4,8508
8110973c:	110bee00 	call	8110bee0 <fwrite>
		switch (getchar()) {
81109740:	d0a00317 	ldw	r2,-32756(gp)
81109744:	10800117 	ldw	r2,4(r2)
81109748:	1009883a 	mov	r4,r2
8110974c:	110bf840 	call	8110bf84 <getc>
81109750:	10c00ca0 	cmpeqi	r3,r2,50
81109754:	18001f1e 	bne	r3,zero,811097d4 <main+0x1c2c>
81109758:	10c00cc8 	cmpgei	r3,r2,51
8110975c:	1800031e 	bne	r3,zero,8110976c <main+0x1bc4>
81109760:	10800c60 	cmpeqi	r2,r2,49
81109764:	1000061e 	bne	r2,zero,81109780 <main+0x1bd8>
81109768:	00006706 	br	81109908 <main+0x1d60>
8110976c:	10c01860 	cmpeqi	r3,r2,97
81109770:	18002d1e 	bne	r3,zero,81109828 <main+0x1c80>
81109774:	10801ca0 	cmpeqi	r2,r2,114
81109778:	1000531e 	bne	r2,zero,811098c8 <main+0x1d20>
8110977c:	00006206 	br	81109908 <main+0x1d60>
		case '1':
			debug(fp, "m2 R \n")
81109780:	d0a02717 	ldw	r2,-32612(gp)
81109784:	100f883a 	mov	r7,r2
81109788:	01800184 	movi	r6,6
8110978c:	01400044 	movi	r5,1
81109790:	012044b4 	movhi	r4,33042
81109794:	21085404 	addi	r4,r4,8528
81109798:	110bee00 	call	8110bee0 <fwrite>
			;
			if (bSdmaDmaM2Transfer(0, 16, eSdmaRightBuffer, eSdmaCh1Buffer)) {
8110979c:	01c00044 	movi	r7,1
811097a0:	000d883a 	mov	r6,zero
811097a4:	01400404 	movi	r5,16
811097a8:	0009883a 	mov	r4,zero
811097ac:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
811097b0:	10006c26 	beq	r2,zero,81109964 <main+0x1dbc>

				debug(fp, "dma_m2 transferido corretamente \n");
811097b4:	d0a02717 	ldw	r2,-32612(gp)
811097b8:	100f883a 	mov	r7,r2
811097bc:	01800844 	movi	r6,33
811097c0:	01400044 	movi	r5,1
811097c4:	012044b4 	movhi	r4,33042
811097c8:	21085604 	addi	r4,r4,8536
811097cc:	110bee00 	call	8110bee0 <fwrite>

			}
			break;
811097d0:	00006406 	br	81109964 <main+0x1dbc>

		case '2':
			debug(fp, "m2 L \n")
811097d4:	d0a02717 	ldw	r2,-32612(gp)
811097d8:	100f883a 	mov	r7,r2
811097dc:	01800184 	movi	r6,6
811097e0:	01400044 	movi	r5,1
811097e4:	012044b4 	movhi	r4,33042
811097e8:	21085f04 	addi	r4,r4,8572
811097ec:	110bee00 	call	8110bee0 <fwrite>
			;
			if (bSdmaDmaM2Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh1Buffer)) {
811097f0:	01c00044 	movi	r7,1
811097f4:	01800044 	movi	r6,1
811097f8:	01400404 	movi	r5,16
811097fc:	0009883a 	mov	r4,zero
81109800:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
81109804:	10005726 	beq	r2,zero,81109964 <main+0x1dbc>
				debug(fp, "dma_m2 transferido corretamente \n");
81109808:	d0a02717 	ldw	r2,-32612(gp)
8110980c:	100f883a 	mov	r7,r2
81109810:	01800844 	movi	r6,33
81109814:	01400044 	movi	r5,1
81109818:	012044b4 	movhi	r4,33042
8110981c:	21085604 	addi	r4,r4,8536
81109820:	110bee00 	call	8110bee0 <fwrite>

			}
			break;
81109824:	00004f06 	br	81109964 <main+0x1dbc>

		case 'a':
			debug(fp, "a \n")
81109828:	d0a02717 	ldw	r2,-32612(gp)
8110982c:	100f883a 	mov	r7,r2
81109830:	018000c4 	movi	r6,3
81109834:	01400044 	movi	r5,1
81109838:	012044b4 	movhi	r4,33042
8110983c:	21086104 	addi	r4,r4,8580
81109840:	110bee00 	call	8110bee0 <fwrite>
			;
			if (bSdmaDmaM2Transfer(0, 16, eSdmaRightBuffer, eSdmaCh1Buffer)) {
81109844:	01c00044 	movi	r7,1
81109848:	000d883a 	mov	r6,zero
8110984c:	01400404 	movi	r5,16
81109850:	0009883a 	mov	r4,zero
81109854:	11039cc0 	call	811039cc <bSdmaDmaM2Transfer>
81109858:	10000726 	beq	r2,zero,81109878 <main+0x1cd0>
				debug(fp, "dma_m2 transferido corretamente \n");
8110985c:	d0a02717 	ldw	r2,-32612(gp)
81109860:	100f883a 	mov	r7,r2
81109864:	01800844 	movi	r6,33
81109868:	01400044 	movi	r5,1
8110986c:	012044b4 	movhi	r4,33042
81109870:	21085604 	addi	r4,r4,8536
81109874:	110bee00 	call	8110bee0 <fwrite>
			}
//			if (bSdmaDmaM1Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh1Buffer)) {
//				debug(fp, "dma_m1 transferido corretamente \n");
//			}
			usleep(500);
81109878:	01007d04 	movi	r4,500
8110987c:	111c8240 	call	8111c824 <usleep>
			bFeebGetBuffersStatus(&xComm1.xFeeBuffer);
81109880:	012044b4 	movhi	r4,33042
81109884:	21129504 	addi	r4,r4,19028
81109888:	11048a40 	call	811048a4 <bFeebGetBuffersStatus>
			sprintf(cDebugBuffer, "empty: %u \n",
					xComm1.xFeeBuffer.xBufferStatus.bRightBufferEmpty);
8110988c:	00a044b4 	movhi	r2,33042
81109890:	10928c04 	addi	r2,r2,18992
81109894:	10800f17 	ldw	r2,60(r2)
//			if (bSdmaDmaM1Transfer(0, 16, eSdmaLeftBuffer, eSdmaCh1Buffer)) {
//				debug(fp, "dma_m1 transferido corretamente \n");
//			}
			usleep(500);
			bFeebGetBuffersStatus(&xComm1.xFeeBuffer);
			sprintf(cDebugBuffer, "empty: %u \n",
81109898:	100d883a 	mov	r6,r2
8110989c:	016044b4 	movhi	r5,33042
811098a0:	29486204 	addi	r5,r5,8584
811098a4:	012044b4 	movhi	r4,33042
811098a8:	21114c04 	addi	r4,r4,17712
811098ac:	110cfc80 	call	8110cfc8 <sprintf>
					xComm1.xFeeBuffer.xBufferStatus.bRightBufferEmpty);
			debug(fp, cDebugBuffer)
811098b0:	d0a02717 	ldw	r2,-32612(gp)
811098b4:	016044b4 	movhi	r5,33042
811098b8:	29514c04 	addi	r5,r5,17712
811098bc:	1009883a 	mov	r4,r2
811098c0:	110b9140 	call	8110b914 <fprintf>
			;
			break;
811098c4:	00002706 	br	81109964 <main+0x1dbc>

		case 'r':
			sprintf(cDebugBuffer, "r \n");
811098c8:	00a044b4 	movhi	r2,33042
811098cc:	10914c04 	addi	r2,r2,17712
811098d0:	00c01c84 	movi	r3,114
811098d4:	10c00005 	stb	r3,0(r2)
811098d8:	00c00804 	movi	r3,32
811098dc:	10c00045 	stb	r3,1(r2)
811098e0:	00c00284 	movi	r3,10
811098e4:	10c00085 	stb	r3,2(r2)
811098e8:	100000c5 	stb	zero,3(r2)
			debug(fp, cDebugBuffer)
811098ec:	d0a02717 	ldw	r2,-32612(gp)
811098f0:	016044b4 	movhi	r5,33042
811098f4:	29514c04 	addi	r5,r5,17712
811098f8:	1009883a 	mov	r4,r2
811098fc:	110b9140 	call	8110b914 <fprintf>
			;
			bLoop = FALSE;
81109900:	e03ffa15 	stw	zero,-24(fp)
			break;
81109904:	00001706 	br	81109964 <main+0x1dbc>

		default:
			sprintf(cDebugBuffer, "errou \n");
81109908:	00a044b4 	movhi	r2,33042
8110990c:	10914c04 	addi	r2,r2,17712
81109910:	00c01944 	movi	r3,101
81109914:	10c00005 	stb	r3,0(r2)
81109918:	00c01c84 	movi	r3,114
8110991c:	10c00045 	stb	r3,1(r2)
81109920:	00c01c84 	movi	r3,114
81109924:	10c00085 	stb	r3,2(r2)
81109928:	00c01bc4 	movi	r3,111
8110992c:	10c000c5 	stb	r3,3(r2)
81109930:	00c01d44 	movi	r3,117
81109934:	10c00105 	stb	r3,4(r2)
81109938:	00c00804 	movi	r3,32
8110993c:	10c00145 	stb	r3,5(r2)
81109940:	00c00284 	movi	r3,10
81109944:	10c00185 	stb	r3,6(r2)
81109948:	100001c5 	stb	zero,7(r2)
			debug(fp, cDebugBuffer)
8110994c:	d0a02717 	ldw	r2,-32612(gp)
81109950:	016044b4 	movhi	r5,33042
81109954:	29514c04 	addi	r5,r5,17712
81109958:	1009883a 	mov	r4,r2
8110995c:	110b9140 	call	8110b914 <fprintf>
			;
			break;
81109960:	0001883a 	nop
			bSetPainelLeds(LEDS_OFF, LEDS_8G_MASK);
			bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
		}
	}

	while (bLoop) {
81109964:	e0bffa17 	ldw	r2,-24(fp)
81109968:	103f6e1e 	bne	r2,zero,81109724 <__reset+0xfb0e9724>
			break;
		}
	}
#endif

	bSpwcSetLink(&xComm1.xSpacewire);
8110996c:	012044b4 	movhi	r4,33042
81109970:	2112e004 	addi	r4,r4,19328
81109974:	11049dc0 	call	811049dc <bSpwcSetLink>
	bSpwcSetLink(&xComm8.xSpacewire);
81109978:	012044b4 	movhi	r4,33042
8110997c:	21152004 	addi	r4,r4,21632
81109980:	11049dc0 	call	811049dc <bSpwcSetLink>

	//*xComm1.puliSpwcChAddr = 0x102;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "%08lX", *(xComm1.xSpacewire.puliSpwcChAddr));
81109984:	00a044b4 	movhi	r2,33042
81109988:	10928c04 	addi	r2,r2,18992
8110998c:	10805417 	ldw	r2,336(r2)
81109990:	10800017 	ldw	r2,0(r2)
81109994:	100d883a 	mov	r6,r2
81109998:	016044b4 	movhi	r5,33042
8110999c:	29486504 	addi	r5,r5,8596
811099a0:	012044b4 	movhi	r4,33042
811099a4:	21114c04 	addi	r4,r4,17712
811099a8:	110cfc80 	call	8110cfc8 <sprintf>
	debug(fp, cDebugBuffer);
811099ac:	d0a02717 	ldw	r2,-32612(gp)
811099b0:	016044b4 	movhi	r5,33042
811099b4:	29514c04 	addi	r5,r5,17712
811099b8:	1009883a 	mov	r4,r2
811099bc:	110b9140 	call	8110b914 <fprintf>
#endif
	usleep(10000);
811099c0:	0109c404 	movi	r4,10000
811099c4:	111c8240 	call	8111c824 <usleep>

	bSpwcGetLinkStatus(&xComm1.xSpacewire);
811099c8:	012044b4 	movhi	r4,33042
811099cc:	2112e004 	addi	r4,r4,19328
811099d0:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
	if (xComm1.xSpacewire.xLinkStatus.bRunning) {
811099d4:	00a044b4 	movhi	r2,33042
811099d8:	10928c04 	addi	r2,r2,18992
811099dc:	10805e17 	ldw	r2,376(r2)
811099e0:	10000726 	beq	r2,zero,81109a00 <main+0x1e58>
		bSetPainelLeds(LEDS_OFF, LEDS_1R_MASK);
811099e4:	01400084 	movi	r5,2
811099e8:	0009883a 	mov	r4,zero
811099ec:	11059040 	call	81105904 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, LEDS_1G_MASK);
811099f0:	01400044 	movi	r5,1
811099f4:	01000044 	movi	r4,1
811099f8:	11059040 	call	81105904 <bSetPainelLeds>
811099fc:	00000606 	br	81109a18 <main+0x1e70>
	} else {
		bSetPainelLeds(LEDS_OFF, LEDS_1G_MASK);
81109a00:	01400044 	movi	r5,1
81109a04:	0009883a 	mov	r4,zero
81109a08:	11059040 	call	81105904 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, LEDS_1R_MASK);
81109a0c:	01400084 	movi	r5,2
81109a10:	01000044 	movi	r4,1
81109a14:	11059040 	call	81105904 <bSetPainelLeds>
	}

	bSpwcGetLinkStatus(&xComm8.xSpacewire);
81109a18:	012044b4 	movhi	r4,33042
81109a1c:	21152004 	addi	r4,r4,21632
81109a20:	1104c880 	call	81104c88 <bSpwcGetLinkStatus>
	if (xComm8.xSpacewire.xLinkStatus.bRunning) {
81109a24:	00a044b4 	movhi	r2,33042
81109a28:	1094cc04 	addi	r2,r2,21296
81109a2c:	10805e17 	ldw	r2,376(r2)
81109a30:	10000726 	beq	r2,zero,81109a50 <main+0x1ea8>
		bSetPainelLeds(LEDS_OFF, LEDS_8R_MASK);
81109a34:	01600014 	movui	r5,32768
81109a38:	0009883a 	mov	r4,zero
81109a3c:	11059040 	call	81105904 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, LEDS_8G_MASK);
81109a40:	01500004 	movi	r5,16384
81109a44:	01000044 	movi	r4,1
81109a48:	11059040 	call	81105904 <bSetPainelLeds>
81109a4c:	00000606 	br	81109a68 <main+0x1ec0>
	} else {
		bSetPainelLeds(LEDS_OFF, LEDS_8G_MASK);
81109a50:	01500004 	movi	r5,16384
81109a54:	0009883a 	mov	r4,zero
81109a58:	11059040 	call	81105904 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
81109a5c:	01600014 	movui	r5,32768
81109a60:	01000044 	movi	r4,1
81109a64:	11059040 	call	81105904 <bSetPainelLeds>
	}

	int i = 0;
81109a68:	e03ffb15 	stw	zero,-20(fp)
	bLoop = TRUE;
81109a6c:	00800044 	movi	r2,1
81109a70:	e0bffa15 	stw	r2,-24(fp)
	while (bLoop) {
81109a74:	00002906 	br	81109b1c <main+0x1f74>
		for (i = 0; i < 1000; i++) {
81109a78:	e03ffb15 	stw	zero,-20(fp)
81109a7c:	00000506 	br	81109a94 <main+0x1eec>
			usleep(1000);
81109a80:	0100fa04 	movi	r4,1000
81109a84:	111c8240 	call	8111c824 <usleep>
	}

	int i = 0;
	bLoop = TRUE;
	while (bLoop) {
		for (i = 0; i < 1000; i++) {
81109a88:	e0bffb17 	ldw	r2,-20(fp)
81109a8c:	10800044 	addi	r2,r2,1
81109a90:	e0bffb15 	stw	r2,-20(fp)
81109a94:	e0bffb17 	ldw	r2,-20(fp)
81109a98:	1080fa10 	cmplti	r2,r2,1000
81109a9c:	103ff81e 	bne	r2,zero,81109a80 <__reset+0xfb0e9a80>
			usleep(1000);
		}
#ifdef DEBUG_ON
		bFeebGetBuffersStatus(&xComm1.xFeeBuffer);
81109aa0:	012044b4 	movhi	r4,33042
81109aa4:	21129504 	addi	r4,r4,19028
81109aa8:	11048a40 	call	811048a4 <bFeebGetBuffersStatus>
		sprintf(cDebugBuffer, "empty r: %u \n",
				xComm1.xFeeBuffer.xBufferStatus.bRightBufferEmpty);
81109aac:	00a044b4 	movhi	r2,33042
81109ab0:	10928c04 	addi	r2,r2,18992
81109ab4:	10800f17 	ldw	r2,60(r2)
		for (i = 0; i < 1000; i++) {
			usleep(1000);
		}
#ifdef DEBUG_ON
		bFeebGetBuffersStatus(&xComm1.xFeeBuffer);
		sprintf(cDebugBuffer, "empty r: %u \n",
81109ab8:	100d883a 	mov	r6,r2
81109abc:	016044b4 	movhi	r5,33042
81109ac0:	29486704 	addi	r5,r5,8604
81109ac4:	012044b4 	movhi	r4,33042
81109ac8:	21114c04 	addi	r4,r4,17712
81109acc:	110cfc80 	call	8110cfc8 <sprintf>
				xComm1.xFeeBuffer.xBufferStatus.bRightBufferEmpty);
		debug(fp, cDebugBuffer);
81109ad0:	d0a02717 	ldw	r2,-32612(gp)
81109ad4:	016044b4 	movhi	r5,33042
81109ad8:	29514c04 	addi	r5,r5,17712
81109adc:	1009883a 	mov	r4,r2
81109ae0:	110b9140 	call	8110b914 <fprintf>
		sprintf(cDebugBuffer, "empty l: %u \n",
				xComm1.xFeeBuffer.xBufferStatus.bLeftBufferEmpty);
81109ae4:	00a044b4 	movhi	r2,33042
81109ae8:	10928c04 	addi	r2,r2,18992
81109aec:	10800e17 	ldw	r2,56(r2)
#ifdef DEBUG_ON
		bFeebGetBuffersStatus(&xComm1.xFeeBuffer);
		sprintf(cDebugBuffer, "empty r: %u \n",
				xComm1.xFeeBuffer.xBufferStatus.bRightBufferEmpty);
		debug(fp, cDebugBuffer);
		sprintf(cDebugBuffer, "empty l: %u \n",
81109af0:	100d883a 	mov	r6,r2
81109af4:	016044b4 	movhi	r5,33042
81109af8:	29486b04 	addi	r5,r5,8620
81109afc:	012044b4 	movhi	r4,33042
81109b00:	21114c04 	addi	r4,r4,17712
81109b04:	110cfc80 	call	8110cfc8 <sprintf>
				xComm1.xFeeBuffer.xBufferStatus.bLeftBufferEmpty);
		debug(fp, cDebugBuffer);
81109b08:	d0a02717 	ldw	r2,-32612(gp)
81109b0c:	016044b4 	movhi	r5,33042
81109b10:	29514c04 	addi	r5,r5,17712
81109b14:	1009883a 	mov	r4,r2
81109b18:	110b9140 	call	8110b914 <fprintf>
		bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
	}

	int i = 0;
	bLoop = TRUE;
	while (bLoop) {
81109b1c:	e0bffa17 	ldw	r2,-24(fp)
81109b20:	103fd51e 	bne	r2,zero,81109a78 <__reset+0xfb0e9a78>

//}

//getchar();
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "passou 1 \n");
81109b24:	00a044b4 	movhi	r2,33042
81109b28:	10914c04 	addi	r2,r2,17712
81109b2c:	00c01c04 	movi	r3,112
81109b30:	10c00005 	stb	r3,0(r2)
81109b34:	00c01844 	movi	r3,97
81109b38:	10c00045 	stb	r3,1(r2)
81109b3c:	00c01cc4 	movi	r3,115
81109b40:	10c00085 	stb	r3,2(r2)
81109b44:	00c01cc4 	movi	r3,115
81109b48:	10c000c5 	stb	r3,3(r2)
81109b4c:	00c01bc4 	movi	r3,111
81109b50:	10c00105 	stb	r3,4(r2)
81109b54:	00c01d44 	movi	r3,117
81109b58:	10c00145 	stb	r3,5(r2)
81109b5c:	00c00804 	movi	r3,32
81109b60:	10c00185 	stb	r3,6(r2)
81109b64:	00c00c44 	movi	r3,49
81109b68:	10c001c5 	stb	r3,7(r2)
81109b6c:	00c00804 	movi	r3,32
81109b70:	10c00205 	stb	r3,8(r2)
81109b74:	00c00284 	movi	r3,10
81109b78:	10c00245 	stb	r3,9(r2)
81109b7c:	10000285 	stb	zero,10(r2)
	debug(fp, cDebugBuffer);
81109b80:	d0a02717 	ldw	r2,-32612(gp)
81109b84:	016044b4 	movhi	r5,33042
81109b88:	29514c04 	addi	r5,r5,17712
81109b8c:	1009883a 	mov	r4,r2
81109b90:	110b9140 	call	8110b914 <fprintf>
//printf("%d \n", data);

//if (*pSrc++ != *pDes++){

//Realiza teste dos LEDS, entra em um bLoop infinito.
	vTestLeds();
81109b94:	1109bd80 	call	81109bd8 <vTestLeds>

//Teste de transferencia com DMA (M2 -> M1);
//TestDMA_M2_M1();

//Acende os leds de status e atualiza a temperatura da FPGA no display de 7 segmentos a cada 1 segundo
	bSetPainelLeds(LEDS_ON, LEDS_ST_ALL_MASK);
81109b98:	014007f4 	movhi	r5,31
81109b9c:	01000044 	movi	r4,1
81109ba0:	11059040 	call	81105904 <bSetPainelLeds>

//FTDI_WRITE_REG(FTDI_BYTE_ENABLE_BURST_REG_OFFSET, 0b00001111);
//FTDI_WRITE_REG(FTDI_DATA_BURST_REG_OFFSET, 0xF0A0B0C0);

	while (1) {
		TEMP_Read(&ucTempFpga, &ucTempBoard);
81109ba4:	e0ffff44 	addi	r3,fp,-3
81109ba8:	e0bfff04 	addi	r2,fp,-4
81109bac:	180b883a 	mov	r5,r3
81109bb0:	1009883a 	mov	r4,r2
81109bb4:	1102ba00 	call	81102ba0 <TEMP_Read>
		bSSDisplayUpdate(ucTempFpga);
81109bb8:	e0bfff03 	ldbu	r2,-4(fp)
81109bbc:	10803fcc 	andi	r2,r2,255
81109bc0:	1009883a 	mov	r4,r2
81109bc4:	1106e200 	call	81106e20 <bSSDisplayUpdate>
		usleep(1000 * 1000);
81109bc8:	010003f4 	movhi	r4,15
81109bcc:	21109004 	addi	r4,r4,16960
81109bd0:	111c8240 	call	8111c824 <usleep>
		// TESTE EPC - Write
		//ConfigFTDIWrite();
		//WriteCicle();

//DummyWrite();
	}
81109bd4:	003ff306 	br	81109ba4 <__reset+0xfb0e9ba4>

81109bd8 <vTestLeds>:
 usleep(5*1000);
 }
 }
 */

void vTestLeds(void) {
81109bd8:	defffd04 	addi	sp,sp,-12
81109bdc:	dfc00215 	stw	ra,8(sp)
81109be0:	df000115 	stw	fp,4(sp)
81109be4:	df000104 	addi	fp,sp,4
	alt_8 led = 1;
81109be8:	00800044 	movi	r2,1
81109bec:	e0bfff05 	stb	r2,-4(fp)
	//SSDP_CONFIG(SSDP_TEST_MODE);

	alt_8 tempFPGA = 0;
81109bf0:	e03fff85 	stb	zero,-2(fp)
	alt_8 tempBoard = 0;
81109bf4:	e03fffc5 	stb	zero,-1(fp)

	alt_u8 red = 0;
81109bf8:	e03fff45 	stb	zero,-3(fp)

	TEMP_Read(&tempFPGA, &tempBoard);
81109bfc:	e0ffffc4 	addi	r3,fp,-1
81109c00:	e0bfff84 	addi	r2,fp,-2
81109c04:	180b883a 	mov	r5,r3
81109c08:	1009883a 	mov	r4,r2
81109c0c:	1102ba00 	call	81102ba0 <TEMP_Read>
	bSSDisplayUpdate(tempFPGA);
81109c10:	e0bfff83 	ldbu	r2,-2(fp)
81109c14:	10803fcc 	andi	r2,r2,255
81109c18:	1009883a 	mov	r4,r2
81109c1c:	1106e200 	call	81106e20 <bSSDisplayUpdate>

	while (1) {
		switch (led) {
81109c20:	e0bfff07 	ldb	r2,-4(fp)
81109c24:	10c00268 	cmpgeui	r3,r2,9
81109c28:	1800ac1e 	bne	r3,zero,81109edc <vTestLeds+0x304>
81109c2c:	100690ba 	slli	r3,r2,2
81109c30:	00a04474 	movhi	r2,33041
81109c34:	10a71104 	addi	r2,r2,-25532
81109c38:	1885883a 	add	r2,r3,r2
81109c3c:	10800017 	ldw	r2,0(r2)
81109c40:	1000683a 	jmp	r2
81109c44:	81109edc 	xori	r4,r16,17019
81109c48:	81109c68 	cmpgeui	r4,r16,17009
81109c4c:	81109cb4 	orhi	r4,r16,17010
81109c50:	81109d00 	call	881109d0 <__reset+0x20f09d0>
81109c54:	81109d4c 	andi	r4,r16,17013
81109c58:	81109d98 	cmpnei	r4,r16,17014
81109c5c:	81109de4 	muli	r4,r16,17015
81109c60:	81109e30 	cmpltui	r4,r16,17016
81109c64:	81109e7c 	xorhi	r4,r16,17017
		case 1:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_0_MASK);
81109c68:	01400044 	movi	r5,1
81109c6c:	01000044 	movi	r4,1
81109c70:	110588c0 	call	8110588c <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_1_MASK);
81109c74:	014000b4 	movhi	r5,2
81109c78:	01000044 	movi	r4,1
81109c7c:	11059040 	call	81105904 <bSetPainelLeds>
			if (red) {
81109c80:	e0bfff43 	ldbu	r2,-3(fp)
81109c84:	10000426 	beq	r2,zero,81109c98 <vTestLeds+0xc0>
				bSetPainelLeds(LEDS_ON, LEDS_1R_MASK);
81109c88:	01400084 	movi	r5,2
81109c8c:	01000044 	movi	r4,1
81109c90:	11059040 	call	81105904 <bSetPainelLeds>
81109c94:	00000306 	br	81109ca4 <vTestLeds+0xcc>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_1G_MASK);
81109c98:	01400044 	movi	r5,1
81109c9c:	01000044 	movi	r4,1
81109ca0:	11059040 	call	81105904 <bSetPainelLeds>
			}
			led++;
81109ca4:	e0bfff03 	ldbu	r2,-4(fp)
81109ca8:	10800044 	addi	r2,r2,1
81109cac:	e0bfff05 	stb	r2,-4(fp)
			break;
81109cb0:	00008b06 	br	81109ee0 <vTestLeds+0x308>
		case 2:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_1_MASK);
81109cb4:	01400084 	movi	r5,2
81109cb8:	01000044 	movi	r4,1
81109cbc:	110588c0 	call	8110588c <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_2_MASK);
81109cc0:	01400134 	movhi	r5,4
81109cc4:	01000044 	movi	r4,1
81109cc8:	11059040 	call	81105904 <bSetPainelLeds>
			if (red) {
81109ccc:	e0bfff43 	ldbu	r2,-3(fp)
81109cd0:	10000426 	beq	r2,zero,81109ce4 <vTestLeds+0x10c>
				bSetPainelLeds(LEDS_ON, LEDS_2R_MASK);
81109cd4:	01400204 	movi	r5,8
81109cd8:	01000044 	movi	r4,1
81109cdc:	11059040 	call	81105904 <bSetPainelLeds>
81109ce0:	00000306 	br	81109cf0 <vTestLeds+0x118>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_2G_MASK);
81109ce4:	01400104 	movi	r5,4
81109ce8:	01000044 	movi	r4,1
81109cec:	11059040 	call	81105904 <bSetPainelLeds>
			}
			led++;
81109cf0:	e0bfff03 	ldbu	r2,-4(fp)
81109cf4:	10800044 	addi	r2,r2,1
81109cf8:	e0bfff05 	stb	r2,-4(fp)
			break;
81109cfc:	00007806 	br	81109ee0 <vTestLeds+0x308>
		case 3:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_2_MASK);
81109d00:	01400104 	movi	r5,4
81109d04:	01000044 	movi	r4,1
81109d08:	110588c0 	call	8110588c <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_3_MASK);
81109d0c:	01400234 	movhi	r5,8
81109d10:	01000044 	movi	r4,1
81109d14:	11059040 	call	81105904 <bSetPainelLeds>
			if (red) {
81109d18:	e0bfff43 	ldbu	r2,-3(fp)
81109d1c:	10000426 	beq	r2,zero,81109d30 <vTestLeds+0x158>
				bSetPainelLeds(LEDS_ON, LEDS_3R_MASK);
81109d20:	01400804 	movi	r5,32
81109d24:	01000044 	movi	r4,1
81109d28:	11059040 	call	81105904 <bSetPainelLeds>
81109d2c:	00000306 	br	81109d3c <vTestLeds+0x164>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_3G_MASK);
81109d30:	01400404 	movi	r5,16
81109d34:	01000044 	movi	r4,1
81109d38:	11059040 	call	81105904 <bSetPainelLeds>
			}
			led++;
81109d3c:	e0bfff03 	ldbu	r2,-4(fp)
81109d40:	10800044 	addi	r2,r2,1
81109d44:	e0bfff05 	stb	r2,-4(fp)
			break;
81109d48:	00006506 	br	81109ee0 <vTestLeds+0x308>
		case 4:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_3_MASK);
81109d4c:	01400204 	movi	r5,8
81109d50:	01000044 	movi	r4,1
81109d54:	110588c0 	call	8110588c <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_4_MASK);
81109d58:	01400434 	movhi	r5,16
81109d5c:	01000044 	movi	r4,1
81109d60:	11059040 	call	81105904 <bSetPainelLeds>
			if (red) {
81109d64:	e0bfff43 	ldbu	r2,-3(fp)
81109d68:	10000426 	beq	r2,zero,81109d7c <vTestLeds+0x1a4>
				bSetPainelLeds(LEDS_ON, LEDS_4R_MASK);
81109d6c:	01402004 	movi	r5,128
81109d70:	01000044 	movi	r4,1
81109d74:	11059040 	call	81105904 <bSetPainelLeds>
81109d78:	00000306 	br	81109d88 <vTestLeds+0x1b0>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_4G_MASK);
81109d7c:	01401004 	movi	r5,64
81109d80:	01000044 	movi	r4,1
81109d84:	11059040 	call	81105904 <bSetPainelLeds>
			}
			led++;
81109d88:	e0bfff03 	ldbu	r2,-4(fp)
81109d8c:	10800044 	addi	r2,r2,1
81109d90:	e0bfff05 	stb	r2,-4(fp)
			break;
81109d94:	00005206 	br	81109ee0 <vTestLeds+0x308>
		case 5:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_4_MASK);
81109d98:	01400404 	movi	r5,16
81109d9c:	01000044 	movi	r4,1
81109da0:	110588c0 	call	8110588c <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_1_MASK);
81109da4:	014000b4 	movhi	r5,2
81109da8:	01000044 	movi	r4,1
81109dac:	11059040 	call	81105904 <bSetPainelLeds>
			if (red) {
81109db0:	e0bfff43 	ldbu	r2,-3(fp)
81109db4:	10000426 	beq	r2,zero,81109dc8 <vTestLeds+0x1f0>
				bSetPainelLeds(LEDS_ON, LEDS_5R_MASK);
81109db8:	01408004 	movi	r5,512
81109dbc:	01000044 	movi	r4,1
81109dc0:	11059040 	call	81105904 <bSetPainelLeds>
81109dc4:	00000306 	br	81109dd4 <vTestLeds+0x1fc>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_5G_MASK);
81109dc8:	01404004 	movi	r5,256
81109dcc:	01000044 	movi	r4,1
81109dd0:	11059040 	call	81105904 <bSetPainelLeds>
			}
			led++;
81109dd4:	e0bfff03 	ldbu	r2,-4(fp)
81109dd8:	10800044 	addi	r2,r2,1
81109ddc:	e0bfff05 	stb	r2,-4(fp)
			break;
81109de0:	00003f06 	br	81109ee0 <vTestLeds+0x308>
		case 6:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_5_MASK);
81109de4:	01400804 	movi	r5,32
81109de8:	01000044 	movi	r4,1
81109dec:	110588c0 	call	8110588c <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_2_MASK);
81109df0:	01400134 	movhi	r5,4
81109df4:	01000044 	movi	r4,1
81109df8:	11059040 	call	81105904 <bSetPainelLeds>
			if (red) {
81109dfc:	e0bfff43 	ldbu	r2,-3(fp)
81109e00:	10000426 	beq	r2,zero,81109e14 <vTestLeds+0x23c>
				bSetPainelLeds(LEDS_ON, LEDS_6R_MASK);
81109e04:	01420004 	movi	r5,2048
81109e08:	01000044 	movi	r4,1
81109e0c:	11059040 	call	81105904 <bSetPainelLeds>
81109e10:	00000306 	br	81109e20 <vTestLeds+0x248>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_6G_MASK);
81109e14:	01410004 	movi	r5,1024
81109e18:	01000044 	movi	r4,1
81109e1c:	11059040 	call	81105904 <bSetPainelLeds>
			}
			led++;
81109e20:	e0bfff03 	ldbu	r2,-4(fp)
81109e24:	10800044 	addi	r2,r2,1
81109e28:	e0bfff05 	stb	r2,-4(fp)
			break;
81109e2c:	00002c06 	br	81109ee0 <vTestLeds+0x308>
		case 7:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_6_MASK);
81109e30:	01401004 	movi	r5,64
81109e34:	01000044 	movi	r4,1
81109e38:	110588c0 	call	8110588c <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_3_MASK);
81109e3c:	01400234 	movhi	r5,8
81109e40:	01000044 	movi	r4,1
81109e44:	11059040 	call	81105904 <bSetPainelLeds>
			if (red) {
81109e48:	e0bfff43 	ldbu	r2,-3(fp)
81109e4c:	10000426 	beq	r2,zero,81109e60 <vTestLeds+0x288>
				bSetPainelLeds(LEDS_ON, LEDS_7R_MASK);
81109e50:	01480004 	movi	r5,8192
81109e54:	01000044 	movi	r4,1
81109e58:	11059040 	call	81105904 <bSetPainelLeds>
81109e5c:	00000306 	br	81109e6c <vTestLeds+0x294>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_7G_MASK);
81109e60:	01440004 	movi	r5,4096
81109e64:	01000044 	movi	r4,1
81109e68:	11059040 	call	81105904 <bSetPainelLeds>
			}
			led++;
81109e6c:	e0bfff03 	ldbu	r2,-4(fp)
81109e70:	10800044 	addi	r2,r2,1
81109e74:	e0bfff05 	stb	r2,-4(fp)
			break;
81109e78:	00001906 	br	81109ee0 <vTestLeds+0x308>
		case 8:
			bSetBoardLeds(LEDS_ON, LEDS_BOARD_7_MASK);
81109e7c:	01402004 	movi	r5,128
81109e80:	01000044 	movi	r4,1
81109e84:	110588c0 	call	8110588c <bSetBoardLeds>
			bSetPainelLeds(LEDS_ON, LEDS_ST_4_MASK);
81109e88:	01400434 	movhi	r5,16
81109e8c:	01000044 	movi	r4,1
81109e90:	11059040 	call	81105904 <bSetPainelLeds>
			if (red) {
81109e94:	e0bfff43 	ldbu	r2,-3(fp)
81109e98:	10000426 	beq	r2,zero,81109eac <vTestLeds+0x2d4>
				bSetPainelLeds(LEDS_ON, LEDS_8R_MASK);
81109e9c:	01600014 	movui	r5,32768
81109ea0:	01000044 	movi	r4,1
81109ea4:	11059040 	call	81105904 <bSetPainelLeds>
81109ea8:	00000306 	br	81109eb8 <vTestLeds+0x2e0>
			} else {
				bSetPainelLeds(LEDS_ON, LEDS_8G_MASK);
81109eac:	01500004 	movi	r5,16384
81109eb0:	01000044 	movi	r4,1
81109eb4:	11059040 	call	81105904 <bSetPainelLeds>
			}
			led = 1;
81109eb8:	00800044 	movi	r2,1
81109ebc:	e0bfff05 	stb	r2,-4(fp)
			if (red) {
81109ec0:	e0bfff43 	ldbu	r2,-3(fp)
81109ec4:	10000226 	beq	r2,zero,81109ed0 <vTestLeds+0x2f8>
				red = 0;
81109ec8:	e03fff45 	stb	zero,-3(fp)
			} else {
				red = 1;
			}
			break;
81109ecc:	00000406 	br	81109ee0 <vTestLeds+0x308>
			}
			led = 1;
			if (red) {
				red = 0;
			} else {
				red = 1;
81109ed0:	00800044 	movi	r2,1
81109ed4:	e0bfff45 	stb	r2,-3(fp)
			}
			break;
81109ed8:	00000106 	br	81109ee0 <vTestLeds+0x308>
		default:
			led = 0;
81109edc:	e03fff05 	stb	zero,-4(fp)
		}

		usleep(1000 * 1000);
81109ee0:	010003f4 	movhi	r4,15
81109ee4:	21109004 	addi	r4,r4,16960
81109ee8:	111c8240 	call	8111c824 <usleep>

		bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
81109eec:	01403fc4 	movi	r5,255
81109ef0:	0009883a 	mov	r4,zero
81109ef4:	110588c0 	call	8110588c <bSetBoardLeds>
		bSetPainelLeds(LEDS_OFF, LEDS_ST_ALL_MASK);
81109ef8:	014007f4 	movhi	r5,31
81109efc:	0009883a 	mov	r4,zero
81109f00:	11059040 	call	81105904 <bSetPainelLeds>
		bSetPainelLeds(LEDS_OFF, LEDS_GR_ALL_MASK);
81109f04:	017fffd4 	movui	r5,65535
81109f08:	0009883a 	mov	r4,zero
81109f0c:	11059040 	call	81105904 <bSetPainelLeds>

		TEMP_Read(&tempFPGA, &tempBoard);
81109f10:	e0ffffc4 	addi	r3,fp,-1
81109f14:	e0bfff84 	addi	r2,fp,-2
81109f18:	180b883a 	mov	r5,r3
81109f1c:	1009883a 	mov	r4,r2
81109f20:	1102ba00 	call	81102ba0 <TEMP_Read>
		bSSDisplayUpdate(tempFPGA);
81109f24:	e0bfff83 	ldbu	r2,-2(fp)
81109f28:	10803fcc 	andi	r2,r2,255
81109f2c:	1009883a 	mov	r4,r2
81109f30:	1106e200 	call	81106e20 <bSSDisplayUpdate>

	}
81109f34:	003f3a06 	br	81109c20 <__reset+0xfb0e9c20>

81109f38 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
81109f38:	defffc04 	addi	sp,sp,-16
81109f3c:	df000315 	stw	fp,12(sp)
81109f40:	df000304 	addi	fp,sp,12
81109f44:	e13ffd15 	stw	r4,-12(fp)
81109f48:	e17ffe15 	stw	r5,-8(fp)
81109f4c:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
81109f50:	e0bffe17 	ldw	r2,-8(fp)
81109f54:	1085883a 	add	r2,r2,r2
81109f58:	1085883a 	add	r2,r2,r2
81109f5c:	1007883a 	mov	r3,r2
81109f60:	e0bffd17 	ldw	r2,-12(fp)
81109f64:	1885883a 	add	r2,r3,r2
81109f68:	1007883a 	mov	r3,r2
81109f6c:	e0bfff17 	ldw	r2,-4(fp)
81109f70:	18800035 	stwio	r2,0(r3)
	return 1;
81109f74:	00800044 	movi	r2,1

}
81109f78:	e037883a 	mov	sp,fp
81109f7c:	df000017 	ldw	fp,0(sp)
81109f80:	dec00104 	addi	sp,sp,4
81109f84:	f800283a 	ret

81109f88 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
81109f88:	defffc04 	addi	sp,sp,-16
81109f8c:	df000315 	stw	fp,12(sp)
81109f90:	df000304 	addi	fp,sp,12
81109f94:	e13ffd15 	stw	r4,-12(fp)
81109f98:	e17ffe15 	stw	r5,-8(fp)
81109f9c:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
81109fa0:	e0bffe17 	ldw	r2,-8(fp)
81109fa4:	1085883a 	add	r2,r2,r2
81109fa8:	1085883a 	add	r2,r2,r2
81109fac:	1007883a 	mov	r3,r2
81109fb0:	e0bffd17 	ldw	r2,-12(fp)
81109fb4:	1885883a 	add	r2,r3,r2
81109fb8:	10c00037 	ldwio	r3,0(r2)
81109fbc:	e0bfff17 	ldw	r2,-4(fp)
81109fc0:	10c00015 	stw	r3,0(r2)
	return 1;
81109fc4:	00800044 	movi	r2,1

}
81109fc8:	e037883a 	mov	sp,fp
81109fcc:	df000017 	ldw	fp,0(sp)
81109fd0:	dec00104 	addi	sp,sp,4
81109fd4:	f800283a 	ret

81109fd8 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
81109fd8:	defffa04 	addi	sp,sp,-24
81109fdc:	dfc00515 	stw	ra,20(sp)
81109fe0:	df000415 	stw	fp,16(sp)
81109fe4:	df000404 	addi	fp,sp,16
81109fe8:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
81109fec:	e0bfff17 	ldw	r2,-4(fp)
81109ff0:	1005d1ba 	srai	r2,r2,6
81109ff4:	1080004c 	andi	r2,r2,1
81109ff8:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
81109ffc:	e0bfff17 	ldw	r2,-4(fp)
8110a000:	1005d17a 	srai	r2,r2,5
8110a004:	1080004c 	andi	r2,r2,1
8110a008:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110a00c:	e0bfff17 	ldw	r2,-4(fp)
8110a010:	1005d13a 	srai	r2,r2,4
8110a014:	1080004c 	andi	r2,r2,1
8110a018:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
8110a01c:	00e044b4 	movhi	r3,33042
8110a020:	18d14c04 	addi	r3,r3,17712
8110a024:	00a044b4 	movhi	r2,33042
8110a028:	10886f04 	addi	r2,r2,8636
8110a02c:	1009883a 	mov	r4,r2
8110a030:	008005c4 	movi	r2,23
8110a034:	100d883a 	mov	r6,r2
8110a038:	200b883a 	mov	r5,r4
8110a03c:	1809883a 	mov	r4,r3
8110a040:	110c9d40 	call	8110c9d4 <memcpy>
	debug(fp, cDebugBuffer);
8110a044:	d0a02717 	ldw	r2,-32612(gp)
8110a048:	016044b4 	movhi	r5,33042
8110a04c:	29514c04 	addi	r5,r5,17712
8110a050:	1009883a 	mov	r4,r2
8110a054:	110b9140 	call	8110b914 <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
8110a058:	e0bffc17 	ldw	r2,-16(fp)
8110a05c:	10800058 	cmpnei	r2,r2,1
8110a060:	1000031e 	bne	r2,zero,8110a070 <_print_codec_status+0x98>
8110a064:	00a044b4 	movhi	r2,33042
8110a068:	10887504 	addi	r2,r2,8660
8110a06c:	00000206 	br	8110a078 <_print_codec_status+0xa0>
8110a070:	00a044b4 	movhi	r2,33042
8110a074:	10887604 	addi	r2,r2,8664
8110a078:	100d883a 	mov	r6,r2
8110a07c:	016044b4 	movhi	r5,33042
8110a080:	29487704 	addi	r5,r5,8668
8110a084:	012044b4 	movhi	r4,33042
8110a088:	21114c04 	addi	r4,r4,17712
8110a08c:	110cfc80 	call	8110cfc8 <sprintf>
	debug(fp, cDebugBuffer);
8110a090:	d0a02717 	ldw	r2,-32612(gp)
8110a094:	016044b4 	movhi	r5,33042
8110a098:	29514c04 	addi	r5,r5,17712
8110a09c:	1009883a 	mov	r4,r2
8110a0a0:	110b9140 	call	8110b914 <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8110a0a4:	e0bffd17 	ldw	r2,-12(fp)
8110a0a8:	10800058 	cmpnei	r2,r2,1
8110a0ac:	1000031e 	bne	r2,zero,8110a0bc <_print_codec_status+0xe4>
8110a0b0:	00a044b4 	movhi	r2,33042
8110a0b4:	10887504 	addi	r2,r2,8660
8110a0b8:	00000206 	br	8110a0c4 <_print_codec_status+0xec>
8110a0bc:	00a044b4 	movhi	r2,33042
8110a0c0:	10887604 	addi	r2,r2,8664
8110a0c4:	100d883a 	mov	r6,r2
8110a0c8:	016044b4 	movhi	r5,33042
8110a0cc:	29487d04 	addi	r5,r5,8692
8110a0d0:	012044b4 	movhi	r4,33042
8110a0d4:	21114c04 	addi	r4,r4,17712
8110a0d8:	110cfc80 	call	8110cfc8 <sprintf>
	debug(fp, cDebugBuffer);
8110a0dc:	d0a02717 	ldw	r2,-32612(gp)
8110a0e0:	016044b4 	movhi	r5,33042
8110a0e4:	29514c04 	addi	r5,r5,17712
8110a0e8:	1009883a 	mov	r4,r2
8110a0ec:	110b9140 	call	8110b914 <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
8110a0f0:	e0bffe17 	ldw	r2,-8(fp)
8110a0f4:	10800058 	cmpnei	r2,r2,1
8110a0f8:	1000031e 	bne	r2,zero,8110a108 <_print_codec_status+0x130>
8110a0fc:	00a044b4 	movhi	r2,33042
8110a100:	10887504 	addi	r2,r2,8660
8110a104:	00000206 	br	8110a110 <_print_codec_status+0x138>
8110a108:	00a044b4 	movhi	r2,33042
8110a10c:	10887604 	addi	r2,r2,8664
8110a110:	100d883a 	mov	r6,r2
8110a114:	016044b4 	movhi	r5,33042
8110a118:	29488304 	addi	r5,r5,8716
8110a11c:	012044b4 	movhi	r4,33042
8110a120:	21114c04 	addi	r4,r4,17712
8110a124:	110cfc80 	call	8110cfc8 <sprintf>
	debug(fp, cDebugBuffer);
8110a128:	d0a02717 	ldw	r2,-32612(gp)
8110a12c:	016044b4 	movhi	r5,33042
8110a130:	29514c04 	addi	r5,r5,17712
8110a134:	1009883a 	mov	r4,r2
8110a138:	110b9140 	call	8110b914 <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
8110a13c:	00a044b4 	movhi	r2,33042
8110a140:	10914c04 	addi	r2,r2,17712
8110a144:	00c00b44 	movi	r3,45
8110a148:	10c00005 	stb	r3,0(r2)
8110a14c:	00c00b44 	movi	r3,45
8110a150:	10c00045 	stb	r3,1(r2)
8110a154:	00c00b44 	movi	r3,45
8110a158:	10c00085 	stb	r3,2(r2)
8110a15c:	00c00b44 	movi	r3,45
8110a160:	10c000c5 	stb	r3,3(r2)
8110a164:	00c00b44 	movi	r3,45
8110a168:	10c00105 	stb	r3,4(r2)
8110a16c:	00c00b44 	movi	r3,45
8110a170:	10c00145 	stb	r3,5(r2)
8110a174:	00c00b44 	movi	r3,45
8110a178:	10c00185 	stb	r3,6(r2)
8110a17c:	00c00b44 	movi	r3,45
8110a180:	10c001c5 	stb	r3,7(r2)
8110a184:	00c00804 	movi	r3,32
8110a188:	10c00205 	stb	r3,8(r2)
8110a18c:	00c00804 	movi	r3,32
8110a190:	10c00245 	stb	r3,9(r2)
8110a194:	00c00284 	movi	r3,10
8110a198:	10c00285 	stb	r3,10(r2)
8110a19c:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
8110a1a0:	d0a02717 	ldw	r2,-32612(gp)
8110a1a4:	016044b4 	movhi	r5,33042
8110a1a8:	29514c04 	addi	r5,r5,17712
8110a1ac:	1009883a 	mov	r4,r2
8110a1b0:	110b9140 	call	8110b914 <fprintf>
#endif
}
8110a1b4:	0001883a 	nop
8110a1b8:	e037883a 	mov	sp,fp
8110a1bc:	dfc00117 	ldw	ra,4(sp)
8110a1c0:	df000017 	ldw	fp,0(sp)
8110a1c4:	dec00204 	addi	sp,sp,8
8110a1c8:	f800283a 	ret

8110a1cc <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
8110a1cc:	defffb04 	addi	sp,sp,-20
8110a1d0:	df000415 	stw	fp,16(sp)
8110a1d4:	df000404 	addi	fp,sp,16
8110a1d8:	e13ffc15 	stw	r4,-16(fp)
8110a1dc:	e17ffd15 	stw	r5,-12(fp)
8110a1e0:	e1bffe15 	stw	r6,-8(fp)
8110a1e4:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
8110a1e8:	e0bffc17 	ldw	r2,-16(fp)
8110a1ec:	1005d1ba 	srai	r2,r2,6
8110a1f0:	10c0004c 	andi	r3,r2,1
8110a1f4:	e0bffd17 	ldw	r2,-12(fp)
8110a1f8:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8110a1fc:	e0bffc17 	ldw	r2,-16(fp)
8110a200:	1005d17a 	srai	r2,r2,5
8110a204:	10c0004c 	andi	r3,r2,1
8110a208:	e0bffe17 	ldw	r2,-8(fp)
8110a20c:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8110a210:	e0bffc17 	ldw	r2,-16(fp)
8110a214:	1005d13a 	srai	r2,r2,4
8110a218:	10c0004c 	andi	r3,r2,1
8110a21c:	e0bfff17 	ldw	r2,-4(fp)
8110a220:	10c00015 	stw	r3,0(r2)
}
8110a224:	0001883a 	nop
8110a228:	e037883a 	mov	sp,fp
8110a22c:	df000017 	ldw	fp,0(sp)
8110a230:	dec00104 	addi	sp,sp,4
8110a234:	f800283a 	ret

8110a238 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
8110a238:	defffc04 	addi	sp,sp,-16
8110a23c:	df000315 	stw	fp,12(sp)
8110a240:	df000304 	addi	fp,sp,12
8110a244:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
8110a248:	e0bfff17 	ldw	r2,-4(fp)
8110a24c:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110a250:	e0bffd17 	ldw	r2,-12(fp)
8110a254:	10c00003 	ldbu	r3,0(r2)
8110a258:	e0bffd17 	ldw	r2,-12(fp)
8110a25c:	10800003 	ldbu	r2,0(r2)
8110a260:	10803fcc 	andi	r2,r2,255
8110a264:	10800eb0 	cmpltui	r2,r2,58
8110a268:	1000021e 	bne	r2,zero,8110a274 <aatoh+0x3c>
8110a26c:	00800dc4 	movi	r2,55
8110a270:	00000106 	br	8110a278 <aatoh+0x40>
8110a274:	00800c04 	movi	r2,48
8110a278:	1885c83a 	sub	r2,r3,r2
8110a27c:	1004913a 	slli	r2,r2,4
8110a280:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
8110a284:	e0bffd17 	ldw	r2,-12(fp)
8110a288:	10800044 	addi	r2,r2,1
8110a28c:	10c00003 	ldbu	r3,0(r2)
8110a290:	e0bffd17 	ldw	r2,-12(fp)
8110a294:	10800044 	addi	r2,r2,1
8110a298:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110a29c:	10803fcc 	andi	r2,r2,255
8110a2a0:	10800eb0 	cmpltui	r2,r2,58
8110a2a4:	1000021e 	bne	r2,zero,8110a2b0 <aatoh+0x78>
8110a2a8:	00800dc4 	movi	r2,55
8110a2ac:	00000106 	br	8110a2b4 <aatoh+0x7c>
8110a2b0:	00800c04 	movi	r2,48
8110a2b4:	1885c83a 	sub	r2,r3,r2
8110a2b8:	2085883a 	add	r2,r4,r2
8110a2bc:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
8110a2c0:	e0bffe03 	ldbu	r2,-8(fp)
}
8110a2c4:	e037883a 	mov	sp,fp
8110a2c8:	df000017 	ldw	fp,0(sp)
8110a2cc:	dec00104 	addi	sp,sp,4
8110a2d0:	f800283a 	ret

8110a2d4 <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
8110a2d4:	defffd04 	addi	sp,sp,-12
8110a2d8:	dfc00215 	stw	ra,8(sp)
8110a2dc:	df000115 	stw	fp,4(sp)
8110a2e0:	df000104 	addi	fp,sp,4
8110a2e4:	2005883a 	mov	r2,r4
8110a2e8:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
8110a2ec:	e0bfff03 	ldbu	r2,-4(fp)
8110a2f0:	1000091e 	bne	r2,zero,8110a318 <Verif_Error+0x44>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
8110a2f4:	d0a02717 	ldw	r2,-32612(gp)
8110a2f8:	100f883a 	mov	r7,r2
8110a2fc:	018001c4 	movi	r6,7
8110a300:	01400044 	movi	r5,1
8110a304:	012044b4 	movhi	r4,33042
8110a308:	21088904 	addi	r4,r4,8740
8110a30c:	110bee00 	call	8110bee0 <fwrite>
#endif
		return 0;
8110a310:	0005883a 	mov	r2,zero
8110a314:	00000106 	br	8110a31c <Verif_Error+0x48>
	} else
		return 1;
8110a318:	00800044 	movi	r2,1
}
8110a31c:	e037883a 	mov	sp,fp
8110a320:	dfc00117 	ldw	ra,4(sp)
8110a324:	df000017 	ldw	fp,0(sp)
8110a328:	dec00204 	addi	sp,sp,8
8110a32c:	f800283a 	ret

8110a330 <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
8110a330:	defffe04 	addi	sp,sp,-8
8110a334:	df000115 	stw	fp,4(sp)
8110a338:	df000104 	addi	fp,sp,4
8110a33c:	2005883a 	mov	r2,r4
8110a340:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
8110a344:	e0bfff03 	ldbu	r2,-4(fp)
8110a348:	10bff404 	addi	r2,r2,-48
}
8110a34c:	e037883a 	mov	sp,fp
8110a350:	df000017 	ldw	fp,0(sp)
8110a354:	dec00104 	addi	sp,sp,4
8110a358:	f800283a 	ret

8110a35c <__divsf3>:
8110a35c:	defff504 	addi	sp,sp,-44
8110a360:	200cd5fa 	srli	r6,r4,23
8110a364:	dcc00415 	stw	r19,16(sp)
8110a368:	2026d7fa 	srli	r19,r4,31
8110a36c:	00c02034 	movhi	r3,128
8110a370:	dd800715 	stw	r22,28(sp)
8110a374:	dd000515 	stw	r20,20(sp)
8110a378:	dc800315 	stw	r18,12(sp)
8110a37c:	18ffffc4 	addi	r3,r3,-1
8110a380:	dfc00a15 	stw	ra,40(sp)
8110a384:	df000915 	stw	fp,36(sp)
8110a388:	ddc00815 	stw	r23,32(sp)
8110a38c:	dd400615 	stw	r21,24(sp)
8110a390:	dc400215 	stw	r17,8(sp)
8110a394:	dc000115 	stw	r16,4(sp)
8110a398:	35003fcc 	andi	r20,r6,255
8110a39c:	1924703a 	and	r18,r3,r4
8110a3a0:	9d803fcc 	andi	r22,r19,255
8110a3a4:	a0005226 	beq	r20,zero,8110a4f0 <__divsf3+0x194>
8110a3a8:	00803fc4 	movi	r2,255
8110a3ac:	a0802e26 	beq	r20,r2,8110a468 <__divsf3+0x10c>
8110a3b0:	91002034 	orhi	r4,r18,128
8110a3b4:	202490fa 	slli	r18,r4,3
8110a3b8:	a53fe044 	addi	r20,r20,-127
8110a3bc:	0021883a 	mov	r16,zero
8110a3c0:	002f883a 	mov	r23,zero
8110a3c4:	280cd5fa 	srli	r6,r5,23
8110a3c8:	282ad7fa 	srli	r21,r5,31
8110a3cc:	00c02034 	movhi	r3,128
8110a3d0:	18ffffc4 	addi	r3,r3,-1
8110a3d4:	31803fcc 	andi	r6,r6,255
8110a3d8:	1962703a 	and	r17,r3,r5
8110a3dc:	af003fcc 	andi	fp,r21,255
8110a3e0:	30004a26 	beq	r6,zero,8110a50c <__divsf3+0x1b0>
8110a3e4:	00803fc4 	movi	r2,255
8110a3e8:	30804526 	beq	r6,r2,8110a500 <__divsf3+0x1a4>
8110a3ec:	89402034 	orhi	r5,r17,128
8110a3f0:	282290fa 	slli	r17,r5,3
8110a3f4:	31bfe044 	addi	r6,r6,-127
8110a3f8:	000b883a 	mov	r5,zero
8110a3fc:	2c20b03a 	or	r16,r5,r16
8110a400:	802090ba 	slli	r16,r16,2
8110a404:	00a04474 	movhi	r2,33041
8110a408:	10a90a04 	addi	r2,r2,-23512
8110a40c:	80a1883a 	add	r16,r16,r2
8110a410:	81000017 	ldw	r4,0(r16)
8110a414:	9d46f03a 	xor	r3,r19,r21
8110a418:	180f883a 	mov	r7,r3
8110a41c:	18803fcc 	andi	r2,r3,255
8110a420:	a18dc83a 	sub	r6,r20,r6
8110a424:	2000683a 	jmp	r4
8110a428:	8110a60c 	andi	r4,r16,17048
8110a42c:	8110a490 	cmplti	r4,r16,17042
8110a430:	8110a600 	call	88110a60 <__reset+0x20f0a60>
8110a434:	8110a47c 	xorhi	r4,r16,17041
8110a438:	8110a600 	call	88110a60 <__reset+0x20f0a60>
8110a43c:	8110a5d8 	cmpnei	r4,r16,17047
8110a440:	8110a600 	call	88110a60 <__reset+0x20f0a60>
8110a444:	8110a47c 	xorhi	r4,r16,17041
8110a448:	8110a490 	cmplti	r4,r16,17042
8110a44c:	8110a490 	cmplti	r4,r16,17042
8110a450:	8110a5d8 	cmpnei	r4,r16,17047
8110a454:	8110a47c 	xorhi	r4,r16,17041
8110a458:	8110a6ec 	andhi	r4,r16,17051
8110a45c:	8110a6ec 	andhi	r4,r16,17051
8110a460:	8110a6ec 	andhi	r4,r16,17051
8110a464:	8110a6a0 	cmpeqi	r4,r16,17050
8110a468:	9000581e 	bne	r18,zero,8110a5cc <__divsf3+0x270>
8110a46c:	04000204 	movi	r16,8
8110a470:	05c00084 	movi	r23,2
8110a474:	003fd306 	br	8110a3c4 <__reset+0xfb0ea3c4>
8110a478:	0023883a 	mov	r17,zero
8110a47c:	e02d883a 	mov	r22,fp
8110a480:	282f883a 	mov	r23,r5
8110a484:	00800084 	movi	r2,2
8110a488:	b8808f1e 	bne	r23,r2,8110a6c8 <__divsf3+0x36c>
8110a48c:	b005883a 	mov	r2,r22
8110a490:	11c0004c 	andi	r7,r2,1
8110a494:	013fffc4 	movi	r4,-1
8110a498:	000d883a 	mov	r6,zero
8110a49c:	21003fcc 	andi	r4,r4,255
8110a4a0:	200895fa 	slli	r4,r4,23
8110a4a4:	38803fcc 	andi	r2,r7,255
8110a4a8:	00c02034 	movhi	r3,128
8110a4ac:	100497fa 	slli	r2,r2,31
8110a4b0:	18ffffc4 	addi	r3,r3,-1
8110a4b4:	30c6703a 	and	r3,r6,r3
8110a4b8:	1906b03a 	or	r3,r3,r4
8110a4bc:	1884b03a 	or	r2,r3,r2
8110a4c0:	dfc00a17 	ldw	ra,40(sp)
8110a4c4:	df000917 	ldw	fp,36(sp)
8110a4c8:	ddc00817 	ldw	r23,32(sp)
8110a4cc:	dd800717 	ldw	r22,28(sp)
8110a4d0:	dd400617 	ldw	r21,24(sp)
8110a4d4:	dd000517 	ldw	r20,20(sp)
8110a4d8:	dcc00417 	ldw	r19,16(sp)
8110a4dc:	dc800317 	ldw	r18,12(sp)
8110a4e0:	dc400217 	ldw	r17,8(sp)
8110a4e4:	dc000117 	ldw	r16,4(sp)
8110a4e8:	dec00b04 	addi	sp,sp,44
8110a4ec:	f800283a 	ret
8110a4f0:	90002b1e 	bne	r18,zero,8110a5a0 <__divsf3+0x244>
8110a4f4:	04000104 	movi	r16,4
8110a4f8:	05c00044 	movi	r23,1
8110a4fc:	003fb106 	br	8110a3c4 <__reset+0xfb0ea3c4>
8110a500:	8800251e 	bne	r17,zero,8110a598 <__divsf3+0x23c>
8110a504:	01400084 	movi	r5,2
8110a508:	00000206 	br	8110a514 <__divsf3+0x1b8>
8110a50c:	88001a1e 	bne	r17,zero,8110a578 <__divsf3+0x21c>
8110a510:	01400044 	movi	r5,1
8110a514:	8160b03a 	or	r16,r16,r5
8110a518:	802090ba 	slli	r16,r16,2
8110a51c:	00e04474 	movhi	r3,33041
8110a520:	18e94e04 	addi	r3,r3,-23240
8110a524:	80e1883a 	add	r16,r16,r3
8110a528:	80c00017 	ldw	r3,0(r16)
8110a52c:	9d44f03a 	xor	r2,r19,r21
8110a530:	a18dc83a 	sub	r6,r20,r6
8110a534:	1800683a 	jmp	r3
8110a538:	8110a490 	cmplti	r4,r16,17042
8110a53c:	8110a490 	cmplti	r4,r16,17042
8110a540:	8110a6dc 	xori	r4,r16,17051
8110a544:	8110a478 	rdprs	r4,r16,17041
8110a548:	8110a6dc 	xori	r4,r16,17051
8110a54c:	8110a5d8 	cmpnei	r4,r16,17047
8110a550:	8110a6dc 	xori	r4,r16,17051
8110a554:	8110a478 	rdprs	r4,r16,17041
8110a558:	8110a490 	cmplti	r4,r16,17042
8110a55c:	8110a490 	cmplti	r4,r16,17042
8110a560:	8110a5d8 	cmpnei	r4,r16,17047
8110a564:	8110a478 	rdprs	r4,r16,17041
8110a568:	8110a6ec 	andhi	r4,r16,17051
8110a56c:	8110a6ec 	andhi	r4,r16,17051
8110a570:	8110a6ec 	andhi	r4,r16,17051
8110a574:	8110a704 	addi	r4,r16,17052
8110a578:	8809883a 	mov	r4,r17
8110a57c:	110b77c0 	call	8110b77c <__clzsi2>
8110a580:	10fffec4 	addi	r3,r2,-5
8110a584:	10801d84 	addi	r2,r2,118
8110a588:	88e2983a 	sll	r17,r17,r3
8110a58c:	008dc83a 	sub	r6,zero,r2
8110a590:	000b883a 	mov	r5,zero
8110a594:	003f9906 	br	8110a3fc <__reset+0xfb0ea3fc>
8110a598:	014000c4 	movi	r5,3
8110a59c:	003f9706 	br	8110a3fc <__reset+0xfb0ea3fc>
8110a5a0:	9009883a 	mov	r4,r18
8110a5a4:	d9400015 	stw	r5,0(sp)
8110a5a8:	110b77c0 	call	8110b77c <__clzsi2>
8110a5ac:	10fffec4 	addi	r3,r2,-5
8110a5b0:	11801d84 	addi	r6,r2,118
8110a5b4:	90e4983a 	sll	r18,r18,r3
8110a5b8:	01a9c83a 	sub	r20,zero,r6
8110a5bc:	0021883a 	mov	r16,zero
8110a5c0:	002f883a 	mov	r23,zero
8110a5c4:	d9400017 	ldw	r5,0(sp)
8110a5c8:	003f7e06 	br	8110a3c4 <__reset+0xfb0ea3c4>
8110a5cc:	04000304 	movi	r16,12
8110a5d0:	05c000c4 	movi	r23,3
8110a5d4:	003f7b06 	br	8110a3c4 <__reset+0xfb0ea3c4>
8110a5d8:	01802034 	movhi	r6,128
8110a5dc:	000f883a 	mov	r7,zero
8110a5e0:	31bfffc4 	addi	r6,r6,-1
8110a5e4:	013fffc4 	movi	r4,-1
8110a5e8:	003fac06 	br	8110a49c <__reset+0xfb0ea49c>
8110a5ec:	01400044 	movi	r5,1
8110a5f0:	2909c83a 	sub	r4,r5,r4
8110a5f4:	00c006c4 	movi	r3,27
8110a5f8:	19004b0e 	bge	r3,r4,8110a728 <__divsf3+0x3cc>
8110a5fc:	114e703a 	and	r7,r2,r5
8110a600:	0009883a 	mov	r4,zero
8110a604:	000d883a 	mov	r6,zero
8110a608:	003fa406 	br	8110a49c <__reset+0xfb0ea49c>
8110a60c:	9006917a 	slli	r3,r18,5
8110a610:	8822917a 	slli	r17,r17,5
8110a614:	1c40372e 	bgeu	r3,r17,8110a6f4 <__divsf3+0x398>
8110a618:	31bfffc4 	addi	r6,r6,-1
8110a61c:	010006c4 	movi	r4,27
8110a620:	000b883a 	mov	r5,zero
8110a624:	180f883a 	mov	r7,r3
8110a628:	294b883a 	add	r5,r5,r5
8110a62c:	18c7883a 	add	r3,r3,r3
8110a630:	38000116 	blt	r7,zero,8110a638 <__divsf3+0x2dc>
8110a634:	1c400236 	bltu	r3,r17,8110a640 <__divsf3+0x2e4>
8110a638:	1c47c83a 	sub	r3,r3,r17
8110a63c:	29400054 	ori	r5,r5,1
8110a640:	213fffc4 	addi	r4,r4,-1
8110a644:	203ff71e 	bne	r4,zero,8110a624 <__reset+0xfb0ea624>
8110a648:	1806c03a 	cmpne	r3,r3,zero
8110a64c:	1962b03a 	or	r17,r3,r5
8110a650:	31001fc4 	addi	r4,r6,127
8110a654:	013fe50e 	bge	zero,r4,8110a5ec <__reset+0xfb0ea5ec>
8110a658:	88c001cc 	andi	r3,r17,7
8110a65c:	18000426 	beq	r3,zero,8110a670 <__divsf3+0x314>
8110a660:	88c003cc 	andi	r3,r17,15
8110a664:	01400104 	movi	r5,4
8110a668:	19400126 	beq	r3,r5,8110a670 <__divsf3+0x314>
8110a66c:	8963883a 	add	r17,r17,r5
8110a670:	88c2002c 	andhi	r3,r17,2048
8110a674:	18000426 	beq	r3,zero,8110a688 <__divsf3+0x32c>
8110a678:	00fe0034 	movhi	r3,63488
8110a67c:	18ffffc4 	addi	r3,r3,-1
8110a680:	31002004 	addi	r4,r6,128
8110a684:	88e2703a 	and	r17,r17,r3
8110a688:	00c03f84 	movi	r3,254
8110a68c:	193f8016 	blt	r3,r4,8110a490 <__reset+0xfb0ea490>
8110a690:	880c91ba 	slli	r6,r17,6
8110a694:	11c0004c 	andi	r7,r2,1
8110a698:	300cd27a 	srli	r6,r6,9
8110a69c:	003f7f06 	br	8110a49c <__reset+0xfb0ea49c>
8110a6a0:	9080102c 	andhi	r2,r18,64
8110a6a4:	10000226 	beq	r2,zero,8110a6b0 <__divsf3+0x354>
8110a6a8:	8880102c 	andhi	r2,r17,64
8110a6ac:	10001826 	beq	r2,zero,8110a710 <__divsf3+0x3b4>
8110a6b0:	00802034 	movhi	r2,128
8110a6b4:	91801034 	orhi	r6,r18,64
8110a6b8:	10bfffc4 	addi	r2,r2,-1
8110a6bc:	980f883a 	mov	r7,r19
8110a6c0:	308c703a 	and	r6,r6,r2
8110a6c4:	003fc706 	br	8110a5e4 <__reset+0xfb0ea5e4>
8110a6c8:	008000c4 	movi	r2,3
8110a6cc:	b8802d26 	beq	r23,r2,8110a784 <__divsf3+0x428>
8110a6d0:	00c00044 	movi	r3,1
8110a6d4:	b005883a 	mov	r2,r22
8110a6d8:	b8ffdd1e 	bne	r23,r3,8110a650 <__reset+0xfb0ea650>
8110a6dc:	11c0004c 	andi	r7,r2,1
8110a6e0:	0009883a 	mov	r4,zero
8110a6e4:	000d883a 	mov	r6,zero
8110a6e8:	003f6c06 	br	8110a49c <__reset+0xfb0ea49c>
8110a6ec:	9023883a 	mov	r17,r18
8110a6f0:	003f6406 	br	8110a484 <__reset+0xfb0ea484>
8110a6f4:	1c47c83a 	sub	r3,r3,r17
8110a6f8:	01000684 	movi	r4,26
8110a6fc:	01400044 	movi	r5,1
8110a700:	003fc806 	br	8110a624 <__reset+0xfb0ea624>
8110a704:	9080102c 	andhi	r2,r18,64
8110a708:	103fe926 	beq	r2,zero,8110a6b0 <__reset+0xfb0ea6b0>
8110a70c:	0023883a 	mov	r17,zero
8110a710:	00802034 	movhi	r2,128
8110a714:	89801034 	orhi	r6,r17,64
8110a718:	10bfffc4 	addi	r2,r2,-1
8110a71c:	a80f883a 	mov	r7,r21
8110a720:	308c703a 	and	r6,r6,r2
8110a724:	003faf06 	br	8110a5e4 <__reset+0xfb0ea5e4>
8110a728:	01c00804 	movi	r7,32
8110a72c:	390fc83a 	sub	r7,r7,r4
8110a730:	89ce983a 	sll	r7,r17,r7
8110a734:	890ad83a 	srl	r5,r17,r4
8110a738:	380ec03a 	cmpne	r7,r7,zero
8110a73c:	29cab03a 	or	r5,r5,r7
8110a740:	28c001cc 	andi	r3,r5,7
8110a744:	18000426 	beq	r3,zero,8110a758 <__divsf3+0x3fc>
8110a748:	28c003cc 	andi	r3,r5,15
8110a74c:	01000104 	movi	r4,4
8110a750:	19000126 	beq	r3,r4,8110a758 <__divsf3+0x3fc>
8110a754:	290b883a 	add	r5,r5,r4
8110a758:	28c1002c 	andhi	r3,r5,1024
8110a75c:	18000426 	beq	r3,zero,8110a770 <__divsf3+0x414>
8110a760:	11c0004c 	andi	r7,r2,1
8110a764:	01000044 	movi	r4,1
8110a768:	000d883a 	mov	r6,zero
8110a76c:	003f4b06 	br	8110a49c <__reset+0xfb0ea49c>
8110a770:	280a91ba 	slli	r5,r5,6
8110a774:	11c0004c 	andi	r7,r2,1
8110a778:	0009883a 	mov	r4,zero
8110a77c:	280cd27a 	srli	r6,r5,9
8110a780:	003f4606 	br	8110a49c <__reset+0xfb0ea49c>
8110a784:	00802034 	movhi	r2,128
8110a788:	89801034 	orhi	r6,r17,64
8110a78c:	10bfffc4 	addi	r2,r2,-1
8110a790:	b00f883a 	mov	r7,r22
8110a794:	308c703a 	and	r6,r6,r2
8110a798:	003f9206 	br	8110a5e4 <__reset+0xfb0ea5e4>

8110a79c <__mulsf3>:
8110a79c:	defff504 	addi	sp,sp,-44
8110a7a0:	dc000115 	stw	r16,4(sp)
8110a7a4:	2020d5fa 	srli	r16,r4,23
8110a7a8:	dd400615 	stw	r21,24(sp)
8110a7ac:	202ad7fa 	srli	r21,r4,31
8110a7b0:	dc800315 	stw	r18,12(sp)
8110a7b4:	04802034 	movhi	r18,128
8110a7b8:	df000915 	stw	fp,36(sp)
8110a7bc:	dd000515 	stw	r20,20(sp)
8110a7c0:	94bfffc4 	addi	r18,r18,-1
8110a7c4:	dfc00a15 	stw	ra,40(sp)
8110a7c8:	ddc00815 	stw	r23,32(sp)
8110a7cc:	dd800715 	stw	r22,28(sp)
8110a7d0:	dcc00415 	stw	r19,16(sp)
8110a7d4:	dc400215 	stw	r17,8(sp)
8110a7d8:	84003fcc 	andi	r16,r16,255
8110a7dc:	9124703a 	and	r18,r18,r4
8110a7e0:	a829883a 	mov	r20,r21
8110a7e4:	af003fcc 	andi	fp,r21,255
8110a7e8:	80005426 	beq	r16,zero,8110a93c <__mulsf3+0x1a0>
8110a7ec:	00803fc4 	movi	r2,255
8110a7f0:	80802f26 	beq	r16,r2,8110a8b0 <__mulsf3+0x114>
8110a7f4:	91002034 	orhi	r4,r18,128
8110a7f8:	202490fa 	slli	r18,r4,3
8110a7fc:	843fe044 	addi	r16,r16,-127
8110a800:	0023883a 	mov	r17,zero
8110a804:	002f883a 	mov	r23,zero
8110a808:	2804d5fa 	srli	r2,r5,23
8110a80c:	282cd7fa 	srli	r22,r5,31
8110a810:	01002034 	movhi	r4,128
8110a814:	213fffc4 	addi	r4,r4,-1
8110a818:	10803fcc 	andi	r2,r2,255
8110a81c:	2166703a 	and	r19,r4,r5
8110a820:	b1803fcc 	andi	r6,r22,255
8110a824:	10004c26 	beq	r2,zero,8110a958 <__mulsf3+0x1bc>
8110a828:	00c03fc4 	movi	r3,255
8110a82c:	10c04726 	beq	r2,r3,8110a94c <__mulsf3+0x1b0>
8110a830:	99002034 	orhi	r4,r19,128
8110a834:	202690fa 	slli	r19,r4,3
8110a838:	10bfe044 	addi	r2,r2,-127
8110a83c:	0007883a 	mov	r3,zero
8110a840:	80a1883a 	add	r16,r16,r2
8110a844:	010003c4 	movi	r4,15
8110a848:	1c44b03a 	or	r2,r3,r17
8110a84c:	b56af03a 	xor	r21,r22,r21
8110a850:	81c00044 	addi	r7,r16,1
8110a854:	20806b36 	bltu	r4,r2,8110aa04 <__mulsf3+0x268>
8110a858:	100490ba 	slli	r2,r2,2
8110a85c:	01204474 	movhi	r4,33041
8110a860:	212a1c04 	addi	r4,r4,-22416
8110a864:	1105883a 	add	r2,r2,r4
8110a868:	10800017 	ldw	r2,0(r2)
8110a86c:	1000683a 	jmp	r2
8110a870:	8110aa04 	addi	r4,r16,17064
8110a874:	8110a8c4 	addi	r4,r16,17059
8110a878:	8110a8c4 	addi	r4,r16,17059
8110a87c:	8110a8c0 	call	88110a8c <__reset+0x20f0a8c>
8110a880:	8110a9e8 	cmpgeui	r4,r16,17063
8110a884:	8110a9e8 	cmpgeui	r4,r16,17063
8110a888:	8110a9d4 	ori	r4,r16,17063
8110a88c:	8110a8c0 	call	88110a8c <__reset+0x20f0a8c>
8110a890:	8110a9e8 	cmpgeui	r4,r16,17063
8110a894:	8110a9d4 	ori	r4,r16,17063
8110a898:	8110a9e8 	cmpgeui	r4,r16,17063
8110a89c:	8110a8c0 	call	88110a8c <__reset+0x20f0a8c>
8110a8a0:	8110a9f4 	orhi	r4,r16,17063
8110a8a4:	8110a9f4 	orhi	r4,r16,17063
8110a8a8:	8110a9f4 	orhi	r4,r16,17063
8110a8ac:	8110aad0 	cmplti	r4,r16,17067
8110a8b0:	90003b1e 	bne	r18,zero,8110a9a0 <__mulsf3+0x204>
8110a8b4:	04400204 	movi	r17,8
8110a8b8:	05c00084 	movi	r23,2
8110a8bc:	003fd206 	br	8110a808 <__reset+0xfb0ea808>
8110a8c0:	302b883a 	mov	r21,r6
8110a8c4:	00800084 	movi	r2,2
8110a8c8:	18802626 	beq	r3,r2,8110a964 <__mulsf3+0x1c8>
8110a8cc:	008000c4 	movi	r2,3
8110a8d0:	1880ab26 	beq	r3,r2,8110ab80 <__mulsf3+0x3e4>
8110a8d4:	00800044 	movi	r2,1
8110a8d8:	1880a21e 	bne	r3,r2,8110ab64 <__mulsf3+0x3c8>
8110a8dc:	a829883a 	mov	r20,r21
8110a8e0:	0007883a 	mov	r3,zero
8110a8e4:	0009883a 	mov	r4,zero
8110a8e8:	18803fcc 	andi	r2,r3,255
8110a8ec:	100695fa 	slli	r3,r2,23
8110a8f0:	a0803fcc 	andi	r2,r20,255
8110a8f4:	100a97fa 	slli	r5,r2,31
8110a8f8:	00802034 	movhi	r2,128
8110a8fc:	10bfffc4 	addi	r2,r2,-1
8110a900:	2084703a 	and	r2,r4,r2
8110a904:	10c4b03a 	or	r2,r2,r3
8110a908:	1144b03a 	or	r2,r2,r5
8110a90c:	dfc00a17 	ldw	ra,40(sp)
8110a910:	df000917 	ldw	fp,36(sp)
8110a914:	ddc00817 	ldw	r23,32(sp)
8110a918:	dd800717 	ldw	r22,28(sp)
8110a91c:	dd400617 	ldw	r21,24(sp)
8110a920:	dd000517 	ldw	r20,20(sp)
8110a924:	dcc00417 	ldw	r19,16(sp)
8110a928:	dc800317 	ldw	r18,12(sp)
8110a92c:	dc400217 	ldw	r17,8(sp)
8110a930:	dc000117 	ldw	r16,4(sp)
8110a934:	dec00b04 	addi	sp,sp,44
8110a938:	f800283a 	ret
8110a93c:	90000d1e 	bne	r18,zero,8110a974 <__mulsf3+0x1d8>
8110a940:	04400104 	movi	r17,4
8110a944:	05c00044 	movi	r23,1
8110a948:	003faf06 	br	8110a808 <__reset+0xfb0ea808>
8110a94c:	9806c03a 	cmpne	r3,r19,zero
8110a950:	18c00084 	addi	r3,r3,2
8110a954:	003fba06 	br	8110a840 <__reset+0xfb0ea840>
8110a958:	9800141e 	bne	r19,zero,8110a9ac <__mulsf3+0x210>
8110a95c:	00c00044 	movi	r3,1
8110a960:	003fb706 	br	8110a840 <__reset+0xfb0ea840>
8110a964:	a829883a 	mov	r20,r21
8110a968:	00ffffc4 	movi	r3,-1
8110a96c:	0009883a 	mov	r4,zero
8110a970:	003fdd06 	br	8110a8e8 <__reset+0xfb0ea8e8>
8110a974:	9009883a 	mov	r4,r18
8110a978:	d9400015 	stw	r5,0(sp)
8110a97c:	110b77c0 	call	8110b77c <__clzsi2>
8110a980:	10fffec4 	addi	r3,r2,-5
8110a984:	10801d84 	addi	r2,r2,118
8110a988:	90e4983a 	sll	r18,r18,r3
8110a98c:	00a1c83a 	sub	r16,zero,r2
8110a990:	0023883a 	mov	r17,zero
8110a994:	002f883a 	mov	r23,zero
8110a998:	d9400017 	ldw	r5,0(sp)
8110a99c:	003f9a06 	br	8110a808 <__reset+0xfb0ea808>
8110a9a0:	04400304 	movi	r17,12
8110a9a4:	05c000c4 	movi	r23,3
8110a9a8:	003f9706 	br	8110a808 <__reset+0xfb0ea808>
8110a9ac:	9809883a 	mov	r4,r19
8110a9b0:	d9800015 	stw	r6,0(sp)
8110a9b4:	110b77c0 	call	8110b77c <__clzsi2>
8110a9b8:	10fffec4 	addi	r3,r2,-5
8110a9bc:	10801d84 	addi	r2,r2,118
8110a9c0:	98e6983a 	sll	r19,r19,r3
8110a9c4:	0085c83a 	sub	r2,zero,r2
8110a9c8:	0007883a 	mov	r3,zero
8110a9cc:	d9800017 	ldw	r6,0(sp)
8110a9d0:	003f9b06 	br	8110a840 <__reset+0xfb0ea840>
8110a9d4:	01002034 	movhi	r4,128
8110a9d8:	0029883a 	mov	r20,zero
8110a9dc:	213fffc4 	addi	r4,r4,-1
8110a9e0:	00ffffc4 	movi	r3,-1
8110a9e4:	003fc006 	br	8110a8e8 <__reset+0xfb0ea8e8>
8110a9e8:	9027883a 	mov	r19,r18
8110a9ec:	b807883a 	mov	r3,r23
8110a9f0:	003fb406 	br	8110a8c4 <__reset+0xfb0ea8c4>
8110a9f4:	9027883a 	mov	r19,r18
8110a9f8:	e02b883a 	mov	r21,fp
8110a9fc:	b807883a 	mov	r3,r23
8110aa00:	003fb006 	br	8110a8c4 <__reset+0xfb0ea8c4>
8110aa04:	9004d43a 	srli	r2,r18,16
8110aa08:	9810d43a 	srli	r8,r19,16
8110aa0c:	94bfffcc 	andi	r18,r18,65535
8110aa10:	993fffcc 	andi	r4,r19,65535
8110aa14:	910d383a 	mul	r6,r18,r4
8110aa18:	20a7383a 	mul	r19,r4,r2
8110aa1c:	9225383a 	mul	r18,r18,r8
8110aa20:	3006d43a 	srli	r3,r6,16
8110aa24:	1211383a 	mul	r8,r2,r8
8110aa28:	94e5883a 	add	r18,r18,r19
8110aa2c:	1c87883a 	add	r3,r3,r18
8110aa30:	1cc0022e 	bgeu	r3,r19,8110aa3c <__mulsf3+0x2a0>
8110aa34:	00800074 	movhi	r2,1
8110aa38:	4091883a 	add	r8,r8,r2
8110aa3c:	1804943a 	slli	r2,r3,16
8110aa40:	31bfffcc 	andi	r6,r6,65535
8110aa44:	1806d43a 	srli	r3,r3,16
8110aa48:	1185883a 	add	r2,r2,r6
8110aa4c:	102691ba 	slli	r19,r2,6
8110aa50:	1a07883a 	add	r3,r3,r8
8110aa54:	1004d6ba 	srli	r2,r2,26
8110aa58:	180891ba 	slli	r4,r3,6
8110aa5c:	9826c03a 	cmpne	r19,r19,zero
8110aa60:	9884b03a 	or	r2,r19,r2
8110aa64:	1126b03a 	or	r19,r2,r4
8110aa68:	9882002c 	andhi	r2,r19,2048
8110aa6c:	10000426 	beq	r2,zero,8110aa80 <__mulsf3+0x2e4>
8110aa70:	9804d07a 	srli	r2,r19,1
8110aa74:	9900004c 	andi	r4,r19,1
8110aa78:	3821883a 	mov	r16,r7
8110aa7c:	1126b03a 	or	r19,r2,r4
8110aa80:	80c01fc4 	addi	r3,r16,127
8110aa84:	00c0210e 	bge	zero,r3,8110ab0c <__mulsf3+0x370>
8110aa88:	988001cc 	andi	r2,r19,7
8110aa8c:	10000426 	beq	r2,zero,8110aaa0 <__mulsf3+0x304>
8110aa90:	988003cc 	andi	r2,r19,15
8110aa94:	01000104 	movi	r4,4
8110aa98:	11000126 	beq	r2,r4,8110aaa0 <__mulsf3+0x304>
8110aa9c:	9927883a 	add	r19,r19,r4
8110aaa0:	9882002c 	andhi	r2,r19,2048
8110aaa4:	10000426 	beq	r2,zero,8110aab8 <__mulsf3+0x31c>
8110aaa8:	00be0034 	movhi	r2,63488
8110aaac:	10bfffc4 	addi	r2,r2,-1
8110aab0:	80c02004 	addi	r3,r16,128
8110aab4:	98a6703a 	and	r19,r19,r2
8110aab8:	00803f84 	movi	r2,254
8110aabc:	10ffa916 	blt	r2,r3,8110a964 <__reset+0xfb0ea964>
8110aac0:	980891ba 	slli	r4,r19,6
8110aac4:	a829883a 	mov	r20,r21
8110aac8:	2008d27a 	srli	r4,r4,9
8110aacc:	003f8606 	br	8110a8e8 <__reset+0xfb0ea8e8>
8110aad0:	9080102c 	andhi	r2,r18,64
8110aad4:	10000826 	beq	r2,zero,8110aaf8 <__mulsf3+0x35c>
8110aad8:	9880102c 	andhi	r2,r19,64
8110aadc:	1000061e 	bne	r2,zero,8110aaf8 <__mulsf3+0x35c>
8110aae0:	00802034 	movhi	r2,128
8110aae4:	99001034 	orhi	r4,r19,64
8110aae8:	10bfffc4 	addi	r2,r2,-1
8110aaec:	b029883a 	mov	r20,r22
8110aaf0:	2088703a 	and	r4,r4,r2
8110aaf4:	003fba06 	br	8110a9e0 <__reset+0xfb0ea9e0>
8110aaf8:	00802034 	movhi	r2,128
8110aafc:	91001034 	orhi	r4,r18,64
8110ab00:	10bfffc4 	addi	r2,r2,-1
8110ab04:	2088703a 	and	r4,r4,r2
8110ab08:	003fb506 	br	8110a9e0 <__reset+0xfb0ea9e0>
8110ab0c:	00800044 	movi	r2,1
8110ab10:	10c7c83a 	sub	r3,r2,r3
8110ab14:	008006c4 	movi	r2,27
8110ab18:	10ff7016 	blt	r2,r3,8110a8dc <__reset+0xfb0ea8dc>
8110ab1c:	00800804 	movi	r2,32
8110ab20:	10c5c83a 	sub	r2,r2,r3
8110ab24:	9884983a 	sll	r2,r19,r2
8110ab28:	98c6d83a 	srl	r3,r19,r3
8110ab2c:	1004c03a 	cmpne	r2,r2,zero
8110ab30:	1884b03a 	or	r2,r3,r2
8110ab34:	10c001cc 	andi	r3,r2,7
8110ab38:	18000426 	beq	r3,zero,8110ab4c <__mulsf3+0x3b0>
8110ab3c:	10c003cc 	andi	r3,r2,15
8110ab40:	01000104 	movi	r4,4
8110ab44:	19000126 	beq	r3,r4,8110ab4c <__mulsf3+0x3b0>
8110ab48:	1105883a 	add	r2,r2,r4
8110ab4c:	10c1002c 	andhi	r3,r2,1024
8110ab50:	18000626 	beq	r3,zero,8110ab6c <__mulsf3+0x3d0>
8110ab54:	a829883a 	mov	r20,r21
8110ab58:	00c00044 	movi	r3,1
8110ab5c:	0009883a 	mov	r4,zero
8110ab60:	003f6106 	br	8110a8e8 <__reset+0xfb0ea8e8>
8110ab64:	3821883a 	mov	r16,r7
8110ab68:	003fc506 	br	8110aa80 <__reset+0xfb0eaa80>
8110ab6c:	100491ba 	slli	r2,r2,6
8110ab70:	a829883a 	mov	r20,r21
8110ab74:	0007883a 	mov	r3,zero
8110ab78:	1008d27a 	srli	r4,r2,9
8110ab7c:	003f5a06 	br	8110a8e8 <__reset+0xfb0ea8e8>
8110ab80:	00802034 	movhi	r2,128
8110ab84:	99001034 	orhi	r4,r19,64
8110ab88:	10bfffc4 	addi	r2,r2,-1
8110ab8c:	a829883a 	mov	r20,r21
8110ab90:	2088703a 	and	r4,r4,r2
8110ab94:	003f9206 	br	8110a9e0 <__reset+0xfb0ea9e0>

8110ab98 <__floatsisf>:
8110ab98:	defffd04 	addi	sp,sp,-12
8110ab9c:	dfc00215 	stw	ra,8(sp)
8110aba0:	dc400115 	stw	r17,4(sp)
8110aba4:	dc000015 	stw	r16,0(sp)
8110aba8:	20003526 	beq	r4,zero,8110ac80 <__floatsisf+0xe8>
8110abac:	2021883a 	mov	r16,r4
8110abb0:	2022d7fa 	srli	r17,r4,31
8110abb4:	20003616 	blt	r4,zero,8110ac90 <__floatsisf+0xf8>
8110abb8:	8009883a 	mov	r4,r16
8110abbc:	110b77c0 	call	8110b77c <__clzsi2>
8110abc0:	00c02784 	movi	r3,158
8110abc4:	1887c83a 	sub	r3,r3,r2
8110abc8:	01002584 	movi	r4,150
8110abcc:	20c01416 	blt	r4,r3,8110ac20 <__floatsisf+0x88>
8110abd0:	20c9c83a 	sub	r4,r4,r3
8110abd4:	8120983a 	sll	r16,r16,r4
8110abd8:	00802034 	movhi	r2,128
8110abdc:	10bfffc4 	addi	r2,r2,-1
8110abe0:	8809883a 	mov	r4,r17
8110abe4:	80a0703a 	and	r16,r16,r2
8110abe8:	18803fcc 	andi	r2,r3,255
8110abec:	100695fa 	slli	r3,r2,23
8110abf0:	20803fcc 	andi	r2,r4,255
8110abf4:	100897fa 	slli	r4,r2,31
8110abf8:	00802034 	movhi	r2,128
8110abfc:	10bfffc4 	addi	r2,r2,-1
8110ac00:	8084703a 	and	r2,r16,r2
8110ac04:	10c4b03a 	or	r2,r2,r3
8110ac08:	1104b03a 	or	r2,r2,r4
8110ac0c:	dfc00217 	ldw	ra,8(sp)
8110ac10:	dc400117 	ldw	r17,4(sp)
8110ac14:	dc000017 	ldw	r16,0(sp)
8110ac18:	dec00304 	addi	sp,sp,12
8110ac1c:	f800283a 	ret
8110ac20:	01002644 	movi	r4,153
8110ac24:	20c01c16 	blt	r4,r3,8110ac98 <__floatsisf+0x100>
8110ac28:	20c9c83a 	sub	r4,r4,r3
8110ac2c:	8120983a 	sll	r16,r16,r4
8110ac30:	013f0034 	movhi	r4,64512
8110ac34:	213fffc4 	addi	r4,r4,-1
8110ac38:	814001cc 	andi	r5,r16,7
8110ac3c:	8108703a 	and	r4,r16,r4
8110ac40:	28000426 	beq	r5,zero,8110ac54 <__floatsisf+0xbc>
8110ac44:	840003cc 	andi	r16,r16,15
8110ac48:	01400104 	movi	r5,4
8110ac4c:	81400126 	beq	r16,r5,8110ac54 <__floatsisf+0xbc>
8110ac50:	2149883a 	add	r4,r4,r5
8110ac54:	2141002c 	andhi	r5,r4,1024
8110ac58:	28000526 	beq	r5,zero,8110ac70 <__floatsisf+0xd8>
8110ac5c:	00c027c4 	movi	r3,159
8110ac60:	1887c83a 	sub	r3,r3,r2
8110ac64:	00bf0034 	movhi	r2,64512
8110ac68:	10bfffc4 	addi	r2,r2,-1
8110ac6c:	2088703a 	and	r4,r4,r2
8110ac70:	202091ba 	slli	r16,r4,6
8110ac74:	8809883a 	mov	r4,r17
8110ac78:	8020d27a 	srli	r16,r16,9
8110ac7c:	003fda06 	br	8110abe8 <__reset+0xfb0eabe8>
8110ac80:	0009883a 	mov	r4,zero
8110ac84:	0007883a 	mov	r3,zero
8110ac88:	0021883a 	mov	r16,zero
8110ac8c:	003fd606 	br	8110abe8 <__reset+0xfb0eabe8>
8110ac90:	0121c83a 	sub	r16,zero,r4
8110ac94:	003fc806 	br	8110abb8 <__reset+0xfb0eabb8>
8110ac98:	01002e44 	movi	r4,185
8110ac9c:	20c9c83a 	sub	r4,r4,r3
8110aca0:	01400144 	movi	r5,5
8110aca4:	8108983a 	sll	r4,r16,r4
8110aca8:	288bc83a 	sub	r5,r5,r2
8110acac:	8160d83a 	srl	r16,r16,r5
8110acb0:	2008c03a 	cmpne	r4,r4,zero
8110acb4:	8120b03a 	or	r16,r16,r4
8110acb8:	003fdd06 	br	8110ac30 <__reset+0xfb0eac30>

8110acbc <__floatunsisf>:
8110acbc:	defffe04 	addi	sp,sp,-8
8110acc0:	dfc00115 	stw	ra,4(sp)
8110acc4:	dc000015 	stw	r16,0(sp)
8110acc8:	20002c26 	beq	r4,zero,8110ad7c <__floatunsisf+0xc0>
8110accc:	2021883a 	mov	r16,r4
8110acd0:	110b77c0 	call	8110b77c <__clzsi2>
8110acd4:	00c02784 	movi	r3,158
8110acd8:	1887c83a 	sub	r3,r3,r2
8110acdc:	01002584 	movi	r4,150
8110ace0:	20c00f16 	blt	r4,r3,8110ad20 <__floatunsisf+0x64>
8110ace4:	20c9c83a 	sub	r4,r4,r3
8110ace8:	8108983a 	sll	r4,r16,r4
8110acec:	00802034 	movhi	r2,128
8110acf0:	10bfffc4 	addi	r2,r2,-1
8110acf4:	2088703a 	and	r4,r4,r2
8110acf8:	18803fcc 	andi	r2,r3,255
8110acfc:	100695fa 	slli	r3,r2,23
8110ad00:	00802034 	movhi	r2,128
8110ad04:	10bfffc4 	addi	r2,r2,-1
8110ad08:	2084703a 	and	r2,r4,r2
8110ad0c:	10c4b03a 	or	r2,r2,r3
8110ad10:	dfc00117 	ldw	ra,4(sp)
8110ad14:	dc000017 	ldw	r16,0(sp)
8110ad18:	dec00204 	addi	sp,sp,8
8110ad1c:	f800283a 	ret
8110ad20:	01002644 	movi	r4,153
8110ad24:	20c01816 	blt	r4,r3,8110ad88 <__floatunsisf+0xcc>
8110ad28:	20c9c83a 	sub	r4,r4,r3
8110ad2c:	8108983a 	sll	r4,r16,r4
8110ad30:	017f0034 	movhi	r5,64512
8110ad34:	297fffc4 	addi	r5,r5,-1
8110ad38:	218001cc 	andi	r6,r4,7
8110ad3c:	214a703a 	and	r5,r4,r5
8110ad40:	30000426 	beq	r6,zero,8110ad54 <__floatunsisf+0x98>
8110ad44:	210003cc 	andi	r4,r4,15
8110ad48:	01800104 	movi	r6,4
8110ad4c:	21800126 	beq	r4,r6,8110ad54 <__floatunsisf+0x98>
8110ad50:	298b883a 	add	r5,r5,r6
8110ad54:	2901002c 	andhi	r4,r5,1024
8110ad58:	20000526 	beq	r4,zero,8110ad70 <__floatunsisf+0xb4>
8110ad5c:	00c027c4 	movi	r3,159
8110ad60:	1887c83a 	sub	r3,r3,r2
8110ad64:	00bf0034 	movhi	r2,64512
8110ad68:	10bfffc4 	addi	r2,r2,-1
8110ad6c:	288a703a 	and	r5,r5,r2
8110ad70:	280891ba 	slli	r4,r5,6
8110ad74:	2008d27a 	srli	r4,r4,9
8110ad78:	003fdf06 	br	8110acf8 <__reset+0xfb0eacf8>
8110ad7c:	0007883a 	mov	r3,zero
8110ad80:	0009883a 	mov	r4,zero
8110ad84:	003fdc06 	br	8110acf8 <__reset+0xfb0eacf8>
8110ad88:	01402e44 	movi	r5,185
8110ad8c:	28cbc83a 	sub	r5,r5,r3
8110ad90:	01000144 	movi	r4,5
8110ad94:	2089c83a 	sub	r4,r4,r2
8110ad98:	814a983a 	sll	r5,r16,r5
8110ad9c:	8108d83a 	srl	r4,r16,r4
8110ada0:	2820c03a 	cmpne	r16,r5,zero
8110ada4:	2408b03a 	or	r4,r4,r16
8110ada8:	003fe106 	br	8110ad30 <__reset+0xfb0ead30>

8110adac <__muldf3>:
8110adac:	defff304 	addi	sp,sp,-52
8110adb0:	2804d53a 	srli	r2,r5,20
8110adb4:	dd800915 	stw	r22,36(sp)
8110adb8:	282cd7fa 	srli	r22,r5,31
8110adbc:	dc000315 	stw	r16,12(sp)
8110adc0:	04000434 	movhi	r16,16
8110adc4:	dd400815 	stw	r21,32(sp)
8110adc8:	dc800515 	stw	r18,20(sp)
8110adcc:	843fffc4 	addi	r16,r16,-1
8110add0:	dfc00c15 	stw	ra,48(sp)
8110add4:	df000b15 	stw	fp,44(sp)
8110add8:	ddc00a15 	stw	r23,40(sp)
8110addc:	dd000715 	stw	r20,28(sp)
8110ade0:	dcc00615 	stw	r19,24(sp)
8110ade4:	dc400415 	stw	r17,16(sp)
8110ade8:	1481ffcc 	andi	r18,r2,2047
8110adec:	2c20703a 	and	r16,r5,r16
8110adf0:	b02b883a 	mov	r21,r22
8110adf4:	b2403fcc 	andi	r9,r22,255
8110adf8:	90006026 	beq	r18,zero,8110af7c <__muldf3+0x1d0>
8110adfc:	0081ffc4 	movi	r2,2047
8110ae00:	2029883a 	mov	r20,r4
8110ae04:	90803626 	beq	r18,r2,8110aee0 <__muldf3+0x134>
8110ae08:	80800434 	orhi	r2,r16,16
8110ae0c:	100490fa 	slli	r2,r2,3
8110ae10:	2020d77a 	srli	r16,r4,29
8110ae14:	202890fa 	slli	r20,r4,3
8110ae18:	94bf0044 	addi	r18,r18,-1023
8110ae1c:	80a0b03a 	or	r16,r16,r2
8110ae20:	0027883a 	mov	r19,zero
8110ae24:	0039883a 	mov	fp,zero
8110ae28:	3804d53a 	srli	r2,r7,20
8110ae2c:	382ed7fa 	srli	r23,r7,31
8110ae30:	04400434 	movhi	r17,16
8110ae34:	8c7fffc4 	addi	r17,r17,-1
8110ae38:	1081ffcc 	andi	r2,r2,2047
8110ae3c:	3011883a 	mov	r8,r6
8110ae40:	3c62703a 	and	r17,r7,r17
8110ae44:	ba803fcc 	andi	r10,r23,255
8110ae48:	10006d26 	beq	r2,zero,8110b000 <__muldf3+0x254>
8110ae4c:	00c1ffc4 	movi	r3,2047
8110ae50:	10c06526 	beq	r2,r3,8110afe8 <__muldf3+0x23c>
8110ae54:	88c00434 	orhi	r3,r17,16
8110ae58:	180690fa 	slli	r3,r3,3
8110ae5c:	3022d77a 	srli	r17,r6,29
8110ae60:	301090fa 	slli	r8,r6,3
8110ae64:	10bf0044 	addi	r2,r2,-1023
8110ae68:	88e2b03a 	or	r17,r17,r3
8110ae6c:	000b883a 	mov	r5,zero
8110ae70:	9085883a 	add	r2,r18,r2
8110ae74:	2cc8b03a 	or	r4,r5,r19
8110ae78:	00c003c4 	movi	r3,15
8110ae7c:	bdacf03a 	xor	r22,r23,r22
8110ae80:	12c00044 	addi	r11,r2,1
8110ae84:	19009936 	bltu	r3,r4,8110b0ec <__muldf3+0x340>
8110ae88:	200890ba 	slli	r4,r4,2
8110ae8c:	00e04474 	movhi	r3,33041
8110ae90:	18eba804 	addi	r3,r3,-20832
8110ae94:	20c9883a 	add	r4,r4,r3
8110ae98:	20c00017 	ldw	r3,0(r4)
8110ae9c:	1800683a 	jmp	r3
8110aea0:	8110b0ec 	andhi	r4,r16,17091
8110aea4:	8110af00 	call	88110af0 <__reset+0x20f0af0>
8110aea8:	8110af00 	call	88110af0 <__reset+0x20f0af0>
8110aeac:	8110aefc 	xorhi	r4,r16,17083
8110aeb0:	8110b0c8 	cmpgei	r4,r16,17091
8110aeb4:	8110b0c8 	cmpgei	r4,r16,17091
8110aeb8:	8110b0b0 	cmpltui	r4,r16,17090
8110aebc:	8110aefc 	xorhi	r4,r16,17083
8110aec0:	8110b0c8 	cmpgei	r4,r16,17091
8110aec4:	8110b0b0 	cmpltui	r4,r16,17090
8110aec8:	8110b0c8 	cmpgei	r4,r16,17091
8110aecc:	8110aefc 	xorhi	r4,r16,17083
8110aed0:	8110b0d8 	cmpnei	r4,r16,17091
8110aed4:	8110b0d8 	cmpnei	r4,r16,17091
8110aed8:	8110b0d8 	cmpnei	r4,r16,17091
8110aedc:	8110b2f4 	orhi	r4,r16,17099
8110aee0:	2404b03a 	or	r2,r4,r16
8110aee4:	10006f1e 	bne	r2,zero,8110b0a4 <__muldf3+0x2f8>
8110aee8:	04c00204 	movi	r19,8
8110aeec:	0021883a 	mov	r16,zero
8110aef0:	0029883a 	mov	r20,zero
8110aef4:	07000084 	movi	fp,2
8110aef8:	003fcb06 	br	8110ae28 <__reset+0xfb0eae28>
8110aefc:	502d883a 	mov	r22,r10
8110af00:	00800084 	movi	r2,2
8110af04:	28805726 	beq	r5,r2,8110b064 <__muldf3+0x2b8>
8110af08:	008000c4 	movi	r2,3
8110af0c:	28816626 	beq	r5,r2,8110b4a8 <__muldf3+0x6fc>
8110af10:	00800044 	movi	r2,1
8110af14:	2881411e 	bne	r5,r2,8110b41c <__muldf3+0x670>
8110af18:	b02b883a 	mov	r21,r22
8110af1c:	0005883a 	mov	r2,zero
8110af20:	000b883a 	mov	r5,zero
8110af24:	0029883a 	mov	r20,zero
8110af28:	1004953a 	slli	r2,r2,20
8110af2c:	a8c03fcc 	andi	r3,r21,255
8110af30:	04400434 	movhi	r17,16
8110af34:	8c7fffc4 	addi	r17,r17,-1
8110af38:	180697fa 	slli	r3,r3,31
8110af3c:	2c4a703a 	and	r5,r5,r17
8110af40:	288ab03a 	or	r5,r5,r2
8110af44:	28c6b03a 	or	r3,r5,r3
8110af48:	a005883a 	mov	r2,r20
8110af4c:	dfc00c17 	ldw	ra,48(sp)
8110af50:	df000b17 	ldw	fp,44(sp)
8110af54:	ddc00a17 	ldw	r23,40(sp)
8110af58:	dd800917 	ldw	r22,36(sp)
8110af5c:	dd400817 	ldw	r21,32(sp)
8110af60:	dd000717 	ldw	r20,28(sp)
8110af64:	dcc00617 	ldw	r19,24(sp)
8110af68:	dc800517 	ldw	r18,20(sp)
8110af6c:	dc400417 	ldw	r17,16(sp)
8110af70:	dc000317 	ldw	r16,12(sp)
8110af74:	dec00d04 	addi	sp,sp,52
8110af78:	f800283a 	ret
8110af7c:	2404b03a 	or	r2,r4,r16
8110af80:	2027883a 	mov	r19,r4
8110af84:	10004226 	beq	r2,zero,8110b090 <__muldf3+0x2e4>
8110af88:	8000fc26 	beq	r16,zero,8110b37c <__muldf3+0x5d0>
8110af8c:	8009883a 	mov	r4,r16
8110af90:	d9800215 	stw	r6,8(sp)
8110af94:	d9c00015 	stw	r7,0(sp)
8110af98:	da400115 	stw	r9,4(sp)
8110af9c:	110b77c0 	call	8110b77c <__clzsi2>
8110afa0:	d9800217 	ldw	r6,8(sp)
8110afa4:	d9c00017 	ldw	r7,0(sp)
8110afa8:	da400117 	ldw	r9,4(sp)
8110afac:	113ffd44 	addi	r4,r2,-11
8110afb0:	00c00704 	movi	r3,28
8110afb4:	1900ed16 	blt	r3,r4,8110b36c <__muldf3+0x5c0>
8110afb8:	00c00744 	movi	r3,29
8110afbc:	147ffe04 	addi	r17,r2,-8
8110afc0:	1907c83a 	sub	r3,r3,r4
8110afc4:	8460983a 	sll	r16,r16,r17
8110afc8:	98c6d83a 	srl	r3,r19,r3
8110afcc:	9c68983a 	sll	r20,r19,r17
8110afd0:	1c20b03a 	or	r16,r3,r16
8110afd4:	1080fcc4 	addi	r2,r2,1011
8110afd8:	00a5c83a 	sub	r18,zero,r2
8110afdc:	0027883a 	mov	r19,zero
8110afe0:	0039883a 	mov	fp,zero
8110afe4:	003f9006 	br	8110ae28 <__reset+0xfb0eae28>
8110afe8:	3446b03a 	or	r3,r6,r17
8110afec:	1800261e 	bne	r3,zero,8110b088 <__muldf3+0x2dc>
8110aff0:	0023883a 	mov	r17,zero
8110aff4:	0011883a 	mov	r8,zero
8110aff8:	01400084 	movi	r5,2
8110affc:	003f9c06 	br	8110ae70 <__reset+0xfb0eae70>
8110b000:	3446b03a 	or	r3,r6,r17
8110b004:	18001c26 	beq	r3,zero,8110b078 <__muldf3+0x2cc>
8110b008:	8800ce26 	beq	r17,zero,8110b344 <__muldf3+0x598>
8110b00c:	8809883a 	mov	r4,r17
8110b010:	d9800215 	stw	r6,8(sp)
8110b014:	da400115 	stw	r9,4(sp)
8110b018:	da800015 	stw	r10,0(sp)
8110b01c:	110b77c0 	call	8110b77c <__clzsi2>
8110b020:	d9800217 	ldw	r6,8(sp)
8110b024:	da400117 	ldw	r9,4(sp)
8110b028:	da800017 	ldw	r10,0(sp)
8110b02c:	113ffd44 	addi	r4,r2,-11
8110b030:	00c00704 	movi	r3,28
8110b034:	1900bf16 	blt	r3,r4,8110b334 <__muldf3+0x588>
8110b038:	00c00744 	movi	r3,29
8110b03c:	123ffe04 	addi	r8,r2,-8
8110b040:	1907c83a 	sub	r3,r3,r4
8110b044:	8a22983a 	sll	r17,r17,r8
8110b048:	30c6d83a 	srl	r3,r6,r3
8110b04c:	3210983a 	sll	r8,r6,r8
8110b050:	1c62b03a 	or	r17,r3,r17
8110b054:	1080fcc4 	addi	r2,r2,1011
8110b058:	0085c83a 	sub	r2,zero,r2
8110b05c:	000b883a 	mov	r5,zero
8110b060:	003f8306 	br	8110ae70 <__reset+0xfb0eae70>
8110b064:	b02b883a 	mov	r21,r22
8110b068:	0081ffc4 	movi	r2,2047
8110b06c:	000b883a 	mov	r5,zero
8110b070:	0029883a 	mov	r20,zero
8110b074:	003fac06 	br	8110af28 <__reset+0xfb0eaf28>
8110b078:	0023883a 	mov	r17,zero
8110b07c:	0011883a 	mov	r8,zero
8110b080:	01400044 	movi	r5,1
8110b084:	003f7a06 	br	8110ae70 <__reset+0xfb0eae70>
8110b088:	014000c4 	movi	r5,3
8110b08c:	003f7806 	br	8110ae70 <__reset+0xfb0eae70>
8110b090:	04c00104 	movi	r19,4
8110b094:	0021883a 	mov	r16,zero
8110b098:	0029883a 	mov	r20,zero
8110b09c:	07000044 	movi	fp,1
8110b0a0:	003f6106 	br	8110ae28 <__reset+0xfb0eae28>
8110b0a4:	04c00304 	movi	r19,12
8110b0a8:	070000c4 	movi	fp,3
8110b0ac:	003f5e06 	br	8110ae28 <__reset+0xfb0eae28>
8110b0b0:	01400434 	movhi	r5,16
8110b0b4:	002b883a 	mov	r21,zero
8110b0b8:	297fffc4 	addi	r5,r5,-1
8110b0bc:	053fffc4 	movi	r20,-1
8110b0c0:	0081ffc4 	movi	r2,2047
8110b0c4:	003f9806 	br	8110af28 <__reset+0xfb0eaf28>
8110b0c8:	8023883a 	mov	r17,r16
8110b0cc:	a011883a 	mov	r8,r20
8110b0d0:	e00b883a 	mov	r5,fp
8110b0d4:	003f8a06 	br	8110af00 <__reset+0xfb0eaf00>
8110b0d8:	8023883a 	mov	r17,r16
8110b0dc:	a011883a 	mov	r8,r20
8110b0e0:	482d883a 	mov	r22,r9
8110b0e4:	e00b883a 	mov	r5,fp
8110b0e8:	003f8506 	br	8110af00 <__reset+0xfb0eaf00>
8110b0ec:	a00ad43a 	srli	r5,r20,16
8110b0f0:	401ad43a 	srli	r13,r8,16
8110b0f4:	a53fffcc 	andi	r20,r20,65535
8110b0f8:	423fffcc 	andi	r8,r8,65535
8110b0fc:	4519383a 	mul	r12,r8,r20
8110b100:	4147383a 	mul	r3,r8,r5
8110b104:	6d09383a 	mul	r4,r13,r20
8110b108:	600cd43a 	srli	r6,r12,16
8110b10c:	2b5d383a 	mul	r14,r5,r13
8110b110:	20c9883a 	add	r4,r4,r3
8110b114:	310d883a 	add	r6,r6,r4
8110b118:	30c0022e 	bgeu	r6,r3,8110b124 <__muldf3+0x378>
8110b11c:	00c00074 	movhi	r3,1
8110b120:	70dd883a 	add	r14,r14,r3
8110b124:	8826d43a 	srli	r19,r17,16
8110b128:	8bffffcc 	andi	r15,r17,65535
8110b12c:	7d23383a 	mul	r17,r15,r20
8110b130:	7949383a 	mul	r4,r15,r5
8110b134:	9d29383a 	mul	r20,r19,r20
8110b138:	8814d43a 	srli	r10,r17,16
8110b13c:	3012943a 	slli	r9,r6,16
8110b140:	a129883a 	add	r20,r20,r4
8110b144:	633fffcc 	andi	r12,r12,65535
8110b148:	5515883a 	add	r10,r10,r20
8110b14c:	3006d43a 	srli	r3,r6,16
8110b150:	4b13883a 	add	r9,r9,r12
8110b154:	2ccb383a 	mul	r5,r5,r19
8110b158:	5100022e 	bgeu	r10,r4,8110b164 <__muldf3+0x3b8>
8110b15c:	01000074 	movhi	r4,1
8110b160:	290b883a 	add	r5,r5,r4
8110b164:	802ad43a 	srli	r21,r16,16
8110b168:	843fffcc 	andi	r16,r16,65535
8110b16c:	440d383a 	mul	r6,r8,r16
8110b170:	4565383a 	mul	r18,r8,r21
8110b174:	8349383a 	mul	r4,r16,r13
8110b178:	500e943a 	slli	r7,r10,16
8110b17c:	3010d43a 	srli	r8,r6,16
8110b180:	5028d43a 	srli	r20,r10,16
8110b184:	2489883a 	add	r4,r4,r18
8110b188:	8abfffcc 	andi	r10,r17,65535
8110b18c:	3a95883a 	add	r10,r7,r10
8110b190:	4119883a 	add	r12,r8,r4
8110b194:	a169883a 	add	r20,r20,r5
8110b198:	1a87883a 	add	r3,r3,r10
8110b19c:	6d5b383a 	mul	r13,r13,r21
8110b1a0:	6480022e 	bgeu	r12,r18,8110b1ac <__muldf3+0x400>
8110b1a4:	01000074 	movhi	r4,1
8110b1a8:	691b883a 	add	r13,r13,r4
8110b1ac:	7c25383a 	mul	r18,r15,r16
8110b1b0:	7d4b383a 	mul	r5,r15,r21
8110b1b4:	84cf383a 	mul	r7,r16,r19
8110b1b8:	901ed43a 	srli	r15,r18,16
8110b1bc:	6008d43a 	srli	r4,r12,16
8110b1c0:	6010943a 	slli	r8,r12,16
8110b1c4:	394f883a 	add	r7,r7,r5
8110b1c8:	333fffcc 	andi	r12,r6,65535
8110b1cc:	79df883a 	add	r15,r15,r7
8110b1d0:	235b883a 	add	r13,r4,r13
8110b1d4:	9d63383a 	mul	r17,r19,r21
8110b1d8:	4309883a 	add	r4,r8,r12
8110b1dc:	7940022e 	bgeu	r15,r5,8110b1e8 <__muldf3+0x43c>
8110b1e0:	01400074 	movhi	r5,1
8110b1e4:	8963883a 	add	r17,r17,r5
8110b1e8:	780a943a 	slli	r5,r15,16
8110b1ec:	91bfffcc 	andi	r6,r18,65535
8110b1f0:	70c7883a 	add	r3,r14,r3
8110b1f4:	298d883a 	add	r6,r5,r6
8110b1f8:	1a8f803a 	cmpltu	r7,r3,r10
8110b1fc:	350b883a 	add	r5,r6,r20
8110b200:	20c7883a 	add	r3,r4,r3
8110b204:	3955883a 	add	r10,r7,r5
8110b208:	1909803a 	cmpltu	r4,r3,r4
8110b20c:	6a91883a 	add	r8,r13,r10
8110b210:	780cd43a 	srli	r6,r15,16
8110b214:	2219883a 	add	r12,r4,r8
8110b218:	2d0b803a 	cmpltu	r5,r5,r20
8110b21c:	51cf803a 	cmpltu	r7,r10,r7
8110b220:	29ceb03a 	or	r7,r5,r7
8110b224:	4351803a 	cmpltu	r8,r8,r13
8110b228:	610b803a 	cmpltu	r5,r12,r4
8110b22c:	4148b03a 	or	r4,r8,r5
8110b230:	398f883a 	add	r7,r7,r6
8110b234:	3909883a 	add	r4,r7,r4
8110b238:	1810927a 	slli	r8,r3,9
8110b23c:	2449883a 	add	r4,r4,r17
8110b240:	2008927a 	slli	r4,r4,9
8110b244:	6022d5fa 	srli	r17,r12,23
8110b248:	1806d5fa 	srli	r3,r3,23
8110b24c:	4252b03a 	or	r9,r8,r9
8110b250:	600a927a 	slli	r5,r12,9
8110b254:	4810c03a 	cmpne	r8,r9,zero
8110b258:	2462b03a 	or	r17,r4,r17
8110b25c:	40c6b03a 	or	r3,r8,r3
8110b260:	8900402c 	andhi	r4,r17,256
8110b264:	1950b03a 	or	r8,r3,r5
8110b268:	20000726 	beq	r4,zero,8110b288 <__muldf3+0x4dc>
8110b26c:	4006d07a 	srli	r3,r8,1
8110b270:	880497fa 	slli	r2,r17,31
8110b274:	4200004c 	andi	r8,r8,1
8110b278:	8822d07a 	srli	r17,r17,1
8110b27c:	1a10b03a 	or	r8,r3,r8
8110b280:	1210b03a 	or	r8,r2,r8
8110b284:	5805883a 	mov	r2,r11
8110b288:	1140ffc4 	addi	r5,r2,1023
8110b28c:	0140440e 	bge	zero,r5,8110b3a0 <__muldf3+0x5f4>
8110b290:	40c001cc 	andi	r3,r8,7
8110b294:	18000726 	beq	r3,zero,8110b2b4 <__muldf3+0x508>
8110b298:	40c003cc 	andi	r3,r8,15
8110b29c:	01000104 	movi	r4,4
8110b2a0:	19000426 	beq	r3,r4,8110b2b4 <__muldf3+0x508>
8110b2a4:	4107883a 	add	r3,r8,r4
8110b2a8:	1a11803a 	cmpltu	r8,r3,r8
8110b2ac:	8a23883a 	add	r17,r17,r8
8110b2b0:	1811883a 	mov	r8,r3
8110b2b4:	88c0402c 	andhi	r3,r17,256
8110b2b8:	18000426 	beq	r3,zero,8110b2cc <__muldf3+0x520>
8110b2bc:	11410004 	addi	r5,r2,1024
8110b2c0:	00bfc034 	movhi	r2,65280
8110b2c4:	10bfffc4 	addi	r2,r2,-1
8110b2c8:	88a2703a 	and	r17,r17,r2
8110b2cc:	0081ff84 	movi	r2,2046
8110b2d0:	117f6416 	blt	r2,r5,8110b064 <__reset+0xfb0eb064>
8110b2d4:	8828977a 	slli	r20,r17,29
8110b2d8:	4010d0fa 	srli	r8,r8,3
8110b2dc:	8822927a 	slli	r17,r17,9
8110b2e0:	2881ffcc 	andi	r2,r5,2047
8110b2e4:	a228b03a 	or	r20,r20,r8
8110b2e8:	880ad33a 	srli	r5,r17,12
8110b2ec:	b02b883a 	mov	r21,r22
8110b2f0:	003f0d06 	br	8110af28 <__reset+0xfb0eaf28>
8110b2f4:	8080022c 	andhi	r2,r16,8
8110b2f8:	10000926 	beq	r2,zero,8110b320 <__muldf3+0x574>
8110b2fc:	8880022c 	andhi	r2,r17,8
8110b300:	1000071e 	bne	r2,zero,8110b320 <__muldf3+0x574>
8110b304:	00800434 	movhi	r2,16
8110b308:	89400234 	orhi	r5,r17,8
8110b30c:	10bfffc4 	addi	r2,r2,-1
8110b310:	b82b883a 	mov	r21,r23
8110b314:	288a703a 	and	r5,r5,r2
8110b318:	4029883a 	mov	r20,r8
8110b31c:	003f6806 	br	8110b0c0 <__reset+0xfb0eb0c0>
8110b320:	00800434 	movhi	r2,16
8110b324:	81400234 	orhi	r5,r16,8
8110b328:	10bfffc4 	addi	r2,r2,-1
8110b32c:	288a703a 	and	r5,r5,r2
8110b330:	003f6306 	br	8110b0c0 <__reset+0xfb0eb0c0>
8110b334:	147ff604 	addi	r17,r2,-40
8110b338:	3462983a 	sll	r17,r6,r17
8110b33c:	0011883a 	mov	r8,zero
8110b340:	003f4406 	br	8110b054 <__reset+0xfb0eb054>
8110b344:	3009883a 	mov	r4,r6
8110b348:	d9800215 	stw	r6,8(sp)
8110b34c:	da400115 	stw	r9,4(sp)
8110b350:	da800015 	stw	r10,0(sp)
8110b354:	110b77c0 	call	8110b77c <__clzsi2>
8110b358:	10800804 	addi	r2,r2,32
8110b35c:	da800017 	ldw	r10,0(sp)
8110b360:	da400117 	ldw	r9,4(sp)
8110b364:	d9800217 	ldw	r6,8(sp)
8110b368:	003f3006 	br	8110b02c <__reset+0xfb0eb02c>
8110b36c:	143ff604 	addi	r16,r2,-40
8110b370:	9c20983a 	sll	r16,r19,r16
8110b374:	0029883a 	mov	r20,zero
8110b378:	003f1606 	br	8110afd4 <__reset+0xfb0eafd4>
8110b37c:	d9800215 	stw	r6,8(sp)
8110b380:	d9c00015 	stw	r7,0(sp)
8110b384:	da400115 	stw	r9,4(sp)
8110b388:	110b77c0 	call	8110b77c <__clzsi2>
8110b38c:	10800804 	addi	r2,r2,32
8110b390:	da400117 	ldw	r9,4(sp)
8110b394:	d9c00017 	ldw	r7,0(sp)
8110b398:	d9800217 	ldw	r6,8(sp)
8110b39c:	003f0306 	br	8110afac <__reset+0xfb0eafac>
8110b3a0:	00c00044 	movi	r3,1
8110b3a4:	1947c83a 	sub	r3,r3,r5
8110b3a8:	00800e04 	movi	r2,56
8110b3ac:	10feda16 	blt	r2,r3,8110af18 <__reset+0xfb0eaf18>
8110b3b0:	008007c4 	movi	r2,31
8110b3b4:	10c01b16 	blt	r2,r3,8110b424 <__muldf3+0x678>
8110b3b8:	00800804 	movi	r2,32
8110b3bc:	10c5c83a 	sub	r2,r2,r3
8110b3c0:	888a983a 	sll	r5,r17,r2
8110b3c4:	40c8d83a 	srl	r4,r8,r3
8110b3c8:	4084983a 	sll	r2,r8,r2
8110b3cc:	88e2d83a 	srl	r17,r17,r3
8110b3d0:	2906b03a 	or	r3,r5,r4
8110b3d4:	1004c03a 	cmpne	r2,r2,zero
8110b3d8:	1886b03a 	or	r3,r3,r2
8110b3dc:	188001cc 	andi	r2,r3,7
8110b3e0:	10000726 	beq	r2,zero,8110b400 <__muldf3+0x654>
8110b3e4:	188003cc 	andi	r2,r3,15
8110b3e8:	01000104 	movi	r4,4
8110b3ec:	11000426 	beq	r2,r4,8110b400 <__muldf3+0x654>
8110b3f0:	1805883a 	mov	r2,r3
8110b3f4:	10c00104 	addi	r3,r2,4
8110b3f8:	1885803a 	cmpltu	r2,r3,r2
8110b3fc:	88a3883a 	add	r17,r17,r2
8110b400:	8880202c 	andhi	r2,r17,128
8110b404:	10001c26 	beq	r2,zero,8110b478 <__muldf3+0x6cc>
8110b408:	b02b883a 	mov	r21,r22
8110b40c:	00800044 	movi	r2,1
8110b410:	000b883a 	mov	r5,zero
8110b414:	0029883a 	mov	r20,zero
8110b418:	003ec306 	br	8110af28 <__reset+0xfb0eaf28>
8110b41c:	5805883a 	mov	r2,r11
8110b420:	003f9906 	br	8110b288 <__reset+0xfb0eb288>
8110b424:	00bff844 	movi	r2,-31
8110b428:	1145c83a 	sub	r2,r2,r5
8110b42c:	8888d83a 	srl	r4,r17,r2
8110b430:	00800804 	movi	r2,32
8110b434:	18801a26 	beq	r3,r2,8110b4a0 <__muldf3+0x6f4>
8110b438:	00801004 	movi	r2,64
8110b43c:	10c5c83a 	sub	r2,r2,r3
8110b440:	8884983a 	sll	r2,r17,r2
8110b444:	1204b03a 	or	r2,r2,r8
8110b448:	1004c03a 	cmpne	r2,r2,zero
8110b44c:	2084b03a 	or	r2,r4,r2
8110b450:	144001cc 	andi	r17,r2,7
8110b454:	88000d1e 	bne	r17,zero,8110b48c <__muldf3+0x6e0>
8110b458:	000b883a 	mov	r5,zero
8110b45c:	1028d0fa 	srli	r20,r2,3
8110b460:	b02b883a 	mov	r21,r22
8110b464:	0005883a 	mov	r2,zero
8110b468:	a468b03a 	or	r20,r20,r17
8110b46c:	003eae06 	br	8110af28 <__reset+0xfb0eaf28>
8110b470:	1007883a 	mov	r3,r2
8110b474:	0023883a 	mov	r17,zero
8110b478:	880a927a 	slli	r5,r17,9
8110b47c:	1805883a 	mov	r2,r3
8110b480:	8822977a 	slli	r17,r17,29
8110b484:	280ad33a 	srli	r5,r5,12
8110b488:	003ff406 	br	8110b45c <__reset+0xfb0eb45c>
8110b48c:	10c003cc 	andi	r3,r2,15
8110b490:	01000104 	movi	r4,4
8110b494:	193ff626 	beq	r3,r4,8110b470 <__reset+0xfb0eb470>
8110b498:	0023883a 	mov	r17,zero
8110b49c:	003fd506 	br	8110b3f4 <__reset+0xfb0eb3f4>
8110b4a0:	0005883a 	mov	r2,zero
8110b4a4:	003fe706 	br	8110b444 <__reset+0xfb0eb444>
8110b4a8:	00800434 	movhi	r2,16
8110b4ac:	89400234 	orhi	r5,r17,8
8110b4b0:	10bfffc4 	addi	r2,r2,-1
8110b4b4:	b02b883a 	mov	r21,r22
8110b4b8:	288a703a 	and	r5,r5,r2
8110b4bc:	4029883a 	mov	r20,r8
8110b4c0:	003eff06 	br	8110b0c0 <__reset+0xfb0eb0c0>

8110b4c4 <__extendsfdf2>:
8110b4c4:	200ad5fa 	srli	r5,r4,23
8110b4c8:	defffd04 	addi	sp,sp,-12
8110b4cc:	dc400115 	stw	r17,4(sp)
8110b4d0:	29403fcc 	andi	r5,r5,255
8110b4d4:	29800044 	addi	r6,r5,1
8110b4d8:	04402034 	movhi	r17,128
8110b4dc:	dc000015 	stw	r16,0(sp)
8110b4e0:	8c7fffc4 	addi	r17,r17,-1
8110b4e4:	dfc00215 	stw	ra,8(sp)
8110b4e8:	31803fcc 	andi	r6,r6,255
8110b4ec:	00800044 	movi	r2,1
8110b4f0:	8922703a 	and	r17,r17,r4
8110b4f4:	2020d7fa 	srli	r16,r4,31
8110b4f8:	1180110e 	bge	r2,r6,8110b540 <__extendsfdf2+0x7c>
8110b4fc:	880cd0fa 	srli	r6,r17,3
8110b500:	8822977a 	slli	r17,r17,29
8110b504:	2940e004 	addi	r5,r5,896
8110b508:	2941ffcc 	andi	r5,r5,2047
8110b50c:	2804953a 	slli	r2,r5,20
8110b510:	01400434 	movhi	r5,16
8110b514:	800697fa 	slli	r3,r16,31
8110b518:	297fffc4 	addi	r5,r5,-1
8110b51c:	314a703a 	and	r5,r6,r5
8110b520:	288ab03a 	or	r5,r5,r2
8110b524:	28c6b03a 	or	r3,r5,r3
8110b528:	8805883a 	mov	r2,r17
8110b52c:	dfc00217 	ldw	ra,8(sp)
8110b530:	dc400117 	ldw	r17,4(sp)
8110b534:	dc000017 	ldw	r16,0(sp)
8110b538:	dec00304 	addi	sp,sp,12
8110b53c:	f800283a 	ret
8110b540:	2800111e 	bne	r5,zero,8110b588 <__extendsfdf2+0xc4>
8110b544:	88001c26 	beq	r17,zero,8110b5b8 <__extendsfdf2+0xf4>
8110b548:	8809883a 	mov	r4,r17
8110b54c:	110b77c0 	call	8110b77c <__clzsi2>
8110b550:	00c00284 	movi	r3,10
8110b554:	18801b16 	blt	r3,r2,8110b5c4 <__extendsfdf2+0x100>
8110b558:	018002c4 	movi	r6,11
8110b55c:	308dc83a 	sub	r6,r6,r2
8110b560:	11000544 	addi	r4,r2,21
8110b564:	8986d83a 	srl	r3,r17,r6
8110b568:	8922983a 	sll	r17,r17,r4
8110b56c:	0180e244 	movi	r6,905
8110b570:	01400434 	movhi	r5,16
8110b574:	3085c83a 	sub	r2,r6,r2
8110b578:	297fffc4 	addi	r5,r5,-1
8110b57c:	194c703a 	and	r6,r3,r5
8110b580:	1141ffcc 	andi	r5,r2,2047
8110b584:	003fe006 	br	8110b508 <__reset+0xfb0eb508>
8110b588:	88000826 	beq	r17,zero,8110b5ac <__extendsfdf2+0xe8>
8110b58c:	880cd0fa 	srli	r6,r17,3
8110b590:	00800434 	movhi	r2,16
8110b594:	10bfffc4 	addi	r2,r2,-1
8110b598:	31800234 	orhi	r6,r6,8
8110b59c:	8822977a 	slli	r17,r17,29
8110b5a0:	308c703a 	and	r6,r6,r2
8110b5a4:	0141ffc4 	movi	r5,2047
8110b5a8:	003fd706 	br	8110b508 <__reset+0xfb0eb508>
8110b5ac:	0141ffc4 	movi	r5,2047
8110b5b0:	000d883a 	mov	r6,zero
8110b5b4:	003fd406 	br	8110b508 <__reset+0xfb0eb508>
8110b5b8:	000b883a 	mov	r5,zero
8110b5bc:	000d883a 	mov	r6,zero
8110b5c0:	003fd106 	br	8110b508 <__reset+0xfb0eb508>
8110b5c4:	11bffd44 	addi	r6,r2,-11
8110b5c8:	8986983a 	sll	r3,r17,r6
8110b5cc:	0023883a 	mov	r17,zero
8110b5d0:	003fe606 	br	8110b56c <__reset+0xfb0eb56c>

8110b5d4 <__truncdfsf2>:
8110b5d4:	2810d53a 	srli	r8,r5,20
8110b5d8:	01c00434 	movhi	r7,16
8110b5dc:	39ffffc4 	addi	r7,r7,-1
8110b5e0:	29ce703a 	and	r7,r5,r7
8110b5e4:	4201ffcc 	andi	r8,r8,2047
8110b5e8:	380e90fa 	slli	r7,r7,3
8110b5ec:	200cd77a 	srli	r6,r4,29
8110b5f0:	42400044 	addi	r9,r8,1
8110b5f4:	4a41ffcc 	andi	r9,r9,2047
8110b5f8:	00c00044 	movi	r3,1
8110b5fc:	280ad7fa 	srli	r5,r5,31
8110b600:	31ceb03a 	or	r7,r6,r7
8110b604:	200490fa 	slli	r2,r4,3
8110b608:	1a40230e 	bge	r3,r9,8110b698 <__truncdfsf2+0xc4>
8110b60c:	40ff2004 	addi	r3,r8,-896
8110b610:	01803f84 	movi	r6,254
8110b614:	30c01516 	blt	r6,r3,8110b66c <__truncdfsf2+0x98>
8110b618:	00c0380e 	bge	zero,r3,8110b6fc <__truncdfsf2+0x128>
8110b61c:	200c91ba 	slli	r6,r4,6
8110b620:	380e90fa 	slli	r7,r7,3
8110b624:	1004d77a 	srli	r2,r2,29
8110b628:	300cc03a 	cmpne	r6,r6,zero
8110b62c:	31ccb03a 	or	r6,r6,r7
8110b630:	308cb03a 	or	r6,r6,r2
8110b634:	308001cc 	andi	r2,r6,7
8110b638:	10000426 	beq	r2,zero,8110b64c <__truncdfsf2+0x78>
8110b63c:	308003cc 	andi	r2,r6,15
8110b640:	01000104 	movi	r4,4
8110b644:	11000126 	beq	r2,r4,8110b64c <__truncdfsf2+0x78>
8110b648:	31800104 	addi	r6,r6,4
8110b64c:	3081002c 	andhi	r2,r6,1024
8110b650:	10001626 	beq	r2,zero,8110b6ac <__truncdfsf2+0xd8>
8110b654:	18c00044 	addi	r3,r3,1
8110b658:	00803fc4 	movi	r2,255
8110b65c:	18800326 	beq	r3,r2,8110b66c <__truncdfsf2+0x98>
8110b660:	300c91ba 	slli	r6,r6,6
8110b664:	300cd27a 	srli	r6,r6,9
8110b668:	00000206 	br	8110b674 <__truncdfsf2+0xa0>
8110b66c:	00ffffc4 	movi	r3,-1
8110b670:	000d883a 	mov	r6,zero
8110b674:	18c03fcc 	andi	r3,r3,255
8110b678:	180895fa 	slli	r4,r3,23
8110b67c:	00c02034 	movhi	r3,128
8110b680:	280a97fa 	slli	r5,r5,31
8110b684:	18ffffc4 	addi	r3,r3,-1
8110b688:	30c6703a 	and	r3,r6,r3
8110b68c:	1906b03a 	or	r3,r3,r4
8110b690:	1944b03a 	or	r2,r3,r5
8110b694:	f800283a 	ret
8110b698:	40000b1e 	bne	r8,zero,8110b6c8 <__truncdfsf2+0xf4>
8110b69c:	388cb03a 	or	r6,r7,r2
8110b6a0:	0007883a 	mov	r3,zero
8110b6a4:	30000426 	beq	r6,zero,8110b6b8 <__truncdfsf2+0xe4>
8110b6a8:	01800144 	movi	r6,5
8110b6ac:	00803fc4 	movi	r2,255
8110b6b0:	300cd0fa 	srli	r6,r6,3
8110b6b4:	18800a26 	beq	r3,r2,8110b6e0 <__truncdfsf2+0x10c>
8110b6b8:	00802034 	movhi	r2,128
8110b6bc:	10bfffc4 	addi	r2,r2,-1
8110b6c0:	308c703a 	and	r6,r6,r2
8110b6c4:	003feb06 	br	8110b674 <__reset+0xfb0eb674>
8110b6c8:	3888b03a 	or	r4,r7,r2
8110b6cc:	203fe726 	beq	r4,zero,8110b66c <__reset+0xfb0eb66c>
8110b6d0:	380c90fa 	slli	r6,r7,3
8110b6d4:	00c03fc4 	movi	r3,255
8110b6d8:	31808034 	orhi	r6,r6,512
8110b6dc:	003fd506 	br	8110b634 <__reset+0xfb0eb634>
8110b6e0:	303fe226 	beq	r6,zero,8110b66c <__reset+0xfb0eb66c>
8110b6e4:	00802034 	movhi	r2,128
8110b6e8:	31801034 	orhi	r6,r6,64
8110b6ec:	10bfffc4 	addi	r2,r2,-1
8110b6f0:	00ffffc4 	movi	r3,-1
8110b6f4:	308c703a 	and	r6,r6,r2
8110b6f8:	003fde06 	br	8110b674 <__reset+0xfb0eb674>
8110b6fc:	013ffa44 	movi	r4,-23
8110b700:	19000e16 	blt	r3,r4,8110b73c <__truncdfsf2+0x168>
8110b704:	01000784 	movi	r4,30
8110b708:	20c9c83a 	sub	r4,r4,r3
8110b70c:	018007c4 	movi	r6,31
8110b710:	39c02034 	orhi	r7,r7,128
8110b714:	31000b16 	blt	r6,r4,8110b744 <__truncdfsf2+0x170>
8110b718:	423f2084 	addi	r8,r8,-894
8110b71c:	120c983a 	sll	r6,r2,r8
8110b720:	3a0e983a 	sll	r7,r7,r8
8110b724:	1104d83a 	srl	r2,r2,r4
8110b728:	300cc03a 	cmpne	r6,r6,zero
8110b72c:	31ceb03a 	or	r7,r6,r7
8110b730:	388cb03a 	or	r6,r7,r2
8110b734:	0007883a 	mov	r3,zero
8110b738:	003fbe06 	br	8110b634 <__reset+0xfb0eb634>
8110b73c:	0007883a 	mov	r3,zero
8110b740:	003fd906 	br	8110b6a8 <__reset+0xfb0eb6a8>
8110b744:	01bfff84 	movi	r6,-2
8110b748:	30cdc83a 	sub	r6,r6,r3
8110b74c:	00c00804 	movi	r3,32
8110b750:	398cd83a 	srl	r6,r7,r6
8110b754:	20c00726 	beq	r4,r3,8110b774 <__truncdfsf2+0x1a0>
8110b758:	423f2884 	addi	r8,r8,-862
8110b75c:	3a0e983a 	sll	r7,r7,r8
8110b760:	3884b03a 	or	r2,r7,r2
8110b764:	1004c03a 	cmpne	r2,r2,zero
8110b768:	118cb03a 	or	r6,r2,r6
8110b76c:	0007883a 	mov	r3,zero
8110b770:	003fb006 	br	8110b634 <__reset+0xfb0eb634>
8110b774:	000f883a 	mov	r7,zero
8110b778:	003ff906 	br	8110b760 <__reset+0xfb0eb760>

8110b77c <__clzsi2>:
8110b77c:	00bfffd4 	movui	r2,65535
8110b780:	11000536 	bltu	r2,r4,8110b798 <__clzsi2+0x1c>
8110b784:	00803fc4 	movi	r2,255
8110b788:	11000f36 	bltu	r2,r4,8110b7c8 <__clzsi2+0x4c>
8110b78c:	00800804 	movi	r2,32
8110b790:	0007883a 	mov	r3,zero
8110b794:	00000506 	br	8110b7ac <__clzsi2+0x30>
8110b798:	00804034 	movhi	r2,256
8110b79c:	10bfffc4 	addi	r2,r2,-1
8110b7a0:	11000c2e 	bgeu	r2,r4,8110b7d4 <__clzsi2+0x58>
8110b7a4:	00800204 	movi	r2,8
8110b7a8:	00c00604 	movi	r3,24
8110b7ac:	20c8d83a 	srl	r4,r4,r3
8110b7b0:	00e044b4 	movhi	r3,33042
8110b7b4:	18c88b04 	addi	r3,r3,8748
8110b7b8:	1909883a 	add	r4,r3,r4
8110b7bc:	20c00003 	ldbu	r3,0(r4)
8110b7c0:	10c5c83a 	sub	r2,r2,r3
8110b7c4:	f800283a 	ret
8110b7c8:	00800604 	movi	r2,24
8110b7cc:	00c00204 	movi	r3,8
8110b7d0:	003ff606 	br	8110b7ac <__reset+0xfb0eb7ac>
8110b7d4:	00800404 	movi	r2,16
8110b7d8:	1007883a 	mov	r3,r2
8110b7dc:	003ff306 	br	8110b7ac <__reset+0xfb0eb7ac>

8110b7e0 <_fopen_r>:
8110b7e0:	defffa04 	addi	sp,sp,-24
8110b7e4:	3005883a 	mov	r2,r6
8110b7e8:	dcc00415 	stw	r19,16(sp)
8110b7ec:	d80d883a 	mov	r6,sp
8110b7f0:	2827883a 	mov	r19,r5
8110b7f4:	100b883a 	mov	r5,r2
8110b7f8:	dc800315 	stw	r18,12(sp)
8110b7fc:	dfc00515 	stw	ra,20(sp)
8110b800:	dc400215 	stw	r17,8(sp)
8110b804:	dc000115 	stw	r16,4(sp)
8110b808:	2025883a 	mov	r18,r4
8110b80c:	11136f00 	call	811136f0 <__sflags>
8110b810:	10002726 	beq	r2,zero,8110b8b0 <_fopen_r+0xd0>
8110b814:	9009883a 	mov	r4,r18
8110b818:	1023883a 	mov	r17,r2
8110b81c:	11135700 	call	81113570 <__sfp>
8110b820:	1021883a 	mov	r16,r2
8110b824:	10002226 	beq	r2,zero,8110b8b0 <_fopen_r+0xd0>
8110b828:	d9800017 	ldw	r6,0(sp)
8110b82c:	01c06d84 	movi	r7,438
8110b830:	980b883a 	mov	r5,r19
8110b834:	9009883a 	mov	r4,r18
8110b838:	110cc440 	call	8110cc44 <_open_r>
8110b83c:	10001916 	blt	r2,zero,8110b8a4 <_fopen_r+0xc4>
8110b840:	8080038d 	sth	r2,14(r16)
8110b844:	00a04474 	movhi	r2,33041
8110b848:	10b40d04 	addi	r2,r2,-12236
8110b84c:	80800815 	stw	r2,32(r16)
8110b850:	00a04474 	movhi	r2,33041
8110b854:	10b42404 	addi	r2,r2,-12144
8110b858:	80800915 	stw	r2,36(r16)
8110b85c:	00a04474 	movhi	r2,33041
8110b860:	10b44304 	addi	r2,r2,-12020
8110b864:	80800a15 	stw	r2,40(r16)
8110b868:	00a04474 	movhi	r2,33041
8110b86c:	10b45a04 	addi	r2,r2,-11928
8110b870:	8440030d 	sth	r17,12(r16)
8110b874:	84000715 	stw	r16,28(r16)
8110b878:	80800b15 	stw	r2,44(r16)
8110b87c:	8c40400c 	andi	r17,r17,256
8110b880:	88000d1e 	bne	r17,zero,8110b8b8 <_fopen_r+0xd8>
8110b884:	8005883a 	mov	r2,r16
8110b888:	dfc00517 	ldw	ra,20(sp)
8110b88c:	dcc00417 	ldw	r19,16(sp)
8110b890:	dc800317 	ldw	r18,12(sp)
8110b894:	dc400217 	ldw	r17,8(sp)
8110b898:	dc000117 	ldw	r16,4(sp)
8110b89c:	dec00604 	addi	sp,sp,24
8110b8a0:	f800283a 	ret
8110b8a4:	11136b00 	call	811136b0 <__sfp_lock_acquire>
8110b8a8:	8000030d 	sth	zero,12(r16)
8110b8ac:	11136b40 	call	811136b4 <__sfp_lock_release>
8110b8b0:	0005883a 	mov	r2,zero
8110b8b4:	003ff406 	br	8110b888 <__reset+0xfb0eb888>
8110b8b8:	01c00084 	movi	r7,2
8110b8bc:	000d883a 	mov	r6,zero
8110b8c0:	800b883a 	mov	r5,r16
8110b8c4:	9009883a 	mov	r4,r18
8110b8c8:	110b9380 	call	8110b938 <_fseek_r>
8110b8cc:	8005883a 	mov	r2,r16
8110b8d0:	003fed06 	br	8110b888 <__reset+0xfb0eb888>

8110b8d4 <fopen>:
8110b8d4:	00a044b4 	movhi	r2,33042
8110b8d8:	10910f04 	addi	r2,r2,17468
8110b8dc:	280d883a 	mov	r6,r5
8110b8e0:	200b883a 	mov	r5,r4
8110b8e4:	11000017 	ldw	r4,0(r2)
8110b8e8:	110b7e01 	jmpi	8110b7e0 <_fopen_r>

8110b8ec <_fprintf_r>:
8110b8ec:	defffe04 	addi	sp,sp,-8
8110b8f0:	2809883a 	mov	r4,r5
8110b8f4:	300b883a 	mov	r5,r6
8110b8f8:	dfc00015 	stw	ra,0(sp)
8110b8fc:	d9c00115 	stw	r7,4(sp)
8110b900:	d9800104 	addi	r6,sp,4
8110b904:	11115400 	call	81111540 <__vfprintf_internal>
8110b908:	dfc00017 	ldw	ra,0(sp)
8110b90c:	dec00204 	addi	sp,sp,8
8110b910:	f800283a 	ret

8110b914 <fprintf>:
8110b914:	defffd04 	addi	sp,sp,-12
8110b918:	dfc00015 	stw	ra,0(sp)
8110b91c:	d9800115 	stw	r6,4(sp)
8110b920:	d9c00215 	stw	r7,8(sp)
8110b924:	d9800104 	addi	r6,sp,4
8110b928:	11115400 	call	81111540 <__vfprintf_internal>
8110b92c:	dfc00017 	ldw	ra,0(sp)
8110b930:	dec00304 	addi	sp,sp,12
8110b934:	f800283a 	ret

8110b938 <_fseek_r>:
8110b938:	110b9581 	jmpi	8110b958 <_fseeko_r>

8110b93c <fseek>:
8110b93c:	00a044b4 	movhi	r2,33042
8110b940:	10910f04 	addi	r2,r2,17468
8110b944:	300f883a 	mov	r7,r6
8110b948:	280d883a 	mov	r6,r5
8110b94c:	200b883a 	mov	r5,r4
8110b950:	11000017 	ldw	r4,0(r2)
8110b954:	110b9581 	jmpi	8110b958 <_fseeko_r>

8110b958 <_fseeko_r>:
8110b958:	deffe804 	addi	sp,sp,-96
8110b95c:	dd401415 	stw	r21,80(sp)
8110b960:	dc801115 	stw	r18,68(sp)
8110b964:	dc401015 	stw	r17,64(sp)
8110b968:	dc000f15 	stw	r16,60(sp)
8110b96c:	dfc01715 	stw	ra,92(sp)
8110b970:	ddc01615 	stw	r23,88(sp)
8110b974:	dd801515 	stw	r22,84(sp)
8110b978:	dd001315 	stw	r20,76(sp)
8110b97c:	dcc01215 	stw	r19,72(sp)
8110b980:	2023883a 	mov	r17,r4
8110b984:	2821883a 	mov	r16,r5
8110b988:	302b883a 	mov	r21,r6
8110b98c:	3825883a 	mov	r18,r7
8110b990:	20000226 	beq	r4,zero,8110b99c <_fseeko_r+0x44>
8110b994:	20800e17 	ldw	r2,56(r4)
8110b998:	10005a26 	beq	r2,zero,8110bb04 <_fseeko_r+0x1ac>
8110b99c:	8080030b 	ldhu	r2,12(r16)
8110b9a0:	00c04204 	movi	r3,264
8110b9a4:	1080420c 	andi	r2,r2,264
8110b9a8:	10c05b26 	beq	r2,r3,8110bb18 <_fseeko_r+0x1c0>
8110b9ac:	85000a17 	ldw	r20,40(r16)
8110b9b0:	a000f626 	beq	r20,zero,8110bd8c <_fseeko_r+0x434>
8110b9b4:	00800044 	movi	r2,1
8110b9b8:	90803e26 	beq	r18,r2,8110bab4 <_fseeko_r+0x15c>
8110b9bc:	00800084 	movi	r2,2
8110b9c0:	90801026 	beq	r18,r2,8110ba04 <_fseeko_r+0xac>
8110b9c4:	90000f26 	beq	r18,zero,8110ba04 <_fseeko_r+0xac>
8110b9c8:	00800584 	movi	r2,22
8110b9cc:	88800015 	stw	r2,0(r17)
8110b9d0:	04ffffc4 	movi	r19,-1
8110b9d4:	9805883a 	mov	r2,r19
8110b9d8:	dfc01717 	ldw	ra,92(sp)
8110b9dc:	ddc01617 	ldw	r23,88(sp)
8110b9e0:	dd801517 	ldw	r22,84(sp)
8110b9e4:	dd401417 	ldw	r21,80(sp)
8110b9e8:	dd001317 	ldw	r20,76(sp)
8110b9ec:	dcc01217 	ldw	r19,72(sp)
8110b9f0:	dc801117 	ldw	r18,68(sp)
8110b9f4:	dc401017 	ldw	r17,64(sp)
8110b9f8:	dc000f17 	ldw	r16,60(sp)
8110b9fc:	dec01804 	addi	sp,sp,96
8110ba00:	f800283a 	ret
8110ba04:	80800417 	ldw	r2,16(r16)
8110ba08:	002f883a 	mov	r23,zero
8110ba0c:	0027883a 	mov	r19,zero
8110ba10:	1000cb26 	beq	r2,zero,8110bd40 <_fseeko_r+0x3e8>
8110ba14:	8080030b 	ldhu	r2,12(r16)
8110ba18:	10c2068c 	andi	r3,r2,2074
8110ba1c:	1800071e 	bne	r3,zero,8110ba3c <_fseeko_r+0xe4>
8110ba20:	10c1000c 	andi	r3,r2,1024
8110ba24:	1800451e 	bne	r3,zero,8110bb3c <_fseeko_r+0x1e4>
8110ba28:	00e04474 	movhi	r3,33041
8110ba2c:	18f44304 	addi	r3,r3,-12020
8110ba30:	a0c0b726 	beq	r20,r3,8110bd10 <_fseeko_r+0x3b8>
8110ba34:	10820014 	ori	r2,r2,2048
8110ba38:	8080030d 	sth	r2,12(r16)
8110ba3c:	800b883a 	mov	r5,r16
8110ba40:	8809883a 	mov	r4,r17
8110ba44:	11132c40 	call	811132c4 <_fflush_r>
8110ba48:	1027883a 	mov	r19,r2
8110ba4c:	103fe01e 	bne	r2,zero,8110b9d0 <__reset+0xfb0eb9d0>
8110ba50:	81400717 	ldw	r5,28(r16)
8110ba54:	900f883a 	mov	r7,r18
8110ba58:	a80d883a 	mov	r6,r21
8110ba5c:	8809883a 	mov	r4,r17
8110ba60:	a03ee83a 	callr	r20
8110ba64:	00ffffc4 	movi	r3,-1
8110ba68:	10ffd926 	beq	r2,r3,8110b9d0 <__reset+0xfb0eb9d0>
8110ba6c:	81400c17 	ldw	r5,48(r16)
8110ba70:	28000526 	beq	r5,zero,8110ba88 <_fseeko_r+0x130>
8110ba74:	80801004 	addi	r2,r16,64
8110ba78:	28800226 	beq	r5,r2,8110ba84 <_fseeko_r+0x12c>
8110ba7c:	8809883a 	mov	r4,r17
8110ba80:	11138c00 	call	811138c0 <_free_r>
8110ba84:	80000c15 	stw	zero,48(r16)
8110ba88:	8080030b 	ldhu	r2,12(r16)
8110ba8c:	80c00417 	ldw	r3,16(r16)
8110ba90:	80000115 	stw	zero,4(r16)
8110ba94:	10bdf7cc 	andi	r2,r2,63455
8110ba98:	80c00015 	stw	r3,0(r16)
8110ba9c:	8080030d 	sth	r2,12(r16)
8110baa0:	01800204 	movi	r6,8
8110baa4:	000b883a 	mov	r5,zero
8110baa8:	81001704 	addi	r4,r16,92
8110baac:	110cb1c0 	call	8110cb1c <memset>
8110bab0:	003fc806 	br	8110b9d4 <__reset+0xfb0eb9d4>
8110bab4:	800b883a 	mov	r5,r16
8110bab8:	8809883a 	mov	r4,r17
8110babc:	11132c40 	call	811132c4 <_fflush_r>
8110bac0:	8080030b 	ldhu	r2,12(r16)
8110bac4:	10c4000c 	andi	r3,r2,4096
8110bac8:	18008726 	beq	r3,zero,8110bce8 <_fseeko_r+0x390>
8110bacc:	84c01417 	ldw	r19,80(r16)
8110bad0:	10c0010c 	andi	r3,r2,4
8110bad4:	1800431e 	bne	r3,zero,8110bbe4 <_fseeko_r+0x28c>
8110bad8:	1080020c 	andi	r2,r2,8
8110badc:	10008026 	beq	r2,zero,8110bce0 <_fseeko_r+0x388>
8110bae0:	80c00017 	ldw	r3,0(r16)
8110bae4:	80800417 	ldw	r2,16(r16)
8110bae8:	18000226 	beq	r3,zero,8110baf4 <_fseeko_r+0x19c>
8110baec:	1887c83a 	sub	r3,r3,r2
8110baf0:	98e7883a 	add	r19,r19,r3
8110baf4:	aceb883a 	add	r21,r21,r19
8110baf8:	05c00044 	movi	r23,1
8110bafc:	0025883a 	mov	r18,zero
8110bb00:	003fc306 	br	8110ba10 <__reset+0xfb0eba10>
8110bb04:	11136a00 	call	811136a0 <__sinit>
8110bb08:	8080030b 	ldhu	r2,12(r16)
8110bb0c:	00c04204 	movi	r3,264
8110bb10:	1080420c 	andi	r2,r2,264
8110bb14:	10ffa51e 	bne	r2,r3,8110b9ac <__reset+0xfb0eb9ac>
8110bb18:	800b883a 	mov	r5,r16
8110bb1c:	8809883a 	mov	r4,r17
8110bb20:	11132c40 	call	811132c4 <_fflush_r>
8110bb24:	003fa106 	br	8110b9ac <__reset+0xfb0eb9ac>
8110bb28:	8080030b 	ldhu	r2,12(r16)
8110bb2c:	00c10004 	movi	r3,1024
8110bb30:	80c01315 	stw	r3,76(r16)
8110bb34:	10c4b03a 	or	r2,r2,r3
8110bb38:	8080030d 	sth	r2,12(r16)
8110bb3c:	9000311e 	bne	r18,zero,8110bc04 <_fseeko_r+0x2ac>
8110bb40:	a82d883a 	mov	r22,r21
8110bb44:	b800371e 	bne	r23,zero,8110bc24 <_fseeko_r+0x2cc>
8110bb48:	8080030b 	ldhu	r2,12(r16)
8110bb4c:	1084000c 	andi	r2,r2,4096
8110bb50:	10007f26 	beq	r2,zero,8110bd50 <_fseeko_r+0x3f8>
8110bb54:	80801417 	ldw	r2,80(r16)
8110bb58:	81800117 	ldw	r6,4(r16)
8110bb5c:	81400c17 	ldw	r5,48(r16)
8110bb60:	11a7c83a 	sub	r19,r2,r6
8110bb64:	28008226 	beq	r5,zero,8110bd70 <_fseeko_r+0x418>
8110bb68:	81c00f17 	ldw	r7,60(r16)
8110bb6c:	99e7c83a 	sub	r19,r19,r7
8110bb70:	81000e17 	ldw	r4,56(r16)
8110bb74:	80800417 	ldw	r2,16(r16)
8110bb78:	99a7883a 	add	r19,r19,r6
8110bb7c:	2087c83a 	sub	r3,r4,r2
8110bb80:	98e7c83a 	sub	r19,r19,r3
8110bb84:	38c7883a 	add	r3,r7,r3
8110bb88:	b4c02b16 	blt	r22,r19,8110bc38 <_fseeko_r+0x2e0>
8110bb8c:	98c9883a 	add	r4,r19,r3
8110bb90:	b100292e 	bgeu	r22,r4,8110bc38 <_fseeko_r+0x2e0>
8110bb94:	b4e7c83a 	sub	r19,r22,r19
8110bb98:	14c5883a 	add	r2,r2,r19
8110bb9c:	1ce7c83a 	sub	r19,r3,r19
8110bba0:	80800015 	stw	r2,0(r16)
8110bba4:	84c00115 	stw	r19,4(r16)
8110bba8:	28000526 	beq	r5,zero,8110bbc0 <_fseeko_r+0x268>
8110bbac:	80801004 	addi	r2,r16,64
8110bbb0:	28800226 	beq	r5,r2,8110bbbc <_fseeko_r+0x264>
8110bbb4:	8809883a 	mov	r4,r17
8110bbb8:	11138c00 	call	811138c0 <_free_r>
8110bbbc:	80000c15 	stw	zero,48(r16)
8110bbc0:	8080030b 	ldhu	r2,12(r16)
8110bbc4:	01800204 	movi	r6,8
8110bbc8:	000b883a 	mov	r5,zero
8110bbcc:	10bff7cc 	andi	r2,r2,65503
8110bbd0:	8080030d 	sth	r2,12(r16)
8110bbd4:	81001704 	addi	r4,r16,92
8110bbd8:	110cb1c0 	call	8110cb1c <memset>
8110bbdc:	0027883a 	mov	r19,zero
8110bbe0:	003f7c06 	br	8110b9d4 <__reset+0xfb0eb9d4>
8110bbe4:	80c00117 	ldw	r3,4(r16)
8110bbe8:	80800c17 	ldw	r2,48(r16)
8110bbec:	98e7c83a 	sub	r19,r19,r3
8110bbf0:	10003b26 	beq	r2,zero,8110bce0 <_fseeko_r+0x388>
8110bbf4:	80c00f17 	ldw	r3,60(r16)
8110bbf8:	80800417 	ldw	r2,16(r16)
8110bbfc:	98e7c83a 	sub	r19,r19,r3
8110bc00:	003fbc06 	br	8110baf4 <__reset+0xfb0ebaf4>
8110bc04:	8140038f 	ldh	r5,14(r16)
8110bc08:	d80d883a 	mov	r6,sp
8110bc0c:	8809883a 	mov	r4,r17
8110bc10:	110bdb80 	call	8110bdb8 <_fstat_r>
8110bc14:	103f891e 	bne	r2,zero,8110ba3c <__reset+0xfb0eba3c>
8110bc18:	dd800417 	ldw	r22,16(sp)
8110bc1c:	adad883a 	add	r22,r21,r22
8110bc20:	b83fc926 	beq	r23,zero,8110bb48 <__reset+0xfb0ebb48>
8110bc24:	81400c17 	ldw	r5,48(r16)
8110bc28:	81800117 	ldw	r6,4(r16)
8110bc2c:	28005026 	beq	r5,zero,8110bd70 <_fseeko_r+0x418>
8110bc30:	81c00f17 	ldw	r7,60(r16)
8110bc34:	003fce06 	br	8110bb70 <__reset+0xfb0ebb70>
8110bc38:	84c01317 	ldw	r19,76(r16)
8110bc3c:	81400717 	ldw	r5,28(r16)
8110bc40:	000f883a 	mov	r7,zero
8110bc44:	04e7c83a 	sub	r19,zero,r19
8110bc48:	9da6703a 	and	r19,r19,r22
8110bc4c:	980d883a 	mov	r6,r19
8110bc50:	8809883a 	mov	r4,r17
8110bc54:	a03ee83a 	callr	r20
8110bc58:	00ffffc4 	movi	r3,-1
8110bc5c:	10ff7726 	beq	r2,r3,8110ba3c <__reset+0xfb0eba3c>
8110bc60:	80800417 	ldw	r2,16(r16)
8110bc64:	81400c17 	ldw	r5,48(r16)
8110bc68:	80000115 	stw	zero,4(r16)
8110bc6c:	80800015 	stw	r2,0(r16)
8110bc70:	28000526 	beq	r5,zero,8110bc88 <_fseeko_r+0x330>
8110bc74:	80801004 	addi	r2,r16,64
8110bc78:	28800226 	beq	r5,r2,8110bc84 <_fseeko_r+0x32c>
8110bc7c:	8809883a 	mov	r4,r17
8110bc80:	11138c00 	call	811138c0 <_free_r>
8110bc84:	80000c15 	stw	zero,48(r16)
8110bc88:	8080030b 	ldhu	r2,12(r16)
8110bc8c:	b4e7c83a 	sub	r19,r22,r19
8110bc90:	10bff7cc 	andi	r2,r2,65503
8110bc94:	8080030d 	sth	r2,12(r16)
8110bc98:	98000b26 	beq	r19,zero,8110bcc8 <_fseeko_r+0x370>
8110bc9c:	800b883a 	mov	r5,r16
8110bca0:	8809883a 	mov	r4,r17
8110bca4:	110ccc00 	call	8110ccc0 <__srefill_r>
8110bca8:	103f641e 	bne	r2,zero,8110ba3c <__reset+0xfb0eba3c>
8110bcac:	80800117 	ldw	r2,4(r16)
8110bcb0:	14ff6236 	bltu	r2,r19,8110ba3c <__reset+0xfb0eba3c>
8110bcb4:	80c00017 	ldw	r3,0(r16)
8110bcb8:	14c5c83a 	sub	r2,r2,r19
8110bcbc:	80800115 	stw	r2,4(r16)
8110bcc0:	1ce7883a 	add	r19,r3,r19
8110bcc4:	84c00015 	stw	r19,0(r16)
8110bcc8:	01800204 	movi	r6,8
8110bccc:	000b883a 	mov	r5,zero
8110bcd0:	81001704 	addi	r4,r16,92
8110bcd4:	110cb1c0 	call	8110cb1c <memset>
8110bcd8:	0027883a 	mov	r19,zero
8110bcdc:	003f3d06 	br	8110b9d4 <__reset+0xfb0eb9d4>
8110bce0:	80800417 	ldw	r2,16(r16)
8110bce4:	003f8306 	br	8110baf4 <__reset+0xfb0ebaf4>
8110bce8:	81400717 	ldw	r5,28(r16)
8110bcec:	900f883a 	mov	r7,r18
8110bcf0:	000d883a 	mov	r6,zero
8110bcf4:	8809883a 	mov	r4,r17
8110bcf8:	a03ee83a 	callr	r20
8110bcfc:	1027883a 	mov	r19,r2
8110bd00:	00bfffc4 	movi	r2,-1
8110bd04:	98bf3226 	beq	r19,r2,8110b9d0 <__reset+0xfb0eb9d0>
8110bd08:	8080030b 	ldhu	r2,12(r16)
8110bd0c:	003f7006 	br	8110bad0 <__reset+0xfb0ebad0>
8110bd10:	8140038f 	ldh	r5,14(r16)
8110bd14:	283f4716 	blt	r5,zero,8110ba34 <__reset+0xfb0eba34>
8110bd18:	d80d883a 	mov	r6,sp
8110bd1c:	8809883a 	mov	r4,r17
8110bd20:	110bdb80 	call	8110bdb8 <_fstat_r>
8110bd24:	1000041e 	bne	r2,zero,8110bd38 <_fseeko_r+0x3e0>
8110bd28:	d8800117 	ldw	r2,4(sp)
8110bd2c:	00e00014 	movui	r3,32768
8110bd30:	10bc000c 	andi	r2,r2,61440
8110bd34:	10ff7c26 	beq	r2,r3,8110bb28 <__reset+0xfb0ebb28>
8110bd38:	8080030b 	ldhu	r2,12(r16)
8110bd3c:	003f3d06 	br	8110ba34 <__reset+0xfb0eba34>
8110bd40:	800b883a 	mov	r5,r16
8110bd44:	8809883a 	mov	r4,r17
8110bd48:	110c00c0 	call	8110c00c <__smakebuf_r>
8110bd4c:	003f3106 	br	8110ba14 <__reset+0xfb0eba14>
8110bd50:	81400717 	ldw	r5,28(r16)
8110bd54:	01c00044 	movi	r7,1
8110bd58:	000d883a 	mov	r6,zero
8110bd5c:	8809883a 	mov	r4,r17
8110bd60:	a03ee83a 	callr	r20
8110bd64:	00ffffc4 	movi	r3,-1
8110bd68:	10ff7b1e 	bne	r2,r3,8110bb58 <__reset+0xfb0ebb58>
8110bd6c:	003f3306 	br	8110ba3c <__reset+0xfb0eba3c>
8110bd70:	80c00017 	ldw	r3,0(r16)
8110bd74:	80800417 	ldw	r2,16(r16)
8110bd78:	000b883a 	mov	r5,zero
8110bd7c:	1887c83a 	sub	r3,r3,r2
8110bd80:	98e7c83a 	sub	r19,r19,r3
8110bd84:	30c7883a 	add	r3,r6,r3
8110bd88:	003f7f06 	br	8110bb88 <__reset+0xfb0ebb88>
8110bd8c:	00800744 	movi	r2,29
8110bd90:	88800015 	stw	r2,0(r17)
8110bd94:	04ffffc4 	movi	r19,-1
8110bd98:	003f0e06 	br	8110b9d4 <__reset+0xfb0eb9d4>

8110bd9c <fseeko>:
8110bd9c:	00a044b4 	movhi	r2,33042
8110bda0:	10910f04 	addi	r2,r2,17468
8110bda4:	300f883a 	mov	r7,r6
8110bda8:	280d883a 	mov	r6,r5
8110bdac:	200b883a 	mov	r5,r4
8110bdb0:	11000017 	ldw	r4,0(r2)
8110bdb4:	110b9581 	jmpi	8110b958 <_fseeko_r>

8110bdb8 <_fstat_r>:
8110bdb8:	defffd04 	addi	sp,sp,-12
8110bdbc:	2805883a 	mov	r2,r5
8110bdc0:	dc000015 	stw	r16,0(sp)
8110bdc4:	042044b4 	movhi	r16,33042
8110bdc8:	dc400115 	stw	r17,4(sp)
8110bdcc:	84113404 	addi	r16,r16,17616
8110bdd0:	2023883a 	mov	r17,r4
8110bdd4:	300b883a 	mov	r5,r6
8110bdd8:	1009883a 	mov	r4,r2
8110bddc:	dfc00215 	stw	ra,8(sp)
8110bde0:	80000015 	stw	zero,0(r16)
8110bde4:	111bcfc0 	call	8111bcfc <fstat>
8110bde8:	00ffffc4 	movi	r3,-1
8110bdec:	10c00526 	beq	r2,r3,8110be04 <_fstat_r+0x4c>
8110bdf0:	dfc00217 	ldw	ra,8(sp)
8110bdf4:	dc400117 	ldw	r17,4(sp)
8110bdf8:	dc000017 	ldw	r16,0(sp)
8110bdfc:	dec00304 	addi	sp,sp,12
8110be00:	f800283a 	ret
8110be04:	80c00017 	ldw	r3,0(r16)
8110be08:	183ff926 	beq	r3,zero,8110bdf0 <__reset+0xfb0ebdf0>
8110be0c:	88c00015 	stw	r3,0(r17)
8110be10:	003ff706 	br	8110bdf0 <__reset+0xfb0ebdf0>

8110be14 <_fwrite_r>:
8110be14:	defff504 	addi	sp,sp,-44
8110be18:	dc800815 	stw	r18,32(sp)
8110be1c:	39a5383a 	mul	r18,r7,r6
8110be20:	d8800304 	addi	r2,sp,12
8110be24:	d8800015 	stw	r2,0(sp)
8110be28:	00800044 	movi	r2,1
8110be2c:	dcc00915 	stw	r19,36(sp)
8110be30:	dc400715 	stw	r17,28(sp)
8110be34:	dc000615 	stw	r16,24(sp)
8110be38:	d9400315 	stw	r5,12(sp)
8110be3c:	dfc00a15 	stw	ra,40(sp)
8110be40:	dc800415 	stw	r18,16(sp)
8110be44:	dc800215 	stw	r18,8(sp)
8110be48:	d8800115 	stw	r2,4(sp)
8110be4c:	3027883a 	mov	r19,r6
8110be50:	3821883a 	mov	r16,r7
8110be54:	2023883a 	mov	r17,r4
8110be58:	d9400b17 	ldw	r5,44(sp)
8110be5c:	20000226 	beq	r4,zero,8110be68 <_fwrite_r+0x54>
8110be60:	20800e17 	ldw	r2,56(r4)
8110be64:	10001a26 	beq	r2,zero,8110bed0 <_fwrite_r+0xbc>
8110be68:	2880030b 	ldhu	r2,12(r5)
8110be6c:	10c8000c 	andi	r3,r2,8192
8110be70:	1800061e 	bne	r3,zero,8110be8c <_fwrite_r+0x78>
8110be74:	29001917 	ldw	r4,100(r5)
8110be78:	00f7ffc4 	movi	r3,-8193
8110be7c:	10880014 	ori	r2,r2,8192
8110be80:	20c6703a 	and	r3,r4,r3
8110be84:	2880030d 	sth	r2,12(r5)
8110be88:	28c01915 	stw	r3,100(r5)
8110be8c:	d80d883a 	mov	r6,sp
8110be90:	8809883a 	mov	r4,r17
8110be94:	1113bd00 	call	81113bd0 <__sfvwrite_r>
8110be98:	10000b26 	beq	r2,zero,8110bec8 <_fwrite_r+0xb4>
8110be9c:	d9000217 	ldw	r4,8(sp)
8110bea0:	980b883a 	mov	r5,r19
8110bea4:	9109c83a 	sub	r4,r18,r4
8110bea8:	1119a980 	call	81119a98 <__udivsi3>
8110beac:	dfc00a17 	ldw	ra,40(sp)
8110beb0:	dcc00917 	ldw	r19,36(sp)
8110beb4:	dc800817 	ldw	r18,32(sp)
8110beb8:	dc400717 	ldw	r17,28(sp)
8110bebc:	dc000617 	ldw	r16,24(sp)
8110bec0:	dec00b04 	addi	sp,sp,44
8110bec4:	f800283a 	ret
8110bec8:	8005883a 	mov	r2,r16
8110becc:	003ff706 	br	8110beac <__reset+0xfb0ebeac>
8110bed0:	d9400515 	stw	r5,20(sp)
8110bed4:	11136a00 	call	811136a0 <__sinit>
8110bed8:	d9400517 	ldw	r5,20(sp)
8110bedc:	003fe206 	br	8110be68 <__reset+0xfb0ebe68>

8110bee0 <fwrite>:
8110bee0:	defffe04 	addi	sp,sp,-8
8110bee4:	00a044b4 	movhi	r2,33042
8110bee8:	d9c00015 	stw	r7,0(sp)
8110beec:	10910f04 	addi	r2,r2,17468
8110bef0:	300f883a 	mov	r7,r6
8110bef4:	280d883a 	mov	r6,r5
8110bef8:	200b883a 	mov	r5,r4
8110befc:	11000017 	ldw	r4,0(r2)
8110bf00:	dfc00115 	stw	ra,4(sp)
8110bf04:	110be140 	call	8110be14 <_fwrite_r>
8110bf08:	dfc00117 	ldw	ra,4(sp)
8110bf0c:	dec00204 	addi	sp,sp,8
8110bf10:	f800283a 	ret

8110bf14 <_getc_r>:
8110bf14:	defffd04 	addi	sp,sp,-12
8110bf18:	dc000115 	stw	r16,4(sp)
8110bf1c:	dfc00215 	stw	ra,8(sp)
8110bf20:	2021883a 	mov	r16,r4
8110bf24:	20000226 	beq	r4,zero,8110bf30 <_getc_r+0x1c>
8110bf28:	20800e17 	ldw	r2,56(r4)
8110bf2c:	10000c26 	beq	r2,zero,8110bf60 <_getc_r+0x4c>
8110bf30:	28800117 	ldw	r2,4(r5)
8110bf34:	10bfffc4 	addi	r2,r2,-1
8110bf38:	28800115 	stw	r2,4(r5)
8110bf3c:	10000c16 	blt	r2,zero,8110bf70 <_getc_r+0x5c>
8110bf40:	28800017 	ldw	r2,0(r5)
8110bf44:	10c00044 	addi	r3,r2,1
8110bf48:	28c00015 	stw	r3,0(r5)
8110bf4c:	10800003 	ldbu	r2,0(r2)
8110bf50:	dfc00217 	ldw	ra,8(sp)
8110bf54:	dc000117 	ldw	r16,4(sp)
8110bf58:	dec00304 	addi	sp,sp,12
8110bf5c:	f800283a 	ret
8110bf60:	d9400015 	stw	r5,0(sp)
8110bf64:	11136a00 	call	811136a0 <__sinit>
8110bf68:	d9400017 	ldw	r5,0(sp)
8110bf6c:	003ff006 	br	8110bf30 <__reset+0xfb0ebf30>
8110bf70:	8009883a 	mov	r4,r16
8110bf74:	dfc00217 	ldw	ra,8(sp)
8110bf78:	dc000117 	ldw	r16,4(sp)
8110bf7c:	dec00304 	addi	sp,sp,12
8110bf80:	110ce941 	jmpi	8110ce94 <__srget_r>

8110bf84 <getc>:
8110bf84:	00a044b4 	movhi	r2,33042
8110bf88:	defffd04 	addi	sp,sp,-12
8110bf8c:	10910f04 	addi	r2,r2,17468
8110bf90:	dc400115 	stw	r17,4(sp)
8110bf94:	14400017 	ldw	r17,0(r2)
8110bf98:	dc000015 	stw	r16,0(sp)
8110bf9c:	dfc00215 	stw	ra,8(sp)
8110bfa0:	2021883a 	mov	r16,r4
8110bfa4:	88000226 	beq	r17,zero,8110bfb0 <getc+0x2c>
8110bfa8:	88800e17 	ldw	r2,56(r17)
8110bfac:	10000d26 	beq	r2,zero,8110bfe4 <getc+0x60>
8110bfb0:	80800117 	ldw	r2,4(r16)
8110bfb4:	10bfffc4 	addi	r2,r2,-1
8110bfb8:	80800115 	stw	r2,4(r16)
8110bfbc:	10000c16 	blt	r2,zero,8110bff0 <getc+0x6c>
8110bfc0:	80800017 	ldw	r2,0(r16)
8110bfc4:	10c00044 	addi	r3,r2,1
8110bfc8:	80c00015 	stw	r3,0(r16)
8110bfcc:	10800003 	ldbu	r2,0(r2)
8110bfd0:	dfc00217 	ldw	ra,8(sp)
8110bfd4:	dc400117 	ldw	r17,4(sp)
8110bfd8:	dc000017 	ldw	r16,0(sp)
8110bfdc:	dec00304 	addi	sp,sp,12
8110bfe0:	f800283a 	ret
8110bfe4:	8809883a 	mov	r4,r17
8110bfe8:	11136a00 	call	811136a0 <__sinit>
8110bfec:	003ff006 	br	8110bfb0 <__reset+0xfb0ebfb0>
8110bff0:	800b883a 	mov	r5,r16
8110bff4:	8809883a 	mov	r4,r17
8110bff8:	dfc00217 	ldw	ra,8(sp)
8110bffc:	dc400117 	ldw	r17,4(sp)
8110c000:	dc000017 	ldw	r16,0(sp)
8110c004:	dec00304 	addi	sp,sp,12
8110c008:	110ce941 	jmpi	8110ce94 <__srget_r>

8110c00c <__smakebuf_r>:
8110c00c:	2880030b 	ldhu	r2,12(r5)
8110c010:	10c0008c 	andi	r3,r2,2
8110c014:	1800411e 	bne	r3,zero,8110c11c <__smakebuf_r+0x110>
8110c018:	deffec04 	addi	sp,sp,-80
8110c01c:	dc000f15 	stw	r16,60(sp)
8110c020:	2821883a 	mov	r16,r5
8110c024:	2940038f 	ldh	r5,14(r5)
8110c028:	dc401015 	stw	r17,64(sp)
8110c02c:	dfc01315 	stw	ra,76(sp)
8110c030:	dcc01215 	stw	r19,72(sp)
8110c034:	dc801115 	stw	r18,68(sp)
8110c038:	2023883a 	mov	r17,r4
8110c03c:	28001c16 	blt	r5,zero,8110c0b0 <__smakebuf_r+0xa4>
8110c040:	d80d883a 	mov	r6,sp
8110c044:	110bdb80 	call	8110bdb8 <_fstat_r>
8110c048:	10001816 	blt	r2,zero,8110c0ac <__smakebuf_r+0xa0>
8110c04c:	d8800117 	ldw	r2,4(sp)
8110c050:	00e00014 	movui	r3,32768
8110c054:	10bc000c 	andi	r2,r2,61440
8110c058:	14c80020 	cmpeqi	r19,r2,8192
8110c05c:	10c03726 	beq	r2,r3,8110c13c <__smakebuf_r+0x130>
8110c060:	80c0030b 	ldhu	r3,12(r16)
8110c064:	18c20014 	ori	r3,r3,2048
8110c068:	80c0030d 	sth	r3,12(r16)
8110c06c:	00c80004 	movi	r3,8192
8110c070:	10c0521e 	bne	r2,r3,8110c1bc <__smakebuf_r+0x1b0>
8110c074:	8140038f 	ldh	r5,14(r16)
8110c078:	8809883a 	mov	r4,r17
8110c07c:	11142140 	call	81114214 <_isatty_r>
8110c080:	10004c26 	beq	r2,zero,8110c1b4 <__smakebuf_r+0x1a8>
8110c084:	8080030b 	ldhu	r2,12(r16)
8110c088:	80c010c4 	addi	r3,r16,67
8110c08c:	80c00015 	stw	r3,0(r16)
8110c090:	10800054 	ori	r2,r2,1
8110c094:	8080030d 	sth	r2,12(r16)
8110c098:	00800044 	movi	r2,1
8110c09c:	80c00415 	stw	r3,16(r16)
8110c0a0:	80800515 	stw	r2,20(r16)
8110c0a4:	04810004 	movi	r18,1024
8110c0a8:	00000706 	br	8110c0c8 <__smakebuf_r+0xbc>
8110c0ac:	8080030b 	ldhu	r2,12(r16)
8110c0b0:	10c0200c 	andi	r3,r2,128
8110c0b4:	18001f1e 	bne	r3,zero,8110c134 <__smakebuf_r+0x128>
8110c0b8:	04810004 	movi	r18,1024
8110c0bc:	10820014 	ori	r2,r2,2048
8110c0c0:	8080030d 	sth	r2,12(r16)
8110c0c4:	0027883a 	mov	r19,zero
8110c0c8:	900b883a 	mov	r5,r18
8110c0cc:	8809883a 	mov	r4,r17
8110c0d0:	110c1c80 	call	8110c1c8 <_malloc_r>
8110c0d4:	10002c26 	beq	r2,zero,8110c188 <__smakebuf_r+0x17c>
8110c0d8:	80c0030b 	ldhu	r3,12(r16)
8110c0dc:	01204474 	movhi	r4,33041
8110c0e0:	210cd604 	addi	r4,r4,13144
8110c0e4:	89000f15 	stw	r4,60(r17)
8110c0e8:	18c02014 	ori	r3,r3,128
8110c0ec:	80c0030d 	sth	r3,12(r16)
8110c0f0:	80800015 	stw	r2,0(r16)
8110c0f4:	80800415 	stw	r2,16(r16)
8110c0f8:	84800515 	stw	r18,20(r16)
8110c0fc:	98001a1e 	bne	r19,zero,8110c168 <__smakebuf_r+0x15c>
8110c100:	dfc01317 	ldw	ra,76(sp)
8110c104:	dcc01217 	ldw	r19,72(sp)
8110c108:	dc801117 	ldw	r18,68(sp)
8110c10c:	dc401017 	ldw	r17,64(sp)
8110c110:	dc000f17 	ldw	r16,60(sp)
8110c114:	dec01404 	addi	sp,sp,80
8110c118:	f800283a 	ret
8110c11c:	288010c4 	addi	r2,r5,67
8110c120:	28800015 	stw	r2,0(r5)
8110c124:	28800415 	stw	r2,16(r5)
8110c128:	00800044 	movi	r2,1
8110c12c:	28800515 	stw	r2,20(r5)
8110c130:	f800283a 	ret
8110c134:	04801004 	movi	r18,64
8110c138:	003fe006 	br	8110c0bc <__reset+0xfb0ec0bc>
8110c13c:	81000a17 	ldw	r4,40(r16)
8110c140:	00e04474 	movhi	r3,33041
8110c144:	18f44304 	addi	r3,r3,-12020
8110c148:	20ffc51e 	bne	r4,r3,8110c060 <__reset+0xfb0ec060>
8110c14c:	8080030b 	ldhu	r2,12(r16)
8110c150:	04810004 	movi	r18,1024
8110c154:	84801315 	stw	r18,76(r16)
8110c158:	1484b03a 	or	r2,r2,r18
8110c15c:	8080030d 	sth	r2,12(r16)
8110c160:	0027883a 	mov	r19,zero
8110c164:	003fd806 	br	8110c0c8 <__reset+0xfb0ec0c8>
8110c168:	8140038f 	ldh	r5,14(r16)
8110c16c:	8809883a 	mov	r4,r17
8110c170:	11142140 	call	81114214 <_isatty_r>
8110c174:	103fe226 	beq	r2,zero,8110c100 <__reset+0xfb0ec100>
8110c178:	8080030b 	ldhu	r2,12(r16)
8110c17c:	10800054 	ori	r2,r2,1
8110c180:	8080030d 	sth	r2,12(r16)
8110c184:	003fde06 	br	8110c100 <__reset+0xfb0ec100>
8110c188:	8080030b 	ldhu	r2,12(r16)
8110c18c:	10c0800c 	andi	r3,r2,512
8110c190:	183fdb1e 	bne	r3,zero,8110c100 <__reset+0xfb0ec100>
8110c194:	10800094 	ori	r2,r2,2
8110c198:	80c010c4 	addi	r3,r16,67
8110c19c:	8080030d 	sth	r2,12(r16)
8110c1a0:	00800044 	movi	r2,1
8110c1a4:	80c00015 	stw	r3,0(r16)
8110c1a8:	80c00415 	stw	r3,16(r16)
8110c1ac:	80800515 	stw	r2,20(r16)
8110c1b0:	003fd306 	br	8110c100 <__reset+0xfb0ec100>
8110c1b4:	04810004 	movi	r18,1024
8110c1b8:	003fc306 	br	8110c0c8 <__reset+0xfb0ec0c8>
8110c1bc:	0027883a 	mov	r19,zero
8110c1c0:	04810004 	movi	r18,1024
8110c1c4:	003fc006 	br	8110c0c8 <__reset+0xfb0ec0c8>

8110c1c8 <_malloc_r>:
8110c1c8:	defff504 	addi	sp,sp,-44
8110c1cc:	dc800315 	stw	r18,12(sp)
8110c1d0:	dfc00a15 	stw	ra,40(sp)
8110c1d4:	df000915 	stw	fp,36(sp)
8110c1d8:	ddc00815 	stw	r23,32(sp)
8110c1dc:	dd800715 	stw	r22,28(sp)
8110c1e0:	dd400615 	stw	r21,24(sp)
8110c1e4:	dd000515 	stw	r20,20(sp)
8110c1e8:	dcc00415 	stw	r19,16(sp)
8110c1ec:	dc400215 	stw	r17,8(sp)
8110c1f0:	dc000115 	stw	r16,4(sp)
8110c1f4:	288002c4 	addi	r2,r5,11
8110c1f8:	00c00584 	movi	r3,22
8110c1fc:	2025883a 	mov	r18,r4
8110c200:	18807f2e 	bgeu	r3,r2,8110c400 <_malloc_r+0x238>
8110c204:	047ffe04 	movi	r17,-8
8110c208:	1462703a 	and	r17,r2,r17
8110c20c:	8800a316 	blt	r17,zero,8110c49c <_malloc_r+0x2d4>
8110c210:	8940a236 	bltu	r17,r5,8110c49c <_malloc_r+0x2d4>
8110c214:	111c1980 	call	8111c198 <__malloc_lock>
8110c218:	00807dc4 	movi	r2,503
8110c21c:	1441e92e 	bgeu	r2,r17,8110c9c4 <_malloc_r+0x7fc>
8110c220:	8804d27a 	srli	r2,r17,9
8110c224:	1000a126 	beq	r2,zero,8110c4ac <_malloc_r+0x2e4>
8110c228:	00c00104 	movi	r3,4
8110c22c:	18811e36 	bltu	r3,r2,8110c6a8 <_malloc_r+0x4e0>
8110c230:	8804d1ba 	srli	r2,r17,6
8110c234:	12000e44 	addi	r8,r2,57
8110c238:	11c00e04 	addi	r7,r2,56
8110c23c:	4209883a 	add	r4,r8,r8
8110c240:	04e044b4 	movhi	r19,33042
8110c244:	2109883a 	add	r4,r4,r4
8110c248:	9ccafe04 	addi	r19,r19,11256
8110c24c:	2109883a 	add	r4,r4,r4
8110c250:	9909883a 	add	r4,r19,r4
8110c254:	24000117 	ldw	r16,4(r4)
8110c258:	213ffe04 	addi	r4,r4,-8
8110c25c:	24009726 	beq	r4,r16,8110c4bc <_malloc_r+0x2f4>
8110c260:	80800117 	ldw	r2,4(r16)
8110c264:	01bfff04 	movi	r6,-4
8110c268:	014003c4 	movi	r5,15
8110c26c:	1184703a 	and	r2,r2,r6
8110c270:	1447c83a 	sub	r3,r2,r17
8110c274:	28c00716 	blt	r5,r3,8110c294 <_malloc_r+0xcc>
8110c278:	1800920e 	bge	r3,zero,8110c4c4 <_malloc_r+0x2fc>
8110c27c:	84000317 	ldw	r16,12(r16)
8110c280:	24008e26 	beq	r4,r16,8110c4bc <_malloc_r+0x2f4>
8110c284:	80800117 	ldw	r2,4(r16)
8110c288:	1184703a 	and	r2,r2,r6
8110c28c:	1447c83a 	sub	r3,r2,r17
8110c290:	28fff90e 	bge	r5,r3,8110c278 <__reset+0xfb0ec278>
8110c294:	3809883a 	mov	r4,r7
8110c298:	01a044b4 	movhi	r6,33042
8110c29c:	9c000417 	ldw	r16,16(r19)
8110c2a0:	318afe04 	addi	r6,r6,11256
8110c2a4:	32000204 	addi	r8,r6,8
8110c2a8:	82013426 	beq	r16,r8,8110c77c <_malloc_r+0x5b4>
8110c2ac:	80c00117 	ldw	r3,4(r16)
8110c2b0:	00bfff04 	movi	r2,-4
8110c2b4:	188e703a 	and	r7,r3,r2
8110c2b8:	3c45c83a 	sub	r2,r7,r17
8110c2bc:	00c003c4 	movi	r3,15
8110c2c0:	18811f16 	blt	r3,r2,8110c740 <_malloc_r+0x578>
8110c2c4:	32000515 	stw	r8,20(r6)
8110c2c8:	32000415 	stw	r8,16(r6)
8110c2cc:	10007f0e 	bge	r2,zero,8110c4cc <_malloc_r+0x304>
8110c2d0:	00807fc4 	movi	r2,511
8110c2d4:	11c0fd36 	bltu	r2,r7,8110c6cc <_malloc_r+0x504>
8110c2d8:	3806d0fa 	srli	r3,r7,3
8110c2dc:	01c00044 	movi	r7,1
8110c2e0:	30800117 	ldw	r2,4(r6)
8110c2e4:	19400044 	addi	r5,r3,1
8110c2e8:	294b883a 	add	r5,r5,r5
8110c2ec:	1807d0ba 	srai	r3,r3,2
8110c2f0:	294b883a 	add	r5,r5,r5
8110c2f4:	294b883a 	add	r5,r5,r5
8110c2f8:	298b883a 	add	r5,r5,r6
8110c2fc:	38c6983a 	sll	r3,r7,r3
8110c300:	29c00017 	ldw	r7,0(r5)
8110c304:	2a7ffe04 	addi	r9,r5,-8
8110c308:	1886b03a 	or	r3,r3,r2
8110c30c:	82400315 	stw	r9,12(r16)
8110c310:	81c00215 	stw	r7,8(r16)
8110c314:	30c00115 	stw	r3,4(r6)
8110c318:	2c000015 	stw	r16,0(r5)
8110c31c:	3c000315 	stw	r16,12(r7)
8110c320:	2005d0ba 	srai	r2,r4,2
8110c324:	01400044 	movi	r5,1
8110c328:	288a983a 	sll	r5,r5,r2
8110c32c:	19406f36 	bltu	r3,r5,8110c4ec <_malloc_r+0x324>
8110c330:	28c4703a 	and	r2,r5,r3
8110c334:	10000a1e 	bne	r2,zero,8110c360 <_malloc_r+0x198>
8110c338:	00bfff04 	movi	r2,-4
8110c33c:	294b883a 	add	r5,r5,r5
8110c340:	2088703a 	and	r4,r4,r2
8110c344:	28c4703a 	and	r2,r5,r3
8110c348:	21000104 	addi	r4,r4,4
8110c34c:	1000041e 	bne	r2,zero,8110c360 <_malloc_r+0x198>
8110c350:	294b883a 	add	r5,r5,r5
8110c354:	28c4703a 	and	r2,r5,r3
8110c358:	21000104 	addi	r4,r4,4
8110c35c:	103ffc26 	beq	r2,zero,8110c350 <__reset+0xfb0ec350>
8110c360:	02bfff04 	movi	r10,-4
8110c364:	024003c4 	movi	r9,15
8110c368:	21800044 	addi	r6,r4,1
8110c36c:	318d883a 	add	r6,r6,r6
8110c370:	318d883a 	add	r6,r6,r6
8110c374:	318d883a 	add	r6,r6,r6
8110c378:	998d883a 	add	r6,r19,r6
8110c37c:	333ffe04 	addi	r12,r6,-8
8110c380:	2017883a 	mov	r11,r4
8110c384:	31800104 	addi	r6,r6,4
8110c388:	34000017 	ldw	r16,0(r6)
8110c38c:	31fffd04 	addi	r7,r6,-12
8110c390:	81c0041e 	bne	r16,r7,8110c3a4 <_malloc_r+0x1dc>
8110c394:	0000fb06 	br	8110c784 <_malloc_r+0x5bc>
8110c398:	1801030e 	bge	r3,zero,8110c7a8 <_malloc_r+0x5e0>
8110c39c:	84000317 	ldw	r16,12(r16)
8110c3a0:	81c0f826 	beq	r16,r7,8110c784 <_malloc_r+0x5bc>
8110c3a4:	80800117 	ldw	r2,4(r16)
8110c3a8:	1284703a 	and	r2,r2,r10
8110c3ac:	1447c83a 	sub	r3,r2,r17
8110c3b0:	48fff90e 	bge	r9,r3,8110c398 <__reset+0xfb0ec398>
8110c3b4:	80800317 	ldw	r2,12(r16)
8110c3b8:	81000217 	ldw	r4,8(r16)
8110c3bc:	89400054 	ori	r5,r17,1
8110c3c0:	81400115 	stw	r5,4(r16)
8110c3c4:	20800315 	stw	r2,12(r4)
8110c3c8:	11000215 	stw	r4,8(r2)
8110c3cc:	8463883a 	add	r17,r16,r17
8110c3d0:	9c400515 	stw	r17,20(r19)
8110c3d4:	9c400415 	stw	r17,16(r19)
8110c3d8:	18800054 	ori	r2,r3,1
8110c3dc:	88800115 	stw	r2,4(r17)
8110c3e0:	8a000315 	stw	r8,12(r17)
8110c3e4:	8a000215 	stw	r8,8(r17)
8110c3e8:	88e3883a 	add	r17,r17,r3
8110c3ec:	88c00015 	stw	r3,0(r17)
8110c3f0:	9009883a 	mov	r4,r18
8110c3f4:	111c1bc0 	call	8111c1bc <__malloc_unlock>
8110c3f8:	80800204 	addi	r2,r16,8
8110c3fc:	00001b06 	br	8110c46c <_malloc_r+0x2a4>
8110c400:	04400404 	movi	r17,16
8110c404:	89402536 	bltu	r17,r5,8110c49c <_malloc_r+0x2d4>
8110c408:	111c1980 	call	8111c198 <__malloc_lock>
8110c40c:	00800184 	movi	r2,6
8110c410:	01000084 	movi	r4,2
8110c414:	04e044b4 	movhi	r19,33042
8110c418:	1085883a 	add	r2,r2,r2
8110c41c:	9ccafe04 	addi	r19,r19,11256
8110c420:	1085883a 	add	r2,r2,r2
8110c424:	9885883a 	add	r2,r19,r2
8110c428:	14000117 	ldw	r16,4(r2)
8110c42c:	10fffe04 	addi	r3,r2,-8
8110c430:	80c0d926 	beq	r16,r3,8110c798 <_malloc_r+0x5d0>
8110c434:	80c00117 	ldw	r3,4(r16)
8110c438:	81000317 	ldw	r4,12(r16)
8110c43c:	00bfff04 	movi	r2,-4
8110c440:	1884703a 	and	r2,r3,r2
8110c444:	81400217 	ldw	r5,8(r16)
8110c448:	8085883a 	add	r2,r16,r2
8110c44c:	10c00117 	ldw	r3,4(r2)
8110c450:	29000315 	stw	r4,12(r5)
8110c454:	21400215 	stw	r5,8(r4)
8110c458:	18c00054 	ori	r3,r3,1
8110c45c:	10c00115 	stw	r3,4(r2)
8110c460:	9009883a 	mov	r4,r18
8110c464:	111c1bc0 	call	8111c1bc <__malloc_unlock>
8110c468:	80800204 	addi	r2,r16,8
8110c46c:	dfc00a17 	ldw	ra,40(sp)
8110c470:	df000917 	ldw	fp,36(sp)
8110c474:	ddc00817 	ldw	r23,32(sp)
8110c478:	dd800717 	ldw	r22,28(sp)
8110c47c:	dd400617 	ldw	r21,24(sp)
8110c480:	dd000517 	ldw	r20,20(sp)
8110c484:	dcc00417 	ldw	r19,16(sp)
8110c488:	dc800317 	ldw	r18,12(sp)
8110c48c:	dc400217 	ldw	r17,8(sp)
8110c490:	dc000117 	ldw	r16,4(sp)
8110c494:	dec00b04 	addi	sp,sp,44
8110c498:	f800283a 	ret
8110c49c:	00800304 	movi	r2,12
8110c4a0:	90800015 	stw	r2,0(r18)
8110c4a4:	0005883a 	mov	r2,zero
8110c4a8:	003ff006 	br	8110c46c <__reset+0xfb0ec46c>
8110c4ac:	01002004 	movi	r4,128
8110c4b0:	02001004 	movi	r8,64
8110c4b4:	01c00fc4 	movi	r7,63
8110c4b8:	003f6106 	br	8110c240 <__reset+0xfb0ec240>
8110c4bc:	4009883a 	mov	r4,r8
8110c4c0:	003f7506 	br	8110c298 <__reset+0xfb0ec298>
8110c4c4:	81000317 	ldw	r4,12(r16)
8110c4c8:	003fde06 	br	8110c444 <__reset+0xfb0ec444>
8110c4cc:	81c5883a 	add	r2,r16,r7
8110c4d0:	11400117 	ldw	r5,4(r2)
8110c4d4:	9009883a 	mov	r4,r18
8110c4d8:	29400054 	ori	r5,r5,1
8110c4dc:	11400115 	stw	r5,4(r2)
8110c4e0:	111c1bc0 	call	8111c1bc <__malloc_unlock>
8110c4e4:	80800204 	addi	r2,r16,8
8110c4e8:	003fe006 	br	8110c46c <__reset+0xfb0ec46c>
8110c4ec:	9c000217 	ldw	r16,8(r19)
8110c4f0:	00bfff04 	movi	r2,-4
8110c4f4:	85800117 	ldw	r22,4(r16)
8110c4f8:	b0ac703a 	and	r22,r22,r2
8110c4fc:	b4400336 	bltu	r22,r17,8110c50c <_malloc_r+0x344>
8110c500:	b445c83a 	sub	r2,r22,r17
8110c504:	00c003c4 	movi	r3,15
8110c508:	18805d16 	blt	r3,r2,8110c680 <_malloc_r+0x4b8>
8110c50c:	05e044b4 	movhi	r23,33042
8110c510:	00a044b4 	movhi	r2,33042
8110c514:	10913704 	addi	r2,r2,17628
8110c518:	bdd11004 	addi	r23,r23,17472
8110c51c:	15400017 	ldw	r21,0(r2)
8110c520:	b8c00017 	ldw	r3,0(r23)
8110c524:	00bfffc4 	movi	r2,-1
8110c528:	858d883a 	add	r6,r16,r22
8110c52c:	8d6b883a 	add	r21,r17,r21
8110c530:	1880ea26 	beq	r3,r2,8110c8dc <_malloc_r+0x714>
8110c534:	ad4403c4 	addi	r21,r21,4111
8110c538:	00bc0004 	movi	r2,-4096
8110c53c:	a8aa703a 	and	r21,r21,r2
8110c540:	a80b883a 	mov	r5,r21
8110c544:	9009883a 	mov	r4,r18
8110c548:	d9800015 	stw	r6,0(sp)
8110c54c:	110cf1c0 	call	8110cf1c <_sbrk_r>
8110c550:	1029883a 	mov	r20,r2
8110c554:	00bfffc4 	movi	r2,-1
8110c558:	d9800017 	ldw	r6,0(sp)
8110c55c:	a080e826 	beq	r20,r2,8110c900 <_malloc_r+0x738>
8110c560:	a180a636 	bltu	r20,r6,8110c7fc <_malloc_r+0x634>
8110c564:	072044b4 	movhi	fp,33042
8110c568:	e7114204 	addi	fp,fp,17672
8110c56c:	e0800017 	ldw	r2,0(fp)
8110c570:	a887883a 	add	r3,r21,r2
8110c574:	e0c00015 	stw	r3,0(fp)
8110c578:	3500e626 	beq	r6,r20,8110c914 <_malloc_r+0x74c>
8110c57c:	b9000017 	ldw	r4,0(r23)
8110c580:	00bfffc4 	movi	r2,-1
8110c584:	2080ee26 	beq	r4,r2,8110c940 <_malloc_r+0x778>
8110c588:	a185c83a 	sub	r2,r20,r6
8110c58c:	10c5883a 	add	r2,r2,r3
8110c590:	e0800015 	stw	r2,0(fp)
8110c594:	a0c001cc 	andi	r3,r20,7
8110c598:	1800bc26 	beq	r3,zero,8110c88c <_malloc_r+0x6c4>
8110c59c:	a0e9c83a 	sub	r20,r20,r3
8110c5a0:	00840204 	movi	r2,4104
8110c5a4:	a5000204 	addi	r20,r20,8
8110c5a8:	10c7c83a 	sub	r3,r2,r3
8110c5ac:	a545883a 	add	r2,r20,r21
8110c5b0:	1083ffcc 	andi	r2,r2,4095
8110c5b4:	18abc83a 	sub	r21,r3,r2
8110c5b8:	a80b883a 	mov	r5,r21
8110c5bc:	9009883a 	mov	r4,r18
8110c5c0:	110cf1c0 	call	8110cf1c <_sbrk_r>
8110c5c4:	00ffffc4 	movi	r3,-1
8110c5c8:	10c0e126 	beq	r2,r3,8110c950 <_malloc_r+0x788>
8110c5cc:	1505c83a 	sub	r2,r2,r20
8110c5d0:	1545883a 	add	r2,r2,r21
8110c5d4:	10800054 	ori	r2,r2,1
8110c5d8:	e0c00017 	ldw	r3,0(fp)
8110c5dc:	9d000215 	stw	r20,8(r19)
8110c5e0:	a0800115 	stw	r2,4(r20)
8110c5e4:	a8c7883a 	add	r3,r21,r3
8110c5e8:	e0c00015 	stw	r3,0(fp)
8110c5ec:	84c00e26 	beq	r16,r19,8110c628 <_malloc_r+0x460>
8110c5f0:	018003c4 	movi	r6,15
8110c5f4:	3580a72e 	bgeu	r6,r22,8110c894 <_malloc_r+0x6cc>
8110c5f8:	81400117 	ldw	r5,4(r16)
8110c5fc:	013ffe04 	movi	r4,-8
8110c600:	b0bffd04 	addi	r2,r22,-12
8110c604:	1104703a 	and	r2,r2,r4
8110c608:	2900004c 	andi	r4,r5,1
8110c60c:	2088b03a 	or	r4,r4,r2
8110c610:	81000115 	stw	r4,4(r16)
8110c614:	01400144 	movi	r5,5
8110c618:	8089883a 	add	r4,r16,r2
8110c61c:	21400115 	stw	r5,4(r4)
8110c620:	21400215 	stw	r5,8(r4)
8110c624:	3080cd36 	bltu	r6,r2,8110c95c <_malloc_r+0x794>
8110c628:	00a044b4 	movhi	r2,33042
8110c62c:	10913604 	addi	r2,r2,17624
8110c630:	11000017 	ldw	r4,0(r2)
8110c634:	20c0012e 	bgeu	r4,r3,8110c63c <_malloc_r+0x474>
8110c638:	10c00015 	stw	r3,0(r2)
8110c63c:	00a044b4 	movhi	r2,33042
8110c640:	10913504 	addi	r2,r2,17620
8110c644:	11000017 	ldw	r4,0(r2)
8110c648:	9c000217 	ldw	r16,8(r19)
8110c64c:	20c0012e 	bgeu	r4,r3,8110c654 <_malloc_r+0x48c>
8110c650:	10c00015 	stw	r3,0(r2)
8110c654:	80c00117 	ldw	r3,4(r16)
8110c658:	00bfff04 	movi	r2,-4
8110c65c:	1886703a 	and	r3,r3,r2
8110c660:	1c45c83a 	sub	r2,r3,r17
8110c664:	1c400236 	bltu	r3,r17,8110c670 <_malloc_r+0x4a8>
8110c668:	00c003c4 	movi	r3,15
8110c66c:	18800416 	blt	r3,r2,8110c680 <_malloc_r+0x4b8>
8110c670:	9009883a 	mov	r4,r18
8110c674:	111c1bc0 	call	8111c1bc <__malloc_unlock>
8110c678:	0005883a 	mov	r2,zero
8110c67c:	003f7b06 	br	8110c46c <__reset+0xfb0ec46c>
8110c680:	88c00054 	ori	r3,r17,1
8110c684:	80c00115 	stw	r3,4(r16)
8110c688:	8463883a 	add	r17,r16,r17
8110c68c:	10800054 	ori	r2,r2,1
8110c690:	9c400215 	stw	r17,8(r19)
8110c694:	88800115 	stw	r2,4(r17)
8110c698:	9009883a 	mov	r4,r18
8110c69c:	111c1bc0 	call	8111c1bc <__malloc_unlock>
8110c6a0:	80800204 	addi	r2,r16,8
8110c6a4:	003f7106 	br	8110c46c <__reset+0xfb0ec46c>
8110c6a8:	00c00504 	movi	r3,20
8110c6ac:	18804a2e 	bgeu	r3,r2,8110c7d8 <_malloc_r+0x610>
8110c6b0:	00c01504 	movi	r3,84
8110c6b4:	18806e36 	bltu	r3,r2,8110c870 <_malloc_r+0x6a8>
8110c6b8:	8804d33a 	srli	r2,r17,12
8110c6bc:	12001bc4 	addi	r8,r2,111
8110c6c0:	11c01b84 	addi	r7,r2,110
8110c6c4:	4209883a 	add	r4,r8,r8
8110c6c8:	003edd06 	br	8110c240 <__reset+0xfb0ec240>
8110c6cc:	3804d27a 	srli	r2,r7,9
8110c6d0:	00c00104 	movi	r3,4
8110c6d4:	1880442e 	bgeu	r3,r2,8110c7e8 <_malloc_r+0x620>
8110c6d8:	00c00504 	movi	r3,20
8110c6dc:	18808136 	bltu	r3,r2,8110c8e4 <_malloc_r+0x71c>
8110c6e0:	11401704 	addi	r5,r2,92
8110c6e4:	10c016c4 	addi	r3,r2,91
8110c6e8:	294b883a 	add	r5,r5,r5
8110c6ec:	294b883a 	add	r5,r5,r5
8110c6f0:	294b883a 	add	r5,r5,r5
8110c6f4:	994b883a 	add	r5,r19,r5
8110c6f8:	28800017 	ldw	r2,0(r5)
8110c6fc:	01a044b4 	movhi	r6,33042
8110c700:	297ffe04 	addi	r5,r5,-8
8110c704:	318afe04 	addi	r6,r6,11256
8110c708:	28806526 	beq	r5,r2,8110c8a0 <_malloc_r+0x6d8>
8110c70c:	01bfff04 	movi	r6,-4
8110c710:	10c00117 	ldw	r3,4(r2)
8110c714:	1986703a 	and	r3,r3,r6
8110c718:	38c0022e 	bgeu	r7,r3,8110c724 <_malloc_r+0x55c>
8110c71c:	10800217 	ldw	r2,8(r2)
8110c720:	28bffb1e 	bne	r5,r2,8110c710 <__reset+0xfb0ec710>
8110c724:	11400317 	ldw	r5,12(r2)
8110c728:	98c00117 	ldw	r3,4(r19)
8110c72c:	81400315 	stw	r5,12(r16)
8110c730:	80800215 	stw	r2,8(r16)
8110c734:	2c000215 	stw	r16,8(r5)
8110c738:	14000315 	stw	r16,12(r2)
8110c73c:	003ef806 	br	8110c320 <__reset+0xfb0ec320>
8110c740:	88c00054 	ori	r3,r17,1
8110c744:	80c00115 	stw	r3,4(r16)
8110c748:	8463883a 	add	r17,r16,r17
8110c74c:	34400515 	stw	r17,20(r6)
8110c750:	34400415 	stw	r17,16(r6)
8110c754:	10c00054 	ori	r3,r2,1
8110c758:	8a000315 	stw	r8,12(r17)
8110c75c:	8a000215 	stw	r8,8(r17)
8110c760:	88c00115 	stw	r3,4(r17)
8110c764:	88a3883a 	add	r17,r17,r2
8110c768:	88800015 	stw	r2,0(r17)
8110c76c:	9009883a 	mov	r4,r18
8110c770:	111c1bc0 	call	8111c1bc <__malloc_unlock>
8110c774:	80800204 	addi	r2,r16,8
8110c778:	003f3c06 	br	8110c46c <__reset+0xfb0ec46c>
8110c77c:	30c00117 	ldw	r3,4(r6)
8110c780:	003ee706 	br	8110c320 <__reset+0xfb0ec320>
8110c784:	5ac00044 	addi	r11,r11,1
8110c788:	588000cc 	andi	r2,r11,3
8110c78c:	31800204 	addi	r6,r6,8
8110c790:	103efd1e 	bne	r2,zero,8110c388 <__reset+0xfb0ec388>
8110c794:	00002406 	br	8110c828 <_malloc_r+0x660>
8110c798:	14000317 	ldw	r16,12(r2)
8110c79c:	143f251e 	bne	r2,r16,8110c434 <__reset+0xfb0ec434>
8110c7a0:	21000084 	addi	r4,r4,2
8110c7a4:	003ebc06 	br	8110c298 <__reset+0xfb0ec298>
8110c7a8:	8085883a 	add	r2,r16,r2
8110c7ac:	10c00117 	ldw	r3,4(r2)
8110c7b0:	81000317 	ldw	r4,12(r16)
8110c7b4:	81400217 	ldw	r5,8(r16)
8110c7b8:	18c00054 	ori	r3,r3,1
8110c7bc:	10c00115 	stw	r3,4(r2)
8110c7c0:	29000315 	stw	r4,12(r5)
8110c7c4:	21400215 	stw	r5,8(r4)
8110c7c8:	9009883a 	mov	r4,r18
8110c7cc:	111c1bc0 	call	8111c1bc <__malloc_unlock>
8110c7d0:	80800204 	addi	r2,r16,8
8110c7d4:	003f2506 	br	8110c46c <__reset+0xfb0ec46c>
8110c7d8:	12001704 	addi	r8,r2,92
8110c7dc:	11c016c4 	addi	r7,r2,91
8110c7e0:	4209883a 	add	r4,r8,r8
8110c7e4:	003e9606 	br	8110c240 <__reset+0xfb0ec240>
8110c7e8:	3804d1ba 	srli	r2,r7,6
8110c7ec:	11400e44 	addi	r5,r2,57
8110c7f0:	10c00e04 	addi	r3,r2,56
8110c7f4:	294b883a 	add	r5,r5,r5
8110c7f8:	003fbc06 	br	8110c6ec <__reset+0xfb0ec6ec>
8110c7fc:	84ff5926 	beq	r16,r19,8110c564 <__reset+0xfb0ec564>
8110c800:	00a044b4 	movhi	r2,33042
8110c804:	108afe04 	addi	r2,r2,11256
8110c808:	14000217 	ldw	r16,8(r2)
8110c80c:	00bfff04 	movi	r2,-4
8110c810:	80c00117 	ldw	r3,4(r16)
8110c814:	1886703a 	and	r3,r3,r2
8110c818:	003f9106 	br	8110c660 <__reset+0xfb0ec660>
8110c81c:	60800217 	ldw	r2,8(r12)
8110c820:	213fffc4 	addi	r4,r4,-1
8110c824:	1300651e 	bne	r2,r12,8110c9bc <_malloc_r+0x7f4>
8110c828:	208000cc 	andi	r2,r4,3
8110c82c:	633ffe04 	addi	r12,r12,-8
8110c830:	103ffa1e 	bne	r2,zero,8110c81c <__reset+0xfb0ec81c>
8110c834:	98800117 	ldw	r2,4(r19)
8110c838:	0146303a 	nor	r3,zero,r5
8110c83c:	1884703a 	and	r2,r3,r2
8110c840:	98800115 	stw	r2,4(r19)
8110c844:	294b883a 	add	r5,r5,r5
8110c848:	117f2836 	bltu	r2,r5,8110c4ec <__reset+0xfb0ec4ec>
8110c84c:	283f2726 	beq	r5,zero,8110c4ec <__reset+0xfb0ec4ec>
8110c850:	2886703a 	and	r3,r5,r2
8110c854:	5809883a 	mov	r4,r11
8110c858:	183ec31e 	bne	r3,zero,8110c368 <__reset+0xfb0ec368>
8110c85c:	294b883a 	add	r5,r5,r5
8110c860:	2886703a 	and	r3,r5,r2
8110c864:	21000104 	addi	r4,r4,4
8110c868:	183ffc26 	beq	r3,zero,8110c85c <__reset+0xfb0ec85c>
8110c86c:	003ebe06 	br	8110c368 <__reset+0xfb0ec368>
8110c870:	00c05504 	movi	r3,340
8110c874:	18801236 	bltu	r3,r2,8110c8c0 <_malloc_r+0x6f8>
8110c878:	8804d3fa 	srli	r2,r17,15
8110c87c:	12001e04 	addi	r8,r2,120
8110c880:	11c01dc4 	addi	r7,r2,119
8110c884:	4209883a 	add	r4,r8,r8
8110c888:	003e6d06 	br	8110c240 <__reset+0xfb0ec240>
8110c88c:	00c40004 	movi	r3,4096
8110c890:	003f4606 	br	8110c5ac <__reset+0xfb0ec5ac>
8110c894:	00800044 	movi	r2,1
8110c898:	a0800115 	stw	r2,4(r20)
8110c89c:	003f7406 	br	8110c670 <__reset+0xfb0ec670>
8110c8a0:	1805d0ba 	srai	r2,r3,2
8110c8a4:	01c00044 	movi	r7,1
8110c8a8:	30c00117 	ldw	r3,4(r6)
8110c8ac:	388e983a 	sll	r7,r7,r2
8110c8b0:	2805883a 	mov	r2,r5
8110c8b4:	38c6b03a 	or	r3,r7,r3
8110c8b8:	30c00115 	stw	r3,4(r6)
8110c8bc:	003f9b06 	br	8110c72c <__reset+0xfb0ec72c>
8110c8c0:	00c15504 	movi	r3,1364
8110c8c4:	18801a36 	bltu	r3,r2,8110c930 <_malloc_r+0x768>
8110c8c8:	8804d4ba 	srli	r2,r17,18
8110c8cc:	12001f44 	addi	r8,r2,125
8110c8d0:	11c01f04 	addi	r7,r2,124
8110c8d4:	4209883a 	add	r4,r8,r8
8110c8d8:	003e5906 	br	8110c240 <__reset+0xfb0ec240>
8110c8dc:	ad400404 	addi	r21,r21,16
8110c8e0:	003f1706 	br	8110c540 <__reset+0xfb0ec540>
8110c8e4:	00c01504 	movi	r3,84
8110c8e8:	18802336 	bltu	r3,r2,8110c978 <_malloc_r+0x7b0>
8110c8ec:	3804d33a 	srli	r2,r7,12
8110c8f0:	11401bc4 	addi	r5,r2,111
8110c8f4:	10c01b84 	addi	r3,r2,110
8110c8f8:	294b883a 	add	r5,r5,r5
8110c8fc:	003f7b06 	br	8110c6ec <__reset+0xfb0ec6ec>
8110c900:	9c000217 	ldw	r16,8(r19)
8110c904:	00bfff04 	movi	r2,-4
8110c908:	80c00117 	ldw	r3,4(r16)
8110c90c:	1886703a 	and	r3,r3,r2
8110c910:	003f5306 	br	8110c660 <__reset+0xfb0ec660>
8110c914:	3083ffcc 	andi	r2,r6,4095
8110c918:	103f181e 	bne	r2,zero,8110c57c <__reset+0xfb0ec57c>
8110c91c:	99000217 	ldw	r4,8(r19)
8110c920:	b545883a 	add	r2,r22,r21
8110c924:	10800054 	ori	r2,r2,1
8110c928:	20800115 	stw	r2,4(r4)
8110c92c:	003f3e06 	br	8110c628 <__reset+0xfb0ec628>
8110c930:	01003f84 	movi	r4,254
8110c934:	02001fc4 	movi	r8,127
8110c938:	01c01f84 	movi	r7,126
8110c93c:	003e4006 	br	8110c240 <__reset+0xfb0ec240>
8110c940:	00a044b4 	movhi	r2,33042
8110c944:	10911004 	addi	r2,r2,17472
8110c948:	15000015 	stw	r20,0(r2)
8110c94c:	003f1106 	br	8110c594 <__reset+0xfb0ec594>
8110c950:	00800044 	movi	r2,1
8110c954:	002b883a 	mov	r21,zero
8110c958:	003f1f06 	br	8110c5d8 <__reset+0xfb0ec5d8>
8110c95c:	81400204 	addi	r5,r16,8
8110c960:	9009883a 	mov	r4,r18
8110c964:	11138c00 	call	811138c0 <_free_r>
8110c968:	00a044b4 	movhi	r2,33042
8110c96c:	10914204 	addi	r2,r2,17672
8110c970:	10c00017 	ldw	r3,0(r2)
8110c974:	003f2c06 	br	8110c628 <__reset+0xfb0ec628>
8110c978:	00c05504 	movi	r3,340
8110c97c:	18800536 	bltu	r3,r2,8110c994 <_malloc_r+0x7cc>
8110c980:	3804d3fa 	srli	r2,r7,15
8110c984:	11401e04 	addi	r5,r2,120
8110c988:	10c01dc4 	addi	r3,r2,119
8110c98c:	294b883a 	add	r5,r5,r5
8110c990:	003f5606 	br	8110c6ec <__reset+0xfb0ec6ec>
8110c994:	00c15504 	movi	r3,1364
8110c998:	18800536 	bltu	r3,r2,8110c9b0 <_malloc_r+0x7e8>
8110c99c:	3804d4ba 	srli	r2,r7,18
8110c9a0:	11401f44 	addi	r5,r2,125
8110c9a4:	10c01f04 	addi	r3,r2,124
8110c9a8:	294b883a 	add	r5,r5,r5
8110c9ac:	003f4f06 	br	8110c6ec <__reset+0xfb0ec6ec>
8110c9b0:	01403f84 	movi	r5,254
8110c9b4:	00c01f84 	movi	r3,126
8110c9b8:	003f4c06 	br	8110c6ec <__reset+0xfb0ec6ec>
8110c9bc:	98800117 	ldw	r2,4(r19)
8110c9c0:	003fa006 	br	8110c844 <__reset+0xfb0ec844>
8110c9c4:	8808d0fa 	srli	r4,r17,3
8110c9c8:	20800044 	addi	r2,r4,1
8110c9cc:	1085883a 	add	r2,r2,r2
8110c9d0:	003e9006 	br	8110c414 <__reset+0xfb0ec414>

8110c9d4 <memcpy>:
8110c9d4:	defffd04 	addi	sp,sp,-12
8110c9d8:	dfc00215 	stw	ra,8(sp)
8110c9dc:	dc400115 	stw	r17,4(sp)
8110c9e0:	dc000015 	stw	r16,0(sp)
8110c9e4:	00c003c4 	movi	r3,15
8110c9e8:	2005883a 	mov	r2,r4
8110c9ec:	1980452e 	bgeu	r3,r6,8110cb04 <memcpy+0x130>
8110c9f0:	2906b03a 	or	r3,r5,r4
8110c9f4:	18c000cc 	andi	r3,r3,3
8110c9f8:	1800441e 	bne	r3,zero,8110cb0c <memcpy+0x138>
8110c9fc:	347ffc04 	addi	r17,r6,-16
8110ca00:	8822d13a 	srli	r17,r17,4
8110ca04:	28c00104 	addi	r3,r5,4
8110ca08:	23400104 	addi	r13,r4,4
8110ca0c:	8820913a 	slli	r16,r17,4
8110ca10:	2b000204 	addi	r12,r5,8
8110ca14:	22c00204 	addi	r11,r4,8
8110ca18:	84000504 	addi	r16,r16,20
8110ca1c:	2a800304 	addi	r10,r5,12
8110ca20:	22400304 	addi	r9,r4,12
8110ca24:	2c21883a 	add	r16,r5,r16
8110ca28:	2811883a 	mov	r8,r5
8110ca2c:	200f883a 	mov	r7,r4
8110ca30:	41000017 	ldw	r4,0(r8)
8110ca34:	1fc00017 	ldw	ra,0(r3)
8110ca38:	63c00017 	ldw	r15,0(r12)
8110ca3c:	39000015 	stw	r4,0(r7)
8110ca40:	53800017 	ldw	r14,0(r10)
8110ca44:	6fc00015 	stw	ra,0(r13)
8110ca48:	5bc00015 	stw	r15,0(r11)
8110ca4c:	4b800015 	stw	r14,0(r9)
8110ca50:	18c00404 	addi	r3,r3,16
8110ca54:	39c00404 	addi	r7,r7,16
8110ca58:	42000404 	addi	r8,r8,16
8110ca5c:	6b400404 	addi	r13,r13,16
8110ca60:	63000404 	addi	r12,r12,16
8110ca64:	5ac00404 	addi	r11,r11,16
8110ca68:	52800404 	addi	r10,r10,16
8110ca6c:	4a400404 	addi	r9,r9,16
8110ca70:	1c3fef1e 	bne	r3,r16,8110ca30 <__reset+0xfb0eca30>
8110ca74:	89c00044 	addi	r7,r17,1
8110ca78:	380e913a 	slli	r7,r7,4
8110ca7c:	310003cc 	andi	r4,r6,15
8110ca80:	02c000c4 	movi	r11,3
8110ca84:	11c7883a 	add	r3,r2,r7
8110ca88:	29cb883a 	add	r5,r5,r7
8110ca8c:	5900212e 	bgeu	r11,r4,8110cb14 <memcpy+0x140>
8110ca90:	1813883a 	mov	r9,r3
8110ca94:	2811883a 	mov	r8,r5
8110ca98:	200f883a 	mov	r7,r4
8110ca9c:	42800017 	ldw	r10,0(r8)
8110caa0:	4a400104 	addi	r9,r9,4
8110caa4:	39ffff04 	addi	r7,r7,-4
8110caa8:	4abfff15 	stw	r10,-4(r9)
8110caac:	42000104 	addi	r8,r8,4
8110cab0:	59fffa36 	bltu	r11,r7,8110ca9c <__reset+0xfb0eca9c>
8110cab4:	213fff04 	addi	r4,r4,-4
8110cab8:	2008d0ba 	srli	r4,r4,2
8110cabc:	318000cc 	andi	r6,r6,3
8110cac0:	21000044 	addi	r4,r4,1
8110cac4:	2109883a 	add	r4,r4,r4
8110cac8:	2109883a 	add	r4,r4,r4
8110cacc:	1907883a 	add	r3,r3,r4
8110cad0:	290b883a 	add	r5,r5,r4
8110cad4:	30000626 	beq	r6,zero,8110caf0 <memcpy+0x11c>
8110cad8:	198d883a 	add	r6,r3,r6
8110cadc:	29c00003 	ldbu	r7,0(r5)
8110cae0:	18c00044 	addi	r3,r3,1
8110cae4:	29400044 	addi	r5,r5,1
8110cae8:	19ffffc5 	stb	r7,-1(r3)
8110caec:	19bffb1e 	bne	r3,r6,8110cadc <__reset+0xfb0ecadc>
8110caf0:	dfc00217 	ldw	ra,8(sp)
8110caf4:	dc400117 	ldw	r17,4(sp)
8110caf8:	dc000017 	ldw	r16,0(sp)
8110cafc:	dec00304 	addi	sp,sp,12
8110cb00:	f800283a 	ret
8110cb04:	2007883a 	mov	r3,r4
8110cb08:	003ff206 	br	8110cad4 <__reset+0xfb0ecad4>
8110cb0c:	2007883a 	mov	r3,r4
8110cb10:	003ff106 	br	8110cad8 <__reset+0xfb0ecad8>
8110cb14:	200d883a 	mov	r6,r4
8110cb18:	003fee06 	br	8110cad4 <__reset+0xfb0ecad4>

8110cb1c <memset>:
8110cb1c:	20c000cc 	andi	r3,r4,3
8110cb20:	2005883a 	mov	r2,r4
8110cb24:	18004426 	beq	r3,zero,8110cc38 <memset+0x11c>
8110cb28:	31ffffc4 	addi	r7,r6,-1
8110cb2c:	30004026 	beq	r6,zero,8110cc30 <memset+0x114>
8110cb30:	2813883a 	mov	r9,r5
8110cb34:	200d883a 	mov	r6,r4
8110cb38:	2007883a 	mov	r3,r4
8110cb3c:	00000406 	br	8110cb50 <memset+0x34>
8110cb40:	3a3fffc4 	addi	r8,r7,-1
8110cb44:	31800044 	addi	r6,r6,1
8110cb48:	38003926 	beq	r7,zero,8110cc30 <memset+0x114>
8110cb4c:	400f883a 	mov	r7,r8
8110cb50:	18c00044 	addi	r3,r3,1
8110cb54:	32400005 	stb	r9,0(r6)
8110cb58:	1a0000cc 	andi	r8,r3,3
8110cb5c:	403ff81e 	bne	r8,zero,8110cb40 <__reset+0xfb0ecb40>
8110cb60:	010000c4 	movi	r4,3
8110cb64:	21c02d2e 	bgeu	r4,r7,8110cc1c <memset+0x100>
8110cb68:	29003fcc 	andi	r4,r5,255
8110cb6c:	200c923a 	slli	r6,r4,8
8110cb70:	3108b03a 	or	r4,r6,r4
8110cb74:	200c943a 	slli	r6,r4,16
8110cb78:	218cb03a 	or	r6,r4,r6
8110cb7c:	010003c4 	movi	r4,15
8110cb80:	21c0182e 	bgeu	r4,r7,8110cbe4 <memset+0xc8>
8110cb84:	3b3ffc04 	addi	r12,r7,-16
8110cb88:	6018d13a 	srli	r12,r12,4
8110cb8c:	1a000104 	addi	r8,r3,4
8110cb90:	1ac00204 	addi	r11,r3,8
8110cb94:	6008913a 	slli	r4,r12,4
8110cb98:	1a800304 	addi	r10,r3,12
8110cb9c:	1813883a 	mov	r9,r3
8110cba0:	21000504 	addi	r4,r4,20
8110cba4:	1909883a 	add	r4,r3,r4
8110cba8:	49800015 	stw	r6,0(r9)
8110cbac:	41800015 	stw	r6,0(r8)
8110cbb0:	59800015 	stw	r6,0(r11)
8110cbb4:	51800015 	stw	r6,0(r10)
8110cbb8:	42000404 	addi	r8,r8,16
8110cbbc:	4a400404 	addi	r9,r9,16
8110cbc0:	5ac00404 	addi	r11,r11,16
8110cbc4:	52800404 	addi	r10,r10,16
8110cbc8:	413ff71e 	bne	r8,r4,8110cba8 <__reset+0xfb0ecba8>
8110cbcc:	63000044 	addi	r12,r12,1
8110cbd0:	6018913a 	slli	r12,r12,4
8110cbd4:	39c003cc 	andi	r7,r7,15
8110cbd8:	010000c4 	movi	r4,3
8110cbdc:	1b07883a 	add	r3,r3,r12
8110cbe0:	21c00e2e 	bgeu	r4,r7,8110cc1c <memset+0x100>
8110cbe4:	1813883a 	mov	r9,r3
8110cbe8:	3811883a 	mov	r8,r7
8110cbec:	010000c4 	movi	r4,3
8110cbf0:	49800015 	stw	r6,0(r9)
8110cbf4:	423fff04 	addi	r8,r8,-4
8110cbf8:	4a400104 	addi	r9,r9,4
8110cbfc:	223ffc36 	bltu	r4,r8,8110cbf0 <__reset+0xfb0ecbf0>
8110cc00:	393fff04 	addi	r4,r7,-4
8110cc04:	2008d0ba 	srli	r4,r4,2
8110cc08:	39c000cc 	andi	r7,r7,3
8110cc0c:	21000044 	addi	r4,r4,1
8110cc10:	2109883a 	add	r4,r4,r4
8110cc14:	2109883a 	add	r4,r4,r4
8110cc18:	1907883a 	add	r3,r3,r4
8110cc1c:	38000526 	beq	r7,zero,8110cc34 <memset+0x118>
8110cc20:	19cf883a 	add	r7,r3,r7
8110cc24:	19400005 	stb	r5,0(r3)
8110cc28:	18c00044 	addi	r3,r3,1
8110cc2c:	38fffd1e 	bne	r7,r3,8110cc24 <__reset+0xfb0ecc24>
8110cc30:	f800283a 	ret
8110cc34:	f800283a 	ret
8110cc38:	2007883a 	mov	r3,r4
8110cc3c:	300f883a 	mov	r7,r6
8110cc40:	003fc706 	br	8110cb60 <__reset+0xfb0ecb60>

8110cc44 <_open_r>:
8110cc44:	defffd04 	addi	sp,sp,-12
8110cc48:	2805883a 	mov	r2,r5
8110cc4c:	dc000015 	stw	r16,0(sp)
8110cc50:	042044b4 	movhi	r16,33042
8110cc54:	dc400115 	stw	r17,4(sp)
8110cc58:	300b883a 	mov	r5,r6
8110cc5c:	84113404 	addi	r16,r16,17616
8110cc60:	2023883a 	mov	r17,r4
8110cc64:	380d883a 	mov	r6,r7
8110cc68:	1009883a 	mov	r4,r2
8110cc6c:	dfc00215 	stw	ra,8(sp)
8110cc70:	80000015 	stw	zero,0(r16)
8110cc74:	111c2e00 	call	8111c2e0 <open>
8110cc78:	00ffffc4 	movi	r3,-1
8110cc7c:	10c00526 	beq	r2,r3,8110cc94 <_open_r+0x50>
8110cc80:	dfc00217 	ldw	ra,8(sp)
8110cc84:	dc400117 	ldw	r17,4(sp)
8110cc88:	dc000017 	ldw	r16,0(sp)
8110cc8c:	dec00304 	addi	sp,sp,12
8110cc90:	f800283a 	ret
8110cc94:	80c00017 	ldw	r3,0(r16)
8110cc98:	183ff926 	beq	r3,zero,8110cc80 <__reset+0xfb0ecc80>
8110cc9c:	88c00015 	stw	r3,0(r17)
8110cca0:	003ff706 	br	8110cc80 <__reset+0xfb0ecc80>

8110cca4 <lflush>:
8110cca4:	2080030b 	ldhu	r2,12(r4)
8110cca8:	00c00244 	movi	r3,9
8110ccac:	1080024c 	andi	r2,r2,9
8110ccb0:	10c00226 	beq	r2,r3,8110ccbc <lflush+0x18>
8110ccb4:	0005883a 	mov	r2,zero
8110ccb8:	f800283a 	ret
8110ccbc:	11133201 	jmpi	81113320 <fflush>

8110ccc0 <__srefill_r>:
8110ccc0:	defffc04 	addi	sp,sp,-16
8110ccc4:	dc400115 	stw	r17,4(sp)
8110ccc8:	dc000015 	stw	r16,0(sp)
8110cccc:	dfc00315 	stw	ra,12(sp)
8110ccd0:	dc800215 	stw	r18,8(sp)
8110ccd4:	2023883a 	mov	r17,r4
8110ccd8:	2821883a 	mov	r16,r5
8110ccdc:	20000226 	beq	r4,zero,8110cce8 <__srefill_r+0x28>
8110cce0:	20800e17 	ldw	r2,56(r4)
8110cce4:	10003c26 	beq	r2,zero,8110cdd8 <__srefill_r+0x118>
8110cce8:	80c0030b 	ldhu	r3,12(r16)
8110ccec:	1908000c 	andi	r4,r3,8192
8110ccf0:	1805883a 	mov	r2,r3
8110ccf4:	2000071e 	bne	r4,zero,8110cd14 <__srefill_r+0x54>
8110ccf8:	81001917 	ldw	r4,100(r16)
8110ccfc:	18880014 	ori	r2,r3,8192
8110cd00:	00f7ffc4 	movi	r3,-8193
8110cd04:	20c8703a 	and	r4,r4,r3
8110cd08:	8080030d 	sth	r2,12(r16)
8110cd0c:	1007883a 	mov	r3,r2
8110cd10:	81001915 	stw	r4,100(r16)
8110cd14:	80000115 	stw	zero,4(r16)
8110cd18:	1100080c 	andi	r4,r2,32
8110cd1c:	2000571e 	bne	r4,zero,8110ce7c <__srefill_r+0x1bc>
8110cd20:	1100010c 	andi	r4,r2,4
8110cd24:	20001f26 	beq	r4,zero,8110cda4 <__srefill_r+0xe4>
8110cd28:	81400c17 	ldw	r5,48(r16)
8110cd2c:	28000826 	beq	r5,zero,8110cd50 <__srefill_r+0x90>
8110cd30:	80801004 	addi	r2,r16,64
8110cd34:	28800226 	beq	r5,r2,8110cd40 <__srefill_r+0x80>
8110cd38:	8809883a 	mov	r4,r17
8110cd3c:	11138c00 	call	811138c0 <_free_r>
8110cd40:	80800f17 	ldw	r2,60(r16)
8110cd44:	80000c15 	stw	zero,48(r16)
8110cd48:	80800115 	stw	r2,4(r16)
8110cd4c:	1000391e 	bne	r2,zero,8110ce34 <__srefill_r+0x174>
8110cd50:	80800417 	ldw	r2,16(r16)
8110cd54:	10004b26 	beq	r2,zero,8110ce84 <__srefill_r+0x1c4>
8110cd58:	8480030b 	ldhu	r18,12(r16)
8110cd5c:	908000cc 	andi	r2,r18,3
8110cd60:	10001f1e 	bne	r2,zero,8110cde0 <__srefill_r+0x120>
8110cd64:	81800417 	ldw	r6,16(r16)
8110cd68:	80800817 	ldw	r2,32(r16)
8110cd6c:	81c00517 	ldw	r7,20(r16)
8110cd70:	81400717 	ldw	r5,28(r16)
8110cd74:	81800015 	stw	r6,0(r16)
8110cd78:	8809883a 	mov	r4,r17
8110cd7c:	103ee83a 	callr	r2
8110cd80:	80800115 	stw	r2,4(r16)
8110cd84:	00800e0e 	bge	zero,r2,8110cdc0 <__srefill_r+0x100>
8110cd88:	0005883a 	mov	r2,zero
8110cd8c:	dfc00317 	ldw	ra,12(sp)
8110cd90:	dc800217 	ldw	r18,8(sp)
8110cd94:	dc400117 	ldw	r17,4(sp)
8110cd98:	dc000017 	ldw	r16,0(sp)
8110cd9c:	dec00404 	addi	sp,sp,16
8110cda0:	f800283a 	ret
8110cda4:	1100040c 	andi	r4,r2,16
8110cda8:	20003026 	beq	r4,zero,8110ce6c <__srefill_r+0x1ac>
8110cdac:	1080020c 	andi	r2,r2,8
8110cdb0:	1000241e 	bne	r2,zero,8110ce44 <__srefill_r+0x184>
8110cdb4:	18c00114 	ori	r3,r3,4
8110cdb8:	80c0030d 	sth	r3,12(r16)
8110cdbc:	003fe406 	br	8110cd50 <__reset+0xfb0ecd50>
8110cdc0:	80c0030b 	ldhu	r3,12(r16)
8110cdc4:	1000161e 	bne	r2,zero,8110ce20 <__srefill_r+0x160>
8110cdc8:	18c00814 	ori	r3,r3,32
8110cdcc:	00bfffc4 	movi	r2,-1
8110cdd0:	80c0030d 	sth	r3,12(r16)
8110cdd4:	003fed06 	br	8110cd8c <__reset+0xfb0ecd8c>
8110cdd8:	11136a00 	call	811136a0 <__sinit>
8110cddc:	003fc206 	br	8110cce8 <__reset+0xfb0ecce8>
8110cde0:	00a044b4 	movhi	r2,33042
8110cde4:	10910e04 	addi	r2,r2,17464
8110cde8:	11000017 	ldw	r4,0(r2)
8110cdec:	01604474 	movhi	r5,33041
8110cdf0:	00800044 	movi	r2,1
8110cdf4:	29732904 	addi	r5,r5,-13148
8110cdf8:	8080030d 	sth	r2,12(r16)
8110cdfc:	111408c0 	call	8111408c <_fwalk>
8110ce00:	00800244 	movi	r2,9
8110ce04:	8480030d 	sth	r18,12(r16)
8110ce08:	9480024c 	andi	r18,r18,9
8110ce0c:	90bfd51e 	bne	r18,r2,8110cd64 <__reset+0xfb0ecd64>
8110ce10:	800b883a 	mov	r5,r16
8110ce14:	8809883a 	mov	r4,r17
8110ce18:	11130a80 	call	811130a8 <__sflush_r>
8110ce1c:	003fd106 	br	8110cd64 <__reset+0xfb0ecd64>
8110ce20:	18c01014 	ori	r3,r3,64
8110ce24:	80000115 	stw	zero,4(r16)
8110ce28:	00bfffc4 	movi	r2,-1
8110ce2c:	80c0030d 	sth	r3,12(r16)
8110ce30:	003fd606 	br	8110cd8c <__reset+0xfb0ecd8c>
8110ce34:	80c00e17 	ldw	r3,56(r16)
8110ce38:	0005883a 	mov	r2,zero
8110ce3c:	80c00015 	stw	r3,0(r16)
8110ce40:	003fd206 	br	8110cd8c <__reset+0xfb0ecd8c>
8110ce44:	800b883a 	mov	r5,r16
8110ce48:	8809883a 	mov	r4,r17
8110ce4c:	11132c40 	call	811132c4 <_fflush_r>
8110ce50:	10000a1e 	bne	r2,zero,8110ce7c <__srefill_r+0x1bc>
8110ce54:	8080030b 	ldhu	r2,12(r16)
8110ce58:	00fffdc4 	movi	r3,-9
8110ce5c:	80000215 	stw	zero,8(r16)
8110ce60:	1886703a 	and	r3,r3,r2
8110ce64:	80000615 	stw	zero,24(r16)
8110ce68:	003fd206 	br	8110cdb4 <__reset+0xfb0ecdb4>
8110ce6c:	00800244 	movi	r2,9
8110ce70:	88800015 	stw	r2,0(r17)
8110ce74:	18c01014 	ori	r3,r3,64
8110ce78:	80c0030d 	sth	r3,12(r16)
8110ce7c:	00bfffc4 	movi	r2,-1
8110ce80:	003fc206 	br	8110cd8c <__reset+0xfb0ecd8c>
8110ce84:	800b883a 	mov	r5,r16
8110ce88:	8809883a 	mov	r4,r17
8110ce8c:	110c00c0 	call	8110c00c <__smakebuf_r>
8110ce90:	003fb106 	br	8110cd58 <__reset+0xfb0ecd58>

8110ce94 <__srget_r>:
8110ce94:	defffd04 	addi	sp,sp,-12
8110ce98:	dc400115 	stw	r17,4(sp)
8110ce9c:	dc000015 	stw	r16,0(sp)
8110cea0:	dfc00215 	stw	ra,8(sp)
8110cea4:	2023883a 	mov	r17,r4
8110cea8:	2821883a 	mov	r16,r5
8110ceac:	20000226 	beq	r4,zero,8110ceb8 <__srget_r+0x24>
8110ceb0:	20800e17 	ldw	r2,56(r4)
8110ceb4:	10001026 	beq	r2,zero,8110cef8 <__srget_r+0x64>
8110ceb8:	800b883a 	mov	r5,r16
8110cebc:	8809883a 	mov	r4,r17
8110cec0:	110ccc00 	call	8110ccc0 <__srefill_r>
8110cec4:	10000e1e 	bne	r2,zero,8110cf00 <__srget_r+0x6c>
8110cec8:	80c00017 	ldw	r3,0(r16)
8110cecc:	80800117 	ldw	r2,4(r16)
8110ced0:	19000044 	addi	r4,r3,1
8110ced4:	10bfffc4 	addi	r2,r2,-1
8110ced8:	80800115 	stw	r2,4(r16)
8110cedc:	81000015 	stw	r4,0(r16)
8110cee0:	18800003 	ldbu	r2,0(r3)
8110cee4:	dfc00217 	ldw	ra,8(sp)
8110cee8:	dc400117 	ldw	r17,4(sp)
8110ceec:	dc000017 	ldw	r16,0(sp)
8110cef0:	dec00304 	addi	sp,sp,12
8110cef4:	f800283a 	ret
8110cef8:	11136a00 	call	811136a0 <__sinit>
8110cefc:	003fee06 	br	8110ceb8 <__reset+0xfb0eceb8>
8110cf00:	00bfffc4 	movi	r2,-1
8110cf04:	003ff706 	br	8110cee4 <__reset+0xfb0ecee4>

8110cf08 <__srget>:
8110cf08:	00a044b4 	movhi	r2,33042
8110cf0c:	10910f04 	addi	r2,r2,17468
8110cf10:	200b883a 	mov	r5,r4
8110cf14:	11000017 	ldw	r4,0(r2)
8110cf18:	110ce941 	jmpi	8110ce94 <__srget_r>

8110cf1c <_sbrk_r>:
8110cf1c:	defffd04 	addi	sp,sp,-12
8110cf20:	dc000015 	stw	r16,0(sp)
8110cf24:	042044b4 	movhi	r16,33042
8110cf28:	dc400115 	stw	r17,4(sp)
8110cf2c:	84113404 	addi	r16,r16,17616
8110cf30:	2023883a 	mov	r17,r4
8110cf34:	2809883a 	mov	r4,r5
8110cf38:	dfc00215 	stw	ra,8(sp)
8110cf3c:	80000015 	stw	zero,0(r16)
8110cf40:	111c5d00 	call	8111c5d0 <sbrk>
8110cf44:	00ffffc4 	movi	r3,-1
8110cf48:	10c00526 	beq	r2,r3,8110cf60 <_sbrk_r+0x44>
8110cf4c:	dfc00217 	ldw	ra,8(sp)
8110cf50:	dc400117 	ldw	r17,4(sp)
8110cf54:	dc000017 	ldw	r16,0(sp)
8110cf58:	dec00304 	addi	sp,sp,12
8110cf5c:	f800283a 	ret
8110cf60:	80c00017 	ldw	r3,0(r16)
8110cf64:	183ff926 	beq	r3,zero,8110cf4c <__reset+0xfb0ecf4c>
8110cf68:	88c00015 	stw	r3,0(r17)
8110cf6c:	003ff706 	br	8110cf4c <__reset+0xfb0ecf4c>

8110cf70 <_sprintf_r>:
8110cf70:	deffe404 	addi	sp,sp,-112
8110cf74:	2807883a 	mov	r3,r5
8110cf78:	dfc01a15 	stw	ra,104(sp)
8110cf7c:	d9c01b15 	stw	r7,108(sp)
8110cf80:	00a00034 	movhi	r2,32768
8110cf84:	10bfffc4 	addi	r2,r2,-1
8110cf88:	02008204 	movi	r8,520
8110cf8c:	d8800215 	stw	r2,8(sp)
8110cf90:	d8800515 	stw	r2,20(sp)
8110cf94:	d9c01b04 	addi	r7,sp,108
8110cf98:	d80b883a 	mov	r5,sp
8110cf9c:	00bfffc4 	movi	r2,-1
8110cfa0:	d8c00015 	stw	r3,0(sp)
8110cfa4:	d8c00415 	stw	r3,16(sp)
8110cfa8:	da00030d 	sth	r8,12(sp)
8110cfac:	d880038d 	sth	r2,14(sp)
8110cfb0:	110d1700 	call	8110d170 <___svfprintf_internal_r>
8110cfb4:	d8c00017 	ldw	r3,0(sp)
8110cfb8:	18000005 	stb	zero,0(r3)
8110cfbc:	dfc01a17 	ldw	ra,104(sp)
8110cfc0:	dec01c04 	addi	sp,sp,112
8110cfc4:	f800283a 	ret

8110cfc8 <sprintf>:
8110cfc8:	deffe304 	addi	sp,sp,-116
8110cfcc:	2007883a 	mov	r3,r4
8110cfd0:	dfc01a15 	stw	ra,104(sp)
8110cfd4:	d9801b15 	stw	r6,108(sp)
8110cfd8:	d9c01c15 	stw	r7,112(sp)
8110cfdc:	012044b4 	movhi	r4,33042
8110cfe0:	21110f04 	addi	r4,r4,17468
8110cfe4:	21000017 	ldw	r4,0(r4)
8110cfe8:	00a00034 	movhi	r2,32768
8110cfec:	10bfffc4 	addi	r2,r2,-1
8110cff0:	280d883a 	mov	r6,r5
8110cff4:	02008204 	movi	r8,520
8110cff8:	d8800215 	stw	r2,8(sp)
8110cffc:	d8800515 	stw	r2,20(sp)
8110d000:	d9c01b04 	addi	r7,sp,108
8110d004:	d80b883a 	mov	r5,sp
8110d008:	00bfffc4 	movi	r2,-1
8110d00c:	d8c00015 	stw	r3,0(sp)
8110d010:	d8c00415 	stw	r3,16(sp)
8110d014:	da00030d 	sth	r8,12(sp)
8110d018:	d880038d 	sth	r2,14(sp)
8110d01c:	110d1700 	call	8110d170 <___svfprintf_internal_r>
8110d020:	d8c00017 	ldw	r3,0(sp)
8110d024:	18000005 	stb	zero,0(r3)
8110d028:	dfc01a17 	ldw	ra,104(sp)
8110d02c:	dec01d04 	addi	sp,sp,116
8110d030:	f800283a 	ret

8110d034 <__sread>:
8110d034:	defffe04 	addi	sp,sp,-8
8110d038:	dc000015 	stw	r16,0(sp)
8110d03c:	2821883a 	mov	r16,r5
8110d040:	2940038f 	ldh	r5,14(r5)
8110d044:	dfc00115 	stw	ra,4(sp)
8110d048:	11155e00 	call	811155e0 <_read_r>
8110d04c:	10000716 	blt	r2,zero,8110d06c <__sread+0x38>
8110d050:	80c01417 	ldw	r3,80(r16)
8110d054:	1887883a 	add	r3,r3,r2
8110d058:	80c01415 	stw	r3,80(r16)
8110d05c:	dfc00117 	ldw	ra,4(sp)
8110d060:	dc000017 	ldw	r16,0(sp)
8110d064:	dec00204 	addi	sp,sp,8
8110d068:	f800283a 	ret
8110d06c:	80c0030b 	ldhu	r3,12(r16)
8110d070:	18fbffcc 	andi	r3,r3,61439
8110d074:	80c0030d 	sth	r3,12(r16)
8110d078:	dfc00117 	ldw	ra,4(sp)
8110d07c:	dc000017 	ldw	r16,0(sp)
8110d080:	dec00204 	addi	sp,sp,8
8110d084:	f800283a 	ret

8110d088 <__seofread>:
8110d088:	0005883a 	mov	r2,zero
8110d08c:	f800283a 	ret

8110d090 <__swrite>:
8110d090:	2880030b 	ldhu	r2,12(r5)
8110d094:	defffb04 	addi	sp,sp,-20
8110d098:	dcc00315 	stw	r19,12(sp)
8110d09c:	dc800215 	stw	r18,8(sp)
8110d0a0:	dc400115 	stw	r17,4(sp)
8110d0a4:	dc000015 	stw	r16,0(sp)
8110d0a8:	dfc00415 	stw	ra,16(sp)
8110d0ac:	10c0400c 	andi	r3,r2,256
8110d0b0:	2821883a 	mov	r16,r5
8110d0b4:	2023883a 	mov	r17,r4
8110d0b8:	3025883a 	mov	r18,r6
8110d0bc:	3827883a 	mov	r19,r7
8110d0c0:	18000526 	beq	r3,zero,8110d0d8 <__swrite+0x48>
8110d0c4:	2940038f 	ldh	r5,14(r5)
8110d0c8:	01c00084 	movi	r7,2
8110d0cc:	000d883a 	mov	r6,zero
8110d0d0:	11143440 	call	81114344 <_lseek_r>
8110d0d4:	8080030b 	ldhu	r2,12(r16)
8110d0d8:	8140038f 	ldh	r5,14(r16)
8110d0dc:	10bbffcc 	andi	r2,r2,61439
8110d0e0:	980f883a 	mov	r7,r19
8110d0e4:	900d883a 	mov	r6,r18
8110d0e8:	8809883a 	mov	r4,r17
8110d0ec:	8080030d 	sth	r2,12(r16)
8110d0f0:	dfc00417 	ldw	ra,16(sp)
8110d0f4:	dcc00317 	ldw	r19,12(sp)
8110d0f8:	dc800217 	ldw	r18,8(sp)
8110d0fc:	dc400117 	ldw	r17,4(sp)
8110d100:	dc000017 	ldw	r16,0(sp)
8110d104:	dec00504 	addi	sp,sp,20
8110d108:	11116181 	jmpi	81111618 <_write_r>

8110d10c <__sseek>:
8110d10c:	defffe04 	addi	sp,sp,-8
8110d110:	dc000015 	stw	r16,0(sp)
8110d114:	2821883a 	mov	r16,r5
8110d118:	2940038f 	ldh	r5,14(r5)
8110d11c:	dfc00115 	stw	ra,4(sp)
8110d120:	11143440 	call	81114344 <_lseek_r>
8110d124:	00ffffc4 	movi	r3,-1
8110d128:	10c00826 	beq	r2,r3,8110d14c <__sseek+0x40>
8110d12c:	80c0030b 	ldhu	r3,12(r16)
8110d130:	80801415 	stw	r2,80(r16)
8110d134:	18c40014 	ori	r3,r3,4096
8110d138:	80c0030d 	sth	r3,12(r16)
8110d13c:	dfc00117 	ldw	ra,4(sp)
8110d140:	dc000017 	ldw	r16,0(sp)
8110d144:	dec00204 	addi	sp,sp,8
8110d148:	f800283a 	ret
8110d14c:	80c0030b 	ldhu	r3,12(r16)
8110d150:	18fbffcc 	andi	r3,r3,61439
8110d154:	80c0030d 	sth	r3,12(r16)
8110d158:	dfc00117 	ldw	ra,4(sp)
8110d15c:	dc000017 	ldw	r16,0(sp)
8110d160:	dec00204 	addi	sp,sp,8
8110d164:	f800283a 	ret

8110d168 <__sclose>:
8110d168:	2940038f 	ldh	r5,14(r5)
8110d16c:	11117cc1 	jmpi	811117cc <_close_r>

8110d170 <___svfprintf_internal_r>:
8110d170:	deffb704 	addi	sp,sp,-292
8110d174:	dfc04815 	stw	ra,288(sp)
8110d178:	ddc04615 	stw	r23,280(sp)
8110d17c:	d9402c15 	stw	r5,176(sp)
8110d180:	d9003915 	stw	r4,228(sp)
8110d184:	302f883a 	mov	r23,r6
8110d188:	d9c02d15 	stw	r7,180(sp)
8110d18c:	df004715 	stw	fp,284(sp)
8110d190:	dd804515 	stw	r22,276(sp)
8110d194:	dd404415 	stw	r21,272(sp)
8110d198:	dd004315 	stw	r20,268(sp)
8110d19c:	dcc04215 	stw	r19,264(sp)
8110d1a0:	dc804115 	stw	r18,260(sp)
8110d1a4:	dc404015 	stw	r17,256(sp)
8110d1a8:	dc003f15 	stw	r16,252(sp)
8110d1ac:	11143140 	call	81114314 <_localeconv_r>
8110d1b0:	10800017 	ldw	r2,0(r2)
8110d1b4:	1009883a 	mov	r4,r2
8110d1b8:	d8803415 	stw	r2,208(sp)
8110d1bc:	1115cf40 	call	81115cf4 <strlen>
8110d1c0:	d8c02c17 	ldw	r3,176(sp)
8110d1c4:	d8803815 	stw	r2,224(sp)
8110d1c8:	1880030b 	ldhu	r2,12(r3)
8110d1cc:	1080200c 	andi	r2,r2,128
8110d1d0:	10000226 	beq	r2,zero,8110d1dc <___svfprintf_internal_r+0x6c>
8110d1d4:	18800417 	ldw	r2,16(r3)
8110d1d8:	10067f26 	beq	r2,zero,8110ebd8 <___svfprintf_internal_r+0x1a68>
8110d1dc:	dcc03917 	ldw	r19,228(sp)
8110d1e0:	d8c00404 	addi	r3,sp,16
8110d1e4:	056044b4 	movhi	r21,33042
8110d1e8:	d9001e04 	addi	r4,sp,120
8110d1ec:	ad48dc84 	addi	r21,r21,9074
8110d1f0:	d8c01e15 	stw	r3,120(sp)
8110d1f4:	d8002015 	stw	zero,128(sp)
8110d1f8:	d8001f15 	stw	zero,124(sp)
8110d1fc:	d8003315 	stw	zero,204(sp)
8110d200:	d8003615 	stw	zero,216(sp)
8110d204:	d8003715 	stw	zero,220(sp)
8110d208:	1811883a 	mov	r8,r3
8110d20c:	d8003a15 	stw	zero,232(sp)
8110d210:	d8003b15 	stw	zero,236(sp)
8110d214:	d8002f15 	stw	zero,188(sp)
8110d218:	d9002815 	stw	r4,160(sp)
8110d21c:	b8800007 	ldb	r2,0(r23)
8110d220:	10026726 	beq	r2,zero,8110dbc0 <___svfprintf_internal_r+0xa50>
8110d224:	00c00944 	movi	r3,37
8110d228:	b821883a 	mov	r16,r23
8110d22c:	10c0021e 	bne	r2,r3,8110d238 <___svfprintf_internal_r+0xc8>
8110d230:	00001406 	br	8110d284 <___svfprintf_internal_r+0x114>
8110d234:	10c00326 	beq	r2,r3,8110d244 <___svfprintf_internal_r+0xd4>
8110d238:	84000044 	addi	r16,r16,1
8110d23c:	80800007 	ldb	r2,0(r16)
8110d240:	103ffc1e 	bne	r2,zero,8110d234 <__reset+0xfb0ed234>
8110d244:	85e3c83a 	sub	r17,r16,r23
8110d248:	88000e26 	beq	r17,zero,8110d284 <___svfprintf_internal_r+0x114>
8110d24c:	d8c02017 	ldw	r3,128(sp)
8110d250:	d8801f17 	ldw	r2,124(sp)
8110d254:	45c00015 	stw	r23,0(r8)
8110d258:	1c47883a 	add	r3,r3,r17
8110d25c:	10800044 	addi	r2,r2,1
8110d260:	d8c02015 	stw	r3,128(sp)
8110d264:	44400115 	stw	r17,4(r8)
8110d268:	d8801f15 	stw	r2,124(sp)
8110d26c:	00c001c4 	movi	r3,7
8110d270:	18809716 	blt	r3,r2,8110d4d0 <___svfprintf_internal_r+0x360>
8110d274:	42000204 	addi	r8,r8,8
8110d278:	d9402f17 	ldw	r5,188(sp)
8110d27c:	2c4b883a 	add	r5,r5,r17
8110d280:	d9402f15 	stw	r5,188(sp)
8110d284:	80800007 	ldb	r2,0(r16)
8110d288:	10009826 	beq	r2,zero,8110d4ec <___svfprintf_internal_r+0x37c>
8110d28c:	84400047 	ldb	r17,1(r16)
8110d290:	00bfffc4 	movi	r2,-1
8110d294:	85c00044 	addi	r23,r16,1
8110d298:	d8002785 	stb	zero,158(sp)
8110d29c:	0007883a 	mov	r3,zero
8110d2a0:	000f883a 	mov	r7,zero
8110d2a4:	d8802915 	stw	r2,164(sp)
8110d2a8:	d8003115 	stw	zero,196(sp)
8110d2ac:	0025883a 	mov	r18,zero
8110d2b0:	01401604 	movi	r5,88
8110d2b4:	01800244 	movi	r6,9
8110d2b8:	02800a84 	movi	r10,42
8110d2bc:	02401b04 	movi	r9,108
8110d2c0:	bdc00044 	addi	r23,r23,1
8110d2c4:	88bff804 	addi	r2,r17,-32
8110d2c8:	2882f036 	bltu	r5,r2,8110de8c <___svfprintf_internal_r+0xd1c>
8110d2cc:	100490ba 	slli	r2,r2,2
8110d2d0:	01204474 	movhi	r4,33041
8110d2d4:	2134b904 	addi	r4,r4,-11548
8110d2d8:	1105883a 	add	r2,r2,r4
8110d2dc:	10800017 	ldw	r2,0(r2)
8110d2e0:	1000683a 	jmp	r2
8110d2e4:	8110ddf4 	orhi	r4,r16,17271
8110d2e8:	8110de8c 	andi	r4,r16,17274
8110d2ec:	8110de8c 	andi	r4,r16,17274
8110d2f0:	8110dde8 	cmpgeui	r4,r16,17271
8110d2f4:	8110de8c 	andi	r4,r16,17274
8110d2f8:	8110de8c 	andi	r4,r16,17274
8110d2fc:	8110de8c 	andi	r4,r16,17274
8110d300:	8110de8c 	andi	r4,r16,17274
8110d304:	8110de8c 	andi	r4,r16,17274
8110d308:	8110de8c 	andi	r4,r16,17274
8110d30c:	8110d548 	cmpgei	r4,r16,17237
8110d310:	8110dd24 	muli	r4,r16,17268
8110d314:	8110de8c 	andi	r4,r16,17274
8110d318:	8110d458 	cmpnei	r4,r16,17233
8110d31c:	8110d570 	cmpltui	r4,r16,17237
8110d320:	8110de8c 	andi	r4,r16,17274
8110d324:	8110d5e4 	muli	r4,r16,17239
8110d328:	8110d5b0 	cmpltui	r4,r16,17238
8110d32c:	8110d5b0 	cmpltui	r4,r16,17238
8110d330:	8110d5b0 	cmpltui	r4,r16,17238
8110d334:	8110d5b0 	cmpltui	r4,r16,17238
8110d338:	8110d5b0 	cmpltui	r4,r16,17238
8110d33c:	8110d5b0 	cmpltui	r4,r16,17238
8110d340:	8110d5b0 	cmpltui	r4,r16,17238
8110d344:	8110d5b0 	cmpltui	r4,r16,17238
8110d348:	8110d5b0 	cmpltui	r4,r16,17238
8110d34c:	8110de8c 	andi	r4,r16,17274
8110d350:	8110de8c 	andi	r4,r16,17274
8110d354:	8110de8c 	andi	r4,r16,17274
8110d358:	8110de8c 	andi	r4,r16,17274
8110d35c:	8110de8c 	andi	r4,r16,17274
8110d360:	8110de8c 	andi	r4,r16,17274
8110d364:	8110de8c 	andi	r4,r16,17274
8110d368:	8110de8c 	andi	r4,r16,17274
8110d36c:	8110de8c 	andi	r4,r16,17274
8110d370:	8110de8c 	andi	r4,r16,17274
8110d374:	8110d69c 	xori	r4,r16,17242
8110d378:	8110d5f0 	cmpltui	r4,r16,17239
8110d37c:	8110de8c 	andi	r4,r16,17274
8110d380:	8110d5f0 	cmpltui	r4,r16,17239
8110d384:	8110de8c 	andi	r4,r16,17274
8110d388:	8110de8c 	andi	r4,r16,17274
8110d38c:	8110de8c 	andi	r4,r16,17274
8110d390:	8110de8c 	andi	r4,r16,17274
8110d394:	8110d690 	cmplti	r4,r16,17242
8110d398:	8110de8c 	andi	r4,r16,17274
8110d39c:	8110de8c 	andi	r4,r16,17274
8110d3a0:	8110d758 	cmpnei	r4,r16,17245
8110d3a4:	8110de8c 	andi	r4,r16,17274
8110d3a8:	8110de8c 	andi	r4,r16,17274
8110d3ac:	8110de8c 	andi	r4,r16,17274
8110d3b0:	8110de8c 	andi	r4,r16,17274
8110d3b4:	8110de8c 	andi	r4,r16,17274
8110d3b8:	8110dbc8 	cmpgei	r4,r16,17263
8110d3bc:	8110de8c 	andi	r4,r16,17274
8110d3c0:	8110de8c 	andi	r4,r16,17274
8110d3c4:	8110dc28 	cmpgeui	r4,r16,17264
8110d3c8:	8110de8c 	andi	r4,r16,17274
8110d3cc:	8110de8c 	andi	r4,r16,17274
8110d3d0:	8110de8c 	andi	r4,r16,17274
8110d3d4:	8110de8c 	andi	r4,r16,17274
8110d3d8:	8110de8c 	andi	r4,r16,17274
8110d3dc:	8110de8c 	andi	r4,r16,17274
8110d3e0:	8110de8c 	andi	r4,r16,17274
8110d3e4:	8110de8c 	andi	r4,r16,17274
8110d3e8:	8110de8c 	andi	r4,r16,17274
8110d3ec:	8110de8c 	andi	r4,r16,17274
8110d3f0:	8110dcd8 	cmpnei	r4,r16,17267
8110d3f4:	8110de14 	ori	r4,r16,17272
8110d3f8:	8110d5f0 	cmpltui	r4,r16,17239
8110d3fc:	8110d5f0 	cmpltui	r4,r16,17239
8110d400:	8110d5f0 	cmpltui	r4,r16,17239
8110d404:	8110de68 	cmpgeui	r4,r16,17273
8110d408:	8110de14 	ori	r4,r16,17272
8110d40c:	8110de8c 	andi	r4,r16,17274
8110d410:	8110de8c 	andi	r4,r16,17274
8110d414:	8110de24 	muli	r4,r16,17272
8110d418:	8110de8c 	andi	r4,r16,17274
8110d41c:	8110de34 	orhi	r4,r16,17272
8110d420:	8110dd14 	ori	r4,r16,17268
8110d424:	8110d464 	muli	r4,r16,17233
8110d428:	8110dd34 	orhi	r4,r16,17268
8110d42c:	8110de8c 	andi	r4,r16,17274
8110d430:	8110dd40 	call	88110dd4 <__reset+0x20f0dd4>
8110d434:	8110de8c 	andi	r4,r16,17274
8110d438:	8110dd9c 	xori	r4,r16,17270
8110d43c:	8110de8c 	andi	r4,r16,17274
8110d440:	8110de8c 	andi	r4,r16,17274
8110d444:	8110ddac 	andhi	r4,r16,17270
8110d448:	d9003117 	ldw	r4,196(sp)
8110d44c:	d8802d15 	stw	r2,180(sp)
8110d450:	0109c83a 	sub	r4,zero,r4
8110d454:	d9003115 	stw	r4,196(sp)
8110d458:	94800114 	ori	r18,r18,4
8110d45c:	bc400007 	ldb	r17,0(r23)
8110d460:	003f9706 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110d464:	00800c04 	movi	r2,48
8110d468:	d9002d17 	ldw	r4,180(sp)
8110d46c:	d9402917 	ldw	r5,164(sp)
8110d470:	d8802705 	stb	r2,156(sp)
8110d474:	00801e04 	movi	r2,120
8110d478:	d8802745 	stb	r2,157(sp)
8110d47c:	d8002785 	stb	zero,158(sp)
8110d480:	20c00104 	addi	r3,r4,4
8110d484:	25000017 	ldw	r20,0(r4)
8110d488:	002d883a 	mov	r22,zero
8110d48c:	90800094 	ori	r2,r18,2
8110d490:	28028616 	blt	r5,zero,8110deac <___svfprintf_internal_r+0xd3c>
8110d494:	00bfdfc4 	movi	r2,-129
8110d498:	90a4703a 	and	r18,r18,r2
8110d49c:	d8c02d15 	stw	r3,180(sp)
8110d4a0:	94800094 	ori	r18,r18,2
8110d4a4:	a002731e 	bne	r20,zero,8110de74 <___svfprintf_internal_r+0xd04>
8110d4a8:	00a044b4 	movhi	r2,33042
8110d4ac:	1088d504 	addi	r2,r2,9044
8110d4b0:	d8803a15 	stw	r2,232(sp)
8110d4b4:	04401e04 	movi	r17,120
8110d4b8:	d8c02917 	ldw	r3,164(sp)
8110d4bc:	0039883a 	mov	fp,zero
8110d4c0:	1801d526 	beq	r3,zero,8110dc18 <___svfprintf_internal_r+0xaa8>
8110d4c4:	0029883a 	mov	r20,zero
8110d4c8:	002d883a 	mov	r22,zero
8110d4cc:	0001f106 	br	8110dc94 <___svfprintf_internal_r+0xb24>
8110d4d0:	d9402c17 	ldw	r5,176(sp)
8110d4d4:	d9801e04 	addi	r6,sp,120
8110d4d8:	9809883a 	mov	r4,r19
8110d4dc:	1115d8c0 	call	81115d8c <__ssprint_r>
8110d4e0:	1000081e 	bne	r2,zero,8110d504 <___svfprintf_internal_r+0x394>
8110d4e4:	da000404 	addi	r8,sp,16
8110d4e8:	003f6306 	br	8110d278 <__reset+0xfb0ed278>
8110d4ec:	d8802017 	ldw	r2,128(sp)
8110d4f0:	10000426 	beq	r2,zero,8110d504 <___svfprintf_internal_r+0x394>
8110d4f4:	d9402c17 	ldw	r5,176(sp)
8110d4f8:	d9003917 	ldw	r4,228(sp)
8110d4fc:	d9801e04 	addi	r6,sp,120
8110d500:	1115d8c0 	call	81115d8c <__ssprint_r>
8110d504:	d8802c17 	ldw	r2,176(sp)
8110d508:	10c0030b 	ldhu	r3,12(r2)
8110d50c:	d8802f17 	ldw	r2,188(sp)
8110d510:	18c0100c 	andi	r3,r3,64
8110d514:	1805f51e 	bne	r3,zero,8110ecec <___svfprintf_internal_r+0x1b7c>
8110d518:	dfc04817 	ldw	ra,288(sp)
8110d51c:	df004717 	ldw	fp,284(sp)
8110d520:	ddc04617 	ldw	r23,280(sp)
8110d524:	dd804517 	ldw	r22,276(sp)
8110d528:	dd404417 	ldw	r21,272(sp)
8110d52c:	dd004317 	ldw	r20,268(sp)
8110d530:	dcc04217 	ldw	r19,264(sp)
8110d534:	dc804117 	ldw	r18,260(sp)
8110d538:	dc404017 	ldw	r17,256(sp)
8110d53c:	dc003f17 	ldw	r16,252(sp)
8110d540:	dec04904 	addi	sp,sp,292
8110d544:	f800283a 	ret
8110d548:	d8802d17 	ldw	r2,180(sp)
8110d54c:	d9002d17 	ldw	r4,180(sp)
8110d550:	10800017 	ldw	r2,0(r2)
8110d554:	d8803115 	stw	r2,196(sp)
8110d558:	20800104 	addi	r2,r4,4
8110d55c:	d9003117 	ldw	r4,196(sp)
8110d560:	203fb916 	blt	r4,zero,8110d448 <__reset+0xfb0ed448>
8110d564:	d8802d15 	stw	r2,180(sp)
8110d568:	bc400007 	ldb	r17,0(r23)
8110d56c:	003f5406 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110d570:	bc400007 	ldb	r17,0(r23)
8110d574:	bac00044 	addi	r11,r23,1
8110d578:	8a873926 	beq	r17,r10,8110f260 <___svfprintf_internal_r+0x20f0>
8110d57c:	88bff404 	addi	r2,r17,-48
8110d580:	0009883a 	mov	r4,zero
8110d584:	30868836 	bltu	r6,r2,8110efa8 <___svfprintf_internal_r+0x1e38>
8110d588:	5c400007 	ldb	r17,0(r11)
8110d58c:	210002a4 	muli	r4,r4,10
8110d590:	5dc00044 	addi	r23,r11,1
8110d594:	b817883a 	mov	r11,r23
8110d598:	2089883a 	add	r4,r4,r2
8110d59c:	88bff404 	addi	r2,r17,-48
8110d5a0:	30bff92e 	bgeu	r6,r2,8110d588 <__reset+0xfb0ed588>
8110d5a4:	2005d716 	blt	r4,zero,8110ed04 <___svfprintf_internal_r+0x1b94>
8110d5a8:	d9002915 	stw	r4,164(sp)
8110d5ac:	003f4506 	br	8110d2c4 <__reset+0xfb0ed2c4>
8110d5b0:	b809883a 	mov	r4,r23
8110d5b4:	d8003115 	stw	zero,196(sp)
8110d5b8:	88bff404 	addi	r2,r17,-48
8110d5bc:	0017883a 	mov	r11,zero
8110d5c0:	24400007 	ldb	r17,0(r4)
8110d5c4:	5ac002a4 	muli	r11,r11,10
8110d5c8:	bdc00044 	addi	r23,r23,1
8110d5cc:	b809883a 	mov	r4,r23
8110d5d0:	12d7883a 	add	r11,r2,r11
8110d5d4:	88bff404 	addi	r2,r17,-48
8110d5d8:	30bff92e 	bgeu	r6,r2,8110d5c0 <__reset+0xfb0ed5c0>
8110d5dc:	dac03115 	stw	r11,196(sp)
8110d5e0:	003f3806 	br	8110d2c4 <__reset+0xfb0ed2c4>
8110d5e4:	94802014 	ori	r18,r18,128
8110d5e8:	bc400007 	ldb	r17,0(r23)
8110d5ec:	003f3406 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110d5f0:	18c03fcc 	andi	r3,r3,255
8110d5f4:	1807471e 	bne	r3,zero,8110f314 <___svfprintf_internal_r+0x21a4>
8110d5f8:	9080020c 	andi	r2,r18,8
8110d5fc:	10047d26 	beq	r2,zero,8110e7f4 <___svfprintf_internal_r+0x1684>
8110d600:	d8c02d17 	ldw	r3,180(sp)
8110d604:	d9002d17 	ldw	r4,180(sp)
8110d608:	d9402d17 	ldw	r5,180(sp)
8110d60c:	18c00017 	ldw	r3,0(r3)
8110d610:	21000117 	ldw	r4,4(r4)
8110d614:	29400204 	addi	r5,r5,8
8110d618:	d8c03615 	stw	r3,216(sp)
8110d61c:	d9003715 	stw	r4,220(sp)
8110d620:	d9402d15 	stw	r5,180(sp)
8110d624:	d9003617 	ldw	r4,216(sp)
8110d628:	d9403717 	ldw	r5,220(sp)
8110d62c:	da003e15 	stw	r8,248(sp)
8110d630:	04000044 	movi	r16,1
8110d634:	1115ba40 	call	81115ba4 <__fpclassifyd>
8110d638:	da003e17 	ldw	r8,248(sp)
8110d63c:	14044b1e 	bne	r2,r16,8110e76c <___svfprintf_internal_r+0x15fc>
8110d640:	d9003617 	ldw	r4,216(sp)
8110d644:	d9403717 	ldw	r5,220(sp)
8110d648:	000d883a 	mov	r6,zero
8110d64c:	000f883a 	mov	r7,zero
8110d650:	111ae4c0 	call	8111ae4c <__ledf2>
8110d654:	da003e17 	ldw	r8,248(sp)
8110d658:	1005f316 	blt	r2,zero,8110ee28 <___svfprintf_internal_r+0x1cb8>
8110d65c:	df002783 	ldbu	fp,158(sp)
8110d660:	008011c4 	movi	r2,71
8110d664:	1445590e 	bge	r2,r17,8110ebcc <___svfprintf_internal_r+0x1a5c>
8110d668:	042044b4 	movhi	r16,33042
8110d66c:	8408cd04 	addi	r16,r16,9012
8110d670:	00c000c4 	movi	r3,3
8110d674:	00bfdfc4 	movi	r2,-129
8110d678:	d8c02a15 	stw	r3,168(sp)
8110d67c:	90a4703a 	and	r18,r18,r2
8110d680:	d8c02e15 	stw	r3,184(sp)
8110d684:	d8002915 	stw	zero,164(sp)
8110d688:	d8003215 	stw	zero,200(sp)
8110d68c:	00006606 	br	8110d828 <___svfprintf_internal_r+0x6b8>
8110d690:	94800214 	ori	r18,r18,8
8110d694:	bc400007 	ldb	r17,0(r23)
8110d698:	003f0906 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110d69c:	18c03fcc 	andi	r3,r3,255
8110d6a0:	1807181e 	bne	r3,zero,8110f304 <___svfprintf_internal_r+0x2194>
8110d6a4:	94800414 	ori	r18,r18,16
8110d6a8:	9080080c 	andi	r2,r18,32
8110d6ac:	10039626 	beq	r2,zero,8110e508 <___svfprintf_internal_r+0x1398>
8110d6b0:	d9402d17 	ldw	r5,180(sp)
8110d6b4:	28800117 	ldw	r2,4(r5)
8110d6b8:	2d000017 	ldw	r20,0(r5)
8110d6bc:	29400204 	addi	r5,r5,8
8110d6c0:	d9402d15 	stw	r5,180(sp)
8110d6c4:	102d883a 	mov	r22,r2
8110d6c8:	10039816 	blt	r2,zero,8110e52c <___svfprintf_internal_r+0x13bc>
8110d6cc:	d9402917 	ldw	r5,164(sp)
8110d6d0:	df002783 	ldbu	fp,158(sp)
8110d6d4:	2803ab16 	blt	r5,zero,8110e584 <___svfprintf_internal_r+0x1414>
8110d6d8:	00ffdfc4 	movi	r3,-129
8110d6dc:	a584b03a 	or	r2,r20,r22
8110d6e0:	90e4703a 	and	r18,r18,r3
8110d6e4:	10014a26 	beq	r2,zero,8110dc10 <___svfprintf_internal_r+0xaa0>
8110d6e8:	b0034b26 	beq	r22,zero,8110e418 <___svfprintf_internal_r+0x12a8>
8110d6ec:	dc402a15 	stw	r17,168(sp)
8110d6f0:	dc001e04 	addi	r16,sp,120
8110d6f4:	b023883a 	mov	r17,r22
8110d6f8:	402d883a 	mov	r22,r8
8110d6fc:	a009883a 	mov	r4,r20
8110d700:	880b883a 	mov	r5,r17
8110d704:	01800284 	movi	r6,10
8110d708:	000f883a 	mov	r7,zero
8110d70c:	11194680 	call	81119468 <__umoddi3>
8110d710:	10800c04 	addi	r2,r2,48
8110d714:	843fffc4 	addi	r16,r16,-1
8110d718:	a009883a 	mov	r4,r20
8110d71c:	880b883a 	mov	r5,r17
8110d720:	80800005 	stb	r2,0(r16)
8110d724:	01800284 	movi	r6,10
8110d728:	000f883a 	mov	r7,zero
8110d72c:	1118ef00 	call	81118ef0 <__udivdi3>
8110d730:	1029883a 	mov	r20,r2
8110d734:	10c4b03a 	or	r2,r2,r3
8110d738:	1823883a 	mov	r17,r3
8110d73c:	103fef1e 	bne	r2,zero,8110d6fc <__reset+0xfb0ed6fc>
8110d740:	d8c02817 	ldw	r3,160(sp)
8110d744:	dc402a17 	ldw	r17,168(sp)
8110d748:	b011883a 	mov	r8,r22
8110d74c:	1c07c83a 	sub	r3,r3,r16
8110d750:	d8c02e15 	stw	r3,184(sp)
8110d754:	00002e06 	br	8110d810 <___svfprintf_internal_r+0x6a0>
8110d758:	18c03fcc 	andi	r3,r3,255
8110d75c:	1806e71e 	bne	r3,zero,8110f2fc <___svfprintf_internal_r+0x218c>
8110d760:	94800414 	ori	r18,r18,16
8110d764:	9080080c 	andi	r2,r18,32
8110d768:	1002d426 	beq	r2,zero,8110e2bc <___svfprintf_internal_r+0x114c>
8110d76c:	d9402d17 	ldw	r5,180(sp)
8110d770:	d8c02917 	ldw	r3,164(sp)
8110d774:	d8002785 	stb	zero,158(sp)
8110d778:	28800204 	addi	r2,r5,8
8110d77c:	2d000017 	ldw	r20,0(r5)
8110d780:	2d800117 	ldw	r22,4(r5)
8110d784:	18041516 	blt	r3,zero,8110e7dc <___svfprintf_internal_r+0x166c>
8110d788:	013fdfc4 	movi	r4,-129
8110d78c:	a586b03a 	or	r3,r20,r22
8110d790:	d8802d15 	stw	r2,180(sp)
8110d794:	9124703a 	and	r18,r18,r4
8110d798:	1802d51e 	bne	r3,zero,8110e2f0 <___svfprintf_internal_r+0x1180>
8110d79c:	d9402917 	ldw	r5,164(sp)
8110d7a0:	0039883a 	mov	fp,zero
8110d7a4:	2806be26 	beq	r5,zero,8110f2a0 <___svfprintf_internal_r+0x2130>
8110d7a8:	0029883a 	mov	r20,zero
8110d7ac:	002d883a 	mov	r22,zero
8110d7b0:	dc001e04 	addi	r16,sp,120
8110d7b4:	a006d0fa 	srli	r3,r20,3
8110d7b8:	b008977a 	slli	r4,r22,29
8110d7bc:	b02cd0fa 	srli	r22,r22,3
8110d7c0:	a50001cc 	andi	r20,r20,7
8110d7c4:	a0800c04 	addi	r2,r20,48
8110d7c8:	843fffc4 	addi	r16,r16,-1
8110d7cc:	20e8b03a 	or	r20,r4,r3
8110d7d0:	80800005 	stb	r2,0(r16)
8110d7d4:	a586b03a 	or	r3,r20,r22
8110d7d8:	183ff61e 	bne	r3,zero,8110d7b4 <__reset+0xfb0ed7b4>
8110d7dc:	90c0004c 	andi	r3,r18,1
8110d7e0:	18013926 	beq	r3,zero,8110dcc8 <___svfprintf_internal_r+0xb58>
8110d7e4:	10803fcc 	andi	r2,r2,255
8110d7e8:	1080201c 	xori	r2,r2,128
8110d7ec:	10bfe004 	addi	r2,r2,-128
8110d7f0:	00c00c04 	movi	r3,48
8110d7f4:	10c13426 	beq	r2,r3,8110dcc8 <___svfprintf_internal_r+0xb58>
8110d7f8:	80ffffc5 	stb	r3,-1(r16)
8110d7fc:	d8c02817 	ldw	r3,160(sp)
8110d800:	80bfffc4 	addi	r2,r16,-1
8110d804:	1021883a 	mov	r16,r2
8110d808:	1887c83a 	sub	r3,r3,r2
8110d80c:	d8c02e15 	stw	r3,184(sp)
8110d810:	d8802e17 	ldw	r2,184(sp)
8110d814:	d9002917 	ldw	r4,164(sp)
8110d818:	1100010e 	bge	r2,r4,8110d820 <___svfprintf_internal_r+0x6b0>
8110d81c:	2005883a 	mov	r2,r4
8110d820:	d8802a15 	stw	r2,168(sp)
8110d824:	d8003215 	stw	zero,200(sp)
8110d828:	e7003fcc 	andi	fp,fp,255
8110d82c:	e700201c 	xori	fp,fp,128
8110d830:	e73fe004 	addi	fp,fp,-128
8110d834:	e0000326 	beq	fp,zero,8110d844 <___svfprintf_internal_r+0x6d4>
8110d838:	d8c02a17 	ldw	r3,168(sp)
8110d83c:	18c00044 	addi	r3,r3,1
8110d840:	d8c02a15 	stw	r3,168(sp)
8110d844:	90c0008c 	andi	r3,r18,2
8110d848:	d8c02b15 	stw	r3,172(sp)
8110d84c:	18000326 	beq	r3,zero,8110d85c <___svfprintf_internal_r+0x6ec>
8110d850:	d8c02a17 	ldw	r3,168(sp)
8110d854:	18c00084 	addi	r3,r3,2
8110d858:	d8c02a15 	stw	r3,168(sp)
8110d85c:	90c0210c 	andi	r3,r18,132
8110d860:	d8c03015 	stw	r3,192(sp)
8110d864:	1801a11e 	bne	r3,zero,8110deec <___svfprintf_internal_r+0xd7c>
8110d868:	d9003117 	ldw	r4,196(sp)
8110d86c:	d8c02a17 	ldw	r3,168(sp)
8110d870:	20e9c83a 	sub	r20,r4,r3
8110d874:	05019d0e 	bge	zero,r20,8110deec <___svfprintf_internal_r+0xd7c>
8110d878:	02400404 	movi	r9,16
8110d87c:	d8c02017 	ldw	r3,128(sp)
8110d880:	d8801f17 	ldw	r2,124(sp)
8110d884:	4d051b0e 	bge	r9,r20,8110ecf4 <___svfprintf_internal_r+0x1b84>
8110d888:	016044b4 	movhi	r5,33042
8110d88c:	2948e084 	addi	r5,r5,9090
8110d890:	dc403c15 	stw	r17,240(sp)
8110d894:	d9403515 	stw	r5,212(sp)
8110d898:	a023883a 	mov	r17,r20
8110d89c:	482d883a 	mov	r22,r9
8110d8a0:	9029883a 	mov	r20,r18
8110d8a4:	070001c4 	movi	fp,7
8110d8a8:	8025883a 	mov	r18,r16
8110d8ac:	dc002c17 	ldw	r16,176(sp)
8110d8b0:	00000306 	br	8110d8c0 <___svfprintf_internal_r+0x750>
8110d8b4:	8c7ffc04 	addi	r17,r17,-16
8110d8b8:	42000204 	addi	r8,r8,8
8110d8bc:	b440130e 	bge	r22,r17,8110d90c <___svfprintf_internal_r+0x79c>
8110d8c0:	012044b4 	movhi	r4,33042
8110d8c4:	18c00404 	addi	r3,r3,16
8110d8c8:	10800044 	addi	r2,r2,1
8110d8cc:	2108e084 	addi	r4,r4,9090
8110d8d0:	41000015 	stw	r4,0(r8)
8110d8d4:	45800115 	stw	r22,4(r8)
8110d8d8:	d8c02015 	stw	r3,128(sp)
8110d8dc:	d8801f15 	stw	r2,124(sp)
8110d8e0:	e0bff40e 	bge	fp,r2,8110d8b4 <__reset+0xfb0ed8b4>
8110d8e4:	d9801e04 	addi	r6,sp,120
8110d8e8:	800b883a 	mov	r5,r16
8110d8ec:	9809883a 	mov	r4,r19
8110d8f0:	1115d8c0 	call	81115d8c <__ssprint_r>
8110d8f4:	103f031e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110d8f8:	8c7ffc04 	addi	r17,r17,-16
8110d8fc:	d8c02017 	ldw	r3,128(sp)
8110d900:	d8801f17 	ldw	r2,124(sp)
8110d904:	da000404 	addi	r8,sp,16
8110d908:	b47fed16 	blt	r22,r17,8110d8c0 <__reset+0xfb0ed8c0>
8110d90c:	9021883a 	mov	r16,r18
8110d910:	a025883a 	mov	r18,r20
8110d914:	8829883a 	mov	r20,r17
8110d918:	dc403c17 	ldw	r17,240(sp)
8110d91c:	d9403517 	ldw	r5,212(sp)
8110d920:	a0c7883a 	add	r3,r20,r3
8110d924:	10800044 	addi	r2,r2,1
8110d928:	41400015 	stw	r5,0(r8)
8110d92c:	45000115 	stw	r20,4(r8)
8110d930:	d8c02015 	stw	r3,128(sp)
8110d934:	d8801f15 	stw	r2,124(sp)
8110d938:	010001c4 	movi	r4,7
8110d93c:	20829f16 	blt	r4,r2,8110e3bc <___svfprintf_internal_r+0x124c>
8110d940:	df002787 	ldb	fp,158(sp)
8110d944:	42000204 	addi	r8,r8,8
8110d948:	e0000c26 	beq	fp,zero,8110d97c <___svfprintf_internal_r+0x80c>
8110d94c:	d8801f17 	ldw	r2,124(sp)
8110d950:	d9002784 	addi	r4,sp,158
8110d954:	18c00044 	addi	r3,r3,1
8110d958:	10800044 	addi	r2,r2,1
8110d95c:	41000015 	stw	r4,0(r8)
8110d960:	01000044 	movi	r4,1
8110d964:	41000115 	stw	r4,4(r8)
8110d968:	d8c02015 	stw	r3,128(sp)
8110d96c:	d8801f15 	stw	r2,124(sp)
8110d970:	010001c4 	movi	r4,7
8110d974:	20823816 	blt	r4,r2,8110e258 <___svfprintf_internal_r+0x10e8>
8110d978:	42000204 	addi	r8,r8,8
8110d97c:	d8802b17 	ldw	r2,172(sp)
8110d980:	10000c26 	beq	r2,zero,8110d9b4 <___svfprintf_internal_r+0x844>
8110d984:	d8801f17 	ldw	r2,124(sp)
8110d988:	d9002704 	addi	r4,sp,156
8110d98c:	18c00084 	addi	r3,r3,2
8110d990:	10800044 	addi	r2,r2,1
8110d994:	41000015 	stw	r4,0(r8)
8110d998:	01000084 	movi	r4,2
8110d99c:	41000115 	stw	r4,4(r8)
8110d9a0:	d8c02015 	stw	r3,128(sp)
8110d9a4:	d8801f15 	stw	r2,124(sp)
8110d9a8:	010001c4 	movi	r4,7
8110d9ac:	20823216 	blt	r4,r2,8110e278 <___svfprintf_internal_r+0x1108>
8110d9b0:	42000204 	addi	r8,r8,8
8110d9b4:	d9003017 	ldw	r4,192(sp)
8110d9b8:	00802004 	movi	r2,128
8110d9bc:	20819726 	beq	r4,r2,8110e01c <___svfprintf_internal_r+0xeac>
8110d9c0:	d9402917 	ldw	r5,164(sp)
8110d9c4:	d8802e17 	ldw	r2,184(sp)
8110d9c8:	28adc83a 	sub	r22,r5,r2
8110d9cc:	05802f0e 	bge	zero,r22,8110da8c <___svfprintf_internal_r+0x91c>
8110d9d0:	07000404 	movi	fp,16
8110d9d4:	d8801f17 	ldw	r2,124(sp)
8110d9d8:	e583c00e 	bge	fp,r22,8110e8dc <___svfprintf_internal_r+0x176c>
8110d9dc:	016044b4 	movhi	r5,33042
8110d9e0:	2948dc84 	addi	r5,r5,9074
8110d9e4:	dc402915 	stw	r17,164(sp)
8110d9e8:	d9402b15 	stw	r5,172(sp)
8110d9ec:	b023883a 	mov	r17,r22
8110d9f0:	050001c4 	movi	r20,7
8110d9f4:	902d883a 	mov	r22,r18
8110d9f8:	8025883a 	mov	r18,r16
8110d9fc:	dc002c17 	ldw	r16,176(sp)
8110da00:	00000306 	br	8110da10 <___svfprintf_internal_r+0x8a0>
8110da04:	8c7ffc04 	addi	r17,r17,-16
8110da08:	42000204 	addi	r8,r8,8
8110da0c:	e440110e 	bge	fp,r17,8110da54 <___svfprintf_internal_r+0x8e4>
8110da10:	18c00404 	addi	r3,r3,16
8110da14:	10800044 	addi	r2,r2,1
8110da18:	45400015 	stw	r21,0(r8)
8110da1c:	47000115 	stw	fp,4(r8)
8110da20:	d8c02015 	stw	r3,128(sp)
8110da24:	d8801f15 	stw	r2,124(sp)
8110da28:	a0bff60e 	bge	r20,r2,8110da04 <__reset+0xfb0eda04>
8110da2c:	d9801e04 	addi	r6,sp,120
8110da30:	800b883a 	mov	r5,r16
8110da34:	9809883a 	mov	r4,r19
8110da38:	1115d8c0 	call	81115d8c <__ssprint_r>
8110da3c:	103eb11e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110da40:	8c7ffc04 	addi	r17,r17,-16
8110da44:	d8c02017 	ldw	r3,128(sp)
8110da48:	d8801f17 	ldw	r2,124(sp)
8110da4c:	da000404 	addi	r8,sp,16
8110da50:	e47fef16 	blt	fp,r17,8110da10 <__reset+0xfb0eda10>
8110da54:	9021883a 	mov	r16,r18
8110da58:	b025883a 	mov	r18,r22
8110da5c:	882d883a 	mov	r22,r17
8110da60:	dc402917 	ldw	r17,164(sp)
8110da64:	d9002b17 	ldw	r4,172(sp)
8110da68:	1d87883a 	add	r3,r3,r22
8110da6c:	10800044 	addi	r2,r2,1
8110da70:	41000015 	stw	r4,0(r8)
8110da74:	45800115 	stw	r22,4(r8)
8110da78:	d8c02015 	stw	r3,128(sp)
8110da7c:	d8801f15 	stw	r2,124(sp)
8110da80:	010001c4 	movi	r4,7
8110da84:	2081ec16 	blt	r4,r2,8110e238 <___svfprintf_internal_r+0x10c8>
8110da88:	42000204 	addi	r8,r8,8
8110da8c:	9080400c 	andi	r2,r18,256
8110da90:	1001181e 	bne	r2,zero,8110def4 <___svfprintf_internal_r+0xd84>
8110da94:	d9402e17 	ldw	r5,184(sp)
8110da98:	d8801f17 	ldw	r2,124(sp)
8110da9c:	44000015 	stw	r16,0(r8)
8110daa0:	1947883a 	add	r3,r3,r5
8110daa4:	10800044 	addi	r2,r2,1
8110daa8:	41400115 	stw	r5,4(r8)
8110daac:	d8c02015 	stw	r3,128(sp)
8110dab0:	d8801f15 	stw	r2,124(sp)
8110dab4:	010001c4 	movi	r4,7
8110dab8:	2081d116 	blt	r4,r2,8110e200 <___svfprintf_internal_r+0x1090>
8110dabc:	42000204 	addi	r8,r8,8
8110dac0:	9480010c 	andi	r18,r18,4
8110dac4:	90003226 	beq	r18,zero,8110db90 <___svfprintf_internal_r+0xa20>
8110dac8:	d9403117 	ldw	r5,196(sp)
8110dacc:	d8802a17 	ldw	r2,168(sp)
8110dad0:	28a1c83a 	sub	r16,r5,r2
8110dad4:	04002e0e 	bge	zero,r16,8110db90 <___svfprintf_internal_r+0xa20>
8110dad8:	04400404 	movi	r17,16
8110dadc:	d8801f17 	ldw	r2,124(sp)
8110dae0:	8c04b90e 	bge	r17,r16,8110edc8 <___svfprintf_internal_r+0x1c58>
8110dae4:	016044b4 	movhi	r5,33042
8110dae8:	2948e084 	addi	r5,r5,9090
8110daec:	d9403515 	stw	r5,212(sp)
8110daf0:	048001c4 	movi	r18,7
8110daf4:	dd002c17 	ldw	r20,176(sp)
8110daf8:	00000306 	br	8110db08 <___svfprintf_internal_r+0x998>
8110dafc:	843ffc04 	addi	r16,r16,-16
8110db00:	42000204 	addi	r8,r8,8
8110db04:	8c00130e 	bge	r17,r16,8110db54 <___svfprintf_internal_r+0x9e4>
8110db08:	012044b4 	movhi	r4,33042
8110db0c:	18c00404 	addi	r3,r3,16
8110db10:	10800044 	addi	r2,r2,1
8110db14:	2108e084 	addi	r4,r4,9090
8110db18:	41000015 	stw	r4,0(r8)
8110db1c:	44400115 	stw	r17,4(r8)
8110db20:	d8c02015 	stw	r3,128(sp)
8110db24:	d8801f15 	stw	r2,124(sp)
8110db28:	90bff40e 	bge	r18,r2,8110dafc <__reset+0xfb0edafc>
8110db2c:	d9801e04 	addi	r6,sp,120
8110db30:	a00b883a 	mov	r5,r20
8110db34:	9809883a 	mov	r4,r19
8110db38:	1115d8c0 	call	81115d8c <__ssprint_r>
8110db3c:	103e711e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110db40:	843ffc04 	addi	r16,r16,-16
8110db44:	d8c02017 	ldw	r3,128(sp)
8110db48:	d8801f17 	ldw	r2,124(sp)
8110db4c:	da000404 	addi	r8,sp,16
8110db50:	8c3fed16 	blt	r17,r16,8110db08 <__reset+0xfb0edb08>
8110db54:	d9403517 	ldw	r5,212(sp)
8110db58:	1c07883a 	add	r3,r3,r16
8110db5c:	10800044 	addi	r2,r2,1
8110db60:	41400015 	stw	r5,0(r8)
8110db64:	44000115 	stw	r16,4(r8)
8110db68:	d8c02015 	stw	r3,128(sp)
8110db6c:	d8801f15 	stw	r2,124(sp)
8110db70:	010001c4 	movi	r4,7
8110db74:	2080060e 	bge	r4,r2,8110db90 <___svfprintf_internal_r+0xa20>
8110db78:	d9402c17 	ldw	r5,176(sp)
8110db7c:	d9801e04 	addi	r6,sp,120
8110db80:	9809883a 	mov	r4,r19
8110db84:	1115d8c0 	call	81115d8c <__ssprint_r>
8110db88:	103e5e1e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110db8c:	d8c02017 	ldw	r3,128(sp)
8110db90:	d8803117 	ldw	r2,196(sp)
8110db94:	d9002a17 	ldw	r4,168(sp)
8110db98:	1100010e 	bge	r2,r4,8110dba0 <___svfprintf_internal_r+0xa30>
8110db9c:	2005883a 	mov	r2,r4
8110dba0:	d9402f17 	ldw	r5,188(sp)
8110dba4:	288b883a 	add	r5,r5,r2
8110dba8:	d9402f15 	stw	r5,188(sp)
8110dbac:	18019c1e 	bne	r3,zero,8110e220 <___svfprintf_internal_r+0x10b0>
8110dbb0:	b8800007 	ldb	r2,0(r23)
8110dbb4:	d8001f15 	stw	zero,124(sp)
8110dbb8:	da000404 	addi	r8,sp,16
8110dbbc:	103d991e 	bne	r2,zero,8110d224 <__reset+0xfb0ed224>
8110dbc0:	b821883a 	mov	r16,r23
8110dbc4:	003daf06 	br	8110d284 <__reset+0xfb0ed284>
8110dbc8:	18c03fcc 	andi	r3,r3,255
8110dbcc:	1805c71e 	bne	r3,zero,8110f2ec <___svfprintf_internal_r+0x217c>
8110dbd0:	94800414 	ori	r18,r18,16
8110dbd4:	9080080c 	andi	r2,r18,32
8110dbd8:	10020126 	beq	r2,zero,8110e3e0 <___svfprintf_internal_r+0x1270>
8110dbdc:	d8802d17 	ldw	r2,180(sp)
8110dbe0:	d9002917 	ldw	r4,164(sp)
8110dbe4:	d8002785 	stb	zero,158(sp)
8110dbe8:	10c00204 	addi	r3,r2,8
8110dbec:	15000017 	ldw	r20,0(r2)
8110dbf0:	15800117 	ldw	r22,4(r2)
8110dbf4:	20038e16 	blt	r4,zero,8110ea30 <___svfprintf_internal_r+0x18c0>
8110dbf8:	013fdfc4 	movi	r4,-129
8110dbfc:	a584b03a 	or	r2,r20,r22
8110dc00:	d8c02d15 	stw	r3,180(sp)
8110dc04:	9124703a 	and	r18,r18,r4
8110dc08:	0039883a 	mov	fp,zero
8110dc0c:	103eb61e 	bne	r2,zero,8110d6e8 <__reset+0xfb0ed6e8>
8110dc10:	d8802917 	ldw	r2,164(sp)
8110dc14:	1002c81e 	bne	r2,zero,8110e738 <___svfprintf_internal_r+0x15c8>
8110dc18:	d8002915 	stw	zero,164(sp)
8110dc1c:	d8002e15 	stw	zero,184(sp)
8110dc20:	dc001e04 	addi	r16,sp,120
8110dc24:	003efa06 	br	8110d810 <__reset+0xfb0ed810>
8110dc28:	18c03fcc 	andi	r3,r3,255
8110dc2c:	1805ad1e 	bne	r3,zero,8110f2e4 <___svfprintf_internal_r+0x2174>
8110dc30:	016044b4 	movhi	r5,33042
8110dc34:	2948d004 	addi	r5,r5,9024
8110dc38:	d9403a15 	stw	r5,232(sp)
8110dc3c:	9080080c 	andi	r2,r18,32
8110dc40:	10006126 	beq	r2,zero,8110ddc8 <___svfprintf_internal_r+0xc58>
8110dc44:	d8802d17 	ldw	r2,180(sp)
8110dc48:	15000017 	ldw	r20,0(r2)
8110dc4c:	15800117 	ldw	r22,4(r2)
8110dc50:	10800204 	addi	r2,r2,8
8110dc54:	d8802d15 	stw	r2,180(sp)
8110dc58:	9080004c 	andi	r2,r18,1
8110dc5c:	10018e26 	beq	r2,zero,8110e298 <___svfprintf_internal_r+0x1128>
8110dc60:	a584b03a 	or	r2,r20,r22
8110dc64:	10030926 	beq	r2,zero,8110e88c <___svfprintf_internal_r+0x171c>
8110dc68:	d8c02917 	ldw	r3,164(sp)
8110dc6c:	00800c04 	movi	r2,48
8110dc70:	d8802705 	stb	r2,156(sp)
8110dc74:	dc402745 	stb	r17,157(sp)
8110dc78:	d8002785 	stb	zero,158(sp)
8110dc7c:	90800094 	ori	r2,r18,2
8110dc80:	18048716 	blt	r3,zero,8110eea0 <___svfprintf_internal_r+0x1d30>
8110dc84:	00bfdfc4 	movi	r2,-129
8110dc88:	90a4703a 	and	r18,r18,r2
8110dc8c:	94800094 	ori	r18,r18,2
8110dc90:	0039883a 	mov	fp,zero
8110dc94:	d9003a17 	ldw	r4,232(sp)
8110dc98:	dc001e04 	addi	r16,sp,120
8110dc9c:	a08003cc 	andi	r2,r20,15
8110dca0:	b006973a 	slli	r3,r22,28
8110dca4:	2085883a 	add	r2,r4,r2
8110dca8:	a028d13a 	srli	r20,r20,4
8110dcac:	10800003 	ldbu	r2,0(r2)
8110dcb0:	b02cd13a 	srli	r22,r22,4
8110dcb4:	843fffc4 	addi	r16,r16,-1
8110dcb8:	1d28b03a 	or	r20,r3,r20
8110dcbc:	80800005 	stb	r2,0(r16)
8110dcc0:	a584b03a 	or	r2,r20,r22
8110dcc4:	103ff51e 	bne	r2,zero,8110dc9c <__reset+0xfb0edc9c>
8110dcc8:	d8c02817 	ldw	r3,160(sp)
8110dccc:	1c07c83a 	sub	r3,r3,r16
8110dcd0:	d8c02e15 	stw	r3,184(sp)
8110dcd4:	003ece06 	br	8110d810 <__reset+0xfb0ed810>
8110dcd8:	d8c02d17 	ldw	r3,180(sp)
8110dcdc:	d9002d17 	ldw	r4,180(sp)
8110dce0:	d8002785 	stb	zero,158(sp)
8110dce4:	18800017 	ldw	r2,0(r3)
8110dce8:	21000104 	addi	r4,r4,4
8110dcec:	00c00044 	movi	r3,1
8110dcf0:	d8c02a15 	stw	r3,168(sp)
8110dcf4:	d8801405 	stb	r2,80(sp)
8110dcf8:	d9002d15 	stw	r4,180(sp)
8110dcfc:	d8c02e15 	stw	r3,184(sp)
8110dd00:	d8002915 	stw	zero,164(sp)
8110dd04:	d8003215 	stw	zero,200(sp)
8110dd08:	dc001404 	addi	r16,sp,80
8110dd0c:	0039883a 	mov	fp,zero
8110dd10:	003ecc06 	br	8110d844 <__reset+0xfb0ed844>
8110dd14:	18c03fcc 	andi	r3,r3,255
8110dd18:	183e9226 	beq	r3,zero,8110d764 <__reset+0xfb0ed764>
8110dd1c:	d9c02785 	stb	r7,158(sp)
8110dd20:	003e9006 	br	8110d764 <__reset+0xfb0ed764>
8110dd24:	00c00044 	movi	r3,1
8110dd28:	01c00ac4 	movi	r7,43
8110dd2c:	bc400007 	ldb	r17,0(r23)
8110dd30:	003d6306 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110dd34:	94800814 	ori	r18,r18,32
8110dd38:	bc400007 	ldb	r17,0(r23)
8110dd3c:	003d6006 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110dd40:	d8c02d17 	ldw	r3,180(sp)
8110dd44:	d8002785 	stb	zero,158(sp)
8110dd48:	1c000017 	ldw	r16,0(r3)
8110dd4c:	1d000104 	addi	r20,r3,4
8110dd50:	80040f26 	beq	r16,zero,8110ed90 <___svfprintf_internal_r+0x1c20>
8110dd54:	d9002917 	ldw	r4,164(sp)
8110dd58:	2003dc16 	blt	r4,zero,8110eccc <___svfprintf_internal_r+0x1b5c>
8110dd5c:	200d883a 	mov	r6,r4
8110dd60:	000b883a 	mov	r5,zero
8110dd64:	8009883a 	mov	r4,r16
8110dd68:	da003e15 	stw	r8,248(sp)
8110dd6c:	11143a40 	call	811143a4 <memchr>
8110dd70:	da003e17 	ldw	r8,248(sp)
8110dd74:	10045826 	beq	r2,zero,8110eed8 <___svfprintf_internal_r+0x1d68>
8110dd78:	1405c83a 	sub	r2,r2,r16
8110dd7c:	d8802e15 	stw	r2,184(sp)
8110dd80:	1003d816 	blt	r2,zero,8110ece4 <___svfprintf_internal_r+0x1b74>
8110dd84:	df002783 	ldbu	fp,158(sp)
8110dd88:	d8802a15 	stw	r2,168(sp)
8110dd8c:	dd002d15 	stw	r20,180(sp)
8110dd90:	d8002915 	stw	zero,164(sp)
8110dd94:	d8003215 	stw	zero,200(sp)
8110dd98:	003ea306 	br	8110d828 <__reset+0xfb0ed828>
8110dd9c:	18c03fcc 	andi	r3,r3,255
8110dda0:	183f8c26 	beq	r3,zero,8110dbd4 <__reset+0xfb0edbd4>
8110dda4:	d9c02785 	stb	r7,158(sp)
8110dda8:	003f8a06 	br	8110dbd4 <__reset+0xfb0edbd4>
8110ddac:	18c03fcc 	andi	r3,r3,255
8110ddb0:	1805631e 	bne	r3,zero,8110f340 <___svfprintf_internal_r+0x21d0>
8110ddb4:	016044b4 	movhi	r5,33042
8110ddb8:	2948d504 	addi	r5,r5,9044
8110ddbc:	d9403a15 	stw	r5,232(sp)
8110ddc0:	9080080c 	andi	r2,r18,32
8110ddc4:	103f9f1e 	bne	r2,zero,8110dc44 <__reset+0xfb0edc44>
8110ddc8:	9080040c 	andi	r2,r18,16
8110ddcc:	10029c26 	beq	r2,zero,8110e840 <___svfprintf_internal_r+0x16d0>
8110ddd0:	d8c02d17 	ldw	r3,180(sp)
8110ddd4:	002d883a 	mov	r22,zero
8110ddd8:	1d000017 	ldw	r20,0(r3)
8110dddc:	18c00104 	addi	r3,r3,4
8110dde0:	d8c02d15 	stw	r3,180(sp)
8110dde4:	003f9c06 	br	8110dc58 <__reset+0xfb0edc58>
8110dde8:	94800054 	ori	r18,r18,1
8110ddec:	bc400007 	ldb	r17,0(r23)
8110ddf0:	003d3306 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110ddf4:	38803fcc 	andi	r2,r7,255
8110ddf8:	1080201c 	xori	r2,r2,128
8110ddfc:	10bfe004 	addi	r2,r2,-128
8110de00:	1002971e 	bne	r2,zero,8110e860 <___svfprintf_internal_r+0x16f0>
8110de04:	00c00044 	movi	r3,1
8110de08:	01c00804 	movi	r7,32
8110de0c:	bc400007 	ldb	r17,0(r23)
8110de10:	003d2b06 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110de14:	18c03fcc 	andi	r3,r3,255
8110de18:	183e2326 	beq	r3,zero,8110d6a8 <__reset+0xfb0ed6a8>
8110de1c:	d9c02785 	stb	r7,158(sp)
8110de20:	003e2106 	br	8110d6a8 <__reset+0xfb0ed6a8>
8110de24:	bc400007 	ldb	r17,0(r23)
8110de28:	8a430426 	beq	r17,r9,8110ea3c <___svfprintf_internal_r+0x18cc>
8110de2c:	94800414 	ori	r18,r18,16
8110de30:	003d2306 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110de34:	18c03fcc 	andi	r3,r3,255
8110de38:	18053f1e 	bne	r3,zero,8110f338 <___svfprintf_internal_r+0x21c8>
8110de3c:	9080080c 	andi	r2,r18,32
8110de40:	10028926 	beq	r2,zero,8110e868 <___svfprintf_internal_r+0x16f8>
8110de44:	d9402d17 	ldw	r5,180(sp)
8110de48:	d9002f17 	ldw	r4,188(sp)
8110de4c:	28800017 	ldw	r2,0(r5)
8110de50:	2007d7fa 	srai	r3,r4,31
8110de54:	29400104 	addi	r5,r5,4
8110de58:	d9402d15 	stw	r5,180(sp)
8110de5c:	11000015 	stw	r4,0(r2)
8110de60:	10c00115 	stw	r3,4(r2)
8110de64:	003ced06 	br	8110d21c <__reset+0xfb0ed21c>
8110de68:	94801014 	ori	r18,r18,64
8110de6c:	bc400007 	ldb	r17,0(r23)
8110de70:	003d1306 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110de74:	012044b4 	movhi	r4,33042
8110de78:	2108d504 	addi	r4,r4,9044
8110de7c:	0039883a 	mov	fp,zero
8110de80:	d9003a15 	stw	r4,232(sp)
8110de84:	04401e04 	movi	r17,120
8110de88:	003f8206 	br	8110dc94 <__reset+0xfb0edc94>
8110de8c:	18c03fcc 	andi	r3,r3,255
8110de90:	1805221e 	bne	r3,zero,8110f31c <___svfprintf_internal_r+0x21ac>
8110de94:	883d9526 	beq	r17,zero,8110d4ec <__reset+0xfb0ed4ec>
8110de98:	00c00044 	movi	r3,1
8110de9c:	d8c02a15 	stw	r3,168(sp)
8110dea0:	dc401405 	stb	r17,80(sp)
8110dea4:	d8002785 	stb	zero,158(sp)
8110dea8:	003f9406 	br	8110dcfc <__reset+0xfb0edcfc>
8110deac:	012044b4 	movhi	r4,33042
8110deb0:	2108d504 	addi	r4,r4,9044
8110deb4:	d9003a15 	stw	r4,232(sp)
8110deb8:	d8c02d15 	stw	r3,180(sp)
8110debc:	1025883a 	mov	r18,r2
8110dec0:	04401e04 	movi	r17,120
8110dec4:	a584b03a 	or	r2,r20,r22
8110dec8:	1000fa1e 	bne	r2,zero,8110e2b4 <___svfprintf_internal_r+0x1144>
8110decc:	0039883a 	mov	fp,zero
8110ded0:	00800084 	movi	r2,2
8110ded4:	10803fcc 	andi	r2,r2,255
8110ded8:	00c00044 	movi	r3,1
8110dedc:	10c21626 	beq	r2,r3,8110e738 <___svfprintf_internal_r+0x15c8>
8110dee0:	00c00084 	movi	r3,2
8110dee4:	10fe301e 	bne	r2,r3,8110d7a8 <__reset+0xfb0ed7a8>
8110dee8:	003d7606 	br	8110d4c4 <__reset+0xfb0ed4c4>
8110deec:	d8c02017 	ldw	r3,128(sp)
8110def0:	003e9506 	br	8110d948 <__reset+0xfb0ed948>
8110def4:	00801944 	movi	r2,101
8110def8:	14407c0e 	bge	r2,r17,8110e0ec <___svfprintf_internal_r+0xf7c>
8110defc:	d9003617 	ldw	r4,216(sp)
8110df00:	d9403717 	ldw	r5,220(sp)
8110df04:	000d883a 	mov	r6,zero
8110df08:	000f883a 	mov	r7,zero
8110df0c:	d8c03d15 	stw	r3,244(sp)
8110df10:	da003e15 	stw	r8,248(sp)
8110df14:	111ace80 	call	8111ace8 <__eqdf2>
8110df18:	d8c03d17 	ldw	r3,244(sp)
8110df1c:	da003e17 	ldw	r8,248(sp)
8110df20:	1000f51e 	bne	r2,zero,8110e2f8 <___svfprintf_internal_r+0x1188>
8110df24:	d8801f17 	ldw	r2,124(sp)
8110df28:	012044b4 	movhi	r4,33042
8110df2c:	2108dc04 	addi	r4,r4,9072
8110df30:	18c00044 	addi	r3,r3,1
8110df34:	10800044 	addi	r2,r2,1
8110df38:	41000015 	stw	r4,0(r8)
8110df3c:	01000044 	movi	r4,1
8110df40:	41000115 	stw	r4,4(r8)
8110df44:	d8c02015 	stw	r3,128(sp)
8110df48:	d8801f15 	stw	r2,124(sp)
8110df4c:	010001c4 	movi	r4,7
8110df50:	20826616 	blt	r4,r2,8110e8ec <___svfprintf_internal_r+0x177c>
8110df54:	42000204 	addi	r8,r8,8
8110df58:	d8802617 	ldw	r2,152(sp)
8110df5c:	d9403317 	ldw	r5,204(sp)
8110df60:	11400216 	blt	r2,r5,8110df6c <___svfprintf_internal_r+0xdfc>
8110df64:	9080004c 	andi	r2,r18,1
8110df68:	103ed526 	beq	r2,zero,8110dac0 <__reset+0xfb0edac0>
8110df6c:	d8803817 	ldw	r2,224(sp)
8110df70:	d9003417 	ldw	r4,208(sp)
8110df74:	d9403817 	ldw	r5,224(sp)
8110df78:	1887883a 	add	r3,r3,r2
8110df7c:	d8801f17 	ldw	r2,124(sp)
8110df80:	41000015 	stw	r4,0(r8)
8110df84:	41400115 	stw	r5,4(r8)
8110df88:	10800044 	addi	r2,r2,1
8110df8c:	d8c02015 	stw	r3,128(sp)
8110df90:	d8801f15 	stw	r2,124(sp)
8110df94:	010001c4 	movi	r4,7
8110df98:	2082af16 	blt	r4,r2,8110ea58 <___svfprintf_internal_r+0x18e8>
8110df9c:	42000204 	addi	r8,r8,8
8110dfa0:	d8803317 	ldw	r2,204(sp)
8110dfa4:	143fffc4 	addi	r16,r2,-1
8110dfa8:	043ec50e 	bge	zero,r16,8110dac0 <__reset+0xfb0edac0>
8110dfac:	04400404 	movi	r17,16
8110dfb0:	d8801f17 	ldw	r2,124(sp)
8110dfb4:	8c00860e 	bge	r17,r16,8110e1d0 <___svfprintf_internal_r+0x1060>
8110dfb8:	016044b4 	movhi	r5,33042
8110dfbc:	2948dc84 	addi	r5,r5,9074
8110dfc0:	d9402b15 	stw	r5,172(sp)
8110dfc4:	058001c4 	movi	r22,7
8110dfc8:	dd002c17 	ldw	r20,176(sp)
8110dfcc:	00000306 	br	8110dfdc <___svfprintf_internal_r+0xe6c>
8110dfd0:	42000204 	addi	r8,r8,8
8110dfd4:	843ffc04 	addi	r16,r16,-16
8110dfd8:	8c00800e 	bge	r17,r16,8110e1dc <___svfprintf_internal_r+0x106c>
8110dfdc:	18c00404 	addi	r3,r3,16
8110dfe0:	10800044 	addi	r2,r2,1
8110dfe4:	45400015 	stw	r21,0(r8)
8110dfe8:	44400115 	stw	r17,4(r8)
8110dfec:	d8c02015 	stw	r3,128(sp)
8110dff0:	d8801f15 	stw	r2,124(sp)
8110dff4:	b0bff60e 	bge	r22,r2,8110dfd0 <__reset+0xfb0edfd0>
8110dff8:	d9801e04 	addi	r6,sp,120
8110dffc:	a00b883a 	mov	r5,r20
8110e000:	9809883a 	mov	r4,r19
8110e004:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e008:	103d3e1e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e00c:	d8c02017 	ldw	r3,128(sp)
8110e010:	d8801f17 	ldw	r2,124(sp)
8110e014:	da000404 	addi	r8,sp,16
8110e018:	003fee06 	br	8110dfd4 <__reset+0xfb0edfd4>
8110e01c:	d9403117 	ldw	r5,196(sp)
8110e020:	d8802a17 	ldw	r2,168(sp)
8110e024:	28adc83a 	sub	r22,r5,r2
8110e028:	05be650e 	bge	zero,r22,8110d9c0 <__reset+0xfb0ed9c0>
8110e02c:	07000404 	movi	fp,16
8110e030:	d8801f17 	ldw	r2,124(sp)
8110e034:	e583a20e 	bge	fp,r22,8110eec0 <___svfprintf_internal_r+0x1d50>
8110e038:	016044b4 	movhi	r5,33042
8110e03c:	2948dc84 	addi	r5,r5,9074
8110e040:	dc403015 	stw	r17,192(sp)
8110e044:	d9402b15 	stw	r5,172(sp)
8110e048:	b023883a 	mov	r17,r22
8110e04c:	050001c4 	movi	r20,7
8110e050:	902d883a 	mov	r22,r18
8110e054:	8025883a 	mov	r18,r16
8110e058:	dc002c17 	ldw	r16,176(sp)
8110e05c:	00000306 	br	8110e06c <___svfprintf_internal_r+0xefc>
8110e060:	8c7ffc04 	addi	r17,r17,-16
8110e064:	42000204 	addi	r8,r8,8
8110e068:	e440110e 	bge	fp,r17,8110e0b0 <___svfprintf_internal_r+0xf40>
8110e06c:	18c00404 	addi	r3,r3,16
8110e070:	10800044 	addi	r2,r2,1
8110e074:	45400015 	stw	r21,0(r8)
8110e078:	47000115 	stw	fp,4(r8)
8110e07c:	d8c02015 	stw	r3,128(sp)
8110e080:	d8801f15 	stw	r2,124(sp)
8110e084:	a0bff60e 	bge	r20,r2,8110e060 <__reset+0xfb0ee060>
8110e088:	d9801e04 	addi	r6,sp,120
8110e08c:	800b883a 	mov	r5,r16
8110e090:	9809883a 	mov	r4,r19
8110e094:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e098:	103d1a1e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e09c:	8c7ffc04 	addi	r17,r17,-16
8110e0a0:	d8c02017 	ldw	r3,128(sp)
8110e0a4:	d8801f17 	ldw	r2,124(sp)
8110e0a8:	da000404 	addi	r8,sp,16
8110e0ac:	e47fef16 	blt	fp,r17,8110e06c <__reset+0xfb0ee06c>
8110e0b0:	9021883a 	mov	r16,r18
8110e0b4:	b025883a 	mov	r18,r22
8110e0b8:	882d883a 	mov	r22,r17
8110e0bc:	dc403017 	ldw	r17,192(sp)
8110e0c0:	d9002b17 	ldw	r4,172(sp)
8110e0c4:	1d87883a 	add	r3,r3,r22
8110e0c8:	10800044 	addi	r2,r2,1
8110e0cc:	41000015 	stw	r4,0(r8)
8110e0d0:	45800115 	stw	r22,4(r8)
8110e0d4:	d8c02015 	stw	r3,128(sp)
8110e0d8:	d8801f15 	stw	r2,124(sp)
8110e0dc:	010001c4 	movi	r4,7
8110e0e0:	20819a16 	blt	r4,r2,8110e74c <___svfprintf_internal_r+0x15dc>
8110e0e4:	42000204 	addi	r8,r8,8
8110e0e8:	003e3506 	br	8110d9c0 <__reset+0xfb0ed9c0>
8110e0ec:	d9403317 	ldw	r5,204(sp)
8110e0f0:	00800044 	movi	r2,1
8110e0f4:	18c00044 	addi	r3,r3,1
8110e0f8:	1141710e 	bge	r2,r5,8110e6c0 <___svfprintf_internal_r+0x1550>
8110e0fc:	dc401f17 	ldw	r17,124(sp)
8110e100:	00800044 	movi	r2,1
8110e104:	40800115 	stw	r2,4(r8)
8110e108:	8c400044 	addi	r17,r17,1
8110e10c:	44000015 	stw	r16,0(r8)
8110e110:	d8c02015 	stw	r3,128(sp)
8110e114:	dc401f15 	stw	r17,124(sp)
8110e118:	008001c4 	movi	r2,7
8110e11c:	14417416 	blt	r2,r17,8110e6f0 <___svfprintf_internal_r+0x1580>
8110e120:	42000204 	addi	r8,r8,8
8110e124:	d8803817 	ldw	r2,224(sp)
8110e128:	d9003417 	ldw	r4,208(sp)
8110e12c:	8c400044 	addi	r17,r17,1
8110e130:	10c7883a 	add	r3,r2,r3
8110e134:	40800115 	stw	r2,4(r8)
8110e138:	41000015 	stw	r4,0(r8)
8110e13c:	d8c02015 	stw	r3,128(sp)
8110e140:	dc401f15 	stw	r17,124(sp)
8110e144:	008001c4 	movi	r2,7
8110e148:	14417216 	blt	r2,r17,8110e714 <___svfprintf_internal_r+0x15a4>
8110e14c:	45800204 	addi	r22,r8,8
8110e150:	d9003617 	ldw	r4,216(sp)
8110e154:	d9403717 	ldw	r5,220(sp)
8110e158:	000d883a 	mov	r6,zero
8110e15c:	000f883a 	mov	r7,zero
8110e160:	d8c03d15 	stw	r3,244(sp)
8110e164:	111ace80 	call	8111ace8 <__eqdf2>
8110e168:	d8c03d17 	ldw	r3,244(sp)
8110e16c:	1000b326 	beq	r2,zero,8110e43c <___svfprintf_internal_r+0x12cc>
8110e170:	d9403317 	ldw	r5,204(sp)
8110e174:	84000044 	addi	r16,r16,1
8110e178:	8c400044 	addi	r17,r17,1
8110e17c:	28bfffc4 	addi	r2,r5,-1
8110e180:	1887883a 	add	r3,r3,r2
8110e184:	b0800115 	stw	r2,4(r22)
8110e188:	b4000015 	stw	r16,0(r22)
8110e18c:	d8c02015 	stw	r3,128(sp)
8110e190:	dc401f15 	stw	r17,124(sp)
8110e194:	008001c4 	movi	r2,7
8110e198:	1440d216 	blt	r2,r17,8110e4e4 <___svfprintf_internal_r+0x1374>
8110e19c:	b5800204 	addi	r22,r22,8
8110e1a0:	d9003b17 	ldw	r4,236(sp)
8110e1a4:	df0022c4 	addi	fp,sp,139
8110e1a8:	8c400044 	addi	r17,r17,1
8110e1ac:	20c7883a 	add	r3,r4,r3
8110e1b0:	b7000015 	stw	fp,0(r22)
8110e1b4:	b1000115 	stw	r4,4(r22)
8110e1b8:	d8c02015 	stw	r3,128(sp)
8110e1bc:	dc401f15 	stw	r17,124(sp)
8110e1c0:	008001c4 	movi	r2,7
8110e1c4:	14400e16 	blt	r2,r17,8110e200 <___svfprintf_internal_r+0x1090>
8110e1c8:	b2000204 	addi	r8,r22,8
8110e1cc:	003e3c06 	br	8110dac0 <__reset+0xfb0edac0>
8110e1d0:	012044b4 	movhi	r4,33042
8110e1d4:	2108dc84 	addi	r4,r4,9074
8110e1d8:	d9002b15 	stw	r4,172(sp)
8110e1dc:	d9002b17 	ldw	r4,172(sp)
8110e1e0:	1c07883a 	add	r3,r3,r16
8110e1e4:	44000115 	stw	r16,4(r8)
8110e1e8:	41000015 	stw	r4,0(r8)
8110e1ec:	10800044 	addi	r2,r2,1
8110e1f0:	d8c02015 	stw	r3,128(sp)
8110e1f4:	d8801f15 	stw	r2,124(sp)
8110e1f8:	010001c4 	movi	r4,7
8110e1fc:	20be2f0e 	bge	r4,r2,8110dabc <__reset+0xfb0edabc>
8110e200:	d9402c17 	ldw	r5,176(sp)
8110e204:	d9801e04 	addi	r6,sp,120
8110e208:	9809883a 	mov	r4,r19
8110e20c:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e210:	103cbc1e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e214:	d8c02017 	ldw	r3,128(sp)
8110e218:	da000404 	addi	r8,sp,16
8110e21c:	003e2806 	br	8110dac0 <__reset+0xfb0edac0>
8110e220:	d9402c17 	ldw	r5,176(sp)
8110e224:	d9801e04 	addi	r6,sp,120
8110e228:	9809883a 	mov	r4,r19
8110e22c:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e230:	103e5f26 	beq	r2,zero,8110dbb0 <__reset+0xfb0edbb0>
8110e234:	003cb306 	br	8110d504 <__reset+0xfb0ed504>
8110e238:	d9402c17 	ldw	r5,176(sp)
8110e23c:	d9801e04 	addi	r6,sp,120
8110e240:	9809883a 	mov	r4,r19
8110e244:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e248:	103cae1e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e24c:	d8c02017 	ldw	r3,128(sp)
8110e250:	da000404 	addi	r8,sp,16
8110e254:	003e0d06 	br	8110da8c <__reset+0xfb0eda8c>
8110e258:	d9402c17 	ldw	r5,176(sp)
8110e25c:	d9801e04 	addi	r6,sp,120
8110e260:	9809883a 	mov	r4,r19
8110e264:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e268:	103ca61e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e26c:	d8c02017 	ldw	r3,128(sp)
8110e270:	da000404 	addi	r8,sp,16
8110e274:	003dc106 	br	8110d97c <__reset+0xfb0ed97c>
8110e278:	d9402c17 	ldw	r5,176(sp)
8110e27c:	d9801e04 	addi	r6,sp,120
8110e280:	9809883a 	mov	r4,r19
8110e284:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e288:	103c9e1e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e28c:	d8c02017 	ldw	r3,128(sp)
8110e290:	da000404 	addi	r8,sp,16
8110e294:	003dc706 	br	8110d9b4 <__reset+0xfb0ed9b4>
8110e298:	d8802917 	ldw	r2,164(sp)
8110e29c:	d8002785 	stb	zero,158(sp)
8110e2a0:	103f0816 	blt	r2,zero,8110dec4 <__reset+0xfb0edec4>
8110e2a4:	00ffdfc4 	movi	r3,-129
8110e2a8:	a584b03a 	or	r2,r20,r22
8110e2ac:	90e4703a 	and	r18,r18,r3
8110e2b0:	103c8126 	beq	r2,zero,8110d4b8 <__reset+0xfb0ed4b8>
8110e2b4:	0039883a 	mov	fp,zero
8110e2b8:	003e7606 	br	8110dc94 <__reset+0xfb0edc94>
8110e2bc:	9080040c 	andi	r2,r18,16
8110e2c0:	10013d26 	beq	r2,zero,8110e7b8 <___svfprintf_internal_r+0x1648>
8110e2c4:	d9002d17 	ldw	r4,180(sp)
8110e2c8:	d9402917 	ldw	r5,164(sp)
8110e2cc:	d8002785 	stb	zero,158(sp)
8110e2d0:	20800104 	addi	r2,r4,4
8110e2d4:	25000017 	ldw	r20,0(r4)
8110e2d8:	002d883a 	mov	r22,zero
8110e2dc:	28013f16 	blt	r5,zero,8110e7dc <___svfprintf_internal_r+0x166c>
8110e2e0:	00ffdfc4 	movi	r3,-129
8110e2e4:	d8802d15 	stw	r2,180(sp)
8110e2e8:	90e4703a 	and	r18,r18,r3
8110e2ec:	a03d2b26 	beq	r20,zero,8110d79c <__reset+0xfb0ed79c>
8110e2f0:	0039883a 	mov	fp,zero
8110e2f4:	003d2e06 	br	8110d7b0 <__reset+0xfb0ed7b0>
8110e2f8:	dc402617 	ldw	r17,152(sp)
8110e2fc:	0441830e 	bge	zero,r17,8110e90c <___svfprintf_internal_r+0x179c>
8110e300:	dc403217 	ldw	r17,200(sp)
8110e304:	d8803317 	ldw	r2,204(sp)
8110e308:	1440010e 	bge	r2,r17,8110e310 <___svfprintf_internal_r+0x11a0>
8110e30c:	1023883a 	mov	r17,r2
8110e310:	04400a0e 	bge	zero,r17,8110e33c <___svfprintf_internal_r+0x11cc>
8110e314:	d8801f17 	ldw	r2,124(sp)
8110e318:	1c47883a 	add	r3,r3,r17
8110e31c:	44000015 	stw	r16,0(r8)
8110e320:	10800044 	addi	r2,r2,1
8110e324:	44400115 	stw	r17,4(r8)
8110e328:	d8c02015 	stw	r3,128(sp)
8110e32c:	d8801f15 	stw	r2,124(sp)
8110e330:	010001c4 	movi	r4,7
8110e334:	20827516 	blt	r4,r2,8110ed0c <___svfprintf_internal_r+0x1b9c>
8110e338:	42000204 	addi	r8,r8,8
8110e33c:	88027b16 	blt	r17,zero,8110ed2c <___svfprintf_internal_r+0x1bbc>
8110e340:	d9003217 	ldw	r4,200(sp)
8110e344:	2463c83a 	sub	r17,r4,r17
8110e348:	0440990e 	bge	zero,r17,8110e5b0 <___svfprintf_internal_r+0x1440>
8110e34c:	05800404 	movi	r22,16
8110e350:	d8801f17 	ldw	r2,124(sp)
8110e354:	b441530e 	bge	r22,r17,8110e8a4 <___svfprintf_internal_r+0x1734>
8110e358:	012044b4 	movhi	r4,33042
8110e35c:	2108dc84 	addi	r4,r4,9074
8110e360:	d9002b15 	stw	r4,172(sp)
8110e364:	070001c4 	movi	fp,7
8110e368:	dd002c17 	ldw	r20,176(sp)
8110e36c:	00000306 	br	8110e37c <___svfprintf_internal_r+0x120c>
8110e370:	42000204 	addi	r8,r8,8
8110e374:	8c7ffc04 	addi	r17,r17,-16
8110e378:	b4414d0e 	bge	r22,r17,8110e8b0 <___svfprintf_internal_r+0x1740>
8110e37c:	18c00404 	addi	r3,r3,16
8110e380:	10800044 	addi	r2,r2,1
8110e384:	45400015 	stw	r21,0(r8)
8110e388:	45800115 	stw	r22,4(r8)
8110e38c:	d8c02015 	stw	r3,128(sp)
8110e390:	d8801f15 	stw	r2,124(sp)
8110e394:	e0bff60e 	bge	fp,r2,8110e370 <__reset+0xfb0ee370>
8110e398:	d9801e04 	addi	r6,sp,120
8110e39c:	a00b883a 	mov	r5,r20
8110e3a0:	9809883a 	mov	r4,r19
8110e3a4:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e3a8:	103c561e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e3ac:	d8c02017 	ldw	r3,128(sp)
8110e3b0:	d8801f17 	ldw	r2,124(sp)
8110e3b4:	da000404 	addi	r8,sp,16
8110e3b8:	003fee06 	br	8110e374 <__reset+0xfb0ee374>
8110e3bc:	d9402c17 	ldw	r5,176(sp)
8110e3c0:	d9801e04 	addi	r6,sp,120
8110e3c4:	9809883a 	mov	r4,r19
8110e3c8:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e3cc:	103c4d1e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e3d0:	d8c02017 	ldw	r3,128(sp)
8110e3d4:	df002787 	ldb	fp,158(sp)
8110e3d8:	da000404 	addi	r8,sp,16
8110e3dc:	003d5a06 	br	8110d948 <__reset+0xfb0ed948>
8110e3e0:	9080040c 	andi	r2,r18,16
8110e3e4:	10005c26 	beq	r2,zero,8110e558 <___svfprintf_internal_r+0x13e8>
8110e3e8:	d9402d17 	ldw	r5,180(sp)
8110e3ec:	d8c02917 	ldw	r3,164(sp)
8110e3f0:	d8002785 	stb	zero,158(sp)
8110e3f4:	28800104 	addi	r2,r5,4
8110e3f8:	2d000017 	ldw	r20,0(r5)
8110e3fc:	002d883a 	mov	r22,zero
8110e400:	18005e16 	blt	r3,zero,8110e57c <___svfprintf_internal_r+0x140c>
8110e404:	00ffdfc4 	movi	r3,-129
8110e408:	d8802d15 	stw	r2,180(sp)
8110e40c:	90e4703a 	and	r18,r18,r3
8110e410:	0039883a 	mov	fp,zero
8110e414:	a03dfe26 	beq	r20,zero,8110dc10 <__reset+0xfb0edc10>
8110e418:	00800244 	movi	r2,9
8110e41c:	153cb336 	bltu	r2,r20,8110d6ec <__reset+0xfb0ed6ec>
8110e420:	a5000c04 	addi	r20,r20,48
8110e424:	dc001dc4 	addi	r16,sp,119
8110e428:	dd001dc5 	stb	r20,119(sp)
8110e42c:	d8c02817 	ldw	r3,160(sp)
8110e430:	1c07c83a 	sub	r3,r3,r16
8110e434:	d8c02e15 	stw	r3,184(sp)
8110e438:	003cf506 	br	8110d810 <__reset+0xfb0ed810>
8110e43c:	d8803317 	ldw	r2,204(sp)
8110e440:	143fffc4 	addi	r16,r2,-1
8110e444:	043f560e 	bge	zero,r16,8110e1a0 <__reset+0xfb0ee1a0>
8110e448:	07000404 	movi	fp,16
8110e44c:	e403530e 	bge	fp,r16,8110f19c <___svfprintf_internal_r+0x202c>
8110e450:	016044b4 	movhi	r5,33042
8110e454:	2948dc84 	addi	r5,r5,9074
8110e458:	d9402b15 	stw	r5,172(sp)
8110e45c:	01c001c4 	movi	r7,7
8110e460:	dd002c17 	ldw	r20,176(sp)
8110e464:	00000306 	br	8110e474 <___svfprintf_internal_r+0x1304>
8110e468:	843ffc04 	addi	r16,r16,-16
8110e46c:	b5800204 	addi	r22,r22,8
8110e470:	e400130e 	bge	fp,r16,8110e4c0 <___svfprintf_internal_r+0x1350>
8110e474:	18c00404 	addi	r3,r3,16
8110e478:	8c400044 	addi	r17,r17,1
8110e47c:	b5400015 	stw	r21,0(r22)
8110e480:	b7000115 	stw	fp,4(r22)
8110e484:	d8c02015 	stw	r3,128(sp)
8110e488:	dc401f15 	stw	r17,124(sp)
8110e48c:	3c7ff60e 	bge	r7,r17,8110e468 <__reset+0xfb0ee468>
8110e490:	d9801e04 	addi	r6,sp,120
8110e494:	a00b883a 	mov	r5,r20
8110e498:	9809883a 	mov	r4,r19
8110e49c:	d9c03d15 	stw	r7,244(sp)
8110e4a0:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e4a4:	d9c03d17 	ldw	r7,244(sp)
8110e4a8:	103c161e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e4ac:	843ffc04 	addi	r16,r16,-16
8110e4b0:	d8c02017 	ldw	r3,128(sp)
8110e4b4:	dc401f17 	ldw	r17,124(sp)
8110e4b8:	dd800404 	addi	r22,sp,16
8110e4bc:	e43fed16 	blt	fp,r16,8110e474 <__reset+0xfb0ee474>
8110e4c0:	d8802b17 	ldw	r2,172(sp)
8110e4c4:	1c07883a 	add	r3,r3,r16
8110e4c8:	8c400044 	addi	r17,r17,1
8110e4cc:	b0800015 	stw	r2,0(r22)
8110e4d0:	b4000115 	stw	r16,4(r22)
8110e4d4:	d8c02015 	stw	r3,128(sp)
8110e4d8:	dc401f15 	stw	r17,124(sp)
8110e4dc:	008001c4 	movi	r2,7
8110e4e0:	147f2e0e 	bge	r2,r17,8110e19c <__reset+0xfb0ee19c>
8110e4e4:	d9402c17 	ldw	r5,176(sp)
8110e4e8:	d9801e04 	addi	r6,sp,120
8110e4ec:	9809883a 	mov	r4,r19
8110e4f0:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e4f4:	103c031e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e4f8:	d8c02017 	ldw	r3,128(sp)
8110e4fc:	dc401f17 	ldw	r17,124(sp)
8110e500:	dd800404 	addi	r22,sp,16
8110e504:	003f2606 	br	8110e1a0 <__reset+0xfb0ee1a0>
8110e508:	9080040c 	andi	r2,r18,16
8110e50c:	1000c326 	beq	r2,zero,8110e81c <___svfprintf_internal_r+0x16ac>
8110e510:	d8802d17 	ldw	r2,180(sp)
8110e514:	15000017 	ldw	r20,0(r2)
8110e518:	10800104 	addi	r2,r2,4
8110e51c:	d8802d15 	stw	r2,180(sp)
8110e520:	a02dd7fa 	srai	r22,r20,31
8110e524:	b005883a 	mov	r2,r22
8110e528:	103c680e 	bge	r2,zero,8110d6cc <__reset+0xfb0ed6cc>
8110e52c:	0529c83a 	sub	r20,zero,r20
8110e530:	a004c03a 	cmpne	r2,r20,zero
8110e534:	05adc83a 	sub	r22,zero,r22
8110e538:	b0adc83a 	sub	r22,r22,r2
8110e53c:	d8802917 	ldw	r2,164(sp)
8110e540:	07000b44 	movi	fp,45
8110e544:	df002785 	stb	fp,158(sp)
8110e548:	10022e16 	blt	r2,zero,8110ee04 <___svfprintf_internal_r+0x1c94>
8110e54c:	00bfdfc4 	movi	r2,-129
8110e550:	90a4703a 	and	r18,r18,r2
8110e554:	003c6406 	br	8110d6e8 <__reset+0xfb0ed6e8>
8110e558:	9080100c 	andi	r2,r18,64
8110e55c:	d8002785 	stb	zero,158(sp)
8110e560:	10012526 	beq	r2,zero,8110e9f8 <___svfprintf_internal_r+0x1888>
8110e564:	d9002d17 	ldw	r4,180(sp)
8110e568:	d9402917 	ldw	r5,164(sp)
8110e56c:	002d883a 	mov	r22,zero
8110e570:	20800104 	addi	r2,r4,4
8110e574:	2500000b 	ldhu	r20,0(r4)
8110e578:	283fa20e 	bge	r5,zero,8110e404 <__reset+0xfb0ee404>
8110e57c:	d8802d15 	stw	r2,180(sp)
8110e580:	0039883a 	mov	fp,zero
8110e584:	a584b03a 	or	r2,r20,r22
8110e588:	103c571e 	bne	r2,zero,8110d6e8 <__reset+0xfb0ed6e8>
8110e58c:	00800044 	movi	r2,1
8110e590:	003e5006 	br	8110ded4 <__reset+0xfb0eded4>
8110e594:	d9402c17 	ldw	r5,176(sp)
8110e598:	d9801e04 	addi	r6,sp,120
8110e59c:	9809883a 	mov	r4,r19
8110e5a0:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e5a4:	103bd71e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e5a8:	d8c02017 	ldw	r3,128(sp)
8110e5ac:	da000404 	addi	r8,sp,16
8110e5b0:	d9003217 	ldw	r4,200(sp)
8110e5b4:	d8802617 	ldw	r2,152(sp)
8110e5b8:	d9403317 	ldw	r5,204(sp)
8110e5bc:	8123883a 	add	r17,r16,r4
8110e5c0:	11400216 	blt	r2,r5,8110e5cc <___svfprintf_internal_r+0x145c>
8110e5c4:	9100004c 	andi	r4,r18,1
8110e5c8:	20000d26 	beq	r4,zero,8110e600 <___svfprintf_internal_r+0x1490>
8110e5cc:	d9003817 	ldw	r4,224(sp)
8110e5d0:	d9403417 	ldw	r5,208(sp)
8110e5d4:	1907883a 	add	r3,r3,r4
8110e5d8:	d9001f17 	ldw	r4,124(sp)
8110e5dc:	41400015 	stw	r5,0(r8)
8110e5e0:	d9403817 	ldw	r5,224(sp)
8110e5e4:	21000044 	addi	r4,r4,1
8110e5e8:	d8c02015 	stw	r3,128(sp)
8110e5ec:	41400115 	stw	r5,4(r8)
8110e5f0:	d9001f15 	stw	r4,124(sp)
8110e5f4:	014001c4 	movi	r5,7
8110e5f8:	2901dc16 	blt	r5,r4,8110ed6c <___svfprintf_internal_r+0x1bfc>
8110e5fc:	42000204 	addi	r8,r8,8
8110e600:	d9003317 	ldw	r4,204(sp)
8110e604:	8121883a 	add	r16,r16,r4
8110e608:	2085c83a 	sub	r2,r4,r2
8110e60c:	8461c83a 	sub	r16,r16,r17
8110e610:	1400010e 	bge	r2,r16,8110e618 <___svfprintf_internal_r+0x14a8>
8110e614:	1021883a 	mov	r16,r2
8110e618:	04000a0e 	bge	zero,r16,8110e644 <___svfprintf_internal_r+0x14d4>
8110e61c:	d9001f17 	ldw	r4,124(sp)
8110e620:	1c07883a 	add	r3,r3,r16
8110e624:	44400015 	stw	r17,0(r8)
8110e628:	21000044 	addi	r4,r4,1
8110e62c:	44000115 	stw	r16,4(r8)
8110e630:	d8c02015 	stw	r3,128(sp)
8110e634:	d9001f15 	stw	r4,124(sp)
8110e638:	014001c4 	movi	r5,7
8110e63c:	2901e616 	blt	r5,r4,8110edd8 <___svfprintf_internal_r+0x1c68>
8110e640:	42000204 	addi	r8,r8,8
8110e644:	8001f616 	blt	r16,zero,8110ee20 <___svfprintf_internal_r+0x1cb0>
8110e648:	1421c83a 	sub	r16,r2,r16
8110e64c:	043d1c0e 	bge	zero,r16,8110dac0 <__reset+0xfb0edac0>
8110e650:	04400404 	movi	r17,16
8110e654:	d8801f17 	ldw	r2,124(sp)
8110e658:	8c3edd0e 	bge	r17,r16,8110e1d0 <__reset+0xfb0ee1d0>
8110e65c:	016044b4 	movhi	r5,33042
8110e660:	2948dc84 	addi	r5,r5,9074
8110e664:	d9402b15 	stw	r5,172(sp)
8110e668:	058001c4 	movi	r22,7
8110e66c:	dd002c17 	ldw	r20,176(sp)
8110e670:	00000306 	br	8110e680 <___svfprintf_internal_r+0x1510>
8110e674:	42000204 	addi	r8,r8,8
8110e678:	843ffc04 	addi	r16,r16,-16
8110e67c:	8c3ed70e 	bge	r17,r16,8110e1dc <__reset+0xfb0ee1dc>
8110e680:	18c00404 	addi	r3,r3,16
8110e684:	10800044 	addi	r2,r2,1
8110e688:	45400015 	stw	r21,0(r8)
8110e68c:	44400115 	stw	r17,4(r8)
8110e690:	d8c02015 	stw	r3,128(sp)
8110e694:	d8801f15 	stw	r2,124(sp)
8110e698:	b0bff60e 	bge	r22,r2,8110e674 <__reset+0xfb0ee674>
8110e69c:	d9801e04 	addi	r6,sp,120
8110e6a0:	a00b883a 	mov	r5,r20
8110e6a4:	9809883a 	mov	r4,r19
8110e6a8:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e6ac:	103b951e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e6b0:	d8c02017 	ldw	r3,128(sp)
8110e6b4:	d8801f17 	ldw	r2,124(sp)
8110e6b8:	da000404 	addi	r8,sp,16
8110e6bc:	003fee06 	br	8110e678 <__reset+0xfb0ee678>
8110e6c0:	9088703a 	and	r4,r18,r2
8110e6c4:	203e8d1e 	bne	r4,zero,8110e0fc <__reset+0xfb0ee0fc>
8110e6c8:	dc401f17 	ldw	r17,124(sp)
8110e6cc:	40800115 	stw	r2,4(r8)
8110e6d0:	44000015 	stw	r16,0(r8)
8110e6d4:	8c400044 	addi	r17,r17,1
8110e6d8:	d8c02015 	stw	r3,128(sp)
8110e6dc:	dc401f15 	stw	r17,124(sp)
8110e6e0:	008001c4 	movi	r2,7
8110e6e4:	147f7f16 	blt	r2,r17,8110e4e4 <__reset+0xfb0ee4e4>
8110e6e8:	45800204 	addi	r22,r8,8
8110e6ec:	003eac06 	br	8110e1a0 <__reset+0xfb0ee1a0>
8110e6f0:	d9402c17 	ldw	r5,176(sp)
8110e6f4:	d9801e04 	addi	r6,sp,120
8110e6f8:	9809883a 	mov	r4,r19
8110e6fc:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e700:	103b801e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e704:	d8c02017 	ldw	r3,128(sp)
8110e708:	dc401f17 	ldw	r17,124(sp)
8110e70c:	da000404 	addi	r8,sp,16
8110e710:	003e8406 	br	8110e124 <__reset+0xfb0ee124>
8110e714:	d9402c17 	ldw	r5,176(sp)
8110e718:	d9801e04 	addi	r6,sp,120
8110e71c:	9809883a 	mov	r4,r19
8110e720:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e724:	103b771e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e728:	d8c02017 	ldw	r3,128(sp)
8110e72c:	dc401f17 	ldw	r17,124(sp)
8110e730:	dd800404 	addi	r22,sp,16
8110e734:	003e8606 	br	8110e150 <__reset+0xfb0ee150>
8110e738:	0029883a 	mov	r20,zero
8110e73c:	a5000c04 	addi	r20,r20,48
8110e740:	dc001dc4 	addi	r16,sp,119
8110e744:	dd001dc5 	stb	r20,119(sp)
8110e748:	003f3806 	br	8110e42c <__reset+0xfb0ee42c>
8110e74c:	d9402c17 	ldw	r5,176(sp)
8110e750:	d9801e04 	addi	r6,sp,120
8110e754:	9809883a 	mov	r4,r19
8110e758:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e75c:	103b691e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e760:	d8c02017 	ldw	r3,128(sp)
8110e764:	da000404 	addi	r8,sp,16
8110e768:	003c9506 	br	8110d9c0 <__reset+0xfb0ed9c0>
8110e76c:	d9003617 	ldw	r4,216(sp)
8110e770:	d9403717 	ldw	r5,220(sp)
8110e774:	da003e15 	stw	r8,248(sp)
8110e778:	1115ba40 	call	81115ba4 <__fpclassifyd>
8110e77c:	da003e17 	ldw	r8,248(sp)
8110e780:	1000bd1e 	bne	r2,zero,8110ea78 <___svfprintf_internal_r+0x1908>
8110e784:	008011c4 	movi	r2,71
8110e788:	14411e0e 	bge	r2,r17,8110ec04 <___svfprintf_internal_r+0x1a94>
8110e78c:	042044b4 	movhi	r16,33042
8110e790:	8408cf04 	addi	r16,r16,9020
8110e794:	00c000c4 	movi	r3,3
8110e798:	00bfdfc4 	movi	r2,-129
8110e79c:	d8c02a15 	stw	r3,168(sp)
8110e7a0:	90a4703a 	and	r18,r18,r2
8110e7a4:	df002783 	ldbu	fp,158(sp)
8110e7a8:	d8c02e15 	stw	r3,184(sp)
8110e7ac:	d8002915 	stw	zero,164(sp)
8110e7b0:	d8003215 	stw	zero,200(sp)
8110e7b4:	003c1c06 	br	8110d828 <__reset+0xfb0ed828>
8110e7b8:	9080100c 	andi	r2,r18,64
8110e7bc:	d8002785 	stb	zero,158(sp)
8110e7c0:	10009426 	beq	r2,zero,8110ea14 <___svfprintf_internal_r+0x18a4>
8110e7c4:	d8c02d17 	ldw	r3,180(sp)
8110e7c8:	d9002917 	ldw	r4,164(sp)
8110e7cc:	002d883a 	mov	r22,zero
8110e7d0:	18800104 	addi	r2,r3,4
8110e7d4:	1d00000b 	ldhu	r20,0(r3)
8110e7d8:	203ec10e 	bge	r4,zero,8110e2e0 <__reset+0xfb0ee2e0>
8110e7dc:	a586b03a 	or	r3,r20,r22
8110e7e0:	d8802d15 	stw	r2,180(sp)
8110e7e4:	183ec21e 	bne	r3,zero,8110e2f0 <__reset+0xfb0ee2f0>
8110e7e8:	0039883a 	mov	fp,zero
8110e7ec:	0005883a 	mov	r2,zero
8110e7f0:	003db806 	br	8110ded4 <__reset+0xfb0eded4>
8110e7f4:	d8802d17 	ldw	r2,180(sp)
8110e7f8:	d8c02d17 	ldw	r3,180(sp)
8110e7fc:	d9002d17 	ldw	r4,180(sp)
8110e800:	10800017 	ldw	r2,0(r2)
8110e804:	18c00117 	ldw	r3,4(r3)
8110e808:	21000204 	addi	r4,r4,8
8110e80c:	d8803615 	stw	r2,216(sp)
8110e810:	d8c03715 	stw	r3,220(sp)
8110e814:	d9002d15 	stw	r4,180(sp)
8110e818:	003b8206 	br	8110d624 <__reset+0xfb0ed624>
8110e81c:	9080100c 	andi	r2,r18,64
8110e820:	10010726 	beq	r2,zero,8110ec40 <___svfprintf_internal_r+0x1ad0>
8110e824:	d8c02d17 	ldw	r3,180(sp)
8110e828:	1d00000f 	ldh	r20,0(r3)
8110e82c:	18c00104 	addi	r3,r3,4
8110e830:	d8c02d15 	stw	r3,180(sp)
8110e834:	a02dd7fa 	srai	r22,r20,31
8110e838:	b005883a 	mov	r2,r22
8110e83c:	003ba206 	br	8110d6c8 <__reset+0xfb0ed6c8>
8110e840:	9080100c 	andi	r2,r18,64
8110e844:	10010526 	beq	r2,zero,8110ec5c <___svfprintf_internal_r+0x1aec>
8110e848:	d9002d17 	ldw	r4,180(sp)
8110e84c:	002d883a 	mov	r22,zero
8110e850:	2500000b 	ldhu	r20,0(r4)
8110e854:	21000104 	addi	r4,r4,4
8110e858:	d9002d15 	stw	r4,180(sp)
8110e85c:	003cfe06 	br	8110dc58 <__reset+0xfb0edc58>
8110e860:	bc400007 	ldb	r17,0(r23)
8110e864:	003a9606 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110e868:	9080040c 	andi	r2,r18,16
8110e86c:	10010126 	beq	r2,zero,8110ec74 <___svfprintf_internal_r+0x1b04>
8110e870:	d9402d17 	ldw	r5,180(sp)
8110e874:	d8c02f17 	ldw	r3,188(sp)
8110e878:	28800017 	ldw	r2,0(r5)
8110e87c:	29400104 	addi	r5,r5,4
8110e880:	d9402d15 	stw	r5,180(sp)
8110e884:	10c00015 	stw	r3,0(r2)
8110e888:	003a6406 	br	8110d21c <__reset+0xfb0ed21c>
8110e88c:	d9002917 	ldw	r4,164(sp)
8110e890:	d8002785 	stb	zero,158(sp)
8110e894:	203d8d16 	blt	r4,zero,8110decc <__reset+0xfb0edecc>
8110e898:	00bfdfc4 	movi	r2,-129
8110e89c:	90a4703a 	and	r18,r18,r2
8110e8a0:	003b0506 	br	8110d4b8 <__reset+0xfb0ed4b8>
8110e8a4:	016044b4 	movhi	r5,33042
8110e8a8:	2948dc84 	addi	r5,r5,9074
8110e8ac:	d9402b15 	stw	r5,172(sp)
8110e8b0:	d9402b17 	ldw	r5,172(sp)
8110e8b4:	1c47883a 	add	r3,r3,r17
8110e8b8:	10800044 	addi	r2,r2,1
8110e8bc:	41400015 	stw	r5,0(r8)
8110e8c0:	44400115 	stw	r17,4(r8)
8110e8c4:	d8c02015 	stw	r3,128(sp)
8110e8c8:	d8801f15 	stw	r2,124(sp)
8110e8cc:	010001c4 	movi	r4,7
8110e8d0:	20bf3016 	blt	r4,r2,8110e594 <__reset+0xfb0ee594>
8110e8d4:	42000204 	addi	r8,r8,8
8110e8d8:	003f3506 	br	8110e5b0 <__reset+0xfb0ee5b0>
8110e8dc:	012044b4 	movhi	r4,33042
8110e8e0:	2108dc84 	addi	r4,r4,9074
8110e8e4:	d9002b15 	stw	r4,172(sp)
8110e8e8:	003c5e06 	br	8110da64 <__reset+0xfb0eda64>
8110e8ec:	d9402c17 	ldw	r5,176(sp)
8110e8f0:	d9801e04 	addi	r6,sp,120
8110e8f4:	9809883a 	mov	r4,r19
8110e8f8:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e8fc:	103b011e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e900:	d8c02017 	ldw	r3,128(sp)
8110e904:	da000404 	addi	r8,sp,16
8110e908:	003d9306 	br	8110df58 <__reset+0xfb0edf58>
8110e90c:	d8801f17 	ldw	r2,124(sp)
8110e910:	016044b4 	movhi	r5,33042
8110e914:	01000044 	movi	r4,1
8110e918:	18c00044 	addi	r3,r3,1
8110e91c:	10800044 	addi	r2,r2,1
8110e920:	2948dc04 	addi	r5,r5,9072
8110e924:	41000115 	stw	r4,4(r8)
8110e928:	41400015 	stw	r5,0(r8)
8110e92c:	d8c02015 	stw	r3,128(sp)
8110e930:	d8801f15 	stw	r2,124(sp)
8110e934:	010001c4 	movi	r4,7
8110e938:	2080b516 	blt	r4,r2,8110ec10 <___svfprintf_internal_r+0x1aa0>
8110e93c:	42000204 	addi	r8,r8,8
8110e940:	8800041e 	bne	r17,zero,8110e954 <___svfprintf_internal_r+0x17e4>
8110e944:	d8803317 	ldw	r2,204(sp)
8110e948:	1000021e 	bne	r2,zero,8110e954 <___svfprintf_internal_r+0x17e4>
8110e94c:	9080004c 	andi	r2,r18,1
8110e950:	103c5b26 	beq	r2,zero,8110dac0 <__reset+0xfb0edac0>
8110e954:	d9003817 	ldw	r4,224(sp)
8110e958:	d8801f17 	ldw	r2,124(sp)
8110e95c:	d9403417 	ldw	r5,208(sp)
8110e960:	20c7883a 	add	r3,r4,r3
8110e964:	10800044 	addi	r2,r2,1
8110e968:	41000115 	stw	r4,4(r8)
8110e96c:	41400015 	stw	r5,0(r8)
8110e970:	d8c02015 	stw	r3,128(sp)
8110e974:	d8801f15 	stw	r2,124(sp)
8110e978:	010001c4 	movi	r4,7
8110e97c:	20818016 	blt	r4,r2,8110ef80 <___svfprintf_internal_r+0x1e10>
8110e980:	42000204 	addi	r8,r8,8
8110e984:	0463c83a 	sub	r17,zero,r17
8110e988:	0440cb0e 	bge	zero,r17,8110ecb8 <___svfprintf_internal_r+0x1b48>
8110e98c:	05800404 	movi	r22,16
8110e990:	b440e80e 	bge	r22,r17,8110ed34 <___svfprintf_internal_r+0x1bc4>
8110e994:	016044b4 	movhi	r5,33042
8110e998:	2948dc84 	addi	r5,r5,9074
8110e99c:	d9402b15 	stw	r5,172(sp)
8110e9a0:	070001c4 	movi	fp,7
8110e9a4:	dd002c17 	ldw	r20,176(sp)
8110e9a8:	00000306 	br	8110e9b8 <___svfprintf_internal_r+0x1848>
8110e9ac:	42000204 	addi	r8,r8,8
8110e9b0:	8c7ffc04 	addi	r17,r17,-16
8110e9b4:	b440e20e 	bge	r22,r17,8110ed40 <___svfprintf_internal_r+0x1bd0>
8110e9b8:	18c00404 	addi	r3,r3,16
8110e9bc:	10800044 	addi	r2,r2,1
8110e9c0:	45400015 	stw	r21,0(r8)
8110e9c4:	45800115 	stw	r22,4(r8)
8110e9c8:	d8c02015 	stw	r3,128(sp)
8110e9cc:	d8801f15 	stw	r2,124(sp)
8110e9d0:	e0bff60e 	bge	fp,r2,8110e9ac <__reset+0xfb0ee9ac>
8110e9d4:	d9801e04 	addi	r6,sp,120
8110e9d8:	a00b883a 	mov	r5,r20
8110e9dc:	9809883a 	mov	r4,r19
8110e9e0:	1115d8c0 	call	81115d8c <__ssprint_r>
8110e9e4:	103ac71e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110e9e8:	d8c02017 	ldw	r3,128(sp)
8110e9ec:	d8801f17 	ldw	r2,124(sp)
8110e9f0:	da000404 	addi	r8,sp,16
8110e9f4:	003fee06 	br	8110e9b0 <__reset+0xfb0ee9b0>
8110e9f8:	d8c02d17 	ldw	r3,180(sp)
8110e9fc:	d9002917 	ldw	r4,164(sp)
8110ea00:	002d883a 	mov	r22,zero
8110ea04:	18800104 	addi	r2,r3,4
8110ea08:	1d000017 	ldw	r20,0(r3)
8110ea0c:	203e7d0e 	bge	r4,zero,8110e404 <__reset+0xfb0ee404>
8110ea10:	003eda06 	br	8110e57c <__reset+0xfb0ee57c>
8110ea14:	d9402d17 	ldw	r5,180(sp)
8110ea18:	d8c02917 	ldw	r3,164(sp)
8110ea1c:	002d883a 	mov	r22,zero
8110ea20:	28800104 	addi	r2,r5,4
8110ea24:	2d000017 	ldw	r20,0(r5)
8110ea28:	183e2d0e 	bge	r3,zero,8110e2e0 <__reset+0xfb0ee2e0>
8110ea2c:	003f6b06 	br	8110e7dc <__reset+0xfb0ee7dc>
8110ea30:	d8c02d15 	stw	r3,180(sp)
8110ea34:	0039883a 	mov	fp,zero
8110ea38:	003ed206 	br	8110e584 <__reset+0xfb0ee584>
8110ea3c:	bc400043 	ldbu	r17,1(r23)
8110ea40:	94800814 	ori	r18,r18,32
8110ea44:	bdc00044 	addi	r23,r23,1
8110ea48:	8c403fcc 	andi	r17,r17,255
8110ea4c:	8c40201c 	xori	r17,r17,128
8110ea50:	8c7fe004 	addi	r17,r17,-128
8110ea54:	003a1a06 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110ea58:	d9402c17 	ldw	r5,176(sp)
8110ea5c:	d9801e04 	addi	r6,sp,120
8110ea60:	9809883a 	mov	r4,r19
8110ea64:	1115d8c0 	call	81115d8c <__ssprint_r>
8110ea68:	103aa61e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110ea6c:	d8c02017 	ldw	r3,128(sp)
8110ea70:	da000404 	addi	r8,sp,16
8110ea74:	003d4a06 	br	8110dfa0 <__reset+0xfb0edfa0>
8110ea78:	d9002917 	ldw	r4,164(sp)
8110ea7c:	05bff7c4 	movi	r22,-33
8110ea80:	00bfffc4 	movi	r2,-1
8110ea84:	8dac703a 	and	r22,r17,r22
8110ea88:	20806a26 	beq	r4,r2,8110ec34 <___svfprintf_internal_r+0x1ac4>
8110ea8c:	008011c4 	movi	r2,71
8110ea90:	b0813726 	beq	r22,r2,8110ef70 <___svfprintf_internal_r+0x1e00>
8110ea94:	d9003717 	ldw	r4,220(sp)
8110ea98:	90c04014 	ori	r3,r18,256
8110ea9c:	d8c02b15 	stw	r3,172(sp)
8110eaa0:	20015d16 	blt	r4,zero,8110f018 <___svfprintf_internal_r+0x1ea8>
8110eaa4:	dd003717 	ldw	r20,220(sp)
8110eaa8:	d8002a05 	stb	zero,168(sp)
8110eaac:	00801984 	movi	r2,102
8110eab0:	88814026 	beq	r17,r2,8110efb4 <___svfprintf_internal_r+0x1e44>
8110eab4:	00801184 	movi	r2,70
8110eab8:	88817126 	beq	r17,r2,8110f080 <___svfprintf_internal_r+0x1f10>
8110eabc:	00801144 	movi	r2,69
8110eac0:	b0816226 	beq	r22,r2,8110f04c <___svfprintf_internal_r+0x1edc>
8110eac4:	d8c02917 	ldw	r3,164(sp)
8110eac8:	d8802104 	addi	r2,sp,132
8110eacc:	d8800315 	stw	r2,12(sp)
8110ead0:	d9403617 	ldw	r5,216(sp)
8110ead4:	d8802504 	addi	r2,sp,148
8110ead8:	d8800215 	stw	r2,8(sp)
8110eadc:	d8802604 	addi	r2,sp,152
8110eae0:	d8c00015 	stw	r3,0(sp)
8110eae4:	d8800115 	stw	r2,4(sp)
8110eae8:	01c00084 	movi	r7,2
8110eaec:	a00d883a 	mov	r6,r20
8110eaf0:	9809883a 	mov	r4,r19
8110eaf4:	d8c03d15 	stw	r3,244(sp)
8110eaf8:	da003e15 	stw	r8,248(sp)
8110eafc:	1111a200 	call	81111a20 <_dtoa_r>
8110eb00:	1021883a 	mov	r16,r2
8110eb04:	008019c4 	movi	r2,103
8110eb08:	d8c03d17 	ldw	r3,244(sp)
8110eb0c:	da003e17 	ldw	r8,248(sp)
8110eb10:	8880e726 	beq	r17,r2,8110eeb0 <___svfprintf_internal_r+0x1d40>
8110eb14:	008011c4 	movi	r2,71
8110eb18:	8880d426 	beq	r17,r2,8110ee6c <___svfprintf_internal_r+0x1cfc>
8110eb1c:	80f9883a 	add	fp,r16,r3
8110eb20:	d9003617 	ldw	r4,216(sp)
8110eb24:	000d883a 	mov	r6,zero
8110eb28:	000f883a 	mov	r7,zero
8110eb2c:	a00b883a 	mov	r5,r20
8110eb30:	da003e15 	stw	r8,248(sp)
8110eb34:	111ace80 	call	8111ace8 <__eqdf2>
8110eb38:	da003e17 	ldw	r8,248(sp)
8110eb3c:	1000e426 	beq	r2,zero,8110eed0 <___svfprintf_internal_r+0x1d60>
8110eb40:	d8802117 	ldw	r2,132(sp)
8110eb44:	1700062e 	bgeu	r2,fp,8110eb60 <___svfprintf_internal_r+0x19f0>
8110eb48:	01000c04 	movi	r4,48
8110eb4c:	10c00044 	addi	r3,r2,1
8110eb50:	d8c02115 	stw	r3,132(sp)
8110eb54:	11000005 	stb	r4,0(r2)
8110eb58:	d8802117 	ldw	r2,132(sp)
8110eb5c:	173ffb36 	bltu	r2,fp,8110eb4c <__reset+0xfb0eeb4c>
8110eb60:	1405c83a 	sub	r2,r2,r16
8110eb64:	d8803315 	stw	r2,204(sp)
8110eb68:	008011c4 	movi	r2,71
8110eb6c:	b080c526 	beq	r22,r2,8110ee84 <___svfprintf_internal_r+0x1d14>
8110eb70:	00801944 	movi	r2,101
8110eb74:	1441d90e 	bge	r2,r17,8110f2dc <___svfprintf_internal_r+0x216c>
8110eb78:	d8c02617 	ldw	r3,152(sp)
8110eb7c:	00801984 	movi	r2,102
8110eb80:	d8c03215 	stw	r3,200(sp)
8110eb84:	88813426 	beq	r17,r2,8110f058 <___svfprintf_internal_r+0x1ee8>
8110eb88:	d8c03217 	ldw	r3,200(sp)
8110eb8c:	d9003317 	ldw	r4,204(sp)
8110eb90:	19012516 	blt	r3,r4,8110f028 <___svfprintf_internal_r+0x1eb8>
8110eb94:	9480004c 	andi	r18,r18,1
8110eb98:	9001841e 	bne	r18,zero,8110f1ac <___svfprintf_internal_r+0x203c>
8110eb9c:	1805883a 	mov	r2,r3
8110eba0:	1801cc16 	blt	r3,zero,8110f2d4 <___svfprintf_internal_r+0x2164>
8110eba4:	d8c03217 	ldw	r3,200(sp)
8110eba8:	044019c4 	movi	r17,103
8110ebac:	d8c02e15 	stw	r3,184(sp)
8110ebb0:	df002a07 	ldb	fp,168(sp)
8110ebb4:	e000a61e 	bne	fp,zero,8110ee50 <___svfprintf_internal_r+0x1ce0>
8110ebb8:	df002783 	ldbu	fp,158(sp)
8110ebbc:	d8802a15 	stw	r2,168(sp)
8110ebc0:	dc802b17 	ldw	r18,172(sp)
8110ebc4:	d8002915 	stw	zero,164(sp)
8110ebc8:	003b1706 	br	8110d828 <__reset+0xfb0ed828>
8110ebcc:	042044b4 	movhi	r16,33042
8110ebd0:	8408cc04 	addi	r16,r16,9008
8110ebd4:	003aa606 	br	8110d670 <__reset+0xfb0ed670>
8110ebd8:	d9003917 	ldw	r4,228(sp)
8110ebdc:	04001004 	movi	r16,64
8110ebe0:	800b883a 	mov	r5,r16
8110ebe4:	110c1c80 	call	8110c1c8 <_malloc_r>
8110ebe8:	d9002c17 	ldw	r4,176(sp)
8110ebec:	20800015 	stw	r2,0(r4)
8110ebf0:	20800415 	stw	r2,16(r4)
8110ebf4:	1001cb26 	beq	r2,zero,8110f324 <___svfprintf_internal_r+0x21b4>
8110ebf8:	d8802c17 	ldw	r2,176(sp)
8110ebfc:	14000515 	stw	r16,20(r2)
8110ec00:	00397606 	br	8110d1dc <__reset+0xfb0ed1dc>
8110ec04:	042044b4 	movhi	r16,33042
8110ec08:	8408ce04 	addi	r16,r16,9016
8110ec0c:	003ee106 	br	8110e794 <__reset+0xfb0ee794>
8110ec10:	d9402c17 	ldw	r5,176(sp)
8110ec14:	d9801e04 	addi	r6,sp,120
8110ec18:	9809883a 	mov	r4,r19
8110ec1c:	1115d8c0 	call	81115d8c <__ssprint_r>
8110ec20:	103a381e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110ec24:	dc402617 	ldw	r17,152(sp)
8110ec28:	d8c02017 	ldw	r3,128(sp)
8110ec2c:	da000404 	addi	r8,sp,16
8110ec30:	003f4306 	br	8110e940 <__reset+0xfb0ee940>
8110ec34:	01400184 	movi	r5,6
8110ec38:	d9402915 	stw	r5,164(sp)
8110ec3c:	003f9506 	br	8110ea94 <__reset+0xfb0eea94>
8110ec40:	d9002d17 	ldw	r4,180(sp)
8110ec44:	25000017 	ldw	r20,0(r4)
8110ec48:	21000104 	addi	r4,r4,4
8110ec4c:	d9002d15 	stw	r4,180(sp)
8110ec50:	a02dd7fa 	srai	r22,r20,31
8110ec54:	b005883a 	mov	r2,r22
8110ec58:	003a9b06 	br	8110d6c8 <__reset+0xfb0ed6c8>
8110ec5c:	d9402d17 	ldw	r5,180(sp)
8110ec60:	002d883a 	mov	r22,zero
8110ec64:	2d000017 	ldw	r20,0(r5)
8110ec68:	29400104 	addi	r5,r5,4
8110ec6c:	d9402d15 	stw	r5,180(sp)
8110ec70:	003bf906 	br	8110dc58 <__reset+0xfb0edc58>
8110ec74:	9480100c 	andi	r18,r18,64
8110ec78:	90006e26 	beq	r18,zero,8110ee34 <___svfprintf_internal_r+0x1cc4>
8110ec7c:	d9002d17 	ldw	r4,180(sp)
8110ec80:	d9402f17 	ldw	r5,188(sp)
8110ec84:	20800017 	ldw	r2,0(r4)
8110ec88:	21000104 	addi	r4,r4,4
8110ec8c:	d9002d15 	stw	r4,180(sp)
8110ec90:	1140000d 	sth	r5,0(r2)
8110ec94:	00396106 	br	8110d21c <__reset+0xfb0ed21c>
8110ec98:	d9402c17 	ldw	r5,176(sp)
8110ec9c:	d9801e04 	addi	r6,sp,120
8110eca0:	9809883a 	mov	r4,r19
8110eca4:	1115d8c0 	call	81115d8c <__ssprint_r>
8110eca8:	103a161e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110ecac:	d8c02017 	ldw	r3,128(sp)
8110ecb0:	d8801f17 	ldw	r2,124(sp)
8110ecb4:	da000404 	addi	r8,sp,16
8110ecb8:	d9403317 	ldw	r5,204(sp)
8110ecbc:	10800044 	addi	r2,r2,1
8110ecc0:	44000015 	stw	r16,0(r8)
8110ecc4:	28c7883a 	add	r3,r5,r3
8110ecc8:	003b7706 	br	8110daa8 <__reset+0xfb0edaa8>
8110eccc:	8009883a 	mov	r4,r16
8110ecd0:	da003e15 	stw	r8,248(sp)
8110ecd4:	1115cf40 	call	81115cf4 <strlen>
8110ecd8:	d8802e15 	stw	r2,184(sp)
8110ecdc:	da003e17 	ldw	r8,248(sp)
8110ece0:	103c280e 	bge	r2,zero,8110dd84 <__reset+0xfb0edd84>
8110ece4:	0005883a 	mov	r2,zero
8110ece8:	003c2606 	br	8110dd84 <__reset+0xfb0edd84>
8110ecec:	00bfffc4 	movi	r2,-1
8110ecf0:	003a0906 	br	8110d518 <__reset+0xfb0ed518>
8110ecf4:	012044b4 	movhi	r4,33042
8110ecf8:	2108e084 	addi	r4,r4,9090
8110ecfc:	d9003515 	stw	r4,212(sp)
8110ed00:	003b0606 	br	8110d91c <__reset+0xfb0ed91c>
8110ed04:	013fffc4 	movi	r4,-1
8110ed08:	003a2706 	br	8110d5a8 <__reset+0xfb0ed5a8>
8110ed0c:	d9402c17 	ldw	r5,176(sp)
8110ed10:	d9801e04 	addi	r6,sp,120
8110ed14:	9809883a 	mov	r4,r19
8110ed18:	1115d8c0 	call	81115d8c <__ssprint_r>
8110ed1c:	1039f91e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110ed20:	d8c02017 	ldw	r3,128(sp)
8110ed24:	da000404 	addi	r8,sp,16
8110ed28:	003d8406 	br	8110e33c <__reset+0xfb0ee33c>
8110ed2c:	0023883a 	mov	r17,zero
8110ed30:	003d8306 	br	8110e340 <__reset+0xfb0ee340>
8110ed34:	012044b4 	movhi	r4,33042
8110ed38:	2108dc84 	addi	r4,r4,9074
8110ed3c:	d9002b15 	stw	r4,172(sp)
8110ed40:	d9002b17 	ldw	r4,172(sp)
8110ed44:	1c47883a 	add	r3,r3,r17
8110ed48:	10800044 	addi	r2,r2,1
8110ed4c:	41000015 	stw	r4,0(r8)
8110ed50:	44400115 	stw	r17,4(r8)
8110ed54:	d8c02015 	stw	r3,128(sp)
8110ed58:	d8801f15 	stw	r2,124(sp)
8110ed5c:	010001c4 	movi	r4,7
8110ed60:	20bfcd16 	blt	r4,r2,8110ec98 <__reset+0xfb0eec98>
8110ed64:	42000204 	addi	r8,r8,8
8110ed68:	003fd306 	br	8110ecb8 <__reset+0xfb0eecb8>
8110ed6c:	d9402c17 	ldw	r5,176(sp)
8110ed70:	d9801e04 	addi	r6,sp,120
8110ed74:	9809883a 	mov	r4,r19
8110ed78:	1115d8c0 	call	81115d8c <__ssprint_r>
8110ed7c:	1039e11e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110ed80:	d8802617 	ldw	r2,152(sp)
8110ed84:	d8c02017 	ldw	r3,128(sp)
8110ed88:	da000404 	addi	r8,sp,16
8110ed8c:	003e1c06 	br	8110e600 <__reset+0xfb0ee600>
8110ed90:	d8802917 	ldw	r2,164(sp)
8110ed94:	00c00184 	movi	r3,6
8110ed98:	1880012e 	bgeu	r3,r2,8110eda0 <___svfprintf_internal_r+0x1c30>
8110ed9c:	1805883a 	mov	r2,r3
8110eda0:	d8802e15 	stw	r2,184(sp)
8110eda4:	1000f316 	blt	r2,zero,8110f174 <___svfprintf_internal_r+0x2004>
8110eda8:	042044b4 	movhi	r16,33042
8110edac:	d8802a15 	stw	r2,168(sp)
8110edb0:	dd002d15 	stw	r20,180(sp)
8110edb4:	d8002915 	stw	zero,164(sp)
8110edb8:	d8003215 	stw	zero,200(sp)
8110edbc:	8408da04 	addi	r16,r16,9064
8110edc0:	0039883a 	mov	fp,zero
8110edc4:	003a9f06 	br	8110d844 <__reset+0xfb0ed844>
8110edc8:	012044b4 	movhi	r4,33042
8110edcc:	2108e084 	addi	r4,r4,9090
8110edd0:	d9003515 	stw	r4,212(sp)
8110edd4:	003b5f06 	br	8110db54 <__reset+0xfb0edb54>
8110edd8:	d9402c17 	ldw	r5,176(sp)
8110eddc:	d9801e04 	addi	r6,sp,120
8110ede0:	9809883a 	mov	r4,r19
8110ede4:	1115d8c0 	call	81115d8c <__ssprint_r>
8110ede8:	1039c61e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110edec:	d8802617 	ldw	r2,152(sp)
8110edf0:	d9403317 	ldw	r5,204(sp)
8110edf4:	d8c02017 	ldw	r3,128(sp)
8110edf8:	da000404 	addi	r8,sp,16
8110edfc:	2885c83a 	sub	r2,r5,r2
8110ee00:	003e1006 	br	8110e644 <__reset+0xfb0ee644>
8110ee04:	00800044 	movi	r2,1
8110ee08:	10803fcc 	andi	r2,r2,255
8110ee0c:	00c00044 	movi	r3,1
8110ee10:	10fa3526 	beq	r2,r3,8110d6e8 <__reset+0xfb0ed6e8>
8110ee14:	00c00084 	movi	r3,2
8110ee18:	10fb9e26 	beq	r2,r3,8110dc94 <__reset+0xfb0edc94>
8110ee1c:	003a6406 	br	8110d7b0 <__reset+0xfb0ed7b0>
8110ee20:	0021883a 	mov	r16,zero
8110ee24:	003e0806 	br	8110e648 <__reset+0xfb0ee648>
8110ee28:	07000b44 	movi	fp,45
8110ee2c:	df002785 	stb	fp,158(sp)
8110ee30:	003a0b06 	br	8110d660 <__reset+0xfb0ed660>
8110ee34:	d8c02d17 	ldw	r3,180(sp)
8110ee38:	d9002f17 	ldw	r4,188(sp)
8110ee3c:	18800017 	ldw	r2,0(r3)
8110ee40:	18c00104 	addi	r3,r3,4
8110ee44:	d8c02d15 	stw	r3,180(sp)
8110ee48:	11000015 	stw	r4,0(r2)
8110ee4c:	0038f306 	br	8110d21c <__reset+0xfb0ed21c>
8110ee50:	00c00b44 	movi	r3,45
8110ee54:	d8c02785 	stb	r3,158(sp)
8110ee58:	d8802a15 	stw	r2,168(sp)
8110ee5c:	dc802b17 	ldw	r18,172(sp)
8110ee60:	d8002915 	stw	zero,164(sp)
8110ee64:	07000b44 	movi	fp,45
8110ee68:	003a7306 	br	8110d838 <__reset+0xfb0ed838>
8110ee6c:	9080004c 	andi	r2,r18,1
8110ee70:	1000941e 	bne	r2,zero,8110f0c4 <___svfprintf_internal_r+0x1f54>
8110ee74:	d8802117 	ldw	r2,132(sp)
8110ee78:	1405c83a 	sub	r2,r2,r16
8110ee7c:	d8803315 	stw	r2,204(sp)
8110ee80:	b441161e 	bne	r22,r17,8110f2dc <___svfprintf_internal_r+0x216c>
8110ee84:	dd802617 	ldw	r22,152(sp)
8110ee88:	00bfff44 	movi	r2,-3
8110ee8c:	b0801a16 	blt	r22,r2,8110eef8 <___svfprintf_internal_r+0x1d88>
8110ee90:	d9402917 	ldw	r5,164(sp)
8110ee94:	2d801816 	blt	r5,r22,8110eef8 <___svfprintf_internal_r+0x1d88>
8110ee98:	dd803215 	stw	r22,200(sp)
8110ee9c:	003f3a06 	br	8110eb88 <__reset+0xfb0eeb88>
8110eea0:	1025883a 	mov	r18,r2
8110eea4:	0039883a 	mov	fp,zero
8110eea8:	00800084 	movi	r2,2
8110eeac:	003fd606 	br	8110ee08 <__reset+0xfb0eee08>
8110eeb0:	9080004c 	andi	r2,r18,1
8110eeb4:	103f191e 	bne	r2,zero,8110eb1c <__reset+0xfb0eeb1c>
8110eeb8:	d8802117 	ldw	r2,132(sp)
8110eebc:	003f2806 	br	8110eb60 <__reset+0xfb0eeb60>
8110eec0:	012044b4 	movhi	r4,33042
8110eec4:	2108dc84 	addi	r4,r4,9074
8110eec8:	d9002b15 	stw	r4,172(sp)
8110eecc:	003c7c06 	br	8110e0c0 <__reset+0xfb0ee0c0>
8110eed0:	e005883a 	mov	r2,fp
8110eed4:	003f2206 	br	8110eb60 <__reset+0xfb0eeb60>
8110eed8:	d9402917 	ldw	r5,164(sp)
8110eedc:	df002783 	ldbu	fp,158(sp)
8110eee0:	dd002d15 	stw	r20,180(sp)
8110eee4:	d9402a15 	stw	r5,168(sp)
8110eee8:	d9402e15 	stw	r5,184(sp)
8110eeec:	d8002915 	stw	zero,164(sp)
8110eef0:	d8003215 	stw	zero,200(sp)
8110eef4:	003a4c06 	br	8110d828 <__reset+0xfb0ed828>
8110eef8:	8c7fff84 	addi	r17,r17,-2
8110eefc:	b5bfffc4 	addi	r22,r22,-1
8110ef00:	dd802615 	stw	r22,152(sp)
8110ef04:	dc4022c5 	stb	r17,139(sp)
8110ef08:	b000c316 	blt	r22,zero,8110f218 <___svfprintf_internal_r+0x20a8>
8110ef0c:	00800ac4 	movi	r2,43
8110ef10:	d8802305 	stb	r2,140(sp)
8110ef14:	00800244 	movi	r2,9
8110ef18:	15806e16 	blt	r2,r22,8110f0d4 <___svfprintf_internal_r+0x1f64>
8110ef1c:	00800c04 	movi	r2,48
8110ef20:	b5800c04 	addi	r22,r22,48
8110ef24:	d8802345 	stb	r2,141(sp)
8110ef28:	dd802385 	stb	r22,142(sp)
8110ef2c:	d88023c4 	addi	r2,sp,143
8110ef30:	df0022c4 	addi	fp,sp,139
8110ef34:	d8c03317 	ldw	r3,204(sp)
8110ef38:	1739c83a 	sub	fp,r2,fp
8110ef3c:	d9003317 	ldw	r4,204(sp)
8110ef40:	e0c7883a 	add	r3,fp,r3
8110ef44:	df003b15 	stw	fp,236(sp)
8110ef48:	d8c02e15 	stw	r3,184(sp)
8110ef4c:	00800044 	movi	r2,1
8110ef50:	1100b70e 	bge	r2,r4,8110f230 <___svfprintf_internal_r+0x20c0>
8110ef54:	d8c02e17 	ldw	r3,184(sp)
8110ef58:	18c00044 	addi	r3,r3,1
8110ef5c:	d8c02e15 	stw	r3,184(sp)
8110ef60:	1805883a 	mov	r2,r3
8110ef64:	1800b016 	blt	r3,zero,8110f228 <___svfprintf_internal_r+0x20b8>
8110ef68:	d8003215 	stw	zero,200(sp)
8110ef6c:	003f1006 	br	8110ebb0 <__reset+0xfb0eebb0>
8110ef70:	d8802917 	ldw	r2,164(sp)
8110ef74:	103ec71e 	bne	r2,zero,8110ea94 <__reset+0xfb0eea94>
8110ef78:	dc002915 	stw	r16,164(sp)
8110ef7c:	003ec506 	br	8110ea94 <__reset+0xfb0eea94>
8110ef80:	d9402c17 	ldw	r5,176(sp)
8110ef84:	d9801e04 	addi	r6,sp,120
8110ef88:	9809883a 	mov	r4,r19
8110ef8c:	1115d8c0 	call	81115d8c <__ssprint_r>
8110ef90:	10395c1e 	bne	r2,zero,8110d504 <__reset+0xfb0ed504>
8110ef94:	dc402617 	ldw	r17,152(sp)
8110ef98:	d8c02017 	ldw	r3,128(sp)
8110ef9c:	d8801f17 	ldw	r2,124(sp)
8110efa0:	da000404 	addi	r8,sp,16
8110efa4:	003e7706 	br	8110e984 <__reset+0xfb0ee984>
8110efa8:	582f883a 	mov	r23,r11
8110efac:	d8002915 	stw	zero,164(sp)
8110efb0:	0038c406 	br	8110d2c4 <__reset+0xfb0ed2c4>
8110efb4:	d8c02917 	ldw	r3,164(sp)
8110efb8:	d8802104 	addi	r2,sp,132
8110efbc:	d8800315 	stw	r2,12(sp)
8110efc0:	d9403617 	ldw	r5,216(sp)
8110efc4:	d8802504 	addi	r2,sp,148
8110efc8:	d8800215 	stw	r2,8(sp)
8110efcc:	d8802604 	addi	r2,sp,152
8110efd0:	d8c00015 	stw	r3,0(sp)
8110efd4:	9809883a 	mov	r4,r19
8110efd8:	d8800115 	stw	r2,4(sp)
8110efdc:	01c000c4 	movi	r7,3
8110efe0:	a00d883a 	mov	r6,r20
8110efe4:	da003e15 	stw	r8,248(sp)
8110efe8:	1111a200 	call	81111a20 <_dtoa_r>
8110efec:	d9002917 	ldw	r4,164(sp)
8110eff0:	da003e17 	ldw	r8,248(sp)
8110eff4:	1021883a 	mov	r16,r2
8110eff8:	1139883a 	add	fp,r2,r4
8110effc:	2007883a 	mov	r3,r4
8110f000:	81000007 	ldb	r4,0(r16)
8110f004:	00800c04 	movi	r2,48
8110f008:	20806f26 	beq	r4,r2,8110f1c8 <___svfprintf_internal_r+0x2058>
8110f00c:	d8c02617 	ldw	r3,152(sp)
8110f010:	e0f9883a 	add	fp,fp,r3
8110f014:	003ec206 	br	8110eb20 <__reset+0xfb0eeb20>
8110f018:	00c00b44 	movi	r3,45
8110f01c:	2520003c 	xorhi	r20,r4,32768
8110f020:	d8c02a05 	stb	r3,168(sp)
8110f024:	003ea106 	br	8110eaac <__reset+0xfb0eeaac>
8110f028:	d8c03217 	ldw	r3,200(sp)
8110f02c:	00c0890e 	bge	zero,r3,8110f254 <___svfprintf_internal_r+0x20e4>
8110f030:	00800044 	movi	r2,1
8110f034:	d9003317 	ldw	r4,204(sp)
8110f038:	1105883a 	add	r2,r2,r4
8110f03c:	d8802e15 	stw	r2,184(sp)
8110f040:	10005f16 	blt	r2,zero,8110f1c0 <___svfprintf_internal_r+0x2050>
8110f044:	044019c4 	movi	r17,103
8110f048:	003ed906 	br	8110ebb0 <__reset+0xfb0eebb0>
8110f04c:	d9002917 	ldw	r4,164(sp)
8110f050:	20c00044 	addi	r3,r4,1
8110f054:	003e9c06 	br	8110eac8 <__reset+0xfb0eeac8>
8110f058:	d9002917 	ldw	r4,164(sp)
8110f05c:	00c0680e 	bge	zero,r3,8110f200 <___svfprintf_internal_r+0x2090>
8110f060:	2000461e 	bne	r4,zero,8110f17c <___svfprintf_internal_r+0x200c>
8110f064:	9480004c 	andi	r18,r18,1
8110f068:	9000441e 	bne	r18,zero,8110f17c <___svfprintf_internal_r+0x200c>
8110f06c:	1805883a 	mov	r2,r3
8110f070:	1800a016 	blt	r3,zero,8110f2f4 <___svfprintf_internal_r+0x2184>
8110f074:	d8c03217 	ldw	r3,200(sp)
8110f078:	d8c02e15 	stw	r3,184(sp)
8110f07c:	003ecc06 	br	8110ebb0 <__reset+0xfb0eebb0>
8110f080:	d9402917 	ldw	r5,164(sp)
8110f084:	d8802104 	addi	r2,sp,132
8110f088:	d8800315 	stw	r2,12(sp)
8110f08c:	d9400015 	stw	r5,0(sp)
8110f090:	d8802504 	addi	r2,sp,148
8110f094:	d9403617 	ldw	r5,216(sp)
8110f098:	d8800215 	stw	r2,8(sp)
8110f09c:	d8802604 	addi	r2,sp,152
8110f0a0:	d8800115 	stw	r2,4(sp)
8110f0a4:	01c000c4 	movi	r7,3
8110f0a8:	a00d883a 	mov	r6,r20
8110f0ac:	9809883a 	mov	r4,r19
8110f0b0:	da003e15 	stw	r8,248(sp)
8110f0b4:	1111a200 	call	81111a20 <_dtoa_r>
8110f0b8:	d8c02917 	ldw	r3,164(sp)
8110f0bc:	da003e17 	ldw	r8,248(sp)
8110f0c0:	1021883a 	mov	r16,r2
8110f0c4:	00801184 	movi	r2,70
8110f0c8:	80f9883a 	add	fp,r16,r3
8110f0cc:	88bfcc26 	beq	r17,r2,8110f000 <__reset+0xfb0ef000>
8110f0d0:	003e9306 	br	8110eb20 <__reset+0xfb0eeb20>
8110f0d4:	df0022c4 	addi	fp,sp,139
8110f0d8:	dc002915 	stw	r16,164(sp)
8110f0dc:	9829883a 	mov	r20,r19
8110f0e0:	e021883a 	mov	r16,fp
8110f0e4:	4027883a 	mov	r19,r8
8110f0e8:	b009883a 	mov	r4,r22
8110f0ec:	01400284 	movi	r5,10
8110f0f0:	1119a240 	call	81119a24 <__modsi3>
8110f0f4:	10800c04 	addi	r2,r2,48
8110f0f8:	843fffc4 	addi	r16,r16,-1
8110f0fc:	b009883a 	mov	r4,r22
8110f100:	01400284 	movi	r5,10
8110f104:	80800005 	stb	r2,0(r16)
8110f108:	11199a00 	call	811199a0 <__divsi3>
8110f10c:	102d883a 	mov	r22,r2
8110f110:	00800244 	movi	r2,9
8110f114:	15bff416 	blt	r2,r22,8110f0e8 <__reset+0xfb0ef0e8>
8110f118:	9811883a 	mov	r8,r19
8110f11c:	b0800c04 	addi	r2,r22,48
8110f120:	a027883a 	mov	r19,r20
8110f124:	8029883a 	mov	r20,r16
8110f128:	a17fffc4 	addi	r5,r20,-1
8110f12c:	a0bfffc5 	stb	r2,-1(r20)
8110f130:	dc002917 	ldw	r16,164(sp)
8110f134:	2f00752e 	bgeu	r5,fp,8110f30c <___svfprintf_internal_r+0x219c>
8110f138:	d9c02384 	addi	r7,sp,142
8110f13c:	3d0fc83a 	sub	r7,r7,r20
8110f140:	d9002344 	addi	r4,sp,141
8110f144:	e1cf883a 	add	r7,fp,r7
8110f148:	00000106 	br	8110f150 <___svfprintf_internal_r+0x1fe0>
8110f14c:	28800003 	ldbu	r2,0(r5)
8110f150:	20800005 	stb	r2,0(r4)
8110f154:	21000044 	addi	r4,r4,1
8110f158:	29400044 	addi	r5,r5,1
8110f15c:	21fffb1e 	bne	r4,r7,8110f14c <__reset+0xfb0ef14c>
8110f160:	d8802304 	addi	r2,sp,140
8110f164:	1505c83a 	sub	r2,r2,r20
8110f168:	d8c02344 	addi	r3,sp,141
8110f16c:	1885883a 	add	r2,r3,r2
8110f170:	003f7006 	br	8110ef34 <__reset+0xfb0eef34>
8110f174:	0005883a 	mov	r2,zero
8110f178:	003f0b06 	br	8110eda8 <__reset+0xfb0eeda8>
8110f17c:	d9002917 	ldw	r4,164(sp)
8110f180:	d8c03217 	ldw	r3,200(sp)
8110f184:	20800044 	addi	r2,r4,1
8110f188:	1885883a 	add	r2,r3,r2
8110f18c:	d8802e15 	stw	r2,184(sp)
8110f190:	103e870e 	bge	r2,zero,8110ebb0 <__reset+0xfb0eebb0>
8110f194:	0005883a 	mov	r2,zero
8110f198:	003e8506 	br	8110ebb0 <__reset+0xfb0eebb0>
8110f19c:	012044b4 	movhi	r4,33042
8110f1a0:	2108dc84 	addi	r4,r4,9074
8110f1a4:	d9002b15 	stw	r4,172(sp)
8110f1a8:	003cc506 	br	8110e4c0 <__reset+0xfb0ee4c0>
8110f1ac:	d8c03217 	ldw	r3,200(sp)
8110f1b0:	18c00044 	addi	r3,r3,1
8110f1b4:	d8c02e15 	stw	r3,184(sp)
8110f1b8:	1805883a 	mov	r2,r3
8110f1bc:	183fa10e 	bge	r3,zero,8110f044 <__reset+0xfb0ef044>
8110f1c0:	0005883a 	mov	r2,zero
8110f1c4:	003f9f06 	br	8110f044 <__reset+0xfb0ef044>
8110f1c8:	d9003617 	ldw	r4,216(sp)
8110f1cc:	000d883a 	mov	r6,zero
8110f1d0:	000f883a 	mov	r7,zero
8110f1d4:	a00b883a 	mov	r5,r20
8110f1d8:	d8c03d15 	stw	r3,244(sp)
8110f1dc:	da003e15 	stw	r8,248(sp)
8110f1e0:	111ace80 	call	8111ace8 <__eqdf2>
8110f1e4:	d8c03d17 	ldw	r3,244(sp)
8110f1e8:	da003e17 	ldw	r8,248(sp)
8110f1ec:	103f8726 	beq	r2,zero,8110f00c <__reset+0xfb0ef00c>
8110f1f0:	00800044 	movi	r2,1
8110f1f4:	10c7c83a 	sub	r3,r2,r3
8110f1f8:	d8c02615 	stw	r3,152(sp)
8110f1fc:	003f8406 	br	8110f010 <__reset+0xfb0ef010>
8110f200:	20000e1e 	bne	r4,zero,8110f23c <___svfprintf_internal_r+0x20cc>
8110f204:	9480004c 	andi	r18,r18,1
8110f208:	90000c1e 	bne	r18,zero,8110f23c <___svfprintf_internal_r+0x20cc>
8110f20c:	00800044 	movi	r2,1
8110f210:	d8802e15 	stw	r2,184(sp)
8110f214:	003e6606 	br	8110ebb0 <__reset+0xfb0eebb0>
8110f218:	00800b44 	movi	r2,45
8110f21c:	05adc83a 	sub	r22,zero,r22
8110f220:	d8802305 	stb	r2,140(sp)
8110f224:	003f3b06 	br	8110ef14 <__reset+0xfb0eef14>
8110f228:	0005883a 	mov	r2,zero
8110f22c:	003f4e06 	br	8110ef68 <__reset+0xfb0eef68>
8110f230:	90a4703a 	and	r18,r18,r2
8110f234:	903f4a26 	beq	r18,zero,8110ef60 <__reset+0xfb0eef60>
8110f238:	003f4606 	br	8110ef54 <__reset+0xfb0eef54>
8110f23c:	d8c02917 	ldw	r3,164(sp)
8110f240:	18c00084 	addi	r3,r3,2
8110f244:	d8c02e15 	stw	r3,184(sp)
8110f248:	1805883a 	mov	r2,r3
8110f24c:	183e580e 	bge	r3,zero,8110ebb0 <__reset+0xfb0eebb0>
8110f250:	003fd006 	br	8110f194 <__reset+0xfb0ef194>
8110f254:	00800084 	movi	r2,2
8110f258:	10c5c83a 	sub	r2,r2,r3
8110f25c:	003f7506 	br	8110f034 <__reset+0xfb0ef034>
8110f260:	d8802d17 	ldw	r2,180(sp)
8110f264:	d9002d17 	ldw	r4,180(sp)
8110f268:	bc400043 	ldbu	r17,1(r23)
8110f26c:	10800017 	ldw	r2,0(r2)
8110f270:	582f883a 	mov	r23,r11
8110f274:	d8802915 	stw	r2,164(sp)
8110f278:	20800104 	addi	r2,r4,4
8110f27c:	d9002917 	ldw	r4,164(sp)
8110f280:	d8802d15 	stw	r2,180(sp)
8110f284:	203df00e 	bge	r4,zero,8110ea48 <__reset+0xfb0eea48>
8110f288:	8c403fcc 	andi	r17,r17,255
8110f28c:	00bfffc4 	movi	r2,-1
8110f290:	8c40201c 	xori	r17,r17,128
8110f294:	d8802915 	stw	r2,164(sp)
8110f298:	8c7fe004 	addi	r17,r17,-128
8110f29c:	00380806 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110f2a0:	9080004c 	andi	r2,r18,1
8110f2a4:	0039883a 	mov	fp,zero
8110f2a8:	10000726 	beq	r2,zero,8110f2c8 <___svfprintf_internal_r+0x2158>
8110f2ac:	d8c02817 	ldw	r3,160(sp)
8110f2b0:	dc001dc4 	addi	r16,sp,119
8110f2b4:	00800c04 	movi	r2,48
8110f2b8:	1c07c83a 	sub	r3,r3,r16
8110f2bc:	d8801dc5 	stb	r2,119(sp)
8110f2c0:	d8c02e15 	stw	r3,184(sp)
8110f2c4:	00395206 	br	8110d810 <__reset+0xfb0ed810>
8110f2c8:	d8002e15 	stw	zero,184(sp)
8110f2cc:	dc001e04 	addi	r16,sp,120
8110f2d0:	00394f06 	br	8110d810 <__reset+0xfb0ed810>
8110f2d4:	0005883a 	mov	r2,zero
8110f2d8:	003e3206 	br	8110eba4 <__reset+0xfb0eeba4>
8110f2dc:	dd802617 	ldw	r22,152(sp)
8110f2e0:	003f0606 	br	8110eefc <__reset+0xfb0eeefc>
8110f2e4:	d9c02785 	stb	r7,158(sp)
8110f2e8:	003a5106 	br	8110dc30 <__reset+0xfb0edc30>
8110f2ec:	d9c02785 	stb	r7,158(sp)
8110f2f0:	003a3706 	br	8110dbd0 <__reset+0xfb0edbd0>
8110f2f4:	0005883a 	mov	r2,zero
8110f2f8:	003f5e06 	br	8110f074 <__reset+0xfb0ef074>
8110f2fc:	d9c02785 	stb	r7,158(sp)
8110f300:	00391706 	br	8110d760 <__reset+0xfb0ed760>
8110f304:	d9c02785 	stb	r7,158(sp)
8110f308:	0038e606 	br	8110d6a4 <__reset+0xfb0ed6a4>
8110f30c:	d8802344 	addi	r2,sp,141
8110f310:	003f0806 	br	8110ef34 <__reset+0xfb0eef34>
8110f314:	d9c02785 	stb	r7,158(sp)
8110f318:	0038b706 	br	8110d5f8 <__reset+0xfb0ed5f8>
8110f31c:	d9c02785 	stb	r7,158(sp)
8110f320:	003adc06 	br	8110de94 <__reset+0xfb0ede94>
8110f324:	d9403917 	ldw	r5,228(sp)
8110f328:	00800304 	movi	r2,12
8110f32c:	28800015 	stw	r2,0(r5)
8110f330:	00bfffc4 	movi	r2,-1
8110f334:	00387806 	br	8110d518 <__reset+0xfb0ed518>
8110f338:	d9c02785 	stb	r7,158(sp)
8110f33c:	003abf06 	br	8110de3c <__reset+0xfb0ede3c>
8110f340:	d9c02785 	stb	r7,158(sp)
8110f344:	003a9b06 	br	8110ddb4 <__reset+0xfb0eddb4>

8110f348 <___vfprintf_internal_r>:
8110f348:	deffb804 	addi	sp,sp,-288
8110f34c:	dfc04715 	stw	ra,284(sp)
8110f350:	ddc04515 	stw	r23,276(sp)
8110f354:	dd404315 	stw	r21,268(sp)
8110f358:	d9002c15 	stw	r4,176(sp)
8110f35c:	282f883a 	mov	r23,r5
8110f360:	302b883a 	mov	r21,r6
8110f364:	d9c02d15 	stw	r7,180(sp)
8110f368:	df004615 	stw	fp,280(sp)
8110f36c:	dd804415 	stw	r22,272(sp)
8110f370:	dd004215 	stw	r20,264(sp)
8110f374:	dcc04115 	stw	r19,260(sp)
8110f378:	dc804015 	stw	r18,256(sp)
8110f37c:	dc403f15 	stw	r17,252(sp)
8110f380:	dc003e15 	stw	r16,248(sp)
8110f384:	11143140 	call	81114314 <_localeconv_r>
8110f388:	10800017 	ldw	r2,0(r2)
8110f38c:	1009883a 	mov	r4,r2
8110f390:	d8803415 	stw	r2,208(sp)
8110f394:	1115cf40 	call	81115cf4 <strlen>
8110f398:	d8803715 	stw	r2,220(sp)
8110f39c:	d8802c17 	ldw	r2,176(sp)
8110f3a0:	10000226 	beq	r2,zero,8110f3ac <___vfprintf_internal_r+0x64>
8110f3a4:	10800e17 	ldw	r2,56(r2)
8110f3a8:	1000f926 	beq	r2,zero,8110f790 <___vfprintf_internal_r+0x448>
8110f3ac:	b880030b 	ldhu	r2,12(r23)
8110f3b0:	10c8000c 	andi	r3,r2,8192
8110f3b4:	1800061e 	bne	r3,zero,8110f3d0 <___vfprintf_internal_r+0x88>
8110f3b8:	b9001917 	ldw	r4,100(r23)
8110f3bc:	00f7ffc4 	movi	r3,-8193
8110f3c0:	10880014 	ori	r2,r2,8192
8110f3c4:	20c6703a 	and	r3,r4,r3
8110f3c8:	b880030d 	sth	r2,12(r23)
8110f3cc:	b8c01915 	stw	r3,100(r23)
8110f3d0:	10c0020c 	andi	r3,r2,8
8110f3d4:	1800c126 	beq	r3,zero,8110f6dc <___vfprintf_internal_r+0x394>
8110f3d8:	b8c00417 	ldw	r3,16(r23)
8110f3dc:	1800bf26 	beq	r3,zero,8110f6dc <___vfprintf_internal_r+0x394>
8110f3e0:	1080068c 	andi	r2,r2,26
8110f3e4:	00c00284 	movi	r3,10
8110f3e8:	10c0c426 	beq	r2,r3,8110f6fc <___vfprintf_internal_r+0x3b4>
8110f3ec:	d8c00404 	addi	r3,sp,16
8110f3f0:	052044b4 	movhi	r20,33042
8110f3f4:	d9001e04 	addi	r4,sp,120
8110f3f8:	a508e484 	addi	r20,r20,9106
8110f3fc:	d8c01e15 	stw	r3,120(sp)
8110f400:	d8002015 	stw	zero,128(sp)
8110f404:	d8001f15 	stw	zero,124(sp)
8110f408:	d8003315 	stw	zero,204(sp)
8110f40c:	d8003615 	stw	zero,216(sp)
8110f410:	d8003815 	stw	zero,224(sp)
8110f414:	1811883a 	mov	r8,r3
8110f418:	d8003915 	stw	zero,228(sp)
8110f41c:	d8003a15 	stw	zero,232(sp)
8110f420:	d8002f15 	stw	zero,188(sp)
8110f424:	d9002815 	stw	r4,160(sp)
8110f428:	a8800007 	ldb	r2,0(r21)
8110f42c:	10027b26 	beq	r2,zero,8110fe1c <___vfprintf_internal_r+0xad4>
8110f430:	00c00944 	movi	r3,37
8110f434:	a821883a 	mov	r16,r21
8110f438:	10c0021e 	bne	r2,r3,8110f444 <___vfprintf_internal_r+0xfc>
8110f43c:	00001406 	br	8110f490 <___vfprintf_internal_r+0x148>
8110f440:	10c00326 	beq	r2,r3,8110f450 <___vfprintf_internal_r+0x108>
8110f444:	84000044 	addi	r16,r16,1
8110f448:	80800007 	ldb	r2,0(r16)
8110f44c:	103ffc1e 	bne	r2,zero,8110f440 <__reset+0xfb0ef440>
8110f450:	8563c83a 	sub	r17,r16,r21
8110f454:	88000e26 	beq	r17,zero,8110f490 <___vfprintf_internal_r+0x148>
8110f458:	d8c02017 	ldw	r3,128(sp)
8110f45c:	d8801f17 	ldw	r2,124(sp)
8110f460:	45400015 	stw	r21,0(r8)
8110f464:	1c47883a 	add	r3,r3,r17
8110f468:	10800044 	addi	r2,r2,1
8110f46c:	d8c02015 	stw	r3,128(sp)
8110f470:	44400115 	stw	r17,4(r8)
8110f474:	d8801f15 	stw	r2,124(sp)
8110f478:	00c001c4 	movi	r3,7
8110f47c:	1880a716 	blt	r3,r2,8110f71c <___vfprintf_internal_r+0x3d4>
8110f480:	42000204 	addi	r8,r8,8
8110f484:	d9402f17 	ldw	r5,188(sp)
8110f488:	2c4b883a 	add	r5,r5,r17
8110f48c:	d9402f15 	stw	r5,188(sp)
8110f490:	80800007 	ldb	r2,0(r16)
8110f494:	1000a826 	beq	r2,zero,8110f738 <___vfprintf_internal_r+0x3f0>
8110f498:	84400047 	ldb	r17,1(r16)
8110f49c:	00bfffc4 	movi	r2,-1
8110f4a0:	85400044 	addi	r21,r16,1
8110f4a4:	d8002785 	stb	zero,158(sp)
8110f4a8:	0007883a 	mov	r3,zero
8110f4ac:	000f883a 	mov	r7,zero
8110f4b0:	d8802915 	stw	r2,164(sp)
8110f4b4:	d8003115 	stw	zero,196(sp)
8110f4b8:	0025883a 	mov	r18,zero
8110f4bc:	01401604 	movi	r5,88
8110f4c0:	01800244 	movi	r6,9
8110f4c4:	02800a84 	movi	r10,42
8110f4c8:	02401b04 	movi	r9,108
8110f4cc:	ad400044 	addi	r21,r21,1
8110f4d0:	88bff804 	addi	r2,r17,-32
8110f4d4:	28830436 	bltu	r5,r2,811100e8 <___vfprintf_internal_r+0xda0>
8110f4d8:	100490ba 	slli	r2,r2,2
8110f4dc:	01204474 	movhi	r4,33041
8110f4e0:	213d3c04 	addi	r4,r4,-2832
8110f4e4:	1105883a 	add	r2,r2,r4
8110f4e8:	10800017 	ldw	r2,0(r2)
8110f4ec:	1000683a 	jmp	r2
8110f4f0:	81110008 	cmpgei	r4,r16,17408
8110f4f4:	811100e8 	cmpgeui	r4,r16,17411
8110f4f8:	811100e8 	cmpgeui	r4,r16,17411
8110f4fc:	81110028 	cmpgeui	r4,r16,17408
8110f500:	811100e8 	cmpgeui	r4,r16,17411
8110f504:	811100e8 	cmpgeui	r4,r16,17411
8110f508:	811100e8 	cmpgeui	r4,r16,17411
8110f50c:	811100e8 	cmpgeui	r4,r16,17411
8110f510:	811100e8 	cmpgeui	r4,r16,17411
8110f514:	811100e8 	cmpgeui	r4,r16,17411
8110f518:	8110f79c 	xori	r4,r16,17374
8110f51c:	8110ff44 	addi	r4,r16,17405
8110f520:	811100e8 	cmpgeui	r4,r16,17411
8110f524:	8110f664 	muli	r4,r16,17369
8110f528:	8110f7c4 	addi	r4,r16,17375
8110f52c:	811100e8 	cmpgeui	r4,r16,17411
8110f530:	8110f804 	addi	r4,r16,17376
8110f534:	8110f810 	cmplti	r4,r16,17376
8110f538:	8110f810 	cmplti	r4,r16,17376
8110f53c:	8110f810 	cmplti	r4,r16,17376
8110f540:	8110f810 	cmplti	r4,r16,17376
8110f544:	8110f810 	cmplti	r4,r16,17376
8110f548:	8110f810 	cmplti	r4,r16,17376
8110f54c:	8110f810 	cmplti	r4,r16,17376
8110f550:	8110f810 	cmplti	r4,r16,17376
8110f554:	8110f810 	cmplti	r4,r16,17376
8110f558:	811100e8 	cmpgeui	r4,r16,17411
8110f55c:	811100e8 	cmpgeui	r4,r16,17411
8110f560:	811100e8 	cmpgeui	r4,r16,17411
8110f564:	811100e8 	cmpgeui	r4,r16,17411
8110f568:	811100e8 	cmpgeui	r4,r16,17411
8110f56c:	811100e8 	cmpgeui	r4,r16,17411
8110f570:	811100e8 	cmpgeui	r4,r16,17411
8110f574:	811100e8 	cmpgeui	r4,r16,17411
8110f578:	811100e8 	cmpgeui	r4,r16,17411
8110f57c:	811100e8 	cmpgeui	r4,r16,17411
8110f580:	8110f844 	addi	r4,r16,17377
8110f584:	8110f900 	call	88110f90 <__reset+0x20f0f90>
8110f588:	811100e8 	cmpgeui	r4,r16,17411
8110f58c:	8110f900 	call	88110f90 <__reset+0x20f0f90>
8110f590:	811100e8 	cmpgeui	r4,r16,17411
8110f594:	811100e8 	cmpgeui	r4,r16,17411
8110f598:	811100e8 	cmpgeui	r4,r16,17411
8110f59c:	811100e8 	cmpgeui	r4,r16,17411
8110f5a0:	8110f9a0 	cmpeqi	r4,r16,17382
8110f5a4:	811100e8 	cmpgeui	r4,r16,17411
8110f5a8:	811100e8 	cmpgeui	r4,r16,17411
8110f5ac:	8110f9ac 	andhi	r4,r16,17382
8110f5b0:	811100e8 	cmpgeui	r4,r16,17411
8110f5b4:	811100e8 	cmpgeui	r4,r16,17411
8110f5b8:	811100e8 	cmpgeui	r4,r16,17411
8110f5bc:	811100e8 	cmpgeui	r4,r16,17411
8110f5c0:	811100e8 	cmpgeui	r4,r16,17411
8110f5c4:	8110fe24 	muli	r4,r16,17400
8110f5c8:	811100e8 	cmpgeui	r4,r16,17411
8110f5cc:	811100e8 	cmpgeui	r4,r16,17411
8110f5d0:	8110fe84 	addi	r4,r16,17402
8110f5d4:	811100e8 	cmpgeui	r4,r16,17411
8110f5d8:	811100e8 	cmpgeui	r4,r16,17411
8110f5dc:	811100e8 	cmpgeui	r4,r16,17411
8110f5e0:	811100e8 	cmpgeui	r4,r16,17411
8110f5e4:	811100e8 	cmpgeui	r4,r16,17411
8110f5e8:	811100e8 	cmpgeui	r4,r16,17411
8110f5ec:	811100e8 	cmpgeui	r4,r16,17411
8110f5f0:	811100e8 	cmpgeui	r4,r16,17411
8110f5f4:	811100e8 	cmpgeui	r4,r16,17411
8110f5f8:	811100e8 	cmpgeui	r4,r16,17411
8110f5fc:	81110094 	ori	r4,r16,17410
8110f600:	81110034 	orhi	r4,r16,17408
8110f604:	8110f900 	call	88110f90 <__reset+0x20f0f90>
8110f608:	8110f900 	call	88110f90 <__reset+0x20f0f90>
8110f60c:	8110f900 	call	88110f90 <__reset+0x20f0f90>
8110f610:	81110044 	addi	r4,r16,17409
8110f614:	81110034 	orhi	r4,r16,17408
8110f618:	811100e8 	cmpgeui	r4,r16,17411
8110f61c:	811100e8 	cmpgeui	r4,r16,17411
8110f620:	81110050 	cmplti	r4,r16,17409
8110f624:	811100e8 	cmpgeui	r4,r16,17411
8110f628:	81110060 	cmpeqi	r4,r16,17409
8110f62c:	8110ff34 	orhi	r4,r16,17404
8110f630:	8110f670 	cmpltui	r4,r16,17369
8110f634:	8110ff54 	ori	r4,r16,17405
8110f638:	811100e8 	cmpgeui	r4,r16,17411
8110f63c:	8110ff60 	cmpeqi	r4,r16,17405
8110f640:	811100e8 	cmpgeui	r4,r16,17411
8110f644:	8110ffbc 	xorhi	r4,r16,17406
8110f648:	811100e8 	cmpgeui	r4,r16,17411
8110f64c:	811100e8 	cmpgeui	r4,r16,17411
8110f650:	8110ffcc 	andi	r4,r16,17407
8110f654:	d9003117 	ldw	r4,196(sp)
8110f658:	d8802d15 	stw	r2,180(sp)
8110f65c:	0109c83a 	sub	r4,zero,r4
8110f660:	d9003115 	stw	r4,196(sp)
8110f664:	94800114 	ori	r18,r18,4
8110f668:	ac400007 	ldb	r17,0(r21)
8110f66c:	003f9706 	br	8110f4cc <__reset+0xfb0ef4cc>
8110f670:	00800c04 	movi	r2,48
8110f674:	d9002d17 	ldw	r4,180(sp)
8110f678:	d9402917 	ldw	r5,164(sp)
8110f67c:	d8802705 	stb	r2,156(sp)
8110f680:	00801e04 	movi	r2,120
8110f684:	d8802745 	stb	r2,157(sp)
8110f688:	d8002785 	stb	zero,158(sp)
8110f68c:	20c00104 	addi	r3,r4,4
8110f690:	24c00017 	ldw	r19,0(r4)
8110f694:	002d883a 	mov	r22,zero
8110f698:	90800094 	ori	r2,r18,2
8110f69c:	28029a16 	blt	r5,zero,81110108 <___vfprintf_internal_r+0xdc0>
8110f6a0:	00bfdfc4 	movi	r2,-129
8110f6a4:	90a4703a 	and	r18,r18,r2
8110f6a8:	d8c02d15 	stw	r3,180(sp)
8110f6ac:	94800094 	ori	r18,r18,2
8110f6b0:	9802871e 	bne	r19,zero,811100d0 <___vfprintf_internal_r+0xd88>
8110f6b4:	00a044b4 	movhi	r2,33042
8110f6b8:	1088d504 	addi	r2,r2,9044
8110f6bc:	d8803915 	stw	r2,228(sp)
8110f6c0:	04401e04 	movi	r17,120
8110f6c4:	d8802917 	ldw	r2,164(sp)
8110f6c8:	0039883a 	mov	fp,zero
8110f6cc:	1001e926 	beq	r2,zero,8110fe74 <___vfprintf_internal_r+0xb2c>
8110f6d0:	0027883a 	mov	r19,zero
8110f6d4:	002d883a 	mov	r22,zero
8110f6d8:	00020506 	br	8110fef0 <___vfprintf_internal_r+0xba8>
8110f6dc:	d9002c17 	ldw	r4,176(sp)
8110f6e0:	b80b883a 	mov	r5,r23
8110f6e4:	11116780 	call	81111678 <__swsetup_r>
8110f6e8:	1005ac1e 	bne	r2,zero,81110d9c <___vfprintf_internal_r+0x1a54>
8110f6ec:	b880030b 	ldhu	r2,12(r23)
8110f6f0:	00c00284 	movi	r3,10
8110f6f4:	1080068c 	andi	r2,r2,26
8110f6f8:	10ff3c1e 	bne	r2,r3,8110f3ec <__reset+0xfb0ef3ec>
8110f6fc:	b880038f 	ldh	r2,14(r23)
8110f700:	103f3a16 	blt	r2,zero,8110f3ec <__reset+0xfb0ef3ec>
8110f704:	d9c02d17 	ldw	r7,180(sp)
8110f708:	d9002c17 	ldw	r4,176(sp)
8110f70c:	a80d883a 	mov	r6,r21
8110f710:	b80b883a 	mov	r5,r23
8110f714:	111155c0 	call	8111155c <__sbprintf>
8110f718:	00001106 	br	8110f760 <___vfprintf_internal_r+0x418>
8110f71c:	d9002c17 	ldw	r4,176(sp)
8110f720:	d9801e04 	addi	r6,sp,120
8110f724:	b80b883a 	mov	r5,r23
8110f728:	11172940 	call	81117294 <__sprint_r>
8110f72c:	1000081e 	bne	r2,zero,8110f750 <___vfprintf_internal_r+0x408>
8110f730:	da000404 	addi	r8,sp,16
8110f734:	003f5306 	br	8110f484 <__reset+0xfb0ef484>
8110f738:	d8802017 	ldw	r2,128(sp)
8110f73c:	10000426 	beq	r2,zero,8110f750 <___vfprintf_internal_r+0x408>
8110f740:	d9002c17 	ldw	r4,176(sp)
8110f744:	d9801e04 	addi	r6,sp,120
8110f748:	b80b883a 	mov	r5,r23
8110f74c:	11172940 	call	81117294 <__sprint_r>
8110f750:	b880030b 	ldhu	r2,12(r23)
8110f754:	1080100c 	andi	r2,r2,64
8110f758:	1005901e 	bne	r2,zero,81110d9c <___vfprintf_internal_r+0x1a54>
8110f75c:	d8802f17 	ldw	r2,188(sp)
8110f760:	dfc04717 	ldw	ra,284(sp)
8110f764:	df004617 	ldw	fp,280(sp)
8110f768:	ddc04517 	ldw	r23,276(sp)
8110f76c:	dd804417 	ldw	r22,272(sp)
8110f770:	dd404317 	ldw	r21,268(sp)
8110f774:	dd004217 	ldw	r20,264(sp)
8110f778:	dcc04117 	ldw	r19,260(sp)
8110f77c:	dc804017 	ldw	r18,256(sp)
8110f780:	dc403f17 	ldw	r17,252(sp)
8110f784:	dc003e17 	ldw	r16,248(sp)
8110f788:	dec04804 	addi	sp,sp,288
8110f78c:	f800283a 	ret
8110f790:	d9002c17 	ldw	r4,176(sp)
8110f794:	11136a00 	call	811136a0 <__sinit>
8110f798:	003f0406 	br	8110f3ac <__reset+0xfb0ef3ac>
8110f79c:	d8802d17 	ldw	r2,180(sp)
8110f7a0:	d9002d17 	ldw	r4,180(sp)
8110f7a4:	10800017 	ldw	r2,0(r2)
8110f7a8:	d8803115 	stw	r2,196(sp)
8110f7ac:	20800104 	addi	r2,r4,4
8110f7b0:	d9003117 	ldw	r4,196(sp)
8110f7b4:	203fa716 	blt	r4,zero,8110f654 <__reset+0xfb0ef654>
8110f7b8:	d8802d15 	stw	r2,180(sp)
8110f7bc:	ac400007 	ldb	r17,0(r21)
8110f7c0:	003f4206 	br	8110f4cc <__reset+0xfb0ef4cc>
8110f7c4:	ac400007 	ldb	r17,0(r21)
8110f7c8:	aac00044 	addi	r11,r21,1
8110f7cc:	8a872826 	beq	r17,r10,81111470 <___vfprintf_internal_r+0x2128>
8110f7d0:	88bff404 	addi	r2,r17,-48
8110f7d4:	0009883a 	mov	r4,zero
8110f7d8:	30867d36 	bltu	r6,r2,811111d0 <___vfprintf_internal_r+0x1e88>
8110f7dc:	5c400007 	ldb	r17,0(r11)
8110f7e0:	210002a4 	muli	r4,r4,10
8110f7e4:	5d400044 	addi	r21,r11,1
8110f7e8:	a817883a 	mov	r11,r21
8110f7ec:	2089883a 	add	r4,r4,r2
8110f7f0:	88bff404 	addi	r2,r17,-48
8110f7f4:	30bff92e 	bgeu	r6,r2,8110f7dc <__reset+0xfb0ef7dc>
8110f7f8:	2005c916 	blt	r4,zero,81110f20 <___vfprintf_internal_r+0x1bd8>
8110f7fc:	d9002915 	stw	r4,164(sp)
8110f800:	003f3306 	br	8110f4d0 <__reset+0xfb0ef4d0>
8110f804:	94802014 	ori	r18,r18,128
8110f808:	ac400007 	ldb	r17,0(r21)
8110f80c:	003f2f06 	br	8110f4cc <__reset+0xfb0ef4cc>
8110f810:	a809883a 	mov	r4,r21
8110f814:	d8003115 	stw	zero,196(sp)
8110f818:	88bff404 	addi	r2,r17,-48
8110f81c:	0017883a 	mov	r11,zero
8110f820:	24400007 	ldb	r17,0(r4)
8110f824:	5ac002a4 	muli	r11,r11,10
8110f828:	ad400044 	addi	r21,r21,1
8110f82c:	a809883a 	mov	r4,r21
8110f830:	12d7883a 	add	r11,r2,r11
8110f834:	88bff404 	addi	r2,r17,-48
8110f838:	30bff92e 	bgeu	r6,r2,8110f820 <__reset+0xfb0ef820>
8110f83c:	dac03115 	stw	r11,196(sp)
8110f840:	003f2306 	br	8110f4d0 <__reset+0xfb0ef4d0>
8110f844:	18c03fcc 	andi	r3,r3,255
8110f848:	18072b1e 	bne	r3,zero,811114f8 <___vfprintf_internal_r+0x21b0>
8110f84c:	94800414 	ori	r18,r18,16
8110f850:	9080080c 	andi	r2,r18,32
8110f854:	10037b26 	beq	r2,zero,81110644 <___vfprintf_internal_r+0x12fc>
8110f858:	d9402d17 	ldw	r5,180(sp)
8110f85c:	28800117 	ldw	r2,4(r5)
8110f860:	2cc00017 	ldw	r19,0(r5)
8110f864:	29400204 	addi	r5,r5,8
8110f868:	d9402d15 	stw	r5,180(sp)
8110f86c:	102d883a 	mov	r22,r2
8110f870:	10044b16 	blt	r2,zero,811109a0 <___vfprintf_internal_r+0x1658>
8110f874:	d9402917 	ldw	r5,164(sp)
8110f878:	df002783 	ldbu	fp,158(sp)
8110f87c:	2803bc16 	blt	r5,zero,81110770 <___vfprintf_internal_r+0x1428>
8110f880:	00ffdfc4 	movi	r3,-129
8110f884:	9d84b03a 	or	r2,r19,r22
8110f888:	90e4703a 	and	r18,r18,r3
8110f88c:	10017726 	beq	r2,zero,8110fe6c <___vfprintf_internal_r+0xb24>
8110f890:	b0038326 	beq	r22,zero,811106a0 <___vfprintf_internal_r+0x1358>
8110f894:	dc402a15 	stw	r17,168(sp)
8110f898:	dc001e04 	addi	r16,sp,120
8110f89c:	b023883a 	mov	r17,r22
8110f8a0:	402d883a 	mov	r22,r8
8110f8a4:	9809883a 	mov	r4,r19
8110f8a8:	880b883a 	mov	r5,r17
8110f8ac:	01800284 	movi	r6,10
8110f8b0:	000f883a 	mov	r7,zero
8110f8b4:	11194680 	call	81119468 <__umoddi3>
8110f8b8:	10800c04 	addi	r2,r2,48
8110f8bc:	843fffc4 	addi	r16,r16,-1
8110f8c0:	9809883a 	mov	r4,r19
8110f8c4:	880b883a 	mov	r5,r17
8110f8c8:	80800005 	stb	r2,0(r16)
8110f8cc:	01800284 	movi	r6,10
8110f8d0:	000f883a 	mov	r7,zero
8110f8d4:	1118ef00 	call	81118ef0 <__udivdi3>
8110f8d8:	1027883a 	mov	r19,r2
8110f8dc:	10c4b03a 	or	r2,r2,r3
8110f8e0:	1823883a 	mov	r17,r3
8110f8e4:	103fef1e 	bne	r2,zero,8110f8a4 <__reset+0xfb0ef8a4>
8110f8e8:	d8c02817 	ldw	r3,160(sp)
8110f8ec:	dc402a17 	ldw	r17,168(sp)
8110f8f0:	b011883a 	mov	r8,r22
8110f8f4:	1c07c83a 	sub	r3,r3,r16
8110f8f8:	d8c02e15 	stw	r3,184(sp)
8110f8fc:	00005906 	br	8110fa64 <___vfprintf_internal_r+0x71c>
8110f900:	18c03fcc 	andi	r3,r3,255
8110f904:	1806fa1e 	bne	r3,zero,811114f0 <___vfprintf_internal_r+0x21a8>
8110f908:	9080020c 	andi	r2,r18,8
8110f90c:	10048a26 	beq	r2,zero,81110b38 <___vfprintf_internal_r+0x17f0>
8110f910:	d8c02d17 	ldw	r3,180(sp)
8110f914:	d9002d17 	ldw	r4,180(sp)
8110f918:	d9402d17 	ldw	r5,180(sp)
8110f91c:	18c00017 	ldw	r3,0(r3)
8110f920:	21000117 	ldw	r4,4(r4)
8110f924:	29400204 	addi	r5,r5,8
8110f928:	d8c03615 	stw	r3,216(sp)
8110f92c:	d9003815 	stw	r4,224(sp)
8110f930:	d9402d15 	stw	r5,180(sp)
8110f934:	d9003617 	ldw	r4,216(sp)
8110f938:	d9403817 	ldw	r5,224(sp)
8110f93c:	da003d15 	stw	r8,244(sp)
8110f940:	04000044 	movi	r16,1
8110f944:	1115ba40 	call	81115ba4 <__fpclassifyd>
8110f948:	da003d17 	ldw	r8,244(sp)
8110f94c:	14041f1e 	bne	r2,r16,811109cc <___vfprintf_internal_r+0x1684>
8110f950:	d9003617 	ldw	r4,216(sp)
8110f954:	d9403817 	ldw	r5,224(sp)
8110f958:	000d883a 	mov	r6,zero
8110f95c:	000f883a 	mov	r7,zero
8110f960:	111ae4c0 	call	8111ae4c <__ledf2>
8110f964:	da003d17 	ldw	r8,244(sp)
8110f968:	1005be16 	blt	r2,zero,81111064 <___vfprintf_internal_r+0x1d1c>
8110f96c:	df002783 	ldbu	fp,158(sp)
8110f970:	008011c4 	movi	r2,71
8110f974:	1445330e 	bge	r2,r17,81110e44 <___vfprintf_internal_r+0x1afc>
8110f978:	042044b4 	movhi	r16,33042
8110f97c:	8408cd04 	addi	r16,r16,9012
8110f980:	00c000c4 	movi	r3,3
8110f984:	00bfdfc4 	movi	r2,-129
8110f988:	d8c02a15 	stw	r3,168(sp)
8110f98c:	90a4703a 	and	r18,r18,r2
8110f990:	d8c02e15 	stw	r3,184(sp)
8110f994:	d8002915 	stw	zero,164(sp)
8110f998:	d8003215 	stw	zero,200(sp)
8110f99c:	00003706 	br	8110fa7c <___vfprintf_internal_r+0x734>
8110f9a0:	94800214 	ori	r18,r18,8
8110f9a4:	ac400007 	ldb	r17,0(r21)
8110f9a8:	003ec806 	br	8110f4cc <__reset+0xfb0ef4cc>
8110f9ac:	18c03fcc 	andi	r3,r3,255
8110f9b0:	1806db1e 	bne	r3,zero,81111520 <___vfprintf_internal_r+0x21d8>
8110f9b4:	94800414 	ori	r18,r18,16
8110f9b8:	9080080c 	andi	r2,r18,32
8110f9bc:	1002d826 	beq	r2,zero,81110520 <___vfprintf_internal_r+0x11d8>
8110f9c0:	d9402d17 	ldw	r5,180(sp)
8110f9c4:	d8c02917 	ldw	r3,164(sp)
8110f9c8:	d8002785 	stb	zero,158(sp)
8110f9cc:	28800204 	addi	r2,r5,8
8110f9d0:	2cc00017 	ldw	r19,0(r5)
8110f9d4:	2d800117 	ldw	r22,4(r5)
8110f9d8:	18048f16 	blt	r3,zero,81110c18 <___vfprintf_internal_r+0x18d0>
8110f9dc:	013fdfc4 	movi	r4,-129
8110f9e0:	9d86b03a 	or	r3,r19,r22
8110f9e4:	d8802d15 	stw	r2,180(sp)
8110f9e8:	9124703a 	and	r18,r18,r4
8110f9ec:	1802d91e 	bne	r3,zero,81110554 <___vfprintf_internal_r+0x120c>
8110f9f0:	d8c02917 	ldw	r3,164(sp)
8110f9f4:	0039883a 	mov	fp,zero
8110f9f8:	1805c326 	beq	r3,zero,81111108 <___vfprintf_internal_r+0x1dc0>
8110f9fc:	0027883a 	mov	r19,zero
8110fa00:	002d883a 	mov	r22,zero
8110fa04:	dc001e04 	addi	r16,sp,120
8110fa08:	9806d0fa 	srli	r3,r19,3
8110fa0c:	b008977a 	slli	r4,r22,29
8110fa10:	b02cd0fa 	srli	r22,r22,3
8110fa14:	9cc001cc 	andi	r19,r19,7
8110fa18:	98800c04 	addi	r2,r19,48
8110fa1c:	843fffc4 	addi	r16,r16,-1
8110fa20:	20e6b03a 	or	r19,r4,r3
8110fa24:	80800005 	stb	r2,0(r16)
8110fa28:	9d86b03a 	or	r3,r19,r22
8110fa2c:	183ff61e 	bne	r3,zero,8110fa08 <__reset+0xfb0efa08>
8110fa30:	90c0004c 	andi	r3,r18,1
8110fa34:	18013b26 	beq	r3,zero,8110ff24 <___vfprintf_internal_r+0xbdc>
8110fa38:	10803fcc 	andi	r2,r2,255
8110fa3c:	1080201c 	xori	r2,r2,128
8110fa40:	10bfe004 	addi	r2,r2,-128
8110fa44:	00c00c04 	movi	r3,48
8110fa48:	10c13626 	beq	r2,r3,8110ff24 <___vfprintf_internal_r+0xbdc>
8110fa4c:	80ffffc5 	stb	r3,-1(r16)
8110fa50:	d8c02817 	ldw	r3,160(sp)
8110fa54:	80bfffc4 	addi	r2,r16,-1
8110fa58:	1021883a 	mov	r16,r2
8110fa5c:	1887c83a 	sub	r3,r3,r2
8110fa60:	d8c02e15 	stw	r3,184(sp)
8110fa64:	d8802e17 	ldw	r2,184(sp)
8110fa68:	d9002917 	ldw	r4,164(sp)
8110fa6c:	1100010e 	bge	r2,r4,8110fa74 <___vfprintf_internal_r+0x72c>
8110fa70:	2005883a 	mov	r2,r4
8110fa74:	d8802a15 	stw	r2,168(sp)
8110fa78:	d8003215 	stw	zero,200(sp)
8110fa7c:	e7003fcc 	andi	fp,fp,255
8110fa80:	e700201c 	xori	fp,fp,128
8110fa84:	e73fe004 	addi	fp,fp,-128
8110fa88:	e0000326 	beq	fp,zero,8110fa98 <___vfprintf_internal_r+0x750>
8110fa8c:	d8c02a17 	ldw	r3,168(sp)
8110fa90:	18c00044 	addi	r3,r3,1
8110fa94:	d8c02a15 	stw	r3,168(sp)
8110fa98:	90c0008c 	andi	r3,r18,2
8110fa9c:	d8c02b15 	stw	r3,172(sp)
8110faa0:	18000326 	beq	r3,zero,8110fab0 <___vfprintf_internal_r+0x768>
8110faa4:	d8c02a17 	ldw	r3,168(sp)
8110faa8:	18c00084 	addi	r3,r3,2
8110faac:	d8c02a15 	stw	r3,168(sp)
8110fab0:	90c0210c 	andi	r3,r18,132
8110fab4:	d8c03015 	stw	r3,192(sp)
8110fab8:	1801a31e 	bne	r3,zero,81110148 <___vfprintf_internal_r+0xe00>
8110fabc:	d9003117 	ldw	r4,196(sp)
8110fac0:	d8c02a17 	ldw	r3,168(sp)
8110fac4:	20e7c83a 	sub	r19,r4,r3
8110fac8:	04c19f0e 	bge	zero,r19,81110148 <___vfprintf_internal_r+0xe00>
8110facc:	02400404 	movi	r9,16
8110fad0:	d8c02017 	ldw	r3,128(sp)
8110fad4:	d8801f17 	ldw	r2,124(sp)
8110fad8:	4cc50d0e 	bge	r9,r19,81110f10 <___vfprintf_internal_r+0x1bc8>
8110fadc:	016044b4 	movhi	r5,33042
8110fae0:	2948e884 	addi	r5,r5,9122
8110fae4:	dc403b15 	stw	r17,236(sp)
8110fae8:	d9403515 	stw	r5,212(sp)
8110faec:	9823883a 	mov	r17,r19
8110faf0:	482d883a 	mov	r22,r9
8110faf4:	9027883a 	mov	r19,r18
8110faf8:	070001c4 	movi	fp,7
8110fafc:	8025883a 	mov	r18,r16
8110fb00:	dc002c17 	ldw	r16,176(sp)
8110fb04:	00000306 	br	8110fb14 <___vfprintf_internal_r+0x7cc>
8110fb08:	8c7ffc04 	addi	r17,r17,-16
8110fb0c:	42000204 	addi	r8,r8,8
8110fb10:	b440130e 	bge	r22,r17,8110fb60 <___vfprintf_internal_r+0x818>
8110fb14:	012044b4 	movhi	r4,33042
8110fb18:	18c00404 	addi	r3,r3,16
8110fb1c:	10800044 	addi	r2,r2,1
8110fb20:	2108e884 	addi	r4,r4,9122
8110fb24:	41000015 	stw	r4,0(r8)
8110fb28:	45800115 	stw	r22,4(r8)
8110fb2c:	d8c02015 	stw	r3,128(sp)
8110fb30:	d8801f15 	stw	r2,124(sp)
8110fb34:	e0bff40e 	bge	fp,r2,8110fb08 <__reset+0xfb0efb08>
8110fb38:	d9801e04 	addi	r6,sp,120
8110fb3c:	b80b883a 	mov	r5,r23
8110fb40:	8009883a 	mov	r4,r16
8110fb44:	11172940 	call	81117294 <__sprint_r>
8110fb48:	103f011e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
8110fb4c:	8c7ffc04 	addi	r17,r17,-16
8110fb50:	d8c02017 	ldw	r3,128(sp)
8110fb54:	d8801f17 	ldw	r2,124(sp)
8110fb58:	da000404 	addi	r8,sp,16
8110fb5c:	b47fed16 	blt	r22,r17,8110fb14 <__reset+0xfb0efb14>
8110fb60:	9021883a 	mov	r16,r18
8110fb64:	9825883a 	mov	r18,r19
8110fb68:	8827883a 	mov	r19,r17
8110fb6c:	dc403b17 	ldw	r17,236(sp)
8110fb70:	d9403517 	ldw	r5,212(sp)
8110fb74:	98c7883a 	add	r3,r19,r3
8110fb78:	10800044 	addi	r2,r2,1
8110fb7c:	41400015 	stw	r5,0(r8)
8110fb80:	44c00115 	stw	r19,4(r8)
8110fb84:	d8c02015 	stw	r3,128(sp)
8110fb88:	d8801f15 	stw	r2,124(sp)
8110fb8c:	010001c4 	movi	r4,7
8110fb90:	2082a316 	blt	r4,r2,81110620 <___vfprintf_internal_r+0x12d8>
8110fb94:	df002787 	ldb	fp,158(sp)
8110fb98:	42000204 	addi	r8,r8,8
8110fb9c:	e0000c26 	beq	fp,zero,8110fbd0 <___vfprintf_internal_r+0x888>
8110fba0:	d8801f17 	ldw	r2,124(sp)
8110fba4:	d9002784 	addi	r4,sp,158
8110fba8:	18c00044 	addi	r3,r3,1
8110fbac:	10800044 	addi	r2,r2,1
8110fbb0:	41000015 	stw	r4,0(r8)
8110fbb4:	01000044 	movi	r4,1
8110fbb8:	41000115 	stw	r4,4(r8)
8110fbbc:	d8c02015 	stw	r3,128(sp)
8110fbc0:	d8801f15 	stw	r2,124(sp)
8110fbc4:	010001c4 	movi	r4,7
8110fbc8:	20823c16 	blt	r4,r2,811104bc <___vfprintf_internal_r+0x1174>
8110fbcc:	42000204 	addi	r8,r8,8
8110fbd0:	d8802b17 	ldw	r2,172(sp)
8110fbd4:	10000c26 	beq	r2,zero,8110fc08 <___vfprintf_internal_r+0x8c0>
8110fbd8:	d8801f17 	ldw	r2,124(sp)
8110fbdc:	d9002704 	addi	r4,sp,156
8110fbe0:	18c00084 	addi	r3,r3,2
8110fbe4:	10800044 	addi	r2,r2,1
8110fbe8:	41000015 	stw	r4,0(r8)
8110fbec:	01000084 	movi	r4,2
8110fbf0:	41000115 	stw	r4,4(r8)
8110fbf4:	d8c02015 	stw	r3,128(sp)
8110fbf8:	d8801f15 	stw	r2,124(sp)
8110fbfc:	010001c4 	movi	r4,7
8110fc00:	20823616 	blt	r4,r2,811104dc <___vfprintf_internal_r+0x1194>
8110fc04:	42000204 	addi	r8,r8,8
8110fc08:	d9003017 	ldw	r4,192(sp)
8110fc0c:	00802004 	movi	r2,128
8110fc10:	20819926 	beq	r4,r2,81110278 <___vfprintf_internal_r+0xf30>
8110fc14:	d9402917 	ldw	r5,164(sp)
8110fc18:	d8802e17 	ldw	r2,184(sp)
8110fc1c:	28adc83a 	sub	r22,r5,r2
8110fc20:	0580310e 	bge	zero,r22,8110fce8 <___vfprintf_internal_r+0x9a0>
8110fc24:	07000404 	movi	fp,16
8110fc28:	d8801f17 	ldw	r2,124(sp)
8110fc2c:	e584140e 	bge	fp,r22,81110c80 <___vfprintf_internal_r+0x1938>
8110fc30:	016044b4 	movhi	r5,33042
8110fc34:	2948e484 	addi	r5,r5,9106
8110fc38:	dc402915 	stw	r17,164(sp)
8110fc3c:	d9402b15 	stw	r5,172(sp)
8110fc40:	b023883a 	mov	r17,r22
8110fc44:	04c001c4 	movi	r19,7
8110fc48:	a82d883a 	mov	r22,r21
8110fc4c:	902b883a 	mov	r21,r18
8110fc50:	8025883a 	mov	r18,r16
8110fc54:	dc002c17 	ldw	r16,176(sp)
8110fc58:	00000306 	br	8110fc68 <___vfprintf_internal_r+0x920>
8110fc5c:	8c7ffc04 	addi	r17,r17,-16
8110fc60:	42000204 	addi	r8,r8,8
8110fc64:	e440110e 	bge	fp,r17,8110fcac <___vfprintf_internal_r+0x964>
8110fc68:	18c00404 	addi	r3,r3,16
8110fc6c:	10800044 	addi	r2,r2,1
8110fc70:	45000015 	stw	r20,0(r8)
8110fc74:	47000115 	stw	fp,4(r8)
8110fc78:	d8c02015 	stw	r3,128(sp)
8110fc7c:	d8801f15 	stw	r2,124(sp)
8110fc80:	98bff60e 	bge	r19,r2,8110fc5c <__reset+0xfb0efc5c>
8110fc84:	d9801e04 	addi	r6,sp,120
8110fc88:	b80b883a 	mov	r5,r23
8110fc8c:	8009883a 	mov	r4,r16
8110fc90:	11172940 	call	81117294 <__sprint_r>
8110fc94:	103eae1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
8110fc98:	8c7ffc04 	addi	r17,r17,-16
8110fc9c:	d8c02017 	ldw	r3,128(sp)
8110fca0:	d8801f17 	ldw	r2,124(sp)
8110fca4:	da000404 	addi	r8,sp,16
8110fca8:	e47fef16 	blt	fp,r17,8110fc68 <__reset+0xfb0efc68>
8110fcac:	9021883a 	mov	r16,r18
8110fcb0:	a825883a 	mov	r18,r21
8110fcb4:	b02b883a 	mov	r21,r22
8110fcb8:	882d883a 	mov	r22,r17
8110fcbc:	dc402917 	ldw	r17,164(sp)
8110fcc0:	d9002b17 	ldw	r4,172(sp)
8110fcc4:	1d87883a 	add	r3,r3,r22
8110fcc8:	10800044 	addi	r2,r2,1
8110fccc:	41000015 	stw	r4,0(r8)
8110fcd0:	45800115 	stw	r22,4(r8)
8110fcd4:	d8c02015 	stw	r3,128(sp)
8110fcd8:	d8801f15 	stw	r2,124(sp)
8110fcdc:	010001c4 	movi	r4,7
8110fce0:	2081ee16 	blt	r4,r2,8111049c <___vfprintf_internal_r+0x1154>
8110fce4:	42000204 	addi	r8,r8,8
8110fce8:	9080400c 	andi	r2,r18,256
8110fcec:	1001181e 	bne	r2,zero,81110150 <___vfprintf_internal_r+0xe08>
8110fcf0:	d9402e17 	ldw	r5,184(sp)
8110fcf4:	d8801f17 	ldw	r2,124(sp)
8110fcf8:	44000015 	stw	r16,0(r8)
8110fcfc:	1947883a 	add	r3,r3,r5
8110fd00:	10800044 	addi	r2,r2,1
8110fd04:	41400115 	stw	r5,4(r8)
8110fd08:	d8c02015 	stw	r3,128(sp)
8110fd0c:	d8801f15 	stw	r2,124(sp)
8110fd10:	010001c4 	movi	r4,7
8110fd14:	2081d316 	blt	r4,r2,81110464 <___vfprintf_internal_r+0x111c>
8110fd18:	42000204 	addi	r8,r8,8
8110fd1c:	9480010c 	andi	r18,r18,4
8110fd20:	90003226 	beq	r18,zero,8110fdec <___vfprintf_internal_r+0xaa4>
8110fd24:	d9403117 	ldw	r5,196(sp)
8110fd28:	d8802a17 	ldw	r2,168(sp)
8110fd2c:	28a1c83a 	sub	r16,r5,r2
8110fd30:	04002e0e 	bge	zero,r16,8110fdec <___vfprintf_internal_r+0xaa4>
8110fd34:	04400404 	movi	r17,16
8110fd38:	d8801f17 	ldw	r2,124(sp)
8110fd3c:	8c04a20e 	bge	r17,r16,81110fc8 <___vfprintf_internal_r+0x1c80>
8110fd40:	016044b4 	movhi	r5,33042
8110fd44:	2948e884 	addi	r5,r5,9122
8110fd48:	d9403515 	stw	r5,212(sp)
8110fd4c:	048001c4 	movi	r18,7
8110fd50:	dcc02c17 	ldw	r19,176(sp)
8110fd54:	00000306 	br	8110fd64 <___vfprintf_internal_r+0xa1c>
8110fd58:	843ffc04 	addi	r16,r16,-16
8110fd5c:	42000204 	addi	r8,r8,8
8110fd60:	8c00130e 	bge	r17,r16,8110fdb0 <___vfprintf_internal_r+0xa68>
8110fd64:	012044b4 	movhi	r4,33042
8110fd68:	18c00404 	addi	r3,r3,16
8110fd6c:	10800044 	addi	r2,r2,1
8110fd70:	2108e884 	addi	r4,r4,9122
8110fd74:	41000015 	stw	r4,0(r8)
8110fd78:	44400115 	stw	r17,4(r8)
8110fd7c:	d8c02015 	stw	r3,128(sp)
8110fd80:	d8801f15 	stw	r2,124(sp)
8110fd84:	90bff40e 	bge	r18,r2,8110fd58 <__reset+0xfb0efd58>
8110fd88:	d9801e04 	addi	r6,sp,120
8110fd8c:	b80b883a 	mov	r5,r23
8110fd90:	9809883a 	mov	r4,r19
8110fd94:	11172940 	call	81117294 <__sprint_r>
8110fd98:	103e6d1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
8110fd9c:	843ffc04 	addi	r16,r16,-16
8110fda0:	d8c02017 	ldw	r3,128(sp)
8110fda4:	d8801f17 	ldw	r2,124(sp)
8110fda8:	da000404 	addi	r8,sp,16
8110fdac:	8c3fed16 	blt	r17,r16,8110fd64 <__reset+0xfb0efd64>
8110fdb0:	d9403517 	ldw	r5,212(sp)
8110fdb4:	1c07883a 	add	r3,r3,r16
8110fdb8:	10800044 	addi	r2,r2,1
8110fdbc:	41400015 	stw	r5,0(r8)
8110fdc0:	44000115 	stw	r16,4(r8)
8110fdc4:	d8c02015 	stw	r3,128(sp)
8110fdc8:	d8801f15 	stw	r2,124(sp)
8110fdcc:	010001c4 	movi	r4,7
8110fdd0:	2080060e 	bge	r4,r2,8110fdec <___vfprintf_internal_r+0xaa4>
8110fdd4:	d9002c17 	ldw	r4,176(sp)
8110fdd8:	d9801e04 	addi	r6,sp,120
8110fddc:	b80b883a 	mov	r5,r23
8110fde0:	11172940 	call	81117294 <__sprint_r>
8110fde4:	103e5a1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
8110fde8:	d8c02017 	ldw	r3,128(sp)
8110fdec:	d8803117 	ldw	r2,196(sp)
8110fdf0:	d9002a17 	ldw	r4,168(sp)
8110fdf4:	1100010e 	bge	r2,r4,8110fdfc <___vfprintf_internal_r+0xab4>
8110fdf8:	2005883a 	mov	r2,r4
8110fdfc:	d9402f17 	ldw	r5,188(sp)
8110fe00:	288b883a 	add	r5,r5,r2
8110fe04:	d9402f15 	stw	r5,188(sp)
8110fe08:	18019e1e 	bne	r3,zero,81110484 <___vfprintf_internal_r+0x113c>
8110fe0c:	a8800007 	ldb	r2,0(r21)
8110fe10:	d8001f15 	stw	zero,124(sp)
8110fe14:	da000404 	addi	r8,sp,16
8110fe18:	103d851e 	bne	r2,zero,8110f430 <__reset+0xfb0ef430>
8110fe1c:	a821883a 	mov	r16,r21
8110fe20:	003d9b06 	br	8110f490 <__reset+0xfb0ef490>
8110fe24:	18c03fcc 	andi	r3,r3,255
8110fe28:	1805c11e 	bne	r3,zero,81111530 <___vfprintf_internal_r+0x21e8>
8110fe2c:	94800414 	ori	r18,r18,16
8110fe30:	9080080c 	andi	r2,r18,32
8110fe34:	10020c26 	beq	r2,zero,81110668 <___vfprintf_internal_r+0x1320>
8110fe38:	d8802d17 	ldw	r2,180(sp)
8110fe3c:	d9002917 	ldw	r4,164(sp)
8110fe40:	d8002785 	stb	zero,158(sp)
8110fe44:	10c00204 	addi	r3,r2,8
8110fe48:	14c00017 	ldw	r19,0(r2)
8110fe4c:	15800117 	ldw	r22,4(r2)
8110fe50:	20040f16 	blt	r4,zero,81110e90 <___vfprintf_internal_r+0x1b48>
8110fe54:	013fdfc4 	movi	r4,-129
8110fe58:	9d84b03a 	or	r2,r19,r22
8110fe5c:	d8c02d15 	stw	r3,180(sp)
8110fe60:	9124703a 	and	r18,r18,r4
8110fe64:	0039883a 	mov	fp,zero
8110fe68:	103e891e 	bne	r2,zero,8110f890 <__reset+0xfb0ef890>
8110fe6c:	d9002917 	ldw	r4,164(sp)
8110fe70:	2002c11e 	bne	r4,zero,81110978 <___vfprintf_internal_r+0x1630>
8110fe74:	d8002915 	stw	zero,164(sp)
8110fe78:	d8002e15 	stw	zero,184(sp)
8110fe7c:	dc001e04 	addi	r16,sp,120
8110fe80:	003ef806 	br	8110fa64 <__reset+0xfb0efa64>
8110fe84:	18c03fcc 	andi	r3,r3,255
8110fe88:	18059d1e 	bne	r3,zero,81111500 <___vfprintf_internal_r+0x21b8>
8110fe8c:	016044b4 	movhi	r5,33042
8110fe90:	2948d004 	addi	r5,r5,9024
8110fe94:	d9403915 	stw	r5,228(sp)
8110fe98:	9080080c 	andi	r2,r18,32
8110fe9c:	10005226 	beq	r2,zero,8110ffe8 <___vfprintf_internal_r+0xca0>
8110fea0:	d8802d17 	ldw	r2,180(sp)
8110fea4:	14c00017 	ldw	r19,0(r2)
8110fea8:	15800117 	ldw	r22,4(r2)
8110feac:	10800204 	addi	r2,r2,8
8110feb0:	d8802d15 	stw	r2,180(sp)
8110feb4:	9080004c 	andi	r2,r18,1
8110feb8:	10019026 	beq	r2,zero,811104fc <___vfprintf_internal_r+0x11b4>
8110febc:	9d84b03a 	or	r2,r19,r22
8110fec0:	10036926 	beq	r2,zero,81110c68 <___vfprintf_internal_r+0x1920>
8110fec4:	d8c02917 	ldw	r3,164(sp)
8110fec8:	00800c04 	movi	r2,48
8110fecc:	d8802705 	stb	r2,156(sp)
8110fed0:	dc402745 	stb	r17,157(sp)
8110fed4:	d8002785 	stb	zero,158(sp)
8110fed8:	90800094 	ori	r2,r18,2
8110fedc:	18045d16 	blt	r3,zero,81111054 <___vfprintf_internal_r+0x1d0c>
8110fee0:	00bfdfc4 	movi	r2,-129
8110fee4:	90a4703a 	and	r18,r18,r2
8110fee8:	94800094 	ori	r18,r18,2
8110feec:	0039883a 	mov	fp,zero
8110fef0:	d9003917 	ldw	r4,228(sp)
8110fef4:	dc001e04 	addi	r16,sp,120
8110fef8:	988003cc 	andi	r2,r19,15
8110fefc:	b006973a 	slli	r3,r22,28
8110ff00:	2085883a 	add	r2,r4,r2
8110ff04:	9826d13a 	srli	r19,r19,4
8110ff08:	10800003 	ldbu	r2,0(r2)
8110ff0c:	b02cd13a 	srli	r22,r22,4
8110ff10:	843fffc4 	addi	r16,r16,-1
8110ff14:	1ce6b03a 	or	r19,r3,r19
8110ff18:	80800005 	stb	r2,0(r16)
8110ff1c:	9d84b03a 	or	r2,r19,r22
8110ff20:	103ff51e 	bne	r2,zero,8110fef8 <__reset+0xfb0efef8>
8110ff24:	d8c02817 	ldw	r3,160(sp)
8110ff28:	1c07c83a 	sub	r3,r3,r16
8110ff2c:	d8c02e15 	stw	r3,184(sp)
8110ff30:	003ecc06 	br	8110fa64 <__reset+0xfb0efa64>
8110ff34:	18c03fcc 	andi	r3,r3,255
8110ff38:	183e9f26 	beq	r3,zero,8110f9b8 <__reset+0xfb0ef9b8>
8110ff3c:	d9c02785 	stb	r7,158(sp)
8110ff40:	003e9d06 	br	8110f9b8 <__reset+0xfb0ef9b8>
8110ff44:	00c00044 	movi	r3,1
8110ff48:	01c00ac4 	movi	r7,43
8110ff4c:	ac400007 	ldb	r17,0(r21)
8110ff50:	003d5e06 	br	8110f4cc <__reset+0xfb0ef4cc>
8110ff54:	94800814 	ori	r18,r18,32
8110ff58:	ac400007 	ldb	r17,0(r21)
8110ff5c:	003d5b06 	br	8110f4cc <__reset+0xfb0ef4cc>
8110ff60:	d8c02d17 	ldw	r3,180(sp)
8110ff64:	d8002785 	stb	zero,158(sp)
8110ff68:	1c000017 	ldw	r16,0(r3)
8110ff6c:	1cc00104 	addi	r19,r3,4
8110ff70:	80041926 	beq	r16,zero,81110fd8 <___vfprintf_internal_r+0x1c90>
8110ff74:	d9002917 	ldw	r4,164(sp)
8110ff78:	2003d016 	blt	r4,zero,81110ebc <___vfprintf_internal_r+0x1b74>
8110ff7c:	200d883a 	mov	r6,r4
8110ff80:	000b883a 	mov	r5,zero
8110ff84:	8009883a 	mov	r4,r16
8110ff88:	da003d15 	stw	r8,244(sp)
8110ff8c:	11143a40 	call	811143a4 <memchr>
8110ff90:	da003d17 	ldw	r8,244(sp)
8110ff94:	10045426 	beq	r2,zero,811110e8 <___vfprintf_internal_r+0x1da0>
8110ff98:	1405c83a 	sub	r2,r2,r16
8110ff9c:	d8802e15 	stw	r2,184(sp)
8110ffa0:	1003cc16 	blt	r2,zero,81110ed4 <___vfprintf_internal_r+0x1b8c>
8110ffa4:	df002783 	ldbu	fp,158(sp)
8110ffa8:	d8802a15 	stw	r2,168(sp)
8110ffac:	dcc02d15 	stw	r19,180(sp)
8110ffb0:	d8002915 	stw	zero,164(sp)
8110ffb4:	d8003215 	stw	zero,200(sp)
8110ffb8:	003eb006 	br	8110fa7c <__reset+0xfb0efa7c>
8110ffbc:	18c03fcc 	andi	r3,r3,255
8110ffc0:	183f9b26 	beq	r3,zero,8110fe30 <__reset+0xfb0efe30>
8110ffc4:	d9c02785 	stb	r7,158(sp)
8110ffc8:	003f9906 	br	8110fe30 <__reset+0xfb0efe30>
8110ffcc:	18c03fcc 	andi	r3,r3,255
8110ffd0:	1805551e 	bne	r3,zero,81111528 <___vfprintf_internal_r+0x21e0>
8110ffd4:	016044b4 	movhi	r5,33042
8110ffd8:	2948d504 	addi	r5,r5,9044
8110ffdc:	d9403915 	stw	r5,228(sp)
8110ffe0:	9080080c 	andi	r2,r18,32
8110ffe4:	103fae1e 	bne	r2,zero,8110fea0 <__reset+0xfb0efea0>
8110ffe8:	9080040c 	andi	r2,r18,16
8110ffec:	1002de26 	beq	r2,zero,81110b68 <___vfprintf_internal_r+0x1820>
8110fff0:	d8c02d17 	ldw	r3,180(sp)
8110fff4:	002d883a 	mov	r22,zero
8110fff8:	1cc00017 	ldw	r19,0(r3)
8110fffc:	18c00104 	addi	r3,r3,4
81110000:	d8c02d15 	stw	r3,180(sp)
81110004:	003fab06 	br	8110feb4 <__reset+0xfb0efeb4>
81110008:	38803fcc 	andi	r2,r7,255
8111000c:	1080201c 	xori	r2,r2,128
81110010:	10bfe004 	addi	r2,r2,-128
81110014:	1002d21e 	bne	r2,zero,81110b60 <___vfprintf_internal_r+0x1818>
81110018:	00c00044 	movi	r3,1
8111001c:	01c00804 	movi	r7,32
81110020:	ac400007 	ldb	r17,0(r21)
81110024:	003d2906 	br	8110f4cc <__reset+0xfb0ef4cc>
81110028:	94800054 	ori	r18,r18,1
8111002c:	ac400007 	ldb	r17,0(r21)
81110030:	003d2606 	br	8110f4cc <__reset+0xfb0ef4cc>
81110034:	18c03fcc 	andi	r3,r3,255
81110038:	183e0526 	beq	r3,zero,8110f850 <__reset+0xfb0ef850>
8111003c:	d9c02785 	stb	r7,158(sp)
81110040:	003e0306 	br	8110f850 <__reset+0xfb0ef850>
81110044:	94801014 	ori	r18,r18,64
81110048:	ac400007 	ldb	r17,0(r21)
8111004c:	003d1f06 	br	8110f4cc <__reset+0xfb0ef4cc>
81110050:	ac400007 	ldb	r17,0(r21)
81110054:	8a438726 	beq	r17,r9,81110e74 <___vfprintf_internal_r+0x1b2c>
81110058:	94800414 	ori	r18,r18,16
8111005c:	003d1b06 	br	8110f4cc <__reset+0xfb0ef4cc>
81110060:	18c03fcc 	andi	r3,r3,255
81110064:	1805341e 	bne	r3,zero,81111538 <___vfprintf_internal_r+0x21f0>
81110068:	9080080c 	andi	r2,r18,32
8111006c:	1002cd26 	beq	r2,zero,81110ba4 <___vfprintf_internal_r+0x185c>
81110070:	d9402d17 	ldw	r5,180(sp)
81110074:	d9002f17 	ldw	r4,188(sp)
81110078:	28800017 	ldw	r2,0(r5)
8111007c:	2007d7fa 	srai	r3,r4,31
81110080:	29400104 	addi	r5,r5,4
81110084:	d9402d15 	stw	r5,180(sp)
81110088:	11000015 	stw	r4,0(r2)
8111008c:	10c00115 	stw	r3,4(r2)
81110090:	003ce506 	br	8110f428 <__reset+0xfb0ef428>
81110094:	d8c02d17 	ldw	r3,180(sp)
81110098:	d9002d17 	ldw	r4,180(sp)
8111009c:	d8002785 	stb	zero,158(sp)
811100a0:	18800017 	ldw	r2,0(r3)
811100a4:	21000104 	addi	r4,r4,4
811100a8:	00c00044 	movi	r3,1
811100ac:	d8c02a15 	stw	r3,168(sp)
811100b0:	d8801405 	stb	r2,80(sp)
811100b4:	d9002d15 	stw	r4,180(sp)
811100b8:	d8c02e15 	stw	r3,184(sp)
811100bc:	d8002915 	stw	zero,164(sp)
811100c0:	d8003215 	stw	zero,200(sp)
811100c4:	dc001404 	addi	r16,sp,80
811100c8:	0039883a 	mov	fp,zero
811100cc:	003e7206 	br	8110fa98 <__reset+0xfb0efa98>
811100d0:	012044b4 	movhi	r4,33042
811100d4:	2108d504 	addi	r4,r4,9044
811100d8:	0039883a 	mov	fp,zero
811100dc:	d9003915 	stw	r4,228(sp)
811100e0:	04401e04 	movi	r17,120
811100e4:	003f8206 	br	8110fef0 <__reset+0xfb0efef0>
811100e8:	18c03fcc 	andi	r3,r3,255
811100ec:	1805061e 	bne	r3,zero,81111508 <___vfprintf_internal_r+0x21c0>
811100f0:	883d9126 	beq	r17,zero,8110f738 <__reset+0xfb0ef738>
811100f4:	00c00044 	movi	r3,1
811100f8:	d8c02a15 	stw	r3,168(sp)
811100fc:	dc401405 	stb	r17,80(sp)
81110100:	d8002785 	stb	zero,158(sp)
81110104:	003fec06 	br	811100b8 <__reset+0xfb0f00b8>
81110108:	016044b4 	movhi	r5,33042
8111010c:	2948d504 	addi	r5,r5,9044
81110110:	d9403915 	stw	r5,228(sp)
81110114:	d8c02d15 	stw	r3,180(sp)
81110118:	1025883a 	mov	r18,r2
8111011c:	04401e04 	movi	r17,120
81110120:	9d84b03a 	or	r2,r19,r22
81110124:	1000fc1e 	bne	r2,zero,81110518 <___vfprintf_internal_r+0x11d0>
81110128:	0039883a 	mov	fp,zero
8111012c:	00800084 	movi	r2,2
81110130:	10803fcc 	andi	r2,r2,255
81110134:	00c00044 	movi	r3,1
81110138:	10c20f26 	beq	r2,r3,81110978 <___vfprintf_internal_r+0x1630>
8111013c:	00c00084 	movi	r3,2
81110140:	10fd6326 	beq	r2,r3,8110f6d0 <__reset+0xfb0ef6d0>
81110144:	003e2d06 	br	8110f9fc <__reset+0xfb0ef9fc>
81110148:	d8c02017 	ldw	r3,128(sp)
8111014c:	003e9306 	br	8110fb9c <__reset+0xfb0efb9c>
81110150:	00801944 	movi	r2,101
81110154:	14407e0e 	bge	r2,r17,81110350 <___vfprintf_internal_r+0x1008>
81110158:	d9003617 	ldw	r4,216(sp)
8111015c:	d9403817 	ldw	r5,224(sp)
81110160:	000d883a 	mov	r6,zero
81110164:	000f883a 	mov	r7,zero
81110168:	d8c03c15 	stw	r3,240(sp)
8111016c:	da003d15 	stw	r8,244(sp)
81110170:	111ace80 	call	8111ace8 <__eqdf2>
81110174:	d8c03c17 	ldw	r3,240(sp)
81110178:	da003d17 	ldw	r8,244(sp)
8111017c:	1000f71e 	bne	r2,zero,8111055c <___vfprintf_internal_r+0x1214>
81110180:	d8801f17 	ldw	r2,124(sp)
81110184:	012044b4 	movhi	r4,33042
81110188:	2108dc04 	addi	r4,r4,9072
8111018c:	18c00044 	addi	r3,r3,1
81110190:	10800044 	addi	r2,r2,1
81110194:	41000015 	stw	r4,0(r8)
81110198:	01000044 	movi	r4,1
8111019c:	41000115 	stw	r4,4(r8)
811101a0:	d8c02015 	stw	r3,128(sp)
811101a4:	d8801f15 	stw	r2,124(sp)
811101a8:	010001c4 	movi	r4,7
811101ac:	2082b816 	blt	r4,r2,81110c90 <___vfprintf_internal_r+0x1948>
811101b0:	42000204 	addi	r8,r8,8
811101b4:	d8802617 	ldw	r2,152(sp)
811101b8:	d9403317 	ldw	r5,204(sp)
811101bc:	11400216 	blt	r2,r5,811101c8 <___vfprintf_internal_r+0xe80>
811101c0:	9080004c 	andi	r2,r18,1
811101c4:	103ed526 	beq	r2,zero,8110fd1c <__reset+0xfb0efd1c>
811101c8:	d8803717 	ldw	r2,220(sp)
811101cc:	d9003417 	ldw	r4,208(sp)
811101d0:	d9403717 	ldw	r5,220(sp)
811101d4:	1887883a 	add	r3,r3,r2
811101d8:	d8801f17 	ldw	r2,124(sp)
811101dc:	41000015 	stw	r4,0(r8)
811101e0:	41400115 	stw	r5,4(r8)
811101e4:	10800044 	addi	r2,r2,1
811101e8:	d8c02015 	stw	r3,128(sp)
811101ec:	d8801f15 	stw	r2,124(sp)
811101f0:	010001c4 	movi	r4,7
811101f4:	20832916 	blt	r4,r2,81110e9c <___vfprintf_internal_r+0x1b54>
811101f8:	42000204 	addi	r8,r8,8
811101fc:	d8803317 	ldw	r2,204(sp)
81110200:	143fffc4 	addi	r16,r2,-1
81110204:	043ec50e 	bge	zero,r16,8110fd1c <__reset+0xfb0efd1c>
81110208:	04400404 	movi	r17,16
8111020c:	d8801f17 	ldw	r2,124(sp)
81110210:	8c00880e 	bge	r17,r16,81110434 <___vfprintf_internal_r+0x10ec>
81110214:	016044b4 	movhi	r5,33042
81110218:	2948e484 	addi	r5,r5,9106
8111021c:	d9402b15 	stw	r5,172(sp)
81110220:	058001c4 	movi	r22,7
81110224:	dcc02c17 	ldw	r19,176(sp)
81110228:	00000306 	br	81110238 <___vfprintf_internal_r+0xef0>
8111022c:	42000204 	addi	r8,r8,8
81110230:	843ffc04 	addi	r16,r16,-16
81110234:	8c00820e 	bge	r17,r16,81110440 <___vfprintf_internal_r+0x10f8>
81110238:	18c00404 	addi	r3,r3,16
8111023c:	10800044 	addi	r2,r2,1
81110240:	45000015 	stw	r20,0(r8)
81110244:	44400115 	stw	r17,4(r8)
81110248:	d8c02015 	stw	r3,128(sp)
8111024c:	d8801f15 	stw	r2,124(sp)
81110250:	b0bff60e 	bge	r22,r2,8111022c <__reset+0xfb0f022c>
81110254:	d9801e04 	addi	r6,sp,120
81110258:	b80b883a 	mov	r5,r23
8111025c:	9809883a 	mov	r4,r19
81110260:	11172940 	call	81117294 <__sprint_r>
81110264:	103d3a1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110268:	d8c02017 	ldw	r3,128(sp)
8111026c:	d8801f17 	ldw	r2,124(sp)
81110270:	da000404 	addi	r8,sp,16
81110274:	003fee06 	br	81110230 <__reset+0xfb0f0230>
81110278:	d9403117 	ldw	r5,196(sp)
8111027c:	d8802a17 	ldw	r2,168(sp)
81110280:	28adc83a 	sub	r22,r5,r2
81110284:	05be630e 	bge	zero,r22,8110fc14 <__reset+0xfb0efc14>
81110288:	07000404 	movi	fp,16
8111028c:	d8801f17 	ldw	r2,124(sp)
81110290:	e5838f0e 	bge	fp,r22,811110d0 <___vfprintf_internal_r+0x1d88>
81110294:	016044b4 	movhi	r5,33042
81110298:	2948e484 	addi	r5,r5,9106
8111029c:	dc403015 	stw	r17,192(sp)
811102a0:	d9402b15 	stw	r5,172(sp)
811102a4:	b023883a 	mov	r17,r22
811102a8:	04c001c4 	movi	r19,7
811102ac:	a82d883a 	mov	r22,r21
811102b0:	902b883a 	mov	r21,r18
811102b4:	8025883a 	mov	r18,r16
811102b8:	dc002c17 	ldw	r16,176(sp)
811102bc:	00000306 	br	811102cc <___vfprintf_internal_r+0xf84>
811102c0:	8c7ffc04 	addi	r17,r17,-16
811102c4:	42000204 	addi	r8,r8,8
811102c8:	e440110e 	bge	fp,r17,81110310 <___vfprintf_internal_r+0xfc8>
811102cc:	18c00404 	addi	r3,r3,16
811102d0:	10800044 	addi	r2,r2,1
811102d4:	45000015 	stw	r20,0(r8)
811102d8:	47000115 	stw	fp,4(r8)
811102dc:	d8c02015 	stw	r3,128(sp)
811102e0:	d8801f15 	stw	r2,124(sp)
811102e4:	98bff60e 	bge	r19,r2,811102c0 <__reset+0xfb0f02c0>
811102e8:	d9801e04 	addi	r6,sp,120
811102ec:	b80b883a 	mov	r5,r23
811102f0:	8009883a 	mov	r4,r16
811102f4:	11172940 	call	81117294 <__sprint_r>
811102f8:	103d151e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
811102fc:	8c7ffc04 	addi	r17,r17,-16
81110300:	d8c02017 	ldw	r3,128(sp)
81110304:	d8801f17 	ldw	r2,124(sp)
81110308:	da000404 	addi	r8,sp,16
8111030c:	e47fef16 	blt	fp,r17,811102cc <__reset+0xfb0f02cc>
81110310:	9021883a 	mov	r16,r18
81110314:	a825883a 	mov	r18,r21
81110318:	b02b883a 	mov	r21,r22
8111031c:	882d883a 	mov	r22,r17
81110320:	dc403017 	ldw	r17,192(sp)
81110324:	d9002b17 	ldw	r4,172(sp)
81110328:	1d87883a 	add	r3,r3,r22
8111032c:	10800044 	addi	r2,r2,1
81110330:	41000015 	stw	r4,0(r8)
81110334:	45800115 	stw	r22,4(r8)
81110338:	d8c02015 	stw	r3,128(sp)
8111033c:	d8801f15 	stw	r2,124(sp)
81110340:	010001c4 	movi	r4,7
81110344:	20818e16 	blt	r4,r2,81110980 <___vfprintf_internal_r+0x1638>
81110348:	42000204 	addi	r8,r8,8
8111034c:	003e3106 	br	8110fc14 <__reset+0xfb0efc14>
81110350:	d9403317 	ldw	r5,204(sp)
81110354:	00800044 	movi	r2,1
81110358:	18c00044 	addi	r3,r3,1
8111035c:	1141530e 	bge	r2,r5,811108ac <___vfprintf_internal_r+0x1564>
81110360:	dc401f17 	ldw	r17,124(sp)
81110364:	00800044 	movi	r2,1
81110368:	40800115 	stw	r2,4(r8)
8111036c:	8c400044 	addi	r17,r17,1
81110370:	44000015 	stw	r16,0(r8)
81110374:	d8c02015 	stw	r3,128(sp)
81110378:	dc401f15 	stw	r17,124(sp)
8111037c:	008001c4 	movi	r2,7
81110380:	14416b16 	blt	r2,r17,81110930 <___vfprintf_internal_r+0x15e8>
81110384:	42000204 	addi	r8,r8,8
81110388:	d8803717 	ldw	r2,220(sp)
8111038c:	d9003417 	ldw	r4,208(sp)
81110390:	8c400044 	addi	r17,r17,1
81110394:	10c7883a 	add	r3,r2,r3
81110398:	40800115 	stw	r2,4(r8)
8111039c:	41000015 	stw	r4,0(r8)
811103a0:	d8c02015 	stw	r3,128(sp)
811103a4:	dc401f15 	stw	r17,124(sp)
811103a8:	008001c4 	movi	r2,7
811103ac:	14416916 	blt	r2,r17,81110954 <___vfprintf_internal_r+0x160c>
811103b0:	45800204 	addi	r22,r8,8
811103b4:	d9003617 	ldw	r4,216(sp)
811103b8:	d9403817 	ldw	r5,224(sp)
811103bc:	000d883a 	mov	r6,zero
811103c0:	000f883a 	mov	r7,zero
811103c4:	d8c03c15 	stw	r3,240(sp)
811103c8:	111ace80 	call	8111ace8 <__eqdf2>
811103cc:	d8c03c17 	ldw	r3,240(sp)
811103d0:	1000bc26 	beq	r2,zero,811106c4 <___vfprintf_internal_r+0x137c>
811103d4:	d9403317 	ldw	r5,204(sp)
811103d8:	84000044 	addi	r16,r16,1
811103dc:	8c400044 	addi	r17,r17,1
811103e0:	28bfffc4 	addi	r2,r5,-1
811103e4:	1887883a 	add	r3,r3,r2
811103e8:	b0800115 	stw	r2,4(r22)
811103ec:	b4000015 	stw	r16,0(r22)
811103f0:	d8c02015 	stw	r3,128(sp)
811103f4:	dc401f15 	stw	r17,124(sp)
811103f8:	008001c4 	movi	r2,7
811103fc:	14414316 	blt	r2,r17,8111090c <___vfprintf_internal_r+0x15c4>
81110400:	b5800204 	addi	r22,r22,8
81110404:	d9003a17 	ldw	r4,232(sp)
81110408:	df0022c4 	addi	fp,sp,139
8111040c:	8c400044 	addi	r17,r17,1
81110410:	20c7883a 	add	r3,r4,r3
81110414:	b7000015 	stw	fp,0(r22)
81110418:	b1000115 	stw	r4,4(r22)
8111041c:	d8c02015 	stw	r3,128(sp)
81110420:	dc401f15 	stw	r17,124(sp)
81110424:	008001c4 	movi	r2,7
81110428:	14400e16 	blt	r2,r17,81110464 <___vfprintf_internal_r+0x111c>
8111042c:	b2000204 	addi	r8,r22,8
81110430:	003e3a06 	br	8110fd1c <__reset+0xfb0efd1c>
81110434:	012044b4 	movhi	r4,33042
81110438:	2108e484 	addi	r4,r4,9106
8111043c:	d9002b15 	stw	r4,172(sp)
81110440:	d9002b17 	ldw	r4,172(sp)
81110444:	1c07883a 	add	r3,r3,r16
81110448:	44000115 	stw	r16,4(r8)
8111044c:	41000015 	stw	r4,0(r8)
81110450:	10800044 	addi	r2,r2,1
81110454:	d8c02015 	stw	r3,128(sp)
81110458:	d8801f15 	stw	r2,124(sp)
8111045c:	010001c4 	movi	r4,7
81110460:	20be2d0e 	bge	r4,r2,8110fd18 <__reset+0xfb0efd18>
81110464:	d9002c17 	ldw	r4,176(sp)
81110468:	d9801e04 	addi	r6,sp,120
8111046c:	b80b883a 	mov	r5,r23
81110470:	11172940 	call	81117294 <__sprint_r>
81110474:	103cb61e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110478:	d8c02017 	ldw	r3,128(sp)
8111047c:	da000404 	addi	r8,sp,16
81110480:	003e2606 	br	8110fd1c <__reset+0xfb0efd1c>
81110484:	d9002c17 	ldw	r4,176(sp)
81110488:	d9801e04 	addi	r6,sp,120
8111048c:	b80b883a 	mov	r5,r23
81110490:	11172940 	call	81117294 <__sprint_r>
81110494:	103e5d26 	beq	r2,zero,8110fe0c <__reset+0xfb0efe0c>
81110498:	003cad06 	br	8110f750 <__reset+0xfb0ef750>
8111049c:	d9002c17 	ldw	r4,176(sp)
811104a0:	d9801e04 	addi	r6,sp,120
811104a4:	b80b883a 	mov	r5,r23
811104a8:	11172940 	call	81117294 <__sprint_r>
811104ac:	103ca81e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
811104b0:	d8c02017 	ldw	r3,128(sp)
811104b4:	da000404 	addi	r8,sp,16
811104b8:	003e0b06 	br	8110fce8 <__reset+0xfb0efce8>
811104bc:	d9002c17 	ldw	r4,176(sp)
811104c0:	d9801e04 	addi	r6,sp,120
811104c4:	b80b883a 	mov	r5,r23
811104c8:	11172940 	call	81117294 <__sprint_r>
811104cc:	103ca01e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
811104d0:	d8c02017 	ldw	r3,128(sp)
811104d4:	da000404 	addi	r8,sp,16
811104d8:	003dbd06 	br	8110fbd0 <__reset+0xfb0efbd0>
811104dc:	d9002c17 	ldw	r4,176(sp)
811104e0:	d9801e04 	addi	r6,sp,120
811104e4:	b80b883a 	mov	r5,r23
811104e8:	11172940 	call	81117294 <__sprint_r>
811104ec:	103c981e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
811104f0:	d8c02017 	ldw	r3,128(sp)
811104f4:	da000404 	addi	r8,sp,16
811104f8:	003dc306 	br	8110fc08 <__reset+0xfb0efc08>
811104fc:	d8802917 	ldw	r2,164(sp)
81110500:	d8002785 	stb	zero,158(sp)
81110504:	103f0616 	blt	r2,zero,81110120 <__reset+0xfb0f0120>
81110508:	00ffdfc4 	movi	r3,-129
8111050c:	9d84b03a 	or	r2,r19,r22
81110510:	90e4703a 	and	r18,r18,r3
81110514:	103c6b26 	beq	r2,zero,8110f6c4 <__reset+0xfb0ef6c4>
81110518:	0039883a 	mov	fp,zero
8111051c:	003e7406 	br	8110fef0 <__reset+0xfb0efef0>
81110520:	9080040c 	andi	r2,r18,16
81110524:	1001b326 	beq	r2,zero,81110bf4 <___vfprintf_internal_r+0x18ac>
81110528:	d9002d17 	ldw	r4,180(sp)
8111052c:	d9402917 	ldw	r5,164(sp)
81110530:	d8002785 	stb	zero,158(sp)
81110534:	20800104 	addi	r2,r4,4
81110538:	24c00017 	ldw	r19,0(r4)
8111053c:	002d883a 	mov	r22,zero
81110540:	2801b516 	blt	r5,zero,81110c18 <___vfprintf_internal_r+0x18d0>
81110544:	00ffdfc4 	movi	r3,-129
81110548:	d8802d15 	stw	r2,180(sp)
8111054c:	90e4703a 	and	r18,r18,r3
81110550:	983d2726 	beq	r19,zero,8110f9f0 <__reset+0xfb0ef9f0>
81110554:	0039883a 	mov	fp,zero
81110558:	003d2a06 	br	8110fa04 <__reset+0xfb0efa04>
8111055c:	dc402617 	ldw	r17,152(sp)
81110560:	0441d30e 	bge	zero,r17,81110cb0 <___vfprintf_internal_r+0x1968>
81110564:	dc403217 	ldw	r17,200(sp)
81110568:	d8803317 	ldw	r2,204(sp)
8111056c:	1440010e 	bge	r2,r17,81110574 <___vfprintf_internal_r+0x122c>
81110570:	1023883a 	mov	r17,r2
81110574:	04400a0e 	bge	zero,r17,811105a0 <___vfprintf_internal_r+0x1258>
81110578:	d8801f17 	ldw	r2,124(sp)
8111057c:	1c47883a 	add	r3,r3,r17
81110580:	44000015 	stw	r16,0(r8)
81110584:	10800044 	addi	r2,r2,1
81110588:	44400115 	stw	r17,4(r8)
8111058c:	d8c02015 	stw	r3,128(sp)
81110590:	d8801f15 	stw	r2,124(sp)
81110594:	010001c4 	movi	r4,7
81110598:	20826516 	blt	r4,r2,81110f30 <___vfprintf_internal_r+0x1be8>
8111059c:	42000204 	addi	r8,r8,8
811105a0:	88026116 	blt	r17,zero,81110f28 <___vfprintf_internal_r+0x1be0>
811105a4:	d9003217 	ldw	r4,200(sp)
811105a8:	2463c83a 	sub	r17,r4,r17
811105ac:	04407b0e 	bge	zero,r17,8111079c <___vfprintf_internal_r+0x1454>
811105b0:	05800404 	movi	r22,16
811105b4:	d8801f17 	ldw	r2,124(sp)
811105b8:	b4419d0e 	bge	r22,r17,81110c30 <___vfprintf_internal_r+0x18e8>
811105bc:	012044b4 	movhi	r4,33042
811105c0:	2108e484 	addi	r4,r4,9106
811105c4:	d9002b15 	stw	r4,172(sp)
811105c8:	070001c4 	movi	fp,7
811105cc:	dcc02c17 	ldw	r19,176(sp)
811105d0:	00000306 	br	811105e0 <___vfprintf_internal_r+0x1298>
811105d4:	42000204 	addi	r8,r8,8
811105d8:	8c7ffc04 	addi	r17,r17,-16
811105dc:	b441970e 	bge	r22,r17,81110c3c <___vfprintf_internal_r+0x18f4>
811105e0:	18c00404 	addi	r3,r3,16
811105e4:	10800044 	addi	r2,r2,1
811105e8:	45000015 	stw	r20,0(r8)
811105ec:	45800115 	stw	r22,4(r8)
811105f0:	d8c02015 	stw	r3,128(sp)
811105f4:	d8801f15 	stw	r2,124(sp)
811105f8:	e0bff60e 	bge	fp,r2,811105d4 <__reset+0xfb0f05d4>
811105fc:	d9801e04 	addi	r6,sp,120
81110600:	b80b883a 	mov	r5,r23
81110604:	9809883a 	mov	r4,r19
81110608:	11172940 	call	81117294 <__sprint_r>
8111060c:	103c501e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110610:	d8c02017 	ldw	r3,128(sp)
81110614:	d8801f17 	ldw	r2,124(sp)
81110618:	da000404 	addi	r8,sp,16
8111061c:	003fee06 	br	811105d8 <__reset+0xfb0f05d8>
81110620:	d9002c17 	ldw	r4,176(sp)
81110624:	d9801e04 	addi	r6,sp,120
81110628:	b80b883a 	mov	r5,r23
8111062c:	11172940 	call	81117294 <__sprint_r>
81110630:	103c471e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110634:	d8c02017 	ldw	r3,128(sp)
81110638:	df002787 	ldb	fp,158(sp)
8111063c:	da000404 	addi	r8,sp,16
81110640:	003d5606 	br	8110fb9c <__reset+0xfb0efb9c>
81110644:	9080040c 	andi	r2,r18,16
81110648:	10016126 	beq	r2,zero,81110bd0 <___vfprintf_internal_r+0x1888>
8111064c:	d8802d17 	ldw	r2,180(sp)
81110650:	14c00017 	ldw	r19,0(r2)
81110654:	10800104 	addi	r2,r2,4
81110658:	d8802d15 	stw	r2,180(sp)
8111065c:	982dd7fa 	srai	r22,r19,31
81110660:	b005883a 	mov	r2,r22
81110664:	003c8206 	br	8110f870 <__reset+0xfb0ef870>
81110668:	9080040c 	andi	r2,r18,16
8111066c:	10003526 	beq	r2,zero,81110744 <___vfprintf_internal_r+0x13fc>
81110670:	d9402d17 	ldw	r5,180(sp)
81110674:	d8c02917 	ldw	r3,164(sp)
81110678:	d8002785 	stb	zero,158(sp)
8111067c:	28800104 	addi	r2,r5,4
81110680:	2cc00017 	ldw	r19,0(r5)
81110684:	002d883a 	mov	r22,zero
81110688:	18003716 	blt	r3,zero,81110768 <___vfprintf_internal_r+0x1420>
8111068c:	00ffdfc4 	movi	r3,-129
81110690:	d8802d15 	stw	r2,180(sp)
81110694:	90e4703a 	and	r18,r18,r3
81110698:	0039883a 	mov	fp,zero
8111069c:	983df326 	beq	r19,zero,8110fe6c <__reset+0xfb0efe6c>
811106a0:	00800244 	movi	r2,9
811106a4:	14fc7b36 	bltu	r2,r19,8110f894 <__reset+0xfb0ef894>
811106a8:	d8c02817 	ldw	r3,160(sp)
811106ac:	dc001dc4 	addi	r16,sp,119
811106b0:	9cc00c04 	addi	r19,r19,48
811106b4:	1c07c83a 	sub	r3,r3,r16
811106b8:	dcc01dc5 	stb	r19,119(sp)
811106bc:	d8c02e15 	stw	r3,184(sp)
811106c0:	003ce806 	br	8110fa64 <__reset+0xfb0efa64>
811106c4:	d8803317 	ldw	r2,204(sp)
811106c8:	143fffc4 	addi	r16,r2,-1
811106cc:	043f4d0e 	bge	zero,r16,81110404 <__reset+0xfb0f0404>
811106d0:	07000404 	movi	fp,16
811106d4:	e400810e 	bge	fp,r16,811108dc <___vfprintf_internal_r+0x1594>
811106d8:	016044b4 	movhi	r5,33042
811106dc:	2948e484 	addi	r5,r5,9106
811106e0:	d9402b15 	stw	r5,172(sp)
811106e4:	01c001c4 	movi	r7,7
811106e8:	dcc02c17 	ldw	r19,176(sp)
811106ec:	00000306 	br	811106fc <___vfprintf_internal_r+0x13b4>
811106f0:	b5800204 	addi	r22,r22,8
811106f4:	843ffc04 	addi	r16,r16,-16
811106f8:	e4007b0e 	bge	fp,r16,811108e8 <___vfprintf_internal_r+0x15a0>
811106fc:	18c00404 	addi	r3,r3,16
81110700:	8c400044 	addi	r17,r17,1
81110704:	b5000015 	stw	r20,0(r22)
81110708:	b7000115 	stw	fp,4(r22)
8111070c:	d8c02015 	stw	r3,128(sp)
81110710:	dc401f15 	stw	r17,124(sp)
81110714:	3c7ff60e 	bge	r7,r17,811106f0 <__reset+0xfb0f06f0>
81110718:	d9801e04 	addi	r6,sp,120
8111071c:	b80b883a 	mov	r5,r23
81110720:	9809883a 	mov	r4,r19
81110724:	d9c03c15 	stw	r7,240(sp)
81110728:	11172940 	call	81117294 <__sprint_r>
8111072c:	d9c03c17 	ldw	r7,240(sp)
81110730:	103c071e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110734:	d8c02017 	ldw	r3,128(sp)
81110738:	dc401f17 	ldw	r17,124(sp)
8111073c:	dd800404 	addi	r22,sp,16
81110740:	003fec06 	br	811106f4 <__reset+0xfb0f06f4>
81110744:	9080100c 	andi	r2,r18,64
81110748:	d8002785 	stb	zero,158(sp)
8111074c:	10010e26 	beq	r2,zero,81110b88 <___vfprintf_internal_r+0x1840>
81110750:	d9002d17 	ldw	r4,180(sp)
81110754:	d9402917 	ldw	r5,164(sp)
81110758:	002d883a 	mov	r22,zero
8111075c:	20800104 	addi	r2,r4,4
81110760:	24c0000b 	ldhu	r19,0(r4)
81110764:	283fc90e 	bge	r5,zero,8111068c <__reset+0xfb0f068c>
81110768:	d8802d15 	stw	r2,180(sp)
8111076c:	0039883a 	mov	fp,zero
81110770:	9d84b03a 	or	r2,r19,r22
81110774:	103c461e 	bne	r2,zero,8110f890 <__reset+0xfb0ef890>
81110778:	00800044 	movi	r2,1
8111077c:	003e6c06 	br	81110130 <__reset+0xfb0f0130>
81110780:	d9002c17 	ldw	r4,176(sp)
81110784:	d9801e04 	addi	r6,sp,120
81110788:	b80b883a 	mov	r5,r23
8111078c:	11172940 	call	81117294 <__sprint_r>
81110790:	103bef1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110794:	d8c02017 	ldw	r3,128(sp)
81110798:	da000404 	addi	r8,sp,16
8111079c:	d9003217 	ldw	r4,200(sp)
811107a0:	d8802617 	ldw	r2,152(sp)
811107a4:	d9403317 	ldw	r5,204(sp)
811107a8:	8123883a 	add	r17,r16,r4
811107ac:	11400216 	blt	r2,r5,811107b8 <___vfprintf_internal_r+0x1470>
811107b0:	9100004c 	andi	r4,r18,1
811107b4:	20000d26 	beq	r4,zero,811107ec <___vfprintf_internal_r+0x14a4>
811107b8:	d9003717 	ldw	r4,220(sp)
811107bc:	d9403417 	ldw	r5,208(sp)
811107c0:	1907883a 	add	r3,r3,r4
811107c4:	d9001f17 	ldw	r4,124(sp)
811107c8:	41400015 	stw	r5,0(r8)
811107cc:	d9403717 	ldw	r5,220(sp)
811107d0:	21000044 	addi	r4,r4,1
811107d4:	d8c02015 	stw	r3,128(sp)
811107d8:	41400115 	stw	r5,4(r8)
811107dc:	d9001f15 	stw	r4,124(sp)
811107e0:	014001c4 	movi	r5,7
811107e4:	2901e816 	blt	r5,r4,81110f88 <___vfprintf_internal_r+0x1c40>
811107e8:	42000204 	addi	r8,r8,8
811107ec:	d9003317 	ldw	r4,204(sp)
811107f0:	8121883a 	add	r16,r16,r4
811107f4:	2085c83a 	sub	r2,r4,r2
811107f8:	8461c83a 	sub	r16,r16,r17
811107fc:	1400010e 	bge	r2,r16,81110804 <___vfprintf_internal_r+0x14bc>
81110800:	1021883a 	mov	r16,r2
81110804:	04000a0e 	bge	zero,r16,81110830 <___vfprintf_internal_r+0x14e8>
81110808:	d9001f17 	ldw	r4,124(sp)
8111080c:	1c07883a 	add	r3,r3,r16
81110810:	44400015 	stw	r17,0(r8)
81110814:	21000044 	addi	r4,r4,1
81110818:	44000115 	stw	r16,4(r8)
8111081c:	d8c02015 	stw	r3,128(sp)
81110820:	d9001f15 	stw	r4,124(sp)
81110824:	014001c4 	movi	r5,7
81110828:	2901fb16 	blt	r5,r4,81111018 <___vfprintf_internal_r+0x1cd0>
8111082c:	42000204 	addi	r8,r8,8
81110830:	8001f716 	blt	r16,zero,81111010 <___vfprintf_internal_r+0x1cc8>
81110834:	1421c83a 	sub	r16,r2,r16
81110838:	043d380e 	bge	zero,r16,8110fd1c <__reset+0xfb0efd1c>
8111083c:	04400404 	movi	r17,16
81110840:	d8801f17 	ldw	r2,124(sp)
81110844:	8c3efb0e 	bge	r17,r16,81110434 <__reset+0xfb0f0434>
81110848:	016044b4 	movhi	r5,33042
8111084c:	2948e484 	addi	r5,r5,9106
81110850:	d9402b15 	stw	r5,172(sp)
81110854:	058001c4 	movi	r22,7
81110858:	dcc02c17 	ldw	r19,176(sp)
8111085c:	00000306 	br	8111086c <___vfprintf_internal_r+0x1524>
81110860:	42000204 	addi	r8,r8,8
81110864:	843ffc04 	addi	r16,r16,-16
81110868:	8c3ef50e 	bge	r17,r16,81110440 <__reset+0xfb0f0440>
8111086c:	18c00404 	addi	r3,r3,16
81110870:	10800044 	addi	r2,r2,1
81110874:	45000015 	stw	r20,0(r8)
81110878:	44400115 	stw	r17,4(r8)
8111087c:	d8c02015 	stw	r3,128(sp)
81110880:	d8801f15 	stw	r2,124(sp)
81110884:	b0bff60e 	bge	r22,r2,81110860 <__reset+0xfb0f0860>
81110888:	d9801e04 	addi	r6,sp,120
8111088c:	b80b883a 	mov	r5,r23
81110890:	9809883a 	mov	r4,r19
81110894:	11172940 	call	81117294 <__sprint_r>
81110898:	103bad1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
8111089c:	d8c02017 	ldw	r3,128(sp)
811108a0:	d8801f17 	ldw	r2,124(sp)
811108a4:	da000404 	addi	r8,sp,16
811108a8:	003fee06 	br	81110864 <__reset+0xfb0f0864>
811108ac:	9088703a 	and	r4,r18,r2
811108b0:	203eab1e 	bne	r4,zero,81110360 <__reset+0xfb0f0360>
811108b4:	dc401f17 	ldw	r17,124(sp)
811108b8:	40800115 	stw	r2,4(r8)
811108bc:	44000015 	stw	r16,0(r8)
811108c0:	8c400044 	addi	r17,r17,1
811108c4:	d8c02015 	stw	r3,128(sp)
811108c8:	dc401f15 	stw	r17,124(sp)
811108cc:	008001c4 	movi	r2,7
811108d0:	14400e16 	blt	r2,r17,8111090c <___vfprintf_internal_r+0x15c4>
811108d4:	45800204 	addi	r22,r8,8
811108d8:	003eca06 	br	81110404 <__reset+0xfb0f0404>
811108dc:	012044b4 	movhi	r4,33042
811108e0:	2108e484 	addi	r4,r4,9106
811108e4:	d9002b15 	stw	r4,172(sp)
811108e8:	d8802b17 	ldw	r2,172(sp)
811108ec:	1c07883a 	add	r3,r3,r16
811108f0:	8c400044 	addi	r17,r17,1
811108f4:	b0800015 	stw	r2,0(r22)
811108f8:	b4000115 	stw	r16,4(r22)
811108fc:	d8c02015 	stw	r3,128(sp)
81110900:	dc401f15 	stw	r17,124(sp)
81110904:	008001c4 	movi	r2,7
81110908:	147ebd0e 	bge	r2,r17,81110400 <__reset+0xfb0f0400>
8111090c:	d9002c17 	ldw	r4,176(sp)
81110910:	d9801e04 	addi	r6,sp,120
81110914:	b80b883a 	mov	r5,r23
81110918:	11172940 	call	81117294 <__sprint_r>
8111091c:	103b8c1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110920:	d8c02017 	ldw	r3,128(sp)
81110924:	dc401f17 	ldw	r17,124(sp)
81110928:	dd800404 	addi	r22,sp,16
8111092c:	003eb506 	br	81110404 <__reset+0xfb0f0404>
81110930:	d9002c17 	ldw	r4,176(sp)
81110934:	d9801e04 	addi	r6,sp,120
81110938:	b80b883a 	mov	r5,r23
8111093c:	11172940 	call	81117294 <__sprint_r>
81110940:	103b831e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110944:	d8c02017 	ldw	r3,128(sp)
81110948:	dc401f17 	ldw	r17,124(sp)
8111094c:	da000404 	addi	r8,sp,16
81110950:	003e8d06 	br	81110388 <__reset+0xfb0f0388>
81110954:	d9002c17 	ldw	r4,176(sp)
81110958:	d9801e04 	addi	r6,sp,120
8111095c:	b80b883a 	mov	r5,r23
81110960:	11172940 	call	81117294 <__sprint_r>
81110964:	103b7a1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110968:	d8c02017 	ldw	r3,128(sp)
8111096c:	dc401f17 	ldw	r17,124(sp)
81110970:	dd800404 	addi	r22,sp,16
81110974:	003e8f06 	br	811103b4 <__reset+0xfb0f03b4>
81110978:	0027883a 	mov	r19,zero
8111097c:	003f4a06 	br	811106a8 <__reset+0xfb0f06a8>
81110980:	d9002c17 	ldw	r4,176(sp)
81110984:	d9801e04 	addi	r6,sp,120
81110988:	b80b883a 	mov	r5,r23
8111098c:	11172940 	call	81117294 <__sprint_r>
81110990:	103b6f1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110994:	d8c02017 	ldw	r3,128(sp)
81110998:	da000404 	addi	r8,sp,16
8111099c:	003c9d06 	br	8110fc14 <__reset+0xfb0efc14>
811109a0:	04e7c83a 	sub	r19,zero,r19
811109a4:	9804c03a 	cmpne	r2,r19,zero
811109a8:	05adc83a 	sub	r22,zero,r22
811109ac:	b0adc83a 	sub	r22,r22,r2
811109b0:	d8802917 	ldw	r2,164(sp)
811109b4:	07000b44 	movi	fp,45
811109b8:	df002785 	stb	fp,158(sp)
811109bc:	10017b16 	blt	r2,zero,81110fac <___vfprintf_internal_r+0x1c64>
811109c0:	00bfdfc4 	movi	r2,-129
811109c4:	90a4703a 	and	r18,r18,r2
811109c8:	003bb106 	br	8110f890 <__reset+0xfb0ef890>
811109cc:	d9003617 	ldw	r4,216(sp)
811109d0:	d9403817 	ldw	r5,224(sp)
811109d4:	da003d15 	stw	r8,244(sp)
811109d8:	1115ba40 	call	81115ba4 <__fpclassifyd>
811109dc:	da003d17 	ldw	r8,244(sp)
811109e0:	1000f026 	beq	r2,zero,81110da4 <___vfprintf_internal_r+0x1a5c>
811109e4:	d9002917 	ldw	r4,164(sp)
811109e8:	05bff7c4 	movi	r22,-33
811109ec:	00bfffc4 	movi	r2,-1
811109f0:	8dac703a 	and	r22,r17,r22
811109f4:	20820026 	beq	r4,r2,811111f8 <___vfprintf_internal_r+0x1eb0>
811109f8:	008011c4 	movi	r2,71
811109fc:	b081f726 	beq	r22,r2,811111dc <___vfprintf_internal_r+0x1e94>
81110a00:	d9003817 	ldw	r4,224(sp)
81110a04:	90c04014 	ori	r3,r18,256
81110a08:	d8c02b15 	stw	r3,172(sp)
81110a0c:	20021516 	blt	r4,zero,81111264 <___vfprintf_internal_r+0x1f1c>
81110a10:	dcc03817 	ldw	r19,224(sp)
81110a14:	d8002a05 	stb	zero,168(sp)
81110a18:	00801984 	movi	r2,102
81110a1c:	8881f926 	beq	r17,r2,81111204 <___vfprintf_internal_r+0x1ebc>
81110a20:	00801184 	movi	r2,70
81110a24:	88821c26 	beq	r17,r2,81111298 <___vfprintf_internal_r+0x1f50>
81110a28:	00801144 	movi	r2,69
81110a2c:	b081ef26 	beq	r22,r2,811111ec <___vfprintf_internal_r+0x1ea4>
81110a30:	d8c02917 	ldw	r3,164(sp)
81110a34:	d8802104 	addi	r2,sp,132
81110a38:	d8800315 	stw	r2,12(sp)
81110a3c:	d9403617 	ldw	r5,216(sp)
81110a40:	d8802504 	addi	r2,sp,148
81110a44:	d9002c17 	ldw	r4,176(sp)
81110a48:	d8800215 	stw	r2,8(sp)
81110a4c:	d8802604 	addi	r2,sp,152
81110a50:	d8c00015 	stw	r3,0(sp)
81110a54:	d8800115 	stw	r2,4(sp)
81110a58:	01c00084 	movi	r7,2
81110a5c:	980d883a 	mov	r6,r19
81110a60:	d8c03c15 	stw	r3,240(sp)
81110a64:	da003d15 	stw	r8,244(sp)
81110a68:	1111a200 	call	81111a20 <_dtoa_r>
81110a6c:	1021883a 	mov	r16,r2
81110a70:	008019c4 	movi	r2,103
81110a74:	d8c03c17 	ldw	r3,240(sp)
81110a78:	da003d17 	ldw	r8,244(sp)
81110a7c:	88817126 	beq	r17,r2,81111044 <___vfprintf_internal_r+0x1cfc>
81110a80:	008011c4 	movi	r2,71
81110a84:	88829226 	beq	r17,r2,811114d0 <___vfprintf_internal_r+0x2188>
81110a88:	80f9883a 	add	fp,r16,r3
81110a8c:	d9003617 	ldw	r4,216(sp)
81110a90:	000d883a 	mov	r6,zero
81110a94:	000f883a 	mov	r7,zero
81110a98:	980b883a 	mov	r5,r19
81110a9c:	da003d15 	stw	r8,244(sp)
81110aa0:	111ace80 	call	8111ace8 <__eqdf2>
81110aa4:	da003d17 	ldw	r8,244(sp)
81110aa8:	10018d26 	beq	r2,zero,811110e0 <___vfprintf_internal_r+0x1d98>
81110aac:	d8802117 	ldw	r2,132(sp)
81110ab0:	1700062e 	bgeu	r2,fp,81110acc <___vfprintf_internal_r+0x1784>
81110ab4:	01000c04 	movi	r4,48
81110ab8:	10c00044 	addi	r3,r2,1
81110abc:	d8c02115 	stw	r3,132(sp)
81110ac0:	11000005 	stb	r4,0(r2)
81110ac4:	d8802117 	ldw	r2,132(sp)
81110ac8:	173ffb36 	bltu	r2,fp,81110ab8 <__reset+0xfb0f0ab8>
81110acc:	1405c83a 	sub	r2,r2,r16
81110ad0:	d8803315 	stw	r2,204(sp)
81110ad4:	008011c4 	movi	r2,71
81110ad8:	b0817626 	beq	r22,r2,811110b4 <___vfprintf_internal_r+0x1d6c>
81110adc:	00801944 	movi	r2,101
81110ae0:	1442810e 	bge	r2,r17,811114e8 <___vfprintf_internal_r+0x21a0>
81110ae4:	d8c02617 	ldw	r3,152(sp)
81110ae8:	00801984 	movi	r2,102
81110aec:	d8c03215 	stw	r3,200(sp)
81110af0:	8881fe26 	beq	r17,r2,811112ec <___vfprintf_internal_r+0x1fa4>
81110af4:	d8c03217 	ldw	r3,200(sp)
81110af8:	d9003317 	ldw	r4,204(sp)
81110afc:	1901dd16 	blt	r3,r4,81111274 <___vfprintf_internal_r+0x1f2c>
81110b00:	9480004c 	andi	r18,r18,1
81110b04:	90022b1e 	bne	r18,zero,811113b4 <___vfprintf_internal_r+0x206c>
81110b08:	1805883a 	mov	r2,r3
81110b0c:	18028016 	blt	r3,zero,81111510 <___vfprintf_internal_r+0x21c8>
81110b10:	d8c03217 	ldw	r3,200(sp)
81110b14:	044019c4 	movi	r17,103
81110b18:	d8c02e15 	stw	r3,184(sp)
81110b1c:	df002a07 	ldb	fp,168(sp)
81110b20:	e001531e 	bne	fp,zero,81111070 <___vfprintf_internal_r+0x1d28>
81110b24:	df002783 	ldbu	fp,158(sp)
81110b28:	d8802a15 	stw	r2,168(sp)
81110b2c:	dc802b17 	ldw	r18,172(sp)
81110b30:	d8002915 	stw	zero,164(sp)
81110b34:	003bd106 	br	8110fa7c <__reset+0xfb0efa7c>
81110b38:	d8802d17 	ldw	r2,180(sp)
81110b3c:	d8c02d17 	ldw	r3,180(sp)
81110b40:	d9002d17 	ldw	r4,180(sp)
81110b44:	10800017 	ldw	r2,0(r2)
81110b48:	18c00117 	ldw	r3,4(r3)
81110b4c:	21000204 	addi	r4,r4,8
81110b50:	d8803615 	stw	r2,216(sp)
81110b54:	d8c03815 	stw	r3,224(sp)
81110b58:	d9002d15 	stw	r4,180(sp)
81110b5c:	003b7506 	br	8110f934 <__reset+0xfb0ef934>
81110b60:	ac400007 	ldb	r17,0(r21)
81110b64:	003a5906 	br	8110f4cc <__reset+0xfb0ef4cc>
81110b68:	9080100c 	andi	r2,r18,64
81110b6c:	1000a826 	beq	r2,zero,81110e10 <___vfprintf_internal_r+0x1ac8>
81110b70:	d9002d17 	ldw	r4,180(sp)
81110b74:	002d883a 	mov	r22,zero
81110b78:	24c0000b 	ldhu	r19,0(r4)
81110b7c:	21000104 	addi	r4,r4,4
81110b80:	d9002d15 	stw	r4,180(sp)
81110b84:	003ccb06 	br	8110feb4 <__reset+0xfb0efeb4>
81110b88:	d8c02d17 	ldw	r3,180(sp)
81110b8c:	d9002917 	ldw	r4,164(sp)
81110b90:	002d883a 	mov	r22,zero
81110b94:	18800104 	addi	r2,r3,4
81110b98:	1cc00017 	ldw	r19,0(r3)
81110b9c:	203ebb0e 	bge	r4,zero,8111068c <__reset+0xfb0f068c>
81110ba0:	003ef106 	br	81110768 <__reset+0xfb0f0768>
81110ba4:	9080040c 	andi	r2,r18,16
81110ba8:	1000921e 	bne	r2,zero,81110df4 <___vfprintf_internal_r+0x1aac>
81110bac:	9480100c 	andi	r18,r18,64
81110bb0:	90013926 	beq	r18,zero,81111098 <___vfprintf_internal_r+0x1d50>
81110bb4:	d9002d17 	ldw	r4,180(sp)
81110bb8:	d9402f17 	ldw	r5,188(sp)
81110bbc:	20800017 	ldw	r2,0(r4)
81110bc0:	21000104 	addi	r4,r4,4
81110bc4:	d9002d15 	stw	r4,180(sp)
81110bc8:	1140000d 	sth	r5,0(r2)
81110bcc:	003a1606 	br	8110f428 <__reset+0xfb0ef428>
81110bd0:	9080100c 	andi	r2,r18,64
81110bd4:	10008026 	beq	r2,zero,81110dd8 <___vfprintf_internal_r+0x1a90>
81110bd8:	d8c02d17 	ldw	r3,180(sp)
81110bdc:	1cc0000f 	ldh	r19,0(r3)
81110be0:	18c00104 	addi	r3,r3,4
81110be4:	d8c02d15 	stw	r3,180(sp)
81110be8:	982dd7fa 	srai	r22,r19,31
81110bec:	b005883a 	mov	r2,r22
81110bf0:	003b1f06 	br	8110f870 <__reset+0xfb0ef870>
81110bf4:	9080100c 	andi	r2,r18,64
81110bf8:	d8002785 	stb	zero,158(sp)
81110bfc:	10008a1e 	bne	r2,zero,81110e28 <___vfprintf_internal_r+0x1ae0>
81110c00:	d9402d17 	ldw	r5,180(sp)
81110c04:	d8c02917 	ldw	r3,164(sp)
81110c08:	002d883a 	mov	r22,zero
81110c0c:	28800104 	addi	r2,r5,4
81110c10:	2cc00017 	ldw	r19,0(r5)
81110c14:	183e4b0e 	bge	r3,zero,81110544 <__reset+0xfb0f0544>
81110c18:	9d86b03a 	or	r3,r19,r22
81110c1c:	d8802d15 	stw	r2,180(sp)
81110c20:	183e4c1e 	bne	r3,zero,81110554 <__reset+0xfb0f0554>
81110c24:	0039883a 	mov	fp,zero
81110c28:	0005883a 	mov	r2,zero
81110c2c:	003d4006 	br	81110130 <__reset+0xfb0f0130>
81110c30:	016044b4 	movhi	r5,33042
81110c34:	2948e484 	addi	r5,r5,9106
81110c38:	d9402b15 	stw	r5,172(sp)
81110c3c:	d9402b17 	ldw	r5,172(sp)
81110c40:	1c47883a 	add	r3,r3,r17
81110c44:	10800044 	addi	r2,r2,1
81110c48:	41400015 	stw	r5,0(r8)
81110c4c:	44400115 	stw	r17,4(r8)
81110c50:	d8c02015 	stw	r3,128(sp)
81110c54:	d8801f15 	stw	r2,124(sp)
81110c58:	010001c4 	movi	r4,7
81110c5c:	20bec816 	blt	r4,r2,81110780 <__reset+0xfb0f0780>
81110c60:	42000204 	addi	r8,r8,8
81110c64:	003ecd06 	br	8111079c <__reset+0xfb0f079c>
81110c68:	d9002917 	ldw	r4,164(sp)
81110c6c:	d8002785 	stb	zero,158(sp)
81110c70:	203d2d16 	blt	r4,zero,81110128 <__reset+0xfb0f0128>
81110c74:	00bfdfc4 	movi	r2,-129
81110c78:	90a4703a 	and	r18,r18,r2
81110c7c:	003a9106 	br	8110f6c4 <__reset+0xfb0ef6c4>
81110c80:	012044b4 	movhi	r4,33042
81110c84:	2108e484 	addi	r4,r4,9106
81110c88:	d9002b15 	stw	r4,172(sp)
81110c8c:	003c0c06 	br	8110fcc0 <__reset+0xfb0efcc0>
81110c90:	d9002c17 	ldw	r4,176(sp)
81110c94:	d9801e04 	addi	r6,sp,120
81110c98:	b80b883a 	mov	r5,r23
81110c9c:	11172940 	call	81117294 <__sprint_r>
81110ca0:	103aab1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110ca4:	d8c02017 	ldw	r3,128(sp)
81110ca8:	da000404 	addi	r8,sp,16
81110cac:	003d4106 	br	811101b4 <__reset+0xfb0f01b4>
81110cb0:	d8801f17 	ldw	r2,124(sp)
81110cb4:	016044b4 	movhi	r5,33042
81110cb8:	01000044 	movi	r4,1
81110cbc:	18c00044 	addi	r3,r3,1
81110cc0:	10800044 	addi	r2,r2,1
81110cc4:	2948dc04 	addi	r5,r5,9072
81110cc8:	41000115 	stw	r4,4(r8)
81110ccc:	41400015 	stw	r5,0(r8)
81110cd0:	d8c02015 	stw	r3,128(sp)
81110cd4:	d8801f15 	stw	r2,124(sp)
81110cd8:	010001c4 	movi	r4,7
81110cdc:	20805c16 	blt	r4,r2,81110e50 <___vfprintf_internal_r+0x1b08>
81110ce0:	42000204 	addi	r8,r8,8
81110ce4:	8800041e 	bne	r17,zero,81110cf8 <___vfprintf_internal_r+0x19b0>
81110ce8:	d8803317 	ldw	r2,204(sp)
81110cec:	1000021e 	bne	r2,zero,81110cf8 <___vfprintf_internal_r+0x19b0>
81110cf0:	9080004c 	andi	r2,r18,1
81110cf4:	103c0926 	beq	r2,zero,8110fd1c <__reset+0xfb0efd1c>
81110cf8:	d9003717 	ldw	r4,220(sp)
81110cfc:	d8801f17 	ldw	r2,124(sp)
81110d00:	d9403417 	ldw	r5,208(sp)
81110d04:	20c7883a 	add	r3,r4,r3
81110d08:	10800044 	addi	r2,r2,1
81110d0c:	41000115 	stw	r4,4(r8)
81110d10:	41400015 	stw	r5,0(r8)
81110d14:	d8c02015 	stw	r3,128(sp)
81110d18:	d8801f15 	stw	r2,124(sp)
81110d1c:	010001c4 	movi	r4,7
81110d20:	20812116 	blt	r4,r2,811111a8 <___vfprintf_internal_r+0x1e60>
81110d24:	42000204 	addi	r8,r8,8
81110d28:	0463c83a 	sub	r17,zero,r17
81110d2c:	0440730e 	bge	zero,r17,81110efc <___vfprintf_internal_r+0x1bb4>
81110d30:	05800404 	movi	r22,16
81110d34:	b440860e 	bge	r22,r17,81110f50 <___vfprintf_internal_r+0x1c08>
81110d38:	016044b4 	movhi	r5,33042
81110d3c:	2948e484 	addi	r5,r5,9106
81110d40:	d9402b15 	stw	r5,172(sp)
81110d44:	070001c4 	movi	fp,7
81110d48:	dcc02c17 	ldw	r19,176(sp)
81110d4c:	00000306 	br	81110d5c <___vfprintf_internal_r+0x1a14>
81110d50:	42000204 	addi	r8,r8,8
81110d54:	8c7ffc04 	addi	r17,r17,-16
81110d58:	b440800e 	bge	r22,r17,81110f5c <___vfprintf_internal_r+0x1c14>
81110d5c:	18c00404 	addi	r3,r3,16
81110d60:	10800044 	addi	r2,r2,1
81110d64:	45000015 	stw	r20,0(r8)
81110d68:	45800115 	stw	r22,4(r8)
81110d6c:	d8c02015 	stw	r3,128(sp)
81110d70:	d8801f15 	stw	r2,124(sp)
81110d74:	e0bff60e 	bge	fp,r2,81110d50 <__reset+0xfb0f0d50>
81110d78:	d9801e04 	addi	r6,sp,120
81110d7c:	b80b883a 	mov	r5,r23
81110d80:	9809883a 	mov	r4,r19
81110d84:	11172940 	call	81117294 <__sprint_r>
81110d88:	103a711e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110d8c:	d8c02017 	ldw	r3,128(sp)
81110d90:	d8801f17 	ldw	r2,124(sp)
81110d94:	da000404 	addi	r8,sp,16
81110d98:	003fee06 	br	81110d54 <__reset+0xfb0f0d54>
81110d9c:	00bfffc4 	movi	r2,-1
81110da0:	003a6f06 	br	8110f760 <__reset+0xfb0ef760>
81110da4:	008011c4 	movi	r2,71
81110da8:	1440b816 	blt	r2,r17,8111108c <___vfprintf_internal_r+0x1d44>
81110dac:	042044b4 	movhi	r16,33042
81110db0:	8408ce04 	addi	r16,r16,9016
81110db4:	00c000c4 	movi	r3,3
81110db8:	00bfdfc4 	movi	r2,-129
81110dbc:	d8c02a15 	stw	r3,168(sp)
81110dc0:	90a4703a 	and	r18,r18,r2
81110dc4:	df002783 	ldbu	fp,158(sp)
81110dc8:	d8c02e15 	stw	r3,184(sp)
81110dcc:	d8002915 	stw	zero,164(sp)
81110dd0:	d8003215 	stw	zero,200(sp)
81110dd4:	003b2906 	br	8110fa7c <__reset+0xfb0efa7c>
81110dd8:	d9002d17 	ldw	r4,180(sp)
81110ddc:	24c00017 	ldw	r19,0(r4)
81110de0:	21000104 	addi	r4,r4,4
81110de4:	d9002d15 	stw	r4,180(sp)
81110de8:	982dd7fa 	srai	r22,r19,31
81110dec:	b005883a 	mov	r2,r22
81110df0:	003a9f06 	br	8110f870 <__reset+0xfb0ef870>
81110df4:	d9402d17 	ldw	r5,180(sp)
81110df8:	d8c02f17 	ldw	r3,188(sp)
81110dfc:	28800017 	ldw	r2,0(r5)
81110e00:	29400104 	addi	r5,r5,4
81110e04:	d9402d15 	stw	r5,180(sp)
81110e08:	10c00015 	stw	r3,0(r2)
81110e0c:	00398606 	br	8110f428 <__reset+0xfb0ef428>
81110e10:	d9402d17 	ldw	r5,180(sp)
81110e14:	002d883a 	mov	r22,zero
81110e18:	2cc00017 	ldw	r19,0(r5)
81110e1c:	29400104 	addi	r5,r5,4
81110e20:	d9402d15 	stw	r5,180(sp)
81110e24:	003c2306 	br	8110feb4 <__reset+0xfb0efeb4>
81110e28:	d8c02d17 	ldw	r3,180(sp)
81110e2c:	d9002917 	ldw	r4,164(sp)
81110e30:	002d883a 	mov	r22,zero
81110e34:	18800104 	addi	r2,r3,4
81110e38:	1cc0000b 	ldhu	r19,0(r3)
81110e3c:	203dc10e 	bge	r4,zero,81110544 <__reset+0xfb0f0544>
81110e40:	003f7506 	br	81110c18 <__reset+0xfb0f0c18>
81110e44:	042044b4 	movhi	r16,33042
81110e48:	8408cc04 	addi	r16,r16,9008
81110e4c:	003acc06 	br	8110f980 <__reset+0xfb0ef980>
81110e50:	d9002c17 	ldw	r4,176(sp)
81110e54:	d9801e04 	addi	r6,sp,120
81110e58:	b80b883a 	mov	r5,r23
81110e5c:	11172940 	call	81117294 <__sprint_r>
81110e60:	103a3b1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110e64:	dc402617 	ldw	r17,152(sp)
81110e68:	d8c02017 	ldw	r3,128(sp)
81110e6c:	da000404 	addi	r8,sp,16
81110e70:	003f9c06 	br	81110ce4 <__reset+0xfb0f0ce4>
81110e74:	ac400043 	ldbu	r17,1(r21)
81110e78:	94800814 	ori	r18,r18,32
81110e7c:	ad400044 	addi	r21,r21,1
81110e80:	8c403fcc 	andi	r17,r17,255
81110e84:	8c40201c 	xori	r17,r17,128
81110e88:	8c7fe004 	addi	r17,r17,-128
81110e8c:	00398f06 	br	8110f4cc <__reset+0xfb0ef4cc>
81110e90:	d8c02d15 	stw	r3,180(sp)
81110e94:	0039883a 	mov	fp,zero
81110e98:	003e3506 	br	81110770 <__reset+0xfb0f0770>
81110e9c:	d9002c17 	ldw	r4,176(sp)
81110ea0:	d9801e04 	addi	r6,sp,120
81110ea4:	b80b883a 	mov	r5,r23
81110ea8:	11172940 	call	81117294 <__sprint_r>
81110eac:	103a281e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110eb0:	d8c02017 	ldw	r3,128(sp)
81110eb4:	da000404 	addi	r8,sp,16
81110eb8:	003cd006 	br	811101fc <__reset+0xfb0f01fc>
81110ebc:	8009883a 	mov	r4,r16
81110ec0:	da003d15 	stw	r8,244(sp)
81110ec4:	1115cf40 	call	81115cf4 <strlen>
81110ec8:	d8802e15 	stw	r2,184(sp)
81110ecc:	da003d17 	ldw	r8,244(sp)
81110ed0:	103c340e 	bge	r2,zero,8110ffa4 <__reset+0xfb0effa4>
81110ed4:	0005883a 	mov	r2,zero
81110ed8:	003c3206 	br	8110ffa4 <__reset+0xfb0effa4>
81110edc:	d9002c17 	ldw	r4,176(sp)
81110ee0:	d9801e04 	addi	r6,sp,120
81110ee4:	b80b883a 	mov	r5,r23
81110ee8:	11172940 	call	81117294 <__sprint_r>
81110eec:	103a181e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110ef0:	d8c02017 	ldw	r3,128(sp)
81110ef4:	d8801f17 	ldw	r2,124(sp)
81110ef8:	da000404 	addi	r8,sp,16
81110efc:	d9403317 	ldw	r5,204(sp)
81110f00:	10800044 	addi	r2,r2,1
81110f04:	44000015 	stw	r16,0(r8)
81110f08:	28c7883a 	add	r3,r5,r3
81110f0c:	003b7d06 	br	8110fd04 <__reset+0xfb0efd04>
81110f10:	012044b4 	movhi	r4,33042
81110f14:	2108e884 	addi	r4,r4,9122
81110f18:	d9003515 	stw	r4,212(sp)
81110f1c:	003b1406 	br	8110fb70 <__reset+0xfb0efb70>
81110f20:	013fffc4 	movi	r4,-1
81110f24:	003a3506 	br	8110f7fc <__reset+0xfb0ef7fc>
81110f28:	0023883a 	mov	r17,zero
81110f2c:	003d9d06 	br	811105a4 <__reset+0xfb0f05a4>
81110f30:	d9002c17 	ldw	r4,176(sp)
81110f34:	d9801e04 	addi	r6,sp,120
81110f38:	b80b883a 	mov	r5,r23
81110f3c:	11172940 	call	81117294 <__sprint_r>
81110f40:	103a031e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110f44:	d8c02017 	ldw	r3,128(sp)
81110f48:	da000404 	addi	r8,sp,16
81110f4c:	003d9406 	br	811105a0 <__reset+0xfb0f05a0>
81110f50:	012044b4 	movhi	r4,33042
81110f54:	2108e484 	addi	r4,r4,9106
81110f58:	d9002b15 	stw	r4,172(sp)
81110f5c:	d9002b17 	ldw	r4,172(sp)
81110f60:	1c47883a 	add	r3,r3,r17
81110f64:	10800044 	addi	r2,r2,1
81110f68:	41000015 	stw	r4,0(r8)
81110f6c:	44400115 	stw	r17,4(r8)
81110f70:	d8c02015 	stw	r3,128(sp)
81110f74:	d8801f15 	stw	r2,124(sp)
81110f78:	010001c4 	movi	r4,7
81110f7c:	20bfd716 	blt	r4,r2,81110edc <__reset+0xfb0f0edc>
81110f80:	42000204 	addi	r8,r8,8
81110f84:	003fdd06 	br	81110efc <__reset+0xfb0f0efc>
81110f88:	d9002c17 	ldw	r4,176(sp)
81110f8c:	d9801e04 	addi	r6,sp,120
81110f90:	b80b883a 	mov	r5,r23
81110f94:	11172940 	call	81117294 <__sprint_r>
81110f98:	1039ed1e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
81110f9c:	d8802617 	ldw	r2,152(sp)
81110fa0:	d8c02017 	ldw	r3,128(sp)
81110fa4:	da000404 	addi	r8,sp,16
81110fa8:	003e1006 	br	811107ec <__reset+0xfb0f07ec>
81110fac:	00800044 	movi	r2,1
81110fb0:	10803fcc 	andi	r2,r2,255
81110fb4:	00c00044 	movi	r3,1
81110fb8:	10fa3526 	beq	r2,r3,8110f890 <__reset+0xfb0ef890>
81110fbc:	00c00084 	movi	r3,2
81110fc0:	10fbcb26 	beq	r2,r3,8110fef0 <__reset+0xfb0efef0>
81110fc4:	003a8f06 	br	8110fa04 <__reset+0xfb0efa04>
81110fc8:	012044b4 	movhi	r4,33042
81110fcc:	2108e884 	addi	r4,r4,9122
81110fd0:	d9003515 	stw	r4,212(sp)
81110fd4:	003b7606 	br	8110fdb0 <__reset+0xfb0efdb0>
81110fd8:	d8802917 	ldw	r2,164(sp)
81110fdc:	00c00184 	movi	r3,6
81110fe0:	1880012e 	bgeu	r3,r2,81110fe8 <___vfprintf_internal_r+0x1ca0>
81110fe4:	1805883a 	mov	r2,r3
81110fe8:	d8802e15 	stw	r2,184(sp)
81110fec:	1000ef16 	blt	r2,zero,811113ac <___vfprintf_internal_r+0x2064>
81110ff0:	042044b4 	movhi	r16,33042
81110ff4:	d8802a15 	stw	r2,168(sp)
81110ff8:	dcc02d15 	stw	r19,180(sp)
81110ffc:	d8002915 	stw	zero,164(sp)
81111000:	d8003215 	stw	zero,200(sp)
81111004:	8408da04 	addi	r16,r16,9064
81111008:	0039883a 	mov	fp,zero
8111100c:	003aa206 	br	8110fa98 <__reset+0xfb0efa98>
81111010:	0021883a 	mov	r16,zero
81111014:	003e0706 	br	81110834 <__reset+0xfb0f0834>
81111018:	d9002c17 	ldw	r4,176(sp)
8111101c:	d9801e04 	addi	r6,sp,120
81111020:	b80b883a 	mov	r5,r23
81111024:	11172940 	call	81117294 <__sprint_r>
81111028:	1039c91e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
8111102c:	d8802617 	ldw	r2,152(sp)
81111030:	d9403317 	ldw	r5,204(sp)
81111034:	d8c02017 	ldw	r3,128(sp)
81111038:	da000404 	addi	r8,sp,16
8111103c:	2885c83a 	sub	r2,r5,r2
81111040:	003dfb06 	br	81110830 <__reset+0xfb0f0830>
81111044:	9080004c 	andi	r2,r18,1
81111048:	103e8f1e 	bne	r2,zero,81110a88 <__reset+0xfb0f0a88>
8111104c:	d8802117 	ldw	r2,132(sp)
81111050:	003e9e06 	br	81110acc <__reset+0xfb0f0acc>
81111054:	1025883a 	mov	r18,r2
81111058:	0039883a 	mov	fp,zero
8111105c:	00800084 	movi	r2,2
81111060:	003fd306 	br	81110fb0 <__reset+0xfb0f0fb0>
81111064:	07000b44 	movi	fp,45
81111068:	df002785 	stb	fp,158(sp)
8111106c:	003a4006 	br	8110f970 <__reset+0xfb0ef970>
81111070:	00c00b44 	movi	r3,45
81111074:	d8c02785 	stb	r3,158(sp)
81111078:	d8802a15 	stw	r2,168(sp)
8111107c:	dc802b17 	ldw	r18,172(sp)
81111080:	d8002915 	stw	zero,164(sp)
81111084:	07000b44 	movi	fp,45
81111088:	003a8006 	br	8110fa8c <__reset+0xfb0efa8c>
8111108c:	042044b4 	movhi	r16,33042
81111090:	8408cf04 	addi	r16,r16,9020
81111094:	003f4706 	br	81110db4 <__reset+0xfb0f0db4>
81111098:	d8c02d17 	ldw	r3,180(sp)
8111109c:	d9002f17 	ldw	r4,188(sp)
811110a0:	18800017 	ldw	r2,0(r3)
811110a4:	18c00104 	addi	r3,r3,4
811110a8:	d8c02d15 	stw	r3,180(sp)
811110ac:	11000015 	stw	r4,0(r2)
811110b0:	0038dd06 	br	8110f428 <__reset+0xfb0ef428>
811110b4:	dd802617 	ldw	r22,152(sp)
811110b8:	00bfff44 	movi	r2,-3
811110bc:	b0801c16 	blt	r22,r2,81111130 <___vfprintf_internal_r+0x1de8>
811110c0:	d9402917 	ldw	r5,164(sp)
811110c4:	2d801a16 	blt	r5,r22,81111130 <___vfprintf_internal_r+0x1de8>
811110c8:	dd803215 	stw	r22,200(sp)
811110cc:	003e8906 	br	81110af4 <__reset+0xfb0f0af4>
811110d0:	012044b4 	movhi	r4,33042
811110d4:	2108e484 	addi	r4,r4,9106
811110d8:	d9002b15 	stw	r4,172(sp)
811110dc:	003c9106 	br	81110324 <__reset+0xfb0f0324>
811110e0:	e005883a 	mov	r2,fp
811110e4:	003e7906 	br	81110acc <__reset+0xfb0f0acc>
811110e8:	d9402917 	ldw	r5,164(sp)
811110ec:	df002783 	ldbu	fp,158(sp)
811110f0:	dcc02d15 	stw	r19,180(sp)
811110f4:	d9402a15 	stw	r5,168(sp)
811110f8:	d9402e15 	stw	r5,184(sp)
811110fc:	d8002915 	stw	zero,164(sp)
81111100:	d8003215 	stw	zero,200(sp)
81111104:	003a5d06 	br	8110fa7c <__reset+0xfb0efa7c>
81111108:	9080004c 	andi	r2,r18,1
8111110c:	0039883a 	mov	fp,zero
81111110:	10000426 	beq	r2,zero,81111124 <___vfprintf_internal_r+0x1ddc>
81111114:	00800c04 	movi	r2,48
81111118:	dc001dc4 	addi	r16,sp,119
8111111c:	d8801dc5 	stb	r2,119(sp)
81111120:	003b8006 	br	8110ff24 <__reset+0xfb0eff24>
81111124:	d8002e15 	stw	zero,184(sp)
81111128:	dc001e04 	addi	r16,sp,120
8111112c:	003a4d06 	br	8110fa64 <__reset+0xfb0efa64>
81111130:	8c7fff84 	addi	r17,r17,-2
81111134:	b5bfffc4 	addi	r22,r22,-1
81111138:	dd802615 	stw	r22,152(sp)
8111113c:	dc4022c5 	stb	r17,139(sp)
81111140:	b000bf16 	blt	r22,zero,81111440 <___vfprintf_internal_r+0x20f8>
81111144:	00800ac4 	movi	r2,43
81111148:	d8802305 	stb	r2,140(sp)
8111114c:	00800244 	movi	r2,9
81111150:	15807016 	blt	r2,r22,81111314 <___vfprintf_internal_r+0x1fcc>
81111154:	00800c04 	movi	r2,48
81111158:	b5800c04 	addi	r22,r22,48
8111115c:	d8802345 	stb	r2,141(sp)
81111160:	dd802385 	stb	r22,142(sp)
81111164:	d88023c4 	addi	r2,sp,143
81111168:	df0022c4 	addi	fp,sp,139
8111116c:	d8c03317 	ldw	r3,204(sp)
81111170:	1739c83a 	sub	fp,r2,fp
81111174:	d9003317 	ldw	r4,204(sp)
81111178:	e0c7883a 	add	r3,fp,r3
8111117c:	df003a15 	stw	fp,232(sp)
81111180:	d8c02e15 	stw	r3,184(sp)
81111184:	00800044 	movi	r2,1
81111188:	1100b30e 	bge	r2,r4,81111458 <___vfprintf_internal_r+0x2110>
8111118c:	d8c02e17 	ldw	r3,184(sp)
81111190:	18c00044 	addi	r3,r3,1
81111194:	d8c02e15 	stw	r3,184(sp)
81111198:	1805883a 	mov	r2,r3
8111119c:	1800ac16 	blt	r3,zero,81111450 <___vfprintf_internal_r+0x2108>
811111a0:	d8003215 	stw	zero,200(sp)
811111a4:	003e5d06 	br	81110b1c <__reset+0xfb0f0b1c>
811111a8:	d9002c17 	ldw	r4,176(sp)
811111ac:	d9801e04 	addi	r6,sp,120
811111b0:	b80b883a 	mov	r5,r23
811111b4:	11172940 	call	81117294 <__sprint_r>
811111b8:	1039651e 	bne	r2,zero,8110f750 <__reset+0xfb0ef750>
811111bc:	dc402617 	ldw	r17,152(sp)
811111c0:	d8c02017 	ldw	r3,128(sp)
811111c4:	d8801f17 	ldw	r2,124(sp)
811111c8:	da000404 	addi	r8,sp,16
811111cc:	003ed606 	br	81110d28 <__reset+0xfb0f0d28>
811111d0:	582b883a 	mov	r21,r11
811111d4:	d8002915 	stw	zero,164(sp)
811111d8:	0038bd06 	br	8110f4d0 <__reset+0xfb0ef4d0>
811111dc:	d8802917 	ldw	r2,164(sp)
811111e0:	103e071e 	bne	r2,zero,81110a00 <__reset+0xfb0f0a00>
811111e4:	dc002915 	stw	r16,164(sp)
811111e8:	003e0506 	br	81110a00 <__reset+0xfb0f0a00>
811111ec:	d9002917 	ldw	r4,164(sp)
811111f0:	20c00044 	addi	r3,r4,1
811111f4:	003e0f06 	br	81110a34 <__reset+0xfb0f0a34>
811111f8:	01400184 	movi	r5,6
811111fc:	d9402915 	stw	r5,164(sp)
81111200:	003dff06 	br	81110a00 <__reset+0xfb0f0a00>
81111204:	d8802104 	addi	r2,sp,132
81111208:	d8800315 	stw	r2,12(sp)
8111120c:	d8802504 	addi	r2,sp,148
81111210:	d8800215 	stw	r2,8(sp)
81111214:	d8802604 	addi	r2,sp,152
81111218:	d8800115 	stw	r2,4(sp)
8111121c:	d8802917 	ldw	r2,164(sp)
81111220:	d9403617 	ldw	r5,216(sp)
81111224:	d9002c17 	ldw	r4,176(sp)
81111228:	d8800015 	stw	r2,0(sp)
8111122c:	01c000c4 	movi	r7,3
81111230:	980d883a 	mov	r6,r19
81111234:	da003d15 	stw	r8,244(sp)
81111238:	1111a200 	call	81111a20 <_dtoa_r>
8111123c:	d8c02917 	ldw	r3,164(sp)
81111240:	da003d17 	ldw	r8,244(sp)
81111244:	1021883a 	mov	r16,r2
81111248:	10f9883a 	add	fp,r2,r3
8111124c:	81000007 	ldb	r4,0(r16)
81111250:	00800c04 	movi	r2,48
81111254:	20805e26 	beq	r4,r2,811113d0 <___vfprintf_internal_r+0x2088>
81111258:	d8c02617 	ldw	r3,152(sp)
8111125c:	e0f9883a 	add	fp,fp,r3
81111260:	003e0a06 	br	81110a8c <__reset+0xfb0f0a8c>
81111264:	00c00b44 	movi	r3,45
81111268:	24e0003c 	xorhi	r19,r4,32768
8111126c:	d8c02a05 	stb	r3,168(sp)
81111270:	003de906 	br	81110a18 <__reset+0xfb0f0a18>
81111274:	d8c03217 	ldw	r3,200(sp)
81111278:	00c07a0e 	bge	zero,r3,81111464 <___vfprintf_internal_r+0x211c>
8111127c:	00800044 	movi	r2,1
81111280:	d9003317 	ldw	r4,204(sp)
81111284:	1105883a 	add	r2,r2,r4
81111288:	d8802e15 	stw	r2,184(sp)
8111128c:	10004e16 	blt	r2,zero,811113c8 <___vfprintf_internal_r+0x2080>
81111290:	044019c4 	movi	r17,103
81111294:	003e2106 	br	81110b1c <__reset+0xfb0f0b1c>
81111298:	d9002917 	ldw	r4,164(sp)
8111129c:	d8802104 	addi	r2,sp,132
811112a0:	d8800315 	stw	r2,12(sp)
811112a4:	d9000015 	stw	r4,0(sp)
811112a8:	d8802504 	addi	r2,sp,148
811112ac:	d9403617 	ldw	r5,216(sp)
811112b0:	d9002c17 	ldw	r4,176(sp)
811112b4:	d8800215 	stw	r2,8(sp)
811112b8:	d8802604 	addi	r2,sp,152
811112bc:	d8800115 	stw	r2,4(sp)
811112c0:	01c000c4 	movi	r7,3
811112c4:	980d883a 	mov	r6,r19
811112c8:	da003d15 	stw	r8,244(sp)
811112cc:	1111a200 	call	81111a20 <_dtoa_r>
811112d0:	d8c02917 	ldw	r3,164(sp)
811112d4:	da003d17 	ldw	r8,244(sp)
811112d8:	1021883a 	mov	r16,r2
811112dc:	00801184 	movi	r2,70
811112e0:	80f9883a 	add	fp,r16,r3
811112e4:	88bfd926 	beq	r17,r2,8111124c <__reset+0xfb0f124c>
811112e8:	003de806 	br	81110a8c <__reset+0xfb0f0a8c>
811112ec:	d9002917 	ldw	r4,164(sp)
811112f0:	00c04d0e 	bge	zero,r3,81111428 <___vfprintf_internal_r+0x20e0>
811112f4:	2000441e 	bne	r4,zero,81111408 <___vfprintf_internal_r+0x20c0>
811112f8:	9480004c 	andi	r18,r18,1
811112fc:	9000421e 	bne	r18,zero,81111408 <___vfprintf_internal_r+0x20c0>
81111300:	1805883a 	mov	r2,r3
81111304:	18007016 	blt	r3,zero,811114c8 <___vfprintf_internal_r+0x2180>
81111308:	d8c03217 	ldw	r3,200(sp)
8111130c:	d8c02e15 	stw	r3,184(sp)
81111310:	003e0206 	br	81110b1c <__reset+0xfb0f0b1c>
81111314:	df0022c4 	addi	fp,sp,139
81111318:	dc002915 	stw	r16,164(sp)
8111131c:	4027883a 	mov	r19,r8
81111320:	e021883a 	mov	r16,fp
81111324:	b009883a 	mov	r4,r22
81111328:	01400284 	movi	r5,10
8111132c:	1119a240 	call	81119a24 <__modsi3>
81111330:	10800c04 	addi	r2,r2,48
81111334:	843fffc4 	addi	r16,r16,-1
81111338:	b009883a 	mov	r4,r22
8111133c:	01400284 	movi	r5,10
81111340:	80800005 	stb	r2,0(r16)
81111344:	11199a00 	call	811199a0 <__divsi3>
81111348:	102d883a 	mov	r22,r2
8111134c:	00800244 	movi	r2,9
81111350:	15bff416 	blt	r2,r22,81111324 <__reset+0xfb0f1324>
81111354:	9811883a 	mov	r8,r19
81111358:	b0800c04 	addi	r2,r22,48
8111135c:	8027883a 	mov	r19,r16
81111360:	997fffc4 	addi	r5,r19,-1
81111364:	98bfffc5 	stb	r2,-1(r19)
81111368:	dc002917 	ldw	r16,164(sp)
8111136c:	2f006a2e 	bgeu	r5,fp,81111518 <___vfprintf_internal_r+0x21d0>
81111370:	d9c02384 	addi	r7,sp,142
81111374:	3ccfc83a 	sub	r7,r7,r19
81111378:	d9002344 	addi	r4,sp,141
8111137c:	e1cf883a 	add	r7,fp,r7
81111380:	00000106 	br	81111388 <___vfprintf_internal_r+0x2040>
81111384:	28800003 	ldbu	r2,0(r5)
81111388:	20800005 	stb	r2,0(r4)
8111138c:	21000044 	addi	r4,r4,1
81111390:	29400044 	addi	r5,r5,1
81111394:	393ffb1e 	bne	r7,r4,81111384 <__reset+0xfb0f1384>
81111398:	d8802304 	addi	r2,sp,140
8111139c:	14c5c83a 	sub	r2,r2,r19
811113a0:	d8c02344 	addi	r3,sp,141
811113a4:	1885883a 	add	r2,r3,r2
811113a8:	003f7006 	br	8111116c <__reset+0xfb0f116c>
811113ac:	0005883a 	mov	r2,zero
811113b0:	003f0f06 	br	81110ff0 <__reset+0xfb0f0ff0>
811113b4:	d8c03217 	ldw	r3,200(sp)
811113b8:	18c00044 	addi	r3,r3,1
811113bc:	d8c02e15 	stw	r3,184(sp)
811113c0:	1805883a 	mov	r2,r3
811113c4:	183fb20e 	bge	r3,zero,81111290 <__reset+0xfb0f1290>
811113c8:	0005883a 	mov	r2,zero
811113cc:	003fb006 	br	81111290 <__reset+0xfb0f1290>
811113d0:	d9003617 	ldw	r4,216(sp)
811113d4:	000d883a 	mov	r6,zero
811113d8:	000f883a 	mov	r7,zero
811113dc:	980b883a 	mov	r5,r19
811113e0:	d8c03c15 	stw	r3,240(sp)
811113e4:	da003d15 	stw	r8,244(sp)
811113e8:	111ace80 	call	8111ace8 <__eqdf2>
811113ec:	d8c03c17 	ldw	r3,240(sp)
811113f0:	da003d17 	ldw	r8,244(sp)
811113f4:	103f9826 	beq	r2,zero,81111258 <__reset+0xfb0f1258>
811113f8:	00800044 	movi	r2,1
811113fc:	10c7c83a 	sub	r3,r2,r3
81111400:	d8c02615 	stw	r3,152(sp)
81111404:	003f9506 	br	8111125c <__reset+0xfb0f125c>
81111408:	d9002917 	ldw	r4,164(sp)
8111140c:	d8c03217 	ldw	r3,200(sp)
81111410:	20800044 	addi	r2,r4,1
81111414:	1885883a 	add	r2,r3,r2
81111418:	d8802e15 	stw	r2,184(sp)
8111141c:	103dbf0e 	bge	r2,zero,81110b1c <__reset+0xfb0f0b1c>
81111420:	0005883a 	mov	r2,zero
81111424:	003dbd06 	br	81110b1c <__reset+0xfb0f0b1c>
81111428:	2000211e 	bne	r4,zero,811114b0 <___vfprintf_internal_r+0x2168>
8111142c:	9480004c 	andi	r18,r18,1
81111430:	90001f1e 	bne	r18,zero,811114b0 <___vfprintf_internal_r+0x2168>
81111434:	00800044 	movi	r2,1
81111438:	d8802e15 	stw	r2,184(sp)
8111143c:	003db706 	br	81110b1c <__reset+0xfb0f0b1c>
81111440:	00800b44 	movi	r2,45
81111444:	05adc83a 	sub	r22,zero,r22
81111448:	d8802305 	stb	r2,140(sp)
8111144c:	003f3f06 	br	8111114c <__reset+0xfb0f114c>
81111450:	0005883a 	mov	r2,zero
81111454:	003f5206 	br	811111a0 <__reset+0xfb0f11a0>
81111458:	90a4703a 	and	r18,r18,r2
8111145c:	903f4e26 	beq	r18,zero,81111198 <__reset+0xfb0f1198>
81111460:	003f4a06 	br	8111118c <__reset+0xfb0f118c>
81111464:	00800084 	movi	r2,2
81111468:	10c5c83a 	sub	r2,r2,r3
8111146c:	003f8406 	br	81111280 <__reset+0xfb0f1280>
81111470:	d8802d17 	ldw	r2,180(sp)
81111474:	d9002d17 	ldw	r4,180(sp)
81111478:	ac400043 	ldbu	r17,1(r21)
8111147c:	10800017 	ldw	r2,0(r2)
81111480:	582b883a 	mov	r21,r11
81111484:	d8802915 	stw	r2,164(sp)
81111488:	20800104 	addi	r2,r4,4
8111148c:	d9002917 	ldw	r4,164(sp)
81111490:	d8802d15 	stw	r2,180(sp)
81111494:	203e7a0e 	bge	r4,zero,81110e80 <__reset+0xfb0f0e80>
81111498:	8c403fcc 	andi	r17,r17,255
8111149c:	00bfffc4 	movi	r2,-1
811114a0:	8c40201c 	xori	r17,r17,128
811114a4:	d8802915 	stw	r2,164(sp)
811114a8:	8c7fe004 	addi	r17,r17,-128
811114ac:	00380706 	br	8110f4cc <__reset+0xfb0ef4cc>
811114b0:	d8c02917 	ldw	r3,164(sp)
811114b4:	18c00084 	addi	r3,r3,2
811114b8:	d8c02e15 	stw	r3,184(sp)
811114bc:	1805883a 	mov	r2,r3
811114c0:	183d960e 	bge	r3,zero,81110b1c <__reset+0xfb0f0b1c>
811114c4:	003fd606 	br	81111420 <__reset+0xfb0f1420>
811114c8:	0005883a 	mov	r2,zero
811114cc:	003f8e06 	br	81111308 <__reset+0xfb0f1308>
811114d0:	9080004c 	andi	r2,r18,1
811114d4:	103f811e 	bne	r2,zero,811112dc <__reset+0xfb0f12dc>
811114d8:	d8802117 	ldw	r2,132(sp)
811114dc:	1405c83a 	sub	r2,r2,r16
811114e0:	d8803315 	stw	r2,204(sp)
811114e4:	b47ef326 	beq	r22,r17,811110b4 <__reset+0xfb0f10b4>
811114e8:	dd802617 	ldw	r22,152(sp)
811114ec:	003f1106 	br	81111134 <__reset+0xfb0f1134>
811114f0:	d9c02785 	stb	r7,158(sp)
811114f4:	00390406 	br	8110f908 <__reset+0xfb0ef908>
811114f8:	d9c02785 	stb	r7,158(sp)
811114fc:	0038d306 	br	8110f84c <__reset+0xfb0ef84c>
81111500:	d9c02785 	stb	r7,158(sp)
81111504:	003a6106 	br	8110fe8c <__reset+0xfb0efe8c>
81111508:	d9c02785 	stb	r7,158(sp)
8111150c:	003af806 	br	811100f0 <__reset+0xfb0f00f0>
81111510:	0005883a 	mov	r2,zero
81111514:	003d7e06 	br	81110b10 <__reset+0xfb0f0b10>
81111518:	d8802344 	addi	r2,sp,141
8111151c:	003f1306 	br	8111116c <__reset+0xfb0f116c>
81111520:	d9c02785 	stb	r7,158(sp)
81111524:	00392306 	br	8110f9b4 <__reset+0xfb0ef9b4>
81111528:	d9c02785 	stb	r7,158(sp)
8111152c:	003aa906 	br	8110ffd4 <__reset+0xfb0effd4>
81111530:	d9c02785 	stb	r7,158(sp)
81111534:	003a3d06 	br	8110fe2c <__reset+0xfb0efe2c>
81111538:	d9c02785 	stb	r7,158(sp)
8111153c:	003aca06 	br	81110068 <__reset+0xfb0f0068>

81111540 <__vfprintf_internal>:
81111540:	00a044b4 	movhi	r2,33042
81111544:	10910f04 	addi	r2,r2,17468
81111548:	300f883a 	mov	r7,r6
8111154c:	280d883a 	mov	r6,r5
81111550:	200b883a 	mov	r5,r4
81111554:	11000017 	ldw	r4,0(r2)
81111558:	110f3481 	jmpi	8110f348 <___vfprintf_internal_r>

8111155c <__sbprintf>:
8111155c:	2880030b 	ldhu	r2,12(r5)
81111560:	2ac01917 	ldw	r11,100(r5)
81111564:	2a80038b 	ldhu	r10,14(r5)
81111568:	2a400717 	ldw	r9,28(r5)
8111156c:	2a000917 	ldw	r8,36(r5)
81111570:	defee204 	addi	sp,sp,-1144
81111574:	00c10004 	movi	r3,1024
81111578:	dc011a15 	stw	r16,1128(sp)
8111157c:	10bfff4c 	andi	r2,r2,65533
81111580:	2821883a 	mov	r16,r5
81111584:	d8cb883a 	add	r5,sp,r3
81111588:	dc811c15 	stw	r18,1136(sp)
8111158c:	dc411b15 	stw	r17,1132(sp)
81111590:	dfc11d15 	stw	ra,1140(sp)
81111594:	2025883a 	mov	r18,r4
81111598:	d881030d 	sth	r2,1036(sp)
8111159c:	dac11915 	stw	r11,1124(sp)
811115a0:	da81038d 	sth	r10,1038(sp)
811115a4:	da410715 	stw	r9,1052(sp)
811115a8:	da010915 	stw	r8,1060(sp)
811115ac:	dec10015 	stw	sp,1024(sp)
811115b0:	dec10415 	stw	sp,1040(sp)
811115b4:	d8c10215 	stw	r3,1032(sp)
811115b8:	d8c10515 	stw	r3,1044(sp)
811115bc:	d8010615 	stw	zero,1048(sp)
811115c0:	110f3480 	call	8110f348 <___vfprintf_internal_r>
811115c4:	1023883a 	mov	r17,r2
811115c8:	10000416 	blt	r2,zero,811115dc <__sbprintf+0x80>
811115cc:	d9410004 	addi	r5,sp,1024
811115d0:	9009883a 	mov	r4,r18
811115d4:	11132c40 	call	811132c4 <_fflush_r>
811115d8:	10000d1e 	bne	r2,zero,81111610 <__sbprintf+0xb4>
811115dc:	d881030b 	ldhu	r2,1036(sp)
811115e0:	1080100c 	andi	r2,r2,64
811115e4:	10000326 	beq	r2,zero,811115f4 <__sbprintf+0x98>
811115e8:	8080030b 	ldhu	r2,12(r16)
811115ec:	10801014 	ori	r2,r2,64
811115f0:	8080030d 	sth	r2,12(r16)
811115f4:	8805883a 	mov	r2,r17
811115f8:	dfc11d17 	ldw	ra,1140(sp)
811115fc:	dc811c17 	ldw	r18,1136(sp)
81111600:	dc411b17 	ldw	r17,1132(sp)
81111604:	dc011a17 	ldw	r16,1128(sp)
81111608:	dec11e04 	addi	sp,sp,1144
8111160c:	f800283a 	ret
81111610:	047fffc4 	movi	r17,-1
81111614:	003ff106 	br	811115dc <__reset+0xfb0f15dc>

81111618 <_write_r>:
81111618:	defffd04 	addi	sp,sp,-12
8111161c:	2805883a 	mov	r2,r5
81111620:	dc000015 	stw	r16,0(sp)
81111624:	042044b4 	movhi	r16,33042
81111628:	dc400115 	stw	r17,4(sp)
8111162c:	300b883a 	mov	r5,r6
81111630:	84113404 	addi	r16,r16,17616
81111634:	2023883a 	mov	r17,r4
81111638:	380d883a 	mov	r6,r7
8111163c:	1009883a 	mov	r4,r2
81111640:	dfc00215 	stw	ra,8(sp)
81111644:	80000015 	stw	zero,0(r16)
81111648:	111c8900 	call	8111c890 <write>
8111164c:	00ffffc4 	movi	r3,-1
81111650:	10c00526 	beq	r2,r3,81111668 <_write_r+0x50>
81111654:	dfc00217 	ldw	ra,8(sp)
81111658:	dc400117 	ldw	r17,4(sp)
8111165c:	dc000017 	ldw	r16,0(sp)
81111660:	dec00304 	addi	sp,sp,12
81111664:	f800283a 	ret
81111668:	80c00017 	ldw	r3,0(r16)
8111166c:	183ff926 	beq	r3,zero,81111654 <__reset+0xfb0f1654>
81111670:	88c00015 	stw	r3,0(r17)
81111674:	003ff706 	br	81111654 <__reset+0xfb0f1654>

81111678 <__swsetup_r>:
81111678:	00a044b4 	movhi	r2,33042
8111167c:	defffd04 	addi	sp,sp,-12
81111680:	10910f04 	addi	r2,r2,17468
81111684:	dc400115 	stw	r17,4(sp)
81111688:	2023883a 	mov	r17,r4
8111168c:	11000017 	ldw	r4,0(r2)
81111690:	dc000015 	stw	r16,0(sp)
81111694:	dfc00215 	stw	ra,8(sp)
81111698:	2821883a 	mov	r16,r5
8111169c:	20000226 	beq	r4,zero,811116a8 <__swsetup_r+0x30>
811116a0:	20800e17 	ldw	r2,56(r4)
811116a4:	10003126 	beq	r2,zero,8111176c <__swsetup_r+0xf4>
811116a8:	8080030b 	ldhu	r2,12(r16)
811116ac:	10c0020c 	andi	r3,r2,8
811116b0:	1009883a 	mov	r4,r2
811116b4:	18000f26 	beq	r3,zero,811116f4 <__swsetup_r+0x7c>
811116b8:	80c00417 	ldw	r3,16(r16)
811116bc:	18001526 	beq	r3,zero,81111714 <__swsetup_r+0x9c>
811116c0:	1100004c 	andi	r4,r2,1
811116c4:	20001c1e 	bne	r4,zero,81111738 <__swsetup_r+0xc0>
811116c8:	1080008c 	andi	r2,r2,2
811116cc:	1000291e 	bne	r2,zero,81111774 <__swsetup_r+0xfc>
811116d0:	80800517 	ldw	r2,20(r16)
811116d4:	80800215 	stw	r2,8(r16)
811116d8:	18001c26 	beq	r3,zero,8111174c <__swsetup_r+0xd4>
811116dc:	0005883a 	mov	r2,zero
811116e0:	dfc00217 	ldw	ra,8(sp)
811116e4:	dc400117 	ldw	r17,4(sp)
811116e8:	dc000017 	ldw	r16,0(sp)
811116ec:	dec00304 	addi	sp,sp,12
811116f0:	f800283a 	ret
811116f4:	2080040c 	andi	r2,r4,16
811116f8:	10002e26 	beq	r2,zero,811117b4 <__swsetup_r+0x13c>
811116fc:	2080010c 	andi	r2,r4,4
81111700:	10001e1e 	bne	r2,zero,8111177c <__swsetup_r+0x104>
81111704:	80c00417 	ldw	r3,16(r16)
81111708:	20800214 	ori	r2,r4,8
8111170c:	8080030d 	sth	r2,12(r16)
81111710:	183feb1e 	bne	r3,zero,811116c0 <__reset+0xfb0f16c0>
81111714:	1100a00c 	andi	r4,r2,640
81111718:	01408004 	movi	r5,512
8111171c:	217fe826 	beq	r4,r5,811116c0 <__reset+0xfb0f16c0>
81111720:	800b883a 	mov	r5,r16
81111724:	8809883a 	mov	r4,r17
81111728:	110c00c0 	call	8110c00c <__smakebuf_r>
8111172c:	8080030b 	ldhu	r2,12(r16)
81111730:	80c00417 	ldw	r3,16(r16)
81111734:	003fe206 	br	811116c0 <__reset+0xfb0f16c0>
81111738:	80800517 	ldw	r2,20(r16)
8111173c:	80000215 	stw	zero,8(r16)
81111740:	0085c83a 	sub	r2,zero,r2
81111744:	80800615 	stw	r2,24(r16)
81111748:	183fe41e 	bne	r3,zero,811116dc <__reset+0xfb0f16dc>
8111174c:	80c0030b 	ldhu	r3,12(r16)
81111750:	0005883a 	mov	r2,zero
81111754:	1900200c 	andi	r4,r3,128
81111758:	203fe126 	beq	r4,zero,811116e0 <__reset+0xfb0f16e0>
8111175c:	18c01014 	ori	r3,r3,64
81111760:	80c0030d 	sth	r3,12(r16)
81111764:	00bfffc4 	movi	r2,-1
81111768:	003fdd06 	br	811116e0 <__reset+0xfb0f16e0>
8111176c:	11136a00 	call	811136a0 <__sinit>
81111770:	003fcd06 	br	811116a8 <__reset+0xfb0f16a8>
81111774:	0005883a 	mov	r2,zero
81111778:	003fd606 	br	811116d4 <__reset+0xfb0f16d4>
8111177c:	81400c17 	ldw	r5,48(r16)
81111780:	28000626 	beq	r5,zero,8111179c <__swsetup_r+0x124>
81111784:	80801004 	addi	r2,r16,64
81111788:	28800326 	beq	r5,r2,81111798 <__swsetup_r+0x120>
8111178c:	8809883a 	mov	r4,r17
81111790:	11138c00 	call	811138c0 <_free_r>
81111794:	8100030b 	ldhu	r4,12(r16)
81111798:	80000c15 	stw	zero,48(r16)
8111179c:	80c00417 	ldw	r3,16(r16)
811117a0:	00bff6c4 	movi	r2,-37
811117a4:	1108703a 	and	r4,r2,r4
811117a8:	80000115 	stw	zero,4(r16)
811117ac:	80c00015 	stw	r3,0(r16)
811117b0:	003fd506 	br	81111708 <__reset+0xfb0f1708>
811117b4:	00800244 	movi	r2,9
811117b8:	88800015 	stw	r2,0(r17)
811117bc:	20801014 	ori	r2,r4,64
811117c0:	8080030d 	sth	r2,12(r16)
811117c4:	00bfffc4 	movi	r2,-1
811117c8:	003fc506 	br	811116e0 <__reset+0xfb0f16e0>

811117cc <_close_r>:
811117cc:	defffd04 	addi	sp,sp,-12
811117d0:	dc000015 	stw	r16,0(sp)
811117d4:	042044b4 	movhi	r16,33042
811117d8:	dc400115 	stw	r17,4(sp)
811117dc:	84113404 	addi	r16,r16,17616
811117e0:	2023883a 	mov	r17,r4
811117e4:	2809883a 	mov	r4,r5
811117e8:	dfc00215 	stw	ra,8(sp)
811117ec:	80000015 	stw	zero,0(r16)
811117f0:	111bba40 	call	8111bba4 <close>
811117f4:	00ffffc4 	movi	r3,-1
811117f8:	10c00526 	beq	r2,r3,81111810 <_close_r+0x44>
811117fc:	dfc00217 	ldw	ra,8(sp)
81111800:	dc400117 	ldw	r17,4(sp)
81111804:	dc000017 	ldw	r16,0(sp)
81111808:	dec00304 	addi	sp,sp,12
8111180c:	f800283a 	ret
81111810:	80c00017 	ldw	r3,0(r16)
81111814:	183ff926 	beq	r3,zero,811117fc <__reset+0xfb0f17fc>
81111818:	88c00015 	stw	r3,0(r17)
8111181c:	003ff706 	br	811117fc <__reset+0xfb0f17fc>

81111820 <quorem>:
81111820:	defff704 	addi	sp,sp,-36
81111824:	dc800215 	stw	r18,8(sp)
81111828:	20800417 	ldw	r2,16(r4)
8111182c:	2c800417 	ldw	r18,16(r5)
81111830:	dfc00815 	stw	ra,32(sp)
81111834:	ddc00715 	stw	r23,28(sp)
81111838:	dd800615 	stw	r22,24(sp)
8111183c:	dd400515 	stw	r21,20(sp)
81111840:	dd000415 	stw	r20,16(sp)
81111844:	dcc00315 	stw	r19,12(sp)
81111848:	dc400115 	stw	r17,4(sp)
8111184c:	dc000015 	stw	r16,0(sp)
81111850:	14807116 	blt	r2,r18,81111a18 <quorem+0x1f8>
81111854:	94bfffc4 	addi	r18,r18,-1
81111858:	94ad883a 	add	r22,r18,r18
8111185c:	b5ad883a 	add	r22,r22,r22
81111860:	2c400504 	addi	r17,r5,20
81111864:	8da9883a 	add	r20,r17,r22
81111868:	25400504 	addi	r21,r4,20
8111186c:	282f883a 	mov	r23,r5
81111870:	adad883a 	add	r22,r21,r22
81111874:	a1400017 	ldw	r5,0(r20)
81111878:	2021883a 	mov	r16,r4
8111187c:	b1000017 	ldw	r4,0(r22)
81111880:	29400044 	addi	r5,r5,1
81111884:	1119a980 	call	81119a98 <__udivsi3>
81111888:	1027883a 	mov	r19,r2
8111188c:	10002c26 	beq	r2,zero,81111940 <quorem+0x120>
81111890:	a813883a 	mov	r9,r21
81111894:	880b883a 	mov	r5,r17
81111898:	0009883a 	mov	r4,zero
8111189c:	000d883a 	mov	r6,zero
811118a0:	2a000017 	ldw	r8,0(r5)
811118a4:	49c00017 	ldw	r7,0(r9)
811118a8:	29400104 	addi	r5,r5,4
811118ac:	40bfffcc 	andi	r2,r8,65535
811118b0:	14c5383a 	mul	r2,r2,r19
811118b4:	4010d43a 	srli	r8,r8,16
811118b8:	38ffffcc 	andi	r3,r7,65535
811118bc:	1105883a 	add	r2,r2,r4
811118c0:	1008d43a 	srli	r4,r2,16
811118c4:	44d1383a 	mul	r8,r8,r19
811118c8:	198d883a 	add	r6,r3,r6
811118cc:	10ffffcc 	andi	r3,r2,65535
811118d0:	30c7c83a 	sub	r3,r6,r3
811118d4:	380ed43a 	srli	r7,r7,16
811118d8:	4105883a 	add	r2,r8,r4
811118dc:	180dd43a 	srai	r6,r3,16
811118e0:	113fffcc 	andi	r4,r2,65535
811118e4:	390fc83a 	sub	r7,r7,r4
811118e8:	398d883a 	add	r6,r7,r6
811118ec:	300e943a 	slli	r7,r6,16
811118f0:	18ffffcc 	andi	r3,r3,65535
811118f4:	1008d43a 	srli	r4,r2,16
811118f8:	38ceb03a 	or	r7,r7,r3
811118fc:	49c00015 	stw	r7,0(r9)
81111900:	300dd43a 	srai	r6,r6,16
81111904:	4a400104 	addi	r9,r9,4
81111908:	a17fe52e 	bgeu	r20,r5,811118a0 <__reset+0xfb0f18a0>
8111190c:	b0800017 	ldw	r2,0(r22)
81111910:	10000b1e 	bne	r2,zero,81111940 <quorem+0x120>
81111914:	b0bfff04 	addi	r2,r22,-4
81111918:	a880082e 	bgeu	r21,r2,8111193c <quorem+0x11c>
8111191c:	b0ffff17 	ldw	r3,-4(r22)
81111920:	18000326 	beq	r3,zero,81111930 <quorem+0x110>
81111924:	00000506 	br	8111193c <quorem+0x11c>
81111928:	10c00017 	ldw	r3,0(r2)
8111192c:	1800031e 	bne	r3,zero,8111193c <quorem+0x11c>
81111930:	10bfff04 	addi	r2,r2,-4
81111934:	94bfffc4 	addi	r18,r18,-1
81111938:	a8bffb36 	bltu	r21,r2,81111928 <__reset+0xfb0f1928>
8111193c:	84800415 	stw	r18,16(r16)
81111940:	b80b883a 	mov	r5,r23
81111944:	8009883a 	mov	r4,r16
81111948:	1114eac0 	call	81114eac <__mcmp>
8111194c:	10002616 	blt	r2,zero,811119e8 <quorem+0x1c8>
81111950:	9cc00044 	addi	r19,r19,1
81111954:	a805883a 	mov	r2,r21
81111958:	000b883a 	mov	r5,zero
8111195c:	11000017 	ldw	r4,0(r2)
81111960:	89800017 	ldw	r6,0(r17)
81111964:	10800104 	addi	r2,r2,4
81111968:	20ffffcc 	andi	r3,r4,65535
8111196c:	194b883a 	add	r5,r3,r5
81111970:	30ffffcc 	andi	r3,r6,65535
81111974:	28c7c83a 	sub	r3,r5,r3
81111978:	300cd43a 	srli	r6,r6,16
8111197c:	2008d43a 	srli	r4,r4,16
81111980:	180bd43a 	srai	r5,r3,16
81111984:	18ffffcc 	andi	r3,r3,65535
81111988:	2189c83a 	sub	r4,r4,r6
8111198c:	2149883a 	add	r4,r4,r5
81111990:	200c943a 	slli	r6,r4,16
81111994:	8c400104 	addi	r17,r17,4
81111998:	200bd43a 	srai	r5,r4,16
8111199c:	30c6b03a 	or	r3,r6,r3
811119a0:	10ffff15 	stw	r3,-4(r2)
811119a4:	a47fed2e 	bgeu	r20,r17,8111195c <__reset+0xfb0f195c>
811119a8:	9485883a 	add	r2,r18,r18
811119ac:	1085883a 	add	r2,r2,r2
811119b0:	a887883a 	add	r3,r21,r2
811119b4:	18800017 	ldw	r2,0(r3)
811119b8:	10000b1e 	bne	r2,zero,811119e8 <quorem+0x1c8>
811119bc:	18bfff04 	addi	r2,r3,-4
811119c0:	a880082e 	bgeu	r21,r2,811119e4 <quorem+0x1c4>
811119c4:	18ffff17 	ldw	r3,-4(r3)
811119c8:	18000326 	beq	r3,zero,811119d8 <quorem+0x1b8>
811119cc:	00000506 	br	811119e4 <quorem+0x1c4>
811119d0:	10c00017 	ldw	r3,0(r2)
811119d4:	1800031e 	bne	r3,zero,811119e4 <quorem+0x1c4>
811119d8:	10bfff04 	addi	r2,r2,-4
811119dc:	94bfffc4 	addi	r18,r18,-1
811119e0:	a8bffb36 	bltu	r21,r2,811119d0 <__reset+0xfb0f19d0>
811119e4:	84800415 	stw	r18,16(r16)
811119e8:	9805883a 	mov	r2,r19
811119ec:	dfc00817 	ldw	ra,32(sp)
811119f0:	ddc00717 	ldw	r23,28(sp)
811119f4:	dd800617 	ldw	r22,24(sp)
811119f8:	dd400517 	ldw	r21,20(sp)
811119fc:	dd000417 	ldw	r20,16(sp)
81111a00:	dcc00317 	ldw	r19,12(sp)
81111a04:	dc800217 	ldw	r18,8(sp)
81111a08:	dc400117 	ldw	r17,4(sp)
81111a0c:	dc000017 	ldw	r16,0(sp)
81111a10:	dec00904 	addi	sp,sp,36
81111a14:	f800283a 	ret
81111a18:	0005883a 	mov	r2,zero
81111a1c:	003ff306 	br	811119ec <__reset+0xfb0f19ec>

81111a20 <_dtoa_r>:
81111a20:	20801017 	ldw	r2,64(r4)
81111a24:	deffde04 	addi	sp,sp,-136
81111a28:	df002015 	stw	fp,128(sp)
81111a2c:	dcc01b15 	stw	r19,108(sp)
81111a30:	dc801a15 	stw	r18,104(sp)
81111a34:	dc401915 	stw	r17,100(sp)
81111a38:	dc001815 	stw	r16,96(sp)
81111a3c:	dfc02115 	stw	ra,132(sp)
81111a40:	ddc01f15 	stw	r23,124(sp)
81111a44:	dd801e15 	stw	r22,120(sp)
81111a48:	dd401d15 	stw	r21,116(sp)
81111a4c:	dd001c15 	stw	r20,112(sp)
81111a50:	d9c00315 	stw	r7,12(sp)
81111a54:	2039883a 	mov	fp,r4
81111a58:	3023883a 	mov	r17,r6
81111a5c:	2825883a 	mov	r18,r5
81111a60:	dc002417 	ldw	r16,144(sp)
81111a64:	3027883a 	mov	r19,r6
81111a68:	10000826 	beq	r2,zero,81111a8c <_dtoa_r+0x6c>
81111a6c:	21801117 	ldw	r6,68(r4)
81111a70:	00c00044 	movi	r3,1
81111a74:	100b883a 	mov	r5,r2
81111a78:	1986983a 	sll	r3,r3,r6
81111a7c:	11800115 	stw	r6,4(r2)
81111a80:	10c00215 	stw	r3,8(r2)
81111a84:	111468c0 	call	8111468c <_Bfree>
81111a88:	e0001015 	stw	zero,64(fp)
81111a8c:	88002e16 	blt	r17,zero,81111b48 <_dtoa_r+0x128>
81111a90:	80000015 	stw	zero,0(r16)
81111a94:	889ffc2c 	andhi	r2,r17,32752
81111a98:	00dffc34 	movhi	r3,32752
81111a9c:	10c01c26 	beq	r2,r3,81111b10 <_dtoa_r+0xf0>
81111aa0:	000d883a 	mov	r6,zero
81111aa4:	000f883a 	mov	r7,zero
81111aa8:	9009883a 	mov	r4,r18
81111aac:	980b883a 	mov	r5,r19
81111ab0:	111ace80 	call	8111ace8 <__eqdf2>
81111ab4:	10002b1e 	bne	r2,zero,81111b64 <_dtoa_r+0x144>
81111ab8:	d9c02317 	ldw	r7,140(sp)
81111abc:	00800044 	movi	r2,1
81111ac0:	38800015 	stw	r2,0(r7)
81111ac4:	d8802517 	ldw	r2,148(sp)
81111ac8:	10019e26 	beq	r2,zero,81112144 <_dtoa_r+0x724>
81111acc:	d8c02517 	ldw	r3,148(sp)
81111ad0:	00a044b4 	movhi	r2,33042
81111ad4:	1088dc44 	addi	r2,r2,9073
81111ad8:	18800015 	stw	r2,0(r3)
81111adc:	10bfffc4 	addi	r2,r2,-1
81111ae0:	dfc02117 	ldw	ra,132(sp)
81111ae4:	df002017 	ldw	fp,128(sp)
81111ae8:	ddc01f17 	ldw	r23,124(sp)
81111aec:	dd801e17 	ldw	r22,120(sp)
81111af0:	dd401d17 	ldw	r21,116(sp)
81111af4:	dd001c17 	ldw	r20,112(sp)
81111af8:	dcc01b17 	ldw	r19,108(sp)
81111afc:	dc801a17 	ldw	r18,104(sp)
81111b00:	dc401917 	ldw	r17,100(sp)
81111b04:	dc001817 	ldw	r16,96(sp)
81111b08:	dec02204 	addi	sp,sp,136
81111b0c:	f800283a 	ret
81111b10:	d8c02317 	ldw	r3,140(sp)
81111b14:	0089c3c4 	movi	r2,9999
81111b18:	18800015 	stw	r2,0(r3)
81111b1c:	90017726 	beq	r18,zero,811120fc <_dtoa_r+0x6dc>
81111b20:	00a044b4 	movhi	r2,33042
81111b24:	1088f004 	addi	r2,r2,9152
81111b28:	d9002517 	ldw	r4,148(sp)
81111b2c:	203fec26 	beq	r4,zero,81111ae0 <__reset+0xfb0f1ae0>
81111b30:	10c000c7 	ldb	r3,3(r2)
81111b34:	1801781e 	bne	r3,zero,81112118 <_dtoa_r+0x6f8>
81111b38:	10c000c4 	addi	r3,r2,3
81111b3c:	d9802517 	ldw	r6,148(sp)
81111b40:	30c00015 	stw	r3,0(r6)
81111b44:	003fe606 	br	81111ae0 <__reset+0xfb0f1ae0>
81111b48:	04e00034 	movhi	r19,32768
81111b4c:	9cffffc4 	addi	r19,r19,-1
81111b50:	00800044 	movi	r2,1
81111b54:	8ce6703a 	and	r19,r17,r19
81111b58:	80800015 	stw	r2,0(r16)
81111b5c:	9823883a 	mov	r17,r19
81111b60:	003fcc06 	br	81111a94 <__reset+0xfb0f1a94>
81111b64:	d8800204 	addi	r2,sp,8
81111b68:	d8800015 	stw	r2,0(sp)
81111b6c:	d9c00104 	addi	r7,sp,4
81111b70:	900b883a 	mov	r5,r18
81111b74:	980d883a 	mov	r6,r19
81111b78:	e009883a 	mov	r4,fp
81111b7c:	8820d53a 	srli	r16,r17,20
81111b80:	11152780 	call	81115278 <__d2b>
81111b84:	d8800915 	stw	r2,36(sp)
81111b88:	8001651e 	bne	r16,zero,81112120 <_dtoa_r+0x700>
81111b8c:	dd800217 	ldw	r22,8(sp)
81111b90:	dc000117 	ldw	r16,4(sp)
81111b94:	00800804 	movi	r2,32
81111b98:	b421883a 	add	r16,r22,r16
81111b9c:	80c10c84 	addi	r3,r16,1074
81111ba0:	10c2d10e 	bge	r2,r3,811126e8 <_dtoa_r+0xcc8>
81111ba4:	00801004 	movi	r2,64
81111ba8:	81010484 	addi	r4,r16,1042
81111bac:	10c7c83a 	sub	r3,r2,r3
81111bb0:	9108d83a 	srl	r4,r18,r4
81111bb4:	88e2983a 	sll	r17,r17,r3
81111bb8:	2448b03a 	or	r4,r4,r17
81111bbc:	111b9980 	call	8111b998 <__floatunsidf>
81111bc0:	017f8434 	movhi	r5,65040
81111bc4:	01800044 	movi	r6,1
81111bc8:	1009883a 	mov	r4,r2
81111bcc:	194b883a 	add	r5,r3,r5
81111bd0:	843fffc4 	addi	r16,r16,-1
81111bd4:	d9801115 	stw	r6,68(sp)
81111bd8:	000d883a 	mov	r6,zero
81111bdc:	01cffe34 	movhi	r7,16376
81111be0:	111af400 	call	8111af40 <__subdf3>
81111be4:	0198dbf4 	movhi	r6,25455
81111be8:	01cff4f4 	movhi	r7,16339
81111bec:	3190d844 	addi	r6,r6,17249
81111bf0:	39e1e9c4 	addi	r7,r7,-30809
81111bf4:	1009883a 	mov	r4,r2
81111bf8:	180b883a 	mov	r5,r3
81111bfc:	110adac0 	call	8110adac <__muldf3>
81111c00:	01a2d874 	movhi	r6,35681
81111c04:	01cff1f4 	movhi	r7,16327
81111c08:	31b22cc4 	addi	r6,r6,-14157
81111c0c:	39e28a04 	addi	r7,r7,-30168
81111c10:	180b883a 	mov	r5,r3
81111c14:	1009883a 	mov	r4,r2
81111c18:	1119b540 	call	81119b54 <__adddf3>
81111c1c:	8009883a 	mov	r4,r16
81111c20:	1029883a 	mov	r20,r2
81111c24:	1823883a 	mov	r17,r3
81111c28:	111b8bc0 	call	8111b8bc <__floatsidf>
81111c2c:	019427f4 	movhi	r6,20639
81111c30:	01cff4f4 	movhi	r7,16339
81111c34:	319e7ec4 	addi	r6,r6,31227
81111c38:	39d104c4 	addi	r7,r7,17427
81111c3c:	1009883a 	mov	r4,r2
81111c40:	180b883a 	mov	r5,r3
81111c44:	110adac0 	call	8110adac <__muldf3>
81111c48:	100d883a 	mov	r6,r2
81111c4c:	180f883a 	mov	r7,r3
81111c50:	a009883a 	mov	r4,r20
81111c54:	880b883a 	mov	r5,r17
81111c58:	1119b540 	call	81119b54 <__adddf3>
81111c5c:	1009883a 	mov	r4,r2
81111c60:	180b883a 	mov	r5,r3
81111c64:	1029883a 	mov	r20,r2
81111c68:	1823883a 	mov	r17,r3
81111c6c:	111b83c0 	call	8111b83c <__fixdfsi>
81111c70:	000d883a 	mov	r6,zero
81111c74:	000f883a 	mov	r7,zero
81111c78:	a009883a 	mov	r4,r20
81111c7c:	880b883a 	mov	r5,r17
81111c80:	d8800515 	stw	r2,20(sp)
81111c84:	111ae4c0 	call	8111ae4c <__ledf2>
81111c88:	10028716 	blt	r2,zero,811126a8 <_dtoa_r+0xc88>
81111c8c:	d8c00517 	ldw	r3,20(sp)
81111c90:	00800584 	movi	r2,22
81111c94:	10c27536 	bltu	r2,r3,8111266c <_dtoa_r+0xc4c>
81111c98:	180490fa 	slli	r2,r3,3
81111c9c:	00e044b4 	movhi	r3,33042
81111ca0:	18c90b04 	addi	r3,r3,9260
81111ca4:	1885883a 	add	r2,r3,r2
81111ca8:	11000017 	ldw	r4,0(r2)
81111cac:	11400117 	ldw	r5,4(r2)
81111cb0:	900d883a 	mov	r6,r18
81111cb4:	980f883a 	mov	r7,r19
81111cb8:	111ad700 	call	8111ad70 <__gedf2>
81111cbc:	00828d0e 	bge	zero,r2,811126f4 <_dtoa_r+0xcd4>
81111cc0:	d9000517 	ldw	r4,20(sp)
81111cc4:	d8000e15 	stw	zero,56(sp)
81111cc8:	213fffc4 	addi	r4,r4,-1
81111ccc:	d9000515 	stw	r4,20(sp)
81111cd0:	b42dc83a 	sub	r22,r22,r16
81111cd4:	b5bfffc4 	addi	r22,r22,-1
81111cd8:	b0026f16 	blt	r22,zero,81112698 <_dtoa_r+0xc78>
81111cdc:	d8000815 	stw	zero,32(sp)
81111ce0:	d9c00517 	ldw	r7,20(sp)
81111ce4:	38026416 	blt	r7,zero,81112678 <_dtoa_r+0xc58>
81111ce8:	b1ed883a 	add	r22,r22,r7
81111cec:	d9c00d15 	stw	r7,52(sp)
81111cf0:	d8000a15 	stw	zero,40(sp)
81111cf4:	d9800317 	ldw	r6,12(sp)
81111cf8:	00800244 	movi	r2,9
81111cfc:	11811436 	bltu	r2,r6,81112150 <_dtoa_r+0x730>
81111d00:	00800144 	movi	r2,5
81111d04:	1184e10e 	bge	r2,r6,8111308c <_dtoa_r+0x166c>
81111d08:	31bfff04 	addi	r6,r6,-4
81111d0c:	d9800315 	stw	r6,12(sp)
81111d10:	0023883a 	mov	r17,zero
81111d14:	d9800317 	ldw	r6,12(sp)
81111d18:	008000c4 	movi	r2,3
81111d1c:	30836726 	beq	r6,r2,81112abc <_dtoa_r+0x109c>
81111d20:	1183410e 	bge	r2,r6,81112a28 <_dtoa_r+0x1008>
81111d24:	d9c00317 	ldw	r7,12(sp)
81111d28:	00800104 	movi	r2,4
81111d2c:	38827c26 	beq	r7,r2,81112720 <_dtoa_r+0xd00>
81111d30:	00800144 	movi	r2,5
81111d34:	3884c41e 	bne	r7,r2,81113048 <_dtoa_r+0x1628>
81111d38:	00800044 	movi	r2,1
81111d3c:	d8800b15 	stw	r2,44(sp)
81111d40:	d8c00517 	ldw	r3,20(sp)
81111d44:	d9002217 	ldw	r4,136(sp)
81111d48:	1907883a 	add	r3,r3,r4
81111d4c:	19800044 	addi	r6,r3,1
81111d50:	d8c00c15 	stw	r3,48(sp)
81111d54:	d9800615 	stw	r6,24(sp)
81111d58:	0183a40e 	bge	zero,r6,81112bec <_dtoa_r+0x11cc>
81111d5c:	d9800617 	ldw	r6,24(sp)
81111d60:	3021883a 	mov	r16,r6
81111d64:	e0001115 	stw	zero,68(fp)
81111d68:	008005c4 	movi	r2,23
81111d6c:	1184c92e 	bgeu	r2,r6,81113094 <_dtoa_r+0x1674>
81111d70:	00c00044 	movi	r3,1
81111d74:	00800104 	movi	r2,4
81111d78:	1085883a 	add	r2,r2,r2
81111d7c:	11000504 	addi	r4,r2,20
81111d80:	180b883a 	mov	r5,r3
81111d84:	18c00044 	addi	r3,r3,1
81111d88:	313ffb2e 	bgeu	r6,r4,81111d78 <__reset+0xfb0f1d78>
81111d8c:	e1401115 	stw	r5,68(fp)
81111d90:	e009883a 	mov	r4,fp
81111d94:	11145e40 	call	811145e4 <_Balloc>
81111d98:	d8800715 	stw	r2,28(sp)
81111d9c:	e0801015 	stw	r2,64(fp)
81111da0:	00800384 	movi	r2,14
81111da4:	1400f736 	bltu	r2,r16,81112184 <_dtoa_r+0x764>
81111da8:	8800f626 	beq	r17,zero,81112184 <_dtoa_r+0x764>
81111dac:	d9c00517 	ldw	r7,20(sp)
81111db0:	01c39a0e 	bge	zero,r7,81112c1c <_dtoa_r+0x11fc>
81111db4:	388003cc 	andi	r2,r7,15
81111db8:	100490fa 	slli	r2,r2,3
81111dbc:	382bd13a 	srai	r21,r7,4
81111dc0:	00e044b4 	movhi	r3,33042
81111dc4:	18c90b04 	addi	r3,r3,9260
81111dc8:	1885883a 	add	r2,r3,r2
81111dcc:	a8c0040c 	andi	r3,r21,16
81111dd0:	12400017 	ldw	r9,0(r2)
81111dd4:	12000117 	ldw	r8,4(r2)
81111dd8:	18037926 	beq	r3,zero,81112bc0 <_dtoa_r+0x11a0>
81111ddc:	00a044b4 	movhi	r2,33042
81111de0:	10890104 	addi	r2,r2,9220
81111de4:	11800817 	ldw	r6,32(r2)
81111de8:	11c00917 	ldw	r7,36(r2)
81111dec:	9009883a 	mov	r4,r18
81111df0:	980b883a 	mov	r5,r19
81111df4:	da001715 	stw	r8,92(sp)
81111df8:	da401615 	stw	r9,88(sp)
81111dfc:	111a4000 	call	8111a400 <__divdf3>
81111e00:	da001717 	ldw	r8,92(sp)
81111e04:	da401617 	ldw	r9,88(sp)
81111e08:	ad4003cc 	andi	r21,r21,15
81111e0c:	040000c4 	movi	r16,3
81111e10:	1023883a 	mov	r17,r2
81111e14:	1829883a 	mov	r20,r3
81111e18:	a8001126 	beq	r21,zero,81111e60 <_dtoa_r+0x440>
81111e1c:	05e044b4 	movhi	r23,33042
81111e20:	bdc90104 	addi	r23,r23,9220
81111e24:	4805883a 	mov	r2,r9
81111e28:	4007883a 	mov	r3,r8
81111e2c:	a980004c 	andi	r6,r21,1
81111e30:	1009883a 	mov	r4,r2
81111e34:	a82bd07a 	srai	r21,r21,1
81111e38:	180b883a 	mov	r5,r3
81111e3c:	30000426 	beq	r6,zero,81111e50 <_dtoa_r+0x430>
81111e40:	b9800017 	ldw	r6,0(r23)
81111e44:	b9c00117 	ldw	r7,4(r23)
81111e48:	84000044 	addi	r16,r16,1
81111e4c:	110adac0 	call	8110adac <__muldf3>
81111e50:	bdc00204 	addi	r23,r23,8
81111e54:	a83ff51e 	bne	r21,zero,81111e2c <__reset+0xfb0f1e2c>
81111e58:	1013883a 	mov	r9,r2
81111e5c:	1811883a 	mov	r8,r3
81111e60:	480d883a 	mov	r6,r9
81111e64:	400f883a 	mov	r7,r8
81111e68:	8809883a 	mov	r4,r17
81111e6c:	a00b883a 	mov	r5,r20
81111e70:	111a4000 	call	8111a400 <__divdf3>
81111e74:	d8800f15 	stw	r2,60(sp)
81111e78:	d8c01015 	stw	r3,64(sp)
81111e7c:	d8c00e17 	ldw	r3,56(sp)
81111e80:	18000626 	beq	r3,zero,81111e9c <_dtoa_r+0x47c>
81111e84:	d9000f17 	ldw	r4,60(sp)
81111e88:	d9401017 	ldw	r5,64(sp)
81111e8c:	000d883a 	mov	r6,zero
81111e90:	01cffc34 	movhi	r7,16368
81111e94:	111ae4c0 	call	8111ae4c <__ledf2>
81111e98:	10040b16 	blt	r2,zero,81112ec8 <_dtoa_r+0x14a8>
81111e9c:	8009883a 	mov	r4,r16
81111ea0:	111b8bc0 	call	8111b8bc <__floatsidf>
81111ea4:	d9800f17 	ldw	r6,60(sp)
81111ea8:	d9c01017 	ldw	r7,64(sp)
81111eac:	1009883a 	mov	r4,r2
81111eb0:	180b883a 	mov	r5,r3
81111eb4:	110adac0 	call	8110adac <__muldf3>
81111eb8:	000d883a 	mov	r6,zero
81111ebc:	01d00734 	movhi	r7,16412
81111ec0:	1009883a 	mov	r4,r2
81111ec4:	180b883a 	mov	r5,r3
81111ec8:	1119b540 	call	81119b54 <__adddf3>
81111ecc:	1021883a 	mov	r16,r2
81111ed0:	d8800617 	ldw	r2,24(sp)
81111ed4:	047f3034 	movhi	r17,64704
81111ed8:	1c63883a 	add	r17,r3,r17
81111edc:	10031826 	beq	r2,zero,81112b40 <_dtoa_r+0x1120>
81111ee0:	d8c00517 	ldw	r3,20(sp)
81111ee4:	db000617 	ldw	r12,24(sp)
81111ee8:	d8c01315 	stw	r3,76(sp)
81111eec:	d9000b17 	ldw	r4,44(sp)
81111ef0:	20038f26 	beq	r4,zero,81112d30 <_dtoa_r+0x1310>
81111ef4:	60bfffc4 	addi	r2,r12,-1
81111ef8:	100490fa 	slli	r2,r2,3
81111efc:	00e044b4 	movhi	r3,33042
81111f00:	18c90b04 	addi	r3,r3,9260
81111f04:	1885883a 	add	r2,r3,r2
81111f08:	11800017 	ldw	r6,0(r2)
81111f0c:	11c00117 	ldw	r7,4(r2)
81111f10:	d8800717 	ldw	r2,28(sp)
81111f14:	0009883a 	mov	r4,zero
81111f18:	014ff834 	movhi	r5,16352
81111f1c:	db001615 	stw	r12,88(sp)
81111f20:	15c00044 	addi	r23,r2,1
81111f24:	111a4000 	call	8111a400 <__divdf3>
81111f28:	800d883a 	mov	r6,r16
81111f2c:	880f883a 	mov	r7,r17
81111f30:	1009883a 	mov	r4,r2
81111f34:	180b883a 	mov	r5,r3
81111f38:	111af400 	call	8111af40 <__subdf3>
81111f3c:	d9401017 	ldw	r5,64(sp)
81111f40:	d9000f17 	ldw	r4,60(sp)
81111f44:	102b883a 	mov	r21,r2
81111f48:	d8c01215 	stw	r3,72(sp)
81111f4c:	111b83c0 	call	8111b83c <__fixdfsi>
81111f50:	1009883a 	mov	r4,r2
81111f54:	1029883a 	mov	r20,r2
81111f58:	111b8bc0 	call	8111b8bc <__floatsidf>
81111f5c:	d9000f17 	ldw	r4,60(sp)
81111f60:	d9401017 	ldw	r5,64(sp)
81111f64:	100d883a 	mov	r6,r2
81111f68:	180f883a 	mov	r7,r3
81111f6c:	111af400 	call	8111af40 <__subdf3>
81111f70:	1823883a 	mov	r17,r3
81111f74:	d8c00717 	ldw	r3,28(sp)
81111f78:	d9401217 	ldw	r5,72(sp)
81111f7c:	a2000c04 	addi	r8,r20,48
81111f80:	1021883a 	mov	r16,r2
81111f84:	1a000005 	stb	r8,0(r3)
81111f88:	800d883a 	mov	r6,r16
81111f8c:	880f883a 	mov	r7,r17
81111f90:	a809883a 	mov	r4,r21
81111f94:	4029883a 	mov	r20,r8
81111f98:	111ad700 	call	8111ad70 <__gedf2>
81111f9c:	00841d16 	blt	zero,r2,81113014 <_dtoa_r+0x15f4>
81111fa0:	800d883a 	mov	r6,r16
81111fa4:	880f883a 	mov	r7,r17
81111fa8:	0009883a 	mov	r4,zero
81111fac:	014ffc34 	movhi	r5,16368
81111fb0:	111af400 	call	8111af40 <__subdf3>
81111fb4:	d9401217 	ldw	r5,72(sp)
81111fb8:	100d883a 	mov	r6,r2
81111fbc:	180f883a 	mov	r7,r3
81111fc0:	a809883a 	mov	r4,r21
81111fc4:	111ad700 	call	8111ad70 <__gedf2>
81111fc8:	db001617 	ldw	r12,88(sp)
81111fcc:	00840e16 	blt	zero,r2,81113008 <_dtoa_r+0x15e8>
81111fd0:	00800044 	movi	r2,1
81111fd4:	13006b0e 	bge	r2,r12,81112184 <_dtoa_r+0x764>
81111fd8:	d9000717 	ldw	r4,28(sp)
81111fdc:	dd800f15 	stw	r22,60(sp)
81111fe0:	dcc01015 	stw	r19,64(sp)
81111fe4:	2319883a 	add	r12,r4,r12
81111fe8:	dcc01217 	ldw	r19,72(sp)
81111fec:	602d883a 	mov	r22,r12
81111ff0:	dc801215 	stw	r18,72(sp)
81111ff4:	b825883a 	mov	r18,r23
81111ff8:	00000906 	br	81112020 <_dtoa_r+0x600>
81111ffc:	111af400 	call	8111af40 <__subdf3>
81112000:	a80d883a 	mov	r6,r21
81112004:	980f883a 	mov	r7,r19
81112008:	1009883a 	mov	r4,r2
8111200c:	180b883a 	mov	r5,r3
81112010:	111ae4c0 	call	8111ae4c <__ledf2>
81112014:	1003e816 	blt	r2,zero,81112fb8 <_dtoa_r+0x1598>
81112018:	b825883a 	mov	r18,r23
8111201c:	bd83e926 	beq	r23,r22,81112fc4 <_dtoa_r+0x15a4>
81112020:	a809883a 	mov	r4,r21
81112024:	980b883a 	mov	r5,r19
81112028:	000d883a 	mov	r6,zero
8111202c:	01d00934 	movhi	r7,16420
81112030:	110adac0 	call	8110adac <__muldf3>
81112034:	000d883a 	mov	r6,zero
81112038:	01d00934 	movhi	r7,16420
8111203c:	8009883a 	mov	r4,r16
81112040:	880b883a 	mov	r5,r17
81112044:	102b883a 	mov	r21,r2
81112048:	1827883a 	mov	r19,r3
8111204c:	110adac0 	call	8110adac <__muldf3>
81112050:	180b883a 	mov	r5,r3
81112054:	1009883a 	mov	r4,r2
81112058:	1821883a 	mov	r16,r3
8111205c:	1023883a 	mov	r17,r2
81112060:	111b83c0 	call	8111b83c <__fixdfsi>
81112064:	1009883a 	mov	r4,r2
81112068:	1029883a 	mov	r20,r2
8111206c:	111b8bc0 	call	8111b8bc <__floatsidf>
81112070:	8809883a 	mov	r4,r17
81112074:	800b883a 	mov	r5,r16
81112078:	100d883a 	mov	r6,r2
8111207c:	180f883a 	mov	r7,r3
81112080:	111af400 	call	8111af40 <__subdf3>
81112084:	a5000c04 	addi	r20,r20,48
81112088:	a80d883a 	mov	r6,r21
8111208c:	980f883a 	mov	r7,r19
81112090:	1009883a 	mov	r4,r2
81112094:	180b883a 	mov	r5,r3
81112098:	95000005 	stb	r20,0(r18)
8111209c:	1021883a 	mov	r16,r2
811120a0:	1823883a 	mov	r17,r3
811120a4:	111ae4c0 	call	8111ae4c <__ledf2>
811120a8:	bdc00044 	addi	r23,r23,1
811120ac:	800d883a 	mov	r6,r16
811120b0:	880f883a 	mov	r7,r17
811120b4:	0009883a 	mov	r4,zero
811120b8:	014ffc34 	movhi	r5,16368
811120bc:	103fcf0e 	bge	r2,zero,81111ffc <__reset+0xfb0f1ffc>
811120c0:	d8c01317 	ldw	r3,76(sp)
811120c4:	d8c00515 	stw	r3,20(sp)
811120c8:	d9400917 	ldw	r5,36(sp)
811120cc:	e009883a 	mov	r4,fp
811120d0:	111468c0 	call	8111468c <_Bfree>
811120d4:	d9000517 	ldw	r4,20(sp)
811120d8:	d9802317 	ldw	r6,140(sp)
811120dc:	d9c02517 	ldw	r7,148(sp)
811120e0:	b8000005 	stb	zero,0(r23)
811120e4:	20800044 	addi	r2,r4,1
811120e8:	30800015 	stw	r2,0(r6)
811120ec:	3802aa26 	beq	r7,zero,81112b98 <_dtoa_r+0x1178>
811120f0:	3dc00015 	stw	r23,0(r7)
811120f4:	d8800717 	ldw	r2,28(sp)
811120f8:	003e7906 	br	81111ae0 <__reset+0xfb0f1ae0>
811120fc:	00800434 	movhi	r2,16
81112100:	10bfffc4 	addi	r2,r2,-1
81112104:	88a2703a 	and	r17,r17,r2
81112108:	883e851e 	bne	r17,zero,81111b20 <__reset+0xfb0f1b20>
8111210c:	00a044b4 	movhi	r2,33042
81112110:	1088ed04 	addi	r2,r2,9140
81112114:	003e8406 	br	81111b28 <__reset+0xfb0f1b28>
81112118:	10c00204 	addi	r3,r2,8
8111211c:	003e8706 	br	81111b3c <__reset+0xfb0f1b3c>
81112120:	01400434 	movhi	r5,16
81112124:	297fffc4 	addi	r5,r5,-1
81112128:	994a703a 	and	r5,r19,r5
8111212c:	9009883a 	mov	r4,r18
81112130:	843f0044 	addi	r16,r16,-1023
81112134:	294ffc34 	orhi	r5,r5,16368
81112138:	dd800217 	ldw	r22,8(sp)
8111213c:	d8001115 	stw	zero,68(sp)
81112140:	003ea506 	br	81111bd8 <__reset+0xfb0f1bd8>
81112144:	00a044b4 	movhi	r2,33042
81112148:	1088dc04 	addi	r2,r2,9072
8111214c:	003e6406 	br	81111ae0 <__reset+0xfb0f1ae0>
81112150:	e0001115 	stw	zero,68(fp)
81112154:	000b883a 	mov	r5,zero
81112158:	e009883a 	mov	r4,fp
8111215c:	11145e40 	call	811145e4 <_Balloc>
81112160:	01bfffc4 	movi	r6,-1
81112164:	01c00044 	movi	r7,1
81112168:	d8800715 	stw	r2,28(sp)
8111216c:	d9800c15 	stw	r6,48(sp)
81112170:	e0801015 	stw	r2,64(fp)
81112174:	d8000315 	stw	zero,12(sp)
81112178:	d9c00b15 	stw	r7,44(sp)
8111217c:	d9800615 	stw	r6,24(sp)
81112180:	d8002215 	stw	zero,136(sp)
81112184:	d8800117 	ldw	r2,4(sp)
81112188:	10008916 	blt	r2,zero,811123b0 <_dtoa_r+0x990>
8111218c:	d9000517 	ldw	r4,20(sp)
81112190:	00c00384 	movi	r3,14
81112194:	19008616 	blt	r3,r4,811123b0 <_dtoa_r+0x990>
81112198:	200490fa 	slli	r2,r4,3
8111219c:	00e044b4 	movhi	r3,33042
811121a0:	d9802217 	ldw	r6,136(sp)
811121a4:	18c90b04 	addi	r3,r3,9260
811121a8:	1885883a 	add	r2,r3,r2
811121ac:	14000017 	ldw	r16,0(r2)
811121b0:	14400117 	ldw	r17,4(r2)
811121b4:	30016316 	blt	r6,zero,81112744 <_dtoa_r+0xd24>
811121b8:	800d883a 	mov	r6,r16
811121bc:	880f883a 	mov	r7,r17
811121c0:	9009883a 	mov	r4,r18
811121c4:	980b883a 	mov	r5,r19
811121c8:	111a4000 	call	8111a400 <__divdf3>
811121cc:	180b883a 	mov	r5,r3
811121d0:	1009883a 	mov	r4,r2
811121d4:	111b83c0 	call	8111b83c <__fixdfsi>
811121d8:	1009883a 	mov	r4,r2
811121dc:	102b883a 	mov	r21,r2
811121e0:	111b8bc0 	call	8111b8bc <__floatsidf>
811121e4:	800d883a 	mov	r6,r16
811121e8:	880f883a 	mov	r7,r17
811121ec:	1009883a 	mov	r4,r2
811121f0:	180b883a 	mov	r5,r3
811121f4:	110adac0 	call	8110adac <__muldf3>
811121f8:	100d883a 	mov	r6,r2
811121fc:	180f883a 	mov	r7,r3
81112200:	9009883a 	mov	r4,r18
81112204:	980b883a 	mov	r5,r19
81112208:	111af400 	call	8111af40 <__subdf3>
8111220c:	d9c00717 	ldw	r7,28(sp)
81112210:	1009883a 	mov	r4,r2
81112214:	a8800c04 	addi	r2,r21,48
81112218:	38800005 	stb	r2,0(r7)
8111221c:	3dc00044 	addi	r23,r7,1
81112220:	d9c00617 	ldw	r7,24(sp)
81112224:	01800044 	movi	r6,1
81112228:	180b883a 	mov	r5,r3
8111222c:	2005883a 	mov	r2,r4
81112230:	39803826 	beq	r7,r6,81112314 <_dtoa_r+0x8f4>
81112234:	000d883a 	mov	r6,zero
81112238:	01d00934 	movhi	r7,16420
8111223c:	110adac0 	call	8110adac <__muldf3>
81112240:	000d883a 	mov	r6,zero
81112244:	000f883a 	mov	r7,zero
81112248:	1009883a 	mov	r4,r2
8111224c:	180b883a 	mov	r5,r3
81112250:	1025883a 	mov	r18,r2
81112254:	1827883a 	mov	r19,r3
81112258:	111ace80 	call	8111ace8 <__eqdf2>
8111225c:	103f9a26 	beq	r2,zero,811120c8 <__reset+0xfb0f20c8>
81112260:	d9c00617 	ldw	r7,24(sp)
81112264:	d8c00717 	ldw	r3,28(sp)
81112268:	b829883a 	mov	r20,r23
8111226c:	38bfffc4 	addi	r2,r7,-1
81112270:	18ad883a 	add	r22,r3,r2
81112274:	00000a06 	br	811122a0 <_dtoa_r+0x880>
81112278:	110adac0 	call	8110adac <__muldf3>
8111227c:	000d883a 	mov	r6,zero
81112280:	000f883a 	mov	r7,zero
81112284:	1009883a 	mov	r4,r2
81112288:	180b883a 	mov	r5,r3
8111228c:	1025883a 	mov	r18,r2
81112290:	1827883a 	mov	r19,r3
81112294:	b829883a 	mov	r20,r23
81112298:	111ace80 	call	8111ace8 <__eqdf2>
8111229c:	103f8a26 	beq	r2,zero,811120c8 <__reset+0xfb0f20c8>
811122a0:	800d883a 	mov	r6,r16
811122a4:	880f883a 	mov	r7,r17
811122a8:	9009883a 	mov	r4,r18
811122ac:	980b883a 	mov	r5,r19
811122b0:	111a4000 	call	8111a400 <__divdf3>
811122b4:	180b883a 	mov	r5,r3
811122b8:	1009883a 	mov	r4,r2
811122bc:	111b83c0 	call	8111b83c <__fixdfsi>
811122c0:	1009883a 	mov	r4,r2
811122c4:	102b883a 	mov	r21,r2
811122c8:	111b8bc0 	call	8111b8bc <__floatsidf>
811122cc:	800d883a 	mov	r6,r16
811122d0:	880f883a 	mov	r7,r17
811122d4:	1009883a 	mov	r4,r2
811122d8:	180b883a 	mov	r5,r3
811122dc:	110adac0 	call	8110adac <__muldf3>
811122e0:	100d883a 	mov	r6,r2
811122e4:	180f883a 	mov	r7,r3
811122e8:	9009883a 	mov	r4,r18
811122ec:	980b883a 	mov	r5,r19
811122f0:	111af400 	call	8111af40 <__subdf3>
811122f4:	aa000c04 	addi	r8,r21,48
811122f8:	a2000005 	stb	r8,0(r20)
811122fc:	000d883a 	mov	r6,zero
81112300:	01d00934 	movhi	r7,16420
81112304:	1009883a 	mov	r4,r2
81112308:	180b883a 	mov	r5,r3
8111230c:	a5c00044 	addi	r23,r20,1
81112310:	b53fd91e 	bne	r22,r20,81112278 <__reset+0xfb0f2278>
81112314:	100d883a 	mov	r6,r2
81112318:	180f883a 	mov	r7,r3
8111231c:	1009883a 	mov	r4,r2
81112320:	180b883a 	mov	r5,r3
81112324:	1119b540 	call	81119b54 <__adddf3>
81112328:	100d883a 	mov	r6,r2
8111232c:	180f883a 	mov	r7,r3
81112330:	8009883a 	mov	r4,r16
81112334:	880b883a 	mov	r5,r17
81112338:	1027883a 	mov	r19,r2
8111233c:	1825883a 	mov	r18,r3
81112340:	111ae4c0 	call	8111ae4c <__ledf2>
81112344:	10000816 	blt	r2,zero,81112368 <_dtoa_r+0x948>
81112348:	980d883a 	mov	r6,r19
8111234c:	900f883a 	mov	r7,r18
81112350:	8009883a 	mov	r4,r16
81112354:	880b883a 	mov	r5,r17
81112358:	111ace80 	call	8111ace8 <__eqdf2>
8111235c:	103f5a1e 	bne	r2,zero,811120c8 <__reset+0xfb0f20c8>
81112360:	ad40004c 	andi	r21,r21,1
81112364:	a83f5826 	beq	r21,zero,811120c8 <__reset+0xfb0f20c8>
81112368:	bd3fffc3 	ldbu	r20,-1(r23)
8111236c:	b8bfffc4 	addi	r2,r23,-1
81112370:	1007883a 	mov	r3,r2
81112374:	01400e44 	movi	r5,57
81112378:	d9800717 	ldw	r6,28(sp)
8111237c:	00000506 	br	81112394 <_dtoa_r+0x974>
81112380:	18ffffc4 	addi	r3,r3,-1
81112384:	11824726 	beq	r2,r6,81112ca4 <_dtoa_r+0x1284>
81112388:	1d000003 	ldbu	r20,0(r3)
8111238c:	102f883a 	mov	r23,r2
81112390:	10bfffc4 	addi	r2,r2,-1
81112394:	a1003fcc 	andi	r4,r20,255
81112398:	2100201c 	xori	r4,r4,128
8111239c:	213fe004 	addi	r4,r4,-128
811123a0:	217ff726 	beq	r4,r5,81112380 <__reset+0xfb0f2380>
811123a4:	a2000044 	addi	r8,r20,1
811123a8:	12000005 	stb	r8,0(r2)
811123ac:	003f4606 	br	811120c8 <__reset+0xfb0f20c8>
811123b0:	d9000b17 	ldw	r4,44(sp)
811123b4:	2000c826 	beq	r4,zero,811126d8 <_dtoa_r+0xcb8>
811123b8:	d9800317 	ldw	r6,12(sp)
811123bc:	00c00044 	movi	r3,1
811123c0:	1980f90e 	bge	r3,r6,811127a8 <_dtoa_r+0xd88>
811123c4:	d8800617 	ldw	r2,24(sp)
811123c8:	d8c00a17 	ldw	r3,40(sp)
811123cc:	157fffc4 	addi	r21,r2,-1
811123d0:	1d41f316 	blt	r3,r21,81112ba0 <_dtoa_r+0x1180>
811123d4:	1d6bc83a 	sub	r21,r3,r21
811123d8:	d9c00617 	ldw	r7,24(sp)
811123dc:	3802aa16 	blt	r7,zero,81112e88 <_dtoa_r+0x1468>
811123e0:	dd000817 	ldw	r20,32(sp)
811123e4:	d8800617 	ldw	r2,24(sp)
811123e8:	d8c00817 	ldw	r3,32(sp)
811123ec:	01400044 	movi	r5,1
811123f0:	e009883a 	mov	r4,fp
811123f4:	1887883a 	add	r3,r3,r2
811123f8:	d8c00815 	stw	r3,32(sp)
811123fc:	b0ad883a 	add	r22,r22,r2
81112400:	11149f00 	call	811149f0 <__i2b>
81112404:	1023883a 	mov	r17,r2
81112408:	a0000826 	beq	r20,zero,8111242c <_dtoa_r+0xa0c>
8111240c:	0580070e 	bge	zero,r22,8111242c <_dtoa_r+0xa0c>
81112410:	a005883a 	mov	r2,r20
81112414:	b500b916 	blt	r22,r20,811126fc <_dtoa_r+0xcdc>
81112418:	d9000817 	ldw	r4,32(sp)
8111241c:	a0a9c83a 	sub	r20,r20,r2
81112420:	b0adc83a 	sub	r22,r22,r2
81112424:	2089c83a 	sub	r4,r4,r2
81112428:	d9000815 	stw	r4,32(sp)
8111242c:	d9800a17 	ldw	r6,40(sp)
81112430:	0181810e 	bge	zero,r6,81112a38 <_dtoa_r+0x1018>
81112434:	d9c00b17 	ldw	r7,44(sp)
81112438:	3800b326 	beq	r7,zero,81112708 <_dtoa_r+0xce8>
8111243c:	a800b226 	beq	r21,zero,81112708 <_dtoa_r+0xce8>
81112440:	880b883a 	mov	r5,r17
81112444:	a80d883a 	mov	r6,r21
81112448:	e009883a 	mov	r4,fp
8111244c:	1114c240 	call	81114c24 <__pow5mult>
81112450:	d9800917 	ldw	r6,36(sp)
81112454:	100b883a 	mov	r5,r2
81112458:	e009883a 	mov	r4,fp
8111245c:	1023883a 	mov	r17,r2
81112460:	1114a2c0 	call	81114a2c <__multiply>
81112464:	1021883a 	mov	r16,r2
81112468:	d8800a17 	ldw	r2,40(sp)
8111246c:	d9400917 	ldw	r5,36(sp)
81112470:	e009883a 	mov	r4,fp
81112474:	1545c83a 	sub	r2,r2,r21
81112478:	d8800a15 	stw	r2,40(sp)
8111247c:	111468c0 	call	8111468c <_Bfree>
81112480:	d8c00a17 	ldw	r3,40(sp)
81112484:	18009f1e 	bne	r3,zero,81112704 <_dtoa_r+0xce4>
81112488:	05c00044 	movi	r23,1
8111248c:	e009883a 	mov	r4,fp
81112490:	b80b883a 	mov	r5,r23
81112494:	11149f00 	call	811149f0 <__i2b>
81112498:	d9000d17 	ldw	r4,52(sp)
8111249c:	102b883a 	mov	r21,r2
811124a0:	2000ce26 	beq	r4,zero,811127dc <_dtoa_r+0xdbc>
811124a4:	200d883a 	mov	r6,r4
811124a8:	100b883a 	mov	r5,r2
811124ac:	e009883a 	mov	r4,fp
811124b0:	1114c240 	call	81114c24 <__pow5mult>
811124b4:	d9800317 	ldw	r6,12(sp)
811124b8:	102b883a 	mov	r21,r2
811124bc:	b981810e 	bge	r23,r6,81112ac4 <_dtoa_r+0x10a4>
811124c0:	0027883a 	mov	r19,zero
811124c4:	a8800417 	ldw	r2,16(r21)
811124c8:	05c00804 	movi	r23,32
811124cc:	10800104 	addi	r2,r2,4
811124d0:	1085883a 	add	r2,r2,r2
811124d4:	1085883a 	add	r2,r2,r2
811124d8:	a885883a 	add	r2,r21,r2
811124dc:	11000017 	ldw	r4,0(r2)
811124e0:	11148d80 	call	811148d8 <__hi0bits>
811124e4:	b885c83a 	sub	r2,r23,r2
811124e8:	1585883a 	add	r2,r2,r22
811124ec:	108007cc 	andi	r2,r2,31
811124f0:	1000b326 	beq	r2,zero,811127c0 <_dtoa_r+0xda0>
811124f4:	00c00804 	movi	r3,32
811124f8:	1887c83a 	sub	r3,r3,r2
811124fc:	01000104 	movi	r4,4
81112500:	20c2cd0e 	bge	r4,r3,81113038 <_dtoa_r+0x1618>
81112504:	00c00704 	movi	r3,28
81112508:	1885c83a 	sub	r2,r3,r2
8111250c:	d8c00817 	ldw	r3,32(sp)
81112510:	a0a9883a 	add	r20,r20,r2
81112514:	b0ad883a 	add	r22,r22,r2
81112518:	1887883a 	add	r3,r3,r2
8111251c:	d8c00815 	stw	r3,32(sp)
81112520:	d9800817 	ldw	r6,32(sp)
81112524:	0180040e 	bge	zero,r6,81112538 <_dtoa_r+0xb18>
81112528:	800b883a 	mov	r5,r16
8111252c:	e009883a 	mov	r4,fp
81112530:	1114d640 	call	81114d64 <__lshift>
81112534:	1021883a 	mov	r16,r2
81112538:	0580050e 	bge	zero,r22,81112550 <_dtoa_r+0xb30>
8111253c:	a80b883a 	mov	r5,r21
81112540:	b00d883a 	mov	r6,r22
81112544:	e009883a 	mov	r4,fp
81112548:	1114d640 	call	81114d64 <__lshift>
8111254c:	102b883a 	mov	r21,r2
81112550:	d9c00e17 	ldw	r7,56(sp)
81112554:	3801211e 	bne	r7,zero,811129dc <_dtoa_r+0xfbc>
81112558:	d9800617 	ldw	r6,24(sp)
8111255c:	0181380e 	bge	zero,r6,81112a40 <_dtoa_r+0x1020>
81112560:	d8c00b17 	ldw	r3,44(sp)
81112564:	1800ab1e 	bne	r3,zero,81112814 <_dtoa_r+0xdf4>
81112568:	dc800717 	ldw	r18,28(sp)
8111256c:	dcc00617 	ldw	r19,24(sp)
81112570:	9029883a 	mov	r20,r18
81112574:	00000206 	br	81112580 <_dtoa_r+0xb60>
81112578:	11146b40 	call	811146b4 <__multadd>
8111257c:	1021883a 	mov	r16,r2
81112580:	a80b883a 	mov	r5,r21
81112584:	8009883a 	mov	r4,r16
81112588:	11118200 	call	81111820 <quorem>
8111258c:	10800c04 	addi	r2,r2,48
81112590:	90800005 	stb	r2,0(r18)
81112594:	94800044 	addi	r18,r18,1
81112598:	9507c83a 	sub	r3,r18,r20
8111259c:	000f883a 	mov	r7,zero
811125a0:	01800284 	movi	r6,10
811125a4:	800b883a 	mov	r5,r16
811125a8:	e009883a 	mov	r4,fp
811125ac:	1cfff216 	blt	r3,r19,81112578 <__reset+0xfb0f2578>
811125b0:	1011883a 	mov	r8,r2
811125b4:	d8800617 	ldw	r2,24(sp)
811125b8:	0082370e 	bge	zero,r2,81112e98 <_dtoa_r+0x1478>
811125bc:	d9000717 	ldw	r4,28(sp)
811125c0:	0025883a 	mov	r18,zero
811125c4:	20af883a 	add	r23,r4,r2
811125c8:	01800044 	movi	r6,1
811125cc:	800b883a 	mov	r5,r16
811125d0:	e009883a 	mov	r4,fp
811125d4:	da001715 	stw	r8,92(sp)
811125d8:	1114d640 	call	81114d64 <__lshift>
811125dc:	a80b883a 	mov	r5,r21
811125e0:	1009883a 	mov	r4,r2
811125e4:	d8800915 	stw	r2,36(sp)
811125e8:	1114eac0 	call	81114eac <__mcmp>
811125ec:	da001717 	ldw	r8,92(sp)
811125f0:	0081800e 	bge	zero,r2,81112bf4 <_dtoa_r+0x11d4>
811125f4:	b93fffc3 	ldbu	r4,-1(r23)
811125f8:	b8bfffc4 	addi	r2,r23,-1
811125fc:	1007883a 	mov	r3,r2
81112600:	01800e44 	movi	r6,57
81112604:	d9c00717 	ldw	r7,28(sp)
81112608:	00000506 	br	81112620 <_dtoa_r+0xc00>
8111260c:	18ffffc4 	addi	r3,r3,-1
81112610:	11c12326 	beq	r2,r7,81112aa0 <_dtoa_r+0x1080>
81112614:	19000003 	ldbu	r4,0(r3)
81112618:	102f883a 	mov	r23,r2
8111261c:	10bfffc4 	addi	r2,r2,-1
81112620:	21403fcc 	andi	r5,r4,255
81112624:	2940201c 	xori	r5,r5,128
81112628:	297fe004 	addi	r5,r5,-128
8111262c:	29bff726 	beq	r5,r6,8111260c <__reset+0xfb0f260c>
81112630:	21000044 	addi	r4,r4,1
81112634:	11000005 	stb	r4,0(r2)
81112638:	a80b883a 	mov	r5,r21
8111263c:	e009883a 	mov	r4,fp
81112640:	111468c0 	call	8111468c <_Bfree>
81112644:	883ea026 	beq	r17,zero,811120c8 <__reset+0xfb0f20c8>
81112648:	90000426 	beq	r18,zero,8111265c <_dtoa_r+0xc3c>
8111264c:	94400326 	beq	r18,r17,8111265c <_dtoa_r+0xc3c>
81112650:	900b883a 	mov	r5,r18
81112654:	e009883a 	mov	r4,fp
81112658:	111468c0 	call	8111468c <_Bfree>
8111265c:	880b883a 	mov	r5,r17
81112660:	e009883a 	mov	r4,fp
81112664:	111468c0 	call	8111468c <_Bfree>
81112668:	003e9706 	br	811120c8 <__reset+0xfb0f20c8>
8111266c:	01800044 	movi	r6,1
81112670:	d9800e15 	stw	r6,56(sp)
81112674:	003d9606 	br	81111cd0 <__reset+0xfb0f1cd0>
81112678:	d8800817 	ldw	r2,32(sp)
8111267c:	d8c00517 	ldw	r3,20(sp)
81112680:	d8000d15 	stw	zero,52(sp)
81112684:	10c5c83a 	sub	r2,r2,r3
81112688:	00c9c83a 	sub	r4,zero,r3
8111268c:	d8800815 	stw	r2,32(sp)
81112690:	d9000a15 	stw	r4,40(sp)
81112694:	003d9706 	br	81111cf4 <__reset+0xfb0f1cf4>
81112698:	05adc83a 	sub	r22,zero,r22
8111269c:	dd800815 	stw	r22,32(sp)
811126a0:	002d883a 	mov	r22,zero
811126a4:	003d8e06 	br	81111ce0 <__reset+0xfb0f1ce0>
811126a8:	d9000517 	ldw	r4,20(sp)
811126ac:	111b8bc0 	call	8111b8bc <__floatsidf>
811126b0:	100d883a 	mov	r6,r2
811126b4:	180f883a 	mov	r7,r3
811126b8:	a009883a 	mov	r4,r20
811126bc:	880b883a 	mov	r5,r17
811126c0:	111ace80 	call	8111ace8 <__eqdf2>
811126c4:	103d7126 	beq	r2,zero,81111c8c <__reset+0xfb0f1c8c>
811126c8:	d9c00517 	ldw	r7,20(sp)
811126cc:	39ffffc4 	addi	r7,r7,-1
811126d0:	d9c00515 	stw	r7,20(sp)
811126d4:	003d6d06 	br	81111c8c <__reset+0xfb0f1c8c>
811126d8:	dd400a17 	ldw	r21,40(sp)
811126dc:	dd000817 	ldw	r20,32(sp)
811126e0:	0023883a 	mov	r17,zero
811126e4:	003f4806 	br	81112408 <__reset+0xfb0f2408>
811126e8:	10e3c83a 	sub	r17,r2,r3
811126ec:	9448983a 	sll	r4,r18,r17
811126f0:	003d3206 	br	81111bbc <__reset+0xfb0f1bbc>
811126f4:	d8000e15 	stw	zero,56(sp)
811126f8:	003d7506 	br	81111cd0 <__reset+0xfb0f1cd0>
811126fc:	b005883a 	mov	r2,r22
81112700:	003f4506 	br	81112418 <__reset+0xfb0f2418>
81112704:	dc000915 	stw	r16,36(sp)
81112708:	d9800a17 	ldw	r6,40(sp)
8111270c:	d9400917 	ldw	r5,36(sp)
81112710:	e009883a 	mov	r4,fp
81112714:	1114c240 	call	81114c24 <__pow5mult>
81112718:	1021883a 	mov	r16,r2
8111271c:	003f5a06 	br	81112488 <__reset+0xfb0f2488>
81112720:	01c00044 	movi	r7,1
81112724:	d9c00b15 	stw	r7,44(sp)
81112728:	d8802217 	ldw	r2,136(sp)
8111272c:	0081280e 	bge	zero,r2,81112bd0 <_dtoa_r+0x11b0>
81112730:	100d883a 	mov	r6,r2
81112734:	1021883a 	mov	r16,r2
81112738:	d8800c15 	stw	r2,48(sp)
8111273c:	d8800615 	stw	r2,24(sp)
81112740:	003d8806 	br	81111d64 <__reset+0xfb0f1d64>
81112744:	d8800617 	ldw	r2,24(sp)
81112748:	00be9b16 	blt	zero,r2,811121b8 <__reset+0xfb0f21b8>
8111274c:	10010f1e 	bne	r2,zero,81112b8c <_dtoa_r+0x116c>
81112750:	880b883a 	mov	r5,r17
81112754:	000d883a 	mov	r6,zero
81112758:	01d00534 	movhi	r7,16404
8111275c:	8009883a 	mov	r4,r16
81112760:	110adac0 	call	8110adac <__muldf3>
81112764:	900d883a 	mov	r6,r18
81112768:	980f883a 	mov	r7,r19
8111276c:	1009883a 	mov	r4,r2
81112770:	180b883a 	mov	r5,r3
81112774:	111ad700 	call	8111ad70 <__gedf2>
81112778:	002b883a 	mov	r21,zero
8111277c:	0023883a 	mov	r17,zero
81112780:	1000bf16 	blt	r2,zero,81112a80 <_dtoa_r+0x1060>
81112784:	d9802217 	ldw	r6,136(sp)
81112788:	ddc00717 	ldw	r23,28(sp)
8111278c:	018c303a 	nor	r6,zero,r6
81112790:	d9800515 	stw	r6,20(sp)
81112794:	a80b883a 	mov	r5,r21
81112798:	e009883a 	mov	r4,fp
8111279c:	111468c0 	call	8111468c <_Bfree>
811127a0:	883e4926 	beq	r17,zero,811120c8 <__reset+0xfb0f20c8>
811127a4:	003fad06 	br	8111265c <__reset+0xfb0f265c>
811127a8:	d9c01117 	ldw	r7,68(sp)
811127ac:	3801bc26 	beq	r7,zero,81112ea0 <_dtoa_r+0x1480>
811127b0:	10810cc4 	addi	r2,r2,1075
811127b4:	dd400a17 	ldw	r21,40(sp)
811127b8:	dd000817 	ldw	r20,32(sp)
811127bc:	003f0a06 	br	811123e8 <__reset+0xfb0f23e8>
811127c0:	00800704 	movi	r2,28
811127c4:	d9000817 	ldw	r4,32(sp)
811127c8:	a0a9883a 	add	r20,r20,r2
811127cc:	b0ad883a 	add	r22,r22,r2
811127d0:	2089883a 	add	r4,r4,r2
811127d4:	d9000815 	stw	r4,32(sp)
811127d8:	003f5106 	br	81112520 <__reset+0xfb0f2520>
811127dc:	d8c00317 	ldw	r3,12(sp)
811127e0:	b8c1fc0e 	bge	r23,r3,81112fd4 <_dtoa_r+0x15b4>
811127e4:	0027883a 	mov	r19,zero
811127e8:	b805883a 	mov	r2,r23
811127ec:	003f3e06 	br	811124e8 <__reset+0xfb0f24e8>
811127f0:	880b883a 	mov	r5,r17
811127f4:	e009883a 	mov	r4,fp
811127f8:	000f883a 	mov	r7,zero
811127fc:	01800284 	movi	r6,10
81112800:	11146b40 	call	811146b4 <__multadd>
81112804:	d9000c17 	ldw	r4,48(sp)
81112808:	1023883a 	mov	r17,r2
8111280c:	0102040e 	bge	zero,r4,81113020 <_dtoa_r+0x1600>
81112810:	d9000615 	stw	r4,24(sp)
81112814:	0500050e 	bge	zero,r20,8111282c <_dtoa_r+0xe0c>
81112818:	880b883a 	mov	r5,r17
8111281c:	a00d883a 	mov	r6,r20
81112820:	e009883a 	mov	r4,fp
81112824:	1114d640 	call	81114d64 <__lshift>
81112828:	1023883a 	mov	r17,r2
8111282c:	9801241e 	bne	r19,zero,81112cc0 <_dtoa_r+0x12a0>
81112830:	8829883a 	mov	r20,r17
81112834:	d9000617 	ldw	r4,24(sp)
81112838:	dcc00717 	ldw	r19,28(sp)
8111283c:	9480004c 	andi	r18,r18,1
81112840:	20bfffc4 	addi	r2,r4,-1
81112844:	9885883a 	add	r2,r19,r2
81112848:	d8800415 	stw	r2,16(sp)
8111284c:	dc800615 	stw	r18,24(sp)
81112850:	a80b883a 	mov	r5,r21
81112854:	8009883a 	mov	r4,r16
81112858:	11118200 	call	81111820 <quorem>
8111285c:	880b883a 	mov	r5,r17
81112860:	8009883a 	mov	r4,r16
81112864:	102f883a 	mov	r23,r2
81112868:	1114eac0 	call	81114eac <__mcmp>
8111286c:	a80b883a 	mov	r5,r21
81112870:	a00d883a 	mov	r6,r20
81112874:	e009883a 	mov	r4,fp
81112878:	102d883a 	mov	r22,r2
8111287c:	1114f0c0 	call	81114f0c <__mdiff>
81112880:	1007883a 	mov	r3,r2
81112884:	10800317 	ldw	r2,12(r2)
81112888:	bc800c04 	addi	r18,r23,48
8111288c:	180b883a 	mov	r5,r3
81112890:	10004e1e 	bne	r2,zero,811129cc <_dtoa_r+0xfac>
81112894:	8009883a 	mov	r4,r16
81112898:	d8c01615 	stw	r3,88(sp)
8111289c:	1114eac0 	call	81114eac <__mcmp>
811128a0:	d8c01617 	ldw	r3,88(sp)
811128a4:	e009883a 	mov	r4,fp
811128a8:	d8801615 	stw	r2,88(sp)
811128ac:	180b883a 	mov	r5,r3
811128b0:	111468c0 	call	8111468c <_Bfree>
811128b4:	d8801617 	ldw	r2,88(sp)
811128b8:	1000041e 	bne	r2,zero,811128cc <_dtoa_r+0xeac>
811128bc:	d9800317 	ldw	r6,12(sp)
811128c0:	3000021e 	bne	r6,zero,811128cc <_dtoa_r+0xeac>
811128c4:	d8c00617 	ldw	r3,24(sp)
811128c8:	18003726 	beq	r3,zero,811129a8 <_dtoa_r+0xf88>
811128cc:	b0002016 	blt	r22,zero,81112950 <_dtoa_r+0xf30>
811128d0:	b000041e 	bne	r22,zero,811128e4 <_dtoa_r+0xec4>
811128d4:	d9000317 	ldw	r4,12(sp)
811128d8:	2000021e 	bne	r4,zero,811128e4 <_dtoa_r+0xec4>
811128dc:	d8c00617 	ldw	r3,24(sp)
811128e0:	18001b26 	beq	r3,zero,81112950 <_dtoa_r+0xf30>
811128e4:	00810716 	blt	zero,r2,81112d04 <_dtoa_r+0x12e4>
811128e8:	d8c00417 	ldw	r3,16(sp)
811128ec:	9d800044 	addi	r22,r19,1
811128f0:	9c800005 	stb	r18,0(r19)
811128f4:	b02f883a 	mov	r23,r22
811128f8:	98c10626 	beq	r19,r3,81112d14 <_dtoa_r+0x12f4>
811128fc:	800b883a 	mov	r5,r16
81112900:	000f883a 	mov	r7,zero
81112904:	01800284 	movi	r6,10
81112908:	e009883a 	mov	r4,fp
8111290c:	11146b40 	call	811146b4 <__multadd>
81112910:	1021883a 	mov	r16,r2
81112914:	000f883a 	mov	r7,zero
81112918:	01800284 	movi	r6,10
8111291c:	880b883a 	mov	r5,r17
81112920:	e009883a 	mov	r4,fp
81112924:	8d002526 	beq	r17,r20,811129bc <_dtoa_r+0xf9c>
81112928:	11146b40 	call	811146b4 <__multadd>
8111292c:	a00b883a 	mov	r5,r20
81112930:	000f883a 	mov	r7,zero
81112934:	01800284 	movi	r6,10
81112938:	e009883a 	mov	r4,fp
8111293c:	1023883a 	mov	r17,r2
81112940:	11146b40 	call	811146b4 <__multadd>
81112944:	1029883a 	mov	r20,r2
81112948:	b027883a 	mov	r19,r22
8111294c:	003fc006 	br	81112850 <__reset+0xfb0f2850>
81112950:	9011883a 	mov	r8,r18
81112954:	00800e0e 	bge	zero,r2,81112990 <_dtoa_r+0xf70>
81112958:	800b883a 	mov	r5,r16
8111295c:	01800044 	movi	r6,1
81112960:	e009883a 	mov	r4,fp
81112964:	da001715 	stw	r8,92(sp)
81112968:	1114d640 	call	81114d64 <__lshift>
8111296c:	a80b883a 	mov	r5,r21
81112970:	1009883a 	mov	r4,r2
81112974:	1021883a 	mov	r16,r2
81112978:	1114eac0 	call	81114eac <__mcmp>
8111297c:	da001717 	ldw	r8,92(sp)
81112980:	0081960e 	bge	zero,r2,81112fdc <_dtoa_r+0x15bc>
81112984:	00800e44 	movi	r2,57
81112988:	40817026 	beq	r8,r2,81112f4c <_dtoa_r+0x152c>
8111298c:	ba000c44 	addi	r8,r23,49
81112990:	8825883a 	mov	r18,r17
81112994:	9dc00044 	addi	r23,r19,1
81112998:	9a000005 	stb	r8,0(r19)
8111299c:	a023883a 	mov	r17,r20
811129a0:	dc000915 	stw	r16,36(sp)
811129a4:	003f2406 	br	81112638 <__reset+0xfb0f2638>
811129a8:	00800e44 	movi	r2,57
811129ac:	9011883a 	mov	r8,r18
811129b0:	90816626 	beq	r18,r2,81112f4c <_dtoa_r+0x152c>
811129b4:	05bff516 	blt	zero,r22,8111298c <__reset+0xfb0f298c>
811129b8:	003ff506 	br	81112990 <__reset+0xfb0f2990>
811129bc:	11146b40 	call	811146b4 <__multadd>
811129c0:	1023883a 	mov	r17,r2
811129c4:	1029883a 	mov	r20,r2
811129c8:	003fdf06 	br	81112948 <__reset+0xfb0f2948>
811129cc:	e009883a 	mov	r4,fp
811129d0:	111468c0 	call	8111468c <_Bfree>
811129d4:	00800044 	movi	r2,1
811129d8:	003fbc06 	br	811128cc <__reset+0xfb0f28cc>
811129dc:	a80b883a 	mov	r5,r21
811129e0:	8009883a 	mov	r4,r16
811129e4:	1114eac0 	call	81114eac <__mcmp>
811129e8:	103edb0e 	bge	r2,zero,81112558 <__reset+0xfb0f2558>
811129ec:	800b883a 	mov	r5,r16
811129f0:	000f883a 	mov	r7,zero
811129f4:	01800284 	movi	r6,10
811129f8:	e009883a 	mov	r4,fp
811129fc:	11146b40 	call	811146b4 <__multadd>
81112a00:	1021883a 	mov	r16,r2
81112a04:	d8800517 	ldw	r2,20(sp)
81112a08:	d8c00b17 	ldw	r3,44(sp)
81112a0c:	10bfffc4 	addi	r2,r2,-1
81112a10:	d8800515 	stw	r2,20(sp)
81112a14:	183f761e 	bne	r3,zero,811127f0 <__reset+0xfb0f27f0>
81112a18:	d9000c17 	ldw	r4,48(sp)
81112a1c:	0101730e 	bge	zero,r4,81112fec <_dtoa_r+0x15cc>
81112a20:	d9000615 	stw	r4,24(sp)
81112a24:	003ed006 	br	81112568 <__reset+0xfb0f2568>
81112a28:	00800084 	movi	r2,2
81112a2c:	3081861e 	bne	r6,r2,81113048 <_dtoa_r+0x1628>
81112a30:	d8000b15 	stw	zero,44(sp)
81112a34:	003f3c06 	br	81112728 <__reset+0xfb0f2728>
81112a38:	dc000917 	ldw	r16,36(sp)
81112a3c:	003e9206 	br	81112488 <__reset+0xfb0f2488>
81112a40:	d9c00317 	ldw	r7,12(sp)
81112a44:	00800084 	movi	r2,2
81112a48:	11fec50e 	bge	r2,r7,81112560 <__reset+0xfb0f2560>
81112a4c:	d9000617 	ldw	r4,24(sp)
81112a50:	20013c1e 	bne	r4,zero,81112f44 <_dtoa_r+0x1524>
81112a54:	a80b883a 	mov	r5,r21
81112a58:	000f883a 	mov	r7,zero
81112a5c:	01800144 	movi	r6,5
81112a60:	e009883a 	mov	r4,fp
81112a64:	11146b40 	call	811146b4 <__multadd>
81112a68:	100b883a 	mov	r5,r2
81112a6c:	8009883a 	mov	r4,r16
81112a70:	102b883a 	mov	r21,r2
81112a74:	1114eac0 	call	81114eac <__mcmp>
81112a78:	dc000915 	stw	r16,36(sp)
81112a7c:	00bf410e 	bge	zero,r2,81112784 <__reset+0xfb0f2784>
81112a80:	d9c00717 	ldw	r7,28(sp)
81112a84:	00800c44 	movi	r2,49
81112a88:	38800005 	stb	r2,0(r7)
81112a8c:	d8800517 	ldw	r2,20(sp)
81112a90:	3dc00044 	addi	r23,r7,1
81112a94:	10800044 	addi	r2,r2,1
81112a98:	d8800515 	stw	r2,20(sp)
81112a9c:	003f3d06 	br	81112794 <__reset+0xfb0f2794>
81112aa0:	d9800517 	ldw	r6,20(sp)
81112aa4:	d9c00717 	ldw	r7,28(sp)
81112aa8:	00800c44 	movi	r2,49
81112aac:	31800044 	addi	r6,r6,1
81112ab0:	d9800515 	stw	r6,20(sp)
81112ab4:	38800005 	stb	r2,0(r7)
81112ab8:	003edf06 	br	81112638 <__reset+0xfb0f2638>
81112abc:	d8000b15 	stw	zero,44(sp)
81112ac0:	003c9f06 	br	81111d40 <__reset+0xfb0f1d40>
81112ac4:	903e7e1e 	bne	r18,zero,811124c0 <__reset+0xfb0f24c0>
81112ac8:	00800434 	movhi	r2,16
81112acc:	10bfffc4 	addi	r2,r2,-1
81112ad0:	9884703a 	and	r2,r19,r2
81112ad4:	1000ea1e 	bne	r2,zero,81112e80 <_dtoa_r+0x1460>
81112ad8:	9cdffc2c 	andhi	r19,r19,32752
81112adc:	9800e826 	beq	r19,zero,81112e80 <_dtoa_r+0x1460>
81112ae0:	d9c00817 	ldw	r7,32(sp)
81112ae4:	b5800044 	addi	r22,r22,1
81112ae8:	04c00044 	movi	r19,1
81112aec:	39c00044 	addi	r7,r7,1
81112af0:	d9c00815 	stw	r7,32(sp)
81112af4:	d8800d17 	ldw	r2,52(sp)
81112af8:	103e721e 	bne	r2,zero,811124c4 <__reset+0xfb0f24c4>
81112afc:	00800044 	movi	r2,1
81112b00:	003e7906 	br	811124e8 <__reset+0xfb0f24e8>
81112b04:	8009883a 	mov	r4,r16
81112b08:	111b8bc0 	call	8111b8bc <__floatsidf>
81112b0c:	d9800f17 	ldw	r6,60(sp)
81112b10:	d9c01017 	ldw	r7,64(sp)
81112b14:	1009883a 	mov	r4,r2
81112b18:	180b883a 	mov	r5,r3
81112b1c:	110adac0 	call	8110adac <__muldf3>
81112b20:	000d883a 	mov	r6,zero
81112b24:	01d00734 	movhi	r7,16412
81112b28:	1009883a 	mov	r4,r2
81112b2c:	180b883a 	mov	r5,r3
81112b30:	1119b540 	call	81119b54 <__adddf3>
81112b34:	047f3034 	movhi	r17,64704
81112b38:	1021883a 	mov	r16,r2
81112b3c:	1c63883a 	add	r17,r3,r17
81112b40:	d9000f17 	ldw	r4,60(sp)
81112b44:	d9401017 	ldw	r5,64(sp)
81112b48:	000d883a 	mov	r6,zero
81112b4c:	01d00534 	movhi	r7,16404
81112b50:	111af400 	call	8111af40 <__subdf3>
81112b54:	800d883a 	mov	r6,r16
81112b58:	880f883a 	mov	r7,r17
81112b5c:	1009883a 	mov	r4,r2
81112b60:	180b883a 	mov	r5,r3
81112b64:	102b883a 	mov	r21,r2
81112b68:	1829883a 	mov	r20,r3
81112b6c:	111ad700 	call	8111ad70 <__gedf2>
81112b70:	00806c16 	blt	zero,r2,81112d24 <_dtoa_r+0x1304>
81112b74:	89e0003c 	xorhi	r7,r17,32768
81112b78:	800d883a 	mov	r6,r16
81112b7c:	a809883a 	mov	r4,r21
81112b80:	a00b883a 	mov	r5,r20
81112b84:	111ae4c0 	call	8111ae4c <__ledf2>
81112b88:	103d7e0e 	bge	r2,zero,81112184 <__reset+0xfb0f2184>
81112b8c:	002b883a 	mov	r21,zero
81112b90:	0023883a 	mov	r17,zero
81112b94:	003efb06 	br	81112784 <__reset+0xfb0f2784>
81112b98:	d8800717 	ldw	r2,28(sp)
81112b9c:	003bd006 	br	81111ae0 <__reset+0xfb0f1ae0>
81112ba0:	d9000a17 	ldw	r4,40(sp)
81112ba4:	d9800d17 	ldw	r6,52(sp)
81112ba8:	dd400a15 	stw	r21,40(sp)
81112bac:	a905c83a 	sub	r2,r21,r4
81112bb0:	308d883a 	add	r6,r6,r2
81112bb4:	d9800d15 	stw	r6,52(sp)
81112bb8:	002b883a 	mov	r21,zero
81112bbc:	003e0606 	br	811123d8 <__reset+0xfb0f23d8>
81112bc0:	9023883a 	mov	r17,r18
81112bc4:	9829883a 	mov	r20,r19
81112bc8:	04000084 	movi	r16,2
81112bcc:	003c9206 	br	81111e18 <__reset+0xfb0f1e18>
81112bd0:	04000044 	movi	r16,1
81112bd4:	dc000c15 	stw	r16,48(sp)
81112bd8:	dc000615 	stw	r16,24(sp)
81112bdc:	dc002215 	stw	r16,136(sp)
81112be0:	e0001115 	stw	zero,68(fp)
81112be4:	000b883a 	mov	r5,zero
81112be8:	003c6906 	br	81111d90 <__reset+0xfb0f1d90>
81112bec:	3021883a 	mov	r16,r6
81112bf0:	003ffb06 	br	81112be0 <__reset+0xfb0f2be0>
81112bf4:	1000021e 	bne	r2,zero,81112c00 <_dtoa_r+0x11e0>
81112bf8:	4200004c 	andi	r8,r8,1
81112bfc:	403e7d1e 	bne	r8,zero,811125f4 <__reset+0xfb0f25f4>
81112c00:	01000c04 	movi	r4,48
81112c04:	00000106 	br	81112c0c <_dtoa_r+0x11ec>
81112c08:	102f883a 	mov	r23,r2
81112c0c:	b8bfffc4 	addi	r2,r23,-1
81112c10:	10c00007 	ldb	r3,0(r2)
81112c14:	193ffc26 	beq	r3,r4,81112c08 <__reset+0xfb0f2c08>
81112c18:	003e8706 	br	81112638 <__reset+0xfb0f2638>
81112c1c:	d8800517 	ldw	r2,20(sp)
81112c20:	00a3c83a 	sub	r17,zero,r2
81112c24:	8800a426 	beq	r17,zero,81112eb8 <_dtoa_r+0x1498>
81112c28:	888003cc 	andi	r2,r17,15
81112c2c:	100490fa 	slli	r2,r2,3
81112c30:	00e044b4 	movhi	r3,33042
81112c34:	18c90b04 	addi	r3,r3,9260
81112c38:	1885883a 	add	r2,r3,r2
81112c3c:	11800017 	ldw	r6,0(r2)
81112c40:	11c00117 	ldw	r7,4(r2)
81112c44:	9009883a 	mov	r4,r18
81112c48:	980b883a 	mov	r5,r19
81112c4c:	8823d13a 	srai	r17,r17,4
81112c50:	110adac0 	call	8110adac <__muldf3>
81112c54:	d8800f15 	stw	r2,60(sp)
81112c58:	d8c01015 	stw	r3,64(sp)
81112c5c:	8800e826 	beq	r17,zero,81113000 <_dtoa_r+0x15e0>
81112c60:	052044b4 	movhi	r20,33042
81112c64:	a5090104 	addi	r20,r20,9220
81112c68:	04000084 	movi	r16,2
81112c6c:	8980004c 	andi	r6,r17,1
81112c70:	1009883a 	mov	r4,r2
81112c74:	8823d07a 	srai	r17,r17,1
81112c78:	180b883a 	mov	r5,r3
81112c7c:	30000426 	beq	r6,zero,81112c90 <_dtoa_r+0x1270>
81112c80:	a1800017 	ldw	r6,0(r20)
81112c84:	a1c00117 	ldw	r7,4(r20)
81112c88:	84000044 	addi	r16,r16,1
81112c8c:	110adac0 	call	8110adac <__muldf3>
81112c90:	a5000204 	addi	r20,r20,8
81112c94:	883ff51e 	bne	r17,zero,81112c6c <__reset+0xfb0f2c6c>
81112c98:	d8800f15 	stw	r2,60(sp)
81112c9c:	d8c01015 	stw	r3,64(sp)
81112ca0:	003c7606 	br	81111e7c <__reset+0xfb0f1e7c>
81112ca4:	00c00c04 	movi	r3,48
81112ca8:	10c00005 	stb	r3,0(r2)
81112cac:	d8c00517 	ldw	r3,20(sp)
81112cb0:	bd3fffc3 	ldbu	r20,-1(r23)
81112cb4:	18c00044 	addi	r3,r3,1
81112cb8:	d8c00515 	stw	r3,20(sp)
81112cbc:	003db906 	br	811123a4 <__reset+0xfb0f23a4>
81112cc0:	89400117 	ldw	r5,4(r17)
81112cc4:	e009883a 	mov	r4,fp
81112cc8:	11145e40 	call	811145e4 <_Balloc>
81112ccc:	89800417 	ldw	r6,16(r17)
81112cd0:	89400304 	addi	r5,r17,12
81112cd4:	11000304 	addi	r4,r2,12
81112cd8:	31800084 	addi	r6,r6,2
81112cdc:	318d883a 	add	r6,r6,r6
81112ce0:	318d883a 	add	r6,r6,r6
81112ce4:	1027883a 	mov	r19,r2
81112ce8:	110c9d40 	call	8110c9d4 <memcpy>
81112cec:	01800044 	movi	r6,1
81112cf0:	980b883a 	mov	r5,r19
81112cf4:	e009883a 	mov	r4,fp
81112cf8:	1114d640 	call	81114d64 <__lshift>
81112cfc:	1029883a 	mov	r20,r2
81112d00:	003ecc06 	br	81112834 <__reset+0xfb0f2834>
81112d04:	00800e44 	movi	r2,57
81112d08:	90809026 	beq	r18,r2,81112f4c <_dtoa_r+0x152c>
81112d0c:	92000044 	addi	r8,r18,1
81112d10:	003f1f06 	br	81112990 <__reset+0xfb0f2990>
81112d14:	9011883a 	mov	r8,r18
81112d18:	8825883a 	mov	r18,r17
81112d1c:	a023883a 	mov	r17,r20
81112d20:	003e2906 	br	811125c8 <__reset+0xfb0f25c8>
81112d24:	002b883a 	mov	r21,zero
81112d28:	0023883a 	mov	r17,zero
81112d2c:	003f5406 	br	81112a80 <__reset+0xfb0f2a80>
81112d30:	61bfffc4 	addi	r6,r12,-1
81112d34:	300490fa 	slli	r2,r6,3
81112d38:	00e044b4 	movhi	r3,33042
81112d3c:	18c90b04 	addi	r3,r3,9260
81112d40:	1885883a 	add	r2,r3,r2
81112d44:	11000017 	ldw	r4,0(r2)
81112d48:	11400117 	ldw	r5,4(r2)
81112d4c:	d8800717 	ldw	r2,28(sp)
81112d50:	880f883a 	mov	r7,r17
81112d54:	d9801215 	stw	r6,72(sp)
81112d58:	800d883a 	mov	r6,r16
81112d5c:	db001615 	stw	r12,88(sp)
81112d60:	15c00044 	addi	r23,r2,1
81112d64:	110adac0 	call	8110adac <__muldf3>
81112d68:	d9401017 	ldw	r5,64(sp)
81112d6c:	d9000f17 	ldw	r4,60(sp)
81112d70:	d8c01515 	stw	r3,84(sp)
81112d74:	d8801415 	stw	r2,80(sp)
81112d78:	111b83c0 	call	8111b83c <__fixdfsi>
81112d7c:	1009883a 	mov	r4,r2
81112d80:	1021883a 	mov	r16,r2
81112d84:	111b8bc0 	call	8111b8bc <__floatsidf>
81112d88:	d9000f17 	ldw	r4,60(sp)
81112d8c:	d9401017 	ldw	r5,64(sp)
81112d90:	100d883a 	mov	r6,r2
81112d94:	180f883a 	mov	r7,r3
81112d98:	111af400 	call	8111af40 <__subdf3>
81112d9c:	1829883a 	mov	r20,r3
81112da0:	d8c00717 	ldw	r3,28(sp)
81112da4:	84000c04 	addi	r16,r16,48
81112da8:	1023883a 	mov	r17,r2
81112dac:	1c000005 	stb	r16,0(r3)
81112db0:	db001617 	ldw	r12,88(sp)
81112db4:	00800044 	movi	r2,1
81112db8:	60802226 	beq	r12,r2,81112e44 <_dtoa_r+0x1424>
81112dbc:	d9c00717 	ldw	r7,28(sp)
81112dc0:	8805883a 	mov	r2,r17
81112dc4:	b82b883a 	mov	r21,r23
81112dc8:	3b19883a 	add	r12,r7,r12
81112dcc:	6023883a 	mov	r17,r12
81112dd0:	a007883a 	mov	r3,r20
81112dd4:	dc800f15 	stw	r18,60(sp)
81112dd8:	000d883a 	mov	r6,zero
81112ddc:	01d00934 	movhi	r7,16420
81112de0:	1009883a 	mov	r4,r2
81112de4:	180b883a 	mov	r5,r3
81112de8:	110adac0 	call	8110adac <__muldf3>
81112dec:	180b883a 	mov	r5,r3
81112df0:	1009883a 	mov	r4,r2
81112df4:	1829883a 	mov	r20,r3
81112df8:	1025883a 	mov	r18,r2
81112dfc:	111b83c0 	call	8111b83c <__fixdfsi>
81112e00:	1009883a 	mov	r4,r2
81112e04:	1021883a 	mov	r16,r2
81112e08:	111b8bc0 	call	8111b8bc <__floatsidf>
81112e0c:	100d883a 	mov	r6,r2
81112e10:	180f883a 	mov	r7,r3
81112e14:	9009883a 	mov	r4,r18
81112e18:	a00b883a 	mov	r5,r20
81112e1c:	84000c04 	addi	r16,r16,48
81112e20:	111af400 	call	8111af40 <__subdf3>
81112e24:	ad400044 	addi	r21,r21,1
81112e28:	ac3fffc5 	stb	r16,-1(r21)
81112e2c:	ac7fea1e 	bne	r21,r17,81112dd8 <__reset+0xfb0f2dd8>
81112e30:	1023883a 	mov	r17,r2
81112e34:	d8801217 	ldw	r2,72(sp)
81112e38:	dc800f17 	ldw	r18,60(sp)
81112e3c:	1829883a 	mov	r20,r3
81112e40:	b8af883a 	add	r23,r23,r2
81112e44:	d9001417 	ldw	r4,80(sp)
81112e48:	d9401517 	ldw	r5,84(sp)
81112e4c:	000d883a 	mov	r6,zero
81112e50:	01cff834 	movhi	r7,16352
81112e54:	1119b540 	call	81119b54 <__adddf3>
81112e58:	880d883a 	mov	r6,r17
81112e5c:	a00f883a 	mov	r7,r20
81112e60:	1009883a 	mov	r4,r2
81112e64:	180b883a 	mov	r5,r3
81112e68:	111ae4c0 	call	8111ae4c <__ledf2>
81112e6c:	10003e0e 	bge	r2,zero,81112f68 <_dtoa_r+0x1548>
81112e70:	d9001317 	ldw	r4,76(sp)
81112e74:	bd3fffc3 	ldbu	r20,-1(r23)
81112e78:	d9000515 	stw	r4,20(sp)
81112e7c:	003d3b06 	br	8111236c <__reset+0xfb0f236c>
81112e80:	0027883a 	mov	r19,zero
81112e84:	003f1b06 	br	81112af4 <__reset+0xfb0f2af4>
81112e88:	d8800817 	ldw	r2,32(sp)
81112e8c:	11e9c83a 	sub	r20,r2,r7
81112e90:	0005883a 	mov	r2,zero
81112e94:	003d5406 	br	811123e8 <__reset+0xfb0f23e8>
81112e98:	00800044 	movi	r2,1
81112e9c:	003dc706 	br	811125bc <__reset+0xfb0f25bc>
81112ea0:	d8c00217 	ldw	r3,8(sp)
81112ea4:	00800d84 	movi	r2,54
81112ea8:	dd400a17 	ldw	r21,40(sp)
81112eac:	10c5c83a 	sub	r2,r2,r3
81112eb0:	dd000817 	ldw	r20,32(sp)
81112eb4:	003d4c06 	br	811123e8 <__reset+0xfb0f23e8>
81112eb8:	dc800f15 	stw	r18,60(sp)
81112ebc:	dcc01015 	stw	r19,64(sp)
81112ec0:	04000084 	movi	r16,2
81112ec4:	003bed06 	br	81111e7c <__reset+0xfb0f1e7c>
81112ec8:	d9000617 	ldw	r4,24(sp)
81112ecc:	203f0d26 	beq	r4,zero,81112b04 <__reset+0xfb0f2b04>
81112ed0:	d9800c17 	ldw	r6,48(sp)
81112ed4:	01bcab0e 	bge	zero,r6,81112184 <__reset+0xfb0f2184>
81112ed8:	d9401017 	ldw	r5,64(sp)
81112edc:	d9000f17 	ldw	r4,60(sp)
81112ee0:	000d883a 	mov	r6,zero
81112ee4:	01d00934 	movhi	r7,16420
81112ee8:	110adac0 	call	8110adac <__muldf3>
81112eec:	81000044 	addi	r4,r16,1
81112ef0:	d8800f15 	stw	r2,60(sp)
81112ef4:	d8c01015 	stw	r3,64(sp)
81112ef8:	111b8bc0 	call	8111b8bc <__floatsidf>
81112efc:	d9800f17 	ldw	r6,60(sp)
81112f00:	d9c01017 	ldw	r7,64(sp)
81112f04:	1009883a 	mov	r4,r2
81112f08:	180b883a 	mov	r5,r3
81112f0c:	110adac0 	call	8110adac <__muldf3>
81112f10:	01d00734 	movhi	r7,16412
81112f14:	000d883a 	mov	r6,zero
81112f18:	1009883a 	mov	r4,r2
81112f1c:	180b883a 	mov	r5,r3
81112f20:	1119b540 	call	81119b54 <__adddf3>
81112f24:	d9c00517 	ldw	r7,20(sp)
81112f28:	047f3034 	movhi	r17,64704
81112f2c:	1021883a 	mov	r16,r2
81112f30:	39ffffc4 	addi	r7,r7,-1
81112f34:	d9c01315 	stw	r7,76(sp)
81112f38:	1c63883a 	add	r17,r3,r17
81112f3c:	db000c17 	ldw	r12,48(sp)
81112f40:	003bea06 	br	81111eec <__reset+0xfb0f1eec>
81112f44:	dc000915 	stw	r16,36(sp)
81112f48:	003e0e06 	br	81112784 <__reset+0xfb0f2784>
81112f4c:	01000e44 	movi	r4,57
81112f50:	8825883a 	mov	r18,r17
81112f54:	9dc00044 	addi	r23,r19,1
81112f58:	99000005 	stb	r4,0(r19)
81112f5c:	a023883a 	mov	r17,r20
81112f60:	dc000915 	stw	r16,36(sp)
81112f64:	003da406 	br	811125f8 <__reset+0xfb0f25f8>
81112f68:	d9801417 	ldw	r6,80(sp)
81112f6c:	d9c01517 	ldw	r7,84(sp)
81112f70:	0009883a 	mov	r4,zero
81112f74:	014ff834 	movhi	r5,16352
81112f78:	111af400 	call	8111af40 <__subdf3>
81112f7c:	880d883a 	mov	r6,r17
81112f80:	a00f883a 	mov	r7,r20
81112f84:	1009883a 	mov	r4,r2
81112f88:	180b883a 	mov	r5,r3
81112f8c:	111ad700 	call	8111ad70 <__gedf2>
81112f90:	00bc7c0e 	bge	zero,r2,81112184 <__reset+0xfb0f2184>
81112f94:	01000c04 	movi	r4,48
81112f98:	00000106 	br	81112fa0 <_dtoa_r+0x1580>
81112f9c:	102f883a 	mov	r23,r2
81112fa0:	b8bfffc4 	addi	r2,r23,-1
81112fa4:	10c00007 	ldb	r3,0(r2)
81112fa8:	193ffc26 	beq	r3,r4,81112f9c <__reset+0xfb0f2f9c>
81112fac:	d9801317 	ldw	r6,76(sp)
81112fb0:	d9800515 	stw	r6,20(sp)
81112fb4:	003c4406 	br	811120c8 <__reset+0xfb0f20c8>
81112fb8:	d9801317 	ldw	r6,76(sp)
81112fbc:	d9800515 	stw	r6,20(sp)
81112fc0:	003cea06 	br	8111236c <__reset+0xfb0f236c>
81112fc4:	dd800f17 	ldw	r22,60(sp)
81112fc8:	dcc01017 	ldw	r19,64(sp)
81112fcc:	dc801217 	ldw	r18,72(sp)
81112fd0:	003c6c06 	br	81112184 <__reset+0xfb0f2184>
81112fd4:	903e031e 	bne	r18,zero,811127e4 <__reset+0xfb0f27e4>
81112fd8:	003ebb06 	br	81112ac8 <__reset+0xfb0f2ac8>
81112fdc:	103e6c1e 	bne	r2,zero,81112990 <__reset+0xfb0f2990>
81112fe0:	4080004c 	andi	r2,r8,1
81112fe4:	103e6a26 	beq	r2,zero,81112990 <__reset+0xfb0f2990>
81112fe8:	003e6606 	br	81112984 <__reset+0xfb0f2984>
81112fec:	d8c00317 	ldw	r3,12(sp)
81112ff0:	00800084 	movi	r2,2
81112ff4:	10c02916 	blt	r2,r3,8111309c <_dtoa_r+0x167c>
81112ff8:	d9000c17 	ldw	r4,48(sp)
81112ffc:	003e8806 	br	81112a20 <__reset+0xfb0f2a20>
81113000:	04000084 	movi	r16,2
81113004:	003b9d06 	br	81111e7c <__reset+0xfb0f1e7c>
81113008:	d9001317 	ldw	r4,76(sp)
8111300c:	d9000515 	stw	r4,20(sp)
81113010:	003cd606 	br	8111236c <__reset+0xfb0f236c>
81113014:	d8801317 	ldw	r2,76(sp)
81113018:	d8800515 	stw	r2,20(sp)
8111301c:	003c2a06 	br	811120c8 <__reset+0xfb0f20c8>
81113020:	d9800317 	ldw	r6,12(sp)
81113024:	00800084 	movi	r2,2
81113028:	11801516 	blt	r2,r6,81113080 <_dtoa_r+0x1660>
8111302c:	d9c00c17 	ldw	r7,48(sp)
81113030:	d9c00615 	stw	r7,24(sp)
81113034:	003df706 	br	81112814 <__reset+0xfb0f2814>
81113038:	193d3926 	beq	r3,r4,81112520 <__reset+0xfb0f2520>
8111303c:	00c00f04 	movi	r3,60
81113040:	1885c83a 	sub	r2,r3,r2
81113044:	003ddf06 	br	811127c4 <__reset+0xfb0f27c4>
81113048:	e009883a 	mov	r4,fp
8111304c:	e0001115 	stw	zero,68(fp)
81113050:	000b883a 	mov	r5,zero
81113054:	11145e40 	call	811145e4 <_Balloc>
81113058:	d8800715 	stw	r2,28(sp)
8111305c:	d8c00717 	ldw	r3,28(sp)
81113060:	00bfffc4 	movi	r2,-1
81113064:	01000044 	movi	r4,1
81113068:	d8800c15 	stw	r2,48(sp)
8111306c:	e0c01015 	stw	r3,64(fp)
81113070:	d9000b15 	stw	r4,44(sp)
81113074:	d8800615 	stw	r2,24(sp)
81113078:	d8002215 	stw	zero,136(sp)
8111307c:	003c4106 	br	81112184 <__reset+0xfb0f2184>
81113080:	d8c00c17 	ldw	r3,48(sp)
81113084:	d8c00615 	stw	r3,24(sp)
81113088:	003e7006 	br	81112a4c <__reset+0xfb0f2a4c>
8111308c:	04400044 	movi	r17,1
81113090:	003b2006 	br	81111d14 <__reset+0xfb0f1d14>
81113094:	000b883a 	mov	r5,zero
81113098:	003b3d06 	br	81111d90 <__reset+0xfb0f1d90>
8111309c:	d8800c17 	ldw	r2,48(sp)
811130a0:	d8800615 	stw	r2,24(sp)
811130a4:	003e6906 	br	81112a4c <__reset+0xfb0f2a4c>

811130a8 <__sflush_r>:
811130a8:	2880030b 	ldhu	r2,12(r5)
811130ac:	defffb04 	addi	sp,sp,-20
811130b0:	dcc00315 	stw	r19,12(sp)
811130b4:	dc400115 	stw	r17,4(sp)
811130b8:	dfc00415 	stw	ra,16(sp)
811130bc:	dc800215 	stw	r18,8(sp)
811130c0:	dc000015 	stw	r16,0(sp)
811130c4:	10c0020c 	andi	r3,r2,8
811130c8:	2823883a 	mov	r17,r5
811130cc:	2027883a 	mov	r19,r4
811130d0:	1800311e 	bne	r3,zero,81113198 <__sflush_r+0xf0>
811130d4:	28c00117 	ldw	r3,4(r5)
811130d8:	10820014 	ori	r2,r2,2048
811130dc:	2880030d 	sth	r2,12(r5)
811130e0:	00c04b0e 	bge	zero,r3,81113210 <__sflush_r+0x168>
811130e4:	8a000a17 	ldw	r8,40(r17)
811130e8:	40002326 	beq	r8,zero,81113178 <__sflush_r+0xd0>
811130ec:	9c000017 	ldw	r16,0(r19)
811130f0:	10c4000c 	andi	r3,r2,4096
811130f4:	98000015 	stw	zero,0(r19)
811130f8:	18004826 	beq	r3,zero,8111321c <__sflush_r+0x174>
811130fc:	89801417 	ldw	r6,80(r17)
81113100:	10c0010c 	andi	r3,r2,4
81113104:	18000626 	beq	r3,zero,81113120 <__sflush_r+0x78>
81113108:	88c00117 	ldw	r3,4(r17)
8111310c:	88800c17 	ldw	r2,48(r17)
81113110:	30cdc83a 	sub	r6,r6,r3
81113114:	10000226 	beq	r2,zero,81113120 <__sflush_r+0x78>
81113118:	88800f17 	ldw	r2,60(r17)
8111311c:	308dc83a 	sub	r6,r6,r2
81113120:	89400717 	ldw	r5,28(r17)
81113124:	000f883a 	mov	r7,zero
81113128:	9809883a 	mov	r4,r19
8111312c:	403ee83a 	callr	r8
81113130:	00ffffc4 	movi	r3,-1
81113134:	10c04426 	beq	r2,r3,81113248 <__sflush_r+0x1a0>
81113138:	88c0030b 	ldhu	r3,12(r17)
8111313c:	89000417 	ldw	r4,16(r17)
81113140:	88000115 	stw	zero,4(r17)
81113144:	197dffcc 	andi	r5,r3,63487
81113148:	8940030d 	sth	r5,12(r17)
8111314c:	89000015 	stw	r4,0(r17)
81113150:	18c4000c 	andi	r3,r3,4096
81113154:	18002c1e 	bne	r3,zero,81113208 <__sflush_r+0x160>
81113158:	89400c17 	ldw	r5,48(r17)
8111315c:	9c000015 	stw	r16,0(r19)
81113160:	28000526 	beq	r5,zero,81113178 <__sflush_r+0xd0>
81113164:	88801004 	addi	r2,r17,64
81113168:	28800226 	beq	r5,r2,81113174 <__sflush_r+0xcc>
8111316c:	9809883a 	mov	r4,r19
81113170:	11138c00 	call	811138c0 <_free_r>
81113174:	88000c15 	stw	zero,48(r17)
81113178:	0005883a 	mov	r2,zero
8111317c:	dfc00417 	ldw	ra,16(sp)
81113180:	dcc00317 	ldw	r19,12(sp)
81113184:	dc800217 	ldw	r18,8(sp)
81113188:	dc400117 	ldw	r17,4(sp)
8111318c:	dc000017 	ldw	r16,0(sp)
81113190:	dec00504 	addi	sp,sp,20
81113194:	f800283a 	ret
81113198:	2c800417 	ldw	r18,16(r5)
8111319c:	903ff626 	beq	r18,zero,81113178 <__reset+0xfb0f3178>
811131a0:	2c000017 	ldw	r16,0(r5)
811131a4:	108000cc 	andi	r2,r2,3
811131a8:	2c800015 	stw	r18,0(r5)
811131ac:	84a1c83a 	sub	r16,r16,r18
811131b0:	1000131e 	bne	r2,zero,81113200 <__sflush_r+0x158>
811131b4:	28800517 	ldw	r2,20(r5)
811131b8:	88800215 	stw	r2,8(r17)
811131bc:	04000316 	blt	zero,r16,811131cc <__sflush_r+0x124>
811131c0:	003fed06 	br	81113178 <__reset+0xfb0f3178>
811131c4:	90a5883a 	add	r18,r18,r2
811131c8:	043feb0e 	bge	zero,r16,81113178 <__reset+0xfb0f3178>
811131cc:	88800917 	ldw	r2,36(r17)
811131d0:	89400717 	ldw	r5,28(r17)
811131d4:	800f883a 	mov	r7,r16
811131d8:	900d883a 	mov	r6,r18
811131dc:	9809883a 	mov	r4,r19
811131e0:	103ee83a 	callr	r2
811131e4:	80a1c83a 	sub	r16,r16,r2
811131e8:	00bff616 	blt	zero,r2,811131c4 <__reset+0xfb0f31c4>
811131ec:	88c0030b 	ldhu	r3,12(r17)
811131f0:	00bfffc4 	movi	r2,-1
811131f4:	18c01014 	ori	r3,r3,64
811131f8:	88c0030d 	sth	r3,12(r17)
811131fc:	003fdf06 	br	8111317c <__reset+0xfb0f317c>
81113200:	0005883a 	mov	r2,zero
81113204:	003fec06 	br	811131b8 <__reset+0xfb0f31b8>
81113208:	88801415 	stw	r2,80(r17)
8111320c:	003fd206 	br	81113158 <__reset+0xfb0f3158>
81113210:	28c00f17 	ldw	r3,60(r5)
81113214:	00ffb316 	blt	zero,r3,811130e4 <__reset+0xfb0f30e4>
81113218:	003fd706 	br	81113178 <__reset+0xfb0f3178>
8111321c:	89400717 	ldw	r5,28(r17)
81113220:	000d883a 	mov	r6,zero
81113224:	01c00044 	movi	r7,1
81113228:	9809883a 	mov	r4,r19
8111322c:	403ee83a 	callr	r8
81113230:	100d883a 	mov	r6,r2
81113234:	00bfffc4 	movi	r2,-1
81113238:	30801426 	beq	r6,r2,8111328c <__sflush_r+0x1e4>
8111323c:	8880030b 	ldhu	r2,12(r17)
81113240:	8a000a17 	ldw	r8,40(r17)
81113244:	003fae06 	br	81113100 <__reset+0xfb0f3100>
81113248:	98c00017 	ldw	r3,0(r19)
8111324c:	183fba26 	beq	r3,zero,81113138 <__reset+0xfb0f3138>
81113250:	01000744 	movi	r4,29
81113254:	19000626 	beq	r3,r4,81113270 <__sflush_r+0x1c8>
81113258:	01000584 	movi	r4,22
8111325c:	19000426 	beq	r3,r4,81113270 <__sflush_r+0x1c8>
81113260:	88c0030b 	ldhu	r3,12(r17)
81113264:	18c01014 	ori	r3,r3,64
81113268:	88c0030d 	sth	r3,12(r17)
8111326c:	003fc306 	br	8111317c <__reset+0xfb0f317c>
81113270:	8880030b 	ldhu	r2,12(r17)
81113274:	88c00417 	ldw	r3,16(r17)
81113278:	88000115 	stw	zero,4(r17)
8111327c:	10bdffcc 	andi	r2,r2,63487
81113280:	8880030d 	sth	r2,12(r17)
81113284:	88c00015 	stw	r3,0(r17)
81113288:	003fb306 	br	81113158 <__reset+0xfb0f3158>
8111328c:	98800017 	ldw	r2,0(r19)
81113290:	103fea26 	beq	r2,zero,8111323c <__reset+0xfb0f323c>
81113294:	00c00744 	movi	r3,29
81113298:	10c00226 	beq	r2,r3,811132a4 <__sflush_r+0x1fc>
8111329c:	00c00584 	movi	r3,22
811132a0:	10c0031e 	bne	r2,r3,811132b0 <__sflush_r+0x208>
811132a4:	9c000015 	stw	r16,0(r19)
811132a8:	0005883a 	mov	r2,zero
811132ac:	003fb306 	br	8111317c <__reset+0xfb0f317c>
811132b0:	88c0030b 	ldhu	r3,12(r17)
811132b4:	3005883a 	mov	r2,r6
811132b8:	18c01014 	ori	r3,r3,64
811132bc:	88c0030d 	sth	r3,12(r17)
811132c0:	003fae06 	br	8111317c <__reset+0xfb0f317c>

811132c4 <_fflush_r>:
811132c4:	defffd04 	addi	sp,sp,-12
811132c8:	dc000115 	stw	r16,4(sp)
811132cc:	dfc00215 	stw	ra,8(sp)
811132d0:	2021883a 	mov	r16,r4
811132d4:	20000226 	beq	r4,zero,811132e0 <_fflush_r+0x1c>
811132d8:	20800e17 	ldw	r2,56(r4)
811132dc:	10000c26 	beq	r2,zero,81113310 <_fflush_r+0x4c>
811132e0:	2880030f 	ldh	r2,12(r5)
811132e4:	1000051e 	bne	r2,zero,811132fc <_fflush_r+0x38>
811132e8:	0005883a 	mov	r2,zero
811132ec:	dfc00217 	ldw	ra,8(sp)
811132f0:	dc000117 	ldw	r16,4(sp)
811132f4:	dec00304 	addi	sp,sp,12
811132f8:	f800283a 	ret
811132fc:	8009883a 	mov	r4,r16
81113300:	dfc00217 	ldw	ra,8(sp)
81113304:	dc000117 	ldw	r16,4(sp)
81113308:	dec00304 	addi	sp,sp,12
8111330c:	11130a81 	jmpi	811130a8 <__sflush_r>
81113310:	d9400015 	stw	r5,0(sp)
81113314:	11136a00 	call	811136a0 <__sinit>
81113318:	d9400017 	ldw	r5,0(sp)
8111331c:	003ff006 	br	811132e0 <__reset+0xfb0f32e0>

81113320 <fflush>:
81113320:	20000526 	beq	r4,zero,81113338 <fflush+0x18>
81113324:	00a044b4 	movhi	r2,33042
81113328:	10910f04 	addi	r2,r2,17468
8111332c:	200b883a 	mov	r5,r4
81113330:	11000017 	ldw	r4,0(r2)
81113334:	11132c41 	jmpi	811132c4 <_fflush_r>
81113338:	00a044b4 	movhi	r2,33042
8111333c:	10910e04 	addi	r2,r2,17464
81113340:	11000017 	ldw	r4,0(r2)
81113344:	01604474 	movhi	r5,33041
81113348:	294cb104 	addi	r5,r5,12996
8111334c:	11141501 	jmpi	81114150 <_fwalk_reent>

81113350 <__fp_unlock>:
81113350:	0005883a 	mov	r2,zero
81113354:	f800283a 	ret

81113358 <_cleanup_r>:
81113358:	016044b4 	movhi	r5,33042
8111335c:	29622904 	addi	r5,r5,-30556
81113360:	11141501 	jmpi	81114150 <_fwalk_reent>

81113364 <__sinit.part.1>:
81113364:	defff704 	addi	sp,sp,-36
81113368:	00e04474 	movhi	r3,33041
8111336c:	dfc00815 	stw	ra,32(sp)
81113370:	ddc00715 	stw	r23,28(sp)
81113374:	dd800615 	stw	r22,24(sp)
81113378:	dd400515 	stw	r21,20(sp)
8111337c:	dd000415 	stw	r20,16(sp)
81113380:	dcc00315 	stw	r19,12(sp)
81113384:	dc800215 	stw	r18,8(sp)
81113388:	dc400115 	stw	r17,4(sp)
8111338c:	dc000015 	stw	r16,0(sp)
81113390:	18ccd604 	addi	r3,r3,13144
81113394:	24000117 	ldw	r16,4(r4)
81113398:	20c00f15 	stw	r3,60(r4)
8111339c:	2080bb04 	addi	r2,r4,748
811133a0:	00c000c4 	movi	r3,3
811133a4:	20c0b915 	stw	r3,740(r4)
811133a8:	2080ba15 	stw	r2,744(r4)
811133ac:	2000b815 	stw	zero,736(r4)
811133b0:	05c00204 	movi	r23,8
811133b4:	00800104 	movi	r2,4
811133b8:	2025883a 	mov	r18,r4
811133bc:	b80d883a 	mov	r6,r23
811133c0:	81001704 	addi	r4,r16,92
811133c4:	000b883a 	mov	r5,zero
811133c8:	80000015 	stw	zero,0(r16)
811133cc:	80000115 	stw	zero,4(r16)
811133d0:	80000215 	stw	zero,8(r16)
811133d4:	8080030d 	sth	r2,12(r16)
811133d8:	80001915 	stw	zero,100(r16)
811133dc:	8000038d 	sth	zero,14(r16)
811133e0:	80000415 	stw	zero,16(r16)
811133e4:	80000515 	stw	zero,20(r16)
811133e8:	80000615 	stw	zero,24(r16)
811133ec:	110cb1c0 	call	8110cb1c <memset>
811133f0:	05a04474 	movhi	r22,33041
811133f4:	94400217 	ldw	r17,8(r18)
811133f8:	05604474 	movhi	r21,33041
811133fc:	05204474 	movhi	r20,33041
81113400:	04e04474 	movhi	r19,33041
81113404:	b5b40d04 	addi	r22,r22,-12236
81113408:	ad742404 	addi	r21,r21,-12144
8111340c:	a5344304 	addi	r20,r20,-12020
81113410:	9cf45a04 	addi	r19,r19,-11928
81113414:	85800815 	stw	r22,32(r16)
81113418:	85400915 	stw	r21,36(r16)
8111341c:	85000a15 	stw	r20,40(r16)
81113420:	84c00b15 	stw	r19,44(r16)
81113424:	84000715 	stw	r16,28(r16)
81113428:	00800284 	movi	r2,10
8111342c:	8880030d 	sth	r2,12(r17)
81113430:	00800044 	movi	r2,1
81113434:	b80d883a 	mov	r6,r23
81113438:	89001704 	addi	r4,r17,92
8111343c:	000b883a 	mov	r5,zero
81113440:	88000015 	stw	zero,0(r17)
81113444:	88000115 	stw	zero,4(r17)
81113448:	88000215 	stw	zero,8(r17)
8111344c:	88001915 	stw	zero,100(r17)
81113450:	8880038d 	sth	r2,14(r17)
81113454:	88000415 	stw	zero,16(r17)
81113458:	88000515 	stw	zero,20(r17)
8111345c:	88000615 	stw	zero,24(r17)
81113460:	110cb1c0 	call	8110cb1c <memset>
81113464:	94000317 	ldw	r16,12(r18)
81113468:	00800484 	movi	r2,18
8111346c:	8c400715 	stw	r17,28(r17)
81113470:	8d800815 	stw	r22,32(r17)
81113474:	8d400915 	stw	r21,36(r17)
81113478:	8d000a15 	stw	r20,40(r17)
8111347c:	8cc00b15 	stw	r19,44(r17)
81113480:	8080030d 	sth	r2,12(r16)
81113484:	00800084 	movi	r2,2
81113488:	80000015 	stw	zero,0(r16)
8111348c:	80000115 	stw	zero,4(r16)
81113490:	80000215 	stw	zero,8(r16)
81113494:	80001915 	stw	zero,100(r16)
81113498:	8080038d 	sth	r2,14(r16)
8111349c:	80000415 	stw	zero,16(r16)
811134a0:	80000515 	stw	zero,20(r16)
811134a4:	80000615 	stw	zero,24(r16)
811134a8:	b80d883a 	mov	r6,r23
811134ac:	000b883a 	mov	r5,zero
811134b0:	81001704 	addi	r4,r16,92
811134b4:	110cb1c0 	call	8110cb1c <memset>
811134b8:	00800044 	movi	r2,1
811134bc:	84000715 	stw	r16,28(r16)
811134c0:	85800815 	stw	r22,32(r16)
811134c4:	85400915 	stw	r21,36(r16)
811134c8:	85000a15 	stw	r20,40(r16)
811134cc:	84c00b15 	stw	r19,44(r16)
811134d0:	90800e15 	stw	r2,56(r18)
811134d4:	dfc00817 	ldw	ra,32(sp)
811134d8:	ddc00717 	ldw	r23,28(sp)
811134dc:	dd800617 	ldw	r22,24(sp)
811134e0:	dd400517 	ldw	r21,20(sp)
811134e4:	dd000417 	ldw	r20,16(sp)
811134e8:	dcc00317 	ldw	r19,12(sp)
811134ec:	dc800217 	ldw	r18,8(sp)
811134f0:	dc400117 	ldw	r17,4(sp)
811134f4:	dc000017 	ldw	r16,0(sp)
811134f8:	dec00904 	addi	sp,sp,36
811134fc:	f800283a 	ret

81113500 <__fp_lock>:
81113500:	0005883a 	mov	r2,zero
81113504:	f800283a 	ret

81113508 <__sfmoreglue>:
81113508:	defffc04 	addi	sp,sp,-16
8111350c:	dc400115 	stw	r17,4(sp)
81113510:	2c7fffc4 	addi	r17,r5,-1
81113514:	8c401a24 	muli	r17,r17,104
81113518:	dc800215 	stw	r18,8(sp)
8111351c:	2825883a 	mov	r18,r5
81113520:	89401d04 	addi	r5,r17,116
81113524:	dc000015 	stw	r16,0(sp)
81113528:	dfc00315 	stw	ra,12(sp)
8111352c:	110c1c80 	call	8110c1c8 <_malloc_r>
81113530:	1021883a 	mov	r16,r2
81113534:	10000726 	beq	r2,zero,81113554 <__sfmoreglue+0x4c>
81113538:	11000304 	addi	r4,r2,12
8111353c:	10000015 	stw	zero,0(r2)
81113540:	14800115 	stw	r18,4(r2)
81113544:	11000215 	stw	r4,8(r2)
81113548:	89801a04 	addi	r6,r17,104
8111354c:	000b883a 	mov	r5,zero
81113550:	110cb1c0 	call	8110cb1c <memset>
81113554:	8005883a 	mov	r2,r16
81113558:	dfc00317 	ldw	ra,12(sp)
8111355c:	dc800217 	ldw	r18,8(sp)
81113560:	dc400117 	ldw	r17,4(sp)
81113564:	dc000017 	ldw	r16,0(sp)
81113568:	dec00404 	addi	sp,sp,16
8111356c:	f800283a 	ret

81113570 <__sfp>:
81113570:	defffb04 	addi	sp,sp,-20
81113574:	dc000015 	stw	r16,0(sp)
81113578:	042044b4 	movhi	r16,33042
8111357c:	84110e04 	addi	r16,r16,17464
81113580:	dcc00315 	stw	r19,12(sp)
81113584:	2027883a 	mov	r19,r4
81113588:	81000017 	ldw	r4,0(r16)
8111358c:	dfc00415 	stw	ra,16(sp)
81113590:	dc800215 	stw	r18,8(sp)
81113594:	20800e17 	ldw	r2,56(r4)
81113598:	dc400115 	stw	r17,4(sp)
8111359c:	1000021e 	bne	r2,zero,811135a8 <__sfp+0x38>
811135a0:	11133640 	call	81113364 <__sinit.part.1>
811135a4:	81000017 	ldw	r4,0(r16)
811135a8:	2480b804 	addi	r18,r4,736
811135ac:	047fffc4 	movi	r17,-1
811135b0:	91000117 	ldw	r4,4(r18)
811135b4:	94000217 	ldw	r16,8(r18)
811135b8:	213fffc4 	addi	r4,r4,-1
811135bc:	20000a16 	blt	r4,zero,811135e8 <__sfp+0x78>
811135c0:	8080030f 	ldh	r2,12(r16)
811135c4:	10000c26 	beq	r2,zero,811135f8 <__sfp+0x88>
811135c8:	80c01d04 	addi	r3,r16,116
811135cc:	00000206 	br	811135d8 <__sfp+0x68>
811135d0:	18bfe60f 	ldh	r2,-104(r3)
811135d4:	10000826 	beq	r2,zero,811135f8 <__sfp+0x88>
811135d8:	213fffc4 	addi	r4,r4,-1
811135dc:	1c3ffd04 	addi	r16,r3,-12
811135e0:	18c01a04 	addi	r3,r3,104
811135e4:	247ffa1e 	bne	r4,r17,811135d0 <__reset+0xfb0f35d0>
811135e8:	90800017 	ldw	r2,0(r18)
811135ec:	10001d26 	beq	r2,zero,81113664 <__sfp+0xf4>
811135f0:	1025883a 	mov	r18,r2
811135f4:	003fee06 	br	811135b0 <__reset+0xfb0f35b0>
811135f8:	00bfffc4 	movi	r2,-1
811135fc:	8080038d 	sth	r2,14(r16)
81113600:	00800044 	movi	r2,1
81113604:	8080030d 	sth	r2,12(r16)
81113608:	80001915 	stw	zero,100(r16)
8111360c:	80000015 	stw	zero,0(r16)
81113610:	80000215 	stw	zero,8(r16)
81113614:	80000115 	stw	zero,4(r16)
81113618:	80000415 	stw	zero,16(r16)
8111361c:	80000515 	stw	zero,20(r16)
81113620:	80000615 	stw	zero,24(r16)
81113624:	01800204 	movi	r6,8
81113628:	000b883a 	mov	r5,zero
8111362c:	81001704 	addi	r4,r16,92
81113630:	110cb1c0 	call	8110cb1c <memset>
81113634:	8005883a 	mov	r2,r16
81113638:	80000c15 	stw	zero,48(r16)
8111363c:	80000d15 	stw	zero,52(r16)
81113640:	80001115 	stw	zero,68(r16)
81113644:	80001215 	stw	zero,72(r16)
81113648:	dfc00417 	ldw	ra,16(sp)
8111364c:	dcc00317 	ldw	r19,12(sp)
81113650:	dc800217 	ldw	r18,8(sp)
81113654:	dc400117 	ldw	r17,4(sp)
81113658:	dc000017 	ldw	r16,0(sp)
8111365c:	dec00504 	addi	sp,sp,20
81113660:	f800283a 	ret
81113664:	01400104 	movi	r5,4
81113668:	9809883a 	mov	r4,r19
8111366c:	11135080 	call	81113508 <__sfmoreglue>
81113670:	90800015 	stw	r2,0(r18)
81113674:	103fde1e 	bne	r2,zero,811135f0 <__reset+0xfb0f35f0>
81113678:	00800304 	movi	r2,12
8111367c:	98800015 	stw	r2,0(r19)
81113680:	0005883a 	mov	r2,zero
81113684:	003ff006 	br	81113648 <__reset+0xfb0f3648>

81113688 <_cleanup>:
81113688:	00a044b4 	movhi	r2,33042
8111368c:	10910e04 	addi	r2,r2,17464
81113690:	11000017 	ldw	r4,0(r2)
81113694:	016044b4 	movhi	r5,33042
81113698:	29622904 	addi	r5,r5,-30556
8111369c:	11141501 	jmpi	81114150 <_fwalk_reent>

811136a0 <__sinit>:
811136a0:	20800e17 	ldw	r2,56(r4)
811136a4:	10000126 	beq	r2,zero,811136ac <__sinit+0xc>
811136a8:	f800283a 	ret
811136ac:	11133641 	jmpi	81113364 <__sinit.part.1>

811136b0 <__sfp_lock_acquire>:
811136b0:	f800283a 	ret

811136b4 <__sfp_lock_release>:
811136b4:	f800283a 	ret

811136b8 <__sinit_lock_acquire>:
811136b8:	f800283a 	ret

811136bc <__sinit_lock_release>:
811136bc:	f800283a 	ret

811136c0 <__fp_lock_all>:
811136c0:	00a044b4 	movhi	r2,33042
811136c4:	10910f04 	addi	r2,r2,17468
811136c8:	11000017 	ldw	r4,0(r2)
811136cc:	01604474 	movhi	r5,33041
811136d0:	294d4004 	addi	r5,r5,13568
811136d4:	111408c1 	jmpi	8111408c <_fwalk>

811136d8 <__fp_unlock_all>:
811136d8:	00a044b4 	movhi	r2,33042
811136dc:	10910f04 	addi	r2,r2,17468
811136e0:	11000017 	ldw	r4,0(r2)
811136e4:	01604474 	movhi	r5,33041
811136e8:	294cd404 	addi	r5,r5,13136
811136ec:	111408c1 	jmpi	8111408c <_fwalk>

811136f0 <__sflags>:
811136f0:	28800007 	ldb	r2,0(r5)
811136f4:	00c01c84 	movi	r3,114
811136f8:	10c02426 	beq	r2,r3,8111378c <__sflags+0x9c>
811136fc:	00c01dc4 	movi	r3,119
81113700:	10c01e26 	beq	r2,r3,8111377c <__sflags+0x8c>
81113704:	00c01844 	movi	r3,97
81113708:	10c00426 	beq	r2,r3,8111371c <__sflags+0x2c>
8111370c:	00800584 	movi	r2,22
81113710:	20800015 	stw	r2,0(r4)
81113714:	0005883a 	mov	r2,zero
81113718:	f800283a 	ret
8111371c:	02c08204 	movi	r11,520
81113720:	01000044 	movi	r4,1
81113724:	00804204 	movi	r2,264
81113728:	01c00ac4 	movi	r7,43
8111372c:	02bff8c4 	movi	r10,-29
81113730:	027fff04 	movi	r9,-4
81113734:	02001e04 	movi	r8,120
81113738:	29400044 	addi	r5,r5,1
8111373c:	28c00007 	ldb	r3,0(r5)
81113740:	18000626 	beq	r3,zero,8111375c <__sflags+0x6c>
81113744:	19c00826 	beq	r3,r7,81113768 <__sflags+0x78>
81113748:	1a3ffb1e 	bne	r3,r8,81113738 <__reset+0xfb0f3738>
8111374c:	29400044 	addi	r5,r5,1
81113750:	28c00007 	ldb	r3,0(r5)
81113754:	21020014 	ori	r4,r4,2048
81113758:	183ffa1e 	bne	r3,zero,81113744 <__reset+0xfb0f3744>
8111375c:	22c8b03a 	or	r4,r4,r11
81113760:	31000015 	stw	r4,0(r6)
81113764:	f800283a 	ret
81113768:	1284703a 	and	r2,r2,r10
8111376c:	2248703a 	and	r4,r4,r9
81113770:	10800414 	ori	r2,r2,16
81113774:	21000094 	ori	r4,r4,2
81113778:	003fef06 	br	81113738 <__reset+0xfb0f3738>
8111377c:	02c18004 	movi	r11,1536
81113780:	01000044 	movi	r4,1
81113784:	00800204 	movi	r2,8
81113788:	003fe706 	br	81113728 <__reset+0xfb0f3728>
8111378c:	0017883a 	mov	r11,zero
81113790:	0009883a 	mov	r4,zero
81113794:	00800104 	movi	r2,4
81113798:	003fe306 	br	81113728 <__reset+0xfb0f3728>

8111379c <_malloc_trim_r>:
8111379c:	defffb04 	addi	sp,sp,-20
811137a0:	dcc00315 	stw	r19,12(sp)
811137a4:	04e044b4 	movhi	r19,33042
811137a8:	dc800215 	stw	r18,8(sp)
811137ac:	dc400115 	stw	r17,4(sp)
811137b0:	dc000015 	stw	r16,0(sp)
811137b4:	dfc00415 	stw	ra,16(sp)
811137b8:	2821883a 	mov	r16,r5
811137bc:	9ccafe04 	addi	r19,r19,11256
811137c0:	2025883a 	mov	r18,r4
811137c4:	111c1980 	call	8111c198 <__malloc_lock>
811137c8:	98800217 	ldw	r2,8(r19)
811137cc:	14400117 	ldw	r17,4(r2)
811137d0:	00bfff04 	movi	r2,-4
811137d4:	88a2703a 	and	r17,r17,r2
811137d8:	8c21c83a 	sub	r16,r17,r16
811137dc:	8403fbc4 	addi	r16,r16,4079
811137e0:	8020d33a 	srli	r16,r16,12
811137e4:	0083ffc4 	movi	r2,4095
811137e8:	843fffc4 	addi	r16,r16,-1
811137ec:	8020933a 	slli	r16,r16,12
811137f0:	1400060e 	bge	r2,r16,8111380c <_malloc_trim_r+0x70>
811137f4:	000b883a 	mov	r5,zero
811137f8:	9009883a 	mov	r4,r18
811137fc:	110cf1c0 	call	8110cf1c <_sbrk_r>
81113800:	98c00217 	ldw	r3,8(r19)
81113804:	1c47883a 	add	r3,r3,r17
81113808:	10c00a26 	beq	r2,r3,81113834 <_malloc_trim_r+0x98>
8111380c:	9009883a 	mov	r4,r18
81113810:	111c1bc0 	call	8111c1bc <__malloc_unlock>
81113814:	0005883a 	mov	r2,zero
81113818:	dfc00417 	ldw	ra,16(sp)
8111381c:	dcc00317 	ldw	r19,12(sp)
81113820:	dc800217 	ldw	r18,8(sp)
81113824:	dc400117 	ldw	r17,4(sp)
81113828:	dc000017 	ldw	r16,0(sp)
8111382c:	dec00504 	addi	sp,sp,20
81113830:	f800283a 	ret
81113834:	040bc83a 	sub	r5,zero,r16
81113838:	9009883a 	mov	r4,r18
8111383c:	110cf1c0 	call	8110cf1c <_sbrk_r>
81113840:	00ffffc4 	movi	r3,-1
81113844:	10c00d26 	beq	r2,r3,8111387c <_malloc_trim_r+0xe0>
81113848:	00e044b4 	movhi	r3,33042
8111384c:	18d14204 	addi	r3,r3,17672
81113850:	18800017 	ldw	r2,0(r3)
81113854:	99000217 	ldw	r4,8(r19)
81113858:	8c23c83a 	sub	r17,r17,r16
8111385c:	8c400054 	ori	r17,r17,1
81113860:	1421c83a 	sub	r16,r2,r16
81113864:	24400115 	stw	r17,4(r4)
81113868:	9009883a 	mov	r4,r18
8111386c:	1c000015 	stw	r16,0(r3)
81113870:	111c1bc0 	call	8111c1bc <__malloc_unlock>
81113874:	00800044 	movi	r2,1
81113878:	003fe706 	br	81113818 <__reset+0xfb0f3818>
8111387c:	000b883a 	mov	r5,zero
81113880:	9009883a 	mov	r4,r18
81113884:	110cf1c0 	call	8110cf1c <_sbrk_r>
81113888:	99000217 	ldw	r4,8(r19)
8111388c:	014003c4 	movi	r5,15
81113890:	1107c83a 	sub	r3,r2,r4
81113894:	28ffdd0e 	bge	r5,r3,8111380c <__reset+0xfb0f380c>
81113898:	016044b4 	movhi	r5,33042
8111389c:	29511004 	addi	r5,r5,17472
811138a0:	29400017 	ldw	r5,0(r5)
811138a4:	18c00054 	ori	r3,r3,1
811138a8:	20c00115 	stw	r3,4(r4)
811138ac:	00e044b4 	movhi	r3,33042
811138b0:	1145c83a 	sub	r2,r2,r5
811138b4:	18d14204 	addi	r3,r3,17672
811138b8:	18800015 	stw	r2,0(r3)
811138bc:	003fd306 	br	8111380c <__reset+0xfb0f380c>

811138c0 <_free_r>:
811138c0:	28004126 	beq	r5,zero,811139c8 <_free_r+0x108>
811138c4:	defffd04 	addi	sp,sp,-12
811138c8:	dc400115 	stw	r17,4(sp)
811138cc:	dc000015 	stw	r16,0(sp)
811138d0:	2023883a 	mov	r17,r4
811138d4:	2821883a 	mov	r16,r5
811138d8:	dfc00215 	stw	ra,8(sp)
811138dc:	111c1980 	call	8111c198 <__malloc_lock>
811138e0:	81ffff17 	ldw	r7,-4(r16)
811138e4:	00bfff84 	movi	r2,-2
811138e8:	012044b4 	movhi	r4,33042
811138ec:	81bffe04 	addi	r6,r16,-8
811138f0:	3884703a 	and	r2,r7,r2
811138f4:	210afe04 	addi	r4,r4,11256
811138f8:	308b883a 	add	r5,r6,r2
811138fc:	2a400117 	ldw	r9,4(r5)
81113900:	22000217 	ldw	r8,8(r4)
81113904:	00ffff04 	movi	r3,-4
81113908:	48c6703a 	and	r3,r9,r3
8111390c:	2a005726 	beq	r5,r8,81113a6c <_free_r+0x1ac>
81113910:	28c00115 	stw	r3,4(r5)
81113914:	39c0004c 	andi	r7,r7,1
81113918:	3800091e 	bne	r7,zero,81113940 <_free_r+0x80>
8111391c:	823ffe17 	ldw	r8,-8(r16)
81113920:	22400204 	addi	r9,r4,8
81113924:	320dc83a 	sub	r6,r6,r8
81113928:	31c00217 	ldw	r7,8(r6)
8111392c:	1205883a 	add	r2,r2,r8
81113930:	3a406526 	beq	r7,r9,81113ac8 <_free_r+0x208>
81113934:	32000317 	ldw	r8,12(r6)
81113938:	3a000315 	stw	r8,12(r7)
8111393c:	41c00215 	stw	r7,8(r8)
81113940:	28cf883a 	add	r7,r5,r3
81113944:	39c00117 	ldw	r7,4(r7)
81113948:	39c0004c 	andi	r7,r7,1
8111394c:	38003a26 	beq	r7,zero,81113a38 <_free_r+0x178>
81113950:	10c00054 	ori	r3,r2,1
81113954:	30c00115 	stw	r3,4(r6)
81113958:	3087883a 	add	r3,r6,r2
8111395c:	18800015 	stw	r2,0(r3)
81113960:	00c07fc4 	movi	r3,511
81113964:	18801936 	bltu	r3,r2,811139cc <_free_r+0x10c>
81113968:	1004d0fa 	srli	r2,r2,3
8111396c:	01c00044 	movi	r7,1
81113970:	21400117 	ldw	r5,4(r4)
81113974:	10c00044 	addi	r3,r2,1
81113978:	18c7883a 	add	r3,r3,r3
8111397c:	1005d0ba 	srai	r2,r2,2
81113980:	18c7883a 	add	r3,r3,r3
81113984:	18c7883a 	add	r3,r3,r3
81113988:	1907883a 	add	r3,r3,r4
8111398c:	3884983a 	sll	r2,r7,r2
81113990:	19c00017 	ldw	r7,0(r3)
81113994:	1a3ffe04 	addi	r8,r3,-8
81113998:	1144b03a 	or	r2,r2,r5
8111399c:	32000315 	stw	r8,12(r6)
811139a0:	31c00215 	stw	r7,8(r6)
811139a4:	20800115 	stw	r2,4(r4)
811139a8:	19800015 	stw	r6,0(r3)
811139ac:	39800315 	stw	r6,12(r7)
811139b0:	8809883a 	mov	r4,r17
811139b4:	dfc00217 	ldw	ra,8(sp)
811139b8:	dc400117 	ldw	r17,4(sp)
811139bc:	dc000017 	ldw	r16,0(sp)
811139c0:	dec00304 	addi	sp,sp,12
811139c4:	111c1bc1 	jmpi	8111c1bc <__malloc_unlock>
811139c8:	f800283a 	ret
811139cc:	100ad27a 	srli	r5,r2,9
811139d0:	00c00104 	movi	r3,4
811139d4:	19404a36 	bltu	r3,r5,81113b00 <_free_r+0x240>
811139d8:	100ad1ba 	srli	r5,r2,6
811139dc:	28c00e44 	addi	r3,r5,57
811139e0:	18c7883a 	add	r3,r3,r3
811139e4:	29400e04 	addi	r5,r5,56
811139e8:	18c7883a 	add	r3,r3,r3
811139ec:	18c7883a 	add	r3,r3,r3
811139f0:	1909883a 	add	r4,r3,r4
811139f4:	20c00017 	ldw	r3,0(r4)
811139f8:	01e044b4 	movhi	r7,33042
811139fc:	213ffe04 	addi	r4,r4,-8
81113a00:	39cafe04 	addi	r7,r7,11256
81113a04:	20c04426 	beq	r4,r3,81113b18 <_free_r+0x258>
81113a08:	01ffff04 	movi	r7,-4
81113a0c:	19400117 	ldw	r5,4(r3)
81113a10:	29ca703a 	and	r5,r5,r7
81113a14:	1140022e 	bgeu	r2,r5,81113a20 <_free_r+0x160>
81113a18:	18c00217 	ldw	r3,8(r3)
81113a1c:	20fffb1e 	bne	r4,r3,81113a0c <__reset+0xfb0f3a0c>
81113a20:	19000317 	ldw	r4,12(r3)
81113a24:	31000315 	stw	r4,12(r6)
81113a28:	30c00215 	stw	r3,8(r6)
81113a2c:	21800215 	stw	r6,8(r4)
81113a30:	19800315 	stw	r6,12(r3)
81113a34:	003fde06 	br	811139b0 <__reset+0xfb0f39b0>
81113a38:	29c00217 	ldw	r7,8(r5)
81113a3c:	10c5883a 	add	r2,r2,r3
81113a40:	00e044b4 	movhi	r3,33042
81113a44:	18cb0004 	addi	r3,r3,11264
81113a48:	38c03b26 	beq	r7,r3,81113b38 <_free_r+0x278>
81113a4c:	2a000317 	ldw	r8,12(r5)
81113a50:	11400054 	ori	r5,r2,1
81113a54:	3087883a 	add	r3,r6,r2
81113a58:	3a000315 	stw	r8,12(r7)
81113a5c:	41c00215 	stw	r7,8(r8)
81113a60:	31400115 	stw	r5,4(r6)
81113a64:	18800015 	stw	r2,0(r3)
81113a68:	003fbd06 	br	81113960 <__reset+0xfb0f3960>
81113a6c:	39c0004c 	andi	r7,r7,1
81113a70:	10c5883a 	add	r2,r2,r3
81113a74:	3800071e 	bne	r7,zero,81113a94 <_free_r+0x1d4>
81113a78:	81fffe17 	ldw	r7,-8(r16)
81113a7c:	31cdc83a 	sub	r6,r6,r7
81113a80:	30c00317 	ldw	r3,12(r6)
81113a84:	31400217 	ldw	r5,8(r6)
81113a88:	11c5883a 	add	r2,r2,r7
81113a8c:	28c00315 	stw	r3,12(r5)
81113a90:	19400215 	stw	r5,8(r3)
81113a94:	10c00054 	ori	r3,r2,1
81113a98:	30c00115 	stw	r3,4(r6)
81113a9c:	00e044b4 	movhi	r3,33042
81113aa0:	18d11104 	addi	r3,r3,17476
81113aa4:	18c00017 	ldw	r3,0(r3)
81113aa8:	21800215 	stw	r6,8(r4)
81113aac:	10ffc036 	bltu	r2,r3,811139b0 <__reset+0xfb0f39b0>
81113ab0:	00a044b4 	movhi	r2,33042
81113ab4:	10913704 	addi	r2,r2,17628
81113ab8:	11400017 	ldw	r5,0(r2)
81113abc:	8809883a 	mov	r4,r17
81113ac0:	111379c0 	call	8111379c <_malloc_trim_r>
81113ac4:	003fba06 	br	811139b0 <__reset+0xfb0f39b0>
81113ac8:	28c9883a 	add	r4,r5,r3
81113acc:	21000117 	ldw	r4,4(r4)
81113ad0:	2100004c 	andi	r4,r4,1
81113ad4:	2000391e 	bne	r4,zero,81113bbc <_free_r+0x2fc>
81113ad8:	29c00217 	ldw	r7,8(r5)
81113adc:	29000317 	ldw	r4,12(r5)
81113ae0:	1885883a 	add	r2,r3,r2
81113ae4:	10c00054 	ori	r3,r2,1
81113ae8:	39000315 	stw	r4,12(r7)
81113aec:	21c00215 	stw	r7,8(r4)
81113af0:	30c00115 	stw	r3,4(r6)
81113af4:	308d883a 	add	r6,r6,r2
81113af8:	30800015 	stw	r2,0(r6)
81113afc:	003fac06 	br	811139b0 <__reset+0xfb0f39b0>
81113b00:	00c00504 	movi	r3,20
81113b04:	19401536 	bltu	r3,r5,81113b5c <_free_r+0x29c>
81113b08:	28c01704 	addi	r3,r5,92
81113b0c:	18c7883a 	add	r3,r3,r3
81113b10:	294016c4 	addi	r5,r5,91
81113b14:	003fb406 	br	811139e8 <__reset+0xfb0f39e8>
81113b18:	280bd0ba 	srai	r5,r5,2
81113b1c:	00c00044 	movi	r3,1
81113b20:	38800117 	ldw	r2,4(r7)
81113b24:	194a983a 	sll	r5,r3,r5
81113b28:	2007883a 	mov	r3,r4
81113b2c:	2884b03a 	or	r2,r5,r2
81113b30:	38800115 	stw	r2,4(r7)
81113b34:	003fbb06 	br	81113a24 <__reset+0xfb0f3a24>
81113b38:	21800515 	stw	r6,20(r4)
81113b3c:	21800415 	stw	r6,16(r4)
81113b40:	10c00054 	ori	r3,r2,1
81113b44:	31c00315 	stw	r7,12(r6)
81113b48:	31c00215 	stw	r7,8(r6)
81113b4c:	30c00115 	stw	r3,4(r6)
81113b50:	308d883a 	add	r6,r6,r2
81113b54:	30800015 	stw	r2,0(r6)
81113b58:	003f9506 	br	811139b0 <__reset+0xfb0f39b0>
81113b5c:	00c01504 	movi	r3,84
81113b60:	19400536 	bltu	r3,r5,81113b78 <_free_r+0x2b8>
81113b64:	100ad33a 	srli	r5,r2,12
81113b68:	28c01bc4 	addi	r3,r5,111
81113b6c:	18c7883a 	add	r3,r3,r3
81113b70:	29401b84 	addi	r5,r5,110
81113b74:	003f9c06 	br	811139e8 <__reset+0xfb0f39e8>
81113b78:	00c05504 	movi	r3,340
81113b7c:	19400536 	bltu	r3,r5,81113b94 <_free_r+0x2d4>
81113b80:	100ad3fa 	srli	r5,r2,15
81113b84:	28c01e04 	addi	r3,r5,120
81113b88:	18c7883a 	add	r3,r3,r3
81113b8c:	29401dc4 	addi	r5,r5,119
81113b90:	003f9506 	br	811139e8 <__reset+0xfb0f39e8>
81113b94:	00c15504 	movi	r3,1364
81113b98:	19400536 	bltu	r3,r5,81113bb0 <_free_r+0x2f0>
81113b9c:	100ad4ba 	srli	r5,r2,18
81113ba0:	28c01f44 	addi	r3,r5,125
81113ba4:	18c7883a 	add	r3,r3,r3
81113ba8:	29401f04 	addi	r5,r5,124
81113bac:	003f8e06 	br	811139e8 <__reset+0xfb0f39e8>
81113bb0:	00c03f84 	movi	r3,254
81113bb4:	01401f84 	movi	r5,126
81113bb8:	003f8b06 	br	811139e8 <__reset+0xfb0f39e8>
81113bbc:	10c00054 	ori	r3,r2,1
81113bc0:	30c00115 	stw	r3,4(r6)
81113bc4:	308d883a 	add	r6,r6,r2
81113bc8:	30800015 	stw	r2,0(r6)
81113bcc:	003f7806 	br	811139b0 <__reset+0xfb0f39b0>

81113bd0 <__sfvwrite_r>:
81113bd0:	30800217 	ldw	r2,8(r6)
81113bd4:	10006726 	beq	r2,zero,81113d74 <__sfvwrite_r+0x1a4>
81113bd8:	28c0030b 	ldhu	r3,12(r5)
81113bdc:	defff404 	addi	sp,sp,-48
81113be0:	dd400715 	stw	r21,28(sp)
81113be4:	dd000615 	stw	r20,24(sp)
81113be8:	dc000215 	stw	r16,8(sp)
81113bec:	dfc00b15 	stw	ra,44(sp)
81113bf0:	df000a15 	stw	fp,40(sp)
81113bf4:	ddc00915 	stw	r23,36(sp)
81113bf8:	dd800815 	stw	r22,32(sp)
81113bfc:	dcc00515 	stw	r19,20(sp)
81113c00:	dc800415 	stw	r18,16(sp)
81113c04:	dc400315 	stw	r17,12(sp)
81113c08:	1880020c 	andi	r2,r3,8
81113c0c:	2821883a 	mov	r16,r5
81113c10:	202b883a 	mov	r21,r4
81113c14:	3029883a 	mov	r20,r6
81113c18:	10002726 	beq	r2,zero,81113cb8 <__sfvwrite_r+0xe8>
81113c1c:	28800417 	ldw	r2,16(r5)
81113c20:	10002526 	beq	r2,zero,81113cb8 <__sfvwrite_r+0xe8>
81113c24:	1880008c 	andi	r2,r3,2
81113c28:	a4400017 	ldw	r17,0(r20)
81113c2c:	10002a26 	beq	r2,zero,81113cd8 <__sfvwrite_r+0x108>
81113c30:	05a00034 	movhi	r22,32768
81113c34:	0027883a 	mov	r19,zero
81113c38:	0025883a 	mov	r18,zero
81113c3c:	b5bf0004 	addi	r22,r22,-1024
81113c40:	980d883a 	mov	r6,r19
81113c44:	a809883a 	mov	r4,r21
81113c48:	90004626 	beq	r18,zero,81113d64 <__sfvwrite_r+0x194>
81113c4c:	900f883a 	mov	r7,r18
81113c50:	b480022e 	bgeu	r22,r18,81113c5c <__sfvwrite_r+0x8c>
81113c54:	01e00034 	movhi	r7,32768
81113c58:	39ff0004 	addi	r7,r7,-1024
81113c5c:	80800917 	ldw	r2,36(r16)
81113c60:	81400717 	ldw	r5,28(r16)
81113c64:	103ee83a 	callr	r2
81113c68:	0080570e 	bge	zero,r2,81113dc8 <__sfvwrite_r+0x1f8>
81113c6c:	a0c00217 	ldw	r3,8(r20)
81113c70:	98a7883a 	add	r19,r19,r2
81113c74:	90a5c83a 	sub	r18,r18,r2
81113c78:	1885c83a 	sub	r2,r3,r2
81113c7c:	a0800215 	stw	r2,8(r20)
81113c80:	103fef1e 	bne	r2,zero,81113c40 <__reset+0xfb0f3c40>
81113c84:	0005883a 	mov	r2,zero
81113c88:	dfc00b17 	ldw	ra,44(sp)
81113c8c:	df000a17 	ldw	fp,40(sp)
81113c90:	ddc00917 	ldw	r23,36(sp)
81113c94:	dd800817 	ldw	r22,32(sp)
81113c98:	dd400717 	ldw	r21,28(sp)
81113c9c:	dd000617 	ldw	r20,24(sp)
81113ca0:	dcc00517 	ldw	r19,20(sp)
81113ca4:	dc800417 	ldw	r18,16(sp)
81113ca8:	dc400317 	ldw	r17,12(sp)
81113cac:	dc000217 	ldw	r16,8(sp)
81113cb0:	dec00c04 	addi	sp,sp,48
81113cb4:	f800283a 	ret
81113cb8:	800b883a 	mov	r5,r16
81113cbc:	a809883a 	mov	r4,r21
81113cc0:	11116780 	call	81111678 <__swsetup_r>
81113cc4:	1000eb1e 	bne	r2,zero,81114074 <__sfvwrite_r+0x4a4>
81113cc8:	80c0030b 	ldhu	r3,12(r16)
81113ccc:	a4400017 	ldw	r17,0(r20)
81113cd0:	1880008c 	andi	r2,r3,2
81113cd4:	103fd61e 	bne	r2,zero,81113c30 <__reset+0xfb0f3c30>
81113cd8:	1880004c 	andi	r2,r3,1
81113cdc:	10003f1e 	bne	r2,zero,81113ddc <__sfvwrite_r+0x20c>
81113ce0:	0039883a 	mov	fp,zero
81113ce4:	0025883a 	mov	r18,zero
81113ce8:	90001a26 	beq	r18,zero,81113d54 <__sfvwrite_r+0x184>
81113cec:	1880800c 	andi	r2,r3,512
81113cf0:	84c00217 	ldw	r19,8(r16)
81113cf4:	10002126 	beq	r2,zero,81113d7c <__sfvwrite_r+0x1ac>
81113cf8:	982f883a 	mov	r23,r19
81113cfc:	94c09336 	bltu	r18,r19,81113f4c <__sfvwrite_r+0x37c>
81113d00:	1881200c 	andi	r2,r3,1152
81113d04:	10009e1e 	bne	r2,zero,81113f80 <__sfvwrite_r+0x3b0>
81113d08:	81000017 	ldw	r4,0(r16)
81113d0c:	b80d883a 	mov	r6,r23
81113d10:	e00b883a 	mov	r5,fp
81113d14:	11144880 	call	81114488 <memmove>
81113d18:	80c00217 	ldw	r3,8(r16)
81113d1c:	81000017 	ldw	r4,0(r16)
81113d20:	9005883a 	mov	r2,r18
81113d24:	1ce7c83a 	sub	r19,r3,r19
81113d28:	25cf883a 	add	r7,r4,r23
81113d2c:	84c00215 	stw	r19,8(r16)
81113d30:	81c00015 	stw	r7,0(r16)
81113d34:	a0c00217 	ldw	r3,8(r20)
81113d38:	e0b9883a 	add	fp,fp,r2
81113d3c:	90a5c83a 	sub	r18,r18,r2
81113d40:	18a7c83a 	sub	r19,r3,r2
81113d44:	a4c00215 	stw	r19,8(r20)
81113d48:	983fce26 	beq	r19,zero,81113c84 <__reset+0xfb0f3c84>
81113d4c:	80c0030b 	ldhu	r3,12(r16)
81113d50:	903fe61e 	bne	r18,zero,81113cec <__reset+0xfb0f3cec>
81113d54:	8f000017 	ldw	fp,0(r17)
81113d58:	8c800117 	ldw	r18,4(r17)
81113d5c:	8c400204 	addi	r17,r17,8
81113d60:	003fe106 	br	81113ce8 <__reset+0xfb0f3ce8>
81113d64:	8cc00017 	ldw	r19,0(r17)
81113d68:	8c800117 	ldw	r18,4(r17)
81113d6c:	8c400204 	addi	r17,r17,8
81113d70:	003fb306 	br	81113c40 <__reset+0xfb0f3c40>
81113d74:	0005883a 	mov	r2,zero
81113d78:	f800283a 	ret
81113d7c:	81000017 	ldw	r4,0(r16)
81113d80:	80800417 	ldw	r2,16(r16)
81113d84:	11005736 	bltu	r2,r4,81113ee4 <__sfvwrite_r+0x314>
81113d88:	85c00517 	ldw	r23,20(r16)
81113d8c:	95c05536 	bltu	r18,r23,81113ee4 <__sfvwrite_r+0x314>
81113d90:	00a00034 	movhi	r2,32768
81113d94:	10bfffc4 	addi	r2,r2,-1
81113d98:	9009883a 	mov	r4,r18
81113d9c:	1480012e 	bgeu	r2,r18,81113da4 <__sfvwrite_r+0x1d4>
81113da0:	1009883a 	mov	r4,r2
81113da4:	b80b883a 	mov	r5,r23
81113da8:	11199a00 	call	811199a0 <__divsi3>
81113dac:	15cf383a 	mul	r7,r2,r23
81113db0:	81400717 	ldw	r5,28(r16)
81113db4:	80800917 	ldw	r2,36(r16)
81113db8:	e00d883a 	mov	r6,fp
81113dbc:	a809883a 	mov	r4,r21
81113dc0:	103ee83a 	callr	r2
81113dc4:	00bfdb16 	blt	zero,r2,81113d34 <__reset+0xfb0f3d34>
81113dc8:	8080030b 	ldhu	r2,12(r16)
81113dcc:	10801014 	ori	r2,r2,64
81113dd0:	8080030d 	sth	r2,12(r16)
81113dd4:	00bfffc4 	movi	r2,-1
81113dd8:	003fab06 	br	81113c88 <__reset+0xfb0f3c88>
81113ddc:	0027883a 	mov	r19,zero
81113de0:	0011883a 	mov	r8,zero
81113de4:	0039883a 	mov	fp,zero
81113de8:	0025883a 	mov	r18,zero
81113dec:	90001f26 	beq	r18,zero,81113e6c <__sfvwrite_r+0x29c>
81113df0:	40005a26 	beq	r8,zero,81113f5c <__sfvwrite_r+0x38c>
81113df4:	982d883a 	mov	r22,r19
81113df8:	94c0012e 	bgeu	r18,r19,81113e00 <__sfvwrite_r+0x230>
81113dfc:	902d883a 	mov	r22,r18
81113e00:	81000017 	ldw	r4,0(r16)
81113e04:	80800417 	ldw	r2,16(r16)
81113e08:	b02f883a 	mov	r23,r22
81113e0c:	81c00517 	ldw	r7,20(r16)
81113e10:	1100032e 	bgeu	r2,r4,81113e20 <__sfvwrite_r+0x250>
81113e14:	80c00217 	ldw	r3,8(r16)
81113e18:	38c7883a 	add	r3,r7,r3
81113e1c:	1d801816 	blt	r3,r22,81113e80 <__sfvwrite_r+0x2b0>
81113e20:	b1c03e16 	blt	r22,r7,81113f1c <__sfvwrite_r+0x34c>
81113e24:	80800917 	ldw	r2,36(r16)
81113e28:	81400717 	ldw	r5,28(r16)
81113e2c:	e00d883a 	mov	r6,fp
81113e30:	da000115 	stw	r8,4(sp)
81113e34:	a809883a 	mov	r4,r21
81113e38:	103ee83a 	callr	r2
81113e3c:	102f883a 	mov	r23,r2
81113e40:	da000117 	ldw	r8,4(sp)
81113e44:	00bfe00e 	bge	zero,r2,81113dc8 <__reset+0xfb0f3dc8>
81113e48:	9de7c83a 	sub	r19,r19,r23
81113e4c:	98001f26 	beq	r19,zero,81113ecc <__sfvwrite_r+0x2fc>
81113e50:	a0800217 	ldw	r2,8(r20)
81113e54:	e5f9883a 	add	fp,fp,r23
81113e58:	95e5c83a 	sub	r18,r18,r23
81113e5c:	15efc83a 	sub	r23,r2,r23
81113e60:	a5c00215 	stw	r23,8(r20)
81113e64:	b83f8726 	beq	r23,zero,81113c84 <__reset+0xfb0f3c84>
81113e68:	903fe11e 	bne	r18,zero,81113df0 <__reset+0xfb0f3df0>
81113e6c:	8f000017 	ldw	fp,0(r17)
81113e70:	8c800117 	ldw	r18,4(r17)
81113e74:	0011883a 	mov	r8,zero
81113e78:	8c400204 	addi	r17,r17,8
81113e7c:	003fdb06 	br	81113dec <__reset+0xfb0f3dec>
81113e80:	180d883a 	mov	r6,r3
81113e84:	e00b883a 	mov	r5,fp
81113e88:	da000115 	stw	r8,4(sp)
81113e8c:	d8c00015 	stw	r3,0(sp)
81113e90:	11144880 	call	81114488 <memmove>
81113e94:	d8c00017 	ldw	r3,0(sp)
81113e98:	80800017 	ldw	r2,0(r16)
81113e9c:	800b883a 	mov	r5,r16
81113ea0:	a809883a 	mov	r4,r21
81113ea4:	10c5883a 	add	r2,r2,r3
81113ea8:	80800015 	stw	r2,0(r16)
81113eac:	d8c00015 	stw	r3,0(sp)
81113eb0:	11132c40 	call	811132c4 <_fflush_r>
81113eb4:	d8c00017 	ldw	r3,0(sp)
81113eb8:	da000117 	ldw	r8,4(sp)
81113ebc:	103fc21e 	bne	r2,zero,81113dc8 <__reset+0xfb0f3dc8>
81113ec0:	182f883a 	mov	r23,r3
81113ec4:	9de7c83a 	sub	r19,r19,r23
81113ec8:	983fe11e 	bne	r19,zero,81113e50 <__reset+0xfb0f3e50>
81113ecc:	800b883a 	mov	r5,r16
81113ed0:	a809883a 	mov	r4,r21
81113ed4:	11132c40 	call	811132c4 <_fflush_r>
81113ed8:	103fbb1e 	bne	r2,zero,81113dc8 <__reset+0xfb0f3dc8>
81113edc:	0011883a 	mov	r8,zero
81113ee0:	003fdb06 	br	81113e50 <__reset+0xfb0f3e50>
81113ee4:	94c0012e 	bgeu	r18,r19,81113eec <__sfvwrite_r+0x31c>
81113ee8:	9027883a 	mov	r19,r18
81113eec:	980d883a 	mov	r6,r19
81113ef0:	e00b883a 	mov	r5,fp
81113ef4:	11144880 	call	81114488 <memmove>
81113ef8:	80800217 	ldw	r2,8(r16)
81113efc:	80c00017 	ldw	r3,0(r16)
81113f00:	14c5c83a 	sub	r2,r2,r19
81113f04:	1cc7883a 	add	r3,r3,r19
81113f08:	80800215 	stw	r2,8(r16)
81113f0c:	80c00015 	stw	r3,0(r16)
81113f10:	10004326 	beq	r2,zero,81114020 <__sfvwrite_r+0x450>
81113f14:	9805883a 	mov	r2,r19
81113f18:	003f8606 	br	81113d34 <__reset+0xfb0f3d34>
81113f1c:	b00d883a 	mov	r6,r22
81113f20:	e00b883a 	mov	r5,fp
81113f24:	da000115 	stw	r8,4(sp)
81113f28:	11144880 	call	81114488 <memmove>
81113f2c:	80800217 	ldw	r2,8(r16)
81113f30:	80c00017 	ldw	r3,0(r16)
81113f34:	da000117 	ldw	r8,4(sp)
81113f38:	1585c83a 	sub	r2,r2,r22
81113f3c:	1dad883a 	add	r22,r3,r22
81113f40:	80800215 	stw	r2,8(r16)
81113f44:	85800015 	stw	r22,0(r16)
81113f48:	003fbf06 	br	81113e48 <__reset+0xfb0f3e48>
81113f4c:	81000017 	ldw	r4,0(r16)
81113f50:	9027883a 	mov	r19,r18
81113f54:	902f883a 	mov	r23,r18
81113f58:	003f6c06 	br	81113d0c <__reset+0xfb0f3d0c>
81113f5c:	900d883a 	mov	r6,r18
81113f60:	01400284 	movi	r5,10
81113f64:	e009883a 	mov	r4,fp
81113f68:	11143a40 	call	811143a4 <memchr>
81113f6c:	10003e26 	beq	r2,zero,81114068 <__sfvwrite_r+0x498>
81113f70:	10800044 	addi	r2,r2,1
81113f74:	1727c83a 	sub	r19,r2,fp
81113f78:	02000044 	movi	r8,1
81113f7c:	003f9d06 	br	81113df4 <__reset+0xfb0f3df4>
81113f80:	80800517 	ldw	r2,20(r16)
81113f84:	81400417 	ldw	r5,16(r16)
81113f88:	81c00017 	ldw	r7,0(r16)
81113f8c:	10a7883a 	add	r19,r2,r2
81113f90:	9885883a 	add	r2,r19,r2
81113f94:	1026d7fa 	srli	r19,r2,31
81113f98:	396dc83a 	sub	r22,r7,r5
81113f9c:	b1000044 	addi	r4,r22,1
81113fa0:	9885883a 	add	r2,r19,r2
81113fa4:	1027d07a 	srai	r19,r2,1
81113fa8:	2485883a 	add	r2,r4,r18
81113fac:	980d883a 	mov	r6,r19
81113fb0:	9880022e 	bgeu	r19,r2,81113fbc <__sfvwrite_r+0x3ec>
81113fb4:	1027883a 	mov	r19,r2
81113fb8:	100d883a 	mov	r6,r2
81113fbc:	18c1000c 	andi	r3,r3,1024
81113fc0:	18001c26 	beq	r3,zero,81114034 <__sfvwrite_r+0x464>
81113fc4:	300b883a 	mov	r5,r6
81113fc8:	a809883a 	mov	r4,r21
81113fcc:	110c1c80 	call	8110c1c8 <_malloc_r>
81113fd0:	102f883a 	mov	r23,r2
81113fd4:	10002926 	beq	r2,zero,8111407c <__sfvwrite_r+0x4ac>
81113fd8:	81400417 	ldw	r5,16(r16)
81113fdc:	b00d883a 	mov	r6,r22
81113fe0:	1009883a 	mov	r4,r2
81113fe4:	110c9d40 	call	8110c9d4 <memcpy>
81113fe8:	8080030b 	ldhu	r2,12(r16)
81113fec:	00fedfc4 	movi	r3,-1153
81113ff0:	10c4703a 	and	r2,r2,r3
81113ff4:	10802014 	ori	r2,r2,128
81113ff8:	8080030d 	sth	r2,12(r16)
81113ffc:	bd89883a 	add	r4,r23,r22
81114000:	9d8fc83a 	sub	r7,r19,r22
81114004:	85c00415 	stw	r23,16(r16)
81114008:	84c00515 	stw	r19,20(r16)
8111400c:	81000015 	stw	r4,0(r16)
81114010:	9027883a 	mov	r19,r18
81114014:	81c00215 	stw	r7,8(r16)
81114018:	902f883a 	mov	r23,r18
8111401c:	003f3b06 	br	81113d0c <__reset+0xfb0f3d0c>
81114020:	800b883a 	mov	r5,r16
81114024:	a809883a 	mov	r4,r21
81114028:	11132c40 	call	811132c4 <_fflush_r>
8111402c:	103fb926 	beq	r2,zero,81113f14 <__reset+0xfb0f3f14>
81114030:	003f6506 	br	81113dc8 <__reset+0xfb0f3dc8>
81114034:	a809883a 	mov	r4,r21
81114038:	11156400 	call	81115640 <_realloc_r>
8111403c:	102f883a 	mov	r23,r2
81114040:	103fee1e 	bne	r2,zero,81113ffc <__reset+0xfb0f3ffc>
81114044:	81400417 	ldw	r5,16(r16)
81114048:	a809883a 	mov	r4,r21
8111404c:	11138c00 	call	811138c0 <_free_r>
81114050:	8080030b 	ldhu	r2,12(r16)
81114054:	00ffdfc4 	movi	r3,-129
81114058:	1884703a 	and	r2,r3,r2
8111405c:	00c00304 	movi	r3,12
81114060:	a8c00015 	stw	r3,0(r21)
81114064:	003f5906 	br	81113dcc <__reset+0xfb0f3dcc>
81114068:	94c00044 	addi	r19,r18,1
8111406c:	02000044 	movi	r8,1
81114070:	003f6006 	br	81113df4 <__reset+0xfb0f3df4>
81114074:	00bfffc4 	movi	r2,-1
81114078:	003f0306 	br	81113c88 <__reset+0xfb0f3c88>
8111407c:	00800304 	movi	r2,12
81114080:	a8800015 	stw	r2,0(r21)
81114084:	8080030b 	ldhu	r2,12(r16)
81114088:	003f5006 	br	81113dcc <__reset+0xfb0f3dcc>

8111408c <_fwalk>:
8111408c:	defff704 	addi	sp,sp,-36
81114090:	dd000415 	stw	r20,16(sp)
81114094:	dfc00815 	stw	ra,32(sp)
81114098:	ddc00715 	stw	r23,28(sp)
8111409c:	dd800615 	stw	r22,24(sp)
811140a0:	dd400515 	stw	r21,20(sp)
811140a4:	dcc00315 	stw	r19,12(sp)
811140a8:	dc800215 	stw	r18,8(sp)
811140ac:	dc400115 	stw	r17,4(sp)
811140b0:	dc000015 	stw	r16,0(sp)
811140b4:	2500b804 	addi	r20,r4,736
811140b8:	a0002326 	beq	r20,zero,81114148 <_fwalk+0xbc>
811140bc:	282b883a 	mov	r21,r5
811140c0:	002f883a 	mov	r23,zero
811140c4:	05800044 	movi	r22,1
811140c8:	04ffffc4 	movi	r19,-1
811140cc:	a4400117 	ldw	r17,4(r20)
811140d0:	a4800217 	ldw	r18,8(r20)
811140d4:	8c7fffc4 	addi	r17,r17,-1
811140d8:	88000d16 	blt	r17,zero,81114110 <_fwalk+0x84>
811140dc:	94000304 	addi	r16,r18,12
811140e0:	94800384 	addi	r18,r18,14
811140e4:	8080000b 	ldhu	r2,0(r16)
811140e8:	8c7fffc4 	addi	r17,r17,-1
811140ec:	813ffd04 	addi	r4,r16,-12
811140f0:	b080042e 	bgeu	r22,r2,81114104 <_fwalk+0x78>
811140f4:	9080000f 	ldh	r2,0(r18)
811140f8:	14c00226 	beq	r2,r19,81114104 <_fwalk+0x78>
811140fc:	a83ee83a 	callr	r21
81114100:	b8aeb03a 	or	r23,r23,r2
81114104:	84001a04 	addi	r16,r16,104
81114108:	94801a04 	addi	r18,r18,104
8111410c:	8cfff51e 	bne	r17,r19,811140e4 <__reset+0xfb0f40e4>
81114110:	a5000017 	ldw	r20,0(r20)
81114114:	a03fed1e 	bne	r20,zero,811140cc <__reset+0xfb0f40cc>
81114118:	b805883a 	mov	r2,r23
8111411c:	dfc00817 	ldw	ra,32(sp)
81114120:	ddc00717 	ldw	r23,28(sp)
81114124:	dd800617 	ldw	r22,24(sp)
81114128:	dd400517 	ldw	r21,20(sp)
8111412c:	dd000417 	ldw	r20,16(sp)
81114130:	dcc00317 	ldw	r19,12(sp)
81114134:	dc800217 	ldw	r18,8(sp)
81114138:	dc400117 	ldw	r17,4(sp)
8111413c:	dc000017 	ldw	r16,0(sp)
81114140:	dec00904 	addi	sp,sp,36
81114144:	f800283a 	ret
81114148:	002f883a 	mov	r23,zero
8111414c:	003ff206 	br	81114118 <__reset+0xfb0f4118>

81114150 <_fwalk_reent>:
81114150:	defff704 	addi	sp,sp,-36
81114154:	dd000415 	stw	r20,16(sp)
81114158:	dfc00815 	stw	ra,32(sp)
8111415c:	ddc00715 	stw	r23,28(sp)
81114160:	dd800615 	stw	r22,24(sp)
81114164:	dd400515 	stw	r21,20(sp)
81114168:	dcc00315 	stw	r19,12(sp)
8111416c:	dc800215 	stw	r18,8(sp)
81114170:	dc400115 	stw	r17,4(sp)
81114174:	dc000015 	stw	r16,0(sp)
81114178:	2500b804 	addi	r20,r4,736
8111417c:	a0002326 	beq	r20,zero,8111420c <_fwalk_reent+0xbc>
81114180:	282b883a 	mov	r21,r5
81114184:	2027883a 	mov	r19,r4
81114188:	002f883a 	mov	r23,zero
8111418c:	05800044 	movi	r22,1
81114190:	04bfffc4 	movi	r18,-1
81114194:	a4400117 	ldw	r17,4(r20)
81114198:	a4000217 	ldw	r16,8(r20)
8111419c:	8c7fffc4 	addi	r17,r17,-1
811141a0:	88000c16 	blt	r17,zero,811141d4 <_fwalk_reent+0x84>
811141a4:	84000304 	addi	r16,r16,12
811141a8:	8080000b 	ldhu	r2,0(r16)
811141ac:	8c7fffc4 	addi	r17,r17,-1
811141b0:	817ffd04 	addi	r5,r16,-12
811141b4:	b080052e 	bgeu	r22,r2,811141cc <_fwalk_reent+0x7c>
811141b8:	8080008f 	ldh	r2,2(r16)
811141bc:	9809883a 	mov	r4,r19
811141c0:	14800226 	beq	r2,r18,811141cc <_fwalk_reent+0x7c>
811141c4:	a83ee83a 	callr	r21
811141c8:	b8aeb03a 	or	r23,r23,r2
811141cc:	84001a04 	addi	r16,r16,104
811141d0:	8cbff51e 	bne	r17,r18,811141a8 <__reset+0xfb0f41a8>
811141d4:	a5000017 	ldw	r20,0(r20)
811141d8:	a03fee1e 	bne	r20,zero,81114194 <__reset+0xfb0f4194>
811141dc:	b805883a 	mov	r2,r23
811141e0:	dfc00817 	ldw	ra,32(sp)
811141e4:	ddc00717 	ldw	r23,28(sp)
811141e8:	dd800617 	ldw	r22,24(sp)
811141ec:	dd400517 	ldw	r21,20(sp)
811141f0:	dd000417 	ldw	r20,16(sp)
811141f4:	dcc00317 	ldw	r19,12(sp)
811141f8:	dc800217 	ldw	r18,8(sp)
811141fc:	dc400117 	ldw	r17,4(sp)
81114200:	dc000017 	ldw	r16,0(sp)
81114204:	dec00904 	addi	sp,sp,36
81114208:	f800283a 	ret
8111420c:	002f883a 	mov	r23,zero
81114210:	003ff206 	br	811141dc <__reset+0xfb0f41dc>

81114214 <_isatty_r>:
81114214:	defffd04 	addi	sp,sp,-12
81114218:	dc000015 	stw	r16,0(sp)
8111421c:	042044b4 	movhi	r16,33042
81114220:	dc400115 	stw	r17,4(sp)
81114224:	84113404 	addi	r16,r16,17616
81114228:	2023883a 	mov	r17,r4
8111422c:	2809883a 	mov	r4,r5
81114230:	dfc00215 	stw	ra,8(sp)
81114234:	80000015 	stw	zero,0(r16)
81114238:	111bf680 	call	8111bf68 <isatty>
8111423c:	00ffffc4 	movi	r3,-1
81114240:	10c00526 	beq	r2,r3,81114258 <_isatty_r+0x44>
81114244:	dfc00217 	ldw	ra,8(sp)
81114248:	dc400117 	ldw	r17,4(sp)
8111424c:	dc000017 	ldw	r16,0(sp)
81114250:	dec00304 	addi	sp,sp,12
81114254:	f800283a 	ret
81114258:	80c00017 	ldw	r3,0(r16)
8111425c:	183ff926 	beq	r3,zero,81114244 <__reset+0xfb0f4244>
81114260:	88c00015 	stw	r3,0(r17)
81114264:	003ff706 	br	81114244 <__reset+0xfb0f4244>

81114268 <_setlocale_r>:
81114268:	30001b26 	beq	r6,zero,811142d8 <_setlocale_r+0x70>
8111426c:	016044b4 	movhi	r5,33042
81114270:	defffe04 	addi	sp,sp,-8
81114274:	2948f104 	addi	r5,r5,9156
81114278:	3009883a 	mov	r4,r6
8111427c:	dc000015 	stw	r16,0(sp)
81114280:	dfc00115 	stw	ra,4(sp)
81114284:	3021883a 	mov	r16,r6
81114288:	1115c180 	call	81115c18 <strcmp>
8111428c:	1000061e 	bne	r2,zero,811142a8 <_setlocale_r+0x40>
81114290:	00a044b4 	movhi	r2,33042
81114294:	1088cb04 	addi	r2,r2,9004
81114298:	dfc00117 	ldw	ra,4(sp)
8111429c:	dc000017 	ldw	r16,0(sp)
811142a0:	dec00204 	addi	sp,sp,8
811142a4:	f800283a 	ret
811142a8:	016044b4 	movhi	r5,33042
811142ac:	2948cb04 	addi	r5,r5,9004
811142b0:	8009883a 	mov	r4,r16
811142b4:	1115c180 	call	81115c18 <strcmp>
811142b8:	103ff526 	beq	r2,zero,81114290 <__reset+0xfb0f4290>
811142bc:	016044b4 	movhi	r5,33042
811142c0:	2948d404 	addi	r5,r5,9040
811142c4:	8009883a 	mov	r4,r16
811142c8:	1115c180 	call	81115c18 <strcmp>
811142cc:	103ff026 	beq	r2,zero,81114290 <__reset+0xfb0f4290>
811142d0:	0005883a 	mov	r2,zero
811142d4:	003ff006 	br	81114298 <__reset+0xfb0f4298>
811142d8:	00a044b4 	movhi	r2,33042
811142dc:	1088cb04 	addi	r2,r2,9004
811142e0:	f800283a 	ret

811142e4 <__locale_charset>:
811142e4:	00a044b4 	movhi	r2,33042
811142e8:	108c0804 	addi	r2,r2,12320
811142ec:	f800283a 	ret

811142f0 <__locale_mb_cur_max>:
811142f0:	00a044b4 	movhi	r2,33042
811142f4:	10911204 	addi	r2,r2,17480
811142f8:	10800017 	ldw	r2,0(r2)
811142fc:	f800283a 	ret

81114300 <__locale_msgcharset>:
81114300:	00a044b4 	movhi	r2,33042
81114304:	108c0004 	addi	r2,r2,12288
81114308:	f800283a 	ret

8111430c <__locale_cjk_lang>:
8111430c:	0005883a 	mov	r2,zero
81114310:	f800283a 	ret

81114314 <_localeconv_r>:
81114314:	00a044b4 	movhi	r2,33042
81114318:	108c1004 	addi	r2,r2,12352
8111431c:	f800283a 	ret

81114320 <setlocale>:
81114320:	00a044b4 	movhi	r2,33042
81114324:	10910f04 	addi	r2,r2,17468
81114328:	280d883a 	mov	r6,r5
8111432c:	200b883a 	mov	r5,r4
81114330:	11000017 	ldw	r4,0(r2)
81114334:	11142681 	jmpi	81114268 <_setlocale_r>

81114338 <localeconv>:
81114338:	00a044b4 	movhi	r2,33042
8111433c:	108c1004 	addi	r2,r2,12352
81114340:	f800283a 	ret

81114344 <_lseek_r>:
81114344:	defffd04 	addi	sp,sp,-12
81114348:	2805883a 	mov	r2,r5
8111434c:	dc000015 	stw	r16,0(sp)
81114350:	042044b4 	movhi	r16,33042
81114354:	dc400115 	stw	r17,4(sp)
81114358:	300b883a 	mov	r5,r6
8111435c:	84113404 	addi	r16,r16,17616
81114360:	2023883a 	mov	r17,r4
81114364:	380d883a 	mov	r6,r7
81114368:	1009883a 	mov	r4,r2
8111436c:	dfc00215 	stw	ra,8(sp)
81114370:	80000015 	stw	zero,0(r16)
81114374:	111c0480 	call	8111c048 <lseek>
81114378:	00ffffc4 	movi	r3,-1
8111437c:	10c00526 	beq	r2,r3,81114394 <_lseek_r+0x50>
81114380:	dfc00217 	ldw	ra,8(sp)
81114384:	dc400117 	ldw	r17,4(sp)
81114388:	dc000017 	ldw	r16,0(sp)
8111438c:	dec00304 	addi	sp,sp,12
81114390:	f800283a 	ret
81114394:	80c00017 	ldw	r3,0(r16)
81114398:	183ff926 	beq	r3,zero,81114380 <__reset+0xfb0f4380>
8111439c:	88c00015 	stw	r3,0(r17)
811143a0:	003ff706 	br	81114380 <__reset+0xfb0f4380>

811143a4 <memchr>:
811143a4:	208000cc 	andi	r2,r4,3
811143a8:	280f883a 	mov	r7,r5
811143ac:	10003426 	beq	r2,zero,81114480 <memchr+0xdc>
811143b0:	30bfffc4 	addi	r2,r6,-1
811143b4:	30001a26 	beq	r6,zero,81114420 <memchr+0x7c>
811143b8:	20c00003 	ldbu	r3,0(r4)
811143bc:	29803fcc 	andi	r6,r5,255
811143c0:	30c0051e 	bne	r6,r3,811143d8 <memchr+0x34>
811143c4:	00001806 	br	81114428 <memchr+0x84>
811143c8:	10001526 	beq	r2,zero,81114420 <memchr+0x7c>
811143cc:	20c00003 	ldbu	r3,0(r4)
811143d0:	10bfffc4 	addi	r2,r2,-1
811143d4:	30c01426 	beq	r6,r3,81114428 <memchr+0x84>
811143d8:	21000044 	addi	r4,r4,1
811143dc:	20c000cc 	andi	r3,r4,3
811143e0:	183ff91e 	bne	r3,zero,811143c8 <__reset+0xfb0f43c8>
811143e4:	020000c4 	movi	r8,3
811143e8:	40801136 	bltu	r8,r2,81114430 <memchr+0x8c>
811143ec:	10000c26 	beq	r2,zero,81114420 <memchr+0x7c>
811143f0:	20c00003 	ldbu	r3,0(r4)
811143f4:	29403fcc 	andi	r5,r5,255
811143f8:	28c00b26 	beq	r5,r3,81114428 <memchr+0x84>
811143fc:	20c00044 	addi	r3,r4,1
81114400:	39803fcc 	andi	r6,r7,255
81114404:	2089883a 	add	r4,r4,r2
81114408:	00000306 	br	81114418 <memchr+0x74>
8111440c:	18c00044 	addi	r3,r3,1
81114410:	197fffc3 	ldbu	r5,-1(r3)
81114414:	31400526 	beq	r6,r5,8111442c <memchr+0x88>
81114418:	1805883a 	mov	r2,r3
8111441c:	20fffb1e 	bne	r4,r3,8111440c <__reset+0xfb0f440c>
81114420:	0005883a 	mov	r2,zero
81114424:	f800283a 	ret
81114428:	2005883a 	mov	r2,r4
8111442c:	f800283a 	ret
81114430:	28c03fcc 	andi	r3,r5,255
81114434:	1812923a 	slli	r9,r3,8
81114438:	02ffbff4 	movhi	r11,65279
8111443c:	02a02074 	movhi	r10,32897
81114440:	48d2b03a 	or	r9,r9,r3
81114444:	4806943a 	slli	r3,r9,16
81114448:	5affbfc4 	addi	r11,r11,-257
8111444c:	52a02004 	addi	r10,r10,-32640
81114450:	48d2b03a 	or	r9,r9,r3
81114454:	20c00017 	ldw	r3,0(r4)
81114458:	48c6f03a 	xor	r3,r9,r3
8111445c:	1acd883a 	add	r6,r3,r11
81114460:	00c6303a 	nor	r3,zero,r3
81114464:	30c6703a 	and	r3,r6,r3
81114468:	1a86703a 	and	r3,r3,r10
8111446c:	183fe01e 	bne	r3,zero,811143f0 <__reset+0xfb0f43f0>
81114470:	10bfff04 	addi	r2,r2,-4
81114474:	21000104 	addi	r4,r4,4
81114478:	40bff636 	bltu	r8,r2,81114454 <__reset+0xfb0f4454>
8111447c:	003fdb06 	br	811143ec <__reset+0xfb0f43ec>
81114480:	3005883a 	mov	r2,r6
81114484:	003fd706 	br	811143e4 <__reset+0xfb0f43e4>

81114488 <memmove>:
81114488:	2005883a 	mov	r2,r4
8111448c:	29000b2e 	bgeu	r5,r4,811144bc <memmove+0x34>
81114490:	298f883a 	add	r7,r5,r6
81114494:	21c0092e 	bgeu	r4,r7,811144bc <memmove+0x34>
81114498:	2187883a 	add	r3,r4,r6
8111449c:	198bc83a 	sub	r5,r3,r6
811144a0:	30004826 	beq	r6,zero,811145c4 <memmove+0x13c>
811144a4:	39ffffc4 	addi	r7,r7,-1
811144a8:	39000003 	ldbu	r4,0(r7)
811144ac:	18ffffc4 	addi	r3,r3,-1
811144b0:	19000005 	stb	r4,0(r3)
811144b4:	28fffb1e 	bne	r5,r3,811144a4 <__reset+0xfb0f44a4>
811144b8:	f800283a 	ret
811144bc:	00c003c4 	movi	r3,15
811144c0:	1980412e 	bgeu	r3,r6,811145c8 <memmove+0x140>
811144c4:	2886b03a 	or	r3,r5,r2
811144c8:	18c000cc 	andi	r3,r3,3
811144cc:	1800401e 	bne	r3,zero,811145d0 <memmove+0x148>
811144d0:	33fffc04 	addi	r15,r6,-16
811144d4:	781ed13a 	srli	r15,r15,4
811144d8:	28c00104 	addi	r3,r5,4
811144dc:	13400104 	addi	r13,r2,4
811144e0:	781c913a 	slli	r14,r15,4
811144e4:	2b000204 	addi	r12,r5,8
811144e8:	12c00204 	addi	r11,r2,8
811144ec:	73800504 	addi	r14,r14,20
811144f0:	2a800304 	addi	r10,r5,12
811144f4:	12400304 	addi	r9,r2,12
811144f8:	2b9d883a 	add	r14,r5,r14
811144fc:	2811883a 	mov	r8,r5
81114500:	100f883a 	mov	r7,r2
81114504:	41000017 	ldw	r4,0(r8)
81114508:	39c00404 	addi	r7,r7,16
8111450c:	18c00404 	addi	r3,r3,16
81114510:	393ffc15 	stw	r4,-16(r7)
81114514:	193ffc17 	ldw	r4,-16(r3)
81114518:	6b400404 	addi	r13,r13,16
8111451c:	5ac00404 	addi	r11,r11,16
81114520:	693ffc15 	stw	r4,-16(r13)
81114524:	61000017 	ldw	r4,0(r12)
81114528:	4a400404 	addi	r9,r9,16
8111452c:	42000404 	addi	r8,r8,16
81114530:	593ffc15 	stw	r4,-16(r11)
81114534:	51000017 	ldw	r4,0(r10)
81114538:	63000404 	addi	r12,r12,16
8111453c:	52800404 	addi	r10,r10,16
81114540:	493ffc15 	stw	r4,-16(r9)
81114544:	1bbfef1e 	bne	r3,r14,81114504 <__reset+0xfb0f4504>
81114548:	79000044 	addi	r4,r15,1
8111454c:	2008913a 	slli	r4,r4,4
81114550:	328003cc 	andi	r10,r6,15
81114554:	02c000c4 	movi	r11,3
81114558:	1107883a 	add	r3,r2,r4
8111455c:	290b883a 	add	r5,r5,r4
81114560:	5a801e2e 	bgeu	r11,r10,811145dc <memmove+0x154>
81114564:	1813883a 	mov	r9,r3
81114568:	2811883a 	mov	r8,r5
8111456c:	500f883a 	mov	r7,r10
81114570:	41000017 	ldw	r4,0(r8)
81114574:	4a400104 	addi	r9,r9,4
81114578:	39ffff04 	addi	r7,r7,-4
8111457c:	493fff15 	stw	r4,-4(r9)
81114580:	42000104 	addi	r8,r8,4
81114584:	59fffa36 	bltu	r11,r7,81114570 <__reset+0xfb0f4570>
81114588:	513fff04 	addi	r4,r10,-4
8111458c:	2008d0ba 	srli	r4,r4,2
81114590:	318000cc 	andi	r6,r6,3
81114594:	21000044 	addi	r4,r4,1
81114598:	2109883a 	add	r4,r4,r4
8111459c:	2109883a 	add	r4,r4,r4
811145a0:	1907883a 	add	r3,r3,r4
811145a4:	290b883a 	add	r5,r5,r4
811145a8:	30000b26 	beq	r6,zero,811145d8 <memmove+0x150>
811145ac:	198d883a 	add	r6,r3,r6
811145b0:	29c00003 	ldbu	r7,0(r5)
811145b4:	18c00044 	addi	r3,r3,1
811145b8:	29400044 	addi	r5,r5,1
811145bc:	19ffffc5 	stb	r7,-1(r3)
811145c0:	19bffb1e 	bne	r3,r6,811145b0 <__reset+0xfb0f45b0>
811145c4:	f800283a 	ret
811145c8:	1007883a 	mov	r3,r2
811145cc:	003ff606 	br	811145a8 <__reset+0xfb0f45a8>
811145d0:	1007883a 	mov	r3,r2
811145d4:	003ff506 	br	811145ac <__reset+0xfb0f45ac>
811145d8:	f800283a 	ret
811145dc:	500d883a 	mov	r6,r10
811145e0:	003ff106 	br	811145a8 <__reset+0xfb0f45a8>

811145e4 <_Balloc>:
811145e4:	20801317 	ldw	r2,76(r4)
811145e8:	defffc04 	addi	sp,sp,-16
811145ec:	dc400115 	stw	r17,4(sp)
811145f0:	dc000015 	stw	r16,0(sp)
811145f4:	dfc00315 	stw	ra,12(sp)
811145f8:	dc800215 	stw	r18,8(sp)
811145fc:	2023883a 	mov	r17,r4
81114600:	2821883a 	mov	r16,r5
81114604:	10000f26 	beq	r2,zero,81114644 <_Balloc+0x60>
81114608:	8407883a 	add	r3,r16,r16
8111460c:	18c7883a 	add	r3,r3,r3
81114610:	10c7883a 	add	r3,r2,r3
81114614:	18800017 	ldw	r2,0(r3)
81114618:	10001126 	beq	r2,zero,81114660 <_Balloc+0x7c>
8111461c:	11000017 	ldw	r4,0(r2)
81114620:	19000015 	stw	r4,0(r3)
81114624:	10000415 	stw	zero,16(r2)
81114628:	10000315 	stw	zero,12(r2)
8111462c:	dfc00317 	ldw	ra,12(sp)
81114630:	dc800217 	ldw	r18,8(sp)
81114634:	dc400117 	ldw	r17,4(sp)
81114638:	dc000017 	ldw	r16,0(sp)
8111463c:	dec00404 	addi	sp,sp,16
81114640:	f800283a 	ret
81114644:	01800844 	movi	r6,33
81114648:	01400104 	movi	r5,4
8111464c:	11187e00 	call	811187e0 <_calloc_r>
81114650:	88801315 	stw	r2,76(r17)
81114654:	103fec1e 	bne	r2,zero,81114608 <__reset+0xfb0f4608>
81114658:	0005883a 	mov	r2,zero
8111465c:	003ff306 	br	8111462c <__reset+0xfb0f462c>
81114660:	01400044 	movi	r5,1
81114664:	2c24983a 	sll	r18,r5,r16
81114668:	8809883a 	mov	r4,r17
8111466c:	91800144 	addi	r6,r18,5
81114670:	318d883a 	add	r6,r6,r6
81114674:	318d883a 	add	r6,r6,r6
81114678:	11187e00 	call	811187e0 <_calloc_r>
8111467c:	103ff626 	beq	r2,zero,81114658 <__reset+0xfb0f4658>
81114680:	14000115 	stw	r16,4(r2)
81114684:	14800215 	stw	r18,8(r2)
81114688:	003fe606 	br	81114624 <__reset+0xfb0f4624>

8111468c <_Bfree>:
8111468c:	28000826 	beq	r5,zero,811146b0 <_Bfree+0x24>
81114690:	28c00117 	ldw	r3,4(r5)
81114694:	20801317 	ldw	r2,76(r4)
81114698:	18c7883a 	add	r3,r3,r3
8111469c:	18c7883a 	add	r3,r3,r3
811146a0:	10c5883a 	add	r2,r2,r3
811146a4:	10c00017 	ldw	r3,0(r2)
811146a8:	28c00015 	stw	r3,0(r5)
811146ac:	11400015 	stw	r5,0(r2)
811146b0:	f800283a 	ret

811146b4 <__multadd>:
811146b4:	defffa04 	addi	sp,sp,-24
811146b8:	dc800315 	stw	r18,12(sp)
811146bc:	dc400215 	stw	r17,8(sp)
811146c0:	dc000115 	stw	r16,4(sp)
811146c4:	2823883a 	mov	r17,r5
811146c8:	2c000417 	ldw	r16,16(r5)
811146cc:	dfc00515 	stw	ra,20(sp)
811146d0:	dcc00415 	stw	r19,16(sp)
811146d4:	2025883a 	mov	r18,r4
811146d8:	29400504 	addi	r5,r5,20
811146dc:	0011883a 	mov	r8,zero
811146e0:	28c00017 	ldw	r3,0(r5)
811146e4:	29400104 	addi	r5,r5,4
811146e8:	42000044 	addi	r8,r8,1
811146ec:	18bfffcc 	andi	r2,r3,65535
811146f0:	1185383a 	mul	r2,r2,r6
811146f4:	1806d43a 	srli	r3,r3,16
811146f8:	11cf883a 	add	r7,r2,r7
811146fc:	3808d43a 	srli	r4,r7,16
81114700:	1987383a 	mul	r3,r3,r6
81114704:	38bfffcc 	andi	r2,r7,65535
81114708:	1907883a 	add	r3,r3,r4
8111470c:	1808943a 	slli	r4,r3,16
81114710:	180ed43a 	srli	r7,r3,16
81114714:	2085883a 	add	r2,r4,r2
81114718:	28bfff15 	stw	r2,-4(r5)
8111471c:	443ff016 	blt	r8,r16,811146e0 <__reset+0xfb0f46e0>
81114720:	38000926 	beq	r7,zero,81114748 <__multadd+0x94>
81114724:	88800217 	ldw	r2,8(r17)
81114728:	80800f0e 	bge	r16,r2,81114768 <__multadd+0xb4>
8111472c:	80800144 	addi	r2,r16,5
81114730:	1085883a 	add	r2,r2,r2
81114734:	1085883a 	add	r2,r2,r2
81114738:	8885883a 	add	r2,r17,r2
8111473c:	11c00015 	stw	r7,0(r2)
81114740:	84000044 	addi	r16,r16,1
81114744:	8c000415 	stw	r16,16(r17)
81114748:	8805883a 	mov	r2,r17
8111474c:	dfc00517 	ldw	ra,20(sp)
81114750:	dcc00417 	ldw	r19,16(sp)
81114754:	dc800317 	ldw	r18,12(sp)
81114758:	dc400217 	ldw	r17,8(sp)
8111475c:	dc000117 	ldw	r16,4(sp)
81114760:	dec00604 	addi	sp,sp,24
81114764:	f800283a 	ret
81114768:	89400117 	ldw	r5,4(r17)
8111476c:	9009883a 	mov	r4,r18
81114770:	d9c00015 	stw	r7,0(sp)
81114774:	29400044 	addi	r5,r5,1
81114778:	11145e40 	call	811145e4 <_Balloc>
8111477c:	89800417 	ldw	r6,16(r17)
81114780:	89400304 	addi	r5,r17,12
81114784:	11000304 	addi	r4,r2,12
81114788:	31800084 	addi	r6,r6,2
8111478c:	318d883a 	add	r6,r6,r6
81114790:	318d883a 	add	r6,r6,r6
81114794:	1027883a 	mov	r19,r2
81114798:	110c9d40 	call	8110c9d4 <memcpy>
8111479c:	d9c00017 	ldw	r7,0(sp)
811147a0:	88000a26 	beq	r17,zero,811147cc <__multadd+0x118>
811147a4:	88c00117 	ldw	r3,4(r17)
811147a8:	90801317 	ldw	r2,76(r18)
811147ac:	18c7883a 	add	r3,r3,r3
811147b0:	18c7883a 	add	r3,r3,r3
811147b4:	10c5883a 	add	r2,r2,r3
811147b8:	10c00017 	ldw	r3,0(r2)
811147bc:	88c00015 	stw	r3,0(r17)
811147c0:	14400015 	stw	r17,0(r2)
811147c4:	9823883a 	mov	r17,r19
811147c8:	003fd806 	br	8111472c <__reset+0xfb0f472c>
811147cc:	9823883a 	mov	r17,r19
811147d0:	003fd606 	br	8111472c <__reset+0xfb0f472c>

811147d4 <__s2b>:
811147d4:	defff904 	addi	sp,sp,-28
811147d8:	dc400115 	stw	r17,4(sp)
811147dc:	dc000015 	stw	r16,0(sp)
811147e0:	2023883a 	mov	r17,r4
811147e4:	2821883a 	mov	r16,r5
811147e8:	39000204 	addi	r4,r7,8
811147ec:	01400244 	movi	r5,9
811147f0:	dcc00315 	stw	r19,12(sp)
811147f4:	dc800215 	stw	r18,8(sp)
811147f8:	dfc00615 	stw	ra,24(sp)
811147fc:	dd400515 	stw	r21,20(sp)
81114800:	dd000415 	stw	r20,16(sp)
81114804:	3825883a 	mov	r18,r7
81114808:	3027883a 	mov	r19,r6
8111480c:	11199a00 	call	811199a0 <__divsi3>
81114810:	00c00044 	movi	r3,1
81114814:	000b883a 	mov	r5,zero
81114818:	1880030e 	bge	r3,r2,81114828 <__s2b+0x54>
8111481c:	18c7883a 	add	r3,r3,r3
81114820:	29400044 	addi	r5,r5,1
81114824:	18bffd16 	blt	r3,r2,8111481c <__reset+0xfb0f481c>
81114828:	8809883a 	mov	r4,r17
8111482c:	11145e40 	call	811145e4 <_Balloc>
81114830:	d8c00717 	ldw	r3,28(sp)
81114834:	10c00515 	stw	r3,20(r2)
81114838:	00c00044 	movi	r3,1
8111483c:	10c00415 	stw	r3,16(r2)
81114840:	00c00244 	movi	r3,9
81114844:	1cc0210e 	bge	r3,r19,811148cc <__s2b+0xf8>
81114848:	80eb883a 	add	r21,r16,r3
8111484c:	a829883a 	mov	r20,r21
81114850:	84e1883a 	add	r16,r16,r19
81114854:	a1c00007 	ldb	r7,0(r20)
81114858:	01800284 	movi	r6,10
8111485c:	a5000044 	addi	r20,r20,1
81114860:	100b883a 	mov	r5,r2
81114864:	39fff404 	addi	r7,r7,-48
81114868:	8809883a 	mov	r4,r17
8111486c:	11146b40 	call	811146b4 <__multadd>
81114870:	a43ff81e 	bne	r20,r16,81114854 <__reset+0xfb0f4854>
81114874:	ace1883a 	add	r16,r21,r19
81114878:	843ffe04 	addi	r16,r16,-8
8111487c:	9c800a0e 	bge	r19,r18,811148a8 <__s2b+0xd4>
81114880:	94e5c83a 	sub	r18,r18,r19
81114884:	84a5883a 	add	r18,r16,r18
81114888:	81c00007 	ldb	r7,0(r16)
8111488c:	01800284 	movi	r6,10
81114890:	84000044 	addi	r16,r16,1
81114894:	100b883a 	mov	r5,r2
81114898:	39fff404 	addi	r7,r7,-48
8111489c:	8809883a 	mov	r4,r17
811148a0:	11146b40 	call	811146b4 <__multadd>
811148a4:	84bff81e 	bne	r16,r18,81114888 <__reset+0xfb0f4888>
811148a8:	dfc00617 	ldw	ra,24(sp)
811148ac:	dd400517 	ldw	r21,20(sp)
811148b0:	dd000417 	ldw	r20,16(sp)
811148b4:	dcc00317 	ldw	r19,12(sp)
811148b8:	dc800217 	ldw	r18,8(sp)
811148bc:	dc400117 	ldw	r17,4(sp)
811148c0:	dc000017 	ldw	r16,0(sp)
811148c4:	dec00704 	addi	sp,sp,28
811148c8:	f800283a 	ret
811148cc:	84000284 	addi	r16,r16,10
811148d0:	1827883a 	mov	r19,r3
811148d4:	003fe906 	br	8111487c <__reset+0xfb0f487c>

811148d8 <__hi0bits>:
811148d8:	20bfffec 	andhi	r2,r4,65535
811148dc:	1000141e 	bne	r2,zero,81114930 <__hi0bits+0x58>
811148e0:	2008943a 	slli	r4,r4,16
811148e4:	00800404 	movi	r2,16
811148e8:	20ffc02c 	andhi	r3,r4,65280
811148ec:	1800021e 	bne	r3,zero,811148f8 <__hi0bits+0x20>
811148f0:	2008923a 	slli	r4,r4,8
811148f4:	10800204 	addi	r2,r2,8
811148f8:	20fc002c 	andhi	r3,r4,61440
811148fc:	1800021e 	bne	r3,zero,81114908 <__hi0bits+0x30>
81114900:	2008913a 	slli	r4,r4,4
81114904:	10800104 	addi	r2,r2,4
81114908:	20f0002c 	andhi	r3,r4,49152
8111490c:	1800031e 	bne	r3,zero,8111491c <__hi0bits+0x44>
81114910:	2109883a 	add	r4,r4,r4
81114914:	10800084 	addi	r2,r2,2
81114918:	2109883a 	add	r4,r4,r4
8111491c:	20000316 	blt	r4,zero,8111492c <__hi0bits+0x54>
81114920:	2110002c 	andhi	r4,r4,16384
81114924:	2000041e 	bne	r4,zero,81114938 <__hi0bits+0x60>
81114928:	00800804 	movi	r2,32
8111492c:	f800283a 	ret
81114930:	0005883a 	mov	r2,zero
81114934:	003fec06 	br	811148e8 <__reset+0xfb0f48e8>
81114938:	10800044 	addi	r2,r2,1
8111493c:	f800283a 	ret

81114940 <__lo0bits>:
81114940:	20c00017 	ldw	r3,0(r4)
81114944:	188001cc 	andi	r2,r3,7
81114948:	10000826 	beq	r2,zero,8111496c <__lo0bits+0x2c>
8111494c:	1880004c 	andi	r2,r3,1
81114950:	1000211e 	bne	r2,zero,811149d8 <__lo0bits+0x98>
81114954:	1880008c 	andi	r2,r3,2
81114958:	1000211e 	bne	r2,zero,811149e0 <__lo0bits+0xa0>
8111495c:	1806d0ba 	srli	r3,r3,2
81114960:	00800084 	movi	r2,2
81114964:	20c00015 	stw	r3,0(r4)
81114968:	f800283a 	ret
8111496c:	18bfffcc 	andi	r2,r3,65535
81114970:	10001326 	beq	r2,zero,811149c0 <__lo0bits+0x80>
81114974:	0005883a 	mov	r2,zero
81114978:	19403fcc 	andi	r5,r3,255
8111497c:	2800021e 	bne	r5,zero,81114988 <__lo0bits+0x48>
81114980:	1806d23a 	srli	r3,r3,8
81114984:	10800204 	addi	r2,r2,8
81114988:	194003cc 	andi	r5,r3,15
8111498c:	2800021e 	bne	r5,zero,81114998 <__lo0bits+0x58>
81114990:	1806d13a 	srli	r3,r3,4
81114994:	10800104 	addi	r2,r2,4
81114998:	194000cc 	andi	r5,r3,3
8111499c:	2800021e 	bne	r5,zero,811149a8 <__lo0bits+0x68>
811149a0:	1806d0ba 	srli	r3,r3,2
811149a4:	10800084 	addi	r2,r2,2
811149a8:	1940004c 	andi	r5,r3,1
811149ac:	2800081e 	bne	r5,zero,811149d0 <__lo0bits+0x90>
811149b0:	1806d07a 	srli	r3,r3,1
811149b4:	1800051e 	bne	r3,zero,811149cc <__lo0bits+0x8c>
811149b8:	00800804 	movi	r2,32
811149bc:	f800283a 	ret
811149c0:	1806d43a 	srli	r3,r3,16
811149c4:	00800404 	movi	r2,16
811149c8:	003feb06 	br	81114978 <__reset+0xfb0f4978>
811149cc:	10800044 	addi	r2,r2,1
811149d0:	20c00015 	stw	r3,0(r4)
811149d4:	f800283a 	ret
811149d8:	0005883a 	mov	r2,zero
811149dc:	f800283a 	ret
811149e0:	1806d07a 	srli	r3,r3,1
811149e4:	00800044 	movi	r2,1
811149e8:	20c00015 	stw	r3,0(r4)
811149ec:	f800283a 	ret

811149f0 <__i2b>:
811149f0:	defffd04 	addi	sp,sp,-12
811149f4:	dc000015 	stw	r16,0(sp)
811149f8:	04000044 	movi	r16,1
811149fc:	dc400115 	stw	r17,4(sp)
81114a00:	2823883a 	mov	r17,r5
81114a04:	800b883a 	mov	r5,r16
81114a08:	dfc00215 	stw	ra,8(sp)
81114a0c:	11145e40 	call	811145e4 <_Balloc>
81114a10:	14400515 	stw	r17,20(r2)
81114a14:	14000415 	stw	r16,16(r2)
81114a18:	dfc00217 	ldw	ra,8(sp)
81114a1c:	dc400117 	ldw	r17,4(sp)
81114a20:	dc000017 	ldw	r16,0(sp)
81114a24:	dec00304 	addi	sp,sp,12
81114a28:	f800283a 	ret

81114a2c <__multiply>:
81114a2c:	defffa04 	addi	sp,sp,-24
81114a30:	dcc00315 	stw	r19,12(sp)
81114a34:	dc800215 	stw	r18,8(sp)
81114a38:	34c00417 	ldw	r19,16(r6)
81114a3c:	2c800417 	ldw	r18,16(r5)
81114a40:	dd000415 	stw	r20,16(sp)
81114a44:	dc400115 	stw	r17,4(sp)
81114a48:	dfc00515 	stw	ra,20(sp)
81114a4c:	dc000015 	stw	r16,0(sp)
81114a50:	2829883a 	mov	r20,r5
81114a54:	3023883a 	mov	r17,r6
81114a58:	94c0050e 	bge	r18,r19,81114a70 <__multiply+0x44>
81114a5c:	9007883a 	mov	r3,r18
81114a60:	3029883a 	mov	r20,r6
81114a64:	9825883a 	mov	r18,r19
81114a68:	2823883a 	mov	r17,r5
81114a6c:	1827883a 	mov	r19,r3
81114a70:	a0800217 	ldw	r2,8(r20)
81114a74:	94e1883a 	add	r16,r18,r19
81114a78:	a1400117 	ldw	r5,4(r20)
81114a7c:	1400010e 	bge	r2,r16,81114a84 <__multiply+0x58>
81114a80:	29400044 	addi	r5,r5,1
81114a84:	11145e40 	call	811145e4 <_Balloc>
81114a88:	8415883a 	add	r10,r16,r16
81114a8c:	12c00504 	addi	r11,r2,20
81114a90:	5295883a 	add	r10,r10,r10
81114a94:	5a95883a 	add	r10,r11,r10
81114a98:	5807883a 	mov	r3,r11
81114a9c:	5a80032e 	bgeu	r11,r10,81114aac <__multiply+0x80>
81114aa0:	18000015 	stw	zero,0(r3)
81114aa4:	18c00104 	addi	r3,r3,4
81114aa8:	1abffd36 	bltu	r3,r10,81114aa0 <__reset+0xfb0f4aa0>
81114aac:	9ce7883a 	add	r19,r19,r19
81114ab0:	94a5883a 	add	r18,r18,r18
81114ab4:	89800504 	addi	r6,r17,20
81114ab8:	9ce7883a 	add	r19,r19,r19
81114abc:	a3400504 	addi	r13,r20,20
81114ac0:	94a5883a 	add	r18,r18,r18
81114ac4:	34d9883a 	add	r12,r6,r19
81114ac8:	6c93883a 	add	r9,r13,r18
81114acc:	3300422e 	bgeu	r6,r12,81114bd8 <__multiply+0x1ac>
81114ad0:	37c00017 	ldw	ra,0(r6)
81114ad4:	fbffffcc 	andi	r15,ra,65535
81114ad8:	78001b26 	beq	r15,zero,81114b48 <__multiply+0x11c>
81114adc:	5811883a 	mov	r8,r11
81114ae0:	681d883a 	mov	r14,r13
81114ae4:	000f883a 	mov	r7,zero
81114ae8:	71000017 	ldw	r4,0(r14)
81114aec:	40c00017 	ldw	r3,0(r8)
81114af0:	73800104 	addi	r14,r14,4
81114af4:	217fffcc 	andi	r5,r4,65535
81114af8:	2bcb383a 	mul	r5,r5,r15
81114afc:	2008d43a 	srli	r4,r4,16
81114b00:	1c7fffcc 	andi	r17,r3,65535
81114b04:	2c4b883a 	add	r5,r5,r17
81114b08:	29cb883a 	add	r5,r5,r7
81114b0c:	23c9383a 	mul	r4,r4,r15
81114b10:	1806d43a 	srli	r3,r3,16
81114b14:	280ed43a 	srli	r7,r5,16
81114b18:	297fffcc 	andi	r5,r5,65535
81114b1c:	20c7883a 	add	r3,r4,r3
81114b20:	19c7883a 	add	r3,r3,r7
81114b24:	1808943a 	slli	r4,r3,16
81114b28:	4023883a 	mov	r17,r8
81114b2c:	180ed43a 	srli	r7,r3,16
81114b30:	214ab03a 	or	r5,r4,r5
81114b34:	41400015 	stw	r5,0(r8)
81114b38:	42000104 	addi	r8,r8,4
81114b3c:	727fea36 	bltu	r14,r9,81114ae8 <__reset+0xfb0f4ae8>
81114b40:	89c00115 	stw	r7,4(r17)
81114b44:	37c00017 	ldw	ra,0(r6)
81114b48:	f83ed43a 	srli	ra,ra,16
81114b4c:	f8001f26 	beq	ra,zero,81114bcc <__multiply+0x1a0>
81114b50:	58c00017 	ldw	r3,0(r11)
81114b54:	681d883a 	mov	r14,r13
81114b58:	581f883a 	mov	r15,r11
81114b5c:	1811883a 	mov	r8,r3
81114b60:	5825883a 	mov	r18,r11
81114b64:	000f883a 	mov	r7,zero
81114b68:	00000106 	br	81114b70 <__multiply+0x144>
81114b6c:	8825883a 	mov	r18,r17
81114b70:	7140000b 	ldhu	r5,0(r14)
81114b74:	4010d43a 	srli	r8,r8,16
81114b78:	193fffcc 	andi	r4,r3,65535
81114b7c:	2fcb383a 	mul	r5,r5,ra
81114b80:	7bc00104 	addi	r15,r15,4
81114b84:	73800104 	addi	r14,r14,4
81114b88:	2a0b883a 	add	r5,r5,r8
81114b8c:	29cb883a 	add	r5,r5,r7
81114b90:	2806943a 	slli	r3,r5,16
81114b94:	94400104 	addi	r17,r18,4
81114b98:	280ad43a 	srli	r5,r5,16
81114b9c:	1908b03a 	or	r4,r3,r4
81114ba0:	793fff15 	stw	r4,-4(r15)
81114ba4:	70ffff17 	ldw	r3,-4(r14)
81114ba8:	8a000017 	ldw	r8,0(r17)
81114bac:	1806d43a 	srli	r3,r3,16
81114bb0:	413fffcc 	andi	r4,r8,65535
81114bb4:	1fc7383a 	mul	r3,r3,ra
81114bb8:	1907883a 	add	r3,r3,r4
81114bbc:	1947883a 	add	r3,r3,r5
81114bc0:	180ed43a 	srli	r7,r3,16
81114bc4:	727fe936 	bltu	r14,r9,81114b6c <__reset+0xfb0f4b6c>
81114bc8:	90c00115 	stw	r3,4(r18)
81114bcc:	31800104 	addi	r6,r6,4
81114bd0:	5ac00104 	addi	r11,r11,4
81114bd4:	333fbe36 	bltu	r6,r12,81114ad0 <__reset+0xfb0f4ad0>
81114bd8:	0400090e 	bge	zero,r16,81114c00 <__multiply+0x1d4>
81114bdc:	50ffff17 	ldw	r3,-4(r10)
81114be0:	52bfff04 	addi	r10,r10,-4
81114be4:	18000326 	beq	r3,zero,81114bf4 <__multiply+0x1c8>
81114be8:	00000506 	br	81114c00 <__multiply+0x1d4>
81114bec:	50c00017 	ldw	r3,0(r10)
81114bf0:	1800031e 	bne	r3,zero,81114c00 <__multiply+0x1d4>
81114bf4:	843fffc4 	addi	r16,r16,-1
81114bf8:	52bfff04 	addi	r10,r10,-4
81114bfc:	803ffb1e 	bne	r16,zero,81114bec <__reset+0xfb0f4bec>
81114c00:	14000415 	stw	r16,16(r2)
81114c04:	dfc00517 	ldw	ra,20(sp)
81114c08:	dd000417 	ldw	r20,16(sp)
81114c0c:	dcc00317 	ldw	r19,12(sp)
81114c10:	dc800217 	ldw	r18,8(sp)
81114c14:	dc400117 	ldw	r17,4(sp)
81114c18:	dc000017 	ldw	r16,0(sp)
81114c1c:	dec00604 	addi	sp,sp,24
81114c20:	f800283a 	ret

81114c24 <__pow5mult>:
81114c24:	defffa04 	addi	sp,sp,-24
81114c28:	dcc00315 	stw	r19,12(sp)
81114c2c:	dc000015 	stw	r16,0(sp)
81114c30:	dfc00515 	stw	ra,20(sp)
81114c34:	dd000415 	stw	r20,16(sp)
81114c38:	dc800215 	stw	r18,8(sp)
81114c3c:	dc400115 	stw	r17,4(sp)
81114c40:	308000cc 	andi	r2,r6,3
81114c44:	3021883a 	mov	r16,r6
81114c48:	2027883a 	mov	r19,r4
81114c4c:	10002f1e 	bne	r2,zero,81114d0c <__pow5mult+0xe8>
81114c50:	2825883a 	mov	r18,r5
81114c54:	8021d0ba 	srai	r16,r16,2
81114c58:	80001a26 	beq	r16,zero,81114cc4 <__pow5mult+0xa0>
81114c5c:	9c401217 	ldw	r17,72(r19)
81114c60:	8800061e 	bne	r17,zero,81114c7c <__pow5mult+0x58>
81114c64:	00003406 	br	81114d38 <__pow5mult+0x114>
81114c68:	8021d07a 	srai	r16,r16,1
81114c6c:	80001526 	beq	r16,zero,81114cc4 <__pow5mult+0xa0>
81114c70:	88800017 	ldw	r2,0(r17)
81114c74:	10001c26 	beq	r2,zero,81114ce8 <__pow5mult+0xc4>
81114c78:	1023883a 	mov	r17,r2
81114c7c:	8080004c 	andi	r2,r16,1
81114c80:	103ff926 	beq	r2,zero,81114c68 <__reset+0xfb0f4c68>
81114c84:	880d883a 	mov	r6,r17
81114c88:	900b883a 	mov	r5,r18
81114c8c:	9809883a 	mov	r4,r19
81114c90:	1114a2c0 	call	81114a2c <__multiply>
81114c94:	90001b26 	beq	r18,zero,81114d04 <__pow5mult+0xe0>
81114c98:	91000117 	ldw	r4,4(r18)
81114c9c:	98c01317 	ldw	r3,76(r19)
81114ca0:	8021d07a 	srai	r16,r16,1
81114ca4:	2109883a 	add	r4,r4,r4
81114ca8:	2109883a 	add	r4,r4,r4
81114cac:	1907883a 	add	r3,r3,r4
81114cb0:	19000017 	ldw	r4,0(r3)
81114cb4:	91000015 	stw	r4,0(r18)
81114cb8:	1c800015 	stw	r18,0(r3)
81114cbc:	1025883a 	mov	r18,r2
81114cc0:	803feb1e 	bne	r16,zero,81114c70 <__reset+0xfb0f4c70>
81114cc4:	9005883a 	mov	r2,r18
81114cc8:	dfc00517 	ldw	ra,20(sp)
81114ccc:	dd000417 	ldw	r20,16(sp)
81114cd0:	dcc00317 	ldw	r19,12(sp)
81114cd4:	dc800217 	ldw	r18,8(sp)
81114cd8:	dc400117 	ldw	r17,4(sp)
81114cdc:	dc000017 	ldw	r16,0(sp)
81114ce0:	dec00604 	addi	sp,sp,24
81114ce4:	f800283a 	ret
81114ce8:	880d883a 	mov	r6,r17
81114cec:	880b883a 	mov	r5,r17
81114cf0:	9809883a 	mov	r4,r19
81114cf4:	1114a2c0 	call	81114a2c <__multiply>
81114cf8:	88800015 	stw	r2,0(r17)
81114cfc:	10000015 	stw	zero,0(r2)
81114d00:	003fdd06 	br	81114c78 <__reset+0xfb0f4c78>
81114d04:	1025883a 	mov	r18,r2
81114d08:	003fd706 	br	81114c68 <__reset+0xfb0f4c68>
81114d0c:	10bfffc4 	addi	r2,r2,-1
81114d10:	1085883a 	add	r2,r2,r2
81114d14:	00e044b4 	movhi	r3,33042
81114d18:	18c8f404 	addi	r3,r3,9168
81114d1c:	1085883a 	add	r2,r2,r2
81114d20:	1885883a 	add	r2,r3,r2
81114d24:	11800017 	ldw	r6,0(r2)
81114d28:	000f883a 	mov	r7,zero
81114d2c:	11146b40 	call	811146b4 <__multadd>
81114d30:	1025883a 	mov	r18,r2
81114d34:	003fc706 	br	81114c54 <__reset+0xfb0f4c54>
81114d38:	05000044 	movi	r20,1
81114d3c:	a00b883a 	mov	r5,r20
81114d40:	9809883a 	mov	r4,r19
81114d44:	11145e40 	call	811145e4 <_Balloc>
81114d48:	1023883a 	mov	r17,r2
81114d4c:	00809c44 	movi	r2,625
81114d50:	88800515 	stw	r2,20(r17)
81114d54:	8d000415 	stw	r20,16(r17)
81114d58:	9c401215 	stw	r17,72(r19)
81114d5c:	88000015 	stw	zero,0(r17)
81114d60:	003fc606 	br	81114c7c <__reset+0xfb0f4c7c>

81114d64 <__lshift>:
81114d64:	defff904 	addi	sp,sp,-28
81114d68:	dd400515 	stw	r21,20(sp)
81114d6c:	dcc00315 	stw	r19,12(sp)
81114d70:	302bd17a 	srai	r21,r6,5
81114d74:	2cc00417 	ldw	r19,16(r5)
81114d78:	28800217 	ldw	r2,8(r5)
81114d7c:	dd000415 	stw	r20,16(sp)
81114d80:	ace7883a 	add	r19,r21,r19
81114d84:	dc800215 	stw	r18,8(sp)
81114d88:	dc400115 	stw	r17,4(sp)
81114d8c:	dc000015 	stw	r16,0(sp)
81114d90:	dfc00615 	stw	ra,24(sp)
81114d94:	9c000044 	addi	r16,r19,1
81114d98:	2823883a 	mov	r17,r5
81114d9c:	3029883a 	mov	r20,r6
81114da0:	2025883a 	mov	r18,r4
81114da4:	29400117 	ldw	r5,4(r5)
81114da8:	1400030e 	bge	r2,r16,81114db8 <__lshift+0x54>
81114dac:	1085883a 	add	r2,r2,r2
81114db0:	29400044 	addi	r5,r5,1
81114db4:	143ffd16 	blt	r2,r16,81114dac <__reset+0xfb0f4dac>
81114db8:	9009883a 	mov	r4,r18
81114dbc:	11145e40 	call	811145e4 <_Balloc>
81114dc0:	10c00504 	addi	r3,r2,20
81114dc4:	0540070e 	bge	zero,r21,81114de4 <__lshift+0x80>
81114dc8:	ad6b883a 	add	r21,r21,r21
81114dcc:	ad6b883a 	add	r21,r21,r21
81114dd0:	1809883a 	mov	r4,r3
81114dd4:	1d47883a 	add	r3,r3,r21
81114dd8:	20000015 	stw	zero,0(r4)
81114ddc:	21000104 	addi	r4,r4,4
81114de0:	193ffd1e 	bne	r3,r4,81114dd8 <__reset+0xfb0f4dd8>
81114de4:	8a000417 	ldw	r8,16(r17)
81114de8:	89000504 	addi	r4,r17,20
81114dec:	a18007cc 	andi	r6,r20,31
81114df0:	4211883a 	add	r8,r8,r8
81114df4:	4211883a 	add	r8,r8,r8
81114df8:	2211883a 	add	r8,r4,r8
81114dfc:	30002326 	beq	r6,zero,81114e8c <__lshift+0x128>
81114e00:	02400804 	movi	r9,32
81114e04:	4993c83a 	sub	r9,r9,r6
81114e08:	000b883a 	mov	r5,zero
81114e0c:	21c00017 	ldw	r7,0(r4)
81114e10:	1815883a 	mov	r10,r3
81114e14:	18c00104 	addi	r3,r3,4
81114e18:	398e983a 	sll	r7,r7,r6
81114e1c:	21000104 	addi	r4,r4,4
81114e20:	394ab03a 	or	r5,r7,r5
81114e24:	197fff15 	stw	r5,-4(r3)
81114e28:	217fff17 	ldw	r5,-4(r4)
81114e2c:	2a4ad83a 	srl	r5,r5,r9
81114e30:	223ff636 	bltu	r4,r8,81114e0c <__reset+0xfb0f4e0c>
81114e34:	51400115 	stw	r5,4(r10)
81114e38:	28001a1e 	bne	r5,zero,81114ea4 <__lshift+0x140>
81114e3c:	843fffc4 	addi	r16,r16,-1
81114e40:	14000415 	stw	r16,16(r2)
81114e44:	88000826 	beq	r17,zero,81114e68 <__lshift+0x104>
81114e48:	89000117 	ldw	r4,4(r17)
81114e4c:	90c01317 	ldw	r3,76(r18)
81114e50:	2109883a 	add	r4,r4,r4
81114e54:	2109883a 	add	r4,r4,r4
81114e58:	1907883a 	add	r3,r3,r4
81114e5c:	19000017 	ldw	r4,0(r3)
81114e60:	89000015 	stw	r4,0(r17)
81114e64:	1c400015 	stw	r17,0(r3)
81114e68:	dfc00617 	ldw	ra,24(sp)
81114e6c:	dd400517 	ldw	r21,20(sp)
81114e70:	dd000417 	ldw	r20,16(sp)
81114e74:	dcc00317 	ldw	r19,12(sp)
81114e78:	dc800217 	ldw	r18,8(sp)
81114e7c:	dc400117 	ldw	r17,4(sp)
81114e80:	dc000017 	ldw	r16,0(sp)
81114e84:	dec00704 	addi	sp,sp,28
81114e88:	f800283a 	ret
81114e8c:	21400017 	ldw	r5,0(r4)
81114e90:	18c00104 	addi	r3,r3,4
81114e94:	21000104 	addi	r4,r4,4
81114e98:	197fff15 	stw	r5,-4(r3)
81114e9c:	223ffb36 	bltu	r4,r8,81114e8c <__reset+0xfb0f4e8c>
81114ea0:	003fe606 	br	81114e3c <__reset+0xfb0f4e3c>
81114ea4:	9c000084 	addi	r16,r19,2
81114ea8:	003fe406 	br	81114e3c <__reset+0xfb0f4e3c>

81114eac <__mcmp>:
81114eac:	20800417 	ldw	r2,16(r4)
81114eb0:	28c00417 	ldw	r3,16(r5)
81114eb4:	10c5c83a 	sub	r2,r2,r3
81114eb8:	1000111e 	bne	r2,zero,81114f00 <__mcmp+0x54>
81114ebc:	18c7883a 	add	r3,r3,r3
81114ec0:	18c7883a 	add	r3,r3,r3
81114ec4:	21000504 	addi	r4,r4,20
81114ec8:	29400504 	addi	r5,r5,20
81114ecc:	20c5883a 	add	r2,r4,r3
81114ed0:	28cb883a 	add	r5,r5,r3
81114ed4:	00000106 	br	81114edc <__mcmp+0x30>
81114ed8:	20800a2e 	bgeu	r4,r2,81114f04 <__mcmp+0x58>
81114edc:	10bfff04 	addi	r2,r2,-4
81114ee0:	297fff04 	addi	r5,r5,-4
81114ee4:	11800017 	ldw	r6,0(r2)
81114ee8:	28c00017 	ldw	r3,0(r5)
81114eec:	30fffa26 	beq	r6,r3,81114ed8 <__reset+0xfb0f4ed8>
81114ef0:	30c00236 	bltu	r6,r3,81114efc <__mcmp+0x50>
81114ef4:	00800044 	movi	r2,1
81114ef8:	f800283a 	ret
81114efc:	00bfffc4 	movi	r2,-1
81114f00:	f800283a 	ret
81114f04:	0005883a 	mov	r2,zero
81114f08:	f800283a 	ret

81114f0c <__mdiff>:
81114f0c:	28c00417 	ldw	r3,16(r5)
81114f10:	30800417 	ldw	r2,16(r6)
81114f14:	defffa04 	addi	sp,sp,-24
81114f18:	dcc00315 	stw	r19,12(sp)
81114f1c:	dc800215 	stw	r18,8(sp)
81114f20:	dfc00515 	stw	ra,20(sp)
81114f24:	dd000415 	stw	r20,16(sp)
81114f28:	dc400115 	stw	r17,4(sp)
81114f2c:	dc000015 	stw	r16,0(sp)
81114f30:	1887c83a 	sub	r3,r3,r2
81114f34:	2825883a 	mov	r18,r5
81114f38:	3027883a 	mov	r19,r6
81114f3c:	1800141e 	bne	r3,zero,81114f90 <__mdiff+0x84>
81114f40:	1085883a 	add	r2,r2,r2
81114f44:	1085883a 	add	r2,r2,r2
81114f48:	2a000504 	addi	r8,r5,20
81114f4c:	34000504 	addi	r16,r6,20
81114f50:	4087883a 	add	r3,r8,r2
81114f54:	8085883a 	add	r2,r16,r2
81114f58:	00000106 	br	81114f60 <__mdiff+0x54>
81114f5c:	40c0592e 	bgeu	r8,r3,811150c4 <__mdiff+0x1b8>
81114f60:	18ffff04 	addi	r3,r3,-4
81114f64:	10bfff04 	addi	r2,r2,-4
81114f68:	19c00017 	ldw	r7,0(r3)
81114f6c:	11400017 	ldw	r5,0(r2)
81114f70:	397ffa26 	beq	r7,r5,81114f5c <__reset+0xfb0f4f5c>
81114f74:	3940592e 	bgeu	r7,r5,811150dc <__mdiff+0x1d0>
81114f78:	9005883a 	mov	r2,r18
81114f7c:	4023883a 	mov	r17,r8
81114f80:	9825883a 	mov	r18,r19
81114f84:	05000044 	movi	r20,1
81114f88:	1027883a 	mov	r19,r2
81114f8c:	00000406 	br	81114fa0 <__mdiff+0x94>
81114f90:	18005616 	blt	r3,zero,811150ec <__mdiff+0x1e0>
81114f94:	34400504 	addi	r17,r6,20
81114f98:	2c000504 	addi	r16,r5,20
81114f9c:	0029883a 	mov	r20,zero
81114fa0:	91400117 	ldw	r5,4(r18)
81114fa4:	11145e40 	call	811145e4 <_Balloc>
81114fa8:	92400417 	ldw	r9,16(r18)
81114fac:	9b000417 	ldw	r12,16(r19)
81114fb0:	12c00504 	addi	r11,r2,20
81114fb4:	4a51883a 	add	r8,r9,r9
81114fb8:	6319883a 	add	r12,r12,r12
81114fbc:	4211883a 	add	r8,r8,r8
81114fc0:	6319883a 	add	r12,r12,r12
81114fc4:	15000315 	stw	r20,12(r2)
81114fc8:	8211883a 	add	r8,r16,r8
81114fcc:	8b19883a 	add	r12,r17,r12
81114fd0:	0007883a 	mov	r3,zero
81114fd4:	81400017 	ldw	r5,0(r16)
81114fd8:	89c00017 	ldw	r7,0(r17)
81114fdc:	59800104 	addi	r6,r11,4
81114fe0:	293fffcc 	andi	r4,r5,65535
81114fe4:	20c7883a 	add	r3,r4,r3
81114fe8:	393fffcc 	andi	r4,r7,65535
81114fec:	1909c83a 	sub	r4,r3,r4
81114ff0:	280ad43a 	srli	r5,r5,16
81114ff4:	380ed43a 	srli	r7,r7,16
81114ff8:	2007d43a 	srai	r3,r4,16
81114ffc:	213fffcc 	andi	r4,r4,65535
81115000:	29cbc83a 	sub	r5,r5,r7
81115004:	28c7883a 	add	r3,r5,r3
81115008:	180a943a 	slli	r5,r3,16
8111500c:	8c400104 	addi	r17,r17,4
81115010:	84000104 	addi	r16,r16,4
81115014:	2908b03a 	or	r4,r5,r4
81115018:	59000015 	stw	r4,0(r11)
8111501c:	1807d43a 	srai	r3,r3,16
81115020:	3015883a 	mov	r10,r6
81115024:	3017883a 	mov	r11,r6
81115028:	8b3fea36 	bltu	r17,r12,81114fd4 <__reset+0xfb0f4fd4>
8111502c:	8200162e 	bgeu	r16,r8,81115088 <__mdiff+0x17c>
81115030:	8017883a 	mov	r11,r16
81115034:	59400017 	ldw	r5,0(r11)
81115038:	31800104 	addi	r6,r6,4
8111503c:	5ac00104 	addi	r11,r11,4
81115040:	293fffcc 	andi	r4,r5,65535
81115044:	20c7883a 	add	r3,r4,r3
81115048:	280ed43a 	srli	r7,r5,16
8111504c:	180bd43a 	srai	r5,r3,16
81115050:	193fffcc 	andi	r4,r3,65535
81115054:	3947883a 	add	r3,r7,r5
81115058:	180a943a 	slli	r5,r3,16
8111505c:	1807d43a 	srai	r3,r3,16
81115060:	2908b03a 	or	r4,r5,r4
81115064:	313fff15 	stw	r4,-4(r6)
81115068:	5a3ff236 	bltu	r11,r8,81115034 <__reset+0xfb0f5034>
8111506c:	0406303a 	nor	r3,zero,r16
81115070:	1a07883a 	add	r3,r3,r8
81115074:	1806d0ba 	srli	r3,r3,2
81115078:	18c00044 	addi	r3,r3,1
8111507c:	18c7883a 	add	r3,r3,r3
81115080:	18c7883a 	add	r3,r3,r3
81115084:	50d5883a 	add	r10,r10,r3
81115088:	50ffff04 	addi	r3,r10,-4
8111508c:	2000041e 	bne	r4,zero,811150a0 <__mdiff+0x194>
81115090:	18ffff04 	addi	r3,r3,-4
81115094:	19000017 	ldw	r4,0(r3)
81115098:	4a7fffc4 	addi	r9,r9,-1
8111509c:	203ffc26 	beq	r4,zero,81115090 <__reset+0xfb0f5090>
811150a0:	12400415 	stw	r9,16(r2)
811150a4:	dfc00517 	ldw	ra,20(sp)
811150a8:	dd000417 	ldw	r20,16(sp)
811150ac:	dcc00317 	ldw	r19,12(sp)
811150b0:	dc800217 	ldw	r18,8(sp)
811150b4:	dc400117 	ldw	r17,4(sp)
811150b8:	dc000017 	ldw	r16,0(sp)
811150bc:	dec00604 	addi	sp,sp,24
811150c0:	f800283a 	ret
811150c4:	000b883a 	mov	r5,zero
811150c8:	11145e40 	call	811145e4 <_Balloc>
811150cc:	00c00044 	movi	r3,1
811150d0:	10c00415 	stw	r3,16(r2)
811150d4:	10000515 	stw	zero,20(r2)
811150d8:	003ff206 	br	811150a4 <__reset+0xfb0f50a4>
811150dc:	8023883a 	mov	r17,r16
811150e0:	0029883a 	mov	r20,zero
811150e4:	4021883a 	mov	r16,r8
811150e8:	003fad06 	br	81114fa0 <__reset+0xfb0f4fa0>
811150ec:	9005883a 	mov	r2,r18
811150f0:	94400504 	addi	r17,r18,20
811150f4:	9c000504 	addi	r16,r19,20
811150f8:	9825883a 	mov	r18,r19
811150fc:	05000044 	movi	r20,1
81115100:	1027883a 	mov	r19,r2
81115104:	003fa606 	br	81114fa0 <__reset+0xfb0f4fa0>

81115108 <__ulp>:
81115108:	295ffc2c 	andhi	r5,r5,32752
8111510c:	00bf3034 	movhi	r2,64704
81115110:	2887883a 	add	r3,r5,r2
81115114:	00c0020e 	bge	zero,r3,81115120 <__ulp+0x18>
81115118:	0005883a 	mov	r2,zero
8111511c:	f800283a 	ret
81115120:	00c7c83a 	sub	r3,zero,r3
81115124:	1807d53a 	srai	r3,r3,20
81115128:	008004c4 	movi	r2,19
8111512c:	10c00b0e 	bge	r2,r3,8111515c <__ulp+0x54>
81115130:	18bffb04 	addi	r2,r3,-20
81115134:	01000784 	movi	r4,30
81115138:	0007883a 	mov	r3,zero
8111513c:	20800516 	blt	r4,r2,81115154 <__ulp+0x4c>
81115140:	010007c4 	movi	r4,31
81115144:	2089c83a 	sub	r4,r4,r2
81115148:	00800044 	movi	r2,1
8111514c:	1104983a 	sll	r2,r2,r4
81115150:	f800283a 	ret
81115154:	00800044 	movi	r2,1
81115158:	f800283a 	ret
8111515c:	01400234 	movhi	r5,8
81115160:	28c7d83a 	sra	r3,r5,r3
81115164:	0005883a 	mov	r2,zero
81115168:	f800283a 	ret

8111516c <__b2d>:
8111516c:	defffa04 	addi	sp,sp,-24
81115170:	dc000015 	stw	r16,0(sp)
81115174:	24000417 	ldw	r16,16(r4)
81115178:	dc400115 	stw	r17,4(sp)
8111517c:	24400504 	addi	r17,r4,20
81115180:	8421883a 	add	r16,r16,r16
81115184:	8421883a 	add	r16,r16,r16
81115188:	8c21883a 	add	r16,r17,r16
8111518c:	dc800215 	stw	r18,8(sp)
81115190:	84bfff17 	ldw	r18,-4(r16)
81115194:	dd000415 	stw	r20,16(sp)
81115198:	dcc00315 	stw	r19,12(sp)
8111519c:	9009883a 	mov	r4,r18
811151a0:	2829883a 	mov	r20,r5
811151a4:	dfc00515 	stw	ra,20(sp)
811151a8:	11148d80 	call	811148d8 <__hi0bits>
811151ac:	00c00804 	movi	r3,32
811151b0:	1889c83a 	sub	r4,r3,r2
811151b4:	a1000015 	stw	r4,0(r20)
811151b8:	01000284 	movi	r4,10
811151bc:	84ffff04 	addi	r19,r16,-4
811151c0:	20801216 	blt	r4,r2,8111520c <__b2d+0xa0>
811151c4:	018002c4 	movi	r6,11
811151c8:	308dc83a 	sub	r6,r6,r2
811151cc:	9186d83a 	srl	r3,r18,r6
811151d0:	18cffc34 	orhi	r3,r3,16368
811151d4:	8cc0212e 	bgeu	r17,r19,8111525c <__b2d+0xf0>
811151d8:	813ffe17 	ldw	r4,-8(r16)
811151dc:	218cd83a 	srl	r6,r4,r6
811151e0:	10800544 	addi	r2,r2,21
811151e4:	9084983a 	sll	r2,r18,r2
811151e8:	1184b03a 	or	r2,r2,r6
811151ec:	dfc00517 	ldw	ra,20(sp)
811151f0:	dd000417 	ldw	r20,16(sp)
811151f4:	dcc00317 	ldw	r19,12(sp)
811151f8:	dc800217 	ldw	r18,8(sp)
811151fc:	dc400117 	ldw	r17,4(sp)
81115200:	dc000017 	ldw	r16,0(sp)
81115204:	dec00604 	addi	sp,sp,24
81115208:	f800283a 	ret
8111520c:	8cc00f2e 	bgeu	r17,r19,8111524c <__b2d+0xe0>
81115210:	117ffd44 	addi	r5,r2,-11
81115214:	80bffe17 	ldw	r2,-8(r16)
81115218:	28000e26 	beq	r5,zero,81115254 <__b2d+0xe8>
8111521c:	1949c83a 	sub	r4,r3,r5
81115220:	9164983a 	sll	r18,r18,r5
81115224:	1106d83a 	srl	r3,r2,r4
81115228:	81bffe04 	addi	r6,r16,-8
8111522c:	948ffc34 	orhi	r18,r18,16368
81115230:	90c6b03a 	or	r3,r18,r3
81115234:	89800e2e 	bgeu	r17,r6,81115270 <__b2d+0x104>
81115238:	81bffd17 	ldw	r6,-12(r16)
8111523c:	1144983a 	sll	r2,r2,r5
81115240:	310ad83a 	srl	r5,r6,r4
81115244:	2884b03a 	or	r2,r5,r2
81115248:	003fe806 	br	811151ec <__reset+0xfb0f51ec>
8111524c:	10bffd44 	addi	r2,r2,-11
81115250:	1000041e 	bne	r2,zero,81115264 <__b2d+0xf8>
81115254:	90cffc34 	orhi	r3,r18,16368
81115258:	003fe406 	br	811151ec <__reset+0xfb0f51ec>
8111525c:	000d883a 	mov	r6,zero
81115260:	003fdf06 	br	811151e0 <__reset+0xfb0f51e0>
81115264:	90a4983a 	sll	r18,r18,r2
81115268:	0005883a 	mov	r2,zero
8111526c:	003ff906 	br	81115254 <__reset+0xfb0f5254>
81115270:	1144983a 	sll	r2,r2,r5
81115274:	003fdd06 	br	811151ec <__reset+0xfb0f51ec>

81115278 <__d2b>:
81115278:	defff804 	addi	sp,sp,-32
8111527c:	dc000215 	stw	r16,8(sp)
81115280:	3021883a 	mov	r16,r6
81115284:	dc400315 	stw	r17,12(sp)
81115288:	8022907a 	slli	r17,r16,1
8111528c:	dd000615 	stw	r20,24(sp)
81115290:	2829883a 	mov	r20,r5
81115294:	01400044 	movi	r5,1
81115298:	dcc00515 	stw	r19,20(sp)
8111529c:	dc800415 	stw	r18,16(sp)
811152a0:	dfc00715 	stw	ra,28(sp)
811152a4:	3825883a 	mov	r18,r7
811152a8:	8822d57a 	srli	r17,r17,21
811152ac:	11145e40 	call	811145e4 <_Balloc>
811152b0:	1027883a 	mov	r19,r2
811152b4:	00800434 	movhi	r2,16
811152b8:	10bfffc4 	addi	r2,r2,-1
811152bc:	808c703a 	and	r6,r16,r2
811152c0:	88000126 	beq	r17,zero,811152c8 <__d2b+0x50>
811152c4:	31800434 	orhi	r6,r6,16
811152c8:	d9800015 	stw	r6,0(sp)
811152cc:	a0002426 	beq	r20,zero,81115360 <__d2b+0xe8>
811152d0:	d9000104 	addi	r4,sp,4
811152d4:	dd000115 	stw	r20,4(sp)
811152d8:	11149400 	call	81114940 <__lo0bits>
811152dc:	d8c00017 	ldw	r3,0(sp)
811152e0:	10002f1e 	bne	r2,zero,811153a0 <__d2b+0x128>
811152e4:	d9000117 	ldw	r4,4(sp)
811152e8:	99000515 	stw	r4,20(r19)
811152ec:	1821003a 	cmpeq	r16,r3,zero
811152f0:	01000084 	movi	r4,2
811152f4:	2421c83a 	sub	r16,r4,r16
811152f8:	98c00615 	stw	r3,24(r19)
811152fc:	9c000415 	stw	r16,16(r19)
81115300:	88001f1e 	bne	r17,zero,81115380 <__d2b+0x108>
81115304:	10bef384 	addi	r2,r2,-1074
81115308:	90800015 	stw	r2,0(r18)
8111530c:	00900034 	movhi	r2,16384
81115310:	10bfffc4 	addi	r2,r2,-1
81115314:	8085883a 	add	r2,r16,r2
81115318:	1085883a 	add	r2,r2,r2
8111531c:	1085883a 	add	r2,r2,r2
81115320:	9885883a 	add	r2,r19,r2
81115324:	11000517 	ldw	r4,20(r2)
81115328:	8020917a 	slli	r16,r16,5
8111532c:	11148d80 	call	811148d8 <__hi0bits>
81115330:	d8c00817 	ldw	r3,32(sp)
81115334:	8085c83a 	sub	r2,r16,r2
81115338:	18800015 	stw	r2,0(r3)
8111533c:	9805883a 	mov	r2,r19
81115340:	dfc00717 	ldw	ra,28(sp)
81115344:	dd000617 	ldw	r20,24(sp)
81115348:	dcc00517 	ldw	r19,20(sp)
8111534c:	dc800417 	ldw	r18,16(sp)
81115350:	dc400317 	ldw	r17,12(sp)
81115354:	dc000217 	ldw	r16,8(sp)
81115358:	dec00804 	addi	sp,sp,32
8111535c:	f800283a 	ret
81115360:	d809883a 	mov	r4,sp
81115364:	11149400 	call	81114940 <__lo0bits>
81115368:	d8c00017 	ldw	r3,0(sp)
8111536c:	04000044 	movi	r16,1
81115370:	9c000415 	stw	r16,16(r19)
81115374:	98c00515 	stw	r3,20(r19)
81115378:	10800804 	addi	r2,r2,32
8111537c:	883fe126 	beq	r17,zero,81115304 <__reset+0xfb0f5304>
81115380:	00c00d44 	movi	r3,53
81115384:	8c7ef344 	addi	r17,r17,-1075
81115388:	88a3883a 	add	r17,r17,r2
8111538c:	1885c83a 	sub	r2,r3,r2
81115390:	d8c00817 	ldw	r3,32(sp)
81115394:	94400015 	stw	r17,0(r18)
81115398:	18800015 	stw	r2,0(r3)
8111539c:	003fe706 	br	8111533c <__reset+0xfb0f533c>
811153a0:	01000804 	movi	r4,32
811153a4:	2089c83a 	sub	r4,r4,r2
811153a8:	1908983a 	sll	r4,r3,r4
811153ac:	d9400117 	ldw	r5,4(sp)
811153b0:	1886d83a 	srl	r3,r3,r2
811153b4:	2148b03a 	or	r4,r4,r5
811153b8:	99000515 	stw	r4,20(r19)
811153bc:	d8c00015 	stw	r3,0(sp)
811153c0:	003fca06 	br	811152ec <__reset+0xfb0f52ec>

811153c4 <__ratio>:
811153c4:	defff904 	addi	sp,sp,-28
811153c8:	dc400315 	stw	r17,12(sp)
811153cc:	2823883a 	mov	r17,r5
811153d0:	d9400104 	addi	r5,sp,4
811153d4:	dfc00615 	stw	ra,24(sp)
811153d8:	dcc00515 	stw	r19,20(sp)
811153dc:	dc800415 	stw	r18,16(sp)
811153e0:	2027883a 	mov	r19,r4
811153e4:	dc000215 	stw	r16,8(sp)
811153e8:	111516c0 	call	8111516c <__b2d>
811153ec:	d80b883a 	mov	r5,sp
811153f0:	8809883a 	mov	r4,r17
811153f4:	1025883a 	mov	r18,r2
811153f8:	1821883a 	mov	r16,r3
811153fc:	111516c0 	call	8111516c <__b2d>
81115400:	8a000417 	ldw	r8,16(r17)
81115404:	99000417 	ldw	r4,16(r19)
81115408:	d9400117 	ldw	r5,4(sp)
8111540c:	2209c83a 	sub	r4,r4,r8
81115410:	2010917a 	slli	r8,r4,5
81115414:	d9000017 	ldw	r4,0(sp)
81115418:	2909c83a 	sub	r4,r5,r4
8111541c:	4109883a 	add	r4,r8,r4
81115420:	01000e0e 	bge	zero,r4,8111545c <__ratio+0x98>
81115424:	2008953a 	slli	r4,r4,20
81115428:	2421883a 	add	r16,r4,r16
8111542c:	100d883a 	mov	r6,r2
81115430:	180f883a 	mov	r7,r3
81115434:	9009883a 	mov	r4,r18
81115438:	800b883a 	mov	r5,r16
8111543c:	111a4000 	call	8111a400 <__divdf3>
81115440:	dfc00617 	ldw	ra,24(sp)
81115444:	dcc00517 	ldw	r19,20(sp)
81115448:	dc800417 	ldw	r18,16(sp)
8111544c:	dc400317 	ldw	r17,12(sp)
81115450:	dc000217 	ldw	r16,8(sp)
81115454:	dec00704 	addi	sp,sp,28
81115458:	f800283a 	ret
8111545c:	2008953a 	slli	r4,r4,20
81115460:	1907c83a 	sub	r3,r3,r4
81115464:	003ff106 	br	8111542c <__reset+0xfb0f542c>

81115468 <_mprec_log10>:
81115468:	defffe04 	addi	sp,sp,-8
8111546c:	dc000015 	stw	r16,0(sp)
81115470:	dfc00115 	stw	ra,4(sp)
81115474:	008005c4 	movi	r2,23
81115478:	2021883a 	mov	r16,r4
8111547c:	11000d0e 	bge	r2,r4,811154b4 <_mprec_log10+0x4c>
81115480:	0005883a 	mov	r2,zero
81115484:	00cffc34 	movhi	r3,16368
81115488:	843fffc4 	addi	r16,r16,-1
8111548c:	000d883a 	mov	r6,zero
81115490:	01d00934 	movhi	r7,16420
81115494:	1009883a 	mov	r4,r2
81115498:	180b883a 	mov	r5,r3
8111549c:	110adac0 	call	8110adac <__muldf3>
811154a0:	803ff91e 	bne	r16,zero,81115488 <__reset+0xfb0f5488>
811154a4:	dfc00117 	ldw	ra,4(sp)
811154a8:	dc000017 	ldw	r16,0(sp)
811154ac:	dec00204 	addi	sp,sp,8
811154b0:	f800283a 	ret
811154b4:	202090fa 	slli	r16,r4,3
811154b8:	00a044b4 	movhi	r2,33042
811154bc:	10890b04 	addi	r2,r2,9260
811154c0:	1421883a 	add	r16,r2,r16
811154c4:	80800017 	ldw	r2,0(r16)
811154c8:	80c00117 	ldw	r3,4(r16)
811154cc:	dfc00117 	ldw	ra,4(sp)
811154d0:	dc000017 	ldw	r16,0(sp)
811154d4:	dec00204 	addi	sp,sp,8
811154d8:	f800283a 	ret

811154dc <__copybits>:
811154dc:	297fffc4 	addi	r5,r5,-1
811154e0:	280fd17a 	srai	r7,r5,5
811154e4:	30c00417 	ldw	r3,16(r6)
811154e8:	30800504 	addi	r2,r6,20
811154ec:	39c00044 	addi	r7,r7,1
811154f0:	18c7883a 	add	r3,r3,r3
811154f4:	39cf883a 	add	r7,r7,r7
811154f8:	18c7883a 	add	r3,r3,r3
811154fc:	39cf883a 	add	r7,r7,r7
81115500:	10c7883a 	add	r3,r2,r3
81115504:	21cf883a 	add	r7,r4,r7
81115508:	10c00d2e 	bgeu	r2,r3,81115540 <__copybits+0x64>
8111550c:	200b883a 	mov	r5,r4
81115510:	12000017 	ldw	r8,0(r2)
81115514:	29400104 	addi	r5,r5,4
81115518:	10800104 	addi	r2,r2,4
8111551c:	2a3fff15 	stw	r8,-4(r5)
81115520:	10fffb36 	bltu	r2,r3,81115510 <__reset+0xfb0f5510>
81115524:	1985c83a 	sub	r2,r3,r6
81115528:	10bffac4 	addi	r2,r2,-21
8111552c:	1004d0ba 	srli	r2,r2,2
81115530:	10800044 	addi	r2,r2,1
81115534:	1085883a 	add	r2,r2,r2
81115538:	1085883a 	add	r2,r2,r2
8111553c:	2089883a 	add	r4,r4,r2
81115540:	21c0032e 	bgeu	r4,r7,81115550 <__copybits+0x74>
81115544:	20000015 	stw	zero,0(r4)
81115548:	21000104 	addi	r4,r4,4
8111554c:	21fffd36 	bltu	r4,r7,81115544 <__reset+0xfb0f5544>
81115550:	f800283a 	ret

81115554 <__any_on>:
81115554:	20c00417 	ldw	r3,16(r4)
81115558:	2805d17a 	srai	r2,r5,5
8111555c:	21000504 	addi	r4,r4,20
81115560:	18800d0e 	bge	r3,r2,81115598 <__any_on+0x44>
81115564:	18c7883a 	add	r3,r3,r3
81115568:	18c7883a 	add	r3,r3,r3
8111556c:	20c7883a 	add	r3,r4,r3
81115570:	20c0192e 	bgeu	r4,r3,811155d8 <__any_on+0x84>
81115574:	18bfff17 	ldw	r2,-4(r3)
81115578:	18ffff04 	addi	r3,r3,-4
8111557c:	1000041e 	bne	r2,zero,81115590 <__any_on+0x3c>
81115580:	20c0142e 	bgeu	r4,r3,811155d4 <__any_on+0x80>
81115584:	18ffff04 	addi	r3,r3,-4
81115588:	19400017 	ldw	r5,0(r3)
8111558c:	283ffc26 	beq	r5,zero,81115580 <__reset+0xfb0f5580>
81115590:	00800044 	movi	r2,1
81115594:	f800283a 	ret
81115598:	10c00a0e 	bge	r2,r3,811155c4 <__any_on+0x70>
8111559c:	1085883a 	add	r2,r2,r2
811155a0:	1085883a 	add	r2,r2,r2
811155a4:	294007cc 	andi	r5,r5,31
811155a8:	2087883a 	add	r3,r4,r2
811155ac:	283ff026 	beq	r5,zero,81115570 <__reset+0xfb0f5570>
811155b0:	19800017 	ldw	r6,0(r3)
811155b4:	3144d83a 	srl	r2,r6,r5
811155b8:	114a983a 	sll	r5,r2,r5
811155bc:	317ff41e 	bne	r6,r5,81115590 <__reset+0xfb0f5590>
811155c0:	003feb06 	br	81115570 <__reset+0xfb0f5570>
811155c4:	1085883a 	add	r2,r2,r2
811155c8:	1085883a 	add	r2,r2,r2
811155cc:	2087883a 	add	r3,r4,r2
811155d0:	003fe706 	br	81115570 <__reset+0xfb0f5570>
811155d4:	f800283a 	ret
811155d8:	0005883a 	mov	r2,zero
811155dc:	f800283a 	ret

811155e0 <_read_r>:
811155e0:	defffd04 	addi	sp,sp,-12
811155e4:	2805883a 	mov	r2,r5
811155e8:	dc000015 	stw	r16,0(sp)
811155ec:	042044b4 	movhi	r16,33042
811155f0:	dc400115 	stw	r17,4(sp)
811155f4:	300b883a 	mov	r5,r6
811155f8:	84113404 	addi	r16,r16,17616
811155fc:	2023883a 	mov	r17,r4
81115600:	380d883a 	mov	r6,r7
81115604:	1009883a 	mov	r4,r2
81115608:	dfc00215 	stw	ra,8(sp)
8111560c:	80000015 	stw	zero,0(r16)
81115610:	111c4700 	call	8111c470 <read>
81115614:	00ffffc4 	movi	r3,-1
81115618:	10c00526 	beq	r2,r3,81115630 <_read_r+0x50>
8111561c:	dfc00217 	ldw	ra,8(sp)
81115620:	dc400117 	ldw	r17,4(sp)
81115624:	dc000017 	ldw	r16,0(sp)
81115628:	dec00304 	addi	sp,sp,12
8111562c:	f800283a 	ret
81115630:	80c00017 	ldw	r3,0(r16)
81115634:	183ff926 	beq	r3,zero,8111561c <__reset+0xfb0f561c>
81115638:	88c00015 	stw	r3,0(r17)
8111563c:	003ff706 	br	8111561c <__reset+0xfb0f561c>

81115640 <_realloc_r>:
81115640:	defff604 	addi	sp,sp,-40
81115644:	dc800215 	stw	r18,8(sp)
81115648:	dfc00915 	stw	ra,36(sp)
8111564c:	df000815 	stw	fp,32(sp)
81115650:	ddc00715 	stw	r23,28(sp)
81115654:	dd800615 	stw	r22,24(sp)
81115658:	dd400515 	stw	r21,20(sp)
8111565c:	dd000415 	stw	r20,16(sp)
81115660:	dcc00315 	stw	r19,12(sp)
81115664:	dc400115 	stw	r17,4(sp)
81115668:	dc000015 	stw	r16,0(sp)
8111566c:	3025883a 	mov	r18,r6
81115670:	2800b726 	beq	r5,zero,81115950 <_realloc_r+0x310>
81115674:	282b883a 	mov	r21,r5
81115678:	2029883a 	mov	r20,r4
8111567c:	111c1980 	call	8111c198 <__malloc_lock>
81115680:	a8bfff17 	ldw	r2,-4(r21)
81115684:	043fff04 	movi	r16,-4
81115688:	90c002c4 	addi	r3,r18,11
8111568c:	01000584 	movi	r4,22
81115690:	acfffe04 	addi	r19,r21,-8
81115694:	1420703a 	and	r16,r2,r16
81115698:	20c0332e 	bgeu	r4,r3,81115768 <_realloc_r+0x128>
8111569c:	047ffe04 	movi	r17,-8
811156a0:	1c62703a 	and	r17,r3,r17
811156a4:	8807883a 	mov	r3,r17
811156a8:	88005816 	blt	r17,zero,8111580c <_realloc_r+0x1cc>
811156ac:	8c805736 	bltu	r17,r18,8111580c <_realloc_r+0x1cc>
811156b0:	80c0300e 	bge	r16,r3,81115774 <_realloc_r+0x134>
811156b4:	072044b4 	movhi	fp,33042
811156b8:	e70afe04 	addi	fp,fp,11256
811156bc:	e1c00217 	ldw	r7,8(fp)
811156c0:	9c09883a 	add	r4,r19,r16
811156c4:	22000117 	ldw	r8,4(r4)
811156c8:	21c06326 	beq	r4,r7,81115858 <_realloc_r+0x218>
811156cc:	017fff84 	movi	r5,-2
811156d0:	414a703a 	and	r5,r8,r5
811156d4:	214b883a 	add	r5,r4,r5
811156d8:	29800117 	ldw	r6,4(r5)
811156dc:	3180004c 	andi	r6,r6,1
811156e0:	30003f26 	beq	r6,zero,811157e0 <_realloc_r+0x1a0>
811156e4:	1080004c 	andi	r2,r2,1
811156e8:	10008326 	beq	r2,zero,811158f8 <_realloc_r+0x2b8>
811156ec:	900b883a 	mov	r5,r18
811156f0:	a009883a 	mov	r4,r20
811156f4:	110c1c80 	call	8110c1c8 <_malloc_r>
811156f8:	1025883a 	mov	r18,r2
811156fc:	10011e26 	beq	r2,zero,81115b78 <_realloc_r+0x538>
81115700:	a93fff17 	ldw	r4,-4(r21)
81115704:	10fffe04 	addi	r3,r2,-8
81115708:	00bfff84 	movi	r2,-2
8111570c:	2084703a 	and	r2,r4,r2
81115710:	9885883a 	add	r2,r19,r2
81115714:	1880ee26 	beq	r3,r2,81115ad0 <_realloc_r+0x490>
81115718:	81bfff04 	addi	r6,r16,-4
8111571c:	00800904 	movi	r2,36
81115720:	1180b836 	bltu	r2,r6,81115a04 <_realloc_r+0x3c4>
81115724:	00c004c4 	movi	r3,19
81115728:	19809636 	bltu	r3,r6,81115984 <_realloc_r+0x344>
8111572c:	9005883a 	mov	r2,r18
81115730:	a807883a 	mov	r3,r21
81115734:	19000017 	ldw	r4,0(r3)
81115738:	11000015 	stw	r4,0(r2)
8111573c:	19000117 	ldw	r4,4(r3)
81115740:	11000115 	stw	r4,4(r2)
81115744:	18c00217 	ldw	r3,8(r3)
81115748:	10c00215 	stw	r3,8(r2)
8111574c:	a80b883a 	mov	r5,r21
81115750:	a009883a 	mov	r4,r20
81115754:	11138c00 	call	811138c0 <_free_r>
81115758:	a009883a 	mov	r4,r20
8111575c:	111c1bc0 	call	8111c1bc <__malloc_unlock>
81115760:	9005883a 	mov	r2,r18
81115764:	00001206 	br	811157b0 <_realloc_r+0x170>
81115768:	00c00404 	movi	r3,16
8111576c:	1823883a 	mov	r17,r3
81115770:	003fce06 	br	811156ac <__reset+0xfb0f56ac>
81115774:	a825883a 	mov	r18,r21
81115778:	8445c83a 	sub	r2,r16,r17
8111577c:	00c003c4 	movi	r3,15
81115780:	18802636 	bltu	r3,r2,8111581c <_realloc_r+0x1dc>
81115784:	99800117 	ldw	r6,4(r19)
81115788:	9c07883a 	add	r3,r19,r16
8111578c:	3180004c 	andi	r6,r6,1
81115790:	3420b03a 	or	r16,r6,r16
81115794:	9c000115 	stw	r16,4(r19)
81115798:	18800117 	ldw	r2,4(r3)
8111579c:	10800054 	ori	r2,r2,1
811157a0:	18800115 	stw	r2,4(r3)
811157a4:	a009883a 	mov	r4,r20
811157a8:	111c1bc0 	call	8111c1bc <__malloc_unlock>
811157ac:	9005883a 	mov	r2,r18
811157b0:	dfc00917 	ldw	ra,36(sp)
811157b4:	df000817 	ldw	fp,32(sp)
811157b8:	ddc00717 	ldw	r23,28(sp)
811157bc:	dd800617 	ldw	r22,24(sp)
811157c0:	dd400517 	ldw	r21,20(sp)
811157c4:	dd000417 	ldw	r20,16(sp)
811157c8:	dcc00317 	ldw	r19,12(sp)
811157cc:	dc800217 	ldw	r18,8(sp)
811157d0:	dc400117 	ldw	r17,4(sp)
811157d4:	dc000017 	ldw	r16,0(sp)
811157d8:	dec00a04 	addi	sp,sp,40
811157dc:	f800283a 	ret
811157e0:	017fff04 	movi	r5,-4
811157e4:	414a703a 	and	r5,r8,r5
811157e8:	814d883a 	add	r6,r16,r5
811157ec:	30c01f16 	blt	r6,r3,8111586c <_realloc_r+0x22c>
811157f0:	20800317 	ldw	r2,12(r4)
811157f4:	20c00217 	ldw	r3,8(r4)
811157f8:	a825883a 	mov	r18,r21
811157fc:	3021883a 	mov	r16,r6
81115800:	18800315 	stw	r2,12(r3)
81115804:	10c00215 	stw	r3,8(r2)
81115808:	003fdb06 	br	81115778 <__reset+0xfb0f5778>
8111580c:	00800304 	movi	r2,12
81115810:	a0800015 	stw	r2,0(r20)
81115814:	0005883a 	mov	r2,zero
81115818:	003fe506 	br	811157b0 <__reset+0xfb0f57b0>
8111581c:	98c00117 	ldw	r3,4(r19)
81115820:	9c4b883a 	add	r5,r19,r17
81115824:	11000054 	ori	r4,r2,1
81115828:	18c0004c 	andi	r3,r3,1
8111582c:	1c62b03a 	or	r17,r3,r17
81115830:	9c400115 	stw	r17,4(r19)
81115834:	29000115 	stw	r4,4(r5)
81115838:	2885883a 	add	r2,r5,r2
8111583c:	10c00117 	ldw	r3,4(r2)
81115840:	29400204 	addi	r5,r5,8
81115844:	a009883a 	mov	r4,r20
81115848:	18c00054 	ori	r3,r3,1
8111584c:	10c00115 	stw	r3,4(r2)
81115850:	11138c00 	call	811138c0 <_free_r>
81115854:	003fd306 	br	811157a4 <__reset+0xfb0f57a4>
81115858:	017fff04 	movi	r5,-4
8111585c:	414a703a 	and	r5,r8,r5
81115860:	89800404 	addi	r6,r17,16
81115864:	8151883a 	add	r8,r16,r5
81115868:	4180590e 	bge	r8,r6,811159d0 <_realloc_r+0x390>
8111586c:	1080004c 	andi	r2,r2,1
81115870:	103f9e1e 	bne	r2,zero,811156ec <__reset+0xfb0f56ec>
81115874:	adbffe17 	ldw	r22,-8(r21)
81115878:	00bfff04 	movi	r2,-4
8111587c:	9dadc83a 	sub	r22,r19,r22
81115880:	b1800117 	ldw	r6,4(r22)
81115884:	3084703a 	and	r2,r6,r2
81115888:	20002026 	beq	r4,zero,8111590c <_realloc_r+0x2cc>
8111588c:	80af883a 	add	r23,r16,r2
81115890:	b96f883a 	add	r23,r23,r5
81115894:	21c05f26 	beq	r4,r7,81115a14 <_realloc_r+0x3d4>
81115898:	b8c01c16 	blt	r23,r3,8111590c <_realloc_r+0x2cc>
8111589c:	20800317 	ldw	r2,12(r4)
811158a0:	20c00217 	ldw	r3,8(r4)
811158a4:	81bfff04 	addi	r6,r16,-4
811158a8:	01000904 	movi	r4,36
811158ac:	18800315 	stw	r2,12(r3)
811158b0:	10c00215 	stw	r3,8(r2)
811158b4:	b0c00217 	ldw	r3,8(r22)
811158b8:	b0800317 	ldw	r2,12(r22)
811158bc:	b4800204 	addi	r18,r22,8
811158c0:	18800315 	stw	r2,12(r3)
811158c4:	10c00215 	stw	r3,8(r2)
811158c8:	21801b36 	bltu	r4,r6,81115938 <_realloc_r+0x2f8>
811158cc:	008004c4 	movi	r2,19
811158d0:	1180352e 	bgeu	r2,r6,811159a8 <_realloc_r+0x368>
811158d4:	a8800017 	ldw	r2,0(r21)
811158d8:	b0800215 	stw	r2,8(r22)
811158dc:	a8800117 	ldw	r2,4(r21)
811158e0:	b0800315 	stw	r2,12(r22)
811158e4:	008006c4 	movi	r2,27
811158e8:	11807f36 	bltu	r2,r6,81115ae8 <_realloc_r+0x4a8>
811158ec:	b0800404 	addi	r2,r22,16
811158f0:	ad400204 	addi	r21,r21,8
811158f4:	00002d06 	br	811159ac <_realloc_r+0x36c>
811158f8:	adbffe17 	ldw	r22,-8(r21)
811158fc:	00bfff04 	movi	r2,-4
81115900:	9dadc83a 	sub	r22,r19,r22
81115904:	b1000117 	ldw	r4,4(r22)
81115908:	2084703a 	and	r2,r4,r2
8111590c:	b03f7726 	beq	r22,zero,811156ec <__reset+0xfb0f56ec>
81115910:	80af883a 	add	r23,r16,r2
81115914:	b8ff7516 	blt	r23,r3,811156ec <__reset+0xfb0f56ec>
81115918:	b0800317 	ldw	r2,12(r22)
8111591c:	b0c00217 	ldw	r3,8(r22)
81115920:	81bfff04 	addi	r6,r16,-4
81115924:	01000904 	movi	r4,36
81115928:	18800315 	stw	r2,12(r3)
8111592c:	10c00215 	stw	r3,8(r2)
81115930:	b4800204 	addi	r18,r22,8
81115934:	21bfe52e 	bgeu	r4,r6,811158cc <__reset+0xfb0f58cc>
81115938:	a80b883a 	mov	r5,r21
8111593c:	9009883a 	mov	r4,r18
81115940:	11144880 	call	81114488 <memmove>
81115944:	b821883a 	mov	r16,r23
81115948:	b027883a 	mov	r19,r22
8111594c:	003f8a06 	br	81115778 <__reset+0xfb0f5778>
81115950:	300b883a 	mov	r5,r6
81115954:	dfc00917 	ldw	ra,36(sp)
81115958:	df000817 	ldw	fp,32(sp)
8111595c:	ddc00717 	ldw	r23,28(sp)
81115960:	dd800617 	ldw	r22,24(sp)
81115964:	dd400517 	ldw	r21,20(sp)
81115968:	dd000417 	ldw	r20,16(sp)
8111596c:	dcc00317 	ldw	r19,12(sp)
81115970:	dc800217 	ldw	r18,8(sp)
81115974:	dc400117 	ldw	r17,4(sp)
81115978:	dc000017 	ldw	r16,0(sp)
8111597c:	dec00a04 	addi	sp,sp,40
81115980:	110c1c81 	jmpi	8110c1c8 <_malloc_r>
81115984:	a8c00017 	ldw	r3,0(r21)
81115988:	90c00015 	stw	r3,0(r18)
8111598c:	a8c00117 	ldw	r3,4(r21)
81115990:	90c00115 	stw	r3,4(r18)
81115994:	00c006c4 	movi	r3,27
81115998:	19804536 	bltu	r3,r6,81115ab0 <_realloc_r+0x470>
8111599c:	90800204 	addi	r2,r18,8
811159a0:	a8c00204 	addi	r3,r21,8
811159a4:	003f6306 	br	81115734 <__reset+0xfb0f5734>
811159a8:	9005883a 	mov	r2,r18
811159ac:	a8c00017 	ldw	r3,0(r21)
811159b0:	b821883a 	mov	r16,r23
811159b4:	b027883a 	mov	r19,r22
811159b8:	10c00015 	stw	r3,0(r2)
811159bc:	a8c00117 	ldw	r3,4(r21)
811159c0:	10c00115 	stw	r3,4(r2)
811159c4:	a8c00217 	ldw	r3,8(r21)
811159c8:	10c00215 	stw	r3,8(r2)
811159cc:	003f6a06 	br	81115778 <__reset+0xfb0f5778>
811159d0:	9c67883a 	add	r19,r19,r17
811159d4:	4445c83a 	sub	r2,r8,r17
811159d8:	e4c00215 	stw	r19,8(fp)
811159dc:	10800054 	ori	r2,r2,1
811159e0:	98800115 	stw	r2,4(r19)
811159e4:	a8bfff17 	ldw	r2,-4(r21)
811159e8:	a009883a 	mov	r4,r20
811159ec:	1080004c 	andi	r2,r2,1
811159f0:	1462b03a 	or	r17,r2,r17
811159f4:	ac7fff15 	stw	r17,-4(r21)
811159f8:	111c1bc0 	call	8111c1bc <__malloc_unlock>
811159fc:	a805883a 	mov	r2,r21
81115a00:	003f6b06 	br	811157b0 <__reset+0xfb0f57b0>
81115a04:	a80b883a 	mov	r5,r21
81115a08:	9009883a 	mov	r4,r18
81115a0c:	11144880 	call	81114488 <memmove>
81115a10:	003f4e06 	br	8111574c <__reset+0xfb0f574c>
81115a14:	89000404 	addi	r4,r17,16
81115a18:	b93fbc16 	blt	r23,r4,8111590c <__reset+0xfb0f590c>
81115a1c:	b0800317 	ldw	r2,12(r22)
81115a20:	b0c00217 	ldw	r3,8(r22)
81115a24:	81bfff04 	addi	r6,r16,-4
81115a28:	01000904 	movi	r4,36
81115a2c:	18800315 	stw	r2,12(r3)
81115a30:	10c00215 	stw	r3,8(r2)
81115a34:	b4800204 	addi	r18,r22,8
81115a38:	21804336 	bltu	r4,r6,81115b48 <_realloc_r+0x508>
81115a3c:	008004c4 	movi	r2,19
81115a40:	11803f2e 	bgeu	r2,r6,81115b40 <_realloc_r+0x500>
81115a44:	a8800017 	ldw	r2,0(r21)
81115a48:	b0800215 	stw	r2,8(r22)
81115a4c:	a8800117 	ldw	r2,4(r21)
81115a50:	b0800315 	stw	r2,12(r22)
81115a54:	008006c4 	movi	r2,27
81115a58:	11803f36 	bltu	r2,r6,81115b58 <_realloc_r+0x518>
81115a5c:	b0800404 	addi	r2,r22,16
81115a60:	ad400204 	addi	r21,r21,8
81115a64:	a8c00017 	ldw	r3,0(r21)
81115a68:	10c00015 	stw	r3,0(r2)
81115a6c:	a8c00117 	ldw	r3,4(r21)
81115a70:	10c00115 	stw	r3,4(r2)
81115a74:	a8c00217 	ldw	r3,8(r21)
81115a78:	10c00215 	stw	r3,8(r2)
81115a7c:	b447883a 	add	r3,r22,r17
81115a80:	bc45c83a 	sub	r2,r23,r17
81115a84:	e0c00215 	stw	r3,8(fp)
81115a88:	10800054 	ori	r2,r2,1
81115a8c:	18800115 	stw	r2,4(r3)
81115a90:	b0800117 	ldw	r2,4(r22)
81115a94:	a009883a 	mov	r4,r20
81115a98:	1080004c 	andi	r2,r2,1
81115a9c:	1462b03a 	or	r17,r2,r17
81115aa0:	b4400115 	stw	r17,4(r22)
81115aa4:	111c1bc0 	call	8111c1bc <__malloc_unlock>
81115aa8:	9005883a 	mov	r2,r18
81115aac:	003f4006 	br	811157b0 <__reset+0xfb0f57b0>
81115ab0:	a8c00217 	ldw	r3,8(r21)
81115ab4:	90c00215 	stw	r3,8(r18)
81115ab8:	a8c00317 	ldw	r3,12(r21)
81115abc:	90c00315 	stw	r3,12(r18)
81115ac0:	30801126 	beq	r6,r2,81115b08 <_realloc_r+0x4c8>
81115ac4:	90800404 	addi	r2,r18,16
81115ac8:	a8c00404 	addi	r3,r21,16
81115acc:	003f1906 	br	81115734 <__reset+0xfb0f5734>
81115ad0:	90ffff17 	ldw	r3,-4(r18)
81115ad4:	00bfff04 	movi	r2,-4
81115ad8:	a825883a 	mov	r18,r21
81115adc:	1884703a 	and	r2,r3,r2
81115ae0:	80a1883a 	add	r16,r16,r2
81115ae4:	003f2406 	br	81115778 <__reset+0xfb0f5778>
81115ae8:	a8800217 	ldw	r2,8(r21)
81115aec:	b0800415 	stw	r2,16(r22)
81115af0:	a8800317 	ldw	r2,12(r21)
81115af4:	b0800515 	stw	r2,20(r22)
81115af8:	31000a26 	beq	r6,r4,81115b24 <_realloc_r+0x4e4>
81115afc:	b0800604 	addi	r2,r22,24
81115b00:	ad400404 	addi	r21,r21,16
81115b04:	003fa906 	br	811159ac <__reset+0xfb0f59ac>
81115b08:	a9000417 	ldw	r4,16(r21)
81115b0c:	90800604 	addi	r2,r18,24
81115b10:	a8c00604 	addi	r3,r21,24
81115b14:	91000415 	stw	r4,16(r18)
81115b18:	a9000517 	ldw	r4,20(r21)
81115b1c:	91000515 	stw	r4,20(r18)
81115b20:	003f0406 	br	81115734 <__reset+0xfb0f5734>
81115b24:	a8c00417 	ldw	r3,16(r21)
81115b28:	ad400604 	addi	r21,r21,24
81115b2c:	b0800804 	addi	r2,r22,32
81115b30:	b0c00615 	stw	r3,24(r22)
81115b34:	a8ffff17 	ldw	r3,-4(r21)
81115b38:	b0c00715 	stw	r3,28(r22)
81115b3c:	003f9b06 	br	811159ac <__reset+0xfb0f59ac>
81115b40:	9005883a 	mov	r2,r18
81115b44:	003fc706 	br	81115a64 <__reset+0xfb0f5a64>
81115b48:	a80b883a 	mov	r5,r21
81115b4c:	9009883a 	mov	r4,r18
81115b50:	11144880 	call	81114488 <memmove>
81115b54:	003fc906 	br	81115a7c <__reset+0xfb0f5a7c>
81115b58:	a8800217 	ldw	r2,8(r21)
81115b5c:	b0800415 	stw	r2,16(r22)
81115b60:	a8800317 	ldw	r2,12(r21)
81115b64:	b0800515 	stw	r2,20(r22)
81115b68:	31000726 	beq	r6,r4,81115b88 <_realloc_r+0x548>
81115b6c:	b0800604 	addi	r2,r22,24
81115b70:	ad400404 	addi	r21,r21,16
81115b74:	003fbb06 	br	81115a64 <__reset+0xfb0f5a64>
81115b78:	a009883a 	mov	r4,r20
81115b7c:	111c1bc0 	call	8111c1bc <__malloc_unlock>
81115b80:	0005883a 	mov	r2,zero
81115b84:	003f0a06 	br	811157b0 <__reset+0xfb0f57b0>
81115b88:	a8c00417 	ldw	r3,16(r21)
81115b8c:	ad400604 	addi	r21,r21,24
81115b90:	b0800804 	addi	r2,r22,32
81115b94:	b0c00615 	stw	r3,24(r22)
81115b98:	a8ffff17 	ldw	r3,-4(r21)
81115b9c:	b0c00715 	stw	r3,28(r22)
81115ba0:	003fb006 	br	81115a64 <__reset+0xfb0f5a64>

81115ba4 <__fpclassifyd>:
81115ba4:	00a00034 	movhi	r2,32768
81115ba8:	10bfffc4 	addi	r2,r2,-1
81115bac:	2884703a 	and	r2,r5,r2
81115bb0:	10000726 	beq	r2,zero,81115bd0 <__fpclassifyd+0x2c>
81115bb4:	00fffc34 	movhi	r3,65520
81115bb8:	019ff834 	movhi	r6,32736
81115bbc:	28c7883a 	add	r3,r5,r3
81115bc0:	31bfffc4 	addi	r6,r6,-1
81115bc4:	30c00536 	bltu	r6,r3,81115bdc <__fpclassifyd+0x38>
81115bc8:	00800104 	movi	r2,4
81115bcc:	f800283a 	ret
81115bd0:	2000021e 	bne	r4,zero,81115bdc <__fpclassifyd+0x38>
81115bd4:	00800084 	movi	r2,2
81115bd8:	f800283a 	ret
81115bdc:	00dffc34 	movhi	r3,32752
81115be0:	019ff834 	movhi	r6,32736
81115be4:	28cb883a 	add	r5,r5,r3
81115be8:	31bfffc4 	addi	r6,r6,-1
81115bec:	317ff62e 	bgeu	r6,r5,81115bc8 <__reset+0xfb0f5bc8>
81115bf0:	01400434 	movhi	r5,16
81115bf4:	297fffc4 	addi	r5,r5,-1
81115bf8:	28800236 	bltu	r5,r2,81115c04 <__fpclassifyd+0x60>
81115bfc:	008000c4 	movi	r2,3
81115c00:	f800283a 	ret
81115c04:	10c00226 	beq	r2,r3,81115c10 <__fpclassifyd+0x6c>
81115c08:	0005883a 	mov	r2,zero
81115c0c:	f800283a 	ret
81115c10:	2005003a 	cmpeq	r2,r4,zero
81115c14:	f800283a 	ret

81115c18 <strcmp>:
81115c18:	2144b03a 	or	r2,r4,r5
81115c1c:	108000cc 	andi	r2,r2,3
81115c20:	1000171e 	bne	r2,zero,81115c80 <strcmp+0x68>
81115c24:	20800017 	ldw	r2,0(r4)
81115c28:	28c00017 	ldw	r3,0(r5)
81115c2c:	10c0141e 	bne	r2,r3,81115c80 <strcmp+0x68>
81115c30:	027fbff4 	movhi	r9,65279
81115c34:	4a7fbfc4 	addi	r9,r9,-257
81115c38:	0086303a 	nor	r3,zero,r2
81115c3c:	02202074 	movhi	r8,32897
81115c40:	1245883a 	add	r2,r2,r9
81115c44:	42202004 	addi	r8,r8,-32640
81115c48:	10c4703a 	and	r2,r2,r3
81115c4c:	1204703a 	and	r2,r2,r8
81115c50:	10000226 	beq	r2,zero,81115c5c <strcmp+0x44>
81115c54:	00002306 	br	81115ce4 <strcmp+0xcc>
81115c58:	1000221e 	bne	r2,zero,81115ce4 <strcmp+0xcc>
81115c5c:	21000104 	addi	r4,r4,4
81115c60:	20c00017 	ldw	r3,0(r4)
81115c64:	29400104 	addi	r5,r5,4
81115c68:	29800017 	ldw	r6,0(r5)
81115c6c:	1a4f883a 	add	r7,r3,r9
81115c70:	00c4303a 	nor	r2,zero,r3
81115c74:	3884703a 	and	r2,r7,r2
81115c78:	1204703a 	and	r2,r2,r8
81115c7c:	19bff626 	beq	r3,r6,81115c58 <__reset+0xfb0f5c58>
81115c80:	20800003 	ldbu	r2,0(r4)
81115c84:	10c03fcc 	andi	r3,r2,255
81115c88:	18c0201c 	xori	r3,r3,128
81115c8c:	18ffe004 	addi	r3,r3,-128
81115c90:	18000c26 	beq	r3,zero,81115cc4 <strcmp+0xac>
81115c94:	29800007 	ldb	r6,0(r5)
81115c98:	19800326 	beq	r3,r6,81115ca8 <strcmp+0x90>
81115c9c:	00001306 	br	81115cec <strcmp+0xd4>
81115ca0:	29800007 	ldb	r6,0(r5)
81115ca4:	11800b1e 	bne	r2,r6,81115cd4 <strcmp+0xbc>
81115ca8:	21000044 	addi	r4,r4,1
81115cac:	20c00003 	ldbu	r3,0(r4)
81115cb0:	29400044 	addi	r5,r5,1
81115cb4:	18803fcc 	andi	r2,r3,255
81115cb8:	1080201c 	xori	r2,r2,128
81115cbc:	10bfe004 	addi	r2,r2,-128
81115cc0:	103ff71e 	bne	r2,zero,81115ca0 <__reset+0xfb0f5ca0>
81115cc4:	0007883a 	mov	r3,zero
81115cc8:	28800003 	ldbu	r2,0(r5)
81115ccc:	1885c83a 	sub	r2,r3,r2
81115cd0:	f800283a 	ret
81115cd4:	28800003 	ldbu	r2,0(r5)
81115cd8:	18c03fcc 	andi	r3,r3,255
81115cdc:	1885c83a 	sub	r2,r3,r2
81115ce0:	f800283a 	ret
81115ce4:	0005883a 	mov	r2,zero
81115ce8:	f800283a 	ret
81115cec:	10c03fcc 	andi	r3,r2,255
81115cf0:	003ff506 	br	81115cc8 <__reset+0xfb0f5cc8>

81115cf4 <strlen>:
81115cf4:	208000cc 	andi	r2,r4,3
81115cf8:	10002026 	beq	r2,zero,81115d7c <strlen+0x88>
81115cfc:	20800007 	ldb	r2,0(r4)
81115d00:	10002026 	beq	r2,zero,81115d84 <strlen+0x90>
81115d04:	2005883a 	mov	r2,r4
81115d08:	00000206 	br	81115d14 <strlen+0x20>
81115d0c:	10c00007 	ldb	r3,0(r2)
81115d10:	18001826 	beq	r3,zero,81115d74 <strlen+0x80>
81115d14:	10800044 	addi	r2,r2,1
81115d18:	10c000cc 	andi	r3,r2,3
81115d1c:	183ffb1e 	bne	r3,zero,81115d0c <__reset+0xfb0f5d0c>
81115d20:	10c00017 	ldw	r3,0(r2)
81115d24:	01ffbff4 	movhi	r7,65279
81115d28:	39ffbfc4 	addi	r7,r7,-257
81115d2c:	00ca303a 	nor	r5,zero,r3
81115d30:	01a02074 	movhi	r6,32897
81115d34:	19c7883a 	add	r3,r3,r7
81115d38:	31a02004 	addi	r6,r6,-32640
81115d3c:	1946703a 	and	r3,r3,r5
81115d40:	1986703a 	and	r3,r3,r6
81115d44:	1800091e 	bne	r3,zero,81115d6c <strlen+0x78>
81115d48:	10800104 	addi	r2,r2,4
81115d4c:	10c00017 	ldw	r3,0(r2)
81115d50:	19cb883a 	add	r5,r3,r7
81115d54:	00c6303a 	nor	r3,zero,r3
81115d58:	28c6703a 	and	r3,r5,r3
81115d5c:	1986703a 	and	r3,r3,r6
81115d60:	183ff926 	beq	r3,zero,81115d48 <__reset+0xfb0f5d48>
81115d64:	00000106 	br	81115d6c <strlen+0x78>
81115d68:	10800044 	addi	r2,r2,1
81115d6c:	10c00007 	ldb	r3,0(r2)
81115d70:	183ffd1e 	bne	r3,zero,81115d68 <__reset+0xfb0f5d68>
81115d74:	1105c83a 	sub	r2,r2,r4
81115d78:	f800283a 	ret
81115d7c:	2005883a 	mov	r2,r4
81115d80:	003fe706 	br	81115d20 <__reset+0xfb0f5d20>
81115d84:	0005883a 	mov	r2,zero
81115d88:	f800283a 	ret

81115d8c <__ssprint_r>:
81115d8c:	30800217 	ldw	r2,8(r6)
81115d90:	defff604 	addi	sp,sp,-40
81115d94:	dc800215 	stw	r18,8(sp)
81115d98:	dfc00915 	stw	ra,36(sp)
81115d9c:	df000815 	stw	fp,32(sp)
81115da0:	ddc00715 	stw	r23,28(sp)
81115da4:	dd800615 	stw	r22,24(sp)
81115da8:	dd400515 	stw	r21,20(sp)
81115dac:	dd000415 	stw	r20,16(sp)
81115db0:	dcc00315 	stw	r19,12(sp)
81115db4:	dc400115 	stw	r17,4(sp)
81115db8:	dc000015 	stw	r16,0(sp)
81115dbc:	3025883a 	mov	r18,r6
81115dc0:	10005826 	beq	r2,zero,81115f24 <__ssprint_r+0x198>
81115dc4:	2027883a 	mov	r19,r4
81115dc8:	35c00017 	ldw	r23,0(r6)
81115dcc:	29000017 	ldw	r4,0(r5)
81115dd0:	28800217 	ldw	r2,8(r5)
81115dd4:	2823883a 	mov	r17,r5
81115dd8:	0039883a 	mov	fp,zero
81115ddc:	0021883a 	mov	r16,zero
81115de0:	80003926 	beq	r16,zero,81115ec8 <__ssprint_r+0x13c>
81115de4:	102b883a 	mov	r21,r2
81115de8:	102d883a 	mov	r22,r2
81115dec:	80803a36 	bltu	r16,r2,81115ed8 <__ssprint_r+0x14c>
81115df0:	88c0030b 	ldhu	r3,12(r17)
81115df4:	1881200c 	andi	r2,r3,1152
81115df8:	10002626 	beq	r2,zero,81115e94 <__ssprint_r+0x108>
81115dfc:	88800517 	ldw	r2,20(r17)
81115e00:	89400417 	ldw	r5,16(r17)
81115e04:	81800044 	addi	r6,r16,1
81115e08:	108f883a 	add	r7,r2,r2
81115e0c:	3885883a 	add	r2,r7,r2
81115e10:	100ed7fa 	srli	r7,r2,31
81115e14:	216dc83a 	sub	r22,r4,r5
81115e18:	3589883a 	add	r4,r6,r22
81115e1c:	3885883a 	add	r2,r7,r2
81115e20:	102bd07a 	srai	r21,r2,1
81115e24:	a80d883a 	mov	r6,r21
81115e28:	a900022e 	bgeu	r21,r4,81115e34 <__ssprint_r+0xa8>
81115e2c:	202b883a 	mov	r21,r4
81115e30:	200d883a 	mov	r6,r4
81115e34:	18c1000c 	andi	r3,r3,1024
81115e38:	18002a26 	beq	r3,zero,81115ee4 <__ssprint_r+0x158>
81115e3c:	300b883a 	mov	r5,r6
81115e40:	9809883a 	mov	r4,r19
81115e44:	110c1c80 	call	8110c1c8 <_malloc_r>
81115e48:	1029883a 	mov	r20,r2
81115e4c:	10002c26 	beq	r2,zero,81115f00 <__ssprint_r+0x174>
81115e50:	89400417 	ldw	r5,16(r17)
81115e54:	b00d883a 	mov	r6,r22
81115e58:	1009883a 	mov	r4,r2
81115e5c:	110c9d40 	call	8110c9d4 <memcpy>
81115e60:	8880030b 	ldhu	r2,12(r17)
81115e64:	00fedfc4 	movi	r3,-1153
81115e68:	10c4703a 	and	r2,r2,r3
81115e6c:	10802014 	ori	r2,r2,128
81115e70:	8880030d 	sth	r2,12(r17)
81115e74:	a589883a 	add	r4,r20,r22
81115e78:	adadc83a 	sub	r22,r21,r22
81115e7c:	8d400515 	stw	r21,20(r17)
81115e80:	8d800215 	stw	r22,8(r17)
81115e84:	8d000415 	stw	r20,16(r17)
81115e88:	89000015 	stw	r4,0(r17)
81115e8c:	802b883a 	mov	r21,r16
81115e90:	802d883a 	mov	r22,r16
81115e94:	b00d883a 	mov	r6,r22
81115e98:	e00b883a 	mov	r5,fp
81115e9c:	11144880 	call	81114488 <memmove>
81115ea0:	88800217 	ldw	r2,8(r17)
81115ea4:	89000017 	ldw	r4,0(r17)
81115ea8:	90c00217 	ldw	r3,8(r18)
81115eac:	1545c83a 	sub	r2,r2,r21
81115eb0:	2589883a 	add	r4,r4,r22
81115eb4:	88800215 	stw	r2,8(r17)
81115eb8:	89000015 	stw	r4,0(r17)
81115ebc:	1c21c83a 	sub	r16,r3,r16
81115ec0:	94000215 	stw	r16,8(r18)
81115ec4:	80001726 	beq	r16,zero,81115f24 <__ssprint_r+0x198>
81115ec8:	bf000017 	ldw	fp,0(r23)
81115ecc:	bc000117 	ldw	r16,4(r23)
81115ed0:	bdc00204 	addi	r23,r23,8
81115ed4:	003fc206 	br	81115de0 <__reset+0xfb0f5de0>
81115ed8:	802b883a 	mov	r21,r16
81115edc:	802d883a 	mov	r22,r16
81115ee0:	003fec06 	br	81115e94 <__reset+0xfb0f5e94>
81115ee4:	9809883a 	mov	r4,r19
81115ee8:	11156400 	call	81115640 <_realloc_r>
81115eec:	1029883a 	mov	r20,r2
81115ef0:	103fe01e 	bne	r2,zero,81115e74 <__reset+0xfb0f5e74>
81115ef4:	89400417 	ldw	r5,16(r17)
81115ef8:	9809883a 	mov	r4,r19
81115efc:	11138c00 	call	811138c0 <_free_r>
81115f00:	88c0030b 	ldhu	r3,12(r17)
81115f04:	00800304 	movi	r2,12
81115f08:	98800015 	stw	r2,0(r19)
81115f0c:	18c01014 	ori	r3,r3,64
81115f10:	88c0030d 	sth	r3,12(r17)
81115f14:	00bfffc4 	movi	r2,-1
81115f18:	90000215 	stw	zero,8(r18)
81115f1c:	90000115 	stw	zero,4(r18)
81115f20:	00000206 	br	81115f2c <__ssprint_r+0x1a0>
81115f24:	90000115 	stw	zero,4(r18)
81115f28:	0005883a 	mov	r2,zero
81115f2c:	dfc00917 	ldw	ra,36(sp)
81115f30:	df000817 	ldw	fp,32(sp)
81115f34:	ddc00717 	ldw	r23,28(sp)
81115f38:	dd800617 	ldw	r22,24(sp)
81115f3c:	dd400517 	ldw	r21,20(sp)
81115f40:	dd000417 	ldw	r20,16(sp)
81115f44:	dcc00317 	ldw	r19,12(sp)
81115f48:	dc800217 	ldw	r18,8(sp)
81115f4c:	dc400117 	ldw	r17,4(sp)
81115f50:	dc000017 	ldw	r16,0(sp)
81115f54:	dec00a04 	addi	sp,sp,40
81115f58:	f800283a 	ret

81115f5c <___svfiprintf_internal_r>:
81115f5c:	2880030b 	ldhu	r2,12(r5)
81115f60:	deffc804 	addi	sp,sp,-224
81115f64:	dcc03115 	stw	r19,196(sp)
81115f68:	dfc03715 	stw	ra,220(sp)
81115f6c:	df003615 	stw	fp,216(sp)
81115f70:	ddc03515 	stw	r23,212(sp)
81115f74:	dd803415 	stw	r22,208(sp)
81115f78:	dd403315 	stw	r21,204(sp)
81115f7c:	dd003215 	stw	r20,200(sp)
81115f80:	dc803015 	stw	r18,192(sp)
81115f84:	dc402f15 	stw	r17,188(sp)
81115f88:	dc002e15 	stw	r16,184(sp)
81115f8c:	d9402715 	stw	r5,156(sp)
81115f90:	d9002a15 	stw	r4,168(sp)
81115f94:	1080200c 	andi	r2,r2,128
81115f98:	d9c02315 	stw	r7,140(sp)
81115f9c:	3027883a 	mov	r19,r6
81115fa0:	10000226 	beq	r2,zero,81115fac <___svfiprintf_internal_r+0x50>
81115fa4:	28800417 	ldw	r2,16(r5)
81115fa8:	10041d26 	beq	r2,zero,81117020 <___svfiprintf_internal_r+0x10c4>
81115fac:	dac01a04 	addi	r11,sp,104
81115fb0:	dac01e15 	stw	r11,120(sp)
81115fb4:	d8801e17 	ldw	r2,120(sp)
81115fb8:	dac019c4 	addi	r11,sp,103
81115fbc:	dd402a17 	ldw	r21,168(sp)
81115fc0:	ddc02717 	ldw	r23,156(sp)
81115fc4:	05a044b4 	movhi	r22,33042
81115fc8:	052044b4 	movhi	r20,33042
81115fcc:	dac01f15 	stw	r11,124(sp)
81115fd0:	12d7c83a 	sub	r11,r2,r11
81115fd4:	b5894104 	addi	r22,r22,9476
81115fd8:	a5093d04 	addi	r20,r20,9460
81115fdc:	dec01a15 	stw	sp,104(sp)
81115fe0:	d8001c15 	stw	zero,112(sp)
81115fe4:	d8001b15 	stw	zero,108(sp)
81115fe8:	d811883a 	mov	r8,sp
81115fec:	d8002915 	stw	zero,164(sp)
81115ff0:	d8002515 	stw	zero,148(sp)
81115ff4:	dac02b15 	stw	r11,172(sp)
81115ff8:	98800007 	ldb	r2,0(r19)
81115ffc:	1002dd26 	beq	r2,zero,81116b74 <___svfiprintf_internal_r+0xc18>
81116000:	00c00944 	movi	r3,37
81116004:	9823883a 	mov	r17,r19
81116008:	10c0021e 	bne	r2,r3,81116014 <___svfiprintf_internal_r+0xb8>
8111600c:	00001406 	br	81116060 <___svfiprintf_internal_r+0x104>
81116010:	10c00326 	beq	r2,r3,81116020 <___svfiprintf_internal_r+0xc4>
81116014:	8c400044 	addi	r17,r17,1
81116018:	88800007 	ldb	r2,0(r17)
8111601c:	103ffc1e 	bne	r2,zero,81116010 <__reset+0xfb0f6010>
81116020:	8ce1c83a 	sub	r16,r17,r19
81116024:	80000e26 	beq	r16,zero,81116060 <___svfiprintf_internal_r+0x104>
81116028:	d8c01c17 	ldw	r3,112(sp)
8111602c:	d8801b17 	ldw	r2,108(sp)
81116030:	44c00015 	stw	r19,0(r8)
81116034:	1c07883a 	add	r3,r3,r16
81116038:	10800044 	addi	r2,r2,1
8111603c:	d8c01c15 	stw	r3,112(sp)
81116040:	44000115 	stw	r16,4(r8)
81116044:	d8801b15 	stw	r2,108(sp)
81116048:	00c001c4 	movi	r3,7
8111604c:	18831e16 	blt	r3,r2,81116cc8 <___svfiprintf_internal_r+0xd6c>
81116050:	42000204 	addi	r8,r8,8
81116054:	dac02517 	ldw	r11,148(sp)
81116058:	5c17883a 	add	r11,r11,r16
8111605c:	dac02515 	stw	r11,148(sp)
81116060:	88800007 	ldb	r2,0(r17)
81116064:	1002c526 	beq	r2,zero,81116b7c <___svfiprintf_internal_r+0xc20>
81116068:	88c00047 	ldb	r3,1(r17)
8111606c:	8cc00044 	addi	r19,r17,1
81116070:	d8001d85 	stb	zero,118(sp)
81116074:	0009883a 	mov	r4,zero
81116078:	000f883a 	mov	r7,zero
8111607c:	043fffc4 	movi	r16,-1
81116080:	d8002415 	stw	zero,144(sp)
81116084:	0025883a 	mov	r18,zero
81116088:	01401604 	movi	r5,88
8111608c:	01800244 	movi	r6,9
81116090:	02800a84 	movi	r10,42
81116094:	02401b04 	movi	r9,108
81116098:	9cc00044 	addi	r19,r19,1
8111609c:	18bff804 	addi	r2,r3,-32
811160a0:	2881dd36 	bltu	r5,r2,81116818 <___svfiprintf_internal_r+0x8bc>
811160a4:	100490ba 	slli	r2,r2,2
811160a8:	02e04474 	movhi	r11,33041
811160ac:	5ad82f04 	addi	r11,r11,24764
811160b0:	12c5883a 	add	r2,r2,r11
811160b4:	10800017 	ldw	r2,0(r2)
811160b8:	1000683a 	jmp	r2
811160bc:	811162b8 	rdprs	r4,r16,17802
811160c0:	81116818 	cmpnei	r4,r16,17824
811160c4:	81116818 	cmpnei	r4,r16,17824
811160c8:	811162ac 	andhi	r4,r16,17802
811160cc:	81116818 	cmpnei	r4,r16,17824
811160d0:	81116818 	cmpnei	r4,r16,17824
811160d4:	81116818 	cmpnei	r4,r16,17824
811160d8:	81116818 	cmpnei	r4,r16,17824
811160dc:	81116818 	cmpnei	r4,r16,17824
811160e0:	81116818 	cmpnei	r4,r16,17824
811160e4:	81116220 	cmpeqi	r4,r16,17800
811160e8:	811163fc 	xorhi	r4,r16,17807
811160ec:	81116818 	cmpnei	r4,r16,17824
811160f0:	8111624c 	andi	r4,r16,17801
811160f4:	8111684c 	andi	r4,r16,17825
811160f8:	81116818 	cmpnei	r4,r16,17824
811160fc:	81116840 	call	88111684 <__reset+0x20f1684>
81116100:	811167e0 	cmpeqi	r4,r16,17823
81116104:	811167e0 	cmpeqi	r4,r16,17823
81116108:	811167e0 	cmpeqi	r4,r16,17823
8111610c:	811167e0 	cmpeqi	r4,r16,17823
81116110:	811167e0 	cmpeqi	r4,r16,17823
81116114:	811167e0 	cmpeqi	r4,r16,17823
81116118:	811167e0 	cmpeqi	r4,r16,17823
8111611c:	811167e0 	cmpeqi	r4,r16,17823
81116120:	811167e0 	cmpeqi	r4,r16,17823
81116124:	81116818 	cmpnei	r4,r16,17824
81116128:	81116818 	cmpnei	r4,r16,17824
8111612c:	81116818 	cmpnei	r4,r16,17824
81116130:	81116818 	cmpnei	r4,r16,17824
81116134:	81116818 	cmpnei	r4,r16,17824
81116138:	81116818 	cmpnei	r4,r16,17824
8111613c:	81116818 	cmpnei	r4,r16,17824
81116140:	81116818 	cmpnei	r4,r16,17824
81116144:	81116818 	cmpnei	r4,r16,17824
81116148:	81116818 	cmpnei	r4,r16,17824
8111614c:	8111677c 	xorhi	r4,r16,17821
81116150:	81116818 	cmpnei	r4,r16,17824
81116154:	81116818 	cmpnei	r4,r16,17824
81116158:	81116818 	cmpnei	r4,r16,17824
8111615c:	81116818 	cmpnei	r4,r16,17824
81116160:	81116818 	cmpnei	r4,r16,17824
81116164:	81116818 	cmpnei	r4,r16,17824
81116168:	81116818 	cmpnei	r4,r16,17824
8111616c:	81116818 	cmpnei	r4,r16,17824
81116170:	81116818 	cmpnei	r4,r16,17824
81116174:	81116818 	cmpnei	r4,r16,17824
81116178:	811168f4 	orhi	r4,r16,17827
8111617c:	81116818 	cmpnei	r4,r16,17824
81116180:	81116818 	cmpnei	r4,r16,17824
81116184:	81116818 	cmpnei	r4,r16,17824
81116188:	81116818 	cmpnei	r4,r16,17824
8111618c:	81116818 	cmpnei	r4,r16,17824
81116190:	8111688c 	andi	r4,r16,17826
81116194:	81116818 	cmpnei	r4,r16,17824
81116198:	81116818 	cmpnei	r4,r16,17824
8111619c:	811165c0 	call	8811165c <__reset+0x20f165c>
811161a0:	81116818 	cmpnei	r4,r16,17824
811161a4:	81116818 	cmpnei	r4,r16,17824
811161a8:	81116818 	cmpnei	r4,r16,17824
811161ac:	81116818 	cmpnei	r4,r16,17824
811161b0:	81116818 	cmpnei	r4,r16,17824
811161b4:	81116818 	cmpnei	r4,r16,17824
811161b8:	81116818 	cmpnei	r4,r16,17824
811161bc:	81116818 	cmpnei	r4,r16,17824
811161c0:	81116818 	cmpnei	r4,r16,17824
811161c4:	81116818 	cmpnei	r4,r16,17824
811161c8:	811164b0 	cmpltui	r4,r16,17810
811161cc:	8111665c 	xori	r4,r16,17817
811161d0:	81116818 	cmpnei	r4,r16,17824
811161d4:	81116818 	cmpnei	r4,r16,17824
811161d8:	81116818 	cmpnei	r4,r16,17824
811161dc:	81116650 	cmplti	r4,r16,17817
811161e0:	8111665c 	xori	r4,r16,17817
811161e4:	81116818 	cmpnei	r4,r16,17824
811161e8:	81116818 	cmpnei	r4,r16,17824
811161ec:	81116640 	call	88111664 <__reset+0x20f1664>
811161f0:	81116818 	cmpnei	r4,r16,17824
811161f4:	81116604 	addi	r4,r16,17816
811161f8:	8111640c 	andi	r4,r16,17808
811161fc:	81116258 	cmpnei	r4,r16,17801
81116200:	81116770 	cmpltui	r4,r16,17821
81116204:	81116818 	cmpnei	r4,r16,17824
81116208:	81116724 	muli	r4,r16,17820
8111620c:	81116818 	cmpnei	r4,r16,17824
81116210:	8111637c 	xorhi	r4,r16,17805
81116214:	81116818 	cmpnei	r4,r16,17824
81116218:	81116818 	cmpnei	r4,r16,17824
8111621c:	811162d8 	cmpnei	r4,r16,17803
81116220:	dac02317 	ldw	r11,140(sp)
81116224:	5ac00017 	ldw	r11,0(r11)
81116228:	dac02415 	stw	r11,144(sp)
8111622c:	dac02317 	ldw	r11,140(sp)
81116230:	58800104 	addi	r2,r11,4
81116234:	dac02417 	ldw	r11,144(sp)
81116238:	5802e90e 	bge	r11,zero,81116de0 <___svfiprintf_internal_r+0xe84>
8111623c:	dac02417 	ldw	r11,144(sp)
81116240:	d8802315 	stw	r2,140(sp)
81116244:	02d7c83a 	sub	r11,zero,r11
81116248:	dac02415 	stw	r11,144(sp)
8111624c:	94800114 	ori	r18,r18,4
81116250:	98c00007 	ldb	r3,0(r19)
81116254:	003f9006 	br	81116098 <__reset+0xfb0f6098>
81116258:	00800c04 	movi	r2,48
8111625c:	dac02317 	ldw	r11,140(sp)
81116260:	d8801d05 	stb	r2,116(sp)
81116264:	00801e04 	movi	r2,120
81116268:	d8801d45 	stb	r2,117(sp)
8111626c:	d8001d85 	stb	zero,118(sp)
81116270:	58c00104 	addi	r3,r11,4
81116274:	5f000017 	ldw	fp,0(r11)
81116278:	0013883a 	mov	r9,zero
8111627c:	90800094 	ori	r2,r18,2
81116280:	80032b16 	blt	r16,zero,81116f30 <___svfiprintf_internal_r+0xfd4>
81116284:	00bfdfc4 	movi	r2,-129
81116288:	90a4703a 	and	r18,r18,r2
8111628c:	d8c02315 	stw	r3,140(sp)
81116290:	94800094 	ori	r18,r18,2
81116294:	e002dc26 	beq	fp,zero,81116e08 <___svfiprintf_internal_r+0xeac>
81116298:	012044b4 	movhi	r4,33042
8111629c:	2108d504 	addi	r4,r4,9044
811162a0:	0015883a 	mov	r10,zero
811162a4:	d9002915 	stw	r4,164(sp)
811162a8:	00002306 	br	81116338 <___svfiprintf_internal_r+0x3dc>
811162ac:	94800054 	ori	r18,r18,1
811162b0:	98c00007 	ldb	r3,0(r19)
811162b4:	003f7806 	br	81116098 <__reset+0xfb0f6098>
811162b8:	38803fcc 	andi	r2,r7,255
811162bc:	1080201c 	xori	r2,r2,128
811162c0:	10bfe004 	addi	r2,r2,-128
811162c4:	1002f31e 	bne	r2,zero,81116e94 <___svfiprintf_internal_r+0xf38>
811162c8:	01000044 	movi	r4,1
811162cc:	01c00804 	movi	r7,32
811162d0:	98c00007 	ldb	r3,0(r19)
811162d4:	003f7006 	br	81116098 <__reset+0xfb0f6098>
811162d8:	21003fcc 	andi	r4,r4,255
811162dc:	2003aa1e 	bne	r4,zero,81117188 <___svfiprintf_internal_r+0x122c>
811162e0:	00a044b4 	movhi	r2,33042
811162e4:	1088d504 	addi	r2,r2,9044
811162e8:	d8802915 	stw	r2,164(sp)
811162ec:	9080080c 	andi	r2,r18,32
811162f0:	1000ba26 	beq	r2,zero,811165dc <___svfiprintf_internal_r+0x680>
811162f4:	dac02317 	ldw	r11,140(sp)
811162f8:	5f000017 	ldw	fp,0(r11)
811162fc:	5a400117 	ldw	r9,4(r11)
81116300:	5ac00204 	addi	r11,r11,8
81116304:	dac02315 	stw	r11,140(sp)
81116308:	9080004c 	andi	r2,r18,1
8111630c:	10029026 	beq	r2,zero,81116d50 <___svfiprintf_internal_r+0xdf4>
81116310:	e244b03a 	or	r2,fp,r9
81116314:	1002d41e 	bne	r2,zero,81116e68 <___svfiprintf_internal_r+0xf0c>
81116318:	d8001d85 	stb	zero,118(sp)
8111631c:	80030b16 	blt	r16,zero,81116f4c <___svfiprintf_internal_r+0xff0>
81116320:	00bfdfc4 	movi	r2,-129
81116324:	90a4703a 	and	r18,r18,r2
81116328:	0015883a 	mov	r10,zero
8111632c:	80002426 	beq	r16,zero,811163c0 <___svfiprintf_internal_r+0x464>
81116330:	0039883a 	mov	fp,zero
81116334:	0013883a 	mov	r9,zero
81116338:	d9002917 	ldw	r4,164(sp)
8111633c:	dc401a04 	addi	r17,sp,104
81116340:	e08003cc 	andi	r2,fp,15
81116344:	4806973a 	slli	r3,r9,28
81116348:	2085883a 	add	r2,r4,r2
8111634c:	e038d13a 	srli	fp,fp,4
81116350:	10800003 	ldbu	r2,0(r2)
81116354:	4812d13a 	srli	r9,r9,4
81116358:	8c7fffc4 	addi	r17,r17,-1
8111635c:	1f38b03a 	or	fp,r3,fp
81116360:	88800005 	stb	r2,0(r17)
81116364:	e244b03a 	or	r2,fp,r9
81116368:	103ff51e 	bne	r2,zero,81116340 <__reset+0xfb0f6340>
8111636c:	dac01e17 	ldw	r11,120(sp)
81116370:	5c57c83a 	sub	r11,r11,r17
81116374:	dac02115 	stw	r11,132(sp)
81116378:	00001406 	br	811163cc <___svfiprintf_internal_r+0x470>
8111637c:	21003fcc 	andi	r4,r4,255
81116380:	2003741e 	bne	r4,zero,81117154 <___svfiprintf_internal_r+0x11f8>
81116384:	9080080c 	andi	r2,r18,32
81116388:	10014526 	beq	r2,zero,811168a0 <___svfiprintf_internal_r+0x944>
8111638c:	dac02317 	ldw	r11,140(sp)
81116390:	d8001d85 	stb	zero,118(sp)
81116394:	58c00204 	addi	r3,r11,8
81116398:	5f000017 	ldw	fp,0(r11)
8111639c:	5a400117 	ldw	r9,4(r11)
811163a0:	8002d916 	blt	r16,zero,81116f08 <___svfiprintf_internal_r+0xfac>
811163a4:	013fdfc4 	movi	r4,-129
811163a8:	e244b03a 	or	r2,fp,r9
811163ac:	d8c02315 	stw	r3,140(sp)
811163b0:	9124703a 	and	r18,r18,r4
811163b4:	0015883a 	mov	r10,zero
811163b8:	1000b91e 	bne	r2,zero,811166a0 <___svfiprintf_internal_r+0x744>
811163bc:	8002e61e 	bne	r16,zero,81116f58 <___svfiprintf_internal_r+0xffc>
811163c0:	0021883a 	mov	r16,zero
811163c4:	d8002115 	stw	zero,132(sp)
811163c8:	dc401a04 	addi	r17,sp,104
811163cc:	d8c02117 	ldw	r3,132(sp)
811163d0:	dc002015 	stw	r16,128(sp)
811163d4:	80c0010e 	bge	r16,r3,811163dc <___svfiprintf_internal_r+0x480>
811163d8:	d8c02015 	stw	r3,128(sp)
811163dc:	52803fcc 	andi	r10,r10,255
811163e0:	5280201c 	xori	r10,r10,128
811163e4:	52bfe004 	addi	r10,r10,-128
811163e8:	50003c26 	beq	r10,zero,811164dc <___svfiprintf_internal_r+0x580>
811163ec:	dac02017 	ldw	r11,128(sp)
811163f0:	5ac00044 	addi	r11,r11,1
811163f4:	dac02015 	stw	r11,128(sp)
811163f8:	00003806 	br	811164dc <___svfiprintf_internal_r+0x580>
811163fc:	01000044 	movi	r4,1
81116400:	01c00ac4 	movi	r7,43
81116404:	98c00007 	ldb	r3,0(r19)
81116408:	003f2306 	br	81116098 <__reset+0xfb0f6098>
8111640c:	21003fcc 	andi	r4,r4,255
81116410:	2003481e 	bne	r4,zero,81117134 <___svfiprintf_internal_r+0x11d8>
81116414:	9080080c 	andi	r2,r18,32
81116418:	10013b26 	beq	r2,zero,81116908 <___svfiprintf_internal_r+0x9ac>
8111641c:	dac02317 	ldw	r11,140(sp)
81116420:	d8001d85 	stb	zero,118(sp)
81116424:	58800204 	addi	r2,r11,8
81116428:	5f000017 	ldw	fp,0(r11)
8111642c:	5a400117 	ldw	r9,4(r11)
81116430:	8002a816 	blt	r16,zero,81116ed4 <___svfiprintf_internal_r+0xf78>
81116434:	013fdfc4 	movi	r4,-129
81116438:	e246b03a 	or	r3,fp,r9
8111643c:	d8802315 	stw	r2,140(sp)
81116440:	9124703a 	and	r18,r18,r4
81116444:	18013c26 	beq	r3,zero,81116938 <___svfiprintf_internal_r+0x9dc>
81116448:	0015883a 	mov	r10,zero
8111644c:	dc401a04 	addi	r17,sp,104
81116450:	e006d0fa 	srli	r3,fp,3
81116454:	4808977a 	slli	r4,r9,29
81116458:	4812d0fa 	srli	r9,r9,3
8111645c:	e70001cc 	andi	fp,fp,7
81116460:	e0800c04 	addi	r2,fp,48
81116464:	8c7fffc4 	addi	r17,r17,-1
81116468:	20f8b03a 	or	fp,r4,r3
8111646c:	88800005 	stb	r2,0(r17)
81116470:	e246b03a 	or	r3,fp,r9
81116474:	183ff61e 	bne	r3,zero,81116450 <__reset+0xfb0f6450>
81116478:	90c0004c 	andi	r3,r18,1
8111647c:	1800a526 	beq	r3,zero,81116714 <___svfiprintf_internal_r+0x7b8>
81116480:	10803fcc 	andi	r2,r2,255
81116484:	1080201c 	xori	r2,r2,128
81116488:	10bfe004 	addi	r2,r2,-128
8111648c:	00c00c04 	movi	r3,48
81116490:	10ffb626 	beq	r2,r3,8111636c <__reset+0xfb0f636c>
81116494:	88ffffc5 	stb	r3,-1(r17)
81116498:	d8c01e17 	ldw	r3,120(sp)
8111649c:	88bfffc4 	addi	r2,r17,-1
811164a0:	1023883a 	mov	r17,r2
811164a4:	1887c83a 	sub	r3,r3,r2
811164a8:	d8c02115 	stw	r3,132(sp)
811164ac:	003fc706 	br	811163cc <__reset+0xfb0f63cc>
811164b0:	dac02317 	ldw	r11,140(sp)
811164b4:	00c00044 	movi	r3,1
811164b8:	d8c02015 	stw	r3,128(sp)
811164bc:	58800017 	ldw	r2,0(r11)
811164c0:	5ac00104 	addi	r11,r11,4
811164c4:	d8001d85 	stb	zero,118(sp)
811164c8:	d8801005 	stb	r2,64(sp)
811164cc:	dac02315 	stw	r11,140(sp)
811164d0:	d8c02115 	stw	r3,132(sp)
811164d4:	dc401004 	addi	r17,sp,64
811164d8:	0021883a 	mov	r16,zero
811164dc:	90c0008c 	andi	r3,r18,2
811164e0:	d8c02215 	stw	r3,136(sp)
811164e4:	18000326 	beq	r3,zero,811164f4 <___svfiprintf_internal_r+0x598>
811164e8:	dac02017 	ldw	r11,128(sp)
811164ec:	5ac00084 	addi	r11,r11,2
811164f0:	dac02015 	stw	r11,128(sp)
811164f4:	90c0210c 	andi	r3,r18,132
811164f8:	d8c02615 	stw	r3,152(sp)
811164fc:	1801131e 	bne	r3,zero,8111694c <___svfiprintf_internal_r+0x9f0>
81116500:	dac02417 	ldw	r11,144(sp)
81116504:	d8c02017 	ldw	r3,128(sp)
81116508:	58f9c83a 	sub	fp,r11,r3
8111650c:	07010f0e 	bge	zero,fp,8111694c <___svfiprintf_internal_r+0x9f0>
81116510:	02400404 	movi	r9,16
81116514:	d8c01c17 	ldw	r3,112(sp)
81116518:	d8801b17 	ldw	r2,108(sp)
8111651c:	4f02d60e 	bge	r9,fp,81117078 <___svfiprintf_internal_r+0x111c>
81116520:	016044b4 	movhi	r5,33042
81116524:	29494104 	addi	r5,r5,9476
81116528:	d9402815 	stw	r5,160(sp)
8111652c:	028001c4 	movi	r10,7
81116530:	00000306 	br	81116540 <___svfiprintf_internal_r+0x5e4>
81116534:	e73ffc04 	addi	fp,fp,-16
81116538:	42000204 	addi	r8,r8,8
8111653c:	4f00150e 	bge	r9,fp,81116594 <___svfiprintf_internal_r+0x638>
81116540:	18c00404 	addi	r3,r3,16
81116544:	10800044 	addi	r2,r2,1
81116548:	45800015 	stw	r22,0(r8)
8111654c:	42400115 	stw	r9,4(r8)
81116550:	d8c01c15 	stw	r3,112(sp)
81116554:	d8801b15 	stw	r2,108(sp)
81116558:	50bff60e 	bge	r10,r2,81116534 <__reset+0xfb0f6534>
8111655c:	d9801a04 	addi	r6,sp,104
81116560:	b80b883a 	mov	r5,r23
81116564:	a809883a 	mov	r4,r21
81116568:	da402c15 	stw	r9,176(sp)
8111656c:	da802d15 	stw	r10,180(sp)
81116570:	1115d8c0 	call	81115d8c <__ssprint_r>
81116574:	da402c17 	ldw	r9,176(sp)
81116578:	da802d17 	ldw	r10,180(sp)
8111657c:	1001851e 	bne	r2,zero,81116b94 <___svfiprintf_internal_r+0xc38>
81116580:	e73ffc04 	addi	fp,fp,-16
81116584:	d8c01c17 	ldw	r3,112(sp)
81116588:	d8801b17 	ldw	r2,108(sp)
8111658c:	d811883a 	mov	r8,sp
81116590:	4f3feb16 	blt	r9,fp,81116540 <__reset+0xfb0f6540>
81116594:	dac02817 	ldw	r11,160(sp)
81116598:	e0c7883a 	add	r3,fp,r3
8111659c:	10800044 	addi	r2,r2,1
811165a0:	42c00015 	stw	r11,0(r8)
811165a4:	47000115 	stw	fp,4(r8)
811165a8:	d8c01c15 	stw	r3,112(sp)
811165ac:	d8801b15 	stw	r2,108(sp)
811165b0:	010001c4 	movi	r4,7
811165b4:	2081ee16 	blt	r4,r2,81116d70 <___svfiprintf_internal_r+0xe14>
811165b8:	42000204 	addi	r8,r8,8
811165bc:	0000e506 	br	81116954 <___svfiprintf_internal_r+0x9f8>
811165c0:	21003fcc 	andi	r4,r4,255
811165c4:	2002dd1e 	bne	r4,zero,8111713c <___svfiprintf_internal_r+0x11e0>
811165c8:	00a044b4 	movhi	r2,33042
811165cc:	1088d004 	addi	r2,r2,9024
811165d0:	d8802915 	stw	r2,164(sp)
811165d4:	9080080c 	andi	r2,r18,32
811165d8:	103f461e 	bne	r2,zero,811162f4 <__reset+0xfb0f62f4>
811165dc:	9080040c 	andi	r2,r18,16
811165e0:	10022e1e 	bne	r2,zero,81116e9c <___svfiprintf_internal_r+0xf40>
811165e4:	9080100c 	andi	r2,r18,64
811165e8:	dac02317 	ldw	r11,140(sp)
811165ec:	10027326 	beq	r2,zero,81116fbc <___svfiprintf_internal_r+0x1060>
811165f0:	5f00000b 	ldhu	fp,0(r11)
811165f4:	5ac00104 	addi	r11,r11,4
811165f8:	0013883a 	mov	r9,zero
811165fc:	dac02315 	stw	r11,140(sp)
81116600:	003f4106 	br	81116308 <__reset+0xfb0f6308>
81116604:	21003fcc 	andi	r4,r4,255
81116608:	2002e11e 	bne	r4,zero,81117190 <___svfiprintf_internal_r+0x1234>
8111660c:	9080080c 	andi	r2,r18,32
81116610:	1002011e 	bne	r2,zero,81116e18 <___svfiprintf_internal_r+0xebc>
81116614:	9080040c 	andi	r2,r18,16
81116618:	10023e1e 	bne	r2,zero,81116f14 <___svfiprintf_internal_r+0xfb8>
8111661c:	9480100c 	andi	r18,r18,64
81116620:	90023c26 	beq	r18,zero,81116f14 <___svfiprintf_internal_r+0xfb8>
81116624:	dac02317 	ldw	r11,140(sp)
81116628:	58800017 	ldw	r2,0(r11)
8111662c:	5ac00104 	addi	r11,r11,4
81116630:	dac02315 	stw	r11,140(sp)
81116634:	dac02517 	ldw	r11,148(sp)
81116638:	12c0000d 	sth	r11,0(r2)
8111663c:	003e6e06 	br	81115ff8 <__reset+0xfb0f5ff8>
81116640:	98c00007 	ldb	r3,0(r19)
81116644:	1a422926 	beq	r3,r9,81116eec <___svfiprintf_internal_r+0xf90>
81116648:	94800414 	ori	r18,r18,16
8111664c:	003e9206 	br	81116098 <__reset+0xfb0f6098>
81116650:	94801014 	ori	r18,r18,64
81116654:	98c00007 	ldb	r3,0(r19)
81116658:	003e8f06 	br	81116098 <__reset+0xfb0f6098>
8111665c:	21003fcc 	andi	r4,r4,255
81116660:	2002c71e 	bne	r4,zero,81117180 <___svfiprintf_internal_r+0x1224>
81116664:	9080080c 	andi	r2,r18,32
81116668:	10004926 	beq	r2,zero,81116790 <___svfiprintf_internal_r+0x834>
8111666c:	dac02317 	ldw	r11,140(sp)
81116670:	58800117 	ldw	r2,4(r11)
81116674:	5f000017 	ldw	fp,0(r11)
81116678:	5ac00204 	addi	r11,r11,8
8111667c:	dac02315 	stw	r11,140(sp)
81116680:	1013883a 	mov	r9,r2
81116684:	10004b16 	blt	r2,zero,811167b4 <___svfiprintf_internal_r+0x858>
81116688:	da801d83 	ldbu	r10,118(sp)
8111668c:	8001cb16 	blt	r16,zero,81116dbc <___svfiprintf_internal_r+0xe60>
81116690:	00ffdfc4 	movi	r3,-129
81116694:	e244b03a 	or	r2,fp,r9
81116698:	90e4703a 	and	r18,r18,r3
8111669c:	103f4726 	beq	r2,zero,811163bc <__reset+0xfb0f63bc>
811166a0:	48008c26 	beq	r9,zero,811168d4 <___svfiprintf_internal_r+0x978>
811166a4:	dc802015 	stw	r18,128(sp)
811166a8:	dc002115 	stw	r16,132(sp)
811166ac:	dc401a04 	addi	r17,sp,104
811166b0:	e021883a 	mov	r16,fp
811166b4:	da002215 	stw	r8,136(sp)
811166b8:	5039883a 	mov	fp,r10
811166bc:	4825883a 	mov	r18,r9
811166c0:	8009883a 	mov	r4,r16
811166c4:	900b883a 	mov	r5,r18
811166c8:	01800284 	movi	r6,10
811166cc:	000f883a 	mov	r7,zero
811166d0:	11194680 	call	81119468 <__umoddi3>
811166d4:	10800c04 	addi	r2,r2,48
811166d8:	8c7fffc4 	addi	r17,r17,-1
811166dc:	8009883a 	mov	r4,r16
811166e0:	900b883a 	mov	r5,r18
811166e4:	88800005 	stb	r2,0(r17)
811166e8:	01800284 	movi	r6,10
811166ec:	000f883a 	mov	r7,zero
811166f0:	1118ef00 	call	81118ef0 <__udivdi3>
811166f4:	1021883a 	mov	r16,r2
811166f8:	10c4b03a 	or	r2,r2,r3
811166fc:	1825883a 	mov	r18,r3
81116700:	103fef1e 	bne	r2,zero,811166c0 <__reset+0xfb0f66c0>
81116704:	dc802017 	ldw	r18,128(sp)
81116708:	dc002117 	ldw	r16,132(sp)
8111670c:	da002217 	ldw	r8,136(sp)
81116710:	e015883a 	mov	r10,fp
81116714:	d8c01e17 	ldw	r3,120(sp)
81116718:	1c47c83a 	sub	r3,r3,r17
8111671c:	d8c02115 	stw	r3,132(sp)
81116720:	003f2a06 	br	811163cc <__reset+0xfb0f63cc>
81116724:	dac02317 	ldw	r11,140(sp)
81116728:	d8001d85 	stb	zero,118(sp)
8111672c:	5c400017 	ldw	r17,0(r11)
81116730:	5f000104 	addi	fp,r11,4
81116734:	88022f26 	beq	r17,zero,81116ff4 <___svfiprintf_internal_r+0x1098>
81116738:	80022516 	blt	r16,zero,81116fd0 <___svfiprintf_internal_r+0x1074>
8111673c:	800d883a 	mov	r6,r16
81116740:	000b883a 	mov	r5,zero
81116744:	8809883a 	mov	r4,r17
81116748:	da002c15 	stw	r8,176(sp)
8111674c:	11143a40 	call	811143a4 <memchr>
81116750:	da002c17 	ldw	r8,176(sp)
81116754:	10026426 	beq	r2,zero,811170e8 <___svfiprintf_internal_r+0x118c>
81116758:	1445c83a 	sub	r2,r2,r17
8111675c:	d8802115 	stw	r2,132(sp)
81116760:	da801d83 	ldbu	r10,118(sp)
81116764:	df002315 	stw	fp,140(sp)
81116768:	0021883a 	mov	r16,zero
8111676c:	003f1706 	br	811163cc <__reset+0xfb0f63cc>
81116770:	94800814 	ori	r18,r18,32
81116774:	98c00007 	ldb	r3,0(r19)
81116778:	003e4706 	br	81116098 <__reset+0xfb0f6098>
8111677c:	21003fcc 	andi	r4,r4,255
81116780:	2002701e 	bne	r4,zero,81117144 <___svfiprintf_internal_r+0x11e8>
81116784:	94800414 	ori	r18,r18,16
81116788:	9080080c 	andi	r2,r18,32
8111678c:	103fb71e 	bne	r2,zero,8111666c <__reset+0xfb0f666c>
81116790:	9080040c 	andi	r2,r18,16
81116794:	1001ab26 	beq	r2,zero,81116e44 <___svfiprintf_internal_r+0xee8>
81116798:	dac02317 	ldw	r11,140(sp)
8111679c:	5f000017 	ldw	fp,0(r11)
811167a0:	5ac00104 	addi	r11,r11,4
811167a4:	dac02315 	stw	r11,140(sp)
811167a8:	e013d7fa 	srai	r9,fp,31
811167ac:	4805883a 	mov	r2,r9
811167b0:	103fb50e 	bge	r2,zero,81116688 <__reset+0xfb0f6688>
811167b4:	0739c83a 	sub	fp,zero,fp
811167b8:	02800b44 	movi	r10,45
811167bc:	e004c03a 	cmpne	r2,fp,zero
811167c0:	0253c83a 	sub	r9,zero,r9
811167c4:	da801d85 	stb	r10,118(sp)
811167c8:	4893c83a 	sub	r9,r9,r2
811167cc:	80023016 	blt	r16,zero,81117090 <___svfiprintf_internal_r+0x1134>
811167d0:	00bfdfc4 	movi	r2,-129
811167d4:	90a4703a 	and	r18,r18,r2
811167d8:	483fb21e 	bne	r9,zero,811166a4 <__reset+0xfb0f66a4>
811167dc:	00003d06 	br	811168d4 <___svfiprintf_internal_r+0x978>
811167e0:	9817883a 	mov	r11,r19
811167e4:	d8002415 	stw	zero,144(sp)
811167e8:	18bff404 	addi	r2,r3,-48
811167ec:	0019883a 	mov	r12,zero
811167f0:	58c00007 	ldb	r3,0(r11)
811167f4:	630002a4 	muli	r12,r12,10
811167f8:	9cc00044 	addi	r19,r19,1
811167fc:	9817883a 	mov	r11,r19
81116800:	1319883a 	add	r12,r2,r12
81116804:	18bff404 	addi	r2,r3,-48
81116808:	30bff92e 	bgeu	r6,r2,811167f0 <__reset+0xfb0f67f0>
8111680c:	db002415 	stw	r12,144(sp)
81116810:	18bff804 	addi	r2,r3,-32
81116814:	28be232e 	bgeu	r5,r2,811160a4 <__reset+0xfb0f60a4>
81116818:	21003fcc 	andi	r4,r4,255
8111681c:	20024b1e 	bne	r4,zero,8111714c <___svfiprintf_internal_r+0x11f0>
81116820:	1800d626 	beq	r3,zero,81116b7c <___svfiprintf_internal_r+0xc20>
81116824:	02c00044 	movi	r11,1
81116828:	dac02015 	stw	r11,128(sp)
8111682c:	d8c01005 	stb	r3,64(sp)
81116830:	d8001d85 	stb	zero,118(sp)
81116834:	dac02115 	stw	r11,132(sp)
81116838:	dc401004 	addi	r17,sp,64
8111683c:	003f2606 	br	811164d8 <__reset+0xfb0f64d8>
81116840:	94802014 	ori	r18,r18,128
81116844:	98c00007 	ldb	r3,0(r19)
81116848:	003e1306 	br	81116098 <__reset+0xfb0f6098>
8111684c:	98c00007 	ldb	r3,0(r19)
81116850:	9ac00044 	addi	r11,r19,1
81116854:	1a822b26 	beq	r3,r10,81117104 <___svfiprintf_internal_r+0x11a8>
81116858:	18bff404 	addi	r2,r3,-48
8111685c:	0021883a 	mov	r16,zero
81116860:	30821e36 	bltu	r6,r2,811170dc <___svfiprintf_internal_r+0x1180>
81116864:	58c00007 	ldb	r3,0(r11)
81116868:	840002a4 	muli	r16,r16,10
8111686c:	5cc00044 	addi	r19,r11,1
81116870:	9817883a 	mov	r11,r19
81116874:	80a1883a 	add	r16,r16,r2
81116878:	18bff404 	addi	r2,r3,-48
8111687c:	30bff92e 	bgeu	r6,r2,81116864 <__reset+0xfb0f6864>
81116880:	803e060e 	bge	r16,zero,8111609c <__reset+0xfb0f609c>
81116884:	043fffc4 	movi	r16,-1
81116888:	003e0406 	br	8111609c <__reset+0xfb0f609c>
8111688c:	21003fcc 	andi	r4,r4,255
81116890:	2002371e 	bne	r4,zero,81117170 <___svfiprintf_internal_r+0x1214>
81116894:	94800414 	ori	r18,r18,16
81116898:	9080080c 	andi	r2,r18,32
8111689c:	103ebb1e 	bne	r2,zero,8111638c <__reset+0xfb0f638c>
811168a0:	9080040c 	andi	r2,r18,16
811168a4:	10013b26 	beq	r2,zero,81116d94 <___svfiprintf_internal_r+0xe38>
811168a8:	dac02317 	ldw	r11,140(sp)
811168ac:	d8001d85 	stb	zero,118(sp)
811168b0:	0013883a 	mov	r9,zero
811168b4:	58800104 	addi	r2,r11,4
811168b8:	5f000017 	ldw	fp,0(r11)
811168bc:	80013d16 	blt	r16,zero,81116db4 <___svfiprintf_internal_r+0xe58>
811168c0:	00ffdfc4 	movi	r3,-129
811168c4:	d8802315 	stw	r2,140(sp)
811168c8:	90e4703a 	and	r18,r18,r3
811168cc:	0015883a 	mov	r10,zero
811168d0:	e03eba26 	beq	fp,zero,811163bc <__reset+0xfb0f63bc>
811168d4:	00800244 	movi	r2,9
811168d8:	173f7236 	bltu	r2,fp,811166a4 <__reset+0xfb0f66a4>
811168dc:	dac02b17 	ldw	r11,172(sp)
811168e0:	e7000c04 	addi	fp,fp,48
811168e4:	df0019c5 	stb	fp,103(sp)
811168e8:	dac02115 	stw	r11,132(sp)
811168ec:	dc4019c4 	addi	r17,sp,103
811168f0:	003eb606 	br	811163cc <__reset+0xfb0f63cc>
811168f4:	21003fcc 	andi	r4,r4,255
811168f8:	20021f1e 	bne	r4,zero,81117178 <___svfiprintf_internal_r+0x121c>
811168fc:	94800414 	ori	r18,r18,16
81116900:	9080080c 	andi	r2,r18,32
81116904:	103ec51e 	bne	r2,zero,8111641c <__reset+0xfb0f641c>
81116908:	9080040c 	andi	r2,r18,16
8111690c:	10016926 	beq	r2,zero,81116eb4 <___svfiprintf_internal_r+0xf58>
81116910:	dac02317 	ldw	r11,140(sp)
81116914:	d8001d85 	stb	zero,118(sp)
81116918:	0013883a 	mov	r9,zero
8111691c:	58800104 	addi	r2,r11,4
81116920:	5f000017 	ldw	fp,0(r11)
81116924:	80016b16 	blt	r16,zero,81116ed4 <___svfiprintf_internal_r+0xf78>
81116928:	00ffdfc4 	movi	r3,-129
8111692c:	d8802315 	stw	r2,140(sp)
81116930:	90e4703a 	and	r18,r18,r3
81116934:	e03ec41e 	bne	fp,zero,81116448 <__reset+0xfb0f6448>
81116938:	0015883a 	mov	r10,zero
8111693c:	8001c226 	beq	r16,zero,81117048 <___svfiprintf_internal_r+0x10ec>
81116940:	0039883a 	mov	fp,zero
81116944:	0013883a 	mov	r9,zero
81116948:	003ec006 	br	8111644c <__reset+0xfb0f644c>
8111694c:	d8c01c17 	ldw	r3,112(sp)
81116950:	d8801b17 	ldw	r2,108(sp)
81116954:	d9001d87 	ldb	r4,118(sp)
81116958:	20000b26 	beq	r4,zero,81116988 <___svfiprintf_internal_r+0xa2c>
8111695c:	d9001d84 	addi	r4,sp,118
81116960:	18c00044 	addi	r3,r3,1
81116964:	10800044 	addi	r2,r2,1
81116968:	41000015 	stw	r4,0(r8)
8111696c:	01000044 	movi	r4,1
81116970:	41000115 	stw	r4,4(r8)
81116974:	d8c01c15 	stw	r3,112(sp)
81116978:	d8801b15 	stw	r2,108(sp)
8111697c:	010001c4 	movi	r4,7
81116980:	2080e116 	blt	r4,r2,81116d08 <___svfiprintf_internal_r+0xdac>
81116984:	42000204 	addi	r8,r8,8
81116988:	dac02217 	ldw	r11,136(sp)
8111698c:	58000b26 	beq	r11,zero,811169bc <___svfiprintf_internal_r+0xa60>
81116990:	d9001d04 	addi	r4,sp,116
81116994:	18c00084 	addi	r3,r3,2
81116998:	10800044 	addi	r2,r2,1
8111699c:	41000015 	stw	r4,0(r8)
811169a0:	01000084 	movi	r4,2
811169a4:	41000115 	stw	r4,4(r8)
811169a8:	d8c01c15 	stw	r3,112(sp)
811169ac:	d8801b15 	stw	r2,108(sp)
811169b0:	010001c4 	movi	r4,7
811169b4:	2080dd16 	blt	r4,r2,81116d2c <___svfiprintf_internal_r+0xdd0>
811169b8:	42000204 	addi	r8,r8,8
811169bc:	dac02617 	ldw	r11,152(sp)
811169c0:	01002004 	movi	r4,128
811169c4:	59008426 	beq	r11,r4,81116bd8 <___svfiprintf_internal_r+0xc7c>
811169c8:	dac02117 	ldw	r11,132(sp)
811169cc:	82e1c83a 	sub	r16,r16,r11
811169d0:	0400270e 	bge	zero,r16,81116a70 <___svfiprintf_internal_r+0xb14>
811169d4:	01c00404 	movi	r7,16
811169d8:	3c016a0e 	bge	r7,r16,81116f84 <___svfiprintf_internal_r+0x1028>
811169dc:	016044b4 	movhi	r5,33042
811169e0:	29493d04 	addi	r5,r5,9460
811169e4:	d9402215 	stw	r5,136(sp)
811169e8:	070001c4 	movi	fp,7
811169ec:	00000306 	br	811169fc <___svfiprintf_internal_r+0xaa0>
811169f0:	843ffc04 	addi	r16,r16,-16
811169f4:	42000204 	addi	r8,r8,8
811169f8:	3c00130e 	bge	r7,r16,81116a48 <___svfiprintf_internal_r+0xaec>
811169fc:	18c00404 	addi	r3,r3,16
81116a00:	10800044 	addi	r2,r2,1
81116a04:	45000015 	stw	r20,0(r8)
81116a08:	41c00115 	stw	r7,4(r8)
81116a0c:	d8c01c15 	stw	r3,112(sp)
81116a10:	d8801b15 	stw	r2,108(sp)
81116a14:	e0bff60e 	bge	fp,r2,811169f0 <__reset+0xfb0f69f0>
81116a18:	d9801a04 	addi	r6,sp,104
81116a1c:	b80b883a 	mov	r5,r23
81116a20:	a809883a 	mov	r4,r21
81116a24:	d9c02c15 	stw	r7,176(sp)
81116a28:	1115d8c0 	call	81115d8c <__ssprint_r>
81116a2c:	d9c02c17 	ldw	r7,176(sp)
81116a30:	1000581e 	bne	r2,zero,81116b94 <___svfiprintf_internal_r+0xc38>
81116a34:	843ffc04 	addi	r16,r16,-16
81116a38:	d8c01c17 	ldw	r3,112(sp)
81116a3c:	d8801b17 	ldw	r2,108(sp)
81116a40:	d811883a 	mov	r8,sp
81116a44:	3c3fed16 	blt	r7,r16,811169fc <__reset+0xfb0f69fc>
81116a48:	dac02217 	ldw	r11,136(sp)
81116a4c:	1c07883a 	add	r3,r3,r16
81116a50:	10800044 	addi	r2,r2,1
81116a54:	42c00015 	stw	r11,0(r8)
81116a58:	44000115 	stw	r16,4(r8)
81116a5c:	d8c01c15 	stw	r3,112(sp)
81116a60:	d8801b15 	stw	r2,108(sp)
81116a64:	010001c4 	movi	r4,7
81116a68:	20809e16 	blt	r4,r2,81116ce4 <___svfiprintf_internal_r+0xd88>
81116a6c:	42000204 	addi	r8,r8,8
81116a70:	dac02117 	ldw	r11,132(sp)
81116a74:	10800044 	addi	r2,r2,1
81116a78:	44400015 	stw	r17,0(r8)
81116a7c:	58c7883a 	add	r3,r11,r3
81116a80:	42c00115 	stw	r11,4(r8)
81116a84:	d8c01c15 	stw	r3,112(sp)
81116a88:	d8801b15 	stw	r2,108(sp)
81116a8c:	010001c4 	movi	r4,7
81116a90:	20807f16 	blt	r4,r2,81116c90 <___svfiprintf_internal_r+0xd34>
81116a94:	42000204 	addi	r8,r8,8
81116a98:	9480010c 	andi	r18,r18,4
81116a9c:	90002926 	beq	r18,zero,81116b44 <___svfiprintf_internal_r+0xbe8>
81116aa0:	dac02417 	ldw	r11,144(sp)
81116aa4:	d8802017 	ldw	r2,128(sp)
81116aa8:	58a1c83a 	sub	r16,r11,r2
81116aac:	0400250e 	bge	zero,r16,81116b44 <___svfiprintf_internal_r+0xbe8>
81116ab0:	04400404 	movi	r17,16
81116ab4:	d8801b17 	ldw	r2,108(sp)
81116ab8:	8c017c0e 	bge	r17,r16,811170ac <___svfiprintf_internal_r+0x1150>
81116abc:	016044b4 	movhi	r5,33042
81116ac0:	29494104 	addi	r5,r5,9476
81116ac4:	d9402815 	stw	r5,160(sp)
81116ac8:	048001c4 	movi	r18,7
81116acc:	00000306 	br	81116adc <___svfiprintf_internal_r+0xb80>
81116ad0:	843ffc04 	addi	r16,r16,-16
81116ad4:	42000204 	addi	r8,r8,8
81116ad8:	8c00110e 	bge	r17,r16,81116b20 <___svfiprintf_internal_r+0xbc4>
81116adc:	18c00404 	addi	r3,r3,16
81116ae0:	10800044 	addi	r2,r2,1
81116ae4:	45800015 	stw	r22,0(r8)
81116ae8:	44400115 	stw	r17,4(r8)
81116aec:	d8c01c15 	stw	r3,112(sp)
81116af0:	d8801b15 	stw	r2,108(sp)
81116af4:	90bff60e 	bge	r18,r2,81116ad0 <__reset+0xfb0f6ad0>
81116af8:	d9801a04 	addi	r6,sp,104
81116afc:	b80b883a 	mov	r5,r23
81116b00:	a809883a 	mov	r4,r21
81116b04:	1115d8c0 	call	81115d8c <__ssprint_r>
81116b08:	1000221e 	bne	r2,zero,81116b94 <___svfiprintf_internal_r+0xc38>
81116b0c:	843ffc04 	addi	r16,r16,-16
81116b10:	d8c01c17 	ldw	r3,112(sp)
81116b14:	d8801b17 	ldw	r2,108(sp)
81116b18:	d811883a 	mov	r8,sp
81116b1c:	8c3fef16 	blt	r17,r16,81116adc <__reset+0xfb0f6adc>
81116b20:	dac02817 	ldw	r11,160(sp)
81116b24:	1c07883a 	add	r3,r3,r16
81116b28:	10800044 	addi	r2,r2,1
81116b2c:	42c00015 	stw	r11,0(r8)
81116b30:	44000115 	stw	r16,4(r8)
81116b34:	d8c01c15 	stw	r3,112(sp)
81116b38:	d8801b15 	stw	r2,108(sp)
81116b3c:	010001c4 	movi	r4,7
81116b40:	2080aa16 	blt	r4,r2,81116dec <___svfiprintf_internal_r+0xe90>
81116b44:	d8802417 	ldw	r2,144(sp)
81116b48:	dac02017 	ldw	r11,128(sp)
81116b4c:	12c0010e 	bge	r2,r11,81116b54 <___svfiprintf_internal_r+0xbf8>
81116b50:	5805883a 	mov	r2,r11
81116b54:	dac02517 	ldw	r11,148(sp)
81116b58:	5897883a 	add	r11,r11,r2
81116b5c:	dac02515 	stw	r11,148(sp)
81116b60:	1800531e 	bne	r3,zero,81116cb0 <___svfiprintf_internal_r+0xd54>
81116b64:	98800007 	ldb	r2,0(r19)
81116b68:	d8001b15 	stw	zero,108(sp)
81116b6c:	d811883a 	mov	r8,sp
81116b70:	103d231e 	bne	r2,zero,81116000 <__reset+0xfb0f6000>
81116b74:	9823883a 	mov	r17,r19
81116b78:	003d3906 	br	81116060 <__reset+0xfb0f6060>
81116b7c:	d8801c17 	ldw	r2,112(sp)
81116b80:	10000426 	beq	r2,zero,81116b94 <___svfiprintf_internal_r+0xc38>
81116b84:	d9402717 	ldw	r5,156(sp)
81116b88:	d9002a17 	ldw	r4,168(sp)
81116b8c:	d9801a04 	addi	r6,sp,104
81116b90:	1115d8c0 	call	81115d8c <__ssprint_r>
81116b94:	dac02717 	ldw	r11,156(sp)
81116b98:	d8802517 	ldw	r2,148(sp)
81116b9c:	58c0030b 	ldhu	r3,12(r11)
81116ba0:	18c0100c 	andi	r3,r3,64
81116ba4:	1801381e 	bne	r3,zero,81117088 <___svfiprintf_internal_r+0x112c>
81116ba8:	dfc03717 	ldw	ra,220(sp)
81116bac:	df003617 	ldw	fp,216(sp)
81116bb0:	ddc03517 	ldw	r23,212(sp)
81116bb4:	dd803417 	ldw	r22,208(sp)
81116bb8:	dd403317 	ldw	r21,204(sp)
81116bbc:	dd003217 	ldw	r20,200(sp)
81116bc0:	dcc03117 	ldw	r19,196(sp)
81116bc4:	dc803017 	ldw	r18,192(sp)
81116bc8:	dc402f17 	ldw	r17,188(sp)
81116bcc:	dc002e17 	ldw	r16,184(sp)
81116bd0:	dec03804 	addi	sp,sp,224
81116bd4:	f800283a 	ret
81116bd8:	dac02417 	ldw	r11,144(sp)
81116bdc:	d9002017 	ldw	r4,128(sp)
81116be0:	5939c83a 	sub	fp,r11,r4
81116be4:	073f780e 	bge	zero,fp,811169c8 <__reset+0xfb0f69c8>
81116be8:	02400404 	movi	r9,16
81116bec:	4f01370e 	bge	r9,fp,811170cc <___svfiprintf_internal_r+0x1170>
81116bf0:	02e044b4 	movhi	r11,33042
81116bf4:	5ac93d04 	addi	r11,r11,9460
81116bf8:	dac02215 	stw	r11,136(sp)
81116bfc:	028001c4 	movi	r10,7
81116c00:	00000306 	br	81116c10 <___svfiprintf_internal_r+0xcb4>
81116c04:	e73ffc04 	addi	fp,fp,-16
81116c08:	42000204 	addi	r8,r8,8
81116c0c:	4f00150e 	bge	r9,fp,81116c64 <___svfiprintf_internal_r+0xd08>
81116c10:	18c00404 	addi	r3,r3,16
81116c14:	10800044 	addi	r2,r2,1
81116c18:	45000015 	stw	r20,0(r8)
81116c1c:	42400115 	stw	r9,4(r8)
81116c20:	d8c01c15 	stw	r3,112(sp)
81116c24:	d8801b15 	stw	r2,108(sp)
81116c28:	50bff60e 	bge	r10,r2,81116c04 <__reset+0xfb0f6c04>
81116c2c:	d9801a04 	addi	r6,sp,104
81116c30:	b80b883a 	mov	r5,r23
81116c34:	a809883a 	mov	r4,r21
81116c38:	da402c15 	stw	r9,176(sp)
81116c3c:	da802d15 	stw	r10,180(sp)
81116c40:	1115d8c0 	call	81115d8c <__ssprint_r>
81116c44:	da402c17 	ldw	r9,176(sp)
81116c48:	da802d17 	ldw	r10,180(sp)
81116c4c:	103fd11e 	bne	r2,zero,81116b94 <__reset+0xfb0f6b94>
81116c50:	e73ffc04 	addi	fp,fp,-16
81116c54:	d8c01c17 	ldw	r3,112(sp)
81116c58:	d8801b17 	ldw	r2,108(sp)
81116c5c:	d811883a 	mov	r8,sp
81116c60:	4f3feb16 	blt	r9,fp,81116c10 <__reset+0xfb0f6c10>
81116c64:	dac02217 	ldw	r11,136(sp)
81116c68:	1f07883a 	add	r3,r3,fp
81116c6c:	10800044 	addi	r2,r2,1
81116c70:	42c00015 	stw	r11,0(r8)
81116c74:	47000115 	stw	fp,4(r8)
81116c78:	d8c01c15 	stw	r3,112(sp)
81116c7c:	d8801b15 	stw	r2,108(sp)
81116c80:	010001c4 	movi	r4,7
81116c84:	2080b616 	blt	r4,r2,81116f60 <___svfiprintf_internal_r+0x1004>
81116c88:	42000204 	addi	r8,r8,8
81116c8c:	003f4e06 	br	811169c8 <__reset+0xfb0f69c8>
81116c90:	d9801a04 	addi	r6,sp,104
81116c94:	b80b883a 	mov	r5,r23
81116c98:	a809883a 	mov	r4,r21
81116c9c:	1115d8c0 	call	81115d8c <__ssprint_r>
81116ca0:	103fbc1e 	bne	r2,zero,81116b94 <__reset+0xfb0f6b94>
81116ca4:	d8c01c17 	ldw	r3,112(sp)
81116ca8:	d811883a 	mov	r8,sp
81116cac:	003f7a06 	br	81116a98 <__reset+0xfb0f6a98>
81116cb0:	d9801a04 	addi	r6,sp,104
81116cb4:	b80b883a 	mov	r5,r23
81116cb8:	a809883a 	mov	r4,r21
81116cbc:	1115d8c0 	call	81115d8c <__ssprint_r>
81116cc0:	103fa826 	beq	r2,zero,81116b64 <__reset+0xfb0f6b64>
81116cc4:	003fb306 	br	81116b94 <__reset+0xfb0f6b94>
81116cc8:	d9801a04 	addi	r6,sp,104
81116ccc:	b80b883a 	mov	r5,r23
81116cd0:	a809883a 	mov	r4,r21
81116cd4:	1115d8c0 	call	81115d8c <__ssprint_r>
81116cd8:	103fae1e 	bne	r2,zero,81116b94 <__reset+0xfb0f6b94>
81116cdc:	d811883a 	mov	r8,sp
81116ce0:	003cdc06 	br	81116054 <__reset+0xfb0f6054>
81116ce4:	d9801a04 	addi	r6,sp,104
81116ce8:	b80b883a 	mov	r5,r23
81116cec:	a809883a 	mov	r4,r21
81116cf0:	1115d8c0 	call	81115d8c <__ssprint_r>
81116cf4:	103fa71e 	bne	r2,zero,81116b94 <__reset+0xfb0f6b94>
81116cf8:	d8c01c17 	ldw	r3,112(sp)
81116cfc:	d8801b17 	ldw	r2,108(sp)
81116d00:	d811883a 	mov	r8,sp
81116d04:	003f5a06 	br	81116a70 <__reset+0xfb0f6a70>
81116d08:	d9801a04 	addi	r6,sp,104
81116d0c:	b80b883a 	mov	r5,r23
81116d10:	a809883a 	mov	r4,r21
81116d14:	1115d8c0 	call	81115d8c <__ssprint_r>
81116d18:	103f9e1e 	bne	r2,zero,81116b94 <__reset+0xfb0f6b94>
81116d1c:	d8c01c17 	ldw	r3,112(sp)
81116d20:	d8801b17 	ldw	r2,108(sp)
81116d24:	d811883a 	mov	r8,sp
81116d28:	003f1706 	br	81116988 <__reset+0xfb0f6988>
81116d2c:	d9801a04 	addi	r6,sp,104
81116d30:	b80b883a 	mov	r5,r23
81116d34:	a809883a 	mov	r4,r21
81116d38:	1115d8c0 	call	81115d8c <__ssprint_r>
81116d3c:	103f951e 	bne	r2,zero,81116b94 <__reset+0xfb0f6b94>
81116d40:	d8c01c17 	ldw	r3,112(sp)
81116d44:	d8801b17 	ldw	r2,108(sp)
81116d48:	d811883a 	mov	r8,sp
81116d4c:	003f1b06 	br	811169bc <__reset+0xfb0f69bc>
81116d50:	d8001d85 	stb	zero,118(sp)
81116d54:	80007b16 	blt	r16,zero,81116f44 <___svfiprintf_internal_r+0xfe8>
81116d58:	00ffdfc4 	movi	r3,-129
81116d5c:	e244b03a 	or	r2,fp,r9
81116d60:	90e4703a 	and	r18,r18,r3
81116d64:	103d7026 	beq	r2,zero,81116328 <__reset+0xfb0f6328>
81116d68:	0015883a 	mov	r10,zero
81116d6c:	003d7206 	br	81116338 <__reset+0xfb0f6338>
81116d70:	d9801a04 	addi	r6,sp,104
81116d74:	b80b883a 	mov	r5,r23
81116d78:	a809883a 	mov	r4,r21
81116d7c:	1115d8c0 	call	81115d8c <__ssprint_r>
81116d80:	103f841e 	bne	r2,zero,81116b94 <__reset+0xfb0f6b94>
81116d84:	d8c01c17 	ldw	r3,112(sp)
81116d88:	d8801b17 	ldw	r2,108(sp)
81116d8c:	d811883a 	mov	r8,sp
81116d90:	003ef006 	br	81116954 <__reset+0xfb0f6954>
81116d94:	9080100c 	andi	r2,r18,64
81116d98:	d8001d85 	stb	zero,118(sp)
81116d9c:	dac02317 	ldw	r11,140(sp)
81116da0:	10008126 	beq	r2,zero,81116fa8 <___svfiprintf_internal_r+0x104c>
81116da4:	58800104 	addi	r2,r11,4
81116da8:	5f00000b 	ldhu	fp,0(r11)
81116dac:	0013883a 	mov	r9,zero
81116db0:	803ec30e 	bge	r16,zero,811168c0 <__reset+0xfb0f68c0>
81116db4:	d8802315 	stw	r2,140(sp)
81116db8:	0015883a 	mov	r10,zero
81116dbc:	e244b03a 	or	r2,fp,r9
81116dc0:	103e371e 	bne	r2,zero,811166a0 <__reset+0xfb0f66a0>
81116dc4:	00800044 	movi	r2,1
81116dc8:	10803fcc 	andi	r2,r2,255
81116dcc:	00c00044 	movi	r3,1
81116dd0:	10c06126 	beq	r2,r3,81116f58 <___svfiprintf_internal_r+0xffc>
81116dd4:	00c00084 	movi	r3,2
81116dd8:	10fd5526 	beq	r2,r3,81116330 <__reset+0xfb0f6330>
81116ddc:	003ed806 	br	81116940 <__reset+0xfb0f6940>
81116de0:	d8802315 	stw	r2,140(sp)
81116de4:	98c00007 	ldb	r3,0(r19)
81116de8:	003cab06 	br	81116098 <__reset+0xfb0f6098>
81116dec:	d9801a04 	addi	r6,sp,104
81116df0:	b80b883a 	mov	r5,r23
81116df4:	a809883a 	mov	r4,r21
81116df8:	1115d8c0 	call	81115d8c <__ssprint_r>
81116dfc:	103f651e 	bne	r2,zero,81116b94 <__reset+0xfb0f6b94>
81116e00:	d8c01c17 	ldw	r3,112(sp)
81116e04:	003f4f06 	br	81116b44 <__reset+0xfb0f6b44>
81116e08:	00a044b4 	movhi	r2,33042
81116e0c:	1088d504 	addi	r2,r2,9044
81116e10:	d8802915 	stw	r2,164(sp)
81116e14:	003d4406 	br	81116328 <__reset+0xfb0f6328>
81116e18:	dac02317 	ldw	r11,140(sp)
81116e1c:	58800017 	ldw	r2,0(r11)
81116e20:	dac02517 	ldw	r11,148(sp)
81116e24:	5807d7fa 	srai	r3,r11,31
81116e28:	dac02317 	ldw	r11,140(sp)
81116e2c:	10c00115 	stw	r3,4(r2)
81116e30:	5ac00104 	addi	r11,r11,4
81116e34:	dac02315 	stw	r11,140(sp)
81116e38:	dac02517 	ldw	r11,148(sp)
81116e3c:	12c00015 	stw	r11,0(r2)
81116e40:	003c6d06 	br	81115ff8 <__reset+0xfb0f5ff8>
81116e44:	9080100c 	andi	r2,r18,64
81116e48:	dac02317 	ldw	r11,140(sp)
81116e4c:	103e5326 	beq	r2,zero,8111679c <__reset+0xfb0f679c>
81116e50:	5f00000f 	ldh	fp,0(r11)
81116e54:	5ac00104 	addi	r11,r11,4
81116e58:	dac02315 	stw	r11,140(sp)
81116e5c:	e013d7fa 	srai	r9,fp,31
81116e60:	4805883a 	mov	r2,r9
81116e64:	003e0706 	br	81116684 <__reset+0xfb0f6684>
81116e68:	00800c04 	movi	r2,48
81116e6c:	d8801d05 	stb	r2,116(sp)
81116e70:	d8c01d45 	stb	r3,117(sp)
81116e74:	d8001d85 	stb	zero,118(sp)
81116e78:	90800094 	ori	r2,r18,2
81116e7c:	80008f16 	blt	r16,zero,811170bc <___svfiprintf_internal_r+0x1160>
81116e80:	00bfdfc4 	movi	r2,-129
81116e84:	90a4703a 	and	r18,r18,r2
81116e88:	94800094 	ori	r18,r18,2
81116e8c:	0015883a 	mov	r10,zero
81116e90:	003d2906 	br	81116338 <__reset+0xfb0f6338>
81116e94:	98c00007 	ldb	r3,0(r19)
81116e98:	003c7f06 	br	81116098 <__reset+0xfb0f6098>
81116e9c:	dac02317 	ldw	r11,140(sp)
81116ea0:	0013883a 	mov	r9,zero
81116ea4:	5f000017 	ldw	fp,0(r11)
81116ea8:	5ac00104 	addi	r11,r11,4
81116eac:	dac02315 	stw	r11,140(sp)
81116eb0:	003d1506 	br	81116308 <__reset+0xfb0f6308>
81116eb4:	9080100c 	andi	r2,r18,64
81116eb8:	d8001d85 	stb	zero,118(sp)
81116ebc:	dac02317 	ldw	r11,140(sp)
81116ec0:	10003426 	beq	r2,zero,81116f94 <___svfiprintf_internal_r+0x1038>
81116ec4:	58800104 	addi	r2,r11,4
81116ec8:	5f00000b 	ldhu	fp,0(r11)
81116ecc:	0013883a 	mov	r9,zero
81116ed0:	803e950e 	bge	r16,zero,81116928 <__reset+0xfb0f6928>
81116ed4:	e246b03a 	or	r3,fp,r9
81116ed8:	d8802315 	stw	r2,140(sp)
81116edc:	183d5a1e 	bne	r3,zero,81116448 <__reset+0xfb0f6448>
81116ee0:	0015883a 	mov	r10,zero
81116ee4:	0005883a 	mov	r2,zero
81116ee8:	003fb706 	br	81116dc8 <__reset+0xfb0f6dc8>
81116eec:	98c00043 	ldbu	r3,1(r19)
81116ef0:	94800814 	ori	r18,r18,32
81116ef4:	9cc00044 	addi	r19,r19,1
81116ef8:	18c03fcc 	andi	r3,r3,255
81116efc:	18c0201c 	xori	r3,r3,128
81116f00:	18ffe004 	addi	r3,r3,-128
81116f04:	003c6406 	br	81116098 <__reset+0xfb0f6098>
81116f08:	d8c02315 	stw	r3,140(sp)
81116f0c:	0015883a 	mov	r10,zero
81116f10:	003faa06 	br	81116dbc <__reset+0xfb0f6dbc>
81116f14:	dac02317 	ldw	r11,140(sp)
81116f18:	58800017 	ldw	r2,0(r11)
81116f1c:	5ac00104 	addi	r11,r11,4
81116f20:	dac02315 	stw	r11,140(sp)
81116f24:	dac02517 	ldw	r11,148(sp)
81116f28:	12c00015 	stw	r11,0(r2)
81116f2c:	003c3206 	br	81115ff8 <__reset+0xfb0f5ff8>
81116f30:	012044b4 	movhi	r4,33042
81116f34:	2108d504 	addi	r4,r4,9044
81116f38:	d9002915 	stw	r4,164(sp)
81116f3c:	d8c02315 	stw	r3,140(sp)
81116f40:	1025883a 	mov	r18,r2
81116f44:	e244b03a 	or	r2,fp,r9
81116f48:	103f871e 	bne	r2,zero,81116d68 <__reset+0xfb0f6d68>
81116f4c:	0015883a 	mov	r10,zero
81116f50:	00800084 	movi	r2,2
81116f54:	003f9c06 	br	81116dc8 <__reset+0xfb0f6dc8>
81116f58:	0039883a 	mov	fp,zero
81116f5c:	003e5f06 	br	811168dc <__reset+0xfb0f68dc>
81116f60:	d9801a04 	addi	r6,sp,104
81116f64:	b80b883a 	mov	r5,r23
81116f68:	a809883a 	mov	r4,r21
81116f6c:	1115d8c0 	call	81115d8c <__ssprint_r>
81116f70:	103f081e 	bne	r2,zero,81116b94 <__reset+0xfb0f6b94>
81116f74:	d8c01c17 	ldw	r3,112(sp)
81116f78:	d8801b17 	ldw	r2,108(sp)
81116f7c:	d811883a 	mov	r8,sp
81116f80:	003e9106 	br	811169c8 <__reset+0xfb0f69c8>
81116f84:	012044b4 	movhi	r4,33042
81116f88:	21093d04 	addi	r4,r4,9460
81116f8c:	d9002215 	stw	r4,136(sp)
81116f90:	003ead06 	br	81116a48 <__reset+0xfb0f6a48>
81116f94:	58800104 	addi	r2,r11,4
81116f98:	5f000017 	ldw	fp,0(r11)
81116f9c:	0013883a 	mov	r9,zero
81116fa0:	803e610e 	bge	r16,zero,81116928 <__reset+0xfb0f6928>
81116fa4:	003fcb06 	br	81116ed4 <__reset+0xfb0f6ed4>
81116fa8:	58800104 	addi	r2,r11,4
81116fac:	5f000017 	ldw	fp,0(r11)
81116fb0:	0013883a 	mov	r9,zero
81116fb4:	803e420e 	bge	r16,zero,811168c0 <__reset+0xfb0f68c0>
81116fb8:	003f7e06 	br	81116db4 <__reset+0xfb0f6db4>
81116fbc:	5f000017 	ldw	fp,0(r11)
81116fc0:	5ac00104 	addi	r11,r11,4
81116fc4:	0013883a 	mov	r9,zero
81116fc8:	dac02315 	stw	r11,140(sp)
81116fcc:	003cce06 	br	81116308 <__reset+0xfb0f6308>
81116fd0:	8809883a 	mov	r4,r17
81116fd4:	da002c15 	stw	r8,176(sp)
81116fd8:	1115cf40 	call	81115cf4 <strlen>
81116fdc:	d8802115 	stw	r2,132(sp)
81116fe0:	da801d83 	ldbu	r10,118(sp)
81116fe4:	df002315 	stw	fp,140(sp)
81116fe8:	0021883a 	mov	r16,zero
81116fec:	da002c17 	ldw	r8,176(sp)
81116ff0:	003cf606 	br	811163cc <__reset+0xfb0f63cc>
81116ff4:	00800184 	movi	r2,6
81116ff8:	1400012e 	bgeu	r2,r16,81117000 <___svfiprintf_internal_r+0x10a4>
81116ffc:	1021883a 	mov	r16,r2
81117000:	dc002115 	stw	r16,132(sp)
81117004:	8005883a 	mov	r2,r16
81117008:	80003c16 	blt	r16,zero,811170fc <___svfiprintf_internal_r+0x11a0>
8111700c:	046044b4 	movhi	r17,33042
81117010:	d8802015 	stw	r2,128(sp)
81117014:	df002315 	stw	fp,140(sp)
81117018:	8c48da04 	addi	r17,r17,9064
8111701c:	003d2e06 	br	811164d8 <__reset+0xfb0f64d8>
81117020:	04001004 	movi	r16,64
81117024:	800b883a 	mov	r5,r16
81117028:	110c1c80 	call	8110c1c8 <_malloc_r>
8111702c:	dac02717 	ldw	r11,156(sp)
81117030:	58800015 	stw	r2,0(r11)
81117034:	58800415 	stw	r2,16(r11)
81117038:	10004826 	beq	r2,zero,8111715c <___svfiprintf_internal_r+0x1200>
8111703c:	dac02717 	ldw	r11,156(sp)
81117040:	5c000515 	stw	r16,20(r11)
81117044:	003bd906 	br	81115fac <__reset+0xfb0f5fac>
81117048:	9080004c 	andi	r2,r18,1
8111704c:	0015883a 	mov	r10,zero
81117050:	10000626 	beq	r2,zero,8111706c <___svfiprintf_internal_r+0x1110>
81117054:	dac02b17 	ldw	r11,172(sp)
81117058:	00800c04 	movi	r2,48
8111705c:	d88019c5 	stb	r2,103(sp)
81117060:	dac02115 	stw	r11,132(sp)
81117064:	dc4019c4 	addi	r17,sp,103
81117068:	003cd806 	br	811163cc <__reset+0xfb0f63cc>
8111706c:	d8002115 	stw	zero,132(sp)
81117070:	dc401a04 	addi	r17,sp,104
81117074:	003cd506 	br	811163cc <__reset+0xfb0f63cc>
81117078:	012044b4 	movhi	r4,33042
8111707c:	21094104 	addi	r4,r4,9476
81117080:	d9002815 	stw	r4,160(sp)
81117084:	003d4306 	br	81116594 <__reset+0xfb0f6594>
81117088:	00bfffc4 	movi	r2,-1
8111708c:	003ec606 	br	81116ba8 <__reset+0xfb0f6ba8>
81117090:	00800044 	movi	r2,1
81117094:	10803fcc 	andi	r2,r2,255
81117098:	00c00044 	movi	r3,1
8111709c:	10fd8026 	beq	r2,r3,811166a0 <__reset+0xfb0f66a0>
811170a0:	00c00084 	movi	r3,2
811170a4:	10fca426 	beq	r2,r3,81116338 <__reset+0xfb0f6338>
811170a8:	003ce806 	br	8111644c <__reset+0xfb0f644c>
811170ac:	012044b4 	movhi	r4,33042
811170b0:	21094104 	addi	r4,r4,9476
811170b4:	d9002815 	stw	r4,160(sp)
811170b8:	003e9906 	br	81116b20 <__reset+0xfb0f6b20>
811170bc:	1025883a 	mov	r18,r2
811170c0:	0015883a 	mov	r10,zero
811170c4:	00800084 	movi	r2,2
811170c8:	003ff206 	br	81117094 <__reset+0xfb0f7094>
811170cc:	016044b4 	movhi	r5,33042
811170d0:	29493d04 	addi	r5,r5,9460
811170d4:	d9402215 	stw	r5,136(sp)
811170d8:	003ee206 	br	81116c64 <__reset+0xfb0f6c64>
811170dc:	5827883a 	mov	r19,r11
811170e0:	0021883a 	mov	r16,zero
811170e4:	003bed06 	br	8111609c <__reset+0xfb0f609c>
811170e8:	dc002115 	stw	r16,132(sp)
811170ec:	da801d83 	ldbu	r10,118(sp)
811170f0:	df002315 	stw	fp,140(sp)
811170f4:	0021883a 	mov	r16,zero
811170f8:	003cb406 	br	811163cc <__reset+0xfb0f63cc>
811170fc:	0005883a 	mov	r2,zero
81117100:	003fc206 	br	8111700c <__reset+0xfb0f700c>
81117104:	d8802317 	ldw	r2,140(sp)
81117108:	98c00043 	ldbu	r3,1(r19)
8111710c:	5827883a 	mov	r19,r11
81117110:	14000017 	ldw	r16,0(r2)
81117114:	10800104 	addi	r2,r2,4
81117118:	d8802315 	stw	r2,140(sp)
8111711c:	803f760e 	bge	r16,zero,81116ef8 <__reset+0xfb0f6ef8>
81117120:	18c03fcc 	andi	r3,r3,255
81117124:	18c0201c 	xori	r3,r3,128
81117128:	043fffc4 	movi	r16,-1
8111712c:	18ffe004 	addi	r3,r3,-128
81117130:	003bd906 	br	81116098 <__reset+0xfb0f6098>
81117134:	d9c01d85 	stb	r7,118(sp)
81117138:	003cb606 	br	81116414 <__reset+0xfb0f6414>
8111713c:	d9c01d85 	stb	r7,118(sp)
81117140:	003d2106 	br	811165c8 <__reset+0xfb0f65c8>
81117144:	d9c01d85 	stb	r7,118(sp)
81117148:	003d8e06 	br	81116784 <__reset+0xfb0f6784>
8111714c:	d9c01d85 	stb	r7,118(sp)
81117150:	003db306 	br	81116820 <__reset+0xfb0f6820>
81117154:	d9c01d85 	stb	r7,118(sp)
81117158:	003c8a06 	br	81116384 <__reset+0xfb0f6384>
8111715c:	dac02a17 	ldw	r11,168(sp)
81117160:	00800304 	movi	r2,12
81117164:	58800015 	stw	r2,0(r11)
81117168:	00bfffc4 	movi	r2,-1
8111716c:	003e8e06 	br	81116ba8 <__reset+0xfb0f6ba8>
81117170:	d9c01d85 	stb	r7,118(sp)
81117174:	003dc706 	br	81116894 <__reset+0xfb0f6894>
81117178:	d9c01d85 	stb	r7,118(sp)
8111717c:	003ddf06 	br	811168fc <__reset+0xfb0f68fc>
81117180:	d9c01d85 	stb	r7,118(sp)
81117184:	003d3706 	br	81116664 <__reset+0xfb0f6664>
81117188:	d9c01d85 	stb	r7,118(sp)
8111718c:	003c5406 	br	811162e0 <__reset+0xfb0f62e0>
81117190:	d9c01d85 	stb	r7,118(sp)
81117194:	003d1d06 	br	8111660c <__reset+0xfb0f660c>

81117198 <__sprint_r.part.0>:
81117198:	28801917 	ldw	r2,100(r5)
8111719c:	defff604 	addi	sp,sp,-40
811171a0:	dd400515 	stw	r21,20(sp)
811171a4:	dfc00915 	stw	ra,36(sp)
811171a8:	df000815 	stw	fp,32(sp)
811171ac:	ddc00715 	stw	r23,28(sp)
811171b0:	dd800615 	stw	r22,24(sp)
811171b4:	dd000415 	stw	r20,16(sp)
811171b8:	dcc00315 	stw	r19,12(sp)
811171bc:	dc800215 	stw	r18,8(sp)
811171c0:	dc400115 	stw	r17,4(sp)
811171c4:	dc000015 	stw	r16,0(sp)
811171c8:	1088000c 	andi	r2,r2,8192
811171cc:	302b883a 	mov	r21,r6
811171d0:	10002e26 	beq	r2,zero,8111728c <__sprint_r.part.0+0xf4>
811171d4:	30800217 	ldw	r2,8(r6)
811171d8:	35800017 	ldw	r22,0(r6)
811171dc:	10002926 	beq	r2,zero,81117284 <__sprint_r.part.0+0xec>
811171e0:	2827883a 	mov	r19,r5
811171e4:	2029883a 	mov	r20,r4
811171e8:	b5c00104 	addi	r23,r22,4
811171ec:	04bfffc4 	movi	r18,-1
811171f0:	bc400017 	ldw	r17,0(r23)
811171f4:	b4000017 	ldw	r16,0(r22)
811171f8:	0039883a 	mov	fp,zero
811171fc:	8822d0ba 	srli	r17,r17,2
81117200:	8800031e 	bne	r17,zero,81117210 <__sprint_r.part.0+0x78>
81117204:	00001806 	br	81117268 <__sprint_r.part.0+0xd0>
81117208:	84000104 	addi	r16,r16,4
8111720c:	8f001526 	beq	r17,fp,81117264 <__sprint_r.part.0+0xcc>
81117210:	81400017 	ldw	r5,0(r16)
81117214:	980d883a 	mov	r6,r19
81117218:	a009883a 	mov	r4,r20
8111721c:	1118b0c0 	call	81118b0c <_fputwc_r>
81117220:	e7000044 	addi	fp,fp,1
81117224:	14bff81e 	bne	r2,r18,81117208 <__reset+0xfb0f7208>
81117228:	9005883a 	mov	r2,r18
8111722c:	a8000215 	stw	zero,8(r21)
81117230:	a8000115 	stw	zero,4(r21)
81117234:	dfc00917 	ldw	ra,36(sp)
81117238:	df000817 	ldw	fp,32(sp)
8111723c:	ddc00717 	ldw	r23,28(sp)
81117240:	dd800617 	ldw	r22,24(sp)
81117244:	dd400517 	ldw	r21,20(sp)
81117248:	dd000417 	ldw	r20,16(sp)
8111724c:	dcc00317 	ldw	r19,12(sp)
81117250:	dc800217 	ldw	r18,8(sp)
81117254:	dc400117 	ldw	r17,4(sp)
81117258:	dc000017 	ldw	r16,0(sp)
8111725c:	dec00a04 	addi	sp,sp,40
81117260:	f800283a 	ret
81117264:	a8800217 	ldw	r2,8(r21)
81117268:	8c63883a 	add	r17,r17,r17
8111726c:	8c63883a 	add	r17,r17,r17
81117270:	1445c83a 	sub	r2,r2,r17
81117274:	a8800215 	stw	r2,8(r21)
81117278:	b5800204 	addi	r22,r22,8
8111727c:	bdc00204 	addi	r23,r23,8
81117280:	103fdb1e 	bne	r2,zero,811171f0 <__reset+0xfb0f71f0>
81117284:	0005883a 	mov	r2,zero
81117288:	003fe806 	br	8111722c <__reset+0xfb0f722c>
8111728c:	1113bd00 	call	81113bd0 <__sfvwrite_r>
81117290:	003fe606 	br	8111722c <__reset+0xfb0f722c>

81117294 <__sprint_r>:
81117294:	30c00217 	ldw	r3,8(r6)
81117298:	18000126 	beq	r3,zero,811172a0 <__sprint_r+0xc>
8111729c:	11171981 	jmpi	81117198 <__sprint_r.part.0>
811172a0:	30000115 	stw	zero,4(r6)
811172a4:	0005883a 	mov	r2,zero
811172a8:	f800283a 	ret

811172ac <___vfiprintf_internal_r>:
811172ac:	deffc904 	addi	sp,sp,-220
811172b0:	df003515 	stw	fp,212(sp)
811172b4:	dd003115 	stw	r20,196(sp)
811172b8:	dfc03615 	stw	ra,216(sp)
811172bc:	ddc03415 	stw	r23,208(sp)
811172c0:	dd803315 	stw	r22,204(sp)
811172c4:	dd403215 	stw	r21,200(sp)
811172c8:	dcc03015 	stw	r19,192(sp)
811172cc:	dc802f15 	stw	r18,188(sp)
811172d0:	dc402e15 	stw	r17,184(sp)
811172d4:	dc002d15 	stw	r16,180(sp)
811172d8:	d9002015 	stw	r4,128(sp)
811172dc:	d9c02215 	stw	r7,136(sp)
811172e0:	2829883a 	mov	r20,r5
811172e4:	3039883a 	mov	fp,r6
811172e8:	20000226 	beq	r4,zero,811172f4 <___vfiprintf_internal_r+0x48>
811172ec:	20800e17 	ldw	r2,56(r4)
811172f0:	1000cf26 	beq	r2,zero,81117630 <___vfiprintf_internal_r+0x384>
811172f4:	a080030b 	ldhu	r2,12(r20)
811172f8:	10c8000c 	andi	r3,r2,8192
811172fc:	1800061e 	bne	r3,zero,81117318 <___vfiprintf_internal_r+0x6c>
81117300:	a1001917 	ldw	r4,100(r20)
81117304:	00f7ffc4 	movi	r3,-8193
81117308:	10880014 	ori	r2,r2,8192
8111730c:	20c6703a 	and	r3,r4,r3
81117310:	a080030d 	sth	r2,12(r20)
81117314:	a0c01915 	stw	r3,100(r20)
81117318:	10c0020c 	andi	r3,r2,8
8111731c:	1800a926 	beq	r3,zero,811175c4 <___vfiprintf_internal_r+0x318>
81117320:	a0c00417 	ldw	r3,16(r20)
81117324:	1800a726 	beq	r3,zero,811175c4 <___vfiprintf_internal_r+0x318>
81117328:	1080068c 	andi	r2,r2,26
8111732c:	00c00284 	movi	r3,10
81117330:	10c0ac26 	beq	r2,r3,811175e4 <___vfiprintf_internal_r+0x338>
81117334:	da801a04 	addi	r10,sp,104
81117338:	da801e15 	stw	r10,120(sp)
8111733c:	d8801e17 	ldw	r2,120(sp)
81117340:	da8019c4 	addi	r10,sp,103
81117344:	05a044b4 	movhi	r22,33042
81117348:	05e044b4 	movhi	r23,33042
8111734c:	da801f15 	stw	r10,124(sp)
81117350:	1295c83a 	sub	r10,r2,r10
81117354:	b5894904 	addi	r22,r22,9508
81117358:	bdc94504 	addi	r23,r23,9492
8111735c:	dec01a15 	stw	sp,104(sp)
81117360:	d8001c15 	stw	zero,112(sp)
81117364:	d8001b15 	stw	zero,108(sp)
81117368:	d8002615 	stw	zero,152(sp)
8111736c:	d8002315 	stw	zero,140(sp)
81117370:	da802715 	stw	r10,156(sp)
81117374:	d811883a 	mov	r8,sp
81117378:	dd002115 	stw	r20,132(sp)
8111737c:	e021883a 	mov	r16,fp
81117380:	80800007 	ldb	r2,0(r16)
81117384:	1003ea26 	beq	r2,zero,81118330 <___vfiprintf_internal_r+0x1084>
81117388:	00c00944 	movi	r3,37
8111738c:	8025883a 	mov	r18,r16
81117390:	10c0021e 	bne	r2,r3,8111739c <___vfiprintf_internal_r+0xf0>
81117394:	00001606 	br	811173f0 <___vfiprintf_internal_r+0x144>
81117398:	10c00326 	beq	r2,r3,811173a8 <___vfiprintf_internal_r+0xfc>
8111739c:	94800044 	addi	r18,r18,1
811173a0:	90800007 	ldb	r2,0(r18)
811173a4:	103ffc1e 	bne	r2,zero,81117398 <__reset+0xfb0f7398>
811173a8:	9423c83a 	sub	r17,r18,r16
811173ac:	88001026 	beq	r17,zero,811173f0 <___vfiprintf_internal_r+0x144>
811173b0:	d8c01c17 	ldw	r3,112(sp)
811173b4:	d8801b17 	ldw	r2,108(sp)
811173b8:	44000015 	stw	r16,0(r8)
811173bc:	88c7883a 	add	r3,r17,r3
811173c0:	10800044 	addi	r2,r2,1
811173c4:	44400115 	stw	r17,4(r8)
811173c8:	d8c01c15 	stw	r3,112(sp)
811173cc:	d8801b15 	stw	r2,108(sp)
811173d0:	010001c4 	movi	r4,7
811173d4:	2080760e 	bge	r4,r2,811175b0 <___vfiprintf_internal_r+0x304>
811173d8:	1803821e 	bne	r3,zero,811181e4 <___vfiprintf_internal_r+0xf38>
811173dc:	da802317 	ldw	r10,140(sp)
811173e0:	d8001b15 	stw	zero,108(sp)
811173e4:	d811883a 	mov	r8,sp
811173e8:	5455883a 	add	r10,r10,r17
811173ec:	da802315 	stw	r10,140(sp)
811173f0:	90800007 	ldb	r2,0(r18)
811173f4:	10044626 	beq	r2,zero,81118510 <___vfiprintf_internal_r+0x1264>
811173f8:	90c00047 	ldb	r3,1(r18)
811173fc:	94000044 	addi	r16,r18,1
81117400:	d8001d85 	stb	zero,118(sp)
81117404:	0009883a 	mov	r4,zero
81117408:	000f883a 	mov	r7,zero
8111740c:	027fffc4 	movi	r9,-1
81117410:	0023883a 	mov	r17,zero
81117414:	0029883a 	mov	r20,zero
81117418:	01401604 	movi	r5,88
8111741c:	01800244 	movi	r6,9
81117420:	03400a84 	movi	r13,42
81117424:	03001b04 	movi	r12,108
81117428:	84000044 	addi	r16,r16,1
8111742c:	18bff804 	addi	r2,r3,-32
81117430:	28827336 	bltu	r5,r2,81117e00 <___vfiprintf_internal_r+0xb54>
81117434:	100490ba 	slli	r2,r2,2
81117438:	02a04474 	movhi	r10,33041
8111743c:	529d1304 	addi	r10,r10,29772
81117440:	1285883a 	add	r2,r2,r10
81117444:	10800017 	ldw	r2,0(r2)
81117448:	1000683a 	jmp	r2
8111744c:	81117b34 	orhi	r4,r16,17900
81117450:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117454:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117458:	81117b54 	ori	r4,r16,17901
8111745c:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117460:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117464:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117468:	81117e00 	call	881117e0 <__reset+0x20f17e0>
8111746c:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117470:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117474:	81117d3c 	xorhi	r4,r16,17908
81117478:	81117d58 	cmpnei	r4,r16,17909
8111747c:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117480:	81117640 	call	88111764 <__reset+0x20f1764>
81117484:	81117d68 	cmpgeui	r4,r16,17909
81117488:	81117e00 	call	881117e0 <__reset+0x20f17e0>
8111748c:	81117b60 	cmpeqi	r4,r16,17901
81117490:	81117b6c 	andhi	r4,r16,17901
81117494:	81117b6c 	andhi	r4,r16,17901
81117498:	81117b6c 	andhi	r4,r16,17901
8111749c:	81117b6c 	andhi	r4,r16,17901
811174a0:	81117b6c 	andhi	r4,r16,17901
811174a4:	81117b6c 	andhi	r4,r16,17901
811174a8:	81117b6c 	andhi	r4,r16,17901
811174ac:	81117b6c 	andhi	r4,r16,17901
811174b0:	81117b6c 	andhi	r4,r16,17901
811174b4:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174b8:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174bc:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174c0:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174c4:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174c8:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174cc:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174d0:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174d4:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174d8:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174dc:	81117b98 	cmpnei	r4,r16,17902
811174e0:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174e4:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174e8:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174ec:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174f0:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174f4:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174f8:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811174fc:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117500:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117504:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117508:	81117bd0 	cmplti	r4,r16,17903
8111750c:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117510:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117514:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117518:	81117e00 	call	881117e0 <__reset+0x20f17e0>
8111751c:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117520:	81117c28 	cmpgeui	r4,r16,17904
81117524:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117528:	81117e00 	call	881117e0 <__reset+0x20f17e0>
8111752c:	81117c98 	cmpnei	r4,r16,17906
81117530:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117534:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117538:	81117e00 	call	881117e0 <__reset+0x20f17e0>
8111753c:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117540:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117544:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117548:	81117e00 	call	881117e0 <__reset+0x20f17e0>
8111754c:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117550:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117554:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117558:	81117a44 	addi	r4,r16,17897
8111755c:	81117a70 	cmpltui	r4,r16,17897
81117560:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117564:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117568:	81117e00 	call	881117e0 <__reset+0x20f17e0>
8111756c:	81117da8 	cmpgeui	r4,r16,17910
81117570:	81117a70 	cmpltui	r4,r16,17897
81117574:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117578:	81117e00 	call	881117e0 <__reset+0x20f17e0>
8111757c:	81117904 	addi	r4,r16,17892
81117580:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117584:	81117914 	ori	r4,r16,17892
81117588:	81117950 	cmplti	r4,r16,17893
8111758c:	8111764c 	andi	r4,r16,17881
81117590:	811178f8 	rdprs	r4,r16,17891
81117594:	81117e00 	call	881117e0 <__reset+0x20f17e0>
81117598:	81117cd4 	ori	r4,r16,17907
8111759c:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811175a0:	81117d2c 	andhi	r4,r16,17908
811175a4:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811175a8:	81117e00 	call	881117e0 <__reset+0x20f17e0>
811175ac:	811179f0 	cmpltui	r4,r16,17895
811175b0:	42000204 	addi	r8,r8,8
811175b4:	da802317 	ldw	r10,140(sp)
811175b8:	5455883a 	add	r10,r10,r17
811175bc:	da802315 	stw	r10,140(sp)
811175c0:	003f8b06 	br	811173f0 <__reset+0xfb0f73f0>
811175c4:	d9002017 	ldw	r4,128(sp)
811175c8:	a00b883a 	mov	r5,r20
811175cc:	11116780 	call	81111678 <__swsetup_r>
811175d0:	1003b11e 	bne	r2,zero,81118498 <___vfiprintf_internal_r+0x11ec>
811175d4:	a080030b 	ldhu	r2,12(r20)
811175d8:	00c00284 	movi	r3,10
811175dc:	1080068c 	andi	r2,r2,26
811175e0:	10ff541e 	bne	r2,r3,81117334 <__reset+0xfb0f7334>
811175e4:	a080038f 	ldh	r2,14(r20)
811175e8:	103f5216 	blt	r2,zero,81117334 <__reset+0xfb0f7334>
811175ec:	d9c02217 	ldw	r7,136(sp)
811175f0:	d9002017 	ldw	r4,128(sp)
811175f4:	e00d883a 	mov	r6,fp
811175f8:	a00b883a 	mov	r5,r20
811175fc:	11187240 	call	81118724 <__sbprintf>
81117600:	dfc03617 	ldw	ra,216(sp)
81117604:	df003517 	ldw	fp,212(sp)
81117608:	ddc03417 	ldw	r23,208(sp)
8111760c:	dd803317 	ldw	r22,204(sp)
81117610:	dd403217 	ldw	r21,200(sp)
81117614:	dd003117 	ldw	r20,196(sp)
81117618:	dcc03017 	ldw	r19,192(sp)
8111761c:	dc802f17 	ldw	r18,188(sp)
81117620:	dc402e17 	ldw	r17,184(sp)
81117624:	dc002d17 	ldw	r16,180(sp)
81117628:	dec03704 	addi	sp,sp,220
8111762c:	f800283a 	ret
81117630:	11136a00 	call	811136a0 <__sinit>
81117634:	003f2f06 	br	811172f4 <__reset+0xfb0f72f4>
81117638:	0463c83a 	sub	r17,zero,r17
8111763c:	d8802215 	stw	r2,136(sp)
81117640:	a5000114 	ori	r20,r20,4
81117644:	80c00007 	ldb	r3,0(r16)
81117648:	003f7706 	br	81117428 <__reset+0xfb0f7428>
8111764c:	00800c04 	movi	r2,48
81117650:	da802217 	ldw	r10,136(sp)
81117654:	d8801d05 	stb	r2,116(sp)
81117658:	00801e04 	movi	r2,120
8111765c:	d8801d45 	stb	r2,117(sp)
81117660:	d8001d85 	stb	zero,118(sp)
81117664:	50c00104 	addi	r3,r10,4
81117668:	54800017 	ldw	r18,0(r10)
8111766c:	0027883a 	mov	r19,zero
81117670:	a0800094 	ori	r2,r20,2
81117674:	48030b16 	blt	r9,zero,811182a4 <___vfiprintf_internal_r+0xff8>
81117678:	00bfdfc4 	movi	r2,-129
8111767c:	a096703a 	and	r11,r20,r2
81117680:	d8c02215 	stw	r3,136(sp)
81117684:	5d000094 	ori	r20,r11,2
81117688:	90032b1e 	bne	r18,zero,81118338 <___vfiprintf_internal_r+0x108c>
8111768c:	00a044b4 	movhi	r2,33042
81117690:	1088d504 	addi	r2,r2,9044
81117694:	d8802615 	stw	r2,152(sp)
81117698:	0039883a 	mov	fp,zero
8111769c:	48017b1e 	bne	r9,zero,81117c8c <___vfiprintf_internal_r+0x9e0>
811176a0:	0013883a 	mov	r9,zero
811176a4:	0027883a 	mov	r19,zero
811176a8:	dd401a04 	addi	r21,sp,104
811176ac:	4825883a 	mov	r18,r9
811176b0:	4cc0010e 	bge	r9,r19,811176b8 <___vfiprintf_internal_r+0x40c>
811176b4:	9825883a 	mov	r18,r19
811176b8:	e7003fcc 	andi	fp,fp,255
811176bc:	e700201c 	xori	fp,fp,128
811176c0:	e73fe004 	addi	fp,fp,-128
811176c4:	e0000126 	beq	fp,zero,811176cc <___vfiprintf_internal_r+0x420>
811176c8:	94800044 	addi	r18,r18,1
811176cc:	a380008c 	andi	r14,r20,2
811176d0:	70000126 	beq	r14,zero,811176d8 <___vfiprintf_internal_r+0x42c>
811176d4:	94800084 	addi	r18,r18,2
811176d8:	a700210c 	andi	fp,r20,132
811176dc:	e001df1e 	bne	fp,zero,81117e5c <___vfiprintf_internal_r+0xbb0>
811176e0:	8c87c83a 	sub	r3,r17,r18
811176e4:	00c1dd0e 	bge	zero,r3,81117e5c <___vfiprintf_internal_r+0xbb0>
811176e8:	01c00404 	movi	r7,16
811176ec:	d8801c17 	ldw	r2,112(sp)
811176f0:	38c3ad0e 	bge	r7,r3,811185a8 <___vfiprintf_internal_r+0x12fc>
811176f4:	02a044b4 	movhi	r10,33042
811176f8:	52894904 	addi	r10,r10,9508
811176fc:	dc002915 	stw	r16,164(sp)
81117700:	d9801b17 	ldw	r6,108(sp)
81117704:	da802415 	stw	r10,144(sp)
81117708:	03c001c4 	movi	r15,7
8111770c:	da402515 	stw	r9,148(sp)
81117710:	db802815 	stw	r14,160(sp)
81117714:	1821883a 	mov	r16,r3
81117718:	00000506 	br	81117730 <___vfiprintf_internal_r+0x484>
8111771c:	31400084 	addi	r5,r6,2
81117720:	42000204 	addi	r8,r8,8
81117724:	200d883a 	mov	r6,r4
81117728:	843ffc04 	addi	r16,r16,-16
8111772c:	3c000d0e 	bge	r7,r16,81117764 <___vfiprintf_internal_r+0x4b8>
81117730:	10800404 	addi	r2,r2,16
81117734:	31000044 	addi	r4,r6,1
81117738:	45800015 	stw	r22,0(r8)
8111773c:	41c00115 	stw	r7,4(r8)
81117740:	d8801c15 	stw	r2,112(sp)
81117744:	d9001b15 	stw	r4,108(sp)
81117748:	793ff40e 	bge	r15,r4,8111771c <__reset+0xfb0f771c>
8111774c:	1001b51e 	bne	r2,zero,81117e24 <___vfiprintf_internal_r+0xb78>
81117750:	843ffc04 	addi	r16,r16,-16
81117754:	000d883a 	mov	r6,zero
81117758:	01400044 	movi	r5,1
8111775c:	d811883a 	mov	r8,sp
81117760:	3c3ff316 	blt	r7,r16,81117730 <__reset+0xfb0f7730>
81117764:	8007883a 	mov	r3,r16
81117768:	da402517 	ldw	r9,148(sp)
8111776c:	db802817 	ldw	r14,160(sp)
81117770:	dc002917 	ldw	r16,164(sp)
81117774:	da802417 	ldw	r10,144(sp)
81117778:	1885883a 	add	r2,r3,r2
8111777c:	40c00115 	stw	r3,4(r8)
81117780:	42800015 	stw	r10,0(r8)
81117784:	d8801c15 	stw	r2,112(sp)
81117788:	d9401b15 	stw	r5,108(sp)
8111778c:	00c001c4 	movi	r3,7
81117790:	19426016 	blt	r3,r5,81118114 <___vfiprintf_internal_r+0xe68>
81117794:	d8c01d87 	ldb	r3,118(sp)
81117798:	42000204 	addi	r8,r8,8
8111779c:	29000044 	addi	r4,r5,1
811177a0:	1801b31e 	bne	r3,zero,81117e70 <___vfiprintf_internal_r+0xbc4>
811177a4:	7001c026 	beq	r14,zero,81117ea8 <___vfiprintf_internal_r+0xbfc>
811177a8:	d8c01d04 	addi	r3,sp,116
811177ac:	10800084 	addi	r2,r2,2
811177b0:	40c00015 	stw	r3,0(r8)
811177b4:	00c00084 	movi	r3,2
811177b8:	40c00115 	stw	r3,4(r8)
811177bc:	d8801c15 	stw	r2,112(sp)
811177c0:	d9001b15 	stw	r4,108(sp)
811177c4:	00c001c4 	movi	r3,7
811177c8:	1902650e 	bge	r3,r4,81118160 <___vfiprintf_internal_r+0xeb4>
811177cc:	10029a1e 	bne	r2,zero,81118238 <___vfiprintf_internal_r+0xf8c>
811177d0:	00c02004 	movi	r3,128
811177d4:	01000044 	movi	r4,1
811177d8:	000b883a 	mov	r5,zero
811177dc:	d811883a 	mov	r8,sp
811177e0:	e0c1b31e 	bne	fp,r3,81117eb0 <___vfiprintf_internal_r+0xc04>
811177e4:	8cb9c83a 	sub	fp,r17,r18
811177e8:	0701b10e 	bge	zero,fp,81117eb0 <___vfiprintf_internal_r+0xc04>
811177ec:	01c00404 	movi	r7,16
811177f0:	3f03890e 	bge	r7,fp,81118618 <___vfiprintf_internal_r+0x136c>
811177f4:	00e044b4 	movhi	r3,33042
811177f8:	18c94504 	addi	r3,r3,9492
811177fc:	d8c02415 	stw	r3,144(sp)
81117800:	8007883a 	mov	r3,r16
81117804:	034001c4 	movi	r13,7
81117808:	e021883a 	mov	r16,fp
8111780c:	da402515 	stw	r9,148(sp)
81117810:	1839883a 	mov	fp,r3
81117814:	00000506 	br	8111782c <___vfiprintf_internal_r+0x580>
81117818:	29800084 	addi	r6,r5,2
8111781c:	42000204 	addi	r8,r8,8
81117820:	180b883a 	mov	r5,r3
81117824:	843ffc04 	addi	r16,r16,-16
81117828:	3c000d0e 	bge	r7,r16,81117860 <___vfiprintf_internal_r+0x5b4>
8111782c:	10800404 	addi	r2,r2,16
81117830:	28c00044 	addi	r3,r5,1
81117834:	45c00015 	stw	r23,0(r8)
81117838:	41c00115 	stw	r7,4(r8)
8111783c:	d8801c15 	stw	r2,112(sp)
81117840:	d8c01b15 	stw	r3,108(sp)
81117844:	68fff40e 	bge	r13,r3,81117818 <__reset+0xfb0f7818>
81117848:	1002241e 	bne	r2,zero,811180dc <___vfiprintf_internal_r+0xe30>
8111784c:	843ffc04 	addi	r16,r16,-16
81117850:	01800044 	movi	r6,1
81117854:	000b883a 	mov	r5,zero
81117858:	d811883a 	mov	r8,sp
8111785c:	3c3ff316 	blt	r7,r16,8111782c <__reset+0xfb0f782c>
81117860:	da402517 	ldw	r9,148(sp)
81117864:	e007883a 	mov	r3,fp
81117868:	8039883a 	mov	fp,r16
8111786c:	1821883a 	mov	r16,r3
81117870:	d8c02417 	ldw	r3,144(sp)
81117874:	1705883a 	add	r2,r2,fp
81117878:	47000115 	stw	fp,4(r8)
8111787c:	40c00015 	stw	r3,0(r8)
81117880:	d8801c15 	stw	r2,112(sp)
81117884:	d9801b15 	stw	r6,108(sp)
81117888:	00c001c4 	movi	r3,7
8111788c:	19827616 	blt	r3,r6,81118268 <___vfiprintf_internal_r+0xfbc>
81117890:	4cf9c83a 	sub	fp,r9,r19
81117894:	42000204 	addi	r8,r8,8
81117898:	31000044 	addi	r4,r6,1
8111789c:	300b883a 	mov	r5,r6
811178a0:	07018516 	blt	zero,fp,81117eb8 <___vfiprintf_internal_r+0xc0c>
811178a4:	9885883a 	add	r2,r19,r2
811178a8:	45400015 	stw	r21,0(r8)
811178ac:	44c00115 	stw	r19,4(r8)
811178b0:	d8801c15 	stw	r2,112(sp)
811178b4:	d9001b15 	stw	r4,108(sp)
811178b8:	00c001c4 	movi	r3,7
811178bc:	1901dd0e 	bge	r3,r4,81118034 <___vfiprintf_internal_r+0xd88>
811178c0:	1002401e 	bne	r2,zero,811181c4 <___vfiprintf_internal_r+0xf18>
811178c4:	d8001b15 	stw	zero,108(sp)
811178c8:	a2c0010c 	andi	r11,r20,4
811178cc:	58000226 	beq	r11,zero,811178d8 <___vfiprintf_internal_r+0x62c>
811178d0:	8ca7c83a 	sub	r19,r17,r18
811178d4:	04c2f216 	blt	zero,r19,811184a0 <___vfiprintf_internal_r+0x11f4>
811178d8:	8c80010e 	bge	r17,r18,811178e0 <___vfiprintf_internal_r+0x634>
811178dc:	9023883a 	mov	r17,r18
811178e0:	da802317 	ldw	r10,140(sp)
811178e4:	5455883a 	add	r10,r10,r17
811178e8:	da802315 	stw	r10,140(sp)
811178ec:	d8001b15 	stw	zero,108(sp)
811178f0:	d811883a 	mov	r8,sp
811178f4:	003ea206 	br	81117380 <__reset+0xfb0f7380>
811178f8:	a5000814 	ori	r20,r20,32
811178fc:	80c00007 	ldb	r3,0(r16)
81117900:	003ec906 	br	81117428 <__reset+0xfb0f7428>
81117904:	80c00007 	ldb	r3,0(r16)
81117908:	1b030926 	beq	r3,r12,81118530 <___vfiprintf_internal_r+0x1284>
8111790c:	a5000414 	ori	r20,r20,16
81117910:	003ec506 	br	81117428 <__reset+0xfb0f7428>
81117914:	21003fcc 	andi	r4,r4,255
81117918:	20035e1e 	bne	r4,zero,81118694 <___vfiprintf_internal_r+0x13e8>
8111791c:	a080080c 	andi	r2,r20,32
81117920:	1002a526 	beq	r2,zero,811183b8 <___vfiprintf_internal_r+0x110c>
81117924:	da802217 	ldw	r10,136(sp)
81117928:	50800017 	ldw	r2,0(r10)
8111792c:	da802317 	ldw	r10,140(sp)
81117930:	5007d7fa 	srai	r3,r10,31
81117934:	da802217 	ldw	r10,136(sp)
81117938:	10c00115 	stw	r3,4(r2)
8111793c:	52800104 	addi	r10,r10,4
81117940:	da802215 	stw	r10,136(sp)
81117944:	da802317 	ldw	r10,140(sp)
81117948:	12800015 	stw	r10,0(r2)
8111794c:	003e8c06 	br	81117380 <__reset+0xfb0f7380>
81117950:	21003fcc 	andi	r4,r4,255
81117954:	2003511e 	bne	r4,zero,8111869c <___vfiprintf_internal_r+0x13f0>
81117958:	a080080c 	andi	r2,r20,32
8111795c:	1000a126 	beq	r2,zero,81117be4 <___vfiprintf_internal_r+0x938>
81117960:	da802217 	ldw	r10,136(sp)
81117964:	d8001d85 	stb	zero,118(sp)
81117968:	50800204 	addi	r2,r10,8
8111796c:	54800017 	ldw	r18,0(r10)
81117970:	54c00117 	ldw	r19,4(r10)
81117974:	4802b416 	blt	r9,zero,81118448 <___vfiprintf_internal_r+0x119c>
81117978:	013fdfc4 	movi	r4,-129
8111797c:	94c6b03a 	or	r3,r18,r19
81117980:	d8802215 	stw	r2,136(sp)
81117984:	a128703a 	and	r20,r20,r4
81117988:	1800a226 	beq	r3,zero,81117c14 <___vfiprintf_internal_r+0x968>
8111798c:	0039883a 	mov	fp,zero
81117990:	dd401a04 	addi	r21,sp,104
81117994:	9006d0fa 	srli	r3,r18,3
81117998:	9808977a 	slli	r4,r19,29
8111799c:	9826d0fa 	srli	r19,r19,3
811179a0:	948001cc 	andi	r18,r18,7
811179a4:	90800c04 	addi	r2,r18,48
811179a8:	ad7fffc4 	addi	r21,r21,-1
811179ac:	20e4b03a 	or	r18,r4,r3
811179b0:	a8800005 	stb	r2,0(r21)
811179b4:	94c6b03a 	or	r3,r18,r19
811179b8:	183ff61e 	bne	r3,zero,81117994 <__reset+0xfb0f7994>
811179bc:	a0c0004c 	andi	r3,r20,1
811179c0:	18005926 	beq	r3,zero,81117b28 <___vfiprintf_internal_r+0x87c>
811179c4:	10803fcc 	andi	r2,r2,255
811179c8:	1080201c 	xori	r2,r2,128
811179cc:	10bfe004 	addi	r2,r2,-128
811179d0:	00c00c04 	movi	r3,48
811179d4:	10c05426 	beq	r2,r3,81117b28 <___vfiprintf_internal_r+0x87c>
811179d8:	da801e17 	ldw	r10,120(sp)
811179dc:	a8bfffc4 	addi	r2,r21,-1
811179e0:	a8ffffc5 	stb	r3,-1(r21)
811179e4:	50a7c83a 	sub	r19,r10,r2
811179e8:	102b883a 	mov	r21,r2
811179ec:	003f2f06 	br	811176ac <__reset+0xfb0f76ac>
811179f0:	21003fcc 	andi	r4,r4,255
811179f4:	2003421e 	bne	r4,zero,81118700 <___vfiprintf_internal_r+0x1454>
811179f8:	00a044b4 	movhi	r2,33042
811179fc:	1088d504 	addi	r2,r2,9044
81117a00:	d8802615 	stw	r2,152(sp)
81117a04:	a080080c 	andi	r2,r20,32
81117a08:	1000aa26 	beq	r2,zero,81117cb4 <___vfiprintf_internal_r+0xa08>
81117a0c:	da802217 	ldw	r10,136(sp)
81117a10:	54800017 	ldw	r18,0(r10)
81117a14:	54c00117 	ldw	r19,4(r10)
81117a18:	52800204 	addi	r10,r10,8
81117a1c:	da802215 	stw	r10,136(sp)
81117a20:	a080004c 	andi	r2,r20,1
81117a24:	1001d226 	beq	r2,zero,81118170 <___vfiprintf_internal_r+0xec4>
81117a28:	94c4b03a 	or	r2,r18,r19
81117a2c:	1002351e 	bne	r2,zero,81118304 <___vfiprintf_internal_r+0x1058>
81117a30:	d8001d85 	stb	zero,118(sp)
81117a34:	48022216 	blt	r9,zero,811182c0 <___vfiprintf_internal_r+0x1014>
81117a38:	00bfdfc4 	movi	r2,-129
81117a3c:	a0a8703a 	and	r20,r20,r2
81117a40:	003f1506 	br	81117698 <__reset+0xfb0f7698>
81117a44:	da802217 	ldw	r10,136(sp)
81117a48:	04800044 	movi	r18,1
81117a4c:	d8001d85 	stb	zero,118(sp)
81117a50:	50800017 	ldw	r2,0(r10)
81117a54:	52800104 	addi	r10,r10,4
81117a58:	da802215 	stw	r10,136(sp)
81117a5c:	d8801005 	stb	r2,64(sp)
81117a60:	9027883a 	mov	r19,r18
81117a64:	dd401004 	addi	r21,sp,64
81117a68:	0013883a 	mov	r9,zero
81117a6c:	003f1706 	br	811176cc <__reset+0xfb0f76cc>
81117a70:	21003fcc 	andi	r4,r4,255
81117a74:	2003201e 	bne	r4,zero,811186f8 <___vfiprintf_internal_r+0x144c>
81117a78:	a080080c 	andi	r2,r20,32
81117a7c:	10004b26 	beq	r2,zero,81117bac <___vfiprintf_internal_r+0x900>
81117a80:	da802217 	ldw	r10,136(sp)
81117a84:	50800117 	ldw	r2,4(r10)
81117a88:	54800017 	ldw	r18,0(r10)
81117a8c:	52800204 	addi	r10,r10,8
81117a90:	da802215 	stw	r10,136(sp)
81117a94:	1027883a 	mov	r19,r2
81117a98:	10022c16 	blt	r2,zero,8111834c <___vfiprintf_internal_r+0x10a0>
81117a9c:	df001d83 	ldbu	fp,118(sp)
81117aa0:	48007216 	blt	r9,zero,81117c6c <___vfiprintf_internal_r+0x9c0>
81117aa4:	00ffdfc4 	movi	r3,-129
81117aa8:	94c4b03a 	or	r2,r18,r19
81117aac:	a0e8703a 	and	r20,r20,r3
81117ab0:	1000cc26 	beq	r2,zero,81117de4 <___vfiprintf_internal_r+0xb38>
81117ab4:	98021026 	beq	r19,zero,811182f8 <___vfiprintf_internal_r+0x104c>
81117ab8:	dc402415 	stw	r17,144(sp)
81117abc:	dc002515 	stw	r16,148(sp)
81117ac0:	9823883a 	mov	r17,r19
81117ac4:	9021883a 	mov	r16,r18
81117ac8:	dd401a04 	addi	r21,sp,104
81117acc:	4825883a 	mov	r18,r9
81117ad0:	4027883a 	mov	r19,r8
81117ad4:	8009883a 	mov	r4,r16
81117ad8:	880b883a 	mov	r5,r17
81117adc:	01800284 	movi	r6,10
81117ae0:	000f883a 	mov	r7,zero
81117ae4:	11194680 	call	81119468 <__umoddi3>
81117ae8:	10800c04 	addi	r2,r2,48
81117aec:	ad7fffc4 	addi	r21,r21,-1
81117af0:	8009883a 	mov	r4,r16
81117af4:	880b883a 	mov	r5,r17
81117af8:	a8800005 	stb	r2,0(r21)
81117afc:	01800284 	movi	r6,10
81117b00:	000f883a 	mov	r7,zero
81117b04:	1118ef00 	call	81118ef0 <__udivdi3>
81117b08:	1021883a 	mov	r16,r2
81117b0c:	10c4b03a 	or	r2,r2,r3
81117b10:	1823883a 	mov	r17,r3
81117b14:	103fef1e 	bne	r2,zero,81117ad4 <__reset+0xfb0f7ad4>
81117b18:	dc402417 	ldw	r17,144(sp)
81117b1c:	dc002517 	ldw	r16,148(sp)
81117b20:	9013883a 	mov	r9,r18
81117b24:	9811883a 	mov	r8,r19
81117b28:	da801e17 	ldw	r10,120(sp)
81117b2c:	5567c83a 	sub	r19,r10,r21
81117b30:	003ede06 	br	811176ac <__reset+0xfb0f76ac>
81117b34:	38803fcc 	andi	r2,r7,255
81117b38:	1080201c 	xori	r2,r2,128
81117b3c:	10bfe004 	addi	r2,r2,-128
81117b40:	1002371e 	bne	r2,zero,81118420 <___vfiprintf_internal_r+0x1174>
81117b44:	01000044 	movi	r4,1
81117b48:	01c00804 	movi	r7,32
81117b4c:	80c00007 	ldb	r3,0(r16)
81117b50:	003e3506 	br	81117428 <__reset+0xfb0f7428>
81117b54:	a5000054 	ori	r20,r20,1
81117b58:	80c00007 	ldb	r3,0(r16)
81117b5c:	003e3206 	br	81117428 <__reset+0xfb0f7428>
81117b60:	a5002014 	ori	r20,r20,128
81117b64:	80c00007 	ldb	r3,0(r16)
81117b68:	003e2f06 	br	81117428 <__reset+0xfb0f7428>
81117b6c:	8015883a 	mov	r10,r16
81117b70:	0023883a 	mov	r17,zero
81117b74:	18bff404 	addi	r2,r3,-48
81117b78:	50c00007 	ldb	r3,0(r10)
81117b7c:	8c4002a4 	muli	r17,r17,10
81117b80:	84000044 	addi	r16,r16,1
81117b84:	8015883a 	mov	r10,r16
81117b88:	1463883a 	add	r17,r2,r17
81117b8c:	18bff404 	addi	r2,r3,-48
81117b90:	30bff92e 	bgeu	r6,r2,81117b78 <__reset+0xfb0f7b78>
81117b94:	003e2506 	br	8111742c <__reset+0xfb0f742c>
81117b98:	21003fcc 	andi	r4,r4,255
81117b9c:	2002d41e 	bne	r4,zero,811186f0 <___vfiprintf_internal_r+0x1444>
81117ba0:	a5000414 	ori	r20,r20,16
81117ba4:	a080080c 	andi	r2,r20,32
81117ba8:	103fb51e 	bne	r2,zero,81117a80 <__reset+0xfb0f7a80>
81117bac:	a080040c 	andi	r2,r20,16
81117bb0:	1001f826 	beq	r2,zero,81118394 <___vfiprintf_internal_r+0x10e8>
81117bb4:	da802217 	ldw	r10,136(sp)
81117bb8:	54800017 	ldw	r18,0(r10)
81117bbc:	52800104 	addi	r10,r10,4
81117bc0:	da802215 	stw	r10,136(sp)
81117bc4:	9027d7fa 	srai	r19,r18,31
81117bc8:	9805883a 	mov	r2,r19
81117bcc:	003fb206 	br	81117a98 <__reset+0xfb0f7a98>
81117bd0:	21003fcc 	andi	r4,r4,255
81117bd4:	2002c41e 	bne	r4,zero,811186e8 <___vfiprintf_internal_r+0x143c>
81117bd8:	a5000414 	ori	r20,r20,16
81117bdc:	a080080c 	andi	r2,r20,32
81117be0:	103f5f1e 	bne	r2,zero,81117960 <__reset+0xfb0f7960>
81117be4:	a080040c 	andi	r2,r20,16
81117be8:	10020f26 	beq	r2,zero,81118428 <___vfiprintf_internal_r+0x117c>
81117bec:	da802217 	ldw	r10,136(sp)
81117bf0:	d8001d85 	stb	zero,118(sp)
81117bf4:	0027883a 	mov	r19,zero
81117bf8:	50800104 	addi	r2,r10,4
81117bfc:	54800017 	ldw	r18,0(r10)
81117c00:	48021116 	blt	r9,zero,81118448 <___vfiprintf_internal_r+0x119c>
81117c04:	00ffdfc4 	movi	r3,-129
81117c08:	d8802215 	stw	r2,136(sp)
81117c0c:	a0e8703a 	and	r20,r20,r3
81117c10:	903f5e1e 	bne	r18,zero,8111798c <__reset+0xfb0f798c>
81117c14:	0039883a 	mov	fp,zero
81117c18:	4802a626 	beq	r9,zero,811186b4 <___vfiprintf_internal_r+0x1408>
81117c1c:	0025883a 	mov	r18,zero
81117c20:	0027883a 	mov	r19,zero
81117c24:	003f5a06 	br	81117990 <__reset+0xfb0f7990>
81117c28:	21003fcc 	andi	r4,r4,255
81117c2c:	20029f1e 	bne	r4,zero,811186ac <___vfiprintf_internal_r+0x1400>
81117c30:	a5000414 	ori	r20,r20,16
81117c34:	a080080c 	andi	r2,r20,32
81117c38:	10005e1e 	bne	r2,zero,81117db4 <___vfiprintf_internal_r+0xb08>
81117c3c:	a080040c 	andi	r2,r20,16
81117c40:	1001a21e 	bne	r2,zero,811182cc <___vfiprintf_internal_r+0x1020>
81117c44:	a080100c 	andi	r2,r20,64
81117c48:	d8001d85 	stb	zero,118(sp)
81117c4c:	da802217 	ldw	r10,136(sp)
81117c50:	1002231e 	bne	r2,zero,811184e0 <___vfiprintf_internal_r+0x1234>
81117c54:	50800104 	addi	r2,r10,4
81117c58:	54800017 	ldw	r18,0(r10)
81117c5c:	0027883a 	mov	r19,zero
81117c60:	4801a00e 	bge	r9,zero,811182e4 <___vfiprintf_internal_r+0x1038>
81117c64:	d8802215 	stw	r2,136(sp)
81117c68:	0039883a 	mov	fp,zero
81117c6c:	94c4b03a 	or	r2,r18,r19
81117c70:	103f901e 	bne	r2,zero,81117ab4 <__reset+0xfb0f7ab4>
81117c74:	00800044 	movi	r2,1
81117c78:	10803fcc 	andi	r2,r2,255
81117c7c:	00c00044 	movi	r3,1
81117c80:	10c05926 	beq	r2,r3,81117de8 <___vfiprintf_internal_r+0xb3c>
81117c84:	00c00084 	movi	r3,2
81117c88:	10ffe41e 	bne	r2,r3,81117c1c <__reset+0xfb0f7c1c>
81117c8c:	0025883a 	mov	r18,zero
81117c90:	0027883a 	mov	r19,zero
81117c94:	00013d06 	br	8111818c <___vfiprintf_internal_r+0xee0>
81117c98:	21003fcc 	andi	r4,r4,255
81117c9c:	2002811e 	bne	r4,zero,811186a4 <___vfiprintf_internal_r+0x13f8>
81117ca0:	00a044b4 	movhi	r2,33042
81117ca4:	1088d004 	addi	r2,r2,9024
81117ca8:	d8802615 	stw	r2,152(sp)
81117cac:	a080080c 	andi	r2,r20,32
81117cb0:	103f561e 	bne	r2,zero,81117a0c <__reset+0xfb0f7a0c>
81117cb4:	a080040c 	andi	r2,r20,16
81117cb8:	1001d126 	beq	r2,zero,81118400 <___vfiprintf_internal_r+0x1154>
81117cbc:	da802217 	ldw	r10,136(sp)
81117cc0:	0027883a 	mov	r19,zero
81117cc4:	54800017 	ldw	r18,0(r10)
81117cc8:	52800104 	addi	r10,r10,4
81117ccc:	da802215 	stw	r10,136(sp)
81117cd0:	003f5306 	br	81117a20 <__reset+0xfb0f7a20>
81117cd4:	da802217 	ldw	r10,136(sp)
81117cd8:	d8001d85 	stb	zero,118(sp)
81117cdc:	55400017 	ldw	r21,0(r10)
81117ce0:	50c00104 	addi	r3,r10,4
81117ce4:	a8024226 	beq	r21,zero,811185f0 <___vfiprintf_internal_r+0x1344>
81117ce8:	48021816 	blt	r9,zero,8111854c <___vfiprintf_internal_r+0x12a0>
81117cec:	480d883a 	mov	r6,r9
81117cf0:	000b883a 	mov	r5,zero
81117cf4:	a809883a 	mov	r4,r21
81117cf8:	d8c02a15 	stw	r3,168(sp)
81117cfc:	da002b15 	stw	r8,172(sp)
81117d00:	da402c15 	stw	r9,176(sp)
81117d04:	11143a40 	call	811143a4 <memchr>
81117d08:	d8c02a17 	ldw	r3,168(sp)
81117d0c:	da002b17 	ldw	r8,172(sp)
81117d10:	da402c17 	ldw	r9,176(sp)
81117d14:	10024826 	beq	r2,zero,81118638 <___vfiprintf_internal_r+0x138c>
81117d18:	1567c83a 	sub	r19,r2,r21
81117d1c:	df001d83 	ldbu	fp,118(sp)
81117d20:	d8c02215 	stw	r3,136(sp)
81117d24:	0013883a 	mov	r9,zero
81117d28:	003e6006 	br	811176ac <__reset+0xfb0f76ac>
81117d2c:	21003fcc 	andi	r4,r4,255
81117d30:	203fc026 	beq	r4,zero,81117c34 <__reset+0xfb0f7c34>
81117d34:	d9c01d85 	stb	r7,118(sp)
81117d38:	003fbe06 	br	81117c34 <__reset+0xfb0f7c34>
81117d3c:	da802217 	ldw	r10,136(sp)
81117d40:	54400017 	ldw	r17,0(r10)
81117d44:	50800104 	addi	r2,r10,4
81117d48:	883e3b16 	blt	r17,zero,81117638 <__reset+0xfb0f7638>
81117d4c:	d8802215 	stw	r2,136(sp)
81117d50:	80c00007 	ldb	r3,0(r16)
81117d54:	003db406 	br	81117428 <__reset+0xfb0f7428>
81117d58:	01000044 	movi	r4,1
81117d5c:	01c00ac4 	movi	r7,43
81117d60:	80c00007 	ldb	r3,0(r16)
81117d64:	003db006 	br	81117428 <__reset+0xfb0f7428>
81117d68:	80c00007 	ldb	r3,0(r16)
81117d6c:	82800044 	addi	r10,r16,1
81117d70:	1b423c26 	beq	r3,r13,81118664 <___vfiprintf_internal_r+0x13b8>
81117d74:	18bff404 	addi	r2,r3,-48
81117d78:	0013883a 	mov	r9,zero
81117d7c:	30822b36 	bltu	r6,r2,8111862c <___vfiprintf_internal_r+0x1380>
81117d80:	50c00007 	ldb	r3,0(r10)
81117d84:	4a4002a4 	muli	r9,r9,10
81117d88:	54000044 	addi	r16,r10,1
81117d8c:	8015883a 	mov	r10,r16
81117d90:	4893883a 	add	r9,r9,r2
81117d94:	18bff404 	addi	r2,r3,-48
81117d98:	30bff92e 	bgeu	r6,r2,81117d80 <__reset+0xfb0f7d80>
81117d9c:	483da30e 	bge	r9,zero,8111742c <__reset+0xfb0f742c>
81117da0:	027fffc4 	movi	r9,-1
81117da4:	003da106 	br	8111742c <__reset+0xfb0f742c>
81117da8:	a5001014 	ori	r20,r20,64
81117dac:	80c00007 	ldb	r3,0(r16)
81117db0:	003d9d06 	br	81117428 <__reset+0xfb0f7428>
81117db4:	da802217 	ldw	r10,136(sp)
81117db8:	d8001d85 	stb	zero,118(sp)
81117dbc:	50c00204 	addi	r3,r10,8
81117dc0:	54800017 	ldw	r18,0(r10)
81117dc4:	54c00117 	ldw	r19,4(r10)
81117dc8:	4801ca16 	blt	r9,zero,811184f4 <___vfiprintf_internal_r+0x1248>
81117dcc:	013fdfc4 	movi	r4,-129
81117dd0:	94c4b03a 	or	r2,r18,r19
81117dd4:	d8c02215 	stw	r3,136(sp)
81117dd8:	a128703a 	and	r20,r20,r4
81117ddc:	0039883a 	mov	fp,zero
81117de0:	103f341e 	bne	r2,zero,81117ab4 <__reset+0xfb0f7ab4>
81117de4:	483e2e26 	beq	r9,zero,811176a0 <__reset+0xfb0f76a0>
81117de8:	0025883a 	mov	r18,zero
81117dec:	94800c04 	addi	r18,r18,48
81117df0:	dc8019c5 	stb	r18,103(sp)
81117df4:	dcc02717 	ldw	r19,156(sp)
81117df8:	dd4019c4 	addi	r21,sp,103
81117dfc:	003e2b06 	br	811176ac <__reset+0xfb0f76ac>
81117e00:	21003fcc 	andi	r4,r4,255
81117e04:	2002361e 	bne	r4,zero,811186e0 <___vfiprintf_internal_r+0x1434>
81117e08:	1801c126 	beq	r3,zero,81118510 <___vfiprintf_internal_r+0x1264>
81117e0c:	04800044 	movi	r18,1
81117e10:	d8c01005 	stb	r3,64(sp)
81117e14:	d8001d85 	stb	zero,118(sp)
81117e18:	9027883a 	mov	r19,r18
81117e1c:	dd401004 	addi	r21,sp,64
81117e20:	003f1106 	br	81117a68 <__reset+0xfb0f7a68>
81117e24:	d9402117 	ldw	r5,132(sp)
81117e28:	d9002017 	ldw	r4,128(sp)
81117e2c:	d9801a04 	addi	r6,sp,104
81117e30:	d9c02b15 	stw	r7,172(sp)
81117e34:	dbc02a15 	stw	r15,168(sp)
81117e38:	11171980 	call	81117198 <__sprint_r.part.0>
81117e3c:	d9c02b17 	ldw	r7,172(sp)
81117e40:	dbc02a17 	ldw	r15,168(sp)
81117e44:	10006d1e 	bne	r2,zero,81117ffc <___vfiprintf_internal_r+0xd50>
81117e48:	d9801b17 	ldw	r6,108(sp)
81117e4c:	d8801c17 	ldw	r2,112(sp)
81117e50:	d811883a 	mov	r8,sp
81117e54:	31400044 	addi	r5,r6,1
81117e58:	003e3306 	br	81117728 <__reset+0xfb0f7728>
81117e5c:	d9401b17 	ldw	r5,108(sp)
81117e60:	d8801c17 	ldw	r2,112(sp)
81117e64:	29000044 	addi	r4,r5,1
81117e68:	d8c01d87 	ldb	r3,118(sp)
81117e6c:	183e4d26 	beq	r3,zero,811177a4 <__reset+0xfb0f77a4>
81117e70:	00c00044 	movi	r3,1
81117e74:	d9401d84 	addi	r5,sp,118
81117e78:	10c5883a 	add	r2,r2,r3
81117e7c:	41400015 	stw	r5,0(r8)
81117e80:	40c00115 	stw	r3,4(r8)
81117e84:	d8801c15 	stw	r2,112(sp)
81117e88:	d9001b15 	stw	r4,108(sp)
81117e8c:	014001c4 	movi	r5,7
81117e90:	2900a90e 	bge	r5,r4,81118138 <___vfiprintf_internal_r+0xe8c>
81117e94:	1000da1e 	bne	r2,zero,81118200 <___vfiprintf_internal_r+0xf54>
81117e98:	7000ab1e 	bne	r14,zero,81118148 <___vfiprintf_internal_r+0xe9c>
81117e9c:	000b883a 	mov	r5,zero
81117ea0:	1809883a 	mov	r4,r3
81117ea4:	d811883a 	mov	r8,sp
81117ea8:	00c02004 	movi	r3,128
81117eac:	e0fe4d26 	beq	fp,r3,811177e4 <__reset+0xfb0f77e4>
81117eb0:	4cf9c83a 	sub	fp,r9,r19
81117eb4:	073e7b0e 	bge	zero,fp,811178a4 <__reset+0xfb0f78a4>
81117eb8:	01c00404 	movi	r7,16
81117ebc:	3f01900e 	bge	r7,fp,81118500 <___vfiprintf_internal_r+0x1254>
81117ec0:	00e044b4 	movhi	r3,33042
81117ec4:	18c94504 	addi	r3,r3,9492
81117ec8:	d8c02415 	stw	r3,144(sp)
81117ecc:	034001c4 	movi	r13,7
81117ed0:	00000506 	br	81117ee8 <___vfiprintf_internal_r+0xc3c>
81117ed4:	29000084 	addi	r4,r5,2
81117ed8:	42000204 	addi	r8,r8,8
81117edc:	180b883a 	mov	r5,r3
81117ee0:	e73ffc04 	addi	fp,fp,-16
81117ee4:	3f000d0e 	bge	r7,fp,81117f1c <___vfiprintf_internal_r+0xc70>
81117ee8:	10800404 	addi	r2,r2,16
81117eec:	28c00044 	addi	r3,r5,1
81117ef0:	45c00015 	stw	r23,0(r8)
81117ef4:	41c00115 	stw	r7,4(r8)
81117ef8:	d8801c15 	stw	r2,112(sp)
81117efc:	d8c01b15 	stw	r3,108(sp)
81117f00:	68fff40e 	bge	r13,r3,81117ed4 <__reset+0xfb0f7ed4>
81117f04:	1000101e 	bne	r2,zero,81117f48 <___vfiprintf_internal_r+0xc9c>
81117f08:	e73ffc04 	addi	fp,fp,-16
81117f0c:	01000044 	movi	r4,1
81117f10:	000b883a 	mov	r5,zero
81117f14:	d811883a 	mov	r8,sp
81117f18:	3f3ff316 	blt	r7,fp,81117ee8 <__reset+0xfb0f7ee8>
81117f1c:	da802417 	ldw	r10,144(sp)
81117f20:	1705883a 	add	r2,r2,fp
81117f24:	47000115 	stw	fp,4(r8)
81117f28:	42800015 	stw	r10,0(r8)
81117f2c:	d8801c15 	stw	r2,112(sp)
81117f30:	d9001b15 	stw	r4,108(sp)
81117f34:	00c001c4 	movi	r3,7
81117f38:	19003616 	blt	r3,r4,81118014 <___vfiprintf_internal_r+0xd68>
81117f3c:	42000204 	addi	r8,r8,8
81117f40:	21000044 	addi	r4,r4,1
81117f44:	003e5706 	br	811178a4 <__reset+0xfb0f78a4>
81117f48:	d9402117 	ldw	r5,132(sp)
81117f4c:	d9002017 	ldw	r4,128(sp)
81117f50:	d9801a04 	addi	r6,sp,104
81117f54:	d9c02b15 	stw	r7,172(sp)
81117f58:	db402a15 	stw	r13,168(sp)
81117f5c:	11171980 	call	81117198 <__sprint_r.part.0>
81117f60:	d9c02b17 	ldw	r7,172(sp)
81117f64:	db402a17 	ldw	r13,168(sp)
81117f68:	1000241e 	bne	r2,zero,81117ffc <___vfiprintf_internal_r+0xd50>
81117f6c:	d9401b17 	ldw	r5,108(sp)
81117f70:	d8801c17 	ldw	r2,112(sp)
81117f74:	d811883a 	mov	r8,sp
81117f78:	29000044 	addi	r4,r5,1
81117f7c:	003fd806 	br	81117ee0 <__reset+0xfb0f7ee0>
81117f80:	d9401b17 	ldw	r5,108(sp)
81117f84:	00e044b4 	movhi	r3,33042
81117f88:	18c94904 	addi	r3,r3,9508
81117f8c:	d8c02415 	stw	r3,144(sp)
81117f90:	29400044 	addi	r5,r5,1
81117f94:	d8c02417 	ldw	r3,144(sp)
81117f98:	14c5883a 	add	r2,r2,r19
81117f9c:	44c00115 	stw	r19,4(r8)
81117fa0:	40c00015 	stw	r3,0(r8)
81117fa4:	d8801c15 	stw	r2,112(sp)
81117fa8:	d9401b15 	stw	r5,108(sp)
81117fac:	00c001c4 	movi	r3,7
81117fb0:	1940070e 	bge	r3,r5,81117fd0 <___vfiprintf_internal_r+0xd24>
81117fb4:	103e4826 	beq	r2,zero,811178d8 <__reset+0xfb0f78d8>
81117fb8:	d9402117 	ldw	r5,132(sp)
81117fbc:	d9002017 	ldw	r4,128(sp)
81117fc0:	d9801a04 	addi	r6,sp,104
81117fc4:	11171980 	call	81117198 <__sprint_r.part.0>
81117fc8:	10000c1e 	bne	r2,zero,81117ffc <___vfiprintf_internal_r+0xd50>
81117fcc:	d8801c17 	ldw	r2,112(sp)
81117fd0:	8c80010e 	bge	r17,r18,81117fd8 <___vfiprintf_internal_r+0xd2c>
81117fd4:	9023883a 	mov	r17,r18
81117fd8:	da802317 	ldw	r10,140(sp)
81117fdc:	5455883a 	add	r10,r10,r17
81117fe0:	da802315 	stw	r10,140(sp)
81117fe4:	103e4126 	beq	r2,zero,811178ec <__reset+0xfb0f78ec>
81117fe8:	d9402117 	ldw	r5,132(sp)
81117fec:	d9002017 	ldw	r4,128(sp)
81117ff0:	d9801a04 	addi	r6,sp,104
81117ff4:	11171980 	call	81117198 <__sprint_r.part.0>
81117ff8:	103e3c26 	beq	r2,zero,811178ec <__reset+0xfb0f78ec>
81117ffc:	dd002117 	ldw	r20,132(sp)
81118000:	a080030b 	ldhu	r2,12(r20)
81118004:	1080100c 	andi	r2,r2,64
81118008:	1001231e 	bne	r2,zero,81118498 <___vfiprintf_internal_r+0x11ec>
8111800c:	d8802317 	ldw	r2,140(sp)
81118010:	003d7b06 	br	81117600 <__reset+0xfb0f7600>
81118014:	1000991e 	bne	r2,zero,8111827c <___vfiprintf_internal_r+0xfd0>
81118018:	00c00044 	movi	r3,1
8111801c:	9805883a 	mov	r2,r19
81118020:	dd400015 	stw	r21,0(sp)
81118024:	dcc00115 	stw	r19,4(sp)
81118028:	dcc01c15 	stw	r19,112(sp)
8111802c:	d8c01b15 	stw	r3,108(sp)
81118030:	d811883a 	mov	r8,sp
81118034:	42000204 	addi	r8,r8,8
81118038:	a2c0010c 	andi	r11,r20,4
8111803c:	583fe426 	beq	r11,zero,81117fd0 <__reset+0xfb0f7fd0>
81118040:	8ca7c83a 	sub	r19,r17,r18
81118044:	04ffe20e 	bge	zero,r19,81117fd0 <__reset+0xfb0f7fd0>
81118048:	01c00404 	movi	r7,16
8111804c:	3cffcc0e 	bge	r7,r19,81117f80 <__reset+0xfb0f7f80>
81118050:	02a044b4 	movhi	r10,33042
81118054:	52894904 	addi	r10,r10,9508
81118058:	d9001b17 	ldw	r4,108(sp)
8111805c:	da802415 	stw	r10,144(sp)
81118060:	382b883a 	mov	r21,r7
81118064:	050001c4 	movi	r20,7
81118068:	df002017 	ldw	fp,128(sp)
8111806c:	00000506 	br	81118084 <___vfiprintf_internal_r+0xdd8>
81118070:	21400084 	addi	r5,r4,2
81118074:	42000204 	addi	r8,r8,8
81118078:	1809883a 	mov	r4,r3
8111807c:	9cfffc04 	addi	r19,r19,-16
81118080:	acffc40e 	bge	r21,r19,81117f94 <__reset+0xfb0f7f94>
81118084:	10800404 	addi	r2,r2,16
81118088:	20c00044 	addi	r3,r4,1
8111808c:	45800015 	stw	r22,0(r8)
81118090:	45400115 	stw	r21,4(r8)
81118094:	d8801c15 	stw	r2,112(sp)
81118098:	d8c01b15 	stw	r3,108(sp)
8111809c:	a0fff40e 	bge	r20,r3,81118070 <__reset+0xfb0f8070>
811180a0:	1000041e 	bne	r2,zero,811180b4 <___vfiprintf_internal_r+0xe08>
811180a4:	01400044 	movi	r5,1
811180a8:	0009883a 	mov	r4,zero
811180ac:	d811883a 	mov	r8,sp
811180b0:	003ff206 	br	8111807c <__reset+0xfb0f807c>
811180b4:	d9402117 	ldw	r5,132(sp)
811180b8:	d9801a04 	addi	r6,sp,104
811180bc:	e009883a 	mov	r4,fp
811180c0:	11171980 	call	81117198 <__sprint_r.part.0>
811180c4:	103fcd1e 	bne	r2,zero,81117ffc <__reset+0xfb0f7ffc>
811180c8:	d9001b17 	ldw	r4,108(sp)
811180cc:	d8801c17 	ldw	r2,112(sp)
811180d0:	d811883a 	mov	r8,sp
811180d4:	21400044 	addi	r5,r4,1
811180d8:	003fe806 	br	8111807c <__reset+0xfb0f807c>
811180dc:	d9402117 	ldw	r5,132(sp)
811180e0:	d9002017 	ldw	r4,128(sp)
811180e4:	d9801a04 	addi	r6,sp,104
811180e8:	d9c02b15 	stw	r7,172(sp)
811180ec:	db402a15 	stw	r13,168(sp)
811180f0:	11171980 	call	81117198 <__sprint_r.part.0>
811180f4:	d9c02b17 	ldw	r7,172(sp)
811180f8:	db402a17 	ldw	r13,168(sp)
811180fc:	103fbf1e 	bne	r2,zero,81117ffc <__reset+0xfb0f7ffc>
81118100:	d9401b17 	ldw	r5,108(sp)
81118104:	d8801c17 	ldw	r2,112(sp)
81118108:	d811883a 	mov	r8,sp
8111810c:	29800044 	addi	r6,r5,1
81118110:	003dc406 	br	81117824 <__reset+0xfb0f7824>
81118114:	1000d21e 	bne	r2,zero,81118460 <___vfiprintf_internal_r+0x11b4>
81118118:	d8c01d87 	ldb	r3,118(sp)
8111811c:	18009526 	beq	r3,zero,81118374 <___vfiprintf_internal_r+0x10c8>
81118120:	00800044 	movi	r2,1
81118124:	d8c01d84 	addi	r3,sp,118
81118128:	1009883a 	mov	r4,r2
8111812c:	d8c00015 	stw	r3,0(sp)
81118130:	d8800115 	stw	r2,4(sp)
81118134:	d811883a 	mov	r8,sp
81118138:	200b883a 	mov	r5,r4
8111813c:	42000204 	addi	r8,r8,8
81118140:	21000044 	addi	r4,r4,1
81118144:	003d9706 	br	811177a4 <__reset+0xfb0f77a4>
81118148:	d9001d04 	addi	r4,sp,116
8111814c:	00800084 	movi	r2,2
81118150:	d9000015 	stw	r4,0(sp)
81118154:	d8800115 	stw	r2,4(sp)
81118158:	1809883a 	mov	r4,r3
8111815c:	d811883a 	mov	r8,sp
81118160:	200b883a 	mov	r5,r4
81118164:	42000204 	addi	r8,r8,8
81118168:	21000044 	addi	r4,r4,1
8111816c:	003f4e06 	br	81117ea8 <__reset+0xfb0f7ea8>
81118170:	d8001d85 	stb	zero,118(sp)
81118174:	48005016 	blt	r9,zero,811182b8 <___vfiprintf_internal_r+0x100c>
81118178:	00ffdfc4 	movi	r3,-129
8111817c:	94c4b03a 	or	r2,r18,r19
81118180:	a0e8703a 	and	r20,r20,r3
81118184:	103d4426 	beq	r2,zero,81117698 <__reset+0xfb0f7698>
81118188:	0039883a 	mov	fp,zero
8111818c:	d9002617 	ldw	r4,152(sp)
81118190:	dd401a04 	addi	r21,sp,104
81118194:	908003cc 	andi	r2,r18,15
81118198:	9806973a 	slli	r3,r19,28
8111819c:	2085883a 	add	r2,r4,r2
811181a0:	9024d13a 	srli	r18,r18,4
811181a4:	10800003 	ldbu	r2,0(r2)
811181a8:	9826d13a 	srli	r19,r19,4
811181ac:	ad7fffc4 	addi	r21,r21,-1
811181b0:	1ca4b03a 	or	r18,r3,r18
811181b4:	a8800005 	stb	r2,0(r21)
811181b8:	94c4b03a 	or	r2,r18,r19
811181bc:	103ff51e 	bne	r2,zero,81118194 <__reset+0xfb0f8194>
811181c0:	003e5906 	br	81117b28 <__reset+0xfb0f7b28>
811181c4:	d9402117 	ldw	r5,132(sp)
811181c8:	d9002017 	ldw	r4,128(sp)
811181cc:	d9801a04 	addi	r6,sp,104
811181d0:	11171980 	call	81117198 <__sprint_r.part.0>
811181d4:	103f891e 	bne	r2,zero,81117ffc <__reset+0xfb0f7ffc>
811181d8:	d8801c17 	ldw	r2,112(sp)
811181dc:	d811883a 	mov	r8,sp
811181e0:	003f9506 	br	81118038 <__reset+0xfb0f8038>
811181e4:	d9402117 	ldw	r5,132(sp)
811181e8:	d9002017 	ldw	r4,128(sp)
811181ec:	d9801a04 	addi	r6,sp,104
811181f0:	11171980 	call	81117198 <__sprint_r.part.0>
811181f4:	103f811e 	bne	r2,zero,81117ffc <__reset+0xfb0f7ffc>
811181f8:	d811883a 	mov	r8,sp
811181fc:	003ced06 	br	811175b4 <__reset+0xfb0f75b4>
81118200:	d9402117 	ldw	r5,132(sp)
81118204:	d9002017 	ldw	r4,128(sp)
81118208:	d9801a04 	addi	r6,sp,104
8111820c:	da402c15 	stw	r9,176(sp)
81118210:	db802a15 	stw	r14,168(sp)
81118214:	11171980 	call	81117198 <__sprint_r.part.0>
81118218:	da402c17 	ldw	r9,176(sp)
8111821c:	db802a17 	ldw	r14,168(sp)
81118220:	103f761e 	bne	r2,zero,81117ffc <__reset+0xfb0f7ffc>
81118224:	d9401b17 	ldw	r5,108(sp)
81118228:	d8801c17 	ldw	r2,112(sp)
8111822c:	d811883a 	mov	r8,sp
81118230:	29000044 	addi	r4,r5,1
81118234:	003d5b06 	br	811177a4 <__reset+0xfb0f77a4>
81118238:	d9402117 	ldw	r5,132(sp)
8111823c:	d9002017 	ldw	r4,128(sp)
81118240:	d9801a04 	addi	r6,sp,104
81118244:	da402c15 	stw	r9,176(sp)
81118248:	11171980 	call	81117198 <__sprint_r.part.0>
8111824c:	da402c17 	ldw	r9,176(sp)
81118250:	103f6a1e 	bne	r2,zero,81117ffc <__reset+0xfb0f7ffc>
81118254:	d9401b17 	ldw	r5,108(sp)
81118258:	d8801c17 	ldw	r2,112(sp)
8111825c:	d811883a 	mov	r8,sp
81118260:	29000044 	addi	r4,r5,1
81118264:	003f1006 	br	81117ea8 <__reset+0xfb0f7ea8>
81118268:	1000c31e 	bne	r2,zero,81118578 <___vfiprintf_internal_r+0x12cc>
8111826c:	01000044 	movi	r4,1
81118270:	000b883a 	mov	r5,zero
81118274:	d811883a 	mov	r8,sp
81118278:	003f0d06 	br	81117eb0 <__reset+0xfb0f7eb0>
8111827c:	d9402117 	ldw	r5,132(sp)
81118280:	d9002017 	ldw	r4,128(sp)
81118284:	d9801a04 	addi	r6,sp,104
81118288:	11171980 	call	81117198 <__sprint_r.part.0>
8111828c:	103f5b1e 	bne	r2,zero,81117ffc <__reset+0xfb0f7ffc>
81118290:	d9001b17 	ldw	r4,108(sp)
81118294:	d8801c17 	ldw	r2,112(sp)
81118298:	d811883a 	mov	r8,sp
8111829c:	21000044 	addi	r4,r4,1
811182a0:	003d8006 	br	811178a4 <__reset+0xfb0f78a4>
811182a4:	012044b4 	movhi	r4,33042
811182a8:	2108d504 	addi	r4,r4,9044
811182ac:	d9002615 	stw	r4,152(sp)
811182b0:	d8c02215 	stw	r3,136(sp)
811182b4:	1029883a 	mov	r20,r2
811182b8:	94c4b03a 	or	r2,r18,r19
811182bc:	103fb21e 	bne	r2,zero,81118188 <__reset+0xfb0f8188>
811182c0:	0039883a 	mov	fp,zero
811182c4:	00800084 	movi	r2,2
811182c8:	003e6b06 	br	81117c78 <__reset+0xfb0f7c78>
811182cc:	da802217 	ldw	r10,136(sp)
811182d0:	d8001d85 	stb	zero,118(sp)
811182d4:	0027883a 	mov	r19,zero
811182d8:	50800104 	addi	r2,r10,4
811182dc:	54800017 	ldw	r18,0(r10)
811182e0:	483e6016 	blt	r9,zero,81117c64 <__reset+0xfb0f7c64>
811182e4:	00ffdfc4 	movi	r3,-129
811182e8:	d8802215 	stw	r2,136(sp)
811182ec:	a0e8703a 	and	r20,r20,r3
811182f0:	0039883a 	mov	fp,zero
811182f4:	903ebb26 	beq	r18,zero,81117de4 <__reset+0xfb0f7de4>
811182f8:	00800244 	movi	r2,9
811182fc:	14bdee36 	bltu	r2,r18,81117ab8 <__reset+0xfb0f7ab8>
81118300:	003eba06 	br	81117dec <__reset+0xfb0f7dec>
81118304:	00800c04 	movi	r2,48
81118308:	d8c01d45 	stb	r3,117(sp)
8111830c:	d8801d05 	stb	r2,116(sp)
81118310:	d8001d85 	stb	zero,118(sp)
81118314:	a0c00094 	ori	r3,r20,2
81118318:	4800a916 	blt	r9,zero,811185c0 <___vfiprintf_internal_r+0x1314>
8111831c:	00bfdfc4 	movi	r2,-129
81118320:	a096703a 	and	r11,r20,r2
81118324:	5d000094 	ori	r20,r11,2
81118328:	0039883a 	mov	fp,zero
8111832c:	003f9706 	br	8111818c <__reset+0xfb0f818c>
81118330:	8025883a 	mov	r18,r16
81118334:	003c2e06 	br	811173f0 <__reset+0xfb0f73f0>
81118338:	00a044b4 	movhi	r2,33042
8111833c:	1088d504 	addi	r2,r2,9044
81118340:	0039883a 	mov	fp,zero
81118344:	d8802615 	stw	r2,152(sp)
81118348:	003f9006 	br	8111818c <__reset+0xfb0f818c>
8111834c:	04a5c83a 	sub	r18,zero,r18
81118350:	07000b44 	movi	fp,45
81118354:	9004c03a 	cmpne	r2,r18,zero
81118358:	04e7c83a 	sub	r19,zero,r19
8111835c:	df001d85 	stb	fp,118(sp)
81118360:	98a7c83a 	sub	r19,r19,r2
81118364:	48009f16 	blt	r9,zero,811185e4 <___vfiprintf_internal_r+0x1338>
81118368:	00bfdfc4 	movi	r2,-129
8111836c:	a0a8703a 	and	r20,r20,r2
81118370:	003dd006 	br	81117ab4 <__reset+0xfb0f7ab4>
81118374:	70004c26 	beq	r14,zero,811184a8 <___vfiprintf_internal_r+0x11fc>
81118378:	00800084 	movi	r2,2
8111837c:	d8c01d04 	addi	r3,sp,116
81118380:	d8c00015 	stw	r3,0(sp)
81118384:	d8800115 	stw	r2,4(sp)
81118388:	01000044 	movi	r4,1
8111838c:	d811883a 	mov	r8,sp
81118390:	003f7306 	br	81118160 <__reset+0xfb0f8160>
81118394:	a080100c 	andi	r2,r20,64
81118398:	da802217 	ldw	r10,136(sp)
8111839c:	103e0626 	beq	r2,zero,81117bb8 <__reset+0xfb0f7bb8>
811183a0:	5480000f 	ldh	r18,0(r10)
811183a4:	52800104 	addi	r10,r10,4
811183a8:	da802215 	stw	r10,136(sp)
811183ac:	9027d7fa 	srai	r19,r18,31
811183b0:	9805883a 	mov	r2,r19
811183b4:	003db806 	br	81117a98 <__reset+0xfb0f7a98>
811183b8:	a080040c 	andi	r2,r20,16
811183bc:	1000091e 	bne	r2,zero,811183e4 <___vfiprintf_internal_r+0x1138>
811183c0:	a2c0100c 	andi	r11,r20,64
811183c4:	58000726 	beq	r11,zero,811183e4 <___vfiprintf_internal_r+0x1138>
811183c8:	da802217 	ldw	r10,136(sp)
811183cc:	50800017 	ldw	r2,0(r10)
811183d0:	52800104 	addi	r10,r10,4
811183d4:	da802215 	stw	r10,136(sp)
811183d8:	da802317 	ldw	r10,140(sp)
811183dc:	1280000d 	sth	r10,0(r2)
811183e0:	003be706 	br	81117380 <__reset+0xfb0f7380>
811183e4:	da802217 	ldw	r10,136(sp)
811183e8:	50800017 	ldw	r2,0(r10)
811183ec:	52800104 	addi	r10,r10,4
811183f0:	da802215 	stw	r10,136(sp)
811183f4:	da802317 	ldw	r10,140(sp)
811183f8:	12800015 	stw	r10,0(r2)
811183fc:	003be006 	br	81117380 <__reset+0xfb0f7380>
81118400:	a080100c 	andi	r2,r20,64
81118404:	da802217 	ldw	r10,136(sp)
81118408:	10003026 	beq	r2,zero,811184cc <___vfiprintf_internal_r+0x1220>
8111840c:	5480000b 	ldhu	r18,0(r10)
81118410:	52800104 	addi	r10,r10,4
81118414:	0027883a 	mov	r19,zero
81118418:	da802215 	stw	r10,136(sp)
8111841c:	003d8006 	br	81117a20 <__reset+0xfb0f7a20>
81118420:	80c00007 	ldb	r3,0(r16)
81118424:	003c0006 	br	81117428 <__reset+0xfb0f7428>
81118428:	a080100c 	andi	r2,r20,64
8111842c:	d8001d85 	stb	zero,118(sp)
81118430:	da802217 	ldw	r10,136(sp)
81118434:	1000201e 	bne	r2,zero,811184b8 <___vfiprintf_internal_r+0x120c>
81118438:	50800104 	addi	r2,r10,4
8111843c:	54800017 	ldw	r18,0(r10)
81118440:	0027883a 	mov	r19,zero
81118444:	483def0e 	bge	r9,zero,81117c04 <__reset+0xfb0f7c04>
81118448:	94c6b03a 	or	r3,r18,r19
8111844c:	d8802215 	stw	r2,136(sp)
81118450:	183d4e1e 	bne	r3,zero,8111798c <__reset+0xfb0f798c>
81118454:	0039883a 	mov	fp,zero
81118458:	0005883a 	mov	r2,zero
8111845c:	003e0606 	br	81117c78 <__reset+0xfb0f7c78>
81118460:	d9402117 	ldw	r5,132(sp)
81118464:	d9002017 	ldw	r4,128(sp)
81118468:	d9801a04 	addi	r6,sp,104
8111846c:	da402c15 	stw	r9,176(sp)
81118470:	db802a15 	stw	r14,168(sp)
81118474:	11171980 	call	81117198 <__sprint_r.part.0>
81118478:	da402c17 	ldw	r9,176(sp)
8111847c:	db802a17 	ldw	r14,168(sp)
81118480:	103ede1e 	bne	r2,zero,81117ffc <__reset+0xfb0f7ffc>
81118484:	d9401b17 	ldw	r5,108(sp)
81118488:	d8801c17 	ldw	r2,112(sp)
8111848c:	d811883a 	mov	r8,sp
81118490:	29000044 	addi	r4,r5,1
81118494:	003e7406 	br	81117e68 <__reset+0xfb0f7e68>
81118498:	00bfffc4 	movi	r2,-1
8111849c:	003c5806 	br	81117600 <__reset+0xfb0f7600>
811184a0:	d811883a 	mov	r8,sp
811184a4:	003ee806 	br	81118048 <__reset+0xfb0f8048>
811184a8:	000b883a 	mov	r5,zero
811184ac:	01000044 	movi	r4,1
811184b0:	d811883a 	mov	r8,sp
811184b4:	003e7c06 	br	81117ea8 <__reset+0xfb0f7ea8>
811184b8:	50800104 	addi	r2,r10,4
811184bc:	5480000b 	ldhu	r18,0(r10)
811184c0:	0027883a 	mov	r19,zero
811184c4:	483dcf0e 	bge	r9,zero,81117c04 <__reset+0xfb0f7c04>
811184c8:	003fdf06 	br	81118448 <__reset+0xfb0f8448>
811184cc:	54800017 	ldw	r18,0(r10)
811184d0:	52800104 	addi	r10,r10,4
811184d4:	0027883a 	mov	r19,zero
811184d8:	da802215 	stw	r10,136(sp)
811184dc:	003d5006 	br	81117a20 <__reset+0xfb0f7a20>
811184e0:	50800104 	addi	r2,r10,4
811184e4:	5480000b 	ldhu	r18,0(r10)
811184e8:	0027883a 	mov	r19,zero
811184ec:	483f7d0e 	bge	r9,zero,811182e4 <__reset+0xfb0f82e4>
811184f0:	003ddc06 	br	81117c64 <__reset+0xfb0f7c64>
811184f4:	d8c02215 	stw	r3,136(sp)
811184f8:	0039883a 	mov	fp,zero
811184fc:	003ddb06 	br	81117c6c <__reset+0xfb0f7c6c>
81118500:	02a044b4 	movhi	r10,33042
81118504:	52894504 	addi	r10,r10,9492
81118508:	da802415 	stw	r10,144(sp)
8111850c:	003e8306 	br	81117f1c <__reset+0xfb0f7f1c>
81118510:	d8801c17 	ldw	r2,112(sp)
81118514:	dd002117 	ldw	r20,132(sp)
81118518:	103eb926 	beq	r2,zero,81118000 <__reset+0xfb0f8000>
8111851c:	d9002017 	ldw	r4,128(sp)
81118520:	d9801a04 	addi	r6,sp,104
81118524:	a00b883a 	mov	r5,r20
81118528:	11171980 	call	81117198 <__sprint_r.part.0>
8111852c:	003eb406 	br	81118000 <__reset+0xfb0f8000>
81118530:	80c00043 	ldbu	r3,1(r16)
81118534:	a5000814 	ori	r20,r20,32
81118538:	84000044 	addi	r16,r16,1
8111853c:	18c03fcc 	andi	r3,r3,255
81118540:	18c0201c 	xori	r3,r3,128
81118544:	18ffe004 	addi	r3,r3,-128
81118548:	003bb706 	br	81117428 <__reset+0xfb0f7428>
8111854c:	a809883a 	mov	r4,r21
81118550:	d8c02a15 	stw	r3,168(sp)
81118554:	da002b15 	stw	r8,172(sp)
81118558:	1115cf40 	call	81115cf4 <strlen>
8111855c:	d8c02a17 	ldw	r3,168(sp)
81118560:	1027883a 	mov	r19,r2
81118564:	df001d83 	ldbu	fp,118(sp)
81118568:	d8c02215 	stw	r3,136(sp)
8111856c:	0013883a 	mov	r9,zero
81118570:	da002b17 	ldw	r8,172(sp)
81118574:	003c4d06 	br	811176ac <__reset+0xfb0f76ac>
81118578:	d9402117 	ldw	r5,132(sp)
8111857c:	d9002017 	ldw	r4,128(sp)
81118580:	d9801a04 	addi	r6,sp,104
81118584:	da402c15 	stw	r9,176(sp)
81118588:	11171980 	call	81117198 <__sprint_r.part.0>
8111858c:	da402c17 	ldw	r9,176(sp)
81118590:	103e9a1e 	bne	r2,zero,81117ffc <__reset+0xfb0f7ffc>
81118594:	d9401b17 	ldw	r5,108(sp)
81118598:	d8801c17 	ldw	r2,112(sp)
8111859c:	d811883a 	mov	r8,sp
811185a0:	29000044 	addi	r4,r5,1
811185a4:	003e4206 	br	81117eb0 <__reset+0xfb0f7eb0>
811185a8:	d9401b17 	ldw	r5,108(sp)
811185ac:	012044b4 	movhi	r4,33042
811185b0:	21094904 	addi	r4,r4,9508
811185b4:	d9002415 	stw	r4,144(sp)
811185b8:	29400044 	addi	r5,r5,1
811185bc:	003c6d06 	br	81117774 <__reset+0xfb0f7774>
811185c0:	0039883a 	mov	fp,zero
811185c4:	00800084 	movi	r2,2
811185c8:	10803fcc 	andi	r2,r2,255
811185cc:	01000044 	movi	r4,1
811185d0:	11001e26 	beq	r2,r4,8111864c <___vfiprintf_internal_r+0x13a0>
811185d4:	01000084 	movi	r4,2
811185d8:	11001e1e 	bne	r2,r4,81118654 <___vfiprintf_internal_r+0x13a8>
811185dc:	1829883a 	mov	r20,r3
811185e0:	003eea06 	br	8111818c <__reset+0xfb0f818c>
811185e4:	a007883a 	mov	r3,r20
811185e8:	00800044 	movi	r2,1
811185ec:	003ff606 	br	811185c8 <__reset+0xfb0f85c8>
811185f0:	00800184 	movi	r2,6
811185f4:	1240012e 	bgeu	r2,r9,811185fc <___vfiprintf_internal_r+0x1350>
811185f8:	1013883a 	mov	r9,r2
811185fc:	4827883a 	mov	r19,r9
81118600:	4825883a 	mov	r18,r9
81118604:	48001516 	blt	r9,zero,8111865c <___vfiprintf_internal_r+0x13b0>
81118608:	056044b4 	movhi	r21,33042
8111860c:	d8c02215 	stw	r3,136(sp)
81118610:	ad48da04 	addi	r21,r21,9064
81118614:	003d1406 	br	81117a68 <__reset+0xfb0f7a68>
81118618:	02a044b4 	movhi	r10,33042
8111861c:	52894504 	addi	r10,r10,9492
81118620:	da802415 	stw	r10,144(sp)
81118624:	200d883a 	mov	r6,r4
81118628:	003c9106 	br	81117870 <__reset+0xfb0f7870>
8111862c:	5021883a 	mov	r16,r10
81118630:	0013883a 	mov	r9,zero
81118634:	003b7d06 	br	8111742c <__reset+0xfb0f742c>
81118638:	4827883a 	mov	r19,r9
8111863c:	df001d83 	ldbu	fp,118(sp)
81118640:	d8c02215 	stw	r3,136(sp)
81118644:	0013883a 	mov	r9,zero
81118648:	003c1806 	br	811176ac <__reset+0xfb0f76ac>
8111864c:	1829883a 	mov	r20,r3
81118650:	003d1806 	br	81117ab4 <__reset+0xfb0f7ab4>
81118654:	1829883a 	mov	r20,r3
81118658:	003ccd06 	br	81117990 <__reset+0xfb0f7990>
8111865c:	0025883a 	mov	r18,zero
81118660:	003fe906 	br	81118608 <__reset+0xfb0f8608>
81118664:	d8802217 	ldw	r2,136(sp)
81118668:	80c00043 	ldbu	r3,1(r16)
8111866c:	5021883a 	mov	r16,r10
81118670:	12400017 	ldw	r9,0(r2)
81118674:	10800104 	addi	r2,r2,4
81118678:	d8802215 	stw	r2,136(sp)
8111867c:	483faf0e 	bge	r9,zero,8111853c <__reset+0xfb0f853c>
81118680:	18c03fcc 	andi	r3,r3,255
81118684:	18c0201c 	xori	r3,r3,128
81118688:	027fffc4 	movi	r9,-1
8111868c:	18ffe004 	addi	r3,r3,-128
81118690:	003b6506 	br	81117428 <__reset+0xfb0f7428>
81118694:	d9c01d85 	stb	r7,118(sp)
81118698:	003ca006 	br	8111791c <__reset+0xfb0f791c>
8111869c:	d9c01d85 	stb	r7,118(sp)
811186a0:	003cad06 	br	81117958 <__reset+0xfb0f7958>
811186a4:	d9c01d85 	stb	r7,118(sp)
811186a8:	003d7d06 	br	81117ca0 <__reset+0xfb0f7ca0>
811186ac:	d9c01d85 	stb	r7,118(sp)
811186b0:	003d5f06 	br	81117c30 <__reset+0xfb0f7c30>
811186b4:	a080004c 	andi	r2,r20,1
811186b8:	0039883a 	mov	fp,zero
811186bc:	10000526 	beq	r2,zero,811186d4 <___vfiprintf_internal_r+0x1428>
811186c0:	00800c04 	movi	r2,48
811186c4:	d88019c5 	stb	r2,103(sp)
811186c8:	dcc02717 	ldw	r19,156(sp)
811186cc:	dd4019c4 	addi	r21,sp,103
811186d0:	003bf606 	br	811176ac <__reset+0xfb0f76ac>
811186d4:	0027883a 	mov	r19,zero
811186d8:	dd401a04 	addi	r21,sp,104
811186dc:	003bf306 	br	811176ac <__reset+0xfb0f76ac>
811186e0:	d9c01d85 	stb	r7,118(sp)
811186e4:	003dc806 	br	81117e08 <__reset+0xfb0f7e08>
811186e8:	d9c01d85 	stb	r7,118(sp)
811186ec:	003d3a06 	br	81117bd8 <__reset+0xfb0f7bd8>
811186f0:	d9c01d85 	stb	r7,118(sp)
811186f4:	003d2a06 	br	81117ba0 <__reset+0xfb0f7ba0>
811186f8:	d9c01d85 	stb	r7,118(sp)
811186fc:	003cde06 	br	81117a78 <__reset+0xfb0f7a78>
81118700:	d9c01d85 	stb	r7,118(sp)
81118704:	003cbc06 	br	811179f8 <__reset+0xfb0f79f8>

81118708 <__vfiprintf_internal>:
81118708:	00a044b4 	movhi	r2,33042
8111870c:	10910f04 	addi	r2,r2,17468
81118710:	300f883a 	mov	r7,r6
81118714:	280d883a 	mov	r6,r5
81118718:	200b883a 	mov	r5,r4
8111871c:	11000017 	ldw	r4,0(r2)
81118720:	11172ac1 	jmpi	811172ac <___vfiprintf_internal_r>

81118724 <__sbprintf>:
81118724:	2880030b 	ldhu	r2,12(r5)
81118728:	2ac01917 	ldw	r11,100(r5)
8111872c:	2a80038b 	ldhu	r10,14(r5)
81118730:	2a400717 	ldw	r9,28(r5)
81118734:	2a000917 	ldw	r8,36(r5)
81118738:	defee204 	addi	sp,sp,-1144
8111873c:	00c10004 	movi	r3,1024
81118740:	dc011a15 	stw	r16,1128(sp)
81118744:	10bfff4c 	andi	r2,r2,65533
81118748:	2821883a 	mov	r16,r5
8111874c:	d8cb883a 	add	r5,sp,r3
81118750:	dc811c15 	stw	r18,1136(sp)
81118754:	dc411b15 	stw	r17,1132(sp)
81118758:	dfc11d15 	stw	ra,1140(sp)
8111875c:	2025883a 	mov	r18,r4
81118760:	d881030d 	sth	r2,1036(sp)
81118764:	dac11915 	stw	r11,1124(sp)
81118768:	da81038d 	sth	r10,1038(sp)
8111876c:	da410715 	stw	r9,1052(sp)
81118770:	da010915 	stw	r8,1060(sp)
81118774:	dec10015 	stw	sp,1024(sp)
81118778:	dec10415 	stw	sp,1040(sp)
8111877c:	d8c10215 	stw	r3,1032(sp)
81118780:	d8c10515 	stw	r3,1044(sp)
81118784:	d8010615 	stw	zero,1048(sp)
81118788:	11172ac0 	call	811172ac <___vfiprintf_internal_r>
8111878c:	1023883a 	mov	r17,r2
81118790:	10000416 	blt	r2,zero,811187a4 <__sbprintf+0x80>
81118794:	d9410004 	addi	r5,sp,1024
81118798:	9009883a 	mov	r4,r18
8111879c:	11132c40 	call	811132c4 <_fflush_r>
811187a0:	10000d1e 	bne	r2,zero,811187d8 <__sbprintf+0xb4>
811187a4:	d881030b 	ldhu	r2,1036(sp)
811187a8:	1080100c 	andi	r2,r2,64
811187ac:	10000326 	beq	r2,zero,811187bc <__sbprintf+0x98>
811187b0:	8080030b 	ldhu	r2,12(r16)
811187b4:	10801014 	ori	r2,r2,64
811187b8:	8080030d 	sth	r2,12(r16)
811187bc:	8805883a 	mov	r2,r17
811187c0:	dfc11d17 	ldw	ra,1140(sp)
811187c4:	dc811c17 	ldw	r18,1136(sp)
811187c8:	dc411b17 	ldw	r17,1132(sp)
811187cc:	dc011a17 	ldw	r16,1128(sp)
811187d0:	dec11e04 	addi	sp,sp,1144
811187d4:	f800283a 	ret
811187d8:	047fffc4 	movi	r17,-1
811187dc:	003ff106 	br	811187a4 <__reset+0xfb0f87a4>

811187e0 <_calloc_r>:
811187e0:	298b383a 	mul	r5,r5,r6
811187e4:	defffe04 	addi	sp,sp,-8
811187e8:	dfc00115 	stw	ra,4(sp)
811187ec:	dc000015 	stw	r16,0(sp)
811187f0:	110c1c80 	call	8110c1c8 <_malloc_r>
811187f4:	10002926 	beq	r2,zero,8111889c <_calloc_r+0xbc>
811187f8:	11bfff17 	ldw	r6,-4(r2)
811187fc:	1021883a 	mov	r16,r2
81118800:	00bfff04 	movi	r2,-4
81118804:	308c703a 	and	r6,r6,r2
81118808:	00c00904 	movi	r3,36
8111880c:	308d883a 	add	r6,r6,r2
81118810:	19801636 	bltu	r3,r6,8111886c <_calloc_r+0x8c>
81118814:	008004c4 	movi	r2,19
81118818:	11800b2e 	bgeu	r2,r6,81118848 <_calloc_r+0x68>
8111881c:	80000015 	stw	zero,0(r16)
81118820:	80000115 	stw	zero,4(r16)
81118824:	008006c4 	movi	r2,27
81118828:	11801a2e 	bgeu	r2,r6,81118894 <_calloc_r+0xb4>
8111882c:	80000215 	stw	zero,8(r16)
81118830:	80000315 	stw	zero,12(r16)
81118834:	30c0151e 	bne	r6,r3,8111888c <_calloc_r+0xac>
81118838:	80000415 	stw	zero,16(r16)
8111883c:	80800604 	addi	r2,r16,24
81118840:	80000515 	stw	zero,20(r16)
81118844:	00000106 	br	8111884c <_calloc_r+0x6c>
81118848:	8005883a 	mov	r2,r16
8111884c:	10000015 	stw	zero,0(r2)
81118850:	10000115 	stw	zero,4(r2)
81118854:	10000215 	stw	zero,8(r2)
81118858:	8005883a 	mov	r2,r16
8111885c:	dfc00117 	ldw	ra,4(sp)
81118860:	dc000017 	ldw	r16,0(sp)
81118864:	dec00204 	addi	sp,sp,8
81118868:	f800283a 	ret
8111886c:	000b883a 	mov	r5,zero
81118870:	8009883a 	mov	r4,r16
81118874:	110cb1c0 	call	8110cb1c <memset>
81118878:	8005883a 	mov	r2,r16
8111887c:	dfc00117 	ldw	ra,4(sp)
81118880:	dc000017 	ldw	r16,0(sp)
81118884:	dec00204 	addi	sp,sp,8
81118888:	f800283a 	ret
8111888c:	80800404 	addi	r2,r16,16
81118890:	003fee06 	br	8111884c <__reset+0xfb0f884c>
81118894:	80800204 	addi	r2,r16,8
81118898:	003fec06 	br	8111884c <__reset+0xfb0f884c>
8111889c:	0005883a 	mov	r2,zero
811188a0:	003fee06 	br	8111885c <__reset+0xfb0f885c>

811188a4 <_fclose_r>:
811188a4:	28003926 	beq	r5,zero,8111898c <_fclose_r+0xe8>
811188a8:	defffc04 	addi	sp,sp,-16
811188ac:	dc400115 	stw	r17,4(sp)
811188b0:	dc000015 	stw	r16,0(sp)
811188b4:	dfc00315 	stw	ra,12(sp)
811188b8:	dc800215 	stw	r18,8(sp)
811188bc:	2023883a 	mov	r17,r4
811188c0:	2821883a 	mov	r16,r5
811188c4:	20000226 	beq	r4,zero,811188d0 <_fclose_r+0x2c>
811188c8:	20800e17 	ldw	r2,56(r4)
811188cc:	10002726 	beq	r2,zero,8111896c <_fclose_r+0xc8>
811188d0:	8080030f 	ldh	r2,12(r16)
811188d4:	1000071e 	bne	r2,zero,811188f4 <_fclose_r+0x50>
811188d8:	0005883a 	mov	r2,zero
811188dc:	dfc00317 	ldw	ra,12(sp)
811188e0:	dc800217 	ldw	r18,8(sp)
811188e4:	dc400117 	ldw	r17,4(sp)
811188e8:	dc000017 	ldw	r16,0(sp)
811188ec:	dec00404 	addi	sp,sp,16
811188f0:	f800283a 	ret
811188f4:	800b883a 	mov	r5,r16
811188f8:	8809883a 	mov	r4,r17
811188fc:	11130a80 	call	811130a8 <__sflush_r>
81118900:	1025883a 	mov	r18,r2
81118904:	80800b17 	ldw	r2,44(r16)
81118908:	10000426 	beq	r2,zero,8111891c <_fclose_r+0x78>
8111890c:	81400717 	ldw	r5,28(r16)
81118910:	8809883a 	mov	r4,r17
81118914:	103ee83a 	callr	r2
81118918:	10001616 	blt	r2,zero,81118974 <_fclose_r+0xd0>
8111891c:	8080030b 	ldhu	r2,12(r16)
81118920:	1080200c 	andi	r2,r2,128
81118924:	1000151e 	bne	r2,zero,8111897c <_fclose_r+0xd8>
81118928:	81400c17 	ldw	r5,48(r16)
8111892c:	28000526 	beq	r5,zero,81118944 <_fclose_r+0xa0>
81118930:	80801004 	addi	r2,r16,64
81118934:	28800226 	beq	r5,r2,81118940 <_fclose_r+0x9c>
81118938:	8809883a 	mov	r4,r17
8111893c:	11138c00 	call	811138c0 <_free_r>
81118940:	80000c15 	stw	zero,48(r16)
81118944:	81401117 	ldw	r5,68(r16)
81118948:	28000326 	beq	r5,zero,81118958 <_fclose_r+0xb4>
8111894c:	8809883a 	mov	r4,r17
81118950:	11138c00 	call	811138c0 <_free_r>
81118954:	80001115 	stw	zero,68(r16)
81118958:	11136b00 	call	811136b0 <__sfp_lock_acquire>
8111895c:	8000030d 	sth	zero,12(r16)
81118960:	11136b40 	call	811136b4 <__sfp_lock_release>
81118964:	9005883a 	mov	r2,r18
81118968:	003fdc06 	br	811188dc <__reset+0xfb0f88dc>
8111896c:	11136a00 	call	811136a0 <__sinit>
81118970:	003fd706 	br	811188d0 <__reset+0xfb0f88d0>
81118974:	04bfffc4 	movi	r18,-1
81118978:	003fe806 	br	8111891c <__reset+0xfb0f891c>
8111897c:	81400417 	ldw	r5,16(r16)
81118980:	8809883a 	mov	r4,r17
81118984:	11138c00 	call	811138c0 <_free_r>
81118988:	003fe706 	br	81118928 <__reset+0xfb0f8928>
8111898c:	0005883a 	mov	r2,zero
81118990:	f800283a 	ret

81118994 <fclose>:
81118994:	00a044b4 	movhi	r2,33042
81118998:	10910f04 	addi	r2,r2,17468
8111899c:	200b883a 	mov	r5,r4
811189a0:	11000017 	ldw	r4,0(r2)
811189a4:	11188a41 	jmpi	811188a4 <_fclose_r>

811189a8 <__fputwc>:
811189a8:	defff804 	addi	sp,sp,-32
811189ac:	dcc00415 	stw	r19,16(sp)
811189b0:	dc800315 	stw	r18,12(sp)
811189b4:	dc000115 	stw	r16,4(sp)
811189b8:	dfc00715 	stw	ra,28(sp)
811189bc:	dd400615 	stw	r21,24(sp)
811189c0:	dd000515 	stw	r20,20(sp)
811189c4:	dc400215 	stw	r17,8(sp)
811189c8:	2027883a 	mov	r19,r4
811189cc:	2825883a 	mov	r18,r5
811189d0:	3021883a 	mov	r16,r6
811189d4:	11142f00 	call	811142f0 <__locale_mb_cur_max>
811189d8:	00c00044 	movi	r3,1
811189dc:	10c03e26 	beq	r2,r3,81118ad8 <__fputwc+0x130>
811189e0:	81c01704 	addi	r7,r16,92
811189e4:	900d883a 	mov	r6,r18
811189e8:	d80b883a 	mov	r5,sp
811189ec:	9809883a 	mov	r4,r19
811189f0:	1118d080 	call	81118d08 <_wcrtomb_r>
811189f4:	1029883a 	mov	r20,r2
811189f8:	00bfffc4 	movi	r2,-1
811189fc:	a0802026 	beq	r20,r2,81118a80 <__fputwc+0xd8>
81118a00:	d9400003 	ldbu	r5,0(sp)
81118a04:	a0001c26 	beq	r20,zero,81118a78 <__fputwc+0xd0>
81118a08:	0023883a 	mov	r17,zero
81118a0c:	05400284 	movi	r21,10
81118a10:	00000906 	br	81118a38 <__fputwc+0x90>
81118a14:	80800017 	ldw	r2,0(r16)
81118a18:	11400005 	stb	r5,0(r2)
81118a1c:	80c00017 	ldw	r3,0(r16)
81118a20:	18c00044 	addi	r3,r3,1
81118a24:	80c00015 	stw	r3,0(r16)
81118a28:	8c400044 	addi	r17,r17,1
81118a2c:	dc45883a 	add	r2,sp,r17
81118a30:	8d00112e 	bgeu	r17,r20,81118a78 <__fputwc+0xd0>
81118a34:	11400003 	ldbu	r5,0(r2)
81118a38:	80c00217 	ldw	r3,8(r16)
81118a3c:	18ffffc4 	addi	r3,r3,-1
81118a40:	80c00215 	stw	r3,8(r16)
81118a44:	183ff30e 	bge	r3,zero,81118a14 <__reset+0xfb0f8a14>
81118a48:	80800617 	ldw	r2,24(r16)
81118a4c:	18801916 	blt	r3,r2,81118ab4 <__fputwc+0x10c>
81118a50:	80800017 	ldw	r2,0(r16)
81118a54:	11400005 	stb	r5,0(r2)
81118a58:	80800017 	ldw	r2,0(r16)
81118a5c:	10c00003 	ldbu	r3,0(r2)
81118a60:	10800044 	addi	r2,r2,1
81118a64:	1d402326 	beq	r3,r21,81118af4 <__fputwc+0x14c>
81118a68:	80800015 	stw	r2,0(r16)
81118a6c:	8c400044 	addi	r17,r17,1
81118a70:	dc45883a 	add	r2,sp,r17
81118a74:	8d3fef36 	bltu	r17,r20,81118a34 <__reset+0xfb0f8a34>
81118a78:	9005883a 	mov	r2,r18
81118a7c:	00000406 	br	81118a90 <__fputwc+0xe8>
81118a80:	80c0030b 	ldhu	r3,12(r16)
81118a84:	a005883a 	mov	r2,r20
81118a88:	18c01014 	ori	r3,r3,64
81118a8c:	80c0030d 	sth	r3,12(r16)
81118a90:	dfc00717 	ldw	ra,28(sp)
81118a94:	dd400617 	ldw	r21,24(sp)
81118a98:	dd000517 	ldw	r20,20(sp)
81118a9c:	dcc00417 	ldw	r19,16(sp)
81118aa0:	dc800317 	ldw	r18,12(sp)
81118aa4:	dc400217 	ldw	r17,8(sp)
81118aa8:	dc000117 	ldw	r16,4(sp)
81118aac:	dec00804 	addi	sp,sp,32
81118ab0:	f800283a 	ret
81118ab4:	800d883a 	mov	r6,r16
81118ab8:	29403fcc 	andi	r5,r5,255
81118abc:	9809883a 	mov	r4,r19
81118ac0:	1118bb00 	call	81118bb0 <__swbuf_r>
81118ac4:	10bfffe0 	cmpeqi	r2,r2,-1
81118ac8:	10803fcc 	andi	r2,r2,255
81118acc:	103fd626 	beq	r2,zero,81118a28 <__reset+0xfb0f8a28>
81118ad0:	00bfffc4 	movi	r2,-1
81118ad4:	003fee06 	br	81118a90 <__reset+0xfb0f8a90>
81118ad8:	90ffffc4 	addi	r3,r18,-1
81118adc:	01003f84 	movi	r4,254
81118ae0:	20ffbf36 	bltu	r4,r3,811189e0 <__reset+0xfb0f89e0>
81118ae4:	900b883a 	mov	r5,r18
81118ae8:	dc800005 	stb	r18,0(sp)
81118aec:	1029883a 	mov	r20,r2
81118af0:	003fc506 	br	81118a08 <__reset+0xfb0f8a08>
81118af4:	800d883a 	mov	r6,r16
81118af8:	a80b883a 	mov	r5,r21
81118afc:	9809883a 	mov	r4,r19
81118b00:	1118bb00 	call	81118bb0 <__swbuf_r>
81118b04:	10bfffe0 	cmpeqi	r2,r2,-1
81118b08:	003fef06 	br	81118ac8 <__reset+0xfb0f8ac8>

81118b0c <_fputwc_r>:
81118b0c:	3080030b 	ldhu	r2,12(r6)
81118b10:	10c8000c 	andi	r3,r2,8192
81118b14:	1800051e 	bne	r3,zero,81118b2c <_fputwc_r+0x20>
81118b18:	30c01917 	ldw	r3,100(r6)
81118b1c:	10880014 	ori	r2,r2,8192
81118b20:	3080030d 	sth	r2,12(r6)
81118b24:	18880014 	ori	r2,r3,8192
81118b28:	30801915 	stw	r2,100(r6)
81118b2c:	11189a81 	jmpi	811189a8 <__fputwc>

81118b30 <fputwc>:
81118b30:	00a044b4 	movhi	r2,33042
81118b34:	defffc04 	addi	sp,sp,-16
81118b38:	10910f04 	addi	r2,r2,17468
81118b3c:	dc000115 	stw	r16,4(sp)
81118b40:	14000017 	ldw	r16,0(r2)
81118b44:	dc400215 	stw	r17,8(sp)
81118b48:	dfc00315 	stw	ra,12(sp)
81118b4c:	2023883a 	mov	r17,r4
81118b50:	80000226 	beq	r16,zero,81118b5c <fputwc+0x2c>
81118b54:	80800e17 	ldw	r2,56(r16)
81118b58:	10001026 	beq	r2,zero,81118b9c <fputwc+0x6c>
81118b5c:	2880030b 	ldhu	r2,12(r5)
81118b60:	10c8000c 	andi	r3,r2,8192
81118b64:	1800051e 	bne	r3,zero,81118b7c <fputwc+0x4c>
81118b68:	28c01917 	ldw	r3,100(r5)
81118b6c:	10880014 	ori	r2,r2,8192
81118b70:	2880030d 	sth	r2,12(r5)
81118b74:	18880014 	ori	r2,r3,8192
81118b78:	28801915 	stw	r2,100(r5)
81118b7c:	280d883a 	mov	r6,r5
81118b80:	8009883a 	mov	r4,r16
81118b84:	880b883a 	mov	r5,r17
81118b88:	dfc00317 	ldw	ra,12(sp)
81118b8c:	dc400217 	ldw	r17,8(sp)
81118b90:	dc000117 	ldw	r16,4(sp)
81118b94:	dec00404 	addi	sp,sp,16
81118b98:	11189a81 	jmpi	811189a8 <__fputwc>
81118b9c:	8009883a 	mov	r4,r16
81118ba0:	d9400015 	stw	r5,0(sp)
81118ba4:	11136a00 	call	811136a0 <__sinit>
81118ba8:	d9400017 	ldw	r5,0(sp)
81118bac:	003feb06 	br	81118b5c <__reset+0xfb0f8b5c>

81118bb0 <__swbuf_r>:
81118bb0:	defffb04 	addi	sp,sp,-20
81118bb4:	dcc00315 	stw	r19,12(sp)
81118bb8:	dc800215 	stw	r18,8(sp)
81118bbc:	dc000015 	stw	r16,0(sp)
81118bc0:	dfc00415 	stw	ra,16(sp)
81118bc4:	dc400115 	stw	r17,4(sp)
81118bc8:	2025883a 	mov	r18,r4
81118bcc:	2827883a 	mov	r19,r5
81118bd0:	3021883a 	mov	r16,r6
81118bd4:	20000226 	beq	r4,zero,81118be0 <__swbuf_r+0x30>
81118bd8:	20800e17 	ldw	r2,56(r4)
81118bdc:	10004226 	beq	r2,zero,81118ce8 <__swbuf_r+0x138>
81118be0:	80800617 	ldw	r2,24(r16)
81118be4:	8100030b 	ldhu	r4,12(r16)
81118be8:	80800215 	stw	r2,8(r16)
81118bec:	2080020c 	andi	r2,r4,8
81118bf0:	10003626 	beq	r2,zero,81118ccc <__swbuf_r+0x11c>
81118bf4:	80c00417 	ldw	r3,16(r16)
81118bf8:	18003426 	beq	r3,zero,81118ccc <__swbuf_r+0x11c>
81118bfc:	2088000c 	andi	r2,r4,8192
81118c00:	9c403fcc 	andi	r17,r19,255
81118c04:	10001a26 	beq	r2,zero,81118c70 <__swbuf_r+0xc0>
81118c08:	80800017 	ldw	r2,0(r16)
81118c0c:	81000517 	ldw	r4,20(r16)
81118c10:	10c7c83a 	sub	r3,r2,r3
81118c14:	1900200e 	bge	r3,r4,81118c98 <__swbuf_r+0xe8>
81118c18:	18c00044 	addi	r3,r3,1
81118c1c:	81000217 	ldw	r4,8(r16)
81118c20:	11400044 	addi	r5,r2,1
81118c24:	81400015 	stw	r5,0(r16)
81118c28:	213fffc4 	addi	r4,r4,-1
81118c2c:	81000215 	stw	r4,8(r16)
81118c30:	14c00005 	stb	r19,0(r2)
81118c34:	80800517 	ldw	r2,20(r16)
81118c38:	10c01e26 	beq	r2,r3,81118cb4 <__swbuf_r+0x104>
81118c3c:	8080030b 	ldhu	r2,12(r16)
81118c40:	1080004c 	andi	r2,r2,1
81118c44:	10000226 	beq	r2,zero,81118c50 <__swbuf_r+0xa0>
81118c48:	00800284 	movi	r2,10
81118c4c:	88801926 	beq	r17,r2,81118cb4 <__swbuf_r+0x104>
81118c50:	8805883a 	mov	r2,r17
81118c54:	dfc00417 	ldw	ra,16(sp)
81118c58:	dcc00317 	ldw	r19,12(sp)
81118c5c:	dc800217 	ldw	r18,8(sp)
81118c60:	dc400117 	ldw	r17,4(sp)
81118c64:	dc000017 	ldw	r16,0(sp)
81118c68:	dec00504 	addi	sp,sp,20
81118c6c:	f800283a 	ret
81118c70:	81401917 	ldw	r5,100(r16)
81118c74:	00b7ffc4 	movi	r2,-8193
81118c78:	21080014 	ori	r4,r4,8192
81118c7c:	2884703a 	and	r2,r5,r2
81118c80:	80801915 	stw	r2,100(r16)
81118c84:	80800017 	ldw	r2,0(r16)
81118c88:	8100030d 	sth	r4,12(r16)
81118c8c:	81000517 	ldw	r4,20(r16)
81118c90:	10c7c83a 	sub	r3,r2,r3
81118c94:	193fe016 	blt	r3,r4,81118c18 <__reset+0xfb0f8c18>
81118c98:	800b883a 	mov	r5,r16
81118c9c:	9009883a 	mov	r4,r18
81118ca0:	11132c40 	call	811132c4 <_fflush_r>
81118ca4:	1000071e 	bne	r2,zero,81118cc4 <__swbuf_r+0x114>
81118ca8:	80800017 	ldw	r2,0(r16)
81118cac:	00c00044 	movi	r3,1
81118cb0:	003fda06 	br	81118c1c <__reset+0xfb0f8c1c>
81118cb4:	800b883a 	mov	r5,r16
81118cb8:	9009883a 	mov	r4,r18
81118cbc:	11132c40 	call	811132c4 <_fflush_r>
81118cc0:	103fe326 	beq	r2,zero,81118c50 <__reset+0xfb0f8c50>
81118cc4:	00bfffc4 	movi	r2,-1
81118cc8:	003fe206 	br	81118c54 <__reset+0xfb0f8c54>
81118ccc:	800b883a 	mov	r5,r16
81118cd0:	9009883a 	mov	r4,r18
81118cd4:	11116780 	call	81111678 <__swsetup_r>
81118cd8:	103ffa1e 	bne	r2,zero,81118cc4 <__reset+0xfb0f8cc4>
81118cdc:	8100030b 	ldhu	r4,12(r16)
81118ce0:	80c00417 	ldw	r3,16(r16)
81118ce4:	003fc506 	br	81118bfc <__reset+0xfb0f8bfc>
81118ce8:	11136a00 	call	811136a0 <__sinit>
81118cec:	003fbc06 	br	81118be0 <__reset+0xfb0f8be0>

81118cf0 <__swbuf>:
81118cf0:	00a044b4 	movhi	r2,33042
81118cf4:	10910f04 	addi	r2,r2,17468
81118cf8:	280d883a 	mov	r6,r5
81118cfc:	200b883a 	mov	r5,r4
81118d00:	11000017 	ldw	r4,0(r2)
81118d04:	1118bb01 	jmpi	81118bb0 <__swbuf_r>

81118d08 <_wcrtomb_r>:
81118d08:	defff604 	addi	sp,sp,-40
81118d0c:	00a044b4 	movhi	r2,33042
81118d10:	dc800815 	stw	r18,32(sp)
81118d14:	dc400715 	stw	r17,28(sp)
81118d18:	dc000615 	stw	r16,24(sp)
81118d1c:	10911304 	addi	r2,r2,17484
81118d20:	dfc00915 	stw	ra,36(sp)
81118d24:	2021883a 	mov	r16,r4
81118d28:	3823883a 	mov	r17,r7
81118d2c:	14800017 	ldw	r18,0(r2)
81118d30:	28001426 	beq	r5,zero,81118d84 <_wcrtomb_r+0x7c>
81118d34:	d9400415 	stw	r5,16(sp)
81118d38:	d9800515 	stw	r6,20(sp)
81118d3c:	11142e40 	call	811142e4 <__locale_charset>
81118d40:	d9800517 	ldw	r6,20(sp)
81118d44:	d9400417 	ldw	r5,16(sp)
81118d48:	100f883a 	mov	r7,r2
81118d4c:	dc400015 	stw	r17,0(sp)
81118d50:	8009883a 	mov	r4,r16
81118d54:	903ee83a 	callr	r18
81118d58:	00ffffc4 	movi	r3,-1
81118d5c:	10c0031e 	bne	r2,r3,81118d6c <_wcrtomb_r+0x64>
81118d60:	88000015 	stw	zero,0(r17)
81118d64:	00c02284 	movi	r3,138
81118d68:	80c00015 	stw	r3,0(r16)
81118d6c:	dfc00917 	ldw	ra,36(sp)
81118d70:	dc800817 	ldw	r18,32(sp)
81118d74:	dc400717 	ldw	r17,28(sp)
81118d78:	dc000617 	ldw	r16,24(sp)
81118d7c:	dec00a04 	addi	sp,sp,40
81118d80:	f800283a 	ret
81118d84:	11142e40 	call	811142e4 <__locale_charset>
81118d88:	100f883a 	mov	r7,r2
81118d8c:	dc400015 	stw	r17,0(sp)
81118d90:	000d883a 	mov	r6,zero
81118d94:	d9400104 	addi	r5,sp,4
81118d98:	8009883a 	mov	r4,r16
81118d9c:	903ee83a 	callr	r18
81118da0:	003fed06 	br	81118d58 <__reset+0xfb0f8d58>

81118da4 <wcrtomb>:
81118da4:	defff604 	addi	sp,sp,-40
81118da8:	00a044b4 	movhi	r2,33042
81118dac:	dc800615 	stw	r18,24(sp)
81118db0:	dc400515 	stw	r17,20(sp)
81118db4:	10910f04 	addi	r2,r2,17468
81118db8:	dfc00915 	stw	ra,36(sp)
81118dbc:	dd000815 	stw	r20,32(sp)
81118dc0:	dcc00715 	stw	r19,28(sp)
81118dc4:	dc000415 	stw	r16,16(sp)
81118dc8:	3025883a 	mov	r18,r6
81118dcc:	14400017 	ldw	r17,0(r2)
81118dd0:	20001926 	beq	r4,zero,81118e38 <wcrtomb+0x94>
81118dd4:	00a044b4 	movhi	r2,33042
81118dd8:	10911304 	addi	r2,r2,17484
81118ddc:	15000017 	ldw	r20,0(r2)
81118de0:	2021883a 	mov	r16,r4
81118de4:	2827883a 	mov	r19,r5
81118de8:	11142e40 	call	811142e4 <__locale_charset>
81118dec:	100f883a 	mov	r7,r2
81118df0:	dc800015 	stw	r18,0(sp)
81118df4:	980d883a 	mov	r6,r19
81118df8:	800b883a 	mov	r5,r16
81118dfc:	8809883a 	mov	r4,r17
81118e00:	a03ee83a 	callr	r20
81118e04:	00ffffc4 	movi	r3,-1
81118e08:	10c0031e 	bne	r2,r3,81118e18 <wcrtomb+0x74>
81118e0c:	90000015 	stw	zero,0(r18)
81118e10:	00c02284 	movi	r3,138
81118e14:	88c00015 	stw	r3,0(r17)
81118e18:	dfc00917 	ldw	ra,36(sp)
81118e1c:	dd000817 	ldw	r20,32(sp)
81118e20:	dcc00717 	ldw	r19,28(sp)
81118e24:	dc800617 	ldw	r18,24(sp)
81118e28:	dc400517 	ldw	r17,20(sp)
81118e2c:	dc000417 	ldw	r16,16(sp)
81118e30:	dec00a04 	addi	sp,sp,40
81118e34:	f800283a 	ret
81118e38:	00a044b4 	movhi	r2,33042
81118e3c:	10911304 	addi	r2,r2,17484
81118e40:	14000017 	ldw	r16,0(r2)
81118e44:	11142e40 	call	811142e4 <__locale_charset>
81118e48:	100f883a 	mov	r7,r2
81118e4c:	dc800015 	stw	r18,0(sp)
81118e50:	000d883a 	mov	r6,zero
81118e54:	d9400104 	addi	r5,sp,4
81118e58:	8809883a 	mov	r4,r17
81118e5c:	803ee83a 	callr	r16
81118e60:	003fe806 	br	81118e04 <__reset+0xfb0f8e04>

81118e64 <__ascii_wctomb>:
81118e64:	28000526 	beq	r5,zero,81118e7c <__ascii_wctomb+0x18>
81118e68:	00803fc4 	movi	r2,255
81118e6c:	11800536 	bltu	r2,r6,81118e84 <__ascii_wctomb+0x20>
81118e70:	29800005 	stb	r6,0(r5)
81118e74:	00800044 	movi	r2,1
81118e78:	f800283a 	ret
81118e7c:	0005883a 	mov	r2,zero
81118e80:	f800283a 	ret
81118e84:	00802284 	movi	r2,138
81118e88:	20800015 	stw	r2,0(r4)
81118e8c:	00bfffc4 	movi	r2,-1
81118e90:	f800283a 	ret

81118e94 <_wctomb_r>:
81118e94:	00a044b4 	movhi	r2,33042
81118e98:	defff904 	addi	sp,sp,-28
81118e9c:	10911304 	addi	r2,r2,17484
81118ea0:	dfc00615 	stw	ra,24(sp)
81118ea4:	dc400515 	stw	r17,20(sp)
81118ea8:	dc000415 	stw	r16,16(sp)
81118eac:	3823883a 	mov	r17,r7
81118eb0:	14000017 	ldw	r16,0(r2)
81118eb4:	d9000115 	stw	r4,4(sp)
81118eb8:	d9400215 	stw	r5,8(sp)
81118ebc:	d9800315 	stw	r6,12(sp)
81118ec0:	11142e40 	call	811142e4 <__locale_charset>
81118ec4:	d9800317 	ldw	r6,12(sp)
81118ec8:	d9400217 	ldw	r5,8(sp)
81118ecc:	d9000117 	ldw	r4,4(sp)
81118ed0:	100f883a 	mov	r7,r2
81118ed4:	dc400015 	stw	r17,0(sp)
81118ed8:	803ee83a 	callr	r16
81118edc:	dfc00617 	ldw	ra,24(sp)
81118ee0:	dc400517 	ldw	r17,20(sp)
81118ee4:	dc000417 	ldw	r16,16(sp)
81118ee8:	dec00704 	addi	sp,sp,28
81118eec:	f800283a 	ret

81118ef0 <__udivdi3>:
81118ef0:	defff504 	addi	sp,sp,-44
81118ef4:	dcc00415 	stw	r19,16(sp)
81118ef8:	dc000115 	stw	r16,4(sp)
81118efc:	dfc00a15 	stw	ra,40(sp)
81118f00:	df000915 	stw	fp,36(sp)
81118f04:	ddc00815 	stw	r23,32(sp)
81118f08:	dd800715 	stw	r22,28(sp)
81118f0c:	dd400615 	stw	r21,24(sp)
81118f10:	dd000515 	stw	r20,20(sp)
81118f14:	dc800315 	stw	r18,12(sp)
81118f18:	dc400215 	stw	r17,8(sp)
81118f1c:	2027883a 	mov	r19,r4
81118f20:	2821883a 	mov	r16,r5
81118f24:	3800411e 	bne	r7,zero,8111902c <__udivdi3+0x13c>
81118f28:	3023883a 	mov	r17,r6
81118f2c:	2025883a 	mov	r18,r4
81118f30:	2980522e 	bgeu	r5,r6,8111907c <__udivdi3+0x18c>
81118f34:	00bfffd4 	movui	r2,65535
81118f38:	282d883a 	mov	r22,r5
81118f3c:	1180a836 	bltu	r2,r6,811191e0 <__udivdi3+0x2f0>
81118f40:	00803fc4 	movi	r2,255
81118f44:	1185803a 	cmpltu	r2,r2,r6
81118f48:	100490fa 	slli	r2,r2,3
81118f4c:	3086d83a 	srl	r3,r6,r2
81118f50:	012044b4 	movhi	r4,33042
81118f54:	21088b04 	addi	r4,r4,8748
81118f58:	20c7883a 	add	r3,r4,r3
81118f5c:	18c00003 	ldbu	r3,0(r3)
81118f60:	1885883a 	add	r2,r3,r2
81118f64:	00c00804 	movi	r3,32
81118f68:	1887c83a 	sub	r3,r3,r2
81118f6c:	18000526 	beq	r3,zero,81118f84 <__udivdi3+0x94>
81118f70:	80e0983a 	sll	r16,r16,r3
81118f74:	9884d83a 	srl	r2,r19,r2
81118f78:	30e2983a 	sll	r17,r6,r3
81118f7c:	98e4983a 	sll	r18,r19,r3
81118f80:	142cb03a 	or	r22,r2,r16
81118f84:	882ad43a 	srli	r21,r17,16
81118f88:	b009883a 	mov	r4,r22
81118f8c:	8d3fffcc 	andi	r20,r17,65535
81118f90:	a80b883a 	mov	r5,r21
81118f94:	1119afc0 	call	81119afc <__umodsi3>
81118f98:	b009883a 	mov	r4,r22
81118f9c:	a80b883a 	mov	r5,r21
81118fa0:	1027883a 	mov	r19,r2
81118fa4:	1119a980 	call	81119a98 <__udivsi3>
81118fa8:	102d883a 	mov	r22,r2
81118fac:	9826943a 	slli	r19,r19,16
81118fb0:	9004d43a 	srli	r2,r18,16
81118fb4:	a5a1383a 	mul	r16,r20,r22
81118fb8:	14c4b03a 	or	r2,r2,r19
81118fbc:	1400052e 	bgeu	r2,r16,81118fd4 <__udivdi3+0xe4>
81118fc0:	1445883a 	add	r2,r2,r17
81118fc4:	b0ffffc4 	addi	r3,r22,-1
81118fc8:	14400136 	bltu	r2,r17,81118fd0 <__udivdi3+0xe0>
81118fcc:	14012336 	bltu	r2,r16,8111945c <__udivdi3+0x56c>
81118fd0:	182d883a 	mov	r22,r3
81118fd4:	1421c83a 	sub	r16,r2,r16
81118fd8:	a80b883a 	mov	r5,r21
81118fdc:	8009883a 	mov	r4,r16
81118fe0:	1119afc0 	call	81119afc <__umodsi3>
81118fe4:	1027883a 	mov	r19,r2
81118fe8:	a80b883a 	mov	r5,r21
81118fec:	8009883a 	mov	r4,r16
81118ff0:	1119a980 	call	81119a98 <__udivsi3>
81118ff4:	9826943a 	slli	r19,r19,16
81118ff8:	a0a9383a 	mul	r20,r20,r2
81118ffc:	94bfffcc 	andi	r18,r18,65535
81119000:	94e4b03a 	or	r18,r18,r19
81119004:	9500052e 	bgeu	r18,r20,8111901c <__udivdi3+0x12c>
81119008:	8ca5883a 	add	r18,r17,r18
8111900c:	10ffffc4 	addi	r3,r2,-1
81119010:	9440f136 	bltu	r18,r17,811193d8 <__udivdi3+0x4e8>
81119014:	9500f02e 	bgeu	r18,r20,811193d8 <__udivdi3+0x4e8>
81119018:	10bfff84 	addi	r2,r2,-2
8111901c:	b00c943a 	slli	r6,r22,16
81119020:	0007883a 	mov	r3,zero
81119024:	3084b03a 	or	r2,r6,r2
81119028:	00005906 	br	81119190 <__udivdi3+0x2a0>
8111902c:	29c05636 	bltu	r5,r7,81119188 <__udivdi3+0x298>
81119030:	00bfffd4 	movui	r2,65535
81119034:	11c0622e 	bgeu	r2,r7,811191c0 <__udivdi3+0x2d0>
81119038:	00804034 	movhi	r2,256
8111903c:	10bfffc4 	addi	r2,r2,-1
81119040:	11c0ee36 	bltu	r2,r7,811193fc <__udivdi3+0x50c>
81119044:	00800404 	movi	r2,16
81119048:	3886d83a 	srl	r3,r7,r2
8111904c:	012044b4 	movhi	r4,33042
81119050:	21088b04 	addi	r4,r4,8748
81119054:	20c7883a 	add	r3,r4,r3
81119058:	18c00003 	ldbu	r3,0(r3)
8111905c:	05400804 	movi	r21,32
81119060:	1885883a 	add	r2,r3,r2
81119064:	a8abc83a 	sub	r21,r21,r2
81119068:	a800621e 	bne	r21,zero,811191f4 <__udivdi3+0x304>
8111906c:	3c00e936 	bltu	r7,r16,81119414 <__udivdi3+0x524>
81119070:	9985403a 	cmpgeu	r2,r19,r6
81119074:	0007883a 	mov	r3,zero
81119078:	00004506 	br	81119190 <__udivdi3+0x2a0>
8111907c:	3000041e 	bne	r6,zero,81119090 <__udivdi3+0x1a0>
81119080:	000b883a 	mov	r5,zero
81119084:	01000044 	movi	r4,1
81119088:	1119a980 	call	81119a98 <__udivsi3>
8111908c:	1023883a 	mov	r17,r2
81119090:	00bfffd4 	movui	r2,65535
81119094:	14404e2e 	bgeu	r2,r17,811191d0 <__udivdi3+0x2e0>
81119098:	00804034 	movhi	r2,256
8111909c:	10bfffc4 	addi	r2,r2,-1
811190a0:	1440d836 	bltu	r2,r17,81119404 <__udivdi3+0x514>
811190a4:	00800404 	movi	r2,16
811190a8:	8886d83a 	srl	r3,r17,r2
811190ac:	012044b4 	movhi	r4,33042
811190b0:	21088b04 	addi	r4,r4,8748
811190b4:	20c7883a 	add	r3,r4,r3
811190b8:	18c00003 	ldbu	r3,0(r3)
811190bc:	1885883a 	add	r2,r3,r2
811190c0:	00c00804 	movi	r3,32
811190c4:	1887c83a 	sub	r3,r3,r2
811190c8:	18008f1e 	bne	r3,zero,81119308 <__udivdi3+0x418>
811190cc:	882ad43a 	srli	r21,r17,16
811190d0:	8461c83a 	sub	r16,r16,r17
811190d4:	8d3fffcc 	andi	r20,r17,65535
811190d8:	00c00044 	movi	r3,1
811190dc:	8009883a 	mov	r4,r16
811190e0:	a80b883a 	mov	r5,r21
811190e4:	d8c00015 	stw	r3,0(sp)
811190e8:	1119afc0 	call	81119afc <__umodsi3>
811190ec:	8009883a 	mov	r4,r16
811190f0:	a80b883a 	mov	r5,r21
811190f4:	1027883a 	mov	r19,r2
811190f8:	1119a980 	call	81119a98 <__udivsi3>
811190fc:	9826943a 	slli	r19,r19,16
81119100:	9008d43a 	srli	r4,r18,16
81119104:	1521383a 	mul	r16,r2,r20
81119108:	102d883a 	mov	r22,r2
8111910c:	24c8b03a 	or	r4,r4,r19
81119110:	d8c00017 	ldw	r3,0(sp)
81119114:	2400052e 	bgeu	r4,r16,8111912c <__udivdi3+0x23c>
81119118:	2449883a 	add	r4,r4,r17
8111911c:	b0bfffc4 	addi	r2,r22,-1
81119120:	24400136 	bltu	r4,r17,81119128 <__udivdi3+0x238>
81119124:	2400ca36 	bltu	r4,r16,81119450 <__udivdi3+0x560>
81119128:	102d883a 	mov	r22,r2
8111912c:	2421c83a 	sub	r16,r4,r16
81119130:	a80b883a 	mov	r5,r21
81119134:	8009883a 	mov	r4,r16
81119138:	d8c00015 	stw	r3,0(sp)
8111913c:	1119afc0 	call	81119afc <__umodsi3>
81119140:	1027883a 	mov	r19,r2
81119144:	a80b883a 	mov	r5,r21
81119148:	8009883a 	mov	r4,r16
8111914c:	1119a980 	call	81119a98 <__udivsi3>
81119150:	9826943a 	slli	r19,r19,16
81119154:	1529383a 	mul	r20,r2,r20
81119158:	94bfffcc 	andi	r18,r18,65535
8111915c:	94e4b03a 	or	r18,r18,r19
81119160:	d8c00017 	ldw	r3,0(sp)
81119164:	9500052e 	bgeu	r18,r20,8111917c <__udivdi3+0x28c>
81119168:	8ca5883a 	add	r18,r17,r18
8111916c:	113fffc4 	addi	r4,r2,-1
81119170:	94409736 	bltu	r18,r17,811193d0 <__udivdi3+0x4e0>
81119174:	9500962e 	bgeu	r18,r20,811193d0 <__udivdi3+0x4e0>
81119178:	10bfff84 	addi	r2,r2,-2
8111917c:	b00c943a 	slli	r6,r22,16
81119180:	3084b03a 	or	r2,r6,r2
81119184:	00000206 	br	81119190 <__udivdi3+0x2a0>
81119188:	0007883a 	mov	r3,zero
8111918c:	0005883a 	mov	r2,zero
81119190:	dfc00a17 	ldw	ra,40(sp)
81119194:	df000917 	ldw	fp,36(sp)
81119198:	ddc00817 	ldw	r23,32(sp)
8111919c:	dd800717 	ldw	r22,28(sp)
811191a0:	dd400617 	ldw	r21,24(sp)
811191a4:	dd000517 	ldw	r20,20(sp)
811191a8:	dcc00417 	ldw	r19,16(sp)
811191ac:	dc800317 	ldw	r18,12(sp)
811191b0:	dc400217 	ldw	r17,8(sp)
811191b4:	dc000117 	ldw	r16,4(sp)
811191b8:	dec00b04 	addi	sp,sp,44
811191bc:	f800283a 	ret
811191c0:	00803fc4 	movi	r2,255
811191c4:	11c5803a 	cmpltu	r2,r2,r7
811191c8:	100490fa 	slli	r2,r2,3
811191cc:	003f9e06 	br	81119048 <__reset+0xfb0f9048>
811191d0:	00803fc4 	movi	r2,255
811191d4:	1445803a 	cmpltu	r2,r2,r17
811191d8:	100490fa 	slli	r2,r2,3
811191dc:	003fb206 	br	811190a8 <__reset+0xfb0f90a8>
811191e0:	00804034 	movhi	r2,256
811191e4:	10bfffc4 	addi	r2,r2,-1
811191e8:	11808836 	bltu	r2,r6,8111940c <__udivdi3+0x51c>
811191ec:	00800404 	movi	r2,16
811191f0:	003f5606 	br	81118f4c <__reset+0xfb0f8f4c>
811191f4:	30aed83a 	srl	r23,r6,r2
811191f8:	3d4e983a 	sll	r7,r7,r21
811191fc:	80acd83a 	srl	r22,r16,r2
81119200:	9884d83a 	srl	r2,r19,r2
81119204:	3deeb03a 	or	r23,r7,r23
81119208:	b824d43a 	srli	r18,r23,16
8111920c:	8560983a 	sll	r16,r16,r21
81119210:	b009883a 	mov	r4,r22
81119214:	900b883a 	mov	r5,r18
81119218:	3568983a 	sll	r20,r6,r21
8111921c:	1420b03a 	or	r16,r2,r16
81119220:	1119afc0 	call	81119afc <__umodsi3>
81119224:	b009883a 	mov	r4,r22
81119228:	900b883a 	mov	r5,r18
8111922c:	1023883a 	mov	r17,r2
81119230:	1119a980 	call	81119a98 <__udivsi3>
81119234:	8808943a 	slli	r4,r17,16
81119238:	bf3fffcc 	andi	fp,r23,65535
8111923c:	8006d43a 	srli	r3,r16,16
81119240:	e0a3383a 	mul	r17,fp,r2
81119244:	100d883a 	mov	r6,r2
81119248:	1906b03a 	or	r3,r3,r4
8111924c:	1c40042e 	bgeu	r3,r17,81119260 <__udivdi3+0x370>
81119250:	1dc7883a 	add	r3,r3,r23
81119254:	10bfffc4 	addi	r2,r2,-1
81119258:	1dc0752e 	bgeu	r3,r23,81119430 <__udivdi3+0x540>
8111925c:	100d883a 	mov	r6,r2
81119260:	1c63c83a 	sub	r17,r3,r17
81119264:	900b883a 	mov	r5,r18
81119268:	8809883a 	mov	r4,r17
8111926c:	d9800015 	stw	r6,0(sp)
81119270:	1119afc0 	call	81119afc <__umodsi3>
81119274:	102d883a 	mov	r22,r2
81119278:	8809883a 	mov	r4,r17
8111927c:	900b883a 	mov	r5,r18
81119280:	1119a980 	call	81119a98 <__udivsi3>
81119284:	b02c943a 	slli	r22,r22,16
81119288:	e089383a 	mul	r4,fp,r2
8111928c:	843fffcc 	andi	r16,r16,65535
81119290:	85a0b03a 	or	r16,r16,r22
81119294:	d9800017 	ldw	r6,0(sp)
81119298:	8100042e 	bgeu	r16,r4,811192ac <__udivdi3+0x3bc>
8111929c:	85e1883a 	add	r16,r16,r23
811192a0:	10ffffc4 	addi	r3,r2,-1
811192a4:	85c05e2e 	bgeu	r16,r23,81119420 <__udivdi3+0x530>
811192a8:	1805883a 	mov	r2,r3
811192ac:	300c943a 	slli	r6,r6,16
811192b0:	a17fffcc 	andi	r5,r20,65535
811192b4:	a028d43a 	srli	r20,r20,16
811192b8:	3084b03a 	or	r2,r6,r2
811192bc:	10ffffcc 	andi	r3,r2,65535
811192c0:	100cd43a 	srli	r6,r2,16
811192c4:	194f383a 	mul	r7,r3,r5
811192c8:	1d07383a 	mul	r3,r3,r20
811192cc:	314b383a 	mul	r5,r6,r5
811192d0:	3810d43a 	srli	r8,r7,16
811192d4:	8121c83a 	sub	r16,r16,r4
811192d8:	1947883a 	add	r3,r3,r5
811192dc:	40c7883a 	add	r3,r8,r3
811192e0:	350d383a 	mul	r6,r6,r20
811192e4:	1940022e 	bgeu	r3,r5,811192f0 <__udivdi3+0x400>
811192e8:	01000074 	movhi	r4,1
811192ec:	310d883a 	add	r6,r6,r4
811192f0:	1828d43a 	srli	r20,r3,16
811192f4:	a18d883a 	add	r6,r20,r6
811192f8:	81803e36 	bltu	r16,r6,811193f4 <__udivdi3+0x504>
811192fc:	81803826 	beq	r16,r6,811193e0 <__udivdi3+0x4f0>
81119300:	0007883a 	mov	r3,zero
81119304:	003fa206 	br	81119190 <__reset+0xfb0f9190>
81119308:	88e2983a 	sll	r17,r17,r3
8111930c:	80a8d83a 	srl	r20,r16,r2
81119310:	80e0983a 	sll	r16,r16,r3
81119314:	882ad43a 	srli	r21,r17,16
81119318:	9884d83a 	srl	r2,r19,r2
8111931c:	a009883a 	mov	r4,r20
81119320:	a80b883a 	mov	r5,r21
81119324:	142eb03a 	or	r23,r2,r16
81119328:	98e4983a 	sll	r18,r19,r3
8111932c:	1119afc0 	call	81119afc <__umodsi3>
81119330:	a009883a 	mov	r4,r20
81119334:	a80b883a 	mov	r5,r21
81119338:	1021883a 	mov	r16,r2
8111933c:	1119a980 	call	81119a98 <__udivsi3>
81119340:	1039883a 	mov	fp,r2
81119344:	8d3fffcc 	andi	r20,r17,65535
81119348:	8020943a 	slli	r16,r16,16
8111934c:	b804d43a 	srli	r2,r23,16
81119350:	a72d383a 	mul	r22,r20,fp
81119354:	1404b03a 	or	r2,r2,r16
81119358:	1580062e 	bgeu	r2,r22,81119374 <__udivdi3+0x484>
8111935c:	1445883a 	add	r2,r2,r17
81119360:	e0ffffc4 	addi	r3,fp,-1
81119364:	14403836 	bltu	r2,r17,81119448 <__udivdi3+0x558>
81119368:	1580372e 	bgeu	r2,r22,81119448 <__udivdi3+0x558>
8111936c:	e73fff84 	addi	fp,fp,-2
81119370:	1445883a 	add	r2,r2,r17
81119374:	15adc83a 	sub	r22,r2,r22
81119378:	a80b883a 	mov	r5,r21
8111937c:	b009883a 	mov	r4,r22
81119380:	1119afc0 	call	81119afc <__umodsi3>
81119384:	1027883a 	mov	r19,r2
81119388:	b009883a 	mov	r4,r22
8111938c:	a80b883a 	mov	r5,r21
81119390:	1119a980 	call	81119a98 <__udivsi3>
81119394:	9826943a 	slli	r19,r19,16
81119398:	a0a1383a 	mul	r16,r20,r2
8111939c:	b93fffcc 	andi	r4,r23,65535
811193a0:	24c8b03a 	or	r4,r4,r19
811193a4:	2400062e 	bgeu	r4,r16,811193c0 <__udivdi3+0x4d0>
811193a8:	2449883a 	add	r4,r4,r17
811193ac:	10ffffc4 	addi	r3,r2,-1
811193b0:	24402336 	bltu	r4,r17,81119440 <__udivdi3+0x550>
811193b4:	2400222e 	bgeu	r4,r16,81119440 <__udivdi3+0x550>
811193b8:	10bfff84 	addi	r2,r2,-2
811193bc:	2449883a 	add	r4,r4,r17
811193c0:	e038943a 	slli	fp,fp,16
811193c4:	2421c83a 	sub	r16,r4,r16
811193c8:	e086b03a 	or	r3,fp,r2
811193cc:	003f4306 	br	811190dc <__reset+0xfb0f90dc>
811193d0:	2005883a 	mov	r2,r4
811193d4:	003f6906 	br	8111917c <__reset+0xfb0f917c>
811193d8:	1805883a 	mov	r2,r3
811193dc:	003f0f06 	br	8111901c <__reset+0xfb0f901c>
811193e0:	1806943a 	slli	r3,r3,16
811193e4:	9d66983a 	sll	r19,r19,r21
811193e8:	39ffffcc 	andi	r7,r7,65535
811193ec:	19c7883a 	add	r3,r3,r7
811193f0:	98ffc32e 	bgeu	r19,r3,81119300 <__reset+0xfb0f9300>
811193f4:	10bfffc4 	addi	r2,r2,-1
811193f8:	003fc106 	br	81119300 <__reset+0xfb0f9300>
811193fc:	00800604 	movi	r2,24
81119400:	003f1106 	br	81119048 <__reset+0xfb0f9048>
81119404:	00800604 	movi	r2,24
81119408:	003f2706 	br	811190a8 <__reset+0xfb0f90a8>
8111940c:	00800604 	movi	r2,24
81119410:	003ece06 	br	81118f4c <__reset+0xfb0f8f4c>
81119414:	0007883a 	mov	r3,zero
81119418:	00800044 	movi	r2,1
8111941c:	003f5c06 	br	81119190 <__reset+0xfb0f9190>
81119420:	813fa12e 	bgeu	r16,r4,811192a8 <__reset+0xfb0f92a8>
81119424:	10bfff84 	addi	r2,r2,-2
81119428:	85e1883a 	add	r16,r16,r23
8111942c:	003f9f06 	br	811192ac <__reset+0xfb0f92ac>
81119430:	1c7f8a2e 	bgeu	r3,r17,8111925c <__reset+0xfb0f925c>
81119434:	31bfff84 	addi	r6,r6,-2
81119438:	1dc7883a 	add	r3,r3,r23
8111943c:	003f8806 	br	81119260 <__reset+0xfb0f9260>
81119440:	1805883a 	mov	r2,r3
81119444:	003fde06 	br	811193c0 <__reset+0xfb0f93c0>
81119448:	1839883a 	mov	fp,r3
8111944c:	003fc906 	br	81119374 <__reset+0xfb0f9374>
81119450:	b5bfff84 	addi	r22,r22,-2
81119454:	2449883a 	add	r4,r4,r17
81119458:	003f3406 	br	8111912c <__reset+0xfb0f912c>
8111945c:	b5bfff84 	addi	r22,r22,-2
81119460:	1445883a 	add	r2,r2,r17
81119464:	003edb06 	br	81118fd4 <__reset+0xfb0f8fd4>

81119468 <__umoddi3>:
81119468:	defff404 	addi	sp,sp,-48
8111946c:	df000a15 	stw	fp,40(sp)
81119470:	dc400315 	stw	r17,12(sp)
81119474:	dc000215 	stw	r16,8(sp)
81119478:	dfc00b15 	stw	ra,44(sp)
8111947c:	ddc00915 	stw	r23,36(sp)
81119480:	dd800815 	stw	r22,32(sp)
81119484:	dd400715 	stw	r21,28(sp)
81119488:	dd000615 	stw	r20,24(sp)
8111948c:	dcc00515 	stw	r19,20(sp)
81119490:	dc800415 	stw	r18,16(sp)
81119494:	2021883a 	mov	r16,r4
81119498:	2823883a 	mov	r17,r5
8111949c:	2839883a 	mov	fp,r5
811194a0:	38003c1e 	bne	r7,zero,81119594 <__umoddi3+0x12c>
811194a4:	3027883a 	mov	r19,r6
811194a8:	2029883a 	mov	r20,r4
811194ac:	2980512e 	bgeu	r5,r6,811195f4 <__umoddi3+0x18c>
811194b0:	00bfffd4 	movui	r2,65535
811194b4:	11809a36 	bltu	r2,r6,81119720 <__umoddi3+0x2b8>
811194b8:	01003fc4 	movi	r4,255
811194bc:	2189803a 	cmpltu	r4,r4,r6
811194c0:	200890fa 	slli	r4,r4,3
811194c4:	3104d83a 	srl	r2,r6,r4
811194c8:	00e044b4 	movhi	r3,33042
811194cc:	18c88b04 	addi	r3,r3,8748
811194d0:	1885883a 	add	r2,r3,r2
811194d4:	10c00003 	ldbu	r3,0(r2)
811194d8:	00800804 	movi	r2,32
811194dc:	1909883a 	add	r4,r3,r4
811194e0:	1125c83a 	sub	r18,r2,r4
811194e4:	90000526 	beq	r18,zero,811194fc <__umoddi3+0x94>
811194e8:	8ca2983a 	sll	r17,r17,r18
811194ec:	8108d83a 	srl	r4,r16,r4
811194f0:	34a6983a 	sll	r19,r6,r18
811194f4:	84a8983a 	sll	r20,r16,r18
811194f8:	2478b03a 	or	fp,r4,r17
811194fc:	982ed43a 	srli	r23,r19,16
81119500:	e009883a 	mov	r4,fp
81119504:	9dbfffcc 	andi	r22,r19,65535
81119508:	b80b883a 	mov	r5,r23
8111950c:	1119afc0 	call	81119afc <__umodsi3>
81119510:	e009883a 	mov	r4,fp
81119514:	b80b883a 	mov	r5,r23
81119518:	102b883a 	mov	r21,r2
8111951c:	1119a980 	call	81119a98 <__udivsi3>
81119520:	a806943a 	slli	r3,r21,16
81119524:	a008d43a 	srli	r4,r20,16
81119528:	b085383a 	mul	r2,r22,r2
8111952c:	20c8b03a 	or	r4,r4,r3
81119530:	2080032e 	bgeu	r4,r2,81119540 <__umoddi3+0xd8>
81119534:	24c9883a 	add	r4,r4,r19
81119538:	24c00136 	bltu	r4,r19,81119540 <__umoddi3+0xd8>
8111953c:	20811036 	bltu	r4,r2,81119980 <__umoddi3+0x518>
81119540:	20abc83a 	sub	r21,r4,r2
81119544:	b80b883a 	mov	r5,r23
81119548:	a809883a 	mov	r4,r21
8111954c:	1119afc0 	call	81119afc <__umodsi3>
81119550:	1023883a 	mov	r17,r2
81119554:	b80b883a 	mov	r5,r23
81119558:	a809883a 	mov	r4,r21
8111955c:	1119a980 	call	81119a98 <__udivsi3>
81119560:	8822943a 	slli	r17,r17,16
81119564:	b085383a 	mul	r2,r22,r2
81119568:	a0ffffcc 	andi	r3,r20,65535
8111956c:	1c46b03a 	or	r3,r3,r17
81119570:	1880042e 	bgeu	r3,r2,81119584 <__umoddi3+0x11c>
81119574:	1cc7883a 	add	r3,r3,r19
81119578:	1cc00236 	bltu	r3,r19,81119584 <__umoddi3+0x11c>
8111957c:	1880012e 	bgeu	r3,r2,81119584 <__umoddi3+0x11c>
81119580:	1cc7883a 	add	r3,r3,r19
81119584:	1885c83a 	sub	r2,r3,r2
81119588:	1484d83a 	srl	r2,r2,r18
8111958c:	0007883a 	mov	r3,zero
81119590:	00004f06 	br	811196d0 <__umoddi3+0x268>
81119594:	29c04c36 	bltu	r5,r7,811196c8 <__umoddi3+0x260>
81119598:	00bfffd4 	movui	r2,65535
8111959c:	11c0582e 	bgeu	r2,r7,81119700 <__umoddi3+0x298>
811195a0:	00804034 	movhi	r2,256
811195a4:	10bfffc4 	addi	r2,r2,-1
811195a8:	11c0e736 	bltu	r2,r7,81119948 <__umoddi3+0x4e0>
811195ac:	01000404 	movi	r4,16
811195b0:	3904d83a 	srl	r2,r7,r4
811195b4:	00e044b4 	movhi	r3,33042
811195b8:	18c88b04 	addi	r3,r3,8748
811195bc:	1885883a 	add	r2,r3,r2
811195c0:	14c00003 	ldbu	r19,0(r2)
811195c4:	00c00804 	movi	r3,32
811195c8:	9927883a 	add	r19,r19,r4
811195cc:	1ce9c83a 	sub	r20,r3,r19
811195d0:	a000581e 	bne	r20,zero,81119734 <__umoddi3+0x2cc>
811195d4:	3c400136 	bltu	r7,r17,811195dc <__umoddi3+0x174>
811195d8:	8180eb36 	bltu	r16,r6,81119988 <__umoddi3+0x520>
811195dc:	8185c83a 	sub	r2,r16,r6
811195e0:	89e3c83a 	sub	r17,r17,r7
811195e4:	8089803a 	cmpltu	r4,r16,r2
811195e8:	8939c83a 	sub	fp,r17,r4
811195ec:	e007883a 	mov	r3,fp
811195f0:	00003706 	br	811196d0 <__umoddi3+0x268>
811195f4:	3000041e 	bne	r6,zero,81119608 <__umoddi3+0x1a0>
811195f8:	000b883a 	mov	r5,zero
811195fc:	01000044 	movi	r4,1
81119600:	1119a980 	call	81119a98 <__udivsi3>
81119604:	1027883a 	mov	r19,r2
81119608:	00bfffd4 	movui	r2,65535
8111960c:	14c0402e 	bgeu	r2,r19,81119710 <__umoddi3+0x2a8>
81119610:	00804034 	movhi	r2,256
81119614:	10bfffc4 	addi	r2,r2,-1
81119618:	14c0cd36 	bltu	r2,r19,81119950 <__umoddi3+0x4e8>
8111961c:	00800404 	movi	r2,16
81119620:	9886d83a 	srl	r3,r19,r2
81119624:	012044b4 	movhi	r4,33042
81119628:	21088b04 	addi	r4,r4,8748
8111962c:	20c7883a 	add	r3,r4,r3
81119630:	18c00003 	ldbu	r3,0(r3)
81119634:	1887883a 	add	r3,r3,r2
81119638:	00800804 	movi	r2,32
8111963c:	10e5c83a 	sub	r18,r2,r3
81119640:	9000901e 	bne	r18,zero,81119884 <__umoddi3+0x41c>
81119644:	982cd43a 	srli	r22,r19,16
81119648:	8ce3c83a 	sub	r17,r17,r19
8111964c:	9d7fffcc 	andi	r21,r19,65535
81119650:	b00b883a 	mov	r5,r22
81119654:	8809883a 	mov	r4,r17
81119658:	1119afc0 	call	81119afc <__umodsi3>
8111965c:	8809883a 	mov	r4,r17
81119660:	b00b883a 	mov	r5,r22
81119664:	1021883a 	mov	r16,r2
81119668:	1119a980 	call	81119a98 <__udivsi3>
8111966c:	8006943a 	slli	r3,r16,16
81119670:	a008d43a 	srli	r4,r20,16
81119674:	1545383a 	mul	r2,r2,r21
81119678:	20c8b03a 	or	r4,r4,r3
8111967c:	2080042e 	bgeu	r4,r2,81119690 <__umoddi3+0x228>
81119680:	24c9883a 	add	r4,r4,r19
81119684:	24c00236 	bltu	r4,r19,81119690 <__umoddi3+0x228>
81119688:	2080012e 	bgeu	r4,r2,81119690 <__umoddi3+0x228>
8111968c:	24c9883a 	add	r4,r4,r19
81119690:	20a1c83a 	sub	r16,r4,r2
81119694:	b00b883a 	mov	r5,r22
81119698:	8009883a 	mov	r4,r16
8111969c:	1119afc0 	call	81119afc <__umodsi3>
811196a0:	1023883a 	mov	r17,r2
811196a4:	b00b883a 	mov	r5,r22
811196a8:	8009883a 	mov	r4,r16
811196ac:	1119a980 	call	81119a98 <__udivsi3>
811196b0:	8822943a 	slli	r17,r17,16
811196b4:	1545383a 	mul	r2,r2,r21
811196b8:	a53fffcc 	andi	r20,r20,65535
811196bc:	a446b03a 	or	r3,r20,r17
811196c0:	18bfb02e 	bgeu	r3,r2,81119584 <__reset+0xfb0f9584>
811196c4:	003fab06 	br	81119574 <__reset+0xfb0f9574>
811196c8:	2005883a 	mov	r2,r4
811196cc:	2807883a 	mov	r3,r5
811196d0:	dfc00b17 	ldw	ra,44(sp)
811196d4:	df000a17 	ldw	fp,40(sp)
811196d8:	ddc00917 	ldw	r23,36(sp)
811196dc:	dd800817 	ldw	r22,32(sp)
811196e0:	dd400717 	ldw	r21,28(sp)
811196e4:	dd000617 	ldw	r20,24(sp)
811196e8:	dcc00517 	ldw	r19,20(sp)
811196ec:	dc800417 	ldw	r18,16(sp)
811196f0:	dc400317 	ldw	r17,12(sp)
811196f4:	dc000217 	ldw	r16,8(sp)
811196f8:	dec00c04 	addi	sp,sp,48
811196fc:	f800283a 	ret
81119700:	04c03fc4 	movi	r19,255
81119704:	99c9803a 	cmpltu	r4,r19,r7
81119708:	200890fa 	slli	r4,r4,3
8111970c:	003fa806 	br	811195b0 <__reset+0xfb0f95b0>
81119710:	00803fc4 	movi	r2,255
81119714:	14c5803a 	cmpltu	r2,r2,r19
81119718:	100490fa 	slli	r2,r2,3
8111971c:	003fc006 	br	81119620 <__reset+0xfb0f9620>
81119720:	00804034 	movhi	r2,256
81119724:	10bfffc4 	addi	r2,r2,-1
81119728:	11808b36 	bltu	r2,r6,81119958 <__umoddi3+0x4f0>
8111972c:	01000404 	movi	r4,16
81119730:	003f6406 	br	811194c4 <__reset+0xfb0f94c4>
81119734:	34c4d83a 	srl	r2,r6,r19
81119738:	3d0e983a 	sll	r7,r7,r20
8111973c:	8cf8d83a 	srl	fp,r17,r19
81119740:	8d10983a 	sll	r8,r17,r20
81119744:	38aab03a 	or	r21,r7,r2
81119748:	a82cd43a 	srli	r22,r21,16
8111974c:	84e2d83a 	srl	r17,r16,r19
81119750:	e009883a 	mov	r4,fp
81119754:	b00b883a 	mov	r5,r22
81119758:	8a22b03a 	or	r17,r17,r8
8111975c:	3524983a 	sll	r18,r6,r20
81119760:	1119afc0 	call	81119afc <__umodsi3>
81119764:	e009883a 	mov	r4,fp
81119768:	b00b883a 	mov	r5,r22
8111976c:	102f883a 	mov	r23,r2
81119770:	1119a980 	call	81119a98 <__udivsi3>
81119774:	100d883a 	mov	r6,r2
81119778:	b808943a 	slli	r4,r23,16
8111977c:	aa3fffcc 	andi	r8,r21,65535
81119780:	8804d43a 	srli	r2,r17,16
81119784:	41af383a 	mul	r23,r8,r6
81119788:	8520983a 	sll	r16,r16,r20
8111978c:	1104b03a 	or	r2,r2,r4
81119790:	15c0042e 	bgeu	r2,r23,811197a4 <__umoddi3+0x33c>
81119794:	1545883a 	add	r2,r2,r21
81119798:	30ffffc4 	addi	r3,r6,-1
8111979c:	1540742e 	bgeu	r2,r21,81119970 <__umoddi3+0x508>
811197a0:	180d883a 	mov	r6,r3
811197a4:	15efc83a 	sub	r23,r2,r23
811197a8:	b00b883a 	mov	r5,r22
811197ac:	b809883a 	mov	r4,r23
811197b0:	d9800115 	stw	r6,4(sp)
811197b4:	da000015 	stw	r8,0(sp)
811197b8:	1119afc0 	call	81119afc <__umodsi3>
811197bc:	b00b883a 	mov	r5,r22
811197c0:	b809883a 	mov	r4,r23
811197c4:	1039883a 	mov	fp,r2
811197c8:	1119a980 	call	81119a98 <__udivsi3>
811197cc:	da000017 	ldw	r8,0(sp)
811197d0:	e038943a 	slli	fp,fp,16
811197d4:	100b883a 	mov	r5,r2
811197d8:	4089383a 	mul	r4,r8,r2
811197dc:	8a3fffcc 	andi	r8,r17,65535
811197e0:	4710b03a 	or	r8,r8,fp
811197e4:	d9800117 	ldw	r6,4(sp)
811197e8:	4100042e 	bgeu	r8,r4,811197fc <__umoddi3+0x394>
811197ec:	4551883a 	add	r8,r8,r21
811197f0:	10bfffc4 	addi	r2,r2,-1
811197f4:	45405a2e 	bgeu	r8,r21,81119960 <__umoddi3+0x4f8>
811197f8:	100b883a 	mov	r5,r2
811197fc:	300c943a 	slli	r6,r6,16
81119800:	91ffffcc 	andi	r7,r18,65535
81119804:	9004d43a 	srli	r2,r18,16
81119808:	314cb03a 	or	r6,r6,r5
8111980c:	317fffcc 	andi	r5,r6,65535
81119810:	300cd43a 	srli	r6,r6,16
81119814:	29d3383a 	mul	r9,r5,r7
81119818:	288b383a 	mul	r5,r5,r2
8111981c:	31cf383a 	mul	r7,r6,r7
81119820:	4806d43a 	srli	r3,r9,16
81119824:	4111c83a 	sub	r8,r8,r4
81119828:	29cb883a 	add	r5,r5,r7
8111982c:	194b883a 	add	r5,r3,r5
81119830:	3085383a 	mul	r2,r6,r2
81119834:	29c0022e 	bgeu	r5,r7,81119840 <__umoddi3+0x3d8>
81119838:	00c00074 	movhi	r3,1
8111983c:	10c5883a 	add	r2,r2,r3
81119840:	2808d43a 	srli	r4,r5,16
81119844:	280a943a 	slli	r5,r5,16
81119848:	4a7fffcc 	andi	r9,r9,65535
8111984c:	2085883a 	add	r2,r4,r2
81119850:	2a4b883a 	add	r5,r5,r9
81119854:	40803636 	bltu	r8,r2,81119930 <__umoddi3+0x4c8>
81119858:	40804d26 	beq	r8,r2,81119990 <__umoddi3+0x528>
8111985c:	4089c83a 	sub	r4,r8,r2
81119860:	280f883a 	mov	r7,r5
81119864:	81cfc83a 	sub	r7,r16,r7
81119868:	81c7803a 	cmpltu	r3,r16,r7
8111986c:	20c7c83a 	sub	r3,r4,r3
81119870:	1cc4983a 	sll	r2,r3,r19
81119874:	3d0ed83a 	srl	r7,r7,r20
81119878:	1d06d83a 	srl	r3,r3,r20
8111987c:	11c4b03a 	or	r2,r2,r7
81119880:	003f9306 	br	811196d0 <__reset+0xfb0f96d0>
81119884:	9ca6983a 	sll	r19,r19,r18
81119888:	88e8d83a 	srl	r20,r17,r3
8111988c:	80c4d83a 	srl	r2,r16,r3
81119890:	982cd43a 	srli	r22,r19,16
81119894:	8ca2983a 	sll	r17,r17,r18
81119898:	a009883a 	mov	r4,r20
8111989c:	b00b883a 	mov	r5,r22
811198a0:	1478b03a 	or	fp,r2,r17
811198a4:	1119afc0 	call	81119afc <__umodsi3>
811198a8:	a009883a 	mov	r4,r20
811198ac:	b00b883a 	mov	r5,r22
811198b0:	1023883a 	mov	r17,r2
811198b4:	1119a980 	call	81119a98 <__udivsi3>
811198b8:	9d7fffcc 	andi	r21,r19,65535
811198bc:	880a943a 	slli	r5,r17,16
811198c0:	e008d43a 	srli	r4,fp,16
811198c4:	a885383a 	mul	r2,r21,r2
811198c8:	84a8983a 	sll	r20,r16,r18
811198cc:	2148b03a 	or	r4,r4,r5
811198d0:	2080042e 	bgeu	r4,r2,811198e4 <__umoddi3+0x47c>
811198d4:	24c9883a 	add	r4,r4,r19
811198d8:	24c00236 	bltu	r4,r19,811198e4 <__umoddi3+0x47c>
811198dc:	2080012e 	bgeu	r4,r2,811198e4 <__umoddi3+0x47c>
811198e0:	24c9883a 	add	r4,r4,r19
811198e4:	20a3c83a 	sub	r17,r4,r2
811198e8:	b00b883a 	mov	r5,r22
811198ec:	8809883a 	mov	r4,r17
811198f0:	1119afc0 	call	81119afc <__umodsi3>
811198f4:	102f883a 	mov	r23,r2
811198f8:	8809883a 	mov	r4,r17
811198fc:	b00b883a 	mov	r5,r22
81119900:	1119a980 	call	81119a98 <__udivsi3>
81119904:	b82e943a 	slli	r23,r23,16
81119908:	a885383a 	mul	r2,r21,r2
8111990c:	e13fffcc 	andi	r4,fp,65535
81119910:	25c8b03a 	or	r4,r4,r23
81119914:	2080042e 	bgeu	r4,r2,81119928 <__umoddi3+0x4c0>
81119918:	24c9883a 	add	r4,r4,r19
8111991c:	24c00236 	bltu	r4,r19,81119928 <__umoddi3+0x4c0>
81119920:	2080012e 	bgeu	r4,r2,81119928 <__umoddi3+0x4c0>
81119924:	24c9883a 	add	r4,r4,r19
81119928:	20a3c83a 	sub	r17,r4,r2
8111992c:	003f4806 	br	81119650 <__reset+0xfb0f9650>
81119930:	2c8fc83a 	sub	r7,r5,r18
81119934:	1545c83a 	sub	r2,r2,r21
81119938:	29cb803a 	cmpltu	r5,r5,r7
8111993c:	1145c83a 	sub	r2,r2,r5
81119940:	4089c83a 	sub	r4,r8,r2
81119944:	003fc706 	br	81119864 <__reset+0xfb0f9864>
81119948:	01000604 	movi	r4,24
8111994c:	003f1806 	br	811195b0 <__reset+0xfb0f95b0>
81119950:	00800604 	movi	r2,24
81119954:	003f3206 	br	81119620 <__reset+0xfb0f9620>
81119958:	01000604 	movi	r4,24
8111995c:	003ed906 	br	811194c4 <__reset+0xfb0f94c4>
81119960:	413fa52e 	bgeu	r8,r4,811197f8 <__reset+0xfb0f97f8>
81119964:	297fff84 	addi	r5,r5,-2
81119968:	4551883a 	add	r8,r8,r21
8111996c:	003fa306 	br	811197fc <__reset+0xfb0f97fc>
81119970:	15ff8b2e 	bgeu	r2,r23,811197a0 <__reset+0xfb0f97a0>
81119974:	31bfff84 	addi	r6,r6,-2
81119978:	1545883a 	add	r2,r2,r21
8111997c:	003f8906 	br	811197a4 <__reset+0xfb0f97a4>
81119980:	24c9883a 	add	r4,r4,r19
81119984:	003eee06 	br	81119540 <__reset+0xfb0f9540>
81119988:	8005883a 	mov	r2,r16
8111998c:	003f1706 	br	811195ec <__reset+0xfb0f95ec>
81119990:	817fe736 	bltu	r16,r5,81119930 <__reset+0xfb0f9930>
81119994:	280f883a 	mov	r7,r5
81119998:	0009883a 	mov	r4,zero
8111999c:	003fb106 	br	81119864 <__reset+0xfb0f9864>

811199a0 <__divsi3>:
811199a0:	20001b16 	blt	r4,zero,81119a10 <__divsi3+0x70>
811199a4:	000f883a 	mov	r7,zero
811199a8:	28001616 	blt	r5,zero,81119a04 <__divsi3+0x64>
811199ac:	200d883a 	mov	r6,r4
811199b0:	29001a2e 	bgeu	r5,r4,81119a1c <__divsi3+0x7c>
811199b4:	00800804 	movi	r2,32
811199b8:	00c00044 	movi	r3,1
811199bc:	00000106 	br	811199c4 <__divsi3+0x24>
811199c0:	10000d26 	beq	r2,zero,811199f8 <__divsi3+0x58>
811199c4:	294b883a 	add	r5,r5,r5
811199c8:	10bfffc4 	addi	r2,r2,-1
811199cc:	18c7883a 	add	r3,r3,r3
811199d0:	293ffb36 	bltu	r5,r4,811199c0 <__reset+0xfb0f99c0>
811199d4:	0005883a 	mov	r2,zero
811199d8:	18000726 	beq	r3,zero,811199f8 <__divsi3+0x58>
811199dc:	0005883a 	mov	r2,zero
811199e0:	31400236 	bltu	r6,r5,811199ec <__divsi3+0x4c>
811199e4:	314dc83a 	sub	r6,r6,r5
811199e8:	10c4b03a 	or	r2,r2,r3
811199ec:	1806d07a 	srli	r3,r3,1
811199f0:	280ad07a 	srli	r5,r5,1
811199f4:	183ffa1e 	bne	r3,zero,811199e0 <__reset+0xfb0f99e0>
811199f8:	38000126 	beq	r7,zero,81119a00 <__divsi3+0x60>
811199fc:	0085c83a 	sub	r2,zero,r2
81119a00:	f800283a 	ret
81119a04:	014bc83a 	sub	r5,zero,r5
81119a08:	39c0005c 	xori	r7,r7,1
81119a0c:	003fe706 	br	811199ac <__reset+0xfb0f99ac>
81119a10:	0109c83a 	sub	r4,zero,r4
81119a14:	01c00044 	movi	r7,1
81119a18:	003fe306 	br	811199a8 <__reset+0xfb0f99a8>
81119a1c:	00c00044 	movi	r3,1
81119a20:	003fee06 	br	811199dc <__reset+0xfb0f99dc>

81119a24 <__modsi3>:
81119a24:	20001716 	blt	r4,zero,81119a84 <__modsi3+0x60>
81119a28:	000f883a 	mov	r7,zero
81119a2c:	2005883a 	mov	r2,r4
81119a30:	28001216 	blt	r5,zero,81119a7c <__modsi3+0x58>
81119a34:	2900162e 	bgeu	r5,r4,81119a90 <__modsi3+0x6c>
81119a38:	01800804 	movi	r6,32
81119a3c:	00c00044 	movi	r3,1
81119a40:	00000106 	br	81119a48 <__modsi3+0x24>
81119a44:	30000a26 	beq	r6,zero,81119a70 <__modsi3+0x4c>
81119a48:	294b883a 	add	r5,r5,r5
81119a4c:	31bfffc4 	addi	r6,r6,-1
81119a50:	18c7883a 	add	r3,r3,r3
81119a54:	293ffb36 	bltu	r5,r4,81119a44 <__reset+0xfb0f9a44>
81119a58:	18000526 	beq	r3,zero,81119a70 <__modsi3+0x4c>
81119a5c:	1806d07a 	srli	r3,r3,1
81119a60:	11400136 	bltu	r2,r5,81119a68 <__modsi3+0x44>
81119a64:	1145c83a 	sub	r2,r2,r5
81119a68:	280ad07a 	srli	r5,r5,1
81119a6c:	183ffb1e 	bne	r3,zero,81119a5c <__reset+0xfb0f9a5c>
81119a70:	38000126 	beq	r7,zero,81119a78 <__modsi3+0x54>
81119a74:	0085c83a 	sub	r2,zero,r2
81119a78:	f800283a 	ret
81119a7c:	014bc83a 	sub	r5,zero,r5
81119a80:	003fec06 	br	81119a34 <__reset+0xfb0f9a34>
81119a84:	0109c83a 	sub	r4,zero,r4
81119a88:	01c00044 	movi	r7,1
81119a8c:	003fe706 	br	81119a2c <__reset+0xfb0f9a2c>
81119a90:	00c00044 	movi	r3,1
81119a94:	003ff106 	br	81119a5c <__reset+0xfb0f9a5c>

81119a98 <__udivsi3>:
81119a98:	200d883a 	mov	r6,r4
81119a9c:	2900152e 	bgeu	r5,r4,81119af4 <__udivsi3+0x5c>
81119aa0:	28001416 	blt	r5,zero,81119af4 <__udivsi3+0x5c>
81119aa4:	00800804 	movi	r2,32
81119aa8:	00c00044 	movi	r3,1
81119aac:	00000206 	br	81119ab8 <__udivsi3+0x20>
81119ab0:	10000e26 	beq	r2,zero,81119aec <__udivsi3+0x54>
81119ab4:	28000516 	blt	r5,zero,81119acc <__udivsi3+0x34>
81119ab8:	294b883a 	add	r5,r5,r5
81119abc:	10bfffc4 	addi	r2,r2,-1
81119ac0:	18c7883a 	add	r3,r3,r3
81119ac4:	293ffa36 	bltu	r5,r4,81119ab0 <__reset+0xfb0f9ab0>
81119ac8:	18000826 	beq	r3,zero,81119aec <__udivsi3+0x54>
81119acc:	0005883a 	mov	r2,zero
81119ad0:	31400236 	bltu	r6,r5,81119adc <__udivsi3+0x44>
81119ad4:	314dc83a 	sub	r6,r6,r5
81119ad8:	10c4b03a 	or	r2,r2,r3
81119adc:	1806d07a 	srli	r3,r3,1
81119ae0:	280ad07a 	srli	r5,r5,1
81119ae4:	183ffa1e 	bne	r3,zero,81119ad0 <__reset+0xfb0f9ad0>
81119ae8:	f800283a 	ret
81119aec:	0005883a 	mov	r2,zero
81119af0:	f800283a 	ret
81119af4:	00c00044 	movi	r3,1
81119af8:	003ff406 	br	81119acc <__reset+0xfb0f9acc>

81119afc <__umodsi3>:
81119afc:	2005883a 	mov	r2,r4
81119b00:	2900122e 	bgeu	r5,r4,81119b4c <__umodsi3+0x50>
81119b04:	28001116 	blt	r5,zero,81119b4c <__umodsi3+0x50>
81119b08:	01800804 	movi	r6,32
81119b0c:	00c00044 	movi	r3,1
81119b10:	00000206 	br	81119b1c <__umodsi3+0x20>
81119b14:	30000c26 	beq	r6,zero,81119b48 <__umodsi3+0x4c>
81119b18:	28000516 	blt	r5,zero,81119b30 <__umodsi3+0x34>
81119b1c:	294b883a 	add	r5,r5,r5
81119b20:	31bfffc4 	addi	r6,r6,-1
81119b24:	18c7883a 	add	r3,r3,r3
81119b28:	293ffa36 	bltu	r5,r4,81119b14 <__reset+0xfb0f9b14>
81119b2c:	18000626 	beq	r3,zero,81119b48 <__umodsi3+0x4c>
81119b30:	1806d07a 	srli	r3,r3,1
81119b34:	11400136 	bltu	r2,r5,81119b3c <__umodsi3+0x40>
81119b38:	1145c83a 	sub	r2,r2,r5
81119b3c:	280ad07a 	srli	r5,r5,1
81119b40:	183ffb1e 	bne	r3,zero,81119b30 <__reset+0xfb0f9b30>
81119b44:	f800283a 	ret
81119b48:	f800283a 	ret
81119b4c:	00c00044 	movi	r3,1
81119b50:	003ff706 	br	81119b30 <__reset+0xfb0f9b30>

81119b54 <__adddf3>:
81119b54:	02c00434 	movhi	r11,16
81119b58:	5affffc4 	addi	r11,r11,-1
81119b5c:	2806d7fa 	srli	r3,r5,31
81119b60:	2ad4703a 	and	r10,r5,r11
81119b64:	3ad2703a 	and	r9,r7,r11
81119b68:	3804d53a 	srli	r2,r7,20
81119b6c:	3018d77a 	srli	r12,r6,29
81119b70:	280ad53a 	srli	r5,r5,20
81119b74:	501490fa 	slli	r10,r10,3
81119b78:	2010d77a 	srli	r8,r4,29
81119b7c:	481290fa 	slli	r9,r9,3
81119b80:	380ed7fa 	srli	r7,r7,31
81119b84:	defffb04 	addi	sp,sp,-20
81119b88:	dc800215 	stw	r18,8(sp)
81119b8c:	dc400115 	stw	r17,4(sp)
81119b90:	dc000015 	stw	r16,0(sp)
81119b94:	dfc00415 	stw	ra,16(sp)
81119b98:	dcc00315 	stw	r19,12(sp)
81119b9c:	1c803fcc 	andi	r18,r3,255
81119ba0:	2c01ffcc 	andi	r16,r5,2047
81119ba4:	5210b03a 	or	r8,r10,r8
81119ba8:	202290fa 	slli	r17,r4,3
81119bac:	1081ffcc 	andi	r2,r2,2047
81119bb0:	4b12b03a 	or	r9,r9,r12
81119bb4:	300c90fa 	slli	r6,r6,3
81119bb8:	91c07526 	beq	r18,r7,81119d90 <__adddf3+0x23c>
81119bbc:	8087c83a 	sub	r3,r16,r2
81119bc0:	00c0ab0e 	bge	zero,r3,81119e70 <__adddf3+0x31c>
81119bc4:	10002a1e 	bne	r2,zero,81119c70 <__adddf3+0x11c>
81119bc8:	4984b03a 	or	r2,r9,r6
81119bcc:	1000961e 	bne	r2,zero,81119e28 <__adddf3+0x2d4>
81119bd0:	888001cc 	andi	r2,r17,7
81119bd4:	10000726 	beq	r2,zero,81119bf4 <__adddf3+0xa0>
81119bd8:	888003cc 	andi	r2,r17,15
81119bdc:	00c00104 	movi	r3,4
81119be0:	10c00426 	beq	r2,r3,81119bf4 <__adddf3+0xa0>
81119be4:	88c7883a 	add	r3,r17,r3
81119be8:	1c63803a 	cmpltu	r17,r3,r17
81119bec:	4451883a 	add	r8,r8,r17
81119bf0:	1823883a 	mov	r17,r3
81119bf4:	4080202c 	andhi	r2,r8,128
81119bf8:	10005926 	beq	r2,zero,81119d60 <__adddf3+0x20c>
81119bfc:	84000044 	addi	r16,r16,1
81119c00:	0081ffc4 	movi	r2,2047
81119c04:	8080ba26 	beq	r16,r2,81119ef0 <__adddf3+0x39c>
81119c08:	00bfe034 	movhi	r2,65408
81119c0c:	10bfffc4 	addi	r2,r2,-1
81119c10:	4090703a 	and	r8,r8,r2
81119c14:	4004977a 	slli	r2,r8,29
81119c18:	4010927a 	slli	r8,r8,9
81119c1c:	8822d0fa 	srli	r17,r17,3
81119c20:	8401ffcc 	andi	r16,r16,2047
81119c24:	4010d33a 	srli	r8,r8,12
81119c28:	9007883a 	mov	r3,r18
81119c2c:	1444b03a 	or	r2,r2,r17
81119c30:	8401ffcc 	andi	r16,r16,2047
81119c34:	8020953a 	slli	r16,r16,20
81119c38:	18c03fcc 	andi	r3,r3,255
81119c3c:	01000434 	movhi	r4,16
81119c40:	213fffc4 	addi	r4,r4,-1
81119c44:	180697fa 	slli	r3,r3,31
81119c48:	4110703a 	and	r8,r8,r4
81119c4c:	4410b03a 	or	r8,r8,r16
81119c50:	40c6b03a 	or	r3,r8,r3
81119c54:	dfc00417 	ldw	ra,16(sp)
81119c58:	dcc00317 	ldw	r19,12(sp)
81119c5c:	dc800217 	ldw	r18,8(sp)
81119c60:	dc400117 	ldw	r17,4(sp)
81119c64:	dc000017 	ldw	r16,0(sp)
81119c68:	dec00504 	addi	sp,sp,20
81119c6c:	f800283a 	ret
81119c70:	0081ffc4 	movi	r2,2047
81119c74:	80bfd626 	beq	r16,r2,81119bd0 <__reset+0xfb0f9bd0>
81119c78:	4a402034 	orhi	r9,r9,128
81119c7c:	00800e04 	movi	r2,56
81119c80:	10c09f16 	blt	r2,r3,81119f00 <__adddf3+0x3ac>
81119c84:	008007c4 	movi	r2,31
81119c88:	10c0c216 	blt	r2,r3,81119f94 <__adddf3+0x440>
81119c8c:	00800804 	movi	r2,32
81119c90:	10c5c83a 	sub	r2,r2,r3
81119c94:	488a983a 	sll	r5,r9,r2
81119c98:	30c8d83a 	srl	r4,r6,r3
81119c9c:	3084983a 	sll	r2,r6,r2
81119ca0:	48c6d83a 	srl	r3,r9,r3
81119ca4:	290cb03a 	or	r6,r5,r4
81119ca8:	1004c03a 	cmpne	r2,r2,zero
81119cac:	308cb03a 	or	r6,r6,r2
81119cb0:	898dc83a 	sub	r6,r17,r6
81119cb4:	89a3803a 	cmpltu	r17,r17,r6
81119cb8:	40d1c83a 	sub	r8,r8,r3
81119cbc:	4451c83a 	sub	r8,r8,r17
81119cc0:	3023883a 	mov	r17,r6
81119cc4:	4080202c 	andhi	r2,r8,128
81119cc8:	10002326 	beq	r2,zero,81119d58 <__adddf3+0x204>
81119ccc:	04c02034 	movhi	r19,128
81119cd0:	9cffffc4 	addi	r19,r19,-1
81119cd4:	44e6703a 	and	r19,r8,r19
81119cd8:	98007626 	beq	r19,zero,81119eb4 <__adddf3+0x360>
81119cdc:	9809883a 	mov	r4,r19
81119ce0:	110b77c0 	call	8110b77c <__clzsi2>
81119ce4:	10fffe04 	addi	r3,r2,-8
81119ce8:	010007c4 	movi	r4,31
81119cec:	20c07716 	blt	r4,r3,81119ecc <__adddf3+0x378>
81119cf0:	00800804 	movi	r2,32
81119cf4:	10c5c83a 	sub	r2,r2,r3
81119cf8:	8884d83a 	srl	r2,r17,r2
81119cfc:	98d0983a 	sll	r8,r19,r3
81119d00:	88e2983a 	sll	r17,r17,r3
81119d04:	1204b03a 	or	r2,r2,r8
81119d08:	1c007416 	blt	r3,r16,81119edc <__adddf3+0x388>
81119d0c:	1c21c83a 	sub	r16,r3,r16
81119d10:	82000044 	addi	r8,r16,1
81119d14:	00c007c4 	movi	r3,31
81119d18:	1a009116 	blt	r3,r8,81119f60 <__adddf3+0x40c>
81119d1c:	00c00804 	movi	r3,32
81119d20:	1a07c83a 	sub	r3,r3,r8
81119d24:	8a08d83a 	srl	r4,r17,r8
81119d28:	88e2983a 	sll	r17,r17,r3
81119d2c:	10c6983a 	sll	r3,r2,r3
81119d30:	1210d83a 	srl	r8,r2,r8
81119d34:	8804c03a 	cmpne	r2,r17,zero
81119d38:	1906b03a 	or	r3,r3,r4
81119d3c:	18a2b03a 	or	r17,r3,r2
81119d40:	0021883a 	mov	r16,zero
81119d44:	003fa206 	br	81119bd0 <__reset+0xfb0f9bd0>
81119d48:	1890b03a 	or	r8,r3,r2
81119d4c:	40017d26 	beq	r8,zero,8111a344 <__adddf3+0x7f0>
81119d50:	1011883a 	mov	r8,r2
81119d54:	1823883a 	mov	r17,r3
81119d58:	888001cc 	andi	r2,r17,7
81119d5c:	103f9e1e 	bne	r2,zero,81119bd8 <__reset+0xfb0f9bd8>
81119d60:	4004977a 	slli	r2,r8,29
81119d64:	8822d0fa 	srli	r17,r17,3
81119d68:	4010d0fa 	srli	r8,r8,3
81119d6c:	9007883a 	mov	r3,r18
81119d70:	1444b03a 	or	r2,r2,r17
81119d74:	0101ffc4 	movi	r4,2047
81119d78:	81002426 	beq	r16,r4,81119e0c <__adddf3+0x2b8>
81119d7c:	8120703a 	and	r16,r16,r4
81119d80:	01000434 	movhi	r4,16
81119d84:	213fffc4 	addi	r4,r4,-1
81119d88:	4110703a 	and	r8,r8,r4
81119d8c:	003fa806 	br	81119c30 <__reset+0xfb0f9c30>
81119d90:	8089c83a 	sub	r4,r16,r2
81119d94:	01005e0e 	bge	zero,r4,81119f10 <__adddf3+0x3bc>
81119d98:	10002b26 	beq	r2,zero,81119e48 <__adddf3+0x2f4>
81119d9c:	0081ffc4 	movi	r2,2047
81119da0:	80bf8b26 	beq	r16,r2,81119bd0 <__reset+0xfb0f9bd0>
81119da4:	4a402034 	orhi	r9,r9,128
81119da8:	00800e04 	movi	r2,56
81119dac:	1100a40e 	bge	r2,r4,8111a040 <__adddf3+0x4ec>
81119db0:	498cb03a 	or	r6,r9,r6
81119db4:	300ac03a 	cmpne	r5,r6,zero
81119db8:	0013883a 	mov	r9,zero
81119dbc:	2c4b883a 	add	r5,r5,r17
81119dc0:	2c63803a 	cmpltu	r17,r5,r17
81119dc4:	4a11883a 	add	r8,r9,r8
81119dc8:	8a11883a 	add	r8,r17,r8
81119dcc:	2823883a 	mov	r17,r5
81119dd0:	4080202c 	andhi	r2,r8,128
81119dd4:	103fe026 	beq	r2,zero,81119d58 <__reset+0xfb0f9d58>
81119dd8:	84000044 	addi	r16,r16,1
81119ddc:	0081ffc4 	movi	r2,2047
81119de0:	8080d226 	beq	r16,r2,8111a12c <__adddf3+0x5d8>
81119de4:	00bfe034 	movhi	r2,65408
81119de8:	10bfffc4 	addi	r2,r2,-1
81119dec:	4090703a 	and	r8,r8,r2
81119df0:	880ad07a 	srli	r5,r17,1
81119df4:	400897fa 	slli	r4,r8,31
81119df8:	88c0004c 	andi	r3,r17,1
81119dfc:	28e2b03a 	or	r17,r5,r3
81119e00:	4010d07a 	srli	r8,r8,1
81119e04:	2462b03a 	or	r17,r4,r17
81119e08:	003f7106 	br	81119bd0 <__reset+0xfb0f9bd0>
81119e0c:	4088b03a 	or	r4,r8,r2
81119e10:	20014526 	beq	r4,zero,8111a328 <__adddf3+0x7d4>
81119e14:	01000434 	movhi	r4,16
81119e18:	42000234 	orhi	r8,r8,8
81119e1c:	213fffc4 	addi	r4,r4,-1
81119e20:	4110703a 	and	r8,r8,r4
81119e24:	003f8206 	br	81119c30 <__reset+0xfb0f9c30>
81119e28:	18ffffc4 	addi	r3,r3,-1
81119e2c:	1800491e 	bne	r3,zero,81119f54 <__adddf3+0x400>
81119e30:	898bc83a 	sub	r5,r17,r6
81119e34:	8963803a 	cmpltu	r17,r17,r5
81119e38:	4251c83a 	sub	r8,r8,r9
81119e3c:	4451c83a 	sub	r8,r8,r17
81119e40:	2823883a 	mov	r17,r5
81119e44:	003f9f06 	br	81119cc4 <__reset+0xfb0f9cc4>
81119e48:	4984b03a 	or	r2,r9,r6
81119e4c:	103f6026 	beq	r2,zero,81119bd0 <__reset+0xfb0f9bd0>
81119e50:	213fffc4 	addi	r4,r4,-1
81119e54:	2000931e 	bne	r4,zero,8111a0a4 <__adddf3+0x550>
81119e58:	898d883a 	add	r6,r17,r6
81119e5c:	3463803a 	cmpltu	r17,r6,r17
81119e60:	4251883a 	add	r8,r8,r9
81119e64:	8a11883a 	add	r8,r17,r8
81119e68:	3023883a 	mov	r17,r6
81119e6c:	003fd806 	br	81119dd0 <__reset+0xfb0f9dd0>
81119e70:	1800541e 	bne	r3,zero,81119fc4 <__adddf3+0x470>
81119e74:	80800044 	addi	r2,r16,1
81119e78:	1081ffcc 	andi	r2,r2,2047
81119e7c:	00c00044 	movi	r3,1
81119e80:	1880a00e 	bge	r3,r2,8111a104 <__adddf3+0x5b0>
81119e84:	8989c83a 	sub	r4,r17,r6
81119e88:	8905803a 	cmpltu	r2,r17,r4
81119e8c:	4267c83a 	sub	r19,r8,r9
81119e90:	98a7c83a 	sub	r19,r19,r2
81119e94:	9880202c 	andhi	r2,r19,128
81119e98:	10006326 	beq	r2,zero,8111a028 <__adddf3+0x4d4>
81119e9c:	3463c83a 	sub	r17,r6,r17
81119ea0:	4a07c83a 	sub	r3,r9,r8
81119ea4:	344d803a 	cmpltu	r6,r6,r17
81119ea8:	19a7c83a 	sub	r19,r3,r6
81119eac:	3825883a 	mov	r18,r7
81119eb0:	983f8a1e 	bne	r19,zero,81119cdc <__reset+0xfb0f9cdc>
81119eb4:	8809883a 	mov	r4,r17
81119eb8:	110b77c0 	call	8110b77c <__clzsi2>
81119ebc:	10800804 	addi	r2,r2,32
81119ec0:	10fffe04 	addi	r3,r2,-8
81119ec4:	010007c4 	movi	r4,31
81119ec8:	20ff890e 	bge	r4,r3,81119cf0 <__reset+0xfb0f9cf0>
81119ecc:	10bff604 	addi	r2,r2,-40
81119ed0:	8884983a 	sll	r2,r17,r2
81119ed4:	0023883a 	mov	r17,zero
81119ed8:	1c3f8c0e 	bge	r3,r16,81119d0c <__reset+0xfb0f9d0c>
81119edc:	023fe034 	movhi	r8,65408
81119ee0:	423fffc4 	addi	r8,r8,-1
81119ee4:	80e1c83a 	sub	r16,r16,r3
81119ee8:	1210703a 	and	r8,r2,r8
81119eec:	003f3806 	br	81119bd0 <__reset+0xfb0f9bd0>
81119ef0:	9007883a 	mov	r3,r18
81119ef4:	0011883a 	mov	r8,zero
81119ef8:	0005883a 	mov	r2,zero
81119efc:	003f4c06 	br	81119c30 <__reset+0xfb0f9c30>
81119f00:	498cb03a 	or	r6,r9,r6
81119f04:	300cc03a 	cmpne	r6,r6,zero
81119f08:	0007883a 	mov	r3,zero
81119f0c:	003f6806 	br	81119cb0 <__reset+0xfb0f9cb0>
81119f10:	20009c1e 	bne	r4,zero,8111a184 <__adddf3+0x630>
81119f14:	80800044 	addi	r2,r16,1
81119f18:	1141ffcc 	andi	r5,r2,2047
81119f1c:	01000044 	movi	r4,1
81119f20:	2140670e 	bge	r4,r5,8111a0c0 <__adddf3+0x56c>
81119f24:	0101ffc4 	movi	r4,2047
81119f28:	11007f26 	beq	r2,r4,8111a128 <__adddf3+0x5d4>
81119f2c:	898d883a 	add	r6,r17,r6
81119f30:	4247883a 	add	r3,r8,r9
81119f34:	3451803a 	cmpltu	r8,r6,r17
81119f38:	40d1883a 	add	r8,r8,r3
81119f3c:	402297fa 	slli	r17,r8,31
81119f40:	300cd07a 	srli	r6,r6,1
81119f44:	4010d07a 	srli	r8,r8,1
81119f48:	1021883a 	mov	r16,r2
81119f4c:	89a2b03a 	or	r17,r17,r6
81119f50:	003f1f06 	br	81119bd0 <__reset+0xfb0f9bd0>
81119f54:	0081ffc4 	movi	r2,2047
81119f58:	80bf481e 	bne	r16,r2,81119c7c <__reset+0xfb0f9c7c>
81119f5c:	003f1c06 	br	81119bd0 <__reset+0xfb0f9bd0>
81119f60:	843ff844 	addi	r16,r16,-31
81119f64:	01000804 	movi	r4,32
81119f68:	1406d83a 	srl	r3,r2,r16
81119f6c:	41005026 	beq	r8,r4,8111a0b0 <__adddf3+0x55c>
81119f70:	01001004 	movi	r4,64
81119f74:	2211c83a 	sub	r8,r4,r8
81119f78:	1204983a 	sll	r2,r2,r8
81119f7c:	88a2b03a 	or	r17,r17,r2
81119f80:	8822c03a 	cmpne	r17,r17,zero
81119f84:	1c62b03a 	or	r17,r3,r17
81119f88:	0011883a 	mov	r8,zero
81119f8c:	0021883a 	mov	r16,zero
81119f90:	003f7106 	br	81119d58 <__reset+0xfb0f9d58>
81119f94:	193ff804 	addi	r4,r3,-32
81119f98:	00800804 	movi	r2,32
81119f9c:	4908d83a 	srl	r4,r9,r4
81119fa0:	18804526 	beq	r3,r2,8111a0b8 <__adddf3+0x564>
81119fa4:	00801004 	movi	r2,64
81119fa8:	10c5c83a 	sub	r2,r2,r3
81119fac:	4886983a 	sll	r3,r9,r2
81119fb0:	198cb03a 	or	r6,r3,r6
81119fb4:	300cc03a 	cmpne	r6,r6,zero
81119fb8:	218cb03a 	or	r6,r4,r6
81119fbc:	0007883a 	mov	r3,zero
81119fc0:	003f3b06 	br	81119cb0 <__reset+0xfb0f9cb0>
81119fc4:	80002a26 	beq	r16,zero,8111a070 <__adddf3+0x51c>
81119fc8:	0101ffc4 	movi	r4,2047
81119fcc:	11006826 	beq	r2,r4,8111a170 <__adddf3+0x61c>
81119fd0:	00c7c83a 	sub	r3,zero,r3
81119fd4:	42002034 	orhi	r8,r8,128
81119fd8:	01000e04 	movi	r4,56
81119fdc:	20c07c16 	blt	r4,r3,8111a1d0 <__adddf3+0x67c>
81119fe0:	010007c4 	movi	r4,31
81119fe4:	20c0da16 	blt	r4,r3,8111a350 <__adddf3+0x7fc>
81119fe8:	01000804 	movi	r4,32
81119fec:	20c9c83a 	sub	r4,r4,r3
81119ff0:	4114983a 	sll	r10,r8,r4
81119ff4:	88cad83a 	srl	r5,r17,r3
81119ff8:	8908983a 	sll	r4,r17,r4
81119ffc:	40c6d83a 	srl	r3,r8,r3
8111a000:	5162b03a 	or	r17,r10,r5
8111a004:	2008c03a 	cmpne	r4,r4,zero
8111a008:	8922b03a 	or	r17,r17,r4
8111a00c:	3463c83a 	sub	r17,r6,r17
8111a010:	48c7c83a 	sub	r3,r9,r3
8111a014:	344d803a 	cmpltu	r6,r6,r17
8111a018:	1991c83a 	sub	r8,r3,r6
8111a01c:	1021883a 	mov	r16,r2
8111a020:	3825883a 	mov	r18,r7
8111a024:	003f2706 	br	81119cc4 <__reset+0xfb0f9cc4>
8111a028:	24d0b03a 	or	r8,r4,r19
8111a02c:	40001b1e 	bne	r8,zero,8111a09c <__adddf3+0x548>
8111a030:	0005883a 	mov	r2,zero
8111a034:	0007883a 	mov	r3,zero
8111a038:	0021883a 	mov	r16,zero
8111a03c:	003f4d06 	br	81119d74 <__reset+0xfb0f9d74>
8111a040:	008007c4 	movi	r2,31
8111a044:	11003c16 	blt	r2,r4,8111a138 <__adddf3+0x5e4>
8111a048:	00800804 	movi	r2,32
8111a04c:	1105c83a 	sub	r2,r2,r4
8111a050:	488e983a 	sll	r7,r9,r2
8111a054:	310ad83a 	srl	r5,r6,r4
8111a058:	3084983a 	sll	r2,r6,r2
8111a05c:	4912d83a 	srl	r9,r9,r4
8111a060:	394ab03a 	or	r5,r7,r5
8111a064:	1004c03a 	cmpne	r2,r2,zero
8111a068:	288ab03a 	or	r5,r5,r2
8111a06c:	003f5306 	br	81119dbc <__reset+0xfb0f9dbc>
8111a070:	4448b03a 	or	r4,r8,r17
8111a074:	20003e26 	beq	r4,zero,8111a170 <__adddf3+0x61c>
8111a078:	00c6303a 	nor	r3,zero,r3
8111a07c:	18003a1e 	bne	r3,zero,8111a168 <__adddf3+0x614>
8111a080:	3463c83a 	sub	r17,r6,r17
8111a084:	4a07c83a 	sub	r3,r9,r8
8111a088:	344d803a 	cmpltu	r6,r6,r17
8111a08c:	1991c83a 	sub	r8,r3,r6
8111a090:	1021883a 	mov	r16,r2
8111a094:	3825883a 	mov	r18,r7
8111a098:	003f0a06 	br	81119cc4 <__reset+0xfb0f9cc4>
8111a09c:	2023883a 	mov	r17,r4
8111a0a0:	003f0d06 	br	81119cd8 <__reset+0xfb0f9cd8>
8111a0a4:	0081ffc4 	movi	r2,2047
8111a0a8:	80bf3f1e 	bne	r16,r2,81119da8 <__reset+0xfb0f9da8>
8111a0ac:	003ec806 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a0b0:	0005883a 	mov	r2,zero
8111a0b4:	003fb106 	br	81119f7c <__reset+0xfb0f9f7c>
8111a0b8:	0007883a 	mov	r3,zero
8111a0bc:	003fbc06 	br	81119fb0 <__reset+0xfb0f9fb0>
8111a0c0:	4444b03a 	or	r2,r8,r17
8111a0c4:	8000871e 	bne	r16,zero,8111a2e4 <__adddf3+0x790>
8111a0c8:	1000ba26 	beq	r2,zero,8111a3b4 <__adddf3+0x860>
8111a0cc:	4984b03a 	or	r2,r9,r6
8111a0d0:	103ebf26 	beq	r2,zero,81119bd0 <__reset+0xfb0f9bd0>
8111a0d4:	8985883a 	add	r2,r17,r6
8111a0d8:	4247883a 	add	r3,r8,r9
8111a0dc:	1451803a 	cmpltu	r8,r2,r17
8111a0e0:	40d1883a 	add	r8,r8,r3
8111a0e4:	40c0202c 	andhi	r3,r8,128
8111a0e8:	1023883a 	mov	r17,r2
8111a0ec:	183f1a26 	beq	r3,zero,81119d58 <__reset+0xfb0f9d58>
8111a0f0:	00bfe034 	movhi	r2,65408
8111a0f4:	10bfffc4 	addi	r2,r2,-1
8111a0f8:	2021883a 	mov	r16,r4
8111a0fc:	4090703a 	and	r8,r8,r2
8111a100:	003eb306 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a104:	4444b03a 	or	r2,r8,r17
8111a108:	8000291e 	bne	r16,zero,8111a1b0 <__adddf3+0x65c>
8111a10c:	10004b1e 	bne	r2,zero,8111a23c <__adddf3+0x6e8>
8111a110:	4990b03a 	or	r8,r9,r6
8111a114:	40008b26 	beq	r8,zero,8111a344 <__adddf3+0x7f0>
8111a118:	4811883a 	mov	r8,r9
8111a11c:	3023883a 	mov	r17,r6
8111a120:	3825883a 	mov	r18,r7
8111a124:	003eaa06 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a128:	1021883a 	mov	r16,r2
8111a12c:	0011883a 	mov	r8,zero
8111a130:	0005883a 	mov	r2,zero
8111a134:	003f0f06 	br	81119d74 <__reset+0xfb0f9d74>
8111a138:	217ff804 	addi	r5,r4,-32
8111a13c:	00800804 	movi	r2,32
8111a140:	494ad83a 	srl	r5,r9,r5
8111a144:	20807d26 	beq	r4,r2,8111a33c <__adddf3+0x7e8>
8111a148:	00801004 	movi	r2,64
8111a14c:	1109c83a 	sub	r4,r2,r4
8111a150:	4912983a 	sll	r9,r9,r4
8111a154:	498cb03a 	or	r6,r9,r6
8111a158:	300cc03a 	cmpne	r6,r6,zero
8111a15c:	298ab03a 	or	r5,r5,r6
8111a160:	0013883a 	mov	r9,zero
8111a164:	003f1506 	br	81119dbc <__reset+0xfb0f9dbc>
8111a168:	0101ffc4 	movi	r4,2047
8111a16c:	113f9a1e 	bne	r2,r4,81119fd8 <__reset+0xfb0f9fd8>
8111a170:	4811883a 	mov	r8,r9
8111a174:	3023883a 	mov	r17,r6
8111a178:	1021883a 	mov	r16,r2
8111a17c:	3825883a 	mov	r18,r7
8111a180:	003e9306 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a184:	8000161e 	bne	r16,zero,8111a1e0 <__adddf3+0x68c>
8111a188:	444ab03a 	or	r5,r8,r17
8111a18c:	28005126 	beq	r5,zero,8111a2d4 <__adddf3+0x780>
8111a190:	0108303a 	nor	r4,zero,r4
8111a194:	20004d1e 	bne	r4,zero,8111a2cc <__adddf3+0x778>
8111a198:	89a3883a 	add	r17,r17,r6
8111a19c:	4253883a 	add	r9,r8,r9
8111a1a0:	898d803a 	cmpltu	r6,r17,r6
8111a1a4:	3251883a 	add	r8,r6,r9
8111a1a8:	1021883a 	mov	r16,r2
8111a1ac:	003f0806 	br	81119dd0 <__reset+0xfb0f9dd0>
8111a1b0:	1000301e 	bne	r2,zero,8111a274 <__adddf3+0x720>
8111a1b4:	4984b03a 	or	r2,r9,r6
8111a1b8:	10007126 	beq	r2,zero,8111a380 <__adddf3+0x82c>
8111a1bc:	4811883a 	mov	r8,r9
8111a1c0:	3023883a 	mov	r17,r6
8111a1c4:	3825883a 	mov	r18,r7
8111a1c8:	0401ffc4 	movi	r16,2047
8111a1cc:	003e8006 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a1d0:	4462b03a 	or	r17,r8,r17
8111a1d4:	8822c03a 	cmpne	r17,r17,zero
8111a1d8:	0007883a 	mov	r3,zero
8111a1dc:	003f8b06 	br	8111a00c <__reset+0xfb0fa00c>
8111a1e0:	0141ffc4 	movi	r5,2047
8111a1e4:	11403b26 	beq	r2,r5,8111a2d4 <__adddf3+0x780>
8111a1e8:	0109c83a 	sub	r4,zero,r4
8111a1ec:	42002034 	orhi	r8,r8,128
8111a1f0:	01400e04 	movi	r5,56
8111a1f4:	29006716 	blt	r5,r4,8111a394 <__adddf3+0x840>
8111a1f8:	014007c4 	movi	r5,31
8111a1fc:	29007016 	blt	r5,r4,8111a3c0 <__adddf3+0x86c>
8111a200:	01400804 	movi	r5,32
8111a204:	290bc83a 	sub	r5,r5,r4
8111a208:	4154983a 	sll	r10,r8,r5
8111a20c:	890ed83a 	srl	r7,r17,r4
8111a210:	894a983a 	sll	r5,r17,r5
8111a214:	4108d83a 	srl	r4,r8,r4
8111a218:	51e2b03a 	or	r17,r10,r7
8111a21c:	280ac03a 	cmpne	r5,r5,zero
8111a220:	8962b03a 	or	r17,r17,r5
8111a224:	89a3883a 	add	r17,r17,r6
8111a228:	2253883a 	add	r9,r4,r9
8111a22c:	898d803a 	cmpltu	r6,r17,r6
8111a230:	3251883a 	add	r8,r6,r9
8111a234:	1021883a 	mov	r16,r2
8111a238:	003ee506 	br	81119dd0 <__reset+0xfb0f9dd0>
8111a23c:	4984b03a 	or	r2,r9,r6
8111a240:	103e6326 	beq	r2,zero,81119bd0 <__reset+0xfb0f9bd0>
8111a244:	8987c83a 	sub	r3,r17,r6
8111a248:	88c9803a 	cmpltu	r4,r17,r3
8111a24c:	4245c83a 	sub	r2,r8,r9
8111a250:	1105c83a 	sub	r2,r2,r4
8111a254:	1100202c 	andhi	r4,r2,128
8111a258:	203ebb26 	beq	r4,zero,81119d48 <__reset+0xfb0f9d48>
8111a25c:	3463c83a 	sub	r17,r6,r17
8111a260:	4a07c83a 	sub	r3,r9,r8
8111a264:	344d803a 	cmpltu	r6,r6,r17
8111a268:	1991c83a 	sub	r8,r3,r6
8111a26c:	3825883a 	mov	r18,r7
8111a270:	003e5706 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a274:	4984b03a 	or	r2,r9,r6
8111a278:	10002e26 	beq	r2,zero,8111a334 <__adddf3+0x7e0>
8111a27c:	4004d0fa 	srli	r2,r8,3
8111a280:	8822d0fa 	srli	r17,r17,3
8111a284:	4010977a 	slli	r8,r8,29
8111a288:	10c0022c 	andhi	r3,r2,8
8111a28c:	4462b03a 	or	r17,r8,r17
8111a290:	18000826 	beq	r3,zero,8111a2b4 <__adddf3+0x760>
8111a294:	4808d0fa 	srli	r4,r9,3
8111a298:	20c0022c 	andhi	r3,r4,8
8111a29c:	1800051e 	bne	r3,zero,8111a2b4 <__adddf3+0x760>
8111a2a0:	300cd0fa 	srli	r6,r6,3
8111a2a4:	4806977a 	slli	r3,r9,29
8111a2a8:	2005883a 	mov	r2,r4
8111a2ac:	3825883a 	mov	r18,r7
8111a2b0:	19a2b03a 	or	r17,r3,r6
8111a2b4:	8810d77a 	srli	r8,r17,29
8111a2b8:	100490fa 	slli	r2,r2,3
8111a2bc:	882290fa 	slli	r17,r17,3
8111a2c0:	0401ffc4 	movi	r16,2047
8111a2c4:	4090b03a 	or	r8,r8,r2
8111a2c8:	003e4106 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a2cc:	0141ffc4 	movi	r5,2047
8111a2d0:	117fc71e 	bne	r2,r5,8111a1f0 <__reset+0xfb0fa1f0>
8111a2d4:	4811883a 	mov	r8,r9
8111a2d8:	3023883a 	mov	r17,r6
8111a2dc:	1021883a 	mov	r16,r2
8111a2e0:	003e3b06 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a2e4:	10002f26 	beq	r2,zero,8111a3a4 <__adddf3+0x850>
8111a2e8:	4984b03a 	or	r2,r9,r6
8111a2ec:	10001126 	beq	r2,zero,8111a334 <__adddf3+0x7e0>
8111a2f0:	4004d0fa 	srli	r2,r8,3
8111a2f4:	8822d0fa 	srli	r17,r17,3
8111a2f8:	4010977a 	slli	r8,r8,29
8111a2fc:	10c0022c 	andhi	r3,r2,8
8111a300:	4462b03a 	or	r17,r8,r17
8111a304:	183feb26 	beq	r3,zero,8111a2b4 <__reset+0xfb0fa2b4>
8111a308:	4808d0fa 	srli	r4,r9,3
8111a30c:	20c0022c 	andhi	r3,r4,8
8111a310:	183fe81e 	bne	r3,zero,8111a2b4 <__reset+0xfb0fa2b4>
8111a314:	300cd0fa 	srli	r6,r6,3
8111a318:	4806977a 	slli	r3,r9,29
8111a31c:	2005883a 	mov	r2,r4
8111a320:	19a2b03a 	or	r17,r3,r6
8111a324:	003fe306 	br	8111a2b4 <__reset+0xfb0fa2b4>
8111a328:	0011883a 	mov	r8,zero
8111a32c:	0005883a 	mov	r2,zero
8111a330:	003e3f06 	br	81119c30 <__reset+0xfb0f9c30>
8111a334:	0401ffc4 	movi	r16,2047
8111a338:	003e2506 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a33c:	0013883a 	mov	r9,zero
8111a340:	003f8406 	br	8111a154 <__reset+0xfb0fa154>
8111a344:	0005883a 	mov	r2,zero
8111a348:	0007883a 	mov	r3,zero
8111a34c:	003e8906 	br	81119d74 <__reset+0xfb0f9d74>
8111a350:	197ff804 	addi	r5,r3,-32
8111a354:	01000804 	movi	r4,32
8111a358:	414ad83a 	srl	r5,r8,r5
8111a35c:	19002426 	beq	r3,r4,8111a3f0 <__adddf3+0x89c>
8111a360:	01001004 	movi	r4,64
8111a364:	20c7c83a 	sub	r3,r4,r3
8111a368:	40c6983a 	sll	r3,r8,r3
8111a36c:	1c46b03a 	or	r3,r3,r17
8111a370:	1806c03a 	cmpne	r3,r3,zero
8111a374:	28e2b03a 	or	r17,r5,r3
8111a378:	0007883a 	mov	r3,zero
8111a37c:	003f2306 	br	8111a00c <__reset+0xfb0fa00c>
8111a380:	0007883a 	mov	r3,zero
8111a384:	5811883a 	mov	r8,r11
8111a388:	00bfffc4 	movi	r2,-1
8111a38c:	0401ffc4 	movi	r16,2047
8111a390:	003e7806 	br	81119d74 <__reset+0xfb0f9d74>
8111a394:	4462b03a 	or	r17,r8,r17
8111a398:	8822c03a 	cmpne	r17,r17,zero
8111a39c:	0009883a 	mov	r4,zero
8111a3a0:	003fa006 	br	8111a224 <__reset+0xfb0fa224>
8111a3a4:	4811883a 	mov	r8,r9
8111a3a8:	3023883a 	mov	r17,r6
8111a3ac:	0401ffc4 	movi	r16,2047
8111a3b0:	003e0706 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a3b4:	4811883a 	mov	r8,r9
8111a3b8:	3023883a 	mov	r17,r6
8111a3bc:	003e0406 	br	81119bd0 <__reset+0xfb0f9bd0>
8111a3c0:	21fff804 	addi	r7,r4,-32
8111a3c4:	01400804 	movi	r5,32
8111a3c8:	41ced83a 	srl	r7,r8,r7
8111a3cc:	21400a26 	beq	r4,r5,8111a3f8 <__adddf3+0x8a4>
8111a3d0:	01401004 	movi	r5,64
8111a3d4:	2909c83a 	sub	r4,r5,r4
8111a3d8:	4108983a 	sll	r4,r8,r4
8111a3dc:	2448b03a 	or	r4,r4,r17
8111a3e0:	2008c03a 	cmpne	r4,r4,zero
8111a3e4:	3922b03a 	or	r17,r7,r4
8111a3e8:	0009883a 	mov	r4,zero
8111a3ec:	003f8d06 	br	8111a224 <__reset+0xfb0fa224>
8111a3f0:	0007883a 	mov	r3,zero
8111a3f4:	003fdd06 	br	8111a36c <__reset+0xfb0fa36c>
8111a3f8:	0009883a 	mov	r4,zero
8111a3fc:	003ff706 	br	8111a3dc <__reset+0xfb0fa3dc>

8111a400 <__divdf3>:
8111a400:	defff204 	addi	sp,sp,-56
8111a404:	dd400915 	stw	r21,36(sp)
8111a408:	282ad53a 	srli	r21,r5,20
8111a40c:	dd000815 	stw	r20,32(sp)
8111a410:	2828d7fa 	srli	r20,r5,31
8111a414:	dc000415 	stw	r16,16(sp)
8111a418:	04000434 	movhi	r16,16
8111a41c:	df000c15 	stw	fp,48(sp)
8111a420:	843fffc4 	addi	r16,r16,-1
8111a424:	dfc00d15 	stw	ra,52(sp)
8111a428:	ddc00b15 	stw	r23,44(sp)
8111a42c:	dd800a15 	stw	r22,40(sp)
8111a430:	dcc00715 	stw	r19,28(sp)
8111a434:	dc800615 	stw	r18,24(sp)
8111a438:	dc400515 	stw	r17,20(sp)
8111a43c:	ad41ffcc 	andi	r21,r21,2047
8111a440:	2c20703a 	and	r16,r5,r16
8111a444:	a7003fcc 	andi	fp,r20,255
8111a448:	a8006126 	beq	r21,zero,8111a5d0 <__divdf3+0x1d0>
8111a44c:	0081ffc4 	movi	r2,2047
8111a450:	2025883a 	mov	r18,r4
8111a454:	a8803726 	beq	r21,r2,8111a534 <__divdf3+0x134>
8111a458:	80800434 	orhi	r2,r16,16
8111a45c:	100490fa 	slli	r2,r2,3
8111a460:	2020d77a 	srli	r16,r4,29
8111a464:	202490fa 	slli	r18,r4,3
8111a468:	ad7f0044 	addi	r21,r21,-1023
8111a46c:	80a0b03a 	or	r16,r16,r2
8111a470:	0027883a 	mov	r19,zero
8111a474:	0013883a 	mov	r9,zero
8111a478:	3804d53a 	srli	r2,r7,20
8111a47c:	382cd7fa 	srli	r22,r7,31
8111a480:	04400434 	movhi	r17,16
8111a484:	8c7fffc4 	addi	r17,r17,-1
8111a488:	1081ffcc 	andi	r2,r2,2047
8111a48c:	3011883a 	mov	r8,r6
8111a490:	3c62703a 	and	r17,r7,r17
8111a494:	b5c03fcc 	andi	r23,r22,255
8111a498:	10006c26 	beq	r2,zero,8111a64c <__divdf3+0x24c>
8111a49c:	00c1ffc4 	movi	r3,2047
8111a4a0:	10c06426 	beq	r2,r3,8111a634 <__divdf3+0x234>
8111a4a4:	88c00434 	orhi	r3,r17,16
8111a4a8:	180690fa 	slli	r3,r3,3
8111a4ac:	3022d77a 	srli	r17,r6,29
8111a4b0:	301090fa 	slli	r8,r6,3
8111a4b4:	10bf0044 	addi	r2,r2,-1023
8111a4b8:	88e2b03a 	or	r17,r17,r3
8111a4bc:	000f883a 	mov	r7,zero
8111a4c0:	a58cf03a 	xor	r6,r20,r22
8111a4c4:	3cc8b03a 	or	r4,r7,r19
8111a4c8:	a8abc83a 	sub	r21,r21,r2
8111a4cc:	008003c4 	movi	r2,15
8111a4d0:	3007883a 	mov	r3,r6
8111a4d4:	34c03fcc 	andi	r19,r6,255
8111a4d8:	11009036 	bltu	r2,r4,8111a71c <__divdf3+0x31c>
8111a4dc:	200890ba 	slli	r4,r4,2
8111a4e0:	00a044b4 	movhi	r2,33042
8111a4e4:	10a93d04 	addi	r2,r2,-23308
8111a4e8:	2089883a 	add	r4,r4,r2
8111a4ec:	20800017 	ldw	r2,0(r4)
8111a4f0:	1000683a 	jmp	r2
8111a4f4:	8111a71c 	xori	r4,r16,18076
8111a4f8:	8111a56c 	andhi	r4,r16,18069
8111a4fc:	8111a70c 	andi	r4,r16,18076
8111a500:	8111a560 	cmpeqi	r4,r16,18069
8111a504:	8111a70c 	andi	r4,r16,18076
8111a508:	8111a6e0 	cmpeqi	r4,r16,18075
8111a50c:	8111a70c 	andi	r4,r16,18076
8111a510:	8111a560 	cmpeqi	r4,r16,18069
8111a514:	8111a56c 	andhi	r4,r16,18069
8111a518:	8111a56c 	andhi	r4,r16,18069
8111a51c:	8111a6e0 	cmpeqi	r4,r16,18075
8111a520:	8111a560 	cmpeqi	r4,r16,18069
8111a524:	8111a550 	cmplti	r4,r16,18069
8111a528:	8111a550 	cmplti	r4,r16,18069
8111a52c:	8111a550 	cmplti	r4,r16,18069
8111a530:	8111aa00 	call	88111aa0 <__reset+0x20f1aa0>
8111a534:	2404b03a 	or	r2,r4,r16
8111a538:	1000661e 	bne	r2,zero,8111a6d4 <__divdf3+0x2d4>
8111a53c:	04c00204 	movi	r19,8
8111a540:	0021883a 	mov	r16,zero
8111a544:	0025883a 	mov	r18,zero
8111a548:	02400084 	movi	r9,2
8111a54c:	003fca06 	br	8111a478 <__reset+0xfb0fa478>
8111a550:	8023883a 	mov	r17,r16
8111a554:	9011883a 	mov	r8,r18
8111a558:	e02f883a 	mov	r23,fp
8111a55c:	480f883a 	mov	r7,r9
8111a560:	00800084 	movi	r2,2
8111a564:	3881311e 	bne	r7,r2,8111aa2c <__divdf3+0x62c>
8111a568:	b827883a 	mov	r19,r23
8111a56c:	98c0004c 	andi	r3,r19,1
8111a570:	0081ffc4 	movi	r2,2047
8111a574:	000b883a 	mov	r5,zero
8111a578:	0025883a 	mov	r18,zero
8111a57c:	1004953a 	slli	r2,r2,20
8111a580:	18c03fcc 	andi	r3,r3,255
8111a584:	04400434 	movhi	r17,16
8111a588:	8c7fffc4 	addi	r17,r17,-1
8111a58c:	180697fa 	slli	r3,r3,31
8111a590:	2c4a703a 	and	r5,r5,r17
8111a594:	288ab03a 	or	r5,r5,r2
8111a598:	28c6b03a 	or	r3,r5,r3
8111a59c:	9005883a 	mov	r2,r18
8111a5a0:	dfc00d17 	ldw	ra,52(sp)
8111a5a4:	df000c17 	ldw	fp,48(sp)
8111a5a8:	ddc00b17 	ldw	r23,44(sp)
8111a5ac:	dd800a17 	ldw	r22,40(sp)
8111a5b0:	dd400917 	ldw	r21,36(sp)
8111a5b4:	dd000817 	ldw	r20,32(sp)
8111a5b8:	dcc00717 	ldw	r19,28(sp)
8111a5bc:	dc800617 	ldw	r18,24(sp)
8111a5c0:	dc400517 	ldw	r17,20(sp)
8111a5c4:	dc000417 	ldw	r16,16(sp)
8111a5c8:	dec00e04 	addi	sp,sp,56
8111a5cc:	f800283a 	ret
8111a5d0:	2404b03a 	or	r2,r4,r16
8111a5d4:	2027883a 	mov	r19,r4
8111a5d8:	10003926 	beq	r2,zero,8111a6c0 <__divdf3+0x2c0>
8111a5dc:	80012e26 	beq	r16,zero,8111aa98 <__divdf3+0x698>
8111a5e0:	8009883a 	mov	r4,r16
8111a5e4:	d9800315 	stw	r6,12(sp)
8111a5e8:	d9c00215 	stw	r7,8(sp)
8111a5ec:	110b77c0 	call	8110b77c <__clzsi2>
8111a5f0:	d9800317 	ldw	r6,12(sp)
8111a5f4:	d9c00217 	ldw	r7,8(sp)
8111a5f8:	113ffd44 	addi	r4,r2,-11
8111a5fc:	00c00704 	movi	r3,28
8111a600:	19012116 	blt	r3,r4,8111aa88 <__divdf3+0x688>
8111a604:	00c00744 	movi	r3,29
8111a608:	147ffe04 	addi	r17,r2,-8
8111a60c:	1907c83a 	sub	r3,r3,r4
8111a610:	8460983a 	sll	r16,r16,r17
8111a614:	98c6d83a 	srl	r3,r19,r3
8111a618:	9c64983a 	sll	r18,r19,r17
8111a61c:	1c20b03a 	or	r16,r3,r16
8111a620:	1080fcc4 	addi	r2,r2,1011
8111a624:	00abc83a 	sub	r21,zero,r2
8111a628:	0027883a 	mov	r19,zero
8111a62c:	0013883a 	mov	r9,zero
8111a630:	003f9106 	br	8111a478 <__reset+0xfb0fa478>
8111a634:	3446b03a 	or	r3,r6,r17
8111a638:	18001f1e 	bne	r3,zero,8111a6b8 <__divdf3+0x2b8>
8111a63c:	0023883a 	mov	r17,zero
8111a640:	0011883a 	mov	r8,zero
8111a644:	01c00084 	movi	r7,2
8111a648:	003f9d06 	br	8111a4c0 <__reset+0xfb0fa4c0>
8111a64c:	3446b03a 	or	r3,r6,r17
8111a650:	18001526 	beq	r3,zero,8111a6a8 <__divdf3+0x2a8>
8111a654:	88011b26 	beq	r17,zero,8111aac4 <__divdf3+0x6c4>
8111a658:	8809883a 	mov	r4,r17
8111a65c:	d9800315 	stw	r6,12(sp)
8111a660:	da400115 	stw	r9,4(sp)
8111a664:	110b77c0 	call	8110b77c <__clzsi2>
8111a668:	d9800317 	ldw	r6,12(sp)
8111a66c:	da400117 	ldw	r9,4(sp)
8111a670:	113ffd44 	addi	r4,r2,-11
8111a674:	00c00704 	movi	r3,28
8111a678:	19010e16 	blt	r3,r4,8111aab4 <__divdf3+0x6b4>
8111a67c:	00c00744 	movi	r3,29
8111a680:	123ffe04 	addi	r8,r2,-8
8111a684:	1907c83a 	sub	r3,r3,r4
8111a688:	8a22983a 	sll	r17,r17,r8
8111a68c:	30c6d83a 	srl	r3,r6,r3
8111a690:	3210983a 	sll	r8,r6,r8
8111a694:	1c62b03a 	or	r17,r3,r17
8111a698:	1080fcc4 	addi	r2,r2,1011
8111a69c:	0085c83a 	sub	r2,zero,r2
8111a6a0:	000f883a 	mov	r7,zero
8111a6a4:	003f8606 	br	8111a4c0 <__reset+0xfb0fa4c0>
8111a6a8:	0023883a 	mov	r17,zero
8111a6ac:	0011883a 	mov	r8,zero
8111a6b0:	01c00044 	movi	r7,1
8111a6b4:	003f8206 	br	8111a4c0 <__reset+0xfb0fa4c0>
8111a6b8:	01c000c4 	movi	r7,3
8111a6bc:	003f8006 	br	8111a4c0 <__reset+0xfb0fa4c0>
8111a6c0:	04c00104 	movi	r19,4
8111a6c4:	0021883a 	mov	r16,zero
8111a6c8:	0025883a 	mov	r18,zero
8111a6cc:	02400044 	movi	r9,1
8111a6d0:	003f6906 	br	8111a478 <__reset+0xfb0fa478>
8111a6d4:	04c00304 	movi	r19,12
8111a6d8:	024000c4 	movi	r9,3
8111a6dc:	003f6606 	br	8111a478 <__reset+0xfb0fa478>
8111a6e0:	01400434 	movhi	r5,16
8111a6e4:	0007883a 	mov	r3,zero
8111a6e8:	297fffc4 	addi	r5,r5,-1
8111a6ec:	04bfffc4 	movi	r18,-1
8111a6f0:	0081ffc4 	movi	r2,2047
8111a6f4:	003fa106 	br	8111a57c <__reset+0xfb0fa57c>
8111a6f8:	00c00044 	movi	r3,1
8111a6fc:	1887c83a 	sub	r3,r3,r2
8111a700:	01000e04 	movi	r4,56
8111a704:	20c1210e 	bge	r4,r3,8111ab8c <__divdf3+0x78c>
8111a708:	98c0004c 	andi	r3,r19,1
8111a70c:	0005883a 	mov	r2,zero
8111a710:	000b883a 	mov	r5,zero
8111a714:	0025883a 	mov	r18,zero
8111a718:	003f9806 	br	8111a57c <__reset+0xfb0fa57c>
8111a71c:	8c00fd36 	bltu	r17,r16,8111ab14 <__divdf3+0x714>
8111a720:	8440fb26 	beq	r16,r17,8111ab10 <__divdf3+0x710>
8111a724:	8007883a 	mov	r3,r16
8111a728:	ad7fffc4 	addi	r21,r21,-1
8111a72c:	0021883a 	mov	r16,zero
8111a730:	4004d63a 	srli	r2,r8,24
8111a734:	8822923a 	slli	r17,r17,8
8111a738:	1809883a 	mov	r4,r3
8111a73c:	402c923a 	slli	r22,r8,8
8111a740:	88b8b03a 	or	fp,r17,r2
8111a744:	e028d43a 	srli	r20,fp,16
8111a748:	d8c00015 	stw	r3,0(sp)
8111a74c:	e5ffffcc 	andi	r23,fp,65535
8111a750:	a00b883a 	mov	r5,r20
8111a754:	1119a980 	call	81119a98 <__udivsi3>
8111a758:	d8c00017 	ldw	r3,0(sp)
8111a75c:	a00b883a 	mov	r5,r20
8111a760:	d8800315 	stw	r2,12(sp)
8111a764:	1809883a 	mov	r4,r3
8111a768:	1119afc0 	call	81119afc <__umodsi3>
8111a76c:	d9800317 	ldw	r6,12(sp)
8111a770:	1006943a 	slli	r3,r2,16
8111a774:	9004d43a 	srli	r2,r18,16
8111a778:	b9a3383a 	mul	r17,r23,r6
8111a77c:	10c4b03a 	or	r2,r2,r3
8111a780:	1440062e 	bgeu	r2,r17,8111a79c <__divdf3+0x39c>
8111a784:	1705883a 	add	r2,r2,fp
8111a788:	30ffffc4 	addi	r3,r6,-1
8111a78c:	1700ee36 	bltu	r2,fp,8111ab48 <__divdf3+0x748>
8111a790:	1440ed2e 	bgeu	r2,r17,8111ab48 <__divdf3+0x748>
8111a794:	31bfff84 	addi	r6,r6,-2
8111a798:	1705883a 	add	r2,r2,fp
8111a79c:	1463c83a 	sub	r17,r2,r17
8111a7a0:	a00b883a 	mov	r5,r20
8111a7a4:	8809883a 	mov	r4,r17
8111a7a8:	d9800315 	stw	r6,12(sp)
8111a7ac:	1119a980 	call	81119a98 <__udivsi3>
8111a7b0:	a00b883a 	mov	r5,r20
8111a7b4:	8809883a 	mov	r4,r17
8111a7b8:	d8800215 	stw	r2,8(sp)
8111a7bc:	1119afc0 	call	81119afc <__umodsi3>
8111a7c0:	d9c00217 	ldw	r7,8(sp)
8111a7c4:	1004943a 	slli	r2,r2,16
8111a7c8:	94bfffcc 	andi	r18,r18,65535
8111a7cc:	b9d1383a 	mul	r8,r23,r7
8111a7d0:	90a4b03a 	or	r18,r18,r2
8111a7d4:	d9800317 	ldw	r6,12(sp)
8111a7d8:	9200062e 	bgeu	r18,r8,8111a7f4 <__divdf3+0x3f4>
8111a7dc:	9725883a 	add	r18,r18,fp
8111a7e0:	38bfffc4 	addi	r2,r7,-1
8111a7e4:	9700d636 	bltu	r18,fp,8111ab40 <__divdf3+0x740>
8111a7e8:	9200d52e 	bgeu	r18,r8,8111ab40 <__divdf3+0x740>
8111a7ec:	39ffff84 	addi	r7,r7,-2
8111a7f0:	9725883a 	add	r18,r18,fp
8111a7f4:	3004943a 	slli	r2,r6,16
8111a7f8:	b012d43a 	srli	r9,r22,16
8111a7fc:	b1bfffcc 	andi	r6,r22,65535
8111a800:	11e2b03a 	or	r17,r2,r7
8111a804:	8806d43a 	srli	r3,r17,16
8111a808:	893fffcc 	andi	r4,r17,65535
8111a80c:	218b383a 	mul	r5,r4,r6
8111a810:	30c5383a 	mul	r2,r6,r3
8111a814:	2249383a 	mul	r4,r4,r9
8111a818:	280ed43a 	srli	r7,r5,16
8111a81c:	9225c83a 	sub	r18,r18,r8
8111a820:	2089883a 	add	r4,r4,r2
8111a824:	3909883a 	add	r4,r7,r4
8111a828:	1a47383a 	mul	r3,r3,r9
8111a82c:	2080022e 	bgeu	r4,r2,8111a838 <__divdf3+0x438>
8111a830:	00800074 	movhi	r2,1
8111a834:	1887883a 	add	r3,r3,r2
8111a838:	2004d43a 	srli	r2,r4,16
8111a83c:	2008943a 	slli	r4,r4,16
8111a840:	297fffcc 	andi	r5,r5,65535
8111a844:	10c7883a 	add	r3,r2,r3
8111a848:	2149883a 	add	r4,r4,r5
8111a84c:	90c0a536 	bltu	r18,r3,8111aae4 <__divdf3+0x6e4>
8111a850:	90c0bf26 	beq	r18,r3,8111ab50 <__divdf3+0x750>
8111a854:	90c7c83a 	sub	r3,r18,r3
8111a858:	810fc83a 	sub	r7,r16,r4
8111a85c:	81e5803a 	cmpltu	r18,r16,r7
8111a860:	1ca5c83a 	sub	r18,r3,r18
8111a864:	e480c126 	beq	fp,r18,8111ab6c <__divdf3+0x76c>
8111a868:	a00b883a 	mov	r5,r20
8111a86c:	9009883a 	mov	r4,r18
8111a870:	d9800315 	stw	r6,12(sp)
8111a874:	d9c00215 	stw	r7,8(sp)
8111a878:	da400115 	stw	r9,4(sp)
8111a87c:	1119a980 	call	81119a98 <__udivsi3>
8111a880:	a00b883a 	mov	r5,r20
8111a884:	9009883a 	mov	r4,r18
8111a888:	d8800015 	stw	r2,0(sp)
8111a88c:	1119afc0 	call	81119afc <__umodsi3>
8111a890:	d9c00217 	ldw	r7,8(sp)
8111a894:	da000017 	ldw	r8,0(sp)
8111a898:	1006943a 	slli	r3,r2,16
8111a89c:	3804d43a 	srli	r2,r7,16
8111a8a0:	ba21383a 	mul	r16,r23,r8
8111a8a4:	d9800317 	ldw	r6,12(sp)
8111a8a8:	10c4b03a 	or	r2,r2,r3
8111a8ac:	da400117 	ldw	r9,4(sp)
8111a8b0:	1400062e 	bgeu	r2,r16,8111a8cc <__divdf3+0x4cc>
8111a8b4:	1705883a 	add	r2,r2,fp
8111a8b8:	40ffffc4 	addi	r3,r8,-1
8111a8bc:	1700ad36 	bltu	r2,fp,8111ab74 <__divdf3+0x774>
8111a8c0:	1400ac2e 	bgeu	r2,r16,8111ab74 <__divdf3+0x774>
8111a8c4:	423fff84 	addi	r8,r8,-2
8111a8c8:	1705883a 	add	r2,r2,fp
8111a8cc:	1421c83a 	sub	r16,r2,r16
8111a8d0:	a00b883a 	mov	r5,r20
8111a8d4:	8009883a 	mov	r4,r16
8111a8d8:	d9800315 	stw	r6,12(sp)
8111a8dc:	d9c00215 	stw	r7,8(sp)
8111a8e0:	da000015 	stw	r8,0(sp)
8111a8e4:	da400115 	stw	r9,4(sp)
8111a8e8:	1119a980 	call	81119a98 <__udivsi3>
8111a8ec:	8009883a 	mov	r4,r16
8111a8f0:	a00b883a 	mov	r5,r20
8111a8f4:	1025883a 	mov	r18,r2
8111a8f8:	1119afc0 	call	81119afc <__umodsi3>
8111a8fc:	d9c00217 	ldw	r7,8(sp)
8111a900:	1004943a 	slli	r2,r2,16
8111a904:	bcaf383a 	mul	r23,r23,r18
8111a908:	393fffcc 	andi	r4,r7,65535
8111a90c:	2088b03a 	or	r4,r4,r2
8111a910:	d9800317 	ldw	r6,12(sp)
8111a914:	da000017 	ldw	r8,0(sp)
8111a918:	da400117 	ldw	r9,4(sp)
8111a91c:	25c0062e 	bgeu	r4,r23,8111a938 <__divdf3+0x538>
8111a920:	2709883a 	add	r4,r4,fp
8111a924:	90bfffc4 	addi	r2,r18,-1
8111a928:	27009436 	bltu	r4,fp,8111ab7c <__divdf3+0x77c>
8111a92c:	25c0932e 	bgeu	r4,r23,8111ab7c <__divdf3+0x77c>
8111a930:	94bfff84 	addi	r18,r18,-2
8111a934:	2709883a 	add	r4,r4,fp
8111a938:	4004943a 	slli	r2,r8,16
8111a93c:	25efc83a 	sub	r23,r4,r23
8111a940:	1490b03a 	or	r8,r2,r18
8111a944:	4008d43a 	srli	r4,r8,16
8111a948:	40ffffcc 	andi	r3,r8,65535
8111a94c:	30c5383a 	mul	r2,r6,r3
8111a950:	1a47383a 	mul	r3,r3,r9
8111a954:	310d383a 	mul	r6,r6,r4
8111a958:	100ad43a 	srli	r5,r2,16
8111a95c:	4913383a 	mul	r9,r9,r4
8111a960:	1987883a 	add	r3,r3,r6
8111a964:	28c7883a 	add	r3,r5,r3
8111a968:	1980022e 	bgeu	r3,r6,8111a974 <__divdf3+0x574>
8111a96c:	01000074 	movhi	r4,1
8111a970:	4913883a 	add	r9,r9,r4
8111a974:	1808d43a 	srli	r4,r3,16
8111a978:	1806943a 	slli	r3,r3,16
8111a97c:	10bfffcc 	andi	r2,r2,65535
8111a980:	2253883a 	add	r9,r4,r9
8111a984:	1887883a 	add	r3,r3,r2
8111a988:	ba403836 	bltu	r23,r9,8111aa6c <__divdf3+0x66c>
8111a98c:	ba403626 	beq	r23,r9,8111aa68 <__divdf3+0x668>
8111a990:	42000054 	ori	r8,r8,1
8111a994:	a880ffc4 	addi	r2,r21,1023
8111a998:	00bf570e 	bge	zero,r2,8111a6f8 <__reset+0xfb0fa6f8>
8111a99c:	40c001cc 	andi	r3,r8,7
8111a9a0:	18000726 	beq	r3,zero,8111a9c0 <__divdf3+0x5c0>
8111a9a4:	40c003cc 	andi	r3,r8,15
8111a9a8:	01000104 	movi	r4,4
8111a9ac:	19000426 	beq	r3,r4,8111a9c0 <__divdf3+0x5c0>
8111a9b0:	4107883a 	add	r3,r8,r4
8111a9b4:	1a11803a 	cmpltu	r8,r3,r8
8111a9b8:	8a23883a 	add	r17,r17,r8
8111a9bc:	1811883a 	mov	r8,r3
8111a9c0:	88c0402c 	andhi	r3,r17,256
8111a9c4:	18000426 	beq	r3,zero,8111a9d8 <__divdf3+0x5d8>
8111a9c8:	00ffc034 	movhi	r3,65280
8111a9cc:	18ffffc4 	addi	r3,r3,-1
8111a9d0:	a8810004 	addi	r2,r21,1024
8111a9d4:	88e2703a 	and	r17,r17,r3
8111a9d8:	00c1ff84 	movi	r3,2046
8111a9dc:	18bee316 	blt	r3,r2,8111a56c <__reset+0xfb0fa56c>
8111a9e0:	8824977a 	slli	r18,r17,29
8111a9e4:	4010d0fa 	srli	r8,r8,3
8111a9e8:	8822927a 	slli	r17,r17,9
8111a9ec:	1081ffcc 	andi	r2,r2,2047
8111a9f0:	9224b03a 	or	r18,r18,r8
8111a9f4:	880ad33a 	srli	r5,r17,12
8111a9f8:	98c0004c 	andi	r3,r19,1
8111a9fc:	003edf06 	br	8111a57c <__reset+0xfb0fa57c>
8111aa00:	8080022c 	andhi	r2,r16,8
8111aa04:	10001226 	beq	r2,zero,8111aa50 <__divdf3+0x650>
8111aa08:	8880022c 	andhi	r2,r17,8
8111aa0c:	1000101e 	bne	r2,zero,8111aa50 <__divdf3+0x650>
8111aa10:	00800434 	movhi	r2,16
8111aa14:	89400234 	orhi	r5,r17,8
8111aa18:	10bfffc4 	addi	r2,r2,-1
8111aa1c:	b007883a 	mov	r3,r22
8111aa20:	288a703a 	and	r5,r5,r2
8111aa24:	4025883a 	mov	r18,r8
8111aa28:	003f3106 	br	8111a6f0 <__reset+0xfb0fa6f0>
8111aa2c:	008000c4 	movi	r2,3
8111aa30:	3880a626 	beq	r7,r2,8111accc <__divdf3+0x8cc>
8111aa34:	00800044 	movi	r2,1
8111aa38:	3880521e 	bne	r7,r2,8111ab84 <__divdf3+0x784>
8111aa3c:	b807883a 	mov	r3,r23
8111aa40:	0005883a 	mov	r2,zero
8111aa44:	000b883a 	mov	r5,zero
8111aa48:	0025883a 	mov	r18,zero
8111aa4c:	003ecb06 	br	8111a57c <__reset+0xfb0fa57c>
8111aa50:	00800434 	movhi	r2,16
8111aa54:	81400234 	orhi	r5,r16,8
8111aa58:	10bfffc4 	addi	r2,r2,-1
8111aa5c:	a007883a 	mov	r3,r20
8111aa60:	288a703a 	and	r5,r5,r2
8111aa64:	003f2206 	br	8111a6f0 <__reset+0xfb0fa6f0>
8111aa68:	183fca26 	beq	r3,zero,8111a994 <__reset+0xfb0fa994>
8111aa6c:	e5ef883a 	add	r23,fp,r23
8111aa70:	40bfffc4 	addi	r2,r8,-1
8111aa74:	bf00392e 	bgeu	r23,fp,8111ab5c <__divdf3+0x75c>
8111aa78:	1011883a 	mov	r8,r2
8111aa7c:	ba7fc41e 	bne	r23,r9,8111a990 <__reset+0xfb0fa990>
8111aa80:	b0ffc31e 	bne	r22,r3,8111a990 <__reset+0xfb0fa990>
8111aa84:	003fc306 	br	8111a994 <__reset+0xfb0fa994>
8111aa88:	143ff604 	addi	r16,r2,-40
8111aa8c:	9c20983a 	sll	r16,r19,r16
8111aa90:	0025883a 	mov	r18,zero
8111aa94:	003ee206 	br	8111a620 <__reset+0xfb0fa620>
8111aa98:	d9800315 	stw	r6,12(sp)
8111aa9c:	d9c00215 	stw	r7,8(sp)
8111aaa0:	110b77c0 	call	8110b77c <__clzsi2>
8111aaa4:	10800804 	addi	r2,r2,32
8111aaa8:	d9c00217 	ldw	r7,8(sp)
8111aaac:	d9800317 	ldw	r6,12(sp)
8111aab0:	003ed106 	br	8111a5f8 <__reset+0xfb0fa5f8>
8111aab4:	147ff604 	addi	r17,r2,-40
8111aab8:	3462983a 	sll	r17,r6,r17
8111aabc:	0011883a 	mov	r8,zero
8111aac0:	003ef506 	br	8111a698 <__reset+0xfb0fa698>
8111aac4:	3009883a 	mov	r4,r6
8111aac8:	d9800315 	stw	r6,12(sp)
8111aacc:	da400115 	stw	r9,4(sp)
8111aad0:	110b77c0 	call	8110b77c <__clzsi2>
8111aad4:	10800804 	addi	r2,r2,32
8111aad8:	da400117 	ldw	r9,4(sp)
8111aadc:	d9800317 	ldw	r6,12(sp)
8111aae0:	003ee306 	br	8111a670 <__reset+0xfb0fa670>
8111aae4:	85a1883a 	add	r16,r16,r22
8111aae8:	8585803a 	cmpltu	r2,r16,r22
8111aaec:	1705883a 	add	r2,r2,fp
8111aaf0:	14a5883a 	add	r18,r2,r18
8111aaf4:	88bfffc4 	addi	r2,r17,-1
8111aaf8:	e4800c2e 	bgeu	fp,r18,8111ab2c <__divdf3+0x72c>
8111aafc:	90c03e36 	bltu	r18,r3,8111abf8 <__divdf3+0x7f8>
8111ab00:	1c806926 	beq	r3,r18,8111aca8 <__divdf3+0x8a8>
8111ab04:	90c7c83a 	sub	r3,r18,r3
8111ab08:	1023883a 	mov	r17,r2
8111ab0c:	003f5206 	br	8111a858 <__reset+0xfb0fa858>
8111ab10:	923f0436 	bltu	r18,r8,8111a724 <__reset+0xfb0fa724>
8111ab14:	800897fa 	slli	r4,r16,31
8111ab18:	9004d07a 	srli	r2,r18,1
8111ab1c:	8006d07a 	srli	r3,r16,1
8111ab20:	902097fa 	slli	r16,r18,31
8111ab24:	20a4b03a 	or	r18,r4,r2
8111ab28:	003f0106 	br	8111a730 <__reset+0xfb0fa730>
8111ab2c:	e4bff51e 	bne	fp,r18,8111ab04 <__reset+0xfb0fab04>
8111ab30:	85bff22e 	bgeu	r16,r22,8111aafc <__reset+0xfb0faafc>
8111ab34:	e0c7c83a 	sub	r3,fp,r3
8111ab38:	1023883a 	mov	r17,r2
8111ab3c:	003f4606 	br	8111a858 <__reset+0xfb0fa858>
8111ab40:	100f883a 	mov	r7,r2
8111ab44:	003f2b06 	br	8111a7f4 <__reset+0xfb0fa7f4>
8111ab48:	180d883a 	mov	r6,r3
8111ab4c:	003f1306 	br	8111a79c <__reset+0xfb0fa79c>
8111ab50:	813fe436 	bltu	r16,r4,8111aae4 <__reset+0xfb0faae4>
8111ab54:	0007883a 	mov	r3,zero
8111ab58:	003f3f06 	br	8111a858 <__reset+0xfb0fa858>
8111ab5c:	ba402c36 	bltu	r23,r9,8111ac10 <__divdf3+0x810>
8111ab60:	4dc05426 	beq	r9,r23,8111acb4 <__divdf3+0x8b4>
8111ab64:	1011883a 	mov	r8,r2
8111ab68:	003f8906 	br	8111a990 <__reset+0xfb0fa990>
8111ab6c:	023fffc4 	movi	r8,-1
8111ab70:	003f8806 	br	8111a994 <__reset+0xfb0fa994>
8111ab74:	1811883a 	mov	r8,r3
8111ab78:	003f5406 	br	8111a8cc <__reset+0xfb0fa8cc>
8111ab7c:	1025883a 	mov	r18,r2
8111ab80:	003f6d06 	br	8111a938 <__reset+0xfb0fa938>
8111ab84:	b827883a 	mov	r19,r23
8111ab88:	003f8206 	br	8111a994 <__reset+0xfb0fa994>
8111ab8c:	010007c4 	movi	r4,31
8111ab90:	20c02616 	blt	r4,r3,8111ac2c <__divdf3+0x82c>
8111ab94:	00800804 	movi	r2,32
8111ab98:	10c5c83a 	sub	r2,r2,r3
8111ab9c:	888a983a 	sll	r5,r17,r2
8111aba0:	40c8d83a 	srl	r4,r8,r3
8111aba4:	4084983a 	sll	r2,r8,r2
8111aba8:	88e2d83a 	srl	r17,r17,r3
8111abac:	2906b03a 	or	r3,r5,r4
8111abb0:	1004c03a 	cmpne	r2,r2,zero
8111abb4:	1886b03a 	or	r3,r3,r2
8111abb8:	188001cc 	andi	r2,r3,7
8111abbc:	10000726 	beq	r2,zero,8111abdc <__divdf3+0x7dc>
8111abc0:	188003cc 	andi	r2,r3,15
8111abc4:	01000104 	movi	r4,4
8111abc8:	11000426 	beq	r2,r4,8111abdc <__divdf3+0x7dc>
8111abcc:	1805883a 	mov	r2,r3
8111abd0:	10c00104 	addi	r3,r2,4
8111abd4:	1885803a 	cmpltu	r2,r3,r2
8111abd8:	88a3883a 	add	r17,r17,r2
8111abdc:	8880202c 	andhi	r2,r17,128
8111abe0:	10002726 	beq	r2,zero,8111ac80 <__divdf3+0x880>
8111abe4:	98c0004c 	andi	r3,r19,1
8111abe8:	00800044 	movi	r2,1
8111abec:	000b883a 	mov	r5,zero
8111abf0:	0025883a 	mov	r18,zero
8111abf4:	003e6106 	br	8111a57c <__reset+0xfb0fa57c>
8111abf8:	85a1883a 	add	r16,r16,r22
8111abfc:	8585803a 	cmpltu	r2,r16,r22
8111ac00:	1705883a 	add	r2,r2,fp
8111ac04:	14a5883a 	add	r18,r2,r18
8111ac08:	8c7fff84 	addi	r17,r17,-2
8111ac0c:	003f1106 	br	8111a854 <__reset+0xfb0fa854>
8111ac10:	b589883a 	add	r4,r22,r22
8111ac14:	25ad803a 	cmpltu	r22,r4,r22
8111ac18:	b739883a 	add	fp,r22,fp
8111ac1c:	40bfff84 	addi	r2,r8,-2
8111ac20:	bf2f883a 	add	r23,r23,fp
8111ac24:	202d883a 	mov	r22,r4
8111ac28:	003f9306 	br	8111aa78 <__reset+0xfb0faa78>
8111ac2c:	013ff844 	movi	r4,-31
8111ac30:	2085c83a 	sub	r2,r4,r2
8111ac34:	8888d83a 	srl	r4,r17,r2
8111ac38:	00800804 	movi	r2,32
8111ac3c:	18802126 	beq	r3,r2,8111acc4 <__divdf3+0x8c4>
8111ac40:	00801004 	movi	r2,64
8111ac44:	10c5c83a 	sub	r2,r2,r3
8111ac48:	8884983a 	sll	r2,r17,r2
8111ac4c:	1204b03a 	or	r2,r2,r8
8111ac50:	1004c03a 	cmpne	r2,r2,zero
8111ac54:	2084b03a 	or	r2,r4,r2
8111ac58:	144001cc 	andi	r17,r2,7
8111ac5c:	88000d1e 	bne	r17,zero,8111ac94 <__divdf3+0x894>
8111ac60:	000b883a 	mov	r5,zero
8111ac64:	1024d0fa 	srli	r18,r2,3
8111ac68:	98c0004c 	andi	r3,r19,1
8111ac6c:	0005883a 	mov	r2,zero
8111ac70:	9464b03a 	or	r18,r18,r17
8111ac74:	003e4106 	br	8111a57c <__reset+0xfb0fa57c>
8111ac78:	1007883a 	mov	r3,r2
8111ac7c:	0023883a 	mov	r17,zero
8111ac80:	880a927a 	slli	r5,r17,9
8111ac84:	1805883a 	mov	r2,r3
8111ac88:	8822977a 	slli	r17,r17,29
8111ac8c:	280ad33a 	srli	r5,r5,12
8111ac90:	003ff406 	br	8111ac64 <__reset+0xfb0fac64>
8111ac94:	10c003cc 	andi	r3,r2,15
8111ac98:	01000104 	movi	r4,4
8111ac9c:	193ff626 	beq	r3,r4,8111ac78 <__reset+0xfb0fac78>
8111aca0:	0023883a 	mov	r17,zero
8111aca4:	003fca06 	br	8111abd0 <__reset+0xfb0fabd0>
8111aca8:	813fd336 	bltu	r16,r4,8111abf8 <__reset+0xfb0fabf8>
8111acac:	1023883a 	mov	r17,r2
8111acb0:	003fa806 	br	8111ab54 <__reset+0xfb0fab54>
8111acb4:	b0ffd636 	bltu	r22,r3,8111ac10 <__reset+0xfb0fac10>
8111acb8:	1011883a 	mov	r8,r2
8111acbc:	b0ff341e 	bne	r22,r3,8111a990 <__reset+0xfb0fa990>
8111acc0:	003f3406 	br	8111a994 <__reset+0xfb0fa994>
8111acc4:	0005883a 	mov	r2,zero
8111acc8:	003fe006 	br	8111ac4c <__reset+0xfb0fac4c>
8111accc:	00800434 	movhi	r2,16
8111acd0:	89400234 	orhi	r5,r17,8
8111acd4:	10bfffc4 	addi	r2,r2,-1
8111acd8:	b807883a 	mov	r3,r23
8111acdc:	288a703a 	and	r5,r5,r2
8111ace0:	4025883a 	mov	r18,r8
8111ace4:	003e8206 	br	8111a6f0 <__reset+0xfb0fa6f0>

8111ace8 <__eqdf2>:
8111ace8:	2804d53a 	srli	r2,r5,20
8111acec:	3806d53a 	srli	r3,r7,20
8111acf0:	02000434 	movhi	r8,16
8111acf4:	423fffc4 	addi	r8,r8,-1
8111acf8:	1081ffcc 	andi	r2,r2,2047
8111acfc:	0281ffc4 	movi	r10,2047
8111ad00:	2a12703a 	and	r9,r5,r8
8111ad04:	18c1ffcc 	andi	r3,r3,2047
8111ad08:	3a10703a 	and	r8,r7,r8
8111ad0c:	280ad7fa 	srli	r5,r5,31
8111ad10:	380ed7fa 	srli	r7,r7,31
8111ad14:	12801026 	beq	r2,r10,8111ad58 <__eqdf2+0x70>
8111ad18:	0281ffc4 	movi	r10,2047
8111ad1c:	1a800a26 	beq	r3,r10,8111ad48 <__eqdf2+0x60>
8111ad20:	10c00226 	beq	r2,r3,8111ad2c <__eqdf2+0x44>
8111ad24:	00800044 	movi	r2,1
8111ad28:	f800283a 	ret
8111ad2c:	4a3ffd1e 	bne	r9,r8,8111ad24 <__reset+0xfb0fad24>
8111ad30:	21bffc1e 	bne	r4,r6,8111ad24 <__reset+0xfb0fad24>
8111ad34:	29c00c26 	beq	r5,r7,8111ad68 <__eqdf2+0x80>
8111ad38:	103ffa1e 	bne	r2,zero,8111ad24 <__reset+0xfb0fad24>
8111ad3c:	2244b03a 	or	r2,r4,r9
8111ad40:	1004c03a 	cmpne	r2,r2,zero
8111ad44:	f800283a 	ret
8111ad48:	3214b03a 	or	r10,r6,r8
8111ad4c:	503ff426 	beq	r10,zero,8111ad20 <__reset+0xfb0fad20>
8111ad50:	00800044 	movi	r2,1
8111ad54:	f800283a 	ret
8111ad58:	2254b03a 	or	r10,r4,r9
8111ad5c:	503fee26 	beq	r10,zero,8111ad18 <__reset+0xfb0fad18>
8111ad60:	00800044 	movi	r2,1
8111ad64:	f800283a 	ret
8111ad68:	0005883a 	mov	r2,zero
8111ad6c:	f800283a 	ret

8111ad70 <__gedf2>:
8111ad70:	2804d53a 	srli	r2,r5,20
8111ad74:	3806d53a 	srli	r3,r7,20
8111ad78:	02000434 	movhi	r8,16
8111ad7c:	423fffc4 	addi	r8,r8,-1
8111ad80:	1081ffcc 	andi	r2,r2,2047
8111ad84:	0241ffc4 	movi	r9,2047
8111ad88:	2a14703a 	and	r10,r5,r8
8111ad8c:	18c1ffcc 	andi	r3,r3,2047
8111ad90:	3a10703a 	and	r8,r7,r8
8111ad94:	280ad7fa 	srli	r5,r5,31
8111ad98:	380ed7fa 	srli	r7,r7,31
8111ad9c:	12401d26 	beq	r2,r9,8111ae14 <__gedf2+0xa4>
8111ada0:	0241ffc4 	movi	r9,2047
8111ada4:	1a401226 	beq	r3,r9,8111adf0 <__gedf2+0x80>
8111ada8:	1000081e 	bne	r2,zero,8111adcc <__gedf2+0x5c>
8111adac:	2296b03a 	or	r11,r4,r10
8111adb0:	5813003a 	cmpeq	r9,r11,zero
8111adb4:	1800091e 	bne	r3,zero,8111addc <__gedf2+0x6c>
8111adb8:	3218b03a 	or	r12,r6,r8
8111adbc:	6000071e 	bne	r12,zero,8111addc <__gedf2+0x6c>
8111adc0:	0005883a 	mov	r2,zero
8111adc4:	5800101e 	bne	r11,zero,8111ae08 <__gedf2+0x98>
8111adc8:	f800283a 	ret
8111adcc:	18000c1e 	bne	r3,zero,8111ae00 <__gedf2+0x90>
8111add0:	3212b03a 	or	r9,r6,r8
8111add4:	48000c26 	beq	r9,zero,8111ae08 <__gedf2+0x98>
8111add8:	0013883a 	mov	r9,zero
8111addc:	39c03fcc 	andi	r7,r7,255
8111ade0:	48000826 	beq	r9,zero,8111ae04 <__gedf2+0x94>
8111ade4:	38000926 	beq	r7,zero,8111ae0c <__gedf2+0x9c>
8111ade8:	00800044 	movi	r2,1
8111adec:	f800283a 	ret
8111adf0:	3212b03a 	or	r9,r6,r8
8111adf4:	483fec26 	beq	r9,zero,8111ada8 <__reset+0xfb0fada8>
8111adf8:	00bfff84 	movi	r2,-2
8111adfc:	f800283a 	ret
8111ae00:	39c03fcc 	andi	r7,r7,255
8111ae04:	29c00626 	beq	r5,r7,8111ae20 <__gedf2+0xb0>
8111ae08:	283ff726 	beq	r5,zero,8111ade8 <__reset+0xfb0fade8>
8111ae0c:	00bfffc4 	movi	r2,-1
8111ae10:	f800283a 	ret
8111ae14:	2292b03a 	or	r9,r4,r10
8111ae18:	483fe126 	beq	r9,zero,8111ada0 <__reset+0xfb0fada0>
8111ae1c:	003ff606 	br	8111adf8 <__reset+0xfb0fadf8>
8111ae20:	18bff916 	blt	r3,r2,8111ae08 <__reset+0xfb0fae08>
8111ae24:	10c00316 	blt	r2,r3,8111ae34 <__gedf2+0xc4>
8111ae28:	42bff736 	bltu	r8,r10,8111ae08 <__reset+0xfb0fae08>
8111ae2c:	52000326 	beq	r10,r8,8111ae3c <__gedf2+0xcc>
8111ae30:	5200042e 	bgeu	r10,r8,8111ae44 <__gedf2+0xd4>
8111ae34:	283fec1e 	bne	r5,zero,8111ade8 <__reset+0xfb0fade8>
8111ae38:	003ff406 	br	8111ae0c <__reset+0xfb0fae0c>
8111ae3c:	313ff236 	bltu	r6,r4,8111ae08 <__reset+0xfb0fae08>
8111ae40:	21bffc36 	bltu	r4,r6,8111ae34 <__reset+0xfb0fae34>
8111ae44:	0005883a 	mov	r2,zero
8111ae48:	f800283a 	ret

8111ae4c <__ledf2>:
8111ae4c:	2804d53a 	srli	r2,r5,20
8111ae50:	3810d53a 	srli	r8,r7,20
8111ae54:	00c00434 	movhi	r3,16
8111ae58:	18ffffc4 	addi	r3,r3,-1
8111ae5c:	1081ffcc 	andi	r2,r2,2047
8111ae60:	0241ffc4 	movi	r9,2047
8111ae64:	28d4703a 	and	r10,r5,r3
8111ae68:	4201ffcc 	andi	r8,r8,2047
8111ae6c:	38c6703a 	and	r3,r7,r3
8111ae70:	280ad7fa 	srli	r5,r5,31
8111ae74:	380ed7fa 	srli	r7,r7,31
8111ae78:	12401f26 	beq	r2,r9,8111aef8 <__ledf2+0xac>
8111ae7c:	0241ffc4 	movi	r9,2047
8111ae80:	42401426 	beq	r8,r9,8111aed4 <__ledf2+0x88>
8111ae84:	1000091e 	bne	r2,zero,8111aeac <__ledf2+0x60>
8111ae88:	2296b03a 	or	r11,r4,r10
8111ae8c:	5813003a 	cmpeq	r9,r11,zero
8111ae90:	29403fcc 	andi	r5,r5,255
8111ae94:	40000a1e 	bne	r8,zero,8111aec0 <__ledf2+0x74>
8111ae98:	30d8b03a 	or	r12,r6,r3
8111ae9c:	6000081e 	bne	r12,zero,8111aec0 <__ledf2+0x74>
8111aea0:	0005883a 	mov	r2,zero
8111aea4:	5800111e 	bne	r11,zero,8111aeec <__ledf2+0xa0>
8111aea8:	f800283a 	ret
8111aeac:	29403fcc 	andi	r5,r5,255
8111aeb0:	40000c1e 	bne	r8,zero,8111aee4 <__ledf2+0x98>
8111aeb4:	30d2b03a 	or	r9,r6,r3
8111aeb8:	48000c26 	beq	r9,zero,8111aeec <__ledf2+0xa0>
8111aebc:	0013883a 	mov	r9,zero
8111aec0:	39c03fcc 	andi	r7,r7,255
8111aec4:	48000826 	beq	r9,zero,8111aee8 <__ledf2+0x9c>
8111aec8:	38001126 	beq	r7,zero,8111af10 <__ledf2+0xc4>
8111aecc:	00800044 	movi	r2,1
8111aed0:	f800283a 	ret
8111aed4:	30d2b03a 	or	r9,r6,r3
8111aed8:	483fea26 	beq	r9,zero,8111ae84 <__reset+0xfb0fae84>
8111aedc:	00800084 	movi	r2,2
8111aee0:	f800283a 	ret
8111aee4:	39c03fcc 	andi	r7,r7,255
8111aee8:	39400726 	beq	r7,r5,8111af08 <__ledf2+0xbc>
8111aeec:	2800081e 	bne	r5,zero,8111af10 <__ledf2+0xc4>
8111aef0:	00800044 	movi	r2,1
8111aef4:	f800283a 	ret
8111aef8:	2292b03a 	or	r9,r4,r10
8111aefc:	483fdf26 	beq	r9,zero,8111ae7c <__reset+0xfb0fae7c>
8111af00:	00800084 	movi	r2,2
8111af04:	f800283a 	ret
8111af08:	4080030e 	bge	r8,r2,8111af18 <__ledf2+0xcc>
8111af0c:	383fef26 	beq	r7,zero,8111aecc <__reset+0xfb0faecc>
8111af10:	00bfffc4 	movi	r2,-1
8111af14:	f800283a 	ret
8111af18:	123feb16 	blt	r2,r8,8111aec8 <__reset+0xfb0faec8>
8111af1c:	1abff336 	bltu	r3,r10,8111aeec <__reset+0xfb0faeec>
8111af20:	50c00326 	beq	r10,r3,8111af30 <__ledf2+0xe4>
8111af24:	50c0042e 	bgeu	r10,r3,8111af38 <__ledf2+0xec>
8111af28:	283fe81e 	bne	r5,zero,8111aecc <__reset+0xfb0faecc>
8111af2c:	003ff806 	br	8111af10 <__reset+0xfb0faf10>
8111af30:	313fee36 	bltu	r6,r4,8111aeec <__reset+0xfb0faeec>
8111af34:	21bffc36 	bltu	r4,r6,8111af28 <__reset+0xfb0faf28>
8111af38:	0005883a 	mov	r2,zero
8111af3c:	f800283a 	ret

8111af40 <__subdf3>:
8111af40:	02000434 	movhi	r8,16
8111af44:	423fffc4 	addi	r8,r8,-1
8111af48:	defffb04 	addi	sp,sp,-20
8111af4c:	2a14703a 	and	r10,r5,r8
8111af50:	3812d53a 	srli	r9,r7,20
8111af54:	3a10703a 	and	r8,r7,r8
8111af58:	2006d77a 	srli	r3,r4,29
8111af5c:	3004d77a 	srli	r2,r6,29
8111af60:	dc000015 	stw	r16,0(sp)
8111af64:	501490fa 	slli	r10,r10,3
8111af68:	2820d53a 	srli	r16,r5,20
8111af6c:	401090fa 	slli	r8,r8,3
8111af70:	dc800215 	stw	r18,8(sp)
8111af74:	dc400115 	stw	r17,4(sp)
8111af78:	dfc00415 	stw	ra,16(sp)
8111af7c:	202290fa 	slli	r17,r4,3
8111af80:	dcc00315 	stw	r19,12(sp)
8111af84:	4a41ffcc 	andi	r9,r9,2047
8111af88:	0101ffc4 	movi	r4,2047
8111af8c:	2824d7fa 	srli	r18,r5,31
8111af90:	8401ffcc 	andi	r16,r16,2047
8111af94:	50c6b03a 	or	r3,r10,r3
8111af98:	380ed7fa 	srli	r7,r7,31
8111af9c:	408ab03a 	or	r5,r8,r2
8111afa0:	300c90fa 	slli	r6,r6,3
8111afa4:	49009626 	beq	r9,r4,8111b200 <__subdf3+0x2c0>
8111afa8:	39c0005c 	xori	r7,r7,1
8111afac:	8245c83a 	sub	r2,r16,r9
8111afb0:	3c807426 	beq	r7,r18,8111b184 <__subdf3+0x244>
8111afb4:	0080af0e 	bge	zero,r2,8111b274 <__subdf3+0x334>
8111afb8:	48002a1e 	bne	r9,zero,8111b064 <__subdf3+0x124>
8111afbc:	2988b03a 	or	r4,r5,r6
8111afc0:	20009a1e 	bne	r4,zero,8111b22c <__subdf3+0x2ec>
8111afc4:	888001cc 	andi	r2,r17,7
8111afc8:	10000726 	beq	r2,zero,8111afe8 <__subdf3+0xa8>
8111afcc:	888003cc 	andi	r2,r17,15
8111afd0:	01000104 	movi	r4,4
8111afd4:	11000426 	beq	r2,r4,8111afe8 <__subdf3+0xa8>
8111afd8:	890b883a 	add	r5,r17,r4
8111afdc:	2c63803a 	cmpltu	r17,r5,r17
8111afe0:	1c47883a 	add	r3,r3,r17
8111afe4:	2823883a 	mov	r17,r5
8111afe8:	1880202c 	andhi	r2,r3,128
8111afec:	10005926 	beq	r2,zero,8111b154 <__subdf3+0x214>
8111aff0:	84000044 	addi	r16,r16,1
8111aff4:	0081ffc4 	movi	r2,2047
8111aff8:	8080be26 	beq	r16,r2,8111b2f4 <__subdf3+0x3b4>
8111affc:	017fe034 	movhi	r5,65408
8111b000:	297fffc4 	addi	r5,r5,-1
8111b004:	1946703a 	and	r3,r3,r5
8111b008:	1804977a 	slli	r2,r3,29
8111b00c:	1806927a 	slli	r3,r3,9
8111b010:	8822d0fa 	srli	r17,r17,3
8111b014:	8401ffcc 	andi	r16,r16,2047
8111b018:	180ad33a 	srli	r5,r3,12
8111b01c:	9100004c 	andi	r4,r18,1
8111b020:	1444b03a 	or	r2,r2,r17
8111b024:	80c1ffcc 	andi	r3,r16,2047
8111b028:	1820953a 	slli	r16,r3,20
8111b02c:	20c03fcc 	andi	r3,r4,255
8111b030:	180897fa 	slli	r4,r3,31
8111b034:	00c00434 	movhi	r3,16
8111b038:	18ffffc4 	addi	r3,r3,-1
8111b03c:	28c6703a 	and	r3,r5,r3
8111b040:	1c06b03a 	or	r3,r3,r16
8111b044:	1906b03a 	or	r3,r3,r4
8111b048:	dfc00417 	ldw	ra,16(sp)
8111b04c:	dcc00317 	ldw	r19,12(sp)
8111b050:	dc800217 	ldw	r18,8(sp)
8111b054:	dc400117 	ldw	r17,4(sp)
8111b058:	dc000017 	ldw	r16,0(sp)
8111b05c:	dec00504 	addi	sp,sp,20
8111b060:	f800283a 	ret
8111b064:	0101ffc4 	movi	r4,2047
8111b068:	813fd626 	beq	r16,r4,8111afc4 <__reset+0xfb0fafc4>
8111b06c:	29402034 	orhi	r5,r5,128
8111b070:	01000e04 	movi	r4,56
8111b074:	2080a316 	blt	r4,r2,8111b304 <__subdf3+0x3c4>
8111b078:	010007c4 	movi	r4,31
8111b07c:	2080c616 	blt	r4,r2,8111b398 <__subdf3+0x458>
8111b080:	01000804 	movi	r4,32
8111b084:	2089c83a 	sub	r4,r4,r2
8111b088:	2910983a 	sll	r8,r5,r4
8111b08c:	308ed83a 	srl	r7,r6,r2
8111b090:	3108983a 	sll	r4,r6,r4
8111b094:	2884d83a 	srl	r2,r5,r2
8111b098:	41ccb03a 	or	r6,r8,r7
8111b09c:	2008c03a 	cmpne	r4,r4,zero
8111b0a0:	310cb03a 	or	r6,r6,r4
8111b0a4:	898dc83a 	sub	r6,r17,r6
8111b0a8:	89a3803a 	cmpltu	r17,r17,r6
8111b0ac:	1887c83a 	sub	r3,r3,r2
8111b0b0:	1c47c83a 	sub	r3,r3,r17
8111b0b4:	3023883a 	mov	r17,r6
8111b0b8:	1880202c 	andhi	r2,r3,128
8111b0bc:	10002326 	beq	r2,zero,8111b14c <__subdf3+0x20c>
8111b0c0:	04c02034 	movhi	r19,128
8111b0c4:	9cffffc4 	addi	r19,r19,-1
8111b0c8:	1ce6703a 	and	r19,r3,r19
8111b0cc:	98007a26 	beq	r19,zero,8111b2b8 <__subdf3+0x378>
8111b0d0:	9809883a 	mov	r4,r19
8111b0d4:	110b77c0 	call	8110b77c <__clzsi2>
8111b0d8:	113ffe04 	addi	r4,r2,-8
8111b0dc:	00c007c4 	movi	r3,31
8111b0e0:	19007b16 	blt	r3,r4,8111b2d0 <__subdf3+0x390>
8111b0e4:	00800804 	movi	r2,32
8111b0e8:	1105c83a 	sub	r2,r2,r4
8111b0ec:	8884d83a 	srl	r2,r17,r2
8111b0f0:	9906983a 	sll	r3,r19,r4
8111b0f4:	8922983a 	sll	r17,r17,r4
8111b0f8:	10c4b03a 	or	r2,r2,r3
8111b0fc:	24007816 	blt	r4,r16,8111b2e0 <__subdf3+0x3a0>
8111b100:	2421c83a 	sub	r16,r4,r16
8111b104:	80c00044 	addi	r3,r16,1
8111b108:	010007c4 	movi	r4,31
8111b10c:	20c09516 	blt	r4,r3,8111b364 <__subdf3+0x424>
8111b110:	01400804 	movi	r5,32
8111b114:	28cbc83a 	sub	r5,r5,r3
8111b118:	88c8d83a 	srl	r4,r17,r3
8111b11c:	8962983a 	sll	r17,r17,r5
8111b120:	114a983a 	sll	r5,r2,r5
8111b124:	10c6d83a 	srl	r3,r2,r3
8111b128:	8804c03a 	cmpne	r2,r17,zero
8111b12c:	290ab03a 	or	r5,r5,r4
8111b130:	28a2b03a 	or	r17,r5,r2
8111b134:	0021883a 	mov	r16,zero
8111b138:	003fa206 	br	8111afc4 <__reset+0xfb0fafc4>
8111b13c:	2090b03a 	or	r8,r4,r2
8111b140:	40018e26 	beq	r8,zero,8111b77c <__subdf3+0x83c>
8111b144:	1007883a 	mov	r3,r2
8111b148:	2023883a 	mov	r17,r4
8111b14c:	888001cc 	andi	r2,r17,7
8111b150:	103f9e1e 	bne	r2,zero,8111afcc <__reset+0xfb0fafcc>
8111b154:	1804977a 	slli	r2,r3,29
8111b158:	8822d0fa 	srli	r17,r17,3
8111b15c:	1810d0fa 	srli	r8,r3,3
8111b160:	9100004c 	andi	r4,r18,1
8111b164:	1444b03a 	or	r2,r2,r17
8111b168:	00c1ffc4 	movi	r3,2047
8111b16c:	80c02826 	beq	r16,r3,8111b210 <__subdf3+0x2d0>
8111b170:	01400434 	movhi	r5,16
8111b174:	297fffc4 	addi	r5,r5,-1
8111b178:	80e0703a 	and	r16,r16,r3
8111b17c:	414a703a 	and	r5,r8,r5
8111b180:	003fa806 	br	8111b024 <__reset+0xfb0fb024>
8111b184:	0080630e 	bge	zero,r2,8111b314 <__subdf3+0x3d4>
8111b188:	48003026 	beq	r9,zero,8111b24c <__subdf3+0x30c>
8111b18c:	0101ffc4 	movi	r4,2047
8111b190:	813f8c26 	beq	r16,r4,8111afc4 <__reset+0xfb0fafc4>
8111b194:	29402034 	orhi	r5,r5,128
8111b198:	01000e04 	movi	r4,56
8111b19c:	2080a90e 	bge	r4,r2,8111b444 <__subdf3+0x504>
8111b1a0:	298cb03a 	or	r6,r5,r6
8111b1a4:	3012c03a 	cmpne	r9,r6,zero
8111b1a8:	0005883a 	mov	r2,zero
8111b1ac:	4c53883a 	add	r9,r9,r17
8111b1b0:	4c63803a 	cmpltu	r17,r9,r17
8111b1b4:	10c7883a 	add	r3,r2,r3
8111b1b8:	88c7883a 	add	r3,r17,r3
8111b1bc:	4823883a 	mov	r17,r9
8111b1c0:	1880202c 	andhi	r2,r3,128
8111b1c4:	1000d026 	beq	r2,zero,8111b508 <__subdf3+0x5c8>
8111b1c8:	84000044 	addi	r16,r16,1
8111b1cc:	0081ffc4 	movi	r2,2047
8111b1d0:	8080fe26 	beq	r16,r2,8111b5cc <__subdf3+0x68c>
8111b1d4:	00bfe034 	movhi	r2,65408
8111b1d8:	10bfffc4 	addi	r2,r2,-1
8111b1dc:	1886703a 	and	r3,r3,r2
8111b1e0:	880ad07a 	srli	r5,r17,1
8111b1e4:	180497fa 	slli	r2,r3,31
8111b1e8:	8900004c 	andi	r4,r17,1
8111b1ec:	2922b03a 	or	r17,r5,r4
8111b1f0:	1806d07a 	srli	r3,r3,1
8111b1f4:	1462b03a 	or	r17,r2,r17
8111b1f8:	3825883a 	mov	r18,r7
8111b1fc:	003f7106 	br	8111afc4 <__reset+0xfb0fafc4>
8111b200:	2984b03a 	or	r2,r5,r6
8111b204:	103f6826 	beq	r2,zero,8111afa8 <__reset+0xfb0fafa8>
8111b208:	39c03fcc 	andi	r7,r7,255
8111b20c:	003f6706 	br	8111afac <__reset+0xfb0fafac>
8111b210:	4086b03a 	or	r3,r8,r2
8111b214:	18015226 	beq	r3,zero,8111b760 <__subdf3+0x820>
8111b218:	00c00434 	movhi	r3,16
8111b21c:	41400234 	orhi	r5,r8,8
8111b220:	18ffffc4 	addi	r3,r3,-1
8111b224:	28ca703a 	and	r5,r5,r3
8111b228:	003f7e06 	br	8111b024 <__reset+0xfb0fb024>
8111b22c:	10bfffc4 	addi	r2,r2,-1
8111b230:	1000491e 	bne	r2,zero,8111b358 <__subdf3+0x418>
8111b234:	898fc83a 	sub	r7,r17,r6
8111b238:	89e3803a 	cmpltu	r17,r17,r7
8111b23c:	1947c83a 	sub	r3,r3,r5
8111b240:	1c47c83a 	sub	r3,r3,r17
8111b244:	3823883a 	mov	r17,r7
8111b248:	003f9b06 	br	8111b0b8 <__reset+0xfb0fb0b8>
8111b24c:	2988b03a 	or	r4,r5,r6
8111b250:	203f5c26 	beq	r4,zero,8111afc4 <__reset+0xfb0fafc4>
8111b254:	10bfffc4 	addi	r2,r2,-1
8111b258:	1000931e 	bne	r2,zero,8111b4a8 <__subdf3+0x568>
8111b25c:	898d883a 	add	r6,r17,r6
8111b260:	3463803a 	cmpltu	r17,r6,r17
8111b264:	1947883a 	add	r3,r3,r5
8111b268:	88c7883a 	add	r3,r17,r3
8111b26c:	3023883a 	mov	r17,r6
8111b270:	003fd306 	br	8111b1c0 <__reset+0xfb0fb1c0>
8111b274:	1000541e 	bne	r2,zero,8111b3c8 <__subdf3+0x488>
8111b278:	80800044 	addi	r2,r16,1
8111b27c:	1081ffcc 	andi	r2,r2,2047
8111b280:	01000044 	movi	r4,1
8111b284:	2080a20e 	bge	r4,r2,8111b510 <__subdf3+0x5d0>
8111b288:	8989c83a 	sub	r4,r17,r6
8111b28c:	8905803a 	cmpltu	r2,r17,r4
8111b290:	1967c83a 	sub	r19,r3,r5
8111b294:	98a7c83a 	sub	r19,r19,r2
8111b298:	9880202c 	andhi	r2,r19,128
8111b29c:	10006326 	beq	r2,zero,8111b42c <__subdf3+0x4ec>
8111b2a0:	3463c83a 	sub	r17,r6,r17
8111b2a4:	28c7c83a 	sub	r3,r5,r3
8111b2a8:	344d803a 	cmpltu	r6,r6,r17
8111b2ac:	19a7c83a 	sub	r19,r3,r6
8111b2b0:	3825883a 	mov	r18,r7
8111b2b4:	983f861e 	bne	r19,zero,8111b0d0 <__reset+0xfb0fb0d0>
8111b2b8:	8809883a 	mov	r4,r17
8111b2bc:	110b77c0 	call	8110b77c <__clzsi2>
8111b2c0:	10800804 	addi	r2,r2,32
8111b2c4:	113ffe04 	addi	r4,r2,-8
8111b2c8:	00c007c4 	movi	r3,31
8111b2cc:	193f850e 	bge	r3,r4,8111b0e4 <__reset+0xfb0fb0e4>
8111b2d0:	10bff604 	addi	r2,r2,-40
8111b2d4:	8884983a 	sll	r2,r17,r2
8111b2d8:	0023883a 	mov	r17,zero
8111b2dc:	243f880e 	bge	r4,r16,8111b100 <__reset+0xfb0fb100>
8111b2e0:	00ffe034 	movhi	r3,65408
8111b2e4:	18ffffc4 	addi	r3,r3,-1
8111b2e8:	8121c83a 	sub	r16,r16,r4
8111b2ec:	10c6703a 	and	r3,r2,r3
8111b2f0:	003f3406 	br	8111afc4 <__reset+0xfb0fafc4>
8111b2f4:	9100004c 	andi	r4,r18,1
8111b2f8:	000b883a 	mov	r5,zero
8111b2fc:	0005883a 	mov	r2,zero
8111b300:	003f4806 	br	8111b024 <__reset+0xfb0fb024>
8111b304:	298cb03a 	or	r6,r5,r6
8111b308:	300cc03a 	cmpne	r6,r6,zero
8111b30c:	0005883a 	mov	r2,zero
8111b310:	003f6406 	br	8111b0a4 <__reset+0xfb0fb0a4>
8111b314:	10009a1e 	bne	r2,zero,8111b580 <__subdf3+0x640>
8111b318:	82400044 	addi	r9,r16,1
8111b31c:	4881ffcc 	andi	r2,r9,2047
8111b320:	02800044 	movi	r10,1
8111b324:	5080670e 	bge	r10,r2,8111b4c4 <__subdf3+0x584>
8111b328:	0081ffc4 	movi	r2,2047
8111b32c:	4880af26 	beq	r9,r2,8111b5ec <__subdf3+0x6ac>
8111b330:	898d883a 	add	r6,r17,r6
8111b334:	1945883a 	add	r2,r3,r5
8111b338:	3447803a 	cmpltu	r3,r6,r17
8111b33c:	1887883a 	add	r3,r3,r2
8111b340:	182297fa 	slli	r17,r3,31
8111b344:	300cd07a 	srli	r6,r6,1
8111b348:	1806d07a 	srli	r3,r3,1
8111b34c:	4821883a 	mov	r16,r9
8111b350:	89a2b03a 	or	r17,r17,r6
8111b354:	003f1b06 	br	8111afc4 <__reset+0xfb0fafc4>
8111b358:	0101ffc4 	movi	r4,2047
8111b35c:	813f441e 	bne	r16,r4,8111b070 <__reset+0xfb0fb070>
8111b360:	003f1806 	br	8111afc4 <__reset+0xfb0fafc4>
8111b364:	843ff844 	addi	r16,r16,-31
8111b368:	01400804 	movi	r5,32
8111b36c:	1408d83a 	srl	r4,r2,r16
8111b370:	19405026 	beq	r3,r5,8111b4b4 <__subdf3+0x574>
8111b374:	01401004 	movi	r5,64
8111b378:	28c7c83a 	sub	r3,r5,r3
8111b37c:	10c4983a 	sll	r2,r2,r3
8111b380:	88a2b03a 	or	r17,r17,r2
8111b384:	8822c03a 	cmpne	r17,r17,zero
8111b388:	2462b03a 	or	r17,r4,r17
8111b38c:	0007883a 	mov	r3,zero
8111b390:	0021883a 	mov	r16,zero
8111b394:	003f6d06 	br	8111b14c <__reset+0xfb0fb14c>
8111b398:	11fff804 	addi	r7,r2,-32
8111b39c:	01000804 	movi	r4,32
8111b3a0:	29ced83a 	srl	r7,r5,r7
8111b3a4:	11004526 	beq	r2,r4,8111b4bc <__subdf3+0x57c>
8111b3a8:	01001004 	movi	r4,64
8111b3ac:	2089c83a 	sub	r4,r4,r2
8111b3b0:	2904983a 	sll	r2,r5,r4
8111b3b4:	118cb03a 	or	r6,r2,r6
8111b3b8:	300cc03a 	cmpne	r6,r6,zero
8111b3bc:	398cb03a 	or	r6,r7,r6
8111b3c0:	0005883a 	mov	r2,zero
8111b3c4:	003f3706 	br	8111b0a4 <__reset+0xfb0fb0a4>
8111b3c8:	80002a26 	beq	r16,zero,8111b474 <__subdf3+0x534>
8111b3cc:	0101ffc4 	movi	r4,2047
8111b3d0:	49006626 	beq	r9,r4,8111b56c <__subdf3+0x62c>
8111b3d4:	0085c83a 	sub	r2,zero,r2
8111b3d8:	18c02034 	orhi	r3,r3,128
8111b3dc:	01000e04 	movi	r4,56
8111b3e0:	20807e16 	blt	r4,r2,8111b5dc <__subdf3+0x69c>
8111b3e4:	010007c4 	movi	r4,31
8111b3e8:	2080e716 	blt	r4,r2,8111b788 <__subdf3+0x848>
8111b3ec:	01000804 	movi	r4,32
8111b3f0:	2089c83a 	sub	r4,r4,r2
8111b3f4:	1914983a 	sll	r10,r3,r4
8111b3f8:	8890d83a 	srl	r8,r17,r2
8111b3fc:	8908983a 	sll	r4,r17,r4
8111b400:	1884d83a 	srl	r2,r3,r2
8111b404:	5222b03a 	or	r17,r10,r8
8111b408:	2006c03a 	cmpne	r3,r4,zero
8111b40c:	88e2b03a 	or	r17,r17,r3
8111b410:	3463c83a 	sub	r17,r6,r17
8111b414:	2885c83a 	sub	r2,r5,r2
8111b418:	344d803a 	cmpltu	r6,r6,r17
8111b41c:	1187c83a 	sub	r3,r2,r6
8111b420:	4821883a 	mov	r16,r9
8111b424:	3825883a 	mov	r18,r7
8111b428:	003f2306 	br	8111b0b8 <__reset+0xfb0fb0b8>
8111b42c:	24d0b03a 	or	r8,r4,r19
8111b430:	40001b1e 	bne	r8,zero,8111b4a0 <__subdf3+0x560>
8111b434:	0005883a 	mov	r2,zero
8111b438:	0009883a 	mov	r4,zero
8111b43c:	0021883a 	mov	r16,zero
8111b440:	003f4906 	br	8111b168 <__reset+0xfb0fb168>
8111b444:	010007c4 	movi	r4,31
8111b448:	20803a16 	blt	r4,r2,8111b534 <__subdf3+0x5f4>
8111b44c:	01000804 	movi	r4,32
8111b450:	2089c83a 	sub	r4,r4,r2
8111b454:	2912983a 	sll	r9,r5,r4
8111b458:	3090d83a 	srl	r8,r6,r2
8111b45c:	3108983a 	sll	r4,r6,r4
8111b460:	2884d83a 	srl	r2,r5,r2
8111b464:	4a12b03a 	or	r9,r9,r8
8111b468:	2008c03a 	cmpne	r4,r4,zero
8111b46c:	4912b03a 	or	r9,r9,r4
8111b470:	003f4e06 	br	8111b1ac <__reset+0xfb0fb1ac>
8111b474:	1c48b03a 	or	r4,r3,r17
8111b478:	20003c26 	beq	r4,zero,8111b56c <__subdf3+0x62c>
8111b47c:	0084303a 	nor	r2,zero,r2
8111b480:	1000381e 	bne	r2,zero,8111b564 <__subdf3+0x624>
8111b484:	3463c83a 	sub	r17,r6,r17
8111b488:	28c5c83a 	sub	r2,r5,r3
8111b48c:	344d803a 	cmpltu	r6,r6,r17
8111b490:	1187c83a 	sub	r3,r2,r6
8111b494:	4821883a 	mov	r16,r9
8111b498:	3825883a 	mov	r18,r7
8111b49c:	003f0606 	br	8111b0b8 <__reset+0xfb0fb0b8>
8111b4a0:	2023883a 	mov	r17,r4
8111b4a4:	003f0906 	br	8111b0cc <__reset+0xfb0fb0cc>
8111b4a8:	0101ffc4 	movi	r4,2047
8111b4ac:	813f3a1e 	bne	r16,r4,8111b198 <__reset+0xfb0fb198>
8111b4b0:	003ec406 	br	8111afc4 <__reset+0xfb0fafc4>
8111b4b4:	0005883a 	mov	r2,zero
8111b4b8:	003fb106 	br	8111b380 <__reset+0xfb0fb380>
8111b4bc:	0005883a 	mov	r2,zero
8111b4c0:	003fbc06 	br	8111b3b4 <__reset+0xfb0fb3b4>
8111b4c4:	1c44b03a 	or	r2,r3,r17
8111b4c8:	80008e1e 	bne	r16,zero,8111b704 <__subdf3+0x7c4>
8111b4cc:	1000c826 	beq	r2,zero,8111b7f0 <__subdf3+0x8b0>
8111b4d0:	2984b03a 	or	r2,r5,r6
8111b4d4:	103ebb26 	beq	r2,zero,8111afc4 <__reset+0xfb0fafc4>
8111b4d8:	8989883a 	add	r4,r17,r6
8111b4dc:	1945883a 	add	r2,r3,r5
8111b4e0:	2447803a 	cmpltu	r3,r4,r17
8111b4e4:	1887883a 	add	r3,r3,r2
8111b4e8:	1880202c 	andhi	r2,r3,128
8111b4ec:	2023883a 	mov	r17,r4
8111b4f0:	103f1626 	beq	r2,zero,8111b14c <__reset+0xfb0fb14c>
8111b4f4:	00bfe034 	movhi	r2,65408
8111b4f8:	10bfffc4 	addi	r2,r2,-1
8111b4fc:	5021883a 	mov	r16,r10
8111b500:	1886703a 	and	r3,r3,r2
8111b504:	003eaf06 	br	8111afc4 <__reset+0xfb0fafc4>
8111b508:	3825883a 	mov	r18,r7
8111b50c:	003f0f06 	br	8111b14c <__reset+0xfb0fb14c>
8111b510:	1c44b03a 	or	r2,r3,r17
8111b514:	8000251e 	bne	r16,zero,8111b5ac <__subdf3+0x66c>
8111b518:	1000661e 	bne	r2,zero,8111b6b4 <__subdf3+0x774>
8111b51c:	2990b03a 	or	r8,r5,r6
8111b520:	40009626 	beq	r8,zero,8111b77c <__subdf3+0x83c>
8111b524:	2807883a 	mov	r3,r5
8111b528:	3023883a 	mov	r17,r6
8111b52c:	3825883a 	mov	r18,r7
8111b530:	003ea406 	br	8111afc4 <__reset+0xfb0fafc4>
8111b534:	127ff804 	addi	r9,r2,-32
8111b538:	01000804 	movi	r4,32
8111b53c:	2a52d83a 	srl	r9,r5,r9
8111b540:	11008c26 	beq	r2,r4,8111b774 <__subdf3+0x834>
8111b544:	01001004 	movi	r4,64
8111b548:	2085c83a 	sub	r2,r4,r2
8111b54c:	2884983a 	sll	r2,r5,r2
8111b550:	118cb03a 	or	r6,r2,r6
8111b554:	300cc03a 	cmpne	r6,r6,zero
8111b558:	4992b03a 	or	r9,r9,r6
8111b55c:	0005883a 	mov	r2,zero
8111b560:	003f1206 	br	8111b1ac <__reset+0xfb0fb1ac>
8111b564:	0101ffc4 	movi	r4,2047
8111b568:	493f9c1e 	bne	r9,r4,8111b3dc <__reset+0xfb0fb3dc>
8111b56c:	2807883a 	mov	r3,r5
8111b570:	3023883a 	mov	r17,r6
8111b574:	4821883a 	mov	r16,r9
8111b578:	3825883a 	mov	r18,r7
8111b57c:	003e9106 	br	8111afc4 <__reset+0xfb0fafc4>
8111b580:	80001f1e 	bne	r16,zero,8111b600 <__subdf3+0x6c0>
8111b584:	1c48b03a 	or	r4,r3,r17
8111b588:	20005a26 	beq	r4,zero,8111b6f4 <__subdf3+0x7b4>
8111b58c:	0084303a 	nor	r2,zero,r2
8111b590:	1000561e 	bne	r2,zero,8111b6ec <__subdf3+0x7ac>
8111b594:	89a3883a 	add	r17,r17,r6
8111b598:	1945883a 	add	r2,r3,r5
8111b59c:	898d803a 	cmpltu	r6,r17,r6
8111b5a0:	3087883a 	add	r3,r6,r2
8111b5a4:	4821883a 	mov	r16,r9
8111b5a8:	003f0506 	br	8111b1c0 <__reset+0xfb0fb1c0>
8111b5ac:	10002b1e 	bne	r2,zero,8111b65c <__subdf3+0x71c>
8111b5b0:	2984b03a 	or	r2,r5,r6
8111b5b4:	10008026 	beq	r2,zero,8111b7b8 <__subdf3+0x878>
8111b5b8:	2807883a 	mov	r3,r5
8111b5bc:	3023883a 	mov	r17,r6
8111b5c0:	3825883a 	mov	r18,r7
8111b5c4:	0401ffc4 	movi	r16,2047
8111b5c8:	003e7e06 	br	8111afc4 <__reset+0xfb0fafc4>
8111b5cc:	3809883a 	mov	r4,r7
8111b5d0:	0011883a 	mov	r8,zero
8111b5d4:	0005883a 	mov	r2,zero
8111b5d8:	003ee306 	br	8111b168 <__reset+0xfb0fb168>
8111b5dc:	1c62b03a 	or	r17,r3,r17
8111b5e0:	8822c03a 	cmpne	r17,r17,zero
8111b5e4:	0005883a 	mov	r2,zero
8111b5e8:	003f8906 	br	8111b410 <__reset+0xfb0fb410>
8111b5ec:	3809883a 	mov	r4,r7
8111b5f0:	4821883a 	mov	r16,r9
8111b5f4:	0011883a 	mov	r8,zero
8111b5f8:	0005883a 	mov	r2,zero
8111b5fc:	003eda06 	br	8111b168 <__reset+0xfb0fb168>
8111b600:	0101ffc4 	movi	r4,2047
8111b604:	49003b26 	beq	r9,r4,8111b6f4 <__subdf3+0x7b4>
8111b608:	0085c83a 	sub	r2,zero,r2
8111b60c:	18c02034 	orhi	r3,r3,128
8111b610:	01000e04 	movi	r4,56
8111b614:	20806e16 	blt	r4,r2,8111b7d0 <__subdf3+0x890>
8111b618:	010007c4 	movi	r4,31
8111b61c:	20807716 	blt	r4,r2,8111b7fc <__subdf3+0x8bc>
8111b620:	01000804 	movi	r4,32
8111b624:	2089c83a 	sub	r4,r4,r2
8111b628:	1914983a 	sll	r10,r3,r4
8111b62c:	8890d83a 	srl	r8,r17,r2
8111b630:	8908983a 	sll	r4,r17,r4
8111b634:	1884d83a 	srl	r2,r3,r2
8111b638:	5222b03a 	or	r17,r10,r8
8111b63c:	2006c03a 	cmpne	r3,r4,zero
8111b640:	88e2b03a 	or	r17,r17,r3
8111b644:	89a3883a 	add	r17,r17,r6
8111b648:	1145883a 	add	r2,r2,r5
8111b64c:	898d803a 	cmpltu	r6,r17,r6
8111b650:	3087883a 	add	r3,r6,r2
8111b654:	4821883a 	mov	r16,r9
8111b658:	003ed906 	br	8111b1c0 <__reset+0xfb0fb1c0>
8111b65c:	2984b03a 	or	r2,r5,r6
8111b660:	10004226 	beq	r2,zero,8111b76c <__subdf3+0x82c>
8111b664:	1808d0fa 	srli	r4,r3,3
8111b668:	8822d0fa 	srli	r17,r17,3
8111b66c:	1806977a 	slli	r3,r3,29
8111b670:	2080022c 	andhi	r2,r4,8
8111b674:	1c62b03a 	or	r17,r3,r17
8111b678:	10000826 	beq	r2,zero,8111b69c <__subdf3+0x75c>
8111b67c:	2812d0fa 	srli	r9,r5,3
8111b680:	4880022c 	andhi	r2,r9,8
8111b684:	1000051e 	bne	r2,zero,8111b69c <__subdf3+0x75c>
8111b688:	300cd0fa 	srli	r6,r6,3
8111b68c:	2804977a 	slli	r2,r5,29
8111b690:	4809883a 	mov	r4,r9
8111b694:	3825883a 	mov	r18,r7
8111b698:	11a2b03a 	or	r17,r2,r6
8111b69c:	8806d77a 	srli	r3,r17,29
8111b6a0:	200890fa 	slli	r4,r4,3
8111b6a4:	882290fa 	slli	r17,r17,3
8111b6a8:	0401ffc4 	movi	r16,2047
8111b6ac:	1906b03a 	or	r3,r3,r4
8111b6b0:	003e4406 	br	8111afc4 <__reset+0xfb0fafc4>
8111b6b4:	2984b03a 	or	r2,r5,r6
8111b6b8:	103e4226 	beq	r2,zero,8111afc4 <__reset+0xfb0fafc4>
8111b6bc:	8989c83a 	sub	r4,r17,r6
8111b6c0:	8911803a 	cmpltu	r8,r17,r4
8111b6c4:	1945c83a 	sub	r2,r3,r5
8111b6c8:	1205c83a 	sub	r2,r2,r8
8111b6cc:	1200202c 	andhi	r8,r2,128
8111b6d0:	403e9a26 	beq	r8,zero,8111b13c <__reset+0xfb0fb13c>
8111b6d4:	3463c83a 	sub	r17,r6,r17
8111b6d8:	28c5c83a 	sub	r2,r5,r3
8111b6dc:	344d803a 	cmpltu	r6,r6,r17
8111b6e0:	1187c83a 	sub	r3,r2,r6
8111b6e4:	3825883a 	mov	r18,r7
8111b6e8:	003e3606 	br	8111afc4 <__reset+0xfb0fafc4>
8111b6ec:	0101ffc4 	movi	r4,2047
8111b6f0:	493fc71e 	bne	r9,r4,8111b610 <__reset+0xfb0fb610>
8111b6f4:	2807883a 	mov	r3,r5
8111b6f8:	3023883a 	mov	r17,r6
8111b6fc:	4821883a 	mov	r16,r9
8111b700:	003e3006 	br	8111afc4 <__reset+0xfb0fafc4>
8111b704:	10003626 	beq	r2,zero,8111b7e0 <__subdf3+0x8a0>
8111b708:	2984b03a 	or	r2,r5,r6
8111b70c:	10001726 	beq	r2,zero,8111b76c <__subdf3+0x82c>
8111b710:	1808d0fa 	srli	r4,r3,3
8111b714:	8822d0fa 	srli	r17,r17,3
8111b718:	1806977a 	slli	r3,r3,29
8111b71c:	2080022c 	andhi	r2,r4,8
8111b720:	1c62b03a 	or	r17,r3,r17
8111b724:	10000726 	beq	r2,zero,8111b744 <__subdf3+0x804>
8111b728:	2812d0fa 	srli	r9,r5,3
8111b72c:	4880022c 	andhi	r2,r9,8
8111b730:	1000041e 	bne	r2,zero,8111b744 <__subdf3+0x804>
8111b734:	300cd0fa 	srli	r6,r6,3
8111b738:	2804977a 	slli	r2,r5,29
8111b73c:	4809883a 	mov	r4,r9
8111b740:	11a2b03a 	or	r17,r2,r6
8111b744:	8806d77a 	srli	r3,r17,29
8111b748:	200890fa 	slli	r4,r4,3
8111b74c:	882290fa 	slli	r17,r17,3
8111b750:	3825883a 	mov	r18,r7
8111b754:	1906b03a 	or	r3,r3,r4
8111b758:	0401ffc4 	movi	r16,2047
8111b75c:	003e1906 	br	8111afc4 <__reset+0xfb0fafc4>
8111b760:	000b883a 	mov	r5,zero
8111b764:	0005883a 	mov	r2,zero
8111b768:	003e2e06 	br	8111b024 <__reset+0xfb0fb024>
8111b76c:	0401ffc4 	movi	r16,2047
8111b770:	003e1406 	br	8111afc4 <__reset+0xfb0fafc4>
8111b774:	0005883a 	mov	r2,zero
8111b778:	003f7506 	br	8111b550 <__reset+0xfb0fb550>
8111b77c:	0005883a 	mov	r2,zero
8111b780:	0009883a 	mov	r4,zero
8111b784:	003e7806 	br	8111b168 <__reset+0xfb0fb168>
8111b788:	123ff804 	addi	r8,r2,-32
8111b78c:	01000804 	movi	r4,32
8111b790:	1a10d83a 	srl	r8,r3,r8
8111b794:	11002526 	beq	r2,r4,8111b82c <__subdf3+0x8ec>
8111b798:	01001004 	movi	r4,64
8111b79c:	2085c83a 	sub	r2,r4,r2
8111b7a0:	1884983a 	sll	r2,r3,r2
8111b7a4:	1444b03a 	or	r2,r2,r17
8111b7a8:	1004c03a 	cmpne	r2,r2,zero
8111b7ac:	40a2b03a 	or	r17,r8,r2
8111b7b0:	0005883a 	mov	r2,zero
8111b7b4:	003f1606 	br	8111b410 <__reset+0xfb0fb410>
8111b7b8:	02000434 	movhi	r8,16
8111b7bc:	0009883a 	mov	r4,zero
8111b7c0:	423fffc4 	addi	r8,r8,-1
8111b7c4:	00bfffc4 	movi	r2,-1
8111b7c8:	0401ffc4 	movi	r16,2047
8111b7cc:	003e6606 	br	8111b168 <__reset+0xfb0fb168>
8111b7d0:	1c62b03a 	or	r17,r3,r17
8111b7d4:	8822c03a 	cmpne	r17,r17,zero
8111b7d8:	0005883a 	mov	r2,zero
8111b7dc:	003f9906 	br	8111b644 <__reset+0xfb0fb644>
8111b7e0:	2807883a 	mov	r3,r5
8111b7e4:	3023883a 	mov	r17,r6
8111b7e8:	0401ffc4 	movi	r16,2047
8111b7ec:	003df506 	br	8111afc4 <__reset+0xfb0fafc4>
8111b7f0:	2807883a 	mov	r3,r5
8111b7f4:	3023883a 	mov	r17,r6
8111b7f8:	003df206 	br	8111afc4 <__reset+0xfb0fafc4>
8111b7fc:	123ff804 	addi	r8,r2,-32
8111b800:	01000804 	movi	r4,32
8111b804:	1a10d83a 	srl	r8,r3,r8
8111b808:	11000a26 	beq	r2,r4,8111b834 <__subdf3+0x8f4>
8111b80c:	01001004 	movi	r4,64
8111b810:	2085c83a 	sub	r2,r4,r2
8111b814:	1884983a 	sll	r2,r3,r2
8111b818:	1444b03a 	or	r2,r2,r17
8111b81c:	1004c03a 	cmpne	r2,r2,zero
8111b820:	40a2b03a 	or	r17,r8,r2
8111b824:	0005883a 	mov	r2,zero
8111b828:	003f8606 	br	8111b644 <__reset+0xfb0fb644>
8111b82c:	0005883a 	mov	r2,zero
8111b830:	003fdc06 	br	8111b7a4 <__reset+0xfb0fb7a4>
8111b834:	0005883a 	mov	r2,zero
8111b838:	003ff706 	br	8111b818 <__reset+0xfb0fb818>

8111b83c <__fixdfsi>:
8111b83c:	280cd53a 	srli	r6,r5,20
8111b840:	00c00434 	movhi	r3,16
8111b844:	18ffffc4 	addi	r3,r3,-1
8111b848:	3181ffcc 	andi	r6,r6,2047
8111b84c:	01c0ff84 	movi	r7,1022
8111b850:	28c6703a 	and	r3,r5,r3
8111b854:	280ad7fa 	srli	r5,r5,31
8111b858:	3980120e 	bge	r7,r6,8111b8a4 <__fixdfsi+0x68>
8111b85c:	00810744 	movi	r2,1053
8111b860:	11800c16 	blt	r2,r6,8111b894 <__fixdfsi+0x58>
8111b864:	00810cc4 	movi	r2,1075
8111b868:	1185c83a 	sub	r2,r2,r6
8111b86c:	01c007c4 	movi	r7,31
8111b870:	18c00434 	orhi	r3,r3,16
8111b874:	38800d16 	blt	r7,r2,8111b8ac <__fixdfsi+0x70>
8111b878:	31befb44 	addi	r6,r6,-1043
8111b87c:	2084d83a 	srl	r2,r4,r2
8111b880:	1986983a 	sll	r3,r3,r6
8111b884:	1884b03a 	or	r2,r3,r2
8111b888:	28000726 	beq	r5,zero,8111b8a8 <__fixdfsi+0x6c>
8111b88c:	0085c83a 	sub	r2,zero,r2
8111b890:	f800283a 	ret
8111b894:	00a00034 	movhi	r2,32768
8111b898:	10bfffc4 	addi	r2,r2,-1
8111b89c:	2885883a 	add	r2,r5,r2
8111b8a0:	f800283a 	ret
8111b8a4:	0005883a 	mov	r2,zero
8111b8a8:	f800283a 	ret
8111b8ac:	008104c4 	movi	r2,1043
8111b8b0:	1185c83a 	sub	r2,r2,r6
8111b8b4:	1884d83a 	srl	r2,r3,r2
8111b8b8:	003ff306 	br	8111b888 <__reset+0xfb0fb888>

8111b8bc <__floatsidf>:
8111b8bc:	defffd04 	addi	sp,sp,-12
8111b8c0:	dfc00215 	stw	ra,8(sp)
8111b8c4:	dc400115 	stw	r17,4(sp)
8111b8c8:	dc000015 	stw	r16,0(sp)
8111b8cc:	20002b26 	beq	r4,zero,8111b97c <__floatsidf+0xc0>
8111b8d0:	2023883a 	mov	r17,r4
8111b8d4:	2020d7fa 	srli	r16,r4,31
8111b8d8:	20002d16 	blt	r4,zero,8111b990 <__floatsidf+0xd4>
8111b8dc:	8809883a 	mov	r4,r17
8111b8e0:	110b77c0 	call	8110b77c <__clzsi2>
8111b8e4:	01410784 	movi	r5,1054
8111b8e8:	288bc83a 	sub	r5,r5,r2
8111b8ec:	01010cc4 	movi	r4,1075
8111b8f0:	2149c83a 	sub	r4,r4,r5
8111b8f4:	00c007c4 	movi	r3,31
8111b8f8:	1900160e 	bge	r3,r4,8111b954 <__floatsidf+0x98>
8111b8fc:	00c104c4 	movi	r3,1043
8111b900:	1947c83a 	sub	r3,r3,r5
8111b904:	88c6983a 	sll	r3,r17,r3
8111b908:	00800434 	movhi	r2,16
8111b90c:	10bfffc4 	addi	r2,r2,-1
8111b910:	1886703a 	and	r3,r3,r2
8111b914:	2941ffcc 	andi	r5,r5,2047
8111b918:	800d883a 	mov	r6,r16
8111b91c:	0005883a 	mov	r2,zero
8111b920:	280a953a 	slli	r5,r5,20
8111b924:	31803fcc 	andi	r6,r6,255
8111b928:	01000434 	movhi	r4,16
8111b92c:	300c97fa 	slli	r6,r6,31
8111b930:	213fffc4 	addi	r4,r4,-1
8111b934:	1906703a 	and	r3,r3,r4
8111b938:	1946b03a 	or	r3,r3,r5
8111b93c:	1986b03a 	or	r3,r3,r6
8111b940:	dfc00217 	ldw	ra,8(sp)
8111b944:	dc400117 	ldw	r17,4(sp)
8111b948:	dc000017 	ldw	r16,0(sp)
8111b94c:	dec00304 	addi	sp,sp,12
8111b950:	f800283a 	ret
8111b954:	00c002c4 	movi	r3,11
8111b958:	1887c83a 	sub	r3,r3,r2
8111b95c:	88c6d83a 	srl	r3,r17,r3
8111b960:	8904983a 	sll	r2,r17,r4
8111b964:	01000434 	movhi	r4,16
8111b968:	213fffc4 	addi	r4,r4,-1
8111b96c:	2941ffcc 	andi	r5,r5,2047
8111b970:	1906703a 	and	r3,r3,r4
8111b974:	800d883a 	mov	r6,r16
8111b978:	003fe906 	br	8111b920 <__reset+0xfb0fb920>
8111b97c:	000d883a 	mov	r6,zero
8111b980:	000b883a 	mov	r5,zero
8111b984:	0007883a 	mov	r3,zero
8111b988:	0005883a 	mov	r2,zero
8111b98c:	003fe406 	br	8111b920 <__reset+0xfb0fb920>
8111b990:	0123c83a 	sub	r17,zero,r4
8111b994:	003fd106 	br	8111b8dc <__reset+0xfb0fb8dc>

8111b998 <__floatunsidf>:
8111b998:	defffe04 	addi	sp,sp,-8
8111b99c:	dc000015 	stw	r16,0(sp)
8111b9a0:	dfc00115 	stw	ra,4(sp)
8111b9a4:	2021883a 	mov	r16,r4
8111b9a8:	20002226 	beq	r4,zero,8111ba34 <__floatunsidf+0x9c>
8111b9ac:	110b77c0 	call	8110b77c <__clzsi2>
8111b9b0:	01010784 	movi	r4,1054
8111b9b4:	2089c83a 	sub	r4,r4,r2
8111b9b8:	01810cc4 	movi	r6,1075
8111b9bc:	310dc83a 	sub	r6,r6,r4
8111b9c0:	00c007c4 	movi	r3,31
8111b9c4:	1980120e 	bge	r3,r6,8111ba10 <__floatunsidf+0x78>
8111b9c8:	00c104c4 	movi	r3,1043
8111b9cc:	1907c83a 	sub	r3,r3,r4
8111b9d0:	80ca983a 	sll	r5,r16,r3
8111b9d4:	00800434 	movhi	r2,16
8111b9d8:	10bfffc4 	addi	r2,r2,-1
8111b9dc:	2101ffcc 	andi	r4,r4,2047
8111b9e0:	0021883a 	mov	r16,zero
8111b9e4:	288a703a 	and	r5,r5,r2
8111b9e8:	2008953a 	slli	r4,r4,20
8111b9ec:	00c00434 	movhi	r3,16
8111b9f0:	18ffffc4 	addi	r3,r3,-1
8111b9f4:	28c6703a 	and	r3,r5,r3
8111b9f8:	8005883a 	mov	r2,r16
8111b9fc:	1906b03a 	or	r3,r3,r4
8111ba00:	dfc00117 	ldw	ra,4(sp)
8111ba04:	dc000017 	ldw	r16,0(sp)
8111ba08:	dec00204 	addi	sp,sp,8
8111ba0c:	f800283a 	ret
8111ba10:	00c002c4 	movi	r3,11
8111ba14:	188bc83a 	sub	r5,r3,r2
8111ba18:	814ad83a 	srl	r5,r16,r5
8111ba1c:	00c00434 	movhi	r3,16
8111ba20:	18ffffc4 	addi	r3,r3,-1
8111ba24:	81a0983a 	sll	r16,r16,r6
8111ba28:	2101ffcc 	andi	r4,r4,2047
8111ba2c:	28ca703a 	and	r5,r5,r3
8111ba30:	003fed06 	br	8111b9e8 <__reset+0xfb0fb9e8>
8111ba34:	0009883a 	mov	r4,zero
8111ba38:	000b883a 	mov	r5,zero
8111ba3c:	003fea06 	br	8111b9e8 <__reset+0xfb0fb9e8>

8111ba40 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
8111ba40:	defffb04 	addi	sp,sp,-20
8111ba44:	df000415 	stw	fp,16(sp)
8111ba48:	df000404 	addi	fp,sp,16
8111ba4c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
8111ba50:	008000c4 	movi	r2,3
8111ba54:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
8111ba58:	e0fffd17 	ldw	r3,-12(fp)
8111ba5c:	008003f4 	movhi	r2,15
8111ba60:	10909004 	addi	r2,r2,16960
8111ba64:	1887383a 	mul	r3,r3,r2
8111ba68:	00817db4 	movhi	r2,1526
8111ba6c:	10b84004 	addi	r2,r2,-7936
8111ba70:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
8111ba74:	00a00034 	movhi	r2,32768
8111ba78:	10bfffc4 	addi	r2,r2,-1
8111ba7c:	10c5203a 	divu	r2,r2,r3
8111ba80:	e0ffff17 	ldw	r3,-4(fp)
8111ba84:	1885203a 	divu	r2,r3,r2
8111ba88:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
8111ba8c:	e0bffe17 	ldw	r2,-8(fp)
8111ba90:	10002526 	beq	r2,zero,8111bb28 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
8111ba94:	e03ffc15 	stw	zero,-16(fp)
8111ba98:	00001406 	br	8111baec <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
8111ba9c:	00a00034 	movhi	r2,32768
8111baa0:	10bfffc4 	addi	r2,r2,-1
8111baa4:	10bfffc4 	addi	r2,r2,-1
8111baa8:	103ffe1e 	bne	r2,zero,8111baa4 <__reset+0xfb0fbaa4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
8111baac:	e0fffd17 	ldw	r3,-12(fp)
8111bab0:	008003f4 	movhi	r2,15
8111bab4:	10909004 	addi	r2,r2,16960
8111bab8:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
8111babc:	00817db4 	movhi	r2,1526
8111bac0:	10b84004 	addi	r2,r2,-7936
8111bac4:	10c7203a 	divu	r3,r2,r3
8111bac8:	00a00034 	movhi	r2,32768
8111bacc:	10bfffc4 	addi	r2,r2,-1
8111bad0:	10c5203a 	divu	r2,r2,r3
8111bad4:	e0ffff17 	ldw	r3,-4(fp)
8111bad8:	1885c83a 	sub	r2,r3,r2
8111badc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
8111bae0:	e0bffc17 	ldw	r2,-16(fp)
8111bae4:	10800044 	addi	r2,r2,1
8111bae8:	e0bffc15 	stw	r2,-16(fp)
8111baec:	e0fffc17 	ldw	r3,-16(fp)
8111baf0:	e0bffe17 	ldw	r2,-8(fp)
8111baf4:	18bfe916 	blt	r3,r2,8111ba9c <__reset+0xfb0fba9c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
8111baf8:	e0fffd17 	ldw	r3,-12(fp)
8111bafc:	008003f4 	movhi	r2,15
8111bb00:	10909004 	addi	r2,r2,16960
8111bb04:	1887383a 	mul	r3,r3,r2
8111bb08:	00817db4 	movhi	r2,1526
8111bb0c:	10b84004 	addi	r2,r2,-7936
8111bb10:	10c7203a 	divu	r3,r2,r3
8111bb14:	e0bfff17 	ldw	r2,-4(fp)
8111bb18:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8111bb1c:	10bfffc4 	addi	r2,r2,-1
8111bb20:	103ffe1e 	bne	r2,zero,8111bb1c <__reset+0xfb0fbb1c>
8111bb24:	00000b06 	br	8111bb54 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
8111bb28:	e0fffd17 	ldw	r3,-12(fp)
8111bb2c:	008003f4 	movhi	r2,15
8111bb30:	10909004 	addi	r2,r2,16960
8111bb34:	1887383a 	mul	r3,r3,r2
8111bb38:	00817db4 	movhi	r2,1526
8111bb3c:	10b84004 	addi	r2,r2,-7936
8111bb40:	10c7203a 	divu	r3,r2,r3
8111bb44:	e0bfff17 	ldw	r2,-4(fp)
8111bb48:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8111bb4c:	10bfffc4 	addi	r2,r2,-1
8111bb50:	00bffe16 	blt	zero,r2,8111bb4c <__reset+0xfb0fbb4c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
8111bb54:	0005883a 	mov	r2,zero
}
8111bb58:	e037883a 	mov	sp,fp
8111bb5c:	df000017 	ldw	fp,0(sp)
8111bb60:	dec00104 	addi	sp,sp,4
8111bb64:	f800283a 	ret

8111bb68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111bb68:	defffe04 	addi	sp,sp,-8
8111bb6c:	dfc00115 	stw	ra,4(sp)
8111bb70:	df000015 	stw	fp,0(sp)
8111bb74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111bb78:	d0a00d17 	ldw	r2,-32716(gp)
8111bb7c:	10000326 	beq	r2,zero,8111bb8c <alt_get_errno+0x24>
8111bb80:	d0a00d17 	ldw	r2,-32716(gp)
8111bb84:	103ee83a 	callr	r2
8111bb88:	00000106 	br	8111bb90 <alt_get_errno+0x28>
8111bb8c:	d0a02804 	addi	r2,gp,-32608
}
8111bb90:	e037883a 	mov	sp,fp
8111bb94:	dfc00117 	ldw	ra,4(sp)
8111bb98:	df000017 	ldw	fp,0(sp)
8111bb9c:	dec00204 	addi	sp,sp,8
8111bba0:	f800283a 	ret

8111bba4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
8111bba4:	defffb04 	addi	sp,sp,-20
8111bba8:	dfc00415 	stw	ra,16(sp)
8111bbac:	df000315 	stw	fp,12(sp)
8111bbb0:	df000304 	addi	fp,sp,12
8111bbb4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
8111bbb8:	e0bfff17 	ldw	r2,-4(fp)
8111bbbc:	10000616 	blt	r2,zero,8111bbd8 <close+0x34>
8111bbc0:	e0bfff17 	ldw	r2,-4(fp)
8111bbc4:	10c00324 	muli	r3,r2,12
8111bbc8:	00a044b4 	movhi	r2,33042
8111bbcc:	108c2804 	addi	r2,r2,12448
8111bbd0:	1885883a 	add	r2,r3,r2
8111bbd4:	00000106 	br	8111bbdc <close+0x38>
8111bbd8:	0005883a 	mov	r2,zero
8111bbdc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
8111bbe0:	e0bffd17 	ldw	r2,-12(fp)
8111bbe4:	10001926 	beq	r2,zero,8111bc4c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
8111bbe8:	e0bffd17 	ldw	r2,-12(fp)
8111bbec:	10800017 	ldw	r2,0(r2)
8111bbf0:	10800417 	ldw	r2,16(r2)
8111bbf4:	10000626 	beq	r2,zero,8111bc10 <close+0x6c>
8111bbf8:	e0bffd17 	ldw	r2,-12(fp)
8111bbfc:	10800017 	ldw	r2,0(r2)
8111bc00:	10800417 	ldw	r2,16(r2)
8111bc04:	e13ffd17 	ldw	r4,-12(fp)
8111bc08:	103ee83a 	callr	r2
8111bc0c:	00000106 	br	8111bc14 <close+0x70>
8111bc10:	0005883a 	mov	r2,zero
8111bc14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
8111bc18:	e13fff17 	ldw	r4,-4(fp)
8111bc1c:	111c56c0 	call	8111c56c <alt_release_fd>
    if (rval < 0)
8111bc20:	e0bffe17 	ldw	r2,-8(fp)
8111bc24:	1000070e 	bge	r2,zero,8111bc44 <close+0xa0>
    {
      ALT_ERRNO = -rval;
8111bc28:	111bb680 	call	8111bb68 <alt_get_errno>
8111bc2c:	1007883a 	mov	r3,r2
8111bc30:	e0bffe17 	ldw	r2,-8(fp)
8111bc34:	0085c83a 	sub	r2,zero,r2
8111bc38:	18800015 	stw	r2,0(r3)
      return -1;
8111bc3c:	00bfffc4 	movi	r2,-1
8111bc40:	00000706 	br	8111bc60 <close+0xbc>
    }
    return 0;
8111bc44:	0005883a 	mov	r2,zero
8111bc48:	00000506 	br	8111bc60 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
8111bc4c:	111bb680 	call	8111bb68 <alt_get_errno>
8111bc50:	1007883a 	mov	r3,r2
8111bc54:	00801444 	movi	r2,81
8111bc58:	18800015 	stw	r2,0(r3)
    return -1;
8111bc5c:	00bfffc4 	movi	r2,-1
  }
}
8111bc60:	e037883a 	mov	sp,fp
8111bc64:	dfc00117 	ldw	ra,4(sp)
8111bc68:	df000017 	ldw	fp,0(sp)
8111bc6c:	dec00204 	addi	sp,sp,8
8111bc70:	f800283a 	ret

8111bc74 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
8111bc74:	deffff04 	addi	sp,sp,-4
8111bc78:	df000015 	stw	fp,0(sp)
8111bc7c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8111bc80:	0001883a 	nop
8111bc84:	e037883a 	mov	sp,fp
8111bc88:	df000017 	ldw	fp,0(sp)
8111bc8c:	dec00104 	addi	sp,sp,4
8111bc90:	f800283a 	ret

8111bc94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
8111bc94:	defffc04 	addi	sp,sp,-16
8111bc98:	df000315 	stw	fp,12(sp)
8111bc9c:	df000304 	addi	fp,sp,12
8111bca0:	e13ffd15 	stw	r4,-12(fp)
8111bca4:	e17ffe15 	stw	r5,-8(fp)
8111bca8:	e1bfff15 	stw	r6,-4(fp)
  return len;
8111bcac:	e0bfff17 	ldw	r2,-4(fp)
}
8111bcb0:	e037883a 	mov	sp,fp
8111bcb4:	df000017 	ldw	fp,0(sp)
8111bcb8:	dec00104 	addi	sp,sp,4
8111bcbc:	f800283a 	ret

8111bcc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111bcc0:	defffe04 	addi	sp,sp,-8
8111bcc4:	dfc00115 	stw	ra,4(sp)
8111bcc8:	df000015 	stw	fp,0(sp)
8111bccc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111bcd0:	d0a00d17 	ldw	r2,-32716(gp)
8111bcd4:	10000326 	beq	r2,zero,8111bce4 <alt_get_errno+0x24>
8111bcd8:	d0a00d17 	ldw	r2,-32716(gp)
8111bcdc:	103ee83a 	callr	r2
8111bce0:	00000106 	br	8111bce8 <alt_get_errno+0x28>
8111bce4:	d0a02804 	addi	r2,gp,-32608
}
8111bce8:	e037883a 	mov	sp,fp
8111bcec:	dfc00117 	ldw	ra,4(sp)
8111bcf0:	df000017 	ldw	fp,0(sp)
8111bcf4:	dec00204 	addi	sp,sp,8
8111bcf8:	f800283a 	ret

8111bcfc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8111bcfc:	defffb04 	addi	sp,sp,-20
8111bd00:	dfc00415 	stw	ra,16(sp)
8111bd04:	df000315 	stw	fp,12(sp)
8111bd08:	df000304 	addi	fp,sp,12
8111bd0c:	e13ffe15 	stw	r4,-8(fp)
8111bd10:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111bd14:	e0bffe17 	ldw	r2,-8(fp)
8111bd18:	10000616 	blt	r2,zero,8111bd34 <fstat+0x38>
8111bd1c:	e0bffe17 	ldw	r2,-8(fp)
8111bd20:	10c00324 	muli	r3,r2,12
8111bd24:	00a044b4 	movhi	r2,33042
8111bd28:	108c2804 	addi	r2,r2,12448
8111bd2c:	1885883a 	add	r2,r3,r2
8111bd30:	00000106 	br	8111bd38 <fstat+0x3c>
8111bd34:	0005883a 	mov	r2,zero
8111bd38:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
8111bd3c:	e0bffd17 	ldw	r2,-12(fp)
8111bd40:	10001026 	beq	r2,zero,8111bd84 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
8111bd44:	e0bffd17 	ldw	r2,-12(fp)
8111bd48:	10800017 	ldw	r2,0(r2)
8111bd4c:	10800817 	ldw	r2,32(r2)
8111bd50:	10000726 	beq	r2,zero,8111bd70 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
8111bd54:	e0bffd17 	ldw	r2,-12(fp)
8111bd58:	10800017 	ldw	r2,0(r2)
8111bd5c:	10800817 	ldw	r2,32(r2)
8111bd60:	e17fff17 	ldw	r5,-4(fp)
8111bd64:	e13ffd17 	ldw	r4,-12(fp)
8111bd68:	103ee83a 	callr	r2
8111bd6c:	00000a06 	br	8111bd98 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
8111bd70:	e0bfff17 	ldw	r2,-4(fp)
8111bd74:	00c80004 	movi	r3,8192
8111bd78:	10c00115 	stw	r3,4(r2)
      return 0;
8111bd7c:	0005883a 	mov	r2,zero
8111bd80:	00000506 	br	8111bd98 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8111bd84:	111bcc00 	call	8111bcc0 <alt_get_errno>
8111bd88:	1007883a 	mov	r3,r2
8111bd8c:	00801444 	movi	r2,81
8111bd90:	18800015 	stw	r2,0(r3)
    return -1;
8111bd94:	00bfffc4 	movi	r2,-1
  }
}
8111bd98:	e037883a 	mov	sp,fp
8111bd9c:	dfc00117 	ldw	ra,4(sp)
8111bda0:	df000017 	ldw	fp,0(sp)
8111bda4:	dec00204 	addi	sp,sp,8
8111bda8:	f800283a 	ret

8111bdac <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
8111bdac:	defff004 	addi	sp,sp,-64
8111bdb0:	df000f15 	stw	fp,60(sp)
8111bdb4:	df000f04 	addi	fp,sp,60
8111bdb8:	e13ffd15 	stw	r4,-12(fp)
8111bdbc:	e17ffe15 	stw	r5,-8(fp)
8111bdc0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
8111bdc4:	00bffa84 	movi	r2,-22
8111bdc8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8111bdcc:	e0bffd17 	ldw	r2,-12(fp)
8111bdd0:	10800828 	cmpgeui	r2,r2,32
8111bdd4:	1000501e 	bne	r2,zero,8111bf18 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111bdd8:	0005303a 	rdctl	r2,status
8111bddc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111bde0:	e0fff617 	ldw	r3,-40(fp)
8111bde4:	00bfff84 	movi	r2,-2
8111bde8:	1884703a 	and	r2,r3,r2
8111bdec:	1001703a 	wrctl	status,r2
  
  return context;
8111bdf0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
8111bdf4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
8111bdf8:	00a044b4 	movhi	r2,33042
8111bdfc:	10958c04 	addi	r2,r2,22064
8111be00:	e0fffd17 	ldw	r3,-12(fp)
8111be04:	180690fa 	slli	r3,r3,3
8111be08:	10c5883a 	add	r2,r2,r3
8111be0c:	e0ffff17 	ldw	r3,-4(fp)
8111be10:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
8111be14:	00a044b4 	movhi	r2,33042
8111be18:	10958c04 	addi	r2,r2,22064
8111be1c:	e0fffd17 	ldw	r3,-12(fp)
8111be20:	180690fa 	slli	r3,r3,3
8111be24:	10c5883a 	add	r2,r2,r3
8111be28:	10800104 	addi	r2,r2,4
8111be2c:	e0fffe17 	ldw	r3,-8(fp)
8111be30:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
8111be34:	e0bfff17 	ldw	r2,-4(fp)
8111be38:	10001926 	beq	r2,zero,8111bea0 <alt_irq_register+0xf4>
8111be3c:	e0bffd17 	ldw	r2,-12(fp)
8111be40:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111be44:	0005303a 	rdctl	r2,status
8111be48:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111be4c:	e0fff717 	ldw	r3,-36(fp)
8111be50:	00bfff84 	movi	r2,-2
8111be54:	1884703a 	and	r2,r3,r2
8111be58:	1001703a 	wrctl	status,r2
  
  return context;
8111be5c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8111be60:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
8111be64:	00c00044 	movi	r3,1
8111be68:	e0bff217 	ldw	r2,-56(fp)
8111be6c:	1884983a 	sll	r2,r3,r2
8111be70:	1007883a 	mov	r3,r2
8111be74:	d0a02f17 	ldw	r2,-32580(gp)
8111be78:	1884b03a 	or	r2,r3,r2
8111be7c:	d0a02f15 	stw	r2,-32580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8111be80:	d0a02f17 	ldw	r2,-32580(gp)
8111be84:	100170fa 	wrctl	ienable,r2
8111be88:	e0bff817 	ldw	r2,-32(fp)
8111be8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111be90:	e0bff917 	ldw	r2,-28(fp)
8111be94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8111be98:	0005883a 	mov	r2,zero
8111be9c:	00001906 	br	8111bf04 <alt_irq_register+0x158>
8111bea0:	e0bffd17 	ldw	r2,-12(fp)
8111bea4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111bea8:	0005303a 	rdctl	r2,status
8111beac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111beb0:	e0fffa17 	ldw	r3,-24(fp)
8111beb4:	00bfff84 	movi	r2,-2
8111beb8:	1884703a 	and	r2,r3,r2
8111bebc:	1001703a 	wrctl	status,r2
  
  return context;
8111bec0:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8111bec4:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
8111bec8:	00c00044 	movi	r3,1
8111becc:	e0bff417 	ldw	r2,-48(fp)
8111bed0:	1884983a 	sll	r2,r3,r2
8111bed4:	0084303a 	nor	r2,zero,r2
8111bed8:	1007883a 	mov	r3,r2
8111bedc:	d0a02f17 	ldw	r2,-32580(gp)
8111bee0:	1884703a 	and	r2,r3,r2
8111bee4:	d0a02f15 	stw	r2,-32580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8111bee8:	d0a02f17 	ldw	r2,-32580(gp)
8111beec:	100170fa 	wrctl	ienable,r2
8111bef0:	e0bffb17 	ldw	r2,-20(fp)
8111bef4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111bef8:	e0bffc17 	ldw	r2,-16(fp)
8111befc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8111bf00:	0005883a 	mov	r2,zero
8111bf04:	e0bff115 	stw	r2,-60(fp)
8111bf08:	e0bff317 	ldw	r2,-52(fp)
8111bf0c:	e0bff515 	stw	r2,-44(fp)
8111bf10:	e0bff517 	ldw	r2,-44(fp)
8111bf14:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
8111bf18:	e0bff117 	ldw	r2,-60(fp)
}
8111bf1c:	e037883a 	mov	sp,fp
8111bf20:	df000017 	ldw	fp,0(sp)
8111bf24:	dec00104 	addi	sp,sp,4
8111bf28:	f800283a 	ret

8111bf2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111bf2c:	defffe04 	addi	sp,sp,-8
8111bf30:	dfc00115 	stw	ra,4(sp)
8111bf34:	df000015 	stw	fp,0(sp)
8111bf38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111bf3c:	d0a00d17 	ldw	r2,-32716(gp)
8111bf40:	10000326 	beq	r2,zero,8111bf50 <alt_get_errno+0x24>
8111bf44:	d0a00d17 	ldw	r2,-32716(gp)
8111bf48:	103ee83a 	callr	r2
8111bf4c:	00000106 	br	8111bf54 <alt_get_errno+0x28>
8111bf50:	d0a02804 	addi	r2,gp,-32608
}
8111bf54:	e037883a 	mov	sp,fp
8111bf58:	dfc00117 	ldw	ra,4(sp)
8111bf5c:	df000017 	ldw	fp,0(sp)
8111bf60:	dec00204 	addi	sp,sp,8
8111bf64:	f800283a 	ret

8111bf68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
8111bf68:	deffed04 	addi	sp,sp,-76
8111bf6c:	dfc01215 	stw	ra,72(sp)
8111bf70:	df001115 	stw	fp,68(sp)
8111bf74:	df001104 	addi	fp,sp,68
8111bf78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111bf7c:	e0bfff17 	ldw	r2,-4(fp)
8111bf80:	10000616 	blt	r2,zero,8111bf9c <isatty+0x34>
8111bf84:	e0bfff17 	ldw	r2,-4(fp)
8111bf88:	10c00324 	muli	r3,r2,12
8111bf8c:	00a044b4 	movhi	r2,33042
8111bf90:	108c2804 	addi	r2,r2,12448
8111bf94:	1885883a 	add	r2,r3,r2
8111bf98:	00000106 	br	8111bfa0 <isatty+0x38>
8111bf9c:	0005883a 	mov	r2,zero
8111bfa0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
8111bfa4:	e0bfef17 	ldw	r2,-68(fp)
8111bfa8:	10000e26 	beq	r2,zero,8111bfe4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
8111bfac:	e0bfef17 	ldw	r2,-68(fp)
8111bfb0:	10800017 	ldw	r2,0(r2)
8111bfb4:	10800817 	ldw	r2,32(r2)
8111bfb8:	1000021e 	bne	r2,zero,8111bfc4 <isatty+0x5c>
    {
      return 1;
8111bfbc:	00800044 	movi	r2,1
8111bfc0:	00000d06 	br	8111bff8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
8111bfc4:	e0bff004 	addi	r2,fp,-64
8111bfc8:	100b883a 	mov	r5,r2
8111bfcc:	e13fff17 	ldw	r4,-4(fp)
8111bfd0:	111bcfc0 	call	8111bcfc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
8111bfd4:	e0bff117 	ldw	r2,-60(fp)
8111bfd8:	10880020 	cmpeqi	r2,r2,8192
8111bfdc:	10803fcc 	andi	r2,r2,255
8111bfe0:	00000506 	br	8111bff8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8111bfe4:	111bf2c0 	call	8111bf2c <alt_get_errno>
8111bfe8:	1007883a 	mov	r3,r2
8111bfec:	00801444 	movi	r2,81
8111bff0:	18800015 	stw	r2,0(r3)
    return 0;
8111bff4:	0005883a 	mov	r2,zero
  }
}
8111bff8:	e037883a 	mov	sp,fp
8111bffc:	dfc00117 	ldw	ra,4(sp)
8111c000:	df000017 	ldw	fp,0(sp)
8111c004:	dec00204 	addi	sp,sp,8
8111c008:	f800283a 	ret

8111c00c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111c00c:	defffe04 	addi	sp,sp,-8
8111c010:	dfc00115 	stw	ra,4(sp)
8111c014:	df000015 	stw	fp,0(sp)
8111c018:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111c01c:	d0a00d17 	ldw	r2,-32716(gp)
8111c020:	10000326 	beq	r2,zero,8111c030 <alt_get_errno+0x24>
8111c024:	d0a00d17 	ldw	r2,-32716(gp)
8111c028:	103ee83a 	callr	r2
8111c02c:	00000106 	br	8111c034 <alt_get_errno+0x28>
8111c030:	d0a02804 	addi	r2,gp,-32608
}
8111c034:	e037883a 	mov	sp,fp
8111c038:	dfc00117 	ldw	ra,4(sp)
8111c03c:	df000017 	ldw	fp,0(sp)
8111c040:	dec00204 	addi	sp,sp,8
8111c044:	f800283a 	ret

8111c048 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
8111c048:	defff904 	addi	sp,sp,-28
8111c04c:	dfc00615 	stw	ra,24(sp)
8111c050:	df000515 	stw	fp,20(sp)
8111c054:	df000504 	addi	fp,sp,20
8111c058:	e13ffd15 	stw	r4,-12(fp)
8111c05c:	e17ffe15 	stw	r5,-8(fp)
8111c060:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
8111c064:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111c068:	e0bffd17 	ldw	r2,-12(fp)
8111c06c:	10000616 	blt	r2,zero,8111c088 <lseek+0x40>
8111c070:	e0bffd17 	ldw	r2,-12(fp)
8111c074:	10c00324 	muli	r3,r2,12
8111c078:	00a044b4 	movhi	r2,33042
8111c07c:	108c2804 	addi	r2,r2,12448
8111c080:	1885883a 	add	r2,r3,r2
8111c084:	00000106 	br	8111c08c <lseek+0x44>
8111c088:	0005883a 	mov	r2,zero
8111c08c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
8111c090:	e0bffc17 	ldw	r2,-16(fp)
8111c094:	10001026 	beq	r2,zero,8111c0d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8111c098:	e0bffc17 	ldw	r2,-16(fp)
8111c09c:	10800017 	ldw	r2,0(r2)
8111c0a0:	10800717 	ldw	r2,28(r2)
8111c0a4:	10000926 	beq	r2,zero,8111c0cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8111c0a8:	e0bffc17 	ldw	r2,-16(fp)
8111c0ac:	10800017 	ldw	r2,0(r2)
8111c0b0:	10800717 	ldw	r2,28(r2)
8111c0b4:	e1bfff17 	ldw	r6,-4(fp)
8111c0b8:	e17ffe17 	ldw	r5,-8(fp)
8111c0bc:	e13ffc17 	ldw	r4,-16(fp)
8111c0c0:	103ee83a 	callr	r2
8111c0c4:	e0bffb15 	stw	r2,-20(fp)
8111c0c8:	00000506 	br	8111c0e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
8111c0cc:	00bfde84 	movi	r2,-134
8111c0d0:	e0bffb15 	stw	r2,-20(fp)
8111c0d4:	00000206 	br	8111c0e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
8111c0d8:	00bfebc4 	movi	r2,-81
8111c0dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
8111c0e0:	e0bffb17 	ldw	r2,-20(fp)
8111c0e4:	1000070e 	bge	r2,zero,8111c104 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
8111c0e8:	111c00c0 	call	8111c00c <alt_get_errno>
8111c0ec:	1007883a 	mov	r3,r2
8111c0f0:	e0bffb17 	ldw	r2,-20(fp)
8111c0f4:	0085c83a 	sub	r2,zero,r2
8111c0f8:	18800015 	stw	r2,0(r3)
    rc = -1;
8111c0fc:	00bfffc4 	movi	r2,-1
8111c100:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
8111c104:	e0bffb17 	ldw	r2,-20(fp)
}
8111c108:	e037883a 	mov	sp,fp
8111c10c:	dfc00117 	ldw	ra,4(sp)
8111c110:	df000017 	ldw	fp,0(sp)
8111c114:	dec00204 	addi	sp,sp,8
8111c118:	f800283a 	ret

8111c11c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8111c11c:	defffd04 	addi	sp,sp,-12
8111c120:	dfc00215 	stw	ra,8(sp)
8111c124:	df000115 	stw	fp,4(sp)
8111c128:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8111c12c:	0009883a 	mov	r4,zero
8111c130:	111c9bc0 	call	8111c9bc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
8111c134:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
8111c138:	111c9f40 	call	8111c9f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8111c13c:	01a044b4 	movhi	r6,33042
8111c140:	31895004 	addi	r6,r6,9536
8111c144:	016044b4 	movhi	r5,33042
8111c148:	29495004 	addi	r5,r5,9536
8111c14c:	012044b4 	movhi	r4,33042
8111c150:	21095004 	addi	r4,r4,9536
8111c154:	11205f80 	call	811205f8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
8111c158:	111ff980 	call	8111ff98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
8111c15c:	012044b4 	movhi	r4,33042
8111c160:	213ffe04 	addi	r4,r4,-8
8111c164:	112099c0 	call	8112099c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
8111c168:	d0a03017 	ldw	r2,-32576(gp)
8111c16c:	d0e03117 	ldw	r3,-32572(gp)
8111c170:	d1203217 	ldw	r4,-32568(gp)
8111c174:	200d883a 	mov	r6,r4
8111c178:	180b883a 	mov	r5,r3
8111c17c:	1009883a 	mov	r4,r2
8111c180:	1107ba80 	call	81107ba8 <main>
8111c184:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
8111c188:	01000044 	movi	r4,1
8111c18c:	111bba40 	call	8111bba4 <close>
  exit (result);
8111c190:	e13fff17 	ldw	r4,-4(fp)
8111c194:	11209b00 	call	811209b0 <exit>

8111c198 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
8111c198:	defffe04 	addi	sp,sp,-8
8111c19c:	df000115 	stw	fp,4(sp)
8111c1a0:	df000104 	addi	fp,sp,4
8111c1a4:	e13fff15 	stw	r4,-4(fp)
}
8111c1a8:	0001883a 	nop
8111c1ac:	e037883a 	mov	sp,fp
8111c1b0:	df000017 	ldw	fp,0(sp)
8111c1b4:	dec00104 	addi	sp,sp,4
8111c1b8:	f800283a 	ret

8111c1bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
8111c1bc:	defffe04 	addi	sp,sp,-8
8111c1c0:	df000115 	stw	fp,4(sp)
8111c1c4:	df000104 	addi	fp,sp,4
8111c1c8:	e13fff15 	stw	r4,-4(fp)
}
8111c1cc:	0001883a 	nop
8111c1d0:	e037883a 	mov	sp,fp
8111c1d4:	df000017 	ldw	fp,0(sp)
8111c1d8:	dec00104 	addi	sp,sp,4
8111c1dc:	f800283a 	ret

8111c1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111c1e0:	defffe04 	addi	sp,sp,-8
8111c1e4:	dfc00115 	stw	ra,4(sp)
8111c1e8:	df000015 	stw	fp,0(sp)
8111c1ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111c1f0:	d0a00d17 	ldw	r2,-32716(gp)
8111c1f4:	10000326 	beq	r2,zero,8111c204 <alt_get_errno+0x24>
8111c1f8:	d0a00d17 	ldw	r2,-32716(gp)
8111c1fc:	103ee83a 	callr	r2
8111c200:	00000106 	br	8111c208 <alt_get_errno+0x28>
8111c204:	d0a02804 	addi	r2,gp,-32608
}
8111c208:	e037883a 	mov	sp,fp
8111c20c:	dfc00117 	ldw	ra,4(sp)
8111c210:	df000017 	ldw	fp,0(sp)
8111c214:	dec00204 	addi	sp,sp,8
8111c218:	f800283a 	ret

8111c21c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8111c21c:	defffd04 	addi	sp,sp,-12
8111c220:	df000215 	stw	fp,8(sp)
8111c224:	df000204 	addi	fp,sp,8
8111c228:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8111c22c:	e0bfff17 	ldw	r2,-4(fp)
8111c230:	10800217 	ldw	r2,8(r2)
8111c234:	10d00034 	orhi	r3,r2,16384
8111c238:	e0bfff17 	ldw	r2,-4(fp)
8111c23c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8111c240:	e03ffe15 	stw	zero,-8(fp)
8111c244:	00001d06 	br	8111c2bc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8111c248:	00a044b4 	movhi	r2,33042
8111c24c:	108c2804 	addi	r2,r2,12448
8111c250:	e0fffe17 	ldw	r3,-8(fp)
8111c254:	18c00324 	muli	r3,r3,12
8111c258:	10c5883a 	add	r2,r2,r3
8111c25c:	10c00017 	ldw	r3,0(r2)
8111c260:	e0bfff17 	ldw	r2,-4(fp)
8111c264:	10800017 	ldw	r2,0(r2)
8111c268:	1880111e 	bne	r3,r2,8111c2b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8111c26c:	00a044b4 	movhi	r2,33042
8111c270:	108c2804 	addi	r2,r2,12448
8111c274:	e0fffe17 	ldw	r3,-8(fp)
8111c278:	18c00324 	muli	r3,r3,12
8111c27c:	10c5883a 	add	r2,r2,r3
8111c280:	10800204 	addi	r2,r2,8
8111c284:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8111c288:	1000090e 	bge	r2,zero,8111c2b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8111c28c:	e0bffe17 	ldw	r2,-8(fp)
8111c290:	10c00324 	muli	r3,r2,12
8111c294:	00a044b4 	movhi	r2,33042
8111c298:	108c2804 	addi	r2,r2,12448
8111c29c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8111c2a0:	e0bfff17 	ldw	r2,-4(fp)
8111c2a4:	18800226 	beq	r3,r2,8111c2b0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8111c2a8:	00bffcc4 	movi	r2,-13
8111c2ac:	00000806 	br	8111c2d0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8111c2b0:	e0bffe17 	ldw	r2,-8(fp)
8111c2b4:	10800044 	addi	r2,r2,1
8111c2b8:	e0bffe15 	stw	r2,-8(fp)
8111c2bc:	d0a00c17 	ldw	r2,-32720(gp)
8111c2c0:	1007883a 	mov	r3,r2
8111c2c4:	e0bffe17 	ldw	r2,-8(fp)
8111c2c8:	18bfdf2e 	bgeu	r3,r2,8111c248 <__reset+0xfb0fc248>
    }
  }
  
  /* The device is not locked */
 
  return 0;
8111c2cc:	0005883a 	mov	r2,zero
}
8111c2d0:	e037883a 	mov	sp,fp
8111c2d4:	df000017 	ldw	fp,0(sp)
8111c2d8:	dec00104 	addi	sp,sp,4
8111c2dc:	f800283a 	ret

8111c2e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8111c2e0:	defff604 	addi	sp,sp,-40
8111c2e4:	dfc00915 	stw	ra,36(sp)
8111c2e8:	df000815 	stw	fp,32(sp)
8111c2ec:	df000804 	addi	fp,sp,32
8111c2f0:	e13ffd15 	stw	r4,-12(fp)
8111c2f4:	e17ffe15 	stw	r5,-8(fp)
8111c2f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8111c2fc:	00bfffc4 	movi	r2,-1
8111c300:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8111c304:	00bffb44 	movi	r2,-19
8111c308:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
8111c30c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8111c310:	d1600a04 	addi	r5,gp,-32728
8111c314:	e13ffd17 	ldw	r4,-12(fp)
8111c318:	11200580 	call	81120058 <alt_find_dev>
8111c31c:	e0bff815 	stw	r2,-32(fp)
8111c320:	e0bff817 	ldw	r2,-32(fp)
8111c324:	1000051e 	bne	r2,zero,8111c33c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8111c328:	e13ffd17 	ldw	r4,-12(fp)
8111c32c:	11200e80 	call	811200e8 <alt_find_file>
8111c330:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8111c334:	00800044 	movi	r2,1
8111c338:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8111c33c:	e0bff817 	ldw	r2,-32(fp)
8111c340:	10002926 	beq	r2,zero,8111c3e8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8111c344:	e13ff817 	ldw	r4,-32(fp)
8111c348:	11201f00 	call	811201f0 <alt_get_fd>
8111c34c:	e0bff915 	stw	r2,-28(fp)
8111c350:	e0bff917 	ldw	r2,-28(fp)
8111c354:	1000030e 	bge	r2,zero,8111c364 <open+0x84>
    {
      status = index;
8111c358:	e0bff917 	ldw	r2,-28(fp)
8111c35c:	e0bffa15 	stw	r2,-24(fp)
8111c360:	00002306 	br	8111c3f0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8111c364:	e0bff917 	ldw	r2,-28(fp)
8111c368:	10c00324 	muli	r3,r2,12
8111c36c:	00a044b4 	movhi	r2,33042
8111c370:	108c2804 	addi	r2,r2,12448
8111c374:	1885883a 	add	r2,r3,r2
8111c378:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8111c37c:	e0fffe17 	ldw	r3,-8(fp)
8111c380:	00900034 	movhi	r2,16384
8111c384:	10bfffc4 	addi	r2,r2,-1
8111c388:	1886703a 	and	r3,r3,r2
8111c38c:	e0bffc17 	ldw	r2,-16(fp)
8111c390:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8111c394:	e0bffb17 	ldw	r2,-20(fp)
8111c398:	1000051e 	bne	r2,zero,8111c3b0 <open+0xd0>
8111c39c:	e13ffc17 	ldw	r4,-16(fp)
8111c3a0:	111c21c0 	call	8111c21c <alt_file_locked>
8111c3a4:	e0bffa15 	stw	r2,-24(fp)
8111c3a8:	e0bffa17 	ldw	r2,-24(fp)
8111c3ac:	10001016 	blt	r2,zero,8111c3f0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8111c3b0:	e0bff817 	ldw	r2,-32(fp)
8111c3b4:	10800317 	ldw	r2,12(r2)
8111c3b8:	10000826 	beq	r2,zero,8111c3dc <open+0xfc>
8111c3bc:	e0bff817 	ldw	r2,-32(fp)
8111c3c0:	10800317 	ldw	r2,12(r2)
8111c3c4:	e1ffff17 	ldw	r7,-4(fp)
8111c3c8:	e1bffe17 	ldw	r6,-8(fp)
8111c3cc:	e17ffd17 	ldw	r5,-12(fp)
8111c3d0:	e13ffc17 	ldw	r4,-16(fp)
8111c3d4:	103ee83a 	callr	r2
8111c3d8:	00000106 	br	8111c3e0 <open+0x100>
8111c3dc:	0005883a 	mov	r2,zero
8111c3e0:	e0bffa15 	stw	r2,-24(fp)
8111c3e4:	00000206 	br	8111c3f0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
8111c3e8:	00bffb44 	movi	r2,-19
8111c3ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8111c3f0:	e0bffa17 	ldw	r2,-24(fp)
8111c3f4:	1000090e 	bge	r2,zero,8111c41c <open+0x13c>
  {
    alt_release_fd (index);  
8111c3f8:	e13ff917 	ldw	r4,-28(fp)
8111c3fc:	111c56c0 	call	8111c56c <alt_release_fd>
    ALT_ERRNO = -status;
8111c400:	111c1e00 	call	8111c1e0 <alt_get_errno>
8111c404:	1007883a 	mov	r3,r2
8111c408:	e0bffa17 	ldw	r2,-24(fp)
8111c40c:	0085c83a 	sub	r2,zero,r2
8111c410:	18800015 	stw	r2,0(r3)
    return -1;
8111c414:	00bfffc4 	movi	r2,-1
8111c418:	00000106 	br	8111c420 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
8111c41c:	e0bff917 	ldw	r2,-28(fp)
}
8111c420:	e037883a 	mov	sp,fp
8111c424:	dfc00117 	ldw	ra,4(sp)
8111c428:	df000017 	ldw	fp,0(sp)
8111c42c:	dec00204 	addi	sp,sp,8
8111c430:	f800283a 	ret

8111c434 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111c434:	defffe04 	addi	sp,sp,-8
8111c438:	dfc00115 	stw	ra,4(sp)
8111c43c:	df000015 	stw	fp,0(sp)
8111c440:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111c444:	d0a00d17 	ldw	r2,-32716(gp)
8111c448:	10000326 	beq	r2,zero,8111c458 <alt_get_errno+0x24>
8111c44c:	d0a00d17 	ldw	r2,-32716(gp)
8111c450:	103ee83a 	callr	r2
8111c454:	00000106 	br	8111c45c <alt_get_errno+0x28>
8111c458:	d0a02804 	addi	r2,gp,-32608
}
8111c45c:	e037883a 	mov	sp,fp
8111c460:	dfc00117 	ldw	ra,4(sp)
8111c464:	df000017 	ldw	fp,0(sp)
8111c468:	dec00204 	addi	sp,sp,8
8111c46c:	f800283a 	ret

8111c470 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
8111c470:	defff904 	addi	sp,sp,-28
8111c474:	dfc00615 	stw	ra,24(sp)
8111c478:	df000515 	stw	fp,20(sp)
8111c47c:	df000504 	addi	fp,sp,20
8111c480:	e13ffd15 	stw	r4,-12(fp)
8111c484:	e17ffe15 	stw	r5,-8(fp)
8111c488:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111c48c:	e0bffd17 	ldw	r2,-12(fp)
8111c490:	10000616 	blt	r2,zero,8111c4ac <read+0x3c>
8111c494:	e0bffd17 	ldw	r2,-12(fp)
8111c498:	10c00324 	muli	r3,r2,12
8111c49c:	00a044b4 	movhi	r2,33042
8111c4a0:	108c2804 	addi	r2,r2,12448
8111c4a4:	1885883a 	add	r2,r3,r2
8111c4a8:	00000106 	br	8111c4b0 <read+0x40>
8111c4ac:	0005883a 	mov	r2,zero
8111c4b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8111c4b4:	e0bffb17 	ldw	r2,-20(fp)
8111c4b8:	10002226 	beq	r2,zero,8111c544 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8111c4bc:	e0bffb17 	ldw	r2,-20(fp)
8111c4c0:	10800217 	ldw	r2,8(r2)
8111c4c4:	108000cc 	andi	r2,r2,3
8111c4c8:	10800060 	cmpeqi	r2,r2,1
8111c4cc:	1000181e 	bne	r2,zero,8111c530 <read+0xc0>
        (fd->dev->read))
8111c4d0:	e0bffb17 	ldw	r2,-20(fp)
8111c4d4:	10800017 	ldw	r2,0(r2)
8111c4d8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8111c4dc:	10001426 	beq	r2,zero,8111c530 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
8111c4e0:	e0bffb17 	ldw	r2,-20(fp)
8111c4e4:	10800017 	ldw	r2,0(r2)
8111c4e8:	10800517 	ldw	r2,20(r2)
8111c4ec:	e0ffff17 	ldw	r3,-4(fp)
8111c4f0:	180d883a 	mov	r6,r3
8111c4f4:	e17ffe17 	ldw	r5,-8(fp)
8111c4f8:	e13ffb17 	ldw	r4,-20(fp)
8111c4fc:	103ee83a 	callr	r2
8111c500:	e0bffc15 	stw	r2,-16(fp)
8111c504:	e0bffc17 	ldw	r2,-16(fp)
8111c508:	1000070e 	bge	r2,zero,8111c528 <read+0xb8>
        {
          ALT_ERRNO = -rval;
8111c50c:	111c4340 	call	8111c434 <alt_get_errno>
8111c510:	1007883a 	mov	r3,r2
8111c514:	e0bffc17 	ldw	r2,-16(fp)
8111c518:	0085c83a 	sub	r2,zero,r2
8111c51c:	18800015 	stw	r2,0(r3)
          return -1;
8111c520:	00bfffc4 	movi	r2,-1
8111c524:	00000c06 	br	8111c558 <read+0xe8>
        }
        return rval;
8111c528:	e0bffc17 	ldw	r2,-16(fp)
8111c52c:	00000a06 	br	8111c558 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
8111c530:	111c4340 	call	8111c434 <alt_get_errno>
8111c534:	1007883a 	mov	r3,r2
8111c538:	00800344 	movi	r2,13
8111c53c:	18800015 	stw	r2,0(r3)
8111c540:	00000406 	br	8111c554 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
8111c544:	111c4340 	call	8111c434 <alt_get_errno>
8111c548:	1007883a 	mov	r3,r2
8111c54c:	00801444 	movi	r2,81
8111c550:	18800015 	stw	r2,0(r3)
  }
  return -1;
8111c554:	00bfffc4 	movi	r2,-1
}
8111c558:	e037883a 	mov	sp,fp
8111c55c:	dfc00117 	ldw	ra,4(sp)
8111c560:	df000017 	ldw	fp,0(sp)
8111c564:	dec00204 	addi	sp,sp,8
8111c568:	f800283a 	ret

8111c56c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
8111c56c:	defffe04 	addi	sp,sp,-8
8111c570:	df000115 	stw	fp,4(sp)
8111c574:	df000104 	addi	fp,sp,4
8111c578:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
8111c57c:	e0bfff17 	ldw	r2,-4(fp)
8111c580:	108000d0 	cmplti	r2,r2,3
8111c584:	10000d1e 	bne	r2,zero,8111c5bc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
8111c588:	00a044b4 	movhi	r2,33042
8111c58c:	108c2804 	addi	r2,r2,12448
8111c590:	e0ffff17 	ldw	r3,-4(fp)
8111c594:	18c00324 	muli	r3,r3,12
8111c598:	10c5883a 	add	r2,r2,r3
8111c59c:	10800204 	addi	r2,r2,8
8111c5a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
8111c5a4:	00a044b4 	movhi	r2,33042
8111c5a8:	108c2804 	addi	r2,r2,12448
8111c5ac:	e0ffff17 	ldw	r3,-4(fp)
8111c5b0:	18c00324 	muli	r3,r3,12
8111c5b4:	10c5883a 	add	r2,r2,r3
8111c5b8:	10000015 	stw	zero,0(r2)
  }
}
8111c5bc:	0001883a 	nop
8111c5c0:	e037883a 	mov	sp,fp
8111c5c4:	df000017 	ldw	fp,0(sp)
8111c5c8:	dec00104 	addi	sp,sp,4
8111c5cc:	f800283a 	ret

8111c5d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
8111c5d0:	defff904 	addi	sp,sp,-28
8111c5d4:	df000615 	stw	fp,24(sp)
8111c5d8:	df000604 	addi	fp,sp,24
8111c5dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c5e0:	0005303a 	rdctl	r2,status
8111c5e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c5e8:	e0fffe17 	ldw	r3,-8(fp)
8111c5ec:	00bfff84 	movi	r2,-2
8111c5f0:	1884703a 	and	r2,r3,r2
8111c5f4:	1001703a 	wrctl	status,r2
  
  return context;
8111c5f8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
8111c5fc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
8111c600:	d0a00f17 	ldw	r2,-32708(gp)
8111c604:	10c000c4 	addi	r3,r2,3
8111c608:	00bfff04 	movi	r2,-4
8111c60c:	1884703a 	and	r2,r3,r2
8111c610:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
8111c614:	d0e00f17 	ldw	r3,-32708(gp)
8111c618:	e0bfff17 	ldw	r2,-4(fp)
8111c61c:	1887883a 	add	r3,r3,r2
8111c620:	00a04834 	movhi	r2,33056
8111c624:	10a80004 	addi	r2,r2,-24576
8111c628:	10c0062e 	bgeu	r2,r3,8111c644 <sbrk+0x74>
8111c62c:	e0bffb17 	ldw	r2,-20(fp)
8111c630:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c634:	e0bffa17 	ldw	r2,-24(fp)
8111c638:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
8111c63c:	00bfffc4 	movi	r2,-1
8111c640:	00000b06 	br	8111c670 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
8111c644:	d0a00f17 	ldw	r2,-32708(gp)
8111c648:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
8111c64c:	d0e00f17 	ldw	r3,-32708(gp)
8111c650:	e0bfff17 	ldw	r2,-4(fp)
8111c654:	1885883a 	add	r2,r3,r2
8111c658:	d0a00f15 	stw	r2,-32708(gp)
8111c65c:	e0bffb17 	ldw	r2,-20(fp)
8111c660:	e0bffc15 	stw	r2,-16(fp)
8111c664:	e0bffc17 	ldw	r2,-16(fp)
8111c668:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
8111c66c:	e0bffd17 	ldw	r2,-12(fp)
} 
8111c670:	e037883a 	mov	sp,fp
8111c674:	df000017 	ldw	fp,0(sp)
8111c678:	dec00104 	addi	sp,sp,4
8111c67c:	f800283a 	ret

8111c680 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
8111c680:	defffa04 	addi	sp,sp,-24
8111c684:	df000515 	stw	fp,20(sp)
8111c688:	df000504 	addi	fp,sp,20
8111c68c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c690:	0005303a 	rdctl	r2,status
8111c694:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c698:	e0fffc17 	ldw	r3,-16(fp)
8111c69c:	00bfff84 	movi	r2,-2
8111c6a0:	1884703a 	and	r2,r3,r2
8111c6a4:	1001703a 	wrctl	status,r2
  
  return context;
8111c6a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
8111c6ac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
8111c6b0:	e0bfff17 	ldw	r2,-4(fp)
8111c6b4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
8111c6b8:	e0bffd17 	ldw	r2,-12(fp)
8111c6bc:	10800017 	ldw	r2,0(r2)
8111c6c0:	e0fffd17 	ldw	r3,-12(fp)
8111c6c4:	18c00117 	ldw	r3,4(r3)
8111c6c8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
8111c6cc:	e0bffd17 	ldw	r2,-12(fp)
8111c6d0:	10800117 	ldw	r2,4(r2)
8111c6d4:	e0fffd17 	ldw	r3,-12(fp)
8111c6d8:	18c00017 	ldw	r3,0(r3)
8111c6dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8111c6e0:	e0bffd17 	ldw	r2,-12(fp)
8111c6e4:	e0fffd17 	ldw	r3,-12(fp)
8111c6e8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
8111c6ec:	e0bffd17 	ldw	r2,-12(fp)
8111c6f0:	e0fffd17 	ldw	r3,-12(fp)
8111c6f4:	10c00015 	stw	r3,0(r2)
8111c6f8:	e0bffb17 	ldw	r2,-20(fp)
8111c6fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c700:	e0bffe17 	ldw	r2,-8(fp)
8111c704:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
8111c708:	0001883a 	nop
8111c70c:	e037883a 	mov	sp,fp
8111c710:	df000017 	ldw	fp,0(sp)
8111c714:	dec00104 	addi	sp,sp,4
8111c718:	f800283a 	ret

8111c71c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8111c71c:	defffb04 	addi	sp,sp,-20
8111c720:	dfc00415 	stw	ra,16(sp)
8111c724:	df000315 	stw	fp,12(sp)
8111c728:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8111c72c:	d0a01017 	ldw	r2,-32704(gp)
8111c730:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8111c734:	d0a03417 	ldw	r2,-32560(gp)
8111c738:	10800044 	addi	r2,r2,1
8111c73c:	d0a03415 	stw	r2,-32560(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8111c740:	00002e06 	br	8111c7fc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
8111c744:	e0bffd17 	ldw	r2,-12(fp)
8111c748:	10800017 	ldw	r2,0(r2)
8111c74c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
8111c750:	e0bffd17 	ldw	r2,-12(fp)
8111c754:	10800403 	ldbu	r2,16(r2)
8111c758:	10803fcc 	andi	r2,r2,255
8111c75c:	10000426 	beq	r2,zero,8111c770 <alt_tick+0x54>
8111c760:	d0a03417 	ldw	r2,-32560(gp)
8111c764:	1000021e 	bne	r2,zero,8111c770 <alt_tick+0x54>
    {
      alarm->rollover = 0;
8111c768:	e0bffd17 	ldw	r2,-12(fp)
8111c76c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
8111c770:	e0bffd17 	ldw	r2,-12(fp)
8111c774:	10800217 	ldw	r2,8(r2)
8111c778:	d0e03417 	ldw	r3,-32560(gp)
8111c77c:	18801d36 	bltu	r3,r2,8111c7f4 <alt_tick+0xd8>
8111c780:	e0bffd17 	ldw	r2,-12(fp)
8111c784:	10800403 	ldbu	r2,16(r2)
8111c788:	10803fcc 	andi	r2,r2,255
8111c78c:	1000191e 	bne	r2,zero,8111c7f4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
8111c790:	e0bffd17 	ldw	r2,-12(fp)
8111c794:	10800317 	ldw	r2,12(r2)
8111c798:	e0fffd17 	ldw	r3,-12(fp)
8111c79c:	18c00517 	ldw	r3,20(r3)
8111c7a0:	1809883a 	mov	r4,r3
8111c7a4:	103ee83a 	callr	r2
8111c7a8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
8111c7ac:	e0bfff17 	ldw	r2,-4(fp)
8111c7b0:	1000031e 	bne	r2,zero,8111c7c0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
8111c7b4:	e13ffd17 	ldw	r4,-12(fp)
8111c7b8:	111c6800 	call	8111c680 <alt_alarm_stop>
8111c7bc:	00000d06 	br	8111c7f4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
8111c7c0:	e0bffd17 	ldw	r2,-12(fp)
8111c7c4:	10c00217 	ldw	r3,8(r2)
8111c7c8:	e0bfff17 	ldw	r2,-4(fp)
8111c7cc:	1887883a 	add	r3,r3,r2
8111c7d0:	e0bffd17 	ldw	r2,-12(fp)
8111c7d4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
8111c7d8:	e0bffd17 	ldw	r2,-12(fp)
8111c7dc:	10c00217 	ldw	r3,8(r2)
8111c7e0:	d0a03417 	ldw	r2,-32560(gp)
8111c7e4:	1880032e 	bgeu	r3,r2,8111c7f4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
8111c7e8:	e0bffd17 	ldw	r2,-12(fp)
8111c7ec:	00c00044 	movi	r3,1
8111c7f0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
8111c7f4:	e0bffe17 	ldw	r2,-8(fp)
8111c7f8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8111c7fc:	e0fffd17 	ldw	r3,-12(fp)
8111c800:	d0a01004 	addi	r2,gp,-32704
8111c804:	18bfcf1e 	bne	r3,r2,8111c744 <__reset+0xfb0fc744>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
8111c808:	0001883a 	nop
}
8111c80c:	0001883a 	nop
8111c810:	e037883a 	mov	sp,fp
8111c814:	dfc00117 	ldw	ra,4(sp)
8111c818:	df000017 	ldw	fp,0(sp)
8111c81c:	dec00204 	addi	sp,sp,8
8111c820:	f800283a 	ret

8111c824 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
8111c824:	defffd04 	addi	sp,sp,-12
8111c828:	dfc00215 	stw	ra,8(sp)
8111c82c:	df000115 	stw	fp,4(sp)
8111c830:	df000104 	addi	fp,sp,4
8111c834:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
8111c838:	e13fff17 	ldw	r4,-4(fp)
8111c83c:	111ba400 	call	8111ba40 <alt_busy_sleep>
}
8111c840:	e037883a 	mov	sp,fp
8111c844:	dfc00117 	ldw	ra,4(sp)
8111c848:	df000017 	ldw	fp,0(sp)
8111c84c:	dec00204 	addi	sp,sp,8
8111c850:	f800283a 	ret

8111c854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111c854:	defffe04 	addi	sp,sp,-8
8111c858:	dfc00115 	stw	ra,4(sp)
8111c85c:	df000015 	stw	fp,0(sp)
8111c860:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111c864:	d0a00d17 	ldw	r2,-32716(gp)
8111c868:	10000326 	beq	r2,zero,8111c878 <alt_get_errno+0x24>
8111c86c:	d0a00d17 	ldw	r2,-32716(gp)
8111c870:	103ee83a 	callr	r2
8111c874:	00000106 	br	8111c87c <alt_get_errno+0x28>
8111c878:	d0a02804 	addi	r2,gp,-32608
}
8111c87c:	e037883a 	mov	sp,fp
8111c880:	dfc00117 	ldw	ra,4(sp)
8111c884:	df000017 	ldw	fp,0(sp)
8111c888:	dec00204 	addi	sp,sp,8
8111c88c:	f800283a 	ret

8111c890 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
8111c890:	defff904 	addi	sp,sp,-28
8111c894:	dfc00615 	stw	ra,24(sp)
8111c898:	df000515 	stw	fp,20(sp)
8111c89c:	df000504 	addi	fp,sp,20
8111c8a0:	e13ffd15 	stw	r4,-12(fp)
8111c8a4:	e17ffe15 	stw	r5,-8(fp)
8111c8a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111c8ac:	e0bffd17 	ldw	r2,-12(fp)
8111c8b0:	10000616 	blt	r2,zero,8111c8cc <write+0x3c>
8111c8b4:	e0bffd17 	ldw	r2,-12(fp)
8111c8b8:	10c00324 	muli	r3,r2,12
8111c8bc:	00a044b4 	movhi	r2,33042
8111c8c0:	108c2804 	addi	r2,r2,12448
8111c8c4:	1885883a 	add	r2,r3,r2
8111c8c8:	00000106 	br	8111c8d0 <write+0x40>
8111c8cc:	0005883a 	mov	r2,zero
8111c8d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8111c8d4:	e0bffb17 	ldw	r2,-20(fp)
8111c8d8:	10002126 	beq	r2,zero,8111c960 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
8111c8dc:	e0bffb17 	ldw	r2,-20(fp)
8111c8e0:	10800217 	ldw	r2,8(r2)
8111c8e4:	108000cc 	andi	r2,r2,3
8111c8e8:	10001826 	beq	r2,zero,8111c94c <write+0xbc>
8111c8ec:	e0bffb17 	ldw	r2,-20(fp)
8111c8f0:	10800017 	ldw	r2,0(r2)
8111c8f4:	10800617 	ldw	r2,24(r2)
8111c8f8:	10001426 	beq	r2,zero,8111c94c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8111c8fc:	e0bffb17 	ldw	r2,-20(fp)
8111c900:	10800017 	ldw	r2,0(r2)
8111c904:	10800617 	ldw	r2,24(r2)
8111c908:	e0ffff17 	ldw	r3,-4(fp)
8111c90c:	180d883a 	mov	r6,r3
8111c910:	e17ffe17 	ldw	r5,-8(fp)
8111c914:	e13ffb17 	ldw	r4,-20(fp)
8111c918:	103ee83a 	callr	r2
8111c91c:	e0bffc15 	stw	r2,-16(fp)
8111c920:	e0bffc17 	ldw	r2,-16(fp)
8111c924:	1000070e 	bge	r2,zero,8111c944 <write+0xb4>
      {
        ALT_ERRNO = -rval;
8111c928:	111c8540 	call	8111c854 <alt_get_errno>
8111c92c:	1007883a 	mov	r3,r2
8111c930:	e0bffc17 	ldw	r2,-16(fp)
8111c934:	0085c83a 	sub	r2,zero,r2
8111c938:	18800015 	stw	r2,0(r3)
        return -1;
8111c93c:	00bfffc4 	movi	r2,-1
8111c940:	00000c06 	br	8111c974 <write+0xe4>
      }
      return rval;
8111c944:	e0bffc17 	ldw	r2,-16(fp)
8111c948:	00000a06 	br	8111c974 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
8111c94c:	111c8540 	call	8111c854 <alt_get_errno>
8111c950:	1007883a 	mov	r3,r2
8111c954:	00800344 	movi	r2,13
8111c958:	18800015 	stw	r2,0(r3)
8111c95c:	00000406 	br	8111c970 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
8111c960:	111c8540 	call	8111c854 <alt_get_errno>
8111c964:	1007883a 	mov	r3,r2
8111c968:	00801444 	movi	r2,81
8111c96c:	18800015 	stw	r2,0(r3)
  }
  return -1;
8111c970:	00bfffc4 	movi	r2,-1
}
8111c974:	e037883a 	mov	sp,fp
8111c978:	dfc00117 	ldw	ra,4(sp)
8111c97c:	df000017 	ldw	fp,0(sp)
8111c980:	dec00204 	addi	sp,sp,8
8111c984:	f800283a 	ret

8111c988 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8111c988:	defffd04 	addi	sp,sp,-12
8111c98c:	dfc00215 	stw	ra,8(sp)
8111c990:	df000115 	stw	fp,4(sp)
8111c994:	df000104 	addi	fp,sp,4
8111c998:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8111c99c:	d1600a04 	addi	r5,gp,-32728
8111c9a0:	e13fff17 	ldw	r4,-4(fp)
8111c9a4:	111fef40 	call	8111fef4 <alt_dev_llist_insert>
}
8111c9a8:	e037883a 	mov	sp,fp
8111c9ac:	dfc00117 	ldw	ra,4(sp)
8111c9b0:	df000017 	ldw	fp,0(sp)
8111c9b4:	dec00204 	addi	sp,sp,8
8111c9b8:	f800283a 	ret

8111c9bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8111c9bc:	defffd04 	addi	sp,sp,-12
8111c9c0:	dfc00215 	stw	ra,8(sp)
8111c9c4:	df000115 	stw	fp,4(sp)
8111c9c8:	df000104 	addi	fp,sp,4
8111c9cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
8111c9d0:	11208dc0 	call	811208dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
8111c9d4:	00800044 	movi	r2,1
8111c9d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8111c9dc:	0001883a 	nop
8111c9e0:	e037883a 	mov	sp,fp
8111c9e4:	dfc00117 	ldw	ra,4(sp)
8111c9e8:	df000017 	ldw	fp,0(sp)
8111c9ec:	dec00204 	addi	sp,sp,8
8111c9f0:	f800283a 	ret

8111c9f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8111c9f4:	defffe04 	addi	sp,sp,-8
8111c9f8:	dfc00115 	stw	ra,4(sp)
8111c9fc:	df000015 	stw	fp,0(sp)
8111ca00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
8111ca04:	01c0fa04 	movi	r7,1000
8111ca08:	01800304 	movi	r6,12
8111ca0c:	000b883a 	mov	r5,zero
8111ca10:	01200034 	movhi	r4,32768
8111ca14:	21022004 	addi	r4,r4,2176
8111ca18:	111d5bc0 	call	8111d5bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8111ca1c:	018002c4 	movi	r6,11
8111ca20:	000b883a 	mov	r5,zero
8111ca24:	012044b4 	movhi	r4,33042
8111ca28:	210c9204 	addi	r4,r4,12872
8111ca2c:	111cc400 	call	8111cc40 <altera_avalon_jtag_uart_init>
8111ca30:	012044b4 	movhi	r4,33042
8111ca34:	210c8804 	addi	r4,r4,12832
8111ca38:	111c9880 	call	8111c988 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8111ca3c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8111ca40:	018003c4 	movi	r6,15
8111ca44:	000b883a 	mov	r5,zero
8111ca48:	012044b4 	movhi	r4,33042
8111ca4c:	2110aa04 	addi	r4,r4,17064
8111ca50:	111d7480 	call	8111d748 <altera_avalon_uart_init>
8111ca54:	012044b4 	movhi	r4,33042
8111ca58:	2110a004 	addi	r4,r4,17024
8111ca5c:	111c9880 	call	8111c988 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
8111ca60:	00a044b4 	movhi	r2,33042
8111ca64:	1090d104 	addi	r2,r2,17220
8111ca68:	10c00717 	ldw	r3,28(r2)
8111ca6c:	00a044b4 	movhi	r2,33042
8111ca70:	1090d104 	addi	r2,r2,17220
8111ca74:	10800817 	ldw	r2,32(r2)
8111ca78:	100d883a 	mov	r6,r2
8111ca7c:	180b883a 	mov	r5,r3
8111ca80:	012044b4 	movhi	r4,33042
8111ca84:	2110d104 	addi	r4,r4,17220
8111ca88:	111fadc0 	call	8111fadc <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
8111ca8c:	00a044b4 	movhi	r2,33042
8111ca90:	1090e904 	addi	r2,r2,17316
8111ca94:	10c00717 	ldw	r3,28(r2)
8111ca98:	00a044b4 	movhi	r2,33042
8111ca9c:	1090e904 	addi	r2,r2,17316
8111caa0:	10800817 	ldw	r2,32(r2)
8111caa4:	100d883a 	mov	r6,r2
8111caa8:	180b883a 	mov	r5,r3
8111caac:	012044b4 	movhi	r4,33042
8111cab0:	2110e904 	addi	r4,r4,17316
8111cab4:	111fadc0 	call	8111fadc <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
8111cab8:	012044b4 	movhi	r4,33042
8111cabc:	21110104 	addi	r4,r4,17412
8111cac0:	111c9880 	call	8111c988 <alt_dev_reg>
}
8111cac4:	0001883a 	nop
8111cac8:	e037883a 	mov	sp,fp
8111cacc:	dfc00117 	ldw	ra,4(sp)
8111cad0:	df000017 	ldw	fp,0(sp)
8111cad4:	dec00204 	addi	sp,sp,8
8111cad8:	f800283a 	ret

8111cadc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8111cadc:	defffa04 	addi	sp,sp,-24
8111cae0:	dfc00515 	stw	ra,20(sp)
8111cae4:	df000415 	stw	fp,16(sp)
8111cae8:	df000404 	addi	fp,sp,16
8111caec:	e13ffd15 	stw	r4,-12(fp)
8111caf0:	e17ffe15 	stw	r5,-8(fp)
8111caf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111caf8:	e0bffd17 	ldw	r2,-12(fp)
8111cafc:	10800017 	ldw	r2,0(r2)
8111cb00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8111cb04:	e0bffc17 	ldw	r2,-16(fp)
8111cb08:	10c00a04 	addi	r3,r2,40
8111cb0c:	e0bffd17 	ldw	r2,-12(fp)
8111cb10:	10800217 	ldw	r2,8(r2)
8111cb14:	100f883a 	mov	r7,r2
8111cb18:	e1bfff17 	ldw	r6,-4(fp)
8111cb1c:	e17ffe17 	ldw	r5,-8(fp)
8111cb20:	1809883a 	mov	r4,r3
8111cb24:	111d1040 	call	8111d104 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8111cb28:	e037883a 	mov	sp,fp
8111cb2c:	dfc00117 	ldw	ra,4(sp)
8111cb30:	df000017 	ldw	fp,0(sp)
8111cb34:	dec00204 	addi	sp,sp,8
8111cb38:	f800283a 	ret

8111cb3c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8111cb3c:	defffa04 	addi	sp,sp,-24
8111cb40:	dfc00515 	stw	ra,20(sp)
8111cb44:	df000415 	stw	fp,16(sp)
8111cb48:	df000404 	addi	fp,sp,16
8111cb4c:	e13ffd15 	stw	r4,-12(fp)
8111cb50:	e17ffe15 	stw	r5,-8(fp)
8111cb54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111cb58:	e0bffd17 	ldw	r2,-12(fp)
8111cb5c:	10800017 	ldw	r2,0(r2)
8111cb60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
8111cb64:	e0bffc17 	ldw	r2,-16(fp)
8111cb68:	10c00a04 	addi	r3,r2,40
8111cb6c:	e0bffd17 	ldw	r2,-12(fp)
8111cb70:	10800217 	ldw	r2,8(r2)
8111cb74:	100f883a 	mov	r7,r2
8111cb78:	e1bfff17 	ldw	r6,-4(fp)
8111cb7c:	e17ffe17 	ldw	r5,-8(fp)
8111cb80:	1809883a 	mov	r4,r3
8111cb84:	111d3200 	call	8111d320 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
8111cb88:	e037883a 	mov	sp,fp
8111cb8c:	dfc00117 	ldw	ra,4(sp)
8111cb90:	df000017 	ldw	fp,0(sp)
8111cb94:	dec00204 	addi	sp,sp,8
8111cb98:	f800283a 	ret

8111cb9c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
8111cb9c:	defffc04 	addi	sp,sp,-16
8111cba0:	dfc00315 	stw	ra,12(sp)
8111cba4:	df000215 	stw	fp,8(sp)
8111cba8:	df000204 	addi	fp,sp,8
8111cbac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111cbb0:	e0bfff17 	ldw	r2,-4(fp)
8111cbb4:	10800017 	ldw	r2,0(r2)
8111cbb8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
8111cbbc:	e0bffe17 	ldw	r2,-8(fp)
8111cbc0:	10c00a04 	addi	r3,r2,40
8111cbc4:	e0bfff17 	ldw	r2,-4(fp)
8111cbc8:	10800217 	ldw	r2,8(r2)
8111cbcc:	100b883a 	mov	r5,r2
8111cbd0:	1809883a 	mov	r4,r3
8111cbd4:	111cfac0 	call	8111cfac <altera_avalon_jtag_uart_close>
}
8111cbd8:	e037883a 	mov	sp,fp
8111cbdc:	dfc00117 	ldw	ra,4(sp)
8111cbe0:	df000017 	ldw	fp,0(sp)
8111cbe4:	dec00204 	addi	sp,sp,8
8111cbe8:	f800283a 	ret

8111cbec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8111cbec:	defffa04 	addi	sp,sp,-24
8111cbf0:	dfc00515 	stw	ra,20(sp)
8111cbf4:	df000415 	stw	fp,16(sp)
8111cbf8:	df000404 	addi	fp,sp,16
8111cbfc:	e13ffd15 	stw	r4,-12(fp)
8111cc00:	e17ffe15 	stw	r5,-8(fp)
8111cc04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8111cc08:	e0bffd17 	ldw	r2,-12(fp)
8111cc0c:	10800017 	ldw	r2,0(r2)
8111cc10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8111cc14:	e0bffc17 	ldw	r2,-16(fp)
8111cc18:	10800a04 	addi	r2,r2,40
8111cc1c:	e1bfff17 	ldw	r6,-4(fp)
8111cc20:	e17ffe17 	ldw	r5,-8(fp)
8111cc24:	1009883a 	mov	r4,r2
8111cc28:	111d0140 	call	8111d014 <altera_avalon_jtag_uart_ioctl>
}
8111cc2c:	e037883a 	mov	sp,fp
8111cc30:	dfc00117 	ldw	ra,4(sp)
8111cc34:	df000017 	ldw	fp,0(sp)
8111cc38:	dec00204 	addi	sp,sp,8
8111cc3c:	f800283a 	ret

8111cc40 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8111cc40:	defffa04 	addi	sp,sp,-24
8111cc44:	dfc00515 	stw	ra,20(sp)
8111cc48:	df000415 	stw	fp,16(sp)
8111cc4c:	df000404 	addi	fp,sp,16
8111cc50:	e13ffd15 	stw	r4,-12(fp)
8111cc54:	e17ffe15 	stw	r5,-8(fp)
8111cc58:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8111cc5c:	e0bffd17 	ldw	r2,-12(fp)
8111cc60:	00c00044 	movi	r3,1
8111cc64:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8111cc68:	e0bffd17 	ldw	r2,-12(fp)
8111cc6c:	10800017 	ldw	r2,0(r2)
8111cc70:	10800104 	addi	r2,r2,4
8111cc74:	1007883a 	mov	r3,r2
8111cc78:	e0bffd17 	ldw	r2,-12(fp)
8111cc7c:	10800817 	ldw	r2,32(r2)
8111cc80:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
8111cc84:	e0bffe17 	ldw	r2,-8(fp)
8111cc88:	e0ffff17 	ldw	r3,-4(fp)
8111cc8c:	d8000015 	stw	zero,0(sp)
8111cc90:	e1fffd17 	ldw	r7,-12(fp)
8111cc94:	01a044b4 	movhi	r6,33042
8111cc98:	31b34004 	addi	r6,r6,-13056
8111cc9c:	180b883a 	mov	r5,r3
8111cca0:	1009883a 	mov	r4,r2
8111cca4:	11202940 	call	81120294 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8111cca8:	e0bffd17 	ldw	r2,-12(fp)
8111ccac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
8111ccb0:	e0bffd17 	ldw	r2,-12(fp)
8111ccb4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8111ccb8:	d0e03317 	ldw	r3,-32564(gp)
8111ccbc:	e1fffd17 	ldw	r7,-12(fp)
8111ccc0:	01a044b4 	movhi	r6,33042
8111ccc4:	31b3c304 	addi	r6,r6,-12532
8111ccc8:	180b883a 	mov	r5,r3
8111cccc:	1009883a 	mov	r4,r2
8111ccd0:	111fd8c0 	call	8111fd8c <alt_alarm_start>
8111ccd4:	1000040e 	bge	r2,zero,8111cce8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8111ccd8:	e0fffd17 	ldw	r3,-12(fp)
8111ccdc:	00a00034 	movhi	r2,32768
8111cce0:	10bfffc4 	addi	r2,r2,-1
8111cce4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8111cce8:	0001883a 	nop
8111ccec:	e037883a 	mov	sp,fp
8111ccf0:	dfc00117 	ldw	ra,4(sp)
8111ccf4:	df000017 	ldw	fp,0(sp)
8111ccf8:	dec00204 	addi	sp,sp,8
8111ccfc:	f800283a 	ret

8111cd00 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
8111cd00:	defff804 	addi	sp,sp,-32
8111cd04:	df000715 	stw	fp,28(sp)
8111cd08:	df000704 	addi	fp,sp,28
8111cd0c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
8111cd10:	e0bfff17 	ldw	r2,-4(fp)
8111cd14:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
8111cd18:	e0bffb17 	ldw	r2,-20(fp)
8111cd1c:	10800017 	ldw	r2,0(r2)
8111cd20:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8111cd24:	e0bffc17 	ldw	r2,-16(fp)
8111cd28:	10800104 	addi	r2,r2,4
8111cd2c:	10800037 	ldwio	r2,0(r2)
8111cd30:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8111cd34:	e0bffd17 	ldw	r2,-12(fp)
8111cd38:	1080c00c 	andi	r2,r2,768
8111cd3c:	10006d26 	beq	r2,zero,8111cef4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
8111cd40:	e0bffd17 	ldw	r2,-12(fp)
8111cd44:	1080400c 	andi	r2,r2,256
8111cd48:	10003526 	beq	r2,zero,8111ce20 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
8111cd4c:	00800074 	movhi	r2,1
8111cd50:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111cd54:	e0bffb17 	ldw	r2,-20(fp)
8111cd58:	10800a17 	ldw	r2,40(r2)
8111cd5c:	10800044 	addi	r2,r2,1
8111cd60:	1081ffcc 	andi	r2,r2,2047
8111cd64:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
8111cd68:	e0bffb17 	ldw	r2,-20(fp)
8111cd6c:	10c00b17 	ldw	r3,44(r2)
8111cd70:	e0bffe17 	ldw	r2,-8(fp)
8111cd74:	18801526 	beq	r3,r2,8111cdcc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
8111cd78:	e0bffc17 	ldw	r2,-16(fp)
8111cd7c:	10800037 	ldwio	r2,0(r2)
8111cd80:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
8111cd84:	e0bff917 	ldw	r2,-28(fp)
8111cd88:	10a0000c 	andi	r2,r2,32768
8111cd8c:	10001126 	beq	r2,zero,8111cdd4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8111cd90:	e0bffb17 	ldw	r2,-20(fp)
8111cd94:	10800a17 	ldw	r2,40(r2)
8111cd98:	e0fff917 	ldw	r3,-28(fp)
8111cd9c:	1809883a 	mov	r4,r3
8111cda0:	e0fffb17 	ldw	r3,-20(fp)
8111cda4:	1885883a 	add	r2,r3,r2
8111cda8:	10800e04 	addi	r2,r2,56
8111cdac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111cdb0:	e0bffb17 	ldw	r2,-20(fp)
8111cdb4:	10800a17 	ldw	r2,40(r2)
8111cdb8:	10800044 	addi	r2,r2,1
8111cdbc:	10c1ffcc 	andi	r3,r2,2047
8111cdc0:	e0bffb17 	ldw	r2,-20(fp)
8111cdc4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
8111cdc8:	003fe206 	br	8111cd54 <__reset+0xfb0fcd54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
8111cdcc:	0001883a 	nop
8111cdd0:	00000106 	br	8111cdd8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
8111cdd4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8111cdd8:	e0bff917 	ldw	r2,-28(fp)
8111cddc:	10bfffec 	andhi	r2,r2,65535
8111cde0:	10000f26 	beq	r2,zero,8111ce20 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8111cde4:	e0bffb17 	ldw	r2,-20(fp)
8111cde8:	10c00817 	ldw	r3,32(r2)
8111cdec:	00bfff84 	movi	r2,-2
8111cdf0:	1886703a 	and	r3,r3,r2
8111cdf4:	e0bffb17 	ldw	r2,-20(fp)
8111cdf8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8111cdfc:	e0bffc17 	ldw	r2,-16(fp)
8111ce00:	10800104 	addi	r2,r2,4
8111ce04:	1007883a 	mov	r3,r2
8111ce08:	e0bffb17 	ldw	r2,-20(fp)
8111ce0c:	10800817 	ldw	r2,32(r2)
8111ce10:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8111ce14:	e0bffc17 	ldw	r2,-16(fp)
8111ce18:	10800104 	addi	r2,r2,4
8111ce1c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
8111ce20:	e0bffd17 	ldw	r2,-12(fp)
8111ce24:	1080800c 	andi	r2,r2,512
8111ce28:	103fbe26 	beq	r2,zero,8111cd24 <__reset+0xfb0fcd24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8111ce2c:	e0bffd17 	ldw	r2,-12(fp)
8111ce30:	1004d43a 	srli	r2,r2,16
8111ce34:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8111ce38:	00001406 	br	8111ce8c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8111ce3c:	e0bffc17 	ldw	r2,-16(fp)
8111ce40:	e0fffb17 	ldw	r3,-20(fp)
8111ce44:	18c00d17 	ldw	r3,52(r3)
8111ce48:	e13ffb17 	ldw	r4,-20(fp)
8111ce4c:	20c7883a 	add	r3,r4,r3
8111ce50:	18c20e04 	addi	r3,r3,2104
8111ce54:	18c00003 	ldbu	r3,0(r3)
8111ce58:	18c03fcc 	andi	r3,r3,255
8111ce5c:	18c0201c 	xori	r3,r3,128
8111ce60:	18ffe004 	addi	r3,r3,-128
8111ce64:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111ce68:	e0bffb17 	ldw	r2,-20(fp)
8111ce6c:	10800d17 	ldw	r2,52(r2)
8111ce70:	10800044 	addi	r2,r2,1
8111ce74:	10c1ffcc 	andi	r3,r2,2047
8111ce78:	e0bffb17 	ldw	r2,-20(fp)
8111ce7c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
8111ce80:	e0bffa17 	ldw	r2,-24(fp)
8111ce84:	10bfffc4 	addi	r2,r2,-1
8111ce88:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
8111ce8c:	e0bffa17 	ldw	r2,-24(fp)
8111ce90:	10000526 	beq	r2,zero,8111cea8 <altera_avalon_jtag_uart_irq+0x1a8>
8111ce94:	e0bffb17 	ldw	r2,-20(fp)
8111ce98:	10c00d17 	ldw	r3,52(r2)
8111ce9c:	e0bffb17 	ldw	r2,-20(fp)
8111cea0:	10800c17 	ldw	r2,48(r2)
8111cea4:	18bfe51e 	bne	r3,r2,8111ce3c <__reset+0xfb0fce3c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
8111cea8:	e0bffa17 	ldw	r2,-24(fp)
8111ceac:	103f9d26 	beq	r2,zero,8111cd24 <__reset+0xfb0fcd24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8111ceb0:	e0bffb17 	ldw	r2,-20(fp)
8111ceb4:	10c00817 	ldw	r3,32(r2)
8111ceb8:	00bfff44 	movi	r2,-3
8111cebc:	1886703a 	and	r3,r3,r2
8111cec0:	e0bffb17 	ldw	r2,-20(fp)
8111cec4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8111cec8:	e0bffb17 	ldw	r2,-20(fp)
8111cecc:	10800017 	ldw	r2,0(r2)
8111ced0:	10800104 	addi	r2,r2,4
8111ced4:	1007883a 	mov	r3,r2
8111ced8:	e0bffb17 	ldw	r2,-20(fp)
8111cedc:	10800817 	ldw	r2,32(r2)
8111cee0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8111cee4:	e0bffc17 	ldw	r2,-16(fp)
8111cee8:	10800104 	addi	r2,r2,4
8111ceec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
8111cef0:	003f8c06 	br	8111cd24 <__reset+0xfb0fcd24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8111cef4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8111cef8:	0001883a 	nop
8111cefc:	e037883a 	mov	sp,fp
8111cf00:	df000017 	ldw	fp,0(sp)
8111cf04:	dec00104 	addi	sp,sp,4
8111cf08:	f800283a 	ret

8111cf0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
8111cf0c:	defff804 	addi	sp,sp,-32
8111cf10:	df000715 	stw	fp,28(sp)
8111cf14:	df000704 	addi	fp,sp,28
8111cf18:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8111cf1c:	e0bffb17 	ldw	r2,-20(fp)
8111cf20:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8111cf24:	e0bff917 	ldw	r2,-28(fp)
8111cf28:	10800017 	ldw	r2,0(r2)
8111cf2c:	10800104 	addi	r2,r2,4
8111cf30:	10800037 	ldwio	r2,0(r2)
8111cf34:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8111cf38:	e0bffa17 	ldw	r2,-24(fp)
8111cf3c:	1081000c 	andi	r2,r2,1024
8111cf40:	10000b26 	beq	r2,zero,8111cf70 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8111cf44:	e0bff917 	ldw	r2,-28(fp)
8111cf48:	10800017 	ldw	r2,0(r2)
8111cf4c:	10800104 	addi	r2,r2,4
8111cf50:	1007883a 	mov	r3,r2
8111cf54:	e0bff917 	ldw	r2,-28(fp)
8111cf58:	10800817 	ldw	r2,32(r2)
8111cf5c:	10810014 	ori	r2,r2,1024
8111cf60:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8111cf64:	e0bff917 	ldw	r2,-28(fp)
8111cf68:	10000915 	stw	zero,36(r2)
8111cf6c:	00000a06 	br	8111cf98 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8111cf70:	e0bff917 	ldw	r2,-28(fp)
8111cf74:	10c00917 	ldw	r3,36(r2)
8111cf78:	00a00034 	movhi	r2,32768
8111cf7c:	10bfff04 	addi	r2,r2,-4
8111cf80:	10c00536 	bltu	r2,r3,8111cf98 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
8111cf84:	e0bff917 	ldw	r2,-28(fp)
8111cf88:	10800917 	ldw	r2,36(r2)
8111cf8c:	10c00044 	addi	r3,r2,1
8111cf90:	e0bff917 	ldw	r2,-28(fp)
8111cf94:	10c00915 	stw	r3,36(r2)
8111cf98:	d0a03317 	ldw	r2,-32564(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
8111cf9c:	e037883a 	mov	sp,fp
8111cfa0:	df000017 	ldw	fp,0(sp)
8111cfa4:	dec00104 	addi	sp,sp,4
8111cfa8:	f800283a 	ret

8111cfac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
8111cfac:	defffd04 	addi	sp,sp,-12
8111cfb0:	df000215 	stw	fp,8(sp)
8111cfb4:	df000204 	addi	fp,sp,8
8111cfb8:	e13ffe15 	stw	r4,-8(fp)
8111cfbc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8111cfc0:	00000506 	br	8111cfd8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8111cfc4:	e0bfff17 	ldw	r2,-4(fp)
8111cfc8:	1090000c 	andi	r2,r2,16384
8111cfcc:	10000226 	beq	r2,zero,8111cfd8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
8111cfd0:	00bffd44 	movi	r2,-11
8111cfd4:	00000b06 	br	8111d004 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8111cfd8:	e0bffe17 	ldw	r2,-8(fp)
8111cfdc:	10c00d17 	ldw	r3,52(r2)
8111cfe0:	e0bffe17 	ldw	r2,-8(fp)
8111cfe4:	10800c17 	ldw	r2,48(r2)
8111cfe8:	18800526 	beq	r3,r2,8111d000 <altera_avalon_jtag_uart_close+0x54>
8111cfec:	e0bffe17 	ldw	r2,-8(fp)
8111cff0:	10c00917 	ldw	r3,36(r2)
8111cff4:	e0bffe17 	ldw	r2,-8(fp)
8111cff8:	10800117 	ldw	r2,4(r2)
8111cffc:	18bff136 	bltu	r3,r2,8111cfc4 <__reset+0xfb0fcfc4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8111d000:	0005883a 	mov	r2,zero
}
8111d004:	e037883a 	mov	sp,fp
8111d008:	df000017 	ldw	fp,0(sp)
8111d00c:	dec00104 	addi	sp,sp,4
8111d010:	f800283a 	ret

8111d014 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8111d014:	defffa04 	addi	sp,sp,-24
8111d018:	df000515 	stw	fp,20(sp)
8111d01c:	df000504 	addi	fp,sp,20
8111d020:	e13ffd15 	stw	r4,-12(fp)
8111d024:	e17ffe15 	stw	r5,-8(fp)
8111d028:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
8111d02c:	00bff9c4 	movi	r2,-25
8111d030:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8111d034:	e0bffe17 	ldw	r2,-8(fp)
8111d038:	10da8060 	cmpeqi	r3,r2,27137
8111d03c:	1800031e 	bne	r3,zero,8111d04c <altera_avalon_jtag_uart_ioctl+0x38>
8111d040:	109a80a0 	cmpeqi	r2,r2,27138
8111d044:	1000181e 	bne	r2,zero,8111d0a8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
8111d048:	00002906 	br	8111d0f0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
8111d04c:	e0bffd17 	ldw	r2,-12(fp)
8111d050:	10c00117 	ldw	r3,4(r2)
8111d054:	00a00034 	movhi	r2,32768
8111d058:	10bfffc4 	addi	r2,r2,-1
8111d05c:	18802126 	beq	r3,r2,8111d0e4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
8111d060:	e0bfff17 	ldw	r2,-4(fp)
8111d064:	10800017 	ldw	r2,0(r2)
8111d068:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8111d06c:	e0bffc17 	ldw	r2,-16(fp)
8111d070:	10800090 	cmplti	r2,r2,2
8111d074:	1000061e 	bne	r2,zero,8111d090 <altera_avalon_jtag_uart_ioctl+0x7c>
8111d078:	e0fffc17 	ldw	r3,-16(fp)
8111d07c:	00a00034 	movhi	r2,32768
8111d080:	10bfffc4 	addi	r2,r2,-1
8111d084:	18800226 	beq	r3,r2,8111d090 <altera_avalon_jtag_uart_ioctl+0x7c>
8111d088:	e0bffc17 	ldw	r2,-16(fp)
8111d08c:	00000206 	br	8111d098 <altera_avalon_jtag_uart_ioctl+0x84>
8111d090:	00a00034 	movhi	r2,32768
8111d094:	10bfff84 	addi	r2,r2,-2
8111d098:	e0fffd17 	ldw	r3,-12(fp)
8111d09c:	18800115 	stw	r2,4(r3)
      rc = 0;
8111d0a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8111d0a4:	00000f06 	br	8111d0e4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8111d0a8:	e0bffd17 	ldw	r2,-12(fp)
8111d0ac:	10c00117 	ldw	r3,4(r2)
8111d0b0:	00a00034 	movhi	r2,32768
8111d0b4:	10bfffc4 	addi	r2,r2,-1
8111d0b8:	18800c26 	beq	r3,r2,8111d0ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8111d0bc:	e0bffd17 	ldw	r2,-12(fp)
8111d0c0:	10c00917 	ldw	r3,36(r2)
8111d0c4:	e0bffd17 	ldw	r2,-12(fp)
8111d0c8:	10800117 	ldw	r2,4(r2)
8111d0cc:	1885803a 	cmpltu	r2,r3,r2
8111d0d0:	10c03fcc 	andi	r3,r2,255
8111d0d4:	e0bfff17 	ldw	r2,-4(fp)
8111d0d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
8111d0dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8111d0e0:	00000206 	br	8111d0ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8111d0e4:	0001883a 	nop
8111d0e8:	00000106 	br	8111d0f0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8111d0ec:	0001883a 	nop

  default:
    break;
  }

  return rc;
8111d0f0:	e0bffb17 	ldw	r2,-20(fp)
}
8111d0f4:	e037883a 	mov	sp,fp
8111d0f8:	df000017 	ldw	fp,0(sp)
8111d0fc:	dec00104 	addi	sp,sp,4
8111d100:	f800283a 	ret

8111d104 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
8111d104:	defff304 	addi	sp,sp,-52
8111d108:	dfc00c15 	stw	ra,48(sp)
8111d10c:	df000b15 	stw	fp,44(sp)
8111d110:	df000b04 	addi	fp,sp,44
8111d114:	e13ffc15 	stw	r4,-16(fp)
8111d118:	e17ffd15 	stw	r5,-12(fp)
8111d11c:	e1bffe15 	stw	r6,-8(fp)
8111d120:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
8111d124:	e0bffd17 	ldw	r2,-12(fp)
8111d128:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8111d12c:	00004706 	br	8111d24c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8111d130:	e0bffc17 	ldw	r2,-16(fp)
8111d134:	10800a17 	ldw	r2,40(r2)
8111d138:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
8111d13c:	e0bffc17 	ldw	r2,-16(fp)
8111d140:	10800b17 	ldw	r2,44(r2)
8111d144:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
8111d148:	e0fff717 	ldw	r3,-36(fp)
8111d14c:	e0bff817 	ldw	r2,-32(fp)
8111d150:	18800536 	bltu	r3,r2,8111d168 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
8111d154:	e0fff717 	ldw	r3,-36(fp)
8111d158:	e0bff817 	ldw	r2,-32(fp)
8111d15c:	1885c83a 	sub	r2,r3,r2
8111d160:	e0bff615 	stw	r2,-40(fp)
8111d164:	00000406 	br	8111d178 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
8111d168:	00c20004 	movi	r3,2048
8111d16c:	e0bff817 	ldw	r2,-32(fp)
8111d170:	1885c83a 	sub	r2,r3,r2
8111d174:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8111d178:	e0bff617 	ldw	r2,-40(fp)
8111d17c:	10001e26 	beq	r2,zero,8111d1f8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
8111d180:	e0fffe17 	ldw	r3,-8(fp)
8111d184:	e0bff617 	ldw	r2,-40(fp)
8111d188:	1880022e 	bgeu	r3,r2,8111d194 <altera_avalon_jtag_uart_read+0x90>
        n = space;
8111d18c:	e0bffe17 	ldw	r2,-8(fp)
8111d190:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
8111d194:	e0bffc17 	ldw	r2,-16(fp)
8111d198:	10c00e04 	addi	r3,r2,56
8111d19c:	e0bff817 	ldw	r2,-32(fp)
8111d1a0:	1885883a 	add	r2,r3,r2
8111d1a4:	e1bff617 	ldw	r6,-40(fp)
8111d1a8:	100b883a 	mov	r5,r2
8111d1ac:	e13ff517 	ldw	r4,-44(fp)
8111d1b0:	110c9d40 	call	8110c9d4 <memcpy>
      ptr   += n;
8111d1b4:	e0fff517 	ldw	r3,-44(fp)
8111d1b8:	e0bff617 	ldw	r2,-40(fp)
8111d1bc:	1885883a 	add	r2,r3,r2
8111d1c0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
8111d1c4:	e0fffe17 	ldw	r3,-8(fp)
8111d1c8:	e0bff617 	ldw	r2,-40(fp)
8111d1cc:	1885c83a 	sub	r2,r3,r2
8111d1d0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111d1d4:	e0fff817 	ldw	r3,-32(fp)
8111d1d8:	e0bff617 	ldw	r2,-40(fp)
8111d1dc:	1885883a 	add	r2,r3,r2
8111d1e0:	10c1ffcc 	andi	r3,r2,2047
8111d1e4:	e0bffc17 	ldw	r2,-16(fp)
8111d1e8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
8111d1ec:	e0bffe17 	ldw	r2,-8(fp)
8111d1f0:	00bfcf16 	blt	zero,r2,8111d130 <__reset+0xfb0fd130>
8111d1f4:	00000106 	br	8111d1fc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8111d1f8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
8111d1fc:	e0fff517 	ldw	r3,-44(fp)
8111d200:	e0bffd17 	ldw	r2,-12(fp)
8111d204:	1880141e 	bne	r3,r2,8111d258 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8111d208:	e0bfff17 	ldw	r2,-4(fp)
8111d20c:	1090000c 	andi	r2,r2,16384
8111d210:	1000131e 	bne	r2,zero,8111d260 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
8111d214:	0001883a 	nop
8111d218:	e0bffc17 	ldw	r2,-16(fp)
8111d21c:	10c00a17 	ldw	r3,40(r2)
8111d220:	e0bff717 	ldw	r2,-36(fp)
8111d224:	1880051e 	bne	r3,r2,8111d23c <altera_avalon_jtag_uart_read+0x138>
8111d228:	e0bffc17 	ldw	r2,-16(fp)
8111d22c:	10c00917 	ldw	r3,36(r2)
8111d230:	e0bffc17 	ldw	r2,-16(fp)
8111d234:	10800117 	ldw	r2,4(r2)
8111d238:	18bff736 	bltu	r3,r2,8111d218 <__reset+0xfb0fd218>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
8111d23c:	e0bffc17 	ldw	r2,-16(fp)
8111d240:	10c00a17 	ldw	r3,40(r2)
8111d244:	e0bff717 	ldw	r2,-36(fp)
8111d248:	18800726 	beq	r3,r2,8111d268 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8111d24c:	e0bffe17 	ldw	r2,-8(fp)
8111d250:	00bfb716 	blt	zero,r2,8111d130 <__reset+0xfb0fd130>
8111d254:	00000506 	br	8111d26c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8111d258:	0001883a 	nop
8111d25c:	00000306 	br	8111d26c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
8111d260:	0001883a 	nop
8111d264:	00000106 	br	8111d26c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8111d268:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
8111d26c:	e0fff517 	ldw	r3,-44(fp)
8111d270:	e0bffd17 	ldw	r2,-12(fp)
8111d274:	18801826 	beq	r3,r2,8111d2d8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d278:	0005303a 	rdctl	r2,status
8111d27c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d280:	e0fffb17 	ldw	r3,-20(fp)
8111d284:	00bfff84 	movi	r2,-2
8111d288:	1884703a 	and	r2,r3,r2
8111d28c:	1001703a 	wrctl	status,r2
  
  return context;
8111d290:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
8111d294:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8111d298:	e0bffc17 	ldw	r2,-16(fp)
8111d29c:	10800817 	ldw	r2,32(r2)
8111d2a0:	10c00054 	ori	r3,r2,1
8111d2a4:	e0bffc17 	ldw	r2,-16(fp)
8111d2a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8111d2ac:	e0bffc17 	ldw	r2,-16(fp)
8111d2b0:	10800017 	ldw	r2,0(r2)
8111d2b4:	10800104 	addi	r2,r2,4
8111d2b8:	1007883a 	mov	r3,r2
8111d2bc:	e0bffc17 	ldw	r2,-16(fp)
8111d2c0:	10800817 	ldw	r2,32(r2)
8111d2c4:	18800035 	stwio	r2,0(r3)
8111d2c8:	e0bffa17 	ldw	r2,-24(fp)
8111d2cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d2d0:	e0bff917 	ldw	r2,-28(fp)
8111d2d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8111d2d8:	e0fff517 	ldw	r3,-44(fp)
8111d2dc:	e0bffd17 	ldw	r2,-12(fp)
8111d2e0:	18800426 	beq	r3,r2,8111d2f4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
8111d2e4:	e0fff517 	ldw	r3,-44(fp)
8111d2e8:	e0bffd17 	ldw	r2,-12(fp)
8111d2ec:	1885c83a 	sub	r2,r3,r2
8111d2f0:	00000606 	br	8111d30c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
8111d2f4:	e0bfff17 	ldw	r2,-4(fp)
8111d2f8:	1090000c 	andi	r2,r2,16384
8111d2fc:	10000226 	beq	r2,zero,8111d308 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
8111d300:	00bffd44 	movi	r2,-11
8111d304:	00000106 	br	8111d30c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
8111d308:	00bffec4 	movi	r2,-5
}
8111d30c:	e037883a 	mov	sp,fp
8111d310:	dfc00117 	ldw	ra,4(sp)
8111d314:	df000017 	ldw	fp,0(sp)
8111d318:	dec00204 	addi	sp,sp,8
8111d31c:	f800283a 	ret

8111d320 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
8111d320:	defff304 	addi	sp,sp,-52
8111d324:	dfc00c15 	stw	ra,48(sp)
8111d328:	df000b15 	stw	fp,44(sp)
8111d32c:	df000b04 	addi	fp,sp,44
8111d330:	e13ffc15 	stw	r4,-16(fp)
8111d334:	e17ffd15 	stw	r5,-12(fp)
8111d338:	e1bffe15 	stw	r6,-8(fp)
8111d33c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8111d340:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
8111d344:	e0bffd17 	ldw	r2,-12(fp)
8111d348:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8111d34c:	00003706 	br	8111d42c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
8111d350:	e0bffc17 	ldw	r2,-16(fp)
8111d354:	10800c17 	ldw	r2,48(r2)
8111d358:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
8111d35c:	e0bffc17 	ldw	r2,-16(fp)
8111d360:	10800d17 	ldw	r2,52(r2)
8111d364:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
8111d368:	e0fff917 	ldw	r3,-28(fp)
8111d36c:	e0bff517 	ldw	r2,-44(fp)
8111d370:	1880062e 	bgeu	r3,r2,8111d38c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
8111d374:	e0fff517 	ldw	r3,-44(fp)
8111d378:	e0bff917 	ldw	r2,-28(fp)
8111d37c:	1885c83a 	sub	r2,r3,r2
8111d380:	10bfffc4 	addi	r2,r2,-1
8111d384:	e0bff615 	stw	r2,-40(fp)
8111d388:	00000b06 	br	8111d3b8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
8111d38c:	e0bff517 	ldw	r2,-44(fp)
8111d390:	10000526 	beq	r2,zero,8111d3a8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
8111d394:	00c20004 	movi	r3,2048
8111d398:	e0bff917 	ldw	r2,-28(fp)
8111d39c:	1885c83a 	sub	r2,r3,r2
8111d3a0:	e0bff615 	stw	r2,-40(fp)
8111d3a4:	00000406 	br	8111d3b8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8111d3a8:	00c1ffc4 	movi	r3,2047
8111d3ac:	e0bff917 	ldw	r2,-28(fp)
8111d3b0:	1885c83a 	sub	r2,r3,r2
8111d3b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8111d3b8:	e0bff617 	ldw	r2,-40(fp)
8111d3bc:	10001e26 	beq	r2,zero,8111d438 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
8111d3c0:	e0fffe17 	ldw	r3,-8(fp)
8111d3c4:	e0bff617 	ldw	r2,-40(fp)
8111d3c8:	1880022e 	bgeu	r3,r2,8111d3d4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
8111d3cc:	e0bffe17 	ldw	r2,-8(fp)
8111d3d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
8111d3d4:	e0bffc17 	ldw	r2,-16(fp)
8111d3d8:	10c20e04 	addi	r3,r2,2104
8111d3dc:	e0bff917 	ldw	r2,-28(fp)
8111d3e0:	1885883a 	add	r2,r3,r2
8111d3e4:	e1bff617 	ldw	r6,-40(fp)
8111d3e8:	e17ffd17 	ldw	r5,-12(fp)
8111d3ec:	1009883a 	mov	r4,r2
8111d3f0:	110c9d40 	call	8110c9d4 <memcpy>
      ptr   += n;
8111d3f4:	e0fffd17 	ldw	r3,-12(fp)
8111d3f8:	e0bff617 	ldw	r2,-40(fp)
8111d3fc:	1885883a 	add	r2,r3,r2
8111d400:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8111d404:	e0fffe17 	ldw	r3,-8(fp)
8111d408:	e0bff617 	ldw	r2,-40(fp)
8111d40c:	1885c83a 	sub	r2,r3,r2
8111d410:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111d414:	e0fff917 	ldw	r3,-28(fp)
8111d418:	e0bff617 	ldw	r2,-40(fp)
8111d41c:	1885883a 	add	r2,r3,r2
8111d420:	10c1ffcc 	andi	r3,r2,2047
8111d424:	e0bffc17 	ldw	r2,-16(fp)
8111d428:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8111d42c:	e0bffe17 	ldw	r2,-8(fp)
8111d430:	00bfc716 	blt	zero,r2,8111d350 <__reset+0xfb0fd350>
8111d434:	00000106 	br	8111d43c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8111d438:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d43c:	0005303a 	rdctl	r2,status
8111d440:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d444:	e0fffb17 	ldw	r3,-20(fp)
8111d448:	00bfff84 	movi	r2,-2
8111d44c:	1884703a 	and	r2,r3,r2
8111d450:	1001703a 	wrctl	status,r2
  
  return context;
8111d454:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8111d458:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8111d45c:	e0bffc17 	ldw	r2,-16(fp)
8111d460:	10800817 	ldw	r2,32(r2)
8111d464:	10c00094 	ori	r3,r2,2
8111d468:	e0bffc17 	ldw	r2,-16(fp)
8111d46c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8111d470:	e0bffc17 	ldw	r2,-16(fp)
8111d474:	10800017 	ldw	r2,0(r2)
8111d478:	10800104 	addi	r2,r2,4
8111d47c:	1007883a 	mov	r3,r2
8111d480:	e0bffc17 	ldw	r2,-16(fp)
8111d484:	10800817 	ldw	r2,32(r2)
8111d488:	18800035 	stwio	r2,0(r3)
8111d48c:	e0bffa17 	ldw	r2,-24(fp)
8111d490:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d494:	e0bff817 	ldw	r2,-32(fp)
8111d498:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8111d49c:	e0bffe17 	ldw	r2,-8(fp)
8111d4a0:	0080100e 	bge	zero,r2,8111d4e4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
8111d4a4:	e0bfff17 	ldw	r2,-4(fp)
8111d4a8:	1090000c 	andi	r2,r2,16384
8111d4ac:	1000101e 	bne	r2,zero,8111d4f0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8111d4b0:	0001883a 	nop
8111d4b4:	e0bffc17 	ldw	r2,-16(fp)
8111d4b8:	10c00d17 	ldw	r3,52(r2)
8111d4bc:	e0bff517 	ldw	r2,-44(fp)
8111d4c0:	1880051e 	bne	r3,r2,8111d4d8 <altera_avalon_jtag_uart_write+0x1b8>
8111d4c4:	e0bffc17 	ldw	r2,-16(fp)
8111d4c8:	10c00917 	ldw	r3,36(r2)
8111d4cc:	e0bffc17 	ldw	r2,-16(fp)
8111d4d0:	10800117 	ldw	r2,4(r2)
8111d4d4:	18bff736 	bltu	r3,r2,8111d4b4 <__reset+0xfb0fd4b4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8111d4d8:	e0bffc17 	ldw	r2,-16(fp)
8111d4dc:	10800917 	ldw	r2,36(r2)
8111d4e0:	1000051e 	bne	r2,zero,8111d4f8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
8111d4e4:	e0bffe17 	ldw	r2,-8(fp)
8111d4e8:	00bfd016 	blt	zero,r2,8111d42c <__reset+0xfb0fd42c>
8111d4ec:	00000306 	br	8111d4fc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8111d4f0:	0001883a 	nop
8111d4f4:	00000106 	br	8111d4fc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8111d4f8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
8111d4fc:	e0fffd17 	ldw	r3,-12(fp)
8111d500:	e0bff717 	ldw	r2,-36(fp)
8111d504:	18800426 	beq	r3,r2,8111d518 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
8111d508:	e0fffd17 	ldw	r3,-12(fp)
8111d50c:	e0bff717 	ldw	r2,-36(fp)
8111d510:	1885c83a 	sub	r2,r3,r2
8111d514:	00000606 	br	8111d530 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
8111d518:	e0bfff17 	ldw	r2,-4(fp)
8111d51c:	1090000c 	andi	r2,r2,16384
8111d520:	10000226 	beq	r2,zero,8111d52c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
8111d524:	00bffd44 	movi	r2,-11
8111d528:	00000106 	br	8111d530 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8111d52c:	00bffec4 	movi	r2,-5
}
8111d530:	e037883a 	mov	sp,fp
8111d534:	dfc00117 	ldw	ra,4(sp)
8111d538:	df000017 	ldw	fp,0(sp)
8111d53c:	dec00204 	addi	sp,sp,8
8111d540:	f800283a 	ret

8111d544 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8111d544:	defffa04 	addi	sp,sp,-24
8111d548:	dfc00515 	stw	ra,20(sp)
8111d54c:	df000415 	stw	fp,16(sp)
8111d550:	df000404 	addi	fp,sp,16
8111d554:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8111d558:	0007883a 	mov	r3,zero
8111d55c:	e0bfff17 	ldw	r2,-4(fp)
8111d560:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8111d564:	e0bfff17 	ldw	r2,-4(fp)
8111d568:	10800104 	addi	r2,r2,4
8111d56c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d570:	0005303a 	rdctl	r2,status
8111d574:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d578:	e0fffd17 	ldw	r3,-12(fp)
8111d57c:	00bfff84 	movi	r2,-2
8111d580:	1884703a 	and	r2,r3,r2
8111d584:	1001703a 	wrctl	status,r2
  
  return context;
8111d588:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
8111d58c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
8111d590:	111c71c0 	call	8111c71c <alt_tick>
8111d594:	e0bffc17 	ldw	r2,-16(fp)
8111d598:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d59c:	e0bffe17 	ldw	r2,-8(fp)
8111d5a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8111d5a4:	0001883a 	nop
8111d5a8:	e037883a 	mov	sp,fp
8111d5ac:	dfc00117 	ldw	ra,4(sp)
8111d5b0:	df000017 	ldw	fp,0(sp)
8111d5b4:	dec00204 	addi	sp,sp,8
8111d5b8:	f800283a 	ret

8111d5bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
8111d5bc:	defff804 	addi	sp,sp,-32
8111d5c0:	dfc00715 	stw	ra,28(sp)
8111d5c4:	df000615 	stw	fp,24(sp)
8111d5c8:	df000604 	addi	fp,sp,24
8111d5cc:	e13ffc15 	stw	r4,-16(fp)
8111d5d0:	e17ffd15 	stw	r5,-12(fp)
8111d5d4:	e1bffe15 	stw	r6,-8(fp)
8111d5d8:	e1ffff15 	stw	r7,-4(fp)
8111d5dc:	e0bfff17 	ldw	r2,-4(fp)
8111d5e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
8111d5e4:	d0a03317 	ldw	r2,-32564(gp)
8111d5e8:	1000021e 	bne	r2,zero,8111d5f4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
8111d5ec:	e0bffb17 	ldw	r2,-20(fp)
8111d5f0:	d0a03315 	stw	r2,-32564(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8111d5f4:	e0bffc17 	ldw	r2,-16(fp)
8111d5f8:	10800104 	addi	r2,r2,4
8111d5fc:	00c001c4 	movi	r3,7
8111d600:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8111d604:	d8000015 	stw	zero,0(sp)
8111d608:	e1fffc17 	ldw	r7,-16(fp)
8111d60c:	01a044b4 	movhi	r6,33042
8111d610:	31b55104 	addi	r6,r6,-10940
8111d614:	e17ffe17 	ldw	r5,-8(fp)
8111d618:	e13ffd17 	ldw	r4,-12(fp)
8111d61c:	11202940 	call	81120294 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
8111d620:	0001883a 	nop
8111d624:	e037883a 	mov	sp,fp
8111d628:	dfc00117 	ldw	ra,4(sp)
8111d62c:	df000017 	ldw	fp,0(sp)
8111d630:	dec00204 	addi	sp,sp,8
8111d634:	f800283a 	ret

8111d638 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8111d638:	defffa04 	addi	sp,sp,-24
8111d63c:	dfc00515 	stw	ra,20(sp)
8111d640:	df000415 	stw	fp,16(sp)
8111d644:	df000404 	addi	fp,sp,16
8111d648:	e13ffd15 	stw	r4,-12(fp)
8111d64c:	e17ffe15 	stw	r5,-8(fp)
8111d650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8111d654:	e0bffd17 	ldw	r2,-12(fp)
8111d658:	10800017 	ldw	r2,0(r2)
8111d65c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
8111d660:	e0bffc17 	ldw	r2,-16(fp)
8111d664:	10c00a04 	addi	r3,r2,40
8111d668:	e0bffd17 	ldw	r2,-12(fp)
8111d66c:	10800217 	ldw	r2,8(r2)
8111d670:	100f883a 	mov	r7,r2
8111d674:	e1bfff17 	ldw	r6,-4(fp)
8111d678:	e17ffe17 	ldw	r5,-8(fp)
8111d67c:	1809883a 	mov	r4,r3
8111d680:	111db4c0 	call	8111db4c <altera_avalon_uart_read>
      fd->fd_flags);
}
8111d684:	e037883a 	mov	sp,fp
8111d688:	dfc00117 	ldw	ra,4(sp)
8111d68c:	df000017 	ldw	fp,0(sp)
8111d690:	dec00204 	addi	sp,sp,8
8111d694:	f800283a 	ret

8111d698 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8111d698:	defffa04 	addi	sp,sp,-24
8111d69c:	dfc00515 	stw	ra,20(sp)
8111d6a0:	df000415 	stw	fp,16(sp)
8111d6a4:	df000404 	addi	fp,sp,16
8111d6a8:	e13ffd15 	stw	r4,-12(fp)
8111d6ac:	e17ffe15 	stw	r5,-8(fp)
8111d6b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8111d6b4:	e0bffd17 	ldw	r2,-12(fp)
8111d6b8:	10800017 	ldw	r2,0(r2)
8111d6bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
8111d6c0:	e0bffc17 	ldw	r2,-16(fp)
8111d6c4:	10c00a04 	addi	r3,r2,40
8111d6c8:	e0bffd17 	ldw	r2,-12(fp)
8111d6cc:	10800217 	ldw	r2,8(r2)
8111d6d0:	100f883a 	mov	r7,r2
8111d6d4:	e1bfff17 	ldw	r6,-4(fp)
8111d6d8:	e17ffe17 	ldw	r5,-8(fp)
8111d6dc:	1809883a 	mov	r4,r3
8111d6e0:	111dd640 	call	8111dd64 <altera_avalon_uart_write>
      fd->fd_flags);
}
8111d6e4:	e037883a 	mov	sp,fp
8111d6e8:	dfc00117 	ldw	ra,4(sp)
8111d6ec:	df000017 	ldw	fp,0(sp)
8111d6f0:	dec00204 	addi	sp,sp,8
8111d6f4:	f800283a 	ret

8111d6f8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
8111d6f8:	defffc04 	addi	sp,sp,-16
8111d6fc:	dfc00315 	stw	ra,12(sp)
8111d700:	df000215 	stw	fp,8(sp)
8111d704:	df000204 	addi	fp,sp,8
8111d708:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8111d70c:	e0bfff17 	ldw	r2,-4(fp)
8111d710:	10800017 	ldw	r2,0(r2)
8111d714:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
8111d718:	e0bffe17 	ldw	r2,-8(fp)
8111d71c:	10c00a04 	addi	r3,r2,40
8111d720:	e0bfff17 	ldw	r2,-4(fp)
8111d724:	10800217 	ldw	r2,8(r2)
8111d728:	100b883a 	mov	r5,r2
8111d72c:	1809883a 	mov	r4,r3
8111d730:	111dabc0 	call	8111dabc <altera_avalon_uart_close>
}
8111d734:	e037883a 	mov	sp,fp
8111d738:	dfc00117 	ldw	ra,4(sp)
8111d73c:	df000017 	ldw	fp,0(sp)
8111d740:	dec00204 	addi	sp,sp,8
8111d744:	f800283a 	ret

8111d748 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
8111d748:	defff804 	addi	sp,sp,-32
8111d74c:	dfc00715 	stw	ra,28(sp)
8111d750:	df000615 	stw	fp,24(sp)
8111d754:	df000604 	addi	fp,sp,24
8111d758:	e13ffd15 	stw	r4,-12(fp)
8111d75c:	e17ffe15 	stw	r5,-8(fp)
8111d760:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
8111d764:	e0bffd17 	ldw	r2,-12(fp)
8111d768:	10800017 	ldw	r2,0(r2)
8111d76c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
8111d770:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8111d774:	1000041e 	bne	r2,zero,8111d788 <altera_avalon_uart_init+0x40>
8111d778:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8111d77c:	1000021e 	bne	r2,zero,8111d788 <altera_avalon_uart_init+0x40>
8111d780:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8111d784:	10000226 	beq	r2,zero,8111d790 <altera_avalon_uart_init+0x48>
8111d788:	00800044 	movi	r2,1
8111d78c:	00000106 	br	8111d794 <altera_avalon_uart_init+0x4c>
8111d790:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8111d794:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
8111d798:	e0bffc17 	ldw	r2,-16(fp)
8111d79c:	10000f1e 	bne	r2,zero,8111d7dc <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
8111d7a0:	e0bffd17 	ldw	r2,-12(fp)
8111d7a4:	00c32004 	movi	r3,3200
8111d7a8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
8111d7ac:	e0bffb17 	ldw	r2,-20(fp)
8111d7b0:	10800304 	addi	r2,r2,12
8111d7b4:	e0fffd17 	ldw	r3,-12(fp)
8111d7b8:	18c00117 	ldw	r3,4(r3)
8111d7bc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
8111d7c0:	d8000015 	stw	zero,0(sp)
8111d7c4:	e1fffd17 	ldw	r7,-12(fp)
8111d7c8:	01a044b4 	movhi	r6,33042
8111d7cc:	31b5fd04 	addi	r6,r6,-10252
8111d7d0:	e17fff17 	ldw	r5,-4(fp)
8111d7d4:	e13ffe17 	ldw	r4,-8(fp)
8111d7d8:	11202940 	call	81120294 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
8111d7dc:	0001883a 	nop
8111d7e0:	e037883a 	mov	sp,fp
8111d7e4:	dfc00117 	ldw	ra,4(sp)
8111d7e8:	df000017 	ldw	fp,0(sp)
8111d7ec:	dec00204 	addi	sp,sp,8
8111d7f0:	f800283a 	ret

8111d7f4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
8111d7f4:	defffa04 	addi	sp,sp,-24
8111d7f8:	dfc00515 	stw	ra,20(sp)
8111d7fc:	df000415 	stw	fp,16(sp)
8111d800:	df000404 	addi	fp,sp,16
8111d804:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
8111d808:	e0bfff17 	ldw	r2,-4(fp)
8111d80c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
8111d810:	e0bffc17 	ldw	r2,-16(fp)
8111d814:	10800017 	ldw	r2,0(r2)
8111d818:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
8111d81c:	e0bffd17 	ldw	r2,-12(fp)
8111d820:	10800204 	addi	r2,r2,8
8111d824:	10800037 	ldwio	r2,0(r2)
8111d828:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
8111d82c:	e0bffd17 	ldw	r2,-12(fp)
8111d830:	10800204 	addi	r2,r2,8
8111d834:	0007883a 	mov	r3,zero
8111d838:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
8111d83c:	e0bffd17 	ldw	r2,-12(fp)
8111d840:	10800204 	addi	r2,r2,8
8111d844:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
8111d848:	e0bffe17 	ldw	r2,-8(fp)
8111d84c:	1080200c 	andi	r2,r2,128
8111d850:	10000326 	beq	r2,zero,8111d860 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
8111d854:	e17ffe17 	ldw	r5,-8(fp)
8111d858:	e13ffc17 	ldw	r4,-16(fp)
8111d85c:	111d8900 	call	8111d890 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
8111d860:	e0bffe17 	ldw	r2,-8(fp)
8111d864:	1081100c 	andi	r2,r2,1088
8111d868:	10000326 	beq	r2,zero,8111d878 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
8111d86c:	e17ffe17 	ldw	r5,-8(fp)
8111d870:	e13ffc17 	ldw	r4,-16(fp)
8111d874:	111d9740 	call	8111d974 <altera_avalon_uart_txirq>
  }
  

}
8111d878:	0001883a 	nop
8111d87c:	e037883a 	mov	sp,fp
8111d880:	dfc00117 	ldw	ra,4(sp)
8111d884:	df000017 	ldw	fp,0(sp)
8111d888:	dec00204 	addi	sp,sp,8
8111d88c:	f800283a 	ret

8111d890 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8111d890:	defffc04 	addi	sp,sp,-16
8111d894:	df000315 	stw	fp,12(sp)
8111d898:	df000304 	addi	fp,sp,12
8111d89c:	e13ffe15 	stw	r4,-8(fp)
8111d8a0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
8111d8a4:	e0bfff17 	ldw	r2,-4(fp)
8111d8a8:	108000cc 	andi	r2,r2,3
8111d8ac:	10002c1e 	bne	r2,zero,8111d960 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
8111d8b0:	e0bffe17 	ldw	r2,-8(fp)
8111d8b4:	10800317 	ldw	r2,12(r2)
8111d8b8:	e0bffe17 	ldw	r2,-8(fp)
8111d8bc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8111d8c0:	e0bffe17 	ldw	r2,-8(fp)
8111d8c4:	10800317 	ldw	r2,12(r2)
8111d8c8:	10800044 	addi	r2,r2,1
8111d8cc:	10800fcc 	andi	r2,r2,63
8111d8d0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
8111d8d4:	e0bffe17 	ldw	r2,-8(fp)
8111d8d8:	10800317 	ldw	r2,12(r2)
8111d8dc:	e0fffe17 	ldw	r3,-8(fp)
8111d8e0:	18c00017 	ldw	r3,0(r3)
8111d8e4:	18c00037 	ldwio	r3,0(r3)
8111d8e8:	1809883a 	mov	r4,r3
8111d8ec:	e0fffe17 	ldw	r3,-8(fp)
8111d8f0:	1885883a 	add	r2,r3,r2
8111d8f4:	10800704 	addi	r2,r2,28
8111d8f8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8111d8fc:	e0bffe17 	ldw	r2,-8(fp)
8111d900:	e0fffd17 	ldw	r3,-12(fp)
8111d904:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8111d908:	e0bffe17 	ldw	r2,-8(fp)
8111d90c:	10800317 	ldw	r2,12(r2)
8111d910:	10800044 	addi	r2,r2,1
8111d914:	10800fcc 	andi	r2,r2,63
8111d918:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8111d91c:	e0bffe17 	ldw	r2,-8(fp)
8111d920:	10c00217 	ldw	r3,8(r2)
8111d924:	e0bffd17 	ldw	r2,-12(fp)
8111d928:	18800e1e 	bne	r3,r2,8111d964 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8111d92c:	e0bffe17 	ldw	r2,-8(fp)
8111d930:	10c00117 	ldw	r3,4(r2)
8111d934:	00bfdfc4 	movi	r2,-129
8111d938:	1886703a 	and	r3,r3,r2
8111d93c:	e0bffe17 	ldw	r2,-8(fp)
8111d940:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
8111d944:	e0bffe17 	ldw	r2,-8(fp)
8111d948:	10800017 	ldw	r2,0(r2)
8111d94c:	10800304 	addi	r2,r2,12
8111d950:	e0fffe17 	ldw	r3,-8(fp)
8111d954:	18c00117 	ldw	r3,4(r3)
8111d958:	10c00035 	stwio	r3,0(r2)
8111d95c:	00000106 	br	8111d964 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
8111d960:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
8111d964:	e037883a 	mov	sp,fp
8111d968:	df000017 	ldw	fp,0(sp)
8111d96c:	dec00104 	addi	sp,sp,4
8111d970:	f800283a 	ret

8111d974 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8111d974:	defffb04 	addi	sp,sp,-20
8111d978:	df000415 	stw	fp,16(sp)
8111d97c:	df000404 	addi	fp,sp,16
8111d980:	e13ffc15 	stw	r4,-16(fp)
8111d984:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
8111d988:	e0bffc17 	ldw	r2,-16(fp)
8111d98c:	10c00417 	ldw	r3,16(r2)
8111d990:	e0bffc17 	ldw	r2,-16(fp)
8111d994:	10800517 	ldw	r2,20(r2)
8111d998:	18803226 	beq	r3,r2,8111da64 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8111d99c:	e0bffc17 	ldw	r2,-16(fp)
8111d9a0:	10800617 	ldw	r2,24(r2)
8111d9a4:	1080008c 	andi	r2,r2,2
8111d9a8:	10000326 	beq	r2,zero,8111d9b8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8111d9ac:	e0bffd17 	ldw	r2,-12(fp)
8111d9b0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8111d9b4:	10001d26 	beq	r2,zero,8111da2c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
8111d9b8:	e0bffc17 	ldw	r2,-16(fp)
8111d9bc:	10800417 	ldw	r2,16(r2)
8111d9c0:	e0bffc17 	ldw	r2,-16(fp)
8111d9c4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
8111d9c8:	e0bffc17 	ldw	r2,-16(fp)
8111d9cc:	10800017 	ldw	r2,0(r2)
8111d9d0:	10800104 	addi	r2,r2,4
8111d9d4:	e0fffc17 	ldw	r3,-16(fp)
8111d9d8:	18c00417 	ldw	r3,16(r3)
8111d9dc:	e13ffc17 	ldw	r4,-16(fp)
8111d9e0:	20c7883a 	add	r3,r4,r3
8111d9e4:	18c01704 	addi	r3,r3,92
8111d9e8:	18c00003 	ldbu	r3,0(r3)
8111d9ec:	18c03fcc 	andi	r3,r3,255
8111d9f0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
8111d9f4:	e0bffc17 	ldw	r2,-16(fp)
8111d9f8:	10800417 	ldw	r2,16(r2)
8111d9fc:	10800044 	addi	r2,r2,1
8111da00:	e0fffc17 	ldw	r3,-16(fp)
8111da04:	18800415 	stw	r2,16(r3)
8111da08:	10c00fcc 	andi	r3,r2,63
8111da0c:	e0bffc17 	ldw	r2,-16(fp)
8111da10:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8111da14:	e0bffc17 	ldw	r2,-16(fp)
8111da18:	10800117 	ldw	r2,4(r2)
8111da1c:	10c01014 	ori	r3,r2,64
8111da20:	e0bffc17 	ldw	r2,-16(fp)
8111da24:	10c00115 	stw	r3,4(r2)
8111da28:	00000e06 	br	8111da64 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
8111da2c:	e0bffc17 	ldw	r2,-16(fp)
8111da30:	10800017 	ldw	r2,0(r2)
8111da34:	10800204 	addi	r2,r2,8
8111da38:	10800037 	ldwio	r2,0(r2)
8111da3c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8111da40:	e0bffd17 	ldw	r2,-12(fp)
8111da44:	1082000c 	andi	r2,r2,2048
8111da48:	1000061e 	bne	r2,zero,8111da64 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8111da4c:	e0bffc17 	ldw	r2,-16(fp)
8111da50:	10c00117 	ldw	r3,4(r2)
8111da54:	00bfefc4 	movi	r2,-65
8111da58:	1886703a 	and	r3,r3,r2
8111da5c:	e0bffc17 	ldw	r2,-16(fp)
8111da60:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
8111da64:	e0bffc17 	ldw	r2,-16(fp)
8111da68:	10c00417 	ldw	r3,16(r2)
8111da6c:	e0bffc17 	ldw	r2,-16(fp)
8111da70:	10800517 	ldw	r2,20(r2)
8111da74:	1880061e 	bne	r3,r2,8111da90 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8111da78:	e0bffc17 	ldw	r2,-16(fp)
8111da7c:	10c00117 	ldw	r3,4(r2)
8111da80:	00beefc4 	movi	r2,-1089
8111da84:	1886703a 	and	r3,r3,r2
8111da88:	e0bffc17 	ldw	r2,-16(fp)
8111da8c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111da90:	e0bffc17 	ldw	r2,-16(fp)
8111da94:	10800017 	ldw	r2,0(r2)
8111da98:	10800304 	addi	r2,r2,12
8111da9c:	e0fffc17 	ldw	r3,-16(fp)
8111daa0:	18c00117 	ldw	r3,4(r3)
8111daa4:	10c00035 	stwio	r3,0(r2)
}
8111daa8:	0001883a 	nop
8111daac:	e037883a 	mov	sp,fp
8111dab0:	df000017 	ldw	fp,0(sp)
8111dab4:	dec00104 	addi	sp,sp,4
8111dab8:	f800283a 	ret

8111dabc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
8111dabc:	defffd04 	addi	sp,sp,-12
8111dac0:	df000215 	stw	fp,8(sp)
8111dac4:	df000204 	addi	fp,sp,8
8111dac8:	e13ffe15 	stw	r4,-8(fp)
8111dacc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8111dad0:	00000506 	br	8111dae8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8111dad4:	e0bfff17 	ldw	r2,-4(fp)
8111dad8:	1090000c 	andi	r2,r2,16384
8111dadc:	10000226 	beq	r2,zero,8111dae8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
8111dae0:	00bffd44 	movi	r2,-11
8111dae4:	00000606 	br	8111db00 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8111dae8:	e0bffe17 	ldw	r2,-8(fp)
8111daec:	10c00417 	ldw	r3,16(r2)
8111daf0:	e0bffe17 	ldw	r2,-8(fp)
8111daf4:	10800517 	ldw	r2,20(r2)
8111daf8:	18bff61e 	bne	r3,r2,8111dad4 <__reset+0xfb0fdad4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8111dafc:	0005883a 	mov	r2,zero
}
8111db00:	e037883a 	mov	sp,fp
8111db04:	df000017 	ldw	fp,0(sp)
8111db08:	dec00104 	addi	sp,sp,4
8111db0c:	f800283a 	ret

8111db10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111db10:	defffe04 	addi	sp,sp,-8
8111db14:	dfc00115 	stw	ra,4(sp)
8111db18:	df000015 	stw	fp,0(sp)
8111db1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111db20:	d0a00d17 	ldw	r2,-32716(gp)
8111db24:	10000326 	beq	r2,zero,8111db34 <alt_get_errno+0x24>
8111db28:	d0a00d17 	ldw	r2,-32716(gp)
8111db2c:	103ee83a 	callr	r2
8111db30:	00000106 	br	8111db38 <alt_get_errno+0x28>
8111db34:	d0a02804 	addi	r2,gp,-32608
}
8111db38:	e037883a 	mov	sp,fp
8111db3c:	dfc00117 	ldw	ra,4(sp)
8111db40:	df000017 	ldw	fp,0(sp)
8111db44:	dec00204 	addi	sp,sp,8
8111db48:	f800283a 	ret

8111db4c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
8111db4c:	defff204 	addi	sp,sp,-56
8111db50:	dfc00d15 	stw	ra,52(sp)
8111db54:	df000c15 	stw	fp,48(sp)
8111db58:	df000c04 	addi	fp,sp,48
8111db5c:	e13ffc15 	stw	r4,-16(fp)
8111db60:	e17ffd15 	stw	r5,-12(fp)
8111db64:	e1bffe15 	stw	r6,-8(fp)
8111db68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
8111db6c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
8111db70:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
8111db74:	e0bfff17 	ldw	r2,-4(fp)
8111db78:	1090000c 	andi	r2,r2,16384
8111db7c:	1005003a 	cmpeq	r2,r2,zero
8111db80:	10803fcc 	andi	r2,r2,255
8111db84:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8111db88:	00001306 	br	8111dbd8 <altera_avalon_uart_read+0x8c>
    {
      count++;
8111db8c:	e0bff517 	ldw	r2,-44(fp)
8111db90:	10800044 	addi	r2,r2,1
8111db94:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
8111db98:	e0bffd17 	ldw	r2,-12(fp)
8111db9c:	10c00044 	addi	r3,r2,1
8111dba0:	e0fffd15 	stw	r3,-12(fp)
8111dba4:	e0fffc17 	ldw	r3,-16(fp)
8111dba8:	18c00217 	ldw	r3,8(r3)
8111dbac:	e13ffc17 	ldw	r4,-16(fp)
8111dbb0:	20c7883a 	add	r3,r4,r3
8111dbb4:	18c00704 	addi	r3,r3,28
8111dbb8:	18c00003 	ldbu	r3,0(r3)
8111dbbc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8111dbc0:	e0bffc17 	ldw	r2,-16(fp)
8111dbc4:	10800217 	ldw	r2,8(r2)
8111dbc8:	10800044 	addi	r2,r2,1
8111dbcc:	10c00fcc 	andi	r3,r2,63
8111dbd0:	e0bffc17 	ldw	r2,-16(fp)
8111dbd4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8111dbd8:	e0fff517 	ldw	r3,-44(fp)
8111dbdc:	e0bffe17 	ldw	r2,-8(fp)
8111dbe0:	1880050e 	bge	r3,r2,8111dbf8 <altera_avalon_uart_read+0xac>
8111dbe4:	e0bffc17 	ldw	r2,-16(fp)
8111dbe8:	10c00217 	ldw	r3,8(r2)
8111dbec:	e0bffc17 	ldw	r2,-16(fp)
8111dbf0:	10800317 	ldw	r2,12(r2)
8111dbf4:	18bfe51e 	bne	r3,r2,8111db8c <__reset+0xfb0fdb8c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
8111dbf8:	e0bff517 	ldw	r2,-44(fp)
8111dbfc:	1000251e 	bne	r2,zero,8111dc94 <altera_avalon_uart_read+0x148>
8111dc00:	e0bffc17 	ldw	r2,-16(fp)
8111dc04:	10c00217 	ldw	r3,8(r2)
8111dc08:	e0bffc17 	ldw	r2,-16(fp)
8111dc0c:	10800317 	ldw	r2,12(r2)
8111dc10:	1880201e 	bne	r3,r2,8111dc94 <altera_avalon_uart_read+0x148>
    {
      if (!block)
8111dc14:	e0bff617 	ldw	r2,-40(fp)
8111dc18:	1000071e 	bne	r2,zero,8111dc38 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
8111dc1c:	111db100 	call	8111db10 <alt_get_errno>
8111dc20:	1007883a 	mov	r3,r2
8111dc24:	008002c4 	movi	r2,11
8111dc28:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
8111dc2c:	00800044 	movi	r2,1
8111dc30:	e0bff405 	stb	r2,-48(fp)
        break;
8111dc34:	00001b06 	br	8111dca4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111dc38:	0005303a 	rdctl	r2,status
8111dc3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111dc40:	e0fff917 	ldw	r3,-28(fp)
8111dc44:	00bfff84 	movi	r2,-2
8111dc48:	1884703a 	and	r2,r3,r2
8111dc4c:	1001703a 	wrctl	status,r2
  
  return context;
8111dc50:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
8111dc54:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8111dc58:	e0bffc17 	ldw	r2,-16(fp)
8111dc5c:	10800117 	ldw	r2,4(r2)
8111dc60:	10c02014 	ori	r3,r2,128
8111dc64:	e0bffc17 	ldw	r2,-16(fp)
8111dc68:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111dc6c:	e0bffc17 	ldw	r2,-16(fp)
8111dc70:	10800017 	ldw	r2,0(r2)
8111dc74:	10800304 	addi	r2,r2,12
8111dc78:	e0fffc17 	ldw	r3,-16(fp)
8111dc7c:	18c00117 	ldw	r3,4(r3)
8111dc80:	10c00035 	stwio	r3,0(r2)
8111dc84:	e0bff817 	ldw	r2,-32(fp)
8111dc88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111dc8c:	e0bffa17 	ldw	r2,-24(fp)
8111dc90:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
8111dc94:	e0bff517 	ldw	r2,-44(fp)
8111dc98:	1000021e 	bne	r2,zero,8111dca4 <altera_avalon_uart_read+0x158>
8111dc9c:	e0bffe17 	ldw	r2,-8(fp)
8111dca0:	103fcd1e 	bne	r2,zero,8111dbd8 <__reset+0xfb0fdbd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111dca4:	0005303a 	rdctl	r2,status
8111dca8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111dcac:	e0fffb17 	ldw	r3,-20(fp)
8111dcb0:	00bfff84 	movi	r2,-2
8111dcb4:	1884703a 	and	r2,r3,r2
8111dcb8:	1001703a 	wrctl	status,r2
  
  return context;
8111dcbc:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
8111dcc0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8111dcc4:	e0bffc17 	ldw	r2,-16(fp)
8111dcc8:	10800117 	ldw	r2,4(r2)
8111dccc:	10c02014 	ori	r3,r2,128
8111dcd0:	e0bffc17 	ldw	r2,-16(fp)
8111dcd4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111dcd8:	e0bffc17 	ldw	r2,-16(fp)
8111dcdc:	10800017 	ldw	r2,0(r2)
8111dce0:	10800304 	addi	r2,r2,12
8111dce4:	e0fffc17 	ldw	r3,-16(fp)
8111dce8:	18c00117 	ldw	r3,4(r3)
8111dcec:	10c00035 	stwio	r3,0(r2)
8111dcf0:	e0bff817 	ldw	r2,-32(fp)
8111dcf4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111dcf8:	e0bff717 	ldw	r2,-36(fp)
8111dcfc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
8111dd00:	e0bff403 	ldbu	r2,-48(fp)
8111dd04:	10000226 	beq	r2,zero,8111dd10 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
8111dd08:	00bffd44 	movi	r2,-11
8111dd0c:	00000106 	br	8111dd14 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
8111dd10:	e0bff517 	ldw	r2,-44(fp)
  }
}
8111dd14:	e037883a 	mov	sp,fp
8111dd18:	dfc00117 	ldw	ra,4(sp)
8111dd1c:	df000017 	ldw	fp,0(sp)
8111dd20:	dec00204 	addi	sp,sp,8
8111dd24:	f800283a 	ret

8111dd28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111dd28:	defffe04 	addi	sp,sp,-8
8111dd2c:	dfc00115 	stw	ra,4(sp)
8111dd30:	df000015 	stw	fp,0(sp)
8111dd34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111dd38:	d0a00d17 	ldw	r2,-32716(gp)
8111dd3c:	10000326 	beq	r2,zero,8111dd4c <alt_get_errno+0x24>
8111dd40:	d0a00d17 	ldw	r2,-32716(gp)
8111dd44:	103ee83a 	callr	r2
8111dd48:	00000106 	br	8111dd50 <alt_get_errno+0x28>
8111dd4c:	d0a02804 	addi	r2,gp,-32608
}
8111dd50:	e037883a 	mov	sp,fp
8111dd54:	dfc00117 	ldw	ra,4(sp)
8111dd58:	df000017 	ldw	fp,0(sp)
8111dd5c:	dec00204 	addi	sp,sp,8
8111dd60:	f800283a 	ret

8111dd64 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8111dd64:	defff204 	addi	sp,sp,-56
8111dd68:	dfc00d15 	stw	ra,52(sp)
8111dd6c:	df000c15 	stw	fp,48(sp)
8111dd70:	df000c04 	addi	fp,sp,48
8111dd74:	e13ffc15 	stw	r4,-16(fp)
8111dd78:	e17ffd15 	stw	r5,-12(fp)
8111dd7c:	e1bffe15 	stw	r6,-8(fp)
8111dd80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
8111dd84:	e0bffe17 	ldw	r2,-8(fp)
8111dd88:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8111dd8c:	e0bfff17 	ldw	r2,-4(fp)
8111dd90:	1090000c 	andi	r2,r2,16384
8111dd94:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8111dd98:	00003c06 	br	8111de8c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8111dd9c:	e0bffc17 	ldw	r2,-16(fp)
8111dda0:	10800517 	ldw	r2,20(r2)
8111dda4:	10800044 	addi	r2,r2,1
8111dda8:	10800fcc 	andi	r2,r2,63
8111ddac:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
8111ddb0:	e0bffc17 	ldw	r2,-16(fp)
8111ddb4:	10c00417 	ldw	r3,16(r2)
8111ddb8:	e0bff717 	ldw	r2,-36(fp)
8111ddbc:	1880221e 	bne	r3,r2,8111de48 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
8111ddc0:	e0bff517 	ldw	r2,-44(fp)
8111ddc4:	10000526 	beq	r2,zero,8111dddc <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
8111ddc8:	111dd280 	call	8111dd28 <alt_get_errno>
8111ddcc:	1007883a 	mov	r3,r2
8111ddd0:	008002c4 	movi	r2,11
8111ddd4:	18800015 	stw	r2,0(r3)
        break;
8111ddd8:	00002e06 	br	8111de94 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111dddc:	0005303a 	rdctl	r2,status
8111dde0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111dde4:	e0fff917 	ldw	r3,-28(fp)
8111dde8:	00bfff84 	movi	r2,-2
8111ddec:	1884703a 	and	r2,r3,r2
8111ddf0:	1001703a 	wrctl	status,r2
  
  return context;
8111ddf4:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8111ddf8:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8111ddfc:	e0bffc17 	ldw	r2,-16(fp)
8111de00:	10800117 	ldw	r2,4(r2)
8111de04:	10c11014 	ori	r3,r2,1088
8111de08:	e0bffc17 	ldw	r2,-16(fp)
8111de0c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111de10:	e0bffc17 	ldw	r2,-16(fp)
8111de14:	10800017 	ldw	r2,0(r2)
8111de18:	10800304 	addi	r2,r2,12
8111de1c:	e0fffc17 	ldw	r3,-16(fp)
8111de20:	18c00117 	ldw	r3,4(r3)
8111de24:	10c00035 	stwio	r3,0(r2)
8111de28:	e0bff817 	ldw	r2,-32(fp)
8111de2c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111de30:	e0bff617 	ldw	r2,-40(fp)
8111de34:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8111de38:	e0bffc17 	ldw	r2,-16(fp)
8111de3c:	10c00417 	ldw	r3,16(r2)
8111de40:	e0bff717 	ldw	r2,-36(fp)
8111de44:	18bffc26 	beq	r3,r2,8111de38 <__reset+0xfb0fde38>
      }
    }

    count--;
8111de48:	e0bff417 	ldw	r2,-48(fp)
8111de4c:	10bfffc4 	addi	r2,r2,-1
8111de50:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
8111de54:	e0bffc17 	ldw	r2,-16(fp)
8111de58:	10c00517 	ldw	r3,20(r2)
8111de5c:	e0bffd17 	ldw	r2,-12(fp)
8111de60:	11000044 	addi	r4,r2,1
8111de64:	e13ffd15 	stw	r4,-12(fp)
8111de68:	10800003 	ldbu	r2,0(r2)
8111de6c:	1009883a 	mov	r4,r2
8111de70:	e0bffc17 	ldw	r2,-16(fp)
8111de74:	10c5883a 	add	r2,r2,r3
8111de78:	10801704 	addi	r2,r2,92
8111de7c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
8111de80:	e0bffc17 	ldw	r2,-16(fp)
8111de84:	e0fff717 	ldw	r3,-36(fp)
8111de88:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8111de8c:	e0bff417 	ldw	r2,-48(fp)
8111de90:	103fc21e 	bne	r2,zero,8111dd9c <__reset+0xfb0fdd9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111de94:	0005303a 	rdctl	r2,status
8111de98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111de9c:	e0fffb17 	ldw	r3,-20(fp)
8111dea0:	00bfff84 	movi	r2,-2
8111dea4:	1884703a 	and	r2,r3,r2
8111dea8:	1001703a 	wrctl	status,r2
  
  return context;
8111deac:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8111deb0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8111deb4:	e0bffc17 	ldw	r2,-16(fp)
8111deb8:	10800117 	ldw	r2,4(r2)
8111debc:	10c11014 	ori	r3,r2,1088
8111dec0:	e0bffc17 	ldw	r2,-16(fp)
8111dec4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111dec8:	e0bffc17 	ldw	r2,-16(fp)
8111decc:	10800017 	ldw	r2,0(r2)
8111ded0:	10800304 	addi	r2,r2,12
8111ded4:	e0fffc17 	ldw	r3,-16(fp)
8111ded8:	18c00117 	ldw	r3,4(r3)
8111dedc:	10c00035 	stwio	r3,0(r2)
8111dee0:	e0bff817 	ldw	r2,-32(fp)
8111dee4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111dee8:	e0bffa17 	ldw	r2,-24(fp)
8111deec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8111def0:	e0fffe17 	ldw	r3,-8(fp)
8111def4:	e0bff417 	ldw	r2,-48(fp)
8111def8:	1885c83a 	sub	r2,r3,r2
}
8111defc:	e037883a 	mov	sp,fp
8111df00:	dfc00117 	ldw	ra,4(sp)
8111df04:	df000017 	ldw	fp,0(sp)
8111df08:	dec00204 	addi	sp,sp,8
8111df0c:	f800283a 	ret

8111df10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111df10:	defffe04 	addi	sp,sp,-8
8111df14:	dfc00115 	stw	ra,4(sp)
8111df18:	df000015 	stw	fp,0(sp)
8111df1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111df20:	d0a00d17 	ldw	r2,-32716(gp)
8111df24:	10000326 	beq	r2,zero,8111df34 <alt_get_errno+0x24>
8111df28:	d0a00d17 	ldw	r2,-32716(gp)
8111df2c:	103ee83a 	callr	r2
8111df30:	00000106 	br	8111df38 <alt_get_errno+0x28>
8111df34:	d0a02804 	addi	r2,gp,-32608
}
8111df38:	e037883a 	mov	sp,fp
8111df3c:	dfc00117 	ldw	ra,4(sp)
8111df40:	df000017 	ldw	fp,0(sp)
8111df44:	dec00204 	addi	sp,sp,8
8111df48:	f800283a 	ret

8111df4c <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
8111df4c:	defffc04 	addi	sp,sp,-16
8111df50:	df000315 	stw	fp,12(sp)
8111df54:	df000304 	addi	fp,sp,12
8111df58:	e13ffd15 	stw	r4,-12(fp)
8111df5c:	e17ffe15 	stw	r5,-8(fp)
8111df60:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8111df64:	e0bffd17 	ldw	r2,-12(fp)
8111df68:	10800037 	ldwio	r2,0(r2)
8111df6c:	1080010c 	andi	r2,r2,4
8111df70:	10000226 	beq	r2,zero,8111df7c <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
8111df74:	00bff904 	movi	r2,-28
8111df78:	00001506 	br	8111dfd0 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8111df7c:	e0bfff17 	ldw	r2,-4(fp)
8111df80:	10800017 	ldw	r2,0(r2)
8111df84:	1007883a 	mov	r3,r2
8111df88:	e0bffe17 	ldw	r2,-8(fp)
8111df8c:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8111df90:	e0bffe17 	ldw	r2,-8(fp)
8111df94:	10800104 	addi	r2,r2,4
8111df98:	e0ffff17 	ldw	r3,-4(fp)
8111df9c:	18c00117 	ldw	r3,4(r3)
8111dfa0:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8111dfa4:	e0bffe17 	ldw	r2,-8(fp)
8111dfa8:	10800204 	addi	r2,r2,8
8111dfac:	e0ffff17 	ldw	r3,-4(fp)
8111dfb0:	18c00217 	ldw	r3,8(r3)
8111dfb4:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8111dfb8:	e0bffe17 	ldw	r2,-8(fp)
8111dfbc:	10800304 	addi	r2,r2,12
8111dfc0:	e0ffff17 	ldw	r3,-4(fp)
8111dfc4:	18c00317 	ldw	r3,12(r3)
8111dfc8:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
8111dfcc:	0005883a 	mov	r2,zero
}
8111dfd0:	e037883a 	mov	sp,fp
8111dfd4:	df000017 	ldw	fp,0(sp)
8111dfd8:	dec00104 	addi	sp,sp,4
8111dfdc:	f800283a 	ret

8111dfe0 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
8111dfe0:	defffc04 	addi	sp,sp,-16
8111dfe4:	df000315 	stw	fp,12(sp)
8111dfe8:	df000304 	addi	fp,sp,12
8111dfec:	e13ffd15 	stw	r4,-12(fp)
8111dff0:	e17ffe15 	stw	r5,-8(fp)
8111dff4:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8111dff8:	e0bffd17 	ldw	r2,-12(fp)
8111dffc:	10800037 	ldwio	r2,0(r2)
8111e000:	1080010c 	andi	r2,r2,4
8111e004:	10000226 	beq	r2,zero,8111e010 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
8111e008:	00bff904 	movi	r2,-28
8111e00c:	00003b06 	br	8111e0fc <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8111e010:	e0bfff17 	ldw	r2,-4(fp)
8111e014:	10800017 	ldw	r2,0(r2)
8111e018:	1007883a 	mov	r3,r2
8111e01c:	e0bffe17 	ldw	r2,-8(fp)
8111e020:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8111e024:	e0bffe17 	ldw	r2,-8(fp)
8111e028:	10800104 	addi	r2,r2,4
8111e02c:	e0ffff17 	ldw	r3,-4(fp)
8111e030:	18c00117 	ldw	r3,4(r3)
8111e034:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8111e038:	e0bffe17 	ldw	r2,-8(fp)
8111e03c:	10800204 	addi	r2,r2,8
8111e040:	e0ffff17 	ldw	r3,-4(fp)
8111e044:	18c00217 	ldw	r3,8(r3)
8111e048:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8111e04c:	e0bffe17 	ldw	r2,-8(fp)
8111e050:	10800304 	addi	r2,r2,12
8111e054:	e0ffff17 	ldw	r3,-4(fp)
8111e058:	18c0030b 	ldhu	r3,12(r3)
8111e05c:	18ffffcc 	andi	r3,r3,65535
8111e060:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8111e064:	e0bffe17 	ldw	r2,-8(fp)
8111e068:	10800384 	addi	r2,r2,14
8111e06c:	e0ffff17 	ldw	r3,-4(fp)
8111e070:	18c00383 	ldbu	r3,14(r3)
8111e074:	18c03fcc 	andi	r3,r3,255
8111e078:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8111e07c:	e0bffe17 	ldw	r2,-8(fp)
8111e080:	108003c4 	addi	r2,r2,15
8111e084:	e0ffff17 	ldw	r3,-4(fp)
8111e088:	18c003c3 	ldbu	r3,15(r3)
8111e08c:	18c03fcc 	andi	r3,r3,255
8111e090:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8111e094:	e0bffe17 	ldw	r2,-8(fp)
8111e098:	10800404 	addi	r2,r2,16
8111e09c:	e0ffff17 	ldw	r3,-4(fp)
8111e0a0:	18c0040b 	ldhu	r3,16(r3)
8111e0a4:	18ffffcc 	andi	r3,r3,65535
8111e0a8:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8111e0ac:	e0bffe17 	ldw	r2,-8(fp)
8111e0b0:	10800484 	addi	r2,r2,18
8111e0b4:	e0ffff17 	ldw	r3,-4(fp)
8111e0b8:	18c0048b 	ldhu	r3,18(r3)
8111e0bc:	18ffffcc 	andi	r3,r3,65535
8111e0c0:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8111e0c4:	e0bffe17 	ldw	r2,-8(fp)
8111e0c8:	10800504 	addi	r2,r2,20
8111e0cc:	0007883a 	mov	r3,zero
8111e0d0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8111e0d4:	e0bffe17 	ldw	r2,-8(fp)
8111e0d8:	10800604 	addi	r2,r2,24
8111e0dc:	0007883a 	mov	r3,zero
8111e0e0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8111e0e4:	e0bffe17 	ldw	r2,-8(fp)
8111e0e8:	10800704 	addi	r2,r2,28
8111e0ec:	e0ffff17 	ldw	r3,-4(fp)
8111e0f0:	18c00717 	ldw	r3,28(r3)
8111e0f4:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
8111e0f8:	0005883a 	mov	r2,zero
}
8111e0fc:	e037883a 	mov	sp,fp
8111e100:	df000017 	ldw	fp,0(sp)
8111e104:	dec00104 	addi	sp,sp,4
8111e108:	f800283a 	ret

8111e10c <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8111e10c:	defff804 	addi	sp,sp,-32
8111e110:	dfc00715 	stw	ra,28(sp)
8111e114:	df000615 	stw	fp,24(sp)
8111e118:	df000604 	addi	fp,sp,24
8111e11c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8111e120:	e0bfff17 	ldw	r2,-4(fp)
8111e124:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8111e128:	e0bffa17 	ldw	r2,-24(fp)
8111e12c:	10801783 	ldbu	r2,94(r2)
8111e130:	10803fcc 	andi	r2,r2,255
8111e134:	10001126 	beq	r2,zero,8111e17c <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8111e138:	e0bffa17 	ldw	r2,-24(fp)
8111e13c:	10800617 	ldw	r2,24(r2)
8111e140:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8111e144:	1007883a 	mov	r3,r2
8111e148:	00bffdc4 	movi	r2,-9
8111e14c:	1884703a 	and	r2,r3,r2
8111e150:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8111e154:	e0bffa17 	ldw	r2,-24(fp)
8111e158:	10800617 	ldw	r2,24(r2)
8111e15c:	e0fffb17 	ldw	r3,-20(fp)
8111e160:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8111e164:	e0bffa17 	ldw	r2,-24(fp)
8111e168:	10800617 	ldw	r2,24(r2)
8111e16c:	10800404 	addi	r2,r2,16
8111e170:	00c00044 	movi	r3,1
8111e174:	10c00035 	stwio	r3,0(r2)
8111e178:	00001106 	br	8111e1c0 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8111e17c:	e0bffa17 	ldw	r2,-24(fp)
8111e180:	10800317 	ldw	r2,12(r2)
8111e184:	10800104 	addi	r2,r2,4
8111e188:	10800037 	ldwio	r2,0(r2)
8111e18c:	1007883a 	mov	r3,r2
8111e190:	00bffbc4 	movi	r2,-17
8111e194:	1884703a 	and	r2,r3,r2
8111e198:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8111e19c:	e0bffa17 	ldw	r2,-24(fp)
8111e1a0:	10800317 	ldw	r2,12(r2)
8111e1a4:	10800104 	addi	r2,r2,4
8111e1a8:	e0fffb17 	ldw	r3,-20(fp)
8111e1ac:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8111e1b0:	e0bffa17 	ldw	r2,-24(fp)
8111e1b4:	10800317 	ldw	r2,12(r2)
8111e1b8:	00c08004 	movi	r3,512
8111e1bc:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8111e1c0:	e0bffa17 	ldw	r2,-24(fp)
8111e1c4:	10800b17 	ldw	r2,44(r2)
8111e1c8:	10001226 	beq	r2,zero,8111e214 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111e1cc:	0005303a 	rdctl	r2,status
8111e1d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111e1d4:	e0fffd17 	ldw	r3,-12(fp)
8111e1d8:	00bfff84 	movi	r2,-2
8111e1dc:	1884703a 	and	r2,r3,r2
8111e1e0:	1001703a 	wrctl	status,r2
  
  return context;
8111e1e4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8111e1e8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
8111e1ec:	e0bffa17 	ldw	r2,-24(fp)
8111e1f0:	10800b17 	ldw	r2,44(r2)
8111e1f4:	e0fffa17 	ldw	r3,-24(fp)
8111e1f8:	18c00c17 	ldw	r3,48(r3)
8111e1fc:	1809883a 	mov	r4,r3
8111e200:	103ee83a 	callr	r2
8111e204:	e0bffc17 	ldw	r2,-16(fp)
8111e208:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111e20c:	e0bffe17 	ldw	r2,-8(fp)
8111e210:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8111e214:	e0bffa17 	ldw	r2,-24(fp)
8111e218:	10801783 	ldbu	r2,94(r2)
8111e21c:	10803fcc 	andi	r2,r2,255
8111e220:	10000a26 	beq	r2,zero,8111e24c <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8111e224:	e0bffa17 	ldw	r2,-24(fp)
8111e228:	10800617 	ldw	r2,24(r2)
8111e22c:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8111e230:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
8111e234:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8111e238:	e0bffa17 	ldw	r2,-24(fp)
8111e23c:	10800617 	ldw	r2,24(r2)
8111e240:	e0fffb17 	ldw	r3,-20(fp)
8111e244:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8111e248:	00000c06 	br	8111e27c <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8111e24c:	e0bffa17 	ldw	r2,-24(fp)
8111e250:	10800317 	ldw	r2,12(r2)
8111e254:	10800104 	addi	r2,r2,4
8111e258:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8111e25c:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8111e260:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8111e264:	e0bffa17 	ldw	r2,-24(fp)
8111e268:	10800317 	ldw	r2,12(r2)
8111e26c:	10800104 	addi	r2,r2,4
8111e270:	e0fffb17 	ldw	r3,-20(fp)
8111e274:	10c00035 	stwio	r3,0(r2)
    }

    return;
8111e278:	0001883a 	nop
}
8111e27c:	e037883a 	mov	sp,fp
8111e280:	dfc00117 	ldw	ra,4(sp)
8111e284:	df000017 	ldw	fp,0(sp)
8111e288:	dec00204 	addi	sp,sp,8
8111e28c:	f800283a 	ret

8111e290 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111e290:	defffb04 	addi	sp,sp,-20
8111e294:	df000415 	stw	fp,16(sp)
8111e298:	df000404 	addi	fp,sp,16
8111e29c:	e13ffc15 	stw	r4,-16(fp)
8111e2a0:	e17ffd15 	stw	r5,-12(fp)
8111e2a4:	e1bffe15 	stw	r6,-8(fp)
8111e2a8:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8111e2ac:	e0bffc17 	ldw	r2,-16(fp)
8111e2b0:	10c01217 	ldw	r3,72(r2)
8111e2b4:	e0800117 	ldw	r2,4(fp)
8111e2b8:	18800436 	bltu	r3,r2,8111e2cc <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8111e2bc:	e0bffc17 	ldw	r2,-16(fp)
8111e2c0:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8111e2c4:	10803fcc 	andi	r2,r2,255
8111e2c8:	10000226 	beq	r2,zero,8111e2d4 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8111e2cc:	00bffa84 	movi	r2,-22
8111e2d0:	00000e06 	br	8111e30c <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
8111e2d4:	e0bffd17 	ldw	r2,-12(fp)
8111e2d8:	e0fffe17 	ldw	r3,-8(fp)
8111e2dc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8111e2e0:	e0bffd17 	ldw	r2,-12(fp)
8111e2e4:	e0ffff17 	ldw	r3,-4(fp)
8111e2e8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111e2ec:	e0bffd17 	ldw	r2,-12(fp)
8111e2f0:	e0c00117 	ldw	r3,4(fp)
8111e2f4:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111e2f8:	e0800217 	ldw	r2,8(fp)
8111e2fc:	10e00034 	orhi	r3,r2,32768
8111e300:	e0bffd17 	ldw	r2,-12(fp)
8111e304:	10c00315 	stw	r3,12(r2)
    
    return 0;
8111e308:	0005883a 	mov	r2,zero
}
8111e30c:	e037883a 	mov	sp,fp
8111e310:	df000017 	ldw	fp,0(sp)
8111e314:	dec00104 	addi	sp,sp,4
8111e318:	f800283a 	ret

8111e31c <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8111e31c:	defff604 	addi	sp,sp,-40
8111e320:	df000915 	stw	fp,36(sp)
8111e324:	df000904 	addi	fp,sp,36
8111e328:	e13ff715 	stw	r4,-36(fp)
8111e32c:	e17ff815 	stw	r5,-32(fp)
8111e330:	e1bff915 	stw	r6,-28(fp)
8111e334:	e1fffa15 	stw	r7,-24(fp)
8111e338:	e1800317 	ldw	r6,12(fp)
8111e33c:	e1400417 	ldw	r5,16(fp)
8111e340:	e1000517 	ldw	r4,20(fp)
8111e344:	e0c00617 	ldw	r3,24(fp)
8111e348:	e0800717 	ldw	r2,28(fp)
8111e34c:	e1bffb0d 	sth	r6,-20(fp)
8111e350:	e17ffc05 	stb	r5,-16(fp)
8111e354:	e13ffd05 	stb	r4,-12(fp)
8111e358:	e0fffe0d 	sth	r3,-8(fp)
8111e35c:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8111e360:	e0bff717 	ldw	r2,-36(fp)
8111e364:	10c01217 	ldw	r3,72(r2)
8111e368:	e0800117 	ldw	r2,4(fp)
8111e36c:	18801936 	bltu	r3,r2,8111e3d4 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8111e370:	e13ff717 	ldw	r4,-36(fp)
8111e374:	20801317 	ldw	r2,76(r4)
8111e378:	20c01417 	ldw	r3,80(r4)
8111e37c:	e13ffe0b 	ldhu	r4,-8(fp)
8111e380:	213fffcc 	andi	r4,r4,65535
8111e384:	2015883a 	mov	r10,r4
8111e388:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8111e38c:	1ac01136 	bltu	r3,r11,8111e3d4 <alt_msgdma_construct_extended_descriptor+0xb8>
8111e390:	58c0011e 	bne	r11,r3,8111e398 <alt_msgdma_construct_extended_descriptor+0x7c>
8111e394:	12800f36 	bltu	r2,r10,8111e3d4 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111e398:	e13ff717 	ldw	r4,-36(fp)
8111e39c:	20801317 	ldw	r2,76(r4)
8111e3a0:	20c01417 	ldw	r3,80(r4)
8111e3a4:	e13fff0b 	ldhu	r4,-4(fp)
8111e3a8:	213fffcc 	andi	r4,r4,65535
8111e3ac:	2011883a 	mov	r8,r4
8111e3b0:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8111e3b4:	1a400736 	bltu	r3,r9,8111e3d4 <alt_msgdma_construct_extended_descriptor+0xb8>
8111e3b8:	48c0011e 	bne	r9,r3,8111e3c0 <alt_msgdma_construct_extended_descriptor+0xa4>
8111e3bc:	12000536 	bltu	r2,r8,8111e3d4 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8111e3c0:	e0bff717 	ldw	r2,-36(fp)
8111e3c4:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111e3c8:	10803fcc 	andi	r2,r2,255
8111e3cc:	10800060 	cmpeqi	r2,r2,1
8111e3d0:	1000021e 	bne	r2,zero,8111e3dc <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8111e3d4:	00bffa84 	movi	r2,-22
8111e3d8:	00002106 	br	8111e460 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
8111e3dc:	e0bff817 	ldw	r2,-32(fp)
8111e3e0:	e0fff917 	ldw	r3,-28(fp)
8111e3e4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8111e3e8:	e0bff817 	ldw	r2,-32(fp)
8111e3ec:	e0fffa17 	ldw	r3,-24(fp)
8111e3f0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111e3f4:	e0bff817 	ldw	r2,-32(fp)
8111e3f8:	e0c00117 	ldw	r3,4(fp)
8111e3fc:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8111e400:	e0bff817 	ldw	r2,-32(fp)
8111e404:	e0fffb0b 	ldhu	r3,-20(fp)
8111e408:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8111e40c:	e0bff817 	ldw	r2,-32(fp)
8111e410:	e0fffc03 	ldbu	r3,-16(fp)
8111e414:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8111e418:	e0bff817 	ldw	r2,-32(fp)
8111e41c:	e0fffd03 	ldbu	r3,-12(fp)
8111e420:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8111e424:	e0bff817 	ldw	r2,-32(fp)
8111e428:	e0fffe0b 	ldhu	r3,-8(fp)
8111e42c:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8111e430:	e0bff817 	ldw	r2,-32(fp)
8111e434:	e0ffff0b 	ldhu	r3,-4(fp)
8111e438:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8111e43c:	e0bff817 	ldw	r2,-32(fp)
8111e440:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8111e444:	e0bff817 	ldw	r2,-32(fp)
8111e448:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111e44c:	e0800217 	ldw	r2,8(fp)
8111e450:	10e00034 	orhi	r3,r2,32768
8111e454:	e0bff817 	ldw	r2,-32(fp)
8111e458:	10c00715 	stw	r3,28(r2)

  return 0 ;
8111e45c:	0005883a 	mov	r2,zero

}
8111e460:	e037883a 	mov	sp,fp
8111e464:	df000017 	ldw	fp,0(sp)
8111e468:	dec00104 	addi	sp,sp,4
8111e46c:	f800283a 	ret

8111e470 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8111e470:	defff004 	addi	sp,sp,-64
8111e474:	dfc00f15 	stw	ra,60(sp)
8111e478:	df000e15 	stw	fp,56(sp)
8111e47c:	df000e04 	addi	fp,sp,56
8111e480:	e13ffd15 	stw	r4,-12(fp)
8111e484:	e17ffe15 	stw	r5,-8(fp)
8111e488:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8111e48c:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
8111e490:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
8111e494:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111e498:	e0bffd17 	ldw	r2,-12(fp)
8111e49c:	10800317 	ldw	r2,12(r2)
8111e4a0:	10800204 	addi	r2,r2,8
8111e4a4:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8111e4a8:	10bfffcc 	andi	r2,r2,65535
8111e4ac:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111e4b0:	e0bffd17 	ldw	r2,-12(fp)
8111e4b4:	10800317 	ldw	r2,12(r2)
8111e4b8:	10800204 	addi	r2,r2,8
8111e4bc:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8111e4c0:	1004d43a 	srli	r2,r2,16
8111e4c4:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111e4c8:	e0bffd17 	ldw	r2,-12(fp)
8111e4cc:	10800917 	ldw	r2,36(r2)
8111e4d0:	e0fff617 	ldw	r3,-40(fp)
8111e4d4:	1880042e 	bgeu	r3,r2,8111e4e8 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8111e4d8:	e0bffd17 	ldw	r2,-12(fp)
8111e4dc:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111e4e0:	e0fff517 	ldw	r3,-44(fp)
8111e4e4:	18800236 	bltu	r3,r2,8111e4f0 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
8111e4e8:	00bff904 	movi	r2,-28
8111e4ec:	00008f06 	br	8111e72c <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8111e4f0:	00800804 	movi	r2,32
8111e4f4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111e4f8:	0005303a 	rdctl	r2,status
8111e4fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111e500:	e0fff717 	ldw	r3,-36(fp)
8111e504:	00bfff84 	movi	r2,-2
8111e508:	1884703a 	and	r2,r3,r2
8111e50c:	1001703a 	wrctl	status,r2
  
  return context;
8111e510:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8111e514:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111e518:	e0bffd17 	ldw	r2,-12(fp)
8111e51c:	10800317 	ldw	r2,12(r2)
8111e520:	10800104 	addi	r2,r2,4
8111e524:	e0fff317 	ldw	r3,-52(fp)
8111e528:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111e52c:	e0bffd17 	ldw	r2,-12(fp)
8111e530:	10800317 	ldw	r2,12(r2)
8111e534:	e0fffd17 	ldw	r3,-12(fp)
8111e538:	18c00317 	ldw	r3,12(r3)
8111e53c:	18c00037 	ldwio	r3,0(r3)
8111e540:	10c00035 	stwio	r3,0(r2)
8111e544:	e0bff417 	ldw	r2,-48(fp)
8111e548:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111e54c:	e0bffc17 	ldw	r2,-16(fp)
8111e550:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8111e554:	e0bffe17 	ldw	r2,-8(fp)
8111e558:	10001a26 	beq	r2,zero,8111e5c4 <alt_msgdma_descriptor_async_transfer+0x154>
8111e55c:	e0bfff17 	ldw	r2,-4(fp)
8111e560:	1000181e 	bne	r2,zero,8111e5c4 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111e564:	00000d06 	br	8111e59c <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8111e568:	01000044 	movi	r4,1
8111e56c:	111ba400 	call	8111ba40 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111e570:	e0bff20b 	ldhu	r2,-56(fp)
8111e574:	1084e230 	cmpltui	r2,r2,5000
8111e578:	1000051e 	bne	r2,zero,8111e590 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
8111e57c:	012044b4 	movhi	r4,33042
8111e580:	21097904 	addi	r4,r4,9700
8111e584:	11206740 	call	81120674 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111e588:	00bff084 	movi	r2,-62
8111e58c:	00006706 	br	8111e72c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8111e590:	e0bff20b 	ldhu	r2,-56(fp)
8111e594:	10800044 	addi	r2,r2,1
8111e598:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111e59c:	e0bffd17 	ldw	r2,-12(fp)
8111e5a0:	10c00317 	ldw	r3,12(r2)
8111e5a4:	e0bffd17 	ldw	r2,-12(fp)
8111e5a8:	10800417 	ldw	r2,16(r2)
8111e5ac:	e1bffe17 	ldw	r6,-8(fp)
8111e5b0:	100b883a 	mov	r5,r2
8111e5b4:	1809883a 	mov	r4,r3
8111e5b8:	111df4c0 	call	8111df4c <alt_msgdma_write_standard_descriptor>
8111e5bc:	103fea1e 	bne	r2,zero,8111e568 <__reset+0xfb0fe568>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8111e5c0:	00001f06 	br	8111e640 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111e5c4:	e0bffe17 	ldw	r2,-8(fp)
8111e5c8:	10001b1e 	bne	r2,zero,8111e638 <alt_msgdma_descriptor_async_transfer+0x1c8>
8111e5cc:	e0bfff17 	ldw	r2,-4(fp)
8111e5d0:	10001926 	beq	r2,zero,8111e638 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
8111e5d4:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111e5d8:	00000d06 	br	8111e610 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8111e5dc:	01000044 	movi	r4,1
8111e5e0:	111ba400 	call	8111ba40 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111e5e4:	e0bff20b 	ldhu	r2,-56(fp)
8111e5e8:	1084e230 	cmpltui	r2,r2,5000
8111e5ec:	1000051e 	bne	r2,zero,8111e604 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8111e5f0:	012044b4 	movhi	r4,33042
8111e5f4:	21098f04 	addi	r4,r4,9788
8111e5f8:	11206740 	call	81120674 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111e5fc:	00bff084 	movi	r2,-62
8111e600:	00004a06 	br	8111e72c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8111e604:	e0bff20b 	ldhu	r2,-56(fp)
8111e608:	10800044 	addi	r2,r2,1
8111e60c:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111e610:	e0bffd17 	ldw	r2,-12(fp)
8111e614:	10c00317 	ldw	r3,12(r2)
8111e618:	e0bffd17 	ldw	r2,-12(fp)
8111e61c:	10800417 	ldw	r2,16(r2)
8111e620:	e1bfff17 	ldw	r6,-4(fp)
8111e624:	100b883a 	mov	r5,r2
8111e628:	1809883a 	mov	r4,r3
8111e62c:	111dfe00 	call	8111dfe0 <alt_msgdma_write_extended_descriptor>
8111e630:	103fea1e 	bne	r2,zero,8111e5dc <__reset+0xfb0fe5dc>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111e634:	00000206 	br	8111e640 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8111e638:	00bfffc4 	movi	r2,-1
8111e63c:	00003b06 	br	8111e72c <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8111e640:	e0bffd17 	ldw	r2,-12(fp)
8111e644:	10800b17 	ldw	r2,44(r2)
8111e648:	10001c26 	beq	r2,zero,8111e6bc <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
8111e64c:	e0bffd17 	ldw	r2,-12(fp)
8111e650:	10c00d17 	ldw	r3,52(r2)
8111e654:	e0bff317 	ldw	r2,-52(fp)
8111e658:	1884b03a 	or	r2,r3,r2
8111e65c:	10800514 	ori	r2,r2,20
8111e660:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8111e664:	e0fff317 	ldw	r3,-52(fp)
8111e668:	00bff7c4 	movi	r2,-33
8111e66c:	1884703a 	and	r2,r3,r2
8111e670:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111e674:	0005303a 	rdctl	r2,status
8111e678:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111e67c:	e0fffa17 	ldw	r3,-24(fp)
8111e680:	00bfff84 	movi	r2,-2
8111e684:	1884703a 	and	r2,r3,r2
8111e688:	1001703a 	wrctl	status,r2
  
  return context;
8111e68c:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8111e690:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111e694:	e0bffd17 	ldw	r2,-12(fp)
8111e698:	10800317 	ldw	r2,12(r2)
8111e69c:	10800104 	addi	r2,r2,4
8111e6a0:	e0fff317 	ldw	r3,-52(fp)
8111e6a4:	10c00035 	stwio	r3,0(r2)
8111e6a8:	e0bff417 	ldw	r2,-48(fp)
8111e6ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111e6b0:	e0bff817 	ldw	r2,-32(fp)
8111e6b4:	1001703a 	wrctl	status,r2
8111e6b8:	00001b06 	br	8111e728 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8111e6bc:	e0bffd17 	ldw	r2,-12(fp)
8111e6c0:	10c00d17 	ldw	r3,52(r2)
8111e6c4:	e0bff317 	ldw	r2,-52(fp)
8111e6c8:	1884b03a 	or	r2,r3,r2
8111e6cc:	10800114 	ori	r2,r2,4
8111e6d0:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8111e6d4:	e0fff317 	ldw	r3,-52(fp)
8111e6d8:	00bff3c4 	movi	r2,-49
8111e6dc:	1884703a 	and	r2,r3,r2
8111e6e0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111e6e4:	0005303a 	rdctl	r2,status
8111e6e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111e6ec:	e0fffb17 	ldw	r3,-20(fp)
8111e6f0:	00bfff84 	movi	r2,-2
8111e6f4:	1884703a 	and	r2,r3,r2
8111e6f8:	1001703a 	wrctl	status,r2
  
  return context;
8111e6fc:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8111e700:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111e704:	e0bffd17 	ldw	r2,-12(fp)
8111e708:	10800317 	ldw	r2,12(r2)
8111e70c:	10800104 	addi	r2,r2,4
8111e710:	e0fff317 	ldw	r3,-52(fp)
8111e714:	10c00035 	stwio	r3,0(r2)
8111e718:	e0bff417 	ldw	r2,-48(fp)
8111e71c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111e720:	e0bff917 	ldw	r2,-28(fp)
8111e724:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8111e728:	0005883a 	mov	r2,zero
}
8111e72c:	e037883a 	mov	sp,fp
8111e730:	dfc00117 	ldw	ra,4(sp)
8111e734:	df000017 	ldw	fp,0(sp)
8111e738:	dec00204 	addi	sp,sp,8
8111e73c:	f800283a 	ret

8111e740 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8111e740:	defff004 	addi	sp,sp,-64
8111e744:	dfc00f15 	stw	ra,60(sp)
8111e748:	df000e15 	stw	fp,56(sp)
8111e74c:	df000e04 	addi	fp,sp,56
8111e750:	e13ffd15 	stw	r4,-12(fp)
8111e754:	e17ffe15 	stw	r5,-8(fp)
8111e758:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8111e75c:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
8111e760:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
8111e764:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8111e768:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111e76c:	e0bffd17 	ldw	r2,-12(fp)
8111e770:	10800317 	ldw	r2,12(r2)
8111e774:	10800204 	addi	r2,r2,8
8111e778:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8111e77c:	10bfffcc 	andi	r2,r2,65535
8111e780:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111e784:	e0bffd17 	ldw	r2,-12(fp)
8111e788:	10800317 	ldw	r2,12(r2)
8111e78c:	10800204 	addi	r2,r2,8
8111e790:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8111e794:	1004d43a 	srli	r2,r2,16
8111e798:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8111e79c:	00807804 	movi	r2,480
8111e7a0:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111e7a4:	00001906 	br	8111e80c <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8111e7a8:	01000044 	movi	r4,1
8111e7ac:	111ba400 	call	8111ba40 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111e7b0:	e0bff30b 	ldhu	r2,-52(fp)
8111e7b4:	1084e230 	cmpltui	r2,r2,5000
8111e7b8:	1000051e 	bne	r2,zero,8111e7d0 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8111e7bc:	012044b4 	movhi	r4,33042
8111e7c0:	2109a504 	addi	r4,r4,9876
8111e7c4:	11206740 	call	81120674 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
8111e7c8:	00bff084 	movi	r2,-62
8111e7cc:	0000b506 	br	8111eaa4 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
8111e7d0:	e0bff30b 	ldhu	r2,-52(fp)
8111e7d4:	10800044 	addi	r2,r2,1
8111e7d8:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111e7dc:	e0bffd17 	ldw	r2,-12(fp)
8111e7e0:	10800317 	ldw	r2,12(r2)
8111e7e4:	10800204 	addi	r2,r2,8
8111e7e8:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8111e7ec:	10bfffcc 	andi	r2,r2,65535
8111e7f0:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111e7f4:	e0bffd17 	ldw	r2,-12(fp)
8111e7f8:	10800317 	ldw	r2,12(r2)
8111e7fc:	10800204 	addi	r2,r2,8
8111e800:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8111e804:	1004d43a 	srli	r2,r2,16
8111e808:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111e80c:	e0bffd17 	ldw	r2,-12(fp)
8111e810:	10800917 	ldw	r2,36(r2)
8111e814:	e0fff517 	ldw	r3,-44(fp)
8111e818:	18bfe32e 	bgeu	r3,r2,8111e7a8 <__reset+0xfb0fe7a8>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8111e81c:	e0bffd17 	ldw	r2,-12(fp)
8111e820:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111e824:	e0fff417 	ldw	r3,-48(fp)
8111e828:	18bfdf2e 	bgeu	r3,r2,8111e7a8 <__reset+0xfb0fe7a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111e82c:	0005303a 	rdctl	r2,status
8111e830:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111e834:	e0fffc17 	ldw	r3,-16(fp)
8111e838:	00bfff84 	movi	r2,-2
8111e83c:	1884703a 	and	r2,r3,r2
8111e840:	1001703a 	wrctl	status,r2
  
  return context;
8111e844:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8111e848:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8111e84c:	e0bffd17 	ldw	r2,-12(fp)
8111e850:	10800317 	ldw	r2,12(r2)
8111e854:	10800104 	addi	r2,r2,4
8111e858:	00c00804 	movi	r3,32
8111e85c:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111e860:	e0bffd17 	ldw	r2,-12(fp)
8111e864:	10800317 	ldw	r2,12(r2)
8111e868:	e0fffd17 	ldw	r3,-12(fp)
8111e86c:	18c00317 	ldw	r3,12(r3)
8111e870:	18c00037 	ldwio	r3,0(r3)
8111e874:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8111e878:	e0bffe17 	ldw	r2,-8(fp)
8111e87c:	10001b26 	beq	r2,zero,8111e8ec <alt_msgdma_descriptor_sync_transfer+0x1ac>
8111e880:	e0bfff17 	ldw	r2,-4(fp)
8111e884:	1000191e 	bne	r2,zero,8111e8ec <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
8111e888:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111e88c:	00000d06 	br	8111e8c4 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8111e890:	01000044 	movi	r4,1
8111e894:	111ba400 	call	8111ba40 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111e898:	e0bff30b 	ldhu	r2,-52(fp)
8111e89c:	1084e230 	cmpltui	r2,r2,5000
8111e8a0:	1000051e 	bne	r2,zero,8111e8b8 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
8111e8a4:	012044b4 	movhi	r4,33042
8111e8a8:	2109b904 	addi	r4,r4,9956
8111e8ac:	11206740 	call	81120674 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111e8b0:	00bff084 	movi	r2,-62
8111e8b4:	00007b06 	br	8111eaa4 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
8111e8b8:	e0bff30b 	ldhu	r2,-52(fp)
8111e8bc:	10800044 	addi	r2,r2,1
8111e8c0:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111e8c4:	e0bffd17 	ldw	r2,-12(fp)
8111e8c8:	10c00317 	ldw	r3,12(r2)
8111e8cc:	e0bffd17 	ldw	r2,-12(fp)
8111e8d0:	10800417 	ldw	r2,16(r2)
8111e8d4:	e1bffe17 	ldw	r6,-8(fp)
8111e8d8:	100b883a 	mov	r5,r2
8111e8dc:	1809883a 	mov	r4,r3
8111e8e0:	111df4c0 	call	8111df4c <alt_msgdma_write_standard_descriptor>
8111e8e4:	103fea1e 	bne	r2,zero,8111e890 <__reset+0xfb0fe890>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8111e8e8:	00001f06 	br	8111e968 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111e8ec:	e0bffe17 	ldw	r2,-8(fp)
8111e8f0:	10001b1e 	bne	r2,zero,8111e960 <alt_msgdma_descriptor_sync_transfer+0x220>
8111e8f4:	e0bfff17 	ldw	r2,-4(fp)
8111e8f8:	10001926 	beq	r2,zero,8111e960 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
8111e8fc:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111e900:	00000d06 	br	8111e938 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8111e904:	01000044 	movi	r4,1
8111e908:	111ba400 	call	8111ba40 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111e90c:	e0bff30b 	ldhu	r2,-52(fp)
8111e910:	1084e230 	cmpltui	r2,r2,5000
8111e914:	1000051e 	bne	r2,zero,8111e92c <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
8111e918:	012044b4 	movhi	r4,33042
8111e91c:	2109ca04 	addi	r4,r4,10024
8111e920:	11206740 	call	81120674 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111e924:	00bff084 	movi	r2,-62
8111e928:	00005e06 	br	8111eaa4 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
8111e92c:	e0bff30b 	ldhu	r2,-52(fp)
8111e930:	10800044 	addi	r2,r2,1
8111e934:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111e938:	e0bffd17 	ldw	r2,-12(fp)
8111e93c:	10c00317 	ldw	r3,12(r2)
8111e940:	e0bffd17 	ldw	r2,-12(fp)
8111e944:	10800417 	ldw	r2,16(r2)
8111e948:	e1bfff17 	ldw	r6,-4(fp)
8111e94c:	100b883a 	mov	r5,r2
8111e950:	1809883a 	mov	r4,r3
8111e954:	111dfe00 	call	8111dfe0 <alt_msgdma_write_extended_descriptor>
8111e958:	103fea1e 	bne	r2,zero,8111e904 <__reset+0xfb0fe904>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111e95c:	00000206 	br	8111e968 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8111e960:	00bfffc4 	movi	r2,-1
8111e964:	00004f06 	br	8111eaa4 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8111e968:	e0bffd17 	ldw	r2,-12(fp)
8111e96c:	10800317 	ldw	r2,12(r2)
8111e970:	10800104 	addi	r2,r2,4
8111e974:	e0fffd17 	ldw	r3,-12(fp)
8111e978:	19000d17 	ldw	r4,52(r3)
8111e97c:	00fff2c4 	movi	r3,-53
8111e980:	20c6703a 	and	r3,r4,r3
8111e984:	18c00114 	ori	r3,r3,4
8111e988:	10c00035 	stwio	r3,0(r2)
8111e98c:	e0bff717 	ldw	r2,-36(fp)
8111e990:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111e994:	e0bff917 	ldw	r2,-28(fp)
8111e998:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8111e99c:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8111e9a0:	e0bffd17 	ldw	r2,-12(fp)
8111e9a4:	10800317 	ldw	r2,12(r2)
8111e9a8:	10800037 	ldwio	r2,0(r2)
8111e9ac:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8111e9b0:	00001106 	br	8111e9f8 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
8111e9b4:	01000044 	movi	r4,1
8111e9b8:	111ba400 	call	8111ba40 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111e9bc:	e0bff30b 	ldhu	r2,-52(fp)
8111e9c0:	1084e230 	cmpltui	r2,r2,5000
8111e9c4:	1000051e 	bne	r2,zero,8111e9dc <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8111e9c8:	012044b4 	movhi	r4,33042
8111e9cc:	2109db04 	addi	r4,r4,10092
8111e9d0:	11206740 	call	81120674 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
8111e9d4:	00bff084 	movi	r2,-62
8111e9d8:	00003206 	br	8111eaa4 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
8111e9dc:	e0bff30b 	ldhu	r2,-52(fp)
8111e9e0:	10800044 	addi	r2,r2,1
8111e9e4:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8111e9e8:	e0bffd17 	ldw	r2,-12(fp)
8111e9ec:	10800317 	ldw	r2,12(r2)
8111e9f0:	10800037 	ldwio	r2,0(r2)
8111e9f4:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8111e9f8:	e0fff217 	ldw	r3,-56(fp)
8111e9fc:	e0bff817 	ldw	r2,-32(fp)
8111ea00:	1884703a 	and	r2,r3,r2
8111ea04:	1000031e 	bne	r2,zero,8111ea14 <alt_msgdma_descriptor_sync_transfer+0x2d4>
8111ea08:	e0bff217 	ldw	r2,-56(fp)
8111ea0c:	1080004c 	andi	r2,r2,1
8111ea10:	103fe81e 	bne	r2,zero,8111e9b4 <__reset+0xfb0fe9b4>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8111ea14:	e0fff217 	ldw	r3,-56(fp)
8111ea18:	e0bff817 	ldw	r2,-32(fp)
8111ea1c:	1884703a 	and	r2,r3,r2
8111ea20:	10000226 	beq	r2,zero,8111ea2c <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
8111ea24:	e0bff817 	ldw	r2,-32(fp)
8111ea28:	00001e06 	br	8111eaa4 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8111ea2c:	e0bffd17 	ldw	r2,-12(fp)
8111ea30:	10800317 	ldw	r2,12(r2)
8111ea34:	10800104 	addi	r2,r2,4
8111ea38:	10800037 	ldwio	r2,0(r2)
8111ea3c:	10800814 	ori	r2,r2,32
8111ea40:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111ea44:	0005303a 	rdctl	r2,status
8111ea48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111ea4c:	e0fffa17 	ldw	r3,-24(fp)
8111ea50:	00bfff84 	movi	r2,-2
8111ea54:	1884703a 	and	r2,r3,r2
8111ea58:	1001703a 	wrctl	status,r2
  
  return context;
8111ea5c:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8111ea60:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111ea64:	e0bffd17 	ldw	r2,-12(fp)
8111ea68:	10800317 	ldw	r2,12(r2)
8111ea6c:	10800104 	addi	r2,r2,4
8111ea70:	e0fff617 	ldw	r3,-40(fp)
8111ea74:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111ea78:	e0bffd17 	ldw	r2,-12(fp)
8111ea7c:	10800317 	ldw	r2,12(r2)
8111ea80:	e0fffd17 	ldw	r3,-12(fp)
8111ea84:	18c00317 	ldw	r3,12(r3)
8111ea88:	18c00037 	ldwio	r3,0(r3)
8111ea8c:	10c00035 	stwio	r3,0(r2)
8111ea90:	e0bff717 	ldw	r2,-36(fp)
8111ea94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111ea98:	e0bffb17 	ldw	r2,-20(fp)
8111ea9c:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8111eaa0:	0005883a 	mov	r2,zero

}
8111eaa4:	e037883a 	mov	sp,fp
8111eaa8:	dfc00117 	ldw	ra,4(sp)
8111eaac:	df000017 	ldw	fp,0(sp)
8111eab0:	dec00204 	addi	sp,sp,8
8111eab4:	f800283a 	ret

8111eab8 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8111eab8:	defff804 	addi	sp,sp,-32
8111eabc:	dfc00715 	stw	ra,28(sp)
8111eac0:	df000615 	stw	fp,24(sp)
8111eac4:	df000604 	addi	fp,sp,24
8111eac8:	e13ffc15 	stw	r4,-16(fp)
8111eacc:	e17ffd15 	stw	r5,-12(fp)
8111ead0:	e1bffe15 	stw	r6,-8(fp)
8111ead4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8111ead8:	e0800217 	ldw	r2,8(fp)
8111eadc:	d8800115 	stw	r2,4(sp)
8111eae0:	e0bfff17 	ldw	r2,-4(fp)
8111eae4:	d8800015 	stw	r2,0(sp)
8111eae8:	e1fffe17 	ldw	r7,-8(fp)
8111eaec:	000d883a 	mov	r6,zero
8111eaf0:	e17ffd17 	ldw	r5,-12(fp)
8111eaf4:	e13ffc17 	ldw	r4,-16(fp)
8111eaf8:	111e2900 	call	8111e290 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8111eafc:	e037883a 	mov	sp,fp
8111eb00:	dfc00117 	ldw	ra,4(sp)
8111eb04:	df000017 	ldw	fp,0(sp)
8111eb08:	dec00204 	addi	sp,sp,8
8111eb0c:	f800283a 	ret

8111eb10 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8111eb10:	defff804 	addi	sp,sp,-32
8111eb14:	dfc00715 	stw	ra,28(sp)
8111eb18:	df000615 	stw	fp,24(sp)
8111eb1c:	df000604 	addi	fp,sp,24
8111eb20:	e13ffc15 	stw	r4,-16(fp)
8111eb24:	e17ffd15 	stw	r5,-12(fp)
8111eb28:	e1bffe15 	stw	r6,-8(fp)
8111eb2c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8111eb30:	e0800217 	ldw	r2,8(fp)
8111eb34:	d8800115 	stw	r2,4(sp)
8111eb38:	e0bfff17 	ldw	r2,-4(fp)
8111eb3c:	d8800015 	stw	r2,0(sp)
8111eb40:	000f883a 	mov	r7,zero
8111eb44:	e1bffe17 	ldw	r6,-8(fp)
8111eb48:	e17ffd17 	ldw	r5,-12(fp)
8111eb4c:	e13ffc17 	ldw	r4,-16(fp)
8111eb50:	111e2900 	call	8111e290 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8111eb54:	e037883a 	mov	sp,fp
8111eb58:	dfc00117 	ldw	ra,4(sp)
8111eb5c:	df000017 	ldw	fp,0(sp)
8111eb60:	dec00204 	addi	sp,sp,8
8111eb64:	f800283a 	ret

8111eb68 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111eb68:	defff804 	addi	sp,sp,-32
8111eb6c:	dfc00715 	stw	ra,28(sp)
8111eb70:	df000615 	stw	fp,24(sp)
8111eb74:	df000604 	addi	fp,sp,24
8111eb78:	e13ffc15 	stw	r4,-16(fp)
8111eb7c:	e17ffd15 	stw	r5,-12(fp)
8111eb80:	e1bffe15 	stw	r6,-8(fp)
8111eb84:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8111eb88:	e0800317 	ldw	r2,12(fp)
8111eb8c:	d8800115 	stw	r2,4(sp)
8111eb90:	e0800217 	ldw	r2,8(fp)
8111eb94:	d8800015 	stw	r2,0(sp)
8111eb98:	e1ffff17 	ldw	r7,-4(fp)
8111eb9c:	e1bffe17 	ldw	r6,-8(fp)
8111eba0:	e17ffd17 	ldw	r5,-12(fp)
8111eba4:	e13ffc17 	ldw	r4,-16(fp)
8111eba8:	111e2900 	call	8111e290 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8111ebac:	e037883a 	mov	sp,fp
8111ebb0:	dfc00117 	ldw	ra,4(sp)
8111ebb4:	df000017 	ldw	fp,0(sp)
8111ebb8:	dec00204 	addi	sp,sp,8
8111ebbc:	f800283a 	ret

8111ebc0 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
8111ebc0:	defff004 	addi	sp,sp,-64
8111ebc4:	dfc00f15 	stw	ra,60(sp)
8111ebc8:	df000e15 	stw	fp,56(sp)
8111ebcc:	df000e04 	addi	fp,sp,56
8111ebd0:	e13ff915 	stw	r4,-28(fp)
8111ebd4:	e17ffa15 	stw	r5,-24(fp)
8111ebd8:	e1bffb15 	stw	r6,-20(fp)
8111ebdc:	e1fffc15 	stw	r7,-16(fp)
8111ebe0:	e1000317 	ldw	r4,12(fp)
8111ebe4:	e0c00417 	ldw	r3,16(fp)
8111ebe8:	e0800517 	ldw	r2,20(fp)
8111ebec:	e13ffd0d 	sth	r4,-12(fp)
8111ebf0:	e0fffe05 	stb	r3,-8(fp)
8111ebf4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8111ebf8:	e0bffd0b 	ldhu	r2,-12(fp)
8111ebfc:	e0fffe03 	ldbu	r3,-8(fp)
8111ec00:	e13fff0b 	ldhu	r4,-4(fp)
8111ec04:	d9000615 	stw	r4,24(sp)
8111ec08:	d8000515 	stw	zero,20(sp)
8111ec0c:	d8c00415 	stw	r3,16(sp)
8111ec10:	d8000315 	stw	zero,12(sp)
8111ec14:	d8800215 	stw	r2,8(sp)
8111ec18:	e0800217 	ldw	r2,8(fp)
8111ec1c:	d8800115 	stw	r2,4(sp)
8111ec20:	e0bffc17 	ldw	r2,-16(fp)
8111ec24:	d8800015 	stw	r2,0(sp)
8111ec28:	e1fffb17 	ldw	r7,-20(fp)
8111ec2c:	000d883a 	mov	r6,zero
8111ec30:	e17ffa17 	ldw	r5,-24(fp)
8111ec34:	e13ff917 	ldw	r4,-28(fp)
8111ec38:	111e31c0 	call	8111e31c <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8111ec3c:	e037883a 	mov	sp,fp
8111ec40:	dfc00117 	ldw	ra,4(sp)
8111ec44:	df000017 	ldw	fp,0(sp)
8111ec48:	dec00204 	addi	sp,sp,8
8111ec4c:	f800283a 	ret

8111ec50 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8111ec50:	defff004 	addi	sp,sp,-64
8111ec54:	dfc00f15 	stw	ra,60(sp)
8111ec58:	df000e15 	stw	fp,56(sp)
8111ec5c:	df000e04 	addi	fp,sp,56
8111ec60:	e13ff915 	stw	r4,-28(fp)
8111ec64:	e17ffa15 	stw	r5,-24(fp)
8111ec68:	e1bffb15 	stw	r6,-20(fp)
8111ec6c:	e1fffc15 	stw	r7,-16(fp)
8111ec70:	e1000317 	ldw	r4,12(fp)
8111ec74:	e0c00417 	ldw	r3,16(fp)
8111ec78:	e0800517 	ldw	r2,20(fp)
8111ec7c:	e13ffd0d 	sth	r4,-12(fp)
8111ec80:	e0fffe05 	stb	r3,-8(fp)
8111ec84:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8111ec88:	e0bffd0b 	ldhu	r2,-12(fp)
8111ec8c:	e0fffe03 	ldbu	r3,-8(fp)
8111ec90:	e13fff0b 	ldhu	r4,-4(fp)
8111ec94:	d8000615 	stw	zero,24(sp)
8111ec98:	d9000515 	stw	r4,20(sp)
8111ec9c:	d8000415 	stw	zero,16(sp)
8111eca0:	d8c00315 	stw	r3,12(sp)
8111eca4:	d8800215 	stw	r2,8(sp)
8111eca8:	e0800217 	ldw	r2,8(fp)
8111ecac:	d8800115 	stw	r2,4(sp)
8111ecb0:	e0bffc17 	ldw	r2,-16(fp)
8111ecb4:	d8800015 	stw	r2,0(sp)
8111ecb8:	000f883a 	mov	r7,zero
8111ecbc:	e1bffb17 	ldw	r6,-20(fp)
8111ecc0:	e17ffa17 	ldw	r5,-24(fp)
8111ecc4:	e13ff917 	ldw	r4,-28(fp)
8111ecc8:	111e31c0 	call	8111e31c <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8111eccc:	e037883a 	mov	sp,fp
8111ecd0:	dfc00117 	ldw	ra,4(sp)
8111ecd4:	df000017 	ldw	fp,0(sp)
8111ecd8:	dec00204 	addi	sp,sp,8
8111ecdc:	f800283a 	ret

8111ece0 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8111ece0:	deffee04 	addi	sp,sp,-72
8111ece4:	dfc01115 	stw	ra,68(sp)
8111ece8:	df001015 	stw	fp,64(sp)
8111ecec:	df001004 	addi	fp,sp,64
8111ecf0:	e13ff715 	stw	r4,-36(fp)
8111ecf4:	e17ff815 	stw	r5,-32(fp)
8111ecf8:	e1bff915 	stw	r6,-28(fp)
8111ecfc:	e1fffa15 	stw	r7,-24(fp)
8111ed00:	e1800417 	ldw	r6,16(fp)
8111ed04:	e1400517 	ldw	r5,20(fp)
8111ed08:	e1000617 	ldw	r4,24(fp)
8111ed0c:	e0c00717 	ldw	r3,28(fp)
8111ed10:	e0800817 	ldw	r2,32(fp)
8111ed14:	e1bffb0d 	sth	r6,-20(fp)
8111ed18:	e17ffc05 	stb	r5,-16(fp)
8111ed1c:	e13ffd05 	stb	r4,-12(fp)
8111ed20:	e0fffe0d 	sth	r3,-8(fp)
8111ed24:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8111ed28:	e0bffb0b 	ldhu	r2,-20(fp)
8111ed2c:	e0fffc03 	ldbu	r3,-16(fp)
8111ed30:	e13ffd03 	ldbu	r4,-12(fp)
8111ed34:	e17ffe0b 	ldhu	r5,-8(fp)
8111ed38:	e1bfff0b 	ldhu	r6,-4(fp)
8111ed3c:	d9800615 	stw	r6,24(sp)
8111ed40:	d9400515 	stw	r5,20(sp)
8111ed44:	d9000415 	stw	r4,16(sp)
8111ed48:	d8c00315 	stw	r3,12(sp)
8111ed4c:	d8800215 	stw	r2,8(sp)
8111ed50:	e0800317 	ldw	r2,12(fp)
8111ed54:	d8800115 	stw	r2,4(sp)
8111ed58:	e0800217 	ldw	r2,8(fp)
8111ed5c:	d8800015 	stw	r2,0(sp)
8111ed60:	e1fffa17 	ldw	r7,-24(fp)
8111ed64:	e1bff917 	ldw	r6,-28(fp)
8111ed68:	e17ff817 	ldw	r5,-32(fp)
8111ed6c:	e13ff717 	ldw	r4,-36(fp)
8111ed70:	111e31c0 	call	8111e31c <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8111ed74:	e037883a 	mov	sp,fp
8111ed78:	dfc00117 	ldw	ra,4(sp)
8111ed7c:	df000017 	ldw	fp,0(sp)
8111ed80:	dec00204 	addi	sp,sp,8
8111ed84:	f800283a 	ret

8111ed88 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111ed88:	defffb04 	addi	sp,sp,-20
8111ed8c:	df000415 	stw	fp,16(sp)
8111ed90:	df000404 	addi	fp,sp,16
8111ed94:	e13ffc15 	stw	r4,-16(fp)
8111ed98:	e17ffd15 	stw	r5,-12(fp)
8111ed9c:	e1bffe15 	stw	r6,-8(fp)
8111eda0:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8111eda4:	e0bffc17 	ldw	r2,-16(fp)
8111eda8:	10c01217 	ldw	r3,72(r2)
8111edac:	e0800117 	ldw	r2,4(fp)
8111edb0:	18800436 	bltu	r3,r2,8111edc4 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8111edb4:	e0bffc17 	ldw	r2,-16(fp)
8111edb8:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8111edbc:	10803fcc 	andi	r2,r2,255
8111edc0:	10000226 	beq	r2,zero,8111edcc <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8111edc4:	00bffa84 	movi	r2,-22
8111edc8:	00001406 	br	8111ee1c <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
8111edcc:	e0bffd17 	ldw	r2,-12(fp)
8111edd0:	e0fffe17 	ldw	r3,-8(fp)
8111edd4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8111edd8:	e0bffd17 	ldw	r2,-12(fp)
8111eddc:	e0ffff17 	ldw	r3,-4(fp)
8111ede0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111ede4:	e0bffd17 	ldw	r2,-12(fp)
8111ede8:	e0c00117 	ldw	r3,4(fp)
8111edec:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8111edf0:	e0fffd17 	ldw	r3,-12(fp)
8111edf4:	e0bffd17 	ldw	r2,-12(fp)
8111edf8:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111edfc:	e0c00217 	ldw	r3,8(fp)
8111ee00:	00900034 	movhi	r2,16384
8111ee04:	10bfffc4 	addi	r2,r2,-1
8111ee08:	1884703a 	and	r2,r3,r2
8111ee0c:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8111ee10:	e0bffd17 	ldw	r2,-12(fp)
8111ee14:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8111ee18:	0005883a 	mov	r2,zero
}
8111ee1c:	e037883a 	mov	sp,fp
8111ee20:	df000017 	ldw	fp,0(sp)
8111ee24:	dec00104 	addi	sp,sp,4
8111ee28:	f800283a 	ret

8111ee2c <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8111ee2c:	defff404 	addi	sp,sp,-48
8111ee30:	df000b15 	stw	fp,44(sp)
8111ee34:	df000b04 	addi	fp,sp,44
8111ee38:	e13ff715 	stw	r4,-36(fp)
8111ee3c:	e17ff815 	stw	r5,-32(fp)
8111ee40:	e1bff915 	stw	r6,-28(fp)
8111ee44:	e1fffa15 	stw	r7,-24(fp)
8111ee48:	e1800517 	ldw	r6,20(fp)
8111ee4c:	e1400617 	ldw	r5,24(fp)
8111ee50:	e1000717 	ldw	r4,28(fp)
8111ee54:	e0c00817 	ldw	r3,32(fp)
8111ee58:	e0800917 	ldw	r2,36(fp)
8111ee5c:	e1bffb0d 	sth	r6,-20(fp)
8111ee60:	e17ffc05 	stb	r5,-16(fp)
8111ee64:	e13ffd05 	stb	r4,-12(fp)
8111ee68:	e0fffe0d 	sth	r3,-8(fp)
8111ee6c:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8111ee70:	e0bff717 	ldw	r2,-36(fp)
8111ee74:	10c01217 	ldw	r3,72(r2)
8111ee78:	e0800317 	ldw	r2,12(fp)
8111ee7c:	18801936 	bltu	r3,r2,8111eee4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8111ee80:	e13ff717 	ldw	r4,-36(fp)
8111ee84:	20801317 	ldw	r2,76(r4)
8111ee88:	20c01417 	ldw	r3,80(r4)
8111ee8c:	e13ffe0b 	ldhu	r4,-8(fp)
8111ee90:	213fffcc 	andi	r4,r4,65535
8111ee94:	2015883a 	mov	r10,r4
8111ee98:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8111ee9c:	1ac01136 	bltu	r3,r11,8111eee4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8111eea0:	58c0011e 	bne	r11,r3,8111eea8 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
8111eea4:	12800f36 	bltu	r2,r10,8111eee4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111eea8:	e13ff717 	ldw	r4,-36(fp)
8111eeac:	20801317 	ldw	r2,76(r4)
8111eeb0:	20c01417 	ldw	r3,80(r4)
8111eeb4:	e13fff0b 	ldhu	r4,-4(fp)
8111eeb8:	213fffcc 	andi	r4,r4,65535
8111eebc:	2011883a 	mov	r8,r4
8111eec0:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8111eec4:	1a400736 	bltu	r3,r9,8111eee4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8111eec8:	48c0011e 	bne	r9,r3,8111eed0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
8111eecc:	12000536 	bltu	r2,r8,8111eee4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8111eed0:	e0bff717 	ldw	r2,-36(fp)
8111eed4:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111eed8:	10803fcc 	andi	r2,r2,255
8111eedc:	10800060 	cmpeqi	r2,r2,1
8111eee0:	1000021e 	bne	r2,zero,8111eeec <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8111eee4:	00bffa84 	movi	r2,-22
8111eee8:	00003106 	br	8111efb0 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
8111eeec:	e0bff817 	ldw	r2,-32(fp)
8111eef0:	e0fff917 	ldw	r3,-28(fp)
8111eef4:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8111eef8:	e0bff817 	ldw	r2,-32(fp)
8111eefc:	e0fffa17 	ldw	r3,-24(fp)
8111ef00:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8111ef04:	e0bff817 	ldw	r2,-32(fp)
8111ef08:	e0c00117 	ldw	r3,4(fp)
8111ef0c:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8111ef10:	e0bff817 	ldw	r2,-32(fp)
8111ef14:	e0c00217 	ldw	r3,8(fp)
8111ef18:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111ef1c:	e0bff817 	ldw	r2,-32(fp)
8111ef20:	e0c00317 	ldw	r3,12(fp)
8111ef24:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8111ef28:	e0bff817 	ldw	r2,-32(fp)
8111ef2c:	e0fffb0b 	ldhu	r3,-20(fp)
8111ef30:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8111ef34:	e0bff817 	ldw	r2,-32(fp)
8111ef38:	e0fffc03 	ldbu	r3,-16(fp)
8111ef3c:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8111ef40:	e0bff817 	ldw	r2,-32(fp)
8111ef44:	e0fffd03 	ldbu	r3,-12(fp)
8111ef48:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8111ef4c:	e0bff817 	ldw	r2,-32(fp)
8111ef50:	e0fffe0b 	ldhu	r3,-8(fp)
8111ef54:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8111ef58:	e0bff817 	ldw	r2,-32(fp)
8111ef5c:	e0ffff0b 	ldhu	r3,-4(fp)
8111ef60:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8111ef64:	e0bff817 	ldw	r2,-32(fp)
8111ef68:	1019883a 	mov	r12,r2
8111ef6c:	001b883a 	mov	r13,zero
8111ef70:	e33ff515 	stw	r12,-44(fp)
8111ef74:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8111ef78:	e0fff517 	ldw	r3,-44(fp)
8111ef7c:	e0bff817 	ldw	r2,-32(fp)
8111ef80:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8111ef84:	e0fff617 	ldw	r3,-40(fp)
8111ef88:	e0bff817 	ldw	r2,-32(fp)
8111ef8c:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111ef90:	e0c00417 	ldw	r3,16(fp)
8111ef94:	00900034 	movhi	r2,16384
8111ef98:	10bfffc4 	addi	r2,r2,-1
8111ef9c:	1884703a 	and	r2,r3,r2
8111efa0:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8111efa4:	e0bff817 	ldw	r2,-32(fp)
8111efa8:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8111efac:	0005883a 	mov	r2,zero
}
8111efb0:	e037883a 	mov	sp,fp
8111efb4:	df000017 	ldw	fp,0(sp)
8111efb8:	dec00104 	addi	sp,sp,4
8111efbc:	f800283a 	ret

8111efc0 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
8111efc0:	defff804 	addi	sp,sp,-32
8111efc4:	dfc00715 	stw	ra,28(sp)
8111efc8:	df000615 	stw	fp,24(sp)
8111efcc:	df000604 	addi	fp,sp,24
8111efd0:	e13ffc15 	stw	r4,-16(fp)
8111efd4:	e17ffd15 	stw	r5,-12(fp)
8111efd8:	e1bffe15 	stw	r6,-8(fp)
8111efdc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8111efe0:	e0800317 	ldw	r2,12(fp)
8111efe4:	d8800115 	stw	r2,4(sp)
8111efe8:	e0800217 	ldw	r2,8(fp)
8111efec:	d8800015 	stw	r2,0(sp)
8111eff0:	e1ffff17 	ldw	r7,-4(fp)
8111eff4:	e1bffe17 	ldw	r6,-8(fp)
8111eff8:	e17ffd17 	ldw	r5,-12(fp)
8111effc:	e13ffc17 	ldw	r4,-16(fp)
8111f000:	111ed880 	call	8111ed88 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
8111f004:	e037883a 	mov	sp,fp
8111f008:	dfc00117 	ldw	ra,4(sp)
8111f00c:	df000017 	ldw	fp,0(sp)
8111f010:	dec00204 	addi	sp,sp,8
8111f014:	f800283a 	ret

8111f018 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111f018:	defff804 	addi	sp,sp,-32
8111f01c:	dfc00715 	stw	ra,28(sp)
8111f020:	df000615 	stw	fp,24(sp)
8111f024:	df000604 	addi	fp,sp,24
8111f028:	e13ffc15 	stw	r4,-16(fp)
8111f02c:	e17ffd15 	stw	r5,-12(fp)
8111f030:	e1bffe15 	stw	r6,-8(fp)
8111f034:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8111f038:	e0800217 	ldw	r2,8(fp)
8111f03c:	d8800115 	stw	r2,4(sp)
8111f040:	e0bfff17 	ldw	r2,-4(fp)
8111f044:	d8800015 	stw	r2,0(sp)
8111f048:	e1fffe17 	ldw	r7,-8(fp)
8111f04c:	000d883a 	mov	r6,zero
8111f050:	e17ffd17 	ldw	r5,-12(fp)
8111f054:	e13ffc17 	ldw	r4,-16(fp)
8111f058:	111ed880 	call	8111ed88 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
8111f05c:	e037883a 	mov	sp,fp
8111f060:	dfc00117 	ldw	ra,4(sp)
8111f064:	df000017 	ldw	fp,0(sp)
8111f068:	dec00204 	addi	sp,sp,8
8111f06c:	f800283a 	ret

8111f070 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111f070:	defff804 	addi	sp,sp,-32
8111f074:	dfc00715 	stw	ra,28(sp)
8111f078:	df000615 	stw	fp,24(sp)
8111f07c:	df000604 	addi	fp,sp,24
8111f080:	e13ffc15 	stw	r4,-16(fp)
8111f084:	e17ffd15 	stw	r5,-12(fp)
8111f088:	e1bffe15 	stw	r6,-8(fp)
8111f08c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8111f090:	e0800217 	ldw	r2,8(fp)
8111f094:	d8800115 	stw	r2,4(sp)
8111f098:	e0bfff17 	ldw	r2,-4(fp)
8111f09c:	d8800015 	stw	r2,0(sp)
8111f0a0:	000f883a 	mov	r7,zero
8111f0a4:	e1bffe17 	ldw	r6,-8(fp)
8111f0a8:	e17ffd17 	ldw	r5,-12(fp)
8111f0ac:	e13ffc17 	ldw	r4,-16(fp)
8111f0b0:	111ed880 	call	8111ed88 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8111f0b4:	e037883a 	mov	sp,fp
8111f0b8:	dfc00117 	ldw	ra,4(sp)
8111f0bc:	df000017 	ldw	fp,0(sp)
8111f0c0:	dec00204 	addi	sp,sp,8
8111f0c4:	f800283a 	ret

8111f0c8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8111f0c8:	deffee04 	addi	sp,sp,-72
8111f0cc:	dfc01115 	stw	ra,68(sp)
8111f0d0:	df001015 	stw	fp,64(sp)
8111f0d4:	df001004 	addi	fp,sp,64
8111f0d8:	e13ff915 	stw	r4,-28(fp)
8111f0dc:	e17ffa15 	stw	r5,-24(fp)
8111f0e0:	e1bffb15 	stw	r6,-20(fp)
8111f0e4:	e1fffc15 	stw	r7,-16(fp)
8111f0e8:	e1000417 	ldw	r4,16(fp)
8111f0ec:	e0c00517 	ldw	r3,20(fp)
8111f0f0:	e0800617 	ldw	r2,24(fp)
8111f0f4:	e13ffd0d 	sth	r4,-12(fp)
8111f0f8:	e0fffe05 	stb	r3,-8(fp)
8111f0fc:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8111f100:	e0bffd0b 	ldhu	r2,-12(fp)
8111f104:	e0fffe03 	ldbu	r3,-8(fp)
8111f108:	e13fff0b 	ldhu	r4,-4(fp)
8111f10c:	d9000815 	stw	r4,32(sp)
8111f110:	d8000715 	stw	zero,28(sp)
8111f114:	d8c00615 	stw	r3,24(sp)
8111f118:	d8000515 	stw	zero,20(sp)
8111f11c:	d8800415 	stw	r2,16(sp)
8111f120:	e0800317 	ldw	r2,12(fp)
8111f124:	d8800315 	stw	r2,12(sp)
8111f128:	e0800217 	ldw	r2,8(fp)
8111f12c:	d8800215 	stw	r2,8(sp)
8111f130:	e0bffc17 	ldw	r2,-16(fp)
8111f134:	d8800115 	stw	r2,4(sp)
8111f138:	e0bffb17 	ldw	r2,-20(fp)
8111f13c:	d8800015 	stw	r2,0(sp)
8111f140:	000f883a 	mov	r7,zero
8111f144:	000d883a 	mov	r6,zero
8111f148:	e17ffa17 	ldw	r5,-24(fp)
8111f14c:	e13ff917 	ldw	r4,-28(fp)
8111f150:	111ee2c0 	call	8111ee2c <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8111f154:	e037883a 	mov	sp,fp
8111f158:	dfc00117 	ldw	ra,4(sp)
8111f15c:	df000017 	ldw	fp,0(sp)
8111f160:	dec00204 	addi	sp,sp,8
8111f164:	f800283a 	ret

8111f168 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8111f168:	deffee04 	addi	sp,sp,-72
8111f16c:	dfc01115 	stw	ra,68(sp)
8111f170:	df001015 	stw	fp,64(sp)
8111f174:	df001004 	addi	fp,sp,64
8111f178:	e13ff915 	stw	r4,-28(fp)
8111f17c:	e17ffa15 	stw	r5,-24(fp)
8111f180:	e1bffb15 	stw	r6,-20(fp)
8111f184:	e1fffc15 	stw	r7,-16(fp)
8111f188:	e1000417 	ldw	r4,16(fp)
8111f18c:	e0c00517 	ldw	r3,20(fp)
8111f190:	e0800617 	ldw	r2,24(fp)
8111f194:	e13ffd0d 	sth	r4,-12(fp)
8111f198:	e0fffe05 	stb	r3,-8(fp)
8111f19c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8111f1a0:	e0bffd0b 	ldhu	r2,-12(fp)
8111f1a4:	e0fffe03 	ldbu	r3,-8(fp)
8111f1a8:	e13fff0b 	ldhu	r4,-4(fp)
8111f1ac:	d8000815 	stw	zero,32(sp)
8111f1b0:	d9000715 	stw	r4,28(sp)
8111f1b4:	d8000615 	stw	zero,24(sp)
8111f1b8:	d8c00515 	stw	r3,20(sp)
8111f1bc:	d8800415 	stw	r2,16(sp)
8111f1c0:	e0800317 	ldw	r2,12(fp)
8111f1c4:	d8800315 	stw	r2,12(sp)
8111f1c8:	e0800217 	ldw	r2,8(fp)
8111f1cc:	d8800215 	stw	r2,8(sp)
8111f1d0:	d8000115 	stw	zero,4(sp)
8111f1d4:	d8000015 	stw	zero,0(sp)
8111f1d8:	e1fffc17 	ldw	r7,-16(fp)
8111f1dc:	e1bffb17 	ldw	r6,-20(fp)
8111f1e0:	e17ffa17 	ldw	r5,-24(fp)
8111f1e4:	e13ff917 	ldw	r4,-28(fp)
8111f1e8:	111ee2c0 	call	8111ee2c <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
8111f1ec:	e037883a 	mov	sp,fp
8111f1f0:	dfc00117 	ldw	ra,4(sp)
8111f1f4:	df000017 	ldw	fp,0(sp)
8111f1f8:	dec00204 	addi	sp,sp,8
8111f1fc:	f800283a 	ret

8111f200 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8111f200:	deffec04 	addi	sp,sp,-80
8111f204:	dfc01315 	stw	ra,76(sp)
8111f208:	df001215 	stw	fp,72(sp)
8111f20c:	df001204 	addi	fp,sp,72
8111f210:	e13ff715 	stw	r4,-36(fp)
8111f214:	e17ff815 	stw	r5,-32(fp)
8111f218:	e1bff915 	stw	r6,-28(fp)
8111f21c:	e1fffa15 	stw	r7,-24(fp)
8111f220:	e1800617 	ldw	r6,24(fp)
8111f224:	e1400717 	ldw	r5,28(fp)
8111f228:	e1000817 	ldw	r4,32(fp)
8111f22c:	e0c00917 	ldw	r3,36(fp)
8111f230:	e0800a17 	ldw	r2,40(fp)
8111f234:	e1bffb0d 	sth	r6,-20(fp)
8111f238:	e17ffc05 	stb	r5,-16(fp)
8111f23c:	e13ffd05 	stb	r4,-12(fp)
8111f240:	e0fffe0d 	sth	r3,-8(fp)
8111f244:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8111f248:	e0bffb0b 	ldhu	r2,-20(fp)
8111f24c:	e0fffc03 	ldbu	r3,-16(fp)
8111f250:	e13ffd03 	ldbu	r4,-12(fp)
8111f254:	e17ffe0b 	ldhu	r5,-8(fp)
8111f258:	e1bfff0b 	ldhu	r6,-4(fp)
8111f25c:	d9800815 	stw	r6,32(sp)
8111f260:	d9400715 	stw	r5,28(sp)
8111f264:	d9000615 	stw	r4,24(sp)
8111f268:	d8c00515 	stw	r3,20(sp)
8111f26c:	d8800415 	stw	r2,16(sp)
8111f270:	e0800517 	ldw	r2,20(fp)
8111f274:	d8800315 	stw	r2,12(sp)
8111f278:	e0800417 	ldw	r2,16(fp)
8111f27c:	d8800215 	stw	r2,8(sp)
8111f280:	e0800317 	ldw	r2,12(fp)
8111f284:	d8800115 	stw	r2,4(sp)
8111f288:	e0800217 	ldw	r2,8(fp)
8111f28c:	d8800015 	stw	r2,0(sp)
8111f290:	e1fffa17 	ldw	r7,-24(fp)
8111f294:	e1bff917 	ldw	r6,-28(fp)
8111f298:	e17ff817 	ldw	r5,-32(fp)
8111f29c:	e13ff717 	ldw	r4,-36(fp)
8111f2a0:	111ee2c0 	call	8111ee2c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8111f2a4:	e037883a 	mov	sp,fp
8111f2a8:	dfc00117 	ldw	ra,4(sp)
8111f2ac:	df000017 	ldw	fp,0(sp)
8111f2b0:	dec00204 	addi	sp,sp,8
8111f2b4:	f800283a 	ret

8111f2b8 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8111f2b8:	defffc04 	addi	sp,sp,-16
8111f2bc:	df000315 	stw	fp,12(sp)
8111f2c0:	df000304 	addi	fp,sp,12
8111f2c4:	e13ffe15 	stw	r4,-8(fp)
8111f2c8:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8111f2cc:	e0bfff17 	ldw	r2,-4(fp)
8111f2d0:	1000021e 	bne	r2,zero,8111f2dc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8111f2d4:	00bffa84 	movi	r2,-22
8111f2d8:	00002f06 	br	8111f398 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8111f2dc:	e0bfff17 	ldw	r2,-4(fp)
8111f2e0:	10c00317 	ldw	r3,12(r2)
8111f2e4:	e0bfff17 	ldw	r2,-4(fp)
8111f2e8:	18800226 	beq	r3,r2,8111f2f4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8111f2ec:	00bffa84 	movi	r2,-22
8111f2f0:	00002906 	br	8111f398 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
8111f2f4:	e0bffe17 	ldw	r2,-8(fp)
8111f2f8:	10800017 	ldw	r2,0(r2)
8111f2fc:	1000051e 	bne	r2,zero,8111f314 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
8111f300:	e0bffe17 	ldw	r2,-8(fp)
8111f304:	e0ffff17 	ldw	r3,-4(fp)
8111f308:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
8111f30c:	0005883a 	mov	r2,zero
8111f310:	00002106 	br	8111f398 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
8111f314:	e0bffe17 	ldw	r2,-8(fp)
8111f318:	10c00017 	ldw	r3,0(r2)
8111f31c:	e0bfff17 	ldw	r2,-4(fp)
8111f320:	1880021e 	bne	r3,r2,8111f32c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8111f324:	00bffa84 	movi	r2,-22
8111f328:	00001b06 	br	8111f398 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8111f32c:	e0bffe17 	ldw	r2,-8(fp)
8111f330:	10800017 	ldw	r2,0(r2)
8111f334:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8111f338:	00000906 	br	8111f360 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8111f33c:	e0bffd17 	ldw	r2,-12(fp)
8111f340:	10c00317 	ldw	r3,12(r2)
8111f344:	e0bfff17 	ldw	r2,-4(fp)
8111f348:	1880021e 	bne	r3,r2,8111f354 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8111f34c:	00bffa84 	movi	r2,-22
8111f350:	00001106 	br	8111f398 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8111f354:	e0bffd17 	ldw	r2,-12(fp)
8111f358:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
8111f35c:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8111f360:	e0bffd17 	ldw	r2,-12(fp)
8111f364:	10800317 	ldw	r2,12(r2)
8111f368:	e0fffe17 	ldw	r3,-8(fp)
8111f36c:	18c00017 	ldw	r3,0(r3)
8111f370:	10fff21e 	bne	r2,r3,8111f33c <__reset+0xfb0ff33c>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8111f374:	e0ffff17 	ldw	r3,-4(fp)
8111f378:	e0bffd17 	ldw	r2,-12(fp)
8111f37c:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8111f380:	e0bffe17 	ldw	r2,-8(fp)
8111f384:	10800017 	ldw	r2,0(r2)
8111f388:	1007883a 	mov	r3,r2
8111f38c:	e0bfff17 	ldw	r2,-4(fp)
8111f390:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8111f394:	0005883a 	mov	r2,zero
}
8111f398:	e037883a 	mov	sp,fp
8111f39c:	df000017 	ldw	fp,0(sp)
8111f3a0:	dec00104 	addi	sp,sp,4
8111f3a4:	f800283a 	ret

8111f3a8 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8111f3a8:	defff804 	addi	sp,sp,-32
8111f3ac:	df000715 	stw	fp,28(sp)
8111f3b0:	df000704 	addi	fp,sp,28
8111f3b4:	e13ffe15 	stw	r4,-8(fp)
8111f3b8:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
8111f3bc:	e13fff17 	ldw	r4,-4(fp)
8111f3c0:	2000021e 	bne	r4,zero,8111f3cc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8111f3c4:	00bffa84 	movi	r2,-22
8111f3c8:	00005906 	br	8111f530 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
8111f3cc:	e13fff17 	ldw	r4,-4(fp)
8111f3d0:	2015883a 	mov	r10,r4
8111f3d4:	0017883a 	mov	r11,zero
8111f3d8:	e2bffc15 	stw	r10,-16(fp)
8111f3dc:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8111f3e0:	e13fff17 	ldw	r4,-4(fp)
8111f3e4:	21400317 	ldw	r5,12(r4)
8111f3e8:	e13ffc17 	ldw	r4,-16(fp)
8111f3ec:	29000626 	beq	r5,r4,8111f408 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8111f3f0:	e13fff17 	ldw	r4,-4(fp)
8111f3f4:	21400b17 	ldw	r5,44(r4)
8111f3f8:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8111f3fc:	29000226 	beq	r5,r4,8111f408 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8111f400:	00bffa84 	movi	r2,-22
8111f404:	00004a06 	br	8111f530 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
8111f408:	e13ffe17 	ldw	r4,-8(fp)
8111f40c:	21000017 	ldw	r4,0(r4)
8111f410:	2000051e 	bne	r4,zero,8111f428 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
8111f414:	e0bffe17 	ldw	r2,-8(fp)
8111f418:	e0ffff17 	ldw	r3,-4(fp)
8111f41c:	10c00015 	stw	r3,0(r2)
		return 0;
8111f420:	0005883a 	mov	r2,zero
8111f424:	00004206 	br	8111f530 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
8111f428:	e13ffe17 	ldw	r4,-8(fp)
8111f42c:	21400017 	ldw	r5,0(r4)
8111f430:	e13fff17 	ldw	r4,-4(fp)
8111f434:	2900021e 	bne	r5,r4,8111f440 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8111f438:	00bffa84 	movi	r2,-22
8111f43c:	00003c06 	br	8111f530 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8111f440:	e13ffe17 	ldw	r4,-8(fp)
8111f444:	21000017 	ldw	r4,0(r4)
8111f448:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
8111f44c:	e13ffe17 	ldw	r4,-8(fp)
8111f450:	21000017 	ldw	r4,0(r4)
8111f454:	2011883a 	mov	r8,r4
8111f458:	0013883a 	mov	r9,zero
8111f45c:	e23ffa15 	stw	r8,-24(fp)
8111f460:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111f464:	00001806 	br	8111f4c8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
8111f468:	e13fff17 	ldw	r4,-4(fp)
8111f46c:	200d883a 	mov	r6,r4
8111f470:	000f883a 	mov	r7,zero
8111f474:	e1bffc15 	stw	r6,-16(fp)
8111f478:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8111f47c:	e13ff917 	ldw	r4,-28(fp)
8111f480:	21400317 	ldw	r5,12(r4)
8111f484:	e13ffc17 	ldw	r4,-16(fp)
8111f488:	2900061e 	bne	r5,r4,8111f4a4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8111f48c:	e13ff917 	ldw	r4,-28(fp)
8111f490:	21400b17 	ldw	r5,44(r4)
8111f494:	e13ffd17 	ldw	r4,-12(fp)
8111f498:	2900021e 	bne	r5,r4,8111f4a4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8111f49c:	00bffa84 	movi	r2,-22
8111f4a0:	00002306 	br	8111f530 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8111f4a4:	e13ff917 	ldw	r4,-28(fp)
8111f4a8:	21000317 	ldw	r4,12(r4)
8111f4ac:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8111f4b0:	e13ff917 	ldw	r4,-28(fp)
8111f4b4:	21000b17 	ldw	r4,44(r4)
8111f4b8:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8111f4bc:	e13ffc17 	ldw	r4,-16(fp)
8111f4c0:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8111f4c4:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111f4c8:	e13ff917 	ldw	r4,-28(fp)
8111f4cc:	21400317 	ldw	r5,12(r4)
8111f4d0:	e13ffa17 	ldw	r4,-24(fp)
8111f4d4:	29000426 	beq	r5,r4,8111f4e8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8111f4d8:	e13ff917 	ldw	r4,-28(fp)
8111f4dc:	21400b17 	ldw	r5,44(r4)
8111f4e0:	e13ffb17 	ldw	r4,-20(fp)
8111f4e4:	293fe01e 	bne	r5,r4,8111f468 <__reset+0xfb0ff468>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
8111f4e8:	e13fff17 	ldw	r4,-4(fp)
8111f4ec:	2005883a 	mov	r2,r4
8111f4f0:	0007883a 	mov	r3,zero
8111f4f4:	e0bffc15 	stw	r2,-16(fp)
8111f4f8:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8111f4fc:	e0fffc17 	ldw	r3,-16(fp)
8111f500:	e0bff917 	ldw	r2,-28(fp)
8111f504:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8111f508:	e0fffd17 	ldw	r3,-12(fp)
8111f50c:	e0bff917 	ldw	r2,-28(fp)
8111f510:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8111f514:	e0fffa17 	ldw	r3,-24(fp)
8111f518:	e0bfff17 	ldw	r2,-4(fp)
8111f51c:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8111f520:	e0fffb17 	ldw	r3,-20(fp)
8111f524:	e0bfff17 	ldw	r2,-4(fp)
8111f528:	10c00b15 	stw	r3,44(r2)
	return 0;
8111f52c:	0005883a 	mov	r2,zero
}
8111f530:	e037883a 	mov	sp,fp
8111f534:	df000017 	ldw	fp,0(sp)
8111f538:	dec00104 	addi	sp,sp,4
8111f53c:	f800283a 	ret

8111f540 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8111f540:	defffc04 	addi	sp,sp,-16
8111f544:	df000315 	stw	fp,12(sp)
8111f548:	df000304 	addi	fp,sp,12
8111f54c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8111f550:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8111f554:	e0bfff17 	ldw	r2,-4(fp)
8111f558:	1000021e 	bne	r2,zero,8111f564 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
8111f55c:	00bffa84 	movi	r2,-22
8111f560:	00001906 	br	8111f5c8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8111f564:	e0bfff17 	ldw	r2,-4(fp)
8111f568:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8111f56c:	00000a06 	br	8111f598 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8111f570:	e0bffd17 	ldw	r2,-12(fp)
8111f574:	10800717 	ldw	r2,28(r2)
8111f578:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111f57c:	e0bffe17 	ldw	r2,-8(fp)
8111f580:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8111f584:	e0bffd17 	ldw	r2,-12(fp)
8111f588:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8111f58c:	e0bffd17 	ldw	r2,-12(fp)
8111f590:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8111f594:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8111f598:	e0bffd17 	ldw	r2,-12(fp)
8111f59c:	10c00317 	ldw	r3,12(r2)
8111f5a0:	e0bfff17 	ldw	r2,-4(fp)
8111f5a4:	18bff21e 	bne	r3,r2,8111f570 <__reset+0xfb0ff570>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
8111f5a8:	e0bffd17 	ldw	r2,-12(fp)
8111f5ac:	10800717 	ldw	r2,28(r2)
8111f5b0:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111f5b4:	e0bffe17 	ldw	r2,-8(fp)
8111f5b8:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8111f5bc:	e0bffd17 	ldw	r2,-12(fp)
8111f5c0:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8111f5c4:	0005883a 	mov	r2,zero
}
8111f5c8:	e037883a 	mov	sp,fp
8111f5cc:	df000017 	ldw	fp,0(sp)
8111f5d0:	dec00104 	addi	sp,sp,4
8111f5d4:	f800283a 	ret

8111f5d8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
8111f5d8:	defff804 	addi	sp,sp,-32
8111f5dc:	df000715 	stw	fp,28(sp)
8111f5e0:	df000704 	addi	fp,sp,28
8111f5e4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8111f5e8:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
8111f5ec:	e13fff17 	ldw	r4,-4(fp)
8111f5f0:	2000021e 	bne	r4,zero,8111f5fc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
8111f5f4:	00bffa84 	movi	r2,-22
8111f5f8:	00002806 	br	8111f69c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8111f5fc:	e13fff17 	ldw	r4,-4(fp)
8111f600:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
8111f604:	e13fff17 	ldw	r4,-4(fp)
8111f608:	2005883a 	mov	r2,r4
8111f60c:	0007883a 	mov	r3,zero
8111f610:	e0bffb15 	stw	r2,-20(fp)
8111f614:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111f618:	00001006 	br	8111f65c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
8111f61c:	e0bff917 	ldw	r2,-28(fp)
8111f620:	10800f17 	ldw	r2,60(r2)
8111f624:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111f628:	e0bffa17 	ldw	r2,-24(fp)
8111f62c:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8111f630:	e0bff917 	ldw	r2,-28(fp)
8111f634:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8111f638:	e0bff917 	ldw	r2,-28(fp)
8111f63c:	10800317 	ldw	r2,12(r2)
8111f640:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8111f644:	e0bff917 	ldw	r2,-28(fp)
8111f648:	10800b17 	ldw	r2,44(r2)
8111f64c:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8111f650:	e0bffd17 	ldw	r2,-12(fp)
8111f654:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8111f658:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111f65c:	e0bff917 	ldw	r2,-28(fp)
8111f660:	10c00317 	ldw	r3,12(r2)
8111f664:	e0bffb17 	ldw	r2,-20(fp)
8111f668:	18800426 	beq	r3,r2,8111f67c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8111f66c:	e0bff917 	ldw	r2,-28(fp)
8111f670:	10c00b17 	ldw	r3,44(r2)
8111f674:	e0bffc17 	ldw	r2,-16(fp)
8111f678:	18bfe81e 	bne	r3,r2,8111f61c <__reset+0xfb0ff61c>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8111f67c:	e0bff917 	ldw	r2,-28(fp)
8111f680:	10800f17 	ldw	r2,60(r2)
8111f684:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111f688:	e0bffa17 	ldw	r2,-24(fp)
8111f68c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8111f690:	e0bff917 	ldw	r2,-28(fp)
8111f694:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
8111f698:	0005883a 	mov	r2,zero
}
8111f69c:	e037883a 	mov	sp,fp
8111f6a0:	df000017 	ldw	fp,0(sp)
8111f6a4:	dec00104 	addi	sp,sp,4
8111f6a8:	f800283a 	ret

8111f6ac <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8111f6ac:	deffef04 	addi	sp,sp,-68
8111f6b0:	df001015 	stw	fp,64(sp)
8111f6b4:	df001004 	addi	fp,sp,64
8111f6b8:	e13ffb15 	stw	r4,-20(fp)
8111f6bc:	e17ffc15 	stw	r5,-16(fp)
8111f6c0:	e1bffd15 	stw	r6,-12(fp)
8111f6c4:	3807883a 	mov	r3,r7
8111f6c8:	e0800117 	ldw	r2,4(fp)
8111f6cc:	e0fffe05 	stb	r3,-8(fp)
8111f6d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
8111f6d4:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
8111f6d8:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
8111f6dc:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
8111f6e0:	e0bffc17 	ldw	r2,-16(fp)
8111f6e4:	e0bff915 	stw	r2,-28(fp)
8111f6e8:	e0bffd17 	ldw	r2,-12(fp)
8111f6ec:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8111f6f0:	e0bffb17 	ldw	r2,-20(fp)
8111f6f4:	10800617 	ldw	r2,24(r2)
8111f6f8:	10800037 	ldwio	r2,0(r2)
8111f6fc:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8111f700:	e0bff017 	ldw	r2,-64(fp)
8111f704:	1080004c 	andi	r2,r2,1
8111f708:	10000226 	beq	r2,zero,8111f714 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
8111f70c:	00bffc04 	movi	r2,-16
8111f710:	00009206 	br	8111f95c <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8111f714:	00800804 	movi	r2,32
8111f718:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111f71c:	0005303a 	rdctl	r2,status
8111f720:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111f724:	e0fff517 	ldw	r3,-44(fp)
8111f728:	00bfff84 	movi	r2,-2
8111f72c:	1884703a 	and	r2,r3,r2
8111f730:	1001703a 	wrctl	status,r2
  
  return context;
8111f734:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8111f738:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8111f73c:	e0bffb17 	ldw	r2,-20(fp)
8111f740:	10800317 	ldw	r2,12(r2)
8111f744:	10800104 	addi	r2,r2,4
8111f748:	e0fff117 	ldw	r3,-60(fp)
8111f74c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8111f750:	e0bffb17 	ldw	r2,-20(fp)
8111f754:	10800317 	ldw	r2,12(r2)
8111f758:	e0fffb17 	ldw	r3,-20(fp)
8111f75c:	18c00317 	ldw	r3,12(r3)
8111f760:	18c00037 	ldwio	r3,0(r3)
8111f764:	10c00035 	stwio	r3,0(r2)
8111f768:	e0bff217 	ldw	r2,-56(fp)
8111f76c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111f770:	e0bff317 	ldw	r2,-52(fp)
8111f774:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8111f778:	e0bffb17 	ldw	r2,-20(fp)
8111f77c:	10800b17 	ldw	r2,44(r2)
8111f780:	10002326 	beq	r2,zero,8111f810 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8111f784:	e0bffb17 	ldw	r2,-20(fp)
8111f788:	10c00d17 	ldw	r3,52(r2)
8111f78c:	e0bff117 	ldw	r2,-60(fp)
8111f790:	1884b03a 	or	r2,r3,r2
8111f794:	10800514 	ori	r2,r2,20
8111f798:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8111f79c:	e0fff117 	ldw	r3,-60(fp)
8111f7a0:	00bff7c4 	movi	r2,-33
8111f7a4:	1884703a 	and	r2,r3,r2
8111f7a8:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8111f7ac:	e0bff017 	ldw	r2,-64(fp)
8111f7b0:	10800214 	ori	r2,r2,8
8111f7b4:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111f7b8:	0005303a 	rdctl	r2,status
8111f7bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111f7c0:	e0fff717 	ldw	r3,-36(fp)
8111f7c4:	00bfff84 	movi	r2,-2
8111f7c8:	1884703a 	and	r2,r3,r2
8111f7cc:	1001703a 	wrctl	status,r2
  
  return context;
8111f7d0:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
8111f7d4:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8111f7d8:	e0bffb17 	ldw	r2,-20(fp)
8111f7dc:	10800317 	ldw	r2,12(r2)
8111f7e0:	10800104 	addi	r2,r2,4
8111f7e4:	e0fff117 	ldw	r3,-60(fp)
8111f7e8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8111f7ec:	e0bffb17 	ldw	r2,-20(fp)
8111f7f0:	10800617 	ldw	r2,24(r2)
8111f7f4:	e0fff017 	ldw	r3,-64(fp)
8111f7f8:	10c00035 	stwio	r3,0(r2)
8111f7fc:	e0bff217 	ldw	r2,-56(fp)
8111f800:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111f804:	e0bff417 	ldw	r2,-48(fp)
8111f808:	1001703a 	wrctl	status,r2
8111f80c:	00002306 	br	8111f89c <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8111f810:	e0bffb17 	ldw	r2,-20(fp)
8111f814:	10c00d17 	ldw	r3,52(r2)
8111f818:	e0bff117 	ldw	r2,-60(fp)
8111f81c:	1884b03a 	or	r2,r3,r2
8111f820:	10800114 	ori	r2,r2,4
8111f824:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8111f828:	e0fff117 	ldw	r3,-60(fp)
8111f82c:	00bff3c4 	movi	r2,-49
8111f830:	1884703a 	and	r2,r3,r2
8111f834:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8111f838:	e0fff017 	ldw	r3,-64(fp)
8111f83c:	00bffdc4 	movi	r2,-9
8111f840:	1884703a 	and	r2,r3,r2
8111f844:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111f848:	0005303a 	rdctl	r2,status
8111f84c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111f850:	e0fff817 	ldw	r3,-32(fp)
8111f854:	00bfff84 	movi	r2,-2
8111f858:	1884703a 	and	r2,r3,r2
8111f85c:	1001703a 	wrctl	status,r2
  
  return context;
8111f860:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
8111f864:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8111f868:	e0bffb17 	ldw	r2,-20(fp)
8111f86c:	10800317 	ldw	r2,12(r2)
8111f870:	10800104 	addi	r2,r2,4
8111f874:	e0fff117 	ldw	r3,-60(fp)
8111f878:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8111f87c:	e0bffb17 	ldw	r2,-20(fp)
8111f880:	10800617 	ldw	r2,24(r2)
8111f884:	e0fff017 	ldw	r3,-64(fp)
8111f888:	10c00035 	stwio	r3,0(r2)
8111f88c:	e0bff217 	ldw	r2,-56(fp)
8111f890:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111f894:	e0bff617 	ldw	r2,-40(fp)
8111f898:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8111f89c:	e0bffb17 	ldw	r2,-20(fp)
8111f8a0:	10800617 	ldw	r2,24(r2)
8111f8a4:	10800104 	addi	r2,r2,4
8111f8a8:	e0fff917 	ldw	r3,-28(fp)
8111f8ac:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8111f8b0:	e0bffb17 	ldw	r2,-20(fp)
8111f8b4:	10800617 	ldw	r2,24(r2)
8111f8b8:	10800204 	addi	r2,r2,8
8111f8bc:	e0fffa17 	ldw	r3,-24(fp)
8111f8c0:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
8111f8c4:	e0bffe03 	ldbu	r2,-8(fp)
8111f8c8:	10000426 	beq	r2,zero,8111f8dc <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8111f8cc:	e0bff017 	ldw	r2,-64(fp)
8111f8d0:	10800414 	ori	r2,r2,16
8111f8d4:	e0bff015 	stw	r2,-64(fp)
8111f8d8:	00000406 	br	8111f8ec <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8111f8dc:	e0fff017 	ldw	r3,-64(fp)
8111f8e0:	00bffbc4 	movi	r2,-17
8111f8e4:	1884703a 	and	r2,r3,r2
8111f8e8:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8111f8ec:	e0bfff03 	ldbu	r2,-4(fp)
8111f8f0:	10000e26 	beq	r2,zero,8111f92c <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8111f8f4:	e0bff017 	ldw	r2,-64(fp)
8111f8f8:	10800094 	ori	r2,r2,2
8111f8fc:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8111f900:	e0bffb17 	ldw	r2,-20(fp)
8111f904:	10800617 	ldw	r2,24(r2)
8111f908:	10800304 	addi	r2,r2,12
8111f90c:	10800037 	ldwio	r2,0(r2)
8111f910:	10000a1e 	bne	r2,zero,8111f93c <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8111f914:	e0bffb17 	ldw	r2,-20(fp)
8111f918:	10800617 	ldw	r2,24(r2)
8111f91c:	10800304 	addi	r2,r2,12
8111f920:	00c03fc4 	movi	r3,255
8111f924:	10c00035 	stwio	r3,0(r2)
8111f928:	00000406 	br	8111f93c <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8111f92c:	e0fff017 	ldw	r3,-64(fp)
8111f930:	00bfff44 	movi	r2,-3
8111f934:	1884703a 	and	r2,r3,r2
8111f938:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8111f93c:	e0bff017 	ldw	r2,-64(fp)
8111f940:	10800054 	ori	r2,r2,1
8111f944:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8111f948:	e0bffb17 	ldw	r2,-20(fp)
8111f94c:	10800617 	ldw	r2,24(r2)
8111f950:	e0fff017 	ldw	r3,-64(fp)
8111f954:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
8111f958:	0005883a 	mov	r2,zero
}
8111f95c:	e037883a 	mov	sp,fp
8111f960:	df000017 	ldw	fp,0(sp)
8111f964:	dec00104 	addi	sp,sp,4
8111f968:	f800283a 	ret

8111f96c <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8111f96c:	defff704 	addi	sp,sp,-36
8111f970:	dfc00815 	stw	ra,32(sp)
8111f974:	df000715 	stw	fp,28(sp)
8111f978:	dc400615 	stw	r17,24(sp)
8111f97c:	dc000515 	stw	r16,20(sp)
8111f980:	df000704 	addi	fp,sp,28
8111f984:	e13ffa15 	stw	r4,-24(fp)
8111f988:	e17ffb15 	stw	r5,-20(fp)
8111f98c:	3007883a 	mov	r3,r6
8111f990:	3805883a 	mov	r2,r7
8111f994:	e0fffc05 	stb	r3,-16(fp)
8111f998:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
8111f99c:	e13ffb17 	ldw	r4,-20(fp)
8111f9a0:	111f5400 	call	8111f540 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8111f9a4:	10000226 	beq	r2,zero,8111f9b0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
8111f9a8:	00bffa84 	movi	r2,-22
8111f9ac:	00000b06 	br	8111f9dc <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8111f9b0:	e0bffb17 	ldw	r2,-20(fp)
8111f9b4:	1021883a 	mov	r16,r2
8111f9b8:	0023883a 	mov	r17,zero
8111f9bc:	e0fffc03 	ldbu	r3,-16(fp)
8111f9c0:	e0bffd03 	ldbu	r2,-12(fp)
8111f9c4:	d8800015 	stw	r2,0(sp)
8111f9c8:	180f883a 	mov	r7,r3
8111f9cc:	800b883a 	mov	r5,r16
8111f9d0:	880d883a 	mov	r6,r17
8111f9d4:	e13ffa17 	ldw	r4,-24(fp)
8111f9d8:	111f6ac0 	call	8111f6ac <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8111f9dc:	e6fffe04 	addi	sp,fp,-8
8111f9e0:	dfc00317 	ldw	ra,12(sp)
8111f9e4:	df000217 	ldw	fp,8(sp)
8111f9e8:	dc400117 	ldw	r17,4(sp)
8111f9ec:	dc000017 	ldw	r16,0(sp)
8111f9f0:	dec00404 	addi	sp,sp,16
8111f9f4:	f800283a 	ret

8111f9f8 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8111f9f8:	defff704 	addi	sp,sp,-36
8111f9fc:	dfc00815 	stw	ra,32(sp)
8111fa00:	df000715 	stw	fp,28(sp)
8111fa04:	dc400615 	stw	r17,24(sp)
8111fa08:	dc000515 	stw	r16,20(sp)
8111fa0c:	df000704 	addi	fp,sp,28
8111fa10:	e13ffa15 	stw	r4,-24(fp)
8111fa14:	e17ffb15 	stw	r5,-20(fp)
8111fa18:	3007883a 	mov	r3,r6
8111fa1c:	3805883a 	mov	r2,r7
8111fa20:	e0fffc05 	stb	r3,-16(fp)
8111fa24:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
8111fa28:	e13ffb17 	ldw	r4,-20(fp)
8111fa2c:	111f5d80 	call	8111f5d8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8111fa30:	10000226 	beq	r2,zero,8111fa3c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
8111fa34:	00bffa84 	movi	r2,-22
8111fa38:	00000b06 	br	8111fa68 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8111fa3c:	e0bffb17 	ldw	r2,-20(fp)
8111fa40:	1021883a 	mov	r16,r2
8111fa44:	0023883a 	mov	r17,zero
8111fa48:	e0fffc03 	ldbu	r3,-16(fp)
8111fa4c:	e0bffd03 	ldbu	r2,-12(fp)
8111fa50:	d8800015 	stw	r2,0(sp)
8111fa54:	180f883a 	mov	r7,r3
8111fa58:	800b883a 	mov	r5,r16
8111fa5c:	880d883a 	mov	r6,r17
8111fa60:	e13ffa17 	ldw	r4,-24(fp)
8111fa64:	111f6ac0 	call	8111f6ac <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8111fa68:	e6fffe04 	addi	sp,fp,-8
8111fa6c:	dfc00317 	ldw	ra,12(sp)
8111fa70:	df000217 	ldw	fp,8(sp)
8111fa74:	dc400117 	ldw	r17,4(sp)
8111fa78:	dc000017 	ldw	r16,0(sp)
8111fa7c:	dec00404 	addi	sp,sp,16
8111fa80:	f800283a 	ret

8111fa84 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8111fa84:	defffc04 	addi	sp,sp,-16
8111fa88:	dfc00315 	stw	ra,12(sp)
8111fa8c:	df000215 	stw	fp,8(sp)
8111fa90:	df000204 	addi	fp,sp,8
8111fa94:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8111fa98:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8111fa9c:	d1601204 	addi	r5,gp,-32696
8111faa0:	e13fff17 	ldw	r4,-4(fp)
8111faa4:	11200580 	call	81120058 <alt_find_dev>
8111faa8:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8111faac:	e0bffe17 	ldw	r2,-8(fp)
8111fab0:	1000041e 	bne	r2,zero,8111fac4 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
8111fab4:	111df100 	call	8111df10 <alt_get_errno>
8111fab8:	1007883a 	mov	r3,r2
8111fabc:	008004c4 	movi	r2,19
8111fac0:	18800015 	stw	r2,0(r3)
    }

    return dev;
8111fac4:	e0bffe17 	ldw	r2,-8(fp)
}
8111fac8:	e037883a 	mov	sp,fp
8111facc:	dfc00117 	ldw	ra,4(sp)
8111fad0:	df000017 	ldw	fp,0(sp)
8111fad4:	dec00204 	addi	sp,sp,8
8111fad8:	f800283a 	ret

8111fadc <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8111fadc:	defff804 	addi	sp,sp,-32
8111fae0:	dfc00715 	stw	ra,28(sp)
8111fae4:	df000615 	stw	fp,24(sp)
8111fae8:	df000604 	addi	fp,sp,24
8111faec:	e13ffd15 	stw	r4,-12(fp)
8111faf0:	e17ffe15 	stw	r5,-8(fp)
8111faf4:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8111faf8:	e0bffd17 	ldw	r2,-12(fp)
8111fafc:	10801783 	ldbu	r2,94(r2)
8111fb00:	10803fcc 	andi	r2,r2,255
8111fb04:	10000b26 	beq	r2,zero,8111fb34 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8111fb08:	e0bffd17 	ldw	r2,-12(fp)
8111fb0c:	10800617 	ldw	r2,24(r2)
8111fb10:	00c00104 	movi	r3,4
8111fb14:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8111fb18:	0001883a 	nop
8111fb1c:	e0bffd17 	ldw	r2,-12(fp)
8111fb20:	10800617 	ldw	r2,24(r2)
8111fb24:	10800037 	ldwio	r2,0(r2)
8111fb28:	1080010c 	andi	r2,r2,4
8111fb2c:	1005d0ba 	srai	r2,r2,2
8111fb30:	103ffa1e 	bne	r2,zero,8111fb1c <__reset+0xfb0ffb1c>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8111fb34:	e0bffd17 	ldw	r2,-12(fp)
8111fb38:	10800317 	ldw	r2,12(r2)
8111fb3c:	10800104 	addi	r2,r2,4
8111fb40:	00c00084 	movi	r3,2
8111fb44:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8111fb48:	0001883a 	nop
8111fb4c:	e0bffd17 	ldw	r2,-12(fp)
8111fb50:	10800317 	ldw	r2,12(r2)
8111fb54:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8111fb58:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8111fb5c:	103ffb1e 	bne	r2,zero,8111fb4c <__reset+0xfb0ffb4c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8111fb60:	e0bffd17 	ldw	r2,-12(fp)
8111fb64:	10800317 	ldw	r2,12(r2)
8111fb68:	10800104 	addi	r2,r2,4
8111fb6c:	10800037 	ldwio	r2,0(r2)
8111fb70:	1007883a 	mov	r3,r2
8111fb74:	00bffbc4 	movi	r2,-17
8111fb78:	1884703a 	and	r2,r3,r2
8111fb7c:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8111fb80:	e0bffb17 	ldw	r2,-20(fp)
8111fb84:	10800814 	ori	r2,r2,32
8111fb88:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8111fb8c:	e0bffd17 	ldw	r2,-12(fp)
8111fb90:	10800317 	ldw	r2,12(r2)
8111fb94:	10800104 	addi	r2,r2,4
8111fb98:	e0fffb17 	ldw	r3,-20(fp)
8111fb9c:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8111fba0:	e0bffd17 	ldw	r2,-12(fp)
8111fba4:	10800317 	ldw	r2,12(r2)
8111fba8:	e0fffd17 	ldw	r3,-12(fp)
8111fbac:	18c00317 	ldw	r3,12(r3)
8111fbb0:	18c00037 	ldwio	r3,0(r3)
8111fbb4:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8111fbb8:	e0bffd17 	ldw	r2,-12(fp)
8111fbbc:	10801783 	ldbu	r2,94(r2)
8111fbc0:	10803fcc 	andi	r2,r2,255
8111fbc4:	10000826 	beq	r2,zero,8111fbe8 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8111fbc8:	e0bffd17 	ldw	r2,-12(fp)
8111fbcc:	10800617 	ldw	r2,24(r2)
8111fbd0:	10800404 	addi	r2,r2,16
8111fbd4:	e0fffd17 	ldw	r3,-12(fp)
8111fbd8:	18c00617 	ldw	r3,24(r3)
8111fbdc:	18c00404 	addi	r3,r3,16
8111fbe0:	18c00037 	ldwio	r3,0(r3)
8111fbe4:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8111fbe8:	d1601204 	addi	r5,gp,-32696
8111fbec:	e13ffd17 	ldw	r4,-12(fp)
8111fbf0:	111fef40 	call	8111fef4 <alt_dev_llist_insert>
8111fbf4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8111fbf8:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
8111fbfc:	e0bffc17 	ldw	r2,-16(fp)
8111fc00:	1000081e 	bne	r2,zero,8111fc24 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8111fc04:	d8000015 	stw	zero,0(sp)
8111fc08:	e1fffd17 	ldw	r7,-12(fp)
8111fc0c:	01a044b4 	movhi	r6,33042
8111fc10:	31b84304 	addi	r6,r6,-7924
8111fc14:	e17fff17 	ldw	r5,-4(fp)
8111fc18:	e13ffe17 	ldw	r4,-8(fp)
8111fc1c:	11202940 	call	81120294 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8111fc20:	00000406 	br	8111fc34 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8111fc24:	012044b4 	movhi	r4,33042
8111fc28:	2109ed04 	addi	r4,r4,10164
8111fc2c:	11206740 	call	81120674 <alt_printf>
    }
    
    return;
8111fc30:	0001883a 	nop

}
8111fc34:	e037883a 	mov	sp,fp
8111fc38:	dfc00117 	ldw	ra,4(sp)
8111fc3c:	df000017 	ldw	fp,0(sp)
8111fc40:	dec00204 	addi	sp,sp,8
8111fc44:	f800283a 	ret

8111fc48 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
8111fc48:	defffb04 	addi	sp,sp,-20
8111fc4c:	df000415 	stw	fp,16(sp)
8111fc50:	df000404 	addi	fp,sp,16
8111fc54:	e13ffc15 	stw	r4,-16(fp)
8111fc58:	e17ffd15 	stw	r5,-12(fp)
8111fc5c:	e1bffe15 	stw	r6,-8(fp)
8111fc60:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8111fc64:	e0bffc17 	ldw	r2,-16(fp)
8111fc68:	e0fffd17 	ldw	r3,-12(fp)
8111fc6c:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8111fc70:	e0bffc17 	ldw	r2,-16(fp)
8111fc74:	e0ffff17 	ldw	r3,-4(fp)
8111fc78:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8111fc7c:	e0bffc17 	ldw	r2,-16(fp)
8111fc80:	e0fffe17 	ldw	r3,-8(fp)
8111fc84:	10c00d15 	stw	r3,52(r2)

    return ;
8111fc88:	0001883a 	nop
}
8111fc8c:	e037883a 	mov	sp,fp
8111fc90:	df000017 	ldw	fp,0(sp)
8111fc94:	dec00104 	addi	sp,sp,4
8111fc98:	f800283a 	ret

8111fc9c <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8111fc9c:	defffc04 	addi	sp,sp,-16
8111fca0:	dfc00315 	stw	ra,12(sp)
8111fca4:	df000215 	stw	fp,8(sp)
8111fca8:	df000204 	addi	fp,sp,8
8111fcac:	e13ffe15 	stw	r4,-8(fp)
8111fcb0:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8111fcb4:	000d883a 	mov	r6,zero
8111fcb8:	e17fff17 	ldw	r5,-4(fp)
8111fcbc:	e13ffe17 	ldw	r4,-8(fp)
8111fcc0:	111e4700 	call	8111e470 <alt_msgdma_descriptor_async_transfer>

}
8111fcc4:	e037883a 	mov	sp,fp
8111fcc8:	dfc00117 	ldw	ra,4(sp)
8111fccc:	df000017 	ldw	fp,0(sp)
8111fcd0:	dec00204 	addi	sp,sp,8
8111fcd4:	f800283a 	ret

8111fcd8 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8111fcd8:	defffc04 	addi	sp,sp,-16
8111fcdc:	dfc00315 	stw	ra,12(sp)
8111fce0:	df000215 	stw	fp,8(sp)
8111fce4:	df000204 	addi	fp,sp,8
8111fce8:	e13ffe15 	stw	r4,-8(fp)
8111fcec:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8111fcf0:	e1bfff17 	ldw	r6,-4(fp)
8111fcf4:	000b883a 	mov	r5,zero
8111fcf8:	e13ffe17 	ldw	r4,-8(fp)
8111fcfc:	111e4700 	call	8111e470 <alt_msgdma_descriptor_async_transfer>
}
8111fd00:	e037883a 	mov	sp,fp
8111fd04:	dfc00117 	ldw	ra,4(sp)
8111fd08:	df000017 	ldw	fp,0(sp)
8111fd0c:	dec00204 	addi	sp,sp,8
8111fd10:	f800283a 	ret

8111fd14 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8111fd14:	defffc04 	addi	sp,sp,-16
8111fd18:	dfc00315 	stw	ra,12(sp)
8111fd1c:	df000215 	stw	fp,8(sp)
8111fd20:	df000204 	addi	fp,sp,8
8111fd24:	e13ffe15 	stw	r4,-8(fp)
8111fd28:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8111fd2c:	000d883a 	mov	r6,zero
8111fd30:	e17fff17 	ldw	r5,-4(fp)
8111fd34:	e13ffe17 	ldw	r4,-8(fp)
8111fd38:	111e7400 	call	8111e740 <alt_msgdma_descriptor_sync_transfer>
}
8111fd3c:	e037883a 	mov	sp,fp
8111fd40:	dfc00117 	ldw	ra,4(sp)
8111fd44:	df000017 	ldw	fp,0(sp)
8111fd48:	dec00204 	addi	sp,sp,8
8111fd4c:	f800283a 	ret

8111fd50 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8111fd50:	defffc04 	addi	sp,sp,-16
8111fd54:	dfc00315 	stw	ra,12(sp)
8111fd58:	df000215 	stw	fp,8(sp)
8111fd5c:	df000204 	addi	fp,sp,8
8111fd60:	e13ffe15 	stw	r4,-8(fp)
8111fd64:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8111fd68:	e1bfff17 	ldw	r6,-4(fp)
8111fd6c:	000b883a 	mov	r5,zero
8111fd70:	e13ffe17 	ldw	r4,-8(fp)
8111fd74:	111e7400 	call	8111e740 <alt_msgdma_descriptor_sync_transfer>
}
8111fd78:	e037883a 	mov	sp,fp
8111fd7c:	dfc00117 	ldw	ra,4(sp)
8111fd80:	df000017 	ldw	fp,0(sp)
8111fd84:	dec00204 	addi	sp,sp,8
8111fd88:	f800283a 	ret

8111fd8c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8111fd8c:	defff504 	addi	sp,sp,-44
8111fd90:	df000a15 	stw	fp,40(sp)
8111fd94:	df000a04 	addi	fp,sp,40
8111fd98:	e13ffc15 	stw	r4,-16(fp)
8111fd9c:	e17ffd15 	stw	r5,-12(fp)
8111fda0:	e1bffe15 	stw	r6,-8(fp)
8111fda4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8111fda8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8111fdac:	d0a03317 	ldw	r2,-32564(gp)
  
  if (alt_ticks_per_second ())
8111fdb0:	10003c26 	beq	r2,zero,8111fea4 <alt_alarm_start+0x118>
  {
    if (alarm)
8111fdb4:	e0bffc17 	ldw	r2,-16(fp)
8111fdb8:	10003826 	beq	r2,zero,8111fe9c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
8111fdbc:	e0bffc17 	ldw	r2,-16(fp)
8111fdc0:	e0fffe17 	ldw	r3,-8(fp)
8111fdc4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8111fdc8:	e0bffc17 	ldw	r2,-16(fp)
8111fdcc:	e0ffff17 	ldw	r3,-4(fp)
8111fdd0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111fdd4:	0005303a 	rdctl	r2,status
8111fdd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111fddc:	e0fff917 	ldw	r3,-28(fp)
8111fde0:	00bfff84 	movi	r2,-2
8111fde4:	1884703a 	and	r2,r3,r2
8111fde8:	1001703a 	wrctl	status,r2
  
  return context;
8111fdec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8111fdf0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8111fdf4:	d0a03417 	ldw	r2,-32560(gp)
      
      current_nticks = alt_nticks();
8111fdf8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8111fdfc:	e0fffd17 	ldw	r3,-12(fp)
8111fe00:	e0bff617 	ldw	r2,-40(fp)
8111fe04:	1885883a 	add	r2,r3,r2
8111fe08:	10c00044 	addi	r3,r2,1
8111fe0c:	e0bffc17 	ldw	r2,-16(fp)
8111fe10:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8111fe14:	e0bffc17 	ldw	r2,-16(fp)
8111fe18:	10c00217 	ldw	r3,8(r2)
8111fe1c:	e0bff617 	ldw	r2,-40(fp)
8111fe20:	1880042e 	bgeu	r3,r2,8111fe34 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
8111fe24:	e0bffc17 	ldw	r2,-16(fp)
8111fe28:	00c00044 	movi	r3,1
8111fe2c:	10c00405 	stb	r3,16(r2)
8111fe30:	00000206 	br	8111fe3c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8111fe34:	e0bffc17 	ldw	r2,-16(fp)
8111fe38:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8111fe3c:	e0bffc17 	ldw	r2,-16(fp)
8111fe40:	d0e01004 	addi	r3,gp,-32704
8111fe44:	e0fffa15 	stw	r3,-24(fp)
8111fe48:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8111fe4c:	e0bffb17 	ldw	r2,-20(fp)
8111fe50:	e0fffa17 	ldw	r3,-24(fp)
8111fe54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8111fe58:	e0bffa17 	ldw	r2,-24(fp)
8111fe5c:	10c00017 	ldw	r3,0(r2)
8111fe60:	e0bffb17 	ldw	r2,-20(fp)
8111fe64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8111fe68:	e0bffa17 	ldw	r2,-24(fp)
8111fe6c:	10800017 	ldw	r2,0(r2)
8111fe70:	e0fffb17 	ldw	r3,-20(fp)
8111fe74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8111fe78:	e0bffa17 	ldw	r2,-24(fp)
8111fe7c:	e0fffb17 	ldw	r3,-20(fp)
8111fe80:	10c00015 	stw	r3,0(r2)
8111fe84:	e0bff817 	ldw	r2,-32(fp)
8111fe88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111fe8c:	e0bff717 	ldw	r2,-36(fp)
8111fe90:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8111fe94:	0005883a 	mov	r2,zero
8111fe98:	00000306 	br	8111fea8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
8111fe9c:	00bffa84 	movi	r2,-22
8111fea0:	00000106 	br	8111fea8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
8111fea4:	00bfde84 	movi	r2,-134
  }
}
8111fea8:	e037883a 	mov	sp,fp
8111feac:	df000017 	ldw	fp,0(sp)
8111feb0:	dec00104 	addi	sp,sp,4
8111feb4:	f800283a 	ret

8111feb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111feb8:	defffe04 	addi	sp,sp,-8
8111febc:	dfc00115 	stw	ra,4(sp)
8111fec0:	df000015 	stw	fp,0(sp)
8111fec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111fec8:	d0a00d17 	ldw	r2,-32716(gp)
8111fecc:	10000326 	beq	r2,zero,8111fedc <alt_get_errno+0x24>
8111fed0:	d0a00d17 	ldw	r2,-32716(gp)
8111fed4:	103ee83a 	callr	r2
8111fed8:	00000106 	br	8111fee0 <alt_get_errno+0x28>
8111fedc:	d0a02804 	addi	r2,gp,-32608
}
8111fee0:	e037883a 	mov	sp,fp
8111fee4:	dfc00117 	ldw	ra,4(sp)
8111fee8:	df000017 	ldw	fp,0(sp)
8111feec:	dec00204 	addi	sp,sp,8
8111fef0:	f800283a 	ret

8111fef4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8111fef4:	defffa04 	addi	sp,sp,-24
8111fef8:	dfc00515 	stw	ra,20(sp)
8111fefc:	df000415 	stw	fp,16(sp)
8111ff00:	df000404 	addi	fp,sp,16
8111ff04:	e13ffe15 	stw	r4,-8(fp)
8111ff08:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8111ff0c:	e0bffe17 	ldw	r2,-8(fp)
8111ff10:	10000326 	beq	r2,zero,8111ff20 <alt_dev_llist_insert+0x2c>
8111ff14:	e0bffe17 	ldw	r2,-8(fp)
8111ff18:	10800217 	ldw	r2,8(r2)
8111ff1c:	1000061e 	bne	r2,zero,8111ff38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
8111ff20:	111feb80 	call	8111feb8 <alt_get_errno>
8111ff24:	1007883a 	mov	r3,r2
8111ff28:	00800584 	movi	r2,22
8111ff2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8111ff30:	00bffa84 	movi	r2,-22
8111ff34:	00001306 	br	8111ff84 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8111ff38:	e0bffe17 	ldw	r2,-8(fp)
8111ff3c:	e0ffff17 	ldw	r3,-4(fp)
8111ff40:	e0fffc15 	stw	r3,-16(fp)
8111ff44:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8111ff48:	e0bffd17 	ldw	r2,-12(fp)
8111ff4c:	e0fffc17 	ldw	r3,-16(fp)
8111ff50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8111ff54:	e0bffc17 	ldw	r2,-16(fp)
8111ff58:	10c00017 	ldw	r3,0(r2)
8111ff5c:	e0bffd17 	ldw	r2,-12(fp)
8111ff60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8111ff64:	e0bffc17 	ldw	r2,-16(fp)
8111ff68:	10800017 	ldw	r2,0(r2)
8111ff6c:	e0fffd17 	ldw	r3,-12(fp)
8111ff70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8111ff74:	e0bffc17 	ldw	r2,-16(fp)
8111ff78:	e0fffd17 	ldw	r3,-12(fp)
8111ff7c:	10c00015 	stw	r3,0(r2)

  return 0;  
8111ff80:	0005883a 	mov	r2,zero
}
8111ff84:	e037883a 	mov	sp,fp
8111ff88:	dfc00117 	ldw	ra,4(sp)
8111ff8c:	df000017 	ldw	fp,0(sp)
8111ff90:	dec00204 	addi	sp,sp,8
8111ff94:	f800283a 	ret

8111ff98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8111ff98:	defffd04 	addi	sp,sp,-12
8111ff9c:	dfc00215 	stw	ra,8(sp)
8111ffa0:	df000115 	stw	fp,4(sp)
8111ffa4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8111ffa8:	00a044b4 	movhi	r2,33042
8111ffac:	1083a504 	addi	r2,r2,3732
8111ffb0:	e0bfff15 	stw	r2,-4(fp)
8111ffb4:	00000606 	br	8111ffd0 <_do_ctors+0x38>
        (*ctor) (); 
8111ffb8:	e0bfff17 	ldw	r2,-4(fp)
8111ffbc:	10800017 	ldw	r2,0(r2)
8111ffc0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8111ffc4:	e0bfff17 	ldw	r2,-4(fp)
8111ffc8:	10bfff04 	addi	r2,r2,-4
8111ffcc:	e0bfff15 	stw	r2,-4(fp)
8111ffd0:	e0ffff17 	ldw	r3,-4(fp)
8111ffd4:	00a044b4 	movhi	r2,33042
8111ffd8:	1083a604 	addi	r2,r2,3736
8111ffdc:	18bff62e 	bgeu	r3,r2,8111ffb8 <__reset+0xfb0fffb8>
        (*ctor) (); 
}
8111ffe0:	0001883a 	nop
8111ffe4:	e037883a 	mov	sp,fp
8111ffe8:	dfc00117 	ldw	ra,4(sp)
8111ffec:	df000017 	ldw	fp,0(sp)
8111fff0:	dec00204 	addi	sp,sp,8
8111fff4:	f800283a 	ret

8111fff8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8111fff8:	defffd04 	addi	sp,sp,-12
8111fffc:	dfc00215 	stw	ra,8(sp)
81120000:	df000115 	stw	fp,4(sp)
81120004:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81120008:	00a044b4 	movhi	r2,33042
8112000c:	1083a504 	addi	r2,r2,3732
81120010:	e0bfff15 	stw	r2,-4(fp)
81120014:	00000606 	br	81120030 <_do_dtors+0x38>
        (*dtor) (); 
81120018:	e0bfff17 	ldw	r2,-4(fp)
8112001c:	10800017 	ldw	r2,0(r2)
81120020:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81120024:	e0bfff17 	ldw	r2,-4(fp)
81120028:	10bfff04 	addi	r2,r2,-4
8112002c:	e0bfff15 	stw	r2,-4(fp)
81120030:	e0ffff17 	ldw	r3,-4(fp)
81120034:	00a044b4 	movhi	r2,33042
81120038:	1083a604 	addi	r2,r2,3736
8112003c:	18bff62e 	bgeu	r3,r2,81120018 <__reset+0xfb100018>
        (*dtor) (); 
}
81120040:	0001883a 	nop
81120044:	e037883a 	mov	sp,fp
81120048:	dfc00117 	ldw	ra,4(sp)
8112004c:	df000017 	ldw	fp,0(sp)
81120050:	dec00204 	addi	sp,sp,8
81120054:	f800283a 	ret

81120058 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
81120058:	defffa04 	addi	sp,sp,-24
8112005c:	dfc00515 	stw	ra,20(sp)
81120060:	df000415 	stw	fp,16(sp)
81120064:	df000404 	addi	fp,sp,16
81120068:	e13ffe15 	stw	r4,-8(fp)
8112006c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
81120070:	e0bfff17 	ldw	r2,-4(fp)
81120074:	10800017 	ldw	r2,0(r2)
81120078:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8112007c:	e13ffe17 	ldw	r4,-8(fp)
81120080:	1115cf40 	call	81115cf4 <strlen>
81120084:	10800044 	addi	r2,r2,1
81120088:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8112008c:	00000d06 	br	811200c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
81120090:	e0bffc17 	ldw	r2,-16(fp)
81120094:	10800217 	ldw	r2,8(r2)
81120098:	e0fffd17 	ldw	r3,-12(fp)
8112009c:	180d883a 	mov	r6,r3
811200a0:	e17ffe17 	ldw	r5,-8(fp)
811200a4:	1009883a 	mov	r4,r2
811200a8:	11209e80 	call	811209e8 <memcmp>
811200ac:	1000021e 	bne	r2,zero,811200b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
811200b0:	e0bffc17 	ldw	r2,-16(fp)
811200b4:	00000706 	br	811200d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
811200b8:	e0bffc17 	ldw	r2,-16(fp)
811200bc:	10800017 	ldw	r2,0(r2)
811200c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
811200c4:	e0fffc17 	ldw	r3,-16(fp)
811200c8:	e0bfff17 	ldw	r2,-4(fp)
811200cc:	18bff01e 	bne	r3,r2,81120090 <__reset+0xfb100090>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
811200d0:	0005883a 	mov	r2,zero
}
811200d4:	e037883a 	mov	sp,fp
811200d8:	dfc00117 	ldw	ra,4(sp)
811200dc:	df000017 	ldw	fp,0(sp)
811200e0:	dec00204 	addi	sp,sp,8
811200e4:	f800283a 	ret

811200e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
811200e8:	defffb04 	addi	sp,sp,-20
811200ec:	dfc00415 	stw	ra,16(sp)
811200f0:	df000315 	stw	fp,12(sp)
811200f4:	df000304 	addi	fp,sp,12
811200f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
811200fc:	d0a00817 	ldw	r2,-32736(gp)
81120100:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81120104:	00003106 	br	811201cc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
81120108:	e0bffd17 	ldw	r2,-12(fp)
8112010c:	10800217 	ldw	r2,8(r2)
81120110:	1009883a 	mov	r4,r2
81120114:	1115cf40 	call	81115cf4 <strlen>
81120118:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8112011c:	e0bffd17 	ldw	r2,-12(fp)
81120120:	10c00217 	ldw	r3,8(r2)
81120124:	e0bffe17 	ldw	r2,-8(fp)
81120128:	10bfffc4 	addi	r2,r2,-1
8112012c:	1885883a 	add	r2,r3,r2
81120130:	10800003 	ldbu	r2,0(r2)
81120134:	10803fcc 	andi	r2,r2,255
81120138:	1080201c 	xori	r2,r2,128
8112013c:	10bfe004 	addi	r2,r2,-128
81120140:	10800bd8 	cmpnei	r2,r2,47
81120144:	1000031e 	bne	r2,zero,81120154 <alt_find_file+0x6c>
    {
      len -= 1;
81120148:	e0bffe17 	ldw	r2,-8(fp)
8112014c:	10bfffc4 	addi	r2,r2,-1
81120150:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81120154:	e0bffe17 	ldw	r2,-8(fp)
81120158:	e0ffff17 	ldw	r3,-4(fp)
8112015c:	1885883a 	add	r2,r3,r2
81120160:	10800003 	ldbu	r2,0(r2)
81120164:	10803fcc 	andi	r2,r2,255
81120168:	1080201c 	xori	r2,r2,128
8112016c:	10bfe004 	addi	r2,r2,-128
81120170:	10800be0 	cmpeqi	r2,r2,47
81120174:	1000081e 	bne	r2,zero,81120198 <alt_find_file+0xb0>
81120178:	e0bffe17 	ldw	r2,-8(fp)
8112017c:	e0ffff17 	ldw	r3,-4(fp)
81120180:	1885883a 	add	r2,r3,r2
81120184:	10800003 	ldbu	r2,0(r2)
81120188:	10803fcc 	andi	r2,r2,255
8112018c:	1080201c 	xori	r2,r2,128
81120190:	10bfe004 	addi	r2,r2,-128
81120194:	10000a1e 	bne	r2,zero,811201c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
81120198:	e0bffd17 	ldw	r2,-12(fp)
8112019c:	10800217 	ldw	r2,8(r2)
811201a0:	e0fffe17 	ldw	r3,-8(fp)
811201a4:	180d883a 	mov	r6,r3
811201a8:	e17fff17 	ldw	r5,-4(fp)
811201ac:	1009883a 	mov	r4,r2
811201b0:	11209e80 	call	811209e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
811201b4:	1000021e 	bne	r2,zero,811201c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
811201b8:	e0bffd17 	ldw	r2,-12(fp)
811201bc:	00000706 	br	811201dc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
811201c0:	e0bffd17 	ldw	r2,-12(fp)
811201c4:	10800017 	ldw	r2,0(r2)
811201c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
811201cc:	e0fffd17 	ldw	r3,-12(fp)
811201d0:	d0a00804 	addi	r2,gp,-32736
811201d4:	18bfcc1e 	bne	r3,r2,81120108 <__reset+0xfb100108>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
811201d8:	0005883a 	mov	r2,zero
}
811201dc:	e037883a 	mov	sp,fp
811201e0:	dfc00117 	ldw	ra,4(sp)
811201e4:	df000017 	ldw	fp,0(sp)
811201e8:	dec00204 	addi	sp,sp,8
811201ec:	f800283a 	ret

811201f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
811201f0:	defffc04 	addi	sp,sp,-16
811201f4:	df000315 	stw	fp,12(sp)
811201f8:	df000304 	addi	fp,sp,12
811201fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
81120200:	00bffa04 	movi	r2,-24
81120204:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81120208:	e03ffd15 	stw	zero,-12(fp)
8112020c:	00001906 	br	81120274 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
81120210:	00a044b4 	movhi	r2,33042
81120214:	108c2804 	addi	r2,r2,12448
81120218:	e0fffd17 	ldw	r3,-12(fp)
8112021c:	18c00324 	muli	r3,r3,12
81120220:	10c5883a 	add	r2,r2,r3
81120224:	10800017 	ldw	r2,0(r2)
81120228:	10000f1e 	bne	r2,zero,81120268 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
8112022c:	00a044b4 	movhi	r2,33042
81120230:	108c2804 	addi	r2,r2,12448
81120234:	e0fffd17 	ldw	r3,-12(fp)
81120238:	18c00324 	muli	r3,r3,12
8112023c:	10c5883a 	add	r2,r2,r3
81120240:	e0ffff17 	ldw	r3,-4(fp)
81120244:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
81120248:	d0e00c17 	ldw	r3,-32720(gp)
8112024c:	e0bffd17 	ldw	r2,-12(fp)
81120250:	1880020e 	bge	r3,r2,8112025c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
81120254:	e0bffd17 	ldw	r2,-12(fp)
81120258:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
8112025c:	e0bffd17 	ldw	r2,-12(fp)
81120260:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
81120264:	00000606 	br	81120280 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81120268:	e0bffd17 	ldw	r2,-12(fp)
8112026c:	10800044 	addi	r2,r2,1
81120270:	e0bffd15 	stw	r2,-12(fp)
81120274:	e0bffd17 	ldw	r2,-12(fp)
81120278:	10800810 	cmplti	r2,r2,32
8112027c:	103fe41e 	bne	r2,zero,81120210 <__reset+0xfb100210>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
81120280:	e0bffe17 	ldw	r2,-8(fp)
}
81120284:	e037883a 	mov	sp,fp
81120288:	df000017 	ldw	fp,0(sp)
8112028c:	dec00104 	addi	sp,sp,4
81120290:	f800283a 	ret

81120294 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81120294:	defff904 	addi	sp,sp,-28
81120298:	dfc00615 	stw	ra,24(sp)
8112029c:	df000515 	stw	fp,20(sp)
811202a0:	df000504 	addi	fp,sp,20
811202a4:	e13ffc15 	stw	r4,-16(fp)
811202a8:	e17ffd15 	stw	r5,-12(fp)
811202ac:	e1bffe15 	stw	r6,-8(fp)
811202b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
811202b4:	e0800217 	ldw	r2,8(fp)
811202b8:	d8800015 	stw	r2,0(sp)
811202bc:	e1ffff17 	ldw	r7,-4(fp)
811202c0:	e1bffe17 	ldw	r6,-8(fp)
811202c4:	e17ffd17 	ldw	r5,-12(fp)
811202c8:	e13ffc17 	ldw	r4,-16(fp)
811202cc:	11204440 	call	81120444 <alt_iic_isr_register>
}  
811202d0:	e037883a 	mov	sp,fp
811202d4:	dfc00117 	ldw	ra,4(sp)
811202d8:	df000017 	ldw	fp,0(sp)
811202dc:	dec00204 	addi	sp,sp,8
811202e0:	f800283a 	ret

811202e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
811202e4:	defff904 	addi	sp,sp,-28
811202e8:	df000615 	stw	fp,24(sp)
811202ec:	df000604 	addi	fp,sp,24
811202f0:	e13ffe15 	stw	r4,-8(fp)
811202f4:	e17fff15 	stw	r5,-4(fp)
811202f8:	e0bfff17 	ldw	r2,-4(fp)
811202fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120300:	0005303a 	rdctl	r2,status
81120304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120308:	e0fffb17 	ldw	r3,-20(fp)
8112030c:	00bfff84 	movi	r2,-2
81120310:	1884703a 	and	r2,r3,r2
81120314:	1001703a 	wrctl	status,r2
  
  return context;
81120318:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8112031c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
81120320:	00c00044 	movi	r3,1
81120324:	e0bffa17 	ldw	r2,-24(fp)
81120328:	1884983a 	sll	r2,r3,r2
8112032c:	1007883a 	mov	r3,r2
81120330:	d0a02f17 	ldw	r2,-32580(gp)
81120334:	1884b03a 	or	r2,r3,r2
81120338:	d0a02f15 	stw	r2,-32580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8112033c:	d0a02f17 	ldw	r2,-32580(gp)
81120340:	100170fa 	wrctl	ienable,r2
81120344:	e0bffc17 	ldw	r2,-16(fp)
81120348:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112034c:	e0bffd17 	ldw	r2,-12(fp)
81120350:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81120354:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
81120358:	0001883a 	nop
}
8112035c:	e037883a 	mov	sp,fp
81120360:	df000017 	ldw	fp,0(sp)
81120364:	dec00104 	addi	sp,sp,4
81120368:	f800283a 	ret

8112036c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8112036c:	defff904 	addi	sp,sp,-28
81120370:	df000615 	stw	fp,24(sp)
81120374:	df000604 	addi	fp,sp,24
81120378:	e13ffe15 	stw	r4,-8(fp)
8112037c:	e17fff15 	stw	r5,-4(fp)
81120380:	e0bfff17 	ldw	r2,-4(fp)
81120384:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120388:	0005303a 	rdctl	r2,status
8112038c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120390:	e0fffb17 	ldw	r3,-20(fp)
81120394:	00bfff84 	movi	r2,-2
81120398:	1884703a 	and	r2,r3,r2
8112039c:	1001703a 	wrctl	status,r2
  
  return context;
811203a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811203a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
811203a8:	00c00044 	movi	r3,1
811203ac:	e0bffa17 	ldw	r2,-24(fp)
811203b0:	1884983a 	sll	r2,r3,r2
811203b4:	0084303a 	nor	r2,zero,r2
811203b8:	1007883a 	mov	r3,r2
811203bc:	d0a02f17 	ldw	r2,-32580(gp)
811203c0:	1884703a 	and	r2,r3,r2
811203c4:	d0a02f15 	stw	r2,-32580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811203c8:	d0a02f17 	ldw	r2,-32580(gp)
811203cc:	100170fa 	wrctl	ienable,r2
811203d0:	e0bffc17 	ldw	r2,-16(fp)
811203d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811203d8:	e0bffd17 	ldw	r2,-12(fp)
811203dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811203e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
811203e4:	0001883a 	nop
}
811203e8:	e037883a 	mov	sp,fp
811203ec:	df000017 	ldw	fp,0(sp)
811203f0:	dec00104 	addi	sp,sp,4
811203f4:	f800283a 	ret

811203f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
811203f8:	defffc04 	addi	sp,sp,-16
811203fc:	df000315 	stw	fp,12(sp)
81120400:	df000304 	addi	fp,sp,12
81120404:	e13ffe15 	stw	r4,-8(fp)
81120408:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8112040c:	000530fa 	rdctl	r2,ienable
81120410:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
81120414:	00c00044 	movi	r3,1
81120418:	e0bfff17 	ldw	r2,-4(fp)
8112041c:	1884983a 	sll	r2,r3,r2
81120420:	1007883a 	mov	r3,r2
81120424:	e0bffd17 	ldw	r2,-12(fp)
81120428:	1884703a 	and	r2,r3,r2
8112042c:	1004c03a 	cmpne	r2,r2,zero
81120430:	10803fcc 	andi	r2,r2,255
}
81120434:	e037883a 	mov	sp,fp
81120438:	df000017 	ldw	fp,0(sp)
8112043c:	dec00104 	addi	sp,sp,4
81120440:	f800283a 	ret

81120444 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81120444:	defff504 	addi	sp,sp,-44
81120448:	dfc00a15 	stw	ra,40(sp)
8112044c:	df000915 	stw	fp,36(sp)
81120450:	df000904 	addi	fp,sp,36
81120454:	e13ffc15 	stw	r4,-16(fp)
81120458:	e17ffd15 	stw	r5,-12(fp)
8112045c:	e1bffe15 	stw	r6,-8(fp)
81120460:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
81120464:	00bffa84 	movi	r2,-22
81120468:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8112046c:	e0bffd17 	ldw	r2,-12(fp)
81120470:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81120474:	e0bff817 	ldw	r2,-32(fp)
81120478:	10800808 	cmpgei	r2,r2,32
8112047c:	1000271e 	bne	r2,zero,8112051c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120480:	0005303a 	rdctl	r2,status
81120484:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120488:	e0fffb17 	ldw	r3,-20(fp)
8112048c:	00bfff84 	movi	r2,-2
81120490:	1884703a 	and	r2,r3,r2
81120494:	1001703a 	wrctl	status,r2
  
  return context;
81120498:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8112049c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
811204a0:	00a044b4 	movhi	r2,33042
811204a4:	10958c04 	addi	r2,r2,22064
811204a8:	e0fff817 	ldw	r3,-32(fp)
811204ac:	180690fa 	slli	r3,r3,3
811204b0:	10c5883a 	add	r2,r2,r3
811204b4:	e0fffe17 	ldw	r3,-8(fp)
811204b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
811204bc:	00a044b4 	movhi	r2,33042
811204c0:	10958c04 	addi	r2,r2,22064
811204c4:	e0fff817 	ldw	r3,-32(fp)
811204c8:	180690fa 	slli	r3,r3,3
811204cc:	10c5883a 	add	r2,r2,r3
811204d0:	10800104 	addi	r2,r2,4
811204d4:	e0ffff17 	ldw	r3,-4(fp)
811204d8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
811204dc:	e0bffe17 	ldw	r2,-8(fp)
811204e0:	10000526 	beq	r2,zero,811204f8 <alt_iic_isr_register+0xb4>
811204e4:	e0bff817 	ldw	r2,-32(fp)
811204e8:	100b883a 	mov	r5,r2
811204ec:	e13ffc17 	ldw	r4,-16(fp)
811204f0:	11202e40 	call	811202e4 <alt_ic_irq_enable>
811204f4:	00000406 	br	81120508 <alt_iic_isr_register+0xc4>
811204f8:	e0bff817 	ldw	r2,-32(fp)
811204fc:	100b883a 	mov	r5,r2
81120500:	e13ffc17 	ldw	r4,-16(fp)
81120504:	112036c0 	call	8112036c <alt_ic_irq_disable>
81120508:	e0bff715 	stw	r2,-36(fp)
8112050c:	e0bffa17 	ldw	r2,-24(fp)
81120510:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120514:	e0bff917 	ldw	r2,-28(fp)
81120518:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8112051c:	e0bff717 	ldw	r2,-36(fp)
}
81120520:	e037883a 	mov	sp,fp
81120524:	dfc00117 	ldw	ra,4(sp)
81120528:	df000017 	ldw	fp,0(sp)
8112052c:	dec00204 	addi	sp,sp,8
81120530:	f800283a 	ret

81120534 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
81120534:	defff904 	addi	sp,sp,-28
81120538:	dfc00615 	stw	ra,24(sp)
8112053c:	df000515 	stw	fp,20(sp)
81120540:	df000504 	addi	fp,sp,20
81120544:	e13ffc15 	stw	r4,-16(fp)
81120548:	e17ffd15 	stw	r5,-12(fp)
8112054c:	e1bffe15 	stw	r6,-8(fp)
81120550:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
81120554:	e1bfff17 	ldw	r6,-4(fp)
81120558:	e17ffe17 	ldw	r5,-8(fp)
8112055c:	e13ffd17 	ldw	r4,-12(fp)
81120560:	111c2e00 	call	8111c2e0 <open>
81120564:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
81120568:	e0bffb17 	ldw	r2,-20(fp)
8112056c:	10001c16 	blt	r2,zero,811205e0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
81120570:	00a044b4 	movhi	r2,33042
81120574:	108c2804 	addi	r2,r2,12448
81120578:	e0fffb17 	ldw	r3,-20(fp)
8112057c:	18c00324 	muli	r3,r3,12
81120580:	10c5883a 	add	r2,r2,r3
81120584:	10c00017 	ldw	r3,0(r2)
81120588:	e0bffc17 	ldw	r2,-16(fp)
8112058c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
81120590:	00a044b4 	movhi	r2,33042
81120594:	108c2804 	addi	r2,r2,12448
81120598:	e0fffb17 	ldw	r3,-20(fp)
8112059c:	18c00324 	muli	r3,r3,12
811205a0:	10c5883a 	add	r2,r2,r3
811205a4:	10800104 	addi	r2,r2,4
811205a8:	10c00017 	ldw	r3,0(r2)
811205ac:	e0bffc17 	ldw	r2,-16(fp)
811205b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
811205b4:	00a044b4 	movhi	r2,33042
811205b8:	108c2804 	addi	r2,r2,12448
811205bc:	e0fffb17 	ldw	r3,-20(fp)
811205c0:	18c00324 	muli	r3,r3,12
811205c4:	10c5883a 	add	r2,r2,r3
811205c8:	10800204 	addi	r2,r2,8
811205cc:	10c00017 	ldw	r3,0(r2)
811205d0:	e0bffc17 	ldw	r2,-16(fp)
811205d4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
811205d8:	e13ffb17 	ldw	r4,-20(fp)
811205dc:	111c56c0 	call	8111c56c <alt_release_fd>
  }
} 
811205e0:	0001883a 	nop
811205e4:	e037883a 	mov	sp,fp
811205e8:	dfc00117 	ldw	ra,4(sp)
811205ec:	df000017 	ldw	fp,0(sp)
811205f0:	dec00204 	addi	sp,sp,8
811205f4:	f800283a 	ret

811205f8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
811205f8:	defffb04 	addi	sp,sp,-20
811205fc:	dfc00415 	stw	ra,16(sp)
81120600:	df000315 	stw	fp,12(sp)
81120604:	df000304 	addi	fp,sp,12
81120608:	e13ffd15 	stw	r4,-12(fp)
8112060c:	e17ffe15 	stw	r5,-8(fp)
81120610:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
81120614:	01c07fc4 	movi	r7,511
81120618:	01800044 	movi	r6,1
8112061c:	e17ffd17 	ldw	r5,-12(fp)
81120620:	012044b4 	movhi	r4,33042
81120624:	210c2b04 	addi	r4,r4,12460
81120628:	11205340 	call	81120534 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8112062c:	01c07fc4 	movi	r7,511
81120630:	000d883a 	mov	r6,zero
81120634:	e17ffe17 	ldw	r5,-8(fp)
81120638:	012044b4 	movhi	r4,33042
8112063c:	210c2804 	addi	r4,r4,12448
81120640:	11205340 	call	81120534 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
81120644:	01c07fc4 	movi	r7,511
81120648:	01800044 	movi	r6,1
8112064c:	e17fff17 	ldw	r5,-4(fp)
81120650:	012044b4 	movhi	r4,33042
81120654:	210c2e04 	addi	r4,r4,12472
81120658:	11205340 	call	81120534 <alt_open_fd>
}  
8112065c:	0001883a 	nop
81120660:	e037883a 	mov	sp,fp
81120664:	dfc00117 	ldw	ra,4(sp)
81120668:	df000017 	ldw	fp,0(sp)
8112066c:	dec00204 	addi	sp,sp,8
81120670:	f800283a 	ret

81120674 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
81120674:	defff204 	addi	sp,sp,-56
81120678:	dfc00a15 	stw	ra,40(sp)
8112067c:	df000915 	stw	fp,36(sp)
81120680:	df000904 	addi	fp,sp,36
81120684:	e13fff15 	stw	r4,-4(fp)
81120688:	e1400215 	stw	r5,8(fp)
8112068c:	e1800315 	stw	r6,12(fp)
81120690:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
81120694:	e0800204 	addi	r2,fp,8
81120698:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8112069c:	e0bfff17 	ldw	r2,-4(fp)
811206a0:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
811206a4:	00006f06 	br	81120864 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
811206a8:	e0bff807 	ldb	r2,-32(fp)
811206ac:	10800960 	cmpeqi	r2,r2,37
811206b0:	1000041e 	bne	r2,zero,811206c4 <alt_printf+0x50>
        {
            alt_putchar(c);
811206b4:	e0bff807 	ldb	r2,-32(fp)
811206b8:	1009883a 	mov	r4,r2
811206bc:	11208a00 	call	811208a0 <alt_putchar>
811206c0:	00006806 	br	81120864 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
811206c4:	e0bff717 	ldw	r2,-36(fp)
811206c8:	10c00044 	addi	r3,r2,1
811206cc:	e0fff715 	stw	r3,-36(fp)
811206d0:	10800003 	ldbu	r2,0(r2)
811206d4:	e0bff805 	stb	r2,-32(fp)
811206d8:	e0bff807 	ldb	r2,-32(fp)
811206dc:	10006926 	beq	r2,zero,81120884 <alt_printf+0x210>
            {
                if (c == '%')
811206e0:	e0bff807 	ldb	r2,-32(fp)
811206e4:	10800958 	cmpnei	r2,r2,37
811206e8:	1000041e 	bne	r2,zero,811206fc <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
811206ec:	e0bff807 	ldb	r2,-32(fp)
811206f0:	1009883a 	mov	r4,r2
811206f4:	11208a00 	call	811208a0 <alt_putchar>
811206f8:	00005a06 	br	81120864 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
811206fc:	e0bff807 	ldb	r2,-32(fp)
81120700:	108018d8 	cmpnei	r2,r2,99
81120704:	1000081e 	bne	r2,zero,81120728 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
81120708:	e0bffe17 	ldw	r2,-8(fp)
8112070c:	10c00104 	addi	r3,r2,4
81120710:	e0fffe15 	stw	r3,-8(fp)
81120714:	10800017 	ldw	r2,0(r2)
81120718:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8112071c:	e13ffd17 	ldw	r4,-12(fp)
81120720:	11208a00 	call	811208a0 <alt_putchar>
81120724:	00004f06 	br	81120864 <alt_printf+0x1f0>
                }
                else if (c == 'x')
81120728:	e0bff807 	ldb	r2,-32(fp)
8112072c:	10801e18 	cmpnei	r2,r2,120
81120730:	1000341e 	bne	r2,zero,81120804 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
81120734:	e0bffe17 	ldw	r2,-8(fp)
81120738:	10c00104 	addi	r3,r2,4
8112073c:	e0fffe15 	stw	r3,-8(fp)
81120740:	10800017 	ldw	r2,0(r2)
81120744:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81120748:	e0bffb17 	ldw	r2,-20(fp)
8112074c:	1000031e 	bne	r2,zero,8112075c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
81120750:	01000c04 	movi	r4,48
81120754:	11208a00 	call	811208a0 <alt_putchar>
                        continue;
81120758:	00004206 	br	81120864 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8112075c:	00800704 	movi	r2,28
81120760:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81120764:	00000306 	br	81120774 <alt_printf+0x100>
                        digit_shift -= 4;
81120768:	e0bff917 	ldw	r2,-28(fp)
8112076c:	10bfff04 	addi	r2,r2,-4
81120770:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81120774:	00c003c4 	movi	r3,15
81120778:	e0bff917 	ldw	r2,-28(fp)
8112077c:	1884983a 	sll	r2,r3,r2
81120780:	1007883a 	mov	r3,r2
81120784:	e0bffb17 	ldw	r2,-20(fp)
81120788:	1884703a 	and	r2,r3,r2
8112078c:	103ff626 	beq	r2,zero,81120768 <__reset+0xfb100768>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81120790:	00001906 	br	811207f8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81120794:	00c003c4 	movi	r3,15
81120798:	e0bff917 	ldw	r2,-28(fp)
8112079c:	1884983a 	sll	r2,r3,r2
811207a0:	1007883a 	mov	r3,r2
811207a4:	e0bffb17 	ldw	r2,-20(fp)
811207a8:	1886703a 	and	r3,r3,r2
811207ac:	e0bff917 	ldw	r2,-28(fp)
811207b0:	1884d83a 	srl	r2,r3,r2
811207b4:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
811207b8:	e0bffc17 	ldw	r2,-16(fp)
811207bc:	108002a8 	cmpgeui	r2,r2,10
811207c0:	1000041e 	bne	r2,zero,811207d4 <alt_printf+0x160>
                            c = '0' + digit;
811207c4:	e0bffc17 	ldw	r2,-16(fp)
811207c8:	10800c04 	addi	r2,r2,48
811207cc:	e0bff805 	stb	r2,-32(fp)
811207d0:	00000306 	br	811207e0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
811207d4:	e0bffc17 	ldw	r2,-16(fp)
811207d8:	108015c4 	addi	r2,r2,87
811207dc:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
811207e0:	e0bff807 	ldb	r2,-32(fp)
811207e4:	1009883a 	mov	r4,r2
811207e8:	11208a00 	call	811208a0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
811207ec:	e0bff917 	ldw	r2,-28(fp)
811207f0:	10bfff04 	addi	r2,r2,-4
811207f4:	e0bff915 	stw	r2,-28(fp)
811207f8:	e0bff917 	ldw	r2,-28(fp)
811207fc:	103fe50e 	bge	r2,zero,81120794 <__reset+0xfb100794>
81120800:	00001806 	br	81120864 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
81120804:	e0bff807 	ldb	r2,-32(fp)
81120808:	10801cd8 	cmpnei	r2,r2,115
8112080c:	1000151e 	bne	r2,zero,81120864 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
81120810:	e0bffe17 	ldw	r2,-8(fp)
81120814:	10c00104 	addi	r3,r2,4
81120818:	e0fffe15 	stw	r3,-8(fp)
8112081c:	10800017 	ldw	r2,0(r2)
81120820:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
81120824:	00000906 	br	8112084c <alt_printf+0x1d8>
                      alt_putchar(*s++);
81120828:	e0bffa17 	ldw	r2,-24(fp)
8112082c:	10c00044 	addi	r3,r2,1
81120830:	e0fffa15 	stw	r3,-24(fp)
81120834:	10800003 	ldbu	r2,0(r2)
81120838:	10803fcc 	andi	r2,r2,255
8112083c:	1080201c 	xori	r2,r2,128
81120840:	10bfe004 	addi	r2,r2,-128
81120844:	1009883a 	mov	r4,r2
81120848:	11208a00 	call	811208a0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8112084c:	e0bffa17 	ldw	r2,-24(fp)
81120850:	10800003 	ldbu	r2,0(r2)
81120854:	10803fcc 	andi	r2,r2,255
81120858:	1080201c 	xori	r2,r2,128
8112085c:	10bfe004 	addi	r2,r2,-128
81120860:	103ff11e 	bne	r2,zero,81120828 <__reset+0xfb100828>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81120864:	e0bff717 	ldw	r2,-36(fp)
81120868:	10c00044 	addi	r3,r2,1
8112086c:	e0fff715 	stw	r3,-36(fp)
81120870:	10800003 	ldbu	r2,0(r2)
81120874:	e0bff805 	stb	r2,-32(fp)
81120878:	e0bff807 	ldb	r2,-32(fp)
8112087c:	103f8a1e 	bne	r2,zero,811206a8 <__reset+0xfb1006a8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81120880:	00000106 	br	81120888 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81120884:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81120888:	0001883a 	nop
8112088c:	e037883a 	mov	sp,fp
81120890:	dfc00117 	ldw	ra,4(sp)
81120894:	df000017 	ldw	fp,0(sp)
81120898:	dec00504 	addi	sp,sp,20
8112089c:	f800283a 	ret

811208a0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
811208a0:	defffd04 	addi	sp,sp,-12
811208a4:	dfc00215 	stw	ra,8(sp)
811208a8:	df000115 	stw	fp,4(sp)
811208ac:	df000104 	addi	fp,sp,4
811208b0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
811208b4:	d0a00317 	ldw	r2,-32756(gp)
811208b8:	10800217 	ldw	r2,8(r2)
811208bc:	100b883a 	mov	r5,r2
811208c0:	e13fff17 	ldw	r4,-4(fp)
811208c4:	1120b040 	call	81120b04 <putc>
#endif
#endif
}
811208c8:	e037883a 	mov	sp,fp
811208cc:	dfc00117 	ldw	ra,4(sp)
811208d0:	df000017 	ldw	fp,0(sp)
811208d4:	dec00204 	addi	sp,sp,8
811208d8:	f800283a 	ret

811208dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
811208dc:	deffff04 	addi	sp,sp,-4
811208e0:	df000015 	stw	fp,0(sp)
811208e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
811208e8:	000170fa 	wrctl	ienable,zero
}
811208ec:	0001883a 	nop
811208f0:	e037883a 	mov	sp,fp
811208f4:	df000017 	ldw	fp,0(sp)
811208f8:	dec00104 	addi	sp,sp,4
811208fc:	f800283a 	ret

81120900 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
81120900:	defffe04 	addi	sp,sp,-8
81120904:	df000115 	stw	fp,4(sp)
81120908:	df000104 	addi	fp,sp,4
8112090c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
81120910:	e0bfff17 	ldw	r2,-4(fp)
81120914:	10bffe84 	addi	r2,r2,-6
81120918:	10c00428 	cmpgeui	r3,r2,16
8112091c:	18001a1e 	bne	r3,zero,81120988 <alt_exception_cause_generated_bad_addr+0x88>
81120920:	100690ba 	slli	r3,r2,2
81120924:	00a044b4 	movhi	r2,33042
81120928:	10824e04 	addi	r2,r2,2360
8112092c:	1885883a 	add	r2,r3,r2
81120930:	10800017 	ldw	r2,0(r2)
81120934:	1000683a 	jmp	r2
81120938:	81120978 	rdprs	r4,r16,18469
8112093c:	81120978 	rdprs	r4,r16,18469
81120940:	81120988 	cmpgei	r4,r16,18470
81120944:	81120988 	cmpgei	r4,r16,18470
81120948:	81120988 	cmpgei	r4,r16,18470
8112094c:	81120978 	rdprs	r4,r16,18469
81120950:	81120980 	call	88112098 <__reset+0x20f2098>
81120954:	81120988 	cmpgei	r4,r16,18470
81120958:	81120978 	rdprs	r4,r16,18469
8112095c:	81120978 	rdprs	r4,r16,18469
81120960:	81120988 	cmpgei	r4,r16,18470
81120964:	81120978 	rdprs	r4,r16,18469
81120968:	81120980 	call	88112098 <__reset+0x20f2098>
8112096c:	81120988 	cmpgei	r4,r16,18470
81120970:	81120988 	cmpgei	r4,r16,18470
81120974:	81120978 	rdprs	r4,r16,18469
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
81120978:	00800044 	movi	r2,1
8112097c:	00000306 	br	8112098c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
81120980:	0005883a 	mov	r2,zero
81120984:	00000106 	br	8112098c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
81120988:	0005883a 	mov	r2,zero
  }
}
8112098c:	e037883a 	mov	sp,fp
81120990:	df000017 	ldw	fp,0(sp)
81120994:	dec00104 	addi	sp,sp,4
81120998:	f800283a 	ret

8112099c <atexit>:
8112099c:	200b883a 	mov	r5,r4
811209a0:	000f883a 	mov	r7,zero
811209a4:	000d883a 	mov	r6,zero
811209a8:	0009883a 	mov	r4,zero
811209ac:	1120bcc1 	jmpi	81120bcc <__register_exitproc>

811209b0 <exit>:
811209b0:	defffe04 	addi	sp,sp,-8
811209b4:	000b883a 	mov	r5,zero
811209b8:	dc000015 	stw	r16,0(sp)
811209bc:	dfc00115 	stw	ra,4(sp)
811209c0:	2021883a 	mov	r16,r4
811209c4:	1120ce40 	call	81120ce4 <__call_exitprocs>
811209c8:	00a044b4 	movhi	r2,33042
811209cc:	10910e04 	addi	r2,r2,17464
811209d0:	11000017 	ldw	r4,0(r2)
811209d4:	20800f17 	ldw	r2,60(r4)
811209d8:	10000126 	beq	r2,zero,811209e0 <exit+0x30>
811209dc:	103ee83a 	callr	r2
811209e0:	8009883a 	mov	r4,r16
811209e4:	1120e640 	call	81120e64 <_exit>

811209e8 <memcmp>:
811209e8:	01c000c4 	movi	r7,3
811209ec:	3980192e 	bgeu	r7,r6,81120a54 <memcmp+0x6c>
811209f0:	2144b03a 	or	r2,r4,r5
811209f4:	11c4703a 	and	r2,r2,r7
811209f8:	10000f26 	beq	r2,zero,81120a38 <memcmp+0x50>
811209fc:	20800003 	ldbu	r2,0(r4)
81120a00:	28c00003 	ldbu	r3,0(r5)
81120a04:	10c0151e 	bne	r2,r3,81120a5c <memcmp+0x74>
81120a08:	31bfff84 	addi	r6,r6,-2
81120a0c:	01ffffc4 	movi	r7,-1
81120a10:	00000406 	br	81120a24 <memcmp+0x3c>
81120a14:	20800003 	ldbu	r2,0(r4)
81120a18:	28c00003 	ldbu	r3,0(r5)
81120a1c:	31bfffc4 	addi	r6,r6,-1
81120a20:	10c00e1e 	bne	r2,r3,81120a5c <memcmp+0x74>
81120a24:	21000044 	addi	r4,r4,1
81120a28:	29400044 	addi	r5,r5,1
81120a2c:	31fff91e 	bne	r6,r7,81120a14 <__reset+0xfb100a14>
81120a30:	0005883a 	mov	r2,zero
81120a34:	f800283a 	ret
81120a38:	20c00017 	ldw	r3,0(r4)
81120a3c:	28800017 	ldw	r2,0(r5)
81120a40:	18bfee1e 	bne	r3,r2,811209fc <__reset+0xfb1009fc>
81120a44:	31bfff04 	addi	r6,r6,-4
81120a48:	21000104 	addi	r4,r4,4
81120a4c:	29400104 	addi	r5,r5,4
81120a50:	39bff936 	bltu	r7,r6,81120a38 <__reset+0xfb100a38>
81120a54:	303fe91e 	bne	r6,zero,811209fc <__reset+0xfb1009fc>
81120a58:	003ff506 	br	81120a30 <__reset+0xfb100a30>
81120a5c:	10c5c83a 	sub	r2,r2,r3
81120a60:	f800283a 	ret

81120a64 <_putc_r>:
81120a64:	defffc04 	addi	sp,sp,-16
81120a68:	dc000215 	stw	r16,8(sp)
81120a6c:	dfc00315 	stw	ra,12(sp)
81120a70:	2021883a 	mov	r16,r4
81120a74:	20000226 	beq	r4,zero,81120a80 <_putc_r+0x1c>
81120a78:	20800e17 	ldw	r2,56(r4)
81120a7c:	10001b26 	beq	r2,zero,81120aec <_putc_r+0x88>
81120a80:	30800217 	ldw	r2,8(r6)
81120a84:	10bfffc4 	addi	r2,r2,-1
81120a88:	30800215 	stw	r2,8(r6)
81120a8c:	10000a16 	blt	r2,zero,81120ab8 <_putc_r+0x54>
81120a90:	30800017 	ldw	r2,0(r6)
81120a94:	11400005 	stb	r5,0(r2)
81120a98:	30800017 	ldw	r2,0(r6)
81120a9c:	10c00044 	addi	r3,r2,1
81120aa0:	30c00015 	stw	r3,0(r6)
81120aa4:	10800003 	ldbu	r2,0(r2)
81120aa8:	dfc00317 	ldw	ra,12(sp)
81120aac:	dc000217 	ldw	r16,8(sp)
81120ab0:	dec00404 	addi	sp,sp,16
81120ab4:	f800283a 	ret
81120ab8:	30c00617 	ldw	r3,24(r6)
81120abc:	10c00616 	blt	r2,r3,81120ad8 <_putc_r+0x74>
81120ac0:	30800017 	ldw	r2,0(r6)
81120ac4:	00c00284 	movi	r3,10
81120ac8:	11400005 	stb	r5,0(r2)
81120acc:	30800017 	ldw	r2,0(r6)
81120ad0:	11400003 	ldbu	r5,0(r2)
81120ad4:	28fff11e 	bne	r5,r3,81120a9c <__reset+0xfb100a9c>
81120ad8:	8009883a 	mov	r4,r16
81120adc:	dfc00317 	ldw	ra,12(sp)
81120ae0:	dc000217 	ldw	r16,8(sp)
81120ae4:	dec00404 	addi	sp,sp,16
81120ae8:	1118bb01 	jmpi	81118bb0 <__swbuf_r>
81120aec:	d9400015 	stw	r5,0(sp)
81120af0:	d9800115 	stw	r6,4(sp)
81120af4:	11136a00 	call	811136a0 <__sinit>
81120af8:	d9800117 	ldw	r6,4(sp)
81120afc:	d9400017 	ldw	r5,0(sp)
81120b00:	003fdf06 	br	81120a80 <__reset+0xfb100a80>

81120b04 <putc>:
81120b04:	00a044b4 	movhi	r2,33042
81120b08:	defffc04 	addi	sp,sp,-16
81120b0c:	10910f04 	addi	r2,r2,17468
81120b10:	dc000115 	stw	r16,4(sp)
81120b14:	14000017 	ldw	r16,0(r2)
81120b18:	dc400215 	stw	r17,8(sp)
81120b1c:	dfc00315 	stw	ra,12(sp)
81120b20:	2023883a 	mov	r17,r4
81120b24:	80000226 	beq	r16,zero,81120b30 <putc+0x2c>
81120b28:	80800e17 	ldw	r2,56(r16)
81120b2c:	10001a26 	beq	r2,zero,81120b98 <putc+0x94>
81120b30:	28800217 	ldw	r2,8(r5)
81120b34:	10bfffc4 	addi	r2,r2,-1
81120b38:	28800215 	stw	r2,8(r5)
81120b3c:	10000b16 	blt	r2,zero,81120b6c <putc+0x68>
81120b40:	28800017 	ldw	r2,0(r5)
81120b44:	14400005 	stb	r17,0(r2)
81120b48:	28800017 	ldw	r2,0(r5)
81120b4c:	10c00044 	addi	r3,r2,1
81120b50:	28c00015 	stw	r3,0(r5)
81120b54:	10800003 	ldbu	r2,0(r2)
81120b58:	dfc00317 	ldw	ra,12(sp)
81120b5c:	dc400217 	ldw	r17,8(sp)
81120b60:	dc000117 	ldw	r16,4(sp)
81120b64:	dec00404 	addi	sp,sp,16
81120b68:	f800283a 	ret
81120b6c:	28c00617 	ldw	r3,24(r5)
81120b70:	10c00e16 	blt	r2,r3,81120bac <putc+0xa8>
81120b74:	28800017 	ldw	r2,0(r5)
81120b78:	01000284 	movi	r4,10
81120b7c:	14400005 	stb	r17,0(r2)
81120b80:	28800017 	ldw	r2,0(r5)
81120b84:	10c00003 	ldbu	r3,0(r2)
81120b88:	193ff01e 	bne	r3,r4,81120b4c <__reset+0xfb100b4c>
81120b8c:	280d883a 	mov	r6,r5
81120b90:	180b883a 	mov	r5,r3
81120b94:	00000706 	br	81120bb4 <putc+0xb0>
81120b98:	8009883a 	mov	r4,r16
81120b9c:	d9400015 	stw	r5,0(sp)
81120ba0:	11136a00 	call	811136a0 <__sinit>
81120ba4:	d9400017 	ldw	r5,0(sp)
81120ba8:	003fe106 	br	81120b30 <__reset+0xfb100b30>
81120bac:	280d883a 	mov	r6,r5
81120bb0:	880b883a 	mov	r5,r17
81120bb4:	8009883a 	mov	r4,r16
81120bb8:	dfc00317 	ldw	ra,12(sp)
81120bbc:	dc400217 	ldw	r17,8(sp)
81120bc0:	dc000117 	ldw	r16,4(sp)
81120bc4:	dec00404 	addi	sp,sp,16
81120bc8:	1118bb01 	jmpi	81118bb0 <__swbuf_r>

81120bcc <__register_exitproc>:
81120bcc:	defffa04 	addi	sp,sp,-24
81120bd0:	dc000315 	stw	r16,12(sp)
81120bd4:	042044b4 	movhi	r16,33042
81120bd8:	84110e04 	addi	r16,r16,17464
81120bdc:	80c00017 	ldw	r3,0(r16)
81120be0:	dc400415 	stw	r17,16(sp)
81120be4:	dfc00515 	stw	ra,20(sp)
81120be8:	18805217 	ldw	r2,328(r3)
81120bec:	2023883a 	mov	r17,r4
81120bf0:	10003726 	beq	r2,zero,81120cd0 <__register_exitproc+0x104>
81120bf4:	10c00117 	ldw	r3,4(r2)
81120bf8:	010007c4 	movi	r4,31
81120bfc:	20c00e16 	blt	r4,r3,81120c38 <__register_exitproc+0x6c>
81120c00:	1a000044 	addi	r8,r3,1
81120c04:	8800221e 	bne	r17,zero,81120c90 <__register_exitproc+0xc4>
81120c08:	18c00084 	addi	r3,r3,2
81120c0c:	18c7883a 	add	r3,r3,r3
81120c10:	18c7883a 	add	r3,r3,r3
81120c14:	12000115 	stw	r8,4(r2)
81120c18:	10c7883a 	add	r3,r2,r3
81120c1c:	19400015 	stw	r5,0(r3)
81120c20:	0005883a 	mov	r2,zero
81120c24:	dfc00517 	ldw	ra,20(sp)
81120c28:	dc400417 	ldw	r17,16(sp)
81120c2c:	dc000317 	ldw	r16,12(sp)
81120c30:	dec00604 	addi	sp,sp,24
81120c34:	f800283a 	ret
81120c38:	00800034 	movhi	r2,0
81120c3c:	10800004 	addi	r2,r2,0
81120c40:	10002626 	beq	r2,zero,81120cdc <__register_exitproc+0x110>
81120c44:	01006404 	movi	r4,400
81120c48:	d9400015 	stw	r5,0(sp)
81120c4c:	d9800115 	stw	r6,4(sp)
81120c50:	d9c00215 	stw	r7,8(sp)
81120c54:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
81120c58:	d9400017 	ldw	r5,0(sp)
81120c5c:	d9800117 	ldw	r6,4(sp)
81120c60:	d9c00217 	ldw	r7,8(sp)
81120c64:	10001d26 	beq	r2,zero,81120cdc <__register_exitproc+0x110>
81120c68:	81000017 	ldw	r4,0(r16)
81120c6c:	10000115 	stw	zero,4(r2)
81120c70:	02000044 	movi	r8,1
81120c74:	22405217 	ldw	r9,328(r4)
81120c78:	0007883a 	mov	r3,zero
81120c7c:	12400015 	stw	r9,0(r2)
81120c80:	20805215 	stw	r2,328(r4)
81120c84:	10006215 	stw	zero,392(r2)
81120c88:	10006315 	stw	zero,396(r2)
81120c8c:	883fde26 	beq	r17,zero,81120c08 <__reset+0xfb100c08>
81120c90:	18c9883a 	add	r4,r3,r3
81120c94:	2109883a 	add	r4,r4,r4
81120c98:	1109883a 	add	r4,r2,r4
81120c9c:	21802215 	stw	r6,136(r4)
81120ca0:	01800044 	movi	r6,1
81120ca4:	12406217 	ldw	r9,392(r2)
81120ca8:	30cc983a 	sll	r6,r6,r3
81120cac:	4992b03a 	or	r9,r9,r6
81120cb0:	12406215 	stw	r9,392(r2)
81120cb4:	21c04215 	stw	r7,264(r4)
81120cb8:	01000084 	movi	r4,2
81120cbc:	893fd21e 	bne	r17,r4,81120c08 <__reset+0xfb100c08>
81120cc0:	11006317 	ldw	r4,396(r2)
81120cc4:	218cb03a 	or	r6,r4,r6
81120cc8:	11806315 	stw	r6,396(r2)
81120ccc:	003fce06 	br	81120c08 <__reset+0xfb100c08>
81120cd0:	18805304 	addi	r2,r3,332
81120cd4:	18805215 	stw	r2,328(r3)
81120cd8:	003fc606 	br	81120bf4 <__reset+0xfb100bf4>
81120cdc:	00bfffc4 	movi	r2,-1
81120ce0:	003fd006 	br	81120c24 <__reset+0xfb100c24>

81120ce4 <__call_exitprocs>:
81120ce4:	defff504 	addi	sp,sp,-44
81120ce8:	df000915 	stw	fp,36(sp)
81120cec:	dd400615 	stw	r21,24(sp)
81120cf0:	dc800315 	stw	r18,12(sp)
81120cf4:	dfc00a15 	stw	ra,40(sp)
81120cf8:	ddc00815 	stw	r23,32(sp)
81120cfc:	dd800715 	stw	r22,28(sp)
81120d00:	dd000515 	stw	r20,20(sp)
81120d04:	dcc00415 	stw	r19,16(sp)
81120d08:	dc400215 	stw	r17,8(sp)
81120d0c:	dc000115 	stw	r16,4(sp)
81120d10:	d9000015 	stw	r4,0(sp)
81120d14:	2839883a 	mov	fp,r5
81120d18:	04800044 	movi	r18,1
81120d1c:	057fffc4 	movi	r21,-1
81120d20:	00a044b4 	movhi	r2,33042
81120d24:	10910e04 	addi	r2,r2,17464
81120d28:	12000017 	ldw	r8,0(r2)
81120d2c:	45005217 	ldw	r20,328(r8)
81120d30:	44c05204 	addi	r19,r8,328
81120d34:	a0001c26 	beq	r20,zero,81120da8 <__call_exitprocs+0xc4>
81120d38:	a0800117 	ldw	r2,4(r20)
81120d3c:	15ffffc4 	addi	r23,r2,-1
81120d40:	b8000d16 	blt	r23,zero,81120d78 <__call_exitprocs+0x94>
81120d44:	14000044 	addi	r16,r2,1
81120d48:	8421883a 	add	r16,r16,r16
81120d4c:	8421883a 	add	r16,r16,r16
81120d50:	84402004 	addi	r17,r16,128
81120d54:	a463883a 	add	r17,r20,r17
81120d58:	a421883a 	add	r16,r20,r16
81120d5c:	e0001e26 	beq	fp,zero,81120dd8 <__call_exitprocs+0xf4>
81120d60:	80804017 	ldw	r2,256(r16)
81120d64:	e0801c26 	beq	fp,r2,81120dd8 <__call_exitprocs+0xf4>
81120d68:	bdffffc4 	addi	r23,r23,-1
81120d6c:	843fff04 	addi	r16,r16,-4
81120d70:	8c7fff04 	addi	r17,r17,-4
81120d74:	bd7ff91e 	bne	r23,r21,81120d5c <__reset+0xfb100d5c>
81120d78:	00800034 	movhi	r2,0
81120d7c:	10800004 	addi	r2,r2,0
81120d80:	10000926 	beq	r2,zero,81120da8 <__call_exitprocs+0xc4>
81120d84:	a0800117 	ldw	r2,4(r20)
81120d88:	1000301e 	bne	r2,zero,81120e4c <__call_exitprocs+0x168>
81120d8c:	a0800017 	ldw	r2,0(r20)
81120d90:	10003226 	beq	r2,zero,81120e5c <__call_exitprocs+0x178>
81120d94:	a009883a 	mov	r4,r20
81120d98:	98800015 	stw	r2,0(r19)
81120d9c:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
81120da0:	9d000017 	ldw	r20,0(r19)
81120da4:	a03fe41e 	bne	r20,zero,81120d38 <__reset+0xfb100d38>
81120da8:	dfc00a17 	ldw	ra,40(sp)
81120dac:	df000917 	ldw	fp,36(sp)
81120db0:	ddc00817 	ldw	r23,32(sp)
81120db4:	dd800717 	ldw	r22,28(sp)
81120db8:	dd400617 	ldw	r21,24(sp)
81120dbc:	dd000517 	ldw	r20,20(sp)
81120dc0:	dcc00417 	ldw	r19,16(sp)
81120dc4:	dc800317 	ldw	r18,12(sp)
81120dc8:	dc400217 	ldw	r17,8(sp)
81120dcc:	dc000117 	ldw	r16,4(sp)
81120dd0:	dec00b04 	addi	sp,sp,44
81120dd4:	f800283a 	ret
81120dd8:	a0800117 	ldw	r2,4(r20)
81120ddc:	80c00017 	ldw	r3,0(r16)
81120de0:	10bfffc4 	addi	r2,r2,-1
81120de4:	15c01426 	beq	r2,r23,81120e38 <__call_exitprocs+0x154>
81120de8:	80000015 	stw	zero,0(r16)
81120dec:	183fde26 	beq	r3,zero,81120d68 <__reset+0xfb100d68>
81120df0:	95c8983a 	sll	r4,r18,r23
81120df4:	a0806217 	ldw	r2,392(r20)
81120df8:	a5800117 	ldw	r22,4(r20)
81120dfc:	2084703a 	and	r2,r4,r2
81120e00:	10000b26 	beq	r2,zero,81120e30 <__call_exitprocs+0x14c>
81120e04:	a0806317 	ldw	r2,396(r20)
81120e08:	2088703a 	and	r4,r4,r2
81120e0c:	20000c1e 	bne	r4,zero,81120e40 <__call_exitprocs+0x15c>
81120e10:	89400017 	ldw	r5,0(r17)
81120e14:	d9000017 	ldw	r4,0(sp)
81120e18:	183ee83a 	callr	r3
81120e1c:	a0800117 	ldw	r2,4(r20)
81120e20:	15bfbf1e 	bne	r2,r22,81120d20 <__reset+0xfb100d20>
81120e24:	98800017 	ldw	r2,0(r19)
81120e28:	153fcf26 	beq	r2,r20,81120d68 <__reset+0xfb100d68>
81120e2c:	003fbc06 	br	81120d20 <__reset+0xfb100d20>
81120e30:	183ee83a 	callr	r3
81120e34:	003ff906 	br	81120e1c <__reset+0xfb100e1c>
81120e38:	a5c00115 	stw	r23,4(r20)
81120e3c:	003feb06 	br	81120dec <__reset+0xfb100dec>
81120e40:	89000017 	ldw	r4,0(r17)
81120e44:	183ee83a 	callr	r3
81120e48:	003ff406 	br	81120e1c <__reset+0xfb100e1c>
81120e4c:	a0800017 	ldw	r2,0(r20)
81120e50:	a027883a 	mov	r19,r20
81120e54:	1029883a 	mov	r20,r2
81120e58:	003fb606 	br	81120d34 <__reset+0xfb100d34>
81120e5c:	0005883a 	mov	r2,zero
81120e60:	003ffb06 	br	81120e50 <__reset+0xfb100e50>

81120e64 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
81120e64:	defffd04 	addi	sp,sp,-12
81120e68:	df000215 	stw	fp,8(sp)
81120e6c:	df000204 	addi	fp,sp,8
81120e70:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
81120e74:	0001883a 	nop
81120e78:	e0bfff17 	ldw	r2,-4(fp)
81120e7c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
81120e80:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
81120e84:	10000226 	beq	r2,zero,81120e90 <_exit+0x2c>
    ALT_SIM_FAIL();
81120e88:	002af070 	cmpltui	zero,zero,43969
81120e8c:	00000106 	br	81120e94 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
81120e90:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
81120e94:	003fff06 	br	81120e94 <__reset+0xfb100e94>
