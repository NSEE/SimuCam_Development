
COMM_Pedreiro_Test.elf:     file format elf32-littlenios2
COMM_Pedreiro_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00021cf4 memsz 0x00022578 flags rwx
    LOAD off    0x00023000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00023000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e4b4  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001950  8111e6f8  8111e6f8  0001f6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ccc  81120048  81120048  00021048  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000884  81121d14  81121d14  00022d14  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  81122598  81122598  00023000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00023000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00023000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001358  00000000  00000000  00023028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00030e52  00000000  00000000  00024380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c3b3  00000000  00000000  000551d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000101af  00000000  00000000  00061585  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004690  00000000  00000000  00071734  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006f06  00000000  00000000  00075dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000196a9  00000000  00000000  0007ccca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00096374  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b58  00000000  00000000  000963b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0009e379  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0009e37c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009e388  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009e389  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0009e38a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0009e38e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009e392  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0009e396  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0009e3a1  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0009e3ac  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0009e3b7  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  0009e3c8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00262647  00000000  00000000  0009e41b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
8111e6f8 l    d  .rodata	00000000 .rodata
81120048 l    d  .rwdata	00000000 .rwdata
81121d14 l    d  .bss	00000000 .bss
81122598 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../COMM_Pedreiro_Test_bsp//obj/HAL/src/crt0.o
81100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 comm.c
81121d18 l     O .bss	00000004 channel_a_hold_context
81121d1c l     O .bss	00000004 channel_b_hold_context
81121d20 l     O .bss	00000004 channel_c_hold_context
81121d24 l     O .bss	00000004 channel_d_hold_context
81121d28 l     O .bss	00000004 channel_e_hold_context
81121d2c l     O .bss	00000004 channel_f_hold_context
81121d30 l     O .bss	00000004 channel_g_hold_context
81121d34 l     O .bss	00000004 channel_h_hold_context
811015a4 l     F .text	0000004c write_reg
811015f0 l     F .text	00000048 read_reg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
81121ca4 l     O .rwdata	00000001 io_value
811017c0 l     F .text	00000074 ctrl_io_lvds_drive
00000000 l    df *ABS*	00000000 fee_buffers.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
811029c8 l     F .text	00000134 msgdma_write_extended_descriptor
81102afc l     F .text	0000015c msgdma_construct_extended_descriptor
81102c58 l     F .text	00000288 msgdma_descriptor_async_transfer
81102ee0 l     F .text	0000032c msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81103954 l     F .text	0000004c write_reg
811039a0 l     F .text	00000048 read_reg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 spwc.c
00000000 l    df *ABS*	00000000 tran.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 eth.c
00000000 l    df *ABS*	00000000 pgen.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 mebxhwt01.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
81120048 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
8111fc26 l     O .rodata	00000010 zeroes.4404
8110f440 l     F .text	000000bc __sbprintf
8111fc36 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
8110f650 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
81111180 l     F .text	00000008 __fp_unlock
81111194 l     F .text	0000019c __sinit.part.1
81111330 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
8112048c l     O .rwdata	00000020 lc_ctype_charset
8112046c l     O .rwdata	00000020 lc_message_charset
811204ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
8111fc64 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
8111446c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
8111493c l     F .text	000000fc __sprint_r.part.0
8111fd98 l     O .rodata	00000010 blanks.4348
8111fd88 l     O .rodata	00000010 zeroes.4349
81115ec8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
81119530 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
8111965c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81119688 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
811198f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
811199d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
81119e10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
81121d00 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
8111a230 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
8111a364 l     F .text	00000034 alt_dev_reg
81120a94 l     O .rwdata	00001060 jtag_uart_0
81121af4 l     O .rwdata	000000c4 rs232_uart
81121bb8 l     O .rwdata	00000060 dma_DDR_M1
81121c18 l     O .rwdata	00000060 dma_DDR_M2
81121c78 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
8111a6dc l     F .text	0000020c altera_avalon_jtag_uart_irq
8111a8e8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8111af20 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
8111b1d0 l     F .text	0000009c altera_avalon_uart_irq
8111b26c l     F .text	000000e4 altera_avalon_uart_rxirq
8111b350 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
8111b4ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
8111b704 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8111b8ec l     F .text	0000003c alt_get_errno
8111b928 l     F .text	00000094 alt_msgdma_write_standard_descriptor
8111b9bc l     F .text	0000012c alt_msgdma_write_extended_descriptor
8111bae8 l     F .text	00000184 alt_msgdma_irq
8111bc6c l     F .text	0000008c alt_msgdma_construct_standard_descriptor
8111bcf8 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8111be4c l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
8111c11c l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
8111c764 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
8111c808 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8111d894 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8111dd64 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
8111dea4 l     F .text	0000003c alt_get_errno
8111dee0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81121dcc g     O .bss	00000004 alt_instruction_exception_handler
8111d678 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8110d020 g     F .text	00000018 putchar
81103e64 g     F .text	000000e0 SPWC_WRITE_REG32
811006c8 g     F .text	00000050 comm_channel_c_int_flag_buffer_empty
81113c28 g     F .text	00000074 _mprec_log10
81105418 g     F .text	000000e0 TRAN_READ_REG32
811022fc g     F .text	00000100 I2C_Read
81113d14 g     F .text	0000008c __any_on
811165bc g     F .text	00000054 _isatty_r
8111fc70 g     O .rodata	00000028 __mprec_tinytens
81119ae4 g     F .text	0000007c alt_main
811016d4 g     F .text	00000034 disable_lvds_board
811038ec g     F .text	00000068 rstc_hold_device_reset
8110d038 g     F .text	000000c0 _puts_r
81121cb4 g     O .rwdata	00000004 ul_spwc_c_spacewire_link_control_status_register_value
81122498 g     O .bss	00000100 alt_irq
81121d80 g     O .bss	00000004 ul_tran_d_interface_control_status_register_value
81116610 g     F .text	00000060 _lseek_r
81121cc0 g     O .rwdata	00000004 ul_spwc_f_spacewire_link_control_status_register_value
811186b0 g     F .text	00000088 .hidden __eqdf2
81107b4c g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_FULL
811070a8 g     F .text	00000398 DDR2_MEMORY_READ_TEST
81103e20 g     F .text	00000044 SSDP_UPDATE
8111c544 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
81121d54 g     O .bss	00000004 ul_spwc_a_interface_control_status_register_value
81122598 g       *ABS*	00000000 __alt_heap_start
81121d51 g     O .bss	00000001 SspdConfigControl
8110cfdc g     F .text	0000003c printf
811166d0 g     F .text	0000009c _wcrtomb_r
811005ec g     F .text	0000003c comm_channel_h_int_flag_clear_buffer_empty
811147fc g     F .text	0000005c __sseek
811114d0 g     F .text	00000010 __sinit
81115f84 g     F .text	00000140 __swbuf_r
811002c0 g     F .text	00000038 comm_channel_b_handle_irq
81111f98 g     F .text	0000007c _setlocale_r
81121ca8 g     O .rwdata	00000004 LedsPainelControl
81111338 g     F .text	00000068 __sfmoreglue
81119b84 g     F .text	00000024 __malloc_unlock
81107e20 g     F .text	0000020c DMA_MULTIPLE_TRANSFER
8110802c g     F .text	00000144 DMA_EXTENDED_SINGLE_TRANSFER
8110b8e8 g     F .text	00000440 .hidden __divsf3
811055c4 g     F .text	000001f4 v_Transparent_Interface_Enable_Control
81106180 g     F .text	000002a8 ui_Transparent_Interface_Get_SpaceWire_Data
81121d7c g     O .bss	00000004 ul_tran_c_interface_control_status_register_value
81104900 g     F .text	00000058 ul_SpaceWire_Interface_Interrupts_Flags_Read
81100768 g     F .text	00000050 comm_channel_e_int_flag_buffer_empty
81112b20 g     F .text	0000015c memmove
81100aec g     F .text	000000a4 comm_update_int_control
811007b8 g     F .text	00000050 comm_channel_f_int_flag_buffer_empty
81105338 g     F .text	000000e0 TRAN_WRITE_REG32
81100410 g     F .text	00000038 comm_channel_h_handle_irq
811114b8 g     F .text	00000018 _cleanup
81112da4 g     F .text	000000a8 _Balloc
8111c494 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
81107bd4 g     F .text	000000a0 DMA_DISPATCHER_STOP
81118738 g     F .text	000000dc .hidden __gtdf2
8111e0f8 g     F .text	00000024 altera_nios2_gen2_irq_init
811221f8 g     O .bss	00000054 spw_e
81102658 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
8112224c g     O .bss	00000054 spw_b
811086c4 g     F .text	000000f0 TEMP_Read
81116560 g     F .text	0000005c _fstat_r
81121db0 g     O .bss	00000004 errno
8110d180 g     F .text	00000014 __srget
81114778 g     F .text	00000008 __seofread
8110166c g     F .text	00000034 disable_iso_drivers
81104e20 g     F .text	00000070 uc_SpaceWire_Interface_Get_TimeCode
81103300 g     F .text	0000003c msgdma_extended_descriptor_sync_transfer
81121dbc g     O .bss	00000004 alt_argv
811004fc g     F .text	0000003c comm_channel_d_int_flag_clear_buffer_empty
81129ca4 g       *ABS*	00000000 _gp
8111a200 g     F .text	00000030 usleep
81104d70 g     F .text	0000005c v_SpaceWire_Interface_Send_TimeCode
81101834 g     F .text	000000a8 fee_init_m1_dma
811222a0 g     O .bss	00000054 spw_g
81104cc0 g     F .text	00000058 ul_SpaceWire_Interface_Link_Error_Read
81101984 g     F .text	0000040c fee_dma_m1_transfer
811018dc g     F .text	000000a8 fee_init_m2_dma
8111cfb4 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81120914 g     O .rwdata	00000180 alt_fd_list
8110cd6c g     F .text	00000070 _getc_r
8110cddc g     F .text	00000088 getc
811008a8 g     F .text	00000178 comm_init_interrupt
8110d018 g     F .text	00000008 _putchar_r
81100484 g     F .text	0000003c comm_channel_b_int_flag_clear_buffer_empty
8111da34 g     F .text	00000090 alt_find_dev
8110ce64 g     F .text	00000148 memcpy
81121d3c g     O .bss	00000004 dma_m1_dev
81104d18 g     F .text	00000058 ul_SpaceWire_Interface_Link_Status_Read
81111188 g     F .text	0000000c _cleanup_r
81119284 g     F .text	000000dc .hidden __floatsidf
81121d8c g     O .bss	00000004 ul_tran_g_interface_control_status_register_value
8111de28 g     F .text	0000007c alt_io_redirect
81118814 g     F .text	000000f4 .hidden __ltdf2
8111e6f8 g       *ABS*	00000000 __DTOR_END__
8111d3d4 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
8111d6b4 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
8111d624 g     F .text	00000054 alt_msgdma_register_callback
81121d70 g     O .bss	00000004 ul_spwc_h_interface_control_status_register_value
81101280 g     F .text	000000b0 comm_update_timecode_tx
8110d0f8 g     F .text	00000014 puts
8111e2c8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
8111465c g     F .text	00000074 __fpclassifyd
81121cc8 g     O .rwdata	00000004 ul_spwc_h_spacewire_link_control_status_register_value
81113b84 g     F .text	000000a4 __ratio
81104958 g     F .text	00000174 v_SpaceWire_Interface_Interrupts_Flags_Clear
81115eac g     F .text	0000001c __vfiprintf_internal
8111aae0 g     F .text	0000021c altera_avalon_jtag_uart_read
8111cc94 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
8110cfac g     F .text	00000030 _printf_r
81117460 g     F .text	00000064 .hidden __udivsi3
81119930 g     F .text	000000a4 isatty
81121d50 g     O .bss	00000001 LedsBoardControl
811016a0 g     F .text	00000034 enable_lvds_board
81105da8 g     F .text	00000054 b_Transparent_Interface_TX_FIFO_Status_Full
8111fcc0 g     O .rodata	000000c8 __mprec_tens
81121d6c g     O .bss	00000004 ul_spwc_g_interface_control_status_register_value
81121d64 g     O .bss	00000004 ul_spwc_e_interface_control_status_register_value
81112014 g     F .text	0000000c __locale_charset
81108318 g     F .text	00000034 v_Pattern_Generator_Start
811023fc g     F .text	00000158 I2C_MultipleRead
81121dac g     O .bss	00000004 __malloc_top_pad
81100330 g     F .text	00000038 comm_channel_d_handle_irq
81121cd4 g     O .rwdata	00000004 __mb_cur_max
81112044 g     F .text	0000000c _localeconv_r
8110027c g     F .text	00000044 comm_channel_a_handle_irq
81104acc g     F .text	000001f4 v_SpaceWire_Interface_Link_Control
811131b0 g     F .text	0000003c __i2b
81111954 g     F .text	000004bc __sfvwrite_r
811146d0 g     F .text	00000054 _sbrk_r
81101638 g     F .text	00000034 enable_iso_drivers
81116670 g     F .text	00000060 _read_r
81121cf4 g     O .rwdata	00000004 alt_max_fd
81116254 g     F .text	000000f0 _fclose_r
81111150 g     F .text	00000030 fflush
81121da8 g     O .bss	00000004 __malloc_max_sbrked_mem
81119774 g     F .text	00000180 alt_irq_register
81121d44 g     O .bss	00000004 fee_buffer_side_t
8110ca50 g     F .text	00000110 .hidden __extendsfdf2
811021a4 g     F .text	00000080 I2C_TestAdress
81100368 g     F .text	00000038 comm_channel_e_handle_irq
8111751c g     F .text	000008ac .hidden __adddf3
8111392c g     F .text	0000010c __b2d
8111c9f4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
81116e30 g     F .text	00000538 .hidden __umoddi3
81119a10 g     F .text	000000d4 lseek
81121ccc g     O .rwdata	00000004 _global_impure_ptr
81105dfc g     F .text	00000054 b_Transparent_Interface_TX_FIFO_Status_Empty
81113f08 g     F .text	00000564 _realloc_r
81122598 g       *ABS*	00000000 __bss_end
8111dc74 g     F .text	000000f0 alt_iic_isr_register
8110460c g     F .text	00000100 v_SpaceWire_Interface_Force_Reset
8111a0f8 g     F .text	00000108 alt_tick
8111d4b8 g     F .text	0000016c alt_msgdma_init
811168b8 g     F .text	00000578 .hidden __udivdi3
81121d48 g     O .bss	00000004 fee_channel_buffer_id_t
811164bc g     F .text	00000024 _fputwc_r
8111fc98 g     O .rodata	00000028 __mprec_bigtens
81112f94 g     F .text	00000104 __s2b
81119360 g     F .text	000000a8 .hidden __floatunsidf
8111366c g     F .text	00000060 __mcmp
8111b124 g     F .text	000000ac altera_avalon_uart_init
8111d72c g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
811114f0 g     F .text	00000018 __fp_lock_all
8111dc28 g     F .text	0000004c alt_ic_irq_enabled
81102224 g     F .text	000000d8 I2C_Write
81104ef0 g     F .text	000001b0 b_SpaceWire_Interface_Set_TX_Div
811082c8 g     F .text	00000050 ul_Pattern_Generator_Read_Register
8111a05c g     F .text	0000009c alt_alarm_stop
81121db4 g     O .bss	00000004 alt_irq_active
81105ea0 g     F .text	00000198 b_Transparent_Interface_Switch_Channel
811000fc g     F .exceptions	000000d4 alt_irq_handler
811208ec g     O .rwdata	00000028 alt_dev_null
8111c62c g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
811051e4 g     F .text	000000ac b_SpaceWire_Interface_Read_RX_Data
81102554 g     F .text	0000008c i2c_start
81105c68 g     F .text	00000054 b_Transparent_Interface_RX_FIFO_Status_Full
8111d348 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
81105290 g     F .text	000000a8 ui_SpaceWire_Interface_Get_SpaceWire_Data
8111963c g     F .text	00000020 alt_dcache_flush_all
81113098 g     F .text	00000068 __hi0bits
81119204 g     F .text	00000080 .hidden __fixdfsi
81103d58 g     F .text	000000c8 SSDP_CONFIG
81102958 g     F .text	00000070 LEDS_PAINEL_DRIVE
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
81121cec g     O .rwdata	00000008 alt_dev_list
8111a26c g     F .text	000000f8 write
81113da0 g     F .text	000000a0 _putc_r
811196c4 g     F .text	000000b0 fstat
81107d14 g     F .text	0000010c DMA_SINGLE_TRANSFER
8110b6d8 g     F .text	00000050 _reg_write
81100678 g     F .text	00000050 comm_channel_b_int_flag_buffer_empty
81118814 g     F .text	000000f4 .hidden __ledf2
81105564 g     F .text	00000060 ul_Transparent_Interface_Read_Register
811039e8 g     F .text	00000050 v_spi_start
81100538 g     F .text	0000003c comm_channel_e_int_flag_clear_buffer_empty
811133e4 g     F .text	00000140 __pow5mult
81114a50 g     F .text	0000145c ___vfiprintf_internal_r
81121da0 g     O .bss	00000004 __nlocale_changed
811174c4 g     F .text	00000058 .hidden __umodsi3
81106c84 g     F .text	00000424 DDR2_MEMORY_WRITE_TEST
8111ca4c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81122598 g       *ABS*	00000000 end
811005b0 g     F .text	0000003c comm_channel_g_int_flag_clear_buffer_empty
8111b740 g     F .text	000001ac altera_avalon_uart_write
81121d38 g     O .bss	00000004 comm_spw_channel_t
811222f4 g     O .bss	00000054 spw_d
8110470c g     F .text	000001f4 v_SpaceWire_Interface_Interrupts_Enable_Control
8111a61c g     F .text	000000c0 altera_avalon_jtag_uart_init
81121d78 g     O .bss	00000004 ul_tran_b_interface_control_status_register_value
81100574 g     F .text	0000003c comm_channel_f_int_flag_clear_buffer_empty
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
8111e6f8 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81105d0c g     F .text	00000044 v_Transparent_Interface_TX_FIFO_Reset
8111af98 g     F .text	0000007c alt_avalon_timer_sc_init
8111b074 g     F .text	00000060 altera_avalon_uart_write_fd
8110cd08 g     F .text	00000064 .hidden __clzsi2
8110834c g     F .text	00000034 v_Pattern_Generator_Stop
81121d5c g     O .bss	00000004 ul_spwc_c_interface_control_status_register_value
8111b0d4 g     F .text	00000050 altera_avalon_uart_close_fd
8111acfc g     F .text	00000224 altera_avalon_jtag_uart_write
811059ac g     F .text	00000058 ul_Transparent_Interface_Interrupts_Flags_Read
811114e0 g     F .text	00000004 __sfp_lock_acquire
811087b4 g     F .text	00000040 sense_log_temp
81112a3c g     F .text	000000e4 memchr
8110d22c g     F .text	000021f8 ___vfprintf_internal_r
81105d50 g     F .text	00000058 ul_Transparent_Interface_TX_FIFO_Status_Read
81111644 g     F .text	00000310 _free_r
81119ba8 g     F .text	0000022c alt_printf
8110b778 g     F .text	00000104 _print_codec_status
81121cac g     O .rwdata	00000004 ul_spwc_a_spacewire_link_control_status_register_value
81112020 g     F .text	00000010 __locale_mb_cur_max
8110320c g     F .text	000000b8 msgdma_construct_extended_mm_to_mm_descriptor
81107c74 g     F .text	000000a0 DMA_DISPATCHER_RESET
8111e544 g     F .text	00000180 __call_exitprocs
8110d10c g     F .text	00000074 __srget_r
81106428 g     F .text	000002a4 DDR2_EEPROM_TEST
81106bfc g     F .text	00000088 DDR2_SWITCH_MEMORY
81121d9c g     O .bss	00000004 __mlocale_changed
81121cd8 g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	00000038 _start
81121dc4 g     O .bss	00000004 _alt_tick_rate
81113524 g     F .text	00000148 __lshift
8111c4ec g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
81121dc8 g     O .bss	00000004 _alt_nticks
81119e4c g     F .text	000000fc read
8111a3d0 g     F .text	000000e8 alt_sys_init
811083b4 g     F .text	00000048 Pattern_Generator_Status
8110c124 g     F .text	00000124 .hidden __floatsisf
81100808 g     F .text	00000050 comm_channel_g_int_flag_buffer_empty
81104090 g     F .text	00000060 ul_SpaceWire_Interface_Read_Register
8111e42c g     F .text	00000118 __register_exitproc
8110826c g     F .text	0000005c b_Pattern_Generator_Write_Register
81100c10 g     F .text	000000a0 comm_config_windowing
811131ec g     F .text	000001f8 __multiply
81100e28 g     F .text	000000c8 comm_update_link
8111a988 g     F .text	00000068 altera_avalon_jtag_uart_close
81103ba0 g     F .text	00000050 v_spi_end
81121dd0 g     O .bss	00000028 __malloc_current_mallinfo
81100d30 g     F .text	000000f8 comm_config_link
81113a38 g     F .text	0000014c __d2b
81103bf0 g     F .text	00000168 RTCC_SPI_R_MAC
8111a4b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
8111e224 g     F .text	000000a4 alt_get_fd
81107a68 g     F .text	0000005c DMA_OPEN_DEVICE
81119408 g     F .text	00000128 alt_busy_sleep
81121d60 g     O .bss	00000004 ul_spwc_d_interface_control_status_register_value
8110b87c g     F .text	0000006c _split_codec_status
81100718 g     F .text	00000050 comm_channel_d_int_flag_buffer_empty
8111613c g     F .text	00000054 _close_r
81107440 g     F .text	000002e0 DDR2_MEMORY_RANDOM_WRITE_TEST
81121d58 g     O .bss	00000004 ul_spwc_b_interface_control_status_register_value
8111c99c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8111e3b0 g     F .text	0000007c memcmp
8111a578 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
81122598 g       *ABS*	00000000 __alt_stack_base
8111a5c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
8111caa4 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81103880 g     F .text	0000006c rstc_release_device_reset
8110f4fc g     F .text	00000154 __swsetup_r
8110ac58 g     F .text	00000360 TestLeds
81117dc8 g     F .text	000008e8 .hidden __divdf3
81121d88 g     O .bss	00000004 ul_tran_f_interface_control_status_register_value
811113a0 g     F .text	00000118 __sfp
81107b90 g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_EMPTY
81113c9c g     F .text	00000078 __copybits
811204e4 g     O .rwdata	00000408 __malloc_av_
811114ec g     F .text	00000004 __sinit_lock_release
8110381c g     F .text	00000064 rstc_simucam_reset
811025e0 g     F .text	00000078 i2c_stop
8110c338 g     F .text	00000718 .hidden __muldf3
81114724 g     F .text	00000054 __sread
8111e11c g     F .text	00000108 alt_find_file
811028e0 g     F .text	00000078 LEDS_BOARD_DRIVE
8111d8d0 g     F .text	000000a4 alt_dev_llist_insert
81119b60 g     F .text	00000024 __malloc_lock
81119fac g     F .text	000000b0 sbrk
811110f4 g     F .text	0000005c _fflush_r
81116190 g     F .text	000000c4 _calloc_r
811010a4 g     F .text	000000b0 comm_update_timecode_rx
81121d14 g     O .bss	00000001 int_cnt
81107ac4 g     F .text	00000044 DMA_CONFIG
81121d14 g       *ABS*	00000000 __bss_start
811011b8 g     F .text	000000c8 comm_send_timecode_tx
8110821c g     F .text	00000050 PGEN_READ_REG32
81112c7c g     F .text	00000128 memset
81105bbc g     F .text	00000058 ul_Transparent_Interface_RX_FIFO_Status_Read
811013d4 g     F .text	000001d0 comm_init_channel
8111d460 g     F .text	00000058 alt_msgdma_open
811066cc g     F .text	00000530 DDR2_EEPROM_DUMP
81108e98 g     F .text	00001dc0 main
81121dc0 g     O .bss	00000004 alt_envp
81100628 g     F .text	00000050 comm_channel_a_int_flag_buffer_empty
81121da4 g     O .bss	00000004 __malloc_max_total_mem
8111cd84 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
81108380 g     F .text	00000034 v_Pattern_Generator_Reset
8111a518 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
81108488 g     F .text	0000023c POWER_Read
81102788 g     F .text	00000158 i2c_read
811160c4 g     F .text	00000018 __swbuf
81101330 g     F .text	000000a4 comm_update_buffers_status
81114858 g     F .text	00000008 __sclose
811fa000 g       *ABS*	00000000 __alt_heap_limit
81116344 g     F .text	00000014 fclose
8110cb60 g     F .text	000001a8 .hidden __truncdfsf2
81121cb8 g     O .rwdata	00000004 ul_spwc_d_spacewire_link_control_status_register_value
8110f850 g     F .text	00001688 _dtoa_r
8111d088 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
81112230 g     F .text	0000080c _malloc_r
8111682c g     F .text	00000030 __ascii_wctomb
81121cf8 g     O .rwdata	00000004 alt_errno
8111cbdc g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
8110333c g     F .text	000004e0 POWER_SPI_RW
81100fdc g     F .text	000000c8 comm_update_link_status
81111e10 g     F .text	000000c4 _fwalk
81121d94 g     O .bss	00000004 InitialState
81103f44 g     F .text	000000e0 SPWC_READ_REG32
81122348 g     O .bss	00000054 spw_f
8110819c g     F .text	00000030 v_Eth_Release_Reset
81113e40 g     F .text	000000c8 putc
81117368 g     F .text	00000084 .hidden __divsi3
81111520 g     F .text	00000124 _malloc_trim_r
8111e6f8 g       *ABS*	00000000 __CTOR_END__
8110bd28 g     F .text	000003fc .hidden __mulsf3
81121d4c g     O .bss	00000004 pnt_memory
81114860 g     F .text	000000dc strcmp
8111e6f8 g       *ABS*	00000000 __DTOR_LIST__
811003a0 g     F .text	00000038 comm_channel_f_handle_irq
8110b728 g     F .text	00000050 _reg_read
81100858 g     F .text	00000050 comm_channel_h_int_flag_buffer_empty
811186b0 g     F .text	00000088 .hidden __nedf2
8111a398 g     F .text	00000038 alt_irq_init
81119f48 g     F .text	00000064 alt_release_fd
8111d6f0 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8111fadb g     O .rodata	00000100 .hidden __clz_tab
81121d98 g     O .bss	00000004 _PathLocale
8111e364 g     F .text	00000014 atexit
811160dc g     F .text	00000060 _write_r
81112050 g     F .text	00000018 setlocale
8111cb44 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
81121cd0 g     O .rwdata	00000004 _impure_ptr
81100ef0 g     F .text	000000ec comm_update_link_error
81121cbc g     O .rwdata	00000004 ul_spwc_e_spacewire_link_control_status_register_value
81121db8 g     O .bss	00000004 alt_argc
81110ed8 g     F .text	0000021c __sflush_r
81121df8 g     O .bss	00000400 szData
8111d9d4 g     F .text	00000060 _do_dtors
8111203c g     F .text	00000008 __locale_cjk_lang
811087f4 g     F .text	000006a4 sense_log
81114488 g     F .text	000001d4 __srefill_r
81100020 g       .exceptions	00000000 alt_irq_entry
811138c8 g     F .text	00000064 __ulp
81111508 g     F .text	00000018 __fp_unlock_all
81121ce4 g     O .rwdata	00000008 alt_fs_list
81121d90 g     O .bss	00000004 ul_tran_h_interface_control_status_register_value
81121d74 g     O .bss	00000004 ul_tran_a_interface_control_status_register_value
811042e4 g     F .text	00000328 b_SpaceWire_Interface_Mode_Control
81105c14 g     F .text	00000054 b_Transparent_Interface_RX_FIFO_Status_Empty
81100cb0 g     F .text	00000080 comm_update_windowing
81121d40 g     O .bss	00000004 dma_m2_dev
81105b78 g     F .text	00000044 v_Transparent_Interface_RX_FIFO_Reset
81100b90 g     F .text	00000080 comm_update_int_flags
811003d8 g     F .text	00000038 comm_channel_g_handle_irq
81112068 g     F .text	0000000c localeconv
81100a20 g     F .text	000000cc comm_config_int_control
8111dac4 g     F .text	00000050 alt_ic_isr_register
81121d84 g     O .bss	00000004 ul_tran_e_interface_control_status_register_value
81121cb0 g     O .rwdata	00000004 ul_spwc_b_spacewire_link_control_status_register_value
81121d14 g       *ABS*	00000000 _edata
81107720 g     F .text	000002d0 DDR2_MEMORY_RANDOM_READ_TEST
8111b014 g     F .text	00000060 altera_avalon_uart_read_fd
81122598 g       *ABS*	00000000 _end
81101d90 g     F .text	00000414 fee_dma_m2_transfer
81105e50 g     F .text	00000050 uc_Transparent_Interface_TX_FIFO_Status_Used
81116358 g     F .text	00000164 __fputwc
8111a9f0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
811040f0 g     F .text	000001f4 b_SpaceWire_Interface_Enable_Control
81100448 g     F .text	0000003c comm_channel_a_int_flag_clear_buffer_empty
811083fc g     F .text	0000008c Pattern_Generator_Configure_Initial_State
8111db9c g     F .text	0000008c alt_ic_irq_disable
811002f8 g     F .text	00000038 comm_channel_c_handle_irq
81114780 g     F .text	0000007c __swrite
81108170 g     F .text	0000002c v_Eth_Hold_Reset
81121cdc g     O .rwdata	00000004 __malloc_trim_threshold
811004c0 g     F .text	0000003c comm_channel_c_int_flag_clear_buffer_empty
81112030 g     F .text	0000000c __locale_msgcharset
8111e378 g     F .text	00000038 exit
81111ed4 g     F .text	000000c4 _fwalk_reent
8111cf1c g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8110c248 g     F .text	000000f0 .hidden __floatunsisf
811136cc g     F .text	000001fc __mdiff
811173ec g     F .text	00000074 .hidden __modsi3
8110b348 g     F .text	00000390 TestDMA_M2_M1
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
811114e4 g     F .text	00000004 __sfp_lock_release
8111c6bc g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
81104dcc g     F .text	00000054 b_SpaceWire_Interface_TimeCode_Arrived
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
81105128 g     F .text	000000bc b_SpaceWire_Interface_Send_SpaceWire_Data
8111c59c g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
8111b498 g     F .text	00000054 altera_avalon_uart_close
811054f8 g     F .text	0000006c b_Transparent_Interface_Write_Register
8111e6c4 g     F .text	00000034 _exit
8111d768 g     F .text	0000012c alt_alarm_start
81112074 g     F .text	000001bc __smakebuf_r
81106038 g     F .text	00000148 b_Transparent_Interface_Send_SpaceWire_Data
81121d0c g     O .rwdata	00000008 alt_msgdma_list
8110d194 g     F .text	00000098 strlen
81103af4 g     F .text	000000ac uc_spi_get_byte
81105cbc g     F .text	00000050 uc_Transparent_Interface_RX_FIFO_Status_Used
8111dfa4 g     F .text	00000154 open
81118738 g     F .text	000000dc .hidden __gedf2
81121d68 g     O .bss	00000004 ul_spwc_f_interface_control_status_register_value
81119dd4 g     F .text	0000003c alt_putchar
81121ce0 g     O .rwdata	00000004 __wctomb
81114a38 g     F .text	00000018 __sprint_r
81104e90 g     F .text	00000060 uc_SpaceWire_Interface_Get_TX_Div
81121cc4 g     O .rwdata	00000004 ul_spwc_g_spacewire_link_control_status_register_value
81104024 g     F .text	0000006c b_SpaceWire_Interface_Write_Register
81121cfc g     O .rwdata	00000004 alt_priority_mask
8112239c g     O .bss	00000054 spw_h
81103a38 g     F .text	000000bc v_spi_send_byte
8111db14 g     F .text	00000088 alt_ic_irq_enable
8110f424 g     F .text	0000001c __vfprintf_internal
81101154 g     F .text	00000064 comm_clear_timecode_rx_received
811081cc g     F .text	00000050 PGEN_WRITE_REG32
8111b528 g     F .text	000001dc altera_avalon_uart_read
8111685c g     F .text	0000005c _wctomb_r
81105a04 g     F .text	00000174 v_Transparent_Interface_Interrupts_Flags_Clear
811223f0 g     O .bss	00000054 spw_a
811032c4 g     F .text	0000003c msgdma_extended_descriptor_async_transfer
81118908 g     F .text	000008fc .hidden __subdf3
8110afb8 g     F .text	00000390 TestDMA_M1_M2
81113100 g     F .text	000000b0 __lo0bits
81121d04 g     O .rwdata	00000008 alt_alarm_list
8111d974 g     F .text	00000060 _do_ctors
81122444 g     O .bss	00000054 spw_c
81107b08 g     F .text	00000044 DMA_BUSY
8111676c g     F .text	000000c0 wcrtomb
8111956c g     F .text	000000d0 close
811057b8 g     F .text	000001f4 v_Transparent_Interface_Interrupts_Enable_Control
811050a0 g     F .text	00000088 b_SpaceWire_Interface_Write_TX_Data
811079f0 g     F .text	00000078 xorshift32
811164e0 g     F .text	00000080 fputwc
811114e8 g     F .text	00000004 __sinit_lock_acquire
81112e74 g     F .text	00000120 __multadd
81101708 g     F .text	000000b8 set_pre_emphasys
81112e4c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a044b4 	movhi	r2,33042
81100140:	10892604 	addi	r2,r2,9368
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a044b4 	movhi	r2,33042
81100158:	10892604 	addi	r2,r2,9368
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	0001883a 	nop
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a04a17 	ldw	r2,-32472(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a04a17 	ldw	r2,-32472(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100244:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110024c:	06a044b4 	movhi	gp,33042
    ori gp, gp, %lo(_gp)
81100250:	d6a72914 	ori	gp,gp,40100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
81100254:	00a044b4 	movhi	r2,33042
    ori r2, r2, %lo(__bss_start)
81100258:	10874514 	ori	r2,r2,7444

    movhi r3, %hi(__bss_end)
8110025c:	00e044b4 	movhi	r3,33042
    ori r3, r3, %lo(__bss_end)
81100260:	18c96614 	ori	r3,r3,9624

    beq r2, r3, 1f
81100264:	10c00326 	beq	r2,r3,81100274 <_start+0x30>

0:
    stw zero, (r2)
81100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100270:	10fffd36 	bltu	r2,r3,81100268 <__reset+0xfb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100274:	1119ae40 	call	81119ae4 <alt_main>

81100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100278:	003fff06 	br	81100278 <__reset+0xfb0e0278>

8110027c <comm_channel_a_handle_irq>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]

void comm_channel_a_handle_irq(void* context) {
8110027c:	defffc04 	addi	sp,sp,-16
81100280:	dfc00315 	stw	ra,12(sp)
81100284:	df000215 	stw	fp,8(sp)
81100288:	df000204 	addi	fp,sp,8
8110028c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
81100290:	e0bfff17 	ldw	r2,-4(fp)
81100294:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	int_cnt++;
81100298:	d0a01c03 	ldbu	r2,-32656(gp)
8110029c:	10800044 	addi	r2,r2,1
811002a0:	d0a01c05 	stb	r2,-32656(gp)
	comm_channel_a_int_flag_clear_buffer_empty();
811002a4:	11004480 	call	81100448 <comm_channel_a_int_flag_clear_buffer_empty>
}
811002a8:	0001883a 	nop
811002ac:	e037883a 	mov	sp,fp
811002b0:	dfc00117 	ldw	ra,4(sp)
811002b4:	df000017 	ldw	fp,0(sp)
811002b8:	dec00204 	addi	sp,sp,8
811002bc:	f800283a 	ret

811002c0 <comm_channel_b_handle_irq>:

void comm_channel_b_handle_irq(void* context) {
811002c0:	defffc04 	addi	sp,sp,-16
811002c4:	dfc00315 	stw	ra,12(sp)
811002c8:	df000215 	stw	fp,8(sp)
811002cc:	df000204 	addi	fp,sp,8
811002d0:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
811002d4:	e0bfff17 	ldw	r2,-4(fp)
811002d8:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	comm_channel_b_int_flag_clear_buffer_empty();
811002dc:	11004840 	call	81100484 <comm_channel_b_int_flag_clear_buffer_empty>
}
811002e0:	0001883a 	nop
811002e4:	e037883a 	mov	sp,fp
811002e8:	dfc00117 	ldw	ra,4(sp)
811002ec:	df000017 	ldw	fp,0(sp)
811002f0:	dec00204 	addi	sp,sp,8
811002f4:	f800283a 	ret

811002f8 <comm_channel_c_handle_irq>:

void comm_channel_c_handle_irq(void* context) {
811002f8:	defffc04 	addi	sp,sp,-16
811002fc:	dfc00315 	stw	ra,12(sp)
81100300:	df000215 	stw	fp,8(sp)
81100304:	df000204 	addi	fp,sp,8
81100308:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
8110030c:	e0bfff17 	ldw	r2,-4(fp)
81100310:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	comm_channel_c_int_flag_clear_buffer_empty();
81100314:	11004c00 	call	811004c0 <comm_channel_c_int_flag_clear_buffer_empty>
}
81100318:	0001883a 	nop
8110031c:	e037883a 	mov	sp,fp
81100320:	dfc00117 	ldw	ra,4(sp)
81100324:	df000017 	ldw	fp,0(sp)
81100328:	dec00204 	addi	sp,sp,8
8110032c:	f800283a 	ret

81100330 <comm_channel_d_handle_irq>:

void comm_channel_d_handle_irq(void* context) {
81100330:	defffc04 	addi	sp,sp,-16
81100334:	dfc00315 	stw	ra,12(sp)
81100338:	df000215 	stw	fp,8(sp)
8110033c:	df000204 	addi	fp,sp,8
81100340:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
81100344:	e0bfff17 	ldw	r2,-4(fp)
81100348:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	comm_channel_d_int_flag_clear_buffer_empty();
8110034c:	11004fc0 	call	811004fc <comm_channel_d_int_flag_clear_buffer_empty>
}
81100350:	0001883a 	nop
81100354:	e037883a 	mov	sp,fp
81100358:	dfc00117 	ldw	ra,4(sp)
8110035c:	df000017 	ldw	fp,0(sp)
81100360:	dec00204 	addi	sp,sp,8
81100364:	f800283a 	ret

81100368 <comm_channel_e_handle_irq>:

void comm_channel_e_handle_irq(void* context) {
81100368:	defffc04 	addi	sp,sp,-16
8110036c:	dfc00315 	stw	ra,12(sp)
81100370:	df000215 	stw	fp,8(sp)
81100374:	df000204 	addi	fp,sp,8
81100378:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
8110037c:	e0bfff17 	ldw	r2,-4(fp)
81100380:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	comm_channel_e_int_flag_clear_buffer_empty();
81100384:	11005380 	call	81100538 <comm_channel_e_int_flag_clear_buffer_empty>
}
81100388:	0001883a 	nop
8110038c:	e037883a 	mov	sp,fp
81100390:	dfc00117 	ldw	ra,4(sp)
81100394:	df000017 	ldw	fp,0(sp)
81100398:	dec00204 	addi	sp,sp,8
8110039c:	f800283a 	ret

811003a0 <comm_channel_f_handle_irq>:

void comm_channel_f_handle_irq(void* context) {
811003a0:	defffc04 	addi	sp,sp,-16
811003a4:	dfc00315 	stw	ra,12(sp)
811003a8:	df000215 	stw	fp,8(sp)
811003ac:	df000204 	addi	fp,sp,8
811003b0:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
811003b4:	e0bfff17 	ldw	r2,-4(fp)
811003b8:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	comm_channel_f_int_flag_clear_buffer_empty();
811003bc:	11005740 	call	81100574 <comm_channel_f_int_flag_clear_buffer_empty>
}
811003c0:	0001883a 	nop
811003c4:	e037883a 	mov	sp,fp
811003c8:	dfc00117 	ldw	ra,4(sp)
811003cc:	df000017 	ldw	fp,0(sp)
811003d0:	dec00204 	addi	sp,sp,8
811003d4:	f800283a 	ret

811003d8 <comm_channel_g_handle_irq>:

void comm_channel_g_handle_irq(void* context) {
811003d8:	defffc04 	addi	sp,sp,-16
811003dc:	dfc00315 	stw	ra,12(sp)
811003e0:	df000215 	stw	fp,8(sp)
811003e4:	df000204 	addi	fp,sp,8
811003e8:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
811003ec:	e0bfff17 	ldw	r2,-4(fp)
811003f0:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	comm_channel_g_int_flag_clear_buffer_empty();
811003f4:	11005b00 	call	811005b0 <comm_channel_g_int_flag_clear_buffer_empty>
}
811003f8:	0001883a 	nop
811003fc:	e037883a 	mov	sp,fp
81100400:	dfc00117 	ldw	ra,4(sp)
81100404:	df000017 	ldw	fp,0(sp)
81100408:	dec00204 	addi	sp,sp,8
8110040c:	f800283a 	ret

81100410 <comm_channel_h_handle_irq>:

void comm_channel_h_handle_irq(void* context) {
81100410:	defffc04 	addi	sp,sp,-16
81100414:	dfc00315 	stw	ra,12(sp)
81100418:	df000215 	stw	fp,8(sp)
8110041c:	df000204 	addi	fp,sp,8
81100420:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
81100424:	e0bfff17 	ldw	r2,-4(fp)
81100428:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	comm_channel_h_int_flag_clear_buffer_empty();
8110042c:	11005ec0 	call	811005ec <comm_channel_h_int_flag_clear_buffer_empty>
}
81100430:	0001883a 	nop
81100434:	e037883a 	mov	sp,fp
81100438:	dfc00117 	ldw	ra,4(sp)
8110043c:	df000017 	ldw	fp,0(sp)
81100440:	dec00204 	addi	sp,sp,8
81100444:	f800283a 	ret

81100448 <comm_channel_a_int_flag_clear_buffer_empty>:

void comm_channel_a_int_flag_clear_buffer_empty(void) {
81100448:	defffe04 	addi	sp,sp,-8
8110044c:	dfc00115 	stw	ra,4(sp)
81100450:	df000015 	stw	fp,0(sp)
81100454:	d839883a 	mov	fp,sp
	write_reg((alt_u32*) COMM_CHANNEL_A_BASE_ADDR,
81100458:	01800044 	movi	r6,1
8110045c:	01400144 	movi	r5,5
81100460:	01204834 	movhi	r4,33056
81100464:	210b0004 	addi	r4,r4,11264
81100468:	11015a40 	call	811015a4 <write_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET, (alt_u32) COMM_INT_BUFFER_EMPTY_FLAG_MASK);
}
8110046c:	0001883a 	nop
81100470:	e037883a 	mov	sp,fp
81100474:	dfc00117 	ldw	ra,4(sp)
81100478:	df000017 	ldw	fp,0(sp)
8110047c:	dec00204 	addi	sp,sp,8
81100480:	f800283a 	ret

81100484 <comm_channel_b_int_flag_clear_buffer_empty>:

void comm_channel_b_int_flag_clear_buffer_empty(void) {
81100484:	defffe04 	addi	sp,sp,-8
81100488:	dfc00115 	stw	ra,4(sp)
8110048c:	df000015 	stw	fp,0(sp)
81100490:	d839883a 	mov	fp,sp
	write_reg((alt_u32*) COMM_CHANNEL_B_BASE_ADDR,
81100494:	01800044 	movi	r6,1
81100498:	01400144 	movi	r5,5
8110049c:	01204834 	movhi	r4,33056
811004a0:	210a0004 	addi	r4,r4,10240
811004a4:	11015a40 	call	811015a4 <write_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET, (alt_u32) COMM_INT_BUFFER_EMPTY_FLAG_MASK);
}
811004a8:	0001883a 	nop
811004ac:	e037883a 	mov	sp,fp
811004b0:	dfc00117 	ldw	ra,4(sp)
811004b4:	df000017 	ldw	fp,0(sp)
811004b8:	dec00204 	addi	sp,sp,8
811004bc:	f800283a 	ret

811004c0 <comm_channel_c_int_flag_clear_buffer_empty>:

void comm_channel_c_int_flag_clear_buffer_empty(void) {
811004c0:	defffe04 	addi	sp,sp,-8
811004c4:	dfc00115 	stw	ra,4(sp)
811004c8:	df000015 	stw	fp,0(sp)
811004cc:	d839883a 	mov	fp,sp
	write_reg((alt_u32*) COMM_CHANNEL_C_BASE_ADDR,
811004d0:	01800044 	movi	r6,1
811004d4:	01400144 	movi	r5,5
811004d8:	01204834 	movhi	r4,33056
811004dc:	21090004 	addi	r4,r4,9216
811004e0:	11015a40 	call	811015a4 <write_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET, (alt_u32) COMM_INT_BUFFER_EMPTY_FLAG_MASK);
}
811004e4:	0001883a 	nop
811004e8:	e037883a 	mov	sp,fp
811004ec:	dfc00117 	ldw	ra,4(sp)
811004f0:	df000017 	ldw	fp,0(sp)
811004f4:	dec00204 	addi	sp,sp,8
811004f8:	f800283a 	ret

811004fc <comm_channel_d_int_flag_clear_buffer_empty>:

void comm_channel_d_int_flag_clear_buffer_empty(void) {
811004fc:	defffe04 	addi	sp,sp,-8
81100500:	dfc00115 	stw	ra,4(sp)
81100504:	df000015 	stw	fp,0(sp)
81100508:	d839883a 	mov	fp,sp
	write_reg((alt_u32*) COMM_CHANNEL_D_BASE_ADDR,
8110050c:	01800044 	movi	r6,1
81100510:	01400144 	movi	r5,5
81100514:	01204834 	movhi	r4,33056
81100518:	21080004 	addi	r4,r4,8192
8110051c:	11015a40 	call	811015a4 <write_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET, (alt_u32) COMM_INT_BUFFER_EMPTY_FLAG_MASK);
}
81100520:	0001883a 	nop
81100524:	e037883a 	mov	sp,fp
81100528:	dfc00117 	ldw	ra,4(sp)
8110052c:	df000017 	ldw	fp,0(sp)
81100530:	dec00204 	addi	sp,sp,8
81100534:	f800283a 	ret

81100538 <comm_channel_e_int_flag_clear_buffer_empty>:

void comm_channel_e_int_flag_clear_buffer_empty(void) {
81100538:	defffe04 	addi	sp,sp,-8
8110053c:	dfc00115 	stw	ra,4(sp)
81100540:	df000015 	stw	fp,0(sp)
81100544:	d839883a 	mov	fp,sp
	write_reg((alt_u32*) COMM_CHANNEL_E_BASE_ADDR,
81100548:	01800044 	movi	r6,1
8110054c:	01400144 	movi	r5,5
81100550:	01204834 	movhi	r4,33056
81100554:	21070004 	addi	r4,r4,7168
81100558:	11015a40 	call	811015a4 <write_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET, (alt_u32) COMM_INT_BUFFER_EMPTY_FLAG_MASK);
}
8110055c:	0001883a 	nop
81100560:	e037883a 	mov	sp,fp
81100564:	dfc00117 	ldw	ra,4(sp)
81100568:	df000017 	ldw	fp,0(sp)
8110056c:	dec00204 	addi	sp,sp,8
81100570:	f800283a 	ret

81100574 <comm_channel_f_int_flag_clear_buffer_empty>:

void comm_channel_f_int_flag_clear_buffer_empty(void) {
81100574:	defffe04 	addi	sp,sp,-8
81100578:	dfc00115 	stw	ra,4(sp)
8110057c:	df000015 	stw	fp,0(sp)
81100580:	d839883a 	mov	fp,sp
	write_reg((alt_u32*) COMM_CHANNEL_F_BASE_ADDR,
81100584:	01800044 	movi	r6,1
81100588:	01400144 	movi	r5,5
8110058c:	01204834 	movhi	r4,33056
81100590:	21060004 	addi	r4,r4,6144
81100594:	11015a40 	call	811015a4 <write_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET, (alt_u32) COMM_INT_BUFFER_EMPTY_FLAG_MASK);
}
81100598:	0001883a 	nop
8110059c:	e037883a 	mov	sp,fp
811005a0:	dfc00117 	ldw	ra,4(sp)
811005a4:	df000017 	ldw	fp,0(sp)
811005a8:	dec00204 	addi	sp,sp,8
811005ac:	f800283a 	ret

811005b0 <comm_channel_g_int_flag_clear_buffer_empty>:

void comm_channel_g_int_flag_clear_buffer_empty(void) {
811005b0:	defffe04 	addi	sp,sp,-8
811005b4:	dfc00115 	stw	ra,4(sp)
811005b8:	df000015 	stw	fp,0(sp)
811005bc:	d839883a 	mov	fp,sp
	write_reg((alt_u32*) COMM_CHANNEL_G_BASE_ADDR,
811005c0:	01800044 	movi	r6,1
811005c4:	01400144 	movi	r5,5
811005c8:	01204834 	movhi	r4,33056
811005cc:	21050004 	addi	r4,r4,5120
811005d0:	11015a40 	call	811015a4 <write_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET, (alt_u32) COMM_INT_BUFFER_EMPTY_FLAG_MASK);
}
811005d4:	0001883a 	nop
811005d8:	e037883a 	mov	sp,fp
811005dc:	dfc00117 	ldw	ra,4(sp)
811005e0:	df000017 	ldw	fp,0(sp)
811005e4:	dec00204 	addi	sp,sp,8
811005e8:	f800283a 	ret

811005ec <comm_channel_h_int_flag_clear_buffer_empty>:

void comm_channel_h_int_flag_clear_buffer_empty(void) {
811005ec:	defffe04 	addi	sp,sp,-8
811005f0:	dfc00115 	stw	ra,4(sp)
811005f4:	df000015 	stw	fp,0(sp)
811005f8:	d839883a 	mov	fp,sp
	write_reg((alt_u32*) COMM_CHANNEL_H_BASE_ADDR,
811005fc:	01800044 	movi	r6,1
81100600:	01400144 	movi	r5,5
81100604:	01204834 	movhi	r4,33056
81100608:	21040004 	addi	r4,r4,4096
8110060c:	11015a40 	call	811015a4 <write_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET, (alt_u32) COMM_INT_BUFFER_EMPTY_FLAG_MASK);
}
81100610:	0001883a 	nop
81100614:	e037883a 	mov	sp,fp
81100618:	dfc00117 	ldw	ra,4(sp)
8110061c:	df000017 	ldw	fp,0(sp)
81100620:	dec00204 	addi	sp,sp,8
81100624:	f800283a 	ret

81100628 <comm_channel_a_int_flag_buffer_empty>:

bool comm_channel_a_int_flag_buffer_empty(void) {
81100628:	defffd04 	addi	sp,sp,-12
8110062c:	dfc00215 	stw	ra,8(sp)
81100630:	df000115 	stw	fp,4(sp)
81100634:	df000104 	addi	fp,sp,4
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_A_BASE_ADDR,
81100638:	01400144 	movi	r5,5
8110063c:	01204834 	movhi	r4,33056
81100640:	210b0004 	addi	r4,r4,11264
81100644:	11015f00 	call	811015f0 <read_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
81100648:	1080004c 	andi	r2,r2,1
}

bool comm_channel_a_int_flag_buffer_empty(void) {
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_A_BASE_ADDR,
8110064c:	10000326 	beq	r2,zero,8110065c <comm_channel_a_int_flag_buffer_empty+0x34>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
		flag = TRUE;
81100650:	00800044 	movi	r2,1
81100654:	e0bfff15 	stw	r2,-4(fp)
81100658:	00000106 	br	81100660 <comm_channel_a_int_flag_buffer_empty+0x38>
	} else {
		flag = FALSE;
8110065c:	e03fff15 	stw	zero,-4(fp)
	}

	return flag;
81100660:	e0bfff17 	ldw	r2,-4(fp)
}
81100664:	e037883a 	mov	sp,fp
81100668:	dfc00117 	ldw	ra,4(sp)
8110066c:	df000017 	ldw	fp,0(sp)
81100670:	dec00204 	addi	sp,sp,8
81100674:	f800283a 	ret

81100678 <comm_channel_b_int_flag_buffer_empty>:

bool comm_channel_b_int_flag_buffer_empty(void) {
81100678:	defffd04 	addi	sp,sp,-12
8110067c:	dfc00215 	stw	ra,8(sp)
81100680:	df000115 	stw	fp,4(sp)
81100684:	df000104 	addi	fp,sp,4
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_B_BASE_ADDR,
81100688:	01400144 	movi	r5,5
8110068c:	01204834 	movhi	r4,33056
81100690:	210a0004 	addi	r4,r4,10240
81100694:	11015f00 	call	811015f0 <read_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
81100698:	1080004c 	andi	r2,r2,1
}

bool comm_channel_b_int_flag_buffer_empty(void) {
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_B_BASE_ADDR,
8110069c:	10000326 	beq	r2,zero,811006ac <comm_channel_b_int_flag_buffer_empty+0x34>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
		flag = TRUE;
811006a0:	00800044 	movi	r2,1
811006a4:	e0bfff15 	stw	r2,-4(fp)
811006a8:	00000106 	br	811006b0 <comm_channel_b_int_flag_buffer_empty+0x38>
	} else {
		flag = FALSE;
811006ac:	e03fff15 	stw	zero,-4(fp)
	}

	return flag;
811006b0:	e0bfff17 	ldw	r2,-4(fp)
}
811006b4:	e037883a 	mov	sp,fp
811006b8:	dfc00117 	ldw	ra,4(sp)
811006bc:	df000017 	ldw	fp,0(sp)
811006c0:	dec00204 	addi	sp,sp,8
811006c4:	f800283a 	ret

811006c8 <comm_channel_c_int_flag_buffer_empty>:

bool comm_channel_c_int_flag_buffer_empty(void) {
811006c8:	defffd04 	addi	sp,sp,-12
811006cc:	dfc00215 	stw	ra,8(sp)
811006d0:	df000115 	stw	fp,4(sp)
811006d4:	df000104 	addi	fp,sp,4
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_C_BASE_ADDR,
811006d8:	01400144 	movi	r5,5
811006dc:	01204834 	movhi	r4,33056
811006e0:	21090004 	addi	r4,r4,9216
811006e4:	11015f00 	call	811015f0 <read_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
811006e8:	1080004c 	andi	r2,r2,1
}

bool comm_channel_c_int_flag_buffer_empty(void) {
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_C_BASE_ADDR,
811006ec:	10000326 	beq	r2,zero,811006fc <comm_channel_c_int_flag_buffer_empty+0x34>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
		flag = TRUE;
811006f0:	00800044 	movi	r2,1
811006f4:	e0bfff15 	stw	r2,-4(fp)
811006f8:	00000106 	br	81100700 <comm_channel_c_int_flag_buffer_empty+0x38>
	} else {
		flag = FALSE;
811006fc:	e03fff15 	stw	zero,-4(fp)
	}

	return flag;
81100700:	e0bfff17 	ldw	r2,-4(fp)
}
81100704:	e037883a 	mov	sp,fp
81100708:	dfc00117 	ldw	ra,4(sp)
8110070c:	df000017 	ldw	fp,0(sp)
81100710:	dec00204 	addi	sp,sp,8
81100714:	f800283a 	ret

81100718 <comm_channel_d_int_flag_buffer_empty>:

bool comm_channel_d_int_flag_buffer_empty(void) {
81100718:	defffd04 	addi	sp,sp,-12
8110071c:	dfc00215 	stw	ra,8(sp)
81100720:	df000115 	stw	fp,4(sp)
81100724:	df000104 	addi	fp,sp,4
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_D_BASE_ADDR,
81100728:	01400144 	movi	r5,5
8110072c:	01204834 	movhi	r4,33056
81100730:	21080004 	addi	r4,r4,8192
81100734:	11015f00 	call	811015f0 <read_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
81100738:	1080004c 	andi	r2,r2,1
}

bool comm_channel_d_int_flag_buffer_empty(void) {
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_D_BASE_ADDR,
8110073c:	10000326 	beq	r2,zero,8110074c <comm_channel_d_int_flag_buffer_empty+0x34>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
		flag = TRUE;
81100740:	00800044 	movi	r2,1
81100744:	e0bfff15 	stw	r2,-4(fp)
81100748:	00000106 	br	81100750 <comm_channel_d_int_flag_buffer_empty+0x38>
	} else {
		flag = FALSE;
8110074c:	e03fff15 	stw	zero,-4(fp)
	}

	return flag;
81100750:	e0bfff17 	ldw	r2,-4(fp)
}
81100754:	e037883a 	mov	sp,fp
81100758:	dfc00117 	ldw	ra,4(sp)
8110075c:	df000017 	ldw	fp,0(sp)
81100760:	dec00204 	addi	sp,sp,8
81100764:	f800283a 	ret

81100768 <comm_channel_e_int_flag_buffer_empty>:

bool comm_channel_e_int_flag_buffer_empty(void) {
81100768:	defffd04 	addi	sp,sp,-12
8110076c:	dfc00215 	stw	ra,8(sp)
81100770:	df000115 	stw	fp,4(sp)
81100774:	df000104 	addi	fp,sp,4
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_E_BASE_ADDR,
81100778:	01400144 	movi	r5,5
8110077c:	01204834 	movhi	r4,33056
81100780:	21070004 	addi	r4,r4,7168
81100784:	11015f00 	call	811015f0 <read_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
81100788:	1080004c 	andi	r2,r2,1
}

bool comm_channel_e_int_flag_buffer_empty(void) {
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_E_BASE_ADDR,
8110078c:	10000326 	beq	r2,zero,8110079c <comm_channel_e_int_flag_buffer_empty+0x34>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
		flag = TRUE;
81100790:	00800044 	movi	r2,1
81100794:	e0bfff15 	stw	r2,-4(fp)
81100798:	00000106 	br	811007a0 <comm_channel_e_int_flag_buffer_empty+0x38>
	} else {
		flag = FALSE;
8110079c:	e03fff15 	stw	zero,-4(fp)
	}

	return flag;
811007a0:	e0bfff17 	ldw	r2,-4(fp)
}
811007a4:	e037883a 	mov	sp,fp
811007a8:	dfc00117 	ldw	ra,4(sp)
811007ac:	df000017 	ldw	fp,0(sp)
811007b0:	dec00204 	addi	sp,sp,8
811007b4:	f800283a 	ret

811007b8 <comm_channel_f_int_flag_buffer_empty>:

bool comm_channel_f_int_flag_buffer_empty(void) {
811007b8:	defffd04 	addi	sp,sp,-12
811007bc:	dfc00215 	stw	ra,8(sp)
811007c0:	df000115 	stw	fp,4(sp)
811007c4:	df000104 	addi	fp,sp,4
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_F_BASE_ADDR,
811007c8:	01400144 	movi	r5,5
811007cc:	01204834 	movhi	r4,33056
811007d0:	21060004 	addi	r4,r4,6144
811007d4:	11015f00 	call	811015f0 <read_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
811007d8:	1080004c 	andi	r2,r2,1
}

bool comm_channel_f_int_flag_buffer_empty(void) {
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_F_BASE_ADDR,
811007dc:	10000326 	beq	r2,zero,811007ec <comm_channel_f_int_flag_buffer_empty+0x34>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
		flag = TRUE;
811007e0:	00800044 	movi	r2,1
811007e4:	e0bfff15 	stw	r2,-4(fp)
811007e8:	00000106 	br	811007f0 <comm_channel_f_int_flag_buffer_empty+0x38>
	} else {
		flag = FALSE;
811007ec:	e03fff15 	stw	zero,-4(fp)
	}

	return flag;
811007f0:	e0bfff17 	ldw	r2,-4(fp)
}
811007f4:	e037883a 	mov	sp,fp
811007f8:	dfc00117 	ldw	ra,4(sp)
811007fc:	df000017 	ldw	fp,0(sp)
81100800:	dec00204 	addi	sp,sp,8
81100804:	f800283a 	ret

81100808 <comm_channel_g_int_flag_buffer_empty>:

bool comm_channel_g_int_flag_buffer_empty(void) {
81100808:	defffd04 	addi	sp,sp,-12
8110080c:	dfc00215 	stw	ra,8(sp)
81100810:	df000115 	stw	fp,4(sp)
81100814:	df000104 	addi	fp,sp,4
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_G_BASE_ADDR,
81100818:	01400144 	movi	r5,5
8110081c:	01204834 	movhi	r4,33056
81100820:	21050004 	addi	r4,r4,5120
81100824:	11015f00 	call	811015f0 <read_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
81100828:	1080004c 	andi	r2,r2,1
}

bool comm_channel_g_int_flag_buffer_empty(void) {
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_G_BASE_ADDR,
8110082c:	10000326 	beq	r2,zero,8110083c <comm_channel_g_int_flag_buffer_empty+0x34>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
		flag = TRUE;
81100830:	00800044 	movi	r2,1
81100834:	e0bfff15 	stw	r2,-4(fp)
81100838:	00000106 	br	81100840 <comm_channel_g_int_flag_buffer_empty+0x38>
	} else {
		flag = FALSE;
8110083c:	e03fff15 	stw	zero,-4(fp)
	}

	return flag;
81100840:	e0bfff17 	ldw	r2,-4(fp)
}
81100844:	e037883a 	mov	sp,fp
81100848:	dfc00117 	ldw	ra,4(sp)
8110084c:	df000017 	ldw	fp,0(sp)
81100850:	dec00204 	addi	sp,sp,8
81100854:	f800283a 	ret

81100858 <comm_channel_h_int_flag_buffer_empty>:

bool comm_channel_h_int_flag_buffer_empty(void) {
81100858:	defffd04 	addi	sp,sp,-12
8110085c:	dfc00215 	stw	ra,8(sp)
81100860:	df000115 	stw	fp,4(sp)
81100864:	df000104 	addi	fp,sp,4
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_H_BASE_ADDR,
81100868:	01400144 	movi	r5,5
8110086c:	01204834 	movhi	r4,33056
81100870:	21040004 	addi	r4,r4,4096
81100874:	11015f00 	call	811015f0 <read_reg>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
81100878:	1080004c 	andi	r2,r2,1
}

bool comm_channel_h_int_flag_buffer_empty(void) {
	bool flag;

	if (read_reg((alt_u32*) COMM_CHANNEL_H_BASE_ADDR,
8110087c:	10000326 	beq	r2,zero,8110088c <comm_channel_h_int_flag_buffer_empty+0x34>
	COMM_INTERRUPT_FLAG_REG_OFFSET) & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
		flag = TRUE;
81100880:	00800044 	movi	r2,1
81100884:	e0bfff15 	stw	r2,-4(fp)
81100888:	00000106 	br	81100890 <comm_channel_h_int_flag_buffer_empty+0x38>
	} else {
		flag = FALSE;
8110088c:	e03fff15 	stw	zero,-4(fp)
	}

	return flag;
81100890:	e0bfff17 	ldw	r2,-4(fp)
}
81100894:	e037883a 	mov	sp,fp
81100898:	dfc00117 	ldw	ra,4(sp)
8110089c:	df000017 	ldw	fp,0(sp)
811008a0:	dec00204 	addi	sp,sp,8
811008a4:	f800283a 	ret

811008a8 <comm_init_interrupt>:

void comm_init_interrupt(alt_u8 spw_channel) {
811008a8:	defffc04 	addi	sp,sp,-16
811008ac:	dfc00315 	stw	ra,12(sp)
811008b0:	df000215 	stw	fp,8(sp)
811008b4:	df000204 	addi	fp,sp,8
811008b8:	2005883a 	mov	r2,r4
811008bc:	e0bfff05 	stb	r2,-4(fp)
	void* hold_context_ptr;
	switch (spw_channel) {
811008c0:	e0bfff03 	ldbu	r2,-4(fp)
811008c4:	10c00268 	cmpgeui	r3,r2,9
811008c8:	18004f1e 	bne	r3,zero,81100a08 <comm_init_interrupt+0x160>
811008cc:	100690ba 	slli	r3,r2,2
811008d0:	00a04434 	movhi	r2,33040
811008d4:	10823904 	addi	r2,r2,2276
811008d8:	1885883a 	add	r2,r3,r2
811008dc:	10800017 	ldw	r2,0(r2)
811008e0:	1000683a 	jmp	r2
811008e4:	81100a08 	cmpgei	r4,r16,16424
811008e8:	81100908 	cmpgei	r4,r16,16420
811008ec:	81100928 	cmpgeui	r4,r16,16420
811008f0:	81100948 	cmpgei	r4,r16,16421
811008f4:	81100968 	cmpgeui	r4,r16,16421
811008f8:	81100988 	cmpgei	r4,r16,16422
811008fc:	811009a8 	cmpgeui	r4,r16,16422
81100900:	811009c8 	cmpgei	r4,r16,16423
81100904:	811009e8 	cmpgeui	r4,r16,16423
	case spacewire_channel_a:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_a_hold_context;
81100908:	d0a01d04 	addi	r2,gp,-32652
8110090c:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, hold_context_ptr,
81100910:	01a04434 	movhi	r6,33040
81100914:	31809f04 	addi	r6,r6,636
81100918:	e17ffe17 	ldw	r5,-8(fp)
8110091c:	01000084 	movi	r4,2
81100920:	11197740 	call	81119774 <alt_irq_register>
				comm_channel_a_handle_irq);
		break;
81100924:	00003806 	br	81100a08 <comm_init_interrupt+0x160>
	case spacewire_channel_b:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_b_hold_context;
81100928:	d0a01e04 	addi	r2,gp,-32648
8110092c:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, hold_context_ptr,
81100930:	01a04434 	movhi	r6,33040
81100934:	3180b004 	addi	r6,r6,704
81100938:	e17ffe17 	ldw	r5,-8(fp)
8110093c:	010000c4 	movi	r4,3
81100940:	11197740 	call	81119774 <alt_irq_register>
				comm_channel_b_handle_irq);
		break;
81100944:	00003006 	br	81100a08 <comm_init_interrupt+0x160>
	case spacewire_channel_c:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_c_hold_context;
81100948:	d0a01f04 	addi	r2,gp,-32644
8110094c:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, hold_context_ptr,
81100950:	01a04434 	movhi	r6,33040
81100954:	3180be04 	addi	r6,r6,760
81100958:	e17ffe17 	ldw	r5,-8(fp)
8110095c:	01000104 	movi	r4,4
81100960:	11197740 	call	81119774 <alt_irq_register>
				comm_channel_c_handle_irq);
		break;
81100964:	00002806 	br	81100a08 <comm_init_interrupt+0x160>
	case spacewire_channel_d:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_d_hold_context;
81100968:	d0a02004 	addi	r2,gp,-32640
8110096c:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, hold_context_ptr,
81100970:	01a04434 	movhi	r6,33040
81100974:	3180cc04 	addi	r6,r6,816
81100978:	e17ffe17 	ldw	r5,-8(fp)
8110097c:	01000204 	movi	r4,8
81100980:	11197740 	call	81119774 <alt_irq_register>
				comm_channel_d_handle_irq);
		break;
81100984:	00002006 	br	81100a08 <comm_init_interrupt+0x160>
	case spacewire_channel_e:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_e_hold_context;
81100988:	d0a02104 	addi	r2,gp,-32636
8110098c:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, hold_context_ptr,
81100990:	01a04434 	movhi	r6,33040
81100994:	3180da04 	addi	r6,r6,872
81100998:	e17ffe17 	ldw	r5,-8(fp)
8110099c:	010001c4 	movi	r4,7
811009a0:	11197740 	call	81119774 <alt_irq_register>
				comm_channel_e_handle_irq);
		break;
811009a4:	00001806 	br	81100a08 <comm_init_interrupt+0x160>
	case spacewire_channel_f:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_f_hold_context;
811009a8:	d0a02204 	addi	r2,gp,-32632
811009ac:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, hold_context_ptr,
811009b0:	01a04434 	movhi	r6,33040
811009b4:	3180e804 	addi	r6,r6,928
811009b8:	e17ffe17 	ldw	r5,-8(fp)
811009bc:	01000184 	movi	r4,6
811009c0:	11197740 	call	81119774 <alt_irq_register>
				comm_channel_f_handle_irq);
		break;
811009c4:	00001006 	br	81100a08 <comm_init_interrupt+0x160>
	case spacewire_channel_g:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_g_hold_context;
811009c8:	d0a02304 	addi	r2,gp,-32628
811009cc:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, hold_context_ptr,
811009d0:	01a04434 	movhi	r6,33040
811009d4:	3180f604 	addi	r6,r6,984
811009d8:	e17ffe17 	ldw	r5,-8(fp)
811009dc:	01000144 	movi	r4,5
811009e0:	11197740 	call	81119774 <alt_irq_register>
				comm_channel_g_handle_irq);
		break;
811009e4:	00000806 	br	81100a08 <comm_init_interrupt+0x160>
	case spacewire_channel_h:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_h_hold_context;
811009e8:	d0a02404 	addi	r2,gp,-32624
811009ec:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, hold_context_ptr,
811009f0:	01a04434 	movhi	r6,33040
811009f4:	31810404 	addi	r6,r6,1040
811009f8:	e17ffe17 	ldw	r5,-8(fp)
811009fc:	01000244 	movi	r4,9
81100a00:	11197740 	call	81119774 <alt_irq_register>
				comm_channel_h_handle_irq);
		break;
81100a04:	0001883a 	nop
	}
}
81100a08:	0001883a 	nop
81100a0c:	e037883a 	mov	sp,fp
81100a10:	dfc00117 	ldw	ra,4(sp)
81100a14:	df000017 	ldw	fp,0(sp)
81100a18:	dec00204 	addi	sp,sp,8
81100a1c:	f800283a 	ret

81100a20 <comm_config_int_control>:

bool comm_config_int_control(comm_channel_t *channel) {
81100a20:	defffb04 	addi	sp,sp,-20
81100a24:	dfc00415 	stw	ra,16(sp)
81100a28:	df000315 	stw	fp,12(sp)
81100a2c:	df000304 	addi	fp,sp,12
81100a30:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100a34:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100a38:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100a3c:	e0bfff17 	ldw	r2,-4(fp)
81100a40:	10002426 	beq	r2,zero,81100ad4 <comm_config_int_control+0xb4>
		reg = read_reg(channel->channel_address,
81100a44:	e0bfff17 	ldw	r2,-4(fp)
81100a48:	10800017 	ldw	r2,0(r2)
81100a4c:	01400104 	movi	r5,4
81100a50:	1009883a 	mov	r4,r2
81100a54:	11015f00 	call	811015f0 <read_reg>
81100a58:	e0bffe15 	stw	r2,-8(fp)
		COMM_INTERRUPT_CONTROL_REG_OFFSET);

		if (channel->int_control.left_buffer_empty_en) {
81100a5c:	e0bfff17 	ldw	r2,-4(fp)
81100a60:	10801017 	ldw	r2,64(r2)
81100a64:	10000426 	beq	r2,zero,81100a78 <comm_config_int_control+0x58>
			reg |= COMM_INT_LEFT_BUFFER_EMPTY_EN_MASK;
81100a68:	e0bffe17 	ldw	r2,-8(fp)
81100a6c:	10804014 	ori	r2,r2,256
81100a70:	e0bffe15 	stw	r2,-8(fp)
81100a74:	00000406 	br	81100a88 <comm_config_int_control+0x68>
		} else {
			reg &= (~COMM_INT_LEFT_BUFFER_EMPTY_EN_MASK);
81100a78:	e0fffe17 	ldw	r3,-8(fp)
81100a7c:	00bfbfc4 	movi	r2,-257
81100a80:	1884703a 	and	r2,r3,r2
81100a84:	e0bffe15 	stw	r2,-8(fp)
		}
		if (channel->int_control.right_buffer_empty_en) {
81100a88:	e0bfff17 	ldw	r2,-4(fp)
81100a8c:	10801117 	ldw	r2,68(r2)
81100a90:	10000426 	beq	r2,zero,81100aa4 <comm_config_int_control+0x84>
			reg |= COMM_INT_RIGHT_BUFFER_EMPTY_EN_MASK;
81100a94:	e0bffe17 	ldw	r2,-8(fp)
81100a98:	10800054 	ori	r2,r2,1
81100a9c:	e0bffe15 	stw	r2,-8(fp)
81100aa0:	00000406 	br	81100ab4 <comm_config_int_control+0x94>
		} else {
			reg &= (~COMM_INT_RIGHT_BUFFER_EMPTY_EN_MASK);
81100aa4:	e0fffe17 	ldw	r3,-8(fp)
81100aa8:	00bfff84 	movi	r2,-2
81100aac:	1884703a 	and	r2,r3,r2
81100ab0:	e0bffe15 	stw	r2,-8(fp)
		}

		write_reg(channel->channel_address, COMM_INTERRUPT_CONTROL_REG_OFFSET,
81100ab4:	e0bfff17 	ldw	r2,-4(fp)
81100ab8:	10800017 	ldw	r2,0(r2)
81100abc:	e1bffe17 	ldw	r6,-8(fp)
81100ac0:	01400104 	movi	r5,4
81100ac4:	1009883a 	mov	r4,r2
81100ac8:	11015a40 	call	811015a4 <write_reg>
				reg);
		status = TRUE;
81100acc:	00800044 	movi	r2,1
81100ad0:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100ad4:	e0bffd17 	ldw	r2,-12(fp)
}
81100ad8:	e037883a 	mov	sp,fp
81100adc:	dfc00117 	ldw	ra,4(sp)
81100ae0:	df000017 	ldw	fp,0(sp)
81100ae4:	dec00204 	addi	sp,sp,8
81100ae8:	f800283a 	ret

81100aec <comm_update_int_control>:

bool comm_update_int_control(comm_channel_t *channel) {
81100aec:	defffb04 	addi	sp,sp,-20
81100af0:	dfc00415 	stw	ra,16(sp)
81100af4:	df000315 	stw	fp,12(sp)
81100af8:	df000304 	addi	fp,sp,12
81100afc:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100b00:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100b04:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100b08:	e0bfff17 	ldw	r2,-4(fp)
81100b0c:	10001a26 	beq	r2,zero,81100b78 <comm_update_int_control+0x8c>
		reg = read_reg(channel->channel_address,
81100b10:	e0bfff17 	ldw	r2,-4(fp)
81100b14:	10800017 	ldw	r2,0(r2)
81100b18:	01400104 	movi	r5,4
81100b1c:	1009883a 	mov	r4,r2
81100b20:	11015f00 	call	811015f0 <read_reg>
81100b24:	e0bffe15 	stw	r2,-8(fp)
		COMM_INTERRUPT_CONTROL_REG_OFFSET);

		if (reg & COMM_INT_LEFT_BUFFER_EMPTY_EN_MASK) {
81100b28:	e0bffe17 	ldw	r2,-8(fp)
81100b2c:	1080400c 	andi	r2,r2,256
81100b30:	10000426 	beq	r2,zero,81100b44 <comm_update_int_control+0x58>
			channel->int_control.left_buffer_empty_en = TRUE;
81100b34:	e0bfff17 	ldw	r2,-4(fp)
81100b38:	00c00044 	movi	r3,1
81100b3c:	10c01015 	stw	r3,64(r2)
81100b40:	00000206 	br	81100b4c <comm_update_int_control+0x60>
		} else {
			channel->int_control.left_buffer_empty_en = FALSE;
81100b44:	e0bfff17 	ldw	r2,-4(fp)
81100b48:	10001015 	stw	zero,64(r2)
		}
		if (reg & COMM_INT_RIGHT_BUFFER_EMPTY_EN_MASK) {
81100b4c:	e0bffe17 	ldw	r2,-8(fp)
81100b50:	1080004c 	andi	r2,r2,1
81100b54:	10000426 	beq	r2,zero,81100b68 <comm_update_int_control+0x7c>
			channel->int_control.right_buffer_empty_en = TRUE;
81100b58:	e0bfff17 	ldw	r2,-4(fp)
81100b5c:	00c00044 	movi	r3,1
81100b60:	10c01115 	stw	r3,68(r2)
81100b64:	00000206 	br	81100b70 <comm_update_int_control+0x84>
		} else {
			channel->int_control.right_buffer_empty_en = FALSE;
81100b68:	e0bfff17 	ldw	r2,-4(fp)
81100b6c:	10001115 	stw	zero,68(r2)
		}

		status = TRUE;
81100b70:	00800044 	movi	r2,1
81100b74:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100b78:	e0bffd17 	ldw	r2,-12(fp)
}
81100b7c:	e037883a 	mov	sp,fp
81100b80:	dfc00117 	ldw	ra,4(sp)
81100b84:	df000017 	ldw	fp,0(sp)
81100b88:	dec00204 	addi	sp,sp,8
81100b8c:	f800283a 	ret

81100b90 <comm_update_int_flags>:

bool comm_update_int_flags(comm_channel_t *channel) {
81100b90:	defffb04 	addi	sp,sp,-20
81100b94:	dfc00415 	stw	ra,16(sp)
81100b98:	df000315 	stw	fp,12(sp)
81100b9c:	df000304 	addi	fp,sp,12
81100ba0:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100ba4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100ba8:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100bac:	e0bfff17 	ldw	r2,-4(fp)
81100bb0:	10001126 	beq	r2,zero,81100bf8 <comm_update_int_flags+0x68>
		reg = read_reg(channel->channel_address,
81100bb4:	e0bfff17 	ldw	r2,-4(fp)
81100bb8:	10800017 	ldw	r2,0(r2)
81100bbc:	01400144 	movi	r5,5
81100bc0:	1009883a 	mov	r4,r2
81100bc4:	11015f00 	call	811015f0 <read_reg>
81100bc8:	e0bffe15 	stw	r2,-8(fp)
		COMM_INTERRUPT_FLAG_REG_OFFSET);

		if (reg & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
81100bcc:	e0bffe17 	ldw	r2,-8(fp)
81100bd0:	1080004c 	andi	r2,r2,1
81100bd4:	10000426 	beq	r2,zero,81100be8 <comm_update_int_flags+0x58>
			channel->int_flag.buffer_empty_flag = TRUE;
81100bd8:	e0bfff17 	ldw	r2,-4(fp)
81100bdc:	00c00044 	movi	r3,1
81100be0:	10c01215 	stw	r3,72(r2)
81100be4:	00000206 	br	81100bf0 <comm_update_int_flags+0x60>
		} else {
			channel->int_flag.buffer_empty_flag = FALSE;
81100be8:	e0bfff17 	ldw	r2,-4(fp)
81100bec:	10001215 	stw	zero,72(r2)
		}

		status = TRUE;
81100bf0:	00800044 	movi	r2,1
81100bf4:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100bf8:	e0bffd17 	ldw	r2,-12(fp)
}
81100bfc:	e037883a 	mov	sp,fp
81100c00:	dfc00117 	ldw	ra,4(sp)
81100c04:	df000017 	ldw	fp,0(sp)
81100c08:	dec00204 	addi	sp,sp,8
81100c0c:	f800283a 	ret

81100c10 <comm_config_windowing>:

bool comm_config_windowing(comm_channel_t *channel) {
81100c10:	defffb04 	addi	sp,sp,-20
81100c14:	dfc00415 	stw	ra,16(sp)
81100c18:	df000315 	stw	fp,12(sp)
81100c1c:	df000304 	addi	fp,sp,12
81100c20:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100c24:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100c28:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100c2c:	e0bfff17 	ldw	r2,-4(fp)
81100c30:	10001926 	beq	r2,zero,81100c98 <comm_config_windowing+0x88>
		reg = read_reg(channel->channel_address,
81100c34:	e0bfff17 	ldw	r2,-4(fp)
81100c38:	10800017 	ldw	r2,0(r2)
81100c3c:	000b883a 	mov	r5,zero
81100c40:	1009883a 	mov	r4,r2
81100c44:	11015f00 	call	811015f0 <read_reg>
81100c48:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_CONTROL_REG_OFFSET);

		if (channel->windowing_config.masking) {
81100c4c:	e0bfff17 	ldw	r2,-4(fp)
81100c50:	10800117 	ldw	r2,4(r2)
81100c54:	10000426 	beq	r2,zero,81100c68 <comm_config_windowing+0x58>
			reg |= COMM_CONTROL_MASKING_EN_MASK;
81100c58:	e0bffe17 	ldw	r2,-8(fp)
81100c5c:	10804014 	ori	r2,r2,256
81100c60:	e0bffe15 	stw	r2,-8(fp)
81100c64:	00000406 	br	81100c78 <comm_config_windowing+0x68>
		} else {
			reg &= (~COMM_CONTROL_MASKING_EN_MASK);
81100c68:	e0fffe17 	ldw	r3,-8(fp)
81100c6c:	00bfbfc4 	movi	r2,-257
81100c70:	1884703a 	and	r2,r3,r2
81100c74:	e0bffe15 	stw	r2,-8(fp)
		}

		write_reg(channel->channel_address, COMM_WINDOWING_CONTROL_REG_OFFSET,
81100c78:	e0bfff17 	ldw	r2,-4(fp)
81100c7c:	10800017 	ldw	r2,0(r2)
81100c80:	e1bffe17 	ldw	r6,-8(fp)
81100c84:	000b883a 	mov	r5,zero
81100c88:	1009883a 	mov	r4,r2
81100c8c:	11015a40 	call	811015a4 <write_reg>
				reg);
		status = TRUE;
81100c90:	00800044 	movi	r2,1
81100c94:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100c98:	e0bffd17 	ldw	r2,-12(fp)
}
81100c9c:	e037883a 	mov	sp,fp
81100ca0:	dfc00117 	ldw	ra,4(sp)
81100ca4:	df000017 	ldw	fp,0(sp)
81100ca8:	dec00204 	addi	sp,sp,8
81100cac:	f800283a 	ret

81100cb0 <comm_update_windowing>:

bool comm_update_windowing(comm_channel_t *channel) {
81100cb0:	defffb04 	addi	sp,sp,-20
81100cb4:	dfc00415 	stw	ra,16(sp)
81100cb8:	df000315 	stw	fp,12(sp)
81100cbc:	df000304 	addi	fp,sp,12
81100cc0:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100cc4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100cc8:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100ccc:	e0bfff17 	ldw	r2,-4(fp)
81100cd0:	10001126 	beq	r2,zero,81100d18 <comm_update_windowing+0x68>
		reg = read_reg(channel->channel_address,
81100cd4:	e0bfff17 	ldw	r2,-4(fp)
81100cd8:	10800017 	ldw	r2,0(r2)
81100cdc:	000b883a 	mov	r5,zero
81100ce0:	1009883a 	mov	r4,r2
81100ce4:	11015f00 	call	811015f0 <read_reg>
81100ce8:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_CONTROL_REG_OFFSET);

		if (reg & COMM_CONTROL_MASKING_EN_MASK) {
81100cec:	e0bffe17 	ldw	r2,-8(fp)
81100cf0:	1080400c 	andi	r2,r2,256
81100cf4:	10000426 	beq	r2,zero,81100d08 <comm_update_windowing+0x58>
			channel->windowing_config.masking = TRUE;
81100cf8:	e0bfff17 	ldw	r2,-4(fp)
81100cfc:	00c00044 	movi	r3,1
81100d00:	10c00115 	stw	r3,4(r2)
81100d04:	00000206 	br	81100d10 <comm_update_windowing+0x60>
		} else {
			channel->windowing_config.masking = FALSE;
81100d08:	e0bfff17 	ldw	r2,-4(fp)
81100d0c:	10000115 	stw	zero,4(r2)
		}

		status = TRUE;
81100d10:	00800044 	movi	r2,1
81100d14:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100d18:	e0bffd17 	ldw	r2,-12(fp)
}
81100d1c:	e037883a 	mov	sp,fp
81100d20:	dfc00117 	ldw	ra,4(sp)
81100d24:	df000017 	ldw	fp,0(sp)
81100d28:	dec00204 	addi	sp,sp,8
81100d2c:	f800283a 	ret

81100d30 <comm_config_link>:

bool comm_config_link(comm_channel_t *channel) {
81100d30:	defffb04 	addi	sp,sp,-20
81100d34:	dfc00415 	stw	ra,16(sp)
81100d38:	df000315 	stw	fp,12(sp)
81100d3c:	df000304 	addi	fp,sp,12
81100d40:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100d44:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100d48:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100d4c:	e0bfff17 	ldw	r2,-4(fp)
81100d50:	10002f26 	beq	r2,zero,81100e10 <comm_config_link+0xe0>
		reg = read_reg(channel->channel_address,
81100d54:	e0bfff17 	ldw	r2,-4(fp)
81100d58:	10800017 	ldw	r2,0(r2)
81100d5c:	000b883a 	mov	r5,zero
81100d60:	1009883a 	mov	r4,r2
81100d64:	11015f00 	call	811015f0 <read_reg>
81100d68:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_CONTROL_REG_OFFSET);

		if (channel->link_config.autostart) {
81100d6c:	e0bfff17 	ldw	r2,-4(fp)
81100d70:	10800217 	ldw	r2,8(r2)
81100d74:	10000426 	beq	r2,zero,81100d88 <comm_config_link+0x58>
			reg |= COMM_CONTROL_LINK_AUTOSTART_MASK;
81100d78:	e0bffe17 	ldw	r2,-8(fp)
81100d7c:	10800114 	ori	r2,r2,4
81100d80:	e0bffe15 	stw	r2,-8(fp)
81100d84:	00000406 	br	81100d98 <comm_config_link+0x68>
		} else {
			reg &= (~COMM_CONTROL_LINK_AUTOSTART_MASK);
81100d88:	e0fffe17 	ldw	r3,-8(fp)
81100d8c:	00bffec4 	movi	r2,-5
81100d90:	1884703a 	and	r2,r3,r2
81100d94:	e0bffe15 	stw	r2,-8(fp)
		}
		if (channel->link_config.start) {
81100d98:	e0bfff17 	ldw	r2,-4(fp)
81100d9c:	10800317 	ldw	r2,12(r2)
81100da0:	10000426 	beq	r2,zero,81100db4 <comm_config_link+0x84>
			reg |= COMM_CONTROL_LINK_START_MASK;
81100da4:	e0bffe17 	ldw	r2,-8(fp)
81100da8:	10800094 	ori	r2,r2,2
81100dac:	e0bffe15 	stw	r2,-8(fp)
81100db0:	00000406 	br	81100dc4 <comm_config_link+0x94>
		} else {
			reg &= (~COMM_CONTROL_LINK_START_MASK);
81100db4:	e0fffe17 	ldw	r3,-8(fp)
81100db8:	00bfff44 	movi	r2,-3
81100dbc:	1884703a 	and	r2,r3,r2
81100dc0:	e0bffe15 	stw	r2,-8(fp)
		}
		if (channel->link_config.disconnect) {
81100dc4:	e0bfff17 	ldw	r2,-4(fp)
81100dc8:	10800417 	ldw	r2,16(r2)
81100dcc:	10000426 	beq	r2,zero,81100de0 <comm_config_link+0xb0>
			reg |= COMM_CONTROL_LINK_DISCONNECT_MASK;
81100dd0:	e0bffe17 	ldw	r2,-8(fp)
81100dd4:	10800054 	ori	r2,r2,1
81100dd8:	e0bffe15 	stw	r2,-8(fp)
81100ddc:	00000406 	br	81100df0 <comm_config_link+0xc0>
		} else {
			reg &= (~COMM_CONTROL_LINK_DISCONNECT_MASK);
81100de0:	e0fffe17 	ldw	r3,-8(fp)
81100de4:	00bfff84 	movi	r2,-2
81100de8:	1884703a 	and	r2,r3,r2
81100dec:	e0bffe15 	stw	r2,-8(fp)
		}

		write_reg(channel->channel_address, COMM_WINDOWING_CONTROL_REG_OFFSET,
81100df0:	e0bfff17 	ldw	r2,-4(fp)
81100df4:	10800017 	ldw	r2,0(r2)
81100df8:	e1bffe17 	ldw	r6,-8(fp)
81100dfc:	000b883a 	mov	r5,zero
81100e00:	1009883a 	mov	r4,r2
81100e04:	11015a40 	call	811015a4 <write_reg>
				reg);
		status = TRUE;
81100e08:	00800044 	movi	r2,1
81100e0c:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100e10:	e0bffd17 	ldw	r2,-12(fp)
}
81100e14:	e037883a 	mov	sp,fp
81100e18:	dfc00117 	ldw	ra,4(sp)
81100e1c:	df000017 	ldw	fp,0(sp)
81100e20:	dec00204 	addi	sp,sp,8
81100e24:	f800283a 	ret

81100e28 <comm_update_link>:

bool comm_update_link(comm_channel_t *channel) {
81100e28:	defffb04 	addi	sp,sp,-20
81100e2c:	dfc00415 	stw	ra,16(sp)
81100e30:	df000315 	stw	fp,12(sp)
81100e34:	df000304 	addi	fp,sp,12
81100e38:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100e3c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100e40:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100e44:	e0bfff17 	ldw	r2,-4(fp)
81100e48:	10002326 	beq	r2,zero,81100ed8 <comm_update_link+0xb0>
		reg = read_reg(channel->channel_address,
81100e4c:	e0bfff17 	ldw	r2,-4(fp)
81100e50:	10800017 	ldw	r2,0(r2)
81100e54:	000b883a 	mov	r5,zero
81100e58:	1009883a 	mov	r4,r2
81100e5c:	11015f00 	call	811015f0 <read_reg>
81100e60:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_CONTROL_REG_OFFSET);

		if (reg & COMM_CONTROL_LINK_AUTOSTART_MASK) {
81100e64:	e0bffe17 	ldw	r2,-8(fp)
81100e68:	1080010c 	andi	r2,r2,4
81100e6c:	10000426 	beq	r2,zero,81100e80 <comm_update_link+0x58>
			channel->link_config.autostart = TRUE;
81100e70:	e0bfff17 	ldw	r2,-4(fp)
81100e74:	00c00044 	movi	r3,1
81100e78:	10c00215 	stw	r3,8(r2)
81100e7c:	00000206 	br	81100e88 <comm_update_link+0x60>
		} else {
			channel->link_config.autostart = FALSE;
81100e80:	e0bfff17 	ldw	r2,-4(fp)
81100e84:	10000215 	stw	zero,8(r2)
		}
		if (reg & COMM_CONTROL_LINK_START_MASK) {
81100e88:	e0bffe17 	ldw	r2,-8(fp)
81100e8c:	1080008c 	andi	r2,r2,2
81100e90:	10000426 	beq	r2,zero,81100ea4 <comm_update_link+0x7c>
			channel->link_config.start = TRUE;
81100e94:	e0bfff17 	ldw	r2,-4(fp)
81100e98:	00c00044 	movi	r3,1
81100e9c:	10c00315 	stw	r3,12(r2)
81100ea0:	00000206 	br	81100eac <comm_update_link+0x84>
		} else {
			channel->link_config.start = FALSE;
81100ea4:	e0bfff17 	ldw	r2,-4(fp)
81100ea8:	10000315 	stw	zero,12(r2)
		}
		if (reg & COMM_CONTROL_LINK_DISCONNECT_MASK) {
81100eac:	e0bffe17 	ldw	r2,-8(fp)
81100eb0:	1080004c 	andi	r2,r2,1
81100eb4:	10000426 	beq	r2,zero,81100ec8 <comm_update_link+0xa0>
			channel->link_config.disconnect = TRUE;
81100eb8:	e0bfff17 	ldw	r2,-4(fp)
81100ebc:	00c00044 	movi	r3,1
81100ec0:	10c00415 	stw	r3,16(r2)
81100ec4:	00000206 	br	81100ed0 <comm_update_link+0xa8>
		} else {
			channel->link_config.disconnect = FALSE;
81100ec8:	e0bfff17 	ldw	r2,-4(fp)
81100ecc:	10000415 	stw	zero,16(r2)
		}

		status = TRUE;
81100ed0:	00800044 	movi	r2,1
81100ed4:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100ed8:	e0bffd17 	ldw	r2,-12(fp)
}
81100edc:	e037883a 	mov	sp,fp
81100ee0:	dfc00117 	ldw	ra,4(sp)
81100ee4:	df000017 	ldw	fp,0(sp)
81100ee8:	dec00204 	addi	sp,sp,8
81100eec:	f800283a 	ret

81100ef0 <comm_update_link_error>:

bool comm_update_link_error(comm_channel_t *channel) {
81100ef0:	defffb04 	addi	sp,sp,-20
81100ef4:	dfc00415 	stw	ra,16(sp)
81100ef8:	df000315 	stw	fp,12(sp)
81100efc:	df000304 	addi	fp,sp,12
81100f00:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100f04:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100f08:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100f0c:	e0bfff17 	ldw	r2,-4(fp)
81100f10:	10002c26 	beq	r2,zero,81100fc4 <comm_update_link_error+0xd4>
		reg = read_reg(channel->channel_address,
81100f14:	e0bfff17 	ldw	r2,-4(fp)
81100f18:	10800017 	ldw	r2,0(r2)
81100f1c:	01400044 	movi	r5,1
81100f20:	1009883a 	mov	r4,r2
81100f24:	11015f00 	call	811015f0 <read_reg>
81100f28:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_STATUS_REG_OFFSET);

		if (reg & COMM_STATUS_LINK_DISC_ERR_MASK) {
81100f2c:	e0bffe17 	ldw	r2,-8(fp)
81100f30:	1082000c 	andi	r2,r2,2048
81100f34:	10000426 	beq	r2,zero,81100f48 <comm_update_link_error+0x58>
			channel->link_error.disconnect = TRUE;
81100f38:	e0bfff17 	ldw	r2,-4(fp)
81100f3c:	00c00044 	movi	r3,1
81100f40:	10c00515 	stw	r3,20(r2)
81100f44:	00000206 	br	81100f50 <comm_update_link_error+0x60>
		} else {
			channel->link_error.disconnect = FALSE;
81100f48:	e0bfff17 	ldw	r2,-4(fp)
81100f4c:	10000515 	stw	zero,20(r2)
		}
		if (reg & COMM_STATUS_LINK_PAR_ERR_MASK) {
81100f50:	e0bffe17 	ldw	r2,-8(fp)
81100f54:	1081000c 	andi	r2,r2,1024
81100f58:	10000426 	beq	r2,zero,81100f6c <comm_update_link_error+0x7c>
			channel->link_error.parity = TRUE;
81100f5c:	e0bfff17 	ldw	r2,-4(fp)
81100f60:	00c00044 	movi	r3,1
81100f64:	10c00615 	stw	r3,24(r2)
81100f68:	00000206 	br	81100f74 <comm_update_link_error+0x84>
		} else {
			channel->link_error.parity = FALSE;
81100f6c:	e0bfff17 	ldw	r2,-4(fp)
81100f70:	10000615 	stw	zero,24(r2)
		}
		if (reg & COMM_STATUS_LINK_ESC_ERR_MASK) {
81100f74:	e0bffe17 	ldw	r2,-8(fp)
81100f78:	1080800c 	andi	r2,r2,512
81100f7c:	10000426 	beq	r2,zero,81100f90 <comm_update_link_error+0xa0>
			channel->link_error.escape = TRUE;
81100f80:	e0bfff17 	ldw	r2,-4(fp)
81100f84:	00c00044 	movi	r3,1
81100f88:	10c00715 	stw	r3,28(r2)
81100f8c:	00000206 	br	81100f98 <comm_update_link_error+0xa8>
		} else {
			channel->link_error.escape = FALSE;
81100f90:	e0bfff17 	ldw	r2,-4(fp)
81100f94:	10000715 	stw	zero,28(r2)
		}
		if (reg & COMM_STATUS_LINK_CRED_ERR_MASK) {
81100f98:	e0bffe17 	ldw	r2,-8(fp)
81100f9c:	1080400c 	andi	r2,r2,256
81100fa0:	10000426 	beq	r2,zero,81100fb4 <comm_update_link_error+0xc4>
			channel->link_error.credit = TRUE;
81100fa4:	e0bfff17 	ldw	r2,-4(fp)
81100fa8:	00c00044 	movi	r3,1
81100fac:	10c00815 	stw	r3,32(r2)
81100fb0:	00000206 	br	81100fbc <comm_update_link_error+0xcc>
		} else {
			channel->link_error.credit = FALSE;
81100fb4:	e0bfff17 	ldw	r2,-4(fp)
81100fb8:	10000815 	stw	zero,32(r2)
		}

		status = TRUE;
81100fbc:	00800044 	movi	r2,1
81100fc0:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100fc4:	e0bffd17 	ldw	r2,-12(fp)
}
81100fc8:	e037883a 	mov	sp,fp
81100fcc:	dfc00117 	ldw	ra,4(sp)
81100fd0:	df000017 	ldw	fp,0(sp)
81100fd4:	dec00204 	addi	sp,sp,8
81100fd8:	f800283a 	ret

81100fdc <comm_update_link_status>:

bool comm_update_link_status(comm_channel_t *channel) {
81100fdc:	defffb04 	addi	sp,sp,-20
81100fe0:	dfc00415 	stw	ra,16(sp)
81100fe4:	df000315 	stw	fp,12(sp)
81100fe8:	df000304 	addi	fp,sp,12
81100fec:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100ff0:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100ff4:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100ff8:	e0bfff17 	ldw	r2,-4(fp)
81100ffc:	10002326 	beq	r2,zero,8110108c <comm_update_link_status+0xb0>
		reg = read_reg(channel->channel_address,
81101000:	e0bfff17 	ldw	r2,-4(fp)
81101004:	10800017 	ldw	r2,0(r2)
81101008:	01400044 	movi	r5,1
8110100c:	1009883a 	mov	r4,r2
81101010:	11015f00 	call	811015f0 <read_reg>
81101014:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_STATUS_REG_OFFSET);

		if (reg & COMM_STATUS_LINK_STARTED_MASK) {
81101018:	e0bffe17 	ldw	r2,-8(fp)
8110101c:	1080010c 	andi	r2,r2,4
81101020:	10000426 	beq	r2,zero,81101034 <comm_update_link_status+0x58>
			channel->link_status.started = TRUE;
81101024:	e0bfff17 	ldw	r2,-4(fp)
81101028:	00c00044 	movi	r3,1
8110102c:	10c00915 	stw	r3,36(r2)
81101030:	00000206 	br	8110103c <comm_update_link_status+0x60>
		} else {
			channel->link_status.started = FALSE;
81101034:	e0bfff17 	ldw	r2,-4(fp)
81101038:	10000915 	stw	zero,36(r2)
		}
		if (reg & COMM_STATUS_LINK_CONNECTING_MASK) {
8110103c:	e0bffe17 	ldw	r2,-8(fp)
81101040:	1080008c 	andi	r2,r2,2
81101044:	10000426 	beq	r2,zero,81101058 <comm_update_link_status+0x7c>
			channel->link_status.connecting = TRUE;
81101048:	e0bfff17 	ldw	r2,-4(fp)
8110104c:	00c00044 	movi	r3,1
81101050:	10c00a15 	stw	r3,40(r2)
81101054:	00000206 	br	81101060 <comm_update_link_status+0x84>
		} else {
			channel->link_status.connecting = FALSE;
81101058:	e0bfff17 	ldw	r2,-4(fp)
8110105c:	10000a15 	stw	zero,40(r2)
		}
		if (reg & COMM_STATUS_LINK_RUNNING_MASK) {
81101060:	e0bffe17 	ldw	r2,-8(fp)
81101064:	1080004c 	andi	r2,r2,1
81101068:	10000426 	beq	r2,zero,8110107c <comm_update_link_status+0xa0>
			channel->link_status.running = TRUE;
8110106c:	e0bfff17 	ldw	r2,-4(fp)
81101070:	00c00044 	movi	r3,1
81101074:	10c00b15 	stw	r3,44(r2)
81101078:	00000206 	br	81101084 <comm_update_link_status+0xa8>
		} else {
			channel->link_status.running = FALSE;
8110107c:	e0bfff17 	ldw	r2,-4(fp)
81101080:	10000b15 	stw	zero,44(r2)
		}

		status = TRUE;
81101084:	00800044 	movi	r2,1
81101088:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
8110108c:	e0bffd17 	ldw	r2,-12(fp)
}
81101090:	e037883a 	mov	sp,fp
81101094:	dfc00117 	ldw	ra,4(sp)
81101098:	df000017 	ldw	fp,0(sp)
8110109c:	dec00204 	addi	sp,sp,8
811010a0:	f800283a 	ret

811010a4 <comm_update_timecode_rx>:

bool comm_update_timecode_rx(comm_channel_t *channel) {
811010a4:	defffb04 	addi	sp,sp,-20
811010a8:	dfc00415 	stw	ra,16(sp)
811010ac:	df000315 	stw	fp,12(sp)
811010b0:	df000304 	addi	fp,sp,12
811010b4:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
811010b8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
811010bc:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
811010c0:	e0bfff17 	ldw	r2,-4(fp)
811010c4:	10001d26 	beq	r2,zero,8110113c <comm_update_timecode_rx+0x98>
		reg = read_reg(channel->channel_address,
811010c8:	e0bfff17 	ldw	r2,-4(fp)
811010cc:	10800017 	ldw	r2,0(r2)
811010d0:	01400084 	movi	r5,2
811010d4:	1009883a 	mov	r4,r2
811010d8:	11015f00 	call	811015f0 <read_reg>
811010dc:	e0bffe15 	stw	r2,-8(fp)
		COMM_TIMECODE_RX_REG_OFFSET);

		channel->timecode_rx.control = (alt_u8) ((reg
				& COMM_TIMECODE_RX_CONTROL_MASK) >> 7);
811010e0:	e0bffe17 	ldw	r2,-8(fp)
811010e4:	1080600c 	andi	r2,r2,384
811010e8:	1004d1fa 	srli	r2,r2,7

	if (channel != NULL) {
		reg = read_reg(channel->channel_address,
		COMM_TIMECODE_RX_REG_OFFSET);

		channel->timecode_rx.control = (alt_u8) ((reg
811010ec:	1007883a 	mov	r3,r2
811010f0:	e0bfff17 	ldw	r2,-4(fp)
811010f4:	10c00c05 	stb	r3,48(r2)
				& COMM_TIMECODE_RX_CONTROL_MASK) >> 7);
		channel->timecode_rx.counter = (alt_u8) ((reg
				& COMM_TIMECODE_RX_COUNTER_MASK) >> 1);
811010f8:	e0bffe17 	ldw	r2,-8(fp)
811010fc:	10801f8c 	andi	r2,r2,126
81101100:	1004d07a 	srli	r2,r2,1
		reg = read_reg(channel->channel_address,
		COMM_TIMECODE_RX_REG_OFFSET);

		channel->timecode_rx.control = (alt_u8) ((reg
				& COMM_TIMECODE_RX_CONTROL_MASK) >> 7);
		channel->timecode_rx.counter = (alt_u8) ((reg
81101104:	1007883a 	mov	r3,r2
81101108:	e0bfff17 	ldw	r2,-4(fp)
8110110c:	10c00c45 	stb	r3,49(r2)
				& COMM_TIMECODE_RX_COUNTER_MASK) >> 1);
		if (reg & COMM_TIMECODE_RX_RECEIVED_MASK) {
81101110:	e0bffe17 	ldw	r2,-8(fp)
81101114:	1080004c 	andi	r2,r2,1
81101118:	10000426 	beq	r2,zero,8110112c <comm_update_timecode_rx+0x88>
			channel->timecode_rx.received = TRUE;
8110111c:	e0bfff17 	ldw	r2,-4(fp)
81101120:	00c00044 	movi	r3,1
81101124:	10c00d15 	stw	r3,52(r2)
81101128:	00000206 	br	81101134 <comm_update_timecode_rx+0x90>
		} else {
			channel->timecode_rx.received = FALSE;
8110112c:	e0bfff17 	ldw	r2,-4(fp)
81101130:	10000d15 	stw	zero,52(r2)
		}

		status = TRUE;
81101134:	00800044 	movi	r2,1
81101138:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
8110113c:	e0bffd17 	ldw	r2,-12(fp)
}
81101140:	e037883a 	mov	sp,fp
81101144:	dfc00117 	ldw	ra,4(sp)
81101148:	df000017 	ldw	fp,0(sp)
8110114c:	dec00204 	addi	sp,sp,8
81101150:	f800283a 	ret

81101154 <comm_clear_timecode_rx_received>:

bool comm_clear_timecode_rx_received(comm_channel_t *channel) {
81101154:	defffb04 	addi	sp,sp,-20
81101158:	dfc00415 	stw	ra,16(sp)
8110115c:	df000315 	stw	fp,12(sp)
81101160:	df000304 	addi	fp,sp,12
81101164:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81101168:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
8110116c:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81101170:	e0bfff17 	ldw	r2,-4(fp)
81101174:	10000a26 	beq	r2,zero,811011a0 <comm_clear_timecode_rx_received+0x4c>
		reg = COMM_TIMECODE_RX_RECEIVED_MASK;
81101178:	00800044 	movi	r2,1
8110117c:	e0bffe15 	stw	r2,-8(fp)

		write_reg(channel->channel_address, COMM_TIMECODE_RX_REG_OFFSET, reg);
81101180:	e0bfff17 	ldw	r2,-4(fp)
81101184:	10800017 	ldw	r2,0(r2)
81101188:	e1bffe17 	ldw	r6,-8(fp)
8110118c:	01400084 	movi	r5,2
81101190:	1009883a 	mov	r4,r2
81101194:	11015a40 	call	811015a4 <write_reg>
		status = TRUE;
81101198:	00800044 	movi	r2,1
8110119c:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
811011a0:	e0bffd17 	ldw	r2,-12(fp)
}
811011a4:	e037883a 	mov	sp,fp
811011a8:	dfc00117 	ldw	ra,4(sp)
811011ac:	df000017 	ldw	fp,0(sp)
811011b0:	dec00204 	addi	sp,sp,8
811011b4:	f800283a 	ret

811011b8 <comm_send_timecode_tx>:

bool comm_send_timecode_tx(comm_channel_t *channel) {
811011b8:	defffb04 	addi	sp,sp,-20
811011bc:	dfc00415 	stw	ra,16(sp)
811011c0:	df000315 	stw	fp,12(sp)
811011c4:	df000304 	addi	fp,sp,12
811011c8:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
811011cc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
811011d0:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
811011d4:	e0bfff17 	ldw	r2,-4(fp)
811011d8:	10002326 	beq	r2,zero,81101268 <comm_send_timecode_tx+0xb0>
		reg |= (alt_u32) (channel->timecode_tx.control << 7);
811011dc:	e0bfff17 	ldw	r2,-4(fp)
811011e0:	10800e03 	ldbu	r2,56(r2)
811011e4:	10803fcc 	andi	r2,r2,255
811011e8:	100491fa 	slli	r2,r2,7
811011ec:	1007883a 	mov	r3,r2
811011f0:	e0bffe17 	ldw	r2,-8(fp)
811011f4:	10c4b03a 	or	r2,r2,r3
811011f8:	e0bffe15 	stw	r2,-8(fp)
		reg |= (alt_u32) (channel->timecode_tx.counter << 1);
811011fc:	e0bfff17 	ldw	r2,-4(fp)
81101200:	10800e43 	ldbu	r2,57(r2)
81101204:	10803fcc 	andi	r2,r2,255
81101208:	1085883a 	add	r2,r2,r2
8110120c:	1007883a 	mov	r3,r2
81101210:	e0bffe17 	ldw	r2,-8(fp)
81101214:	10c4b03a 	or	r2,r2,r3
81101218:	e0bffe15 	stw	r2,-8(fp)
		if (channel->timecode_tx.send) {
8110121c:	e0bfff17 	ldw	r2,-4(fp)
81101220:	10800f17 	ldw	r2,60(r2)
81101224:	10000426 	beq	r2,zero,81101238 <comm_send_timecode_tx+0x80>
			reg |= COMM_TIMECODE_TX_SEND_MASK;
81101228:	e0bffe17 	ldw	r2,-8(fp)
8110122c:	10800054 	ori	r2,r2,1
81101230:	e0bffe15 	stw	r2,-8(fp)
81101234:	00000406 	br	81101248 <comm_send_timecode_tx+0x90>
		} else {
			reg &= (~COMM_TIMECODE_TX_SEND_MASK);
81101238:	e0fffe17 	ldw	r3,-8(fp)
8110123c:	00bfff84 	movi	r2,-2
81101240:	1884703a 	and	r2,r3,r2
81101244:	e0bffe15 	stw	r2,-8(fp)
		}

		write_reg(channel->channel_address, COMM_TIMECODE_TX_REG_OFFSET, reg);
81101248:	e0bfff17 	ldw	r2,-4(fp)
8110124c:	10800017 	ldw	r2,0(r2)
81101250:	e1bffe17 	ldw	r6,-8(fp)
81101254:	014000c4 	movi	r5,3
81101258:	1009883a 	mov	r4,r2
8110125c:	11015a40 	call	811015a4 <write_reg>
		status = TRUE;
81101260:	00800044 	movi	r2,1
81101264:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81101268:	e0bffd17 	ldw	r2,-12(fp)
}
8110126c:	e037883a 	mov	sp,fp
81101270:	dfc00117 	ldw	ra,4(sp)
81101274:	df000017 	ldw	fp,0(sp)
81101278:	dec00204 	addi	sp,sp,8
8110127c:	f800283a 	ret

81101280 <comm_update_timecode_tx>:

bool comm_update_timecode_tx(comm_channel_t *channel) {
81101280:	defffb04 	addi	sp,sp,-20
81101284:	dfc00415 	stw	ra,16(sp)
81101288:	df000315 	stw	fp,12(sp)
8110128c:	df000304 	addi	fp,sp,12
81101290:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81101294:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81101298:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
8110129c:	e0bfff17 	ldw	r2,-4(fp)
811012a0:	10001d26 	beq	r2,zero,81101318 <comm_update_timecode_tx+0x98>
		reg = read_reg(channel->channel_address,
811012a4:	e0bfff17 	ldw	r2,-4(fp)
811012a8:	10800017 	ldw	r2,0(r2)
811012ac:	014000c4 	movi	r5,3
811012b0:	1009883a 	mov	r4,r2
811012b4:	11015f00 	call	811015f0 <read_reg>
811012b8:	e0bffe15 	stw	r2,-8(fp)
		COMM_TIMECODE_TX_REG_OFFSET);

		channel->timecode_tx.control = (alt_u8) ((reg
				& COMM_TIMECODE_TX_CONTROL_MASK) >> 7);
811012bc:	e0bffe17 	ldw	r2,-8(fp)
811012c0:	1080600c 	andi	r2,r2,384
811012c4:	1004d1fa 	srli	r2,r2,7

	if (channel != NULL) {
		reg = read_reg(channel->channel_address,
		COMM_TIMECODE_TX_REG_OFFSET);

		channel->timecode_tx.control = (alt_u8) ((reg
811012c8:	1007883a 	mov	r3,r2
811012cc:	e0bfff17 	ldw	r2,-4(fp)
811012d0:	10c00e05 	stb	r3,56(r2)
				& COMM_TIMECODE_TX_CONTROL_MASK) >> 7);
		channel->timecode_tx.counter = (alt_u8) ((reg
				& COMM_TIMECODE_TX_COUNTER_MASK) >> 1);
811012d4:	e0bffe17 	ldw	r2,-8(fp)
811012d8:	10801f8c 	andi	r2,r2,126
811012dc:	1004d07a 	srli	r2,r2,1
		reg = read_reg(channel->channel_address,
		COMM_TIMECODE_TX_REG_OFFSET);

		channel->timecode_tx.control = (alt_u8) ((reg
				& COMM_TIMECODE_TX_CONTROL_MASK) >> 7);
		channel->timecode_tx.counter = (alt_u8) ((reg
811012e0:	1007883a 	mov	r3,r2
811012e4:	e0bfff17 	ldw	r2,-4(fp)
811012e8:	10c00e45 	stb	r3,57(r2)
				& COMM_TIMECODE_TX_COUNTER_MASK) >> 1);
		if (reg & COMM_TIMECODE_TX_SEND_MASK) {
811012ec:	e0bffe17 	ldw	r2,-8(fp)
811012f0:	1080004c 	andi	r2,r2,1
811012f4:	10000426 	beq	r2,zero,81101308 <comm_update_timecode_tx+0x88>
			channel->timecode_tx.send = TRUE;
811012f8:	e0bfff17 	ldw	r2,-4(fp)
811012fc:	00c00044 	movi	r3,1
81101300:	10c00f15 	stw	r3,60(r2)
81101304:	00000206 	br	81101310 <comm_update_timecode_tx+0x90>
		} else {
			channel->timecode_tx.send = FALSE;
81101308:	e0bfff17 	ldw	r2,-4(fp)
8110130c:	10000f15 	stw	zero,60(r2)
		}

		status = TRUE;
81101310:	00800044 	movi	r2,1
81101314:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81101318:	e0bffd17 	ldw	r2,-12(fp)
}
8110131c:	e037883a 	mov	sp,fp
81101320:	dfc00117 	ldw	ra,4(sp)
81101324:	df000017 	ldw	fp,0(sp)
81101328:	dec00204 	addi	sp,sp,8
8110132c:	f800283a 	ret

81101330 <comm_update_buffers_status>:

bool comm_update_buffers_status(comm_channel_t *channel) {
81101330:	defffb04 	addi	sp,sp,-20
81101334:	dfc00415 	stw	ra,16(sp)
81101338:	df000315 	stw	fp,12(sp)
8110133c:	df000304 	addi	fp,sp,12
81101340:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81101344:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81101348:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
8110134c:	e0bfff17 	ldw	r2,-4(fp)
81101350:	10001a26 	beq	r2,zero,811013bc <comm_update_buffers_status+0x8c>
		reg = read_reg(channel->channel_address,
81101354:	e0bfff17 	ldw	r2,-4(fp)
81101358:	10800017 	ldw	r2,0(r2)
8110135c:	01400184 	movi	r5,6
81101360:	1009883a 	mov	r4,r2
81101364:	11015f00 	call	811015f0 <read_reg>
81101368:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_BUFFER_REG_OFFSET);

		if (reg & COMM_BUFFER_STATUS_LEFT_BUFFER_EMPTY_MASK) {
8110136c:	e0bffe17 	ldw	r2,-8(fp)
81101370:	1080400c 	andi	r2,r2,256
81101374:	10000426 	beq	r2,zero,81101388 <comm_update_buffers_status+0x58>
			channel->buffer_status.left_buffer_empty = TRUE;
81101378:	e0bfff17 	ldw	r2,-4(fp)
8110137c:	00c00044 	movi	r3,1
81101380:	10c01315 	stw	r3,76(r2)
81101384:	00000206 	br	81101390 <comm_update_buffers_status+0x60>
		} else {
			channel->buffer_status.left_buffer_empty = FALSE;
81101388:	e0bfff17 	ldw	r2,-4(fp)
8110138c:	10001315 	stw	zero,76(r2)
		}
		if (reg & COMM_BUFFER_STATUS_RIGHT_BUFFER_EMPTY_MASK) {
81101390:	e0bffe17 	ldw	r2,-8(fp)
81101394:	1080004c 	andi	r2,r2,1
81101398:	10000426 	beq	r2,zero,811013ac <comm_update_buffers_status+0x7c>
			channel->buffer_status.right_buffer_empty = TRUE;
8110139c:	e0bfff17 	ldw	r2,-4(fp)
811013a0:	00c00044 	movi	r3,1
811013a4:	10c01415 	stw	r3,80(r2)
811013a8:	00000206 	br	811013b4 <comm_update_buffers_status+0x84>
		} else {
			channel->buffer_status.right_buffer_empty = FALSE;
811013ac:	e0bfff17 	ldw	r2,-4(fp)
811013b0:	10001415 	stw	zero,80(r2)
		}

		status = TRUE;
811013b4:	00800044 	movi	r2,1
811013b8:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
811013bc:	e0bffd17 	ldw	r2,-12(fp)
}
811013c0:	e037883a 	mov	sp,fp
811013c4:	dfc00117 	ldw	ra,4(sp)
811013c8:	df000017 	ldw	fp,0(sp)
811013cc:	dec00204 	addi	sp,sp,8
811013d0:	f800283a 	ret

811013d4 <comm_init_channel>:

bool comm_init_channel(comm_channel_t *channel, alt_u8 spw_channel) {
811013d4:	defffb04 	addi	sp,sp,-20
811013d8:	dfc00415 	stw	ra,16(sp)
811013dc:	df000315 	stw	fp,12(sp)
811013e0:	df000304 	addi	fp,sp,12
811013e4:	e13ffe15 	stw	r4,-8(fp)
811013e8:	2805883a 	mov	r2,r5
811013ec:	e0bfff05 	stb	r2,-4(fp)
	bool status = FALSE;
811013f0:	e03ffd15 	stw	zero,-12(fp)

	if (channel != NULL) {
811013f4:	e0bffe17 	ldw	r2,-8(fp)
811013f8:	10006426 	beq	r2,zero,8110158c <comm_init_channel+0x1b8>
		status = TRUE;
811013fc:	00800044 	movi	r2,1
81101400:	e0bffd15 	stw	r2,-12(fp)

		switch (spw_channel) {
81101404:	e0bfff03 	ldbu	r2,-4(fp)
81101408:	10c00268 	cmpgeui	r3,r2,9
8110140c:	1800371e 	bne	r3,zero,811014ec <comm_init_channel+0x118>
81101410:	100690ba 	slli	r3,r2,2
81101414:	00a04434 	movhi	r2,33040
81101418:	10850a04 	addi	r2,r2,5160
8110141c:	1885883a 	add	r2,r3,r2
81101420:	10800017 	ldw	r2,0(r2)
81101424:	1000683a 	jmp	r2
81101428:	811014ec 	andhi	r4,r16,16467
8110142c:	8110144c 	andi	r4,r16,16465
81101430:	81101460 	cmpeqi	r4,r16,16465
81101434:	81101474 	orhi	r4,r16,16465
81101438:	81101488 	cmpgei	r4,r16,16466
8110143c:	8110149c 	xori	r4,r16,16466
81101440:	811014b0 	cmpltui	r4,r16,16466
81101444:	811014c4 	addi	r4,r16,16467
81101448:	811014d8 	cmpnei	r4,r16,16467
		case spacewire_channel_a:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_A_BASE_ADDR;
8110144c:	e0fffe17 	ldw	r3,-8(fp)
81101450:	00a04834 	movhi	r2,33056
81101454:	108b0004 	addi	r2,r2,11264
81101458:	18800015 	stw	r2,0(r3)
			break;
8110145c:	00002506 	br	811014f4 <comm_init_channel+0x120>
		case spacewire_channel_b:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_B_BASE_ADDR;
81101460:	e0fffe17 	ldw	r3,-8(fp)
81101464:	00a04834 	movhi	r2,33056
81101468:	108a0004 	addi	r2,r2,10240
8110146c:	18800015 	stw	r2,0(r3)
			break;
81101470:	00002006 	br	811014f4 <comm_init_channel+0x120>
		case spacewire_channel_c:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_C_BASE_ADDR;
81101474:	e0fffe17 	ldw	r3,-8(fp)
81101478:	00a04834 	movhi	r2,33056
8110147c:	10890004 	addi	r2,r2,9216
81101480:	18800015 	stw	r2,0(r3)
			break;
81101484:	00001b06 	br	811014f4 <comm_init_channel+0x120>
		case spacewire_channel_d:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_D_BASE_ADDR;
81101488:	e0fffe17 	ldw	r3,-8(fp)
8110148c:	00a04834 	movhi	r2,33056
81101490:	10880004 	addi	r2,r2,8192
81101494:	18800015 	stw	r2,0(r3)
			break;
81101498:	00001606 	br	811014f4 <comm_init_channel+0x120>
		case spacewire_channel_e:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_E_BASE_ADDR;
8110149c:	e0fffe17 	ldw	r3,-8(fp)
811014a0:	00a04834 	movhi	r2,33056
811014a4:	10870004 	addi	r2,r2,7168
811014a8:	18800015 	stw	r2,0(r3)
			break;
811014ac:	00001106 	br	811014f4 <comm_init_channel+0x120>
		case spacewire_channel_f:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_F_BASE_ADDR;
811014b0:	e0fffe17 	ldw	r3,-8(fp)
811014b4:	00a04834 	movhi	r2,33056
811014b8:	10860004 	addi	r2,r2,6144
811014bc:	18800015 	stw	r2,0(r3)
			break;
811014c0:	00000c06 	br	811014f4 <comm_init_channel+0x120>
		case spacewire_channel_g:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_G_BASE_ADDR;
811014c4:	e0fffe17 	ldw	r3,-8(fp)
811014c8:	00a04834 	movhi	r2,33056
811014cc:	10850004 	addi	r2,r2,5120
811014d0:	18800015 	stw	r2,0(r3)
			break;
811014d4:	00000706 	br	811014f4 <comm_init_channel+0x120>
		case spacewire_channel_h:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_H_BASE_ADDR;
811014d8:	e0fffe17 	ldw	r3,-8(fp)
811014dc:	00a04834 	movhi	r2,33056
811014e0:	10840004 	addi	r2,r2,4096
811014e4:	18800015 	stw	r2,0(r3)
			break;
811014e8:	00000206 	br	811014f4 <comm_init_channel+0x120>
		default:
			status = FALSE;
811014ec:	e03ffd15 	stw	zero,-12(fp)
			break;
811014f0:	0001883a 	nop
		}

		if (status) {
811014f4:	e0bffd17 	ldw	r2,-12(fp)
811014f8:	10002426 	beq	r2,zero,8110158c <comm_init_channel+0x1b8>
			if (!comm_update_windowing(channel)) {
811014fc:	e13ffe17 	ldw	r4,-8(fp)
81101500:	1100cb00 	call	81100cb0 <comm_update_windowing>
81101504:	1000011e 	bne	r2,zero,8110150c <comm_init_channel+0x138>
				status = FALSE;
81101508:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_link(channel)) {
8110150c:	e13ffe17 	ldw	r4,-8(fp)
81101510:	1100e280 	call	81100e28 <comm_update_link>
81101514:	1000011e 	bne	r2,zero,8110151c <comm_init_channel+0x148>
				status = FALSE;
81101518:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_link_error(channel)) {
8110151c:	e13ffe17 	ldw	r4,-8(fp)
81101520:	1100ef00 	call	81100ef0 <comm_update_link_error>
81101524:	1000011e 	bne	r2,zero,8110152c <comm_init_channel+0x158>
				status = FALSE;
81101528:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_link_status(channel)) {
8110152c:	e13ffe17 	ldw	r4,-8(fp)
81101530:	1100fdc0 	call	81100fdc <comm_update_link_status>
81101534:	1000011e 	bne	r2,zero,8110153c <comm_init_channel+0x168>
				status = FALSE;
81101538:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_timecode_rx(channel)) {
8110153c:	e13ffe17 	ldw	r4,-8(fp)
81101540:	11010a40 	call	811010a4 <comm_update_timecode_rx>
81101544:	1000011e 	bne	r2,zero,8110154c <comm_init_channel+0x178>
				status = FALSE;
81101548:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_timecode_tx(channel)) {
8110154c:	e13ffe17 	ldw	r4,-8(fp)
81101550:	11012800 	call	81101280 <comm_update_timecode_tx>
81101554:	1000011e 	bne	r2,zero,8110155c <comm_init_channel+0x188>
				status = FALSE;
81101558:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_int_control(channel)) {
8110155c:	e13ffe17 	ldw	r4,-8(fp)
81101560:	1100aec0 	call	81100aec <comm_update_int_control>
81101564:	1000011e 	bne	r2,zero,8110156c <comm_init_channel+0x198>
				status = FALSE;
81101568:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_int_flags(channel)) {
8110156c:	e13ffe17 	ldw	r4,-8(fp)
81101570:	1100b900 	call	81100b90 <comm_update_int_flags>
81101574:	1000011e 	bne	r2,zero,8110157c <comm_init_channel+0x1a8>
				status = FALSE;
81101578:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_buffers_status(channel)) {
8110157c:	e13ffe17 	ldw	r4,-8(fp)
81101580:	11013300 	call	81101330 <comm_update_buffers_status>
81101584:	1000011e 	bne	r2,zero,8110158c <comm_init_channel+0x1b8>
				status = FALSE;
81101588:	e03ffd15 	stw	zero,-12(fp)
			}
		}
	}
	return status;
8110158c:	e0bffd17 	ldw	r2,-12(fp)
}
81101590:	e037883a 	mov	sp,fp
81101594:	dfc00117 	ldw	ra,4(sp)
81101598:	df000017 	ldw	fp,0(sp)
8110159c:	dec00204 	addi	sp,sp,8
811015a0:	f800283a 	ret

811015a4 <write_reg>:
//! [public functions]

//! [private functions]
static void write_reg(alt_u32 *address, alt_u32 offset, alt_u32 value) {
811015a4:	defffc04 	addi	sp,sp,-16
811015a8:	df000315 	stw	fp,12(sp)
811015ac:	df000304 	addi	fp,sp,12
811015b0:	e13ffd15 	stw	r4,-12(fp)
811015b4:	e17ffe15 	stw	r5,-8(fp)
811015b8:	e1bfff15 	stw	r6,-4(fp)
	*(address + offset) = value;
811015bc:	e0bffe17 	ldw	r2,-8(fp)
811015c0:	1085883a 	add	r2,r2,r2
811015c4:	1085883a 	add	r2,r2,r2
811015c8:	1007883a 	mov	r3,r2
811015cc:	e0bffd17 	ldw	r2,-12(fp)
811015d0:	10c5883a 	add	r2,r2,r3
811015d4:	e0ffff17 	ldw	r3,-4(fp)
811015d8:	10c00015 	stw	r3,0(r2)
}
811015dc:	0001883a 	nop
811015e0:	e037883a 	mov	sp,fp
811015e4:	df000017 	ldw	fp,0(sp)
811015e8:	dec00104 	addi	sp,sp,4
811015ec:	f800283a 	ret

811015f0 <read_reg>:

static alt_u32 read_reg(alt_u32 *address, alt_u32 offset) {
811015f0:	defffc04 	addi	sp,sp,-16
811015f4:	df000315 	stw	fp,12(sp)
811015f8:	df000304 	addi	fp,sp,12
811015fc:	e13ffe15 	stw	r4,-8(fp)
81101600:	e17fff15 	stw	r5,-4(fp)
	alt_u32 value;

	value = *(address + offset);
81101604:	e0bfff17 	ldw	r2,-4(fp)
81101608:	1085883a 	add	r2,r2,r2
8110160c:	1085883a 	add	r2,r2,r2
81101610:	1007883a 	mov	r3,r2
81101614:	e0bffe17 	ldw	r2,-8(fp)
81101618:	10c5883a 	add	r2,r2,r3
8110161c:	10800017 	ldw	r2,0(r2)
81101620:	e0bffd15 	stw	r2,-12(fp)
	return value;
81101624:	e0bffd17 	ldw	r2,-12(fp)
}
81101628:	e037883a 	mov	sp,fp
8110162c:	df000017 	ldw	fp,0(sp)
81101630:	dec00104 	addi	sp,sp,4
81101634:	f800283a 	ret

81101638 <enable_iso_drivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
PUBLIC bool enable_iso_drivers(void)
{
81101638:	defffe04 	addi	sp,sp,-8
8110163c:	dfc00115 	stw	ra,4(sp)
81101640:	df000015 	stw	fp,0(sp)
81101644:	d839883a 	mov	fp,sp
  ctrl_io_lvds_drive(IO_ON, EN_ISO_DRIVERS_MASK);
81101648:	01400204 	movi	r5,8
8110164c:	01000044 	movi	r4,1
81101650:	11017c00 	call	811017c0 <ctrl_io_lvds_drive>
  return  TRUE;
81101654:	00800044 	movi	r2,1
}
81101658:	e037883a 	mov	sp,fp
8110165c:	dfc00117 	ldw	ra,4(sp)
81101660:	df000017 	ldw	fp,0(sp)
81101664:	dec00204 	addi	sp,sp,8
81101668:	f800283a 	ret

8110166c <disable_iso_drivers>:

PUBLIC bool disable_iso_drivers(void)
{
8110166c:	defffe04 	addi	sp,sp,-8
81101670:	dfc00115 	stw	ra,4(sp)
81101674:	df000015 	stw	fp,0(sp)
81101678:	d839883a 	mov	fp,sp
  ctrl_io_lvds_drive(IO_OFF, EN_ISO_DRIVERS_MASK);
8110167c:	01400204 	movi	r5,8
81101680:	0009883a 	mov	r4,zero
81101684:	11017c00 	call	811017c0 <ctrl_io_lvds_drive>
  return  TRUE;
81101688:	00800044 	movi	r2,1
}
8110168c:	e037883a 	mov	sp,fp
81101690:	dfc00117 	ldw	ra,4(sp)
81101694:	df000017 	ldw	fp,0(sp)
81101698:	dec00204 	addi	sp,sp,8
8110169c:	f800283a 	ret

811016a0 <enable_lvds_board>:

PUBLIC bool enable_lvds_board(void)
{
811016a0:	defffe04 	addi	sp,sp,-8
811016a4:	dfc00115 	stw	ra,4(sp)
811016a8:	df000015 	stw	fp,0(sp)
811016ac:	d839883a 	mov	fp,sp
  ctrl_io_lvds_drive(IO_ON, PWDN_MASK);
811016b0:	01400104 	movi	r5,4
811016b4:	01000044 	movi	r4,1
811016b8:	11017c00 	call	811017c0 <ctrl_io_lvds_drive>
  return  TRUE;
811016bc:	00800044 	movi	r2,1
}
811016c0:	e037883a 	mov	sp,fp
811016c4:	dfc00117 	ldw	ra,4(sp)
811016c8:	df000017 	ldw	fp,0(sp)
811016cc:	dec00204 	addi	sp,sp,8
811016d0:	f800283a 	ret

811016d4 <disable_lvds_board>:

PUBLIC bool disable_lvds_board(void)
{
811016d4:	defffe04 	addi	sp,sp,-8
811016d8:	dfc00115 	stw	ra,4(sp)
811016dc:	df000015 	stw	fp,0(sp)
811016e0:	d839883a 	mov	fp,sp
  ctrl_io_lvds_drive(IO_OFF, PWDN_MASK);
811016e4:	01400104 	movi	r5,4
811016e8:	0009883a 	mov	r4,zero
811016ec:	11017c00 	call	811017c0 <ctrl_io_lvds_drive>
  return  TRUE;
811016f0:	00800044 	movi	r2,1
}
811016f4:	e037883a 	mov	sp,fp
811016f8:	dfc00117 	ldw	ra,4(sp)
811016fc:	df000017 	ldw	fp,0(sp)
81101700:	dec00204 	addi	sp,sp,8
81101704:	f800283a 	ret

81101708 <set_pre_emphasys>:

PUBLIC bool set_pre_emphasys(alt_u8 pem_level)
{
81101708:	defffd04 	addi	sp,sp,-12
8110170c:	dfc00215 	stw	ra,8(sp)
81101710:	df000115 	stw	fp,4(sp)
81101714:	df000104 	addi	fp,sp,4
81101718:	2005883a 	mov	r2,r4
8110171c:	e0bfff05 	stb	r2,-4(fp)
  switch (pem_level) {
81101720:	e0bfff03 	ldbu	r2,-4(fp)
81101724:	10c00060 	cmpeqi	r3,r2,1
81101728:	18000d1e 	bne	r3,zero,81101760 <set_pre_emphasys+0x58>
8110172c:	10c00088 	cmpgei	r3,r2,2
81101730:	1800021e 	bne	r3,zero,8110173c <set_pre_emphasys+0x34>
81101734:	10000626 	beq	r2,zero,81101750 <set_pre_emphasys+0x48>
      break;
    case PEM_HI:
      ctrl_io_lvds_drive(IO_ON, PEM1_MASK | PEM0_MASK);
      break;
    default:
      break;
81101738:	00001b06 	br	811017a8 <set_pre_emphasys+0xa0>
  return  TRUE;
}

PUBLIC bool set_pre_emphasys(alt_u8 pem_level)
{
  switch (pem_level) {
8110173c:	10c000a0 	cmpeqi	r3,r2,2
81101740:	18000e1e 	bne	r3,zero,8110177c <set_pre_emphasys+0x74>
81101744:	108000e0 	cmpeqi	r2,r2,3
81101748:	1000131e 	bne	r2,zero,81101798 <set_pre_emphasys+0x90>
      break;
    case PEM_HI:
      ctrl_io_lvds_drive(IO_ON, PEM1_MASK | PEM0_MASK);
      break;
    default:
      break;
8110174c:	00001606 	br	811017a8 <set_pre_emphasys+0xa0>

PUBLIC bool set_pre_emphasys(alt_u8 pem_level)
{
  switch (pem_level) {
    case PEM_OFF:
      ctrl_io_lvds_drive(IO_OFF, PEM1_MASK | PEM0_MASK);
81101750:	014000c4 	movi	r5,3
81101754:	0009883a 	mov	r4,zero
81101758:	11017c00 	call	811017c0 <ctrl_io_lvds_drive>
      break;
8110175c:	00001206 	br	811017a8 <set_pre_emphasys+0xa0>
    case PEM_LO:
      ctrl_io_lvds_drive(IO_OFF, PEM1_MASK);
81101760:	01400084 	movi	r5,2
81101764:	0009883a 	mov	r4,zero
81101768:	11017c00 	call	811017c0 <ctrl_io_lvds_drive>
      ctrl_io_lvds_drive(IO_ON,  PEM0_MASK);
8110176c:	01400044 	movi	r5,1
81101770:	01000044 	movi	r4,1
81101774:	11017c00 	call	811017c0 <ctrl_io_lvds_drive>
      break;
81101778:	00000b06 	br	811017a8 <set_pre_emphasys+0xa0>
    case PEM_MID:
      ctrl_io_lvds_drive(IO_OFF, PEM0_MASK);
8110177c:	01400044 	movi	r5,1
81101780:	0009883a 	mov	r4,zero
81101784:	11017c00 	call	811017c0 <ctrl_io_lvds_drive>
      ctrl_io_lvds_drive(IO_ON,  PEM1_MASK);
81101788:	01400084 	movi	r5,2
8110178c:	01000044 	movi	r4,1
81101790:	11017c00 	call	811017c0 <ctrl_io_lvds_drive>
      break;
81101794:	00000406 	br	811017a8 <set_pre_emphasys+0xa0>
    case PEM_HI:
      ctrl_io_lvds_drive(IO_ON, PEM1_MASK | PEM0_MASK);
81101798:	014000c4 	movi	r5,3
8110179c:	01000044 	movi	r4,1
811017a0:	11017c00 	call	811017c0 <ctrl_io_lvds_drive>
      break;
811017a4:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
811017a8:	00800044 	movi	r2,1
}
811017ac:	e037883a 	mov	sp,fp
811017b0:	dfc00117 	ldw	ra,4(sp)
811017b4:	df000017 	ldw	fp,0(sp)
811017b8:	dec00204 	addi	sp,sp,8
811017bc:	f800283a 	ret

811017c0 <ctrl_io_lvds_drive>:
 * @param [in] mask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
PRIVATE bool ctrl_io_lvds_drive(bool on_off, alt_u8 mask)
{
811017c0:	defffd04 	addi	sp,sp,-12
811017c4:	df000215 	stw	fp,8(sp)
811017c8:	df000204 	addi	fp,sp,8
811017cc:	e13ffe15 	stw	r4,-8(fp)
811017d0:	2805883a 	mov	r2,r5
811017d4:	e0bfff05 	stb	r2,-4(fp)
  if (on_off == IO_OFF) {
811017d8:	e0bffe17 	ldw	r2,-8(fp)
811017dc:	1000071e 	bne	r2,zero,811017fc <ctrl_io_lvds_drive+0x3c>
	 io_value &= (~mask);
811017e0:	e0bfff03 	ldbu	r2,-4(fp)
811017e4:	0084303a 	nor	r2,zero,r2
811017e8:	1007883a 	mov	r3,r2
811017ec:	d0a00003 	ldbu	r2,-32768(gp)
811017f0:	1884703a 	and	r2,r3,r2
811017f4:	d0a00005 	stb	r2,-32768(gp)
811017f8:	00000406 	br	8110180c <ctrl_io_lvds_drive+0x4c>
  }
  else {
	 io_value |= mask;
811017fc:	d0e00003 	ldbu	r3,-32768(gp)
81101800:	e0bfff03 	ldbu	r2,-4(fp)
81101804:	1884b03a 	or	r2,r3,r2
81101808:	d0a00005 	stb	r2,-32768(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(CTRL_IO_LVDS_ADDR_BASE, io_value);
8110180c:	d0a00003 	ldbu	r2,-32768(gp)
81101810:	10c03fcc 	andi	r3,r2,255
81101814:	00a00034 	movhi	r2,32768
81101818:	10822804 	addi	r2,r2,2208
8110181c:	10c00035 	stwio	r3,0(r2)
  return TRUE;
81101820:	00800044 	movi	r2,1
}
81101824:	e037883a 	mov	sp,fp
81101828:	df000017 	ldw	fp,0(sp)
8110182c:	dec00104 	addi	sp,sp,4
81101830:	f800283a 	ret

81101834 <fee_init_m1_dma>:
#include "fee_buffers.h"

alt_msgdma_dev *dma_m1_dev = NULL;
alt_msgdma_dev *dma_m2_dev = NULL;

bool fee_init_m1_dma(void) {
81101834:	defffc04 	addi	sp,sp,-16
81101838:	dfc00315 	stw	ra,12(sp)
8110183c:	df000215 	stw	fp,8(sp)
81101840:	df000204 	addi	fp,sp,8
	bool status = TRUE;
81101844:	00800044 	movi	r2,1
81101848:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 counter = 0;
8110184c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	dma_m1_dev = alt_msgdma_open((char *) FEE_DMA_M1_NAME);
81101850:	012044b4 	movhi	r4,33042
81101854:	2139be04 	addi	r4,r4,-6408
81101858:	111d4600 	call	8111d460 <alt_msgdma_open>
8110185c:	d0a02615 	stw	r2,-32616(gp)

	// check if the device was opened
	if (dma_m1_dev == NULL) {
81101860:	d0a02617 	ldw	r2,-32616(gp)
81101864:	1000021e 	bne	r2,zero,81101870 <fee_init_m1_dma+0x3c>
		// device not opened
		status = FALSE;
81101868:	e03ffe15 	stw	zero,-8(fp)
8110186c:	00001506 	br	811018c4 <fee_init_m1_dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m1_dev->csr_base,
81101870:	d0a02617 	ldw	r2,-32616(gp)
81101874:	10800317 	ldw	r2,12(r2)
81101878:	10800104 	addi	r2,r2,4
8110187c:	00c00084 	movi	r3,2
81101880:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m1_dev->csr_base)
81101884:	00000a06 	br	811018b0 <fee_init_m1_dma+0x7c>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81101888:	01000044 	movi	r4,1
8110188c:	111a2000 	call	8111a200 <usleep>
			counter++;
81101890:	e0bfff0b 	ldhu	r2,-4(fp)
81101894:	10800044 	addi	r2,r2,1
81101898:	e0bfff0d 	sth	r2,-4(fp)
			if (counter >= 5000) { //wait at most 5ms for the device to be reseted
8110189c:	e0bfff0b 	ldhu	r2,-4(fp)
811018a0:	1084e230 	cmpltui	r2,r2,5000
811018a4:	1000021e 	bne	r2,zero,811018b0 <fee_init_m1_dma+0x7c>
				status = FALSE;
811018a8:	e03ffe15 	stw	zero,-8(fp)
				break;
811018ac:	00000506 	br	811018c4 <fee_init_m1_dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m1_dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m1_dev->csr_base)
811018b0:	d0a02617 	ldw	r2,-32616(gp)
811018b4:	10800317 	ldw	r2,12(r2)
811018b8:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
811018bc:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m1_dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m1_dev->csr_base)
811018c0:	103ff11e 	bne	r2,zero,81101888 <__reset+0xfb0e1888>
				break;
			}
		}
	}

	return status;
811018c4:	e0bffe17 	ldw	r2,-8(fp)
}
811018c8:	e037883a 	mov	sp,fp
811018cc:	dfc00117 	ldw	ra,4(sp)
811018d0:	df000017 	ldw	fp,0(sp)
811018d4:	dec00204 	addi	sp,sp,8
811018d8:	f800283a 	ret

811018dc <fee_init_m2_dma>:

bool fee_init_m2_dma(void) {
811018dc:	defffc04 	addi	sp,sp,-16
811018e0:	dfc00315 	stw	ra,12(sp)
811018e4:	df000215 	stw	fp,8(sp)
811018e8:	df000204 	addi	fp,sp,8
	bool status = TRUE;
811018ec:	00800044 	movi	r2,1
811018f0:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 counter = 0;
811018f4:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	dma_m2_dev = alt_msgdma_open((char *) FEE_DMA_M2_NAME);
811018f8:	012044b4 	movhi	r4,33042
811018fc:	2139c304 	addi	r4,r4,-6388
81101900:	111d4600 	call	8111d460 <alt_msgdma_open>
81101904:	d0a02715 	stw	r2,-32612(gp)

	// check if the device was opened
	if (dma_m2_dev == NULL) {
81101908:	d0a02717 	ldw	r2,-32612(gp)
8110190c:	1000021e 	bne	r2,zero,81101918 <fee_init_m2_dma+0x3c>
		// device not opened
		status = FALSE;
81101910:	e03ffe15 	stw	zero,-8(fp)
81101914:	00001506 	br	8110196c <fee_init_m2_dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m2_dev->csr_base,
81101918:	d0a02717 	ldw	r2,-32612(gp)
8110191c:	10800317 	ldw	r2,12(r2)
81101920:	10800104 	addi	r2,r2,4
81101924:	00c00084 	movi	r3,2
81101928:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m2_dev->csr_base)
8110192c:	00000a06 	br	81101958 <fee_init_m2_dma+0x7c>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81101930:	01000044 	movi	r4,1
81101934:	111a2000 	call	8111a200 <usleep>
			counter++;
81101938:	e0bfff0b 	ldhu	r2,-4(fp)
8110193c:	10800044 	addi	r2,r2,1
81101940:	e0bfff0d 	sth	r2,-4(fp)
			if (counter >= 5000) { //wait at most 5ms for the device to be reseted
81101944:	e0bfff0b 	ldhu	r2,-4(fp)
81101948:	1084e230 	cmpltui	r2,r2,5000
8110194c:	1000021e 	bne	r2,zero,81101958 <fee_init_m2_dma+0x7c>
				status = FALSE;
81101950:	e03ffe15 	stw	zero,-8(fp)
				break;
81101954:	00000506 	br	8110196c <fee_init_m2_dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m2_dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m2_dev->csr_base)
81101958:	d0a02717 	ldw	r2,-32612(gp)
8110195c:	10800317 	ldw	r2,12(r2)
81101960:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81101964:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m2_dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m2_dev->csr_base)
81101968:	103ff11e 	bne	r2,zero,81101930 <__reset+0xfb0e1930>
				break;
			}
		}
	}

	return status;
8110196c:	e0bffe17 	ldw	r2,-8(fp)
}
81101970:	e037883a 	mov	sp,fp
81101974:	dfc00117 	ldw	ra,4(sp)
81101978:	df000017 	ldw	fp,0(sp)
8110197c:	dec00204 	addi	sp,sp,8
81101980:	f800283a 	ret

81101984 <fee_dma_m1_transfer>:

bool fee_dma_m1_transfer(alt_u32 *ddr_initial_address, alt_u16 size_in_blocks,
		alt_u8 buffer_side, alt_u8 channel_buffer_id) {
81101984:	deffe904 	addi	sp,sp,-92
81101988:	dfc01615 	stw	ra,88(sp)
8110198c:	df001515 	stw	fp,84(sp)
81101990:	dc001415 	stw	r16,80(sp)
81101994:	df001504 	addi	fp,sp,84
81101998:	e13ffb15 	stw	r4,-20(fp)
8110199c:	2809883a 	mov	r4,r5
811019a0:	3007883a 	mov	r3,r6
811019a4:	3805883a 	mov	r2,r7
811019a8:	e13ffc0d 	sth	r4,-16(fp)
811019ac:	e0fffd05 	stb	r3,-12(fp)
811019b0:	e0bffe05 	stb	r2,-8(fp)
811019b4:	defff004 	addi	sp,sp,-64
811019b8:	d8800904 	addi	r2,sp,36
811019bc:	108007c4 	addi	r2,r2,31
811019c0:	1004d17a 	srli	r2,r2,5
811019c4:	1020917a 	slli	r16,r2,5
	bool status = TRUE;
811019c8:	00800044 	movi	r2,1
811019cc:	e0bff415 	stw	r2,-48(fp)
	alt_u16 cnt = 0;
811019d0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor dma_extended_descriptor;

	alt_u32 dest_addr_low = 0;
811019d4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 dest_addr_high = 0;
811019d8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 src_addr_low = 0;
811019dc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 src_addr_high = 0;
811019e0:	e03ff915 	stw	zero,-28(fp)

	alt_u32 control_bits = 0x00000000;
811019e4:	e03ffa15 	stw	zero,-24(fp)

	switch (channel_buffer_id) {
811019e8:	e0bffe03 	ldbu	r2,-8(fp)
811019ec:	10c00268 	cmpgeui	r3,r2,9
811019f0:	1800a51e 	bne	r3,zero,81101c88 <fee_dma_m1_transfer+0x304>
811019f4:	100690ba 	slli	r3,r2,2
811019f8:	00a04434 	movhi	r2,33040
811019fc:	10868304 	addi	r2,r2,6668
81101a00:	1885883a 	add	r2,r3,r2
81101a04:	10800017 	ldw	r2,0(r2)
81101a08:	1000683a 	jmp	r2
81101a0c:	81101c88 	cmpgei	r4,r16,16498
81101a10:	81101a30 	cmpltui	r4,r16,16488
81101a14:	81101a74 	orhi	r4,r16,16489
81101a18:	81101ac0 	call	881101ac <__reset+0x20f01ac>
81101a1c:	81101b0c 	andi	r4,r16,16492
81101a20:	81101b58 	cmpnei	r4,r16,16493
81101a24:	81101ba4 	muli	r4,r16,16494
81101a28:	81101bf0 	cmpltui	r4,r16,16495
81101a2c:	81101c3c 	xorhi	r4,r16,16496
	case channel_a_buffer:
		switch (buffer_side) {
81101a30:	e0bffd03 	ldbu	r2,-12(fp)
81101a34:	10000326 	beq	r2,zero,81101a44 <fee_dma_m1_transfer+0xc0>
81101a38:	10800060 	cmpeqi	r2,r2,1
81101a3c:	1000051e 	bne	r2,zero,81101a54 <fee_dma_m1_transfer+0xd0>
81101a40:	00000906 	br	81101a68 <fee_dma_m1_transfer+0xe4>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_A_RIGHT_BUFFER_BASE_ADDR_LOW;
81101a44:	e03ff615 	stw	zero,-40(fp)
			dest_addr_high =
81101a48:	00800044 	movi	r2,1
81101a4c:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_A_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101a50:	00000706 	br	81101a70 <fee_dma_m1_transfer+0xec>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_A_LEFT_BUFFER_BASE_ADDR_LOW;
81101a54:	00800074 	movhi	r2,1
81101a58:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_A_LEFT_BUFFER_BASE_ADDR_HIGH;
81101a5c:	00800044 	movi	r2,1
81101a60:	e0bff715 	stw	r2,-36(fp)
			break;
81101a64:	00000206 	br	81101a70 <fee_dma_m1_transfer+0xec>
		default:
			status = FALSE;
81101a68:	e03ff415 	stw	zero,-48(fp)
			break;
81101a6c:	0001883a 	nop
		}
		break;
81101a70:	00008706 	br	81101c90 <fee_dma_m1_transfer+0x30c>
	case channel_b_buffer:
		switch (buffer_side) {
81101a74:	e0bffd03 	ldbu	r2,-12(fp)
81101a78:	10000326 	beq	r2,zero,81101a88 <fee_dma_m1_transfer+0x104>
81101a7c:	10800060 	cmpeqi	r2,r2,1
81101a80:	1000061e 	bne	r2,zero,81101a9c <fee_dma_m1_transfer+0x118>
81101a84:	00000b06 	br	81101ab4 <fee_dma_m1_transfer+0x130>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_B_RIGHT_BUFFER_BASE_ADDR_LOW;
81101a88:	00880004 	movi	r2,8192
81101a8c:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101a90:	00800044 	movi	r2,1
81101a94:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_B_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101a98:	00000806 	br	81101abc <fee_dma_m1_transfer+0x138>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_B_LEFT_BUFFER_BASE_ADDR_LOW;
81101a9c:	00800074 	movhi	r2,1
81101aa0:	10880004 	addi	r2,r2,8192
81101aa4:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_B_LEFT_BUFFER_BASE_ADDR_HIGH;
81101aa8:	00800044 	movi	r2,1
81101aac:	e0bff715 	stw	r2,-36(fp)
			break;
81101ab0:	00000206 	br	81101abc <fee_dma_m1_transfer+0x138>
		default:
			status = FALSE;
81101ab4:	e03ff415 	stw	zero,-48(fp)
			break;
81101ab8:	0001883a 	nop
		}
		break;
81101abc:	00007406 	br	81101c90 <fee_dma_m1_transfer+0x30c>
	case channel_c_buffer:
		switch (buffer_side) {
81101ac0:	e0bffd03 	ldbu	r2,-12(fp)
81101ac4:	10000326 	beq	r2,zero,81101ad4 <fee_dma_m1_transfer+0x150>
81101ac8:	10800060 	cmpeqi	r2,r2,1
81101acc:	1000061e 	bne	r2,zero,81101ae8 <fee_dma_m1_transfer+0x164>
81101ad0:	00000b06 	br	81101b00 <fee_dma_m1_transfer+0x17c>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_C_RIGHT_BUFFER_BASE_ADDR_LOW;
81101ad4:	00900004 	movi	r2,16384
81101ad8:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101adc:	00800044 	movi	r2,1
81101ae0:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_C_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101ae4:	00000806 	br	81101b08 <fee_dma_m1_transfer+0x184>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_C_LEFT_BUFFER_BASE_ADDR_LOW;
81101ae8:	00800074 	movhi	r2,1
81101aec:	10900004 	addi	r2,r2,16384
81101af0:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_C_LEFT_BUFFER_BASE_ADDR_HIGH;
81101af4:	00800044 	movi	r2,1
81101af8:	e0bff715 	stw	r2,-36(fp)
			break;
81101afc:	00000206 	br	81101b08 <fee_dma_m1_transfer+0x184>
		default:
			status = FALSE;
81101b00:	e03ff415 	stw	zero,-48(fp)
			break;
81101b04:	0001883a 	nop
		}
		break;
81101b08:	00006106 	br	81101c90 <fee_dma_m1_transfer+0x30c>
	case channel_d_buffer:
		switch (buffer_side) {
81101b0c:	e0bffd03 	ldbu	r2,-12(fp)
81101b10:	10000326 	beq	r2,zero,81101b20 <fee_dma_m1_transfer+0x19c>
81101b14:	10800060 	cmpeqi	r2,r2,1
81101b18:	1000061e 	bne	r2,zero,81101b34 <fee_dma_m1_transfer+0x1b0>
81101b1c:	00000b06 	br	81101b4c <fee_dma_m1_transfer+0x1c8>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_D_RIGHT_BUFFER_BASE_ADDR_LOW;
81101b20:	00980004 	movi	r2,24576
81101b24:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101b28:	00800044 	movi	r2,1
81101b2c:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_D_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101b30:	00000806 	br	81101b54 <fee_dma_m1_transfer+0x1d0>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_D_LEFT_BUFFER_BASE_ADDR_LOW;
81101b34:	00800074 	movhi	r2,1
81101b38:	10980004 	addi	r2,r2,24576
81101b3c:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_D_LEFT_BUFFER_BASE_ADDR_HIGH;
81101b40:	00800044 	movi	r2,1
81101b44:	e0bff715 	stw	r2,-36(fp)
			break;
81101b48:	00000206 	br	81101b54 <fee_dma_m1_transfer+0x1d0>
		default:
			status = FALSE;
81101b4c:	e03ff415 	stw	zero,-48(fp)
			break;
81101b50:	0001883a 	nop
		}
		break;
81101b54:	00004e06 	br	81101c90 <fee_dma_m1_transfer+0x30c>
	case channel_e_buffer:
		switch (buffer_side) {
81101b58:	e0bffd03 	ldbu	r2,-12(fp)
81101b5c:	10000326 	beq	r2,zero,81101b6c <fee_dma_m1_transfer+0x1e8>
81101b60:	10800060 	cmpeqi	r2,r2,1
81101b64:	1000061e 	bne	r2,zero,81101b80 <fee_dma_m1_transfer+0x1fc>
81101b68:	00000b06 	br	81101b98 <fee_dma_m1_transfer+0x214>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_E_RIGHT_BUFFER_BASE_ADDR_LOW;
81101b6c:	00a00014 	movui	r2,32768
81101b70:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101b74:	00800044 	movi	r2,1
81101b78:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_E_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101b7c:	00000806 	br	81101ba0 <fee_dma_m1_transfer+0x21c>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_E_LEFT_BUFFER_BASE_ADDR_LOW;
81101b80:	008000b4 	movhi	r2,2
81101b84:	10a00004 	addi	r2,r2,-32768
81101b88:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_E_LEFT_BUFFER_BASE_ADDR_HIGH;
81101b8c:	00800044 	movi	r2,1
81101b90:	e0bff715 	stw	r2,-36(fp)
			break;
81101b94:	00000206 	br	81101ba0 <fee_dma_m1_transfer+0x21c>
		default:
			status = FALSE;
81101b98:	e03ff415 	stw	zero,-48(fp)
			break;
81101b9c:	0001883a 	nop
		}
		break;
81101ba0:	00003b06 	br	81101c90 <fee_dma_m1_transfer+0x30c>
	case channel_f_buffer:
		switch (buffer_side) {
81101ba4:	e0bffd03 	ldbu	r2,-12(fp)
81101ba8:	10000326 	beq	r2,zero,81101bb8 <fee_dma_m1_transfer+0x234>
81101bac:	10800060 	cmpeqi	r2,r2,1
81101bb0:	1000061e 	bne	r2,zero,81101bcc <fee_dma_m1_transfer+0x248>
81101bb4:	00000b06 	br	81101be4 <fee_dma_m1_transfer+0x260>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_F_RIGHT_BUFFER_BASE_ADDR_LOW;
81101bb8:	00a80014 	movui	r2,40960
81101bbc:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101bc0:	00800044 	movi	r2,1
81101bc4:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_F_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101bc8:	00000806 	br	81101bec <fee_dma_m1_transfer+0x268>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_F_LEFT_BUFFER_BASE_ADDR_LOW;
81101bcc:	008000b4 	movhi	r2,2
81101bd0:	10a80004 	addi	r2,r2,-24576
81101bd4:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_F_LEFT_BUFFER_BASE_ADDR_HIGH;
81101bd8:	00800044 	movi	r2,1
81101bdc:	e0bff715 	stw	r2,-36(fp)
			break;
81101be0:	00000206 	br	81101bec <fee_dma_m1_transfer+0x268>
		default:
			status = FALSE;
81101be4:	e03ff415 	stw	zero,-48(fp)
			break;
81101be8:	0001883a 	nop
		}
		break;
81101bec:	00002806 	br	81101c90 <fee_dma_m1_transfer+0x30c>
	case channel_g_buffer:
		switch (buffer_side) {
81101bf0:	e0bffd03 	ldbu	r2,-12(fp)
81101bf4:	10000326 	beq	r2,zero,81101c04 <fee_dma_m1_transfer+0x280>
81101bf8:	10800060 	cmpeqi	r2,r2,1
81101bfc:	1000061e 	bne	r2,zero,81101c18 <fee_dma_m1_transfer+0x294>
81101c00:	00000b06 	br	81101c30 <fee_dma_m1_transfer+0x2ac>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_G_RIGHT_BUFFER_BASE_ADDR_LOW;
81101c04:	00b00014 	movui	r2,49152
81101c08:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101c0c:	00800044 	movi	r2,1
81101c10:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_G_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101c14:	00000806 	br	81101c38 <fee_dma_m1_transfer+0x2b4>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_G_LEFT_BUFFER_BASE_ADDR_LOW;
81101c18:	008000b4 	movhi	r2,2
81101c1c:	10b00004 	addi	r2,r2,-16384
81101c20:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_G_LEFT_BUFFER_BASE_ADDR_HIGH;
81101c24:	00800044 	movi	r2,1
81101c28:	e0bff715 	stw	r2,-36(fp)
			break;
81101c2c:	00000206 	br	81101c38 <fee_dma_m1_transfer+0x2b4>
		default:
			status = FALSE;
81101c30:	e03ff415 	stw	zero,-48(fp)
			break;
81101c34:	0001883a 	nop
		}
		break;
81101c38:	00001506 	br	81101c90 <fee_dma_m1_transfer+0x30c>
	case channel_h_buffer:
		switch (buffer_side) {
81101c3c:	e0bffd03 	ldbu	r2,-12(fp)
81101c40:	10000326 	beq	r2,zero,81101c50 <fee_dma_m1_transfer+0x2cc>
81101c44:	10800060 	cmpeqi	r2,r2,1
81101c48:	1000061e 	bne	r2,zero,81101c64 <fee_dma_m1_transfer+0x2e0>
81101c4c:	00000b06 	br	81101c7c <fee_dma_m1_transfer+0x2f8>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_H_RIGHT_BUFFER_BASE_ADDR_LOW;
81101c50:	00b80014 	movui	r2,57344
81101c54:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101c58:	00800044 	movi	r2,1
81101c5c:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_H_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101c60:	00000806 	br	81101c84 <fee_dma_m1_transfer+0x300>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_H_LEFT_BUFFER_BASE_ADDR_LOW;
81101c64:	008000b4 	movhi	r2,2
81101c68:	10b80004 	addi	r2,r2,-8192
81101c6c:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_H_LEFT_BUFFER_BASE_ADDR_HIGH;
81101c70:	00800044 	movi	r2,1
81101c74:	e0bff715 	stw	r2,-36(fp)
			break;
81101c78:	00000206 	br	81101c84 <fee_dma_m1_transfer+0x300>
		default:
			status = FALSE;
81101c7c:	e03ff415 	stw	zero,-48(fp)
			break;
81101c80:	0001883a 	nop
		}
		break;
81101c84:	00000206 	br	81101c90 <fee_dma_m1_transfer+0x30c>
	default:
		status = FALSE;
81101c88:	e03ff415 	stw	zero,-48(fp)
		break;
81101c8c:	0001883a 	nop
	}

	src_addr_low = (alt_u32) FEE_M1_BASE_ADDR_LOW
81101c90:	e0bffb17 	ldw	r2,-20(fp)
81101c94:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) ddr_initial_address;
	src_addr_high = (alt_u32) FEE_M1_BASE_ADDR_HIGH;
81101c98:	e03ff915 	stw	zero,-28(fp)

	if (status) {
81101c9c:	e0bff417 	ldw	r2,-48(fp)
81101ca0:	10003426 	beq	r2,zero,81101d74 <fee_dma_m1_transfer+0x3f0>
		if (dma_m1_dev == NULL) {
81101ca4:	d0a02617 	ldw	r2,-32616(gp)
81101ca8:	1000021e 	bne	r2,zero,81101cb4 <fee_dma_m1_transfer+0x330>
			status = FALSE;
81101cac:	e03ff415 	stw	zero,-48(fp)
81101cb0:	00003006 	br	81101d74 <fee_dma_m1_transfer+0x3f0>
		} else {
			for (cnt = 0; cnt < size_in_blocks; cnt++) {
81101cb4:	e03ff50d 	sth	zero,-44(fp)
81101cb8:	00002b06 	br	81101d68 <fee_dma_m1_transfer+0x3e4>
				if (msgdma_construct_extended_mm_to_mm_descriptor(dma_m1_dev,
81101cbc:	d2202617 	ldw	r8,-32616(gp)
81101cc0:	e17ff817 	ldw	r5,-32(fp)
81101cc4:	e1bff617 	ldw	r6,-40(fp)
81101cc8:	e0bff917 	ldw	r2,-28(fp)
81101ccc:	e0fff717 	ldw	r3,-36(fp)
81101cd0:	01000044 	movi	r4,1
81101cd4:	d9000815 	stw	r4,32(sp)
81101cd8:	01000044 	movi	r4,1
81101cdc:	d9000715 	stw	r4,28(sp)
81101ce0:	01000044 	movi	r4,1
81101ce4:	d9000615 	stw	r4,24(sp)
81101ce8:	01000044 	movi	r4,1
81101cec:	d9000515 	stw	r4,20(sp)
81101cf0:	01000044 	movi	r4,1
81101cf4:	d9000415 	stw	r4,16(sp)
81101cf8:	d8c00315 	stw	r3,12(sp)
81101cfc:	d8800215 	stw	r2,8(sp)
81101d00:	e0bffa17 	ldw	r2,-24(fp)
81101d04:	d8800115 	stw	r2,4(sp)
81101d08:	00802204 	movi	r2,136
81101d0c:	d8800015 	stw	r2,0(sp)
81101d10:	300f883a 	mov	r7,r6
81101d14:	280d883a 	mov	r6,r5
81101d18:	800b883a 	mov	r5,r16
81101d1c:	4009883a 	mov	r4,r8
81101d20:	110320c0 	call	8110320c <msgdma_construct_extended_mm_to_mm_descriptor>
81101d24:	10000226 	beq	r2,zero,81101d30 <fee_dma_m1_transfer+0x3ac>
						&dma_extended_descriptor, (alt_u32 *) src_addr_low,
						(alt_u32 *) dest_addr_low,
						FEE_PIXEL_BLOCK_SIZE_BYTES, control_bits,
						(alt_u32 *) src_addr_high, (alt_u32 *) dest_addr_high,
						1, 1, 1, 1, 1)) {
					status = FALSE;
81101d28:	e03ff415 	stw	zero,-48(fp)
					break;
81101d2c:	00001106 	br	81101d74 <fee_dma_m1_transfer+0x3f0>
				} else {
					if (msgdma_extended_descriptor_sync_transfer(dma_m1_dev,
81101d30:	d0a02617 	ldw	r2,-32616(gp)
81101d34:	800b883a 	mov	r5,r16
81101d38:	1009883a 	mov	r4,r2
81101d3c:	11033000 	call	81103300 <msgdma_extended_descriptor_sync_transfer>
81101d40:	10000226 	beq	r2,zero,81101d4c <fee_dma_m1_transfer+0x3c8>
							&dma_extended_descriptor)) {
						status = FALSE;
81101d44:	e03ff415 	stw	zero,-48(fp)
						break;
81101d48:	00000a06 	br	81101d74 <fee_dma_m1_transfer+0x3f0>
					}
					src_addr_low += (alt_u32) FEE_PIXEL_BLOCK_SIZE_BYTES;
81101d4c:	e0bff817 	ldw	r2,-32(fp)
81101d50:	10802204 	addi	r2,r2,136
81101d54:	e0bff815 	stw	r2,-32(fp)
					src_addr_high = (alt_u32) FEE_M1_BASE_ADDR_HIGH;
81101d58:	e03ff915 	stw	zero,-28(fp)

	if (status) {
		if (dma_m1_dev == NULL) {
			status = FALSE;
		} else {
			for (cnt = 0; cnt < size_in_blocks; cnt++) {
81101d5c:	e0bff50b 	ldhu	r2,-44(fp)
81101d60:	10800044 	addi	r2,r2,1
81101d64:	e0bff50d 	sth	r2,-44(fp)
81101d68:	e0fff50b 	ldhu	r3,-44(fp)
81101d6c:	e0bffc0b 	ldhu	r2,-16(fp)
81101d70:	18bfd236 	bltu	r3,r2,81101cbc <__reset+0xfb0e1cbc>
					src_addr_high = (alt_u32) FEE_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return status;
81101d74:	e0bff417 	ldw	r2,-48(fp)
}
81101d78:	e6ffff04 	addi	sp,fp,-4
81101d7c:	dfc00217 	ldw	ra,8(sp)
81101d80:	df000117 	ldw	fp,4(sp)
81101d84:	dc000017 	ldw	r16,0(sp)
81101d88:	dec00304 	addi	sp,sp,12
81101d8c:	f800283a 	ret

81101d90 <fee_dma_m2_transfer>:

bool fee_dma_m2_transfer(alt_u32 *ddr_initial_address, alt_u16 size_in_blocks,
		alt_u8 buffer_side, alt_u8 channel_buffer_id) {
81101d90:	deffe904 	addi	sp,sp,-92
81101d94:	dfc01615 	stw	ra,88(sp)
81101d98:	df001515 	stw	fp,84(sp)
81101d9c:	dc001415 	stw	r16,80(sp)
81101da0:	df001504 	addi	fp,sp,84
81101da4:	e13ffb15 	stw	r4,-20(fp)
81101da8:	2809883a 	mov	r4,r5
81101dac:	3007883a 	mov	r3,r6
81101db0:	3805883a 	mov	r2,r7
81101db4:	e13ffc0d 	sth	r4,-16(fp)
81101db8:	e0fffd05 	stb	r3,-12(fp)
81101dbc:	e0bffe05 	stb	r2,-8(fp)
81101dc0:	defff004 	addi	sp,sp,-64
81101dc4:	d8800904 	addi	r2,sp,36
81101dc8:	108007c4 	addi	r2,r2,31
81101dcc:	1004d17a 	srli	r2,r2,5
81101dd0:	1020917a 	slli	r16,r2,5
	bool status = TRUE;
81101dd4:	00800044 	movi	r2,1
81101dd8:	e0bff415 	stw	r2,-48(fp)
	alt_u16 cnt = 0;
81101ddc:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor dma_extended_descriptor;

	alt_u32 dest_addr_low = 0;
81101de0:	e03ff615 	stw	zero,-40(fp)
	alt_u32 dest_addr_high = 0;
81101de4:	e03ff715 	stw	zero,-36(fp)

	alt_u32 src_addr_low = 0;
81101de8:	e03ff815 	stw	zero,-32(fp)
	alt_u32 src_addr_high = 0;
81101dec:	e03ff915 	stw	zero,-28(fp)

	alt_u32 control_bits = 0x00000000;
81101df0:	e03ffa15 	stw	zero,-24(fp)

	switch (channel_buffer_id) {
81101df4:	e0bffe03 	ldbu	r2,-8(fp)
81101df8:	10c00268 	cmpgeui	r3,r2,9
81101dfc:	1800a51e 	bne	r3,zero,81102094 <fee_dma_m2_transfer+0x304>
81101e00:	100690ba 	slli	r3,r2,2
81101e04:	00a04434 	movhi	r2,33040
81101e08:	10878604 	addi	r2,r2,7704
81101e0c:	1885883a 	add	r2,r3,r2
81101e10:	10800017 	ldw	r2,0(r2)
81101e14:	1000683a 	jmp	r2
81101e18:	81102094 	ori	r4,r16,16514
81101e1c:	81101e3c 	xorhi	r4,r16,16504
81101e20:	81101e80 	call	881101e8 <__reset+0x20f01e8>
81101e24:	81101ecc 	andi	r4,r16,16507
81101e28:	81101f18 	cmpnei	r4,r16,16508
81101e2c:	81101f64 	muli	r4,r16,16509
81101e30:	81101fb0 	cmpltui	r4,r16,16510
81101e34:	81101ffc 	xorhi	r4,r16,16511
81101e38:	81102048 	cmpgei	r4,r16,16513
	case channel_a_buffer:
		switch (buffer_side) {
81101e3c:	e0bffd03 	ldbu	r2,-12(fp)
81101e40:	10000326 	beq	r2,zero,81101e50 <fee_dma_m2_transfer+0xc0>
81101e44:	10800060 	cmpeqi	r2,r2,1
81101e48:	1000051e 	bne	r2,zero,81101e60 <fee_dma_m2_transfer+0xd0>
81101e4c:	00000906 	br	81101e74 <fee_dma_m2_transfer+0xe4>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_A_RIGHT_BUFFER_BASE_ADDR_LOW;
81101e50:	e03ff615 	stw	zero,-40(fp)
			dest_addr_high =
81101e54:	00800044 	movi	r2,1
81101e58:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_A_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101e5c:	00000706 	br	81101e7c <fee_dma_m2_transfer+0xec>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_A_LEFT_BUFFER_BASE_ADDR_LOW;
81101e60:	00800074 	movhi	r2,1
81101e64:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_A_LEFT_BUFFER_BASE_ADDR_HIGH;
81101e68:	00800044 	movi	r2,1
81101e6c:	e0bff715 	stw	r2,-36(fp)
			break;
81101e70:	00000206 	br	81101e7c <fee_dma_m2_transfer+0xec>
		default:
			status = FALSE;
81101e74:	e03ff415 	stw	zero,-48(fp)
			break;
81101e78:	0001883a 	nop
		}
		break;
81101e7c:	00008706 	br	8110209c <fee_dma_m2_transfer+0x30c>
	case channel_b_buffer:
		switch (buffer_side) {
81101e80:	e0bffd03 	ldbu	r2,-12(fp)
81101e84:	10000326 	beq	r2,zero,81101e94 <fee_dma_m2_transfer+0x104>
81101e88:	10800060 	cmpeqi	r2,r2,1
81101e8c:	1000061e 	bne	r2,zero,81101ea8 <fee_dma_m2_transfer+0x118>
81101e90:	00000b06 	br	81101ec0 <fee_dma_m2_transfer+0x130>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_B_RIGHT_BUFFER_BASE_ADDR_LOW;
81101e94:	00880004 	movi	r2,8192
81101e98:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101e9c:	00800044 	movi	r2,1
81101ea0:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_B_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101ea4:	00000806 	br	81101ec8 <fee_dma_m2_transfer+0x138>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_B_LEFT_BUFFER_BASE_ADDR_LOW;
81101ea8:	00800074 	movhi	r2,1
81101eac:	10880004 	addi	r2,r2,8192
81101eb0:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_B_LEFT_BUFFER_BASE_ADDR_HIGH;
81101eb4:	00800044 	movi	r2,1
81101eb8:	e0bff715 	stw	r2,-36(fp)
			break;
81101ebc:	00000206 	br	81101ec8 <fee_dma_m2_transfer+0x138>
		default:
			status = FALSE;
81101ec0:	e03ff415 	stw	zero,-48(fp)
			break;
81101ec4:	0001883a 	nop
		}
		break;
81101ec8:	00007406 	br	8110209c <fee_dma_m2_transfer+0x30c>
	case channel_c_buffer:
		switch (buffer_side) {
81101ecc:	e0bffd03 	ldbu	r2,-12(fp)
81101ed0:	10000326 	beq	r2,zero,81101ee0 <fee_dma_m2_transfer+0x150>
81101ed4:	10800060 	cmpeqi	r2,r2,1
81101ed8:	1000061e 	bne	r2,zero,81101ef4 <fee_dma_m2_transfer+0x164>
81101edc:	00000b06 	br	81101f0c <fee_dma_m2_transfer+0x17c>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_C_RIGHT_BUFFER_BASE_ADDR_LOW;
81101ee0:	00900004 	movi	r2,16384
81101ee4:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101ee8:	00800044 	movi	r2,1
81101eec:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_C_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101ef0:	00000806 	br	81101f14 <fee_dma_m2_transfer+0x184>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_C_LEFT_BUFFER_BASE_ADDR_LOW;
81101ef4:	00800074 	movhi	r2,1
81101ef8:	10900004 	addi	r2,r2,16384
81101efc:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_C_LEFT_BUFFER_BASE_ADDR_HIGH;
81101f00:	00800044 	movi	r2,1
81101f04:	e0bff715 	stw	r2,-36(fp)
			break;
81101f08:	00000206 	br	81101f14 <fee_dma_m2_transfer+0x184>
		default:
			status = FALSE;
81101f0c:	e03ff415 	stw	zero,-48(fp)
			break;
81101f10:	0001883a 	nop
		}
		break;
81101f14:	00006106 	br	8110209c <fee_dma_m2_transfer+0x30c>
	case channel_d_buffer:
		switch (buffer_side) {
81101f18:	e0bffd03 	ldbu	r2,-12(fp)
81101f1c:	10000326 	beq	r2,zero,81101f2c <fee_dma_m2_transfer+0x19c>
81101f20:	10800060 	cmpeqi	r2,r2,1
81101f24:	1000061e 	bne	r2,zero,81101f40 <fee_dma_m2_transfer+0x1b0>
81101f28:	00000b06 	br	81101f58 <fee_dma_m2_transfer+0x1c8>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_D_RIGHT_BUFFER_BASE_ADDR_LOW;
81101f2c:	00980004 	movi	r2,24576
81101f30:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101f34:	00800044 	movi	r2,1
81101f38:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_D_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101f3c:	00000806 	br	81101f60 <fee_dma_m2_transfer+0x1d0>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_D_LEFT_BUFFER_BASE_ADDR_LOW;
81101f40:	00800074 	movhi	r2,1
81101f44:	10980004 	addi	r2,r2,24576
81101f48:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_D_LEFT_BUFFER_BASE_ADDR_HIGH;
81101f4c:	00800044 	movi	r2,1
81101f50:	e0bff715 	stw	r2,-36(fp)
			break;
81101f54:	00000206 	br	81101f60 <fee_dma_m2_transfer+0x1d0>
		default:
			status = FALSE;
81101f58:	e03ff415 	stw	zero,-48(fp)
			break;
81101f5c:	0001883a 	nop
		}
		break;
81101f60:	00004e06 	br	8110209c <fee_dma_m2_transfer+0x30c>
	case channel_e_buffer:
		switch (buffer_side) {
81101f64:	e0bffd03 	ldbu	r2,-12(fp)
81101f68:	10000326 	beq	r2,zero,81101f78 <fee_dma_m2_transfer+0x1e8>
81101f6c:	10800060 	cmpeqi	r2,r2,1
81101f70:	1000061e 	bne	r2,zero,81101f8c <fee_dma_m2_transfer+0x1fc>
81101f74:	00000b06 	br	81101fa4 <fee_dma_m2_transfer+0x214>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_E_RIGHT_BUFFER_BASE_ADDR_LOW;
81101f78:	00a00014 	movui	r2,32768
81101f7c:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101f80:	00800044 	movi	r2,1
81101f84:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_E_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101f88:	00000806 	br	81101fac <fee_dma_m2_transfer+0x21c>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_E_LEFT_BUFFER_BASE_ADDR_LOW;
81101f8c:	008000b4 	movhi	r2,2
81101f90:	10a00004 	addi	r2,r2,-32768
81101f94:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_E_LEFT_BUFFER_BASE_ADDR_HIGH;
81101f98:	00800044 	movi	r2,1
81101f9c:	e0bff715 	stw	r2,-36(fp)
			break;
81101fa0:	00000206 	br	81101fac <fee_dma_m2_transfer+0x21c>
		default:
			status = FALSE;
81101fa4:	e03ff415 	stw	zero,-48(fp)
			break;
81101fa8:	0001883a 	nop
		}
		break;
81101fac:	00003b06 	br	8110209c <fee_dma_m2_transfer+0x30c>
	case channel_f_buffer:
		switch (buffer_side) {
81101fb0:	e0bffd03 	ldbu	r2,-12(fp)
81101fb4:	10000326 	beq	r2,zero,81101fc4 <fee_dma_m2_transfer+0x234>
81101fb8:	10800060 	cmpeqi	r2,r2,1
81101fbc:	1000061e 	bne	r2,zero,81101fd8 <fee_dma_m2_transfer+0x248>
81101fc0:	00000b06 	br	81101ff0 <fee_dma_m2_transfer+0x260>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_F_RIGHT_BUFFER_BASE_ADDR_LOW;
81101fc4:	00a80014 	movui	r2,40960
81101fc8:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101fcc:	00800044 	movi	r2,1
81101fd0:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_F_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101fd4:	00000806 	br	81101ff8 <fee_dma_m2_transfer+0x268>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_F_LEFT_BUFFER_BASE_ADDR_LOW;
81101fd8:	008000b4 	movhi	r2,2
81101fdc:	10a80004 	addi	r2,r2,-24576
81101fe0:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_F_LEFT_BUFFER_BASE_ADDR_HIGH;
81101fe4:	00800044 	movi	r2,1
81101fe8:	e0bff715 	stw	r2,-36(fp)
			break;
81101fec:	00000206 	br	81101ff8 <fee_dma_m2_transfer+0x268>
		default:
			status = FALSE;
81101ff0:	e03ff415 	stw	zero,-48(fp)
			break;
81101ff4:	0001883a 	nop
		}
		break;
81101ff8:	00002806 	br	8110209c <fee_dma_m2_transfer+0x30c>
	case channel_g_buffer:
		switch (buffer_side) {
81101ffc:	e0bffd03 	ldbu	r2,-12(fp)
81102000:	10000326 	beq	r2,zero,81102010 <fee_dma_m2_transfer+0x280>
81102004:	10800060 	cmpeqi	r2,r2,1
81102008:	1000061e 	bne	r2,zero,81102024 <fee_dma_m2_transfer+0x294>
8110200c:	00000b06 	br	8110203c <fee_dma_m2_transfer+0x2ac>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_G_RIGHT_BUFFER_BASE_ADDR_LOW;
81102010:	00b00014 	movui	r2,49152
81102014:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81102018:	00800044 	movi	r2,1
8110201c:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_G_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81102020:	00000806 	br	81102044 <fee_dma_m2_transfer+0x2b4>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_G_LEFT_BUFFER_BASE_ADDR_LOW;
81102024:	008000b4 	movhi	r2,2
81102028:	10b00004 	addi	r2,r2,-16384
8110202c:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_G_LEFT_BUFFER_BASE_ADDR_HIGH;
81102030:	00800044 	movi	r2,1
81102034:	e0bff715 	stw	r2,-36(fp)
			break;
81102038:	00000206 	br	81102044 <fee_dma_m2_transfer+0x2b4>
		default:
			status = FALSE;
8110203c:	e03ff415 	stw	zero,-48(fp)
			break;
81102040:	0001883a 	nop
		}
		break;
81102044:	00001506 	br	8110209c <fee_dma_m2_transfer+0x30c>
	case channel_h_buffer:
		switch (buffer_side) {
81102048:	e0bffd03 	ldbu	r2,-12(fp)
8110204c:	10000326 	beq	r2,zero,8110205c <fee_dma_m2_transfer+0x2cc>
81102050:	10800060 	cmpeqi	r2,r2,1
81102054:	1000061e 	bne	r2,zero,81102070 <fee_dma_m2_transfer+0x2e0>
81102058:	00000b06 	br	81102088 <fee_dma_m2_transfer+0x2f8>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_H_RIGHT_BUFFER_BASE_ADDR_LOW;
8110205c:	00b80014 	movui	r2,57344
81102060:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81102064:	00800044 	movi	r2,1
81102068:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_H_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
8110206c:	00000806 	br	81102090 <fee_dma_m2_transfer+0x300>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_H_LEFT_BUFFER_BASE_ADDR_LOW;
81102070:	008000b4 	movhi	r2,2
81102074:	10b80004 	addi	r2,r2,-8192
81102078:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_H_LEFT_BUFFER_BASE_ADDR_HIGH;
8110207c:	00800044 	movi	r2,1
81102080:	e0bff715 	stw	r2,-36(fp)
			break;
81102084:	00000206 	br	81102090 <fee_dma_m2_transfer+0x300>
		default:
			status = FALSE;
81102088:	e03ff415 	stw	zero,-48(fp)
			break;
8110208c:	0001883a 	nop
		}
		break;
81102090:	00000206 	br	8110209c <fee_dma_m2_transfer+0x30c>
	default:
		status = FALSE;
81102094:	e03ff415 	stw	zero,-48(fp)
		break;
81102098:	0001883a 	nop
	}

	src_addr_low = (alt_u32) FEE_M2_BASE_ADDR_LOW
			+ (alt_u32) ddr_initial_address;
8110209c:	e0fffb17 	ldw	r3,-20(fp)
	default:
		status = FALSE;
		break;
	}

	src_addr_low = (alt_u32) FEE_M2_BASE_ADDR_LOW
811020a0:	00a00034 	movhi	r2,32768
811020a4:	1885883a 	add	r2,r3,r2
811020a8:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) ddr_initial_address;
	src_addr_high = (alt_u32) FEE_M2_BASE_ADDR_HIGH;
811020ac:	e03ff915 	stw	zero,-28(fp)

	if (status) {
811020b0:	e0bff417 	ldw	r2,-48(fp)
811020b4:	10003426 	beq	r2,zero,81102188 <fee_dma_m2_transfer+0x3f8>
		if (dma_m2_dev == NULL) {
811020b8:	d0a02717 	ldw	r2,-32612(gp)
811020bc:	1000021e 	bne	r2,zero,811020c8 <fee_dma_m2_transfer+0x338>
			status = FALSE;
811020c0:	e03ff415 	stw	zero,-48(fp)
811020c4:	00003006 	br	81102188 <fee_dma_m2_transfer+0x3f8>
		} else {
			for (cnt = 0; cnt < size_in_blocks; cnt++) {
811020c8:	e03ff50d 	sth	zero,-44(fp)
811020cc:	00002b06 	br	8110217c <fee_dma_m2_transfer+0x3ec>
				if (msgdma_construct_extended_mm_to_mm_descriptor(dma_m2_dev,
811020d0:	d2202717 	ldw	r8,-32612(gp)
811020d4:	e17ff817 	ldw	r5,-32(fp)
811020d8:	e1bff617 	ldw	r6,-40(fp)
811020dc:	e0bff917 	ldw	r2,-28(fp)
811020e0:	e0fff717 	ldw	r3,-36(fp)
811020e4:	01000044 	movi	r4,1
811020e8:	d9000815 	stw	r4,32(sp)
811020ec:	01000044 	movi	r4,1
811020f0:	d9000715 	stw	r4,28(sp)
811020f4:	01000044 	movi	r4,1
811020f8:	d9000615 	stw	r4,24(sp)
811020fc:	01000044 	movi	r4,1
81102100:	d9000515 	stw	r4,20(sp)
81102104:	01000044 	movi	r4,1
81102108:	d9000415 	stw	r4,16(sp)
8110210c:	d8c00315 	stw	r3,12(sp)
81102110:	d8800215 	stw	r2,8(sp)
81102114:	e0bffa17 	ldw	r2,-24(fp)
81102118:	d8800115 	stw	r2,4(sp)
8110211c:	00802204 	movi	r2,136
81102120:	d8800015 	stw	r2,0(sp)
81102124:	300f883a 	mov	r7,r6
81102128:	280d883a 	mov	r6,r5
8110212c:	800b883a 	mov	r5,r16
81102130:	4009883a 	mov	r4,r8
81102134:	110320c0 	call	8110320c <msgdma_construct_extended_mm_to_mm_descriptor>
81102138:	10000226 	beq	r2,zero,81102144 <fee_dma_m2_transfer+0x3b4>
						&dma_extended_descriptor, (alt_u32 *) src_addr_low,
						(alt_u32 *) dest_addr_low,
						FEE_PIXEL_BLOCK_SIZE_BYTES, control_bits,
						(alt_u32 *) src_addr_high, (alt_u32 *) dest_addr_high,
						1, 1, 1, 1, 1)) {
					status = FALSE;
8110213c:	e03ff415 	stw	zero,-48(fp)
					break;
81102140:	00001106 	br	81102188 <fee_dma_m2_transfer+0x3f8>
				} else {
					if (msgdma_extended_descriptor_sync_transfer(dma_m2_dev,
81102144:	d0a02717 	ldw	r2,-32612(gp)
81102148:	800b883a 	mov	r5,r16
8110214c:	1009883a 	mov	r4,r2
81102150:	11033000 	call	81103300 <msgdma_extended_descriptor_sync_transfer>
81102154:	10000226 	beq	r2,zero,81102160 <fee_dma_m2_transfer+0x3d0>
							&dma_extended_descriptor)) {
						status = FALSE;
81102158:	e03ff415 	stw	zero,-48(fp)
						break;
8110215c:	00000a06 	br	81102188 <fee_dma_m2_transfer+0x3f8>
					}
					src_addr_low += (alt_u32) FEE_PIXEL_BLOCK_SIZE_BYTES;
81102160:	e0bff817 	ldw	r2,-32(fp)
81102164:	10802204 	addi	r2,r2,136
81102168:	e0bff815 	stw	r2,-32(fp)
					src_addr_high = (alt_u32) FEE_M2_BASE_ADDR_HIGH;
8110216c:	e03ff915 	stw	zero,-28(fp)

	if (status) {
		if (dma_m2_dev == NULL) {
			status = FALSE;
		} else {
			for (cnt = 0; cnt < size_in_blocks; cnt++) {
81102170:	e0bff50b 	ldhu	r2,-44(fp)
81102174:	10800044 	addi	r2,r2,1
81102178:	e0bff50d 	sth	r2,-44(fp)
8110217c:	e0fff50b 	ldhu	r3,-44(fp)
81102180:	e0bffc0b 	ldhu	r2,-16(fp)
81102184:	18bfd236 	bltu	r3,r2,811020d0 <__reset+0xfb0e20d0>
					src_addr_high = (alt_u32) FEE_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return status;
81102188:	e0bff417 	ldw	r2,-48(fp)
	return status;
}
8110218c:	e6ffff04 	addi	sp,fp,-4
81102190:	dfc00217 	ldw	ra,8(sp)
81102194:	df000117 	ldw	fp,4(sp)
81102198:	dc000017 	ldw	r16,0(sp)
8110219c:	dec00304 	addi	sp,sp,12
811021a0:	f800283a 	ret

811021a4 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
811021a4:	defffa04 	addi	sp,sp,-24
811021a8:	dfc00515 	stw	ra,20(sp)
811021ac:	df000415 	stw	fp,16(sp)
811021b0:	df000404 	addi	fp,sp,16
811021b4:	e13ffd15 	stw	r4,-12(fp)
811021b8:	e17ffe15 	stw	r5,-8(fp)
811021bc:	3005883a 	mov	r2,r6
811021c0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811021c4:	00800044 	movi	r2,1
811021c8:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811021cc:	e17ffe17 	ldw	r5,-8(fp)
811021d0:	e13ffd17 	ldw	r4,-12(fp)
811021d4:	11025540 	call	81102554 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811021d8:	e0bfff03 	ldbu	r2,-4(fp)
811021dc:	10803fcc 	andi	r2,r2,255
811021e0:	100d883a 	mov	r6,r2
811021e4:	e17ffe17 	ldw	r5,-8(fp)
811021e8:	e13ffd17 	ldw	r4,-12(fp)
811021ec:	11026580 	call	81102658 <i2c_write>
811021f0:	1000011e 	bne	r2,zero,811021f8 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
811021f4:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811021f8:	e17ffe17 	ldw	r5,-8(fp)
811021fc:	e13ffd17 	ldw	r4,-12(fp)
81102200:	11025e00 	call	811025e0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81102204:	0106d604 	movi	r4,7000
81102208:	111a2000 	call	8111a200 <usleep>
    
    return bSuccess;
8110220c:	e0bffc17 	ldw	r2,-16(fp)

}
81102210:	e037883a 	mov	sp,fp
81102214:	dfc00117 	ldw	ra,4(sp)
81102218:	df000017 	ldw	fp,0(sp)
8110221c:	dec00204 	addi	sp,sp,8
81102220:	f800283a 	ret

81102224 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81102224:	defff804 	addi	sp,sp,-32
81102228:	dfc00715 	stw	ra,28(sp)
8110222c:	df000615 	stw	fp,24(sp)
81102230:	df000604 	addi	fp,sp,24
81102234:	e13ffb15 	stw	r4,-20(fp)
81102238:	e17ffc15 	stw	r5,-16(fp)
8110223c:	3009883a 	mov	r4,r6
81102240:	3807883a 	mov	r3,r7
81102244:	e0800217 	ldw	r2,8(fp)
81102248:	e13ffd05 	stb	r4,-12(fp)
8110224c:	e0fffe05 	stb	r3,-8(fp)
81102250:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81102254:	00800044 	movi	r2,1
81102258:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
8110225c:	e17ffc17 	ldw	r5,-16(fp)
81102260:	e13ffb17 	ldw	r4,-20(fp)
81102264:	11025540 	call	81102554 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81102268:	e0bffd03 	ldbu	r2,-12(fp)
8110226c:	10803fcc 	andi	r2,r2,255
81102270:	100d883a 	mov	r6,r2
81102274:	e17ffc17 	ldw	r5,-16(fp)
81102278:	e13ffb17 	ldw	r4,-20(fp)
8110227c:	11026580 	call	81102658 <i2c_write>
81102280:	1000011e 	bne	r2,zero,81102288 <I2C_Write+0x64>
        bSuccess = FALSE;
81102284:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81102288:	e0bffa17 	ldw	r2,-24(fp)
8110228c:	10000726 	beq	r2,zero,811022ac <I2C_Write+0x88>
81102290:	e0bffe03 	ldbu	r2,-8(fp)
81102294:	100d883a 	mov	r6,r2
81102298:	e17ffc17 	ldw	r5,-16(fp)
8110229c:	e13ffb17 	ldw	r4,-20(fp)
811022a0:	11026580 	call	81102658 <i2c_write>
811022a4:	1000011e 	bne	r2,zero,811022ac <I2C_Write+0x88>
        bSuccess = FALSE;
811022a8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
811022ac:	e0bffa17 	ldw	r2,-24(fp)
811022b0:	10000726 	beq	r2,zero,811022d0 <I2C_Write+0xac>
811022b4:	e0bfff03 	ldbu	r2,-4(fp)
811022b8:	100d883a 	mov	r6,r2
811022bc:	e17ffc17 	ldw	r5,-16(fp)
811022c0:	e13ffb17 	ldw	r4,-20(fp)
811022c4:	11026580 	call	81102658 <i2c_write>
811022c8:	1000011e 	bne	r2,zero,811022d0 <I2C_Write+0xac>
        bSuccess = FALSE;
811022cc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811022d0:	e17ffc17 	ldw	r5,-16(fp)
811022d4:	e13ffb17 	ldw	r4,-20(fp)
811022d8:	11025e00 	call	811025e0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
811022dc:	0106d604 	movi	r4,7000
811022e0:	111a2000 	call	8111a200 <usleep>
    
    return bSuccess;
811022e4:	e0bffa17 	ldw	r2,-24(fp)

}
811022e8:	e037883a 	mov	sp,fp
811022ec:	dfc00117 	ldw	ra,4(sp)
811022f0:	df000017 	ldw	fp,0(sp)
811022f4:	dec00204 	addi	sp,sp,8
811022f8:	f800283a 	ret

811022fc <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
811022fc:	defff904 	addi	sp,sp,-28
81102300:	dfc00615 	stw	ra,24(sp)
81102304:	df000515 	stw	fp,20(sp)
81102308:	df000504 	addi	fp,sp,20
8110230c:	e13ffc15 	stw	r4,-16(fp)
81102310:	e17ffd15 	stw	r5,-12(fp)
81102314:	3007883a 	mov	r3,r6
81102318:	3805883a 	mov	r2,r7
8110231c:	e0fffe05 	stb	r3,-8(fp)
81102320:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81102324:	00800044 	movi	r2,1
81102328:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
8110232c:	e17ffd17 	ldw	r5,-12(fp)
81102330:	e13ffc17 	ldw	r4,-16(fp)
81102334:	11025540 	call	81102554 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81102338:	e0bffe03 	ldbu	r2,-8(fp)
8110233c:	10803fcc 	andi	r2,r2,255
81102340:	100d883a 	mov	r6,r2
81102344:	e17ffd17 	ldw	r5,-12(fp)
81102348:	e13ffc17 	ldw	r4,-16(fp)
8110234c:	11026580 	call	81102658 <i2c_write>
81102350:	1000011e 	bne	r2,zero,81102358 <I2C_Read+0x5c>
        bSuccess = FALSE;
81102354:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81102358:	e0bffb17 	ldw	r2,-20(fp)
8110235c:	10000726 	beq	r2,zero,8110237c <I2C_Read+0x80>
81102360:	e0bfff03 	ldbu	r2,-4(fp)
81102364:	100d883a 	mov	r6,r2
81102368:	e17ffd17 	ldw	r5,-12(fp)
8110236c:	e13ffc17 	ldw	r4,-16(fp)
81102370:	11026580 	call	81102658 <i2c_write>
81102374:	1000011e 	bne	r2,zero,8110237c <I2C_Read+0x80>
        bSuccess = FALSE;
81102378:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
8110237c:	e17ffd17 	ldw	r5,-12(fp)
81102380:	e13ffc17 	ldw	r4,-16(fp)
81102384:	11025540 	call	81102554 <i2c_start>
    DeviceAddr |= 1; // Read
81102388:	e0bffe03 	ldbu	r2,-8(fp)
8110238c:	10800054 	ori	r2,r2,1
81102390:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81102394:	e0bffb17 	ldw	r2,-20(fp)
81102398:	10000826 	beq	r2,zero,811023bc <I2C_Read+0xc0>
8110239c:	e0bffe03 	ldbu	r2,-8(fp)
811023a0:	10803fcc 	andi	r2,r2,255
811023a4:	100d883a 	mov	r6,r2
811023a8:	e17ffd17 	ldw	r5,-12(fp)
811023ac:	e13ffc17 	ldw	r4,-16(fp)
811023b0:	11026580 	call	81102658 <i2c_write>
811023b4:	1000011e 	bne	r2,zero,811023bc <I2C_Read+0xc0>
        bSuccess = FALSE;
811023b8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
811023bc:	e0bffb17 	ldw	r2,-20(fp)
811023c0:	10000526 	beq	r2,zero,811023d8 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
811023c4:	000f883a 	mov	r7,zero
811023c8:	e1800217 	ldw	r6,8(fp)
811023cc:	e17ffd17 	ldw	r5,-12(fp)
811023d0:	e13ffc17 	ldw	r4,-16(fp)
811023d4:	11027880 	call	81102788 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
811023d8:	e17ffd17 	ldw	r5,-12(fp)
811023dc:	e13ffc17 	ldw	r4,-16(fp)
811023e0:	11025e00 	call	811025e0 <i2c_stop>
    
    return bSuccess;
811023e4:	e0bffb17 	ldw	r2,-20(fp)
}
811023e8:	e037883a 	mov	sp,fp
811023ec:	dfc00117 	ldw	ra,4(sp)
811023f0:	df000017 	ldw	fp,0(sp)
811023f4:	dec00204 	addi	sp,sp,8
811023f8:	f800283a 	ret

811023fc <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
811023fc:	defff604 	addi	sp,sp,-40
81102400:	dfc00915 	stw	ra,36(sp)
81102404:	df000815 	stw	fp,32(sp)
81102408:	df000804 	addi	fp,sp,32
8110240c:	e13ffb15 	stw	r4,-20(fp)
81102410:	e17ffc15 	stw	r5,-16(fp)
81102414:	3007883a 	mov	r3,r6
81102418:	e1fffe15 	stw	r7,-8(fp)
8110241c:	e0800217 	ldw	r2,8(fp)
81102420:	e0fffd05 	stb	r3,-12(fp)
81102424:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81102428:	00800044 	movi	r2,1
8110242c:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81102430:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81102434:	e17ffc17 	ldw	r5,-16(fp)
81102438:	e13ffb17 	ldw	r4,-20(fp)
8110243c:	11025540 	call	81102554 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81102440:	e0bffd03 	ldbu	r2,-12(fp)
81102444:	10803fcc 	andi	r2,r2,255
81102448:	100d883a 	mov	r6,r2
8110244c:	e17ffc17 	ldw	r5,-16(fp)
81102450:	e13ffb17 	ldw	r4,-20(fp)
81102454:	11026580 	call	81102658 <i2c_write>
81102458:	1000011e 	bne	r2,zero,81102460 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
8110245c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81102460:	e0bff917 	ldw	r2,-28(fp)
81102464:	10000726 	beq	r2,zero,81102484 <I2C_MultipleRead+0x88>
81102468:	e0bffa03 	ldbu	r2,-24(fp)
8110246c:	100d883a 	mov	r6,r2
81102470:	e17ffc17 	ldw	r5,-16(fp)
81102474:	e13ffb17 	ldw	r4,-20(fp)
81102478:	11026580 	call	81102658 <i2c_write>
8110247c:	1000011e 	bne	r2,zero,81102484 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
81102480:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81102484:	e0bff917 	ldw	r2,-28(fp)
81102488:	10000326 	beq	r2,zero,81102498 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
8110248c:	e17ffc17 	ldw	r5,-16(fp)
81102490:	e13ffb17 	ldw	r4,-20(fp)
81102494:	11025540 	call	81102554 <i2c_start>
    DeviceAddr |= 1; // Read
81102498:	e0bffd03 	ldbu	r2,-12(fp)
8110249c:	10800054 	ori	r2,r2,1
811024a0:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
811024a4:	e0bff917 	ldw	r2,-28(fp)
811024a8:	10000826 	beq	r2,zero,811024cc <I2C_MultipleRead+0xd0>
811024ac:	e0bffd03 	ldbu	r2,-12(fp)
811024b0:	10803fcc 	andi	r2,r2,255
811024b4:	100d883a 	mov	r6,r2
811024b8:	e17ffc17 	ldw	r5,-16(fp)
811024bc:	e13ffb17 	ldw	r4,-20(fp)
811024c0:	11026580 	call	81102658 <i2c_write>
811024c4:	1000011e 	bne	r2,zero,811024cc <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
811024c8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
811024cc:	e0bff917 	ldw	r2,-28(fp)
811024d0:	10001726 	beq	r2,zero,81102530 <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
811024d4:	e03ff815 	stw	zero,-32(fp)
811024d8:	00001006 	br	8110251c <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
811024dc:	e0bff817 	ldw	r2,-32(fp)
811024e0:	e0fffe17 	ldw	r3,-8(fp)
811024e4:	1889883a 	add	r4,r3,r2
811024e8:	e0bfff0b 	ldhu	r2,-4(fp)
811024ec:	10ffffc4 	addi	r3,r2,-1
811024f0:	e0bff817 	ldw	r2,-32(fp)
811024f4:	1884c03a 	cmpne	r2,r3,r2
811024f8:	10803fcc 	andi	r2,r2,255
811024fc:	100f883a 	mov	r7,r2
81102500:	200d883a 	mov	r6,r4
81102504:	e17ffc17 	ldw	r5,-16(fp)
81102508:	e13ffb17 	ldw	r4,-20(fp)
8110250c:	11027880 	call	81102788 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81102510:	e0bff817 	ldw	r2,-32(fp)
81102514:	10800044 	addi	r2,r2,1
81102518:	e0bff815 	stw	r2,-32(fp)
8110251c:	e0bfff0b 	ldhu	r2,-4(fp)
81102520:	e0fff817 	ldw	r3,-32(fp)
81102524:	1880020e 	bge	r3,r2,81102530 <I2C_MultipleRead+0x134>
81102528:	e0bff917 	ldw	r2,-28(fp)
8110252c:	103feb1e 	bne	r2,zero,811024dc <__reset+0xfb0e24dc>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81102530:	e17ffc17 	ldw	r5,-16(fp)
81102534:	e13ffb17 	ldw	r4,-20(fp)
81102538:	11025e00 	call	811025e0 <i2c_stop>
    
    return bSuccess;    
8110253c:	e0bff917 	ldw	r2,-28(fp)
    
}
81102540:	e037883a 	mov	sp,fp
81102544:	dfc00117 	ldw	ra,4(sp)
81102548:	df000017 	ldw	fp,0(sp)
8110254c:	dec00204 	addi	sp,sp,8
81102550:	f800283a 	ret

81102554 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81102554:	defffc04 	addi	sp,sp,-16
81102558:	dfc00315 	stw	ra,12(sp)
8110255c:	df000215 	stw	fp,8(sp)
81102560:	df000204 	addi	fp,sp,8
81102564:	e13ffe15 	stw	r4,-8(fp)
81102568:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
8110256c:	e0bfff17 	ldw	r2,-4(fp)
81102570:	10800104 	addi	r2,r2,4
81102574:	1007883a 	mov	r3,r2
81102578:	00800044 	movi	r2,1
8110257c:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81102580:	e0bfff17 	ldw	r2,-4(fp)
81102584:	00c00044 	movi	r3,1
81102588:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
8110258c:	e0bffe17 	ldw	r2,-8(fp)
81102590:	00c00044 	movi	r3,1
81102594:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81102598:	01000044 	movi	r4,1
8110259c:	111a2000 	call	8111a200 <usleep>
     
    SDA_LOW(data_base); // data low
811025a0:	e0bfff17 	ldw	r2,-4(fp)
811025a4:	0007883a 	mov	r3,zero
811025a8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
811025ac:	01000044 	movi	r4,1
811025b0:	111a2000 	call	8111a200 <usleep>
    SCL_LOW(clk_base); // clock low
811025b4:	e0bffe17 	ldw	r2,-8(fp)
811025b8:	0007883a 	mov	r3,zero
811025bc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
811025c0:	01000044 	movi	r4,1
811025c4:	111a2000 	call	8111a200 <usleep>
}
811025c8:	0001883a 	nop
811025cc:	e037883a 	mov	sp,fp
811025d0:	dfc00117 	ldw	ra,4(sp)
811025d4:	df000017 	ldw	fp,0(sp)
811025d8:	dec00204 	addi	sp,sp,8
811025dc:	f800283a 	ret

811025e0 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
811025e0:	defffc04 	addi	sp,sp,-16
811025e4:	dfc00315 	stw	ra,12(sp)
811025e8:	df000215 	stw	fp,8(sp)
811025ec:	df000204 	addi	fp,sp,8
811025f0:	e13ffe15 	stw	r4,-8(fp)
811025f4:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
811025f8:	e0bfff17 	ldw	r2,-4(fp)
811025fc:	10800104 	addi	r2,r2,4
81102600:	1007883a 	mov	r3,r2
81102604:	00800044 	movi	r2,1
81102608:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
8110260c:	e0bfff17 	ldw	r2,-4(fp)
81102610:	0007883a 	mov	r3,zero
81102614:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81102618:	e0bffe17 	ldw	r2,-8(fp)
8110261c:	00c00044 	movi	r3,1
81102620:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81102624:	01000044 	movi	r4,1
81102628:	111a2000 	call	8111a200 <usleep>
    SDA_HIGH(data_base); // data high
8110262c:	e0bfff17 	ldw	r2,-4(fp)
81102630:	00c00044 	movi	r3,1
81102634:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81102638:	01000044 	movi	r4,1
8110263c:	111a2000 	call	8111a200 <usleep>
    

    
}
81102640:	0001883a 	nop
81102644:	e037883a 	mov	sp,fp
81102648:	dfc00117 	ldw	ra,4(sp)
8110264c:	df000017 	ldw	fp,0(sp)
81102650:	dec00204 	addi	sp,sp,8
81102654:	f800283a 	ret

81102658 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81102658:	defff804 	addi	sp,sp,-32
8110265c:	dfc00715 	stw	ra,28(sp)
81102660:	df000615 	stw	fp,24(sp)
81102664:	df000604 	addi	fp,sp,24
81102668:	e13ffd15 	stw	r4,-12(fp)
8110266c:	e17ffe15 	stw	r5,-8(fp)
81102670:	3005883a 	mov	r2,r6
81102674:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81102678:	00bfe004 	movi	r2,-128
8110267c:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81102680:	e0bffe17 	ldw	r2,-8(fp)
81102684:	10800104 	addi	r2,r2,4
81102688:	1007883a 	mov	r3,r2
8110268c:	00800044 	movi	r2,1
81102690:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81102694:	e03ffb15 	stw	zero,-20(fp)
81102698:	00001f06 	br	81102718 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
8110269c:	e0bffd17 	ldw	r2,-12(fp)
811026a0:	0007883a 	mov	r3,zero
811026a4:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
811026a8:	e0ffff03 	ldbu	r3,-4(fp)
811026ac:	e0bffa03 	ldbu	r2,-24(fp)
811026b0:	1884703a 	and	r2,r3,r2
811026b4:	10803fcc 	andi	r2,r2,255
811026b8:	10000426 	beq	r2,zero,811026cc <i2c_write+0x74>
            SDA_HIGH(data_base);
811026bc:	e0bffe17 	ldw	r2,-8(fp)
811026c0:	00c00044 	movi	r3,1
811026c4:	10c00035 	stwio	r3,0(r2)
811026c8:	00000306 	br	811026d8 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
811026cc:	e0bffe17 	ldw	r2,-8(fp)
811026d0:	0007883a 	mov	r3,zero
811026d4:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
811026d8:	e0bffa03 	ldbu	r2,-24(fp)
811026dc:	1004d07a 	srli	r2,r2,1
811026e0:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
811026e4:	e0bffd17 	ldw	r2,-12(fp)
811026e8:	00c00044 	movi	r3,1
811026ec:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
811026f0:	01000044 	movi	r4,1
811026f4:	111a2000 	call	8111a200 <usleep>
        SCL_LOW(clk_base);
811026f8:	e0bffd17 	ldw	r2,-12(fp)
811026fc:	0007883a 	mov	r3,zero
81102700:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81102704:	01000044 	movi	r4,1
81102708:	111a2000 	call	8111a200 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
8110270c:	e0bffb17 	ldw	r2,-20(fp)
81102710:	10800044 	addi	r2,r2,1
81102714:	e0bffb15 	stw	r2,-20(fp)
81102718:	e0bffb17 	ldw	r2,-20(fp)
8110271c:	10800210 	cmplti	r2,r2,8
81102720:	103fde1e 	bne	r2,zero,8110269c <__reset+0xfb0e269c>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81102724:	e0bffe17 	ldw	r2,-8(fp)
81102728:	10800104 	addi	r2,r2,4
8110272c:	0007883a 	mov	r3,zero
81102730:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81102734:	e0bffd17 	ldw	r2,-12(fp)
81102738:	00c00044 	movi	r3,1
8110273c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81102740:	01000044 	movi	r4,1
81102744:	111a2000 	call	8111a200 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81102748:	e0bffe17 	ldw	r2,-8(fp)
8110274c:	10800037 	ldwio	r2,0(r2)
81102750:	1005003a 	cmpeq	r2,r2,zero
81102754:	10803fcc 	andi	r2,r2,255
81102758:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
8110275c:	e0bffd17 	ldw	r2,-12(fp)
81102760:	0007883a 	mov	r3,zero
81102764:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81102768:	01000044 	movi	r4,1
8110276c:	111a2000 	call	8111a200 <usleep>
    return bAck;
81102770:	e0bffc17 	ldw	r2,-16(fp)
}    
81102774:	e037883a 	mov	sp,fp
81102778:	dfc00117 	ldw	ra,4(sp)
8110277c:	df000017 	ldw	fp,0(sp)
81102780:	dec00204 	addi	sp,sp,8
81102784:	f800283a 	ret

81102788 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81102788:	defff804 	addi	sp,sp,-32
8110278c:	dfc00715 	stw	ra,28(sp)
81102790:	df000615 	stw	fp,24(sp)
81102794:	df000604 	addi	fp,sp,24
81102798:	e13ffc15 	stw	r4,-16(fp)
8110279c:	e17ffd15 	stw	r5,-12(fp)
811027a0:	e1bffe15 	stw	r6,-8(fp)
811027a4:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
811027a8:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
811027ac:	e0bffd17 	ldw	r2,-12(fp)
811027b0:	10800104 	addi	r2,r2,4
811027b4:	0007883a 	mov	r3,zero
811027b8:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
811027bc:	e0bffc17 	ldw	r2,-16(fp)
811027c0:	0007883a 	mov	r3,zero
811027c4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811027c8:	01000044 	movi	r4,1
811027cc:	111a2000 	call	8111a200 <usleep>

    for(i=0;i<8;i++){
811027d0:	e03ffb15 	stw	zero,-20(fp)
811027d4:	00001606 	br	81102830 <i2c_read+0xa8>
        Data <<= 1;
811027d8:	e0bffa03 	ldbu	r2,-24(fp)
811027dc:	1085883a 	add	r2,r2,r2
811027e0:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
811027e4:	e0bffc17 	ldw	r2,-16(fp)
811027e8:	00c00044 	movi	r3,1
811027ec:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
811027f0:	01000044 	movi	r4,1
811027f4:	111a2000 	call	8111a200 <usleep>
        if (SDA_READ(data_base))  // read data   
811027f8:	e0bffd17 	ldw	r2,-12(fp)
811027fc:	10800037 	ldwio	r2,0(r2)
81102800:	10000326 	beq	r2,zero,81102810 <i2c_read+0x88>
            Data |= 0x01;
81102804:	e0bffa03 	ldbu	r2,-24(fp)
81102808:	10800054 	ori	r2,r2,1
8110280c:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81102810:	e0bffc17 	ldw	r2,-16(fp)
81102814:	0007883a 	mov	r3,zero
81102818:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110281c:	01000044 	movi	r4,1
81102820:	111a2000 	call	8111a200 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81102824:	e0bffb17 	ldw	r2,-20(fp)
81102828:	10800044 	addi	r2,r2,1
8110282c:	e0bffb15 	stw	r2,-20(fp)
81102830:	e0bffb17 	ldw	r2,-20(fp)
81102834:	10800210 	cmplti	r2,r2,8
81102838:	103fe71e 	bne	r2,zero,811027d8 <__reset+0xfb0e27d8>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
8110283c:	e0bffc17 	ldw	r2,-16(fp)
81102840:	0007883a 	mov	r3,zero
81102844:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
81102848:	e0bffd17 	ldw	r2,-12(fp)
8110284c:	10800104 	addi	r2,r2,4
81102850:	1007883a 	mov	r3,r2
81102854:	00800044 	movi	r2,1
81102858:	18800035 	stwio	r2,0(r3)
    if (bAck)
8110285c:	e0bfff17 	ldw	r2,-4(fp)
81102860:	10000426 	beq	r2,zero,81102874 <i2c_read+0xec>
        SDA_LOW(data_base);
81102864:	e0bffd17 	ldw	r2,-12(fp)
81102868:	0007883a 	mov	r3,zero
8110286c:	10c00035 	stwio	r3,0(r2)
81102870:	00000306 	br	81102880 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
81102874:	e0bffd17 	ldw	r2,-12(fp)
81102878:	00c00044 	movi	r3,1
8110287c:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
81102880:	e0bffc17 	ldw	r2,-16(fp)
81102884:	00c00044 	movi	r3,1
81102888:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
8110288c:	01000044 	movi	r4,1
81102890:	111a2000 	call	8111a200 <usleep>
    SCL_LOW(clk_base); // clock low
81102894:	e0bffc17 	ldw	r2,-16(fp)
81102898:	0007883a 	mov	r3,zero
8110289c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811028a0:	01000044 	movi	r4,1
811028a4:	111a2000 	call	8111a200 <usleep>
    SDA_LOW(data_base);  // data low
811028a8:	e0bffd17 	ldw	r2,-12(fp)
811028ac:	0007883a 	mov	r3,zero
811028b0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
811028b4:	01000044 	movi	r4,1
811028b8:	111a2000 	call	8111a200 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
811028bc:	e0bffe17 	ldw	r2,-8(fp)
811028c0:	e0fffa03 	ldbu	r3,-24(fp)
811028c4:	10c00005 	stb	r3,0(r2)
}
811028c8:	0001883a 	nop
811028cc:	e037883a 	mov	sp,fp
811028d0:	dfc00117 	ldw	ra,4(sp)
811028d4:	df000017 	ldw	fp,0(sp)
811028d8:	dec00204 	addi	sp,sp,8
811028dc:	f800283a 	ret

811028e0 <LEDS_BOARD_DRIVE>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool LEDS_BOARD_DRIVE(bool bDRIVE, alt_u8 LedsMask){
811028e0:	defffd04 	addi	sp,sp,-12
811028e4:	df000215 	stw	fp,8(sp)
811028e8:	df000204 	addi	fp,sp,8
811028ec:	e13ffe15 	stw	r4,-8(fp)
811028f0:	2805883a 	mov	r2,r5
811028f4:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
811028f8:	e0bffe17 	ldw	r2,-8(fp)
811028fc:	10800058 	cmpnei	r2,r2,1
81102900:	1000071e 	bne	r2,zero,81102920 <LEDS_BOARD_DRIVE+0x40>
	LedsBoardControl &= (~LedsMask);
81102904:	e0bfff03 	ldbu	r2,-4(fp)
81102908:	0084303a 	nor	r2,zero,r2
8110290c:	1007883a 	mov	r3,r2
81102910:	d0a02b03 	ldbu	r2,-32596(gp)
81102914:	1884703a 	and	r2,r3,r2
81102918:	d0a02b05 	stb	r2,-32596(gp)
8110291c:	00000406 	br	81102930 <LEDS_BOARD_DRIVE+0x50>
  } else {
	LedsBoardControl |= LedsMask;
81102920:	d0e02b03 	ldbu	r3,-32596(gp)
81102924:	e0bfff03 	ldbu	r2,-4(fp)
81102928:	1884b03a 	or	r2,r3,r2
8110292c:	d0a02b05 	stb	r2,-32596(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
81102930:	d0a02b03 	ldbu	r2,-32596(gp)
81102934:	10c03fcc 	andi	r3,r2,255
81102938:	00a00034 	movhi	r2,32768
8110293c:	10827404 	addi	r2,r2,2512
81102940:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81102944:	00800044 	movi	r2,1
}
81102948:	e037883a 	mov	sp,fp
8110294c:	df000017 	ldw	fp,0(sp)
81102950:	dec00104 	addi	sp,sp,4
81102954:	f800283a 	ret

81102958 <LEDS_PAINEL_DRIVE>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool LEDS_PAINEL_DRIVE(bool bDRIVE, alt_u32 LedsMask){
81102958:	defffd04 	addi	sp,sp,-12
8110295c:	df000215 	stw	fp,8(sp)
81102960:	df000204 	addi	fp,sp,8
81102964:	e13ffe15 	stw	r4,-8(fp)
81102968:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
8110296c:	e0bffe17 	ldw	r2,-8(fp)
81102970:	10800058 	cmpnei	r2,r2,1
81102974:	1000051e 	bne	r2,zero,8110298c <LEDS_PAINEL_DRIVE+0x34>
	LedsPainelControl |= LedsMask;
81102978:	d0e00117 	ldw	r3,-32764(gp)
8110297c:	e0bfff17 	ldw	r2,-4(fp)
81102980:	1884b03a 	or	r2,r3,r2
81102984:	d0a00115 	stw	r2,-32764(gp)
81102988:	00000506 	br	811029a0 <LEDS_PAINEL_DRIVE+0x48>
  } else {
	LedsPainelControl &= (~LedsMask);
8110298c:	e0bfff17 	ldw	r2,-4(fp)
81102990:	0086303a 	nor	r3,zero,r2
81102994:	d0a00117 	ldw	r2,-32764(gp)
81102998:	1884703a 	and	r2,r3,r2
8110299c:	d0a00115 	stw	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
811029a0:	d0a00117 	ldw	r2,-32764(gp)
811029a4:	1007883a 	mov	r3,r2
811029a8:	00a00034 	movhi	r2,32768
811029ac:	10824004 	addi	r2,r2,2304
811029b0:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811029b4:	00800044 	movi	r2,1
}
811029b8:	e037883a 	mov	sp,fp
811029bc:	df000017 	ldw	fp,0(sp)
811029c0:	dec00104 	addi	sp,sp,4
811029c4:	f800283a 	ret

811029c8 <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
811029c8:	defffc04 	addi	sp,sp,-16
811029cc:	df000315 	stw	fp,12(sp)
811029d0:	df000304 	addi	fp,sp,12
811029d4:	e13ffd15 	stw	r4,-12(fp)
811029d8:	e17ffe15 	stw	r5,-8(fp)
811029dc:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
811029e0:	e0bffd17 	ldw	r2,-12(fp)
811029e4:	10800037 	ldwio	r2,0(r2)
811029e8:	1080010c 	andi	r2,r2,4
811029ec:	10000226 	beq	r2,zero,811029f8 <msgdma_write_extended_descriptor+0x30>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
811029f0:	00bff904 	movi	r2,-28
811029f4:	00003d06 	br	81102aec <msgdma_write_extended_descriptor+0x124>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
811029f8:	e0bfff17 	ldw	r2,-4(fp)
811029fc:	10800017 	ldw	r2,0(r2)
81102a00:	1007883a 	mov	r3,r2
81102a04:	e0bffe17 	ldw	r2,-8(fp)
81102a08:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81102a0c:	e0bffe17 	ldw	r2,-8(fp)
81102a10:	10800104 	addi	r2,r2,4
81102a14:	e0ffff17 	ldw	r3,-4(fp)
81102a18:	18c00117 	ldw	r3,4(r3)
81102a1c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, descriptor->transfer_length);
81102a20:	e0bffe17 	ldw	r2,-8(fp)
81102a24:	10800204 	addi	r2,r2,8
81102a28:	e0ffff17 	ldw	r3,-4(fp)
81102a2c:	18c00217 	ldw	r3,8(r3)
81102a30:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
81102a34:	e0bffe17 	ldw	r2,-8(fp)
81102a38:	10800304 	addi	r2,r2,12
81102a3c:	e0ffff17 	ldw	r3,-4(fp)
81102a40:	18c0030b 	ldhu	r3,12(r3)
81102a44:	18ffffcc 	andi	r3,r3,65535
81102a48:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
81102a4c:	e0bffe17 	ldw	r2,-8(fp)
81102a50:	10800384 	addi	r2,r2,14
81102a54:	e0ffff17 	ldw	r3,-4(fp)
81102a58:	18c00383 	ldbu	r3,14(r3)
81102a5c:	18c03fcc 	andi	r3,r3,255
81102a60:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
81102a64:	e0bffe17 	ldw	r2,-8(fp)
81102a68:	108003c4 	addi	r2,r2,15
81102a6c:	e0ffff17 	ldw	r3,-4(fp)
81102a70:	18c003c3 	ldbu	r3,15(r3)
81102a74:	18c03fcc 	andi	r3,r3,255
81102a78:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
81102a7c:	e0bffe17 	ldw	r2,-8(fp)
81102a80:	10800404 	addi	r2,r2,16
81102a84:	e0ffff17 	ldw	r3,-4(fp)
81102a88:	18c0040b 	ldhu	r3,16(r3)
81102a8c:	18ffffcc 	andi	r3,r3,65535
81102a90:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
81102a94:	e0bffe17 	ldw	r2,-8(fp)
81102a98:	10800484 	addi	r2,r2,18
81102a9c:	e0ffff17 	ldw	r3,-4(fp)
81102aa0:	18c0048b 	ldhu	r3,18(r3)
81102aa4:	18ffffcc 	andi	r3,r3,65535
81102aa8:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, descriptor->read_address_high);
81102aac:	e0bffe17 	ldw	r2,-8(fp)
81102ab0:	10800504 	addi	r2,r2,20
81102ab4:	e0ffff17 	ldw	r3,-4(fp)
81102ab8:	18c00517 	ldw	r3,20(r3)
81102abc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, descriptor->write_address_high);
81102ac0:	e0bffe17 	ldw	r2,-8(fp)
81102ac4:	10800604 	addi	r2,r2,24
81102ac8:	e0ffff17 	ldw	r3,-4(fp)
81102acc:	18c00617 	ldw	r3,24(r3)
81102ad0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
81102ad4:	e0bffe17 	ldw	r2,-8(fp)
81102ad8:	10800704 	addi	r2,r2,28
81102adc:	e0ffff17 	ldw	r3,-4(fp)
81102ae0:	18c00717 	ldw	r3,28(r3)
81102ae4:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
81102ae8:	0005883a 	mov	r2,zero
}
81102aec:	e037883a 	mov	sp,fp
81102af0:	df000017 	ldw	fp,0(sp)
81102af4:	dec00104 	addi	sp,sp,4
81102af8:	f800283a 	ret

81102afc <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81102afc:	defff604 	addi	sp,sp,-40
81102b00:	df000915 	stw	fp,36(sp)
81102b04:	df000904 	addi	fp,sp,36
81102b08:	e13ff715 	stw	r4,-36(fp)
81102b0c:	e17ff815 	stw	r5,-32(fp)
81102b10:	e1bff915 	stw	r6,-28(fp)
81102b14:	e1fffa15 	stw	r7,-24(fp)
81102b18:	e1800517 	ldw	r6,20(fp)
81102b1c:	e1400617 	ldw	r5,24(fp)
81102b20:	e1000717 	ldw	r4,28(fp)
81102b24:	e0c00817 	ldw	r3,32(fp)
81102b28:	e0800917 	ldw	r2,36(fp)
81102b2c:	e1bffb0d 	sth	r6,-20(fp)
81102b30:	e17ffc05 	stb	r5,-16(fp)
81102b34:	e13ffd05 	stb	r4,-12(fp)
81102b38:	e0fffe0d 	sth	r3,-8(fp)
81102b3c:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
81102b40:	e0bff717 	ldw	r2,-36(fp)
81102b44:	10c01217 	ldw	r3,72(r2)
81102b48:	e0800117 	ldw	r2,4(fp)
81102b4c:	18801936 	bltu	r3,r2,81102bb4 <msgdma_construct_extended_descriptor+0xb8>
81102b50:	e13ff717 	ldw	r4,-36(fp)
81102b54:	20801317 	ldw	r2,76(r4)
81102b58:	20c01417 	ldw	r3,80(r4)
81102b5c:	e13ffe0b 	ldhu	r4,-8(fp)
81102b60:	213fffcc 	andi	r4,r4,65535
81102b64:	2015883a 	mov	r10,r4
81102b68:	0017883a 	mov	r11,zero
81102b6c:	1ac01136 	bltu	r3,r11,81102bb4 <msgdma_construct_extended_descriptor+0xb8>
81102b70:	58c0011e 	bne	r11,r3,81102b78 <msgdma_construct_extended_descriptor+0x7c>
81102b74:	12800f36 	bltu	r2,r10,81102bb4 <msgdma_construct_extended_descriptor+0xb8>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
81102b78:	e13ff717 	ldw	r4,-36(fp)
81102b7c:	20801317 	ldw	r2,76(r4)
81102b80:	20c01417 	ldw	r3,80(r4)
81102b84:	e13fff0b 	ldhu	r4,-4(fp)
81102b88:	213fffcc 	andi	r4,r4,65535
81102b8c:	2011883a 	mov	r8,r4
81102b90:	0013883a 	mov	r9,zero
81102b94:	1a400736 	bltu	r3,r9,81102bb4 <msgdma_construct_extended_descriptor+0xb8>
81102b98:	48c0011e 	bne	r9,r3,81102ba0 <msgdma_construct_extended_descriptor+0xa4>
81102b9c:	12000536 	bltu	r2,r8,81102bb4 <msgdma_construct_extended_descriptor+0xb8>
81102ba0:	e0bff717 	ldw	r2,-36(fp)
81102ba4:	10801703 	ldbu	r2,92(r2)
81102ba8:	10803fcc 	andi	r2,r2,255
81102bac:	10800060 	cmpeqi	r2,r2,1
81102bb0:	1000021e 	bne	r2,zero,81102bbc <msgdma_construct_extended_descriptor+0xc0>
		return -EINVAL;
81102bb4:	00bffa84 	movi	r2,-22
81102bb8:	00002306 	br	81102c48 <msgdma_construct_extended_descriptor+0x14c>
	}

	descriptor->read_address_low = read_address;
81102bbc:	e0bff817 	ldw	r2,-32(fp)
81102bc0:	e0fff917 	ldw	r3,-28(fp)
81102bc4:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
81102bc8:	e0bff817 	ldw	r2,-32(fp)
81102bcc:	e0fffa17 	ldw	r3,-24(fp)
81102bd0:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
81102bd4:	e0bff817 	ldw	r2,-32(fp)
81102bd8:	e0c00117 	ldw	r3,4(fp)
81102bdc:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
81102be0:	e0bff817 	ldw	r2,-32(fp)
81102be4:	e0fffb0b 	ldhu	r3,-20(fp)
81102be8:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81102bec:	e0bff817 	ldw	r2,-32(fp)
81102bf0:	e0fffc03 	ldbu	r3,-16(fp)
81102bf4:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
81102bf8:	e0bff817 	ldw	r2,-32(fp)
81102bfc:	e0fffd03 	ldbu	r3,-12(fp)
81102c00:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81102c04:	e0bff817 	ldw	r2,-32(fp)
81102c08:	e0fffe0b 	ldhu	r3,-8(fp)
81102c0c:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81102c10:	e0bff817 	ldw	r2,-32(fp)
81102c14:	e0ffff0b 	ldhu	r3,-4(fp)
81102c18:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
81102c1c:	e0bff817 	ldw	r2,-32(fp)
81102c20:	e0c00317 	ldw	r3,12(fp)
81102c24:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
81102c28:	e0bff817 	ldw	r2,-32(fp)
81102c2c:	e0c00417 	ldw	r3,16(fp)
81102c30:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81102c34:	e0800217 	ldw	r2,8(fp)
81102c38:	10e00034 	orhi	r3,r2,32768
81102c3c:	e0bff817 	ldw	r2,-32(fp)
81102c40:	10c00715 	stw	r3,28(r2)

	return 0;
81102c44:	0005883a 	mov	r2,zero

}
81102c48:	e037883a 	mov	sp,fp
81102c4c:	df000017 	ldw	fp,0(sp)
81102c50:	dec00104 	addi	sp,sp,4
81102c54:	f800283a 	ret

81102c58 <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
81102c58:	defff004 	addi	sp,sp,-64
81102c5c:	dfc00f15 	stw	ra,60(sp)
81102c60:	df000e15 	stw	fp,56(sp)
81102c64:	df000e04 	addi	fp,sp,56
81102c68:	e13ffd15 	stw	r4,-12(fp)
81102c6c:	e17ffe15 	stw	r5,-8(fp)
81102c70:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81102c74:	e03ff315 	stw	zero,-52(fp)
	alt_irq_context context = 0;
81102c78:	e03ff415 	stw	zero,-48(fp)
	alt_u16 counter = 0;
81102c7c:	e03ff20d 	sth	zero,-56(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81102c80:	e0bffd17 	ldw	r2,-12(fp)
81102c84:	10800317 	ldw	r2,12(r2)
81102c88:	10800204 	addi	r2,r2,8
81102c8c:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
81102c90:	10bfffcc 	andi	r2,r2,65535
81102c94:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81102c98:	e0bffd17 	ldw	r2,-12(fp)
81102c9c:	10800317 	ldw	r2,12(r2)
81102ca0:	10800204 	addi	r2,r2,8
81102ca4:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81102ca8:	1004d43a 	srli	r2,r2,16
81102cac:	e0bff615 	stw	r2,-40(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81102cb0:	e0bffd17 	ldw	r2,-12(fp)
81102cb4:	10800917 	ldw	r2,36(r2)
81102cb8:	e0fff617 	ldw	r3,-40(fp)
81102cbc:	1880042e 	bgeu	r3,r2,81102cd0 <msgdma_descriptor_async_transfer+0x78>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
81102cc0:	e0bffd17 	ldw	r2,-12(fp)
81102cc4:	10800917 	ldw	r2,36(r2)
81102cc8:	e0fff517 	ldw	r3,-44(fp)
81102ccc:	18800236 	bltu	r3,r2,81102cd8 <msgdma_descriptor_async_transfer+0x80>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
81102cd0:	00bff904 	movi	r2,-28
81102cd4:	00007d06 	br	81102ecc <msgdma_descriptor_async_transfer+0x274>
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81102cd8:	00800804 	movi	r2,32
81102cdc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81102ce0:	0005303a 	rdctl	r2,status
81102ce4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81102ce8:	e0fff717 	ldw	r3,-36(fp)
81102cec:	00bfff84 	movi	r2,-2
81102cf0:	1884703a 	and	r2,r3,r2
81102cf4:	1001703a 	wrctl	status,r2
  
  return context;
81102cf8:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81102cfc:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81102d00:	e0bffd17 	ldw	r2,-12(fp)
81102d04:	10800317 	ldw	r2,12(r2)
81102d08:	10800104 	addi	r2,r2,4
81102d0c:	e0fff317 	ldw	r3,-52(fp)
81102d10:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81102d14:	e0bffd17 	ldw	r2,-12(fp)
81102d18:	10800317 	ldw	r2,12(r2)
81102d1c:	e0fffd17 	ldw	r3,-12(fp)
81102d20:	18c00317 	ldw	r3,12(r3)
81102d24:	18c00037 	ldwio	r3,0(r3)
81102d28:	10c00035 	stwio	r3,0(r2)
81102d2c:	e0bff417 	ldw	r2,-48(fp)
81102d30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81102d34:	e0bffc17 	ldw	r2,-16(fp)
81102d38:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
81102d3c:	e0bffe17 	ldw	r2,-8(fp)
81102d40:	10000826 	beq	r2,zero,81102d64 <msgdma_descriptor_async_transfer+0x10c>
81102d44:	e0bfff17 	ldw	r2,-4(fp)
81102d48:	1000061e 	bne	r2,zero,81102d64 <msgdma_descriptor_async_transfer+0x10c>
		counter = 0; /* reset counter */
81102d4c:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		alt_printf("invalid dma descriptor option\n");
81102d50:	012044b4 	movhi	r4,33042
81102d54:	2139c804 	addi	r4,r4,-6368
81102d58:	1119ba80 	call	81119ba8 <alt_printf>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
81102d5c:	00bff084 	movi	r2,-62
81102d60:	00005a06 	br	81102ecc <msgdma_descriptor_async_transfer+0x274>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81102d64:	e0bffe17 	ldw	r2,-8(fp)
81102d68:	10001b1e 	bne	r2,zero,81102dd8 <msgdma_descriptor_async_transfer+0x180>
81102d6c:	e0bfff17 	ldw	r2,-4(fp)
81102d70:	10001926 	beq	r2,zero,81102dd8 <msgdma_descriptor_async_transfer+0x180>
		counter = 0; /* reset counter */
81102d74:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81102d78:	00000d06 	br	81102db0 <msgdma_descriptor_async_transfer+0x158>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
81102d7c:	01000044 	movi	r4,1
81102d80:	11194080 	call	81119408 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81102d84:	e0bff20b 	ldhu	r2,-56(fp)
81102d88:	1084e230 	cmpltui	r2,r2,5000
81102d8c:	1000051e 	bne	r2,zero,81102da4 <msgdma_descriptor_async_transfer+0x14c>
			{
				alt_printf(
81102d90:	012044b4 	movhi	r4,33042
81102d94:	2139d004 	addi	r4,r4,-6336
81102d98:	1119ba80 	call	81119ba8 <alt_printf>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
81102d9c:	00bff084 	movi	r2,-62
81102da0:	00004a06 	br	81102ecc <msgdma_descriptor_async_transfer+0x274>
			}
			counter++;
81102da4:	e0bff20b 	ldhu	r2,-56(fp)
81102da8:	10800044 	addi	r2,r2,1
81102dac:	e0bff20d 	sth	r2,-56(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81102db0:	e0bffd17 	ldw	r2,-12(fp)
81102db4:	10c00317 	ldw	r3,12(r2)
81102db8:	e0bffd17 	ldw	r2,-12(fp)
81102dbc:	10800417 	ldw	r2,16(r2)
81102dc0:	e1bfff17 	ldw	r6,-4(fp)
81102dc4:	100b883a 	mov	r5,r2
81102dc8:	1809883a 	mov	r4,r3
81102dcc:	11029c80 	call	811029c8 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81102dd0:	103fea1e 	bne	r2,zero,81102d7c <__reset+0xfb0e2d7c>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81102dd4:	00000206 	br	81102de0 <msgdma_descriptor_async_transfer+0x188>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
81102dd8:	00bfffc4 	movi	r2,-1
81102ddc:	00003b06 	br	81102ecc <msgdma_descriptor_async_transfer+0x274>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
81102de0:	e0bffd17 	ldw	r2,-12(fp)
81102de4:	10800b17 	ldw	r2,44(r2)
81102de8:	10001c26 	beq	r2,zero,81102e5c <msgdma_descriptor_async_transfer+0x204>

		control |= (dev->control |
81102dec:	e0bffd17 	ldw	r2,-12(fp)
81102df0:	10c00d17 	ldw	r3,52(r2)
81102df4:	e0bff317 	ldw	r2,-52(fp)
81102df8:	1884b03a 	or	r2,r3,r2
81102dfc:	10800514 	ori	r2,r2,20
81102e00:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81102e04:	e0fff317 	ldw	r3,-52(fp)
81102e08:	00bff7c4 	movi	r2,-33
81102e0c:	1884703a 	and	r2,r3,r2
81102e10:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81102e14:	0005303a 	rdctl	r2,status
81102e18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81102e1c:	e0fff917 	ldw	r3,-28(fp)
81102e20:	00bfff84 	movi	r2,-2
81102e24:	1884703a 	and	r2,r3,r2
81102e28:	1001703a 	wrctl	status,r2
  
  return context;
81102e2c:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81102e30:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81102e34:	e0bffd17 	ldw	r2,-12(fp)
81102e38:	10800317 	ldw	r2,12(r2)
81102e3c:	10800104 	addi	r2,r2,4
81102e40:	e0fff317 	ldw	r3,-52(fp)
81102e44:	10c00035 	stwio	r3,0(r2)
81102e48:	e0bff417 	ldw	r2,-48(fp)
81102e4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81102e50:	e0bffb17 	ldw	r2,-20(fp)
81102e54:	1001703a 	wrctl	status,r2
81102e58:	00001b06 	br	81102ec8 <msgdma_descriptor_async_transfer+0x270>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
81102e5c:	e0bffd17 	ldw	r2,-12(fp)
81102e60:	10c00d17 	ldw	r3,52(r2)
81102e64:	e0bff317 	ldw	r2,-52(fp)
81102e68:	1884b03a 	or	r2,r3,r2
81102e6c:	10800114 	ori	r2,r2,4
81102e70:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81102e74:	e0fff317 	ldw	r3,-52(fp)
81102e78:	00bff3c4 	movi	r2,-49
81102e7c:	1884703a 	and	r2,r3,r2
81102e80:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81102e84:	0005303a 	rdctl	r2,status
81102e88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81102e8c:	e0fffa17 	ldw	r3,-24(fp)
81102e90:	00bfff84 	movi	r2,-2
81102e94:	1884703a 	and	r2,r3,r2
81102e98:	1001703a 	wrctl	status,r2
  
  return context;
81102e9c:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81102ea0:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81102ea4:	e0bffd17 	ldw	r2,-12(fp)
81102ea8:	10800317 	ldw	r2,12(r2)
81102eac:	10800104 	addi	r2,r2,4
81102eb0:	e0fff317 	ldw	r3,-52(fp)
81102eb4:	10c00035 	stwio	r3,0(r2)
81102eb8:	e0bff417 	ldw	r2,-48(fp)
81102ebc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81102ec0:	e0bff817 	ldw	r2,-32(fp)
81102ec4:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
81102ec8:	0005883a 	mov	r2,zero
}
81102ecc:	e037883a 	mov	sp,fp
81102ed0:	dfc00117 	ldw	ra,4(sp)
81102ed4:	df000017 	ldw	fp,0(sp)
81102ed8:	dec00204 	addi	sp,sp,8
81102edc:	f800283a 	ret

81102ee0 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
81102ee0:	defff004 	addi	sp,sp,-64
81102ee4:	dfc00f15 	stw	ra,60(sp)
81102ee8:	df000e15 	stw	fp,56(sp)
81102eec:	df000e04 	addi	fp,sp,56
81102ef0:	e13ffd15 	stw	r4,-12(fp)
81102ef4:	e17ffe15 	stw	r5,-8(fp)
81102ef8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81102efc:	e03ff615 	stw	zero,-40(fp)
	alt_irq_context context = 0;
81102f00:	e03ff715 	stw	zero,-36(fp)
	alt_u32 csr_status = 0;
81102f04:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81102f08:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81102f0c:	e0bffd17 	ldw	r2,-12(fp)
81102f10:	10800317 	ldw	r2,12(r2)
81102f14:	10800204 	addi	r2,r2,8
81102f18:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
81102f1c:	10bfffcc 	andi	r2,r2,65535
81102f20:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81102f24:	e0bffd17 	ldw	r2,-12(fp)
81102f28:	10800317 	ldw	r2,12(r2)
81102f2c:	10800204 	addi	r2,r2,8
81102f30:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81102f34:	1004d43a 	srli	r2,r2,16
81102f38:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
81102f3c:	00807804 	movi	r2,480
81102f40:	e0bff815 	stw	r2,-32(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81102f44:	00001906 	br	81102fac <msgdma_descriptor_sync_transfer+0xcc>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
81102f48:	01000044 	movi	r4,1
81102f4c:	11194080 	call	81119408 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81102f50:	e0bff30b 	ldhu	r2,-52(fp)
81102f54:	1084e230 	cmpltui	r2,r2,5000
81102f58:	1000051e 	bne	r2,zero,81102f70 <msgdma_descriptor_sync_transfer+0x90>
		{
			alt_printf("time out after 5 msec while waiting free FIFO buffer"
81102f5c:	012044b4 	movhi	r4,33042
81102f60:	2139e604 	addi	r4,r4,-6248
81102f64:	1119ba80 	call	81119ba8 <alt_printf>
					" for storing descriptor\n");
			return -ETIME;
81102f68:	00bff084 	movi	r2,-62
81102f6c:	0000a206 	br	811031f8 <msgdma_descriptor_sync_transfer+0x318>
		}
		counter++;
81102f70:	e0bff30b 	ldhu	r2,-52(fp)
81102f74:	10800044 	addi	r2,r2,1
81102f78:	e0bff30d 	sth	r2,-52(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81102f7c:	e0bffd17 	ldw	r2,-12(fp)
81102f80:	10800317 	ldw	r2,12(r2)
81102f84:	10800204 	addi	r2,r2,8
81102f88:	10800037 	ldwio	r2,0(r2)
			alt_printf("time out after 5 msec while waiting free FIFO buffer"
					" for storing descriptor\n");
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
81102f8c:	10bfffcc 	andi	r2,r2,65535
81102f90:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81102f94:	e0bffd17 	ldw	r2,-12(fp)
81102f98:	10800317 	ldw	r2,12(r2)
81102f9c:	10800204 	addi	r2,r2,8
81102fa0:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
81102fa4:	1004d43a 	srli	r2,r2,16
81102fa8:	e0bff515 	stw	r2,-44(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81102fac:	e0bffd17 	ldw	r2,-12(fp)
81102fb0:	10800917 	ldw	r2,36(r2)
81102fb4:	e0fff517 	ldw	r3,-44(fp)
81102fb8:	18bfe32e 	bgeu	r3,r2,81102f48 <__reset+0xfb0e2f48>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
81102fbc:	e0bffd17 	ldw	r2,-12(fp)
81102fc0:	10800917 	ldw	r2,36(r2)
81102fc4:	e0fff417 	ldw	r3,-48(fp)
81102fc8:	18bfdf2e 	bgeu	r3,r2,81102f48 <__reset+0xfb0e2f48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81102fcc:	0005303a 	rdctl	r2,status
81102fd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81102fd4:	e0fffc17 	ldw	r3,-16(fp)
81102fd8:	00bfff84 	movi	r2,-2
81102fdc:	1884703a 	and	r2,r3,r2
81102fe0:	1001703a 	wrctl	status,r2
  
  return context;
81102fe4:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81102fe8:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81102fec:	e0bffd17 	ldw	r2,-12(fp)
81102ff0:	10800317 	ldw	r2,12(r2)
81102ff4:	10800104 	addi	r2,r2,4
81102ff8:	00c00804 	movi	r3,32
81102ffc:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81103000:	e0bffd17 	ldw	r2,-12(fp)
81103004:	10800317 	ldw	r2,12(r2)
81103008:	e0fffd17 	ldw	r3,-12(fp)
8110300c:	18c00317 	ldw	r3,12(r3)
81103010:	18c00037 	ldwio	r3,0(r3)
81103014:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
81103018:	e0bffe17 	ldw	r2,-8(fp)
8110301c:	10000826 	beq	r2,zero,81103040 <msgdma_descriptor_sync_transfer+0x160>
81103020:	e0bfff17 	ldw	r2,-4(fp)
81103024:	1000061e 	bne	r2,zero,81103040 <msgdma_descriptor_sync_transfer+0x160>
		counter = 0; /* reset counter */
81103028:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		alt_printf("invalid dma descriptor option\n");
8110302c:	012044b4 	movhi	r4,33042
81103030:	2139c804 	addi	r4,r4,-6368
81103034:	1119ba80 	call	81119ba8 <alt_printf>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
81103038:	00bff084 	movi	r2,-62
8110303c:	00006e06 	br	811031f8 <msgdma_descriptor_sync_transfer+0x318>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81103040:	e0bffe17 	ldw	r2,-8(fp)
81103044:	10001b1e 	bne	r2,zero,811030b4 <msgdma_descriptor_sync_transfer+0x1d4>
81103048:	e0bfff17 	ldw	r2,-4(fp)
8110304c:	10001926 	beq	r2,zero,811030b4 <msgdma_descriptor_sync_transfer+0x1d4>
		counter = 0; /* reset counter */
81103050:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81103054:	00000d06 	br	8110308c <msgdma_descriptor_sync_transfer+0x1ac>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
81103058:	01000044 	movi	r4,1
8110305c:	11194080 	call	81119408 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81103060:	e0bff30b 	ldhu	r2,-52(fp)
81103064:	1084e230 	cmpltui	r2,r2,5000
81103068:	1000051e 	bne	r2,zero,81103080 <msgdma_descriptor_sync_transfer+0x1a0>
			{
				alt_printf("time out after 5 msec while writing extended"
8110306c:	012044b4 	movhi	r4,33042
81103070:	2139fa04 	addi	r4,r4,-6168
81103074:	1119ba80 	call	81119ba8 <alt_printf>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
81103078:	00bff084 	movi	r2,-62
8110307c:	00005e06 	br	811031f8 <msgdma_descriptor_sync_transfer+0x318>
			}
			counter++;
81103080:	e0bff30b 	ldhu	r2,-52(fp)
81103084:	10800044 	addi	r2,r2,1
81103088:	e0bff30d 	sth	r2,-52(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
8110308c:	e0bffd17 	ldw	r2,-12(fp)
81103090:	10c00317 	ldw	r3,12(r2)
81103094:	e0bffd17 	ldw	r2,-12(fp)
81103098:	10800417 	ldw	r2,16(r2)
8110309c:	e1bfff17 	ldw	r6,-4(fp)
811030a0:	100b883a 	mov	r5,r2
811030a4:	1809883a 	mov	r4,r3
811030a8:	11029c80 	call	811029c8 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811030ac:	103fea1e 	bne	r2,zero,81103058 <__reset+0xfb0e3058>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811030b0:	00000206 	br	811030bc <msgdma_descriptor_sync_transfer+0x1dc>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811030b4:	00bfffc4 	movi	r2,-1
811030b8:	00004f06 	br	811031f8 <msgdma_descriptor_sync_transfer+0x318>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811030bc:	e0bffd17 	ldw	r2,-12(fp)
811030c0:	10800317 	ldw	r2,12(r2)
811030c4:	10800104 	addi	r2,r2,4
811030c8:	e0fffd17 	ldw	r3,-12(fp)
811030cc:	19000d17 	ldw	r4,52(r3)
811030d0:	00fff2c4 	movi	r3,-53
811030d4:	20c6703a 	and	r3,r4,r3
811030d8:	18c00114 	ori	r3,r3,4
811030dc:	10c00035 	stwio	r3,0(r2)
811030e0:	e0bff717 	ldw	r2,-36(fp)
811030e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811030e8:	e0bffb17 	ldw	r2,-20(fp)
811030ec:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
811030f0:	e03ff30d 	sth	zero,-52(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
811030f4:	e0bffd17 	ldw	r2,-12(fp)
811030f8:	10800317 	ldw	r2,12(r2)
811030fc:	10800037 	ldwio	r2,0(r2)
81103100:	e0bff215 	stw	r2,-56(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81103104:	00001106 	br	8110314c <msgdma_descriptor_sync_transfer+0x26c>
		alt_busy_sleep(1); /* delay 1us */
81103108:	01000044 	movi	r4,1
8110310c:	11194080 	call	81119408 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81103110:	e0bff30b 	ldhu	r2,-52(fp)
81103114:	1084e230 	cmpltui	r2,r2,5000
81103118:	1000051e 	bne	r2,zero,81103130 <msgdma_descriptor_sync_transfer+0x250>
		{
			alt_printf("time out after 5 msec while waiting for any pending"
8110311c:	012044b4 	movhi	r4,33042
81103120:	213a0b04 	addi	r4,r4,-6100
81103124:	1119ba80 	call	81119ba8 <alt_printf>
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);

			return -ETIME;
81103128:	00bff084 	movi	r2,-62
8110312c:	00003206 	br	811031f8 <msgdma_descriptor_sync_transfer+0x318>
		}
		counter++;
81103130:	e0bff30b 	ldhu	r2,-52(fp)
81103134:	10800044 	addi	r2,r2,1
81103138:	e0bff30d 	sth	r2,-52(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8110313c:	e0bffd17 	ldw	r2,-12(fp)
81103140:	10800317 	ldw	r2,12(r2)
81103144:	10800037 	ldwio	r2,0(r2)
81103148:	e0bff215 	stw	r2,-56(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
8110314c:	e0fff217 	ldw	r3,-56(fp)
81103150:	e0bff817 	ldw	r2,-32(fp)
81103154:	1884703a 	and	r2,r3,r2
81103158:	1000031e 	bne	r2,zero,81103168 <msgdma_descriptor_sync_transfer+0x288>
8110315c:	e0bff217 	ldw	r2,-56(fp)
81103160:	1080004c 	andi	r2,r2,1
81103164:	103fe81e 	bne	r2,zero,81103108 <__reset+0xfb0e3108>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81103168:	e0fff217 	ldw	r3,-56(fp)
8110316c:	e0bff817 	ldw	r2,-32(fp)
81103170:	1884703a 	and	r2,r3,r2
81103174:	10000226 	beq	r2,zero,81103180 <msgdma_descriptor_sync_transfer+0x2a0>
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return error;
81103178:	e0bff817 	ldw	r2,-32(fp)
8110317c:	00001e06 	br	811031f8 <msgdma_descriptor_sync_transfer+0x318>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81103180:	e0bffd17 	ldw	r2,-12(fp)
81103184:	10800317 	ldw	r2,12(r2)
81103188:	10800104 	addi	r2,r2,4
8110318c:	10800037 	ldwio	r2,0(r2)
81103190:	10800814 	ori	r2,r2,32
81103194:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81103198:	0005303a 	rdctl	r2,status
8110319c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811031a0:	e0fff917 	ldw	r3,-28(fp)
811031a4:	00bfff84 	movi	r2,-2
811031a8:	1884703a 	and	r2,r3,r2
811031ac:	1001703a 	wrctl	status,r2
  
  return context;
811031b0:	e0bff917 	ldw	r2,-28(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811031b4:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811031b8:	e0bffd17 	ldw	r2,-12(fp)
811031bc:	10800317 	ldw	r2,12(r2)
811031c0:	10800104 	addi	r2,r2,4
811031c4:	e0fff617 	ldw	r3,-40(fp)
811031c8:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811031cc:	e0bffd17 	ldw	r2,-12(fp)
811031d0:	10800317 	ldw	r2,12(r2)
811031d4:	e0fffd17 	ldw	r3,-12(fp)
811031d8:	18c00317 	ldw	r3,12(r3)
811031dc:	18c00037 	ldwio	r3,0(r3)
811031e0:	10c00035 	stwio	r3,0(r2)
811031e4:	e0bff717 	ldw	r2,-36(fp)
811031e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811031ec:	e0bffa17 	ldw	r2,-24(fp)
811031f0:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
811031f4:	0005883a 	mov	r2,zero

}
811031f8:	e037883a 	mov	sp,fp
811031fc:	dfc00117 	ldw	ra,4(sp)
81103200:	df000017 	ldw	fp,0(sp)
81103204:	dec00204 	addi	sp,sp,8
81103208:	f800283a 	ret

8110320c <msgdma_construct_extended_mm_to_mm_descriptor>:
int msgdma_construct_extended_mm_to_mm_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
8110320c:	deffec04 	addi	sp,sp,-80
81103210:	dfc01315 	stw	ra,76(sp)
81103214:	df001215 	stw	fp,72(sp)
81103218:	df001204 	addi	fp,sp,72
8110321c:	e13ff715 	stw	r4,-36(fp)
81103220:	e17ff815 	stw	r5,-32(fp)
81103224:	e1bff915 	stw	r6,-28(fp)
81103228:	e1fffa15 	stw	r7,-24(fp)
8110322c:	e1800617 	ldw	r6,24(fp)
81103230:	e1400717 	ldw	r5,28(fp)
81103234:	e1000817 	ldw	r4,32(fp)
81103238:	e0c00917 	ldw	r3,36(fp)
8110323c:	e0800a17 	ldw	r2,40(fp)
81103240:	e1bffb0d 	sth	r6,-20(fp)
81103244:	e17ffc05 	stb	r5,-16(fp)
81103248:	e13ffd05 	stb	r4,-12(fp)
8110324c:	e0fffe0d 	sth	r3,-8(fp)
81103250:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(dev, descriptor, read_address,
81103254:	e0bffb0b 	ldhu	r2,-20(fp)
81103258:	e0fffc03 	ldbu	r3,-16(fp)
8110325c:	e13ffd03 	ldbu	r4,-12(fp)
81103260:	e17ffe0b 	ldhu	r5,-8(fp)
81103264:	e1bfff0b 	ldhu	r6,-4(fp)
81103268:	d9800815 	stw	r6,32(sp)
8110326c:	d9400715 	stw	r5,28(sp)
81103270:	d9000615 	stw	r4,24(sp)
81103274:	d8c00515 	stw	r3,20(sp)
81103278:	d8800415 	stw	r2,16(sp)
8110327c:	e0800517 	ldw	r2,20(fp)
81103280:	d8800315 	stw	r2,12(sp)
81103284:	e0800417 	ldw	r2,16(fp)
81103288:	d8800215 	stw	r2,8(sp)
8110328c:	e0800317 	ldw	r2,12(fp)
81103290:	d8800115 	stw	r2,4(sp)
81103294:	e0800217 	ldw	r2,8(fp)
81103298:	d8800015 	stw	r2,0(sp)
8110329c:	e1fffa17 	ldw	r7,-24(fp)
811032a0:	e1bff917 	ldw	r6,-28(fp)
811032a4:	e17ff817 	ldw	r5,-32(fp)
811032a8:	e13ff717 	ldw	r4,-36(fp)
811032ac:	1102afc0 	call	81102afc <msgdma_construct_extended_descriptor>
			write_address, length, control, read_address_high,
			write_address_high, sequence_number, read_burst_count,
			write_burst_count, read_stride, write_stride);

}
811032b0:	e037883a 	mov	sp,fp
811032b4:	dfc00117 	ldw	ra,4(sp)
811032b8:	df000017 	ldw	fp,0(sp)
811032bc:	dec00204 	addi	sp,sp,8
811032c0:	f800283a 	ret

811032c4 <msgdma_extended_descriptor_async_transfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int msgdma_extended_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *desc) {
811032c4:	defffc04 	addi	sp,sp,-16
811032c8:	dfc00315 	stw	ra,12(sp)
811032cc:	df000215 	stw	fp,8(sp)
811032d0:	df000204 	addi	fp,sp,8
811032d4:	e13ffe15 	stw	r4,-8(fp)
811032d8:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(dev, NULL, desc);
811032dc:	e1bfff17 	ldw	r6,-4(fp)
811032e0:	000b883a 	mov	r5,zero
811032e4:	e13ffe17 	ldw	r4,-8(fp)
811032e8:	1102c580 	call	81102c58 <msgdma_descriptor_async_transfer>
}
811032ec:	e037883a 	mov	sp,fp
811032f0:	dfc00117 	ldw	ra,4(sp)
811032f4:	df000017 	ldw	fp,0(sp)
811032f8:	dec00204 	addi	sp,sp,8
811032fc:	f800283a 	ret

81103300 <msgdma_extended_descriptor_sync_transfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int msgdma_extended_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *desc) {
81103300:	defffc04 	addi	sp,sp,-16
81103304:	dfc00315 	stw	ra,12(sp)
81103308:	df000215 	stw	fp,8(sp)
8110330c:	df000204 	addi	fp,sp,8
81103310:	e13ffe15 	stw	r4,-8(fp)
81103314:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(dev, NULL, desc);
81103318:	e1bfff17 	ldw	r6,-4(fp)
8110331c:	000b883a 	mov	r5,zero
81103320:	e13ffe17 	ldw	r4,-8(fp)
81103324:	1102ee00 	call	81102ee0 <msgdma_descriptor_sync_transfer>
}
81103328:	e037883a 	mov	sp,fp
8110332c:	dfc00117 	ldw	ra,4(sp)
81103330:	df000017 	ldw	fp,0(sp)
81103334:	dec00204 	addi	sp,sp,8
81103338:	f800283a 	ret

8110333c <POWER_SPI_RW>:
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock


// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN, bool bSGL, alt_u32 *pValue)
{
8110333c:	defff204 	addi	sp,sp,-56
81103340:	dfc00d15 	stw	ra,52(sp)
81103344:	df000c15 	stw	fp,48(sp)
81103348:	df000c04 	addi	fp,sp,48
8110334c:	2007883a 	mov	r3,r4
81103350:	2805883a 	mov	r2,r5
81103354:	e1bffe15 	stw	r6,-8(fp)
81103358:	e1ffff15 	stw	r7,-4(fp)
8110335c:	e0fffc05 	stb	r3,-16(fp)
81103360:	e0bffd05 	stb	r2,-12(fp)
    bool bSuccess;
    alt_u8 Config8;
    alt_u32 Value32=0, Mask32;
81103364:	e03ff515 	stw	zero,-44(fp)
    int i, nWait = 0, nZeroCnt;
81103368:	e03ff815 	stw	zero,-32(fp)
    const int nMaxWait = 1000000;
8110336c:	008003f4 	movhi	r2,15
81103370:	10909004 	addi	r2,r2,16960
81103374:	e0bffa15 	stw	r2,-24(fp)
    
    //
    Config8 = 0x80; 
81103378:	00bfe004 	movi	r2,-128
8110337c:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bEN)?0x20:0x00;
81103380:	e0bffe17 	ldw	r2,-8(fp)
81103384:	10000226 	beq	r2,zero,81103390 <POWER_SPI_RW+0x54>
81103388:	00800804 	movi	r2,32
8110338c:	00000106 	br	81103394 <POWER_SPI_RW+0x58>
81103390:	0005883a 	mov	r2,zero
81103394:	e0fff403 	ldbu	r3,-48(fp)
81103398:	10c4b03a 	or	r2,r2,r3
8110339c:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSGL)?0x10:0x00;
811033a0:	e0800217 	ldw	r2,8(fp)
811033a4:	10000226 	beq	r2,zero,811033b0 <POWER_SPI_RW+0x74>
811033a8:	00800404 	movi	r2,16
811033ac:	00000106 	br	811033b4 <POWER_SPI_RW+0x78>
811033b0:	0005883a 	mov	r2,zero
811033b4:	e0fff403 	ldbu	r3,-48(fp)
811033b8:	10c4b03a 	or	r2,r2,r3
811033bc:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSIGN)?0x08:0x00;
811033c0:	e0bfff17 	ldw	r2,-4(fp)
811033c4:	10000226 	beq	r2,zero,811033d0 <POWER_SPI_RW+0x94>
811033c8:	00800204 	movi	r2,8
811033cc:	00000106 	br	811033d4 <POWER_SPI_RW+0x98>
811033d0:	0005883a 	mov	r2,zero
811033d4:	e0fff403 	ldbu	r3,-48(fp)
811033d8:	10c4b03a 	or	r2,r2,r3
811033dc:	e0bff405 	stb	r2,-48(fp)
    Config8 |= NextChannel & 0x07; // channel
811033e0:	e0bffd03 	ldbu	r2,-12(fp)
811033e4:	108001cc 	andi	r2,r2,7
811033e8:	1007883a 	mov	r3,r2
811033ec:	e0bff403 	ldbu	r2,-48(fp)
811033f0:	1884b03a 	or	r2,r3,r2
811033f4:	e0bff405 	stb	r2,-48(fp)
    
    SPI_FO(0); // use internal conversion clock
811033f8:	0007883a 	mov	r3,zero
811033fc:	00a00034 	movhi	r2,32768
81103400:	10824404 	addi	r2,r2,2320
81103404:	10c00035 	stwio	r3,0(r2)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
81103408:	0007883a 	mov	r3,zero
8110340c:	00a00034 	movhi	r2,32768
81103410:	10824c04 	addi	r2,r2,2352
81103414:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(IcIndex, 0);  // chip select: active
81103418:	e0bffc03 	ldbu	r2,-16(fp)
8110341c:	1000021e 	bne	r2,zero,81103428 <POWER_SPI_RW+0xec>
81103420:	00c00084 	movi	r3,2
81103424:	00000106 	br	8110342c <POWER_SPI_RW+0xf0>
81103428:	00c00044 	movi	r3,1
8110342c:	00a00034 	movhi	r2,32768
81103430:	10824804 	addi	r2,r2,2336
81103434:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81103438:	010003c4 	movi	r4,15
8110343c:	111a2000 	call	8111a200 <usleep>
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81103440:	00000306 	br	81103450 <POWER_SPI_RW+0x114>
        nWait++;
81103444:	e0bff817 	ldw	r2,-32(fp)
81103448:	10800044 	addi	r2,r2,1
8110344c:	e0bff815 	stw	r2,-32(fp)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
    SPI_CS_N(IcIndex, 0);  // chip select: active
    SPI_DELAY;
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81103450:	00a00034 	movhi	r2,32768
81103454:	10825404 	addi	r2,r2,2384
81103458:	10800037 	ldwio	r2,0(r2)
8110345c:	1080004c 	andi	r2,r2,1
81103460:	10000326 	beq	r2,zero,81103470 <POWER_SPI_RW+0x134>
81103464:	e0fff817 	ldw	r3,-32(fp)
81103468:	e0bffa17 	ldw	r2,-24(fp)
8110346c:	18bff516 	blt	r3,r2,81103444 <__reset+0xfb0e3444>
        nWait++;
    }
    
    if (SPI_SDO){
81103470:	00a00034 	movhi	r2,32768
81103474:	10825404 	addi	r2,r2,2384
81103478:	10800037 	ldwio	r2,0(r2)
8110347c:	1080004c 	andi	r2,r2,1
81103480:	10000626 	beq	r2,zero,8110349c <POWER_SPI_RW+0x160>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
81103484:	00c000c4 	movi	r3,3
81103488:	00a00034 	movhi	r2,32768
8110348c:	10824804 	addi	r2,r2,2336
81103490:	10c00035 	stwio	r3,0(r2)
//        printf("Timeout \r\n");
        return FALSE;
81103494:	0005883a 	mov	r2,zero
81103498:	0000db06 	br	81103808 <POWER_SPI_RW+0x4cc>
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
8110349c:	e03ff715 	stw	zero,-36(fp)
811034a0:	00002406 	br	81103534 <POWER_SPI_RW+0x1f8>
    // ignore EOC/ and DMY bits
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
811034a4:	e0bff403 	ldbu	r2,-48(fp)
811034a8:	10803fcc 	andi	r2,r2,255
811034ac:	1004d1fa 	srli	r2,r2,7
811034b0:	10c03fcc 	andi	r3,r2,255
811034b4:	00a00034 	movhi	r2,32768
811034b8:	10825004 	addi	r2,r2,2368
811034bc:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
811034c0:	e0bff403 	ldbu	r2,-48(fp)
811034c4:	1085883a 	add	r2,r2,r2
811034c8:	e0bff405 	stb	r2,-48(fp)
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
811034cc:	e0bff517 	ldw	r2,-44(fp)
811034d0:	1085883a 	add	r2,r2,r2
811034d4:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
811034d8:	00a00034 	movhi	r2,32768
811034dc:	10825404 	addi	r2,r2,2384
811034e0:	10800037 	ldwio	r2,0(r2)
811034e4:	1080004c 	andi	r2,r2,1
811034e8:	1007883a 	mov	r3,r2
811034ec:	e0bff517 	ldw	r2,-44(fp)
811034f0:	10c4b03a 	or	r2,r2,r3
811034f4:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
811034f8:	00c00044 	movi	r3,1
811034fc:	00a00034 	movhi	r2,32768
81103500:	10824c04 	addi	r2,r2,2352
81103504:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103508:	010003c4 	movi	r4,15
8110350c:	111a2000 	call	8111a200 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81103510:	0007883a 	mov	r3,zero
81103514:	00a00034 	movhi	r2,32768
81103518:	10824c04 	addi	r2,r2,2352
8110351c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103520:	010003c4 	movi	r4,15
81103524:	111a2000 	call	8111a200 <usleep>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
//        printf("Timeout \r\n");
        return FALSE;
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81103528:	e0bff717 	ldw	r2,-36(fp)
8110352c:	10800044 	addi	r2,r2,1
81103530:	e0bff715 	stw	r2,-36(fp)
81103534:	e0bff717 	ldw	r2,-36(fp)
81103538:	10800090 	cmplti	r2,r2,2
8110353c:	103fd91e 	bne	r2,zero,811034a4 <__reset+0xfb0e34a4>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81103540:	e03ff715 	stw	zero,-36(fp)
81103544:	00002406 	br	811035d8 <POWER_SPI_RW+0x29c>
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81103548:	e0bff403 	ldbu	r2,-48(fp)
8110354c:	10803fcc 	andi	r2,r2,255
81103550:	1004d1fa 	srli	r2,r2,7
81103554:	10c03fcc 	andi	r3,r2,255
81103558:	00a00034 	movhi	r2,32768
8110355c:	10825004 	addi	r2,r2,2368
81103560:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81103564:	e0bff403 	ldbu	r2,-48(fp)
81103568:	1085883a 	add	r2,r2,r2
8110356c:	e0bff405 	stb	r2,-48(fp)
        
        Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81103570:	e0bff517 	ldw	r2,-44(fp)
81103574:	1085883a 	add	r2,r2,r2
81103578:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
8110357c:	00a00034 	movhi	r2,32768
81103580:	10825404 	addi	r2,r2,2384
81103584:	10800037 	ldwio	r2,0(r2)
81103588:	1080004c 	andi	r2,r2,1
8110358c:	1007883a 	mov	r3,r2
81103590:	e0bff517 	ldw	r2,-44(fp)
81103594:	10c4b03a 	or	r2,r2,r3
81103598:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
8110359c:	00c00044 	movi	r3,1
811035a0:	00a00034 	movhi	r2,32768
811035a4:	10824c04 	addi	r2,r2,2352
811035a8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811035ac:	010003c4 	movi	r4,15
811035b0:	111a2000 	call	8111a200 <usleep>
        SPI_SCK(0);//sck=0; // clock low
811035b4:	0007883a 	mov	r3,zero
811035b8:	00a00034 	movhi	r2,32768
811035bc:	10824c04 	addi	r2,r2,2352
811035c0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811035c4:	010003c4 	movi	r4,15
811035c8:	111a2000 	call	8111a200 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
811035cc:	e0bff717 	ldw	r2,-36(fp)
811035d0:	10800044 	addi	r2,r2,1
811035d4:	e0bff715 	stw	r2,-36(fp)
811035d8:	e0bff717 	ldw	r2,-36(fp)
811035dc:	10800210 	cmplti	r2,r2,8
811035e0:	103fd91e 	bne	r2,zero,81103548 <__reset+0xfb0e3548>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
811035e4:	e03ff715 	stw	zero,-36(fp)
811035e8:	00001a06 	br	81103654 <POWER_SPI_RW+0x318>
    {
        Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
811035ec:	e0bff517 	ldw	r2,-44(fp)
811035f0:	1085883a 	add	r2,r2,r2
811035f4:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
811035f8:	00a00034 	movhi	r2,32768
811035fc:	10825404 	addi	r2,r2,2384
81103600:	10800037 	ldwio	r2,0(r2)
81103604:	1080004c 	andi	r2,r2,1
81103608:	1007883a 	mov	r3,r2
8110360c:	e0bff517 	ldw	r2,-44(fp)
81103610:	10c4b03a 	or	r2,r2,r3
81103614:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81103618:	00c00044 	movi	r3,1
8110361c:	00a00034 	movhi	r2,32768
81103620:	10824c04 	addi	r2,r2,2352
81103624:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103628:	010003c4 	movi	r4,15
8110362c:	111a2000 	call	8111a200 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81103630:	0007883a 	mov	r3,zero
81103634:	00a00034 	movhi	r2,32768
81103638:	10824c04 	addi	r2,r2,2352
8110363c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103640:	010003c4 	movi	r4,15
81103644:	111a2000 	call	8111a200 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81103648:	e0bff717 	ldw	r2,-36(fp)
8110364c:	10800044 	addi	r2,r2,1
81103650:	e0bff715 	stw	r2,-36(fp)
81103654:	e0bff717 	ldw	r2,-36(fp)
81103658:	10800210 	cmplti	r2,r2,8
8110365c:	103fe31e 	bne	r2,zero,811035ec <__reset+0xfb0e35ec>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
81103660:	e03ff715 	stw	zero,-36(fp)
81103664:	00001a06 	br	811036d0 <POWER_SPI_RW+0x394>
    {
        Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
81103668:	e0bff517 	ldw	r2,-44(fp)
8110366c:	1085883a 	add	r2,r2,r2
81103670:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_1.0 = sdo; // load lsb
81103674:	00a00034 	movhi	r2,32768
81103678:	10825404 	addi	r2,r2,2384
8110367c:	10800037 	ldwio	r2,0(r2)
81103680:	1080004c 	andi	r2,r2,1
81103684:	1007883a 	mov	r3,r2
81103688:	e0bff517 	ldw	r2,-44(fp)
8110368c:	10c4b03a 	or	r2,r2,r3
81103690:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81103694:	00c00044 	movi	r3,1
81103698:	00a00034 	movhi	r2,32768
8110369c:	10824c04 	addi	r2,r2,2352
811036a0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811036a4:	010003c4 	movi	r4,15
811036a8:	111a2000 	call	8111a200 <usleep>
        SPI_SCK(0);//sck=0; // clock low
811036ac:	0007883a 	mov	r3,zero
811036b0:	00a00034 	movhi	r2,32768
811036b4:	10824c04 	addi	r2,r2,2352
811036b8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811036bc:	010003c4 	movi	r4,15
811036c0:	111a2000 	call	8111a200 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
811036c4:	e0bff717 	ldw	r2,-36(fp)
811036c8:	10800044 	addi	r2,r2,1
811036cc:	e0bff715 	stw	r2,-36(fp)
811036d0:	e0bff717 	ldw	r2,-36(fp)
811036d4:	10800210 	cmplti	r2,r2,8
811036d8:	103fe31e 	bne	r2,zero,81103668 <__reset+0xfb0e3668>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
811036dc:	e03ff715 	stw	zero,-36(fp)
811036e0:	00001a06 	br	8110374c <POWER_SPI_RW+0x410>
    {
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
811036e4:	e0bff517 	ldw	r2,-44(fp)
811036e8:	1085883a 	add	r2,r2,r2
811036ec:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
811036f0:	00a00034 	movhi	r2,32768
811036f4:	10825404 	addi	r2,r2,2384
811036f8:	10800037 	ldwio	r2,0(r2)
811036fc:	1080004c 	andi	r2,r2,1
81103700:	1007883a 	mov	r3,r2
81103704:	e0bff517 	ldw	r2,-44(fp)
81103708:	10c4b03a 	or	r2,r2,r3
8110370c:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81103710:	00c00044 	movi	r3,1
81103714:	00a00034 	movhi	r2,32768
81103718:	10824c04 	addi	r2,r2,2352
8110371c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103720:	010003c4 	movi	r4,15
81103724:	111a2000 	call	8111a200 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81103728:	0007883a 	mov	r3,zero
8110372c:	00a00034 	movhi	r2,32768
81103730:	10824c04 	addi	r2,r2,2352
81103734:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103738:	010003c4 	movi	r4,15
8110373c:	111a2000 	call	8111a200 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
81103740:	e0bff717 	ldw	r2,-36(fp)
81103744:	10800044 	addi	r2,r2,1
81103748:	e0bff715 	stw	r2,-36(fp)
8110374c:	e0bff717 	ldw	r2,-36(fp)
81103750:	10800190 	cmplti	r2,r2,6
81103754:	103fe31e 	bne	r2,zero,811036e4 <__reset+0xfb0e36e4>
        SPI_SCK(1);//sck=1; // clock high
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    SPI_SCK(1);
81103758:	00c00044 	movi	r3,1
8110375c:	00a00034 	movhi	r2,32768
81103760:	10824c04 	addi	r2,r2,2352
81103764:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81103768:	010003c4 	movi	r4,15
8110376c:	111a2000 	call	8111a200 <usleep>
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
81103770:	00c000c4 	movi	r3,3
81103774:	00a00034 	movhi	r2,32768
81103778:	10824804 	addi	r2,r2,2336
8110377c:	10c00035 	stwio	r3,0(r2)
    
    // check parity
    nZeroCnt = 0;
81103780:	e03ff915 	stw	zero,-28(fp)
    Mask32 = 0x01;
81103784:	00800044 	movi	r2,1
81103788:	e0bff615 	stw	r2,-40(fp)
    for(i=0;i<32;i++){
8110378c:	e03ff715 	stw	zero,-36(fp)
81103790:	00000d06 	br	811037c8 <POWER_SPI_RW+0x48c>
        if ((Value32 & Mask32) == 0x00){
81103794:	e0fff517 	ldw	r3,-44(fp)
81103798:	e0bff617 	ldw	r2,-40(fp)
8110379c:	1884703a 	and	r2,r3,r2
811037a0:	1000031e 	bne	r2,zero,811037b0 <POWER_SPI_RW+0x474>
            nZeroCnt++;
811037a4:	e0bff917 	ldw	r2,-28(fp)
811037a8:	10800044 	addi	r2,r2,1
811037ac:	e0bff915 	stw	r2,-28(fp)
        }
        Mask32 <<= 1;
811037b0:	e0bff617 	ldw	r2,-40(fp)
811037b4:	1085883a 	add	r2,r2,r2
811037b8:	e0bff615 	stw	r2,-40(fp)
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
    
    // check parity
    nZeroCnt = 0;
    Mask32 = 0x01;
    for(i=0;i<32;i++){
811037bc:	e0bff717 	ldw	r2,-36(fp)
811037c0:	10800044 	addi	r2,r2,1
811037c4:	e0bff715 	stw	r2,-36(fp)
811037c8:	e0bff717 	ldw	r2,-36(fp)
811037cc:	10800810 	cmplti	r2,r2,32
811037d0:	103ff01e 	bne	r2,zero,81103794 <__reset+0xfb0e3794>
        if ((Value32 & Mask32) == 0x00){
            nZeroCnt++;
        }
        Mask32 <<= 1;
    }
    bSuccess = (nZeroCnt&0x01)?FALSE:TRUE;
811037d4:	e0bff917 	ldw	r2,-28(fp)
811037d8:	1080004c 	andi	r2,r2,1
811037dc:	1005003a 	cmpeq	r2,r2,zero
811037e0:	10803fcc 	andi	r2,r2,255
811037e4:	e0bffb15 	stw	r2,-20(fp)
    if (!bSuccess){
811037e8:	e0bffb17 	ldw	r2,-20(fp)
811037ec:	1000021e 	bne	r2,zero,811037f8 <POWER_SPI_RW+0x4bc>
//        printf("Parity Check Error \r\n");
        return FALSE;
811037f0:	0005883a 	mov	r2,zero
811037f4:	00000406 	br	81103808 <POWER_SPI_RW+0x4cc>
    }        
    
    
    *pValue = Value32;
811037f8:	e0800317 	ldw	r2,12(fp)
811037fc:	e0fff517 	ldw	r3,-44(fp)
81103800:	10c00015 	stw	r3,0(r2)
    
    return bSuccess;
81103804:	e0bffb17 	ldw	r2,-20(fp)
}
81103808:	e037883a 	mov	sp,fp
8110380c:	dfc00117 	ldw	ra,4(sp)
81103810:	df000017 	ldw	fp,0(sp)
81103814:	dec00204 	addi	sp,sp,8
81103818:	f800283a 	ret

8110381c <rstc_simucam_reset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void rstc_simucam_reset(alt_u16 rst_cnt) {
8110381c:	defffc04 	addi	sp,sp,-16
81103820:	dfc00315 	stw	ra,12(sp)
81103824:	df000215 	stw	fp,8(sp)
81103828:	df000204 	addi	fp,sp,8
8110382c:	2005883a 	mov	r2,r4
81103830:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 reg = 0;
81103834:	e03ffe15 	stw	zero,-8(fp)

	reg |= (alt_u32) (rst_cnt & RSTC_SIMUCAM_RST_TIMER_MASK);
81103838:	e0bfff0b 	ldhu	r2,-4(fp)
8110383c:	e0fffe17 	ldw	r3,-8(fp)
81103840:	1884b03a 	or	r2,r3,r2
81103844:	e0bffe15 	stw	r2,-8(fp)
	reg |= (alt_u32) RSTC_SIMUCAM_RST_CONTROL_MASK;
81103848:	e0bffe17 	ldw	r2,-8(fp)
8110384c:	10800074 	orhi	r2,r2,1
81103850:	e0bffe15 	stw	r2,-8(fp)
	write_reg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81103854:	e1bffe17 	ldw	r6,-8(fp)
81103858:	000b883a 	mov	r5,zero
8110385c:	01200034 	movhi	r4,32768
81103860:	21020004 	addi	r4,r4,2048
81103864:	11039540 	call	81103954 <write_reg>
			RSTC_SIMUCAM_RESET_REG_OFFSET, reg);
}
81103868:	0001883a 	nop
8110386c:	e037883a 	mov	sp,fp
81103870:	dfc00117 	ldw	ra,4(sp)
81103874:	df000017 	ldw	fp,0(sp)
81103878:	dec00204 	addi	sp,sp,8
8110387c:	f800283a 	ret

81103880 <rstc_release_device_reset>:

void rstc_release_device_reset(alt_u32 rst_mask) {
81103880:	defffc04 	addi	sp,sp,-16
81103884:	dfc00315 	stw	ra,12(sp)
81103888:	df000215 	stw	fp,8(sp)
8110388c:	df000204 	addi	fp,sp,8
81103890:	e13fff15 	stw	r4,-4(fp)
	alt_u32 reg = 0;
81103894:	e03ffe15 	stw	zero,-8(fp)

	reg = read_reg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81103898:	01400044 	movi	r5,1
8110389c:	01200034 	movhi	r4,32768
811038a0:	21020004 	addi	r4,r4,2048
811038a4:	11039a00 	call	811039a0 <read_reg>
811038a8:	e0bffe15 	stw	r2,-8(fp)
			RSTC_DEVICE_RESET_REG_OFFSET);
	reg &= ~((alt_u32) rst_mask);
811038ac:	e0bfff17 	ldw	r2,-4(fp)
811038b0:	0084303a 	nor	r2,zero,r2
811038b4:	e0fffe17 	ldw	r3,-8(fp)
811038b8:	1884703a 	and	r2,r3,r2
811038bc:	e0bffe15 	stw	r2,-8(fp)
	write_reg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811038c0:	e1bffe17 	ldw	r6,-8(fp)
811038c4:	01400044 	movi	r5,1
811038c8:	01200034 	movhi	r4,32768
811038cc:	21020004 	addi	r4,r4,2048
811038d0:	11039540 	call	81103954 <write_reg>
			RSTC_DEVICE_RESET_REG_OFFSET, reg);
}
811038d4:	0001883a 	nop
811038d8:	e037883a 	mov	sp,fp
811038dc:	dfc00117 	ldw	ra,4(sp)
811038e0:	df000017 	ldw	fp,0(sp)
811038e4:	dec00204 	addi	sp,sp,8
811038e8:	f800283a 	ret

811038ec <rstc_hold_device_reset>:

void rstc_hold_device_reset(alt_u32 rst_mask) {
811038ec:	defffc04 	addi	sp,sp,-16
811038f0:	dfc00315 	stw	ra,12(sp)
811038f4:	df000215 	stw	fp,8(sp)
811038f8:	df000204 	addi	fp,sp,8
811038fc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 reg = 0;
81103900:	e03ffe15 	stw	zero,-8(fp)

	reg = read_reg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81103904:	01400044 	movi	r5,1
81103908:	01200034 	movhi	r4,32768
8110390c:	21020004 	addi	r4,r4,2048
81103910:	11039a00 	call	811039a0 <read_reg>
81103914:	e0bffe15 	stw	r2,-8(fp)
			RSTC_DEVICE_RESET_REG_OFFSET);
	reg |= (alt_u32) rst_mask;
81103918:	e0fffe17 	ldw	r3,-8(fp)
8110391c:	e0bfff17 	ldw	r2,-4(fp)
81103920:	1884b03a 	or	r2,r3,r2
81103924:	e0bffe15 	stw	r2,-8(fp)
	write_reg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81103928:	e1bffe17 	ldw	r6,-8(fp)
8110392c:	01400044 	movi	r5,1
81103930:	01200034 	movhi	r4,32768
81103934:	21020004 	addi	r4,r4,2048
81103938:	11039540 	call	81103954 <write_reg>
			RSTC_DEVICE_RESET_REG_OFFSET, reg);
}
8110393c:	0001883a 	nop
81103940:	e037883a 	mov	sp,fp
81103944:	dfc00117 	ldw	ra,4(sp)
81103948:	df000017 	ldw	fp,0(sp)
8110394c:	dec00204 	addi	sp,sp,8
81103950:	f800283a 	ret

81103954 <write_reg>:
//! [public functions]

//! [private functions]
static void write_reg(alt_u32 *address, alt_u32 offset, alt_u32 value) {
81103954:	defffc04 	addi	sp,sp,-16
81103958:	df000315 	stw	fp,12(sp)
8110395c:	df000304 	addi	fp,sp,12
81103960:	e13ffd15 	stw	r4,-12(fp)
81103964:	e17ffe15 	stw	r5,-8(fp)
81103968:	e1bfff15 	stw	r6,-4(fp)
	*(address + offset) = value;
8110396c:	e0bffe17 	ldw	r2,-8(fp)
81103970:	1085883a 	add	r2,r2,r2
81103974:	1085883a 	add	r2,r2,r2
81103978:	1007883a 	mov	r3,r2
8110397c:	e0bffd17 	ldw	r2,-12(fp)
81103980:	10c5883a 	add	r2,r2,r3
81103984:	e0ffff17 	ldw	r3,-4(fp)
81103988:	10c00015 	stw	r3,0(r2)
}
8110398c:	0001883a 	nop
81103990:	e037883a 	mov	sp,fp
81103994:	df000017 	ldw	fp,0(sp)
81103998:	dec00104 	addi	sp,sp,4
8110399c:	f800283a 	ret

811039a0 <read_reg>:

static alt_u32 read_reg(alt_u32 *address, alt_u32 offset) {
811039a0:	defffc04 	addi	sp,sp,-16
811039a4:	df000315 	stw	fp,12(sp)
811039a8:	df000304 	addi	fp,sp,12
811039ac:	e13ffe15 	stw	r4,-8(fp)
811039b0:	e17fff15 	stw	r5,-4(fp)
	alt_u32 value;

	value = *(address + offset);
811039b4:	e0bfff17 	ldw	r2,-4(fp)
811039b8:	1085883a 	add	r2,r2,r2
811039bc:	1085883a 	add	r2,r2,r2
811039c0:	1007883a 	mov	r3,r2
811039c4:	e0bffe17 	ldw	r2,-8(fp)
811039c8:	10c5883a 	add	r2,r2,r3
811039cc:	10800017 	ldw	r2,0(r2)
811039d0:	e0bffd15 	stw	r2,-12(fp)
	return value;
811039d4:	e0bffd17 	ldw	r2,-12(fp)
}
811039d8:	e037883a 	mov	sp,fp
811039dc:	df000017 	ldw	fp,0(sp)
811039e0:	dec00104 	addi	sp,sp,4
811039e4:	f800283a 	ret

811039e8 <v_spi_start>:
#define SPI_CS_N(x) IOWR_ALTERA_AVALON_PIO_DATA(RTCC_CS_N_BASE,x)
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(RTCC_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(RTCC_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(150)  // based on 50MHZ of CPU clock

void v_spi_start(void){
811039e8:	defffe04 	addi	sp,sp,-8
811039ec:	dfc00115 	stw	ra,4(sp)
811039f0:	df000015 	stw	fp,0(sp)
811039f4:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
811039f8:	0007883a 	mov	r3,zero
811039fc:	00a00034 	movhi	r2,32768
81103a00:	10823004 	addi	r2,r2,2240
81103a04:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
81103a08:	0007883a 	mov	r3,zero
81103a0c:	00a00034 	movhi	r2,32768
81103a10:	10822c04 	addi	r2,r2,2224
81103a14:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81103a18:	01002584 	movi	r4,150
81103a1c:	111a2000 	call	8111a200 <usleep>
}
81103a20:	0001883a 	nop
81103a24:	e037883a 	mov	sp,fp
81103a28:	dfc00117 	ldw	ra,4(sp)
81103a2c:	df000017 	ldw	fp,0(sp)
81103a30:	dec00204 	addi	sp,sp,8
81103a34:	f800283a 	ret

81103a38 <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
81103a38:	defffc04 	addi	sp,sp,-16
81103a3c:	dfc00315 	stw	ra,12(sp)
81103a40:	df000215 	stw	fp,8(sp)
81103a44:	df000204 	addi	fp,sp,8
81103a48:	2005883a 	mov	r2,r4
81103a4c:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
81103a50:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81103a54:	00bfe004 	movi	r2,-128
81103a58:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81103a5c:	e03ffe05 	stb	zero,-8(fp)
81103a60:	00001b06 	br	81103ad0 <v_spi_send_byte+0x98>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
81103a64:	e0ffff03 	ldbu	r3,-4(fp)
81103a68:	e0bffe43 	ldbu	r2,-7(fp)
81103a6c:	1884703a 	and	r2,r3,r2
81103a70:	10803fcc 	andi	r2,r2,255
81103a74:	1004c03a 	cmpne	r2,r2,zero
81103a78:	10c03fcc 	andi	r3,r2,255
81103a7c:	00a00034 	movhi	r2,32768
81103a80:	10823404 	addi	r2,r2,2256
81103a84:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
81103a88:	e0bffe43 	ldbu	r2,-7(fp)
81103a8c:	1004d07a 	srli	r2,r2,1
81103a90:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
81103a94:	00c00044 	movi	r3,1
81103a98:	00a00034 	movhi	r2,32768
81103a9c:	10823004 	addi	r2,r2,2240
81103aa0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103aa4:	01002584 	movi	r4,150
81103aa8:	111a2000 	call	8111a200 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81103aac:	0007883a 	mov	r3,zero
81103ab0:	00a00034 	movhi	r2,32768
81103ab4:	10823004 	addi	r2,r2,2240
81103ab8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103abc:	01002584 	movi	r4,150
81103ac0:	111a2000 	call	8111a200 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81103ac4:	e0bffe03 	ldbu	r2,-8(fp)
81103ac8:	10800044 	addi	r2,r2,1
81103acc:	e0bffe05 	stb	r2,-8(fp)
81103ad0:	e0bffe03 	ldbu	r2,-8(fp)
81103ad4:	10800230 	cmpltui	r2,r2,8
81103ad8:	103fe21e 	bne	r2,zero,81103a64 <__reset+0xfb0e3a64>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
81103adc:	0001883a 	nop
81103ae0:	e037883a 	mov	sp,fp
81103ae4:	dfc00117 	ldw	ra,4(sp)
81103ae8:	df000017 	ldw	fp,0(sp)
81103aec:	dec00204 	addi	sp,sp,8
81103af0:	f800283a 	ret

81103af4 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
81103af4:	defffd04 	addi	sp,sp,-12
81103af8:	dfc00215 	stw	ra,8(sp)
81103afc:	df000115 	stw	fp,4(sp)
81103b00:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
81103b04:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
81103b08:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
81103b0c:	e03fff05 	stb	zero,-4(fp)
81103b10:	00001a06 	br	81103b7c <uc_spi_get_byte+0x88>
    {
        uc_data <<= 1;
81103b14:	e0bfff43 	ldbu	r2,-3(fp)
81103b18:	1085883a 	add	r2,r2,r2
81103b1c:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
81103b20:	00a00034 	movhi	r2,32768
81103b24:	10823804 	addi	r2,r2,2272
81103b28:	10800037 	ldwio	r2,0(r2)
81103b2c:	1080004c 	andi	r2,r2,1
81103b30:	1007883a 	mov	r3,r2
81103b34:	e0bfff43 	ldbu	r2,-3(fp)
81103b38:	1884b03a 	or	r2,r3,r2
81103b3c:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81103b40:	00c00044 	movi	r3,1
81103b44:	00a00034 	movhi	r2,32768
81103b48:	10823004 	addi	r2,r2,2240
81103b4c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103b50:	01002584 	movi	r4,150
81103b54:	111a2000 	call	8111a200 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81103b58:	0007883a 	mov	r3,zero
81103b5c:	00a00034 	movhi	r2,32768
81103b60:	10823004 	addi	r2,r2,2240
81103b64:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103b68:	01002584 	movi	r4,150
81103b6c:	111a2000 	call	8111a200 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
81103b70:	e0bfff03 	ldbu	r2,-4(fp)
81103b74:	10800044 	addi	r2,r2,1
81103b78:	e0bfff05 	stb	r2,-4(fp)
81103b7c:	e0bfff03 	ldbu	r2,-4(fp)
81103b80:	10800230 	cmpltui	r2,r2,8
81103b84:	103fe31e 	bne	r2,zero,81103b14 <__reset+0xfb0e3b14>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
81103b88:	e0bfff43 	ldbu	r2,-3(fp)
}
81103b8c:	e037883a 	mov	sp,fp
81103b90:	dfc00117 	ldw	ra,4(sp)
81103b94:	df000017 	ldw	fp,0(sp)
81103b98:	dec00204 	addi	sp,sp,8
81103b9c:	f800283a 	ret

81103ba0 <v_spi_end>:

void v_spi_end(void){
81103ba0:	defffe04 	addi	sp,sp,-8
81103ba4:	dfc00115 	stw	ra,4(sp)
81103ba8:	df000015 	stw	fp,0(sp)
81103bac:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
81103bb0:	0007883a 	mov	r3,zero
81103bb4:	00a00034 	movhi	r2,32768
81103bb8:	10823004 	addi	r2,r2,2240
81103bbc:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81103bc0:	01002584 	movi	r4,150
81103bc4:	111a2000 	call	8111a200 <usleep>
    SPI_CS_N(1);
81103bc8:	00c00044 	movi	r3,1
81103bcc:	00a00034 	movhi	r2,32768
81103bd0:	10822c04 	addi	r2,r2,2224
81103bd4:	10c00035 	stwio	r3,0(r2)
}
81103bd8:	0001883a 	nop
81103bdc:	e037883a 	mov	sp,fp
81103be0:	dfc00117 	ldw	ra,4(sp)
81103be4:	df000017 	ldw	fp,0(sp)
81103be8:	dec00204 	addi	sp,sp,8
81103bec:	f800283a 	ret

81103bf0 <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
81103bf0:	defff404 	addi	sp,sp,-48
81103bf4:	dfc00b15 	stw	ra,44(sp)
81103bf8:	df000a15 	stw	fp,40(sp)
81103bfc:	df000a04 	addi	fp,sp,40
81103c00:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81103c04:	e03ff915 	stw	zero,-28(fp)

    alt_u8 uc_EUI48_B0 = 0;
81103c08:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 uc_EUI48_B1 = 0;
81103c0c:	e03ffa45 	stb	zero,-23(fp)
    alt_u8 uc_EUI48_B2 = 0;
81103c10:	e03ffa85 	stb	zero,-22(fp)
    alt_u8 uc_EUI48_B3 = 0;
81103c14:	e03ffac5 	stb	zero,-21(fp)
    alt_u8 uc_EUI48_B4 = 0;
81103c18:	e03ffb05 	stb	zero,-20(fp)
    alt_u8 uc_EUI48_B5 = 0;
81103c1c:	e03ffb45 	stb	zero,-19(fp)

    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81103c20:	00800084 	movi	r2,2
81103c24:	e0bffb85 	stb	r2,-18(fp)
    const alt_u8 uc_EUI48_B1_addr = 0x03;
81103c28:	008000c4 	movi	r2,3
81103c2c:	e0bffbc5 	stb	r2,-17(fp)
    const alt_u8 uc_EUI48_B2_addr = 0x04;
81103c30:	00800104 	movi	r2,4
81103c34:	e0bffc05 	stb	r2,-16(fp)
    const alt_u8 uc_EUI48_B3_addr = 0x05;
81103c38:	00800144 	movi	r2,5
81103c3c:	e0bffc45 	stb	r2,-15(fp)
    const alt_u8 uc_EUI48_B4_addr = 0x06;
81103c40:	00800184 	movi	r2,6
81103c44:	e0bffc85 	stb	r2,-14(fp)
    const alt_u8 uc_EUI48_B5_addr = 0x07;
81103c48:	008001c4 	movi	r2,7
81103c4c:	e0bffcc5 	stb	r2,-13(fp)

    const alt_u8 uc_IDREAD_cmd = 0x33;
81103c50:	00800cc4 	movi	r2,51
81103c54:	e0bffd05 	stb	r2,-12(fp)

    int i = 0;
81103c58:	e03ffe15 	stw	zero,-8(fp)
    
    // Start Communication
    v_spi_start();
81103c5c:	11039e80 	call	811039e8 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81103c60:	e0bffd03 	ldbu	r2,-12(fp)
81103c64:	1009883a 	mov	r4,r2
81103c68:	1103a380 	call	81103a38 <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81103c6c:	e0bffb83 	ldbu	r2,-18(fp)
81103c70:	1009883a 	mov	r4,r2
81103c74:	1103a380 	call	81103a38 <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81103c78:	1103af40 	call	81103af4 <uc_spi_get_byte>
81103c7c:	e0bffa05 	stb	r2,-24(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
81103c80:	1103af40 	call	81103af4 <uc_spi_get_byte>
81103c84:	e0bffa45 	stb	r2,-23(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81103c88:	1103af40 	call	81103af4 <uc_spi_get_byte>
81103c8c:	e0bffa85 	stb	r2,-22(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
81103c90:	1103af40 	call	81103af4 <uc_spi_get_byte>
81103c94:	e0bffac5 	stb	r2,-21(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81103c98:	1103af40 	call	81103af4 <uc_spi_get_byte>
81103c9c:	e0bffb05 	stb	r2,-20(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
81103ca0:	1103af40 	call	81103af4 <uc_spi_get_byte>
81103ca4:	e0bffb45 	stb	r2,-19(fp)

    // End communication
    v_spi_end();
81103ca8:	1103ba00 	call	81103ba0 <v_spi_end>

    bSuccess = TRUE;
81103cac:	00800044 	movi	r2,1
81103cb0:	e0bff915 	stw	r2,-28(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
81103cb4:	e0bfff17 	ldw	r2,-4(fp)
81103cb8:	e0fffa03 	ldbu	r3,-24(fp)
81103cbc:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
81103cc0:	e0bfff17 	ldw	r2,-4(fp)
81103cc4:	10800044 	addi	r2,r2,1
81103cc8:	e0fffa43 	ldbu	r3,-23(fp)
81103ccc:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
81103cd0:	e0bfff17 	ldw	r2,-4(fp)
81103cd4:	10800084 	addi	r2,r2,2
81103cd8:	e0fffa83 	ldbu	r3,-22(fp)
81103cdc:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81103ce0:	e0bfff17 	ldw	r2,-4(fp)
81103ce4:	108000c4 	addi	r2,r2,3
81103ce8:	e0fffac3 	ldbu	r3,-21(fp)
81103cec:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
81103cf0:	e0bfff17 	ldw	r2,-4(fp)
81103cf4:	10800104 	addi	r2,r2,4
81103cf8:	e0fffb03 	ldbu	r3,-20(fp)
81103cfc:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
81103d00:	e0bfff17 	ldw	r2,-4(fp)
81103d04:	10800144 	addi	r2,r2,5
81103d08:	e0fffb43 	ldbu	r3,-19(fp)
81103d0c:	10c00005 	stb	r3,0(r2)

    printf("RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
81103d10:	e17ffa03 	ldbu	r5,-24(fp)
81103d14:	e1bffa43 	ldbu	r6,-23(fp)
81103d18:	e1fffa83 	ldbu	r7,-22(fp)
81103d1c:	e0bffac3 	ldbu	r2,-21(fp)
81103d20:	e0fffb03 	ldbu	r3,-20(fp)
81103d24:	e13ffb43 	ldbu	r4,-19(fp)
81103d28:	d9000215 	stw	r4,8(sp)
81103d2c:	d8c00115 	stw	r3,4(sp)
81103d30:	d8800015 	stw	r2,0(sp)
81103d34:	012044b4 	movhi	r4,33042
81103d38:	213a1d04 	addi	r4,r4,-6028
81103d3c:	110cfdc0 	call	8110cfdc <printf>

    return bSuccess;
81103d40:	e0bff917 	ldw	r2,-28(fp)
}
81103d44:	e037883a 	mov	sp,fp
81103d48:	dfc00117 	ldw	ra,4(sp)
81103d4c:	df000017 	ldw	fp,0(sp)
81103d50:	dec00204 	addi	sp,sp,8
81103d54:	f800283a 	ret

81103d58 <SSDP_CONFIG>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool SSDP_CONFIG(alt_u8 SsdpConfig){
81103d58:	defffd04 	addi	sp,sp,-12
81103d5c:	df000215 	stw	fp,8(sp)
81103d60:	df000204 	addi	fp,sp,8
81103d64:	2005883a 	mov	r2,r4
81103d68:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
81103d6c:	e0bfff03 	ldbu	r2,-4(fp)
81103d70:	10c00168 	cmpgeui	r3,r2,5
81103d74:	18001c1e 	bne	r3,zero,81103de8 <SSDP_CONFIG+0x90>
81103d78:	100690ba 	slli	r3,r2,2
81103d7c:	00a04434 	movhi	r2,33040
81103d80:	108f6404 	addi	r2,r2,15760
81103d84:	1885883a 	add	r2,r3,r2
81103d88:	10800017 	ldw	r2,0(r2)
81103d8c:	1000683a 	jmp	r2
81103d90:	81103da4 	muli	r4,r16,16630
81103d94:	81103db0 	cmpltui	r4,r16,16630
81103d98:	81103dbc 	xorhi	r4,r16,16630
81103d9c:	81103dd0 	cmplti	r4,r16,16631
81103da0:	81103de0 	cmpeqi	r4,r16,16631
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81103da4:	00800cc4 	movi	r2,51
81103da8:	d0a02b45 	stb	r2,-32595(gp)
	    break;
81103dac:	00001006 	br	81103df0 <SSDP_CONFIG+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81103db0:	00801544 	movi	r2,85
81103db4:	d0a02b45 	stb	r2,-32595(gp)
	    break;
81103db8:	00000d06 	br	81103df0 <SSDP_CONFIG+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
81103dbc:	d0e02b43 	ldbu	r3,-32595(gp)
81103dc0:	00bff744 	movi	r2,-35
81103dc4:	1884703a 	and	r2,r3,r2
81103dc8:	d0a02b45 	stb	r2,-32595(gp)
	    break;
81103dcc:	00000806 	br	81103df0 <SSDP_CONFIG+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81103dd0:	d0a02b43 	ldbu	r2,-32595(gp)
81103dd4:	10800894 	ori	r2,r2,34
81103dd8:	d0a02b45 	stb	r2,-32595(gp)
	    break;
81103ddc:	00000406 	br	81103df0 <SSDP_CONFIG+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81103de0:	d0202b45 	stb	zero,-32595(gp)
	    break;
81103de4:	00000206 	br	81103df0 <SSDP_CONFIG+0x98>
		
		default:
		    return FALSE;
81103de8:	0005883a 	mov	r2,zero
81103dec:	00000806 	br	81103e10 <SSDP_CONFIG+0xb8>
	}

	alt_u32 *pSsdpAddr = SSDP_BASE;
81103df0:	00a00034 	movhi	r2,32768
81103df4:	10828404 	addi	r2,r2,2576
81103df8:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
81103dfc:	d0a02b43 	ldbu	r2,-32595(gp)
81103e00:	10c03fcc 	andi	r3,r2,255
81103e04:	e0bffe17 	ldw	r2,-8(fp)
81103e08:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81103e0c:	00800044 	movi	r2,1
}
81103e10:	e037883a 	mov	sp,fp
81103e14:	df000017 	ldw	fp,0(sp)
81103e18:	dec00104 	addi	sp,sp,4
81103e1c:	f800283a 	ret

81103e20 <SSDP_UPDATE>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool SSDP_UPDATE(alt_u8 SsdpData){
81103e20:	defffd04 	addi	sp,sp,-12
81103e24:	df000215 	stw	fp,8(sp)
81103e28:	df000204 	addi	fp,sp,8
81103e2c:	2005883a 	mov	r2,r4
81103e30:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = SSDP_BASE;
81103e34:	00a00034 	movhi	r2,32768
81103e38:	10828404 	addi	r2,r2,2576
81103e3c:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81103e40:	e0bffe17 	ldw	r2,-8(fp)
81103e44:	10800104 	addi	r2,r2,4
81103e48:	e0ffff03 	ldbu	r3,-4(fp)
81103e4c:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81103e50:	00800044 	movi	r2,1
}
81103e54:	e037883a 	mov	sp,fp
81103e58:	df000017 	ldw	fp,0(sp)
81103e5c:	dec00104 	addi	sp,sp,4
81103e60:	f800283a 	ret

81103e64 <SPWC_WRITE_REG32>:
	alt_u32 ul_spwc_g_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_g_spacewire_link_control_status_register_value = 0x00000400;
	alt_u32 ul_spwc_h_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_h_spacewire_link_control_status_register_value = 0x00000400;

	void SPWC_WRITE_REG32(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81103e64:	defffb04 	addi	sp,sp,-20
81103e68:	df000415 	stw	fp,16(sp)
81103e6c:	df000404 	addi	fp,sp,16
81103e70:	2007883a 	mov	r3,r4
81103e74:	2805883a 	mov	r2,r5
81103e78:	e1bfff15 	stw	r6,-4(fp)
81103e7c:	e0fffd05 	stb	r3,-12(fp)
81103e80:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81103e84:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
81103e88:	e0bffd07 	ldb	r2,-12(fp)
81103e8c:	10bfefc4 	addi	r2,r2,-65
81103e90:	10c00228 	cmpgeui	r3,r2,8
81103e94:	18001e1e 	bne	r3,zero,81103f10 <SPWC_WRITE_REG32+0xac>
81103e98:	100690ba 	slli	r3,r2,2
81103e9c:	00a04434 	movhi	r2,33040
81103ea0:	108fac04 	addi	r2,r2,16048
81103ea4:	1885883a 	add	r2,r3,r2
81103ea8:	10800017 	ldw	r2,0(r2)
81103eac:	1000683a 	jmp	r2
81103eb0:	81103ed0 	cmplti	r4,r16,16635
81103eb4:	81103ed8 	cmpnei	r4,r16,16635
81103eb8:	81103ee0 	cmpeqi	r4,r16,16635
81103ebc:	81103ee8 	cmpgeui	r4,r16,16635
81103ec0:	81103ef0 	cmpltui	r4,r16,16635
81103ec4:	81103ef8 	rdprs	r4,r16,16635
81103ec8:	81103f00 	call	881103f0 <__reset+0x20f03f0>
81103ecc:	81103f08 	cmpgei	r4,r16,16636
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81103ed0:	e03ffc15 	stw	zero,-16(fp)
			break;
81103ed4:	00000e06 	br	81103f10 <SPWC_WRITE_REG32+0xac>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
81103ed8:	e03ffc15 	stw	zero,-16(fp)
			break;
81103edc:	00000c06 	br	81103f10 <SPWC_WRITE_REG32+0xac>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
81103ee0:	e03ffc15 	stw	zero,-16(fp)
			break;
81103ee4:	00000a06 	br	81103f10 <SPWC_WRITE_REG32+0xac>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
81103ee8:	e03ffc15 	stw	zero,-16(fp)
			break;
81103eec:	00000806 	br	81103f10 <SPWC_WRITE_REG32+0xac>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81103ef0:	e03ffc15 	stw	zero,-16(fp)
			break;
81103ef4:	00000606 	br	81103f10 <SPWC_WRITE_REG32+0xac>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81103ef8:	e03ffc15 	stw	zero,-16(fp)
			break;
81103efc:	00000406 	br	81103f10 <SPWC_WRITE_REG32+0xac>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81103f00:	e03ffc15 	stw	zero,-16(fp)
			break;
81103f04:	00000206 	br	81103f10 <SPWC_WRITE_REG32+0xac>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81103f08:	e03ffc15 	stw	zero,-16(fp)
			break;
81103f0c:	0001883a 	nop
		}
		*(pSpwcAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81103f10:	e0bffe03 	ldbu	r2,-8(fp)
81103f14:	1085883a 	add	r2,r2,r2
81103f18:	1085883a 	add	r2,r2,r2
81103f1c:	1007883a 	mov	r3,r2
81103f20:	e0bffc17 	ldw	r2,-16(fp)
81103f24:	10c5883a 	add	r2,r2,r3
81103f28:	e0ffff17 	ldw	r3,-4(fp)
81103f2c:	10c00015 	stw	r3,0(r2)
	}
81103f30:	0001883a 	nop
81103f34:	e037883a 	mov	sp,fp
81103f38:	df000017 	ldw	fp,0(sp)
81103f3c:	dec00104 	addi	sp,sp,4
81103f40:	f800283a 	ret

81103f44 <SPWC_READ_REG32>:

	alt_u32 SPWC_READ_REG32(char c_SpwID, alt_u8 uc_RegisterAddress){
81103f44:	defffb04 	addi	sp,sp,-20
81103f48:	df000415 	stw	fp,16(sp)
81103f4c:	df000404 	addi	fp,sp,16
81103f50:	2007883a 	mov	r3,r4
81103f54:	2805883a 	mov	r2,r5
81103f58:	e0fffe05 	stb	r3,-8(fp)
81103f5c:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81103f60:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81103f64:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
81103f68:	e0bffe07 	ldb	r2,-8(fp)
81103f6c:	10bfefc4 	addi	r2,r2,-65
81103f70:	10c00228 	cmpgeui	r3,r2,8
81103f74:	18001e1e 	bne	r3,zero,81103ff0 <SPWC_READ_REG32+0xac>
81103f78:	100690ba 	slli	r3,r2,2
81103f7c:	00a04434 	movhi	r2,33040
81103f80:	108fe404 	addi	r2,r2,16272
81103f84:	1885883a 	add	r2,r3,r2
81103f88:	10800017 	ldw	r2,0(r2)
81103f8c:	1000683a 	jmp	r2
81103f90:	81103fb0 	cmpltui	r4,r16,16638
81103f94:	81103fb8 	rdprs	r4,r16,16638
81103f98:	81103fc0 	call	881103fc <__reset+0x20f03fc>
81103f9c:	81103fc8 	cmpgei	r4,r16,16639
81103fa0:	81103fd0 	cmplti	r4,r16,16639
81103fa4:	81103fd8 	cmpnei	r4,r16,16639
81103fa8:	81103fe0 	cmpeqi	r4,r16,16639
81103fac:	81103fe8 	cmpgeui	r4,r16,16639
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81103fb0:	e03ffc15 	stw	zero,-16(fp)
			break;
81103fb4:	00000e06 	br	81103ff0 <SPWC_READ_REG32+0xac>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
81103fb8:	e03ffc15 	stw	zero,-16(fp)
			break;
81103fbc:	00000c06 	br	81103ff0 <SPWC_READ_REG32+0xac>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
81103fc0:	e03ffc15 	stw	zero,-16(fp)
			break;
81103fc4:	00000a06 	br	81103ff0 <SPWC_READ_REG32+0xac>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
81103fc8:	e03ffc15 	stw	zero,-16(fp)
			break;
81103fcc:	00000806 	br	81103ff0 <SPWC_READ_REG32+0xac>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81103fd0:	e03ffc15 	stw	zero,-16(fp)
			break;
81103fd4:	00000606 	br	81103ff0 <SPWC_READ_REG32+0xac>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81103fd8:	e03ffc15 	stw	zero,-16(fp)
			break;
81103fdc:	00000406 	br	81103ff0 <SPWC_READ_REG32+0xac>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81103fe0:	e03ffc15 	stw	zero,-16(fp)
			break;
81103fe4:	00000206 	br	81103ff0 <SPWC_READ_REG32+0xac>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81103fe8:	e03ffc15 	stw	zero,-16(fp)
			break;
81103fec:	0001883a 	nop
		}
		RegisterValue = *(pSpwcAddr + (alt_u32)uc_RegisterAddress);
81103ff0:	e0bfff03 	ldbu	r2,-4(fp)
81103ff4:	1085883a 	add	r2,r2,r2
81103ff8:	1085883a 	add	r2,r2,r2
81103ffc:	1007883a 	mov	r3,r2
81104000:	e0bffc17 	ldw	r2,-16(fp)
81104004:	10c5883a 	add	r2,r2,r3
81104008:	10800017 	ldw	r2,0(r2)
8110400c:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81104010:	e0bffd17 	ldw	r2,-12(fp)
	}
81104014:	e037883a 	mov	sp,fp
81104018:	df000017 	ldw	fp,0(sp)
8110401c:	dec00104 	addi	sp,sp,4
81104020:	f800283a 	ret

81104024 <b_SpaceWire_Interface_Write_Register>:

	bool b_SpaceWire_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81104024:	defffa04 	addi	sp,sp,-24
81104028:	dfc00515 	stw	ra,20(sp)
8110402c:	df000415 	stw	fp,16(sp)
81104030:	df000404 	addi	fp,sp,16
81104034:	2007883a 	mov	r3,r4
81104038:	2805883a 	mov	r2,r5
8110403c:	e1bfff15 	stw	r6,-4(fp)
81104040:	e0fffd05 	stb	r3,-12(fp)
81104044:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104048:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
8110404c:	e0bffe03 	ldbu	r2,-8(fp)
81104050:	108000e8 	cmpgeui	r2,r2,3
81104054:	1000081e 	bne	r2,zero,81104078 <b_SpaceWire_Interface_Write_Register+0x54>
			SPWC_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
81104058:	e0bffd07 	ldb	r2,-12(fp)
8110405c:	e0fffe03 	ldbu	r3,-8(fp)
81104060:	e1bfff17 	ldw	r6,-4(fp)
81104064:	180b883a 	mov	r5,r3
81104068:	1009883a 	mov	r4,r2
8110406c:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
81104070:	00800044 	movi	r2,1
81104074:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81104078:	e0bffc17 	ldw	r2,-16(fp)
	}
8110407c:	e037883a 	mov	sp,fp
81104080:	dfc00117 	ldw	ra,4(sp)
81104084:	df000017 	ldw	fp,0(sp)
81104088:	dec00204 	addi	sp,sp,8
8110408c:	f800283a 	ret

81104090 <ul_SpaceWire_Interface_Read_Register>:

	alt_u32 ul_SpaceWire_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
81104090:	defffb04 	addi	sp,sp,-20
81104094:	dfc00415 	stw	ra,16(sp)
81104098:	df000315 	stw	fp,12(sp)
8110409c:	df000304 	addi	fp,sp,12
811040a0:	2007883a 	mov	r3,r4
811040a4:	2805883a 	mov	r2,r5
811040a8:	e0fffe05 	stb	r3,-8(fp)
811040ac:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
811040b0:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
811040b4:	e0bfff03 	ldbu	r2,-4(fp)
811040b8:	108000e8 	cmpgeui	r2,r2,3
811040bc:	1000061e 	bne	r2,zero,811040d8 <ul_SpaceWire_Interface_Read_Register+0x48>
			ul_RegisterValue = SPWC_READ_REG32(c_SpwID, uc_RegisterAddress);
811040c0:	e0bffe07 	ldb	r2,-8(fp)
811040c4:	e0ffff03 	ldbu	r3,-4(fp)
811040c8:	180b883a 	mov	r5,r3
811040cc:	1009883a 	mov	r4,r2
811040d0:	1103f440 	call	81103f44 <SPWC_READ_REG32>
811040d4:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
811040d8:	e0bffd17 	ldw	r2,-12(fp)
	}
811040dc:	e037883a 	mov	sp,fp
811040e0:	dfc00117 	ldw	ra,4(sp)
811040e4:	df000017 	ldw	fp,0(sp)
811040e8:	dec00204 	addi	sp,sp,8
811040ec:	f800283a 	ret

811040f0 <b_SpaceWire_Interface_Enable_Control>:

	bool b_SpaceWire_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
811040f0:	defff804 	addi	sp,sp,-32
811040f4:	dfc00715 	stw	ra,28(sp)
811040f8:	df000615 	stw	fp,24(sp)
811040fc:	df000604 	addi	fp,sp,24
81104100:	2007883a 	mov	r3,r4
81104104:	2805883a 	mov	r2,r5
81104108:	e1bfff15 	stw	r6,-4(fp)
8110410c:	e0fffd05 	stb	r3,-12(fp)
81104110:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104114:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK;
81104118:	0081c004 	movi	r2,1792
8110411c:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81104120:	d0a02c04 	addi	r2,gp,-32592
81104124:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81104128:	e0bffd07 	ldb	r2,-12(fp)
8110412c:	10bfefc4 	addi	r2,r2,-65
81104130:	10c00228 	cmpgeui	r3,r2,8
81104134:	1800361e 	bne	r3,zero,81104210 <b_SpaceWire_Interface_Enable_Control+0x120>
81104138:	100690ba 	slli	r3,r2,2
8110413c:	00a04434 	movhi	r2,33040
81104140:	10905404 	addi	r2,r2,16720
81104144:	1885883a 	add	r2,r3,r2
81104148:	10800017 	ldw	r2,0(r2)
8110414c:	1000683a 	jmp	r2
81104150:	81104170 	cmpltui	r4,r16,16645
81104154:	81104184 	addi	r4,r16,16646
81104158:	81104198 	cmpnei	r4,r16,16646
8110415c:	811041ac 	andhi	r4,r16,16646
81104160:	811041c0 	call	8811041c <__reset+0x20f041c>
81104164:	811041d4 	ori	r4,r16,16647
81104168:	811041e8 	cmpgeui	r4,r16,16647
8110416c:	811041fc 	xorhi	r4,r16,16647
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81104170:	d0a02c04 	addi	r2,gp,-32592
81104174:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104178:	00800044 	movi	r2,1
8110417c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104180:	00002306 	br	81104210 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81104184:	d0a02d04 	addi	r2,gp,-32588
81104188:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110418c:	00800044 	movi	r2,1
81104190:	e0bffa15 	stw	r2,-24(fp)
			break;
81104194:	00001e06 	br	81104210 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81104198:	d0a02e04 	addi	r2,gp,-32584
8110419c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041a0:	00800044 	movi	r2,1
811041a4:	e0bffa15 	stw	r2,-24(fp)
			break;
811041a8:	00001906 	br	81104210 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
811041ac:	d0a02f04 	addi	r2,gp,-32580
811041b0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041b4:	00800044 	movi	r2,1
811041b8:	e0bffa15 	stw	r2,-24(fp)
			break;
811041bc:	00001406 	br	81104210 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
811041c0:	d0a03004 	addi	r2,gp,-32576
811041c4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041c8:	00800044 	movi	r2,1
811041cc:	e0bffa15 	stw	r2,-24(fp)
			break;
811041d0:	00000f06 	br	81104210 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811041d4:	d0a03104 	addi	r2,gp,-32572
811041d8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041dc:	00800044 	movi	r2,1
811041e0:	e0bffa15 	stw	r2,-24(fp)
			break;
811041e4:	00000a06 	br	81104210 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
811041e8:	d0a03204 	addi	r2,gp,-32568
811041ec:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041f0:	00800044 	movi	r2,1
811041f4:	e0bffa15 	stw	r2,-24(fp)
			break;
811041f8:	00000506 	br	81104210 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
811041fc:	d0a03304 	addi	r2,gp,-32564
81104200:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104204:	00800044 	movi	r2,1
81104208:	e0bffa15 	stw	r2,-24(fp)
			break;
8110420c:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
81104210:	e0bffa17 	ldw	r2,-24(fp)
81104214:	10800058 	cmpnei	r2,r2,1
81104218:	10002b1e 	bne	r2,zero,811042c8 <b_SpaceWire_Interface_Enable_Control+0x1d8>
8110421c:	e0ffff17 	ldw	r3,-4(fp)
81104220:	e0bffc17 	ldw	r2,-16(fp)
81104224:	1884703a 	and	r2,r3,r2
81104228:	10002726 	beq	r2,zero,811042c8 <b_SpaceWire_Interface_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
8110422c:	e0bffe03 	ldbu	r2,-8(fp)
81104230:	10000326 	beq	r2,zero,81104240 <b_SpaceWire_Interface_Enable_Control+0x150>
81104234:	10800060 	cmpeqi	r2,r2,1
81104238:	1000121e 	bne	r2,zero,81104284 <b_SpaceWire_Interface_Enable_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
8110423c:	00002306 	br	811042cc <b_SpaceWire_Interface_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_EnableMask;
81104240:	e0bffb17 	ldw	r2,-20(fp)
81104244:	10c00017 	ldw	r3,0(r2)
81104248:	e0bfff17 	ldw	r2,-4(fp)
8110424c:	0084303a 	nor	r2,zero,r2
81104250:	1886703a 	and	r3,r3,r2
81104254:	e0bffb17 	ldw	r2,-20(fp)
81104258:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
8110425c:	e0fffd07 	ldb	r3,-12(fp)
81104260:	e0bffb17 	ldw	r2,-20(fp)
81104264:	10800017 	ldw	r2,0(r2)
81104268:	100d883a 	mov	r6,r2
8110426c:	000b883a 	mov	r5,zero
81104270:	1809883a 	mov	r4,r3
81104274:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81104278:	00800044 	movi	r2,1
8110427c:	e0bffa15 	stw	r2,-24(fp)
				break;
81104280:	00001006 	br	811042c4 <b_SpaceWire_Interface_Enable_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_EnableMask;
81104284:	e0bffb17 	ldw	r2,-20(fp)
81104288:	10c00017 	ldw	r3,0(r2)
8110428c:	e0bfff17 	ldw	r2,-4(fp)
81104290:	1886b03a 	or	r3,r3,r2
81104294:	e0bffb17 	ldw	r2,-20(fp)
81104298:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
8110429c:	e0fffd07 	ldb	r3,-12(fp)
811042a0:	e0bffb17 	ldw	r2,-20(fp)
811042a4:	10800017 	ldw	r2,0(r2)
811042a8:	100d883a 	mov	r6,r2
811042ac:	000b883a 	mov	r5,zero
811042b0:	1809883a 	mov	r4,r3
811042b4:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
811042b8:	00800044 	movi	r2,1
811042bc:	e0bffa15 	stw	r2,-24(fp)
				break;
811042c0:	0001883a 	nop

			}
		} else {
811042c4:	00000106 	br	811042cc <b_SpaceWire_Interface_Enable_Control+0x1dc>
			bSuccess = FALSE;
811042c8:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
811042cc:	e0bffa17 	ldw	r2,-24(fp)
	}
811042d0:	e037883a 	mov	sp,fp
811042d4:	dfc00117 	ldw	ra,4(sp)
811042d8:	df000017 	ldw	fp,0(sp)
811042dc:	dec00204 	addi	sp,sp,8
811042e0:	f800283a 	ret

811042e4 <b_SpaceWire_Interface_Mode_Control>:

	bool b_SpaceWire_Interface_Mode_Control(char c_SpwID, alt_u8 uc_InterfaceMode){
811042e4:	defffa04 	addi	sp,sp,-24
811042e8:	dfc00515 	stw	ra,20(sp)
811042ec:	df000415 	stw	fp,16(sp)
811042f0:	df000404 	addi	fp,sp,16
811042f4:	2007883a 	mov	r3,r4
811042f8:	2805883a 	mov	r2,r5
811042fc:	e0fffe05 	stb	r3,-8(fp)
81104300:	e0bfff05 	stb	r2,-4(fp)
		bool bSuccess = FALSE;
81104304:	e03ffc15 	stw	zero,-16(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81104308:	d0a02c04 	addi	r2,gp,-32592
8110430c:	e0bffd15 	stw	r2,-12(fp)
		switch (c_SpwID) {
81104310:	e0bffe07 	ldb	r2,-8(fp)
81104314:	10bfefc4 	addi	r2,r2,-65
81104318:	10c00228 	cmpgeui	r3,r2,8
8110431c:	1800361e 	bne	r3,zero,811043f8 <b_SpaceWire_Interface_Mode_Control+0x114>
81104320:	100690ba 	slli	r3,r2,2
81104324:	00a04434 	movhi	r2,33040
81104328:	1090ce04 	addi	r2,r2,17208
8110432c:	1885883a 	add	r2,r3,r2
81104330:	10800017 	ldw	r2,0(r2)
81104334:	1000683a 	jmp	r2
81104338:	81104358 	cmpnei	r4,r16,16653
8110433c:	8110436c 	andhi	r4,r16,16653
81104340:	81104380 	call	88110438 <__reset+0x20f0438>
81104344:	81104394 	ori	r4,r16,16654
81104348:	811043a8 	cmpgeui	r4,r16,16654
8110434c:	811043bc 	xorhi	r4,r16,16654
81104350:	811043d0 	cmplti	r4,r16,16655
81104354:	811043e4 	muli	r4,r16,16655
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81104358:	d0a02c04 	addi	r2,gp,-32592
8110435c:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81104360:	00800044 	movi	r2,1
81104364:	e0bffc15 	stw	r2,-16(fp)
			break;
81104368:	00002306 	br	811043f8 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
8110436c:	d0a02d04 	addi	r2,gp,-32588
81104370:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81104374:	00800044 	movi	r2,1
81104378:	e0bffc15 	stw	r2,-16(fp)
			break;
8110437c:	00001e06 	br	811043f8 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81104380:	d0a02e04 	addi	r2,gp,-32584
81104384:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81104388:	00800044 	movi	r2,1
8110438c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104390:	00001906 	br	811043f8 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81104394:	d0a02f04 	addi	r2,gp,-32580
81104398:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
8110439c:	00800044 	movi	r2,1
811043a0:	e0bffc15 	stw	r2,-16(fp)
			break;
811043a4:	00001406 	br	811043f8 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
811043a8:	d0a03004 	addi	r2,gp,-32576
811043ac:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
811043b0:	00800044 	movi	r2,1
811043b4:	e0bffc15 	stw	r2,-16(fp)
			break;
811043b8:	00000f06 	br	811043f8 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811043bc:	d0a03104 	addi	r2,gp,-32572
811043c0:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
811043c4:	00800044 	movi	r2,1
811043c8:	e0bffc15 	stw	r2,-16(fp)
			break;
811043cc:	00000a06 	br	811043f8 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
811043d0:	d0a03204 	addi	r2,gp,-32568
811043d4:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
811043d8:	00800044 	movi	r2,1
811043dc:	e0bffc15 	stw	r2,-16(fp)
			break;
811043e0:	00000506 	br	811043f8 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
811043e4:	d0a03304 	addi	r2,gp,-32564
811043e8:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
811043ec:	00800044 	movi	r2,1
811043f0:	e0bffc15 	stw	r2,-16(fp)
			break;
811043f4:	0001883a 	nop
		}
		if (bSuccess == TRUE){
811043f8:	e0bffc17 	ldw	r2,-16(fp)
811043fc:	10800058 	cmpnei	r2,r2,1
81104400:	10007b1e 	bne	r2,zero,811045f0 <b_SpaceWire_Interface_Mode_Control+0x30c>
			switch (uc_InterfaceMode){
81104404:	e0bfff03 	ldbu	r2,-4(fp)
81104408:	10c00060 	cmpeqi	r3,r2,1
8110440c:	1800241e 	bne	r3,zero,811044a0 <b_SpaceWire_Interface_Mode_Control+0x1bc>
81104410:	10c00088 	cmpgei	r3,r2,2
81104414:	1800021e 	bne	r3,zero,81104420 <b_SpaceWire_Interface_Mode_Control+0x13c>
81104418:	10000626 	beq	r2,zero,81104434 <b_SpaceWire_Interface_Mode_Control+0x150>
8110441c:	00007206 	br	811045e8 <b_SpaceWire_Interface_Mode_Control+0x304>
81104420:	10c000a0 	cmpeqi	r3,r2,2
81104424:	1800391e 	bne	r3,zero,8110450c <b_SpaceWire_Interface_Mode_Control+0x228>
81104428:	108000e0 	cmpeqi	r2,r2,3
8110442c:	1000521e 	bne	r2,zero,81104578 <b_SpaceWire_Interface_Mode_Control+0x294>
81104430:	00006d06 	br	811045e8 <b_SpaceWire_Interface_Mode_Control+0x304>

				case SPWC_INTERFACE_BACKDOOR_MODE:
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK;
81104434:	e0bffd17 	ldw	r2,-12(fp)
81104438:	10800017 	ldw	r2,0(r2)
8110443c:	10c40014 	ori	r3,r2,4096
81104440:	e0bffd17 	ldw	r2,-12(fp)
81104444:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81104448:	e0bffd17 	ldw	r2,-12(fp)
8110444c:	10c00017 	ldw	r3,0(r2)
81104450:	00bdffc4 	movi	r2,-2049
81104454:	1886703a 	and	r3,r3,r2
81104458:	e0bffd17 	ldw	r2,-12(fp)
8110445c:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81104460:	e0bffd17 	ldw	r2,-12(fp)
81104464:	10c00017 	ldw	r3,0(r2)
81104468:	00bfdfc4 	movi	r2,-129
8110446c:	1886703a 	and	r3,r3,r2
81104470:	e0bffd17 	ldw	r2,-12(fp)
81104474:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81104478:	e0fffe07 	ldb	r3,-8(fp)
8110447c:	e0bffd17 	ldw	r2,-12(fp)
81104480:	10800017 	ldw	r2,0(r2)
81104484:	100d883a 	mov	r6,r2
81104488:	000b883a 	mov	r5,zero
8110448c:	1809883a 	mov	r4,r3
81104490:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81104494:	00800044 	movi	r2,1
81104498:	e0bffc15 	stw	r2,-16(fp)
				break;
8110449c:	00005506 	br	811045f4 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_EXTERNAL_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
811044a0:	e0bffd17 	ldw	r2,-12(fp)
811044a4:	10c00017 	ldw	r3,0(r2)
811044a8:	00bbffc4 	movi	r2,-4097
811044ac:	1886703a 	and	r3,r3,r2
811044b0:	e0bffd17 	ldw	r2,-12(fp)
811044b4:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK;
811044b8:	e0bffd17 	ldw	r2,-12(fp)
811044bc:	10800017 	ldw	r2,0(r2)
811044c0:	10c20014 	ori	r3,r2,2048
811044c4:	e0bffd17 	ldw	r2,-12(fp)
811044c8:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
811044cc:	e0bffd17 	ldw	r2,-12(fp)
811044d0:	10c00017 	ldw	r3,0(r2)
811044d4:	00bfdfc4 	movi	r2,-129
811044d8:	1886703a 	and	r3,r3,r2
811044dc:	e0bffd17 	ldw	r2,-12(fp)
811044e0:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
811044e4:	e0fffe07 	ldb	r3,-8(fp)
811044e8:	e0bffd17 	ldw	r2,-12(fp)
811044ec:	10800017 	ldw	r2,0(r2)
811044f0:	100d883a 	mov	r6,r2
811044f4:	000b883a 	mov	r5,zero
811044f8:	1809883a 	mov	r4,r3
811044fc:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81104500:	00800044 	movi	r2,1
81104504:	e0bffc15 	stw	r2,-16(fp)
				break;
81104508:	00003a06 	br	811045f4 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
8110450c:	e0bffd17 	ldw	r2,-12(fp)
81104510:	10c00017 	ldw	r3,0(r2)
81104514:	00bbffc4 	movi	r2,-4097
81104518:	1886703a 	and	r3,r3,r2
8110451c:	e0bffd17 	ldw	r2,-12(fp)
81104520:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81104524:	e0bffd17 	ldw	r2,-12(fp)
81104528:	10c00017 	ldw	r3,0(r2)
8110452c:	00bdffc4 	movi	r2,-2049
81104530:	1886703a 	and	r3,r3,r2
81104534:	e0bffd17 	ldw	r2,-12(fp)
81104538:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK;
8110453c:	e0bffd17 	ldw	r2,-12(fp)
81104540:	10800017 	ldw	r2,0(r2)
81104544:	10c02014 	ori	r3,r2,128
81104548:	e0bffd17 	ldw	r2,-12(fp)
8110454c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81104550:	e0fffe07 	ldb	r3,-8(fp)
81104554:	e0bffd17 	ldw	r2,-12(fp)
81104558:	10800017 	ldw	r2,0(r2)
8110455c:	100d883a 	mov	r6,r2
81104560:	000b883a 	mov	r5,zero
81104564:	1809883a 	mov	r4,r3
81104568:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
8110456c:	00800044 	movi	r2,1
81104570:	e0bffc15 	stw	r2,-16(fp)
				break;
81104574:	00001f06 	br	811045f4 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_NORMAL_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81104578:	e0bffd17 	ldw	r2,-12(fp)
8110457c:	10c00017 	ldw	r3,0(r2)
81104580:	00bbffc4 	movi	r2,-4097
81104584:	1886703a 	and	r3,r3,r2
81104588:	e0bffd17 	ldw	r2,-12(fp)
8110458c:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81104590:	e0bffd17 	ldw	r2,-12(fp)
81104594:	10c00017 	ldw	r3,0(r2)
81104598:	00bdffc4 	movi	r2,-2049
8110459c:	1886703a 	and	r3,r3,r2
811045a0:	e0bffd17 	ldw	r2,-12(fp)
811045a4:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
811045a8:	e0bffd17 	ldw	r2,-12(fp)
811045ac:	10c00017 	ldw	r3,0(r2)
811045b0:	00bfdfc4 	movi	r2,-129
811045b4:	1886703a 	and	r3,r3,r2
811045b8:	e0bffd17 	ldw	r2,-12(fp)
811045bc:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
811045c0:	e0fffe07 	ldb	r3,-8(fp)
811045c4:	e0bffd17 	ldw	r2,-12(fp)
811045c8:	10800017 	ldw	r2,0(r2)
811045cc:	100d883a 	mov	r6,r2
811045d0:	000b883a 	mov	r5,zero
811045d4:	1809883a 	mov	r4,r3
811045d8:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
811045dc:	00800044 	movi	r2,1
811045e0:	e0bffc15 	stw	r2,-16(fp)
				break;
811045e4:	00000306 	br	811045f4 <b_SpaceWire_Interface_Mode_Control+0x310>
				
				default:
					bSuccess = FALSE;
811045e8:	e03ffc15 	stw	zero,-16(fp)
811045ec:	00000106 	br	811045f4 <b_SpaceWire_Interface_Mode_Control+0x310>
	
			}
		} else {
			bSuccess = FALSE;
811045f0:	e03ffc15 	stw	zero,-16(fp)
		}

		return bSuccess;
811045f4:	e0bffc17 	ldw	r2,-16(fp)
	}
811045f8:	e037883a 	mov	sp,fp
811045fc:	dfc00117 	ldw	ra,4(sp)
81104600:	df000017 	ldw	fp,0(sp)
81104604:	dec00204 	addi	sp,sp,8
81104608:	f800283a 	ret

8110460c <v_SpaceWire_Interface_Force_Reset>:

	void v_SpaceWire_Interface_Force_Reset(char c_SpwID){
8110460c:	defffc04 	addi	sp,sp,-16
81104610:	dfc00315 	stw	ra,12(sp)
81104614:	df000215 	stw	fp,8(sp)
81104618:	df000204 	addi	fp,sp,8
8110461c:	2005883a 	mov	r2,r4
81104620:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81104624:	d0a02c04 	addi	r2,gp,-32592
81104628:	e0bffe15 	stw	r2,-8(fp)
		switch (c_SpwID) {
8110462c:	e0bfff07 	ldb	r2,-4(fp)
81104630:	10bfefc4 	addi	r2,r2,-65
81104634:	10c00228 	cmpgeui	r3,r2,8
81104638:	1800261e 	bne	r3,zero,811046d4 <v_SpaceWire_Interface_Force_Reset+0xc8>
8110463c:	100690ba 	slli	r3,r2,2
81104640:	00a04434 	movhi	r2,33040
81104644:	10919504 	addi	r2,r2,18004
81104648:	1885883a 	add	r2,r3,r2
8110464c:	10800017 	ldw	r2,0(r2)
81104650:	1000683a 	jmp	r2
81104654:	81104674 	orhi	r4,r16,16665
81104658:	81104680 	call	88110468 <__reset+0x20f0468>
8110465c:	8110468c 	andi	r4,r16,16666
81104660:	81104698 	cmpnei	r4,r16,16666
81104664:	811046a4 	muli	r4,r16,16666
81104668:	811046b0 	cmpltui	r4,r16,16666
8110466c:	811046bc 	xorhi	r4,r16,16666
81104670:	811046c8 	cmpgei	r4,r16,16667
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81104674:	d0a02c04 	addi	r2,gp,-32592
81104678:	e0bffe15 	stw	r2,-8(fp)
			break;
8110467c:	00001506 	br	811046d4 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81104680:	d0a02d04 	addi	r2,gp,-32588
81104684:	e0bffe15 	stw	r2,-8(fp)
			break;
81104688:	00001206 	br	811046d4 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
8110468c:	d0a02e04 	addi	r2,gp,-32584
81104690:	e0bffe15 	stw	r2,-8(fp)
			break;
81104694:	00000f06 	br	811046d4 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81104698:	d0a02f04 	addi	r2,gp,-32580
8110469c:	e0bffe15 	stw	r2,-8(fp)
			break;
811046a0:	00000c06 	br	811046d4 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
811046a4:	d0a03004 	addi	r2,gp,-32576
811046a8:	e0bffe15 	stw	r2,-8(fp)
			break;
811046ac:	00000906 	br	811046d4 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811046b0:	d0a03104 	addi	r2,gp,-32572
811046b4:	e0bffe15 	stw	r2,-8(fp)
			break;
811046b8:	00000606 	br	811046d4 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
811046bc:	d0a03204 	addi	r2,gp,-32568
811046c0:	e0bffe15 	stw	r2,-8(fp)
			break;
811046c4:	00000306 	br	811046d4 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
811046c8:	d0a03304 	addi	r2,gp,-32564
811046cc:	e0bffe15 	stw	r2,-8(fp)
			break;
811046d0:	0001883a 	nop
		}
		SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value | SPWC_CODEC_FORCE_RESET_CONTROL_BIT_MASK);
811046d4:	e0ffff07 	ldb	r3,-4(fp)
811046d8:	e0bffe17 	ldw	r2,-8(fp)
811046dc:	10800017 	ldw	r2,0(r2)
811046e0:	10801014 	ori	r2,r2,64
811046e4:	100d883a 	mov	r6,r2
811046e8:	000b883a 	mov	r5,zero
811046ec:	1809883a 	mov	r4,r3
811046f0:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>

	}
811046f4:	0001883a 	nop
811046f8:	e037883a 	mov	sp,fp
811046fc:	dfc00117 	ldw	ra,4(sp)
81104700:	df000017 	ldw	fp,0(sp)
81104704:	dec00204 	addi	sp,sp,8
81104708:	f800283a 	ret

8110470c <v_SpaceWire_Interface_Interrupts_Enable_Control>:

	bool v_SpaceWire_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
8110470c:	defff804 	addi	sp,sp,-32
81104710:	dfc00715 	stw	ra,28(sp)
81104714:	df000615 	stw	fp,24(sp)
81104718:	df000604 	addi	fp,sp,24
8110471c:	2007883a 	mov	r3,r4
81104720:	2805883a 	mov	r2,r5
81104724:	e1bfff15 	stw	r6,-4(fp)
81104728:	e0fffd05 	stb	r3,-12(fp)
8110472c:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104730:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_ENABLE_BIT_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | SPWC_LINK_RUNNING_INTERRUPT_ENABLE_BIT_MASK;
81104734:	00800e04 	movi	r2,56
81104738:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110473c:	d0a02c04 	addi	r2,gp,-32592
81104740:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81104744:	e0bffd07 	ldb	r2,-12(fp)
81104748:	10bfefc4 	addi	r2,r2,-65
8110474c:	10c00228 	cmpgeui	r3,r2,8
81104750:	1800361e 	bne	r3,zero,8110482c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
81104754:	100690ba 	slli	r3,r2,2
81104758:	00a04434 	movhi	r2,33040
8110475c:	1091db04 	addi	r2,r2,18284
81104760:	1885883a 	add	r2,r3,r2
81104764:	10800017 	ldw	r2,0(r2)
81104768:	1000683a 	jmp	r2
8110476c:	8110478c 	andi	r4,r16,16670
81104770:	811047a0 	cmpeqi	r4,r16,16670
81104774:	811047b4 	orhi	r4,r16,16670
81104778:	811047c8 	cmpgei	r4,r16,16671
8110477c:	811047dc 	xori	r4,r16,16671
81104780:	811047f0 	cmpltui	r4,r16,16671
81104784:	81104804 	addi	r4,r16,16672
81104788:	81104818 	cmpnei	r4,r16,16672
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110478c:	d0a02c04 	addi	r2,gp,-32592
81104790:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104794:	00800044 	movi	r2,1
81104798:	e0bffa15 	stw	r2,-24(fp)
			break;
8110479c:	00002306 	br	8110482c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
811047a0:	d0a02d04 	addi	r2,gp,-32588
811047a4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811047a8:	00800044 	movi	r2,1
811047ac:	e0bffa15 	stw	r2,-24(fp)
			break;
811047b0:	00001e06 	br	8110482c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
811047b4:	d0a02e04 	addi	r2,gp,-32584
811047b8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811047bc:	00800044 	movi	r2,1
811047c0:	e0bffa15 	stw	r2,-24(fp)
			break;
811047c4:	00001906 	br	8110482c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
811047c8:	d0a02f04 	addi	r2,gp,-32580
811047cc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811047d0:	00800044 	movi	r2,1
811047d4:	e0bffa15 	stw	r2,-24(fp)
			break;
811047d8:	00001406 	br	8110482c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
811047dc:	d0a03004 	addi	r2,gp,-32576
811047e0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811047e4:	00800044 	movi	r2,1
811047e8:	e0bffa15 	stw	r2,-24(fp)
			break;
811047ec:	00000f06 	br	8110482c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811047f0:	d0a03104 	addi	r2,gp,-32572
811047f4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811047f8:	00800044 	movi	r2,1
811047fc:	e0bffa15 	stw	r2,-24(fp)
			break;
81104800:	00000a06 	br	8110482c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81104804:	d0a03204 	addi	r2,gp,-32568
81104808:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110480c:	00800044 	movi	r2,1
81104810:	e0bffa15 	stw	r2,-24(fp)
			break;
81104814:	00000506 	br	8110482c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81104818:	d0a03304 	addi	r2,gp,-32564
8110481c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104820:	00800044 	movi	r2,1
81104824:	e0bffa15 	stw	r2,-24(fp)
			break;
81104828:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
8110482c:	e0bffa17 	ldw	r2,-24(fp)
81104830:	10800058 	cmpnei	r2,r2,1
81104834:	10002b1e 	bne	r2,zero,811048e4 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d8>
81104838:	e0ffff17 	ldw	r3,-4(fp)
8110483c:	e0bffc17 	ldw	r2,-16(fp)
81104840:	1884703a 	and	r2,r3,r2
81104844:	10002726 	beq	r2,zero,811048e4 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
81104848:	e0bffe03 	ldbu	r2,-8(fp)
8110484c:	10000326 	beq	r2,zero,8110485c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x150>
81104850:	10800060 	cmpeqi	r2,r2,1
81104854:	1000121e 	bne	r2,zero,811048a0 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81104858:	00002306 	br	811048e8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_InterruptMask;
8110485c:	e0bffb17 	ldw	r2,-20(fp)
81104860:	10c00017 	ldw	r3,0(r2)
81104864:	e0bfff17 	ldw	r2,-4(fp)
81104868:	0084303a 	nor	r2,zero,r2
8110486c:	1886703a 	and	r3,r3,r2
81104870:	e0bffb17 	ldw	r2,-20(fp)
81104874:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81104878:	e0fffd07 	ldb	r3,-12(fp)
8110487c:	e0bffb17 	ldw	r2,-20(fp)
81104880:	10800017 	ldw	r2,0(r2)
81104884:	100d883a 	mov	r6,r2
81104888:	000b883a 	mov	r5,zero
8110488c:	1809883a 	mov	r4,r3
81104890:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81104894:	00800044 	movi	r2,1
81104898:	e0bffa15 	stw	r2,-24(fp)
				break;
8110489c:	00001006 	br	811048e0 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_InterruptMask;
811048a0:	e0bffb17 	ldw	r2,-20(fp)
811048a4:	10c00017 	ldw	r3,0(r2)
811048a8:	e0bfff17 	ldw	r2,-4(fp)
811048ac:	1886b03a 	or	r3,r3,r2
811048b0:	e0bffb17 	ldw	r2,-20(fp)
811048b4:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
811048b8:	e0fffd07 	ldb	r3,-12(fp)
811048bc:	e0bffb17 	ldw	r2,-20(fp)
811048c0:	10800017 	ldw	r2,0(r2)
811048c4:	100d883a 	mov	r6,r2
811048c8:	000b883a 	mov	r5,zero
811048cc:	1809883a 	mov	r4,r3
811048d0:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
811048d4:	00800044 	movi	r2,1
811048d8:	e0bffa15 	stw	r2,-24(fp)
				break;
811048dc:	0001883a 	nop

			}
		} else {
811048e0:	00000106 	br	811048e8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>
			bSuccess = FALSE;
811048e4:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
811048e8:	e0bffa17 	ldw	r2,-24(fp)
	}
811048ec:	e037883a 	mov	sp,fp
811048f0:	dfc00117 	ldw	ra,4(sp)
811048f4:	df000017 	ldw	fp,0(sp)
811048f8:	dec00204 	addi	sp,sp,8
811048fc:	f800283a 	ret

81104900 <ul_SpaceWire_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_SpaceWire_Interface_Interrupts_Flags_Read(char c_SpwID){
81104900:	defffb04 	addi	sp,sp,-20
81104904:	dfc00415 	stw	ra,16(sp)
81104908:	df000315 	stw	fp,12(sp)
8110490c:	df000304 	addi	fp,sp,12
81104910:	2005883a 	mov	r2,r4
81104914:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
81104918:	008001c4 	movi	r2,7
8110491c:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_interrupts_flags_value = SPWC_READ_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
81104920:	e0bfff07 	ldb	r2,-4(fp)
81104924:	000b883a 	mov	r5,zero
81104928:	1009883a 	mov	r4,r2
8110492c:	1103f440 	call	81103f44 <SPWC_READ_REG32>
81104930:	1007883a 	mov	r3,r2
81104934:	e0bffd17 	ldw	r2,-12(fp)
81104938:	1884703a 	and	r2,r3,r2
8110493c:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_interrupts_flags_value;
81104940:	e0bffe17 	ldw	r2,-8(fp)
	}
81104944:	e037883a 	mov	sp,fp
81104948:	dfc00117 	ldw	ra,4(sp)
8110494c:	df000017 	ldw	fp,0(sp)
81104950:	dec00204 	addi	sp,sp,8
81104954:	f800283a 	ret

81104958 <v_SpaceWire_Interface_Interrupts_Flags_Clear>:

	void v_SpaceWire_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
81104958:	defff904 	addi	sp,sp,-28
8110495c:	dfc00615 	stw	ra,24(sp)
81104960:	df000515 	stw	fp,20(sp)
81104964:	df000504 	addi	fp,sp,20
81104968:	2005883a 	mov	r2,r4
8110496c:	e17fff15 	stw	r5,-4(fp)
81104970:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
81104974:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
81104978:	008001c4 	movi	r2,7
8110497c:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81104980:	d0a02c04 	addi	r2,gp,-32592
81104984:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81104988:	e0bffe07 	ldb	r2,-8(fp)
8110498c:	10bfefc4 	addi	r2,r2,-65
81104990:	10c00228 	cmpgeui	r3,r2,8
81104994:	1800361e 	bne	r3,zero,81104a70 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
81104998:	100690ba 	slli	r3,r2,2
8110499c:	00a04434 	movhi	r2,33040
811049a0:	10926c04 	addi	r2,r2,18864
811049a4:	1885883a 	add	r2,r3,r2
811049a8:	10800017 	ldw	r2,0(r2)
811049ac:	1000683a 	jmp	r2
811049b0:	811049d0 	cmplti	r4,r16,16679
811049b4:	811049e4 	muli	r4,r16,16679
811049b8:	811049f8 	rdprs	r4,r16,16679
811049bc:	81104a0c 	andi	r4,r16,16680
811049c0:	81104a20 	cmpeqi	r4,r16,16680
811049c4:	81104a34 	orhi	r4,r16,16680
811049c8:	81104a48 	cmpgei	r4,r16,16681
811049cc:	81104a5c 	xori	r4,r16,16681
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811049d0:	d0a02c04 	addi	r2,gp,-32592
811049d4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811049d8:	00800044 	movi	r2,1
811049dc:	e0bffb15 	stw	r2,-20(fp)
			break;
811049e0:	00002306 	br	81104a70 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
811049e4:	d0a02d04 	addi	r2,gp,-32588
811049e8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811049ec:	00800044 	movi	r2,1
811049f0:	e0bffb15 	stw	r2,-20(fp)
			break;
811049f4:	00001e06 	br	81104a70 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
811049f8:	d0a02e04 	addi	r2,gp,-32584
811049fc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104a00:	00800044 	movi	r2,1
81104a04:	e0bffb15 	stw	r2,-20(fp)
			break;
81104a08:	00001906 	br	81104a70 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81104a0c:	d0a02f04 	addi	r2,gp,-32580
81104a10:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104a14:	00800044 	movi	r2,1
81104a18:	e0bffb15 	stw	r2,-20(fp)
			break;
81104a1c:	00001406 	br	81104a70 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81104a20:	d0a03004 	addi	r2,gp,-32576
81104a24:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104a28:	00800044 	movi	r2,1
81104a2c:	e0bffb15 	stw	r2,-20(fp)
			break;
81104a30:	00000f06 	br	81104a70 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81104a34:	d0a03104 	addi	r2,gp,-32572
81104a38:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104a3c:	00800044 	movi	r2,1
81104a40:	e0bffb15 	stw	r2,-20(fp)
			break;
81104a44:	00000a06 	br	81104a70 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81104a48:	d0a03204 	addi	r2,gp,-32568
81104a4c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104a50:	00800044 	movi	r2,1
81104a54:	e0bffb15 	stw	r2,-20(fp)
			break;
81104a58:	00000506 	br	81104a70 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81104a5c:	d0a03304 	addi	r2,gp,-32564
81104a60:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104a64:	00800044 	movi	r2,1
81104a68:	e0bffb15 	stw	r2,-20(fp)
			break;
81104a6c:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
81104a70:	e0bffb17 	ldw	r2,-20(fp)
81104a74:	10800058 	cmpnei	r2,r2,1
81104a78:	10000d1e 	bne	r2,zero,81104ab0 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x158>
81104a7c:	e0ffff17 	ldw	r3,-4(fp)
81104a80:	e0bffd17 	ldw	r2,-12(fp)
81104a84:	1884703a 	and	r2,r3,r2
81104a88:	10000926 	beq	r2,zero,81104ab0 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x158>
			SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_spwc_interface_control_status_register_value | ul_spwc_mask));
81104a8c:	e13ffe07 	ldb	r4,-8(fp)
81104a90:	e0bffc17 	ldw	r2,-16(fp)
81104a94:	10c00017 	ldw	r3,0(r2)
81104a98:	e0bffd17 	ldw	r2,-12(fp)
81104a9c:	1884b03a 	or	r2,r3,r2
81104aa0:	100d883a 	mov	r6,r2
81104aa4:	000b883a 	mov	r5,zero
81104aa8:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
81104aac:	00000106 	br	81104ab4 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x15c>
		} else {
			bSuccess = FALSE;
81104ab0:	e03ffb15 	stw	zero,-20(fp)
		}
	}
81104ab4:	0001883a 	nop
81104ab8:	e037883a 	mov	sp,fp
81104abc:	dfc00117 	ldw	ra,4(sp)
81104ac0:	df000017 	ldw	fp,0(sp)
81104ac4:	dec00204 	addi	sp,sp,8
81104ac8:	f800283a 	ret

81104acc <v_SpaceWire_Interface_Link_Control>:

	bool v_SpaceWire_Interface_Link_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_ControlMask){
81104acc:	defff804 	addi	sp,sp,-32
81104ad0:	dfc00715 	stw	ra,28(sp)
81104ad4:	df000615 	stw	fp,24(sp)
81104ad8:	df000604 	addi	fp,sp,24
81104adc:	2007883a 	mov	r3,r4
81104ae0:	2805883a 	mov	r2,r5
81104ae4:	e1bfff15 	stw	r6,-4(fp)
81104ae8:	e0fffd05 	stb	r3,-12(fp)
81104aec:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104af0:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_AUTOSTART_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK | SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK;
81104af4:	0080e004 	movi	r2,896
81104af8:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81104afc:	d0a00204 	addi	r2,gp,-32760
81104b00:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81104b04:	e0bffd07 	ldb	r2,-12(fp)
81104b08:	10bfefc4 	addi	r2,r2,-65
81104b0c:	10c00228 	cmpgeui	r3,r2,8
81104b10:	1800361e 	bne	r3,zero,81104bec <v_SpaceWire_Interface_Link_Control+0x120>
81104b14:	100690ba 	slli	r3,r2,2
81104b18:	00a04434 	movhi	r2,33040
81104b1c:	1092cb04 	addi	r2,r2,19244
81104b20:	1885883a 	add	r2,r3,r2
81104b24:	10800017 	ldw	r2,0(r2)
81104b28:	1000683a 	jmp	r2
81104b2c:	81104b4c 	andi	r4,r16,16685
81104b30:	81104b60 	cmpeqi	r4,r16,16685
81104b34:	81104b74 	orhi	r4,r16,16685
81104b38:	81104b88 	cmpgei	r4,r16,16686
81104b3c:	81104b9c 	xori	r4,r16,16686
81104b40:	81104bb0 	cmpltui	r4,r16,16686
81104b44:	81104bc4 	addi	r4,r16,16687
81104b48:	81104bd8 	cmpnei	r4,r16,16687
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81104b4c:	d0a00204 	addi	r2,gp,-32760
81104b50:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104b54:	00800044 	movi	r2,1
81104b58:	e0bffa15 	stw	r2,-24(fp)
			break;
81104b5c:	00002306 	br	81104bec <v_SpaceWire_Interface_Link_Control+0x120>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
81104b60:	d0a00304 	addi	r2,gp,-32756
81104b64:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104b68:	00800044 	movi	r2,1
81104b6c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104b70:	00001e06 	br	81104bec <v_SpaceWire_Interface_Link_Control+0x120>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
81104b74:	d0a00404 	addi	r2,gp,-32752
81104b78:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104b7c:	00800044 	movi	r2,1
81104b80:	e0bffa15 	stw	r2,-24(fp)
			break;
81104b84:	00001906 	br	81104bec <v_SpaceWire_Interface_Link_Control+0x120>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81104b88:	d0a00504 	addi	r2,gp,-32748
81104b8c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104b90:	00800044 	movi	r2,1
81104b94:	e0bffa15 	stw	r2,-24(fp)
			break;
81104b98:	00001406 	br	81104bec <v_SpaceWire_Interface_Link_Control+0x120>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
81104b9c:	d0a00604 	addi	r2,gp,-32744
81104ba0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104ba4:	00800044 	movi	r2,1
81104ba8:	e0bffa15 	stw	r2,-24(fp)
			break;
81104bac:	00000f06 	br	81104bec <v_SpaceWire_Interface_Link_Control+0x120>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
81104bb0:	d0a00704 	addi	r2,gp,-32740
81104bb4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104bb8:	00800044 	movi	r2,1
81104bbc:	e0bffa15 	stw	r2,-24(fp)
			break;
81104bc0:	00000a06 	br	81104bec <v_SpaceWire_Interface_Link_Control+0x120>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
81104bc4:	d0a00804 	addi	r2,gp,-32736
81104bc8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104bcc:	00800044 	movi	r2,1
81104bd0:	e0bffa15 	stw	r2,-24(fp)
			break;
81104bd4:	00000506 	br	81104bec <v_SpaceWire_Interface_Link_Control+0x120>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
81104bd8:	d0a00904 	addi	r2,gp,-32732
81104bdc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104be0:	00800044 	movi	r2,1
81104be4:	e0bffa15 	stw	r2,-24(fp)
			break;
81104be8:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
81104bec:	e0bffa17 	ldw	r2,-24(fp)
81104bf0:	10800058 	cmpnei	r2,r2,1
81104bf4:	10002b1e 	bne	r2,zero,81104ca4 <v_SpaceWire_Interface_Link_Control+0x1d8>
81104bf8:	e0ffff17 	ldw	r3,-4(fp)
81104bfc:	e0bffc17 	ldw	r2,-16(fp)
81104c00:	1884703a 	and	r2,r3,r2
81104c04:	10002726 	beq	r2,zero,81104ca4 <v_SpaceWire_Interface_Link_Control+0x1d8>
			switch (uc_RegisterOperation){
81104c08:	e0bffe03 	ldbu	r2,-8(fp)
81104c0c:	10000326 	beq	r2,zero,81104c1c <v_SpaceWire_Interface_Link_Control+0x150>
81104c10:	10800060 	cmpeqi	r2,r2,1
81104c14:	1000121e 	bne	r2,zero,81104c60 <v_SpaceWire_Interface_Link_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81104c18:	00002306 	br	81104ca8 <v_SpaceWire_Interface_Link_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_spacewire_link_control_status_register_value &= ~ul_ControlMask;
81104c1c:	e0bffb17 	ldw	r2,-20(fp)
81104c20:	10c00017 	ldw	r3,0(r2)
81104c24:	e0bfff17 	ldw	r2,-4(fp)
81104c28:	0084303a 	nor	r2,zero,r2
81104c2c:	1886703a 	and	r3,r3,r2
81104c30:	e0bffb17 	ldw	r2,-20(fp)
81104c34:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81104c38:	e0fffd07 	ldb	r3,-12(fp)
81104c3c:	e0bffb17 	ldw	r2,-20(fp)
81104c40:	10800017 	ldw	r2,0(r2)
81104c44:	100d883a 	mov	r6,r2
81104c48:	01400044 	movi	r5,1
81104c4c:	1809883a 	mov	r4,r3
81104c50:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81104c54:	00800044 	movi	r2,1
81104c58:	e0bffa15 	stw	r2,-24(fp)
				break;
81104c5c:	00001006 	br	81104ca0 <v_SpaceWire_Interface_Link_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_spacewire_link_control_status_register_value |= ul_ControlMask;
81104c60:	e0bffb17 	ldw	r2,-20(fp)
81104c64:	10c00017 	ldw	r3,0(r2)
81104c68:	e0bfff17 	ldw	r2,-4(fp)
81104c6c:	1886b03a 	or	r3,r3,r2
81104c70:	e0bffb17 	ldw	r2,-20(fp)
81104c74:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81104c78:	e0fffd07 	ldb	r3,-12(fp)
81104c7c:	e0bffb17 	ldw	r2,-20(fp)
81104c80:	10800017 	ldw	r2,0(r2)
81104c84:	100d883a 	mov	r6,r2
81104c88:	01400044 	movi	r5,1
81104c8c:	1809883a 	mov	r4,r3
81104c90:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81104c94:	00800044 	movi	r2,1
81104c98:	e0bffa15 	stw	r2,-24(fp)
				break;
81104c9c:	0001883a 	nop

			}
		} else {
81104ca0:	00000106 	br	81104ca8 <v_SpaceWire_Interface_Link_Control+0x1dc>
			bSuccess = FALSE;
81104ca4:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81104ca8:	e0bffa17 	ldw	r2,-24(fp)
	}
81104cac:	e037883a 	mov	sp,fp
81104cb0:	dfc00117 	ldw	ra,4(sp)
81104cb4:	df000017 	ldw	fp,0(sp)
81104cb8:	dec00204 	addi	sp,sp,8
81104cbc:	f800283a 	ret

81104cc0 <ul_SpaceWire_Interface_Link_Error_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Error_Read(char c_SpwID){
81104cc0:	defffb04 	addi	sp,sp,-20
81104cc4:	dfc00415 	stw	ra,16(sp)
81104cc8:	df000315 	stw	fp,12(sp)
81104ccc:	df000304 	addi	fp,sp,12
81104cd0:	2005883a 	mov	r2,r4
81104cd4:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_DISCONNECT_ERROR_BIT_MASK | SPWC_LINK_PARITY_ERROR_BIT_MASK | SPWC_LINK_ESCAPE_ERROR_BIT_MASK | SPWC_LINK_CREDIT_ERROR_BIT_MASK;
81104cd8:	00801e04 	movi	r2,120
81104cdc:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_error_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
81104ce0:	e0bfff07 	ldb	r2,-4(fp)
81104ce4:	01400044 	movi	r5,1
81104ce8:	1009883a 	mov	r4,r2
81104cec:	1103f440 	call	81103f44 <SPWC_READ_REG32>
81104cf0:	1007883a 	mov	r3,r2
81104cf4:	e0bffd17 	ldw	r2,-12(fp)
81104cf8:	1884703a 	and	r2,r3,r2
81104cfc:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_error_value;
81104d00:	e0bffe17 	ldw	r2,-8(fp)
	}
81104d04:	e037883a 	mov	sp,fp
81104d08:	dfc00117 	ldw	ra,4(sp)
81104d0c:	df000017 	ldw	fp,0(sp)
81104d10:	dec00204 	addi	sp,sp,8
81104d14:	f800283a 	ret

81104d18 <ul_SpaceWire_Interface_Link_Status_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Status_Read(char c_SpwID){
81104d18:	defffb04 	addi	sp,sp,-20
81104d1c:	dfc00415 	stw	ra,16(sp)
81104d20:	df000315 	stw	fp,12(sp)
81104d24:	df000304 	addi	fp,sp,12
81104d28:	2005883a 	mov	r2,r4
81104d2c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_STARTED_STATUS_BIT_MASK | SPWC_LINK_CONNECTING_STATUS_BIT_MASK | SPWC_LINK_RUNNING_STATUS_BIT_MASK;
81104d30:	008001c4 	movi	r2,7
81104d34:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_status_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
81104d38:	e0bfff07 	ldb	r2,-4(fp)
81104d3c:	01400044 	movi	r5,1
81104d40:	1009883a 	mov	r4,r2
81104d44:	1103f440 	call	81103f44 <SPWC_READ_REG32>
81104d48:	1007883a 	mov	r3,r2
81104d4c:	e0bffd17 	ldw	r2,-12(fp)
81104d50:	1884703a 	and	r2,r3,r2
81104d54:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_status_value;
81104d58:	e0bffe17 	ldw	r2,-8(fp)
	}
81104d5c:	e037883a 	mov	sp,fp
81104d60:	dfc00117 	ldw	ra,4(sp)
81104d64:	df000017 	ldw	fp,0(sp)
81104d68:	dec00204 	addi	sp,sp,8
81104d6c:	f800283a 	ret

81104d70 <v_SpaceWire_Interface_Send_TimeCode>:

	void v_SpaceWire_Interface_Send_TimeCode(char c_SpwID, alt_u8 TimeCode){
81104d70:	defffb04 	addi	sp,sp,-20
81104d74:	dfc00415 	stw	ra,16(sp)
81104d78:	df000315 	stw	fp,12(sp)
81104d7c:	df000304 	addi	fp,sp,12
81104d80:	2007883a 	mov	r3,r4
81104d84:	2805883a 	mov	r2,r5
81104d88:	e0fffe05 	stb	r3,-8(fp)
81104d8c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = (((alt_u32)TimeCode) << 1) | SPWC_TX_TIMECODE_CONTROL_BIT_MASK;
81104d90:	e0bfff03 	ldbu	r2,-4(fp)
81104d94:	1085883a 	add	r2,r2,r2
81104d98:	10800054 	ori	r2,r2,1
81104d9c:	e0bffd15 	stw	r2,-12(fp)
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, ul_spwc_mask);
81104da0:	e0bffe07 	ldb	r2,-8(fp)
81104da4:	e1bffd17 	ldw	r6,-12(fp)
81104da8:	01400084 	movi	r5,2
81104dac:	1009883a 	mov	r4,r2
81104db0:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>

	}
81104db4:	0001883a 	nop
81104db8:	e037883a 	mov	sp,fp
81104dbc:	dfc00117 	ldw	ra,4(sp)
81104dc0:	df000017 	ldw	fp,0(sp)
81104dc4:	dec00204 	addi	sp,sp,8
81104dc8:	f800283a 	ret

81104dcc <b_SpaceWire_Interface_TimeCode_Arrived>:

	bool b_SpaceWire_Interface_TimeCode_Arrived(char c_SpwID){
81104dcc:	defffc04 	addi	sp,sp,-16
81104dd0:	dfc00315 	stw	ra,12(sp)
81104dd4:	df000215 	stw	fp,8(sp)
81104dd8:	df000204 	addi	fp,sp,8
81104ddc:	2005883a 	mov	r2,r4
81104de0:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_timecode_arrived = FALSE;
81104de4:	e03ffe15 	stw	zero,-8(fp)
		
		if (SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS) & SPWC_RX_TIMECODE_STATUS_BIT_MASK) {
81104de8:	e0bfff07 	ldb	r2,-4(fp)
81104dec:	01400084 	movi	r5,2
81104df0:	1009883a 	mov	r4,r2
81104df4:	1103f440 	call	81103f44 <SPWC_READ_REG32>
81104df8:	1080006c 	andhi	r2,r2,1
81104dfc:	10000226 	beq	r2,zero,81104e08 <b_SpaceWire_Interface_TimeCode_Arrived+0x3c>
			b_timecode_arrived = TRUE;
81104e00:	00800044 	movi	r2,1
81104e04:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_timecode_arrived;
81104e08:	e0bffe17 	ldw	r2,-8(fp)
	}
81104e0c:	e037883a 	mov	sp,fp
81104e10:	dfc00117 	ldw	ra,4(sp)
81104e14:	df000017 	ldw	fp,0(sp)
81104e18:	dec00204 	addi	sp,sp,8
81104e1c:	f800283a 	ret

81104e20 <uc_SpaceWire_Interface_Get_TimeCode>:
	
	alt_u8 uc_SpaceWire_Interface_Get_TimeCode(char c_SpwID){
81104e20:	defffb04 	addi	sp,sp,-20
81104e24:	dfc00415 	stw	ra,16(sp)
81104e28:	df000315 	stw	fp,12(sp)
81104e2c:	df000304 	addi	fp,sp,12
81104e30:	2005883a 	mov	r2,r4
81104e34:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_timecode_register = SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS);
81104e38:	e0bfff07 	ldb	r2,-4(fp)
81104e3c:	01400084 	movi	r5,2
81104e40:	1009883a 	mov	r4,r2
81104e44:	1103f440 	call	81103f44 <SPWC_READ_REG32>
81104e48:	e0bffd15 	stw	r2,-12(fp)
		
		alt_u8 uc_timecode_value = (alt_u8)((ul_timecode_register & (SPWC_RX_TIMECODE_CONTROL_BITS_MASK | SPWC_RX_TIMECODE_COUNTER_VALUE_MASK)) >> 17);
81104e4c:	e0bffd17 	ldw	r2,-12(fp)
81104e50:	10807fac 	andhi	r2,r2,510
81104e54:	1004d47a 	srli	r2,r2,17
81104e58:	e0bffe05 	stb	r2,-8(fp)
	
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, (ul_timecode_register | SPWC_RX_TIMECODE_STATUS_BIT_MASK));
81104e5c:	e0ffff07 	ldb	r3,-4(fp)
81104e60:	e0bffd17 	ldw	r2,-12(fp)
81104e64:	10800074 	orhi	r2,r2,1
81104e68:	100d883a 	mov	r6,r2
81104e6c:	01400084 	movi	r5,2
81104e70:	1809883a 	mov	r4,r3
81104e74:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>

		return uc_timecode_value;
81104e78:	e0bffe03 	ldbu	r2,-8(fp)
	}
81104e7c:	e037883a 	mov	sp,fp
81104e80:	dfc00117 	ldw	ra,4(sp)
81104e84:	df000017 	ldw	fp,0(sp)
81104e88:	dec00204 	addi	sp,sp,8
81104e8c:	f800283a 	ret

81104e90 <uc_SpaceWire_Interface_Get_TX_Div>:

	alt_u8 uc_SpaceWire_Interface_Get_TX_Div(char c_SpwID){
81104e90:	defffb04 	addi	sp,sp,-20
81104e94:	dfc00415 	stw	ra,16(sp)
81104e98:	df000315 	stw	fp,12(sp)
81104e9c:	df000304 	addi	fp,sp,12
81104ea0:	2005883a 	mov	r2,r4
81104ea4:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
81104ea8:	00800134 	movhi	r2,4
81104eac:	10bf0004 	addi	r2,r2,-1024
81104eb0:	e0bffd15 	stw	r2,-12(fp)
		alt_u8 uc_txdiv_value = (alt_u8)((SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask) >> 10);
81104eb4:	e0bfff07 	ldb	r2,-4(fp)
81104eb8:	01400044 	movi	r5,1
81104ebc:	1009883a 	mov	r4,r2
81104ec0:	1103f440 	call	81103f44 <SPWC_READ_REG32>
81104ec4:	1007883a 	mov	r3,r2
81104ec8:	e0bffd17 	ldw	r2,-12(fp)
81104ecc:	1884703a 	and	r2,r3,r2
81104ed0:	1004d2ba 	srli	r2,r2,10
81104ed4:	e0bffe05 	stb	r2,-8(fp)

		return uc_txdiv_value;
81104ed8:	e0bffe03 	ldbu	r2,-8(fp)
	}
81104edc:	e037883a 	mov	sp,fp
81104ee0:	dfc00117 	ldw	ra,4(sp)
81104ee4:	df000017 	ldw	fp,0(sp)
81104ee8:	dec00204 	addi	sp,sp,8
81104eec:	f800283a 	ret

81104ef0 <b_SpaceWire_Interface_Set_TX_Div>:

	bool b_SpaceWire_Interface_Set_TX_Div(char c_SpwID, alt_u8 uc_TxDiv){
81104ef0:	defff804 	addi	sp,sp,-32
81104ef4:	dfc00715 	stw	ra,28(sp)
81104ef8:	df000615 	stw	fp,24(sp)
81104efc:	df000604 	addi	fp,sp,24
81104f00:	2007883a 	mov	r3,r4
81104f04:	2805883a 	mov	r2,r5
81104f08:	e0fffe05 	stb	r3,-8(fp)
81104f0c:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81104f10:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
81104f14:	00800134 	movhi	r2,4
81104f18:	10bf0004 	addi	r2,r2,-1024
81104f1c:	e0bffc15 	stw	r2,-16(fp)
		const alt_u32 ul_txdiv_mask = (alt_u32)(uc_TxDiv << 10);
81104f20:	e0bfff03 	ldbu	r2,-4(fp)
81104f24:	100492ba 	slli	r2,r2,10
81104f28:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81104f2c:	d0a00204 	addi	r2,gp,-32760
81104f30:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81104f34:	e0bffe07 	ldb	r2,-8(fp)
81104f38:	10bfefc4 	addi	r2,r2,-65
81104f3c:	10c00228 	cmpgeui	r3,r2,8
81104f40:	1800361e 	bne	r3,zero,8110501c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
81104f44:	100690ba 	slli	r3,r2,2
81104f48:	00a04434 	movhi	r2,33040
81104f4c:	1093d704 	addi	r2,r2,20316
81104f50:	1885883a 	add	r2,r3,r2
81104f54:	10800017 	ldw	r2,0(r2)
81104f58:	1000683a 	jmp	r2
81104f5c:	81104f7c 	xorhi	r4,r16,16701
81104f60:	81104f90 	cmplti	r4,r16,16702
81104f64:	81104fa4 	muli	r4,r16,16702
81104f68:	81104fb8 	rdprs	r4,r16,16702
81104f6c:	81104fcc 	andi	r4,r16,16703
81104f70:	81104fe0 	cmpeqi	r4,r16,16703
81104f74:	81104ff4 	orhi	r4,r16,16703
81104f78:	81105008 	cmpgei	r4,r16,16704
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81104f7c:	d0a00204 	addi	r2,gp,-32760
81104f80:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104f84:	00800044 	movi	r2,1
81104f88:	e0bffa15 	stw	r2,-24(fp)
			break;
81104f8c:	00002306 	br	8110501c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
81104f90:	d0a00304 	addi	r2,gp,-32756
81104f94:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104f98:	00800044 	movi	r2,1
81104f9c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104fa0:	00001e06 	br	8110501c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
81104fa4:	d0a00404 	addi	r2,gp,-32752
81104fa8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104fac:	00800044 	movi	r2,1
81104fb0:	e0bffa15 	stw	r2,-24(fp)
			break;
81104fb4:	00001906 	br	8110501c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81104fb8:	d0a00504 	addi	r2,gp,-32748
81104fbc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104fc0:	00800044 	movi	r2,1
81104fc4:	e0bffa15 	stw	r2,-24(fp)
			break;
81104fc8:	00001406 	br	8110501c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
81104fcc:	d0a00604 	addi	r2,gp,-32744
81104fd0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104fd4:	00800044 	movi	r2,1
81104fd8:	e0bffa15 	stw	r2,-24(fp)
			break;
81104fdc:	00000f06 	br	8110501c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
81104fe0:	d0a00704 	addi	r2,gp,-32740
81104fe4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104fe8:	00800044 	movi	r2,1
81104fec:	e0bffa15 	stw	r2,-24(fp)
			break;
81104ff0:	00000a06 	br	8110501c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
81104ff4:	d0a00804 	addi	r2,gp,-32736
81104ff8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104ffc:	00800044 	movi	r2,1
81105000:	e0bffa15 	stw	r2,-24(fp)
			break;
81105004:	00000506 	br	8110501c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
81105008:	d0a00904 	addi	r2,gp,-32732
8110500c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105010:	00800044 	movi	r2,1
81105014:	e0bffa15 	stw	r2,-24(fp)
			break;
81105018:	0001883a 	nop
		}
		if (bSuccess == TRUE){
8110501c:	e0bffa17 	ldw	r2,-24(fp)
81105020:	10800058 	cmpnei	r2,r2,1
81105024:	1000171e 	bne	r2,zero,81105084 <b_SpaceWire_Interface_Set_TX_Div+0x194>
			*ul_spwc_spacewire_link_control_status_register_value &= ~(ul_spwc_mask);
81105028:	e0bffb17 	ldw	r2,-20(fp)
8110502c:	10c00017 	ldw	r3,0(r2)
81105030:	e0bffc17 	ldw	r2,-16(fp)
81105034:	0084303a 	nor	r2,zero,r2
81105038:	1886703a 	and	r3,r3,r2
8110503c:	e0bffb17 	ldw	r2,-20(fp)
81105040:	10c00015 	stw	r3,0(r2)
			*ul_spwc_spacewire_link_control_status_register_value |= ul_txdiv_mask;
81105044:	e0bffb17 	ldw	r2,-20(fp)
81105048:	10c00017 	ldw	r3,0(r2)
8110504c:	e0bffd17 	ldw	r2,-12(fp)
81105050:	1886b03a 	or	r3,r3,r2
81105054:	e0bffb17 	ldw	r2,-20(fp)
81105058:	10c00015 	stw	r3,0(r2)
			SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
8110505c:	e0fffe07 	ldb	r3,-8(fp)
81105060:	e0bffb17 	ldw	r2,-20(fp)
81105064:	10800017 	ldw	r2,0(r2)
81105068:	100d883a 	mov	r6,r2
8110506c:	01400044 	movi	r5,1
81105070:	1809883a 	mov	r4,r3
81105074:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
81105078:	00800044 	movi	r2,1
8110507c:	e0bffa15 	stw	r2,-24(fp)
81105080:	00000106 	br	81105088 <b_SpaceWire_Interface_Set_TX_Div+0x198>
		} else {
			bSuccess = FALSE;
81105084:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81105088:	e0bffa17 	ldw	r2,-24(fp)
	}
8110508c:	e037883a 	mov	sp,fp
81105090:	dfc00117 	ldw	ra,4(sp)
81105094:	df000017 	ldw	fp,0(sp)
81105098:	dec00204 	addi	sp,sp,8
8110509c:	f800283a 	ret

811050a0 <b_SpaceWire_Interface_Write_TX_Data>:

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){
811050a0:	defffa04 	addi	sp,sp,-24
811050a4:	dfc00515 	stw	ra,20(sp)
811050a8:	df000415 	stw	fp,16(sp)
811050ac:	df000404 	addi	fp,sp,16
811050b0:	2807883a 	mov	r3,r5
811050b4:	3005883a 	mov	r2,r6
811050b8:	e13ffd05 	stb	r4,-12(fp)
811050bc:	e0fffe05 	stb	r3,-8(fp)
811050c0:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
811050c4:	e03ffc15 	stw	zero,-16(fp)
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
811050c8:	e0bffd07 	ldb	r2,-12(fp)
811050cc:	014000c4 	movi	r5,3
811050d0:	1009883a 	mov	r4,r2
811050d4:	1103f440 	call	81103f44 <SPWC_READ_REG32>
811050d8:	1081000c 	andi	r2,r2,1024
811050dc:	10000c26 	beq	r2,zero,81105110 <b_SpaceWire_Interface_Write_TX_Data+0x70>
			SPWC_WRITE_REG32(c_SpwID,
811050e0:	e13ffd07 	ldb	r4,-12(fp)
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
811050e4:	e0bffe03 	ldbu	r2,-8(fp)
811050e8:	1080004c 	andi	r2,r2,1
811050ec:	1004923a 	slli	r2,r2,8
811050f0:	10c08014 	ori	r3,r2,512
811050f4:	e0bfff03 	ldbu	r2,-4(fp)
811050f8:	1884b03a 	or	r2,r3,r2

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){

		bool bSuccess = FALSE;
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
			SPWC_WRITE_REG32(c_SpwID,
811050fc:	100d883a 	mov	r6,r2
81105100:	014000c4 	movi	r5,3
81105104:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
			bSuccess = TRUE;
81105108:	00800044 	movi	r2,1
8110510c:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81105110:	e0bffc17 	ldw	r2,-16(fp)
	}
81105114:	e037883a 	mov	sp,fp
81105118:	dfc00117 	ldw	ra,4(sp)
8110511c:	df000017 	ldw	fp,0(sp)
81105120:	dec00204 	addi	sp,sp,8
81105124:	f800283a 	ret

81105128 <b_SpaceWire_Interface_Send_SpaceWire_Data>:

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
81105128:	defff904 	addi	sp,sp,-28
8110512c:	dfc00615 	stw	ra,24(sp)
81105130:	df000515 	stw	fp,20(sp)
81105134:	df000504 	addi	fp,sp,20
81105138:	2007883a 	mov	r3,r4
8110513c:	e17ffe15 	stw	r5,-8(fp)
81105140:	3005883a 	mov	r2,r6
81105144:	e0fffd05 	stb	r3,-12(fp)
81105148:	e0bfff0d 	sth	r2,-4(fp)
		bool bSuccess = FALSE;
8110514c:	e03ffb15 	stw	zero,-20(fp)

		alt_u16 cnt = 0;
81105150:	e03ffc0d 	sth	zero,-16(fp)
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
81105154:	00000306 	br	81105164 <b_SpaceWire_Interface_Send_SpaceWire_Data+0x3c>
			cnt++;
81105158:	e0bffc0b 	ldhu	r2,-16(fp)
8110515c:	10800044 	addi	r2,r2,1
81105160:	e0bffc0d 	sth	r2,-16(fp)

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
		bool bSuccess = FALSE;

		alt_u16 cnt = 0;
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
81105164:	e13ffd07 	ldb	r4,-12(fp)
81105168:	e0bffc0b 	ldhu	r2,-16(fp)
8110516c:	e0fffe17 	ldw	r3,-8(fp)
81105170:	1885883a 	add	r2,r3,r2
81105174:	10800003 	ldbu	r2,0(r2)
81105178:	10803fcc 	andi	r2,r2,255
8110517c:	100d883a 	mov	r6,r2
81105180:	000b883a 	mov	r5,zero
81105184:	11050a00 	call	811050a0 <b_SpaceWire_Interface_Write_TX_Data>
81105188:	10000426 	beq	r2,zero,8110519c <b_SpaceWire_Interface_Send_SpaceWire_Data+0x74>
8110518c:	e0fffc0b 	ldhu	r3,-16(fp)
81105190:	e0bfff0b 	ldhu	r2,-4(fp)
81105194:	10bfffc4 	addi	r2,r2,-1
81105198:	18bfef16 	blt	r3,r2,81105158 <__reset+0xfb0e5158>
			cnt++;
		}
		if (cnt == (data_size - 1)) {
8110519c:	e0fffc0b 	ldhu	r3,-16(fp)
811051a0:	e0bfff0b 	ldhu	r2,-4(fp)
811051a4:	10bfffc4 	addi	r2,r2,-1
811051a8:	1880081e 	bne	r3,r2,811051cc <b_SpaceWire_Interface_Send_SpaceWire_Data+0xa4>
			if (b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 1, 0)){
811051ac:	e0bffd07 	ldb	r2,-12(fp)
811051b0:	000d883a 	mov	r6,zero
811051b4:	01400044 	movi	r5,1
811051b8:	1009883a 	mov	r4,r2
811051bc:	11050a00 	call	811050a0 <b_SpaceWire_Interface_Write_TX_Data>
811051c0:	10000226 	beq	r2,zero,811051cc <b_SpaceWire_Interface_Send_SpaceWire_Data+0xa4>
				bSuccess = TRUE;
811051c4:	00800044 	movi	r2,1
811051c8:	e0bffb15 	stw	r2,-20(fp)
			}
		}

		return bSuccess;
811051cc:	e0bffb17 	ldw	r2,-20(fp)
	}
811051d0:	e037883a 	mov	sp,fp
811051d4:	dfc00117 	ldw	ra,4(sp)
811051d8:	df000017 	ldw	fp,0(sp)
811051dc:	dec00204 	addi	sp,sp,8
811051e0:	f800283a 	ret

811051e4 <b_SpaceWire_Interface_Read_RX_Data>:

	bool b_SpaceWire_Interface_Read_RX_Data(char c_SpwID, alt_u8 *uc_RxFlag, alt_u8 *uc_RxData){
811051e4:	defff904 	addi	sp,sp,-28
811051e8:	dfc00615 	stw	ra,24(sp)
811051ec:	df000515 	stw	fp,20(sp)
811051f0:	df000504 	addi	fp,sp,20
811051f4:	2005883a 	mov	r2,r4
811051f8:	e17ffe15 	stw	r5,-8(fp)
811051fc:	e1bfff15 	stw	r6,-4(fp)
81105200:	e0bffd05 	stb	r2,-12(fp)

		bool bSuccess = FALSE;
81105204:	e03ffb15 	stw	zero,-20(fp)
		alt_u32 backdoor_register = 0;
81105208:	e03ffc15 	stw	zero,-16(fp)

		backdoor_register = SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS);
8110520c:	e0bffd07 	ldb	r2,-12(fp)
81105210:	014000c4 	movi	r5,3
81105214:	1009883a 	mov	r4,r2
81105218:	1103f440 	call	81103f44 <SPWC_READ_REG32>
8110521c:	e0bffc15 	stw	r2,-16(fp)
		if (backdoor_register & SPWC_RX_CODEC_RX_DATAVALID_STATUS_BIT_MASK) {
81105220:	e0bffc17 	ldw	r2,-16(fp)
81105224:	1081002c 	andhi	r2,r2,1024
81105228:	10001326 	beq	r2,zero,81105278 <b_SpaceWire_Interface_Read_RX_Data+0x94>

			*uc_RxFlag = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_FLAG_VALUE_MASK) >> 24);
8110522c:	e0bffc17 	ldw	r2,-16(fp)
81105230:	1080402c 	andhi	r2,r2,256
81105234:	1004d63a 	srli	r2,r2,24
81105238:	1007883a 	mov	r3,r2
8110523c:	e0bffe17 	ldw	r2,-8(fp)
81105240:	10c00005 	stb	r3,0(r2)
			*uc_RxData = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_DATA_VALUE_MASK) >> 16);
81105244:	e0bffc17 	ldw	r2,-16(fp)
81105248:	10803fec 	andhi	r2,r2,255
8110524c:	1004d43a 	srli	r2,r2,16
81105250:	1007883a 	mov	r3,r2
81105254:	e0bfff17 	ldw	r2,-4(fp)
81105258:	10c00005 	stb	r3,0(r2)

			SPWC_WRITE_REG32(c_SpwID,
8110525c:	e0bffd07 	ldb	r2,-12(fp)
81105260:	01808034 	movhi	r6,512
81105264:	014000c4 	movi	r5,3
81105268:	1009883a 	mov	r4,r2
8110526c:	1103e640 	call	81103e64 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_RX_CODEC_RX_READ_CONTROL_BIT_MASK));
			bSuccess = TRUE;
81105270:	00800044 	movi	r2,1
81105274:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81105278:	e0bffb17 	ldw	r2,-20(fp)
	}
8110527c:	e037883a 	mov	sp,fp
81105280:	dfc00117 	ldw	ra,4(sp)
81105284:	df000017 	ldw	fp,0(sp)
81105288:	dec00204 	addi	sp,sp,8
8110528c:	f800283a 	ret

81105290 <ui_SpaceWire_Interface_Get_SpaceWire_Data>:

	alt_u16 ui_SpaceWire_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 buffer_size){
81105290:	defffa04 	addi	sp,sp,-24
81105294:	dfc00515 	stw	ra,20(sp)
81105298:	df000415 	stw	fp,16(sp)
8110529c:	df000404 	addi	fp,sp,16
811052a0:	2007883a 	mov	r3,r4
811052a4:	e17ffe15 	stw	r5,-8(fp)
811052a8:	3005883a 	mov	r2,r6
811052ac:	e0fffd05 	stb	r3,-12(fp)
811052b0:	e0bfff0d 	sth	r2,-4(fp)

		alt_u16 ui_rx_data_size = 0;
811052b4:	e03ffc0d 	sth	zero,-16(fp)

		alt_u8 spw_flag = 0;
811052b8:	e03ffc85 	stb	zero,-14(fp)
		alt_u8 spw_data = 0;
811052bc:	e03ffcc5 	stb	zero,-13(fp)

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
811052c0:	00000b06 	br	811052f0 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x60>
			if (spw_flag == 0) {
811052c4:	e0bffc83 	ldbu	r2,-14(fp)
811052c8:	10803fcc 	andi	r2,r2,255
811052cc:	1000081e 	bne	r2,zero,811052f0 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x60>
				data_buffer[ui_rx_data_size] = spw_data;
811052d0:	e0bffc0b 	ldhu	r2,-16(fp)
811052d4:	e0fffe17 	ldw	r3,-8(fp)
811052d8:	1885883a 	add	r2,r3,r2
811052dc:	e0fffcc3 	ldbu	r3,-13(fp)
811052e0:	10c00005 	stb	r3,0(r2)
				ui_rx_data_size++;
811052e4:	e0bffc0b 	ldhu	r2,-16(fp)
811052e8:	10800044 	addi	r2,r2,1
811052ec:	e0bffc0d 	sth	r2,-16(fp)
		alt_u16 ui_rx_data_size = 0;

		alt_u8 spw_flag = 0;
		alt_u8 spw_data = 0;

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
811052f0:	e0bffd07 	ldb	r2,-12(fp)
811052f4:	e13ffcc4 	addi	r4,fp,-13
811052f8:	e0fffc84 	addi	r3,fp,-14
811052fc:	200d883a 	mov	r6,r4
81105300:	180b883a 	mov	r5,r3
81105304:	1009883a 	mov	r4,r2
81105308:	11051e40 	call	811051e4 <b_SpaceWire_Interface_Read_RX_Data>
8110530c:	10000426 	beq	r2,zero,81105320 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x90>
81105310:	e0fffc0b 	ldhu	r3,-16(fp)
81105314:	e0bfff0b 	ldhu	r2,-4(fp)
81105318:	10bfffc4 	addi	r2,r2,-1
8110531c:	18bfe916 	blt	r3,r2,811052c4 <__reset+0xfb0e52c4>
				data_buffer[ui_rx_data_size] = spw_data;
				ui_rx_data_size++;
			}
		}

		return ui_rx_data_size;
81105320:	e0bffc0b 	ldhu	r2,-16(fp)
	}
81105324:	e037883a 	mov	sp,fp
81105328:	dfc00117 	ldw	ra,4(sp)
8110532c:	df000017 	ldw	fp,0(sp)
81105330:	dec00204 	addi	sp,sp,8
81105334:	f800283a 	ret

81105338 <TRAN_WRITE_REG32>:
	alt_u32 ul_tran_e_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_f_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_g_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_h_interface_control_status_register_value = 0x00000000;

	void TRAN_WRITE_REG32(char c_SpwID, alt_u8 RegisterOffset, alt_u32 RegisterValue){
81105338:	defffb04 	addi	sp,sp,-20
8110533c:	df000415 	stw	fp,16(sp)
81105340:	df000404 	addi	fp,sp,16
81105344:	2007883a 	mov	r3,r4
81105348:	2805883a 	mov	r2,r5
8110534c:	e1bfff15 	stw	r6,-4(fp)
81105350:	e0fffd05 	stb	r3,-12(fp)
81105354:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
81105358:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
8110535c:	e0bffd07 	ldb	r2,-12(fp)
81105360:	10bfefc4 	addi	r2,r2,-65
81105364:	10c00228 	cmpgeui	r3,r2,8
81105368:	18001e1e 	bne	r3,zero,811053e4 <TRAN_WRITE_REG32+0xac>
8110536c:	100690ba 	slli	r3,r2,2
81105370:	00a04434 	movhi	r2,33040
81105374:	1094e104 	addi	r2,r2,21380
81105378:	1885883a 	add	r2,r3,r2
8110537c:	10800017 	ldw	r2,0(r2)
81105380:	1000683a 	jmp	r2
81105384:	811053a4 	muli	r4,r16,16718
81105388:	811053ac 	andhi	r4,r16,16718
8110538c:	811053b4 	orhi	r4,r16,16718
81105390:	811053bc 	xorhi	r4,r16,16718
81105394:	811053c4 	addi	r4,r16,16719
81105398:	811053cc 	andi	r4,r16,16719
8110539c:	811053d4 	ori	r4,r16,16719
811053a0:	811053dc 	xori	r4,r16,16719
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
811053a4:	e03ffc15 	stw	zero,-16(fp)
			break;
811053a8:	00000e06 	br	811053e4 <TRAN_WRITE_REG32+0xac>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
811053ac:	e03ffc15 	stw	zero,-16(fp)
			break;
811053b0:	00000c06 	br	811053e4 <TRAN_WRITE_REG32+0xac>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
811053b4:	e03ffc15 	stw	zero,-16(fp)
			break;
811053b8:	00000a06 	br	811053e4 <TRAN_WRITE_REG32+0xac>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
811053bc:	e03ffc15 	stw	zero,-16(fp)
			break;
811053c0:	00000806 	br	811053e4 <TRAN_WRITE_REG32+0xac>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
811053c4:	e03ffc15 	stw	zero,-16(fp)
			break;
811053c8:	00000606 	br	811053e4 <TRAN_WRITE_REG32+0xac>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
811053cc:	e03ffc15 	stw	zero,-16(fp)
			break;
811053d0:	00000406 	br	811053e4 <TRAN_WRITE_REG32+0xac>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
811053d4:	e03ffc15 	stw	zero,-16(fp)
			break;
811053d8:	00000206 	br	811053e4 <TRAN_WRITE_REG32+0xac>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
811053dc:	e03ffc15 	stw	zero,-16(fp)
			break;
811053e0:	0001883a 	nop
		}
		*(pTranAddr + (alt_u32)RegisterOffset) = (alt_u32) RegisterValue;
811053e4:	e0bffe03 	ldbu	r2,-8(fp)
811053e8:	1085883a 	add	r2,r2,r2
811053ec:	1085883a 	add	r2,r2,r2
811053f0:	1007883a 	mov	r3,r2
811053f4:	e0bffc17 	ldw	r2,-16(fp)
811053f8:	10c5883a 	add	r2,r2,r3
811053fc:	e0ffff17 	ldw	r3,-4(fp)
81105400:	10c00015 	stw	r3,0(r2)
	}
81105404:	0001883a 	nop
81105408:	e037883a 	mov	sp,fp
8110540c:	df000017 	ldw	fp,0(sp)
81105410:	dec00104 	addi	sp,sp,4
81105414:	f800283a 	ret

81105418 <TRAN_READ_REG32>:

	alt_u32 TRAN_READ_REG32(char c_SpwID, alt_u8 RegisterOffset){
81105418:	defffb04 	addi	sp,sp,-20
8110541c:	df000415 	stw	fp,16(sp)
81105420:	df000404 	addi	fp,sp,16
81105424:	2007883a 	mov	r3,r4
81105428:	2805883a 	mov	r2,r5
8110542c:	e0fffe05 	stb	r3,-8(fp)
81105430:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81105434:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
81105438:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
8110543c:	e0bffe07 	ldb	r2,-8(fp)
81105440:	10bfefc4 	addi	r2,r2,-65
81105444:	10c00228 	cmpgeui	r3,r2,8
81105448:	18001e1e 	bne	r3,zero,811054c4 <TRAN_READ_REG32+0xac>
8110544c:	100690ba 	slli	r3,r2,2
81105450:	00a04434 	movhi	r2,33040
81105454:	10951904 	addi	r2,r2,21604
81105458:	1885883a 	add	r2,r3,r2
8110545c:	10800017 	ldw	r2,0(r2)
81105460:	1000683a 	jmp	r2
81105464:	81105484 	addi	r4,r16,16722
81105468:	8110548c 	andi	r4,r16,16722
8110546c:	81105494 	ori	r4,r16,16722
81105470:	8110549c 	xori	r4,r16,16722
81105474:	811054a4 	muli	r4,r16,16722
81105478:	811054ac 	andhi	r4,r16,16722
8110547c:	811054b4 	orhi	r4,r16,16722
81105480:	811054bc 	xorhi	r4,r16,16722
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81105484:	e03ffc15 	stw	zero,-16(fp)
			break;
81105488:	00000e06 	br	811054c4 <TRAN_READ_REG32+0xac>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
8110548c:	e03ffc15 	stw	zero,-16(fp)
			break;
81105490:	00000c06 	br	811054c4 <TRAN_READ_REG32+0xac>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81105494:	e03ffc15 	stw	zero,-16(fp)
			break;
81105498:	00000a06 	br	811054c4 <TRAN_READ_REG32+0xac>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
8110549c:	e03ffc15 	stw	zero,-16(fp)
			break;
811054a0:	00000806 	br	811054c4 <TRAN_READ_REG32+0xac>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
811054a4:	e03ffc15 	stw	zero,-16(fp)
			break;
811054a8:	00000606 	br	811054c4 <TRAN_READ_REG32+0xac>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
811054ac:	e03ffc15 	stw	zero,-16(fp)
			break;
811054b0:	00000406 	br	811054c4 <TRAN_READ_REG32+0xac>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
811054b4:	e03ffc15 	stw	zero,-16(fp)
			break;
811054b8:	00000206 	br	811054c4 <TRAN_READ_REG32+0xac>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
811054bc:	e03ffc15 	stw	zero,-16(fp)
			break;
811054c0:	0001883a 	nop
		}
		RegisterValue = *(pTranAddr + (alt_u32)RegisterOffset);
811054c4:	e0bfff03 	ldbu	r2,-4(fp)
811054c8:	1085883a 	add	r2,r2,r2
811054cc:	1085883a 	add	r2,r2,r2
811054d0:	1007883a 	mov	r3,r2
811054d4:	e0bffc17 	ldw	r2,-16(fp)
811054d8:	10c5883a 	add	r2,r2,r3
811054dc:	10800017 	ldw	r2,0(r2)
811054e0:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
811054e4:	e0bffd17 	ldw	r2,-12(fp)
	}
811054e8:	e037883a 	mov	sp,fp
811054ec:	df000017 	ldw	fp,0(sp)
811054f0:	dec00104 	addi	sp,sp,4
811054f4:	f800283a 	ret

811054f8 <b_Transparent_Interface_Write_Register>:

	bool b_Transparent_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
811054f8:	defffa04 	addi	sp,sp,-24
811054fc:	dfc00515 	stw	ra,20(sp)
81105500:	df000415 	stw	fp,16(sp)
81105504:	df000404 	addi	fp,sp,16
81105508:	2007883a 	mov	r3,r4
8110550c:	2805883a 	mov	r2,r5
81105510:	e1bfff15 	stw	r6,-4(fp)
81105514:	e0fffd05 	stb	r3,-12(fp)
81105518:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
8110551c:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
81105520:	e0bffe03 	ldbu	r2,-8(fp)
81105524:	108000e8 	cmpgeui	r2,r2,3
81105528:	1000081e 	bne	r2,zero,8110554c <b_Transparent_Interface_Write_Register+0x54>
			TRAN_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
8110552c:	e0bffd07 	ldb	r2,-12(fp)
81105530:	e0fffe03 	ldbu	r3,-8(fp)
81105534:	e1bfff17 	ldw	r6,-4(fp)
81105538:	180b883a 	mov	r5,r3
8110553c:	1009883a 	mov	r4,r2
81105540:	11053380 	call	81105338 <TRAN_WRITE_REG32>
			bSuccess = TRUE;
81105544:	00800044 	movi	r2,1
81105548:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
8110554c:	e0bffc17 	ldw	r2,-16(fp)
	}
81105550:	e037883a 	mov	sp,fp
81105554:	dfc00117 	ldw	ra,4(sp)
81105558:	df000017 	ldw	fp,0(sp)
8110555c:	dec00204 	addi	sp,sp,8
81105560:	f800283a 	ret

81105564 <ul_Transparent_Interface_Read_Register>:

	alt_u32 ul_Transparent_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
81105564:	defffb04 	addi	sp,sp,-20
81105568:	dfc00415 	stw	ra,16(sp)
8110556c:	df000315 	stw	fp,12(sp)
81105570:	df000304 	addi	fp,sp,12
81105574:	2007883a 	mov	r3,r4
81105578:	2805883a 	mov	r2,r5
8110557c:	e0fffe05 	stb	r3,-8(fp)
81105580:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81105584:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
81105588:	e0bfff03 	ldbu	r2,-4(fp)
8110558c:	108000e8 	cmpgeui	r2,r2,3
81105590:	1000061e 	bne	r2,zero,811055ac <ul_Transparent_Interface_Read_Register+0x48>
			ul_RegisterValue = TRAN_READ_REG32(c_SpwID, uc_RegisterAddress);
81105594:	e0bffe07 	ldb	r2,-8(fp)
81105598:	e0ffff03 	ldbu	r3,-4(fp)
8110559c:	180b883a 	mov	r5,r3
811055a0:	1009883a 	mov	r4,r2
811055a4:	11054180 	call	81105418 <TRAN_READ_REG32>
811055a8:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
811055ac:	e0bffd17 	ldw	r2,-12(fp)
	}
811055b0:	e037883a 	mov	sp,fp
811055b4:	dfc00117 	ldw	ra,4(sp)
811055b8:	df000017 	ldw	fp,0(sp)
811055bc:	dec00204 	addi	sp,sp,8
811055c0:	f800283a 	ret

811055c4 <v_Transparent_Interface_Enable_Control>:

	bool v_Transparent_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
811055c4:	defff804 	addi	sp,sp,-32
811055c8:	dfc00715 	stw	ra,28(sp)
811055cc:	df000615 	stw	fp,24(sp)
811055d0:	df000604 	addi	fp,sp,24
811055d4:	2007883a 	mov	r3,r4
811055d8:	2805883a 	mov	r2,r5
811055dc:	e1bfff15 	stw	r6,-4(fp)
811055e0:	e0fffd05 	stb	r3,-12(fp)
811055e4:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811055e8:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK;
811055ec:	0081c004 	movi	r2,1792
811055f0:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811055f4:	d0a03404 	addi	r2,gp,-32560
811055f8:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811055fc:	e0bffd07 	ldb	r2,-12(fp)
81105600:	10bfefc4 	addi	r2,r2,-65
81105604:	10c00228 	cmpgeui	r3,r2,8
81105608:	1800361e 	bne	r3,zero,811056e4 <v_Transparent_Interface_Enable_Control+0x120>
8110560c:	100690ba 	slli	r3,r2,2
81105610:	00a04434 	movhi	r2,33040
81105614:	10958904 	addi	r2,r2,22052
81105618:	1885883a 	add	r2,r3,r2
8110561c:	10800017 	ldw	r2,0(r2)
81105620:	1000683a 	jmp	r2
81105624:	81105644 	addi	r4,r16,16729
81105628:	81105658 	cmpnei	r4,r16,16729
8110562c:	8110566c 	andhi	r4,r16,16729
81105630:	81105680 	call	88110568 <__reset+0x20f0568>
81105634:	81105694 	ori	r4,r16,16730
81105638:	811056a8 	cmpgeui	r4,r16,16730
8110563c:	811056bc 	xorhi	r4,r16,16730
81105640:	811056d0 	cmplti	r4,r16,16731
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81105644:	d0a03404 	addi	r2,gp,-32560
81105648:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110564c:	00800044 	movi	r2,1
81105650:	e0bffa15 	stw	r2,-24(fp)
			break;
81105654:	00002306 	br	811056e4 <v_Transparent_Interface_Enable_Control+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81105658:	d0a03504 	addi	r2,gp,-32556
8110565c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105660:	00800044 	movi	r2,1
81105664:	e0bffa15 	stw	r2,-24(fp)
			break;
81105668:	00001e06 	br	811056e4 <v_Transparent_Interface_Enable_Control+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
8110566c:	d0a03604 	addi	r2,gp,-32552
81105670:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105674:	00800044 	movi	r2,1
81105678:	e0bffa15 	stw	r2,-24(fp)
			break;
8110567c:	00001906 	br	811056e4 <v_Transparent_Interface_Enable_Control+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
81105680:	d0a03704 	addi	r2,gp,-32548
81105684:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105688:	00800044 	movi	r2,1
8110568c:	e0bffa15 	stw	r2,-24(fp)
			break;
81105690:	00001406 	br	811056e4 <v_Transparent_Interface_Enable_Control+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
81105694:	d0a03804 	addi	r2,gp,-32544
81105698:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110569c:	00800044 	movi	r2,1
811056a0:	e0bffa15 	stw	r2,-24(fp)
			break;
811056a4:	00000f06 	br	811056e4 <v_Transparent_Interface_Enable_Control+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
811056a8:	d0a03904 	addi	r2,gp,-32540
811056ac:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811056b0:	00800044 	movi	r2,1
811056b4:	e0bffa15 	stw	r2,-24(fp)
			break;
811056b8:	00000a06 	br	811056e4 <v_Transparent_Interface_Enable_Control+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
811056bc:	d0a03a04 	addi	r2,gp,-32536
811056c0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811056c4:	00800044 	movi	r2,1
811056c8:	e0bffa15 	stw	r2,-24(fp)
			break;
811056cc:	00000506 	br	811056e4 <v_Transparent_Interface_Enable_Control+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
811056d0:	d0a03b04 	addi	r2,gp,-32532
811056d4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811056d8:	00800044 	movi	r2,1
811056dc:	e0bffa15 	stw	r2,-24(fp)
			break;
811056e0:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
811056e4:	e0bffa17 	ldw	r2,-24(fp)
811056e8:	10800058 	cmpnei	r2,r2,1
811056ec:	10002b1e 	bne	r2,zero,8110579c <v_Transparent_Interface_Enable_Control+0x1d8>
811056f0:	e0ffff17 	ldw	r3,-4(fp)
811056f4:	e0bffc17 	ldw	r2,-16(fp)
811056f8:	1884703a 	and	r2,r3,r2
811056fc:	10002726 	beq	r2,zero,8110579c <v_Transparent_Interface_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
81105700:	e0bffe03 	ldbu	r2,-8(fp)
81105704:	10000326 	beq	r2,zero,81105714 <v_Transparent_Interface_Enable_Control+0x150>
81105708:	10800060 	cmpeqi	r2,r2,1
8110570c:	1000121e 	bne	r2,zero,81105758 <v_Transparent_Interface_Enable_Control+0x194>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81105710:	00002306 	br	811057a0 <v_Transparent_Interface_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){
			
				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_EnableMask;
81105714:	e0bffb17 	ldw	r2,-20(fp)
81105718:	10c00017 	ldw	r3,0(r2)
8110571c:	e0bfff17 	ldw	r2,-4(fp)
81105720:	0084303a 	nor	r2,zero,r2
81105724:	1886703a 	and	r3,r3,r2
81105728:	e0bffb17 	ldw	r2,-20(fp)
8110572c:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81105730:	e0fffd07 	ldb	r3,-12(fp)
81105734:	e0bffb17 	ldw	r2,-20(fp)
81105738:	10800017 	ldw	r2,0(r2)
8110573c:	100d883a 	mov	r6,r2
81105740:	01400804 	movi	r5,32
81105744:	1809883a 	mov	r4,r3
81105748:	11053380 	call	81105338 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
8110574c:	00800044 	movi	r2,1
81105750:	e0bffa15 	stw	r2,-24(fp)
				break;
81105754:	00001006 	br	81105798 <v_Transparent_Interface_Enable_Control+0x1d4>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_EnableMask;
81105758:	e0bffb17 	ldw	r2,-20(fp)
8110575c:	10c00017 	ldw	r3,0(r2)
81105760:	e0bfff17 	ldw	r2,-4(fp)
81105764:	1886b03a 	or	r3,r3,r2
81105768:	e0bffb17 	ldw	r2,-20(fp)
8110576c:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81105770:	e0fffd07 	ldb	r3,-12(fp)
81105774:	e0bffb17 	ldw	r2,-20(fp)
81105778:	10800017 	ldw	r2,0(r2)
8110577c:	100d883a 	mov	r6,r2
81105780:	01400804 	movi	r5,32
81105784:	1809883a 	mov	r4,r3
81105788:	11053380 	call	81105338 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
8110578c:	00800044 	movi	r2,1
81105790:	e0bffa15 	stw	r2,-24(fp)
				break;
81105794:	0001883a 	nop

			}
		} else {
81105798:	00000106 	br	811057a0 <v_Transparent_Interface_Enable_Control+0x1dc>
			bSuccess = FALSE;
8110579c:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
811057a0:	e0bffa17 	ldw	r2,-24(fp)
	}
811057a4:	e037883a 	mov	sp,fp
811057a8:	dfc00117 	ldw	ra,4(sp)
811057ac:	df000017 	ldw	fp,0(sp)
811057b0:	dec00204 	addi	sp,sp,8
811057b4:	f800283a 	ret

811057b8 <v_Transparent_Interface_Interrupts_Enable_Control>:

	bool v_Transparent_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
811057b8:	defff804 	addi	sp,sp,-32
811057bc:	dfc00715 	stw	ra,28(sp)
811057c0:	df000615 	stw	fp,24(sp)
811057c4:	df000604 	addi	fp,sp,24
811057c8:	2007883a 	mov	r3,r4
811057cc:	2805883a 	mov	r2,r5
811057d0:	e1bfff15 	stw	r6,-4(fp)
811057d4:	e0fffd05 	stb	r3,-12(fp)
811057d8:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811057dc:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_ENABLE_BIT_MASK | TRAN_DATA_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_ENABLE_BIT_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_ENABLE_BIT_MASK;
811057e0:	00803c04 	movi	r2,240
811057e4:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811057e8:	d0a03404 	addi	r2,gp,-32560
811057ec:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811057f0:	e0bffd07 	ldb	r2,-12(fp)
811057f4:	10bfefc4 	addi	r2,r2,-65
811057f8:	10c00228 	cmpgeui	r3,r2,8
811057fc:	1800361e 	bne	r3,zero,811058d8 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
81105800:	100690ba 	slli	r3,r2,2
81105804:	00a04434 	movhi	r2,33040
81105808:	10960604 	addi	r2,r2,22552
8110580c:	1885883a 	add	r2,r3,r2
81105810:	10800017 	ldw	r2,0(r2)
81105814:	1000683a 	jmp	r2
81105818:	81105838 	rdprs	r4,r16,16736
8110581c:	8110584c 	andi	r4,r16,16737
81105820:	81105860 	cmpeqi	r4,r16,16737
81105824:	81105874 	orhi	r4,r16,16737
81105828:	81105888 	cmpgei	r4,r16,16738
8110582c:	8110589c 	xori	r4,r16,16738
81105830:	811058b0 	cmpltui	r4,r16,16738
81105834:	811058c4 	addi	r4,r16,16739
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81105838:	d0a03404 	addi	r2,gp,-32560
8110583c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105840:	00800044 	movi	r2,1
81105844:	e0bffa15 	stw	r2,-24(fp)
			break;
81105848:	00002306 	br	811058d8 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
8110584c:	d0a03504 	addi	r2,gp,-32556
81105850:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105854:	00800044 	movi	r2,1
81105858:	e0bffa15 	stw	r2,-24(fp)
			break;
8110585c:	00001e06 	br	811058d8 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
81105860:	d0a03604 	addi	r2,gp,-32552
81105864:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105868:	00800044 	movi	r2,1
8110586c:	e0bffa15 	stw	r2,-24(fp)
			break;
81105870:	00001906 	br	811058d8 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
81105874:	d0a03704 	addi	r2,gp,-32548
81105878:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110587c:	00800044 	movi	r2,1
81105880:	e0bffa15 	stw	r2,-24(fp)
			break;
81105884:	00001406 	br	811058d8 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
81105888:	d0a03804 	addi	r2,gp,-32544
8110588c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105890:	00800044 	movi	r2,1
81105894:	e0bffa15 	stw	r2,-24(fp)
			break;
81105898:	00000f06 	br	811058d8 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
8110589c:	d0a03904 	addi	r2,gp,-32540
811058a0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811058a4:	00800044 	movi	r2,1
811058a8:	e0bffa15 	stw	r2,-24(fp)
			break;
811058ac:	00000a06 	br	811058d8 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
811058b0:	d0a03a04 	addi	r2,gp,-32536
811058b4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811058b8:	00800044 	movi	r2,1
811058bc:	e0bffa15 	stw	r2,-24(fp)
			break;
811058c0:	00000506 	br	811058d8 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
811058c4:	d0a03b04 	addi	r2,gp,-32532
811058c8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811058cc:	00800044 	movi	r2,1
811058d0:	e0bffa15 	stw	r2,-24(fp)
			break;
811058d4:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
811058d8:	e0bffa17 	ldw	r2,-24(fp)
811058dc:	10800058 	cmpnei	r2,r2,1
811058e0:	10002b1e 	bne	r2,zero,81105990 <v_Transparent_Interface_Interrupts_Enable_Control+0x1d8>
811058e4:	e0ffff17 	ldw	r3,-4(fp)
811058e8:	e0bffc17 	ldw	r2,-16(fp)
811058ec:	1884703a 	and	r2,r3,r2
811058f0:	10002726 	beq	r2,zero,81105990 <v_Transparent_Interface_Interrupts_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
811058f4:	e0bffe03 	ldbu	r2,-8(fp)
811058f8:	10000326 	beq	r2,zero,81105908 <v_Transparent_Interface_Interrupts_Enable_Control+0x150>
811058fc:	10800060 	cmpeqi	r2,r2,1
81105900:	1000121e 	bne	r2,zero,8110594c <v_Transparent_Interface_Interrupts_Enable_Control+0x194>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81105904:	00002306 	br	81105994 <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){

				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_InterruptMask;
81105908:	e0bffb17 	ldw	r2,-20(fp)
8110590c:	10c00017 	ldw	r3,0(r2)
81105910:	e0bfff17 	ldw	r2,-4(fp)
81105914:	0084303a 	nor	r2,zero,r2
81105918:	1886703a 	and	r3,r3,r2
8110591c:	e0bffb17 	ldw	r2,-20(fp)
81105920:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81105924:	e0fffd07 	ldb	r3,-12(fp)
81105928:	e0bffb17 	ldw	r2,-20(fp)
8110592c:	10800017 	ldw	r2,0(r2)
81105930:	100d883a 	mov	r6,r2
81105934:	01400804 	movi	r5,32
81105938:	1809883a 	mov	r4,r3
8110593c:	11053380 	call	81105338 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81105940:	00800044 	movi	r2,1
81105944:	e0bffa15 	stw	r2,-24(fp)
				break;
81105948:	00001006 	br	8110598c <v_Transparent_Interface_Interrupts_Enable_Control+0x1d4>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_InterruptMask;
8110594c:	e0bffb17 	ldw	r2,-20(fp)
81105950:	10c00017 	ldw	r3,0(r2)
81105954:	e0bfff17 	ldw	r2,-4(fp)
81105958:	1886b03a 	or	r3,r3,r2
8110595c:	e0bffb17 	ldw	r2,-20(fp)
81105960:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81105964:	e0fffd07 	ldb	r3,-12(fp)
81105968:	e0bffb17 	ldw	r2,-20(fp)
8110596c:	10800017 	ldw	r2,0(r2)
81105970:	100d883a 	mov	r6,r2
81105974:	01400804 	movi	r5,32
81105978:	1809883a 	mov	r4,r3
8110597c:	11053380 	call	81105338 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81105980:	00800044 	movi	r2,1
81105984:	e0bffa15 	stw	r2,-24(fp)
				break;
81105988:	0001883a 	nop

			}
		} else {
8110598c:	00000106 	br	81105994 <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>
			bSuccess = FALSE;
81105990:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81105994:	e0bffa17 	ldw	r2,-24(fp)
	}
81105998:	e037883a 	mov	sp,fp
8110599c:	dfc00117 	ldw	ra,4(sp)
811059a0:	df000017 	ldw	fp,0(sp)
811059a4:	dec00204 	addi	sp,sp,8
811059a8:	f800283a 	ret

811059ac <ul_Transparent_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_Transparent_Interface_Interrupts_Flags_Read(char c_SpwID){
811059ac:	defffb04 	addi	sp,sp,-20
811059b0:	dfc00415 	stw	ra,16(sp)
811059b4:	df000315 	stw	fp,12(sp)
811059b8:	df000304 	addi	fp,sp,12
811059bc:	2005883a 	mov	r2,r4
811059c0:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
811059c4:	008003c4 	movi	r2,15
811059c8:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_interrupts_flags_value = TRAN_READ_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_tran_mask;
811059cc:	e0bfff07 	ldb	r2,-4(fp)
811059d0:	01400804 	movi	r5,32
811059d4:	1009883a 	mov	r4,r2
811059d8:	11054180 	call	81105418 <TRAN_READ_REG32>
811059dc:	1007883a 	mov	r3,r2
811059e0:	e0bffd17 	ldw	r2,-12(fp)
811059e4:	1884703a 	and	r2,r3,r2
811059e8:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_interrupts_flags_value;
811059ec:	e0bffe17 	ldw	r2,-8(fp)
	}
811059f0:	e037883a 	mov	sp,fp
811059f4:	dfc00117 	ldw	ra,4(sp)
811059f8:	df000017 	ldw	fp,0(sp)
811059fc:	dec00204 	addi	sp,sp,8
81105a00:	f800283a 	ret

81105a04 <v_Transparent_Interface_Interrupts_Flags_Clear>:

	void v_Transparent_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
81105a04:	defff904 	addi	sp,sp,-28
81105a08:	dfc00615 	stw	ra,24(sp)
81105a0c:	df000515 	stw	fp,20(sp)
81105a10:	df000504 	addi	fp,sp,20
81105a14:	2005883a 	mov	r2,r4
81105a18:	e17fff15 	stw	r5,-4(fp)
81105a1c:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
81105a20:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
81105a24:	008003c4 	movi	r2,15
81105a28:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81105a2c:	d0a03404 	addi	r2,gp,-32560
81105a30:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81105a34:	e0bffe07 	ldb	r2,-8(fp)
81105a38:	10bfefc4 	addi	r2,r2,-65
81105a3c:	10c00228 	cmpgeui	r3,r2,8
81105a40:	1800361e 	bne	r3,zero,81105b1c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
81105a44:	100690ba 	slli	r3,r2,2
81105a48:	00a04434 	movhi	r2,33040
81105a4c:	10969704 	addi	r2,r2,23132
81105a50:	1885883a 	add	r2,r3,r2
81105a54:	10800017 	ldw	r2,0(r2)
81105a58:	1000683a 	jmp	r2
81105a5c:	81105a7c 	xorhi	r4,r16,16745
81105a60:	81105a90 	cmplti	r4,r16,16746
81105a64:	81105aa4 	muli	r4,r16,16746
81105a68:	81105ab8 	rdprs	r4,r16,16746
81105a6c:	81105acc 	andi	r4,r16,16747
81105a70:	81105ae0 	cmpeqi	r4,r16,16747
81105a74:	81105af4 	orhi	r4,r16,16747
81105a78:	81105b08 	cmpgei	r4,r16,16748
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81105a7c:	d0a03404 	addi	r2,gp,-32560
81105a80:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105a84:	00800044 	movi	r2,1
81105a88:	e0bffb15 	stw	r2,-20(fp)
			break;
81105a8c:	00002306 	br	81105b1c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81105a90:	d0a03504 	addi	r2,gp,-32556
81105a94:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105a98:	00800044 	movi	r2,1
81105a9c:	e0bffb15 	stw	r2,-20(fp)
			break;
81105aa0:	00001e06 	br	81105b1c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
81105aa4:	d0a03604 	addi	r2,gp,-32552
81105aa8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105aac:	00800044 	movi	r2,1
81105ab0:	e0bffb15 	stw	r2,-20(fp)
			break;
81105ab4:	00001906 	br	81105b1c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
81105ab8:	d0a03704 	addi	r2,gp,-32548
81105abc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105ac0:	00800044 	movi	r2,1
81105ac4:	e0bffb15 	stw	r2,-20(fp)
			break;
81105ac8:	00001406 	br	81105b1c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
81105acc:	d0a03804 	addi	r2,gp,-32544
81105ad0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105ad4:	00800044 	movi	r2,1
81105ad8:	e0bffb15 	stw	r2,-20(fp)
			break;
81105adc:	00000f06 	br	81105b1c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
81105ae0:	d0a03904 	addi	r2,gp,-32540
81105ae4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105ae8:	00800044 	movi	r2,1
81105aec:	e0bffb15 	stw	r2,-20(fp)
			break;
81105af0:	00000a06 	br	81105b1c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
81105af4:	d0a03a04 	addi	r2,gp,-32536
81105af8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105afc:	00800044 	movi	r2,1
81105b00:	e0bffb15 	stw	r2,-20(fp)
			break;
81105b04:	00000506 	br	81105b1c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
81105b08:	d0a03b04 	addi	r2,gp,-32532
81105b0c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105b10:	00800044 	movi	r2,1
81105b14:	e0bffb15 	stw	r2,-20(fp)
			break;
81105b18:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
81105b1c:	e0bffb17 	ldw	r2,-20(fp)
81105b20:	10800058 	cmpnei	r2,r2,1
81105b24:	10000d1e 	bne	r2,zero,81105b5c <v_Transparent_Interface_Interrupts_Flags_Clear+0x158>
81105b28:	e0ffff17 	ldw	r3,-4(fp)
81105b2c:	e0bffd17 	ldw	r2,-12(fp)
81105b30:	1884703a 	and	r2,r3,r2
81105b34:	10000926 	beq	r2,zero,81105b5c <v_Transparent_Interface_Interrupts_Flags_Clear+0x158>
			TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_tran_interface_control_status_register_value | ul_InterruptMask));
81105b38:	e13ffe07 	ldb	r4,-8(fp)
81105b3c:	e0bffc17 	ldw	r2,-16(fp)
81105b40:	10c00017 	ldw	r3,0(r2)
81105b44:	e0bfff17 	ldw	r2,-4(fp)
81105b48:	1884b03a 	or	r2,r3,r2
81105b4c:	100d883a 	mov	r6,r2
81105b50:	01400804 	movi	r5,32
81105b54:	11053380 	call	81105338 <TRAN_WRITE_REG32>
81105b58:	00000106 	br	81105b60 <v_Transparent_Interface_Interrupts_Flags_Clear+0x15c>
		} else {
			bSuccess = FALSE;
81105b5c:	e03ffb15 	stw	zero,-20(fp)
		}
	}
81105b60:	0001883a 	nop
81105b64:	e037883a 	mov	sp,fp
81105b68:	dfc00117 	ldw	ra,4(sp)
81105b6c:	df000017 	ldw	fp,0(sp)
81105b70:	dec00204 	addi	sp,sp,8
81105b74:	f800283a 	ret

81105b78 <v_Transparent_Interface_RX_FIFO_Reset>:

	void v_Transparent_Interface_RX_FIFO_Reset(char c_SpwID){
81105b78:	defffd04 	addi	sp,sp,-12
81105b7c:	dfc00215 	stw	ra,8(sp)
81105b80:	df000115 	stw	fp,4(sp)
81105b84:	df000104 	addi	fp,sp,4
81105b88:	2005883a 	mov	r2,r4
81105b8c:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_RX_FIFO_RESET_CONTROL_BIT_MASK);
81105b90:	e0bfff07 	ldb	r2,-4(fp)
81105b94:	01800104 	movi	r6,4
81105b98:	01400844 	movi	r5,33
81105b9c:	1009883a 	mov	r4,r2
81105ba0:	11053380 	call	81105338 <TRAN_WRITE_REG32>

	}
81105ba4:	0001883a 	nop
81105ba8:	e037883a 	mov	sp,fp
81105bac:	dfc00117 	ldw	ra,4(sp)
81105bb0:	df000017 	ldw	fp,0(sp)
81105bb4:	dec00204 	addi	sp,sp,8
81105bb8:	f800283a 	ret

81105bbc <ul_Transparent_Interface_RX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_RX_FIFO_Status_Read(char c_SpwID){
81105bbc:	defffb04 	addi	sp,sp,-20
81105bc0:	dfc00415 	stw	ra,16(sp)
81105bc4:	df000315 	stw	fp,12(sp)
81105bc8:	df000304 	addi	fp,sp,12
81105bcc:	2005883a 	mov	r2,r4
81105bd0:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_RX_FIFO_USED_SPACE_VALUE_MASK | TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_RX_FIFO_FULL_STATUS_BIT_MASK;
81105bd4:	0081fec4 	movi	r2,2043
81105bd8:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_rx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
81105bdc:	e0bfff07 	ldb	r2,-4(fp)
81105be0:	01400844 	movi	r5,33
81105be4:	1009883a 	mov	r4,r2
81105be8:	11054180 	call	81105418 <TRAN_READ_REG32>
81105bec:	1007883a 	mov	r3,r2
81105bf0:	e0bffd17 	ldw	r2,-12(fp)
81105bf4:	1884703a 	and	r2,r3,r2
81105bf8:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_rx_fifo_status_value;
81105bfc:	e0bffe17 	ldw	r2,-8(fp)
	}
81105c00:	e037883a 	mov	sp,fp
81105c04:	dfc00117 	ldw	ra,4(sp)
81105c08:	df000017 	ldw	fp,0(sp)
81105c0c:	dec00204 	addi	sp,sp,8
81105c10:	f800283a 	ret

81105c14 <b_Transparent_Interface_RX_FIFO_Status_Empty>:

	bool b_Transparent_Interface_RX_FIFO_Status_Empty(char c_SpwID){
81105c14:	defffc04 	addi	sp,sp,-16
81105c18:	dfc00315 	stw	ra,12(sp)
81105c1c:	df000215 	stw	fp,8(sp)
81105c20:	df000204 	addi	fp,sp,8
81105c24:	2005883a 	mov	r2,r4
81105c28:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_empty = FALSE;
81105c2c:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK) {
81105c30:	e0bfff07 	ldb	r2,-4(fp)
81105c34:	01400844 	movi	r5,33
81105c38:	1009883a 	mov	r4,r2
81105c3c:	11054180 	call	81105418 <TRAN_READ_REG32>
81105c40:	1080008c 	andi	r2,r2,2
81105c44:	10000226 	beq	r2,zero,81105c50 <b_Transparent_Interface_RX_FIFO_Status_Empty+0x3c>
			b_rx_fifo_empty = TRUE;
81105c48:	00800044 	movi	r2,1
81105c4c:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_empty;		
81105c50:	e0bffe17 	ldw	r2,-8(fp)
	}
81105c54:	e037883a 	mov	sp,fp
81105c58:	dfc00117 	ldw	ra,4(sp)
81105c5c:	df000017 	ldw	fp,0(sp)
81105c60:	dec00204 	addi	sp,sp,8
81105c64:	f800283a 	ret

81105c68 <b_Transparent_Interface_RX_FIFO_Status_Full>:
	
	bool b_Transparent_Interface_RX_FIFO_Status_Full(char c_SpwID){
81105c68:	defffc04 	addi	sp,sp,-16
81105c6c:	dfc00315 	stw	ra,12(sp)
81105c70:	df000215 	stw	fp,8(sp)
81105c74:	df000204 	addi	fp,sp,8
81105c78:	2005883a 	mov	r2,r4
81105c7c:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_full = FALSE;
81105c80:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_FULL_STATUS_BIT_MASK) {
81105c84:	e0bfff07 	ldb	r2,-4(fp)
81105c88:	01400844 	movi	r5,33
81105c8c:	1009883a 	mov	r4,r2
81105c90:	11054180 	call	81105418 <TRAN_READ_REG32>
81105c94:	1080004c 	andi	r2,r2,1
81105c98:	10000226 	beq	r2,zero,81105ca4 <b_Transparent_Interface_RX_FIFO_Status_Full+0x3c>
			b_rx_fifo_full = TRUE;
81105c9c:	00800044 	movi	r2,1
81105ca0:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_full;
81105ca4:	e0bffe17 	ldw	r2,-8(fp)
	}
81105ca8:	e037883a 	mov	sp,fp
81105cac:	dfc00117 	ldw	ra,4(sp)
81105cb0:	df000017 	ldw	fp,0(sp)
81105cb4:	dec00204 	addi	sp,sp,8
81105cb8:	f800283a 	ret

81105cbc <uc_Transparent_Interface_RX_FIFO_Status_Used>:

	alt_u8 uc_Transparent_Interface_RX_FIFO_Status_Used(char c_SpwID){
81105cbc:	defffc04 	addi	sp,sp,-16
81105cc0:	dfc00315 	stw	ra,12(sp)
81105cc4:	df000215 	stw	fp,8(sp)
81105cc8:	df000204 	addi	fp,sp,8
81105ccc:	2005883a 	mov	r2,r4
81105cd0:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_rx_fifo_used = 0;
81105cd4:	e03ffe05 	stb	zero,-8(fp)
		
		uc_rx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
81105cd8:	e0bfff07 	ldb	r2,-4(fp)
81105cdc:	01400844 	movi	r5,33
81105ce0:	1009883a 	mov	r4,r2
81105ce4:	11054180 	call	81105418 <TRAN_READ_REG32>
81105ce8:	1081fe0c 	andi	r2,r2,2040
81105cec:	1004d0fa 	srli	r2,r2,3
81105cf0:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_rx_fifo_used;
81105cf4:	e0bffe03 	ldbu	r2,-8(fp)
	}
81105cf8:	e037883a 	mov	sp,fp
81105cfc:	dfc00117 	ldw	ra,4(sp)
81105d00:	df000017 	ldw	fp,0(sp)
81105d04:	dec00204 	addi	sp,sp,8
81105d08:	f800283a 	ret

81105d0c <v_Transparent_Interface_TX_FIFO_Reset>:
	
	
	void v_Transparent_Interface_TX_FIFO_Reset(char c_SpwID){
81105d0c:	defffd04 	addi	sp,sp,-12
81105d10:	dfc00215 	stw	ra,8(sp)
81105d14:	df000115 	stw	fp,4(sp)
81105d18:	df000104 	addi	fp,sp,4
81105d1c:	2005883a 	mov	r2,r4
81105d20:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_TX_FIFO_RESET_CONTROL_BIT_MASK);
81105d24:	e0bfff07 	ldb	r2,-4(fp)
81105d28:	01800104 	movi	r6,4
81105d2c:	01400884 	movi	r5,34
81105d30:	1009883a 	mov	r4,r2
81105d34:	11053380 	call	81105338 <TRAN_WRITE_REG32>

	}
81105d38:	0001883a 	nop
81105d3c:	e037883a 	mov	sp,fp
81105d40:	dfc00117 	ldw	ra,4(sp)
81105d44:	df000017 	ldw	fp,0(sp)
81105d48:	dec00204 	addi	sp,sp,8
81105d4c:	f800283a 	ret

81105d50 <ul_Transparent_Interface_TX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_TX_FIFO_Status_Read(char c_SpwID){
81105d50:	defffb04 	addi	sp,sp,-20
81105d54:	dfc00415 	stw	ra,16(sp)
81105d58:	df000315 	stw	fp,12(sp)
81105d5c:	df000304 	addi	fp,sp,12
81105d60:	2005883a 	mov	r2,r4
81105d64:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_TX_FIFO_USED_SPACE_VALUE_MASK | TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_TX_FIFO_FULL_STATUS_BIT_MASK;
81105d68:	0081fec4 	movi	r2,2043
81105d6c:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_tx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
81105d70:	e0bfff07 	ldb	r2,-4(fp)
81105d74:	01400884 	movi	r5,34
81105d78:	1009883a 	mov	r4,r2
81105d7c:	11054180 	call	81105418 <TRAN_READ_REG32>
81105d80:	1007883a 	mov	r3,r2
81105d84:	e0bffd17 	ldw	r2,-12(fp)
81105d88:	1884703a 	and	r2,r3,r2
81105d8c:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_tx_fifo_status_value;
81105d90:	e0bffe17 	ldw	r2,-8(fp)
	}
81105d94:	e037883a 	mov	sp,fp
81105d98:	dfc00117 	ldw	ra,4(sp)
81105d9c:	df000017 	ldw	fp,0(sp)
81105da0:	dec00204 	addi	sp,sp,8
81105da4:	f800283a 	ret

81105da8 <b_Transparent_Interface_TX_FIFO_Status_Full>:

	bool b_Transparent_Interface_TX_FIFO_Status_Full(char c_SpwID){
81105da8:	defffc04 	addi	sp,sp,-16
81105dac:	dfc00315 	stw	ra,12(sp)
81105db0:	df000215 	stw	fp,8(sp)
81105db4:	df000204 	addi	fp,sp,8
81105db8:	2005883a 	mov	r2,r4
81105dbc:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_empty = FALSE;
81105dc0:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK) {
81105dc4:	e0bfff07 	ldb	r2,-4(fp)
81105dc8:	01400884 	movi	r5,34
81105dcc:	1009883a 	mov	r4,r2
81105dd0:	11054180 	call	81105418 <TRAN_READ_REG32>
81105dd4:	1080008c 	andi	r2,r2,2
81105dd8:	10000226 	beq	r2,zero,81105de4 <b_Transparent_Interface_TX_FIFO_Status_Full+0x3c>
			b_tx_fifo_empty = TRUE;
81105ddc:	00800044 	movi	r2,1
81105de0:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_empty;		
81105de4:	e0bffe17 	ldw	r2,-8(fp)
	}
81105de8:	e037883a 	mov	sp,fp
81105dec:	dfc00117 	ldw	ra,4(sp)
81105df0:	df000017 	ldw	fp,0(sp)
81105df4:	dec00204 	addi	sp,sp,8
81105df8:	f800283a 	ret

81105dfc <b_Transparent_Interface_TX_FIFO_Status_Empty>:
	
	bool b_Transparent_Interface_TX_FIFO_Status_Empty(char c_SpwID){
81105dfc:	defffc04 	addi	sp,sp,-16
81105e00:	dfc00315 	stw	ra,12(sp)
81105e04:	df000215 	stw	fp,8(sp)
81105e08:	df000204 	addi	fp,sp,8
81105e0c:	2005883a 	mov	r2,r4
81105e10:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_full = FALSE;
81105e14:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_FULL_STATUS_BIT_MASK) {
81105e18:	e0bfff07 	ldb	r2,-4(fp)
81105e1c:	01400884 	movi	r5,34
81105e20:	1009883a 	mov	r4,r2
81105e24:	11054180 	call	81105418 <TRAN_READ_REG32>
81105e28:	1080004c 	andi	r2,r2,1
81105e2c:	10000226 	beq	r2,zero,81105e38 <b_Transparent_Interface_TX_FIFO_Status_Empty+0x3c>
			b_tx_fifo_full = TRUE;
81105e30:	00800044 	movi	r2,1
81105e34:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_full;
81105e38:	e0bffe17 	ldw	r2,-8(fp)
	}
81105e3c:	e037883a 	mov	sp,fp
81105e40:	dfc00117 	ldw	ra,4(sp)
81105e44:	df000017 	ldw	fp,0(sp)
81105e48:	dec00204 	addi	sp,sp,8
81105e4c:	f800283a 	ret

81105e50 <uc_Transparent_Interface_TX_FIFO_Status_Used>:
	
	alt_u8 uc_Transparent_Interface_TX_FIFO_Status_Used(char c_SpwID){
81105e50:	defffc04 	addi	sp,sp,-16
81105e54:	dfc00315 	stw	ra,12(sp)
81105e58:	df000215 	stw	fp,8(sp)
81105e5c:	df000204 	addi	fp,sp,8
81105e60:	2005883a 	mov	r2,r4
81105e64:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_tx_fifo_used = 0;
81105e68:	e03ffe05 	stb	zero,-8(fp)
		
		uc_tx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
81105e6c:	e0bfff07 	ldb	r2,-4(fp)
81105e70:	01400884 	movi	r5,34
81105e74:	1009883a 	mov	r4,r2
81105e78:	11054180 	call	81105418 <TRAN_READ_REG32>
81105e7c:	1081fe0c 	andi	r2,r2,2040
81105e80:	1004d0fa 	srli	r2,r2,3
81105e84:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_tx_fifo_used;
81105e88:	e0bffe03 	ldbu	r2,-8(fp)
	}
81105e8c:	e037883a 	mov	sp,fp
81105e90:	dfc00117 	ldw	ra,4(sp)
81105e94:	df000017 	ldw	fp,0(sp)
81105e98:	dec00204 	addi	sp,sp,8
81105e9c:	f800283a 	ret

81105ea0 <b_Transparent_Interface_Switch_Channel>:
	
	bool b_Transparent_Interface_Switch_Channel(char c_SpwID){
81105ea0:	defffb04 	addi	sp,sp,-20
81105ea4:	dfc00415 	stw	ra,16(sp)
81105ea8:	df000315 	stw	fp,12(sp)
81105eac:	df000304 	addi	fp,sp,12
81105eb0:	2005883a 	mov	r2,r4
81105eb4:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess;
		alt_u32 *pTranAddr = DDR2_ADDRESS_SPAN_EXTENDER_CNTL_BASE;
81105eb8:	00a04834 	movhi	r2,33056
81105ebc:	108c2204 	addi	r2,r2,12424
81105ec0:	e0bffe15 	stw	r2,-8(fp)

		  bSuccess = TRUE;
81105ec4:	00800044 	movi	r2,1
81105ec8:	e0bffd15 	stw	r2,-12(fp)
		  switch (c_SpwID) {
81105ecc:	e0bfff07 	ldb	r2,-4(fp)
81105ed0:	10bfefc4 	addi	r2,r2,-65
81105ed4:	10c00228 	cmpgeui	r3,r2,8
81105ed8:	18004d1e 	bne	r3,zero,81106010 <b_Transparent_Interface_Switch_Channel+0x170>
81105edc:	100690ba 	slli	r3,r2,2
81105ee0:	00a04434 	movhi	r2,33040
81105ee4:	1097bd04 	addi	r2,r2,24308
81105ee8:	1885883a 	add	r2,r3,r2
81105eec:	10800017 	ldw	r2,0(r2)
81105ef0:	1000683a 	jmp	r2
81105ef4:	81105f14 	ori	r4,r16,16764
81105ef8:	81105f34 	orhi	r4,r16,16764
81105efc:	81105f54 	ori	r4,r16,16765
81105f00:	81105f74 	orhi	r4,r16,16765
81105f04:	81105f94 	ori	r4,r16,16766
81105f08:	81105fb4 	orhi	r4,r16,16766
81105f0c:	81105fd4 	ori	r4,r16,16767
81105f10:	81105ff4 	orhi	r4,r16,16767
			  case 'A':
				*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_A_CHANNEL_WINDOWED_OFFSET);
81105f14:	e0bffe17 	ldw	r2,-8(fp)
81105f18:	00f80034 	movhi	r3,57344
81105f1c:	10c00015 	stw	r3,0(r2)
				*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_A_CHANNEL_WINDOWED_OFFSET) >> 32);
81105f20:	e0bffe17 	ldw	r2,-8(fp)
81105f24:	10800104 	addi	r2,r2,4
81105f28:	00c00044 	movi	r3,1
81105f2c:	10c00015 	stw	r3,0(r2)
			  break;
81105f30:	00003b06 	br	81106020 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'B':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_B_CHANNEL_WINDOWED_OFFSET);
81105f34:	e0bffe17 	ldw	r2,-8(fp)
81105f38:	00f00034 	movhi	r3,49152
81105f3c:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_B_CHANNEL_WINDOWED_OFFSET) >> 32);
81105f40:	e0bffe17 	ldw	r2,-8(fp)
81105f44:	10800104 	addi	r2,r2,4
81105f48:	00c00044 	movi	r3,1
81105f4c:	10c00015 	stw	r3,0(r2)
				  break;
81105f50:	00003306 	br	81106020 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'C':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_C_CHANNEL_WINDOWED_OFFSET);
81105f54:	e0bffe17 	ldw	r2,-8(fp)
81105f58:	00e80034 	movhi	r3,40960
81105f5c:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_C_CHANNEL_WINDOWED_OFFSET) >> 32);
81105f60:	e0bffe17 	ldw	r2,-8(fp)
81105f64:	10800104 	addi	r2,r2,4
81105f68:	00c00044 	movi	r3,1
81105f6c:	10c00015 	stw	r3,0(r2)
				  break;
81105f70:	00002b06 	br	81106020 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'D':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_E_CHANNEL_WINDOWED_OFFSET);
81105f74:	e0bffe17 	ldw	r2,-8(fp)
81105f78:	00d80034 	movhi	r3,24576
81105f7c:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_E_CHANNEL_WINDOWED_OFFSET) >> 32);
81105f80:	e0bffe17 	ldw	r2,-8(fp)
81105f84:	10800104 	addi	r2,r2,4
81105f88:	00c00044 	movi	r3,1
81105f8c:	10c00015 	stw	r3,0(r2)
				  break;
81105f90:	00002306 	br	81106020 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'E':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_D_CHANNEL_WINDOWED_OFFSET);
81105f94:	e0bffe17 	ldw	r2,-8(fp)
81105f98:	00e00034 	movhi	r3,32768
81105f9c:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_D_CHANNEL_WINDOWED_OFFSET) >> 32);
81105fa0:	e0bffe17 	ldw	r2,-8(fp)
81105fa4:	10800104 	addi	r2,r2,4
81105fa8:	00c00044 	movi	r3,1
81105fac:	10c00015 	stw	r3,0(r2)
				  break;
81105fb0:	00001b06 	br	81106020 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'F':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_F_CHANNEL_WINDOWED_OFFSET);
81105fb4:	e0bffe17 	ldw	r2,-8(fp)
81105fb8:	00d00034 	movhi	r3,16384
81105fbc:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_F_CHANNEL_WINDOWED_OFFSET) >> 32);
81105fc0:	e0bffe17 	ldw	r2,-8(fp)
81105fc4:	10800104 	addi	r2,r2,4
81105fc8:	00c00044 	movi	r3,1
81105fcc:	10c00015 	stw	r3,0(r2)
				  break;
81105fd0:	00001306 	br	81106020 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'G':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_G_CHANNEL_WINDOWED_OFFSET);
81105fd4:	e0bffe17 	ldw	r2,-8(fp)
81105fd8:	00c80034 	movhi	r3,8192
81105fdc:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_G_CHANNEL_WINDOWED_OFFSET) >> 32);
81105fe0:	e0bffe17 	ldw	r2,-8(fp)
81105fe4:	10800104 	addi	r2,r2,4
81105fe8:	00c00044 	movi	r3,1
81105fec:	10c00015 	stw	r3,0(r2)
				  break;
81105ff0:	00000b06 	br	81106020 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'H':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_H_CHANNEL_WINDOWED_OFFSET);
81105ff4:	e0bffe17 	ldw	r2,-8(fp)
81105ff8:	10000015 	stw	zero,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_H_CHANNEL_WINDOWED_OFFSET) >> 32);
81105ffc:	e0bffe17 	ldw	r2,-8(fp)
81106000:	10800104 	addi	r2,r2,4
81106004:	00c00044 	movi	r3,1
81106008:	10c00015 	stw	r3,0(r2)
				  break;
8110600c:	00000406 	br	81106020 <b_Transparent_Interface_Switch_Channel+0x180>
			  default:
				  bSuccess = FALSE;
81106010:	e03ffd15 	stw	zero,-12(fp)
				  printf("SpW Channel not identified!! Error switching channels!! \n");
81106014:	012044b4 	movhi	r4,33042
81106018:	213a2c04 	addi	r4,r4,-5968
8110601c:	110d0f80 	call	8110d0f8 <puts>
		  }

		  return bSuccess;
81106020:	e0bffd17 	ldw	r2,-12(fp)
	}
81106024:	e037883a 	mov	sp,fp
81106028:	dfc00117 	ldw	ra,4(sp)
8110602c:	df000017 	ldw	fp,0(sp)
81106030:	dec00204 	addi	sp,sp,8
81106034:	f800283a 	ret

81106038 <b_Transparent_Interface_Send_SpaceWire_Data>:


	bool b_Transparent_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
81106038:	defff704 	addi	sp,sp,-36
8110603c:	dfc00815 	stw	ra,32(sp)
81106040:	df000715 	stw	fp,28(sp)
81106044:	df000704 	addi	fp,sp,28
81106048:	2007883a 	mov	r3,r4
8110604c:	e17ffe15 	stw	r5,-8(fp)
81106050:	3005883a 	mov	r2,r6
81106054:	e0fffd05 	stb	r3,-12(fp)
81106058:	e0bfff0d 	sth	r2,-4(fp)
		
		bool bSuccess = FALSE;
8110605c:	e03ff915 	stw	zero,-28(fp)
		
		alt_u32 *memory_location = DDR2_ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BASE;
81106060:	e03ffb15 	stw	zero,-20(fp)
		printf("memory_location = %u \n", memory_location);
81106064:	e17ffb17 	ldw	r5,-20(fp)
81106068:	012044b4 	movhi	r4,33042
8110606c:	213a3b04 	addi	r4,r4,-5908
81106070:	110cfdc0 	call	8110cfdc <printf>
		memory_location += (TRAN_BURST_REGISTERS_OFFSET + TRAN_TX_REGISTER_OFFSET)*2;
81106074:	e0bffb17 	ldw	r2,-20(fp)
81106078:	10804204 	addi	r2,r2,264
8110607c:	e0bffb15 	stw	r2,-20(fp)
		printf("memory_location = %u \n", memory_location);
81106080:	e17ffb17 	ldw	r5,-20(fp)
81106084:	012044b4 	movhi	r4,33042
81106088:	213a3b04 	addi	r4,r4,-5908
8110608c:	110cfdc0 	call	8110cfdc <printf>

		alt_u16 cnt = 0;
81106090:	e03ffa0d 	sth	zero,-24(fp)
		alt_u8 resto = 0;
81106094:	e03ffc05 	stb	zero,-16(fp)
		
		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81106098:	e0bffd07 	ldb	r2,-12(fp)
8110609c:	10801050 	cmplti	r2,r2,65
811060a0:	1000081e 	bne	r2,zero,811060c4 <b_Transparent_Interface_Send_SpaceWire_Data+0x8c>
811060a4:	e0bffd07 	ldb	r2,-12(fp)
811060a8:	10801248 	cmpgei	r2,r2,73
811060ac:	1000051e 	bne	r2,zero,811060c4 <b_Transparent_Interface_Send_SpaceWire_Data+0x8c>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
811060b0:	e0bffd07 	ldb	r2,-12(fp)
811060b4:	1009883a 	mov	r4,r2
811060b8:	1105ea00 	call	81105ea0 <b_Transparent_Interface_Switch_Channel>
			bSuccess          = TRUE;
811060bc:	00800044 	movi	r2,1
811060c0:	e0bff915 	stw	r2,-28(fp)
		}

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
811060c4:	e0bff917 	ldw	r2,-28(fp)
811060c8:	10002626 	beq	r2,zero,81106164 <b_Transparent_Interface_Send_SpaceWire_Data+0x12c>
811060cc:	e0bffd07 	ldb	r2,-12(fp)
811060d0:	1009883a 	mov	r4,r2
811060d4:	1105e500 	call	81105e50 <uc_Transparent_Interface_TX_FIFO_Status_Used>
811060d8:	10803fcc 	andi	r2,r2,255
811060dc:	00c04004 	movi	r3,256
811060e0:	1887c83a 	sub	r3,r3,r2
811060e4:	e0bfff0b 	ldhu	r2,-4(fp)
811060e8:	1004d0ba 	srli	r2,r2,2
811060ec:	10bfffcc 	andi	r2,r2,65535
811060f0:	10800044 	addi	r2,r2,1
811060f4:	18801b16 	blt	r3,r2,81106164 <b_Transparent_Interface_Send_SpaceWire_Data+0x12c>
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
811060f8:	e03ffa0d 	sth	zero,-24(fp)
811060fc:	00000b06 	br	8110612c <b_Transparent_Interface_Send_SpaceWire_Data+0xf4>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
81106100:	e0bffa0b 	ldhu	r2,-24(fp)
81106104:	e0fffe17 	ldw	r3,-8(fp)
81106108:	1885883a 	add	r2,r3,r2
8110610c:	10800003 	ldbu	r2,0(r2)
81106110:	10803fcc 	andi	r2,r2,255
81106114:	10fffff4 	orhi	r3,r2,65535
81106118:	e0bffb17 	ldw	r2,-20(fp)
8110611c:	10c00015 	stw	r3,0(r2)

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
81106120:	e0bffa0b 	ldhu	r2,-24(fp)
81106124:	10800044 	addi	r2,r2,1
81106128:	e0bffa0d 	sth	r2,-24(fp)
8110612c:	e0fffa0b 	ldhu	r3,-24(fp)
81106130:	e0bfff0b 	ldhu	r2,-4(fp)
81106134:	18bff236 	bltu	r3,r2,81106100 <__reset+0xfb0e6100>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
			}
			/* Append an EOP to the end of the data in the Channel Memory Location */
			*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | 0x0100 | (alt_u16)data_buffer[data_size]);
81106138:	e0bfff0b 	ldhu	r2,-4(fp)
8110613c:	e0fffe17 	ldw	r3,-8(fp)
81106140:	1885883a 	add	r2,r3,r2
81106144:	10800003 	ldbu	r2,0(r2)
81106148:	10c03fcc 	andi	r3,r2,255
8110614c:	00bffff4 	movhi	r2,65535
81106150:	10804004 	addi	r2,r2,256
81106154:	1886b03a 	or	r3,r3,r2
81106158:	e0bffb17 	ldw	r2,-20(fp)
8110615c:	10c00015 	stw	r3,0(r2)
81106160:	00000106 	br	81106168 <b_Transparent_Interface_Send_SpaceWire_Data+0x130>
			
		} else {
			bSuccess = FALSE;
81106164:	e03ff915 	stw	zero,-28(fp)
		}
		
		return bSuccess;
81106168:	e0bff917 	ldw	r2,-28(fp)
	}
8110616c:	e037883a 	mov	sp,fp
81106170:	dfc00117 	ldw	ra,4(sp)
81106174:	df000017 	ldw	fp,0(sp)
81106178:	dec00204 	addi	sp,sp,8
8110617c:	f800283a 	ret

81106180 <ui_Transparent_Interface_Get_SpaceWire_Data>:
	
	alt_u16 ui_Transparent_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer){
81106180:	deffeb04 	addi	sp,sp,-84
81106184:	dfc01415 	stw	ra,80(sp)
81106188:	df001315 	stw	fp,76(sp)
8110618c:	ddc01215 	stw	r23,72(sp)
81106190:	dd801115 	stw	r22,68(sp)
81106194:	dd401015 	stw	r21,64(sp)
81106198:	dd000f15 	stw	r20,60(sp)
8110619c:	dcc00e15 	stw	r19,56(sp)
811061a0:	dc800d15 	stw	r18,52(sp)
811061a4:	dc400c15 	stw	r17,48(sp)
811061a8:	dc000b15 	stw	r16,44(sp)
811061ac:	df001304 	addi	fp,sp,76
811061b0:	2005883a 	mov	r2,r4
811061b4:	e17ff515 	stw	r5,-44(fp)
811061b8:	e0bff405 	stb	r2,-48(fp)
		
		alt_u16 ui_rx_data_size = 0;
811061bc:	e03fed0d 	sth	zero,-76(fp)
		
		alt_u64 *memory_location = 0;
811061c0:	e03fef15 	stw	zero,-68(fp)
		memory_location += TRAN_BURST_REGISTERS_OFFSET + TRAN_RX_REGISTER_OFFSET;
811061c4:	e0bfef17 	ldw	r2,-68(fp)
811061c8:	10804004 	addi	r2,r2,256
811061cc:	e0bfef15 	stw	r2,-68(fp)

		alt_u16 cnt = 0;
811061d0:	e03fed8d 	sth	zero,-74(fp)
		alt_u16 rx_buffer_data_size = 0;
811061d4:	e03fee0d 	sth	zero,-72(fp)
		alt_u64 rx_data = 0;
811061d8:	e03ff015 	stw	zero,-64(fp)
811061dc:	e03ff115 	stw	zero,-60(fp)
		alt_u16 rx_data_buffer[4] = {0,0,0,0};
811061e0:	e03ff20d 	sth	zero,-56(fp)
811061e4:	e03ff28d 	sth	zero,-54(fp)
811061e8:	e03ff30d 	sth	zero,-52(fp)
811061ec:	e03ff38d 	sth	zero,-50(fp)

		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
811061f0:	e0bff407 	ldb	r2,-48(fp)
811061f4:	10801050 	cmplti	r2,r2,65
811061f8:	1000081e 	bne	r2,zero,8110621c <ui_Transparent_Interface_Get_SpaceWire_Data+0x9c>
811061fc:	e0bff407 	ldb	r2,-48(fp)
81106200:	10801248 	cmpgei	r2,r2,73
81106204:	1000051e 	bne	r2,zero,8110621c <ui_Transparent_Interface_Get_SpaceWire_Data+0x9c>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81106208:	e0bff407 	ldb	r2,-48(fp)
8110620c:	1009883a 	mov	r4,r2
81106210:	1105ea00 	call	81105ea0 <b_Transparent_Interface_Switch_Channel>
			rx_buffer_data_size = 0xFFFF;
81106214:	00bfffc4 	movi	r2,-1
81106218:	e0bfee0d 	sth	r2,-72(fp)
		}
		
		if (0xFFFF == rx_buffer_data_size) {
8110621c:	e0ffee0b 	ldhu	r3,-72(fp)
81106220:	00bfffd4 	movui	r2,65535
81106224:	1880711e 	bne	r3,r2,811063ec <ui_Transparent_Interface_Get_SpaceWire_Data+0x26c>
			/* Check the amount of data in the RX Buffer*/
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
81106228:	e0bff407 	ldb	r2,-48(fp)
8110622c:	1009883a 	mov	r4,r2
81106230:	1105e500 	call	81105e50 <uc_Transparent_Interface_TX_FIFO_Status_Used>
81106234:	10803fcc 	andi	r2,r2,255
81106238:	e0bfee0d 	sth	r2,-72(fp)
			if (rx_buffer_data_size > 0) {
8110623c:	e0bfee0b 	ldhu	r2,-72(fp)
81106240:	10006826 	beq	r2,zero,811063e4 <ui_Transparent_Interface_Get_SpaceWire_Data+0x264>
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81106244:	e03fed8d 	sth	zero,-74(fp)
81106248:	00006206 	br	811063d4 <ui_Transparent_Interface_Get_SpaceWire_Data+0x254>

					rx_data = *memory_location;
8110624c:	e0bfef17 	ldw	r2,-68(fp)
81106250:	10c00017 	ldw	r3,0(r2)
81106254:	e0fff015 	stw	r3,-64(fp)
81106258:	10800117 	ldw	r2,4(r2)
8110625c:	e0bff115 	stw	r2,-60(fp)

					rx_data_buffer[0] = (alt_u16)(0x000000000000FFFF & rx_data);
81106260:	e0bff017 	ldw	r2,-64(fp)
81106264:	e0bff20d 	sth	r2,-56(fp)
					rx_data_buffer[1] = (alt_u16)((0x00000000FFFF0000 & rx_data) >> 16);
81106268:	e0bff017 	ldw	r2,-64(fp)
8110626c:	143fffec 	andhi	r16,r2,65535
81106270:	e0bff117 	ldw	r2,-60(fp)
81106274:	1022703a 	and	r17,r2,zero
81106278:	8804943a 	slli	r2,r17,16
8110627c:	8024d43a 	srli	r18,r16,16
81106280:	14a4b03a 	or	r18,r2,r18
81106284:	8826d43a 	srli	r19,r17,16
81106288:	9005883a 	mov	r2,r18
8110628c:	e0bff28d 	sth	r2,-54(fp)
					rx_data_buffer[2] = (alt_u16)((0x0000FFFF00000000 & rx_data) >> 32);
81106290:	e0bff017 	ldw	r2,-64(fp)
81106294:	1028703a 	and	r20,r2,zero
81106298:	e0bff117 	ldw	r2,-60(fp)
8110629c:	157fffcc 	andi	r21,r2,65535
811062a0:	a82cd83a 	srl	r22,r21,zero
811062a4:	002f883a 	mov	r23,zero
811062a8:	b005883a 	mov	r2,r22
811062ac:	e0bff30d 	sth	r2,-52(fp)
					rx_data_buffer[3] = (alt_u16)((0xFFFF000000000000 & rx_data) >> 48);
811062b0:	e0bff117 	ldw	r2,-60(fp)
811062b4:	1004d43a 	srli	r2,r2,16
811062b8:	e0bff615 	stw	r2,-40(fp)
811062bc:	e03ff715 	stw	zero,-36(fp)
811062c0:	e0bff60b 	ldhu	r2,-40(fp)
811062c4:	e0bff38d 	sth	r2,-50(fp)

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[0] & 0x0100) || (rx_data_buffer[0] == 0xFFFF))) {
811062c8:	e0bff20b 	ldhu	r2,-56(fp)
811062cc:	10bfffcc 	andi	r2,r2,65535
811062d0:	1080400c 	andi	r2,r2,256
811062d4:	10000c1e 	bne	r2,zero,81106308 <ui_Transparent_Interface_Get_SpaceWire_Data+0x188>
811062d8:	e0bff20b 	ldhu	r2,-56(fp)
811062dc:	10ffffcc 	andi	r3,r2,65535
811062e0:	00bfffd4 	movui	r2,65535
811062e4:	18800826 	beq	r3,r2,81106308 <ui_Transparent_Interface_Get_SpaceWire_Data+0x188>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[0]);
811062e8:	e0bfed0b 	ldhu	r2,-76(fp)
811062ec:	e0fff517 	ldw	r3,-44(fp)
811062f0:	1885883a 	add	r2,r3,r2
811062f4:	e0fff20b 	ldhu	r3,-56(fp)
811062f8:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
811062fc:	e0bfed0b 	ldhu	r2,-76(fp)
81106300:	10800044 	addi	r2,r2,1
81106304:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[1] & 0x0100) || (rx_data_buffer[1] == 0xFFFF))) {
81106308:	e0bff28b 	ldhu	r2,-54(fp)
8110630c:	10bfffcc 	andi	r2,r2,65535
81106310:	1080400c 	andi	r2,r2,256
81106314:	10000c1e 	bne	r2,zero,81106348 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1c8>
81106318:	e0bff28b 	ldhu	r2,-54(fp)
8110631c:	10ffffcc 	andi	r3,r2,65535
81106320:	00bfffd4 	movui	r2,65535
81106324:	18800826 	beq	r3,r2,81106348 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1c8>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[1]);
81106328:	e0bfed0b 	ldhu	r2,-76(fp)
8110632c:	e0fff517 	ldw	r3,-44(fp)
81106330:	1885883a 	add	r2,r3,r2
81106334:	e0fff28b 	ldhu	r3,-54(fp)
81106338:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
8110633c:	e0bfed0b 	ldhu	r2,-76(fp)
81106340:	10800044 	addi	r2,r2,1
81106344:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[2] & 0x0100) || (rx_data_buffer[2] == 0xFFFF))) {
81106348:	e0bff30b 	ldhu	r2,-52(fp)
8110634c:	10bfffcc 	andi	r2,r2,65535
81106350:	1080400c 	andi	r2,r2,256
81106354:	10000c1e 	bne	r2,zero,81106388 <ui_Transparent_Interface_Get_SpaceWire_Data+0x208>
81106358:	e0bff30b 	ldhu	r2,-52(fp)
8110635c:	10ffffcc 	andi	r3,r2,65535
81106360:	00bfffd4 	movui	r2,65535
81106364:	18800826 	beq	r3,r2,81106388 <ui_Transparent_Interface_Get_SpaceWire_Data+0x208>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[2]);
81106368:	e0bfed0b 	ldhu	r2,-76(fp)
8110636c:	e0fff517 	ldw	r3,-44(fp)
81106370:	1885883a 	add	r2,r3,r2
81106374:	e0fff30b 	ldhu	r3,-52(fp)
81106378:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
8110637c:	e0bfed0b 	ldhu	r2,-76(fp)
81106380:	10800044 	addi	r2,r2,1
81106384:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[3] & 0x0100) || (rx_data_buffer[3] == 0xFFFF))) {
81106388:	e0bff38b 	ldhu	r2,-50(fp)
8110638c:	10bfffcc 	andi	r2,r2,65535
81106390:	1080400c 	andi	r2,r2,256
81106394:	10000c1e 	bne	r2,zero,811063c8 <ui_Transparent_Interface_Get_SpaceWire_Data+0x248>
81106398:	e0bff38b 	ldhu	r2,-50(fp)
8110639c:	10ffffcc 	andi	r3,r2,65535
811063a0:	00bfffd4 	movui	r2,65535
811063a4:	18800826 	beq	r3,r2,811063c8 <ui_Transparent_Interface_Get_SpaceWire_Data+0x248>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[3]);
811063a8:	e0bfed0b 	ldhu	r2,-76(fp)
811063ac:	e0fff517 	ldw	r3,-44(fp)
811063b0:	1885883a 	add	r2,r3,r2
811063b4:	e0fff38b 	ldhu	r3,-50(fp)
811063b8:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
811063bc:	e0bfed0b 	ldhu	r2,-76(fp)
811063c0:	10800044 	addi	r2,r2,1
811063c4:	e0bfed0d 	sth	r2,-76(fp)
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
			if (rx_buffer_data_size > 0) {
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
811063c8:	e0bfed8b 	ldhu	r2,-74(fp)
811063cc:	10800044 	addi	r2,r2,1
811063d0:	e0bfed8d 	sth	r2,-74(fp)
811063d4:	e0ffed8b 	ldhu	r3,-74(fp)
811063d8:	e0bfee0b 	ldhu	r2,-72(fp)
811063dc:	18bf9b36 	bltu	r3,r2,8110624c <__reset+0xfb0e624c>
811063e0:	00000306 	br	811063f0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x270>
						ui_rx_data_size++;
					}

				}
			} else {
				ui_rx_data_size = 0;
811063e4:	e03fed0d 	sth	zero,-76(fp)
811063e8:	00000106 	br	811063f0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x270>
			}
		} else {
			ui_rx_data_size = 0;
811063ec:	e03fed0d 	sth	zero,-76(fp)
		}
	
		return ui_rx_data_size;
811063f0:	e0bfed0b 	ldhu	r2,-76(fp)
	}
811063f4:	e6fff804 	addi	sp,fp,-32
811063f8:	dfc00917 	ldw	ra,36(sp)
811063fc:	df000817 	ldw	fp,32(sp)
81106400:	ddc00717 	ldw	r23,28(sp)
81106404:	dd800617 	ldw	r22,24(sp)
81106408:	dd400517 	ldw	r21,20(sp)
8110640c:	dd000417 	ldw	r20,16(sp)
81106410:	dcc00317 	ldw	r19,12(sp)
81106414:	dc800217 	ldw	r18,8(sp)
81106418:	dc400117 	ldw	r17,4(sp)
8110641c:	dc000017 	ldw	r16,0(sp)
81106420:	dec00a04 	addi	sp,sp,40
81106424:	f800283a 	ret

81106428 <DDR2_EEPROM_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_TEST(alt_u8 MemoryId){
81106428:	defff604 	addi	sp,sp,-40
8110642c:	dfc00915 	stw	ra,36(sp)
81106430:	df000815 	stw	fp,32(sp)
81106434:	df000804 	addi	fp,sp,32
81106438:	2005883a 	mov	r2,r4
8110643c:	e0bfff05 	stb	r2,-4(fp)

  printf("===== DE4 DDR2 EEPROM Test =====\n");
81106440:	012044b4 	movhi	r4,33042
81106444:	213a4104 	addi	r4,r4,-5884
81106448:	110d0f80 	call	8110d0f8 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
8110644c:	00bfe804 	movi	r2,-96
81106450:	e0bffd05 	stb	r2,-12(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
81106454:	00800044 	movi	r2,1
81106458:	e0bff915 	stw	r2,-28(fp)
  switch (MemoryId) {
8110645c:	e0bfff03 	ldbu	r2,-4(fp)
81106460:	10c00060 	cmpeqi	r3,r2,1
81106464:	1800031e 	bne	r3,zero,81106474 <DDR2_EEPROM_TEST+0x4c>
81106468:	108000a0 	cmpeqi	r2,r2,2
8110646c:	1000081e 	bne	r2,zero,81106490 <DDR2_EEPROM_TEST+0x68>
81106470:	00000e06 	br	811064ac <DDR2_EEPROM_TEST+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81106474:	00a00034 	movhi	r2,32768
81106478:	10827c04 	addi	r2,r2,2544
8110647c:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81106480:	00a00034 	movhi	r2,32768
81106484:	10828004 	addi	r2,r2,2560
81106488:	e0bffb15 	stw	r2,-20(fp)
    break;
8110648c:	00000d06 	br	811064c4 <DDR2_EEPROM_TEST+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81106490:	00a00034 	movhi	r2,32768
81106494:	10825804 	addi	r2,r2,2400
81106498:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
8110649c:	00a00034 	movhi	r2,32768
811064a0:	10825c04 	addi	r2,r2,2416
811064a4:	e0bffb15 	stw	r2,-20(fp)
    break;
811064a8:	00000606 	br	811064c4 <DDR2_EEPROM_TEST+0x9c>
    default:
      bSuccess = FALSE;
811064ac:	e03ff915 	stw	zero,-28(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
811064b0:	012044b4 	movhi	r4,33042
811064b4:	213a4a04 	addi	r4,r4,-5848
811064b8:	110d0f80 	call	8110d0f8 <puts>
      return bSuccess;
811064bc:	e0bff917 	ldw	r2,-28(fp)
811064c0:	00007d06 	br	811066b8 <DDR2_EEPROM_TEST+0x290>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
811064c4:	012044b4 	movhi	r4,33042
811064c8:	213a5604 	addi	r4,r4,-5800
811064cc:	110d0f80 	call	8110d0f8 <puts>
  usleep(20*1000);
811064d0:	01138804 	movi	r4,20000
811064d4:	111a2000 	call	8111a200 <usleep>
  for(i = 0; i < 256 && bSuccess; i++){
811064d8:	e03ffc15 	stw	zero,-16(fp)
811064dc:	00002006 	br	81106560 <DDR2_EEPROM_TEST+0x138>
    ControlAddr = i;
811064e0:	e0bffc17 	ldw	r2,-16(fp)
811064e4:	e0bffd45 	stb	r2,-11(fp)
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, ControlAddr, &Value);
811064e8:	e0bffd03 	ldbu	r2,-12(fp)
811064ec:	10c03fcc 	andi	r3,r2,255
811064f0:	18c0201c 	xori	r3,r3,128
811064f4:	18ffe004 	addi	r3,r3,-128
811064f8:	e13ffd43 	ldbu	r4,-11(fp)
811064fc:	e0bffe04 	addi	r2,fp,-8
81106500:	d8800015 	stw	r2,0(sp)
81106504:	200f883a 	mov	r7,r4
81106508:	180d883a 	mov	r6,r3
8110650c:	e17ffb17 	ldw	r5,-20(fp)
81106510:	e13ffa17 	ldw	r4,-24(fp)
81106514:	11022fc0 	call	811022fc <I2C_Read>
81106518:	e0bff915 	stw	r2,-28(fp)
    if (bSuccess){
8110651c:	e0bff917 	ldw	r2,-28(fp)
81106520:	10000926 	beq	r2,zero,81106548 <DDR2_EEPROM_TEST+0x120>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
81106524:	e0bffd43 	ldbu	r2,-11(fp)
81106528:	e0fffe03 	ldbu	r3,-8(fp)
8110652c:	18c03fcc 	andi	r3,r3,255
81106530:	180d883a 	mov	r6,r3
81106534:	100b883a 	mov	r5,r2
81106538:	012044b4 	movhi	r4,33042
8110653c:	213a5c04 	addi	r4,r4,-5776
81106540:	110cfdc0 	call	8110cfdc <printf>
81106544:	00000306 	br	81106554 <DDR2_EEPROM_TEST+0x12c>
    }else{
      printf("Failed to read EEPROM\n");
81106548:	012044b4 	movhi	r4,33042
8110654c:	213a6104 	addi	r4,r4,-5756
81106550:	110d0f80 	call	8110d0f8 <puts>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
  usleep(20*1000);
  for(i = 0; i < 256 && bSuccess; i++){
81106554:	e0bffc17 	ldw	r2,-16(fp)
81106558:	10800044 	addi	r2,r2,1
8110655c:	e0bffc15 	stw	r2,-16(fp)
81106560:	e0bffc17 	ldw	r2,-16(fp)
81106564:	10804008 	cmpgei	r2,r2,256
81106568:	1000021e 	bne	r2,zero,81106574 <DDR2_EEPROM_TEST+0x14c>
8110656c:	e0bff917 	ldw	r2,-28(fp)
81106570:	103fdb1e 	bne	r2,zero,811064e0 <__reset+0xfb0e64e0>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
    }else{
      printf("Failed to read EEPROM\n");
    }
  }
  if (bSuccess){
81106574:	e0bff917 	ldw	r2,-28(fp)
81106578:	10000426 	beq	r2,zero,8110658c <DDR2_EEPROM_TEST+0x164>
    printf("DDR2 EEPROM Read Test Completed\n\n");
8110657c:	012044b4 	movhi	r4,33042
81106580:	213a6704 	addi	r4,r4,-5732
81106584:	110d0f80 	call	8110d0f8 <puts>
81106588:	00000306 	br	81106598 <DDR2_EEPROM_TEST+0x170>
  } else {
    printf("DDR2 EEPROM Read Test Failed\n\n");
8110658c:	012044b4 	movhi	r4,33042
81106590:	213a7004 	addi	r4,r4,-5696
81106594:	110d0f80 	call	8110d0f8 <puts>
  }
  
  printf("DDR2 EEPROM Write Test\n");
81106598:	012044b4 	movhi	r4,33042
8110659c:	213a7804 	addi	r4,r4,-5664
811065a0:	110d0f80 	call	8110d0f8 <puts>
  alt_u8 WriteData = 0x12, TestAddr = 128;
811065a4:	00800484 	movi	r2,18
811065a8:	e0bffd85 	stb	r2,-10(fp)
811065ac:	00bfe004 	movi	r2,-128
811065b0:	e0bffdc5 	stb	r2,-9(fp)
  alt_u8 ReadData;
  usleep(20*1000);
811065b4:	01138804 	movi	r4,20000
811065b8:	111a2000 	call	8111a200 <usleep>
  bSuccess = I2C_Write(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, WriteData);
811065bc:	e0bffd03 	ldbu	r2,-12(fp)
811065c0:	10c03fcc 	andi	r3,r2,255
811065c4:	18c0201c 	xori	r3,r3,128
811065c8:	18ffe004 	addi	r3,r3,-128
811065cc:	e13ffdc3 	ldbu	r4,-9(fp)
811065d0:	e0bffd83 	ldbu	r2,-10(fp)
811065d4:	d8800015 	stw	r2,0(sp)
811065d8:	200f883a 	mov	r7,r4
811065dc:	180d883a 	mov	r6,r3
811065e0:	e17ffb17 	ldw	r5,-20(fp)
811065e4:	e13ffa17 	ldw	r4,-24(fp)
811065e8:	11022240 	call	81102224 <I2C_Write>
811065ec:	e0bff915 	stw	r2,-28(fp)
  if (!bSuccess){
811065f0:	e0bff917 	ldw	r2,-28(fp)
811065f4:	1000041e 	bne	r2,zero,81106608 <DDR2_EEPROM_TEST+0x1e0>
    printf("Failed to write EEPROM\n");            
811065f8:	012044b4 	movhi	r4,33042
811065fc:	213a7e04 	addi	r4,r4,-5640
81106600:	110d0f80 	call	8110d0f8 <puts>
81106604:	00002006 	br	81106688 <DDR2_EEPROM_TEST+0x260>
  } else {
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, &ReadData);
81106608:	e0bffd03 	ldbu	r2,-12(fp)
8110660c:	10c03fcc 	andi	r3,r2,255
81106610:	18c0201c 	xori	r3,r3,128
81106614:	18ffe004 	addi	r3,r3,-128
81106618:	e13ffdc3 	ldbu	r4,-9(fp)
8110661c:	e0bffe44 	addi	r2,fp,-7
81106620:	d8800015 	stw	r2,0(sp)
81106624:	200f883a 	mov	r7,r4
81106628:	180d883a 	mov	r6,r3
8110662c:	e17ffb17 	ldw	r5,-20(fp)
81106630:	e13ffa17 	ldw	r4,-24(fp)
81106634:	11022fc0 	call	811022fc <I2C_Read>
81106638:	e0bff915 	stw	r2,-28(fp)
    if (!bSuccess){
8110663c:	e0bff917 	ldw	r2,-28(fp)
81106640:	1000041e 	bne	r2,zero,81106654 <DDR2_EEPROM_TEST+0x22c>
      printf("Failed to read EEPROM for verify\n");            
81106644:	012044b4 	movhi	r4,33042
81106648:	213a8404 	addi	r4,r4,-5616
8110664c:	110d0f80 	call	8110d0f8 <puts>
81106650:	00000d06 	br	81106688 <DDR2_EEPROM_TEST+0x260>
    } else {
      if (ReadData != WriteData){
81106654:	e0bffe43 	ldbu	r2,-7(fp)
81106658:	10c03fcc 	andi	r3,r2,255
8110665c:	e0bffd83 	ldbu	r2,-10(fp)
81106660:	18800926 	beq	r3,r2,81106688 <DDR2_EEPROM_TEST+0x260>
        bSuccess = FALSE;
81106664:	e03ff915 	stw	zero,-28(fp)
        printf("Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n", ReadData, WriteData);
81106668:	e0bffe43 	ldbu	r2,-7(fp)
8110666c:	10803fcc 	andi	r2,r2,255
81106670:	e0fffd83 	ldbu	r3,-10(fp)
81106674:	180d883a 	mov	r6,r3
81106678:	100b883a 	mov	r5,r2
8110667c:	012044b4 	movhi	r4,33042
81106680:	213a8d04 	addi	r4,r4,-5580
81106684:	110cfdc0 	call	8110cfdc <printf>
      }
    }
  }
  if (bSuccess){
81106688:	e0bff917 	ldw	r2,-28(fp)
8110668c:	10000426 	beq	r2,zero,811066a0 <DDR2_EEPROM_TEST+0x278>
    printf("DDR2 EEPROM Write Test Completed\n\n");
81106690:	012044b4 	movhi	r4,33042
81106694:	213a9c04 	addi	r4,r4,-5520
81106698:	110d0f80 	call	8110d0f8 <puts>
8110669c:	00000306 	br	811066ac <DDR2_EEPROM_TEST+0x284>
  } else {
    printf("DDR2 EEPROM Write Test Failed\n\n");
811066a0:	012044b4 	movhi	r4,33042
811066a4:	213aa504 	addi	r4,r4,-5484
811066a8:	110d0f80 	call	8110d0f8 <puts>
  }
  printf("\n");
811066ac:	01000284 	movi	r4,10
811066b0:	110d0200 	call	8110d020 <putchar>

  return bSuccess;
811066b4:	e0bff917 	ldw	r2,-28(fp)
}
811066b8:	e037883a 	mov	sp,fp
811066bc:	dfc00117 	ldw	ra,4(sp)
811066c0:	df000017 	ldw	fp,0(sp)
811066c4:	dec00204 	addi	sp,sp,8
811066c8:	f800283a 	ret

811066cc <DDR2_EEPROM_DUMP>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_DUMP(alt_u8 MemoryId){
811066cc:	deffb704 	addi	sp,sp,-292
811066d0:	dfc04815 	stw	ra,288(sp)
811066d4:	df004715 	stw	fp,284(sp)
811066d8:	df004704 	addi	fp,sp,284
811066dc:	2005883a 	mov	r2,r4
811066e0:	e0bfff05 	stb	r2,-4(fp)
 
  printf("===== DE4 DDR2 EEPROM Dump =====\n");
811066e4:	012044b4 	movhi	r4,33042
811066e8:	213aad04 	addi	r4,r4,-5452
811066ec:	110d0f80 	call	8110d0f8 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811066f0:	00bfe804 	movi	r2,-96
811066f4:	e0bfbd05 	stb	r2,-268(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
811066f8:	00800044 	movi	r2,1
811066fc:	e0bfbe15 	stw	r2,-264(fp)
  switch (MemoryId) {
81106700:	e0bfff03 	ldbu	r2,-4(fp)
81106704:	10c00060 	cmpeqi	r3,r2,1
81106708:	1800031e 	bne	r3,zero,81106718 <DDR2_EEPROM_DUMP+0x4c>
8110670c:	108000a0 	cmpeqi	r2,r2,2
81106710:	1000081e 	bne	r2,zero,81106734 <DDR2_EEPROM_DUMP+0x68>
81106714:	00000e06 	br	81106750 <DDR2_EEPROM_DUMP+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81106718:	00a00034 	movhi	r2,32768
8110671c:	10827c04 	addi	r2,r2,2544
81106720:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81106724:	00a00034 	movhi	r2,32768
81106728:	10828004 	addi	r2,r2,2560
8110672c:	e0bfbb15 	stw	r2,-276(fp)
    break;
81106730:	00000d06 	br	81106768 <DDR2_EEPROM_DUMP+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81106734:	00a00034 	movhi	r2,32768
81106738:	10825804 	addi	r2,r2,2400
8110673c:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
81106740:	00a00034 	movhi	r2,32768
81106744:	10825c04 	addi	r2,r2,2416
81106748:	e0bfbb15 	stw	r2,-276(fp)
    break;
8110674c:	00000606 	br	81106768 <DDR2_EEPROM_DUMP+0x9c>
    default:
      bSuccess = FALSE;
81106750:	e03fbe15 	stw	zero,-264(fp)
	  printf("DR2 Memory ID not identified!! Aborting Dump \n");
81106754:	012044b4 	movhi	r4,33042
81106758:	213ab604 	addi	r4,r4,-5416
8110675c:	110d0f80 	call	8110d0f8 <puts>
      return bSuccess;
81106760:	e0bfbe17 	ldw	r2,-264(fp)
81106764:	00012006 	br	81106be8 <DDR2_EEPROM_DUMP+0x51c>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
81106768:	e0bfbd03 	ldbu	r2,-268(fp)
8110676c:	10c03fcc 	andi	r3,r2,255
81106770:	18c0201c 	xori	r3,r3,128
81106774:	18ffe004 	addi	r3,r3,-128
81106778:	e13fbf04 	addi	r4,fp,-260
8110677c:	00804004 	movi	r2,256
81106780:	d8800015 	stw	r2,0(sp)
81106784:	200f883a 	mov	r7,r4
81106788:	180d883a 	mov	r6,r3
8110678c:	e17fbb17 	ldw	r5,-276(fp)
81106790:	e13fba17 	ldw	r4,-280(fp)
81106794:	11023fc0 	call	811023fc <I2C_MultipleRead>
81106798:	e0bfbe15 	stw	r2,-264(fp)
  if (bSuccess){
8110679c:	e0bfbe17 	ldw	r2,-264(fp)
811067a0:	10010b26 	beq	r2,zero,81106bd0 <DDR2_EEPROM_DUMP+0x504>
    for(i = 0; i < 256 && bSuccess; i++){
811067a4:	e03fbc15 	stw	zero,-272(fp)
811067a8:	00010306 	br	81106bb8 <DDR2_EEPROM_DUMP+0x4ec>
      printf("EEPROM[%03d]=%02Xh ", i, szData[i]);
811067ac:	e0ffbf04 	addi	r3,fp,-260
811067b0:	e0bfbc17 	ldw	r2,-272(fp)
811067b4:	1885883a 	add	r2,r3,r2
811067b8:	10800003 	ldbu	r2,0(r2)
811067bc:	10803fcc 	andi	r2,r2,255
811067c0:	100d883a 	mov	r6,r2
811067c4:	e17fbc17 	ldw	r5,-272(fp)
811067c8:	012044b4 	movhi	r4,33042
811067cc:	213ac204 	addi	r4,r4,-5368
811067d0:	110cfdc0 	call	8110cfdc <printf>
      if (i == 0)
811067d4:	e0bfbc17 	ldw	r2,-272(fp)
811067d8:	1000041e 	bne	r2,zero,811067ec <DDR2_EEPROM_DUMP+0x120>
        printf("(Number of SPD Bytes Used)\n");
811067dc:	012044b4 	movhi	r4,33042
811067e0:	213ac704 	addi	r4,r4,-5348
811067e4:	110d0f80 	call	8110d0f8 <puts>
811067e8:	0000f006 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 1)
811067ec:	e0bfbc17 	ldw	r2,-272(fp)
811067f0:	10800058 	cmpnei	r2,r2,1
811067f4:	1000041e 	bne	r2,zero,81106808 <DDR2_EEPROM_DUMP+0x13c>
        printf("(Total Number of Bytes in SPD Device, Log2(N))\n");
811067f8:	012044b4 	movhi	r4,33042
811067fc:	213ace04 	addi	r4,r4,-5320
81106800:	110d0f80 	call	8110d0f8 <puts>
81106804:	0000e906 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 2)
81106808:	e0bfbc17 	ldw	r2,-272(fp)
8110680c:	10800098 	cmpnei	r2,r2,2
81106810:	1000041e 	bne	r2,zero,81106824 <DDR2_EEPROM_DUMP+0x158>
        printf("(Basic Memory Type[08h:DDR2])\n");
81106814:	012044b4 	movhi	r4,33042
81106818:	213ada04 	addi	r4,r4,-5272
8110681c:	110d0f80 	call	8110d0f8 <puts>
81106820:	0000e206 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 3)
81106824:	e0bfbc17 	ldw	r2,-272(fp)
81106828:	108000d8 	cmpnei	r2,r2,3
8110682c:	1000041e 	bne	r2,zero,81106840 <DDR2_EEPROM_DUMP+0x174>
        printf("(Number of Row Addresses on Assembly)\n");
81106830:	012044b4 	movhi	r4,33042
81106834:	213ae204 	addi	r4,r4,-5240
81106838:	110d0f80 	call	8110d0f8 <puts>
8110683c:	0000db06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 4)
81106840:	e0bfbc17 	ldw	r2,-272(fp)
81106844:	10800118 	cmpnei	r2,r2,4
81106848:	1000041e 	bne	r2,zero,8110685c <DDR2_EEPROM_DUMP+0x190>
        printf("(Number of Column Addresses on Assembly)\n");
8110684c:	012044b4 	movhi	r4,33042
81106850:	213aec04 	addi	r4,r4,-5200
81106854:	110d0f80 	call	8110d0f8 <puts>
81106858:	0000d406 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 5)
8110685c:	e0bfbc17 	ldw	r2,-272(fp)
81106860:	10800158 	cmpnei	r2,r2,5
81106864:	1000041e 	bne	r2,zero,81106878 <DDR2_EEPROM_DUMP+0x1ac>
        printf("(DIMM Height and Module Rank Number[b2b1b0+1])\n");
81106868:	012044b4 	movhi	r4,33042
8110686c:	213af704 	addi	r4,r4,-5156
81106870:	110d0f80 	call	8110d0f8 <puts>
81106874:	0000cd06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 6)
81106878:	e0bfbc17 	ldw	r2,-272(fp)
8110687c:	10800198 	cmpnei	r2,r2,6
81106880:	1000041e 	bne	r2,zero,81106894 <DDR2_EEPROM_DUMP+0x1c8>
        printf("(Module Data Width)\n");
81106884:	012044b4 	movhi	r4,33042
81106888:	213b0304 	addi	r4,r4,-5108
8110688c:	110d0f80 	call	8110d0f8 <puts>
81106890:	0000c606 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 7)
81106894:	e0bfbc17 	ldw	r2,-272(fp)
81106898:	108001d8 	cmpnei	r2,r2,7
8110689c:	1000041e 	bne	r2,zero,811068b0 <DDR2_EEPROM_DUMP+0x1e4>
        printf("(Module Data Width, Continued)\n");
811068a0:	012044b4 	movhi	r4,33042
811068a4:	213b0804 	addi	r4,r4,-5088
811068a8:	110d0f80 	call	8110d0f8 <puts>
811068ac:	0000bf06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 16)
811068b0:	e0bfbc17 	ldw	r2,-272(fp)
811068b4:	10800418 	cmpnei	r2,r2,16
811068b8:	1000041e 	bne	r2,zero,811068cc <DDR2_EEPROM_DUMP+0x200>
        printf("(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
811068bc:	012044b4 	movhi	r4,33042
811068c0:	213b1004 	addi	r4,r4,-5056
811068c4:	110d0f80 	call	8110d0f8 <puts>
811068c8:	0000b806 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 13)
811068cc:	e0bfbc17 	ldw	r2,-272(fp)
811068d0:	10800358 	cmpnei	r2,r2,13
811068d4:	1000041e 	bne	r2,zero,811068e8 <DDR2_EEPROM_DUMP+0x21c>
        printf("(Primary SDRAM width)\n");
811068d8:	012044b4 	movhi	r4,33042
811068dc:	213b1d04 	addi	r4,r4,-5004
811068e0:	110d0f80 	call	8110d0f8 <puts>
811068e4:	0000b106 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 14)
811068e8:	e0bfbc17 	ldw	r2,-272(fp)
811068ec:	10800398 	cmpnei	r2,r2,14
811068f0:	1000041e 	bne	r2,zero,81106904 <DDR2_EEPROM_DUMP+0x238>
        printf("(ECC SDRAM width)\n");
811068f4:	012044b4 	movhi	r4,33042
811068f8:	213b2304 	addi	r4,r4,-4980
811068fc:	110d0f80 	call	8110d0f8 <puts>
81106900:	0000aa06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 17)
81106904:	e0bfbc17 	ldw	r2,-272(fp)
81106908:	10800458 	cmpnei	r2,r2,17
8110690c:	1000041e 	bne	r2,zero,81106920 <DDR2_EEPROM_DUMP+0x254>
        printf("(Banks per SDRAM device)\n");
81106910:	012044b4 	movhi	r4,33042
81106914:	213b2804 	addi	r4,r4,-4960
81106918:	110d0f80 	call	8110d0f8 <puts>
8110691c:	0000a306 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 18)
81106920:	e0bfbc17 	ldw	r2,-272(fp)
81106924:	10800498 	cmpnei	r2,r2,18
81106928:	1000041e 	bne	r2,zero,8110693c <DDR2_EEPROM_DUMP+0x270>
        printf("(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
8110692c:	012044b4 	movhi	r4,33042
81106930:	213b2f04 	addi	r4,r4,-4932
81106934:	110d0f80 	call	8110d0f8 <puts>
81106938:	00009c06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 20)
8110693c:	e0bfbc17 	ldw	r2,-272(fp)
81106940:	10800518 	cmpnei	r2,r2,20
81106944:	1000041e 	bne	r2,zero,81106958 <DDR2_EEPROM_DUMP+0x28c>
        printf("(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
81106948:	012044b4 	movhi	r4,33042
8110694c:	213b3c04 	addi	r4,r4,-4880
81106950:	110d0f80 	call	8110d0f8 <puts>
81106954:	00009506 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 22)
81106958:	e0bfbc17 	ldw	r2,-272(fp)
8110695c:	10800598 	cmpnei	r2,r2,22
81106960:	1000041e 	bne	r2,zero,81106974 <DDR2_EEPROM_DUMP+0x2a8>
        printf("(Memory Chip feature bitmap)\n");
81106964:	012044b4 	movhi	r4,33042
81106968:	213b4e04 	addi	r4,r4,-4808
8110696c:	110d0f80 	call	8110d0f8 <puts>
81106970:	00008e06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 27)
81106974:	e0bfbc17 	ldw	r2,-272(fp)
81106978:	108006d8 	cmpnei	r2,r2,27
8110697c:	1000041e 	bne	r2,zero,81106990 <DDR2_EEPROM_DUMP+0x2c4>
        printf("(Minimun row precharge time[tRP;nsx4])\n");
81106980:	012044b4 	movhi	r4,33042
81106984:	213b5604 	addi	r4,r4,-4776
81106988:	110d0f80 	call	8110d0f8 <puts>
8110698c:	00008706 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 28)
81106990:	e0bfbc17 	ldw	r2,-272(fp)
81106994:	10800718 	cmpnei	r2,r2,28
81106998:	1000041e 	bne	r2,zero,811069ac <DDR2_EEPROM_DUMP+0x2e0>
        printf("(Minimun row active-row activce delay[tRRD;nsx4])\n");
8110699c:	012044b4 	movhi	r4,33042
811069a0:	213b6004 	addi	r4,r4,-4736
811069a4:	110d0f80 	call	8110d0f8 <puts>
811069a8:	00008006 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 29)
811069ac:	e0bfbc17 	ldw	r2,-272(fp)
811069b0:	10800758 	cmpnei	r2,r2,29
811069b4:	1000041e 	bne	r2,zero,811069c8 <DDR2_EEPROM_DUMP+0x2fc>
        printf("(Minimun RAS to CAS delay[tRCD;nsx4])\n");
811069b8:	012044b4 	movhi	r4,33042
811069bc:	213b6d04 	addi	r4,r4,-4684
811069c0:	110d0f80 	call	8110d0f8 <puts>
811069c4:	00007906 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 30)
811069c8:	e0bfbc17 	ldw	r2,-272(fp)
811069cc:	10800798 	cmpnei	r2,r2,30
811069d0:	1000041e 	bne	r2,zero,811069e4 <DDR2_EEPROM_DUMP+0x318>
        printf("(Minimun acive to precharge time[tRAS;ns])\n");
811069d4:	012044b4 	movhi	r4,33042
811069d8:	213b7704 	addi	r4,r4,-4644
811069dc:	110d0f80 	call	8110d0f8 <puts>
811069e0:	00007206 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 31)
811069e4:	e0bfbc17 	ldw	r2,-272(fp)
811069e8:	108007d8 	cmpnei	r2,r2,31
811069ec:	1000041e 	bne	r2,zero,81106a00 <DDR2_EEPROM_DUMP+0x334>
        printf("(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
811069f0:	012044b4 	movhi	r4,33042
811069f4:	213b8204 	addi	r4,r4,-4600
811069f8:	110d0f80 	call	8110d0f8 <puts>
811069fc:	00006b06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 36)
81106a00:	e0bfbc17 	ldw	r2,-272(fp)
81106a04:	10800918 	cmpnei	r2,r2,36
81106a08:	1000041e 	bne	r2,zero,81106a1c <DDR2_EEPROM_DUMP+0x350>
        printf("(Minimun write receovery time[tWR;nsx4])\n");
81106a0c:	012044b4 	movhi	r4,33042
81106a10:	213b9304 	addi	r4,r4,-4532
81106a14:	110d0f80 	call	8110d0f8 <puts>
81106a18:	00006406 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 37)
81106a1c:	e0bfbc17 	ldw	r2,-272(fp)
81106a20:	10800958 	cmpnei	r2,r2,37
81106a24:	1000041e 	bne	r2,zero,81106a38 <DDR2_EEPROM_DUMP+0x36c>
        printf("(Internal write to read command delay[tWTR;nsx4])\n");
81106a28:	012044b4 	movhi	r4,33042
81106a2c:	213b9e04 	addi	r4,r4,-4488
81106a30:	110d0f80 	call	8110d0f8 <puts>
81106a34:	00005d06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 38)
81106a38:	e0bfbc17 	ldw	r2,-272(fp)
81106a3c:	10800998 	cmpnei	r2,r2,38
81106a40:	1000041e 	bne	r2,zero,81106a54 <DDR2_EEPROM_DUMP+0x388>
        printf("(Internal read to precharge command delay[tRTP;nsx4])\n");
81106a44:	012044b4 	movhi	r4,33042
81106a48:	213bab04 	addi	r4,r4,-4436
81106a4c:	110d0f80 	call	8110d0f8 <puts>
81106a50:	00005606 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 41)
81106a54:	e0bfbc17 	ldw	r2,-272(fp)
81106a58:	10800a58 	cmpnei	r2,r2,41
81106a5c:	1000041e 	bne	r2,zero,81106a70 <DDR2_EEPROM_DUMP+0x3a4>
        printf("(Minimun activce to active/refresh time[tRC;ns])\n");
81106a60:	012044b4 	movhi	r4,33042
81106a64:	213bb904 	addi	r4,r4,-4380
81106a68:	110d0f80 	call	8110d0f8 <puts>
81106a6c:	00004f06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 42)
81106a70:	e0bfbc17 	ldw	r2,-272(fp)
81106a74:	10800a98 	cmpnei	r2,r2,42
81106a78:	1000041e 	bne	r2,zero,81106a8c <DDR2_EEPROM_DUMP+0x3c0>
        printf("(Minimun refresh to active/refresh time[tRFC;ns])\n");
81106a7c:	012044b4 	movhi	r4,33042
81106a80:	213bc604 	addi	r4,r4,-4328
81106a84:	110d0f80 	call	8110d0f8 <puts>
81106a88:	00004806 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 62)
81106a8c:	e0bfbc17 	ldw	r2,-272(fp)
81106a90:	10800f98 	cmpnei	r2,r2,62
81106a94:	1000041e 	bne	r2,zero,81106aa8 <DDR2_EEPROM_DUMP+0x3dc>
        printf("(SPD Revision)\n");
81106a98:	012044b4 	movhi	r4,33042
81106a9c:	213bd304 	addi	r4,r4,-4276
81106aa0:	110d0f80 	call	8110d0f8 <puts>
81106aa4:	00004106 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 63)
81106aa8:	e0bfbc17 	ldw	r2,-272(fp)
81106aac:	10800fd8 	cmpnei	r2,r2,63
81106ab0:	1000041e 	bne	r2,zero,81106ac4 <DDR2_EEPROM_DUMP+0x3f8>
        printf("(Checksum)\n");
81106ab4:	012044b4 	movhi	r4,33042
81106ab8:	213bd704 	addi	r4,r4,-4260
81106abc:	110d0f80 	call	8110d0f8 <puts>
81106ac0:	00003a06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 64)
81106ac4:	e0bfbc17 	ldw	r2,-272(fp)
81106ac8:	10801018 	cmpnei	r2,r2,64
81106acc:	1000041e 	bne	r2,zero,81106ae0 <DDR2_EEPROM_DUMP+0x414>
        printf("(64~71: Manufacturer JEDEC ID)\n");
81106ad0:	012044b4 	movhi	r4,33042
81106ad4:	213bda04 	addi	r4,r4,-4248
81106ad8:	110d0f80 	call	8110d0f8 <puts>
81106adc:	00003306 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 72)
81106ae0:	e0bfbc17 	ldw	r2,-272(fp)
81106ae4:	10801218 	cmpnei	r2,r2,72
81106ae8:	1000041e 	bne	r2,zero,81106afc <DDR2_EEPROM_DUMP+0x430>
        printf("(Module manufacturing location[Vendor-specific code])\n");
81106aec:	012044b4 	movhi	r4,33042
81106af0:	213be204 	addi	r4,r4,-4216
81106af4:	110d0f80 	call	8110d0f8 <puts>
81106af8:	00002c06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 73)
81106afc:	e0bfbc17 	ldw	r2,-272(fp)
81106b00:	10801258 	cmpnei	r2,r2,73
81106b04:	1000041e 	bne	r2,zero,81106b18 <DDR2_EEPROM_DUMP+0x44c>
        printf("(73~90: Moduloe part number)\n");
81106b08:	012044b4 	movhi	r4,33042
81106b0c:	213bf004 	addi	r4,r4,-4160
81106b10:	110d0f80 	call	8110d0f8 <puts>
81106b14:	00002506 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 91)
81106b18:	e0bfbc17 	ldw	r2,-272(fp)
81106b1c:	108016d8 	cmpnei	r2,r2,91
81106b20:	1000041e 	bne	r2,zero,81106b34 <DDR2_EEPROM_DUMP+0x468>
        printf("(91~92: Moduloe revision code)\n");
81106b24:	012044b4 	movhi	r4,33042
81106b28:	213bf804 	addi	r4,r4,-4128
81106b2c:	110d0f80 	call	8110d0f8 <puts>
81106b30:	00001e06 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 93)
81106b34:	e0bfbc17 	ldw	r2,-272(fp)
81106b38:	10801758 	cmpnei	r2,r2,93
81106b3c:	1000041e 	bne	r2,zero,81106b50 <DDR2_EEPROM_DUMP+0x484>
        printf("(Manufacture Years since 2000[0-255])\n");
81106b40:	012044b4 	movhi	r4,33042
81106b44:	213c0004 	addi	r4,r4,-4096
81106b48:	110d0f80 	call	8110d0f8 <puts>
81106b4c:	00001706 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 94)
81106b50:	e0bfbc17 	ldw	r2,-272(fp)
81106b54:	10801798 	cmpnei	r2,r2,94
81106b58:	1000041e 	bne	r2,zero,81106b6c <DDR2_EEPROM_DUMP+0x4a0>
        printf("(Manufacture Weeks[1-52])\n");
81106b5c:	012044b4 	movhi	r4,33042
81106b60:	213c0a04 	addi	r4,r4,-4056
81106b64:	110d0f80 	call	8110d0f8 <puts>
81106b68:	00001006 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 95)
81106b6c:	e0bfbc17 	ldw	r2,-272(fp)
81106b70:	108017d8 	cmpnei	r2,r2,95
81106b74:	1000041e 	bne	r2,zero,81106b88 <DDR2_EEPROM_DUMP+0x4bc>
        printf("(95~98[4-bytes]: Module serial number)\n");
81106b78:	012044b4 	movhi	r4,33042
81106b7c:	213c1104 	addi	r4,r4,-4028
81106b80:	110d0f80 	call	8110d0f8 <puts>
81106b84:	00000906 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 99)
81106b88:	e0bfbc17 	ldw	r2,-272(fp)
81106b8c:	108018d8 	cmpnei	r2,r2,99
81106b90:	1000041e 	bne	r2,zero,81106ba4 <DDR2_EEPROM_DUMP+0x4d8>
        printf("(99~128: Manufacturer-specific data)\n");
81106b94:	012044b4 	movhi	r4,33042
81106b98:	213c1b04 	addi	r4,r4,-3988
81106b9c:	110d0f80 	call	8110d0f8 <puts>
81106ba0:	00000206 	br	81106bac <DDR2_EEPROM_DUMP+0x4e0>
      else
        printf("\n");
81106ba4:	01000284 	movi	r4,10
81106ba8:	110d0200 	call	8110d020 <putchar>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
  if (bSuccess){
    for(i = 0; i < 256 && bSuccess; i++){
81106bac:	e0bfbc17 	ldw	r2,-272(fp)
81106bb0:	10800044 	addi	r2,r2,1
81106bb4:	e0bfbc15 	stw	r2,-272(fp)
81106bb8:	e0bfbc17 	ldw	r2,-272(fp)
81106bbc:	10804008 	cmpgei	r2,r2,256
81106bc0:	1000061e 	bne	r2,zero,81106bdc <DDR2_EEPROM_DUMP+0x510>
81106bc4:	e0bfbe17 	ldw	r2,-264(fp)
81106bc8:	103ef81e 	bne	r2,zero,811067ac <__reset+0xfb0e67ac>
81106bcc:	00000306 	br	81106bdc <DDR2_EEPROM_DUMP+0x510>
        printf("(99~128: Manufacturer-specific data)\n");
      else
        printf("\n");
    }
  } else {
    printf("Failed to dump EEPROM\n"); 
81106bd0:	012044b4 	movhi	r4,33042
81106bd4:	213c2504 	addi	r4,r4,-3948
81106bd8:	110d0f80 	call	8110d0f8 <puts>
  }
  printf("\n");
81106bdc:	01000284 	movi	r4,10
81106be0:	110d0200 	call	8110d020 <putchar>

  return bSuccess;  
81106be4:	e0bfbe17 	ldw	r2,-264(fp)
}
81106be8:	e037883a 	mov	sp,fp
81106bec:	dfc00117 	ldw	ra,4(sp)
81106bf0:	df000017 	ldw	fp,0(sp)
81106bf4:	dec00204 	addi	sp,sp,8
81106bf8:	f800283a 	ret

81106bfc <DDR2_SWITCH_MEMORY>:

bool DDR2_SWITCH_MEMORY(alt_u8 MemoryId){
81106bfc:	defffb04 	addi	sp,sp,-20
81106c00:	dfc00415 	stw	ra,16(sp)
81106c04:	df000315 	stw	fp,12(sp)
81106c08:	df000304 	addi	fp,sp,12
81106c0c:	2005883a 	mov	r2,r4
81106c10:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *pDdr2MemAddr = DDR2_EXTENDED_ADDRESS_CONTROL_BASE;
81106c14:	00a04834 	movhi	r2,33056
81106c18:	108c2204 	addi	r2,r2,12424
81106c1c:	e0bffe15 	stw	r2,-8(fp)

	  bSuccess = TRUE;
81106c20:	00800044 	movi	r2,1
81106c24:	e0bffd15 	stw	r2,-12(fp)
	  switch (MemoryId) {
81106c28:	e0bfff03 	ldbu	r2,-4(fp)
81106c2c:	10c00060 	cmpeqi	r3,r2,1
81106c30:	1800031e 	bne	r3,zero,81106c40 <DDR2_SWITCH_MEMORY+0x44>
81106c34:	108000a0 	cmpeqi	r2,r2,2
81106c38:	1000041e 	bne	r2,zero,81106c4c <DDR2_SWITCH_MEMORY+0x50>
81106c3c:	00000706 	br	81106c5c <DDR2_SWITCH_MEMORY+0x60>
	    case DDR2_M1_ID:
	  	  *(pDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
81106c40:	e0bffe17 	ldw	r2,-8(fp)
81106c44:	10000015 	stw	zero,0(r2)
	    break;
81106c48:	00000806 	br	81106c6c <DDR2_SWITCH_MEMORY+0x70>
	    case DDR2_M2_ID:
		  *(pDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81106c4c:	e0bffe17 	ldw	r2,-8(fp)
81106c50:	00e00034 	movhi	r3,32768
81106c54:	10c00015 	stw	r3,0(r2)
	    break;
81106c58:	00000406 	br	81106c6c <DDR2_SWITCH_MEMORY+0x70>
	    default:
	      bSuccess = FALSE;
81106c5c:	e03ffd15 	stw	zero,-12(fp)
		  printf("DR2 Memory ID not identified!! Error switching memories!! \n");
81106c60:	012044b4 	movhi	r4,33042
81106c64:	213c2b04 	addi	r4,r4,-3924
81106c68:	110d0f80 	call	8110d0f8 <puts>
	  }

	  return bSuccess;
81106c6c:	e0bffd17 	ldw	r2,-12(fp)
}
81106c70:	e037883a 	mov	sp,fp
81106c74:	dfc00117 	ldw	ra,4(sp)
81106c78:	df000017 	ldw	fp,0(sp)
81106c7c:	dec00204 	addi	sp,sp,8
81106c80:	f800283a 	ret

81106c84 <DDR2_MEMORY_WRITE_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_WRITE_TEST(alt_u8 MemoryId){
81106c84:	deffe304 	addi	sp,sp,-116
81106c88:	dfc01c15 	stw	ra,112(sp)
81106c8c:	df001b15 	stw	fp,108(sp)
81106c90:	dc401a15 	stw	r17,104(sp)
81106c94:	dc001915 	stw	r16,100(sp)
81106c98:	df001b04 	addi	fp,sp,108
81106c9c:	2005883a 	mov	r2,r4
81106ca0:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Write Test =====\n");
81106ca4:	012044b4 	movhi	r4,33042
81106ca8:	213c3a04 	addi	r4,r4,-3864
81106cac:	110d0f80 	call	8110d0f8 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81106cb0:	00800044 	movi	r2,1
81106cb4:	e0bfed15 	stw	r2,-76(fp)
  switch (MemoryId) {
81106cb8:	e0bffd03 	ldbu	r2,-12(fp)
81106cbc:	10c00060 	cmpeqi	r3,r2,1
81106cc0:	1800031e 	bne	r3,zero,81106cd0 <DDR2_MEMORY_WRITE_TEST+0x4c>
81106cc4:	108000a0 	cmpeqi	r2,r2,2
81106cc8:	1000081e 	bne	r2,zero,81106cec <DDR2_MEMORY_WRITE_TEST+0x68>
81106ccc:	00000e06 	br	81106d08 <DDR2_MEMORY_WRITE_TEST+0x84>
    case DDR2_M1_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81106cd0:	e0bffd03 	ldbu	r2,-12(fp)
81106cd4:	1009883a 	mov	r4,r2
81106cd8:	1106bfc0 	call	81106bfc <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81106cdc:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
81106ce0:	00a00034 	movhi	r2,32768
81106ce4:	e0bfe615 	stw	r2,-104(fp)
    break;
81106ce8:	00000d06 	br	81106d20 <DDR2_MEMORY_WRITE_TEST+0x9c>
    case DDR2_M2_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81106cec:	e0bffd03 	ldbu	r2,-12(fp)
81106cf0:	1009883a 	mov	r4,r2
81106cf4:	1106bfc0 	call	81106bfc <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81106cf8:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
81106cfc:	00a00034 	movhi	r2,32768
81106d00:	e0bfe615 	stw	r2,-104(fp)
    break;
81106d04:	00000606 	br	81106d20 <DDR2_MEMORY_WRITE_TEST+0x9c>
    default:
      bSuccess = FALSE;
81106d08:	e03fed15 	stw	zero,-76(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81106d0c:	012044b4 	movhi	r4,33042
81106d10:	213a4a04 	addi	r4,r4,-5848
81106d14:	110d0f80 	call	8110d0f8 <puts>
      return bSuccess;
81106d18:	e0bfed17 	ldw	r2,-76(fp)
81106d1c:	0000db06 	br	8110708c <DDR2_MEMORY_WRITE_TEST+0x408>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81106d20:	e0bfe617 	ldw	r2,-104(fp)
81106d24:	1004d53a 	srli	r2,r2,20
81106d28:	100b883a 	mov	r5,r2
81106d2c:	012044b4 	movhi	r4,33042
81106d30:	213c4404 	addi	r4,r4,-3824
81106d34:	110cfdc0 	call	8110cfdc <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes;
  
  int nItemNum, nPos;
  const int my_data_size = sizeof(my_data);
81106d38:	00800104 	movi	r2,4
81106d3c:	e0bfee15 	stw	r2,-72(fp)
  int nProgressIndex = 0;
81106d40:	e03fec15 	stw	zero,-80(fp)
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81106d44:	e03fef15 	stw	zero,-68(fp)
  
  for(i = 0; i < 10; i++){
81106d48:	e03fe715 	stw	zero,-100(fp)
81106d4c:	00001506 	br	81106da4 <DDR2_MEMORY_WRITE_TEST+0x120>
    szProgress[i] = ByteLen/10*(i+1);
81106d50:	e0ffe617 	ldw	r3,-104(fp)
81106d54:	00b33374 	movhi	r2,52429
81106d58:	10b33344 	addi	r2,r2,-13107
81106d5c:	1888383a 	mulxuu	r4,r3,r2
81106d60:	1885383a 	mul	r2,r3,r2
81106d64:	1021883a 	mov	r16,r2
81106d68:	2023883a 	mov	r17,r4
81106d6c:	8804d0fa 	srli	r2,r17,3
81106d70:	e0ffe717 	ldw	r3,-100(fp)
81106d74:	18c00044 	addi	r3,r3,1
81106d78:	10c7383a 	mul	r3,r2,r3
81106d7c:	e0bfe717 	ldw	r2,-100(fp)
81106d80:	1085883a 	add	r2,r2,r2
81106d84:	1085883a 	add	r2,r2,r2
81106d88:	e13fe504 	addi	r4,fp,-108
81106d8c:	2085883a 	add	r2,r4,r2
81106d90:	10800e04 	addi	r2,r2,56
81106d94:	10c00015 	stw	r3,0(r2)
  int nProgressIndex = 0;
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
  
  for(i = 0; i < 10; i++){
81106d98:	e0bfe717 	ldw	r2,-100(fp)
81106d9c:	10800044 	addi	r2,r2,1
81106da0:	e0bfe715 	stw	r2,-100(fp)
81106da4:	e0bfe717 	ldw	r2,-100(fp)
81106da8:	10800290 	cmplti	r2,r2,10
81106dac:	103fe81e 	bne	r2,zero,81106d50 <__reset+0xfb0e6d50>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81106db0:	d0a04917 	ldw	r2,-32476(gp)
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
81106db4:	e0bff015 	stw	r2,-64(fp)
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81106db8:	00804004 	movi	r2,256
81106dbc:	e0bfea15 	stw	r2,-88(fp)
  for(i = 0; i < nItemNum; i++){
81106dc0:	e03fe715 	stw	zero,-100(fp)
81106dc4:	00001e06 	br	81106e40 <DDR2_MEMORY_WRITE_TEST+0x1bc>
    if (i == 0) {
81106dc8:	e0bfe717 	ldw	r2,-100(fp)
81106dcc:	1000091e 	bne	r2,zero,81106df4 <DDR2_MEMORY_WRITE_TEST+0x170>
      szData[i] = InitValue;
81106dd0:	00a044b4 	movhi	r2,33042
81106dd4:	10877e04 	addi	r2,r2,7672
81106dd8:	e0ffe717 	ldw	r3,-100(fp)
81106ddc:	18c7883a 	add	r3,r3,r3
81106de0:	18c7883a 	add	r3,r3,r3
81106de4:	10c5883a 	add	r2,r2,r3
81106de8:	e0fff017 	ldw	r3,-64(fp)
81106dec:	10c00015 	stw	r3,0(r2)
81106df0:	00001006 	br	81106e34 <DDR2_MEMORY_WRITE_TEST+0x1b0>
    } else {
      szData[i] = szData[i-1] * 13;
81106df4:	e0bfe717 	ldw	r2,-100(fp)
81106df8:	10ffffc4 	addi	r3,r2,-1
81106dfc:	00a044b4 	movhi	r2,33042
81106e00:	10877e04 	addi	r2,r2,7672
81106e04:	18c7883a 	add	r3,r3,r3
81106e08:	18c7883a 	add	r3,r3,r3
81106e0c:	10c5883a 	add	r2,r2,r3
81106e10:	10800017 	ldw	r2,0(r2)
81106e14:	11000364 	muli	r4,r2,13
81106e18:	00a044b4 	movhi	r2,33042
81106e1c:	10877e04 	addi	r2,r2,7672
81106e20:	e0ffe717 	ldw	r3,-100(fp)
81106e24:	18c7883a 	add	r3,r3,r3
81106e28:	18c7883a 	add	r3,r3,r3
81106e2c:	10c5883a 	add	r2,r2,r3
81106e30:	11000015 	stw	r4,0(r2)
  for(i = 0; i < 10; i++){
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
  nItemNum = sizeof(szData)/sizeof(szData[0]);
  for(i = 0; i < nItemNum; i++){
81106e34:	e0bfe717 	ldw	r2,-100(fp)
81106e38:	10800044 	addi	r2,r2,1
81106e3c:	e0bfe715 	stw	r2,-100(fp)
81106e40:	e0ffe717 	ldw	r3,-100(fp)
81106e44:	e0bfea17 	ldw	r2,-88(fp)
81106e48:	18bfdf16 	blt	r3,r2,81106dc8 <__reset+0xfb0e6dc8>
      szData[i] = InitValue;
    } else {
      szData[i] = szData[i-1] * 13;
    }
  }
  szData[nItemNum-1] = 0xAAAAAAAA;
81106e4c:	e0bfea17 	ldw	r2,-88(fp)
81106e50:	10ffffc4 	addi	r3,r2,-1
81106e54:	00a044b4 	movhi	r2,33042
81106e58:	10877e04 	addi	r2,r2,7672
81106e5c:	18c7883a 	add	r3,r3,r3
81106e60:	18c7883a 	add	r3,r3,r3
81106e64:	10c7883a 	add	r3,r2,r3
81106e68:	00aaaaf4 	movhi	r2,43691
81106e6c:	10aaaa84 	addi	r2,r2,-21846
81106e70:	18800015 	stw	r2,0(r3)
  szData[nItemNum-2] = 0x55555555;
81106e74:	e0bfea17 	ldw	r2,-88(fp)
81106e78:	10ffff84 	addi	r3,r2,-2
81106e7c:	00a044b4 	movhi	r2,33042
81106e80:	10877e04 	addi	r2,r2,7672
81106e84:	18c7883a 	add	r3,r3,r3
81106e88:	18c7883a 	add	r3,r3,r3
81106e8c:	10c7883a 	add	r3,r2,r3
81106e90:	00955574 	movhi	r2,21845
81106e94:	10955544 	addi	r2,r2,21845
81106e98:	18800015 	stw	r2,0(r3)
  szData[nItemNum-3] = 0x00000000;
81106e9c:	e0bfea17 	ldw	r2,-88(fp)
81106ea0:	10ffff44 	addi	r3,r2,-3
81106ea4:	00a044b4 	movhi	r2,33042
81106ea8:	10877e04 	addi	r2,r2,7672
81106eac:	18c7883a 	add	r3,r3,r3
81106eb0:	18c7883a 	add	r3,r3,r3
81106eb4:	10c5883a 	add	r2,r2,r3
81106eb8:	10000015 	stw	zero,0(r2)
  szData[nItemNum-4] = 0xFFFFFFFF;
81106ebc:	e0bfea17 	ldw	r2,-88(fp)
81106ec0:	10ffff04 	addi	r3,r2,-4
81106ec4:	00a044b4 	movhi	r2,33042
81106ec8:	10877e04 	addi	r2,r2,7672
81106ecc:	18c7883a 	add	r3,r3,r3
81106ed0:	18c7883a 	add	r3,r3,r3
81106ed4:	10c5883a 	add	r2,r2,r3
81106ed8:	00ffffc4 	movi	r3,-1
81106edc:	10c00015 	stw	r3,0(r2)

  printf("Writing data...\n");
81106ee0:	012044b4 	movhi	r4,33042
81106ee4:	213c4a04 	addi	r4,r4,-3800
81106ee8:	110d0f80 	call	8110d0f8 <puts>
81106eec:	d0a04917 	ldw	r2,-32476(gp)
  TimeStart = alt_nticks();
81106ef0:	e0bff115 	stw	r2,-60(fp)
  pDes = (my_data *)Ddr2Base;
81106ef4:	e0bfe517 	ldw	r2,-108(fp)
81106ef8:	e0bfe915 	stw	r2,-92(fp)
  nAccessLen = sizeof(szData);
81106efc:	00810004 	movi	r2,1024
81106f00:	e0bfe815 	stw	r2,-96(fp)
  nItemNum = nAccessLen / my_data_size;
81106f04:	e0ffe817 	ldw	r3,-96(fp)
81106f08:	e0bfee17 	ldw	r2,-72(fp)
81106f0c:	1885283a 	div	r2,r3,r2
81106f10:	e0bfea15 	stw	r2,-88(fp)
  nPos = 0;
81106f14:	e03feb15 	stw	zero,-84(fp)
  while(nPos < ByteLen){
81106f18:	00003306 	br	81106fe8 <DDR2_MEMORY_WRITE_TEST+0x364>
    nRemainedLen = ByteLen - nPos;
81106f1c:	e0bfeb17 	ldw	r2,-84(fp)
81106f20:	e0ffe617 	ldw	r3,-104(fp)
81106f24:	1885c83a 	sub	r2,r3,r2
81106f28:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
81106f2c:	e0bfe817 	ldw	r2,-96(fp)
81106f30:	e0fff217 	ldw	r3,-56(fp)
81106f34:	1880060e 	bge	r3,r2,81106f50 <DDR2_MEMORY_WRITE_TEST+0x2cc>
      nAccessLen = nRemainedLen;
81106f38:	e0bff217 	ldw	r2,-56(fp)
81106f3c:	e0bfe815 	stw	r2,-96(fp)
      nItemNum = nAccessLen / my_data_size;
81106f40:	e0ffe817 	ldw	r3,-96(fp)
81106f44:	e0bfee17 	ldw	r2,-72(fp)
81106f48:	1885283a 	div	r2,r3,r2
81106f4c:	e0bfea15 	stw	r2,-88(fp)
    }
    memcpy(pDes, szData, nAccessLen);
81106f50:	e0bfe817 	ldw	r2,-96(fp)
81106f54:	100d883a 	mov	r6,r2
81106f58:	016044b4 	movhi	r5,33042
81106f5c:	29477e04 	addi	r5,r5,7672
81106f60:	e13fe917 	ldw	r4,-92(fp)
81106f64:	110ce640 	call	8110ce64 <memcpy>
    pDes += nItemNum;
81106f68:	e0bfea17 	ldw	r2,-88(fp)
81106f6c:	1085883a 	add	r2,r2,r2
81106f70:	1085883a 	add	r2,r2,r2
81106f74:	1007883a 	mov	r3,r2
81106f78:	e0bfe917 	ldw	r2,-92(fp)
81106f7c:	10c5883a 	add	r2,r2,r3
81106f80:	e0bfe915 	stw	r2,-92(fp)
    nPos += nAccessLen;
81106f84:	e0ffeb17 	ldw	r3,-84(fp)
81106f88:	e0bfe817 	ldw	r2,-96(fp)
81106f8c:	1885883a 	add	r2,r3,r2
81106f90:	e0bfeb15 	stw	r2,-84(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
81106f94:	e0bfec17 	ldw	r2,-80(fp)
81106f98:	10800288 	cmpgei	r2,r2,10
81106f9c:	1000121e 	bne	r2,zero,81106fe8 <DDR2_MEMORY_WRITE_TEST+0x364>
81106fa0:	e0bfec17 	ldw	r2,-80(fp)
81106fa4:	1085883a 	add	r2,r2,r2
81106fa8:	1085883a 	add	r2,r2,r2
81106fac:	e0ffe504 	addi	r3,fp,-108
81106fb0:	1885883a 	add	r2,r3,r2
81106fb4:	10800e04 	addi	r2,r2,56
81106fb8:	10800017 	ldw	r2,0(r2)
81106fbc:	e0ffeb17 	ldw	r3,-84(fp)
81106fc0:	18800936 	bltu	r3,r2,81106fe8 <DDR2_MEMORY_WRITE_TEST+0x364>
      nProgressIndex++;
81106fc4:	e0bfec17 	ldw	r2,-80(fp)
81106fc8:	10800044 	addi	r2,r2,1
81106fcc:	e0bfec15 	stw	r2,-80(fp)
      printf("%02d%% ", nProgressIndex*10);
81106fd0:	e0bfec17 	ldw	r2,-80(fp)
81106fd4:	108002a4 	muli	r2,r2,10
81106fd8:	100b883a 	mov	r5,r2
81106fdc:	012044b4 	movhi	r4,33042
81106fe0:	213c4e04 	addi	r4,r4,-3784
81106fe4:	110cfdc0 	call	8110cfdc <printf>
  TimeStart = alt_nticks();
  pDes = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(nPos < ByteLen){
81106fe8:	e0ffeb17 	ldw	r3,-84(fp)
81106fec:	e0bfe617 	ldw	r2,-104(fp)
81106ff0:	18bfca36 	bltu	r3,r2,81106f1c <__reset+0xfb0e6f1c>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  alt_dcache_flush_all();
81106ff4:	111963c0 	call	8111963c <alt_dcache_flush_all>
  printf("\n");
81106ff8:	01000284 	movi	r4,10
81106ffc:	110d0200 	call	8110d020 <putchar>
81107000:	d0e04917 	ldw	r3,-32476(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81107004:	e0bff117 	ldw	r2,-60(fp)
81107008:	1885c83a 	sub	r2,r3,r2
8110700c:	e0bfef15 	stw	r2,-68(fp)
  if (bSuccess){
81107010:	e0bfed17 	ldw	r2,-76(fp)
81107014:	10001726 	beq	r2,zero,81107074 <DDR2_MEMORY_WRITE_TEST+0x3f0>
    printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81107018:	e13fef17 	ldw	r4,-68(fp)
8110701c:	110c1240 	call	8110c124 <__floatsisf>
81107020:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81107024:	d0a04817 	ldw	r2,-32480(gp)
81107028:	1009883a 	mov	r4,r2
8110702c:	110c2480 	call	8110c248 <__floatunsisf>
81107030:	1007883a 	mov	r3,r2
81107034:	180b883a 	mov	r5,r3
81107038:	8009883a 	mov	r4,r16
8110703c:	110b8e80 	call	8110b8e8 <__divsf3>
81107040:	1007883a 	mov	r3,r2
81107044:	1805883a 	mov	r2,r3
81107048:	1009883a 	mov	r4,r2
8110704c:	110ca500 	call	8110ca50 <__extendsfdf2>
81107050:	1009883a 	mov	r4,r2
81107054:	180b883a 	mov	r5,r3
81107058:	200d883a 	mov	r6,r4
8110705c:	280f883a 	mov	r7,r5
81107060:	e17fe617 	ldw	r5,-104(fp)
81107064:	012044b4 	movhi	r4,33042
81107068:	213c5004 	addi	r4,r4,-3776
8110706c:	110cfdc0 	call	8110cfdc <printf>
81107070:	00000306 	br	81107080 <DDR2_MEMORY_WRITE_TEST+0x3fc>
  } else {
    printf("DDR2 write test fail\n");
81107074:	012044b4 	movhi	r4,33042
81107078:	213c5c04 	addi	r4,r4,-3728
8110707c:	110d0f80 	call	8110d0f8 <puts>
  }
  printf("\n");
81107080:	01000284 	movi	r4,10
81107084:	110d0200 	call	8110d020 <putchar>

  return bSuccess;
81107088:	e0bfed17 	ldw	r2,-76(fp)
}
8110708c:	e6fffe04 	addi	sp,fp,-8
81107090:	dfc00317 	ldw	ra,12(sp)
81107094:	df000217 	ldw	fp,8(sp)
81107098:	dc400117 	ldw	r17,4(sp)
8110709c:	dc000017 	ldw	r16,0(sp)
811070a0:	dec00404 	addi	sp,sp,16
811070a4:	f800283a 	ret

811070a8 <DDR2_MEMORY_READ_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_READ_TEST(alt_u8 MemoryId){
811070a8:	deffe304 	addi	sp,sp,-116
811070ac:	dfc01c15 	stw	ra,112(sp)
811070b0:	df001b15 	stw	fp,108(sp)
811070b4:	dc401a15 	stw	r17,104(sp)
811070b8:	dc001915 	stw	r16,100(sp)
811070bc:	df001b04 	addi	fp,sp,108
811070c0:	2005883a 	mov	r2,r4
811070c4:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Read Test =====\n");
811070c8:	012044b4 	movhi	r4,33042
811070cc:	213c6204 	addi	r4,r4,-3704
811070d0:	110d0f80 	call	8110d0f8 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
811070d4:	00800044 	movi	r2,1
811070d8:	e0bfe515 	stw	r2,-108(fp)
  switch (MemoryId) {
811070dc:	e0bffd03 	ldbu	r2,-12(fp)
811070e0:	10c00060 	cmpeqi	r3,r2,1
811070e4:	1800031e 	bne	r3,zero,811070f4 <DDR2_MEMORY_READ_TEST+0x4c>
811070e8:	108000a0 	cmpeqi	r2,r2,2
811070ec:	1000081e 	bne	r2,zero,81107110 <DDR2_MEMORY_READ_TEST+0x68>
811070f0:	00000e06 	br	8110712c <DDR2_MEMORY_READ_TEST+0x84>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
811070f4:	e0bffd03 	ldbu	r2,-12(fp)
811070f8:	1009883a 	mov	r4,r2
811070fc:	1106bfc0 	call	81106bfc <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81107100:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81107104:	00a00034 	movhi	r2,32768
81107108:	e0bfe715 	stw	r2,-100(fp)
    break;
8110710c:	00000d06 	br	81107144 <DDR2_MEMORY_READ_TEST+0x9c>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81107110:	e0bffd03 	ldbu	r2,-12(fp)
81107114:	1009883a 	mov	r4,r2
81107118:	1106bfc0 	call	81106bfc <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
8110711c:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81107120:	00a00034 	movhi	r2,32768
81107124:	e0bfe715 	stw	r2,-100(fp)
    break;
81107128:	00000606 	br	81107144 <DDR2_MEMORY_READ_TEST+0x9c>
    default:
      bSuccess = FALSE;
8110712c:	e03fe515 	stw	zero,-108(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81107130:	012044b4 	movhi	r4,33042
81107134:	213a4a04 	addi	r4,r4,-5848
81107138:	110d0f80 	call	8110d0f8 <puts>
      return bSuccess;
8110713c:	e0bfe517 	ldw	r2,-108(fp)
81107140:	0000b806 	br	81107424 <DDR2_MEMORY_READ_TEST+0x37c>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81107144:	e0bfe717 	ldw	r2,-100(fp)
81107148:	1004d53a 	srli	r2,r2,20
8110714c:	100b883a 	mov	r5,r2
81107150:	012044b4 	movhi	r4,33042
81107154:	213c4404 	addi	r4,r4,-3824
81107158:	110cfdc0 	call	8110cfdc <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes, *pSrc;
  int nItemNum, nPos;
  nItemNum = sizeof(szData)/sizeof(szData[0]);
8110715c:	00804004 	movi	r2,256
81107160:	e0bfec15 	stw	r2,-80(fp)
  const int my_data_size = sizeof(my_data);
81107164:	00800104 	movi	r2,4
81107168:	e0bfef15 	stw	r2,-68(fp)
  nAccessLen = nItemNum * my_data_size;
8110716c:	e0ffec17 	ldw	r3,-80(fp)
81107170:	e0bfef17 	ldw	r2,-68(fp)
81107174:	1885383a 	mul	r2,r3,r2
81107178:	e0bfe915 	stw	r2,-92(fp)
  int nProgressIndex = 0;
8110717c:	e03fee15 	stw	zero,-72(fp)
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81107180:	e03ff015 	stw	zero,-64(fp)

  for(i=0;i<10;i++){
81107184:	e03fe815 	stw	zero,-96(fp)
81107188:	00001506 	br	811071e0 <DDR2_MEMORY_READ_TEST+0x138>
    szProgress[i] = ByteLen/10*(i+1);
8110718c:	e0ffe717 	ldw	r3,-100(fp)
81107190:	00b33374 	movhi	r2,52429
81107194:	10b33344 	addi	r2,r2,-13107
81107198:	1888383a 	mulxuu	r4,r3,r2
8110719c:	1885383a 	mul	r2,r3,r2
811071a0:	1021883a 	mov	r16,r2
811071a4:	2023883a 	mov	r17,r4
811071a8:	8804d0fa 	srli	r2,r17,3
811071ac:	e0ffe817 	ldw	r3,-96(fp)
811071b0:	18c00044 	addi	r3,r3,1
811071b4:	10c7383a 	mul	r3,r2,r3
811071b8:	e0bfe817 	ldw	r2,-96(fp)
811071bc:	1085883a 	add	r2,r2,r2
811071c0:	1085883a 	add	r2,r2,r2
811071c4:	e13fe504 	addi	r4,fp,-108
811071c8:	2085883a 	add	r2,r4,r2
811071cc:	10800e04 	addi	r2,r2,56
811071d0:	10c00015 	stw	r3,0(r2)
  nAccessLen = nItemNum * my_data_size;
  int nProgressIndex = 0;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;

  for(i=0;i<10;i++){
811071d4:	e0bfe817 	ldw	r2,-96(fp)
811071d8:	10800044 	addi	r2,r2,1
811071dc:	e0bfe815 	stw	r2,-96(fp)
811071e0:	e0bfe817 	ldw	r2,-96(fp)
811071e4:	10800290 	cmplti	r2,r2,10
811071e8:	103fe81e 	bne	r2,zero,8110718c <__reset+0xfb0e718c>
    szProgress[i] = ByteLen/10*(i+1);
  }

  nProgressIndex = 0;
811071ec:	e03fee15 	stw	zero,-72(fp)
  printf("Reading/Verifying Data...\n");
811071f0:	012044b4 	movhi	r4,33042
811071f4:	213c6c04 	addi	r4,r4,-3664
811071f8:	110d0f80 	call	8110d0f8 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811071fc:	d0a04917 	ldw	r2,-32476(gp)
  TimeStart = alt_nticks();
81107200:	e0bff115 	stw	r2,-60(fp)

  pSrc = (my_data *)Ddr2Base;
81107204:	e0bfe617 	ldw	r2,-104(fp)
81107208:	e0bfeb15 	stw	r2,-84(fp)
  nAccessLen = sizeof(szData);
8110720c:	00810004 	movi	r2,1024
81107210:	e0bfe915 	stw	r2,-92(fp)
  nItemNum = nAccessLen / my_data_size;
81107214:	e0ffe917 	ldw	r3,-92(fp)
81107218:	e0bfef17 	ldw	r2,-68(fp)
8110721c:	1885283a 	div	r2,r3,r2
81107220:	e0bfec15 	stw	r2,-80(fp)
  nPos = 0;
81107224:	e03fed15 	stw	zero,-76(fp)
  while(bSuccess && nPos < ByteLen){
81107228:	00005406 	br	8110737c <DDR2_MEMORY_READ_TEST+0x2d4>
    nRemainedLen = ByteLen - nPos;
8110722c:	e0bfed17 	ldw	r2,-76(fp)
81107230:	e0ffe717 	ldw	r3,-100(fp)
81107234:	1885c83a 	sub	r2,r3,r2
81107238:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
8110723c:	e0bfe917 	ldw	r2,-92(fp)
81107240:	e0fff217 	ldw	r3,-56(fp)
81107244:	1880060e 	bge	r3,r2,81107260 <DDR2_MEMORY_READ_TEST+0x1b8>
      nAccessLen = nRemainedLen;
81107248:	e0bff217 	ldw	r2,-56(fp)
8110724c:	e0bfe915 	stw	r2,-92(fp)
      nItemNum = nAccessLen / my_data_size;
81107250:	e0ffe917 	ldw	r3,-92(fp)
81107254:	e0bfef17 	ldw	r2,-68(fp)
81107258:	1885283a 	div	r2,r3,r2
8110725c:	e0bfec15 	stw	r2,-80(fp)
    }
    pDes = szData;
81107260:	00a044b4 	movhi	r2,33042
81107264:	10877e04 	addi	r2,r2,7672
81107268:	e0bfea15 	stw	r2,-88(fp)
    for(i=0 ; i < nItemNum && bSuccess; i++){
8110726c:	e03fe815 	stw	zero,-96(fp)
81107270:	00002406 	br	81107304 <DDR2_MEMORY_READ_TEST+0x25c>
      if (*pSrc++ != *pDes++){
81107274:	e0bfeb17 	ldw	r2,-84(fp)
81107278:	10c00104 	addi	r3,r2,4
8110727c:	e0ffeb15 	stw	r3,-84(fp)
81107280:	10c00017 	ldw	r3,0(r2)
81107284:	e0bfea17 	ldw	r2,-88(fp)
81107288:	11000104 	addi	r4,r2,4
8110728c:	e13fea15 	stw	r4,-88(fp)
81107290:	10800017 	ldw	r2,0(r2)
81107294:	18801826 	beq	r3,r2,811072f8 <DDR2_MEMORY_READ_TEST+0x250>
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
81107298:	e0bfeb17 	ldw	r2,-84(fp)
8110729c:	10bfff04 	addi	r2,r2,-4
811072a0:	10800017 	ldw	r2,0(r2)
811072a4:	1009883a 	mov	r4,r2
811072a8:	00a044b4 	movhi	r2,33042
811072ac:	10877e04 	addi	r2,r2,7672
811072b0:	e0ffe817 	ldw	r3,-96(fp)
811072b4:	18c7883a 	add	r3,r3,r3
811072b8:	18c7883a 	add	r3,r3,r3
811072bc:	10c5883a 	add	r2,r2,r3
811072c0:	10800017 	ldw	r2,0(r2)
811072c4:	100b883a 	mov	r5,r2
811072c8:	e0ffed17 	ldw	r3,-76(fp)
811072cc:	e0bfef17 	ldw	r2,-68(fp)
811072d0:	1887283a 	div	r3,r3,r2
811072d4:	e0bfe817 	ldw	r2,-96(fp)
811072d8:	1885883a 	add	r2,r3,r2
811072dc:	100f883a 	mov	r7,r2
811072e0:	280d883a 	mov	r6,r5
811072e4:	200b883a 	mov	r5,r4
811072e8:	012044b4 	movhi	r4,33042
811072ec:	213c7304 	addi	r4,r4,-3636
811072f0:	110cfdc0 	call	8110cfdc <printf>
        bSuccess = FALSE;
811072f4:	e03fe515 	stw	zero,-108(fp)
    if (nAccessLen > nRemainedLen){
      nAccessLen = nRemainedLen;
      nItemNum = nAccessLen / my_data_size;
    }
    pDes = szData;
    for(i=0 ; i < nItemNum && bSuccess; i++){
811072f8:	e0bfe817 	ldw	r2,-96(fp)
811072fc:	10800044 	addi	r2,r2,1
81107300:	e0bfe815 	stw	r2,-96(fp)
81107304:	e0ffe817 	ldw	r3,-96(fp)
81107308:	e0bfec17 	ldw	r2,-80(fp)
8110730c:	1880020e 	bge	r3,r2,81107318 <DDR2_MEMORY_READ_TEST+0x270>
81107310:	e0bfe517 	ldw	r2,-108(fp)
81107314:	103fd71e 	bne	r2,zero,81107274 <__reset+0xfb0e7274>
      if (*pSrc++ != *pDes++){
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
        bSuccess = FALSE;
      }
    }
    nPos += nAccessLen;
81107318:	e0ffed17 	ldw	r3,-76(fp)
8110731c:	e0bfe917 	ldw	r2,-92(fp)
81107320:	1885883a 	add	r2,r3,r2
81107324:	e0bfed15 	stw	r2,-76(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
81107328:	e0bfee17 	ldw	r2,-72(fp)
8110732c:	10800288 	cmpgei	r2,r2,10
81107330:	1000121e 	bne	r2,zero,8110737c <DDR2_MEMORY_READ_TEST+0x2d4>
81107334:	e0bfee17 	ldw	r2,-72(fp)
81107338:	1085883a 	add	r2,r2,r2
8110733c:	1085883a 	add	r2,r2,r2
81107340:	e0ffe504 	addi	r3,fp,-108
81107344:	1885883a 	add	r2,r3,r2
81107348:	10800e04 	addi	r2,r2,56
8110734c:	10800017 	ldw	r2,0(r2)
81107350:	e0ffed17 	ldw	r3,-76(fp)
81107354:	18800936 	bltu	r3,r2,8110737c <DDR2_MEMORY_READ_TEST+0x2d4>
      nProgressIndex++;
81107358:	e0bfee17 	ldw	r2,-72(fp)
8110735c:	10800044 	addi	r2,r2,1
81107360:	e0bfee15 	stw	r2,-72(fp)
      printf("%02d%% ", nProgressIndex*10);
81107364:	e0bfee17 	ldw	r2,-72(fp)
81107368:	108002a4 	muli	r2,r2,10
8110736c:	100b883a 	mov	r5,r2
81107370:	012044b4 	movhi	r4,33042
81107374:	213c4e04 	addi	r4,r4,-3784
81107378:	110cfdc0 	call	8110cfdc <printf>

  pSrc = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(bSuccess && nPos < ByteLen){
8110737c:	e0bfe517 	ldw	r2,-108(fp)
81107380:	10000326 	beq	r2,zero,81107390 <DDR2_MEMORY_READ_TEST+0x2e8>
81107384:	e0ffed17 	ldw	r3,-76(fp)
81107388:	e0bfe717 	ldw	r2,-100(fp)
8110738c:	18bfa736 	bltu	r3,r2,8110722c <__reset+0xfb0e722c>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  printf("\n");
81107390:	01000284 	movi	r4,10
81107394:	110d0200 	call	8110d020 <putchar>
81107398:	d0e04917 	ldw	r3,-32476(gp)

  TimeElapsed = alt_nticks() - TimeStart;
8110739c:	e0bff117 	ldw	r2,-60(fp)
811073a0:	1885c83a 	sub	r2,r3,r2
811073a4:	e0bff015 	stw	r2,-64(fp)
  if (bSuccess){
811073a8:	e0bfe517 	ldw	r2,-108(fp)
811073ac:	10001726 	beq	r2,zero,8110740c <DDR2_MEMORY_READ_TEST+0x364>
    printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
811073b0:	e13ff017 	ldw	r4,-64(fp)
811073b4:	110c1240 	call	8110c124 <__floatsisf>
811073b8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811073bc:	d0a04817 	ldw	r2,-32480(gp)
811073c0:	1009883a 	mov	r4,r2
811073c4:	110c2480 	call	8110c248 <__floatunsisf>
811073c8:	1007883a 	mov	r3,r2
811073cc:	180b883a 	mov	r5,r3
811073d0:	8009883a 	mov	r4,r16
811073d4:	110b8e80 	call	8110b8e8 <__divsf3>
811073d8:	1007883a 	mov	r3,r2
811073dc:	1805883a 	mov	r2,r3
811073e0:	1009883a 	mov	r4,r2
811073e4:	110ca500 	call	8110ca50 <__extendsfdf2>
811073e8:	1009883a 	mov	r4,r2
811073ec:	180b883a 	mov	r5,r3
811073f0:	200d883a 	mov	r6,r4
811073f4:	280f883a 	mov	r7,r5
811073f8:	e17fe717 	ldw	r5,-100(fp)
811073fc:	012044b4 	movhi	r4,33042
81107400:	213c8104 	addi	r4,r4,-3580
81107404:	110cfdc0 	call	8110cfdc <printf>
81107408:	00000306 	br	81107418 <DDR2_MEMORY_READ_TEST+0x370>
  } else {
    printf("DDR2 read test fail\n");
8110740c:	012044b4 	movhi	r4,33042
81107410:	213c8d04 	addi	r4,r4,-3532
81107414:	110d0f80 	call	8110d0f8 <puts>
  }
  printf("\n");
81107418:	01000284 	movi	r4,10
8110741c:	110d0200 	call	8110d020 <putchar>

  return bSuccess;
81107420:	e0bfe517 	ldw	r2,-108(fp)
}
81107424:	e6fffe04 	addi	sp,fp,-8
81107428:	dfc00317 	ldw	ra,12(sp)
8110742c:	df000217 	ldw	fp,8(sp)
81107430:	dc400117 	ldw	r17,4(sp)
81107434:	dc000017 	ldw	r16,0(sp)
81107438:	dec00404 	addi	sp,sp,16
8110743c:	f800283a 	ret

81107440 <DDR2_MEMORY_RANDOM_WRITE_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_WRITE_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
81107440:	deffed04 	addi	sp,sp,-76
81107444:	dfc01215 	stw	ra,72(sp)
81107448:	df001115 	stw	fp,68(sp)
8110744c:	dcc01015 	stw	r19,64(sp)
81107450:	dc800f15 	stw	r18,60(sp)
81107454:	dc400e15 	stw	r17,56(sp)
81107458:	dc000d15 	stw	r16,52(sp)
8110745c:	df001104 	addi	fp,sp,68
81107460:	2005883a 	mov	r2,r4
81107464:	e17ffa15 	stw	r5,-24(fp)
81107468:	e1bffb15 	stw	r6,-20(fp)
8110746c:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Write Test =====\n");
81107470:	012044b4 	movhi	r4,33042
81107474:	213c9204 	addi	r4,r4,-3512
81107478:	110d0f80 	call	8110d0f8 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
8110747c:	00800044 	movi	r2,1
81107480:	e0bff415 	stw	r2,-48(fp)
  switch (MemoryId) {
81107484:	e0bff903 	ldbu	r2,-28(fp)
81107488:	10c00060 	cmpeqi	r3,r2,1
8110748c:	1800031e 	bne	r3,zero,8110749c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x5c>
81107490:	108000a0 	cmpeqi	r2,r2,2
81107494:	1000081e 	bne	r2,zero,811074b8 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x78>
81107498:	00000e06 	br	811074d4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x94>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
8110749c:	e0bff903 	ldbu	r2,-28(fp)
811074a0:	1009883a 	mov	r4,r2
811074a4:	1106bfc0 	call	81106bfc <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
811074a8:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
811074ac:	00a00034 	movhi	r2,32768
811074b0:	e0bff015 	stw	r2,-64(fp)
    break;
811074b4:	00000d06 	br	811074ec <DDR2_MEMORY_RANDOM_WRITE_TEST+0xac>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
811074b8:	e0bff903 	ldbu	r2,-28(fp)
811074bc:	1009883a 	mov	r4,r2
811074c0:	1106bfc0 	call	81106bfc <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
811074c4:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
811074c8:	00a00034 	movhi	r2,32768
811074cc:	e0bff015 	stw	r2,-64(fp)
    break;
811074d0:	00000606 	br	811074ec <DDR2_MEMORY_RANDOM_WRITE_TEST+0xac>
    default:
      bSuccess = FALSE;
811074d4:	e03ff415 	stw	zero,-48(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
811074d8:	012044b4 	movhi	r4,33042
811074dc:	213a4a04 	addi	r4,r4,-5848
811074e0:	110d0f80 	call	8110d0f8 <puts>
      return bSuccess;
811074e4:	e0bff417 	ldw	r2,-48(fp)
811074e8:	00008406 	br	811076fc <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2bc>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
811074ec:	e0bff017 	ldw	r2,-64(fp)
811074f0:	1004d53a 	srli	r2,r2,20
811074f4:	100b883a 	mov	r5,r2
811074f8:	012044b4 	movhi	r4,33042
811074fc:	213c4404 	addi	r4,r4,-3824
81107500:	110cfdc0 	call	8110cfdc <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81107504:	d0a04917 	ldw	r2,-32476(gp)
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  InitialState = alt_nticks();
81107508:	d0a03c15 	stw	r2,-32528(gp)
  CurrentState = InitialState;
8110750c:	d0a03c17 	ldw	r2,-32528(gp)
81107510:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
81107514:	e0ffef17 	ldw	r3,-68(fp)
81107518:	e0bff017 	ldw	r2,-64(fp)
8110751c:	1885883a 	add	r2,r3,r2
81107520:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
81107524:	e0fff017 	ldw	r3,-64(fp)
81107528:	00b33374 	movhi	r2,52429
8110752c:	10b33344 	addi	r2,r2,-13107
81107530:	1888383a 	mulxuu	r4,r3,r2
81107534:	1885383a 	mul	r2,r3,r2
81107538:	1025883a 	mov	r18,r2
8110753c:	2027883a 	mov	r19,r4
81107540:	9806d13a 	srli	r3,r19,4
81107544:	e0bfef17 	ldw	r2,-68(fp)
81107548:	1885883a 	add	r2,r3,r2
8110754c:	e0bff215 	stw	r2,-56(fp)
  Percentage = 5;
81107550:	00800144 	movi	r2,5
81107554:	e0bff305 	stb	r2,-52(fp)
  printf("Writing to memory...\n");
81107558:	012044b4 	movhi	r4,33042
8110755c:	213c9e04 	addi	r4,r4,-3464
81107560:	110d0f80 	call	8110d0f8 <puts>
  if (bVerbose == DDR2_VERBOSE) {
81107564:	e0bffa17 	ldw	r2,-24(fp)
81107568:	10800058 	cmpnei	r2,r2,1
8110756c:	1000031e 	bne	r2,zero,8110757c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x13c>
    printf("00%%..");
81107570:	012044b4 	movhi	r4,33042
81107574:	213ca404 	addi	r4,r4,-3440
81107578:	110cfdc0 	call	8110cfdc <printf>
  }
  int TimeStart, TimeElapsed = 0;
8110757c:	e03ff615 	stw	zero,-40(fp)
81107580:	d0a04917 	ldw	r2,-32476(gp)

  TimeStart = alt_nticks();
81107584:	e0bff715 	stw	r2,-36(fp)
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
81107588:	e0bfef17 	ldw	r2,-68(fp)
8110758c:	e0bff115 	stw	r2,-60(fp)
81107590:	00002506 	br	81107628 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1e8>
    *pDestination = xorshift32(&CurrentState);
81107594:	e0bff804 	addi	r2,fp,-32
81107598:	1009883a 	mov	r4,r2
8110759c:	11079f00 	call	811079f0 <xorshift32>
811075a0:	1007883a 	mov	r3,r2
811075a4:	e0bff117 	ldw	r2,-60(fp)
811075a8:	10c00015 	stw	r3,0(r2)
    if ((bVerbose == DDR2_VERBOSE) & ((alt_u32)pDestination > NextMilestone)){
811075ac:	e0bffa17 	ldw	r2,-24(fp)
811075b0:	10800060 	cmpeqi	r2,r2,1
811075b4:	1009883a 	mov	r4,r2
811075b8:	e0bff117 	ldw	r2,-60(fp)
811075bc:	e0fff217 	ldw	r3,-56(fp)
811075c0:	1885803a 	cmpltu	r2,r3,r2
811075c4:	2084703a 	and	r2,r4,r2
811075c8:	10803fcc 	andi	r2,r2,255
811075cc:	10001326 	beq	r2,zero,8110761c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1dc>
      printf("..%02d%%..",Percentage);
811075d0:	e0bff303 	ldbu	r2,-52(fp)
811075d4:	100b883a 	mov	r5,r2
811075d8:	012044b4 	movhi	r4,33042
811075dc:	213ca604 	addi	r4,r4,-3432
811075e0:	110cfdc0 	call	8110cfdc <printf>
	  NextMilestone += ByteLen/20;
811075e4:	e0fff017 	ldw	r3,-64(fp)
811075e8:	00b33374 	movhi	r2,52429
811075ec:	10b33344 	addi	r2,r2,-13107
811075f0:	1888383a 	mulxuu	r4,r3,r2
811075f4:	1885383a 	mul	r2,r3,r2
811075f8:	1021883a 	mov	r16,r2
811075fc:	2023883a 	mov	r17,r4
81107600:	8804d13a 	srli	r2,r17,4
81107604:	e0fff217 	ldw	r3,-56(fp)
81107608:	1885883a 	add	r2,r3,r2
8110760c:	e0bff215 	stw	r2,-56(fp)
	  Percentage += 5;
81107610:	e0bff303 	ldbu	r2,-52(fp)
81107614:	10800144 	addi	r2,r2,5
81107618:	e0bff305 	stb	r2,-52(fp)
    printf("00%%..");
  }
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
8110761c:	e0bff117 	ldw	r2,-60(fp)
81107620:	10800104 	addi	r2,r2,4
81107624:	e0bff115 	stw	r2,-60(fp)
81107628:	e0fff117 	ldw	r3,-60(fp)
8110762c:	e0bff517 	ldw	r2,-44(fp)
81107630:	18bfd836 	bltu	r3,r2,81107594 <__reset+0xfb0e7594>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  alt_dcache_flush_all();
81107634:	111963c0 	call	8111963c <alt_dcache_flush_all>
  if (bVerbose == DDR2_VERBOSE) {
81107638:	e0bffa17 	ldw	r2,-24(fp)
8110763c:	10800058 	cmpnei	r2,r2,1
81107640:	1000031e 	bne	r2,zero,81107650 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x210>
    printf("..100%%\n");
81107644:	012044b4 	movhi	r4,33042
81107648:	213ca904 	addi	r4,r4,-3420
8110764c:	110cfdc0 	call	8110cfdc <printf>
  }

  if (bSuccess){
81107650:	e0bff417 	ldw	r2,-48(fp)
81107654:	10002326 	beq	r2,zero,811076e4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2a4>
    if (bTime == TRUE){
81107658:	e0bffb17 	ldw	r2,-20(fp)
8110765c:	10800058 	cmpnei	r2,r2,1
81107660:	10001b1e 	bne	r2,zero,811076d0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x290>
81107664:	d0e04917 	ldw	r3,-32476(gp)
      TimeElapsed = alt_nticks() - TimeStart;
81107668:	e0bff717 	ldw	r2,-36(fp)
8110766c:	1885c83a 	sub	r2,r3,r2
81107670:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81107674:	e13ff617 	ldw	r4,-40(fp)
81107678:	110c1240 	call	8110c124 <__floatsisf>
8110767c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81107680:	d0a04817 	ldw	r2,-32480(gp)
81107684:	1009883a 	mov	r4,r2
81107688:	110c2480 	call	8110c248 <__floatunsisf>
8110768c:	1007883a 	mov	r3,r2
81107690:	180b883a 	mov	r5,r3
81107694:	8009883a 	mov	r4,r16
81107698:	110b8e80 	call	8110b8e8 <__divsf3>
8110769c:	1007883a 	mov	r3,r2
811076a0:	1805883a 	mov	r2,r3
811076a4:	1009883a 	mov	r4,r2
811076a8:	110ca500 	call	8110ca50 <__extendsfdf2>
811076ac:	1009883a 	mov	r4,r2
811076b0:	180b883a 	mov	r5,r3
811076b4:	200d883a 	mov	r6,r4
811076b8:	280f883a 	mov	r7,r5
811076bc:	e17ff017 	ldw	r5,-64(fp)
811076c0:	012044b4 	movhi	r4,33042
811076c4:	213c5004 	addi	r4,r4,-3776
811076c8:	110cfdc0 	call	8110cfdc <printf>
811076cc:	00000806 	br	811076f0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b0>
    } else {
      printf("DDR2 write test pass, size=%d bytes\n", ByteLen);
811076d0:	e17ff017 	ldw	r5,-64(fp)
811076d4:	012044b4 	movhi	r4,33042
811076d8:	213cac04 	addi	r4,r4,-3408
811076dc:	110cfdc0 	call	8110cfdc <printf>
811076e0:	00000306 	br	811076f0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b0>
    }
  } else {
    printf("DDR2 write test fail\n");
811076e4:	012044b4 	movhi	r4,33042
811076e8:	213c5c04 	addi	r4,r4,-3728
811076ec:	110d0f80 	call	8110d0f8 <puts>
  }
  printf("\n");
811076f0:	01000284 	movi	r4,10
811076f4:	110d0200 	call	8110d020 <putchar>

  return bSuccess;
811076f8:	e0bff417 	ldw	r2,-48(fp)
}
811076fc:	e6fffc04 	addi	sp,fp,-16
81107700:	dfc00517 	ldw	ra,20(sp)
81107704:	df000417 	ldw	fp,16(sp)
81107708:	dcc00317 	ldw	r19,12(sp)
8110770c:	dc800217 	ldw	r18,8(sp)
81107710:	dc400117 	ldw	r17,4(sp)
81107714:	dc000017 	ldw	r16,0(sp)
81107718:	dec00604 	addi	sp,sp,24
8110771c:	f800283a 	ret

81107720 <DDR2_MEMORY_RANDOM_READ_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_READ_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
81107720:	deffed04 	addi	sp,sp,-76
81107724:	dfc01215 	stw	ra,72(sp)
81107728:	df001115 	stw	fp,68(sp)
8110772c:	dcc01015 	stw	r19,64(sp)
81107730:	dc800f15 	stw	r18,60(sp)
81107734:	dc400e15 	stw	r17,56(sp)
81107738:	dc000d15 	stw	r16,52(sp)
8110773c:	df001104 	addi	fp,sp,68
81107740:	2005883a 	mov	r2,r4
81107744:	e17ffa15 	stw	r5,-24(fp)
81107748:	e1bffb15 	stw	r6,-20(fp)
8110774c:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Read Test =====\n");
81107750:	012044b4 	movhi	r4,33042
81107754:	213cb604 	addi	r4,r4,-3368
81107758:	110d0f80 	call	8110d0f8 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
8110775c:	00800044 	movi	r2,1
81107760:	e0bfef15 	stw	r2,-68(fp)
  switch (MemoryId) {
81107764:	e0bff903 	ldbu	r2,-28(fp)
81107768:	10c00060 	cmpeqi	r3,r2,1
8110776c:	1800031e 	bne	r3,zero,8110777c <DDR2_MEMORY_RANDOM_READ_TEST+0x5c>
81107770:	108000a0 	cmpeqi	r2,r2,2
81107774:	1000081e 	bne	r2,zero,81107798 <DDR2_MEMORY_RANDOM_READ_TEST+0x78>
81107778:	00000e06 	br	811077b4 <DDR2_MEMORY_RANDOM_READ_TEST+0x94>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
8110777c:	e0bff903 	ldbu	r2,-28(fp)
81107780:	1009883a 	mov	r4,r2
81107784:	1106bfc0 	call	81106bfc <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81107788:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
8110778c:	00a00034 	movhi	r2,32768
81107790:	e0bff115 	stw	r2,-60(fp)
    break;
81107794:	00000d06 	br	811077cc <DDR2_MEMORY_RANDOM_READ_TEST+0xac>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81107798:	e0bff903 	ldbu	r2,-28(fp)
8110779c:	1009883a 	mov	r4,r2
811077a0:	1106bfc0 	call	81106bfc <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
811077a4:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
811077a8:	00a00034 	movhi	r2,32768
811077ac:	e0bff115 	stw	r2,-60(fp)
    break;
811077b0:	00000606 	br	811077cc <DDR2_MEMORY_RANDOM_READ_TEST+0xac>
    default:
      bSuccess = FALSE;
811077b4:	e03fef15 	stw	zero,-68(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
811077b8:	012044b4 	movhi	r4,33042
811077bc:	213a4a04 	addi	r4,r4,-5848
811077c0:	110d0f80 	call	8110d0f8 <puts>
      return bSuccess;
811077c4:	e0bfef17 	ldw	r2,-68(fp)
811077c8:	00008006 	br	811079cc <DDR2_MEMORY_RANDOM_READ_TEST+0x2ac>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
811077cc:	e0bff117 	ldw	r2,-60(fp)
811077d0:	1004d53a 	srli	r2,r2,20
811077d4:	100b883a 	mov	r5,r2
811077d8:	012044b4 	movhi	r4,33042
811077dc:	213c4404 	addi	r4,r4,-3824
811077e0:	110cfdc0 	call	8110cfdc <printf>
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  CurrentState = InitialState;
811077e4:	d0a03c17 	ldw	r2,-32528(gp)
811077e8:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
811077ec:	e0fff017 	ldw	r3,-64(fp)
811077f0:	e0bff117 	ldw	r2,-60(fp)
811077f4:	1885883a 	add	r2,r3,r2
811077f8:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
811077fc:	e0fff117 	ldw	r3,-60(fp)
81107800:	00b33374 	movhi	r2,52429
81107804:	10b33344 	addi	r2,r2,-13107
81107808:	1888383a 	mulxuu	r4,r3,r2
8110780c:	1885383a 	mul	r2,r3,r2
81107810:	1025883a 	mov	r18,r2
81107814:	2027883a 	mov	r19,r4
81107818:	9806d13a 	srli	r3,r19,4
8110781c:	e0bff017 	ldw	r2,-64(fp)
81107820:	1885883a 	add	r2,r3,r2
81107824:	e0bff315 	stw	r2,-52(fp)
  Percentage = 5;
81107828:	00800144 	movi	r2,5
8110782c:	e0bff405 	stb	r2,-48(fp)
  printf("Reading from memory...\n");
81107830:	012044b4 	movhi	r4,33042
81107834:	213cc204 	addi	r4,r4,-3320
81107838:	110d0f80 	call	8110d0f8 <puts>
  if (bVerbose == DDR2_VERBOSE) {
8110783c:	e0bffa17 	ldw	r2,-24(fp)
81107840:	10800058 	cmpnei	r2,r2,1
81107844:	1000031e 	bne	r2,zero,81107854 <DDR2_MEMORY_RANDOM_READ_TEST+0x134>
    printf("00%%..");
81107848:	012044b4 	movhi	r4,33042
8110784c:	213ca404 	addi	r4,r4,-3440
81107850:	110cfdc0 	call	8110cfdc <printf>
  }
  
  int TimeStart, TimeElapsed = 0;
81107854:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81107858:	d0a04917 	ldw	r2,-32476(gp)

  TimeStart = alt_nticks();
8110785c:	e0bff715 	stw	r2,-36(fp)
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
81107860:	e0bff017 	ldw	r2,-64(fp)
81107864:	e0bff215 	stw	r2,-56(fp)
81107868:	00002406 	br	811078fc <DDR2_MEMORY_RANDOM_READ_TEST+0x1dc>
    if (xorshift32(&CurrentState) != *pSource){
8110786c:	e0bff804 	addi	r2,fp,-32
81107870:	1009883a 	mov	r4,r2
81107874:	11079f00 	call	811079f0 <xorshift32>
81107878:	1007883a 	mov	r3,r2
8110787c:	e0bff217 	ldw	r2,-56(fp)
81107880:	10800017 	ldw	r2,0(r2)
81107884:	18800126 	beq	r3,r2,8110788c <DDR2_MEMORY_RANDOM_READ_TEST+0x16c>
      bSuccess = FALSE;
81107888:	e03fef15 	stw	zero,-68(fp)
	  if (bVerbose == DDR2_VERBOSE) {
        //printf("Failed to read adress 0x%08X\n", pSource);
      }
    }
    if ((bVerbose == DDR2_VERBOSE) && ((alt_u32)pSource > NextMilestone)){
8110788c:	e0bffa17 	ldw	r2,-24(fp)
81107890:	10800058 	cmpnei	r2,r2,1
81107894:	1000161e 	bne	r2,zero,811078f0 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d0>
81107898:	e0bff217 	ldw	r2,-56(fp)
8110789c:	e0fff317 	ldw	r3,-52(fp)
811078a0:	1880132e 	bgeu	r3,r2,811078f0 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d0>
      printf("..%02d%%..",Percentage);
811078a4:	e0bff403 	ldbu	r2,-48(fp)
811078a8:	100b883a 	mov	r5,r2
811078ac:	012044b4 	movhi	r4,33042
811078b0:	213ca604 	addi	r4,r4,-3432
811078b4:	110cfdc0 	call	8110cfdc <printf>
	  NextMilestone += ByteLen/20;
811078b8:	e0fff117 	ldw	r3,-60(fp)
811078bc:	00b33374 	movhi	r2,52429
811078c0:	10b33344 	addi	r2,r2,-13107
811078c4:	1888383a 	mulxuu	r4,r3,r2
811078c8:	1885383a 	mul	r2,r3,r2
811078cc:	1021883a 	mov	r16,r2
811078d0:	2023883a 	mov	r17,r4
811078d4:	8804d13a 	srli	r2,r17,4
811078d8:	e0fff317 	ldw	r3,-52(fp)
811078dc:	1885883a 	add	r2,r3,r2
811078e0:	e0bff315 	stw	r2,-52(fp)
	  Percentage += 5;
811078e4:	e0bff403 	ldbu	r2,-48(fp)
811078e8:	10800144 	addi	r2,r2,5
811078ec:	e0bff405 	stb	r2,-48(fp)
  }
  
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
811078f0:	e0bff217 	ldw	r2,-56(fp)
811078f4:	10800104 	addi	r2,r2,4
811078f8:	e0bff215 	stw	r2,-56(fp)
811078fc:	e0fff217 	ldw	r3,-56(fp)
81107900:	e0bff517 	ldw	r2,-44(fp)
81107904:	18bfd936 	bltu	r3,r2,8110786c <__reset+0xfb0e786c>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  if (bVerbose == DDR2_VERBOSE) {
81107908:	e0bffa17 	ldw	r2,-24(fp)
8110790c:	10800058 	cmpnei	r2,r2,1
81107910:	1000031e 	bne	r2,zero,81107920 <DDR2_MEMORY_RANDOM_READ_TEST+0x200>
    printf("..100%%\n");
81107914:	012044b4 	movhi	r4,33042
81107918:	213ca904 	addi	r4,r4,-3420
8110791c:	110cfdc0 	call	8110cfdc <printf>
  }

  if (bSuccess){
81107920:	e0bfef17 	ldw	r2,-68(fp)
81107924:	10002326 	beq	r2,zero,811079b4 <DDR2_MEMORY_RANDOM_READ_TEST+0x294>
    if (bTime == TRUE){
81107928:	e0bffb17 	ldw	r2,-20(fp)
8110792c:	10800058 	cmpnei	r2,r2,1
81107930:	10001b1e 	bne	r2,zero,811079a0 <DDR2_MEMORY_RANDOM_READ_TEST+0x280>
81107934:	d0e04917 	ldw	r3,-32476(gp)
      TimeElapsed = alt_nticks() - TimeStart;
81107938:	e0bff717 	ldw	r2,-36(fp)
8110793c:	1885c83a 	sub	r2,r3,r2
81107940:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81107944:	e13ff617 	ldw	r4,-40(fp)
81107948:	110c1240 	call	8110c124 <__floatsisf>
8110794c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81107950:	d0a04817 	ldw	r2,-32480(gp)
81107954:	1009883a 	mov	r4,r2
81107958:	110c2480 	call	8110c248 <__floatunsisf>
8110795c:	1007883a 	mov	r3,r2
81107960:	180b883a 	mov	r5,r3
81107964:	8009883a 	mov	r4,r16
81107968:	110b8e80 	call	8110b8e8 <__divsf3>
8110796c:	1007883a 	mov	r3,r2
81107970:	1805883a 	mov	r2,r3
81107974:	1009883a 	mov	r4,r2
81107978:	110ca500 	call	8110ca50 <__extendsfdf2>
8110797c:	1009883a 	mov	r4,r2
81107980:	180b883a 	mov	r5,r3
81107984:	200d883a 	mov	r6,r4
81107988:	280f883a 	mov	r7,r5
8110798c:	e17ff117 	ldw	r5,-60(fp)
81107990:	012044b4 	movhi	r4,33042
81107994:	213c8104 	addi	r4,r4,-3580
81107998:	110cfdc0 	call	8110cfdc <printf>
8110799c:	00000806 	br	811079c0 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a0>
    } else {
      printf("DDR2 read test pass, size=%d bytes\n", ByteLen);
811079a0:	e17ff117 	ldw	r5,-60(fp)
811079a4:	012044b4 	movhi	r4,33042
811079a8:	213cc804 	addi	r4,r4,-3296
811079ac:	110cfdc0 	call	8110cfdc <printf>
811079b0:	00000306 	br	811079c0 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a0>
    }
  } else {
    printf("DDR2 read test fail\n");
811079b4:	012044b4 	movhi	r4,33042
811079b8:	213c8d04 	addi	r4,r4,-3532
811079bc:	110d0f80 	call	8110d0f8 <puts>
  }
  printf("\n");
811079c0:	01000284 	movi	r4,10
811079c4:	110d0200 	call	8110d020 <putchar>

  return bSuccess;
811079c8:	e0bfef17 	ldw	r2,-68(fp)
}
811079cc:	e6fffc04 	addi	sp,fp,-16
811079d0:	dfc00517 	ldw	ra,20(sp)
811079d4:	df000417 	ldw	fp,16(sp)
811079d8:	dcc00317 	ldw	r19,12(sp)
811079dc:	dc800217 	ldw	r18,8(sp)
811079e0:	dc400117 	ldw	r17,4(sp)
811079e4:	dc000017 	ldw	r16,0(sp)
811079e8:	dec00604 	addi	sp,sp,24
811079ec:	f800283a 	ret

811079f0 <xorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
  *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 xorshift32(alt_u32 *State){
811079f0:	defffd04 	addi	sp,sp,-12
811079f4:	df000215 	stw	fp,8(sp)
811079f8:	df000204 	addi	fp,sp,8
811079fc:	e13fff15 	stw	r4,-4(fp)

  alt_u32 x = *State;
81107a00:	e0bfff17 	ldw	r2,-4(fp)
81107a04:	10800017 	ldw	r2,0(r2)
81107a08:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 13;
81107a0c:	e0bffe17 	ldw	r2,-8(fp)
81107a10:	1004937a 	slli	r2,r2,13
81107a14:	e0fffe17 	ldw	r3,-8(fp)
81107a18:	1884f03a 	xor	r2,r3,r2
81107a1c:	e0bffe15 	stw	r2,-8(fp)
  x ^= x >> 17;
81107a20:	e0bffe17 	ldw	r2,-8(fp)
81107a24:	1004d47a 	srli	r2,r2,17
81107a28:	e0fffe17 	ldw	r3,-8(fp)
81107a2c:	1884f03a 	xor	r2,r3,r2
81107a30:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 5;
81107a34:	e0bffe17 	ldw	r2,-8(fp)
81107a38:	1004917a 	slli	r2,r2,5
81107a3c:	e0fffe17 	ldw	r3,-8(fp)
81107a40:	1884f03a 	xor	r2,r3,r2
81107a44:	e0bffe15 	stw	r2,-8(fp)
  *State = x;
81107a48:	e0bfff17 	ldw	r2,-4(fp)
81107a4c:	e0fffe17 	ldw	r3,-8(fp)
81107a50:	10c00015 	stw	r3,0(r2)

  return x;
81107a54:	e0bffe17 	ldw	r2,-8(fp)
}
81107a58:	e037883a 	mov	sp,fp
81107a5c:	df000017 	ldw	fp,0(sp)
81107a60:	dec00104 	addi	sp,sp,4
81107a64:	f800283a 	ret

81107a68 <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
81107a68:	defffb04 	addi	sp,sp,-20
81107a6c:	dfc00415 	stw	ra,16(sp)
81107a70:	df000315 	stw	fp,12(sp)
81107a74:	df000304 	addi	fp,sp,12
81107a78:	e13ffe15 	stw	r4,-8(fp)
81107a7c:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81107a80:	00800044 	movi	r2,1
81107a84:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
81107a88:	e13fff17 	ldw	r4,-4(fp)
81107a8c:	111d4600 	call	8111d460 <alt_msgdma_open>
81107a90:	1007883a 	mov	r3,r2
81107a94:	e0bffe17 	ldw	r2,-8(fp)
81107a98:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
81107a9c:	e0bffe17 	ldw	r2,-8(fp)
81107aa0:	10800017 	ldw	r2,0(r2)
81107aa4:	1000011e 	bne	r2,zero,81107aac <DMA_OPEN_DEVICE+0x44>
    bSuccess = FALSE;
81107aa8:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
81107aac:	e0bffd17 	ldw	r2,-12(fp)
}
81107ab0:	e037883a 	mov	sp,fp
81107ab4:	dfc00117 	ldw	ra,4(sp)
81107ab8:	df000017 	ldw	fp,0(sp)
81107abc:	dec00204 	addi	sp,sp,8
81107ac0:	f800283a 	ret

81107ac4 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
81107ac4:	defffc04 	addi	sp,sp,-16
81107ac8:	df000315 	stw	fp,12(sp)
81107acc:	df000304 	addi	fp,sp,12
81107ad0:	e13ffe15 	stw	r4,-8(fp)
81107ad4:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81107ad8:	00800044 	movi	r2,1
81107adc:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
81107ae0:	e0bffe17 	ldw	r2,-8(fp)
81107ae4:	10800317 	ldw	r2,12(r2)
81107ae8:	10800104 	addi	r2,r2,4
81107aec:	e0ffff17 	ldw	r3,-4(fp)
81107af0:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
81107af4:	e0bffd17 	ldw	r2,-12(fp)
}
81107af8:	e037883a 	mov	sp,fp
81107afc:	df000017 	ldw	fp,0(sp)
81107b00:	dec00104 	addi	sp,sp,4
81107b04:	f800283a 	ret

81107b08 <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
81107b08:	defffd04 	addi	sp,sp,-12
81107b0c:	df000215 	stw	fp,8(sp)
81107b10:	df000204 	addi	fp,sp,8
81107b14:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81107b18:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81107b1c:	e0bfff17 	ldw	r2,-4(fp)
81107b20:	10800317 	ldw	r2,12(r2)
81107b24:	10800037 	ldwio	r2,0(r2)
81107b28:	1080004c 	andi	r2,r2,1
81107b2c:	10000226 	beq	r2,zero,81107b38 <DMA_BUSY+0x30>
    bBusy = TRUE;
81107b30:	00800044 	movi	r2,1
81107b34:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81107b38:	e0bffe17 	ldw	r2,-8(fp)
}
81107b3c:	e037883a 	mov	sp,fp
81107b40:	df000017 	ldw	fp,0(sp)
81107b44:	dec00104 	addi	sp,sp,4
81107b48:	f800283a 	ret

81107b4c <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81107b4c:	defffd04 	addi	sp,sp,-12
81107b50:	df000215 	stw	fp,8(sp)
81107b54:	df000204 	addi	fp,sp,8
81107b58:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81107b5c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81107b60:	e0bfff17 	ldw	r2,-4(fp)
81107b64:	10800317 	ldw	r2,12(r2)
81107b68:	10800037 	ldwio	r2,0(r2)
81107b6c:	1080010c 	andi	r2,r2,4
81107b70:	10000226 	beq	r2,zero,81107b7c <DMA_DESCRIPTOR_BUFFER_FULL+0x30>
    bFull = TRUE;
81107b74:	00800044 	movi	r2,1
81107b78:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81107b7c:	e0bffe17 	ldw	r2,-8(fp)
}
81107b80:	e037883a 	mov	sp,fp
81107b84:	df000017 	ldw	fp,0(sp)
81107b88:	dec00104 	addi	sp,sp,4
81107b8c:	f800283a 	ret

81107b90 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81107b90:	defffd04 	addi	sp,sp,-12
81107b94:	df000215 	stw	fp,8(sp)
81107b98:	df000204 	addi	fp,sp,8
81107b9c:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81107ba0:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81107ba4:	e0bfff17 	ldw	r2,-4(fp)
81107ba8:	10800317 	ldw	r2,12(r2)
81107bac:	10800037 	ldwio	r2,0(r2)
81107bb0:	1080008c 	andi	r2,r2,2
81107bb4:	10000226 	beq	r2,zero,81107bc0 <DMA_DESCRIPTOR_BUFFER_EMPTY+0x30>
    bEmpty = TRUE;
81107bb8:	00800044 	movi	r2,1
81107bbc:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81107bc0:	e0bffe17 	ldw	r2,-8(fp)
}
81107bc4:	e037883a 	mov	sp,fp
81107bc8:	df000017 	ldw	fp,0(sp)
81107bcc:	dec00104 	addi	sp,sp,4
81107bd0:	f800283a 	ret

81107bd4 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81107bd4:	defffa04 	addi	sp,sp,-24
81107bd8:	dfc00515 	stw	ra,20(sp)
81107bdc:	df000415 	stw	fp,16(sp)
81107be0:	df000404 	addi	fp,sp,16
81107be4:	e13ffd15 	stw	r4,-12(fp)
81107be8:	e17ffe15 	stw	r5,-8(fp)
81107bec:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81107bf0:	00800044 	movi	r2,1
81107bf4:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81107bf8:	e0bffd17 	ldw	r2,-12(fp)
81107bfc:	10800317 	ldw	r2,12(r2)
81107c00:	10800104 	addi	r2,r2,4
81107c04:	00c00044 	movi	r3,1
81107c08:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81107c0c:	e0bffe17 	ldw	r2,-8(fp)
81107c10:	10800058 	cmpnei	r2,r2,1
81107c14:	10000f1e 	bne	r2,zero,81107c54 <DMA_DISPATCHER_STOP+0x80>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81107c18:	00000806 	br	81107c3c <DMA_DISPATCHER_STOP+0x68>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81107c1c:	e0bfff17 	ldw	r2,-4(fp)
81107c20:	1000031e 	bne	r2,zero,81107c30 <DMA_DISPATCHER_STOP+0x5c>
        usleep(1);
81107c24:	01000044 	movi	r4,1
81107c28:	111a2000 	call	8111a200 <usleep>
81107c2c:	00000306 	br	81107c3c <DMA_DISPATCHER_STOP+0x68>
      } else {
        usleep(WaitPeriodUs);
81107c30:	e0bfff17 	ldw	r2,-4(fp)
81107c34:	1009883a 	mov	r4,r2
81107c38:	111a2000 	call	8111a200 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81107c3c:	e0bffd17 	ldw	r2,-12(fp)
81107c40:	10800317 	ldw	r2,12(r2)
81107c44:	10800037 	ldwio	r2,0(r2)
81107c48:	1080080c 	andi	r2,r2,32
81107c4c:	103ff31e 	bne	r2,zero,81107c1c <__reset+0xfb0e7c1c>
81107c50:	00000206 	br	81107c5c <DMA_DISPATCHER_STOP+0x88>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81107c54:	e0bffc17 	ldw	r2,-16(fp)
81107c58:	00000106 	br	81107c60 <DMA_DISPATCHER_STOP+0x8c>
  }
  
  return bSuccess;
81107c5c:	e0bffc17 	ldw	r2,-16(fp)
}
81107c60:	e037883a 	mov	sp,fp
81107c64:	dfc00117 	ldw	ra,4(sp)
81107c68:	df000017 	ldw	fp,0(sp)
81107c6c:	dec00204 	addi	sp,sp,8
81107c70:	f800283a 	ret

81107c74 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81107c74:	defffa04 	addi	sp,sp,-24
81107c78:	dfc00515 	stw	ra,20(sp)
81107c7c:	df000415 	stw	fp,16(sp)
81107c80:	df000404 	addi	fp,sp,16
81107c84:	e13ffd15 	stw	r4,-12(fp)
81107c88:	e17ffe15 	stw	r5,-8(fp)
81107c8c:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81107c90:	00800044 	movi	r2,1
81107c94:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81107c98:	e0bffd17 	ldw	r2,-12(fp)
81107c9c:	10800317 	ldw	r2,12(r2)
81107ca0:	10800104 	addi	r2,r2,4
81107ca4:	00c00084 	movi	r3,2
81107ca8:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81107cac:	e0bffe17 	ldw	r2,-8(fp)
81107cb0:	10800058 	cmpnei	r2,r2,1
81107cb4:	10000f1e 	bne	r2,zero,81107cf4 <DMA_DISPATCHER_RESET+0x80>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81107cb8:	00000806 	br	81107cdc <DMA_DISPATCHER_RESET+0x68>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81107cbc:	e0bfff17 	ldw	r2,-4(fp)
81107cc0:	1000031e 	bne	r2,zero,81107cd0 <DMA_DISPATCHER_RESET+0x5c>
        usleep(1);
81107cc4:	01000044 	movi	r4,1
81107cc8:	111a2000 	call	8111a200 <usleep>
81107ccc:	00000306 	br	81107cdc <DMA_DISPATCHER_RESET+0x68>
      } else {
        usleep(WaitPeriodUs);
81107cd0:	e0bfff17 	ldw	r2,-4(fp)
81107cd4:	1009883a 	mov	r4,r2
81107cd8:	111a2000 	call	8111a200 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81107cdc:	e0bffd17 	ldw	r2,-12(fp)
81107ce0:	10800317 	ldw	r2,12(r2)
81107ce4:	10800037 	ldwio	r2,0(r2)
81107ce8:	1080100c 	andi	r2,r2,64
81107cec:	103ff31e 	bne	r2,zero,81107cbc <__reset+0xfb0e7cbc>
81107cf0:	00000206 	br	81107cfc <DMA_DISPATCHER_RESET+0x88>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81107cf4:	e0bffc17 	ldw	r2,-16(fp)
81107cf8:	00000106 	br	81107d00 <DMA_DISPATCHER_RESET+0x8c>
  }
  
  return bSuccess;
81107cfc:	e0bffc17 	ldw	r2,-16(fp)
}
81107d00:	e037883a 	mov	sp,fp
81107d04:	dfc00117 	ldw	ra,4(sp)
81107d08:	df000017 	ldw	fp,0(sp)
81107d0c:	dec00204 	addi	sp,sp,8
81107d10:	f800283a 	ret

81107d14 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81107d14:	defff604 	addi	sp,sp,-40
81107d18:	dfc00915 	stw	ra,36(sp)
81107d1c:	df000815 	stw	fp,32(sp)
81107d20:	dc000715 	stw	r16,28(sp)
81107d24:	df000804 	addi	fp,sp,32
81107d28:	e13ffb15 	stw	r4,-20(fp)
81107d2c:	e17ffc15 	stw	r5,-16(fp)
81107d30:	e1bffd15 	stw	r6,-12(fp)
81107d34:	e1fffe15 	stw	r7,-8(fp)
81107d38:	defff804 	addi	sp,sp,-32
81107d3c:	d8800204 	addi	r2,sp,8
81107d40:	108003c4 	addi	r2,r2,15
81107d44:	1004d13a 	srli	r2,r2,4
81107d48:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81107d4c:	00800044 	movi	r2,1
81107d50:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81107d54:	e0fffc17 	ldw	r3,-16(fp)
81107d58:	e13ffd17 	ldw	r4,-12(fp)
81107d5c:	e0800217 	ldw	r2,8(fp)
81107d60:	d8800115 	stw	r2,4(sp)
81107d64:	e0bffe17 	ldw	r2,-8(fp)
81107d68:	d8800015 	stw	r2,0(sp)
81107d6c:	200f883a 	mov	r7,r4
81107d70:	180d883a 	mov	r6,r3
81107d74:	800b883a 	mov	r5,r16
81107d78:	e13ffb17 	ldw	r4,-20(fp)
81107d7c:	111c5440 	call	8111c544 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81107d80:	10000326 	beq	r2,zero,81107d90 <DMA_SINGLE_TRANSFER+0x7c>
    bSuccess = FALSE;
81107d84:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81107d88:	e0bffa17 	ldw	r2,-24(fp)
81107d8c:	00001e06 	br	81107e08 <DMA_SINGLE_TRANSFER+0xf4>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81107d90:	800b883a 	mov	r5,r16
81107d94:	e13ffb17 	ldw	r4,-20(fp)
81107d98:	111d6780 	call	8111d678 <alt_msgdma_standard_descriptor_async_transfer>
81107d9c:	10000326 	beq	r2,zero,81107dac <DMA_SINGLE_TRANSFER+0x98>
      bSuccess = FALSE;
81107da0:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81107da4:	e0bffa17 	ldw	r2,-24(fp)
81107da8:	00001706 	br	81107e08 <DMA_SINGLE_TRANSFER+0xf4>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81107dac:	e0bffa17 	ldw	r2,-24(fp)
81107db0:	10800060 	cmpeqi	r2,r2,1
81107db4:	1007883a 	mov	r3,r2
81107db8:	e0800317 	ldw	r2,12(fp)
81107dbc:	10800060 	cmpeqi	r2,r2,1
81107dc0:	1884703a 	and	r2,r3,r2
81107dc4:	10803fcc 	andi	r2,r2,255
81107dc8:	10000e26 	beq	r2,zero,81107e04 <DMA_SINGLE_TRANSFER+0xf0>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81107dcc:	00000806 	br	81107df0 <DMA_SINGLE_TRANSFER+0xdc>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81107dd0:	e0800417 	ldw	r2,16(fp)
81107dd4:	1000031e 	bne	r2,zero,81107de4 <DMA_SINGLE_TRANSFER+0xd0>
        usleep(1000);
81107dd8:	0100fa04 	movi	r4,1000
81107ddc:	111a2000 	call	8111a200 <usleep>
81107de0:	00000306 	br	81107df0 <DMA_SINGLE_TRANSFER+0xdc>
      } else {
        usleep(WaitPeriodUs);
81107de4:	e0800417 	ldw	r2,16(fp)
81107de8:	1009883a 	mov	r4,r2
81107dec:	111a2000 	call	8111a200 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81107df0:	e0bffb17 	ldw	r2,-20(fp)
81107df4:	10800317 	ldw	r2,12(r2)
81107df8:	10800037 	ldwio	r2,0(r2)
81107dfc:	1080004c 	andi	r2,r2,1
81107e00:	103ff31e 	bne	r2,zero,81107dd0 <__reset+0xfb0e7dd0>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81107e04:	e0bffa17 	ldw	r2,-24(fp)
}
81107e08:	e6ffff04 	addi	sp,fp,-4
81107e0c:	dfc00217 	ldw	ra,8(sp)
81107e10:	df000117 	ldw	fp,4(sp)
81107e14:	dc000017 	ldw	r16,0(sp)
81107e18:	dec00304 	addi	sp,sp,12
81107e1c:	f800283a 	ret

81107e20 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81107e20:	defff504 	addi	sp,sp,-44
81107e24:	dfc00a15 	stw	ra,40(sp)
81107e28:	df000915 	stw	fp,36(sp)
81107e2c:	dc000815 	stw	r16,32(sp)
81107e30:	df000904 	addi	fp,sp,36
81107e34:	e13ffb15 	stw	r4,-20(fp)
81107e38:	e17ffc15 	stw	r5,-16(fp)
81107e3c:	e1bffd15 	stw	r6,-12(fp)
81107e40:	3805883a 	mov	r2,r7
81107e44:	e0bffe05 	stb	r2,-8(fp)
81107e48:	defff804 	addi	sp,sp,-32
81107e4c:	d8800204 	addi	r2,sp,8
81107e50:	108003c4 	addi	r2,r2,15
81107e54:	1004d13a 	srli	r2,r2,4
81107e58:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81107e5c:	00800044 	movi	r2,1
81107e60:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81107e64:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81107e68:	00002506 	br	81107f00 <DMA_MULTIPLE_TRANSFER+0xe0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81107e6c:	e0bffa03 	ldbu	r2,-24(fp)
81107e70:	1085883a 	add	r2,r2,r2
81107e74:	1085883a 	add	r2,r2,r2
81107e78:	1007883a 	mov	r3,r2
81107e7c:	e0bffc17 	ldw	r2,-16(fp)
81107e80:	10c5883a 	add	r2,r2,r3
81107e84:	10800017 	ldw	r2,0(r2)
81107e88:	1009883a 	mov	r4,r2
81107e8c:	e0bffa03 	ldbu	r2,-24(fp)
81107e90:	1085883a 	add	r2,r2,r2
81107e94:	1085883a 	add	r2,r2,r2
81107e98:	1007883a 	mov	r3,r2
81107e9c:	e0bffd17 	ldw	r2,-12(fp)
81107ea0:	10c5883a 	add	r2,r2,r3
81107ea4:	10800017 	ldw	r2,0(r2)
81107ea8:	1007883a 	mov	r3,r2
81107eac:	e0800317 	ldw	r2,12(fp)
81107eb0:	10804034 	orhi	r2,r2,256
81107eb4:	d8800115 	stw	r2,4(sp)
81107eb8:	e0800217 	ldw	r2,8(fp)
81107ebc:	d8800015 	stw	r2,0(sp)
81107ec0:	180f883a 	mov	r7,r3
81107ec4:	200d883a 	mov	r6,r4
81107ec8:	800b883a 	mov	r5,r16
81107ecc:	e13ffb17 	ldw	r4,-20(fp)
81107ed0:	111c5440 	call	8111c544 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81107ed4:	10000226 	beq	r2,zero,81107ee0 <DMA_MULTIPLE_TRANSFER+0xc0>
      bSuccess = FALSE;
81107ed8:	e03ff915 	stw	zero,-28(fp)
81107edc:	00000506 	br	81107ef4 <DMA_MULTIPLE_TRANSFER+0xd4>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81107ee0:	800b883a 	mov	r5,r16
81107ee4:	e13ffb17 	ldw	r4,-20(fp)
81107ee8:	111d6780 	call	8111d678 <alt_msgdma_standard_descriptor_async_transfer>
81107eec:	10000126 	beq	r2,zero,81107ef4 <DMA_MULTIPLE_TRANSFER+0xd4>
        bSuccess = FALSE;
81107ef0:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81107ef4:	e0bffa03 	ldbu	r2,-24(fp)
81107ef8:	10800044 	addi	r2,r2,1
81107efc:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81107f00:	e0bff917 	ldw	r2,-28(fp)
81107f04:	10800060 	cmpeqi	r2,r2,1
81107f08:	1009883a 	mov	r4,r2
81107f0c:	e0fffa03 	ldbu	r3,-24(fp)
81107f10:	e0bffe03 	ldbu	r2,-8(fp)
81107f14:	10bfffc4 	addi	r2,r2,-1
81107f18:	1884803a 	cmplt	r2,r3,r2
81107f1c:	2084703a 	and	r2,r4,r2
81107f20:	10803fcc 	andi	r2,r2,255
81107f24:	103fd11e 	bne	r2,zero,81107e6c <__reset+0xfb0e7e6c>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81107f28:	e0bff917 	ldw	r2,-28(fp)
81107f2c:	10800058 	cmpnei	r2,r2,1
81107f30:	1000211e 	bne	r2,zero,81107fb8 <DMA_MULTIPLE_TRANSFER+0x198>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81107f34:	e0bffa03 	ldbu	r2,-24(fp)
81107f38:	1085883a 	add	r2,r2,r2
81107f3c:	1085883a 	add	r2,r2,r2
81107f40:	1007883a 	mov	r3,r2
81107f44:	e0bffc17 	ldw	r2,-16(fp)
81107f48:	10c5883a 	add	r2,r2,r3
81107f4c:	10800017 	ldw	r2,0(r2)
81107f50:	1009883a 	mov	r4,r2
81107f54:	e0bffa03 	ldbu	r2,-24(fp)
81107f58:	1085883a 	add	r2,r2,r2
81107f5c:	1085883a 	add	r2,r2,r2
81107f60:	1007883a 	mov	r3,r2
81107f64:	e0bffd17 	ldw	r2,-12(fp)
81107f68:	10c5883a 	add	r2,r2,r3
81107f6c:	10800017 	ldw	r2,0(r2)
81107f70:	1007883a 	mov	r3,r2
81107f74:	e0800317 	ldw	r2,12(fp)
81107f78:	d8800115 	stw	r2,4(sp)
81107f7c:	e0800217 	ldw	r2,8(fp)
81107f80:	d8800015 	stw	r2,0(sp)
81107f84:	180f883a 	mov	r7,r3
81107f88:	200d883a 	mov	r6,r4
81107f8c:	800b883a 	mov	r5,r16
81107f90:	e13ffb17 	ldw	r4,-20(fp)
81107f94:	111c5440 	call	8111c544 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81107f98:	10000226 	beq	r2,zero,81107fa4 <DMA_MULTIPLE_TRANSFER+0x184>
      bSuccess = FALSE;
81107f9c:	e03ff915 	stw	zero,-28(fp)
81107fa0:	00000506 	br	81107fb8 <DMA_MULTIPLE_TRANSFER+0x198>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81107fa4:	800b883a 	mov	r5,r16
81107fa8:	e13ffb17 	ldw	r4,-20(fp)
81107fac:	111d6780 	call	8111d678 <alt_msgdma_standard_descriptor_async_transfer>
81107fb0:	10000126 	beq	r2,zero,81107fb8 <DMA_MULTIPLE_TRANSFER+0x198>
        bSuccess = FALSE;
81107fb4:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81107fb8:	e0bff917 	ldw	r2,-28(fp)
81107fbc:	10800060 	cmpeqi	r2,r2,1
81107fc0:	1007883a 	mov	r3,r2
81107fc4:	e0800417 	ldw	r2,16(fp)
81107fc8:	10800060 	cmpeqi	r2,r2,1
81107fcc:	1884703a 	and	r2,r3,r2
81107fd0:	10803fcc 	andi	r2,r2,255
81107fd4:	10000e26 	beq	r2,zero,81108010 <DMA_MULTIPLE_TRANSFER+0x1f0>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81107fd8:	00000806 	br	81107ffc <DMA_MULTIPLE_TRANSFER+0x1dc>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81107fdc:	e0800517 	ldw	r2,20(fp)
81107fe0:	1000031e 	bne	r2,zero,81107ff0 <DMA_MULTIPLE_TRANSFER+0x1d0>
    	usleep(1000);
81107fe4:	0100fa04 	movi	r4,1000
81107fe8:	111a2000 	call	8111a200 <usleep>
81107fec:	00000306 	br	81107ffc <DMA_MULTIPLE_TRANSFER+0x1dc>
      } else {
    	usleep(WaitPeriodUs);
81107ff0:	e0800517 	ldw	r2,20(fp)
81107ff4:	1009883a 	mov	r4,r2
81107ff8:	111a2000 	call	8111a200 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81107ffc:	e0bffb17 	ldw	r2,-20(fp)
81108000:	10800317 	ldw	r2,12(r2)
81108004:	10800037 	ldwio	r2,0(r2)
81108008:	1080004c 	andi	r2,r2,1
8110800c:	103ff31e 	bne	r2,zero,81107fdc <__reset+0xfb0e7fdc>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81108010:	e0bff917 	ldw	r2,-28(fp)
}
81108014:	e6ffff04 	addi	sp,fp,-4
81108018:	dfc00217 	ldw	ra,8(sp)
8110801c:	df000117 	ldw	fp,4(sp)
81108020:	dc000017 	ldw	r16,0(sp)
81108024:	dec00304 	addi	sp,sp,12
81108028:	f800283a 	ret

8110802c <DMA_EXTENDED_SINGLE_TRANSFER>:

bool DMA_EXTENDED_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressHigh, alt_u32 SourceAddressLow, alt_u32 DestinationAddressHigh, alt_u32 DestinationAddressLow, alt_u32 TransferSizeBytes, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
8110802c:	deffef04 	addi	sp,sp,-68
81108030:	dfc01015 	stw	ra,64(sp)
81108034:	df000f15 	stw	fp,60(sp)
81108038:	dc000e15 	stw	r16,56(sp)
8110803c:	df000f04 	addi	fp,sp,60
81108040:	e13ffb15 	stw	r4,-20(fp)
81108044:	e17ffc15 	stw	r5,-16(fp)
81108048:	e1bffd15 	stw	r6,-12(fp)
8110804c:	e1fffe15 	stw	r7,-8(fp)
81108050:	defff004 	addi	sp,sp,-64
81108054:	d8800904 	addi	r2,sp,36
81108058:	108007c4 	addi	r2,r2,31
8110805c:	1004d17a 	srli	r2,r2,5
81108060:	1020917a 	slli	r16,r2,5
  bool bSuccess = TRUE;
81108064:	00800044 	movi	r2,1
81108068:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_extended_descriptor DmaExtendedDescriptor;

  if (msgdma_construct_extended_mm_to_mm_descriptor (DmaDevice,
8110806c:	e17ffd17 	ldw	r5,-12(fp)
81108070:	e1800217 	ldw	r6,8(fp)
81108074:	e0bffc17 	ldw	r2,-16(fp)
81108078:	e0fffe17 	ldw	r3,-8(fp)
8110807c:	01000044 	movi	r4,1
81108080:	d9000815 	stw	r4,32(sp)
81108084:	01000044 	movi	r4,1
81108088:	d9000715 	stw	r4,28(sp)
8110808c:	01000044 	movi	r4,1
81108090:	d9000615 	stw	r4,24(sp)
81108094:	01000044 	movi	r4,1
81108098:	d9000515 	stw	r4,20(sp)
8110809c:	01000044 	movi	r4,1
811080a0:	d9000415 	stw	r4,16(sp)
811080a4:	d8c00315 	stw	r3,12(sp)
811080a8:	d8800215 	stw	r2,8(sp)
811080ac:	e0800417 	ldw	r2,16(fp)
811080b0:	d8800115 	stw	r2,4(sp)
811080b4:	e0800317 	ldw	r2,12(fp)
811080b8:	d8800015 	stw	r2,0(sp)
811080bc:	300f883a 	mov	r7,r6
811080c0:	280d883a 	mov	r6,r5
811080c4:	800b883a 	mov	r5,r16
811080c8:	e13ffb17 	ldw	r4,-20(fp)
811080cc:	110320c0 	call	8110320c <msgdma_construct_extended_mm_to_mm_descriptor>
811080d0:	10000326 	beq	r2,zero,811080e0 <DMA_EXTENDED_SINGLE_TRANSFER+0xb4>
  		                                                 1,
  		                                                 1,
  		                                                 1,
  		                                                 1,
  		                                                 1) != 0){
	  bSuccess = FALSE;
811080d4:	e03ffa15 	stw	zero,-24(fp)
	return bSuccess;
811080d8:	e0bffa17 	ldw	r2,-24(fp)
811080dc:	00001e06 	br	81108158 <DMA_EXTENDED_SINGLE_TRANSFER+0x12c>
  } else {
	if (msgdma_extended_descriptor_sync_transfer(DmaDevice, &DmaExtendedDescriptor) != 0) {
811080e0:	800b883a 	mov	r5,r16
811080e4:	e13ffb17 	ldw	r4,-20(fp)
811080e8:	11033000 	call	81103300 <msgdma_extended_descriptor_sync_transfer>
811080ec:	10000326 	beq	r2,zero,811080fc <DMA_EXTENDED_SINGLE_TRANSFER+0xd0>
	  bSuccess = FALSE;
811080f0:	e03ffa15 	stw	zero,-24(fp)
	  return bSuccess;
811080f4:	e0bffa17 	ldw	r2,-24(fp)
811080f8:	00001706 	br	81108158 <DMA_EXTENDED_SINGLE_TRANSFER+0x12c>
	}
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
811080fc:	e0bffa17 	ldw	r2,-24(fp)
81108100:	10800060 	cmpeqi	r2,r2,1
81108104:	1007883a 	mov	r3,r2
81108108:	e0800517 	ldw	r2,20(fp)
8110810c:	10800060 	cmpeqi	r2,r2,1
81108110:	1884703a 	and	r2,r3,r2
81108114:	10803fcc 	andi	r2,r2,255
81108118:	10000e26 	beq	r2,zero,81108154 <DMA_EXTENDED_SINGLE_TRANSFER+0x128>
	while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
8110811c:	00000806 	br	81108140 <DMA_EXTENDED_SINGLE_TRANSFER+0x114>
	  if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81108120:	e0800617 	ldw	r2,24(fp)
81108124:	1000031e 	bne	r2,zero,81108134 <DMA_EXTENDED_SINGLE_TRANSFER+0x108>
		usleep(1000);
81108128:	0100fa04 	movi	r4,1000
8110812c:	111a2000 	call	8111a200 <usleep>
81108130:	00000306 	br	81108140 <DMA_EXTENDED_SINGLE_TRANSFER+0x114>
	  } else {
		usleep(WaitPeriodUs);
81108134:	e0800617 	ldw	r2,24(fp)
81108138:	1009883a 	mov	r4,r2
8110813c:	111a2000 	call	8111a200 <usleep>
	  return bSuccess;
	}
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
	while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81108140:	e0bffb17 	ldw	r2,-20(fp)
81108144:	10800317 	ldw	r2,12(r2)
81108148:	10800037 	ldwio	r2,0(r2)
8110814c:	1080004c 	andi	r2,r2,1
81108150:	103ff31e 	bne	r2,zero,81108120 <__reset+0xfb0e8120>
		usleep(WaitPeriodUs);
	  }
	}
  }

  return bSuccess;
81108154:	e0bffa17 	ldw	r2,-24(fp)
}
81108158:	e6ffff04 	addi	sp,fp,-4
8110815c:	dfc00217 	ldw	ra,8(sp)
81108160:	df000117 	ldw	fp,4(sp)
81108164:	dc000017 	ldw	r16,0(sp)
81108168:	dec00304 	addi	sp,sp,12
8110816c:	f800283a 	ret

81108170 <v_Eth_Hold_Reset>:
 *      Author: rfranca
 */

	#include "eth.h"

	void v_Eth_Hold_Reset(void){
81108170:	defffe04 	addi	sp,sp,-8
81108174:	df000115 	stw	fp,4(sp)
81108178:	df000104 	addi	fp,sp,4

		alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
8110817c:	e03fff15 	stw	zero,-4(fp)
		*pEthAddr = (alt_u32) 0x00000000;
81108180:	e0bfff17 	ldw	r2,-4(fp)
81108184:	10000015 	stw	zero,0(r2)

	}
81108188:	0001883a 	nop
8110818c:	e037883a 	mov	sp,fp
81108190:	df000017 	ldw	fp,0(sp)
81108194:	dec00104 	addi	sp,sp,4
81108198:	f800283a 	ret

8110819c <v_Eth_Release_Reset>:

	void v_Eth_Release_Reset(void){
8110819c:	defffe04 	addi	sp,sp,-8
811081a0:	df000115 	stw	fp,4(sp)
811081a4:	df000104 	addi	fp,sp,4

		alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
811081a8:	e03fff15 	stw	zero,-4(fp)
		*pEthAddr = (alt_u32) 0x00000001;
811081ac:	e0bfff17 	ldw	r2,-4(fp)
811081b0:	00c00044 	movi	r3,1
811081b4:	10c00015 	stw	r3,0(r2)

	}
811081b8:	0001883a 	nop
811081bc:	e037883a 	mov	sp,fp
811081c0:	df000017 	ldw	fp,0(sp)
811081c4:	dec00104 	addi	sp,sp,4
811081c8:	f800283a 	ret

811081cc <PGEN_WRITE_REG32>:
 */

	#include "pgen.h"
	#include "pgen_registers.h"

	void PGEN_WRITE_REG32(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
811081cc:	defffc04 	addi	sp,sp,-16
811081d0:	df000315 	stw	fp,12(sp)
811081d4:	df000304 	addi	fp,sp,12
811081d8:	2005883a 	mov	r2,r4
811081dc:	e17fff15 	stw	r5,-4(fp)
811081e0:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
811081e4:	e03ffd15 	stw	zero,-12(fp)
		*(pPgenAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
811081e8:	e0bffe03 	ldbu	r2,-8(fp)
811081ec:	1085883a 	add	r2,r2,r2
811081f0:	1085883a 	add	r2,r2,r2
811081f4:	1007883a 	mov	r3,r2
811081f8:	e0bffd17 	ldw	r2,-12(fp)
811081fc:	10c5883a 	add	r2,r2,r3
81108200:	e0ffff17 	ldw	r3,-4(fp)
81108204:	10c00015 	stw	r3,0(r2)
	}
81108208:	0001883a 	nop
8110820c:	e037883a 	mov	sp,fp
81108210:	df000017 	ldw	fp,0(sp)
81108214:	dec00104 	addi	sp,sp,4
81108218:	f800283a 	ret

8110821c <PGEN_READ_REG32>:

	alt_u32 PGEN_READ_REG32(alt_u8 uc_RegisterAddress){
8110821c:	defffc04 	addi	sp,sp,-16
81108220:	df000315 	stw	fp,12(sp)
81108224:	df000304 	addi	fp,sp,12
81108228:	2005883a 	mov	r2,r4
8110822c:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81108230:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
81108234:	e03ffe15 	stw	zero,-8(fp)
		RegisterValue = *(pPgenAddr + (alt_u32)uc_RegisterAddress);
81108238:	e0bfff03 	ldbu	r2,-4(fp)
8110823c:	1085883a 	add	r2,r2,r2
81108240:	1085883a 	add	r2,r2,r2
81108244:	1007883a 	mov	r3,r2
81108248:	e0bffe17 	ldw	r2,-8(fp)
8110824c:	10c5883a 	add	r2,r2,r3
81108250:	10800017 	ldw	r2,0(r2)
81108254:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81108258:	e0bffd17 	ldw	r2,-12(fp)
	}
8110825c:	e037883a 	mov	sp,fp
81108260:	df000017 	ldw	fp,0(sp)
81108264:	dec00104 	addi	sp,sp,4
81108268:	f800283a 	ret

8110826c <b_Pattern_Generator_Write_Register>:

	bool b_Pattern_Generator_Write_Register(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
8110826c:	defffb04 	addi	sp,sp,-20
81108270:	dfc00415 	stw	ra,16(sp)
81108274:	df000315 	stw	fp,12(sp)
81108278:	df000304 	addi	fp,sp,12
8110827c:	2005883a 	mov	r2,r4
81108280:	e17fff15 	stw	r5,-4(fp)
81108284:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81108288:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x01) {
8110828c:	e0bffe03 	ldbu	r2,-8(fp)
81108290:	108000a8 	cmpgeui	r2,r2,2
81108294:	1000061e 	bne	r2,zero,811082b0 <b_Pattern_Generator_Write_Register+0x44>
			PGEN_WRITE_REG32(uc_RegisterAddress, ul_RegisterValue);
81108298:	e0bffe03 	ldbu	r2,-8(fp)
8110829c:	e17fff17 	ldw	r5,-4(fp)
811082a0:	1009883a 	mov	r4,r2
811082a4:	11081cc0 	call	811081cc <PGEN_WRITE_REG32>
			bSuccess = TRUE;
811082a8:	00800044 	movi	r2,1
811082ac:	e0bffd15 	stw	r2,-12(fp)
		}

		return bSuccess;
811082b0:	e0bffd17 	ldw	r2,-12(fp)
	}
811082b4:	e037883a 	mov	sp,fp
811082b8:	dfc00117 	ldw	ra,4(sp)
811082bc:	df000017 	ldw	fp,0(sp)
811082c0:	dec00204 	addi	sp,sp,8
811082c4:	f800283a 	ret

811082c8 <ul_Pattern_Generator_Read_Register>:

	alt_u32 ul_Pattern_Generator_Read_Register(alt_u8 uc_RegisterAddress){
811082c8:	defffc04 	addi	sp,sp,-16
811082cc:	dfc00315 	stw	ra,12(sp)
811082d0:	df000215 	stw	fp,8(sp)
811082d4:	df000204 	addi	fp,sp,8
811082d8:	2005883a 	mov	r2,r4
811082dc:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
811082e0:	e03ffe15 	stw	zero,-8(fp)

		if (uc_RegisterAddress <= 0x01) {
811082e4:	e0bfff03 	ldbu	r2,-4(fp)
811082e8:	108000a8 	cmpgeui	r2,r2,2
811082ec:	1000041e 	bne	r2,zero,81108300 <ul_Pattern_Generator_Read_Register+0x38>
			ul_RegisterValue = PGEN_READ_REG32(uc_RegisterAddress);
811082f0:	e0bfff03 	ldbu	r2,-4(fp)
811082f4:	1009883a 	mov	r4,r2
811082f8:	110821c0 	call	8110821c <PGEN_READ_REG32>
811082fc:	e0bffe15 	stw	r2,-8(fp)
		}

		return ul_RegisterValue;
81108300:	e0bffe17 	ldw	r2,-8(fp)
	}
81108304:	e037883a 	mov	sp,fp
81108308:	dfc00117 	ldw	ra,4(sp)
8110830c:	df000017 	ldw	fp,0(sp)
81108310:	dec00204 	addi	sp,sp,8
81108314:	f800283a 	ret

81108318 <v_Pattern_Generator_Start>:

	void v_Pattern_Generator_Start(void){
81108318:	defffe04 	addi	sp,sp,-8
8110831c:	dfc00115 	stw	ra,4(sp)
81108320:	df000015 	stw	fp,0(sp)
81108324:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_START_CONTROL_BIT_MASK);
81108328:	01400404 	movi	r5,16
8110832c:	0009883a 	mov	r4,zero
81108330:	11081cc0 	call	811081cc <PGEN_WRITE_REG32>

	}
81108334:	0001883a 	nop
81108338:	e037883a 	mov	sp,fp
8110833c:	dfc00117 	ldw	ra,4(sp)
81108340:	df000017 	ldw	fp,0(sp)
81108344:	dec00204 	addi	sp,sp,8
81108348:	f800283a 	ret

8110834c <v_Pattern_Generator_Stop>:

	void v_Pattern_Generator_Stop(void){
8110834c:	defffe04 	addi	sp,sp,-8
81108350:	dfc00115 	stw	ra,4(sp)
81108354:	df000015 	stw	fp,0(sp)
81108358:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_STOP_CONTROL_BIT_MASK);
8110835c:	01400204 	movi	r5,8
81108360:	0009883a 	mov	r4,zero
81108364:	11081cc0 	call	811081cc <PGEN_WRITE_REG32>

	}
81108368:	0001883a 	nop
8110836c:	e037883a 	mov	sp,fp
81108370:	dfc00117 	ldw	ra,4(sp)
81108374:	df000017 	ldw	fp,0(sp)
81108378:	dec00204 	addi	sp,sp,8
8110837c:	f800283a 	ret

81108380 <v_Pattern_Generator_Reset>:

	void v_Pattern_Generator_Reset(void){
81108380:	defffe04 	addi	sp,sp,-8
81108384:	dfc00115 	stw	ra,4(sp)
81108388:	df000015 	stw	fp,0(sp)
8110838c:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_RESET_CONTROL_BIT_MASK);
81108390:	01400104 	movi	r5,4
81108394:	0009883a 	mov	r4,zero
81108398:	11081cc0 	call	811081cc <PGEN_WRITE_REG32>

	}
8110839c:	0001883a 	nop
811083a0:	e037883a 	mov	sp,fp
811083a4:	dfc00117 	ldw	ra,4(sp)
811083a8:	df000017 	ldw	fp,0(sp)
811083ac:	dec00204 	addi	sp,sp,8
811083b0:	f800283a 	ret

811083b4 <Pattern_Generator_Status>:

	alt_u32 Pattern_Generator_Status(void){
811083b4:	defffc04 	addi	sp,sp,-16
811083b8:	dfc00315 	stw	ra,12(sp)
811083bc:	df000215 	stw	fp,8(sp)
811083c0:	df000204 	addi	fp,sp,8

		const alt_u32 ul_pgen_mask = PGEN_RESETED_STATUS_BIT_MASK | PGEN_STOPPED_STATUS_BIT_MASK;
811083c4:	008000c4 	movi	r2,3
811083c8:	e0bffe15 	stw	r2,-8(fp)
		alt_u32 ul_pgen_status_value = PGEN_READ_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS) & ul_pgen_mask;
811083cc:	0009883a 	mov	r4,zero
811083d0:	110821c0 	call	8110821c <PGEN_READ_REG32>
811083d4:	1007883a 	mov	r3,r2
811083d8:	e0bffe17 	ldw	r2,-8(fp)
811083dc:	1884703a 	and	r2,r3,r2
811083e0:	e0bfff15 	stw	r2,-4(fp)

		return ul_pgen_status_value;
811083e4:	e0bfff17 	ldw	r2,-4(fp)
	}
811083e8:	e037883a 	mov	sp,fp
811083ec:	dfc00117 	ldw	ra,4(sp)
811083f0:	df000017 	ldw	fp,0(sp)
811083f4:	dec00204 	addi	sp,sp,8
811083f8:	f800283a 	ret

811083fc <Pattern_Generator_Configure_Initial_State>:

	bool Pattern_Generator_Configure_Initial_State(alt_u8 uc_Initial_CCD_ID, alt_u8 uc_Initial_CCD_SIDE, alt_u8 uc_Initial_TimeCode){
811083fc:	defff904 	addi	sp,sp,-28
81108400:	dfc00615 	stw	ra,24(sp)
81108404:	df000515 	stw	fp,20(sp)
81108408:	df000504 	addi	fp,sp,20
8110840c:	2807883a 	mov	r3,r5
81108410:	3005883a 	mov	r2,r6
81108414:	e13ffd05 	stb	r4,-12(fp)
81108418:	e0fffe05 	stb	r3,-8(fp)
8110841c:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81108420:	e03ffb15 	stw	zero,-20(fp)

		alt_u32 initial_state_config_value;
		if ((uc_Initial_CCD_ID < 4) && (uc_Initial_CCD_SIDE < 2)) {
81108424:	e0bffd03 	ldbu	r2,-12(fp)
81108428:	10800128 	cmpgeui	r2,r2,4
8110842c:	1000101e 	bne	r2,zero,81108470 <Pattern_Generator_Configure_Initial_State+0x74>
81108430:	e0bffe03 	ldbu	r2,-8(fp)
81108434:	108000a8 	cmpgeui	r2,r2,2
81108438:	10000d1e 	bne	r2,zero,81108470 <Pattern_Generator_Configure_Initial_State+0x74>
			initial_state_config_value = (((alt_u32)uc_Initial_CCD_ID) << 9) | (((alt_u32)uc_Initial_CCD_SIDE) << 8) | ((alt_u32)uc_Initial_TimeCode);
8110843c:	e0bffd03 	ldbu	r2,-12(fp)
81108440:	1006927a 	slli	r3,r2,9
81108444:	e0bffe03 	ldbu	r2,-8(fp)
81108448:	1004923a 	slli	r2,r2,8
8110844c:	1886b03a 	or	r3,r3,r2
81108450:	e0bfff03 	ldbu	r2,-4(fp)
81108454:	1884b03a 	or	r2,r3,r2
81108458:	e0bffc15 	stw	r2,-16(fp)
			PGEN_WRITE_REG32(PGEN_INITIAL_TRANSMISSION_STATE_REGISTER_ADDRESS, initial_state_config_value);
8110845c:	e17ffc17 	ldw	r5,-16(fp)
81108460:	01000044 	movi	r4,1
81108464:	11081cc0 	call	811081cc <PGEN_WRITE_REG32>
			bSuccess = TRUE;
81108468:	00800044 	movi	r2,1
8110846c:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81108470:	e0bffb17 	ldw	r2,-20(fp)
	}
81108474:	e037883a 	mov	sp,fp
81108478:	dfc00117 	ldw	ra,4(sp)
8110847c:	df000017 	ldw	fp,0(sp)
81108480:	dec00204 	addi	sp,sp,8
81108484:	f800283a 	ret

81108488 <POWER_Read>:
#include "sense.h"

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]){
81108488:	deffef04 	addi	sp,sp,-68
8110848c:	dfc01015 	stw	ra,64(sp)
81108490:	df000f15 	stw	fp,60(sp)
81108494:	df000f04 	addi	fp,sp,60
81108498:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
8110849c:	00800044 	movi	r2,1
811084a0:	e0bff315 	stw	r2,-52(fp)
    int i,c, nPortIndex=0;
811084a4:	e03ff615 	stw	zero,-40(fp)
    int szPortNum[] = {POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM};
811084a8:	00800204 	movi	r2,8
811084ac:	e0bffc15 	stw	r2,-16(fp)
811084b0:	00800104 	movi	r2,4
811084b4:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
811084b8:	00800044 	movi	r2,1
811084bc:	e0bff715 	stw	r2,-36(fp)
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
811084c0:	00800044 	movi	r2,1
811084c4:	e0bff815 	stw	r2,-32(fp)
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
811084c8:	e03ff915 	stw	zero,-28(fp)
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
811084cc:	e03ff515 	stw	zero,-44(fp)
811084d0:	00007106 	br	81108698 <POWER_Read+0x210>
        NextChannel = 0;
811084d4:	e03ffa05 	stb	zero,-24(fp)
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
811084d8:	e0bff517 	ldw	r2,-44(fp)
811084dc:	10c03fcc 	andi	r3,r2,255
811084e0:	e13ffa03 	ldbu	r4,-24(fp)
811084e4:	e0bfff17 	ldw	r2,-4(fp)
811084e8:	d8800115 	stw	r2,4(sp)
811084ec:	e0bff917 	ldw	r2,-28(fp)
811084f0:	d8800015 	stw	r2,0(sp)
811084f4:	e1fff817 	ldw	r7,-32(fp)
811084f8:	e1bff717 	ldw	r6,-36(fp)
811084fc:	200b883a 	mov	r5,r4
81108500:	1809883a 	mov	r4,r3
81108504:	110333c0 	call	8110333c <POWER_SPI_RW>
81108508:	e0bff315 	stw	r2,-52(fp)
        for(i=0;i<szPortNum[c] && bSuccess;i++){
8110850c:	e03ff415 	stw	zero,-48(fp)
81108510:	00005306 	br	81108660 <POWER_Read+0x1d8>
            NextChannel = i + 1;
81108514:	e0bff417 	ldw	r2,-48(fp)
81108518:	10800044 	addi	r2,r2,1
8110851c:	e0bffa05 	stb	r2,-24(fp)
            bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81108520:	e0bff517 	ldw	r2,-44(fp)
81108524:	10c03fcc 	andi	r3,r2,255
81108528:	e13ffa03 	ldbu	r4,-24(fp)
8110852c:	e0bffe04 	addi	r2,fp,-8
81108530:	d8800115 	stw	r2,4(sp)
81108534:	e0bff917 	ldw	r2,-28(fp)
81108538:	d8800015 	stw	r2,0(sp)
8110853c:	e1fff817 	ldw	r7,-32(fp)
81108540:	e1bff717 	ldw	r6,-36(fp)
81108544:	200b883a 	mov	r5,r4
81108548:	1809883a 	mov	r4,r3
8110854c:	110333c0 	call	8110333c <POWER_SPI_RW>
81108550:	e0bff315 	stw	r2,-52(fp)
            if (bSuccess){
81108554:	e0bff317 	ldw	r2,-52(fp)
81108558:	10003b26 	beq	r2,zero,81108648 <POWER_Read+0x1c0>
                HEAD = (Value32 >> 30) & 0x03;
8110855c:	e0bffe17 	ldw	r2,-8(fp)
81108560:	1004d7ba 	srli	r2,r2,30
81108564:	e0bffa45 	stb	r2,-23(fp)
                Channel = (Value32 >> 1) & 0x07;
81108568:	e0bffe17 	ldw	r2,-8(fp)
8110856c:	1004d07a 	srli	r2,r2,1
81108570:	108001cc 	andi	r2,r2,7
81108574:	e0bffa85 	stb	r2,-22(fp)
                SIGN = (Value32 >> 4 ) & 0x01;
81108578:	e0bffe17 	ldw	r2,-8(fp)
8110857c:	1004d13a 	srli	r2,r2,4
81108580:	1080004c 	andi	r2,r2,1
81108584:	e0bffac5 	stb	r2,-21(fp)
                SGL = (Value32 >> 5 ) & 0x01;
81108588:	e0bffe17 	ldw	r2,-8(fp)
8110858c:	1004d17a 	srli	r2,r2,5
81108590:	1080004c 	andi	r2,r2,1
81108594:	e0bffb05 	stb	r2,-20(fp)
                PARITY = Value32 & 0x01;
81108598:	e0bffe17 	ldw	r2,-8(fp)
8110859c:	1080004c 	andi	r2,r2,1
811085a0:	e0bffb45 	stb	r2,-19(fp)
                if (HEAD != 0){
811085a4:	e0bffa43 	ldbu	r2,-23(fp)
811085a8:	10000626 	beq	r2,zero,811085c4 <POWER_Read+0x13c>
                    printf("[%d]Unexpected HEAD\r\n",i);
811085ac:	e17ff417 	ldw	r5,-48(fp)
811085b0:	012044b4 	movhi	r4,33042
811085b4:	213cd104 	addi	r4,r4,-3260
811085b8:	110cfdc0 	call	8110cfdc <printf>
                    bSuccess = FALSE;
811085bc:	e03ff315 	stw	zero,-52(fp)
811085c0:	00001406 	br	81108614 <POWER_Read+0x18c>
                }else if (Channel != i){
811085c4:	e0fffa83 	ldbu	r3,-22(fp)
811085c8:	e0bff417 	ldw	r2,-48(fp)
811085cc:	18800926 	beq	r3,r2,811085f4 <POWER_Read+0x16c>
                    printf("[%d]Unexpected Channel. Expected:%d, Read:%d\r\n", i, i, Channel);
811085d0:	e0bffa83 	ldbu	r2,-22(fp)
811085d4:	100f883a 	mov	r7,r2
811085d8:	e1bff417 	ldw	r6,-48(fp)
811085dc:	e17ff417 	ldw	r5,-48(fp)
811085e0:	012044b4 	movhi	r4,33042
811085e4:	213cd704 	addi	r4,r4,-3236
811085e8:	110cfdc0 	call	8110cfdc <printf>
                    bSuccess = FALSE;
811085ec:	e03ff315 	stw	zero,-52(fp)
811085f0:	00000806 	br	81108614 <POWER_Read+0x18c>
                }else if (SIGN ^ bSIGN){
811085f4:	e0fffac3 	ldbu	r3,-21(fp)
811085f8:	e0bff817 	ldw	r2,-32(fp)
811085fc:	18800526 	beq	r3,r2,81108614 <POWER_Read+0x18c>
                    printf("[%d]Unexpected SIGN\r\n",i);
81108600:	e17ff417 	ldw	r5,-48(fp)
81108604:	012044b4 	movhi	r4,33042
81108608:	213ce304 	addi	r4,r4,-3188
8110860c:	110cfdc0 	call	8110cfdc <printf>
                    bSuccess = FALSE;
81108610:	e03ff315 	stw	zero,-52(fp)
                }else if (SGL ^ SGL){
                    printf("[%d]Unexpected SGL\r\n",i);
                    bSuccess = FALSE;
                }
                if (bSuccess)
81108614:	e0bff317 	ldw	r2,-52(fp)
81108618:	10000e26 	beq	r2,zero,81108654 <POWER_Read+0x1cc>
                    szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
8110861c:	e0bff617 	ldw	r2,-40(fp)
81108620:	10c00044 	addi	r3,r2,1
81108624:	e0fff615 	stw	r3,-40(fp)
81108628:	1085883a 	add	r2,r2,r2
8110862c:	1085883a 	add	r2,r2,r2
81108630:	1007883a 	mov	r3,r2
81108634:	e0bfff17 	ldw	r2,-4(fp)
81108638:	10c5883a 	add	r2,r2,r3
8110863c:	e0fffe17 	ldw	r3,-8(fp)
81108640:	10c00015 	stw	r3,0(r2)
81108644:	00000306 	br	81108654 <POWER_Read+0x1cc>
            }else{
                printf("SPI Read Error\r\n");
81108648:	012044b4 	movhi	r4,33042
8110864c:	213ce904 	addi	r4,r4,-3164
81108650:	110d0f80 	call	8110d0f8 <puts>
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
        NextChannel = 0;
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
        for(i=0;i<szPortNum[c] && bSuccess;i++){
81108654:	e0bff417 	ldw	r2,-48(fp)
81108658:	10800044 	addi	r2,r2,1
8110865c:	e0bff415 	stw	r2,-48(fp)
81108660:	e0bff517 	ldw	r2,-44(fp)
81108664:	1085883a 	add	r2,r2,r2
81108668:	1085883a 	add	r2,r2,r2
8110866c:	e0fff304 	addi	r3,fp,-52
81108670:	1885883a 	add	r2,r3,r2
81108674:	10800904 	addi	r2,r2,36
81108678:	10800017 	ldw	r2,0(r2)
8110867c:	e0fff417 	ldw	r3,-48(fp)
81108680:	1880020e 	bge	r3,r2,8110868c <POWER_Read+0x204>
81108684:	e0bff317 	ldw	r2,-52(fp)
81108688:	103fa21e 	bne	r2,zero,81108514 <__reset+0xfb0e8514>
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
8110868c:	e0bff517 	ldw	r2,-44(fp)
81108690:	10800044 	addi	r2,r2,1
81108694:	e0bff515 	stw	r2,-44(fp)
81108698:	e0bff517 	ldw	r2,-44(fp)
8110869c:	10800088 	cmpgei	r2,r2,2
811086a0:	1000021e 	bne	r2,zero,811086ac <POWER_Read+0x224>
811086a4:	e0bff317 	ldw	r2,-52(fp)
811086a8:	103f8a1e 	bne	r2,zero,811084d4 <__reset+0xfb0e84d4>
            }else{
                printf("SPI Read Error\r\n");
            }
        } // for i
    } // for c
    return bSuccess;
811086ac:	e0bff317 	ldw	r2,-52(fp)
 }
811086b0:	e037883a 	mov	sp,fp
811086b4:	dfc00117 	ldw	ra,4(sp)
811086b8:	df000017 	ldw	fp,0(sp)
811086bc:	dec00204 	addi	sp,sp,8
811086c0:	f800283a 	ret

811086c4 <TEMP_Read>:

 bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp){
811086c4:	defff904 	addi	sp,sp,-28
811086c8:	dfc00615 	stw	ra,24(sp)
811086cc:	df000515 	stw	fp,20(sp)
811086d0:	df000504 	addi	fp,sp,20
811086d4:	e13ffe15 	stw	r4,-8(fp)
811086d8:	e17fff15 	stw	r5,-4(fp)
        bool bSuccess;
        const alt_u8 DeviceAddr = 0x30;
811086dc:	00800c04 	movi	r2,48
811086e0:	e0bffd85 	stb	r2,-10(fp)
        alt_8 FpgaTemp, BoardTemp;
        char Data;

        // read local temp
        bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00, &Data);
811086e4:	e0bffd83 	ldbu	r2,-10(fp)
811086e8:	10c03fcc 	andi	r3,r2,255
811086ec:	18c0201c 	xori	r3,r3,128
811086f0:	18ffe004 	addi	r3,r3,-128
811086f4:	e0bffdc4 	addi	r2,fp,-9
811086f8:	d8800015 	stw	r2,0(sp)
811086fc:	000f883a 	mov	r7,zero
81108700:	180d883a 	mov	r6,r3
81108704:	01600034 	movhi	r5,32768
81108708:	29426004 	addi	r5,r5,2432
8110870c:	01200034 	movhi	r4,32768
81108710:	21026404 	addi	r4,r4,2448
81108714:	11022fc0 	call	811022fc <I2C_Read>
81108718:	e0bffc15 	stw	r2,-16(fp)
        if (bSuccess)
8110871c:	e0bffc17 	ldw	r2,-16(fp)
81108720:	10000226 	beq	r2,zero,8110872c <TEMP_Read+0x68>
            BoardTemp = Data;
81108724:	e0bffdc3 	ldbu	r2,-9(fp)
81108728:	e0bffd45 	stb	r2,-11(fp)

        // read remote temp
        if (bSuccess){
8110872c:	e0bffc17 	ldw	r2,-16(fp)
81108730:	10001226 	beq	r2,zero,8110877c <TEMP_Read+0xb8>
            bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01, &Data);
81108734:	e0bffd83 	ldbu	r2,-10(fp)
81108738:	10c03fcc 	andi	r3,r2,255
8110873c:	18c0201c 	xori	r3,r3,128
81108740:	18ffe004 	addi	r3,r3,-128
81108744:	e0bffdc4 	addi	r2,fp,-9
81108748:	d8800015 	stw	r2,0(sp)
8110874c:	01c00044 	movi	r7,1
81108750:	180d883a 	mov	r6,r3
81108754:	01600034 	movhi	r5,32768
81108758:	29426004 	addi	r5,r5,2432
8110875c:	01200034 	movhi	r4,32768
81108760:	21026404 	addi	r4,r4,2448
81108764:	11022fc0 	call	811022fc <I2C_Read>
81108768:	e0bffc15 	stw	r2,-16(fp)
            if (bSuccess)
8110876c:	e0bffc17 	ldw	r2,-16(fp)
81108770:	10000226 	beq	r2,zero,8110877c <TEMP_Read+0xb8>
                FpgaTemp = Data;
81108774:	e0bffdc3 	ldbu	r2,-9(fp)
81108778:	e0bffd05 	stb	r2,-12(fp)
        }
        //
        if (bSuccess){
8110877c:	e0bffc17 	ldw	r2,-16(fp)
81108780:	10000626 	beq	r2,zero,8110879c <TEMP_Read+0xd8>
           *pFpgaTemp = FpgaTemp;
81108784:	e0bffe17 	ldw	r2,-8(fp)
81108788:	e0fffd03 	ldbu	r3,-12(fp)
8110878c:	10c00005 	stb	r3,0(r2)
           *pBoardTemp = BoardTemp;
81108790:	e0bfff17 	ldw	r2,-4(fp)
81108794:	e0fffd43 	ldbu	r3,-11(fp)
81108798:	10c00005 	stb	r3,0(r2)
        }

        return bSuccess;
8110879c:	e0bffc17 	ldw	r2,-16(fp)
 }
811087a0:	e037883a 	mov	sp,fp
811087a4:	dfc00117 	ldw	ra,4(sp)
811087a8:	df000017 	ldw	fp,0(sp)
811087ac:	dec00204 	addi	sp,sp,8
811087b0:	f800283a 	ret

811087b4 <sense_log_temp>:


 bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp){
811087b4:	defffb04 	addi	sp,sp,-20
811087b8:	dfc00415 	stw	ra,16(sp)
811087bc:	df000315 	stw	fp,12(sp)
811087c0:	df000304 	addi	fp,sp,12
811087c4:	e13ffe15 	stw	r4,-8(fp)
811087c8:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	 // show temp
	 bSuccess = TEMP_Read(FpgaTemp, BoardTemp);
811087cc:	e17fff17 	ldw	r5,-4(fp)
811087d0:	e13ffe17 	ldw	r4,-8(fp)
811087d4:	11086c40 	call	811086c4 <TEMP_Read>
811087d8:	e0bffd15 	stw	r2,-12(fp)

	 return(bSuccess);
811087dc:	e0bffd17 	ldw	r2,-12(fp)
 }
811087e0:	e037883a 	mov	sp,fp
811087e4:	dfc00117 	ldw	ra,4(sp)
811087e8:	df000017 	ldw	fp,0(sp)
811087ec:	dec00204 	addi	sp,sp,8
811087f0:	f800283a 	ret

811087f4 <sense_log>:


 void sense_log(void){
811087f4:	deff0504 	addi	sp,sp,-1004
811087f8:	dfc0fa15 	stw	ra,1000(sp)
811087fc:	df00f915 	stw	fp,996(sp)
81108800:	dd40f815 	stw	r21,992(sp)
81108804:	dd00f715 	stw	r20,988(sp)
81108808:	dcc0f615 	stw	r19,984(sp)
8110880c:	dc80f515 	stw	r18,980(sp)
81108810:	dc40f415 	stw	r17,976(sp)
81108814:	dc00f315 	stw	r16,972(sp)
81108818:	df00f904 	addi	fp,sp,996
 	  bool bSuccess;
 	    int i;
 	    const float fRef = 5.0; // 5.0V
8110881c:	00902834 	movhi	r2,16544
81108820:	e0bf0e15 	stw	r2,-968(fp)
 	    float fVolDrop, fCurrent, fPower, fVol;
 	    alt_u32 szVol[POWER_PORT_NUM];
 	    alt_u32 SIG, MSB, RESULT;
 	    float szRes[] = {0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003};
81108824:	008ed174 	movhi	r2,15173
81108828:	10a6e984 	addi	r2,r2,-25690
8110882c:	e0bf2215 	stw	r2,-888(fp)
81108830:	008ea0f4 	movhi	r2,14979
81108834:	10849bc4 	addi	r2,r2,4719
81108838:	e0bf2315 	stw	r2,-884(fp)
8110883c:	008ed174 	movhi	r2,15173
81108840:	10a6e984 	addi	r2,r2,-25690
81108844:	e0bf2415 	stw	r2,-880(fp)
81108848:	008ed174 	movhi	r2,15173
8110884c:	10a6e984 	addi	r2,r2,-25690
81108850:	e0bf2515 	stw	r2,-876(fp)
81108854:	008ed174 	movhi	r2,15173
81108858:	10a6e984 	addi	r2,r2,-25690
8110885c:	e0bf2615 	stw	r2,-872(fp)
81108860:	008ed174 	movhi	r2,15173
81108864:	10a6e984 	addi	r2,r2,-25690
81108868:	e0bf2715 	stw	r2,-868(fp)
8110886c:	008ed174 	movhi	r2,15173
81108870:	10a6e984 	addi	r2,r2,-25690
81108874:	e0bf2815 	stw	r2,-864(fp)
81108878:	008ed174 	movhi	r2,15173
8110887c:	10a6e984 	addi	r2,r2,-25690
81108880:	e0bf2915 	stw	r2,-860(fp)
81108884:	008ed174 	movhi	r2,15173
81108888:	10a6e984 	addi	r2,r2,-25690
8110888c:	e0bf2a15 	stw	r2,-856(fp)
81108890:	008ed174 	movhi	r2,15173
81108894:	10a6e984 	addi	r2,r2,-25690
81108898:	e0bf2b15 	stw	r2,-852(fp)
8110889c:	008ed174 	movhi	r2,15173
811088a0:	10a6e984 	addi	r2,r2,-25690
811088a4:	e0bf2c15 	stw	r2,-848(fp)
811088a8:	008ed174 	movhi	r2,15173
811088ac:	10a6e984 	addi	r2,r2,-25690
811088b0:	e0bf2d15 	stw	r2,-844(fp)
 	    float szRefVol[] = {0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3, 2.5};
811088b4:	008fd9b4 	movhi	r2,16230
811088b8:	10999984 	addi	r2,r2,26214
811088bc:	e0bf2e15 	stw	r2,-840(fp)
811088c0:	008fd9b4 	movhi	r2,16230
811088c4:	10999984 	addi	r2,r2,26214
811088c8:	e0bf2f15 	stw	r2,-836(fp)
811088cc:	00901034 	movhi	r2,16448
811088d0:	e0bf3015 	stw	r2,-832(fp)
811088d4:	008fd9b4 	movhi	r2,16230
811088d8:	10999984 	addi	r2,r2,26214
811088dc:	e0bf3115 	stw	r2,-828(fp)
811088e0:	008ff9b4 	movhi	r2,16358
811088e4:	10999984 	addi	r2,r2,26214
811088e8:	e0bf3215 	stw	r2,-824(fp)
811088ec:	00900834 	movhi	r2,16416
811088f0:	e0bf3315 	stw	r2,-820(fp)
811088f4:	008ff9b4 	movhi	r2,16358
811088f8:	10999984 	addi	r2,r2,26214
811088fc:	e0bf3415 	stw	r2,-816(fp)
81108900:	00900834 	movhi	r2,16416
81108904:	e0bf3515 	stw	r2,-812(fp)
81108908:	008fe374 	movhi	r2,16269
8110890c:	10b33344 	addi	r2,r2,-13107
81108910:	e0bf3615 	stw	r2,-808(fp)
81108914:	008fecf4 	movhi	r2,16307
81108918:	108cccc4 	addi	r2,r2,13107
8110891c:	e0bf3715 	stw	r2,-804(fp)
81108920:	009014f4 	movhi	r2,16467
81108924:	108cccc4 	addi	r2,r2,13107
81108928:	e0bf3815 	stw	r2,-800(fp)
8110892c:	00900834 	movhi	r2,16416
81108930:	e0bf3915 	stw	r2,-796(fp)
 	    char szName[][64] = {
81108934:	00a044b4 	movhi	r2,33042
81108938:	10bd21c4 	addi	r2,r2,-2937
8110893c:	e0ff3a04 	addi	r3,fp,-792
81108940:	1009883a 	mov	r4,r2
81108944:	0080c004 	movi	r2,768
81108948:	100d883a 	mov	r6,r2
8110894c:	200b883a 	mov	r5,r4
81108950:	1809883a 	mov	r4,r3
81108954:	110ce640 	call	8110ce64 <memcpy>
 	        "VCC3P3_HSMC",
 	        "HSMB_VCCIO",
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
81108958:	e0bf1604 	addi	r2,fp,-936
8110895c:	1009883a 	mov	r4,r2
81108960:	11084880 	call	81108488 <POWER_Read>
81108964:	e0bf0f15 	stw	r2,-964(fp)
 	        if (bSuccess){
81108968:	e0bf0f17 	ldw	r2,-964(fp)
8110896c:	10013b26 	beq	r2,zero,81108e5c <sense_log+0x668>
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
81108970:	e03f0c15 	stw	zero,-976(fp)
81108974:	00013006 	br	81108e38 <sense_log+0x644>
 	                SIG = (szVol[i] >> 29) & 0x01;
81108978:	e0bf0c17 	ldw	r2,-976(fp)
8110897c:	1085883a 	add	r2,r2,r2
81108980:	1085883a 	add	r2,r2,r2
81108984:	e0ff0c04 	addi	r3,fp,-976
81108988:	1885883a 	add	r2,r3,r2
8110898c:	10800a04 	addi	r2,r2,40
81108990:	10800017 	ldw	r2,0(r2)
81108994:	1004d77a 	srli	r2,r2,29
81108998:	1080004c 	andi	r2,r2,1
8110899c:	e0bf1015 	stw	r2,-960(fp)
 	                MSB = (szVol[i] >> 28) & 0x01;
811089a0:	e0bf0c17 	ldw	r2,-976(fp)
811089a4:	1085883a 	add	r2,r2,r2
811089a8:	1085883a 	add	r2,r2,r2
811089ac:	e0ff0c04 	addi	r3,fp,-976
811089b0:	1885883a 	add	r2,r3,r2
811089b4:	10800a04 	addi	r2,r2,40
811089b8:	10800017 	ldw	r2,0(r2)
811089bc:	1004d73a 	srli	r2,r2,28
811089c0:	1080004c 	andi	r2,r2,1
811089c4:	e0bf1115 	stw	r2,-956(fp)
 	                RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
811089c8:	e0bf0c17 	ldw	r2,-976(fp)
811089cc:	1085883a 	add	r2,r2,r2
811089d0:	1085883a 	add	r2,r2,r2
811089d4:	e0ff0c04 	addi	r3,fp,-976
811089d8:	1885883a 	add	r2,r3,r2
811089dc:	10800a04 	addi	r2,r2,40
811089e0:	10800017 	ldw	r2,0(r2)
811089e4:	1006d1ba 	srli	r3,r2,6
811089e8:	00801034 	movhi	r2,64
811089ec:	10bfffc4 	addi	r2,r2,-1
811089f0:	1884703a 	and	r2,r3,r2
811089f4:	e0bf1215 	stw	r2,-952(fp)
 	                if (MSB == 0)
811089f8:	e0bf1117 	ldw	r2,-956(fp)
811089fc:	1000091e 	bne	r2,zero,81108a24 <sense_log+0x230>
 	                    fVolDrop = (float)(RESULT)/(float)0x400000;
81108a00:	e13f1217 	ldw	r4,-952(fp)
81108a04:	110c2480 	call	8110c248 <__floatunsisf>
81108a08:	1007883a 	mov	r3,r2
81108a0c:	0152a034 	movhi	r5,19072
81108a10:	1809883a 	mov	r4,r3
81108a14:	110b8e80 	call	8110b8e8 <__divsf3>
81108a18:	1007883a 	mov	r3,r2
81108a1c:	e0ff0d15 	stw	r3,-972(fp)
81108a20:	00000106 	br	81108a28 <sense_log+0x234>
 	                else
 	                    fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
81108a24:	e03f0d15 	stw	zero,-972(fp)
 	                if (SIG && MSB){
81108a28:	e0bf1017 	ldw	r2,-960(fp)
81108a2c:	10001f26 	beq	r2,zero,81108aac <sense_log+0x2b8>
81108a30:	e0bf1117 	ldw	r2,-956(fp)
81108a34:	10001d26 	beq	r2,zero,81108aac <sense_log+0x2b8>
 	                    fVol = fRef*0.5;
81108a38:	014fc034 	movhi	r5,16128
81108a3c:	e13f0e17 	ldw	r4,-968(fp)
81108a40:	110bd280 	call	8110bd28 <__mulsf3>
81108a44:	1007883a 	mov	r3,r2
81108a48:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
81108a4c:	e0ff3a04 	addi	r3,fp,-792
81108a50:	e0bf0c17 	ldw	r2,-976(fp)
81108a54:	100491ba 	slli	r2,r2,6
81108a58:	18a1883a 	add	r16,r3,r2
81108a5c:	e0bf0c17 	ldw	r2,-976(fp)
81108a60:	1085883a 	add	r2,r2,r2
81108a64:	1085883a 	add	r2,r2,r2
81108a68:	e0ff0c04 	addi	r3,fp,-976
81108a6c:	1885883a 	add	r2,r3,r2
81108a70:	10800a04 	addi	r2,r2,40
81108a74:	10800017 	ldw	r2,0(r2)
81108a78:	1023883a 	mov	r17,r2
81108a7c:	e13f1317 	ldw	r4,-948(fp)
81108a80:	110ca500 	call	8110ca50 <__extendsfdf2>
81108a84:	1009883a 	mov	r4,r2
81108a88:	180b883a 	mov	r5,r3
81108a8c:	d9400015 	stw	r5,0(sp)
81108a90:	200f883a 	mov	r7,r4
81108a94:	880d883a 	mov	r6,r17
81108a98:	800b883a 	mov	r5,r16
81108a9c:	012044b4 	movhi	r4,33042
81108aa0:	213ced04 	addi	r4,r4,-3148
81108aa4:	110cfdc0 	call	8110cfdc <printf>
81108aa8:	0000e006 	br	81108e2c <sense_log+0x638>
 	                }else if (SIG && !MSB){
81108aac:	e0bf1017 	ldw	r2,-960(fp)
81108ab0:	10005d26 	beq	r2,zero,81108c28 <sense_log+0x434>
81108ab4:	e0bf1117 	ldw	r2,-956(fp)
81108ab8:	10005b1e 	bne	r2,zero,81108c28 <sense_log+0x434>
 	                    fVol = fRef*0.5*fVolDrop;
81108abc:	e13f0e17 	ldw	r4,-968(fp)
81108ac0:	110ca500 	call	8110ca50 <__extendsfdf2>
81108ac4:	1011883a 	mov	r8,r2
81108ac8:	1813883a 	mov	r9,r3
81108acc:	000d883a 	mov	r6,zero
81108ad0:	01cff834 	movhi	r7,16352
81108ad4:	4009883a 	mov	r4,r8
81108ad8:	480b883a 	mov	r5,r9
81108adc:	110c3380 	call	8110c338 <__muldf3>
81108ae0:	1009883a 	mov	r4,r2
81108ae4:	180b883a 	mov	r5,r3
81108ae8:	2021883a 	mov	r16,r4
81108aec:	2823883a 	mov	r17,r5
81108af0:	e13f0d17 	ldw	r4,-972(fp)
81108af4:	110ca500 	call	8110ca50 <__extendsfdf2>
81108af8:	1009883a 	mov	r4,r2
81108afc:	180b883a 	mov	r5,r3
81108b00:	200d883a 	mov	r6,r4
81108b04:	280f883a 	mov	r7,r5
81108b08:	8009883a 	mov	r4,r16
81108b0c:	880b883a 	mov	r5,r17
81108b10:	110c3380 	call	8110c338 <__muldf3>
81108b14:	1009883a 	mov	r4,r2
81108b18:	180b883a 	mov	r5,r3
81108b1c:	2005883a 	mov	r2,r4
81108b20:	2807883a 	mov	r3,r5
81108b24:	1009883a 	mov	r4,r2
81108b28:	180b883a 	mov	r5,r3
81108b2c:	110cb600 	call	8110cb60 <__truncdfsf2>
81108b30:	1007883a 	mov	r3,r2
81108b34:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
81108b38:	e0bf0c17 	ldw	r2,-976(fp)
81108b3c:	1085883a 	add	r2,r2,r2
81108b40:	1085883a 	add	r2,r2,r2
81108b44:	e0ff0c04 	addi	r3,fp,-976
81108b48:	1885883a 	add	r2,r3,r2
81108b4c:	10801604 	addi	r2,r2,88
81108b50:	10c00017 	ldw	r3,0(r2)
81108b54:	180b883a 	mov	r5,r3
81108b58:	e13f0d17 	ldw	r4,-972(fp)
81108b5c:	110b8e80 	call	8110b8e8 <__divsf3>
81108b60:	1007883a 	mov	r3,r2
81108b64:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
81108b68:	e0bf0c17 	ldw	r2,-976(fp)
81108b6c:	1085883a 	add	r2,r2,r2
81108b70:	1085883a 	add	r2,r2,r2
81108b74:	e0ff0c04 	addi	r3,fp,-976
81108b78:	1885883a 	add	r2,r3,r2
81108b7c:	10802204 	addi	r2,r2,136
81108b80:	10c00017 	ldw	r3,0(r2)
81108b84:	e17f1417 	ldw	r5,-944(fp)
81108b88:	1809883a 	mov	r4,r3
81108b8c:	110bd280 	call	8110bd28 <__mulsf3>
81108b90:	1007883a 	mov	r3,r2
81108b94:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
81108b98:	e0ff3a04 	addi	r3,fp,-792
81108b9c:	e0bf0c17 	ldw	r2,-976(fp)
81108ba0:	100491ba 	slli	r2,r2,6
81108ba4:	18a9883a 	add	r20,r3,r2
81108ba8:	e0bf0c17 	ldw	r2,-976(fp)
81108bac:	1085883a 	add	r2,r2,r2
81108bb0:	1085883a 	add	r2,r2,r2
81108bb4:	e0ff0c04 	addi	r3,fp,-976
81108bb8:	1885883a 	add	r2,r3,r2
81108bbc:	10800a04 	addi	r2,r2,40
81108bc0:	10800017 	ldw	r2,0(r2)
81108bc4:	102b883a 	mov	r21,r2
81108bc8:	e13f0d17 	ldw	r4,-972(fp)
81108bcc:	110ca500 	call	8110ca50 <__extendsfdf2>
81108bd0:	1025883a 	mov	r18,r2
81108bd4:	1827883a 	mov	r19,r3
81108bd8:	e13f1417 	ldw	r4,-944(fp)
81108bdc:	110ca500 	call	8110ca50 <__extendsfdf2>
81108be0:	1021883a 	mov	r16,r2
81108be4:	1823883a 	mov	r17,r3
81108be8:	e13f1517 	ldw	r4,-940(fp)
81108bec:	110ca500 	call	8110ca50 <__extendsfdf2>
81108bf0:	1009883a 	mov	r4,r2
81108bf4:	180b883a 	mov	r5,r3
81108bf8:	d9000315 	stw	r4,12(sp)
81108bfc:	d9400415 	stw	r5,16(sp)
81108c00:	dc000115 	stw	r16,4(sp)
81108c04:	dc400215 	stw	r17,8(sp)
81108c08:	dcc00015 	stw	r19,0(sp)
81108c0c:	900f883a 	mov	r7,r18
81108c10:	a80d883a 	mov	r6,r21
81108c14:	a00b883a 	mov	r5,r20
81108c18:	012044b4 	movhi	r4,33042
81108c1c:	213cf604 	addi	r4,r4,-3112
81108c20:	110cfdc0 	call	8110cfdc <printf>
81108c24:	00008106 	br	81108e2c <sense_log+0x638>
 	                }else if (!SIG && MSB){
81108c28:	e0bf1017 	ldw	r2,-960(fp)
81108c2c:	10005d1e 	bne	r2,zero,81108da4 <sense_log+0x5b0>
81108c30:	e0bf1117 	ldw	r2,-956(fp)
81108c34:	10005b26 	beq	r2,zero,81108da4 <sense_log+0x5b0>
 	                    fVol = fRef*0.5*fVolDrop;
81108c38:	e13f0e17 	ldw	r4,-968(fp)
81108c3c:	110ca500 	call	8110ca50 <__extendsfdf2>
81108c40:	1011883a 	mov	r8,r2
81108c44:	1813883a 	mov	r9,r3
81108c48:	000d883a 	mov	r6,zero
81108c4c:	01cff834 	movhi	r7,16352
81108c50:	4009883a 	mov	r4,r8
81108c54:	480b883a 	mov	r5,r9
81108c58:	110c3380 	call	8110c338 <__muldf3>
81108c5c:	1009883a 	mov	r4,r2
81108c60:	180b883a 	mov	r5,r3
81108c64:	2021883a 	mov	r16,r4
81108c68:	2823883a 	mov	r17,r5
81108c6c:	e13f0d17 	ldw	r4,-972(fp)
81108c70:	110ca500 	call	8110ca50 <__extendsfdf2>
81108c74:	1009883a 	mov	r4,r2
81108c78:	180b883a 	mov	r5,r3
81108c7c:	200d883a 	mov	r6,r4
81108c80:	280f883a 	mov	r7,r5
81108c84:	8009883a 	mov	r4,r16
81108c88:	880b883a 	mov	r5,r17
81108c8c:	110c3380 	call	8110c338 <__muldf3>
81108c90:	1009883a 	mov	r4,r2
81108c94:	180b883a 	mov	r5,r3
81108c98:	2005883a 	mov	r2,r4
81108c9c:	2807883a 	mov	r3,r5
81108ca0:	1009883a 	mov	r4,r2
81108ca4:	180b883a 	mov	r5,r3
81108ca8:	110cb600 	call	8110cb60 <__truncdfsf2>
81108cac:	1007883a 	mov	r3,r2
81108cb0:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
81108cb4:	e0bf0c17 	ldw	r2,-976(fp)
81108cb8:	1085883a 	add	r2,r2,r2
81108cbc:	1085883a 	add	r2,r2,r2
81108cc0:	e0ff0c04 	addi	r3,fp,-976
81108cc4:	1885883a 	add	r2,r3,r2
81108cc8:	10801604 	addi	r2,r2,88
81108ccc:	10c00017 	ldw	r3,0(r2)
81108cd0:	180b883a 	mov	r5,r3
81108cd4:	e13f0d17 	ldw	r4,-972(fp)
81108cd8:	110b8e80 	call	8110b8e8 <__divsf3>
81108cdc:	1007883a 	mov	r3,r2
81108ce0:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
81108ce4:	e0bf0c17 	ldw	r2,-976(fp)
81108ce8:	1085883a 	add	r2,r2,r2
81108cec:	1085883a 	add	r2,r2,r2
81108cf0:	e0ff0c04 	addi	r3,fp,-976
81108cf4:	1885883a 	add	r2,r3,r2
81108cf8:	10802204 	addi	r2,r2,136
81108cfc:	10c00017 	ldw	r3,0(r2)
81108d00:	e17f1417 	ldw	r5,-944(fp)
81108d04:	1809883a 	mov	r4,r3
81108d08:	110bd280 	call	8110bd28 <__mulsf3>
81108d0c:	1007883a 	mov	r3,r2
81108d10:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
81108d14:	e0ff3a04 	addi	r3,fp,-792
81108d18:	e0bf0c17 	ldw	r2,-976(fp)
81108d1c:	100491ba 	slli	r2,r2,6
81108d20:	18a9883a 	add	r20,r3,r2
81108d24:	e0bf0c17 	ldw	r2,-976(fp)
81108d28:	1085883a 	add	r2,r2,r2
81108d2c:	1085883a 	add	r2,r2,r2
81108d30:	e0ff0c04 	addi	r3,fp,-976
81108d34:	1885883a 	add	r2,r3,r2
81108d38:	10800a04 	addi	r2,r2,40
81108d3c:	10800017 	ldw	r2,0(r2)
81108d40:	102b883a 	mov	r21,r2
81108d44:	e13f0d17 	ldw	r4,-972(fp)
81108d48:	110ca500 	call	8110ca50 <__extendsfdf2>
81108d4c:	1025883a 	mov	r18,r2
81108d50:	1827883a 	mov	r19,r3
81108d54:	e13f1417 	ldw	r4,-944(fp)
81108d58:	110ca500 	call	8110ca50 <__extendsfdf2>
81108d5c:	1021883a 	mov	r16,r2
81108d60:	1823883a 	mov	r17,r3
81108d64:	e13f1517 	ldw	r4,-940(fp)
81108d68:	110ca500 	call	8110ca50 <__extendsfdf2>
81108d6c:	1009883a 	mov	r4,r2
81108d70:	180b883a 	mov	r5,r3
81108d74:	d9000315 	stw	r4,12(sp)
81108d78:	d9400415 	stw	r5,16(sp)
81108d7c:	dc000115 	stw	r16,4(sp)
81108d80:	dc400215 	stw	r17,8(sp)
81108d84:	dcc00015 	stw	r19,0(sp)
81108d88:	900f883a 	mov	r7,r18
81108d8c:	a80d883a 	mov	r6,r21
81108d90:	a00b883a 	mov	r5,r20
81108d94:	012044b4 	movhi	r4,33042
81108d98:	213d0604 	addi	r4,r4,-3048
81108d9c:	110cfdc0 	call	8110cfdc <printf>
81108da0:	00002206 	br	81108e2c <sense_log+0x638>
 	                }else if (!SIG && !MSB){
81108da4:	e0bf1017 	ldw	r2,-960(fp)
81108da8:	1000201e 	bne	r2,zero,81108e2c <sense_log+0x638>
81108dac:	e0bf1117 	ldw	r2,-956(fp)
81108db0:	10001e1e 	bne	r2,zero,81108e2c <sense_log+0x638>
 	                    fVol = -fRef*0.5;
81108db4:	e0bf0e17 	ldw	r2,-968(fp)
81108db8:	10a0003c 	xorhi	r2,r2,32768
81108dbc:	014fc034 	movhi	r5,16128
81108dc0:	1009883a 	mov	r4,r2
81108dc4:	110bd280 	call	8110bd28 <__mulsf3>
81108dc8:	1007883a 	mov	r3,r2
81108dcc:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
81108dd0:	e0ff3a04 	addi	r3,fp,-792
81108dd4:	e0bf0c17 	ldw	r2,-976(fp)
81108dd8:	100491ba 	slli	r2,r2,6
81108ddc:	18a1883a 	add	r16,r3,r2
81108de0:	e0bf0c17 	ldw	r2,-976(fp)
81108de4:	1085883a 	add	r2,r2,r2
81108de8:	1085883a 	add	r2,r2,r2
81108dec:	e0ff0c04 	addi	r3,fp,-976
81108df0:	1885883a 	add	r2,r3,r2
81108df4:	10800a04 	addi	r2,r2,40
81108df8:	10800017 	ldw	r2,0(r2)
81108dfc:	1023883a 	mov	r17,r2
81108e00:	e13f1317 	ldw	r4,-948(fp)
81108e04:	110ca500 	call	8110ca50 <__extendsfdf2>
81108e08:	1009883a 	mov	r4,r2
81108e0c:	180b883a 	mov	r5,r3
81108e10:	d9400015 	stw	r5,0(sp)
81108e14:	200f883a 	mov	r7,r4
81108e18:	880d883a 	mov	r6,r17
81108e1c:	800b883a 	mov	r5,r16
81108e20:	012044b4 	movhi	r4,33042
81108e24:	213d1604 	addi	r4,r4,-2984
81108e28:	110cfdc0 	call	8110cfdc <printf>
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
 	        if (bSuccess){
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
81108e2c:	e0bf0c17 	ldw	r2,-976(fp)
81108e30:	10800044 	addi	r2,r2,1
81108e34:	e0bf0c15 	stw	r2,-976(fp)
81108e38:	e0bf0c17 	ldw	r2,-976(fp)
81108e3c:	10800308 	cmpgei	r2,r2,12
81108e40:	1000021e 	bne	r2,zero,81108e4c <sense_log+0x658>
81108e44:	e0bf0f17 	ldw	r2,-964(fp)
81108e48:	103ecb1e 	bne	r2,zero,81108978 <__reset+0xfb0e8978>
 	                }else if (!SIG && !MSB){
 	                    fVol = -fRef*0.5;
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
81108e4c:	012044b4 	movhi	r4,33042
81108e50:	213d1f04 	addi	r4,r4,-2948
81108e54:	110d0f80 	call	8110d0f8 <puts>
 	        }else{
 	            printf("Error\r\n");
 	        }
 }
81108e58:	00000306 	br	81108e68 <sense_log+0x674>
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
 	        }else{
 	            printf("Error\r\n");
81108e5c:	012044b4 	movhi	r4,33042
81108e60:	213d2004 	addi	r4,r4,-2944
81108e64:	110d0f80 	call	8110d0f8 <puts>
 	        }
 }
81108e68:	0001883a 	nop
81108e6c:	e6fffa04 	addi	sp,fp,-24
81108e70:	dfc00717 	ldw	ra,28(sp)
81108e74:	df000617 	ldw	fp,24(sp)
81108e78:	dd400517 	ldw	r21,20(sp)
81108e7c:	dd000417 	ldw	r20,16(sp)
81108e80:	dcc00317 	ldw	r19,12(sp)
81108e84:	dc800217 	ldw	r18,8(sp)
81108e88:	dc400117 	ldw	r17,4(sp)
81108e8c:	dc000017 	ldw	r16,0(sp)
81108e90:	dec00804 	addi	sp,sp,32
81108e94:	f800283a 	ret

81108e98 <main>:

void TestLeds(void);
bool TestDMA_M1_M2(void);
bool TestDMA_M2_M1(void);

int main(void) {
81108e98:	defff604 	addi	sp,sp,-40
81108e9c:	dfc00915 	stw	ra,36(sp)
81108ea0:	df000815 	stw	fp,32(sp)
81108ea4:	df000804 	addi	fp,sp,32

//	rstc_hold_device_reset(RSTC_DEVICE_ALL_MASK);
//	usleep(5000);
	rstc_release_device_reset(RSTC_DEVICE_ALL_MASK);
81108ea8:	0101ffc4 	movi	r4,2047
81108eac:	11038800 	call	81103880 <rstc_release_device_reset>
	usleep(5000);
81108eb0:	0104e204 	movi	r4,5000
81108eb4:	111a2000 	call	8111a200 <usleep>
	usleep(5000000);
81108eb8:	01001334 	movhi	r4,76
81108ebc:	2112d004 	addi	r4,r4,19264
81108ec0:	111a2000 	call	8111a200 <usleep>

	disable_iso_drivers();
81108ec4:	110166c0 	call	8110166c <disable_iso_drivers>
	disable_lvds_board();
81108ec8:	11016d40 	call	811016d4 <disable_lvds_board>

	usleep(50000);
81108ecc:	0130d414 	movui	r4,50000
81108ed0:	111a2000 	call	8111a200 <usleep>

	enable_iso_drivers();
81108ed4:	11016380 	call	81101638 <enable_iso_drivers>
	enable_lvds_board();
81108ed8:	11016a00 	call	811016a0 <enable_lvds_board>

	alt_8 tempFPGA = 0;
81108edc:	e03fff05 	stb	zero,-4(fp)
	alt_8 tempBoard = 0;
81108ee0:	e03fff45 	stb	zero,-3(fp)

	printf(" \n Nucleo de Sistemas Eletronicos Embarcados - MebX\n\n");
81108ee4:	012044b4 	movhi	r4,33042
81108ee8:	213de204 	addi	r4,r4,-2168
81108eec:	110d0f80 	call	8110d0f8 <puts>

	//Configura Display de 7 segmentos
	SSDP_CONFIG(SSDP_NORMAL_MODE);
81108ef0:	0009883a 	mov	r4,zero
81108ef4:	1103d580 	call	81103d58 <SSDP_CONFIG>

	comm_init_channel(&spw_a, spacewire_channel_a);
81108ef8:	01400044 	movi	r5,1
81108efc:	012044b4 	movhi	r4,33042
81108f00:	2108fc04 	addi	r4,r4,9200
81108f04:	11013d40 	call	811013d4 <comm_init_channel>
	comm_init_channel(&spw_b, spacewire_channel_b);
81108f08:	01400084 	movi	r5,2
81108f0c:	012044b4 	movhi	r4,33042
81108f10:	21089304 	addi	r4,r4,8780
81108f14:	11013d40 	call	811013d4 <comm_init_channel>
	comm_init_channel(&spw_c, spacewire_channel_c);
81108f18:	014000c4 	movi	r5,3
81108f1c:	012044b4 	movhi	r4,33042
81108f20:	21091104 	addi	r4,r4,9284
81108f24:	11013d40 	call	811013d4 <comm_init_channel>
	comm_init_channel(&spw_d, spacewire_channel_d);
81108f28:	01400104 	movi	r5,4
81108f2c:	012044b4 	movhi	r4,33042
81108f30:	2108bd04 	addi	r4,r4,8948
81108f34:	11013d40 	call	811013d4 <comm_init_channel>
	comm_init_channel(&spw_e, spacewire_channel_e);
81108f38:	01400144 	movi	r5,5
81108f3c:	012044b4 	movhi	r4,33042
81108f40:	21087e04 	addi	r4,r4,8696
81108f44:	11013d40 	call	811013d4 <comm_init_channel>
	comm_init_channel(&spw_f, spacewire_channel_f);
81108f48:	01400184 	movi	r5,6
81108f4c:	012044b4 	movhi	r4,33042
81108f50:	2108d204 	addi	r4,r4,9032
81108f54:	11013d40 	call	811013d4 <comm_init_channel>
	comm_init_channel(&spw_g, spacewire_channel_g);
81108f58:	014001c4 	movi	r5,7
81108f5c:	012044b4 	movhi	r4,33042
81108f60:	2108a804 	addi	r4,r4,8864
81108f64:	11013d40 	call	811013d4 <comm_init_channel>
	comm_init_channel(&spw_h, spacewire_channel_h);
81108f68:	01400204 	movi	r5,8
81108f6c:	012044b4 	movhi	r4,33042
81108f70:	2108e704 	addi	r4,r4,9116
81108f74:	11013d40 	call	811013d4 <comm_init_channel>
//	printf("int_cnt: %u \n", int_cnt);
//
//	spw_a.int_control.right_buffer_empty_en = FALSE;
//	comm_config_int_control(&spw_a);

	spw_a.link_config.autostart = FALSE;
81108f78:	00a044b4 	movhi	r2,33042
81108f7c:	1088fc04 	addi	r2,r2,9200
81108f80:	10000215 	stw	zero,8(r2)
	spw_a.link_config.start = FALSE;
81108f84:	00a044b4 	movhi	r2,33042
81108f88:	1088fc04 	addi	r2,r2,9200
81108f8c:	10000315 	stw	zero,12(r2)
	spw_a.link_config.disconnect = TRUE;
81108f90:	00a044b4 	movhi	r2,33042
81108f94:	1088fc04 	addi	r2,r2,9200
81108f98:	00c00044 	movi	r3,1
81108f9c:	10c00415 	stw	r3,16(r2)
	spw_b.link_config.autostart = FALSE;
81108fa0:	00a044b4 	movhi	r2,33042
81108fa4:	10889304 	addi	r2,r2,8780
81108fa8:	10000215 	stw	zero,8(r2)
	spw_b.link_config.start = FALSE;
81108fac:	00a044b4 	movhi	r2,33042
81108fb0:	10889304 	addi	r2,r2,8780
81108fb4:	10000315 	stw	zero,12(r2)
	spw_b.link_config.disconnect = TRUE;
81108fb8:	00a044b4 	movhi	r2,33042
81108fbc:	10889304 	addi	r2,r2,8780
81108fc0:	00c00044 	movi	r3,1
81108fc4:	10c00415 	stw	r3,16(r2)
	spw_c.link_config.autostart = FALSE;
81108fc8:	00a044b4 	movhi	r2,33042
81108fcc:	10891104 	addi	r2,r2,9284
81108fd0:	10000215 	stw	zero,8(r2)
	spw_c.link_config.start = FALSE;
81108fd4:	00a044b4 	movhi	r2,33042
81108fd8:	10891104 	addi	r2,r2,9284
81108fdc:	10000315 	stw	zero,12(r2)
	spw_c.link_config.disconnect = TRUE;
81108fe0:	00a044b4 	movhi	r2,33042
81108fe4:	10891104 	addi	r2,r2,9284
81108fe8:	00c00044 	movi	r3,1
81108fec:	10c00415 	stw	r3,16(r2)
	spw_d.link_config.autostart = FALSE;
81108ff0:	00a044b4 	movhi	r2,33042
81108ff4:	1088bd04 	addi	r2,r2,8948
81108ff8:	10000215 	stw	zero,8(r2)
	spw_d.link_config.start = FALSE;
81108ffc:	00a044b4 	movhi	r2,33042
81109000:	1088bd04 	addi	r2,r2,8948
81109004:	10000315 	stw	zero,12(r2)
	spw_d.link_config.disconnect = TRUE;
81109008:	00a044b4 	movhi	r2,33042
8110900c:	1088bd04 	addi	r2,r2,8948
81109010:	00c00044 	movi	r3,1
81109014:	10c00415 	stw	r3,16(r2)
	spw_e.link_config.autostart = FALSE;
81109018:	00a044b4 	movhi	r2,33042
8110901c:	10887e04 	addi	r2,r2,8696
81109020:	10000215 	stw	zero,8(r2)
	spw_e.link_config.start = FALSE;
81109024:	00a044b4 	movhi	r2,33042
81109028:	10887e04 	addi	r2,r2,8696
8110902c:	10000315 	stw	zero,12(r2)
	spw_e.link_config.disconnect = TRUE;
81109030:	00a044b4 	movhi	r2,33042
81109034:	10887e04 	addi	r2,r2,8696
81109038:	00c00044 	movi	r3,1
8110903c:	10c00415 	stw	r3,16(r2)
	spw_f.link_config.autostart = FALSE;
81109040:	00a044b4 	movhi	r2,33042
81109044:	1088d204 	addi	r2,r2,9032
81109048:	10000215 	stw	zero,8(r2)
	spw_f.link_config.start = FALSE;
8110904c:	00a044b4 	movhi	r2,33042
81109050:	1088d204 	addi	r2,r2,9032
81109054:	10000315 	stw	zero,12(r2)
	spw_f.link_config.disconnect = TRUE;
81109058:	00a044b4 	movhi	r2,33042
8110905c:	1088d204 	addi	r2,r2,9032
81109060:	00c00044 	movi	r3,1
81109064:	10c00415 	stw	r3,16(r2)
	spw_g.link_config.autostart = FALSE;
81109068:	00a044b4 	movhi	r2,33042
8110906c:	1088a804 	addi	r2,r2,8864
81109070:	10000215 	stw	zero,8(r2)
	spw_g.link_config.start = FALSE;
81109074:	00a044b4 	movhi	r2,33042
81109078:	1088a804 	addi	r2,r2,8864
8110907c:	10000315 	stw	zero,12(r2)
	spw_g.link_config.disconnect = TRUE;
81109080:	00a044b4 	movhi	r2,33042
81109084:	1088a804 	addi	r2,r2,8864
81109088:	00c00044 	movi	r3,1
8110908c:	10c00415 	stw	r3,16(r2)
	spw_h.link_config.autostart = FALSE;
81109090:	00a044b4 	movhi	r2,33042
81109094:	1088e704 	addi	r2,r2,9116
81109098:	10000215 	stw	zero,8(r2)
	spw_h.link_config.start = FALSE;
8110909c:	00a044b4 	movhi	r2,33042
811090a0:	1088e704 	addi	r2,r2,9116
811090a4:	10000315 	stw	zero,12(r2)
	spw_h.link_config.disconnect = TRUE;
811090a8:	00a044b4 	movhi	r2,33042
811090ac:	1088e704 	addi	r2,r2,9116
811090b0:	00c00044 	movi	r3,1
811090b4:	10c00415 	stw	r3,16(r2)
	comm_config_link(&spw_a);
811090b8:	012044b4 	movhi	r4,33042
811090bc:	2108fc04 	addi	r4,r4,9200
811090c0:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_b);
811090c4:	012044b4 	movhi	r4,33042
811090c8:	21089304 	addi	r4,r4,8780
811090cc:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_c);
811090d0:	012044b4 	movhi	r4,33042
811090d4:	21091104 	addi	r4,r4,9284
811090d8:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_d);
811090dc:	012044b4 	movhi	r4,33042
811090e0:	2108bd04 	addi	r4,r4,8948
811090e4:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_e);
811090e8:	012044b4 	movhi	r4,33042
811090ec:	21087e04 	addi	r4,r4,8696
811090f0:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_f);
811090f4:	012044b4 	movhi	r4,33042
811090f8:	2108d204 	addi	r4,r4,9032
811090fc:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_g);
81109100:	012044b4 	movhi	r4,33042
81109104:	2108a804 	addi	r4,r4,8864
81109108:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_h);
8110910c:	012044b4 	movhi	r4,33042
81109110:	2108e704 	addi	r4,r4,9116
81109114:	1100d300 	call	81100d30 <comm_config_link>

	usleep(50000);
81109118:	0130d414 	movui	r4,50000
8110911c:	111a2000 	call	8111a200 <usleep>
	usleep(5000000);
81109120:	01001334 	movhi	r4,76
81109124:	2112d004 	addi	r4,r4,19264
81109128:	111a2000 	call	8111a200 <usleep>

	spw_a.windowing_config.masking = TRUE;
8110912c:	00a044b4 	movhi	r2,33042
81109130:	1088fc04 	addi	r2,r2,9200
81109134:	00c00044 	movi	r3,1
81109138:	10c00115 	stw	r3,4(r2)
	spw_a.link_config.autostart = TRUE;
8110913c:	00a044b4 	movhi	r2,33042
81109140:	1088fc04 	addi	r2,r2,9200
81109144:	00c00044 	movi	r3,1
81109148:	10c00215 	stw	r3,8(r2)
//	spw_a.link_config.start = TRUE;
	spw_a.link_config.disconnect = FALSE;
8110914c:	00a044b4 	movhi	r2,33042
81109150:	1088fc04 	addi	r2,r2,9200
81109154:	10000415 	stw	zero,16(r2)
	spw_b.windowing_config.masking = TRUE;
81109158:	00a044b4 	movhi	r2,33042
8110915c:	10889304 	addi	r2,r2,8780
81109160:	00c00044 	movi	r3,1
81109164:	10c00115 	stw	r3,4(r2)
	spw_b.link_config.autostart = TRUE;
81109168:	00a044b4 	movhi	r2,33042
8110916c:	10889304 	addi	r2,r2,8780
81109170:	00c00044 	movi	r3,1
81109174:	10c00215 	stw	r3,8(r2)
//	spw_b.link_config.start = TRUE;
	spw_b.link_config.disconnect = FALSE;
81109178:	00a044b4 	movhi	r2,33042
8110917c:	10889304 	addi	r2,r2,8780
81109180:	10000415 	stw	zero,16(r2)
	spw_c.windowing_config.masking = TRUE;
81109184:	00a044b4 	movhi	r2,33042
81109188:	10891104 	addi	r2,r2,9284
8110918c:	00c00044 	movi	r3,1
81109190:	10c00115 	stw	r3,4(r2)
	spw_c.link_config.autostart = TRUE;
81109194:	00a044b4 	movhi	r2,33042
81109198:	10891104 	addi	r2,r2,9284
8110919c:	00c00044 	movi	r3,1
811091a0:	10c00215 	stw	r3,8(r2)
//	spw_c.link_config.start = TRUE;
	spw_c.link_config.disconnect = FALSE;
811091a4:	00a044b4 	movhi	r2,33042
811091a8:	10891104 	addi	r2,r2,9284
811091ac:	10000415 	stw	zero,16(r2)
	spw_d.windowing_config.masking = TRUE;
811091b0:	00a044b4 	movhi	r2,33042
811091b4:	1088bd04 	addi	r2,r2,8948
811091b8:	00c00044 	movi	r3,1
811091bc:	10c00115 	stw	r3,4(r2)
	spw_d.link_config.autostart = TRUE;
811091c0:	00a044b4 	movhi	r2,33042
811091c4:	1088bd04 	addi	r2,r2,8948
811091c8:	00c00044 	movi	r3,1
811091cc:	10c00215 	stw	r3,8(r2)
//	spw_d.link_config.start = TRUE;
	spw_d.link_config.disconnect = FALSE;
811091d0:	00a044b4 	movhi	r2,33042
811091d4:	1088bd04 	addi	r2,r2,8948
811091d8:	10000415 	stw	zero,16(r2)
	spw_e.windowing_config.masking = TRUE;
811091dc:	00a044b4 	movhi	r2,33042
811091e0:	10887e04 	addi	r2,r2,8696
811091e4:	00c00044 	movi	r3,1
811091e8:	10c00115 	stw	r3,4(r2)
	spw_e.link_config.autostart = TRUE;
811091ec:	00a044b4 	movhi	r2,33042
811091f0:	10887e04 	addi	r2,r2,8696
811091f4:	00c00044 	movi	r3,1
811091f8:	10c00215 	stw	r3,8(r2)
//	spw_e.link_config.start = TRUE;
	spw_e.link_config.disconnect = FALSE;
811091fc:	00a044b4 	movhi	r2,33042
81109200:	10887e04 	addi	r2,r2,8696
81109204:	10000415 	stw	zero,16(r2)
	spw_f.windowing_config.masking = TRUE;
81109208:	00a044b4 	movhi	r2,33042
8110920c:	1088d204 	addi	r2,r2,9032
81109210:	00c00044 	movi	r3,1
81109214:	10c00115 	stw	r3,4(r2)
	spw_f.link_config.autostart = TRUE;
81109218:	00a044b4 	movhi	r2,33042
8110921c:	1088d204 	addi	r2,r2,9032
81109220:	00c00044 	movi	r3,1
81109224:	10c00215 	stw	r3,8(r2)
//	spw_f.link_config.start = TRUE;
	spw_f.link_config.disconnect = FALSE;
81109228:	00a044b4 	movhi	r2,33042
8110922c:	1088d204 	addi	r2,r2,9032
81109230:	10000415 	stw	zero,16(r2)
	spw_g.windowing_config.masking = TRUE;
81109234:	00a044b4 	movhi	r2,33042
81109238:	1088a804 	addi	r2,r2,8864
8110923c:	00c00044 	movi	r3,1
81109240:	10c00115 	stw	r3,4(r2)
	spw_g.link_config.autostart = TRUE;
81109244:	00a044b4 	movhi	r2,33042
81109248:	1088a804 	addi	r2,r2,8864
8110924c:	00c00044 	movi	r3,1
81109250:	10c00215 	stw	r3,8(r2)
//	spw_g.link_config.start = TRUE;
	spw_g.link_config.disconnect = FALSE;
81109254:	00a044b4 	movhi	r2,33042
81109258:	1088a804 	addi	r2,r2,8864
8110925c:	10000415 	stw	zero,16(r2)
	spw_h.windowing_config.masking = TRUE;
81109260:	00a044b4 	movhi	r2,33042
81109264:	1088e704 	addi	r2,r2,9116
81109268:	00c00044 	movi	r3,1
8110926c:	10c00115 	stw	r3,4(r2)
	spw_h.link_config.autostart = TRUE;
81109270:	00a044b4 	movhi	r2,33042
81109274:	1088e704 	addi	r2,r2,9116
81109278:	00c00044 	movi	r3,1
8110927c:	10c00215 	stw	r3,8(r2)
//	spw_h.link_config.start = TRUE;
	spw_h.link_config.disconnect = FALSE;
81109280:	00a044b4 	movhi	r2,33042
81109284:	1088e704 	addi	r2,r2,9116
81109288:	10000415 	stw	zero,16(r2)
	comm_config_windowing(&spw_a);
8110928c:	012044b4 	movhi	r4,33042
81109290:	2108fc04 	addi	r4,r4,9200
81109294:	1100c100 	call	81100c10 <comm_config_windowing>
	comm_config_windowing(&spw_b);
81109298:	012044b4 	movhi	r4,33042
8110929c:	21089304 	addi	r4,r4,8780
811092a0:	1100c100 	call	81100c10 <comm_config_windowing>
	comm_config_windowing(&spw_c);
811092a4:	012044b4 	movhi	r4,33042
811092a8:	21091104 	addi	r4,r4,9284
811092ac:	1100c100 	call	81100c10 <comm_config_windowing>
	comm_config_windowing(&spw_d);
811092b0:	012044b4 	movhi	r4,33042
811092b4:	2108bd04 	addi	r4,r4,8948
811092b8:	1100c100 	call	81100c10 <comm_config_windowing>
	comm_config_windowing(&spw_e);
811092bc:	012044b4 	movhi	r4,33042
811092c0:	21087e04 	addi	r4,r4,8696
811092c4:	1100c100 	call	81100c10 <comm_config_windowing>
	comm_config_windowing(&spw_f);
811092c8:	012044b4 	movhi	r4,33042
811092cc:	2108d204 	addi	r4,r4,9032
811092d0:	1100c100 	call	81100c10 <comm_config_windowing>
	comm_config_windowing(&spw_g);
811092d4:	012044b4 	movhi	r4,33042
811092d8:	2108a804 	addi	r4,r4,8864
811092dc:	1100c100 	call	81100c10 <comm_config_windowing>
	comm_config_windowing(&spw_h);
811092e0:	012044b4 	movhi	r4,33042
811092e4:	2108e704 	addi	r4,r4,9116
811092e8:	1100c100 	call	81100c10 <comm_config_windowing>
	comm_config_link(&spw_a);
811092ec:	012044b4 	movhi	r4,33042
811092f0:	2108fc04 	addi	r4,r4,9200
811092f4:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_b);
811092f8:	012044b4 	movhi	r4,33042
811092fc:	21089304 	addi	r4,r4,8780
81109300:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_c);
81109304:	012044b4 	movhi	r4,33042
81109308:	21091104 	addi	r4,r4,9284
8110930c:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_d);
81109310:	012044b4 	movhi	r4,33042
81109314:	2108bd04 	addi	r4,r4,8948
81109318:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_e);
8110931c:	012044b4 	movhi	r4,33042
81109320:	21087e04 	addi	r4,r4,8696
81109324:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_f);
81109328:	012044b4 	movhi	r4,33042
8110932c:	2108d204 	addi	r4,r4,9032
81109330:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_g);
81109334:	012044b4 	movhi	r4,33042
81109338:	2108a804 	addi	r4,r4,8864
8110933c:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_h);
81109340:	012044b4 	movhi	r4,33042
81109344:	2108e704 	addi	r4,r4,9116
81109348:	1100d300 	call	81100d30 <comm_config_link>
//	comm_config_link(&spw_h);
//
//	comm_update_link(&spw_h);
//	printf("empty r: %u \n", spw_h.link_config.autostart);

	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_POWER_MASK);
8110934c:	01400074 	movhi	r5,1
81109350:	01000044 	movi	r4,1
81109354:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>

	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1G_MASK);
81109358:	01400044 	movi	r5,1
8110935c:	0009883a 	mov	r4,zero
81109360:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1R_MASK);
81109364:	01400084 	movi	r5,2
81109368:	01000044 	movi	r4,1
8110936c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_2G_MASK);
81109370:	01400104 	movi	r5,4
81109374:	0009883a 	mov	r4,zero
81109378:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_2R_MASK);
8110937c:	01400204 	movi	r5,8
81109380:	01000044 	movi	r4,1
81109384:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_3G_MASK);
81109388:	01400404 	movi	r5,16
8110938c:	0009883a 	mov	r4,zero
81109390:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_3R_MASK);
81109394:	01400804 	movi	r5,32
81109398:	01000044 	movi	r4,1
8110939c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_4G_MASK);
811093a0:	01401004 	movi	r5,64
811093a4:	0009883a 	mov	r4,zero
811093a8:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_4R_MASK);
811093ac:	01402004 	movi	r5,128
811093b0:	01000044 	movi	r4,1
811093b4:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_5G_MASK);
811093b8:	01404004 	movi	r5,256
811093bc:	0009883a 	mov	r4,zero
811093c0:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_5R_MASK);
811093c4:	01408004 	movi	r5,512
811093c8:	01000044 	movi	r4,1
811093cc:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_6G_MASK);
811093d0:	01410004 	movi	r5,1024
811093d4:	0009883a 	mov	r4,zero
811093d8:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_6R_MASK);
811093dc:	01420004 	movi	r5,2048
811093e0:	01000044 	movi	r4,1
811093e4:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_7G_MASK);
811093e8:	01440004 	movi	r5,4096
811093ec:	0009883a 	mov	r4,zero
811093f0:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_7R_MASK);
811093f4:	01480004 	movi	r5,8192
811093f8:	01000044 	movi	r4,1
811093fc:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8G_MASK);
81109400:	01500004 	movi	r5,16384
81109404:	0009883a 	mov	r4,zero
81109408:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
8110940c:	01600014 	movui	r5,32768
81109410:	01000044 	movi	r4,1
81109414:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>

//	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_ALL_MASK);
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_1_MASK);
81109418:	014000b4 	movhi	r5,2
8110941c:	01000044 	movi	r4,1
81109420:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_3_MASK);
81109424:	01400234 	movhi	r5,8
81109428:	01000044 	movi	r4,1
8110942c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
//
//	printf("esperando \n");
////	getchar();
//	printf("foi \n");

	DDR2_SWITCH_MEMORY(DDR2_M1_ID);
81109430:	01000044 	movi	r4,1
81109434:	1106bfc0 	call	81106bfc <DDR2_SWITCH_MEMORY>
	alt_u32 Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81109438:	e03ffa15 	stw	zero,-24(fp)

	alt_u32 *pDDR;
	pDDR = (alt_u32 *) Ddr2Base;
8110943c:	e0bffa17 	ldw	r2,-24(fp)
81109440:	e0bffb15 	stw	r2,-20(fp)
//	pDDR++;
//	printf("add : %u \n", *pDDR);

// buffer: 2176 B -> 544 dwords

	int data_counter = 0;
81109444:	e03ffc15 	stw	zero,-16(fp)

	fee_buffer_data_block_t *buffer_data_m1 =
81109448:	e0bffa17 	ldw	r2,-24(fp)
8110944c:	e0bffd15 	stw	r2,-12(fp)
			(fee_buffer_data_block_t *) Ddr2Base;

	buffer_data_m1->pixel_data_block[0].pixel[0] = 0x0100;
81109450:	e0bffd17 	ldw	r2,-12(fp)
81109454:	00c04004 	movi	r3,256
81109458:	10c0000d 	sth	r3,0(r2)
	buffer_data_m1->pixel_data_block[0].pixel[1] = 0x0302;
8110945c:	e0bffd17 	ldw	r2,-12(fp)
81109460:	00c0c084 	movi	r3,770
81109464:	10c0008d 	sth	r3,2(r2)
	buffer_data_m1->pixel_data_block[0].pixel[2] = 0x0504;
81109468:	e0bffd17 	ldw	r2,-12(fp)
8110946c:	00c14104 	movi	r3,1284
81109470:	10c0010d 	sth	r3,4(r2)
	buffer_data_m1->pixel_data_block[0].pixel[3] = 0x0706;
81109474:	e0bffd17 	ldw	r2,-12(fp)
81109478:	00c1c184 	movi	r3,1798
8110947c:	10c0018d 	sth	r3,6(r2)
	buffer_data_m1->pixel_data_block[0].pixel[4] = 0x0908;
81109480:	e0bffd17 	ldw	r2,-12(fp)
81109484:	00c24204 	movi	r3,2312
81109488:	10c0020d 	sth	r3,8(r2)
	buffer_data_m1->pixel_data_block[0].pixel[5] = 0x0B0A;
8110948c:	e0bffd17 	ldw	r2,-12(fp)
81109490:	00c2c284 	movi	r3,2826
81109494:	10c0028d 	sth	r3,10(r2)
	buffer_data_m1->pixel_data_block[0].pixel[6] = 0x0D0C;
81109498:	e0bffd17 	ldw	r2,-12(fp)
8110949c:	00c34304 	movi	r3,3340
811094a0:	10c0030d 	sth	r3,12(r2)
	buffer_data_m1->pixel_data_block[0].pixel[7] = 0x0F0E;
811094a4:	e0bffd17 	ldw	r2,-12(fp)
811094a8:	00c3c384 	movi	r3,3854
811094ac:	10c0038d 	sth	r3,14(r2)
	buffer_data_m1->pixel_data_block[0].pixel[8] = 0x1110;
811094b0:	e0bffd17 	ldw	r2,-12(fp)
811094b4:	00c44404 	movi	r3,4368
811094b8:	10c0040d 	sth	r3,16(r2)
	buffer_data_m1->pixel_data_block[0].pixel[9] = 0x1312;
811094bc:	e0bffd17 	ldw	r2,-12(fp)
811094c0:	00c4c484 	movi	r3,4882
811094c4:	10c0048d 	sth	r3,18(r2)
	buffer_data_m1->pixel_data_block[0].pixel[10] = 0x1514;
811094c8:	e0bffd17 	ldw	r2,-12(fp)
811094cc:	00c54504 	movi	r3,5396
811094d0:	10c0050d 	sth	r3,20(r2)
	buffer_data_m1->pixel_data_block[0].pixel[11] = 0x1716;
811094d4:	e0bffd17 	ldw	r2,-12(fp)
811094d8:	00c5c584 	movi	r3,5910
811094dc:	10c0058d 	sth	r3,22(r2)
	buffer_data_m1->pixel_data_block[0].pixel[12] = 0x1918;
811094e0:	e0bffd17 	ldw	r2,-12(fp)
811094e4:	00c64604 	movi	r3,6424
811094e8:	10c0060d 	sth	r3,24(r2)
	buffer_data_m1->pixel_data_block[0].pixel[13] = 0x1B1A;
811094ec:	e0bffd17 	ldw	r2,-12(fp)
811094f0:	00c6c684 	movi	r3,6938
811094f4:	10c0068d 	sth	r3,26(r2)
	buffer_data_m1->pixel_data_block[0].pixel[14] = 0x1D1C;
811094f8:	e0bffd17 	ldw	r2,-12(fp)
811094fc:	00c74704 	movi	r3,7452
81109500:	10c0070d 	sth	r3,28(r2)
	buffer_data_m1->pixel_data_block[0].pixel[15] = 0x1F1E;
81109504:	e0bffd17 	ldw	r2,-12(fp)
81109508:	00c7c784 	movi	r3,7966
8110950c:	10c0078d 	sth	r3,30(r2)
	buffer_data_m1->pixel_data_block[0].pixel[16] = 0x2120;
81109510:	e0bffd17 	ldw	r2,-12(fp)
81109514:	00c84804 	movi	r3,8480
81109518:	10c0080d 	sth	r3,32(r2)
	buffer_data_m1->pixel_data_block[0].pixel[17] = 0x2322;
8110951c:	e0bffd17 	ldw	r2,-12(fp)
81109520:	00c8c884 	movi	r3,8994
81109524:	10c0088d 	sth	r3,34(r2)
	buffer_data_m1->pixel_data_block[0].pixel[18] = 0x2524;
81109528:	e0bffd17 	ldw	r2,-12(fp)
8110952c:	00c94904 	movi	r3,9508
81109530:	10c0090d 	sth	r3,36(r2)
	buffer_data_m1->pixel_data_block[0].pixel[19] = 0x2726;
81109534:	e0bffd17 	ldw	r2,-12(fp)
81109538:	00c9c984 	movi	r3,10022
8110953c:	10c0098d 	sth	r3,38(r2)
	buffer_data_m1->pixel_data_block[0].pixel[20] = 0x2928;
81109540:	e0bffd17 	ldw	r2,-12(fp)
81109544:	00ca4a04 	movi	r3,10536
81109548:	10c00a0d 	sth	r3,40(r2)
	buffer_data_m1->pixel_data_block[0].pixel[21] = 0x2B2A;
8110954c:	e0bffd17 	ldw	r2,-12(fp)
81109550:	00caca84 	movi	r3,11050
81109554:	10c00a8d 	sth	r3,42(r2)
	buffer_data_m1->pixel_data_block[0].pixel[22] = 0x2D2C;
81109558:	e0bffd17 	ldw	r2,-12(fp)
8110955c:	00cb4b04 	movi	r3,11564
81109560:	10c00b0d 	sth	r3,44(r2)
	buffer_data_m1->pixel_data_block[0].pixel[23] = 0x2F2E;
81109564:	e0bffd17 	ldw	r2,-12(fp)
81109568:	00cbcb84 	movi	r3,12078
8110956c:	10c00b8d 	sth	r3,46(r2)
	buffer_data_m1->pixel_data_block[0].pixel[24] = 0x3130;
81109570:	e0bffd17 	ldw	r2,-12(fp)
81109574:	00cc4c04 	movi	r3,12592
81109578:	10c00c0d 	sth	r3,48(r2)
	buffer_data_m1->pixel_data_block[0].pixel[25] = 0x3332;
8110957c:	e0bffd17 	ldw	r2,-12(fp)
81109580:	00cccc84 	movi	r3,13106
81109584:	10c00c8d 	sth	r3,50(r2)
	buffer_data_m1->pixel_data_block[0].pixel[26] = 0x3534;
81109588:	e0bffd17 	ldw	r2,-12(fp)
8110958c:	00cd4d04 	movi	r3,13620
81109590:	10c00d0d 	sth	r3,52(r2)
	buffer_data_m1->pixel_data_block[0].pixel[27] = 0x3736;
81109594:	e0bffd17 	ldw	r2,-12(fp)
81109598:	00cdcd84 	movi	r3,14134
8110959c:	10c00d8d 	sth	r3,54(r2)
	buffer_data_m1->pixel_data_block[0].pixel[28] = 0x3938;
811095a0:	e0bffd17 	ldw	r2,-12(fp)
811095a4:	00ce4e04 	movi	r3,14648
811095a8:	10c00e0d 	sth	r3,56(r2)
	buffer_data_m1->pixel_data_block[0].pixel[29] = 0x3B3A;
811095ac:	e0bffd17 	ldw	r2,-12(fp)
811095b0:	00cece84 	movi	r3,15162
811095b4:	10c00e8d 	sth	r3,58(r2)
	buffer_data_m1->pixel_data_block[0].pixel[30] = 0x3D3C;
811095b8:	e0bffd17 	ldw	r2,-12(fp)
811095bc:	00cf4f04 	movi	r3,15676
811095c0:	10c00f0d 	sth	r3,60(r2)
	buffer_data_m1->pixel_data_block[0].pixel[31] = 0x3F3E;
811095c4:	e0bffd17 	ldw	r2,-12(fp)
811095c8:	00cfcf84 	movi	r3,16190
811095cc:	10c00f8d 	sth	r3,62(r2)
	buffer_data_m1->pixel_data_block[0].pixel[32] = 0x4140;
811095d0:	e0bffd17 	ldw	r2,-12(fp)
811095d4:	00d05004 	movi	r3,16704
811095d8:	10c0100d 	sth	r3,64(r2)
	buffer_data_m1->pixel_data_block[0].pixel[33] = 0x4342;
811095dc:	e0bffd17 	ldw	r2,-12(fp)
811095e0:	00d0d084 	movi	r3,17218
811095e4:	10c0108d 	sth	r3,66(r2)
	buffer_data_m1->pixel_data_block[0].pixel[34] = 0x4544;
811095e8:	e0bffd17 	ldw	r2,-12(fp)
811095ec:	00d15104 	movi	r3,17732
811095f0:	10c0110d 	sth	r3,68(r2)
	buffer_data_m1->pixel_data_block[0].pixel[35] = 0x4746;
811095f4:	e0bffd17 	ldw	r2,-12(fp)
811095f8:	00d1d184 	movi	r3,18246
811095fc:	10c0118d 	sth	r3,70(r2)
	buffer_data_m1->pixel_data_block[0].pixel[36] = 0x4948;
81109600:	e0bffd17 	ldw	r2,-12(fp)
81109604:	00d25204 	movi	r3,18760
81109608:	10c0120d 	sth	r3,72(r2)
	buffer_data_m1->pixel_data_block[0].pixel[37] = 0x4B4A;
8110960c:	e0bffd17 	ldw	r2,-12(fp)
81109610:	00d2d284 	movi	r3,19274
81109614:	10c0128d 	sth	r3,74(r2)
	buffer_data_m1->pixel_data_block[0].pixel[38] = 0x4D4C;
81109618:	e0bffd17 	ldw	r2,-12(fp)
8110961c:	00d35304 	movi	r3,19788
81109620:	10c0130d 	sth	r3,76(r2)
	buffer_data_m1->pixel_data_block[0].pixel[39] = 0x4F4E;
81109624:	e0bffd17 	ldw	r2,-12(fp)
81109628:	00d3d384 	movi	r3,20302
8110962c:	10c0138d 	sth	r3,78(r2)
	buffer_data_m1->pixel_data_block[0].pixel[40] = 0x5150;
81109630:	e0bffd17 	ldw	r2,-12(fp)
81109634:	00d45404 	movi	r3,20816
81109638:	10c0140d 	sth	r3,80(r2)
	buffer_data_m1->pixel_data_block[0].pixel[41] = 0x5352;
8110963c:	e0bffd17 	ldw	r2,-12(fp)
81109640:	00d4d484 	movi	r3,21330
81109644:	10c0148d 	sth	r3,82(r2)
	buffer_data_m1->pixel_data_block[0].pixel[42] = 0x5554;
81109648:	e0bffd17 	ldw	r2,-12(fp)
8110964c:	00d55504 	movi	r3,21844
81109650:	10c0150d 	sth	r3,84(r2)
	buffer_data_m1->pixel_data_block[0].pixel[43] = 0x5756;
81109654:	e0bffd17 	ldw	r2,-12(fp)
81109658:	00d5d584 	movi	r3,22358
8110965c:	10c0158d 	sth	r3,86(r2)
	buffer_data_m1->pixel_data_block[0].pixel[44] = 0x5958;
81109660:	e0bffd17 	ldw	r2,-12(fp)
81109664:	00d65604 	movi	r3,22872
81109668:	10c0160d 	sth	r3,88(r2)
	buffer_data_m1->pixel_data_block[0].pixel[45] = 0x5B5A;
8110966c:	e0bffd17 	ldw	r2,-12(fp)
81109670:	00d6d684 	movi	r3,23386
81109674:	10c0168d 	sth	r3,90(r2)
	buffer_data_m1->pixel_data_block[0].pixel[46] = 0x5D5C;
81109678:	e0bffd17 	ldw	r2,-12(fp)
8110967c:	00d75704 	movi	r3,23900
81109680:	10c0170d 	sth	r3,92(r2)
	buffer_data_m1->pixel_data_block[0].pixel[47] = 0x5F5E;
81109684:	e0bffd17 	ldw	r2,-12(fp)
81109688:	00d7d784 	movi	r3,24414
8110968c:	10c0178d 	sth	r3,94(r2)
	buffer_data_m1->pixel_data_block[0].pixel[48] = 0x6160;
81109690:	e0bffd17 	ldw	r2,-12(fp)
81109694:	00d85804 	movi	r3,24928
81109698:	10c0180d 	sth	r3,96(r2)
	buffer_data_m1->pixel_data_block[0].pixel[49] = 0x6362;
8110969c:	e0bffd17 	ldw	r2,-12(fp)
811096a0:	00d8d884 	movi	r3,25442
811096a4:	10c0188d 	sth	r3,98(r2)
	buffer_data_m1->pixel_data_block[0].pixel[50] = 0x6564;
811096a8:	e0bffd17 	ldw	r2,-12(fp)
811096ac:	00d95904 	movi	r3,25956
811096b0:	10c0190d 	sth	r3,100(r2)
	buffer_data_m1->pixel_data_block[0].pixel[51] = 0x6766;
811096b4:	e0bffd17 	ldw	r2,-12(fp)
811096b8:	00d9d984 	movi	r3,26470
811096bc:	10c0198d 	sth	r3,102(r2)
	buffer_data_m1->pixel_data_block[0].pixel[52] = 0x6968;
811096c0:	e0bffd17 	ldw	r2,-12(fp)
811096c4:	00da5a04 	movi	r3,26984
811096c8:	10c01a0d 	sth	r3,104(r2)
	buffer_data_m1->pixel_data_block[0].pixel[53] = 0x6B6A;
811096cc:	e0bffd17 	ldw	r2,-12(fp)
811096d0:	00dada84 	movi	r3,27498
811096d4:	10c01a8d 	sth	r3,106(r2)
	buffer_data_m1->pixel_data_block[0].pixel[54] = 0x6D6C;
811096d8:	e0bffd17 	ldw	r2,-12(fp)
811096dc:	00db5b04 	movi	r3,28012
811096e0:	10c01b0d 	sth	r3,108(r2)
	buffer_data_m1->pixel_data_block[0].pixel[55] = 0x6F6E;
811096e4:	e0bffd17 	ldw	r2,-12(fp)
811096e8:	00dbdb84 	movi	r3,28526
811096ec:	10c01b8d 	sth	r3,110(r2)
	buffer_data_m1->pixel_data_block[0].pixel[56] = 0x7170;
811096f0:	e0bffd17 	ldw	r2,-12(fp)
811096f4:	00dc5c04 	movi	r3,29040
811096f8:	10c01c0d 	sth	r3,112(r2)
	buffer_data_m1->pixel_data_block[0].pixel[57] = 0x7372;
811096fc:	e0bffd17 	ldw	r2,-12(fp)
81109700:	00dcdc84 	movi	r3,29554
81109704:	10c01c8d 	sth	r3,114(r2)
	buffer_data_m1->pixel_data_block[0].pixel[58] = 0x7574;
81109708:	e0bffd17 	ldw	r2,-12(fp)
8110970c:	00dd5d04 	movi	r3,30068
81109710:	10c01d0d 	sth	r3,116(r2)
	buffer_data_m1->pixel_data_block[0].pixel[59] = 0x7776;
81109714:	e0bffd17 	ldw	r2,-12(fp)
81109718:	00dddd84 	movi	r3,30582
8110971c:	10c01d8d 	sth	r3,118(r2)
	buffer_data_m1->pixel_data_block[0].pixel[60] = 0x7978;
81109720:	e0bffd17 	ldw	r2,-12(fp)
81109724:	00de5e04 	movi	r3,31096
81109728:	10c01e0d 	sth	r3,120(r2)
	buffer_data_m1->pixel_data_block[0].pixel[61] = 0x7B7A;
8110972c:	e0bffd17 	ldw	r2,-12(fp)
81109730:	00dede84 	movi	r3,31610
81109734:	10c01e8d 	sth	r3,122(r2)
	buffer_data_m1->pixel_data_block[0].pixel[62] = 0x7D7C;
81109738:	e0bffd17 	ldw	r2,-12(fp)
8110973c:	00df5f04 	movi	r3,32124
81109740:	10c01f0d 	sth	r3,124(r2)
	buffer_data_m1->pixel_data_block[0].pixel[63] = 0x7F7E;
81109744:	e0bffd17 	ldw	r2,-12(fp)
81109748:	00dfdf84 	movi	r3,32638
8110974c:	10c01f8d 	sth	r3,126(r2)
	buffer_data_m1->pixel_data_block[0].mask = 0xFFFFFFFFFFFFFFFF;
81109750:	e0bffd17 	ldw	r2,-12(fp)
81109754:	00ffffc4 	movi	r3,-1
81109758:	10c02015 	stw	r3,128(r2)
8110975c:	00ffffc4 	movi	r3,-1
81109760:	10c02115 	stw	r3,132(r2)

	buffer_data_m1->pixel_data_block[1].pixel[0] = 0x8180;
81109764:	e0bffd17 	ldw	r2,-12(fp)
81109768:	00e06004 	movi	r3,-32384
8110976c:	10c0220d 	sth	r3,136(r2)
	buffer_data_m1->pixel_data_block[1].pixel[1] = 0x8382;
81109770:	e0bffd17 	ldw	r2,-12(fp)
81109774:	00e0e084 	movi	r3,-31870
81109778:	10c0228d 	sth	r3,138(r2)
	buffer_data_m1->pixel_data_block[1].pixel[2] = 0x8584;
8110977c:	e0bffd17 	ldw	r2,-12(fp)
81109780:	00e16104 	movi	r3,-31356
81109784:	10c0230d 	sth	r3,140(r2)
	buffer_data_m1->pixel_data_block[1].pixel[3] = 0x8786;
81109788:	e0bffd17 	ldw	r2,-12(fp)
8110978c:	00e1e184 	movi	r3,-30842
81109790:	10c0238d 	sth	r3,142(r2)
	buffer_data_m1->pixel_data_block[1].pixel[4] = 0x8988;
81109794:	e0bffd17 	ldw	r2,-12(fp)
81109798:	00e26204 	movi	r3,-30328
8110979c:	10c0240d 	sth	r3,144(r2)
	buffer_data_m1->pixel_data_block[1].pixel[5] = 0x8B8A;
811097a0:	e0bffd17 	ldw	r2,-12(fp)
811097a4:	00e2e284 	movi	r3,-29814
811097a8:	10c0248d 	sth	r3,146(r2)
	buffer_data_m1->pixel_data_block[1].pixel[6] = 0x8D8C;
811097ac:	e0bffd17 	ldw	r2,-12(fp)
811097b0:	00e36304 	movi	r3,-29300
811097b4:	10c0250d 	sth	r3,148(r2)
	buffer_data_m1->pixel_data_block[1].pixel[7] = 0x8F8E;
811097b8:	e0bffd17 	ldw	r2,-12(fp)
811097bc:	00e3e384 	movi	r3,-28786
811097c0:	10c0258d 	sth	r3,150(r2)
	buffer_data_m1->pixel_data_block[1].pixel[8] = 0x9190;
811097c4:	e0bffd17 	ldw	r2,-12(fp)
811097c8:	00e46404 	movi	r3,-28272
811097cc:	10c0260d 	sth	r3,152(r2)
	buffer_data_m1->pixel_data_block[1].pixel[9] = 0x9392;
811097d0:	e0bffd17 	ldw	r2,-12(fp)
811097d4:	00e4e484 	movi	r3,-27758
811097d8:	10c0268d 	sth	r3,154(r2)
	buffer_data_m1->pixel_data_block[1].pixel[10] = 0x9594;
811097dc:	e0bffd17 	ldw	r2,-12(fp)
811097e0:	00e56504 	movi	r3,-27244
811097e4:	10c0270d 	sth	r3,156(r2)
	buffer_data_m1->pixel_data_block[1].pixel[11] = 0x9796;
811097e8:	e0bffd17 	ldw	r2,-12(fp)
811097ec:	00e5e584 	movi	r3,-26730
811097f0:	10c0278d 	sth	r3,158(r2)
	buffer_data_m1->pixel_data_block[1].pixel[12] = 0x9998;
811097f4:	e0bffd17 	ldw	r2,-12(fp)
811097f8:	00e66604 	movi	r3,-26216
811097fc:	10c0280d 	sth	r3,160(r2)
	buffer_data_m1->pixel_data_block[1].pixel[13] = 0x9B9A;
81109800:	e0bffd17 	ldw	r2,-12(fp)
81109804:	00e6e684 	movi	r3,-25702
81109808:	10c0288d 	sth	r3,162(r2)
	buffer_data_m1->pixel_data_block[1].pixel[14] = 0x9D9C;
8110980c:	e0bffd17 	ldw	r2,-12(fp)
81109810:	00e76704 	movi	r3,-25188
81109814:	10c0290d 	sth	r3,164(r2)
	buffer_data_m1->pixel_data_block[1].pixel[15] = 0x9F9E;
81109818:	e0bffd17 	ldw	r2,-12(fp)
8110981c:	00e7e784 	movi	r3,-24674
81109820:	10c0298d 	sth	r3,166(r2)
	buffer_data_m1->pixel_data_block[1].pixel[16] = 0xA1A0;
81109824:	e0bffd17 	ldw	r2,-12(fp)
81109828:	00e86804 	movi	r3,-24160
8110982c:	10c02a0d 	sth	r3,168(r2)
	buffer_data_m1->pixel_data_block[1].pixel[17] = 0xA3A2;
81109830:	e0bffd17 	ldw	r2,-12(fp)
81109834:	00e8e884 	movi	r3,-23646
81109838:	10c02a8d 	sth	r3,170(r2)
	buffer_data_m1->pixel_data_block[1].pixel[18] = 0xA5A4;
8110983c:	e0bffd17 	ldw	r2,-12(fp)
81109840:	00e96904 	movi	r3,-23132
81109844:	10c02b0d 	sth	r3,172(r2)
	buffer_data_m1->pixel_data_block[1].pixel[19] = 0xA7A6;
81109848:	e0bffd17 	ldw	r2,-12(fp)
8110984c:	00e9e984 	movi	r3,-22618
81109850:	10c02b8d 	sth	r3,174(r2)
	buffer_data_m1->pixel_data_block[1].pixel[20] = 0xA9A8;
81109854:	e0bffd17 	ldw	r2,-12(fp)
81109858:	00ea6a04 	movi	r3,-22104
8110985c:	10c02c0d 	sth	r3,176(r2)
	buffer_data_m1->pixel_data_block[1].pixel[21] = 0xABAA;
81109860:	e0bffd17 	ldw	r2,-12(fp)
81109864:	00eaea84 	movi	r3,-21590
81109868:	10c02c8d 	sth	r3,178(r2)
	buffer_data_m1->pixel_data_block[1].pixel[22] = 0xADAC;
8110986c:	e0bffd17 	ldw	r2,-12(fp)
81109870:	00eb6b04 	movi	r3,-21076
81109874:	10c02d0d 	sth	r3,180(r2)
	buffer_data_m1->pixel_data_block[1].pixel[23] = 0xAFAE;
81109878:	e0bffd17 	ldw	r2,-12(fp)
8110987c:	00ebeb84 	movi	r3,-20562
81109880:	10c02d8d 	sth	r3,182(r2)
	buffer_data_m1->pixel_data_block[1].pixel[24] = 0xB1B0;
81109884:	e0bffd17 	ldw	r2,-12(fp)
81109888:	00ec6c04 	movi	r3,-20048
8110988c:	10c02e0d 	sth	r3,184(r2)
	buffer_data_m1->pixel_data_block[1].pixel[25] = 0xB3B2;
81109890:	e0bffd17 	ldw	r2,-12(fp)
81109894:	00ecec84 	movi	r3,-19534
81109898:	10c02e8d 	sth	r3,186(r2)
	buffer_data_m1->pixel_data_block[1].pixel[26] = 0xB5B4;
8110989c:	e0bffd17 	ldw	r2,-12(fp)
811098a0:	00ed6d04 	movi	r3,-19020
811098a4:	10c02f0d 	sth	r3,188(r2)
	buffer_data_m1->pixel_data_block[1].pixel[27] = 0xB7B6;
811098a8:	e0bffd17 	ldw	r2,-12(fp)
811098ac:	00eded84 	movi	r3,-18506
811098b0:	10c02f8d 	sth	r3,190(r2)
	buffer_data_m1->pixel_data_block[1].pixel[28] = 0xB9B8;
811098b4:	e0bffd17 	ldw	r2,-12(fp)
811098b8:	00ee6e04 	movi	r3,-17992
811098bc:	10c0300d 	sth	r3,192(r2)
	buffer_data_m1->pixel_data_block[1].pixel[29] = 0xBBBA;
811098c0:	e0bffd17 	ldw	r2,-12(fp)
811098c4:	00eeee84 	movi	r3,-17478
811098c8:	10c0308d 	sth	r3,194(r2)
	buffer_data_m1->pixel_data_block[1].pixel[30] = 0xBDBC;
811098cc:	e0bffd17 	ldw	r2,-12(fp)
811098d0:	00ef6f04 	movi	r3,-16964
811098d4:	10c0310d 	sth	r3,196(r2)
	buffer_data_m1->pixel_data_block[1].pixel[31] = 0xBFBE;
811098d8:	e0bffd17 	ldw	r2,-12(fp)
811098dc:	00efef84 	movi	r3,-16450
811098e0:	10c0318d 	sth	r3,198(r2)
	buffer_data_m1->pixel_data_block[1].pixel[32] = 0xC1C0;
811098e4:	e0bffd17 	ldw	r2,-12(fp)
811098e8:	00f07004 	movi	r3,-15936
811098ec:	10c0320d 	sth	r3,200(r2)
	buffer_data_m1->pixel_data_block[1].pixel[33] = 0xC3C2;
811098f0:	e0bffd17 	ldw	r2,-12(fp)
811098f4:	00f0f084 	movi	r3,-15422
811098f8:	10c0328d 	sth	r3,202(r2)
	buffer_data_m1->pixel_data_block[1].pixel[34] = 0xC5C4;
811098fc:	e0bffd17 	ldw	r2,-12(fp)
81109900:	00f17104 	movi	r3,-14908
81109904:	10c0330d 	sth	r3,204(r2)
	buffer_data_m1->pixel_data_block[1].pixel[35] = 0xC7C6;
81109908:	e0bffd17 	ldw	r2,-12(fp)
8110990c:	00f1f184 	movi	r3,-14394
81109910:	10c0338d 	sth	r3,206(r2)
	buffer_data_m1->pixel_data_block[1].pixel[36] = 0xC9C8;
81109914:	e0bffd17 	ldw	r2,-12(fp)
81109918:	00f27204 	movi	r3,-13880
8110991c:	10c0340d 	sth	r3,208(r2)
	buffer_data_m1->pixel_data_block[1].pixel[37] = 0xCBCA;
81109920:	e0bffd17 	ldw	r2,-12(fp)
81109924:	00f2f284 	movi	r3,-13366
81109928:	10c0348d 	sth	r3,210(r2)
	buffer_data_m1->pixel_data_block[1].pixel[38] = 0xCDCC;
8110992c:	e0bffd17 	ldw	r2,-12(fp)
81109930:	00f37304 	movi	r3,-12852
81109934:	10c0350d 	sth	r3,212(r2)
	buffer_data_m1->pixel_data_block[1].pixel[39] = 0xCFCE;
81109938:	e0bffd17 	ldw	r2,-12(fp)
8110993c:	00f3f384 	movi	r3,-12338
81109940:	10c0358d 	sth	r3,214(r2)
	buffer_data_m1->pixel_data_block[1].pixel[40] = 0xD1D0;
81109944:	e0bffd17 	ldw	r2,-12(fp)
81109948:	00f47404 	movi	r3,-11824
8110994c:	10c0360d 	sth	r3,216(r2)
	buffer_data_m1->pixel_data_block[1].pixel[41] = 0xD3D2;
81109950:	e0bffd17 	ldw	r2,-12(fp)
81109954:	00f4f484 	movi	r3,-11310
81109958:	10c0368d 	sth	r3,218(r2)
	buffer_data_m1->pixel_data_block[1].pixel[42] = 0xD5D4;
8110995c:	e0bffd17 	ldw	r2,-12(fp)
81109960:	00f57504 	movi	r3,-10796
81109964:	10c0370d 	sth	r3,220(r2)
	buffer_data_m1->pixel_data_block[1].pixel[43] = 0xD7D6;
81109968:	e0bffd17 	ldw	r2,-12(fp)
8110996c:	00f5f584 	movi	r3,-10282
81109970:	10c0378d 	sth	r3,222(r2)
	buffer_data_m1->pixel_data_block[1].pixel[44] = 0xD9D8;
81109974:	e0bffd17 	ldw	r2,-12(fp)
81109978:	00f67604 	movi	r3,-9768
8110997c:	10c0380d 	sth	r3,224(r2)
	buffer_data_m1->pixel_data_block[1].pixel[45] = 0xDBDA;
81109980:	e0bffd17 	ldw	r2,-12(fp)
81109984:	00f6f684 	movi	r3,-9254
81109988:	10c0388d 	sth	r3,226(r2)
	buffer_data_m1->pixel_data_block[1].pixel[46] = 0xDDDC;
8110998c:	e0bffd17 	ldw	r2,-12(fp)
81109990:	00f77704 	movi	r3,-8740
81109994:	10c0390d 	sth	r3,228(r2)
	buffer_data_m1->pixel_data_block[1].pixel[47] = 0xDFDE;
81109998:	e0bffd17 	ldw	r2,-12(fp)
8110999c:	00f7f784 	movi	r3,-8226
811099a0:	10c0398d 	sth	r3,230(r2)
	buffer_data_m1->pixel_data_block[1].pixel[48] = 0xE1E0;
811099a4:	e0bffd17 	ldw	r2,-12(fp)
811099a8:	00f87804 	movi	r3,-7712
811099ac:	10c03a0d 	sth	r3,232(r2)
	buffer_data_m1->pixel_data_block[1].pixel[49] = 0xE3E2;
811099b0:	e0bffd17 	ldw	r2,-12(fp)
811099b4:	00f8f884 	movi	r3,-7198
811099b8:	10c03a8d 	sth	r3,234(r2)
	buffer_data_m1->pixel_data_block[1].pixel[50] = 0xE5E4;
811099bc:	e0bffd17 	ldw	r2,-12(fp)
811099c0:	00f97904 	movi	r3,-6684
811099c4:	10c03b0d 	sth	r3,236(r2)
	buffer_data_m1->pixel_data_block[1].pixel[51] = 0xE7E6;
811099c8:	e0bffd17 	ldw	r2,-12(fp)
811099cc:	00f9f984 	movi	r3,-6170
811099d0:	10c03b8d 	sth	r3,238(r2)
	buffer_data_m1->pixel_data_block[1].pixel[52] = 0xE9E8;
811099d4:	e0bffd17 	ldw	r2,-12(fp)
811099d8:	00fa7a04 	movi	r3,-5656
811099dc:	10c03c0d 	sth	r3,240(r2)
	buffer_data_m1->pixel_data_block[1].pixel[53] = 0xEBEA;
811099e0:	e0bffd17 	ldw	r2,-12(fp)
811099e4:	00fafa84 	movi	r3,-5142
811099e8:	10c03c8d 	sth	r3,242(r2)
	buffer_data_m1->pixel_data_block[1].pixel[54] = 0xEDEC;
811099ec:	e0bffd17 	ldw	r2,-12(fp)
811099f0:	00fb7b04 	movi	r3,-4628
811099f4:	10c03d0d 	sth	r3,244(r2)
	buffer_data_m1->pixel_data_block[1].pixel[55] = 0xEFEE;
811099f8:	e0bffd17 	ldw	r2,-12(fp)
811099fc:	00fbfb84 	movi	r3,-4114
81109a00:	10c03d8d 	sth	r3,246(r2)
	buffer_data_m1->pixel_data_block[1].pixel[56] = 0xF1F0;
81109a04:	e0bffd17 	ldw	r2,-12(fp)
81109a08:	00fc7c04 	movi	r3,-3600
81109a0c:	10c03e0d 	sth	r3,248(r2)
	buffer_data_m1->pixel_data_block[1].pixel[57] = 0xF3F2;
81109a10:	e0bffd17 	ldw	r2,-12(fp)
81109a14:	00fcfc84 	movi	r3,-3086
81109a18:	10c03e8d 	sth	r3,250(r2)
	buffer_data_m1->pixel_data_block[1].pixel[58] = 0xF5F4;
81109a1c:	e0bffd17 	ldw	r2,-12(fp)
81109a20:	00fd7d04 	movi	r3,-2572
81109a24:	10c03f0d 	sth	r3,252(r2)
	buffer_data_m1->pixel_data_block[1].pixel[59] = 0xF7F6;
81109a28:	e0bffd17 	ldw	r2,-12(fp)
81109a2c:	00fdfd84 	movi	r3,-2058
81109a30:	10c03f8d 	sth	r3,254(r2)
	buffer_data_m1->pixel_data_block[1].pixel[60] = 0xF9F8;
81109a34:	e0bffd17 	ldw	r2,-12(fp)
81109a38:	00fe7e04 	movi	r3,-1544
81109a3c:	10c0400d 	sth	r3,256(r2)
	buffer_data_m1->pixel_data_block[1].pixel[61] = 0xFBFA;
81109a40:	e0bffd17 	ldw	r2,-12(fp)
81109a44:	00fefe84 	movi	r3,-1030
81109a48:	10c0408d 	sth	r3,258(r2)
	buffer_data_m1->pixel_data_block[1].pixel[62] = 0xFDFC;
81109a4c:	e0bffd17 	ldw	r2,-12(fp)
81109a50:	00ff7f04 	movi	r3,-516
81109a54:	10c0410d 	sth	r3,260(r2)
	buffer_data_m1->pixel_data_block[1].pixel[63] = 0xFFFE;
81109a58:	e0bffd17 	ldw	r2,-12(fp)
81109a5c:	00ffff84 	movi	r3,-2
81109a60:	10c0418d 	sth	r3,262(r2)
	buffer_data_m1->pixel_data_block[1].mask = 0xFFFFFFFFFFFFFFFF;
81109a64:	e0bffd17 	ldw	r2,-12(fp)
81109a68:	00ffffc4 	movi	r3,-1
81109a6c:	10c04215 	stw	r3,264(r2)
81109a70:	00ffffc4 	movi	r3,-1
81109a74:	10c04315 	stw	r3,268(r2)

	buffer_data_m1->pixel_data_block[2] = buffer_data_m1->pixel_data_block[0];
81109a78:	e0bffd17 	ldw	r2,-12(fp)
81109a7c:	e0fffd17 	ldw	r3,-12(fp)
81109a80:	10804404 	addi	r2,r2,272
81109a84:	1809883a 	mov	r4,r3
81109a88:	00c02204 	movi	r3,136
81109a8c:	180d883a 	mov	r6,r3
81109a90:	200b883a 	mov	r5,r4
81109a94:	1009883a 	mov	r4,r2
81109a98:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[3] = buffer_data_m1->pixel_data_block[1];
81109a9c:	e0fffd17 	ldw	r3,-12(fp)
81109aa0:	e0bffd17 	ldw	r2,-12(fp)
81109aa4:	18c06604 	addi	r3,r3,408
81109aa8:	10802204 	addi	r2,r2,136
81109aac:	01002204 	movi	r4,136
81109ab0:	200d883a 	mov	r6,r4
81109ab4:	100b883a 	mov	r5,r2
81109ab8:	1809883a 	mov	r4,r3
81109abc:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[4] = buffer_data_m1->pixel_data_block[2];
81109ac0:	e0fffd17 	ldw	r3,-12(fp)
81109ac4:	e0bffd17 	ldw	r2,-12(fp)
81109ac8:	18c08804 	addi	r3,r3,544
81109acc:	10804404 	addi	r2,r2,272
81109ad0:	01002204 	movi	r4,136
81109ad4:	200d883a 	mov	r6,r4
81109ad8:	100b883a 	mov	r5,r2
81109adc:	1809883a 	mov	r4,r3
81109ae0:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[5] = buffer_data_m1->pixel_data_block[3];
81109ae4:	e0fffd17 	ldw	r3,-12(fp)
81109ae8:	e0bffd17 	ldw	r2,-12(fp)
81109aec:	18c0aa04 	addi	r3,r3,680
81109af0:	10806604 	addi	r2,r2,408
81109af4:	01002204 	movi	r4,136
81109af8:	200d883a 	mov	r6,r4
81109afc:	100b883a 	mov	r5,r2
81109b00:	1809883a 	mov	r4,r3
81109b04:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[6] = buffer_data_m1->pixel_data_block[4];
81109b08:	e0fffd17 	ldw	r3,-12(fp)
81109b0c:	e0bffd17 	ldw	r2,-12(fp)
81109b10:	18c0cc04 	addi	r3,r3,816
81109b14:	10808804 	addi	r2,r2,544
81109b18:	01002204 	movi	r4,136
81109b1c:	200d883a 	mov	r6,r4
81109b20:	100b883a 	mov	r5,r2
81109b24:	1809883a 	mov	r4,r3
81109b28:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[7] = buffer_data_m1->pixel_data_block[5];
81109b2c:	e0fffd17 	ldw	r3,-12(fp)
81109b30:	e0bffd17 	ldw	r2,-12(fp)
81109b34:	18c0ee04 	addi	r3,r3,952
81109b38:	1080aa04 	addi	r2,r2,680
81109b3c:	01002204 	movi	r4,136
81109b40:	200d883a 	mov	r6,r4
81109b44:	100b883a 	mov	r5,r2
81109b48:	1809883a 	mov	r4,r3
81109b4c:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[8] = buffer_data_m1->pixel_data_block[6];
81109b50:	e0fffd17 	ldw	r3,-12(fp)
81109b54:	e0bffd17 	ldw	r2,-12(fp)
81109b58:	18c11004 	addi	r3,r3,1088
81109b5c:	1080cc04 	addi	r2,r2,816
81109b60:	01002204 	movi	r4,136
81109b64:	200d883a 	mov	r6,r4
81109b68:	100b883a 	mov	r5,r2
81109b6c:	1809883a 	mov	r4,r3
81109b70:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[9] = buffer_data_m1->pixel_data_block[7];
81109b74:	e0fffd17 	ldw	r3,-12(fp)
81109b78:	e0bffd17 	ldw	r2,-12(fp)
81109b7c:	18c13204 	addi	r3,r3,1224
81109b80:	1080ee04 	addi	r2,r2,952
81109b84:	01002204 	movi	r4,136
81109b88:	200d883a 	mov	r6,r4
81109b8c:	100b883a 	mov	r5,r2
81109b90:	1809883a 	mov	r4,r3
81109b94:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[10] = buffer_data_m1->pixel_data_block[8];
81109b98:	e0fffd17 	ldw	r3,-12(fp)
81109b9c:	e0bffd17 	ldw	r2,-12(fp)
81109ba0:	18c15404 	addi	r3,r3,1360
81109ba4:	10811004 	addi	r2,r2,1088
81109ba8:	01002204 	movi	r4,136
81109bac:	200d883a 	mov	r6,r4
81109bb0:	100b883a 	mov	r5,r2
81109bb4:	1809883a 	mov	r4,r3
81109bb8:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[11] = buffer_data_m1->pixel_data_block[9];
81109bbc:	e0fffd17 	ldw	r3,-12(fp)
81109bc0:	e0bffd17 	ldw	r2,-12(fp)
81109bc4:	18c17604 	addi	r3,r3,1496
81109bc8:	10813204 	addi	r2,r2,1224
81109bcc:	01002204 	movi	r4,136
81109bd0:	200d883a 	mov	r6,r4
81109bd4:	100b883a 	mov	r5,r2
81109bd8:	1809883a 	mov	r4,r3
81109bdc:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[12] = buffer_data_m1->pixel_data_block[10];
81109be0:	e0fffd17 	ldw	r3,-12(fp)
81109be4:	e0bffd17 	ldw	r2,-12(fp)
81109be8:	18c19804 	addi	r3,r3,1632
81109bec:	10815404 	addi	r2,r2,1360
81109bf0:	01002204 	movi	r4,136
81109bf4:	200d883a 	mov	r6,r4
81109bf8:	100b883a 	mov	r5,r2
81109bfc:	1809883a 	mov	r4,r3
81109c00:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[13] = buffer_data_m1->pixel_data_block[11];
81109c04:	e0fffd17 	ldw	r3,-12(fp)
81109c08:	e0bffd17 	ldw	r2,-12(fp)
81109c0c:	18c1ba04 	addi	r3,r3,1768
81109c10:	10817604 	addi	r2,r2,1496
81109c14:	01002204 	movi	r4,136
81109c18:	200d883a 	mov	r6,r4
81109c1c:	100b883a 	mov	r5,r2
81109c20:	1809883a 	mov	r4,r3
81109c24:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[14] = buffer_data_m1->pixel_data_block[12];
81109c28:	e0fffd17 	ldw	r3,-12(fp)
81109c2c:	e0bffd17 	ldw	r2,-12(fp)
81109c30:	18c1dc04 	addi	r3,r3,1904
81109c34:	10819804 	addi	r2,r2,1632
81109c38:	01002204 	movi	r4,136
81109c3c:	200d883a 	mov	r6,r4
81109c40:	100b883a 	mov	r5,r2
81109c44:	1809883a 	mov	r4,r3
81109c48:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m1->pixel_data_block[15] = buffer_data_m1->pixel_data_block[13];
81109c4c:	e0fffd17 	ldw	r3,-12(fp)
81109c50:	e0bffd17 	ldw	r2,-12(fp)
81109c54:	18c1fe04 	addi	r3,r3,2040
81109c58:	1081ba04 	addi	r2,r2,1768
81109c5c:	01002204 	movi	r4,136
81109c60:	200d883a 	mov	r6,r4
81109c64:	100b883a 	mov	r5,r2
81109c68:	1809883a 	mov	r4,r3
81109c6c:	110ce640 	call	8110ce64 <memcpy>

	DDR2_SWITCH_MEMORY(DDR2_M2_ID);
81109c70:	01000084 	movi	r4,2
81109c74:	1106bfc0 	call	81106bfc <DDR2_SWITCH_MEMORY>
//	pDDR++;
//	printf("add : %u \n", *pDDR);

// buffer: 2176 B -> 544 dwords

	fee_buffer_data_block_t *buffer_data_m2 =
81109c78:	e0bffa17 	ldw	r2,-24(fp)
81109c7c:	e0bffe15 	stw	r2,-8(fp)
			(fee_buffer_data_block_t *) Ddr2Base;

	buffer_data_m2->pixel_data_block[0].pixel[0] = 0x0100;
81109c80:	e0bffe17 	ldw	r2,-8(fp)
81109c84:	00c04004 	movi	r3,256
81109c88:	10c0000d 	sth	r3,0(r2)
	buffer_data_m2->pixel_data_block[0].pixel[1] = 0x0302;
81109c8c:	e0bffe17 	ldw	r2,-8(fp)
81109c90:	00c0c084 	movi	r3,770
81109c94:	10c0008d 	sth	r3,2(r2)
	buffer_data_m2->pixel_data_block[0].pixel[2] = 0x0504;
81109c98:	e0bffe17 	ldw	r2,-8(fp)
81109c9c:	00c14104 	movi	r3,1284
81109ca0:	10c0010d 	sth	r3,4(r2)
	buffer_data_m2->pixel_data_block[0].pixel[3] = 0x0706;
81109ca4:	e0bffe17 	ldw	r2,-8(fp)
81109ca8:	00c1c184 	movi	r3,1798
81109cac:	10c0018d 	sth	r3,6(r2)
	buffer_data_m2->pixel_data_block[0].pixel[4] = 0x0908;
81109cb0:	e0bffe17 	ldw	r2,-8(fp)
81109cb4:	00c24204 	movi	r3,2312
81109cb8:	10c0020d 	sth	r3,8(r2)
	buffer_data_m2->pixel_data_block[0].pixel[5] = 0x0B0A;
81109cbc:	e0bffe17 	ldw	r2,-8(fp)
81109cc0:	00c2c284 	movi	r3,2826
81109cc4:	10c0028d 	sth	r3,10(r2)
	buffer_data_m2->pixel_data_block[0].pixel[6] = 0x0D0C;
81109cc8:	e0bffe17 	ldw	r2,-8(fp)
81109ccc:	00c34304 	movi	r3,3340
81109cd0:	10c0030d 	sth	r3,12(r2)
	buffer_data_m2->pixel_data_block[0].pixel[7] = 0x0F0E;
81109cd4:	e0bffe17 	ldw	r2,-8(fp)
81109cd8:	00c3c384 	movi	r3,3854
81109cdc:	10c0038d 	sth	r3,14(r2)
	buffer_data_m2->pixel_data_block[0].pixel[8] = 0x1110;
81109ce0:	e0bffe17 	ldw	r2,-8(fp)
81109ce4:	00c44404 	movi	r3,4368
81109ce8:	10c0040d 	sth	r3,16(r2)
	buffer_data_m2->pixel_data_block[0].pixel[9] = 0x1312;
81109cec:	e0bffe17 	ldw	r2,-8(fp)
81109cf0:	00c4c484 	movi	r3,4882
81109cf4:	10c0048d 	sth	r3,18(r2)
	buffer_data_m2->pixel_data_block[0].pixel[10] = 0x1514;
81109cf8:	e0bffe17 	ldw	r2,-8(fp)
81109cfc:	00c54504 	movi	r3,5396
81109d00:	10c0050d 	sth	r3,20(r2)
	buffer_data_m2->pixel_data_block[0].pixel[11] = 0x1716;
81109d04:	e0bffe17 	ldw	r2,-8(fp)
81109d08:	00c5c584 	movi	r3,5910
81109d0c:	10c0058d 	sth	r3,22(r2)
	buffer_data_m2->pixel_data_block[0].pixel[12] = 0x1918;
81109d10:	e0bffe17 	ldw	r2,-8(fp)
81109d14:	00c64604 	movi	r3,6424
81109d18:	10c0060d 	sth	r3,24(r2)
	buffer_data_m2->pixel_data_block[0].pixel[13] = 0x1B1A;
81109d1c:	e0bffe17 	ldw	r2,-8(fp)
81109d20:	00c6c684 	movi	r3,6938
81109d24:	10c0068d 	sth	r3,26(r2)
	buffer_data_m2->pixel_data_block[0].pixel[14] = 0x1D1C;
81109d28:	e0bffe17 	ldw	r2,-8(fp)
81109d2c:	00c74704 	movi	r3,7452
81109d30:	10c0070d 	sth	r3,28(r2)
	buffer_data_m2->pixel_data_block[0].pixel[15] = 0x1F1E;
81109d34:	e0bffe17 	ldw	r2,-8(fp)
81109d38:	00c7c784 	movi	r3,7966
81109d3c:	10c0078d 	sth	r3,30(r2)
	buffer_data_m2->pixel_data_block[0].pixel[16] = 0x2120;
81109d40:	e0bffe17 	ldw	r2,-8(fp)
81109d44:	00c84804 	movi	r3,8480
81109d48:	10c0080d 	sth	r3,32(r2)
	buffer_data_m2->pixel_data_block[0].pixel[17] = 0x2322;
81109d4c:	e0bffe17 	ldw	r2,-8(fp)
81109d50:	00c8c884 	movi	r3,8994
81109d54:	10c0088d 	sth	r3,34(r2)
	buffer_data_m2->pixel_data_block[0].pixel[18] = 0x2524;
81109d58:	e0bffe17 	ldw	r2,-8(fp)
81109d5c:	00c94904 	movi	r3,9508
81109d60:	10c0090d 	sth	r3,36(r2)
	buffer_data_m2->pixel_data_block[0].pixel[19] = 0x2726;
81109d64:	e0bffe17 	ldw	r2,-8(fp)
81109d68:	00c9c984 	movi	r3,10022
81109d6c:	10c0098d 	sth	r3,38(r2)
	buffer_data_m2->pixel_data_block[0].pixel[20] = 0x2928;
81109d70:	e0bffe17 	ldw	r2,-8(fp)
81109d74:	00ca4a04 	movi	r3,10536
81109d78:	10c00a0d 	sth	r3,40(r2)
	buffer_data_m2->pixel_data_block[0].pixel[21] = 0x2B2A;
81109d7c:	e0bffe17 	ldw	r2,-8(fp)
81109d80:	00caca84 	movi	r3,11050
81109d84:	10c00a8d 	sth	r3,42(r2)
	buffer_data_m2->pixel_data_block[0].pixel[22] = 0x2D2C;
81109d88:	e0bffe17 	ldw	r2,-8(fp)
81109d8c:	00cb4b04 	movi	r3,11564
81109d90:	10c00b0d 	sth	r3,44(r2)
	buffer_data_m2->pixel_data_block[0].pixel[23] = 0x2F2E;
81109d94:	e0bffe17 	ldw	r2,-8(fp)
81109d98:	00cbcb84 	movi	r3,12078
81109d9c:	10c00b8d 	sth	r3,46(r2)
	buffer_data_m2->pixel_data_block[0].pixel[24] = 0x3130;
81109da0:	e0bffe17 	ldw	r2,-8(fp)
81109da4:	00cc4c04 	movi	r3,12592
81109da8:	10c00c0d 	sth	r3,48(r2)
	buffer_data_m2->pixel_data_block[0].pixel[25] = 0x3332;
81109dac:	e0bffe17 	ldw	r2,-8(fp)
81109db0:	00cccc84 	movi	r3,13106
81109db4:	10c00c8d 	sth	r3,50(r2)
	buffer_data_m2->pixel_data_block[0].pixel[26] = 0x3534;
81109db8:	e0bffe17 	ldw	r2,-8(fp)
81109dbc:	00cd4d04 	movi	r3,13620
81109dc0:	10c00d0d 	sth	r3,52(r2)
	buffer_data_m2->pixel_data_block[0].pixel[27] = 0x3736;
81109dc4:	e0bffe17 	ldw	r2,-8(fp)
81109dc8:	00cdcd84 	movi	r3,14134
81109dcc:	10c00d8d 	sth	r3,54(r2)
	buffer_data_m2->pixel_data_block[0].pixel[28] = 0x3938;
81109dd0:	e0bffe17 	ldw	r2,-8(fp)
81109dd4:	00ce4e04 	movi	r3,14648
81109dd8:	10c00e0d 	sth	r3,56(r2)
	buffer_data_m2->pixel_data_block[0].pixel[29] = 0x3B3A;
81109ddc:	e0bffe17 	ldw	r2,-8(fp)
81109de0:	00cece84 	movi	r3,15162
81109de4:	10c00e8d 	sth	r3,58(r2)
	buffer_data_m2->pixel_data_block[0].pixel[30] = 0x3D3C;
81109de8:	e0bffe17 	ldw	r2,-8(fp)
81109dec:	00cf4f04 	movi	r3,15676
81109df0:	10c00f0d 	sth	r3,60(r2)
	buffer_data_m2->pixel_data_block[0].pixel[31] = 0x3F3E;
81109df4:	e0bffe17 	ldw	r2,-8(fp)
81109df8:	00cfcf84 	movi	r3,16190
81109dfc:	10c00f8d 	sth	r3,62(r2)
	buffer_data_m2->pixel_data_block[0].pixel[32] = 0x4140;
81109e00:	e0bffe17 	ldw	r2,-8(fp)
81109e04:	00d05004 	movi	r3,16704
81109e08:	10c0100d 	sth	r3,64(r2)
	buffer_data_m2->pixel_data_block[0].pixel[33] = 0x4342;
81109e0c:	e0bffe17 	ldw	r2,-8(fp)
81109e10:	00d0d084 	movi	r3,17218
81109e14:	10c0108d 	sth	r3,66(r2)
	buffer_data_m2->pixel_data_block[0].pixel[34] = 0x4544;
81109e18:	e0bffe17 	ldw	r2,-8(fp)
81109e1c:	00d15104 	movi	r3,17732
81109e20:	10c0110d 	sth	r3,68(r2)
	buffer_data_m2->pixel_data_block[0].pixel[35] = 0x4746;
81109e24:	e0bffe17 	ldw	r2,-8(fp)
81109e28:	00d1d184 	movi	r3,18246
81109e2c:	10c0118d 	sth	r3,70(r2)
	buffer_data_m2->pixel_data_block[0].pixel[36] = 0x4948;
81109e30:	e0bffe17 	ldw	r2,-8(fp)
81109e34:	00d25204 	movi	r3,18760
81109e38:	10c0120d 	sth	r3,72(r2)
	buffer_data_m2->pixel_data_block[0].pixel[37] = 0x4B4A;
81109e3c:	e0bffe17 	ldw	r2,-8(fp)
81109e40:	00d2d284 	movi	r3,19274
81109e44:	10c0128d 	sth	r3,74(r2)
	buffer_data_m2->pixel_data_block[0].pixel[38] = 0x4D4C;
81109e48:	e0bffe17 	ldw	r2,-8(fp)
81109e4c:	00d35304 	movi	r3,19788
81109e50:	10c0130d 	sth	r3,76(r2)
	buffer_data_m2->pixel_data_block[0].pixel[39] = 0x4F4E;
81109e54:	e0bffe17 	ldw	r2,-8(fp)
81109e58:	00d3d384 	movi	r3,20302
81109e5c:	10c0138d 	sth	r3,78(r2)
	buffer_data_m2->pixel_data_block[0].pixel[40] = 0x5150;
81109e60:	e0bffe17 	ldw	r2,-8(fp)
81109e64:	00d45404 	movi	r3,20816
81109e68:	10c0140d 	sth	r3,80(r2)
	buffer_data_m2->pixel_data_block[0].pixel[41] = 0x5352;
81109e6c:	e0bffe17 	ldw	r2,-8(fp)
81109e70:	00d4d484 	movi	r3,21330
81109e74:	10c0148d 	sth	r3,82(r2)
	buffer_data_m2->pixel_data_block[0].pixel[42] = 0x5554;
81109e78:	e0bffe17 	ldw	r2,-8(fp)
81109e7c:	00d55504 	movi	r3,21844
81109e80:	10c0150d 	sth	r3,84(r2)
	buffer_data_m2->pixel_data_block[0].pixel[43] = 0x5756;
81109e84:	e0bffe17 	ldw	r2,-8(fp)
81109e88:	00d5d584 	movi	r3,22358
81109e8c:	10c0158d 	sth	r3,86(r2)
	buffer_data_m2->pixel_data_block[0].pixel[44] = 0x5958;
81109e90:	e0bffe17 	ldw	r2,-8(fp)
81109e94:	00d65604 	movi	r3,22872
81109e98:	10c0160d 	sth	r3,88(r2)
	buffer_data_m2->pixel_data_block[0].pixel[45] = 0x5B5A;
81109e9c:	e0bffe17 	ldw	r2,-8(fp)
81109ea0:	00d6d684 	movi	r3,23386
81109ea4:	10c0168d 	sth	r3,90(r2)
	buffer_data_m2->pixel_data_block[0].pixel[46] = 0x5D5C;
81109ea8:	e0bffe17 	ldw	r2,-8(fp)
81109eac:	00d75704 	movi	r3,23900
81109eb0:	10c0170d 	sth	r3,92(r2)
	buffer_data_m2->pixel_data_block[0].pixel[47] = 0x5F5E;
81109eb4:	e0bffe17 	ldw	r2,-8(fp)
81109eb8:	00d7d784 	movi	r3,24414
81109ebc:	10c0178d 	sth	r3,94(r2)
	buffer_data_m2->pixel_data_block[0].pixel[48] = 0x6160;
81109ec0:	e0bffe17 	ldw	r2,-8(fp)
81109ec4:	00d85804 	movi	r3,24928
81109ec8:	10c0180d 	sth	r3,96(r2)
	buffer_data_m2->pixel_data_block[0].pixel[49] = 0x6362;
81109ecc:	e0bffe17 	ldw	r2,-8(fp)
81109ed0:	00d8d884 	movi	r3,25442
81109ed4:	10c0188d 	sth	r3,98(r2)
	buffer_data_m2->pixel_data_block[0].pixel[50] = 0x6564;
81109ed8:	e0bffe17 	ldw	r2,-8(fp)
81109edc:	00d95904 	movi	r3,25956
81109ee0:	10c0190d 	sth	r3,100(r2)
	buffer_data_m2->pixel_data_block[0].pixel[51] = 0x6766;
81109ee4:	e0bffe17 	ldw	r2,-8(fp)
81109ee8:	00d9d984 	movi	r3,26470
81109eec:	10c0198d 	sth	r3,102(r2)
	buffer_data_m2->pixel_data_block[0].pixel[52] = 0x6968;
81109ef0:	e0bffe17 	ldw	r2,-8(fp)
81109ef4:	00da5a04 	movi	r3,26984
81109ef8:	10c01a0d 	sth	r3,104(r2)
	buffer_data_m2->pixel_data_block[0].pixel[53] = 0x6B6A;
81109efc:	e0bffe17 	ldw	r2,-8(fp)
81109f00:	00dada84 	movi	r3,27498
81109f04:	10c01a8d 	sth	r3,106(r2)
	buffer_data_m2->pixel_data_block[0].pixel[54] = 0x6D6C;
81109f08:	e0bffe17 	ldw	r2,-8(fp)
81109f0c:	00db5b04 	movi	r3,28012
81109f10:	10c01b0d 	sth	r3,108(r2)
	buffer_data_m2->pixel_data_block[0].pixel[55] = 0x6F6E;
81109f14:	e0bffe17 	ldw	r2,-8(fp)
81109f18:	00dbdb84 	movi	r3,28526
81109f1c:	10c01b8d 	sth	r3,110(r2)
	buffer_data_m2->pixel_data_block[0].pixel[56] = 0x7170;
81109f20:	e0bffe17 	ldw	r2,-8(fp)
81109f24:	00dc5c04 	movi	r3,29040
81109f28:	10c01c0d 	sth	r3,112(r2)
	buffer_data_m2->pixel_data_block[0].pixel[57] = 0x7372;
81109f2c:	e0bffe17 	ldw	r2,-8(fp)
81109f30:	00dcdc84 	movi	r3,29554
81109f34:	10c01c8d 	sth	r3,114(r2)
	buffer_data_m2->pixel_data_block[0].pixel[58] = 0x7574;
81109f38:	e0bffe17 	ldw	r2,-8(fp)
81109f3c:	00dd5d04 	movi	r3,30068
81109f40:	10c01d0d 	sth	r3,116(r2)
	buffer_data_m2->pixel_data_block[0].pixel[59] = 0x7776;
81109f44:	e0bffe17 	ldw	r2,-8(fp)
81109f48:	00dddd84 	movi	r3,30582
81109f4c:	10c01d8d 	sth	r3,118(r2)
	buffer_data_m2->pixel_data_block[0].pixel[60] = 0x7978;
81109f50:	e0bffe17 	ldw	r2,-8(fp)
81109f54:	00de5e04 	movi	r3,31096
81109f58:	10c01e0d 	sth	r3,120(r2)
	buffer_data_m2->pixel_data_block[0].pixel[61] = 0x7B7A;
81109f5c:	e0bffe17 	ldw	r2,-8(fp)
81109f60:	00dede84 	movi	r3,31610
81109f64:	10c01e8d 	sth	r3,122(r2)
	buffer_data_m2->pixel_data_block[0].pixel[62] = 0x7D7C;
81109f68:	e0bffe17 	ldw	r2,-8(fp)
81109f6c:	00df5f04 	movi	r3,32124
81109f70:	10c01f0d 	sth	r3,124(r2)
	buffer_data_m2->pixel_data_block[0].pixel[63] = 0x7F7E;
81109f74:	e0bffe17 	ldw	r2,-8(fp)
81109f78:	00dfdf84 	movi	r3,32638
81109f7c:	10c01f8d 	sth	r3,126(r2)
	buffer_data_m2->pixel_data_block[0].mask = 0xFFFFFFFFFFFFFFFF;
81109f80:	e0bffe17 	ldw	r2,-8(fp)
81109f84:	00ffffc4 	movi	r3,-1
81109f88:	10c02015 	stw	r3,128(r2)
81109f8c:	00ffffc4 	movi	r3,-1
81109f90:	10c02115 	stw	r3,132(r2)

	buffer_data_m2->pixel_data_block[1].pixel[0] = 0x8180;
81109f94:	e0bffe17 	ldw	r2,-8(fp)
81109f98:	00e06004 	movi	r3,-32384
81109f9c:	10c0220d 	sth	r3,136(r2)
	buffer_data_m2->pixel_data_block[1].pixel[1] = 0x8382;
81109fa0:	e0bffe17 	ldw	r2,-8(fp)
81109fa4:	00e0e084 	movi	r3,-31870
81109fa8:	10c0228d 	sth	r3,138(r2)
	buffer_data_m2->pixel_data_block[1].pixel[2] = 0x8584;
81109fac:	e0bffe17 	ldw	r2,-8(fp)
81109fb0:	00e16104 	movi	r3,-31356
81109fb4:	10c0230d 	sth	r3,140(r2)
	buffer_data_m2->pixel_data_block[1].pixel[3] = 0x8786;
81109fb8:	e0bffe17 	ldw	r2,-8(fp)
81109fbc:	00e1e184 	movi	r3,-30842
81109fc0:	10c0238d 	sth	r3,142(r2)
	buffer_data_m2->pixel_data_block[1].pixel[4] = 0x8988;
81109fc4:	e0bffe17 	ldw	r2,-8(fp)
81109fc8:	00e26204 	movi	r3,-30328
81109fcc:	10c0240d 	sth	r3,144(r2)
	buffer_data_m2->pixel_data_block[1].pixel[5] = 0x8B8A;
81109fd0:	e0bffe17 	ldw	r2,-8(fp)
81109fd4:	00e2e284 	movi	r3,-29814
81109fd8:	10c0248d 	sth	r3,146(r2)
	buffer_data_m2->pixel_data_block[1].pixel[6] = 0x8D8C;
81109fdc:	e0bffe17 	ldw	r2,-8(fp)
81109fe0:	00e36304 	movi	r3,-29300
81109fe4:	10c0250d 	sth	r3,148(r2)
	buffer_data_m2->pixel_data_block[1].pixel[7] = 0x8F8E;
81109fe8:	e0bffe17 	ldw	r2,-8(fp)
81109fec:	00e3e384 	movi	r3,-28786
81109ff0:	10c0258d 	sth	r3,150(r2)
	buffer_data_m2->pixel_data_block[1].pixel[8] = 0x9190;
81109ff4:	e0bffe17 	ldw	r2,-8(fp)
81109ff8:	00e46404 	movi	r3,-28272
81109ffc:	10c0260d 	sth	r3,152(r2)
	buffer_data_m2->pixel_data_block[1].pixel[9] = 0x9392;
8110a000:	e0bffe17 	ldw	r2,-8(fp)
8110a004:	00e4e484 	movi	r3,-27758
8110a008:	10c0268d 	sth	r3,154(r2)
	buffer_data_m2->pixel_data_block[1].pixel[10] = 0x9594;
8110a00c:	e0bffe17 	ldw	r2,-8(fp)
8110a010:	00e56504 	movi	r3,-27244
8110a014:	10c0270d 	sth	r3,156(r2)
	buffer_data_m2->pixel_data_block[1].pixel[11] = 0x9796;
8110a018:	e0bffe17 	ldw	r2,-8(fp)
8110a01c:	00e5e584 	movi	r3,-26730
8110a020:	10c0278d 	sth	r3,158(r2)
	buffer_data_m2->pixel_data_block[1].pixel[12] = 0x9998;
8110a024:	e0bffe17 	ldw	r2,-8(fp)
8110a028:	00e66604 	movi	r3,-26216
8110a02c:	10c0280d 	sth	r3,160(r2)
	buffer_data_m2->pixel_data_block[1].pixel[13] = 0x9B9A;
8110a030:	e0bffe17 	ldw	r2,-8(fp)
8110a034:	00e6e684 	movi	r3,-25702
8110a038:	10c0288d 	sth	r3,162(r2)
	buffer_data_m2->pixel_data_block[1].pixel[14] = 0x9D9C;
8110a03c:	e0bffe17 	ldw	r2,-8(fp)
8110a040:	00e76704 	movi	r3,-25188
8110a044:	10c0290d 	sth	r3,164(r2)
	buffer_data_m2->pixel_data_block[1].pixel[15] = 0x9F9E;
8110a048:	e0bffe17 	ldw	r2,-8(fp)
8110a04c:	00e7e784 	movi	r3,-24674
8110a050:	10c0298d 	sth	r3,166(r2)
	buffer_data_m2->pixel_data_block[1].pixel[16] = 0xA1A0;
8110a054:	e0bffe17 	ldw	r2,-8(fp)
8110a058:	00e86804 	movi	r3,-24160
8110a05c:	10c02a0d 	sth	r3,168(r2)
	buffer_data_m2->pixel_data_block[1].pixel[17] = 0xA3A2;
8110a060:	e0bffe17 	ldw	r2,-8(fp)
8110a064:	00e8e884 	movi	r3,-23646
8110a068:	10c02a8d 	sth	r3,170(r2)
	buffer_data_m2->pixel_data_block[1].pixel[18] = 0xA5A4;
8110a06c:	e0bffe17 	ldw	r2,-8(fp)
8110a070:	00e96904 	movi	r3,-23132
8110a074:	10c02b0d 	sth	r3,172(r2)
	buffer_data_m2->pixel_data_block[1].pixel[19] = 0xA7A6;
8110a078:	e0bffe17 	ldw	r2,-8(fp)
8110a07c:	00e9e984 	movi	r3,-22618
8110a080:	10c02b8d 	sth	r3,174(r2)
	buffer_data_m2->pixel_data_block[1].pixel[20] = 0xA9A8;
8110a084:	e0bffe17 	ldw	r2,-8(fp)
8110a088:	00ea6a04 	movi	r3,-22104
8110a08c:	10c02c0d 	sth	r3,176(r2)
	buffer_data_m2->pixel_data_block[1].pixel[21] = 0xABAA;
8110a090:	e0bffe17 	ldw	r2,-8(fp)
8110a094:	00eaea84 	movi	r3,-21590
8110a098:	10c02c8d 	sth	r3,178(r2)
	buffer_data_m2->pixel_data_block[1].pixel[22] = 0xADAC;
8110a09c:	e0bffe17 	ldw	r2,-8(fp)
8110a0a0:	00eb6b04 	movi	r3,-21076
8110a0a4:	10c02d0d 	sth	r3,180(r2)
	buffer_data_m2->pixel_data_block[1].pixel[23] = 0xAFAE;
8110a0a8:	e0bffe17 	ldw	r2,-8(fp)
8110a0ac:	00ebeb84 	movi	r3,-20562
8110a0b0:	10c02d8d 	sth	r3,182(r2)
	buffer_data_m2->pixel_data_block[1].pixel[24] = 0xB1B0;
8110a0b4:	e0bffe17 	ldw	r2,-8(fp)
8110a0b8:	00ec6c04 	movi	r3,-20048
8110a0bc:	10c02e0d 	sth	r3,184(r2)
	buffer_data_m2->pixel_data_block[1].pixel[25] = 0xB3B2;
8110a0c0:	e0bffe17 	ldw	r2,-8(fp)
8110a0c4:	00ecec84 	movi	r3,-19534
8110a0c8:	10c02e8d 	sth	r3,186(r2)
	buffer_data_m2->pixel_data_block[1].pixel[26] = 0xB5B4;
8110a0cc:	e0bffe17 	ldw	r2,-8(fp)
8110a0d0:	00ed6d04 	movi	r3,-19020
8110a0d4:	10c02f0d 	sth	r3,188(r2)
	buffer_data_m2->pixel_data_block[1].pixel[27] = 0xB7B6;
8110a0d8:	e0bffe17 	ldw	r2,-8(fp)
8110a0dc:	00eded84 	movi	r3,-18506
8110a0e0:	10c02f8d 	sth	r3,190(r2)
	buffer_data_m2->pixel_data_block[1].pixel[28] = 0xB9B8;
8110a0e4:	e0bffe17 	ldw	r2,-8(fp)
8110a0e8:	00ee6e04 	movi	r3,-17992
8110a0ec:	10c0300d 	sth	r3,192(r2)
	buffer_data_m2->pixel_data_block[1].pixel[29] = 0xBBBA;
8110a0f0:	e0bffe17 	ldw	r2,-8(fp)
8110a0f4:	00eeee84 	movi	r3,-17478
8110a0f8:	10c0308d 	sth	r3,194(r2)
	buffer_data_m2->pixel_data_block[1].pixel[30] = 0xBDBC;
8110a0fc:	e0bffe17 	ldw	r2,-8(fp)
8110a100:	00ef6f04 	movi	r3,-16964
8110a104:	10c0310d 	sth	r3,196(r2)
	buffer_data_m2->pixel_data_block[1].pixel[31] = 0xBFBE;
8110a108:	e0bffe17 	ldw	r2,-8(fp)
8110a10c:	00efef84 	movi	r3,-16450
8110a110:	10c0318d 	sth	r3,198(r2)
	buffer_data_m2->pixel_data_block[1].pixel[32] = 0xC1C0;
8110a114:	e0bffe17 	ldw	r2,-8(fp)
8110a118:	00f07004 	movi	r3,-15936
8110a11c:	10c0320d 	sth	r3,200(r2)
	buffer_data_m2->pixel_data_block[1].pixel[33] = 0xC3C2;
8110a120:	e0bffe17 	ldw	r2,-8(fp)
8110a124:	00f0f084 	movi	r3,-15422
8110a128:	10c0328d 	sth	r3,202(r2)
	buffer_data_m2->pixel_data_block[1].pixel[34] = 0xC5C4;
8110a12c:	e0bffe17 	ldw	r2,-8(fp)
8110a130:	00f17104 	movi	r3,-14908
8110a134:	10c0330d 	sth	r3,204(r2)
	buffer_data_m2->pixel_data_block[1].pixel[35] = 0xC7C6;
8110a138:	e0bffe17 	ldw	r2,-8(fp)
8110a13c:	00f1f184 	movi	r3,-14394
8110a140:	10c0338d 	sth	r3,206(r2)
	buffer_data_m2->pixel_data_block[1].pixel[36] = 0xC9C8;
8110a144:	e0bffe17 	ldw	r2,-8(fp)
8110a148:	00f27204 	movi	r3,-13880
8110a14c:	10c0340d 	sth	r3,208(r2)
	buffer_data_m2->pixel_data_block[1].pixel[37] = 0xCBCA;
8110a150:	e0bffe17 	ldw	r2,-8(fp)
8110a154:	00f2f284 	movi	r3,-13366
8110a158:	10c0348d 	sth	r3,210(r2)
	buffer_data_m2->pixel_data_block[1].pixel[38] = 0xCDCC;
8110a15c:	e0bffe17 	ldw	r2,-8(fp)
8110a160:	00f37304 	movi	r3,-12852
8110a164:	10c0350d 	sth	r3,212(r2)
	buffer_data_m2->pixel_data_block[1].pixel[39] = 0xCFCE;
8110a168:	e0bffe17 	ldw	r2,-8(fp)
8110a16c:	00f3f384 	movi	r3,-12338
8110a170:	10c0358d 	sth	r3,214(r2)
	buffer_data_m2->pixel_data_block[1].pixel[40] = 0xD1D0;
8110a174:	e0bffe17 	ldw	r2,-8(fp)
8110a178:	00f47404 	movi	r3,-11824
8110a17c:	10c0360d 	sth	r3,216(r2)
	buffer_data_m2->pixel_data_block[1].pixel[41] = 0xD3D2;
8110a180:	e0bffe17 	ldw	r2,-8(fp)
8110a184:	00f4f484 	movi	r3,-11310
8110a188:	10c0368d 	sth	r3,218(r2)
	buffer_data_m2->pixel_data_block[1].pixel[42] = 0xD5D4;
8110a18c:	e0bffe17 	ldw	r2,-8(fp)
8110a190:	00f57504 	movi	r3,-10796
8110a194:	10c0370d 	sth	r3,220(r2)
	buffer_data_m2->pixel_data_block[1].pixel[43] = 0xD7D6;
8110a198:	e0bffe17 	ldw	r2,-8(fp)
8110a19c:	00f5f584 	movi	r3,-10282
8110a1a0:	10c0378d 	sth	r3,222(r2)
	buffer_data_m2->pixel_data_block[1].pixel[44] = 0xD9D8;
8110a1a4:	e0bffe17 	ldw	r2,-8(fp)
8110a1a8:	00f67604 	movi	r3,-9768
8110a1ac:	10c0380d 	sth	r3,224(r2)
	buffer_data_m2->pixel_data_block[1].pixel[45] = 0xDBDA;
8110a1b0:	e0bffe17 	ldw	r2,-8(fp)
8110a1b4:	00f6f684 	movi	r3,-9254
8110a1b8:	10c0388d 	sth	r3,226(r2)
	buffer_data_m2->pixel_data_block[1].pixel[46] = 0xDDDC;
8110a1bc:	e0bffe17 	ldw	r2,-8(fp)
8110a1c0:	00f77704 	movi	r3,-8740
8110a1c4:	10c0390d 	sth	r3,228(r2)
	buffer_data_m2->pixel_data_block[1].pixel[47] = 0xDFDE;
8110a1c8:	e0bffe17 	ldw	r2,-8(fp)
8110a1cc:	00f7f784 	movi	r3,-8226
8110a1d0:	10c0398d 	sth	r3,230(r2)
	buffer_data_m2->pixel_data_block[1].pixel[48] = 0xE1E0;
8110a1d4:	e0bffe17 	ldw	r2,-8(fp)
8110a1d8:	00f87804 	movi	r3,-7712
8110a1dc:	10c03a0d 	sth	r3,232(r2)
	buffer_data_m2->pixel_data_block[1].pixel[49] = 0xE3E2;
8110a1e0:	e0bffe17 	ldw	r2,-8(fp)
8110a1e4:	00f8f884 	movi	r3,-7198
8110a1e8:	10c03a8d 	sth	r3,234(r2)
	buffer_data_m2->pixel_data_block[1].pixel[50] = 0xE5E4;
8110a1ec:	e0bffe17 	ldw	r2,-8(fp)
8110a1f0:	00f97904 	movi	r3,-6684
8110a1f4:	10c03b0d 	sth	r3,236(r2)
	buffer_data_m2->pixel_data_block[1].pixel[51] = 0xE7E6;
8110a1f8:	e0bffe17 	ldw	r2,-8(fp)
8110a1fc:	00f9f984 	movi	r3,-6170
8110a200:	10c03b8d 	sth	r3,238(r2)
	buffer_data_m2->pixel_data_block[1].pixel[52] = 0xE9E8;
8110a204:	e0bffe17 	ldw	r2,-8(fp)
8110a208:	00fa7a04 	movi	r3,-5656
8110a20c:	10c03c0d 	sth	r3,240(r2)
	buffer_data_m2->pixel_data_block[1].pixel[53] = 0xEBEA;
8110a210:	e0bffe17 	ldw	r2,-8(fp)
8110a214:	00fafa84 	movi	r3,-5142
8110a218:	10c03c8d 	sth	r3,242(r2)
	buffer_data_m2->pixel_data_block[1].pixel[54] = 0xEDEC;
8110a21c:	e0bffe17 	ldw	r2,-8(fp)
8110a220:	00fb7b04 	movi	r3,-4628
8110a224:	10c03d0d 	sth	r3,244(r2)
	buffer_data_m2->pixel_data_block[1].pixel[55] = 0xEFEE;
8110a228:	e0bffe17 	ldw	r2,-8(fp)
8110a22c:	00fbfb84 	movi	r3,-4114
8110a230:	10c03d8d 	sth	r3,246(r2)
	buffer_data_m2->pixel_data_block[1].pixel[56] = 0xF1F0;
8110a234:	e0bffe17 	ldw	r2,-8(fp)
8110a238:	00fc7c04 	movi	r3,-3600
8110a23c:	10c03e0d 	sth	r3,248(r2)
	buffer_data_m2->pixel_data_block[1].pixel[57] = 0xF3F2;
8110a240:	e0bffe17 	ldw	r2,-8(fp)
8110a244:	00fcfc84 	movi	r3,-3086
8110a248:	10c03e8d 	sth	r3,250(r2)
	buffer_data_m2->pixel_data_block[1].pixel[58] = 0xF5F4;
8110a24c:	e0bffe17 	ldw	r2,-8(fp)
8110a250:	00fd7d04 	movi	r3,-2572
8110a254:	10c03f0d 	sth	r3,252(r2)
	buffer_data_m2->pixel_data_block[1].pixel[59] = 0xF7F6;
8110a258:	e0bffe17 	ldw	r2,-8(fp)
8110a25c:	00fdfd84 	movi	r3,-2058
8110a260:	10c03f8d 	sth	r3,254(r2)
	buffer_data_m2->pixel_data_block[1].pixel[60] = 0xF9F8;
8110a264:	e0bffe17 	ldw	r2,-8(fp)
8110a268:	00fe7e04 	movi	r3,-1544
8110a26c:	10c0400d 	sth	r3,256(r2)
	buffer_data_m2->pixel_data_block[1].pixel[61] = 0xFBFA;
8110a270:	e0bffe17 	ldw	r2,-8(fp)
8110a274:	00fefe84 	movi	r3,-1030
8110a278:	10c0408d 	sth	r3,258(r2)
	buffer_data_m2->pixel_data_block[1].pixel[62] = 0xFDFC;
8110a27c:	e0bffe17 	ldw	r2,-8(fp)
8110a280:	00ff7f04 	movi	r3,-516
8110a284:	10c0410d 	sth	r3,260(r2)
	buffer_data_m2->pixel_data_block[1].pixel[63] = 0xFFFE;
8110a288:	e0bffe17 	ldw	r2,-8(fp)
8110a28c:	00ffff84 	movi	r3,-2
8110a290:	10c0418d 	sth	r3,262(r2)
	buffer_data_m2->pixel_data_block[1].mask = 0xFFFFFFFFFFFFFFFF;
8110a294:	e0bffe17 	ldw	r2,-8(fp)
8110a298:	00ffffc4 	movi	r3,-1
8110a29c:	10c04215 	stw	r3,264(r2)
8110a2a0:	00ffffc4 	movi	r3,-1
8110a2a4:	10c04315 	stw	r3,268(r2)

	buffer_data_m2->pixel_data_block[2] = buffer_data_m2->pixel_data_block[0];
8110a2a8:	e0bffe17 	ldw	r2,-8(fp)
8110a2ac:	e0fffe17 	ldw	r3,-8(fp)
8110a2b0:	10804404 	addi	r2,r2,272
8110a2b4:	1809883a 	mov	r4,r3
8110a2b8:	00c02204 	movi	r3,136
8110a2bc:	180d883a 	mov	r6,r3
8110a2c0:	200b883a 	mov	r5,r4
8110a2c4:	1009883a 	mov	r4,r2
8110a2c8:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[3] = buffer_data_m2->pixel_data_block[1];
8110a2cc:	e0fffe17 	ldw	r3,-8(fp)
8110a2d0:	e0bffe17 	ldw	r2,-8(fp)
8110a2d4:	18c06604 	addi	r3,r3,408
8110a2d8:	10802204 	addi	r2,r2,136
8110a2dc:	01002204 	movi	r4,136
8110a2e0:	200d883a 	mov	r6,r4
8110a2e4:	100b883a 	mov	r5,r2
8110a2e8:	1809883a 	mov	r4,r3
8110a2ec:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[4] = buffer_data_m2->pixel_data_block[2];
8110a2f0:	e0fffe17 	ldw	r3,-8(fp)
8110a2f4:	e0bffe17 	ldw	r2,-8(fp)
8110a2f8:	18c08804 	addi	r3,r3,544
8110a2fc:	10804404 	addi	r2,r2,272
8110a300:	01002204 	movi	r4,136
8110a304:	200d883a 	mov	r6,r4
8110a308:	100b883a 	mov	r5,r2
8110a30c:	1809883a 	mov	r4,r3
8110a310:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[5] = buffer_data_m2->pixel_data_block[3];
8110a314:	e0fffe17 	ldw	r3,-8(fp)
8110a318:	e0bffe17 	ldw	r2,-8(fp)
8110a31c:	18c0aa04 	addi	r3,r3,680
8110a320:	10806604 	addi	r2,r2,408
8110a324:	01002204 	movi	r4,136
8110a328:	200d883a 	mov	r6,r4
8110a32c:	100b883a 	mov	r5,r2
8110a330:	1809883a 	mov	r4,r3
8110a334:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[6] = buffer_data_m2->pixel_data_block[4];
8110a338:	e0fffe17 	ldw	r3,-8(fp)
8110a33c:	e0bffe17 	ldw	r2,-8(fp)
8110a340:	18c0cc04 	addi	r3,r3,816
8110a344:	10808804 	addi	r2,r2,544
8110a348:	01002204 	movi	r4,136
8110a34c:	200d883a 	mov	r6,r4
8110a350:	100b883a 	mov	r5,r2
8110a354:	1809883a 	mov	r4,r3
8110a358:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[7] = buffer_data_m2->pixel_data_block[5];
8110a35c:	e0fffe17 	ldw	r3,-8(fp)
8110a360:	e0bffe17 	ldw	r2,-8(fp)
8110a364:	18c0ee04 	addi	r3,r3,952
8110a368:	1080aa04 	addi	r2,r2,680
8110a36c:	01002204 	movi	r4,136
8110a370:	200d883a 	mov	r6,r4
8110a374:	100b883a 	mov	r5,r2
8110a378:	1809883a 	mov	r4,r3
8110a37c:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[8] = buffer_data_m2->pixel_data_block[6];
8110a380:	e0fffe17 	ldw	r3,-8(fp)
8110a384:	e0bffe17 	ldw	r2,-8(fp)
8110a388:	18c11004 	addi	r3,r3,1088
8110a38c:	1080cc04 	addi	r2,r2,816
8110a390:	01002204 	movi	r4,136
8110a394:	200d883a 	mov	r6,r4
8110a398:	100b883a 	mov	r5,r2
8110a39c:	1809883a 	mov	r4,r3
8110a3a0:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[9] = buffer_data_m2->pixel_data_block[7];
8110a3a4:	e0fffe17 	ldw	r3,-8(fp)
8110a3a8:	e0bffe17 	ldw	r2,-8(fp)
8110a3ac:	18c13204 	addi	r3,r3,1224
8110a3b0:	1080ee04 	addi	r2,r2,952
8110a3b4:	01002204 	movi	r4,136
8110a3b8:	200d883a 	mov	r6,r4
8110a3bc:	100b883a 	mov	r5,r2
8110a3c0:	1809883a 	mov	r4,r3
8110a3c4:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[10] = buffer_data_m2->pixel_data_block[8];
8110a3c8:	e0fffe17 	ldw	r3,-8(fp)
8110a3cc:	e0bffe17 	ldw	r2,-8(fp)
8110a3d0:	18c15404 	addi	r3,r3,1360
8110a3d4:	10811004 	addi	r2,r2,1088
8110a3d8:	01002204 	movi	r4,136
8110a3dc:	200d883a 	mov	r6,r4
8110a3e0:	100b883a 	mov	r5,r2
8110a3e4:	1809883a 	mov	r4,r3
8110a3e8:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[11] = buffer_data_m2->pixel_data_block[9];
8110a3ec:	e0fffe17 	ldw	r3,-8(fp)
8110a3f0:	e0bffe17 	ldw	r2,-8(fp)
8110a3f4:	18c17604 	addi	r3,r3,1496
8110a3f8:	10813204 	addi	r2,r2,1224
8110a3fc:	01002204 	movi	r4,136
8110a400:	200d883a 	mov	r6,r4
8110a404:	100b883a 	mov	r5,r2
8110a408:	1809883a 	mov	r4,r3
8110a40c:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[12] = buffer_data_m2->pixel_data_block[10];
8110a410:	e0fffe17 	ldw	r3,-8(fp)
8110a414:	e0bffe17 	ldw	r2,-8(fp)
8110a418:	18c19804 	addi	r3,r3,1632
8110a41c:	10815404 	addi	r2,r2,1360
8110a420:	01002204 	movi	r4,136
8110a424:	200d883a 	mov	r6,r4
8110a428:	100b883a 	mov	r5,r2
8110a42c:	1809883a 	mov	r4,r3
8110a430:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[13] = buffer_data_m2->pixel_data_block[11];
8110a434:	e0fffe17 	ldw	r3,-8(fp)
8110a438:	e0bffe17 	ldw	r2,-8(fp)
8110a43c:	18c1ba04 	addi	r3,r3,1768
8110a440:	10817604 	addi	r2,r2,1496
8110a444:	01002204 	movi	r4,136
8110a448:	200d883a 	mov	r6,r4
8110a44c:	100b883a 	mov	r5,r2
8110a450:	1809883a 	mov	r4,r3
8110a454:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[14] = buffer_data_m2->pixel_data_block[12];
8110a458:	e0fffe17 	ldw	r3,-8(fp)
8110a45c:	e0bffe17 	ldw	r2,-8(fp)
8110a460:	18c1dc04 	addi	r3,r3,1904
8110a464:	10819804 	addi	r2,r2,1632
8110a468:	01002204 	movi	r4,136
8110a46c:	200d883a 	mov	r6,r4
8110a470:	100b883a 	mov	r5,r2
8110a474:	1809883a 	mov	r4,r3
8110a478:	110ce640 	call	8110ce64 <memcpy>
	buffer_data_m2->pixel_data_block[15] = buffer_data_m2->pixel_data_block[13];
8110a47c:	e0fffe17 	ldw	r3,-8(fp)
8110a480:	e0bffe17 	ldw	r2,-8(fp)
8110a484:	18c1fe04 	addi	r3,r3,2040
8110a488:	1081ba04 	addi	r2,r2,1768
8110a48c:	01002204 	movi	r4,136
8110a490:	200d883a 	mov	r6,r4
8110a494:	100b883a 	mov	r5,r2
8110a498:	1809883a 	mov	r4,r3
8110a49c:	110ce640 	call	8110ce64 <memcpy>
//		pDDR++;
//	}

// init DMA

	if (fee_init_m1_dma()) {
8110a4a0:	11018340 	call	81101834 <fee_init_m1_dma>
8110a4a4:	10000326 	beq	r2,zero,8110a4b4 <main+0x161c>
		printf("dma_m1 iniciado corretamente \n");
8110a4a8:	012044b4 	movhi	r4,33042
8110a4ac:	213df004 	addi	r4,r4,-2112
8110a4b0:	110d0f80 	call	8110d0f8 <puts>
	}

	if (fee_init_m2_dma()) {
8110a4b4:	11018dc0 	call	811018dc <fee_init_m2_dma>
8110a4b8:	10000326 	beq	r2,zero,8110a4c8 <main+0x1630>
		printf("dma_m2 iniciado corretamente \n");
8110a4bc:	012044b4 	movhi	r4,33042
8110a4c0:	213df804 	addi	r4,r4,-2080
8110a4c4:	110d0f80 	call	8110d0f8 <puts>
	}

	if (fee_dma_m1_transfer(0, 16, right_buffer, channel_a_buffer)) {
8110a4c8:	01c00044 	movi	r7,1
8110a4cc:	000d883a 	mov	r6,zero
8110a4d0:	01400404 	movi	r5,16
8110a4d4:	0009883a 	mov	r4,zero
8110a4d8:	11019840 	call	81101984 <fee_dma_m1_transfer>
8110a4dc:	10000926 	beq	r2,zero,8110a504 <main+0x166c>
		if (fee_dma_m2_transfer(0, 16, left_buffer, channel_a_buffer)) {
8110a4e0:	01c00044 	movi	r7,1
8110a4e4:	01800044 	movi	r6,1
8110a4e8:	01400404 	movi	r5,16
8110a4ec:	0009883a 	mov	r4,zero
8110a4f0:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110a4f4:	10000326 	beq	r2,zero,8110a504 <main+0x166c>
			printf("channel a transferido corretamente \n");
8110a4f8:	012044b4 	movhi	r4,33042
8110a4fc:	213e0004 	addi	r4,r4,-2048
8110a500:	110d0f80 	call	8110d0f8 <puts>
		}
	}

	if (fee_dma_m1_transfer(0, 16, right_buffer, channel_b_buffer)) {
8110a504:	01c00084 	movi	r7,2
8110a508:	000d883a 	mov	r6,zero
8110a50c:	01400404 	movi	r5,16
8110a510:	0009883a 	mov	r4,zero
8110a514:	11019840 	call	81101984 <fee_dma_m1_transfer>
8110a518:	10000926 	beq	r2,zero,8110a540 <main+0x16a8>
		if (fee_dma_m2_transfer(0, 16, left_buffer, channel_b_buffer)) {
8110a51c:	01c00084 	movi	r7,2
8110a520:	01800044 	movi	r6,1
8110a524:	01400404 	movi	r5,16
8110a528:	0009883a 	mov	r4,zero
8110a52c:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110a530:	10000326 	beq	r2,zero,8110a540 <main+0x16a8>
			printf("channel b transferido corretamente \n");
8110a534:	012044b4 	movhi	r4,33042
8110a538:	213e0904 	addi	r4,r4,-2012
8110a53c:	110d0f80 	call	8110d0f8 <puts>
		}
	}

	if (fee_dma_m1_transfer(0, 16, right_buffer, channel_c_buffer)) {
8110a540:	01c000c4 	movi	r7,3
8110a544:	000d883a 	mov	r6,zero
8110a548:	01400404 	movi	r5,16
8110a54c:	0009883a 	mov	r4,zero
8110a550:	11019840 	call	81101984 <fee_dma_m1_transfer>
8110a554:	10000926 	beq	r2,zero,8110a57c <main+0x16e4>
		if (fee_dma_m2_transfer(0, 16, left_buffer, channel_c_buffer)) {
8110a558:	01c000c4 	movi	r7,3
8110a55c:	01800044 	movi	r6,1
8110a560:	01400404 	movi	r5,16
8110a564:	0009883a 	mov	r4,zero
8110a568:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110a56c:	10000326 	beq	r2,zero,8110a57c <main+0x16e4>
			printf("channel c transferido corretamente \n");
8110a570:	012044b4 	movhi	r4,33042
8110a574:	213e1204 	addi	r4,r4,-1976
8110a578:	110d0f80 	call	8110d0f8 <puts>
		}
	}

	if (fee_dma_m1_transfer(0, 16, right_buffer, channel_d_buffer)) {
8110a57c:	01c00104 	movi	r7,4
8110a580:	000d883a 	mov	r6,zero
8110a584:	01400404 	movi	r5,16
8110a588:	0009883a 	mov	r4,zero
8110a58c:	11019840 	call	81101984 <fee_dma_m1_transfer>
8110a590:	10000926 	beq	r2,zero,8110a5b8 <main+0x1720>
		if (fee_dma_m2_transfer(0, 16, left_buffer, channel_d_buffer)) {
8110a594:	01c00104 	movi	r7,4
8110a598:	01800044 	movi	r6,1
8110a59c:	01400404 	movi	r5,16
8110a5a0:	0009883a 	mov	r4,zero
8110a5a4:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110a5a8:	10000326 	beq	r2,zero,8110a5b8 <main+0x1720>
			printf("channel d transferido corretamente \n");
8110a5ac:	012044b4 	movhi	r4,33042
8110a5b0:	213e1b04 	addi	r4,r4,-1940
8110a5b4:	110d0f80 	call	8110d0f8 <puts>
		}
	}

	if (fee_dma_m1_transfer(0, 16, right_buffer, channel_e_buffer)) {
8110a5b8:	01c00144 	movi	r7,5
8110a5bc:	000d883a 	mov	r6,zero
8110a5c0:	01400404 	movi	r5,16
8110a5c4:	0009883a 	mov	r4,zero
8110a5c8:	11019840 	call	81101984 <fee_dma_m1_transfer>
8110a5cc:	10000926 	beq	r2,zero,8110a5f4 <main+0x175c>
		if (fee_dma_m2_transfer(0, 16, left_buffer, channel_e_buffer)) {
8110a5d0:	01c00144 	movi	r7,5
8110a5d4:	01800044 	movi	r6,1
8110a5d8:	01400404 	movi	r5,16
8110a5dc:	0009883a 	mov	r4,zero
8110a5e0:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110a5e4:	10000326 	beq	r2,zero,8110a5f4 <main+0x175c>
			printf("channel e transferido corretamente \n");
8110a5e8:	012044b4 	movhi	r4,33042
8110a5ec:	213e2404 	addi	r4,r4,-1904
8110a5f0:	110d0f80 	call	8110d0f8 <puts>
		}
	}

	if (fee_dma_m1_transfer(0, 16, right_buffer, channel_f_buffer)) {
8110a5f4:	01c00184 	movi	r7,6
8110a5f8:	000d883a 	mov	r6,zero
8110a5fc:	01400404 	movi	r5,16
8110a600:	0009883a 	mov	r4,zero
8110a604:	11019840 	call	81101984 <fee_dma_m1_transfer>
8110a608:	10000926 	beq	r2,zero,8110a630 <main+0x1798>
		if (fee_dma_m2_transfer(0, 16, left_buffer, channel_f_buffer)) {
8110a60c:	01c00184 	movi	r7,6
8110a610:	01800044 	movi	r6,1
8110a614:	01400404 	movi	r5,16
8110a618:	0009883a 	mov	r4,zero
8110a61c:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110a620:	10000326 	beq	r2,zero,8110a630 <main+0x1798>
			printf("channel f transferido corretamente \n");
8110a624:	012044b4 	movhi	r4,33042
8110a628:	213e2d04 	addi	r4,r4,-1868
8110a62c:	110d0f80 	call	8110d0f8 <puts>
		}
	}

	if (fee_dma_m1_transfer(0, 16, right_buffer, channel_g_buffer)) {
8110a630:	01c001c4 	movi	r7,7
8110a634:	000d883a 	mov	r6,zero
8110a638:	01400404 	movi	r5,16
8110a63c:	0009883a 	mov	r4,zero
8110a640:	11019840 	call	81101984 <fee_dma_m1_transfer>
8110a644:	10000926 	beq	r2,zero,8110a66c <main+0x17d4>
		if (fee_dma_m2_transfer(0, 16, left_buffer, channel_g_buffer)) {
8110a648:	01c001c4 	movi	r7,7
8110a64c:	01800044 	movi	r6,1
8110a650:	01400404 	movi	r5,16
8110a654:	0009883a 	mov	r4,zero
8110a658:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110a65c:	10000326 	beq	r2,zero,8110a66c <main+0x17d4>
			printf("channel g transferido corretamente \n");
8110a660:	012044b4 	movhi	r4,33042
8110a664:	213e3604 	addi	r4,r4,-1832
8110a668:	110d0f80 	call	8110d0f8 <puts>
		}
	}

	if (fee_dma_m1_transfer(0, 16, right_buffer, channel_h_buffer)) {
8110a66c:	01c00204 	movi	r7,8
8110a670:	000d883a 	mov	r6,zero
8110a674:	01400404 	movi	r5,16
8110a678:	0009883a 	mov	r4,zero
8110a67c:	11019840 	call	81101984 <fee_dma_m1_transfer>
8110a680:	10000926 	beq	r2,zero,8110a6a8 <main+0x1810>
		if (fee_dma_m2_transfer(0, 16, left_buffer, channel_h_buffer)) {
8110a684:	01c00204 	movi	r7,8
8110a688:	01800044 	movi	r6,1
8110a68c:	01400404 	movi	r5,16
8110a690:	0009883a 	mov	r4,zero
8110a694:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110a698:	10000326 	beq	r2,zero,8110a6a8 <main+0x1810>
			printf("channel h transferido corretamente \n");
8110a69c:	012044b4 	movhi	r4,33042
8110a6a0:	213e3f04 	addi	r4,r4,-1796
8110a6a4:	110d0f80 	call	8110d0f8 <puts>
		}
	}

	bool loop = TRUE;
8110a6a8:	00800044 	movi	r2,1
8110a6ac:	e0bff815 	stw	r2,-32(fp)

	while (loop) {
8110a6b0:	0000a206 	br	8110a93c <main+0x1aa4>
		usleep(5000);
8110a6b4:	0104e204 	movi	r4,5000
8110a6b8:	111a2000 	call	8111a200 <usleep>

		comm_update_link_status(&spw_a);
8110a6bc:	012044b4 	movhi	r4,33042
8110a6c0:	2108fc04 	addi	r4,r4,9200
8110a6c4:	1100fdc0 	call	81100fdc <comm_update_link_status>
		if (spw_a.link_status.running) {
8110a6c8:	00a044b4 	movhi	r2,33042
8110a6cc:	1088fc04 	addi	r2,r2,9200
8110a6d0:	10800b17 	ldw	r2,44(r2)
8110a6d4:	10000726 	beq	r2,zero,8110a6f4 <main+0x185c>
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1R_MASK);
8110a6d8:	01400084 	movi	r5,2
8110a6dc:	0009883a 	mov	r4,zero
8110a6e0:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1G_MASK);
8110a6e4:	01400044 	movi	r5,1
8110a6e8:	01000044 	movi	r4,1
8110a6ec:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110a6f0:	00000606 	br	8110a70c <main+0x1874>
		} else {
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1G_MASK);
8110a6f4:	01400044 	movi	r5,1
8110a6f8:	0009883a 	mov	r4,zero
8110a6fc:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1R_MASK);
8110a700:	01400084 	movi	r5,2
8110a704:	01000044 	movi	r4,1
8110a708:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		}

		comm_update_link_status(&spw_b);
8110a70c:	012044b4 	movhi	r4,33042
8110a710:	21089304 	addi	r4,r4,8780
8110a714:	1100fdc0 	call	81100fdc <comm_update_link_status>
		if (spw_b.link_status.running) {
8110a718:	00a044b4 	movhi	r2,33042
8110a71c:	10889304 	addi	r2,r2,8780
8110a720:	10800b17 	ldw	r2,44(r2)
8110a724:	10000726 	beq	r2,zero,8110a744 <main+0x18ac>
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_2R_MASK);
8110a728:	01400204 	movi	r5,8
8110a72c:	0009883a 	mov	r4,zero
8110a730:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_2G_MASK);
8110a734:	01400104 	movi	r5,4
8110a738:	01000044 	movi	r4,1
8110a73c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110a740:	00000606 	br	8110a75c <main+0x18c4>
		} else {
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_2G_MASK);
8110a744:	01400104 	movi	r5,4
8110a748:	0009883a 	mov	r4,zero
8110a74c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_2R_MASK);
8110a750:	01400204 	movi	r5,8
8110a754:	01000044 	movi	r4,1
8110a758:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		}

		comm_update_link_status(&spw_c);
8110a75c:	012044b4 	movhi	r4,33042
8110a760:	21091104 	addi	r4,r4,9284
8110a764:	1100fdc0 	call	81100fdc <comm_update_link_status>
		if (spw_c.link_status.running) {
8110a768:	00a044b4 	movhi	r2,33042
8110a76c:	10891104 	addi	r2,r2,9284
8110a770:	10800b17 	ldw	r2,44(r2)
8110a774:	10000726 	beq	r2,zero,8110a794 <main+0x18fc>
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_3R_MASK);
8110a778:	01400804 	movi	r5,32
8110a77c:	0009883a 	mov	r4,zero
8110a780:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_3G_MASK);
8110a784:	01400404 	movi	r5,16
8110a788:	01000044 	movi	r4,1
8110a78c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110a790:	00000606 	br	8110a7ac <main+0x1914>
		} else {
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_3G_MASK);
8110a794:	01400404 	movi	r5,16
8110a798:	0009883a 	mov	r4,zero
8110a79c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_3R_MASK);
8110a7a0:	01400804 	movi	r5,32
8110a7a4:	01000044 	movi	r4,1
8110a7a8:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		}

		comm_update_link_status(&spw_d);
8110a7ac:	012044b4 	movhi	r4,33042
8110a7b0:	2108bd04 	addi	r4,r4,8948
8110a7b4:	1100fdc0 	call	81100fdc <comm_update_link_status>
		if (spw_d.link_status.running) {
8110a7b8:	00a044b4 	movhi	r2,33042
8110a7bc:	1088bd04 	addi	r2,r2,8948
8110a7c0:	10800b17 	ldw	r2,44(r2)
8110a7c4:	10000726 	beq	r2,zero,8110a7e4 <main+0x194c>
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_4R_MASK);
8110a7c8:	01402004 	movi	r5,128
8110a7cc:	0009883a 	mov	r4,zero
8110a7d0:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_4G_MASK);
8110a7d4:	01401004 	movi	r5,64
8110a7d8:	01000044 	movi	r4,1
8110a7dc:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110a7e0:	00000606 	br	8110a7fc <main+0x1964>
		} else {
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_4G_MASK);
8110a7e4:	01401004 	movi	r5,64
8110a7e8:	0009883a 	mov	r4,zero
8110a7ec:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_4R_MASK);
8110a7f0:	01402004 	movi	r5,128
8110a7f4:	01000044 	movi	r4,1
8110a7f8:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		}

		comm_update_link_status(&spw_e);
8110a7fc:	012044b4 	movhi	r4,33042
8110a800:	21087e04 	addi	r4,r4,8696
8110a804:	1100fdc0 	call	81100fdc <comm_update_link_status>
		if (spw_e.link_status.running) {
8110a808:	00a044b4 	movhi	r2,33042
8110a80c:	10887e04 	addi	r2,r2,8696
8110a810:	10800b17 	ldw	r2,44(r2)
8110a814:	10000726 	beq	r2,zero,8110a834 <main+0x199c>
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_5R_MASK);
8110a818:	01408004 	movi	r5,512
8110a81c:	0009883a 	mov	r4,zero
8110a820:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_5G_MASK);
8110a824:	01404004 	movi	r5,256
8110a828:	01000044 	movi	r4,1
8110a82c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110a830:	00000606 	br	8110a84c <main+0x19b4>
		} else {
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_5G_MASK);
8110a834:	01404004 	movi	r5,256
8110a838:	0009883a 	mov	r4,zero
8110a83c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_5R_MASK);
8110a840:	01408004 	movi	r5,512
8110a844:	01000044 	movi	r4,1
8110a848:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		}

		comm_update_link_status(&spw_f);
8110a84c:	012044b4 	movhi	r4,33042
8110a850:	2108d204 	addi	r4,r4,9032
8110a854:	1100fdc0 	call	81100fdc <comm_update_link_status>
		if (spw_f.link_status.running) {
8110a858:	00a044b4 	movhi	r2,33042
8110a85c:	1088d204 	addi	r2,r2,9032
8110a860:	10800b17 	ldw	r2,44(r2)
8110a864:	10000726 	beq	r2,zero,8110a884 <main+0x19ec>
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_6R_MASK);
8110a868:	01420004 	movi	r5,2048
8110a86c:	0009883a 	mov	r4,zero
8110a870:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_6G_MASK);
8110a874:	01410004 	movi	r5,1024
8110a878:	01000044 	movi	r4,1
8110a87c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110a880:	00000606 	br	8110a89c <main+0x1a04>
		} else {
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_6G_MASK);
8110a884:	01410004 	movi	r5,1024
8110a888:	0009883a 	mov	r4,zero
8110a88c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_6R_MASK);
8110a890:	01420004 	movi	r5,2048
8110a894:	01000044 	movi	r4,1
8110a898:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		}

		comm_update_link_status(&spw_g);
8110a89c:	012044b4 	movhi	r4,33042
8110a8a0:	2108a804 	addi	r4,r4,8864
8110a8a4:	1100fdc0 	call	81100fdc <comm_update_link_status>
		if (spw_g.link_status.running) {
8110a8a8:	00a044b4 	movhi	r2,33042
8110a8ac:	1088a804 	addi	r2,r2,8864
8110a8b0:	10800b17 	ldw	r2,44(r2)
8110a8b4:	10000726 	beq	r2,zero,8110a8d4 <main+0x1a3c>
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_7R_MASK);
8110a8b8:	01480004 	movi	r5,8192
8110a8bc:	0009883a 	mov	r4,zero
8110a8c0:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_7G_MASK);
8110a8c4:	01440004 	movi	r5,4096
8110a8c8:	01000044 	movi	r4,1
8110a8cc:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110a8d0:	00000606 	br	8110a8ec <main+0x1a54>
		} else {
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_7G_MASK);
8110a8d4:	01440004 	movi	r5,4096
8110a8d8:	0009883a 	mov	r4,zero
8110a8dc:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_7R_MASK);
8110a8e0:	01480004 	movi	r5,8192
8110a8e4:	01000044 	movi	r4,1
8110a8e8:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		}

		comm_update_link_status(&spw_h);
8110a8ec:	012044b4 	movhi	r4,33042
8110a8f0:	2108e704 	addi	r4,r4,9116
8110a8f4:	1100fdc0 	call	81100fdc <comm_update_link_status>
		if (spw_h.link_status.running) {
8110a8f8:	00a044b4 	movhi	r2,33042
8110a8fc:	1088e704 	addi	r2,r2,9116
8110a900:	10800b17 	ldw	r2,44(r2)
8110a904:	10000726 	beq	r2,zero,8110a924 <main+0x1a8c>
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8R_MASK);
8110a908:	01600014 	movui	r5,32768
8110a90c:	0009883a 	mov	r4,zero
8110a910:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8G_MASK);
8110a914:	01500004 	movi	r5,16384
8110a918:	01000044 	movi	r4,1
8110a91c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110a920:	00000606 	br	8110a93c <main+0x1aa4>
		} else {
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8G_MASK);
8110a924:	01500004 	movi	r5,16384
8110a928:	0009883a 	mov	r4,zero
8110a92c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
8110a930:	01600014 	movui	r5,32768
8110a934:	01000044 	movi	r4,1
8110a938:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		}
	}

	bool loop = TRUE;

	while (loop) {
8110a93c:	e0bff817 	ldw	r2,-32(fp)
8110a940:	103f5c1e 	bne	r2,zero,8110a6b4 <__reset+0xfb0ea6b4>
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8G_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
		}
	}

	while (loop) {
8110a944:	00004f06 	br	8110aa84 <main+0x1bec>
		printf("selecione memoria \n");
8110a948:	012044b4 	movhi	r4,33042
8110a94c:	213e4804 	addi	r4,r4,-1760
8110a950:	110d0f80 	call	8110d0f8 <puts>
		switch (getchar()) {
8110a954:	d0a00b17 	ldw	r2,-32724(gp)
8110a958:	10800117 	ldw	r2,4(r2)
8110a95c:	1009883a 	mov	r4,r2
8110a960:	110cddc0 	call	8110cddc <getc>
8110a964:	10c00ca0 	cmpeqi	r3,r2,50
8110a968:	1800171e 	bne	r3,zero,8110a9c8 <main+0x1b30>
8110a96c:	10c00cc8 	cmpgei	r3,r2,51
8110a970:	1800031e 	bne	r3,zero,8110a980 <main+0x1ae8>
8110a974:	10800c60 	cmpeqi	r2,r2,49
8110a978:	1000061e 	bne	r2,zero,8110a994 <main+0x1afc>
8110a97c:	00003d06 	br	8110aa74 <main+0x1bdc>
8110a980:	10c01860 	cmpeqi	r3,r2,97
8110a984:	18001d1e 	bne	r3,zero,8110a9fc <main+0x1b64>
8110a988:	10801ca0 	cmpeqi	r2,r2,114
8110a98c:	1000341e 	bne	r2,zero,8110aa60 <main+0x1bc8>
8110a990:	00003806 	br	8110aa74 <main+0x1bdc>
		case '1':
			printf("m2 R \n");
8110a994:	012044b4 	movhi	r4,33042
8110a998:	213e4d04 	addi	r4,r4,-1740
8110a99c:	110d0f80 	call	8110d0f8 <puts>
			if (fee_dma_m2_transfer(0, 16, right_buffer, channel_a_buffer)) {
8110a9a0:	01c00044 	movi	r7,1
8110a9a4:	000d883a 	mov	r6,zero
8110a9a8:	01400404 	movi	r5,16
8110a9ac:	0009883a 	mov	r4,zero
8110a9b0:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110a9b4:	10003326 	beq	r2,zero,8110aa84 <main+0x1bec>
				printf("dma_m2 transferido corretamente \n");
8110a9b8:	012044b4 	movhi	r4,33042
8110a9bc:	213e4f04 	addi	r4,r4,-1732
8110a9c0:	110d0f80 	call	8110d0f8 <puts>
			}
			break;
8110a9c4:	00002f06 	br	8110aa84 <main+0x1bec>

		case '2':
			printf("m2 L \n");
8110a9c8:	012044b4 	movhi	r4,33042
8110a9cc:	213e5804 	addi	r4,r4,-1696
8110a9d0:	110d0f80 	call	8110d0f8 <puts>
			if (fee_dma_m2_transfer(0, 16, left_buffer, channel_a_buffer)) {
8110a9d4:	01c00044 	movi	r7,1
8110a9d8:	01800044 	movi	r6,1
8110a9dc:	01400404 	movi	r5,16
8110a9e0:	0009883a 	mov	r4,zero
8110a9e4:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110a9e8:	10002626 	beq	r2,zero,8110aa84 <main+0x1bec>
				printf("dma_m2 transferido corretamente \n");
8110a9ec:	012044b4 	movhi	r4,33042
8110a9f0:	213e4f04 	addi	r4,r4,-1732
8110a9f4:	110d0f80 	call	8110d0f8 <puts>
			}
			break;
8110a9f8:	00002206 	br	8110aa84 <main+0x1bec>

		case 'a':
			printf("a \n");
8110a9fc:	012044b4 	movhi	r4,33042
8110aa00:	213e5a04 	addi	r4,r4,-1688
8110aa04:	110d0f80 	call	8110d0f8 <puts>
			if (fee_dma_m2_transfer(0, 16, right_buffer, channel_a_buffer)) {
8110aa08:	01c00044 	movi	r7,1
8110aa0c:	000d883a 	mov	r6,zero
8110aa10:	01400404 	movi	r5,16
8110aa14:	0009883a 	mov	r4,zero
8110aa18:	1101d900 	call	81101d90 <fee_dma_m2_transfer>
8110aa1c:	10000326 	beq	r2,zero,8110aa2c <main+0x1b94>
				printf("dma_m2 transferido corretamente \n");
8110aa20:	012044b4 	movhi	r4,33042
8110aa24:	213e4f04 	addi	r4,r4,-1732
8110aa28:	110d0f80 	call	8110d0f8 <puts>
			}
//			if (fee_dma_m1_transfer(0, 16, left_buffer, channel_a_buffer)) {
//				printf("dma_m1 transferido corretamente \n");
//			}
			usleep(500);
8110aa2c:	01007d04 	movi	r4,500
8110aa30:	111a2000 	call	8111a200 <usleep>
			comm_update_buffers_status(&spw_a);
8110aa34:	012044b4 	movhi	r4,33042
8110aa38:	2108fc04 	addi	r4,r4,9200
8110aa3c:	11013300 	call	81101330 <comm_update_buffers_status>
			printf("empty: %u \n", spw_a.buffer_status.right_buffer_empty);
8110aa40:	00a044b4 	movhi	r2,33042
8110aa44:	1088fc04 	addi	r2,r2,9200
8110aa48:	10801417 	ldw	r2,80(r2)
8110aa4c:	100b883a 	mov	r5,r2
8110aa50:	012044b4 	movhi	r4,33042
8110aa54:	213e5b04 	addi	r4,r4,-1684
8110aa58:	110cfdc0 	call	8110cfdc <printf>
			break;
8110aa5c:	00000906 	br	8110aa84 <main+0x1bec>

		case 'r':
			printf("r \n");
8110aa60:	012044b4 	movhi	r4,33042
8110aa64:	213e5e04 	addi	r4,r4,-1672
8110aa68:	110d0f80 	call	8110d0f8 <puts>
			loop = FALSE;
8110aa6c:	e03ff815 	stw	zero,-32(fp)
			break;
8110aa70:	00000406 	br	8110aa84 <main+0x1bec>

		default:
			printf("errou \n");
8110aa74:	012044b4 	movhi	r4,33042
8110aa78:	213e5f04 	addi	r4,r4,-1668
8110aa7c:	110d0f80 	call	8110d0f8 <puts>
			break;
8110aa80:	0001883a 	nop
			LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8G_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
		}
	}

	while (loop) {
8110aa84:	e0bff817 	ldw	r2,-32(fp)
8110aa88:	103faf1e 	bne	r2,zero,8110a948 <__reset+0xfb0ea948>
			printf("errou \n");
			break;
		}
	}

	comm_config_link(&spw_a);
8110aa8c:	012044b4 	movhi	r4,33042
8110aa90:	2108fc04 	addi	r4,r4,9200
8110aa94:	1100d300 	call	81100d30 <comm_config_link>
	comm_config_link(&spw_h);
8110aa98:	012044b4 	movhi	r4,33042
8110aa9c:	2108e704 	addi	r4,r4,9116
8110aaa0:	1100d300 	call	81100d30 <comm_config_link>

	//*spw_a.channel_address = 0x102;
	printf("%08X", *(spw_a.channel_address));
8110aaa4:	00a044b4 	movhi	r2,33042
8110aaa8:	1088fc04 	addi	r2,r2,9200
8110aaac:	10800017 	ldw	r2,0(r2)
8110aab0:	10800017 	ldw	r2,0(r2)
8110aab4:	100b883a 	mov	r5,r2
8110aab8:	012044b4 	movhi	r4,33042
8110aabc:	213e6104 	addi	r4,r4,-1660
8110aac0:	110cfdc0 	call	8110cfdc <printf>

	usleep(10000);
8110aac4:	0109c404 	movi	r4,10000
8110aac8:	111a2000 	call	8111a200 <usleep>

	comm_update_link_status(&spw_a);
8110aacc:	012044b4 	movhi	r4,33042
8110aad0:	2108fc04 	addi	r4,r4,9200
8110aad4:	1100fdc0 	call	81100fdc <comm_update_link_status>
	if (spw_a.link_status.running) {
8110aad8:	00a044b4 	movhi	r2,33042
8110aadc:	1088fc04 	addi	r2,r2,9200
8110aae0:	10800b17 	ldw	r2,44(r2)
8110aae4:	10000726 	beq	r2,zero,8110ab04 <main+0x1c6c>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1R_MASK);
8110aae8:	01400084 	movi	r5,2
8110aaec:	0009883a 	mov	r4,zero
8110aaf0:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1G_MASK);
8110aaf4:	01400044 	movi	r5,1
8110aaf8:	01000044 	movi	r4,1
8110aafc:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110ab00:	00000606 	br	8110ab1c <main+0x1c84>
	} else {
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1G_MASK);
8110ab04:	01400044 	movi	r5,1
8110ab08:	0009883a 	mov	r4,zero
8110ab0c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1R_MASK);
8110ab10:	01400084 	movi	r5,2
8110ab14:	01000044 	movi	r4,1
8110ab18:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	}

	comm_update_link_status(&spw_h);
8110ab1c:	012044b4 	movhi	r4,33042
8110ab20:	2108e704 	addi	r4,r4,9116
8110ab24:	1100fdc0 	call	81100fdc <comm_update_link_status>
	if (spw_h.link_status.running) {
8110ab28:	00a044b4 	movhi	r2,33042
8110ab2c:	1088e704 	addi	r2,r2,9116
8110ab30:	10800b17 	ldw	r2,44(r2)
8110ab34:	10000726 	beq	r2,zero,8110ab54 <main+0x1cbc>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8R_MASK);
8110ab38:	01600014 	movui	r5,32768
8110ab3c:	0009883a 	mov	r4,zero
8110ab40:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8G_MASK);
8110ab44:	01500004 	movi	r5,16384
8110ab48:	01000044 	movi	r4,1
8110ab4c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110ab50:	00000606 	br	8110ab6c <main+0x1cd4>
	} else {
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8G_MASK);
8110ab54:	01500004 	movi	r5,16384
8110ab58:	0009883a 	mov	r4,zero
8110ab5c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
8110ab60:	01600014 	movui	r5,32768
8110ab64:	01000044 	movi	r4,1
8110ab68:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
	}

	int i = 0;
8110ab6c:	e03ff915 	stw	zero,-28(fp)
	loop = TRUE;
8110ab70:	00800044 	movi	r2,1
8110ab74:	e0bff815 	stw	r2,-32(fp)
	while (loop) {
8110ab78:	00002106 	br	8110ac00 <main+0x1d68>
		for (i = 0; i < 1000; i++) {
8110ab7c:	e03ff915 	stw	zero,-28(fp)
8110ab80:	00000506 	br	8110ab98 <main+0x1d00>
			usleep(1000);
8110ab84:	0100fa04 	movi	r4,1000
8110ab88:	111a2000 	call	8111a200 <usleep>
	}

	int i = 0;
	loop = TRUE;
	while (loop) {
		for (i = 0; i < 1000; i++) {
8110ab8c:	e0bff917 	ldw	r2,-28(fp)
8110ab90:	10800044 	addi	r2,r2,1
8110ab94:	e0bff915 	stw	r2,-28(fp)
8110ab98:	e0bff917 	ldw	r2,-28(fp)
8110ab9c:	1080fa10 	cmplti	r2,r2,1000
8110aba0:	103ff81e 	bne	r2,zero,8110ab84 <__reset+0xfb0eab84>
			usleep(1000);
		}
		comm_update_buffers_status(&spw_a);
8110aba4:	012044b4 	movhi	r4,33042
8110aba8:	2108fc04 	addi	r4,r4,9200
8110abac:	11013300 	call	81101330 <comm_update_buffers_status>
		printf("empty r: %u \n", spw_a.buffer_status.right_buffer_empty);
8110abb0:	00a044b4 	movhi	r2,33042
8110abb4:	1088fc04 	addi	r2,r2,9200
8110abb8:	10801417 	ldw	r2,80(r2)
8110abbc:	100b883a 	mov	r5,r2
8110abc0:	012044b4 	movhi	r4,33042
8110abc4:	213e6304 	addi	r4,r4,-1652
8110abc8:	110cfdc0 	call	8110cfdc <printf>
		printf("empty l: %u \n", spw_a.buffer_status.left_buffer_empty);
8110abcc:	00a044b4 	movhi	r2,33042
8110abd0:	1088fc04 	addi	r2,r2,9200
8110abd4:	10801317 	ldw	r2,76(r2)
8110abd8:	100b883a 	mov	r5,r2
8110abdc:	012044b4 	movhi	r4,33042
8110abe0:	213e6704 	addi	r4,r4,-1636
8110abe4:	110cfdc0 	call	8110cfdc <printf>
		printf("int_cnt: %u \n", int_cnt);
8110abe8:	d0a01c03 	ldbu	r2,-32656(gp)
8110abec:	10803fcc 	andi	r2,r2,255
8110abf0:	100b883a 	mov	r5,r2
8110abf4:	012044b4 	movhi	r4,33042
8110abf8:	213e6b04 	addi	r4,r4,-1620
8110abfc:	110cfdc0 	call	8110cfdc <printf>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
	}

	int i = 0;
	loop = TRUE;
	while (loop) {
8110ac00:	e0bff817 	ldw	r2,-32(fp)
8110ac04:	103fdd1e 	bne	r2,zero,8110ab7c <__reset+0xfb0eab7c>
	}

//}

//getchar();
	printf("passou 1 \n");
8110ac08:	012044b4 	movhi	r4,33042
8110ac0c:	213e6f04 	addi	r4,r4,-1604
8110ac10:	110d0f80 	call	8110d0f8 <puts>
//printf("%d \n", data);

//if (*pSrc++ != *pDes++){

//Realiza teste dos LEDS, entra em um loop infinito.
	TestLeds();
8110ac14:	110ac580 	call	8110ac58 <TestLeds>

	//Teste de transferencia com DMA (M2 -> M1);
	//TestDMA_M2_M1();

	//Acende os leds de status e atualiza a temperatura da FPGA no display de 7 segmentos a cada 1 segundo
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_ALL_MASK);
8110ac18:	014007f4 	movhi	r5,31
8110ac1c:	01000044 	movi	r4,1
8110ac20:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>

	//FTDI_WRITE_REG(FTDI_BYTE_ENABLE_BURST_REG_OFFSET, 0b00001111);
	//FTDI_WRITE_REG(FTDI_DATA_BURST_REG_OFFSET, 0xF0A0B0C0);

	while (1) {
		TEMP_Read(&tempFPGA, &tempBoard);
8110ac24:	e0ffff44 	addi	r3,fp,-3
8110ac28:	e0bfff04 	addi	r2,fp,-4
8110ac2c:	180b883a 	mov	r5,r3
8110ac30:	1009883a 	mov	r4,r2
8110ac34:	11086c40 	call	811086c4 <TEMP_Read>
		SSDP_UPDATE(tempFPGA);
8110ac38:	e0bfff03 	ldbu	r2,-4(fp)
8110ac3c:	10803fcc 	andi	r2,r2,255
8110ac40:	1009883a 	mov	r4,r2
8110ac44:	1103e200 	call	81103e20 <SSDP_UPDATE>
		usleep(1000 * 1000);
8110ac48:	010003f4 	movhi	r4,15
8110ac4c:	21109004 	addi	r4,r4,16960
8110ac50:	111a2000 	call	8111a200 <usleep>
		// TESTE EPC - Write
		//ConfigFTDIWrite();
		//WriteCicle();

//DummyWrite();
	}
8110ac54:	003ff306 	br	8110ac24 <__reset+0xfb0eac24>

8110ac58 <TestLeds>:
 usleep(5*1000);
 }
 }
 */

void TestLeds(void) {
8110ac58:	defffd04 	addi	sp,sp,-12
8110ac5c:	dfc00215 	stw	ra,8(sp)
8110ac60:	df000115 	stw	fp,4(sp)
8110ac64:	df000104 	addi	fp,sp,4
	alt_8 led = 1;
8110ac68:	00800044 	movi	r2,1
8110ac6c:	e0bfff05 	stb	r2,-4(fp)
	//SSDP_CONFIG(SSDP_TEST_MODE);

	alt_8 tempFPGA = 0;
8110ac70:	e03fff85 	stb	zero,-2(fp)
	alt_8 tempBoard = 0;
8110ac74:	e03fffc5 	stb	zero,-1(fp)

	alt_u8 red = 0;
8110ac78:	e03fff45 	stb	zero,-3(fp)

	TEMP_Read(&tempFPGA, &tempBoard);
8110ac7c:	e0ffffc4 	addi	r3,fp,-1
8110ac80:	e0bfff84 	addi	r2,fp,-2
8110ac84:	180b883a 	mov	r5,r3
8110ac88:	1009883a 	mov	r4,r2
8110ac8c:	11086c40 	call	811086c4 <TEMP_Read>
	SSDP_UPDATE(tempFPGA);
8110ac90:	e0bfff83 	ldbu	r2,-2(fp)
8110ac94:	10803fcc 	andi	r2,r2,255
8110ac98:	1009883a 	mov	r4,r2
8110ac9c:	1103e200 	call	81103e20 <SSDP_UPDATE>

	while (1) {
		switch (led) {
8110aca0:	e0bfff07 	ldb	r2,-4(fp)
8110aca4:	10c00268 	cmpgeui	r3,r2,9
8110aca8:	1800ac1e 	bne	r3,zero,8110af5c <TestLeds+0x304>
8110acac:	100690ba 	slli	r3,r2,2
8110acb0:	00a04474 	movhi	r2,33041
8110acb4:	10ab3104 	addi	r2,r2,-21308
8110acb8:	1885883a 	add	r2,r3,r2
8110acbc:	10800017 	ldw	r2,0(r2)
8110acc0:	1000683a 	jmp	r2
8110acc4:	8110af5c 	xori	r4,r16,17085
8110acc8:	8110ace8 	cmpgeui	r4,r16,17075
8110accc:	8110ad34 	orhi	r4,r16,17076
8110acd0:	8110ad80 	call	88110ad8 <__reset+0x20f0ad8>
8110acd4:	8110adcc 	andi	r4,r16,17079
8110acd8:	8110ae18 	cmpnei	r4,r16,17080
8110acdc:	8110ae64 	muli	r4,r16,17081
8110ace0:	8110aeb0 	cmpltui	r4,r16,17082
8110ace4:	8110aefc 	xorhi	r4,r16,17083
		case 1:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_0_MASK);
8110ace8:	01400044 	movi	r5,1
8110acec:	01000044 	movi	r4,1
8110acf0:	11028e00 	call	811028e0 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_1_MASK);
8110acf4:	014000b4 	movhi	r5,2
8110acf8:	01000044 	movi	r4,1
8110acfc:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			if (red) {
8110ad00:	e0bfff43 	ldbu	r2,-3(fp)
8110ad04:	10000426 	beq	r2,zero,8110ad18 <TestLeds+0xc0>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1R_MASK);
8110ad08:	01400084 	movi	r5,2
8110ad0c:	01000044 	movi	r4,1
8110ad10:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110ad14:	00000306 	br	8110ad24 <TestLeds+0xcc>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1G_MASK);
8110ad18:	01400044 	movi	r5,1
8110ad1c:	01000044 	movi	r4,1
8110ad20:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			}
			led++;
8110ad24:	e0bfff03 	ldbu	r2,-4(fp)
8110ad28:	10800044 	addi	r2,r2,1
8110ad2c:	e0bfff05 	stb	r2,-4(fp)
			break;
8110ad30:	00008b06 	br	8110af60 <TestLeds+0x308>
		case 2:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_1_MASK);
8110ad34:	01400084 	movi	r5,2
8110ad38:	01000044 	movi	r4,1
8110ad3c:	11028e00 	call	811028e0 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_2_MASK);
8110ad40:	01400134 	movhi	r5,4
8110ad44:	01000044 	movi	r4,1
8110ad48:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			if (red) {
8110ad4c:	e0bfff43 	ldbu	r2,-3(fp)
8110ad50:	10000426 	beq	r2,zero,8110ad64 <TestLeds+0x10c>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_2R_MASK);
8110ad54:	01400204 	movi	r5,8
8110ad58:	01000044 	movi	r4,1
8110ad5c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110ad60:	00000306 	br	8110ad70 <TestLeds+0x118>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_2G_MASK);
8110ad64:	01400104 	movi	r5,4
8110ad68:	01000044 	movi	r4,1
8110ad6c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			}
			led++;
8110ad70:	e0bfff03 	ldbu	r2,-4(fp)
8110ad74:	10800044 	addi	r2,r2,1
8110ad78:	e0bfff05 	stb	r2,-4(fp)
			break;
8110ad7c:	00007806 	br	8110af60 <TestLeds+0x308>
		case 3:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_2_MASK);
8110ad80:	01400104 	movi	r5,4
8110ad84:	01000044 	movi	r4,1
8110ad88:	11028e00 	call	811028e0 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_3_MASK);
8110ad8c:	01400234 	movhi	r5,8
8110ad90:	01000044 	movi	r4,1
8110ad94:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			if (red) {
8110ad98:	e0bfff43 	ldbu	r2,-3(fp)
8110ad9c:	10000426 	beq	r2,zero,8110adb0 <TestLeds+0x158>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_3R_MASK);
8110ada0:	01400804 	movi	r5,32
8110ada4:	01000044 	movi	r4,1
8110ada8:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110adac:	00000306 	br	8110adbc <TestLeds+0x164>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_3G_MASK);
8110adb0:	01400404 	movi	r5,16
8110adb4:	01000044 	movi	r4,1
8110adb8:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			}
			led++;
8110adbc:	e0bfff03 	ldbu	r2,-4(fp)
8110adc0:	10800044 	addi	r2,r2,1
8110adc4:	e0bfff05 	stb	r2,-4(fp)
			break;
8110adc8:	00006506 	br	8110af60 <TestLeds+0x308>
		case 4:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_3_MASK);
8110adcc:	01400204 	movi	r5,8
8110add0:	01000044 	movi	r4,1
8110add4:	11028e00 	call	811028e0 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_4_MASK);
8110add8:	01400434 	movhi	r5,16
8110addc:	01000044 	movi	r4,1
8110ade0:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			if (red) {
8110ade4:	e0bfff43 	ldbu	r2,-3(fp)
8110ade8:	10000426 	beq	r2,zero,8110adfc <TestLeds+0x1a4>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_4R_MASK);
8110adec:	01402004 	movi	r5,128
8110adf0:	01000044 	movi	r4,1
8110adf4:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110adf8:	00000306 	br	8110ae08 <TestLeds+0x1b0>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_4G_MASK);
8110adfc:	01401004 	movi	r5,64
8110ae00:	01000044 	movi	r4,1
8110ae04:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			}
			led++;
8110ae08:	e0bfff03 	ldbu	r2,-4(fp)
8110ae0c:	10800044 	addi	r2,r2,1
8110ae10:	e0bfff05 	stb	r2,-4(fp)
			break;
8110ae14:	00005206 	br	8110af60 <TestLeds+0x308>
		case 5:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_4_MASK);
8110ae18:	01400404 	movi	r5,16
8110ae1c:	01000044 	movi	r4,1
8110ae20:	11028e00 	call	811028e0 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_1_MASK);
8110ae24:	014000b4 	movhi	r5,2
8110ae28:	01000044 	movi	r4,1
8110ae2c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			if (red) {
8110ae30:	e0bfff43 	ldbu	r2,-3(fp)
8110ae34:	10000426 	beq	r2,zero,8110ae48 <TestLeds+0x1f0>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_5R_MASK);
8110ae38:	01408004 	movi	r5,512
8110ae3c:	01000044 	movi	r4,1
8110ae40:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110ae44:	00000306 	br	8110ae54 <TestLeds+0x1fc>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_5G_MASK);
8110ae48:	01404004 	movi	r5,256
8110ae4c:	01000044 	movi	r4,1
8110ae50:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			}
			led++;
8110ae54:	e0bfff03 	ldbu	r2,-4(fp)
8110ae58:	10800044 	addi	r2,r2,1
8110ae5c:	e0bfff05 	stb	r2,-4(fp)
			break;
8110ae60:	00003f06 	br	8110af60 <TestLeds+0x308>
		case 6:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_5_MASK);
8110ae64:	01400804 	movi	r5,32
8110ae68:	01000044 	movi	r4,1
8110ae6c:	11028e00 	call	811028e0 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_2_MASK);
8110ae70:	01400134 	movhi	r5,4
8110ae74:	01000044 	movi	r4,1
8110ae78:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			if (red) {
8110ae7c:	e0bfff43 	ldbu	r2,-3(fp)
8110ae80:	10000426 	beq	r2,zero,8110ae94 <TestLeds+0x23c>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_6R_MASK);
8110ae84:	01420004 	movi	r5,2048
8110ae88:	01000044 	movi	r4,1
8110ae8c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110ae90:	00000306 	br	8110aea0 <TestLeds+0x248>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_6G_MASK);
8110ae94:	01410004 	movi	r5,1024
8110ae98:	01000044 	movi	r4,1
8110ae9c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			}
			led++;
8110aea0:	e0bfff03 	ldbu	r2,-4(fp)
8110aea4:	10800044 	addi	r2,r2,1
8110aea8:	e0bfff05 	stb	r2,-4(fp)
			break;
8110aeac:	00002c06 	br	8110af60 <TestLeds+0x308>
		case 7:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_6_MASK);
8110aeb0:	01401004 	movi	r5,64
8110aeb4:	01000044 	movi	r4,1
8110aeb8:	11028e00 	call	811028e0 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_3_MASK);
8110aebc:	01400234 	movhi	r5,8
8110aec0:	01000044 	movi	r4,1
8110aec4:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			if (red) {
8110aec8:	e0bfff43 	ldbu	r2,-3(fp)
8110aecc:	10000426 	beq	r2,zero,8110aee0 <TestLeds+0x288>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_7R_MASK);
8110aed0:	01480004 	movi	r5,8192
8110aed4:	01000044 	movi	r4,1
8110aed8:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110aedc:	00000306 	br	8110aeec <TestLeds+0x294>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_7G_MASK);
8110aee0:	01440004 	movi	r5,4096
8110aee4:	01000044 	movi	r4,1
8110aee8:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			}
			led++;
8110aeec:	e0bfff03 	ldbu	r2,-4(fp)
8110aef0:	10800044 	addi	r2,r2,1
8110aef4:	e0bfff05 	stb	r2,-4(fp)
			break;
8110aef8:	00001906 	br	8110af60 <TestLeds+0x308>
		case 8:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_7_MASK);
8110aefc:	01402004 	movi	r5,128
8110af00:	01000044 	movi	r4,1
8110af04:	11028e00 	call	811028e0 <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_4_MASK);
8110af08:	01400434 	movhi	r5,16
8110af0c:	01000044 	movi	r4,1
8110af10:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			if (red) {
8110af14:	e0bfff43 	ldbu	r2,-3(fp)
8110af18:	10000426 	beq	r2,zero,8110af2c <TestLeds+0x2d4>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
8110af1c:	01600014 	movui	r5,32768
8110af20:	01000044 	movi	r4,1
8110af24:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
8110af28:	00000306 	br	8110af38 <TestLeds+0x2e0>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8G_MASK);
8110af2c:	01500004 	movi	r5,16384
8110af30:	01000044 	movi	r4,1
8110af34:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
			}
			led = 1;
8110af38:	00800044 	movi	r2,1
8110af3c:	e0bfff05 	stb	r2,-4(fp)
			if (red) {
8110af40:	e0bfff43 	ldbu	r2,-3(fp)
8110af44:	10000226 	beq	r2,zero,8110af50 <TestLeds+0x2f8>
				red = 0;
8110af48:	e03fff45 	stb	zero,-3(fp)
			} else {
				red = 1;
			}
			break;
8110af4c:	00000406 	br	8110af60 <TestLeds+0x308>
			}
			led = 1;
			if (red) {
				red = 0;
			} else {
				red = 1;
8110af50:	00800044 	movi	r2,1
8110af54:	e0bfff45 	stb	r2,-3(fp)
			}
			break;
8110af58:	00000106 	br	8110af60 <TestLeds+0x308>
		default:
			led = 0;
8110af5c:	e03fff05 	stb	zero,-4(fp)
		}

		usleep(1000 * 1000);
8110af60:	010003f4 	movhi	r4,15
8110af64:	21109004 	addi	r4,r4,16960
8110af68:	111a2000 	call	8111a200 <usleep>

		LEDS_BOARD_DRIVE(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110af6c:	01403fc4 	movi	r5,255
8110af70:	0009883a 	mov	r4,zero
8110af74:	11028e00 	call	811028e0 <LEDS_BOARD_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_ST_ALL_MASK);
8110af78:	014007f4 	movhi	r5,31
8110af7c:	0009883a 	mov	r4,zero
8110af80:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_GR_ALL_MASK);
8110af84:	017fffd4 	movui	r5,65535
8110af88:	0009883a 	mov	r4,zero
8110af8c:	11029580 	call	81102958 <LEDS_PAINEL_DRIVE>

		TEMP_Read(&tempFPGA, &tempBoard);
8110af90:	e0ffffc4 	addi	r3,fp,-1
8110af94:	e0bfff84 	addi	r2,fp,-2
8110af98:	180b883a 	mov	r5,r3
8110af9c:	1009883a 	mov	r4,r2
8110afa0:	11086c40 	call	811086c4 <TEMP_Read>
		SSDP_UPDATE(tempFPGA);
8110afa4:	e0bfff83 	ldbu	r2,-2(fp)
8110afa8:	10803fcc 	andi	r2,r2,255
8110afac:	1009883a 	mov	r4,r2
8110afb0:	1103e200 	call	81103e20 <SSDP_UPDATE>

	}
8110afb4:	003f3a06 	br	8110aca0 <__reset+0xfb0eaca0>

8110afb8 <TestDMA_M1_M2>:
}

bool TestDMA_M1_M2(void) {
8110afb8:	deffd404 	addi	sp,sp,-176
8110afbc:	dfc02b15 	stw	ra,172(sp)
8110afc0:	df002a15 	stw	fp,168(sp)
8110afc4:	dc002915 	stw	r16,164(sp)
8110afc8:	df002a04 	addi	fp,sp,168

	alt_msgdma_dev *DMADev = NULL;
8110afcc:	e03fde15 	stw	zero,-136(fp)

	if (DMA_OPEN_DEVICE(&DMADev, (char *) DMA_DDR_M1_CSR_BASE) == FALSE) {
8110afd0:	e0bfde04 	addi	r2,fp,-136
8110afd4:	01604834 	movhi	r5,33056
8110afd8:	294c1804 	addi	r5,r5,12384
8110afdc:	1009883a 	mov	r4,r2
8110afe0:	1107a680 	call	81107a68 <DMA_OPEN_DEVICE>
8110afe4:	1000051e 	bne	r2,zero,8110affc <TestDMA_M1_M2+0x44>
		printf("Error Opening DMA Device");
8110afe8:	012044b4 	movhi	r4,33042
8110afec:	213e7204 	addi	r4,r4,-1592
8110aff0:	110cfdc0 	call	8110cfdc <printf>
		return FALSE;
8110aff4:	0005883a 	mov	r2,zero
8110aff8:	0000cd06 	br	8110b330 <TestDMA_M1_M2+0x378>
	}

	if (DMA_DISPATCHER_RESET(DMADev, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
8110affc:	e0bfde17 	ldw	r2,-136(fp)
8110b000:	000d883a 	mov	r6,zero
8110b004:	01400044 	movi	r5,1
8110b008:	1009883a 	mov	r4,r2
8110b00c:	1107c740 	call	81107c74 <DMA_DISPATCHER_RESET>
8110b010:	1000051e 	bne	r2,zero,8110b028 <TestDMA_M1_M2+0x70>
		printf("Error Reseting Dispatcher");
8110b014:	012044b4 	movhi	r4,33042
8110b018:	213e7904 	addi	r4,r4,-1564
8110b01c:	110cfdc0 	call	8110cfdc <printf>
		return FALSE;
8110b020:	0005883a 	mov	r2,zero
8110b024:	0000c206 	br	8110b330 <TestDMA_M1_M2+0x378>
	}

	alt_u32 control_bits = 0x00000000;
8110b028:	e03fda15 	stw	zero,-152(fp)

	const alt_u32 step = DDR2_M1_MEMORY_SIZE / 16;
8110b02c:	00820034 	movhi	r2,2048
8110b030:	e0bfdb15 	stw	r2,-148(fp)
	alt_u32 read_addr_arr[16];
	read_addr_arr[0] = DDR2_M1_MEMORY_BASE;
8110b034:	e03fdf15 	stw	zero,-132(fp)
	read_addr_arr[1] = read_addr_arr[0] + step;
8110b038:	e0ffdf17 	ldw	r3,-132(fp)
8110b03c:	e0bfdb17 	ldw	r2,-148(fp)
8110b040:	1885883a 	add	r2,r3,r2
8110b044:	e0bfe015 	stw	r2,-128(fp)
	read_addr_arr[2] = read_addr_arr[1] + step;
8110b048:	e0ffe017 	ldw	r3,-128(fp)
8110b04c:	e0bfdb17 	ldw	r2,-148(fp)
8110b050:	1885883a 	add	r2,r3,r2
8110b054:	e0bfe115 	stw	r2,-124(fp)
	read_addr_arr[3] = read_addr_arr[2] + step;
8110b058:	e0ffe117 	ldw	r3,-124(fp)
8110b05c:	e0bfdb17 	ldw	r2,-148(fp)
8110b060:	1885883a 	add	r2,r3,r2
8110b064:	e0bfe215 	stw	r2,-120(fp)
	read_addr_arr[4] = read_addr_arr[3] + step;
8110b068:	e0ffe217 	ldw	r3,-120(fp)
8110b06c:	e0bfdb17 	ldw	r2,-148(fp)
8110b070:	1885883a 	add	r2,r3,r2
8110b074:	e0bfe315 	stw	r2,-116(fp)
	read_addr_arr[5] = read_addr_arr[4] + step;
8110b078:	e0ffe317 	ldw	r3,-116(fp)
8110b07c:	e0bfdb17 	ldw	r2,-148(fp)
8110b080:	1885883a 	add	r2,r3,r2
8110b084:	e0bfe415 	stw	r2,-112(fp)
	read_addr_arr[6] = read_addr_arr[5] + step;
8110b088:	e0ffe417 	ldw	r3,-112(fp)
8110b08c:	e0bfdb17 	ldw	r2,-148(fp)
8110b090:	1885883a 	add	r2,r3,r2
8110b094:	e0bfe515 	stw	r2,-108(fp)
	read_addr_arr[7] = read_addr_arr[6] + step;
8110b098:	e0ffe517 	ldw	r3,-108(fp)
8110b09c:	e0bfdb17 	ldw	r2,-148(fp)
8110b0a0:	1885883a 	add	r2,r3,r2
8110b0a4:	e0bfe615 	stw	r2,-104(fp)
	read_addr_arr[8] = read_addr_arr[7] + step;
8110b0a8:	e0ffe617 	ldw	r3,-104(fp)
8110b0ac:	e0bfdb17 	ldw	r2,-148(fp)
8110b0b0:	1885883a 	add	r2,r3,r2
8110b0b4:	e0bfe715 	stw	r2,-100(fp)
	read_addr_arr[9] = read_addr_arr[8] + step;
8110b0b8:	e0ffe717 	ldw	r3,-100(fp)
8110b0bc:	e0bfdb17 	ldw	r2,-148(fp)
8110b0c0:	1885883a 	add	r2,r3,r2
8110b0c4:	e0bfe815 	stw	r2,-96(fp)
	read_addr_arr[10] = read_addr_arr[9] + step;
8110b0c8:	e0ffe817 	ldw	r3,-96(fp)
8110b0cc:	e0bfdb17 	ldw	r2,-148(fp)
8110b0d0:	1885883a 	add	r2,r3,r2
8110b0d4:	e0bfe915 	stw	r2,-92(fp)
	read_addr_arr[11] = read_addr_arr[10] + step;
8110b0d8:	e0ffe917 	ldw	r3,-92(fp)
8110b0dc:	e0bfdb17 	ldw	r2,-148(fp)
8110b0e0:	1885883a 	add	r2,r3,r2
8110b0e4:	e0bfea15 	stw	r2,-88(fp)
	read_addr_arr[12] = read_addr_arr[11] + step;
8110b0e8:	e0ffea17 	ldw	r3,-88(fp)
8110b0ec:	e0bfdb17 	ldw	r2,-148(fp)
8110b0f0:	1885883a 	add	r2,r3,r2
8110b0f4:	e0bfeb15 	stw	r2,-84(fp)
	read_addr_arr[13] = read_addr_arr[12] + step;
8110b0f8:	e0ffeb17 	ldw	r3,-84(fp)
8110b0fc:	e0bfdb17 	ldw	r2,-148(fp)
8110b100:	1885883a 	add	r2,r3,r2
8110b104:	e0bfec15 	stw	r2,-80(fp)
	read_addr_arr[14] = read_addr_arr[13] + step;
8110b108:	e0ffec17 	ldw	r3,-80(fp)
8110b10c:	e0bfdb17 	ldw	r2,-148(fp)
8110b110:	1885883a 	add	r2,r3,r2
8110b114:	e0bfed15 	stw	r2,-76(fp)
	read_addr_arr[15] = read_addr_arr[14] + step;
8110b118:	e0ffed17 	ldw	r3,-76(fp)
8110b11c:	e0bfdb17 	ldw	r2,-148(fp)
8110b120:	1885883a 	add	r2,r3,r2
8110b124:	e0bfee15 	stw	r2,-72(fp)

	alt_u32 write_addr_arr[16];
	write_addr_arr[0] = DDR2_M2_MEMORY_BASE;
8110b128:	00a00034 	movhi	r2,32768
8110b12c:	e0bfef15 	stw	r2,-68(fp)
	write_addr_arr[1] = write_addr_arr[0] + step;
8110b130:	e0ffef17 	ldw	r3,-68(fp)
8110b134:	e0bfdb17 	ldw	r2,-148(fp)
8110b138:	1885883a 	add	r2,r3,r2
8110b13c:	e0bff015 	stw	r2,-64(fp)
	write_addr_arr[2] = write_addr_arr[1] + step;
8110b140:	e0fff017 	ldw	r3,-64(fp)
8110b144:	e0bfdb17 	ldw	r2,-148(fp)
8110b148:	1885883a 	add	r2,r3,r2
8110b14c:	e0bff115 	stw	r2,-60(fp)
	write_addr_arr[3] = write_addr_arr[2] + step;
8110b150:	e0fff117 	ldw	r3,-60(fp)
8110b154:	e0bfdb17 	ldw	r2,-148(fp)
8110b158:	1885883a 	add	r2,r3,r2
8110b15c:	e0bff215 	stw	r2,-56(fp)
	write_addr_arr[4] = write_addr_arr[3] + step;
8110b160:	e0fff217 	ldw	r3,-56(fp)
8110b164:	e0bfdb17 	ldw	r2,-148(fp)
8110b168:	1885883a 	add	r2,r3,r2
8110b16c:	e0bff315 	stw	r2,-52(fp)
	write_addr_arr[5] = write_addr_arr[4] + step;
8110b170:	e0fff317 	ldw	r3,-52(fp)
8110b174:	e0bfdb17 	ldw	r2,-148(fp)
8110b178:	1885883a 	add	r2,r3,r2
8110b17c:	e0bff415 	stw	r2,-48(fp)
	write_addr_arr[6] = write_addr_arr[5] + step;
8110b180:	e0fff417 	ldw	r3,-48(fp)
8110b184:	e0bfdb17 	ldw	r2,-148(fp)
8110b188:	1885883a 	add	r2,r3,r2
8110b18c:	e0bff515 	stw	r2,-44(fp)
	write_addr_arr[7] = write_addr_arr[6] + step;
8110b190:	e0fff517 	ldw	r3,-44(fp)
8110b194:	e0bfdb17 	ldw	r2,-148(fp)
8110b198:	1885883a 	add	r2,r3,r2
8110b19c:	e0bff615 	stw	r2,-40(fp)
	write_addr_arr[8] = write_addr_arr[7] + step;
8110b1a0:	e0fff617 	ldw	r3,-40(fp)
8110b1a4:	e0bfdb17 	ldw	r2,-148(fp)
8110b1a8:	1885883a 	add	r2,r3,r2
8110b1ac:	e0bff715 	stw	r2,-36(fp)
	write_addr_arr[9] = write_addr_arr[8] + step;
8110b1b0:	e0fff717 	ldw	r3,-36(fp)
8110b1b4:	e0bfdb17 	ldw	r2,-148(fp)
8110b1b8:	1885883a 	add	r2,r3,r2
8110b1bc:	e0bff815 	stw	r2,-32(fp)
	write_addr_arr[10] = write_addr_arr[9] + step;
8110b1c0:	e0fff817 	ldw	r3,-32(fp)
8110b1c4:	e0bfdb17 	ldw	r2,-148(fp)
8110b1c8:	1885883a 	add	r2,r3,r2
8110b1cc:	e0bff915 	stw	r2,-28(fp)
	write_addr_arr[11] = write_addr_arr[10] + step;
8110b1d0:	e0fff917 	ldw	r3,-28(fp)
8110b1d4:	e0bfdb17 	ldw	r2,-148(fp)
8110b1d8:	1885883a 	add	r2,r3,r2
8110b1dc:	e0bffa15 	stw	r2,-24(fp)
	write_addr_arr[12] = write_addr_arr[11] + step;
8110b1e0:	e0fffa17 	ldw	r3,-24(fp)
8110b1e4:	e0bfdb17 	ldw	r2,-148(fp)
8110b1e8:	1885883a 	add	r2,r3,r2
8110b1ec:	e0bffb15 	stw	r2,-20(fp)
	write_addr_arr[13] = write_addr_arr[12] + step;
8110b1f0:	e0fffb17 	ldw	r3,-20(fp)
8110b1f4:	e0bfdb17 	ldw	r2,-148(fp)
8110b1f8:	1885883a 	add	r2,r3,r2
8110b1fc:	e0bffc15 	stw	r2,-16(fp)
	write_addr_arr[14] = write_addr_arr[13] + step;
8110b200:	e0fffc17 	ldw	r3,-16(fp)
8110b204:	e0bfdb17 	ldw	r2,-148(fp)
8110b208:	1885883a 	add	r2,r3,r2
8110b20c:	e0bffd15 	stw	r2,-12(fp)
	write_addr_arr[15] = write_addr_arr[14] + step;
8110b210:	e0fffd17 	ldw	r3,-12(fp)
8110b214:	e0bfdb17 	ldw	r2,-148(fp)
8110b218:	1885883a 	add	r2,r3,r2
8110b21c:	e0bffe15 	stw	r2,-8(fp)

	DDR2_MEMORY_RANDOM_WRITE_TEST(DDR2_M1_ID, DDR2_VERBOSE, DDR2_TIME);
8110b220:	01800044 	movi	r6,1
8110b224:	01400044 	movi	r5,1
8110b228:	01000044 	movi	r4,1
8110b22c:	11074400 	call	81107440 <DDR2_MEMORY_RANDOM_WRITE_TEST>

	int TimeStart, TimeElapsed = 0;
8110b230:	e03fdc15 	stw	zero,-144(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8110b234:	d0a04917 	ldw	r2,-32476(gp)

	TimeStart = alt_nticks();
8110b238:	e0bfdd15 	stw	r2,-140(fp)
	if (DMA_MULTIPLE_TRANSFER(DMADev, read_addr_arr, write_addr_arr, 16, step,
8110b23c:	e0ffde17 	ldw	r3,-136(fp)
8110b240:	e17fef04 	addi	r5,fp,-68
8110b244:	e13fdf04 	addi	r4,fp,-132
8110b248:	d8000315 	stw	zero,12(sp)
8110b24c:	00800044 	movi	r2,1
8110b250:	d8800215 	stw	r2,8(sp)
8110b254:	e0bfda17 	ldw	r2,-152(fp)
8110b258:	d8800115 	stw	r2,4(sp)
8110b25c:	e0bfdb17 	ldw	r2,-148(fp)
8110b260:	d8800015 	stw	r2,0(sp)
8110b264:	01c00404 	movi	r7,16
8110b268:	280d883a 	mov	r6,r5
8110b26c:	200b883a 	mov	r5,r4
8110b270:	1809883a 	mov	r4,r3
8110b274:	1107e200 	call	81107e20 <DMA_MULTIPLE_TRANSFER>
8110b278:	1000051e 	bne	r2,zero,8110b290 <TestDMA_M1_M2+0x2d8>
			control_bits, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
		printf("Error During DMA Transfer");
8110b27c:	012044b4 	movhi	r4,33042
8110b280:	213e8004 	addi	r4,r4,-1536
8110b284:	110cfdc0 	call	8110cfdc <printf>
		return FALSE;
8110b288:	0005883a 	mov	r2,zero
8110b28c:	00002806 	br	8110b330 <TestDMA_M1_M2+0x378>
8110b290:	d0e04917 	ldw	r3,-32476(gp)
	}
	TimeElapsed = alt_nticks() - TimeStart;
8110b294:	e0bfdd17 	ldw	r2,-140(fp)
8110b298:	1885c83a 	sub	r2,r3,r2
8110b29c:	e0bfdc15 	stw	r2,-144(fp)
	printf("%.3f sec\n", (float) TimeElapsed / (float) alt_ticks_per_second());
8110b2a0:	e13fdc17 	ldw	r4,-144(fp)
8110b2a4:	110c1240 	call	8110c124 <__floatsisf>
8110b2a8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8110b2ac:	d0a04817 	ldw	r2,-32480(gp)
8110b2b0:	1009883a 	mov	r4,r2
8110b2b4:	110c2480 	call	8110c248 <__floatunsisf>
8110b2b8:	1007883a 	mov	r3,r2
8110b2bc:	180b883a 	mov	r5,r3
8110b2c0:	8009883a 	mov	r4,r16
8110b2c4:	110b8e80 	call	8110b8e8 <__divsf3>
8110b2c8:	1007883a 	mov	r3,r2
8110b2cc:	1805883a 	mov	r2,r3
8110b2d0:	1009883a 	mov	r4,r2
8110b2d4:	110ca500 	call	8110ca50 <__extendsfdf2>
8110b2d8:	100d883a 	mov	r6,r2
8110b2dc:	180f883a 	mov	r7,r3
8110b2e0:	300b883a 	mov	r5,r6
8110b2e4:	380d883a 	mov	r6,r7
8110b2e8:	012044b4 	movhi	r4,33042
8110b2ec:	213e8704 	addi	r4,r4,-1508
8110b2f0:	110cfdc0 	call	8110cfdc <printf>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M2_ID, DDR2_VERBOSE,
8110b2f4:	01800044 	movi	r6,1
8110b2f8:	01400044 	movi	r5,1
8110b2fc:	01000084 	movi	r4,2
8110b300:	11077200 	call	81107720 <DDR2_MEMORY_RANDOM_READ_TEST>
8110b304:	10800058 	cmpnei	r2,r2,1
8110b308:	1000051e 	bne	r2,zero,8110b320 <TestDMA_M1_M2+0x368>
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
8110b30c:	012044b4 	movhi	r4,33042
8110b310:	213e8a04 	addi	r4,r4,-1496
8110b314:	110d0f80 	call	8110d0f8 <puts>
	} else {
		printf("Transfer failed\n");
		return FALSE;
	}

	return TRUE;
8110b318:	00800044 	movi	r2,1
8110b31c:	00000406 	br	8110b330 <TestDMA_M1_M2+0x378>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M2_ID, DDR2_VERBOSE,
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
	} else {
		printf("Transfer failed\n");
8110b320:	012044b4 	movhi	r4,33042
8110b324:	213e9104 	addi	r4,r4,-1468
8110b328:	110d0f80 	call	8110d0f8 <puts>
		return FALSE;
8110b32c:	0005883a 	mov	r2,zero
	}

	return TRUE;
}
8110b330:	e6ffff04 	addi	sp,fp,-4
8110b334:	dfc00217 	ldw	ra,8(sp)
8110b338:	df000117 	ldw	fp,4(sp)
8110b33c:	dc000017 	ldw	r16,0(sp)
8110b340:	dec00304 	addi	sp,sp,12
8110b344:	f800283a 	ret

8110b348 <TestDMA_M2_M1>:

bool TestDMA_M2_M1(void) {
8110b348:	deffd404 	addi	sp,sp,-176
8110b34c:	dfc02b15 	stw	ra,172(sp)
8110b350:	df002a15 	stw	fp,168(sp)
8110b354:	dc002915 	stw	r16,164(sp)
8110b358:	df002a04 	addi	fp,sp,168

	alt_msgdma_dev *DMADev = NULL;
8110b35c:	e03fde15 	stw	zero,-136(fp)

	if (DMA_OPEN_DEVICE(&DMADev, (char *) DMA_DDR_M1_CSR_NAME) == FALSE) {
8110b360:	e0bfde04 	addi	r2,fp,-136
8110b364:	016044b4 	movhi	r5,33042
8110b368:	297e9504 	addi	r5,r5,-1452
8110b36c:	1009883a 	mov	r4,r2
8110b370:	1107a680 	call	81107a68 <DMA_OPEN_DEVICE>
8110b374:	1000051e 	bne	r2,zero,8110b38c <TestDMA_M2_M1+0x44>
		printf("Error Opening DMA Device");
8110b378:	012044b4 	movhi	r4,33042
8110b37c:	213e7204 	addi	r4,r4,-1592
8110b380:	110cfdc0 	call	8110cfdc <printf>
		return FALSE;
8110b384:	0005883a 	mov	r2,zero
8110b388:	0000cd06 	br	8110b6c0 <TestDMA_M2_M1+0x378>
	}

	if (DMA_DISPATCHER_RESET(DMADev, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
8110b38c:	e0bfde17 	ldw	r2,-136(fp)
8110b390:	000d883a 	mov	r6,zero
8110b394:	01400044 	movi	r5,1
8110b398:	1009883a 	mov	r4,r2
8110b39c:	1107c740 	call	81107c74 <DMA_DISPATCHER_RESET>
8110b3a0:	1000051e 	bne	r2,zero,8110b3b8 <TestDMA_M2_M1+0x70>
		printf("Error Reseting Dispatcher");
8110b3a4:	012044b4 	movhi	r4,33042
8110b3a8:	213e7904 	addi	r4,r4,-1564
8110b3ac:	110cfdc0 	call	8110cfdc <printf>
		return FALSE;
8110b3b0:	0005883a 	mov	r2,zero
8110b3b4:	0000c206 	br	8110b6c0 <TestDMA_M2_M1+0x378>
	}

	alt_u32 control_bits = 0x00000000;
8110b3b8:	e03fda15 	stw	zero,-152(fp)

	const alt_u32 step = DDR2_M2_MEMORY_SIZE / 16;
8110b3bc:	00820034 	movhi	r2,2048
8110b3c0:	e0bfdb15 	stw	r2,-148(fp)
	alt_u32 read_addr_arr[16];
	read_addr_arr[0] = DDR2_M2_MEMORY_BASE;
8110b3c4:	00a00034 	movhi	r2,32768
8110b3c8:	e0bfdf15 	stw	r2,-132(fp)
	read_addr_arr[1] = read_addr_arr[0] + step;
8110b3cc:	e0ffdf17 	ldw	r3,-132(fp)
8110b3d0:	e0bfdb17 	ldw	r2,-148(fp)
8110b3d4:	1885883a 	add	r2,r3,r2
8110b3d8:	e0bfe015 	stw	r2,-128(fp)
	read_addr_arr[2] = read_addr_arr[1] + step;
8110b3dc:	e0ffe017 	ldw	r3,-128(fp)
8110b3e0:	e0bfdb17 	ldw	r2,-148(fp)
8110b3e4:	1885883a 	add	r2,r3,r2
8110b3e8:	e0bfe115 	stw	r2,-124(fp)
	read_addr_arr[3] = read_addr_arr[2] + step;
8110b3ec:	e0ffe117 	ldw	r3,-124(fp)
8110b3f0:	e0bfdb17 	ldw	r2,-148(fp)
8110b3f4:	1885883a 	add	r2,r3,r2
8110b3f8:	e0bfe215 	stw	r2,-120(fp)
	read_addr_arr[4] = read_addr_arr[3] + step;
8110b3fc:	e0ffe217 	ldw	r3,-120(fp)
8110b400:	e0bfdb17 	ldw	r2,-148(fp)
8110b404:	1885883a 	add	r2,r3,r2
8110b408:	e0bfe315 	stw	r2,-116(fp)
	read_addr_arr[5] = read_addr_arr[4] + step;
8110b40c:	e0ffe317 	ldw	r3,-116(fp)
8110b410:	e0bfdb17 	ldw	r2,-148(fp)
8110b414:	1885883a 	add	r2,r3,r2
8110b418:	e0bfe415 	stw	r2,-112(fp)
	read_addr_arr[6] = read_addr_arr[5] + step;
8110b41c:	e0ffe417 	ldw	r3,-112(fp)
8110b420:	e0bfdb17 	ldw	r2,-148(fp)
8110b424:	1885883a 	add	r2,r3,r2
8110b428:	e0bfe515 	stw	r2,-108(fp)
	read_addr_arr[7] = read_addr_arr[6] + step;
8110b42c:	e0ffe517 	ldw	r3,-108(fp)
8110b430:	e0bfdb17 	ldw	r2,-148(fp)
8110b434:	1885883a 	add	r2,r3,r2
8110b438:	e0bfe615 	stw	r2,-104(fp)
	read_addr_arr[8] = read_addr_arr[7] + step;
8110b43c:	e0ffe617 	ldw	r3,-104(fp)
8110b440:	e0bfdb17 	ldw	r2,-148(fp)
8110b444:	1885883a 	add	r2,r3,r2
8110b448:	e0bfe715 	stw	r2,-100(fp)
	read_addr_arr[9] = read_addr_arr[8] + step;
8110b44c:	e0ffe717 	ldw	r3,-100(fp)
8110b450:	e0bfdb17 	ldw	r2,-148(fp)
8110b454:	1885883a 	add	r2,r3,r2
8110b458:	e0bfe815 	stw	r2,-96(fp)
	read_addr_arr[10] = read_addr_arr[9] + step;
8110b45c:	e0ffe817 	ldw	r3,-96(fp)
8110b460:	e0bfdb17 	ldw	r2,-148(fp)
8110b464:	1885883a 	add	r2,r3,r2
8110b468:	e0bfe915 	stw	r2,-92(fp)
	read_addr_arr[11] = read_addr_arr[10] + step;
8110b46c:	e0ffe917 	ldw	r3,-92(fp)
8110b470:	e0bfdb17 	ldw	r2,-148(fp)
8110b474:	1885883a 	add	r2,r3,r2
8110b478:	e0bfea15 	stw	r2,-88(fp)
	read_addr_arr[12] = read_addr_arr[11] + step;
8110b47c:	e0ffea17 	ldw	r3,-88(fp)
8110b480:	e0bfdb17 	ldw	r2,-148(fp)
8110b484:	1885883a 	add	r2,r3,r2
8110b488:	e0bfeb15 	stw	r2,-84(fp)
	read_addr_arr[13] = read_addr_arr[12] + step;
8110b48c:	e0ffeb17 	ldw	r3,-84(fp)
8110b490:	e0bfdb17 	ldw	r2,-148(fp)
8110b494:	1885883a 	add	r2,r3,r2
8110b498:	e0bfec15 	stw	r2,-80(fp)
	read_addr_arr[14] = read_addr_arr[13] + step;
8110b49c:	e0ffec17 	ldw	r3,-80(fp)
8110b4a0:	e0bfdb17 	ldw	r2,-148(fp)
8110b4a4:	1885883a 	add	r2,r3,r2
8110b4a8:	e0bfed15 	stw	r2,-76(fp)
	read_addr_arr[15] = read_addr_arr[14] + step;
8110b4ac:	e0ffed17 	ldw	r3,-76(fp)
8110b4b0:	e0bfdb17 	ldw	r2,-148(fp)
8110b4b4:	1885883a 	add	r2,r3,r2
8110b4b8:	e0bfee15 	stw	r2,-72(fp)

	alt_u32 write_addr_arr[16];
	write_addr_arr[0] = DDR2_M1_MEMORY_BASE;
8110b4bc:	e03fef15 	stw	zero,-68(fp)
	write_addr_arr[1] = write_addr_arr[0] + step;
8110b4c0:	e0ffef17 	ldw	r3,-68(fp)
8110b4c4:	e0bfdb17 	ldw	r2,-148(fp)
8110b4c8:	1885883a 	add	r2,r3,r2
8110b4cc:	e0bff015 	stw	r2,-64(fp)
	write_addr_arr[2] = write_addr_arr[1] + step;
8110b4d0:	e0fff017 	ldw	r3,-64(fp)
8110b4d4:	e0bfdb17 	ldw	r2,-148(fp)
8110b4d8:	1885883a 	add	r2,r3,r2
8110b4dc:	e0bff115 	stw	r2,-60(fp)
	write_addr_arr[3] = write_addr_arr[2] + step;
8110b4e0:	e0fff117 	ldw	r3,-60(fp)
8110b4e4:	e0bfdb17 	ldw	r2,-148(fp)
8110b4e8:	1885883a 	add	r2,r3,r2
8110b4ec:	e0bff215 	stw	r2,-56(fp)
	write_addr_arr[4] = write_addr_arr[3] + step;
8110b4f0:	e0fff217 	ldw	r3,-56(fp)
8110b4f4:	e0bfdb17 	ldw	r2,-148(fp)
8110b4f8:	1885883a 	add	r2,r3,r2
8110b4fc:	e0bff315 	stw	r2,-52(fp)
	write_addr_arr[5] = write_addr_arr[4] + step;
8110b500:	e0fff317 	ldw	r3,-52(fp)
8110b504:	e0bfdb17 	ldw	r2,-148(fp)
8110b508:	1885883a 	add	r2,r3,r2
8110b50c:	e0bff415 	stw	r2,-48(fp)
	write_addr_arr[6] = write_addr_arr[5] + step;
8110b510:	e0fff417 	ldw	r3,-48(fp)
8110b514:	e0bfdb17 	ldw	r2,-148(fp)
8110b518:	1885883a 	add	r2,r3,r2
8110b51c:	e0bff515 	stw	r2,-44(fp)
	write_addr_arr[7] = write_addr_arr[6] + step;
8110b520:	e0fff517 	ldw	r3,-44(fp)
8110b524:	e0bfdb17 	ldw	r2,-148(fp)
8110b528:	1885883a 	add	r2,r3,r2
8110b52c:	e0bff615 	stw	r2,-40(fp)
	write_addr_arr[8] = write_addr_arr[7] + step;
8110b530:	e0fff617 	ldw	r3,-40(fp)
8110b534:	e0bfdb17 	ldw	r2,-148(fp)
8110b538:	1885883a 	add	r2,r3,r2
8110b53c:	e0bff715 	stw	r2,-36(fp)
	write_addr_arr[9] = write_addr_arr[8] + step;
8110b540:	e0fff717 	ldw	r3,-36(fp)
8110b544:	e0bfdb17 	ldw	r2,-148(fp)
8110b548:	1885883a 	add	r2,r3,r2
8110b54c:	e0bff815 	stw	r2,-32(fp)
	write_addr_arr[10] = write_addr_arr[9] + step;
8110b550:	e0fff817 	ldw	r3,-32(fp)
8110b554:	e0bfdb17 	ldw	r2,-148(fp)
8110b558:	1885883a 	add	r2,r3,r2
8110b55c:	e0bff915 	stw	r2,-28(fp)
	write_addr_arr[11] = write_addr_arr[10] + step;
8110b560:	e0fff917 	ldw	r3,-28(fp)
8110b564:	e0bfdb17 	ldw	r2,-148(fp)
8110b568:	1885883a 	add	r2,r3,r2
8110b56c:	e0bffa15 	stw	r2,-24(fp)
	write_addr_arr[12] = write_addr_arr[11] + step;
8110b570:	e0fffa17 	ldw	r3,-24(fp)
8110b574:	e0bfdb17 	ldw	r2,-148(fp)
8110b578:	1885883a 	add	r2,r3,r2
8110b57c:	e0bffb15 	stw	r2,-20(fp)
	write_addr_arr[13] = write_addr_arr[12] + step;
8110b580:	e0fffb17 	ldw	r3,-20(fp)
8110b584:	e0bfdb17 	ldw	r2,-148(fp)
8110b588:	1885883a 	add	r2,r3,r2
8110b58c:	e0bffc15 	stw	r2,-16(fp)
	write_addr_arr[14] = write_addr_arr[13] + step;
8110b590:	e0fffc17 	ldw	r3,-16(fp)
8110b594:	e0bfdb17 	ldw	r2,-148(fp)
8110b598:	1885883a 	add	r2,r3,r2
8110b59c:	e0bffd15 	stw	r2,-12(fp)
	write_addr_arr[15] = write_addr_arr[14] + step;
8110b5a0:	e0fffd17 	ldw	r3,-12(fp)
8110b5a4:	e0bfdb17 	ldw	r2,-148(fp)
8110b5a8:	1885883a 	add	r2,r3,r2
8110b5ac:	e0bffe15 	stw	r2,-8(fp)

	DDR2_MEMORY_RANDOM_WRITE_TEST(DDR2_M2_ID, DDR2_VERBOSE, DDR2_TIME);
8110b5b0:	01800044 	movi	r6,1
8110b5b4:	01400044 	movi	r5,1
8110b5b8:	01000084 	movi	r4,2
8110b5bc:	11074400 	call	81107440 <DDR2_MEMORY_RANDOM_WRITE_TEST>

	int TimeStart, TimeElapsed = 0;
8110b5c0:	e03fdc15 	stw	zero,-144(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8110b5c4:	d0a04917 	ldw	r2,-32476(gp)

	TimeStart = alt_nticks();
8110b5c8:	e0bfdd15 	stw	r2,-140(fp)
	if (DMA_MULTIPLE_TRANSFER(DMADev, read_addr_arr, write_addr_arr, 16, step,
8110b5cc:	e0ffde17 	ldw	r3,-136(fp)
8110b5d0:	e17fef04 	addi	r5,fp,-68
8110b5d4:	e13fdf04 	addi	r4,fp,-132
8110b5d8:	d8000315 	stw	zero,12(sp)
8110b5dc:	00800044 	movi	r2,1
8110b5e0:	d8800215 	stw	r2,8(sp)
8110b5e4:	e0bfda17 	ldw	r2,-152(fp)
8110b5e8:	d8800115 	stw	r2,4(sp)
8110b5ec:	e0bfdb17 	ldw	r2,-148(fp)
8110b5f0:	d8800015 	stw	r2,0(sp)
8110b5f4:	01c00404 	movi	r7,16
8110b5f8:	280d883a 	mov	r6,r5
8110b5fc:	200b883a 	mov	r5,r4
8110b600:	1809883a 	mov	r4,r3
8110b604:	1107e200 	call	81107e20 <DMA_MULTIPLE_TRANSFER>
8110b608:	1000051e 	bne	r2,zero,8110b620 <TestDMA_M2_M1+0x2d8>
			control_bits, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
		printf("Error During DMA Transfer");
8110b60c:	012044b4 	movhi	r4,33042
8110b610:	213e8004 	addi	r4,r4,-1536
8110b614:	110cfdc0 	call	8110cfdc <printf>
		return FALSE;
8110b618:	0005883a 	mov	r2,zero
8110b61c:	00002806 	br	8110b6c0 <TestDMA_M2_M1+0x378>
8110b620:	d0e04917 	ldw	r3,-32476(gp)
	}
	TimeElapsed = alt_nticks() - TimeStart;
8110b624:	e0bfdd17 	ldw	r2,-140(fp)
8110b628:	1885c83a 	sub	r2,r3,r2
8110b62c:	e0bfdc15 	stw	r2,-144(fp)
	printf("%.3f sec\n", (float) TimeElapsed / (float) alt_ticks_per_second());
8110b630:	e13fdc17 	ldw	r4,-144(fp)
8110b634:	110c1240 	call	8110c124 <__floatsisf>
8110b638:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8110b63c:	d0a04817 	ldw	r2,-32480(gp)
8110b640:	1009883a 	mov	r4,r2
8110b644:	110c2480 	call	8110c248 <__floatunsisf>
8110b648:	1007883a 	mov	r3,r2
8110b64c:	180b883a 	mov	r5,r3
8110b650:	8009883a 	mov	r4,r16
8110b654:	110b8e80 	call	8110b8e8 <__divsf3>
8110b658:	1007883a 	mov	r3,r2
8110b65c:	1805883a 	mov	r2,r3
8110b660:	1009883a 	mov	r4,r2
8110b664:	110ca500 	call	8110ca50 <__extendsfdf2>
8110b668:	100d883a 	mov	r6,r2
8110b66c:	180f883a 	mov	r7,r3
8110b670:	300b883a 	mov	r5,r6
8110b674:	380d883a 	mov	r6,r7
8110b678:	012044b4 	movhi	r4,33042
8110b67c:	213e8704 	addi	r4,r4,-1508
8110b680:	110cfdc0 	call	8110cfdc <printf>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M1_ID, DDR2_VERBOSE,
8110b684:	01800044 	movi	r6,1
8110b688:	01400044 	movi	r5,1
8110b68c:	01000044 	movi	r4,1
8110b690:	11077200 	call	81107720 <DDR2_MEMORY_RANDOM_READ_TEST>
8110b694:	10800058 	cmpnei	r2,r2,1
8110b698:	1000051e 	bne	r2,zero,8110b6b0 <TestDMA_M2_M1+0x368>
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
8110b69c:	012044b4 	movhi	r4,33042
8110b6a0:	213e8a04 	addi	r4,r4,-1496
8110b6a4:	110d0f80 	call	8110d0f8 <puts>
	} else {
		printf("Transfer failed\n");
		return FALSE;
	}

	return TRUE;
8110b6a8:	00800044 	movi	r2,1
8110b6ac:	00000406 	br	8110b6c0 <TestDMA_M2_M1+0x378>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M1_ID, DDR2_VERBOSE,
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
	} else {
		printf("Transfer failed\n");
8110b6b0:	012044b4 	movhi	r4,33042
8110b6b4:	213e9104 	addi	r4,r4,-1468
8110b6b8:	110d0f80 	call	8110d0f8 <puts>
		return FALSE;
8110b6bc:	0005883a 	mov	r2,zero
	}

	return TRUE;
}
8110b6c0:	e6ffff04 	addi	sp,fp,-4
8110b6c4:	dfc00217 	ldw	ra,8(sp)
8110b6c8:	df000117 	ldw	fp,4(sp)
8110b6cc:	dc000017 	ldw	r16,0(sp)
8110b6d0:	dec00304 	addi	sp,sp,12
8110b6d4:	f800283a 	ret

8110b6d8 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
8110b6d8:	defffc04 	addi	sp,sp,-16
8110b6dc:	df000315 	stw	fp,12(sp)
8110b6e0:	df000304 	addi	fp,sp,12
8110b6e4:	e13ffd15 	stw	r4,-12(fp)
8110b6e8:	e17ffe15 	stw	r5,-8(fp)
8110b6ec:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
8110b6f0:	e0bffe17 	ldw	r2,-8(fp)
8110b6f4:	1085883a 	add	r2,r2,r2
8110b6f8:	1085883a 	add	r2,r2,r2
8110b6fc:	1007883a 	mov	r3,r2
8110b700:	e0bffd17 	ldw	r2,-12(fp)
8110b704:	1885883a 	add	r2,r3,r2
8110b708:	1007883a 	mov	r3,r2
8110b70c:	e0bfff17 	ldw	r2,-4(fp)
8110b710:	18800035 	stwio	r2,0(r3)
	return 1;
8110b714:	00800044 	movi	r2,1

}
8110b718:	e037883a 	mov	sp,fp
8110b71c:	df000017 	ldw	fp,0(sp)
8110b720:	dec00104 	addi	sp,sp,4
8110b724:	f800283a 	ret

8110b728 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
8110b728:	defffc04 	addi	sp,sp,-16
8110b72c:	df000315 	stw	fp,12(sp)
8110b730:	df000304 	addi	fp,sp,12
8110b734:	e13ffd15 	stw	r4,-12(fp)
8110b738:	e17ffe15 	stw	r5,-8(fp)
8110b73c:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
8110b740:	e0bffe17 	ldw	r2,-8(fp)
8110b744:	1085883a 	add	r2,r2,r2
8110b748:	1085883a 	add	r2,r2,r2
8110b74c:	1007883a 	mov	r3,r2
8110b750:	e0bffd17 	ldw	r2,-12(fp)
8110b754:	1885883a 	add	r2,r3,r2
8110b758:	10c00037 	ldwio	r3,0(r2)
8110b75c:	e0bfff17 	ldw	r2,-4(fp)
8110b760:	10c00015 	stw	r3,0(r2)
	return 1;
8110b764:	00800044 	movi	r2,1

}
8110b768:	e037883a 	mov	sp,fp
8110b76c:	df000017 	ldw	fp,0(sp)
8110b770:	dec00104 	addi	sp,sp,4
8110b774:	f800283a 	ret

8110b778 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
8110b778:	defffa04 	addi	sp,sp,-24
8110b77c:	dfc00515 	stw	ra,20(sp)
8110b780:	df000415 	stw	fp,16(sp)
8110b784:	df000404 	addi	fp,sp,16
8110b788:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
8110b78c:	e0bfff17 	ldw	r2,-4(fp)
8110b790:	1005d1ba 	srai	r2,r2,6
8110b794:	1080004c 	andi	r2,r2,1
8110b798:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
8110b79c:	e0bfff17 	ldw	r2,-4(fp)
8110b7a0:	1005d17a 	srai	r2,r2,5
8110b7a4:	1080004c 	andi	r2,r2,1
8110b7a8:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110b7ac:	e0bfff17 	ldw	r2,-4(fp)
8110b7b0:	1005d13a 	srai	r2,r2,4
8110b7b4:	1080004c 	andi	r2,r2,1
8110b7b8:	e0bffe15 	stw	r2,-8(fp)

	printf("-------- link status \n");
8110b7bc:	012044b4 	movhi	r4,33042
8110b7c0:	213e9a04 	addi	r4,r4,-1432
8110b7c4:	110d0f80 	call	8110d0f8 <puts>
	printf("Link started    : %s \n", (started == 1) ? "S" : "N");
8110b7c8:	e0bffc17 	ldw	r2,-16(fp)
8110b7cc:	10800058 	cmpnei	r2,r2,1
8110b7d0:	1000031e 	bne	r2,zero,8110b7e0 <_print_codec_status+0x68>
8110b7d4:	00a044b4 	movhi	r2,33042
8110b7d8:	10bea004 	addi	r2,r2,-1408
8110b7dc:	00000206 	br	8110b7e8 <_print_codec_status+0x70>
8110b7e0:	00a044b4 	movhi	r2,33042
8110b7e4:	10bea104 	addi	r2,r2,-1404
8110b7e8:	100b883a 	mov	r5,r2
8110b7ec:	012044b4 	movhi	r4,33042
8110b7f0:	213ea204 	addi	r4,r4,-1400
8110b7f4:	110cfdc0 	call	8110cfdc <printf>
	printf("Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8110b7f8:	e0bffd17 	ldw	r2,-12(fp)
8110b7fc:	10800058 	cmpnei	r2,r2,1
8110b800:	1000031e 	bne	r2,zero,8110b810 <_print_codec_status+0x98>
8110b804:	00a044b4 	movhi	r2,33042
8110b808:	10bea004 	addi	r2,r2,-1408
8110b80c:	00000206 	br	8110b818 <_print_codec_status+0xa0>
8110b810:	00a044b4 	movhi	r2,33042
8110b814:	10bea104 	addi	r2,r2,-1404
8110b818:	100b883a 	mov	r5,r2
8110b81c:	012044b4 	movhi	r4,33042
8110b820:	213ea804 	addi	r4,r4,-1376
8110b824:	110cfdc0 	call	8110cfdc <printf>
	printf("Link running    : %s \n", (running == 1) ? "S" : "N");
8110b828:	e0bffe17 	ldw	r2,-8(fp)
8110b82c:	10800058 	cmpnei	r2,r2,1
8110b830:	1000031e 	bne	r2,zero,8110b840 <_print_codec_status+0xc8>
8110b834:	00a044b4 	movhi	r2,33042
8110b838:	10bea004 	addi	r2,r2,-1408
8110b83c:	00000206 	br	8110b848 <_print_codec_status+0xd0>
8110b840:	00a044b4 	movhi	r2,33042
8110b844:	10bea104 	addi	r2,r2,-1404
8110b848:	100b883a 	mov	r5,r2
8110b84c:	012044b4 	movhi	r4,33042
8110b850:	213eae04 	addi	r4,r4,-1352
8110b854:	110cfdc0 	call	8110cfdc <printf>
	printf("--------  \n");
8110b858:	012044b4 	movhi	r4,33042
8110b85c:	213eb404 	addi	r4,r4,-1328
8110b860:	110d0f80 	call	8110d0f8 <puts>
}
8110b864:	0001883a 	nop
8110b868:	e037883a 	mov	sp,fp
8110b86c:	dfc00117 	ldw	ra,4(sp)
8110b870:	df000017 	ldw	fp,0(sp)
8110b874:	dec00204 	addi	sp,sp,8
8110b878:	f800283a 	ret

8110b87c <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
8110b87c:	defffb04 	addi	sp,sp,-20
8110b880:	df000415 	stw	fp,16(sp)
8110b884:	df000404 	addi	fp,sp,16
8110b888:	e13ffc15 	stw	r4,-16(fp)
8110b88c:	e17ffd15 	stw	r5,-12(fp)
8110b890:	e1bffe15 	stw	r6,-8(fp)
8110b894:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
8110b898:	e0bffc17 	ldw	r2,-16(fp)
8110b89c:	1005d1ba 	srai	r2,r2,6
8110b8a0:	10c0004c 	andi	r3,r2,1
8110b8a4:	e0bffd17 	ldw	r2,-12(fp)
8110b8a8:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8110b8ac:	e0bffc17 	ldw	r2,-16(fp)
8110b8b0:	1005d17a 	srai	r2,r2,5
8110b8b4:	10c0004c 	andi	r3,r2,1
8110b8b8:	e0bffe17 	ldw	r2,-8(fp)
8110b8bc:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8110b8c0:	e0bffc17 	ldw	r2,-16(fp)
8110b8c4:	1005d13a 	srai	r2,r2,4
8110b8c8:	10c0004c 	andi	r3,r2,1
8110b8cc:	e0bfff17 	ldw	r2,-4(fp)
8110b8d0:	10c00015 	stw	r3,0(r2)
}
8110b8d4:	0001883a 	nop
8110b8d8:	e037883a 	mov	sp,fp
8110b8dc:	df000017 	ldw	fp,0(sp)
8110b8e0:	dec00104 	addi	sp,sp,4
8110b8e4:	f800283a 	ret

8110b8e8 <__divsf3>:
8110b8e8:	defff504 	addi	sp,sp,-44
8110b8ec:	200cd5fa 	srli	r6,r4,23
8110b8f0:	dcc00415 	stw	r19,16(sp)
8110b8f4:	2026d7fa 	srli	r19,r4,31
8110b8f8:	00c02034 	movhi	r3,128
8110b8fc:	dd800715 	stw	r22,28(sp)
8110b900:	dd000515 	stw	r20,20(sp)
8110b904:	dc800315 	stw	r18,12(sp)
8110b908:	18ffffc4 	addi	r3,r3,-1
8110b90c:	dfc00a15 	stw	ra,40(sp)
8110b910:	df000915 	stw	fp,36(sp)
8110b914:	ddc00815 	stw	r23,32(sp)
8110b918:	dd400615 	stw	r21,24(sp)
8110b91c:	dc400215 	stw	r17,8(sp)
8110b920:	dc000115 	stw	r16,4(sp)
8110b924:	35003fcc 	andi	r20,r6,255
8110b928:	1924703a 	and	r18,r3,r4
8110b92c:	9d803fcc 	andi	r22,r19,255
8110b930:	a0005226 	beq	r20,zero,8110ba7c <__divsf3+0x194>
8110b934:	00803fc4 	movi	r2,255
8110b938:	a0802e26 	beq	r20,r2,8110b9f4 <__divsf3+0x10c>
8110b93c:	91002034 	orhi	r4,r18,128
8110b940:	202490fa 	slli	r18,r4,3
8110b944:	a53fe044 	addi	r20,r20,-127
8110b948:	0021883a 	mov	r16,zero
8110b94c:	002f883a 	mov	r23,zero
8110b950:	280cd5fa 	srli	r6,r5,23
8110b954:	282ad7fa 	srli	r21,r5,31
8110b958:	00c02034 	movhi	r3,128
8110b95c:	18ffffc4 	addi	r3,r3,-1
8110b960:	31803fcc 	andi	r6,r6,255
8110b964:	1962703a 	and	r17,r3,r5
8110b968:	af003fcc 	andi	fp,r21,255
8110b96c:	30004a26 	beq	r6,zero,8110ba98 <__divsf3+0x1b0>
8110b970:	00803fc4 	movi	r2,255
8110b974:	30804526 	beq	r6,r2,8110ba8c <__divsf3+0x1a4>
8110b978:	89402034 	orhi	r5,r17,128
8110b97c:	282290fa 	slli	r17,r5,3
8110b980:	31bfe044 	addi	r6,r6,-127
8110b984:	000b883a 	mov	r5,zero
8110b988:	2c20b03a 	or	r16,r5,r16
8110b98c:	802090ba 	slli	r16,r16,2
8110b990:	00a04474 	movhi	r2,33041
8110b994:	10ae6d04 	addi	r2,r2,-17996
8110b998:	80a1883a 	add	r16,r16,r2
8110b99c:	81000017 	ldw	r4,0(r16)
8110b9a0:	9d46f03a 	xor	r3,r19,r21
8110b9a4:	180f883a 	mov	r7,r3
8110b9a8:	18803fcc 	andi	r2,r3,255
8110b9ac:	a18dc83a 	sub	r6,r20,r6
8110b9b0:	2000683a 	jmp	r4
8110b9b4:	8110bb98 	cmpnei	r4,r16,17134
8110b9b8:	8110ba1c 	xori	r4,r16,17128
8110b9bc:	8110bb8c 	andi	r4,r16,17134
8110b9c0:	8110ba08 	cmpgei	r4,r16,17128
8110b9c4:	8110bb8c 	andi	r4,r16,17134
8110b9c8:	8110bb64 	muli	r4,r16,17133
8110b9cc:	8110bb8c 	andi	r4,r16,17134
8110b9d0:	8110ba08 	cmpgei	r4,r16,17128
8110b9d4:	8110ba1c 	xori	r4,r16,17128
8110b9d8:	8110ba1c 	xori	r4,r16,17128
8110b9dc:	8110bb64 	muli	r4,r16,17133
8110b9e0:	8110ba08 	cmpgei	r4,r16,17128
8110b9e4:	8110bc78 	rdprs	r4,r16,17137
8110b9e8:	8110bc78 	rdprs	r4,r16,17137
8110b9ec:	8110bc78 	rdprs	r4,r16,17137
8110b9f0:	8110bc2c 	andhi	r4,r16,17136
8110b9f4:	9000581e 	bne	r18,zero,8110bb58 <__divsf3+0x270>
8110b9f8:	04000204 	movi	r16,8
8110b9fc:	05c00084 	movi	r23,2
8110ba00:	003fd306 	br	8110b950 <__reset+0xfb0eb950>
8110ba04:	0023883a 	mov	r17,zero
8110ba08:	e02d883a 	mov	r22,fp
8110ba0c:	282f883a 	mov	r23,r5
8110ba10:	00800084 	movi	r2,2
8110ba14:	b8808f1e 	bne	r23,r2,8110bc54 <__divsf3+0x36c>
8110ba18:	b005883a 	mov	r2,r22
8110ba1c:	11c0004c 	andi	r7,r2,1
8110ba20:	013fffc4 	movi	r4,-1
8110ba24:	000d883a 	mov	r6,zero
8110ba28:	21003fcc 	andi	r4,r4,255
8110ba2c:	200895fa 	slli	r4,r4,23
8110ba30:	38803fcc 	andi	r2,r7,255
8110ba34:	00c02034 	movhi	r3,128
8110ba38:	100497fa 	slli	r2,r2,31
8110ba3c:	18ffffc4 	addi	r3,r3,-1
8110ba40:	30c6703a 	and	r3,r6,r3
8110ba44:	1906b03a 	or	r3,r3,r4
8110ba48:	1884b03a 	or	r2,r3,r2
8110ba4c:	dfc00a17 	ldw	ra,40(sp)
8110ba50:	df000917 	ldw	fp,36(sp)
8110ba54:	ddc00817 	ldw	r23,32(sp)
8110ba58:	dd800717 	ldw	r22,28(sp)
8110ba5c:	dd400617 	ldw	r21,24(sp)
8110ba60:	dd000517 	ldw	r20,20(sp)
8110ba64:	dcc00417 	ldw	r19,16(sp)
8110ba68:	dc800317 	ldw	r18,12(sp)
8110ba6c:	dc400217 	ldw	r17,8(sp)
8110ba70:	dc000117 	ldw	r16,4(sp)
8110ba74:	dec00b04 	addi	sp,sp,44
8110ba78:	f800283a 	ret
8110ba7c:	90002b1e 	bne	r18,zero,8110bb2c <__divsf3+0x244>
8110ba80:	04000104 	movi	r16,4
8110ba84:	05c00044 	movi	r23,1
8110ba88:	003fb106 	br	8110b950 <__reset+0xfb0eb950>
8110ba8c:	8800251e 	bne	r17,zero,8110bb24 <__divsf3+0x23c>
8110ba90:	01400084 	movi	r5,2
8110ba94:	00000206 	br	8110baa0 <__divsf3+0x1b8>
8110ba98:	88001a1e 	bne	r17,zero,8110bb04 <__divsf3+0x21c>
8110ba9c:	01400044 	movi	r5,1
8110baa0:	8160b03a 	or	r16,r16,r5
8110baa4:	802090ba 	slli	r16,r16,2
8110baa8:	00e04474 	movhi	r3,33041
8110baac:	18eeb104 	addi	r3,r3,-17724
8110bab0:	80e1883a 	add	r16,r16,r3
8110bab4:	80c00017 	ldw	r3,0(r16)
8110bab8:	9d44f03a 	xor	r2,r19,r21
8110babc:	a18dc83a 	sub	r6,r20,r6
8110bac0:	1800683a 	jmp	r3
8110bac4:	8110ba1c 	xori	r4,r16,17128
8110bac8:	8110ba1c 	xori	r4,r16,17128
8110bacc:	8110bc68 	cmpgeui	r4,r16,17137
8110bad0:	8110ba04 	addi	r4,r16,17128
8110bad4:	8110bc68 	cmpgeui	r4,r16,17137
8110bad8:	8110bb64 	muli	r4,r16,17133
8110badc:	8110bc68 	cmpgeui	r4,r16,17137
8110bae0:	8110ba04 	addi	r4,r16,17128
8110bae4:	8110ba1c 	xori	r4,r16,17128
8110bae8:	8110ba1c 	xori	r4,r16,17128
8110baec:	8110bb64 	muli	r4,r16,17133
8110baf0:	8110ba04 	addi	r4,r16,17128
8110baf4:	8110bc78 	rdprs	r4,r16,17137
8110baf8:	8110bc78 	rdprs	r4,r16,17137
8110bafc:	8110bc78 	rdprs	r4,r16,17137
8110bb00:	8110bc90 	cmplti	r4,r16,17138
8110bb04:	8809883a 	mov	r4,r17
8110bb08:	110cd080 	call	8110cd08 <__clzsi2>
8110bb0c:	10fffec4 	addi	r3,r2,-5
8110bb10:	10801d84 	addi	r2,r2,118
8110bb14:	88e2983a 	sll	r17,r17,r3
8110bb18:	008dc83a 	sub	r6,zero,r2
8110bb1c:	000b883a 	mov	r5,zero
8110bb20:	003f9906 	br	8110b988 <__reset+0xfb0eb988>
8110bb24:	014000c4 	movi	r5,3
8110bb28:	003f9706 	br	8110b988 <__reset+0xfb0eb988>
8110bb2c:	9009883a 	mov	r4,r18
8110bb30:	d9400015 	stw	r5,0(sp)
8110bb34:	110cd080 	call	8110cd08 <__clzsi2>
8110bb38:	10fffec4 	addi	r3,r2,-5
8110bb3c:	11801d84 	addi	r6,r2,118
8110bb40:	90e4983a 	sll	r18,r18,r3
8110bb44:	01a9c83a 	sub	r20,zero,r6
8110bb48:	0021883a 	mov	r16,zero
8110bb4c:	002f883a 	mov	r23,zero
8110bb50:	d9400017 	ldw	r5,0(sp)
8110bb54:	003f7e06 	br	8110b950 <__reset+0xfb0eb950>
8110bb58:	04000304 	movi	r16,12
8110bb5c:	05c000c4 	movi	r23,3
8110bb60:	003f7b06 	br	8110b950 <__reset+0xfb0eb950>
8110bb64:	01802034 	movhi	r6,128
8110bb68:	000f883a 	mov	r7,zero
8110bb6c:	31bfffc4 	addi	r6,r6,-1
8110bb70:	013fffc4 	movi	r4,-1
8110bb74:	003fac06 	br	8110ba28 <__reset+0xfb0eba28>
8110bb78:	01400044 	movi	r5,1
8110bb7c:	2909c83a 	sub	r4,r5,r4
8110bb80:	00c006c4 	movi	r3,27
8110bb84:	19004b0e 	bge	r3,r4,8110bcb4 <__divsf3+0x3cc>
8110bb88:	114e703a 	and	r7,r2,r5
8110bb8c:	0009883a 	mov	r4,zero
8110bb90:	000d883a 	mov	r6,zero
8110bb94:	003fa406 	br	8110ba28 <__reset+0xfb0eba28>
8110bb98:	9006917a 	slli	r3,r18,5
8110bb9c:	8822917a 	slli	r17,r17,5
8110bba0:	1c40372e 	bgeu	r3,r17,8110bc80 <__divsf3+0x398>
8110bba4:	31bfffc4 	addi	r6,r6,-1
8110bba8:	010006c4 	movi	r4,27
8110bbac:	000b883a 	mov	r5,zero
8110bbb0:	180f883a 	mov	r7,r3
8110bbb4:	294b883a 	add	r5,r5,r5
8110bbb8:	18c7883a 	add	r3,r3,r3
8110bbbc:	38000116 	blt	r7,zero,8110bbc4 <__divsf3+0x2dc>
8110bbc0:	1c400236 	bltu	r3,r17,8110bbcc <__divsf3+0x2e4>
8110bbc4:	1c47c83a 	sub	r3,r3,r17
8110bbc8:	29400054 	ori	r5,r5,1
8110bbcc:	213fffc4 	addi	r4,r4,-1
8110bbd0:	203ff71e 	bne	r4,zero,8110bbb0 <__reset+0xfb0ebbb0>
8110bbd4:	1806c03a 	cmpne	r3,r3,zero
8110bbd8:	1962b03a 	or	r17,r3,r5
8110bbdc:	31001fc4 	addi	r4,r6,127
8110bbe0:	013fe50e 	bge	zero,r4,8110bb78 <__reset+0xfb0ebb78>
8110bbe4:	88c001cc 	andi	r3,r17,7
8110bbe8:	18000426 	beq	r3,zero,8110bbfc <__divsf3+0x314>
8110bbec:	88c003cc 	andi	r3,r17,15
8110bbf0:	01400104 	movi	r5,4
8110bbf4:	19400126 	beq	r3,r5,8110bbfc <__divsf3+0x314>
8110bbf8:	8963883a 	add	r17,r17,r5
8110bbfc:	88c2002c 	andhi	r3,r17,2048
8110bc00:	18000426 	beq	r3,zero,8110bc14 <__divsf3+0x32c>
8110bc04:	00fe0034 	movhi	r3,63488
8110bc08:	18ffffc4 	addi	r3,r3,-1
8110bc0c:	31002004 	addi	r4,r6,128
8110bc10:	88e2703a 	and	r17,r17,r3
8110bc14:	00c03f84 	movi	r3,254
8110bc18:	193f8016 	blt	r3,r4,8110ba1c <__reset+0xfb0eba1c>
8110bc1c:	880c91ba 	slli	r6,r17,6
8110bc20:	11c0004c 	andi	r7,r2,1
8110bc24:	300cd27a 	srli	r6,r6,9
8110bc28:	003f7f06 	br	8110ba28 <__reset+0xfb0eba28>
8110bc2c:	9080102c 	andhi	r2,r18,64
8110bc30:	10000226 	beq	r2,zero,8110bc3c <__divsf3+0x354>
8110bc34:	8880102c 	andhi	r2,r17,64
8110bc38:	10001826 	beq	r2,zero,8110bc9c <__divsf3+0x3b4>
8110bc3c:	00802034 	movhi	r2,128
8110bc40:	91801034 	orhi	r6,r18,64
8110bc44:	10bfffc4 	addi	r2,r2,-1
8110bc48:	980f883a 	mov	r7,r19
8110bc4c:	308c703a 	and	r6,r6,r2
8110bc50:	003fc706 	br	8110bb70 <__reset+0xfb0ebb70>
8110bc54:	008000c4 	movi	r2,3
8110bc58:	b8802d26 	beq	r23,r2,8110bd10 <__divsf3+0x428>
8110bc5c:	00c00044 	movi	r3,1
8110bc60:	b005883a 	mov	r2,r22
8110bc64:	b8ffdd1e 	bne	r23,r3,8110bbdc <__reset+0xfb0ebbdc>
8110bc68:	11c0004c 	andi	r7,r2,1
8110bc6c:	0009883a 	mov	r4,zero
8110bc70:	000d883a 	mov	r6,zero
8110bc74:	003f6c06 	br	8110ba28 <__reset+0xfb0eba28>
8110bc78:	9023883a 	mov	r17,r18
8110bc7c:	003f6406 	br	8110ba10 <__reset+0xfb0eba10>
8110bc80:	1c47c83a 	sub	r3,r3,r17
8110bc84:	01000684 	movi	r4,26
8110bc88:	01400044 	movi	r5,1
8110bc8c:	003fc806 	br	8110bbb0 <__reset+0xfb0ebbb0>
8110bc90:	9080102c 	andhi	r2,r18,64
8110bc94:	103fe926 	beq	r2,zero,8110bc3c <__reset+0xfb0ebc3c>
8110bc98:	0023883a 	mov	r17,zero
8110bc9c:	00802034 	movhi	r2,128
8110bca0:	89801034 	orhi	r6,r17,64
8110bca4:	10bfffc4 	addi	r2,r2,-1
8110bca8:	a80f883a 	mov	r7,r21
8110bcac:	308c703a 	and	r6,r6,r2
8110bcb0:	003faf06 	br	8110bb70 <__reset+0xfb0ebb70>
8110bcb4:	01c00804 	movi	r7,32
8110bcb8:	390fc83a 	sub	r7,r7,r4
8110bcbc:	89ce983a 	sll	r7,r17,r7
8110bcc0:	890ad83a 	srl	r5,r17,r4
8110bcc4:	380ec03a 	cmpne	r7,r7,zero
8110bcc8:	29cab03a 	or	r5,r5,r7
8110bccc:	28c001cc 	andi	r3,r5,7
8110bcd0:	18000426 	beq	r3,zero,8110bce4 <__divsf3+0x3fc>
8110bcd4:	28c003cc 	andi	r3,r5,15
8110bcd8:	01000104 	movi	r4,4
8110bcdc:	19000126 	beq	r3,r4,8110bce4 <__divsf3+0x3fc>
8110bce0:	290b883a 	add	r5,r5,r4
8110bce4:	28c1002c 	andhi	r3,r5,1024
8110bce8:	18000426 	beq	r3,zero,8110bcfc <__divsf3+0x414>
8110bcec:	11c0004c 	andi	r7,r2,1
8110bcf0:	01000044 	movi	r4,1
8110bcf4:	000d883a 	mov	r6,zero
8110bcf8:	003f4b06 	br	8110ba28 <__reset+0xfb0eba28>
8110bcfc:	280a91ba 	slli	r5,r5,6
8110bd00:	11c0004c 	andi	r7,r2,1
8110bd04:	0009883a 	mov	r4,zero
8110bd08:	280cd27a 	srli	r6,r5,9
8110bd0c:	003f4606 	br	8110ba28 <__reset+0xfb0eba28>
8110bd10:	00802034 	movhi	r2,128
8110bd14:	89801034 	orhi	r6,r17,64
8110bd18:	10bfffc4 	addi	r2,r2,-1
8110bd1c:	b00f883a 	mov	r7,r22
8110bd20:	308c703a 	and	r6,r6,r2
8110bd24:	003f9206 	br	8110bb70 <__reset+0xfb0ebb70>

8110bd28 <__mulsf3>:
8110bd28:	defff504 	addi	sp,sp,-44
8110bd2c:	dc000115 	stw	r16,4(sp)
8110bd30:	2020d5fa 	srli	r16,r4,23
8110bd34:	dd400615 	stw	r21,24(sp)
8110bd38:	202ad7fa 	srli	r21,r4,31
8110bd3c:	dc800315 	stw	r18,12(sp)
8110bd40:	04802034 	movhi	r18,128
8110bd44:	df000915 	stw	fp,36(sp)
8110bd48:	dd000515 	stw	r20,20(sp)
8110bd4c:	94bfffc4 	addi	r18,r18,-1
8110bd50:	dfc00a15 	stw	ra,40(sp)
8110bd54:	ddc00815 	stw	r23,32(sp)
8110bd58:	dd800715 	stw	r22,28(sp)
8110bd5c:	dcc00415 	stw	r19,16(sp)
8110bd60:	dc400215 	stw	r17,8(sp)
8110bd64:	84003fcc 	andi	r16,r16,255
8110bd68:	9124703a 	and	r18,r18,r4
8110bd6c:	a829883a 	mov	r20,r21
8110bd70:	af003fcc 	andi	fp,r21,255
8110bd74:	80005426 	beq	r16,zero,8110bec8 <__mulsf3+0x1a0>
8110bd78:	00803fc4 	movi	r2,255
8110bd7c:	80802f26 	beq	r16,r2,8110be3c <__mulsf3+0x114>
8110bd80:	91002034 	orhi	r4,r18,128
8110bd84:	202490fa 	slli	r18,r4,3
8110bd88:	843fe044 	addi	r16,r16,-127
8110bd8c:	0023883a 	mov	r17,zero
8110bd90:	002f883a 	mov	r23,zero
8110bd94:	2804d5fa 	srli	r2,r5,23
8110bd98:	282cd7fa 	srli	r22,r5,31
8110bd9c:	01002034 	movhi	r4,128
8110bda0:	213fffc4 	addi	r4,r4,-1
8110bda4:	10803fcc 	andi	r2,r2,255
8110bda8:	2166703a 	and	r19,r4,r5
8110bdac:	b1803fcc 	andi	r6,r22,255
8110bdb0:	10004c26 	beq	r2,zero,8110bee4 <__mulsf3+0x1bc>
8110bdb4:	00c03fc4 	movi	r3,255
8110bdb8:	10c04726 	beq	r2,r3,8110bed8 <__mulsf3+0x1b0>
8110bdbc:	99002034 	orhi	r4,r19,128
8110bdc0:	202690fa 	slli	r19,r4,3
8110bdc4:	10bfe044 	addi	r2,r2,-127
8110bdc8:	0007883a 	mov	r3,zero
8110bdcc:	80a1883a 	add	r16,r16,r2
8110bdd0:	010003c4 	movi	r4,15
8110bdd4:	1c44b03a 	or	r2,r3,r17
8110bdd8:	b56af03a 	xor	r21,r22,r21
8110bddc:	81c00044 	addi	r7,r16,1
8110bde0:	20806b36 	bltu	r4,r2,8110bf90 <__mulsf3+0x268>
8110bde4:	100490ba 	slli	r2,r2,2
8110bde8:	01204474 	movhi	r4,33041
8110bdec:	212f7f04 	addi	r4,r4,-16900
8110bdf0:	1105883a 	add	r2,r2,r4
8110bdf4:	10800017 	ldw	r2,0(r2)
8110bdf8:	1000683a 	jmp	r2
8110bdfc:	8110bf90 	cmplti	r4,r16,17150
8110be00:	8110be50 	cmplti	r4,r16,17145
8110be04:	8110be50 	cmplti	r4,r16,17145
8110be08:	8110be4c 	andi	r4,r16,17145
8110be0c:	8110bf74 	orhi	r4,r16,17149
8110be10:	8110bf74 	orhi	r4,r16,17149
8110be14:	8110bf60 	cmpeqi	r4,r16,17149
8110be18:	8110be4c 	andi	r4,r16,17145
8110be1c:	8110bf74 	orhi	r4,r16,17149
8110be20:	8110bf60 	cmpeqi	r4,r16,17149
8110be24:	8110bf74 	orhi	r4,r16,17149
8110be28:	8110be4c 	andi	r4,r16,17145
8110be2c:	8110bf80 	call	88110bf8 <__reset+0x20f0bf8>
8110be30:	8110bf80 	call	88110bf8 <__reset+0x20f0bf8>
8110be34:	8110bf80 	call	88110bf8 <__reset+0x20f0bf8>
8110be38:	8110c05c 	xori	r4,r16,17153
8110be3c:	90003b1e 	bne	r18,zero,8110bf2c <__mulsf3+0x204>
8110be40:	04400204 	movi	r17,8
8110be44:	05c00084 	movi	r23,2
8110be48:	003fd206 	br	8110bd94 <__reset+0xfb0ebd94>
8110be4c:	302b883a 	mov	r21,r6
8110be50:	00800084 	movi	r2,2
8110be54:	18802626 	beq	r3,r2,8110bef0 <__mulsf3+0x1c8>
8110be58:	008000c4 	movi	r2,3
8110be5c:	1880ab26 	beq	r3,r2,8110c10c <__mulsf3+0x3e4>
8110be60:	00800044 	movi	r2,1
8110be64:	1880a21e 	bne	r3,r2,8110c0f0 <__mulsf3+0x3c8>
8110be68:	a829883a 	mov	r20,r21
8110be6c:	0007883a 	mov	r3,zero
8110be70:	0009883a 	mov	r4,zero
8110be74:	18803fcc 	andi	r2,r3,255
8110be78:	100695fa 	slli	r3,r2,23
8110be7c:	a0803fcc 	andi	r2,r20,255
8110be80:	100a97fa 	slli	r5,r2,31
8110be84:	00802034 	movhi	r2,128
8110be88:	10bfffc4 	addi	r2,r2,-1
8110be8c:	2084703a 	and	r2,r4,r2
8110be90:	10c4b03a 	or	r2,r2,r3
8110be94:	1144b03a 	or	r2,r2,r5
8110be98:	dfc00a17 	ldw	ra,40(sp)
8110be9c:	df000917 	ldw	fp,36(sp)
8110bea0:	ddc00817 	ldw	r23,32(sp)
8110bea4:	dd800717 	ldw	r22,28(sp)
8110bea8:	dd400617 	ldw	r21,24(sp)
8110beac:	dd000517 	ldw	r20,20(sp)
8110beb0:	dcc00417 	ldw	r19,16(sp)
8110beb4:	dc800317 	ldw	r18,12(sp)
8110beb8:	dc400217 	ldw	r17,8(sp)
8110bebc:	dc000117 	ldw	r16,4(sp)
8110bec0:	dec00b04 	addi	sp,sp,44
8110bec4:	f800283a 	ret
8110bec8:	90000d1e 	bne	r18,zero,8110bf00 <__mulsf3+0x1d8>
8110becc:	04400104 	movi	r17,4
8110bed0:	05c00044 	movi	r23,1
8110bed4:	003faf06 	br	8110bd94 <__reset+0xfb0ebd94>
8110bed8:	9806c03a 	cmpne	r3,r19,zero
8110bedc:	18c00084 	addi	r3,r3,2
8110bee0:	003fba06 	br	8110bdcc <__reset+0xfb0ebdcc>
8110bee4:	9800141e 	bne	r19,zero,8110bf38 <__mulsf3+0x210>
8110bee8:	00c00044 	movi	r3,1
8110beec:	003fb706 	br	8110bdcc <__reset+0xfb0ebdcc>
8110bef0:	a829883a 	mov	r20,r21
8110bef4:	00ffffc4 	movi	r3,-1
8110bef8:	0009883a 	mov	r4,zero
8110befc:	003fdd06 	br	8110be74 <__reset+0xfb0ebe74>
8110bf00:	9009883a 	mov	r4,r18
8110bf04:	d9400015 	stw	r5,0(sp)
8110bf08:	110cd080 	call	8110cd08 <__clzsi2>
8110bf0c:	10fffec4 	addi	r3,r2,-5
8110bf10:	10801d84 	addi	r2,r2,118
8110bf14:	90e4983a 	sll	r18,r18,r3
8110bf18:	00a1c83a 	sub	r16,zero,r2
8110bf1c:	0023883a 	mov	r17,zero
8110bf20:	002f883a 	mov	r23,zero
8110bf24:	d9400017 	ldw	r5,0(sp)
8110bf28:	003f9a06 	br	8110bd94 <__reset+0xfb0ebd94>
8110bf2c:	04400304 	movi	r17,12
8110bf30:	05c000c4 	movi	r23,3
8110bf34:	003f9706 	br	8110bd94 <__reset+0xfb0ebd94>
8110bf38:	9809883a 	mov	r4,r19
8110bf3c:	d9800015 	stw	r6,0(sp)
8110bf40:	110cd080 	call	8110cd08 <__clzsi2>
8110bf44:	10fffec4 	addi	r3,r2,-5
8110bf48:	10801d84 	addi	r2,r2,118
8110bf4c:	98e6983a 	sll	r19,r19,r3
8110bf50:	0085c83a 	sub	r2,zero,r2
8110bf54:	0007883a 	mov	r3,zero
8110bf58:	d9800017 	ldw	r6,0(sp)
8110bf5c:	003f9b06 	br	8110bdcc <__reset+0xfb0ebdcc>
8110bf60:	01002034 	movhi	r4,128
8110bf64:	0029883a 	mov	r20,zero
8110bf68:	213fffc4 	addi	r4,r4,-1
8110bf6c:	00ffffc4 	movi	r3,-1
8110bf70:	003fc006 	br	8110be74 <__reset+0xfb0ebe74>
8110bf74:	9027883a 	mov	r19,r18
8110bf78:	b807883a 	mov	r3,r23
8110bf7c:	003fb406 	br	8110be50 <__reset+0xfb0ebe50>
8110bf80:	9027883a 	mov	r19,r18
8110bf84:	e02b883a 	mov	r21,fp
8110bf88:	b807883a 	mov	r3,r23
8110bf8c:	003fb006 	br	8110be50 <__reset+0xfb0ebe50>
8110bf90:	9004d43a 	srli	r2,r18,16
8110bf94:	9810d43a 	srli	r8,r19,16
8110bf98:	94bfffcc 	andi	r18,r18,65535
8110bf9c:	993fffcc 	andi	r4,r19,65535
8110bfa0:	910d383a 	mul	r6,r18,r4
8110bfa4:	20a7383a 	mul	r19,r4,r2
8110bfa8:	9225383a 	mul	r18,r18,r8
8110bfac:	3006d43a 	srli	r3,r6,16
8110bfb0:	1211383a 	mul	r8,r2,r8
8110bfb4:	94e5883a 	add	r18,r18,r19
8110bfb8:	1c87883a 	add	r3,r3,r18
8110bfbc:	1cc0022e 	bgeu	r3,r19,8110bfc8 <__mulsf3+0x2a0>
8110bfc0:	00800074 	movhi	r2,1
8110bfc4:	4091883a 	add	r8,r8,r2
8110bfc8:	1804943a 	slli	r2,r3,16
8110bfcc:	31bfffcc 	andi	r6,r6,65535
8110bfd0:	1806d43a 	srli	r3,r3,16
8110bfd4:	1185883a 	add	r2,r2,r6
8110bfd8:	102691ba 	slli	r19,r2,6
8110bfdc:	1a07883a 	add	r3,r3,r8
8110bfe0:	1004d6ba 	srli	r2,r2,26
8110bfe4:	180891ba 	slli	r4,r3,6
8110bfe8:	9826c03a 	cmpne	r19,r19,zero
8110bfec:	9884b03a 	or	r2,r19,r2
8110bff0:	1126b03a 	or	r19,r2,r4
8110bff4:	9882002c 	andhi	r2,r19,2048
8110bff8:	10000426 	beq	r2,zero,8110c00c <__mulsf3+0x2e4>
8110bffc:	9804d07a 	srli	r2,r19,1
8110c000:	9900004c 	andi	r4,r19,1
8110c004:	3821883a 	mov	r16,r7
8110c008:	1126b03a 	or	r19,r2,r4
8110c00c:	80c01fc4 	addi	r3,r16,127
8110c010:	00c0210e 	bge	zero,r3,8110c098 <__mulsf3+0x370>
8110c014:	988001cc 	andi	r2,r19,7
8110c018:	10000426 	beq	r2,zero,8110c02c <__mulsf3+0x304>
8110c01c:	988003cc 	andi	r2,r19,15
8110c020:	01000104 	movi	r4,4
8110c024:	11000126 	beq	r2,r4,8110c02c <__mulsf3+0x304>
8110c028:	9927883a 	add	r19,r19,r4
8110c02c:	9882002c 	andhi	r2,r19,2048
8110c030:	10000426 	beq	r2,zero,8110c044 <__mulsf3+0x31c>
8110c034:	00be0034 	movhi	r2,63488
8110c038:	10bfffc4 	addi	r2,r2,-1
8110c03c:	80c02004 	addi	r3,r16,128
8110c040:	98a6703a 	and	r19,r19,r2
8110c044:	00803f84 	movi	r2,254
8110c048:	10ffa916 	blt	r2,r3,8110bef0 <__reset+0xfb0ebef0>
8110c04c:	980891ba 	slli	r4,r19,6
8110c050:	a829883a 	mov	r20,r21
8110c054:	2008d27a 	srli	r4,r4,9
8110c058:	003f8606 	br	8110be74 <__reset+0xfb0ebe74>
8110c05c:	9080102c 	andhi	r2,r18,64
8110c060:	10000826 	beq	r2,zero,8110c084 <__mulsf3+0x35c>
8110c064:	9880102c 	andhi	r2,r19,64
8110c068:	1000061e 	bne	r2,zero,8110c084 <__mulsf3+0x35c>
8110c06c:	00802034 	movhi	r2,128
8110c070:	99001034 	orhi	r4,r19,64
8110c074:	10bfffc4 	addi	r2,r2,-1
8110c078:	b029883a 	mov	r20,r22
8110c07c:	2088703a 	and	r4,r4,r2
8110c080:	003fba06 	br	8110bf6c <__reset+0xfb0ebf6c>
8110c084:	00802034 	movhi	r2,128
8110c088:	91001034 	orhi	r4,r18,64
8110c08c:	10bfffc4 	addi	r2,r2,-1
8110c090:	2088703a 	and	r4,r4,r2
8110c094:	003fb506 	br	8110bf6c <__reset+0xfb0ebf6c>
8110c098:	00800044 	movi	r2,1
8110c09c:	10c7c83a 	sub	r3,r2,r3
8110c0a0:	008006c4 	movi	r2,27
8110c0a4:	10ff7016 	blt	r2,r3,8110be68 <__reset+0xfb0ebe68>
8110c0a8:	00800804 	movi	r2,32
8110c0ac:	10c5c83a 	sub	r2,r2,r3
8110c0b0:	9884983a 	sll	r2,r19,r2
8110c0b4:	98c6d83a 	srl	r3,r19,r3
8110c0b8:	1004c03a 	cmpne	r2,r2,zero
8110c0bc:	1884b03a 	or	r2,r3,r2
8110c0c0:	10c001cc 	andi	r3,r2,7
8110c0c4:	18000426 	beq	r3,zero,8110c0d8 <__mulsf3+0x3b0>
8110c0c8:	10c003cc 	andi	r3,r2,15
8110c0cc:	01000104 	movi	r4,4
8110c0d0:	19000126 	beq	r3,r4,8110c0d8 <__mulsf3+0x3b0>
8110c0d4:	1105883a 	add	r2,r2,r4
8110c0d8:	10c1002c 	andhi	r3,r2,1024
8110c0dc:	18000626 	beq	r3,zero,8110c0f8 <__mulsf3+0x3d0>
8110c0e0:	a829883a 	mov	r20,r21
8110c0e4:	00c00044 	movi	r3,1
8110c0e8:	0009883a 	mov	r4,zero
8110c0ec:	003f6106 	br	8110be74 <__reset+0xfb0ebe74>
8110c0f0:	3821883a 	mov	r16,r7
8110c0f4:	003fc506 	br	8110c00c <__reset+0xfb0ec00c>
8110c0f8:	100491ba 	slli	r2,r2,6
8110c0fc:	a829883a 	mov	r20,r21
8110c100:	0007883a 	mov	r3,zero
8110c104:	1008d27a 	srli	r4,r2,9
8110c108:	003f5a06 	br	8110be74 <__reset+0xfb0ebe74>
8110c10c:	00802034 	movhi	r2,128
8110c110:	99001034 	orhi	r4,r19,64
8110c114:	10bfffc4 	addi	r2,r2,-1
8110c118:	a829883a 	mov	r20,r21
8110c11c:	2088703a 	and	r4,r4,r2
8110c120:	003f9206 	br	8110bf6c <__reset+0xfb0ebf6c>

8110c124 <__floatsisf>:
8110c124:	defffd04 	addi	sp,sp,-12
8110c128:	dfc00215 	stw	ra,8(sp)
8110c12c:	dc400115 	stw	r17,4(sp)
8110c130:	dc000015 	stw	r16,0(sp)
8110c134:	20003526 	beq	r4,zero,8110c20c <__floatsisf+0xe8>
8110c138:	2021883a 	mov	r16,r4
8110c13c:	2022d7fa 	srli	r17,r4,31
8110c140:	20003616 	blt	r4,zero,8110c21c <__floatsisf+0xf8>
8110c144:	8009883a 	mov	r4,r16
8110c148:	110cd080 	call	8110cd08 <__clzsi2>
8110c14c:	00c02784 	movi	r3,158
8110c150:	1887c83a 	sub	r3,r3,r2
8110c154:	01002584 	movi	r4,150
8110c158:	20c01416 	blt	r4,r3,8110c1ac <__floatsisf+0x88>
8110c15c:	20c9c83a 	sub	r4,r4,r3
8110c160:	8120983a 	sll	r16,r16,r4
8110c164:	00802034 	movhi	r2,128
8110c168:	10bfffc4 	addi	r2,r2,-1
8110c16c:	8809883a 	mov	r4,r17
8110c170:	80a0703a 	and	r16,r16,r2
8110c174:	18803fcc 	andi	r2,r3,255
8110c178:	100695fa 	slli	r3,r2,23
8110c17c:	20803fcc 	andi	r2,r4,255
8110c180:	100897fa 	slli	r4,r2,31
8110c184:	00802034 	movhi	r2,128
8110c188:	10bfffc4 	addi	r2,r2,-1
8110c18c:	8084703a 	and	r2,r16,r2
8110c190:	10c4b03a 	or	r2,r2,r3
8110c194:	1104b03a 	or	r2,r2,r4
8110c198:	dfc00217 	ldw	ra,8(sp)
8110c19c:	dc400117 	ldw	r17,4(sp)
8110c1a0:	dc000017 	ldw	r16,0(sp)
8110c1a4:	dec00304 	addi	sp,sp,12
8110c1a8:	f800283a 	ret
8110c1ac:	01002644 	movi	r4,153
8110c1b0:	20c01c16 	blt	r4,r3,8110c224 <__floatsisf+0x100>
8110c1b4:	20c9c83a 	sub	r4,r4,r3
8110c1b8:	8120983a 	sll	r16,r16,r4
8110c1bc:	013f0034 	movhi	r4,64512
8110c1c0:	213fffc4 	addi	r4,r4,-1
8110c1c4:	814001cc 	andi	r5,r16,7
8110c1c8:	8108703a 	and	r4,r16,r4
8110c1cc:	28000426 	beq	r5,zero,8110c1e0 <__floatsisf+0xbc>
8110c1d0:	840003cc 	andi	r16,r16,15
8110c1d4:	01400104 	movi	r5,4
8110c1d8:	81400126 	beq	r16,r5,8110c1e0 <__floatsisf+0xbc>
8110c1dc:	2149883a 	add	r4,r4,r5
8110c1e0:	2141002c 	andhi	r5,r4,1024
8110c1e4:	28000526 	beq	r5,zero,8110c1fc <__floatsisf+0xd8>
8110c1e8:	00c027c4 	movi	r3,159
8110c1ec:	1887c83a 	sub	r3,r3,r2
8110c1f0:	00bf0034 	movhi	r2,64512
8110c1f4:	10bfffc4 	addi	r2,r2,-1
8110c1f8:	2088703a 	and	r4,r4,r2
8110c1fc:	202091ba 	slli	r16,r4,6
8110c200:	8809883a 	mov	r4,r17
8110c204:	8020d27a 	srli	r16,r16,9
8110c208:	003fda06 	br	8110c174 <__reset+0xfb0ec174>
8110c20c:	0009883a 	mov	r4,zero
8110c210:	0007883a 	mov	r3,zero
8110c214:	0021883a 	mov	r16,zero
8110c218:	003fd606 	br	8110c174 <__reset+0xfb0ec174>
8110c21c:	0121c83a 	sub	r16,zero,r4
8110c220:	003fc806 	br	8110c144 <__reset+0xfb0ec144>
8110c224:	01002e44 	movi	r4,185
8110c228:	20c9c83a 	sub	r4,r4,r3
8110c22c:	01400144 	movi	r5,5
8110c230:	8108983a 	sll	r4,r16,r4
8110c234:	288bc83a 	sub	r5,r5,r2
8110c238:	8160d83a 	srl	r16,r16,r5
8110c23c:	2008c03a 	cmpne	r4,r4,zero
8110c240:	8120b03a 	or	r16,r16,r4
8110c244:	003fdd06 	br	8110c1bc <__reset+0xfb0ec1bc>

8110c248 <__floatunsisf>:
8110c248:	defffe04 	addi	sp,sp,-8
8110c24c:	dfc00115 	stw	ra,4(sp)
8110c250:	dc000015 	stw	r16,0(sp)
8110c254:	20002c26 	beq	r4,zero,8110c308 <__floatunsisf+0xc0>
8110c258:	2021883a 	mov	r16,r4
8110c25c:	110cd080 	call	8110cd08 <__clzsi2>
8110c260:	00c02784 	movi	r3,158
8110c264:	1887c83a 	sub	r3,r3,r2
8110c268:	01002584 	movi	r4,150
8110c26c:	20c00f16 	blt	r4,r3,8110c2ac <__floatunsisf+0x64>
8110c270:	20c9c83a 	sub	r4,r4,r3
8110c274:	8108983a 	sll	r4,r16,r4
8110c278:	00802034 	movhi	r2,128
8110c27c:	10bfffc4 	addi	r2,r2,-1
8110c280:	2088703a 	and	r4,r4,r2
8110c284:	18803fcc 	andi	r2,r3,255
8110c288:	100695fa 	slli	r3,r2,23
8110c28c:	00802034 	movhi	r2,128
8110c290:	10bfffc4 	addi	r2,r2,-1
8110c294:	2084703a 	and	r2,r4,r2
8110c298:	10c4b03a 	or	r2,r2,r3
8110c29c:	dfc00117 	ldw	ra,4(sp)
8110c2a0:	dc000017 	ldw	r16,0(sp)
8110c2a4:	dec00204 	addi	sp,sp,8
8110c2a8:	f800283a 	ret
8110c2ac:	01002644 	movi	r4,153
8110c2b0:	20c01816 	blt	r4,r3,8110c314 <__floatunsisf+0xcc>
8110c2b4:	20c9c83a 	sub	r4,r4,r3
8110c2b8:	8108983a 	sll	r4,r16,r4
8110c2bc:	017f0034 	movhi	r5,64512
8110c2c0:	297fffc4 	addi	r5,r5,-1
8110c2c4:	218001cc 	andi	r6,r4,7
8110c2c8:	214a703a 	and	r5,r4,r5
8110c2cc:	30000426 	beq	r6,zero,8110c2e0 <__floatunsisf+0x98>
8110c2d0:	210003cc 	andi	r4,r4,15
8110c2d4:	01800104 	movi	r6,4
8110c2d8:	21800126 	beq	r4,r6,8110c2e0 <__floatunsisf+0x98>
8110c2dc:	298b883a 	add	r5,r5,r6
8110c2e0:	2901002c 	andhi	r4,r5,1024
8110c2e4:	20000526 	beq	r4,zero,8110c2fc <__floatunsisf+0xb4>
8110c2e8:	00c027c4 	movi	r3,159
8110c2ec:	1887c83a 	sub	r3,r3,r2
8110c2f0:	00bf0034 	movhi	r2,64512
8110c2f4:	10bfffc4 	addi	r2,r2,-1
8110c2f8:	288a703a 	and	r5,r5,r2
8110c2fc:	280891ba 	slli	r4,r5,6
8110c300:	2008d27a 	srli	r4,r4,9
8110c304:	003fdf06 	br	8110c284 <__reset+0xfb0ec284>
8110c308:	0007883a 	mov	r3,zero
8110c30c:	0009883a 	mov	r4,zero
8110c310:	003fdc06 	br	8110c284 <__reset+0xfb0ec284>
8110c314:	01402e44 	movi	r5,185
8110c318:	28cbc83a 	sub	r5,r5,r3
8110c31c:	01000144 	movi	r4,5
8110c320:	2089c83a 	sub	r4,r4,r2
8110c324:	814a983a 	sll	r5,r16,r5
8110c328:	8108d83a 	srl	r4,r16,r4
8110c32c:	2820c03a 	cmpne	r16,r5,zero
8110c330:	2408b03a 	or	r4,r4,r16
8110c334:	003fe106 	br	8110c2bc <__reset+0xfb0ec2bc>

8110c338 <__muldf3>:
8110c338:	defff304 	addi	sp,sp,-52
8110c33c:	2804d53a 	srli	r2,r5,20
8110c340:	dd800915 	stw	r22,36(sp)
8110c344:	282cd7fa 	srli	r22,r5,31
8110c348:	dc000315 	stw	r16,12(sp)
8110c34c:	04000434 	movhi	r16,16
8110c350:	dd400815 	stw	r21,32(sp)
8110c354:	dc800515 	stw	r18,20(sp)
8110c358:	843fffc4 	addi	r16,r16,-1
8110c35c:	dfc00c15 	stw	ra,48(sp)
8110c360:	df000b15 	stw	fp,44(sp)
8110c364:	ddc00a15 	stw	r23,40(sp)
8110c368:	dd000715 	stw	r20,28(sp)
8110c36c:	dcc00615 	stw	r19,24(sp)
8110c370:	dc400415 	stw	r17,16(sp)
8110c374:	1481ffcc 	andi	r18,r2,2047
8110c378:	2c20703a 	and	r16,r5,r16
8110c37c:	b02b883a 	mov	r21,r22
8110c380:	b2403fcc 	andi	r9,r22,255
8110c384:	90006026 	beq	r18,zero,8110c508 <__muldf3+0x1d0>
8110c388:	0081ffc4 	movi	r2,2047
8110c38c:	2029883a 	mov	r20,r4
8110c390:	90803626 	beq	r18,r2,8110c46c <__muldf3+0x134>
8110c394:	80800434 	orhi	r2,r16,16
8110c398:	100490fa 	slli	r2,r2,3
8110c39c:	2020d77a 	srli	r16,r4,29
8110c3a0:	202890fa 	slli	r20,r4,3
8110c3a4:	94bf0044 	addi	r18,r18,-1023
8110c3a8:	80a0b03a 	or	r16,r16,r2
8110c3ac:	0027883a 	mov	r19,zero
8110c3b0:	0039883a 	mov	fp,zero
8110c3b4:	3804d53a 	srli	r2,r7,20
8110c3b8:	382ed7fa 	srli	r23,r7,31
8110c3bc:	04400434 	movhi	r17,16
8110c3c0:	8c7fffc4 	addi	r17,r17,-1
8110c3c4:	1081ffcc 	andi	r2,r2,2047
8110c3c8:	3011883a 	mov	r8,r6
8110c3cc:	3c62703a 	and	r17,r7,r17
8110c3d0:	ba803fcc 	andi	r10,r23,255
8110c3d4:	10006d26 	beq	r2,zero,8110c58c <__muldf3+0x254>
8110c3d8:	00c1ffc4 	movi	r3,2047
8110c3dc:	10c06526 	beq	r2,r3,8110c574 <__muldf3+0x23c>
8110c3e0:	88c00434 	orhi	r3,r17,16
8110c3e4:	180690fa 	slli	r3,r3,3
8110c3e8:	3022d77a 	srli	r17,r6,29
8110c3ec:	301090fa 	slli	r8,r6,3
8110c3f0:	10bf0044 	addi	r2,r2,-1023
8110c3f4:	88e2b03a 	or	r17,r17,r3
8110c3f8:	000b883a 	mov	r5,zero
8110c3fc:	9085883a 	add	r2,r18,r2
8110c400:	2cc8b03a 	or	r4,r5,r19
8110c404:	00c003c4 	movi	r3,15
8110c408:	bdacf03a 	xor	r22,r23,r22
8110c40c:	12c00044 	addi	r11,r2,1
8110c410:	19009936 	bltu	r3,r4,8110c678 <__muldf3+0x340>
8110c414:	200890ba 	slli	r4,r4,2
8110c418:	00e04474 	movhi	r3,33041
8110c41c:	18f10b04 	addi	r3,r3,-15316
8110c420:	20c9883a 	add	r4,r4,r3
8110c424:	20c00017 	ldw	r3,0(r4)
8110c428:	1800683a 	jmp	r3
8110c42c:	8110c678 	rdprs	r4,r16,17177
8110c430:	8110c48c 	andi	r4,r16,17170
8110c434:	8110c48c 	andi	r4,r16,17170
8110c438:	8110c488 	cmpgei	r4,r16,17170
8110c43c:	8110c654 	ori	r4,r16,17177
8110c440:	8110c654 	ori	r4,r16,17177
8110c444:	8110c63c 	xorhi	r4,r16,17176
8110c448:	8110c488 	cmpgei	r4,r16,17170
8110c44c:	8110c654 	ori	r4,r16,17177
8110c450:	8110c63c 	xorhi	r4,r16,17176
8110c454:	8110c654 	ori	r4,r16,17177
8110c458:	8110c488 	cmpgei	r4,r16,17170
8110c45c:	8110c664 	muli	r4,r16,17177
8110c460:	8110c664 	muli	r4,r16,17177
8110c464:	8110c664 	muli	r4,r16,17177
8110c468:	8110c880 	call	88110c88 <__reset+0x20f0c88>
8110c46c:	2404b03a 	or	r2,r4,r16
8110c470:	10006f1e 	bne	r2,zero,8110c630 <__muldf3+0x2f8>
8110c474:	04c00204 	movi	r19,8
8110c478:	0021883a 	mov	r16,zero
8110c47c:	0029883a 	mov	r20,zero
8110c480:	07000084 	movi	fp,2
8110c484:	003fcb06 	br	8110c3b4 <__reset+0xfb0ec3b4>
8110c488:	502d883a 	mov	r22,r10
8110c48c:	00800084 	movi	r2,2
8110c490:	28805726 	beq	r5,r2,8110c5f0 <__muldf3+0x2b8>
8110c494:	008000c4 	movi	r2,3
8110c498:	28816626 	beq	r5,r2,8110ca34 <__muldf3+0x6fc>
8110c49c:	00800044 	movi	r2,1
8110c4a0:	2881411e 	bne	r5,r2,8110c9a8 <__muldf3+0x670>
8110c4a4:	b02b883a 	mov	r21,r22
8110c4a8:	0005883a 	mov	r2,zero
8110c4ac:	000b883a 	mov	r5,zero
8110c4b0:	0029883a 	mov	r20,zero
8110c4b4:	1004953a 	slli	r2,r2,20
8110c4b8:	a8c03fcc 	andi	r3,r21,255
8110c4bc:	04400434 	movhi	r17,16
8110c4c0:	8c7fffc4 	addi	r17,r17,-1
8110c4c4:	180697fa 	slli	r3,r3,31
8110c4c8:	2c4a703a 	and	r5,r5,r17
8110c4cc:	288ab03a 	or	r5,r5,r2
8110c4d0:	28c6b03a 	or	r3,r5,r3
8110c4d4:	a005883a 	mov	r2,r20
8110c4d8:	dfc00c17 	ldw	ra,48(sp)
8110c4dc:	df000b17 	ldw	fp,44(sp)
8110c4e0:	ddc00a17 	ldw	r23,40(sp)
8110c4e4:	dd800917 	ldw	r22,36(sp)
8110c4e8:	dd400817 	ldw	r21,32(sp)
8110c4ec:	dd000717 	ldw	r20,28(sp)
8110c4f0:	dcc00617 	ldw	r19,24(sp)
8110c4f4:	dc800517 	ldw	r18,20(sp)
8110c4f8:	dc400417 	ldw	r17,16(sp)
8110c4fc:	dc000317 	ldw	r16,12(sp)
8110c500:	dec00d04 	addi	sp,sp,52
8110c504:	f800283a 	ret
8110c508:	2404b03a 	or	r2,r4,r16
8110c50c:	2027883a 	mov	r19,r4
8110c510:	10004226 	beq	r2,zero,8110c61c <__muldf3+0x2e4>
8110c514:	8000fc26 	beq	r16,zero,8110c908 <__muldf3+0x5d0>
8110c518:	8009883a 	mov	r4,r16
8110c51c:	d9800215 	stw	r6,8(sp)
8110c520:	d9c00015 	stw	r7,0(sp)
8110c524:	da400115 	stw	r9,4(sp)
8110c528:	110cd080 	call	8110cd08 <__clzsi2>
8110c52c:	d9800217 	ldw	r6,8(sp)
8110c530:	d9c00017 	ldw	r7,0(sp)
8110c534:	da400117 	ldw	r9,4(sp)
8110c538:	113ffd44 	addi	r4,r2,-11
8110c53c:	00c00704 	movi	r3,28
8110c540:	1900ed16 	blt	r3,r4,8110c8f8 <__muldf3+0x5c0>
8110c544:	00c00744 	movi	r3,29
8110c548:	147ffe04 	addi	r17,r2,-8
8110c54c:	1907c83a 	sub	r3,r3,r4
8110c550:	8460983a 	sll	r16,r16,r17
8110c554:	98c6d83a 	srl	r3,r19,r3
8110c558:	9c68983a 	sll	r20,r19,r17
8110c55c:	1c20b03a 	or	r16,r3,r16
8110c560:	1080fcc4 	addi	r2,r2,1011
8110c564:	00a5c83a 	sub	r18,zero,r2
8110c568:	0027883a 	mov	r19,zero
8110c56c:	0039883a 	mov	fp,zero
8110c570:	003f9006 	br	8110c3b4 <__reset+0xfb0ec3b4>
8110c574:	3446b03a 	or	r3,r6,r17
8110c578:	1800261e 	bne	r3,zero,8110c614 <__muldf3+0x2dc>
8110c57c:	0023883a 	mov	r17,zero
8110c580:	0011883a 	mov	r8,zero
8110c584:	01400084 	movi	r5,2
8110c588:	003f9c06 	br	8110c3fc <__reset+0xfb0ec3fc>
8110c58c:	3446b03a 	or	r3,r6,r17
8110c590:	18001c26 	beq	r3,zero,8110c604 <__muldf3+0x2cc>
8110c594:	8800ce26 	beq	r17,zero,8110c8d0 <__muldf3+0x598>
8110c598:	8809883a 	mov	r4,r17
8110c59c:	d9800215 	stw	r6,8(sp)
8110c5a0:	da400115 	stw	r9,4(sp)
8110c5a4:	da800015 	stw	r10,0(sp)
8110c5a8:	110cd080 	call	8110cd08 <__clzsi2>
8110c5ac:	d9800217 	ldw	r6,8(sp)
8110c5b0:	da400117 	ldw	r9,4(sp)
8110c5b4:	da800017 	ldw	r10,0(sp)
8110c5b8:	113ffd44 	addi	r4,r2,-11
8110c5bc:	00c00704 	movi	r3,28
8110c5c0:	1900bf16 	blt	r3,r4,8110c8c0 <__muldf3+0x588>
8110c5c4:	00c00744 	movi	r3,29
8110c5c8:	123ffe04 	addi	r8,r2,-8
8110c5cc:	1907c83a 	sub	r3,r3,r4
8110c5d0:	8a22983a 	sll	r17,r17,r8
8110c5d4:	30c6d83a 	srl	r3,r6,r3
8110c5d8:	3210983a 	sll	r8,r6,r8
8110c5dc:	1c62b03a 	or	r17,r3,r17
8110c5e0:	1080fcc4 	addi	r2,r2,1011
8110c5e4:	0085c83a 	sub	r2,zero,r2
8110c5e8:	000b883a 	mov	r5,zero
8110c5ec:	003f8306 	br	8110c3fc <__reset+0xfb0ec3fc>
8110c5f0:	b02b883a 	mov	r21,r22
8110c5f4:	0081ffc4 	movi	r2,2047
8110c5f8:	000b883a 	mov	r5,zero
8110c5fc:	0029883a 	mov	r20,zero
8110c600:	003fac06 	br	8110c4b4 <__reset+0xfb0ec4b4>
8110c604:	0023883a 	mov	r17,zero
8110c608:	0011883a 	mov	r8,zero
8110c60c:	01400044 	movi	r5,1
8110c610:	003f7a06 	br	8110c3fc <__reset+0xfb0ec3fc>
8110c614:	014000c4 	movi	r5,3
8110c618:	003f7806 	br	8110c3fc <__reset+0xfb0ec3fc>
8110c61c:	04c00104 	movi	r19,4
8110c620:	0021883a 	mov	r16,zero
8110c624:	0029883a 	mov	r20,zero
8110c628:	07000044 	movi	fp,1
8110c62c:	003f6106 	br	8110c3b4 <__reset+0xfb0ec3b4>
8110c630:	04c00304 	movi	r19,12
8110c634:	070000c4 	movi	fp,3
8110c638:	003f5e06 	br	8110c3b4 <__reset+0xfb0ec3b4>
8110c63c:	01400434 	movhi	r5,16
8110c640:	002b883a 	mov	r21,zero
8110c644:	297fffc4 	addi	r5,r5,-1
8110c648:	053fffc4 	movi	r20,-1
8110c64c:	0081ffc4 	movi	r2,2047
8110c650:	003f9806 	br	8110c4b4 <__reset+0xfb0ec4b4>
8110c654:	8023883a 	mov	r17,r16
8110c658:	a011883a 	mov	r8,r20
8110c65c:	e00b883a 	mov	r5,fp
8110c660:	003f8a06 	br	8110c48c <__reset+0xfb0ec48c>
8110c664:	8023883a 	mov	r17,r16
8110c668:	a011883a 	mov	r8,r20
8110c66c:	482d883a 	mov	r22,r9
8110c670:	e00b883a 	mov	r5,fp
8110c674:	003f8506 	br	8110c48c <__reset+0xfb0ec48c>
8110c678:	a00ad43a 	srli	r5,r20,16
8110c67c:	401ad43a 	srli	r13,r8,16
8110c680:	a53fffcc 	andi	r20,r20,65535
8110c684:	423fffcc 	andi	r8,r8,65535
8110c688:	4519383a 	mul	r12,r8,r20
8110c68c:	4147383a 	mul	r3,r8,r5
8110c690:	6d09383a 	mul	r4,r13,r20
8110c694:	600cd43a 	srli	r6,r12,16
8110c698:	2b5d383a 	mul	r14,r5,r13
8110c69c:	20c9883a 	add	r4,r4,r3
8110c6a0:	310d883a 	add	r6,r6,r4
8110c6a4:	30c0022e 	bgeu	r6,r3,8110c6b0 <__muldf3+0x378>
8110c6a8:	00c00074 	movhi	r3,1
8110c6ac:	70dd883a 	add	r14,r14,r3
8110c6b0:	8826d43a 	srli	r19,r17,16
8110c6b4:	8bffffcc 	andi	r15,r17,65535
8110c6b8:	7d23383a 	mul	r17,r15,r20
8110c6bc:	7949383a 	mul	r4,r15,r5
8110c6c0:	9d29383a 	mul	r20,r19,r20
8110c6c4:	8814d43a 	srli	r10,r17,16
8110c6c8:	3012943a 	slli	r9,r6,16
8110c6cc:	a129883a 	add	r20,r20,r4
8110c6d0:	633fffcc 	andi	r12,r12,65535
8110c6d4:	5515883a 	add	r10,r10,r20
8110c6d8:	3006d43a 	srli	r3,r6,16
8110c6dc:	4b13883a 	add	r9,r9,r12
8110c6e0:	2ccb383a 	mul	r5,r5,r19
8110c6e4:	5100022e 	bgeu	r10,r4,8110c6f0 <__muldf3+0x3b8>
8110c6e8:	01000074 	movhi	r4,1
8110c6ec:	290b883a 	add	r5,r5,r4
8110c6f0:	802ad43a 	srli	r21,r16,16
8110c6f4:	843fffcc 	andi	r16,r16,65535
8110c6f8:	440d383a 	mul	r6,r8,r16
8110c6fc:	4565383a 	mul	r18,r8,r21
8110c700:	8349383a 	mul	r4,r16,r13
8110c704:	500e943a 	slli	r7,r10,16
8110c708:	3010d43a 	srli	r8,r6,16
8110c70c:	5028d43a 	srli	r20,r10,16
8110c710:	2489883a 	add	r4,r4,r18
8110c714:	8abfffcc 	andi	r10,r17,65535
8110c718:	3a95883a 	add	r10,r7,r10
8110c71c:	4119883a 	add	r12,r8,r4
8110c720:	a169883a 	add	r20,r20,r5
8110c724:	1a87883a 	add	r3,r3,r10
8110c728:	6d5b383a 	mul	r13,r13,r21
8110c72c:	6480022e 	bgeu	r12,r18,8110c738 <__muldf3+0x400>
8110c730:	01000074 	movhi	r4,1
8110c734:	691b883a 	add	r13,r13,r4
8110c738:	7c25383a 	mul	r18,r15,r16
8110c73c:	7d4b383a 	mul	r5,r15,r21
8110c740:	84cf383a 	mul	r7,r16,r19
8110c744:	901ed43a 	srli	r15,r18,16
8110c748:	6008d43a 	srli	r4,r12,16
8110c74c:	6010943a 	slli	r8,r12,16
8110c750:	394f883a 	add	r7,r7,r5
8110c754:	333fffcc 	andi	r12,r6,65535
8110c758:	79df883a 	add	r15,r15,r7
8110c75c:	235b883a 	add	r13,r4,r13
8110c760:	9d63383a 	mul	r17,r19,r21
8110c764:	4309883a 	add	r4,r8,r12
8110c768:	7940022e 	bgeu	r15,r5,8110c774 <__muldf3+0x43c>
8110c76c:	01400074 	movhi	r5,1
8110c770:	8963883a 	add	r17,r17,r5
8110c774:	780a943a 	slli	r5,r15,16
8110c778:	91bfffcc 	andi	r6,r18,65535
8110c77c:	70c7883a 	add	r3,r14,r3
8110c780:	298d883a 	add	r6,r5,r6
8110c784:	1a8f803a 	cmpltu	r7,r3,r10
8110c788:	350b883a 	add	r5,r6,r20
8110c78c:	20c7883a 	add	r3,r4,r3
8110c790:	3955883a 	add	r10,r7,r5
8110c794:	1909803a 	cmpltu	r4,r3,r4
8110c798:	6a91883a 	add	r8,r13,r10
8110c79c:	780cd43a 	srli	r6,r15,16
8110c7a0:	2219883a 	add	r12,r4,r8
8110c7a4:	2d0b803a 	cmpltu	r5,r5,r20
8110c7a8:	51cf803a 	cmpltu	r7,r10,r7
8110c7ac:	29ceb03a 	or	r7,r5,r7
8110c7b0:	4351803a 	cmpltu	r8,r8,r13
8110c7b4:	610b803a 	cmpltu	r5,r12,r4
8110c7b8:	4148b03a 	or	r4,r8,r5
8110c7bc:	398f883a 	add	r7,r7,r6
8110c7c0:	3909883a 	add	r4,r7,r4
8110c7c4:	1810927a 	slli	r8,r3,9
8110c7c8:	2449883a 	add	r4,r4,r17
8110c7cc:	2008927a 	slli	r4,r4,9
8110c7d0:	6022d5fa 	srli	r17,r12,23
8110c7d4:	1806d5fa 	srli	r3,r3,23
8110c7d8:	4252b03a 	or	r9,r8,r9
8110c7dc:	600a927a 	slli	r5,r12,9
8110c7e0:	4810c03a 	cmpne	r8,r9,zero
8110c7e4:	2462b03a 	or	r17,r4,r17
8110c7e8:	40c6b03a 	or	r3,r8,r3
8110c7ec:	8900402c 	andhi	r4,r17,256
8110c7f0:	1950b03a 	or	r8,r3,r5
8110c7f4:	20000726 	beq	r4,zero,8110c814 <__muldf3+0x4dc>
8110c7f8:	4006d07a 	srli	r3,r8,1
8110c7fc:	880497fa 	slli	r2,r17,31
8110c800:	4200004c 	andi	r8,r8,1
8110c804:	8822d07a 	srli	r17,r17,1
8110c808:	1a10b03a 	or	r8,r3,r8
8110c80c:	1210b03a 	or	r8,r2,r8
8110c810:	5805883a 	mov	r2,r11
8110c814:	1140ffc4 	addi	r5,r2,1023
8110c818:	0140440e 	bge	zero,r5,8110c92c <__muldf3+0x5f4>
8110c81c:	40c001cc 	andi	r3,r8,7
8110c820:	18000726 	beq	r3,zero,8110c840 <__muldf3+0x508>
8110c824:	40c003cc 	andi	r3,r8,15
8110c828:	01000104 	movi	r4,4
8110c82c:	19000426 	beq	r3,r4,8110c840 <__muldf3+0x508>
8110c830:	4107883a 	add	r3,r8,r4
8110c834:	1a11803a 	cmpltu	r8,r3,r8
8110c838:	8a23883a 	add	r17,r17,r8
8110c83c:	1811883a 	mov	r8,r3
8110c840:	88c0402c 	andhi	r3,r17,256
8110c844:	18000426 	beq	r3,zero,8110c858 <__muldf3+0x520>
8110c848:	11410004 	addi	r5,r2,1024
8110c84c:	00bfc034 	movhi	r2,65280
8110c850:	10bfffc4 	addi	r2,r2,-1
8110c854:	88a2703a 	and	r17,r17,r2
8110c858:	0081ff84 	movi	r2,2046
8110c85c:	117f6416 	blt	r2,r5,8110c5f0 <__reset+0xfb0ec5f0>
8110c860:	8828977a 	slli	r20,r17,29
8110c864:	4010d0fa 	srli	r8,r8,3
8110c868:	8822927a 	slli	r17,r17,9
8110c86c:	2881ffcc 	andi	r2,r5,2047
8110c870:	a228b03a 	or	r20,r20,r8
8110c874:	880ad33a 	srli	r5,r17,12
8110c878:	b02b883a 	mov	r21,r22
8110c87c:	003f0d06 	br	8110c4b4 <__reset+0xfb0ec4b4>
8110c880:	8080022c 	andhi	r2,r16,8
8110c884:	10000926 	beq	r2,zero,8110c8ac <__muldf3+0x574>
8110c888:	8880022c 	andhi	r2,r17,8
8110c88c:	1000071e 	bne	r2,zero,8110c8ac <__muldf3+0x574>
8110c890:	00800434 	movhi	r2,16
8110c894:	89400234 	orhi	r5,r17,8
8110c898:	10bfffc4 	addi	r2,r2,-1
8110c89c:	b82b883a 	mov	r21,r23
8110c8a0:	288a703a 	and	r5,r5,r2
8110c8a4:	4029883a 	mov	r20,r8
8110c8a8:	003f6806 	br	8110c64c <__reset+0xfb0ec64c>
8110c8ac:	00800434 	movhi	r2,16
8110c8b0:	81400234 	orhi	r5,r16,8
8110c8b4:	10bfffc4 	addi	r2,r2,-1
8110c8b8:	288a703a 	and	r5,r5,r2
8110c8bc:	003f6306 	br	8110c64c <__reset+0xfb0ec64c>
8110c8c0:	147ff604 	addi	r17,r2,-40
8110c8c4:	3462983a 	sll	r17,r6,r17
8110c8c8:	0011883a 	mov	r8,zero
8110c8cc:	003f4406 	br	8110c5e0 <__reset+0xfb0ec5e0>
8110c8d0:	3009883a 	mov	r4,r6
8110c8d4:	d9800215 	stw	r6,8(sp)
8110c8d8:	da400115 	stw	r9,4(sp)
8110c8dc:	da800015 	stw	r10,0(sp)
8110c8e0:	110cd080 	call	8110cd08 <__clzsi2>
8110c8e4:	10800804 	addi	r2,r2,32
8110c8e8:	da800017 	ldw	r10,0(sp)
8110c8ec:	da400117 	ldw	r9,4(sp)
8110c8f0:	d9800217 	ldw	r6,8(sp)
8110c8f4:	003f3006 	br	8110c5b8 <__reset+0xfb0ec5b8>
8110c8f8:	143ff604 	addi	r16,r2,-40
8110c8fc:	9c20983a 	sll	r16,r19,r16
8110c900:	0029883a 	mov	r20,zero
8110c904:	003f1606 	br	8110c560 <__reset+0xfb0ec560>
8110c908:	d9800215 	stw	r6,8(sp)
8110c90c:	d9c00015 	stw	r7,0(sp)
8110c910:	da400115 	stw	r9,4(sp)
8110c914:	110cd080 	call	8110cd08 <__clzsi2>
8110c918:	10800804 	addi	r2,r2,32
8110c91c:	da400117 	ldw	r9,4(sp)
8110c920:	d9c00017 	ldw	r7,0(sp)
8110c924:	d9800217 	ldw	r6,8(sp)
8110c928:	003f0306 	br	8110c538 <__reset+0xfb0ec538>
8110c92c:	00c00044 	movi	r3,1
8110c930:	1947c83a 	sub	r3,r3,r5
8110c934:	00800e04 	movi	r2,56
8110c938:	10feda16 	blt	r2,r3,8110c4a4 <__reset+0xfb0ec4a4>
8110c93c:	008007c4 	movi	r2,31
8110c940:	10c01b16 	blt	r2,r3,8110c9b0 <__muldf3+0x678>
8110c944:	00800804 	movi	r2,32
8110c948:	10c5c83a 	sub	r2,r2,r3
8110c94c:	888a983a 	sll	r5,r17,r2
8110c950:	40c8d83a 	srl	r4,r8,r3
8110c954:	4084983a 	sll	r2,r8,r2
8110c958:	88e2d83a 	srl	r17,r17,r3
8110c95c:	2906b03a 	or	r3,r5,r4
8110c960:	1004c03a 	cmpne	r2,r2,zero
8110c964:	1886b03a 	or	r3,r3,r2
8110c968:	188001cc 	andi	r2,r3,7
8110c96c:	10000726 	beq	r2,zero,8110c98c <__muldf3+0x654>
8110c970:	188003cc 	andi	r2,r3,15
8110c974:	01000104 	movi	r4,4
8110c978:	11000426 	beq	r2,r4,8110c98c <__muldf3+0x654>
8110c97c:	1805883a 	mov	r2,r3
8110c980:	10c00104 	addi	r3,r2,4
8110c984:	1885803a 	cmpltu	r2,r3,r2
8110c988:	88a3883a 	add	r17,r17,r2
8110c98c:	8880202c 	andhi	r2,r17,128
8110c990:	10001c26 	beq	r2,zero,8110ca04 <__muldf3+0x6cc>
8110c994:	b02b883a 	mov	r21,r22
8110c998:	00800044 	movi	r2,1
8110c99c:	000b883a 	mov	r5,zero
8110c9a0:	0029883a 	mov	r20,zero
8110c9a4:	003ec306 	br	8110c4b4 <__reset+0xfb0ec4b4>
8110c9a8:	5805883a 	mov	r2,r11
8110c9ac:	003f9906 	br	8110c814 <__reset+0xfb0ec814>
8110c9b0:	00bff844 	movi	r2,-31
8110c9b4:	1145c83a 	sub	r2,r2,r5
8110c9b8:	8888d83a 	srl	r4,r17,r2
8110c9bc:	00800804 	movi	r2,32
8110c9c0:	18801a26 	beq	r3,r2,8110ca2c <__muldf3+0x6f4>
8110c9c4:	00801004 	movi	r2,64
8110c9c8:	10c5c83a 	sub	r2,r2,r3
8110c9cc:	8884983a 	sll	r2,r17,r2
8110c9d0:	1204b03a 	or	r2,r2,r8
8110c9d4:	1004c03a 	cmpne	r2,r2,zero
8110c9d8:	2084b03a 	or	r2,r4,r2
8110c9dc:	144001cc 	andi	r17,r2,7
8110c9e0:	88000d1e 	bne	r17,zero,8110ca18 <__muldf3+0x6e0>
8110c9e4:	000b883a 	mov	r5,zero
8110c9e8:	1028d0fa 	srli	r20,r2,3
8110c9ec:	b02b883a 	mov	r21,r22
8110c9f0:	0005883a 	mov	r2,zero
8110c9f4:	a468b03a 	or	r20,r20,r17
8110c9f8:	003eae06 	br	8110c4b4 <__reset+0xfb0ec4b4>
8110c9fc:	1007883a 	mov	r3,r2
8110ca00:	0023883a 	mov	r17,zero
8110ca04:	880a927a 	slli	r5,r17,9
8110ca08:	1805883a 	mov	r2,r3
8110ca0c:	8822977a 	slli	r17,r17,29
8110ca10:	280ad33a 	srli	r5,r5,12
8110ca14:	003ff406 	br	8110c9e8 <__reset+0xfb0ec9e8>
8110ca18:	10c003cc 	andi	r3,r2,15
8110ca1c:	01000104 	movi	r4,4
8110ca20:	193ff626 	beq	r3,r4,8110c9fc <__reset+0xfb0ec9fc>
8110ca24:	0023883a 	mov	r17,zero
8110ca28:	003fd506 	br	8110c980 <__reset+0xfb0ec980>
8110ca2c:	0005883a 	mov	r2,zero
8110ca30:	003fe706 	br	8110c9d0 <__reset+0xfb0ec9d0>
8110ca34:	00800434 	movhi	r2,16
8110ca38:	89400234 	orhi	r5,r17,8
8110ca3c:	10bfffc4 	addi	r2,r2,-1
8110ca40:	b02b883a 	mov	r21,r22
8110ca44:	288a703a 	and	r5,r5,r2
8110ca48:	4029883a 	mov	r20,r8
8110ca4c:	003eff06 	br	8110c64c <__reset+0xfb0ec64c>

8110ca50 <__extendsfdf2>:
8110ca50:	200ad5fa 	srli	r5,r4,23
8110ca54:	defffd04 	addi	sp,sp,-12
8110ca58:	dc400115 	stw	r17,4(sp)
8110ca5c:	29403fcc 	andi	r5,r5,255
8110ca60:	29800044 	addi	r6,r5,1
8110ca64:	04402034 	movhi	r17,128
8110ca68:	dc000015 	stw	r16,0(sp)
8110ca6c:	8c7fffc4 	addi	r17,r17,-1
8110ca70:	dfc00215 	stw	ra,8(sp)
8110ca74:	31803fcc 	andi	r6,r6,255
8110ca78:	00800044 	movi	r2,1
8110ca7c:	8922703a 	and	r17,r17,r4
8110ca80:	2020d7fa 	srli	r16,r4,31
8110ca84:	1180110e 	bge	r2,r6,8110cacc <__extendsfdf2+0x7c>
8110ca88:	880cd0fa 	srli	r6,r17,3
8110ca8c:	8822977a 	slli	r17,r17,29
8110ca90:	2940e004 	addi	r5,r5,896
8110ca94:	2941ffcc 	andi	r5,r5,2047
8110ca98:	2804953a 	slli	r2,r5,20
8110ca9c:	01400434 	movhi	r5,16
8110caa0:	800697fa 	slli	r3,r16,31
8110caa4:	297fffc4 	addi	r5,r5,-1
8110caa8:	314a703a 	and	r5,r6,r5
8110caac:	288ab03a 	or	r5,r5,r2
8110cab0:	28c6b03a 	or	r3,r5,r3
8110cab4:	8805883a 	mov	r2,r17
8110cab8:	dfc00217 	ldw	ra,8(sp)
8110cabc:	dc400117 	ldw	r17,4(sp)
8110cac0:	dc000017 	ldw	r16,0(sp)
8110cac4:	dec00304 	addi	sp,sp,12
8110cac8:	f800283a 	ret
8110cacc:	2800111e 	bne	r5,zero,8110cb14 <__extendsfdf2+0xc4>
8110cad0:	88001c26 	beq	r17,zero,8110cb44 <__extendsfdf2+0xf4>
8110cad4:	8809883a 	mov	r4,r17
8110cad8:	110cd080 	call	8110cd08 <__clzsi2>
8110cadc:	00c00284 	movi	r3,10
8110cae0:	18801b16 	blt	r3,r2,8110cb50 <__extendsfdf2+0x100>
8110cae4:	018002c4 	movi	r6,11
8110cae8:	308dc83a 	sub	r6,r6,r2
8110caec:	11000544 	addi	r4,r2,21
8110caf0:	8986d83a 	srl	r3,r17,r6
8110caf4:	8922983a 	sll	r17,r17,r4
8110caf8:	0180e244 	movi	r6,905
8110cafc:	01400434 	movhi	r5,16
8110cb00:	3085c83a 	sub	r2,r6,r2
8110cb04:	297fffc4 	addi	r5,r5,-1
8110cb08:	194c703a 	and	r6,r3,r5
8110cb0c:	1141ffcc 	andi	r5,r2,2047
8110cb10:	003fe006 	br	8110ca94 <__reset+0xfb0eca94>
8110cb14:	88000826 	beq	r17,zero,8110cb38 <__extendsfdf2+0xe8>
8110cb18:	880cd0fa 	srli	r6,r17,3
8110cb1c:	00800434 	movhi	r2,16
8110cb20:	10bfffc4 	addi	r2,r2,-1
8110cb24:	31800234 	orhi	r6,r6,8
8110cb28:	8822977a 	slli	r17,r17,29
8110cb2c:	308c703a 	and	r6,r6,r2
8110cb30:	0141ffc4 	movi	r5,2047
8110cb34:	003fd706 	br	8110ca94 <__reset+0xfb0eca94>
8110cb38:	0141ffc4 	movi	r5,2047
8110cb3c:	000d883a 	mov	r6,zero
8110cb40:	003fd406 	br	8110ca94 <__reset+0xfb0eca94>
8110cb44:	000b883a 	mov	r5,zero
8110cb48:	000d883a 	mov	r6,zero
8110cb4c:	003fd106 	br	8110ca94 <__reset+0xfb0eca94>
8110cb50:	11bffd44 	addi	r6,r2,-11
8110cb54:	8986983a 	sll	r3,r17,r6
8110cb58:	0023883a 	mov	r17,zero
8110cb5c:	003fe606 	br	8110caf8 <__reset+0xfb0ecaf8>

8110cb60 <__truncdfsf2>:
8110cb60:	2810d53a 	srli	r8,r5,20
8110cb64:	01c00434 	movhi	r7,16
8110cb68:	39ffffc4 	addi	r7,r7,-1
8110cb6c:	29ce703a 	and	r7,r5,r7
8110cb70:	4201ffcc 	andi	r8,r8,2047
8110cb74:	380e90fa 	slli	r7,r7,3
8110cb78:	200cd77a 	srli	r6,r4,29
8110cb7c:	42400044 	addi	r9,r8,1
8110cb80:	4a41ffcc 	andi	r9,r9,2047
8110cb84:	00c00044 	movi	r3,1
8110cb88:	280ad7fa 	srli	r5,r5,31
8110cb8c:	31ceb03a 	or	r7,r6,r7
8110cb90:	200490fa 	slli	r2,r4,3
8110cb94:	1a40230e 	bge	r3,r9,8110cc24 <__truncdfsf2+0xc4>
8110cb98:	40ff2004 	addi	r3,r8,-896
8110cb9c:	01803f84 	movi	r6,254
8110cba0:	30c01516 	blt	r6,r3,8110cbf8 <__truncdfsf2+0x98>
8110cba4:	00c0380e 	bge	zero,r3,8110cc88 <__truncdfsf2+0x128>
8110cba8:	200c91ba 	slli	r6,r4,6
8110cbac:	380e90fa 	slli	r7,r7,3
8110cbb0:	1004d77a 	srli	r2,r2,29
8110cbb4:	300cc03a 	cmpne	r6,r6,zero
8110cbb8:	31ccb03a 	or	r6,r6,r7
8110cbbc:	308cb03a 	or	r6,r6,r2
8110cbc0:	308001cc 	andi	r2,r6,7
8110cbc4:	10000426 	beq	r2,zero,8110cbd8 <__truncdfsf2+0x78>
8110cbc8:	308003cc 	andi	r2,r6,15
8110cbcc:	01000104 	movi	r4,4
8110cbd0:	11000126 	beq	r2,r4,8110cbd8 <__truncdfsf2+0x78>
8110cbd4:	31800104 	addi	r6,r6,4
8110cbd8:	3081002c 	andhi	r2,r6,1024
8110cbdc:	10001626 	beq	r2,zero,8110cc38 <__truncdfsf2+0xd8>
8110cbe0:	18c00044 	addi	r3,r3,1
8110cbe4:	00803fc4 	movi	r2,255
8110cbe8:	18800326 	beq	r3,r2,8110cbf8 <__truncdfsf2+0x98>
8110cbec:	300c91ba 	slli	r6,r6,6
8110cbf0:	300cd27a 	srli	r6,r6,9
8110cbf4:	00000206 	br	8110cc00 <__truncdfsf2+0xa0>
8110cbf8:	00ffffc4 	movi	r3,-1
8110cbfc:	000d883a 	mov	r6,zero
8110cc00:	18c03fcc 	andi	r3,r3,255
8110cc04:	180895fa 	slli	r4,r3,23
8110cc08:	00c02034 	movhi	r3,128
8110cc0c:	280a97fa 	slli	r5,r5,31
8110cc10:	18ffffc4 	addi	r3,r3,-1
8110cc14:	30c6703a 	and	r3,r6,r3
8110cc18:	1906b03a 	or	r3,r3,r4
8110cc1c:	1944b03a 	or	r2,r3,r5
8110cc20:	f800283a 	ret
8110cc24:	40000b1e 	bne	r8,zero,8110cc54 <__truncdfsf2+0xf4>
8110cc28:	388cb03a 	or	r6,r7,r2
8110cc2c:	0007883a 	mov	r3,zero
8110cc30:	30000426 	beq	r6,zero,8110cc44 <__truncdfsf2+0xe4>
8110cc34:	01800144 	movi	r6,5
8110cc38:	00803fc4 	movi	r2,255
8110cc3c:	300cd0fa 	srli	r6,r6,3
8110cc40:	18800a26 	beq	r3,r2,8110cc6c <__truncdfsf2+0x10c>
8110cc44:	00802034 	movhi	r2,128
8110cc48:	10bfffc4 	addi	r2,r2,-1
8110cc4c:	308c703a 	and	r6,r6,r2
8110cc50:	003feb06 	br	8110cc00 <__reset+0xfb0ecc00>
8110cc54:	3888b03a 	or	r4,r7,r2
8110cc58:	203fe726 	beq	r4,zero,8110cbf8 <__reset+0xfb0ecbf8>
8110cc5c:	380c90fa 	slli	r6,r7,3
8110cc60:	00c03fc4 	movi	r3,255
8110cc64:	31808034 	orhi	r6,r6,512
8110cc68:	003fd506 	br	8110cbc0 <__reset+0xfb0ecbc0>
8110cc6c:	303fe226 	beq	r6,zero,8110cbf8 <__reset+0xfb0ecbf8>
8110cc70:	00802034 	movhi	r2,128
8110cc74:	31801034 	orhi	r6,r6,64
8110cc78:	10bfffc4 	addi	r2,r2,-1
8110cc7c:	00ffffc4 	movi	r3,-1
8110cc80:	308c703a 	and	r6,r6,r2
8110cc84:	003fde06 	br	8110cc00 <__reset+0xfb0ecc00>
8110cc88:	013ffa44 	movi	r4,-23
8110cc8c:	19000e16 	blt	r3,r4,8110ccc8 <__truncdfsf2+0x168>
8110cc90:	01000784 	movi	r4,30
8110cc94:	20c9c83a 	sub	r4,r4,r3
8110cc98:	018007c4 	movi	r6,31
8110cc9c:	39c02034 	orhi	r7,r7,128
8110cca0:	31000b16 	blt	r6,r4,8110ccd0 <__truncdfsf2+0x170>
8110cca4:	423f2084 	addi	r8,r8,-894
8110cca8:	120c983a 	sll	r6,r2,r8
8110ccac:	3a0e983a 	sll	r7,r7,r8
8110ccb0:	1104d83a 	srl	r2,r2,r4
8110ccb4:	300cc03a 	cmpne	r6,r6,zero
8110ccb8:	31ceb03a 	or	r7,r6,r7
8110ccbc:	388cb03a 	or	r6,r7,r2
8110ccc0:	0007883a 	mov	r3,zero
8110ccc4:	003fbe06 	br	8110cbc0 <__reset+0xfb0ecbc0>
8110ccc8:	0007883a 	mov	r3,zero
8110cccc:	003fd906 	br	8110cc34 <__reset+0xfb0ecc34>
8110ccd0:	01bfff84 	movi	r6,-2
8110ccd4:	30cdc83a 	sub	r6,r6,r3
8110ccd8:	00c00804 	movi	r3,32
8110ccdc:	398cd83a 	srl	r6,r7,r6
8110cce0:	20c00726 	beq	r4,r3,8110cd00 <__truncdfsf2+0x1a0>
8110cce4:	423f2884 	addi	r8,r8,-862
8110cce8:	3a0e983a 	sll	r7,r7,r8
8110ccec:	3884b03a 	or	r2,r7,r2
8110ccf0:	1004c03a 	cmpne	r2,r2,zero
8110ccf4:	118cb03a 	or	r6,r2,r6
8110ccf8:	0007883a 	mov	r3,zero
8110ccfc:	003fb006 	br	8110cbc0 <__reset+0xfb0ecbc0>
8110cd00:	000f883a 	mov	r7,zero
8110cd04:	003ff906 	br	8110ccec <__reset+0xfb0eccec>

8110cd08 <__clzsi2>:
8110cd08:	00bfffd4 	movui	r2,65535
8110cd0c:	11000536 	bltu	r2,r4,8110cd24 <__clzsi2+0x1c>
8110cd10:	00803fc4 	movi	r2,255
8110cd14:	11000f36 	bltu	r2,r4,8110cd54 <__clzsi2+0x4c>
8110cd18:	00800804 	movi	r2,32
8110cd1c:	0007883a 	mov	r3,zero
8110cd20:	00000506 	br	8110cd38 <__clzsi2+0x30>
8110cd24:	00804034 	movhi	r2,256
8110cd28:	10bfffc4 	addi	r2,r2,-1
8110cd2c:	11000c2e 	bgeu	r2,r4,8110cd60 <__clzsi2+0x58>
8110cd30:	00800204 	movi	r2,8
8110cd34:	00c00604 	movi	r3,24
8110cd38:	20c8d83a 	srl	r4,r4,r3
8110cd3c:	00e044b4 	movhi	r3,33042
8110cd40:	18feb6c4 	addi	r3,r3,-1317
8110cd44:	1909883a 	add	r4,r3,r4
8110cd48:	20c00003 	ldbu	r3,0(r4)
8110cd4c:	10c5c83a 	sub	r2,r2,r3
8110cd50:	f800283a 	ret
8110cd54:	00800604 	movi	r2,24
8110cd58:	00c00204 	movi	r3,8
8110cd5c:	003ff606 	br	8110cd38 <__reset+0xfb0ecd38>
8110cd60:	00800404 	movi	r2,16
8110cd64:	1007883a 	mov	r3,r2
8110cd68:	003ff306 	br	8110cd38 <__reset+0xfb0ecd38>

8110cd6c <_getc_r>:
8110cd6c:	defffd04 	addi	sp,sp,-12
8110cd70:	dc000115 	stw	r16,4(sp)
8110cd74:	dfc00215 	stw	ra,8(sp)
8110cd78:	2021883a 	mov	r16,r4
8110cd7c:	20000226 	beq	r4,zero,8110cd88 <_getc_r+0x1c>
8110cd80:	20800e17 	ldw	r2,56(r4)
8110cd84:	10000c26 	beq	r2,zero,8110cdb8 <_getc_r+0x4c>
8110cd88:	28800117 	ldw	r2,4(r5)
8110cd8c:	10bfffc4 	addi	r2,r2,-1
8110cd90:	28800115 	stw	r2,4(r5)
8110cd94:	10000c16 	blt	r2,zero,8110cdc8 <_getc_r+0x5c>
8110cd98:	28800017 	ldw	r2,0(r5)
8110cd9c:	10c00044 	addi	r3,r2,1
8110cda0:	28c00015 	stw	r3,0(r5)
8110cda4:	10800003 	ldbu	r2,0(r2)
8110cda8:	dfc00217 	ldw	ra,8(sp)
8110cdac:	dc000117 	ldw	r16,4(sp)
8110cdb0:	dec00304 	addi	sp,sp,12
8110cdb4:	f800283a 	ret
8110cdb8:	d9400015 	stw	r5,0(sp)
8110cdbc:	11114d00 	call	811114d0 <__sinit>
8110cdc0:	d9400017 	ldw	r5,0(sp)
8110cdc4:	003ff006 	br	8110cd88 <__reset+0xfb0ecd88>
8110cdc8:	8009883a 	mov	r4,r16
8110cdcc:	dfc00217 	ldw	ra,8(sp)
8110cdd0:	dc000117 	ldw	r16,4(sp)
8110cdd4:	dec00304 	addi	sp,sp,12
8110cdd8:	110d10c1 	jmpi	8110d10c <__srget_r>

8110cddc <getc>:
8110cddc:	00a044b4 	movhi	r2,33042
8110cde0:	defffd04 	addi	sp,sp,-12
8110cde4:	10873404 	addi	r2,r2,7376
8110cde8:	dc400115 	stw	r17,4(sp)
8110cdec:	14400017 	ldw	r17,0(r2)
8110cdf0:	dc000015 	stw	r16,0(sp)
8110cdf4:	dfc00215 	stw	ra,8(sp)
8110cdf8:	2021883a 	mov	r16,r4
8110cdfc:	88000226 	beq	r17,zero,8110ce08 <getc+0x2c>
8110ce00:	88800e17 	ldw	r2,56(r17)
8110ce04:	10000d26 	beq	r2,zero,8110ce3c <getc+0x60>
8110ce08:	80800117 	ldw	r2,4(r16)
8110ce0c:	10bfffc4 	addi	r2,r2,-1
8110ce10:	80800115 	stw	r2,4(r16)
8110ce14:	10000c16 	blt	r2,zero,8110ce48 <getc+0x6c>
8110ce18:	80800017 	ldw	r2,0(r16)
8110ce1c:	10c00044 	addi	r3,r2,1
8110ce20:	80c00015 	stw	r3,0(r16)
8110ce24:	10800003 	ldbu	r2,0(r2)
8110ce28:	dfc00217 	ldw	ra,8(sp)
8110ce2c:	dc400117 	ldw	r17,4(sp)
8110ce30:	dc000017 	ldw	r16,0(sp)
8110ce34:	dec00304 	addi	sp,sp,12
8110ce38:	f800283a 	ret
8110ce3c:	8809883a 	mov	r4,r17
8110ce40:	11114d00 	call	811114d0 <__sinit>
8110ce44:	003ff006 	br	8110ce08 <__reset+0xfb0ece08>
8110ce48:	800b883a 	mov	r5,r16
8110ce4c:	8809883a 	mov	r4,r17
8110ce50:	dfc00217 	ldw	ra,8(sp)
8110ce54:	dc400117 	ldw	r17,4(sp)
8110ce58:	dc000017 	ldw	r16,0(sp)
8110ce5c:	dec00304 	addi	sp,sp,12
8110ce60:	110d10c1 	jmpi	8110d10c <__srget_r>

8110ce64 <memcpy>:
8110ce64:	defffd04 	addi	sp,sp,-12
8110ce68:	dfc00215 	stw	ra,8(sp)
8110ce6c:	dc400115 	stw	r17,4(sp)
8110ce70:	dc000015 	stw	r16,0(sp)
8110ce74:	00c003c4 	movi	r3,15
8110ce78:	2005883a 	mov	r2,r4
8110ce7c:	1980452e 	bgeu	r3,r6,8110cf94 <memcpy+0x130>
8110ce80:	2906b03a 	or	r3,r5,r4
8110ce84:	18c000cc 	andi	r3,r3,3
8110ce88:	1800441e 	bne	r3,zero,8110cf9c <memcpy+0x138>
8110ce8c:	347ffc04 	addi	r17,r6,-16
8110ce90:	8822d13a 	srli	r17,r17,4
8110ce94:	28c00104 	addi	r3,r5,4
8110ce98:	23400104 	addi	r13,r4,4
8110ce9c:	8820913a 	slli	r16,r17,4
8110cea0:	2b000204 	addi	r12,r5,8
8110cea4:	22c00204 	addi	r11,r4,8
8110cea8:	84000504 	addi	r16,r16,20
8110ceac:	2a800304 	addi	r10,r5,12
8110ceb0:	22400304 	addi	r9,r4,12
8110ceb4:	2c21883a 	add	r16,r5,r16
8110ceb8:	2811883a 	mov	r8,r5
8110cebc:	200f883a 	mov	r7,r4
8110cec0:	41000017 	ldw	r4,0(r8)
8110cec4:	1fc00017 	ldw	ra,0(r3)
8110cec8:	63c00017 	ldw	r15,0(r12)
8110cecc:	39000015 	stw	r4,0(r7)
8110ced0:	53800017 	ldw	r14,0(r10)
8110ced4:	6fc00015 	stw	ra,0(r13)
8110ced8:	5bc00015 	stw	r15,0(r11)
8110cedc:	4b800015 	stw	r14,0(r9)
8110cee0:	18c00404 	addi	r3,r3,16
8110cee4:	39c00404 	addi	r7,r7,16
8110cee8:	42000404 	addi	r8,r8,16
8110ceec:	6b400404 	addi	r13,r13,16
8110cef0:	63000404 	addi	r12,r12,16
8110cef4:	5ac00404 	addi	r11,r11,16
8110cef8:	52800404 	addi	r10,r10,16
8110cefc:	4a400404 	addi	r9,r9,16
8110cf00:	1c3fef1e 	bne	r3,r16,8110cec0 <__reset+0xfb0ecec0>
8110cf04:	89c00044 	addi	r7,r17,1
8110cf08:	380e913a 	slli	r7,r7,4
8110cf0c:	310003cc 	andi	r4,r6,15
8110cf10:	02c000c4 	movi	r11,3
8110cf14:	11c7883a 	add	r3,r2,r7
8110cf18:	29cb883a 	add	r5,r5,r7
8110cf1c:	5900212e 	bgeu	r11,r4,8110cfa4 <memcpy+0x140>
8110cf20:	1813883a 	mov	r9,r3
8110cf24:	2811883a 	mov	r8,r5
8110cf28:	200f883a 	mov	r7,r4
8110cf2c:	42800017 	ldw	r10,0(r8)
8110cf30:	4a400104 	addi	r9,r9,4
8110cf34:	39ffff04 	addi	r7,r7,-4
8110cf38:	4abfff15 	stw	r10,-4(r9)
8110cf3c:	42000104 	addi	r8,r8,4
8110cf40:	59fffa36 	bltu	r11,r7,8110cf2c <__reset+0xfb0ecf2c>
8110cf44:	213fff04 	addi	r4,r4,-4
8110cf48:	2008d0ba 	srli	r4,r4,2
8110cf4c:	318000cc 	andi	r6,r6,3
8110cf50:	21000044 	addi	r4,r4,1
8110cf54:	2109883a 	add	r4,r4,r4
8110cf58:	2109883a 	add	r4,r4,r4
8110cf5c:	1907883a 	add	r3,r3,r4
8110cf60:	290b883a 	add	r5,r5,r4
8110cf64:	30000626 	beq	r6,zero,8110cf80 <memcpy+0x11c>
8110cf68:	198d883a 	add	r6,r3,r6
8110cf6c:	29c00003 	ldbu	r7,0(r5)
8110cf70:	18c00044 	addi	r3,r3,1
8110cf74:	29400044 	addi	r5,r5,1
8110cf78:	19ffffc5 	stb	r7,-1(r3)
8110cf7c:	19bffb1e 	bne	r3,r6,8110cf6c <__reset+0xfb0ecf6c>
8110cf80:	dfc00217 	ldw	ra,8(sp)
8110cf84:	dc400117 	ldw	r17,4(sp)
8110cf88:	dc000017 	ldw	r16,0(sp)
8110cf8c:	dec00304 	addi	sp,sp,12
8110cf90:	f800283a 	ret
8110cf94:	2007883a 	mov	r3,r4
8110cf98:	003ff206 	br	8110cf64 <__reset+0xfb0ecf64>
8110cf9c:	2007883a 	mov	r3,r4
8110cfa0:	003ff106 	br	8110cf68 <__reset+0xfb0ecf68>
8110cfa4:	200d883a 	mov	r6,r4
8110cfa8:	003fee06 	br	8110cf64 <__reset+0xfb0ecf64>

8110cfac <_printf_r>:
8110cfac:	defffd04 	addi	sp,sp,-12
8110cfb0:	2805883a 	mov	r2,r5
8110cfb4:	dfc00015 	stw	ra,0(sp)
8110cfb8:	d9800115 	stw	r6,4(sp)
8110cfbc:	d9c00215 	stw	r7,8(sp)
8110cfc0:	21400217 	ldw	r5,8(r4)
8110cfc4:	d9c00104 	addi	r7,sp,4
8110cfc8:	100d883a 	mov	r6,r2
8110cfcc:	110d22c0 	call	8110d22c <___vfprintf_internal_r>
8110cfd0:	dfc00017 	ldw	ra,0(sp)
8110cfd4:	dec00304 	addi	sp,sp,12
8110cfd8:	f800283a 	ret

8110cfdc <printf>:
8110cfdc:	defffc04 	addi	sp,sp,-16
8110cfe0:	dfc00015 	stw	ra,0(sp)
8110cfe4:	d9400115 	stw	r5,4(sp)
8110cfe8:	d9800215 	stw	r6,8(sp)
8110cfec:	d9c00315 	stw	r7,12(sp)
8110cff0:	00a044b4 	movhi	r2,33042
8110cff4:	10873404 	addi	r2,r2,7376
8110cff8:	10800017 	ldw	r2,0(r2)
8110cffc:	200b883a 	mov	r5,r4
8110d000:	d9800104 	addi	r6,sp,4
8110d004:	11000217 	ldw	r4,8(r2)
8110d008:	110f4240 	call	8110f424 <__vfprintf_internal>
8110d00c:	dfc00017 	ldw	ra,0(sp)
8110d010:	dec00404 	addi	sp,sp,16
8110d014:	f800283a 	ret

8110d018 <_putchar_r>:
8110d018:	21800217 	ldw	r6,8(r4)
8110d01c:	1113da01 	jmpi	81113da0 <_putc_r>

8110d020 <putchar>:
8110d020:	00a044b4 	movhi	r2,33042
8110d024:	10873404 	addi	r2,r2,7376
8110d028:	200b883a 	mov	r5,r4
8110d02c:	11000017 	ldw	r4,0(r2)
8110d030:	21800217 	ldw	r6,8(r4)
8110d034:	1113da01 	jmpi	81113da0 <_putc_r>

8110d038 <_puts_r>:
8110d038:	defff604 	addi	sp,sp,-40
8110d03c:	dc000715 	stw	r16,28(sp)
8110d040:	2021883a 	mov	r16,r4
8110d044:	2809883a 	mov	r4,r5
8110d048:	dc400815 	stw	r17,32(sp)
8110d04c:	dfc00915 	stw	ra,36(sp)
8110d050:	2823883a 	mov	r17,r5
8110d054:	110d1940 	call	8110d194 <strlen>
8110d058:	10c00044 	addi	r3,r2,1
8110d05c:	d8800115 	stw	r2,4(sp)
8110d060:	00a044b4 	movhi	r2,33042
8110d064:	10bef804 	addi	r2,r2,-1056
8110d068:	d8800215 	stw	r2,8(sp)
8110d06c:	00800044 	movi	r2,1
8110d070:	d8800315 	stw	r2,12(sp)
8110d074:	00800084 	movi	r2,2
8110d078:	dc400015 	stw	r17,0(sp)
8110d07c:	d8c00615 	stw	r3,24(sp)
8110d080:	dec00415 	stw	sp,16(sp)
8110d084:	d8800515 	stw	r2,20(sp)
8110d088:	80000226 	beq	r16,zero,8110d094 <_puts_r+0x5c>
8110d08c:	80800e17 	ldw	r2,56(r16)
8110d090:	10001426 	beq	r2,zero,8110d0e4 <_puts_r+0xac>
8110d094:	81400217 	ldw	r5,8(r16)
8110d098:	2880030b 	ldhu	r2,12(r5)
8110d09c:	10c8000c 	andi	r3,r2,8192
8110d0a0:	1800061e 	bne	r3,zero,8110d0bc <_puts_r+0x84>
8110d0a4:	29001917 	ldw	r4,100(r5)
8110d0a8:	00f7ffc4 	movi	r3,-8193
8110d0ac:	10880014 	ori	r2,r2,8192
8110d0b0:	20c6703a 	and	r3,r4,r3
8110d0b4:	2880030d 	sth	r2,12(r5)
8110d0b8:	28c01915 	stw	r3,100(r5)
8110d0bc:	d9800404 	addi	r6,sp,16
8110d0c0:	8009883a 	mov	r4,r16
8110d0c4:	11119540 	call	81111954 <__sfvwrite_r>
8110d0c8:	1000091e 	bne	r2,zero,8110d0f0 <_puts_r+0xb8>
8110d0cc:	00800284 	movi	r2,10
8110d0d0:	dfc00917 	ldw	ra,36(sp)
8110d0d4:	dc400817 	ldw	r17,32(sp)
8110d0d8:	dc000717 	ldw	r16,28(sp)
8110d0dc:	dec00a04 	addi	sp,sp,40
8110d0e0:	f800283a 	ret
8110d0e4:	8009883a 	mov	r4,r16
8110d0e8:	11114d00 	call	811114d0 <__sinit>
8110d0ec:	003fe906 	br	8110d094 <__reset+0xfb0ed094>
8110d0f0:	00bfffc4 	movi	r2,-1
8110d0f4:	003ff606 	br	8110d0d0 <__reset+0xfb0ed0d0>

8110d0f8 <puts>:
8110d0f8:	00a044b4 	movhi	r2,33042
8110d0fc:	10873404 	addi	r2,r2,7376
8110d100:	200b883a 	mov	r5,r4
8110d104:	11000017 	ldw	r4,0(r2)
8110d108:	110d0381 	jmpi	8110d038 <_puts_r>

8110d10c <__srget_r>:
8110d10c:	defffd04 	addi	sp,sp,-12
8110d110:	dc400115 	stw	r17,4(sp)
8110d114:	dc000015 	stw	r16,0(sp)
8110d118:	dfc00215 	stw	ra,8(sp)
8110d11c:	2023883a 	mov	r17,r4
8110d120:	2821883a 	mov	r16,r5
8110d124:	20000226 	beq	r4,zero,8110d130 <__srget_r+0x24>
8110d128:	20800e17 	ldw	r2,56(r4)
8110d12c:	10001026 	beq	r2,zero,8110d170 <__srget_r+0x64>
8110d130:	800b883a 	mov	r5,r16
8110d134:	8809883a 	mov	r4,r17
8110d138:	11144880 	call	81114488 <__srefill_r>
8110d13c:	10000e1e 	bne	r2,zero,8110d178 <__srget_r+0x6c>
8110d140:	80c00017 	ldw	r3,0(r16)
8110d144:	80800117 	ldw	r2,4(r16)
8110d148:	19000044 	addi	r4,r3,1
8110d14c:	10bfffc4 	addi	r2,r2,-1
8110d150:	80800115 	stw	r2,4(r16)
8110d154:	81000015 	stw	r4,0(r16)
8110d158:	18800003 	ldbu	r2,0(r3)
8110d15c:	dfc00217 	ldw	ra,8(sp)
8110d160:	dc400117 	ldw	r17,4(sp)
8110d164:	dc000017 	ldw	r16,0(sp)
8110d168:	dec00304 	addi	sp,sp,12
8110d16c:	f800283a 	ret
8110d170:	11114d00 	call	811114d0 <__sinit>
8110d174:	003fee06 	br	8110d130 <__reset+0xfb0ed130>
8110d178:	00bfffc4 	movi	r2,-1
8110d17c:	003ff706 	br	8110d15c <__reset+0xfb0ed15c>

8110d180 <__srget>:
8110d180:	00a044b4 	movhi	r2,33042
8110d184:	10873404 	addi	r2,r2,7376
8110d188:	200b883a 	mov	r5,r4
8110d18c:	11000017 	ldw	r4,0(r2)
8110d190:	110d10c1 	jmpi	8110d10c <__srget_r>

8110d194 <strlen>:
8110d194:	208000cc 	andi	r2,r4,3
8110d198:	10002026 	beq	r2,zero,8110d21c <strlen+0x88>
8110d19c:	20800007 	ldb	r2,0(r4)
8110d1a0:	10002026 	beq	r2,zero,8110d224 <strlen+0x90>
8110d1a4:	2005883a 	mov	r2,r4
8110d1a8:	00000206 	br	8110d1b4 <strlen+0x20>
8110d1ac:	10c00007 	ldb	r3,0(r2)
8110d1b0:	18001826 	beq	r3,zero,8110d214 <strlen+0x80>
8110d1b4:	10800044 	addi	r2,r2,1
8110d1b8:	10c000cc 	andi	r3,r2,3
8110d1bc:	183ffb1e 	bne	r3,zero,8110d1ac <__reset+0xfb0ed1ac>
8110d1c0:	10c00017 	ldw	r3,0(r2)
8110d1c4:	01ffbff4 	movhi	r7,65279
8110d1c8:	39ffbfc4 	addi	r7,r7,-257
8110d1cc:	00ca303a 	nor	r5,zero,r3
8110d1d0:	01a02074 	movhi	r6,32897
8110d1d4:	19c7883a 	add	r3,r3,r7
8110d1d8:	31a02004 	addi	r6,r6,-32640
8110d1dc:	1946703a 	and	r3,r3,r5
8110d1e0:	1986703a 	and	r3,r3,r6
8110d1e4:	1800091e 	bne	r3,zero,8110d20c <strlen+0x78>
8110d1e8:	10800104 	addi	r2,r2,4
8110d1ec:	10c00017 	ldw	r3,0(r2)
8110d1f0:	19cb883a 	add	r5,r3,r7
8110d1f4:	00c6303a 	nor	r3,zero,r3
8110d1f8:	28c6703a 	and	r3,r5,r3
8110d1fc:	1986703a 	and	r3,r3,r6
8110d200:	183ff926 	beq	r3,zero,8110d1e8 <__reset+0xfb0ed1e8>
8110d204:	00000106 	br	8110d20c <strlen+0x78>
8110d208:	10800044 	addi	r2,r2,1
8110d20c:	10c00007 	ldb	r3,0(r2)
8110d210:	183ffd1e 	bne	r3,zero,8110d208 <__reset+0xfb0ed208>
8110d214:	1105c83a 	sub	r2,r2,r4
8110d218:	f800283a 	ret
8110d21c:	2005883a 	mov	r2,r4
8110d220:	003fe706 	br	8110d1c0 <__reset+0xfb0ed1c0>
8110d224:	0005883a 	mov	r2,zero
8110d228:	f800283a 	ret

8110d22c <___vfprintf_internal_r>:
8110d22c:	deffb804 	addi	sp,sp,-288
8110d230:	dfc04715 	stw	ra,284(sp)
8110d234:	ddc04515 	stw	r23,276(sp)
8110d238:	dd404315 	stw	r21,268(sp)
8110d23c:	d9002c15 	stw	r4,176(sp)
8110d240:	282f883a 	mov	r23,r5
8110d244:	302b883a 	mov	r21,r6
8110d248:	d9c02d15 	stw	r7,180(sp)
8110d24c:	df004615 	stw	fp,280(sp)
8110d250:	dd804415 	stw	r22,272(sp)
8110d254:	dd004215 	stw	r20,264(sp)
8110d258:	dcc04115 	stw	r19,260(sp)
8110d25c:	dc804015 	stw	r18,256(sp)
8110d260:	dc403f15 	stw	r17,252(sp)
8110d264:	dc003e15 	stw	r16,248(sp)
8110d268:	11120440 	call	81112044 <_localeconv_r>
8110d26c:	10800017 	ldw	r2,0(r2)
8110d270:	1009883a 	mov	r4,r2
8110d274:	d8803415 	stw	r2,208(sp)
8110d278:	110d1940 	call	8110d194 <strlen>
8110d27c:	d8803715 	stw	r2,220(sp)
8110d280:	d8802c17 	ldw	r2,176(sp)
8110d284:	10000226 	beq	r2,zero,8110d290 <___vfprintf_internal_r+0x64>
8110d288:	10800e17 	ldw	r2,56(r2)
8110d28c:	1000f926 	beq	r2,zero,8110d674 <___vfprintf_internal_r+0x448>
8110d290:	b880030b 	ldhu	r2,12(r23)
8110d294:	10c8000c 	andi	r3,r2,8192
8110d298:	1800061e 	bne	r3,zero,8110d2b4 <___vfprintf_internal_r+0x88>
8110d29c:	b9001917 	ldw	r4,100(r23)
8110d2a0:	00f7ffc4 	movi	r3,-8193
8110d2a4:	10880014 	ori	r2,r2,8192
8110d2a8:	20c6703a 	and	r3,r4,r3
8110d2ac:	b880030d 	sth	r2,12(r23)
8110d2b0:	b8c01915 	stw	r3,100(r23)
8110d2b4:	10c0020c 	andi	r3,r2,8
8110d2b8:	1800c126 	beq	r3,zero,8110d5c0 <___vfprintf_internal_r+0x394>
8110d2bc:	b8c00417 	ldw	r3,16(r23)
8110d2c0:	1800bf26 	beq	r3,zero,8110d5c0 <___vfprintf_internal_r+0x394>
8110d2c4:	1080068c 	andi	r2,r2,26
8110d2c8:	00c00284 	movi	r3,10
8110d2cc:	10c0c426 	beq	r2,r3,8110d5e0 <___vfprintf_internal_r+0x3b4>
8110d2d0:	d8c00404 	addi	r3,sp,16
8110d2d4:	052044b4 	movhi	r20,33042
8110d2d8:	d9001e04 	addi	r4,sp,120
8110d2dc:	a53f0984 	addi	r20,r20,-986
8110d2e0:	d8c01e15 	stw	r3,120(sp)
8110d2e4:	d8002015 	stw	zero,128(sp)
8110d2e8:	d8001f15 	stw	zero,124(sp)
8110d2ec:	d8003315 	stw	zero,204(sp)
8110d2f0:	d8003615 	stw	zero,216(sp)
8110d2f4:	d8003815 	stw	zero,224(sp)
8110d2f8:	1811883a 	mov	r8,r3
8110d2fc:	d8003915 	stw	zero,228(sp)
8110d300:	d8003a15 	stw	zero,232(sp)
8110d304:	d8002f15 	stw	zero,188(sp)
8110d308:	d9002815 	stw	r4,160(sp)
8110d30c:	a8800007 	ldb	r2,0(r21)
8110d310:	10027b26 	beq	r2,zero,8110dd00 <___vfprintf_internal_r+0xad4>
8110d314:	00c00944 	movi	r3,37
8110d318:	a821883a 	mov	r16,r21
8110d31c:	10c0021e 	bne	r2,r3,8110d328 <___vfprintf_internal_r+0xfc>
8110d320:	00001406 	br	8110d374 <___vfprintf_internal_r+0x148>
8110d324:	10c00326 	beq	r2,r3,8110d334 <___vfprintf_internal_r+0x108>
8110d328:	84000044 	addi	r16,r16,1
8110d32c:	80800007 	ldb	r2,0(r16)
8110d330:	103ffc1e 	bne	r2,zero,8110d324 <__reset+0xfb0ed324>
8110d334:	8563c83a 	sub	r17,r16,r21
8110d338:	88000e26 	beq	r17,zero,8110d374 <___vfprintf_internal_r+0x148>
8110d33c:	d8c02017 	ldw	r3,128(sp)
8110d340:	d8801f17 	ldw	r2,124(sp)
8110d344:	45400015 	stw	r21,0(r8)
8110d348:	1c47883a 	add	r3,r3,r17
8110d34c:	10800044 	addi	r2,r2,1
8110d350:	d8c02015 	stw	r3,128(sp)
8110d354:	44400115 	stw	r17,4(r8)
8110d358:	d8801f15 	stw	r2,124(sp)
8110d35c:	00c001c4 	movi	r3,7
8110d360:	1880a716 	blt	r3,r2,8110d600 <___vfprintf_internal_r+0x3d4>
8110d364:	42000204 	addi	r8,r8,8
8110d368:	d9402f17 	ldw	r5,188(sp)
8110d36c:	2c4b883a 	add	r5,r5,r17
8110d370:	d9402f15 	stw	r5,188(sp)
8110d374:	80800007 	ldb	r2,0(r16)
8110d378:	1000a826 	beq	r2,zero,8110d61c <___vfprintf_internal_r+0x3f0>
8110d37c:	84400047 	ldb	r17,1(r16)
8110d380:	00bfffc4 	movi	r2,-1
8110d384:	85400044 	addi	r21,r16,1
8110d388:	d8002785 	stb	zero,158(sp)
8110d38c:	0007883a 	mov	r3,zero
8110d390:	000f883a 	mov	r7,zero
8110d394:	d8802915 	stw	r2,164(sp)
8110d398:	d8003115 	stw	zero,196(sp)
8110d39c:	0025883a 	mov	r18,zero
8110d3a0:	01401604 	movi	r5,88
8110d3a4:	01800244 	movi	r6,9
8110d3a8:	02800a84 	movi	r10,42
8110d3ac:	02401b04 	movi	r9,108
8110d3b0:	ad400044 	addi	r21,r21,1
8110d3b4:	88bff804 	addi	r2,r17,-32
8110d3b8:	28830436 	bltu	r5,r2,8110dfcc <___vfprintf_internal_r+0xda0>
8110d3bc:	100490ba 	slli	r2,r2,2
8110d3c0:	01204474 	movhi	r4,33041
8110d3c4:	2134f504 	addi	r4,r4,-11308
8110d3c8:	1105883a 	add	r2,r2,r4
8110d3cc:	10800017 	ldw	r2,0(r2)
8110d3d0:	1000683a 	jmp	r2
8110d3d4:	8110deec 	andhi	r4,r16,17275
8110d3d8:	8110dfcc 	andi	r4,r16,17279
8110d3dc:	8110dfcc 	andi	r4,r16,17279
8110d3e0:	8110df0c 	andi	r4,r16,17276
8110d3e4:	8110dfcc 	andi	r4,r16,17279
8110d3e8:	8110dfcc 	andi	r4,r16,17279
8110d3ec:	8110dfcc 	andi	r4,r16,17279
8110d3f0:	8110dfcc 	andi	r4,r16,17279
8110d3f4:	8110dfcc 	andi	r4,r16,17279
8110d3f8:	8110dfcc 	andi	r4,r16,17279
8110d3fc:	8110d680 	call	88110d68 <__reset+0x20f0d68>
8110d400:	8110de28 	cmpgeui	r4,r16,17272
8110d404:	8110dfcc 	andi	r4,r16,17279
8110d408:	8110d548 	cmpgei	r4,r16,17237
8110d40c:	8110d6a8 	cmpgeui	r4,r16,17242
8110d410:	8110dfcc 	andi	r4,r16,17279
8110d414:	8110d6e8 	cmpgeui	r4,r16,17243
8110d418:	8110d6f4 	orhi	r4,r16,17243
8110d41c:	8110d6f4 	orhi	r4,r16,17243
8110d420:	8110d6f4 	orhi	r4,r16,17243
8110d424:	8110d6f4 	orhi	r4,r16,17243
8110d428:	8110d6f4 	orhi	r4,r16,17243
8110d42c:	8110d6f4 	orhi	r4,r16,17243
8110d430:	8110d6f4 	orhi	r4,r16,17243
8110d434:	8110d6f4 	orhi	r4,r16,17243
8110d438:	8110d6f4 	orhi	r4,r16,17243
8110d43c:	8110dfcc 	andi	r4,r16,17279
8110d440:	8110dfcc 	andi	r4,r16,17279
8110d444:	8110dfcc 	andi	r4,r16,17279
8110d448:	8110dfcc 	andi	r4,r16,17279
8110d44c:	8110dfcc 	andi	r4,r16,17279
8110d450:	8110dfcc 	andi	r4,r16,17279
8110d454:	8110dfcc 	andi	r4,r16,17279
8110d458:	8110dfcc 	andi	r4,r16,17279
8110d45c:	8110dfcc 	andi	r4,r16,17279
8110d460:	8110dfcc 	andi	r4,r16,17279
8110d464:	8110d728 	cmpgeui	r4,r16,17244
8110d468:	8110d7e4 	muli	r4,r16,17247
8110d46c:	8110dfcc 	andi	r4,r16,17279
8110d470:	8110d7e4 	muli	r4,r16,17247
8110d474:	8110dfcc 	andi	r4,r16,17279
8110d478:	8110dfcc 	andi	r4,r16,17279
8110d47c:	8110dfcc 	andi	r4,r16,17279
8110d480:	8110dfcc 	andi	r4,r16,17279
8110d484:	8110d884 	addi	r4,r16,17250
8110d488:	8110dfcc 	andi	r4,r16,17279
8110d48c:	8110dfcc 	andi	r4,r16,17279
8110d490:	8110d890 	cmplti	r4,r16,17250
8110d494:	8110dfcc 	andi	r4,r16,17279
8110d498:	8110dfcc 	andi	r4,r16,17279
8110d49c:	8110dfcc 	andi	r4,r16,17279
8110d4a0:	8110dfcc 	andi	r4,r16,17279
8110d4a4:	8110dfcc 	andi	r4,r16,17279
8110d4a8:	8110dd08 	cmpgei	r4,r16,17268
8110d4ac:	8110dfcc 	andi	r4,r16,17279
8110d4b0:	8110dfcc 	andi	r4,r16,17279
8110d4b4:	8110dd68 	cmpgeui	r4,r16,17269
8110d4b8:	8110dfcc 	andi	r4,r16,17279
8110d4bc:	8110dfcc 	andi	r4,r16,17279
8110d4c0:	8110dfcc 	andi	r4,r16,17279
8110d4c4:	8110dfcc 	andi	r4,r16,17279
8110d4c8:	8110dfcc 	andi	r4,r16,17279
8110d4cc:	8110dfcc 	andi	r4,r16,17279
8110d4d0:	8110dfcc 	andi	r4,r16,17279
8110d4d4:	8110dfcc 	andi	r4,r16,17279
8110d4d8:	8110dfcc 	andi	r4,r16,17279
8110d4dc:	8110dfcc 	andi	r4,r16,17279
8110d4e0:	8110df78 	rdprs	r4,r16,17277
8110d4e4:	8110df18 	cmpnei	r4,r16,17276
8110d4e8:	8110d7e4 	muli	r4,r16,17247
8110d4ec:	8110d7e4 	muli	r4,r16,17247
8110d4f0:	8110d7e4 	muli	r4,r16,17247
8110d4f4:	8110df28 	cmpgeui	r4,r16,17276
8110d4f8:	8110df18 	cmpnei	r4,r16,17276
8110d4fc:	8110dfcc 	andi	r4,r16,17279
8110d500:	8110dfcc 	andi	r4,r16,17279
8110d504:	8110df34 	orhi	r4,r16,17276
8110d508:	8110dfcc 	andi	r4,r16,17279
8110d50c:	8110df44 	addi	r4,r16,17277
8110d510:	8110de18 	cmpnei	r4,r16,17272
8110d514:	8110d554 	ori	r4,r16,17237
8110d518:	8110de38 	rdprs	r4,r16,17272
8110d51c:	8110dfcc 	andi	r4,r16,17279
8110d520:	8110de44 	addi	r4,r16,17273
8110d524:	8110dfcc 	andi	r4,r16,17279
8110d528:	8110dea0 	cmpeqi	r4,r16,17274
8110d52c:	8110dfcc 	andi	r4,r16,17279
8110d530:	8110dfcc 	andi	r4,r16,17279
8110d534:	8110deb0 	cmpltui	r4,r16,17274
8110d538:	d9003117 	ldw	r4,196(sp)
8110d53c:	d8802d15 	stw	r2,180(sp)
8110d540:	0109c83a 	sub	r4,zero,r4
8110d544:	d9003115 	stw	r4,196(sp)
8110d548:	94800114 	ori	r18,r18,4
8110d54c:	ac400007 	ldb	r17,0(r21)
8110d550:	003f9706 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110d554:	00800c04 	movi	r2,48
8110d558:	d9002d17 	ldw	r4,180(sp)
8110d55c:	d9402917 	ldw	r5,164(sp)
8110d560:	d8802705 	stb	r2,156(sp)
8110d564:	00801e04 	movi	r2,120
8110d568:	d8802745 	stb	r2,157(sp)
8110d56c:	d8002785 	stb	zero,158(sp)
8110d570:	20c00104 	addi	r3,r4,4
8110d574:	24c00017 	ldw	r19,0(r4)
8110d578:	002d883a 	mov	r22,zero
8110d57c:	90800094 	ori	r2,r18,2
8110d580:	28029a16 	blt	r5,zero,8110dfec <___vfprintf_internal_r+0xdc0>
8110d584:	00bfdfc4 	movi	r2,-129
8110d588:	90a4703a 	and	r18,r18,r2
8110d58c:	d8c02d15 	stw	r3,180(sp)
8110d590:	94800094 	ori	r18,r18,2
8110d594:	9802871e 	bne	r19,zero,8110dfb4 <___vfprintf_internal_r+0xd88>
8110d598:	00a044b4 	movhi	r2,33042
8110d59c:	10bf0204 	addi	r2,r2,-1016
8110d5a0:	d8803915 	stw	r2,228(sp)
8110d5a4:	04401e04 	movi	r17,120
8110d5a8:	d8802917 	ldw	r2,164(sp)
8110d5ac:	0039883a 	mov	fp,zero
8110d5b0:	1001e926 	beq	r2,zero,8110dd58 <___vfprintf_internal_r+0xb2c>
8110d5b4:	0027883a 	mov	r19,zero
8110d5b8:	002d883a 	mov	r22,zero
8110d5bc:	00020506 	br	8110ddd4 <___vfprintf_internal_r+0xba8>
8110d5c0:	d9002c17 	ldw	r4,176(sp)
8110d5c4:	b80b883a 	mov	r5,r23
8110d5c8:	110f4fc0 	call	8110f4fc <__swsetup_r>
8110d5cc:	1005ac1e 	bne	r2,zero,8110ec80 <___vfprintf_internal_r+0x1a54>
8110d5d0:	b880030b 	ldhu	r2,12(r23)
8110d5d4:	00c00284 	movi	r3,10
8110d5d8:	1080068c 	andi	r2,r2,26
8110d5dc:	10ff3c1e 	bne	r2,r3,8110d2d0 <__reset+0xfb0ed2d0>
8110d5e0:	b880038f 	ldh	r2,14(r23)
8110d5e4:	103f3a16 	blt	r2,zero,8110d2d0 <__reset+0xfb0ed2d0>
8110d5e8:	d9c02d17 	ldw	r7,180(sp)
8110d5ec:	d9002c17 	ldw	r4,176(sp)
8110d5f0:	a80d883a 	mov	r6,r21
8110d5f4:	b80b883a 	mov	r5,r23
8110d5f8:	110f4400 	call	8110f440 <__sbprintf>
8110d5fc:	00001106 	br	8110d644 <___vfprintf_internal_r+0x418>
8110d600:	d9002c17 	ldw	r4,176(sp)
8110d604:	d9801e04 	addi	r6,sp,120
8110d608:	b80b883a 	mov	r5,r23
8110d60c:	1114a380 	call	81114a38 <__sprint_r>
8110d610:	1000081e 	bne	r2,zero,8110d634 <___vfprintf_internal_r+0x408>
8110d614:	da000404 	addi	r8,sp,16
8110d618:	003f5306 	br	8110d368 <__reset+0xfb0ed368>
8110d61c:	d8802017 	ldw	r2,128(sp)
8110d620:	10000426 	beq	r2,zero,8110d634 <___vfprintf_internal_r+0x408>
8110d624:	d9002c17 	ldw	r4,176(sp)
8110d628:	d9801e04 	addi	r6,sp,120
8110d62c:	b80b883a 	mov	r5,r23
8110d630:	1114a380 	call	81114a38 <__sprint_r>
8110d634:	b880030b 	ldhu	r2,12(r23)
8110d638:	1080100c 	andi	r2,r2,64
8110d63c:	1005901e 	bne	r2,zero,8110ec80 <___vfprintf_internal_r+0x1a54>
8110d640:	d8802f17 	ldw	r2,188(sp)
8110d644:	dfc04717 	ldw	ra,284(sp)
8110d648:	df004617 	ldw	fp,280(sp)
8110d64c:	ddc04517 	ldw	r23,276(sp)
8110d650:	dd804417 	ldw	r22,272(sp)
8110d654:	dd404317 	ldw	r21,268(sp)
8110d658:	dd004217 	ldw	r20,264(sp)
8110d65c:	dcc04117 	ldw	r19,260(sp)
8110d660:	dc804017 	ldw	r18,256(sp)
8110d664:	dc403f17 	ldw	r17,252(sp)
8110d668:	dc003e17 	ldw	r16,248(sp)
8110d66c:	dec04804 	addi	sp,sp,288
8110d670:	f800283a 	ret
8110d674:	d9002c17 	ldw	r4,176(sp)
8110d678:	11114d00 	call	811114d0 <__sinit>
8110d67c:	003f0406 	br	8110d290 <__reset+0xfb0ed290>
8110d680:	d8802d17 	ldw	r2,180(sp)
8110d684:	d9002d17 	ldw	r4,180(sp)
8110d688:	10800017 	ldw	r2,0(r2)
8110d68c:	d8803115 	stw	r2,196(sp)
8110d690:	20800104 	addi	r2,r4,4
8110d694:	d9003117 	ldw	r4,196(sp)
8110d698:	203fa716 	blt	r4,zero,8110d538 <__reset+0xfb0ed538>
8110d69c:	d8802d15 	stw	r2,180(sp)
8110d6a0:	ac400007 	ldb	r17,0(r21)
8110d6a4:	003f4206 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110d6a8:	ac400007 	ldb	r17,0(r21)
8110d6ac:	aac00044 	addi	r11,r21,1
8110d6b0:	8a872826 	beq	r17,r10,8110f354 <___vfprintf_internal_r+0x2128>
8110d6b4:	88bff404 	addi	r2,r17,-48
8110d6b8:	0009883a 	mov	r4,zero
8110d6bc:	30867d36 	bltu	r6,r2,8110f0b4 <___vfprintf_internal_r+0x1e88>
8110d6c0:	5c400007 	ldb	r17,0(r11)
8110d6c4:	210002a4 	muli	r4,r4,10
8110d6c8:	5d400044 	addi	r21,r11,1
8110d6cc:	a817883a 	mov	r11,r21
8110d6d0:	2089883a 	add	r4,r4,r2
8110d6d4:	88bff404 	addi	r2,r17,-48
8110d6d8:	30bff92e 	bgeu	r6,r2,8110d6c0 <__reset+0xfb0ed6c0>
8110d6dc:	2005c916 	blt	r4,zero,8110ee04 <___vfprintf_internal_r+0x1bd8>
8110d6e0:	d9002915 	stw	r4,164(sp)
8110d6e4:	003f3306 	br	8110d3b4 <__reset+0xfb0ed3b4>
8110d6e8:	94802014 	ori	r18,r18,128
8110d6ec:	ac400007 	ldb	r17,0(r21)
8110d6f0:	003f2f06 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110d6f4:	a809883a 	mov	r4,r21
8110d6f8:	d8003115 	stw	zero,196(sp)
8110d6fc:	88bff404 	addi	r2,r17,-48
8110d700:	0017883a 	mov	r11,zero
8110d704:	24400007 	ldb	r17,0(r4)
8110d708:	5ac002a4 	muli	r11,r11,10
8110d70c:	ad400044 	addi	r21,r21,1
8110d710:	a809883a 	mov	r4,r21
8110d714:	12d7883a 	add	r11,r2,r11
8110d718:	88bff404 	addi	r2,r17,-48
8110d71c:	30bff92e 	bgeu	r6,r2,8110d704 <__reset+0xfb0ed704>
8110d720:	dac03115 	stw	r11,196(sp)
8110d724:	003f2306 	br	8110d3b4 <__reset+0xfb0ed3b4>
8110d728:	18c03fcc 	andi	r3,r3,255
8110d72c:	18072b1e 	bne	r3,zero,8110f3dc <___vfprintf_internal_r+0x21b0>
8110d730:	94800414 	ori	r18,r18,16
8110d734:	9080080c 	andi	r2,r18,32
8110d738:	10037b26 	beq	r2,zero,8110e528 <___vfprintf_internal_r+0x12fc>
8110d73c:	d9402d17 	ldw	r5,180(sp)
8110d740:	28800117 	ldw	r2,4(r5)
8110d744:	2cc00017 	ldw	r19,0(r5)
8110d748:	29400204 	addi	r5,r5,8
8110d74c:	d9402d15 	stw	r5,180(sp)
8110d750:	102d883a 	mov	r22,r2
8110d754:	10044b16 	blt	r2,zero,8110e884 <___vfprintf_internal_r+0x1658>
8110d758:	d9402917 	ldw	r5,164(sp)
8110d75c:	df002783 	ldbu	fp,158(sp)
8110d760:	2803bc16 	blt	r5,zero,8110e654 <___vfprintf_internal_r+0x1428>
8110d764:	00ffdfc4 	movi	r3,-129
8110d768:	9d84b03a 	or	r2,r19,r22
8110d76c:	90e4703a 	and	r18,r18,r3
8110d770:	10017726 	beq	r2,zero,8110dd50 <___vfprintf_internal_r+0xb24>
8110d774:	b0038326 	beq	r22,zero,8110e584 <___vfprintf_internal_r+0x1358>
8110d778:	dc402a15 	stw	r17,168(sp)
8110d77c:	dc001e04 	addi	r16,sp,120
8110d780:	b023883a 	mov	r17,r22
8110d784:	402d883a 	mov	r22,r8
8110d788:	9809883a 	mov	r4,r19
8110d78c:	880b883a 	mov	r5,r17
8110d790:	01800284 	movi	r6,10
8110d794:	000f883a 	mov	r7,zero
8110d798:	1116e300 	call	81116e30 <__umoddi3>
8110d79c:	10800c04 	addi	r2,r2,48
8110d7a0:	843fffc4 	addi	r16,r16,-1
8110d7a4:	9809883a 	mov	r4,r19
8110d7a8:	880b883a 	mov	r5,r17
8110d7ac:	80800005 	stb	r2,0(r16)
8110d7b0:	01800284 	movi	r6,10
8110d7b4:	000f883a 	mov	r7,zero
8110d7b8:	11168b80 	call	811168b8 <__udivdi3>
8110d7bc:	1027883a 	mov	r19,r2
8110d7c0:	10c4b03a 	or	r2,r2,r3
8110d7c4:	1823883a 	mov	r17,r3
8110d7c8:	103fef1e 	bne	r2,zero,8110d788 <__reset+0xfb0ed788>
8110d7cc:	d8c02817 	ldw	r3,160(sp)
8110d7d0:	dc402a17 	ldw	r17,168(sp)
8110d7d4:	b011883a 	mov	r8,r22
8110d7d8:	1c07c83a 	sub	r3,r3,r16
8110d7dc:	d8c02e15 	stw	r3,184(sp)
8110d7e0:	00005906 	br	8110d948 <___vfprintf_internal_r+0x71c>
8110d7e4:	18c03fcc 	andi	r3,r3,255
8110d7e8:	1806fa1e 	bne	r3,zero,8110f3d4 <___vfprintf_internal_r+0x21a8>
8110d7ec:	9080020c 	andi	r2,r18,8
8110d7f0:	10048a26 	beq	r2,zero,8110ea1c <___vfprintf_internal_r+0x17f0>
8110d7f4:	d8c02d17 	ldw	r3,180(sp)
8110d7f8:	d9002d17 	ldw	r4,180(sp)
8110d7fc:	d9402d17 	ldw	r5,180(sp)
8110d800:	18c00017 	ldw	r3,0(r3)
8110d804:	21000117 	ldw	r4,4(r4)
8110d808:	29400204 	addi	r5,r5,8
8110d80c:	d8c03615 	stw	r3,216(sp)
8110d810:	d9003815 	stw	r4,224(sp)
8110d814:	d9402d15 	stw	r5,180(sp)
8110d818:	d9003617 	ldw	r4,216(sp)
8110d81c:	d9403817 	ldw	r5,224(sp)
8110d820:	da003d15 	stw	r8,244(sp)
8110d824:	04000044 	movi	r16,1
8110d828:	111465c0 	call	8111465c <__fpclassifyd>
8110d82c:	da003d17 	ldw	r8,244(sp)
8110d830:	14041f1e 	bne	r2,r16,8110e8b0 <___vfprintf_internal_r+0x1684>
8110d834:	d9003617 	ldw	r4,216(sp)
8110d838:	d9403817 	ldw	r5,224(sp)
8110d83c:	000d883a 	mov	r6,zero
8110d840:	000f883a 	mov	r7,zero
8110d844:	11188140 	call	81118814 <__ledf2>
8110d848:	da003d17 	ldw	r8,244(sp)
8110d84c:	1005be16 	blt	r2,zero,8110ef48 <___vfprintf_internal_r+0x1d1c>
8110d850:	df002783 	ldbu	fp,158(sp)
8110d854:	008011c4 	movi	r2,71
8110d858:	1445330e 	bge	r2,r17,8110ed28 <___vfprintf_internal_r+0x1afc>
8110d85c:	042044b4 	movhi	r16,33042
8110d860:	843efa04 	addi	r16,r16,-1048
8110d864:	00c000c4 	movi	r3,3
8110d868:	00bfdfc4 	movi	r2,-129
8110d86c:	d8c02a15 	stw	r3,168(sp)
8110d870:	90a4703a 	and	r18,r18,r2
8110d874:	d8c02e15 	stw	r3,184(sp)
8110d878:	d8002915 	stw	zero,164(sp)
8110d87c:	d8003215 	stw	zero,200(sp)
8110d880:	00003706 	br	8110d960 <___vfprintf_internal_r+0x734>
8110d884:	94800214 	ori	r18,r18,8
8110d888:	ac400007 	ldb	r17,0(r21)
8110d88c:	003ec806 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110d890:	18c03fcc 	andi	r3,r3,255
8110d894:	1806db1e 	bne	r3,zero,8110f404 <___vfprintf_internal_r+0x21d8>
8110d898:	94800414 	ori	r18,r18,16
8110d89c:	9080080c 	andi	r2,r18,32
8110d8a0:	1002d826 	beq	r2,zero,8110e404 <___vfprintf_internal_r+0x11d8>
8110d8a4:	d9402d17 	ldw	r5,180(sp)
8110d8a8:	d8c02917 	ldw	r3,164(sp)
8110d8ac:	d8002785 	stb	zero,158(sp)
8110d8b0:	28800204 	addi	r2,r5,8
8110d8b4:	2cc00017 	ldw	r19,0(r5)
8110d8b8:	2d800117 	ldw	r22,4(r5)
8110d8bc:	18048f16 	blt	r3,zero,8110eafc <___vfprintf_internal_r+0x18d0>
8110d8c0:	013fdfc4 	movi	r4,-129
8110d8c4:	9d86b03a 	or	r3,r19,r22
8110d8c8:	d8802d15 	stw	r2,180(sp)
8110d8cc:	9124703a 	and	r18,r18,r4
8110d8d0:	1802d91e 	bne	r3,zero,8110e438 <___vfprintf_internal_r+0x120c>
8110d8d4:	d8c02917 	ldw	r3,164(sp)
8110d8d8:	0039883a 	mov	fp,zero
8110d8dc:	1805c326 	beq	r3,zero,8110efec <___vfprintf_internal_r+0x1dc0>
8110d8e0:	0027883a 	mov	r19,zero
8110d8e4:	002d883a 	mov	r22,zero
8110d8e8:	dc001e04 	addi	r16,sp,120
8110d8ec:	9806d0fa 	srli	r3,r19,3
8110d8f0:	b008977a 	slli	r4,r22,29
8110d8f4:	b02cd0fa 	srli	r22,r22,3
8110d8f8:	9cc001cc 	andi	r19,r19,7
8110d8fc:	98800c04 	addi	r2,r19,48
8110d900:	843fffc4 	addi	r16,r16,-1
8110d904:	20e6b03a 	or	r19,r4,r3
8110d908:	80800005 	stb	r2,0(r16)
8110d90c:	9d86b03a 	or	r3,r19,r22
8110d910:	183ff61e 	bne	r3,zero,8110d8ec <__reset+0xfb0ed8ec>
8110d914:	90c0004c 	andi	r3,r18,1
8110d918:	18013b26 	beq	r3,zero,8110de08 <___vfprintf_internal_r+0xbdc>
8110d91c:	10803fcc 	andi	r2,r2,255
8110d920:	1080201c 	xori	r2,r2,128
8110d924:	10bfe004 	addi	r2,r2,-128
8110d928:	00c00c04 	movi	r3,48
8110d92c:	10c13626 	beq	r2,r3,8110de08 <___vfprintf_internal_r+0xbdc>
8110d930:	80ffffc5 	stb	r3,-1(r16)
8110d934:	d8c02817 	ldw	r3,160(sp)
8110d938:	80bfffc4 	addi	r2,r16,-1
8110d93c:	1021883a 	mov	r16,r2
8110d940:	1887c83a 	sub	r3,r3,r2
8110d944:	d8c02e15 	stw	r3,184(sp)
8110d948:	d8802e17 	ldw	r2,184(sp)
8110d94c:	d9002917 	ldw	r4,164(sp)
8110d950:	1100010e 	bge	r2,r4,8110d958 <___vfprintf_internal_r+0x72c>
8110d954:	2005883a 	mov	r2,r4
8110d958:	d8802a15 	stw	r2,168(sp)
8110d95c:	d8003215 	stw	zero,200(sp)
8110d960:	e7003fcc 	andi	fp,fp,255
8110d964:	e700201c 	xori	fp,fp,128
8110d968:	e73fe004 	addi	fp,fp,-128
8110d96c:	e0000326 	beq	fp,zero,8110d97c <___vfprintf_internal_r+0x750>
8110d970:	d8c02a17 	ldw	r3,168(sp)
8110d974:	18c00044 	addi	r3,r3,1
8110d978:	d8c02a15 	stw	r3,168(sp)
8110d97c:	90c0008c 	andi	r3,r18,2
8110d980:	d8c02b15 	stw	r3,172(sp)
8110d984:	18000326 	beq	r3,zero,8110d994 <___vfprintf_internal_r+0x768>
8110d988:	d8c02a17 	ldw	r3,168(sp)
8110d98c:	18c00084 	addi	r3,r3,2
8110d990:	d8c02a15 	stw	r3,168(sp)
8110d994:	90c0210c 	andi	r3,r18,132
8110d998:	d8c03015 	stw	r3,192(sp)
8110d99c:	1801a31e 	bne	r3,zero,8110e02c <___vfprintf_internal_r+0xe00>
8110d9a0:	d9003117 	ldw	r4,196(sp)
8110d9a4:	d8c02a17 	ldw	r3,168(sp)
8110d9a8:	20e7c83a 	sub	r19,r4,r3
8110d9ac:	04c19f0e 	bge	zero,r19,8110e02c <___vfprintf_internal_r+0xe00>
8110d9b0:	02400404 	movi	r9,16
8110d9b4:	d8c02017 	ldw	r3,128(sp)
8110d9b8:	d8801f17 	ldw	r2,124(sp)
8110d9bc:	4cc50d0e 	bge	r9,r19,8110edf4 <___vfprintf_internal_r+0x1bc8>
8110d9c0:	016044b4 	movhi	r5,33042
8110d9c4:	297f0d84 	addi	r5,r5,-970
8110d9c8:	dc403b15 	stw	r17,236(sp)
8110d9cc:	d9403515 	stw	r5,212(sp)
8110d9d0:	9823883a 	mov	r17,r19
8110d9d4:	482d883a 	mov	r22,r9
8110d9d8:	9027883a 	mov	r19,r18
8110d9dc:	070001c4 	movi	fp,7
8110d9e0:	8025883a 	mov	r18,r16
8110d9e4:	dc002c17 	ldw	r16,176(sp)
8110d9e8:	00000306 	br	8110d9f8 <___vfprintf_internal_r+0x7cc>
8110d9ec:	8c7ffc04 	addi	r17,r17,-16
8110d9f0:	42000204 	addi	r8,r8,8
8110d9f4:	b440130e 	bge	r22,r17,8110da44 <___vfprintf_internal_r+0x818>
8110d9f8:	012044b4 	movhi	r4,33042
8110d9fc:	18c00404 	addi	r3,r3,16
8110da00:	10800044 	addi	r2,r2,1
8110da04:	213f0d84 	addi	r4,r4,-970
8110da08:	41000015 	stw	r4,0(r8)
8110da0c:	45800115 	stw	r22,4(r8)
8110da10:	d8c02015 	stw	r3,128(sp)
8110da14:	d8801f15 	stw	r2,124(sp)
8110da18:	e0bff40e 	bge	fp,r2,8110d9ec <__reset+0xfb0ed9ec>
8110da1c:	d9801e04 	addi	r6,sp,120
8110da20:	b80b883a 	mov	r5,r23
8110da24:	8009883a 	mov	r4,r16
8110da28:	1114a380 	call	81114a38 <__sprint_r>
8110da2c:	103f011e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110da30:	8c7ffc04 	addi	r17,r17,-16
8110da34:	d8c02017 	ldw	r3,128(sp)
8110da38:	d8801f17 	ldw	r2,124(sp)
8110da3c:	da000404 	addi	r8,sp,16
8110da40:	b47fed16 	blt	r22,r17,8110d9f8 <__reset+0xfb0ed9f8>
8110da44:	9021883a 	mov	r16,r18
8110da48:	9825883a 	mov	r18,r19
8110da4c:	8827883a 	mov	r19,r17
8110da50:	dc403b17 	ldw	r17,236(sp)
8110da54:	d9403517 	ldw	r5,212(sp)
8110da58:	98c7883a 	add	r3,r19,r3
8110da5c:	10800044 	addi	r2,r2,1
8110da60:	41400015 	stw	r5,0(r8)
8110da64:	44c00115 	stw	r19,4(r8)
8110da68:	d8c02015 	stw	r3,128(sp)
8110da6c:	d8801f15 	stw	r2,124(sp)
8110da70:	010001c4 	movi	r4,7
8110da74:	2082a316 	blt	r4,r2,8110e504 <___vfprintf_internal_r+0x12d8>
8110da78:	df002787 	ldb	fp,158(sp)
8110da7c:	42000204 	addi	r8,r8,8
8110da80:	e0000c26 	beq	fp,zero,8110dab4 <___vfprintf_internal_r+0x888>
8110da84:	d8801f17 	ldw	r2,124(sp)
8110da88:	d9002784 	addi	r4,sp,158
8110da8c:	18c00044 	addi	r3,r3,1
8110da90:	10800044 	addi	r2,r2,1
8110da94:	41000015 	stw	r4,0(r8)
8110da98:	01000044 	movi	r4,1
8110da9c:	41000115 	stw	r4,4(r8)
8110daa0:	d8c02015 	stw	r3,128(sp)
8110daa4:	d8801f15 	stw	r2,124(sp)
8110daa8:	010001c4 	movi	r4,7
8110daac:	20823c16 	blt	r4,r2,8110e3a0 <___vfprintf_internal_r+0x1174>
8110dab0:	42000204 	addi	r8,r8,8
8110dab4:	d8802b17 	ldw	r2,172(sp)
8110dab8:	10000c26 	beq	r2,zero,8110daec <___vfprintf_internal_r+0x8c0>
8110dabc:	d8801f17 	ldw	r2,124(sp)
8110dac0:	d9002704 	addi	r4,sp,156
8110dac4:	18c00084 	addi	r3,r3,2
8110dac8:	10800044 	addi	r2,r2,1
8110dacc:	41000015 	stw	r4,0(r8)
8110dad0:	01000084 	movi	r4,2
8110dad4:	41000115 	stw	r4,4(r8)
8110dad8:	d8c02015 	stw	r3,128(sp)
8110dadc:	d8801f15 	stw	r2,124(sp)
8110dae0:	010001c4 	movi	r4,7
8110dae4:	20823616 	blt	r4,r2,8110e3c0 <___vfprintf_internal_r+0x1194>
8110dae8:	42000204 	addi	r8,r8,8
8110daec:	d9003017 	ldw	r4,192(sp)
8110daf0:	00802004 	movi	r2,128
8110daf4:	20819926 	beq	r4,r2,8110e15c <___vfprintf_internal_r+0xf30>
8110daf8:	d9402917 	ldw	r5,164(sp)
8110dafc:	d8802e17 	ldw	r2,184(sp)
8110db00:	28adc83a 	sub	r22,r5,r2
8110db04:	0580310e 	bge	zero,r22,8110dbcc <___vfprintf_internal_r+0x9a0>
8110db08:	07000404 	movi	fp,16
8110db0c:	d8801f17 	ldw	r2,124(sp)
8110db10:	e584140e 	bge	fp,r22,8110eb64 <___vfprintf_internal_r+0x1938>
8110db14:	016044b4 	movhi	r5,33042
8110db18:	297f0984 	addi	r5,r5,-986
8110db1c:	dc402915 	stw	r17,164(sp)
8110db20:	d9402b15 	stw	r5,172(sp)
8110db24:	b023883a 	mov	r17,r22
8110db28:	04c001c4 	movi	r19,7
8110db2c:	a82d883a 	mov	r22,r21
8110db30:	902b883a 	mov	r21,r18
8110db34:	8025883a 	mov	r18,r16
8110db38:	dc002c17 	ldw	r16,176(sp)
8110db3c:	00000306 	br	8110db4c <___vfprintf_internal_r+0x920>
8110db40:	8c7ffc04 	addi	r17,r17,-16
8110db44:	42000204 	addi	r8,r8,8
8110db48:	e440110e 	bge	fp,r17,8110db90 <___vfprintf_internal_r+0x964>
8110db4c:	18c00404 	addi	r3,r3,16
8110db50:	10800044 	addi	r2,r2,1
8110db54:	45000015 	stw	r20,0(r8)
8110db58:	47000115 	stw	fp,4(r8)
8110db5c:	d8c02015 	stw	r3,128(sp)
8110db60:	d8801f15 	stw	r2,124(sp)
8110db64:	98bff60e 	bge	r19,r2,8110db40 <__reset+0xfb0edb40>
8110db68:	d9801e04 	addi	r6,sp,120
8110db6c:	b80b883a 	mov	r5,r23
8110db70:	8009883a 	mov	r4,r16
8110db74:	1114a380 	call	81114a38 <__sprint_r>
8110db78:	103eae1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110db7c:	8c7ffc04 	addi	r17,r17,-16
8110db80:	d8c02017 	ldw	r3,128(sp)
8110db84:	d8801f17 	ldw	r2,124(sp)
8110db88:	da000404 	addi	r8,sp,16
8110db8c:	e47fef16 	blt	fp,r17,8110db4c <__reset+0xfb0edb4c>
8110db90:	9021883a 	mov	r16,r18
8110db94:	a825883a 	mov	r18,r21
8110db98:	b02b883a 	mov	r21,r22
8110db9c:	882d883a 	mov	r22,r17
8110dba0:	dc402917 	ldw	r17,164(sp)
8110dba4:	d9002b17 	ldw	r4,172(sp)
8110dba8:	1d87883a 	add	r3,r3,r22
8110dbac:	10800044 	addi	r2,r2,1
8110dbb0:	41000015 	stw	r4,0(r8)
8110dbb4:	45800115 	stw	r22,4(r8)
8110dbb8:	d8c02015 	stw	r3,128(sp)
8110dbbc:	d8801f15 	stw	r2,124(sp)
8110dbc0:	010001c4 	movi	r4,7
8110dbc4:	2081ee16 	blt	r4,r2,8110e380 <___vfprintf_internal_r+0x1154>
8110dbc8:	42000204 	addi	r8,r8,8
8110dbcc:	9080400c 	andi	r2,r18,256
8110dbd0:	1001181e 	bne	r2,zero,8110e034 <___vfprintf_internal_r+0xe08>
8110dbd4:	d9402e17 	ldw	r5,184(sp)
8110dbd8:	d8801f17 	ldw	r2,124(sp)
8110dbdc:	44000015 	stw	r16,0(r8)
8110dbe0:	1947883a 	add	r3,r3,r5
8110dbe4:	10800044 	addi	r2,r2,1
8110dbe8:	41400115 	stw	r5,4(r8)
8110dbec:	d8c02015 	stw	r3,128(sp)
8110dbf0:	d8801f15 	stw	r2,124(sp)
8110dbf4:	010001c4 	movi	r4,7
8110dbf8:	2081d316 	blt	r4,r2,8110e348 <___vfprintf_internal_r+0x111c>
8110dbfc:	42000204 	addi	r8,r8,8
8110dc00:	9480010c 	andi	r18,r18,4
8110dc04:	90003226 	beq	r18,zero,8110dcd0 <___vfprintf_internal_r+0xaa4>
8110dc08:	d9403117 	ldw	r5,196(sp)
8110dc0c:	d8802a17 	ldw	r2,168(sp)
8110dc10:	28a1c83a 	sub	r16,r5,r2
8110dc14:	04002e0e 	bge	zero,r16,8110dcd0 <___vfprintf_internal_r+0xaa4>
8110dc18:	04400404 	movi	r17,16
8110dc1c:	d8801f17 	ldw	r2,124(sp)
8110dc20:	8c04a20e 	bge	r17,r16,8110eeac <___vfprintf_internal_r+0x1c80>
8110dc24:	016044b4 	movhi	r5,33042
8110dc28:	297f0d84 	addi	r5,r5,-970
8110dc2c:	d9403515 	stw	r5,212(sp)
8110dc30:	048001c4 	movi	r18,7
8110dc34:	dcc02c17 	ldw	r19,176(sp)
8110dc38:	00000306 	br	8110dc48 <___vfprintf_internal_r+0xa1c>
8110dc3c:	843ffc04 	addi	r16,r16,-16
8110dc40:	42000204 	addi	r8,r8,8
8110dc44:	8c00130e 	bge	r17,r16,8110dc94 <___vfprintf_internal_r+0xa68>
8110dc48:	012044b4 	movhi	r4,33042
8110dc4c:	18c00404 	addi	r3,r3,16
8110dc50:	10800044 	addi	r2,r2,1
8110dc54:	213f0d84 	addi	r4,r4,-970
8110dc58:	41000015 	stw	r4,0(r8)
8110dc5c:	44400115 	stw	r17,4(r8)
8110dc60:	d8c02015 	stw	r3,128(sp)
8110dc64:	d8801f15 	stw	r2,124(sp)
8110dc68:	90bff40e 	bge	r18,r2,8110dc3c <__reset+0xfb0edc3c>
8110dc6c:	d9801e04 	addi	r6,sp,120
8110dc70:	b80b883a 	mov	r5,r23
8110dc74:	9809883a 	mov	r4,r19
8110dc78:	1114a380 	call	81114a38 <__sprint_r>
8110dc7c:	103e6d1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110dc80:	843ffc04 	addi	r16,r16,-16
8110dc84:	d8c02017 	ldw	r3,128(sp)
8110dc88:	d8801f17 	ldw	r2,124(sp)
8110dc8c:	da000404 	addi	r8,sp,16
8110dc90:	8c3fed16 	blt	r17,r16,8110dc48 <__reset+0xfb0edc48>
8110dc94:	d9403517 	ldw	r5,212(sp)
8110dc98:	1c07883a 	add	r3,r3,r16
8110dc9c:	10800044 	addi	r2,r2,1
8110dca0:	41400015 	stw	r5,0(r8)
8110dca4:	44000115 	stw	r16,4(r8)
8110dca8:	d8c02015 	stw	r3,128(sp)
8110dcac:	d8801f15 	stw	r2,124(sp)
8110dcb0:	010001c4 	movi	r4,7
8110dcb4:	2080060e 	bge	r4,r2,8110dcd0 <___vfprintf_internal_r+0xaa4>
8110dcb8:	d9002c17 	ldw	r4,176(sp)
8110dcbc:	d9801e04 	addi	r6,sp,120
8110dcc0:	b80b883a 	mov	r5,r23
8110dcc4:	1114a380 	call	81114a38 <__sprint_r>
8110dcc8:	103e5a1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110dccc:	d8c02017 	ldw	r3,128(sp)
8110dcd0:	d8803117 	ldw	r2,196(sp)
8110dcd4:	d9002a17 	ldw	r4,168(sp)
8110dcd8:	1100010e 	bge	r2,r4,8110dce0 <___vfprintf_internal_r+0xab4>
8110dcdc:	2005883a 	mov	r2,r4
8110dce0:	d9402f17 	ldw	r5,188(sp)
8110dce4:	288b883a 	add	r5,r5,r2
8110dce8:	d9402f15 	stw	r5,188(sp)
8110dcec:	18019e1e 	bne	r3,zero,8110e368 <___vfprintf_internal_r+0x113c>
8110dcf0:	a8800007 	ldb	r2,0(r21)
8110dcf4:	d8001f15 	stw	zero,124(sp)
8110dcf8:	da000404 	addi	r8,sp,16
8110dcfc:	103d851e 	bne	r2,zero,8110d314 <__reset+0xfb0ed314>
8110dd00:	a821883a 	mov	r16,r21
8110dd04:	003d9b06 	br	8110d374 <__reset+0xfb0ed374>
8110dd08:	18c03fcc 	andi	r3,r3,255
8110dd0c:	1805c11e 	bne	r3,zero,8110f414 <___vfprintf_internal_r+0x21e8>
8110dd10:	94800414 	ori	r18,r18,16
8110dd14:	9080080c 	andi	r2,r18,32
8110dd18:	10020c26 	beq	r2,zero,8110e54c <___vfprintf_internal_r+0x1320>
8110dd1c:	d8802d17 	ldw	r2,180(sp)
8110dd20:	d9002917 	ldw	r4,164(sp)
8110dd24:	d8002785 	stb	zero,158(sp)
8110dd28:	10c00204 	addi	r3,r2,8
8110dd2c:	14c00017 	ldw	r19,0(r2)
8110dd30:	15800117 	ldw	r22,4(r2)
8110dd34:	20040f16 	blt	r4,zero,8110ed74 <___vfprintf_internal_r+0x1b48>
8110dd38:	013fdfc4 	movi	r4,-129
8110dd3c:	9d84b03a 	or	r2,r19,r22
8110dd40:	d8c02d15 	stw	r3,180(sp)
8110dd44:	9124703a 	and	r18,r18,r4
8110dd48:	0039883a 	mov	fp,zero
8110dd4c:	103e891e 	bne	r2,zero,8110d774 <__reset+0xfb0ed774>
8110dd50:	d9002917 	ldw	r4,164(sp)
8110dd54:	2002c11e 	bne	r4,zero,8110e85c <___vfprintf_internal_r+0x1630>
8110dd58:	d8002915 	stw	zero,164(sp)
8110dd5c:	d8002e15 	stw	zero,184(sp)
8110dd60:	dc001e04 	addi	r16,sp,120
8110dd64:	003ef806 	br	8110d948 <__reset+0xfb0ed948>
8110dd68:	18c03fcc 	andi	r3,r3,255
8110dd6c:	18059d1e 	bne	r3,zero,8110f3e4 <___vfprintf_internal_r+0x21b8>
8110dd70:	016044b4 	movhi	r5,33042
8110dd74:	297efd04 	addi	r5,r5,-1036
8110dd78:	d9403915 	stw	r5,228(sp)
8110dd7c:	9080080c 	andi	r2,r18,32
8110dd80:	10005226 	beq	r2,zero,8110decc <___vfprintf_internal_r+0xca0>
8110dd84:	d8802d17 	ldw	r2,180(sp)
8110dd88:	14c00017 	ldw	r19,0(r2)
8110dd8c:	15800117 	ldw	r22,4(r2)
8110dd90:	10800204 	addi	r2,r2,8
8110dd94:	d8802d15 	stw	r2,180(sp)
8110dd98:	9080004c 	andi	r2,r18,1
8110dd9c:	10019026 	beq	r2,zero,8110e3e0 <___vfprintf_internal_r+0x11b4>
8110dda0:	9d84b03a 	or	r2,r19,r22
8110dda4:	10036926 	beq	r2,zero,8110eb4c <___vfprintf_internal_r+0x1920>
8110dda8:	d8c02917 	ldw	r3,164(sp)
8110ddac:	00800c04 	movi	r2,48
8110ddb0:	d8802705 	stb	r2,156(sp)
8110ddb4:	dc402745 	stb	r17,157(sp)
8110ddb8:	d8002785 	stb	zero,158(sp)
8110ddbc:	90800094 	ori	r2,r18,2
8110ddc0:	18045d16 	blt	r3,zero,8110ef38 <___vfprintf_internal_r+0x1d0c>
8110ddc4:	00bfdfc4 	movi	r2,-129
8110ddc8:	90a4703a 	and	r18,r18,r2
8110ddcc:	94800094 	ori	r18,r18,2
8110ddd0:	0039883a 	mov	fp,zero
8110ddd4:	d9003917 	ldw	r4,228(sp)
8110ddd8:	dc001e04 	addi	r16,sp,120
8110dddc:	988003cc 	andi	r2,r19,15
8110dde0:	b006973a 	slli	r3,r22,28
8110dde4:	2085883a 	add	r2,r4,r2
8110dde8:	9826d13a 	srli	r19,r19,4
8110ddec:	10800003 	ldbu	r2,0(r2)
8110ddf0:	b02cd13a 	srli	r22,r22,4
8110ddf4:	843fffc4 	addi	r16,r16,-1
8110ddf8:	1ce6b03a 	or	r19,r3,r19
8110ddfc:	80800005 	stb	r2,0(r16)
8110de00:	9d84b03a 	or	r2,r19,r22
8110de04:	103ff51e 	bne	r2,zero,8110dddc <__reset+0xfb0edddc>
8110de08:	d8c02817 	ldw	r3,160(sp)
8110de0c:	1c07c83a 	sub	r3,r3,r16
8110de10:	d8c02e15 	stw	r3,184(sp)
8110de14:	003ecc06 	br	8110d948 <__reset+0xfb0ed948>
8110de18:	18c03fcc 	andi	r3,r3,255
8110de1c:	183e9f26 	beq	r3,zero,8110d89c <__reset+0xfb0ed89c>
8110de20:	d9c02785 	stb	r7,158(sp)
8110de24:	003e9d06 	br	8110d89c <__reset+0xfb0ed89c>
8110de28:	00c00044 	movi	r3,1
8110de2c:	01c00ac4 	movi	r7,43
8110de30:	ac400007 	ldb	r17,0(r21)
8110de34:	003d5e06 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110de38:	94800814 	ori	r18,r18,32
8110de3c:	ac400007 	ldb	r17,0(r21)
8110de40:	003d5b06 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110de44:	d8c02d17 	ldw	r3,180(sp)
8110de48:	d8002785 	stb	zero,158(sp)
8110de4c:	1c000017 	ldw	r16,0(r3)
8110de50:	1cc00104 	addi	r19,r3,4
8110de54:	80041926 	beq	r16,zero,8110eebc <___vfprintf_internal_r+0x1c90>
8110de58:	d9002917 	ldw	r4,164(sp)
8110de5c:	2003d016 	blt	r4,zero,8110eda0 <___vfprintf_internal_r+0x1b74>
8110de60:	200d883a 	mov	r6,r4
8110de64:	000b883a 	mov	r5,zero
8110de68:	8009883a 	mov	r4,r16
8110de6c:	da003d15 	stw	r8,244(sp)
8110de70:	1112a3c0 	call	81112a3c <memchr>
8110de74:	da003d17 	ldw	r8,244(sp)
8110de78:	10045426 	beq	r2,zero,8110efcc <___vfprintf_internal_r+0x1da0>
8110de7c:	1405c83a 	sub	r2,r2,r16
8110de80:	d8802e15 	stw	r2,184(sp)
8110de84:	1003cc16 	blt	r2,zero,8110edb8 <___vfprintf_internal_r+0x1b8c>
8110de88:	df002783 	ldbu	fp,158(sp)
8110de8c:	d8802a15 	stw	r2,168(sp)
8110de90:	dcc02d15 	stw	r19,180(sp)
8110de94:	d8002915 	stw	zero,164(sp)
8110de98:	d8003215 	stw	zero,200(sp)
8110de9c:	003eb006 	br	8110d960 <__reset+0xfb0ed960>
8110dea0:	18c03fcc 	andi	r3,r3,255
8110dea4:	183f9b26 	beq	r3,zero,8110dd14 <__reset+0xfb0edd14>
8110dea8:	d9c02785 	stb	r7,158(sp)
8110deac:	003f9906 	br	8110dd14 <__reset+0xfb0edd14>
8110deb0:	18c03fcc 	andi	r3,r3,255
8110deb4:	1805551e 	bne	r3,zero,8110f40c <___vfprintf_internal_r+0x21e0>
8110deb8:	016044b4 	movhi	r5,33042
8110debc:	297f0204 	addi	r5,r5,-1016
8110dec0:	d9403915 	stw	r5,228(sp)
8110dec4:	9080080c 	andi	r2,r18,32
8110dec8:	103fae1e 	bne	r2,zero,8110dd84 <__reset+0xfb0edd84>
8110decc:	9080040c 	andi	r2,r18,16
8110ded0:	1002de26 	beq	r2,zero,8110ea4c <___vfprintf_internal_r+0x1820>
8110ded4:	d8c02d17 	ldw	r3,180(sp)
8110ded8:	002d883a 	mov	r22,zero
8110dedc:	1cc00017 	ldw	r19,0(r3)
8110dee0:	18c00104 	addi	r3,r3,4
8110dee4:	d8c02d15 	stw	r3,180(sp)
8110dee8:	003fab06 	br	8110dd98 <__reset+0xfb0edd98>
8110deec:	38803fcc 	andi	r2,r7,255
8110def0:	1080201c 	xori	r2,r2,128
8110def4:	10bfe004 	addi	r2,r2,-128
8110def8:	1002d21e 	bne	r2,zero,8110ea44 <___vfprintf_internal_r+0x1818>
8110defc:	00c00044 	movi	r3,1
8110df00:	01c00804 	movi	r7,32
8110df04:	ac400007 	ldb	r17,0(r21)
8110df08:	003d2906 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110df0c:	94800054 	ori	r18,r18,1
8110df10:	ac400007 	ldb	r17,0(r21)
8110df14:	003d2606 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110df18:	18c03fcc 	andi	r3,r3,255
8110df1c:	183e0526 	beq	r3,zero,8110d734 <__reset+0xfb0ed734>
8110df20:	d9c02785 	stb	r7,158(sp)
8110df24:	003e0306 	br	8110d734 <__reset+0xfb0ed734>
8110df28:	94801014 	ori	r18,r18,64
8110df2c:	ac400007 	ldb	r17,0(r21)
8110df30:	003d1f06 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110df34:	ac400007 	ldb	r17,0(r21)
8110df38:	8a438726 	beq	r17,r9,8110ed58 <___vfprintf_internal_r+0x1b2c>
8110df3c:	94800414 	ori	r18,r18,16
8110df40:	003d1b06 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110df44:	18c03fcc 	andi	r3,r3,255
8110df48:	1805341e 	bne	r3,zero,8110f41c <___vfprintf_internal_r+0x21f0>
8110df4c:	9080080c 	andi	r2,r18,32
8110df50:	1002cd26 	beq	r2,zero,8110ea88 <___vfprintf_internal_r+0x185c>
8110df54:	d9402d17 	ldw	r5,180(sp)
8110df58:	d9002f17 	ldw	r4,188(sp)
8110df5c:	28800017 	ldw	r2,0(r5)
8110df60:	2007d7fa 	srai	r3,r4,31
8110df64:	29400104 	addi	r5,r5,4
8110df68:	d9402d15 	stw	r5,180(sp)
8110df6c:	11000015 	stw	r4,0(r2)
8110df70:	10c00115 	stw	r3,4(r2)
8110df74:	003ce506 	br	8110d30c <__reset+0xfb0ed30c>
8110df78:	d8c02d17 	ldw	r3,180(sp)
8110df7c:	d9002d17 	ldw	r4,180(sp)
8110df80:	d8002785 	stb	zero,158(sp)
8110df84:	18800017 	ldw	r2,0(r3)
8110df88:	21000104 	addi	r4,r4,4
8110df8c:	00c00044 	movi	r3,1
8110df90:	d8c02a15 	stw	r3,168(sp)
8110df94:	d8801405 	stb	r2,80(sp)
8110df98:	d9002d15 	stw	r4,180(sp)
8110df9c:	d8c02e15 	stw	r3,184(sp)
8110dfa0:	d8002915 	stw	zero,164(sp)
8110dfa4:	d8003215 	stw	zero,200(sp)
8110dfa8:	dc001404 	addi	r16,sp,80
8110dfac:	0039883a 	mov	fp,zero
8110dfb0:	003e7206 	br	8110d97c <__reset+0xfb0ed97c>
8110dfb4:	012044b4 	movhi	r4,33042
8110dfb8:	213f0204 	addi	r4,r4,-1016
8110dfbc:	0039883a 	mov	fp,zero
8110dfc0:	d9003915 	stw	r4,228(sp)
8110dfc4:	04401e04 	movi	r17,120
8110dfc8:	003f8206 	br	8110ddd4 <__reset+0xfb0eddd4>
8110dfcc:	18c03fcc 	andi	r3,r3,255
8110dfd0:	1805061e 	bne	r3,zero,8110f3ec <___vfprintf_internal_r+0x21c0>
8110dfd4:	883d9126 	beq	r17,zero,8110d61c <__reset+0xfb0ed61c>
8110dfd8:	00c00044 	movi	r3,1
8110dfdc:	d8c02a15 	stw	r3,168(sp)
8110dfe0:	dc401405 	stb	r17,80(sp)
8110dfe4:	d8002785 	stb	zero,158(sp)
8110dfe8:	003fec06 	br	8110df9c <__reset+0xfb0edf9c>
8110dfec:	016044b4 	movhi	r5,33042
8110dff0:	297f0204 	addi	r5,r5,-1016
8110dff4:	d9403915 	stw	r5,228(sp)
8110dff8:	d8c02d15 	stw	r3,180(sp)
8110dffc:	1025883a 	mov	r18,r2
8110e000:	04401e04 	movi	r17,120
8110e004:	9d84b03a 	or	r2,r19,r22
8110e008:	1000fc1e 	bne	r2,zero,8110e3fc <___vfprintf_internal_r+0x11d0>
8110e00c:	0039883a 	mov	fp,zero
8110e010:	00800084 	movi	r2,2
8110e014:	10803fcc 	andi	r2,r2,255
8110e018:	00c00044 	movi	r3,1
8110e01c:	10c20f26 	beq	r2,r3,8110e85c <___vfprintf_internal_r+0x1630>
8110e020:	00c00084 	movi	r3,2
8110e024:	10fd6326 	beq	r2,r3,8110d5b4 <__reset+0xfb0ed5b4>
8110e028:	003e2d06 	br	8110d8e0 <__reset+0xfb0ed8e0>
8110e02c:	d8c02017 	ldw	r3,128(sp)
8110e030:	003e9306 	br	8110da80 <__reset+0xfb0eda80>
8110e034:	00801944 	movi	r2,101
8110e038:	14407e0e 	bge	r2,r17,8110e234 <___vfprintf_internal_r+0x1008>
8110e03c:	d9003617 	ldw	r4,216(sp)
8110e040:	d9403817 	ldw	r5,224(sp)
8110e044:	000d883a 	mov	r6,zero
8110e048:	000f883a 	mov	r7,zero
8110e04c:	d8c03c15 	stw	r3,240(sp)
8110e050:	da003d15 	stw	r8,244(sp)
8110e054:	11186b00 	call	811186b0 <__eqdf2>
8110e058:	d8c03c17 	ldw	r3,240(sp)
8110e05c:	da003d17 	ldw	r8,244(sp)
8110e060:	1000f71e 	bne	r2,zero,8110e440 <___vfprintf_internal_r+0x1214>
8110e064:	d8801f17 	ldw	r2,124(sp)
8110e068:	012044b4 	movhi	r4,33042
8110e06c:	213f0904 	addi	r4,r4,-988
8110e070:	18c00044 	addi	r3,r3,1
8110e074:	10800044 	addi	r2,r2,1
8110e078:	41000015 	stw	r4,0(r8)
8110e07c:	01000044 	movi	r4,1
8110e080:	41000115 	stw	r4,4(r8)
8110e084:	d8c02015 	stw	r3,128(sp)
8110e088:	d8801f15 	stw	r2,124(sp)
8110e08c:	010001c4 	movi	r4,7
8110e090:	2082b816 	blt	r4,r2,8110eb74 <___vfprintf_internal_r+0x1948>
8110e094:	42000204 	addi	r8,r8,8
8110e098:	d8802617 	ldw	r2,152(sp)
8110e09c:	d9403317 	ldw	r5,204(sp)
8110e0a0:	11400216 	blt	r2,r5,8110e0ac <___vfprintf_internal_r+0xe80>
8110e0a4:	9080004c 	andi	r2,r18,1
8110e0a8:	103ed526 	beq	r2,zero,8110dc00 <__reset+0xfb0edc00>
8110e0ac:	d8803717 	ldw	r2,220(sp)
8110e0b0:	d9003417 	ldw	r4,208(sp)
8110e0b4:	d9403717 	ldw	r5,220(sp)
8110e0b8:	1887883a 	add	r3,r3,r2
8110e0bc:	d8801f17 	ldw	r2,124(sp)
8110e0c0:	41000015 	stw	r4,0(r8)
8110e0c4:	41400115 	stw	r5,4(r8)
8110e0c8:	10800044 	addi	r2,r2,1
8110e0cc:	d8c02015 	stw	r3,128(sp)
8110e0d0:	d8801f15 	stw	r2,124(sp)
8110e0d4:	010001c4 	movi	r4,7
8110e0d8:	20832916 	blt	r4,r2,8110ed80 <___vfprintf_internal_r+0x1b54>
8110e0dc:	42000204 	addi	r8,r8,8
8110e0e0:	d8803317 	ldw	r2,204(sp)
8110e0e4:	143fffc4 	addi	r16,r2,-1
8110e0e8:	043ec50e 	bge	zero,r16,8110dc00 <__reset+0xfb0edc00>
8110e0ec:	04400404 	movi	r17,16
8110e0f0:	d8801f17 	ldw	r2,124(sp)
8110e0f4:	8c00880e 	bge	r17,r16,8110e318 <___vfprintf_internal_r+0x10ec>
8110e0f8:	016044b4 	movhi	r5,33042
8110e0fc:	297f0984 	addi	r5,r5,-986
8110e100:	d9402b15 	stw	r5,172(sp)
8110e104:	058001c4 	movi	r22,7
8110e108:	dcc02c17 	ldw	r19,176(sp)
8110e10c:	00000306 	br	8110e11c <___vfprintf_internal_r+0xef0>
8110e110:	42000204 	addi	r8,r8,8
8110e114:	843ffc04 	addi	r16,r16,-16
8110e118:	8c00820e 	bge	r17,r16,8110e324 <___vfprintf_internal_r+0x10f8>
8110e11c:	18c00404 	addi	r3,r3,16
8110e120:	10800044 	addi	r2,r2,1
8110e124:	45000015 	stw	r20,0(r8)
8110e128:	44400115 	stw	r17,4(r8)
8110e12c:	d8c02015 	stw	r3,128(sp)
8110e130:	d8801f15 	stw	r2,124(sp)
8110e134:	b0bff60e 	bge	r22,r2,8110e110 <__reset+0xfb0ee110>
8110e138:	d9801e04 	addi	r6,sp,120
8110e13c:	b80b883a 	mov	r5,r23
8110e140:	9809883a 	mov	r4,r19
8110e144:	1114a380 	call	81114a38 <__sprint_r>
8110e148:	103d3a1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e14c:	d8c02017 	ldw	r3,128(sp)
8110e150:	d8801f17 	ldw	r2,124(sp)
8110e154:	da000404 	addi	r8,sp,16
8110e158:	003fee06 	br	8110e114 <__reset+0xfb0ee114>
8110e15c:	d9403117 	ldw	r5,196(sp)
8110e160:	d8802a17 	ldw	r2,168(sp)
8110e164:	28adc83a 	sub	r22,r5,r2
8110e168:	05be630e 	bge	zero,r22,8110daf8 <__reset+0xfb0edaf8>
8110e16c:	07000404 	movi	fp,16
8110e170:	d8801f17 	ldw	r2,124(sp)
8110e174:	e5838f0e 	bge	fp,r22,8110efb4 <___vfprintf_internal_r+0x1d88>
8110e178:	016044b4 	movhi	r5,33042
8110e17c:	297f0984 	addi	r5,r5,-986
8110e180:	dc403015 	stw	r17,192(sp)
8110e184:	d9402b15 	stw	r5,172(sp)
8110e188:	b023883a 	mov	r17,r22
8110e18c:	04c001c4 	movi	r19,7
8110e190:	a82d883a 	mov	r22,r21
8110e194:	902b883a 	mov	r21,r18
8110e198:	8025883a 	mov	r18,r16
8110e19c:	dc002c17 	ldw	r16,176(sp)
8110e1a0:	00000306 	br	8110e1b0 <___vfprintf_internal_r+0xf84>
8110e1a4:	8c7ffc04 	addi	r17,r17,-16
8110e1a8:	42000204 	addi	r8,r8,8
8110e1ac:	e440110e 	bge	fp,r17,8110e1f4 <___vfprintf_internal_r+0xfc8>
8110e1b0:	18c00404 	addi	r3,r3,16
8110e1b4:	10800044 	addi	r2,r2,1
8110e1b8:	45000015 	stw	r20,0(r8)
8110e1bc:	47000115 	stw	fp,4(r8)
8110e1c0:	d8c02015 	stw	r3,128(sp)
8110e1c4:	d8801f15 	stw	r2,124(sp)
8110e1c8:	98bff60e 	bge	r19,r2,8110e1a4 <__reset+0xfb0ee1a4>
8110e1cc:	d9801e04 	addi	r6,sp,120
8110e1d0:	b80b883a 	mov	r5,r23
8110e1d4:	8009883a 	mov	r4,r16
8110e1d8:	1114a380 	call	81114a38 <__sprint_r>
8110e1dc:	103d151e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e1e0:	8c7ffc04 	addi	r17,r17,-16
8110e1e4:	d8c02017 	ldw	r3,128(sp)
8110e1e8:	d8801f17 	ldw	r2,124(sp)
8110e1ec:	da000404 	addi	r8,sp,16
8110e1f0:	e47fef16 	blt	fp,r17,8110e1b0 <__reset+0xfb0ee1b0>
8110e1f4:	9021883a 	mov	r16,r18
8110e1f8:	a825883a 	mov	r18,r21
8110e1fc:	b02b883a 	mov	r21,r22
8110e200:	882d883a 	mov	r22,r17
8110e204:	dc403017 	ldw	r17,192(sp)
8110e208:	d9002b17 	ldw	r4,172(sp)
8110e20c:	1d87883a 	add	r3,r3,r22
8110e210:	10800044 	addi	r2,r2,1
8110e214:	41000015 	stw	r4,0(r8)
8110e218:	45800115 	stw	r22,4(r8)
8110e21c:	d8c02015 	stw	r3,128(sp)
8110e220:	d8801f15 	stw	r2,124(sp)
8110e224:	010001c4 	movi	r4,7
8110e228:	20818e16 	blt	r4,r2,8110e864 <___vfprintf_internal_r+0x1638>
8110e22c:	42000204 	addi	r8,r8,8
8110e230:	003e3106 	br	8110daf8 <__reset+0xfb0edaf8>
8110e234:	d9403317 	ldw	r5,204(sp)
8110e238:	00800044 	movi	r2,1
8110e23c:	18c00044 	addi	r3,r3,1
8110e240:	1141530e 	bge	r2,r5,8110e790 <___vfprintf_internal_r+0x1564>
8110e244:	dc401f17 	ldw	r17,124(sp)
8110e248:	00800044 	movi	r2,1
8110e24c:	40800115 	stw	r2,4(r8)
8110e250:	8c400044 	addi	r17,r17,1
8110e254:	44000015 	stw	r16,0(r8)
8110e258:	d8c02015 	stw	r3,128(sp)
8110e25c:	dc401f15 	stw	r17,124(sp)
8110e260:	008001c4 	movi	r2,7
8110e264:	14416b16 	blt	r2,r17,8110e814 <___vfprintf_internal_r+0x15e8>
8110e268:	42000204 	addi	r8,r8,8
8110e26c:	d8803717 	ldw	r2,220(sp)
8110e270:	d9003417 	ldw	r4,208(sp)
8110e274:	8c400044 	addi	r17,r17,1
8110e278:	10c7883a 	add	r3,r2,r3
8110e27c:	40800115 	stw	r2,4(r8)
8110e280:	41000015 	stw	r4,0(r8)
8110e284:	d8c02015 	stw	r3,128(sp)
8110e288:	dc401f15 	stw	r17,124(sp)
8110e28c:	008001c4 	movi	r2,7
8110e290:	14416916 	blt	r2,r17,8110e838 <___vfprintf_internal_r+0x160c>
8110e294:	45800204 	addi	r22,r8,8
8110e298:	d9003617 	ldw	r4,216(sp)
8110e29c:	d9403817 	ldw	r5,224(sp)
8110e2a0:	000d883a 	mov	r6,zero
8110e2a4:	000f883a 	mov	r7,zero
8110e2a8:	d8c03c15 	stw	r3,240(sp)
8110e2ac:	11186b00 	call	811186b0 <__eqdf2>
8110e2b0:	d8c03c17 	ldw	r3,240(sp)
8110e2b4:	1000bc26 	beq	r2,zero,8110e5a8 <___vfprintf_internal_r+0x137c>
8110e2b8:	d9403317 	ldw	r5,204(sp)
8110e2bc:	84000044 	addi	r16,r16,1
8110e2c0:	8c400044 	addi	r17,r17,1
8110e2c4:	28bfffc4 	addi	r2,r5,-1
8110e2c8:	1887883a 	add	r3,r3,r2
8110e2cc:	b0800115 	stw	r2,4(r22)
8110e2d0:	b4000015 	stw	r16,0(r22)
8110e2d4:	d8c02015 	stw	r3,128(sp)
8110e2d8:	dc401f15 	stw	r17,124(sp)
8110e2dc:	008001c4 	movi	r2,7
8110e2e0:	14414316 	blt	r2,r17,8110e7f0 <___vfprintf_internal_r+0x15c4>
8110e2e4:	b5800204 	addi	r22,r22,8
8110e2e8:	d9003a17 	ldw	r4,232(sp)
8110e2ec:	df0022c4 	addi	fp,sp,139
8110e2f0:	8c400044 	addi	r17,r17,1
8110e2f4:	20c7883a 	add	r3,r4,r3
8110e2f8:	b7000015 	stw	fp,0(r22)
8110e2fc:	b1000115 	stw	r4,4(r22)
8110e300:	d8c02015 	stw	r3,128(sp)
8110e304:	dc401f15 	stw	r17,124(sp)
8110e308:	008001c4 	movi	r2,7
8110e30c:	14400e16 	blt	r2,r17,8110e348 <___vfprintf_internal_r+0x111c>
8110e310:	b2000204 	addi	r8,r22,8
8110e314:	003e3a06 	br	8110dc00 <__reset+0xfb0edc00>
8110e318:	012044b4 	movhi	r4,33042
8110e31c:	213f0984 	addi	r4,r4,-986
8110e320:	d9002b15 	stw	r4,172(sp)
8110e324:	d9002b17 	ldw	r4,172(sp)
8110e328:	1c07883a 	add	r3,r3,r16
8110e32c:	44000115 	stw	r16,4(r8)
8110e330:	41000015 	stw	r4,0(r8)
8110e334:	10800044 	addi	r2,r2,1
8110e338:	d8c02015 	stw	r3,128(sp)
8110e33c:	d8801f15 	stw	r2,124(sp)
8110e340:	010001c4 	movi	r4,7
8110e344:	20be2d0e 	bge	r4,r2,8110dbfc <__reset+0xfb0edbfc>
8110e348:	d9002c17 	ldw	r4,176(sp)
8110e34c:	d9801e04 	addi	r6,sp,120
8110e350:	b80b883a 	mov	r5,r23
8110e354:	1114a380 	call	81114a38 <__sprint_r>
8110e358:	103cb61e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e35c:	d8c02017 	ldw	r3,128(sp)
8110e360:	da000404 	addi	r8,sp,16
8110e364:	003e2606 	br	8110dc00 <__reset+0xfb0edc00>
8110e368:	d9002c17 	ldw	r4,176(sp)
8110e36c:	d9801e04 	addi	r6,sp,120
8110e370:	b80b883a 	mov	r5,r23
8110e374:	1114a380 	call	81114a38 <__sprint_r>
8110e378:	103e5d26 	beq	r2,zero,8110dcf0 <__reset+0xfb0edcf0>
8110e37c:	003cad06 	br	8110d634 <__reset+0xfb0ed634>
8110e380:	d9002c17 	ldw	r4,176(sp)
8110e384:	d9801e04 	addi	r6,sp,120
8110e388:	b80b883a 	mov	r5,r23
8110e38c:	1114a380 	call	81114a38 <__sprint_r>
8110e390:	103ca81e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e394:	d8c02017 	ldw	r3,128(sp)
8110e398:	da000404 	addi	r8,sp,16
8110e39c:	003e0b06 	br	8110dbcc <__reset+0xfb0edbcc>
8110e3a0:	d9002c17 	ldw	r4,176(sp)
8110e3a4:	d9801e04 	addi	r6,sp,120
8110e3a8:	b80b883a 	mov	r5,r23
8110e3ac:	1114a380 	call	81114a38 <__sprint_r>
8110e3b0:	103ca01e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e3b4:	d8c02017 	ldw	r3,128(sp)
8110e3b8:	da000404 	addi	r8,sp,16
8110e3bc:	003dbd06 	br	8110dab4 <__reset+0xfb0edab4>
8110e3c0:	d9002c17 	ldw	r4,176(sp)
8110e3c4:	d9801e04 	addi	r6,sp,120
8110e3c8:	b80b883a 	mov	r5,r23
8110e3cc:	1114a380 	call	81114a38 <__sprint_r>
8110e3d0:	103c981e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e3d4:	d8c02017 	ldw	r3,128(sp)
8110e3d8:	da000404 	addi	r8,sp,16
8110e3dc:	003dc306 	br	8110daec <__reset+0xfb0edaec>
8110e3e0:	d8802917 	ldw	r2,164(sp)
8110e3e4:	d8002785 	stb	zero,158(sp)
8110e3e8:	103f0616 	blt	r2,zero,8110e004 <__reset+0xfb0ee004>
8110e3ec:	00ffdfc4 	movi	r3,-129
8110e3f0:	9d84b03a 	or	r2,r19,r22
8110e3f4:	90e4703a 	and	r18,r18,r3
8110e3f8:	103c6b26 	beq	r2,zero,8110d5a8 <__reset+0xfb0ed5a8>
8110e3fc:	0039883a 	mov	fp,zero
8110e400:	003e7406 	br	8110ddd4 <__reset+0xfb0eddd4>
8110e404:	9080040c 	andi	r2,r18,16
8110e408:	1001b326 	beq	r2,zero,8110ead8 <___vfprintf_internal_r+0x18ac>
8110e40c:	d9002d17 	ldw	r4,180(sp)
8110e410:	d9402917 	ldw	r5,164(sp)
8110e414:	d8002785 	stb	zero,158(sp)
8110e418:	20800104 	addi	r2,r4,4
8110e41c:	24c00017 	ldw	r19,0(r4)
8110e420:	002d883a 	mov	r22,zero
8110e424:	2801b516 	blt	r5,zero,8110eafc <___vfprintf_internal_r+0x18d0>
8110e428:	00ffdfc4 	movi	r3,-129
8110e42c:	d8802d15 	stw	r2,180(sp)
8110e430:	90e4703a 	and	r18,r18,r3
8110e434:	983d2726 	beq	r19,zero,8110d8d4 <__reset+0xfb0ed8d4>
8110e438:	0039883a 	mov	fp,zero
8110e43c:	003d2a06 	br	8110d8e8 <__reset+0xfb0ed8e8>
8110e440:	dc402617 	ldw	r17,152(sp)
8110e444:	0441d30e 	bge	zero,r17,8110eb94 <___vfprintf_internal_r+0x1968>
8110e448:	dc403217 	ldw	r17,200(sp)
8110e44c:	d8803317 	ldw	r2,204(sp)
8110e450:	1440010e 	bge	r2,r17,8110e458 <___vfprintf_internal_r+0x122c>
8110e454:	1023883a 	mov	r17,r2
8110e458:	04400a0e 	bge	zero,r17,8110e484 <___vfprintf_internal_r+0x1258>
8110e45c:	d8801f17 	ldw	r2,124(sp)
8110e460:	1c47883a 	add	r3,r3,r17
8110e464:	44000015 	stw	r16,0(r8)
8110e468:	10800044 	addi	r2,r2,1
8110e46c:	44400115 	stw	r17,4(r8)
8110e470:	d8c02015 	stw	r3,128(sp)
8110e474:	d8801f15 	stw	r2,124(sp)
8110e478:	010001c4 	movi	r4,7
8110e47c:	20826516 	blt	r4,r2,8110ee14 <___vfprintf_internal_r+0x1be8>
8110e480:	42000204 	addi	r8,r8,8
8110e484:	88026116 	blt	r17,zero,8110ee0c <___vfprintf_internal_r+0x1be0>
8110e488:	d9003217 	ldw	r4,200(sp)
8110e48c:	2463c83a 	sub	r17,r4,r17
8110e490:	04407b0e 	bge	zero,r17,8110e680 <___vfprintf_internal_r+0x1454>
8110e494:	05800404 	movi	r22,16
8110e498:	d8801f17 	ldw	r2,124(sp)
8110e49c:	b4419d0e 	bge	r22,r17,8110eb14 <___vfprintf_internal_r+0x18e8>
8110e4a0:	012044b4 	movhi	r4,33042
8110e4a4:	213f0984 	addi	r4,r4,-986
8110e4a8:	d9002b15 	stw	r4,172(sp)
8110e4ac:	070001c4 	movi	fp,7
8110e4b0:	dcc02c17 	ldw	r19,176(sp)
8110e4b4:	00000306 	br	8110e4c4 <___vfprintf_internal_r+0x1298>
8110e4b8:	42000204 	addi	r8,r8,8
8110e4bc:	8c7ffc04 	addi	r17,r17,-16
8110e4c0:	b441970e 	bge	r22,r17,8110eb20 <___vfprintf_internal_r+0x18f4>
8110e4c4:	18c00404 	addi	r3,r3,16
8110e4c8:	10800044 	addi	r2,r2,1
8110e4cc:	45000015 	stw	r20,0(r8)
8110e4d0:	45800115 	stw	r22,4(r8)
8110e4d4:	d8c02015 	stw	r3,128(sp)
8110e4d8:	d8801f15 	stw	r2,124(sp)
8110e4dc:	e0bff60e 	bge	fp,r2,8110e4b8 <__reset+0xfb0ee4b8>
8110e4e0:	d9801e04 	addi	r6,sp,120
8110e4e4:	b80b883a 	mov	r5,r23
8110e4e8:	9809883a 	mov	r4,r19
8110e4ec:	1114a380 	call	81114a38 <__sprint_r>
8110e4f0:	103c501e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e4f4:	d8c02017 	ldw	r3,128(sp)
8110e4f8:	d8801f17 	ldw	r2,124(sp)
8110e4fc:	da000404 	addi	r8,sp,16
8110e500:	003fee06 	br	8110e4bc <__reset+0xfb0ee4bc>
8110e504:	d9002c17 	ldw	r4,176(sp)
8110e508:	d9801e04 	addi	r6,sp,120
8110e50c:	b80b883a 	mov	r5,r23
8110e510:	1114a380 	call	81114a38 <__sprint_r>
8110e514:	103c471e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e518:	d8c02017 	ldw	r3,128(sp)
8110e51c:	df002787 	ldb	fp,158(sp)
8110e520:	da000404 	addi	r8,sp,16
8110e524:	003d5606 	br	8110da80 <__reset+0xfb0eda80>
8110e528:	9080040c 	andi	r2,r18,16
8110e52c:	10016126 	beq	r2,zero,8110eab4 <___vfprintf_internal_r+0x1888>
8110e530:	d8802d17 	ldw	r2,180(sp)
8110e534:	14c00017 	ldw	r19,0(r2)
8110e538:	10800104 	addi	r2,r2,4
8110e53c:	d8802d15 	stw	r2,180(sp)
8110e540:	982dd7fa 	srai	r22,r19,31
8110e544:	b005883a 	mov	r2,r22
8110e548:	003c8206 	br	8110d754 <__reset+0xfb0ed754>
8110e54c:	9080040c 	andi	r2,r18,16
8110e550:	10003526 	beq	r2,zero,8110e628 <___vfprintf_internal_r+0x13fc>
8110e554:	d9402d17 	ldw	r5,180(sp)
8110e558:	d8c02917 	ldw	r3,164(sp)
8110e55c:	d8002785 	stb	zero,158(sp)
8110e560:	28800104 	addi	r2,r5,4
8110e564:	2cc00017 	ldw	r19,0(r5)
8110e568:	002d883a 	mov	r22,zero
8110e56c:	18003716 	blt	r3,zero,8110e64c <___vfprintf_internal_r+0x1420>
8110e570:	00ffdfc4 	movi	r3,-129
8110e574:	d8802d15 	stw	r2,180(sp)
8110e578:	90e4703a 	and	r18,r18,r3
8110e57c:	0039883a 	mov	fp,zero
8110e580:	983df326 	beq	r19,zero,8110dd50 <__reset+0xfb0edd50>
8110e584:	00800244 	movi	r2,9
8110e588:	14fc7b36 	bltu	r2,r19,8110d778 <__reset+0xfb0ed778>
8110e58c:	d8c02817 	ldw	r3,160(sp)
8110e590:	dc001dc4 	addi	r16,sp,119
8110e594:	9cc00c04 	addi	r19,r19,48
8110e598:	1c07c83a 	sub	r3,r3,r16
8110e59c:	dcc01dc5 	stb	r19,119(sp)
8110e5a0:	d8c02e15 	stw	r3,184(sp)
8110e5a4:	003ce806 	br	8110d948 <__reset+0xfb0ed948>
8110e5a8:	d8803317 	ldw	r2,204(sp)
8110e5ac:	143fffc4 	addi	r16,r2,-1
8110e5b0:	043f4d0e 	bge	zero,r16,8110e2e8 <__reset+0xfb0ee2e8>
8110e5b4:	07000404 	movi	fp,16
8110e5b8:	e400810e 	bge	fp,r16,8110e7c0 <___vfprintf_internal_r+0x1594>
8110e5bc:	016044b4 	movhi	r5,33042
8110e5c0:	297f0984 	addi	r5,r5,-986
8110e5c4:	d9402b15 	stw	r5,172(sp)
8110e5c8:	01c001c4 	movi	r7,7
8110e5cc:	dcc02c17 	ldw	r19,176(sp)
8110e5d0:	00000306 	br	8110e5e0 <___vfprintf_internal_r+0x13b4>
8110e5d4:	b5800204 	addi	r22,r22,8
8110e5d8:	843ffc04 	addi	r16,r16,-16
8110e5dc:	e4007b0e 	bge	fp,r16,8110e7cc <___vfprintf_internal_r+0x15a0>
8110e5e0:	18c00404 	addi	r3,r3,16
8110e5e4:	8c400044 	addi	r17,r17,1
8110e5e8:	b5000015 	stw	r20,0(r22)
8110e5ec:	b7000115 	stw	fp,4(r22)
8110e5f0:	d8c02015 	stw	r3,128(sp)
8110e5f4:	dc401f15 	stw	r17,124(sp)
8110e5f8:	3c7ff60e 	bge	r7,r17,8110e5d4 <__reset+0xfb0ee5d4>
8110e5fc:	d9801e04 	addi	r6,sp,120
8110e600:	b80b883a 	mov	r5,r23
8110e604:	9809883a 	mov	r4,r19
8110e608:	d9c03c15 	stw	r7,240(sp)
8110e60c:	1114a380 	call	81114a38 <__sprint_r>
8110e610:	d9c03c17 	ldw	r7,240(sp)
8110e614:	103c071e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e618:	d8c02017 	ldw	r3,128(sp)
8110e61c:	dc401f17 	ldw	r17,124(sp)
8110e620:	dd800404 	addi	r22,sp,16
8110e624:	003fec06 	br	8110e5d8 <__reset+0xfb0ee5d8>
8110e628:	9080100c 	andi	r2,r18,64
8110e62c:	d8002785 	stb	zero,158(sp)
8110e630:	10010e26 	beq	r2,zero,8110ea6c <___vfprintf_internal_r+0x1840>
8110e634:	d9002d17 	ldw	r4,180(sp)
8110e638:	d9402917 	ldw	r5,164(sp)
8110e63c:	002d883a 	mov	r22,zero
8110e640:	20800104 	addi	r2,r4,4
8110e644:	24c0000b 	ldhu	r19,0(r4)
8110e648:	283fc90e 	bge	r5,zero,8110e570 <__reset+0xfb0ee570>
8110e64c:	d8802d15 	stw	r2,180(sp)
8110e650:	0039883a 	mov	fp,zero
8110e654:	9d84b03a 	or	r2,r19,r22
8110e658:	103c461e 	bne	r2,zero,8110d774 <__reset+0xfb0ed774>
8110e65c:	00800044 	movi	r2,1
8110e660:	003e6c06 	br	8110e014 <__reset+0xfb0ee014>
8110e664:	d9002c17 	ldw	r4,176(sp)
8110e668:	d9801e04 	addi	r6,sp,120
8110e66c:	b80b883a 	mov	r5,r23
8110e670:	1114a380 	call	81114a38 <__sprint_r>
8110e674:	103bef1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e678:	d8c02017 	ldw	r3,128(sp)
8110e67c:	da000404 	addi	r8,sp,16
8110e680:	d9003217 	ldw	r4,200(sp)
8110e684:	d8802617 	ldw	r2,152(sp)
8110e688:	d9403317 	ldw	r5,204(sp)
8110e68c:	8123883a 	add	r17,r16,r4
8110e690:	11400216 	blt	r2,r5,8110e69c <___vfprintf_internal_r+0x1470>
8110e694:	9100004c 	andi	r4,r18,1
8110e698:	20000d26 	beq	r4,zero,8110e6d0 <___vfprintf_internal_r+0x14a4>
8110e69c:	d9003717 	ldw	r4,220(sp)
8110e6a0:	d9403417 	ldw	r5,208(sp)
8110e6a4:	1907883a 	add	r3,r3,r4
8110e6a8:	d9001f17 	ldw	r4,124(sp)
8110e6ac:	41400015 	stw	r5,0(r8)
8110e6b0:	d9403717 	ldw	r5,220(sp)
8110e6b4:	21000044 	addi	r4,r4,1
8110e6b8:	d8c02015 	stw	r3,128(sp)
8110e6bc:	41400115 	stw	r5,4(r8)
8110e6c0:	d9001f15 	stw	r4,124(sp)
8110e6c4:	014001c4 	movi	r5,7
8110e6c8:	2901e816 	blt	r5,r4,8110ee6c <___vfprintf_internal_r+0x1c40>
8110e6cc:	42000204 	addi	r8,r8,8
8110e6d0:	d9003317 	ldw	r4,204(sp)
8110e6d4:	8121883a 	add	r16,r16,r4
8110e6d8:	2085c83a 	sub	r2,r4,r2
8110e6dc:	8461c83a 	sub	r16,r16,r17
8110e6e0:	1400010e 	bge	r2,r16,8110e6e8 <___vfprintf_internal_r+0x14bc>
8110e6e4:	1021883a 	mov	r16,r2
8110e6e8:	04000a0e 	bge	zero,r16,8110e714 <___vfprintf_internal_r+0x14e8>
8110e6ec:	d9001f17 	ldw	r4,124(sp)
8110e6f0:	1c07883a 	add	r3,r3,r16
8110e6f4:	44400015 	stw	r17,0(r8)
8110e6f8:	21000044 	addi	r4,r4,1
8110e6fc:	44000115 	stw	r16,4(r8)
8110e700:	d8c02015 	stw	r3,128(sp)
8110e704:	d9001f15 	stw	r4,124(sp)
8110e708:	014001c4 	movi	r5,7
8110e70c:	2901fb16 	blt	r5,r4,8110eefc <___vfprintf_internal_r+0x1cd0>
8110e710:	42000204 	addi	r8,r8,8
8110e714:	8001f716 	blt	r16,zero,8110eef4 <___vfprintf_internal_r+0x1cc8>
8110e718:	1421c83a 	sub	r16,r2,r16
8110e71c:	043d380e 	bge	zero,r16,8110dc00 <__reset+0xfb0edc00>
8110e720:	04400404 	movi	r17,16
8110e724:	d8801f17 	ldw	r2,124(sp)
8110e728:	8c3efb0e 	bge	r17,r16,8110e318 <__reset+0xfb0ee318>
8110e72c:	016044b4 	movhi	r5,33042
8110e730:	297f0984 	addi	r5,r5,-986
8110e734:	d9402b15 	stw	r5,172(sp)
8110e738:	058001c4 	movi	r22,7
8110e73c:	dcc02c17 	ldw	r19,176(sp)
8110e740:	00000306 	br	8110e750 <___vfprintf_internal_r+0x1524>
8110e744:	42000204 	addi	r8,r8,8
8110e748:	843ffc04 	addi	r16,r16,-16
8110e74c:	8c3ef50e 	bge	r17,r16,8110e324 <__reset+0xfb0ee324>
8110e750:	18c00404 	addi	r3,r3,16
8110e754:	10800044 	addi	r2,r2,1
8110e758:	45000015 	stw	r20,0(r8)
8110e75c:	44400115 	stw	r17,4(r8)
8110e760:	d8c02015 	stw	r3,128(sp)
8110e764:	d8801f15 	stw	r2,124(sp)
8110e768:	b0bff60e 	bge	r22,r2,8110e744 <__reset+0xfb0ee744>
8110e76c:	d9801e04 	addi	r6,sp,120
8110e770:	b80b883a 	mov	r5,r23
8110e774:	9809883a 	mov	r4,r19
8110e778:	1114a380 	call	81114a38 <__sprint_r>
8110e77c:	103bad1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e780:	d8c02017 	ldw	r3,128(sp)
8110e784:	d8801f17 	ldw	r2,124(sp)
8110e788:	da000404 	addi	r8,sp,16
8110e78c:	003fee06 	br	8110e748 <__reset+0xfb0ee748>
8110e790:	9088703a 	and	r4,r18,r2
8110e794:	203eab1e 	bne	r4,zero,8110e244 <__reset+0xfb0ee244>
8110e798:	dc401f17 	ldw	r17,124(sp)
8110e79c:	40800115 	stw	r2,4(r8)
8110e7a0:	44000015 	stw	r16,0(r8)
8110e7a4:	8c400044 	addi	r17,r17,1
8110e7a8:	d8c02015 	stw	r3,128(sp)
8110e7ac:	dc401f15 	stw	r17,124(sp)
8110e7b0:	008001c4 	movi	r2,7
8110e7b4:	14400e16 	blt	r2,r17,8110e7f0 <___vfprintf_internal_r+0x15c4>
8110e7b8:	45800204 	addi	r22,r8,8
8110e7bc:	003eca06 	br	8110e2e8 <__reset+0xfb0ee2e8>
8110e7c0:	012044b4 	movhi	r4,33042
8110e7c4:	213f0984 	addi	r4,r4,-986
8110e7c8:	d9002b15 	stw	r4,172(sp)
8110e7cc:	d8802b17 	ldw	r2,172(sp)
8110e7d0:	1c07883a 	add	r3,r3,r16
8110e7d4:	8c400044 	addi	r17,r17,1
8110e7d8:	b0800015 	stw	r2,0(r22)
8110e7dc:	b4000115 	stw	r16,4(r22)
8110e7e0:	d8c02015 	stw	r3,128(sp)
8110e7e4:	dc401f15 	stw	r17,124(sp)
8110e7e8:	008001c4 	movi	r2,7
8110e7ec:	147ebd0e 	bge	r2,r17,8110e2e4 <__reset+0xfb0ee2e4>
8110e7f0:	d9002c17 	ldw	r4,176(sp)
8110e7f4:	d9801e04 	addi	r6,sp,120
8110e7f8:	b80b883a 	mov	r5,r23
8110e7fc:	1114a380 	call	81114a38 <__sprint_r>
8110e800:	103b8c1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e804:	d8c02017 	ldw	r3,128(sp)
8110e808:	dc401f17 	ldw	r17,124(sp)
8110e80c:	dd800404 	addi	r22,sp,16
8110e810:	003eb506 	br	8110e2e8 <__reset+0xfb0ee2e8>
8110e814:	d9002c17 	ldw	r4,176(sp)
8110e818:	d9801e04 	addi	r6,sp,120
8110e81c:	b80b883a 	mov	r5,r23
8110e820:	1114a380 	call	81114a38 <__sprint_r>
8110e824:	103b831e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e828:	d8c02017 	ldw	r3,128(sp)
8110e82c:	dc401f17 	ldw	r17,124(sp)
8110e830:	da000404 	addi	r8,sp,16
8110e834:	003e8d06 	br	8110e26c <__reset+0xfb0ee26c>
8110e838:	d9002c17 	ldw	r4,176(sp)
8110e83c:	d9801e04 	addi	r6,sp,120
8110e840:	b80b883a 	mov	r5,r23
8110e844:	1114a380 	call	81114a38 <__sprint_r>
8110e848:	103b7a1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e84c:	d8c02017 	ldw	r3,128(sp)
8110e850:	dc401f17 	ldw	r17,124(sp)
8110e854:	dd800404 	addi	r22,sp,16
8110e858:	003e8f06 	br	8110e298 <__reset+0xfb0ee298>
8110e85c:	0027883a 	mov	r19,zero
8110e860:	003f4a06 	br	8110e58c <__reset+0xfb0ee58c>
8110e864:	d9002c17 	ldw	r4,176(sp)
8110e868:	d9801e04 	addi	r6,sp,120
8110e86c:	b80b883a 	mov	r5,r23
8110e870:	1114a380 	call	81114a38 <__sprint_r>
8110e874:	103b6f1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110e878:	d8c02017 	ldw	r3,128(sp)
8110e87c:	da000404 	addi	r8,sp,16
8110e880:	003c9d06 	br	8110daf8 <__reset+0xfb0edaf8>
8110e884:	04e7c83a 	sub	r19,zero,r19
8110e888:	9804c03a 	cmpne	r2,r19,zero
8110e88c:	05adc83a 	sub	r22,zero,r22
8110e890:	b0adc83a 	sub	r22,r22,r2
8110e894:	d8802917 	ldw	r2,164(sp)
8110e898:	07000b44 	movi	fp,45
8110e89c:	df002785 	stb	fp,158(sp)
8110e8a0:	10017b16 	blt	r2,zero,8110ee90 <___vfprintf_internal_r+0x1c64>
8110e8a4:	00bfdfc4 	movi	r2,-129
8110e8a8:	90a4703a 	and	r18,r18,r2
8110e8ac:	003bb106 	br	8110d774 <__reset+0xfb0ed774>
8110e8b0:	d9003617 	ldw	r4,216(sp)
8110e8b4:	d9403817 	ldw	r5,224(sp)
8110e8b8:	da003d15 	stw	r8,244(sp)
8110e8bc:	111465c0 	call	8111465c <__fpclassifyd>
8110e8c0:	da003d17 	ldw	r8,244(sp)
8110e8c4:	1000f026 	beq	r2,zero,8110ec88 <___vfprintf_internal_r+0x1a5c>
8110e8c8:	d9002917 	ldw	r4,164(sp)
8110e8cc:	05bff7c4 	movi	r22,-33
8110e8d0:	00bfffc4 	movi	r2,-1
8110e8d4:	8dac703a 	and	r22,r17,r22
8110e8d8:	20820026 	beq	r4,r2,8110f0dc <___vfprintf_internal_r+0x1eb0>
8110e8dc:	008011c4 	movi	r2,71
8110e8e0:	b081f726 	beq	r22,r2,8110f0c0 <___vfprintf_internal_r+0x1e94>
8110e8e4:	d9003817 	ldw	r4,224(sp)
8110e8e8:	90c04014 	ori	r3,r18,256
8110e8ec:	d8c02b15 	stw	r3,172(sp)
8110e8f0:	20021516 	blt	r4,zero,8110f148 <___vfprintf_internal_r+0x1f1c>
8110e8f4:	dcc03817 	ldw	r19,224(sp)
8110e8f8:	d8002a05 	stb	zero,168(sp)
8110e8fc:	00801984 	movi	r2,102
8110e900:	8881f926 	beq	r17,r2,8110f0e8 <___vfprintf_internal_r+0x1ebc>
8110e904:	00801184 	movi	r2,70
8110e908:	88821c26 	beq	r17,r2,8110f17c <___vfprintf_internal_r+0x1f50>
8110e90c:	00801144 	movi	r2,69
8110e910:	b081ef26 	beq	r22,r2,8110f0d0 <___vfprintf_internal_r+0x1ea4>
8110e914:	d8c02917 	ldw	r3,164(sp)
8110e918:	d8802104 	addi	r2,sp,132
8110e91c:	d8800315 	stw	r2,12(sp)
8110e920:	d9403617 	ldw	r5,216(sp)
8110e924:	d8802504 	addi	r2,sp,148
8110e928:	d9002c17 	ldw	r4,176(sp)
8110e92c:	d8800215 	stw	r2,8(sp)
8110e930:	d8802604 	addi	r2,sp,152
8110e934:	d8c00015 	stw	r3,0(sp)
8110e938:	d8800115 	stw	r2,4(sp)
8110e93c:	01c00084 	movi	r7,2
8110e940:	980d883a 	mov	r6,r19
8110e944:	d8c03c15 	stw	r3,240(sp)
8110e948:	da003d15 	stw	r8,244(sp)
8110e94c:	110f8500 	call	8110f850 <_dtoa_r>
8110e950:	1021883a 	mov	r16,r2
8110e954:	008019c4 	movi	r2,103
8110e958:	d8c03c17 	ldw	r3,240(sp)
8110e95c:	da003d17 	ldw	r8,244(sp)
8110e960:	88817126 	beq	r17,r2,8110ef28 <___vfprintf_internal_r+0x1cfc>
8110e964:	008011c4 	movi	r2,71
8110e968:	88829226 	beq	r17,r2,8110f3b4 <___vfprintf_internal_r+0x2188>
8110e96c:	80f9883a 	add	fp,r16,r3
8110e970:	d9003617 	ldw	r4,216(sp)
8110e974:	000d883a 	mov	r6,zero
8110e978:	000f883a 	mov	r7,zero
8110e97c:	980b883a 	mov	r5,r19
8110e980:	da003d15 	stw	r8,244(sp)
8110e984:	11186b00 	call	811186b0 <__eqdf2>
8110e988:	da003d17 	ldw	r8,244(sp)
8110e98c:	10018d26 	beq	r2,zero,8110efc4 <___vfprintf_internal_r+0x1d98>
8110e990:	d8802117 	ldw	r2,132(sp)
8110e994:	1700062e 	bgeu	r2,fp,8110e9b0 <___vfprintf_internal_r+0x1784>
8110e998:	01000c04 	movi	r4,48
8110e99c:	10c00044 	addi	r3,r2,1
8110e9a0:	d8c02115 	stw	r3,132(sp)
8110e9a4:	11000005 	stb	r4,0(r2)
8110e9a8:	d8802117 	ldw	r2,132(sp)
8110e9ac:	173ffb36 	bltu	r2,fp,8110e99c <__reset+0xfb0ee99c>
8110e9b0:	1405c83a 	sub	r2,r2,r16
8110e9b4:	d8803315 	stw	r2,204(sp)
8110e9b8:	008011c4 	movi	r2,71
8110e9bc:	b0817626 	beq	r22,r2,8110ef98 <___vfprintf_internal_r+0x1d6c>
8110e9c0:	00801944 	movi	r2,101
8110e9c4:	1442810e 	bge	r2,r17,8110f3cc <___vfprintf_internal_r+0x21a0>
8110e9c8:	d8c02617 	ldw	r3,152(sp)
8110e9cc:	00801984 	movi	r2,102
8110e9d0:	d8c03215 	stw	r3,200(sp)
8110e9d4:	8881fe26 	beq	r17,r2,8110f1d0 <___vfprintf_internal_r+0x1fa4>
8110e9d8:	d8c03217 	ldw	r3,200(sp)
8110e9dc:	d9003317 	ldw	r4,204(sp)
8110e9e0:	1901dd16 	blt	r3,r4,8110f158 <___vfprintf_internal_r+0x1f2c>
8110e9e4:	9480004c 	andi	r18,r18,1
8110e9e8:	90022b1e 	bne	r18,zero,8110f298 <___vfprintf_internal_r+0x206c>
8110e9ec:	1805883a 	mov	r2,r3
8110e9f0:	18028016 	blt	r3,zero,8110f3f4 <___vfprintf_internal_r+0x21c8>
8110e9f4:	d8c03217 	ldw	r3,200(sp)
8110e9f8:	044019c4 	movi	r17,103
8110e9fc:	d8c02e15 	stw	r3,184(sp)
8110ea00:	df002a07 	ldb	fp,168(sp)
8110ea04:	e001531e 	bne	fp,zero,8110ef54 <___vfprintf_internal_r+0x1d28>
8110ea08:	df002783 	ldbu	fp,158(sp)
8110ea0c:	d8802a15 	stw	r2,168(sp)
8110ea10:	dc802b17 	ldw	r18,172(sp)
8110ea14:	d8002915 	stw	zero,164(sp)
8110ea18:	003bd106 	br	8110d960 <__reset+0xfb0ed960>
8110ea1c:	d8802d17 	ldw	r2,180(sp)
8110ea20:	d8c02d17 	ldw	r3,180(sp)
8110ea24:	d9002d17 	ldw	r4,180(sp)
8110ea28:	10800017 	ldw	r2,0(r2)
8110ea2c:	18c00117 	ldw	r3,4(r3)
8110ea30:	21000204 	addi	r4,r4,8
8110ea34:	d8803615 	stw	r2,216(sp)
8110ea38:	d8c03815 	stw	r3,224(sp)
8110ea3c:	d9002d15 	stw	r4,180(sp)
8110ea40:	003b7506 	br	8110d818 <__reset+0xfb0ed818>
8110ea44:	ac400007 	ldb	r17,0(r21)
8110ea48:	003a5906 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110ea4c:	9080100c 	andi	r2,r18,64
8110ea50:	1000a826 	beq	r2,zero,8110ecf4 <___vfprintf_internal_r+0x1ac8>
8110ea54:	d9002d17 	ldw	r4,180(sp)
8110ea58:	002d883a 	mov	r22,zero
8110ea5c:	24c0000b 	ldhu	r19,0(r4)
8110ea60:	21000104 	addi	r4,r4,4
8110ea64:	d9002d15 	stw	r4,180(sp)
8110ea68:	003ccb06 	br	8110dd98 <__reset+0xfb0edd98>
8110ea6c:	d8c02d17 	ldw	r3,180(sp)
8110ea70:	d9002917 	ldw	r4,164(sp)
8110ea74:	002d883a 	mov	r22,zero
8110ea78:	18800104 	addi	r2,r3,4
8110ea7c:	1cc00017 	ldw	r19,0(r3)
8110ea80:	203ebb0e 	bge	r4,zero,8110e570 <__reset+0xfb0ee570>
8110ea84:	003ef106 	br	8110e64c <__reset+0xfb0ee64c>
8110ea88:	9080040c 	andi	r2,r18,16
8110ea8c:	1000921e 	bne	r2,zero,8110ecd8 <___vfprintf_internal_r+0x1aac>
8110ea90:	9480100c 	andi	r18,r18,64
8110ea94:	90013926 	beq	r18,zero,8110ef7c <___vfprintf_internal_r+0x1d50>
8110ea98:	d9002d17 	ldw	r4,180(sp)
8110ea9c:	d9402f17 	ldw	r5,188(sp)
8110eaa0:	20800017 	ldw	r2,0(r4)
8110eaa4:	21000104 	addi	r4,r4,4
8110eaa8:	d9002d15 	stw	r4,180(sp)
8110eaac:	1140000d 	sth	r5,0(r2)
8110eab0:	003a1606 	br	8110d30c <__reset+0xfb0ed30c>
8110eab4:	9080100c 	andi	r2,r18,64
8110eab8:	10008026 	beq	r2,zero,8110ecbc <___vfprintf_internal_r+0x1a90>
8110eabc:	d8c02d17 	ldw	r3,180(sp)
8110eac0:	1cc0000f 	ldh	r19,0(r3)
8110eac4:	18c00104 	addi	r3,r3,4
8110eac8:	d8c02d15 	stw	r3,180(sp)
8110eacc:	982dd7fa 	srai	r22,r19,31
8110ead0:	b005883a 	mov	r2,r22
8110ead4:	003b1f06 	br	8110d754 <__reset+0xfb0ed754>
8110ead8:	9080100c 	andi	r2,r18,64
8110eadc:	d8002785 	stb	zero,158(sp)
8110eae0:	10008a1e 	bne	r2,zero,8110ed0c <___vfprintf_internal_r+0x1ae0>
8110eae4:	d9402d17 	ldw	r5,180(sp)
8110eae8:	d8c02917 	ldw	r3,164(sp)
8110eaec:	002d883a 	mov	r22,zero
8110eaf0:	28800104 	addi	r2,r5,4
8110eaf4:	2cc00017 	ldw	r19,0(r5)
8110eaf8:	183e4b0e 	bge	r3,zero,8110e428 <__reset+0xfb0ee428>
8110eafc:	9d86b03a 	or	r3,r19,r22
8110eb00:	d8802d15 	stw	r2,180(sp)
8110eb04:	183e4c1e 	bne	r3,zero,8110e438 <__reset+0xfb0ee438>
8110eb08:	0039883a 	mov	fp,zero
8110eb0c:	0005883a 	mov	r2,zero
8110eb10:	003d4006 	br	8110e014 <__reset+0xfb0ee014>
8110eb14:	016044b4 	movhi	r5,33042
8110eb18:	297f0984 	addi	r5,r5,-986
8110eb1c:	d9402b15 	stw	r5,172(sp)
8110eb20:	d9402b17 	ldw	r5,172(sp)
8110eb24:	1c47883a 	add	r3,r3,r17
8110eb28:	10800044 	addi	r2,r2,1
8110eb2c:	41400015 	stw	r5,0(r8)
8110eb30:	44400115 	stw	r17,4(r8)
8110eb34:	d8c02015 	stw	r3,128(sp)
8110eb38:	d8801f15 	stw	r2,124(sp)
8110eb3c:	010001c4 	movi	r4,7
8110eb40:	20bec816 	blt	r4,r2,8110e664 <__reset+0xfb0ee664>
8110eb44:	42000204 	addi	r8,r8,8
8110eb48:	003ecd06 	br	8110e680 <__reset+0xfb0ee680>
8110eb4c:	d9002917 	ldw	r4,164(sp)
8110eb50:	d8002785 	stb	zero,158(sp)
8110eb54:	203d2d16 	blt	r4,zero,8110e00c <__reset+0xfb0ee00c>
8110eb58:	00bfdfc4 	movi	r2,-129
8110eb5c:	90a4703a 	and	r18,r18,r2
8110eb60:	003a9106 	br	8110d5a8 <__reset+0xfb0ed5a8>
8110eb64:	012044b4 	movhi	r4,33042
8110eb68:	213f0984 	addi	r4,r4,-986
8110eb6c:	d9002b15 	stw	r4,172(sp)
8110eb70:	003c0c06 	br	8110dba4 <__reset+0xfb0edba4>
8110eb74:	d9002c17 	ldw	r4,176(sp)
8110eb78:	d9801e04 	addi	r6,sp,120
8110eb7c:	b80b883a 	mov	r5,r23
8110eb80:	1114a380 	call	81114a38 <__sprint_r>
8110eb84:	103aab1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110eb88:	d8c02017 	ldw	r3,128(sp)
8110eb8c:	da000404 	addi	r8,sp,16
8110eb90:	003d4106 	br	8110e098 <__reset+0xfb0ee098>
8110eb94:	d8801f17 	ldw	r2,124(sp)
8110eb98:	016044b4 	movhi	r5,33042
8110eb9c:	01000044 	movi	r4,1
8110eba0:	18c00044 	addi	r3,r3,1
8110eba4:	10800044 	addi	r2,r2,1
8110eba8:	297f0904 	addi	r5,r5,-988
8110ebac:	41000115 	stw	r4,4(r8)
8110ebb0:	41400015 	stw	r5,0(r8)
8110ebb4:	d8c02015 	stw	r3,128(sp)
8110ebb8:	d8801f15 	stw	r2,124(sp)
8110ebbc:	010001c4 	movi	r4,7
8110ebc0:	20805c16 	blt	r4,r2,8110ed34 <___vfprintf_internal_r+0x1b08>
8110ebc4:	42000204 	addi	r8,r8,8
8110ebc8:	8800041e 	bne	r17,zero,8110ebdc <___vfprintf_internal_r+0x19b0>
8110ebcc:	d8803317 	ldw	r2,204(sp)
8110ebd0:	1000021e 	bne	r2,zero,8110ebdc <___vfprintf_internal_r+0x19b0>
8110ebd4:	9080004c 	andi	r2,r18,1
8110ebd8:	103c0926 	beq	r2,zero,8110dc00 <__reset+0xfb0edc00>
8110ebdc:	d9003717 	ldw	r4,220(sp)
8110ebe0:	d8801f17 	ldw	r2,124(sp)
8110ebe4:	d9403417 	ldw	r5,208(sp)
8110ebe8:	20c7883a 	add	r3,r4,r3
8110ebec:	10800044 	addi	r2,r2,1
8110ebf0:	41000115 	stw	r4,4(r8)
8110ebf4:	41400015 	stw	r5,0(r8)
8110ebf8:	d8c02015 	stw	r3,128(sp)
8110ebfc:	d8801f15 	stw	r2,124(sp)
8110ec00:	010001c4 	movi	r4,7
8110ec04:	20812116 	blt	r4,r2,8110f08c <___vfprintf_internal_r+0x1e60>
8110ec08:	42000204 	addi	r8,r8,8
8110ec0c:	0463c83a 	sub	r17,zero,r17
8110ec10:	0440730e 	bge	zero,r17,8110ede0 <___vfprintf_internal_r+0x1bb4>
8110ec14:	05800404 	movi	r22,16
8110ec18:	b440860e 	bge	r22,r17,8110ee34 <___vfprintf_internal_r+0x1c08>
8110ec1c:	016044b4 	movhi	r5,33042
8110ec20:	297f0984 	addi	r5,r5,-986
8110ec24:	d9402b15 	stw	r5,172(sp)
8110ec28:	070001c4 	movi	fp,7
8110ec2c:	dcc02c17 	ldw	r19,176(sp)
8110ec30:	00000306 	br	8110ec40 <___vfprintf_internal_r+0x1a14>
8110ec34:	42000204 	addi	r8,r8,8
8110ec38:	8c7ffc04 	addi	r17,r17,-16
8110ec3c:	b440800e 	bge	r22,r17,8110ee40 <___vfprintf_internal_r+0x1c14>
8110ec40:	18c00404 	addi	r3,r3,16
8110ec44:	10800044 	addi	r2,r2,1
8110ec48:	45000015 	stw	r20,0(r8)
8110ec4c:	45800115 	stw	r22,4(r8)
8110ec50:	d8c02015 	stw	r3,128(sp)
8110ec54:	d8801f15 	stw	r2,124(sp)
8110ec58:	e0bff60e 	bge	fp,r2,8110ec34 <__reset+0xfb0eec34>
8110ec5c:	d9801e04 	addi	r6,sp,120
8110ec60:	b80b883a 	mov	r5,r23
8110ec64:	9809883a 	mov	r4,r19
8110ec68:	1114a380 	call	81114a38 <__sprint_r>
8110ec6c:	103a711e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110ec70:	d8c02017 	ldw	r3,128(sp)
8110ec74:	d8801f17 	ldw	r2,124(sp)
8110ec78:	da000404 	addi	r8,sp,16
8110ec7c:	003fee06 	br	8110ec38 <__reset+0xfb0eec38>
8110ec80:	00bfffc4 	movi	r2,-1
8110ec84:	003a6f06 	br	8110d644 <__reset+0xfb0ed644>
8110ec88:	008011c4 	movi	r2,71
8110ec8c:	1440b816 	blt	r2,r17,8110ef70 <___vfprintf_internal_r+0x1d44>
8110ec90:	042044b4 	movhi	r16,33042
8110ec94:	843efb04 	addi	r16,r16,-1044
8110ec98:	00c000c4 	movi	r3,3
8110ec9c:	00bfdfc4 	movi	r2,-129
8110eca0:	d8c02a15 	stw	r3,168(sp)
8110eca4:	90a4703a 	and	r18,r18,r2
8110eca8:	df002783 	ldbu	fp,158(sp)
8110ecac:	d8c02e15 	stw	r3,184(sp)
8110ecb0:	d8002915 	stw	zero,164(sp)
8110ecb4:	d8003215 	stw	zero,200(sp)
8110ecb8:	003b2906 	br	8110d960 <__reset+0xfb0ed960>
8110ecbc:	d9002d17 	ldw	r4,180(sp)
8110ecc0:	24c00017 	ldw	r19,0(r4)
8110ecc4:	21000104 	addi	r4,r4,4
8110ecc8:	d9002d15 	stw	r4,180(sp)
8110eccc:	982dd7fa 	srai	r22,r19,31
8110ecd0:	b005883a 	mov	r2,r22
8110ecd4:	003a9f06 	br	8110d754 <__reset+0xfb0ed754>
8110ecd8:	d9402d17 	ldw	r5,180(sp)
8110ecdc:	d8c02f17 	ldw	r3,188(sp)
8110ece0:	28800017 	ldw	r2,0(r5)
8110ece4:	29400104 	addi	r5,r5,4
8110ece8:	d9402d15 	stw	r5,180(sp)
8110ecec:	10c00015 	stw	r3,0(r2)
8110ecf0:	00398606 	br	8110d30c <__reset+0xfb0ed30c>
8110ecf4:	d9402d17 	ldw	r5,180(sp)
8110ecf8:	002d883a 	mov	r22,zero
8110ecfc:	2cc00017 	ldw	r19,0(r5)
8110ed00:	29400104 	addi	r5,r5,4
8110ed04:	d9402d15 	stw	r5,180(sp)
8110ed08:	003c2306 	br	8110dd98 <__reset+0xfb0edd98>
8110ed0c:	d8c02d17 	ldw	r3,180(sp)
8110ed10:	d9002917 	ldw	r4,164(sp)
8110ed14:	002d883a 	mov	r22,zero
8110ed18:	18800104 	addi	r2,r3,4
8110ed1c:	1cc0000b 	ldhu	r19,0(r3)
8110ed20:	203dc10e 	bge	r4,zero,8110e428 <__reset+0xfb0ee428>
8110ed24:	003f7506 	br	8110eafc <__reset+0xfb0eeafc>
8110ed28:	042044b4 	movhi	r16,33042
8110ed2c:	843ef904 	addi	r16,r16,-1052
8110ed30:	003acc06 	br	8110d864 <__reset+0xfb0ed864>
8110ed34:	d9002c17 	ldw	r4,176(sp)
8110ed38:	d9801e04 	addi	r6,sp,120
8110ed3c:	b80b883a 	mov	r5,r23
8110ed40:	1114a380 	call	81114a38 <__sprint_r>
8110ed44:	103a3b1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110ed48:	dc402617 	ldw	r17,152(sp)
8110ed4c:	d8c02017 	ldw	r3,128(sp)
8110ed50:	da000404 	addi	r8,sp,16
8110ed54:	003f9c06 	br	8110ebc8 <__reset+0xfb0eebc8>
8110ed58:	ac400043 	ldbu	r17,1(r21)
8110ed5c:	94800814 	ori	r18,r18,32
8110ed60:	ad400044 	addi	r21,r21,1
8110ed64:	8c403fcc 	andi	r17,r17,255
8110ed68:	8c40201c 	xori	r17,r17,128
8110ed6c:	8c7fe004 	addi	r17,r17,-128
8110ed70:	00398f06 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110ed74:	d8c02d15 	stw	r3,180(sp)
8110ed78:	0039883a 	mov	fp,zero
8110ed7c:	003e3506 	br	8110e654 <__reset+0xfb0ee654>
8110ed80:	d9002c17 	ldw	r4,176(sp)
8110ed84:	d9801e04 	addi	r6,sp,120
8110ed88:	b80b883a 	mov	r5,r23
8110ed8c:	1114a380 	call	81114a38 <__sprint_r>
8110ed90:	103a281e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110ed94:	d8c02017 	ldw	r3,128(sp)
8110ed98:	da000404 	addi	r8,sp,16
8110ed9c:	003cd006 	br	8110e0e0 <__reset+0xfb0ee0e0>
8110eda0:	8009883a 	mov	r4,r16
8110eda4:	da003d15 	stw	r8,244(sp)
8110eda8:	110d1940 	call	8110d194 <strlen>
8110edac:	d8802e15 	stw	r2,184(sp)
8110edb0:	da003d17 	ldw	r8,244(sp)
8110edb4:	103c340e 	bge	r2,zero,8110de88 <__reset+0xfb0ede88>
8110edb8:	0005883a 	mov	r2,zero
8110edbc:	003c3206 	br	8110de88 <__reset+0xfb0ede88>
8110edc0:	d9002c17 	ldw	r4,176(sp)
8110edc4:	d9801e04 	addi	r6,sp,120
8110edc8:	b80b883a 	mov	r5,r23
8110edcc:	1114a380 	call	81114a38 <__sprint_r>
8110edd0:	103a181e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110edd4:	d8c02017 	ldw	r3,128(sp)
8110edd8:	d8801f17 	ldw	r2,124(sp)
8110eddc:	da000404 	addi	r8,sp,16
8110ede0:	d9403317 	ldw	r5,204(sp)
8110ede4:	10800044 	addi	r2,r2,1
8110ede8:	44000015 	stw	r16,0(r8)
8110edec:	28c7883a 	add	r3,r5,r3
8110edf0:	003b7d06 	br	8110dbe8 <__reset+0xfb0edbe8>
8110edf4:	012044b4 	movhi	r4,33042
8110edf8:	213f0d84 	addi	r4,r4,-970
8110edfc:	d9003515 	stw	r4,212(sp)
8110ee00:	003b1406 	br	8110da54 <__reset+0xfb0eda54>
8110ee04:	013fffc4 	movi	r4,-1
8110ee08:	003a3506 	br	8110d6e0 <__reset+0xfb0ed6e0>
8110ee0c:	0023883a 	mov	r17,zero
8110ee10:	003d9d06 	br	8110e488 <__reset+0xfb0ee488>
8110ee14:	d9002c17 	ldw	r4,176(sp)
8110ee18:	d9801e04 	addi	r6,sp,120
8110ee1c:	b80b883a 	mov	r5,r23
8110ee20:	1114a380 	call	81114a38 <__sprint_r>
8110ee24:	103a031e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110ee28:	d8c02017 	ldw	r3,128(sp)
8110ee2c:	da000404 	addi	r8,sp,16
8110ee30:	003d9406 	br	8110e484 <__reset+0xfb0ee484>
8110ee34:	012044b4 	movhi	r4,33042
8110ee38:	213f0984 	addi	r4,r4,-986
8110ee3c:	d9002b15 	stw	r4,172(sp)
8110ee40:	d9002b17 	ldw	r4,172(sp)
8110ee44:	1c47883a 	add	r3,r3,r17
8110ee48:	10800044 	addi	r2,r2,1
8110ee4c:	41000015 	stw	r4,0(r8)
8110ee50:	44400115 	stw	r17,4(r8)
8110ee54:	d8c02015 	stw	r3,128(sp)
8110ee58:	d8801f15 	stw	r2,124(sp)
8110ee5c:	010001c4 	movi	r4,7
8110ee60:	20bfd716 	blt	r4,r2,8110edc0 <__reset+0xfb0eedc0>
8110ee64:	42000204 	addi	r8,r8,8
8110ee68:	003fdd06 	br	8110ede0 <__reset+0xfb0eede0>
8110ee6c:	d9002c17 	ldw	r4,176(sp)
8110ee70:	d9801e04 	addi	r6,sp,120
8110ee74:	b80b883a 	mov	r5,r23
8110ee78:	1114a380 	call	81114a38 <__sprint_r>
8110ee7c:	1039ed1e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110ee80:	d8802617 	ldw	r2,152(sp)
8110ee84:	d8c02017 	ldw	r3,128(sp)
8110ee88:	da000404 	addi	r8,sp,16
8110ee8c:	003e1006 	br	8110e6d0 <__reset+0xfb0ee6d0>
8110ee90:	00800044 	movi	r2,1
8110ee94:	10803fcc 	andi	r2,r2,255
8110ee98:	00c00044 	movi	r3,1
8110ee9c:	10fa3526 	beq	r2,r3,8110d774 <__reset+0xfb0ed774>
8110eea0:	00c00084 	movi	r3,2
8110eea4:	10fbcb26 	beq	r2,r3,8110ddd4 <__reset+0xfb0eddd4>
8110eea8:	003a8f06 	br	8110d8e8 <__reset+0xfb0ed8e8>
8110eeac:	012044b4 	movhi	r4,33042
8110eeb0:	213f0d84 	addi	r4,r4,-970
8110eeb4:	d9003515 	stw	r4,212(sp)
8110eeb8:	003b7606 	br	8110dc94 <__reset+0xfb0edc94>
8110eebc:	d8802917 	ldw	r2,164(sp)
8110eec0:	00c00184 	movi	r3,6
8110eec4:	1880012e 	bgeu	r3,r2,8110eecc <___vfprintf_internal_r+0x1ca0>
8110eec8:	1805883a 	mov	r2,r3
8110eecc:	d8802e15 	stw	r2,184(sp)
8110eed0:	1000ef16 	blt	r2,zero,8110f290 <___vfprintf_internal_r+0x2064>
8110eed4:	042044b4 	movhi	r16,33042
8110eed8:	d8802a15 	stw	r2,168(sp)
8110eedc:	dcc02d15 	stw	r19,180(sp)
8110eee0:	d8002915 	stw	zero,164(sp)
8110eee4:	d8003215 	stw	zero,200(sp)
8110eee8:	843f0704 	addi	r16,r16,-996
8110eeec:	0039883a 	mov	fp,zero
8110eef0:	003aa206 	br	8110d97c <__reset+0xfb0ed97c>
8110eef4:	0021883a 	mov	r16,zero
8110eef8:	003e0706 	br	8110e718 <__reset+0xfb0ee718>
8110eefc:	d9002c17 	ldw	r4,176(sp)
8110ef00:	d9801e04 	addi	r6,sp,120
8110ef04:	b80b883a 	mov	r5,r23
8110ef08:	1114a380 	call	81114a38 <__sprint_r>
8110ef0c:	1039c91e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110ef10:	d8802617 	ldw	r2,152(sp)
8110ef14:	d9403317 	ldw	r5,204(sp)
8110ef18:	d8c02017 	ldw	r3,128(sp)
8110ef1c:	da000404 	addi	r8,sp,16
8110ef20:	2885c83a 	sub	r2,r5,r2
8110ef24:	003dfb06 	br	8110e714 <__reset+0xfb0ee714>
8110ef28:	9080004c 	andi	r2,r18,1
8110ef2c:	103e8f1e 	bne	r2,zero,8110e96c <__reset+0xfb0ee96c>
8110ef30:	d8802117 	ldw	r2,132(sp)
8110ef34:	003e9e06 	br	8110e9b0 <__reset+0xfb0ee9b0>
8110ef38:	1025883a 	mov	r18,r2
8110ef3c:	0039883a 	mov	fp,zero
8110ef40:	00800084 	movi	r2,2
8110ef44:	003fd306 	br	8110ee94 <__reset+0xfb0eee94>
8110ef48:	07000b44 	movi	fp,45
8110ef4c:	df002785 	stb	fp,158(sp)
8110ef50:	003a4006 	br	8110d854 <__reset+0xfb0ed854>
8110ef54:	00c00b44 	movi	r3,45
8110ef58:	d8c02785 	stb	r3,158(sp)
8110ef5c:	d8802a15 	stw	r2,168(sp)
8110ef60:	dc802b17 	ldw	r18,172(sp)
8110ef64:	d8002915 	stw	zero,164(sp)
8110ef68:	07000b44 	movi	fp,45
8110ef6c:	003a8006 	br	8110d970 <__reset+0xfb0ed970>
8110ef70:	042044b4 	movhi	r16,33042
8110ef74:	843efc04 	addi	r16,r16,-1040
8110ef78:	003f4706 	br	8110ec98 <__reset+0xfb0eec98>
8110ef7c:	d8c02d17 	ldw	r3,180(sp)
8110ef80:	d9002f17 	ldw	r4,188(sp)
8110ef84:	18800017 	ldw	r2,0(r3)
8110ef88:	18c00104 	addi	r3,r3,4
8110ef8c:	d8c02d15 	stw	r3,180(sp)
8110ef90:	11000015 	stw	r4,0(r2)
8110ef94:	0038dd06 	br	8110d30c <__reset+0xfb0ed30c>
8110ef98:	dd802617 	ldw	r22,152(sp)
8110ef9c:	00bfff44 	movi	r2,-3
8110efa0:	b0801c16 	blt	r22,r2,8110f014 <___vfprintf_internal_r+0x1de8>
8110efa4:	d9402917 	ldw	r5,164(sp)
8110efa8:	2d801a16 	blt	r5,r22,8110f014 <___vfprintf_internal_r+0x1de8>
8110efac:	dd803215 	stw	r22,200(sp)
8110efb0:	003e8906 	br	8110e9d8 <__reset+0xfb0ee9d8>
8110efb4:	012044b4 	movhi	r4,33042
8110efb8:	213f0984 	addi	r4,r4,-986
8110efbc:	d9002b15 	stw	r4,172(sp)
8110efc0:	003c9106 	br	8110e208 <__reset+0xfb0ee208>
8110efc4:	e005883a 	mov	r2,fp
8110efc8:	003e7906 	br	8110e9b0 <__reset+0xfb0ee9b0>
8110efcc:	d9402917 	ldw	r5,164(sp)
8110efd0:	df002783 	ldbu	fp,158(sp)
8110efd4:	dcc02d15 	stw	r19,180(sp)
8110efd8:	d9402a15 	stw	r5,168(sp)
8110efdc:	d9402e15 	stw	r5,184(sp)
8110efe0:	d8002915 	stw	zero,164(sp)
8110efe4:	d8003215 	stw	zero,200(sp)
8110efe8:	003a5d06 	br	8110d960 <__reset+0xfb0ed960>
8110efec:	9080004c 	andi	r2,r18,1
8110eff0:	0039883a 	mov	fp,zero
8110eff4:	10000426 	beq	r2,zero,8110f008 <___vfprintf_internal_r+0x1ddc>
8110eff8:	00800c04 	movi	r2,48
8110effc:	dc001dc4 	addi	r16,sp,119
8110f000:	d8801dc5 	stb	r2,119(sp)
8110f004:	003b8006 	br	8110de08 <__reset+0xfb0ede08>
8110f008:	d8002e15 	stw	zero,184(sp)
8110f00c:	dc001e04 	addi	r16,sp,120
8110f010:	003a4d06 	br	8110d948 <__reset+0xfb0ed948>
8110f014:	8c7fff84 	addi	r17,r17,-2
8110f018:	b5bfffc4 	addi	r22,r22,-1
8110f01c:	dd802615 	stw	r22,152(sp)
8110f020:	dc4022c5 	stb	r17,139(sp)
8110f024:	b000bf16 	blt	r22,zero,8110f324 <___vfprintf_internal_r+0x20f8>
8110f028:	00800ac4 	movi	r2,43
8110f02c:	d8802305 	stb	r2,140(sp)
8110f030:	00800244 	movi	r2,9
8110f034:	15807016 	blt	r2,r22,8110f1f8 <___vfprintf_internal_r+0x1fcc>
8110f038:	00800c04 	movi	r2,48
8110f03c:	b5800c04 	addi	r22,r22,48
8110f040:	d8802345 	stb	r2,141(sp)
8110f044:	dd802385 	stb	r22,142(sp)
8110f048:	d88023c4 	addi	r2,sp,143
8110f04c:	df0022c4 	addi	fp,sp,139
8110f050:	d8c03317 	ldw	r3,204(sp)
8110f054:	1739c83a 	sub	fp,r2,fp
8110f058:	d9003317 	ldw	r4,204(sp)
8110f05c:	e0c7883a 	add	r3,fp,r3
8110f060:	df003a15 	stw	fp,232(sp)
8110f064:	d8c02e15 	stw	r3,184(sp)
8110f068:	00800044 	movi	r2,1
8110f06c:	1100b30e 	bge	r2,r4,8110f33c <___vfprintf_internal_r+0x2110>
8110f070:	d8c02e17 	ldw	r3,184(sp)
8110f074:	18c00044 	addi	r3,r3,1
8110f078:	d8c02e15 	stw	r3,184(sp)
8110f07c:	1805883a 	mov	r2,r3
8110f080:	1800ac16 	blt	r3,zero,8110f334 <___vfprintf_internal_r+0x2108>
8110f084:	d8003215 	stw	zero,200(sp)
8110f088:	003e5d06 	br	8110ea00 <__reset+0xfb0eea00>
8110f08c:	d9002c17 	ldw	r4,176(sp)
8110f090:	d9801e04 	addi	r6,sp,120
8110f094:	b80b883a 	mov	r5,r23
8110f098:	1114a380 	call	81114a38 <__sprint_r>
8110f09c:	1039651e 	bne	r2,zero,8110d634 <__reset+0xfb0ed634>
8110f0a0:	dc402617 	ldw	r17,152(sp)
8110f0a4:	d8c02017 	ldw	r3,128(sp)
8110f0a8:	d8801f17 	ldw	r2,124(sp)
8110f0ac:	da000404 	addi	r8,sp,16
8110f0b0:	003ed606 	br	8110ec0c <__reset+0xfb0eec0c>
8110f0b4:	582b883a 	mov	r21,r11
8110f0b8:	d8002915 	stw	zero,164(sp)
8110f0bc:	0038bd06 	br	8110d3b4 <__reset+0xfb0ed3b4>
8110f0c0:	d8802917 	ldw	r2,164(sp)
8110f0c4:	103e071e 	bne	r2,zero,8110e8e4 <__reset+0xfb0ee8e4>
8110f0c8:	dc002915 	stw	r16,164(sp)
8110f0cc:	003e0506 	br	8110e8e4 <__reset+0xfb0ee8e4>
8110f0d0:	d9002917 	ldw	r4,164(sp)
8110f0d4:	20c00044 	addi	r3,r4,1
8110f0d8:	003e0f06 	br	8110e918 <__reset+0xfb0ee918>
8110f0dc:	01400184 	movi	r5,6
8110f0e0:	d9402915 	stw	r5,164(sp)
8110f0e4:	003dff06 	br	8110e8e4 <__reset+0xfb0ee8e4>
8110f0e8:	d8802104 	addi	r2,sp,132
8110f0ec:	d8800315 	stw	r2,12(sp)
8110f0f0:	d8802504 	addi	r2,sp,148
8110f0f4:	d8800215 	stw	r2,8(sp)
8110f0f8:	d8802604 	addi	r2,sp,152
8110f0fc:	d8800115 	stw	r2,4(sp)
8110f100:	d8802917 	ldw	r2,164(sp)
8110f104:	d9403617 	ldw	r5,216(sp)
8110f108:	d9002c17 	ldw	r4,176(sp)
8110f10c:	d8800015 	stw	r2,0(sp)
8110f110:	01c000c4 	movi	r7,3
8110f114:	980d883a 	mov	r6,r19
8110f118:	da003d15 	stw	r8,244(sp)
8110f11c:	110f8500 	call	8110f850 <_dtoa_r>
8110f120:	d8c02917 	ldw	r3,164(sp)
8110f124:	da003d17 	ldw	r8,244(sp)
8110f128:	1021883a 	mov	r16,r2
8110f12c:	10f9883a 	add	fp,r2,r3
8110f130:	81000007 	ldb	r4,0(r16)
8110f134:	00800c04 	movi	r2,48
8110f138:	20805e26 	beq	r4,r2,8110f2b4 <___vfprintf_internal_r+0x2088>
8110f13c:	d8c02617 	ldw	r3,152(sp)
8110f140:	e0f9883a 	add	fp,fp,r3
8110f144:	003e0a06 	br	8110e970 <__reset+0xfb0ee970>
8110f148:	00c00b44 	movi	r3,45
8110f14c:	24e0003c 	xorhi	r19,r4,32768
8110f150:	d8c02a05 	stb	r3,168(sp)
8110f154:	003de906 	br	8110e8fc <__reset+0xfb0ee8fc>
8110f158:	d8c03217 	ldw	r3,200(sp)
8110f15c:	00c07a0e 	bge	zero,r3,8110f348 <___vfprintf_internal_r+0x211c>
8110f160:	00800044 	movi	r2,1
8110f164:	d9003317 	ldw	r4,204(sp)
8110f168:	1105883a 	add	r2,r2,r4
8110f16c:	d8802e15 	stw	r2,184(sp)
8110f170:	10004e16 	blt	r2,zero,8110f2ac <___vfprintf_internal_r+0x2080>
8110f174:	044019c4 	movi	r17,103
8110f178:	003e2106 	br	8110ea00 <__reset+0xfb0eea00>
8110f17c:	d9002917 	ldw	r4,164(sp)
8110f180:	d8802104 	addi	r2,sp,132
8110f184:	d8800315 	stw	r2,12(sp)
8110f188:	d9000015 	stw	r4,0(sp)
8110f18c:	d8802504 	addi	r2,sp,148
8110f190:	d9403617 	ldw	r5,216(sp)
8110f194:	d9002c17 	ldw	r4,176(sp)
8110f198:	d8800215 	stw	r2,8(sp)
8110f19c:	d8802604 	addi	r2,sp,152
8110f1a0:	d8800115 	stw	r2,4(sp)
8110f1a4:	01c000c4 	movi	r7,3
8110f1a8:	980d883a 	mov	r6,r19
8110f1ac:	da003d15 	stw	r8,244(sp)
8110f1b0:	110f8500 	call	8110f850 <_dtoa_r>
8110f1b4:	d8c02917 	ldw	r3,164(sp)
8110f1b8:	da003d17 	ldw	r8,244(sp)
8110f1bc:	1021883a 	mov	r16,r2
8110f1c0:	00801184 	movi	r2,70
8110f1c4:	80f9883a 	add	fp,r16,r3
8110f1c8:	88bfd926 	beq	r17,r2,8110f130 <__reset+0xfb0ef130>
8110f1cc:	003de806 	br	8110e970 <__reset+0xfb0ee970>
8110f1d0:	d9002917 	ldw	r4,164(sp)
8110f1d4:	00c04d0e 	bge	zero,r3,8110f30c <___vfprintf_internal_r+0x20e0>
8110f1d8:	2000441e 	bne	r4,zero,8110f2ec <___vfprintf_internal_r+0x20c0>
8110f1dc:	9480004c 	andi	r18,r18,1
8110f1e0:	9000421e 	bne	r18,zero,8110f2ec <___vfprintf_internal_r+0x20c0>
8110f1e4:	1805883a 	mov	r2,r3
8110f1e8:	18007016 	blt	r3,zero,8110f3ac <___vfprintf_internal_r+0x2180>
8110f1ec:	d8c03217 	ldw	r3,200(sp)
8110f1f0:	d8c02e15 	stw	r3,184(sp)
8110f1f4:	003e0206 	br	8110ea00 <__reset+0xfb0eea00>
8110f1f8:	df0022c4 	addi	fp,sp,139
8110f1fc:	dc002915 	stw	r16,164(sp)
8110f200:	4027883a 	mov	r19,r8
8110f204:	e021883a 	mov	r16,fp
8110f208:	b009883a 	mov	r4,r22
8110f20c:	01400284 	movi	r5,10
8110f210:	11173ec0 	call	811173ec <__modsi3>
8110f214:	10800c04 	addi	r2,r2,48
8110f218:	843fffc4 	addi	r16,r16,-1
8110f21c:	b009883a 	mov	r4,r22
8110f220:	01400284 	movi	r5,10
8110f224:	80800005 	stb	r2,0(r16)
8110f228:	11173680 	call	81117368 <__divsi3>
8110f22c:	102d883a 	mov	r22,r2
8110f230:	00800244 	movi	r2,9
8110f234:	15bff416 	blt	r2,r22,8110f208 <__reset+0xfb0ef208>
8110f238:	9811883a 	mov	r8,r19
8110f23c:	b0800c04 	addi	r2,r22,48
8110f240:	8027883a 	mov	r19,r16
8110f244:	997fffc4 	addi	r5,r19,-1
8110f248:	98bfffc5 	stb	r2,-1(r19)
8110f24c:	dc002917 	ldw	r16,164(sp)
8110f250:	2f006a2e 	bgeu	r5,fp,8110f3fc <___vfprintf_internal_r+0x21d0>
8110f254:	d9c02384 	addi	r7,sp,142
8110f258:	3ccfc83a 	sub	r7,r7,r19
8110f25c:	d9002344 	addi	r4,sp,141
8110f260:	e1cf883a 	add	r7,fp,r7
8110f264:	00000106 	br	8110f26c <___vfprintf_internal_r+0x2040>
8110f268:	28800003 	ldbu	r2,0(r5)
8110f26c:	20800005 	stb	r2,0(r4)
8110f270:	21000044 	addi	r4,r4,1
8110f274:	29400044 	addi	r5,r5,1
8110f278:	393ffb1e 	bne	r7,r4,8110f268 <__reset+0xfb0ef268>
8110f27c:	d8802304 	addi	r2,sp,140
8110f280:	14c5c83a 	sub	r2,r2,r19
8110f284:	d8c02344 	addi	r3,sp,141
8110f288:	1885883a 	add	r2,r3,r2
8110f28c:	003f7006 	br	8110f050 <__reset+0xfb0ef050>
8110f290:	0005883a 	mov	r2,zero
8110f294:	003f0f06 	br	8110eed4 <__reset+0xfb0eeed4>
8110f298:	d8c03217 	ldw	r3,200(sp)
8110f29c:	18c00044 	addi	r3,r3,1
8110f2a0:	d8c02e15 	stw	r3,184(sp)
8110f2a4:	1805883a 	mov	r2,r3
8110f2a8:	183fb20e 	bge	r3,zero,8110f174 <__reset+0xfb0ef174>
8110f2ac:	0005883a 	mov	r2,zero
8110f2b0:	003fb006 	br	8110f174 <__reset+0xfb0ef174>
8110f2b4:	d9003617 	ldw	r4,216(sp)
8110f2b8:	000d883a 	mov	r6,zero
8110f2bc:	000f883a 	mov	r7,zero
8110f2c0:	980b883a 	mov	r5,r19
8110f2c4:	d8c03c15 	stw	r3,240(sp)
8110f2c8:	da003d15 	stw	r8,244(sp)
8110f2cc:	11186b00 	call	811186b0 <__eqdf2>
8110f2d0:	d8c03c17 	ldw	r3,240(sp)
8110f2d4:	da003d17 	ldw	r8,244(sp)
8110f2d8:	103f9826 	beq	r2,zero,8110f13c <__reset+0xfb0ef13c>
8110f2dc:	00800044 	movi	r2,1
8110f2e0:	10c7c83a 	sub	r3,r2,r3
8110f2e4:	d8c02615 	stw	r3,152(sp)
8110f2e8:	003f9506 	br	8110f140 <__reset+0xfb0ef140>
8110f2ec:	d9002917 	ldw	r4,164(sp)
8110f2f0:	d8c03217 	ldw	r3,200(sp)
8110f2f4:	20800044 	addi	r2,r4,1
8110f2f8:	1885883a 	add	r2,r3,r2
8110f2fc:	d8802e15 	stw	r2,184(sp)
8110f300:	103dbf0e 	bge	r2,zero,8110ea00 <__reset+0xfb0eea00>
8110f304:	0005883a 	mov	r2,zero
8110f308:	003dbd06 	br	8110ea00 <__reset+0xfb0eea00>
8110f30c:	2000211e 	bne	r4,zero,8110f394 <___vfprintf_internal_r+0x2168>
8110f310:	9480004c 	andi	r18,r18,1
8110f314:	90001f1e 	bne	r18,zero,8110f394 <___vfprintf_internal_r+0x2168>
8110f318:	00800044 	movi	r2,1
8110f31c:	d8802e15 	stw	r2,184(sp)
8110f320:	003db706 	br	8110ea00 <__reset+0xfb0eea00>
8110f324:	00800b44 	movi	r2,45
8110f328:	05adc83a 	sub	r22,zero,r22
8110f32c:	d8802305 	stb	r2,140(sp)
8110f330:	003f3f06 	br	8110f030 <__reset+0xfb0ef030>
8110f334:	0005883a 	mov	r2,zero
8110f338:	003f5206 	br	8110f084 <__reset+0xfb0ef084>
8110f33c:	90a4703a 	and	r18,r18,r2
8110f340:	903f4e26 	beq	r18,zero,8110f07c <__reset+0xfb0ef07c>
8110f344:	003f4a06 	br	8110f070 <__reset+0xfb0ef070>
8110f348:	00800084 	movi	r2,2
8110f34c:	10c5c83a 	sub	r2,r2,r3
8110f350:	003f8406 	br	8110f164 <__reset+0xfb0ef164>
8110f354:	d8802d17 	ldw	r2,180(sp)
8110f358:	d9002d17 	ldw	r4,180(sp)
8110f35c:	ac400043 	ldbu	r17,1(r21)
8110f360:	10800017 	ldw	r2,0(r2)
8110f364:	582b883a 	mov	r21,r11
8110f368:	d8802915 	stw	r2,164(sp)
8110f36c:	20800104 	addi	r2,r4,4
8110f370:	d9002917 	ldw	r4,164(sp)
8110f374:	d8802d15 	stw	r2,180(sp)
8110f378:	203e7a0e 	bge	r4,zero,8110ed64 <__reset+0xfb0eed64>
8110f37c:	8c403fcc 	andi	r17,r17,255
8110f380:	00bfffc4 	movi	r2,-1
8110f384:	8c40201c 	xori	r17,r17,128
8110f388:	d8802915 	stw	r2,164(sp)
8110f38c:	8c7fe004 	addi	r17,r17,-128
8110f390:	00380706 	br	8110d3b0 <__reset+0xfb0ed3b0>
8110f394:	d8c02917 	ldw	r3,164(sp)
8110f398:	18c00084 	addi	r3,r3,2
8110f39c:	d8c02e15 	stw	r3,184(sp)
8110f3a0:	1805883a 	mov	r2,r3
8110f3a4:	183d960e 	bge	r3,zero,8110ea00 <__reset+0xfb0eea00>
8110f3a8:	003fd606 	br	8110f304 <__reset+0xfb0ef304>
8110f3ac:	0005883a 	mov	r2,zero
8110f3b0:	003f8e06 	br	8110f1ec <__reset+0xfb0ef1ec>
8110f3b4:	9080004c 	andi	r2,r18,1
8110f3b8:	103f811e 	bne	r2,zero,8110f1c0 <__reset+0xfb0ef1c0>
8110f3bc:	d8802117 	ldw	r2,132(sp)
8110f3c0:	1405c83a 	sub	r2,r2,r16
8110f3c4:	d8803315 	stw	r2,204(sp)
8110f3c8:	b47ef326 	beq	r22,r17,8110ef98 <__reset+0xfb0eef98>
8110f3cc:	dd802617 	ldw	r22,152(sp)
8110f3d0:	003f1106 	br	8110f018 <__reset+0xfb0ef018>
8110f3d4:	d9c02785 	stb	r7,158(sp)
8110f3d8:	00390406 	br	8110d7ec <__reset+0xfb0ed7ec>
8110f3dc:	d9c02785 	stb	r7,158(sp)
8110f3e0:	0038d306 	br	8110d730 <__reset+0xfb0ed730>
8110f3e4:	d9c02785 	stb	r7,158(sp)
8110f3e8:	003a6106 	br	8110dd70 <__reset+0xfb0edd70>
8110f3ec:	d9c02785 	stb	r7,158(sp)
8110f3f0:	003af806 	br	8110dfd4 <__reset+0xfb0edfd4>
8110f3f4:	0005883a 	mov	r2,zero
8110f3f8:	003d7e06 	br	8110e9f4 <__reset+0xfb0ee9f4>
8110f3fc:	d8802344 	addi	r2,sp,141
8110f400:	003f1306 	br	8110f050 <__reset+0xfb0ef050>
8110f404:	d9c02785 	stb	r7,158(sp)
8110f408:	00392306 	br	8110d898 <__reset+0xfb0ed898>
8110f40c:	d9c02785 	stb	r7,158(sp)
8110f410:	003aa906 	br	8110deb8 <__reset+0xfb0edeb8>
8110f414:	d9c02785 	stb	r7,158(sp)
8110f418:	003a3d06 	br	8110dd10 <__reset+0xfb0edd10>
8110f41c:	d9c02785 	stb	r7,158(sp)
8110f420:	003aca06 	br	8110df4c <__reset+0xfb0edf4c>

8110f424 <__vfprintf_internal>:
8110f424:	00a044b4 	movhi	r2,33042
8110f428:	10873404 	addi	r2,r2,7376
8110f42c:	300f883a 	mov	r7,r6
8110f430:	280d883a 	mov	r6,r5
8110f434:	200b883a 	mov	r5,r4
8110f438:	11000017 	ldw	r4,0(r2)
8110f43c:	110d22c1 	jmpi	8110d22c <___vfprintf_internal_r>

8110f440 <__sbprintf>:
8110f440:	2880030b 	ldhu	r2,12(r5)
8110f444:	2ac01917 	ldw	r11,100(r5)
8110f448:	2a80038b 	ldhu	r10,14(r5)
8110f44c:	2a400717 	ldw	r9,28(r5)
8110f450:	2a000917 	ldw	r8,36(r5)
8110f454:	defee204 	addi	sp,sp,-1144
8110f458:	00c10004 	movi	r3,1024
8110f45c:	dc011a15 	stw	r16,1128(sp)
8110f460:	10bfff4c 	andi	r2,r2,65533
8110f464:	2821883a 	mov	r16,r5
8110f468:	d8cb883a 	add	r5,sp,r3
8110f46c:	dc811c15 	stw	r18,1136(sp)
8110f470:	dc411b15 	stw	r17,1132(sp)
8110f474:	dfc11d15 	stw	ra,1140(sp)
8110f478:	2025883a 	mov	r18,r4
8110f47c:	d881030d 	sth	r2,1036(sp)
8110f480:	dac11915 	stw	r11,1124(sp)
8110f484:	da81038d 	sth	r10,1038(sp)
8110f488:	da410715 	stw	r9,1052(sp)
8110f48c:	da010915 	stw	r8,1060(sp)
8110f490:	dec10015 	stw	sp,1024(sp)
8110f494:	dec10415 	stw	sp,1040(sp)
8110f498:	d8c10215 	stw	r3,1032(sp)
8110f49c:	d8c10515 	stw	r3,1044(sp)
8110f4a0:	d8010615 	stw	zero,1048(sp)
8110f4a4:	110d22c0 	call	8110d22c <___vfprintf_internal_r>
8110f4a8:	1023883a 	mov	r17,r2
8110f4ac:	10000416 	blt	r2,zero,8110f4c0 <__sbprintf+0x80>
8110f4b0:	d9410004 	addi	r5,sp,1024
8110f4b4:	9009883a 	mov	r4,r18
8110f4b8:	11110f40 	call	811110f4 <_fflush_r>
8110f4bc:	10000d1e 	bne	r2,zero,8110f4f4 <__sbprintf+0xb4>
8110f4c0:	d881030b 	ldhu	r2,1036(sp)
8110f4c4:	1080100c 	andi	r2,r2,64
8110f4c8:	10000326 	beq	r2,zero,8110f4d8 <__sbprintf+0x98>
8110f4cc:	8080030b 	ldhu	r2,12(r16)
8110f4d0:	10801014 	ori	r2,r2,64
8110f4d4:	8080030d 	sth	r2,12(r16)
8110f4d8:	8805883a 	mov	r2,r17
8110f4dc:	dfc11d17 	ldw	ra,1140(sp)
8110f4e0:	dc811c17 	ldw	r18,1136(sp)
8110f4e4:	dc411b17 	ldw	r17,1132(sp)
8110f4e8:	dc011a17 	ldw	r16,1128(sp)
8110f4ec:	dec11e04 	addi	sp,sp,1144
8110f4f0:	f800283a 	ret
8110f4f4:	047fffc4 	movi	r17,-1
8110f4f8:	003ff106 	br	8110f4c0 <__reset+0xfb0ef4c0>

8110f4fc <__swsetup_r>:
8110f4fc:	00a044b4 	movhi	r2,33042
8110f500:	defffd04 	addi	sp,sp,-12
8110f504:	10873404 	addi	r2,r2,7376
8110f508:	dc400115 	stw	r17,4(sp)
8110f50c:	2023883a 	mov	r17,r4
8110f510:	11000017 	ldw	r4,0(r2)
8110f514:	dc000015 	stw	r16,0(sp)
8110f518:	dfc00215 	stw	ra,8(sp)
8110f51c:	2821883a 	mov	r16,r5
8110f520:	20000226 	beq	r4,zero,8110f52c <__swsetup_r+0x30>
8110f524:	20800e17 	ldw	r2,56(r4)
8110f528:	10003126 	beq	r2,zero,8110f5f0 <__swsetup_r+0xf4>
8110f52c:	8080030b 	ldhu	r2,12(r16)
8110f530:	10c0020c 	andi	r3,r2,8
8110f534:	1009883a 	mov	r4,r2
8110f538:	18000f26 	beq	r3,zero,8110f578 <__swsetup_r+0x7c>
8110f53c:	80c00417 	ldw	r3,16(r16)
8110f540:	18001526 	beq	r3,zero,8110f598 <__swsetup_r+0x9c>
8110f544:	1100004c 	andi	r4,r2,1
8110f548:	20001c1e 	bne	r4,zero,8110f5bc <__swsetup_r+0xc0>
8110f54c:	1080008c 	andi	r2,r2,2
8110f550:	1000291e 	bne	r2,zero,8110f5f8 <__swsetup_r+0xfc>
8110f554:	80800517 	ldw	r2,20(r16)
8110f558:	80800215 	stw	r2,8(r16)
8110f55c:	18001c26 	beq	r3,zero,8110f5d0 <__swsetup_r+0xd4>
8110f560:	0005883a 	mov	r2,zero
8110f564:	dfc00217 	ldw	ra,8(sp)
8110f568:	dc400117 	ldw	r17,4(sp)
8110f56c:	dc000017 	ldw	r16,0(sp)
8110f570:	dec00304 	addi	sp,sp,12
8110f574:	f800283a 	ret
8110f578:	2080040c 	andi	r2,r4,16
8110f57c:	10002e26 	beq	r2,zero,8110f638 <__swsetup_r+0x13c>
8110f580:	2080010c 	andi	r2,r4,4
8110f584:	10001e1e 	bne	r2,zero,8110f600 <__swsetup_r+0x104>
8110f588:	80c00417 	ldw	r3,16(r16)
8110f58c:	20800214 	ori	r2,r4,8
8110f590:	8080030d 	sth	r2,12(r16)
8110f594:	183feb1e 	bne	r3,zero,8110f544 <__reset+0xfb0ef544>
8110f598:	1100a00c 	andi	r4,r2,640
8110f59c:	01408004 	movi	r5,512
8110f5a0:	217fe826 	beq	r4,r5,8110f544 <__reset+0xfb0ef544>
8110f5a4:	800b883a 	mov	r5,r16
8110f5a8:	8809883a 	mov	r4,r17
8110f5ac:	11120740 	call	81112074 <__smakebuf_r>
8110f5b0:	8080030b 	ldhu	r2,12(r16)
8110f5b4:	80c00417 	ldw	r3,16(r16)
8110f5b8:	003fe206 	br	8110f544 <__reset+0xfb0ef544>
8110f5bc:	80800517 	ldw	r2,20(r16)
8110f5c0:	80000215 	stw	zero,8(r16)
8110f5c4:	0085c83a 	sub	r2,zero,r2
8110f5c8:	80800615 	stw	r2,24(r16)
8110f5cc:	183fe41e 	bne	r3,zero,8110f560 <__reset+0xfb0ef560>
8110f5d0:	80c0030b 	ldhu	r3,12(r16)
8110f5d4:	0005883a 	mov	r2,zero
8110f5d8:	1900200c 	andi	r4,r3,128
8110f5dc:	203fe126 	beq	r4,zero,8110f564 <__reset+0xfb0ef564>
8110f5e0:	18c01014 	ori	r3,r3,64
8110f5e4:	80c0030d 	sth	r3,12(r16)
8110f5e8:	00bfffc4 	movi	r2,-1
8110f5ec:	003fdd06 	br	8110f564 <__reset+0xfb0ef564>
8110f5f0:	11114d00 	call	811114d0 <__sinit>
8110f5f4:	003fcd06 	br	8110f52c <__reset+0xfb0ef52c>
8110f5f8:	0005883a 	mov	r2,zero
8110f5fc:	003fd606 	br	8110f558 <__reset+0xfb0ef558>
8110f600:	81400c17 	ldw	r5,48(r16)
8110f604:	28000626 	beq	r5,zero,8110f620 <__swsetup_r+0x124>
8110f608:	80801004 	addi	r2,r16,64
8110f60c:	28800326 	beq	r5,r2,8110f61c <__swsetup_r+0x120>
8110f610:	8809883a 	mov	r4,r17
8110f614:	11116440 	call	81111644 <_free_r>
8110f618:	8100030b 	ldhu	r4,12(r16)
8110f61c:	80000c15 	stw	zero,48(r16)
8110f620:	80c00417 	ldw	r3,16(r16)
8110f624:	00bff6c4 	movi	r2,-37
8110f628:	1108703a 	and	r4,r2,r4
8110f62c:	80000115 	stw	zero,4(r16)
8110f630:	80c00015 	stw	r3,0(r16)
8110f634:	003fd506 	br	8110f58c <__reset+0xfb0ef58c>
8110f638:	00800244 	movi	r2,9
8110f63c:	88800015 	stw	r2,0(r17)
8110f640:	20801014 	ori	r2,r4,64
8110f644:	8080030d 	sth	r2,12(r16)
8110f648:	00bfffc4 	movi	r2,-1
8110f64c:	003fc506 	br	8110f564 <__reset+0xfb0ef564>

8110f650 <quorem>:
8110f650:	defff704 	addi	sp,sp,-36
8110f654:	dc800215 	stw	r18,8(sp)
8110f658:	20800417 	ldw	r2,16(r4)
8110f65c:	2c800417 	ldw	r18,16(r5)
8110f660:	dfc00815 	stw	ra,32(sp)
8110f664:	ddc00715 	stw	r23,28(sp)
8110f668:	dd800615 	stw	r22,24(sp)
8110f66c:	dd400515 	stw	r21,20(sp)
8110f670:	dd000415 	stw	r20,16(sp)
8110f674:	dcc00315 	stw	r19,12(sp)
8110f678:	dc400115 	stw	r17,4(sp)
8110f67c:	dc000015 	stw	r16,0(sp)
8110f680:	14807116 	blt	r2,r18,8110f848 <quorem+0x1f8>
8110f684:	94bfffc4 	addi	r18,r18,-1
8110f688:	94ad883a 	add	r22,r18,r18
8110f68c:	b5ad883a 	add	r22,r22,r22
8110f690:	2c400504 	addi	r17,r5,20
8110f694:	8da9883a 	add	r20,r17,r22
8110f698:	25400504 	addi	r21,r4,20
8110f69c:	282f883a 	mov	r23,r5
8110f6a0:	adad883a 	add	r22,r21,r22
8110f6a4:	a1400017 	ldw	r5,0(r20)
8110f6a8:	2021883a 	mov	r16,r4
8110f6ac:	b1000017 	ldw	r4,0(r22)
8110f6b0:	29400044 	addi	r5,r5,1
8110f6b4:	11174600 	call	81117460 <__udivsi3>
8110f6b8:	1027883a 	mov	r19,r2
8110f6bc:	10002c26 	beq	r2,zero,8110f770 <quorem+0x120>
8110f6c0:	a813883a 	mov	r9,r21
8110f6c4:	880b883a 	mov	r5,r17
8110f6c8:	0009883a 	mov	r4,zero
8110f6cc:	000d883a 	mov	r6,zero
8110f6d0:	2a000017 	ldw	r8,0(r5)
8110f6d4:	49c00017 	ldw	r7,0(r9)
8110f6d8:	29400104 	addi	r5,r5,4
8110f6dc:	40bfffcc 	andi	r2,r8,65535
8110f6e0:	14c5383a 	mul	r2,r2,r19
8110f6e4:	4010d43a 	srli	r8,r8,16
8110f6e8:	38ffffcc 	andi	r3,r7,65535
8110f6ec:	1105883a 	add	r2,r2,r4
8110f6f0:	1008d43a 	srli	r4,r2,16
8110f6f4:	44d1383a 	mul	r8,r8,r19
8110f6f8:	198d883a 	add	r6,r3,r6
8110f6fc:	10ffffcc 	andi	r3,r2,65535
8110f700:	30c7c83a 	sub	r3,r6,r3
8110f704:	380ed43a 	srli	r7,r7,16
8110f708:	4105883a 	add	r2,r8,r4
8110f70c:	180dd43a 	srai	r6,r3,16
8110f710:	113fffcc 	andi	r4,r2,65535
8110f714:	390fc83a 	sub	r7,r7,r4
8110f718:	398d883a 	add	r6,r7,r6
8110f71c:	300e943a 	slli	r7,r6,16
8110f720:	18ffffcc 	andi	r3,r3,65535
8110f724:	1008d43a 	srli	r4,r2,16
8110f728:	38ceb03a 	or	r7,r7,r3
8110f72c:	49c00015 	stw	r7,0(r9)
8110f730:	300dd43a 	srai	r6,r6,16
8110f734:	4a400104 	addi	r9,r9,4
8110f738:	a17fe52e 	bgeu	r20,r5,8110f6d0 <__reset+0xfb0ef6d0>
8110f73c:	b0800017 	ldw	r2,0(r22)
8110f740:	10000b1e 	bne	r2,zero,8110f770 <quorem+0x120>
8110f744:	b0bfff04 	addi	r2,r22,-4
8110f748:	a880082e 	bgeu	r21,r2,8110f76c <quorem+0x11c>
8110f74c:	b0ffff17 	ldw	r3,-4(r22)
8110f750:	18000326 	beq	r3,zero,8110f760 <quorem+0x110>
8110f754:	00000506 	br	8110f76c <quorem+0x11c>
8110f758:	10c00017 	ldw	r3,0(r2)
8110f75c:	1800031e 	bne	r3,zero,8110f76c <quorem+0x11c>
8110f760:	10bfff04 	addi	r2,r2,-4
8110f764:	94bfffc4 	addi	r18,r18,-1
8110f768:	a8bffb36 	bltu	r21,r2,8110f758 <__reset+0xfb0ef758>
8110f76c:	84800415 	stw	r18,16(r16)
8110f770:	b80b883a 	mov	r5,r23
8110f774:	8009883a 	mov	r4,r16
8110f778:	111366c0 	call	8111366c <__mcmp>
8110f77c:	10002616 	blt	r2,zero,8110f818 <quorem+0x1c8>
8110f780:	9cc00044 	addi	r19,r19,1
8110f784:	a805883a 	mov	r2,r21
8110f788:	000b883a 	mov	r5,zero
8110f78c:	11000017 	ldw	r4,0(r2)
8110f790:	89800017 	ldw	r6,0(r17)
8110f794:	10800104 	addi	r2,r2,4
8110f798:	20ffffcc 	andi	r3,r4,65535
8110f79c:	194b883a 	add	r5,r3,r5
8110f7a0:	30ffffcc 	andi	r3,r6,65535
8110f7a4:	28c7c83a 	sub	r3,r5,r3
8110f7a8:	300cd43a 	srli	r6,r6,16
8110f7ac:	2008d43a 	srli	r4,r4,16
8110f7b0:	180bd43a 	srai	r5,r3,16
8110f7b4:	18ffffcc 	andi	r3,r3,65535
8110f7b8:	2189c83a 	sub	r4,r4,r6
8110f7bc:	2149883a 	add	r4,r4,r5
8110f7c0:	200c943a 	slli	r6,r4,16
8110f7c4:	8c400104 	addi	r17,r17,4
8110f7c8:	200bd43a 	srai	r5,r4,16
8110f7cc:	30c6b03a 	or	r3,r6,r3
8110f7d0:	10ffff15 	stw	r3,-4(r2)
8110f7d4:	a47fed2e 	bgeu	r20,r17,8110f78c <__reset+0xfb0ef78c>
8110f7d8:	9485883a 	add	r2,r18,r18
8110f7dc:	1085883a 	add	r2,r2,r2
8110f7e0:	a887883a 	add	r3,r21,r2
8110f7e4:	18800017 	ldw	r2,0(r3)
8110f7e8:	10000b1e 	bne	r2,zero,8110f818 <quorem+0x1c8>
8110f7ec:	18bfff04 	addi	r2,r3,-4
8110f7f0:	a880082e 	bgeu	r21,r2,8110f814 <quorem+0x1c4>
8110f7f4:	18ffff17 	ldw	r3,-4(r3)
8110f7f8:	18000326 	beq	r3,zero,8110f808 <quorem+0x1b8>
8110f7fc:	00000506 	br	8110f814 <quorem+0x1c4>
8110f800:	10c00017 	ldw	r3,0(r2)
8110f804:	1800031e 	bne	r3,zero,8110f814 <quorem+0x1c4>
8110f808:	10bfff04 	addi	r2,r2,-4
8110f80c:	94bfffc4 	addi	r18,r18,-1
8110f810:	a8bffb36 	bltu	r21,r2,8110f800 <__reset+0xfb0ef800>
8110f814:	84800415 	stw	r18,16(r16)
8110f818:	9805883a 	mov	r2,r19
8110f81c:	dfc00817 	ldw	ra,32(sp)
8110f820:	ddc00717 	ldw	r23,28(sp)
8110f824:	dd800617 	ldw	r22,24(sp)
8110f828:	dd400517 	ldw	r21,20(sp)
8110f82c:	dd000417 	ldw	r20,16(sp)
8110f830:	dcc00317 	ldw	r19,12(sp)
8110f834:	dc800217 	ldw	r18,8(sp)
8110f838:	dc400117 	ldw	r17,4(sp)
8110f83c:	dc000017 	ldw	r16,0(sp)
8110f840:	dec00904 	addi	sp,sp,36
8110f844:	f800283a 	ret
8110f848:	0005883a 	mov	r2,zero
8110f84c:	003ff306 	br	8110f81c <__reset+0xfb0ef81c>

8110f850 <_dtoa_r>:
8110f850:	20801017 	ldw	r2,64(r4)
8110f854:	deffde04 	addi	sp,sp,-136
8110f858:	df002015 	stw	fp,128(sp)
8110f85c:	dcc01b15 	stw	r19,108(sp)
8110f860:	dc801a15 	stw	r18,104(sp)
8110f864:	dc401915 	stw	r17,100(sp)
8110f868:	dc001815 	stw	r16,96(sp)
8110f86c:	dfc02115 	stw	ra,132(sp)
8110f870:	ddc01f15 	stw	r23,124(sp)
8110f874:	dd801e15 	stw	r22,120(sp)
8110f878:	dd401d15 	stw	r21,116(sp)
8110f87c:	dd001c15 	stw	r20,112(sp)
8110f880:	d9c00315 	stw	r7,12(sp)
8110f884:	2039883a 	mov	fp,r4
8110f888:	3023883a 	mov	r17,r6
8110f88c:	2825883a 	mov	r18,r5
8110f890:	dc002417 	ldw	r16,144(sp)
8110f894:	3027883a 	mov	r19,r6
8110f898:	10000826 	beq	r2,zero,8110f8bc <_dtoa_r+0x6c>
8110f89c:	21801117 	ldw	r6,68(r4)
8110f8a0:	00c00044 	movi	r3,1
8110f8a4:	100b883a 	mov	r5,r2
8110f8a8:	1986983a 	sll	r3,r3,r6
8110f8ac:	11800115 	stw	r6,4(r2)
8110f8b0:	10c00215 	stw	r3,8(r2)
8110f8b4:	1112e4c0 	call	81112e4c <_Bfree>
8110f8b8:	e0001015 	stw	zero,64(fp)
8110f8bc:	88002e16 	blt	r17,zero,8110f978 <_dtoa_r+0x128>
8110f8c0:	80000015 	stw	zero,0(r16)
8110f8c4:	889ffc2c 	andhi	r2,r17,32752
8110f8c8:	00dffc34 	movhi	r3,32752
8110f8cc:	10c01c26 	beq	r2,r3,8110f940 <_dtoa_r+0xf0>
8110f8d0:	000d883a 	mov	r6,zero
8110f8d4:	000f883a 	mov	r7,zero
8110f8d8:	9009883a 	mov	r4,r18
8110f8dc:	980b883a 	mov	r5,r19
8110f8e0:	11186b00 	call	811186b0 <__eqdf2>
8110f8e4:	10002b1e 	bne	r2,zero,8110f994 <_dtoa_r+0x144>
8110f8e8:	d9c02317 	ldw	r7,140(sp)
8110f8ec:	00800044 	movi	r2,1
8110f8f0:	38800015 	stw	r2,0(r7)
8110f8f4:	d8802517 	ldw	r2,148(sp)
8110f8f8:	10019e26 	beq	r2,zero,8110ff74 <_dtoa_r+0x724>
8110f8fc:	d8c02517 	ldw	r3,148(sp)
8110f900:	00a044b4 	movhi	r2,33042
8110f904:	10bf0944 	addi	r2,r2,-987
8110f908:	18800015 	stw	r2,0(r3)
8110f90c:	10bfffc4 	addi	r2,r2,-1
8110f910:	dfc02117 	ldw	ra,132(sp)
8110f914:	df002017 	ldw	fp,128(sp)
8110f918:	ddc01f17 	ldw	r23,124(sp)
8110f91c:	dd801e17 	ldw	r22,120(sp)
8110f920:	dd401d17 	ldw	r21,116(sp)
8110f924:	dd001c17 	ldw	r20,112(sp)
8110f928:	dcc01b17 	ldw	r19,108(sp)
8110f92c:	dc801a17 	ldw	r18,104(sp)
8110f930:	dc401917 	ldw	r17,100(sp)
8110f934:	dc001817 	ldw	r16,96(sp)
8110f938:	dec02204 	addi	sp,sp,136
8110f93c:	f800283a 	ret
8110f940:	d8c02317 	ldw	r3,140(sp)
8110f944:	0089c3c4 	movi	r2,9999
8110f948:	18800015 	stw	r2,0(r3)
8110f94c:	90017726 	beq	r18,zero,8110ff2c <_dtoa_r+0x6dc>
8110f950:	00a044b4 	movhi	r2,33042
8110f954:	10bf1504 	addi	r2,r2,-940
8110f958:	d9002517 	ldw	r4,148(sp)
8110f95c:	203fec26 	beq	r4,zero,8110f910 <__reset+0xfb0ef910>
8110f960:	10c000c7 	ldb	r3,3(r2)
8110f964:	1801781e 	bne	r3,zero,8110ff48 <_dtoa_r+0x6f8>
8110f968:	10c000c4 	addi	r3,r2,3
8110f96c:	d9802517 	ldw	r6,148(sp)
8110f970:	30c00015 	stw	r3,0(r6)
8110f974:	003fe606 	br	8110f910 <__reset+0xfb0ef910>
8110f978:	04e00034 	movhi	r19,32768
8110f97c:	9cffffc4 	addi	r19,r19,-1
8110f980:	00800044 	movi	r2,1
8110f984:	8ce6703a 	and	r19,r17,r19
8110f988:	80800015 	stw	r2,0(r16)
8110f98c:	9823883a 	mov	r17,r19
8110f990:	003fcc06 	br	8110f8c4 <__reset+0xfb0ef8c4>
8110f994:	d8800204 	addi	r2,sp,8
8110f998:	d8800015 	stw	r2,0(sp)
8110f99c:	d9c00104 	addi	r7,sp,4
8110f9a0:	900b883a 	mov	r5,r18
8110f9a4:	980d883a 	mov	r6,r19
8110f9a8:	e009883a 	mov	r4,fp
8110f9ac:	8820d53a 	srli	r16,r17,20
8110f9b0:	1113a380 	call	81113a38 <__d2b>
8110f9b4:	d8800915 	stw	r2,36(sp)
8110f9b8:	8001651e 	bne	r16,zero,8110ff50 <_dtoa_r+0x700>
8110f9bc:	dd800217 	ldw	r22,8(sp)
8110f9c0:	dc000117 	ldw	r16,4(sp)
8110f9c4:	00800804 	movi	r2,32
8110f9c8:	b421883a 	add	r16,r22,r16
8110f9cc:	80c10c84 	addi	r3,r16,1074
8110f9d0:	10c2d10e 	bge	r2,r3,81110518 <_dtoa_r+0xcc8>
8110f9d4:	00801004 	movi	r2,64
8110f9d8:	81010484 	addi	r4,r16,1042
8110f9dc:	10c7c83a 	sub	r3,r2,r3
8110f9e0:	9108d83a 	srl	r4,r18,r4
8110f9e4:	88e2983a 	sll	r17,r17,r3
8110f9e8:	2448b03a 	or	r4,r4,r17
8110f9ec:	11193600 	call	81119360 <__floatunsidf>
8110f9f0:	017f8434 	movhi	r5,65040
8110f9f4:	01800044 	movi	r6,1
8110f9f8:	1009883a 	mov	r4,r2
8110f9fc:	194b883a 	add	r5,r3,r5
8110fa00:	843fffc4 	addi	r16,r16,-1
8110fa04:	d9801115 	stw	r6,68(sp)
8110fa08:	000d883a 	mov	r6,zero
8110fa0c:	01cffe34 	movhi	r7,16376
8110fa10:	11189080 	call	81118908 <__subdf3>
8110fa14:	0198dbf4 	movhi	r6,25455
8110fa18:	01cff4f4 	movhi	r7,16339
8110fa1c:	3190d844 	addi	r6,r6,17249
8110fa20:	39e1e9c4 	addi	r7,r7,-30809
8110fa24:	1009883a 	mov	r4,r2
8110fa28:	180b883a 	mov	r5,r3
8110fa2c:	110c3380 	call	8110c338 <__muldf3>
8110fa30:	01a2d874 	movhi	r6,35681
8110fa34:	01cff1f4 	movhi	r7,16327
8110fa38:	31b22cc4 	addi	r6,r6,-14157
8110fa3c:	39e28a04 	addi	r7,r7,-30168
8110fa40:	180b883a 	mov	r5,r3
8110fa44:	1009883a 	mov	r4,r2
8110fa48:	111751c0 	call	8111751c <__adddf3>
8110fa4c:	8009883a 	mov	r4,r16
8110fa50:	1029883a 	mov	r20,r2
8110fa54:	1823883a 	mov	r17,r3
8110fa58:	11192840 	call	81119284 <__floatsidf>
8110fa5c:	019427f4 	movhi	r6,20639
8110fa60:	01cff4f4 	movhi	r7,16339
8110fa64:	319e7ec4 	addi	r6,r6,31227
8110fa68:	39d104c4 	addi	r7,r7,17427
8110fa6c:	1009883a 	mov	r4,r2
8110fa70:	180b883a 	mov	r5,r3
8110fa74:	110c3380 	call	8110c338 <__muldf3>
8110fa78:	100d883a 	mov	r6,r2
8110fa7c:	180f883a 	mov	r7,r3
8110fa80:	a009883a 	mov	r4,r20
8110fa84:	880b883a 	mov	r5,r17
8110fa88:	111751c0 	call	8111751c <__adddf3>
8110fa8c:	1009883a 	mov	r4,r2
8110fa90:	180b883a 	mov	r5,r3
8110fa94:	1029883a 	mov	r20,r2
8110fa98:	1823883a 	mov	r17,r3
8110fa9c:	11192040 	call	81119204 <__fixdfsi>
8110faa0:	000d883a 	mov	r6,zero
8110faa4:	000f883a 	mov	r7,zero
8110faa8:	a009883a 	mov	r4,r20
8110faac:	880b883a 	mov	r5,r17
8110fab0:	d8800515 	stw	r2,20(sp)
8110fab4:	11188140 	call	81118814 <__ledf2>
8110fab8:	10028716 	blt	r2,zero,811104d8 <_dtoa_r+0xc88>
8110fabc:	d8c00517 	ldw	r3,20(sp)
8110fac0:	00800584 	movi	r2,22
8110fac4:	10c27536 	bltu	r2,r3,8111049c <_dtoa_r+0xc4c>
8110fac8:	180490fa 	slli	r2,r3,3
8110facc:	00e044b4 	movhi	r3,33042
8110fad0:	18ff3004 	addi	r3,r3,-832
8110fad4:	1885883a 	add	r2,r3,r2
8110fad8:	11000017 	ldw	r4,0(r2)
8110fadc:	11400117 	ldw	r5,4(r2)
8110fae0:	900d883a 	mov	r6,r18
8110fae4:	980f883a 	mov	r7,r19
8110fae8:	11187380 	call	81118738 <__gedf2>
8110faec:	00828d0e 	bge	zero,r2,81110524 <_dtoa_r+0xcd4>
8110faf0:	d9000517 	ldw	r4,20(sp)
8110faf4:	d8000e15 	stw	zero,56(sp)
8110faf8:	213fffc4 	addi	r4,r4,-1
8110fafc:	d9000515 	stw	r4,20(sp)
8110fb00:	b42dc83a 	sub	r22,r22,r16
8110fb04:	b5bfffc4 	addi	r22,r22,-1
8110fb08:	b0026f16 	blt	r22,zero,811104c8 <_dtoa_r+0xc78>
8110fb0c:	d8000815 	stw	zero,32(sp)
8110fb10:	d9c00517 	ldw	r7,20(sp)
8110fb14:	38026416 	blt	r7,zero,811104a8 <_dtoa_r+0xc58>
8110fb18:	b1ed883a 	add	r22,r22,r7
8110fb1c:	d9c00d15 	stw	r7,52(sp)
8110fb20:	d8000a15 	stw	zero,40(sp)
8110fb24:	d9800317 	ldw	r6,12(sp)
8110fb28:	00800244 	movi	r2,9
8110fb2c:	11811436 	bltu	r2,r6,8110ff80 <_dtoa_r+0x730>
8110fb30:	00800144 	movi	r2,5
8110fb34:	1184e10e 	bge	r2,r6,81110ebc <_dtoa_r+0x166c>
8110fb38:	31bfff04 	addi	r6,r6,-4
8110fb3c:	d9800315 	stw	r6,12(sp)
8110fb40:	0023883a 	mov	r17,zero
8110fb44:	d9800317 	ldw	r6,12(sp)
8110fb48:	008000c4 	movi	r2,3
8110fb4c:	30836726 	beq	r6,r2,811108ec <_dtoa_r+0x109c>
8110fb50:	1183410e 	bge	r2,r6,81110858 <_dtoa_r+0x1008>
8110fb54:	d9c00317 	ldw	r7,12(sp)
8110fb58:	00800104 	movi	r2,4
8110fb5c:	38827c26 	beq	r7,r2,81110550 <_dtoa_r+0xd00>
8110fb60:	00800144 	movi	r2,5
8110fb64:	3884c41e 	bne	r7,r2,81110e78 <_dtoa_r+0x1628>
8110fb68:	00800044 	movi	r2,1
8110fb6c:	d8800b15 	stw	r2,44(sp)
8110fb70:	d8c00517 	ldw	r3,20(sp)
8110fb74:	d9002217 	ldw	r4,136(sp)
8110fb78:	1907883a 	add	r3,r3,r4
8110fb7c:	19800044 	addi	r6,r3,1
8110fb80:	d8c00c15 	stw	r3,48(sp)
8110fb84:	d9800615 	stw	r6,24(sp)
8110fb88:	0183a40e 	bge	zero,r6,81110a1c <_dtoa_r+0x11cc>
8110fb8c:	d9800617 	ldw	r6,24(sp)
8110fb90:	3021883a 	mov	r16,r6
8110fb94:	e0001115 	stw	zero,68(fp)
8110fb98:	008005c4 	movi	r2,23
8110fb9c:	1184c92e 	bgeu	r2,r6,81110ec4 <_dtoa_r+0x1674>
8110fba0:	00c00044 	movi	r3,1
8110fba4:	00800104 	movi	r2,4
8110fba8:	1085883a 	add	r2,r2,r2
8110fbac:	11000504 	addi	r4,r2,20
8110fbb0:	180b883a 	mov	r5,r3
8110fbb4:	18c00044 	addi	r3,r3,1
8110fbb8:	313ffb2e 	bgeu	r6,r4,8110fba8 <__reset+0xfb0efba8>
8110fbbc:	e1401115 	stw	r5,68(fp)
8110fbc0:	e009883a 	mov	r4,fp
8110fbc4:	1112da40 	call	81112da4 <_Balloc>
8110fbc8:	d8800715 	stw	r2,28(sp)
8110fbcc:	e0801015 	stw	r2,64(fp)
8110fbd0:	00800384 	movi	r2,14
8110fbd4:	1400f736 	bltu	r2,r16,8110ffb4 <_dtoa_r+0x764>
8110fbd8:	8800f626 	beq	r17,zero,8110ffb4 <_dtoa_r+0x764>
8110fbdc:	d9c00517 	ldw	r7,20(sp)
8110fbe0:	01c39a0e 	bge	zero,r7,81110a4c <_dtoa_r+0x11fc>
8110fbe4:	388003cc 	andi	r2,r7,15
8110fbe8:	100490fa 	slli	r2,r2,3
8110fbec:	382bd13a 	srai	r21,r7,4
8110fbf0:	00e044b4 	movhi	r3,33042
8110fbf4:	18ff3004 	addi	r3,r3,-832
8110fbf8:	1885883a 	add	r2,r3,r2
8110fbfc:	a8c0040c 	andi	r3,r21,16
8110fc00:	12400017 	ldw	r9,0(r2)
8110fc04:	12000117 	ldw	r8,4(r2)
8110fc08:	18037926 	beq	r3,zero,811109f0 <_dtoa_r+0x11a0>
8110fc0c:	00a044b4 	movhi	r2,33042
8110fc10:	10bf2604 	addi	r2,r2,-872
8110fc14:	11800817 	ldw	r6,32(r2)
8110fc18:	11c00917 	ldw	r7,36(r2)
8110fc1c:	9009883a 	mov	r4,r18
8110fc20:	980b883a 	mov	r5,r19
8110fc24:	da001715 	stw	r8,92(sp)
8110fc28:	da401615 	stw	r9,88(sp)
8110fc2c:	1117dc80 	call	81117dc8 <__divdf3>
8110fc30:	da001717 	ldw	r8,92(sp)
8110fc34:	da401617 	ldw	r9,88(sp)
8110fc38:	ad4003cc 	andi	r21,r21,15
8110fc3c:	040000c4 	movi	r16,3
8110fc40:	1023883a 	mov	r17,r2
8110fc44:	1829883a 	mov	r20,r3
8110fc48:	a8001126 	beq	r21,zero,8110fc90 <_dtoa_r+0x440>
8110fc4c:	05e044b4 	movhi	r23,33042
8110fc50:	bdff2604 	addi	r23,r23,-872
8110fc54:	4805883a 	mov	r2,r9
8110fc58:	4007883a 	mov	r3,r8
8110fc5c:	a980004c 	andi	r6,r21,1
8110fc60:	1009883a 	mov	r4,r2
8110fc64:	a82bd07a 	srai	r21,r21,1
8110fc68:	180b883a 	mov	r5,r3
8110fc6c:	30000426 	beq	r6,zero,8110fc80 <_dtoa_r+0x430>
8110fc70:	b9800017 	ldw	r6,0(r23)
8110fc74:	b9c00117 	ldw	r7,4(r23)
8110fc78:	84000044 	addi	r16,r16,1
8110fc7c:	110c3380 	call	8110c338 <__muldf3>
8110fc80:	bdc00204 	addi	r23,r23,8
8110fc84:	a83ff51e 	bne	r21,zero,8110fc5c <__reset+0xfb0efc5c>
8110fc88:	1013883a 	mov	r9,r2
8110fc8c:	1811883a 	mov	r8,r3
8110fc90:	480d883a 	mov	r6,r9
8110fc94:	400f883a 	mov	r7,r8
8110fc98:	8809883a 	mov	r4,r17
8110fc9c:	a00b883a 	mov	r5,r20
8110fca0:	1117dc80 	call	81117dc8 <__divdf3>
8110fca4:	d8800f15 	stw	r2,60(sp)
8110fca8:	d8c01015 	stw	r3,64(sp)
8110fcac:	d8c00e17 	ldw	r3,56(sp)
8110fcb0:	18000626 	beq	r3,zero,8110fccc <_dtoa_r+0x47c>
8110fcb4:	d9000f17 	ldw	r4,60(sp)
8110fcb8:	d9401017 	ldw	r5,64(sp)
8110fcbc:	000d883a 	mov	r6,zero
8110fcc0:	01cffc34 	movhi	r7,16368
8110fcc4:	11188140 	call	81118814 <__ledf2>
8110fcc8:	10040b16 	blt	r2,zero,81110cf8 <_dtoa_r+0x14a8>
8110fccc:	8009883a 	mov	r4,r16
8110fcd0:	11192840 	call	81119284 <__floatsidf>
8110fcd4:	d9800f17 	ldw	r6,60(sp)
8110fcd8:	d9c01017 	ldw	r7,64(sp)
8110fcdc:	1009883a 	mov	r4,r2
8110fce0:	180b883a 	mov	r5,r3
8110fce4:	110c3380 	call	8110c338 <__muldf3>
8110fce8:	000d883a 	mov	r6,zero
8110fcec:	01d00734 	movhi	r7,16412
8110fcf0:	1009883a 	mov	r4,r2
8110fcf4:	180b883a 	mov	r5,r3
8110fcf8:	111751c0 	call	8111751c <__adddf3>
8110fcfc:	1021883a 	mov	r16,r2
8110fd00:	d8800617 	ldw	r2,24(sp)
8110fd04:	047f3034 	movhi	r17,64704
8110fd08:	1c63883a 	add	r17,r3,r17
8110fd0c:	10031826 	beq	r2,zero,81110970 <_dtoa_r+0x1120>
8110fd10:	d8c00517 	ldw	r3,20(sp)
8110fd14:	db000617 	ldw	r12,24(sp)
8110fd18:	d8c01315 	stw	r3,76(sp)
8110fd1c:	d9000b17 	ldw	r4,44(sp)
8110fd20:	20038f26 	beq	r4,zero,81110b60 <_dtoa_r+0x1310>
8110fd24:	60bfffc4 	addi	r2,r12,-1
8110fd28:	100490fa 	slli	r2,r2,3
8110fd2c:	00e044b4 	movhi	r3,33042
8110fd30:	18ff3004 	addi	r3,r3,-832
8110fd34:	1885883a 	add	r2,r3,r2
8110fd38:	11800017 	ldw	r6,0(r2)
8110fd3c:	11c00117 	ldw	r7,4(r2)
8110fd40:	d8800717 	ldw	r2,28(sp)
8110fd44:	0009883a 	mov	r4,zero
8110fd48:	014ff834 	movhi	r5,16352
8110fd4c:	db001615 	stw	r12,88(sp)
8110fd50:	15c00044 	addi	r23,r2,1
8110fd54:	1117dc80 	call	81117dc8 <__divdf3>
8110fd58:	800d883a 	mov	r6,r16
8110fd5c:	880f883a 	mov	r7,r17
8110fd60:	1009883a 	mov	r4,r2
8110fd64:	180b883a 	mov	r5,r3
8110fd68:	11189080 	call	81118908 <__subdf3>
8110fd6c:	d9401017 	ldw	r5,64(sp)
8110fd70:	d9000f17 	ldw	r4,60(sp)
8110fd74:	102b883a 	mov	r21,r2
8110fd78:	d8c01215 	stw	r3,72(sp)
8110fd7c:	11192040 	call	81119204 <__fixdfsi>
8110fd80:	1009883a 	mov	r4,r2
8110fd84:	1029883a 	mov	r20,r2
8110fd88:	11192840 	call	81119284 <__floatsidf>
8110fd8c:	d9000f17 	ldw	r4,60(sp)
8110fd90:	d9401017 	ldw	r5,64(sp)
8110fd94:	100d883a 	mov	r6,r2
8110fd98:	180f883a 	mov	r7,r3
8110fd9c:	11189080 	call	81118908 <__subdf3>
8110fda0:	1823883a 	mov	r17,r3
8110fda4:	d8c00717 	ldw	r3,28(sp)
8110fda8:	d9401217 	ldw	r5,72(sp)
8110fdac:	a2000c04 	addi	r8,r20,48
8110fdb0:	1021883a 	mov	r16,r2
8110fdb4:	1a000005 	stb	r8,0(r3)
8110fdb8:	800d883a 	mov	r6,r16
8110fdbc:	880f883a 	mov	r7,r17
8110fdc0:	a809883a 	mov	r4,r21
8110fdc4:	4029883a 	mov	r20,r8
8110fdc8:	11187380 	call	81118738 <__gedf2>
8110fdcc:	00841d16 	blt	zero,r2,81110e44 <_dtoa_r+0x15f4>
8110fdd0:	800d883a 	mov	r6,r16
8110fdd4:	880f883a 	mov	r7,r17
8110fdd8:	0009883a 	mov	r4,zero
8110fddc:	014ffc34 	movhi	r5,16368
8110fde0:	11189080 	call	81118908 <__subdf3>
8110fde4:	d9401217 	ldw	r5,72(sp)
8110fde8:	100d883a 	mov	r6,r2
8110fdec:	180f883a 	mov	r7,r3
8110fdf0:	a809883a 	mov	r4,r21
8110fdf4:	11187380 	call	81118738 <__gedf2>
8110fdf8:	db001617 	ldw	r12,88(sp)
8110fdfc:	00840e16 	blt	zero,r2,81110e38 <_dtoa_r+0x15e8>
8110fe00:	00800044 	movi	r2,1
8110fe04:	13006b0e 	bge	r2,r12,8110ffb4 <_dtoa_r+0x764>
8110fe08:	d9000717 	ldw	r4,28(sp)
8110fe0c:	dd800f15 	stw	r22,60(sp)
8110fe10:	dcc01015 	stw	r19,64(sp)
8110fe14:	2319883a 	add	r12,r4,r12
8110fe18:	dcc01217 	ldw	r19,72(sp)
8110fe1c:	602d883a 	mov	r22,r12
8110fe20:	dc801215 	stw	r18,72(sp)
8110fe24:	b825883a 	mov	r18,r23
8110fe28:	00000906 	br	8110fe50 <_dtoa_r+0x600>
8110fe2c:	11189080 	call	81118908 <__subdf3>
8110fe30:	a80d883a 	mov	r6,r21
8110fe34:	980f883a 	mov	r7,r19
8110fe38:	1009883a 	mov	r4,r2
8110fe3c:	180b883a 	mov	r5,r3
8110fe40:	11188140 	call	81118814 <__ledf2>
8110fe44:	1003e816 	blt	r2,zero,81110de8 <_dtoa_r+0x1598>
8110fe48:	b825883a 	mov	r18,r23
8110fe4c:	bd83e926 	beq	r23,r22,81110df4 <_dtoa_r+0x15a4>
8110fe50:	a809883a 	mov	r4,r21
8110fe54:	980b883a 	mov	r5,r19
8110fe58:	000d883a 	mov	r6,zero
8110fe5c:	01d00934 	movhi	r7,16420
8110fe60:	110c3380 	call	8110c338 <__muldf3>
8110fe64:	000d883a 	mov	r6,zero
8110fe68:	01d00934 	movhi	r7,16420
8110fe6c:	8009883a 	mov	r4,r16
8110fe70:	880b883a 	mov	r5,r17
8110fe74:	102b883a 	mov	r21,r2
8110fe78:	1827883a 	mov	r19,r3
8110fe7c:	110c3380 	call	8110c338 <__muldf3>
8110fe80:	180b883a 	mov	r5,r3
8110fe84:	1009883a 	mov	r4,r2
8110fe88:	1821883a 	mov	r16,r3
8110fe8c:	1023883a 	mov	r17,r2
8110fe90:	11192040 	call	81119204 <__fixdfsi>
8110fe94:	1009883a 	mov	r4,r2
8110fe98:	1029883a 	mov	r20,r2
8110fe9c:	11192840 	call	81119284 <__floatsidf>
8110fea0:	8809883a 	mov	r4,r17
8110fea4:	800b883a 	mov	r5,r16
8110fea8:	100d883a 	mov	r6,r2
8110feac:	180f883a 	mov	r7,r3
8110feb0:	11189080 	call	81118908 <__subdf3>
8110feb4:	a5000c04 	addi	r20,r20,48
8110feb8:	a80d883a 	mov	r6,r21
8110febc:	980f883a 	mov	r7,r19
8110fec0:	1009883a 	mov	r4,r2
8110fec4:	180b883a 	mov	r5,r3
8110fec8:	95000005 	stb	r20,0(r18)
8110fecc:	1021883a 	mov	r16,r2
8110fed0:	1823883a 	mov	r17,r3
8110fed4:	11188140 	call	81118814 <__ledf2>
8110fed8:	bdc00044 	addi	r23,r23,1
8110fedc:	800d883a 	mov	r6,r16
8110fee0:	880f883a 	mov	r7,r17
8110fee4:	0009883a 	mov	r4,zero
8110fee8:	014ffc34 	movhi	r5,16368
8110feec:	103fcf0e 	bge	r2,zero,8110fe2c <__reset+0xfb0efe2c>
8110fef0:	d8c01317 	ldw	r3,76(sp)
8110fef4:	d8c00515 	stw	r3,20(sp)
8110fef8:	d9400917 	ldw	r5,36(sp)
8110fefc:	e009883a 	mov	r4,fp
8110ff00:	1112e4c0 	call	81112e4c <_Bfree>
8110ff04:	d9000517 	ldw	r4,20(sp)
8110ff08:	d9802317 	ldw	r6,140(sp)
8110ff0c:	d9c02517 	ldw	r7,148(sp)
8110ff10:	b8000005 	stb	zero,0(r23)
8110ff14:	20800044 	addi	r2,r4,1
8110ff18:	30800015 	stw	r2,0(r6)
8110ff1c:	3802aa26 	beq	r7,zero,811109c8 <_dtoa_r+0x1178>
8110ff20:	3dc00015 	stw	r23,0(r7)
8110ff24:	d8800717 	ldw	r2,28(sp)
8110ff28:	003e7906 	br	8110f910 <__reset+0xfb0ef910>
8110ff2c:	00800434 	movhi	r2,16
8110ff30:	10bfffc4 	addi	r2,r2,-1
8110ff34:	88a2703a 	and	r17,r17,r2
8110ff38:	883e851e 	bne	r17,zero,8110f950 <__reset+0xfb0ef950>
8110ff3c:	00a044b4 	movhi	r2,33042
8110ff40:	10bf1204 	addi	r2,r2,-952
8110ff44:	003e8406 	br	8110f958 <__reset+0xfb0ef958>
8110ff48:	10c00204 	addi	r3,r2,8
8110ff4c:	003e8706 	br	8110f96c <__reset+0xfb0ef96c>
8110ff50:	01400434 	movhi	r5,16
8110ff54:	297fffc4 	addi	r5,r5,-1
8110ff58:	994a703a 	and	r5,r19,r5
8110ff5c:	9009883a 	mov	r4,r18
8110ff60:	843f0044 	addi	r16,r16,-1023
8110ff64:	294ffc34 	orhi	r5,r5,16368
8110ff68:	dd800217 	ldw	r22,8(sp)
8110ff6c:	d8001115 	stw	zero,68(sp)
8110ff70:	003ea506 	br	8110fa08 <__reset+0xfb0efa08>
8110ff74:	00a044b4 	movhi	r2,33042
8110ff78:	10bf0904 	addi	r2,r2,-988
8110ff7c:	003e6406 	br	8110f910 <__reset+0xfb0ef910>
8110ff80:	e0001115 	stw	zero,68(fp)
8110ff84:	000b883a 	mov	r5,zero
8110ff88:	e009883a 	mov	r4,fp
8110ff8c:	1112da40 	call	81112da4 <_Balloc>
8110ff90:	01bfffc4 	movi	r6,-1
8110ff94:	01c00044 	movi	r7,1
8110ff98:	d8800715 	stw	r2,28(sp)
8110ff9c:	d9800c15 	stw	r6,48(sp)
8110ffa0:	e0801015 	stw	r2,64(fp)
8110ffa4:	d8000315 	stw	zero,12(sp)
8110ffa8:	d9c00b15 	stw	r7,44(sp)
8110ffac:	d9800615 	stw	r6,24(sp)
8110ffb0:	d8002215 	stw	zero,136(sp)
8110ffb4:	d8800117 	ldw	r2,4(sp)
8110ffb8:	10008916 	blt	r2,zero,811101e0 <_dtoa_r+0x990>
8110ffbc:	d9000517 	ldw	r4,20(sp)
8110ffc0:	00c00384 	movi	r3,14
8110ffc4:	19008616 	blt	r3,r4,811101e0 <_dtoa_r+0x990>
8110ffc8:	200490fa 	slli	r2,r4,3
8110ffcc:	00e044b4 	movhi	r3,33042
8110ffd0:	d9802217 	ldw	r6,136(sp)
8110ffd4:	18ff3004 	addi	r3,r3,-832
8110ffd8:	1885883a 	add	r2,r3,r2
8110ffdc:	14000017 	ldw	r16,0(r2)
8110ffe0:	14400117 	ldw	r17,4(r2)
8110ffe4:	30016316 	blt	r6,zero,81110574 <_dtoa_r+0xd24>
8110ffe8:	800d883a 	mov	r6,r16
8110ffec:	880f883a 	mov	r7,r17
8110fff0:	9009883a 	mov	r4,r18
8110fff4:	980b883a 	mov	r5,r19
8110fff8:	1117dc80 	call	81117dc8 <__divdf3>
8110fffc:	180b883a 	mov	r5,r3
81110000:	1009883a 	mov	r4,r2
81110004:	11192040 	call	81119204 <__fixdfsi>
81110008:	1009883a 	mov	r4,r2
8111000c:	102b883a 	mov	r21,r2
81110010:	11192840 	call	81119284 <__floatsidf>
81110014:	800d883a 	mov	r6,r16
81110018:	880f883a 	mov	r7,r17
8111001c:	1009883a 	mov	r4,r2
81110020:	180b883a 	mov	r5,r3
81110024:	110c3380 	call	8110c338 <__muldf3>
81110028:	100d883a 	mov	r6,r2
8111002c:	180f883a 	mov	r7,r3
81110030:	9009883a 	mov	r4,r18
81110034:	980b883a 	mov	r5,r19
81110038:	11189080 	call	81118908 <__subdf3>
8111003c:	d9c00717 	ldw	r7,28(sp)
81110040:	1009883a 	mov	r4,r2
81110044:	a8800c04 	addi	r2,r21,48
81110048:	38800005 	stb	r2,0(r7)
8111004c:	3dc00044 	addi	r23,r7,1
81110050:	d9c00617 	ldw	r7,24(sp)
81110054:	01800044 	movi	r6,1
81110058:	180b883a 	mov	r5,r3
8111005c:	2005883a 	mov	r2,r4
81110060:	39803826 	beq	r7,r6,81110144 <_dtoa_r+0x8f4>
81110064:	000d883a 	mov	r6,zero
81110068:	01d00934 	movhi	r7,16420
8111006c:	110c3380 	call	8110c338 <__muldf3>
81110070:	000d883a 	mov	r6,zero
81110074:	000f883a 	mov	r7,zero
81110078:	1009883a 	mov	r4,r2
8111007c:	180b883a 	mov	r5,r3
81110080:	1025883a 	mov	r18,r2
81110084:	1827883a 	mov	r19,r3
81110088:	11186b00 	call	811186b0 <__eqdf2>
8111008c:	103f9a26 	beq	r2,zero,8110fef8 <__reset+0xfb0efef8>
81110090:	d9c00617 	ldw	r7,24(sp)
81110094:	d8c00717 	ldw	r3,28(sp)
81110098:	b829883a 	mov	r20,r23
8111009c:	38bfffc4 	addi	r2,r7,-1
811100a0:	18ad883a 	add	r22,r3,r2
811100a4:	00000a06 	br	811100d0 <_dtoa_r+0x880>
811100a8:	110c3380 	call	8110c338 <__muldf3>
811100ac:	000d883a 	mov	r6,zero
811100b0:	000f883a 	mov	r7,zero
811100b4:	1009883a 	mov	r4,r2
811100b8:	180b883a 	mov	r5,r3
811100bc:	1025883a 	mov	r18,r2
811100c0:	1827883a 	mov	r19,r3
811100c4:	b829883a 	mov	r20,r23
811100c8:	11186b00 	call	811186b0 <__eqdf2>
811100cc:	103f8a26 	beq	r2,zero,8110fef8 <__reset+0xfb0efef8>
811100d0:	800d883a 	mov	r6,r16
811100d4:	880f883a 	mov	r7,r17
811100d8:	9009883a 	mov	r4,r18
811100dc:	980b883a 	mov	r5,r19
811100e0:	1117dc80 	call	81117dc8 <__divdf3>
811100e4:	180b883a 	mov	r5,r3
811100e8:	1009883a 	mov	r4,r2
811100ec:	11192040 	call	81119204 <__fixdfsi>
811100f0:	1009883a 	mov	r4,r2
811100f4:	102b883a 	mov	r21,r2
811100f8:	11192840 	call	81119284 <__floatsidf>
811100fc:	800d883a 	mov	r6,r16
81110100:	880f883a 	mov	r7,r17
81110104:	1009883a 	mov	r4,r2
81110108:	180b883a 	mov	r5,r3
8111010c:	110c3380 	call	8110c338 <__muldf3>
81110110:	100d883a 	mov	r6,r2
81110114:	180f883a 	mov	r7,r3
81110118:	9009883a 	mov	r4,r18
8111011c:	980b883a 	mov	r5,r19
81110120:	11189080 	call	81118908 <__subdf3>
81110124:	aa000c04 	addi	r8,r21,48
81110128:	a2000005 	stb	r8,0(r20)
8111012c:	000d883a 	mov	r6,zero
81110130:	01d00934 	movhi	r7,16420
81110134:	1009883a 	mov	r4,r2
81110138:	180b883a 	mov	r5,r3
8111013c:	a5c00044 	addi	r23,r20,1
81110140:	b53fd91e 	bne	r22,r20,811100a8 <__reset+0xfb0f00a8>
81110144:	100d883a 	mov	r6,r2
81110148:	180f883a 	mov	r7,r3
8111014c:	1009883a 	mov	r4,r2
81110150:	180b883a 	mov	r5,r3
81110154:	111751c0 	call	8111751c <__adddf3>
81110158:	100d883a 	mov	r6,r2
8111015c:	180f883a 	mov	r7,r3
81110160:	8009883a 	mov	r4,r16
81110164:	880b883a 	mov	r5,r17
81110168:	1027883a 	mov	r19,r2
8111016c:	1825883a 	mov	r18,r3
81110170:	11188140 	call	81118814 <__ledf2>
81110174:	10000816 	blt	r2,zero,81110198 <_dtoa_r+0x948>
81110178:	980d883a 	mov	r6,r19
8111017c:	900f883a 	mov	r7,r18
81110180:	8009883a 	mov	r4,r16
81110184:	880b883a 	mov	r5,r17
81110188:	11186b00 	call	811186b0 <__eqdf2>
8111018c:	103f5a1e 	bne	r2,zero,8110fef8 <__reset+0xfb0efef8>
81110190:	ad40004c 	andi	r21,r21,1
81110194:	a83f5826 	beq	r21,zero,8110fef8 <__reset+0xfb0efef8>
81110198:	bd3fffc3 	ldbu	r20,-1(r23)
8111019c:	b8bfffc4 	addi	r2,r23,-1
811101a0:	1007883a 	mov	r3,r2
811101a4:	01400e44 	movi	r5,57
811101a8:	d9800717 	ldw	r6,28(sp)
811101ac:	00000506 	br	811101c4 <_dtoa_r+0x974>
811101b0:	18ffffc4 	addi	r3,r3,-1
811101b4:	11824726 	beq	r2,r6,81110ad4 <_dtoa_r+0x1284>
811101b8:	1d000003 	ldbu	r20,0(r3)
811101bc:	102f883a 	mov	r23,r2
811101c0:	10bfffc4 	addi	r2,r2,-1
811101c4:	a1003fcc 	andi	r4,r20,255
811101c8:	2100201c 	xori	r4,r4,128
811101cc:	213fe004 	addi	r4,r4,-128
811101d0:	217ff726 	beq	r4,r5,811101b0 <__reset+0xfb0f01b0>
811101d4:	a2000044 	addi	r8,r20,1
811101d8:	12000005 	stb	r8,0(r2)
811101dc:	003f4606 	br	8110fef8 <__reset+0xfb0efef8>
811101e0:	d9000b17 	ldw	r4,44(sp)
811101e4:	2000c826 	beq	r4,zero,81110508 <_dtoa_r+0xcb8>
811101e8:	d9800317 	ldw	r6,12(sp)
811101ec:	00c00044 	movi	r3,1
811101f0:	1980f90e 	bge	r3,r6,811105d8 <_dtoa_r+0xd88>
811101f4:	d8800617 	ldw	r2,24(sp)
811101f8:	d8c00a17 	ldw	r3,40(sp)
811101fc:	157fffc4 	addi	r21,r2,-1
81110200:	1d41f316 	blt	r3,r21,811109d0 <_dtoa_r+0x1180>
81110204:	1d6bc83a 	sub	r21,r3,r21
81110208:	d9c00617 	ldw	r7,24(sp)
8111020c:	3802aa16 	blt	r7,zero,81110cb8 <_dtoa_r+0x1468>
81110210:	dd000817 	ldw	r20,32(sp)
81110214:	d8800617 	ldw	r2,24(sp)
81110218:	d8c00817 	ldw	r3,32(sp)
8111021c:	01400044 	movi	r5,1
81110220:	e009883a 	mov	r4,fp
81110224:	1887883a 	add	r3,r3,r2
81110228:	d8c00815 	stw	r3,32(sp)
8111022c:	b0ad883a 	add	r22,r22,r2
81110230:	11131b00 	call	811131b0 <__i2b>
81110234:	1023883a 	mov	r17,r2
81110238:	a0000826 	beq	r20,zero,8111025c <_dtoa_r+0xa0c>
8111023c:	0580070e 	bge	zero,r22,8111025c <_dtoa_r+0xa0c>
81110240:	a005883a 	mov	r2,r20
81110244:	b500b916 	blt	r22,r20,8111052c <_dtoa_r+0xcdc>
81110248:	d9000817 	ldw	r4,32(sp)
8111024c:	a0a9c83a 	sub	r20,r20,r2
81110250:	b0adc83a 	sub	r22,r22,r2
81110254:	2089c83a 	sub	r4,r4,r2
81110258:	d9000815 	stw	r4,32(sp)
8111025c:	d9800a17 	ldw	r6,40(sp)
81110260:	0181810e 	bge	zero,r6,81110868 <_dtoa_r+0x1018>
81110264:	d9c00b17 	ldw	r7,44(sp)
81110268:	3800b326 	beq	r7,zero,81110538 <_dtoa_r+0xce8>
8111026c:	a800b226 	beq	r21,zero,81110538 <_dtoa_r+0xce8>
81110270:	880b883a 	mov	r5,r17
81110274:	a80d883a 	mov	r6,r21
81110278:	e009883a 	mov	r4,fp
8111027c:	11133e40 	call	811133e4 <__pow5mult>
81110280:	d9800917 	ldw	r6,36(sp)
81110284:	100b883a 	mov	r5,r2
81110288:	e009883a 	mov	r4,fp
8111028c:	1023883a 	mov	r17,r2
81110290:	11131ec0 	call	811131ec <__multiply>
81110294:	1021883a 	mov	r16,r2
81110298:	d8800a17 	ldw	r2,40(sp)
8111029c:	d9400917 	ldw	r5,36(sp)
811102a0:	e009883a 	mov	r4,fp
811102a4:	1545c83a 	sub	r2,r2,r21
811102a8:	d8800a15 	stw	r2,40(sp)
811102ac:	1112e4c0 	call	81112e4c <_Bfree>
811102b0:	d8c00a17 	ldw	r3,40(sp)
811102b4:	18009f1e 	bne	r3,zero,81110534 <_dtoa_r+0xce4>
811102b8:	05c00044 	movi	r23,1
811102bc:	e009883a 	mov	r4,fp
811102c0:	b80b883a 	mov	r5,r23
811102c4:	11131b00 	call	811131b0 <__i2b>
811102c8:	d9000d17 	ldw	r4,52(sp)
811102cc:	102b883a 	mov	r21,r2
811102d0:	2000ce26 	beq	r4,zero,8111060c <_dtoa_r+0xdbc>
811102d4:	200d883a 	mov	r6,r4
811102d8:	100b883a 	mov	r5,r2
811102dc:	e009883a 	mov	r4,fp
811102e0:	11133e40 	call	811133e4 <__pow5mult>
811102e4:	d9800317 	ldw	r6,12(sp)
811102e8:	102b883a 	mov	r21,r2
811102ec:	b981810e 	bge	r23,r6,811108f4 <_dtoa_r+0x10a4>
811102f0:	0027883a 	mov	r19,zero
811102f4:	a8800417 	ldw	r2,16(r21)
811102f8:	05c00804 	movi	r23,32
811102fc:	10800104 	addi	r2,r2,4
81110300:	1085883a 	add	r2,r2,r2
81110304:	1085883a 	add	r2,r2,r2
81110308:	a885883a 	add	r2,r21,r2
8111030c:	11000017 	ldw	r4,0(r2)
81110310:	11130980 	call	81113098 <__hi0bits>
81110314:	b885c83a 	sub	r2,r23,r2
81110318:	1585883a 	add	r2,r2,r22
8111031c:	108007cc 	andi	r2,r2,31
81110320:	1000b326 	beq	r2,zero,811105f0 <_dtoa_r+0xda0>
81110324:	00c00804 	movi	r3,32
81110328:	1887c83a 	sub	r3,r3,r2
8111032c:	01000104 	movi	r4,4
81110330:	20c2cd0e 	bge	r4,r3,81110e68 <_dtoa_r+0x1618>
81110334:	00c00704 	movi	r3,28
81110338:	1885c83a 	sub	r2,r3,r2
8111033c:	d8c00817 	ldw	r3,32(sp)
81110340:	a0a9883a 	add	r20,r20,r2
81110344:	b0ad883a 	add	r22,r22,r2
81110348:	1887883a 	add	r3,r3,r2
8111034c:	d8c00815 	stw	r3,32(sp)
81110350:	d9800817 	ldw	r6,32(sp)
81110354:	0180040e 	bge	zero,r6,81110368 <_dtoa_r+0xb18>
81110358:	800b883a 	mov	r5,r16
8111035c:	e009883a 	mov	r4,fp
81110360:	11135240 	call	81113524 <__lshift>
81110364:	1021883a 	mov	r16,r2
81110368:	0580050e 	bge	zero,r22,81110380 <_dtoa_r+0xb30>
8111036c:	a80b883a 	mov	r5,r21
81110370:	b00d883a 	mov	r6,r22
81110374:	e009883a 	mov	r4,fp
81110378:	11135240 	call	81113524 <__lshift>
8111037c:	102b883a 	mov	r21,r2
81110380:	d9c00e17 	ldw	r7,56(sp)
81110384:	3801211e 	bne	r7,zero,8111080c <_dtoa_r+0xfbc>
81110388:	d9800617 	ldw	r6,24(sp)
8111038c:	0181380e 	bge	zero,r6,81110870 <_dtoa_r+0x1020>
81110390:	d8c00b17 	ldw	r3,44(sp)
81110394:	1800ab1e 	bne	r3,zero,81110644 <_dtoa_r+0xdf4>
81110398:	dc800717 	ldw	r18,28(sp)
8111039c:	dcc00617 	ldw	r19,24(sp)
811103a0:	9029883a 	mov	r20,r18
811103a4:	00000206 	br	811103b0 <_dtoa_r+0xb60>
811103a8:	1112e740 	call	81112e74 <__multadd>
811103ac:	1021883a 	mov	r16,r2
811103b0:	a80b883a 	mov	r5,r21
811103b4:	8009883a 	mov	r4,r16
811103b8:	110f6500 	call	8110f650 <quorem>
811103bc:	10800c04 	addi	r2,r2,48
811103c0:	90800005 	stb	r2,0(r18)
811103c4:	94800044 	addi	r18,r18,1
811103c8:	9507c83a 	sub	r3,r18,r20
811103cc:	000f883a 	mov	r7,zero
811103d0:	01800284 	movi	r6,10
811103d4:	800b883a 	mov	r5,r16
811103d8:	e009883a 	mov	r4,fp
811103dc:	1cfff216 	blt	r3,r19,811103a8 <__reset+0xfb0f03a8>
811103e0:	1011883a 	mov	r8,r2
811103e4:	d8800617 	ldw	r2,24(sp)
811103e8:	0082370e 	bge	zero,r2,81110cc8 <_dtoa_r+0x1478>
811103ec:	d9000717 	ldw	r4,28(sp)
811103f0:	0025883a 	mov	r18,zero
811103f4:	20af883a 	add	r23,r4,r2
811103f8:	01800044 	movi	r6,1
811103fc:	800b883a 	mov	r5,r16
81110400:	e009883a 	mov	r4,fp
81110404:	da001715 	stw	r8,92(sp)
81110408:	11135240 	call	81113524 <__lshift>
8111040c:	a80b883a 	mov	r5,r21
81110410:	1009883a 	mov	r4,r2
81110414:	d8800915 	stw	r2,36(sp)
81110418:	111366c0 	call	8111366c <__mcmp>
8111041c:	da001717 	ldw	r8,92(sp)
81110420:	0081800e 	bge	zero,r2,81110a24 <_dtoa_r+0x11d4>
81110424:	b93fffc3 	ldbu	r4,-1(r23)
81110428:	b8bfffc4 	addi	r2,r23,-1
8111042c:	1007883a 	mov	r3,r2
81110430:	01800e44 	movi	r6,57
81110434:	d9c00717 	ldw	r7,28(sp)
81110438:	00000506 	br	81110450 <_dtoa_r+0xc00>
8111043c:	18ffffc4 	addi	r3,r3,-1
81110440:	11c12326 	beq	r2,r7,811108d0 <_dtoa_r+0x1080>
81110444:	19000003 	ldbu	r4,0(r3)
81110448:	102f883a 	mov	r23,r2
8111044c:	10bfffc4 	addi	r2,r2,-1
81110450:	21403fcc 	andi	r5,r4,255
81110454:	2940201c 	xori	r5,r5,128
81110458:	297fe004 	addi	r5,r5,-128
8111045c:	29bff726 	beq	r5,r6,8111043c <__reset+0xfb0f043c>
81110460:	21000044 	addi	r4,r4,1
81110464:	11000005 	stb	r4,0(r2)
81110468:	a80b883a 	mov	r5,r21
8111046c:	e009883a 	mov	r4,fp
81110470:	1112e4c0 	call	81112e4c <_Bfree>
81110474:	883ea026 	beq	r17,zero,8110fef8 <__reset+0xfb0efef8>
81110478:	90000426 	beq	r18,zero,8111048c <_dtoa_r+0xc3c>
8111047c:	94400326 	beq	r18,r17,8111048c <_dtoa_r+0xc3c>
81110480:	900b883a 	mov	r5,r18
81110484:	e009883a 	mov	r4,fp
81110488:	1112e4c0 	call	81112e4c <_Bfree>
8111048c:	880b883a 	mov	r5,r17
81110490:	e009883a 	mov	r4,fp
81110494:	1112e4c0 	call	81112e4c <_Bfree>
81110498:	003e9706 	br	8110fef8 <__reset+0xfb0efef8>
8111049c:	01800044 	movi	r6,1
811104a0:	d9800e15 	stw	r6,56(sp)
811104a4:	003d9606 	br	8110fb00 <__reset+0xfb0efb00>
811104a8:	d8800817 	ldw	r2,32(sp)
811104ac:	d8c00517 	ldw	r3,20(sp)
811104b0:	d8000d15 	stw	zero,52(sp)
811104b4:	10c5c83a 	sub	r2,r2,r3
811104b8:	00c9c83a 	sub	r4,zero,r3
811104bc:	d8800815 	stw	r2,32(sp)
811104c0:	d9000a15 	stw	r4,40(sp)
811104c4:	003d9706 	br	8110fb24 <__reset+0xfb0efb24>
811104c8:	05adc83a 	sub	r22,zero,r22
811104cc:	dd800815 	stw	r22,32(sp)
811104d0:	002d883a 	mov	r22,zero
811104d4:	003d8e06 	br	8110fb10 <__reset+0xfb0efb10>
811104d8:	d9000517 	ldw	r4,20(sp)
811104dc:	11192840 	call	81119284 <__floatsidf>
811104e0:	100d883a 	mov	r6,r2
811104e4:	180f883a 	mov	r7,r3
811104e8:	a009883a 	mov	r4,r20
811104ec:	880b883a 	mov	r5,r17
811104f0:	11186b00 	call	811186b0 <__eqdf2>
811104f4:	103d7126 	beq	r2,zero,8110fabc <__reset+0xfb0efabc>
811104f8:	d9c00517 	ldw	r7,20(sp)
811104fc:	39ffffc4 	addi	r7,r7,-1
81110500:	d9c00515 	stw	r7,20(sp)
81110504:	003d6d06 	br	8110fabc <__reset+0xfb0efabc>
81110508:	dd400a17 	ldw	r21,40(sp)
8111050c:	dd000817 	ldw	r20,32(sp)
81110510:	0023883a 	mov	r17,zero
81110514:	003f4806 	br	81110238 <__reset+0xfb0f0238>
81110518:	10e3c83a 	sub	r17,r2,r3
8111051c:	9448983a 	sll	r4,r18,r17
81110520:	003d3206 	br	8110f9ec <__reset+0xfb0ef9ec>
81110524:	d8000e15 	stw	zero,56(sp)
81110528:	003d7506 	br	8110fb00 <__reset+0xfb0efb00>
8111052c:	b005883a 	mov	r2,r22
81110530:	003f4506 	br	81110248 <__reset+0xfb0f0248>
81110534:	dc000915 	stw	r16,36(sp)
81110538:	d9800a17 	ldw	r6,40(sp)
8111053c:	d9400917 	ldw	r5,36(sp)
81110540:	e009883a 	mov	r4,fp
81110544:	11133e40 	call	811133e4 <__pow5mult>
81110548:	1021883a 	mov	r16,r2
8111054c:	003f5a06 	br	811102b8 <__reset+0xfb0f02b8>
81110550:	01c00044 	movi	r7,1
81110554:	d9c00b15 	stw	r7,44(sp)
81110558:	d8802217 	ldw	r2,136(sp)
8111055c:	0081280e 	bge	zero,r2,81110a00 <_dtoa_r+0x11b0>
81110560:	100d883a 	mov	r6,r2
81110564:	1021883a 	mov	r16,r2
81110568:	d8800c15 	stw	r2,48(sp)
8111056c:	d8800615 	stw	r2,24(sp)
81110570:	003d8806 	br	8110fb94 <__reset+0xfb0efb94>
81110574:	d8800617 	ldw	r2,24(sp)
81110578:	00be9b16 	blt	zero,r2,8110ffe8 <__reset+0xfb0effe8>
8111057c:	10010f1e 	bne	r2,zero,811109bc <_dtoa_r+0x116c>
81110580:	880b883a 	mov	r5,r17
81110584:	000d883a 	mov	r6,zero
81110588:	01d00534 	movhi	r7,16404
8111058c:	8009883a 	mov	r4,r16
81110590:	110c3380 	call	8110c338 <__muldf3>
81110594:	900d883a 	mov	r6,r18
81110598:	980f883a 	mov	r7,r19
8111059c:	1009883a 	mov	r4,r2
811105a0:	180b883a 	mov	r5,r3
811105a4:	11187380 	call	81118738 <__gedf2>
811105a8:	002b883a 	mov	r21,zero
811105ac:	0023883a 	mov	r17,zero
811105b0:	1000bf16 	blt	r2,zero,811108b0 <_dtoa_r+0x1060>
811105b4:	d9802217 	ldw	r6,136(sp)
811105b8:	ddc00717 	ldw	r23,28(sp)
811105bc:	018c303a 	nor	r6,zero,r6
811105c0:	d9800515 	stw	r6,20(sp)
811105c4:	a80b883a 	mov	r5,r21
811105c8:	e009883a 	mov	r4,fp
811105cc:	1112e4c0 	call	81112e4c <_Bfree>
811105d0:	883e4926 	beq	r17,zero,8110fef8 <__reset+0xfb0efef8>
811105d4:	003fad06 	br	8111048c <__reset+0xfb0f048c>
811105d8:	d9c01117 	ldw	r7,68(sp)
811105dc:	3801bc26 	beq	r7,zero,81110cd0 <_dtoa_r+0x1480>
811105e0:	10810cc4 	addi	r2,r2,1075
811105e4:	dd400a17 	ldw	r21,40(sp)
811105e8:	dd000817 	ldw	r20,32(sp)
811105ec:	003f0a06 	br	81110218 <__reset+0xfb0f0218>
811105f0:	00800704 	movi	r2,28
811105f4:	d9000817 	ldw	r4,32(sp)
811105f8:	a0a9883a 	add	r20,r20,r2
811105fc:	b0ad883a 	add	r22,r22,r2
81110600:	2089883a 	add	r4,r4,r2
81110604:	d9000815 	stw	r4,32(sp)
81110608:	003f5106 	br	81110350 <__reset+0xfb0f0350>
8111060c:	d8c00317 	ldw	r3,12(sp)
81110610:	b8c1fc0e 	bge	r23,r3,81110e04 <_dtoa_r+0x15b4>
81110614:	0027883a 	mov	r19,zero
81110618:	b805883a 	mov	r2,r23
8111061c:	003f3e06 	br	81110318 <__reset+0xfb0f0318>
81110620:	880b883a 	mov	r5,r17
81110624:	e009883a 	mov	r4,fp
81110628:	000f883a 	mov	r7,zero
8111062c:	01800284 	movi	r6,10
81110630:	1112e740 	call	81112e74 <__multadd>
81110634:	d9000c17 	ldw	r4,48(sp)
81110638:	1023883a 	mov	r17,r2
8111063c:	0102040e 	bge	zero,r4,81110e50 <_dtoa_r+0x1600>
81110640:	d9000615 	stw	r4,24(sp)
81110644:	0500050e 	bge	zero,r20,8111065c <_dtoa_r+0xe0c>
81110648:	880b883a 	mov	r5,r17
8111064c:	a00d883a 	mov	r6,r20
81110650:	e009883a 	mov	r4,fp
81110654:	11135240 	call	81113524 <__lshift>
81110658:	1023883a 	mov	r17,r2
8111065c:	9801241e 	bne	r19,zero,81110af0 <_dtoa_r+0x12a0>
81110660:	8829883a 	mov	r20,r17
81110664:	d9000617 	ldw	r4,24(sp)
81110668:	dcc00717 	ldw	r19,28(sp)
8111066c:	9480004c 	andi	r18,r18,1
81110670:	20bfffc4 	addi	r2,r4,-1
81110674:	9885883a 	add	r2,r19,r2
81110678:	d8800415 	stw	r2,16(sp)
8111067c:	dc800615 	stw	r18,24(sp)
81110680:	a80b883a 	mov	r5,r21
81110684:	8009883a 	mov	r4,r16
81110688:	110f6500 	call	8110f650 <quorem>
8111068c:	880b883a 	mov	r5,r17
81110690:	8009883a 	mov	r4,r16
81110694:	102f883a 	mov	r23,r2
81110698:	111366c0 	call	8111366c <__mcmp>
8111069c:	a80b883a 	mov	r5,r21
811106a0:	a00d883a 	mov	r6,r20
811106a4:	e009883a 	mov	r4,fp
811106a8:	102d883a 	mov	r22,r2
811106ac:	11136cc0 	call	811136cc <__mdiff>
811106b0:	1007883a 	mov	r3,r2
811106b4:	10800317 	ldw	r2,12(r2)
811106b8:	bc800c04 	addi	r18,r23,48
811106bc:	180b883a 	mov	r5,r3
811106c0:	10004e1e 	bne	r2,zero,811107fc <_dtoa_r+0xfac>
811106c4:	8009883a 	mov	r4,r16
811106c8:	d8c01615 	stw	r3,88(sp)
811106cc:	111366c0 	call	8111366c <__mcmp>
811106d0:	d8c01617 	ldw	r3,88(sp)
811106d4:	e009883a 	mov	r4,fp
811106d8:	d8801615 	stw	r2,88(sp)
811106dc:	180b883a 	mov	r5,r3
811106e0:	1112e4c0 	call	81112e4c <_Bfree>
811106e4:	d8801617 	ldw	r2,88(sp)
811106e8:	1000041e 	bne	r2,zero,811106fc <_dtoa_r+0xeac>
811106ec:	d9800317 	ldw	r6,12(sp)
811106f0:	3000021e 	bne	r6,zero,811106fc <_dtoa_r+0xeac>
811106f4:	d8c00617 	ldw	r3,24(sp)
811106f8:	18003726 	beq	r3,zero,811107d8 <_dtoa_r+0xf88>
811106fc:	b0002016 	blt	r22,zero,81110780 <_dtoa_r+0xf30>
81110700:	b000041e 	bne	r22,zero,81110714 <_dtoa_r+0xec4>
81110704:	d9000317 	ldw	r4,12(sp)
81110708:	2000021e 	bne	r4,zero,81110714 <_dtoa_r+0xec4>
8111070c:	d8c00617 	ldw	r3,24(sp)
81110710:	18001b26 	beq	r3,zero,81110780 <_dtoa_r+0xf30>
81110714:	00810716 	blt	zero,r2,81110b34 <_dtoa_r+0x12e4>
81110718:	d8c00417 	ldw	r3,16(sp)
8111071c:	9d800044 	addi	r22,r19,1
81110720:	9c800005 	stb	r18,0(r19)
81110724:	b02f883a 	mov	r23,r22
81110728:	98c10626 	beq	r19,r3,81110b44 <_dtoa_r+0x12f4>
8111072c:	800b883a 	mov	r5,r16
81110730:	000f883a 	mov	r7,zero
81110734:	01800284 	movi	r6,10
81110738:	e009883a 	mov	r4,fp
8111073c:	1112e740 	call	81112e74 <__multadd>
81110740:	1021883a 	mov	r16,r2
81110744:	000f883a 	mov	r7,zero
81110748:	01800284 	movi	r6,10
8111074c:	880b883a 	mov	r5,r17
81110750:	e009883a 	mov	r4,fp
81110754:	8d002526 	beq	r17,r20,811107ec <_dtoa_r+0xf9c>
81110758:	1112e740 	call	81112e74 <__multadd>
8111075c:	a00b883a 	mov	r5,r20
81110760:	000f883a 	mov	r7,zero
81110764:	01800284 	movi	r6,10
81110768:	e009883a 	mov	r4,fp
8111076c:	1023883a 	mov	r17,r2
81110770:	1112e740 	call	81112e74 <__multadd>
81110774:	1029883a 	mov	r20,r2
81110778:	b027883a 	mov	r19,r22
8111077c:	003fc006 	br	81110680 <__reset+0xfb0f0680>
81110780:	9011883a 	mov	r8,r18
81110784:	00800e0e 	bge	zero,r2,811107c0 <_dtoa_r+0xf70>
81110788:	800b883a 	mov	r5,r16
8111078c:	01800044 	movi	r6,1
81110790:	e009883a 	mov	r4,fp
81110794:	da001715 	stw	r8,92(sp)
81110798:	11135240 	call	81113524 <__lshift>
8111079c:	a80b883a 	mov	r5,r21
811107a0:	1009883a 	mov	r4,r2
811107a4:	1021883a 	mov	r16,r2
811107a8:	111366c0 	call	8111366c <__mcmp>
811107ac:	da001717 	ldw	r8,92(sp)
811107b0:	0081960e 	bge	zero,r2,81110e0c <_dtoa_r+0x15bc>
811107b4:	00800e44 	movi	r2,57
811107b8:	40817026 	beq	r8,r2,81110d7c <_dtoa_r+0x152c>
811107bc:	ba000c44 	addi	r8,r23,49
811107c0:	8825883a 	mov	r18,r17
811107c4:	9dc00044 	addi	r23,r19,1
811107c8:	9a000005 	stb	r8,0(r19)
811107cc:	a023883a 	mov	r17,r20
811107d0:	dc000915 	stw	r16,36(sp)
811107d4:	003f2406 	br	81110468 <__reset+0xfb0f0468>
811107d8:	00800e44 	movi	r2,57
811107dc:	9011883a 	mov	r8,r18
811107e0:	90816626 	beq	r18,r2,81110d7c <_dtoa_r+0x152c>
811107e4:	05bff516 	blt	zero,r22,811107bc <__reset+0xfb0f07bc>
811107e8:	003ff506 	br	811107c0 <__reset+0xfb0f07c0>
811107ec:	1112e740 	call	81112e74 <__multadd>
811107f0:	1023883a 	mov	r17,r2
811107f4:	1029883a 	mov	r20,r2
811107f8:	003fdf06 	br	81110778 <__reset+0xfb0f0778>
811107fc:	e009883a 	mov	r4,fp
81110800:	1112e4c0 	call	81112e4c <_Bfree>
81110804:	00800044 	movi	r2,1
81110808:	003fbc06 	br	811106fc <__reset+0xfb0f06fc>
8111080c:	a80b883a 	mov	r5,r21
81110810:	8009883a 	mov	r4,r16
81110814:	111366c0 	call	8111366c <__mcmp>
81110818:	103edb0e 	bge	r2,zero,81110388 <__reset+0xfb0f0388>
8111081c:	800b883a 	mov	r5,r16
81110820:	000f883a 	mov	r7,zero
81110824:	01800284 	movi	r6,10
81110828:	e009883a 	mov	r4,fp
8111082c:	1112e740 	call	81112e74 <__multadd>
81110830:	1021883a 	mov	r16,r2
81110834:	d8800517 	ldw	r2,20(sp)
81110838:	d8c00b17 	ldw	r3,44(sp)
8111083c:	10bfffc4 	addi	r2,r2,-1
81110840:	d8800515 	stw	r2,20(sp)
81110844:	183f761e 	bne	r3,zero,81110620 <__reset+0xfb0f0620>
81110848:	d9000c17 	ldw	r4,48(sp)
8111084c:	0101730e 	bge	zero,r4,81110e1c <_dtoa_r+0x15cc>
81110850:	d9000615 	stw	r4,24(sp)
81110854:	003ed006 	br	81110398 <__reset+0xfb0f0398>
81110858:	00800084 	movi	r2,2
8111085c:	3081861e 	bne	r6,r2,81110e78 <_dtoa_r+0x1628>
81110860:	d8000b15 	stw	zero,44(sp)
81110864:	003f3c06 	br	81110558 <__reset+0xfb0f0558>
81110868:	dc000917 	ldw	r16,36(sp)
8111086c:	003e9206 	br	811102b8 <__reset+0xfb0f02b8>
81110870:	d9c00317 	ldw	r7,12(sp)
81110874:	00800084 	movi	r2,2
81110878:	11fec50e 	bge	r2,r7,81110390 <__reset+0xfb0f0390>
8111087c:	d9000617 	ldw	r4,24(sp)
81110880:	20013c1e 	bne	r4,zero,81110d74 <_dtoa_r+0x1524>
81110884:	a80b883a 	mov	r5,r21
81110888:	000f883a 	mov	r7,zero
8111088c:	01800144 	movi	r6,5
81110890:	e009883a 	mov	r4,fp
81110894:	1112e740 	call	81112e74 <__multadd>
81110898:	100b883a 	mov	r5,r2
8111089c:	8009883a 	mov	r4,r16
811108a0:	102b883a 	mov	r21,r2
811108a4:	111366c0 	call	8111366c <__mcmp>
811108a8:	dc000915 	stw	r16,36(sp)
811108ac:	00bf410e 	bge	zero,r2,811105b4 <__reset+0xfb0f05b4>
811108b0:	d9c00717 	ldw	r7,28(sp)
811108b4:	00800c44 	movi	r2,49
811108b8:	38800005 	stb	r2,0(r7)
811108bc:	d8800517 	ldw	r2,20(sp)
811108c0:	3dc00044 	addi	r23,r7,1
811108c4:	10800044 	addi	r2,r2,1
811108c8:	d8800515 	stw	r2,20(sp)
811108cc:	003f3d06 	br	811105c4 <__reset+0xfb0f05c4>
811108d0:	d9800517 	ldw	r6,20(sp)
811108d4:	d9c00717 	ldw	r7,28(sp)
811108d8:	00800c44 	movi	r2,49
811108dc:	31800044 	addi	r6,r6,1
811108e0:	d9800515 	stw	r6,20(sp)
811108e4:	38800005 	stb	r2,0(r7)
811108e8:	003edf06 	br	81110468 <__reset+0xfb0f0468>
811108ec:	d8000b15 	stw	zero,44(sp)
811108f0:	003c9f06 	br	8110fb70 <__reset+0xfb0efb70>
811108f4:	903e7e1e 	bne	r18,zero,811102f0 <__reset+0xfb0f02f0>
811108f8:	00800434 	movhi	r2,16
811108fc:	10bfffc4 	addi	r2,r2,-1
81110900:	9884703a 	and	r2,r19,r2
81110904:	1000ea1e 	bne	r2,zero,81110cb0 <_dtoa_r+0x1460>
81110908:	9cdffc2c 	andhi	r19,r19,32752
8111090c:	9800e826 	beq	r19,zero,81110cb0 <_dtoa_r+0x1460>
81110910:	d9c00817 	ldw	r7,32(sp)
81110914:	b5800044 	addi	r22,r22,1
81110918:	04c00044 	movi	r19,1
8111091c:	39c00044 	addi	r7,r7,1
81110920:	d9c00815 	stw	r7,32(sp)
81110924:	d8800d17 	ldw	r2,52(sp)
81110928:	103e721e 	bne	r2,zero,811102f4 <__reset+0xfb0f02f4>
8111092c:	00800044 	movi	r2,1
81110930:	003e7906 	br	81110318 <__reset+0xfb0f0318>
81110934:	8009883a 	mov	r4,r16
81110938:	11192840 	call	81119284 <__floatsidf>
8111093c:	d9800f17 	ldw	r6,60(sp)
81110940:	d9c01017 	ldw	r7,64(sp)
81110944:	1009883a 	mov	r4,r2
81110948:	180b883a 	mov	r5,r3
8111094c:	110c3380 	call	8110c338 <__muldf3>
81110950:	000d883a 	mov	r6,zero
81110954:	01d00734 	movhi	r7,16412
81110958:	1009883a 	mov	r4,r2
8111095c:	180b883a 	mov	r5,r3
81110960:	111751c0 	call	8111751c <__adddf3>
81110964:	047f3034 	movhi	r17,64704
81110968:	1021883a 	mov	r16,r2
8111096c:	1c63883a 	add	r17,r3,r17
81110970:	d9000f17 	ldw	r4,60(sp)
81110974:	d9401017 	ldw	r5,64(sp)
81110978:	000d883a 	mov	r6,zero
8111097c:	01d00534 	movhi	r7,16404
81110980:	11189080 	call	81118908 <__subdf3>
81110984:	800d883a 	mov	r6,r16
81110988:	880f883a 	mov	r7,r17
8111098c:	1009883a 	mov	r4,r2
81110990:	180b883a 	mov	r5,r3
81110994:	102b883a 	mov	r21,r2
81110998:	1829883a 	mov	r20,r3
8111099c:	11187380 	call	81118738 <__gedf2>
811109a0:	00806c16 	blt	zero,r2,81110b54 <_dtoa_r+0x1304>
811109a4:	89e0003c 	xorhi	r7,r17,32768
811109a8:	800d883a 	mov	r6,r16
811109ac:	a809883a 	mov	r4,r21
811109b0:	a00b883a 	mov	r5,r20
811109b4:	11188140 	call	81118814 <__ledf2>
811109b8:	103d7e0e 	bge	r2,zero,8110ffb4 <__reset+0xfb0effb4>
811109bc:	002b883a 	mov	r21,zero
811109c0:	0023883a 	mov	r17,zero
811109c4:	003efb06 	br	811105b4 <__reset+0xfb0f05b4>
811109c8:	d8800717 	ldw	r2,28(sp)
811109cc:	003bd006 	br	8110f910 <__reset+0xfb0ef910>
811109d0:	d9000a17 	ldw	r4,40(sp)
811109d4:	d9800d17 	ldw	r6,52(sp)
811109d8:	dd400a15 	stw	r21,40(sp)
811109dc:	a905c83a 	sub	r2,r21,r4
811109e0:	308d883a 	add	r6,r6,r2
811109e4:	d9800d15 	stw	r6,52(sp)
811109e8:	002b883a 	mov	r21,zero
811109ec:	003e0606 	br	81110208 <__reset+0xfb0f0208>
811109f0:	9023883a 	mov	r17,r18
811109f4:	9829883a 	mov	r20,r19
811109f8:	04000084 	movi	r16,2
811109fc:	003c9206 	br	8110fc48 <__reset+0xfb0efc48>
81110a00:	04000044 	movi	r16,1
81110a04:	dc000c15 	stw	r16,48(sp)
81110a08:	dc000615 	stw	r16,24(sp)
81110a0c:	dc002215 	stw	r16,136(sp)
81110a10:	e0001115 	stw	zero,68(fp)
81110a14:	000b883a 	mov	r5,zero
81110a18:	003c6906 	br	8110fbc0 <__reset+0xfb0efbc0>
81110a1c:	3021883a 	mov	r16,r6
81110a20:	003ffb06 	br	81110a10 <__reset+0xfb0f0a10>
81110a24:	1000021e 	bne	r2,zero,81110a30 <_dtoa_r+0x11e0>
81110a28:	4200004c 	andi	r8,r8,1
81110a2c:	403e7d1e 	bne	r8,zero,81110424 <__reset+0xfb0f0424>
81110a30:	01000c04 	movi	r4,48
81110a34:	00000106 	br	81110a3c <_dtoa_r+0x11ec>
81110a38:	102f883a 	mov	r23,r2
81110a3c:	b8bfffc4 	addi	r2,r23,-1
81110a40:	10c00007 	ldb	r3,0(r2)
81110a44:	193ffc26 	beq	r3,r4,81110a38 <__reset+0xfb0f0a38>
81110a48:	003e8706 	br	81110468 <__reset+0xfb0f0468>
81110a4c:	d8800517 	ldw	r2,20(sp)
81110a50:	00a3c83a 	sub	r17,zero,r2
81110a54:	8800a426 	beq	r17,zero,81110ce8 <_dtoa_r+0x1498>
81110a58:	888003cc 	andi	r2,r17,15
81110a5c:	100490fa 	slli	r2,r2,3
81110a60:	00e044b4 	movhi	r3,33042
81110a64:	18ff3004 	addi	r3,r3,-832
81110a68:	1885883a 	add	r2,r3,r2
81110a6c:	11800017 	ldw	r6,0(r2)
81110a70:	11c00117 	ldw	r7,4(r2)
81110a74:	9009883a 	mov	r4,r18
81110a78:	980b883a 	mov	r5,r19
81110a7c:	8823d13a 	srai	r17,r17,4
81110a80:	110c3380 	call	8110c338 <__muldf3>
81110a84:	d8800f15 	stw	r2,60(sp)
81110a88:	d8c01015 	stw	r3,64(sp)
81110a8c:	8800e826 	beq	r17,zero,81110e30 <_dtoa_r+0x15e0>
81110a90:	052044b4 	movhi	r20,33042
81110a94:	a53f2604 	addi	r20,r20,-872
81110a98:	04000084 	movi	r16,2
81110a9c:	8980004c 	andi	r6,r17,1
81110aa0:	1009883a 	mov	r4,r2
81110aa4:	8823d07a 	srai	r17,r17,1
81110aa8:	180b883a 	mov	r5,r3
81110aac:	30000426 	beq	r6,zero,81110ac0 <_dtoa_r+0x1270>
81110ab0:	a1800017 	ldw	r6,0(r20)
81110ab4:	a1c00117 	ldw	r7,4(r20)
81110ab8:	84000044 	addi	r16,r16,1
81110abc:	110c3380 	call	8110c338 <__muldf3>
81110ac0:	a5000204 	addi	r20,r20,8
81110ac4:	883ff51e 	bne	r17,zero,81110a9c <__reset+0xfb0f0a9c>
81110ac8:	d8800f15 	stw	r2,60(sp)
81110acc:	d8c01015 	stw	r3,64(sp)
81110ad0:	003c7606 	br	8110fcac <__reset+0xfb0efcac>
81110ad4:	00c00c04 	movi	r3,48
81110ad8:	10c00005 	stb	r3,0(r2)
81110adc:	d8c00517 	ldw	r3,20(sp)
81110ae0:	bd3fffc3 	ldbu	r20,-1(r23)
81110ae4:	18c00044 	addi	r3,r3,1
81110ae8:	d8c00515 	stw	r3,20(sp)
81110aec:	003db906 	br	811101d4 <__reset+0xfb0f01d4>
81110af0:	89400117 	ldw	r5,4(r17)
81110af4:	e009883a 	mov	r4,fp
81110af8:	1112da40 	call	81112da4 <_Balloc>
81110afc:	89800417 	ldw	r6,16(r17)
81110b00:	89400304 	addi	r5,r17,12
81110b04:	11000304 	addi	r4,r2,12
81110b08:	31800084 	addi	r6,r6,2
81110b0c:	318d883a 	add	r6,r6,r6
81110b10:	318d883a 	add	r6,r6,r6
81110b14:	1027883a 	mov	r19,r2
81110b18:	110ce640 	call	8110ce64 <memcpy>
81110b1c:	01800044 	movi	r6,1
81110b20:	980b883a 	mov	r5,r19
81110b24:	e009883a 	mov	r4,fp
81110b28:	11135240 	call	81113524 <__lshift>
81110b2c:	1029883a 	mov	r20,r2
81110b30:	003ecc06 	br	81110664 <__reset+0xfb0f0664>
81110b34:	00800e44 	movi	r2,57
81110b38:	90809026 	beq	r18,r2,81110d7c <_dtoa_r+0x152c>
81110b3c:	92000044 	addi	r8,r18,1
81110b40:	003f1f06 	br	811107c0 <__reset+0xfb0f07c0>
81110b44:	9011883a 	mov	r8,r18
81110b48:	8825883a 	mov	r18,r17
81110b4c:	a023883a 	mov	r17,r20
81110b50:	003e2906 	br	811103f8 <__reset+0xfb0f03f8>
81110b54:	002b883a 	mov	r21,zero
81110b58:	0023883a 	mov	r17,zero
81110b5c:	003f5406 	br	811108b0 <__reset+0xfb0f08b0>
81110b60:	61bfffc4 	addi	r6,r12,-1
81110b64:	300490fa 	slli	r2,r6,3
81110b68:	00e044b4 	movhi	r3,33042
81110b6c:	18ff3004 	addi	r3,r3,-832
81110b70:	1885883a 	add	r2,r3,r2
81110b74:	11000017 	ldw	r4,0(r2)
81110b78:	11400117 	ldw	r5,4(r2)
81110b7c:	d8800717 	ldw	r2,28(sp)
81110b80:	880f883a 	mov	r7,r17
81110b84:	d9801215 	stw	r6,72(sp)
81110b88:	800d883a 	mov	r6,r16
81110b8c:	db001615 	stw	r12,88(sp)
81110b90:	15c00044 	addi	r23,r2,1
81110b94:	110c3380 	call	8110c338 <__muldf3>
81110b98:	d9401017 	ldw	r5,64(sp)
81110b9c:	d9000f17 	ldw	r4,60(sp)
81110ba0:	d8c01515 	stw	r3,84(sp)
81110ba4:	d8801415 	stw	r2,80(sp)
81110ba8:	11192040 	call	81119204 <__fixdfsi>
81110bac:	1009883a 	mov	r4,r2
81110bb0:	1021883a 	mov	r16,r2
81110bb4:	11192840 	call	81119284 <__floatsidf>
81110bb8:	d9000f17 	ldw	r4,60(sp)
81110bbc:	d9401017 	ldw	r5,64(sp)
81110bc0:	100d883a 	mov	r6,r2
81110bc4:	180f883a 	mov	r7,r3
81110bc8:	11189080 	call	81118908 <__subdf3>
81110bcc:	1829883a 	mov	r20,r3
81110bd0:	d8c00717 	ldw	r3,28(sp)
81110bd4:	84000c04 	addi	r16,r16,48
81110bd8:	1023883a 	mov	r17,r2
81110bdc:	1c000005 	stb	r16,0(r3)
81110be0:	db001617 	ldw	r12,88(sp)
81110be4:	00800044 	movi	r2,1
81110be8:	60802226 	beq	r12,r2,81110c74 <_dtoa_r+0x1424>
81110bec:	d9c00717 	ldw	r7,28(sp)
81110bf0:	8805883a 	mov	r2,r17
81110bf4:	b82b883a 	mov	r21,r23
81110bf8:	3b19883a 	add	r12,r7,r12
81110bfc:	6023883a 	mov	r17,r12
81110c00:	a007883a 	mov	r3,r20
81110c04:	dc800f15 	stw	r18,60(sp)
81110c08:	000d883a 	mov	r6,zero
81110c0c:	01d00934 	movhi	r7,16420
81110c10:	1009883a 	mov	r4,r2
81110c14:	180b883a 	mov	r5,r3
81110c18:	110c3380 	call	8110c338 <__muldf3>
81110c1c:	180b883a 	mov	r5,r3
81110c20:	1009883a 	mov	r4,r2
81110c24:	1829883a 	mov	r20,r3
81110c28:	1025883a 	mov	r18,r2
81110c2c:	11192040 	call	81119204 <__fixdfsi>
81110c30:	1009883a 	mov	r4,r2
81110c34:	1021883a 	mov	r16,r2
81110c38:	11192840 	call	81119284 <__floatsidf>
81110c3c:	100d883a 	mov	r6,r2
81110c40:	180f883a 	mov	r7,r3
81110c44:	9009883a 	mov	r4,r18
81110c48:	a00b883a 	mov	r5,r20
81110c4c:	84000c04 	addi	r16,r16,48
81110c50:	11189080 	call	81118908 <__subdf3>
81110c54:	ad400044 	addi	r21,r21,1
81110c58:	ac3fffc5 	stb	r16,-1(r21)
81110c5c:	ac7fea1e 	bne	r21,r17,81110c08 <__reset+0xfb0f0c08>
81110c60:	1023883a 	mov	r17,r2
81110c64:	d8801217 	ldw	r2,72(sp)
81110c68:	dc800f17 	ldw	r18,60(sp)
81110c6c:	1829883a 	mov	r20,r3
81110c70:	b8af883a 	add	r23,r23,r2
81110c74:	d9001417 	ldw	r4,80(sp)
81110c78:	d9401517 	ldw	r5,84(sp)
81110c7c:	000d883a 	mov	r6,zero
81110c80:	01cff834 	movhi	r7,16352
81110c84:	111751c0 	call	8111751c <__adddf3>
81110c88:	880d883a 	mov	r6,r17
81110c8c:	a00f883a 	mov	r7,r20
81110c90:	1009883a 	mov	r4,r2
81110c94:	180b883a 	mov	r5,r3
81110c98:	11188140 	call	81118814 <__ledf2>
81110c9c:	10003e0e 	bge	r2,zero,81110d98 <_dtoa_r+0x1548>
81110ca0:	d9001317 	ldw	r4,76(sp)
81110ca4:	bd3fffc3 	ldbu	r20,-1(r23)
81110ca8:	d9000515 	stw	r4,20(sp)
81110cac:	003d3b06 	br	8111019c <__reset+0xfb0f019c>
81110cb0:	0027883a 	mov	r19,zero
81110cb4:	003f1b06 	br	81110924 <__reset+0xfb0f0924>
81110cb8:	d8800817 	ldw	r2,32(sp)
81110cbc:	11e9c83a 	sub	r20,r2,r7
81110cc0:	0005883a 	mov	r2,zero
81110cc4:	003d5406 	br	81110218 <__reset+0xfb0f0218>
81110cc8:	00800044 	movi	r2,1
81110ccc:	003dc706 	br	811103ec <__reset+0xfb0f03ec>
81110cd0:	d8c00217 	ldw	r3,8(sp)
81110cd4:	00800d84 	movi	r2,54
81110cd8:	dd400a17 	ldw	r21,40(sp)
81110cdc:	10c5c83a 	sub	r2,r2,r3
81110ce0:	dd000817 	ldw	r20,32(sp)
81110ce4:	003d4c06 	br	81110218 <__reset+0xfb0f0218>
81110ce8:	dc800f15 	stw	r18,60(sp)
81110cec:	dcc01015 	stw	r19,64(sp)
81110cf0:	04000084 	movi	r16,2
81110cf4:	003bed06 	br	8110fcac <__reset+0xfb0efcac>
81110cf8:	d9000617 	ldw	r4,24(sp)
81110cfc:	203f0d26 	beq	r4,zero,81110934 <__reset+0xfb0f0934>
81110d00:	d9800c17 	ldw	r6,48(sp)
81110d04:	01bcab0e 	bge	zero,r6,8110ffb4 <__reset+0xfb0effb4>
81110d08:	d9401017 	ldw	r5,64(sp)
81110d0c:	d9000f17 	ldw	r4,60(sp)
81110d10:	000d883a 	mov	r6,zero
81110d14:	01d00934 	movhi	r7,16420
81110d18:	110c3380 	call	8110c338 <__muldf3>
81110d1c:	81000044 	addi	r4,r16,1
81110d20:	d8800f15 	stw	r2,60(sp)
81110d24:	d8c01015 	stw	r3,64(sp)
81110d28:	11192840 	call	81119284 <__floatsidf>
81110d2c:	d9800f17 	ldw	r6,60(sp)
81110d30:	d9c01017 	ldw	r7,64(sp)
81110d34:	1009883a 	mov	r4,r2
81110d38:	180b883a 	mov	r5,r3
81110d3c:	110c3380 	call	8110c338 <__muldf3>
81110d40:	01d00734 	movhi	r7,16412
81110d44:	000d883a 	mov	r6,zero
81110d48:	1009883a 	mov	r4,r2
81110d4c:	180b883a 	mov	r5,r3
81110d50:	111751c0 	call	8111751c <__adddf3>
81110d54:	d9c00517 	ldw	r7,20(sp)
81110d58:	047f3034 	movhi	r17,64704
81110d5c:	1021883a 	mov	r16,r2
81110d60:	39ffffc4 	addi	r7,r7,-1
81110d64:	d9c01315 	stw	r7,76(sp)
81110d68:	1c63883a 	add	r17,r3,r17
81110d6c:	db000c17 	ldw	r12,48(sp)
81110d70:	003bea06 	br	8110fd1c <__reset+0xfb0efd1c>
81110d74:	dc000915 	stw	r16,36(sp)
81110d78:	003e0e06 	br	811105b4 <__reset+0xfb0f05b4>
81110d7c:	01000e44 	movi	r4,57
81110d80:	8825883a 	mov	r18,r17
81110d84:	9dc00044 	addi	r23,r19,1
81110d88:	99000005 	stb	r4,0(r19)
81110d8c:	a023883a 	mov	r17,r20
81110d90:	dc000915 	stw	r16,36(sp)
81110d94:	003da406 	br	81110428 <__reset+0xfb0f0428>
81110d98:	d9801417 	ldw	r6,80(sp)
81110d9c:	d9c01517 	ldw	r7,84(sp)
81110da0:	0009883a 	mov	r4,zero
81110da4:	014ff834 	movhi	r5,16352
81110da8:	11189080 	call	81118908 <__subdf3>
81110dac:	880d883a 	mov	r6,r17
81110db0:	a00f883a 	mov	r7,r20
81110db4:	1009883a 	mov	r4,r2
81110db8:	180b883a 	mov	r5,r3
81110dbc:	11187380 	call	81118738 <__gedf2>
81110dc0:	00bc7c0e 	bge	zero,r2,8110ffb4 <__reset+0xfb0effb4>
81110dc4:	01000c04 	movi	r4,48
81110dc8:	00000106 	br	81110dd0 <_dtoa_r+0x1580>
81110dcc:	102f883a 	mov	r23,r2
81110dd0:	b8bfffc4 	addi	r2,r23,-1
81110dd4:	10c00007 	ldb	r3,0(r2)
81110dd8:	193ffc26 	beq	r3,r4,81110dcc <__reset+0xfb0f0dcc>
81110ddc:	d9801317 	ldw	r6,76(sp)
81110de0:	d9800515 	stw	r6,20(sp)
81110de4:	003c4406 	br	8110fef8 <__reset+0xfb0efef8>
81110de8:	d9801317 	ldw	r6,76(sp)
81110dec:	d9800515 	stw	r6,20(sp)
81110df0:	003cea06 	br	8111019c <__reset+0xfb0f019c>
81110df4:	dd800f17 	ldw	r22,60(sp)
81110df8:	dcc01017 	ldw	r19,64(sp)
81110dfc:	dc801217 	ldw	r18,72(sp)
81110e00:	003c6c06 	br	8110ffb4 <__reset+0xfb0effb4>
81110e04:	903e031e 	bne	r18,zero,81110614 <__reset+0xfb0f0614>
81110e08:	003ebb06 	br	811108f8 <__reset+0xfb0f08f8>
81110e0c:	103e6c1e 	bne	r2,zero,811107c0 <__reset+0xfb0f07c0>
81110e10:	4080004c 	andi	r2,r8,1
81110e14:	103e6a26 	beq	r2,zero,811107c0 <__reset+0xfb0f07c0>
81110e18:	003e6606 	br	811107b4 <__reset+0xfb0f07b4>
81110e1c:	d8c00317 	ldw	r3,12(sp)
81110e20:	00800084 	movi	r2,2
81110e24:	10c02916 	blt	r2,r3,81110ecc <_dtoa_r+0x167c>
81110e28:	d9000c17 	ldw	r4,48(sp)
81110e2c:	003e8806 	br	81110850 <__reset+0xfb0f0850>
81110e30:	04000084 	movi	r16,2
81110e34:	003b9d06 	br	8110fcac <__reset+0xfb0efcac>
81110e38:	d9001317 	ldw	r4,76(sp)
81110e3c:	d9000515 	stw	r4,20(sp)
81110e40:	003cd606 	br	8111019c <__reset+0xfb0f019c>
81110e44:	d8801317 	ldw	r2,76(sp)
81110e48:	d8800515 	stw	r2,20(sp)
81110e4c:	003c2a06 	br	8110fef8 <__reset+0xfb0efef8>
81110e50:	d9800317 	ldw	r6,12(sp)
81110e54:	00800084 	movi	r2,2
81110e58:	11801516 	blt	r2,r6,81110eb0 <_dtoa_r+0x1660>
81110e5c:	d9c00c17 	ldw	r7,48(sp)
81110e60:	d9c00615 	stw	r7,24(sp)
81110e64:	003df706 	br	81110644 <__reset+0xfb0f0644>
81110e68:	193d3926 	beq	r3,r4,81110350 <__reset+0xfb0f0350>
81110e6c:	00c00f04 	movi	r3,60
81110e70:	1885c83a 	sub	r2,r3,r2
81110e74:	003ddf06 	br	811105f4 <__reset+0xfb0f05f4>
81110e78:	e009883a 	mov	r4,fp
81110e7c:	e0001115 	stw	zero,68(fp)
81110e80:	000b883a 	mov	r5,zero
81110e84:	1112da40 	call	81112da4 <_Balloc>
81110e88:	d8800715 	stw	r2,28(sp)
81110e8c:	d8c00717 	ldw	r3,28(sp)
81110e90:	00bfffc4 	movi	r2,-1
81110e94:	01000044 	movi	r4,1
81110e98:	d8800c15 	stw	r2,48(sp)
81110e9c:	e0c01015 	stw	r3,64(fp)
81110ea0:	d9000b15 	stw	r4,44(sp)
81110ea4:	d8800615 	stw	r2,24(sp)
81110ea8:	d8002215 	stw	zero,136(sp)
81110eac:	003c4106 	br	8110ffb4 <__reset+0xfb0effb4>
81110eb0:	d8c00c17 	ldw	r3,48(sp)
81110eb4:	d8c00615 	stw	r3,24(sp)
81110eb8:	003e7006 	br	8111087c <__reset+0xfb0f087c>
81110ebc:	04400044 	movi	r17,1
81110ec0:	003b2006 	br	8110fb44 <__reset+0xfb0efb44>
81110ec4:	000b883a 	mov	r5,zero
81110ec8:	003b3d06 	br	8110fbc0 <__reset+0xfb0efbc0>
81110ecc:	d8800c17 	ldw	r2,48(sp)
81110ed0:	d8800615 	stw	r2,24(sp)
81110ed4:	003e6906 	br	8111087c <__reset+0xfb0f087c>

81110ed8 <__sflush_r>:
81110ed8:	2880030b 	ldhu	r2,12(r5)
81110edc:	defffb04 	addi	sp,sp,-20
81110ee0:	dcc00315 	stw	r19,12(sp)
81110ee4:	dc400115 	stw	r17,4(sp)
81110ee8:	dfc00415 	stw	ra,16(sp)
81110eec:	dc800215 	stw	r18,8(sp)
81110ef0:	dc000015 	stw	r16,0(sp)
81110ef4:	10c0020c 	andi	r3,r2,8
81110ef8:	2823883a 	mov	r17,r5
81110efc:	2027883a 	mov	r19,r4
81110f00:	1800311e 	bne	r3,zero,81110fc8 <__sflush_r+0xf0>
81110f04:	28c00117 	ldw	r3,4(r5)
81110f08:	10820014 	ori	r2,r2,2048
81110f0c:	2880030d 	sth	r2,12(r5)
81110f10:	00c04b0e 	bge	zero,r3,81111040 <__sflush_r+0x168>
81110f14:	8a000a17 	ldw	r8,40(r17)
81110f18:	40002326 	beq	r8,zero,81110fa8 <__sflush_r+0xd0>
81110f1c:	9c000017 	ldw	r16,0(r19)
81110f20:	10c4000c 	andi	r3,r2,4096
81110f24:	98000015 	stw	zero,0(r19)
81110f28:	18004826 	beq	r3,zero,8111104c <__sflush_r+0x174>
81110f2c:	89801417 	ldw	r6,80(r17)
81110f30:	10c0010c 	andi	r3,r2,4
81110f34:	18000626 	beq	r3,zero,81110f50 <__sflush_r+0x78>
81110f38:	88c00117 	ldw	r3,4(r17)
81110f3c:	88800c17 	ldw	r2,48(r17)
81110f40:	30cdc83a 	sub	r6,r6,r3
81110f44:	10000226 	beq	r2,zero,81110f50 <__sflush_r+0x78>
81110f48:	88800f17 	ldw	r2,60(r17)
81110f4c:	308dc83a 	sub	r6,r6,r2
81110f50:	89400717 	ldw	r5,28(r17)
81110f54:	000f883a 	mov	r7,zero
81110f58:	9809883a 	mov	r4,r19
81110f5c:	403ee83a 	callr	r8
81110f60:	00ffffc4 	movi	r3,-1
81110f64:	10c04426 	beq	r2,r3,81111078 <__sflush_r+0x1a0>
81110f68:	88c0030b 	ldhu	r3,12(r17)
81110f6c:	89000417 	ldw	r4,16(r17)
81110f70:	88000115 	stw	zero,4(r17)
81110f74:	197dffcc 	andi	r5,r3,63487
81110f78:	8940030d 	sth	r5,12(r17)
81110f7c:	89000015 	stw	r4,0(r17)
81110f80:	18c4000c 	andi	r3,r3,4096
81110f84:	18002c1e 	bne	r3,zero,81111038 <__sflush_r+0x160>
81110f88:	89400c17 	ldw	r5,48(r17)
81110f8c:	9c000015 	stw	r16,0(r19)
81110f90:	28000526 	beq	r5,zero,81110fa8 <__sflush_r+0xd0>
81110f94:	88801004 	addi	r2,r17,64
81110f98:	28800226 	beq	r5,r2,81110fa4 <__sflush_r+0xcc>
81110f9c:	9809883a 	mov	r4,r19
81110fa0:	11116440 	call	81111644 <_free_r>
81110fa4:	88000c15 	stw	zero,48(r17)
81110fa8:	0005883a 	mov	r2,zero
81110fac:	dfc00417 	ldw	ra,16(sp)
81110fb0:	dcc00317 	ldw	r19,12(sp)
81110fb4:	dc800217 	ldw	r18,8(sp)
81110fb8:	dc400117 	ldw	r17,4(sp)
81110fbc:	dc000017 	ldw	r16,0(sp)
81110fc0:	dec00504 	addi	sp,sp,20
81110fc4:	f800283a 	ret
81110fc8:	2c800417 	ldw	r18,16(r5)
81110fcc:	903ff626 	beq	r18,zero,81110fa8 <__reset+0xfb0f0fa8>
81110fd0:	2c000017 	ldw	r16,0(r5)
81110fd4:	108000cc 	andi	r2,r2,3
81110fd8:	2c800015 	stw	r18,0(r5)
81110fdc:	84a1c83a 	sub	r16,r16,r18
81110fe0:	1000131e 	bne	r2,zero,81111030 <__sflush_r+0x158>
81110fe4:	28800517 	ldw	r2,20(r5)
81110fe8:	88800215 	stw	r2,8(r17)
81110fec:	04000316 	blt	zero,r16,81110ffc <__sflush_r+0x124>
81110ff0:	003fed06 	br	81110fa8 <__reset+0xfb0f0fa8>
81110ff4:	90a5883a 	add	r18,r18,r2
81110ff8:	043feb0e 	bge	zero,r16,81110fa8 <__reset+0xfb0f0fa8>
81110ffc:	88800917 	ldw	r2,36(r17)
81111000:	89400717 	ldw	r5,28(r17)
81111004:	800f883a 	mov	r7,r16
81111008:	900d883a 	mov	r6,r18
8111100c:	9809883a 	mov	r4,r19
81111010:	103ee83a 	callr	r2
81111014:	80a1c83a 	sub	r16,r16,r2
81111018:	00bff616 	blt	zero,r2,81110ff4 <__reset+0xfb0f0ff4>
8111101c:	88c0030b 	ldhu	r3,12(r17)
81111020:	00bfffc4 	movi	r2,-1
81111024:	18c01014 	ori	r3,r3,64
81111028:	88c0030d 	sth	r3,12(r17)
8111102c:	003fdf06 	br	81110fac <__reset+0xfb0f0fac>
81111030:	0005883a 	mov	r2,zero
81111034:	003fec06 	br	81110fe8 <__reset+0xfb0f0fe8>
81111038:	88801415 	stw	r2,80(r17)
8111103c:	003fd206 	br	81110f88 <__reset+0xfb0f0f88>
81111040:	28c00f17 	ldw	r3,60(r5)
81111044:	00ffb316 	blt	zero,r3,81110f14 <__reset+0xfb0f0f14>
81111048:	003fd706 	br	81110fa8 <__reset+0xfb0f0fa8>
8111104c:	89400717 	ldw	r5,28(r17)
81111050:	000d883a 	mov	r6,zero
81111054:	01c00044 	movi	r7,1
81111058:	9809883a 	mov	r4,r19
8111105c:	403ee83a 	callr	r8
81111060:	100d883a 	mov	r6,r2
81111064:	00bfffc4 	movi	r2,-1
81111068:	30801426 	beq	r6,r2,811110bc <__sflush_r+0x1e4>
8111106c:	8880030b 	ldhu	r2,12(r17)
81111070:	8a000a17 	ldw	r8,40(r17)
81111074:	003fae06 	br	81110f30 <__reset+0xfb0f0f30>
81111078:	98c00017 	ldw	r3,0(r19)
8111107c:	183fba26 	beq	r3,zero,81110f68 <__reset+0xfb0f0f68>
81111080:	01000744 	movi	r4,29
81111084:	19000626 	beq	r3,r4,811110a0 <__sflush_r+0x1c8>
81111088:	01000584 	movi	r4,22
8111108c:	19000426 	beq	r3,r4,811110a0 <__sflush_r+0x1c8>
81111090:	88c0030b 	ldhu	r3,12(r17)
81111094:	18c01014 	ori	r3,r3,64
81111098:	88c0030d 	sth	r3,12(r17)
8111109c:	003fc306 	br	81110fac <__reset+0xfb0f0fac>
811110a0:	8880030b 	ldhu	r2,12(r17)
811110a4:	88c00417 	ldw	r3,16(r17)
811110a8:	88000115 	stw	zero,4(r17)
811110ac:	10bdffcc 	andi	r2,r2,63487
811110b0:	8880030d 	sth	r2,12(r17)
811110b4:	88c00015 	stw	r3,0(r17)
811110b8:	003fb306 	br	81110f88 <__reset+0xfb0f0f88>
811110bc:	98800017 	ldw	r2,0(r19)
811110c0:	103fea26 	beq	r2,zero,8111106c <__reset+0xfb0f106c>
811110c4:	00c00744 	movi	r3,29
811110c8:	10c00226 	beq	r2,r3,811110d4 <__sflush_r+0x1fc>
811110cc:	00c00584 	movi	r3,22
811110d0:	10c0031e 	bne	r2,r3,811110e0 <__sflush_r+0x208>
811110d4:	9c000015 	stw	r16,0(r19)
811110d8:	0005883a 	mov	r2,zero
811110dc:	003fb306 	br	81110fac <__reset+0xfb0f0fac>
811110e0:	88c0030b 	ldhu	r3,12(r17)
811110e4:	3005883a 	mov	r2,r6
811110e8:	18c01014 	ori	r3,r3,64
811110ec:	88c0030d 	sth	r3,12(r17)
811110f0:	003fae06 	br	81110fac <__reset+0xfb0f0fac>

811110f4 <_fflush_r>:
811110f4:	defffd04 	addi	sp,sp,-12
811110f8:	dc000115 	stw	r16,4(sp)
811110fc:	dfc00215 	stw	ra,8(sp)
81111100:	2021883a 	mov	r16,r4
81111104:	20000226 	beq	r4,zero,81111110 <_fflush_r+0x1c>
81111108:	20800e17 	ldw	r2,56(r4)
8111110c:	10000c26 	beq	r2,zero,81111140 <_fflush_r+0x4c>
81111110:	2880030f 	ldh	r2,12(r5)
81111114:	1000051e 	bne	r2,zero,8111112c <_fflush_r+0x38>
81111118:	0005883a 	mov	r2,zero
8111111c:	dfc00217 	ldw	ra,8(sp)
81111120:	dc000117 	ldw	r16,4(sp)
81111124:	dec00304 	addi	sp,sp,12
81111128:	f800283a 	ret
8111112c:	8009883a 	mov	r4,r16
81111130:	dfc00217 	ldw	ra,8(sp)
81111134:	dc000117 	ldw	r16,4(sp)
81111138:	dec00304 	addi	sp,sp,12
8111113c:	1110ed81 	jmpi	81110ed8 <__sflush_r>
81111140:	d9400015 	stw	r5,0(sp)
81111144:	11114d00 	call	811114d0 <__sinit>
81111148:	d9400017 	ldw	r5,0(sp)
8111114c:	003ff006 	br	81111110 <__reset+0xfb0f1110>

81111150 <fflush>:
81111150:	20000526 	beq	r4,zero,81111168 <fflush+0x18>
81111154:	00a044b4 	movhi	r2,33042
81111158:	10873404 	addi	r2,r2,7376
8111115c:	200b883a 	mov	r5,r4
81111160:	11000017 	ldw	r4,0(r2)
81111164:	11110f41 	jmpi	811110f4 <_fflush_r>
81111168:	00a044b4 	movhi	r2,33042
8111116c:	10873304 	addi	r2,r2,7372
81111170:	11000017 	ldw	r4,0(r2)
81111174:	01604474 	movhi	r5,33041
81111178:	29443d04 	addi	r5,r5,4340
8111117c:	1111ed41 	jmpi	81111ed4 <_fwalk_reent>

81111180 <__fp_unlock>:
81111180:	0005883a 	mov	r2,zero
81111184:	f800283a 	ret

81111188 <_cleanup_r>:
81111188:	01604474 	movhi	r5,33041
8111118c:	29589504 	addi	r5,r5,25172
81111190:	1111ed41 	jmpi	81111ed4 <_fwalk_reent>

81111194 <__sinit.part.1>:
81111194:	defff704 	addi	sp,sp,-36
81111198:	00e04474 	movhi	r3,33041
8111119c:	dfc00815 	stw	ra,32(sp)
811111a0:	ddc00715 	stw	r23,28(sp)
811111a4:	dd800615 	stw	r22,24(sp)
811111a8:	dd400515 	stw	r21,20(sp)
811111ac:	dd000415 	stw	r20,16(sp)
811111b0:	dcc00315 	stw	r19,12(sp)
811111b4:	dc800215 	stw	r18,8(sp)
811111b8:	dc400115 	stw	r17,4(sp)
811111bc:	dc000015 	stw	r16,0(sp)
811111c0:	18c46204 	addi	r3,r3,4488
811111c4:	24000117 	ldw	r16,4(r4)
811111c8:	20c00f15 	stw	r3,60(r4)
811111cc:	2080bb04 	addi	r2,r4,748
811111d0:	00c000c4 	movi	r3,3
811111d4:	20c0b915 	stw	r3,740(r4)
811111d8:	2080ba15 	stw	r2,744(r4)
811111dc:	2000b815 	stw	zero,736(r4)
811111e0:	05c00204 	movi	r23,8
811111e4:	00800104 	movi	r2,4
811111e8:	2025883a 	mov	r18,r4
811111ec:	b80d883a 	mov	r6,r23
811111f0:	81001704 	addi	r4,r16,92
811111f4:	000b883a 	mov	r5,zero
811111f8:	80000015 	stw	zero,0(r16)
811111fc:	80000115 	stw	zero,4(r16)
81111200:	80000215 	stw	zero,8(r16)
81111204:	8080030d 	sth	r2,12(r16)
81111208:	80001915 	stw	zero,100(r16)
8111120c:	8000038d 	sth	zero,14(r16)
81111210:	80000415 	stw	zero,16(r16)
81111214:	80000515 	stw	zero,20(r16)
81111218:	80000615 	stw	zero,24(r16)
8111121c:	1112c7c0 	call	81112c7c <memset>
81111220:	05a04474 	movhi	r22,33041
81111224:	94400217 	ldw	r17,8(r18)
81111228:	05604474 	movhi	r21,33041
8111122c:	05204474 	movhi	r20,33041
81111230:	04e04474 	movhi	r19,33041
81111234:	b591c904 	addi	r22,r22,18212
81111238:	ad51e004 	addi	r21,r21,18304
8111123c:	a511ff04 	addi	r20,r20,18428
81111240:	9cd21604 	addi	r19,r19,18520
81111244:	85800815 	stw	r22,32(r16)
81111248:	85400915 	stw	r21,36(r16)
8111124c:	85000a15 	stw	r20,40(r16)
81111250:	84c00b15 	stw	r19,44(r16)
81111254:	84000715 	stw	r16,28(r16)
81111258:	00800284 	movi	r2,10
8111125c:	8880030d 	sth	r2,12(r17)
81111260:	00800044 	movi	r2,1
81111264:	b80d883a 	mov	r6,r23
81111268:	89001704 	addi	r4,r17,92
8111126c:	000b883a 	mov	r5,zero
81111270:	88000015 	stw	zero,0(r17)
81111274:	88000115 	stw	zero,4(r17)
81111278:	88000215 	stw	zero,8(r17)
8111127c:	88001915 	stw	zero,100(r17)
81111280:	8880038d 	sth	r2,14(r17)
81111284:	88000415 	stw	zero,16(r17)
81111288:	88000515 	stw	zero,20(r17)
8111128c:	88000615 	stw	zero,24(r17)
81111290:	1112c7c0 	call	81112c7c <memset>
81111294:	94000317 	ldw	r16,12(r18)
81111298:	00800484 	movi	r2,18
8111129c:	8c400715 	stw	r17,28(r17)
811112a0:	8d800815 	stw	r22,32(r17)
811112a4:	8d400915 	stw	r21,36(r17)
811112a8:	8d000a15 	stw	r20,40(r17)
811112ac:	8cc00b15 	stw	r19,44(r17)
811112b0:	8080030d 	sth	r2,12(r16)
811112b4:	00800084 	movi	r2,2
811112b8:	80000015 	stw	zero,0(r16)
811112bc:	80000115 	stw	zero,4(r16)
811112c0:	80000215 	stw	zero,8(r16)
811112c4:	80001915 	stw	zero,100(r16)
811112c8:	8080038d 	sth	r2,14(r16)
811112cc:	80000415 	stw	zero,16(r16)
811112d0:	80000515 	stw	zero,20(r16)
811112d4:	80000615 	stw	zero,24(r16)
811112d8:	b80d883a 	mov	r6,r23
811112dc:	000b883a 	mov	r5,zero
811112e0:	81001704 	addi	r4,r16,92
811112e4:	1112c7c0 	call	81112c7c <memset>
811112e8:	00800044 	movi	r2,1
811112ec:	84000715 	stw	r16,28(r16)
811112f0:	85800815 	stw	r22,32(r16)
811112f4:	85400915 	stw	r21,36(r16)
811112f8:	85000a15 	stw	r20,40(r16)
811112fc:	84c00b15 	stw	r19,44(r16)
81111300:	90800e15 	stw	r2,56(r18)
81111304:	dfc00817 	ldw	ra,32(sp)
81111308:	ddc00717 	ldw	r23,28(sp)
8111130c:	dd800617 	ldw	r22,24(sp)
81111310:	dd400517 	ldw	r21,20(sp)
81111314:	dd000417 	ldw	r20,16(sp)
81111318:	dcc00317 	ldw	r19,12(sp)
8111131c:	dc800217 	ldw	r18,8(sp)
81111320:	dc400117 	ldw	r17,4(sp)
81111324:	dc000017 	ldw	r16,0(sp)
81111328:	dec00904 	addi	sp,sp,36
8111132c:	f800283a 	ret

81111330 <__fp_lock>:
81111330:	0005883a 	mov	r2,zero
81111334:	f800283a 	ret

81111338 <__sfmoreglue>:
81111338:	defffc04 	addi	sp,sp,-16
8111133c:	dc400115 	stw	r17,4(sp)
81111340:	2c7fffc4 	addi	r17,r5,-1
81111344:	8c401a24 	muli	r17,r17,104
81111348:	dc800215 	stw	r18,8(sp)
8111134c:	2825883a 	mov	r18,r5
81111350:	89401d04 	addi	r5,r17,116
81111354:	dc000015 	stw	r16,0(sp)
81111358:	dfc00315 	stw	ra,12(sp)
8111135c:	11122300 	call	81112230 <_malloc_r>
81111360:	1021883a 	mov	r16,r2
81111364:	10000726 	beq	r2,zero,81111384 <__sfmoreglue+0x4c>
81111368:	11000304 	addi	r4,r2,12
8111136c:	10000015 	stw	zero,0(r2)
81111370:	14800115 	stw	r18,4(r2)
81111374:	11000215 	stw	r4,8(r2)
81111378:	89801a04 	addi	r6,r17,104
8111137c:	000b883a 	mov	r5,zero
81111380:	1112c7c0 	call	81112c7c <memset>
81111384:	8005883a 	mov	r2,r16
81111388:	dfc00317 	ldw	ra,12(sp)
8111138c:	dc800217 	ldw	r18,8(sp)
81111390:	dc400117 	ldw	r17,4(sp)
81111394:	dc000017 	ldw	r16,0(sp)
81111398:	dec00404 	addi	sp,sp,16
8111139c:	f800283a 	ret

811113a0 <__sfp>:
811113a0:	defffb04 	addi	sp,sp,-20
811113a4:	dc000015 	stw	r16,0(sp)
811113a8:	042044b4 	movhi	r16,33042
811113ac:	84073304 	addi	r16,r16,7372
811113b0:	dcc00315 	stw	r19,12(sp)
811113b4:	2027883a 	mov	r19,r4
811113b8:	81000017 	ldw	r4,0(r16)
811113bc:	dfc00415 	stw	ra,16(sp)
811113c0:	dc800215 	stw	r18,8(sp)
811113c4:	20800e17 	ldw	r2,56(r4)
811113c8:	dc400115 	stw	r17,4(sp)
811113cc:	1000021e 	bne	r2,zero,811113d8 <__sfp+0x38>
811113d0:	11111940 	call	81111194 <__sinit.part.1>
811113d4:	81000017 	ldw	r4,0(r16)
811113d8:	2480b804 	addi	r18,r4,736
811113dc:	047fffc4 	movi	r17,-1
811113e0:	91000117 	ldw	r4,4(r18)
811113e4:	94000217 	ldw	r16,8(r18)
811113e8:	213fffc4 	addi	r4,r4,-1
811113ec:	20000a16 	blt	r4,zero,81111418 <__sfp+0x78>
811113f0:	8080030f 	ldh	r2,12(r16)
811113f4:	10000c26 	beq	r2,zero,81111428 <__sfp+0x88>
811113f8:	80c01d04 	addi	r3,r16,116
811113fc:	00000206 	br	81111408 <__sfp+0x68>
81111400:	18bfe60f 	ldh	r2,-104(r3)
81111404:	10000826 	beq	r2,zero,81111428 <__sfp+0x88>
81111408:	213fffc4 	addi	r4,r4,-1
8111140c:	1c3ffd04 	addi	r16,r3,-12
81111410:	18c01a04 	addi	r3,r3,104
81111414:	247ffa1e 	bne	r4,r17,81111400 <__reset+0xfb0f1400>
81111418:	90800017 	ldw	r2,0(r18)
8111141c:	10001d26 	beq	r2,zero,81111494 <__sfp+0xf4>
81111420:	1025883a 	mov	r18,r2
81111424:	003fee06 	br	811113e0 <__reset+0xfb0f13e0>
81111428:	00bfffc4 	movi	r2,-1
8111142c:	8080038d 	sth	r2,14(r16)
81111430:	00800044 	movi	r2,1
81111434:	8080030d 	sth	r2,12(r16)
81111438:	80001915 	stw	zero,100(r16)
8111143c:	80000015 	stw	zero,0(r16)
81111440:	80000215 	stw	zero,8(r16)
81111444:	80000115 	stw	zero,4(r16)
81111448:	80000415 	stw	zero,16(r16)
8111144c:	80000515 	stw	zero,20(r16)
81111450:	80000615 	stw	zero,24(r16)
81111454:	01800204 	movi	r6,8
81111458:	000b883a 	mov	r5,zero
8111145c:	81001704 	addi	r4,r16,92
81111460:	1112c7c0 	call	81112c7c <memset>
81111464:	8005883a 	mov	r2,r16
81111468:	80000c15 	stw	zero,48(r16)
8111146c:	80000d15 	stw	zero,52(r16)
81111470:	80001115 	stw	zero,68(r16)
81111474:	80001215 	stw	zero,72(r16)
81111478:	dfc00417 	ldw	ra,16(sp)
8111147c:	dcc00317 	ldw	r19,12(sp)
81111480:	dc800217 	ldw	r18,8(sp)
81111484:	dc400117 	ldw	r17,4(sp)
81111488:	dc000017 	ldw	r16,0(sp)
8111148c:	dec00504 	addi	sp,sp,20
81111490:	f800283a 	ret
81111494:	01400104 	movi	r5,4
81111498:	9809883a 	mov	r4,r19
8111149c:	11113380 	call	81111338 <__sfmoreglue>
811114a0:	90800015 	stw	r2,0(r18)
811114a4:	103fde1e 	bne	r2,zero,81111420 <__reset+0xfb0f1420>
811114a8:	00800304 	movi	r2,12
811114ac:	98800015 	stw	r2,0(r19)
811114b0:	0005883a 	mov	r2,zero
811114b4:	003ff006 	br	81111478 <__reset+0xfb0f1478>

811114b8 <_cleanup>:
811114b8:	00a044b4 	movhi	r2,33042
811114bc:	10873304 	addi	r2,r2,7372
811114c0:	11000017 	ldw	r4,0(r2)
811114c4:	01604474 	movhi	r5,33041
811114c8:	29589504 	addi	r5,r5,25172
811114cc:	1111ed41 	jmpi	81111ed4 <_fwalk_reent>

811114d0 <__sinit>:
811114d0:	20800e17 	ldw	r2,56(r4)
811114d4:	10000126 	beq	r2,zero,811114dc <__sinit+0xc>
811114d8:	f800283a 	ret
811114dc:	11111941 	jmpi	81111194 <__sinit.part.1>

811114e0 <__sfp_lock_acquire>:
811114e0:	f800283a 	ret

811114e4 <__sfp_lock_release>:
811114e4:	f800283a 	ret

811114e8 <__sinit_lock_acquire>:
811114e8:	f800283a 	ret

811114ec <__sinit_lock_release>:
811114ec:	f800283a 	ret

811114f0 <__fp_lock_all>:
811114f0:	00a044b4 	movhi	r2,33042
811114f4:	10873404 	addi	r2,r2,7376
811114f8:	11000017 	ldw	r4,0(r2)
811114fc:	01604474 	movhi	r5,33041
81111500:	2944cc04 	addi	r5,r5,4912
81111504:	1111e101 	jmpi	81111e10 <_fwalk>

81111508 <__fp_unlock_all>:
81111508:	00a044b4 	movhi	r2,33042
8111150c:	10873404 	addi	r2,r2,7376
81111510:	11000017 	ldw	r4,0(r2)
81111514:	01604474 	movhi	r5,33041
81111518:	29446004 	addi	r5,r5,4480
8111151c:	1111e101 	jmpi	81111e10 <_fwalk>

81111520 <_malloc_trim_r>:
81111520:	defffb04 	addi	sp,sp,-20
81111524:	dcc00315 	stw	r19,12(sp)
81111528:	04e044b4 	movhi	r19,33042
8111152c:	dc800215 	stw	r18,8(sp)
81111530:	dc400115 	stw	r17,4(sp)
81111534:	dc000015 	stw	r16,0(sp)
81111538:	dfc00415 	stw	ra,16(sp)
8111153c:	2821883a 	mov	r16,r5
81111540:	9cc13904 	addi	r19,r19,1252
81111544:	2025883a 	mov	r18,r4
81111548:	1119b600 	call	81119b60 <__malloc_lock>
8111154c:	98800217 	ldw	r2,8(r19)
81111550:	14400117 	ldw	r17,4(r2)
81111554:	00bfff04 	movi	r2,-4
81111558:	88a2703a 	and	r17,r17,r2
8111155c:	8c21c83a 	sub	r16,r17,r16
81111560:	8403fbc4 	addi	r16,r16,4079
81111564:	8020d33a 	srli	r16,r16,12
81111568:	0083ffc4 	movi	r2,4095
8111156c:	843fffc4 	addi	r16,r16,-1
81111570:	8020933a 	slli	r16,r16,12
81111574:	1400060e 	bge	r2,r16,81111590 <_malloc_trim_r+0x70>
81111578:	000b883a 	mov	r5,zero
8111157c:	9009883a 	mov	r4,r18
81111580:	11146d00 	call	811146d0 <_sbrk_r>
81111584:	98c00217 	ldw	r3,8(r19)
81111588:	1c47883a 	add	r3,r3,r17
8111158c:	10c00a26 	beq	r2,r3,811115b8 <_malloc_trim_r+0x98>
81111590:	9009883a 	mov	r4,r18
81111594:	1119b840 	call	81119b84 <__malloc_unlock>
81111598:	0005883a 	mov	r2,zero
8111159c:	dfc00417 	ldw	ra,16(sp)
811115a0:	dcc00317 	ldw	r19,12(sp)
811115a4:	dc800217 	ldw	r18,8(sp)
811115a8:	dc400117 	ldw	r17,4(sp)
811115ac:	dc000017 	ldw	r16,0(sp)
811115b0:	dec00504 	addi	sp,sp,20
811115b4:	f800283a 	ret
811115b8:	040bc83a 	sub	r5,zero,r16
811115bc:	9009883a 	mov	r4,r18
811115c0:	11146d00 	call	811146d0 <_sbrk_r>
811115c4:	00ffffc4 	movi	r3,-1
811115c8:	10c00d26 	beq	r2,r3,81111600 <_malloc_trim_r+0xe0>
811115cc:	00e044b4 	movhi	r3,33042
811115d0:	18c77404 	addi	r3,r3,7632
811115d4:	18800017 	ldw	r2,0(r3)
811115d8:	99000217 	ldw	r4,8(r19)
811115dc:	8c23c83a 	sub	r17,r17,r16
811115e0:	8c400054 	ori	r17,r17,1
811115e4:	1421c83a 	sub	r16,r2,r16
811115e8:	24400115 	stw	r17,4(r4)
811115ec:	9009883a 	mov	r4,r18
811115f0:	1c000015 	stw	r16,0(r3)
811115f4:	1119b840 	call	81119b84 <__malloc_unlock>
811115f8:	00800044 	movi	r2,1
811115fc:	003fe706 	br	8111159c <__reset+0xfb0f159c>
81111600:	000b883a 	mov	r5,zero
81111604:	9009883a 	mov	r4,r18
81111608:	11146d00 	call	811146d0 <_sbrk_r>
8111160c:	99000217 	ldw	r4,8(r19)
81111610:	014003c4 	movi	r5,15
81111614:	1107c83a 	sub	r3,r2,r4
81111618:	28ffdd0e 	bge	r5,r3,81111590 <__reset+0xfb0f1590>
8111161c:	016044b4 	movhi	r5,33042
81111620:	29473604 	addi	r5,r5,7384
81111624:	29400017 	ldw	r5,0(r5)
81111628:	18c00054 	ori	r3,r3,1
8111162c:	20c00115 	stw	r3,4(r4)
81111630:	00e044b4 	movhi	r3,33042
81111634:	1145c83a 	sub	r2,r2,r5
81111638:	18c77404 	addi	r3,r3,7632
8111163c:	18800015 	stw	r2,0(r3)
81111640:	003fd306 	br	81111590 <__reset+0xfb0f1590>

81111644 <_free_r>:
81111644:	28004126 	beq	r5,zero,8111174c <_free_r+0x108>
81111648:	defffd04 	addi	sp,sp,-12
8111164c:	dc400115 	stw	r17,4(sp)
81111650:	dc000015 	stw	r16,0(sp)
81111654:	2023883a 	mov	r17,r4
81111658:	2821883a 	mov	r16,r5
8111165c:	dfc00215 	stw	ra,8(sp)
81111660:	1119b600 	call	81119b60 <__malloc_lock>
81111664:	81ffff17 	ldw	r7,-4(r16)
81111668:	00bfff84 	movi	r2,-2
8111166c:	012044b4 	movhi	r4,33042
81111670:	81bffe04 	addi	r6,r16,-8
81111674:	3884703a 	and	r2,r7,r2
81111678:	21013904 	addi	r4,r4,1252
8111167c:	308b883a 	add	r5,r6,r2
81111680:	2a400117 	ldw	r9,4(r5)
81111684:	22000217 	ldw	r8,8(r4)
81111688:	00ffff04 	movi	r3,-4
8111168c:	48c6703a 	and	r3,r9,r3
81111690:	2a005726 	beq	r5,r8,811117f0 <_free_r+0x1ac>
81111694:	28c00115 	stw	r3,4(r5)
81111698:	39c0004c 	andi	r7,r7,1
8111169c:	3800091e 	bne	r7,zero,811116c4 <_free_r+0x80>
811116a0:	823ffe17 	ldw	r8,-8(r16)
811116a4:	22400204 	addi	r9,r4,8
811116a8:	320dc83a 	sub	r6,r6,r8
811116ac:	31c00217 	ldw	r7,8(r6)
811116b0:	1205883a 	add	r2,r2,r8
811116b4:	3a406526 	beq	r7,r9,8111184c <_free_r+0x208>
811116b8:	32000317 	ldw	r8,12(r6)
811116bc:	3a000315 	stw	r8,12(r7)
811116c0:	41c00215 	stw	r7,8(r8)
811116c4:	28cf883a 	add	r7,r5,r3
811116c8:	39c00117 	ldw	r7,4(r7)
811116cc:	39c0004c 	andi	r7,r7,1
811116d0:	38003a26 	beq	r7,zero,811117bc <_free_r+0x178>
811116d4:	10c00054 	ori	r3,r2,1
811116d8:	30c00115 	stw	r3,4(r6)
811116dc:	3087883a 	add	r3,r6,r2
811116e0:	18800015 	stw	r2,0(r3)
811116e4:	00c07fc4 	movi	r3,511
811116e8:	18801936 	bltu	r3,r2,81111750 <_free_r+0x10c>
811116ec:	1004d0fa 	srli	r2,r2,3
811116f0:	01c00044 	movi	r7,1
811116f4:	21400117 	ldw	r5,4(r4)
811116f8:	10c00044 	addi	r3,r2,1
811116fc:	18c7883a 	add	r3,r3,r3
81111700:	1005d0ba 	srai	r2,r2,2
81111704:	18c7883a 	add	r3,r3,r3
81111708:	18c7883a 	add	r3,r3,r3
8111170c:	1907883a 	add	r3,r3,r4
81111710:	3884983a 	sll	r2,r7,r2
81111714:	19c00017 	ldw	r7,0(r3)
81111718:	1a3ffe04 	addi	r8,r3,-8
8111171c:	1144b03a 	or	r2,r2,r5
81111720:	32000315 	stw	r8,12(r6)
81111724:	31c00215 	stw	r7,8(r6)
81111728:	20800115 	stw	r2,4(r4)
8111172c:	19800015 	stw	r6,0(r3)
81111730:	39800315 	stw	r6,12(r7)
81111734:	8809883a 	mov	r4,r17
81111738:	dfc00217 	ldw	ra,8(sp)
8111173c:	dc400117 	ldw	r17,4(sp)
81111740:	dc000017 	ldw	r16,0(sp)
81111744:	dec00304 	addi	sp,sp,12
81111748:	1119b841 	jmpi	81119b84 <__malloc_unlock>
8111174c:	f800283a 	ret
81111750:	100ad27a 	srli	r5,r2,9
81111754:	00c00104 	movi	r3,4
81111758:	19404a36 	bltu	r3,r5,81111884 <_free_r+0x240>
8111175c:	100ad1ba 	srli	r5,r2,6
81111760:	28c00e44 	addi	r3,r5,57
81111764:	18c7883a 	add	r3,r3,r3
81111768:	29400e04 	addi	r5,r5,56
8111176c:	18c7883a 	add	r3,r3,r3
81111770:	18c7883a 	add	r3,r3,r3
81111774:	1909883a 	add	r4,r3,r4
81111778:	20c00017 	ldw	r3,0(r4)
8111177c:	01e044b4 	movhi	r7,33042
81111780:	213ffe04 	addi	r4,r4,-8
81111784:	39c13904 	addi	r7,r7,1252
81111788:	20c04426 	beq	r4,r3,8111189c <_free_r+0x258>
8111178c:	01ffff04 	movi	r7,-4
81111790:	19400117 	ldw	r5,4(r3)
81111794:	29ca703a 	and	r5,r5,r7
81111798:	1140022e 	bgeu	r2,r5,811117a4 <_free_r+0x160>
8111179c:	18c00217 	ldw	r3,8(r3)
811117a0:	20fffb1e 	bne	r4,r3,81111790 <__reset+0xfb0f1790>
811117a4:	19000317 	ldw	r4,12(r3)
811117a8:	31000315 	stw	r4,12(r6)
811117ac:	30c00215 	stw	r3,8(r6)
811117b0:	21800215 	stw	r6,8(r4)
811117b4:	19800315 	stw	r6,12(r3)
811117b8:	003fde06 	br	81111734 <__reset+0xfb0f1734>
811117bc:	29c00217 	ldw	r7,8(r5)
811117c0:	10c5883a 	add	r2,r2,r3
811117c4:	00e044b4 	movhi	r3,33042
811117c8:	18c13b04 	addi	r3,r3,1260
811117cc:	38c03b26 	beq	r7,r3,811118bc <_free_r+0x278>
811117d0:	2a000317 	ldw	r8,12(r5)
811117d4:	11400054 	ori	r5,r2,1
811117d8:	3087883a 	add	r3,r6,r2
811117dc:	3a000315 	stw	r8,12(r7)
811117e0:	41c00215 	stw	r7,8(r8)
811117e4:	31400115 	stw	r5,4(r6)
811117e8:	18800015 	stw	r2,0(r3)
811117ec:	003fbd06 	br	811116e4 <__reset+0xfb0f16e4>
811117f0:	39c0004c 	andi	r7,r7,1
811117f4:	10c5883a 	add	r2,r2,r3
811117f8:	3800071e 	bne	r7,zero,81111818 <_free_r+0x1d4>
811117fc:	81fffe17 	ldw	r7,-8(r16)
81111800:	31cdc83a 	sub	r6,r6,r7
81111804:	30c00317 	ldw	r3,12(r6)
81111808:	31400217 	ldw	r5,8(r6)
8111180c:	11c5883a 	add	r2,r2,r7
81111810:	28c00315 	stw	r3,12(r5)
81111814:	19400215 	stw	r5,8(r3)
81111818:	10c00054 	ori	r3,r2,1
8111181c:	30c00115 	stw	r3,4(r6)
81111820:	00e044b4 	movhi	r3,33042
81111824:	18c73704 	addi	r3,r3,7388
81111828:	18c00017 	ldw	r3,0(r3)
8111182c:	21800215 	stw	r6,8(r4)
81111830:	10ffc036 	bltu	r2,r3,81111734 <__reset+0xfb0f1734>
81111834:	00a044b4 	movhi	r2,33042
81111838:	10876b04 	addi	r2,r2,7596
8111183c:	11400017 	ldw	r5,0(r2)
81111840:	8809883a 	mov	r4,r17
81111844:	11115200 	call	81111520 <_malloc_trim_r>
81111848:	003fba06 	br	81111734 <__reset+0xfb0f1734>
8111184c:	28c9883a 	add	r4,r5,r3
81111850:	21000117 	ldw	r4,4(r4)
81111854:	2100004c 	andi	r4,r4,1
81111858:	2000391e 	bne	r4,zero,81111940 <_free_r+0x2fc>
8111185c:	29c00217 	ldw	r7,8(r5)
81111860:	29000317 	ldw	r4,12(r5)
81111864:	1885883a 	add	r2,r3,r2
81111868:	10c00054 	ori	r3,r2,1
8111186c:	39000315 	stw	r4,12(r7)
81111870:	21c00215 	stw	r7,8(r4)
81111874:	30c00115 	stw	r3,4(r6)
81111878:	308d883a 	add	r6,r6,r2
8111187c:	30800015 	stw	r2,0(r6)
81111880:	003fac06 	br	81111734 <__reset+0xfb0f1734>
81111884:	00c00504 	movi	r3,20
81111888:	19401536 	bltu	r3,r5,811118e0 <_free_r+0x29c>
8111188c:	28c01704 	addi	r3,r5,92
81111890:	18c7883a 	add	r3,r3,r3
81111894:	294016c4 	addi	r5,r5,91
81111898:	003fb406 	br	8111176c <__reset+0xfb0f176c>
8111189c:	280bd0ba 	srai	r5,r5,2
811118a0:	00c00044 	movi	r3,1
811118a4:	38800117 	ldw	r2,4(r7)
811118a8:	194a983a 	sll	r5,r3,r5
811118ac:	2007883a 	mov	r3,r4
811118b0:	2884b03a 	or	r2,r5,r2
811118b4:	38800115 	stw	r2,4(r7)
811118b8:	003fbb06 	br	811117a8 <__reset+0xfb0f17a8>
811118bc:	21800515 	stw	r6,20(r4)
811118c0:	21800415 	stw	r6,16(r4)
811118c4:	10c00054 	ori	r3,r2,1
811118c8:	31c00315 	stw	r7,12(r6)
811118cc:	31c00215 	stw	r7,8(r6)
811118d0:	30c00115 	stw	r3,4(r6)
811118d4:	308d883a 	add	r6,r6,r2
811118d8:	30800015 	stw	r2,0(r6)
811118dc:	003f9506 	br	81111734 <__reset+0xfb0f1734>
811118e0:	00c01504 	movi	r3,84
811118e4:	19400536 	bltu	r3,r5,811118fc <_free_r+0x2b8>
811118e8:	100ad33a 	srli	r5,r2,12
811118ec:	28c01bc4 	addi	r3,r5,111
811118f0:	18c7883a 	add	r3,r3,r3
811118f4:	29401b84 	addi	r5,r5,110
811118f8:	003f9c06 	br	8111176c <__reset+0xfb0f176c>
811118fc:	00c05504 	movi	r3,340
81111900:	19400536 	bltu	r3,r5,81111918 <_free_r+0x2d4>
81111904:	100ad3fa 	srli	r5,r2,15
81111908:	28c01e04 	addi	r3,r5,120
8111190c:	18c7883a 	add	r3,r3,r3
81111910:	29401dc4 	addi	r5,r5,119
81111914:	003f9506 	br	8111176c <__reset+0xfb0f176c>
81111918:	00c15504 	movi	r3,1364
8111191c:	19400536 	bltu	r3,r5,81111934 <_free_r+0x2f0>
81111920:	100ad4ba 	srli	r5,r2,18
81111924:	28c01f44 	addi	r3,r5,125
81111928:	18c7883a 	add	r3,r3,r3
8111192c:	29401f04 	addi	r5,r5,124
81111930:	003f8e06 	br	8111176c <__reset+0xfb0f176c>
81111934:	00c03f84 	movi	r3,254
81111938:	01401f84 	movi	r5,126
8111193c:	003f8b06 	br	8111176c <__reset+0xfb0f176c>
81111940:	10c00054 	ori	r3,r2,1
81111944:	30c00115 	stw	r3,4(r6)
81111948:	308d883a 	add	r6,r6,r2
8111194c:	30800015 	stw	r2,0(r6)
81111950:	003f7806 	br	81111734 <__reset+0xfb0f1734>

81111954 <__sfvwrite_r>:
81111954:	30800217 	ldw	r2,8(r6)
81111958:	10006726 	beq	r2,zero,81111af8 <__sfvwrite_r+0x1a4>
8111195c:	28c0030b 	ldhu	r3,12(r5)
81111960:	defff404 	addi	sp,sp,-48
81111964:	dd400715 	stw	r21,28(sp)
81111968:	dd000615 	stw	r20,24(sp)
8111196c:	dc000215 	stw	r16,8(sp)
81111970:	dfc00b15 	stw	ra,44(sp)
81111974:	df000a15 	stw	fp,40(sp)
81111978:	ddc00915 	stw	r23,36(sp)
8111197c:	dd800815 	stw	r22,32(sp)
81111980:	dcc00515 	stw	r19,20(sp)
81111984:	dc800415 	stw	r18,16(sp)
81111988:	dc400315 	stw	r17,12(sp)
8111198c:	1880020c 	andi	r2,r3,8
81111990:	2821883a 	mov	r16,r5
81111994:	202b883a 	mov	r21,r4
81111998:	3029883a 	mov	r20,r6
8111199c:	10002726 	beq	r2,zero,81111a3c <__sfvwrite_r+0xe8>
811119a0:	28800417 	ldw	r2,16(r5)
811119a4:	10002526 	beq	r2,zero,81111a3c <__sfvwrite_r+0xe8>
811119a8:	1880008c 	andi	r2,r3,2
811119ac:	a4400017 	ldw	r17,0(r20)
811119b0:	10002a26 	beq	r2,zero,81111a5c <__sfvwrite_r+0x108>
811119b4:	05a00034 	movhi	r22,32768
811119b8:	0027883a 	mov	r19,zero
811119bc:	0025883a 	mov	r18,zero
811119c0:	b5bf0004 	addi	r22,r22,-1024
811119c4:	980d883a 	mov	r6,r19
811119c8:	a809883a 	mov	r4,r21
811119cc:	90004626 	beq	r18,zero,81111ae8 <__sfvwrite_r+0x194>
811119d0:	900f883a 	mov	r7,r18
811119d4:	b480022e 	bgeu	r22,r18,811119e0 <__sfvwrite_r+0x8c>
811119d8:	01e00034 	movhi	r7,32768
811119dc:	39ff0004 	addi	r7,r7,-1024
811119e0:	80800917 	ldw	r2,36(r16)
811119e4:	81400717 	ldw	r5,28(r16)
811119e8:	103ee83a 	callr	r2
811119ec:	0080570e 	bge	zero,r2,81111b4c <__sfvwrite_r+0x1f8>
811119f0:	a0c00217 	ldw	r3,8(r20)
811119f4:	98a7883a 	add	r19,r19,r2
811119f8:	90a5c83a 	sub	r18,r18,r2
811119fc:	1885c83a 	sub	r2,r3,r2
81111a00:	a0800215 	stw	r2,8(r20)
81111a04:	103fef1e 	bne	r2,zero,811119c4 <__reset+0xfb0f19c4>
81111a08:	0005883a 	mov	r2,zero
81111a0c:	dfc00b17 	ldw	ra,44(sp)
81111a10:	df000a17 	ldw	fp,40(sp)
81111a14:	ddc00917 	ldw	r23,36(sp)
81111a18:	dd800817 	ldw	r22,32(sp)
81111a1c:	dd400717 	ldw	r21,28(sp)
81111a20:	dd000617 	ldw	r20,24(sp)
81111a24:	dcc00517 	ldw	r19,20(sp)
81111a28:	dc800417 	ldw	r18,16(sp)
81111a2c:	dc400317 	ldw	r17,12(sp)
81111a30:	dc000217 	ldw	r16,8(sp)
81111a34:	dec00c04 	addi	sp,sp,48
81111a38:	f800283a 	ret
81111a3c:	800b883a 	mov	r5,r16
81111a40:	a809883a 	mov	r4,r21
81111a44:	110f4fc0 	call	8110f4fc <__swsetup_r>
81111a48:	1000eb1e 	bne	r2,zero,81111df8 <__sfvwrite_r+0x4a4>
81111a4c:	80c0030b 	ldhu	r3,12(r16)
81111a50:	a4400017 	ldw	r17,0(r20)
81111a54:	1880008c 	andi	r2,r3,2
81111a58:	103fd61e 	bne	r2,zero,811119b4 <__reset+0xfb0f19b4>
81111a5c:	1880004c 	andi	r2,r3,1
81111a60:	10003f1e 	bne	r2,zero,81111b60 <__sfvwrite_r+0x20c>
81111a64:	0039883a 	mov	fp,zero
81111a68:	0025883a 	mov	r18,zero
81111a6c:	90001a26 	beq	r18,zero,81111ad8 <__sfvwrite_r+0x184>
81111a70:	1880800c 	andi	r2,r3,512
81111a74:	84c00217 	ldw	r19,8(r16)
81111a78:	10002126 	beq	r2,zero,81111b00 <__sfvwrite_r+0x1ac>
81111a7c:	982f883a 	mov	r23,r19
81111a80:	94c09336 	bltu	r18,r19,81111cd0 <__sfvwrite_r+0x37c>
81111a84:	1881200c 	andi	r2,r3,1152
81111a88:	10009e1e 	bne	r2,zero,81111d04 <__sfvwrite_r+0x3b0>
81111a8c:	81000017 	ldw	r4,0(r16)
81111a90:	b80d883a 	mov	r6,r23
81111a94:	e00b883a 	mov	r5,fp
81111a98:	1112b200 	call	81112b20 <memmove>
81111a9c:	80c00217 	ldw	r3,8(r16)
81111aa0:	81000017 	ldw	r4,0(r16)
81111aa4:	9005883a 	mov	r2,r18
81111aa8:	1ce7c83a 	sub	r19,r3,r19
81111aac:	25cf883a 	add	r7,r4,r23
81111ab0:	84c00215 	stw	r19,8(r16)
81111ab4:	81c00015 	stw	r7,0(r16)
81111ab8:	a0c00217 	ldw	r3,8(r20)
81111abc:	e0b9883a 	add	fp,fp,r2
81111ac0:	90a5c83a 	sub	r18,r18,r2
81111ac4:	18a7c83a 	sub	r19,r3,r2
81111ac8:	a4c00215 	stw	r19,8(r20)
81111acc:	983fce26 	beq	r19,zero,81111a08 <__reset+0xfb0f1a08>
81111ad0:	80c0030b 	ldhu	r3,12(r16)
81111ad4:	903fe61e 	bne	r18,zero,81111a70 <__reset+0xfb0f1a70>
81111ad8:	8f000017 	ldw	fp,0(r17)
81111adc:	8c800117 	ldw	r18,4(r17)
81111ae0:	8c400204 	addi	r17,r17,8
81111ae4:	003fe106 	br	81111a6c <__reset+0xfb0f1a6c>
81111ae8:	8cc00017 	ldw	r19,0(r17)
81111aec:	8c800117 	ldw	r18,4(r17)
81111af0:	8c400204 	addi	r17,r17,8
81111af4:	003fb306 	br	811119c4 <__reset+0xfb0f19c4>
81111af8:	0005883a 	mov	r2,zero
81111afc:	f800283a 	ret
81111b00:	81000017 	ldw	r4,0(r16)
81111b04:	80800417 	ldw	r2,16(r16)
81111b08:	11005736 	bltu	r2,r4,81111c68 <__sfvwrite_r+0x314>
81111b0c:	85c00517 	ldw	r23,20(r16)
81111b10:	95c05536 	bltu	r18,r23,81111c68 <__sfvwrite_r+0x314>
81111b14:	00a00034 	movhi	r2,32768
81111b18:	10bfffc4 	addi	r2,r2,-1
81111b1c:	9009883a 	mov	r4,r18
81111b20:	1480012e 	bgeu	r2,r18,81111b28 <__sfvwrite_r+0x1d4>
81111b24:	1009883a 	mov	r4,r2
81111b28:	b80b883a 	mov	r5,r23
81111b2c:	11173680 	call	81117368 <__divsi3>
81111b30:	15cf383a 	mul	r7,r2,r23
81111b34:	81400717 	ldw	r5,28(r16)
81111b38:	80800917 	ldw	r2,36(r16)
81111b3c:	e00d883a 	mov	r6,fp
81111b40:	a809883a 	mov	r4,r21
81111b44:	103ee83a 	callr	r2
81111b48:	00bfdb16 	blt	zero,r2,81111ab8 <__reset+0xfb0f1ab8>
81111b4c:	8080030b 	ldhu	r2,12(r16)
81111b50:	10801014 	ori	r2,r2,64
81111b54:	8080030d 	sth	r2,12(r16)
81111b58:	00bfffc4 	movi	r2,-1
81111b5c:	003fab06 	br	81111a0c <__reset+0xfb0f1a0c>
81111b60:	0027883a 	mov	r19,zero
81111b64:	0011883a 	mov	r8,zero
81111b68:	0039883a 	mov	fp,zero
81111b6c:	0025883a 	mov	r18,zero
81111b70:	90001f26 	beq	r18,zero,81111bf0 <__sfvwrite_r+0x29c>
81111b74:	40005a26 	beq	r8,zero,81111ce0 <__sfvwrite_r+0x38c>
81111b78:	982d883a 	mov	r22,r19
81111b7c:	94c0012e 	bgeu	r18,r19,81111b84 <__sfvwrite_r+0x230>
81111b80:	902d883a 	mov	r22,r18
81111b84:	81000017 	ldw	r4,0(r16)
81111b88:	80800417 	ldw	r2,16(r16)
81111b8c:	b02f883a 	mov	r23,r22
81111b90:	81c00517 	ldw	r7,20(r16)
81111b94:	1100032e 	bgeu	r2,r4,81111ba4 <__sfvwrite_r+0x250>
81111b98:	80c00217 	ldw	r3,8(r16)
81111b9c:	38c7883a 	add	r3,r7,r3
81111ba0:	1d801816 	blt	r3,r22,81111c04 <__sfvwrite_r+0x2b0>
81111ba4:	b1c03e16 	blt	r22,r7,81111ca0 <__sfvwrite_r+0x34c>
81111ba8:	80800917 	ldw	r2,36(r16)
81111bac:	81400717 	ldw	r5,28(r16)
81111bb0:	e00d883a 	mov	r6,fp
81111bb4:	da000115 	stw	r8,4(sp)
81111bb8:	a809883a 	mov	r4,r21
81111bbc:	103ee83a 	callr	r2
81111bc0:	102f883a 	mov	r23,r2
81111bc4:	da000117 	ldw	r8,4(sp)
81111bc8:	00bfe00e 	bge	zero,r2,81111b4c <__reset+0xfb0f1b4c>
81111bcc:	9de7c83a 	sub	r19,r19,r23
81111bd0:	98001f26 	beq	r19,zero,81111c50 <__sfvwrite_r+0x2fc>
81111bd4:	a0800217 	ldw	r2,8(r20)
81111bd8:	e5f9883a 	add	fp,fp,r23
81111bdc:	95e5c83a 	sub	r18,r18,r23
81111be0:	15efc83a 	sub	r23,r2,r23
81111be4:	a5c00215 	stw	r23,8(r20)
81111be8:	b83f8726 	beq	r23,zero,81111a08 <__reset+0xfb0f1a08>
81111bec:	903fe11e 	bne	r18,zero,81111b74 <__reset+0xfb0f1b74>
81111bf0:	8f000017 	ldw	fp,0(r17)
81111bf4:	8c800117 	ldw	r18,4(r17)
81111bf8:	0011883a 	mov	r8,zero
81111bfc:	8c400204 	addi	r17,r17,8
81111c00:	003fdb06 	br	81111b70 <__reset+0xfb0f1b70>
81111c04:	180d883a 	mov	r6,r3
81111c08:	e00b883a 	mov	r5,fp
81111c0c:	da000115 	stw	r8,4(sp)
81111c10:	d8c00015 	stw	r3,0(sp)
81111c14:	1112b200 	call	81112b20 <memmove>
81111c18:	d8c00017 	ldw	r3,0(sp)
81111c1c:	80800017 	ldw	r2,0(r16)
81111c20:	800b883a 	mov	r5,r16
81111c24:	a809883a 	mov	r4,r21
81111c28:	10c5883a 	add	r2,r2,r3
81111c2c:	80800015 	stw	r2,0(r16)
81111c30:	d8c00015 	stw	r3,0(sp)
81111c34:	11110f40 	call	811110f4 <_fflush_r>
81111c38:	d8c00017 	ldw	r3,0(sp)
81111c3c:	da000117 	ldw	r8,4(sp)
81111c40:	103fc21e 	bne	r2,zero,81111b4c <__reset+0xfb0f1b4c>
81111c44:	182f883a 	mov	r23,r3
81111c48:	9de7c83a 	sub	r19,r19,r23
81111c4c:	983fe11e 	bne	r19,zero,81111bd4 <__reset+0xfb0f1bd4>
81111c50:	800b883a 	mov	r5,r16
81111c54:	a809883a 	mov	r4,r21
81111c58:	11110f40 	call	811110f4 <_fflush_r>
81111c5c:	103fbb1e 	bne	r2,zero,81111b4c <__reset+0xfb0f1b4c>
81111c60:	0011883a 	mov	r8,zero
81111c64:	003fdb06 	br	81111bd4 <__reset+0xfb0f1bd4>
81111c68:	94c0012e 	bgeu	r18,r19,81111c70 <__sfvwrite_r+0x31c>
81111c6c:	9027883a 	mov	r19,r18
81111c70:	980d883a 	mov	r6,r19
81111c74:	e00b883a 	mov	r5,fp
81111c78:	1112b200 	call	81112b20 <memmove>
81111c7c:	80800217 	ldw	r2,8(r16)
81111c80:	80c00017 	ldw	r3,0(r16)
81111c84:	14c5c83a 	sub	r2,r2,r19
81111c88:	1cc7883a 	add	r3,r3,r19
81111c8c:	80800215 	stw	r2,8(r16)
81111c90:	80c00015 	stw	r3,0(r16)
81111c94:	10004326 	beq	r2,zero,81111da4 <__sfvwrite_r+0x450>
81111c98:	9805883a 	mov	r2,r19
81111c9c:	003f8606 	br	81111ab8 <__reset+0xfb0f1ab8>
81111ca0:	b00d883a 	mov	r6,r22
81111ca4:	e00b883a 	mov	r5,fp
81111ca8:	da000115 	stw	r8,4(sp)
81111cac:	1112b200 	call	81112b20 <memmove>
81111cb0:	80800217 	ldw	r2,8(r16)
81111cb4:	80c00017 	ldw	r3,0(r16)
81111cb8:	da000117 	ldw	r8,4(sp)
81111cbc:	1585c83a 	sub	r2,r2,r22
81111cc0:	1dad883a 	add	r22,r3,r22
81111cc4:	80800215 	stw	r2,8(r16)
81111cc8:	85800015 	stw	r22,0(r16)
81111ccc:	003fbf06 	br	81111bcc <__reset+0xfb0f1bcc>
81111cd0:	81000017 	ldw	r4,0(r16)
81111cd4:	9027883a 	mov	r19,r18
81111cd8:	902f883a 	mov	r23,r18
81111cdc:	003f6c06 	br	81111a90 <__reset+0xfb0f1a90>
81111ce0:	900d883a 	mov	r6,r18
81111ce4:	01400284 	movi	r5,10
81111ce8:	e009883a 	mov	r4,fp
81111cec:	1112a3c0 	call	81112a3c <memchr>
81111cf0:	10003e26 	beq	r2,zero,81111dec <__sfvwrite_r+0x498>
81111cf4:	10800044 	addi	r2,r2,1
81111cf8:	1727c83a 	sub	r19,r2,fp
81111cfc:	02000044 	movi	r8,1
81111d00:	003f9d06 	br	81111b78 <__reset+0xfb0f1b78>
81111d04:	80800517 	ldw	r2,20(r16)
81111d08:	81400417 	ldw	r5,16(r16)
81111d0c:	81c00017 	ldw	r7,0(r16)
81111d10:	10a7883a 	add	r19,r2,r2
81111d14:	9885883a 	add	r2,r19,r2
81111d18:	1026d7fa 	srli	r19,r2,31
81111d1c:	396dc83a 	sub	r22,r7,r5
81111d20:	b1000044 	addi	r4,r22,1
81111d24:	9885883a 	add	r2,r19,r2
81111d28:	1027d07a 	srai	r19,r2,1
81111d2c:	2485883a 	add	r2,r4,r18
81111d30:	980d883a 	mov	r6,r19
81111d34:	9880022e 	bgeu	r19,r2,81111d40 <__sfvwrite_r+0x3ec>
81111d38:	1027883a 	mov	r19,r2
81111d3c:	100d883a 	mov	r6,r2
81111d40:	18c1000c 	andi	r3,r3,1024
81111d44:	18001c26 	beq	r3,zero,81111db8 <__sfvwrite_r+0x464>
81111d48:	300b883a 	mov	r5,r6
81111d4c:	a809883a 	mov	r4,r21
81111d50:	11122300 	call	81112230 <_malloc_r>
81111d54:	102f883a 	mov	r23,r2
81111d58:	10002926 	beq	r2,zero,81111e00 <__sfvwrite_r+0x4ac>
81111d5c:	81400417 	ldw	r5,16(r16)
81111d60:	b00d883a 	mov	r6,r22
81111d64:	1009883a 	mov	r4,r2
81111d68:	110ce640 	call	8110ce64 <memcpy>
81111d6c:	8080030b 	ldhu	r2,12(r16)
81111d70:	00fedfc4 	movi	r3,-1153
81111d74:	10c4703a 	and	r2,r2,r3
81111d78:	10802014 	ori	r2,r2,128
81111d7c:	8080030d 	sth	r2,12(r16)
81111d80:	bd89883a 	add	r4,r23,r22
81111d84:	9d8fc83a 	sub	r7,r19,r22
81111d88:	85c00415 	stw	r23,16(r16)
81111d8c:	84c00515 	stw	r19,20(r16)
81111d90:	81000015 	stw	r4,0(r16)
81111d94:	9027883a 	mov	r19,r18
81111d98:	81c00215 	stw	r7,8(r16)
81111d9c:	902f883a 	mov	r23,r18
81111da0:	003f3b06 	br	81111a90 <__reset+0xfb0f1a90>
81111da4:	800b883a 	mov	r5,r16
81111da8:	a809883a 	mov	r4,r21
81111dac:	11110f40 	call	811110f4 <_fflush_r>
81111db0:	103fb926 	beq	r2,zero,81111c98 <__reset+0xfb0f1c98>
81111db4:	003f6506 	br	81111b4c <__reset+0xfb0f1b4c>
81111db8:	a809883a 	mov	r4,r21
81111dbc:	1113f080 	call	81113f08 <_realloc_r>
81111dc0:	102f883a 	mov	r23,r2
81111dc4:	103fee1e 	bne	r2,zero,81111d80 <__reset+0xfb0f1d80>
81111dc8:	81400417 	ldw	r5,16(r16)
81111dcc:	a809883a 	mov	r4,r21
81111dd0:	11116440 	call	81111644 <_free_r>
81111dd4:	8080030b 	ldhu	r2,12(r16)
81111dd8:	00ffdfc4 	movi	r3,-129
81111ddc:	1884703a 	and	r2,r3,r2
81111de0:	00c00304 	movi	r3,12
81111de4:	a8c00015 	stw	r3,0(r21)
81111de8:	003f5906 	br	81111b50 <__reset+0xfb0f1b50>
81111dec:	94c00044 	addi	r19,r18,1
81111df0:	02000044 	movi	r8,1
81111df4:	003f6006 	br	81111b78 <__reset+0xfb0f1b78>
81111df8:	00bfffc4 	movi	r2,-1
81111dfc:	003f0306 	br	81111a0c <__reset+0xfb0f1a0c>
81111e00:	00800304 	movi	r2,12
81111e04:	a8800015 	stw	r2,0(r21)
81111e08:	8080030b 	ldhu	r2,12(r16)
81111e0c:	003f5006 	br	81111b50 <__reset+0xfb0f1b50>

81111e10 <_fwalk>:
81111e10:	defff704 	addi	sp,sp,-36
81111e14:	dd000415 	stw	r20,16(sp)
81111e18:	dfc00815 	stw	ra,32(sp)
81111e1c:	ddc00715 	stw	r23,28(sp)
81111e20:	dd800615 	stw	r22,24(sp)
81111e24:	dd400515 	stw	r21,20(sp)
81111e28:	dcc00315 	stw	r19,12(sp)
81111e2c:	dc800215 	stw	r18,8(sp)
81111e30:	dc400115 	stw	r17,4(sp)
81111e34:	dc000015 	stw	r16,0(sp)
81111e38:	2500b804 	addi	r20,r4,736
81111e3c:	a0002326 	beq	r20,zero,81111ecc <_fwalk+0xbc>
81111e40:	282b883a 	mov	r21,r5
81111e44:	002f883a 	mov	r23,zero
81111e48:	05800044 	movi	r22,1
81111e4c:	04ffffc4 	movi	r19,-1
81111e50:	a4400117 	ldw	r17,4(r20)
81111e54:	a4800217 	ldw	r18,8(r20)
81111e58:	8c7fffc4 	addi	r17,r17,-1
81111e5c:	88000d16 	blt	r17,zero,81111e94 <_fwalk+0x84>
81111e60:	94000304 	addi	r16,r18,12
81111e64:	94800384 	addi	r18,r18,14
81111e68:	8080000b 	ldhu	r2,0(r16)
81111e6c:	8c7fffc4 	addi	r17,r17,-1
81111e70:	813ffd04 	addi	r4,r16,-12
81111e74:	b080042e 	bgeu	r22,r2,81111e88 <_fwalk+0x78>
81111e78:	9080000f 	ldh	r2,0(r18)
81111e7c:	14c00226 	beq	r2,r19,81111e88 <_fwalk+0x78>
81111e80:	a83ee83a 	callr	r21
81111e84:	b8aeb03a 	or	r23,r23,r2
81111e88:	84001a04 	addi	r16,r16,104
81111e8c:	94801a04 	addi	r18,r18,104
81111e90:	8cfff51e 	bne	r17,r19,81111e68 <__reset+0xfb0f1e68>
81111e94:	a5000017 	ldw	r20,0(r20)
81111e98:	a03fed1e 	bne	r20,zero,81111e50 <__reset+0xfb0f1e50>
81111e9c:	b805883a 	mov	r2,r23
81111ea0:	dfc00817 	ldw	ra,32(sp)
81111ea4:	ddc00717 	ldw	r23,28(sp)
81111ea8:	dd800617 	ldw	r22,24(sp)
81111eac:	dd400517 	ldw	r21,20(sp)
81111eb0:	dd000417 	ldw	r20,16(sp)
81111eb4:	dcc00317 	ldw	r19,12(sp)
81111eb8:	dc800217 	ldw	r18,8(sp)
81111ebc:	dc400117 	ldw	r17,4(sp)
81111ec0:	dc000017 	ldw	r16,0(sp)
81111ec4:	dec00904 	addi	sp,sp,36
81111ec8:	f800283a 	ret
81111ecc:	002f883a 	mov	r23,zero
81111ed0:	003ff206 	br	81111e9c <__reset+0xfb0f1e9c>

81111ed4 <_fwalk_reent>:
81111ed4:	defff704 	addi	sp,sp,-36
81111ed8:	dd000415 	stw	r20,16(sp)
81111edc:	dfc00815 	stw	ra,32(sp)
81111ee0:	ddc00715 	stw	r23,28(sp)
81111ee4:	dd800615 	stw	r22,24(sp)
81111ee8:	dd400515 	stw	r21,20(sp)
81111eec:	dcc00315 	stw	r19,12(sp)
81111ef0:	dc800215 	stw	r18,8(sp)
81111ef4:	dc400115 	stw	r17,4(sp)
81111ef8:	dc000015 	stw	r16,0(sp)
81111efc:	2500b804 	addi	r20,r4,736
81111f00:	a0002326 	beq	r20,zero,81111f90 <_fwalk_reent+0xbc>
81111f04:	282b883a 	mov	r21,r5
81111f08:	2027883a 	mov	r19,r4
81111f0c:	002f883a 	mov	r23,zero
81111f10:	05800044 	movi	r22,1
81111f14:	04bfffc4 	movi	r18,-1
81111f18:	a4400117 	ldw	r17,4(r20)
81111f1c:	a4000217 	ldw	r16,8(r20)
81111f20:	8c7fffc4 	addi	r17,r17,-1
81111f24:	88000c16 	blt	r17,zero,81111f58 <_fwalk_reent+0x84>
81111f28:	84000304 	addi	r16,r16,12
81111f2c:	8080000b 	ldhu	r2,0(r16)
81111f30:	8c7fffc4 	addi	r17,r17,-1
81111f34:	817ffd04 	addi	r5,r16,-12
81111f38:	b080052e 	bgeu	r22,r2,81111f50 <_fwalk_reent+0x7c>
81111f3c:	8080008f 	ldh	r2,2(r16)
81111f40:	9809883a 	mov	r4,r19
81111f44:	14800226 	beq	r2,r18,81111f50 <_fwalk_reent+0x7c>
81111f48:	a83ee83a 	callr	r21
81111f4c:	b8aeb03a 	or	r23,r23,r2
81111f50:	84001a04 	addi	r16,r16,104
81111f54:	8cbff51e 	bne	r17,r18,81111f2c <__reset+0xfb0f1f2c>
81111f58:	a5000017 	ldw	r20,0(r20)
81111f5c:	a03fee1e 	bne	r20,zero,81111f18 <__reset+0xfb0f1f18>
81111f60:	b805883a 	mov	r2,r23
81111f64:	dfc00817 	ldw	ra,32(sp)
81111f68:	ddc00717 	ldw	r23,28(sp)
81111f6c:	dd800617 	ldw	r22,24(sp)
81111f70:	dd400517 	ldw	r21,20(sp)
81111f74:	dd000417 	ldw	r20,16(sp)
81111f78:	dcc00317 	ldw	r19,12(sp)
81111f7c:	dc800217 	ldw	r18,8(sp)
81111f80:	dc400117 	ldw	r17,4(sp)
81111f84:	dc000017 	ldw	r16,0(sp)
81111f88:	dec00904 	addi	sp,sp,36
81111f8c:	f800283a 	ret
81111f90:	002f883a 	mov	r23,zero
81111f94:	003ff206 	br	81111f60 <__reset+0xfb0f1f60>

81111f98 <_setlocale_r>:
81111f98:	30001b26 	beq	r6,zero,81112008 <_setlocale_r+0x70>
81111f9c:	016044b4 	movhi	r5,33042
81111fa0:	defffe04 	addi	sp,sp,-8
81111fa4:	297f1604 	addi	r5,r5,-936
81111fa8:	3009883a 	mov	r4,r6
81111fac:	dc000015 	stw	r16,0(sp)
81111fb0:	dfc00115 	stw	ra,4(sp)
81111fb4:	3021883a 	mov	r16,r6
81111fb8:	11148600 	call	81114860 <strcmp>
81111fbc:	1000061e 	bne	r2,zero,81111fd8 <_setlocale_r+0x40>
81111fc0:	00a044b4 	movhi	r2,33042
81111fc4:	10bef704 	addi	r2,r2,-1060
81111fc8:	dfc00117 	ldw	ra,4(sp)
81111fcc:	dc000017 	ldw	r16,0(sp)
81111fd0:	dec00204 	addi	sp,sp,8
81111fd4:	f800283a 	ret
81111fd8:	016044b4 	movhi	r5,33042
81111fdc:	297ef704 	addi	r5,r5,-1060
81111fe0:	8009883a 	mov	r4,r16
81111fe4:	11148600 	call	81114860 <strcmp>
81111fe8:	103ff526 	beq	r2,zero,81111fc0 <__reset+0xfb0f1fc0>
81111fec:	016044b4 	movhi	r5,33042
81111ff0:	297f0104 	addi	r5,r5,-1020
81111ff4:	8009883a 	mov	r4,r16
81111ff8:	11148600 	call	81114860 <strcmp>
81111ffc:	103ff026 	beq	r2,zero,81111fc0 <__reset+0xfb0f1fc0>
81112000:	0005883a 	mov	r2,zero
81112004:	003ff006 	br	81111fc8 <__reset+0xfb0f1fc8>
81112008:	00a044b4 	movhi	r2,33042
8111200c:	10bef704 	addi	r2,r2,-1060
81112010:	f800283a 	ret

81112014 <__locale_charset>:
81112014:	00a044b4 	movhi	r2,33042
81112018:	10812304 	addi	r2,r2,1164
8111201c:	f800283a 	ret

81112020 <__locale_mb_cur_max>:
81112020:	00a044b4 	movhi	r2,33042
81112024:	10873504 	addi	r2,r2,7380
81112028:	10800017 	ldw	r2,0(r2)
8111202c:	f800283a 	ret

81112030 <__locale_msgcharset>:
81112030:	00a044b4 	movhi	r2,33042
81112034:	10811b04 	addi	r2,r2,1132
81112038:	f800283a 	ret

8111203c <__locale_cjk_lang>:
8111203c:	0005883a 	mov	r2,zero
81112040:	f800283a 	ret

81112044 <_localeconv_r>:
81112044:	00a044b4 	movhi	r2,33042
81112048:	10812b04 	addi	r2,r2,1196
8111204c:	f800283a 	ret

81112050 <setlocale>:
81112050:	00a044b4 	movhi	r2,33042
81112054:	10873404 	addi	r2,r2,7376
81112058:	280d883a 	mov	r6,r5
8111205c:	200b883a 	mov	r5,r4
81112060:	11000017 	ldw	r4,0(r2)
81112064:	1111f981 	jmpi	81111f98 <_setlocale_r>

81112068 <localeconv>:
81112068:	00a044b4 	movhi	r2,33042
8111206c:	10812b04 	addi	r2,r2,1196
81112070:	f800283a 	ret

81112074 <__smakebuf_r>:
81112074:	2880030b 	ldhu	r2,12(r5)
81112078:	10c0008c 	andi	r3,r2,2
8111207c:	1800411e 	bne	r3,zero,81112184 <__smakebuf_r+0x110>
81112080:	deffec04 	addi	sp,sp,-80
81112084:	dc000f15 	stw	r16,60(sp)
81112088:	2821883a 	mov	r16,r5
8111208c:	2940038f 	ldh	r5,14(r5)
81112090:	dc401015 	stw	r17,64(sp)
81112094:	dfc01315 	stw	ra,76(sp)
81112098:	dcc01215 	stw	r19,72(sp)
8111209c:	dc801115 	stw	r18,68(sp)
811120a0:	2023883a 	mov	r17,r4
811120a4:	28001c16 	blt	r5,zero,81112118 <__smakebuf_r+0xa4>
811120a8:	d80d883a 	mov	r6,sp
811120ac:	11165600 	call	81116560 <_fstat_r>
811120b0:	10001816 	blt	r2,zero,81112114 <__smakebuf_r+0xa0>
811120b4:	d8800117 	ldw	r2,4(sp)
811120b8:	00e00014 	movui	r3,32768
811120bc:	10bc000c 	andi	r2,r2,61440
811120c0:	14c80020 	cmpeqi	r19,r2,8192
811120c4:	10c03726 	beq	r2,r3,811121a4 <__smakebuf_r+0x130>
811120c8:	80c0030b 	ldhu	r3,12(r16)
811120cc:	18c20014 	ori	r3,r3,2048
811120d0:	80c0030d 	sth	r3,12(r16)
811120d4:	00c80004 	movi	r3,8192
811120d8:	10c0521e 	bne	r2,r3,81112224 <__smakebuf_r+0x1b0>
811120dc:	8140038f 	ldh	r5,14(r16)
811120e0:	8809883a 	mov	r4,r17
811120e4:	11165bc0 	call	811165bc <_isatty_r>
811120e8:	10004c26 	beq	r2,zero,8111221c <__smakebuf_r+0x1a8>
811120ec:	8080030b 	ldhu	r2,12(r16)
811120f0:	80c010c4 	addi	r3,r16,67
811120f4:	80c00015 	stw	r3,0(r16)
811120f8:	10800054 	ori	r2,r2,1
811120fc:	8080030d 	sth	r2,12(r16)
81112100:	00800044 	movi	r2,1
81112104:	80c00415 	stw	r3,16(r16)
81112108:	80800515 	stw	r2,20(r16)
8111210c:	04810004 	movi	r18,1024
81112110:	00000706 	br	81112130 <__smakebuf_r+0xbc>
81112114:	8080030b 	ldhu	r2,12(r16)
81112118:	10c0200c 	andi	r3,r2,128
8111211c:	18001f1e 	bne	r3,zero,8111219c <__smakebuf_r+0x128>
81112120:	04810004 	movi	r18,1024
81112124:	10820014 	ori	r2,r2,2048
81112128:	8080030d 	sth	r2,12(r16)
8111212c:	0027883a 	mov	r19,zero
81112130:	900b883a 	mov	r5,r18
81112134:	8809883a 	mov	r4,r17
81112138:	11122300 	call	81112230 <_malloc_r>
8111213c:	10002c26 	beq	r2,zero,811121f0 <__smakebuf_r+0x17c>
81112140:	80c0030b 	ldhu	r3,12(r16)
81112144:	01204474 	movhi	r4,33041
81112148:	21046204 	addi	r4,r4,4488
8111214c:	89000f15 	stw	r4,60(r17)
81112150:	18c02014 	ori	r3,r3,128
81112154:	80c0030d 	sth	r3,12(r16)
81112158:	80800015 	stw	r2,0(r16)
8111215c:	80800415 	stw	r2,16(r16)
81112160:	84800515 	stw	r18,20(r16)
81112164:	98001a1e 	bne	r19,zero,811121d0 <__smakebuf_r+0x15c>
81112168:	dfc01317 	ldw	ra,76(sp)
8111216c:	dcc01217 	ldw	r19,72(sp)
81112170:	dc801117 	ldw	r18,68(sp)
81112174:	dc401017 	ldw	r17,64(sp)
81112178:	dc000f17 	ldw	r16,60(sp)
8111217c:	dec01404 	addi	sp,sp,80
81112180:	f800283a 	ret
81112184:	288010c4 	addi	r2,r5,67
81112188:	28800015 	stw	r2,0(r5)
8111218c:	28800415 	stw	r2,16(r5)
81112190:	00800044 	movi	r2,1
81112194:	28800515 	stw	r2,20(r5)
81112198:	f800283a 	ret
8111219c:	04801004 	movi	r18,64
811121a0:	003fe006 	br	81112124 <__reset+0xfb0f2124>
811121a4:	81000a17 	ldw	r4,40(r16)
811121a8:	00e04474 	movhi	r3,33041
811121ac:	18d1ff04 	addi	r3,r3,18428
811121b0:	20ffc51e 	bne	r4,r3,811120c8 <__reset+0xfb0f20c8>
811121b4:	8080030b 	ldhu	r2,12(r16)
811121b8:	04810004 	movi	r18,1024
811121bc:	84801315 	stw	r18,76(r16)
811121c0:	1484b03a 	or	r2,r2,r18
811121c4:	8080030d 	sth	r2,12(r16)
811121c8:	0027883a 	mov	r19,zero
811121cc:	003fd806 	br	81112130 <__reset+0xfb0f2130>
811121d0:	8140038f 	ldh	r5,14(r16)
811121d4:	8809883a 	mov	r4,r17
811121d8:	11165bc0 	call	811165bc <_isatty_r>
811121dc:	103fe226 	beq	r2,zero,81112168 <__reset+0xfb0f2168>
811121e0:	8080030b 	ldhu	r2,12(r16)
811121e4:	10800054 	ori	r2,r2,1
811121e8:	8080030d 	sth	r2,12(r16)
811121ec:	003fde06 	br	81112168 <__reset+0xfb0f2168>
811121f0:	8080030b 	ldhu	r2,12(r16)
811121f4:	10c0800c 	andi	r3,r2,512
811121f8:	183fdb1e 	bne	r3,zero,81112168 <__reset+0xfb0f2168>
811121fc:	10800094 	ori	r2,r2,2
81112200:	80c010c4 	addi	r3,r16,67
81112204:	8080030d 	sth	r2,12(r16)
81112208:	00800044 	movi	r2,1
8111220c:	80c00015 	stw	r3,0(r16)
81112210:	80c00415 	stw	r3,16(r16)
81112214:	80800515 	stw	r2,20(r16)
81112218:	003fd306 	br	81112168 <__reset+0xfb0f2168>
8111221c:	04810004 	movi	r18,1024
81112220:	003fc306 	br	81112130 <__reset+0xfb0f2130>
81112224:	0027883a 	mov	r19,zero
81112228:	04810004 	movi	r18,1024
8111222c:	003fc006 	br	81112130 <__reset+0xfb0f2130>

81112230 <_malloc_r>:
81112230:	defff504 	addi	sp,sp,-44
81112234:	dc800315 	stw	r18,12(sp)
81112238:	dfc00a15 	stw	ra,40(sp)
8111223c:	df000915 	stw	fp,36(sp)
81112240:	ddc00815 	stw	r23,32(sp)
81112244:	dd800715 	stw	r22,28(sp)
81112248:	dd400615 	stw	r21,24(sp)
8111224c:	dd000515 	stw	r20,20(sp)
81112250:	dcc00415 	stw	r19,16(sp)
81112254:	dc400215 	stw	r17,8(sp)
81112258:	dc000115 	stw	r16,4(sp)
8111225c:	288002c4 	addi	r2,r5,11
81112260:	00c00584 	movi	r3,22
81112264:	2025883a 	mov	r18,r4
81112268:	18807f2e 	bgeu	r3,r2,81112468 <_malloc_r+0x238>
8111226c:	047ffe04 	movi	r17,-8
81112270:	1462703a 	and	r17,r2,r17
81112274:	8800a316 	blt	r17,zero,81112504 <_malloc_r+0x2d4>
81112278:	8940a236 	bltu	r17,r5,81112504 <_malloc_r+0x2d4>
8111227c:	1119b600 	call	81119b60 <__malloc_lock>
81112280:	00807dc4 	movi	r2,503
81112284:	1441e92e 	bgeu	r2,r17,81112a2c <_malloc_r+0x7fc>
81112288:	8804d27a 	srli	r2,r17,9
8111228c:	1000a126 	beq	r2,zero,81112514 <_malloc_r+0x2e4>
81112290:	00c00104 	movi	r3,4
81112294:	18811e36 	bltu	r3,r2,81112710 <_malloc_r+0x4e0>
81112298:	8804d1ba 	srli	r2,r17,6
8111229c:	12000e44 	addi	r8,r2,57
811122a0:	11c00e04 	addi	r7,r2,56
811122a4:	4209883a 	add	r4,r8,r8
811122a8:	04e044b4 	movhi	r19,33042
811122ac:	2109883a 	add	r4,r4,r4
811122b0:	9cc13904 	addi	r19,r19,1252
811122b4:	2109883a 	add	r4,r4,r4
811122b8:	9909883a 	add	r4,r19,r4
811122bc:	24000117 	ldw	r16,4(r4)
811122c0:	213ffe04 	addi	r4,r4,-8
811122c4:	24009726 	beq	r4,r16,81112524 <_malloc_r+0x2f4>
811122c8:	80800117 	ldw	r2,4(r16)
811122cc:	01bfff04 	movi	r6,-4
811122d0:	014003c4 	movi	r5,15
811122d4:	1184703a 	and	r2,r2,r6
811122d8:	1447c83a 	sub	r3,r2,r17
811122dc:	28c00716 	blt	r5,r3,811122fc <_malloc_r+0xcc>
811122e0:	1800920e 	bge	r3,zero,8111252c <_malloc_r+0x2fc>
811122e4:	84000317 	ldw	r16,12(r16)
811122e8:	24008e26 	beq	r4,r16,81112524 <_malloc_r+0x2f4>
811122ec:	80800117 	ldw	r2,4(r16)
811122f0:	1184703a 	and	r2,r2,r6
811122f4:	1447c83a 	sub	r3,r2,r17
811122f8:	28fff90e 	bge	r5,r3,811122e0 <__reset+0xfb0f22e0>
811122fc:	3809883a 	mov	r4,r7
81112300:	01a044b4 	movhi	r6,33042
81112304:	9c000417 	ldw	r16,16(r19)
81112308:	31813904 	addi	r6,r6,1252
8111230c:	32000204 	addi	r8,r6,8
81112310:	82013426 	beq	r16,r8,811127e4 <_malloc_r+0x5b4>
81112314:	80c00117 	ldw	r3,4(r16)
81112318:	00bfff04 	movi	r2,-4
8111231c:	188e703a 	and	r7,r3,r2
81112320:	3c45c83a 	sub	r2,r7,r17
81112324:	00c003c4 	movi	r3,15
81112328:	18811f16 	blt	r3,r2,811127a8 <_malloc_r+0x578>
8111232c:	32000515 	stw	r8,20(r6)
81112330:	32000415 	stw	r8,16(r6)
81112334:	10007f0e 	bge	r2,zero,81112534 <_malloc_r+0x304>
81112338:	00807fc4 	movi	r2,511
8111233c:	11c0fd36 	bltu	r2,r7,81112734 <_malloc_r+0x504>
81112340:	3806d0fa 	srli	r3,r7,3
81112344:	01c00044 	movi	r7,1
81112348:	30800117 	ldw	r2,4(r6)
8111234c:	19400044 	addi	r5,r3,1
81112350:	294b883a 	add	r5,r5,r5
81112354:	1807d0ba 	srai	r3,r3,2
81112358:	294b883a 	add	r5,r5,r5
8111235c:	294b883a 	add	r5,r5,r5
81112360:	298b883a 	add	r5,r5,r6
81112364:	38c6983a 	sll	r3,r7,r3
81112368:	29c00017 	ldw	r7,0(r5)
8111236c:	2a7ffe04 	addi	r9,r5,-8
81112370:	1886b03a 	or	r3,r3,r2
81112374:	82400315 	stw	r9,12(r16)
81112378:	81c00215 	stw	r7,8(r16)
8111237c:	30c00115 	stw	r3,4(r6)
81112380:	2c000015 	stw	r16,0(r5)
81112384:	3c000315 	stw	r16,12(r7)
81112388:	2005d0ba 	srai	r2,r4,2
8111238c:	01400044 	movi	r5,1
81112390:	288a983a 	sll	r5,r5,r2
81112394:	19406f36 	bltu	r3,r5,81112554 <_malloc_r+0x324>
81112398:	28c4703a 	and	r2,r5,r3
8111239c:	10000a1e 	bne	r2,zero,811123c8 <_malloc_r+0x198>
811123a0:	00bfff04 	movi	r2,-4
811123a4:	294b883a 	add	r5,r5,r5
811123a8:	2088703a 	and	r4,r4,r2
811123ac:	28c4703a 	and	r2,r5,r3
811123b0:	21000104 	addi	r4,r4,4
811123b4:	1000041e 	bne	r2,zero,811123c8 <_malloc_r+0x198>
811123b8:	294b883a 	add	r5,r5,r5
811123bc:	28c4703a 	and	r2,r5,r3
811123c0:	21000104 	addi	r4,r4,4
811123c4:	103ffc26 	beq	r2,zero,811123b8 <__reset+0xfb0f23b8>
811123c8:	02bfff04 	movi	r10,-4
811123cc:	024003c4 	movi	r9,15
811123d0:	21800044 	addi	r6,r4,1
811123d4:	318d883a 	add	r6,r6,r6
811123d8:	318d883a 	add	r6,r6,r6
811123dc:	318d883a 	add	r6,r6,r6
811123e0:	998d883a 	add	r6,r19,r6
811123e4:	333ffe04 	addi	r12,r6,-8
811123e8:	2017883a 	mov	r11,r4
811123ec:	31800104 	addi	r6,r6,4
811123f0:	34000017 	ldw	r16,0(r6)
811123f4:	31fffd04 	addi	r7,r6,-12
811123f8:	81c0041e 	bne	r16,r7,8111240c <_malloc_r+0x1dc>
811123fc:	0000fb06 	br	811127ec <_malloc_r+0x5bc>
81112400:	1801030e 	bge	r3,zero,81112810 <_malloc_r+0x5e0>
81112404:	84000317 	ldw	r16,12(r16)
81112408:	81c0f826 	beq	r16,r7,811127ec <_malloc_r+0x5bc>
8111240c:	80800117 	ldw	r2,4(r16)
81112410:	1284703a 	and	r2,r2,r10
81112414:	1447c83a 	sub	r3,r2,r17
81112418:	48fff90e 	bge	r9,r3,81112400 <__reset+0xfb0f2400>
8111241c:	80800317 	ldw	r2,12(r16)
81112420:	81000217 	ldw	r4,8(r16)
81112424:	89400054 	ori	r5,r17,1
81112428:	81400115 	stw	r5,4(r16)
8111242c:	20800315 	stw	r2,12(r4)
81112430:	11000215 	stw	r4,8(r2)
81112434:	8463883a 	add	r17,r16,r17
81112438:	9c400515 	stw	r17,20(r19)
8111243c:	9c400415 	stw	r17,16(r19)
81112440:	18800054 	ori	r2,r3,1
81112444:	88800115 	stw	r2,4(r17)
81112448:	8a000315 	stw	r8,12(r17)
8111244c:	8a000215 	stw	r8,8(r17)
81112450:	88e3883a 	add	r17,r17,r3
81112454:	88c00015 	stw	r3,0(r17)
81112458:	9009883a 	mov	r4,r18
8111245c:	1119b840 	call	81119b84 <__malloc_unlock>
81112460:	80800204 	addi	r2,r16,8
81112464:	00001b06 	br	811124d4 <_malloc_r+0x2a4>
81112468:	04400404 	movi	r17,16
8111246c:	89402536 	bltu	r17,r5,81112504 <_malloc_r+0x2d4>
81112470:	1119b600 	call	81119b60 <__malloc_lock>
81112474:	00800184 	movi	r2,6
81112478:	01000084 	movi	r4,2
8111247c:	04e044b4 	movhi	r19,33042
81112480:	1085883a 	add	r2,r2,r2
81112484:	9cc13904 	addi	r19,r19,1252
81112488:	1085883a 	add	r2,r2,r2
8111248c:	9885883a 	add	r2,r19,r2
81112490:	14000117 	ldw	r16,4(r2)
81112494:	10fffe04 	addi	r3,r2,-8
81112498:	80c0d926 	beq	r16,r3,81112800 <_malloc_r+0x5d0>
8111249c:	80c00117 	ldw	r3,4(r16)
811124a0:	81000317 	ldw	r4,12(r16)
811124a4:	00bfff04 	movi	r2,-4
811124a8:	1884703a 	and	r2,r3,r2
811124ac:	81400217 	ldw	r5,8(r16)
811124b0:	8085883a 	add	r2,r16,r2
811124b4:	10c00117 	ldw	r3,4(r2)
811124b8:	29000315 	stw	r4,12(r5)
811124bc:	21400215 	stw	r5,8(r4)
811124c0:	18c00054 	ori	r3,r3,1
811124c4:	10c00115 	stw	r3,4(r2)
811124c8:	9009883a 	mov	r4,r18
811124cc:	1119b840 	call	81119b84 <__malloc_unlock>
811124d0:	80800204 	addi	r2,r16,8
811124d4:	dfc00a17 	ldw	ra,40(sp)
811124d8:	df000917 	ldw	fp,36(sp)
811124dc:	ddc00817 	ldw	r23,32(sp)
811124e0:	dd800717 	ldw	r22,28(sp)
811124e4:	dd400617 	ldw	r21,24(sp)
811124e8:	dd000517 	ldw	r20,20(sp)
811124ec:	dcc00417 	ldw	r19,16(sp)
811124f0:	dc800317 	ldw	r18,12(sp)
811124f4:	dc400217 	ldw	r17,8(sp)
811124f8:	dc000117 	ldw	r16,4(sp)
811124fc:	dec00b04 	addi	sp,sp,44
81112500:	f800283a 	ret
81112504:	00800304 	movi	r2,12
81112508:	90800015 	stw	r2,0(r18)
8111250c:	0005883a 	mov	r2,zero
81112510:	003ff006 	br	811124d4 <__reset+0xfb0f24d4>
81112514:	01002004 	movi	r4,128
81112518:	02001004 	movi	r8,64
8111251c:	01c00fc4 	movi	r7,63
81112520:	003f6106 	br	811122a8 <__reset+0xfb0f22a8>
81112524:	4009883a 	mov	r4,r8
81112528:	003f7506 	br	81112300 <__reset+0xfb0f2300>
8111252c:	81000317 	ldw	r4,12(r16)
81112530:	003fde06 	br	811124ac <__reset+0xfb0f24ac>
81112534:	81c5883a 	add	r2,r16,r7
81112538:	11400117 	ldw	r5,4(r2)
8111253c:	9009883a 	mov	r4,r18
81112540:	29400054 	ori	r5,r5,1
81112544:	11400115 	stw	r5,4(r2)
81112548:	1119b840 	call	81119b84 <__malloc_unlock>
8111254c:	80800204 	addi	r2,r16,8
81112550:	003fe006 	br	811124d4 <__reset+0xfb0f24d4>
81112554:	9c000217 	ldw	r16,8(r19)
81112558:	00bfff04 	movi	r2,-4
8111255c:	85800117 	ldw	r22,4(r16)
81112560:	b0ac703a 	and	r22,r22,r2
81112564:	b4400336 	bltu	r22,r17,81112574 <_malloc_r+0x344>
81112568:	b445c83a 	sub	r2,r22,r17
8111256c:	00c003c4 	movi	r3,15
81112570:	18805d16 	blt	r3,r2,811126e8 <_malloc_r+0x4b8>
81112574:	05e044b4 	movhi	r23,33042
81112578:	00a044b4 	movhi	r2,33042
8111257c:	10876b04 	addi	r2,r2,7596
81112580:	bdc73604 	addi	r23,r23,7384
81112584:	15400017 	ldw	r21,0(r2)
81112588:	b8c00017 	ldw	r3,0(r23)
8111258c:	00bfffc4 	movi	r2,-1
81112590:	858d883a 	add	r6,r16,r22
81112594:	8d6b883a 	add	r21,r17,r21
81112598:	1880ea26 	beq	r3,r2,81112944 <_malloc_r+0x714>
8111259c:	ad4403c4 	addi	r21,r21,4111
811125a0:	00bc0004 	movi	r2,-4096
811125a4:	a8aa703a 	and	r21,r21,r2
811125a8:	a80b883a 	mov	r5,r21
811125ac:	9009883a 	mov	r4,r18
811125b0:	d9800015 	stw	r6,0(sp)
811125b4:	11146d00 	call	811146d0 <_sbrk_r>
811125b8:	1029883a 	mov	r20,r2
811125bc:	00bfffc4 	movi	r2,-1
811125c0:	d9800017 	ldw	r6,0(sp)
811125c4:	a080e826 	beq	r20,r2,81112968 <_malloc_r+0x738>
811125c8:	a180a636 	bltu	r20,r6,81112864 <_malloc_r+0x634>
811125cc:	072044b4 	movhi	fp,33042
811125d0:	e7077404 	addi	fp,fp,7632
811125d4:	e0800017 	ldw	r2,0(fp)
811125d8:	a887883a 	add	r3,r21,r2
811125dc:	e0c00015 	stw	r3,0(fp)
811125e0:	3500e626 	beq	r6,r20,8111297c <_malloc_r+0x74c>
811125e4:	b9000017 	ldw	r4,0(r23)
811125e8:	00bfffc4 	movi	r2,-1
811125ec:	2080ee26 	beq	r4,r2,811129a8 <_malloc_r+0x778>
811125f0:	a185c83a 	sub	r2,r20,r6
811125f4:	10c5883a 	add	r2,r2,r3
811125f8:	e0800015 	stw	r2,0(fp)
811125fc:	a0c001cc 	andi	r3,r20,7
81112600:	1800bc26 	beq	r3,zero,811128f4 <_malloc_r+0x6c4>
81112604:	a0e9c83a 	sub	r20,r20,r3
81112608:	00840204 	movi	r2,4104
8111260c:	a5000204 	addi	r20,r20,8
81112610:	10c7c83a 	sub	r3,r2,r3
81112614:	a545883a 	add	r2,r20,r21
81112618:	1083ffcc 	andi	r2,r2,4095
8111261c:	18abc83a 	sub	r21,r3,r2
81112620:	a80b883a 	mov	r5,r21
81112624:	9009883a 	mov	r4,r18
81112628:	11146d00 	call	811146d0 <_sbrk_r>
8111262c:	00ffffc4 	movi	r3,-1
81112630:	10c0e126 	beq	r2,r3,811129b8 <_malloc_r+0x788>
81112634:	1505c83a 	sub	r2,r2,r20
81112638:	1545883a 	add	r2,r2,r21
8111263c:	10800054 	ori	r2,r2,1
81112640:	e0c00017 	ldw	r3,0(fp)
81112644:	9d000215 	stw	r20,8(r19)
81112648:	a0800115 	stw	r2,4(r20)
8111264c:	a8c7883a 	add	r3,r21,r3
81112650:	e0c00015 	stw	r3,0(fp)
81112654:	84c00e26 	beq	r16,r19,81112690 <_malloc_r+0x460>
81112658:	018003c4 	movi	r6,15
8111265c:	3580a72e 	bgeu	r6,r22,811128fc <_malloc_r+0x6cc>
81112660:	81400117 	ldw	r5,4(r16)
81112664:	013ffe04 	movi	r4,-8
81112668:	b0bffd04 	addi	r2,r22,-12
8111266c:	1104703a 	and	r2,r2,r4
81112670:	2900004c 	andi	r4,r5,1
81112674:	2088b03a 	or	r4,r4,r2
81112678:	81000115 	stw	r4,4(r16)
8111267c:	01400144 	movi	r5,5
81112680:	8089883a 	add	r4,r16,r2
81112684:	21400115 	stw	r5,4(r4)
81112688:	21400215 	stw	r5,8(r4)
8111268c:	3080cd36 	bltu	r6,r2,811129c4 <_malloc_r+0x794>
81112690:	00a044b4 	movhi	r2,33042
81112694:	10876a04 	addi	r2,r2,7592
81112698:	11000017 	ldw	r4,0(r2)
8111269c:	20c0012e 	bgeu	r4,r3,811126a4 <_malloc_r+0x474>
811126a0:	10c00015 	stw	r3,0(r2)
811126a4:	00a044b4 	movhi	r2,33042
811126a8:	10876904 	addi	r2,r2,7588
811126ac:	11000017 	ldw	r4,0(r2)
811126b0:	9c000217 	ldw	r16,8(r19)
811126b4:	20c0012e 	bgeu	r4,r3,811126bc <_malloc_r+0x48c>
811126b8:	10c00015 	stw	r3,0(r2)
811126bc:	80c00117 	ldw	r3,4(r16)
811126c0:	00bfff04 	movi	r2,-4
811126c4:	1886703a 	and	r3,r3,r2
811126c8:	1c45c83a 	sub	r2,r3,r17
811126cc:	1c400236 	bltu	r3,r17,811126d8 <_malloc_r+0x4a8>
811126d0:	00c003c4 	movi	r3,15
811126d4:	18800416 	blt	r3,r2,811126e8 <_malloc_r+0x4b8>
811126d8:	9009883a 	mov	r4,r18
811126dc:	1119b840 	call	81119b84 <__malloc_unlock>
811126e0:	0005883a 	mov	r2,zero
811126e4:	003f7b06 	br	811124d4 <__reset+0xfb0f24d4>
811126e8:	88c00054 	ori	r3,r17,1
811126ec:	80c00115 	stw	r3,4(r16)
811126f0:	8463883a 	add	r17,r16,r17
811126f4:	10800054 	ori	r2,r2,1
811126f8:	9c400215 	stw	r17,8(r19)
811126fc:	88800115 	stw	r2,4(r17)
81112700:	9009883a 	mov	r4,r18
81112704:	1119b840 	call	81119b84 <__malloc_unlock>
81112708:	80800204 	addi	r2,r16,8
8111270c:	003f7106 	br	811124d4 <__reset+0xfb0f24d4>
81112710:	00c00504 	movi	r3,20
81112714:	18804a2e 	bgeu	r3,r2,81112840 <_malloc_r+0x610>
81112718:	00c01504 	movi	r3,84
8111271c:	18806e36 	bltu	r3,r2,811128d8 <_malloc_r+0x6a8>
81112720:	8804d33a 	srli	r2,r17,12
81112724:	12001bc4 	addi	r8,r2,111
81112728:	11c01b84 	addi	r7,r2,110
8111272c:	4209883a 	add	r4,r8,r8
81112730:	003edd06 	br	811122a8 <__reset+0xfb0f22a8>
81112734:	3804d27a 	srli	r2,r7,9
81112738:	00c00104 	movi	r3,4
8111273c:	1880442e 	bgeu	r3,r2,81112850 <_malloc_r+0x620>
81112740:	00c00504 	movi	r3,20
81112744:	18808136 	bltu	r3,r2,8111294c <_malloc_r+0x71c>
81112748:	11401704 	addi	r5,r2,92
8111274c:	10c016c4 	addi	r3,r2,91
81112750:	294b883a 	add	r5,r5,r5
81112754:	294b883a 	add	r5,r5,r5
81112758:	294b883a 	add	r5,r5,r5
8111275c:	994b883a 	add	r5,r19,r5
81112760:	28800017 	ldw	r2,0(r5)
81112764:	01a044b4 	movhi	r6,33042
81112768:	297ffe04 	addi	r5,r5,-8
8111276c:	31813904 	addi	r6,r6,1252
81112770:	28806526 	beq	r5,r2,81112908 <_malloc_r+0x6d8>
81112774:	01bfff04 	movi	r6,-4
81112778:	10c00117 	ldw	r3,4(r2)
8111277c:	1986703a 	and	r3,r3,r6
81112780:	38c0022e 	bgeu	r7,r3,8111278c <_malloc_r+0x55c>
81112784:	10800217 	ldw	r2,8(r2)
81112788:	28bffb1e 	bne	r5,r2,81112778 <__reset+0xfb0f2778>
8111278c:	11400317 	ldw	r5,12(r2)
81112790:	98c00117 	ldw	r3,4(r19)
81112794:	81400315 	stw	r5,12(r16)
81112798:	80800215 	stw	r2,8(r16)
8111279c:	2c000215 	stw	r16,8(r5)
811127a0:	14000315 	stw	r16,12(r2)
811127a4:	003ef806 	br	81112388 <__reset+0xfb0f2388>
811127a8:	88c00054 	ori	r3,r17,1
811127ac:	80c00115 	stw	r3,4(r16)
811127b0:	8463883a 	add	r17,r16,r17
811127b4:	34400515 	stw	r17,20(r6)
811127b8:	34400415 	stw	r17,16(r6)
811127bc:	10c00054 	ori	r3,r2,1
811127c0:	8a000315 	stw	r8,12(r17)
811127c4:	8a000215 	stw	r8,8(r17)
811127c8:	88c00115 	stw	r3,4(r17)
811127cc:	88a3883a 	add	r17,r17,r2
811127d0:	88800015 	stw	r2,0(r17)
811127d4:	9009883a 	mov	r4,r18
811127d8:	1119b840 	call	81119b84 <__malloc_unlock>
811127dc:	80800204 	addi	r2,r16,8
811127e0:	003f3c06 	br	811124d4 <__reset+0xfb0f24d4>
811127e4:	30c00117 	ldw	r3,4(r6)
811127e8:	003ee706 	br	81112388 <__reset+0xfb0f2388>
811127ec:	5ac00044 	addi	r11,r11,1
811127f0:	588000cc 	andi	r2,r11,3
811127f4:	31800204 	addi	r6,r6,8
811127f8:	103efd1e 	bne	r2,zero,811123f0 <__reset+0xfb0f23f0>
811127fc:	00002406 	br	81112890 <_malloc_r+0x660>
81112800:	14000317 	ldw	r16,12(r2)
81112804:	143f251e 	bne	r2,r16,8111249c <__reset+0xfb0f249c>
81112808:	21000084 	addi	r4,r4,2
8111280c:	003ebc06 	br	81112300 <__reset+0xfb0f2300>
81112810:	8085883a 	add	r2,r16,r2
81112814:	10c00117 	ldw	r3,4(r2)
81112818:	81000317 	ldw	r4,12(r16)
8111281c:	81400217 	ldw	r5,8(r16)
81112820:	18c00054 	ori	r3,r3,1
81112824:	10c00115 	stw	r3,4(r2)
81112828:	29000315 	stw	r4,12(r5)
8111282c:	21400215 	stw	r5,8(r4)
81112830:	9009883a 	mov	r4,r18
81112834:	1119b840 	call	81119b84 <__malloc_unlock>
81112838:	80800204 	addi	r2,r16,8
8111283c:	003f2506 	br	811124d4 <__reset+0xfb0f24d4>
81112840:	12001704 	addi	r8,r2,92
81112844:	11c016c4 	addi	r7,r2,91
81112848:	4209883a 	add	r4,r8,r8
8111284c:	003e9606 	br	811122a8 <__reset+0xfb0f22a8>
81112850:	3804d1ba 	srli	r2,r7,6
81112854:	11400e44 	addi	r5,r2,57
81112858:	10c00e04 	addi	r3,r2,56
8111285c:	294b883a 	add	r5,r5,r5
81112860:	003fbc06 	br	81112754 <__reset+0xfb0f2754>
81112864:	84ff5926 	beq	r16,r19,811125cc <__reset+0xfb0f25cc>
81112868:	00a044b4 	movhi	r2,33042
8111286c:	10813904 	addi	r2,r2,1252
81112870:	14000217 	ldw	r16,8(r2)
81112874:	00bfff04 	movi	r2,-4
81112878:	80c00117 	ldw	r3,4(r16)
8111287c:	1886703a 	and	r3,r3,r2
81112880:	003f9106 	br	811126c8 <__reset+0xfb0f26c8>
81112884:	60800217 	ldw	r2,8(r12)
81112888:	213fffc4 	addi	r4,r4,-1
8111288c:	1300651e 	bne	r2,r12,81112a24 <_malloc_r+0x7f4>
81112890:	208000cc 	andi	r2,r4,3
81112894:	633ffe04 	addi	r12,r12,-8
81112898:	103ffa1e 	bne	r2,zero,81112884 <__reset+0xfb0f2884>
8111289c:	98800117 	ldw	r2,4(r19)
811128a0:	0146303a 	nor	r3,zero,r5
811128a4:	1884703a 	and	r2,r3,r2
811128a8:	98800115 	stw	r2,4(r19)
811128ac:	294b883a 	add	r5,r5,r5
811128b0:	117f2836 	bltu	r2,r5,81112554 <__reset+0xfb0f2554>
811128b4:	283f2726 	beq	r5,zero,81112554 <__reset+0xfb0f2554>
811128b8:	2886703a 	and	r3,r5,r2
811128bc:	5809883a 	mov	r4,r11
811128c0:	183ec31e 	bne	r3,zero,811123d0 <__reset+0xfb0f23d0>
811128c4:	294b883a 	add	r5,r5,r5
811128c8:	2886703a 	and	r3,r5,r2
811128cc:	21000104 	addi	r4,r4,4
811128d0:	183ffc26 	beq	r3,zero,811128c4 <__reset+0xfb0f28c4>
811128d4:	003ebe06 	br	811123d0 <__reset+0xfb0f23d0>
811128d8:	00c05504 	movi	r3,340
811128dc:	18801236 	bltu	r3,r2,81112928 <_malloc_r+0x6f8>
811128e0:	8804d3fa 	srli	r2,r17,15
811128e4:	12001e04 	addi	r8,r2,120
811128e8:	11c01dc4 	addi	r7,r2,119
811128ec:	4209883a 	add	r4,r8,r8
811128f0:	003e6d06 	br	811122a8 <__reset+0xfb0f22a8>
811128f4:	00c40004 	movi	r3,4096
811128f8:	003f4606 	br	81112614 <__reset+0xfb0f2614>
811128fc:	00800044 	movi	r2,1
81112900:	a0800115 	stw	r2,4(r20)
81112904:	003f7406 	br	811126d8 <__reset+0xfb0f26d8>
81112908:	1805d0ba 	srai	r2,r3,2
8111290c:	01c00044 	movi	r7,1
81112910:	30c00117 	ldw	r3,4(r6)
81112914:	388e983a 	sll	r7,r7,r2
81112918:	2805883a 	mov	r2,r5
8111291c:	38c6b03a 	or	r3,r7,r3
81112920:	30c00115 	stw	r3,4(r6)
81112924:	003f9b06 	br	81112794 <__reset+0xfb0f2794>
81112928:	00c15504 	movi	r3,1364
8111292c:	18801a36 	bltu	r3,r2,81112998 <_malloc_r+0x768>
81112930:	8804d4ba 	srli	r2,r17,18
81112934:	12001f44 	addi	r8,r2,125
81112938:	11c01f04 	addi	r7,r2,124
8111293c:	4209883a 	add	r4,r8,r8
81112940:	003e5906 	br	811122a8 <__reset+0xfb0f22a8>
81112944:	ad400404 	addi	r21,r21,16
81112948:	003f1706 	br	811125a8 <__reset+0xfb0f25a8>
8111294c:	00c01504 	movi	r3,84
81112950:	18802336 	bltu	r3,r2,811129e0 <_malloc_r+0x7b0>
81112954:	3804d33a 	srli	r2,r7,12
81112958:	11401bc4 	addi	r5,r2,111
8111295c:	10c01b84 	addi	r3,r2,110
81112960:	294b883a 	add	r5,r5,r5
81112964:	003f7b06 	br	81112754 <__reset+0xfb0f2754>
81112968:	9c000217 	ldw	r16,8(r19)
8111296c:	00bfff04 	movi	r2,-4
81112970:	80c00117 	ldw	r3,4(r16)
81112974:	1886703a 	and	r3,r3,r2
81112978:	003f5306 	br	811126c8 <__reset+0xfb0f26c8>
8111297c:	3083ffcc 	andi	r2,r6,4095
81112980:	103f181e 	bne	r2,zero,811125e4 <__reset+0xfb0f25e4>
81112984:	99000217 	ldw	r4,8(r19)
81112988:	b545883a 	add	r2,r22,r21
8111298c:	10800054 	ori	r2,r2,1
81112990:	20800115 	stw	r2,4(r4)
81112994:	003f3e06 	br	81112690 <__reset+0xfb0f2690>
81112998:	01003f84 	movi	r4,254
8111299c:	02001fc4 	movi	r8,127
811129a0:	01c01f84 	movi	r7,126
811129a4:	003e4006 	br	811122a8 <__reset+0xfb0f22a8>
811129a8:	00a044b4 	movhi	r2,33042
811129ac:	10873604 	addi	r2,r2,7384
811129b0:	15000015 	stw	r20,0(r2)
811129b4:	003f1106 	br	811125fc <__reset+0xfb0f25fc>
811129b8:	00800044 	movi	r2,1
811129bc:	002b883a 	mov	r21,zero
811129c0:	003f1f06 	br	81112640 <__reset+0xfb0f2640>
811129c4:	81400204 	addi	r5,r16,8
811129c8:	9009883a 	mov	r4,r18
811129cc:	11116440 	call	81111644 <_free_r>
811129d0:	00a044b4 	movhi	r2,33042
811129d4:	10877404 	addi	r2,r2,7632
811129d8:	10c00017 	ldw	r3,0(r2)
811129dc:	003f2c06 	br	81112690 <__reset+0xfb0f2690>
811129e0:	00c05504 	movi	r3,340
811129e4:	18800536 	bltu	r3,r2,811129fc <_malloc_r+0x7cc>
811129e8:	3804d3fa 	srli	r2,r7,15
811129ec:	11401e04 	addi	r5,r2,120
811129f0:	10c01dc4 	addi	r3,r2,119
811129f4:	294b883a 	add	r5,r5,r5
811129f8:	003f5606 	br	81112754 <__reset+0xfb0f2754>
811129fc:	00c15504 	movi	r3,1364
81112a00:	18800536 	bltu	r3,r2,81112a18 <_malloc_r+0x7e8>
81112a04:	3804d4ba 	srli	r2,r7,18
81112a08:	11401f44 	addi	r5,r2,125
81112a0c:	10c01f04 	addi	r3,r2,124
81112a10:	294b883a 	add	r5,r5,r5
81112a14:	003f4f06 	br	81112754 <__reset+0xfb0f2754>
81112a18:	01403f84 	movi	r5,254
81112a1c:	00c01f84 	movi	r3,126
81112a20:	003f4c06 	br	81112754 <__reset+0xfb0f2754>
81112a24:	98800117 	ldw	r2,4(r19)
81112a28:	003fa006 	br	811128ac <__reset+0xfb0f28ac>
81112a2c:	8808d0fa 	srli	r4,r17,3
81112a30:	20800044 	addi	r2,r4,1
81112a34:	1085883a 	add	r2,r2,r2
81112a38:	003e9006 	br	8111247c <__reset+0xfb0f247c>

81112a3c <memchr>:
81112a3c:	208000cc 	andi	r2,r4,3
81112a40:	280f883a 	mov	r7,r5
81112a44:	10003426 	beq	r2,zero,81112b18 <memchr+0xdc>
81112a48:	30bfffc4 	addi	r2,r6,-1
81112a4c:	30001a26 	beq	r6,zero,81112ab8 <memchr+0x7c>
81112a50:	20c00003 	ldbu	r3,0(r4)
81112a54:	29803fcc 	andi	r6,r5,255
81112a58:	30c0051e 	bne	r6,r3,81112a70 <memchr+0x34>
81112a5c:	00001806 	br	81112ac0 <memchr+0x84>
81112a60:	10001526 	beq	r2,zero,81112ab8 <memchr+0x7c>
81112a64:	20c00003 	ldbu	r3,0(r4)
81112a68:	10bfffc4 	addi	r2,r2,-1
81112a6c:	30c01426 	beq	r6,r3,81112ac0 <memchr+0x84>
81112a70:	21000044 	addi	r4,r4,1
81112a74:	20c000cc 	andi	r3,r4,3
81112a78:	183ff91e 	bne	r3,zero,81112a60 <__reset+0xfb0f2a60>
81112a7c:	020000c4 	movi	r8,3
81112a80:	40801136 	bltu	r8,r2,81112ac8 <memchr+0x8c>
81112a84:	10000c26 	beq	r2,zero,81112ab8 <memchr+0x7c>
81112a88:	20c00003 	ldbu	r3,0(r4)
81112a8c:	29403fcc 	andi	r5,r5,255
81112a90:	28c00b26 	beq	r5,r3,81112ac0 <memchr+0x84>
81112a94:	20c00044 	addi	r3,r4,1
81112a98:	39803fcc 	andi	r6,r7,255
81112a9c:	2089883a 	add	r4,r4,r2
81112aa0:	00000306 	br	81112ab0 <memchr+0x74>
81112aa4:	18c00044 	addi	r3,r3,1
81112aa8:	197fffc3 	ldbu	r5,-1(r3)
81112aac:	31400526 	beq	r6,r5,81112ac4 <memchr+0x88>
81112ab0:	1805883a 	mov	r2,r3
81112ab4:	20fffb1e 	bne	r4,r3,81112aa4 <__reset+0xfb0f2aa4>
81112ab8:	0005883a 	mov	r2,zero
81112abc:	f800283a 	ret
81112ac0:	2005883a 	mov	r2,r4
81112ac4:	f800283a 	ret
81112ac8:	28c03fcc 	andi	r3,r5,255
81112acc:	1812923a 	slli	r9,r3,8
81112ad0:	02ffbff4 	movhi	r11,65279
81112ad4:	02a02074 	movhi	r10,32897
81112ad8:	48d2b03a 	or	r9,r9,r3
81112adc:	4806943a 	slli	r3,r9,16
81112ae0:	5affbfc4 	addi	r11,r11,-257
81112ae4:	52a02004 	addi	r10,r10,-32640
81112ae8:	48d2b03a 	or	r9,r9,r3
81112aec:	20c00017 	ldw	r3,0(r4)
81112af0:	48c6f03a 	xor	r3,r9,r3
81112af4:	1acd883a 	add	r6,r3,r11
81112af8:	00c6303a 	nor	r3,zero,r3
81112afc:	30c6703a 	and	r3,r6,r3
81112b00:	1a86703a 	and	r3,r3,r10
81112b04:	183fe01e 	bne	r3,zero,81112a88 <__reset+0xfb0f2a88>
81112b08:	10bfff04 	addi	r2,r2,-4
81112b0c:	21000104 	addi	r4,r4,4
81112b10:	40bff636 	bltu	r8,r2,81112aec <__reset+0xfb0f2aec>
81112b14:	003fdb06 	br	81112a84 <__reset+0xfb0f2a84>
81112b18:	3005883a 	mov	r2,r6
81112b1c:	003fd706 	br	81112a7c <__reset+0xfb0f2a7c>

81112b20 <memmove>:
81112b20:	2005883a 	mov	r2,r4
81112b24:	29000b2e 	bgeu	r5,r4,81112b54 <memmove+0x34>
81112b28:	298f883a 	add	r7,r5,r6
81112b2c:	21c0092e 	bgeu	r4,r7,81112b54 <memmove+0x34>
81112b30:	2187883a 	add	r3,r4,r6
81112b34:	198bc83a 	sub	r5,r3,r6
81112b38:	30004826 	beq	r6,zero,81112c5c <memmove+0x13c>
81112b3c:	39ffffc4 	addi	r7,r7,-1
81112b40:	39000003 	ldbu	r4,0(r7)
81112b44:	18ffffc4 	addi	r3,r3,-1
81112b48:	19000005 	stb	r4,0(r3)
81112b4c:	28fffb1e 	bne	r5,r3,81112b3c <__reset+0xfb0f2b3c>
81112b50:	f800283a 	ret
81112b54:	00c003c4 	movi	r3,15
81112b58:	1980412e 	bgeu	r3,r6,81112c60 <memmove+0x140>
81112b5c:	2886b03a 	or	r3,r5,r2
81112b60:	18c000cc 	andi	r3,r3,3
81112b64:	1800401e 	bne	r3,zero,81112c68 <memmove+0x148>
81112b68:	33fffc04 	addi	r15,r6,-16
81112b6c:	781ed13a 	srli	r15,r15,4
81112b70:	28c00104 	addi	r3,r5,4
81112b74:	13400104 	addi	r13,r2,4
81112b78:	781c913a 	slli	r14,r15,4
81112b7c:	2b000204 	addi	r12,r5,8
81112b80:	12c00204 	addi	r11,r2,8
81112b84:	73800504 	addi	r14,r14,20
81112b88:	2a800304 	addi	r10,r5,12
81112b8c:	12400304 	addi	r9,r2,12
81112b90:	2b9d883a 	add	r14,r5,r14
81112b94:	2811883a 	mov	r8,r5
81112b98:	100f883a 	mov	r7,r2
81112b9c:	41000017 	ldw	r4,0(r8)
81112ba0:	39c00404 	addi	r7,r7,16
81112ba4:	18c00404 	addi	r3,r3,16
81112ba8:	393ffc15 	stw	r4,-16(r7)
81112bac:	193ffc17 	ldw	r4,-16(r3)
81112bb0:	6b400404 	addi	r13,r13,16
81112bb4:	5ac00404 	addi	r11,r11,16
81112bb8:	693ffc15 	stw	r4,-16(r13)
81112bbc:	61000017 	ldw	r4,0(r12)
81112bc0:	4a400404 	addi	r9,r9,16
81112bc4:	42000404 	addi	r8,r8,16
81112bc8:	593ffc15 	stw	r4,-16(r11)
81112bcc:	51000017 	ldw	r4,0(r10)
81112bd0:	63000404 	addi	r12,r12,16
81112bd4:	52800404 	addi	r10,r10,16
81112bd8:	493ffc15 	stw	r4,-16(r9)
81112bdc:	1bbfef1e 	bne	r3,r14,81112b9c <__reset+0xfb0f2b9c>
81112be0:	79000044 	addi	r4,r15,1
81112be4:	2008913a 	slli	r4,r4,4
81112be8:	328003cc 	andi	r10,r6,15
81112bec:	02c000c4 	movi	r11,3
81112bf0:	1107883a 	add	r3,r2,r4
81112bf4:	290b883a 	add	r5,r5,r4
81112bf8:	5a801e2e 	bgeu	r11,r10,81112c74 <memmove+0x154>
81112bfc:	1813883a 	mov	r9,r3
81112c00:	2811883a 	mov	r8,r5
81112c04:	500f883a 	mov	r7,r10
81112c08:	41000017 	ldw	r4,0(r8)
81112c0c:	4a400104 	addi	r9,r9,4
81112c10:	39ffff04 	addi	r7,r7,-4
81112c14:	493fff15 	stw	r4,-4(r9)
81112c18:	42000104 	addi	r8,r8,4
81112c1c:	59fffa36 	bltu	r11,r7,81112c08 <__reset+0xfb0f2c08>
81112c20:	513fff04 	addi	r4,r10,-4
81112c24:	2008d0ba 	srli	r4,r4,2
81112c28:	318000cc 	andi	r6,r6,3
81112c2c:	21000044 	addi	r4,r4,1
81112c30:	2109883a 	add	r4,r4,r4
81112c34:	2109883a 	add	r4,r4,r4
81112c38:	1907883a 	add	r3,r3,r4
81112c3c:	290b883a 	add	r5,r5,r4
81112c40:	30000b26 	beq	r6,zero,81112c70 <memmove+0x150>
81112c44:	198d883a 	add	r6,r3,r6
81112c48:	29c00003 	ldbu	r7,0(r5)
81112c4c:	18c00044 	addi	r3,r3,1
81112c50:	29400044 	addi	r5,r5,1
81112c54:	19ffffc5 	stb	r7,-1(r3)
81112c58:	19bffb1e 	bne	r3,r6,81112c48 <__reset+0xfb0f2c48>
81112c5c:	f800283a 	ret
81112c60:	1007883a 	mov	r3,r2
81112c64:	003ff606 	br	81112c40 <__reset+0xfb0f2c40>
81112c68:	1007883a 	mov	r3,r2
81112c6c:	003ff506 	br	81112c44 <__reset+0xfb0f2c44>
81112c70:	f800283a 	ret
81112c74:	500d883a 	mov	r6,r10
81112c78:	003ff106 	br	81112c40 <__reset+0xfb0f2c40>

81112c7c <memset>:
81112c7c:	20c000cc 	andi	r3,r4,3
81112c80:	2005883a 	mov	r2,r4
81112c84:	18004426 	beq	r3,zero,81112d98 <memset+0x11c>
81112c88:	31ffffc4 	addi	r7,r6,-1
81112c8c:	30004026 	beq	r6,zero,81112d90 <memset+0x114>
81112c90:	2813883a 	mov	r9,r5
81112c94:	200d883a 	mov	r6,r4
81112c98:	2007883a 	mov	r3,r4
81112c9c:	00000406 	br	81112cb0 <memset+0x34>
81112ca0:	3a3fffc4 	addi	r8,r7,-1
81112ca4:	31800044 	addi	r6,r6,1
81112ca8:	38003926 	beq	r7,zero,81112d90 <memset+0x114>
81112cac:	400f883a 	mov	r7,r8
81112cb0:	18c00044 	addi	r3,r3,1
81112cb4:	32400005 	stb	r9,0(r6)
81112cb8:	1a0000cc 	andi	r8,r3,3
81112cbc:	403ff81e 	bne	r8,zero,81112ca0 <__reset+0xfb0f2ca0>
81112cc0:	010000c4 	movi	r4,3
81112cc4:	21c02d2e 	bgeu	r4,r7,81112d7c <memset+0x100>
81112cc8:	29003fcc 	andi	r4,r5,255
81112ccc:	200c923a 	slli	r6,r4,8
81112cd0:	3108b03a 	or	r4,r6,r4
81112cd4:	200c943a 	slli	r6,r4,16
81112cd8:	218cb03a 	or	r6,r4,r6
81112cdc:	010003c4 	movi	r4,15
81112ce0:	21c0182e 	bgeu	r4,r7,81112d44 <memset+0xc8>
81112ce4:	3b3ffc04 	addi	r12,r7,-16
81112ce8:	6018d13a 	srli	r12,r12,4
81112cec:	1a000104 	addi	r8,r3,4
81112cf0:	1ac00204 	addi	r11,r3,8
81112cf4:	6008913a 	slli	r4,r12,4
81112cf8:	1a800304 	addi	r10,r3,12
81112cfc:	1813883a 	mov	r9,r3
81112d00:	21000504 	addi	r4,r4,20
81112d04:	1909883a 	add	r4,r3,r4
81112d08:	49800015 	stw	r6,0(r9)
81112d0c:	41800015 	stw	r6,0(r8)
81112d10:	59800015 	stw	r6,0(r11)
81112d14:	51800015 	stw	r6,0(r10)
81112d18:	42000404 	addi	r8,r8,16
81112d1c:	4a400404 	addi	r9,r9,16
81112d20:	5ac00404 	addi	r11,r11,16
81112d24:	52800404 	addi	r10,r10,16
81112d28:	413ff71e 	bne	r8,r4,81112d08 <__reset+0xfb0f2d08>
81112d2c:	63000044 	addi	r12,r12,1
81112d30:	6018913a 	slli	r12,r12,4
81112d34:	39c003cc 	andi	r7,r7,15
81112d38:	010000c4 	movi	r4,3
81112d3c:	1b07883a 	add	r3,r3,r12
81112d40:	21c00e2e 	bgeu	r4,r7,81112d7c <memset+0x100>
81112d44:	1813883a 	mov	r9,r3
81112d48:	3811883a 	mov	r8,r7
81112d4c:	010000c4 	movi	r4,3
81112d50:	49800015 	stw	r6,0(r9)
81112d54:	423fff04 	addi	r8,r8,-4
81112d58:	4a400104 	addi	r9,r9,4
81112d5c:	223ffc36 	bltu	r4,r8,81112d50 <__reset+0xfb0f2d50>
81112d60:	393fff04 	addi	r4,r7,-4
81112d64:	2008d0ba 	srli	r4,r4,2
81112d68:	39c000cc 	andi	r7,r7,3
81112d6c:	21000044 	addi	r4,r4,1
81112d70:	2109883a 	add	r4,r4,r4
81112d74:	2109883a 	add	r4,r4,r4
81112d78:	1907883a 	add	r3,r3,r4
81112d7c:	38000526 	beq	r7,zero,81112d94 <memset+0x118>
81112d80:	19cf883a 	add	r7,r3,r7
81112d84:	19400005 	stb	r5,0(r3)
81112d88:	18c00044 	addi	r3,r3,1
81112d8c:	38fffd1e 	bne	r7,r3,81112d84 <__reset+0xfb0f2d84>
81112d90:	f800283a 	ret
81112d94:	f800283a 	ret
81112d98:	2007883a 	mov	r3,r4
81112d9c:	300f883a 	mov	r7,r6
81112da0:	003fc706 	br	81112cc0 <__reset+0xfb0f2cc0>

81112da4 <_Balloc>:
81112da4:	20801317 	ldw	r2,76(r4)
81112da8:	defffc04 	addi	sp,sp,-16
81112dac:	dc400115 	stw	r17,4(sp)
81112db0:	dc000015 	stw	r16,0(sp)
81112db4:	dfc00315 	stw	ra,12(sp)
81112db8:	dc800215 	stw	r18,8(sp)
81112dbc:	2023883a 	mov	r17,r4
81112dc0:	2821883a 	mov	r16,r5
81112dc4:	10000f26 	beq	r2,zero,81112e04 <_Balloc+0x60>
81112dc8:	8407883a 	add	r3,r16,r16
81112dcc:	18c7883a 	add	r3,r3,r3
81112dd0:	10c7883a 	add	r3,r2,r3
81112dd4:	18800017 	ldw	r2,0(r3)
81112dd8:	10001126 	beq	r2,zero,81112e20 <_Balloc+0x7c>
81112ddc:	11000017 	ldw	r4,0(r2)
81112de0:	19000015 	stw	r4,0(r3)
81112de4:	10000415 	stw	zero,16(r2)
81112de8:	10000315 	stw	zero,12(r2)
81112dec:	dfc00317 	ldw	ra,12(sp)
81112df0:	dc800217 	ldw	r18,8(sp)
81112df4:	dc400117 	ldw	r17,4(sp)
81112df8:	dc000017 	ldw	r16,0(sp)
81112dfc:	dec00404 	addi	sp,sp,16
81112e00:	f800283a 	ret
81112e04:	01800844 	movi	r6,33
81112e08:	01400104 	movi	r5,4
81112e0c:	11161900 	call	81116190 <_calloc_r>
81112e10:	88801315 	stw	r2,76(r17)
81112e14:	103fec1e 	bne	r2,zero,81112dc8 <__reset+0xfb0f2dc8>
81112e18:	0005883a 	mov	r2,zero
81112e1c:	003ff306 	br	81112dec <__reset+0xfb0f2dec>
81112e20:	01400044 	movi	r5,1
81112e24:	2c24983a 	sll	r18,r5,r16
81112e28:	8809883a 	mov	r4,r17
81112e2c:	91800144 	addi	r6,r18,5
81112e30:	318d883a 	add	r6,r6,r6
81112e34:	318d883a 	add	r6,r6,r6
81112e38:	11161900 	call	81116190 <_calloc_r>
81112e3c:	103ff626 	beq	r2,zero,81112e18 <__reset+0xfb0f2e18>
81112e40:	14000115 	stw	r16,4(r2)
81112e44:	14800215 	stw	r18,8(r2)
81112e48:	003fe606 	br	81112de4 <__reset+0xfb0f2de4>

81112e4c <_Bfree>:
81112e4c:	28000826 	beq	r5,zero,81112e70 <_Bfree+0x24>
81112e50:	28c00117 	ldw	r3,4(r5)
81112e54:	20801317 	ldw	r2,76(r4)
81112e58:	18c7883a 	add	r3,r3,r3
81112e5c:	18c7883a 	add	r3,r3,r3
81112e60:	10c5883a 	add	r2,r2,r3
81112e64:	10c00017 	ldw	r3,0(r2)
81112e68:	28c00015 	stw	r3,0(r5)
81112e6c:	11400015 	stw	r5,0(r2)
81112e70:	f800283a 	ret

81112e74 <__multadd>:
81112e74:	defffa04 	addi	sp,sp,-24
81112e78:	dc800315 	stw	r18,12(sp)
81112e7c:	dc400215 	stw	r17,8(sp)
81112e80:	dc000115 	stw	r16,4(sp)
81112e84:	2823883a 	mov	r17,r5
81112e88:	2c000417 	ldw	r16,16(r5)
81112e8c:	dfc00515 	stw	ra,20(sp)
81112e90:	dcc00415 	stw	r19,16(sp)
81112e94:	2025883a 	mov	r18,r4
81112e98:	29400504 	addi	r5,r5,20
81112e9c:	0011883a 	mov	r8,zero
81112ea0:	28c00017 	ldw	r3,0(r5)
81112ea4:	29400104 	addi	r5,r5,4
81112ea8:	42000044 	addi	r8,r8,1
81112eac:	18bfffcc 	andi	r2,r3,65535
81112eb0:	1185383a 	mul	r2,r2,r6
81112eb4:	1806d43a 	srli	r3,r3,16
81112eb8:	11cf883a 	add	r7,r2,r7
81112ebc:	3808d43a 	srli	r4,r7,16
81112ec0:	1987383a 	mul	r3,r3,r6
81112ec4:	38bfffcc 	andi	r2,r7,65535
81112ec8:	1907883a 	add	r3,r3,r4
81112ecc:	1808943a 	slli	r4,r3,16
81112ed0:	180ed43a 	srli	r7,r3,16
81112ed4:	2085883a 	add	r2,r4,r2
81112ed8:	28bfff15 	stw	r2,-4(r5)
81112edc:	443ff016 	blt	r8,r16,81112ea0 <__reset+0xfb0f2ea0>
81112ee0:	38000926 	beq	r7,zero,81112f08 <__multadd+0x94>
81112ee4:	88800217 	ldw	r2,8(r17)
81112ee8:	80800f0e 	bge	r16,r2,81112f28 <__multadd+0xb4>
81112eec:	80800144 	addi	r2,r16,5
81112ef0:	1085883a 	add	r2,r2,r2
81112ef4:	1085883a 	add	r2,r2,r2
81112ef8:	8885883a 	add	r2,r17,r2
81112efc:	11c00015 	stw	r7,0(r2)
81112f00:	84000044 	addi	r16,r16,1
81112f04:	8c000415 	stw	r16,16(r17)
81112f08:	8805883a 	mov	r2,r17
81112f0c:	dfc00517 	ldw	ra,20(sp)
81112f10:	dcc00417 	ldw	r19,16(sp)
81112f14:	dc800317 	ldw	r18,12(sp)
81112f18:	dc400217 	ldw	r17,8(sp)
81112f1c:	dc000117 	ldw	r16,4(sp)
81112f20:	dec00604 	addi	sp,sp,24
81112f24:	f800283a 	ret
81112f28:	89400117 	ldw	r5,4(r17)
81112f2c:	9009883a 	mov	r4,r18
81112f30:	d9c00015 	stw	r7,0(sp)
81112f34:	29400044 	addi	r5,r5,1
81112f38:	1112da40 	call	81112da4 <_Balloc>
81112f3c:	89800417 	ldw	r6,16(r17)
81112f40:	89400304 	addi	r5,r17,12
81112f44:	11000304 	addi	r4,r2,12
81112f48:	31800084 	addi	r6,r6,2
81112f4c:	318d883a 	add	r6,r6,r6
81112f50:	318d883a 	add	r6,r6,r6
81112f54:	1027883a 	mov	r19,r2
81112f58:	110ce640 	call	8110ce64 <memcpy>
81112f5c:	d9c00017 	ldw	r7,0(sp)
81112f60:	88000a26 	beq	r17,zero,81112f8c <__multadd+0x118>
81112f64:	88c00117 	ldw	r3,4(r17)
81112f68:	90801317 	ldw	r2,76(r18)
81112f6c:	18c7883a 	add	r3,r3,r3
81112f70:	18c7883a 	add	r3,r3,r3
81112f74:	10c5883a 	add	r2,r2,r3
81112f78:	10c00017 	ldw	r3,0(r2)
81112f7c:	88c00015 	stw	r3,0(r17)
81112f80:	14400015 	stw	r17,0(r2)
81112f84:	9823883a 	mov	r17,r19
81112f88:	003fd806 	br	81112eec <__reset+0xfb0f2eec>
81112f8c:	9823883a 	mov	r17,r19
81112f90:	003fd606 	br	81112eec <__reset+0xfb0f2eec>

81112f94 <__s2b>:
81112f94:	defff904 	addi	sp,sp,-28
81112f98:	dc400115 	stw	r17,4(sp)
81112f9c:	dc000015 	stw	r16,0(sp)
81112fa0:	2023883a 	mov	r17,r4
81112fa4:	2821883a 	mov	r16,r5
81112fa8:	39000204 	addi	r4,r7,8
81112fac:	01400244 	movi	r5,9
81112fb0:	dcc00315 	stw	r19,12(sp)
81112fb4:	dc800215 	stw	r18,8(sp)
81112fb8:	dfc00615 	stw	ra,24(sp)
81112fbc:	dd400515 	stw	r21,20(sp)
81112fc0:	dd000415 	stw	r20,16(sp)
81112fc4:	3825883a 	mov	r18,r7
81112fc8:	3027883a 	mov	r19,r6
81112fcc:	11173680 	call	81117368 <__divsi3>
81112fd0:	00c00044 	movi	r3,1
81112fd4:	000b883a 	mov	r5,zero
81112fd8:	1880030e 	bge	r3,r2,81112fe8 <__s2b+0x54>
81112fdc:	18c7883a 	add	r3,r3,r3
81112fe0:	29400044 	addi	r5,r5,1
81112fe4:	18bffd16 	blt	r3,r2,81112fdc <__reset+0xfb0f2fdc>
81112fe8:	8809883a 	mov	r4,r17
81112fec:	1112da40 	call	81112da4 <_Balloc>
81112ff0:	d8c00717 	ldw	r3,28(sp)
81112ff4:	10c00515 	stw	r3,20(r2)
81112ff8:	00c00044 	movi	r3,1
81112ffc:	10c00415 	stw	r3,16(r2)
81113000:	00c00244 	movi	r3,9
81113004:	1cc0210e 	bge	r3,r19,8111308c <__s2b+0xf8>
81113008:	80eb883a 	add	r21,r16,r3
8111300c:	a829883a 	mov	r20,r21
81113010:	84e1883a 	add	r16,r16,r19
81113014:	a1c00007 	ldb	r7,0(r20)
81113018:	01800284 	movi	r6,10
8111301c:	a5000044 	addi	r20,r20,1
81113020:	100b883a 	mov	r5,r2
81113024:	39fff404 	addi	r7,r7,-48
81113028:	8809883a 	mov	r4,r17
8111302c:	1112e740 	call	81112e74 <__multadd>
81113030:	a43ff81e 	bne	r20,r16,81113014 <__reset+0xfb0f3014>
81113034:	ace1883a 	add	r16,r21,r19
81113038:	843ffe04 	addi	r16,r16,-8
8111303c:	9c800a0e 	bge	r19,r18,81113068 <__s2b+0xd4>
81113040:	94e5c83a 	sub	r18,r18,r19
81113044:	84a5883a 	add	r18,r16,r18
81113048:	81c00007 	ldb	r7,0(r16)
8111304c:	01800284 	movi	r6,10
81113050:	84000044 	addi	r16,r16,1
81113054:	100b883a 	mov	r5,r2
81113058:	39fff404 	addi	r7,r7,-48
8111305c:	8809883a 	mov	r4,r17
81113060:	1112e740 	call	81112e74 <__multadd>
81113064:	84bff81e 	bne	r16,r18,81113048 <__reset+0xfb0f3048>
81113068:	dfc00617 	ldw	ra,24(sp)
8111306c:	dd400517 	ldw	r21,20(sp)
81113070:	dd000417 	ldw	r20,16(sp)
81113074:	dcc00317 	ldw	r19,12(sp)
81113078:	dc800217 	ldw	r18,8(sp)
8111307c:	dc400117 	ldw	r17,4(sp)
81113080:	dc000017 	ldw	r16,0(sp)
81113084:	dec00704 	addi	sp,sp,28
81113088:	f800283a 	ret
8111308c:	84000284 	addi	r16,r16,10
81113090:	1827883a 	mov	r19,r3
81113094:	003fe906 	br	8111303c <__reset+0xfb0f303c>

81113098 <__hi0bits>:
81113098:	20bfffec 	andhi	r2,r4,65535
8111309c:	1000141e 	bne	r2,zero,811130f0 <__hi0bits+0x58>
811130a0:	2008943a 	slli	r4,r4,16
811130a4:	00800404 	movi	r2,16
811130a8:	20ffc02c 	andhi	r3,r4,65280
811130ac:	1800021e 	bne	r3,zero,811130b8 <__hi0bits+0x20>
811130b0:	2008923a 	slli	r4,r4,8
811130b4:	10800204 	addi	r2,r2,8
811130b8:	20fc002c 	andhi	r3,r4,61440
811130bc:	1800021e 	bne	r3,zero,811130c8 <__hi0bits+0x30>
811130c0:	2008913a 	slli	r4,r4,4
811130c4:	10800104 	addi	r2,r2,4
811130c8:	20f0002c 	andhi	r3,r4,49152
811130cc:	1800031e 	bne	r3,zero,811130dc <__hi0bits+0x44>
811130d0:	2109883a 	add	r4,r4,r4
811130d4:	10800084 	addi	r2,r2,2
811130d8:	2109883a 	add	r4,r4,r4
811130dc:	20000316 	blt	r4,zero,811130ec <__hi0bits+0x54>
811130e0:	2110002c 	andhi	r4,r4,16384
811130e4:	2000041e 	bne	r4,zero,811130f8 <__hi0bits+0x60>
811130e8:	00800804 	movi	r2,32
811130ec:	f800283a 	ret
811130f0:	0005883a 	mov	r2,zero
811130f4:	003fec06 	br	811130a8 <__reset+0xfb0f30a8>
811130f8:	10800044 	addi	r2,r2,1
811130fc:	f800283a 	ret

81113100 <__lo0bits>:
81113100:	20c00017 	ldw	r3,0(r4)
81113104:	188001cc 	andi	r2,r3,7
81113108:	10000826 	beq	r2,zero,8111312c <__lo0bits+0x2c>
8111310c:	1880004c 	andi	r2,r3,1
81113110:	1000211e 	bne	r2,zero,81113198 <__lo0bits+0x98>
81113114:	1880008c 	andi	r2,r3,2
81113118:	1000211e 	bne	r2,zero,811131a0 <__lo0bits+0xa0>
8111311c:	1806d0ba 	srli	r3,r3,2
81113120:	00800084 	movi	r2,2
81113124:	20c00015 	stw	r3,0(r4)
81113128:	f800283a 	ret
8111312c:	18bfffcc 	andi	r2,r3,65535
81113130:	10001326 	beq	r2,zero,81113180 <__lo0bits+0x80>
81113134:	0005883a 	mov	r2,zero
81113138:	19403fcc 	andi	r5,r3,255
8111313c:	2800021e 	bne	r5,zero,81113148 <__lo0bits+0x48>
81113140:	1806d23a 	srli	r3,r3,8
81113144:	10800204 	addi	r2,r2,8
81113148:	194003cc 	andi	r5,r3,15
8111314c:	2800021e 	bne	r5,zero,81113158 <__lo0bits+0x58>
81113150:	1806d13a 	srli	r3,r3,4
81113154:	10800104 	addi	r2,r2,4
81113158:	194000cc 	andi	r5,r3,3
8111315c:	2800021e 	bne	r5,zero,81113168 <__lo0bits+0x68>
81113160:	1806d0ba 	srli	r3,r3,2
81113164:	10800084 	addi	r2,r2,2
81113168:	1940004c 	andi	r5,r3,1
8111316c:	2800081e 	bne	r5,zero,81113190 <__lo0bits+0x90>
81113170:	1806d07a 	srli	r3,r3,1
81113174:	1800051e 	bne	r3,zero,8111318c <__lo0bits+0x8c>
81113178:	00800804 	movi	r2,32
8111317c:	f800283a 	ret
81113180:	1806d43a 	srli	r3,r3,16
81113184:	00800404 	movi	r2,16
81113188:	003feb06 	br	81113138 <__reset+0xfb0f3138>
8111318c:	10800044 	addi	r2,r2,1
81113190:	20c00015 	stw	r3,0(r4)
81113194:	f800283a 	ret
81113198:	0005883a 	mov	r2,zero
8111319c:	f800283a 	ret
811131a0:	1806d07a 	srli	r3,r3,1
811131a4:	00800044 	movi	r2,1
811131a8:	20c00015 	stw	r3,0(r4)
811131ac:	f800283a 	ret

811131b0 <__i2b>:
811131b0:	defffd04 	addi	sp,sp,-12
811131b4:	dc000015 	stw	r16,0(sp)
811131b8:	04000044 	movi	r16,1
811131bc:	dc400115 	stw	r17,4(sp)
811131c0:	2823883a 	mov	r17,r5
811131c4:	800b883a 	mov	r5,r16
811131c8:	dfc00215 	stw	ra,8(sp)
811131cc:	1112da40 	call	81112da4 <_Balloc>
811131d0:	14400515 	stw	r17,20(r2)
811131d4:	14000415 	stw	r16,16(r2)
811131d8:	dfc00217 	ldw	ra,8(sp)
811131dc:	dc400117 	ldw	r17,4(sp)
811131e0:	dc000017 	ldw	r16,0(sp)
811131e4:	dec00304 	addi	sp,sp,12
811131e8:	f800283a 	ret

811131ec <__multiply>:
811131ec:	defffa04 	addi	sp,sp,-24
811131f0:	dcc00315 	stw	r19,12(sp)
811131f4:	dc800215 	stw	r18,8(sp)
811131f8:	34c00417 	ldw	r19,16(r6)
811131fc:	2c800417 	ldw	r18,16(r5)
81113200:	dd000415 	stw	r20,16(sp)
81113204:	dc400115 	stw	r17,4(sp)
81113208:	dfc00515 	stw	ra,20(sp)
8111320c:	dc000015 	stw	r16,0(sp)
81113210:	2829883a 	mov	r20,r5
81113214:	3023883a 	mov	r17,r6
81113218:	94c0050e 	bge	r18,r19,81113230 <__multiply+0x44>
8111321c:	9007883a 	mov	r3,r18
81113220:	3029883a 	mov	r20,r6
81113224:	9825883a 	mov	r18,r19
81113228:	2823883a 	mov	r17,r5
8111322c:	1827883a 	mov	r19,r3
81113230:	a0800217 	ldw	r2,8(r20)
81113234:	94e1883a 	add	r16,r18,r19
81113238:	a1400117 	ldw	r5,4(r20)
8111323c:	1400010e 	bge	r2,r16,81113244 <__multiply+0x58>
81113240:	29400044 	addi	r5,r5,1
81113244:	1112da40 	call	81112da4 <_Balloc>
81113248:	8415883a 	add	r10,r16,r16
8111324c:	12c00504 	addi	r11,r2,20
81113250:	5295883a 	add	r10,r10,r10
81113254:	5a95883a 	add	r10,r11,r10
81113258:	5807883a 	mov	r3,r11
8111325c:	5a80032e 	bgeu	r11,r10,8111326c <__multiply+0x80>
81113260:	18000015 	stw	zero,0(r3)
81113264:	18c00104 	addi	r3,r3,4
81113268:	1abffd36 	bltu	r3,r10,81113260 <__reset+0xfb0f3260>
8111326c:	9ce7883a 	add	r19,r19,r19
81113270:	94a5883a 	add	r18,r18,r18
81113274:	89800504 	addi	r6,r17,20
81113278:	9ce7883a 	add	r19,r19,r19
8111327c:	a3400504 	addi	r13,r20,20
81113280:	94a5883a 	add	r18,r18,r18
81113284:	34d9883a 	add	r12,r6,r19
81113288:	6c93883a 	add	r9,r13,r18
8111328c:	3300422e 	bgeu	r6,r12,81113398 <__multiply+0x1ac>
81113290:	37c00017 	ldw	ra,0(r6)
81113294:	fbffffcc 	andi	r15,ra,65535
81113298:	78001b26 	beq	r15,zero,81113308 <__multiply+0x11c>
8111329c:	5811883a 	mov	r8,r11
811132a0:	681d883a 	mov	r14,r13
811132a4:	000f883a 	mov	r7,zero
811132a8:	71000017 	ldw	r4,0(r14)
811132ac:	40c00017 	ldw	r3,0(r8)
811132b0:	73800104 	addi	r14,r14,4
811132b4:	217fffcc 	andi	r5,r4,65535
811132b8:	2bcb383a 	mul	r5,r5,r15
811132bc:	2008d43a 	srli	r4,r4,16
811132c0:	1c7fffcc 	andi	r17,r3,65535
811132c4:	2c4b883a 	add	r5,r5,r17
811132c8:	29cb883a 	add	r5,r5,r7
811132cc:	23c9383a 	mul	r4,r4,r15
811132d0:	1806d43a 	srli	r3,r3,16
811132d4:	280ed43a 	srli	r7,r5,16
811132d8:	297fffcc 	andi	r5,r5,65535
811132dc:	20c7883a 	add	r3,r4,r3
811132e0:	19c7883a 	add	r3,r3,r7
811132e4:	1808943a 	slli	r4,r3,16
811132e8:	4023883a 	mov	r17,r8
811132ec:	180ed43a 	srli	r7,r3,16
811132f0:	214ab03a 	or	r5,r4,r5
811132f4:	41400015 	stw	r5,0(r8)
811132f8:	42000104 	addi	r8,r8,4
811132fc:	727fea36 	bltu	r14,r9,811132a8 <__reset+0xfb0f32a8>
81113300:	89c00115 	stw	r7,4(r17)
81113304:	37c00017 	ldw	ra,0(r6)
81113308:	f83ed43a 	srli	ra,ra,16
8111330c:	f8001f26 	beq	ra,zero,8111338c <__multiply+0x1a0>
81113310:	58c00017 	ldw	r3,0(r11)
81113314:	681d883a 	mov	r14,r13
81113318:	581f883a 	mov	r15,r11
8111331c:	1811883a 	mov	r8,r3
81113320:	5825883a 	mov	r18,r11
81113324:	000f883a 	mov	r7,zero
81113328:	00000106 	br	81113330 <__multiply+0x144>
8111332c:	8825883a 	mov	r18,r17
81113330:	7140000b 	ldhu	r5,0(r14)
81113334:	4010d43a 	srli	r8,r8,16
81113338:	193fffcc 	andi	r4,r3,65535
8111333c:	2fcb383a 	mul	r5,r5,ra
81113340:	7bc00104 	addi	r15,r15,4
81113344:	73800104 	addi	r14,r14,4
81113348:	2a0b883a 	add	r5,r5,r8
8111334c:	29cb883a 	add	r5,r5,r7
81113350:	2806943a 	slli	r3,r5,16
81113354:	94400104 	addi	r17,r18,4
81113358:	280ad43a 	srli	r5,r5,16
8111335c:	1908b03a 	or	r4,r3,r4
81113360:	793fff15 	stw	r4,-4(r15)
81113364:	70ffff17 	ldw	r3,-4(r14)
81113368:	8a000017 	ldw	r8,0(r17)
8111336c:	1806d43a 	srli	r3,r3,16
81113370:	413fffcc 	andi	r4,r8,65535
81113374:	1fc7383a 	mul	r3,r3,ra
81113378:	1907883a 	add	r3,r3,r4
8111337c:	1947883a 	add	r3,r3,r5
81113380:	180ed43a 	srli	r7,r3,16
81113384:	727fe936 	bltu	r14,r9,8111332c <__reset+0xfb0f332c>
81113388:	90c00115 	stw	r3,4(r18)
8111338c:	31800104 	addi	r6,r6,4
81113390:	5ac00104 	addi	r11,r11,4
81113394:	333fbe36 	bltu	r6,r12,81113290 <__reset+0xfb0f3290>
81113398:	0400090e 	bge	zero,r16,811133c0 <__multiply+0x1d4>
8111339c:	50ffff17 	ldw	r3,-4(r10)
811133a0:	52bfff04 	addi	r10,r10,-4
811133a4:	18000326 	beq	r3,zero,811133b4 <__multiply+0x1c8>
811133a8:	00000506 	br	811133c0 <__multiply+0x1d4>
811133ac:	50c00017 	ldw	r3,0(r10)
811133b0:	1800031e 	bne	r3,zero,811133c0 <__multiply+0x1d4>
811133b4:	843fffc4 	addi	r16,r16,-1
811133b8:	52bfff04 	addi	r10,r10,-4
811133bc:	803ffb1e 	bne	r16,zero,811133ac <__reset+0xfb0f33ac>
811133c0:	14000415 	stw	r16,16(r2)
811133c4:	dfc00517 	ldw	ra,20(sp)
811133c8:	dd000417 	ldw	r20,16(sp)
811133cc:	dcc00317 	ldw	r19,12(sp)
811133d0:	dc800217 	ldw	r18,8(sp)
811133d4:	dc400117 	ldw	r17,4(sp)
811133d8:	dc000017 	ldw	r16,0(sp)
811133dc:	dec00604 	addi	sp,sp,24
811133e0:	f800283a 	ret

811133e4 <__pow5mult>:
811133e4:	defffa04 	addi	sp,sp,-24
811133e8:	dcc00315 	stw	r19,12(sp)
811133ec:	dc000015 	stw	r16,0(sp)
811133f0:	dfc00515 	stw	ra,20(sp)
811133f4:	dd000415 	stw	r20,16(sp)
811133f8:	dc800215 	stw	r18,8(sp)
811133fc:	dc400115 	stw	r17,4(sp)
81113400:	308000cc 	andi	r2,r6,3
81113404:	3021883a 	mov	r16,r6
81113408:	2027883a 	mov	r19,r4
8111340c:	10002f1e 	bne	r2,zero,811134cc <__pow5mult+0xe8>
81113410:	2825883a 	mov	r18,r5
81113414:	8021d0ba 	srai	r16,r16,2
81113418:	80001a26 	beq	r16,zero,81113484 <__pow5mult+0xa0>
8111341c:	9c401217 	ldw	r17,72(r19)
81113420:	8800061e 	bne	r17,zero,8111343c <__pow5mult+0x58>
81113424:	00003406 	br	811134f8 <__pow5mult+0x114>
81113428:	8021d07a 	srai	r16,r16,1
8111342c:	80001526 	beq	r16,zero,81113484 <__pow5mult+0xa0>
81113430:	88800017 	ldw	r2,0(r17)
81113434:	10001c26 	beq	r2,zero,811134a8 <__pow5mult+0xc4>
81113438:	1023883a 	mov	r17,r2
8111343c:	8080004c 	andi	r2,r16,1
81113440:	103ff926 	beq	r2,zero,81113428 <__reset+0xfb0f3428>
81113444:	880d883a 	mov	r6,r17
81113448:	900b883a 	mov	r5,r18
8111344c:	9809883a 	mov	r4,r19
81113450:	11131ec0 	call	811131ec <__multiply>
81113454:	90001b26 	beq	r18,zero,811134c4 <__pow5mult+0xe0>
81113458:	91000117 	ldw	r4,4(r18)
8111345c:	98c01317 	ldw	r3,76(r19)
81113460:	8021d07a 	srai	r16,r16,1
81113464:	2109883a 	add	r4,r4,r4
81113468:	2109883a 	add	r4,r4,r4
8111346c:	1907883a 	add	r3,r3,r4
81113470:	19000017 	ldw	r4,0(r3)
81113474:	91000015 	stw	r4,0(r18)
81113478:	1c800015 	stw	r18,0(r3)
8111347c:	1025883a 	mov	r18,r2
81113480:	803feb1e 	bne	r16,zero,81113430 <__reset+0xfb0f3430>
81113484:	9005883a 	mov	r2,r18
81113488:	dfc00517 	ldw	ra,20(sp)
8111348c:	dd000417 	ldw	r20,16(sp)
81113490:	dcc00317 	ldw	r19,12(sp)
81113494:	dc800217 	ldw	r18,8(sp)
81113498:	dc400117 	ldw	r17,4(sp)
8111349c:	dc000017 	ldw	r16,0(sp)
811134a0:	dec00604 	addi	sp,sp,24
811134a4:	f800283a 	ret
811134a8:	880d883a 	mov	r6,r17
811134ac:	880b883a 	mov	r5,r17
811134b0:	9809883a 	mov	r4,r19
811134b4:	11131ec0 	call	811131ec <__multiply>
811134b8:	88800015 	stw	r2,0(r17)
811134bc:	10000015 	stw	zero,0(r2)
811134c0:	003fdd06 	br	81113438 <__reset+0xfb0f3438>
811134c4:	1025883a 	mov	r18,r2
811134c8:	003fd706 	br	81113428 <__reset+0xfb0f3428>
811134cc:	10bfffc4 	addi	r2,r2,-1
811134d0:	1085883a 	add	r2,r2,r2
811134d4:	00e044b4 	movhi	r3,33042
811134d8:	18ff1904 	addi	r3,r3,-924
811134dc:	1085883a 	add	r2,r2,r2
811134e0:	1885883a 	add	r2,r3,r2
811134e4:	11800017 	ldw	r6,0(r2)
811134e8:	000f883a 	mov	r7,zero
811134ec:	1112e740 	call	81112e74 <__multadd>
811134f0:	1025883a 	mov	r18,r2
811134f4:	003fc706 	br	81113414 <__reset+0xfb0f3414>
811134f8:	05000044 	movi	r20,1
811134fc:	a00b883a 	mov	r5,r20
81113500:	9809883a 	mov	r4,r19
81113504:	1112da40 	call	81112da4 <_Balloc>
81113508:	1023883a 	mov	r17,r2
8111350c:	00809c44 	movi	r2,625
81113510:	88800515 	stw	r2,20(r17)
81113514:	8d000415 	stw	r20,16(r17)
81113518:	9c401215 	stw	r17,72(r19)
8111351c:	88000015 	stw	zero,0(r17)
81113520:	003fc606 	br	8111343c <__reset+0xfb0f343c>

81113524 <__lshift>:
81113524:	defff904 	addi	sp,sp,-28
81113528:	dd400515 	stw	r21,20(sp)
8111352c:	dcc00315 	stw	r19,12(sp)
81113530:	302bd17a 	srai	r21,r6,5
81113534:	2cc00417 	ldw	r19,16(r5)
81113538:	28800217 	ldw	r2,8(r5)
8111353c:	dd000415 	stw	r20,16(sp)
81113540:	ace7883a 	add	r19,r21,r19
81113544:	dc800215 	stw	r18,8(sp)
81113548:	dc400115 	stw	r17,4(sp)
8111354c:	dc000015 	stw	r16,0(sp)
81113550:	dfc00615 	stw	ra,24(sp)
81113554:	9c000044 	addi	r16,r19,1
81113558:	2823883a 	mov	r17,r5
8111355c:	3029883a 	mov	r20,r6
81113560:	2025883a 	mov	r18,r4
81113564:	29400117 	ldw	r5,4(r5)
81113568:	1400030e 	bge	r2,r16,81113578 <__lshift+0x54>
8111356c:	1085883a 	add	r2,r2,r2
81113570:	29400044 	addi	r5,r5,1
81113574:	143ffd16 	blt	r2,r16,8111356c <__reset+0xfb0f356c>
81113578:	9009883a 	mov	r4,r18
8111357c:	1112da40 	call	81112da4 <_Balloc>
81113580:	10c00504 	addi	r3,r2,20
81113584:	0540070e 	bge	zero,r21,811135a4 <__lshift+0x80>
81113588:	ad6b883a 	add	r21,r21,r21
8111358c:	ad6b883a 	add	r21,r21,r21
81113590:	1809883a 	mov	r4,r3
81113594:	1d47883a 	add	r3,r3,r21
81113598:	20000015 	stw	zero,0(r4)
8111359c:	21000104 	addi	r4,r4,4
811135a0:	193ffd1e 	bne	r3,r4,81113598 <__reset+0xfb0f3598>
811135a4:	8a000417 	ldw	r8,16(r17)
811135a8:	89000504 	addi	r4,r17,20
811135ac:	a18007cc 	andi	r6,r20,31
811135b0:	4211883a 	add	r8,r8,r8
811135b4:	4211883a 	add	r8,r8,r8
811135b8:	2211883a 	add	r8,r4,r8
811135bc:	30002326 	beq	r6,zero,8111364c <__lshift+0x128>
811135c0:	02400804 	movi	r9,32
811135c4:	4993c83a 	sub	r9,r9,r6
811135c8:	000b883a 	mov	r5,zero
811135cc:	21c00017 	ldw	r7,0(r4)
811135d0:	1815883a 	mov	r10,r3
811135d4:	18c00104 	addi	r3,r3,4
811135d8:	398e983a 	sll	r7,r7,r6
811135dc:	21000104 	addi	r4,r4,4
811135e0:	394ab03a 	or	r5,r7,r5
811135e4:	197fff15 	stw	r5,-4(r3)
811135e8:	217fff17 	ldw	r5,-4(r4)
811135ec:	2a4ad83a 	srl	r5,r5,r9
811135f0:	223ff636 	bltu	r4,r8,811135cc <__reset+0xfb0f35cc>
811135f4:	51400115 	stw	r5,4(r10)
811135f8:	28001a1e 	bne	r5,zero,81113664 <__lshift+0x140>
811135fc:	843fffc4 	addi	r16,r16,-1
81113600:	14000415 	stw	r16,16(r2)
81113604:	88000826 	beq	r17,zero,81113628 <__lshift+0x104>
81113608:	89000117 	ldw	r4,4(r17)
8111360c:	90c01317 	ldw	r3,76(r18)
81113610:	2109883a 	add	r4,r4,r4
81113614:	2109883a 	add	r4,r4,r4
81113618:	1907883a 	add	r3,r3,r4
8111361c:	19000017 	ldw	r4,0(r3)
81113620:	89000015 	stw	r4,0(r17)
81113624:	1c400015 	stw	r17,0(r3)
81113628:	dfc00617 	ldw	ra,24(sp)
8111362c:	dd400517 	ldw	r21,20(sp)
81113630:	dd000417 	ldw	r20,16(sp)
81113634:	dcc00317 	ldw	r19,12(sp)
81113638:	dc800217 	ldw	r18,8(sp)
8111363c:	dc400117 	ldw	r17,4(sp)
81113640:	dc000017 	ldw	r16,0(sp)
81113644:	dec00704 	addi	sp,sp,28
81113648:	f800283a 	ret
8111364c:	21400017 	ldw	r5,0(r4)
81113650:	18c00104 	addi	r3,r3,4
81113654:	21000104 	addi	r4,r4,4
81113658:	197fff15 	stw	r5,-4(r3)
8111365c:	223ffb36 	bltu	r4,r8,8111364c <__reset+0xfb0f364c>
81113660:	003fe606 	br	811135fc <__reset+0xfb0f35fc>
81113664:	9c000084 	addi	r16,r19,2
81113668:	003fe406 	br	811135fc <__reset+0xfb0f35fc>

8111366c <__mcmp>:
8111366c:	20800417 	ldw	r2,16(r4)
81113670:	28c00417 	ldw	r3,16(r5)
81113674:	10c5c83a 	sub	r2,r2,r3
81113678:	1000111e 	bne	r2,zero,811136c0 <__mcmp+0x54>
8111367c:	18c7883a 	add	r3,r3,r3
81113680:	18c7883a 	add	r3,r3,r3
81113684:	21000504 	addi	r4,r4,20
81113688:	29400504 	addi	r5,r5,20
8111368c:	20c5883a 	add	r2,r4,r3
81113690:	28cb883a 	add	r5,r5,r3
81113694:	00000106 	br	8111369c <__mcmp+0x30>
81113698:	20800a2e 	bgeu	r4,r2,811136c4 <__mcmp+0x58>
8111369c:	10bfff04 	addi	r2,r2,-4
811136a0:	297fff04 	addi	r5,r5,-4
811136a4:	11800017 	ldw	r6,0(r2)
811136a8:	28c00017 	ldw	r3,0(r5)
811136ac:	30fffa26 	beq	r6,r3,81113698 <__reset+0xfb0f3698>
811136b0:	30c00236 	bltu	r6,r3,811136bc <__mcmp+0x50>
811136b4:	00800044 	movi	r2,1
811136b8:	f800283a 	ret
811136bc:	00bfffc4 	movi	r2,-1
811136c0:	f800283a 	ret
811136c4:	0005883a 	mov	r2,zero
811136c8:	f800283a 	ret

811136cc <__mdiff>:
811136cc:	28c00417 	ldw	r3,16(r5)
811136d0:	30800417 	ldw	r2,16(r6)
811136d4:	defffa04 	addi	sp,sp,-24
811136d8:	dcc00315 	stw	r19,12(sp)
811136dc:	dc800215 	stw	r18,8(sp)
811136e0:	dfc00515 	stw	ra,20(sp)
811136e4:	dd000415 	stw	r20,16(sp)
811136e8:	dc400115 	stw	r17,4(sp)
811136ec:	dc000015 	stw	r16,0(sp)
811136f0:	1887c83a 	sub	r3,r3,r2
811136f4:	2825883a 	mov	r18,r5
811136f8:	3027883a 	mov	r19,r6
811136fc:	1800141e 	bne	r3,zero,81113750 <__mdiff+0x84>
81113700:	1085883a 	add	r2,r2,r2
81113704:	1085883a 	add	r2,r2,r2
81113708:	2a000504 	addi	r8,r5,20
8111370c:	34000504 	addi	r16,r6,20
81113710:	4087883a 	add	r3,r8,r2
81113714:	8085883a 	add	r2,r16,r2
81113718:	00000106 	br	81113720 <__mdiff+0x54>
8111371c:	40c0592e 	bgeu	r8,r3,81113884 <__mdiff+0x1b8>
81113720:	18ffff04 	addi	r3,r3,-4
81113724:	10bfff04 	addi	r2,r2,-4
81113728:	19c00017 	ldw	r7,0(r3)
8111372c:	11400017 	ldw	r5,0(r2)
81113730:	397ffa26 	beq	r7,r5,8111371c <__reset+0xfb0f371c>
81113734:	3940592e 	bgeu	r7,r5,8111389c <__mdiff+0x1d0>
81113738:	9005883a 	mov	r2,r18
8111373c:	4023883a 	mov	r17,r8
81113740:	9825883a 	mov	r18,r19
81113744:	05000044 	movi	r20,1
81113748:	1027883a 	mov	r19,r2
8111374c:	00000406 	br	81113760 <__mdiff+0x94>
81113750:	18005616 	blt	r3,zero,811138ac <__mdiff+0x1e0>
81113754:	34400504 	addi	r17,r6,20
81113758:	2c000504 	addi	r16,r5,20
8111375c:	0029883a 	mov	r20,zero
81113760:	91400117 	ldw	r5,4(r18)
81113764:	1112da40 	call	81112da4 <_Balloc>
81113768:	92400417 	ldw	r9,16(r18)
8111376c:	9b000417 	ldw	r12,16(r19)
81113770:	12c00504 	addi	r11,r2,20
81113774:	4a51883a 	add	r8,r9,r9
81113778:	6319883a 	add	r12,r12,r12
8111377c:	4211883a 	add	r8,r8,r8
81113780:	6319883a 	add	r12,r12,r12
81113784:	15000315 	stw	r20,12(r2)
81113788:	8211883a 	add	r8,r16,r8
8111378c:	8b19883a 	add	r12,r17,r12
81113790:	0007883a 	mov	r3,zero
81113794:	81400017 	ldw	r5,0(r16)
81113798:	89c00017 	ldw	r7,0(r17)
8111379c:	59800104 	addi	r6,r11,4
811137a0:	293fffcc 	andi	r4,r5,65535
811137a4:	20c7883a 	add	r3,r4,r3
811137a8:	393fffcc 	andi	r4,r7,65535
811137ac:	1909c83a 	sub	r4,r3,r4
811137b0:	280ad43a 	srli	r5,r5,16
811137b4:	380ed43a 	srli	r7,r7,16
811137b8:	2007d43a 	srai	r3,r4,16
811137bc:	213fffcc 	andi	r4,r4,65535
811137c0:	29cbc83a 	sub	r5,r5,r7
811137c4:	28c7883a 	add	r3,r5,r3
811137c8:	180a943a 	slli	r5,r3,16
811137cc:	8c400104 	addi	r17,r17,4
811137d0:	84000104 	addi	r16,r16,4
811137d4:	2908b03a 	or	r4,r5,r4
811137d8:	59000015 	stw	r4,0(r11)
811137dc:	1807d43a 	srai	r3,r3,16
811137e0:	3015883a 	mov	r10,r6
811137e4:	3017883a 	mov	r11,r6
811137e8:	8b3fea36 	bltu	r17,r12,81113794 <__reset+0xfb0f3794>
811137ec:	8200162e 	bgeu	r16,r8,81113848 <__mdiff+0x17c>
811137f0:	8017883a 	mov	r11,r16
811137f4:	59400017 	ldw	r5,0(r11)
811137f8:	31800104 	addi	r6,r6,4
811137fc:	5ac00104 	addi	r11,r11,4
81113800:	293fffcc 	andi	r4,r5,65535
81113804:	20c7883a 	add	r3,r4,r3
81113808:	280ed43a 	srli	r7,r5,16
8111380c:	180bd43a 	srai	r5,r3,16
81113810:	193fffcc 	andi	r4,r3,65535
81113814:	3947883a 	add	r3,r7,r5
81113818:	180a943a 	slli	r5,r3,16
8111381c:	1807d43a 	srai	r3,r3,16
81113820:	2908b03a 	or	r4,r5,r4
81113824:	313fff15 	stw	r4,-4(r6)
81113828:	5a3ff236 	bltu	r11,r8,811137f4 <__reset+0xfb0f37f4>
8111382c:	0406303a 	nor	r3,zero,r16
81113830:	1a07883a 	add	r3,r3,r8
81113834:	1806d0ba 	srli	r3,r3,2
81113838:	18c00044 	addi	r3,r3,1
8111383c:	18c7883a 	add	r3,r3,r3
81113840:	18c7883a 	add	r3,r3,r3
81113844:	50d5883a 	add	r10,r10,r3
81113848:	50ffff04 	addi	r3,r10,-4
8111384c:	2000041e 	bne	r4,zero,81113860 <__mdiff+0x194>
81113850:	18ffff04 	addi	r3,r3,-4
81113854:	19000017 	ldw	r4,0(r3)
81113858:	4a7fffc4 	addi	r9,r9,-1
8111385c:	203ffc26 	beq	r4,zero,81113850 <__reset+0xfb0f3850>
81113860:	12400415 	stw	r9,16(r2)
81113864:	dfc00517 	ldw	ra,20(sp)
81113868:	dd000417 	ldw	r20,16(sp)
8111386c:	dcc00317 	ldw	r19,12(sp)
81113870:	dc800217 	ldw	r18,8(sp)
81113874:	dc400117 	ldw	r17,4(sp)
81113878:	dc000017 	ldw	r16,0(sp)
8111387c:	dec00604 	addi	sp,sp,24
81113880:	f800283a 	ret
81113884:	000b883a 	mov	r5,zero
81113888:	1112da40 	call	81112da4 <_Balloc>
8111388c:	00c00044 	movi	r3,1
81113890:	10c00415 	stw	r3,16(r2)
81113894:	10000515 	stw	zero,20(r2)
81113898:	003ff206 	br	81113864 <__reset+0xfb0f3864>
8111389c:	8023883a 	mov	r17,r16
811138a0:	0029883a 	mov	r20,zero
811138a4:	4021883a 	mov	r16,r8
811138a8:	003fad06 	br	81113760 <__reset+0xfb0f3760>
811138ac:	9005883a 	mov	r2,r18
811138b0:	94400504 	addi	r17,r18,20
811138b4:	9c000504 	addi	r16,r19,20
811138b8:	9825883a 	mov	r18,r19
811138bc:	05000044 	movi	r20,1
811138c0:	1027883a 	mov	r19,r2
811138c4:	003fa606 	br	81113760 <__reset+0xfb0f3760>

811138c8 <__ulp>:
811138c8:	295ffc2c 	andhi	r5,r5,32752
811138cc:	00bf3034 	movhi	r2,64704
811138d0:	2887883a 	add	r3,r5,r2
811138d4:	00c0020e 	bge	zero,r3,811138e0 <__ulp+0x18>
811138d8:	0005883a 	mov	r2,zero
811138dc:	f800283a 	ret
811138e0:	00c7c83a 	sub	r3,zero,r3
811138e4:	1807d53a 	srai	r3,r3,20
811138e8:	008004c4 	movi	r2,19
811138ec:	10c00b0e 	bge	r2,r3,8111391c <__ulp+0x54>
811138f0:	18bffb04 	addi	r2,r3,-20
811138f4:	01000784 	movi	r4,30
811138f8:	0007883a 	mov	r3,zero
811138fc:	20800516 	blt	r4,r2,81113914 <__ulp+0x4c>
81113900:	010007c4 	movi	r4,31
81113904:	2089c83a 	sub	r4,r4,r2
81113908:	00800044 	movi	r2,1
8111390c:	1104983a 	sll	r2,r2,r4
81113910:	f800283a 	ret
81113914:	00800044 	movi	r2,1
81113918:	f800283a 	ret
8111391c:	01400234 	movhi	r5,8
81113920:	28c7d83a 	sra	r3,r5,r3
81113924:	0005883a 	mov	r2,zero
81113928:	f800283a 	ret

8111392c <__b2d>:
8111392c:	defffa04 	addi	sp,sp,-24
81113930:	dc000015 	stw	r16,0(sp)
81113934:	24000417 	ldw	r16,16(r4)
81113938:	dc400115 	stw	r17,4(sp)
8111393c:	24400504 	addi	r17,r4,20
81113940:	8421883a 	add	r16,r16,r16
81113944:	8421883a 	add	r16,r16,r16
81113948:	8c21883a 	add	r16,r17,r16
8111394c:	dc800215 	stw	r18,8(sp)
81113950:	84bfff17 	ldw	r18,-4(r16)
81113954:	dd000415 	stw	r20,16(sp)
81113958:	dcc00315 	stw	r19,12(sp)
8111395c:	9009883a 	mov	r4,r18
81113960:	2829883a 	mov	r20,r5
81113964:	dfc00515 	stw	ra,20(sp)
81113968:	11130980 	call	81113098 <__hi0bits>
8111396c:	00c00804 	movi	r3,32
81113970:	1889c83a 	sub	r4,r3,r2
81113974:	a1000015 	stw	r4,0(r20)
81113978:	01000284 	movi	r4,10
8111397c:	84ffff04 	addi	r19,r16,-4
81113980:	20801216 	blt	r4,r2,811139cc <__b2d+0xa0>
81113984:	018002c4 	movi	r6,11
81113988:	308dc83a 	sub	r6,r6,r2
8111398c:	9186d83a 	srl	r3,r18,r6
81113990:	18cffc34 	orhi	r3,r3,16368
81113994:	8cc0212e 	bgeu	r17,r19,81113a1c <__b2d+0xf0>
81113998:	813ffe17 	ldw	r4,-8(r16)
8111399c:	218cd83a 	srl	r6,r4,r6
811139a0:	10800544 	addi	r2,r2,21
811139a4:	9084983a 	sll	r2,r18,r2
811139a8:	1184b03a 	or	r2,r2,r6
811139ac:	dfc00517 	ldw	ra,20(sp)
811139b0:	dd000417 	ldw	r20,16(sp)
811139b4:	dcc00317 	ldw	r19,12(sp)
811139b8:	dc800217 	ldw	r18,8(sp)
811139bc:	dc400117 	ldw	r17,4(sp)
811139c0:	dc000017 	ldw	r16,0(sp)
811139c4:	dec00604 	addi	sp,sp,24
811139c8:	f800283a 	ret
811139cc:	8cc00f2e 	bgeu	r17,r19,81113a0c <__b2d+0xe0>
811139d0:	117ffd44 	addi	r5,r2,-11
811139d4:	80bffe17 	ldw	r2,-8(r16)
811139d8:	28000e26 	beq	r5,zero,81113a14 <__b2d+0xe8>
811139dc:	1949c83a 	sub	r4,r3,r5
811139e0:	9164983a 	sll	r18,r18,r5
811139e4:	1106d83a 	srl	r3,r2,r4
811139e8:	81bffe04 	addi	r6,r16,-8
811139ec:	948ffc34 	orhi	r18,r18,16368
811139f0:	90c6b03a 	or	r3,r18,r3
811139f4:	89800e2e 	bgeu	r17,r6,81113a30 <__b2d+0x104>
811139f8:	81bffd17 	ldw	r6,-12(r16)
811139fc:	1144983a 	sll	r2,r2,r5
81113a00:	310ad83a 	srl	r5,r6,r4
81113a04:	2884b03a 	or	r2,r5,r2
81113a08:	003fe806 	br	811139ac <__reset+0xfb0f39ac>
81113a0c:	10bffd44 	addi	r2,r2,-11
81113a10:	1000041e 	bne	r2,zero,81113a24 <__b2d+0xf8>
81113a14:	90cffc34 	orhi	r3,r18,16368
81113a18:	003fe406 	br	811139ac <__reset+0xfb0f39ac>
81113a1c:	000d883a 	mov	r6,zero
81113a20:	003fdf06 	br	811139a0 <__reset+0xfb0f39a0>
81113a24:	90a4983a 	sll	r18,r18,r2
81113a28:	0005883a 	mov	r2,zero
81113a2c:	003ff906 	br	81113a14 <__reset+0xfb0f3a14>
81113a30:	1144983a 	sll	r2,r2,r5
81113a34:	003fdd06 	br	811139ac <__reset+0xfb0f39ac>

81113a38 <__d2b>:
81113a38:	defff804 	addi	sp,sp,-32
81113a3c:	dc000215 	stw	r16,8(sp)
81113a40:	3021883a 	mov	r16,r6
81113a44:	dc400315 	stw	r17,12(sp)
81113a48:	8022907a 	slli	r17,r16,1
81113a4c:	dd000615 	stw	r20,24(sp)
81113a50:	2829883a 	mov	r20,r5
81113a54:	01400044 	movi	r5,1
81113a58:	dcc00515 	stw	r19,20(sp)
81113a5c:	dc800415 	stw	r18,16(sp)
81113a60:	dfc00715 	stw	ra,28(sp)
81113a64:	3825883a 	mov	r18,r7
81113a68:	8822d57a 	srli	r17,r17,21
81113a6c:	1112da40 	call	81112da4 <_Balloc>
81113a70:	1027883a 	mov	r19,r2
81113a74:	00800434 	movhi	r2,16
81113a78:	10bfffc4 	addi	r2,r2,-1
81113a7c:	808c703a 	and	r6,r16,r2
81113a80:	88000126 	beq	r17,zero,81113a88 <__d2b+0x50>
81113a84:	31800434 	orhi	r6,r6,16
81113a88:	d9800015 	stw	r6,0(sp)
81113a8c:	a0002426 	beq	r20,zero,81113b20 <__d2b+0xe8>
81113a90:	d9000104 	addi	r4,sp,4
81113a94:	dd000115 	stw	r20,4(sp)
81113a98:	11131000 	call	81113100 <__lo0bits>
81113a9c:	d8c00017 	ldw	r3,0(sp)
81113aa0:	10002f1e 	bne	r2,zero,81113b60 <__d2b+0x128>
81113aa4:	d9000117 	ldw	r4,4(sp)
81113aa8:	99000515 	stw	r4,20(r19)
81113aac:	1821003a 	cmpeq	r16,r3,zero
81113ab0:	01000084 	movi	r4,2
81113ab4:	2421c83a 	sub	r16,r4,r16
81113ab8:	98c00615 	stw	r3,24(r19)
81113abc:	9c000415 	stw	r16,16(r19)
81113ac0:	88001f1e 	bne	r17,zero,81113b40 <__d2b+0x108>
81113ac4:	10bef384 	addi	r2,r2,-1074
81113ac8:	90800015 	stw	r2,0(r18)
81113acc:	00900034 	movhi	r2,16384
81113ad0:	10bfffc4 	addi	r2,r2,-1
81113ad4:	8085883a 	add	r2,r16,r2
81113ad8:	1085883a 	add	r2,r2,r2
81113adc:	1085883a 	add	r2,r2,r2
81113ae0:	9885883a 	add	r2,r19,r2
81113ae4:	11000517 	ldw	r4,20(r2)
81113ae8:	8020917a 	slli	r16,r16,5
81113aec:	11130980 	call	81113098 <__hi0bits>
81113af0:	d8c00817 	ldw	r3,32(sp)
81113af4:	8085c83a 	sub	r2,r16,r2
81113af8:	18800015 	stw	r2,0(r3)
81113afc:	9805883a 	mov	r2,r19
81113b00:	dfc00717 	ldw	ra,28(sp)
81113b04:	dd000617 	ldw	r20,24(sp)
81113b08:	dcc00517 	ldw	r19,20(sp)
81113b0c:	dc800417 	ldw	r18,16(sp)
81113b10:	dc400317 	ldw	r17,12(sp)
81113b14:	dc000217 	ldw	r16,8(sp)
81113b18:	dec00804 	addi	sp,sp,32
81113b1c:	f800283a 	ret
81113b20:	d809883a 	mov	r4,sp
81113b24:	11131000 	call	81113100 <__lo0bits>
81113b28:	d8c00017 	ldw	r3,0(sp)
81113b2c:	04000044 	movi	r16,1
81113b30:	9c000415 	stw	r16,16(r19)
81113b34:	98c00515 	stw	r3,20(r19)
81113b38:	10800804 	addi	r2,r2,32
81113b3c:	883fe126 	beq	r17,zero,81113ac4 <__reset+0xfb0f3ac4>
81113b40:	00c00d44 	movi	r3,53
81113b44:	8c7ef344 	addi	r17,r17,-1075
81113b48:	88a3883a 	add	r17,r17,r2
81113b4c:	1885c83a 	sub	r2,r3,r2
81113b50:	d8c00817 	ldw	r3,32(sp)
81113b54:	94400015 	stw	r17,0(r18)
81113b58:	18800015 	stw	r2,0(r3)
81113b5c:	003fe706 	br	81113afc <__reset+0xfb0f3afc>
81113b60:	01000804 	movi	r4,32
81113b64:	2089c83a 	sub	r4,r4,r2
81113b68:	1908983a 	sll	r4,r3,r4
81113b6c:	d9400117 	ldw	r5,4(sp)
81113b70:	1886d83a 	srl	r3,r3,r2
81113b74:	2148b03a 	or	r4,r4,r5
81113b78:	99000515 	stw	r4,20(r19)
81113b7c:	d8c00015 	stw	r3,0(sp)
81113b80:	003fca06 	br	81113aac <__reset+0xfb0f3aac>

81113b84 <__ratio>:
81113b84:	defff904 	addi	sp,sp,-28
81113b88:	dc400315 	stw	r17,12(sp)
81113b8c:	2823883a 	mov	r17,r5
81113b90:	d9400104 	addi	r5,sp,4
81113b94:	dfc00615 	stw	ra,24(sp)
81113b98:	dcc00515 	stw	r19,20(sp)
81113b9c:	dc800415 	stw	r18,16(sp)
81113ba0:	2027883a 	mov	r19,r4
81113ba4:	dc000215 	stw	r16,8(sp)
81113ba8:	111392c0 	call	8111392c <__b2d>
81113bac:	d80b883a 	mov	r5,sp
81113bb0:	8809883a 	mov	r4,r17
81113bb4:	1025883a 	mov	r18,r2
81113bb8:	1821883a 	mov	r16,r3
81113bbc:	111392c0 	call	8111392c <__b2d>
81113bc0:	8a000417 	ldw	r8,16(r17)
81113bc4:	99000417 	ldw	r4,16(r19)
81113bc8:	d9400117 	ldw	r5,4(sp)
81113bcc:	2209c83a 	sub	r4,r4,r8
81113bd0:	2010917a 	slli	r8,r4,5
81113bd4:	d9000017 	ldw	r4,0(sp)
81113bd8:	2909c83a 	sub	r4,r5,r4
81113bdc:	4109883a 	add	r4,r8,r4
81113be0:	01000e0e 	bge	zero,r4,81113c1c <__ratio+0x98>
81113be4:	2008953a 	slli	r4,r4,20
81113be8:	2421883a 	add	r16,r4,r16
81113bec:	100d883a 	mov	r6,r2
81113bf0:	180f883a 	mov	r7,r3
81113bf4:	9009883a 	mov	r4,r18
81113bf8:	800b883a 	mov	r5,r16
81113bfc:	1117dc80 	call	81117dc8 <__divdf3>
81113c00:	dfc00617 	ldw	ra,24(sp)
81113c04:	dcc00517 	ldw	r19,20(sp)
81113c08:	dc800417 	ldw	r18,16(sp)
81113c0c:	dc400317 	ldw	r17,12(sp)
81113c10:	dc000217 	ldw	r16,8(sp)
81113c14:	dec00704 	addi	sp,sp,28
81113c18:	f800283a 	ret
81113c1c:	2008953a 	slli	r4,r4,20
81113c20:	1907c83a 	sub	r3,r3,r4
81113c24:	003ff106 	br	81113bec <__reset+0xfb0f3bec>

81113c28 <_mprec_log10>:
81113c28:	defffe04 	addi	sp,sp,-8
81113c2c:	dc000015 	stw	r16,0(sp)
81113c30:	dfc00115 	stw	ra,4(sp)
81113c34:	008005c4 	movi	r2,23
81113c38:	2021883a 	mov	r16,r4
81113c3c:	11000d0e 	bge	r2,r4,81113c74 <_mprec_log10+0x4c>
81113c40:	0005883a 	mov	r2,zero
81113c44:	00cffc34 	movhi	r3,16368
81113c48:	843fffc4 	addi	r16,r16,-1
81113c4c:	000d883a 	mov	r6,zero
81113c50:	01d00934 	movhi	r7,16420
81113c54:	1009883a 	mov	r4,r2
81113c58:	180b883a 	mov	r5,r3
81113c5c:	110c3380 	call	8110c338 <__muldf3>
81113c60:	803ff91e 	bne	r16,zero,81113c48 <__reset+0xfb0f3c48>
81113c64:	dfc00117 	ldw	ra,4(sp)
81113c68:	dc000017 	ldw	r16,0(sp)
81113c6c:	dec00204 	addi	sp,sp,8
81113c70:	f800283a 	ret
81113c74:	202090fa 	slli	r16,r4,3
81113c78:	00a044b4 	movhi	r2,33042
81113c7c:	10bf3004 	addi	r2,r2,-832
81113c80:	1421883a 	add	r16,r2,r16
81113c84:	80800017 	ldw	r2,0(r16)
81113c88:	80c00117 	ldw	r3,4(r16)
81113c8c:	dfc00117 	ldw	ra,4(sp)
81113c90:	dc000017 	ldw	r16,0(sp)
81113c94:	dec00204 	addi	sp,sp,8
81113c98:	f800283a 	ret

81113c9c <__copybits>:
81113c9c:	297fffc4 	addi	r5,r5,-1
81113ca0:	280fd17a 	srai	r7,r5,5
81113ca4:	30c00417 	ldw	r3,16(r6)
81113ca8:	30800504 	addi	r2,r6,20
81113cac:	39c00044 	addi	r7,r7,1
81113cb0:	18c7883a 	add	r3,r3,r3
81113cb4:	39cf883a 	add	r7,r7,r7
81113cb8:	18c7883a 	add	r3,r3,r3
81113cbc:	39cf883a 	add	r7,r7,r7
81113cc0:	10c7883a 	add	r3,r2,r3
81113cc4:	21cf883a 	add	r7,r4,r7
81113cc8:	10c00d2e 	bgeu	r2,r3,81113d00 <__copybits+0x64>
81113ccc:	200b883a 	mov	r5,r4
81113cd0:	12000017 	ldw	r8,0(r2)
81113cd4:	29400104 	addi	r5,r5,4
81113cd8:	10800104 	addi	r2,r2,4
81113cdc:	2a3fff15 	stw	r8,-4(r5)
81113ce0:	10fffb36 	bltu	r2,r3,81113cd0 <__reset+0xfb0f3cd0>
81113ce4:	1985c83a 	sub	r2,r3,r6
81113ce8:	10bffac4 	addi	r2,r2,-21
81113cec:	1004d0ba 	srli	r2,r2,2
81113cf0:	10800044 	addi	r2,r2,1
81113cf4:	1085883a 	add	r2,r2,r2
81113cf8:	1085883a 	add	r2,r2,r2
81113cfc:	2089883a 	add	r4,r4,r2
81113d00:	21c0032e 	bgeu	r4,r7,81113d10 <__copybits+0x74>
81113d04:	20000015 	stw	zero,0(r4)
81113d08:	21000104 	addi	r4,r4,4
81113d0c:	21fffd36 	bltu	r4,r7,81113d04 <__reset+0xfb0f3d04>
81113d10:	f800283a 	ret

81113d14 <__any_on>:
81113d14:	20c00417 	ldw	r3,16(r4)
81113d18:	2805d17a 	srai	r2,r5,5
81113d1c:	21000504 	addi	r4,r4,20
81113d20:	18800d0e 	bge	r3,r2,81113d58 <__any_on+0x44>
81113d24:	18c7883a 	add	r3,r3,r3
81113d28:	18c7883a 	add	r3,r3,r3
81113d2c:	20c7883a 	add	r3,r4,r3
81113d30:	20c0192e 	bgeu	r4,r3,81113d98 <__any_on+0x84>
81113d34:	18bfff17 	ldw	r2,-4(r3)
81113d38:	18ffff04 	addi	r3,r3,-4
81113d3c:	1000041e 	bne	r2,zero,81113d50 <__any_on+0x3c>
81113d40:	20c0142e 	bgeu	r4,r3,81113d94 <__any_on+0x80>
81113d44:	18ffff04 	addi	r3,r3,-4
81113d48:	19400017 	ldw	r5,0(r3)
81113d4c:	283ffc26 	beq	r5,zero,81113d40 <__reset+0xfb0f3d40>
81113d50:	00800044 	movi	r2,1
81113d54:	f800283a 	ret
81113d58:	10c00a0e 	bge	r2,r3,81113d84 <__any_on+0x70>
81113d5c:	1085883a 	add	r2,r2,r2
81113d60:	1085883a 	add	r2,r2,r2
81113d64:	294007cc 	andi	r5,r5,31
81113d68:	2087883a 	add	r3,r4,r2
81113d6c:	283ff026 	beq	r5,zero,81113d30 <__reset+0xfb0f3d30>
81113d70:	19800017 	ldw	r6,0(r3)
81113d74:	3144d83a 	srl	r2,r6,r5
81113d78:	114a983a 	sll	r5,r2,r5
81113d7c:	317ff41e 	bne	r6,r5,81113d50 <__reset+0xfb0f3d50>
81113d80:	003feb06 	br	81113d30 <__reset+0xfb0f3d30>
81113d84:	1085883a 	add	r2,r2,r2
81113d88:	1085883a 	add	r2,r2,r2
81113d8c:	2087883a 	add	r3,r4,r2
81113d90:	003fe706 	br	81113d30 <__reset+0xfb0f3d30>
81113d94:	f800283a 	ret
81113d98:	0005883a 	mov	r2,zero
81113d9c:	f800283a 	ret

81113da0 <_putc_r>:
81113da0:	defffc04 	addi	sp,sp,-16
81113da4:	dc000215 	stw	r16,8(sp)
81113da8:	dfc00315 	stw	ra,12(sp)
81113dac:	2021883a 	mov	r16,r4
81113db0:	20000226 	beq	r4,zero,81113dbc <_putc_r+0x1c>
81113db4:	20800e17 	ldw	r2,56(r4)
81113db8:	10001b26 	beq	r2,zero,81113e28 <_putc_r+0x88>
81113dbc:	30800217 	ldw	r2,8(r6)
81113dc0:	10bfffc4 	addi	r2,r2,-1
81113dc4:	30800215 	stw	r2,8(r6)
81113dc8:	10000a16 	blt	r2,zero,81113df4 <_putc_r+0x54>
81113dcc:	30800017 	ldw	r2,0(r6)
81113dd0:	11400005 	stb	r5,0(r2)
81113dd4:	30800017 	ldw	r2,0(r6)
81113dd8:	10c00044 	addi	r3,r2,1
81113ddc:	30c00015 	stw	r3,0(r6)
81113de0:	10800003 	ldbu	r2,0(r2)
81113de4:	dfc00317 	ldw	ra,12(sp)
81113de8:	dc000217 	ldw	r16,8(sp)
81113dec:	dec00404 	addi	sp,sp,16
81113df0:	f800283a 	ret
81113df4:	30c00617 	ldw	r3,24(r6)
81113df8:	10c00616 	blt	r2,r3,81113e14 <_putc_r+0x74>
81113dfc:	30800017 	ldw	r2,0(r6)
81113e00:	00c00284 	movi	r3,10
81113e04:	11400005 	stb	r5,0(r2)
81113e08:	30800017 	ldw	r2,0(r6)
81113e0c:	11400003 	ldbu	r5,0(r2)
81113e10:	28fff11e 	bne	r5,r3,81113dd8 <__reset+0xfb0f3dd8>
81113e14:	8009883a 	mov	r4,r16
81113e18:	dfc00317 	ldw	ra,12(sp)
81113e1c:	dc000217 	ldw	r16,8(sp)
81113e20:	dec00404 	addi	sp,sp,16
81113e24:	1115f841 	jmpi	81115f84 <__swbuf_r>
81113e28:	d9400015 	stw	r5,0(sp)
81113e2c:	d9800115 	stw	r6,4(sp)
81113e30:	11114d00 	call	811114d0 <__sinit>
81113e34:	d9800117 	ldw	r6,4(sp)
81113e38:	d9400017 	ldw	r5,0(sp)
81113e3c:	003fdf06 	br	81113dbc <__reset+0xfb0f3dbc>

81113e40 <putc>:
81113e40:	00a044b4 	movhi	r2,33042
81113e44:	defffc04 	addi	sp,sp,-16
81113e48:	10873404 	addi	r2,r2,7376
81113e4c:	dc000115 	stw	r16,4(sp)
81113e50:	14000017 	ldw	r16,0(r2)
81113e54:	dc400215 	stw	r17,8(sp)
81113e58:	dfc00315 	stw	ra,12(sp)
81113e5c:	2023883a 	mov	r17,r4
81113e60:	80000226 	beq	r16,zero,81113e6c <putc+0x2c>
81113e64:	80800e17 	ldw	r2,56(r16)
81113e68:	10001a26 	beq	r2,zero,81113ed4 <putc+0x94>
81113e6c:	28800217 	ldw	r2,8(r5)
81113e70:	10bfffc4 	addi	r2,r2,-1
81113e74:	28800215 	stw	r2,8(r5)
81113e78:	10000b16 	blt	r2,zero,81113ea8 <putc+0x68>
81113e7c:	28800017 	ldw	r2,0(r5)
81113e80:	14400005 	stb	r17,0(r2)
81113e84:	28800017 	ldw	r2,0(r5)
81113e88:	10c00044 	addi	r3,r2,1
81113e8c:	28c00015 	stw	r3,0(r5)
81113e90:	10800003 	ldbu	r2,0(r2)
81113e94:	dfc00317 	ldw	ra,12(sp)
81113e98:	dc400217 	ldw	r17,8(sp)
81113e9c:	dc000117 	ldw	r16,4(sp)
81113ea0:	dec00404 	addi	sp,sp,16
81113ea4:	f800283a 	ret
81113ea8:	28c00617 	ldw	r3,24(r5)
81113eac:	10c00e16 	blt	r2,r3,81113ee8 <putc+0xa8>
81113eb0:	28800017 	ldw	r2,0(r5)
81113eb4:	01000284 	movi	r4,10
81113eb8:	14400005 	stb	r17,0(r2)
81113ebc:	28800017 	ldw	r2,0(r5)
81113ec0:	10c00003 	ldbu	r3,0(r2)
81113ec4:	193ff01e 	bne	r3,r4,81113e88 <__reset+0xfb0f3e88>
81113ec8:	280d883a 	mov	r6,r5
81113ecc:	180b883a 	mov	r5,r3
81113ed0:	00000706 	br	81113ef0 <putc+0xb0>
81113ed4:	8009883a 	mov	r4,r16
81113ed8:	d9400015 	stw	r5,0(sp)
81113edc:	11114d00 	call	811114d0 <__sinit>
81113ee0:	d9400017 	ldw	r5,0(sp)
81113ee4:	003fe106 	br	81113e6c <__reset+0xfb0f3e6c>
81113ee8:	280d883a 	mov	r6,r5
81113eec:	880b883a 	mov	r5,r17
81113ef0:	8009883a 	mov	r4,r16
81113ef4:	dfc00317 	ldw	ra,12(sp)
81113ef8:	dc400217 	ldw	r17,8(sp)
81113efc:	dc000117 	ldw	r16,4(sp)
81113f00:	dec00404 	addi	sp,sp,16
81113f04:	1115f841 	jmpi	81115f84 <__swbuf_r>

81113f08 <_realloc_r>:
81113f08:	defff604 	addi	sp,sp,-40
81113f0c:	dc800215 	stw	r18,8(sp)
81113f10:	dfc00915 	stw	ra,36(sp)
81113f14:	df000815 	stw	fp,32(sp)
81113f18:	ddc00715 	stw	r23,28(sp)
81113f1c:	dd800615 	stw	r22,24(sp)
81113f20:	dd400515 	stw	r21,20(sp)
81113f24:	dd000415 	stw	r20,16(sp)
81113f28:	dcc00315 	stw	r19,12(sp)
81113f2c:	dc400115 	stw	r17,4(sp)
81113f30:	dc000015 	stw	r16,0(sp)
81113f34:	3025883a 	mov	r18,r6
81113f38:	2800b726 	beq	r5,zero,81114218 <_realloc_r+0x310>
81113f3c:	282b883a 	mov	r21,r5
81113f40:	2029883a 	mov	r20,r4
81113f44:	1119b600 	call	81119b60 <__malloc_lock>
81113f48:	a8bfff17 	ldw	r2,-4(r21)
81113f4c:	043fff04 	movi	r16,-4
81113f50:	90c002c4 	addi	r3,r18,11
81113f54:	01000584 	movi	r4,22
81113f58:	acfffe04 	addi	r19,r21,-8
81113f5c:	1420703a 	and	r16,r2,r16
81113f60:	20c0332e 	bgeu	r4,r3,81114030 <_realloc_r+0x128>
81113f64:	047ffe04 	movi	r17,-8
81113f68:	1c62703a 	and	r17,r3,r17
81113f6c:	8807883a 	mov	r3,r17
81113f70:	88005816 	blt	r17,zero,811140d4 <_realloc_r+0x1cc>
81113f74:	8c805736 	bltu	r17,r18,811140d4 <_realloc_r+0x1cc>
81113f78:	80c0300e 	bge	r16,r3,8111403c <_realloc_r+0x134>
81113f7c:	072044b4 	movhi	fp,33042
81113f80:	e7013904 	addi	fp,fp,1252
81113f84:	e1c00217 	ldw	r7,8(fp)
81113f88:	9c09883a 	add	r4,r19,r16
81113f8c:	22000117 	ldw	r8,4(r4)
81113f90:	21c06326 	beq	r4,r7,81114120 <_realloc_r+0x218>
81113f94:	017fff84 	movi	r5,-2
81113f98:	414a703a 	and	r5,r8,r5
81113f9c:	214b883a 	add	r5,r4,r5
81113fa0:	29800117 	ldw	r6,4(r5)
81113fa4:	3180004c 	andi	r6,r6,1
81113fa8:	30003f26 	beq	r6,zero,811140a8 <_realloc_r+0x1a0>
81113fac:	1080004c 	andi	r2,r2,1
81113fb0:	10008326 	beq	r2,zero,811141c0 <_realloc_r+0x2b8>
81113fb4:	900b883a 	mov	r5,r18
81113fb8:	a009883a 	mov	r4,r20
81113fbc:	11122300 	call	81112230 <_malloc_r>
81113fc0:	1025883a 	mov	r18,r2
81113fc4:	10011e26 	beq	r2,zero,81114440 <_realloc_r+0x538>
81113fc8:	a93fff17 	ldw	r4,-4(r21)
81113fcc:	10fffe04 	addi	r3,r2,-8
81113fd0:	00bfff84 	movi	r2,-2
81113fd4:	2084703a 	and	r2,r4,r2
81113fd8:	9885883a 	add	r2,r19,r2
81113fdc:	1880ee26 	beq	r3,r2,81114398 <_realloc_r+0x490>
81113fe0:	81bfff04 	addi	r6,r16,-4
81113fe4:	00800904 	movi	r2,36
81113fe8:	1180b836 	bltu	r2,r6,811142cc <_realloc_r+0x3c4>
81113fec:	00c004c4 	movi	r3,19
81113ff0:	19809636 	bltu	r3,r6,8111424c <_realloc_r+0x344>
81113ff4:	9005883a 	mov	r2,r18
81113ff8:	a807883a 	mov	r3,r21
81113ffc:	19000017 	ldw	r4,0(r3)
81114000:	11000015 	stw	r4,0(r2)
81114004:	19000117 	ldw	r4,4(r3)
81114008:	11000115 	stw	r4,4(r2)
8111400c:	18c00217 	ldw	r3,8(r3)
81114010:	10c00215 	stw	r3,8(r2)
81114014:	a80b883a 	mov	r5,r21
81114018:	a009883a 	mov	r4,r20
8111401c:	11116440 	call	81111644 <_free_r>
81114020:	a009883a 	mov	r4,r20
81114024:	1119b840 	call	81119b84 <__malloc_unlock>
81114028:	9005883a 	mov	r2,r18
8111402c:	00001206 	br	81114078 <_realloc_r+0x170>
81114030:	00c00404 	movi	r3,16
81114034:	1823883a 	mov	r17,r3
81114038:	003fce06 	br	81113f74 <__reset+0xfb0f3f74>
8111403c:	a825883a 	mov	r18,r21
81114040:	8445c83a 	sub	r2,r16,r17
81114044:	00c003c4 	movi	r3,15
81114048:	18802636 	bltu	r3,r2,811140e4 <_realloc_r+0x1dc>
8111404c:	99800117 	ldw	r6,4(r19)
81114050:	9c07883a 	add	r3,r19,r16
81114054:	3180004c 	andi	r6,r6,1
81114058:	3420b03a 	or	r16,r6,r16
8111405c:	9c000115 	stw	r16,4(r19)
81114060:	18800117 	ldw	r2,4(r3)
81114064:	10800054 	ori	r2,r2,1
81114068:	18800115 	stw	r2,4(r3)
8111406c:	a009883a 	mov	r4,r20
81114070:	1119b840 	call	81119b84 <__malloc_unlock>
81114074:	9005883a 	mov	r2,r18
81114078:	dfc00917 	ldw	ra,36(sp)
8111407c:	df000817 	ldw	fp,32(sp)
81114080:	ddc00717 	ldw	r23,28(sp)
81114084:	dd800617 	ldw	r22,24(sp)
81114088:	dd400517 	ldw	r21,20(sp)
8111408c:	dd000417 	ldw	r20,16(sp)
81114090:	dcc00317 	ldw	r19,12(sp)
81114094:	dc800217 	ldw	r18,8(sp)
81114098:	dc400117 	ldw	r17,4(sp)
8111409c:	dc000017 	ldw	r16,0(sp)
811140a0:	dec00a04 	addi	sp,sp,40
811140a4:	f800283a 	ret
811140a8:	017fff04 	movi	r5,-4
811140ac:	414a703a 	and	r5,r8,r5
811140b0:	814d883a 	add	r6,r16,r5
811140b4:	30c01f16 	blt	r6,r3,81114134 <_realloc_r+0x22c>
811140b8:	20800317 	ldw	r2,12(r4)
811140bc:	20c00217 	ldw	r3,8(r4)
811140c0:	a825883a 	mov	r18,r21
811140c4:	3021883a 	mov	r16,r6
811140c8:	18800315 	stw	r2,12(r3)
811140cc:	10c00215 	stw	r3,8(r2)
811140d0:	003fdb06 	br	81114040 <__reset+0xfb0f4040>
811140d4:	00800304 	movi	r2,12
811140d8:	a0800015 	stw	r2,0(r20)
811140dc:	0005883a 	mov	r2,zero
811140e0:	003fe506 	br	81114078 <__reset+0xfb0f4078>
811140e4:	98c00117 	ldw	r3,4(r19)
811140e8:	9c4b883a 	add	r5,r19,r17
811140ec:	11000054 	ori	r4,r2,1
811140f0:	18c0004c 	andi	r3,r3,1
811140f4:	1c62b03a 	or	r17,r3,r17
811140f8:	9c400115 	stw	r17,4(r19)
811140fc:	29000115 	stw	r4,4(r5)
81114100:	2885883a 	add	r2,r5,r2
81114104:	10c00117 	ldw	r3,4(r2)
81114108:	29400204 	addi	r5,r5,8
8111410c:	a009883a 	mov	r4,r20
81114110:	18c00054 	ori	r3,r3,1
81114114:	10c00115 	stw	r3,4(r2)
81114118:	11116440 	call	81111644 <_free_r>
8111411c:	003fd306 	br	8111406c <__reset+0xfb0f406c>
81114120:	017fff04 	movi	r5,-4
81114124:	414a703a 	and	r5,r8,r5
81114128:	89800404 	addi	r6,r17,16
8111412c:	8151883a 	add	r8,r16,r5
81114130:	4180590e 	bge	r8,r6,81114298 <_realloc_r+0x390>
81114134:	1080004c 	andi	r2,r2,1
81114138:	103f9e1e 	bne	r2,zero,81113fb4 <__reset+0xfb0f3fb4>
8111413c:	adbffe17 	ldw	r22,-8(r21)
81114140:	00bfff04 	movi	r2,-4
81114144:	9dadc83a 	sub	r22,r19,r22
81114148:	b1800117 	ldw	r6,4(r22)
8111414c:	3084703a 	and	r2,r6,r2
81114150:	20002026 	beq	r4,zero,811141d4 <_realloc_r+0x2cc>
81114154:	80af883a 	add	r23,r16,r2
81114158:	b96f883a 	add	r23,r23,r5
8111415c:	21c05f26 	beq	r4,r7,811142dc <_realloc_r+0x3d4>
81114160:	b8c01c16 	blt	r23,r3,811141d4 <_realloc_r+0x2cc>
81114164:	20800317 	ldw	r2,12(r4)
81114168:	20c00217 	ldw	r3,8(r4)
8111416c:	81bfff04 	addi	r6,r16,-4
81114170:	01000904 	movi	r4,36
81114174:	18800315 	stw	r2,12(r3)
81114178:	10c00215 	stw	r3,8(r2)
8111417c:	b0c00217 	ldw	r3,8(r22)
81114180:	b0800317 	ldw	r2,12(r22)
81114184:	b4800204 	addi	r18,r22,8
81114188:	18800315 	stw	r2,12(r3)
8111418c:	10c00215 	stw	r3,8(r2)
81114190:	21801b36 	bltu	r4,r6,81114200 <_realloc_r+0x2f8>
81114194:	008004c4 	movi	r2,19
81114198:	1180352e 	bgeu	r2,r6,81114270 <_realloc_r+0x368>
8111419c:	a8800017 	ldw	r2,0(r21)
811141a0:	b0800215 	stw	r2,8(r22)
811141a4:	a8800117 	ldw	r2,4(r21)
811141a8:	b0800315 	stw	r2,12(r22)
811141ac:	008006c4 	movi	r2,27
811141b0:	11807f36 	bltu	r2,r6,811143b0 <_realloc_r+0x4a8>
811141b4:	b0800404 	addi	r2,r22,16
811141b8:	ad400204 	addi	r21,r21,8
811141bc:	00002d06 	br	81114274 <_realloc_r+0x36c>
811141c0:	adbffe17 	ldw	r22,-8(r21)
811141c4:	00bfff04 	movi	r2,-4
811141c8:	9dadc83a 	sub	r22,r19,r22
811141cc:	b1000117 	ldw	r4,4(r22)
811141d0:	2084703a 	and	r2,r4,r2
811141d4:	b03f7726 	beq	r22,zero,81113fb4 <__reset+0xfb0f3fb4>
811141d8:	80af883a 	add	r23,r16,r2
811141dc:	b8ff7516 	blt	r23,r3,81113fb4 <__reset+0xfb0f3fb4>
811141e0:	b0800317 	ldw	r2,12(r22)
811141e4:	b0c00217 	ldw	r3,8(r22)
811141e8:	81bfff04 	addi	r6,r16,-4
811141ec:	01000904 	movi	r4,36
811141f0:	18800315 	stw	r2,12(r3)
811141f4:	10c00215 	stw	r3,8(r2)
811141f8:	b4800204 	addi	r18,r22,8
811141fc:	21bfe52e 	bgeu	r4,r6,81114194 <__reset+0xfb0f4194>
81114200:	a80b883a 	mov	r5,r21
81114204:	9009883a 	mov	r4,r18
81114208:	1112b200 	call	81112b20 <memmove>
8111420c:	b821883a 	mov	r16,r23
81114210:	b027883a 	mov	r19,r22
81114214:	003f8a06 	br	81114040 <__reset+0xfb0f4040>
81114218:	300b883a 	mov	r5,r6
8111421c:	dfc00917 	ldw	ra,36(sp)
81114220:	df000817 	ldw	fp,32(sp)
81114224:	ddc00717 	ldw	r23,28(sp)
81114228:	dd800617 	ldw	r22,24(sp)
8111422c:	dd400517 	ldw	r21,20(sp)
81114230:	dd000417 	ldw	r20,16(sp)
81114234:	dcc00317 	ldw	r19,12(sp)
81114238:	dc800217 	ldw	r18,8(sp)
8111423c:	dc400117 	ldw	r17,4(sp)
81114240:	dc000017 	ldw	r16,0(sp)
81114244:	dec00a04 	addi	sp,sp,40
81114248:	11122301 	jmpi	81112230 <_malloc_r>
8111424c:	a8c00017 	ldw	r3,0(r21)
81114250:	90c00015 	stw	r3,0(r18)
81114254:	a8c00117 	ldw	r3,4(r21)
81114258:	90c00115 	stw	r3,4(r18)
8111425c:	00c006c4 	movi	r3,27
81114260:	19804536 	bltu	r3,r6,81114378 <_realloc_r+0x470>
81114264:	90800204 	addi	r2,r18,8
81114268:	a8c00204 	addi	r3,r21,8
8111426c:	003f6306 	br	81113ffc <__reset+0xfb0f3ffc>
81114270:	9005883a 	mov	r2,r18
81114274:	a8c00017 	ldw	r3,0(r21)
81114278:	b821883a 	mov	r16,r23
8111427c:	b027883a 	mov	r19,r22
81114280:	10c00015 	stw	r3,0(r2)
81114284:	a8c00117 	ldw	r3,4(r21)
81114288:	10c00115 	stw	r3,4(r2)
8111428c:	a8c00217 	ldw	r3,8(r21)
81114290:	10c00215 	stw	r3,8(r2)
81114294:	003f6a06 	br	81114040 <__reset+0xfb0f4040>
81114298:	9c67883a 	add	r19,r19,r17
8111429c:	4445c83a 	sub	r2,r8,r17
811142a0:	e4c00215 	stw	r19,8(fp)
811142a4:	10800054 	ori	r2,r2,1
811142a8:	98800115 	stw	r2,4(r19)
811142ac:	a8bfff17 	ldw	r2,-4(r21)
811142b0:	a009883a 	mov	r4,r20
811142b4:	1080004c 	andi	r2,r2,1
811142b8:	1462b03a 	or	r17,r2,r17
811142bc:	ac7fff15 	stw	r17,-4(r21)
811142c0:	1119b840 	call	81119b84 <__malloc_unlock>
811142c4:	a805883a 	mov	r2,r21
811142c8:	003f6b06 	br	81114078 <__reset+0xfb0f4078>
811142cc:	a80b883a 	mov	r5,r21
811142d0:	9009883a 	mov	r4,r18
811142d4:	1112b200 	call	81112b20 <memmove>
811142d8:	003f4e06 	br	81114014 <__reset+0xfb0f4014>
811142dc:	89000404 	addi	r4,r17,16
811142e0:	b93fbc16 	blt	r23,r4,811141d4 <__reset+0xfb0f41d4>
811142e4:	b0800317 	ldw	r2,12(r22)
811142e8:	b0c00217 	ldw	r3,8(r22)
811142ec:	81bfff04 	addi	r6,r16,-4
811142f0:	01000904 	movi	r4,36
811142f4:	18800315 	stw	r2,12(r3)
811142f8:	10c00215 	stw	r3,8(r2)
811142fc:	b4800204 	addi	r18,r22,8
81114300:	21804336 	bltu	r4,r6,81114410 <_realloc_r+0x508>
81114304:	008004c4 	movi	r2,19
81114308:	11803f2e 	bgeu	r2,r6,81114408 <_realloc_r+0x500>
8111430c:	a8800017 	ldw	r2,0(r21)
81114310:	b0800215 	stw	r2,8(r22)
81114314:	a8800117 	ldw	r2,4(r21)
81114318:	b0800315 	stw	r2,12(r22)
8111431c:	008006c4 	movi	r2,27
81114320:	11803f36 	bltu	r2,r6,81114420 <_realloc_r+0x518>
81114324:	b0800404 	addi	r2,r22,16
81114328:	ad400204 	addi	r21,r21,8
8111432c:	a8c00017 	ldw	r3,0(r21)
81114330:	10c00015 	stw	r3,0(r2)
81114334:	a8c00117 	ldw	r3,4(r21)
81114338:	10c00115 	stw	r3,4(r2)
8111433c:	a8c00217 	ldw	r3,8(r21)
81114340:	10c00215 	stw	r3,8(r2)
81114344:	b447883a 	add	r3,r22,r17
81114348:	bc45c83a 	sub	r2,r23,r17
8111434c:	e0c00215 	stw	r3,8(fp)
81114350:	10800054 	ori	r2,r2,1
81114354:	18800115 	stw	r2,4(r3)
81114358:	b0800117 	ldw	r2,4(r22)
8111435c:	a009883a 	mov	r4,r20
81114360:	1080004c 	andi	r2,r2,1
81114364:	1462b03a 	or	r17,r2,r17
81114368:	b4400115 	stw	r17,4(r22)
8111436c:	1119b840 	call	81119b84 <__malloc_unlock>
81114370:	9005883a 	mov	r2,r18
81114374:	003f4006 	br	81114078 <__reset+0xfb0f4078>
81114378:	a8c00217 	ldw	r3,8(r21)
8111437c:	90c00215 	stw	r3,8(r18)
81114380:	a8c00317 	ldw	r3,12(r21)
81114384:	90c00315 	stw	r3,12(r18)
81114388:	30801126 	beq	r6,r2,811143d0 <_realloc_r+0x4c8>
8111438c:	90800404 	addi	r2,r18,16
81114390:	a8c00404 	addi	r3,r21,16
81114394:	003f1906 	br	81113ffc <__reset+0xfb0f3ffc>
81114398:	90ffff17 	ldw	r3,-4(r18)
8111439c:	00bfff04 	movi	r2,-4
811143a0:	a825883a 	mov	r18,r21
811143a4:	1884703a 	and	r2,r3,r2
811143a8:	80a1883a 	add	r16,r16,r2
811143ac:	003f2406 	br	81114040 <__reset+0xfb0f4040>
811143b0:	a8800217 	ldw	r2,8(r21)
811143b4:	b0800415 	stw	r2,16(r22)
811143b8:	a8800317 	ldw	r2,12(r21)
811143bc:	b0800515 	stw	r2,20(r22)
811143c0:	31000a26 	beq	r6,r4,811143ec <_realloc_r+0x4e4>
811143c4:	b0800604 	addi	r2,r22,24
811143c8:	ad400404 	addi	r21,r21,16
811143cc:	003fa906 	br	81114274 <__reset+0xfb0f4274>
811143d0:	a9000417 	ldw	r4,16(r21)
811143d4:	90800604 	addi	r2,r18,24
811143d8:	a8c00604 	addi	r3,r21,24
811143dc:	91000415 	stw	r4,16(r18)
811143e0:	a9000517 	ldw	r4,20(r21)
811143e4:	91000515 	stw	r4,20(r18)
811143e8:	003f0406 	br	81113ffc <__reset+0xfb0f3ffc>
811143ec:	a8c00417 	ldw	r3,16(r21)
811143f0:	ad400604 	addi	r21,r21,24
811143f4:	b0800804 	addi	r2,r22,32
811143f8:	b0c00615 	stw	r3,24(r22)
811143fc:	a8ffff17 	ldw	r3,-4(r21)
81114400:	b0c00715 	stw	r3,28(r22)
81114404:	003f9b06 	br	81114274 <__reset+0xfb0f4274>
81114408:	9005883a 	mov	r2,r18
8111440c:	003fc706 	br	8111432c <__reset+0xfb0f432c>
81114410:	a80b883a 	mov	r5,r21
81114414:	9009883a 	mov	r4,r18
81114418:	1112b200 	call	81112b20 <memmove>
8111441c:	003fc906 	br	81114344 <__reset+0xfb0f4344>
81114420:	a8800217 	ldw	r2,8(r21)
81114424:	b0800415 	stw	r2,16(r22)
81114428:	a8800317 	ldw	r2,12(r21)
8111442c:	b0800515 	stw	r2,20(r22)
81114430:	31000726 	beq	r6,r4,81114450 <_realloc_r+0x548>
81114434:	b0800604 	addi	r2,r22,24
81114438:	ad400404 	addi	r21,r21,16
8111443c:	003fbb06 	br	8111432c <__reset+0xfb0f432c>
81114440:	a009883a 	mov	r4,r20
81114444:	1119b840 	call	81119b84 <__malloc_unlock>
81114448:	0005883a 	mov	r2,zero
8111444c:	003f0a06 	br	81114078 <__reset+0xfb0f4078>
81114450:	a8c00417 	ldw	r3,16(r21)
81114454:	ad400604 	addi	r21,r21,24
81114458:	b0800804 	addi	r2,r22,32
8111445c:	b0c00615 	stw	r3,24(r22)
81114460:	a8ffff17 	ldw	r3,-4(r21)
81114464:	b0c00715 	stw	r3,28(r22)
81114468:	003fb006 	br	8111432c <__reset+0xfb0f432c>

8111446c <lflush>:
8111446c:	2080030b 	ldhu	r2,12(r4)
81114470:	00c00244 	movi	r3,9
81114474:	1080024c 	andi	r2,r2,9
81114478:	10c00226 	beq	r2,r3,81114484 <lflush+0x18>
8111447c:	0005883a 	mov	r2,zero
81114480:	f800283a 	ret
81114484:	11111501 	jmpi	81111150 <fflush>

81114488 <__srefill_r>:
81114488:	defffc04 	addi	sp,sp,-16
8111448c:	dc400115 	stw	r17,4(sp)
81114490:	dc000015 	stw	r16,0(sp)
81114494:	dfc00315 	stw	ra,12(sp)
81114498:	dc800215 	stw	r18,8(sp)
8111449c:	2023883a 	mov	r17,r4
811144a0:	2821883a 	mov	r16,r5
811144a4:	20000226 	beq	r4,zero,811144b0 <__srefill_r+0x28>
811144a8:	20800e17 	ldw	r2,56(r4)
811144ac:	10003c26 	beq	r2,zero,811145a0 <__srefill_r+0x118>
811144b0:	80c0030b 	ldhu	r3,12(r16)
811144b4:	1908000c 	andi	r4,r3,8192
811144b8:	1805883a 	mov	r2,r3
811144bc:	2000071e 	bne	r4,zero,811144dc <__srefill_r+0x54>
811144c0:	81001917 	ldw	r4,100(r16)
811144c4:	18880014 	ori	r2,r3,8192
811144c8:	00f7ffc4 	movi	r3,-8193
811144cc:	20c8703a 	and	r4,r4,r3
811144d0:	8080030d 	sth	r2,12(r16)
811144d4:	1007883a 	mov	r3,r2
811144d8:	81001915 	stw	r4,100(r16)
811144dc:	80000115 	stw	zero,4(r16)
811144e0:	1100080c 	andi	r4,r2,32
811144e4:	2000571e 	bne	r4,zero,81114644 <__srefill_r+0x1bc>
811144e8:	1100010c 	andi	r4,r2,4
811144ec:	20001f26 	beq	r4,zero,8111456c <__srefill_r+0xe4>
811144f0:	81400c17 	ldw	r5,48(r16)
811144f4:	28000826 	beq	r5,zero,81114518 <__srefill_r+0x90>
811144f8:	80801004 	addi	r2,r16,64
811144fc:	28800226 	beq	r5,r2,81114508 <__srefill_r+0x80>
81114500:	8809883a 	mov	r4,r17
81114504:	11116440 	call	81111644 <_free_r>
81114508:	80800f17 	ldw	r2,60(r16)
8111450c:	80000c15 	stw	zero,48(r16)
81114510:	80800115 	stw	r2,4(r16)
81114514:	1000391e 	bne	r2,zero,811145fc <__srefill_r+0x174>
81114518:	80800417 	ldw	r2,16(r16)
8111451c:	10004b26 	beq	r2,zero,8111464c <__srefill_r+0x1c4>
81114520:	8480030b 	ldhu	r18,12(r16)
81114524:	908000cc 	andi	r2,r18,3
81114528:	10001f1e 	bne	r2,zero,811145a8 <__srefill_r+0x120>
8111452c:	81800417 	ldw	r6,16(r16)
81114530:	80800817 	ldw	r2,32(r16)
81114534:	81c00517 	ldw	r7,20(r16)
81114538:	81400717 	ldw	r5,28(r16)
8111453c:	81800015 	stw	r6,0(r16)
81114540:	8809883a 	mov	r4,r17
81114544:	103ee83a 	callr	r2
81114548:	80800115 	stw	r2,4(r16)
8111454c:	00800e0e 	bge	zero,r2,81114588 <__srefill_r+0x100>
81114550:	0005883a 	mov	r2,zero
81114554:	dfc00317 	ldw	ra,12(sp)
81114558:	dc800217 	ldw	r18,8(sp)
8111455c:	dc400117 	ldw	r17,4(sp)
81114560:	dc000017 	ldw	r16,0(sp)
81114564:	dec00404 	addi	sp,sp,16
81114568:	f800283a 	ret
8111456c:	1100040c 	andi	r4,r2,16
81114570:	20003026 	beq	r4,zero,81114634 <__srefill_r+0x1ac>
81114574:	1080020c 	andi	r2,r2,8
81114578:	1000241e 	bne	r2,zero,8111460c <__srefill_r+0x184>
8111457c:	18c00114 	ori	r3,r3,4
81114580:	80c0030d 	sth	r3,12(r16)
81114584:	003fe406 	br	81114518 <__reset+0xfb0f4518>
81114588:	80c0030b 	ldhu	r3,12(r16)
8111458c:	1000161e 	bne	r2,zero,811145e8 <__srefill_r+0x160>
81114590:	18c00814 	ori	r3,r3,32
81114594:	00bfffc4 	movi	r2,-1
81114598:	80c0030d 	sth	r3,12(r16)
8111459c:	003fed06 	br	81114554 <__reset+0xfb0f4554>
811145a0:	11114d00 	call	811114d0 <__sinit>
811145a4:	003fc206 	br	811144b0 <__reset+0xfb0f44b0>
811145a8:	00a044b4 	movhi	r2,33042
811145ac:	10873304 	addi	r2,r2,7372
811145b0:	11000017 	ldw	r4,0(r2)
811145b4:	01604474 	movhi	r5,33041
811145b8:	00800044 	movi	r2,1
811145bc:	29511b04 	addi	r5,r5,17516
811145c0:	8080030d 	sth	r2,12(r16)
811145c4:	1111e100 	call	81111e10 <_fwalk>
811145c8:	00800244 	movi	r2,9
811145cc:	8480030d 	sth	r18,12(r16)
811145d0:	9480024c 	andi	r18,r18,9
811145d4:	90bfd51e 	bne	r18,r2,8111452c <__reset+0xfb0f452c>
811145d8:	800b883a 	mov	r5,r16
811145dc:	8809883a 	mov	r4,r17
811145e0:	1110ed80 	call	81110ed8 <__sflush_r>
811145e4:	003fd106 	br	8111452c <__reset+0xfb0f452c>
811145e8:	18c01014 	ori	r3,r3,64
811145ec:	80000115 	stw	zero,4(r16)
811145f0:	00bfffc4 	movi	r2,-1
811145f4:	80c0030d 	sth	r3,12(r16)
811145f8:	003fd606 	br	81114554 <__reset+0xfb0f4554>
811145fc:	80c00e17 	ldw	r3,56(r16)
81114600:	0005883a 	mov	r2,zero
81114604:	80c00015 	stw	r3,0(r16)
81114608:	003fd206 	br	81114554 <__reset+0xfb0f4554>
8111460c:	800b883a 	mov	r5,r16
81114610:	8809883a 	mov	r4,r17
81114614:	11110f40 	call	811110f4 <_fflush_r>
81114618:	10000a1e 	bne	r2,zero,81114644 <__srefill_r+0x1bc>
8111461c:	8080030b 	ldhu	r2,12(r16)
81114620:	00fffdc4 	movi	r3,-9
81114624:	80000215 	stw	zero,8(r16)
81114628:	1886703a 	and	r3,r3,r2
8111462c:	80000615 	stw	zero,24(r16)
81114630:	003fd206 	br	8111457c <__reset+0xfb0f457c>
81114634:	00800244 	movi	r2,9
81114638:	88800015 	stw	r2,0(r17)
8111463c:	18c01014 	ori	r3,r3,64
81114640:	80c0030d 	sth	r3,12(r16)
81114644:	00bfffc4 	movi	r2,-1
81114648:	003fc206 	br	81114554 <__reset+0xfb0f4554>
8111464c:	800b883a 	mov	r5,r16
81114650:	8809883a 	mov	r4,r17
81114654:	11120740 	call	81112074 <__smakebuf_r>
81114658:	003fb106 	br	81114520 <__reset+0xfb0f4520>

8111465c <__fpclassifyd>:
8111465c:	00a00034 	movhi	r2,32768
81114660:	10bfffc4 	addi	r2,r2,-1
81114664:	2884703a 	and	r2,r5,r2
81114668:	10000726 	beq	r2,zero,81114688 <__fpclassifyd+0x2c>
8111466c:	00fffc34 	movhi	r3,65520
81114670:	019ff834 	movhi	r6,32736
81114674:	28c7883a 	add	r3,r5,r3
81114678:	31bfffc4 	addi	r6,r6,-1
8111467c:	30c00536 	bltu	r6,r3,81114694 <__fpclassifyd+0x38>
81114680:	00800104 	movi	r2,4
81114684:	f800283a 	ret
81114688:	2000021e 	bne	r4,zero,81114694 <__fpclassifyd+0x38>
8111468c:	00800084 	movi	r2,2
81114690:	f800283a 	ret
81114694:	00dffc34 	movhi	r3,32752
81114698:	019ff834 	movhi	r6,32736
8111469c:	28cb883a 	add	r5,r5,r3
811146a0:	31bfffc4 	addi	r6,r6,-1
811146a4:	317ff62e 	bgeu	r6,r5,81114680 <__reset+0xfb0f4680>
811146a8:	01400434 	movhi	r5,16
811146ac:	297fffc4 	addi	r5,r5,-1
811146b0:	28800236 	bltu	r5,r2,811146bc <__fpclassifyd+0x60>
811146b4:	008000c4 	movi	r2,3
811146b8:	f800283a 	ret
811146bc:	10c00226 	beq	r2,r3,811146c8 <__fpclassifyd+0x6c>
811146c0:	0005883a 	mov	r2,zero
811146c4:	f800283a 	ret
811146c8:	2005003a 	cmpeq	r2,r4,zero
811146cc:	f800283a 	ret

811146d0 <_sbrk_r>:
811146d0:	defffd04 	addi	sp,sp,-12
811146d4:	dc000015 	stw	r16,0(sp)
811146d8:	042044b4 	movhi	r16,33042
811146dc:	dc400115 	stw	r17,4(sp)
811146e0:	84076c04 	addi	r16,r16,7600
811146e4:	2023883a 	mov	r17,r4
811146e8:	2809883a 	mov	r4,r5
811146ec:	dfc00215 	stw	ra,8(sp)
811146f0:	80000015 	stw	zero,0(r16)
811146f4:	1119fac0 	call	81119fac <sbrk>
811146f8:	00ffffc4 	movi	r3,-1
811146fc:	10c00526 	beq	r2,r3,81114714 <_sbrk_r+0x44>
81114700:	dfc00217 	ldw	ra,8(sp)
81114704:	dc400117 	ldw	r17,4(sp)
81114708:	dc000017 	ldw	r16,0(sp)
8111470c:	dec00304 	addi	sp,sp,12
81114710:	f800283a 	ret
81114714:	80c00017 	ldw	r3,0(r16)
81114718:	183ff926 	beq	r3,zero,81114700 <__reset+0xfb0f4700>
8111471c:	88c00015 	stw	r3,0(r17)
81114720:	003ff706 	br	81114700 <__reset+0xfb0f4700>

81114724 <__sread>:
81114724:	defffe04 	addi	sp,sp,-8
81114728:	dc000015 	stw	r16,0(sp)
8111472c:	2821883a 	mov	r16,r5
81114730:	2940038f 	ldh	r5,14(r5)
81114734:	dfc00115 	stw	ra,4(sp)
81114738:	11166700 	call	81116670 <_read_r>
8111473c:	10000716 	blt	r2,zero,8111475c <__sread+0x38>
81114740:	80c01417 	ldw	r3,80(r16)
81114744:	1887883a 	add	r3,r3,r2
81114748:	80c01415 	stw	r3,80(r16)
8111474c:	dfc00117 	ldw	ra,4(sp)
81114750:	dc000017 	ldw	r16,0(sp)
81114754:	dec00204 	addi	sp,sp,8
81114758:	f800283a 	ret
8111475c:	80c0030b 	ldhu	r3,12(r16)
81114760:	18fbffcc 	andi	r3,r3,61439
81114764:	80c0030d 	sth	r3,12(r16)
81114768:	dfc00117 	ldw	ra,4(sp)
8111476c:	dc000017 	ldw	r16,0(sp)
81114770:	dec00204 	addi	sp,sp,8
81114774:	f800283a 	ret

81114778 <__seofread>:
81114778:	0005883a 	mov	r2,zero
8111477c:	f800283a 	ret

81114780 <__swrite>:
81114780:	2880030b 	ldhu	r2,12(r5)
81114784:	defffb04 	addi	sp,sp,-20
81114788:	dcc00315 	stw	r19,12(sp)
8111478c:	dc800215 	stw	r18,8(sp)
81114790:	dc400115 	stw	r17,4(sp)
81114794:	dc000015 	stw	r16,0(sp)
81114798:	dfc00415 	stw	ra,16(sp)
8111479c:	10c0400c 	andi	r3,r2,256
811147a0:	2821883a 	mov	r16,r5
811147a4:	2023883a 	mov	r17,r4
811147a8:	3025883a 	mov	r18,r6
811147ac:	3827883a 	mov	r19,r7
811147b0:	18000526 	beq	r3,zero,811147c8 <__swrite+0x48>
811147b4:	2940038f 	ldh	r5,14(r5)
811147b8:	01c00084 	movi	r7,2
811147bc:	000d883a 	mov	r6,zero
811147c0:	11166100 	call	81116610 <_lseek_r>
811147c4:	8080030b 	ldhu	r2,12(r16)
811147c8:	8140038f 	ldh	r5,14(r16)
811147cc:	10bbffcc 	andi	r2,r2,61439
811147d0:	980f883a 	mov	r7,r19
811147d4:	900d883a 	mov	r6,r18
811147d8:	8809883a 	mov	r4,r17
811147dc:	8080030d 	sth	r2,12(r16)
811147e0:	dfc00417 	ldw	ra,16(sp)
811147e4:	dcc00317 	ldw	r19,12(sp)
811147e8:	dc800217 	ldw	r18,8(sp)
811147ec:	dc400117 	ldw	r17,4(sp)
811147f0:	dc000017 	ldw	r16,0(sp)
811147f4:	dec00504 	addi	sp,sp,20
811147f8:	11160dc1 	jmpi	811160dc <_write_r>

811147fc <__sseek>:
811147fc:	defffe04 	addi	sp,sp,-8
81114800:	dc000015 	stw	r16,0(sp)
81114804:	2821883a 	mov	r16,r5
81114808:	2940038f 	ldh	r5,14(r5)
8111480c:	dfc00115 	stw	ra,4(sp)
81114810:	11166100 	call	81116610 <_lseek_r>
81114814:	00ffffc4 	movi	r3,-1
81114818:	10c00826 	beq	r2,r3,8111483c <__sseek+0x40>
8111481c:	80c0030b 	ldhu	r3,12(r16)
81114820:	80801415 	stw	r2,80(r16)
81114824:	18c40014 	ori	r3,r3,4096
81114828:	80c0030d 	sth	r3,12(r16)
8111482c:	dfc00117 	ldw	ra,4(sp)
81114830:	dc000017 	ldw	r16,0(sp)
81114834:	dec00204 	addi	sp,sp,8
81114838:	f800283a 	ret
8111483c:	80c0030b 	ldhu	r3,12(r16)
81114840:	18fbffcc 	andi	r3,r3,61439
81114844:	80c0030d 	sth	r3,12(r16)
81114848:	dfc00117 	ldw	ra,4(sp)
8111484c:	dc000017 	ldw	r16,0(sp)
81114850:	dec00204 	addi	sp,sp,8
81114854:	f800283a 	ret

81114858 <__sclose>:
81114858:	2940038f 	ldh	r5,14(r5)
8111485c:	111613c1 	jmpi	8111613c <_close_r>

81114860 <strcmp>:
81114860:	2144b03a 	or	r2,r4,r5
81114864:	108000cc 	andi	r2,r2,3
81114868:	1000171e 	bne	r2,zero,811148c8 <strcmp+0x68>
8111486c:	20800017 	ldw	r2,0(r4)
81114870:	28c00017 	ldw	r3,0(r5)
81114874:	10c0141e 	bne	r2,r3,811148c8 <strcmp+0x68>
81114878:	027fbff4 	movhi	r9,65279
8111487c:	4a7fbfc4 	addi	r9,r9,-257
81114880:	0086303a 	nor	r3,zero,r2
81114884:	02202074 	movhi	r8,32897
81114888:	1245883a 	add	r2,r2,r9
8111488c:	42202004 	addi	r8,r8,-32640
81114890:	10c4703a 	and	r2,r2,r3
81114894:	1204703a 	and	r2,r2,r8
81114898:	10000226 	beq	r2,zero,811148a4 <strcmp+0x44>
8111489c:	00002306 	br	8111492c <strcmp+0xcc>
811148a0:	1000221e 	bne	r2,zero,8111492c <strcmp+0xcc>
811148a4:	21000104 	addi	r4,r4,4
811148a8:	20c00017 	ldw	r3,0(r4)
811148ac:	29400104 	addi	r5,r5,4
811148b0:	29800017 	ldw	r6,0(r5)
811148b4:	1a4f883a 	add	r7,r3,r9
811148b8:	00c4303a 	nor	r2,zero,r3
811148bc:	3884703a 	and	r2,r7,r2
811148c0:	1204703a 	and	r2,r2,r8
811148c4:	19bff626 	beq	r3,r6,811148a0 <__reset+0xfb0f48a0>
811148c8:	20800003 	ldbu	r2,0(r4)
811148cc:	10c03fcc 	andi	r3,r2,255
811148d0:	18c0201c 	xori	r3,r3,128
811148d4:	18ffe004 	addi	r3,r3,-128
811148d8:	18000c26 	beq	r3,zero,8111490c <strcmp+0xac>
811148dc:	29800007 	ldb	r6,0(r5)
811148e0:	19800326 	beq	r3,r6,811148f0 <strcmp+0x90>
811148e4:	00001306 	br	81114934 <strcmp+0xd4>
811148e8:	29800007 	ldb	r6,0(r5)
811148ec:	11800b1e 	bne	r2,r6,8111491c <strcmp+0xbc>
811148f0:	21000044 	addi	r4,r4,1
811148f4:	20c00003 	ldbu	r3,0(r4)
811148f8:	29400044 	addi	r5,r5,1
811148fc:	18803fcc 	andi	r2,r3,255
81114900:	1080201c 	xori	r2,r2,128
81114904:	10bfe004 	addi	r2,r2,-128
81114908:	103ff71e 	bne	r2,zero,811148e8 <__reset+0xfb0f48e8>
8111490c:	0007883a 	mov	r3,zero
81114910:	28800003 	ldbu	r2,0(r5)
81114914:	1885c83a 	sub	r2,r3,r2
81114918:	f800283a 	ret
8111491c:	28800003 	ldbu	r2,0(r5)
81114920:	18c03fcc 	andi	r3,r3,255
81114924:	1885c83a 	sub	r2,r3,r2
81114928:	f800283a 	ret
8111492c:	0005883a 	mov	r2,zero
81114930:	f800283a 	ret
81114934:	10c03fcc 	andi	r3,r2,255
81114938:	003ff506 	br	81114910 <__reset+0xfb0f4910>

8111493c <__sprint_r.part.0>:
8111493c:	28801917 	ldw	r2,100(r5)
81114940:	defff604 	addi	sp,sp,-40
81114944:	dd400515 	stw	r21,20(sp)
81114948:	dfc00915 	stw	ra,36(sp)
8111494c:	df000815 	stw	fp,32(sp)
81114950:	ddc00715 	stw	r23,28(sp)
81114954:	dd800615 	stw	r22,24(sp)
81114958:	dd000415 	stw	r20,16(sp)
8111495c:	dcc00315 	stw	r19,12(sp)
81114960:	dc800215 	stw	r18,8(sp)
81114964:	dc400115 	stw	r17,4(sp)
81114968:	dc000015 	stw	r16,0(sp)
8111496c:	1088000c 	andi	r2,r2,8192
81114970:	302b883a 	mov	r21,r6
81114974:	10002e26 	beq	r2,zero,81114a30 <__sprint_r.part.0+0xf4>
81114978:	30800217 	ldw	r2,8(r6)
8111497c:	35800017 	ldw	r22,0(r6)
81114980:	10002926 	beq	r2,zero,81114a28 <__sprint_r.part.0+0xec>
81114984:	2827883a 	mov	r19,r5
81114988:	2029883a 	mov	r20,r4
8111498c:	b5c00104 	addi	r23,r22,4
81114990:	04bfffc4 	movi	r18,-1
81114994:	bc400017 	ldw	r17,0(r23)
81114998:	b4000017 	ldw	r16,0(r22)
8111499c:	0039883a 	mov	fp,zero
811149a0:	8822d0ba 	srli	r17,r17,2
811149a4:	8800031e 	bne	r17,zero,811149b4 <__sprint_r.part.0+0x78>
811149a8:	00001806 	br	81114a0c <__sprint_r.part.0+0xd0>
811149ac:	84000104 	addi	r16,r16,4
811149b0:	8f001526 	beq	r17,fp,81114a08 <__sprint_r.part.0+0xcc>
811149b4:	81400017 	ldw	r5,0(r16)
811149b8:	980d883a 	mov	r6,r19
811149bc:	a009883a 	mov	r4,r20
811149c0:	11164bc0 	call	811164bc <_fputwc_r>
811149c4:	e7000044 	addi	fp,fp,1
811149c8:	14bff81e 	bne	r2,r18,811149ac <__reset+0xfb0f49ac>
811149cc:	9005883a 	mov	r2,r18
811149d0:	a8000215 	stw	zero,8(r21)
811149d4:	a8000115 	stw	zero,4(r21)
811149d8:	dfc00917 	ldw	ra,36(sp)
811149dc:	df000817 	ldw	fp,32(sp)
811149e0:	ddc00717 	ldw	r23,28(sp)
811149e4:	dd800617 	ldw	r22,24(sp)
811149e8:	dd400517 	ldw	r21,20(sp)
811149ec:	dd000417 	ldw	r20,16(sp)
811149f0:	dcc00317 	ldw	r19,12(sp)
811149f4:	dc800217 	ldw	r18,8(sp)
811149f8:	dc400117 	ldw	r17,4(sp)
811149fc:	dc000017 	ldw	r16,0(sp)
81114a00:	dec00a04 	addi	sp,sp,40
81114a04:	f800283a 	ret
81114a08:	a8800217 	ldw	r2,8(r21)
81114a0c:	8c63883a 	add	r17,r17,r17
81114a10:	8c63883a 	add	r17,r17,r17
81114a14:	1445c83a 	sub	r2,r2,r17
81114a18:	a8800215 	stw	r2,8(r21)
81114a1c:	b5800204 	addi	r22,r22,8
81114a20:	bdc00204 	addi	r23,r23,8
81114a24:	103fdb1e 	bne	r2,zero,81114994 <__reset+0xfb0f4994>
81114a28:	0005883a 	mov	r2,zero
81114a2c:	003fe806 	br	811149d0 <__reset+0xfb0f49d0>
81114a30:	11119540 	call	81111954 <__sfvwrite_r>
81114a34:	003fe606 	br	811149d0 <__reset+0xfb0f49d0>

81114a38 <__sprint_r>:
81114a38:	30c00217 	ldw	r3,8(r6)
81114a3c:	18000126 	beq	r3,zero,81114a44 <__sprint_r+0xc>
81114a40:	111493c1 	jmpi	8111493c <__sprint_r.part.0>
81114a44:	30000115 	stw	zero,4(r6)
81114a48:	0005883a 	mov	r2,zero
81114a4c:	f800283a 	ret

81114a50 <___vfiprintf_internal_r>:
81114a50:	deffc904 	addi	sp,sp,-220
81114a54:	df003515 	stw	fp,212(sp)
81114a58:	dd003115 	stw	r20,196(sp)
81114a5c:	dfc03615 	stw	ra,216(sp)
81114a60:	ddc03415 	stw	r23,208(sp)
81114a64:	dd803315 	stw	r22,204(sp)
81114a68:	dd403215 	stw	r21,200(sp)
81114a6c:	dcc03015 	stw	r19,192(sp)
81114a70:	dc802f15 	stw	r18,188(sp)
81114a74:	dc402e15 	stw	r17,184(sp)
81114a78:	dc002d15 	stw	r16,180(sp)
81114a7c:	d9002015 	stw	r4,128(sp)
81114a80:	d9c02215 	stw	r7,136(sp)
81114a84:	2829883a 	mov	r20,r5
81114a88:	3039883a 	mov	fp,r6
81114a8c:	20000226 	beq	r4,zero,81114a98 <___vfiprintf_internal_r+0x48>
81114a90:	20800e17 	ldw	r2,56(r4)
81114a94:	1000cf26 	beq	r2,zero,81114dd4 <___vfiprintf_internal_r+0x384>
81114a98:	a080030b 	ldhu	r2,12(r20)
81114a9c:	10c8000c 	andi	r3,r2,8192
81114aa0:	1800061e 	bne	r3,zero,81114abc <___vfiprintf_internal_r+0x6c>
81114aa4:	a1001917 	ldw	r4,100(r20)
81114aa8:	00f7ffc4 	movi	r3,-8193
81114aac:	10880014 	ori	r2,r2,8192
81114ab0:	20c6703a 	and	r3,r4,r3
81114ab4:	a080030d 	sth	r2,12(r20)
81114ab8:	a0c01915 	stw	r3,100(r20)
81114abc:	10c0020c 	andi	r3,r2,8
81114ac0:	1800a926 	beq	r3,zero,81114d68 <___vfiprintf_internal_r+0x318>
81114ac4:	a0c00417 	ldw	r3,16(r20)
81114ac8:	1800a726 	beq	r3,zero,81114d68 <___vfiprintf_internal_r+0x318>
81114acc:	1080068c 	andi	r2,r2,26
81114ad0:	00c00284 	movi	r3,10
81114ad4:	10c0ac26 	beq	r2,r3,81114d88 <___vfiprintf_internal_r+0x338>
81114ad8:	da801a04 	addi	r10,sp,104
81114adc:	da801e15 	stw	r10,120(sp)
81114ae0:	d8801e17 	ldw	r2,120(sp)
81114ae4:	da8019c4 	addi	r10,sp,103
81114ae8:	05a044b4 	movhi	r22,33042
81114aec:	05e044b4 	movhi	r23,33042
81114af0:	da801f15 	stw	r10,124(sp)
81114af4:	1295c83a 	sub	r10,r2,r10
81114af8:	b5bf6604 	addi	r22,r22,-616
81114afc:	bdff6204 	addi	r23,r23,-632
81114b00:	dec01a15 	stw	sp,104(sp)
81114b04:	d8001c15 	stw	zero,112(sp)
81114b08:	d8001b15 	stw	zero,108(sp)
81114b0c:	d8002615 	stw	zero,152(sp)
81114b10:	d8002315 	stw	zero,140(sp)
81114b14:	da802715 	stw	r10,156(sp)
81114b18:	d811883a 	mov	r8,sp
81114b1c:	dd002115 	stw	r20,132(sp)
81114b20:	e021883a 	mov	r16,fp
81114b24:	80800007 	ldb	r2,0(r16)
81114b28:	1003ea26 	beq	r2,zero,81115ad4 <___vfiprintf_internal_r+0x1084>
81114b2c:	00c00944 	movi	r3,37
81114b30:	8025883a 	mov	r18,r16
81114b34:	10c0021e 	bne	r2,r3,81114b40 <___vfiprintf_internal_r+0xf0>
81114b38:	00001606 	br	81114b94 <___vfiprintf_internal_r+0x144>
81114b3c:	10c00326 	beq	r2,r3,81114b4c <___vfiprintf_internal_r+0xfc>
81114b40:	94800044 	addi	r18,r18,1
81114b44:	90800007 	ldb	r2,0(r18)
81114b48:	103ffc1e 	bne	r2,zero,81114b3c <__reset+0xfb0f4b3c>
81114b4c:	9423c83a 	sub	r17,r18,r16
81114b50:	88001026 	beq	r17,zero,81114b94 <___vfiprintf_internal_r+0x144>
81114b54:	d8c01c17 	ldw	r3,112(sp)
81114b58:	d8801b17 	ldw	r2,108(sp)
81114b5c:	44000015 	stw	r16,0(r8)
81114b60:	88c7883a 	add	r3,r17,r3
81114b64:	10800044 	addi	r2,r2,1
81114b68:	44400115 	stw	r17,4(r8)
81114b6c:	d8c01c15 	stw	r3,112(sp)
81114b70:	d8801b15 	stw	r2,108(sp)
81114b74:	010001c4 	movi	r4,7
81114b78:	2080760e 	bge	r4,r2,81114d54 <___vfiprintf_internal_r+0x304>
81114b7c:	1803821e 	bne	r3,zero,81115988 <___vfiprintf_internal_r+0xf38>
81114b80:	da802317 	ldw	r10,140(sp)
81114b84:	d8001b15 	stw	zero,108(sp)
81114b88:	d811883a 	mov	r8,sp
81114b8c:	5455883a 	add	r10,r10,r17
81114b90:	da802315 	stw	r10,140(sp)
81114b94:	90800007 	ldb	r2,0(r18)
81114b98:	10044626 	beq	r2,zero,81115cb4 <___vfiprintf_internal_r+0x1264>
81114b9c:	90c00047 	ldb	r3,1(r18)
81114ba0:	94000044 	addi	r16,r18,1
81114ba4:	d8001d85 	stb	zero,118(sp)
81114ba8:	0009883a 	mov	r4,zero
81114bac:	000f883a 	mov	r7,zero
81114bb0:	027fffc4 	movi	r9,-1
81114bb4:	0023883a 	mov	r17,zero
81114bb8:	0029883a 	mov	r20,zero
81114bbc:	01401604 	movi	r5,88
81114bc0:	01800244 	movi	r6,9
81114bc4:	03400a84 	movi	r13,42
81114bc8:	03001b04 	movi	r12,108
81114bcc:	84000044 	addi	r16,r16,1
81114bd0:	18bff804 	addi	r2,r3,-32
81114bd4:	28827336 	bltu	r5,r2,811155a4 <___vfiprintf_internal_r+0xb54>
81114bd8:	100490ba 	slli	r2,r2,2
81114bdc:	02a04474 	movhi	r10,33041
81114be0:	5292fc04 	addi	r10,r10,19440
81114be4:	1285883a 	add	r2,r2,r10
81114be8:	10800017 	ldw	r2,0(r2)
81114bec:	1000683a 	jmp	r2
81114bf0:	811152d8 	cmpnei	r4,r16,17739
81114bf4:	811155a4 	muli	r4,r16,17750
81114bf8:	811155a4 	muli	r4,r16,17750
81114bfc:	811152f8 	rdprs	r4,r16,17739
81114c00:	811155a4 	muli	r4,r16,17750
81114c04:	811155a4 	muli	r4,r16,17750
81114c08:	811155a4 	muli	r4,r16,17750
81114c0c:	811155a4 	muli	r4,r16,17750
81114c10:	811155a4 	muli	r4,r16,17750
81114c14:	811155a4 	muli	r4,r16,17750
81114c18:	811154e0 	cmpeqi	r4,r16,17747
81114c1c:	811154fc 	xorhi	r4,r16,17747
81114c20:	811155a4 	muli	r4,r16,17750
81114c24:	81114de4 	muli	r4,r16,17719
81114c28:	8111550c 	andi	r4,r16,17748
81114c2c:	811155a4 	muli	r4,r16,17750
81114c30:	81115304 	addi	r4,r16,17740
81114c34:	81115310 	cmplti	r4,r16,17740
81114c38:	81115310 	cmplti	r4,r16,17740
81114c3c:	81115310 	cmplti	r4,r16,17740
81114c40:	81115310 	cmplti	r4,r16,17740
81114c44:	81115310 	cmplti	r4,r16,17740
81114c48:	81115310 	cmplti	r4,r16,17740
81114c4c:	81115310 	cmplti	r4,r16,17740
81114c50:	81115310 	cmplti	r4,r16,17740
81114c54:	81115310 	cmplti	r4,r16,17740
81114c58:	811155a4 	muli	r4,r16,17750
81114c5c:	811155a4 	muli	r4,r16,17750
81114c60:	811155a4 	muli	r4,r16,17750
81114c64:	811155a4 	muli	r4,r16,17750
81114c68:	811155a4 	muli	r4,r16,17750
81114c6c:	811155a4 	muli	r4,r16,17750
81114c70:	811155a4 	muli	r4,r16,17750
81114c74:	811155a4 	muli	r4,r16,17750
81114c78:	811155a4 	muli	r4,r16,17750
81114c7c:	811155a4 	muli	r4,r16,17750
81114c80:	8111533c 	xorhi	r4,r16,17740
81114c84:	811155a4 	muli	r4,r16,17750
81114c88:	811155a4 	muli	r4,r16,17750
81114c8c:	811155a4 	muli	r4,r16,17750
81114c90:	811155a4 	muli	r4,r16,17750
81114c94:	811155a4 	muli	r4,r16,17750
81114c98:	811155a4 	muli	r4,r16,17750
81114c9c:	811155a4 	muli	r4,r16,17750
81114ca0:	811155a4 	muli	r4,r16,17750
81114ca4:	811155a4 	muli	r4,r16,17750
81114ca8:	811155a4 	muli	r4,r16,17750
81114cac:	81115374 	orhi	r4,r16,17741
81114cb0:	811155a4 	muli	r4,r16,17750
81114cb4:	811155a4 	muli	r4,r16,17750
81114cb8:	811155a4 	muli	r4,r16,17750
81114cbc:	811155a4 	muli	r4,r16,17750
81114cc0:	811155a4 	muli	r4,r16,17750
81114cc4:	811153cc 	andi	r4,r16,17743
81114cc8:	811155a4 	muli	r4,r16,17750
81114ccc:	811155a4 	muli	r4,r16,17750
81114cd0:	8111543c 	xorhi	r4,r16,17744
81114cd4:	811155a4 	muli	r4,r16,17750
81114cd8:	811155a4 	muli	r4,r16,17750
81114cdc:	811155a4 	muli	r4,r16,17750
81114ce0:	811155a4 	muli	r4,r16,17750
81114ce4:	811155a4 	muli	r4,r16,17750
81114ce8:	811155a4 	muli	r4,r16,17750
81114cec:	811155a4 	muli	r4,r16,17750
81114cf0:	811155a4 	muli	r4,r16,17750
81114cf4:	811155a4 	muli	r4,r16,17750
81114cf8:	811155a4 	muli	r4,r16,17750
81114cfc:	811151e8 	cmpgeui	r4,r16,17735
81114d00:	81115214 	ori	r4,r16,17736
81114d04:	811155a4 	muli	r4,r16,17750
81114d08:	811155a4 	muli	r4,r16,17750
81114d0c:	811155a4 	muli	r4,r16,17750
81114d10:	8111554c 	andi	r4,r16,17749
81114d14:	81115214 	ori	r4,r16,17736
81114d18:	811155a4 	muli	r4,r16,17750
81114d1c:	811155a4 	muli	r4,r16,17750
81114d20:	811150a8 	cmpgeui	r4,r16,17730
81114d24:	811155a4 	muli	r4,r16,17750
81114d28:	811150b8 	rdprs	r4,r16,17730
81114d2c:	811150f4 	orhi	r4,r16,17731
81114d30:	81114df0 	cmpltui	r4,r16,17719
81114d34:	8111509c 	xori	r4,r16,17730
81114d38:	811155a4 	muli	r4,r16,17750
81114d3c:	81115478 	rdprs	r4,r16,17745
81114d40:	811155a4 	muli	r4,r16,17750
81114d44:	811154d0 	cmplti	r4,r16,17747
81114d48:	811155a4 	muli	r4,r16,17750
81114d4c:	811155a4 	muli	r4,r16,17750
81114d50:	81115194 	ori	r4,r16,17734
81114d54:	42000204 	addi	r8,r8,8
81114d58:	da802317 	ldw	r10,140(sp)
81114d5c:	5455883a 	add	r10,r10,r17
81114d60:	da802315 	stw	r10,140(sp)
81114d64:	003f8b06 	br	81114b94 <__reset+0xfb0f4b94>
81114d68:	d9002017 	ldw	r4,128(sp)
81114d6c:	a00b883a 	mov	r5,r20
81114d70:	110f4fc0 	call	8110f4fc <__swsetup_r>
81114d74:	1003b11e 	bne	r2,zero,81115c3c <___vfiprintf_internal_r+0x11ec>
81114d78:	a080030b 	ldhu	r2,12(r20)
81114d7c:	00c00284 	movi	r3,10
81114d80:	1080068c 	andi	r2,r2,26
81114d84:	10ff541e 	bne	r2,r3,81114ad8 <__reset+0xfb0f4ad8>
81114d88:	a080038f 	ldh	r2,14(r20)
81114d8c:	103f5216 	blt	r2,zero,81114ad8 <__reset+0xfb0f4ad8>
81114d90:	d9c02217 	ldw	r7,136(sp)
81114d94:	d9002017 	ldw	r4,128(sp)
81114d98:	e00d883a 	mov	r6,fp
81114d9c:	a00b883a 	mov	r5,r20
81114da0:	1115ec80 	call	81115ec8 <__sbprintf>
81114da4:	dfc03617 	ldw	ra,216(sp)
81114da8:	df003517 	ldw	fp,212(sp)
81114dac:	ddc03417 	ldw	r23,208(sp)
81114db0:	dd803317 	ldw	r22,204(sp)
81114db4:	dd403217 	ldw	r21,200(sp)
81114db8:	dd003117 	ldw	r20,196(sp)
81114dbc:	dcc03017 	ldw	r19,192(sp)
81114dc0:	dc802f17 	ldw	r18,188(sp)
81114dc4:	dc402e17 	ldw	r17,184(sp)
81114dc8:	dc002d17 	ldw	r16,180(sp)
81114dcc:	dec03704 	addi	sp,sp,220
81114dd0:	f800283a 	ret
81114dd4:	11114d00 	call	811114d0 <__sinit>
81114dd8:	003f2f06 	br	81114a98 <__reset+0xfb0f4a98>
81114ddc:	0463c83a 	sub	r17,zero,r17
81114de0:	d8802215 	stw	r2,136(sp)
81114de4:	a5000114 	ori	r20,r20,4
81114de8:	80c00007 	ldb	r3,0(r16)
81114dec:	003f7706 	br	81114bcc <__reset+0xfb0f4bcc>
81114df0:	00800c04 	movi	r2,48
81114df4:	da802217 	ldw	r10,136(sp)
81114df8:	d8801d05 	stb	r2,116(sp)
81114dfc:	00801e04 	movi	r2,120
81114e00:	d8801d45 	stb	r2,117(sp)
81114e04:	d8001d85 	stb	zero,118(sp)
81114e08:	50c00104 	addi	r3,r10,4
81114e0c:	54800017 	ldw	r18,0(r10)
81114e10:	0027883a 	mov	r19,zero
81114e14:	a0800094 	ori	r2,r20,2
81114e18:	48030b16 	blt	r9,zero,81115a48 <___vfiprintf_internal_r+0xff8>
81114e1c:	00bfdfc4 	movi	r2,-129
81114e20:	a096703a 	and	r11,r20,r2
81114e24:	d8c02215 	stw	r3,136(sp)
81114e28:	5d000094 	ori	r20,r11,2
81114e2c:	90032b1e 	bne	r18,zero,81115adc <___vfiprintf_internal_r+0x108c>
81114e30:	00a044b4 	movhi	r2,33042
81114e34:	10bf0204 	addi	r2,r2,-1016
81114e38:	d8802615 	stw	r2,152(sp)
81114e3c:	0039883a 	mov	fp,zero
81114e40:	48017b1e 	bne	r9,zero,81115430 <___vfiprintf_internal_r+0x9e0>
81114e44:	0013883a 	mov	r9,zero
81114e48:	0027883a 	mov	r19,zero
81114e4c:	dd401a04 	addi	r21,sp,104
81114e50:	4825883a 	mov	r18,r9
81114e54:	4cc0010e 	bge	r9,r19,81114e5c <___vfiprintf_internal_r+0x40c>
81114e58:	9825883a 	mov	r18,r19
81114e5c:	e7003fcc 	andi	fp,fp,255
81114e60:	e700201c 	xori	fp,fp,128
81114e64:	e73fe004 	addi	fp,fp,-128
81114e68:	e0000126 	beq	fp,zero,81114e70 <___vfiprintf_internal_r+0x420>
81114e6c:	94800044 	addi	r18,r18,1
81114e70:	a380008c 	andi	r14,r20,2
81114e74:	70000126 	beq	r14,zero,81114e7c <___vfiprintf_internal_r+0x42c>
81114e78:	94800084 	addi	r18,r18,2
81114e7c:	a700210c 	andi	fp,r20,132
81114e80:	e001df1e 	bne	fp,zero,81115600 <___vfiprintf_internal_r+0xbb0>
81114e84:	8c87c83a 	sub	r3,r17,r18
81114e88:	00c1dd0e 	bge	zero,r3,81115600 <___vfiprintf_internal_r+0xbb0>
81114e8c:	01c00404 	movi	r7,16
81114e90:	d8801c17 	ldw	r2,112(sp)
81114e94:	38c3ad0e 	bge	r7,r3,81115d4c <___vfiprintf_internal_r+0x12fc>
81114e98:	02a044b4 	movhi	r10,33042
81114e9c:	52bf6604 	addi	r10,r10,-616
81114ea0:	dc002915 	stw	r16,164(sp)
81114ea4:	d9801b17 	ldw	r6,108(sp)
81114ea8:	da802415 	stw	r10,144(sp)
81114eac:	03c001c4 	movi	r15,7
81114eb0:	da402515 	stw	r9,148(sp)
81114eb4:	db802815 	stw	r14,160(sp)
81114eb8:	1821883a 	mov	r16,r3
81114ebc:	00000506 	br	81114ed4 <___vfiprintf_internal_r+0x484>
81114ec0:	31400084 	addi	r5,r6,2
81114ec4:	42000204 	addi	r8,r8,8
81114ec8:	200d883a 	mov	r6,r4
81114ecc:	843ffc04 	addi	r16,r16,-16
81114ed0:	3c000d0e 	bge	r7,r16,81114f08 <___vfiprintf_internal_r+0x4b8>
81114ed4:	10800404 	addi	r2,r2,16
81114ed8:	31000044 	addi	r4,r6,1
81114edc:	45800015 	stw	r22,0(r8)
81114ee0:	41c00115 	stw	r7,4(r8)
81114ee4:	d8801c15 	stw	r2,112(sp)
81114ee8:	d9001b15 	stw	r4,108(sp)
81114eec:	793ff40e 	bge	r15,r4,81114ec0 <__reset+0xfb0f4ec0>
81114ef0:	1001b51e 	bne	r2,zero,811155c8 <___vfiprintf_internal_r+0xb78>
81114ef4:	843ffc04 	addi	r16,r16,-16
81114ef8:	000d883a 	mov	r6,zero
81114efc:	01400044 	movi	r5,1
81114f00:	d811883a 	mov	r8,sp
81114f04:	3c3ff316 	blt	r7,r16,81114ed4 <__reset+0xfb0f4ed4>
81114f08:	8007883a 	mov	r3,r16
81114f0c:	da402517 	ldw	r9,148(sp)
81114f10:	db802817 	ldw	r14,160(sp)
81114f14:	dc002917 	ldw	r16,164(sp)
81114f18:	da802417 	ldw	r10,144(sp)
81114f1c:	1885883a 	add	r2,r3,r2
81114f20:	40c00115 	stw	r3,4(r8)
81114f24:	42800015 	stw	r10,0(r8)
81114f28:	d8801c15 	stw	r2,112(sp)
81114f2c:	d9401b15 	stw	r5,108(sp)
81114f30:	00c001c4 	movi	r3,7
81114f34:	19426016 	blt	r3,r5,811158b8 <___vfiprintf_internal_r+0xe68>
81114f38:	d8c01d87 	ldb	r3,118(sp)
81114f3c:	42000204 	addi	r8,r8,8
81114f40:	29000044 	addi	r4,r5,1
81114f44:	1801b31e 	bne	r3,zero,81115614 <___vfiprintf_internal_r+0xbc4>
81114f48:	7001c026 	beq	r14,zero,8111564c <___vfiprintf_internal_r+0xbfc>
81114f4c:	d8c01d04 	addi	r3,sp,116
81114f50:	10800084 	addi	r2,r2,2
81114f54:	40c00015 	stw	r3,0(r8)
81114f58:	00c00084 	movi	r3,2
81114f5c:	40c00115 	stw	r3,4(r8)
81114f60:	d8801c15 	stw	r2,112(sp)
81114f64:	d9001b15 	stw	r4,108(sp)
81114f68:	00c001c4 	movi	r3,7
81114f6c:	1902650e 	bge	r3,r4,81115904 <___vfiprintf_internal_r+0xeb4>
81114f70:	10029a1e 	bne	r2,zero,811159dc <___vfiprintf_internal_r+0xf8c>
81114f74:	00c02004 	movi	r3,128
81114f78:	01000044 	movi	r4,1
81114f7c:	000b883a 	mov	r5,zero
81114f80:	d811883a 	mov	r8,sp
81114f84:	e0c1b31e 	bne	fp,r3,81115654 <___vfiprintf_internal_r+0xc04>
81114f88:	8cb9c83a 	sub	fp,r17,r18
81114f8c:	0701b10e 	bge	zero,fp,81115654 <___vfiprintf_internal_r+0xc04>
81114f90:	01c00404 	movi	r7,16
81114f94:	3f03890e 	bge	r7,fp,81115dbc <___vfiprintf_internal_r+0x136c>
81114f98:	00e044b4 	movhi	r3,33042
81114f9c:	18ff6204 	addi	r3,r3,-632
81114fa0:	d8c02415 	stw	r3,144(sp)
81114fa4:	8007883a 	mov	r3,r16
81114fa8:	034001c4 	movi	r13,7
81114fac:	e021883a 	mov	r16,fp
81114fb0:	da402515 	stw	r9,148(sp)
81114fb4:	1839883a 	mov	fp,r3
81114fb8:	00000506 	br	81114fd0 <___vfiprintf_internal_r+0x580>
81114fbc:	29800084 	addi	r6,r5,2
81114fc0:	42000204 	addi	r8,r8,8
81114fc4:	180b883a 	mov	r5,r3
81114fc8:	843ffc04 	addi	r16,r16,-16
81114fcc:	3c000d0e 	bge	r7,r16,81115004 <___vfiprintf_internal_r+0x5b4>
81114fd0:	10800404 	addi	r2,r2,16
81114fd4:	28c00044 	addi	r3,r5,1
81114fd8:	45c00015 	stw	r23,0(r8)
81114fdc:	41c00115 	stw	r7,4(r8)
81114fe0:	d8801c15 	stw	r2,112(sp)
81114fe4:	d8c01b15 	stw	r3,108(sp)
81114fe8:	68fff40e 	bge	r13,r3,81114fbc <__reset+0xfb0f4fbc>
81114fec:	1002241e 	bne	r2,zero,81115880 <___vfiprintf_internal_r+0xe30>
81114ff0:	843ffc04 	addi	r16,r16,-16
81114ff4:	01800044 	movi	r6,1
81114ff8:	000b883a 	mov	r5,zero
81114ffc:	d811883a 	mov	r8,sp
81115000:	3c3ff316 	blt	r7,r16,81114fd0 <__reset+0xfb0f4fd0>
81115004:	da402517 	ldw	r9,148(sp)
81115008:	e007883a 	mov	r3,fp
8111500c:	8039883a 	mov	fp,r16
81115010:	1821883a 	mov	r16,r3
81115014:	d8c02417 	ldw	r3,144(sp)
81115018:	1705883a 	add	r2,r2,fp
8111501c:	47000115 	stw	fp,4(r8)
81115020:	40c00015 	stw	r3,0(r8)
81115024:	d8801c15 	stw	r2,112(sp)
81115028:	d9801b15 	stw	r6,108(sp)
8111502c:	00c001c4 	movi	r3,7
81115030:	19827616 	blt	r3,r6,81115a0c <___vfiprintf_internal_r+0xfbc>
81115034:	4cf9c83a 	sub	fp,r9,r19
81115038:	42000204 	addi	r8,r8,8
8111503c:	31000044 	addi	r4,r6,1
81115040:	300b883a 	mov	r5,r6
81115044:	07018516 	blt	zero,fp,8111565c <___vfiprintf_internal_r+0xc0c>
81115048:	9885883a 	add	r2,r19,r2
8111504c:	45400015 	stw	r21,0(r8)
81115050:	44c00115 	stw	r19,4(r8)
81115054:	d8801c15 	stw	r2,112(sp)
81115058:	d9001b15 	stw	r4,108(sp)
8111505c:	00c001c4 	movi	r3,7
81115060:	1901dd0e 	bge	r3,r4,811157d8 <___vfiprintf_internal_r+0xd88>
81115064:	1002401e 	bne	r2,zero,81115968 <___vfiprintf_internal_r+0xf18>
81115068:	d8001b15 	stw	zero,108(sp)
8111506c:	a2c0010c 	andi	r11,r20,4
81115070:	58000226 	beq	r11,zero,8111507c <___vfiprintf_internal_r+0x62c>
81115074:	8ca7c83a 	sub	r19,r17,r18
81115078:	04c2f216 	blt	zero,r19,81115c44 <___vfiprintf_internal_r+0x11f4>
8111507c:	8c80010e 	bge	r17,r18,81115084 <___vfiprintf_internal_r+0x634>
81115080:	9023883a 	mov	r17,r18
81115084:	da802317 	ldw	r10,140(sp)
81115088:	5455883a 	add	r10,r10,r17
8111508c:	da802315 	stw	r10,140(sp)
81115090:	d8001b15 	stw	zero,108(sp)
81115094:	d811883a 	mov	r8,sp
81115098:	003ea206 	br	81114b24 <__reset+0xfb0f4b24>
8111509c:	a5000814 	ori	r20,r20,32
811150a0:	80c00007 	ldb	r3,0(r16)
811150a4:	003ec906 	br	81114bcc <__reset+0xfb0f4bcc>
811150a8:	80c00007 	ldb	r3,0(r16)
811150ac:	1b030926 	beq	r3,r12,81115cd4 <___vfiprintf_internal_r+0x1284>
811150b0:	a5000414 	ori	r20,r20,16
811150b4:	003ec506 	br	81114bcc <__reset+0xfb0f4bcc>
811150b8:	21003fcc 	andi	r4,r4,255
811150bc:	20035e1e 	bne	r4,zero,81115e38 <___vfiprintf_internal_r+0x13e8>
811150c0:	a080080c 	andi	r2,r20,32
811150c4:	1002a526 	beq	r2,zero,81115b5c <___vfiprintf_internal_r+0x110c>
811150c8:	da802217 	ldw	r10,136(sp)
811150cc:	50800017 	ldw	r2,0(r10)
811150d0:	da802317 	ldw	r10,140(sp)
811150d4:	5007d7fa 	srai	r3,r10,31
811150d8:	da802217 	ldw	r10,136(sp)
811150dc:	10c00115 	stw	r3,4(r2)
811150e0:	52800104 	addi	r10,r10,4
811150e4:	da802215 	stw	r10,136(sp)
811150e8:	da802317 	ldw	r10,140(sp)
811150ec:	12800015 	stw	r10,0(r2)
811150f0:	003e8c06 	br	81114b24 <__reset+0xfb0f4b24>
811150f4:	21003fcc 	andi	r4,r4,255
811150f8:	2003511e 	bne	r4,zero,81115e40 <___vfiprintf_internal_r+0x13f0>
811150fc:	a080080c 	andi	r2,r20,32
81115100:	1000a126 	beq	r2,zero,81115388 <___vfiprintf_internal_r+0x938>
81115104:	da802217 	ldw	r10,136(sp)
81115108:	d8001d85 	stb	zero,118(sp)
8111510c:	50800204 	addi	r2,r10,8
81115110:	54800017 	ldw	r18,0(r10)
81115114:	54c00117 	ldw	r19,4(r10)
81115118:	4802b416 	blt	r9,zero,81115bec <___vfiprintf_internal_r+0x119c>
8111511c:	013fdfc4 	movi	r4,-129
81115120:	94c6b03a 	or	r3,r18,r19
81115124:	d8802215 	stw	r2,136(sp)
81115128:	a128703a 	and	r20,r20,r4
8111512c:	1800a226 	beq	r3,zero,811153b8 <___vfiprintf_internal_r+0x968>
81115130:	0039883a 	mov	fp,zero
81115134:	dd401a04 	addi	r21,sp,104
81115138:	9006d0fa 	srli	r3,r18,3
8111513c:	9808977a 	slli	r4,r19,29
81115140:	9826d0fa 	srli	r19,r19,3
81115144:	948001cc 	andi	r18,r18,7
81115148:	90800c04 	addi	r2,r18,48
8111514c:	ad7fffc4 	addi	r21,r21,-1
81115150:	20e4b03a 	or	r18,r4,r3
81115154:	a8800005 	stb	r2,0(r21)
81115158:	94c6b03a 	or	r3,r18,r19
8111515c:	183ff61e 	bne	r3,zero,81115138 <__reset+0xfb0f5138>
81115160:	a0c0004c 	andi	r3,r20,1
81115164:	18005926 	beq	r3,zero,811152cc <___vfiprintf_internal_r+0x87c>
81115168:	10803fcc 	andi	r2,r2,255
8111516c:	1080201c 	xori	r2,r2,128
81115170:	10bfe004 	addi	r2,r2,-128
81115174:	00c00c04 	movi	r3,48
81115178:	10c05426 	beq	r2,r3,811152cc <___vfiprintf_internal_r+0x87c>
8111517c:	da801e17 	ldw	r10,120(sp)
81115180:	a8bfffc4 	addi	r2,r21,-1
81115184:	a8ffffc5 	stb	r3,-1(r21)
81115188:	50a7c83a 	sub	r19,r10,r2
8111518c:	102b883a 	mov	r21,r2
81115190:	003f2f06 	br	81114e50 <__reset+0xfb0f4e50>
81115194:	21003fcc 	andi	r4,r4,255
81115198:	2003421e 	bne	r4,zero,81115ea4 <___vfiprintf_internal_r+0x1454>
8111519c:	00a044b4 	movhi	r2,33042
811151a0:	10bf0204 	addi	r2,r2,-1016
811151a4:	d8802615 	stw	r2,152(sp)
811151a8:	a080080c 	andi	r2,r20,32
811151ac:	1000aa26 	beq	r2,zero,81115458 <___vfiprintf_internal_r+0xa08>
811151b0:	da802217 	ldw	r10,136(sp)
811151b4:	54800017 	ldw	r18,0(r10)
811151b8:	54c00117 	ldw	r19,4(r10)
811151bc:	52800204 	addi	r10,r10,8
811151c0:	da802215 	stw	r10,136(sp)
811151c4:	a080004c 	andi	r2,r20,1
811151c8:	1001d226 	beq	r2,zero,81115914 <___vfiprintf_internal_r+0xec4>
811151cc:	94c4b03a 	or	r2,r18,r19
811151d0:	1002351e 	bne	r2,zero,81115aa8 <___vfiprintf_internal_r+0x1058>
811151d4:	d8001d85 	stb	zero,118(sp)
811151d8:	48022216 	blt	r9,zero,81115a64 <___vfiprintf_internal_r+0x1014>
811151dc:	00bfdfc4 	movi	r2,-129
811151e0:	a0a8703a 	and	r20,r20,r2
811151e4:	003f1506 	br	81114e3c <__reset+0xfb0f4e3c>
811151e8:	da802217 	ldw	r10,136(sp)
811151ec:	04800044 	movi	r18,1
811151f0:	d8001d85 	stb	zero,118(sp)
811151f4:	50800017 	ldw	r2,0(r10)
811151f8:	52800104 	addi	r10,r10,4
811151fc:	da802215 	stw	r10,136(sp)
81115200:	d8801005 	stb	r2,64(sp)
81115204:	9027883a 	mov	r19,r18
81115208:	dd401004 	addi	r21,sp,64
8111520c:	0013883a 	mov	r9,zero
81115210:	003f1706 	br	81114e70 <__reset+0xfb0f4e70>
81115214:	21003fcc 	andi	r4,r4,255
81115218:	2003201e 	bne	r4,zero,81115e9c <___vfiprintf_internal_r+0x144c>
8111521c:	a080080c 	andi	r2,r20,32
81115220:	10004b26 	beq	r2,zero,81115350 <___vfiprintf_internal_r+0x900>
81115224:	da802217 	ldw	r10,136(sp)
81115228:	50800117 	ldw	r2,4(r10)
8111522c:	54800017 	ldw	r18,0(r10)
81115230:	52800204 	addi	r10,r10,8
81115234:	da802215 	stw	r10,136(sp)
81115238:	1027883a 	mov	r19,r2
8111523c:	10022c16 	blt	r2,zero,81115af0 <___vfiprintf_internal_r+0x10a0>
81115240:	df001d83 	ldbu	fp,118(sp)
81115244:	48007216 	blt	r9,zero,81115410 <___vfiprintf_internal_r+0x9c0>
81115248:	00ffdfc4 	movi	r3,-129
8111524c:	94c4b03a 	or	r2,r18,r19
81115250:	a0e8703a 	and	r20,r20,r3
81115254:	1000cc26 	beq	r2,zero,81115588 <___vfiprintf_internal_r+0xb38>
81115258:	98021026 	beq	r19,zero,81115a9c <___vfiprintf_internal_r+0x104c>
8111525c:	dc402415 	stw	r17,144(sp)
81115260:	dc002515 	stw	r16,148(sp)
81115264:	9823883a 	mov	r17,r19
81115268:	9021883a 	mov	r16,r18
8111526c:	dd401a04 	addi	r21,sp,104
81115270:	4825883a 	mov	r18,r9
81115274:	4027883a 	mov	r19,r8
81115278:	8009883a 	mov	r4,r16
8111527c:	880b883a 	mov	r5,r17
81115280:	01800284 	movi	r6,10
81115284:	000f883a 	mov	r7,zero
81115288:	1116e300 	call	81116e30 <__umoddi3>
8111528c:	10800c04 	addi	r2,r2,48
81115290:	ad7fffc4 	addi	r21,r21,-1
81115294:	8009883a 	mov	r4,r16
81115298:	880b883a 	mov	r5,r17
8111529c:	a8800005 	stb	r2,0(r21)
811152a0:	01800284 	movi	r6,10
811152a4:	000f883a 	mov	r7,zero
811152a8:	11168b80 	call	811168b8 <__udivdi3>
811152ac:	1021883a 	mov	r16,r2
811152b0:	10c4b03a 	or	r2,r2,r3
811152b4:	1823883a 	mov	r17,r3
811152b8:	103fef1e 	bne	r2,zero,81115278 <__reset+0xfb0f5278>
811152bc:	dc402417 	ldw	r17,144(sp)
811152c0:	dc002517 	ldw	r16,148(sp)
811152c4:	9013883a 	mov	r9,r18
811152c8:	9811883a 	mov	r8,r19
811152cc:	da801e17 	ldw	r10,120(sp)
811152d0:	5567c83a 	sub	r19,r10,r21
811152d4:	003ede06 	br	81114e50 <__reset+0xfb0f4e50>
811152d8:	38803fcc 	andi	r2,r7,255
811152dc:	1080201c 	xori	r2,r2,128
811152e0:	10bfe004 	addi	r2,r2,-128
811152e4:	1002371e 	bne	r2,zero,81115bc4 <___vfiprintf_internal_r+0x1174>
811152e8:	01000044 	movi	r4,1
811152ec:	01c00804 	movi	r7,32
811152f0:	80c00007 	ldb	r3,0(r16)
811152f4:	003e3506 	br	81114bcc <__reset+0xfb0f4bcc>
811152f8:	a5000054 	ori	r20,r20,1
811152fc:	80c00007 	ldb	r3,0(r16)
81115300:	003e3206 	br	81114bcc <__reset+0xfb0f4bcc>
81115304:	a5002014 	ori	r20,r20,128
81115308:	80c00007 	ldb	r3,0(r16)
8111530c:	003e2f06 	br	81114bcc <__reset+0xfb0f4bcc>
81115310:	8015883a 	mov	r10,r16
81115314:	0023883a 	mov	r17,zero
81115318:	18bff404 	addi	r2,r3,-48
8111531c:	50c00007 	ldb	r3,0(r10)
81115320:	8c4002a4 	muli	r17,r17,10
81115324:	84000044 	addi	r16,r16,1
81115328:	8015883a 	mov	r10,r16
8111532c:	1463883a 	add	r17,r2,r17
81115330:	18bff404 	addi	r2,r3,-48
81115334:	30bff92e 	bgeu	r6,r2,8111531c <__reset+0xfb0f531c>
81115338:	003e2506 	br	81114bd0 <__reset+0xfb0f4bd0>
8111533c:	21003fcc 	andi	r4,r4,255
81115340:	2002d41e 	bne	r4,zero,81115e94 <___vfiprintf_internal_r+0x1444>
81115344:	a5000414 	ori	r20,r20,16
81115348:	a080080c 	andi	r2,r20,32
8111534c:	103fb51e 	bne	r2,zero,81115224 <__reset+0xfb0f5224>
81115350:	a080040c 	andi	r2,r20,16
81115354:	1001f826 	beq	r2,zero,81115b38 <___vfiprintf_internal_r+0x10e8>
81115358:	da802217 	ldw	r10,136(sp)
8111535c:	54800017 	ldw	r18,0(r10)
81115360:	52800104 	addi	r10,r10,4
81115364:	da802215 	stw	r10,136(sp)
81115368:	9027d7fa 	srai	r19,r18,31
8111536c:	9805883a 	mov	r2,r19
81115370:	003fb206 	br	8111523c <__reset+0xfb0f523c>
81115374:	21003fcc 	andi	r4,r4,255
81115378:	2002c41e 	bne	r4,zero,81115e8c <___vfiprintf_internal_r+0x143c>
8111537c:	a5000414 	ori	r20,r20,16
81115380:	a080080c 	andi	r2,r20,32
81115384:	103f5f1e 	bne	r2,zero,81115104 <__reset+0xfb0f5104>
81115388:	a080040c 	andi	r2,r20,16
8111538c:	10020f26 	beq	r2,zero,81115bcc <___vfiprintf_internal_r+0x117c>
81115390:	da802217 	ldw	r10,136(sp)
81115394:	d8001d85 	stb	zero,118(sp)
81115398:	0027883a 	mov	r19,zero
8111539c:	50800104 	addi	r2,r10,4
811153a0:	54800017 	ldw	r18,0(r10)
811153a4:	48021116 	blt	r9,zero,81115bec <___vfiprintf_internal_r+0x119c>
811153a8:	00ffdfc4 	movi	r3,-129
811153ac:	d8802215 	stw	r2,136(sp)
811153b0:	a0e8703a 	and	r20,r20,r3
811153b4:	903f5e1e 	bne	r18,zero,81115130 <__reset+0xfb0f5130>
811153b8:	0039883a 	mov	fp,zero
811153bc:	4802a626 	beq	r9,zero,81115e58 <___vfiprintf_internal_r+0x1408>
811153c0:	0025883a 	mov	r18,zero
811153c4:	0027883a 	mov	r19,zero
811153c8:	003f5a06 	br	81115134 <__reset+0xfb0f5134>
811153cc:	21003fcc 	andi	r4,r4,255
811153d0:	20029f1e 	bne	r4,zero,81115e50 <___vfiprintf_internal_r+0x1400>
811153d4:	a5000414 	ori	r20,r20,16
811153d8:	a080080c 	andi	r2,r20,32
811153dc:	10005e1e 	bne	r2,zero,81115558 <___vfiprintf_internal_r+0xb08>
811153e0:	a080040c 	andi	r2,r20,16
811153e4:	1001a21e 	bne	r2,zero,81115a70 <___vfiprintf_internal_r+0x1020>
811153e8:	a080100c 	andi	r2,r20,64
811153ec:	d8001d85 	stb	zero,118(sp)
811153f0:	da802217 	ldw	r10,136(sp)
811153f4:	1002231e 	bne	r2,zero,81115c84 <___vfiprintf_internal_r+0x1234>
811153f8:	50800104 	addi	r2,r10,4
811153fc:	54800017 	ldw	r18,0(r10)
81115400:	0027883a 	mov	r19,zero
81115404:	4801a00e 	bge	r9,zero,81115a88 <___vfiprintf_internal_r+0x1038>
81115408:	d8802215 	stw	r2,136(sp)
8111540c:	0039883a 	mov	fp,zero
81115410:	94c4b03a 	or	r2,r18,r19
81115414:	103f901e 	bne	r2,zero,81115258 <__reset+0xfb0f5258>
81115418:	00800044 	movi	r2,1
8111541c:	10803fcc 	andi	r2,r2,255
81115420:	00c00044 	movi	r3,1
81115424:	10c05926 	beq	r2,r3,8111558c <___vfiprintf_internal_r+0xb3c>
81115428:	00c00084 	movi	r3,2
8111542c:	10ffe41e 	bne	r2,r3,811153c0 <__reset+0xfb0f53c0>
81115430:	0025883a 	mov	r18,zero
81115434:	0027883a 	mov	r19,zero
81115438:	00013d06 	br	81115930 <___vfiprintf_internal_r+0xee0>
8111543c:	21003fcc 	andi	r4,r4,255
81115440:	2002811e 	bne	r4,zero,81115e48 <___vfiprintf_internal_r+0x13f8>
81115444:	00a044b4 	movhi	r2,33042
81115448:	10befd04 	addi	r2,r2,-1036
8111544c:	d8802615 	stw	r2,152(sp)
81115450:	a080080c 	andi	r2,r20,32
81115454:	103f561e 	bne	r2,zero,811151b0 <__reset+0xfb0f51b0>
81115458:	a080040c 	andi	r2,r20,16
8111545c:	1001d126 	beq	r2,zero,81115ba4 <___vfiprintf_internal_r+0x1154>
81115460:	da802217 	ldw	r10,136(sp)
81115464:	0027883a 	mov	r19,zero
81115468:	54800017 	ldw	r18,0(r10)
8111546c:	52800104 	addi	r10,r10,4
81115470:	da802215 	stw	r10,136(sp)
81115474:	003f5306 	br	811151c4 <__reset+0xfb0f51c4>
81115478:	da802217 	ldw	r10,136(sp)
8111547c:	d8001d85 	stb	zero,118(sp)
81115480:	55400017 	ldw	r21,0(r10)
81115484:	50c00104 	addi	r3,r10,4
81115488:	a8024226 	beq	r21,zero,81115d94 <___vfiprintf_internal_r+0x1344>
8111548c:	48021816 	blt	r9,zero,81115cf0 <___vfiprintf_internal_r+0x12a0>
81115490:	480d883a 	mov	r6,r9
81115494:	000b883a 	mov	r5,zero
81115498:	a809883a 	mov	r4,r21
8111549c:	d8c02a15 	stw	r3,168(sp)
811154a0:	da002b15 	stw	r8,172(sp)
811154a4:	da402c15 	stw	r9,176(sp)
811154a8:	1112a3c0 	call	81112a3c <memchr>
811154ac:	d8c02a17 	ldw	r3,168(sp)
811154b0:	da002b17 	ldw	r8,172(sp)
811154b4:	da402c17 	ldw	r9,176(sp)
811154b8:	10024826 	beq	r2,zero,81115ddc <___vfiprintf_internal_r+0x138c>
811154bc:	1567c83a 	sub	r19,r2,r21
811154c0:	df001d83 	ldbu	fp,118(sp)
811154c4:	d8c02215 	stw	r3,136(sp)
811154c8:	0013883a 	mov	r9,zero
811154cc:	003e6006 	br	81114e50 <__reset+0xfb0f4e50>
811154d0:	21003fcc 	andi	r4,r4,255
811154d4:	203fc026 	beq	r4,zero,811153d8 <__reset+0xfb0f53d8>
811154d8:	d9c01d85 	stb	r7,118(sp)
811154dc:	003fbe06 	br	811153d8 <__reset+0xfb0f53d8>
811154e0:	da802217 	ldw	r10,136(sp)
811154e4:	54400017 	ldw	r17,0(r10)
811154e8:	50800104 	addi	r2,r10,4
811154ec:	883e3b16 	blt	r17,zero,81114ddc <__reset+0xfb0f4ddc>
811154f0:	d8802215 	stw	r2,136(sp)
811154f4:	80c00007 	ldb	r3,0(r16)
811154f8:	003db406 	br	81114bcc <__reset+0xfb0f4bcc>
811154fc:	01000044 	movi	r4,1
81115500:	01c00ac4 	movi	r7,43
81115504:	80c00007 	ldb	r3,0(r16)
81115508:	003db006 	br	81114bcc <__reset+0xfb0f4bcc>
8111550c:	80c00007 	ldb	r3,0(r16)
81115510:	82800044 	addi	r10,r16,1
81115514:	1b423c26 	beq	r3,r13,81115e08 <___vfiprintf_internal_r+0x13b8>
81115518:	18bff404 	addi	r2,r3,-48
8111551c:	0013883a 	mov	r9,zero
81115520:	30822b36 	bltu	r6,r2,81115dd0 <___vfiprintf_internal_r+0x1380>
81115524:	50c00007 	ldb	r3,0(r10)
81115528:	4a4002a4 	muli	r9,r9,10
8111552c:	54000044 	addi	r16,r10,1
81115530:	8015883a 	mov	r10,r16
81115534:	4893883a 	add	r9,r9,r2
81115538:	18bff404 	addi	r2,r3,-48
8111553c:	30bff92e 	bgeu	r6,r2,81115524 <__reset+0xfb0f5524>
81115540:	483da30e 	bge	r9,zero,81114bd0 <__reset+0xfb0f4bd0>
81115544:	027fffc4 	movi	r9,-1
81115548:	003da106 	br	81114bd0 <__reset+0xfb0f4bd0>
8111554c:	a5001014 	ori	r20,r20,64
81115550:	80c00007 	ldb	r3,0(r16)
81115554:	003d9d06 	br	81114bcc <__reset+0xfb0f4bcc>
81115558:	da802217 	ldw	r10,136(sp)
8111555c:	d8001d85 	stb	zero,118(sp)
81115560:	50c00204 	addi	r3,r10,8
81115564:	54800017 	ldw	r18,0(r10)
81115568:	54c00117 	ldw	r19,4(r10)
8111556c:	4801ca16 	blt	r9,zero,81115c98 <___vfiprintf_internal_r+0x1248>
81115570:	013fdfc4 	movi	r4,-129
81115574:	94c4b03a 	or	r2,r18,r19
81115578:	d8c02215 	stw	r3,136(sp)
8111557c:	a128703a 	and	r20,r20,r4
81115580:	0039883a 	mov	fp,zero
81115584:	103f341e 	bne	r2,zero,81115258 <__reset+0xfb0f5258>
81115588:	483e2e26 	beq	r9,zero,81114e44 <__reset+0xfb0f4e44>
8111558c:	0025883a 	mov	r18,zero
81115590:	94800c04 	addi	r18,r18,48
81115594:	dc8019c5 	stb	r18,103(sp)
81115598:	dcc02717 	ldw	r19,156(sp)
8111559c:	dd4019c4 	addi	r21,sp,103
811155a0:	003e2b06 	br	81114e50 <__reset+0xfb0f4e50>
811155a4:	21003fcc 	andi	r4,r4,255
811155a8:	2002361e 	bne	r4,zero,81115e84 <___vfiprintf_internal_r+0x1434>
811155ac:	1801c126 	beq	r3,zero,81115cb4 <___vfiprintf_internal_r+0x1264>
811155b0:	04800044 	movi	r18,1
811155b4:	d8c01005 	stb	r3,64(sp)
811155b8:	d8001d85 	stb	zero,118(sp)
811155bc:	9027883a 	mov	r19,r18
811155c0:	dd401004 	addi	r21,sp,64
811155c4:	003f1106 	br	8111520c <__reset+0xfb0f520c>
811155c8:	d9402117 	ldw	r5,132(sp)
811155cc:	d9002017 	ldw	r4,128(sp)
811155d0:	d9801a04 	addi	r6,sp,104
811155d4:	d9c02b15 	stw	r7,172(sp)
811155d8:	dbc02a15 	stw	r15,168(sp)
811155dc:	111493c0 	call	8111493c <__sprint_r.part.0>
811155e0:	d9c02b17 	ldw	r7,172(sp)
811155e4:	dbc02a17 	ldw	r15,168(sp)
811155e8:	10006d1e 	bne	r2,zero,811157a0 <___vfiprintf_internal_r+0xd50>
811155ec:	d9801b17 	ldw	r6,108(sp)
811155f0:	d8801c17 	ldw	r2,112(sp)
811155f4:	d811883a 	mov	r8,sp
811155f8:	31400044 	addi	r5,r6,1
811155fc:	003e3306 	br	81114ecc <__reset+0xfb0f4ecc>
81115600:	d9401b17 	ldw	r5,108(sp)
81115604:	d8801c17 	ldw	r2,112(sp)
81115608:	29000044 	addi	r4,r5,1
8111560c:	d8c01d87 	ldb	r3,118(sp)
81115610:	183e4d26 	beq	r3,zero,81114f48 <__reset+0xfb0f4f48>
81115614:	00c00044 	movi	r3,1
81115618:	d9401d84 	addi	r5,sp,118
8111561c:	10c5883a 	add	r2,r2,r3
81115620:	41400015 	stw	r5,0(r8)
81115624:	40c00115 	stw	r3,4(r8)
81115628:	d8801c15 	stw	r2,112(sp)
8111562c:	d9001b15 	stw	r4,108(sp)
81115630:	014001c4 	movi	r5,7
81115634:	2900a90e 	bge	r5,r4,811158dc <___vfiprintf_internal_r+0xe8c>
81115638:	1000da1e 	bne	r2,zero,811159a4 <___vfiprintf_internal_r+0xf54>
8111563c:	7000ab1e 	bne	r14,zero,811158ec <___vfiprintf_internal_r+0xe9c>
81115640:	000b883a 	mov	r5,zero
81115644:	1809883a 	mov	r4,r3
81115648:	d811883a 	mov	r8,sp
8111564c:	00c02004 	movi	r3,128
81115650:	e0fe4d26 	beq	fp,r3,81114f88 <__reset+0xfb0f4f88>
81115654:	4cf9c83a 	sub	fp,r9,r19
81115658:	073e7b0e 	bge	zero,fp,81115048 <__reset+0xfb0f5048>
8111565c:	01c00404 	movi	r7,16
81115660:	3f01900e 	bge	r7,fp,81115ca4 <___vfiprintf_internal_r+0x1254>
81115664:	00e044b4 	movhi	r3,33042
81115668:	18ff6204 	addi	r3,r3,-632
8111566c:	d8c02415 	stw	r3,144(sp)
81115670:	034001c4 	movi	r13,7
81115674:	00000506 	br	8111568c <___vfiprintf_internal_r+0xc3c>
81115678:	29000084 	addi	r4,r5,2
8111567c:	42000204 	addi	r8,r8,8
81115680:	180b883a 	mov	r5,r3
81115684:	e73ffc04 	addi	fp,fp,-16
81115688:	3f000d0e 	bge	r7,fp,811156c0 <___vfiprintf_internal_r+0xc70>
8111568c:	10800404 	addi	r2,r2,16
81115690:	28c00044 	addi	r3,r5,1
81115694:	45c00015 	stw	r23,0(r8)
81115698:	41c00115 	stw	r7,4(r8)
8111569c:	d8801c15 	stw	r2,112(sp)
811156a0:	d8c01b15 	stw	r3,108(sp)
811156a4:	68fff40e 	bge	r13,r3,81115678 <__reset+0xfb0f5678>
811156a8:	1000101e 	bne	r2,zero,811156ec <___vfiprintf_internal_r+0xc9c>
811156ac:	e73ffc04 	addi	fp,fp,-16
811156b0:	01000044 	movi	r4,1
811156b4:	000b883a 	mov	r5,zero
811156b8:	d811883a 	mov	r8,sp
811156bc:	3f3ff316 	blt	r7,fp,8111568c <__reset+0xfb0f568c>
811156c0:	da802417 	ldw	r10,144(sp)
811156c4:	1705883a 	add	r2,r2,fp
811156c8:	47000115 	stw	fp,4(r8)
811156cc:	42800015 	stw	r10,0(r8)
811156d0:	d8801c15 	stw	r2,112(sp)
811156d4:	d9001b15 	stw	r4,108(sp)
811156d8:	00c001c4 	movi	r3,7
811156dc:	19003616 	blt	r3,r4,811157b8 <___vfiprintf_internal_r+0xd68>
811156e0:	42000204 	addi	r8,r8,8
811156e4:	21000044 	addi	r4,r4,1
811156e8:	003e5706 	br	81115048 <__reset+0xfb0f5048>
811156ec:	d9402117 	ldw	r5,132(sp)
811156f0:	d9002017 	ldw	r4,128(sp)
811156f4:	d9801a04 	addi	r6,sp,104
811156f8:	d9c02b15 	stw	r7,172(sp)
811156fc:	db402a15 	stw	r13,168(sp)
81115700:	111493c0 	call	8111493c <__sprint_r.part.0>
81115704:	d9c02b17 	ldw	r7,172(sp)
81115708:	db402a17 	ldw	r13,168(sp)
8111570c:	1000241e 	bne	r2,zero,811157a0 <___vfiprintf_internal_r+0xd50>
81115710:	d9401b17 	ldw	r5,108(sp)
81115714:	d8801c17 	ldw	r2,112(sp)
81115718:	d811883a 	mov	r8,sp
8111571c:	29000044 	addi	r4,r5,1
81115720:	003fd806 	br	81115684 <__reset+0xfb0f5684>
81115724:	d9401b17 	ldw	r5,108(sp)
81115728:	00e044b4 	movhi	r3,33042
8111572c:	18ff6604 	addi	r3,r3,-616
81115730:	d8c02415 	stw	r3,144(sp)
81115734:	29400044 	addi	r5,r5,1
81115738:	d8c02417 	ldw	r3,144(sp)
8111573c:	14c5883a 	add	r2,r2,r19
81115740:	44c00115 	stw	r19,4(r8)
81115744:	40c00015 	stw	r3,0(r8)
81115748:	d8801c15 	stw	r2,112(sp)
8111574c:	d9401b15 	stw	r5,108(sp)
81115750:	00c001c4 	movi	r3,7
81115754:	1940070e 	bge	r3,r5,81115774 <___vfiprintf_internal_r+0xd24>
81115758:	103e4826 	beq	r2,zero,8111507c <__reset+0xfb0f507c>
8111575c:	d9402117 	ldw	r5,132(sp)
81115760:	d9002017 	ldw	r4,128(sp)
81115764:	d9801a04 	addi	r6,sp,104
81115768:	111493c0 	call	8111493c <__sprint_r.part.0>
8111576c:	10000c1e 	bne	r2,zero,811157a0 <___vfiprintf_internal_r+0xd50>
81115770:	d8801c17 	ldw	r2,112(sp)
81115774:	8c80010e 	bge	r17,r18,8111577c <___vfiprintf_internal_r+0xd2c>
81115778:	9023883a 	mov	r17,r18
8111577c:	da802317 	ldw	r10,140(sp)
81115780:	5455883a 	add	r10,r10,r17
81115784:	da802315 	stw	r10,140(sp)
81115788:	103e4126 	beq	r2,zero,81115090 <__reset+0xfb0f5090>
8111578c:	d9402117 	ldw	r5,132(sp)
81115790:	d9002017 	ldw	r4,128(sp)
81115794:	d9801a04 	addi	r6,sp,104
81115798:	111493c0 	call	8111493c <__sprint_r.part.0>
8111579c:	103e3c26 	beq	r2,zero,81115090 <__reset+0xfb0f5090>
811157a0:	dd002117 	ldw	r20,132(sp)
811157a4:	a080030b 	ldhu	r2,12(r20)
811157a8:	1080100c 	andi	r2,r2,64
811157ac:	1001231e 	bne	r2,zero,81115c3c <___vfiprintf_internal_r+0x11ec>
811157b0:	d8802317 	ldw	r2,140(sp)
811157b4:	003d7b06 	br	81114da4 <__reset+0xfb0f4da4>
811157b8:	1000991e 	bne	r2,zero,81115a20 <___vfiprintf_internal_r+0xfd0>
811157bc:	00c00044 	movi	r3,1
811157c0:	9805883a 	mov	r2,r19
811157c4:	dd400015 	stw	r21,0(sp)
811157c8:	dcc00115 	stw	r19,4(sp)
811157cc:	dcc01c15 	stw	r19,112(sp)
811157d0:	d8c01b15 	stw	r3,108(sp)
811157d4:	d811883a 	mov	r8,sp
811157d8:	42000204 	addi	r8,r8,8
811157dc:	a2c0010c 	andi	r11,r20,4
811157e0:	583fe426 	beq	r11,zero,81115774 <__reset+0xfb0f5774>
811157e4:	8ca7c83a 	sub	r19,r17,r18
811157e8:	04ffe20e 	bge	zero,r19,81115774 <__reset+0xfb0f5774>
811157ec:	01c00404 	movi	r7,16
811157f0:	3cffcc0e 	bge	r7,r19,81115724 <__reset+0xfb0f5724>
811157f4:	02a044b4 	movhi	r10,33042
811157f8:	52bf6604 	addi	r10,r10,-616
811157fc:	d9001b17 	ldw	r4,108(sp)
81115800:	da802415 	stw	r10,144(sp)
81115804:	382b883a 	mov	r21,r7
81115808:	050001c4 	movi	r20,7
8111580c:	df002017 	ldw	fp,128(sp)
81115810:	00000506 	br	81115828 <___vfiprintf_internal_r+0xdd8>
81115814:	21400084 	addi	r5,r4,2
81115818:	42000204 	addi	r8,r8,8
8111581c:	1809883a 	mov	r4,r3
81115820:	9cfffc04 	addi	r19,r19,-16
81115824:	acffc40e 	bge	r21,r19,81115738 <__reset+0xfb0f5738>
81115828:	10800404 	addi	r2,r2,16
8111582c:	20c00044 	addi	r3,r4,1
81115830:	45800015 	stw	r22,0(r8)
81115834:	45400115 	stw	r21,4(r8)
81115838:	d8801c15 	stw	r2,112(sp)
8111583c:	d8c01b15 	stw	r3,108(sp)
81115840:	a0fff40e 	bge	r20,r3,81115814 <__reset+0xfb0f5814>
81115844:	1000041e 	bne	r2,zero,81115858 <___vfiprintf_internal_r+0xe08>
81115848:	01400044 	movi	r5,1
8111584c:	0009883a 	mov	r4,zero
81115850:	d811883a 	mov	r8,sp
81115854:	003ff206 	br	81115820 <__reset+0xfb0f5820>
81115858:	d9402117 	ldw	r5,132(sp)
8111585c:	d9801a04 	addi	r6,sp,104
81115860:	e009883a 	mov	r4,fp
81115864:	111493c0 	call	8111493c <__sprint_r.part.0>
81115868:	103fcd1e 	bne	r2,zero,811157a0 <__reset+0xfb0f57a0>
8111586c:	d9001b17 	ldw	r4,108(sp)
81115870:	d8801c17 	ldw	r2,112(sp)
81115874:	d811883a 	mov	r8,sp
81115878:	21400044 	addi	r5,r4,1
8111587c:	003fe806 	br	81115820 <__reset+0xfb0f5820>
81115880:	d9402117 	ldw	r5,132(sp)
81115884:	d9002017 	ldw	r4,128(sp)
81115888:	d9801a04 	addi	r6,sp,104
8111588c:	d9c02b15 	stw	r7,172(sp)
81115890:	db402a15 	stw	r13,168(sp)
81115894:	111493c0 	call	8111493c <__sprint_r.part.0>
81115898:	d9c02b17 	ldw	r7,172(sp)
8111589c:	db402a17 	ldw	r13,168(sp)
811158a0:	103fbf1e 	bne	r2,zero,811157a0 <__reset+0xfb0f57a0>
811158a4:	d9401b17 	ldw	r5,108(sp)
811158a8:	d8801c17 	ldw	r2,112(sp)
811158ac:	d811883a 	mov	r8,sp
811158b0:	29800044 	addi	r6,r5,1
811158b4:	003dc406 	br	81114fc8 <__reset+0xfb0f4fc8>
811158b8:	1000d21e 	bne	r2,zero,81115c04 <___vfiprintf_internal_r+0x11b4>
811158bc:	d8c01d87 	ldb	r3,118(sp)
811158c0:	18009526 	beq	r3,zero,81115b18 <___vfiprintf_internal_r+0x10c8>
811158c4:	00800044 	movi	r2,1
811158c8:	d8c01d84 	addi	r3,sp,118
811158cc:	1009883a 	mov	r4,r2
811158d0:	d8c00015 	stw	r3,0(sp)
811158d4:	d8800115 	stw	r2,4(sp)
811158d8:	d811883a 	mov	r8,sp
811158dc:	200b883a 	mov	r5,r4
811158e0:	42000204 	addi	r8,r8,8
811158e4:	21000044 	addi	r4,r4,1
811158e8:	003d9706 	br	81114f48 <__reset+0xfb0f4f48>
811158ec:	d9001d04 	addi	r4,sp,116
811158f0:	00800084 	movi	r2,2
811158f4:	d9000015 	stw	r4,0(sp)
811158f8:	d8800115 	stw	r2,4(sp)
811158fc:	1809883a 	mov	r4,r3
81115900:	d811883a 	mov	r8,sp
81115904:	200b883a 	mov	r5,r4
81115908:	42000204 	addi	r8,r8,8
8111590c:	21000044 	addi	r4,r4,1
81115910:	003f4e06 	br	8111564c <__reset+0xfb0f564c>
81115914:	d8001d85 	stb	zero,118(sp)
81115918:	48005016 	blt	r9,zero,81115a5c <___vfiprintf_internal_r+0x100c>
8111591c:	00ffdfc4 	movi	r3,-129
81115920:	94c4b03a 	or	r2,r18,r19
81115924:	a0e8703a 	and	r20,r20,r3
81115928:	103d4426 	beq	r2,zero,81114e3c <__reset+0xfb0f4e3c>
8111592c:	0039883a 	mov	fp,zero
81115930:	d9002617 	ldw	r4,152(sp)
81115934:	dd401a04 	addi	r21,sp,104
81115938:	908003cc 	andi	r2,r18,15
8111593c:	9806973a 	slli	r3,r19,28
81115940:	2085883a 	add	r2,r4,r2
81115944:	9024d13a 	srli	r18,r18,4
81115948:	10800003 	ldbu	r2,0(r2)
8111594c:	9826d13a 	srli	r19,r19,4
81115950:	ad7fffc4 	addi	r21,r21,-1
81115954:	1ca4b03a 	or	r18,r3,r18
81115958:	a8800005 	stb	r2,0(r21)
8111595c:	94c4b03a 	or	r2,r18,r19
81115960:	103ff51e 	bne	r2,zero,81115938 <__reset+0xfb0f5938>
81115964:	003e5906 	br	811152cc <__reset+0xfb0f52cc>
81115968:	d9402117 	ldw	r5,132(sp)
8111596c:	d9002017 	ldw	r4,128(sp)
81115970:	d9801a04 	addi	r6,sp,104
81115974:	111493c0 	call	8111493c <__sprint_r.part.0>
81115978:	103f891e 	bne	r2,zero,811157a0 <__reset+0xfb0f57a0>
8111597c:	d8801c17 	ldw	r2,112(sp)
81115980:	d811883a 	mov	r8,sp
81115984:	003f9506 	br	811157dc <__reset+0xfb0f57dc>
81115988:	d9402117 	ldw	r5,132(sp)
8111598c:	d9002017 	ldw	r4,128(sp)
81115990:	d9801a04 	addi	r6,sp,104
81115994:	111493c0 	call	8111493c <__sprint_r.part.0>
81115998:	103f811e 	bne	r2,zero,811157a0 <__reset+0xfb0f57a0>
8111599c:	d811883a 	mov	r8,sp
811159a0:	003ced06 	br	81114d58 <__reset+0xfb0f4d58>
811159a4:	d9402117 	ldw	r5,132(sp)
811159a8:	d9002017 	ldw	r4,128(sp)
811159ac:	d9801a04 	addi	r6,sp,104
811159b0:	da402c15 	stw	r9,176(sp)
811159b4:	db802a15 	stw	r14,168(sp)
811159b8:	111493c0 	call	8111493c <__sprint_r.part.0>
811159bc:	da402c17 	ldw	r9,176(sp)
811159c0:	db802a17 	ldw	r14,168(sp)
811159c4:	103f761e 	bne	r2,zero,811157a0 <__reset+0xfb0f57a0>
811159c8:	d9401b17 	ldw	r5,108(sp)
811159cc:	d8801c17 	ldw	r2,112(sp)
811159d0:	d811883a 	mov	r8,sp
811159d4:	29000044 	addi	r4,r5,1
811159d8:	003d5b06 	br	81114f48 <__reset+0xfb0f4f48>
811159dc:	d9402117 	ldw	r5,132(sp)
811159e0:	d9002017 	ldw	r4,128(sp)
811159e4:	d9801a04 	addi	r6,sp,104
811159e8:	da402c15 	stw	r9,176(sp)
811159ec:	111493c0 	call	8111493c <__sprint_r.part.0>
811159f0:	da402c17 	ldw	r9,176(sp)
811159f4:	103f6a1e 	bne	r2,zero,811157a0 <__reset+0xfb0f57a0>
811159f8:	d9401b17 	ldw	r5,108(sp)
811159fc:	d8801c17 	ldw	r2,112(sp)
81115a00:	d811883a 	mov	r8,sp
81115a04:	29000044 	addi	r4,r5,1
81115a08:	003f1006 	br	8111564c <__reset+0xfb0f564c>
81115a0c:	1000c31e 	bne	r2,zero,81115d1c <___vfiprintf_internal_r+0x12cc>
81115a10:	01000044 	movi	r4,1
81115a14:	000b883a 	mov	r5,zero
81115a18:	d811883a 	mov	r8,sp
81115a1c:	003f0d06 	br	81115654 <__reset+0xfb0f5654>
81115a20:	d9402117 	ldw	r5,132(sp)
81115a24:	d9002017 	ldw	r4,128(sp)
81115a28:	d9801a04 	addi	r6,sp,104
81115a2c:	111493c0 	call	8111493c <__sprint_r.part.0>
81115a30:	103f5b1e 	bne	r2,zero,811157a0 <__reset+0xfb0f57a0>
81115a34:	d9001b17 	ldw	r4,108(sp)
81115a38:	d8801c17 	ldw	r2,112(sp)
81115a3c:	d811883a 	mov	r8,sp
81115a40:	21000044 	addi	r4,r4,1
81115a44:	003d8006 	br	81115048 <__reset+0xfb0f5048>
81115a48:	012044b4 	movhi	r4,33042
81115a4c:	213f0204 	addi	r4,r4,-1016
81115a50:	d9002615 	stw	r4,152(sp)
81115a54:	d8c02215 	stw	r3,136(sp)
81115a58:	1029883a 	mov	r20,r2
81115a5c:	94c4b03a 	or	r2,r18,r19
81115a60:	103fb21e 	bne	r2,zero,8111592c <__reset+0xfb0f592c>
81115a64:	0039883a 	mov	fp,zero
81115a68:	00800084 	movi	r2,2
81115a6c:	003e6b06 	br	8111541c <__reset+0xfb0f541c>
81115a70:	da802217 	ldw	r10,136(sp)
81115a74:	d8001d85 	stb	zero,118(sp)
81115a78:	0027883a 	mov	r19,zero
81115a7c:	50800104 	addi	r2,r10,4
81115a80:	54800017 	ldw	r18,0(r10)
81115a84:	483e6016 	blt	r9,zero,81115408 <__reset+0xfb0f5408>
81115a88:	00ffdfc4 	movi	r3,-129
81115a8c:	d8802215 	stw	r2,136(sp)
81115a90:	a0e8703a 	and	r20,r20,r3
81115a94:	0039883a 	mov	fp,zero
81115a98:	903ebb26 	beq	r18,zero,81115588 <__reset+0xfb0f5588>
81115a9c:	00800244 	movi	r2,9
81115aa0:	14bdee36 	bltu	r2,r18,8111525c <__reset+0xfb0f525c>
81115aa4:	003eba06 	br	81115590 <__reset+0xfb0f5590>
81115aa8:	00800c04 	movi	r2,48
81115aac:	d8c01d45 	stb	r3,117(sp)
81115ab0:	d8801d05 	stb	r2,116(sp)
81115ab4:	d8001d85 	stb	zero,118(sp)
81115ab8:	a0c00094 	ori	r3,r20,2
81115abc:	4800a916 	blt	r9,zero,81115d64 <___vfiprintf_internal_r+0x1314>
81115ac0:	00bfdfc4 	movi	r2,-129
81115ac4:	a096703a 	and	r11,r20,r2
81115ac8:	5d000094 	ori	r20,r11,2
81115acc:	0039883a 	mov	fp,zero
81115ad0:	003f9706 	br	81115930 <__reset+0xfb0f5930>
81115ad4:	8025883a 	mov	r18,r16
81115ad8:	003c2e06 	br	81114b94 <__reset+0xfb0f4b94>
81115adc:	00a044b4 	movhi	r2,33042
81115ae0:	10bf0204 	addi	r2,r2,-1016
81115ae4:	0039883a 	mov	fp,zero
81115ae8:	d8802615 	stw	r2,152(sp)
81115aec:	003f9006 	br	81115930 <__reset+0xfb0f5930>
81115af0:	04a5c83a 	sub	r18,zero,r18
81115af4:	07000b44 	movi	fp,45
81115af8:	9004c03a 	cmpne	r2,r18,zero
81115afc:	04e7c83a 	sub	r19,zero,r19
81115b00:	df001d85 	stb	fp,118(sp)
81115b04:	98a7c83a 	sub	r19,r19,r2
81115b08:	48009f16 	blt	r9,zero,81115d88 <___vfiprintf_internal_r+0x1338>
81115b0c:	00bfdfc4 	movi	r2,-129
81115b10:	a0a8703a 	and	r20,r20,r2
81115b14:	003dd006 	br	81115258 <__reset+0xfb0f5258>
81115b18:	70004c26 	beq	r14,zero,81115c4c <___vfiprintf_internal_r+0x11fc>
81115b1c:	00800084 	movi	r2,2
81115b20:	d8c01d04 	addi	r3,sp,116
81115b24:	d8c00015 	stw	r3,0(sp)
81115b28:	d8800115 	stw	r2,4(sp)
81115b2c:	01000044 	movi	r4,1
81115b30:	d811883a 	mov	r8,sp
81115b34:	003f7306 	br	81115904 <__reset+0xfb0f5904>
81115b38:	a080100c 	andi	r2,r20,64
81115b3c:	da802217 	ldw	r10,136(sp)
81115b40:	103e0626 	beq	r2,zero,8111535c <__reset+0xfb0f535c>
81115b44:	5480000f 	ldh	r18,0(r10)
81115b48:	52800104 	addi	r10,r10,4
81115b4c:	da802215 	stw	r10,136(sp)
81115b50:	9027d7fa 	srai	r19,r18,31
81115b54:	9805883a 	mov	r2,r19
81115b58:	003db806 	br	8111523c <__reset+0xfb0f523c>
81115b5c:	a080040c 	andi	r2,r20,16
81115b60:	1000091e 	bne	r2,zero,81115b88 <___vfiprintf_internal_r+0x1138>
81115b64:	a2c0100c 	andi	r11,r20,64
81115b68:	58000726 	beq	r11,zero,81115b88 <___vfiprintf_internal_r+0x1138>
81115b6c:	da802217 	ldw	r10,136(sp)
81115b70:	50800017 	ldw	r2,0(r10)
81115b74:	52800104 	addi	r10,r10,4
81115b78:	da802215 	stw	r10,136(sp)
81115b7c:	da802317 	ldw	r10,140(sp)
81115b80:	1280000d 	sth	r10,0(r2)
81115b84:	003be706 	br	81114b24 <__reset+0xfb0f4b24>
81115b88:	da802217 	ldw	r10,136(sp)
81115b8c:	50800017 	ldw	r2,0(r10)
81115b90:	52800104 	addi	r10,r10,4
81115b94:	da802215 	stw	r10,136(sp)
81115b98:	da802317 	ldw	r10,140(sp)
81115b9c:	12800015 	stw	r10,0(r2)
81115ba0:	003be006 	br	81114b24 <__reset+0xfb0f4b24>
81115ba4:	a080100c 	andi	r2,r20,64
81115ba8:	da802217 	ldw	r10,136(sp)
81115bac:	10003026 	beq	r2,zero,81115c70 <___vfiprintf_internal_r+0x1220>
81115bb0:	5480000b 	ldhu	r18,0(r10)
81115bb4:	52800104 	addi	r10,r10,4
81115bb8:	0027883a 	mov	r19,zero
81115bbc:	da802215 	stw	r10,136(sp)
81115bc0:	003d8006 	br	811151c4 <__reset+0xfb0f51c4>
81115bc4:	80c00007 	ldb	r3,0(r16)
81115bc8:	003c0006 	br	81114bcc <__reset+0xfb0f4bcc>
81115bcc:	a080100c 	andi	r2,r20,64
81115bd0:	d8001d85 	stb	zero,118(sp)
81115bd4:	da802217 	ldw	r10,136(sp)
81115bd8:	1000201e 	bne	r2,zero,81115c5c <___vfiprintf_internal_r+0x120c>
81115bdc:	50800104 	addi	r2,r10,4
81115be0:	54800017 	ldw	r18,0(r10)
81115be4:	0027883a 	mov	r19,zero
81115be8:	483def0e 	bge	r9,zero,811153a8 <__reset+0xfb0f53a8>
81115bec:	94c6b03a 	or	r3,r18,r19
81115bf0:	d8802215 	stw	r2,136(sp)
81115bf4:	183d4e1e 	bne	r3,zero,81115130 <__reset+0xfb0f5130>
81115bf8:	0039883a 	mov	fp,zero
81115bfc:	0005883a 	mov	r2,zero
81115c00:	003e0606 	br	8111541c <__reset+0xfb0f541c>
81115c04:	d9402117 	ldw	r5,132(sp)
81115c08:	d9002017 	ldw	r4,128(sp)
81115c0c:	d9801a04 	addi	r6,sp,104
81115c10:	da402c15 	stw	r9,176(sp)
81115c14:	db802a15 	stw	r14,168(sp)
81115c18:	111493c0 	call	8111493c <__sprint_r.part.0>
81115c1c:	da402c17 	ldw	r9,176(sp)
81115c20:	db802a17 	ldw	r14,168(sp)
81115c24:	103ede1e 	bne	r2,zero,811157a0 <__reset+0xfb0f57a0>
81115c28:	d9401b17 	ldw	r5,108(sp)
81115c2c:	d8801c17 	ldw	r2,112(sp)
81115c30:	d811883a 	mov	r8,sp
81115c34:	29000044 	addi	r4,r5,1
81115c38:	003e7406 	br	8111560c <__reset+0xfb0f560c>
81115c3c:	00bfffc4 	movi	r2,-1
81115c40:	003c5806 	br	81114da4 <__reset+0xfb0f4da4>
81115c44:	d811883a 	mov	r8,sp
81115c48:	003ee806 	br	811157ec <__reset+0xfb0f57ec>
81115c4c:	000b883a 	mov	r5,zero
81115c50:	01000044 	movi	r4,1
81115c54:	d811883a 	mov	r8,sp
81115c58:	003e7c06 	br	8111564c <__reset+0xfb0f564c>
81115c5c:	50800104 	addi	r2,r10,4
81115c60:	5480000b 	ldhu	r18,0(r10)
81115c64:	0027883a 	mov	r19,zero
81115c68:	483dcf0e 	bge	r9,zero,811153a8 <__reset+0xfb0f53a8>
81115c6c:	003fdf06 	br	81115bec <__reset+0xfb0f5bec>
81115c70:	54800017 	ldw	r18,0(r10)
81115c74:	52800104 	addi	r10,r10,4
81115c78:	0027883a 	mov	r19,zero
81115c7c:	da802215 	stw	r10,136(sp)
81115c80:	003d5006 	br	811151c4 <__reset+0xfb0f51c4>
81115c84:	50800104 	addi	r2,r10,4
81115c88:	5480000b 	ldhu	r18,0(r10)
81115c8c:	0027883a 	mov	r19,zero
81115c90:	483f7d0e 	bge	r9,zero,81115a88 <__reset+0xfb0f5a88>
81115c94:	003ddc06 	br	81115408 <__reset+0xfb0f5408>
81115c98:	d8c02215 	stw	r3,136(sp)
81115c9c:	0039883a 	mov	fp,zero
81115ca0:	003ddb06 	br	81115410 <__reset+0xfb0f5410>
81115ca4:	02a044b4 	movhi	r10,33042
81115ca8:	52bf6204 	addi	r10,r10,-632
81115cac:	da802415 	stw	r10,144(sp)
81115cb0:	003e8306 	br	811156c0 <__reset+0xfb0f56c0>
81115cb4:	d8801c17 	ldw	r2,112(sp)
81115cb8:	dd002117 	ldw	r20,132(sp)
81115cbc:	103eb926 	beq	r2,zero,811157a4 <__reset+0xfb0f57a4>
81115cc0:	d9002017 	ldw	r4,128(sp)
81115cc4:	d9801a04 	addi	r6,sp,104
81115cc8:	a00b883a 	mov	r5,r20
81115ccc:	111493c0 	call	8111493c <__sprint_r.part.0>
81115cd0:	003eb406 	br	811157a4 <__reset+0xfb0f57a4>
81115cd4:	80c00043 	ldbu	r3,1(r16)
81115cd8:	a5000814 	ori	r20,r20,32
81115cdc:	84000044 	addi	r16,r16,1
81115ce0:	18c03fcc 	andi	r3,r3,255
81115ce4:	18c0201c 	xori	r3,r3,128
81115ce8:	18ffe004 	addi	r3,r3,-128
81115cec:	003bb706 	br	81114bcc <__reset+0xfb0f4bcc>
81115cf0:	a809883a 	mov	r4,r21
81115cf4:	d8c02a15 	stw	r3,168(sp)
81115cf8:	da002b15 	stw	r8,172(sp)
81115cfc:	110d1940 	call	8110d194 <strlen>
81115d00:	d8c02a17 	ldw	r3,168(sp)
81115d04:	1027883a 	mov	r19,r2
81115d08:	df001d83 	ldbu	fp,118(sp)
81115d0c:	d8c02215 	stw	r3,136(sp)
81115d10:	0013883a 	mov	r9,zero
81115d14:	da002b17 	ldw	r8,172(sp)
81115d18:	003c4d06 	br	81114e50 <__reset+0xfb0f4e50>
81115d1c:	d9402117 	ldw	r5,132(sp)
81115d20:	d9002017 	ldw	r4,128(sp)
81115d24:	d9801a04 	addi	r6,sp,104
81115d28:	da402c15 	stw	r9,176(sp)
81115d2c:	111493c0 	call	8111493c <__sprint_r.part.0>
81115d30:	da402c17 	ldw	r9,176(sp)
81115d34:	103e9a1e 	bne	r2,zero,811157a0 <__reset+0xfb0f57a0>
81115d38:	d9401b17 	ldw	r5,108(sp)
81115d3c:	d8801c17 	ldw	r2,112(sp)
81115d40:	d811883a 	mov	r8,sp
81115d44:	29000044 	addi	r4,r5,1
81115d48:	003e4206 	br	81115654 <__reset+0xfb0f5654>
81115d4c:	d9401b17 	ldw	r5,108(sp)
81115d50:	012044b4 	movhi	r4,33042
81115d54:	213f6604 	addi	r4,r4,-616
81115d58:	d9002415 	stw	r4,144(sp)
81115d5c:	29400044 	addi	r5,r5,1
81115d60:	003c6d06 	br	81114f18 <__reset+0xfb0f4f18>
81115d64:	0039883a 	mov	fp,zero
81115d68:	00800084 	movi	r2,2
81115d6c:	10803fcc 	andi	r2,r2,255
81115d70:	01000044 	movi	r4,1
81115d74:	11001e26 	beq	r2,r4,81115df0 <___vfiprintf_internal_r+0x13a0>
81115d78:	01000084 	movi	r4,2
81115d7c:	11001e1e 	bne	r2,r4,81115df8 <___vfiprintf_internal_r+0x13a8>
81115d80:	1829883a 	mov	r20,r3
81115d84:	003eea06 	br	81115930 <__reset+0xfb0f5930>
81115d88:	a007883a 	mov	r3,r20
81115d8c:	00800044 	movi	r2,1
81115d90:	003ff606 	br	81115d6c <__reset+0xfb0f5d6c>
81115d94:	00800184 	movi	r2,6
81115d98:	1240012e 	bgeu	r2,r9,81115da0 <___vfiprintf_internal_r+0x1350>
81115d9c:	1013883a 	mov	r9,r2
81115da0:	4827883a 	mov	r19,r9
81115da4:	4825883a 	mov	r18,r9
81115da8:	48001516 	blt	r9,zero,81115e00 <___vfiprintf_internal_r+0x13b0>
81115dac:	056044b4 	movhi	r21,33042
81115db0:	d8c02215 	stw	r3,136(sp)
81115db4:	ad7f0704 	addi	r21,r21,-996
81115db8:	003d1406 	br	8111520c <__reset+0xfb0f520c>
81115dbc:	02a044b4 	movhi	r10,33042
81115dc0:	52bf6204 	addi	r10,r10,-632
81115dc4:	da802415 	stw	r10,144(sp)
81115dc8:	200d883a 	mov	r6,r4
81115dcc:	003c9106 	br	81115014 <__reset+0xfb0f5014>
81115dd0:	5021883a 	mov	r16,r10
81115dd4:	0013883a 	mov	r9,zero
81115dd8:	003b7d06 	br	81114bd0 <__reset+0xfb0f4bd0>
81115ddc:	4827883a 	mov	r19,r9
81115de0:	df001d83 	ldbu	fp,118(sp)
81115de4:	d8c02215 	stw	r3,136(sp)
81115de8:	0013883a 	mov	r9,zero
81115dec:	003c1806 	br	81114e50 <__reset+0xfb0f4e50>
81115df0:	1829883a 	mov	r20,r3
81115df4:	003d1806 	br	81115258 <__reset+0xfb0f5258>
81115df8:	1829883a 	mov	r20,r3
81115dfc:	003ccd06 	br	81115134 <__reset+0xfb0f5134>
81115e00:	0025883a 	mov	r18,zero
81115e04:	003fe906 	br	81115dac <__reset+0xfb0f5dac>
81115e08:	d8802217 	ldw	r2,136(sp)
81115e0c:	80c00043 	ldbu	r3,1(r16)
81115e10:	5021883a 	mov	r16,r10
81115e14:	12400017 	ldw	r9,0(r2)
81115e18:	10800104 	addi	r2,r2,4
81115e1c:	d8802215 	stw	r2,136(sp)
81115e20:	483faf0e 	bge	r9,zero,81115ce0 <__reset+0xfb0f5ce0>
81115e24:	18c03fcc 	andi	r3,r3,255
81115e28:	18c0201c 	xori	r3,r3,128
81115e2c:	027fffc4 	movi	r9,-1
81115e30:	18ffe004 	addi	r3,r3,-128
81115e34:	003b6506 	br	81114bcc <__reset+0xfb0f4bcc>
81115e38:	d9c01d85 	stb	r7,118(sp)
81115e3c:	003ca006 	br	811150c0 <__reset+0xfb0f50c0>
81115e40:	d9c01d85 	stb	r7,118(sp)
81115e44:	003cad06 	br	811150fc <__reset+0xfb0f50fc>
81115e48:	d9c01d85 	stb	r7,118(sp)
81115e4c:	003d7d06 	br	81115444 <__reset+0xfb0f5444>
81115e50:	d9c01d85 	stb	r7,118(sp)
81115e54:	003d5f06 	br	811153d4 <__reset+0xfb0f53d4>
81115e58:	a080004c 	andi	r2,r20,1
81115e5c:	0039883a 	mov	fp,zero
81115e60:	10000526 	beq	r2,zero,81115e78 <___vfiprintf_internal_r+0x1428>
81115e64:	00800c04 	movi	r2,48
81115e68:	d88019c5 	stb	r2,103(sp)
81115e6c:	dcc02717 	ldw	r19,156(sp)
81115e70:	dd4019c4 	addi	r21,sp,103
81115e74:	003bf606 	br	81114e50 <__reset+0xfb0f4e50>
81115e78:	0027883a 	mov	r19,zero
81115e7c:	dd401a04 	addi	r21,sp,104
81115e80:	003bf306 	br	81114e50 <__reset+0xfb0f4e50>
81115e84:	d9c01d85 	stb	r7,118(sp)
81115e88:	003dc806 	br	811155ac <__reset+0xfb0f55ac>
81115e8c:	d9c01d85 	stb	r7,118(sp)
81115e90:	003d3a06 	br	8111537c <__reset+0xfb0f537c>
81115e94:	d9c01d85 	stb	r7,118(sp)
81115e98:	003d2a06 	br	81115344 <__reset+0xfb0f5344>
81115e9c:	d9c01d85 	stb	r7,118(sp)
81115ea0:	003cde06 	br	8111521c <__reset+0xfb0f521c>
81115ea4:	d9c01d85 	stb	r7,118(sp)
81115ea8:	003cbc06 	br	8111519c <__reset+0xfb0f519c>

81115eac <__vfiprintf_internal>:
81115eac:	00a044b4 	movhi	r2,33042
81115eb0:	10873404 	addi	r2,r2,7376
81115eb4:	300f883a 	mov	r7,r6
81115eb8:	280d883a 	mov	r6,r5
81115ebc:	200b883a 	mov	r5,r4
81115ec0:	11000017 	ldw	r4,0(r2)
81115ec4:	1114a501 	jmpi	81114a50 <___vfiprintf_internal_r>

81115ec8 <__sbprintf>:
81115ec8:	2880030b 	ldhu	r2,12(r5)
81115ecc:	2ac01917 	ldw	r11,100(r5)
81115ed0:	2a80038b 	ldhu	r10,14(r5)
81115ed4:	2a400717 	ldw	r9,28(r5)
81115ed8:	2a000917 	ldw	r8,36(r5)
81115edc:	defee204 	addi	sp,sp,-1144
81115ee0:	00c10004 	movi	r3,1024
81115ee4:	dc011a15 	stw	r16,1128(sp)
81115ee8:	10bfff4c 	andi	r2,r2,65533
81115eec:	2821883a 	mov	r16,r5
81115ef0:	d8cb883a 	add	r5,sp,r3
81115ef4:	dc811c15 	stw	r18,1136(sp)
81115ef8:	dc411b15 	stw	r17,1132(sp)
81115efc:	dfc11d15 	stw	ra,1140(sp)
81115f00:	2025883a 	mov	r18,r4
81115f04:	d881030d 	sth	r2,1036(sp)
81115f08:	dac11915 	stw	r11,1124(sp)
81115f0c:	da81038d 	sth	r10,1038(sp)
81115f10:	da410715 	stw	r9,1052(sp)
81115f14:	da010915 	stw	r8,1060(sp)
81115f18:	dec10015 	stw	sp,1024(sp)
81115f1c:	dec10415 	stw	sp,1040(sp)
81115f20:	d8c10215 	stw	r3,1032(sp)
81115f24:	d8c10515 	stw	r3,1044(sp)
81115f28:	d8010615 	stw	zero,1048(sp)
81115f2c:	1114a500 	call	81114a50 <___vfiprintf_internal_r>
81115f30:	1023883a 	mov	r17,r2
81115f34:	10000416 	blt	r2,zero,81115f48 <__sbprintf+0x80>
81115f38:	d9410004 	addi	r5,sp,1024
81115f3c:	9009883a 	mov	r4,r18
81115f40:	11110f40 	call	811110f4 <_fflush_r>
81115f44:	10000d1e 	bne	r2,zero,81115f7c <__sbprintf+0xb4>
81115f48:	d881030b 	ldhu	r2,1036(sp)
81115f4c:	1080100c 	andi	r2,r2,64
81115f50:	10000326 	beq	r2,zero,81115f60 <__sbprintf+0x98>
81115f54:	8080030b 	ldhu	r2,12(r16)
81115f58:	10801014 	ori	r2,r2,64
81115f5c:	8080030d 	sth	r2,12(r16)
81115f60:	8805883a 	mov	r2,r17
81115f64:	dfc11d17 	ldw	ra,1140(sp)
81115f68:	dc811c17 	ldw	r18,1136(sp)
81115f6c:	dc411b17 	ldw	r17,1132(sp)
81115f70:	dc011a17 	ldw	r16,1128(sp)
81115f74:	dec11e04 	addi	sp,sp,1144
81115f78:	f800283a 	ret
81115f7c:	047fffc4 	movi	r17,-1
81115f80:	003ff106 	br	81115f48 <__reset+0xfb0f5f48>

81115f84 <__swbuf_r>:
81115f84:	defffb04 	addi	sp,sp,-20
81115f88:	dcc00315 	stw	r19,12(sp)
81115f8c:	dc800215 	stw	r18,8(sp)
81115f90:	dc000015 	stw	r16,0(sp)
81115f94:	dfc00415 	stw	ra,16(sp)
81115f98:	dc400115 	stw	r17,4(sp)
81115f9c:	2025883a 	mov	r18,r4
81115fa0:	2827883a 	mov	r19,r5
81115fa4:	3021883a 	mov	r16,r6
81115fa8:	20000226 	beq	r4,zero,81115fb4 <__swbuf_r+0x30>
81115fac:	20800e17 	ldw	r2,56(r4)
81115fb0:	10004226 	beq	r2,zero,811160bc <__swbuf_r+0x138>
81115fb4:	80800617 	ldw	r2,24(r16)
81115fb8:	8100030b 	ldhu	r4,12(r16)
81115fbc:	80800215 	stw	r2,8(r16)
81115fc0:	2080020c 	andi	r2,r4,8
81115fc4:	10003626 	beq	r2,zero,811160a0 <__swbuf_r+0x11c>
81115fc8:	80c00417 	ldw	r3,16(r16)
81115fcc:	18003426 	beq	r3,zero,811160a0 <__swbuf_r+0x11c>
81115fd0:	2088000c 	andi	r2,r4,8192
81115fd4:	9c403fcc 	andi	r17,r19,255
81115fd8:	10001a26 	beq	r2,zero,81116044 <__swbuf_r+0xc0>
81115fdc:	80800017 	ldw	r2,0(r16)
81115fe0:	81000517 	ldw	r4,20(r16)
81115fe4:	10c7c83a 	sub	r3,r2,r3
81115fe8:	1900200e 	bge	r3,r4,8111606c <__swbuf_r+0xe8>
81115fec:	18c00044 	addi	r3,r3,1
81115ff0:	81000217 	ldw	r4,8(r16)
81115ff4:	11400044 	addi	r5,r2,1
81115ff8:	81400015 	stw	r5,0(r16)
81115ffc:	213fffc4 	addi	r4,r4,-1
81116000:	81000215 	stw	r4,8(r16)
81116004:	14c00005 	stb	r19,0(r2)
81116008:	80800517 	ldw	r2,20(r16)
8111600c:	10c01e26 	beq	r2,r3,81116088 <__swbuf_r+0x104>
81116010:	8080030b 	ldhu	r2,12(r16)
81116014:	1080004c 	andi	r2,r2,1
81116018:	10000226 	beq	r2,zero,81116024 <__swbuf_r+0xa0>
8111601c:	00800284 	movi	r2,10
81116020:	88801926 	beq	r17,r2,81116088 <__swbuf_r+0x104>
81116024:	8805883a 	mov	r2,r17
81116028:	dfc00417 	ldw	ra,16(sp)
8111602c:	dcc00317 	ldw	r19,12(sp)
81116030:	dc800217 	ldw	r18,8(sp)
81116034:	dc400117 	ldw	r17,4(sp)
81116038:	dc000017 	ldw	r16,0(sp)
8111603c:	dec00504 	addi	sp,sp,20
81116040:	f800283a 	ret
81116044:	81401917 	ldw	r5,100(r16)
81116048:	00b7ffc4 	movi	r2,-8193
8111604c:	21080014 	ori	r4,r4,8192
81116050:	2884703a 	and	r2,r5,r2
81116054:	80801915 	stw	r2,100(r16)
81116058:	80800017 	ldw	r2,0(r16)
8111605c:	8100030d 	sth	r4,12(r16)
81116060:	81000517 	ldw	r4,20(r16)
81116064:	10c7c83a 	sub	r3,r2,r3
81116068:	193fe016 	blt	r3,r4,81115fec <__reset+0xfb0f5fec>
8111606c:	800b883a 	mov	r5,r16
81116070:	9009883a 	mov	r4,r18
81116074:	11110f40 	call	811110f4 <_fflush_r>
81116078:	1000071e 	bne	r2,zero,81116098 <__swbuf_r+0x114>
8111607c:	80800017 	ldw	r2,0(r16)
81116080:	00c00044 	movi	r3,1
81116084:	003fda06 	br	81115ff0 <__reset+0xfb0f5ff0>
81116088:	800b883a 	mov	r5,r16
8111608c:	9009883a 	mov	r4,r18
81116090:	11110f40 	call	811110f4 <_fflush_r>
81116094:	103fe326 	beq	r2,zero,81116024 <__reset+0xfb0f6024>
81116098:	00bfffc4 	movi	r2,-1
8111609c:	003fe206 	br	81116028 <__reset+0xfb0f6028>
811160a0:	800b883a 	mov	r5,r16
811160a4:	9009883a 	mov	r4,r18
811160a8:	110f4fc0 	call	8110f4fc <__swsetup_r>
811160ac:	103ffa1e 	bne	r2,zero,81116098 <__reset+0xfb0f6098>
811160b0:	8100030b 	ldhu	r4,12(r16)
811160b4:	80c00417 	ldw	r3,16(r16)
811160b8:	003fc506 	br	81115fd0 <__reset+0xfb0f5fd0>
811160bc:	11114d00 	call	811114d0 <__sinit>
811160c0:	003fbc06 	br	81115fb4 <__reset+0xfb0f5fb4>

811160c4 <__swbuf>:
811160c4:	00a044b4 	movhi	r2,33042
811160c8:	10873404 	addi	r2,r2,7376
811160cc:	280d883a 	mov	r6,r5
811160d0:	200b883a 	mov	r5,r4
811160d4:	11000017 	ldw	r4,0(r2)
811160d8:	1115f841 	jmpi	81115f84 <__swbuf_r>

811160dc <_write_r>:
811160dc:	defffd04 	addi	sp,sp,-12
811160e0:	2805883a 	mov	r2,r5
811160e4:	dc000015 	stw	r16,0(sp)
811160e8:	042044b4 	movhi	r16,33042
811160ec:	dc400115 	stw	r17,4(sp)
811160f0:	300b883a 	mov	r5,r6
811160f4:	84076c04 	addi	r16,r16,7600
811160f8:	2023883a 	mov	r17,r4
811160fc:	380d883a 	mov	r6,r7
81116100:	1009883a 	mov	r4,r2
81116104:	dfc00215 	stw	ra,8(sp)
81116108:	80000015 	stw	zero,0(r16)
8111610c:	111a26c0 	call	8111a26c <write>
81116110:	00ffffc4 	movi	r3,-1
81116114:	10c00526 	beq	r2,r3,8111612c <_write_r+0x50>
81116118:	dfc00217 	ldw	ra,8(sp)
8111611c:	dc400117 	ldw	r17,4(sp)
81116120:	dc000017 	ldw	r16,0(sp)
81116124:	dec00304 	addi	sp,sp,12
81116128:	f800283a 	ret
8111612c:	80c00017 	ldw	r3,0(r16)
81116130:	183ff926 	beq	r3,zero,81116118 <__reset+0xfb0f6118>
81116134:	88c00015 	stw	r3,0(r17)
81116138:	003ff706 	br	81116118 <__reset+0xfb0f6118>

8111613c <_close_r>:
8111613c:	defffd04 	addi	sp,sp,-12
81116140:	dc000015 	stw	r16,0(sp)
81116144:	042044b4 	movhi	r16,33042
81116148:	dc400115 	stw	r17,4(sp)
8111614c:	84076c04 	addi	r16,r16,7600
81116150:	2023883a 	mov	r17,r4
81116154:	2809883a 	mov	r4,r5
81116158:	dfc00215 	stw	ra,8(sp)
8111615c:	80000015 	stw	zero,0(r16)
81116160:	111956c0 	call	8111956c <close>
81116164:	00ffffc4 	movi	r3,-1
81116168:	10c00526 	beq	r2,r3,81116180 <_close_r+0x44>
8111616c:	dfc00217 	ldw	ra,8(sp)
81116170:	dc400117 	ldw	r17,4(sp)
81116174:	dc000017 	ldw	r16,0(sp)
81116178:	dec00304 	addi	sp,sp,12
8111617c:	f800283a 	ret
81116180:	80c00017 	ldw	r3,0(r16)
81116184:	183ff926 	beq	r3,zero,8111616c <__reset+0xfb0f616c>
81116188:	88c00015 	stw	r3,0(r17)
8111618c:	003ff706 	br	8111616c <__reset+0xfb0f616c>

81116190 <_calloc_r>:
81116190:	298b383a 	mul	r5,r5,r6
81116194:	defffe04 	addi	sp,sp,-8
81116198:	dfc00115 	stw	ra,4(sp)
8111619c:	dc000015 	stw	r16,0(sp)
811161a0:	11122300 	call	81112230 <_malloc_r>
811161a4:	10002926 	beq	r2,zero,8111624c <_calloc_r+0xbc>
811161a8:	11bfff17 	ldw	r6,-4(r2)
811161ac:	1021883a 	mov	r16,r2
811161b0:	00bfff04 	movi	r2,-4
811161b4:	308c703a 	and	r6,r6,r2
811161b8:	00c00904 	movi	r3,36
811161bc:	308d883a 	add	r6,r6,r2
811161c0:	19801636 	bltu	r3,r6,8111621c <_calloc_r+0x8c>
811161c4:	008004c4 	movi	r2,19
811161c8:	11800b2e 	bgeu	r2,r6,811161f8 <_calloc_r+0x68>
811161cc:	80000015 	stw	zero,0(r16)
811161d0:	80000115 	stw	zero,4(r16)
811161d4:	008006c4 	movi	r2,27
811161d8:	11801a2e 	bgeu	r2,r6,81116244 <_calloc_r+0xb4>
811161dc:	80000215 	stw	zero,8(r16)
811161e0:	80000315 	stw	zero,12(r16)
811161e4:	30c0151e 	bne	r6,r3,8111623c <_calloc_r+0xac>
811161e8:	80000415 	stw	zero,16(r16)
811161ec:	80800604 	addi	r2,r16,24
811161f0:	80000515 	stw	zero,20(r16)
811161f4:	00000106 	br	811161fc <_calloc_r+0x6c>
811161f8:	8005883a 	mov	r2,r16
811161fc:	10000015 	stw	zero,0(r2)
81116200:	10000115 	stw	zero,4(r2)
81116204:	10000215 	stw	zero,8(r2)
81116208:	8005883a 	mov	r2,r16
8111620c:	dfc00117 	ldw	ra,4(sp)
81116210:	dc000017 	ldw	r16,0(sp)
81116214:	dec00204 	addi	sp,sp,8
81116218:	f800283a 	ret
8111621c:	000b883a 	mov	r5,zero
81116220:	8009883a 	mov	r4,r16
81116224:	1112c7c0 	call	81112c7c <memset>
81116228:	8005883a 	mov	r2,r16
8111622c:	dfc00117 	ldw	ra,4(sp)
81116230:	dc000017 	ldw	r16,0(sp)
81116234:	dec00204 	addi	sp,sp,8
81116238:	f800283a 	ret
8111623c:	80800404 	addi	r2,r16,16
81116240:	003fee06 	br	811161fc <__reset+0xfb0f61fc>
81116244:	80800204 	addi	r2,r16,8
81116248:	003fec06 	br	811161fc <__reset+0xfb0f61fc>
8111624c:	0005883a 	mov	r2,zero
81116250:	003fee06 	br	8111620c <__reset+0xfb0f620c>

81116254 <_fclose_r>:
81116254:	28003926 	beq	r5,zero,8111633c <_fclose_r+0xe8>
81116258:	defffc04 	addi	sp,sp,-16
8111625c:	dc400115 	stw	r17,4(sp)
81116260:	dc000015 	stw	r16,0(sp)
81116264:	dfc00315 	stw	ra,12(sp)
81116268:	dc800215 	stw	r18,8(sp)
8111626c:	2023883a 	mov	r17,r4
81116270:	2821883a 	mov	r16,r5
81116274:	20000226 	beq	r4,zero,81116280 <_fclose_r+0x2c>
81116278:	20800e17 	ldw	r2,56(r4)
8111627c:	10002726 	beq	r2,zero,8111631c <_fclose_r+0xc8>
81116280:	8080030f 	ldh	r2,12(r16)
81116284:	1000071e 	bne	r2,zero,811162a4 <_fclose_r+0x50>
81116288:	0005883a 	mov	r2,zero
8111628c:	dfc00317 	ldw	ra,12(sp)
81116290:	dc800217 	ldw	r18,8(sp)
81116294:	dc400117 	ldw	r17,4(sp)
81116298:	dc000017 	ldw	r16,0(sp)
8111629c:	dec00404 	addi	sp,sp,16
811162a0:	f800283a 	ret
811162a4:	800b883a 	mov	r5,r16
811162a8:	8809883a 	mov	r4,r17
811162ac:	1110ed80 	call	81110ed8 <__sflush_r>
811162b0:	1025883a 	mov	r18,r2
811162b4:	80800b17 	ldw	r2,44(r16)
811162b8:	10000426 	beq	r2,zero,811162cc <_fclose_r+0x78>
811162bc:	81400717 	ldw	r5,28(r16)
811162c0:	8809883a 	mov	r4,r17
811162c4:	103ee83a 	callr	r2
811162c8:	10001616 	blt	r2,zero,81116324 <_fclose_r+0xd0>
811162cc:	8080030b 	ldhu	r2,12(r16)
811162d0:	1080200c 	andi	r2,r2,128
811162d4:	1000151e 	bne	r2,zero,8111632c <_fclose_r+0xd8>
811162d8:	81400c17 	ldw	r5,48(r16)
811162dc:	28000526 	beq	r5,zero,811162f4 <_fclose_r+0xa0>
811162e0:	80801004 	addi	r2,r16,64
811162e4:	28800226 	beq	r5,r2,811162f0 <_fclose_r+0x9c>
811162e8:	8809883a 	mov	r4,r17
811162ec:	11116440 	call	81111644 <_free_r>
811162f0:	80000c15 	stw	zero,48(r16)
811162f4:	81401117 	ldw	r5,68(r16)
811162f8:	28000326 	beq	r5,zero,81116308 <_fclose_r+0xb4>
811162fc:	8809883a 	mov	r4,r17
81116300:	11116440 	call	81111644 <_free_r>
81116304:	80001115 	stw	zero,68(r16)
81116308:	11114e00 	call	811114e0 <__sfp_lock_acquire>
8111630c:	8000030d 	sth	zero,12(r16)
81116310:	11114e40 	call	811114e4 <__sfp_lock_release>
81116314:	9005883a 	mov	r2,r18
81116318:	003fdc06 	br	8111628c <__reset+0xfb0f628c>
8111631c:	11114d00 	call	811114d0 <__sinit>
81116320:	003fd706 	br	81116280 <__reset+0xfb0f6280>
81116324:	04bfffc4 	movi	r18,-1
81116328:	003fe806 	br	811162cc <__reset+0xfb0f62cc>
8111632c:	81400417 	ldw	r5,16(r16)
81116330:	8809883a 	mov	r4,r17
81116334:	11116440 	call	81111644 <_free_r>
81116338:	003fe706 	br	811162d8 <__reset+0xfb0f62d8>
8111633c:	0005883a 	mov	r2,zero
81116340:	f800283a 	ret

81116344 <fclose>:
81116344:	00a044b4 	movhi	r2,33042
81116348:	10873404 	addi	r2,r2,7376
8111634c:	200b883a 	mov	r5,r4
81116350:	11000017 	ldw	r4,0(r2)
81116354:	11162541 	jmpi	81116254 <_fclose_r>

81116358 <__fputwc>:
81116358:	defff804 	addi	sp,sp,-32
8111635c:	dcc00415 	stw	r19,16(sp)
81116360:	dc800315 	stw	r18,12(sp)
81116364:	dc000115 	stw	r16,4(sp)
81116368:	dfc00715 	stw	ra,28(sp)
8111636c:	dd400615 	stw	r21,24(sp)
81116370:	dd000515 	stw	r20,20(sp)
81116374:	dc400215 	stw	r17,8(sp)
81116378:	2027883a 	mov	r19,r4
8111637c:	2825883a 	mov	r18,r5
81116380:	3021883a 	mov	r16,r6
81116384:	11120200 	call	81112020 <__locale_mb_cur_max>
81116388:	00c00044 	movi	r3,1
8111638c:	10c03e26 	beq	r2,r3,81116488 <__fputwc+0x130>
81116390:	81c01704 	addi	r7,r16,92
81116394:	900d883a 	mov	r6,r18
81116398:	d80b883a 	mov	r5,sp
8111639c:	9809883a 	mov	r4,r19
811163a0:	11166d00 	call	811166d0 <_wcrtomb_r>
811163a4:	1029883a 	mov	r20,r2
811163a8:	00bfffc4 	movi	r2,-1
811163ac:	a0802026 	beq	r20,r2,81116430 <__fputwc+0xd8>
811163b0:	d9400003 	ldbu	r5,0(sp)
811163b4:	a0001c26 	beq	r20,zero,81116428 <__fputwc+0xd0>
811163b8:	0023883a 	mov	r17,zero
811163bc:	05400284 	movi	r21,10
811163c0:	00000906 	br	811163e8 <__fputwc+0x90>
811163c4:	80800017 	ldw	r2,0(r16)
811163c8:	11400005 	stb	r5,0(r2)
811163cc:	80c00017 	ldw	r3,0(r16)
811163d0:	18c00044 	addi	r3,r3,1
811163d4:	80c00015 	stw	r3,0(r16)
811163d8:	8c400044 	addi	r17,r17,1
811163dc:	dc45883a 	add	r2,sp,r17
811163e0:	8d00112e 	bgeu	r17,r20,81116428 <__fputwc+0xd0>
811163e4:	11400003 	ldbu	r5,0(r2)
811163e8:	80c00217 	ldw	r3,8(r16)
811163ec:	18ffffc4 	addi	r3,r3,-1
811163f0:	80c00215 	stw	r3,8(r16)
811163f4:	183ff30e 	bge	r3,zero,811163c4 <__reset+0xfb0f63c4>
811163f8:	80800617 	ldw	r2,24(r16)
811163fc:	18801916 	blt	r3,r2,81116464 <__fputwc+0x10c>
81116400:	80800017 	ldw	r2,0(r16)
81116404:	11400005 	stb	r5,0(r2)
81116408:	80800017 	ldw	r2,0(r16)
8111640c:	10c00003 	ldbu	r3,0(r2)
81116410:	10800044 	addi	r2,r2,1
81116414:	1d402326 	beq	r3,r21,811164a4 <__fputwc+0x14c>
81116418:	80800015 	stw	r2,0(r16)
8111641c:	8c400044 	addi	r17,r17,1
81116420:	dc45883a 	add	r2,sp,r17
81116424:	8d3fef36 	bltu	r17,r20,811163e4 <__reset+0xfb0f63e4>
81116428:	9005883a 	mov	r2,r18
8111642c:	00000406 	br	81116440 <__fputwc+0xe8>
81116430:	80c0030b 	ldhu	r3,12(r16)
81116434:	a005883a 	mov	r2,r20
81116438:	18c01014 	ori	r3,r3,64
8111643c:	80c0030d 	sth	r3,12(r16)
81116440:	dfc00717 	ldw	ra,28(sp)
81116444:	dd400617 	ldw	r21,24(sp)
81116448:	dd000517 	ldw	r20,20(sp)
8111644c:	dcc00417 	ldw	r19,16(sp)
81116450:	dc800317 	ldw	r18,12(sp)
81116454:	dc400217 	ldw	r17,8(sp)
81116458:	dc000117 	ldw	r16,4(sp)
8111645c:	dec00804 	addi	sp,sp,32
81116460:	f800283a 	ret
81116464:	800d883a 	mov	r6,r16
81116468:	29403fcc 	andi	r5,r5,255
8111646c:	9809883a 	mov	r4,r19
81116470:	1115f840 	call	81115f84 <__swbuf_r>
81116474:	10bfffe0 	cmpeqi	r2,r2,-1
81116478:	10803fcc 	andi	r2,r2,255
8111647c:	103fd626 	beq	r2,zero,811163d8 <__reset+0xfb0f63d8>
81116480:	00bfffc4 	movi	r2,-1
81116484:	003fee06 	br	81116440 <__reset+0xfb0f6440>
81116488:	90ffffc4 	addi	r3,r18,-1
8111648c:	01003f84 	movi	r4,254
81116490:	20ffbf36 	bltu	r4,r3,81116390 <__reset+0xfb0f6390>
81116494:	900b883a 	mov	r5,r18
81116498:	dc800005 	stb	r18,0(sp)
8111649c:	1029883a 	mov	r20,r2
811164a0:	003fc506 	br	811163b8 <__reset+0xfb0f63b8>
811164a4:	800d883a 	mov	r6,r16
811164a8:	a80b883a 	mov	r5,r21
811164ac:	9809883a 	mov	r4,r19
811164b0:	1115f840 	call	81115f84 <__swbuf_r>
811164b4:	10bfffe0 	cmpeqi	r2,r2,-1
811164b8:	003fef06 	br	81116478 <__reset+0xfb0f6478>

811164bc <_fputwc_r>:
811164bc:	3080030b 	ldhu	r2,12(r6)
811164c0:	10c8000c 	andi	r3,r2,8192
811164c4:	1800051e 	bne	r3,zero,811164dc <_fputwc_r+0x20>
811164c8:	30c01917 	ldw	r3,100(r6)
811164cc:	10880014 	ori	r2,r2,8192
811164d0:	3080030d 	sth	r2,12(r6)
811164d4:	18880014 	ori	r2,r3,8192
811164d8:	30801915 	stw	r2,100(r6)
811164dc:	11163581 	jmpi	81116358 <__fputwc>

811164e0 <fputwc>:
811164e0:	00a044b4 	movhi	r2,33042
811164e4:	defffc04 	addi	sp,sp,-16
811164e8:	10873404 	addi	r2,r2,7376
811164ec:	dc000115 	stw	r16,4(sp)
811164f0:	14000017 	ldw	r16,0(r2)
811164f4:	dc400215 	stw	r17,8(sp)
811164f8:	dfc00315 	stw	ra,12(sp)
811164fc:	2023883a 	mov	r17,r4
81116500:	80000226 	beq	r16,zero,8111650c <fputwc+0x2c>
81116504:	80800e17 	ldw	r2,56(r16)
81116508:	10001026 	beq	r2,zero,8111654c <fputwc+0x6c>
8111650c:	2880030b 	ldhu	r2,12(r5)
81116510:	10c8000c 	andi	r3,r2,8192
81116514:	1800051e 	bne	r3,zero,8111652c <fputwc+0x4c>
81116518:	28c01917 	ldw	r3,100(r5)
8111651c:	10880014 	ori	r2,r2,8192
81116520:	2880030d 	sth	r2,12(r5)
81116524:	18880014 	ori	r2,r3,8192
81116528:	28801915 	stw	r2,100(r5)
8111652c:	280d883a 	mov	r6,r5
81116530:	8009883a 	mov	r4,r16
81116534:	880b883a 	mov	r5,r17
81116538:	dfc00317 	ldw	ra,12(sp)
8111653c:	dc400217 	ldw	r17,8(sp)
81116540:	dc000117 	ldw	r16,4(sp)
81116544:	dec00404 	addi	sp,sp,16
81116548:	11163581 	jmpi	81116358 <__fputwc>
8111654c:	8009883a 	mov	r4,r16
81116550:	d9400015 	stw	r5,0(sp)
81116554:	11114d00 	call	811114d0 <__sinit>
81116558:	d9400017 	ldw	r5,0(sp)
8111655c:	003feb06 	br	8111650c <__reset+0xfb0f650c>

81116560 <_fstat_r>:
81116560:	defffd04 	addi	sp,sp,-12
81116564:	2805883a 	mov	r2,r5
81116568:	dc000015 	stw	r16,0(sp)
8111656c:	042044b4 	movhi	r16,33042
81116570:	dc400115 	stw	r17,4(sp)
81116574:	84076c04 	addi	r16,r16,7600
81116578:	2023883a 	mov	r17,r4
8111657c:	300b883a 	mov	r5,r6
81116580:	1009883a 	mov	r4,r2
81116584:	dfc00215 	stw	ra,8(sp)
81116588:	80000015 	stw	zero,0(r16)
8111658c:	11196c40 	call	811196c4 <fstat>
81116590:	00ffffc4 	movi	r3,-1
81116594:	10c00526 	beq	r2,r3,811165ac <_fstat_r+0x4c>
81116598:	dfc00217 	ldw	ra,8(sp)
8111659c:	dc400117 	ldw	r17,4(sp)
811165a0:	dc000017 	ldw	r16,0(sp)
811165a4:	dec00304 	addi	sp,sp,12
811165a8:	f800283a 	ret
811165ac:	80c00017 	ldw	r3,0(r16)
811165b0:	183ff926 	beq	r3,zero,81116598 <__reset+0xfb0f6598>
811165b4:	88c00015 	stw	r3,0(r17)
811165b8:	003ff706 	br	81116598 <__reset+0xfb0f6598>

811165bc <_isatty_r>:
811165bc:	defffd04 	addi	sp,sp,-12
811165c0:	dc000015 	stw	r16,0(sp)
811165c4:	042044b4 	movhi	r16,33042
811165c8:	dc400115 	stw	r17,4(sp)
811165cc:	84076c04 	addi	r16,r16,7600
811165d0:	2023883a 	mov	r17,r4
811165d4:	2809883a 	mov	r4,r5
811165d8:	dfc00215 	stw	ra,8(sp)
811165dc:	80000015 	stw	zero,0(r16)
811165e0:	11199300 	call	81119930 <isatty>
811165e4:	00ffffc4 	movi	r3,-1
811165e8:	10c00526 	beq	r2,r3,81116600 <_isatty_r+0x44>
811165ec:	dfc00217 	ldw	ra,8(sp)
811165f0:	dc400117 	ldw	r17,4(sp)
811165f4:	dc000017 	ldw	r16,0(sp)
811165f8:	dec00304 	addi	sp,sp,12
811165fc:	f800283a 	ret
81116600:	80c00017 	ldw	r3,0(r16)
81116604:	183ff926 	beq	r3,zero,811165ec <__reset+0xfb0f65ec>
81116608:	88c00015 	stw	r3,0(r17)
8111660c:	003ff706 	br	811165ec <__reset+0xfb0f65ec>

81116610 <_lseek_r>:
81116610:	defffd04 	addi	sp,sp,-12
81116614:	2805883a 	mov	r2,r5
81116618:	dc000015 	stw	r16,0(sp)
8111661c:	042044b4 	movhi	r16,33042
81116620:	dc400115 	stw	r17,4(sp)
81116624:	300b883a 	mov	r5,r6
81116628:	84076c04 	addi	r16,r16,7600
8111662c:	2023883a 	mov	r17,r4
81116630:	380d883a 	mov	r6,r7
81116634:	1009883a 	mov	r4,r2
81116638:	dfc00215 	stw	ra,8(sp)
8111663c:	80000015 	stw	zero,0(r16)
81116640:	1119a100 	call	81119a10 <lseek>
81116644:	00ffffc4 	movi	r3,-1
81116648:	10c00526 	beq	r2,r3,81116660 <_lseek_r+0x50>
8111664c:	dfc00217 	ldw	ra,8(sp)
81116650:	dc400117 	ldw	r17,4(sp)
81116654:	dc000017 	ldw	r16,0(sp)
81116658:	dec00304 	addi	sp,sp,12
8111665c:	f800283a 	ret
81116660:	80c00017 	ldw	r3,0(r16)
81116664:	183ff926 	beq	r3,zero,8111664c <__reset+0xfb0f664c>
81116668:	88c00015 	stw	r3,0(r17)
8111666c:	003ff706 	br	8111664c <__reset+0xfb0f664c>

81116670 <_read_r>:
81116670:	defffd04 	addi	sp,sp,-12
81116674:	2805883a 	mov	r2,r5
81116678:	dc000015 	stw	r16,0(sp)
8111667c:	042044b4 	movhi	r16,33042
81116680:	dc400115 	stw	r17,4(sp)
81116684:	300b883a 	mov	r5,r6
81116688:	84076c04 	addi	r16,r16,7600
8111668c:	2023883a 	mov	r17,r4
81116690:	380d883a 	mov	r6,r7
81116694:	1009883a 	mov	r4,r2
81116698:	dfc00215 	stw	ra,8(sp)
8111669c:	80000015 	stw	zero,0(r16)
811166a0:	1119e4c0 	call	81119e4c <read>
811166a4:	00ffffc4 	movi	r3,-1
811166a8:	10c00526 	beq	r2,r3,811166c0 <_read_r+0x50>
811166ac:	dfc00217 	ldw	ra,8(sp)
811166b0:	dc400117 	ldw	r17,4(sp)
811166b4:	dc000017 	ldw	r16,0(sp)
811166b8:	dec00304 	addi	sp,sp,12
811166bc:	f800283a 	ret
811166c0:	80c00017 	ldw	r3,0(r16)
811166c4:	183ff926 	beq	r3,zero,811166ac <__reset+0xfb0f66ac>
811166c8:	88c00015 	stw	r3,0(r17)
811166cc:	003ff706 	br	811166ac <__reset+0xfb0f66ac>

811166d0 <_wcrtomb_r>:
811166d0:	defff604 	addi	sp,sp,-40
811166d4:	00a044b4 	movhi	r2,33042
811166d8:	dc800815 	stw	r18,32(sp)
811166dc:	dc400715 	stw	r17,28(sp)
811166e0:	dc000615 	stw	r16,24(sp)
811166e4:	10873804 	addi	r2,r2,7392
811166e8:	dfc00915 	stw	ra,36(sp)
811166ec:	2021883a 	mov	r16,r4
811166f0:	3823883a 	mov	r17,r7
811166f4:	14800017 	ldw	r18,0(r2)
811166f8:	28001426 	beq	r5,zero,8111674c <_wcrtomb_r+0x7c>
811166fc:	d9400415 	stw	r5,16(sp)
81116700:	d9800515 	stw	r6,20(sp)
81116704:	11120140 	call	81112014 <__locale_charset>
81116708:	d9800517 	ldw	r6,20(sp)
8111670c:	d9400417 	ldw	r5,16(sp)
81116710:	100f883a 	mov	r7,r2
81116714:	dc400015 	stw	r17,0(sp)
81116718:	8009883a 	mov	r4,r16
8111671c:	903ee83a 	callr	r18
81116720:	00ffffc4 	movi	r3,-1
81116724:	10c0031e 	bne	r2,r3,81116734 <_wcrtomb_r+0x64>
81116728:	88000015 	stw	zero,0(r17)
8111672c:	00c02284 	movi	r3,138
81116730:	80c00015 	stw	r3,0(r16)
81116734:	dfc00917 	ldw	ra,36(sp)
81116738:	dc800817 	ldw	r18,32(sp)
8111673c:	dc400717 	ldw	r17,28(sp)
81116740:	dc000617 	ldw	r16,24(sp)
81116744:	dec00a04 	addi	sp,sp,40
81116748:	f800283a 	ret
8111674c:	11120140 	call	81112014 <__locale_charset>
81116750:	100f883a 	mov	r7,r2
81116754:	dc400015 	stw	r17,0(sp)
81116758:	000d883a 	mov	r6,zero
8111675c:	d9400104 	addi	r5,sp,4
81116760:	8009883a 	mov	r4,r16
81116764:	903ee83a 	callr	r18
81116768:	003fed06 	br	81116720 <__reset+0xfb0f6720>

8111676c <wcrtomb>:
8111676c:	defff604 	addi	sp,sp,-40
81116770:	00a044b4 	movhi	r2,33042
81116774:	dc800615 	stw	r18,24(sp)
81116778:	dc400515 	stw	r17,20(sp)
8111677c:	10873404 	addi	r2,r2,7376
81116780:	dfc00915 	stw	ra,36(sp)
81116784:	dd000815 	stw	r20,32(sp)
81116788:	dcc00715 	stw	r19,28(sp)
8111678c:	dc000415 	stw	r16,16(sp)
81116790:	3025883a 	mov	r18,r6
81116794:	14400017 	ldw	r17,0(r2)
81116798:	20001926 	beq	r4,zero,81116800 <wcrtomb+0x94>
8111679c:	00a044b4 	movhi	r2,33042
811167a0:	10873804 	addi	r2,r2,7392
811167a4:	15000017 	ldw	r20,0(r2)
811167a8:	2021883a 	mov	r16,r4
811167ac:	2827883a 	mov	r19,r5
811167b0:	11120140 	call	81112014 <__locale_charset>
811167b4:	100f883a 	mov	r7,r2
811167b8:	dc800015 	stw	r18,0(sp)
811167bc:	980d883a 	mov	r6,r19
811167c0:	800b883a 	mov	r5,r16
811167c4:	8809883a 	mov	r4,r17
811167c8:	a03ee83a 	callr	r20
811167cc:	00ffffc4 	movi	r3,-1
811167d0:	10c0031e 	bne	r2,r3,811167e0 <wcrtomb+0x74>
811167d4:	90000015 	stw	zero,0(r18)
811167d8:	00c02284 	movi	r3,138
811167dc:	88c00015 	stw	r3,0(r17)
811167e0:	dfc00917 	ldw	ra,36(sp)
811167e4:	dd000817 	ldw	r20,32(sp)
811167e8:	dcc00717 	ldw	r19,28(sp)
811167ec:	dc800617 	ldw	r18,24(sp)
811167f0:	dc400517 	ldw	r17,20(sp)
811167f4:	dc000417 	ldw	r16,16(sp)
811167f8:	dec00a04 	addi	sp,sp,40
811167fc:	f800283a 	ret
81116800:	00a044b4 	movhi	r2,33042
81116804:	10873804 	addi	r2,r2,7392
81116808:	14000017 	ldw	r16,0(r2)
8111680c:	11120140 	call	81112014 <__locale_charset>
81116810:	100f883a 	mov	r7,r2
81116814:	dc800015 	stw	r18,0(sp)
81116818:	000d883a 	mov	r6,zero
8111681c:	d9400104 	addi	r5,sp,4
81116820:	8809883a 	mov	r4,r17
81116824:	803ee83a 	callr	r16
81116828:	003fe806 	br	811167cc <__reset+0xfb0f67cc>

8111682c <__ascii_wctomb>:
8111682c:	28000526 	beq	r5,zero,81116844 <__ascii_wctomb+0x18>
81116830:	00803fc4 	movi	r2,255
81116834:	11800536 	bltu	r2,r6,8111684c <__ascii_wctomb+0x20>
81116838:	29800005 	stb	r6,0(r5)
8111683c:	00800044 	movi	r2,1
81116840:	f800283a 	ret
81116844:	0005883a 	mov	r2,zero
81116848:	f800283a 	ret
8111684c:	00802284 	movi	r2,138
81116850:	20800015 	stw	r2,0(r4)
81116854:	00bfffc4 	movi	r2,-1
81116858:	f800283a 	ret

8111685c <_wctomb_r>:
8111685c:	00a044b4 	movhi	r2,33042
81116860:	defff904 	addi	sp,sp,-28
81116864:	10873804 	addi	r2,r2,7392
81116868:	dfc00615 	stw	ra,24(sp)
8111686c:	dc400515 	stw	r17,20(sp)
81116870:	dc000415 	stw	r16,16(sp)
81116874:	3823883a 	mov	r17,r7
81116878:	14000017 	ldw	r16,0(r2)
8111687c:	d9000115 	stw	r4,4(sp)
81116880:	d9400215 	stw	r5,8(sp)
81116884:	d9800315 	stw	r6,12(sp)
81116888:	11120140 	call	81112014 <__locale_charset>
8111688c:	d9800317 	ldw	r6,12(sp)
81116890:	d9400217 	ldw	r5,8(sp)
81116894:	d9000117 	ldw	r4,4(sp)
81116898:	100f883a 	mov	r7,r2
8111689c:	dc400015 	stw	r17,0(sp)
811168a0:	803ee83a 	callr	r16
811168a4:	dfc00617 	ldw	ra,24(sp)
811168a8:	dc400517 	ldw	r17,20(sp)
811168ac:	dc000417 	ldw	r16,16(sp)
811168b0:	dec00704 	addi	sp,sp,28
811168b4:	f800283a 	ret

811168b8 <__udivdi3>:
811168b8:	defff504 	addi	sp,sp,-44
811168bc:	dcc00415 	stw	r19,16(sp)
811168c0:	dc000115 	stw	r16,4(sp)
811168c4:	dfc00a15 	stw	ra,40(sp)
811168c8:	df000915 	stw	fp,36(sp)
811168cc:	ddc00815 	stw	r23,32(sp)
811168d0:	dd800715 	stw	r22,28(sp)
811168d4:	dd400615 	stw	r21,24(sp)
811168d8:	dd000515 	stw	r20,20(sp)
811168dc:	dc800315 	stw	r18,12(sp)
811168e0:	dc400215 	stw	r17,8(sp)
811168e4:	2027883a 	mov	r19,r4
811168e8:	2821883a 	mov	r16,r5
811168ec:	3800411e 	bne	r7,zero,811169f4 <__udivdi3+0x13c>
811168f0:	3023883a 	mov	r17,r6
811168f4:	2025883a 	mov	r18,r4
811168f8:	2980522e 	bgeu	r5,r6,81116a44 <__udivdi3+0x18c>
811168fc:	00bfffd4 	movui	r2,65535
81116900:	282d883a 	mov	r22,r5
81116904:	1180a836 	bltu	r2,r6,81116ba8 <__udivdi3+0x2f0>
81116908:	00803fc4 	movi	r2,255
8111690c:	1185803a 	cmpltu	r2,r2,r6
81116910:	100490fa 	slli	r2,r2,3
81116914:	3086d83a 	srl	r3,r6,r2
81116918:	012044b4 	movhi	r4,33042
8111691c:	213eb6c4 	addi	r4,r4,-1317
81116920:	20c7883a 	add	r3,r4,r3
81116924:	18c00003 	ldbu	r3,0(r3)
81116928:	1885883a 	add	r2,r3,r2
8111692c:	00c00804 	movi	r3,32
81116930:	1887c83a 	sub	r3,r3,r2
81116934:	18000526 	beq	r3,zero,8111694c <__udivdi3+0x94>
81116938:	80e0983a 	sll	r16,r16,r3
8111693c:	9884d83a 	srl	r2,r19,r2
81116940:	30e2983a 	sll	r17,r6,r3
81116944:	98e4983a 	sll	r18,r19,r3
81116948:	142cb03a 	or	r22,r2,r16
8111694c:	882ad43a 	srli	r21,r17,16
81116950:	b009883a 	mov	r4,r22
81116954:	8d3fffcc 	andi	r20,r17,65535
81116958:	a80b883a 	mov	r5,r21
8111695c:	11174c40 	call	811174c4 <__umodsi3>
81116960:	b009883a 	mov	r4,r22
81116964:	a80b883a 	mov	r5,r21
81116968:	1027883a 	mov	r19,r2
8111696c:	11174600 	call	81117460 <__udivsi3>
81116970:	102d883a 	mov	r22,r2
81116974:	9826943a 	slli	r19,r19,16
81116978:	9004d43a 	srli	r2,r18,16
8111697c:	a5a1383a 	mul	r16,r20,r22
81116980:	14c4b03a 	or	r2,r2,r19
81116984:	1400052e 	bgeu	r2,r16,8111699c <__udivdi3+0xe4>
81116988:	1445883a 	add	r2,r2,r17
8111698c:	b0ffffc4 	addi	r3,r22,-1
81116990:	14400136 	bltu	r2,r17,81116998 <__udivdi3+0xe0>
81116994:	14012336 	bltu	r2,r16,81116e24 <__udivdi3+0x56c>
81116998:	182d883a 	mov	r22,r3
8111699c:	1421c83a 	sub	r16,r2,r16
811169a0:	a80b883a 	mov	r5,r21
811169a4:	8009883a 	mov	r4,r16
811169a8:	11174c40 	call	811174c4 <__umodsi3>
811169ac:	1027883a 	mov	r19,r2
811169b0:	a80b883a 	mov	r5,r21
811169b4:	8009883a 	mov	r4,r16
811169b8:	11174600 	call	81117460 <__udivsi3>
811169bc:	9826943a 	slli	r19,r19,16
811169c0:	a0a9383a 	mul	r20,r20,r2
811169c4:	94bfffcc 	andi	r18,r18,65535
811169c8:	94e4b03a 	or	r18,r18,r19
811169cc:	9500052e 	bgeu	r18,r20,811169e4 <__udivdi3+0x12c>
811169d0:	8ca5883a 	add	r18,r17,r18
811169d4:	10ffffc4 	addi	r3,r2,-1
811169d8:	9440f136 	bltu	r18,r17,81116da0 <__udivdi3+0x4e8>
811169dc:	9500f02e 	bgeu	r18,r20,81116da0 <__udivdi3+0x4e8>
811169e0:	10bfff84 	addi	r2,r2,-2
811169e4:	b00c943a 	slli	r6,r22,16
811169e8:	0007883a 	mov	r3,zero
811169ec:	3084b03a 	or	r2,r6,r2
811169f0:	00005906 	br	81116b58 <__udivdi3+0x2a0>
811169f4:	29c05636 	bltu	r5,r7,81116b50 <__udivdi3+0x298>
811169f8:	00bfffd4 	movui	r2,65535
811169fc:	11c0622e 	bgeu	r2,r7,81116b88 <__udivdi3+0x2d0>
81116a00:	00804034 	movhi	r2,256
81116a04:	10bfffc4 	addi	r2,r2,-1
81116a08:	11c0ee36 	bltu	r2,r7,81116dc4 <__udivdi3+0x50c>
81116a0c:	00800404 	movi	r2,16
81116a10:	3886d83a 	srl	r3,r7,r2
81116a14:	012044b4 	movhi	r4,33042
81116a18:	213eb6c4 	addi	r4,r4,-1317
81116a1c:	20c7883a 	add	r3,r4,r3
81116a20:	18c00003 	ldbu	r3,0(r3)
81116a24:	05400804 	movi	r21,32
81116a28:	1885883a 	add	r2,r3,r2
81116a2c:	a8abc83a 	sub	r21,r21,r2
81116a30:	a800621e 	bne	r21,zero,81116bbc <__udivdi3+0x304>
81116a34:	3c00e936 	bltu	r7,r16,81116ddc <__udivdi3+0x524>
81116a38:	9985403a 	cmpgeu	r2,r19,r6
81116a3c:	0007883a 	mov	r3,zero
81116a40:	00004506 	br	81116b58 <__udivdi3+0x2a0>
81116a44:	3000041e 	bne	r6,zero,81116a58 <__udivdi3+0x1a0>
81116a48:	000b883a 	mov	r5,zero
81116a4c:	01000044 	movi	r4,1
81116a50:	11174600 	call	81117460 <__udivsi3>
81116a54:	1023883a 	mov	r17,r2
81116a58:	00bfffd4 	movui	r2,65535
81116a5c:	14404e2e 	bgeu	r2,r17,81116b98 <__udivdi3+0x2e0>
81116a60:	00804034 	movhi	r2,256
81116a64:	10bfffc4 	addi	r2,r2,-1
81116a68:	1440d836 	bltu	r2,r17,81116dcc <__udivdi3+0x514>
81116a6c:	00800404 	movi	r2,16
81116a70:	8886d83a 	srl	r3,r17,r2
81116a74:	012044b4 	movhi	r4,33042
81116a78:	213eb6c4 	addi	r4,r4,-1317
81116a7c:	20c7883a 	add	r3,r4,r3
81116a80:	18c00003 	ldbu	r3,0(r3)
81116a84:	1885883a 	add	r2,r3,r2
81116a88:	00c00804 	movi	r3,32
81116a8c:	1887c83a 	sub	r3,r3,r2
81116a90:	18008f1e 	bne	r3,zero,81116cd0 <__udivdi3+0x418>
81116a94:	882ad43a 	srli	r21,r17,16
81116a98:	8461c83a 	sub	r16,r16,r17
81116a9c:	8d3fffcc 	andi	r20,r17,65535
81116aa0:	00c00044 	movi	r3,1
81116aa4:	8009883a 	mov	r4,r16
81116aa8:	a80b883a 	mov	r5,r21
81116aac:	d8c00015 	stw	r3,0(sp)
81116ab0:	11174c40 	call	811174c4 <__umodsi3>
81116ab4:	8009883a 	mov	r4,r16
81116ab8:	a80b883a 	mov	r5,r21
81116abc:	1027883a 	mov	r19,r2
81116ac0:	11174600 	call	81117460 <__udivsi3>
81116ac4:	9826943a 	slli	r19,r19,16
81116ac8:	9008d43a 	srli	r4,r18,16
81116acc:	1521383a 	mul	r16,r2,r20
81116ad0:	102d883a 	mov	r22,r2
81116ad4:	24c8b03a 	or	r4,r4,r19
81116ad8:	d8c00017 	ldw	r3,0(sp)
81116adc:	2400052e 	bgeu	r4,r16,81116af4 <__udivdi3+0x23c>
81116ae0:	2449883a 	add	r4,r4,r17
81116ae4:	b0bfffc4 	addi	r2,r22,-1
81116ae8:	24400136 	bltu	r4,r17,81116af0 <__udivdi3+0x238>
81116aec:	2400ca36 	bltu	r4,r16,81116e18 <__udivdi3+0x560>
81116af0:	102d883a 	mov	r22,r2
81116af4:	2421c83a 	sub	r16,r4,r16
81116af8:	a80b883a 	mov	r5,r21
81116afc:	8009883a 	mov	r4,r16
81116b00:	d8c00015 	stw	r3,0(sp)
81116b04:	11174c40 	call	811174c4 <__umodsi3>
81116b08:	1027883a 	mov	r19,r2
81116b0c:	a80b883a 	mov	r5,r21
81116b10:	8009883a 	mov	r4,r16
81116b14:	11174600 	call	81117460 <__udivsi3>
81116b18:	9826943a 	slli	r19,r19,16
81116b1c:	1529383a 	mul	r20,r2,r20
81116b20:	94bfffcc 	andi	r18,r18,65535
81116b24:	94e4b03a 	or	r18,r18,r19
81116b28:	d8c00017 	ldw	r3,0(sp)
81116b2c:	9500052e 	bgeu	r18,r20,81116b44 <__udivdi3+0x28c>
81116b30:	8ca5883a 	add	r18,r17,r18
81116b34:	113fffc4 	addi	r4,r2,-1
81116b38:	94409736 	bltu	r18,r17,81116d98 <__udivdi3+0x4e0>
81116b3c:	9500962e 	bgeu	r18,r20,81116d98 <__udivdi3+0x4e0>
81116b40:	10bfff84 	addi	r2,r2,-2
81116b44:	b00c943a 	slli	r6,r22,16
81116b48:	3084b03a 	or	r2,r6,r2
81116b4c:	00000206 	br	81116b58 <__udivdi3+0x2a0>
81116b50:	0007883a 	mov	r3,zero
81116b54:	0005883a 	mov	r2,zero
81116b58:	dfc00a17 	ldw	ra,40(sp)
81116b5c:	df000917 	ldw	fp,36(sp)
81116b60:	ddc00817 	ldw	r23,32(sp)
81116b64:	dd800717 	ldw	r22,28(sp)
81116b68:	dd400617 	ldw	r21,24(sp)
81116b6c:	dd000517 	ldw	r20,20(sp)
81116b70:	dcc00417 	ldw	r19,16(sp)
81116b74:	dc800317 	ldw	r18,12(sp)
81116b78:	dc400217 	ldw	r17,8(sp)
81116b7c:	dc000117 	ldw	r16,4(sp)
81116b80:	dec00b04 	addi	sp,sp,44
81116b84:	f800283a 	ret
81116b88:	00803fc4 	movi	r2,255
81116b8c:	11c5803a 	cmpltu	r2,r2,r7
81116b90:	100490fa 	slli	r2,r2,3
81116b94:	003f9e06 	br	81116a10 <__reset+0xfb0f6a10>
81116b98:	00803fc4 	movi	r2,255
81116b9c:	1445803a 	cmpltu	r2,r2,r17
81116ba0:	100490fa 	slli	r2,r2,3
81116ba4:	003fb206 	br	81116a70 <__reset+0xfb0f6a70>
81116ba8:	00804034 	movhi	r2,256
81116bac:	10bfffc4 	addi	r2,r2,-1
81116bb0:	11808836 	bltu	r2,r6,81116dd4 <__udivdi3+0x51c>
81116bb4:	00800404 	movi	r2,16
81116bb8:	003f5606 	br	81116914 <__reset+0xfb0f6914>
81116bbc:	30aed83a 	srl	r23,r6,r2
81116bc0:	3d4e983a 	sll	r7,r7,r21
81116bc4:	80acd83a 	srl	r22,r16,r2
81116bc8:	9884d83a 	srl	r2,r19,r2
81116bcc:	3deeb03a 	or	r23,r7,r23
81116bd0:	b824d43a 	srli	r18,r23,16
81116bd4:	8560983a 	sll	r16,r16,r21
81116bd8:	b009883a 	mov	r4,r22
81116bdc:	900b883a 	mov	r5,r18
81116be0:	3568983a 	sll	r20,r6,r21
81116be4:	1420b03a 	or	r16,r2,r16
81116be8:	11174c40 	call	811174c4 <__umodsi3>
81116bec:	b009883a 	mov	r4,r22
81116bf0:	900b883a 	mov	r5,r18
81116bf4:	1023883a 	mov	r17,r2
81116bf8:	11174600 	call	81117460 <__udivsi3>
81116bfc:	8808943a 	slli	r4,r17,16
81116c00:	bf3fffcc 	andi	fp,r23,65535
81116c04:	8006d43a 	srli	r3,r16,16
81116c08:	e0a3383a 	mul	r17,fp,r2
81116c0c:	100d883a 	mov	r6,r2
81116c10:	1906b03a 	or	r3,r3,r4
81116c14:	1c40042e 	bgeu	r3,r17,81116c28 <__udivdi3+0x370>
81116c18:	1dc7883a 	add	r3,r3,r23
81116c1c:	10bfffc4 	addi	r2,r2,-1
81116c20:	1dc0752e 	bgeu	r3,r23,81116df8 <__udivdi3+0x540>
81116c24:	100d883a 	mov	r6,r2
81116c28:	1c63c83a 	sub	r17,r3,r17
81116c2c:	900b883a 	mov	r5,r18
81116c30:	8809883a 	mov	r4,r17
81116c34:	d9800015 	stw	r6,0(sp)
81116c38:	11174c40 	call	811174c4 <__umodsi3>
81116c3c:	102d883a 	mov	r22,r2
81116c40:	8809883a 	mov	r4,r17
81116c44:	900b883a 	mov	r5,r18
81116c48:	11174600 	call	81117460 <__udivsi3>
81116c4c:	b02c943a 	slli	r22,r22,16
81116c50:	e089383a 	mul	r4,fp,r2
81116c54:	843fffcc 	andi	r16,r16,65535
81116c58:	85a0b03a 	or	r16,r16,r22
81116c5c:	d9800017 	ldw	r6,0(sp)
81116c60:	8100042e 	bgeu	r16,r4,81116c74 <__udivdi3+0x3bc>
81116c64:	85e1883a 	add	r16,r16,r23
81116c68:	10ffffc4 	addi	r3,r2,-1
81116c6c:	85c05e2e 	bgeu	r16,r23,81116de8 <__udivdi3+0x530>
81116c70:	1805883a 	mov	r2,r3
81116c74:	300c943a 	slli	r6,r6,16
81116c78:	a17fffcc 	andi	r5,r20,65535
81116c7c:	a028d43a 	srli	r20,r20,16
81116c80:	3084b03a 	or	r2,r6,r2
81116c84:	10ffffcc 	andi	r3,r2,65535
81116c88:	100cd43a 	srli	r6,r2,16
81116c8c:	194f383a 	mul	r7,r3,r5
81116c90:	1d07383a 	mul	r3,r3,r20
81116c94:	314b383a 	mul	r5,r6,r5
81116c98:	3810d43a 	srli	r8,r7,16
81116c9c:	8121c83a 	sub	r16,r16,r4
81116ca0:	1947883a 	add	r3,r3,r5
81116ca4:	40c7883a 	add	r3,r8,r3
81116ca8:	350d383a 	mul	r6,r6,r20
81116cac:	1940022e 	bgeu	r3,r5,81116cb8 <__udivdi3+0x400>
81116cb0:	01000074 	movhi	r4,1
81116cb4:	310d883a 	add	r6,r6,r4
81116cb8:	1828d43a 	srli	r20,r3,16
81116cbc:	a18d883a 	add	r6,r20,r6
81116cc0:	81803e36 	bltu	r16,r6,81116dbc <__udivdi3+0x504>
81116cc4:	81803826 	beq	r16,r6,81116da8 <__udivdi3+0x4f0>
81116cc8:	0007883a 	mov	r3,zero
81116ccc:	003fa206 	br	81116b58 <__reset+0xfb0f6b58>
81116cd0:	88e2983a 	sll	r17,r17,r3
81116cd4:	80a8d83a 	srl	r20,r16,r2
81116cd8:	80e0983a 	sll	r16,r16,r3
81116cdc:	882ad43a 	srli	r21,r17,16
81116ce0:	9884d83a 	srl	r2,r19,r2
81116ce4:	a009883a 	mov	r4,r20
81116ce8:	a80b883a 	mov	r5,r21
81116cec:	142eb03a 	or	r23,r2,r16
81116cf0:	98e4983a 	sll	r18,r19,r3
81116cf4:	11174c40 	call	811174c4 <__umodsi3>
81116cf8:	a009883a 	mov	r4,r20
81116cfc:	a80b883a 	mov	r5,r21
81116d00:	1021883a 	mov	r16,r2
81116d04:	11174600 	call	81117460 <__udivsi3>
81116d08:	1039883a 	mov	fp,r2
81116d0c:	8d3fffcc 	andi	r20,r17,65535
81116d10:	8020943a 	slli	r16,r16,16
81116d14:	b804d43a 	srli	r2,r23,16
81116d18:	a72d383a 	mul	r22,r20,fp
81116d1c:	1404b03a 	or	r2,r2,r16
81116d20:	1580062e 	bgeu	r2,r22,81116d3c <__udivdi3+0x484>
81116d24:	1445883a 	add	r2,r2,r17
81116d28:	e0ffffc4 	addi	r3,fp,-1
81116d2c:	14403836 	bltu	r2,r17,81116e10 <__udivdi3+0x558>
81116d30:	1580372e 	bgeu	r2,r22,81116e10 <__udivdi3+0x558>
81116d34:	e73fff84 	addi	fp,fp,-2
81116d38:	1445883a 	add	r2,r2,r17
81116d3c:	15adc83a 	sub	r22,r2,r22
81116d40:	a80b883a 	mov	r5,r21
81116d44:	b009883a 	mov	r4,r22
81116d48:	11174c40 	call	811174c4 <__umodsi3>
81116d4c:	1027883a 	mov	r19,r2
81116d50:	b009883a 	mov	r4,r22
81116d54:	a80b883a 	mov	r5,r21
81116d58:	11174600 	call	81117460 <__udivsi3>
81116d5c:	9826943a 	slli	r19,r19,16
81116d60:	a0a1383a 	mul	r16,r20,r2
81116d64:	b93fffcc 	andi	r4,r23,65535
81116d68:	24c8b03a 	or	r4,r4,r19
81116d6c:	2400062e 	bgeu	r4,r16,81116d88 <__udivdi3+0x4d0>
81116d70:	2449883a 	add	r4,r4,r17
81116d74:	10ffffc4 	addi	r3,r2,-1
81116d78:	24402336 	bltu	r4,r17,81116e08 <__udivdi3+0x550>
81116d7c:	2400222e 	bgeu	r4,r16,81116e08 <__udivdi3+0x550>
81116d80:	10bfff84 	addi	r2,r2,-2
81116d84:	2449883a 	add	r4,r4,r17
81116d88:	e038943a 	slli	fp,fp,16
81116d8c:	2421c83a 	sub	r16,r4,r16
81116d90:	e086b03a 	or	r3,fp,r2
81116d94:	003f4306 	br	81116aa4 <__reset+0xfb0f6aa4>
81116d98:	2005883a 	mov	r2,r4
81116d9c:	003f6906 	br	81116b44 <__reset+0xfb0f6b44>
81116da0:	1805883a 	mov	r2,r3
81116da4:	003f0f06 	br	811169e4 <__reset+0xfb0f69e4>
81116da8:	1806943a 	slli	r3,r3,16
81116dac:	9d66983a 	sll	r19,r19,r21
81116db0:	39ffffcc 	andi	r7,r7,65535
81116db4:	19c7883a 	add	r3,r3,r7
81116db8:	98ffc32e 	bgeu	r19,r3,81116cc8 <__reset+0xfb0f6cc8>
81116dbc:	10bfffc4 	addi	r2,r2,-1
81116dc0:	003fc106 	br	81116cc8 <__reset+0xfb0f6cc8>
81116dc4:	00800604 	movi	r2,24
81116dc8:	003f1106 	br	81116a10 <__reset+0xfb0f6a10>
81116dcc:	00800604 	movi	r2,24
81116dd0:	003f2706 	br	81116a70 <__reset+0xfb0f6a70>
81116dd4:	00800604 	movi	r2,24
81116dd8:	003ece06 	br	81116914 <__reset+0xfb0f6914>
81116ddc:	0007883a 	mov	r3,zero
81116de0:	00800044 	movi	r2,1
81116de4:	003f5c06 	br	81116b58 <__reset+0xfb0f6b58>
81116de8:	813fa12e 	bgeu	r16,r4,81116c70 <__reset+0xfb0f6c70>
81116dec:	10bfff84 	addi	r2,r2,-2
81116df0:	85e1883a 	add	r16,r16,r23
81116df4:	003f9f06 	br	81116c74 <__reset+0xfb0f6c74>
81116df8:	1c7f8a2e 	bgeu	r3,r17,81116c24 <__reset+0xfb0f6c24>
81116dfc:	31bfff84 	addi	r6,r6,-2
81116e00:	1dc7883a 	add	r3,r3,r23
81116e04:	003f8806 	br	81116c28 <__reset+0xfb0f6c28>
81116e08:	1805883a 	mov	r2,r3
81116e0c:	003fde06 	br	81116d88 <__reset+0xfb0f6d88>
81116e10:	1839883a 	mov	fp,r3
81116e14:	003fc906 	br	81116d3c <__reset+0xfb0f6d3c>
81116e18:	b5bfff84 	addi	r22,r22,-2
81116e1c:	2449883a 	add	r4,r4,r17
81116e20:	003f3406 	br	81116af4 <__reset+0xfb0f6af4>
81116e24:	b5bfff84 	addi	r22,r22,-2
81116e28:	1445883a 	add	r2,r2,r17
81116e2c:	003edb06 	br	8111699c <__reset+0xfb0f699c>

81116e30 <__umoddi3>:
81116e30:	defff404 	addi	sp,sp,-48
81116e34:	df000a15 	stw	fp,40(sp)
81116e38:	dc400315 	stw	r17,12(sp)
81116e3c:	dc000215 	stw	r16,8(sp)
81116e40:	dfc00b15 	stw	ra,44(sp)
81116e44:	ddc00915 	stw	r23,36(sp)
81116e48:	dd800815 	stw	r22,32(sp)
81116e4c:	dd400715 	stw	r21,28(sp)
81116e50:	dd000615 	stw	r20,24(sp)
81116e54:	dcc00515 	stw	r19,20(sp)
81116e58:	dc800415 	stw	r18,16(sp)
81116e5c:	2021883a 	mov	r16,r4
81116e60:	2823883a 	mov	r17,r5
81116e64:	2839883a 	mov	fp,r5
81116e68:	38003c1e 	bne	r7,zero,81116f5c <__umoddi3+0x12c>
81116e6c:	3027883a 	mov	r19,r6
81116e70:	2029883a 	mov	r20,r4
81116e74:	2980512e 	bgeu	r5,r6,81116fbc <__umoddi3+0x18c>
81116e78:	00bfffd4 	movui	r2,65535
81116e7c:	11809a36 	bltu	r2,r6,811170e8 <__umoddi3+0x2b8>
81116e80:	01003fc4 	movi	r4,255
81116e84:	2189803a 	cmpltu	r4,r4,r6
81116e88:	200890fa 	slli	r4,r4,3
81116e8c:	3104d83a 	srl	r2,r6,r4
81116e90:	00e044b4 	movhi	r3,33042
81116e94:	18feb6c4 	addi	r3,r3,-1317
81116e98:	1885883a 	add	r2,r3,r2
81116e9c:	10c00003 	ldbu	r3,0(r2)
81116ea0:	00800804 	movi	r2,32
81116ea4:	1909883a 	add	r4,r3,r4
81116ea8:	1125c83a 	sub	r18,r2,r4
81116eac:	90000526 	beq	r18,zero,81116ec4 <__umoddi3+0x94>
81116eb0:	8ca2983a 	sll	r17,r17,r18
81116eb4:	8108d83a 	srl	r4,r16,r4
81116eb8:	34a6983a 	sll	r19,r6,r18
81116ebc:	84a8983a 	sll	r20,r16,r18
81116ec0:	2478b03a 	or	fp,r4,r17
81116ec4:	982ed43a 	srli	r23,r19,16
81116ec8:	e009883a 	mov	r4,fp
81116ecc:	9dbfffcc 	andi	r22,r19,65535
81116ed0:	b80b883a 	mov	r5,r23
81116ed4:	11174c40 	call	811174c4 <__umodsi3>
81116ed8:	e009883a 	mov	r4,fp
81116edc:	b80b883a 	mov	r5,r23
81116ee0:	102b883a 	mov	r21,r2
81116ee4:	11174600 	call	81117460 <__udivsi3>
81116ee8:	a806943a 	slli	r3,r21,16
81116eec:	a008d43a 	srli	r4,r20,16
81116ef0:	b085383a 	mul	r2,r22,r2
81116ef4:	20c8b03a 	or	r4,r4,r3
81116ef8:	2080032e 	bgeu	r4,r2,81116f08 <__umoddi3+0xd8>
81116efc:	24c9883a 	add	r4,r4,r19
81116f00:	24c00136 	bltu	r4,r19,81116f08 <__umoddi3+0xd8>
81116f04:	20811036 	bltu	r4,r2,81117348 <__umoddi3+0x518>
81116f08:	20abc83a 	sub	r21,r4,r2
81116f0c:	b80b883a 	mov	r5,r23
81116f10:	a809883a 	mov	r4,r21
81116f14:	11174c40 	call	811174c4 <__umodsi3>
81116f18:	1023883a 	mov	r17,r2
81116f1c:	b80b883a 	mov	r5,r23
81116f20:	a809883a 	mov	r4,r21
81116f24:	11174600 	call	81117460 <__udivsi3>
81116f28:	8822943a 	slli	r17,r17,16
81116f2c:	b085383a 	mul	r2,r22,r2
81116f30:	a0ffffcc 	andi	r3,r20,65535
81116f34:	1c46b03a 	or	r3,r3,r17
81116f38:	1880042e 	bgeu	r3,r2,81116f4c <__umoddi3+0x11c>
81116f3c:	1cc7883a 	add	r3,r3,r19
81116f40:	1cc00236 	bltu	r3,r19,81116f4c <__umoddi3+0x11c>
81116f44:	1880012e 	bgeu	r3,r2,81116f4c <__umoddi3+0x11c>
81116f48:	1cc7883a 	add	r3,r3,r19
81116f4c:	1885c83a 	sub	r2,r3,r2
81116f50:	1484d83a 	srl	r2,r2,r18
81116f54:	0007883a 	mov	r3,zero
81116f58:	00004f06 	br	81117098 <__umoddi3+0x268>
81116f5c:	29c04c36 	bltu	r5,r7,81117090 <__umoddi3+0x260>
81116f60:	00bfffd4 	movui	r2,65535
81116f64:	11c0582e 	bgeu	r2,r7,811170c8 <__umoddi3+0x298>
81116f68:	00804034 	movhi	r2,256
81116f6c:	10bfffc4 	addi	r2,r2,-1
81116f70:	11c0e736 	bltu	r2,r7,81117310 <__umoddi3+0x4e0>
81116f74:	01000404 	movi	r4,16
81116f78:	3904d83a 	srl	r2,r7,r4
81116f7c:	00e044b4 	movhi	r3,33042
81116f80:	18feb6c4 	addi	r3,r3,-1317
81116f84:	1885883a 	add	r2,r3,r2
81116f88:	14c00003 	ldbu	r19,0(r2)
81116f8c:	00c00804 	movi	r3,32
81116f90:	9927883a 	add	r19,r19,r4
81116f94:	1ce9c83a 	sub	r20,r3,r19
81116f98:	a000581e 	bne	r20,zero,811170fc <__umoddi3+0x2cc>
81116f9c:	3c400136 	bltu	r7,r17,81116fa4 <__umoddi3+0x174>
81116fa0:	8180eb36 	bltu	r16,r6,81117350 <__umoddi3+0x520>
81116fa4:	8185c83a 	sub	r2,r16,r6
81116fa8:	89e3c83a 	sub	r17,r17,r7
81116fac:	8089803a 	cmpltu	r4,r16,r2
81116fb0:	8939c83a 	sub	fp,r17,r4
81116fb4:	e007883a 	mov	r3,fp
81116fb8:	00003706 	br	81117098 <__umoddi3+0x268>
81116fbc:	3000041e 	bne	r6,zero,81116fd0 <__umoddi3+0x1a0>
81116fc0:	000b883a 	mov	r5,zero
81116fc4:	01000044 	movi	r4,1
81116fc8:	11174600 	call	81117460 <__udivsi3>
81116fcc:	1027883a 	mov	r19,r2
81116fd0:	00bfffd4 	movui	r2,65535
81116fd4:	14c0402e 	bgeu	r2,r19,811170d8 <__umoddi3+0x2a8>
81116fd8:	00804034 	movhi	r2,256
81116fdc:	10bfffc4 	addi	r2,r2,-1
81116fe0:	14c0cd36 	bltu	r2,r19,81117318 <__umoddi3+0x4e8>
81116fe4:	00800404 	movi	r2,16
81116fe8:	9886d83a 	srl	r3,r19,r2
81116fec:	012044b4 	movhi	r4,33042
81116ff0:	213eb6c4 	addi	r4,r4,-1317
81116ff4:	20c7883a 	add	r3,r4,r3
81116ff8:	18c00003 	ldbu	r3,0(r3)
81116ffc:	1887883a 	add	r3,r3,r2
81117000:	00800804 	movi	r2,32
81117004:	10e5c83a 	sub	r18,r2,r3
81117008:	9000901e 	bne	r18,zero,8111724c <__umoddi3+0x41c>
8111700c:	982cd43a 	srli	r22,r19,16
81117010:	8ce3c83a 	sub	r17,r17,r19
81117014:	9d7fffcc 	andi	r21,r19,65535
81117018:	b00b883a 	mov	r5,r22
8111701c:	8809883a 	mov	r4,r17
81117020:	11174c40 	call	811174c4 <__umodsi3>
81117024:	8809883a 	mov	r4,r17
81117028:	b00b883a 	mov	r5,r22
8111702c:	1021883a 	mov	r16,r2
81117030:	11174600 	call	81117460 <__udivsi3>
81117034:	8006943a 	slli	r3,r16,16
81117038:	a008d43a 	srli	r4,r20,16
8111703c:	1545383a 	mul	r2,r2,r21
81117040:	20c8b03a 	or	r4,r4,r3
81117044:	2080042e 	bgeu	r4,r2,81117058 <__umoddi3+0x228>
81117048:	24c9883a 	add	r4,r4,r19
8111704c:	24c00236 	bltu	r4,r19,81117058 <__umoddi3+0x228>
81117050:	2080012e 	bgeu	r4,r2,81117058 <__umoddi3+0x228>
81117054:	24c9883a 	add	r4,r4,r19
81117058:	20a1c83a 	sub	r16,r4,r2
8111705c:	b00b883a 	mov	r5,r22
81117060:	8009883a 	mov	r4,r16
81117064:	11174c40 	call	811174c4 <__umodsi3>
81117068:	1023883a 	mov	r17,r2
8111706c:	b00b883a 	mov	r5,r22
81117070:	8009883a 	mov	r4,r16
81117074:	11174600 	call	81117460 <__udivsi3>
81117078:	8822943a 	slli	r17,r17,16
8111707c:	1545383a 	mul	r2,r2,r21
81117080:	a53fffcc 	andi	r20,r20,65535
81117084:	a446b03a 	or	r3,r20,r17
81117088:	18bfb02e 	bgeu	r3,r2,81116f4c <__reset+0xfb0f6f4c>
8111708c:	003fab06 	br	81116f3c <__reset+0xfb0f6f3c>
81117090:	2005883a 	mov	r2,r4
81117094:	2807883a 	mov	r3,r5
81117098:	dfc00b17 	ldw	ra,44(sp)
8111709c:	df000a17 	ldw	fp,40(sp)
811170a0:	ddc00917 	ldw	r23,36(sp)
811170a4:	dd800817 	ldw	r22,32(sp)
811170a8:	dd400717 	ldw	r21,28(sp)
811170ac:	dd000617 	ldw	r20,24(sp)
811170b0:	dcc00517 	ldw	r19,20(sp)
811170b4:	dc800417 	ldw	r18,16(sp)
811170b8:	dc400317 	ldw	r17,12(sp)
811170bc:	dc000217 	ldw	r16,8(sp)
811170c0:	dec00c04 	addi	sp,sp,48
811170c4:	f800283a 	ret
811170c8:	04c03fc4 	movi	r19,255
811170cc:	99c9803a 	cmpltu	r4,r19,r7
811170d0:	200890fa 	slli	r4,r4,3
811170d4:	003fa806 	br	81116f78 <__reset+0xfb0f6f78>
811170d8:	00803fc4 	movi	r2,255
811170dc:	14c5803a 	cmpltu	r2,r2,r19
811170e0:	100490fa 	slli	r2,r2,3
811170e4:	003fc006 	br	81116fe8 <__reset+0xfb0f6fe8>
811170e8:	00804034 	movhi	r2,256
811170ec:	10bfffc4 	addi	r2,r2,-1
811170f0:	11808b36 	bltu	r2,r6,81117320 <__umoddi3+0x4f0>
811170f4:	01000404 	movi	r4,16
811170f8:	003f6406 	br	81116e8c <__reset+0xfb0f6e8c>
811170fc:	34c4d83a 	srl	r2,r6,r19
81117100:	3d0e983a 	sll	r7,r7,r20
81117104:	8cf8d83a 	srl	fp,r17,r19
81117108:	8d10983a 	sll	r8,r17,r20
8111710c:	38aab03a 	or	r21,r7,r2
81117110:	a82cd43a 	srli	r22,r21,16
81117114:	84e2d83a 	srl	r17,r16,r19
81117118:	e009883a 	mov	r4,fp
8111711c:	b00b883a 	mov	r5,r22
81117120:	8a22b03a 	or	r17,r17,r8
81117124:	3524983a 	sll	r18,r6,r20
81117128:	11174c40 	call	811174c4 <__umodsi3>
8111712c:	e009883a 	mov	r4,fp
81117130:	b00b883a 	mov	r5,r22
81117134:	102f883a 	mov	r23,r2
81117138:	11174600 	call	81117460 <__udivsi3>
8111713c:	100d883a 	mov	r6,r2
81117140:	b808943a 	slli	r4,r23,16
81117144:	aa3fffcc 	andi	r8,r21,65535
81117148:	8804d43a 	srli	r2,r17,16
8111714c:	41af383a 	mul	r23,r8,r6
81117150:	8520983a 	sll	r16,r16,r20
81117154:	1104b03a 	or	r2,r2,r4
81117158:	15c0042e 	bgeu	r2,r23,8111716c <__umoddi3+0x33c>
8111715c:	1545883a 	add	r2,r2,r21
81117160:	30ffffc4 	addi	r3,r6,-1
81117164:	1540742e 	bgeu	r2,r21,81117338 <__umoddi3+0x508>
81117168:	180d883a 	mov	r6,r3
8111716c:	15efc83a 	sub	r23,r2,r23
81117170:	b00b883a 	mov	r5,r22
81117174:	b809883a 	mov	r4,r23
81117178:	d9800115 	stw	r6,4(sp)
8111717c:	da000015 	stw	r8,0(sp)
81117180:	11174c40 	call	811174c4 <__umodsi3>
81117184:	b00b883a 	mov	r5,r22
81117188:	b809883a 	mov	r4,r23
8111718c:	1039883a 	mov	fp,r2
81117190:	11174600 	call	81117460 <__udivsi3>
81117194:	da000017 	ldw	r8,0(sp)
81117198:	e038943a 	slli	fp,fp,16
8111719c:	100b883a 	mov	r5,r2
811171a0:	4089383a 	mul	r4,r8,r2
811171a4:	8a3fffcc 	andi	r8,r17,65535
811171a8:	4710b03a 	or	r8,r8,fp
811171ac:	d9800117 	ldw	r6,4(sp)
811171b0:	4100042e 	bgeu	r8,r4,811171c4 <__umoddi3+0x394>
811171b4:	4551883a 	add	r8,r8,r21
811171b8:	10bfffc4 	addi	r2,r2,-1
811171bc:	45405a2e 	bgeu	r8,r21,81117328 <__umoddi3+0x4f8>
811171c0:	100b883a 	mov	r5,r2
811171c4:	300c943a 	slli	r6,r6,16
811171c8:	91ffffcc 	andi	r7,r18,65535
811171cc:	9004d43a 	srli	r2,r18,16
811171d0:	314cb03a 	or	r6,r6,r5
811171d4:	317fffcc 	andi	r5,r6,65535
811171d8:	300cd43a 	srli	r6,r6,16
811171dc:	29d3383a 	mul	r9,r5,r7
811171e0:	288b383a 	mul	r5,r5,r2
811171e4:	31cf383a 	mul	r7,r6,r7
811171e8:	4806d43a 	srli	r3,r9,16
811171ec:	4111c83a 	sub	r8,r8,r4
811171f0:	29cb883a 	add	r5,r5,r7
811171f4:	194b883a 	add	r5,r3,r5
811171f8:	3085383a 	mul	r2,r6,r2
811171fc:	29c0022e 	bgeu	r5,r7,81117208 <__umoddi3+0x3d8>
81117200:	00c00074 	movhi	r3,1
81117204:	10c5883a 	add	r2,r2,r3
81117208:	2808d43a 	srli	r4,r5,16
8111720c:	280a943a 	slli	r5,r5,16
81117210:	4a7fffcc 	andi	r9,r9,65535
81117214:	2085883a 	add	r2,r4,r2
81117218:	2a4b883a 	add	r5,r5,r9
8111721c:	40803636 	bltu	r8,r2,811172f8 <__umoddi3+0x4c8>
81117220:	40804d26 	beq	r8,r2,81117358 <__umoddi3+0x528>
81117224:	4089c83a 	sub	r4,r8,r2
81117228:	280f883a 	mov	r7,r5
8111722c:	81cfc83a 	sub	r7,r16,r7
81117230:	81c7803a 	cmpltu	r3,r16,r7
81117234:	20c7c83a 	sub	r3,r4,r3
81117238:	1cc4983a 	sll	r2,r3,r19
8111723c:	3d0ed83a 	srl	r7,r7,r20
81117240:	1d06d83a 	srl	r3,r3,r20
81117244:	11c4b03a 	or	r2,r2,r7
81117248:	003f9306 	br	81117098 <__reset+0xfb0f7098>
8111724c:	9ca6983a 	sll	r19,r19,r18
81117250:	88e8d83a 	srl	r20,r17,r3
81117254:	80c4d83a 	srl	r2,r16,r3
81117258:	982cd43a 	srli	r22,r19,16
8111725c:	8ca2983a 	sll	r17,r17,r18
81117260:	a009883a 	mov	r4,r20
81117264:	b00b883a 	mov	r5,r22
81117268:	1478b03a 	or	fp,r2,r17
8111726c:	11174c40 	call	811174c4 <__umodsi3>
81117270:	a009883a 	mov	r4,r20
81117274:	b00b883a 	mov	r5,r22
81117278:	1023883a 	mov	r17,r2
8111727c:	11174600 	call	81117460 <__udivsi3>
81117280:	9d7fffcc 	andi	r21,r19,65535
81117284:	880a943a 	slli	r5,r17,16
81117288:	e008d43a 	srli	r4,fp,16
8111728c:	a885383a 	mul	r2,r21,r2
81117290:	84a8983a 	sll	r20,r16,r18
81117294:	2148b03a 	or	r4,r4,r5
81117298:	2080042e 	bgeu	r4,r2,811172ac <__umoddi3+0x47c>
8111729c:	24c9883a 	add	r4,r4,r19
811172a0:	24c00236 	bltu	r4,r19,811172ac <__umoddi3+0x47c>
811172a4:	2080012e 	bgeu	r4,r2,811172ac <__umoddi3+0x47c>
811172a8:	24c9883a 	add	r4,r4,r19
811172ac:	20a3c83a 	sub	r17,r4,r2
811172b0:	b00b883a 	mov	r5,r22
811172b4:	8809883a 	mov	r4,r17
811172b8:	11174c40 	call	811174c4 <__umodsi3>
811172bc:	102f883a 	mov	r23,r2
811172c0:	8809883a 	mov	r4,r17
811172c4:	b00b883a 	mov	r5,r22
811172c8:	11174600 	call	81117460 <__udivsi3>
811172cc:	b82e943a 	slli	r23,r23,16
811172d0:	a885383a 	mul	r2,r21,r2
811172d4:	e13fffcc 	andi	r4,fp,65535
811172d8:	25c8b03a 	or	r4,r4,r23
811172dc:	2080042e 	bgeu	r4,r2,811172f0 <__umoddi3+0x4c0>
811172e0:	24c9883a 	add	r4,r4,r19
811172e4:	24c00236 	bltu	r4,r19,811172f0 <__umoddi3+0x4c0>
811172e8:	2080012e 	bgeu	r4,r2,811172f0 <__umoddi3+0x4c0>
811172ec:	24c9883a 	add	r4,r4,r19
811172f0:	20a3c83a 	sub	r17,r4,r2
811172f4:	003f4806 	br	81117018 <__reset+0xfb0f7018>
811172f8:	2c8fc83a 	sub	r7,r5,r18
811172fc:	1545c83a 	sub	r2,r2,r21
81117300:	29cb803a 	cmpltu	r5,r5,r7
81117304:	1145c83a 	sub	r2,r2,r5
81117308:	4089c83a 	sub	r4,r8,r2
8111730c:	003fc706 	br	8111722c <__reset+0xfb0f722c>
81117310:	01000604 	movi	r4,24
81117314:	003f1806 	br	81116f78 <__reset+0xfb0f6f78>
81117318:	00800604 	movi	r2,24
8111731c:	003f3206 	br	81116fe8 <__reset+0xfb0f6fe8>
81117320:	01000604 	movi	r4,24
81117324:	003ed906 	br	81116e8c <__reset+0xfb0f6e8c>
81117328:	413fa52e 	bgeu	r8,r4,811171c0 <__reset+0xfb0f71c0>
8111732c:	297fff84 	addi	r5,r5,-2
81117330:	4551883a 	add	r8,r8,r21
81117334:	003fa306 	br	811171c4 <__reset+0xfb0f71c4>
81117338:	15ff8b2e 	bgeu	r2,r23,81117168 <__reset+0xfb0f7168>
8111733c:	31bfff84 	addi	r6,r6,-2
81117340:	1545883a 	add	r2,r2,r21
81117344:	003f8906 	br	8111716c <__reset+0xfb0f716c>
81117348:	24c9883a 	add	r4,r4,r19
8111734c:	003eee06 	br	81116f08 <__reset+0xfb0f6f08>
81117350:	8005883a 	mov	r2,r16
81117354:	003f1706 	br	81116fb4 <__reset+0xfb0f6fb4>
81117358:	817fe736 	bltu	r16,r5,811172f8 <__reset+0xfb0f72f8>
8111735c:	280f883a 	mov	r7,r5
81117360:	0009883a 	mov	r4,zero
81117364:	003fb106 	br	8111722c <__reset+0xfb0f722c>

81117368 <__divsi3>:
81117368:	20001b16 	blt	r4,zero,811173d8 <__divsi3+0x70>
8111736c:	000f883a 	mov	r7,zero
81117370:	28001616 	blt	r5,zero,811173cc <__divsi3+0x64>
81117374:	200d883a 	mov	r6,r4
81117378:	29001a2e 	bgeu	r5,r4,811173e4 <__divsi3+0x7c>
8111737c:	00800804 	movi	r2,32
81117380:	00c00044 	movi	r3,1
81117384:	00000106 	br	8111738c <__divsi3+0x24>
81117388:	10000d26 	beq	r2,zero,811173c0 <__divsi3+0x58>
8111738c:	294b883a 	add	r5,r5,r5
81117390:	10bfffc4 	addi	r2,r2,-1
81117394:	18c7883a 	add	r3,r3,r3
81117398:	293ffb36 	bltu	r5,r4,81117388 <__reset+0xfb0f7388>
8111739c:	0005883a 	mov	r2,zero
811173a0:	18000726 	beq	r3,zero,811173c0 <__divsi3+0x58>
811173a4:	0005883a 	mov	r2,zero
811173a8:	31400236 	bltu	r6,r5,811173b4 <__divsi3+0x4c>
811173ac:	314dc83a 	sub	r6,r6,r5
811173b0:	10c4b03a 	or	r2,r2,r3
811173b4:	1806d07a 	srli	r3,r3,1
811173b8:	280ad07a 	srli	r5,r5,1
811173bc:	183ffa1e 	bne	r3,zero,811173a8 <__reset+0xfb0f73a8>
811173c0:	38000126 	beq	r7,zero,811173c8 <__divsi3+0x60>
811173c4:	0085c83a 	sub	r2,zero,r2
811173c8:	f800283a 	ret
811173cc:	014bc83a 	sub	r5,zero,r5
811173d0:	39c0005c 	xori	r7,r7,1
811173d4:	003fe706 	br	81117374 <__reset+0xfb0f7374>
811173d8:	0109c83a 	sub	r4,zero,r4
811173dc:	01c00044 	movi	r7,1
811173e0:	003fe306 	br	81117370 <__reset+0xfb0f7370>
811173e4:	00c00044 	movi	r3,1
811173e8:	003fee06 	br	811173a4 <__reset+0xfb0f73a4>

811173ec <__modsi3>:
811173ec:	20001716 	blt	r4,zero,8111744c <__modsi3+0x60>
811173f0:	000f883a 	mov	r7,zero
811173f4:	2005883a 	mov	r2,r4
811173f8:	28001216 	blt	r5,zero,81117444 <__modsi3+0x58>
811173fc:	2900162e 	bgeu	r5,r4,81117458 <__modsi3+0x6c>
81117400:	01800804 	movi	r6,32
81117404:	00c00044 	movi	r3,1
81117408:	00000106 	br	81117410 <__modsi3+0x24>
8111740c:	30000a26 	beq	r6,zero,81117438 <__modsi3+0x4c>
81117410:	294b883a 	add	r5,r5,r5
81117414:	31bfffc4 	addi	r6,r6,-1
81117418:	18c7883a 	add	r3,r3,r3
8111741c:	293ffb36 	bltu	r5,r4,8111740c <__reset+0xfb0f740c>
81117420:	18000526 	beq	r3,zero,81117438 <__modsi3+0x4c>
81117424:	1806d07a 	srli	r3,r3,1
81117428:	11400136 	bltu	r2,r5,81117430 <__modsi3+0x44>
8111742c:	1145c83a 	sub	r2,r2,r5
81117430:	280ad07a 	srli	r5,r5,1
81117434:	183ffb1e 	bne	r3,zero,81117424 <__reset+0xfb0f7424>
81117438:	38000126 	beq	r7,zero,81117440 <__modsi3+0x54>
8111743c:	0085c83a 	sub	r2,zero,r2
81117440:	f800283a 	ret
81117444:	014bc83a 	sub	r5,zero,r5
81117448:	003fec06 	br	811173fc <__reset+0xfb0f73fc>
8111744c:	0109c83a 	sub	r4,zero,r4
81117450:	01c00044 	movi	r7,1
81117454:	003fe706 	br	811173f4 <__reset+0xfb0f73f4>
81117458:	00c00044 	movi	r3,1
8111745c:	003ff106 	br	81117424 <__reset+0xfb0f7424>

81117460 <__udivsi3>:
81117460:	200d883a 	mov	r6,r4
81117464:	2900152e 	bgeu	r5,r4,811174bc <__udivsi3+0x5c>
81117468:	28001416 	blt	r5,zero,811174bc <__udivsi3+0x5c>
8111746c:	00800804 	movi	r2,32
81117470:	00c00044 	movi	r3,1
81117474:	00000206 	br	81117480 <__udivsi3+0x20>
81117478:	10000e26 	beq	r2,zero,811174b4 <__udivsi3+0x54>
8111747c:	28000516 	blt	r5,zero,81117494 <__udivsi3+0x34>
81117480:	294b883a 	add	r5,r5,r5
81117484:	10bfffc4 	addi	r2,r2,-1
81117488:	18c7883a 	add	r3,r3,r3
8111748c:	293ffa36 	bltu	r5,r4,81117478 <__reset+0xfb0f7478>
81117490:	18000826 	beq	r3,zero,811174b4 <__udivsi3+0x54>
81117494:	0005883a 	mov	r2,zero
81117498:	31400236 	bltu	r6,r5,811174a4 <__udivsi3+0x44>
8111749c:	314dc83a 	sub	r6,r6,r5
811174a0:	10c4b03a 	or	r2,r2,r3
811174a4:	1806d07a 	srli	r3,r3,1
811174a8:	280ad07a 	srli	r5,r5,1
811174ac:	183ffa1e 	bne	r3,zero,81117498 <__reset+0xfb0f7498>
811174b0:	f800283a 	ret
811174b4:	0005883a 	mov	r2,zero
811174b8:	f800283a 	ret
811174bc:	00c00044 	movi	r3,1
811174c0:	003ff406 	br	81117494 <__reset+0xfb0f7494>

811174c4 <__umodsi3>:
811174c4:	2005883a 	mov	r2,r4
811174c8:	2900122e 	bgeu	r5,r4,81117514 <__umodsi3+0x50>
811174cc:	28001116 	blt	r5,zero,81117514 <__umodsi3+0x50>
811174d0:	01800804 	movi	r6,32
811174d4:	00c00044 	movi	r3,1
811174d8:	00000206 	br	811174e4 <__umodsi3+0x20>
811174dc:	30000c26 	beq	r6,zero,81117510 <__umodsi3+0x4c>
811174e0:	28000516 	blt	r5,zero,811174f8 <__umodsi3+0x34>
811174e4:	294b883a 	add	r5,r5,r5
811174e8:	31bfffc4 	addi	r6,r6,-1
811174ec:	18c7883a 	add	r3,r3,r3
811174f0:	293ffa36 	bltu	r5,r4,811174dc <__reset+0xfb0f74dc>
811174f4:	18000626 	beq	r3,zero,81117510 <__umodsi3+0x4c>
811174f8:	1806d07a 	srli	r3,r3,1
811174fc:	11400136 	bltu	r2,r5,81117504 <__umodsi3+0x40>
81117500:	1145c83a 	sub	r2,r2,r5
81117504:	280ad07a 	srli	r5,r5,1
81117508:	183ffb1e 	bne	r3,zero,811174f8 <__reset+0xfb0f74f8>
8111750c:	f800283a 	ret
81117510:	f800283a 	ret
81117514:	00c00044 	movi	r3,1
81117518:	003ff706 	br	811174f8 <__reset+0xfb0f74f8>

8111751c <__adddf3>:
8111751c:	02c00434 	movhi	r11,16
81117520:	5affffc4 	addi	r11,r11,-1
81117524:	2806d7fa 	srli	r3,r5,31
81117528:	2ad4703a 	and	r10,r5,r11
8111752c:	3ad2703a 	and	r9,r7,r11
81117530:	3804d53a 	srli	r2,r7,20
81117534:	3018d77a 	srli	r12,r6,29
81117538:	280ad53a 	srli	r5,r5,20
8111753c:	501490fa 	slli	r10,r10,3
81117540:	2010d77a 	srli	r8,r4,29
81117544:	481290fa 	slli	r9,r9,3
81117548:	380ed7fa 	srli	r7,r7,31
8111754c:	defffb04 	addi	sp,sp,-20
81117550:	dc800215 	stw	r18,8(sp)
81117554:	dc400115 	stw	r17,4(sp)
81117558:	dc000015 	stw	r16,0(sp)
8111755c:	dfc00415 	stw	ra,16(sp)
81117560:	dcc00315 	stw	r19,12(sp)
81117564:	1c803fcc 	andi	r18,r3,255
81117568:	2c01ffcc 	andi	r16,r5,2047
8111756c:	5210b03a 	or	r8,r10,r8
81117570:	202290fa 	slli	r17,r4,3
81117574:	1081ffcc 	andi	r2,r2,2047
81117578:	4b12b03a 	or	r9,r9,r12
8111757c:	300c90fa 	slli	r6,r6,3
81117580:	91c07526 	beq	r18,r7,81117758 <__adddf3+0x23c>
81117584:	8087c83a 	sub	r3,r16,r2
81117588:	00c0ab0e 	bge	zero,r3,81117838 <__adddf3+0x31c>
8111758c:	10002a1e 	bne	r2,zero,81117638 <__adddf3+0x11c>
81117590:	4984b03a 	or	r2,r9,r6
81117594:	1000961e 	bne	r2,zero,811177f0 <__adddf3+0x2d4>
81117598:	888001cc 	andi	r2,r17,7
8111759c:	10000726 	beq	r2,zero,811175bc <__adddf3+0xa0>
811175a0:	888003cc 	andi	r2,r17,15
811175a4:	00c00104 	movi	r3,4
811175a8:	10c00426 	beq	r2,r3,811175bc <__adddf3+0xa0>
811175ac:	88c7883a 	add	r3,r17,r3
811175b0:	1c63803a 	cmpltu	r17,r3,r17
811175b4:	4451883a 	add	r8,r8,r17
811175b8:	1823883a 	mov	r17,r3
811175bc:	4080202c 	andhi	r2,r8,128
811175c0:	10005926 	beq	r2,zero,81117728 <__adddf3+0x20c>
811175c4:	84000044 	addi	r16,r16,1
811175c8:	0081ffc4 	movi	r2,2047
811175cc:	8080ba26 	beq	r16,r2,811178b8 <__adddf3+0x39c>
811175d0:	00bfe034 	movhi	r2,65408
811175d4:	10bfffc4 	addi	r2,r2,-1
811175d8:	4090703a 	and	r8,r8,r2
811175dc:	4004977a 	slli	r2,r8,29
811175e0:	4010927a 	slli	r8,r8,9
811175e4:	8822d0fa 	srli	r17,r17,3
811175e8:	8401ffcc 	andi	r16,r16,2047
811175ec:	4010d33a 	srli	r8,r8,12
811175f0:	9007883a 	mov	r3,r18
811175f4:	1444b03a 	or	r2,r2,r17
811175f8:	8401ffcc 	andi	r16,r16,2047
811175fc:	8020953a 	slli	r16,r16,20
81117600:	18c03fcc 	andi	r3,r3,255
81117604:	01000434 	movhi	r4,16
81117608:	213fffc4 	addi	r4,r4,-1
8111760c:	180697fa 	slli	r3,r3,31
81117610:	4110703a 	and	r8,r8,r4
81117614:	4410b03a 	or	r8,r8,r16
81117618:	40c6b03a 	or	r3,r8,r3
8111761c:	dfc00417 	ldw	ra,16(sp)
81117620:	dcc00317 	ldw	r19,12(sp)
81117624:	dc800217 	ldw	r18,8(sp)
81117628:	dc400117 	ldw	r17,4(sp)
8111762c:	dc000017 	ldw	r16,0(sp)
81117630:	dec00504 	addi	sp,sp,20
81117634:	f800283a 	ret
81117638:	0081ffc4 	movi	r2,2047
8111763c:	80bfd626 	beq	r16,r2,81117598 <__reset+0xfb0f7598>
81117640:	4a402034 	orhi	r9,r9,128
81117644:	00800e04 	movi	r2,56
81117648:	10c09f16 	blt	r2,r3,811178c8 <__adddf3+0x3ac>
8111764c:	008007c4 	movi	r2,31
81117650:	10c0c216 	blt	r2,r3,8111795c <__adddf3+0x440>
81117654:	00800804 	movi	r2,32
81117658:	10c5c83a 	sub	r2,r2,r3
8111765c:	488a983a 	sll	r5,r9,r2
81117660:	30c8d83a 	srl	r4,r6,r3
81117664:	3084983a 	sll	r2,r6,r2
81117668:	48c6d83a 	srl	r3,r9,r3
8111766c:	290cb03a 	or	r6,r5,r4
81117670:	1004c03a 	cmpne	r2,r2,zero
81117674:	308cb03a 	or	r6,r6,r2
81117678:	898dc83a 	sub	r6,r17,r6
8111767c:	89a3803a 	cmpltu	r17,r17,r6
81117680:	40d1c83a 	sub	r8,r8,r3
81117684:	4451c83a 	sub	r8,r8,r17
81117688:	3023883a 	mov	r17,r6
8111768c:	4080202c 	andhi	r2,r8,128
81117690:	10002326 	beq	r2,zero,81117720 <__adddf3+0x204>
81117694:	04c02034 	movhi	r19,128
81117698:	9cffffc4 	addi	r19,r19,-1
8111769c:	44e6703a 	and	r19,r8,r19
811176a0:	98007626 	beq	r19,zero,8111787c <__adddf3+0x360>
811176a4:	9809883a 	mov	r4,r19
811176a8:	110cd080 	call	8110cd08 <__clzsi2>
811176ac:	10fffe04 	addi	r3,r2,-8
811176b0:	010007c4 	movi	r4,31
811176b4:	20c07716 	blt	r4,r3,81117894 <__adddf3+0x378>
811176b8:	00800804 	movi	r2,32
811176bc:	10c5c83a 	sub	r2,r2,r3
811176c0:	8884d83a 	srl	r2,r17,r2
811176c4:	98d0983a 	sll	r8,r19,r3
811176c8:	88e2983a 	sll	r17,r17,r3
811176cc:	1204b03a 	or	r2,r2,r8
811176d0:	1c007416 	blt	r3,r16,811178a4 <__adddf3+0x388>
811176d4:	1c21c83a 	sub	r16,r3,r16
811176d8:	82000044 	addi	r8,r16,1
811176dc:	00c007c4 	movi	r3,31
811176e0:	1a009116 	blt	r3,r8,81117928 <__adddf3+0x40c>
811176e4:	00c00804 	movi	r3,32
811176e8:	1a07c83a 	sub	r3,r3,r8
811176ec:	8a08d83a 	srl	r4,r17,r8
811176f0:	88e2983a 	sll	r17,r17,r3
811176f4:	10c6983a 	sll	r3,r2,r3
811176f8:	1210d83a 	srl	r8,r2,r8
811176fc:	8804c03a 	cmpne	r2,r17,zero
81117700:	1906b03a 	or	r3,r3,r4
81117704:	18a2b03a 	or	r17,r3,r2
81117708:	0021883a 	mov	r16,zero
8111770c:	003fa206 	br	81117598 <__reset+0xfb0f7598>
81117710:	1890b03a 	or	r8,r3,r2
81117714:	40017d26 	beq	r8,zero,81117d0c <__adddf3+0x7f0>
81117718:	1011883a 	mov	r8,r2
8111771c:	1823883a 	mov	r17,r3
81117720:	888001cc 	andi	r2,r17,7
81117724:	103f9e1e 	bne	r2,zero,811175a0 <__reset+0xfb0f75a0>
81117728:	4004977a 	slli	r2,r8,29
8111772c:	8822d0fa 	srli	r17,r17,3
81117730:	4010d0fa 	srli	r8,r8,3
81117734:	9007883a 	mov	r3,r18
81117738:	1444b03a 	or	r2,r2,r17
8111773c:	0101ffc4 	movi	r4,2047
81117740:	81002426 	beq	r16,r4,811177d4 <__adddf3+0x2b8>
81117744:	8120703a 	and	r16,r16,r4
81117748:	01000434 	movhi	r4,16
8111774c:	213fffc4 	addi	r4,r4,-1
81117750:	4110703a 	and	r8,r8,r4
81117754:	003fa806 	br	811175f8 <__reset+0xfb0f75f8>
81117758:	8089c83a 	sub	r4,r16,r2
8111775c:	01005e0e 	bge	zero,r4,811178d8 <__adddf3+0x3bc>
81117760:	10002b26 	beq	r2,zero,81117810 <__adddf3+0x2f4>
81117764:	0081ffc4 	movi	r2,2047
81117768:	80bf8b26 	beq	r16,r2,81117598 <__reset+0xfb0f7598>
8111776c:	4a402034 	orhi	r9,r9,128
81117770:	00800e04 	movi	r2,56
81117774:	1100a40e 	bge	r2,r4,81117a08 <__adddf3+0x4ec>
81117778:	498cb03a 	or	r6,r9,r6
8111777c:	300ac03a 	cmpne	r5,r6,zero
81117780:	0013883a 	mov	r9,zero
81117784:	2c4b883a 	add	r5,r5,r17
81117788:	2c63803a 	cmpltu	r17,r5,r17
8111778c:	4a11883a 	add	r8,r9,r8
81117790:	8a11883a 	add	r8,r17,r8
81117794:	2823883a 	mov	r17,r5
81117798:	4080202c 	andhi	r2,r8,128
8111779c:	103fe026 	beq	r2,zero,81117720 <__reset+0xfb0f7720>
811177a0:	84000044 	addi	r16,r16,1
811177a4:	0081ffc4 	movi	r2,2047
811177a8:	8080d226 	beq	r16,r2,81117af4 <__adddf3+0x5d8>
811177ac:	00bfe034 	movhi	r2,65408
811177b0:	10bfffc4 	addi	r2,r2,-1
811177b4:	4090703a 	and	r8,r8,r2
811177b8:	880ad07a 	srli	r5,r17,1
811177bc:	400897fa 	slli	r4,r8,31
811177c0:	88c0004c 	andi	r3,r17,1
811177c4:	28e2b03a 	or	r17,r5,r3
811177c8:	4010d07a 	srli	r8,r8,1
811177cc:	2462b03a 	or	r17,r4,r17
811177d0:	003f7106 	br	81117598 <__reset+0xfb0f7598>
811177d4:	4088b03a 	or	r4,r8,r2
811177d8:	20014526 	beq	r4,zero,81117cf0 <__adddf3+0x7d4>
811177dc:	01000434 	movhi	r4,16
811177e0:	42000234 	orhi	r8,r8,8
811177e4:	213fffc4 	addi	r4,r4,-1
811177e8:	4110703a 	and	r8,r8,r4
811177ec:	003f8206 	br	811175f8 <__reset+0xfb0f75f8>
811177f0:	18ffffc4 	addi	r3,r3,-1
811177f4:	1800491e 	bne	r3,zero,8111791c <__adddf3+0x400>
811177f8:	898bc83a 	sub	r5,r17,r6
811177fc:	8963803a 	cmpltu	r17,r17,r5
81117800:	4251c83a 	sub	r8,r8,r9
81117804:	4451c83a 	sub	r8,r8,r17
81117808:	2823883a 	mov	r17,r5
8111780c:	003f9f06 	br	8111768c <__reset+0xfb0f768c>
81117810:	4984b03a 	or	r2,r9,r6
81117814:	103f6026 	beq	r2,zero,81117598 <__reset+0xfb0f7598>
81117818:	213fffc4 	addi	r4,r4,-1
8111781c:	2000931e 	bne	r4,zero,81117a6c <__adddf3+0x550>
81117820:	898d883a 	add	r6,r17,r6
81117824:	3463803a 	cmpltu	r17,r6,r17
81117828:	4251883a 	add	r8,r8,r9
8111782c:	8a11883a 	add	r8,r17,r8
81117830:	3023883a 	mov	r17,r6
81117834:	003fd806 	br	81117798 <__reset+0xfb0f7798>
81117838:	1800541e 	bne	r3,zero,8111798c <__adddf3+0x470>
8111783c:	80800044 	addi	r2,r16,1
81117840:	1081ffcc 	andi	r2,r2,2047
81117844:	00c00044 	movi	r3,1
81117848:	1880a00e 	bge	r3,r2,81117acc <__adddf3+0x5b0>
8111784c:	8989c83a 	sub	r4,r17,r6
81117850:	8905803a 	cmpltu	r2,r17,r4
81117854:	4267c83a 	sub	r19,r8,r9
81117858:	98a7c83a 	sub	r19,r19,r2
8111785c:	9880202c 	andhi	r2,r19,128
81117860:	10006326 	beq	r2,zero,811179f0 <__adddf3+0x4d4>
81117864:	3463c83a 	sub	r17,r6,r17
81117868:	4a07c83a 	sub	r3,r9,r8
8111786c:	344d803a 	cmpltu	r6,r6,r17
81117870:	19a7c83a 	sub	r19,r3,r6
81117874:	3825883a 	mov	r18,r7
81117878:	983f8a1e 	bne	r19,zero,811176a4 <__reset+0xfb0f76a4>
8111787c:	8809883a 	mov	r4,r17
81117880:	110cd080 	call	8110cd08 <__clzsi2>
81117884:	10800804 	addi	r2,r2,32
81117888:	10fffe04 	addi	r3,r2,-8
8111788c:	010007c4 	movi	r4,31
81117890:	20ff890e 	bge	r4,r3,811176b8 <__reset+0xfb0f76b8>
81117894:	10bff604 	addi	r2,r2,-40
81117898:	8884983a 	sll	r2,r17,r2
8111789c:	0023883a 	mov	r17,zero
811178a0:	1c3f8c0e 	bge	r3,r16,811176d4 <__reset+0xfb0f76d4>
811178a4:	023fe034 	movhi	r8,65408
811178a8:	423fffc4 	addi	r8,r8,-1
811178ac:	80e1c83a 	sub	r16,r16,r3
811178b0:	1210703a 	and	r8,r2,r8
811178b4:	003f3806 	br	81117598 <__reset+0xfb0f7598>
811178b8:	9007883a 	mov	r3,r18
811178bc:	0011883a 	mov	r8,zero
811178c0:	0005883a 	mov	r2,zero
811178c4:	003f4c06 	br	811175f8 <__reset+0xfb0f75f8>
811178c8:	498cb03a 	or	r6,r9,r6
811178cc:	300cc03a 	cmpne	r6,r6,zero
811178d0:	0007883a 	mov	r3,zero
811178d4:	003f6806 	br	81117678 <__reset+0xfb0f7678>
811178d8:	20009c1e 	bne	r4,zero,81117b4c <__adddf3+0x630>
811178dc:	80800044 	addi	r2,r16,1
811178e0:	1141ffcc 	andi	r5,r2,2047
811178e4:	01000044 	movi	r4,1
811178e8:	2140670e 	bge	r4,r5,81117a88 <__adddf3+0x56c>
811178ec:	0101ffc4 	movi	r4,2047
811178f0:	11007f26 	beq	r2,r4,81117af0 <__adddf3+0x5d4>
811178f4:	898d883a 	add	r6,r17,r6
811178f8:	4247883a 	add	r3,r8,r9
811178fc:	3451803a 	cmpltu	r8,r6,r17
81117900:	40d1883a 	add	r8,r8,r3
81117904:	402297fa 	slli	r17,r8,31
81117908:	300cd07a 	srli	r6,r6,1
8111790c:	4010d07a 	srli	r8,r8,1
81117910:	1021883a 	mov	r16,r2
81117914:	89a2b03a 	or	r17,r17,r6
81117918:	003f1f06 	br	81117598 <__reset+0xfb0f7598>
8111791c:	0081ffc4 	movi	r2,2047
81117920:	80bf481e 	bne	r16,r2,81117644 <__reset+0xfb0f7644>
81117924:	003f1c06 	br	81117598 <__reset+0xfb0f7598>
81117928:	843ff844 	addi	r16,r16,-31
8111792c:	01000804 	movi	r4,32
81117930:	1406d83a 	srl	r3,r2,r16
81117934:	41005026 	beq	r8,r4,81117a78 <__adddf3+0x55c>
81117938:	01001004 	movi	r4,64
8111793c:	2211c83a 	sub	r8,r4,r8
81117940:	1204983a 	sll	r2,r2,r8
81117944:	88a2b03a 	or	r17,r17,r2
81117948:	8822c03a 	cmpne	r17,r17,zero
8111794c:	1c62b03a 	or	r17,r3,r17
81117950:	0011883a 	mov	r8,zero
81117954:	0021883a 	mov	r16,zero
81117958:	003f7106 	br	81117720 <__reset+0xfb0f7720>
8111795c:	193ff804 	addi	r4,r3,-32
81117960:	00800804 	movi	r2,32
81117964:	4908d83a 	srl	r4,r9,r4
81117968:	18804526 	beq	r3,r2,81117a80 <__adddf3+0x564>
8111796c:	00801004 	movi	r2,64
81117970:	10c5c83a 	sub	r2,r2,r3
81117974:	4886983a 	sll	r3,r9,r2
81117978:	198cb03a 	or	r6,r3,r6
8111797c:	300cc03a 	cmpne	r6,r6,zero
81117980:	218cb03a 	or	r6,r4,r6
81117984:	0007883a 	mov	r3,zero
81117988:	003f3b06 	br	81117678 <__reset+0xfb0f7678>
8111798c:	80002a26 	beq	r16,zero,81117a38 <__adddf3+0x51c>
81117990:	0101ffc4 	movi	r4,2047
81117994:	11006826 	beq	r2,r4,81117b38 <__adddf3+0x61c>
81117998:	00c7c83a 	sub	r3,zero,r3
8111799c:	42002034 	orhi	r8,r8,128
811179a0:	01000e04 	movi	r4,56
811179a4:	20c07c16 	blt	r4,r3,81117b98 <__adddf3+0x67c>
811179a8:	010007c4 	movi	r4,31
811179ac:	20c0da16 	blt	r4,r3,81117d18 <__adddf3+0x7fc>
811179b0:	01000804 	movi	r4,32
811179b4:	20c9c83a 	sub	r4,r4,r3
811179b8:	4114983a 	sll	r10,r8,r4
811179bc:	88cad83a 	srl	r5,r17,r3
811179c0:	8908983a 	sll	r4,r17,r4
811179c4:	40c6d83a 	srl	r3,r8,r3
811179c8:	5162b03a 	or	r17,r10,r5
811179cc:	2008c03a 	cmpne	r4,r4,zero
811179d0:	8922b03a 	or	r17,r17,r4
811179d4:	3463c83a 	sub	r17,r6,r17
811179d8:	48c7c83a 	sub	r3,r9,r3
811179dc:	344d803a 	cmpltu	r6,r6,r17
811179e0:	1991c83a 	sub	r8,r3,r6
811179e4:	1021883a 	mov	r16,r2
811179e8:	3825883a 	mov	r18,r7
811179ec:	003f2706 	br	8111768c <__reset+0xfb0f768c>
811179f0:	24d0b03a 	or	r8,r4,r19
811179f4:	40001b1e 	bne	r8,zero,81117a64 <__adddf3+0x548>
811179f8:	0005883a 	mov	r2,zero
811179fc:	0007883a 	mov	r3,zero
81117a00:	0021883a 	mov	r16,zero
81117a04:	003f4d06 	br	8111773c <__reset+0xfb0f773c>
81117a08:	008007c4 	movi	r2,31
81117a0c:	11003c16 	blt	r2,r4,81117b00 <__adddf3+0x5e4>
81117a10:	00800804 	movi	r2,32
81117a14:	1105c83a 	sub	r2,r2,r4
81117a18:	488e983a 	sll	r7,r9,r2
81117a1c:	310ad83a 	srl	r5,r6,r4
81117a20:	3084983a 	sll	r2,r6,r2
81117a24:	4912d83a 	srl	r9,r9,r4
81117a28:	394ab03a 	or	r5,r7,r5
81117a2c:	1004c03a 	cmpne	r2,r2,zero
81117a30:	288ab03a 	or	r5,r5,r2
81117a34:	003f5306 	br	81117784 <__reset+0xfb0f7784>
81117a38:	4448b03a 	or	r4,r8,r17
81117a3c:	20003e26 	beq	r4,zero,81117b38 <__adddf3+0x61c>
81117a40:	00c6303a 	nor	r3,zero,r3
81117a44:	18003a1e 	bne	r3,zero,81117b30 <__adddf3+0x614>
81117a48:	3463c83a 	sub	r17,r6,r17
81117a4c:	4a07c83a 	sub	r3,r9,r8
81117a50:	344d803a 	cmpltu	r6,r6,r17
81117a54:	1991c83a 	sub	r8,r3,r6
81117a58:	1021883a 	mov	r16,r2
81117a5c:	3825883a 	mov	r18,r7
81117a60:	003f0a06 	br	8111768c <__reset+0xfb0f768c>
81117a64:	2023883a 	mov	r17,r4
81117a68:	003f0d06 	br	811176a0 <__reset+0xfb0f76a0>
81117a6c:	0081ffc4 	movi	r2,2047
81117a70:	80bf3f1e 	bne	r16,r2,81117770 <__reset+0xfb0f7770>
81117a74:	003ec806 	br	81117598 <__reset+0xfb0f7598>
81117a78:	0005883a 	mov	r2,zero
81117a7c:	003fb106 	br	81117944 <__reset+0xfb0f7944>
81117a80:	0007883a 	mov	r3,zero
81117a84:	003fbc06 	br	81117978 <__reset+0xfb0f7978>
81117a88:	4444b03a 	or	r2,r8,r17
81117a8c:	8000871e 	bne	r16,zero,81117cac <__adddf3+0x790>
81117a90:	1000ba26 	beq	r2,zero,81117d7c <__adddf3+0x860>
81117a94:	4984b03a 	or	r2,r9,r6
81117a98:	103ebf26 	beq	r2,zero,81117598 <__reset+0xfb0f7598>
81117a9c:	8985883a 	add	r2,r17,r6
81117aa0:	4247883a 	add	r3,r8,r9
81117aa4:	1451803a 	cmpltu	r8,r2,r17
81117aa8:	40d1883a 	add	r8,r8,r3
81117aac:	40c0202c 	andhi	r3,r8,128
81117ab0:	1023883a 	mov	r17,r2
81117ab4:	183f1a26 	beq	r3,zero,81117720 <__reset+0xfb0f7720>
81117ab8:	00bfe034 	movhi	r2,65408
81117abc:	10bfffc4 	addi	r2,r2,-1
81117ac0:	2021883a 	mov	r16,r4
81117ac4:	4090703a 	and	r8,r8,r2
81117ac8:	003eb306 	br	81117598 <__reset+0xfb0f7598>
81117acc:	4444b03a 	or	r2,r8,r17
81117ad0:	8000291e 	bne	r16,zero,81117b78 <__adddf3+0x65c>
81117ad4:	10004b1e 	bne	r2,zero,81117c04 <__adddf3+0x6e8>
81117ad8:	4990b03a 	or	r8,r9,r6
81117adc:	40008b26 	beq	r8,zero,81117d0c <__adddf3+0x7f0>
81117ae0:	4811883a 	mov	r8,r9
81117ae4:	3023883a 	mov	r17,r6
81117ae8:	3825883a 	mov	r18,r7
81117aec:	003eaa06 	br	81117598 <__reset+0xfb0f7598>
81117af0:	1021883a 	mov	r16,r2
81117af4:	0011883a 	mov	r8,zero
81117af8:	0005883a 	mov	r2,zero
81117afc:	003f0f06 	br	8111773c <__reset+0xfb0f773c>
81117b00:	217ff804 	addi	r5,r4,-32
81117b04:	00800804 	movi	r2,32
81117b08:	494ad83a 	srl	r5,r9,r5
81117b0c:	20807d26 	beq	r4,r2,81117d04 <__adddf3+0x7e8>
81117b10:	00801004 	movi	r2,64
81117b14:	1109c83a 	sub	r4,r2,r4
81117b18:	4912983a 	sll	r9,r9,r4
81117b1c:	498cb03a 	or	r6,r9,r6
81117b20:	300cc03a 	cmpne	r6,r6,zero
81117b24:	298ab03a 	or	r5,r5,r6
81117b28:	0013883a 	mov	r9,zero
81117b2c:	003f1506 	br	81117784 <__reset+0xfb0f7784>
81117b30:	0101ffc4 	movi	r4,2047
81117b34:	113f9a1e 	bne	r2,r4,811179a0 <__reset+0xfb0f79a0>
81117b38:	4811883a 	mov	r8,r9
81117b3c:	3023883a 	mov	r17,r6
81117b40:	1021883a 	mov	r16,r2
81117b44:	3825883a 	mov	r18,r7
81117b48:	003e9306 	br	81117598 <__reset+0xfb0f7598>
81117b4c:	8000161e 	bne	r16,zero,81117ba8 <__adddf3+0x68c>
81117b50:	444ab03a 	or	r5,r8,r17
81117b54:	28005126 	beq	r5,zero,81117c9c <__adddf3+0x780>
81117b58:	0108303a 	nor	r4,zero,r4
81117b5c:	20004d1e 	bne	r4,zero,81117c94 <__adddf3+0x778>
81117b60:	89a3883a 	add	r17,r17,r6
81117b64:	4253883a 	add	r9,r8,r9
81117b68:	898d803a 	cmpltu	r6,r17,r6
81117b6c:	3251883a 	add	r8,r6,r9
81117b70:	1021883a 	mov	r16,r2
81117b74:	003f0806 	br	81117798 <__reset+0xfb0f7798>
81117b78:	1000301e 	bne	r2,zero,81117c3c <__adddf3+0x720>
81117b7c:	4984b03a 	or	r2,r9,r6
81117b80:	10007126 	beq	r2,zero,81117d48 <__adddf3+0x82c>
81117b84:	4811883a 	mov	r8,r9
81117b88:	3023883a 	mov	r17,r6
81117b8c:	3825883a 	mov	r18,r7
81117b90:	0401ffc4 	movi	r16,2047
81117b94:	003e8006 	br	81117598 <__reset+0xfb0f7598>
81117b98:	4462b03a 	or	r17,r8,r17
81117b9c:	8822c03a 	cmpne	r17,r17,zero
81117ba0:	0007883a 	mov	r3,zero
81117ba4:	003f8b06 	br	811179d4 <__reset+0xfb0f79d4>
81117ba8:	0141ffc4 	movi	r5,2047
81117bac:	11403b26 	beq	r2,r5,81117c9c <__adddf3+0x780>
81117bb0:	0109c83a 	sub	r4,zero,r4
81117bb4:	42002034 	orhi	r8,r8,128
81117bb8:	01400e04 	movi	r5,56
81117bbc:	29006716 	blt	r5,r4,81117d5c <__adddf3+0x840>
81117bc0:	014007c4 	movi	r5,31
81117bc4:	29007016 	blt	r5,r4,81117d88 <__adddf3+0x86c>
81117bc8:	01400804 	movi	r5,32
81117bcc:	290bc83a 	sub	r5,r5,r4
81117bd0:	4154983a 	sll	r10,r8,r5
81117bd4:	890ed83a 	srl	r7,r17,r4
81117bd8:	894a983a 	sll	r5,r17,r5
81117bdc:	4108d83a 	srl	r4,r8,r4
81117be0:	51e2b03a 	or	r17,r10,r7
81117be4:	280ac03a 	cmpne	r5,r5,zero
81117be8:	8962b03a 	or	r17,r17,r5
81117bec:	89a3883a 	add	r17,r17,r6
81117bf0:	2253883a 	add	r9,r4,r9
81117bf4:	898d803a 	cmpltu	r6,r17,r6
81117bf8:	3251883a 	add	r8,r6,r9
81117bfc:	1021883a 	mov	r16,r2
81117c00:	003ee506 	br	81117798 <__reset+0xfb0f7798>
81117c04:	4984b03a 	or	r2,r9,r6
81117c08:	103e6326 	beq	r2,zero,81117598 <__reset+0xfb0f7598>
81117c0c:	8987c83a 	sub	r3,r17,r6
81117c10:	88c9803a 	cmpltu	r4,r17,r3
81117c14:	4245c83a 	sub	r2,r8,r9
81117c18:	1105c83a 	sub	r2,r2,r4
81117c1c:	1100202c 	andhi	r4,r2,128
81117c20:	203ebb26 	beq	r4,zero,81117710 <__reset+0xfb0f7710>
81117c24:	3463c83a 	sub	r17,r6,r17
81117c28:	4a07c83a 	sub	r3,r9,r8
81117c2c:	344d803a 	cmpltu	r6,r6,r17
81117c30:	1991c83a 	sub	r8,r3,r6
81117c34:	3825883a 	mov	r18,r7
81117c38:	003e5706 	br	81117598 <__reset+0xfb0f7598>
81117c3c:	4984b03a 	or	r2,r9,r6
81117c40:	10002e26 	beq	r2,zero,81117cfc <__adddf3+0x7e0>
81117c44:	4004d0fa 	srli	r2,r8,3
81117c48:	8822d0fa 	srli	r17,r17,3
81117c4c:	4010977a 	slli	r8,r8,29
81117c50:	10c0022c 	andhi	r3,r2,8
81117c54:	4462b03a 	or	r17,r8,r17
81117c58:	18000826 	beq	r3,zero,81117c7c <__adddf3+0x760>
81117c5c:	4808d0fa 	srli	r4,r9,3
81117c60:	20c0022c 	andhi	r3,r4,8
81117c64:	1800051e 	bne	r3,zero,81117c7c <__adddf3+0x760>
81117c68:	300cd0fa 	srli	r6,r6,3
81117c6c:	4806977a 	slli	r3,r9,29
81117c70:	2005883a 	mov	r2,r4
81117c74:	3825883a 	mov	r18,r7
81117c78:	19a2b03a 	or	r17,r3,r6
81117c7c:	8810d77a 	srli	r8,r17,29
81117c80:	100490fa 	slli	r2,r2,3
81117c84:	882290fa 	slli	r17,r17,3
81117c88:	0401ffc4 	movi	r16,2047
81117c8c:	4090b03a 	or	r8,r8,r2
81117c90:	003e4106 	br	81117598 <__reset+0xfb0f7598>
81117c94:	0141ffc4 	movi	r5,2047
81117c98:	117fc71e 	bne	r2,r5,81117bb8 <__reset+0xfb0f7bb8>
81117c9c:	4811883a 	mov	r8,r9
81117ca0:	3023883a 	mov	r17,r6
81117ca4:	1021883a 	mov	r16,r2
81117ca8:	003e3b06 	br	81117598 <__reset+0xfb0f7598>
81117cac:	10002f26 	beq	r2,zero,81117d6c <__adddf3+0x850>
81117cb0:	4984b03a 	or	r2,r9,r6
81117cb4:	10001126 	beq	r2,zero,81117cfc <__adddf3+0x7e0>
81117cb8:	4004d0fa 	srli	r2,r8,3
81117cbc:	8822d0fa 	srli	r17,r17,3
81117cc0:	4010977a 	slli	r8,r8,29
81117cc4:	10c0022c 	andhi	r3,r2,8
81117cc8:	4462b03a 	or	r17,r8,r17
81117ccc:	183feb26 	beq	r3,zero,81117c7c <__reset+0xfb0f7c7c>
81117cd0:	4808d0fa 	srli	r4,r9,3
81117cd4:	20c0022c 	andhi	r3,r4,8
81117cd8:	183fe81e 	bne	r3,zero,81117c7c <__reset+0xfb0f7c7c>
81117cdc:	300cd0fa 	srli	r6,r6,3
81117ce0:	4806977a 	slli	r3,r9,29
81117ce4:	2005883a 	mov	r2,r4
81117ce8:	19a2b03a 	or	r17,r3,r6
81117cec:	003fe306 	br	81117c7c <__reset+0xfb0f7c7c>
81117cf0:	0011883a 	mov	r8,zero
81117cf4:	0005883a 	mov	r2,zero
81117cf8:	003e3f06 	br	811175f8 <__reset+0xfb0f75f8>
81117cfc:	0401ffc4 	movi	r16,2047
81117d00:	003e2506 	br	81117598 <__reset+0xfb0f7598>
81117d04:	0013883a 	mov	r9,zero
81117d08:	003f8406 	br	81117b1c <__reset+0xfb0f7b1c>
81117d0c:	0005883a 	mov	r2,zero
81117d10:	0007883a 	mov	r3,zero
81117d14:	003e8906 	br	8111773c <__reset+0xfb0f773c>
81117d18:	197ff804 	addi	r5,r3,-32
81117d1c:	01000804 	movi	r4,32
81117d20:	414ad83a 	srl	r5,r8,r5
81117d24:	19002426 	beq	r3,r4,81117db8 <__adddf3+0x89c>
81117d28:	01001004 	movi	r4,64
81117d2c:	20c7c83a 	sub	r3,r4,r3
81117d30:	40c6983a 	sll	r3,r8,r3
81117d34:	1c46b03a 	or	r3,r3,r17
81117d38:	1806c03a 	cmpne	r3,r3,zero
81117d3c:	28e2b03a 	or	r17,r5,r3
81117d40:	0007883a 	mov	r3,zero
81117d44:	003f2306 	br	811179d4 <__reset+0xfb0f79d4>
81117d48:	0007883a 	mov	r3,zero
81117d4c:	5811883a 	mov	r8,r11
81117d50:	00bfffc4 	movi	r2,-1
81117d54:	0401ffc4 	movi	r16,2047
81117d58:	003e7806 	br	8111773c <__reset+0xfb0f773c>
81117d5c:	4462b03a 	or	r17,r8,r17
81117d60:	8822c03a 	cmpne	r17,r17,zero
81117d64:	0009883a 	mov	r4,zero
81117d68:	003fa006 	br	81117bec <__reset+0xfb0f7bec>
81117d6c:	4811883a 	mov	r8,r9
81117d70:	3023883a 	mov	r17,r6
81117d74:	0401ffc4 	movi	r16,2047
81117d78:	003e0706 	br	81117598 <__reset+0xfb0f7598>
81117d7c:	4811883a 	mov	r8,r9
81117d80:	3023883a 	mov	r17,r6
81117d84:	003e0406 	br	81117598 <__reset+0xfb0f7598>
81117d88:	21fff804 	addi	r7,r4,-32
81117d8c:	01400804 	movi	r5,32
81117d90:	41ced83a 	srl	r7,r8,r7
81117d94:	21400a26 	beq	r4,r5,81117dc0 <__adddf3+0x8a4>
81117d98:	01401004 	movi	r5,64
81117d9c:	2909c83a 	sub	r4,r5,r4
81117da0:	4108983a 	sll	r4,r8,r4
81117da4:	2448b03a 	or	r4,r4,r17
81117da8:	2008c03a 	cmpne	r4,r4,zero
81117dac:	3922b03a 	or	r17,r7,r4
81117db0:	0009883a 	mov	r4,zero
81117db4:	003f8d06 	br	81117bec <__reset+0xfb0f7bec>
81117db8:	0007883a 	mov	r3,zero
81117dbc:	003fdd06 	br	81117d34 <__reset+0xfb0f7d34>
81117dc0:	0009883a 	mov	r4,zero
81117dc4:	003ff706 	br	81117da4 <__reset+0xfb0f7da4>

81117dc8 <__divdf3>:
81117dc8:	defff204 	addi	sp,sp,-56
81117dcc:	dd400915 	stw	r21,36(sp)
81117dd0:	282ad53a 	srli	r21,r5,20
81117dd4:	dd000815 	stw	r20,32(sp)
81117dd8:	2828d7fa 	srli	r20,r5,31
81117ddc:	dc000415 	stw	r16,16(sp)
81117de0:	04000434 	movhi	r16,16
81117de4:	df000c15 	stw	fp,48(sp)
81117de8:	843fffc4 	addi	r16,r16,-1
81117dec:	dfc00d15 	stw	ra,52(sp)
81117df0:	ddc00b15 	stw	r23,44(sp)
81117df4:	dd800a15 	stw	r22,40(sp)
81117df8:	dcc00715 	stw	r19,28(sp)
81117dfc:	dc800615 	stw	r18,24(sp)
81117e00:	dc400515 	stw	r17,20(sp)
81117e04:	ad41ffcc 	andi	r21,r21,2047
81117e08:	2c20703a 	and	r16,r5,r16
81117e0c:	a7003fcc 	andi	fp,r20,255
81117e10:	a8006126 	beq	r21,zero,81117f98 <__divdf3+0x1d0>
81117e14:	0081ffc4 	movi	r2,2047
81117e18:	2025883a 	mov	r18,r4
81117e1c:	a8803726 	beq	r21,r2,81117efc <__divdf3+0x134>
81117e20:	80800434 	orhi	r2,r16,16
81117e24:	100490fa 	slli	r2,r2,3
81117e28:	2020d77a 	srli	r16,r4,29
81117e2c:	202490fa 	slli	r18,r4,3
81117e30:	ad7f0044 	addi	r21,r21,-1023
81117e34:	80a0b03a 	or	r16,r16,r2
81117e38:	0027883a 	mov	r19,zero
81117e3c:	0013883a 	mov	r9,zero
81117e40:	3804d53a 	srli	r2,r7,20
81117e44:	382cd7fa 	srli	r22,r7,31
81117e48:	04400434 	movhi	r17,16
81117e4c:	8c7fffc4 	addi	r17,r17,-1
81117e50:	1081ffcc 	andi	r2,r2,2047
81117e54:	3011883a 	mov	r8,r6
81117e58:	3c62703a 	and	r17,r7,r17
81117e5c:	b5c03fcc 	andi	r23,r22,255
81117e60:	10006c26 	beq	r2,zero,81118014 <__divdf3+0x24c>
81117e64:	00c1ffc4 	movi	r3,2047
81117e68:	10c06426 	beq	r2,r3,81117ffc <__divdf3+0x234>
81117e6c:	88c00434 	orhi	r3,r17,16
81117e70:	180690fa 	slli	r3,r3,3
81117e74:	3022d77a 	srli	r17,r6,29
81117e78:	301090fa 	slli	r8,r6,3
81117e7c:	10bf0044 	addi	r2,r2,-1023
81117e80:	88e2b03a 	or	r17,r17,r3
81117e84:	000f883a 	mov	r7,zero
81117e88:	a58cf03a 	xor	r6,r20,r22
81117e8c:	3cc8b03a 	or	r4,r7,r19
81117e90:	a8abc83a 	sub	r21,r21,r2
81117e94:	008003c4 	movi	r2,15
81117e98:	3007883a 	mov	r3,r6
81117e9c:	34c03fcc 	andi	r19,r6,255
81117ea0:	11009036 	bltu	r2,r4,811180e4 <__divdf3+0x31c>
81117ea4:	200890ba 	slli	r4,r4,2
81117ea8:	00a04474 	movhi	r2,33041
81117eac:	109faf04 	addi	r2,r2,32444
81117eb0:	2089883a 	add	r4,r4,r2
81117eb4:	20800017 	ldw	r2,0(r4)
81117eb8:	1000683a 	jmp	r2
81117ebc:	811180e4 	muli	r4,r16,17923
81117ec0:	81117f34 	orhi	r4,r16,17916
81117ec4:	811180d4 	ori	r4,r16,17923
81117ec8:	81117f28 	cmpgeui	r4,r16,17916
81117ecc:	811180d4 	ori	r4,r16,17923
81117ed0:	811180a8 	cmpgeui	r4,r16,17922
81117ed4:	811180d4 	ori	r4,r16,17923
81117ed8:	81117f28 	cmpgeui	r4,r16,17916
81117edc:	81117f34 	orhi	r4,r16,17916
81117ee0:	81117f34 	orhi	r4,r16,17916
81117ee4:	811180a8 	cmpgeui	r4,r16,17922
81117ee8:	81117f28 	cmpgeui	r4,r16,17916
81117eec:	81117f18 	cmpnei	r4,r16,17916
81117ef0:	81117f18 	cmpnei	r4,r16,17916
81117ef4:	81117f18 	cmpnei	r4,r16,17916
81117ef8:	811183c8 	cmpgei	r4,r16,17935
81117efc:	2404b03a 	or	r2,r4,r16
81117f00:	1000661e 	bne	r2,zero,8111809c <__divdf3+0x2d4>
81117f04:	04c00204 	movi	r19,8
81117f08:	0021883a 	mov	r16,zero
81117f0c:	0025883a 	mov	r18,zero
81117f10:	02400084 	movi	r9,2
81117f14:	003fca06 	br	81117e40 <__reset+0xfb0f7e40>
81117f18:	8023883a 	mov	r17,r16
81117f1c:	9011883a 	mov	r8,r18
81117f20:	e02f883a 	mov	r23,fp
81117f24:	480f883a 	mov	r7,r9
81117f28:	00800084 	movi	r2,2
81117f2c:	3881311e 	bne	r7,r2,811183f4 <__divdf3+0x62c>
81117f30:	b827883a 	mov	r19,r23
81117f34:	98c0004c 	andi	r3,r19,1
81117f38:	0081ffc4 	movi	r2,2047
81117f3c:	000b883a 	mov	r5,zero
81117f40:	0025883a 	mov	r18,zero
81117f44:	1004953a 	slli	r2,r2,20
81117f48:	18c03fcc 	andi	r3,r3,255
81117f4c:	04400434 	movhi	r17,16
81117f50:	8c7fffc4 	addi	r17,r17,-1
81117f54:	180697fa 	slli	r3,r3,31
81117f58:	2c4a703a 	and	r5,r5,r17
81117f5c:	288ab03a 	or	r5,r5,r2
81117f60:	28c6b03a 	or	r3,r5,r3
81117f64:	9005883a 	mov	r2,r18
81117f68:	dfc00d17 	ldw	ra,52(sp)
81117f6c:	df000c17 	ldw	fp,48(sp)
81117f70:	ddc00b17 	ldw	r23,44(sp)
81117f74:	dd800a17 	ldw	r22,40(sp)
81117f78:	dd400917 	ldw	r21,36(sp)
81117f7c:	dd000817 	ldw	r20,32(sp)
81117f80:	dcc00717 	ldw	r19,28(sp)
81117f84:	dc800617 	ldw	r18,24(sp)
81117f88:	dc400517 	ldw	r17,20(sp)
81117f8c:	dc000417 	ldw	r16,16(sp)
81117f90:	dec00e04 	addi	sp,sp,56
81117f94:	f800283a 	ret
81117f98:	2404b03a 	or	r2,r4,r16
81117f9c:	2027883a 	mov	r19,r4
81117fa0:	10003926 	beq	r2,zero,81118088 <__divdf3+0x2c0>
81117fa4:	80012e26 	beq	r16,zero,81118460 <__divdf3+0x698>
81117fa8:	8009883a 	mov	r4,r16
81117fac:	d9800315 	stw	r6,12(sp)
81117fb0:	d9c00215 	stw	r7,8(sp)
81117fb4:	110cd080 	call	8110cd08 <__clzsi2>
81117fb8:	d9800317 	ldw	r6,12(sp)
81117fbc:	d9c00217 	ldw	r7,8(sp)
81117fc0:	113ffd44 	addi	r4,r2,-11
81117fc4:	00c00704 	movi	r3,28
81117fc8:	19012116 	blt	r3,r4,81118450 <__divdf3+0x688>
81117fcc:	00c00744 	movi	r3,29
81117fd0:	147ffe04 	addi	r17,r2,-8
81117fd4:	1907c83a 	sub	r3,r3,r4
81117fd8:	8460983a 	sll	r16,r16,r17
81117fdc:	98c6d83a 	srl	r3,r19,r3
81117fe0:	9c64983a 	sll	r18,r19,r17
81117fe4:	1c20b03a 	or	r16,r3,r16
81117fe8:	1080fcc4 	addi	r2,r2,1011
81117fec:	00abc83a 	sub	r21,zero,r2
81117ff0:	0027883a 	mov	r19,zero
81117ff4:	0013883a 	mov	r9,zero
81117ff8:	003f9106 	br	81117e40 <__reset+0xfb0f7e40>
81117ffc:	3446b03a 	or	r3,r6,r17
81118000:	18001f1e 	bne	r3,zero,81118080 <__divdf3+0x2b8>
81118004:	0023883a 	mov	r17,zero
81118008:	0011883a 	mov	r8,zero
8111800c:	01c00084 	movi	r7,2
81118010:	003f9d06 	br	81117e88 <__reset+0xfb0f7e88>
81118014:	3446b03a 	or	r3,r6,r17
81118018:	18001526 	beq	r3,zero,81118070 <__divdf3+0x2a8>
8111801c:	88011b26 	beq	r17,zero,8111848c <__divdf3+0x6c4>
81118020:	8809883a 	mov	r4,r17
81118024:	d9800315 	stw	r6,12(sp)
81118028:	da400115 	stw	r9,4(sp)
8111802c:	110cd080 	call	8110cd08 <__clzsi2>
81118030:	d9800317 	ldw	r6,12(sp)
81118034:	da400117 	ldw	r9,4(sp)
81118038:	113ffd44 	addi	r4,r2,-11
8111803c:	00c00704 	movi	r3,28
81118040:	19010e16 	blt	r3,r4,8111847c <__divdf3+0x6b4>
81118044:	00c00744 	movi	r3,29
81118048:	123ffe04 	addi	r8,r2,-8
8111804c:	1907c83a 	sub	r3,r3,r4
81118050:	8a22983a 	sll	r17,r17,r8
81118054:	30c6d83a 	srl	r3,r6,r3
81118058:	3210983a 	sll	r8,r6,r8
8111805c:	1c62b03a 	or	r17,r3,r17
81118060:	1080fcc4 	addi	r2,r2,1011
81118064:	0085c83a 	sub	r2,zero,r2
81118068:	000f883a 	mov	r7,zero
8111806c:	003f8606 	br	81117e88 <__reset+0xfb0f7e88>
81118070:	0023883a 	mov	r17,zero
81118074:	0011883a 	mov	r8,zero
81118078:	01c00044 	movi	r7,1
8111807c:	003f8206 	br	81117e88 <__reset+0xfb0f7e88>
81118080:	01c000c4 	movi	r7,3
81118084:	003f8006 	br	81117e88 <__reset+0xfb0f7e88>
81118088:	04c00104 	movi	r19,4
8111808c:	0021883a 	mov	r16,zero
81118090:	0025883a 	mov	r18,zero
81118094:	02400044 	movi	r9,1
81118098:	003f6906 	br	81117e40 <__reset+0xfb0f7e40>
8111809c:	04c00304 	movi	r19,12
811180a0:	024000c4 	movi	r9,3
811180a4:	003f6606 	br	81117e40 <__reset+0xfb0f7e40>
811180a8:	01400434 	movhi	r5,16
811180ac:	0007883a 	mov	r3,zero
811180b0:	297fffc4 	addi	r5,r5,-1
811180b4:	04bfffc4 	movi	r18,-1
811180b8:	0081ffc4 	movi	r2,2047
811180bc:	003fa106 	br	81117f44 <__reset+0xfb0f7f44>
811180c0:	00c00044 	movi	r3,1
811180c4:	1887c83a 	sub	r3,r3,r2
811180c8:	01000e04 	movi	r4,56
811180cc:	20c1210e 	bge	r4,r3,81118554 <__divdf3+0x78c>
811180d0:	98c0004c 	andi	r3,r19,1
811180d4:	0005883a 	mov	r2,zero
811180d8:	000b883a 	mov	r5,zero
811180dc:	0025883a 	mov	r18,zero
811180e0:	003f9806 	br	81117f44 <__reset+0xfb0f7f44>
811180e4:	8c00fd36 	bltu	r17,r16,811184dc <__divdf3+0x714>
811180e8:	8440fb26 	beq	r16,r17,811184d8 <__divdf3+0x710>
811180ec:	8007883a 	mov	r3,r16
811180f0:	ad7fffc4 	addi	r21,r21,-1
811180f4:	0021883a 	mov	r16,zero
811180f8:	4004d63a 	srli	r2,r8,24
811180fc:	8822923a 	slli	r17,r17,8
81118100:	1809883a 	mov	r4,r3
81118104:	402c923a 	slli	r22,r8,8
81118108:	88b8b03a 	or	fp,r17,r2
8111810c:	e028d43a 	srli	r20,fp,16
81118110:	d8c00015 	stw	r3,0(sp)
81118114:	e5ffffcc 	andi	r23,fp,65535
81118118:	a00b883a 	mov	r5,r20
8111811c:	11174600 	call	81117460 <__udivsi3>
81118120:	d8c00017 	ldw	r3,0(sp)
81118124:	a00b883a 	mov	r5,r20
81118128:	d8800315 	stw	r2,12(sp)
8111812c:	1809883a 	mov	r4,r3
81118130:	11174c40 	call	811174c4 <__umodsi3>
81118134:	d9800317 	ldw	r6,12(sp)
81118138:	1006943a 	slli	r3,r2,16
8111813c:	9004d43a 	srli	r2,r18,16
81118140:	b9a3383a 	mul	r17,r23,r6
81118144:	10c4b03a 	or	r2,r2,r3
81118148:	1440062e 	bgeu	r2,r17,81118164 <__divdf3+0x39c>
8111814c:	1705883a 	add	r2,r2,fp
81118150:	30ffffc4 	addi	r3,r6,-1
81118154:	1700ee36 	bltu	r2,fp,81118510 <__divdf3+0x748>
81118158:	1440ed2e 	bgeu	r2,r17,81118510 <__divdf3+0x748>
8111815c:	31bfff84 	addi	r6,r6,-2
81118160:	1705883a 	add	r2,r2,fp
81118164:	1463c83a 	sub	r17,r2,r17
81118168:	a00b883a 	mov	r5,r20
8111816c:	8809883a 	mov	r4,r17
81118170:	d9800315 	stw	r6,12(sp)
81118174:	11174600 	call	81117460 <__udivsi3>
81118178:	a00b883a 	mov	r5,r20
8111817c:	8809883a 	mov	r4,r17
81118180:	d8800215 	stw	r2,8(sp)
81118184:	11174c40 	call	811174c4 <__umodsi3>
81118188:	d9c00217 	ldw	r7,8(sp)
8111818c:	1004943a 	slli	r2,r2,16
81118190:	94bfffcc 	andi	r18,r18,65535
81118194:	b9d1383a 	mul	r8,r23,r7
81118198:	90a4b03a 	or	r18,r18,r2
8111819c:	d9800317 	ldw	r6,12(sp)
811181a0:	9200062e 	bgeu	r18,r8,811181bc <__divdf3+0x3f4>
811181a4:	9725883a 	add	r18,r18,fp
811181a8:	38bfffc4 	addi	r2,r7,-1
811181ac:	9700d636 	bltu	r18,fp,81118508 <__divdf3+0x740>
811181b0:	9200d52e 	bgeu	r18,r8,81118508 <__divdf3+0x740>
811181b4:	39ffff84 	addi	r7,r7,-2
811181b8:	9725883a 	add	r18,r18,fp
811181bc:	3004943a 	slli	r2,r6,16
811181c0:	b012d43a 	srli	r9,r22,16
811181c4:	b1bfffcc 	andi	r6,r22,65535
811181c8:	11e2b03a 	or	r17,r2,r7
811181cc:	8806d43a 	srli	r3,r17,16
811181d0:	893fffcc 	andi	r4,r17,65535
811181d4:	218b383a 	mul	r5,r4,r6
811181d8:	30c5383a 	mul	r2,r6,r3
811181dc:	2249383a 	mul	r4,r4,r9
811181e0:	280ed43a 	srli	r7,r5,16
811181e4:	9225c83a 	sub	r18,r18,r8
811181e8:	2089883a 	add	r4,r4,r2
811181ec:	3909883a 	add	r4,r7,r4
811181f0:	1a47383a 	mul	r3,r3,r9
811181f4:	2080022e 	bgeu	r4,r2,81118200 <__divdf3+0x438>
811181f8:	00800074 	movhi	r2,1
811181fc:	1887883a 	add	r3,r3,r2
81118200:	2004d43a 	srli	r2,r4,16
81118204:	2008943a 	slli	r4,r4,16
81118208:	297fffcc 	andi	r5,r5,65535
8111820c:	10c7883a 	add	r3,r2,r3
81118210:	2149883a 	add	r4,r4,r5
81118214:	90c0a536 	bltu	r18,r3,811184ac <__divdf3+0x6e4>
81118218:	90c0bf26 	beq	r18,r3,81118518 <__divdf3+0x750>
8111821c:	90c7c83a 	sub	r3,r18,r3
81118220:	810fc83a 	sub	r7,r16,r4
81118224:	81e5803a 	cmpltu	r18,r16,r7
81118228:	1ca5c83a 	sub	r18,r3,r18
8111822c:	e480c126 	beq	fp,r18,81118534 <__divdf3+0x76c>
81118230:	a00b883a 	mov	r5,r20
81118234:	9009883a 	mov	r4,r18
81118238:	d9800315 	stw	r6,12(sp)
8111823c:	d9c00215 	stw	r7,8(sp)
81118240:	da400115 	stw	r9,4(sp)
81118244:	11174600 	call	81117460 <__udivsi3>
81118248:	a00b883a 	mov	r5,r20
8111824c:	9009883a 	mov	r4,r18
81118250:	d8800015 	stw	r2,0(sp)
81118254:	11174c40 	call	811174c4 <__umodsi3>
81118258:	d9c00217 	ldw	r7,8(sp)
8111825c:	da000017 	ldw	r8,0(sp)
81118260:	1006943a 	slli	r3,r2,16
81118264:	3804d43a 	srli	r2,r7,16
81118268:	ba21383a 	mul	r16,r23,r8
8111826c:	d9800317 	ldw	r6,12(sp)
81118270:	10c4b03a 	or	r2,r2,r3
81118274:	da400117 	ldw	r9,4(sp)
81118278:	1400062e 	bgeu	r2,r16,81118294 <__divdf3+0x4cc>
8111827c:	1705883a 	add	r2,r2,fp
81118280:	40ffffc4 	addi	r3,r8,-1
81118284:	1700ad36 	bltu	r2,fp,8111853c <__divdf3+0x774>
81118288:	1400ac2e 	bgeu	r2,r16,8111853c <__divdf3+0x774>
8111828c:	423fff84 	addi	r8,r8,-2
81118290:	1705883a 	add	r2,r2,fp
81118294:	1421c83a 	sub	r16,r2,r16
81118298:	a00b883a 	mov	r5,r20
8111829c:	8009883a 	mov	r4,r16
811182a0:	d9800315 	stw	r6,12(sp)
811182a4:	d9c00215 	stw	r7,8(sp)
811182a8:	da000015 	stw	r8,0(sp)
811182ac:	da400115 	stw	r9,4(sp)
811182b0:	11174600 	call	81117460 <__udivsi3>
811182b4:	8009883a 	mov	r4,r16
811182b8:	a00b883a 	mov	r5,r20
811182bc:	1025883a 	mov	r18,r2
811182c0:	11174c40 	call	811174c4 <__umodsi3>
811182c4:	d9c00217 	ldw	r7,8(sp)
811182c8:	1004943a 	slli	r2,r2,16
811182cc:	bcaf383a 	mul	r23,r23,r18
811182d0:	393fffcc 	andi	r4,r7,65535
811182d4:	2088b03a 	or	r4,r4,r2
811182d8:	d9800317 	ldw	r6,12(sp)
811182dc:	da000017 	ldw	r8,0(sp)
811182e0:	da400117 	ldw	r9,4(sp)
811182e4:	25c0062e 	bgeu	r4,r23,81118300 <__divdf3+0x538>
811182e8:	2709883a 	add	r4,r4,fp
811182ec:	90bfffc4 	addi	r2,r18,-1
811182f0:	27009436 	bltu	r4,fp,81118544 <__divdf3+0x77c>
811182f4:	25c0932e 	bgeu	r4,r23,81118544 <__divdf3+0x77c>
811182f8:	94bfff84 	addi	r18,r18,-2
811182fc:	2709883a 	add	r4,r4,fp
81118300:	4004943a 	slli	r2,r8,16
81118304:	25efc83a 	sub	r23,r4,r23
81118308:	1490b03a 	or	r8,r2,r18
8111830c:	4008d43a 	srli	r4,r8,16
81118310:	40ffffcc 	andi	r3,r8,65535
81118314:	30c5383a 	mul	r2,r6,r3
81118318:	1a47383a 	mul	r3,r3,r9
8111831c:	310d383a 	mul	r6,r6,r4
81118320:	100ad43a 	srli	r5,r2,16
81118324:	4913383a 	mul	r9,r9,r4
81118328:	1987883a 	add	r3,r3,r6
8111832c:	28c7883a 	add	r3,r5,r3
81118330:	1980022e 	bgeu	r3,r6,8111833c <__divdf3+0x574>
81118334:	01000074 	movhi	r4,1
81118338:	4913883a 	add	r9,r9,r4
8111833c:	1808d43a 	srli	r4,r3,16
81118340:	1806943a 	slli	r3,r3,16
81118344:	10bfffcc 	andi	r2,r2,65535
81118348:	2253883a 	add	r9,r4,r9
8111834c:	1887883a 	add	r3,r3,r2
81118350:	ba403836 	bltu	r23,r9,81118434 <__divdf3+0x66c>
81118354:	ba403626 	beq	r23,r9,81118430 <__divdf3+0x668>
81118358:	42000054 	ori	r8,r8,1
8111835c:	a880ffc4 	addi	r2,r21,1023
81118360:	00bf570e 	bge	zero,r2,811180c0 <__reset+0xfb0f80c0>
81118364:	40c001cc 	andi	r3,r8,7
81118368:	18000726 	beq	r3,zero,81118388 <__divdf3+0x5c0>
8111836c:	40c003cc 	andi	r3,r8,15
81118370:	01000104 	movi	r4,4
81118374:	19000426 	beq	r3,r4,81118388 <__divdf3+0x5c0>
81118378:	4107883a 	add	r3,r8,r4
8111837c:	1a11803a 	cmpltu	r8,r3,r8
81118380:	8a23883a 	add	r17,r17,r8
81118384:	1811883a 	mov	r8,r3
81118388:	88c0402c 	andhi	r3,r17,256
8111838c:	18000426 	beq	r3,zero,811183a0 <__divdf3+0x5d8>
81118390:	00ffc034 	movhi	r3,65280
81118394:	18ffffc4 	addi	r3,r3,-1
81118398:	a8810004 	addi	r2,r21,1024
8111839c:	88e2703a 	and	r17,r17,r3
811183a0:	00c1ff84 	movi	r3,2046
811183a4:	18bee316 	blt	r3,r2,81117f34 <__reset+0xfb0f7f34>
811183a8:	8824977a 	slli	r18,r17,29
811183ac:	4010d0fa 	srli	r8,r8,3
811183b0:	8822927a 	slli	r17,r17,9
811183b4:	1081ffcc 	andi	r2,r2,2047
811183b8:	9224b03a 	or	r18,r18,r8
811183bc:	880ad33a 	srli	r5,r17,12
811183c0:	98c0004c 	andi	r3,r19,1
811183c4:	003edf06 	br	81117f44 <__reset+0xfb0f7f44>
811183c8:	8080022c 	andhi	r2,r16,8
811183cc:	10001226 	beq	r2,zero,81118418 <__divdf3+0x650>
811183d0:	8880022c 	andhi	r2,r17,8
811183d4:	1000101e 	bne	r2,zero,81118418 <__divdf3+0x650>
811183d8:	00800434 	movhi	r2,16
811183dc:	89400234 	orhi	r5,r17,8
811183e0:	10bfffc4 	addi	r2,r2,-1
811183e4:	b007883a 	mov	r3,r22
811183e8:	288a703a 	and	r5,r5,r2
811183ec:	4025883a 	mov	r18,r8
811183f0:	003f3106 	br	811180b8 <__reset+0xfb0f80b8>
811183f4:	008000c4 	movi	r2,3
811183f8:	3880a626 	beq	r7,r2,81118694 <__divdf3+0x8cc>
811183fc:	00800044 	movi	r2,1
81118400:	3880521e 	bne	r7,r2,8111854c <__divdf3+0x784>
81118404:	b807883a 	mov	r3,r23
81118408:	0005883a 	mov	r2,zero
8111840c:	000b883a 	mov	r5,zero
81118410:	0025883a 	mov	r18,zero
81118414:	003ecb06 	br	81117f44 <__reset+0xfb0f7f44>
81118418:	00800434 	movhi	r2,16
8111841c:	81400234 	orhi	r5,r16,8
81118420:	10bfffc4 	addi	r2,r2,-1
81118424:	a007883a 	mov	r3,r20
81118428:	288a703a 	and	r5,r5,r2
8111842c:	003f2206 	br	811180b8 <__reset+0xfb0f80b8>
81118430:	183fca26 	beq	r3,zero,8111835c <__reset+0xfb0f835c>
81118434:	e5ef883a 	add	r23,fp,r23
81118438:	40bfffc4 	addi	r2,r8,-1
8111843c:	bf00392e 	bgeu	r23,fp,81118524 <__divdf3+0x75c>
81118440:	1011883a 	mov	r8,r2
81118444:	ba7fc41e 	bne	r23,r9,81118358 <__reset+0xfb0f8358>
81118448:	b0ffc31e 	bne	r22,r3,81118358 <__reset+0xfb0f8358>
8111844c:	003fc306 	br	8111835c <__reset+0xfb0f835c>
81118450:	143ff604 	addi	r16,r2,-40
81118454:	9c20983a 	sll	r16,r19,r16
81118458:	0025883a 	mov	r18,zero
8111845c:	003ee206 	br	81117fe8 <__reset+0xfb0f7fe8>
81118460:	d9800315 	stw	r6,12(sp)
81118464:	d9c00215 	stw	r7,8(sp)
81118468:	110cd080 	call	8110cd08 <__clzsi2>
8111846c:	10800804 	addi	r2,r2,32
81118470:	d9c00217 	ldw	r7,8(sp)
81118474:	d9800317 	ldw	r6,12(sp)
81118478:	003ed106 	br	81117fc0 <__reset+0xfb0f7fc0>
8111847c:	147ff604 	addi	r17,r2,-40
81118480:	3462983a 	sll	r17,r6,r17
81118484:	0011883a 	mov	r8,zero
81118488:	003ef506 	br	81118060 <__reset+0xfb0f8060>
8111848c:	3009883a 	mov	r4,r6
81118490:	d9800315 	stw	r6,12(sp)
81118494:	da400115 	stw	r9,4(sp)
81118498:	110cd080 	call	8110cd08 <__clzsi2>
8111849c:	10800804 	addi	r2,r2,32
811184a0:	da400117 	ldw	r9,4(sp)
811184a4:	d9800317 	ldw	r6,12(sp)
811184a8:	003ee306 	br	81118038 <__reset+0xfb0f8038>
811184ac:	85a1883a 	add	r16,r16,r22
811184b0:	8585803a 	cmpltu	r2,r16,r22
811184b4:	1705883a 	add	r2,r2,fp
811184b8:	14a5883a 	add	r18,r2,r18
811184bc:	88bfffc4 	addi	r2,r17,-1
811184c0:	e4800c2e 	bgeu	fp,r18,811184f4 <__divdf3+0x72c>
811184c4:	90c03e36 	bltu	r18,r3,811185c0 <__divdf3+0x7f8>
811184c8:	1c806926 	beq	r3,r18,81118670 <__divdf3+0x8a8>
811184cc:	90c7c83a 	sub	r3,r18,r3
811184d0:	1023883a 	mov	r17,r2
811184d4:	003f5206 	br	81118220 <__reset+0xfb0f8220>
811184d8:	923f0436 	bltu	r18,r8,811180ec <__reset+0xfb0f80ec>
811184dc:	800897fa 	slli	r4,r16,31
811184e0:	9004d07a 	srli	r2,r18,1
811184e4:	8006d07a 	srli	r3,r16,1
811184e8:	902097fa 	slli	r16,r18,31
811184ec:	20a4b03a 	or	r18,r4,r2
811184f0:	003f0106 	br	811180f8 <__reset+0xfb0f80f8>
811184f4:	e4bff51e 	bne	fp,r18,811184cc <__reset+0xfb0f84cc>
811184f8:	85bff22e 	bgeu	r16,r22,811184c4 <__reset+0xfb0f84c4>
811184fc:	e0c7c83a 	sub	r3,fp,r3
81118500:	1023883a 	mov	r17,r2
81118504:	003f4606 	br	81118220 <__reset+0xfb0f8220>
81118508:	100f883a 	mov	r7,r2
8111850c:	003f2b06 	br	811181bc <__reset+0xfb0f81bc>
81118510:	180d883a 	mov	r6,r3
81118514:	003f1306 	br	81118164 <__reset+0xfb0f8164>
81118518:	813fe436 	bltu	r16,r4,811184ac <__reset+0xfb0f84ac>
8111851c:	0007883a 	mov	r3,zero
81118520:	003f3f06 	br	81118220 <__reset+0xfb0f8220>
81118524:	ba402c36 	bltu	r23,r9,811185d8 <__divdf3+0x810>
81118528:	4dc05426 	beq	r9,r23,8111867c <__divdf3+0x8b4>
8111852c:	1011883a 	mov	r8,r2
81118530:	003f8906 	br	81118358 <__reset+0xfb0f8358>
81118534:	023fffc4 	movi	r8,-1
81118538:	003f8806 	br	8111835c <__reset+0xfb0f835c>
8111853c:	1811883a 	mov	r8,r3
81118540:	003f5406 	br	81118294 <__reset+0xfb0f8294>
81118544:	1025883a 	mov	r18,r2
81118548:	003f6d06 	br	81118300 <__reset+0xfb0f8300>
8111854c:	b827883a 	mov	r19,r23
81118550:	003f8206 	br	8111835c <__reset+0xfb0f835c>
81118554:	010007c4 	movi	r4,31
81118558:	20c02616 	blt	r4,r3,811185f4 <__divdf3+0x82c>
8111855c:	00800804 	movi	r2,32
81118560:	10c5c83a 	sub	r2,r2,r3
81118564:	888a983a 	sll	r5,r17,r2
81118568:	40c8d83a 	srl	r4,r8,r3
8111856c:	4084983a 	sll	r2,r8,r2
81118570:	88e2d83a 	srl	r17,r17,r3
81118574:	2906b03a 	or	r3,r5,r4
81118578:	1004c03a 	cmpne	r2,r2,zero
8111857c:	1886b03a 	or	r3,r3,r2
81118580:	188001cc 	andi	r2,r3,7
81118584:	10000726 	beq	r2,zero,811185a4 <__divdf3+0x7dc>
81118588:	188003cc 	andi	r2,r3,15
8111858c:	01000104 	movi	r4,4
81118590:	11000426 	beq	r2,r4,811185a4 <__divdf3+0x7dc>
81118594:	1805883a 	mov	r2,r3
81118598:	10c00104 	addi	r3,r2,4
8111859c:	1885803a 	cmpltu	r2,r3,r2
811185a0:	88a3883a 	add	r17,r17,r2
811185a4:	8880202c 	andhi	r2,r17,128
811185a8:	10002726 	beq	r2,zero,81118648 <__divdf3+0x880>
811185ac:	98c0004c 	andi	r3,r19,1
811185b0:	00800044 	movi	r2,1
811185b4:	000b883a 	mov	r5,zero
811185b8:	0025883a 	mov	r18,zero
811185bc:	003e6106 	br	81117f44 <__reset+0xfb0f7f44>
811185c0:	85a1883a 	add	r16,r16,r22
811185c4:	8585803a 	cmpltu	r2,r16,r22
811185c8:	1705883a 	add	r2,r2,fp
811185cc:	14a5883a 	add	r18,r2,r18
811185d0:	8c7fff84 	addi	r17,r17,-2
811185d4:	003f1106 	br	8111821c <__reset+0xfb0f821c>
811185d8:	b589883a 	add	r4,r22,r22
811185dc:	25ad803a 	cmpltu	r22,r4,r22
811185e0:	b739883a 	add	fp,r22,fp
811185e4:	40bfff84 	addi	r2,r8,-2
811185e8:	bf2f883a 	add	r23,r23,fp
811185ec:	202d883a 	mov	r22,r4
811185f0:	003f9306 	br	81118440 <__reset+0xfb0f8440>
811185f4:	013ff844 	movi	r4,-31
811185f8:	2085c83a 	sub	r2,r4,r2
811185fc:	8888d83a 	srl	r4,r17,r2
81118600:	00800804 	movi	r2,32
81118604:	18802126 	beq	r3,r2,8111868c <__divdf3+0x8c4>
81118608:	00801004 	movi	r2,64
8111860c:	10c5c83a 	sub	r2,r2,r3
81118610:	8884983a 	sll	r2,r17,r2
81118614:	1204b03a 	or	r2,r2,r8
81118618:	1004c03a 	cmpne	r2,r2,zero
8111861c:	2084b03a 	or	r2,r4,r2
81118620:	144001cc 	andi	r17,r2,7
81118624:	88000d1e 	bne	r17,zero,8111865c <__divdf3+0x894>
81118628:	000b883a 	mov	r5,zero
8111862c:	1024d0fa 	srli	r18,r2,3
81118630:	98c0004c 	andi	r3,r19,1
81118634:	0005883a 	mov	r2,zero
81118638:	9464b03a 	or	r18,r18,r17
8111863c:	003e4106 	br	81117f44 <__reset+0xfb0f7f44>
81118640:	1007883a 	mov	r3,r2
81118644:	0023883a 	mov	r17,zero
81118648:	880a927a 	slli	r5,r17,9
8111864c:	1805883a 	mov	r2,r3
81118650:	8822977a 	slli	r17,r17,29
81118654:	280ad33a 	srli	r5,r5,12
81118658:	003ff406 	br	8111862c <__reset+0xfb0f862c>
8111865c:	10c003cc 	andi	r3,r2,15
81118660:	01000104 	movi	r4,4
81118664:	193ff626 	beq	r3,r4,81118640 <__reset+0xfb0f8640>
81118668:	0023883a 	mov	r17,zero
8111866c:	003fca06 	br	81118598 <__reset+0xfb0f8598>
81118670:	813fd336 	bltu	r16,r4,811185c0 <__reset+0xfb0f85c0>
81118674:	1023883a 	mov	r17,r2
81118678:	003fa806 	br	8111851c <__reset+0xfb0f851c>
8111867c:	b0ffd636 	bltu	r22,r3,811185d8 <__reset+0xfb0f85d8>
81118680:	1011883a 	mov	r8,r2
81118684:	b0ff341e 	bne	r22,r3,81118358 <__reset+0xfb0f8358>
81118688:	003f3406 	br	8111835c <__reset+0xfb0f835c>
8111868c:	0005883a 	mov	r2,zero
81118690:	003fe006 	br	81118614 <__reset+0xfb0f8614>
81118694:	00800434 	movhi	r2,16
81118698:	89400234 	orhi	r5,r17,8
8111869c:	10bfffc4 	addi	r2,r2,-1
811186a0:	b807883a 	mov	r3,r23
811186a4:	288a703a 	and	r5,r5,r2
811186a8:	4025883a 	mov	r18,r8
811186ac:	003e8206 	br	811180b8 <__reset+0xfb0f80b8>

811186b0 <__eqdf2>:
811186b0:	2804d53a 	srli	r2,r5,20
811186b4:	3806d53a 	srli	r3,r7,20
811186b8:	02000434 	movhi	r8,16
811186bc:	423fffc4 	addi	r8,r8,-1
811186c0:	1081ffcc 	andi	r2,r2,2047
811186c4:	0281ffc4 	movi	r10,2047
811186c8:	2a12703a 	and	r9,r5,r8
811186cc:	18c1ffcc 	andi	r3,r3,2047
811186d0:	3a10703a 	and	r8,r7,r8
811186d4:	280ad7fa 	srli	r5,r5,31
811186d8:	380ed7fa 	srli	r7,r7,31
811186dc:	12801026 	beq	r2,r10,81118720 <__eqdf2+0x70>
811186e0:	0281ffc4 	movi	r10,2047
811186e4:	1a800a26 	beq	r3,r10,81118710 <__eqdf2+0x60>
811186e8:	10c00226 	beq	r2,r3,811186f4 <__eqdf2+0x44>
811186ec:	00800044 	movi	r2,1
811186f0:	f800283a 	ret
811186f4:	4a3ffd1e 	bne	r9,r8,811186ec <__reset+0xfb0f86ec>
811186f8:	21bffc1e 	bne	r4,r6,811186ec <__reset+0xfb0f86ec>
811186fc:	29c00c26 	beq	r5,r7,81118730 <__eqdf2+0x80>
81118700:	103ffa1e 	bne	r2,zero,811186ec <__reset+0xfb0f86ec>
81118704:	2244b03a 	or	r2,r4,r9
81118708:	1004c03a 	cmpne	r2,r2,zero
8111870c:	f800283a 	ret
81118710:	3214b03a 	or	r10,r6,r8
81118714:	503ff426 	beq	r10,zero,811186e8 <__reset+0xfb0f86e8>
81118718:	00800044 	movi	r2,1
8111871c:	f800283a 	ret
81118720:	2254b03a 	or	r10,r4,r9
81118724:	503fee26 	beq	r10,zero,811186e0 <__reset+0xfb0f86e0>
81118728:	00800044 	movi	r2,1
8111872c:	f800283a 	ret
81118730:	0005883a 	mov	r2,zero
81118734:	f800283a 	ret

81118738 <__gedf2>:
81118738:	2804d53a 	srli	r2,r5,20
8111873c:	3806d53a 	srli	r3,r7,20
81118740:	02000434 	movhi	r8,16
81118744:	423fffc4 	addi	r8,r8,-1
81118748:	1081ffcc 	andi	r2,r2,2047
8111874c:	0241ffc4 	movi	r9,2047
81118750:	2a14703a 	and	r10,r5,r8
81118754:	18c1ffcc 	andi	r3,r3,2047
81118758:	3a10703a 	and	r8,r7,r8
8111875c:	280ad7fa 	srli	r5,r5,31
81118760:	380ed7fa 	srli	r7,r7,31
81118764:	12401d26 	beq	r2,r9,811187dc <__gedf2+0xa4>
81118768:	0241ffc4 	movi	r9,2047
8111876c:	1a401226 	beq	r3,r9,811187b8 <__gedf2+0x80>
81118770:	1000081e 	bne	r2,zero,81118794 <__gedf2+0x5c>
81118774:	2296b03a 	or	r11,r4,r10
81118778:	5813003a 	cmpeq	r9,r11,zero
8111877c:	1800091e 	bne	r3,zero,811187a4 <__gedf2+0x6c>
81118780:	3218b03a 	or	r12,r6,r8
81118784:	6000071e 	bne	r12,zero,811187a4 <__gedf2+0x6c>
81118788:	0005883a 	mov	r2,zero
8111878c:	5800101e 	bne	r11,zero,811187d0 <__gedf2+0x98>
81118790:	f800283a 	ret
81118794:	18000c1e 	bne	r3,zero,811187c8 <__gedf2+0x90>
81118798:	3212b03a 	or	r9,r6,r8
8111879c:	48000c26 	beq	r9,zero,811187d0 <__gedf2+0x98>
811187a0:	0013883a 	mov	r9,zero
811187a4:	39c03fcc 	andi	r7,r7,255
811187a8:	48000826 	beq	r9,zero,811187cc <__gedf2+0x94>
811187ac:	38000926 	beq	r7,zero,811187d4 <__gedf2+0x9c>
811187b0:	00800044 	movi	r2,1
811187b4:	f800283a 	ret
811187b8:	3212b03a 	or	r9,r6,r8
811187bc:	483fec26 	beq	r9,zero,81118770 <__reset+0xfb0f8770>
811187c0:	00bfff84 	movi	r2,-2
811187c4:	f800283a 	ret
811187c8:	39c03fcc 	andi	r7,r7,255
811187cc:	29c00626 	beq	r5,r7,811187e8 <__gedf2+0xb0>
811187d0:	283ff726 	beq	r5,zero,811187b0 <__reset+0xfb0f87b0>
811187d4:	00bfffc4 	movi	r2,-1
811187d8:	f800283a 	ret
811187dc:	2292b03a 	or	r9,r4,r10
811187e0:	483fe126 	beq	r9,zero,81118768 <__reset+0xfb0f8768>
811187e4:	003ff606 	br	811187c0 <__reset+0xfb0f87c0>
811187e8:	18bff916 	blt	r3,r2,811187d0 <__reset+0xfb0f87d0>
811187ec:	10c00316 	blt	r2,r3,811187fc <__gedf2+0xc4>
811187f0:	42bff736 	bltu	r8,r10,811187d0 <__reset+0xfb0f87d0>
811187f4:	52000326 	beq	r10,r8,81118804 <__gedf2+0xcc>
811187f8:	5200042e 	bgeu	r10,r8,8111880c <__gedf2+0xd4>
811187fc:	283fec1e 	bne	r5,zero,811187b0 <__reset+0xfb0f87b0>
81118800:	003ff406 	br	811187d4 <__reset+0xfb0f87d4>
81118804:	313ff236 	bltu	r6,r4,811187d0 <__reset+0xfb0f87d0>
81118808:	21bffc36 	bltu	r4,r6,811187fc <__reset+0xfb0f87fc>
8111880c:	0005883a 	mov	r2,zero
81118810:	f800283a 	ret

81118814 <__ledf2>:
81118814:	2804d53a 	srli	r2,r5,20
81118818:	3810d53a 	srli	r8,r7,20
8111881c:	00c00434 	movhi	r3,16
81118820:	18ffffc4 	addi	r3,r3,-1
81118824:	1081ffcc 	andi	r2,r2,2047
81118828:	0241ffc4 	movi	r9,2047
8111882c:	28d4703a 	and	r10,r5,r3
81118830:	4201ffcc 	andi	r8,r8,2047
81118834:	38c6703a 	and	r3,r7,r3
81118838:	280ad7fa 	srli	r5,r5,31
8111883c:	380ed7fa 	srli	r7,r7,31
81118840:	12401f26 	beq	r2,r9,811188c0 <__ledf2+0xac>
81118844:	0241ffc4 	movi	r9,2047
81118848:	42401426 	beq	r8,r9,8111889c <__ledf2+0x88>
8111884c:	1000091e 	bne	r2,zero,81118874 <__ledf2+0x60>
81118850:	2296b03a 	or	r11,r4,r10
81118854:	5813003a 	cmpeq	r9,r11,zero
81118858:	29403fcc 	andi	r5,r5,255
8111885c:	40000a1e 	bne	r8,zero,81118888 <__ledf2+0x74>
81118860:	30d8b03a 	or	r12,r6,r3
81118864:	6000081e 	bne	r12,zero,81118888 <__ledf2+0x74>
81118868:	0005883a 	mov	r2,zero
8111886c:	5800111e 	bne	r11,zero,811188b4 <__ledf2+0xa0>
81118870:	f800283a 	ret
81118874:	29403fcc 	andi	r5,r5,255
81118878:	40000c1e 	bne	r8,zero,811188ac <__ledf2+0x98>
8111887c:	30d2b03a 	or	r9,r6,r3
81118880:	48000c26 	beq	r9,zero,811188b4 <__ledf2+0xa0>
81118884:	0013883a 	mov	r9,zero
81118888:	39c03fcc 	andi	r7,r7,255
8111888c:	48000826 	beq	r9,zero,811188b0 <__ledf2+0x9c>
81118890:	38001126 	beq	r7,zero,811188d8 <__ledf2+0xc4>
81118894:	00800044 	movi	r2,1
81118898:	f800283a 	ret
8111889c:	30d2b03a 	or	r9,r6,r3
811188a0:	483fea26 	beq	r9,zero,8111884c <__reset+0xfb0f884c>
811188a4:	00800084 	movi	r2,2
811188a8:	f800283a 	ret
811188ac:	39c03fcc 	andi	r7,r7,255
811188b0:	39400726 	beq	r7,r5,811188d0 <__ledf2+0xbc>
811188b4:	2800081e 	bne	r5,zero,811188d8 <__ledf2+0xc4>
811188b8:	00800044 	movi	r2,1
811188bc:	f800283a 	ret
811188c0:	2292b03a 	or	r9,r4,r10
811188c4:	483fdf26 	beq	r9,zero,81118844 <__reset+0xfb0f8844>
811188c8:	00800084 	movi	r2,2
811188cc:	f800283a 	ret
811188d0:	4080030e 	bge	r8,r2,811188e0 <__ledf2+0xcc>
811188d4:	383fef26 	beq	r7,zero,81118894 <__reset+0xfb0f8894>
811188d8:	00bfffc4 	movi	r2,-1
811188dc:	f800283a 	ret
811188e0:	123feb16 	blt	r2,r8,81118890 <__reset+0xfb0f8890>
811188e4:	1abff336 	bltu	r3,r10,811188b4 <__reset+0xfb0f88b4>
811188e8:	50c00326 	beq	r10,r3,811188f8 <__ledf2+0xe4>
811188ec:	50c0042e 	bgeu	r10,r3,81118900 <__ledf2+0xec>
811188f0:	283fe81e 	bne	r5,zero,81118894 <__reset+0xfb0f8894>
811188f4:	003ff806 	br	811188d8 <__reset+0xfb0f88d8>
811188f8:	313fee36 	bltu	r6,r4,811188b4 <__reset+0xfb0f88b4>
811188fc:	21bffc36 	bltu	r4,r6,811188f0 <__reset+0xfb0f88f0>
81118900:	0005883a 	mov	r2,zero
81118904:	f800283a 	ret

81118908 <__subdf3>:
81118908:	02000434 	movhi	r8,16
8111890c:	423fffc4 	addi	r8,r8,-1
81118910:	defffb04 	addi	sp,sp,-20
81118914:	2a14703a 	and	r10,r5,r8
81118918:	3812d53a 	srli	r9,r7,20
8111891c:	3a10703a 	and	r8,r7,r8
81118920:	2006d77a 	srli	r3,r4,29
81118924:	3004d77a 	srli	r2,r6,29
81118928:	dc000015 	stw	r16,0(sp)
8111892c:	501490fa 	slli	r10,r10,3
81118930:	2820d53a 	srli	r16,r5,20
81118934:	401090fa 	slli	r8,r8,3
81118938:	dc800215 	stw	r18,8(sp)
8111893c:	dc400115 	stw	r17,4(sp)
81118940:	dfc00415 	stw	ra,16(sp)
81118944:	202290fa 	slli	r17,r4,3
81118948:	dcc00315 	stw	r19,12(sp)
8111894c:	4a41ffcc 	andi	r9,r9,2047
81118950:	0101ffc4 	movi	r4,2047
81118954:	2824d7fa 	srli	r18,r5,31
81118958:	8401ffcc 	andi	r16,r16,2047
8111895c:	50c6b03a 	or	r3,r10,r3
81118960:	380ed7fa 	srli	r7,r7,31
81118964:	408ab03a 	or	r5,r8,r2
81118968:	300c90fa 	slli	r6,r6,3
8111896c:	49009626 	beq	r9,r4,81118bc8 <__subdf3+0x2c0>
81118970:	39c0005c 	xori	r7,r7,1
81118974:	8245c83a 	sub	r2,r16,r9
81118978:	3c807426 	beq	r7,r18,81118b4c <__subdf3+0x244>
8111897c:	0080af0e 	bge	zero,r2,81118c3c <__subdf3+0x334>
81118980:	48002a1e 	bne	r9,zero,81118a2c <__subdf3+0x124>
81118984:	2988b03a 	or	r4,r5,r6
81118988:	20009a1e 	bne	r4,zero,81118bf4 <__subdf3+0x2ec>
8111898c:	888001cc 	andi	r2,r17,7
81118990:	10000726 	beq	r2,zero,811189b0 <__subdf3+0xa8>
81118994:	888003cc 	andi	r2,r17,15
81118998:	01000104 	movi	r4,4
8111899c:	11000426 	beq	r2,r4,811189b0 <__subdf3+0xa8>
811189a0:	890b883a 	add	r5,r17,r4
811189a4:	2c63803a 	cmpltu	r17,r5,r17
811189a8:	1c47883a 	add	r3,r3,r17
811189ac:	2823883a 	mov	r17,r5
811189b0:	1880202c 	andhi	r2,r3,128
811189b4:	10005926 	beq	r2,zero,81118b1c <__subdf3+0x214>
811189b8:	84000044 	addi	r16,r16,1
811189bc:	0081ffc4 	movi	r2,2047
811189c0:	8080be26 	beq	r16,r2,81118cbc <__subdf3+0x3b4>
811189c4:	017fe034 	movhi	r5,65408
811189c8:	297fffc4 	addi	r5,r5,-1
811189cc:	1946703a 	and	r3,r3,r5
811189d0:	1804977a 	slli	r2,r3,29
811189d4:	1806927a 	slli	r3,r3,9
811189d8:	8822d0fa 	srli	r17,r17,3
811189dc:	8401ffcc 	andi	r16,r16,2047
811189e0:	180ad33a 	srli	r5,r3,12
811189e4:	9100004c 	andi	r4,r18,1
811189e8:	1444b03a 	or	r2,r2,r17
811189ec:	80c1ffcc 	andi	r3,r16,2047
811189f0:	1820953a 	slli	r16,r3,20
811189f4:	20c03fcc 	andi	r3,r4,255
811189f8:	180897fa 	slli	r4,r3,31
811189fc:	00c00434 	movhi	r3,16
81118a00:	18ffffc4 	addi	r3,r3,-1
81118a04:	28c6703a 	and	r3,r5,r3
81118a08:	1c06b03a 	or	r3,r3,r16
81118a0c:	1906b03a 	or	r3,r3,r4
81118a10:	dfc00417 	ldw	ra,16(sp)
81118a14:	dcc00317 	ldw	r19,12(sp)
81118a18:	dc800217 	ldw	r18,8(sp)
81118a1c:	dc400117 	ldw	r17,4(sp)
81118a20:	dc000017 	ldw	r16,0(sp)
81118a24:	dec00504 	addi	sp,sp,20
81118a28:	f800283a 	ret
81118a2c:	0101ffc4 	movi	r4,2047
81118a30:	813fd626 	beq	r16,r4,8111898c <__reset+0xfb0f898c>
81118a34:	29402034 	orhi	r5,r5,128
81118a38:	01000e04 	movi	r4,56
81118a3c:	2080a316 	blt	r4,r2,81118ccc <__subdf3+0x3c4>
81118a40:	010007c4 	movi	r4,31
81118a44:	2080c616 	blt	r4,r2,81118d60 <__subdf3+0x458>
81118a48:	01000804 	movi	r4,32
81118a4c:	2089c83a 	sub	r4,r4,r2
81118a50:	2910983a 	sll	r8,r5,r4
81118a54:	308ed83a 	srl	r7,r6,r2
81118a58:	3108983a 	sll	r4,r6,r4
81118a5c:	2884d83a 	srl	r2,r5,r2
81118a60:	41ccb03a 	or	r6,r8,r7
81118a64:	2008c03a 	cmpne	r4,r4,zero
81118a68:	310cb03a 	or	r6,r6,r4
81118a6c:	898dc83a 	sub	r6,r17,r6
81118a70:	89a3803a 	cmpltu	r17,r17,r6
81118a74:	1887c83a 	sub	r3,r3,r2
81118a78:	1c47c83a 	sub	r3,r3,r17
81118a7c:	3023883a 	mov	r17,r6
81118a80:	1880202c 	andhi	r2,r3,128
81118a84:	10002326 	beq	r2,zero,81118b14 <__subdf3+0x20c>
81118a88:	04c02034 	movhi	r19,128
81118a8c:	9cffffc4 	addi	r19,r19,-1
81118a90:	1ce6703a 	and	r19,r3,r19
81118a94:	98007a26 	beq	r19,zero,81118c80 <__subdf3+0x378>
81118a98:	9809883a 	mov	r4,r19
81118a9c:	110cd080 	call	8110cd08 <__clzsi2>
81118aa0:	113ffe04 	addi	r4,r2,-8
81118aa4:	00c007c4 	movi	r3,31
81118aa8:	19007b16 	blt	r3,r4,81118c98 <__subdf3+0x390>
81118aac:	00800804 	movi	r2,32
81118ab0:	1105c83a 	sub	r2,r2,r4
81118ab4:	8884d83a 	srl	r2,r17,r2
81118ab8:	9906983a 	sll	r3,r19,r4
81118abc:	8922983a 	sll	r17,r17,r4
81118ac0:	10c4b03a 	or	r2,r2,r3
81118ac4:	24007816 	blt	r4,r16,81118ca8 <__subdf3+0x3a0>
81118ac8:	2421c83a 	sub	r16,r4,r16
81118acc:	80c00044 	addi	r3,r16,1
81118ad0:	010007c4 	movi	r4,31
81118ad4:	20c09516 	blt	r4,r3,81118d2c <__subdf3+0x424>
81118ad8:	01400804 	movi	r5,32
81118adc:	28cbc83a 	sub	r5,r5,r3
81118ae0:	88c8d83a 	srl	r4,r17,r3
81118ae4:	8962983a 	sll	r17,r17,r5
81118ae8:	114a983a 	sll	r5,r2,r5
81118aec:	10c6d83a 	srl	r3,r2,r3
81118af0:	8804c03a 	cmpne	r2,r17,zero
81118af4:	290ab03a 	or	r5,r5,r4
81118af8:	28a2b03a 	or	r17,r5,r2
81118afc:	0021883a 	mov	r16,zero
81118b00:	003fa206 	br	8111898c <__reset+0xfb0f898c>
81118b04:	2090b03a 	or	r8,r4,r2
81118b08:	40018e26 	beq	r8,zero,81119144 <__subdf3+0x83c>
81118b0c:	1007883a 	mov	r3,r2
81118b10:	2023883a 	mov	r17,r4
81118b14:	888001cc 	andi	r2,r17,7
81118b18:	103f9e1e 	bne	r2,zero,81118994 <__reset+0xfb0f8994>
81118b1c:	1804977a 	slli	r2,r3,29
81118b20:	8822d0fa 	srli	r17,r17,3
81118b24:	1810d0fa 	srli	r8,r3,3
81118b28:	9100004c 	andi	r4,r18,1
81118b2c:	1444b03a 	or	r2,r2,r17
81118b30:	00c1ffc4 	movi	r3,2047
81118b34:	80c02826 	beq	r16,r3,81118bd8 <__subdf3+0x2d0>
81118b38:	01400434 	movhi	r5,16
81118b3c:	297fffc4 	addi	r5,r5,-1
81118b40:	80e0703a 	and	r16,r16,r3
81118b44:	414a703a 	and	r5,r8,r5
81118b48:	003fa806 	br	811189ec <__reset+0xfb0f89ec>
81118b4c:	0080630e 	bge	zero,r2,81118cdc <__subdf3+0x3d4>
81118b50:	48003026 	beq	r9,zero,81118c14 <__subdf3+0x30c>
81118b54:	0101ffc4 	movi	r4,2047
81118b58:	813f8c26 	beq	r16,r4,8111898c <__reset+0xfb0f898c>
81118b5c:	29402034 	orhi	r5,r5,128
81118b60:	01000e04 	movi	r4,56
81118b64:	2080a90e 	bge	r4,r2,81118e0c <__subdf3+0x504>
81118b68:	298cb03a 	or	r6,r5,r6
81118b6c:	3012c03a 	cmpne	r9,r6,zero
81118b70:	0005883a 	mov	r2,zero
81118b74:	4c53883a 	add	r9,r9,r17
81118b78:	4c63803a 	cmpltu	r17,r9,r17
81118b7c:	10c7883a 	add	r3,r2,r3
81118b80:	88c7883a 	add	r3,r17,r3
81118b84:	4823883a 	mov	r17,r9
81118b88:	1880202c 	andhi	r2,r3,128
81118b8c:	1000d026 	beq	r2,zero,81118ed0 <__subdf3+0x5c8>
81118b90:	84000044 	addi	r16,r16,1
81118b94:	0081ffc4 	movi	r2,2047
81118b98:	8080fe26 	beq	r16,r2,81118f94 <__subdf3+0x68c>
81118b9c:	00bfe034 	movhi	r2,65408
81118ba0:	10bfffc4 	addi	r2,r2,-1
81118ba4:	1886703a 	and	r3,r3,r2
81118ba8:	880ad07a 	srli	r5,r17,1
81118bac:	180497fa 	slli	r2,r3,31
81118bb0:	8900004c 	andi	r4,r17,1
81118bb4:	2922b03a 	or	r17,r5,r4
81118bb8:	1806d07a 	srli	r3,r3,1
81118bbc:	1462b03a 	or	r17,r2,r17
81118bc0:	3825883a 	mov	r18,r7
81118bc4:	003f7106 	br	8111898c <__reset+0xfb0f898c>
81118bc8:	2984b03a 	or	r2,r5,r6
81118bcc:	103f6826 	beq	r2,zero,81118970 <__reset+0xfb0f8970>
81118bd0:	39c03fcc 	andi	r7,r7,255
81118bd4:	003f6706 	br	81118974 <__reset+0xfb0f8974>
81118bd8:	4086b03a 	or	r3,r8,r2
81118bdc:	18015226 	beq	r3,zero,81119128 <__subdf3+0x820>
81118be0:	00c00434 	movhi	r3,16
81118be4:	41400234 	orhi	r5,r8,8
81118be8:	18ffffc4 	addi	r3,r3,-1
81118bec:	28ca703a 	and	r5,r5,r3
81118bf0:	003f7e06 	br	811189ec <__reset+0xfb0f89ec>
81118bf4:	10bfffc4 	addi	r2,r2,-1
81118bf8:	1000491e 	bne	r2,zero,81118d20 <__subdf3+0x418>
81118bfc:	898fc83a 	sub	r7,r17,r6
81118c00:	89e3803a 	cmpltu	r17,r17,r7
81118c04:	1947c83a 	sub	r3,r3,r5
81118c08:	1c47c83a 	sub	r3,r3,r17
81118c0c:	3823883a 	mov	r17,r7
81118c10:	003f9b06 	br	81118a80 <__reset+0xfb0f8a80>
81118c14:	2988b03a 	or	r4,r5,r6
81118c18:	203f5c26 	beq	r4,zero,8111898c <__reset+0xfb0f898c>
81118c1c:	10bfffc4 	addi	r2,r2,-1
81118c20:	1000931e 	bne	r2,zero,81118e70 <__subdf3+0x568>
81118c24:	898d883a 	add	r6,r17,r6
81118c28:	3463803a 	cmpltu	r17,r6,r17
81118c2c:	1947883a 	add	r3,r3,r5
81118c30:	88c7883a 	add	r3,r17,r3
81118c34:	3023883a 	mov	r17,r6
81118c38:	003fd306 	br	81118b88 <__reset+0xfb0f8b88>
81118c3c:	1000541e 	bne	r2,zero,81118d90 <__subdf3+0x488>
81118c40:	80800044 	addi	r2,r16,1
81118c44:	1081ffcc 	andi	r2,r2,2047
81118c48:	01000044 	movi	r4,1
81118c4c:	2080a20e 	bge	r4,r2,81118ed8 <__subdf3+0x5d0>
81118c50:	8989c83a 	sub	r4,r17,r6
81118c54:	8905803a 	cmpltu	r2,r17,r4
81118c58:	1967c83a 	sub	r19,r3,r5
81118c5c:	98a7c83a 	sub	r19,r19,r2
81118c60:	9880202c 	andhi	r2,r19,128
81118c64:	10006326 	beq	r2,zero,81118df4 <__subdf3+0x4ec>
81118c68:	3463c83a 	sub	r17,r6,r17
81118c6c:	28c7c83a 	sub	r3,r5,r3
81118c70:	344d803a 	cmpltu	r6,r6,r17
81118c74:	19a7c83a 	sub	r19,r3,r6
81118c78:	3825883a 	mov	r18,r7
81118c7c:	983f861e 	bne	r19,zero,81118a98 <__reset+0xfb0f8a98>
81118c80:	8809883a 	mov	r4,r17
81118c84:	110cd080 	call	8110cd08 <__clzsi2>
81118c88:	10800804 	addi	r2,r2,32
81118c8c:	113ffe04 	addi	r4,r2,-8
81118c90:	00c007c4 	movi	r3,31
81118c94:	193f850e 	bge	r3,r4,81118aac <__reset+0xfb0f8aac>
81118c98:	10bff604 	addi	r2,r2,-40
81118c9c:	8884983a 	sll	r2,r17,r2
81118ca0:	0023883a 	mov	r17,zero
81118ca4:	243f880e 	bge	r4,r16,81118ac8 <__reset+0xfb0f8ac8>
81118ca8:	00ffe034 	movhi	r3,65408
81118cac:	18ffffc4 	addi	r3,r3,-1
81118cb0:	8121c83a 	sub	r16,r16,r4
81118cb4:	10c6703a 	and	r3,r2,r3
81118cb8:	003f3406 	br	8111898c <__reset+0xfb0f898c>
81118cbc:	9100004c 	andi	r4,r18,1
81118cc0:	000b883a 	mov	r5,zero
81118cc4:	0005883a 	mov	r2,zero
81118cc8:	003f4806 	br	811189ec <__reset+0xfb0f89ec>
81118ccc:	298cb03a 	or	r6,r5,r6
81118cd0:	300cc03a 	cmpne	r6,r6,zero
81118cd4:	0005883a 	mov	r2,zero
81118cd8:	003f6406 	br	81118a6c <__reset+0xfb0f8a6c>
81118cdc:	10009a1e 	bne	r2,zero,81118f48 <__subdf3+0x640>
81118ce0:	82400044 	addi	r9,r16,1
81118ce4:	4881ffcc 	andi	r2,r9,2047
81118ce8:	02800044 	movi	r10,1
81118cec:	5080670e 	bge	r10,r2,81118e8c <__subdf3+0x584>
81118cf0:	0081ffc4 	movi	r2,2047
81118cf4:	4880af26 	beq	r9,r2,81118fb4 <__subdf3+0x6ac>
81118cf8:	898d883a 	add	r6,r17,r6
81118cfc:	1945883a 	add	r2,r3,r5
81118d00:	3447803a 	cmpltu	r3,r6,r17
81118d04:	1887883a 	add	r3,r3,r2
81118d08:	182297fa 	slli	r17,r3,31
81118d0c:	300cd07a 	srli	r6,r6,1
81118d10:	1806d07a 	srli	r3,r3,1
81118d14:	4821883a 	mov	r16,r9
81118d18:	89a2b03a 	or	r17,r17,r6
81118d1c:	003f1b06 	br	8111898c <__reset+0xfb0f898c>
81118d20:	0101ffc4 	movi	r4,2047
81118d24:	813f441e 	bne	r16,r4,81118a38 <__reset+0xfb0f8a38>
81118d28:	003f1806 	br	8111898c <__reset+0xfb0f898c>
81118d2c:	843ff844 	addi	r16,r16,-31
81118d30:	01400804 	movi	r5,32
81118d34:	1408d83a 	srl	r4,r2,r16
81118d38:	19405026 	beq	r3,r5,81118e7c <__subdf3+0x574>
81118d3c:	01401004 	movi	r5,64
81118d40:	28c7c83a 	sub	r3,r5,r3
81118d44:	10c4983a 	sll	r2,r2,r3
81118d48:	88a2b03a 	or	r17,r17,r2
81118d4c:	8822c03a 	cmpne	r17,r17,zero
81118d50:	2462b03a 	or	r17,r4,r17
81118d54:	0007883a 	mov	r3,zero
81118d58:	0021883a 	mov	r16,zero
81118d5c:	003f6d06 	br	81118b14 <__reset+0xfb0f8b14>
81118d60:	11fff804 	addi	r7,r2,-32
81118d64:	01000804 	movi	r4,32
81118d68:	29ced83a 	srl	r7,r5,r7
81118d6c:	11004526 	beq	r2,r4,81118e84 <__subdf3+0x57c>
81118d70:	01001004 	movi	r4,64
81118d74:	2089c83a 	sub	r4,r4,r2
81118d78:	2904983a 	sll	r2,r5,r4
81118d7c:	118cb03a 	or	r6,r2,r6
81118d80:	300cc03a 	cmpne	r6,r6,zero
81118d84:	398cb03a 	or	r6,r7,r6
81118d88:	0005883a 	mov	r2,zero
81118d8c:	003f3706 	br	81118a6c <__reset+0xfb0f8a6c>
81118d90:	80002a26 	beq	r16,zero,81118e3c <__subdf3+0x534>
81118d94:	0101ffc4 	movi	r4,2047
81118d98:	49006626 	beq	r9,r4,81118f34 <__subdf3+0x62c>
81118d9c:	0085c83a 	sub	r2,zero,r2
81118da0:	18c02034 	orhi	r3,r3,128
81118da4:	01000e04 	movi	r4,56
81118da8:	20807e16 	blt	r4,r2,81118fa4 <__subdf3+0x69c>
81118dac:	010007c4 	movi	r4,31
81118db0:	2080e716 	blt	r4,r2,81119150 <__subdf3+0x848>
81118db4:	01000804 	movi	r4,32
81118db8:	2089c83a 	sub	r4,r4,r2
81118dbc:	1914983a 	sll	r10,r3,r4
81118dc0:	8890d83a 	srl	r8,r17,r2
81118dc4:	8908983a 	sll	r4,r17,r4
81118dc8:	1884d83a 	srl	r2,r3,r2
81118dcc:	5222b03a 	or	r17,r10,r8
81118dd0:	2006c03a 	cmpne	r3,r4,zero
81118dd4:	88e2b03a 	or	r17,r17,r3
81118dd8:	3463c83a 	sub	r17,r6,r17
81118ddc:	2885c83a 	sub	r2,r5,r2
81118de0:	344d803a 	cmpltu	r6,r6,r17
81118de4:	1187c83a 	sub	r3,r2,r6
81118de8:	4821883a 	mov	r16,r9
81118dec:	3825883a 	mov	r18,r7
81118df0:	003f2306 	br	81118a80 <__reset+0xfb0f8a80>
81118df4:	24d0b03a 	or	r8,r4,r19
81118df8:	40001b1e 	bne	r8,zero,81118e68 <__subdf3+0x560>
81118dfc:	0005883a 	mov	r2,zero
81118e00:	0009883a 	mov	r4,zero
81118e04:	0021883a 	mov	r16,zero
81118e08:	003f4906 	br	81118b30 <__reset+0xfb0f8b30>
81118e0c:	010007c4 	movi	r4,31
81118e10:	20803a16 	blt	r4,r2,81118efc <__subdf3+0x5f4>
81118e14:	01000804 	movi	r4,32
81118e18:	2089c83a 	sub	r4,r4,r2
81118e1c:	2912983a 	sll	r9,r5,r4
81118e20:	3090d83a 	srl	r8,r6,r2
81118e24:	3108983a 	sll	r4,r6,r4
81118e28:	2884d83a 	srl	r2,r5,r2
81118e2c:	4a12b03a 	or	r9,r9,r8
81118e30:	2008c03a 	cmpne	r4,r4,zero
81118e34:	4912b03a 	or	r9,r9,r4
81118e38:	003f4e06 	br	81118b74 <__reset+0xfb0f8b74>
81118e3c:	1c48b03a 	or	r4,r3,r17
81118e40:	20003c26 	beq	r4,zero,81118f34 <__subdf3+0x62c>
81118e44:	0084303a 	nor	r2,zero,r2
81118e48:	1000381e 	bne	r2,zero,81118f2c <__subdf3+0x624>
81118e4c:	3463c83a 	sub	r17,r6,r17
81118e50:	28c5c83a 	sub	r2,r5,r3
81118e54:	344d803a 	cmpltu	r6,r6,r17
81118e58:	1187c83a 	sub	r3,r2,r6
81118e5c:	4821883a 	mov	r16,r9
81118e60:	3825883a 	mov	r18,r7
81118e64:	003f0606 	br	81118a80 <__reset+0xfb0f8a80>
81118e68:	2023883a 	mov	r17,r4
81118e6c:	003f0906 	br	81118a94 <__reset+0xfb0f8a94>
81118e70:	0101ffc4 	movi	r4,2047
81118e74:	813f3a1e 	bne	r16,r4,81118b60 <__reset+0xfb0f8b60>
81118e78:	003ec406 	br	8111898c <__reset+0xfb0f898c>
81118e7c:	0005883a 	mov	r2,zero
81118e80:	003fb106 	br	81118d48 <__reset+0xfb0f8d48>
81118e84:	0005883a 	mov	r2,zero
81118e88:	003fbc06 	br	81118d7c <__reset+0xfb0f8d7c>
81118e8c:	1c44b03a 	or	r2,r3,r17
81118e90:	80008e1e 	bne	r16,zero,811190cc <__subdf3+0x7c4>
81118e94:	1000c826 	beq	r2,zero,811191b8 <__subdf3+0x8b0>
81118e98:	2984b03a 	or	r2,r5,r6
81118e9c:	103ebb26 	beq	r2,zero,8111898c <__reset+0xfb0f898c>
81118ea0:	8989883a 	add	r4,r17,r6
81118ea4:	1945883a 	add	r2,r3,r5
81118ea8:	2447803a 	cmpltu	r3,r4,r17
81118eac:	1887883a 	add	r3,r3,r2
81118eb0:	1880202c 	andhi	r2,r3,128
81118eb4:	2023883a 	mov	r17,r4
81118eb8:	103f1626 	beq	r2,zero,81118b14 <__reset+0xfb0f8b14>
81118ebc:	00bfe034 	movhi	r2,65408
81118ec0:	10bfffc4 	addi	r2,r2,-1
81118ec4:	5021883a 	mov	r16,r10
81118ec8:	1886703a 	and	r3,r3,r2
81118ecc:	003eaf06 	br	8111898c <__reset+0xfb0f898c>
81118ed0:	3825883a 	mov	r18,r7
81118ed4:	003f0f06 	br	81118b14 <__reset+0xfb0f8b14>
81118ed8:	1c44b03a 	or	r2,r3,r17
81118edc:	8000251e 	bne	r16,zero,81118f74 <__subdf3+0x66c>
81118ee0:	1000661e 	bne	r2,zero,8111907c <__subdf3+0x774>
81118ee4:	2990b03a 	or	r8,r5,r6
81118ee8:	40009626 	beq	r8,zero,81119144 <__subdf3+0x83c>
81118eec:	2807883a 	mov	r3,r5
81118ef0:	3023883a 	mov	r17,r6
81118ef4:	3825883a 	mov	r18,r7
81118ef8:	003ea406 	br	8111898c <__reset+0xfb0f898c>
81118efc:	127ff804 	addi	r9,r2,-32
81118f00:	01000804 	movi	r4,32
81118f04:	2a52d83a 	srl	r9,r5,r9
81118f08:	11008c26 	beq	r2,r4,8111913c <__subdf3+0x834>
81118f0c:	01001004 	movi	r4,64
81118f10:	2085c83a 	sub	r2,r4,r2
81118f14:	2884983a 	sll	r2,r5,r2
81118f18:	118cb03a 	or	r6,r2,r6
81118f1c:	300cc03a 	cmpne	r6,r6,zero
81118f20:	4992b03a 	or	r9,r9,r6
81118f24:	0005883a 	mov	r2,zero
81118f28:	003f1206 	br	81118b74 <__reset+0xfb0f8b74>
81118f2c:	0101ffc4 	movi	r4,2047
81118f30:	493f9c1e 	bne	r9,r4,81118da4 <__reset+0xfb0f8da4>
81118f34:	2807883a 	mov	r3,r5
81118f38:	3023883a 	mov	r17,r6
81118f3c:	4821883a 	mov	r16,r9
81118f40:	3825883a 	mov	r18,r7
81118f44:	003e9106 	br	8111898c <__reset+0xfb0f898c>
81118f48:	80001f1e 	bne	r16,zero,81118fc8 <__subdf3+0x6c0>
81118f4c:	1c48b03a 	or	r4,r3,r17
81118f50:	20005a26 	beq	r4,zero,811190bc <__subdf3+0x7b4>
81118f54:	0084303a 	nor	r2,zero,r2
81118f58:	1000561e 	bne	r2,zero,811190b4 <__subdf3+0x7ac>
81118f5c:	89a3883a 	add	r17,r17,r6
81118f60:	1945883a 	add	r2,r3,r5
81118f64:	898d803a 	cmpltu	r6,r17,r6
81118f68:	3087883a 	add	r3,r6,r2
81118f6c:	4821883a 	mov	r16,r9
81118f70:	003f0506 	br	81118b88 <__reset+0xfb0f8b88>
81118f74:	10002b1e 	bne	r2,zero,81119024 <__subdf3+0x71c>
81118f78:	2984b03a 	or	r2,r5,r6
81118f7c:	10008026 	beq	r2,zero,81119180 <__subdf3+0x878>
81118f80:	2807883a 	mov	r3,r5
81118f84:	3023883a 	mov	r17,r6
81118f88:	3825883a 	mov	r18,r7
81118f8c:	0401ffc4 	movi	r16,2047
81118f90:	003e7e06 	br	8111898c <__reset+0xfb0f898c>
81118f94:	3809883a 	mov	r4,r7
81118f98:	0011883a 	mov	r8,zero
81118f9c:	0005883a 	mov	r2,zero
81118fa0:	003ee306 	br	81118b30 <__reset+0xfb0f8b30>
81118fa4:	1c62b03a 	or	r17,r3,r17
81118fa8:	8822c03a 	cmpne	r17,r17,zero
81118fac:	0005883a 	mov	r2,zero
81118fb0:	003f8906 	br	81118dd8 <__reset+0xfb0f8dd8>
81118fb4:	3809883a 	mov	r4,r7
81118fb8:	4821883a 	mov	r16,r9
81118fbc:	0011883a 	mov	r8,zero
81118fc0:	0005883a 	mov	r2,zero
81118fc4:	003eda06 	br	81118b30 <__reset+0xfb0f8b30>
81118fc8:	0101ffc4 	movi	r4,2047
81118fcc:	49003b26 	beq	r9,r4,811190bc <__subdf3+0x7b4>
81118fd0:	0085c83a 	sub	r2,zero,r2
81118fd4:	18c02034 	orhi	r3,r3,128
81118fd8:	01000e04 	movi	r4,56
81118fdc:	20806e16 	blt	r4,r2,81119198 <__subdf3+0x890>
81118fe0:	010007c4 	movi	r4,31
81118fe4:	20807716 	blt	r4,r2,811191c4 <__subdf3+0x8bc>
81118fe8:	01000804 	movi	r4,32
81118fec:	2089c83a 	sub	r4,r4,r2
81118ff0:	1914983a 	sll	r10,r3,r4
81118ff4:	8890d83a 	srl	r8,r17,r2
81118ff8:	8908983a 	sll	r4,r17,r4
81118ffc:	1884d83a 	srl	r2,r3,r2
81119000:	5222b03a 	or	r17,r10,r8
81119004:	2006c03a 	cmpne	r3,r4,zero
81119008:	88e2b03a 	or	r17,r17,r3
8111900c:	89a3883a 	add	r17,r17,r6
81119010:	1145883a 	add	r2,r2,r5
81119014:	898d803a 	cmpltu	r6,r17,r6
81119018:	3087883a 	add	r3,r6,r2
8111901c:	4821883a 	mov	r16,r9
81119020:	003ed906 	br	81118b88 <__reset+0xfb0f8b88>
81119024:	2984b03a 	or	r2,r5,r6
81119028:	10004226 	beq	r2,zero,81119134 <__subdf3+0x82c>
8111902c:	1808d0fa 	srli	r4,r3,3
81119030:	8822d0fa 	srli	r17,r17,3
81119034:	1806977a 	slli	r3,r3,29
81119038:	2080022c 	andhi	r2,r4,8
8111903c:	1c62b03a 	or	r17,r3,r17
81119040:	10000826 	beq	r2,zero,81119064 <__subdf3+0x75c>
81119044:	2812d0fa 	srli	r9,r5,3
81119048:	4880022c 	andhi	r2,r9,8
8111904c:	1000051e 	bne	r2,zero,81119064 <__subdf3+0x75c>
81119050:	300cd0fa 	srli	r6,r6,3
81119054:	2804977a 	slli	r2,r5,29
81119058:	4809883a 	mov	r4,r9
8111905c:	3825883a 	mov	r18,r7
81119060:	11a2b03a 	or	r17,r2,r6
81119064:	8806d77a 	srli	r3,r17,29
81119068:	200890fa 	slli	r4,r4,3
8111906c:	882290fa 	slli	r17,r17,3
81119070:	0401ffc4 	movi	r16,2047
81119074:	1906b03a 	or	r3,r3,r4
81119078:	003e4406 	br	8111898c <__reset+0xfb0f898c>
8111907c:	2984b03a 	or	r2,r5,r6
81119080:	103e4226 	beq	r2,zero,8111898c <__reset+0xfb0f898c>
81119084:	8989c83a 	sub	r4,r17,r6
81119088:	8911803a 	cmpltu	r8,r17,r4
8111908c:	1945c83a 	sub	r2,r3,r5
81119090:	1205c83a 	sub	r2,r2,r8
81119094:	1200202c 	andhi	r8,r2,128
81119098:	403e9a26 	beq	r8,zero,81118b04 <__reset+0xfb0f8b04>
8111909c:	3463c83a 	sub	r17,r6,r17
811190a0:	28c5c83a 	sub	r2,r5,r3
811190a4:	344d803a 	cmpltu	r6,r6,r17
811190a8:	1187c83a 	sub	r3,r2,r6
811190ac:	3825883a 	mov	r18,r7
811190b0:	003e3606 	br	8111898c <__reset+0xfb0f898c>
811190b4:	0101ffc4 	movi	r4,2047
811190b8:	493fc71e 	bne	r9,r4,81118fd8 <__reset+0xfb0f8fd8>
811190bc:	2807883a 	mov	r3,r5
811190c0:	3023883a 	mov	r17,r6
811190c4:	4821883a 	mov	r16,r9
811190c8:	003e3006 	br	8111898c <__reset+0xfb0f898c>
811190cc:	10003626 	beq	r2,zero,811191a8 <__subdf3+0x8a0>
811190d0:	2984b03a 	or	r2,r5,r6
811190d4:	10001726 	beq	r2,zero,81119134 <__subdf3+0x82c>
811190d8:	1808d0fa 	srli	r4,r3,3
811190dc:	8822d0fa 	srli	r17,r17,3
811190e0:	1806977a 	slli	r3,r3,29
811190e4:	2080022c 	andhi	r2,r4,8
811190e8:	1c62b03a 	or	r17,r3,r17
811190ec:	10000726 	beq	r2,zero,8111910c <__subdf3+0x804>
811190f0:	2812d0fa 	srli	r9,r5,3
811190f4:	4880022c 	andhi	r2,r9,8
811190f8:	1000041e 	bne	r2,zero,8111910c <__subdf3+0x804>
811190fc:	300cd0fa 	srli	r6,r6,3
81119100:	2804977a 	slli	r2,r5,29
81119104:	4809883a 	mov	r4,r9
81119108:	11a2b03a 	or	r17,r2,r6
8111910c:	8806d77a 	srli	r3,r17,29
81119110:	200890fa 	slli	r4,r4,3
81119114:	882290fa 	slli	r17,r17,3
81119118:	3825883a 	mov	r18,r7
8111911c:	1906b03a 	or	r3,r3,r4
81119120:	0401ffc4 	movi	r16,2047
81119124:	003e1906 	br	8111898c <__reset+0xfb0f898c>
81119128:	000b883a 	mov	r5,zero
8111912c:	0005883a 	mov	r2,zero
81119130:	003e2e06 	br	811189ec <__reset+0xfb0f89ec>
81119134:	0401ffc4 	movi	r16,2047
81119138:	003e1406 	br	8111898c <__reset+0xfb0f898c>
8111913c:	0005883a 	mov	r2,zero
81119140:	003f7506 	br	81118f18 <__reset+0xfb0f8f18>
81119144:	0005883a 	mov	r2,zero
81119148:	0009883a 	mov	r4,zero
8111914c:	003e7806 	br	81118b30 <__reset+0xfb0f8b30>
81119150:	123ff804 	addi	r8,r2,-32
81119154:	01000804 	movi	r4,32
81119158:	1a10d83a 	srl	r8,r3,r8
8111915c:	11002526 	beq	r2,r4,811191f4 <__subdf3+0x8ec>
81119160:	01001004 	movi	r4,64
81119164:	2085c83a 	sub	r2,r4,r2
81119168:	1884983a 	sll	r2,r3,r2
8111916c:	1444b03a 	or	r2,r2,r17
81119170:	1004c03a 	cmpne	r2,r2,zero
81119174:	40a2b03a 	or	r17,r8,r2
81119178:	0005883a 	mov	r2,zero
8111917c:	003f1606 	br	81118dd8 <__reset+0xfb0f8dd8>
81119180:	02000434 	movhi	r8,16
81119184:	0009883a 	mov	r4,zero
81119188:	423fffc4 	addi	r8,r8,-1
8111918c:	00bfffc4 	movi	r2,-1
81119190:	0401ffc4 	movi	r16,2047
81119194:	003e6606 	br	81118b30 <__reset+0xfb0f8b30>
81119198:	1c62b03a 	or	r17,r3,r17
8111919c:	8822c03a 	cmpne	r17,r17,zero
811191a0:	0005883a 	mov	r2,zero
811191a4:	003f9906 	br	8111900c <__reset+0xfb0f900c>
811191a8:	2807883a 	mov	r3,r5
811191ac:	3023883a 	mov	r17,r6
811191b0:	0401ffc4 	movi	r16,2047
811191b4:	003df506 	br	8111898c <__reset+0xfb0f898c>
811191b8:	2807883a 	mov	r3,r5
811191bc:	3023883a 	mov	r17,r6
811191c0:	003df206 	br	8111898c <__reset+0xfb0f898c>
811191c4:	123ff804 	addi	r8,r2,-32
811191c8:	01000804 	movi	r4,32
811191cc:	1a10d83a 	srl	r8,r3,r8
811191d0:	11000a26 	beq	r2,r4,811191fc <__subdf3+0x8f4>
811191d4:	01001004 	movi	r4,64
811191d8:	2085c83a 	sub	r2,r4,r2
811191dc:	1884983a 	sll	r2,r3,r2
811191e0:	1444b03a 	or	r2,r2,r17
811191e4:	1004c03a 	cmpne	r2,r2,zero
811191e8:	40a2b03a 	or	r17,r8,r2
811191ec:	0005883a 	mov	r2,zero
811191f0:	003f8606 	br	8111900c <__reset+0xfb0f900c>
811191f4:	0005883a 	mov	r2,zero
811191f8:	003fdc06 	br	8111916c <__reset+0xfb0f916c>
811191fc:	0005883a 	mov	r2,zero
81119200:	003ff706 	br	811191e0 <__reset+0xfb0f91e0>

81119204 <__fixdfsi>:
81119204:	280cd53a 	srli	r6,r5,20
81119208:	00c00434 	movhi	r3,16
8111920c:	18ffffc4 	addi	r3,r3,-1
81119210:	3181ffcc 	andi	r6,r6,2047
81119214:	01c0ff84 	movi	r7,1022
81119218:	28c6703a 	and	r3,r5,r3
8111921c:	280ad7fa 	srli	r5,r5,31
81119220:	3980120e 	bge	r7,r6,8111926c <__fixdfsi+0x68>
81119224:	00810744 	movi	r2,1053
81119228:	11800c16 	blt	r2,r6,8111925c <__fixdfsi+0x58>
8111922c:	00810cc4 	movi	r2,1075
81119230:	1185c83a 	sub	r2,r2,r6
81119234:	01c007c4 	movi	r7,31
81119238:	18c00434 	orhi	r3,r3,16
8111923c:	38800d16 	blt	r7,r2,81119274 <__fixdfsi+0x70>
81119240:	31befb44 	addi	r6,r6,-1043
81119244:	2084d83a 	srl	r2,r4,r2
81119248:	1986983a 	sll	r3,r3,r6
8111924c:	1884b03a 	or	r2,r3,r2
81119250:	28000726 	beq	r5,zero,81119270 <__fixdfsi+0x6c>
81119254:	0085c83a 	sub	r2,zero,r2
81119258:	f800283a 	ret
8111925c:	00a00034 	movhi	r2,32768
81119260:	10bfffc4 	addi	r2,r2,-1
81119264:	2885883a 	add	r2,r5,r2
81119268:	f800283a 	ret
8111926c:	0005883a 	mov	r2,zero
81119270:	f800283a 	ret
81119274:	008104c4 	movi	r2,1043
81119278:	1185c83a 	sub	r2,r2,r6
8111927c:	1884d83a 	srl	r2,r3,r2
81119280:	003ff306 	br	81119250 <__reset+0xfb0f9250>

81119284 <__floatsidf>:
81119284:	defffd04 	addi	sp,sp,-12
81119288:	dfc00215 	stw	ra,8(sp)
8111928c:	dc400115 	stw	r17,4(sp)
81119290:	dc000015 	stw	r16,0(sp)
81119294:	20002b26 	beq	r4,zero,81119344 <__floatsidf+0xc0>
81119298:	2023883a 	mov	r17,r4
8111929c:	2020d7fa 	srli	r16,r4,31
811192a0:	20002d16 	blt	r4,zero,81119358 <__floatsidf+0xd4>
811192a4:	8809883a 	mov	r4,r17
811192a8:	110cd080 	call	8110cd08 <__clzsi2>
811192ac:	01410784 	movi	r5,1054
811192b0:	288bc83a 	sub	r5,r5,r2
811192b4:	01010cc4 	movi	r4,1075
811192b8:	2149c83a 	sub	r4,r4,r5
811192bc:	00c007c4 	movi	r3,31
811192c0:	1900160e 	bge	r3,r4,8111931c <__floatsidf+0x98>
811192c4:	00c104c4 	movi	r3,1043
811192c8:	1947c83a 	sub	r3,r3,r5
811192cc:	88c6983a 	sll	r3,r17,r3
811192d0:	00800434 	movhi	r2,16
811192d4:	10bfffc4 	addi	r2,r2,-1
811192d8:	1886703a 	and	r3,r3,r2
811192dc:	2941ffcc 	andi	r5,r5,2047
811192e0:	800d883a 	mov	r6,r16
811192e4:	0005883a 	mov	r2,zero
811192e8:	280a953a 	slli	r5,r5,20
811192ec:	31803fcc 	andi	r6,r6,255
811192f0:	01000434 	movhi	r4,16
811192f4:	300c97fa 	slli	r6,r6,31
811192f8:	213fffc4 	addi	r4,r4,-1
811192fc:	1906703a 	and	r3,r3,r4
81119300:	1946b03a 	or	r3,r3,r5
81119304:	1986b03a 	or	r3,r3,r6
81119308:	dfc00217 	ldw	ra,8(sp)
8111930c:	dc400117 	ldw	r17,4(sp)
81119310:	dc000017 	ldw	r16,0(sp)
81119314:	dec00304 	addi	sp,sp,12
81119318:	f800283a 	ret
8111931c:	00c002c4 	movi	r3,11
81119320:	1887c83a 	sub	r3,r3,r2
81119324:	88c6d83a 	srl	r3,r17,r3
81119328:	8904983a 	sll	r2,r17,r4
8111932c:	01000434 	movhi	r4,16
81119330:	213fffc4 	addi	r4,r4,-1
81119334:	2941ffcc 	andi	r5,r5,2047
81119338:	1906703a 	and	r3,r3,r4
8111933c:	800d883a 	mov	r6,r16
81119340:	003fe906 	br	811192e8 <__reset+0xfb0f92e8>
81119344:	000d883a 	mov	r6,zero
81119348:	000b883a 	mov	r5,zero
8111934c:	0007883a 	mov	r3,zero
81119350:	0005883a 	mov	r2,zero
81119354:	003fe406 	br	811192e8 <__reset+0xfb0f92e8>
81119358:	0123c83a 	sub	r17,zero,r4
8111935c:	003fd106 	br	811192a4 <__reset+0xfb0f92a4>

81119360 <__floatunsidf>:
81119360:	defffe04 	addi	sp,sp,-8
81119364:	dc000015 	stw	r16,0(sp)
81119368:	dfc00115 	stw	ra,4(sp)
8111936c:	2021883a 	mov	r16,r4
81119370:	20002226 	beq	r4,zero,811193fc <__floatunsidf+0x9c>
81119374:	110cd080 	call	8110cd08 <__clzsi2>
81119378:	01010784 	movi	r4,1054
8111937c:	2089c83a 	sub	r4,r4,r2
81119380:	01810cc4 	movi	r6,1075
81119384:	310dc83a 	sub	r6,r6,r4
81119388:	00c007c4 	movi	r3,31
8111938c:	1980120e 	bge	r3,r6,811193d8 <__floatunsidf+0x78>
81119390:	00c104c4 	movi	r3,1043
81119394:	1907c83a 	sub	r3,r3,r4
81119398:	80ca983a 	sll	r5,r16,r3
8111939c:	00800434 	movhi	r2,16
811193a0:	10bfffc4 	addi	r2,r2,-1
811193a4:	2101ffcc 	andi	r4,r4,2047
811193a8:	0021883a 	mov	r16,zero
811193ac:	288a703a 	and	r5,r5,r2
811193b0:	2008953a 	slli	r4,r4,20
811193b4:	00c00434 	movhi	r3,16
811193b8:	18ffffc4 	addi	r3,r3,-1
811193bc:	28c6703a 	and	r3,r5,r3
811193c0:	8005883a 	mov	r2,r16
811193c4:	1906b03a 	or	r3,r3,r4
811193c8:	dfc00117 	ldw	ra,4(sp)
811193cc:	dc000017 	ldw	r16,0(sp)
811193d0:	dec00204 	addi	sp,sp,8
811193d4:	f800283a 	ret
811193d8:	00c002c4 	movi	r3,11
811193dc:	188bc83a 	sub	r5,r3,r2
811193e0:	814ad83a 	srl	r5,r16,r5
811193e4:	00c00434 	movhi	r3,16
811193e8:	18ffffc4 	addi	r3,r3,-1
811193ec:	81a0983a 	sll	r16,r16,r6
811193f0:	2101ffcc 	andi	r4,r4,2047
811193f4:	28ca703a 	and	r5,r5,r3
811193f8:	003fed06 	br	811193b0 <__reset+0xfb0f93b0>
811193fc:	0009883a 	mov	r4,zero
81119400:	000b883a 	mov	r5,zero
81119404:	003fea06 	br	811193b0 <__reset+0xfb0f93b0>

81119408 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81119408:	defffb04 	addi	sp,sp,-20
8111940c:	df000415 	stw	fp,16(sp)
81119410:	df000404 	addi	fp,sp,16
81119414:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81119418:	008000c4 	movi	r2,3
8111941c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81119420:	e0fffd17 	ldw	r3,-12(fp)
81119424:	008003f4 	movhi	r2,15
81119428:	10909004 	addi	r2,r2,16960
8111942c:	1887383a 	mul	r3,r3,r2
81119430:	00817db4 	movhi	r2,1526
81119434:	10b84004 	addi	r2,r2,-7936
81119438:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
8111943c:	00a00034 	movhi	r2,32768
81119440:	10bfffc4 	addi	r2,r2,-1
81119444:	10c5203a 	divu	r2,r2,r3
81119448:	e0ffff17 	ldw	r3,-4(fp)
8111944c:	1885203a 	divu	r2,r3,r2
81119450:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81119454:	e0bffe17 	ldw	r2,-8(fp)
81119458:	10002526 	beq	r2,zero,811194f0 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
8111945c:	e03ffc15 	stw	zero,-16(fp)
81119460:	00001406 	br	811194b4 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81119464:	00a00034 	movhi	r2,32768
81119468:	10bfffc4 	addi	r2,r2,-1
8111946c:	10bfffc4 	addi	r2,r2,-1
81119470:	103ffe1e 	bne	r2,zero,8111946c <__reset+0xfb0f946c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81119474:	e0fffd17 	ldw	r3,-12(fp)
81119478:	008003f4 	movhi	r2,15
8111947c:	10909004 	addi	r2,r2,16960
81119480:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81119484:	00817db4 	movhi	r2,1526
81119488:	10b84004 	addi	r2,r2,-7936
8111948c:	10c7203a 	divu	r3,r2,r3
81119490:	00a00034 	movhi	r2,32768
81119494:	10bfffc4 	addi	r2,r2,-1
81119498:	10c5203a 	divu	r2,r2,r3
8111949c:	e0ffff17 	ldw	r3,-4(fp)
811194a0:	1885c83a 	sub	r2,r3,r2
811194a4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
811194a8:	e0bffc17 	ldw	r2,-16(fp)
811194ac:	10800044 	addi	r2,r2,1
811194b0:	e0bffc15 	stw	r2,-16(fp)
811194b4:	e0fffc17 	ldw	r3,-16(fp)
811194b8:	e0bffe17 	ldw	r2,-8(fp)
811194bc:	18bfe916 	blt	r3,r2,81119464 <__reset+0xfb0f9464>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
811194c0:	e0fffd17 	ldw	r3,-12(fp)
811194c4:	008003f4 	movhi	r2,15
811194c8:	10909004 	addi	r2,r2,16960
811194cc:	1887383a 	mul	r3,r3,r2
811194d0:	00817db4 	movhi	r2,1526
811194d4:	10b84004 	addi	r2,r2,-7936
811194d8:	10c7203a 	divu	r3,r2,r3
811194dc:	e0bfff17 	ldw	r2,-4(fp)
811194e0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
811194e4:	10bfffc4 	addi	r2,r2,-1
811194e8:	103ffe1e 	bne	r2,zero,811194e4 <__reset+0xfb0f94e4>
811194ec:	00000b06 	br	8111951c <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
811194f0:	e0fffd17 	ldw	r3,-12(fp)
811194f4:	008003f4 	movhi	r2,15
811194f8:	10909004 	addi	r2,r2,16960
811194fc:	1887383a 	mul	r3,r3,r2
81119500:	00817db4 	movhi	r2,1526
81119504:	10b84004 	addi	r2,r2,-7936
81119508:	10c7203a 	divu	r3,r2,r3
8111950c:	e0bfff17 	ldw	r2,-4(fp)
81119510:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81119514:	10bfffc4 	addi	r2,r2,-1
81119518:	00bffe16 	blt	zero,r2,81119514 <__reset+0xfb0f9514>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
8111951c:	0005883a 	mov	r2,zero
}
81119520:	e037883a 	mov	sp,fp
81119524:	df000017 	ldw	fp,0(sp)
81119528:	dec00104 	addi	sp,sp,4
8111952c:	f800283a 	ret

81119530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81119530:	defffe04 	addi	sp,sp,-8
81119534:	dfc00115 	stw	ra,4(sp)
81119538:	df000015 	stw	fp,0(sp)
8111953c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81119540:	d0a01517 	ldw	r2,-32684(gp)
81119544:	10000326 	beq	r2,zero,81119554 <alt_get_errno+0x24>
81119548:	d0a01517 	ldw	r2,-32684(gp)
8111954c:	103ee83a 	callr	r2
81119550:	00000106 	br	81119558 <alt_get_errno+0x28>
81119554:	d0a04304 	addi	r2,gp,-32500
}
81119558:	e037883a 	mov	sp,fp
8111955c:	dfc00117 	ldw	ra,4(sp)
81119560:	df000017 	ldw	fp,0(sp)
81119564:	dec00204 	addi	sp,sp,8
81119568:	f800283a 	ret

8111956c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
8111956c:	defffb04 	addi	sp,sp,-20
81119570:	dfc00415 	stw	ra,16(sp)
81119574:	df000315 	stw	fp,12(sp)
81119578:	df000304 	addi	fp,sp,12
8111957c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
81119580:	e0bfff17 	ldw	r2,-4(fp)
81119584:	10000616 	blt	r2,zero,811195a0 <close+0x34>
81119588:	e0bfff17 	ldw	r2,-4(fp)
8111958c:	10c00324 	muli	r3,r2,12
81119590:	00a044b4 	movhi	r2,33042
81119594:	10824504 	addi	r2,r2,2324
81119598:	1885883a 	add	r2,r3,r2
8111959c:	00000106 	br	811195a4 <close+0x38>
811195a0:	0005883a 	mov	r2,zero
811195a4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
811195a8:	e0bffd17 	ldw	r2,-12(fp)
811195ac:	10001926 	beq	r2,zero,81119614 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
811195b0:	e0bffd17 	ldw	r2,-12(fp)
811195b4:	10800017 	ldw	r2,0(r2)
811195b8:	10800417 	ldw	r2,16(r2)
811195bc:	10000626 	beq	r2,zero,811195d8 <close+0x6c>
811195c0:	e0bffd17 	ldw	r2,-12(fp)
811195c4:	10800017 	ldw	r2,0(r2)
811195c8:	10800417 	ldw	r2,16(r2)
811195cc:	e13ffd17 	ldw	r4,-12(fp)
811195d0:	103ee83a 	callr	r2
811195d4:	00000106 	br	811195dc <close+0x70>
811195d8:	0005883a 	mov	r2,zero
811195dc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
811195e0:	e13fff17 	ldw	r4,-4(fp)
811195e4:	1119f480 	call	81119f48 <alt_release_fd>
    if (rval < 0)
811195e8:	e0bffe17 	ldw	r2,-8(fp)
811195ec:	1000070e 	bge	r2,zero,8111960c <close+0xa0>
    {
      ALT_ERRNO = -rval;
811195f0:	11195300 	call	81119530 <alt_get_errno>
811195f4:	1007883a 	mov	r3,r2
811195f8:	e0bffe17 	ldw	r2,-8(fp)
811195fc:	0085c83a 	sub	r2,zero,r2
81119600:	18800015 	stw	r2,0(r3)
      return -1;
81119604:	00bfffc4 	movi	r2,-1
81119608:	00000706 	br	81119628 <close+0xbc>
    }
    return 0;
8111960c:	0005883a 	mov	r2,zero
81119610:	00000506 	br	81119628 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81119614:	11195300 	call	81119530 <alt_get_errno>
81119618:	1007883a 	mov	r3,r2
8111961c:	00801444 	movi	r2,81
81119620:	18800015 	stw	r2,0(r3)
    return -1;
81119624:	00bfffc4 	movi	r2,-1
  }
}
81119628:	e037883a 	mov	sp,fp
8111962c:	dfc00117 	ldw	ra,4(sp)
81119630:	df000017 	ldw	fp,0(sp)
81119634:	dec00204 	addi	sp,sp,8
81119638:	f800283a 	ret

8111963c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
8111963c:	deffff04 	addi	sp,sp,-4
81119640:	df000015 	stw	fp,0(sp)
81119644:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81119648:	0001883a 	nop
8111964c:	e037883a 	mov	sp,fp
81119650:	df000017 	ldw	fp,0(sp)
81119654:	dec00104 	addi	sp,sp,4
81119658:	f800283a 	ret

8111965c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
8111965c:	defffc04 	addi	sp,sp,-16
81119660:	df000315 	stw	fp,12(sp)
81119664:	df000304 	addi	fp,sp,12
81119668:	e13ffd15 	stw	r4,-12(fp)
8111966c:	e17ffe15 	stw	r5,-8(fp)
81119670:	e1bfff15 	stw	r6,-4(fp)
  return len;
81119674:	e0bfff17 	ldw	r2,-4(fp)
}
81119678:	e037883a 	mov	sp,fp
8111967c:	df000017 	ldw	fp,0(sp)
81119680:	dec00104 	addi	sp,sp,4
81119684:	f800283a 	ret

81119688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81119688:	defffe04 	addi	sp,sp,-8
8111968c:	dfc00115 	stw	ra,4(sp)
81119690:	df000015 	stw	fp,0(sp)
81119694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81119698:	d0a01517 	ldw	r2,-32684(gp)
8111969c:	10000326 	beq	r2,zero,811196ac <alt_get_errno+0x24>
811196a0:	d0a01517 	ldw	r2,-32684(gp)
811196a4:	103ee83a 	callr	r2
811196a8:	00000106 	br	811196b0 <alt_get_errno+0x28>
811196ac:	d0a04304 	addi	r2,gp,-32500
}
811196b0:	e037883a 	mov	sp,fp
811196b4:	dfc00117 	ldw	ra,4(sp)
811196b8:	df000017 	ldw	fp,0(sp)
811196bc:	dec00204 	addi	sp,sp,8
811196c0:	f800283a 	ret

811196c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
811196c4:	defffb04 	addi	sp,sp,-20
811196c8:	dfc00415 	stw	ra,16(sp)
811196cc:	df000315 	stw	fp,12(sp)
811196d0:	df000304 	addi	fp,sp,12
811196d4:	e13ffe15 	stw	r4,-8(fp)
811196d8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811196dc:	e0bffe17 	ldw	r2,-8(fp)
811196e0:	10000616 	blt	r2,zero,811196fc <fstat+0x38>
811196e4:	e0bffe17 	ldw	r2,-8(fp)
811196e8:	10c00324 	muli	r3,r2,12
811196ec:	00a044b4 	movhi	r2,33042
811196f0:	10824504 	addi	r2,r2,2324
811196f4:	1885883a 	add	r2,r3,r2
811196f8:	00000106 	br	81119700 <fstat+0x3c>
811196fc:	0005883a 	mov	r2,zero
81119700:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81119704:	e0bffd17 	ldw	r2,-12(fp)
81119708:	10001026 	beq	r2,zero,8111974c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
8111970c:	e0bffd17 	ldw	r2,-12(fp)
81119710:	10800017 	ldw	r2,0(r2)
81119714:	10800817 	ldw	r2,32(r2)
81119718:	10000726 	beq	r2,zero,81119738 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
8111971c:	e0bffd17 	ldw	r2,-12(fp)
81119720:	10800017 	ldw	r2,0(r2)
81119724:	10800817 	ldw	r2,32(r2)
81119728:	e17fff17 	ldw	r5,-4(fp)
8111972c:	e13ffd17 	ldw	r4,-12(fp)
81119730:	103ee83a 	callr	r2
81119734:	00000a06 	br	81119760 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
81119738:	e0bfff17 	ldw	r2,-4(fp)
8111973c:	00c80004 	movi	r3,8192
81119740:	10c00115 	stw	r3,4(r2)
      return 0;
81119744:	0005883a 	mov	r2,zero
81119748:	00000506 	br	81119760 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8111974c:	11196880 	call	81119688 <alt_get_errno>
81119750:	1007883a 	mov	r3,r2
81119754:	00801444 	movi	r2,81
81119758:	18800015 	stw	r2,0(r3)
    return -1;
8111975c:	00bfffc4 	movi	r2,-1
  }
}
81119760:	e037883a 	mov	sp,fp
81119764:	dfc00117 	ldw	ra,4(sp)
81119768:	df000017 	ldw	fp,0(sp)
8111976c:	dec00204 	addi	sp,sp,8
81119770:	f800283a 	ret

81119774 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
81119774:	defff004 	addi	sp,sp,-64
81119778:	df000f15 	stw	fp,60(sp)
8111977c:	df000f04 	addi	fp,sp,60
81119780:	e13ffd15 	stw	r4,-12(fp)
81119784:	e17ffe15 	stw	r5,-8(fp)
81119788:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
8111978c:	00bffa84 	movi	r2,-22
81119790:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81119794:	e0bffd17 	ldw	r2,-12(fp)
81119798:	10800828 	cmpgeui	r2,r2,32
8111979c:	1000501e 	bne	r2,zero,811198e0 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811197a0:	0005303a 	rdctl	r2,status
811197a4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811197a8:	e0fff617 	ldw	r3,-40(fp)
811197ac:	00bfff84 	movi	r2,-2
811197b0:	1884703a 	and	r2,r3,r2
811197b4:	1001703a 	wrctl	status,r2
  
  return context;
811197b8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
811197bc:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
811197c0:	00a044b4 	movhi	r2,33042
811197c4:	10892604 	addi	r2,r2,9368
811197c8:	e0fffd17 	ldw	r3,-12(fp)
811197cc:	180690fa 	slli	r3,r3,3
811197d0:	10c5883a 	add	r2,r2,r3
811197d4:	e0ffff17 	ldw	r3,-4(fp)
811197d8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
811197dc:	00a044b4 	movhi	r2,33042
811197e0:	10892604 	addi	r2,r2,9368
811197e4:	e0fffd17 	ldw	r3,-12(fp)
811197e8:	180690fa 	slli	r3,r3,3
811197ec:	10c5883a 	add	r2,r2,r3
811197f0:	10800104 	addi	r2,r2,4
811197f4:	e0fffe17 	ldw	r3,-8(fp)
811197f8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
811197fc:	e0bfff17 	ldw	r2,-4(fp)
81119800:	10001926 	beq	r2,zero,81119868 <alt_irq_register+0xf4>
81119804:	e0bffd17 	ldw	r2,-12(fp)
81119808:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111980c:	0005303a 	rdctl	r2,status
81119810:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81119814:	e0fff717 	ldw	r3,-36(fp)
81119818:	00bfff84 	movi	r2,-2
8111981c:	1884703a 	and	r2,r3,r2
81119820:	1001703a 	wrctl	status,r2
  
  return context;
81119824:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81119828:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
8111982c:	00c00044 	movi	r3,1
81119830:	e0bff217 	ldw	r2,-56(fp)
81119834:	1884983a 	sll	r2,r3,r2
81119838:	1007883a 	mov	r3,r2
8111983c:	d0a04417 	ldw	r2,-32496(gp)
81119840:	1884b03a 	or	r2,r3,r2
81119844:	d0a04415 	stw	r2,-32496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81119848:	d0a04417 	ldw	r2,-32496(gp)
8111984c:	100170fa 	wrctl	ienable,r2
81119850:	e0bff817 	ldw	r2,-32(fp)
81119854:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81119858:	e0bff917 	ldw	r2,-28(fp)
8111985c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81119860:	0005883a 	mov	r2,zero
81119864:	00001906 	br	811198cc <alt_irq_register+0x158>
81119868:	e0bffd17 	ldw	r2,-12(fp)
8111986c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81119870:	0005303a 	rdctl	r2,status
81119874:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81119878:	e0fffa17 	ldw	r3,-24(fp)
8111987c:	00bfff84 	movi	r2,-2
81119880:	1884703a 	and	r2,r3,r2
81119884:	1001703a 	wrctl	status,r2
  
  return context;
81119888:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8111988c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
81119890:	00c00044 	movi	r3,1
81119894:	e0bff417 	ldw	r2,-48(fp)
81119898:	1884983a 	sll	r2,r3,r2
8111989c:	0084303a 	nor	r2,zero,r2
811198a0:	1007883a 	mov	r3,r2
811198a4:	d0a04417 	ldw	r2,-32496(gp)
811198a8:	1884703a 	and	r2,r3,r2
811198ac:	d0a04415 	stw	r2,-32496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811198b0:	d0a04417 	ldw	r2,-32496(gp)
811198b4:	100170fa 	wrctl	ienable,r2
811198b8:	e0bffb17 	ldw	r2,-20(fp)
811198bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811198c0:	e0bffc17 	ldw	r2,-16(fp)
811198c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811198c8:	0005883a 	mov	r2,zero
811198cc:	e0bff115 	stw	r2,-60(fp)
811198d0:	e0bff317 	ldw	r2,-52(fp)
811198d4:	e0bff515 	stw	r2,-44(fp)
811198d8:	e0bff517 	ldw	r2,-44(fp)
811198dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
811198e0:	e0bff117 	ldw	r2,-60(fp)
}
811198e4:	e037883a 	mov	sp,fp
811198e8:	df000017 	ldw	fp,0(sp)
811198ec:	dec00104 	addi	sp,sp,4
811198f0:	f800283a 	ret

811198f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811198f4:	defffe04 	addi	sp,sp,-8
811198f8:	dfc00115 	stw	ra,4(sp)
811198fc:	df000015 	stw	fp,0(sp)
81119900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81119904:	d0a01517 	ldw	r2,-32684(gp)
81119908:	10000326 	beq	r2,zero,81119918 <alt_get_errno+0x24>
8111990c:	d0a01517 	ldw	r2,-32684(gp)
81119910:	103ee83a 	callr	r2
81119914:	00000106 	br	8111991c <alt_get_errno+0x28>
81119918:	d0a04304 	addi	r2,gp,-32500
}
8111991c:	e037883a 	mov	sp,fp
81119920:	dfc00117 	ldw	ra,4(sp)
81119924:	df000017 	ldw	fp,0(sp)
81119928:	dec00204 	addi	sp,sp,8
8111992c:	f800283a 	ret

81119930 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
81119930:	deffed04 	addi	sp,sp,-76
81119934:	dfc01215 	stw	ra,72(sp)
81119938:	df001115 	stw	fp,68(sp)
8111993c:	df001104 	addi	fp,sp,68
81119940:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81119944:	e0bfff17 	ldw	r2,-4(fp)
81119948:	10000616 	blt	r2,zero,81119964 <isatty+0x34>
8111994c:	e0bfff17 	ldw	r2,-4(fp)
81119950:	10c00324 	muli	r3,r2,12
81119954:	00a044b4 	movhi	r2,33042
81119958:	10824504 	addi	r2,r2,2324
8111995c:	1885883a 	add	r2,r3,r2
81119960:	00000106 	br	81119968 <isatty+0x38>
81119964:	0005883a 	mov	r2,zero
81119968:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
8111996c:	e0bfef17 	ldw	r2,-68(fp)
81119970:	10000e26 	beq	r2,zero,811199ac <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81119974:	e0bfef17 	ldw	r2,-68(fp)
81119978:	10800017 	ldw	r2,0(r2)
8111997c:	10800817 	ldw	r2,32(r2)
81119980:	1000021e 	bne	r2,zero,8111998c <isatty+0x5c>
    {
      return 1;
81119984:	00800044 	movi	r2,1
81119988:	00000d06 	br	811199c0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
8111998c:	e0bff004 	addi	r2,fp,-64
81119990:	100b883a 	mov	r5,r2
81119994:	e13fff17 	ldw	r4,-4(fp)
81119998:	11196c40 	call	811196c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
8111999c:	e0bff117 	ldw	r2,-60(fp)
811199a0:	10880020 	cmpeqi	r2,r2,8192
811199a4:	10803fcc 	andi	r2,r2,255
811199a8:	00000506 	br	811199c0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811199ac:	11198f40 	call	811198f4 <alt_get_errno>
811199b0:	1007883a 	mov	r3,r2
811199b4:	00801444 	movi	r2,81
811199b8:	18800015 	stw	r2,0(r3)
    return 0;
811199bc:	0005883a 	mov	r2,zero
  }
}
811199c0:	e037883a 	mov	sp,fp
811199c4:	dfc00117 	ldw	ra,4(sp)
811199c8:	df000017 	ldw	fp,0(sp)
811199cc:	dec00204 	addi	sp,sp,8
811199d0:	f800283a 	ret

811199d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811199d4:	defffe04 	addi	sp,sp,-8
811199d8:	dfc00115 	stw	ra,4(sp)
811199dc:	df000015 	stw	fp,0(sp)
811199e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811199e4:	d0a01517 	ldw	r2,-32684(gp)
811199e8:	10000326 	beq	r2,zero,811199f8 <alt_get_errno+0x24>
811199ec:	d0a01517 	ldw	r2,-32684(gp)
811199f0:	103ee83a 	callr	r2
811199f4:	00000106 	br	811199fc <alt_get_errno+0x28>
811199f8:	d0a04304 	addi	r2,gp,-32500
}
811199fc:	e037883a 	mov	sp,fp
81119a00:	dfc00117 	ldw	ra,4(sp)
81119a04:	df000017 	ldw	fp,0(sp)
81119a08:	dec00204 	addi	sp,sp,8
81119a0c:	f800283a 	ret

81119a10 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
81119a10:	defff904 	addi	sp,sp,-28
81119a14:	dfc00615 	stw	ra,24(sp)
81119a18:	df000515 	stw	fp,20(sp)
81119a1c:	df000504 	addi	fp,sp,20
81119a20:	e13ffd15 	stw	r4,-12(fp)
81119a24:	e17ffe15 	stw	r5,-8(fp)
81119a28:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
81119a2c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81119a30:	e0bffd17 	ldw	r2,-12(fp)
81119a34:	10000616 	blt	r2,zero,81119a50 <lseek+0x40>
81119a38:	e0bffd17 	ldw	r2,-12(fp)
81119a3c:	10c00324 	muli	r3,r2,12
81119a40:	00a044b4 	movhi	r2,33042
81119a44:	10824504 	addi	r2,r2,2324
81119a48:	1885883a 	add	r2,r3,r2
81119a4c:	00000106 	br	81119a54 <lseek+0x44>
81119a50:	0005883a 	mov	r2,zero
81119a54:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81119a58:	e0bffc17 	ldw	r2,-16(fp)
81119a5c:	10001026 	beq	r2,zero,81119aa0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
81119a60:	e0bffc17 	ldw	r2,-16(fp)
81119a64:	10800017 	ldw	r2,0(r2)
81119a68:	10800717 	ldw	r2,28(r2)
81119a6c:	10000926 	beq	r2,zero,81119a94 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
81119a70:	e0bffc17 	ldw	r2,-16(fp)
81119a74:	10800017 	ldw	r2,0(r2)
81119a78:	10800717 	ldw	r2,28(r2)
81119a7c:	e1bfff17 	ldw	r6,-4(fp)
81119a80:	e17ffe17 	ldw	r5,-8(fp)
81119a84:	e13ffc17 	ldw	r4,-16(fp)
81119a88:	103ee83a 	callr	r2
81119a8c:	e0bffb15 	stw	r2,-20(fp)
81119a90:	00000506 	br	81119aa8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81119a94:	00bfde84 	movi	r2,-134
81119a98:	e0bffb15 	stw	r2,-20(fp)
81119a9c:	00000206 	br	81119aa8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
81119aa0:	00bfebc4 	movi	r2,-81
81119aa4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81119aa8:	e0bffb17 	ldw	r2,-20(fp)
81119aac:	1000070e 	bge	r2,zero,81119acc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
81119ab0:	11199d40 	call	811199d4 <alt_get_errno>
81119ab4:	1007883a 	mov	r3,r2
81119ab8:	e0bffb17 	ldw	r2,-20(fp)
81119abc:	0085c83a 	sub	r2,zero,r2
81119ac0:	18800015 	stw	r2,0(r3)
    rc = -1;
81119ac4:	00bfffc4 	movi	r2,-1
81119ac8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81119acc:	e0bffb17 	ldw	r2,-20(fp)
}
81119ad0:	e037883a 	mov	sp,fp
81119ad4:	dfc00117 	ldw	ra,4(sp)
81119ad8:	df000017 	ldw	fp,0(sp)
81119adc:	dec00204 	addi	sp,sp,8
81119ae0:	f800283a 	ret

81119ae4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81119ae4:	defffd04 	addi	sp,sp,-12
81119ae8:	dfc00215 	stw	ra,8(sp)
81119aec:	df000115 	stw	fp,4(sp)
81119af0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
81119af4:	0009883a 	mov	r4,zero
81119af8:	111a3980 	call	8111a398 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
81119afc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
81119b00:	111a3d00 	call	8111a3d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81119b04:	01a044b4 	movhi	r6,33042
81119b08:	31bf6d04 	addi	r6,r6,-588
81119b0c:	016044b4 	movhi	r5,33042
81119b10:	297f6d04 	addi	r5,r5,-588
81119b14:	012044b4 	movhi	r4,33042
81119b18:	213f6d04 	addi	r4,r4,-588
81119b1c:	111de280 	call	8111de28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
81119b20:	111d9740 	call	8111d974 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
81119b24:	012044b4 	movhi	r4,33042
81119b28:	21367504 	addi	r4,r4,-9772
81119b2c:	111e3640 	call	8111e364 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
81119b30:	d0a04517 	ldw	r2,-32492(gp)
81119b34:	d0e04617 	ldw	r3,-32488(gp)
81119b38:	d1204717 	ldw	r4,-32484(gp)
81119b3c:	200d883a 	mov	r6,r4
81119b40:	180b883a 	mov	r5,r3
81119b44:	1009883a 	mov	r4,r2
81119b48:	1108e980 	call	81108e98 <main>
81119b4c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
81119b50:	01000044 	movi	r4,1
81119b54:	111956c0 	call	8111956c <close>
  exit (result);
81119b58:	e13fff17 	ldw	r4,-4(fp)
81119b5c:	111e3780 	call	8111e378 <exit>

81119b60 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
81119b60:	defffe04 	addi	sp,sp,-8
81119b64:	df000115 	stw	fp,4(sp)
81119b68:	df000104 	addi	fp,sp,4
81119b6c:	e13fff15 	stw	r4,-4(fp)
}
81119b70:	0001883a 	nop
81119b74:	e037883a 	mov	sp,fp
81119b78:	df000017 	ldw	fp,0(sp)
81119b7c:	dec00104 	addi	sp,sp,4
81119b80:	f800283a 	ret

81119b84 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81119b84:	defffe04 	addi	sp,sp,-8
81119b88:	df000115 	stw	fp,4(sp)
81119b8c:	df000104 	addi	fp,sp,4
81119b90:	e13fff15 	stw	r4,-4(fp)
}
81119b94:	0001883a 	nop
81119b98:	e037883a 	mov	sp,fp
81119b9c:	df000017 	ldw	fp,0(sp)
81119ba0:	dec00104 	addi	sp,sp,4
81119ba4:	f800283a 	ret

81119ba8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
81119ba8:	defff204 	addi	sp,sp,-56
81119bac:	dfc00a15 	stw	ra,40(sp)
81119bb0:	df000915 	stw	fp,36(sp)
81119bb4:	df000904 	addi	fp,sp,36
81119bb8:	e13fff15 	stw	r4,-4(fp)
81119bbc:	e1400215 	stw	r5,8(fp)
81119bc0:	e1800315 	stw	r6,12(fp)
81119bc4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
81119bc8:	e0800204 	addi	r2,fp,8
81119bcc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
81119bd0:	e0bfff17 	ldw	r2,-4(fp)
81119bd4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
81119bd8:	00006f06 	br	81119d98 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
81119bdc:	e0bff807 	ldb	r2,-32(fp)
81119be0:	10800960 	cmpeqi	r2,r2,37
81119be4:	1000041e 	bne	r2,zero,81119bf8 <alt_printf+0x50>
        {
            alt_putchar(c);
81119be8:	e0bff807 	ldb	r2,-32(fp)
81119bec:	1009883a 	mov	r4,r2
81119bf0:	1119dd40 	call	81119dd4 <alt_putchar>
81119bf4:	00006806 	br	81119d98 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
81119bf8:	e0bff717 	ldw	r2,-36(fp)
81119bfc:	10c00044 	addi	r3,r2,1
81119c00:	e0fff715 	stw	r3,-36(fp)
81119c04:	10800003 	ldbu	r2,0(r2)
81119c08:	e0bff805 	stb	r2,-32(fp)
81119c0c:	e0bff807 	ldb	r2,-32(fp)
81119c10:	10006926 	beq	r2,zero,81119db8 <alt_printf+0x210>
            {
                if (c == '%')
81119c14:	e0bff807 	ldb	r2,-32(fp)
81119c18:	10800958 	cmpnei	r2,r2,37
81119c1c:	1000041e 	bne	r2,zero,81119c30 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
81119c20:	e0bff807 	ldb	r2,-32(fp)
81119c24:	1009883a 	mov	r4,r2
81119c28:	1119dd40 	call	81119dd4 <alt_putchar>
81119c2c:	00005a06 	br	81119d98 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
81119c30:	e0bff807 	ldb	r2,-32(fp)
81119c34:	108018d8 	cmpnei	r2,r2,99
81119c38:	1000081e 	bne	r2,zero,81119c5c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
81119c3c:	e0bffe17 	ldw	r2,-8(fp)
81119c40:	10c00104 	addi	r3,r2,4
81119c44:	e0fffe15 	stw	r3,-8(fp)
81119c48:	10800017 	ldw	r2,0(r2)
81119c4c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
81119c50:	e13ffd17 	ldw	r4,-12(fp)
81119c54:	1119dd40 	call	81119dd4 <alt_putchar>
81119c58:	00004f06 	br	81119d98 <alt_printf+0x1f0>
                }
                else if (c == 'x')
81119c5c:	e0bff807 	ldb	r2,-32(fp)
81119c60:	10801e18 	cmpnei	r2,r2,120
81119c64:	1000341e 	bne	r2,zero,81119d38 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
81119c68:	e0bffe17 	ldw	r2,-8(fp)
81119c6c:	10c00104 	addi	r3,r2,4
81119c70:	e0fffe15 	stw	r3,-8(fp)
81119c74:	10800017 	ldw	r2,0(r2)
81119c78:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81119c7c:	e0bffb17 	ldw	r2,-20(fp)
81119c80:	1000031e 	bne	r2,zero,81119c90 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
81119c84:	01000c04 	movi	r4,48
81119c88:	1119dd40 	call	81119dd4 <alt_putchar>
                        continue;
81119c8c:	00004206 	br	81119d98 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81119c90:	00800704 	movi	r2,28
81119c94:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81119c98:	00000306 	br	81119ca8 <alt_printf+0x100>
                        digit_shift -= 4;
81119c9c:	e0bff917 	ldw	r2,-28(fp)
81119ca0:	10bfff04 	addi	r2,r2,-4
81119ca4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81119ca8:	00c003c4 	movi	r3,15
81119cac:	e0bff917 	ldw	r2,-28(fp)
81119cb0:	1884983a 	sll	r2,r3,r2
81119cb4:	1007883a 	mov	r3,r2
81119cb8:	e0bffb17 	ldw	r2,-20(fp)
81119cbc:	1884703a 	and	r2,r3,r2
81119cc0:	103ff626 	beq	r2,zero,81119c9c <__reset+0xfb0f9c9c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81119cc4:	00001906 	br	81119d2c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81119cc8:	00c003c4 	movi	r3,15
81119ccc:	e0bff917 	ldw	r2,-28(fp)
81119cd0:	1884983a 	sll	r2,r3,r2
81119cd4:	1007883a 	mov	r3,r2
81119cd8:	e0bffb17 	ldw	r2,-20(fp)
81119cdc:	1886703a 	and	r3,r3,r2
81119ce0:	e0bff917 	ldw	r2,-28(fp)
81119ce4:	1884d83a 	srl	r2,r3,r2
81119ce8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
81119cec:	e0bffc17 	ldw	r2,-16(fp)
81119cf0:	108002a8 	cmpgeui	r2,r2,10
81119cf4:	1000041e 	bne	r2,zero,81119d08 <alt_printf+0x160>
                            c = '0' + digit;
81119cf8:	e0bffc17 	ldw	r2,-16(fp)
81119cfc:	10800c04 	addi	r2,r2,48
81119d00:	e0bff805 	stb	r2,-32(fp)
81119d04:	00000306 	br	81119d14 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
81119d08:	e0bffc17 	ldw	r2,-16(fp)
81119d0c:	108015c4 	addi	r2,r2,87
81119d10:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
81119d14:	e0bff807 	ldb	r2,-32(fp)
81119d18:	1009883a 	mov	r4,r2
81119d1c:	1119dd40 	call	81119dd4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81119d20:	e0bff917 	ldw	r2,-28(fp)
81119d24:	10bfff04 	addi	r2,r2,-4
81119d28:	e0bff915 	stw	r2,-28(fp)
81119d2c:	e0bff917 	ldw	r2,-28(fp)
81119d30:	103fe50e 	bge	r2,zero,81119cc8 <__reset+0xfb0f9cc8>
81119d34:	00001806 	br	81119d98 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
81119d38:	e0bff807 	ldb	r2,-32(fp)
81119d3c:	10801cd8 	cmpnei	r2,r2,115
81119d40:	1000151e 	bne	r2,zero,81119d98 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
81119d44:	e0bffe17 	ldw	r2,-8(fp)
81119d48:	10c00104 	addi	r3,r2,4
81119d4c:	e0fffe15 	stw	r3,-8(fp)
81119d50:	10800017 	ldw	r2,0(r2)
81119d54:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
81119d58:	00000906 	br	81119d80 <alt_printf+0x1d8>
                      alt_putchar(*s++);
81119d5c:	e0bffa17 	ldw	r2,-24(fp)
81119d60:	10c00044 	addi	r3,r2,1
81119d64:	e0fffa15 	stw	r3,-24(fp)
81119d68:	10800003 	ldbu	r2,0(r2)
81119d6c:	10803fcc 	andi	r2,r2,255
81119d70:	1080201c 	xori	r2,r2,128
81119d74:	10bfe004 	addi	r2,r2,-128
81119d78:	1009883a 	mov	r4,r2
81119d7c:	1119dd40 	call	81119dd4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81119d80:	e0bffa17 	ldw	r2,-24(fp)
81119d84:	10800003 	ldbu	r2,0(r2)
81119d88:	10803fcc 	andi	r2,r2,255
81119d8c:	1080201c 	xori	r2,r2,128
81119d90:	10bfe004 	addi	r2,r2,-128
81119d94:	103ff11e 	bne	r2,zero,81119d5c <__reset+0xfb0f9d5c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81119d98:	e0bff717 	ldw	r2,-36(fp)
81119d9c:	10c00044 	addi	r3,r2,1
81119da0:	e0fff715 	stw	r3,-36(fp)
81119da4:	10800003 	ldbu	r2,0(r2)
81119da8:	e0bff805 	stb	r2,-32(fp)
81119dac:	e0bff807 	ldb	r2,-32(fp)
81119db0:	103f8a1e 	bne	r2,zero,81119bdc <__reset+0xfb0f9bdc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81119db4:	00000106 	br	81119dbc <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81119db8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81119dbc:	0001883a 	nop
81119dc0:	e037883a 	mov	sp,fp
81119dc4:	dfc00117 	ldw	ra,4(sp)
81119dc8:	df000017 	ldw	fp,0(sp)
81119dcc:	dec00504 	addi	sp,sp,20
81119dd0:	f800283a 	ret

81119dd4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
81119dd4:	defffd04 	addi	sp,sp,-12
81119dd8:	dfc00215 	stw	ra,8(sp)
81119ddc:	df000115 	stw	fp,4(sp)
81119de0:	df000104 	addi	fp,sp,4
81119de4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
81119de8:	d0a00b17 	ldw	r2,-32724(gp)
81119dec:	10800217 	ldw	r2,8(r2)
81119df0:	100b883a 	mov	r5,r2
81119df4:	e13fff17 	ldw	r4,-4(fp)
81119df8:	1113e400 	call	81113e40 <putc>
#endif
#endif
}
81119dfc:	e037883a 	mov	sp,fp
81119e00:	dfc00117 	ldw	ra,4(sp)
81119e04:	df000017 	ldw	fp,0(sp)
81119e08:	dec00204 	addi	sp,sp,8
81119e0c:	f800283a 	ret

81119e10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81119e10:	defffe04 	addi	sp,sp,-8
81119e14:	dfc00115 	stw	ra,4(sp)
81119e18:	df000015 	stw	fp,0(sp)
81119e1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81119e20:	d0a01517 	ldw	r2,-32684(gp)
81119e24:	10000326 	beq	r2,zero,81119e34 <alt_get_errno+0x24>
81119e28:	d0a01517 	ldw	r2,-32684(gp)
81119e2c:	103ee83a 	callr	r2
81119e30:	00000106 	br	81119e38 <alt_get_errno+0x28>
81119e34:	d0a04304 	addi	r2,gp,-32500
}
81119e38:	e037883a 	mov	sp,fp
81119e3c:	dfc00117 	ldw	ra,4(sp)
81119e40:	df000017 	ldw	fp,0(sp)
81119e44:	dec00204 	addi	sp,sp,8
81119e48:	f800283a 	ret

81119e4c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81119e4c:	defff904 	addi	sp,sp,-28
81119e50:	dfc00615 	stw	ra,24(sp)
81119e54:	df000515 	stw	fp,20(sp)
81119e58:	df000504 	addi	fp,sp,20
81119e5c:	e13ffd15 	stw	r4,-12(fp)
81119e60:	e17ffe15 	stw	r5,-8(fp)
81119e64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81119e68:	e0bffd17 	ldw	r2,-12(fp)
81119e6c:	10000616 	blt	r2,zero,81119e88 <read+0x3c>
81119e70:	e0bffd17 	ldw	r2,-12(fp)
81119e74:	10c00324 	muli	r3,r2,12
81119e78:	00a044b4 	movhi	r2,33042
81119e7c:	10824504 	addi	r2,r2,2324
81119e80:	1885883a 	add	r2,r3,r2
81119e84:	00000106 	br	81119e8c <read+0x40>
81119e88:	0005883a 	mov	r2,zero
81119e8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81119e90:	e0bffb17 	ldw	r2,-20(fp)
81119e94:	10002226 	beq	r2,zero,81119f20 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81119e98:	e0bffb17 	ldw	r2,-20(fp)
81119e9c:	10800217 	ldw	r2,8(r2)
81119ea0:	108000cc 	andi	r2,r2,3
81119ea4:	10800060 	cmpeqi	r2,r2,1
81119ea8:	1000181e 	bne	r2,zero,81119f0c <read+0xc0>
        (fd->dev->read))
81119eac:	e0bffb17 	ldw	r2,-20(fp)
81119eb0:	10800017 	ldw	r2,0(r2)
81119eb4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81119eb8:	10001426 	beq	r2,zero,81119f0c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81119ebc:	e0bffb17 	ldw	r2,-20(fp)
81119ec0:	10800017 	ldw	r2,0(r2)
81119ec4:	10800517 	ldw	r2,20(r2)
81119ec8:	e0ffff17 	ldw	r3,-4(fp)
81119ecc:	180d883a 	mov	r6,r3
81119ed0:	e17ffe17 	ldw	r5,-8(fp)
81119ed4:	e13ffb17 	ldw	r4,-20(fp)
81119ed8:	103ee83a 	callr	r2
81119edc:	e0bffc15 	stw	r2,-16(fp)
81119ee0:	e0bffc17 	ldw	r2,-16(fp)
81119ee4:	1000070e 	bge	r2,zero,81119f04 <read+0xb8>
        {
          ALT_ERRNO = -rval;
81119ee8:	1119e100 	call	81119e10 <alt_get_errno>
81119eec:	1007883a 	mov	r3,r2
81119ef0:	e0bffc17 	ldw	r2,-16(fp)
81119ef4:	0085c83a 	sub	r2,zero,r2
81119ef8:	18800015 	stw	r2,0(r3)
          return -1;
81119efc:	00bfffc4 	movi	r2,-1
81119f00:	00000c06 	br	81119f34 <read+0xe8>
        }
        return rval;
81119f04:	e0bffc17 	ldw	r2,-16(fp)
81119f08:	00000a06 	br	81119f34 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
81119f0c:	1119e100 	call	81119e10 <alt_get_errno>
81119f10:	1007883a 	mov	r3,r2
81119f14:	00800344 	movi	r2,13
81119f18:	18800015 	stw	r2,0(r3)
81119f1c:	00000406 	br	81119f30 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81119f20:	1119e100 	call	81119e10 <alt_get_errno>
81119f24:	1007883a 	mov	r3,r2
81119f28:	00801444 	movi	r2,81
81119f2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
81119f30:	00bfffc4 	movi	r2,-1
}
81119f34:	e037883a 	mov	sp,fp
81119f38:	dfc00117 	ldw	ra,4(sp)
81119f3c:	df000017 	ldw	fp,0(sp)
81119f40:	dec00204 	addi	sp,sp,8
81119f44:	f800283a 	ret

81119f48 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81119f48:	defffe04 	addi	sp,sp,-8
81119f4c:	df000115 	stw	fp,4(sp)
81119f50:	df000104 	addi	fp,sp,4
81119f54:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81119f58:	e0bfff17 	ldw	r2,-4(fp)
81119f5c:	108000d0 	cmplti	r2,r2,3
81119f60:	10000d1e 	bne	r2,zero,81119f98 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
81119f64:	00a044b4 	movhi	r2,33042
81119f68:	10824504 	addi	r2,r2,2324
81119f6c:	e0ffff17 	ldw	r3,-4(fp)
81119f70:	18c00324 	muli	r3,r3,12
81119f74:	10c5883a 	add	r2,r2,r3
81119f78:	10800204 	addi	r2,r2,8
81119f7c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81119f80:	00a044b4 	movhi	r2,33042
81119f84:	10824504 	addi	r2,r2,2324
81119f88:	e0ffff17 	ldw	r3,-4(fp)
81119f8c:	18c00324 	muli	r3,r3,12
81119f90:	10c5883a 	add	r2,r2,r3
81119f94:	10000015 	stw	zero,0(r2)
  }
}
81119f98:	0001883a 	nop
81119f9c:	e037883a 	mov	sp,fp
81119fa0:	df000017 	ldw	fp,0(sp)
81119fa4:	dec00104 	addi	sp,sp,4
81119fa8:	f800283a 	ret

81119fac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81119fac:	defff904 	addi	sp,sp,-28
81119fb0:	df000615 	stw	fp,24(sp)
81119fb4:	df000604 	addi	fp,sp,24
81119fb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81119fbc:	0005303a 	rdctl	r2,status
81119fc0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81119fc4:	e0fffe17 	ldw	r3,-8(fp)
81119fc8:	00bfff84 	movi	r2,-2
81119fcc:	1884703a 	and	r2,r3,r2
81119fd0:	1001703a 	wrctl	status,r2
  
  return context;
81119fd4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81119fd8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81119fdc:	d0a01717 	ldw	r2,-32676(gp)
81119fe0:	10c000c4 	addi	r3,r2,3
81119fe4:	00bfff04 	movi	r2,-4
81119fe8:	1884703a 	and	r2,r3,r2
81119fec:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81119ff0:	d0e01717 	ldw	r3,-32676(gp)
81119ff4:	e0bfff17 	ldw	r2,-4(fp)
81119ff8:	1887883a 	add	r3,r3,r2
81119ffc:	00a04834 	movhi	r2,33056
8111a000:	10a80004 	addi	r2,r2,-24576
8111a004:	10c0062e 	bgeu	r2,r3,8111a020 <sbrk+0x74>
8111a008:	e0bffb17 	ldw	r2,-20(fp)
8111a00c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a010:	e0bffa17 	ldw	r2,-24(fp)
8111a014:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
8111a018:	00bfffc4 	movi	r2,-1
8111a01c:	00000b06 	br	8111a04c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
8111a020:	d0a01717 	ldw	r2,-32676(gp)
8111a024:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
8111a028:	d0e01717 	ldw	r3,-32676(gp)
8111a02c:	e0bfff17 	ldw	r2,-4(fp)
8111a030:	1885883a 	add	r2,r3,r2
8111a034:	d0a01715 	stw	r2,-32676(gp)
8111a038:	e0bffb17 	ldw	r2,-20(fp)
8111a03c:	e0bffc15 	stw	r2,-16(fp)
8111a040:	e0bffc17 	ldw	r2,-16(fp)
8111a044:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
8111a048:	e0bffd17 	ldw	r2,-12(fp)
} 
8111a04c:	e037883a 	mov	sp,fp
8111a050:	df000017 	ldw	fp,0(sp)
8111a054:	dec00104 	addi	sp,sp,4
8111a058:	f800283a 	ret

8111a05c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
8111a05c:	defffa04 	addi	sp,sp,-24
8111a060:	df000515 	stw	fp,20(sp)
8111a064:	df000504 	addi	fp,sp,20
8111a068:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a06c:	0005303a 	rdctl	r2,status
8111a070:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a074:	e0fffc17 	ldw	r3,-16(fp)
8111a078:	00bfff84 	movi	r2,-2
8111a07c:	1884703a 	and	r2,r3,r2
8111a080:	1001703a 	wrctl	status,r2
  
  return context;
8111a084:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
8111a088:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
8111a08c:	e0bfff17 	ldw	r2,-4(fp)
8111a090:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
8111a094:	e0bffd17 	ldw	r2,-12(fp)
8111a098:	10800017 	ldw	r2,0(r2)
8111a09c:	e0fffd17 	ldw	r3,-12(fp)
8111a0a0:	18c00117 	ldw	r3,4(r3)
8111a0a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
8111a0a8:	e0bffd17 	ldw	r2,-12(fp)
8111a0ac:	10800117 	ldw	r2,4(r2)
8111a0b0:	e0fffd17 	ldw	r3,-12(fp)
8111a0b4:	18c00017 	ldw	r3,0(r3)
8111a0b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8111a0bc:	e0bffd17 	ldw	r2,-12(fp)
8111a0c0:	e0fffd17 	ldw	r3,-12(fp)
8111a0c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
8111a0c8:	e0bffd17 	ldw	r2,-12(fp)
8111a0cc:	e0fffd17 	ldw	r3,-12(fp)
8111a0d0:	10c00015 	stw	r3,0(r2)
8111a0d4:	e0bffb17 	ldw	r2,-20(fp)
8111a0d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a0dc:	e0bffe17 	ldw	r2,-8(fp)
8111a0e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
8111a0e4:	0001883a 	nop
8111a0e8:	e037883a 	mov	sp,fp
8111a0ec:	df000017 	ldw	fp,0(sp)
8111a0f0:	dec00104 	addi	sp,sp,4
8111a0f4:	f800283a 	ret

8111a0f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8111a0f8:	defffb04 	addi	sp,sp,-20
8111a0fc:	dfc00415 	stw	ra,16(sp)
8111a100:	df000315 	stw	fp,12(sp)
8111a104:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8111a108:	d0a01817 	ldw	r2,-32672(gp)
8111a10c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8111a110:	d0a04917 	ldw	r2,-32476(gp)
8111a114:	10800044 	addi	r2,r2,1
8111a118:	d0a04915 	stw	r2,-32476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8111a11c:	00002e06 	br	8111a1d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
8111a120:	e0bffd17 	ldw	r2,-12(fp)
8111a124:	10800017 	ldw	r2,0(r2)
8111a128:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
8111a12c:	e0bffd17 	ldw	r2,-12(fp)
8111a130:	10800403 	ldbu	r2,16(r2)
8111a134:	10803fcc 	andi	r2,r2,255
8111a138:	10000426 	beq	r2,zero,8111a14c <alt_tick+0x54>
8111a13c:	d0a04917 	ldw	r2,-32476(gp)
8111a140:	1000021e 	bne	r2,zero,8111a14c <alt_tick+0x54>
    {
      alarm->rollover = 0;
8111a144:	e0bffd17 	ldw	r2,-12(fp)
8111a148:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
8111a14c:	e0bffd17 	ldw	r2,-12(fp)
8111a150:	10800217 	ldw	r2,8(r2)
8111a154:	d0e04917 	ldw	r3,-32476(gp)
8111a158:	18801d36 	bltu	r3,r2,8111a1d0 <alt_tick+0xd8>
8111a15c:	e0bffd17 	ldw	r2,-12(fp)
8111a160:	10800403 	ldbu	r2,16(r2)
8111a164:	10803fcc 	andi	r2,r2,255
8111a168:	1000191e 	bne	r2,zero,8111a1d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
8111a16c:	e0bffd17 	ldw	r2,-12(fp)
8111a170:	10800317 	ldw	r2,12(r2)
8111a174:	e0fffd17 	ldw	r3,-12(fp)
8111a178:	18c00517 	ldw	r3,20(r3)
8111a17c:	1809883a 	mov	r4,r3
8111a180:	103ee83a 	callr	r2
8111a184:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
8111a188:	e0bfff17 	ldw	r2,-4(fp)
8111a18c:	1000031e 	bne	r2,zero,8111a19c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
8111a190:	e13ffd17 	ldw	r4,-12(fp)
8111a194:	111a05c0 	call	8111a05c <alt_alarm_stop>
8111a198:	00000d06 	br	8111a1d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
8111a19c:	e0bffd17 	ldw	r2,-12(fp)
8111a1a0:	10c00217 	ldw	r3,8(r2)
8111a1a4:	e0bfff17 	ldw	r2,-4(fp)
8111a1a8:	1887883a 	add	r3,r3,r2
8111a1ac:	e0bffd17 	ldw	r2,-12(fp)
8111a1b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
8111a1b4:	e0bffd17 	ldw	r2,-12(fp)
8111a1b8:	10c00217 	ldw	r3,8(r2)
8111a1bc:	d0a04917 	ldw	r2,-32476(gp)
8111a1c0:	1880032e 	bgeu	r3,r2,8111a1d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
8111a1c4:	e0bffd17 	ldw	r2,-12(fp)
8111a1c8:	00c00044 	movi	r3,1
8111a1cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
8111a1d0:	e0bffe17 	ldw	r2,-8(fp)
8111a1d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8111a1d8:	e0fffd17 	ldw	r3,-12(fp)
8111a1dc:	d0a01804 	addi	r2,gp,-32672
8111a1e0:	18bfcf1e 	bne	r3,r2,8111a120 <__reset+0xfb0fa120>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
8111a1e4:	0001883a 	nop
}
8111a1e8:	0001883a 	nop
8111a1ec:	e037883a 	mov	sp,fp
8111a1f0:	dfc00117 	ldw	ra,4(sp)
8111a1f4:	df000017 	ldw	fp,0(sp)
8111a1f8:	dec00204 	addi	sp,sp,8
8111a1fc:	f800283a 	ret

8111a200 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
8111a200:	defffd04 	addi	sp,sp,-12
8111a204:	dfc00215 	stw	ra,8(sp)
8111a208:	df000115 	stw	fp,4(sp)
8111a20c:	df000104 	addi	fp,sp,4
8111a210:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
8111a214:	e13fff17 	ldw	r4,-4(fp)
8111a218:	11194080 	call	81119408 <alt_busy_sleep>
}
8111a21c:	e037883a 	mov	sp,fp
8111a220:	dfc00117 	ldw	ra,4(sp)
8111a224:	df000017 	ldw	fp,0(sp)
8111a228:	dec00204 	addi	sp,sp,8
8111a22c:	f800283a 	ret

8111a230 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111a230:	defffe04 	addi	sp,sp,-8
8111a234:	dfc00115 	stw	ra,4(sp)
8111a238:	df000015 	stw	fp,0(sp)
8111a23c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111a240:	d0a01517 	ldw	r2,-32684(gp)
8111a244:	10000326 	beq	r2,zero,8111a254 <alt_get_errno+0x24>
8111a248:	d0a01517 	ldw	r2,-32684(gp)
8111a24c:	103ee83a 	callr	r2
8111a250:	00000106 	br	8111a258 <alt_get_errno+0x28>
8111a254:	d0a04304 	addi	r2,gp,-32500
}
8111a258:	e037883a 	mov	sp,fp
8111a25c:	dfc00117 	ldw	ra,4(sp)
8111a260:	df000017 	ldw	fp,0(sp)
8111a264:	dec00204 	addi	sp,sp,8
8111a268:	f800283a 	ret

8111a26c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
8111a26c:	defff904 	addi	sp,sp,-28
8111a270:	dfc00615 	stw	ra,24(sp)
8111a274:	df000515 	stw	fp,20(sp)
8111a278:	df000504 	addi	fp,sp,20
8111a27c:	e13ffd15 	stw	r4,-12(fp)
8111a280:	e17ffe15 	stw	r5,-8(fp)
8111a284:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111a288:	e0bffd17 	ldw	r2,-12(fp)
8111a28c:	10000616 	blt	r2,zero,8111a2a8 <write+0x3c>
8111a290:	e0bffd17 	ldw	r2,-12(fp)
8111a294:	10c00324 	muli	r3,r2,12
8111a298:	00a044b4 	movhi	r2,33042
8111a29c:	10824504 	addi	r2,r2,2324
8111a2a0:	1885883a 	add	r2,r3,r2
8111a2a4:	00000106 	br	8111a2ac <write+0x40>
8111a2a8:	0005883a 	mov	r2,zero
8111a2ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8111a2b0:	e0bffb17 	ldw	r2,-20(fp)
8111a2b4:	10002126 	beq	r2,zero,8111a33c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
8111a2b8:	e0bffb17 	ldw	r2,-20(fp)
8111a2bc:	10800217 	ldw	r2,8(r2)
8111a2c0:	108000cc 	andi	r2,r2,3
8111a2c4:	10001826 	beq	r2,zero,8111a328 <write+0xbc>
8111a2c8:	e0bffb17 	ldw	r2,-20(fp)
8111a2cc:	10800017 	ldw	r2,0(r2)
8111a2d0:	10800617 	ldw	r2,24(r2)
8111a2d4:	10001426 	beq	r2,zero,8111a328 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8111a2d8:	e0bffb17 	ldw	r2,-20(fp)
8111a2dc:	10800017 	ldw	r2,0(r2)
8111a2e0:	10800617 	ldw	r2,24(r2)
8111a2e4:	e0ffff17 	ldw	r3,-4(fp)
8111a2e8:	180d883a 	mov	r6,r3
8111a2ec:	e17ffe17 	ldw	r5,-8(fp)
8111a2f0:	e13ffb17 	ldw	r4,-20(fp)
8111a2f4:	103ee83a 	callr	r2
8111a2f8:	e0bffc15 	stw	r2,-16(fp)
8111a2fc:	e0bffc17 	ldw	r2,-16(fp)
8111a300:	1000070e 	bge	r2,zero,8111a320 <write+0xb4>
      {
        ALT_ERRNO = -rval;
8111a304:	111a2300 	call	8111a230 <alt_get_errno>
8111a308:	1007883a 	mov	r3,r2
8111a30c:	e0bffc17 	ldw	r2,-16(fp)
8111a310:	0085c83a 	sub	r2,zero,r2
8111a314:	18800015 	stw	r2,0(r3)
        return -1;
8111a318:	00bfffc4 	movi	r2,-1
8111a31c:	00000c06 	br	8111a350 <write+0xe4>
      }
      return rval;
8111a320:	e0bffc17 	ldw	r2,-16(fp)
8111a324:	00000a06 	br	8111a350 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
8111a328:	111a2300 	call	8111a230 <alt_get_errno>
8111a32c:	1007883a 	mov	r3,r2
8111a330:	00800344 	movi	r2,13
8111a334:	18800015 	stw	r2,0(r3)
8111a338:	00000406 	br	8111a34c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
8111a33c:	111a2300 	call	8111a230 <alt_get_errno>
8111a340:	1007883a 	mov	r3,r2
8111a344:	00801444 	movi	r2,81
8111a348:	18800015 	stw	r2,0(r3)
  }
  return -1;
8111a34c:	00bfffc4 	movi	r2,-1
}
8111a350:	e037883a 	mov	sp,fp
8111a354:	dfc00117 	ldw	ra,4(sp)
8111a358:	df000017 	ldw	fp,0(sp)
8111a35c:	dec00204 	addi	sp,sp,8
8111a360:	f800283a 	ret

8111a364 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8111a364:	defffd04 	addi	sp,sp,-12
8111a368:	dfc00215 	stw	ra,8(sp)
8111a36c:	df000115 	stw	fp,4(sp)
8111a370:	df000104 	addi	fp,sp,4
8111a374:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8111a378:	d1601204 	addi	r5,gp,-32696
8111a37c:	e13fff17 	ldw	r4,-4(fp)
8111a380:	111d8d00 	call	8111d8d0 <alt_dev_llist_insert>
}
8111a384:	e037883a 	mov	sp,fp
8111a388:	dfc00117 	ldw	ra,4(sp)
8111a38c:	df000017 	ldw	fp,0(sp)
8111a390:	dec00204 	addi	sp,sp,8
8111a394:	f800283a 	ret

8111a398 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8111a398:	defffd04 	addi	sp,sp,-12
8111a39c:	dfc00215 	stw	ra,8(sp)
8111a3a0:	df000115 	stw	fp,4(sp)
8111a3a4:	df000104 	addi	fp,sp,4
8111a3a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
8111a3ac:	111e0f80 	call	8111e0f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
8111a3b0:	00800044 	movi	r2,1
8111a3b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8111a3b8:	0001883a 	nop
8111a3bc:	e037883a 	mov	sp,fp
8111a3c0:	dfc00117 	ldw	ra,4(sp)
8111a3c4:	df000017 	ldw	fp,0(sp)
8111a3c8:	dec00204 	addi	sp,sp,8
8111a3cc:	f800283a 	ret

8111a3d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8111a3d0:	defffe04 	addi	sp,sp,-8
8111a3d4:	dfc00115 	stw	ra,4(sp)
8111a3d8:	df000015 	stw	fp,0(sp)
8111a3dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
8111a3e0:	01c0fa04 	movi	r7,1000
8111a3e4:	01800304 	movi	r6,12
8111a3e8:	000b883a 	mov	r5,zero
8111a3ec:	01200034 	movhi	r4,32768
8111a3f0:	21022004 	addi	r4,r4,2176
8111a3f4:	111af980 	call	8111af98 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8111a3f8:	018002c4 	movi	r6,11
8111a3fc:	000b883a 	mov	r5,zero
8111a400:	012044b4 	movhi	r4,33042
8111a404:	2102af04 	addi	r4,r4,2748
8111a408:	111a61c0 	call	8111a61c <altera_avalon_jtag_uart_init>
8111a40c:	012044b4 	movhi	r4,33042
8111a410:	2102a504 	addi	r4,r4,2708
8111a414:	111a3640 	call	8111a364 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8111a418:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8111a41c:	018003c4 	movi	r6,15
8111a420:	000b883a 	mov	r5,zero
8111a424:	012044b4 	movhi	r4,33042
8111a428:	2106c704 	addi	r4,r4,6940
8111a42c:	111b1240 	call	8111b124 <altera_avalon_uart_init>
8111a430:	012044b4 	movhi	r4,33042
8111a434:	2106bd04 	addi	r4,r4,6900
8111a438:	111a3640 	call	8111a364 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
8111a43c:	00a044b4 	movhi	r2,33042
8111a440:	1086ee04 	addi	r2,r2,7096
8111a444:	10c00717 	ldw	r3,28(r2)
8111a448:	00a044b4 	movhi	r2,33042
8111a44c:	1086ee04 	addi	r2,r2,7096
8111a450:	10800817 	ldw	r2,32(r2)
8111a454:	100d883a 	mov	r6,r2
8111a458:	180b883a 	mov	r5,r3
8111a45c:	012044b4 	movhi	r4,33042
8111a460:	2106ee04 	addi	r4,r4,7096
8111a464:	111d4b80 	call	8111d4b8 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
8111a468:	00a044b4 	movhi	r2,33042
8111a46c:	10870604 	addi	r2,r2,7192
8111a470:	10c00717 	ldw	r3,28(r2)
8111a474:	00a044b4 	movhi	r2,33042
8111a478:	10870604 	addi	r2,r2,7192
8111a47c:	10800817 	ldw	r2,32(r2)
8111a480:	100d883a 	mov	r6,r2
8111a484:	180b883a 	mov	r5,r3
8111a488:	012044b4 	movhi	r4,33042
8111a48c:	21070604 	addi	r4,r4,7192
8111a490:	111d4b80 	call	8111d4b8 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
8111a494:	012044b4 	movhi	r4,33042
8111a498:	21071e04 	addi	r4,r4,7288
8111a49c:	111a3640 	call	8111a364 <alt_dev_reg>
}
8111a4a0:	0001883a 	nop
8111a4a4:	e037883a 	mov	sp,fp
8111a4a8:	dfc00117 	ldw	ra,4(sp)
8111a4ac:	df000017 	ldw	fp,0(sp)
8111a4b0:	dec00204 	addi	sp,sp,8
8111a4b4:	f800283a 	ret

8111a4b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8111a4b8:	defffa04 	addi	sp,sp,-24
8111a4bc:	dfc00515 	stw	ra,20(sp)
8111a4c0:	df000415 	stw	fp,16(sp)
8111a4c4:	df000404 	addi	fp,sp,16
8111a4c8:	e13ffd15 	stw	r4,-12(fp)
8111a4cc:	e17ffe15 	stw	r5,-8(fp)
8111a4d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111a4d4:	e0bffd17 	ldw	r2,-12(fp)
8111a4d8:	10800017 	ldw	r2,0(r2)
8111a4dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8111a4e0:	e0bffc17 	ldw	r2,-16(fp)
8111a4e4:	10c00a04 	addi	r3,r2,40
8111a4e8:	e0bffd17 	ldw	r2,-12(fp)
8111a4ec:	10800217 	ldw	r2,8(r2)
8111a4f0:	100f883a 	mov	r7,r2
8111a4f4:	e1bfff17 	ldw	r6,-4(fp)
8111a4f8:	e17ffe17 	ldw	r5,-8(fp)
8111a4fc:	1809883a 	mov	r4,r3
8111a500:	111aae00 	call	8111aae0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8111a504:	e037883a 	mov	sp,fp
8111a508:	dfc00117 	ldw	ra,4(sp)
8111a50c:	df000017 	ldw	fp,0(sp)
8111a510:	dec00204 	addi	sp,sp,8
8111a514:	f800283a 	ret

8111a518 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8111a518:	defffa04 	addi	sp,sp,-24
8111a51c:	dfc00515 	stw	ra,20(sp)
8111a520:	df000415 	stw	fp,16(sp)
8111a524:	df000404 	addi	fp,sp,16
8111a528:	e13ffd15 	stw	r4,-12(fp)
8111a52c:	e17ffe15 	stw	r5,-8(fp)
8111a530:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111a534:	e0bffd17 	ldw	r2,-12(fp)
8111a538:	10800017 	ldw	r2,0(r2)
8111a53c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
8111a540:	e0bffc17 	ldw	r2,-16(fp)
8111a544:	10c00a04 	addi	r3,r2,40
8111a548:	e0bffd17 	ldw	r2,-12(fp)
8111a54c:	10800217 	ldw	r2,8(r2)
8111a550:	100f883a 	mov	r7,r2
8111a554:	e1bfff17 	ldw	r6,-4(fp)
8111a558:	e17ffe17 	ldw	r5,-8(fp)
8111a55c:	1809883a 	mov	r4,r3
8111a560:	111acfc0 	call	8111acfc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
8111a564:	e037883a 	mov	sp,fp
8111a568:	dfc00117 	ldw	ra,4(sp)
8111a56c:	df000017 	ldw	fp,0(sp)
8111a570:	dec00204 	addi	sp,sp,8
8111a574:	f800283a 	ret

8111a578 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
8111a578:	defffc04 	addi	sp,sp,-16
8111a57c:	dfc00315 	stw	ra,12(sp)
8111a580:	df000215 	stw	fp,8(sp)
8111a584:	df000204 	addi	fp,sp,8
8111a588:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111a58c:	e0bfff17 	ldw	r2,-4(fp)
8111a590:	10800017 	ldw	r2,0(r2)
8111a594:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
8111a598:	e0bffe17 	ldw	r2,-8(fp)
8111a59c:	10c00a04 	addi	r3,r2,40
8111a5a0:	e0bfff17 	ldw	r2,-4(fp)
8111a5a4:	10800217 	ldw	r2,8(r2)
8111a5a8:	100b883a 	mov	r5,r2
8111a5ac:	1809883a 	mov	r4,r3
8111a5b0:	111a9880 	call	8111a988 <altera_avalon_jtag_uart_close>
}
8111a5b4:	e037883a 	mov	sp,fp
8111a5b8:	dfc00117 	ldw	ra,4(sp)
8111a5bc:	df000017 	ldw	fp,0(sp)
8111a5c0:	dec00204 	addi	sp,sp,8
8111a5c4:	f800283a 	ret

8111a5c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8111a5c8:	defffa04 	addi	sp,sp,-24
8111a5cc:	dfc00515 	stw	ra,20(sp)
8111a5d0:	df000415 	stw	fp,16(sp)
8111a5d4:	df000404 	addi	fp,sp,16
8111a5d8:	e13ffd15 	stw	r4,-12(fp)
8111a5dc:	e17ffe15 	stw	r5,-8(fp)
8111a5e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8111a5e4:	e0bffd17 	ldw	r2,-12(fp)
8111a5e8:	10800017 	ldw	r2,0(r2)
8111a5ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8111a5f0:	e0bffc17 	ldw	r2,-16(fp)
8111a5f4:	10800a04 	addi	r2,r2,40
8111a5f8:	e1bfff17 	ldw	r6,-4(fp)
8111a5fc:	e17ffe17 	ldw	r5,-8(fp)
8111a600:	1009883a 	mov	r4,r2
8111a604:	111a9f00 	call	8111a9f0 <altera_avalon_jtag_uart_ioctl>
}
8111a608:	e037883a 	mov	sp,fp
8111a60c:	dfc00117 	ldw	ra,4(sp)
8111a610:	df000017 	ldw	fp,0(sp)
8111a614:	dec00204 	addi	sp,sp,8
8111a618:	f800283a 	ret

8111a61c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8111a61c:	defffa04 	addi	sp,sp,-24
8111a620:	dfc00515 	stw	ra,20(sp)
8111a624:	df000415 	stw	fp,16(sp)
8111a628:	df000404 	addi	fp,sp,16
8111a62c:	e13ffd15 	stw	r4,-12(fp)
8111a630:	e17ffe15 	stw	r5,-8(fp)
8111a634:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8111a638:	e0bffd17 	ldw	r2,-12(fp)
8111a63c:	00c00044 	movi	r3,1
8111a640:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8111a644:	e0bffd17 	ldw	r2,-12(fp)
8111a648:	10800017 	ldw	r2,0(r2)
8111a64c:	10800104 	addi	r2,r2,4
8111a650:	1007883a 	mov	r3,r2
8111a654:	e0bffd17 	ldw	r2,-12(fp)
8111a658:	10800817 	ldw	r2,32(r2)
8111a65c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
8111a660:	e0bffe17 	ldw	r2,-8(fp)
8111a664:	e0ffff17 	ldw	r3,-4(fp)
8111a668:	d8000015 	stw	zero,0(sp)
8111a66c:	e1fffd17 	ldw	r7,-12(fp)
8111a670:	01a044b4 	movhi	r6,33042
8111a674:	31a9b704 	addi	r6,r6,-22820
8111a678:	180b883a 	mov	r5,r3
8111a67c:	1009883a 	mov	r4,r2
8111a680:	111dac40 	call	8111dac4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8111a684:	e0bffd17 	ldw	r2,-12(fp)
8111a688:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
8111a68c:	e0bffd17 	ldw	r2,-12(fp)
8111a690:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8111a694:	d0e04817 	ldw	r3,-32480(gp)
8111a698:	e1fffd17 	ldw	r7,-12(fp)
8111a69c:	01a044b4 	movhi	r6,33042
8111a6a0:	31aa3a04 	addi	r6,r6,-22296
8111a6a4:	180b883a 	mov	r5,r3
8111a6a8:	1009883a 	mov	r4,r2
8111a6ac:	111d7680 	call	8111d768 <alt_alarm_start>
8111a6b0:	1000040e 	bge	r2,zero,8111a6c4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8111a6b4:	e0fffd17 	ldw	r3,-12(fp)
8111a6b8:	00a00034 	movhi	r2,32768
8111a6bc:	10bfffc4 	addi	r2,r2,-1
8111a6c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8111a6c4:	0001883a 	nop
8111a6c8:	e037883a 	mov	sp,fp
8111a6cc:	dfc00117 	ldw	ra,4(sp)
8111a6d0:	df000017 	ldw	fp,0(sp)
8111a6d4:	dec00204 	addi	sp,sp,8
8111a6d8:	f800283a 	ret

8111a6dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
8111a6dc:	defff804 	addi	sp,sp,-32
8111a6e0:	df000715 	stw	fp,28(sp)
8111a6e4:	df000704 	addi	fp,sp,28
8111a6e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
8111a6ec:	e0bfff17 	ldw	r2,-4(fp)
8111a6f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
8111a6f4:	e0bffb17 	ldw	r2,-20(fp)
8111a6f8:	10800017 	ldw	r2,0(r2)
8111a6fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8111a700:	e0bffc17 	ldw	r2,-16(fp)
8111a704:	10800104 	addi	r2,r2,4
8111a708:	10800037 	ldwio	r2,0(r2)
8111a70c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8111a710:	e0bffd17 	ldw	r2,-12(fp)
8111a714:	1080c00c 	andi	r2,r2,768
8111a718:	10006d26 	beq	r2,zero,8111a8d0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
8111a71c:	e0bffd17 	ldw	r2,-12(fp)
8111a720:	1080400c 	andi	r2,r2,256
8111a724:	10003526 	beq	r2,zero,8111a7fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
8111a728:	00800074 	movhi	r2,1
8111a72c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111a730:	e0bffb17 	ldw	r2,-20(fp)
8111a734:	10800a17 	ldw	r2,40(r2)
8111a738:	10800044 	addi	r2,r2,1
8111a73c:	1081ffcc 	andi	r2,r2,2047
8111a740:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
8111a744:	e0bffb17 	ldw	r2,-20(fp)
8111a748:	10c00b17 	ldw	r3,44(r2)
8111a74c:	e0bffe17 	ldw	r2,-8(fp)
8111a750:	18801526 	beq	r3,r2,8111a7a8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
8111a754:	e0bffc17 	ldw	r2,-16(fp)
8111a758:	10800037 	ldwio	r2,0(r2)
8111a75c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
8111a760:	e0bff917 	ldw	r2,-28(fp)
8111a764:	10a0000c 	andi	r2,r2,32768
8111a768:	10001126 	beq	r2,zero,8111a7b0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8111a76c:	e0bffb17 	ldw	r2,-20(fp)
8111a770:	10800a17 	ldw	r2,40(r2)
8111a774:	e0fff917 	ldw	r3,-28(fp)
8111a778:	1809883a 	mov	r4,r3
8111a77c:	e0fffb17 	ldw	r3,-20(fp)
8111a780:	1885883a 	add	r2,r3,r2
8111a784:	10800e04 	addi	r2,r2,56
8111a788:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111a78c:	e0bffb17 	ldw	r2,-20(fp)
8111a790:	10800a17 	ldw	r2,40(r2)
8111a794:	10800044 	addi	r2,r2,1
8111a798:	10c1ffcc 	andi	r3,r2,2047
8111a79c:	e0bffb17 	ldw	r2,-20(fp)
8111a7a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
8111a7a4:	003fe206 	br	8111a730 <__reset+0xfb0fa730>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
8111a7a8:	0001883a 	nop
8111a7ac:	00000106 	br	8111a7b4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
8111a7b0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8111a7b4:	e0bff917 	ldw	r2,-28(fp)
8111a7b8:	10bfffec 	andhi	r2,r2,65535
8111a7bc:	10000f26 	beq	r2,zero,8111a7fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8111a7c0:	e0bffb17 	ldw	r2,-20(fp)
8111a7c4:	10c00817 	ldw	r3,32(r2)
8111a7c8:	00bfff84 	movi	r2,-2
8111a7cc:	1886703a 	and	r3,r3,r2
8111a7d0:	e0bffb17 	ldw	r2,-20(fp)
8111a7d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8111a7d8:	e0bffc17 	ldw	r2,-16(fp)
8111a7dc:	10800104 	addi	r2,r2,4
8111a7e0:	1007883a 	mov	r3,r2
8111a7e4:	e0bffb17 	ldw	r2,-20(fp)
8111a7e8:	10800817 	ldw	r2,32(r2)
8111a7ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8111a7f0:	e0bffc17 	ldw	r2,-16(fp)
8111a7f4:	10800104 	addi	r2,r2,4
8111a7f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
8111a7fc:	e0bffd17 	ldw	r2,-12(fp)
8111a800:	1080800c 	andi	r2,r2,512
8111a804:	103fbe26 	beq	r2,zero,8111a700 <__reset+0xfb0fa700>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8111a808:	e0bffd17 	ldw	r2,-12(fp)
8111a80c:	1004d43a 	srli	r2,r2,16
8111a810:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8111a814:	00001406 	br	8111a868 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8111a818:	e0bffc17 	ldw	r2,-16(fp)
8111a81c:	e0fffb17 	ldw	r3,-20(fp)
8111a820:	18c00d17 	ldw	r3,52(r3)
8111a824:	e13ffb17 	ldw	r4,-20(fp)
8111a828:	20c7883a 	add	r3,r4,r3
8111a82c:	18c20e04 	addi	r3,r3,2104
8111a830:	18c00003 	ldbu	r3,0(r3)
8111a834:	18c03fcc 	andi	r3,r3,255
8111a838:	18c0201c 	xori	r3,r3,128
8111a83c:	18ffe004 	addi	r3,r3,-128
8111a840:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111a844:	e0bffb17 	ldw	r2,-20(fp)
8111a848:	10800d17 	ldw	r2,52(r2)
8111a84c:	10800044 	addi	r2,r2,1
8111a850:	10c1ffcc 	andi	r3,r2,2047
8111a854:	e0bffb17 	ldw	r2,-20(fp)
8111a858:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
8111a85c:	e0bffa17 	ldw	r2,-24(fp)
8111a860:	10bfffc4 	addi	r2,r2,-1
8111a864:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
8111a868:	e0bffa17 	ldw	r2,-24(fp)
8111a86c:	10000526 	beq	r2,zero,8111a884 <altera_avalon_jtag_uart_irq+0x1a8>
8111a870:	e0bffb17 	ldw	r2,-20(fp)
8111a874:	10c00d17 	ldw	r3,52(r2)
8111a878:	e0bffb17 	ldw	r2,-20(fp)
8111a87c:	10800c17 	ldw	r2,48(r2)
8111a880:	18bfe51e 	bne	r3,r2,8111a818 <__reset+0xfb0fa818>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
8111a884:	e0bffa17 	ldw	r2,-24(fp)
8111a888:	103f9d26 	beq	r2,zero,8111a700 <__reset+0xfb0fa700>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8111a88c:	e0bffb17 	ldw	r2,-20(fp)
8111a890:	10c00817 	ldw	r3,32(r2)
8111a894:	00bfff44 	movi	r2,-3
8111a898:	1886703a 	and	r3,r3,r2
8111a89c:	e0bffb17 	ldw	r2,-20(fp)
8111a8a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8111a8a4:	e0bffb17 	ldw	r2,-20(fp)
8111a8a8:	10800017 	ldw	r2,0(r2)
8111a8ac:	10800104 	addi	r2,r2,4
8111a8b0:	1007883a 	mov	r3,r2
8111a8b4:	e0bffb17 	ldw	r2,-20(fp)
8111a8b8:	10800817 	ldw	r2,32(r2)
8111a8bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8111a8c0:	e0bffc17 	ldw	r2,-16(fp)
8111a8c4:	10800104 	addi	r2,r2,4
8111a8c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
8111a8cc:	003f8c06 	br	8111a700 <__reset+0xfb0fa700>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8111a8d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8111a8d4:	0001883a 	nop
8111a8d8:	e037883a 	mov	sp,fp
8111a8dc:	df000017 	ldw	fp,0(sp)
8111a8e0:	dec00104 	addi	sp,sp,4
8111a8e4:	f800283a 	ret

8111a8e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
8111a8e8:	defff804 	addi	sp,sp,-32
8111a8ec:	df000715 	stw	fp,28(sp)
8111a8f0:	df000704 	addi	fp,sp,28
8111a8f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8111a8f8:	e0bffb17 	ldw	r2,-20(fp)
8111a8fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8111a900:	e0bff917 	ldw	r2,-28(fp)
8111a904:	10800017 	ldw	r2,0(r2)
8111a908:	10800104 	addi	r2,r2,4
8111a90c:	10800037 	ldwio	r2,0(r2)
8111a910:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8111a914:	e0bffa17 	ldw	r2,-24(fp)
8111a918:	1081000c 	andi	r2,r2,1024
8111a91c:	10000b26 	beq	r2,zero,8111a94c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8111a920:	e0bff917 	ldw	r2,-28(fp)
8111a924:	10800017 	ldw	r2,0(r2)
8111a928:	10800104 	addi	r2,r2,4
8111a92c:	1007883a 	mov	r3,r2
8111a930:	e0bff917 	ldw	r2,-28(fp)
8111a934:	10800817 	ldw	r2,32(r2)
8111a938:	10810014 	ori	r2,r2,1024
8111a93c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8111a940:	e0bff917 	ldw	r2,-28(fp)
8111a944:	10000915 	stw	zero,36(r2)
8111a948:	00000a06 	br	8111a974 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8111a94c:	e0bff917 	ldw	r2,-28(fp)
8111a950:	10c00917 	ldw	r3,36(r2)
8111a954:	00a00034 	movhi	r2,32768
8111a958:	10bfff04 	addi	r2,r2,-4
8111a95c:	10c00536 	bltu	r2,r3,8111a974 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
8111a960:	e0bff917 	ldw	r2,-28(fp)
8111a964:	10800917 	ldw	r2,36(r2)
8111a968:	10c00044 	addi	r3,r2,1
8111a96c:	e0bff917 	ldw	r2,-28(fp)
8111a970:	10c00915 	stw	r3,36(r2)
8111a974:	d0a04817 	ldw	r2,-32480(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
8111a978:	e037883a 	mov	sp,fp
8111a97c:	df000017 	ldw	fp,0(sp)
8111a980:	dec00104 	addi	sp,sp,4
8111a984:	f800283a 	ret

8111a988 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
8111a988:	defffd04 	addi	sp,sp,-12
8111a98c:	df000215 	stw	fp,8(sp)
8111a990:	df000204 	addi	fp,sp,8
8111a994:	e13ffe15 	stw	r4,-8(fp)
8111a998:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8111a99c:	00000506 	br	8111a9b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8111a9a0:	e0bfff17 	ldw	r2,-4(fp)
8111a9a4:	1090000c 	andi	r2,r2,16384
8111a9a8:	10000226 	beq	r2,zero,8111a9b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
8111a9ac:	00bffd44 	movi	r2,-11
8111a9b0:	00000b06 	br	8111a9e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8111a9b4:	e0bffe17 	ldw	r2,-8(fp)
8111a9b8:	10c00d17 	ldw	r3,52(r2)
8111a9bc:	e0bffe17 	ldw	r2,-8(fp)
8111a9c0:	10800c17 	ldw	r2,48(r2)
8111a9c4:	18800526 	beq	r3,r2,8111a9dc <altera_avalon_jtag_uart_close+0x54>
8111a9c8:	e0bffe17 	ldw	r2,-8(fp)
8111a9cc:	10c00917 	ldw	r3,36(r2)
8111a9d0:	e0bffe17 	ldw	r2,-8(fp)
8111a9d4:	10800117 	ldw	r2,4(r2)
8111a9d8:	18bff136 	bltu	r3,r2,8111a9a0 <__reset+0xfb0fa9a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8111a9dc:	0005883a 	mov	r2,zero
}
8111a9e0:	e037883a 	mov	sp,fp
8111a9e4:	df000017 	ldw	fp,0(sp)
8111a9e8:	dec00104 	addi	sp,sp,4
8111a9ec:	f800283a 	ret

8111a9f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8111a9f0:	defffa04 	addi	sp,sp,-24
8111a9f4:	df000515 	stw	fp,20(sp)
8111a9f8:	df000504 	addi	fp,sp,20
8111a9fc:	e13ffd15 	stw	r4,-12(fp)
8111aa00:	e17ffe15 	stw	r5,-8(fp)
8111aa04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
8111aa08:	00bff9c4 	movi	r2,-25
8111aa0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8111aa10:	e0bffe17 	ldw	r2,-8(fp)
8111aa14:	10da8060 	cmpeqi	r3,r2,27137
8111aa18:	1800031e 	bne	r3,zero,8111aa28 <altera_avalon_jtag_uart_ioctl+0x38>
8111aa1c:	109a80a0 	cmpeqi	r2,r2,27138
8111aa20:	1000181e 	bne	r2,zero,8111aa84 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
8111aa24:	00002906 	br	8111aacc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
8111aa28:	e0bffd17 	ldw	r2,-12(fp)
8111aa2c:	10c00117 	ldw	r3,4(r2)
8111aa30:	00a00034 	movhi	r2,32768
8111aa34:	10bfffc4 	addi	r2,r2,-1
8111aa38:	18802126 	beq	r3,r2,8111aac0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
8111aa3c:	e0bfff17 	ldw	r2,-4(fp)
8111aa40:	10800017 	ldw	r2,0(r2)
8111aa44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8111aa48:	e0bffc17 	ldw	r2,-16(fp)
8111aa4c:	10800090 	cmplti	r2,r2,2
8111aa50:	1000061e 	bne	r2,zero,8111aa6c <altera_avalon_jtag_uart_ioctl+0x7c>
8111aa54:	e0fffc17 	ldw	r3,-16(fp)
8111aa58:	00a00034 	movhi	r2,32768
8111aa5c:	10bfffc4 	addi	r2,r2,-1
8111aa60:	18800226 	beq	r3,r2,8111aa6c <altera_avalon_jtag_uart_ioctl+0x7c>
8111aa64:	e0bffc17 	ldw	r2,-16(fp)
8111aa68:	00000206 	br	8111aa74 <altera_avalon_jtag_uart_ioctl+0x84>
8111aa6c:	00a00034 	movhi	r2,32768
8111aa70:	10bfff84 	addi	r2,r2,-2
8111aa74:	e0fffd17 	ldw	r3,-12(fp)
8111aa78:	18800115 	stw	r2,4(r3)
      rc = 0;
8111aa7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8111aa80:	00000f06 	br	8111aac0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8111aa84:	e0bffd17 	ldw	r2,-12(fp)
8111aa88:	10c00117 	ldw	r3,4(r2)
8111aa8c:	00a00034 	movhi	r2,32768
8111aa90:	10bfffc4 	addi	r2,r2,-1
8111aa94:	18800c26 	beq	r3,r2,8111aac8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8111aa98:	e0bffd17 	ldw	r2,-12(fp)
8111aa9c:	10c00917 	ldw	r3,36(r2)
8111aaa0:	e0bffd17 	ldw	r2,-12(fp)
8111aaa4:	10800117 	ldw	r2,4(r2)
8111aaa8:	1885803a 	cmpltu	r2,r3,r2
8111aaac:	10c03fcc 	andi	r3,r2,255
8111aab0:	e0bfff17 	ldw	r2,-4(fp)
8111aab4:	10c00015 	stw	r3,0(r2)
      rc = 0;
8111aab8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8111aabc:	00000206 	br	8111aac8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8111aac0:	0001883a 	nop
8111aac4:	00000106 	br	8111aacc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8111aac8:	0001883a 	nop

  default:
    break;
  }

  return rc;
8111aacc:	e0bffb17 	ldw	r2,-20(fp)
}
8111aad0:	e037883a 	mov	sp,fp
8111aad4:	df000017 	ldw	fp,0(sp)
8111aad8:	dec00104 	addi	sp,sp,4
8111aadc:	f800283a 	ret

8111aae0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
8111aae0:	defff304 	addi	sp,sp,-52
8111aae4:	dfc00c15 	stw	ra,48(sp)
8111aae8:	df000b15 	stw	fp,44(sp)
8111aaec:	df000b04 	addi	fp,sp,44
8111aaf0:	e13ffc15 	stw	r4,-16(fp)
8111aaf4:	e17ffd15 	stw	r5,-12(fp)
8111aaf8:	e1bffe15 	stw	r6,-8(fp)
8111aafc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
8111ab00:	e0bffd17 	ldw	r2,-12(fp)
8111ab04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8111ab08:	00004706 	br	8111ac28 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8111ab0c:	e0bffc17 	ldw	r2,-16(fp)
8111ab10:	10800a17 	ldw	r2,40(r2)
8111ab14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
8111ab18:	e0bffc17 	ldw	r2,-16(fp)
8111ab1c:	10800b17 	ldw	r2,44(r2)
8111ab20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
8111ab24:	e0fff717 	ldw	r3,-36(fp)
8111ab28:	e0bff817 	ldw	r2,-32(fp)
8111ab2c:	18800536 	bltu	r3,r2,8111ab44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
8111ab30:	e0fff717 	ldw	r3,-36(fp)
8111ab34:	e0bff817 	ldw	r2,-32(fp)
8111ab38:	1885c83a 	sub	r2,r3,r2
8111ab3c:	e0bff615 	stw	r2,-40(fp)
8111ab40:	00000406 	br	8111ab54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
8111ab44:	00c20004 	movi	r3,2048
8111ab48:	e0bff817 	ldw	r2,-32(fp)
8111ab4c:	1885c83a 	sub	r2,r3,r2
8111ab50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8111ab54:	e0bff617 	ldw	r2,-40(fp)
8111ab58:	10001e26 	beq	r2,zero,8111abd4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
8111ab5c:	e0fffe17 	ldw	r3,-8(fp)
8111ab60:	e0bff617 	ldw	r2,-40(fp)
8111ab64:	1880022e 	bgeu	r3,r2,8111ab70 <altera_avalon_jtag_uart_read+0x90>
        n = space;
8111ab68:	e0bffe17 	ldw	r2,-8(fp)
8111ab6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
8111ab70:	e0bffc17 	ldw	r2,-16(fp)
8111ab74:	10c00e04 	addi	r3,r2,56
8111ab78:	e0bff817 	ldw	r2,-32(fp)
8111ab7c:	1885883a 	add	r2,r3,r2
8111ab80:	e1bff617 	ldw	r6,-40(fp)
8111ab84:	100b883a 	mov	r5,r2
8111ab88:	e13ff517 	ldw	r4,-44(fp)
8111ab8c:	110ce640 	call	8110ce64 <memcpy>
      ptr   += n;
8111ab90:	e0fff517 	ldw	r3,-44(fp)
8111ab94:	e0bff617 	ldw	r2,-40(fp)
8111ab98:	1885883a 	add	r2,r3,r2
8111ab9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
8111aba0:	e0fffe17 	ldw	r3,-8(fp)
8111aba4:	e0bff617 	ldw	r2,-40(fp)
8111aba8:	1885c83a 	sub	r2,r3,r2
8111abac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111abb0:	e0fff817 	ldw	r3,-32(fp)
8111abb4:	e0bff617 	ldw	r2,-40(fp)
8111abb8:	1885883a 	add	r2,r3,r2
8111abbc:	10c1ffcc 	andi	r3,r2,2047
8111abc0:	e0bffc17 	ldw	r2,-16(fp)
8111abc4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
8111abc8:	e0bffe17 	ldw	r2,-8(fp)
8111abcc:	00bfcf16 	blt	zero,r2,8111ab0c <__reset+0xfb0fab0c>
8111abd0:	00000106 	br	8111abd8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8111abd4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
8111abd8:	e0fff517 	ldw	r3,-44(fp)
8111abdc:	e0bffd17 	ldw	r2,-12(fp)
8111abe0:	1880141e 	bne	r3,r2,8111ac34 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8111abe4:	e0bfff17 	ldw	r2,-4(fp)
8111abe8:	1090000c 	andi	r2,r2,16384
8111abec:	1000131e 	bne	r2,zero,8111ac3c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
8111abf0:	0001883a 	nop
8111abf4:	e0bffc17 	ldw	r2,-16(fp)
8111abf8:	10c00a17 	ldw	r3,40(r2)
8111abfc:	e0bff717 	ldw	r2,-36(fp)
8111ac00:	1880051e 	bne	r3,r2,8111ac18 <altera_avalon_jtag_uart_read+0x138>
8111ac04:	e0bffc17 	ldw	r2,-16(fp)
8111ac08:	10c00917 	ldw	r3,36(r2)
8111ac0c:	e0bffc17 	ldw	r2,-16(fp)
8111ac10:	10800117 	ldw	r2,4(r2)
8111ac14:	18bff736 	bltu	r3,r2,8111abf4 <__reset+0xfb0fabf4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
8111ac18:	e0bffc17 	ldw	r2,-16(fp)
8111ac1c:	10c00a17 	ldw	r3,40(r2)
8111ac20:	e0bff717 	ldw	r2,-36(fp)
8111ac24:	18800726 	beq	r3,r2,8111ac44 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8111ac28:	e0bffe17 	ldw	r2,-8(fp)
8111ac2c:	00bfb716 	blt	zero,r2,8111ab0c <__reset+0xfb0fab0c>
8111ac30:	00000506 	br	8111ac48 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8111ac34:	0001883a 	nop
8111ac38:	00000306 	br	8111ac48 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
8111ac3c:	0001883a 	nop
8111ac40:	00000106 	br	8111ac48 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8111ac44:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
8111ac48:	e0fff517 	ldw	r3,-44(fp)
8111ac4c:	e0bffd17 	ldw	r2,-12(fp)
8111ac50:	18801826 	beq	r3,r2,8111acb4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111ac54:	0005303a 	rdctl	r2,status
8111ac58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111ac5c:	e0fffb17 	ldw	r3,-20(fp)
8111ac60:	00bfff84 	movi	r2,-2
8111ac64:	1884703a 	and	r2,r3,r2
8111ac68:	1001703a 	wrctl	status,r2
  
  return context;
8111ac6c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
8111ac70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8111ac74:	e0bffc17 	ldw	r2,-16(fp)
8111ac78:	10800817 	ldw	r2,32(r2)
8111ac7c:	10c00054 	ori	r3,r2,1
8111ac80:	e0bffc17 	ldw	r2,-16(fp)
8111ac84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8111ac88:	e0bffc17 	ldw	r2,-16(fp)
8111ac8c:	10800017 	ldw	r2,0(r2)
8111ac90:	10800104 	addi	r2,r2,4
8111ac94:	1007883a 	mov	r3,r2
8111ac98:	e0bffc17 	ldw	r2,-16(fp)
8111ac9c:	10800817 	ldw	r2,32(r2)
8111aca0:	18800035 	stwio	r2,0(r3)
8111aca4:	e0bffa17 	ldw	r2,-24(fp)
8111aca8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111acac:	e0bff917 	ldw	r2,-28(fp)
8111acb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8111acb4:	e0fff517 	ldw	r3,-44(fp)
8111acb8:	e0bffd17 	ldw	r2,-12(fp)
8111acbc:	18800426 	beq	r3,r2,8111acd0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
8111acc0:	e0fff517 	ldw	r3,-44(fp)
8111acc4:	e0bffd17 	ldw	r2,-12(fp)
8111acc8:	1885c83a 	sub	r2,r3,r2
8111accc:	00000606 	br	8111ace8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
8111acd0:	e0bfff17 	ldw	r2,-4(fp)
8111acd4:	1090000c 	andi	r2,r2,16384
8111acd8:	10000226 	beq	r2,zero,8111ace4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
8111acdc:	00bffd44 	movi	r2,-11
8111ace0:	00000106 	br	8111ace8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
8111ace4:	00bffec4 	movi	r2,-5
}
8111ace8:	e037883a 	mov	sp,fp
8111acec:	dfc00117 	ldw	ra,4(sp)
8111acf0:	df000017 	ldw	fp,0(sp)
8111acf4:	dec00204 	addi	sp,sp,8
8111acf8:	f800283a 	ret

8111acfc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
8111acfc:	defff304 	addi	sp,sp,-52
8111ad00:	dfc00c15 	stw	ra,48(sp)
8111ad04:	df000b15 	stw	fp,44(sp)
8111ad08:	df000b04 	addi	fp,sp,44
8111ad0c:	e13ffc15 	stw	r4,-16(fp)
8111ad10:	e17ffd15 	stw	r5,-12(fp)
8111ad14:	e1bffe15 	stw	r6,-8(fp)
8111ad18:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8111ad1c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
8111ad20:	e0bffd17 	ldw	r2,-12(fp)
8111ad24:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8111ad28:	00003706 	br	8111ae08 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
8111ad2c:	e0bffc17 	ldw	r2,-16(fp)
8111ad30:	10800c17 	ldw	r2,48(r2)
8111ad34:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
8111ad38:	e0bffc17 	ldw	r2,-16(fp)
8111ad3c:	10800d17 	ldw	r2,52(r2)
8111ad40:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
8111ad44:	e0fff917 	ldw	r3,-28(fp)
8111ad48:	e0bff517 	ldw	r2,-44(fp)
8111ad4c:	1880062e 	bgeu	r3,r2,8111ad68 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
8111ad50:	e0fff517 	ldw	r3,-44(fp)
8111ad54:	e0bff917 	ldw	r2,-28(fp)
8111ad58:	1885c83a 	sub	r2,r3,r2
8111ad5c:	10bfffc4 	addi	r2,r2,-1
8111ad60:	e0bff615 	stw	r2,-40(fp)
8111ad64:	00000b06 	br	8111ad94 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
8111ad68:	e0bff517 	ldw	r2,-44(fp)
8111ad6c:	10000526 	beq	r2,zero,8111ad84 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
8111ad70:	00c20004 	movi	r3,2048
8111ad74:	e0bff917 	ldw	r2,-28(fp)
8111ad78:	1885c83a 	sub	r2,r3,r2
8111ad7c:	e0bff615 	stw	r2,-40(fp)
8111ad80:	00000406 	br	8111ad94 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8111ad84:	00c1ffc4 	movi	r3,2047
8111ad88:	e0bff917 	ldw	r2,-28(fp)
8111ad8c:	1885c83a 	sub	r2,r3,r2
8111ad90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8111ad94:	e0bff617 	ldw	r2,-40(fp)
8111ad98:	10001e26 	beq	r2,zero,8111ae14 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
8111ad9c:	e0fffe17 	ldw	r3,-8(fp)
8111ada0:	e0bff617 	ldw	r2,-40(fp)
8111ada4:	1880022e 	bgeu	r3,r2,8111adb0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
8111ada8:	e0bffe17 	ldw	r2,-8(fp)
8111adac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
8111adb0:	e0bffc17 	ldw	r2,-16(fp)
8111adb4:	10c20e04 	addi	r3,r2,2104
8111adb8:	e0bff917 	ldw	r2,-28(fp)
8111adbc:	1885883a 	add	r2,r3,r2
8111adc0:	e1bff617 	ldw	r6,-40(fp)
8111adc4:	e17ffd17 	ldw	r5,-12(fp)
8111adc8:	1009883a 	mov	r4,r2
8111adcc:	110ce640 	call	8110ce64 <memcpy>
      ptr   += n;
8111add0:	e0fffd17 	ldw	r3,-12(fp)
8111add4:	e0bff617 	ldw	r2,-40(fp)
8111add8:	1885883a 	add	r2,r3,r2
8111addc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8111ade0:	e0fffe17 	ldw	r3,-8(fp)
8111ade4:	e0bff617 	ldw	r2,-40(fp)
8111ade8:	1885c83a 	sub	r2,r3,r2
8111adec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111adf0:	e0fff917 	ldw	r3,-28(fp)
8111adf4:	e0bff617 	ldw	r2,-40(fp)
8111adf8:	1885883a 	add	r2,r3,r2
8111adfc:	10c1ffcc 	andi	r3,r2,2047
8111ae00:	e0bffc17 	ldw	r2,-16(fp)
8111ae04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8111ae08:	e0bffe17 	ldw	r2,-8(fp)
8111ae0c:	00bfc716 	blt	zero,r2,8111ad2c <__reset+0xfb0fad2c>
8111ae10:	00000106 	br	8111ae18 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8111ae14:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111ae18:	0005303a 	rdctl	r2,status
8111ae1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111ae20:	e0fffb17 	ldw	r3,-20(fp)
8111ae24:	00bfff84 	movi	r2,-2
8111ae28:	1884703a 	and	r2,r3,r2
8111ae2c:	1001703a 	wrctl	status,r2
  
  return context;
8111ae30:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8111ae34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8111ae38:	e0bffc17 	ldw	r2,-16(fp)
8111ae3c:	10800817 	ldw	r2,32(r2)
8111ae40:	10c00094 	ori	r3,r2,2
8111ae44:	e0bffc17 	ldw	r2,-16(fp)
8111ae48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8111ae4c:	e0bffc17 	ldw	r2,-16(fp)
8111ae50:	10800017 	ldw	r2,0(r2)
8111ae54:	10800104 	addi	r2,r2,4
8111ae58:	1007883a 	mov	r3,r2
8111ae5c:	e0bffc17 	ldw	r2,-16(fp)
8111ae60:	10800817 	ldw	r2,32(r2)
8111ae64:	18800035 	stwio	r2,0(r3)
8111ae68:	e0bffa17 	ldw	r2,-24(fp)
8111ae6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111ae70:	e0bff817 	ldw	r2,-32(fp)
8111ae74:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8111ae78:	e0bffe17 	ldw	r2,-8(fp)
8111ae7c:	0080100e 	bge	zero,r2,8111aec0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
8111ae80:	e0bfff17 	ldw	r2,-4(fp)
8111ae84:	1090000c 	andi	r2,r2,16384
8111ae88:	1000101e 	bne	r2,zero,8111aecc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8111ae8c:	0001883a 	nop
8111ae90:	e0bffc17 	ldw	r2,-16(fp)
8111ae94:	10c00d17 	ldw	r3,52(r2)
8111ae98:	e0bff517 	ldw	r2,-44(fp)
8111ae9c:	1880051e 	bne	r3,r2,8111aeb4 <altera_avalon_jtag_uart_write+0x1b8>
8111aea0:	e0bffc17 	ldw	r2,-16(fp)
8111aea4:	10c00917 	ldw	r3,36(r2)
8111aea8:	e0bffc17 	ldw	r2,-16(fp)
8111aeac:	10800117 	ldw	r2,4(r2)
8111aeb0:	18bff736 	bltu	r3,r2,8111ae90 <__reset+0xfb0fae90>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8111aeb4:	e0bffc17 	ldw	r2,-16(fp)
8111aeb8:	10800917 	ldw	r2,36(r2)
8111aebc:	1000051e 	bne	r2,zero,8111aed4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
8111aec0:	e0bffe17 	ldw	r2,-8(fp)
8111aec4:	00bfd016 	blt	zero,r2,8111ae08 <__reset+0xfb0fae08>
8111aec8:	00000306 	br	8111aed8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8111aecc:	0001883a 	nop
8111aed0:	00000106 	br	8111aed8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8111aed4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
8111aed8:	e0fffd17 	ldw	r3,-12(fp)
8111aedc:	e0bff717 	ldw	r2,-36(fp)
8111aee0:	18800426 	beq	r3,r2,8111aef4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
8111aee4:	e0fffd17 	ldw	r3,-12(fp)
8111aee8:	e0bff717 	ldw	r2,-36(fp)
8111aeec:	1885c83a 	sub	r2,r3,r2
8111aef0:	00000606 	br	8111af0c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
8111aef4:	e0bfff17 	ldw	r2,-4(fp)
8111aef8:	1090000c 	andi	r2,r2,16384
8111aefc:	10000226 	beq	r2,zero,8111af08 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
8111af00:	00bffd44 	movi	r2,-11
8111af04:	00000106 	br	8111af0c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8111af08:	00bffec4 	movi	r2,-5
}
8111af0c:	e037883a 	mov	sp,fp
8111af10:	dfc00117 	ldw	ra,4(sp)
8111af14:	df000017 	ldw	fp,0(sp)
8111af18:	dec00204 	addi	sp,sp,8
8111af1c:	f800283a 	ret

8111af20 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8111af20:	defffa04 	addi	sp,sp,-24
8111af24:	dfc00515 	stw	ra,20(sp)
8111af28:	df000415 	stw	fp,16(sp)
8111af2c:	df000404 	addi	fp,sp,16
8111af30:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8111af34:	0007883a 	mov	r3,zero
8111af38:	e0bfff17 	ldw	r2,-4(fp)
8111af3c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8111af40:	e0bfff17 	ldw	r2,-4(fp)
8111af44:	10800104 	addi	r2,r2,4
8111af48:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111af4c:	0005303a 	rdctl	r2,status
8111af50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111af54:	e0fffd17 	ldw	r3,-12(fp)
8111af58:	00bfff84 	movi	r2,-2
8111af5c:	1884703a 	and	r2,r3,r2
8111af60:	1001703a 	wrctl	status,r2
  
  return context;
8111af64:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
8111af68:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
8111af6c:	111a0f80 	call	8111a0f8 <alt_tick>
8111af70:	e0bffc17 	ldw	r2,-16(fp)
8111af74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111af78:	e0bffe17 	ldw	r2,-8(fp)
8111af7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8111af80:	0001883a 	nop
8111af84:	e037883a 	mov	sp,fp
8111af88:	dfc00117 	ldw	ra,4(sp)
8111af8c:	df000017 	ldw	fp,0(sp)
8111af90:	dec00204 	addi	sp,sp,8
8111af94:	f800283a 	ret

8111af98 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
8111af98:	defff804 	addi	sp,sp,-32
8111af9c:	dfc00715 	stw	ra,28(sp)
8111afa0:	df000615 	stw	fp,24(sp)
8111afa4:	df000604 	addi	fp,sp,24
8111afa8:	e13ffc15 	stw	r4,-16(fp)
8111afac:	e17ffd15 	stw	r5,-12(fp)
8111afb0:	e1bffe15 	stw	r6,-8(fp)
8111afb4:	e1ffff15 	stw	r7,-4(fp)
8111afb8:	e0bfff17 	ldw	r2,-4(fp)
8111afbc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
8111afc0:	d0a04817 	ldw	r2,-32480(gp)
8111afc4:	1000021e 	bne	r2,zero,8111afd0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
8111afc8:	e0bffb17 	ldw	r2,-20(fp)
8111afcc:	d0a04815 	stw	r2,-32480(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8111afd0:	e0bffc17 	ldw	r2,-16(fp)
8111afd4:	10800104 	addi	r2,r2,4
8111afd8:	00c001c4 	movi	r3,7
8111afdc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8111afe0:	d8000015 	stw	zero,0(sp)
8111afe4:	e1fffc17 	ldw	r7,-16(fp)
8111afe8:	01a044b4 	movhi	r6,33042
8111afec:	31abc804 	addi	r6,r6,-20704
8111aff0:	e17ffe17 	ldw	r5,-8(fp)
8111aff4:	e13ffd17 	ldw	r4,-12(fp)
8111aff8:	111dac40 	call	8111dac4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
8111affc:	0001883a 	nop
8111b000:	e037883a 	mov	sp,fp
8111b004:	dfc00117 	ldw	ra,4(sp)
8111b008:	df000017 	ldw	fp,0(sp)
8111b00c:	dec00204 	addi	sp,sp,8
8111b010:	f800283a 	ret

8111b014 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8111b014:	defffa04 	addi	sp,sp,-24
8111b018:	dfc00515 	stw	ra,20(sp)
8111b01c:	df000415 	stw	fp,16(sp)
8111b020:	df000404 	addi	fp,sp,16
8111b024:	e13ffd15 	stw	r4,-12(fp)
8111b028:	e17ffe15 	stw	r5,-8(fp)
8111b02c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8111b030:	e0bffd17 	ldw	r2,-12(fp)
8111b034:	10800017 	ldw	r2,0(r2)
8111b038:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
8111b03c:	e0bffc17 	ldw	r2,-16(fp)
8111b040:	10c00a04 	addi	r3,r2,40
8111b044:	e0bffd17 	ldw	r2,-12(fp)
8111b048:	10800217 	ldw	r2,8(r2)
8111b04c:	100f883a 	mov	r7,r2
8111b050:	e1bfff17 	ldw	r6,-4(fp)
8111b054:	e17ffe17 	ldw	r5,-8(fp)
8111b058:	1809883a 	mov	r4,r3
8111b05c:	111b5280 	call	8111b528 <altera_avalon_uart_read>
      fd->fd_flags);
}
8111b060:	e037883a 	mov	sp,fp
8111b064:	dfc00117 	ldw	ra,4(sp)
8111b068:	df000017 	ldw	fp,0(sp)
8111b06c:	dec00204 	addi	sp,sp,8
8111b070:	f800283a 	ret

8111b074 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8111b074:	defffa04 	addi	sp,sp,-24
8111b078:	dfc00515 	stw	ra,20(sp)
8111b07c:	df000415 	stw	fp,16(sp)
8111b080:	df000404 	addi	fp,sp,16
8111b084:	e13ffd15 	stw	r4,-12(fp)
8111b088:	e17ffe15 	stw	r5,-8(fp)
8111b08c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8111b090:	e0bffd17 	ldw	r2,-12(fp)
8111b094:	10800017 	ldw	r2,0(r2)
8111b098:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
8111b09c:	e0bffc17 	ldw	r2,-16(fp)
8111b0a0:	10c00a04 	addi	r3,r2,40
8111b0a4:	e0bffd17 	ldw	r2,-12(fp)
8111b0a8:	10800217 	ldw	r2,8(r2)
8111b0ac:	100f883a 	mov	r7,r2
8111b0b0:	e1bfff17 	ldw	r6,-4(fp)
8111b0b4:	e17ffe17 	ldw	r5,-8(fp)
8111b0b8:	1809883a 	mov	r4,r3
8111b0bc:	111b7400 	call	8111b740 <altera_avalon_uart_write>
      fd->fd_flags);
}
8111b0c0:	e037883a 	mov	sp,fp
8111b0c4:	dfc00117 	ldw	ra,4(sp)
8111b0c8:	df000017 	ldw	fp,0(sp)
8111b0cc:	dec00204 	addi	sp,sp,8
8111b0d0:	f800283a 	ret

8111b0d4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
8111b0d4:	defffc04 	addi	sp,sp,-16
8111b0d8:	dfc00315 	stw	ra,12(sp)
8111b0dc:	df000215 	stw	fp,8(sp)
8111b0e0:	df000204 	addi	fp,sp,8
8111b0e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8111b0e8:	e0bfff17 	ldw	r2,-4(fp)
8111b0ec:	10800017 	ldw	r2,0(r2)
8111b0f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
8111b0f4:	e0bffe17 	ldw	r2,-8(fp)
8111b0f8:	10c00a04 	addi	r3,r2,40
8111b0fc:	e0bfff17 	ldw	r2,-4(fp)
8111b100:	10800217 	ldw	r2,8(r2)
8111b104:	100b883a 	mov	r5,r2
8111b108:	1809883a 	mov	r4,r3
8111b10c:	111b4980 	call	8111b498 <altera_avalon_uart_close>
}
8111b110:	e037883a 	mov	sp,fp
8111b114:	dfc00117 	ldw	ra,4(sp)
8111b118:	df000017 	ldw	fp,0(sp)
8111b11c:	dec00204 	addi	sp,sp,8
8111b120:	f800283a 	ret

8111b124 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
8111b124:	defff804 	addi	sp,sp,-32
8111b128:	dfc00715 	stw	ra,28(sp)
8111b12c:	df000615 	stw	fp,24(sp)
8111b130:	df000604 	addi	fp,sp,24
8111b134:	e13ffd15 	stw	r4,-12(fp)
8111b138:	e17ffe15 	stw	r5,-8(fp)
8111b13c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
8111b140:	e0bffd17 	ldw	r2,-12(fp)
8111b144:	10800017 	ldw	r2,0(r2)
8111b148:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
8111b14c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8111b150:	1000041e 	bne	r2,zero,8111b164 <altera_avalon_uart_init+0x40>
8111b154:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8111b158:	1000021e 	bne	r2,zero,8111b164 <altera_avalon_uart_init+0x40>
8111b15c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8111b160:	10000226 	beq	r2,zero,8111b16c <altera_avalon_uart_init+0x48>
8111b164:	00800044 	movi	r2,1
8111b168:	00000106 	br	8111b170 <altera_avalon_uart_init+0x4c>
8111b16c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8111b170:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
8111b174:	e0bffc17 	ldw	r2,-16(fp)
8111b178:	10000f1e 	bne	r2,zero,8111b1b8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
8111b17c:	e0bffd17 	ldw	r2,-12(fp)
8111b180:	00c32004 	movi	r3,3200
8111b184:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
8111b188:	e0bffb17 	ldw	r2,-20(fp)
8111b18c:	10800304 	addi	r2,r2,12
8111b190:	e0fffd17 	ldw	r3,-12(fp)
8111b194:	18c00117 	ldw	r3,4(r3)
8111b198:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
8111b19c:	d8000015 	stw	zero,0(sp)
8111b1a0:	e1fffd17 	ldw	r7,-12(fp)
8111b1a4:	01a044b4 	movhi	r6,33042
8111b1a8:	31ac7404 	addi	r6,r6,-20016
8111b1ac:	e17fff17 	ldw	r5,-4(fp)
8111b1b0:	e13ffe17 	ldw	r4,-8(fp)
8111b1b4:	111dac40 	call	8111dac4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
8111b1b8:	0001883a 	nop
8111b1bc:	e037883a 	mov	sp,fp
8111b1c0:	dfc00117 	ldw	ra,4(sp)
8111b1c4:	df000017 	ldw	fp,0(sp)
8111b1c8:	dec00204 	addi	sp,sp,8
8111b1cc:	f800283a 	ret

8111b1d0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
8111b1d0:	defffa04 	addi	sp,sp,-24
8111b1d4:	dfc00515 	stw	ra,20(sp)
8111b1d8:	df000415 	stw	fp,16(sp)
8111b1dc:	df000404 	addi	fp,sp,16
8111b1e0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
8111b1e4:	e0bfff17 	ldw	r2,-4(fp)
8111b1e8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
8111b1ec:	e0bffc17 	ldw	r2,-16(fp)
8111b1f0:	10800017 	ldw	r2,0(r2)
8111b1f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
8111b1f8:	e0bffd17 	ldw	r2,-12(fp)
8111b1fc:	10800204 	addi	r2,r2,8
8111b200:	10800037 	ldwio	r2,0(r2)
8111b204:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
8111b208:	e0bffd17 	ldw	r2,-12(fp)
8111b20c:	10800204 	addi	r2,r2,8
8111b210:	0007883a 	mov	r3,zero
8111b214:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
8111b218:	e0bffd17 	ldw	r2,-12(fp)
8111b21c:	10800204 	addi	r2,r2,8
8111b220:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
8111b224:	e0bffe17 	ldw	r2,-8(fp)
8111b228:	1080200c 	andi	r2,r2,128
8111b22c:	10000326 	beq	r2,zero,8111b23c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
8111b230:	e17ffe17 	ldw	r5,-8(fp)
8111b234:	e13ffc17 	ldw	r4,-16(fp)
8111b238:	111b26c0 	call	8111b26c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
8111b23c:	e0bffe17 	ldw	r2,-8(fp)
8111b240:	1081100c 	andi	r2,r2,1088
8111b244:	10000326 	beq	r2,zero,8111b254 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
8111b248:	e17ffe17 	ldw	r5,-8(fp)
8111b24c:	e13ffc17 	ldw	r4,-16(fp)
8111b250:	111b3500 	call	8111b350 <altera_avalon_uart_txirq>
  }
  

}
8111b254:	0001883a 	nop
8111b258:	e037883a 	mov	sp,fp
8111b25c:	dfc00117 	ldw	ra,4(sp)
8111b260:	df000017 	ldw	fp,0(sp)
8111b264:	dec00204 	addi	sp,sp,8
8111b268:	f800283a 	ret

8111b26c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8111b26c:	defffc04 	addi	sp,sp,-16
8111b270:	df000315 	stw	fp,12(sp)
8111b274:	df000304 	addi	fp,sp,12
8111b278:	e13ffe15 	stw	r4,-8(fp)
8111b27c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
8111b280:	e0bfff17 	ldw	r2,-4(fp)
8111b284:	108000cc 	andi	r2,r2,3
8111b288:	10002c1e 	bne	r2,zero,8111b33c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
8111b28c:	e0bffe17 	ldw	r2,-8(fp)
8111b290:	10800317 	ldw	r2,12(r2)
8111b294:	e0bffe17 	ldw	r2,-8(fp)
8111b298:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8111b29c:	e0bffe17 	ldw	r2,-8(fp)
8111b2a0:	10800317 	ldw	r2,12(r2)
8111b2a4:	10800044 	addi	r2,r2,1
8111b2a8:	10800fcc 	andi	r2,r2,63
8111b2ac:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
8111b2b0:	e0bffe17 	ldw	r2,-8(fp)
8111b2b4:	10800317 	ldw	r2,12(r2)
8111b2b8:	e0fffe17 	ldw	r3,-8(fp)
8111b2bc:	18c00017 	ldw	r3,0(r3)
8111b2c0:	18c00037 	ldwio	r3,0(r3)
8111b2c4:	1809883a 	mov	r4,r3
8111b2c8:	e0fffe17 	ldw	r3,-8(fp)
8111b2cc:	1885883a 	add	r2,r3,r2
8111b2d0:	10800704 	addi	r2,r2,28
8111b2d4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8111b2d8:	e0bffe17 	ldw	r2,-8(fp)
8111b2dc:	e0fffd17 	ldw	r3,-12(fp)
8111b2e0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8111b2e4:	e0bffe17 	ldw	r2,-8(fp)
8111b2e8:	10800317 	ldw	r2,12(r2)
8111b2ec:	10800044 	addi	r2,r2,1
8111b2f0:	10800fcc 	andi	r2,r2,63
8111b2f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8111b2f8:	e0bffe17 	ldw	r2,-8(fp)
8111b2fc:	10c00217 	ldw	r3,8(r2)
8111b300:	e0bffd17 	ldw	r2,-12(fp)
8111b304:	18800e1e 	bne	r3,r2,8111b340 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8111b308:	e0bffe17 	ldw	r2,-8(fp)
8111b30c:	10c00117 	ldw	r3,4(r2)
8111b310:	00bfdfc4 	movi	r2,-129
8111b314:	1886703a 	and	r3,r3,r2
8111b318:	e0bffe17 	ldw	r2,-8(fp)
8111b31c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
8111b320:	e0bffe17 	ldw	r2,-8(fp)
8111b324:	10800017 	ldw	r2,0(r2)
8111b328:	10800304 	addi	r2,r2,12
8111b32c:	e0fffe17 	ldw	r3,-8(fp)
8111b330:	18c00117 	ldw	r3,4(r3)
8111b334:	10c00035 	stwio	r3,0(r2)
8111b338:	00000106 	br	8111b340 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
8111b33c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
8111b340:	e037883a 	mov	sp,fp
8111b344:	df000017 	ldw	fp,0(sp)
8111b348:	dec00104 	addi	sp,sp,4
8111b34c:	f800283a 	ret

8111b350 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8111b350:	defffb04 	addi	sp,sp,-20
8111b354:	df000415 	stw	fp,16(sp)
8111b358:	df000404 	addi	fp,sp,16
8111b35c:	e13ffc15 	stw	r4,-16(fp)
8111b360:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
8111b364:	e0bffc17 	ldw	r2,-16(fp)
8111b368:	10c00417 	ldw	r3,16(r2)
8111b36c:	e0bffc17 	ldw	r2,-16(fp)
8111b370:	10800517 	ldw	r2,20(r2)
8111b374:	18803226 	beq	r3,r2,8111b440 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8111b378:	e0bffc17 	ldw	r2,-16(fp)
8111b37c:	10800617 	ldw	r2,24(r2)
8111b380:	1080008c 	andi	r2,r2,2
8111b384:	10000326 	beq	r2,zero,8111b394 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8111b388:	e0bffd17 	ldw	r2,-12(fp)
8111b38c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8111b390:	10001d26 	beq	r2,zero,8111b408 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
8111b394:	e0bffc17 	ldw	r2,-16(fp)
8111b398:	10800417 	ldw	r2,16(r2)
8111b39c:	e0bffc17 	ldw	r2,-16(fp)
8111b3a0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
8111b3a4:	e0bffc17 	ldw	r2,-16(fp)
8111b3a8:	10800017 	ldw	r2,0(r2)
8111b3ac:	10800104 	addi	r2,r2,4
8111b3b0:	e0fffc17 	ldw	r3,-16(fp)
8111b3b4:	18c00417 	ldw	r3,16(r3)
8111b3b8:	e13ffc17 	ldw	r4,-16(fp)
8111b3bc:	20c7883a 	add	r3,r4,r3
8111b3c0:	18c01704 	addi	r3,r3,92
8111b3c4:	18c00003 	ldbu	r3,0(r3)
8111b3c8:	18c03fcc 	andi	r3,r3,255
8111b3cc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
8111b3d0:	e0bffc17 	ldw	r2,-16(fp)
8111b3d4:	10800417 	ldw	r2,16(r2)
8111b3d8:	10800044 	addi	r2,r2,1
8111b3dc:	e0fffc17 	ldw	r3,-16(fp)
8111b3e0:	18800415 	stw	r2,16(r3)
8111b3e4:	10c00fcc 	andi	r3,r2,63
8111b3e8:	e0bffc17 	ldw	r2,-16(fp)
8111b3ec:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8111b3f0:	e0bffc17 	ldw	r2,-16(fp)
8111b3f4:	10800117 	ldw	r2,4(r2)
8111b3f8:	10c01014 	ori	r3,r2,64
8111b3fc:	e0bffc17 	ldw	r2,-16(fp)
8111b400:	10c00115 	stw	r3,4(r2)
8111b404:	00000e06 	br	8111b440 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
8111b408:	e0bffc17 	ldw	r2,-16(fp)
8111b40c:	10800017 	ldw	r2,0(r2)
8111b410:	10800204 	addi	r2,r2,8
8111b414:	10800037 	ldwio	r2,0(r2)
8111b418:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8111b41c:	e0bffd17 	ldw	r2,-12(fp)
8111b420:	1082000c 	andi	r2,r2,2048
8111b424:	1000061e 	bne	r2,zero,8111b440 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8111b428:	e0bffc17 	ldw	r2,-16(fp)
8111b42c:	10c00117 	ldw	r3,4(r2)
8111b430:	00bfefc4 	movi	r2,-65
8111b434:	1886703a 	and	r3,r3,r2
8111b438:	e0bffc17 	ldw	r2,-16(fp)
8111b43c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
8111b440:	e0bffc17 	ldw	r2,-16(fp)
8111b444:	10c00417 	ldw	r3,16(r2)
8111b448:	e0bffc17 	ldw	r2,-16(fp)
8111b44c:	10800517 	ldw	r2,20(r2)
8111b450:	1880061e 	bne	r3,r2,8111b46c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8111b454:	e0bffc17 	ldw	r2,-16(fp)
8111b458:	10c00117 	ldw	r3,4(r2)
8111b45c:	00beefc4 	movi	r2,-1089
8111b460:	1886703a 	and	r3,r3,r2
8111b464:	e0bffc17 	ldw	r2,-16(fp)
8111b468:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111b46c:	e0bffc17 	ldw	r2,-16(fp)
8111b470:	10800017 	ldw	r2,0(r2)
8111b474:	10800304 	addi	r2,r2,12
8111b478:	e0fffc17 	ldw	r3,-16(fp)
8111b47c:	18c00117 	ldw	r3,4(r3)
8111b480:	10c00035 	stwio	r3,0(r2)
}
8111b484:	0001883a 	nop
8111b488:	e037883a 	mov	sp,fp
8111b48c:	df000017 	ldw	fp,0(sp)
8111b490:	dec00104 	addi	sp,sp,4
8111b494:	f800283a 	ret

8111b498 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
8111b498:	defffd04 	addi	sp,sp,-12
8111b49c:	df000215 	stw	fp,8(sp)
8111b4a0:	df000204 	addi	fp,sp,8
8111b4a4:	e13ffe15 	stw	r4,-8(fp)
8111b4a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8111b4ac:	00000506 	br	8111b4c4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8111b4b0:	e0bfff17 	ldw	r2,-4(fp)
8111b4b4:	1090000c 	andi	r2,r2,16384
8111b4b8:	10000226 	beq	r2,zero,8111b4c4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
8111b4bc:	00bffd44 	movi	r2,-11
8111b4c0:	00000606 	br	8111b4dc <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8111b4c4:	e0bffe17 	ldw	r2,-8(fp)
8111b4c8:	10c00417 	ldw	r3,16(r2)
8111b4cc:	e0bffe17 	ldw	r2,-8(fp)
8111b4d0:	10800517 	ldw	r2,20(r2)
8111b4d4:	18bff61e 	bne	r3,r2,8111b4b0 <__reset+0xfb0fb4b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8111b4d8:	0005883a 	mov	r2,zero
}
8111b4dc:	e037883a 	mov	sp,fp
8111b4e0:	df000017 	ldw	fp,0(sp)
8111b4e4:	dec00104 	addi	sp,sp,4
8111b4e8:	f800283a 	ret

8111b4ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111b4ec:	defffe04 	addi	sp,sp,-8
8111b4f0:	dfc00115 	stw	ra,4(sp)
8111b4f4:	df000015 	stw	fp,0(sp)
8111b4f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111b4fc:	d0a01517 	ldw	r2,-32684(gp)
8111b500:	10000326 	beq	r2,zero,8111b510 <alt_get_errno+0x24>
8111b504:	d0a01517 	ldw	r2,-32684(gp)
8111b508:	103ee83a 	callr	r2
8111b50c:	00000106 	br	8111b514 <alt_get_errno+0x28>
8111b510:	d0a04304 	addi	r2,gp,-32500
}
8111b514:	e037883a 	mov	sp,fp
8111b518:	dfc00117 	ldw	ra,4(sp)
8111b51c:	df000017 	ldw	fp,0(sp)
8111b520:	dec00204 	addi	sp,sp,8
8111b524:	f800283a 	ret

8111b528 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
8111b528:	defff204 	addi	sp,sp,-56
8111b52c:	dfc00d15 	stw	ra,52(sp)
8111b530:	df000c15 	stw	fp,48(sp)
8111b534:	df000c04 	addi	fp,sp,48
8111b538:	e13ffc15 	stw	r4,-16(fp)
8111b53c:	e17ffd15 	stw	r5,-12(fp)
8111b540:	e1bffe15 	stw	r6,-8(fp)
8111b544:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
8111b548:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
8111b54c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
8111b550:	e0bfff17 	ldw	r2,-4(fp)
8111b554:	1090000c 	andi	r2,r2,16384
8111b558:	1005003a 	cmpeq	r2,r2,zero
8111b55c:	10803fcc 	andi	r2,r2,255
8111b560:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8111b564:	00001306 	br	8111b5b4 <altera_avalon_uart_read+0x8c>
    {
      count++;
8111b568:	e0bff517 	ldw	r2,-44(fp)
8111b56c:	10800044 	addi	r2,r2,1
8111b570:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
8111b574:	e0bffd17 	ldw	r2,-12(fp)
8111b578:	10c00044 	addi	r3,r2,1
8111b57c:	e0fffd15 	stw	r3,-12(fp)
8111b580:	e0fffc17 	ldw	r3,-16(fp)
8111b584:	18c00217 	ldw	r3,8(r3)
8111b588:	e13ffc17 	ldw	r4,-16(fp)
8111b58c:	20c7883a 	add	r3,r4,r3
8111b590:	18c00704 	addi	r3,r3,28
8111b594:	18c00003 	ldbu	r3,0(r3)
8111b598:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8111b59c:	e0bffc17 	ldw	r2,-16(fp)
8111b5a0:	10800217 	ldw	r2,8(r2)
8111b5a4:	10800044 	addi	r2,r2,1
8111b5a8:	10c00fcc 	andi	r3,r2,63
8111b5ac:	e0bffc17 	ldw	r2,-16(fp)
8111b5b0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8111b5b4:	e0fff517 	ldw	r3,-44(fp)
8111b5b8:	e0bffe17 	ldw	r2,-8(fp)
8111b5bc:	1880050e 	bge	r3,r2,8111b5d4 <altera_avalon_uart_read+0xac>
8111b5c0:	e0bffc17 	ldw	r2,-16(fp)
8111b5c4:	10c00217 	ldw	r3,8(r2)
8111b5c8:	e0bffc17 	ldw	r2,-16(fp)
8111b5cc:	10800317 	ldw	r2,12(r2)
8111b5d0:	18bfe51e 	bne	r3,r2,8111b568 <__reset+0xfb0fb568>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
8111b5d4:	e0bff517 	ldw	r2,-44(fp)
8111b5d8:	1000251e 	bne	r2,zero,8111b670 <altera_avalon_uart_read+0x148>
8111b5dc:	e0bffc17 	ldw	r2,-16(fp)
8111b5e0:	10c00217 	ldw	r3,8(r2)
8111b5e4:	e0bffc17 	ldw	r2,-16(fp)
8111b5e8:	10800317 	ldw	r2,12(r2)
8111b5ec:	1880201e 	bne	r3,r2,8111b670 <altera_avalon_uart_read+0x148>
    {
      if (!block)
8111b5f0:	e0bff617 	ldw	r2,-40(fp)
8111b5f4:	1000071e 	bne	r2,zero,8111b614 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
8111b5f8:	111b4ec0 	call	8111b4ec <alt_get_errno>
8111b5fc:	1007883a 	mov	r3,r2
8111b600:	008002c4 	movi	r2,11
8111b604:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
8111b608:	00800044 	movi	r2,1
8111b60c:	e0bff405 	stb	r2,-48(fp)
        break;
8111b610:	00001b06 	br	8111b680 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b614:	0005303a 	rdctl	r2,status
8111b618:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b61c:	e0fff917 	ldw	r3,-28(fp)
8111b620:	00bfff84 	movi	r2,-2
8111b624:	1884703a 	and	r2,r3,r2
8111b628:	1001703a 	wrctl	status,r2
  
  return context;
8111b62c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
8111b630:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8111b634:	e0bffc17 	ldw	r2,-16(fp)
8111b638:	10800117 	ldw	r2,4(r2)
8111b63c:	10c02014 	ori	r3,r2,128
8111b640:	e0bffc17 	ldw	r2,-16(fp)
8111b644:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111b648:	e0bffc17 	ldw	r2,-16(fp)
8111b64c:	10800017 	ldw	r2,0(r2)
8111b650:	10800304 	addi	r2,r2,12
8111b654:	e0fffc17 	ldw	r3,-16(fp)
8111b658:	18c00117 	ldw	r3,4(r3)
8111b65c:	10c00035 	stwio	r3,0(r2)
8111b660:	e0bff817 	ldw	r2,-32(fp)
8111b664:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b668:	e0bffa17 	ldw	r2,-24(fp)
8111b66c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
8111b670:	e0bff517 	ldw	r2,-44(fp)
8111b674:	1000021e 	bne	r2,zero,8111b680 <altera_avalon_uart_read+0x158>
8111b678:	e0bffe17 	ldw	r2,-8(fp)
8111b67c:	103fcd1e 	bne	r2,zero,8111b5b4 <__reset+0xfb0fb5b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b680:	0005303a 	rdctl	r2,status
8111b684:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b688:	e0fffb17 	ldw	r3,-20(fp)
8111b68c:	00bfff84 	movi	r2,-2
8111b690:	1884703a 	and	r2,r3,r2
8111b694:	1001703a 	wrctl	status,r2
  
  return context;
8111b698:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
8111b69c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8111b6a0:	e0bffc17 	ldw	r2,-16(fp)
8111b6a4:	10800117 	ldw	r2,4(r2)
8111b6a8:	10c02014 	ori	r3,r2,128
8111b6ac:	e0bffc17 	ldw	r2,-16(fp)
8111b6b0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111b6b4:	e0bffc17 	ldw	r2,-16(fp)
8111b6b8:	10800017 	ldw	r2,0(r2)
8111b6bc:	10800304 	addi	r2,r2,12
8111b6c0:	e0fffc17 	ldw	r3,-16(fp)
8111b6c4:	18c00117 	ldw	r3,4(r3)
8111b6c8:	10c00035 	stwio	r3,0(r2)
8111b6cc:	e0bff817 	ldw	r2,-32(fp)
8111b6d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b6d4:	e0bff717 	ldw	r2,-36(fp)
8111b6d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
8111b6dc:	e0bff403 	ldbu	r2,-48(fp)
8111b6e0:	10000226 	beq	r2,zero,8111b6ec <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
8111b6e4:	00bffd44 	movi	r2,-11
8111b6e8:	00000106 	br	8111b6f0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
8111b6ec:	e0bff517 	ldw	r2,-44(fp)
  }
}
8111b6f0:	e037883a 	mov	sp,fp
8111b6f4:	dfc00117 	ldw	ra,4(sp)
8111b6f8:	df000017 	ldw	fp,0(sp)
8111b6fc:	dec00204 	addi	sp,sp,8
8111b700:	f800283a 	ret

8111b704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111b704:	defffe04 	addi	sp,sp,-8
8111b708:	dfc00115 	stw	ra,4(sp)
8111b70c:	df000015 	stw	fp,0(sp)
8111b710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111b714:	d0a01517 	ldw	r2,-32684(gp)
8111b718:	10000326 	beq	r2,zero,8111b728 <alt_get_errno+0x24>
8111b71c:	d0a01517 	ldw	r2,-32684(gp)
8111b720:	103ee83a 	callr	r2
8111b724:	00000106 	br	8111b72c <alt_get_errno+0x28>
8111b728:	d0a04304 	addi	r2,gp,-32500
}
8111b72c:	e037883a 	mov	sp,fp
8111b730:	dfc00117 	ldw	ra,4(sp)
8111b734:	df000017 	ldw	fp,0(sp)
8111b738:	dec00204 	addi	sp,sp,8
8111b73c:	f800283a 	ret

8111b740 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8111b740:	defff204 	addi	sp,sp,-56
8111b744:	dfc00d15 	stw	ra,52(sp)
8111b748:	df000c15 	stw	fp,48(sp)
8111b74c:	df000c04 	addi	fp,sp,48
8111b750:	e13ffc15 	stw	r4,-16(fp)
8111b754:	e17ffd15 	stw	r5,-12(fp)
8111b758:	e1bffe15 	stw	r6,-8(fp)
8111b75c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
8111b760:	e0bffe17 	ldw	r2,-8(fp)
8111b764:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8111b768:	e0bfff17 	ldw	r2,-4(fp)
8111b76c:	1090000c 	andi	r2,r2,16384
8111b770:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8111b774:	00003c06 	br	8111b868 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8111b778:	e0bffc17 	ldw	r2,-16(fp)
8111b77c:	10800517 	ldw	r2,20(r2)
8111b780:	10800044 	addi	r2,r2,1
8111b784:	10800fcc 	andi	r2,r2,63
8111b788:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
8111b78c:	e0bffc17 	ldw	r2,-16(fp)
8111b790:	10c00417 	ldw	r3,16(r2)
8111b794:	e0bff717 	ldw	r2,-36(fp)
8111b798:	1880221e 	bne	r3,r2,8111b824 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
8111b79c:	e0bff517 	ldw	r2,-44(fp)
8111b7a0:	10000526 	beq	r2,zero,8111b7b8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
8111b7a4:	111b7040 	call	8111b704 <alt_get_errno>
8111b7a8:	1007883a 	mov	r3,r2
8111b7ac:	008002c4 	movi	r2,11
8111b7b0:	18800015 	stw	r2,0(r3)
        break;
8111b7b4:	00002e06 	br	8111b870 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b7b8:	0005303a 	rdctl	r2,status
8111b7bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b7c0:	e0fff917 	ldw	r3,-28(fp)
8111b7c4:	00bfff84 	movi	r2,-2
8111b7c8:	1884703a 	and	r2,r3,r2
8111b7cc:	1001703a 	wrctl	status,r2
  
  return context;
8111b7d0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8111b7d4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8111b7d8:	e0bffc17 	ldw	r2,-16(fp)
8111b7dc:	10800117 	ldw	r2,4(r2)
8111b7e0:	10c11014 	ori	r3,r2,1088
8111b7e4:	e0bffc17 	ldw	r2,-16(fp)
8111b7e8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111b7ec:	e0bffc17 	ldw	r2,-16(fp)
8111b7f0:	10800017 	ldw	r2,0(r2)
8111b7f4:	10800304 	addi	r2,r2,12
8111b7f8:	e0fffc17 	ldw	r3,-16(fp)
8111b7fc:	18c00117 	ldw	r3,4(r3)
8111b800:	10c00035 	stwio	r3,0(r2)
8111b804:	e0bff817 	ldw	r2,-32(fp)
8111b808:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b80c:	e0bff617 	ldw	r2,-40(fp)
8111b810:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8111b814:	e0bffc17 	ldw	r2,-16(fp)
8111b818:	10c00417 	ldw	r3,16(r2)
8111b81c:	e0bff717 	ldw	r2,-36(fp)
8111b820:	18bffc26 	beq	r3,r2,8111b814 <__reset+0xfb0fb814>
      }
    }

    count--;
8111b824:	e0bff417 	ldw	r2,-48(fp)
8111b828:	10bfffc4 	addi	r2,r2,-1
8111b82c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
8111b830:	e0bffc17 	ldw	r2,-16(fp)
8111b834:	10c00517 	ldw	r3,20(r2)
8111b838:	e0bffd17 	ldw	r2,-12(fp)
8111b83c:	11000044 	addi	r4,r2,1
8111b840:	e13ffd15 	stw	r4,-12(fp)
8111b844:	10800003 	ldbu	r2,0(r2)
8111b848:	1009883a 	mov	r4,r2
8111b84c:	e0bffc17 	ldw	r2,-16(fp)
8111b850:	10c5883a 	add	r2,r2,r3
8111b854:	10801704 	addi	r2,r2,92
8111b858:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
8111b85c:	e0bffc17 	ldw	r2,-16(fp)
8111b860:	e0fff717 	ldw	r3,-36(fp)
8111b864:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8111b868:	e0bff417 	ldw	r2,-48(fp)
8111b86c:	103fc21e 	bne	r2,zero,8111b778 <__reset+0xfb0fb778>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b870:	0005303a 	rdctl	r2,status
8111b874:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b878:	e0fffb17 	ldw	r3,-20(fp)
8111b87c:	00bfff84 	movi	r2,-2
8111b880:	1884703a 	and	r2,r3,r2
8111b884:	1001703a 	wrctl	status,r2
  
  return context;
8111b888:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8111b88c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8111b890:	e0bffc17 	ldw	r2,-16(fp)
8111b894:	10800117 	ldw	r2,4(r2)
8111b898:	10c11014 	ori	r3,r2,1088
8111b89c:	e0bffc17 	ldw	r2,-16(fp)
8111b8a0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111b8a4:	e0bffc17 	ldw	r2,-16(fp)
8111b8a8:	10800017 	ldw	r2,0(r2)
8111b8ac:	10800304 	addi	r2,r2,12
8111b8b0:	e0fffc17 	ldw	r3,-16(fp)
8111b8b4:	18c00117 	ldw	r3,4(r3)
8111b8b8:	10c00035 	stwio	r3,0(r2)
8111b8bc:	e0bff817 	ldw	r2,-32(fp)
8111b8c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b8c4:	e0bffa17 	ldw	r2,-24(fp)
8111b8c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8111b8cc:	e0fffe17 	ldw	r3,-8(fp)
8111b8d0:	e0bff417 	ldw	r2,-48(fp)
8111b8d4:	1885c83a 	sub	r2,r3,r2
}
8111b8d8:	e037883a 	mov	sp,fp
8111b8dc:	dfc00117 	ldw	ra,4(sp)
8111b8e0:	df000017 	ldw	fp,0(sp)
8111b8e4:	dec00204 	addi	sp,sp,8
8111b8e8:	f800283a 	ret

8111b8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111b8ec:	defffe04 	addi	sp,sp,-8
8111b8f0:	dfc00115 	stw	ra,4(sp)
8111b8f4:	df000015 	stw	fp,0(sp)
8111b8f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111b8fc:	d0a01517 	ldw	r2,-32684(gp)
8111b900:	10000326 	beq	r2,zero,8111b910 <alt_get_errno+0x24>
8111b904:	d0a01517 	ldw	r2,-32684(gp)
8111b908:	103ee83a 	callr	r2
8111b90c:	00000106 	br	8111b914 <alt_get_errno+0x28>
8111b910:	d0a04304 	addi	r2,gp,-32500
}
8111b914:	e037883a 	mov	sp,fp
8111b918:	dfc00117 	ldw	ra,4(sp)
8111b91c:	df000017 	ldw	fp,0(sp)
8111b920:	dec00204 	addi	sp,sp,8
8111b924:	f800283a 	ret

8111b928 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
8111b928:	defffc04 	addi	sp,sp,-16
8111b92c:	df000315 	stw	fp,12(sp)
8111b930:	df000304 	addi	fp,sp,12
8111b934:	e13ffd15 	stw	r4,-12(fp)
8111b938:	e17ffe15 	stw	r5,-8(fp)
8111b93c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8111b940:	e0bffd17 	ldw	r2,-12(fp)
8111b944:	10800037 	ldwio	r2,0(r2)
8111b948:	1080010c 	andi	r2,r2,4
8111b94c:	10000226 	beq	r2,zero,8111b958 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
8111b950:	00bff904 	movi	r2,-28
8111b954:	00001506 	br	8111b9ac <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8111b958:	e0bfff17 	ldw	r2,-4(fp)
8111b95c:	10800017 	ldw	r2,0(r2)
8111b960:	1007883a 	mov	r3,r2
8111b964:	e0bffe17 	ldw	r2,-8(fp)
8111b968:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8111b96c:	e0bffe17 	ldw	r2,-8(fp)
8111b970:	10800104 	addi	r2,r2,4
8111b974:	e0ffff17 	ldw	r3,-4(fp)
8111b978:	18c00117 	ldw	r3,4(r3)
8111b97c:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8111b980:	e0bffe17 	ldw	r2,-8(fp)
8111b984:	10800204 	addi	r2,r2,8
8111b988:	e0ffff17 	ldw	r3,-4(fp)
8111b98c:	18c00217 	ldw	r3,8(r3)
8111b990:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8111b994:	e0bffe17 	ldw	r2,-8(fp)
8111b998:	10800304 	addi	r2,r2,12
8111b99c:	e0ffff17 	ldw	r3,-4(fp)
8111b9a0:	18c00317 	ldw	r3,12(r3)
8111b9a4:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
8111b9a8:	0005883a 	mov	r2,zero
}
8111b9ac:	e037883a 	mov	sp,fp
8111b9b0:	df000017 	ldw	fp,0(sp)
8111b9b4:	dec00104 	addi	sp,sp,4
8111b9b8:	f800283a 	ret

8111b9bc <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
8111b9bc:	defffc04 	addi	sp,sp,-16
8111b9c0:	df000315 	stw	fp,12(sp)
8111b9c4:	df000304 	addi	fp,sp,12
8111b9c8:	e13ffd15 	stw	r4,-12(fp)
8111b9cc:	e17ffe15 	stw	r5,-8(fp)
8111b9d0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8111b9d4:	e0bffd17 	ldw	r2,-12(fp)
8111b9d8:	10800037 	ldwio	r2,0(r2)
8111b9dc:	1080010c 	andi	r2,r2,4
8111b9e0:	10000226 	beq	r2,zero,8111b9ec <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
8111b9e4:	00bff904 	movi	r2,-28
8111b9e8:	00003b06 	br	8111bad8 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8111b9ec:	e0bfff17 	ldw	r2,-4(fp)
8111b9f0:	10800017 	ldw	r2,0(r2)
8111b9f4:	1007883a 	mov	r3,r2
8111b9f8:	e0bffe17 	ldw	r2,-8(fp)
8111b9fc:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8111ba00:	e0bffe17 	ldw	r2,-8(fp)
8111ba04:	10800104 	addi	r2,r2,4
8111ba08:	e0ffff17 	ldw	r3,-4(fp)
8111ba0c:	18c00117 	ldw	r3,4(r3)
8111ba10:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8111ba14:	e0bffe17 	ldw	r2,-8(fp)
8111ba18:	10800204 	addi	r2,r2,8
8111ba1c:	e0ffff17 	ldw	r3,-4(fp)
8111ba20:	18c00217 	ldw	r3,8(r3)
8111ba24:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8111ba28:	e0bffe17 	ldw	r2,-8(fp)
8111ba2c:	10800304 	addi	r2,r2,12
8111ba30:	e0ffff17 	ldw	r3,-4(fp)
8111ba34:	18c0030b 	ldhu	r3,12(r3)
8111ba38:	18ffffcc 	andi	r3,r3,65535
8111ba3c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8111ba40:	e0bffe17 	ldw	r2,-8(fp)
8111ba44:	10800384 	addi	r2,r2,14
8111ba48:	e0ffff17 	ldw	r3,-4(fp)
8111ba4c:	18c00383 	ldbu	r3,14(r3)
8111ba50:	18c03fcc 	andi	r3,r3,255
8111ba54:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8111ba58:	e0bffe17 	ldw	r2,-8(fp)
8111ba5c:	108003c4 	addi	r2,r2,15
8111ba60:	e0ffff17 	ldw	r3,-4(fp)
8111ba64:	18c003c3 	ldbu	r3,15(r3)
8111ba68:	18c03fcc 	andi	r3,r3,255
8111ba6c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8111ba70:	e0bffe17 	ldw	r2,-8(fp)
8111ba74:	10800404 	addi	r2,r2,16
8111ba78:	e0ffff17 	ldw	r3,-4(fp)
8111ba7c:	18c0040b 	ldhu	r3,16(r3)
8111ba80:	18ffffcc 	andi	r3,r3,65535
8111ba84:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8111ba88:	e0bffe17 	ldw	r2,-8(fp)
8111ba8c:	10800484 	addi	r2,r2,18
8111ba90:	e0ffff17 	ldw	r3,-4(fp)
8111ba94:	18c0048b 	ldhu	r3,18(r3)
8111ba98:	18ffffcc 	andi	r3,r3,65535
8111ba9c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8111baa0:	e0bffe17 	ldw	r2,-8(fp)
8111baa4:	10800504 	addi	r2,r2,20
8111baa8:	0007883a 	mov	r3,zero
8111baac:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8111bab0:	e0bffe17 	ldw	r2,-8(fp)
8111bab4:	10800604 	addi	r2,r2,24
8111bab8:	0007883a 	mov	r3,zero
8111babc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8111bac0:	e0bffe17 	ldw	r2,-8(fp)
8111bac4:	10800704 	addi	r2,r2,28
8111bac8:	e0ffff17 	ldw	r3,-4(fp)
8111bacc:	18c00717 	ldw	r3,28(r3)
8111bad0:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
8111bad4:	0005883a 	mov	r2,zero
}
8111bad8:	e037883a 	mov	sp,fp
8111badc:	df000017 	ldw	fp,0(sp)
8111bae0:	dec00104 	addi	sp,sp,4
8111bae4:	f800283a 	ret

8111bae8 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8111bae8:	defff804 	addi	sp,sp,-32
8111baec:	dfc00715 	stw	ra,28(sp)
8111baf0:	df000615 	stw	fp,24(sp)
8111baf4:	df000604 	addi	fp,sp,24
8111baf8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8111bafc:	e0bfff17 	ldw	r2,-4(fp)
8111bb00:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8111bb04:	e0bffa17 	ldw	r2,-24(fp)
8111bb08:	10801783 	ldbu	r2,94(r2)
8111bb0c:	10803fcc 	andi	r2,r2,255
8111bb10:	10001126 	beq	r2,zero,8111bb58 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8111bb14:	e0bffa17 	ldw	r2,-24(fp)
8111bb18:	10800617 	ldw	r2,24(r2)
8111bb1c:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8111bb20:	1007883a 	mov	r3,r2
8111bb24:	00bffdc4 	movi	r2,-9
8111bb28:	1884703a 	and	r2,r3,r2
8111bb2c:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8111bb30:	e0bffa17 	ldw	r2,-24(fp)
8111bb34:	10800617 	ldw	r2,24(r2)
8111bb38:	e0fffb17 	ldw	r3,-20(fp)
8111bb3c:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8111bb40:	e0bffa17 	ldw	r2,-24(fp)
8111bb44:	10800617 	ldw	r2,24(r2)
8111bb48:	10800404 	addi	r2,r2,16
8111bb4c:	00c00044 	movi	r3,1
8111bb50:	10c00035 	stwio	r3,0(r2)
8111bb54:	00001106 	br	8111bb9c <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8111bb58:	e0bffa17 	ldw	r2,-24(fp)
8111bb5c:	10800317 	ldw	r2,12(r2)
8111bb60:	10800104 	addi	r2,r2,4
8111bb64:	10800037 	ldwio	r2,0(r2)
8111bb68:	1007883a 	mov	r3,r2
8111bb6c:	00bffbc4 	movi	r2,-17
8111bb70:	1884703a 	and	r2,r3,r2
8111bb74:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8111bb78:	e0bffa17 	ldw	r2,-24(fp)
8111bb7c:	10800317 	ldw	r2,12(r2)
8111bb80:	10800104 	addi	r2,r2,4
8111bb84:	e0fffb17 	ldw	r3,-20(fp)
8111bb88:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8111bb8c:	e0bffa17 	ldw	r2,-24(fp)
8111bb90:	10800317 	ldw	r2,12(r2)
8111bb94:	00c08004 	movi	r3,512
8111bb98:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8111bb9c:	e0bffa17 	ldw	r2,-24(fp)
8111bba0:	10800b17 	ldw	r2,44(r2)
8111bba4:	10001226 	beq	r2,zero,8111bbf0 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111bba8:	0005303a 	rdctl	r2,status
8111bbac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111bbb0:	e0fffd17 	ldw	r3,-12(fp)
8111bbb4:	00bfff84 	movi	r2,-2
8111bbb8:	1884703a 	and	r2,r3,r2
8111bbbc:	1001703a 	wrctl	status,r2
  
  return context;
8111bbc0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8111bbc4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
8111bbc8:	e0bffa17 	ldw	r2,-24(fp)
8111bbcc:	10800b17 	ldw	r2,44(r2)
8111bbd0:	e0fffa17 	ldw	r3,-24(fp)
8111bbd4:	18c00c17 	ldw	r3,48(r3)
8111bbd8:	1809883a 	mov	r4,r3
8111bbdc:	103ee83a 	callr	r2
8111bbe0:	e0bffc17 	ldw	r2,-16(fp)
8111bbe4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111bbe8:	e0bffe17 	ldw	r2,-8(fp)
8111bbec:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8111bbf0:	e0bffa17 	ldw	r2,-24(fp)
8111bbf4:	10801783 	ldbu	r2,94(r2)
8111bbf8:	10803fcc 	andi	r2,r2,255
8111bbfc:	10000a26 	beq	r2,zero,8111bc28 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8111bc00:	e0bffa17 	ldw	r2,-24(fp)
8111bc04:	10800617 	ldw	r2,24(r2)
8111bc08:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8111bc0c:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
8111bc10:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8111bc14:	e0bffa17 	ldw	r2,-24(fp)
8111bc18:	10800617 	ldw	r2,24(r2)
8111bc1c:	e0fffb17 	ldw	r3,-20(fp)
8111bc20:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8111bc24:	00000c06 	br	8111bc58 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8111bc28:	e0bffa17 	ldw	r2,-24(fp)
8111bc2c:	10800317 	ldw	r2,12(r2)
8111bc30:	10800104 	addi	r2,r2,4
8111bc34:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8111bc38:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8111bc3c:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8111bc40:	e0bffa17 	ldw	r2,-24(fp)
8111bc44:	10800317 	ldw	r2,12(r2)
8111bc48:	10800104 	addi	r2,r2,4
8111bc4c:	e0fffb17 	ldw	r3,-20(fp)
8111bc50:	10c00035 	stwio	r3,0(r2)
    }

    return;
8111bc54:	0001883a 	nop
}
8111bc58:	e037883a 	mov	sp,fp
8111bc5c:	dfc00117 	ldw	ra,4(sp)
8111bc60:	df000017 	ldw	fp,0(sp)
8111bc64:	dec00204 	addi	sp,sp,8
8111bc68:	f800283a 	ret

8111bc6c <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111bc6c:	defffb04 	addi	sp,sp,-20
8111bc70:	df000415 	stw	fp,16(sp)
8111bc74:	df000404 	addi	fp,sp,16
8111bc78:	e13ffc15 	stw	r4,-16(fp)
8111bc7c:	e17ffd15 	stw	r5,-12(fp)
8111bc80:	e1bffe15 	stw	r6,-8(fp)
8111bc84:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8111bc88:	e0bffc17 	ldw	r2,-16(fp)
8111bc8c:	10c01217 	ldw	r3,72(r2)
8111bc90:	e0800117 	ldw	r2,4(fp)
8111bc94:	18800436 	bltu	r3,r2,8111bca8 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8111bc98:	e0bffc17 	ldw	r2,-16(fp)
8111bc9c:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8111bca0:	10803fcc 	andi	r2,r2,255
8111bca4:	10000226 	beq	r2,zero,8111bcb0 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8111bca8:	00bffa84 	movi	r2,-22
8111bcac:	00000e06 	br	8111bce8 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
8111bcb0:	e0bffd17 	ldw	r2,-12(fp)
8111bcb4:	e0fffe17 	ldw	r3,-8(fp)
8111bcb8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8111bcbc:	e0bffd17 	ldw	r2,-12(fp)
8111bcc0:	e0ffff17 	ldw	r3,-4(fp)
8111bcc4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111bcc8:	e0bffd17 	ldw	r2,-12(fp)
8111bccc:	e0c00117 	ldw	r3,4(fp)
8111bcd0:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111bcd4:	e0800217 	ldw	r2,8(fp)
8111bcd8:	10e00034 	orhi	r3,r2,32768
8111bcdc:	e0bffd17 	ldw	r2,-12(fp)
8111bce0:	10c00315 	stw	r3,12(r2)
    
    return 0;
8111bce4:	0005883a 	mov	r2,zero
}
8111bce8:	e037883a 	mov	sp,fp
8111bcec:	df000017 	ldw	fp,0(sp)
8111bcf0:	dec00104 	addi	sp,sp,4
8111bcf4:	f800283a 	ret

8111bcf8 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8111bcf8:	defff604 	addi	sp,sp,-40
8111bcfc:	df000915 	stw	fp,36(sp)
8111bd00:	df000904 	addi	fp,sp,36
8111bd04:	e13ff715 	stw	r4,-36(fp)
8111bd08:	e17ff815 	stw	r5,-32(fp)
8111bd0c:	e1bff915 	stw	r6,-28(fp)
8111bd10:	e1fffa15 	stw	r7,-24(fp)
8111bd14:	e1800317 	ldw	r6,12(fp)
8111bd18:	e1400417 	ldw	r5,16(fp)
8111bd1c:	e1000517 	ldw	r4,20(fp)
8111bd20:	e0c00617 	ldw	r3,24(fp)
8111bd24:	e0800717 	ldw	r2,28(fp)
8111bd28:	e1bffb0d 	sth	r6,-20(fp)
8111bd2c:	e17ffc05 	stb	r5,-16(fp)
8111bd30:	e13ffd05 	stb	r4,-12(fp)
8111bd34:	e0fffe0d 	sth	r3,-8(fp)
8111bd38:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8111bd3c:	e0bff717 	ldw	r2,-36(fp)
8111bd40:	10c01217 	ldw	r3,72(r2)
8111bd44:	e0800117 	ldw	r2,4(fp)
8111bd48:	18801936 	bltu	r3,r2,8111bdb0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8111bd4c:	e13ff717 	ldw	r4,-36(fp)
8111bd50:	20801317 	ldw	r2,76(r4)
8111bd54:	20c01417 	ldw	r3,80(r4)
8111bd58:	e13ffe0b 	ldhu	r4,-8(fp)
8111bd5c:	213fffcc 	andi	r4,r4,65535
8111bd60:	2015883a 	mov	r10,r4
8111bd64:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8111bd68:	1ac01136 	bltu	r3,r11,8111bdb0 <alt_msgdma_construct_extended_descriptor+0xb8>
8111bd6c:	58c0011e 	bne	r11,r3,8111bd74 <alt_msgdma_construct_extended_descriptor+0x7c>
8111bd70:	12800f36 	bltu	r2,r10,8111bdb0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111bd74:	e13ff717 	ldw	r4,-36(fp)
8111bd78:	20801317 	ldw	r2,76(r4)
8111bd7c:	20c01417 	ldw	r3,80(r4)
8111bd80:	e13fff0b 	ldhu	r4,-4(fp)
8111bd84:	213fffcc 	andi	r4,r4,65535
8111bd88:	2011883a 	mov	r8,r4
8111bd8c:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8111bd90:	1a400736 	bltu	r3,r9,8111bdb0 <alt_msgdma_construct_extended_descriptor+0xb8>
8111bd94:	48c0011e 	bne	r9,r3,8111bd9c <alt_msgdma_construct_extended_descriptor+0xa4>
8111bd98:	12000536 	bltu	r2,r8,8111bdb0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8111bd9c:	e0bff717 	ldw	r2,-36(fp)
8111bda0:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111bda4:	10803fcc 	andi	r2,r2,255
8111bda8:	10800060 	cmpeqi	r2,r2,1
8111bdac:	1000021e 	bne	r2,zero,8111bdb8 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8111bdb0:	00bffa84 	movi	r2,-22
8111bdb4:	00002106 	br	8111be3c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
8111bdb8:	e0bff817 	ldw	r2,-32(fp)
8111bdbc:	e0fff917 	ldw	r3,-28(fp)
8111bdc0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8111bdc4:	e0bff817 	ldw	r2,-32(fp)
8111bdc8:	e0fffa17 	ldw	r3,-24(fp)
8111bdcc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111bdd0:	e0bff817 	ldw	r2,-32(fp)
8111bdd4:	e0c00117 	ldw	r3,4(fp)
8111bdd8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8111bddc:	e0bff817 	ldw	r2,-32(fp)
8111bde0:	e0fffb0b 	ldhu	r3,-20(fp)
8111bde4:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8111bde8:	e0bff817 	ldw	r2,-32(fp)
8111bdec:	e0fffc03 	ldbu	r3,-16(fp)
8111bdf0:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8111bdf4:	e0bff817 	ldw	r2,-32(fp)
8111bdf8:	e0fffd03 	ldbu	r3,-12(fp)
8111bdfc:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8111be00:	e0bff817 	ldw	r2,-32(fp)
8111be04:	e0fffe0b 	ldhu	r3,-8(fp)
8111be08:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8111be0c:	e0bff817 	ldw	r2,-32(fp)
8111be10:	e0ffff0b 	ldhu	r3,-4(fp)
8111be14:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8111be18:	e0bff817 	ldw	r2,-32(fp)
8111be1c:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8111be20:	e0bff817 	ldw	r2,-32(fp)
8111be24:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111be28:	e0800217 	ldw	r2,8(fp)
8111be2c:	10e00034 	orhi	r3,r2,32768
8111be30:	e0bff817 	ldw	r2,-32(fp)
8111be34:	10c00715 	stw	r3,28(r2)

  return 0 ;
8111be38:	0005883a 	mov	r2,zero

}
8111be3c:	e037883a 	mov	sp,fp
8111be40:	df000017 	ldw	fp,0(sp)
8111be44:	dec00104 	addi	sp,sp,4
8111be48:	f800283a 	ret

8111be4c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8111be4c:	defff004 	addi	sp,sp,-64
8111be50:	dfc00f15 	stw	ra,60(sp)
8111be54:	df000e15 	stw	fp,56(sp)
8111be58:	df000e04 	addi	fp,sp,56
8111be5c:	e13ffd15 	stw	r4,-12(fp)
8111be60:	e17ffe15 	stw	r5,-8(fp)
8111be64:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8111be68:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
8111be6c:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
8111be70:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111be74:	e0bffd17 	ldw	r2,-12(fp)
8111be78:	10800317 	ldw	r2,12(r2)
8111be7c:	10800204 	addi	r2,r2,8
8111be80:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8111be84:	10bfffcc 	andi	r2,r2,65535
8111be88:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111be8c:	e0bffd17 	ldw	r2,-12(fp)
8111be90:	10800317 	ldw	r2,12(r2)
8111be94:	10800204 	addi	r2,r2,8
8111be98:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8111be9c:	1004d43a 	srli	r2,r2,16
8111bea0:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111bea4:	e0bffd17 	ldw	r2,-12(fp)
8111bea8:	10800917 	ldw	r2,36(r2)
8111beac:	e0fff617 	ldw	r3,-40(fp)
8111beb0:	1880042e 	bgeu	r3,r2,8111bec4 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8111beb4:	e0bffd17 	ldw	r2,-12(fp)
8111beb8:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111bebc:	e0fff517 	ldw	r3,-44(fp)
8111bec0:	18800236 	bltu	r3,r2,8111becc <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
8111bec4:	00bff904 	movi	r2,-28
8111bec8:	00008f06 	br	8111c108 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8111becc:	00800804 	movi	r2,32
8111bed0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111bed4:	0005303a 	rdctl	r2,status
8111bed8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111bedc:	e0fff717 	ldw	r3,-36(fp)
8111bee0:	00bfff84 	movi	r2,-2
8111bee4:	1884703a 	and	r2,r3,r2
8111bee8:	1001703a 	wrctl	status,r2
  
  return context;
8111beec:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8111bef0:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111bef4:	e0bffd17 	ldw	r2,-12(fp)
8111bef8:	10800317 	ldw	r2,12(r2)
8111befc:	10800104 	addi	r2,r2,4
8111bf00:	e0fff317 	ldw	r3,-52(fp)
8111bf04:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111bf08:	e0bffd17 	ldw	r2,-12(fp)
8111bf0c:	10800317 	ldw	r2,12(r2)
8111bf10:	e0fffd17 	ldw	r3,-12(fp)
8111bf14:	18c00317 	ldw	r3,12(r3)
8111bf18:	18c00037 	ldwio	r3,0(r3)
8111bf1c:	10c00035 	stwio	r3,0(r2)
8111bf20:	e0bff417 	ldw	r2,-48(fp)
8111bf24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111bf28:	e0bffc17 	ldw	r2,-16(fp)
8111bf2c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8111bf30:	e0bffe17 	ldw	r2,-8(fp)
8111bf34:	10001a26 	beq	r2,zero,8111bfa0 <alt_msgdma_descriptor_async_transfer+0x154>
8111bf38:	e0bfff17 	ldw	r2,-4(fp)
8111bf3c:	1000181e 	bne	r2,zero,8111bfa0 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111bf40:	00000d06 	br	8111bf78 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8111bf44:	01000044 	movi	r4,1
8111bf48:	11194080 	call	81119408 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111bf4c:	e0bff20b 	ldhu	r2,-56(fp)
8111bf50:	1084e230 	cmpltui	r2,r2,5000
8111bf54:	1000051e 	bne	r2,zero,8111bf6c <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
8111bf58:	012044b4 	movhi	r4,33042
8111bf5c:	213f9604 	addi	r4,r4,-424
8111bf60:	1119ba80 	call	81119ba8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111bf64:	00bff084 	movi	r2,-62
8111bf68:	00006706 	br	8111c108 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8111bf6c:	e0bff20b 	ldhu	r2,-56(fp)
8111bf70:	10800044 	addi	r2,r2,1
8111bf74:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111bf78:	e0bffd17 	ldw	r2,-12(fp)
8111bf7c:	10c00317 	ldw	r3,12(r2)
8111bf80:	e0bffd17 	ldw	r2,-12(fp)
8111bf84:	10800417 	ldw	r2,16(r2)
8111bf88:	e1bffe17 	ldw	r6,-8(fp)
8111bf8c:	100b883a 	mov	r5,r2
8111bf90:	1809883a 	mov	r4,r3
8111bf94:	111b9280 	call	8111b928 <alt_msgdma_write_standard_descriptor>
8111bf98:	103fea1e 	bne	r2,zero,8111bf44 <__reset+0xfb0fbf44>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8111bf9c:	00001f06 	br	8111c01c <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111bfa0:	e0bffe17 	ldw	r2,-8(fp)
8111bfa4:	10001b1e 	bne	r2,zero,8111c014 <alt_msgdma_descriptor_async_transfer+0x1c8>
8111bfa8:	e0bfff17 	ldw	r2,-4(fp)
8111bfac:	10001926 	beq	r2,zero,8111c014 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
8111bfb0:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111bfb4:	00000d06 	br	8111bfec <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8111bfb8:	01000044 	movi	r4,1
8111bfbc:	11194080 	call	81119408 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111bfc0:	e0bff20b 	ldhu	r2,-56(fp)
8111bfc4:	1084e230 	cmpltui	r2,r2,5000
8111bfc8:	1000051e 	bne	r2,zero,8111bfe0 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8111bfcc:	012044b4 	movhi	r4,33042
8111bfd0:	213fac04 	addi	r4,r4,-336
8111bfd4:	1119ba80 	call	81119ba8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111bfd8:	00bff084 	movi	r2,-62
8111bfdc:	00004a06 	br	8111c108 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8111bfe0:	e0bff20b 	ldhu	r2,-56(fp)
8111bfe4:	10800044 	addi	r2,r2,1
8111bfe8:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111bfec:	e0bffd17 	ldw	r2,-12(fp)
8111bff0:	10c00317 	ldw	r3,12(r2)
8111bff4:	e0bffd17 	ldw	r2,-12(fp)
8111bff8:	10800417 	ldw	r2,16(r2)
8111bffc:	e1bfff17 	ldw	r6,-4(fp)
8111c000:	100b883a 	mov	r5,r2
8111c004:	1809883a 	mov	r4,r3
8111c008:	111b9bc0 	call	8111b9bc <alt_msgdma_write_extended_descriptor>
8111c00c:	103fea1e 	bne	r2,zero,8111bfb8 <__reset+0xfb0fbfb8>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111c010:	00000206 	br	8111c01c <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8111c014:	00bfffc4 	movi	r2,-1
8111c018:	00003b06 	br	8111c108 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8111c01c:	e0bffd17 	ldw	r2,-12(fp)
8111c020:	10800b17 	ldw	r2,44(r2)
8111c024:	10001c26 	beq	r2,zero,8111c098 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
8111c028:	e0bffd17 	ldw	r2,-12(fp)
8111c02c:	10c00d17 	ldw	r3,52(r2)
8111c030:	e0bff317 	ldw	r2,-52(fp)
8111c034:	1884b03a 	or	r2,r3,r2
8111c038:	10800514 	ori	r2,r2,20
8111c03c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8111c040:	e0fff317 	ldw	r3,-52(fp)
8111c044:	00bff7c4 	movi	r2,-33
8111c048:	1884703a 	and	r2,r3,r2
8111c04c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c050:	0005303a 	rdctl	r2,status
8111c054:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c058:	e0fffa17 	ldw	r3,-24(fp)
8111c05c:	00bfff84 	movi	r2,-2
8111c060:	1884703a 	and	r2,r3,r2
8111c064:	1001703a 	wrctl	status,r2
  
  return context;
8111c068:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8111c06c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111c070:	e0bffd17 	ldw	r2,-12(fp)
8111c074:	10800317 	ldw	r2,12(r2)
8111c078:	10800104 	addi	r2,r2,4
8111c07c:	e0fff317 	ldw	r3,-52(fp)
8111c080:	10c00035 	stwio	r3,0(r2)
8111c084:	e0bff417 	ldw	r2,-48(fp)
8111c088:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c08c:	e0bff817 	ldw	r2,-32(fp)
8111c090:	1001703a 	wrctl	status,r2
8111c094:	00001b06 	br	8111c104 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8111c098:	e0bffd17 	ldw	r2,-12(fp)
8111c09c:	10c00d17 	ldw	r3,52(r2)
8111c0a0:	e0bff317 	ldw	r2,-52(fp)
8111c0a4:	1884b03a 	or	r2,r3,r2
8111c0a8:	10800114 	ori	r2,r2,4
8111c0ac:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8111c0b0:	e0fff317 	ldw	r3,-52(fp)
8111c0b4:	00bff3c4 	movi	r2,-49
8111c0b8:	1884703a 	and	r2,r3,r2
8111c0bc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c0c0:	0005303a 	rdctl	r2,status
8111c0c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c0c8:	e0fffb17 	ldw	r3,-20(fp)
8111c0cc:	00bfff84 	movi	r2,-2
8111c0d0:	1884703a 	and	r2,r3,r2
8111c0d4:	1001703a 	wrctl	status,r2
  
  return context;
8111c0d8:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8111c0dc:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111c0e0:	e0bffd17 	ldw	r2,-12(fp)
8111c0e4:	10800317 	ldw	r2,12(r2)
8111c0e8:	10800104 	addi	r2,r2,4
8111c0ec:	e0fff317 	ldw	r3,-52(fp)
8111c0f0:	10c00035 	stwio	r3,0(r2)
8111c0f4:	e0bff417 	ldw	r2,-48(fp)
8111c0f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c0fc:	e0bff917 	ldw	r2,-28(fp)
8111c100:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8111c104:	0005883a 	mov	r2,zero
}
8111c108:	e037883a 	mov	sp,fp
8111c10c:	dfc00117 	ldw	ra,4(sp)
8111c110:	df000017 	ldw	fp,0(sp)
8111c114:	dec00204 	addi	sp,sp,8
8111c118:	f800283a 	ret

8111c11c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8111c11c:	defff004 	addi	sp,sp,-64
8111c120:	dfc00f15 	stw	ra,60(sp)
8111c124:	df000e15 	stw	fp,56(sp)
8111c128:	df000e04 	addi	fp,sp,56
8111c12c:	e13ffd15 	stw	r4,-12(fp)
8111c130:	e17ffe15 	stw	r5,-8(fp)
8111c134:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8111c138:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
8111c13c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
8111c140:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8111c144:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111c148:	e0bffd17 	ldw	r2,-12(fp)
8111c14c:	10800317 	ldw	r2,12(r2)
8111c150:	10800204 	addi	r2,r2,8
8111c154:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8111c158:	10bfffcc 	andi	r2,r2,65535
8111c15c:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111c160:	e0bffd17 	ldw	r2,-12(fp)
8111c164:	10800317 	ldw	r2,12(r2)
8111c168:	10800204 	addi	r2,r2,8
8111c16c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8111c170:	1004d43a 	srli	r2,r2,16
8111c174:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8111c178:	00807804 	movi	r2,480
8111c17c:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111c180:	00001906 	br	8111c1e8 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8111c184:	01000044 	movi	r4,1
8111c188:	11194080 	call	81119408 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111c18c:	e0bff30b 	ldhu	r2,-52(fp)
8111c190:	1084e230 	cmpltui	r2,r2,5000
8111c194:	1000051e 	bne	r2,zero,8111c1ac <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8111c198:	012044b4 	movhi	r4,33042
8111c19c:	213fc204 	addi	r4,r4,-248
8111c1a0:	1119ba80 	call	81119ba8 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
8111c1a4:	00bff084 	movi	r2,-62
8111c1a8:	0000b506 	br	8111c480 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
8111c1ac:	e0bff30b 	ldhu	r2,-52(fp)
8111c1b0:	10800044 	addi	r2,r2,1
8111c1b4:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111c1b8:	e0bffd17 	ldw	r2,-12(fp)
8111c1bc:	10800317 	ldw	r2,12(r2)
8111c1c0:	10800204 	addi	r2,r2,8
8111c1c4:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8111c1c8:	10bfffcc 	andi	r2,r2,65535
8111c1cc:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111c1d0:	e0bffd17 	ldw	r2,-12(fp)
8111c1d4:	10800317 	ldw	r2,12(r2)
8111c1d8:	10800204 	addi	r2,r2,8
8111c1dc:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8111c1e0:	1004d43a 	srli	r2,r2,16
8111c1e4:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111c1e8:	e0bffd17 	ldw	r2,-12(fp)
8111c1ec:	10800917 	ldw	r2,36(r2)
8111c1f0:	e0fff517 	ldw	r3,-44(fp)
8111c1f4:	18bfe32e 	bgeu	r3,r2,8111c184 <__reset+0xfb0fc184>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8111c1f8:	e0bffd17 	ldw	r2,-12(fp)
8111c1fc:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111c200:	e0fff417 	ldw	r3,-48(fp)
8111c204:	18bfdf2e 	bgeu	r3,r2,8111c184 <__reset+0xfb0fc184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c208:	0005303a 	rdctl	r2,status
8111c20c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c210:	e0fffc17 	ldw	r3,-16(fp)
8111c214:	00bfff84 	movi	r2,-2
8111c218:	1884703a 	and	r2,r3,r2
8111c21c:	1001703a 	wrctl	status,r2
  
  return context;
8111c220:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8111c224:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8111c228:	e0bffd17 	ldw	r2,-12(fp)
8111c22c:	10800317 	ldw	r2,12(r2)
8111c230:	10800104 	addi	r2,r2,4
8111c234:	00c00804 	movi	r3,32
8111c238:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111c23c:	e0bffd17 	ldw	r2,-12(fp)
8111c240:	10800317 	ldw	r2,12(r2)
8111c244:	e0fffd17 	ldw	r3,-12(fp)
8111c248:	18c00317 	ldw	r3,12(r3)
8111c24c:	18c00037 	ldwio	r3,0(r3)
8111c250:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8111c254:	e0bffe17 	ldw	r2,-8(fp)
8111c258:	10001b26 	beq	r2,zero,8111c2c8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
8111c25c:	e0bfff17 	ldw	r2,-4(fp)
8111c260:	1000191e 	bne	r2,zero,8111c2c8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
8111c264:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111c268:	00000d06 	br	8111c2a0 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8111c26c:	01000044 	movi	r4,1
8111c270:	11194080 	call	81119408 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111c274:	e0bff30b 	ldhu	r2,-52(fp)
8111c278:	1084e230 	cmpltui	r2,r2,5000
8111c27c:	1000051e 	bne	r2,zero,8111c294 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
8111c280:	012044b4 	movhi	r4,33042
8111c284:	213fd604 	addi	r4,r4,-168
8111c288:	1119ba80 	call	81119ba8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111c28c:	00bff084 	movi	r2,-62
8111c290:	00007b06 	br	8111c480 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
8111c294:	e0bff30b 	ldhu	r2,-52(fp)
8111c298:	10800044 	addi	r2,r2,1
8111c29c:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111c2a0:	e0bffd17 	ldw	r2,-12(fp)
8111c2a4:	10c00317 	ldw	r3,12(r2)
8111c2a8:	e0bffd17 	ldw	r2,-12(fp)
8111c2ac:	10800417 	ldw	r2,16(r2)
8111c2b0:	e1bffe17 	ldw	r6,-8(fp)
8111c2b4:	100b883a 	mov	r5,r2
8111c2b8:	1809883a 	mov	r4,r3
8111c2bc:	111b9280 	call	8111b928 <alt_msgdma_write_standard_descriptor>
8111c2c0:	103fea1e 	bne	r2,zero,8111c26c <__reset+0xfb0fc26c>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8111c2c4:	00001f06 	br	8111c344 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111c2c8:	e0bffe17 	ldw	r2,-8(fp)
8111c2cc:	10001b1e 	bne	r2,zero,8111c33c <alt_msgdma_descriptor_sync_transfer+0x220>
8111c2d0:	e0bfff17 	ldw	r2,-4(fp)
8111c2d4:	10001926 	beq	r2,zero,8111c33c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
8111c2d8:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111c2dc:	00000d06 	br	8111c314 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8111c2e0:	01000044 	movi	r4,1
8111c2e4:	11194080 	call	81119408 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111c2e8:	e0bff30b 	ldhu	r2,-52(fp)
8111c2ec:	1084e230 	cmpltui	r2,r2,5000
8111c2f0:	1000051e 	bne	r2,zero,8111c308 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
8111c2f4:	012044b4 	movhi	r4,33042
8111c2f8:	213fe704 	addi	r4,r4,-100
8111c2fc:	1119ba80 	call	81119ba8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111c300:	00bff084 	movi	r2,-62
8111c304:	00005e06 	br	8111c480 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
8111c308:	e0bff30b 	ldhu	r2,-52(fp)
8111c30c:	10800044 	addi	r2,r2,1
8111c310:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111c314:	e0bffd17 	ldw	r2,-12(fp)
8111c318:	10c00317 	ldw	r3,12(r2)
8111c31c:	e0bffd17 	ldw	r2,-12(fp)
8111c320:	10800417 	ldw	r2,16(r2)
8111c324:	e1bfff17 	ldw	r6,-4(fp)
8111c328:	100b883a 	mov	r5,r2
8111c32c:	1809883a 	mov	r4,r3
8111c330:	111b9bc0 	call	8111b9bc <alt_msgdma_write_extended_descriptor>
8111c334:	103fea1e 	bne	r2,zero,8111c2e0 <__reset+0xfb0fc2e0>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111c338:	00000206 	br	8111c344 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8111c33c:	00bfffc4 	movi	r2,-1
8111c340:	00004f06 	br	8111c480 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8111c344:	e0bffd17 	ldw	r2,-12(fp)
8111c348:	10800317 	ldw	r2,12(r2)
8111c34c:	10800104 	addi	r2,r2,4
8111c350:	e0fffd17 	ldw	r3,-12(fp)
8111c354:	19000d17 	ldw	r4,52(r3)
8111c358:	00fff2c4 	movi	r3,-53
8111c35c:	20c6703a 	and	r3,r4,r3
8111c360:	18c00114 	ori	r3,r3,4
8111c364:	10c00035 	stwio	r3,0(r2)
8111c368:	e0bff717 	ldw	r2,-36(fp)
8111c36c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c370:	e0bff917 	ldw	r2,-28(fp)
8111c374:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8111c378:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8111c37c:	e0bffd17 	ldw	r2,-12(fp)
8111c380:	10800317 	ldw	r2,12(r2)
8111c384:	10800037 	ldwio	r2,0(r2)
8111c388:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8111c38c:	00001106 	br	8111c3d4 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
8111c390:	01000044 	movi	r4,1
8111c394:	11194080 	call	81119408 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111c398:	e0bff30b 	ldhu	r2,-52(fp)
8111c39c:	1084e230 	cmpltui	r2,r2,5000
8111c3a0:	1000051e 	bne	r2,zero,8111c3b8 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8111c3a4:	012044b4 	movhi	r4,33042
8111c3a8:	213ff804 	addi	r4,r4,-32
8111c3ac:	1119ba80 	call	81119ba8 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
8111c3b0:	00bff084 	movi	r2,-62
8111c3b4:	00003206 	br	8111c480 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
8111c3b8:	e0bff30b 	ldhu	r2,-52(fp)
8111c3bc:	10800044 	addi	r2,r2,1
8111c3c0:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8111c3c4:	e0bffd17 	ldw	r2,-12(fp)
8111c3c8:	10800317 	ldw	r2,12(r2)
8111c3cc:	10800037 	ldwio	r2,0(r2)
8111c3d0:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8111c3d4:	e0fff217 	ldw	r3,-56(fp)
8111c3d8:	e0bff817 	ldw	r2,-32(fp)
8111c3dc:	1884703a 	and	r2,r3,r2
8111c3e0:	1000031e 	bne	r2,zero,8111c3f0 <alt_msgdma_descriptor_sync_transfer+0x2d4>
8111c3e4:	e0bff217 	ldw	r2,-56(fp)
8111c3e8:	1080004c 	andi	r2,r2,1
8111c3ec:	103fe81e 	bne	r2,zero,8111c390 <__reset+0xfb0fc390>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8111c3f0:	e0fff217 	ldw	r3,-56(fp)
8111c3f4:	e0bff817 	ldw	r2,-32(fp)
8111c3f8:	1884703a 	and	r2,r3,r2
8111c3fc:	10000226 	beq	r2,zero,8111c408 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
8111c400:	e0bff817 	ldw	r2,-32(fp)
8111c404:	00001e06 	br	8111c480 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8111c408:	e0bffd17 	ldw	r2,-12(fp)
8111c40c:	10800317 	ldw	r2,12(r2)
8111c410:	10800104 	addi	r2,r2,4
8111c414:	10800037 	ldwio	r2,0(r2)
8111c418:	10800814 	ori	r2,r2,32
8111c41c:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c420:	0005303a 	rdctl	r2,status
8111c424:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c428:	e0fffa17 	ldw	r3,-24(fp)
8111c42c:	00bfff84 	movi	r2,-2
8111c430:	1884703a 	and	r2,r3,r2
8111c434:	1001703a 	wrctl	status,r2
  
  return context;
8111c438:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8111c43c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111c440:	e0bffd17 	ldw	r2,-12(fp)
8111c444:	10800317 	ldw	r2,12(r2)
8111c448:	10800104 	addi	r2,r2,4
8111c44c:	e0fff617 	ldw	r3,-40(fp)
8111c450:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111c454:	e0bffd17 	ldw	r2,-12(fp)
8111c458:	10800317 	ldw	r2,12(r2)
8111c45c:	e0fffd17 	ldw	r3,-12(fp)
8111c460:	18c00317 	ldw	r3,12(r3)
8111c464:	18c00037 	ldwio	r3,0(r3)
8111c468:	10c00035 	stwio	r3,0(r2)
8111c46c:	e0bff717 	ldw	r2,-36(fp)
8111c470:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c474:	e0bffb17 	ldw	r2,-20(fp)
8111c478:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8111c47c:	0005883a 	mov	r2,zero

}
8111c480:	e037883a 	mov	sp,fp
8111c484:	dfc00117 	ldw	ra,4(sp)
8111c488:	df000017 	ldw	fp,0(sp)
8111c48c:	dec00204 	addi	sp,sp,8
8111c490:	f800283a 	ret

8111c494 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8111c494:	defff804 	addi	sp,sp,-32
8111c498:	dfc00715 	stw	ra,28(sp)
8111c49c:	df000615 	stw	fp,24(sp)
8111c4a0:	df000604 	addi	fp,sp,24
8111c4a4:	e13ffc15 	stw	r4,-16(fp)
8111c4a8:	e17ffd15 	stw	r5,-12(fp)
8111c4ac:	e1bffe15 	stw	r6,-8(fp)
8111c4b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8111c4b4:	e0800217 	ldw	r2,8(fp)
8111c4b8:	d8800115 	stw	r2,4(sp)
8111c4bc:	e0bfff17 	ldw	r2,-4(fp)
8111c4c0:	d8800015 	stw	r2,0(sp)
8111c4c4:	e1fffe17 	ldw	r7,-8(fp)
8111c4c8:	000d883a 	mov	r6,zero
8111c4cc:	e17ffd17 	ldw	r5,-12(fp)
8111c4d0:	e13ffc17 	ldw	r4,-16(fp)
8111c4d4:	111bc6c0 	call	8111bc6c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8111c4d8:	e037883a 	mov	sp,fp
8111c4dc:	dfc00117 	ldw	ra,4(sp)
8111c4e0:	df000017 	ldw	fp,0(sp)
8111c4e4:	dec00204 	addi	sp,sp,8
8111c4e8:	f800283a 	ret

8111c4ec <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8111c4ec:	defff804 	addi	sp,sp,-32
8111c4f0:	dfc00715 	stw	ra,28(sp)
8111c4f4:	df000615 	stw	fp,24(sp)
8111c4f8:	df000604 	addi	fp,sp,24
8111c4fc:	e13ffc15 	stw	r4,-16(fp)
8111c500:	e17ffd15 	stw	r5,-12(fp)
8111c504:	e1bffe15 	stw	r6,-8(fp)
8111c508:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8111c50c:	e0800217 	ldw	r2,8(fp)
8111c510:	d8800115 	stw	r2,4(sp)
8111c514:	e0bfff17 	ldw	r2,-4(fp)
8111c518:	d8800015 	stw	r2,0(sp)
8111c51c:	000f883a 	mov	r7,zero
8111c520:	e1bffe17 	ldw	r6,-8(fp)
8111c524:	e17ffd17 	ldw	r5,-12(fp)
8111c528:	e13ffc17 	ldw	r4,-16(fp)
8111c52c:	111bc6c0 	call	8111bc6c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8111c530:	e037883a 	mov	sp,fp
8111c534:	dfc00117 	ldw	ra,4(sp)
8111c538:	df000017 	ldw	fp,0(sp)
8111c53c:	dec00204 	addi	sp,sp,8
8111c540:	f800283a 	ret

8111c544 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111c544:	defff804 	addi	sp,sp,-32
8111c548:	dfc00715 	stw	ra,28(sp)
8111c54c:	df000615 	stw	fp,24(sp)
8111c550:	df000604 	addi	fp,sp,24
8111c554:	e13ffc15 	stw	r4,-16(fp)
8111c558:	e17ffd15 	stw	r5,-12(fp)
8111c55c:	e1bffe15 	stw	r6,-8(fp)
8111c560:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8111c564:	e0800317 	ldw	r2,12(fp)
8111c568:	d8800115 	stw	r2,4(sp)
8111c56c:	e0800217 	ldw	r2,8(fp)
8111c570:	d8800015 	stw	r2,0(sp)
8111c574:	e1ffff17 	ldw	r7,-4(fp)
8111c578:	e1bffe17 	ldw	r6,-8(fp)
8111c57c:	e17ffd17 	ldw	r5,-12(fp)
8111c580:	e13ffc17 	ldw	r4,-16(fp)
8111c584:	111bc6c0 	call	8111bc6c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8111c588:	e037883a 	mov	sp,fp
8111c58c:	dfc00117 	ldw	ra,4(sp)
8111c590:	df000017 	ldw	fp,0(sp)
8111c594:	dec00204 	addi	sp,sp,8
8111c598:	f800283a 	ret

8111c59c <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
8111c59c:	defff004 	addi	sp,sp,-64
8111c5a0:	dfc00f15 	stw	ra,60(sp)
8111c5a4:	df000e15 	stw	fp,56(sp)
8111c5a8:	df000e04 	addi	fp,sp,56
8111c5ac:	e13ff915 	stw	r4,-28(fp)
8111c5b0:	e17ffa15 	stw	r5,-24(fp)
8111c5b4:	e1bffb15 	stw	r6,-20(fp)
8111c5b8:	e1fffc15 	stw	r7,-16(fp)
8111c5bc:	e1000317 	ldw	r4,12(fp)
8111c5c0:	e0c00417 	ldw	r3,16(fp)
8111c5c4:	e0800517 	ldw	r2,20(fp)
8111c5c8:	e13ffd0d 	sth	r4,-12(fp)
8111c5cc:	e0fffe05 	stb	r3,-8(fp)
8111c5d0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8111c5d4:	e0bffd0b 	ldhu	r2,-12(fp)
8111c5d8:	e0fffe03 	ldbu	r3,-8(fp)
8111c5dc:	e13fff0b 	ldhu	r4,-4(fp)
8111c5e0:	d9000615 	stw	r4,24(sp)
8111c5e4:	d8000515 	stw	zero,20(sp)
8111c5e8:	d8c00415 	stw	r3,16(sp)
8111c5ec:	d8000315 	stw	zero,12(sp)
8111c5f0:	d8800215 	stw	r2,8(sp)
8111c5f4:	e0800217 	ldw	r2,8(fp)
8111c5f8:	d8800115 	stw	r2,4(sp)
8111c5fc:	e0bffc17 	ldw	r2,-16(fp)
8111c600:	d8800015 	stw	r2,0(sp)
8111c604:	e1fffb17 	ldw	r7,-20(fp)
8111c608:	000d883a 	mov	r6,zero
8111c60c:	e17ffa17 	ldw	r5,-24(fp)
8111c610:	e13ff917 	ldw	r4,-28(fp)
8111c614:	111bcf80 	call	8111bcf8 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8111c618:	e037883a 	mov	sp,fp
8111c61c:	dfc00117 	ldw	ra,4(sp)
8111c620:	df000017 	ldw	fp,0(sp)
8111c624:	dec00204 	addi	sp,sp,8
8111c628:	f800283a 	ret

8111c62c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8111c62c:	defff004 	addi	sp,sp,-64
8111c630:	dfc00f15 	stw	ra,60(sp)
8111c634:	df000e15 	stw	fp,56(sp)
8111c638:	df000e04 	addi	fp,sp,56
8111c63c:	e13ff915 	stw	r4,-28(fp)
8111c640:	e17ffa15 	stw	r5,-24(fp)
8111c644:	e1bffb15 	stw	r6,-20(fp)
8111c648:	e1fffc15 	stw	r7,-16(fp)
8111c64c:	e1000317 	ldw	r4,12(fp)
8111c650:	e0c00417 	ldw	r3,16(fp)
8111c654:	e0800517 	ldw	r2,20(fp)
8111c658:	e13ffd0d 	sth	r4,-12(fp)
8111c65c:	e0fffe05 	stb	r3,-8(fp)
8111c660:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8111c664:	e0bffd0b 	ldhu	r2,-12(fp)
8111c668:	e0fffe03 	ldbu	r3,-8(fp)
8111c66c:	e13fff0b 	ldhu	r4,-4(fp)
8111c670:	d8000615 	stw	zero,24(sp)
8111c674:	d9000515 	stw	r4,20(sp)
8111c678:	d8000415 	stw	zero,16(sp)
8111c67c:	d8c00315 	stw	r3,12(sp)
8111c680:	d8800215 	stw	r2,8(sp)
8111c684:	e0800217 	ldw	r2,8(fp)
8111c688:	d8800115 	stw	r2,4(sp)
8111c68c:	e0bffc17 	ldw	r2,-16(fp)
8111c690:	d8800015 	stw	r2,0(sp)
8111c694:	000f883a 	mov	r7,zero
8111c698:	e1bffb17 	ldw	r6,-20(fp)
8111c69c:	e17ffa17 	ldw	r5,-24(fp)
8111c6a0:	e13ff917 	ldw	r4,-28(fp)
8111c6a4:	111bcf80 	call	8111bcf8 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8111c6a8:	e037883a 	mov	sp,fp
8111c6ac:	dfc00117 	ldw	ra,4(sp)
8111c6b0:	df000017 	ldw	fp,0(sp)
8111c6b4:	dec00204 	addi	sp,sp,8
8111c6b8:	f800283a 	ret

8111c6bc <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8111c6bc:	deffee04 	addi	sp,sp,-72
8111c6c0:	dfc01115 	stw	ra,68(sp)
8111c6c4:	df001015 	stw	fp,64(sp)
8111c6c8:	df001004 	addi	fp,sp,64
8111c6cc:	e13ff715 	stw	r4,-36(fp)
8111c6d0:	e17ff815 	stw	r5,-32(fp)
8111c6d4:	e1bff915 	stw	r6,-28(fp)
8111c6d8:	e1fffa15 	stw	r7,-24(fp)
8111c6dc:	e1800417 	ldw	r6,16(fp)
8111c6e0:	e1400517 	ldw	r5,20(fp)
8111c6e4:	e1000617 	ldw	r4,24(fp)
8111c6e8:	e0c00717 	ldw	r3,28(fp)
8111c6ec:	e0800817 	ldw	r2,32(fp)
8111c6f0:	e1bffb0d 	sth	r6,-20(fp)
8111c6f4:	e17ffc05 	stb	r5,-16(fp)
8111c6f8:	e13ffd05 	stb	r4,-12(fp)
8111c6fc:	e0fffe0d 	sth	r3,-8(fp)
8111c700:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8111c704:	e0bffb0b 	ldhu	r2,-20(fp)
8111c708:	e0fffc03 	ldbu	r3,-16(fp)
8111c70c:	e13ffd03 	ldbu	r4,-12(fp)
8111c710:	e17ffe0b 	ldhu	r5,-8(fp)
8111c714:	e1bfff0b 	ldhu	r6,-4(fp)
8111c718:	d9800615 	stw	r6,24(sp)
8111c71c:	d9400515 	stw	r5,20(sp)
8111c720:	d9000415 	stw	r4,16(sp)
8111c724:	d8c00315 	stw	r3,12(sp)
8111c728:	d8800215 	stw	r2,8(sp)
8111c72c:	e0800317 	ldw	r2,12(fp)
8111c730:	d8800115 	stw	r2,4(sp)
8111c734:	e0800217 	ldw	r2,8(fp)
8111c738:	d8800015 	stw	r2,0(sp)
8111c73c:	e1fffa17 	ldw	r7,-24(fp)
8111c740:	e1bff917 	ldw	r6,-28(fp)
8111c744:	e17ff817 	ldw	r5,-32(fp)
8111c748:	e13ff717 	ldw	r4,-36(fp)
8111c74c:	111bcf80 	call	8111bcf8 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8111c750:	e037883a 	mov	sp,fp
8111c754:	dfc00117 	ldw	ra,4(sp)
8111c758:	df000017 	ldw	fp,0(sp)
8111c75c:	dec00204 	addi	sp,sp,8
8111c760:	f800283a 	ret

8111c764 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111c764:	defffb04 	addi	sp,sp,-20
8111c768:	df000415 	stw	fp,16(sp)
8111c76c:	df000404 	addi	fp,sp,16
8111c770:	e13ffc15 	stw	r4,-16(fp)
8111c774:	e17ffd15 	stw	r5,-12(fp)
8111c778:	e1bffe15 	stw	r6,-8(fp)
8111c77c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8111c780:	e0bffc17 	ldw	r2,-16(fp)
8111c784:	10c01217 	ldw	r3,72(r2)
8111c788:	e0800117 	ldw	r2,4(fp)
8111c78c:	18800436 	bltu	r3,r2,8111c7a0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8111c790:	e0bffc17 	ldw	r2,-16(fp)
8111c794:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8111c798:	10803fcc 	andi	r2,r2,255
8111c79c:	10000226 	beq	r2,zero,8111c7a8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8111c7a0:	00bffa84 	movi	r2,-22
8111c7a4:	00001406 	br	8111c7f8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
8111c7a8:	e0bffd17 	ldw	r2,-12(fp)
8111c7ac:	e0fffe17 	ldw	r3,-8(fp)
8111c7b0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8111c7b4:	e0bffd17 	ldw	r2,-12(fp)
8111c7b8:	e0ffff17 	ldw	r3,-4(fp)
8111c7bc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111c7c0:	e0bffd17 	ldw	r2,-12(fp)
8111c7c4:	e0c00117 	ldw	r3,4(fp)
8111c7c8:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8111c7cc:	e0fffd17 	ldw	r3,-12(fp)
8111c7d0:	e0bffd17 	ldw	r2,-12(fp)
8111c7d4:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111c7d8:	e0c00217 	ldw	r3,8(fp)
8111c7dc:	00900034 	movhi	r2,16384
8111c7e0:	10bfffc4 	addi	r2,r2,-1
8111c7e4:	1884703a 	and	r2,r3,r2
8111c7e8:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8111c7ec:	e0bffd17 	ldw	r2,-12(fp)
8111c7f0:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8111c7f4:	0005883a 	mov	r2,zero
}
8111c7f8:	e037883a 	mov	sp,fp
8111c7fc:	df000017 	ldw	fp,0(sp)
8111c800:	dec00104 	addi	sp,sp,4
8111c804:	f800283a 	ret

8111c808 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8111c808:	defff404 	addi	sp,sp,-48
8111c80c:	df000b15 	stw	fp,44(sp)
8111c810:	df000b04 	addi	fp,sp,44
8111c814:	e13ff715 	stw	r4,-36(fp)
8111c818:	e17ff815 	stw	r5,-32(fp)
8111c81c:	e1bff915 	stw	r6,-28(fp)
8111c820:	e1fffa15 	stw	r7,-24(fp)
8111c824:	e1800517 	ldw	r6,20(fp)
8111c828:	e1400617 	ldw	r5,24(fp)
8111c82c:	e1000717 	ldw	r4,28(fp)
8111c830:	e0c00817 	ldw	r3,32(fp)
8111c834:	e0800917 	ldw	r2,36(fp)
8111c838:	e1bffb0d 	sth	r6,-20(fp)
8111c83c:	e17ffc05 	stb	r5,-16(fp)
8111c840:	e13ffd05 	stb	r4,-12(fp)
8111c844:	e0fffe0d 	sth	r3,-8(fp)
8111c848:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8111c84c:	e0bff717 	ldw	r2,-36(fp)
8111c850:	10c01217 	ldw	r3,72(r2)
8111c854:	e0800317 	ldw	r2,12(fp)
8111c858:	18801936 	bltu	r3,r2,8111c8c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8111c85c:	e13ff717 	ldw	r4,-36(fp)
8111c860:	20801317 	ldw	r2,76(r4)
8111c864:	20c01417 	ldw	r3,80(r4)
8111c868:	e13ffe0b 	ldhu	r4,-8(fp)
8111c86c:	213fffcc 	andi	r4,r4,65535
8111c870:	2015883a 	mov	r10,r4
8111c874:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8111c878:	1ac01136 	bltu	r3,r11,8111c8c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8111c87c:	58c0011e 	bne	r11,r3,8111c884 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
8111c880:	12800f36 	bltu	r2,r10,8111c8c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111c884:	e13ff717 	ldw	r4,-36(fp)
8111c888:	20801317 	ldw	r2,76(r4)
8111c88c:	20c01417 	ldw	r3,80(r4)
8111c890:	e13fff0b 	ldhu	r4,-4(fp)
8111c894:	213fffcc 	andi	r4,r4,65535
8111c898:	2011883a 	mov	r8,r4
8111c89c:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8111c8a0:	1a400736 	bltu	r3,r9,8111c8c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8111c8a4:	48c0011e 	bne	r9,r3,8111c8ac <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
8111c8a8:	12000536 	bltu	r2,r8,8111c8c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8111c8ac:	e0bff717 	ldw	r2,-36(fp)
8111c8b0:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111c8b4:	10803fcc 	andi	r2,r2,255
8111c8b8:	10800060 	cmpeqi	r2,r2,1
8111c8bc:	1000021e 	bne	r2,zero,8111c8c8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8111c8c0:	00bffa84 	movi	r2,-22
8111c8c4:	00003106 	br	8111c98c <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
8111c8c8:	e0bff817 	ldw	r2,-32(fp)
8111c8cc:	e0fff917 	ldw	r3,-28(fp)
8111c8d0:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8111c8d4:	e0bff817 	ldw	r2,-32(fp)
8111c8d8:	e0fffa17 	ldw	r3,-24(fp)
8111c8dc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8111c8e0:	e0bff817 	ldw	r2,-32(fp)
8111c8e4:	e0c00117 	ldw	r3,4(fp)
8111c8e8:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8111c8ec:	e0bff817 	ldw	r2,-32(fp)
8111c8f0:	e0c00217 	ldw	r3,8(fp)
8111c8f4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111c8f8:	e0bff817 	ldw	r2,-32(fp)
8111c8fc:	e0c00317 	ldw	r3,12(fp)
8111c900:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8111c904:	e0bff817 	ldw	r2,-32(fp)
8111c908:	e0fffb0b 	ldhu	r3,-20(fp)
8111c90c:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8111c910:	e0bff817 	ldw	r2,-32(fp)
8111c914:	e0fffc03 	ldbu	r3,-16(fp)
8111c918:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8111c91c:	e0bff817 	ldw	r2,-32(fp)
8111c920:	e0fffd03 	ldbu	r3,-12(fp)
8111c924:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8111c928:	e0bff817 	ldw	r2,-32(fp)
8111c92c:	e0fffe0b 	ldhu	r3,-8(fp)
8111c930:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8111c934:	e0bff817 	ldw	r2,-32(fp)
8111c938:	e0ffff0b 	ldhu	r3,-4(fp)
8111c93c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8111c940:	e0bff817 	ldw	r2,-32(fp)
8111c944:	1019883a 	mov	r12,r2
8111c948:	001b883a 	mov	r13,zero
8111c94c:	e33ff515 	stw	r12,-44(fp)
8111c950:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8111c954:	e0fff517 	ldw	r3,-44(fp)
8111c958:	e0bff817 	ldw	r2,-32(fp)
8111c95c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8111c960:	e0fff617 	ldw	r3,-40(fp)
8111c964:	e0bff817 	ldw	r2,-32(fp)
8111c968:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111c96c:	e0c00417 	ldw	r3,16(fp)
8111c970:	00900034 	movhi	r2,16384
8111c974:	10bfffc4 	addi	r2,r2,-1
8111c978:	1884703a 	and	r2,r3,r2
8111c97c:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8111c980:	e0bff817 	ldw	r2,-32(fp)
8111c984:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8111c988:	0005883a 	mov	r2,zero
}
8111c98c:	e037883a 	mov	sp,fp
8111c990:	df000017 	ldw	fp,0(sp)
8111c994:	dec00104 	addi	sp,sp,4
8111c998:	f800283a 	ret

8111c99c <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
8111c99c:	defff804 	addi	sp,sp,-32
8111c9a0:	dfc00715 	stw	ra,28(sp)
8111c9a4:	df000615 	stw	fp,24(sp)
8111c9a8:	df000604 	addi	fp,sp,24
8111c9ac:	e13ffc15 	stw	r4,-16(fp)
8111c9b0:	e17ffd15 	stw	r5,-12(fp)
8111c9b4:	e1bffe15 	stw	r6,-8(fp)
8111c9b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8111c9bc:	e0800317 	ldw	r2,12(fp)
8111c9c0:	d8800115 	stw	r2,4(sp)
8111c9c4:	e0800217 	ldw	r2,8(fp)
8111c9c8:	d8800015 	stw	r2,0(sp)
8111c9cc:	e1ffff17 	ldw	r7,-4(fp)
8111c9d0:	e1bffe17 	ldw	r6,-8(fp)
8111c9d4:	e17ffd17 	ldw	r5,-12(fp)
8111c9d8:	e13ffc17 	ldw	r4,-16(fp)
8111c9dc:	111c7640 	call	8111c764 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
8111c9e0:	e037883a 	mov	sp,fp
8111c9e4:	dfc00117 	ldw	ra,4(sp)
8111c9e8:	df000017 	ldw	fp,0(sp)
8111c9ec:	dec00204 	addi	sp,sp,8
8111c9f0:	f800283a 	ret

8111c9f4 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111c9f4:	defff804 	addi	sp,sp,-32
8111c9f8:	dfc00715 	stw	ra,28(sp)
8111c9fc:	df000615 	stw	fp,24(sp)
8111ca00:	df000604 	addi	fp,sp,24
8111ca04:	e13ffc15 	stw	r4,-16(fp)
8111ca08:	e17ffd15 	stw	r5,-12(fp)
8111ca0c:	e1bffe15 	stw	r6,-8(fp)
8111ca10:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8111ca14:	e0800217 	ldw	r2,8(fp)
8111ca18:	d8800115 	stw	r2,4(sp)
8111ca1c:	e0bfff17 	ldw	r2,-4(fp)
8111ca20:	d8800015 	stw	r2,0(sp)
8111ca24:	e1fffe17 	ldw	r7,-8(fp)
8111ca28:	000d883a 	mov	r6,zero
8111ca2c:	e17ffd17 	ldw	r5,-12(fp)
8111ca30:	e13ffc17 	ldw	r4,-16(fp)
8111ca34:	111c7640 	call	8111c764 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
8111ca38:	e037883a 	mov	sp,fp
8111ca3c:	dfc00117 	ldw	ra,4(sp)
8111ca40:	df000017 	ldw	fp,0(sp)
8111ca44:	dec00204 	addi	sp,sp,8
8111ca48:	f800283a 	ret

8111ca4c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111ca4c:	defff804 	addi	sp,sp,-32
8111ca50:	dfc00715 	stw	ra,28(sp)
8111ca54:	df000615 	stw	fp,24(sp)
8111ca58:	df000604 	addi	fp,sp,24
8111ca5c:	e13ffc15 	stw	r4,-16(fp)
8111ca60:	e17ffd15 	stw	r5,-12(fp)
8111ca64:	e1bffe15 	stw	r6,-8(fp)
8111ca68:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8111ca6c:	e0800217 	ldw	r2,8(fp)
8111ca70:	d8800115 	stw	r2,4(sp)
8111ca74:	e0bfff17 	ldw	r2,-4(fp)
8111ca78:	d8800015 	stw	r2,0(sp)
8111ca7c:	000f883a 	mov	r7,zero
8111ca80:	e1bffe17 	ldw	r6,-8(fp)
8111ca84:	e17ffd17 	ldw	r5,-12(fp)
8111ca88:	e13ffc17 	ldw	r4,-16(fp)
8111ca8c:	111c7640 	call	8111c764 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8111ca90:	e037883a 	mov	sp,fp
8111ca94:	dfc00117 	ldw	ra,4(sp)
8111ca98:	df000017 	ldw	fp,0(sp)
8111ca9c:	dec00204 	addi	sp,sp,8
8111caa0:	f800283a 	ret

8111caa4 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8111caa4:	deffee04 	addi	sp,sp,-72
8111caa8:	dfc01115 	stw	ra,68(sp)
8111caac:	df001015 	stw	fp,64(sp)
8111cab0:	df001004 	addi	fp,sp,64
8111cab4:	e13ff915 	stw	r4,-28(fp)
8111cab8:	e17ffa15 	stw	r5,-24(fp)
8111cabc:	e1bffb15 	stw	r6,-20(fp)
8111cac0:	e1fffc15 	stw	r7,-16(fp)
8111cac4:	e1000417 	ldw	r4,16(fp)
8111cac8:	e0c00517 	ldw	r3,20(fp)
8111cacc:	e0800617 	ldw	r2,24(fp)
8111cad0:	e13ffd0d 	sth	r4,-12(fp)
8111cad4:	e0fffe05 	stb	r3,-8(fp)
8111cad8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8111cadc:	e0bffd0b 	ldhu	r2,-12(fp)
8111cae0:	e0fffe03 	ldbu	r3,-8(fp)
8111cae4:	e13fff0b 	ldhu	r4,-4(fp)
8111cae8:	d9000815 	stw	r4,32(sp)
8111caec:	d8000715 	stw	zero,28(sp)
8111caf0:	d8c00615 	stw	r3,24(sp)
8111caf4:	d8000515 	stw	zero,20(sp)
8111caf8:	d8800415 	stw	r2,16(sp)
8111cafc:	e0800317 	ldw	r2,12(fp)
8111cb00:	d8800315 	stw	r2,12(sp)
8111cb04:	e0800217 	ldw	r2,8(fp)
8111cb08:	d8800215 	stw	r2,8(sp)
8111cb0c:	e0bffc17 	ldw	r2,-16(fp)
8111cb10:	d8800115 	stw	r2,4(sp)
8111cb14:	e0bffb17 	ldw	r2,-20(fp)
8111cb18:	d8800015 	stw	r2,0(sp)
8111cb1c:	000f883a 	mov	r7,zero
8111cb20:	000d883a 	mov	r6,zero
8111cb24:	e17ffa17 	ldw	r5,-24(fp)
8111cb28:	e13ff917 	ldw	r4,-28(fp)
8111cb2c:	111c8080 	call	8111c808 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8111cb30:	e037883a 	mov	sp,fp
8111cb34:	dfc00117 	ldw	ra,4(sp)
8111cb38:	df000017 	ldw	fp,0(sp)
8111cb3c:	dec00204 	addi	sp,sp,8
8111cb40:	f800283a 	ret

8111cb44 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8111cb44:	deffee04 	addi	sp,sp,-72
8111cb48:	dfc01115 	stw	ra,68(sp)
8111cb4c:	df001015 	stw	fp,64(sp)
8111cb50:	df001004 	addi	fp,sp,64
8111cb54:	e13ff915 	stw	r4,-28(fp)
8111cb58:	e17ffa15 	stw	r5,-24(fp)
8111cb5c:	e1bffb15 	stw	r6,-20(fp)
8111cb60:	e1fffc15 	stw	r7,-16(fp)
8111cb64:	e1000417 	ldw	r4,16(fp)
8111cb68:	e0c00517 	ldw	r3,20(fp)
8111cb6c:	e0800617 	ldw	r2,24(fp)
8111cb70:	e13ffd0d 	sth	r4,-12(fp)
8111cb74:	e0fffe05 	stb	r3,-8(fp)
8111cb78:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8111cb7c:	e0bffd0b 	ldhu	r2,-12(fp)
8111cb80:	e0fffe03 	ldbu	r3,-8(fp)
8111cb84:	e13fff0b 	ldhu	r4,-4(fp)
8111cb88:	d8000815 	stw	zero,32(sp)
8111cb8c:	d9000715 	stw	r4,28(sp)
8111cb90:	d8000615 	stw	zero,24(sp)
8111cb94:	d8c00515 	stw	r3,20(sp)
8111cb98:	d8800415 	stw	r2,16(sp)
8111cb9c:	e0800317 	ldw	r2,12(fp)
8111cba0:	d8800315 	stw	r2,12(sp)
8111cba4:	e0800217 	ldw	r2,8(fp)
8111cba8:	d8800215 	stw	r2,8(sp)
8111cbac:	d8000115 	stw	zero,4(sp)
8111cbb0:	d8000015 	stw	zero,0(sp)
8111cbb4:	e1fffc17 	ldw	r7,-16(fp)
8111cbb8:	e1bffb17 	ldw	r6,-20(fp)
8111cbbc:	e17ffa17 	ldw	r5,-24(fp)
8111cbc0:	e13ff917 	ldw	r4,-28(fp)
8111cbc4:	111c8080 	call	8111c808 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
8111cbc8:	e037883a 	mov	sp,fp
8111cbcc:	dfc00117 	ldw	ra,4(sp)
8111cbd0:	df000017 	ldw	fp,0(sp)
8111cbd4:	dec00204 	addi	sp,sp,8
8111cbd8:	f800283a 	ret

8111cbdc <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8111cbdc:	deffec04 	addi	sp,sp,-80
8111cbe0:	dfc01315 	stw	ra,76(sp)
8111cbe4:	df001215 	stw	fp,72(sp)
8111cbe8:	df001204 	addi	fp,sp,72
8111cbec:	e13ff715 	stw	r4,-36(fp)
8111cbf0:	e17ff815 	stw	r5,-32(fp)
8111cbf4:	e1bff915 	stw	r6,-28(fp)
8111cbf8:	e1fffa15 	stw	r7,-24(fp)
8111cbfc:	e1800617 	ldw	r6,24(fp)
8111cc00:	e1400717 	ldw	r5,28(fp)
8111cc04:	e1000817 	ldw	r4,32(fp)
8111cc08:	e0c00917 	ldw	r3,36(fp)
8111cc0c:	e0800a17 	ldw	r2,40(fp)
8111cc10:	e1bffb0d 	sth	r6,-20(fp)
8111cc14:	e17ffc05 	stb	r5,-16(fp)
8111cc18:	e13ffd05 	stb	r4,-12(fp)
8111cc1c:	e0fffe0d 	sth	r3,-8(fp)
8111cc20:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8111cc24:	e0bffb0b 	ldhu	r2,-20(fp)
8111cc28:	e0fffc03 	ldbu	r3,-16(fp)
8111cc2c:	e13ffd03 	ldbu	r4,-12(fp)
8111cc30:	e17ffe0b 	ldhu	r5,-8(fp)
8111cc34:	e1bfff0b 	ldhu	r6,-4(fp)
8111cc38:	d9800815 	stw	r6,32(sp)
8111cc3c:	d9400715 	stw	r5,28(sp)
8111cc40:	d9000615 	stw	r4,24(sp)
8111cc44:	d8c00515 	stw	r3,20(sp)
8111cc48:	d8800415 	stw	r2,16(sp)
8111cc4c:	e0800517 	ldw	r2,20(fp)
8111cc50:	d8800315 	stw	r2,12(sp)
8111cc54:	e0800417 	ldw	r2,16(fp)
8111cc58:	d8800215 	stw	r2,8(sp)
8111cc5c:	e0800317 	ldw	r2,12(fp)
8111cc60:	d8800115 	stw	r2,4(sp)
8111cc64:	e0800217 	ldw	r2,8(fp)
8111cc68:	d8800015 	stw	r2,0(sp)
8111cc6c:	e1fffa17 	ldw	r7,-24(fp)
8111cc70:	e1bff917 	ldw	r6,-28(fp)
8111cc74:	e17ff817 	ldw	r5,-32(fp)
8111cc78:	e13ff717 	ldw	r4,-36(fp)
8111cc7c:	111c8080 	call	8111c808 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8111cc80:	e037883a 	mov	sp,fp
8111cc84:	dfc00117 	ldw	ra,4(sp)
8111cc88:	df000017 	ldw	fp,0(sp)
8111cc8c:	dec00204 	addi	sp,sp,8
8111cc90:	f800283a 	ret

8111cc94 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8111cc94:	defffc04 	addi	sp,sp,-16
8111cc98:	df000315 	stw	fp,12(sp)
8111cc9c:	df000304 	addi	fp,sp,12
8111cca0:	e13ffe15 	stw	r4,-8(fp)
8111cca4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8111cca8:	e0bfff17 	ldw	r2,-4(fp)
8111ccac:	1000021e 	bne	r2,zero,8111ccb8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8111ccb0:	00bffa84 	movi	r2,-22
8111ccb4:	00002f06 	br	8111cd74 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8111ccb8:	e0bfff17 	ldw	r2,-4(fp)
8111ccbc:	10c00317 	ldw	r3,12(r2)
8111ccc0:	e0bfff17 	ldw	r2,-4(fp)
8111ccc4:	18800226 	beq	r3,r2,8111ccd0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8111ccc8:	00bffa84 	movi	r2,-22
8111cccc:	00002906 	br	8111cd74 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
8111ccd0:	e0bffe17 	ldw	r2,-8(fp)
8111ccd4:	10800017 	ldw	r2,0(r2)
8111ccd8:	1000051e 	bne	r2,zero,8111ccf0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
8111ccdc:	e0bffe17 	ldw	r2,-8(fp)
8111cce0:	e0ffff17 	ldw	r3,-4(fp)
8111cce4:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
8111cce8:	0005883a 	mov	r2,zero
8111ccec:	00002106 	br	8111cd74 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
8111ccf0:	e0bffe17 	ldw	r2,-8(fp)
8111ccf4:	10c00017 	ldw	r3,0(r2)
8111ccf8:	e0bfff17 	ldw	r2,-4(fp)
8111ccfc:	1880021e 	bne	r3,r2,8111cd08 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8111cd00:	00bffa84 	movi	r2,-22
8111cd04:	00001b06 	br	8111cd74 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8111cd08:	e0bffe17 	ldw	r2,-8(fp)
8111cd0c:	10800017 	ldw	r2,0(r2)
8111cd10:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8111cd14:	00000906 	br	8111cd3c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8111cd18:	e0bffd17 	ldw	r2,-12(fp)
8111cd1c:	10c00317 	ldw	r3,12(r2)
8111cd20:	e0bfff17 	ldw	r2,-4(fp)
8111cd24:	1880021e 	bne	r3,r2,8111cd30 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8111cd28:	00bffa84 	movi	r2,-22
8111cd2c:	00001106 	br	8111cd74 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8111cd30:	e0bffd17 	ldw	r2,-12(fp)
8111cd34:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
8111cd38:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8111cd3c:	e0bffd17 	ldw	r2,-12(fp)
8111cd40:	10800317 	ldw	r2,12(r2)
8111cd44:	e0fffe17 	ldw	r3,-8(fp)
8111cd48:	18c00017 	ldw	r3,0(r3)
8111cd4c:	10fff21e 	bne	r2,r3,8111cd18 <__reset+0xfb0fcd18>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8111cd50:	e0ffff17 	ldw	r3,-4(fp)
8111cd54:	e0bffd17 	ldw	r2,-12(fp)
8111cd58:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8111cd5c:	e0bffe17 	ldw	r2,-8(fp)
8111cd60:	10800017 	ldw	r2,0(r2)
8111cd64:	1007883a 	mov	r3,r2
8111cd68:	e0bfff17 	ldw	r2,-4(fp)
8111cd6c:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8111cd70:	0005883a 	mov	r2,zero
}
8111cd74:	e037883a 	mov	sp,fp
8111cd78:	df000017 	ldw	fp,0(sp)
8111cd7c:	dec00104 	addi	sp,sp,4
8111cd80:	f800283a 	ret

8111cd84 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8111cd84:	defff804 	addi	sp,sp,-32
8111cd88:	df000715 	stw	fp,28(sp)
8111cd8c:	df000704 	addi	fp,sp,28
8111cd90:	e13ffe15 	stw	r4,-8(fp)
8111cd94:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
8111cd98:	e13fff17 	ldw	r4,-4(fp)
8111cd9c:	2000021e 	bne	r4,zero,8111cda8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8111cda0:	00bffa84 	movi	r2,-22
8111cda4:	00005906 	br	8111cf0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
8111cda8:	e13fff17 	ldw	r4,-4(fp)
8111cdac:	2015883a 	mov	r10,r4
8111cdb0:	0017883a 	mov	r11,zero
8111cdb4:	e2bffc15 	stw	r10,-16(fp)
8111cdb8:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8111cdbc:	e13fff17 	ldw	r4,-4(fp)
8111cdc0:	21400317 	ldw	r5,12(r4)
8111cdc4:	e13ffc17 	ldw	r4,-16(fp)
8111cdc8:	29000626 	beq	r5,r4,8111cde4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8111cdcc:	e13fff17 	ldw	r4,-4(fp)
8111cdd0:	21400b17 	ldw	r5,44(r4)
8111cdd4:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8111cdd8:	29000226 	beq	r5,r4,8111cde4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8111cddc:	00bffa84 	movi	r2,-22
8111cde0:	00004a06 	br	8111cf0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
8111cde4:	e13ffe17 	ldw	r4,-8(fp)
8111cde8:	21000017 	ldw	r4,0(r4)
8111cdec:	2000051e 	bne	r4,zero,8111ce04 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
8111cdf0:	e0bffe17 	ldw	r2,-8(fp)
8111cdf4:	e0ffff17 	ldw	r3,-4(fp)
8111cdf8:	10c00015 	stw	r3,0(r2)
		return 0;
8111cdfc:	0005883a 	mov	r2,zero
8111ce00:	00004206 	br	8111cf0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
8111ce04:	e13ffe17 	ldw	r4,-8(fp)
8111ce08:	21400017 	ldw	r5,0(r4)
8111ce0c:	e13fff17 	ldw	r4,-4(fp)
8111ce10:	2900021e 	bne	r5,r4,8111ce1c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8111ce14:	00bffa84 	movi	r2,-22
8111ce18:	00003c06 	br	8111cf0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8111ce1c:	e13ffe17 	ldw	r4,-8(fp)
8111ce20:	21000017 	ldw	r4,0(r4)
8111ce24:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
8111ce28:	e13ffe17 	ldw	r4,-8(fp)
8111ce2c:	21000017 	ldw	r4,0(r4)
8111ce30:	2011883a 	mov	r8,r4
8111ce34:	0013883a 	mov	r9,zero
8111ce38:	e23ffa15 	stw	r8,-24(fp)
8111ce3c:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111ce40:	00001806 	br	8111cea4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
8111ce44:	e13fff17 	ldw	r4,-4(fp)
8111ce48:	200d883a 	mov	r6,r4
8111ce4c:	000f883a 	mov	r7,zero
8111ce50:	e1bffc15 	stw	r6,-16(fp)
8111ce54:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8111ce58:	e13ff917 	ldw	r4,-28(fp)
8111ce5c:	21400317 	ldw	r5,12(r4)
8111ce60:	e13ffc17 	ldw	r4,-16(fp)
8111ce64:	2900061e 	bne	r5,r4,8111ce80 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8111ce68:	e13ff917 	ldw	r4,-28(fp)
8111ce6c:	21400b17 	ldw	r5,44(r4)
8111ce70:	e13ffd17 	ldw	r4,-12(fp)
8111ce74:	2900021e 	bne	r5,r4,8111ce80 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8111ce78:	00bffa84 	movi	r2,-22
8111ce7c:	00002306 	br	8111cf0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8111ce80:	e13ff917 	ldw	r4,-28(fp)
8111ce84:	21000317 	ldw	r4,12(r4)
8111ce88:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8111ce8c:	e13ff917 	ldw	r4,-28(fp)
8111ce90:	21000b17 	ldw	r4,44(r4)
8111ce94:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8111ce98:	e13ffc17 	ldw	r4,-16(fp)
8111ce9c:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8111cea0:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111cea4:	e13ff917 	ldw	r4,-28(fp)
8111cea8:	21400317 	ldw	r5,12(r4)
8111ceac:	e13ffa17 	ldw	r4,-24(fp)
8111ceb0:	29000426 	beq	r5,r4,8111cec4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8111ceb4:	e13ff917 	ldw	r4,-28(fp)
8111ceb8:	21400b17 	ldw	r5,44(r4)
8111cebc:	e13ffb17 	ldw	r4,-20(fp)
8111cec0:	293fe01e 	bne	r5,r4,8111ce44 <__reset+0xfb0fce44>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
8111cec4:	e13fff17 	ldw	r4,-4(fp)
8111cec8:	2005883a 	mov	r2,r4
8111cecc:	0007883a 	mov	r3,zero
8111ced0:	e0bffc15 	stw	r2,-16(fp)
8111ced4:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8111ced8:	e0fffc17 	ldw	r3,-16(fp)
8111cedc:	e0bff917 	ldw	r2,-28(fp)
8111cee0:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8111cee4:	e0fffd17 	ldw	r3,-12(fp)
8111cee8:	e0bff917 	ldw	r2,-28(fp)
8111ceec:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8111cef0:	e0fffa17 	ldw	r3,-24(fp)
8111cef4:	e0bfff17 	ldw	r2,-4(fp)
8111cef8:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8111cefc:	e0fffb17 	ldw	r3,-20(fp)
8111cf00:	e0bfff17 	ldw	r2,-4(fp)
8111cf04:	10c00b15 	stw	r3,44(r2)
	return 0;
8111cf08:	0005883a 	mov	r2,zero
}
8111cf0c:	e037883a 	mov	sp,fp
8111cf10:	df000017 	ldw	fp,0(sp)
8111cf14:	dec00104 	addi	sp,sp,4
8111cf18:	f800283a 	ret

8111cf1c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8111cf1c:	defffc04 	addi	sp,sp,-16
8111cf20:	df000315 	stw	fp,12(sp)
8111cf24:	df000304 	addi	fp,sp,12
8111cf28:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8111cf2c:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8111cf30:	e0bfff17 	ldw	r2,-4(fp)
8111cf34:	1000021e 	bne	r2,zero,8111cf40 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
8111cf38:	00bffa84 	movi	r2,-22
8111cf3c:	00001906 	br	8111cfa4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8111cf40:	e0bfff17 	ldw	r2,-4(fp)
8111cf44:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8111cf48:	00000a06 	br	8111cf74 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8111cf4c:	e0bffd17 	ldw	r2,-12(fp)
8111cf50:	10800717 	ldw	r2,28(r2)
8111cf54:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111cf58:	e0bffe17 	ldw	r2,-8(fp)
8111cf5c:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8111cf60:	e0bffd17 	ldw	r2,-12(fp)
8111cf64:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8111cf68:	e0bffd17 	ldw	r2,-12(fp)
8111cf6c:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8111cf70:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8111cf74:	e0bffd17 	ldw	r2,-12(fp)
8111cf78:	10c00317 	ldw	r3,12(r2)
8111cf7c:	e0bfff17 	ldw	r2,-4(fp)
8111cf80:	18bff21e 	bne	r3,r2,8111cf4c <__reset+0xfb0fcf4c>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
8111cf84:	e0bffd17 	ldw	r2,-12(fp)
8111cf88:	10800717 	ldw	r2,28(r2)
8111cf8c:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111cf90:	e0bffe17 	ldw	r2,-8(fp)
8111cf94:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8111cf98:	e0bffd17 	ldw	r2,-12(fp)
8111cf9c:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8111cfa0:	0005883a 	mov	r2,zero
}
8111cfa4:	e037883a 	mov	sp,fp
8111cfa8:	df000017 	ldw	fp,0(sp)
8111cfac:	dec00104 	addi	sp,sp,4
8111cfb0:	f800283a 	ret

8111cfb4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
8111cfb4:	defff804 	addi	sp,sp,-32
8111cfb8:	df000715 	stw	fp,28(sp)
8111cfbc:	df000704 	addi	fp,sp,28
8111cfc0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8111cfc4:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
8111cfc8:	e13fff17 	ldw	r4,-4(fp)
8111cfcc:	2000021e 	bne	r4,zero,8111cfd8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
8111cfd0:	00bffa84 	movi	r2,-22
8111cfd4:	00002806 	br	8111d078 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8111cfd8:	e13fff17 	ldw	r4,-4(fp)
8111cfdc:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
8111cfe0:	e13fff17 	ldw	r4,-4(fp)
8111cfe4:	2005883a 	mov	r2,r4
8111cfe8:	0007883a 	mov	r3,zero
8111cfec:	e0bffb15 	stw	r2,-20(fp)
8111cff0:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111cff4:	00001006 	br	8111d038 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
8111cff8:	e0bff917 	ldw	r2,-28(fp)
8111cffc:	10800f17 	ldw	r2,60(r2)
8111d000:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111d004:	e0bffa17 	ldw	r2,-24(fp)
8111d008:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8111d00c:	e0bff917 	ldw	r2,-28(fp)
8111d010:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8111d014:	e0bff917 	ldw	r2,-28(fp)
8111d018:	10800317 	ldw	r2,12(r2)
8111d01c:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8111d020:	e0bff917 	ldw	r2,-28(fp)
8111d024:	10800b17 	ldw	r2,44(r2)
8111d028:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8111d02c:	e0bffd17 	ldw	r2,-12(fp)
8111d030:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8111d034:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111d038:	e0bff917 	ldw	r2,-28(fp)
8111d03c:	10c00317 	ldw	r3,12(r2)
8111d040:	e0bffb17 	ldw	r2,-20(fp)
8111d044:	18800426 	beq	r3,r2,8111d058 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8111d048:	e0bff917 	ldw	r2,-28(fp)
8111d04c:	10c00b17 	ldw	r3,44(r2)
8111d050:	e0bffc17 	ldw	r2,-16(fp)
8111d054:	18bfe81e 	bne	r3,r2,8111cff8 <__reset+0xfb0fcff8>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8111d058:	e0bff917 	ldw	r2,-28(fp)
8111d05c:	10800f17 	ldw	r2,60(r2)
8111d060:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111d064:	e0bffa17 	ldw	r2,-24(fp)
8111d068:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8111d06c:	e0bff917 	ldw	r2,-28(fp)
8111d070:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
8111d074:	0005883a 	mov	r2,zero
}
8111d078:	e037883a 	mov	sp,fp
8111d07c:	df000017 	ldw	fp,0(sp)
8111d080:	dec00104 	addi	sp,sp,4
8111d084:	f800283a 	ret

8111d088 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8111d088:	deffef04 	addi	sp,sp,-68
8111d08c:	df001015 	stw	fp,64(sp)
8111d090:	df001004 	addi	fp,sp,64
8111d094:	e13ffb15 	stw	r4,-20(fp)
8111d098:	e17ffc15 	stw	r5,-16(fp)
8111d09c:	e1bffd15 	stw	r6,-12(fp)
8111d0a0:	3807883a 	mov	r3,r7
8111d0a4:	e0800117 	ldw	r2,4(fp)
8111d0a8:	e0fffe05 	stb	r3,-8(fp)
8111d0ac:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
8111d0b0:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
8111d0b4:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
8111d0b8:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
8111d0bc:	e0bffc17 	ldw	r2,-16(fp)
8111d0c0:	e0bff915 	stw	r2,-28(fp)
8111d0c4:	e0bffd17 	ldw	r2,-12(fp)
8111d0c8:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8111d0cc:	e0bffb17 	ldw	r2,-20(fp)
8111d0d0:	10800617 	ldw	r2,24(r2)
8111d0d4:	10800037 	ldwio	r2,0(r2)
8111d0d8:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8111d0dc:	e0bff017 	ldw	r2,-64(fp)
8111d0e0:	1080004c 	andi	r2,r2,1
8111d0e4:	10000226 	beq	r2,zero,8111d0f0 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
8111d0e8:	00bffc04 	movi	r2,-16
8111d0ec:	00009206 	br	8111d338 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8111d0f0:	00800804 	movi	r2,32
8111d0f4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d0f8:	0005303a 	rdctl	r2,status
8111d0fc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d100:	e0fff517 	ldw	r3,-44(fp)
8111d104:	00bfff84 	movi	r2,-2
8111d108:	1884703a 	and	r2,r3,r2
8111d10c:	1001703a 	wrctl	status,r2
  
  return context;
8111d110:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8111d114:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8111d118:	e0bffb17 	ldw	r2,-20(fp)
8111d11c:	10800317 	ldw	r2,12(r2)
8111d120:	10800104 	addi	r2,r2,4
8111d124:	e0fff117 	ldw	r3,-60(fp)
8111d128:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8111d12c:	e0bffb17 	ldw	r2,-20(fp)
8111d130:	10800317 	ldw	r2,12(r2)
8111d134:	e0fffb17 	ldw	r3,-20(fp)
8111d138:	18c00317 	ldw	r3,12(r3)
8111d13c:	18c00037 	ldwio	r3,0(r3)
8111d140:	10c00035 	stwio	r3,0(r2)
8111d144:	e0bff217 	ldw	r2,-56(fp)
8111d148:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d14c:	e0bff317 	ldw	r2,-52(fp)
8111d150:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8111d154:	e0bffb17 	ldw	r2,-20(fp)
8111d158:	10800b17 	ldw	r2,44(r2)
8111d15c:	10002326 	beq	r2,zero,8111d1ec <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8111d160:	e0bffb17 	ldw	r2,-20(fp)
8111d164:	10c00d17 	ldw	r3,52(r2)
8111d168:	e0bff117 	ldw	r2,-60(fp)
8111d16c:	1884b03a 	or	r2,r3,r2
8111d170:	10800514 	ori	r2,r2,20
8111d174:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8111d178:	e0fff117 	ldw	r3,-60(fp)
8111d17c:	00bff7c4 	movi	r2,-33
8111d180:	1884703a 	and	r2,r3,r2
8111d184:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8111d188:	e0bff017 	ldw	r2,-64(fp)
8111d18c:	10800214 	ori	r2,r2,8
8111d190:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d194:	0005303a 	rdctl	r2,status
8111d198:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d19c:	e0fff717 	ldw	r3,-36(fp)
8111d1a0:	00bfff84 	movi	r2,-2
8111d1a4:	1884703a 	and	r2,r3,r2
8111d1a8:	1001703a 	wrctl	status,r2
  
  return context;
8111d1ac:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
8111d1b0:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8111d1b4:	e0bffb17 	ldw	r2,-20(fp)
8111d1b8:	10800317 	ldw	r2,12(r2)
8111d1bc:	10800104 	addi	r2,r2,4
8111d1c0:	e0fff117 	ldw	r3,-60(fp)
8111d1c4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8111d1c8:	e0bffb17 	ldw	r2,-20(fp)
8111d1cc:	10800617 	ldw	r2,24(r2)
8111d1d0:	e0fff017 	ldw	r3,-64(fp)
8111d1d4:	10c00035 	stwio	r3,0(r2)
8111d1d8:	e0bff217 	ldw	r2,-56(fp)
8111d1dc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d1e0:	e0bff417 	ldw	r2,-48(fp)
8111d1e4:	1001703a 	wrctl	status,r2
8111d1e8:	00002306 	br	8111d278 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8111d1ec:	e0bffb17 	ldw	r2,-20(fp)
8111d1f0:	10c00d17 	ldw	r3,52(r2)
8111d1f4:	e0bff117 	ldw	r2,-60(fp)
8111d1f8:	1884b03a 	or	r2,r3,r2
8111d1fc:	10800114 	ori	r2,r2,4
8111d200:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8111d204:	e0fff117 	ldw	r3,-60(fp)
8111d208:	00bff3c4 	movi	r2,-49
8111d20c:	1884703a 	and	r2,r3,r2
8111d210:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8111d214:	e0fff017 	ldw	r3,-64(fp)
8111d218:	00bffdc4 	movi	r2,-9
8111d21c:	1884703a 	and	r2,r3,r2
8111d220:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d224:	0005303a 	rdctl	r2,status
8111d228:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d22c:	e0fff817 	ldw	r3,-32(fp)
8111d230:	00bfff84 	movi	r2,-2
8111d234:	1884703a 	and	r2,r3,r2
8111d238:	1001703a 	wrctl	status,r2
  
  return context;
8111d23c:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
8111d240:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8111d244:	e0bffb17 	ldw	r2,-20(fp)
8111d248:	10800317 	ldw	r2,12(r2)
8111d24c:	10800104 	addi	r2,r2,4
8111d250:	e0fff117 	ldw	r3,-60(fp)
8111d254:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8111d258:	e0bffb17 	ldw	r2,-20(fp)
8111d25c:	10800617 	ldw	r2,24(r2)
8111d260:	e0fff017 	ldw	r3,-64(fp)
8111d264:	10c00035 	stwio	r3,0(r2)
8111d268:	e0bff217 	ldw	r2,-56(fp)
8111d26c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d270:	e0bff617 	ldw	r2,-40(fp)
8111d274:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8111d278:	e0bffb17 	ldw	r2,-20(fp)
8111d27c:	10800617 	ldw	r2,24(r2)
8111d280:	10800104 	addi	r2,r2,4
8111d284:	e0fff917 	ldw	r3,-28(fp)
8111d288:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8111d28c:	e0bffb17 	ldw	r2,-20(fp)
8111d290:	10800617 	ldw	r2,24(r2)
8111d294:	10800204 	addi	r2,r2,8
8111d298:	e0fffa17 	ldw	r3,-24(fp)
8111d29c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
8111d2a0:	e0bffe03 	ldbu	r2,-8(fp)
8111d2a4:	10000426 	beq	r2,zero,8111d2b8 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8111d2a8:	e0bff017 	ldw	r2,-64(fp)
8111d2ac:	10800414 	ori	r2,r2,16
8111d2b0:	e0bff015 	stw	r2,-64(fp)
8111d2b4:	00000406 	br	8111d2c8 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8111d2b8:	e0fff017 	ldw	r3,-64(fp)
8111d2bc:	00bffbc4 	movi	r2,-17
8111d2c0:	1884703a 	and	r2,r3,r2
8111d2c4:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8111d2c8:	e0bfff03 	ldbu	r2,-4(fp)
8111d2cc:	10000e26 	beq	r2,zero,8111d308 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8111d2d0:	e0bff017 	ldw	r2,-64(fp)
8111d2d4:	10800094 	ori	r2,r2,2
8111d2d8:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8111d2dc:	e0bffb17 	ldw	r2,-20(fp)
8111d2e0:	10800617 	ldw	r2,24(r2)
8111d2e4:	10800304 	addi	r2,r2,12
8111d2e8:	10800037 	ldwio	r2,0(r2)
8111d2ec:	10000a1e 	bne	r2,zero,8111d318 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8111d2f0:	e0bffb17 	ldw	r2,-20(fp)
8111d2f4:	10800617 	ldw	r2,24(r2)
8111d2f8:	10800304 	addi	r2,r2,12
8111d2fc:	00c03fc4 	movi	r3,255
8111d300:	10c00035 	stwio	r3,0(r2)
8111d304:	00000406 	br	8111d318 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8111d308:	e0fff017 	ldw	r3,-64(fp)
8111d30c:	00bfff44 	movi	r2,-3
8111d310:	1884703a 	and	r2,r3,r2
8111d314:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8111d318:	e0bff017 	ldw	r2,-64(fp)
8111d31c:	10800054 	ori	r2,r2,1
8111d320:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8111d324:	e0bffb17 	ldw	r2,-20(fp)
8111d328:	10800617 	ldw	r2,24(r2)
8111d32c:	e0fff017 	ldw	r3,-64(fp)
8111d330:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
8111d334:	0005883a 	mov	r2,zero
}
8111d338:	e037883a 	mov	sp,fp
8111d33c:	df000017 	ldw	fp,0(sp)
8111d340:	dec00104 	addi	sp,sp,4
8111d344:	f800283a 	ret

8111d348 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8111d348:	defff704 	addi	sp,sp,-36
8111d34c:	dfc00815 	stw	ra,32(sp)
8111d350:	df000715 	stw	fp,28(sp)
8111d354:	dc400615 	stw	r17,24(sp)
8111d358:	dc000515 	stw	r16,20(sp)
8111d35c:	df000704 	addi	fp,sp,28
8111d360:	e13ffa15 	stw	r4,-24(fp)
8111d364:	e17ffb15 	stw	r5,-20(fp)
8111d368:	3007883a 	mov	r3,r6
8111d36c:	3805883a 	mov	r2,r7
8111d370:	e0fffc05 	stb	r3,-16(fp)
8111d374:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
8111d378:	e13ffb17 	ldw	r4,-20(fp)
8111d37c:	111cf1c0 	call	8111cf1c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8111d380:	10000226 	beq	r2,zero,8111d38c <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
8111d384:	00bffa84 	movi	r2,-22
8111d388:	00000b06 	br	8111d3b8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8111d38c:	e0bffb17 	ldw	r2,-20(fp)
8111d390:	1021883a 	mov	r16,r2
8111d394:	0023883a 	mov	r17,zero
8111d398:	e0fffc03 	ldbu	r3,-16(fp)
8111d39c:	e0bffd03 	ldbu	r2,-12(fp)
8111d3a0:	d8800015 	stw	r2,0(sp)
8111d3a4:	180f883a 	mov	r7,r3
8111d3a8:	800b883a 	mov	r5,r16
8111d3ac:	880d883a 	mov	r6,r17
8111d3b0:	e13ffa17 	ldw	r4,-24(fp)
8111d3b4:	111d0880 	call	8111d088 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8111d3b8:	e6fffe04 	addi	sp,fp,-8
8111d3bc:	dfc00317 	ldw	ra,12(sp)
8111d3c0:	df000217 	ldw	fp,8(sp)
8111d3c4:	dc400117 	ldw	r17,4(sp)
8111d3c8:	dc000017 	ldw	r16,0(sp)
8111d3cc:	dec00404 	addi	sp,sp,16
8111d3d0:	f800283a 	ret

8111d3d4 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8111d3d4:	defff704 	addi	sp,sp,-36
8111d3d8:	dfc00815 	stw	ra,32(sp)
8111d3dc:	df000715 	stw	fp,28(sp)
8111d3e0:	dc400615 	stw	r17,24(sp)
8111d3e4:	dc000515 	stw	r16,20(sp)
8111d3e8:	df000704 	addi	fp,sp,28
8111d3ec:	e13ffa15 	stw	r4,-24(fp)
8111d3f0:	e17ffb15 	stw	r5,-20(fp)
8111d3f4:	3007883a 	mov	r3,r6
8111d3f8:	3805883a 	mov	r2,r7
8111d3fc:	e0fffc05 	stb	r3,-16(fp)
8111d400:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
8111d404:	e13ffb17 	ldw	r4,-20(fp)
8111d408:	111cfb40 	call	8111cfb4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8111d40c:	10000226 	beq	r2,zero,8111d418 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
8111d410:	00bffa84 	movi	r2,-22
8111d414:	00000b06 	br	8111d444 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8111d418:	e0bffb17 	ldw	r2,-20(fp)
8111d41c:	1021883a 	mov	r16,r2
8111d420:	0023883a 	mov	r17,zero
8111d424:	e0fffc03 	ldbu	r3,-16(fp)
8111d428:	e0bffd03 	ldbu	r2,-12(fp)
8111d42c:	d8800015 	stw	r2,0(sp)
8111d430:	180f883a 	mov	r7,r3
8111d434:	800b883a 	mov	r5,r16
8111d438:	880d883a 	mov	r6,r17
8111d43c:	e13ffa17 	ldw	r4,-24(fp)
8111d440:	111d0880 	call	8111d088 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8111d444:	e6fffe04 	addi	sp,fp,-8
8111d448:	dfc00317 	ldw	ra,12(sp)
8111d44c:	df000217 	ldw	fp,8(sp)
8111d450:	dc400117 	ldw	r17,4(sp)
8111d454:	dc000017 	ldw	r16,0(sp)
8111d458:	dec00404 	addi	sp,sp,16
8111d45c:	f800283a 	ret

8111d460 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8111d460:	defffc04 	addi	sp,sp,-16
8111d464:	dfc00315 	stw	ra,12(sp)
8111d468:	df000215 	stw	fp,8(sp)
8111d46c:	df000204 	addi	fp,sp,8
8111d470:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8111d474:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8111d478:	d1601a04 	addi	r5,gp,-32664
8111d47c:	e13fff17 	ldw	r4,-4(fp)
8111d480:	111da340 	call	8111da34 <alt_find_dev>
8111d484:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8111d488:	e0bffe17 	ldw	r2,-8(fp)
8111d48c:	1000041e 	bne	r2,zero,8111d4a0 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
8111d490:	111b8ec0 	call	8111b8ec <alt_get_errno>
8111d494:	1007883a 	mov	r3,r2
8111d498:	008004c4 	movi	r2,19
8111d49c:	18800015 	stw	r2,0(r3)
    }

    return dev;
8111d4a0:	e0bffe17 	ldw	r2,-8(fp)
}
8111d4a4:	e037883a 	mov	sp,fp
8111d4a8:	dfc00117 	ldw	ra,4(sp)
8111d4ac:	df000017 	ldw	fp,0(sp)
8111d4b0:	dec00204 	addi	sp,sp,8
8111d4b4:	f800283a 	ret

8111d4b8 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8111d4b8:	defff804 	addi	sp,sp,-32
8111d4bc:	dfc00715 	stw	ra,28(sp)
8111d4c0:	df000615 	stw	fp,24(sp)
8111d4c4:	df000604 	addi	fp,sp,24
8111d4c8:	e13ffd15 	stw	r4,-12(fp)
8111d4cc:	e17ffe15 	stw	r5,-8(fp)
8111d4d0:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8111d4d4:	e0bffd17 	ldw	r2,-12(fp)
8111d4d8:	10801783 	ldbu	r2,94(r2)
8111d4dc:	10803fcc 	andi	r2,r2,255
8111d4e0:	10000b26 	beq	r2,zero,8111d510 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8111d4e4:	e0bffd17 	ldw	r2,-12(fp)
8111d4e8:	10800617 	ldw	r2,24(r2)
8111d4ec:	00c00104 	movi	r3,4
8111d4f0:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8111d4f4:	0001883a 	nop
8111d4f8:	e0bffd17 	ldw	r2,-12(fp)
8111d4fc:	10800617 	ldw	r2,24(r2)
8111d500:	10800037 	ldwio	r2,0(r2)
8111d504:	1080010c 	andi	r2,r2,4
8111d508:	1005d0ba 	srai	r2,r2,2
8111d50c:	103ffa1e 	bne	r2,zero,8111d4f8 <__reset+0xfb0fd4f8>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8111d510:	e0bffd17 	ldw	r2,-12(fp)
8111d514:	10800317 	ldw	r2,12(r2)
8111d518:	10800104 	addi	r2,r2,4
8111d51c:	00c00084 	movi	r3,2
8111d520:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8111d524:	0001883a 	nop
8111d528:	e0bffd17 	ldw	r2,-12(fp)
8111d52c:	10800317 	ldw	r2,12(r2)
8111d530:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8111d534:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8111d538:	103ffb1e 	bne	r2,zero,8111d528 <__reset+0xfb0fd528>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8111d53c:	e0bffd17 	ldw	r2,-12(fp)
8111d540:	10800317 	ldw	r2,12(r2)
8111d544:	10800104 	addi	r2,r2,4
8111d548:	10800037 	ldwio	r2,0(r2)
8111d54c:	1007883a 	mov	r3,r2
8111d550:	00bffbc4 	movi	r2,-17
8111d554:	1884703a 	and	r2,r3,r2
8111d558:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8111d55c:	e0bffb17 	ldw	r2,-20(fp)
8111d560:	10800814 	ori	r2,r2,32
8111d564:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8111d568:	e0bffd17 	ldw	r2,-12(fp)
8111d56c:	10800317 	ldw	r2,12(r2)
8111d570:	10800104 	addi	r2,r2,4
8111d574:	e0fffb17 	ldw	r3,-20(fp)
8111d578:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8111d57c:	e0bffd17 	ldw	r2,-12(fp)
8111d580:	10800317 	ldw	r2,12(r2)
8111d584:	e0fffd17 	ldw	r3,-12(fp)
8111d588:	18c00317 	ldw	r3,12(r3)
8111d58c:	18c00037 	ldwio	r3,0(r3)
8111d590:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8111d594:	e0bffd17 	ldw	r2,-12(fp)
8111d598:	10801783 	ldbu	r2,94(r2)
8111d59c:	10803fcc 	andi	r2,r2,255
8111d5a0:	10000826 	beq	r2,zero,8111d5c4 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8111d5a4:	e0bffd17 	ldw	r2,-12(fp)
8111d5a8:	10800617 	ldw	r2,24(r2)
8111d5ac:	10800404 	addi	r2,r2,16
8111d5b0:	e0fffd17 	ldw	r3,-12(fp)
8111d5b4:	18c00617 	ldw	r3,24(r3)
8111d5b8:	18c00404 	addi	r3,r3,16
8111d5bc:	18c00037 	ldwio	r3,0(r3)
8111d5c0:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8111d5c4:	d1601a04 	addi	r5,gp,-32664
8111d5c8:	e13ffd17 	ldw	r4,-12(fp)
8111d5cc:	111d8d00 	call	8111d8d0 <alt_dev_llist_insert>
8111d5d0:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8111d5d4:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
8111d5d8:	e0bffc17 	ldw	r2,-16(fp)
8111d5dc:	1000081e 	bne	r2,zero,8111d600 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8111d5e0:	d8000015 	stw	zero,0(sp)
8111d5e4:	e1fffd17 	ldw	r7,-12(fp)
8111d5e8:	01a044b4 	movhi	r6,33042
8111d5ec:	31aeba04 	addi	r6,r6,-17688
8111d5f0:	e17fff17 	ldw	r5,-4(fp)
8111d5f4:	e13ffe17 	ldw	r4,-8(fp)
8111d5f8:	111dac40 	call	8111dac4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8111d5fc:	00000406 	br	8111d610 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8111d600:	012044b4 	movhi	r4,33042
8111d604:	21000a04 	addi	r4,r4,40
8111d608:	1119ba80 	call	81119ba8 <alt_printf>
    }
    
    return;
8111d60c:	0001883a 	nop

}
8111d610:	e037883a 	mov	sp,fp
8111d614:	dfc00117 	ldw	ra,4(sp)
8111d618:	df000017 	ldw	fp,0(sp)
8111d61c:	dec00204 	addi	sp,sp,8
8111d620:	f800283a 	ret

8111d624 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
8111d624:	defffb04 	addi	sp,sp,-20
8111d628:	df000415 	stw	fp,16(sp)
8111d62c:	df000404 	addi	fp,sp,16
8111d630:	e13ffc15 	stw	r4,-16(fp)
8111d634:	e17ffd15 	stw	r5,-12(fp)
8111d638:	e1bffe15 	stw	r6,-8(fp)
8111d63c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8111d640:	e0bffc17 	ldw	r2,-16(fp)
8111d644:	e0fffd17 	ldw	r3,-12(fp)
8111d648:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8111d64c:	e0bffc17 	ldw	r2,-16(fp)
8111d650:	e0ffff17 	ldw	r3,-4(fp)
8111d654:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8111d658:	e0bffc17 	ldw	r2,-16(fp)
8111d65c:	e0fffe17 	ldw	r3,-8(fp)
8111d660:	10c00d15 	stw	r3,52(r2)

    return ;
8111d664:	0001883a 	nop
}
8111d668:	e037883a 	mov	sp,fp
8111d66c:	df000017 	ldw	fp,0(sp)
8111d670:	dec00104 	addi	sp,sp,4
8111d674:	f800283a 	ret

8111d678 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8111d678:	defffc04 	addi	sp,sp,-16
8111d67c:	dfc00315 	stw	ra,12(sp)
8111d680:	df000215 	stw	fp,8(sp)
8111d684:	df000204 	addi	fp,sp,8
8111d688:	e13ffe15 	stw	r4,-8(fp)
8111d68c:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8111d690:	000d883a 	mov	r6,zero
8111d694:	e17fff17 	ldw	r5,-4(fp)
8111d698:	e13ffe17 	ldw	r4,-8(fp)
8111d69c:	111be4c0 	call	8111be4c <alt_msgdma_descriptor_async_transfer>

}
8111d6a0:	e037883a 	mov	sp,fp
8111d6a4:	dfc00117 	ldw	ra,4(sp)
8111d6a8:	df000017 	ldw	fp,0(sp)
8111d6ac:	dec00204 	addi	sp,sp,8
8111d6b0:	f800283a 	ret

8111d6b4 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8111d6b4:	defffc04 	addi	sp,sp,-16
8111d6b8:	dfc00315 	stw	ra,12(sp)
8111d6bc:	df000215 	stw	fp,8(sp)
8111d6c0:	df000204 	addi	fp,sp,8
8111d6c4:	e13ffe15 	stw	r4,-8(fp)
8111d6c8:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8111d6cc:	e1bfff17 	ldw	r6,-4(fp)
8111d6d0:	000b883a 	mov	r5,zero
8111d6d4:	e13ffe17 	ldw	r4,-8(fp)
8111d6d8:	111be4c0 	call	8111be4c <alt_msgdma_descriptor_async_transfer>
}
8111d6dc:	e037883a 	mov	sp,fp
8111d6e0:	dfc00117 	ldw	ra,4(sp)
8111d6e4:	df000017 	ldw	fp,0(sp)
8111d6e8:	dec00204 	addi	sp,sp,8
8111d6ec:	f800283a 	ret

8111d6f0 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8111d6f0:	defffc04 	addi	sp,sp,-16
8111d6f4:	dfc00315 	stw	ra,12(sp)
8111d6f8:	df000215 	stw	fp,8(sp)
8111d6fc:	df000204 	addi	fp,sp,8
8111d700:	e13ffe15 	stw	r4,-8(fp)
8111d704:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8111d708:	000d883a 	mov	r6,zero
8111d70c:	e17fff17 	ldw	r5,-4(fp)
8111d710:	e13ffe17 	ldw	r4,-8(fp)
8111d714:	111c11c0 	call	8111c11c <alt_msgdma_descriptor_sync_transfer>
}
8111d718:	e037883a 	mov	sp,fp
8111d71c:	dfc00117 	ldw	ra,4(sp)
8111d720:	df000017 	ldw	fp,0(sp)
8111d724:	dec00204 	addi	sp,sp,8
8111d728:	f800283a 	ret

8111d72c <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8111d72c:	defffc04 	addi	sp,sp,-16
8111d730:	dfc00315 	stw	ra,12(sp)
8111d734:	df000215 	stw	fp,8(sp)
8111d738:	df000204 	addi	fp,sp,8
8111d73c:	e13ffe15 	stw	r4,-8(fp)
8111d740:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8111d744:	e1bfff17 	ldw	r6,-4(fp)
8111d748:	000b883a 	mov	r5,zero
8111d74c:	e13ffe17 	ldw	r4,-8(fp)
8111d750:	111c11c0 	call	8111c11c <alt_msgdma_descriptor_sync_transfer>
}
8111d754:	e037883a 	mov	sp,fp
8111d758:	dfc00117 	ldw	ra,4(sp)
8111d75c:	df000017 	ldw	fp,0(sp)
8111d760:	dec00204 	addi	sp,sp,8
8111d764:	f800283a 	ret

8111d768 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8111d768:	defff504 	addi	sp,sp,-44
8111d76c:	df000a15 	stw	fp,40(sp)
8111d770:	df000a04 	addi	fp,sp,40
8111d774:	e13ffc15 	stw	r4,-16(fp)
8111d778:	e17ffd15 	stw	r5,-12(fp)
8111d77c:	e1bffe15 	stw	r6,-8(fp)
8111d780:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8111d784:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8111d788:	d0a04817 	ldw	r2,-32480(gp)
  
  if (alt_ticks_per_second ())
8111d78c:	10003c26 	beq	r2,zero,8111d880 <alt_alarm_start+0x118>
  {
    if (alarm)
8111d790:	e0bffc17 	ldw	r2,-16(fp)
8111d794:	10003826 	beq	r2,zero,8111d878 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
8111d798:	e0bffc17 	ldw	r2,-16(fp)
8111d79c:	e0fffe17 	ldw	r3,-8(fp)
8111d7a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8111d7a4:	e0bffc17 	ldw	r2,-16(fp)
8111d7a8:	e0ffff17 	ldw	r3,-4(fp)
8111d7ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d7b0:	0005303a 	rdctl	r2,status
8111d7b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d7b8:	e0fff917 	ldw	r3,-28(fp)
8111d7bc:	00bfff84 	movi	r2,-2
8111d7c0:	1884703a 	and	r2,r3,r2
8111d7c4:	1001703a 	wrctl	status,r2
  
  return context;
8111d7c8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8111d7cc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8111d7d0:	d0a04917 	ldw	r2,-32476(gp)
      
      current_nticks = alt_nticks();
8111d7d4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8111d7d8:	e0fffd17 	ldw	r3,-12(fp)
8111d7dc:	e0bff617 	ldw	r2,-40(fp)
8111d7e0:	1885883a 	add	r2,r3,r2
8111d7e4:	10c00044 	addi	r3,r2,1
8111d7e8:	e0bffc17 	ldw	r2,-16(fp)
8111d7ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8111d7f0:	e0bffc17 	ldw	r2,-16(fp)
8111d7f4:	10c00217 	ldw	r3,8(r2)
8111d7f8:	e0bff617 	ldw	r2,-40(fp)
8111d7fc:	1880042e 	bgeu	r3,r2,8111d810 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
8111d800:	e0bffc17 	ldw	r2,-16(fp)
8111d804:	00c00044 	movi	r3,1
8111d808:	10c00405 	stb	r3,16(r2)
8111d80c:	00000206 	br	8111d818 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8111d810:	e0bffc17 	ldw	r2,-16(fp)
8111d814:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8111d818:	e0bffc17 	ldw	r2,-16(fp)
8111d81c:	d0e01804 	addi	r3,gp,-32672
8111d820:	e0fffa15 	stw	r3,-24(fp)
8111d824:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8111d828:	e0bffb17 	ldw	r2,-20(fp)
8111d82c:	e0fffa17 	ldw	r3,-24(fp)
8111d830:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8111d834:	e0bffa17 	ldw	r2,-24(fp)
8111d838:	10c00017 	ldw	r3,0(r2)
8111d83c:	e0bffb17 	ldw	r2,-20(fp)
8111d840:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8111d844:	e0bffa17 	ldw	r2,-24(fp)
8111d848:	10800017 	ldw	r2,0(r2)
8111d84c:	e0fffb17 	ldw	r3,-20(fp)
8111d850:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8111d854:	e0bffa17 	ldw	r2,-24(fp)
8111d858:	e0fffb17 	ldw	r3,-20(fp)
8111d85c:	10c00015 	stw	r3,0(r2)
8111d860:	e0bff817 	ldw	r2,-32(fp)
8111d864:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d868:	e0bff717 	ldw	r2,-36(fp)
8111d86c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8111d870:	0005883a 	mov	r2,zero
8111d874:	00000306 	br	8111d884 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
8111d878:	00bffa84 	movi	r2,-22
8111d87c:	00000106 	br	8111d884 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
8111d880:	00bfde84 	movi	r2,-134
  }
}
8111d884:	e037883a 	mov	sp,fp
8111d888:	df000017 	ldw	fp,0(sp)
8111d88c:	dec00104 	addi	sp,sp,4
8111d890:	f800283a 	ret

8111d894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111d894:	defffe04 	addi	sp,sp,-8
8111d898:	dfc00115 	stw	ra,4(sp)
8111d89c:	df000015 	stw	fp,0(sp)
8111d8a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111d8a4:	d0a01517 	ldw	r2,-32684(gp)
8111d8a8:	10000326 	beq	r2,zero,8111d8b8 <alt_get_errno+0x24>
8111d8ac:	d0a01517 	ldw	r2,-32684(gp)
8111d8b0:	103ee83a 	callr	r2
8111d8b4:	00000106 	br	8111d8bc <alt_get_errno+0x28>
8111d8b8:	d0a04304 	addi	r2,gp,-32500
}
8111d8bc:	e037883a 	mov	sp,fp
8111d8c0:	dfc00117 	ldw	ra,4(sp)
8111d8c4:	df000017 	ldw	fp,0(sp)
8111d8c8:	dec00204 	addi	sp,sp,8
8111d8cc:	f800283a 	ret

8111d8d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8111d8d0:	defffa04 	addi	sp,sp,-24
8111d8d4:	dfc00515 	stw	ra,20(sp)
8111d8d8:	df000415 	stw	fp,16(sp)
8111d8dc:	df000404 	addi	fp,sp,16
8111d8e0:	e13ffe15 	stw	r4,-8(fp)
8111d8e4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8111d8e8:	e0bffe17 	ldw	r2,-8(fp)
8111d8ec:	10000326 	beq	r2,zero,8111d8fc <alt_dev_llist_insert+0x2c>
8111d8f0:	e0bffe17 	ldw	r2,-8(fp)
8111d8f4:	10800217 	ldw	r2,8(r2)
8111d8f8:	1000061e 	bne	r2,zero,8111d914 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
8111d8fc:	111d8940 	call	8111d894 <alt_get_errno>
8111d900:	1007883a 	mov	r3,r2
8111d904:	00800584 	movi	r2,22
8111d908:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8111d90c:	00bffa84 	movi	r2,-22
8111d910:	00001306 	br	8111d960 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8111d914:	e0bffe17 	ldw	r2,-8(fp)
8111d918:	e0ffff17 	ldw	r3,-4(fp)
8111d91c:	e0fffc15 	stw	r3,-16(fp)
8111d920:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8111d924:	e0bffd17 	ldw	r2,-12(fp)
8111d928:	e0fffc17 	ldw	r3,-16(fp)
8111d92c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8111d930:	e0bffc17 	ldw	r2,-16(fp)
8111d934:	10c00017 	ldw	r3,0(r2)
8111d938:	e0bffd17 	ldw	r2,-12(fp)
8111d93c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8111d940:	e0bffc17 	ldw	r2,-16(fp)
8111d944:	10800017 	ldw	r2,0(r2)
8111d948:	e0fffd17 	ldw	r3,-12(fp)
8111d94c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8111d950:	e0bffc17 	ldw	r2,-16(fp)
8111d954:	e0fffd17 	ldw	r3,-12(fp)
8111d958:	10c00015 	stw	r3,0(r2)

  return 0;  
8111d95c:	0005883a 	mov	r2,zero
}
8111d960:	e037883a 	mov	sp,fp
8111d964:	dfc00117 	ldw	ra,4(sp)
8111d968:	df000017 	ldw	fp,0(sp)
8111d96c:	dec00204 	addi	sp,sp,8
8111d970:	f800283a 	ret

8111d974 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8111d974:	defffd04 	addi	sp,sp,-12
8111d978:	dfc00215 	stw	ra,8(sp)
8111d97c:	df000115 	stw	fp,4(sp)
8111d980:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8111d984:	00a044b4 	movhi	r2,33042
8111d988:	10b9bd04 	addi	r2,r2,-6412
8111d98c:	e0bfff15 	stw	r2,-4(fp)
8111d990:	00000606 	br	8111d9ac <_do_ctors+0x38>
        (*ctor) (); 
8111d994:	e0bfff17 	ldw	r2,-4(fp)
8111d998:	10800017 	ldw	r2,0(r2)
8111d99c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8111d9a0:	e0bfff17 	ldw	r2,-4(fp)
8111d9a4:	10bfff04 	addi	r2,r2,-4
8111d9a8:	e0bfff15 	stw	r2,-4(fp)
8111d9ac:	e0ffff17 	ldw	r3,-4(fp)
8111d9b0:	00a044b4 	movhi	r2,33042
8111d9b4:	10b9be04 	addi	r2,r2,-6408
8111d9b8:	18bff62e 	bgeu	r3,r2,8111d994 <__reset+0xfb0fd994>
        (*ctor) (); 
}
8111d9bc:	0001883a 	nop
8111d9c0:	e037883a 	mov	sp,fp
8111d9c4:	dfc00117 	ldw	ra,4(sp)
8111d9c8:	df000017 	ldw	fp,0(sp)
8111d9cc:	dec00204 	addi	sp,sp,8
8111d9d0:	f800283a 	ret

8111d9d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8111d9d4:	defffd04 	addi	sp,sp,-12
8111d9d8:	dfc00215 	stw	ra,8(sp)
8111d9dc:	df000115 	stw	fp,4(sp)
8111d9e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8111d9e4:	00a044b4 	movhi	r2,33042
8111d9e8:	10b9bd04 	addi	r2,r2,-6412
8111d9ec:	e0bfff15 	stw	r2,-4(fp)
8111d9f0:	00000606 	br	8111da0c <_do_dtors+0x38>
        (*dtor) (); 
8111d9f4:	e0bfff17 	ldw	r2,-4(fp)
8111d9f8:	10800017 	ldw	r2,0(r2)
8111d9fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8111da00:	e0bfff17 	ldw	r2,-4(fp)
8111da04:	10bfff04 	addi	r2,r2,-4
8111da08:	e0bfff15 	stw	r2,-4(fp)
8111da0c:	e0ffff17 	ldw	r3,-4(fp)
8111da10:	00a044b4 	movhi	r2,33042
8111da14:	10b9be04 	addi	r2,r2,-6408
8111da18:	18bff62e 	bgeu	r3,r2,8111d9f4 <__reset+0xfb0fd9f4>
        (*dtor) (); 
}
8111da1c:	0001883a 	nop
8111da20:	e037883a 	mov	sp,fp
8111da24:	dfc00117 	ldw	ra,4(sp)
8111da28:	df000017 	ldw	fp,0(sp)
8111da2c:	dec00204 	addi	sp,sp,8
8111da30:	f800283a 	ret

8111da34 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8111da34:	defffa04 	addi	sp,sp,-24
8111da38:	dfc00515 	stw	ra,20(sp)
8111da3c:	df000415 	stw	fp,16(sp)
8111da40:	df000404 	addi	fp,sp,16
8111da44:	e13ffe15 	stw	r4,-8(fp)
8111da48:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8111da4c:	e0bfff17 	ldw	r2,-4(fp)
8111da50:	10800017 	ldw	r2,0(r2)
8111da54:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8111da58:	e13ffe17 	ldw	r4,-8(fp)
8111da5c:	110d1940 	call	8110d194 <strlen>
8111da60:	10800044 	addi	r2,r2,1
8111da64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8111da68:	00000d06 	br	8111daa0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8111da6c:	e0bffc17 	ldw	r2,-16(fp)
8111da70:	10800217 	ldw	r2,8(r2)
8111da74:	e0fffd17 	ldw	r3,-12(fp)
8111da78:	180d883a 	mov	r6,r3
8111da7c:	e17ffe17 	ldw	r5,-8(fp)
8111da80:	1009883a 	mov	r4,r2
8111da84:	111e3b00 	call	8111e3b0 <memcmp>
8111da88:	1000021e 	bne	r2,zero,8111da94 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
8111da8c:	e0bffc17 	ldw	r2,-16(fp)
8111da90:	00000706 	br	8111dab0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
8111da94:	e0bffc17 	ldw	r2,-16(fp)
8111da98:	10800017 	ldw	r2,0(r2)
8111da9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8111daa0:	e0fffc17 	ldw	r3,-16(fp)
8111daa4:	e0bfff17 	ldw	r2,-4(fp)
8111daa8:	18bff01e 	bne	r3,r2,8111da6c <__reset+0xfb0fda6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8111daac:	0005883a 	mov	r2,zero
}
8111dab0:	e037883a 	mov	sp,fp
8111dab4:	dfc00117 	ldw	ra,4(sp)
8111dab8:	df000017 	ldw	fp,0(sp)
8111dabc:	dec00204 	addi	sp,sp,8
8111dac0:	f800283a 	ret

8111dac4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8111dac4:	defff904 	addi	sp,sp,-28
8111dac8:	dfc00615 	stw	ra,24(sp)
8111dacc:	df000515 	stw	fp,20(sp)
8111dad0:	df000504 	addi	fp,sp,20
8111dad4:	e13ffc15 	stw	r4,-16(fp)
8111dad8:	e17ffd15 	stw	r5,-12(fp)
8111dadc:	e1bffe15 	stw	r6,-8(fp)
8111dae0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8111dae4:	e0800217 	ldw	r2,8(fp)
8111dae8:	d8800015 	stw	r2,0(sp)
8111daec:	e1ffff17 	ldw	r7,-4(fp)
8111daf0:	e1bffe17 	ldw	r6,-8(fp)
8111daf4:	e17ffd17 	ldw	r5,-12(fp)
8111daf8:	e13ffc17 	ldw	r4,-16(fp)
8111dafc:	111dc740 	call	8111dc74 <alt_iic_isr_register>
}  
8111db00:	e037883a 	mov	sp,fp
8111db04:	dfc00117 	ldw	ra,4(sp)
8111db08:	df000017 	ldw	fp,0(sp)
8111db0c:	dec00204 	addi	sp,sp,8
8111db10:	f800283a 	ret

8111db14 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8111db14:	defff904 	addi	sp,sp,-28
8111db18:	df000615 	stw	fp,24(sp)
8111db1c:	df000604 	addi	fp,sp,24
8111db20:	e13ffe15 	stw	r4,-8(fp)
8111db24:	e17fff15 	stw	r5,-4(fp)
8111db28:	e0bfff17 	ldw	r2,-4(fp)
8111db2c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111db30:	0005303a 	rdctl	r2,status
8111db34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111db38:	e0fffb17 	ldw	r3,-20(fp)
8111db3c:	00bfff84 	movi	r2,-2
8111db40:	1884703a 	and	r2,r3,r2
8111db44:	1001703a 	wrctl	status,r2
  
  return context;
8111db48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8111db4c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8111db50:	00c00044 	movi	r3,1
8111db54:	e0bffa17 	ldw	r2,-24(fp)
8111db58:	1884983a 	sll	r2,r3,r2
8111db5c:	1007883a 	mov	r3,r2
8111db60:	d0a04417 	ldw	r2,-32496(gp)
8111db64:	1884b03a 	or	r2,r3,r2
8111db68:	d0a04415 	stw	r2,-32496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8111db6c:	d0a04417 	ldw	r2,-32496(gp)
8111db70:	100170fa 	wrctl	ienable,r2
8111db74:	e0bffc17 	ldw	r2,-16(fp)
8111db78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111db7c:	e0bffd17 	ldw	r2,-12(fp)
8111db80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8111db84:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8111db88:	0001883a 	nop
}
8111db8c:	e037883a 	mov	sp,fp
8111db90:	df000017 	ldw	fp,0(sp)
8111db94:	dec00104 	addi	sp,sp,4
8111db98:	f800283a 	ret

8111db9c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8111db9c:	defff904 	addi	sp,sp,-28
8111dba0:	df000615 	stw	fp,24(sp)
8111dba4:	df000604 	addi	fp,sp,24
8111dba8:	e13ffe15 	stw	r4,-8(fp)
8111dbac:	e17fff15 	stw	r5,-4(fp)
8111dbb0:	e0bfff17 	ldw	r2,-4(fp)
8111dbb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111dbb8:	0005303a 	rdctl	r2,status
8111dbbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111dbc0:	e0fffb17 	ldw	r3,-20(fp)
8111dbc4:	00bfff84 	movi	r2,-2
8111dbc8:	1884703a 	and	r2,r3,r2
8111dbcc:	1001703a 	wrctl	status,r2
  
  return context;
8111dbd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8111dbd4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8111dbd8:	00c00044 	movi	r3,1
8111dbdc:	e0bffa17 	ldw	r2,-24(fp)
8111dbe0:	1884983a 	sll	r2,r3,r2
8111dbe4:	0084303a 	nor	r2,zero,r2
8111dbe8:	1007883a 	mov	r3,r2
8111dbec:	d0a04417 	ldw	r2,-32496(gp)
8111dbf0:	1884703a 	and	r2,r3,r2
8111dbf4:	d0a04415 	stw	r2,-32496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8111dbf8:	d0a04417 	ldw	r2,-32496(gp)
8111dbfc:	100170fa 	wrctl	ienable,r2
8111dc00:	e0bffc17 	ldw	r2,-16(fp)
8111dc04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111dc08:	e0bffd17 	ldw	r2,-12(fp)
8111dc0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8111dc10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8111dc14:	0001883a 	nop
}
8111dc18:	e037883a 	mov	sp,fp
8111dc1c:	df000017 	ldw	fp,0(sp)
8111dc20:	dec00104 	addi	sp,sp,4
8111dc24:	f800283a 	ret

8111dc28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8111dc28:	defffc04 	addi	sp,sp,-16
8111dc2c:	df000315 	stw	fp,12(sp)
8111dc30:	df000304 	addi	fp,sp,12
8111dc34:	e13ffe15 	stw	r4,-8(fp)
8111dc38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8111dc3c:	000530fa 	rdctl	r2,ienable
8111dc40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8111dc44:	00c00044 	movi	r3,1
8111dc48:	e0bfff17 	ldw	r2,-4(fp)
8111dc4c:	1884983a 	sll	r2,r3,r2
8111dc50:	1007883a 	mov	r3,r2
8111dc54:	e0bffd17 	ldw	r2,-12(fp)
8111dc58:	1884703a 	and	r2,r3,r2
8111dc5c:	1004c03a 	cmpne	r2,r2,zero
8111dc60:	10803fcc 	andi	r2,r2,255
}
8111dc64:	e037883a 	mov	sp,fp
8111dc68:	df000017 	ldw	fp,0(sp)
8111dc6c:	dec00104 	addi	sp,sp,4
8111dc70:	f800283a 	ret

8111dc74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8111dc74:	defff504 	addi	sp,sp,-44
8111dc78:	dfc00a15 	stw	ra,40(sp)
8111dc7c:	df000915 	stw	fp,36(sp)
8111dc80:	df000904 	addi	fp,sp,36
8111dc84:	e13ffc15 	stw	r4,-16(fp)
8111dc88:	e17ffd15 	stw	r5,-12(fp)
8111dc8c:	e1bffe15 	stw	r6,-8(fp)
8111dc90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8111dc94:	00bffa84 	movi	r2,-22
8111dc98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8111dc9c:	e0bffd17 	ldw	r2,-12(fp)
8111dca0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8111dca4:	e0bff817 	ldw	r2,-32(fp)
8111dca8:	10800808 	cmpgei	r2,r2,32
8111dcac:	1000271e 	bne	r2,zero,8111dd4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111dcb0:	0005303a 	rdctl	r2,status
8111dcb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111dcb8:	e0fffb17 	ldw	r3,-20(fp)
8111dcbc:	00bfff84 	movi	r2,-2
8111dcc0:	1884703a 	and	r2,r3,r2
8111dcc4:	1001703a 	wrctl	status,r2
  
  return context;
8111dcc8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8111dccc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8111dcd0:	00a044b4 	movhi	r2,33042
8111dcd4:	10892604 	addi	r2,r2,9368
8111dcd8:	e0fff817 	ldw	r3,-32(fp)
8111dcdc:	180690fa 	slli	r3,r3,3
8111dce0:	10c5883a 	add	r2,r2,r3
8111dce4:	e0fffe17 	ldw	r3,-8(fp)
8111dce8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8111dcec:	00a044b4 	movhi	r2,33042
8111dcf0:	10892604 	addi	r2,r2,9368
8111dcf4:	e0fff817 	ldw	r3,-32(fp)
8111dcf8:	180690fa 	slli	r3,r3,3
8111dcfc:	10c5883a 	add	r2,r2,r3
8111dd00:	10800104 	addi	r2,r2,4
8111dd04:	e0ffff17 	ldw	r3,-4(fp)
8111dd08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8111dd0c:	e0bffe17 	ldw	r2,-8(fp)
8111dd10:	10000526 	beq	r2,zero,8111dd28 <alt_iic_isr_register+0xb4>
8111dd14:	e0bff817 	ldw	r2,-32(fp)
8111dd18:	100b883a 	mov	r5,r2
8111dd1c:	e13ffc17 	ldw	r4,-16(fp)
8111dd20:	111db140 	call	8111db14 <alt_ic_irq_enable>
8111dd24:	00000406 	br	8111dd38 <alt_iic_isr_register+0xc4>
8111dd28:	e0bff817 	ldw	r2,-32(fp)
8111dd2c:	100b883a 	mov	r5,r2
8111dd30:	e13ffc17 	ldw	r4,-16(fp)
8111dd34:	111db9c0 	call	8111db9c <alt_ic_irq_disable>
8111dd38:	e0bff715 	stw	r2,-36(fp)
8111dd3c:	e0bffa17 	ldw	r2,-24(fp)
8111dd40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111dd44:	e0bff917 	ldw	r2,-28(fp)
8111dd48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8111dd4c:	e0bff717 	ldw	r2,-36(fp)
}
8111dd50:	e037883a 	mov	sp,fp
8111dd54:	dfc00117 	ldw	ra,4(sp)
8111dd58:	df000017 	ldw	fp,0(sp)
8111dd5c:	dec00204 	addi	sp,sp,8
8111dd60:	f800283a 	ret

8111dd64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8111dd64:	defff904 	addi	sp,sp,-28
8111dd68:	dfc00615 	stw	ra,24(sp)
8111dd6c:	df000515 	stw	fp,20(sp)
8111dd70:	df000504 	addi	fp,sp,20
8111dd74:	e13ffc15 	stw	r4,-16(fp)
8111dd78:	e17ffd15 	stw	r5,-12(fp)
8111dd7c:	e1bffe15 	stw	r6,-8(fp)
8111dd80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8111dd84:	e1bfff17 	ldw	r6,-4(fp)
8111dd88:	e17ffe17 	ldw	r5,-8(fp)
8111dd8c:	e13ffd17 	ldw	r4,-12(fp)
8111dd90:	111dfa40 	call	8111dfa4 <open>
8111dd94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8111dd98:	e0bffb17 	ldw	r2,-20(fp)
8111dd9c:	10001c16 	blt	r2,zero,8111de10 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
8111dda0:	00a044b4 	movhi	r2,33042
8111dda4:	10824504 	addi	r2,r2,2324
8111dda8:	e0fffb17 	ldw	r3,-20(fp)
8111ddac:	18c00324 	muli	r3,r3,12
8111ddb0:	10c5883a 	add	r2,r2,r3
8111ddb4:	10c00017 	ldw	r3,0(r2)
8111ddb8:	e0bffc17 	ldw	r2,-16(fp)
8111ddbc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8111ddc0:	00a044b4 	movhi	r2,33042
8111ddc4:	10824504 	addi	r2,r2,2324
8111ddc8:	e0fffb17 	ldw	r3,-20(fp)
8111ddcc:	18c00324 	muli	r3,r3,12
8111ddd0:	10c5883a 	add	r2,r2,r3
8111ddd4:	10800104 	addi	r2,r2,4
8111ddd8:	10c00017 	ldw	r3,0(r2)
8111dddc:	e0bffc17 	ldw	r2,-16(fp)
8111dde0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8111dde4:	00a044b4 	movhi	r2,33042
8111dde8:	10824504 	addi	r2,r2,2324
8111ddec:	e0fffb17 	ldw	r3,-20(fp)
8111ddf0:	18c00324 	muli	r3,r3,12
8111ddf4:	10c5883a 	add	r2,r2,r3
8111ddf8:	10800204 	addi	r2,r2,8
8111ddfc:	10c00017 	ldw	r3,0(r2)
8111de00:	e0bffc17 	ldw	r2,-16(fp)
8111de04:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8111de08:	e13ffb17 	ldw	r4,-20(fp)
8111de0c:	1119f480 	call	81119f48 <alt_release_fd>
  }
} 
8111de10:	0001883a 	nop
8111de14:	e037883a 	mov	sp,fp
8111de18:	dfc00117 	ldw	ra,4(sp)
8111de1c:	df000017 	ldw	fp,0(sp)
8111de20:	dec00204 	addi	sp,sp,8
8111de24:	f800283a 	ret

8111de28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8111de28:	defffb04 	addi	sp,sp,-20
8111de2c:	dfc00415 	stw	ra,16(sp)
8111de30:	df000315 	stw	fp,12(sp)
8111de34:	df000304 	addi	fp,sp,12
8111de38:	e13ffd15 	stw	r4,-12(fp)
8111de3c:	e17ffe15 	stw	r5,-8(fp)
8111de40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8111de44:	01c07fc4 	movi	r7,511
8111de48:	01800044 	movi	r6,1
8111de4c:	e17ffd17 	ldw	r5,-12(fp)
8111de50:	012044b4 	movhi	r4,33042
8111de54:	21024804 	addi	r4,r4,2336
8111de58:	111dd640 	call	8111dd64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8111de5c:	01c07fc4 	movi	r7,511
8111de60:	000d883a 	mov	r6,zero
8111de64:	e17ffe17 	ldw	r5,-8(fp)
8111de68:	012044b4 	movhi	r4,33042
8111de6c:	21024504 	addi	r4,r4,2324
8111de70:	111dd640 	call	8111dd64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8111de74:	01c07fc4 	movi	r7,511
8111de78:	01800044 	movi	r6,1
8111de7c:	e17fff17 	ldw	r5,-4(fp)
8111de80:	012044b4 	movhi	r4,33042
8111de84:	21024b04 	addi	r4,r4,2348
8111de88:	111dd640 	call	8111dd64 <alt_open_fd>
}  
8111de8c:	0001883a 	nop
8111de90:	e037883a 	mov	sp,fp
8111de94:	dfc00117 	ldw	ra,4(sp)
8111de98:	df000017 	ldw	fp,0(sp)
8111de9c:	dec00204 	addi	sp,sp,8
8111dea0:	f800283a 	ret

8111dea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111dea4:	defffe04 	addi	sp,sp,-8
8111dea8:	dfc00115 	stw	ra,4(sp)
8111deac:	df000015 	stw	fp,0(sp)
8111deb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111deb4:	d0a01517 	ldw	r2,-32684(gp)
8111deb8:	10000326 	beq	r2,zero,8111dec8 <alt_get_errno+0x24>
8111debc:	d0a01517 	ldw	r2,-32684(gp)
8111dec0:	103ee83a 	callr	r2
8111dec4:	00000106 	br	8111decc <alt_get_errno+0x28>
8111dec8:	d0a04304 	addi	r2,gp,-32500
}
8111decc:	e037883a 	mov	sp,fp
8111ded0:	dfc00117 	ldw	ra,4(sp)
8111ded4:	df000017 	ldw	fp,0(sp)
8111ded8:	dec00204 	addi	sp,sp,8
8111dedc:	f800283a 	ret

8111dee0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8111dee0:	defffd04 	addi	sp,sp,-12
8111dee4:	df000215 	stw	fp,8(sp)
8111dee8:	df000204 	addi	fp,sp,8
8111deec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8111def0:	e0bfff17 	ldw	r2,-4(fp)
8111def4:	10800217 	ldw	r2,8(r2)
8111def8:	10d00034 	orhi	r3,r2,16384
8111defc:	e0bfff17 	ldw	r2,-4(fp)
8111df00:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8111df04:	e03ffe15 	stw	zero,-8(fp)
8111df08:	00001d06 	br	8111df80 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8111df0c:	00a044b4 	movhi	r2,33042
8111df10:	10824504 	addi	r2,r2,2324
8111df14:	e0fffe17 	ldw	r3,-8(fp)
8111df18:	18c00324 	muli	r3,r3,12
8111df1c:	10c5883a 	add	r2,r2,r3
8111df20:	10c00017 	ldw	r3,0(r2)
8111df24:	e0bfff17 	ldw	r2,-4(fp)
8111df28:	10800017 	ldw	r2,0(r2)
8111df2c:	1880111e 	bne	r3,r2,8111df74 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8111df30:	00a044b4 	movhi	r2,33042
8111df34:	10824504 	addi	r2,r2,2324
8111df38:	e0fffe17 	ldw	r3,-8(fp)
8111df3c:	18c00324 	muli	r3,r3,12
8111df40:	10c5883a 	add	r2,r2,r3
8111df44:	10800204 	addi	r2,r2,8
8111df48:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8111df4c:	1000090e 	bge	r2,zero,8111df74 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8111df50:	e0bffe17 	ldw	r2,-8(fp)
8111df54:	10c00324 	muli	r3,r2,12
8111df58:	00a044b4 	movhi	r2,33042
8111df5c:	10824504 	addi	r2,r2,2324
8111df60:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8111df64:	e0bfff17 	ldw	r2,-4(fp)
8111df68:	18800226 	beq	r3,r2,8111df74 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8111df6c:	00bffcc4 	movi	r2,-13
8111df70:	00000806 	br	8111df94 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8111df74:	e0bffe17 	ldw	r2,-8(fp)
8111df78:	10800044 	addi	r2,r2,1
8111df7c:	e0bffe15 	stw	r2,-8(fp)
8111df80:	d0a01417 	ldw	r2,-32688(gp)
8111df84:	1007883a 	mov	r3,r2
8111df88:	e0bffe17 	ldw	r2,-8(fp)
8111df8c:	18bfdf2e 	bgeu	r3,r2,8111df0c <__reset+0xfb0fdf0c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
8111df90:	0005883a 	mov	r2,zero
}
8111df94:	e037883a 	mov	sp,fp
8111df98:	df000017 	ldw	fp,0(sp)
8111df9c:	dec00104 	addi	sp,sp,4
8111dfa0:	f800283a 	ret

8111dfa4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8111dfa4:	defff604 	addi	sp,sp,-40
8111dfa8:	dfc00915 	stw	ra,36(sp)
8111dfac:	df000815 	stw	fp,32(sp)
8111dfb0:	df000804 	addi	fp,sp,32
8111dfb4:	e13ffd15 	stw	r4,-12(fp)
8111dfb8:	e17ffe15 	stw	r5,-8(fp)
8111dfbc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8111dfc0:	00bfffc4 	movi	r2,-1
8111dfc4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8111dfc8:	00bffb44 	movi	r2,-19
8111dfcc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
8111dfd0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8111dfd4:	d1601204 	addi	r5,gp,-32696
8111dfd8:	e13ffd17 	ldw	r4,-12(fp)
8111dfdc:	111da340 	call	8111da34 <alt_find_dev>
8111dfe0:	e0bff815 	stw	r2,-32(fp)
8111dfe4:	e0bff817 	ldw	r2,-32(fp)
8111dfe8:	1000051e 	bne	r2,zero,8111e000 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8111dfec:	e13ffd17 	ldw	r4,-12(fp)
8111dff0:	111e11c0 	call	8111e11c <alt_find_file>
8111dff4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8111dff8:	00800044 	movi	r2,1
8111dffc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8111e000:	e0bff817 	ldw	r2,-32(fp)
8111e004:	10002926 	beq	r2,zero,8111e0ac <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8111e008:	e13ff817 	ldw	r4,-32(fp)
8111e00c:	111e2240 	call	8111e224 <alt_get_fd>
8111e010:	e0bff915 	stw	r2,-28(fp)
8111e014:	e0bff917 	ldw	r2,-28(fp)
8111e018:	1000030e 	bge	r2,zero,8111e028 <open+0x84>
    {
      status = index;
8111e01c:	e0bff917 	ldw	r2,-28(fp)
8111e020:	e0bffa15 	stw	r2,-24(fp)
8111e024:	00002306 	br	8111e0b4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8111e028:	e0bff917 	ldw	r2,-28(fp)
8111e02c:	10c00324 	muli	r3,r2,12
8111e030:	00a044b4 	movhi	r2,33042
8111e034:	10824504 	addi	r2,r2,2324
8111e038:	1885883a 	add	r2,r3,r2
8111e03c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8111e040:	e0fffe17 	ldw	r3,-8(fp)
8111e044:	00900034 	movhi	r2,16384
8111e048:	10bfffc4 	addi	r2,r2,-1
8111e04c:	1886703a 	and	r3,r3,r2
8111e050:	e0bffc17 	ldw	r2,-16(fp)
8111e054:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8111e058:	e0bffb17 	ldw	r2,-20(fp)
8111e05c:	1000051e 	bne	r2,zero,8111e074 <open+0xd0>
8111e060:	e13ffc17 	ldw	r4,-16(fp)
8111e064:	111dee00 	call	8111dee0 <alt_file_locked>
8111e068:	e0bffa15 	stw	r2,-24(fp)
8111e06c:	e0bffa17 	ldw	r2,-24(fp)
8111e070:	10001016 	blt	r2,zero,8111e0b4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8111e074:	e0bff817 	ldw	r2,-32(fp)
8111e078:	10800317 	ldw	r2,12(r2)
8111e07c:	10000826 	beq	r2,zero,8111e0a0 <open+0xfc>
8111e080:	e0bff817 	ldw	r2,-32(fp)
8111e084:	10800317 	ldw	r2,12(r2)
8111e088:	e1ffff17 	ldw	r7,-4(fp)
8111e08c:	e1bffe17 	ldw	r6,-8(fp)
8111e090:	e17ffd17 	ldw	r5,-12(fp)
8111e094:	e13ffc17 	ldw	r4,-16(fp)
8111e098:	103ee83a 	callr	r2
8111e09c:	00000106 	br	8111e0a4 <open+0x100>
8111e0a0:	0005883a 	mov	r2,zero
8111e0a4:	e0bffa15 	stw	r2,-24(fp)
8111e0a8:	00000206 	br	8111e0b4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
8111e0ac:	00bffb44 	movi	r2,-19
8111e0b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8111e0b4:	e0bffa17 	ldw	r2,-24(fp)
8111e0b8:	1000090e 	bge	r2,zero,8111e0e0 <open+0x13c>
  {
    alt_release_fd (index);  
8111e0bc:	e13ff917 	ldw	r4,-28(fp)
8111e0c0:	1119f480 	call	81119f48 <alt_release_fd>
    ALT_ERRNO = -status;
8111e0c4:	111dea40 	call	8111dea4 <alt_get_errno>
8111e0c8:	1007883a 	mov	r3,r2
8111e0cc:	e0bffa17 	ldw	r2,-24(fp)
8111e0d0:	0085c83a 	sub	r2,zero,r2
8111e0d4:	18800015 	stw	r2,0(r3)
    return -1;
8111e0d8:	00bfffc4 	movi	r2,-1
8111e0dc:	00000106 	br	8111e0e4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
8111e0e0:	e0bff917 	ldw	r2,-28(fp)
}
8111e0e4:	e037883a 	mov	sp,fp
8111e0e8:	dfc00117 	ldw	ra,4(sp)
8111e0ec:	df000017 	ldw	fp,0(sp)
8111e0f0:	dec00204 	addi	sp,sp,8
8111e0f4:	f800283a 	ret

8111e0f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8111e0f8:	deffff04 	addi	sp,sp,-4
8111e0fc:	df000015 	stw	fp,0(sp)
8111e100:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8111e104:	000170fa 	wrctl	ienable,zero
}
8111e108:	0001883a 	nop
8111e10c:	e037883a 	mov	sp,fp
8111e110:	df000017 	ldw	fp,0(sp)
8111e114:	dec00104 	addi	sp,sp,4
8111e118:	f800283a 	ret

8111e11c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8111e11c:	defffb04 	addi	sp,sp,-20
8111e120:	dfc00415 	stw	ra,16(sp)
8111e124:	df000315 	stw	fp,12(sp)
8111e128:	df000304 	addi	fp,sp,12
8111e12c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8111e130:	d0a01017 	ldw	r2,-32704(gp)
8111e134:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8111e138:	00003106 	br	8111e200 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
8111e13c:	e0bffd17 	ldw	r2,-12(fp)
8111e140:	10800217 	ldw	r2,8(r2)
8111e144:	1009883a 	mov	r4,r2
8111e148:	110d1940 	call	8110d194 <strlen>
8111e14c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8111e150:	e0bffd17 	ldw	r2,-12(fp)
8111e154:	10c00217 	ldw	r3,8(r2)
8111e158:	e0bffe17 	ldw	r2,-8(fp)
8111e15c:	10bfffc4 	addi	r2,r2,-1
8111e160:	1885883a 	add	r2,r3,r2
8111e164:	10800003 	ldbu	r2,0(r2)
8111e168:	10803fcc 	andi	r2,r2,255
8111e16c:	1080201c 	xori	r2,r2,128
8111e170:	10bfe004 	addi	r2,r2,-128
8111e174:	10800bd8 	cmpnei	r2,r2,47
8111e178:	1000031e 	bne	r2,zero,8111e188 <alt_find_file+0x6c>
    {
      len -= 1;
8111e17c:	e0bffe17 	ldw	r2,-8(fp)
8111e180:	10bfffc4 	addi	r2,r2,-1
8111e184:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8111e188:	e0bffe17 	ldw	r2,-8(fp)
8111e18c:	e0ffff17 	ldw	r3,-4(fp)
8111e190:	1885883a 	add	r2,r3,r2
8111e194:	10800003 	ldbu	r2,0(r2)
8111e198:	10803fcc 	andi	r2,r2,255
8111e19c:	1080201c 	xori	r2,r2,128
8111e1a0:	10bfe004 	addi	r2,r2,-128
8111e1a4:	10800be0 	cmpeqi	r2,r2,47
8111e1a8:	1000081e 	bne	r2,zero,8111e1cc <alt_find_file+0xb0>
8111e1ac:	e0bffe17 	ldw	r2,-8(fp)
8111e1b0:	e0ffff17 	ldw	r3,-4(fp)
8111e1b4:	1885883a 	add	r2,r3,r2
8111e1b8:	10800003 	ldbu	r2,0(r2)
8111e1bc:	10803fcc 	andi	r2,r2,255
8111e1c0:	1080201c 	xori	r2,r2,128
8111e1c4:	10bfe004 	addi	r2,r2,-128
8111e1c8:	10000a1e 	bne	r2,zero,8111e1f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
8111e1cc:	e0bffd17 	ldw	r2,-12(fp)
8111e1d0:	10800217 	ldw	r2,8(r2)
8111e1d4:	e0fffe17 	ldw	r3,-8(fp)
8111e1d8:	180d883a 	mov	r6,r3
8111e1dc:	e17fff17 	ldw	r5,-4(fp)
8111e1e0:	1009883a 	mov	r4,r2
8111e1e4:	111e3b00 	call	8111e3b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8111e1e8:	1000021e 	bne	r2,zero,8111e1f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8111e1ec:	e0bffd17 	ldw	r2,-12(fp)
8111e1f0:	00000706 	br	8111e210 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
8111e1f4:	e0bffd17 	ldw	r2,-12(fp)
8111e1f8:	10800017 	ldw	r2,0(r2)
8111e1fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8111e200:	e0fffd17 	ldw	r3,-12(fp)
8111e204:	d0a01004 	addi	r2,gp,-32704
8111e208:	18bfcc1e 	bne	r3,r2,8111e13c <__reset+0xfb0fe13c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8111e20c:	0005883a 	mov	r2,zero
}
8111e210:	e037883a 	mov	sp,fp
8111e214:	dfc00117 	ldw	ra,4(sp)
8111e218:	df000017 	ldw	fp,0(sp)
8111e21c:	dec00204 	addi	sp,sp,8
8111e220:	f800283a 	ret

8111e224 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8111e224:	defffc04 	addi	sp,sp,-16
8111e228:	df000315 	stw	fp,12(sp)
8111e22c:	df000304 	addi	fp,sp,12
8111e230:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8111e234:	00bffa04 	movi	r2,-24
8111e238:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8111e23c:	e03ffd15 	stw	zero,-12(fp)
8111e240:	00001906 	br	8111e2a8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
8111e244:	00a044b4 	movhi	r2,33042
8111e248:	10824504 	addi	r2,r2,2324
8111e24c:	e0fffd17 	ldw	r3,-12(fp)
8111e250:	18c00324 	muli	r3,r3,12
8111e254:	10c5883a 	add	r2,r2,r3
8111e258:	10800017 	ldw	r2,0(r2)
8111e25c:	10000f1e 	bne	r2,zero,8111e29c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
8111e260:	00a044b4 	movhi	r2,33042
8111e264:	10824504 	addi	r2,r2,2324
8111e268:	e0fffd17 	ldw	r3,-12(fp)
8111e26c:	18c00324 	muli	r3,r3,12
8111e270:	10c5883a 	add	r2,r2,r3
8111e274:	e0ffff17 	ldw	r3,-4(fp)
8111e278:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8111e27c:	d0e01417 	ldw	r3,-32688(gp)
8111e280:	e0bffd17 	ldw	r2,-12(fp)
8111e284:	1880020e 	bge	r3,r2,8111e290 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
8111e288:	e0bffd17 	ldw	r2,-12(fp)
8111e28c:	d0a01415 	stw	r2,-32688(gp)
      }
      rc = i;
8111e290:	e0bffd17 	ldw	r2,-12(fp)
8111e294:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
8111e298:	00000606 	br	8111e2b4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8111e29c:	e0bffd17 	ldw	r2,-12(fp)
8111e2a0:	10800044 	addi	r2,r2,1
8111e2a4:	e0bffd15 	stw	r2,-12(fp)
8111e2a8:	e0bffd17 	ldw	r2,-12(fp)
8111e2ac:	10800810 	cmplti	r2,r2,32
8111e2b0:	103fe41e 	bne	r2,zero,8111e244 <__reset+0xfb0fe244>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
8111e2b4:	e0bffe17 	ldw	r2,-8(fp)
}
8111e2b8:	e037883a 	mov	sp,fp
8111e2bc:	df000017 	ldw	fp,0(sp)
8111e2c0:	dec00104 	addi	sp,sp,4
8111e2c4:	f800283a 	ret

8111e2c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8111e2c8:	defffe04 	addi	sp,sp,-8
8111e2cc:	df000115 	stw	fp,4(sp)
8111e2d0:	df000104 	addi	fp,sp,4
8111e2d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8111e2d8:	e0bfff17 	ldw	r2,-4(fp)
8111e2dc:	10bffe84 	addi	r2,r2,-6
8111e2e0:	10c00428 	cmpgeui	r3,r2,16
8111e2e4:	18001a1e 	bne	r3,zero,8111e350 <alt_exception_cause_generated_bad_addr+0x88>
8111e2e8:	100690ba 	slli	r3,r2,2
8111e2ec:	00a044b4 	movhi	r2,33042
8111e2f0:	10b8c004 	addi	r2,r2,-7424
8111e2f4:	1885883a 	add	r2,r3,r2
8111e2f8:	10800017 	ldw	r2,0(r2)
8111e2fc:	1000683a 	jmp	r2
8111e300:	8111e340 	call	88111e34 <__reset+0x20f1e34>
8111e304:	8111e340 	call	88111e34 <__reset+0x20f1e34>
8111e308:	8111e350 	cmplti	r4,r16,18317
8111e30c:	8111e350 	cmplti	r4,r16,18317
8111e310:	8111e350 	cmplti	r4,r16,18317
8111e314:	8111e340 	call	88111e34 <__reset+0x20f1e34>
8111e318:	8111e348 	cmpgei	r4,r16,18317
8111e31c:	8111e350 	cmplti	r4,r16,18317
8111e320:	8111e340 	call	88111e34 <__reset+0x20f1e34>
8111e324:	8111e340 	call	88111e34 <__reset+0x20f1e34>
8111e328:	8111e350 	cmplti	r4,r16,18317
8111e32c:	8111e340 	call	88111e34 <__reset+0x20f1e34>
8111e330:	8111e348 	cmpgei	r4,r16,18317
8111e334:	8111e350 	cmplti	r4,r16,18317
8111e338:	8111e350 	cmplti	r4,r16,18317
8111e33c:	8111e340 	call	88111e34 <__reset+0x20f1e34>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8111e340:	00800044 	movi	r2,1
8111e344:	00000306 	br	8111e354 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8111e348:	0005883a 	mov	r2,zero
8111e34c:	00000106 	br	8111e354 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
8111e350:	0005883a 	mov	r2,zero
  }
}
8111e354:	e037883a 	mov	sp,fp
8111e358:	df000017 	ldw	fp,0(sp)
8111e35c:	dec00104 	addi	sp,sp,4
8111e360:	f800283a 	ret

8111e364 <atexit>:
8111e364:	200b883a 	mov	r5,r4
8111e368:	000f883a 	mov	r7,zero
8111e36c:	000d883a 	mov	r6,zero
8111e370:	0009883a 	mov	r4,zero
8111e374:	111e42c1 	jmpi	8111e42c <__register_exitproc>

8111e378 <exit>:
8111e378:	defffe04 	addi	sp,sp,-8
8111e37c:	000b883a 	mov	r5,zero
8111e380:	dc000015 	stw	r16,0(sp)
8111e384:	dfc00115 	stw	ra,4(sp)
8111e388:	2021883a 	mov	r16,r4
8111e38c:	111e5440 	call	8111e544 <__call_exitprocs>
8111e390:	00a044b4 	movhi	r2,33042
8111e394:	10873304 	addi	r2,r2,7372
8111e398:	11000017 	ldw	r4,0(r2)
8111e39c:	20800f17 	ldw	r2,60(r4)
8111e3a0:	10000126 	beq	r2,zero,8111e3a8 <exit+0x30>
8111e3a4:	103ee83a 	callr	r2
8111e3a8:	8009883a 	mov	r4,r16
8111e3ac:	111e6c40 	call	8111e6c4 <_exit>

8111e3b0 <memcmp>:
8111e3b0:	01c000c4 	movi	r7,3
8111e3b4:	3980192e 	bgeu	r7,r6,8111e41c <memcmp+0x6c>
8111e3b8:	2144b03a 	or	r2,r4,r5
8111e3bc:	11c4703a 	and	r2,r2,r7
8111e3c0:	10000f26 	beq	r2,zero,8111e400 <memcmp+0x50>
8111e3c4:	20800003 	ldbu	r2,0(r4)
8111e3c8:	28c00003 	ldbu	r3,0(r5)
8111e3cc:	10c0151e 	bne	r2,r3,8111e424 <memcmp+0x74>
8111e3d0:	31bfff84 	addi	r6,r6,-2
8111e3d4:	01ffffc4 	movi	r7,-1
8111e3d8:	00000406 	br	8111e3ec <memcmp+0x3c>
8111e3dc:	20800003 	ldbu	r2,0(r4)
8111e3e0:	28c00003 	ldbu	r3,0(r5)
8111e3e4:	31bfffc4 	addi	r6,r6,-1
8111e3e8:	10c00e1e 	bne	r2,r3,8111e424 <memcmp+0x74>
8111e3ec:	21000044 	addi	r4,r4,1
8111e3f0:	29400044 	addi	r5,r5,1
8111e3f4:	31fff91e 	bne	r6,r7,8111e3dc <__reset+0xfb0fe3dc>
8111e3f8:	0005883a 	mov	r2,zero
8111e3fc:	f800283a 	ret
8111e400:	20c00017 	ldw	r3,0(r4)
8111e404:	28800017 	ldw	r2,0(r5)
8111e408:	18bfee1e 	bne	r3,r2,8111e3c4 <__reset+0xfb0fe3c4>
8111e40c:	31bfff04 	addi	r6,r6,-4
8111e410:	21000104 	addi	r4,r4,4
8111e414:	29400104 	addi	r5,r5,4
8111e418:	39bff936 	bltu	r7,r6,8111e400 <__reset+0xfb0fe400>
8111e41c:	303fe91e 	bne	r6,zero,8111e3c4 <__reset+0xfb0fe3c4>
8111e420:	003ff506 	br	8111e3f8 <__reset+0xfb0fe3f8>
8111e424:	10c5c83a 	sub	r2,r2,r3
8111e428:	f800283a 	ret

8111e42c <__register_exitproc>:
8111e42c:	defffa04 	addi	sp,sp,-24
8111e430:	dc000315 	stw	r16,12(sp)
8111e434:	042044b4 	movhi	r16,33042
8111e438:	84073304 	addi	r16,r16,7372
8111e43c:	80c00017 	ldw	r3,0(r16)
8111e440:	dc400415 	stw	r17,16(sp)
8111e444:	dfc00515 	stw	ra,20(sp)
8111e448:	18805217 	ldw	r2,328(r3)
8111e44c:	2023883a 	mov	r17,r4
8111e450:	10003726 	beq	r2,zero,8111e530 <__register_exitproc+0x104>
8111e454:	10c00117 	ldw	r3,4(r2)
8111e458:	010007c4 	movi	r4,31
8111e45c:	20c00e16 	blt	r4,r3,8111e498 <__register_exitproc+0x6c>
8111e460:	1a000044 	addi	r8,r3,1
8111e464:	8800221e 	bne	r17,zero,8111e4f0 <__register_exitproc+0xc4>
8111e468:	18c00084 	addi	r3,r3,2
8111e46c:	18c7883a 	add	r3,r3,r3
8111e470:	18c7883a 	add	r3,r3,r3
8111e474:	12000115 	stw	r8,4(r2)
8111e478:	10c7883a 	add	r3,r2,r3
8111e47c:	19400015 	stw	r5,0(r3)
8111e480:	0005883a 	mov	r2,zero
8111e484:	dfc00517 	ldw	ra,20(sp)
8111e488:	dc400417 	ldw	r17,16(sp)
8111e48c:	dc000317 	ldw	r16,12(sp)
8111e490:	dec00604 	addi	sp,sp,24
8111e494:	f800283a 	ret
8111e498:	00800034 	movhi	r2,0
8111e49c:	10800004 	addi	r2,r2,0
8111e4a0:	10002626 	beq	r2,zero,8111e53c <__register_exitproc+0x110>
8111e4a4:	01006404 	movi	r4,400
8111e4a8:	d9400015 	stw	r5,0(sp)
8111e4ac:	d9800115 	stw	r6,4(sp)
8111e4b0:	d9c00215 	stw	r7,8(sp)
8111e4b4:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
8111e4b8:	d9400017 	ldw	r5,0(sp)
8111e4bc:	d9800117 	ldw	r6,4(sp)
8111e4c0:	d9c00217 	ldw	r7,8(sp)
8111e4c4:	10001d26 	beq	r2,zero,8111e53c <__register_exitproc+0x110>
8111e4c8:	81000017 	ldw	r4,0(r16)
8111e4cc:	10000115 	stw	zero,4(r2)
8111e4d0:	02000044 	movi	r8,1
8111e4d4:	22405217 	ldw	r9,328(r4)
8111e4d8:	0007883a 	mov	r3,zero
8111e4dc:	12400015 	stw	r9,0(r2)
8111e4e0:	20805215 	stw	r2,328(r4)
8111e4e4:	10006215 	stw	zero,392(r2)
8111e4e8:	10006315 	stw	zero,396(r2)
8111e4ec:	883fde26 	beq	r17,zero,8111e468 <__reset+0xfb0fe468>
8111e4f0:	18c9883a 	add	r4,r3,r3
8111e4f4:	2109883a 	add	r4,r4,r4
8111e4f8:	1109883a 	add	r4,r2,r4
8111e4fc:	21802215 	stw	r6,136(r4)
8111e500:	01800044 	movi	r6,1
8111e504:	12406217 	ldw	r9,392(r2)
8111e508:	30cc983a 	sll	r6,r6,r3
8111e50c:	4992b03a 	or	r9,r9,r6
8111e510:	12406215 	stw	r9,392(r2)
8111e514:	21c04215 	stw	r7,264(r4)
8111e518:	01000084 	movi	r4,2
8111e51c:	893fd21e 	bne	r17,r4,8111e468 <__reset+0xfb0fe468>
8111e520:	11006317 	ldw	r4,396(r2)
8111e524:	218cb03a 	or	r6,r4,r6
8111e528:	11806315 	stw	r6,396(r2)
8111e52c:	003fce06 	br	8111e468 <__reset+0xfb0fe468>
8111e530:	18805304 	addi	r2,r3,332
8111e534:	18805215 	stw	r2,328(r3)
8111e538:	003fc606 	br	8111e454 <__reset+0xfb0fe454>
8111e53c:	00bfffc4 	movi	r2,-1
8111e540:	003fd006 	br	8111e484 <__reset+0xfb0fe484>

8111e544 <__call_exitprocs>:
8111e544:	defff504 	addi	sp,sp,-44
8111e548:	df000915 	stw	fp,36(sp)
8111e54c:	dd400615 	stw	r21,24(sp)
8111e550:	dc800315 	stw	r18,12(sp)
8111e554:	dfc00a15 	stw	ra,40(sp)
8111e558:	ddc00815 	stw	r23,32(sp)
8111e55c:	dd800715 	stw	r22,28(sp)
8111e560:	dd000515 	stw	r20,20(sp)
8111e564:	dcc00415 	stw	r19,16(sp)
8111e568:	dc400215 	stw	r17,8(sp)
8111e56c:	dc000115 	stw	r16,4(sp)
8111e570:	d9000015 	stw	r4,0(sp)
8111e574:	2839883a 	mov	fp,r5
8111e578:	04800044 	movi	r18,1
8111e57c:	057fffc4 	movi	r21,-1
8111e580:	00a044b4 	movhi	r2,33042
8111e584:	10873304 	addi	r2,r2,7372
8111e588:	12000017 	ldw	r8,0(r2)
8111e58c:	45005217 	ldw	r20,328(r8)
8111e590:	44c05204 	addi	r19,r8,328
8111e594:	a0001c26 	beq	r20,zero,8111e608 <__call_exitprocs+0xc4>
8111e598:	a0800117 	ldw	r2,4(r20)
8111e59c:	15ffffc4 	addi	r23,r2,-1
8111e5a0:	b8000d16 	blt	r23,zero,8111e5d8 <__call_exitprocs+0x94>
8111e5a4:	14000044 	addi	r16,r2,1
8111e5a8:	8421883a 	add	r16,r16,r16
8111e5ac:	8421883a 	add	r16,r16,r16
8111e5b0:	84402004 	addi	r17,r16,128
8111e5b4:	a463883a 	add	r17,r20,r17
8111e5b8:	a421883a 	add	r16,r20,r16
8111e5bc:	e0001e26 	beq	fp,zero,8111e638 <__call_exitprocs+0xf4>
8111e5c0:	80804017 	ldw	r2,256(r16)
8111e5c4:	e0801c26 	beq	fp,r2,8111e638 <__call_exitprocs+0xf4>
8111e5c8:	bdffffc4 	addi	r23,r23,-1
8111e5cc:	843fff04 	addi	r16,r16,-4
8111e5d0:	8c7fff04 	addi	r17,r17,-4
8111e5d4:	bd7ff91e 	bne	r23,r21,8111e5bc <__reset+0xfb0fe5bc>
8111e5d8:	00800034 	movhi	r2,0
8111e5dc:	10800004 	addi	r2,r2,0
8111e5e0:	10000926 	beq	r2,zero,8111e608 <__call_exitprocs+0xc4>
8111e5e4:	a0800117 	ldw	r2,4(r20)
8111e5e8:	1000301e 	bne	r2,zero,8111e6ac <__call_exitprocs+0x168>
8111e5ec:	a0800017 	ldw	r2,0(r20)
8111e5f0:	10003226 	beq	r2,zero,8111e6bc <__call_exitprocs+0x178>
8111e5f4:	a009883a 	mov	r4,r20
8111e5f8:	98800015 	stw	r2,0(r19)
8111e5fc:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
8111e600:	9d000017 	ldw	r20,0(r19)
8111e604:	a03fe41e 	bne	r20,zero,8111e598 <__reset+0xfb0fe598>
8111e608:	dfc00a17 	ldw	ra,40(sp)
8111e60c:	df000917 	ldw	fp,36(sp)
8111e610:	ddc00817 	ldw	r23,32(sp)
8111e614:	dd800717 	ldw	r22,28(sp)
8111e618:	dd400617 	ldw	r21,24(sp)
8111e61c:	dd000517 	ldw	r20,20(sp)
8111e620:	dcc00417 	ldw	r19,16(sp)
8111e624:	dc800317 	ldw	r18,12(sp)
8111e628:	dc400217 	ldw	r17,8(sp)
8111e62c:	dc000117 	ldw	r16,4(sp)
8111e630:	dec00b04 	addi	sp,sp,44
8111e634:	f800283a 	ret
8111e638:	a0800117 	ldw	r2,4(r20)
8111e63c:	80c00017 	ldw	r3,0(r16)
8111e640:	10bfffc4 	addi	r2,r2,-1
8111e644:	15c01426 	beq	r2,r23,8111e698 <__call_exitprocs+0x154>
8111e648:	80000015 	stw	zero,0(r16)
8111e64c:	183fde26 	beq	r3,zero,8111e5c8 <__reset+0xfb0fe5c8>
8111e650:	95c8983a 	sll	r4,r18,r23
8111e654:	a0806217 	ldw	r2,392(r20)
8111e658:	a5800117 	ldw	r22,4(r20)
8111e65c:	2084703a 	and	r2,r4,r2
8111e660:	10000b26 	beq	r2,zero,8111e690 <__call_exitprocs+0x14c>
8111e664:	a0806317 	ldw	r2,396(r20)
8111e668:	2088703a 	and	r4,r4,r2
8111e66c:	20000c1e 	bne	r4,zero,8111e6a0 <__call_exitprocs+0x15c>
8111e670:	89400017 	ldw	r5,0(r17)
8111e674:	d9000017 	ldw	r4,0(sp)
8111e678:	183ee83a 	callr	r3
8111e67c:	a0800117 	ldw	r2,4(r20)
8111e680:	15bfbf1e 	bne	r2,r22,8111e580 <__reset+0xfb0fe580>
8111e684:	98800017 	ldw	r2,0(r19)
8111e688:	153fcf26 	beq	r2,r20,8111e5c8 <__reset+0xfb0fe5c8>
8111e68c:	003fbc06 	br	8111e580 <__reset+0xfb0fe580>
8111e690:	183ee83a 	callr	r3
8111e694:	003ff906 	br	8111e67c <__reset+0xfb0fe67c>
8111e698:	a5c00115 	stw	r23,4(r20)
8111e69c:	003feb06 	br	8111e64c <__reset+0xfb0fe64c>
8111e6a0:	89000017 	ldw	r4,0(r17)
8111e6a4:	183ee83a 	callr	r3
8111e6a8:	003ff406 	br	8111e67c <__reset+0xfb0fe67c>
8111e6ac:	a0800017 	ldw	r2,0(r20)
8111e6b0:	a027883a 	mov	r19,r20
8111e6b4:	1029883a 	mov	r20,r2
8111e6b8:	003fb606 	br	8111e594 <__reset+0xfb0fe594>
8111e6bc:	0005883a 	mov	r2,zero
8111e6c0:	003ffb06 	br	8111e6b0 <__reset+0xfb0fe6b0>

8111e6c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8111e6c4:	defffd04 	addi	sp,sp,-12
8111e6c8:	df000215 	stw	fp,8(sp)
8111e6cc:	df000204 	addi	fp,sp,8
8111e6d0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8111e6d4:	0001883a 	nop
8111e6d8:	e0bfff17 	ldw	r2,-4(fp)
8111e6dc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8111e6e0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8111e6e4:	10000226 	beq	r2,zero,8111e6f0 <_exit+0x2c>
    ALT_SIM_FAIL();
8111e6e8:	002af070 	cmpltui	zero,zero,43969
8111e6ec:	00000106 	br	8111e6f4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8111e6f0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8111e6f4:	003fff06 	br	8111e6f4 <__reset+0xfb0fe6f4>
