
COMM_Pedreiro_Test.elf:     file format elf32-littlenios2
COMM_Pedreiro_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00020668 memsz 0x00020ef4 flags rwx
    LOAD off    0x00022000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00022000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001cf3c  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001844  8111d180  8111d180  0001e180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc4  8111e9c4  8111e9c4  0001f9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000088c  81120688  81120688  00021688  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  81120f14  81120f14  00022000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00022000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00022000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001318  00000000  00000000  00022028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003090b  00000000  00000000  00023340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c1bf  00000000  00000000  00053c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fd48  00000000  00000000  0005fe0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004278  00000000  00000000  0006fb54  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006ba8  00000000  00000000  00073dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000196a9  00000000  00000000  0007a974  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00094020  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b58  00000000  00000000  00094060  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0009bb49  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0009bb4c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009bb58  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009bb59  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0009bb5a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0009bb5e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009bb62  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0009bb66  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0009bb71  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0009bb7c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0009bb87  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  0009bb98  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0024a7ef  00000000  00000000  0009bbeb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
8111d180 l    d  .rodata	00000000 .rodata
8111e9c4 l    d  .rwdata	00000000 .rwdata
81120688 l    d  .bss	00000000 .bss
81120f14 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../COMM_Pedreiro_Test_bsp//obj/HAL/src/crt0.o
81100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 comm.c
8112068c l     O .bss	00000004 channel_a_hold_context
81120690 l     O .bss	00000004 channel_b_hold_context
81120694 l     O .bss	00000004 channel_c_hold_context
81120698 l     O .bss	00000004 channel_d_hold_context
8112069c l     O .bss	00000004 channel_e_hold_context
811206a0 l     O .bss	00000004 channel_f_hold_context
811206a4 l     O .bss	00000004 channel_g_hold_context
811206a8 l     O .bss	00000004 channel_h_hold_context
811011ec l     F .text	0000004c write_reg
81101238 l     F .text	00000048 read_reg
00000000 l    df *ABS*	00000000 fee_buffers.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
81102414 l     F .text	00000134 msgdma_write_extended_descriptor
81102548 l     F .text	0000015c msgdma_construct_extended_descriptor
811026a4 l     F .text	00000288 msgdma_descriptor_async_transfer
8110292c l     F .text	0000032c msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 spwc.c
00000000 l    df *ABS*	00000000 tran.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 eth.c
00000000 l    df *ABS*	00000000 pgen.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 mebxhwt01.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
8111e9c4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
8111e5a2 l     O .rodata	00000010 zeroes.4404
8110dec8 l     F .text	000000bc __sbprintf
8111e5b2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
8110e0d8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8110fc08 l     F .text	00000008 __fp_unlock
8110fc1c l     F .text	0000019c __sinit.part.1
8110fdb8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
8111ee08 l     O .rwdata	00000020 lc_ctype_charset
8111ede8 l     O .rwdata	00000020 lc_message_charset
8111ee28 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
8111e5e0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
81112ef4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
811133c4 l     F .text	000000fc __sprint_r.part.0
8111e714 l     O .rodata	00000010 blanks.4348
8111e704 l     O .rodata	00000010 zeroes.4349
81114950 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
81117fb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
811180e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81118110 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
8111837c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
8111845c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
81118898 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
81120674 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81118cb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
81118dec l     F .text	00000034 alt_dev_reg
8111f410 l     O .rwdata	00001060 jtag_uart_0
81120470 l     O .rwdata	000000c4 rs232_uart
81120534 l     O .rwdata	00000060 dma_DDR_M1
81120594 l     O .rwdata	00000060 dma_DDR_M2
811205f4 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81119164 l     F .text	0000020c altera_avalon_jtag_uart_irq
81119370 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
811199a8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81119c58 l     F .text	0000009c altera_avalon_uart_irq
81119cf4 l     F .text	000000e4 altera_avalon_uart_rxirq
81119dd8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
81119f74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
8111a18c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8111a374 l     F .text	0000003c alt_get_errno
8111a3b0 l     F .text	00000094 alt_msgdma_write_standard_descriptor
8111a444 l     F .text	0000012c alt_msgdma_write_extended_descriptor
8111a570 l     F .text	00000184 alt_msgdma_irq
8111a6f4 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
8111a780 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8111a8d4 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
8111aba4 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
8111b1ec l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
8111b290 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8111c31c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8111c7ec l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
8111c92c l     F .text	0000003c alt_get_errno
8111c968 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81120748 g     O .bss	00000004 alt_instruction_exception_handler
8111c100 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8110baa8 g     F .text	00000018 putchar
811036e4 g     F .text	000000e0 SPWC_WRITE_REG32
811126b0 g     F .text	00000074 _mprec_log10
81104c98 g     F .text	000000e0 TRAN_READ_REG32
81101d48 g     F .text	00000100 I2C_Read
8111279c g     F .text	0000008c __any_on
81115044 g     F .text	00000054 _isatty_r
8111e5ec g     O .rodata	00000028 __mprec_tinytens
8111856c g     F .text	0000007c alt_main
8110bac0 g     F .text	000000c0 _puts_r
81120628 g     O .rwdata	00000004 ul_spwc_c_spacewire_link_control_status_register_value
81120e14 g     O .bss	00000100 alt_irq
811206fc g     O .bss	00000004 ul_tran_d_interface_control_status_register_value
81115098 g     F .text	00000060 _lseek_r
81120634 g     O .rwdata	00000004 ul_spwc_f_spacewire_link_control_status_register_value
81117138 g     F .text	00000088 .hidden __eqdf2
811073cc g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_FULL
81106928 g     F .text	00000398 DDR2_MEMORY_READ_TEST
811036a0 g     F .text	00000044 SSDP_UPDATE
8111afcc g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
811206d0 g     O .bss	00000004 ul_spwc_a_interface_control_status_register_value
81120f14 g       *ABS*	00000000 __alt_heap_start
811206cc g     O .bss	00000001 SspdConfigControl
8110ba64 g     F .text	0000003c printf
81115158 g     F .text	0000009c _wcrtomb_r
81113284 g     F .text	0000005c __sseek
8110ff58 g     F .text	00000010 __sinit
81114a0c g     F .text	00000140 __swbuf_r
811002d0 g     F .text	0000002c comm_channel_b_handle_irq
81110a20 g     F .text	0000007c _setlocale_r
811206c8 g     O .bss	00000004 LedsPainelControl
8110fdc0 g     F .text	00000068 __sfmoreglue
8111860c g     F .text	00000024 __malloc_unlock
811076a0 g     F .text	0000020c DMA_MULTIPLE_TRANSFER
811078ac g     F .text	00000144 DMA_EXTENDED_SINGLE_TRANSFER
8110a370 g     F .text	00000440 .hidden __divsf3
81104e44 g     F .text	000001f4 v_Transparent_Interface_Enable_Control
81105a00 g     F .text	000002a8 ui_Transparent_Interface_Get_SpaceWire_Data
811206f8 g     O .bss	00000004 ul_tran_c_interface_control_status_register_value
81104180 g     F .text	00000058 ul_SpaceWire_Interface_Interrupts_Flags_Read
811115a8 g     F .text	0000015c memmove
81100648 g     F .text	000000a4 comm_update_int_control
81104bb8 g     F .text	000000e0 TRAN_WRITE_REG32
811003d8 g     F .text	0000002c comm_channel_h_handle_irq
8110ff40 g     F .text	00000018 _cleanup
8111182c g     F .text	000000a8 _Balloc
8111af1c g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
81107454 g     F .text	000000a0 DMA_DISPATCHER_STOP
811171c0 g     F .text	000000dc .hidden __gtdf2
8111cb80 g     F .text	00000024 altera_nios2_gen2_irq_init
81120b74 g     O .bss	00000054 spw_e
811020a4 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
81120bc8 g     O .bss	00000054 spw_b
81107f44 g     F .text	000000f0 TEMP_Read
81114fe8 g     F .text	0000005c _fstat_r
8112072c g     O .bss	00000004 errno
8110bc08 g     F .text	00000014 __srget
81113200 g     F .text	00000008 __seofread
811046a0 g     F .text	00000070 uc_SpaceWire_Interface_Get_TimeCode
81102d4c g     F .text	0000003c msgdma_extended_descriptor_sync_transfer
81120738 g     O .bss	00000004 alt_argv
81128620 g       *ABS*	00000000 _gp
81118c88 g     F .text	00000030 usleep
811045f0 g     F .text	0000005c v_SpaceWire_Interface_Send_TimeCode
81101280 g     F .text	000000a8 fee_init_m1_dma
81120c1c g     O .bss	00000054 spw_g
81104540 g     F .text	00000058 ul_SpaceWire_Interface_Link_Error_Read
811013d0 g     F .text	0000040c fee_dma_m1_transfer
81101328 g     F .text	000000a8 fee_init_m2_dma
8111ba3c g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8111f290 g     O .rwdata	00000180 alt_fd_list
8110b7f4 g     F .text	00000070 _getc_r
8110b864 g     F .text	00000088 getc
81100404 g     F .text	00000178 comm_init_interrupt
8110baa0 g     F .text	00000008 _putchar_r
8111c4bc g     F .text	00000090 alt_find_dev
8110b8ec g     F .text	00000148 memcpy
811206b0 g     O .bss	00000004 dma_m1_dev
81104598 g     F .text	00000058 ul_SpaceWire_Interface_Link_Status_Read
8110fc10 g     F .text	0000000c _cleanup_r
81117d0c g     F .text	000000dc .hidden __floatsidf
81120708 g     O .bss	00000004 ul_tran_g_interface_control_status_register_value
8111c8b0 g     F .text	0000007c alt_io_redirect
8111729c g     F .text	000000f4 .hidden __ltdf2
8111d180 g       *ABS*	00000000 __DTOR_END__
8111be5c g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
8111c13c g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
8111c0ac g     F .text	00000054 alt_msgdma_register_callback
811206ec g     O .bss	00000004 ul_spwc_h_interface_control_status_register_value
81100ec8 g     F .text	000000b0 comm_update_timecode_tx
8110bb80 g     F .text	00000014 puts
8111cd50 g     F .text	0000009c alt_exception_cause_generated_bad_addr
811130e4 g     F .text	00000074 __fpclassifyd
8112063c g     O .rwdata	00000004 ul_spwc_h_spacewire_link_control_status_register_value
8111260c g     F .text	000000a4 __ratio
811041d8 g     F .text	00000174 v_SpaceWire_Interface_Interrupts_Flags_Clear
81114934 g     F .text	0000001c __vfiprintf_internal
81119568 g     F .text	0000021c altera_avalon_jtag_uart_read
8111b71c g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
8110ba34 g     F .text	00000030 _printf_r
81115ee8 g     F .text	00000064 .hidden __udivsi3
811183b8 g     F .text	000000a4 isatty
811206c4 g     O .bss	00000001 LedsBoardControl
81105628 g     F .text	00000054 b_Transparent_Interface_TX_FIFO_Status_Full
8111e63c g     O .rodata	000000c8 __mprec_tens
811206e8 g     O .bss	00000004 ul_spwc_g_interface_control_status_register_value
811206e0 g     O .bss	00000004 ul_spwc_e_interface_control_status_register_value
81110a9c g     F .text	0000000c __locale_charset
81107b98 g     F .text	00000034 v_Pattern_Generator_Start
81101e48 g     F .text	00000158 I2C_MultipleRead
81120728 g     O .bss	00000004 __malloc_top_pad
81100328 g     F .text	0000002c comm_channel_d_handle_irq
81120648 g     O .rwdata	00000004 __mb_cur_max
81110acc g     F .text	0000000c _localeconv_r
8110027c g     F .text	00000054 comm_channel_a_handle_irq
8110434c g     F .text	000001f4 v_SpaceWire_Interface_Link_Control
81111c38 g     F .text	0000003c __i2b
811103dc g     F .text	000004bc __sfvwrite_r
81113158 g     F .text	00000054 _sbrk_r
811150f8 g     F .text	00000060 _read_r
81120668 g     O .rwdata	00000004 alt_max_fd
81114cdc g     F .text	000000f0 _fclose_r
8110fbd8 g     F .text	00000030 fflush
81120724 g     O .bss	00000004 __malloc_max_sbrked_mem
811181fc g     F .text	00000180 alt_irq_register
811206b8 g     O .bss	00000004 fee_buffer_side_t
8110b4d8 g     F .text	00000110 .hidden __extendsfdf2
81101bf0 g     F .text	00000080 I2C_TestAdress
81100354 g     F .text	0000002c comm_channel_e_handle_irq
81115fa4 g     F .text	000008ac .hidden __adddf3
811123b4 g     F .text	0000010c __b2d
8111b47c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
811158b8 g     F .text	00000538 .hidden __umoddi3
81118498 g     F .text	000000d4 lseek
81120640 g     O .rwdata	00000004 _global_impure_ptr
8110567c g     F .text	00000054 b_Transparent_Interface_TX_FIFO_Status_Empty
81112990 g     F .text	00000564 _realloc_r
81120f14 g       *ABS*	00000000 __bss_end
8111c6fc g     F .text	000000f0 alt_iic_isr_register
81103e8c g     F .text	00000100 v_SpaceWire_Interface_Force_Reset
81118b80 g     F .text	00000108 alt_tick
8111bf40 g     F .text	0000016c alt_msgdma_init
81115340 g     F .text	00000578 .hidden __udivdi3
811206bc g     O .bss	00000004 fee_channel_buffer_id_t
81114f44 g     F .text	00000024 _fputwc_r
8111e614 g     O .rodata	00000028 __mprec_bigtens
81111a1c g     F .text	00000104 __s2b
81117de8 g     F .text	000000a8 .hidden __floatunsidf
811120f4 g     F .text	00000060 __mcmp
81119bac g     F .text	000000ac altera_avalon_uart_init
8111c1b4 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
8110ff78 g     F .text	00000018 __fp_lock_all
8111c6b0 g     F .text	0000004c alt_ic_irq_enabled
81101c70 g     F .text	000000d8 I2C_Write
81104770 g     F .text	000001b0 b_SpaceWire_Interface_Set_TX_Div
81107b48 g     F .text	00000050 ul_Pattern_Generator_Read_Register
81118ae4 g     F .text	0000009c alt_alarm_stop
81120730 g     O .bss	00000004 alt_irq_active
81105720 g     F .text	00000198 b_Transparent_Interface_Switch_Channel
811000fc g     F .exceptions	000000d4 alt_irq_handler
8111f268 g     O .rwdata	00000028 alt_dev_null
8111b0b4 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
81104a64 g     F .text	000000ac b_SpaceWire_Interface_Read_RX_Data
81101fa0 g     F .text	0000008c i2c_start
811054e8 g     F .text	00000054 b_Transparent_Interface_RX_FIFO_Status_Full
8111bdd0 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
81104b10 g     F .text	000000a8 ui_SpaceWire_Interface_Get_SpaceWire_Data
811180c4 g     F .text	00000020 alt_dcache_flush_all
81111b20 g     F .text	00000068 __hi0bits
81117c8c g     F .text	00000080 .hidden __fixdfsi
811035d8 g     F .text	000000c8 SSDP_CONFIG
811023a4 g     F .text	00000070 LEDS_PAINEL_DRIVE
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
81120660 g     O .rwdata	00000008 alt_dev_list
8110076c g     F .text	00000068 comm_int_flag_clear_buffer_empty
81118cf4 g     F .text	000000f8 write
81112828 g     F .text	000000a0 _putc_r
8111814c g     F .text	000000b0 fstat
81107594 g     F .text	0000010c DMA_SINGLE_TRANSFER
8110a160 g     F .text	00000050 _reg_write
8111729c g     F .text	000000f4 .hidden __ledf2
81104de4 g     F .text	00000060 ul_Transparent_Interface_Read_Register
81103268 g     F .text	00000050 v_spi_start
81111e6c g     F .text	00000140 __pow5mult
811134d8 g     F .text	0000145c ___vfiprintf_internal_r
8112071c g     O .bss	00000004 __nlocale_changed
81115f4c g     F .text	00000058 .hidden __umodsi3
81106504 g     F .text	00000424 DDR2_MEMORY_WRITE_TEST
8111b4d4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81120f14 g       *ABS*	00000000 end
8111a1c8 g     F .text	000001ac altera_avalon_uart_write
811206ac g     O .bss	00000004 comm_spw_channel_t
81120c70 g     O .bss	00000054 spw_d
81103f8c g     F .text	000001f4 v_SpaceWire_Interface_Interrupts_Enable_Control
811190a4 g     F .text	000000c0 altera_avalon_jtag_uart_init
811206f4 g     O .bss	00000004 ul_tran_b_interface_control_status_register_value
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
8111d180 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
8110558c g     F .text	00000044 v_Transparent_Interface_TX_FIFO_Reset
81119a20 g     F .text	0000007c alt_avalon_timer_sc_init
81119afc g     F .text	00000060 altera_avalon_uart_write_fd
8110b790 g     F .text	00000064 .hidden __clzsi2
81107bcc g     F .text	00000034 v_Pattern_Generator_Stop
811206d8 g     O .bss	00000004 ul_spwc_c_interface_control_status_register_value
81119b5c g     F .text	00000050 altera_avalon_uart_close_fd
81119784 g     F .text	00000224 altera_avalon_jtag_uart_write
8110522c g     F .text	00000058 ul_Transparent_Interface_Interrupts_Flags_Read
8110ff68 g     F .text	00000004 __sfp_lock_acquire
81108034 g     F .text	00000040 sense_log_temp
811114c4 g     F .text	000000e4 memchr
8110bcb4 g     F .text	000021f8 ___vfprintf_internal_r
811055d0 g     F .text	00000058 ul_Transparent_Interface_TX_FIFO_Status_Read
811100cc g     F .text	00000310 _free_r
81118630 g     F .text	0000022c alt_printf
8110a200 g     F .text	00000104 _print_codec_status
81120620 g     O .rwdata	00000004 ul_spwc_a_spacewire_link_control_status_register_value
81110aa8 g     F .text	00000010 __locale_mb_cur_max
81102c58 g     F .text	000000b8 msgdma_construct_extended_mm_to_mm_descriptor
811074f4 g     F .text	000000a0 DMA_DISPATCHER_RESET
8111cfcc g     F .text	00000180 __call_exitprocs
8110bb94 g     F .text	00000074 __srget_r
81105ca8 g     F .text	000002a4 DDR2_EEPROM_TEST
8110647c g     F .text	00000088 DDR2_SWITCH_MEMORY
81120718 g     O .bss	00000004 __mlocale_changed
8112064c g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	00000038 _start
81120740 g     O .bss	00000004 _alt_tick_rate
81111fac g     F .text	00000148 __lshift
8111af74 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
81120744 g     O .bss	00000004 _alt_nticks
811188d4 g     F .text	000000fc read
81118e58 g     F .text	000000e8 alt_sys_init
81107c34 g     F .text	00000048 Pattern_Generator_Status
8110abac g     F .text	00000124 .hidden __floatsisf
81103910 g     F .text	00000060 ul_SpaceWire_Interface_Read_Register
8111ceb4 g     F .text	00000118 __register_exitproc
81107aec g     F .text	0000005c b_Pattern_Generator_Write_Register
81100858 g     F .text	000000a0 comm_config_windowing
81111c74 g     F .text	000001f8 __multiply
81100a70 g     F .text	000000c8 comm_update_link
81119410 g     F .text	00000068 altera_avalon_jtag_uart_close
81103420 g     F .text	00000050 v_spi_end
8112074c g     O .bss	00000028 __malloc_current_mallinfo
81100978 g     F .text	000000f8 comm_config_link
811124c0 g     F .text	0000014c __d2b
81103470 g     F .text	00000168 RTCC_SPI_R_MAC
81118f40 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
8111ccac g     F .text	000000a4 alt_get_fd
811072e8 g     F .text	0000005c DMA_OPEN_DEVICE
81117e90 g     F .text	00000128 alt_busy_sleep
811206dc g     O .bss	00000004 ul_spwc_d_interface_control_status_register_value
8110a304 g     F .text	0000006c _split_codec_status
81114bc4 g     F .text	00000054 _close_r
81106cc0 g     F .text	000002e0 DDR2_MEMORY_RANDOM_WRITE_TEST
811206d4 g     O .bss	00000004 ul_spwc_b_interface_control_status_register_value
8111b424 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8111ce38 g     F .text	0000007c memcmp
81119000 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
81120f14 g       *ABS*	00000000 __alt_stack_base
81119050 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
8111b52c g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
8110df84 g     F .text	00000154 __swsetup_r
811096e0 g     F .text	00000360 TestLeds
81116850 g     F .text	000008e8 .hidden __divdf3
81120704 g     O .bss	00000004 ul_tran_f_interface_control_status_register_value
8110fe28 g     F .text	00000118 __sfp
81107410 g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_EMPTY
81112724 g     F .text	00000078 __copybits
8111ee60 g     O .rwdata	00000408 __malloc_av_
8110ff74 g     F .text	00000004 __sinit_lock_release
8110202c g     F .text	00000078 i2c_stop
8110adc0 g     F .text	00000718 .hidden __muldf3
811131ac g     F .text	00000054 __sread
8111cba4 g     F .text	00000108 alt_find_file
8110232c g     F .text	00000078 LEDS_BOARD_DRIVE
8111c358 g     F .text	000000a4 alt_dev_llist_insert
811185e8 g     F .text	00000024 __malloc_lock
81118a34 g     F .text	000000b0 sbrk
8110fb7c g     F .text	0000005c _fflush_r
81114c18 g     F .text	000000c4 _calloc_r
81100cec g     F .text	000000b0 comm_update_timecode_rx
81120688 g     O .bss	00000001 int_cnt
81107344 g     F .text	00000044 DMA_CONFIG
811007d4 g     F .text	00000084 comm_int_flag_buffer_empty
81120688 g       *ABS*	00000000 __bss_start
81100e00 g     F .text	000000c8 comm_send_timecode_tx
81107a9c g     F .text	00000050 PGEN_READ_REG32
81111704 g     F .text	00000128 memset
8110543c g     F .text	00000058 ul_Transparent_Interface_RX_FIFO_Status_Read
8110101c g     F .text	000001d0 comm_init_channel
8111bee8 g     F .text	00000058 alt_msgdma_open
81105f4c g     F .text	00000530 DDR2_EEPROM_DUMP
81108718 g     F .text	00000fc8 main
8112073c g     O .bss	00000004 alt_envp
81120720 g     O .bss	00000004 __malloc_max_total_mem
8111b80c g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
81107c00 g     F .text	00000034 v_Pattern_Generator_Reset
81118fa0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
81107d08 g     F .text	0000023c POWER_Read
811021d4 g     F .text	00000158 i2c_read
81114b4c g     F .text	00000018 __swbuf
81100f78 g     F .text	000000a4 comm_update_buffers_status
811132e0 g     F .text	00000008 __sclose
811fa000 g       *ABS*	00000000 __alt_heap_limit
81114dcc g     F .text	00000014 fclose
8110b5e8 g     F .text	000001a8 .hidden __truncdfsf2
8112062c g     O .rwdata	00000004 ul_spwc_d_spacewire_link_control_status_register_value
8110e2d8 g     F .text	00001688 _dtoa_r
8111bb10 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
81110cb8 g     F .text	0000080c _malloc_r
811152b4 g     F .text	00000030 __ascii_wctomb
8112066c g     O .rwdata	00000004 alt_errno
8111b664 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81102d88 g     F .text	000004e0 POWER_SPI_RW
81100c24 g     F .text	000000c8 comm_update_link_status
81110898 g     F .text	000000c4 _fwalk
81120710 g     O .bss	00000004 InitialState
811037c4 g     F .text	000000e0 SPWC_READ_REG32
81120cc4 g     O .bss	00000054 spw_f
81107a1c g     F .text	00000030 v_Eth_Release_Reset
811128c8 g     F .text	000000c8 putc
81115df0 g     F .text	00000084 .hidden __divsi3
8110ffa8 g     F .text	00000124 _malloc_trim_r
8111d180 g       *ABS*	00000000 __CTOR_END__
8110a7b0 g     F .text	000003fc .hidden __mulsf3
811206c0 g     O .bss	00000004 pnt_memory
811132e8 g     F .text	000000dc strcmp
8111d180 g       *ABS*	00000000 __DTOR_LIST__
81100380 g     F .text	0000002c comm_channel_f_handle_irq
8110a1b0 g     F .text	00000050 _reg_read
81117138 g     F .text	00000088 .hidden __nedf2
81118e20 g     F .text	00000038 alt_irq_init
811189d0 g     F .text	00000064 alt_release_fd
8111c178 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8111e457 g     O .rodata	00000100 .hidden __clz_tab
81120714 g     O .bss	00000004 _PathLocale
8111cdec g     F .text	00000014 atexit
81114b64 g     F .text	00000060 _write_r
81110ad8 g     F .text	00000018 setlocale
8111b5cc g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
81120644 g     O .rwdata	00000004 _impure_ptr
81100b38 g     F .text	000000ec comm_update_link_error
81120630 g     O .rwdata	00000004 ul_spwc_e_spacewire_link_control_status_register_value
81120734 g     O .bss	00000004 alt_argc
8110f960 g     F .text	0000021c __sflush_r
81120774 g     O .bss	00000400 szData
8111c45c g     F .text	00000060 _do_dtors
81110ac4 g     F .text	00000008 __locale_cjk_lang
81108074 g     F .text	000006a4 sense_log
81112f10 g     F .text	000001d4 __srefill_r
81100020 g       .exceptions	00000000 alt_irq_entry
81112350 g     F .text	00000064 __ulp
8110ff90 g     F .text	00000018 __fp_unlock_all
81120658 g     O .rwdata	00000008 alt_fs_list
8112070c g     O .bss	00000004 ul_tran_h_interface_control_status_register_value
811206f0 g     O .bss	00000004 ul_tran_a_interface_control_status_register_value
81103b64 g     F .text	00000328 b_SpaceWire_Interface_Mode_Control
81105494 g     F .text	00000054 b_Transparent_Interface_RX_FIFO_Status_Empty
811008f8 g     F .text	00000080 comm_update_windowing
811206b4 g     O .bss	00000004 dma_m2_dev
811053f8 g     F .text	00000044 v_Transparent_Interface_RX_FIFO_Reset
811006ec g     F .text	00000080 comm_update_int_flags
811003ac g     F .text	0000002c comm_channel_g_handle_irq
81110af0 g     F .text	0000000c localeconv
8110057c g     F .text	000000cc comm_config_int_control
8111c54c g     F .text	00000050 alt_ic_isr_register
81120700 g     O .bss	00000004 ul_tran_e_interface_control_status_register_value
81120624 g     O .rwdata	00000004 ul_spwc_b_spacewire_link_control_status_register_value
81120688 g       *ABS*	00000000 _edata
81106fa0 g     F .text	000002d0 DDR2_MEMORY_RANDOM_READ_TEST
81119a9c g     F .text	00000060 altera_avalon_uart_read_fd
81120f14 g       *ABS*	00000000 _end
811017dc g     F .text	00000414 fee_dma_m2_transfer
811056d0 g     F .text	00000050 uc_Transparent_Interface_TX_FIFO_Status_Used
81114de0 g     F .text	00000164 __fputwc
81119478 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
81103970 g     F .text	000001f4 b_SpaceWire_Interface_Enable_Control
81107c7c g     F .text	0000008c Pattern_Generator_Configure_Initial_State
8111c624 g     F .text	0000008c alt_ic_irq_disable
811002fc g     F .text	0000002c comm_channel_c_handle_irq
81113208 g     F .text	0000007c __swrite
811079f0 g     F .text	0000002c v_Eth_Hold_Reset
81120650 g     O .rwdata	00000004 __malloc_trim_threshold
81110ab8 g     F .text	0000000c __locale_msgcharset
8111ce00 g     F .text	00000038 exit
8111095c g     F .text	000000c4 _fwalk_reent
8111b9a4 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8110acd0 g     F .text	000000f0 .hidden __floatunsisf
81112154 g     F .text	000001fc __mdiff
81115e74 g     F .text	00000074 .hidden __modsi3
81109dd0 g     F .text	00000390 TestDMA_M2_M1
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
8110ff6c g     F .text	00000004 __sfp_lock_release
8111b144 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
8110464c g     F .text	00000054 b_SpaceWire_Interface_TimeCode_Arrived
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
811049a8 g     F .text	000000bc b_SpaceWire_Interface_Send_SpaceWire_Data
8111b024 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
81119f20 g     F .text	00000054 altera_avalon_uart_close
81104d78 g     F .text	0000006c b_Transparent_Interface_Write_Register
8111d14c g     F .text	00000034 _exit
8111c1f0 g     F .text	0000012c alt_alarm_start
81110afc g     F .text	000001bc __smakebuf_r
811058b8 g     F .text	00000148 b_Transparent_Interface_Send_SpaceWire_Data
81120680 g     O .rwdata	00000008 alt_msgdma_list
8110bc1c g     F .text	00000098 strlen
81103374 g     F .text	000000ac uc_spi_get_byte
8110553c g     F .text	00000050 uc_Transparent_Interface_RX_FIFO_Status_Used
8111ca2c g     F .text	00000154 open
811171c0 g     F .text	000000dc .hidden __gedf2
811206e4 g     O .bss	00000004 ul_spwc_f_interface_control_status_register_value
8111885c g     F .text	0000003c alt_putchar
81120654 g     O .rwdata	00000004 __wctomb
811134c0 g     F .text	00000018 __sprint_r
81104710 g     F .text	00000060 uc_SpaceWire_Interface_Get_TX_Div
81120638 g     O .rwdata	00000004 ul_spwc_g_spacewire_link_control_status_register_value
811038a4 g     F .text	0000006c b_SpaceWire_Interface_Write_Register
81120670 g     O .rwdata	00000004 alt_priority_mask
81120d18 g     O .bss	00000054 spw_h
811032b8 g     F .text	000000bc v_spi_send_byte
8111c59c g     F .text	00000088 alt_ic_irq_enable
8110deac g     F .text	0000001c __vfprintf_internal
81100d9c g     F .text	00000064 comm_clear_timecode_rx_received
81107a4c g     F .text	00000050 PGEN_WRITE_REG32
81119fb0 g     F .text	000001dc altera_avalon_uart_read
811152e4 g     F .text	0000005c _wctomb_r
81105284 g     F .text	00000174 v_Transparent_Interface_Interrupts_Flags_Clear
81120d6c g     O .bss	00000054 spw_a
81102d10 g     F .text	0000003c msgdma_extended_descriptor_async_transfer
81117390 g     F .text	000008fc .hidden __subdf3
81109a40 g     F .text	00000390 TestDMA_M1_M2
81111b88 g     F .text	000000b0 __lo0bits
81120678 g     O .rwdata	00000008 alt_alarm_list
8111c3fc g     F .text	00000060 _do_ctors
81120dc0 g     O .bss	00000054 spw_c
81107388 g     F .text	00000044 DMA_BUSY
811151f4 g     F .text	000000c0 wcrtomb
81117ff4 g     F .text	000000d0 close
81105038 g     F .text	000001f4 v_Transparent_Interface_Interrupts_Enable_Control
81104920 g     F .text	00000088 b_SpaceWire_Interface_Write_TX_Data
81107270 g     F .text	00000078 xorshift32
81114f68 g     F .text	00000080 fputwc
8110ff70 g     F .text	00000004 __sinit_lock_acquire
811118fc g     F .text	00000120 __multadd
811118d4 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a044b4 	movhi	r2,33042
81100140:	10838504 	addi	r2,r2,3604
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a044b4 	movhi	r2,33042
81100158:	10838504 	addi	r2,r2,3604
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	0001883a 	nop
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a04a17 	ldw	r2,-32472(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a04a17 	ldw	r2,-32472(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100244:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110024c:	06a044b4 	movhi	gp,33042
    ori gp, gp, %lo(_gp)
81100250:	d6a18814 	ori	gp,gp,34336
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
81100254:	00a044b4 	movhi	r2,33042
    ori r2, r2, %lo(__bss_start)
81100258:	1081a214 	ori	r2,r2,1672

    movhi r3, %hi(__bss_end)
8110025c:	00e044b4 	movhi	r3,33042
    ori r3, r3, %lo(__bss_end)
81100260:	18c3c514 	ori	r3,r3,3860

    beq r2, r3, 1f
81100264:	10c00326 	beq	r2,r3,81100274 <_start+0x30>

0:
    stw zero, (r2)
81100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100270:	10fffd36 	bltu	r2,r3,81100268 <__reset+0xfb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100274:	111856c0 	call	8111856c <alt_main>

81100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100278:	003fff06 	br	81100278 <__reset+0xfb0e0278>

8110027c <comm_channel_a_handle_irq>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]

void comm_channel_a_handle_irq(void* context) {
8110027c:	defffc04 	addi	sp,sp,-16
81100280:	dfc00315 	stw	ra,12(sp)
81100284:	df000215 	stw	fp,8(sp)
81100288:	df000204 	addi	fp,sp,8
8110028c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
81100290:	e0bfff17 	ldw	r2,-4(fp)
81100294:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	int_cnt++;
81100298:	d0a01a03 	ldbu	r2,-32664(gp)
8110029c:	10800044 	addi	r2,r2,1
811002a0:	d0a01a05 	stb	r2,-32664(gp)
	write_reg((alt_u32 *)COMM_CHANNEL_A_BASE_ADDR, COMM_INTERRUPT_FLAG_REG_OFFSET,
811002a4:	01800044 	movi	r6,1
811002a8:	01400144 	movi	r5,5
811002ac:	01204834 	movhi	r4,33056
811002b0:	210b0004 	addi	r4,r4,11264
811002b4:	11011ec0 	call	811011ec <write_reg>
			COMM_INT_BUFFER_EMPTY_FLAG_MASK);
}
811002b8:	0001883a 	nop
811002bc:	e037883a 	mov	sp,fp
811002c0:	dfc00117 	ldw	ra,4(sp)
811002c4:	df000017 	ldw	fp,0(sp)
811002c8:	dec00204 	addi	sp,sp,8
811002cc:	f800283a 	ret

811002d0 <comm_channel_b_handle_irq>:

void comm_channel_b_handle_irq(void* context) {
811002d0:	defffd04 	addi	sp,sp,-12
811002d4:	df000215 	stw	fp,8(sp)
811002d8:	df000204 	addi	fp,sp,8
811002dc:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
811002e0:	e0bfff17 	ldw	r2,-4(fp)
811002e4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
}
811002e8:	0001883a 	nop
811002ec:	e037883a 	mov	sp,fp
811002f0:	df000017 	ldw	fp,0(sp)
811002f4:	dec00104 	addi	sp,sp,4
811002f8:	f800283a 	ret

811002fc <comm_channel_c_handle_irq>:

void comm_channel_c_handle_irq(void* context) {
811002fc:	defffd04 	addi	sp,sp,-12
81100300:	df000215 	stw	fp,8(sp)
81100304:	df000204 	addi	fp,sp,8
81100308:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
8110030c:	e0bfff17 	ldw	r2,-4(fp)
81100310:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
}
81100314:	0001883a 	nop
81100318:	e037883a 	mov	sp,fp
8110031c:	df000017 	ldw	fp,0(sp)
81100320:	dec00104 	addi	sp,sp,4
81100324:	f800283a 	ret

81100328 <comm_channel_d_handle_irq>:

void comm_channel_d_handle_irq(void* context) {
81100328:	defffd04 	addi	sp,sp,-12
8110032c:	df000215 	stw	fp,8(sp)
81100330:	df000204 	addi	fp,sp,8
81100334:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
81100338:	e0bfff17 	ldw	r2,-4(fp)
8110033c:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
}
81100340:	0001883a 	nop
81100344:	e037883a 	mov	sp,fp
81100348:	df000017 	ldw	fp,0(sp)
8110034c:	dec00104 	addi	sp,sp,4
81100350:	f800283a 	ret

81100354 <comm_channel_e_handle_irq>:

void comm_channel_e_handle_irq(void* context) {
81100354:	defffd04 	addi	sp,sp,-12
81100358:	df000215 	stw	fp,8(sp)
8110035c:	df000204 	addi	fp,sp,8
81100360:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
81100364:	e0bfff17 	ldw	r2,-4(fp)
81100368:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
}
8110036c:	0001883a 	nop
81100370:	e037883a 	mov	sp,fp
81100374:	df000017 	ldw	fp,0(sp)
81100378:	dec00104 	addi	sp,sp,4
8110037c:	f800283a 	ret

81100380 <comm_channel_f_handle_irq>:

void comm_channel_f_handle_irq(void* context) {
81100380:	defffd04 	addi	sp,sp,-12
81100384:	df000215 	stw	fp,8(sp)
81100388:	df000204 	addi	fp,sp,8
8110038c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
81100390:	e0bfff17 	ldw	r2,-4(fp)
81100394:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
}
81100398:	0001883a 	nop
8110039c:	e037883a 	mov	sp,fp
811003a0:	df000017 	ldw	fp,0(sp)
811003a4:	dec00104 	addi	sp,sp,4
811003a8:	f800283a 	ret

811003ac <comm_channel_g_handle_irq>:

void comm_channel_g_handle_irq(void* context) {
811003ac:	defffd04 	addi	sp,sp,-12
811003b0:	df000215 	stw	fp,8(sp)
811003b4:	df000204 	addi	fp,sp,8
811003b8:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
811003bc:	e0bfff17 	ldw	r2,-4(fp)
811003c0:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
}
811003c4:	0001883a 	nop
811003c8:	e037883a 	mov	sp,fp
811003cc:	df000017 	ldw	fp,0(sp)
811003d0:	dec00104 	addi	sp,sp,4
811003d4:	f800283a 	ret

811003d8 <comm_channel_h_handle_irq>:

void comm_channel_h_handle_irq(void* context) {
811003d8:	defffd04 	addi	sp,sp,-12
811003dc:	df000215 	stw	fp,8(sp)
811003e0:	df000204 	addi	fp,sp,8
811003e4:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* hold_context_ptr = (volatile int*) context;
811003e8:	e0bfff17 	ldw	r2,-4(fp)
811003ec:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
}
811003f0:	0001883a 	nop
811003f4:	e037883a 	mov	sp,fp
811003f8:	df000017 	ldw	fp,0(sp)
811003fc:	dec00104 	addi	sp,sp,4
81100400:	f800283a 	ret

81100404 <comm_init_interrupt>:

void comm_init_interrupt(alt_u8 spw_channel) {
81100404:	defffc04 	addi	sp,sp,-16
81100408:	dfc00315 	stw	ra,12(sp)
8110040c:	df000215 	stw	fp,8(sp)
81100410:	df000204 	addi	fp,sp,8
81100414:	2005883a 	mov	r2,r4
81100418:	e0bfff05 	stb	r2,-4(fp)
	void* hold_context_ptr;
	switch (spw_channel) {
8110041c:	e0bfff03 	ldbu	r2,-4(fp)
81100420:	10c00268 	cmpgeui	r3,r2,9
81100424:	18004f1e 	bne	r3,zero,81100564 <comm_init_interrupt+0x160>
81100428:	100690ba 	slli	r3,r2,2
8110042c:	00a04434 	movhi	r2,33040
81100430:	10811004 	addi	r2,r2,1088
81100434:	1885883a 	add	r2,r3,r2
81100438:	10800017 	ldw	r2,0(r2)
8110043c:	1000683a 	jmp	r2
81100440:	81100564 	muli	r4,r16,16405
81100444:	81100464 	muli	r4,r16,16401
81100448:	81100484 	addi	r4,r16,16402
8110044c:	811004a4 	muli	r4,r16,16402
81100450:	811004c4 	addi	r4,r16,16403
81100454:	811004e4 	muli	r4,r16,16403
81100458:	81100504 	addi	r4,r16,16404
8110045c:	81100524 	muli	r4,r16,16404
81100460:	81100544 	addi	r4,r16,16405
	case spacewire_channel_a:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_a_hold_context;
81100464:	d0a01b04 	addi	r2,gp,-32660
81100468:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, hold_context_ptr,
8110046c:	01a04434 	movhi	r6,33040
81100470:	31809f04 	addi	r6,r6,636
81100474:	e17ffe17 	ldw	r5,-8(fp)
81100478:	01000084 	movi	r4,2
8110047c:	11181fc0 	call	811181fc <alt_irq_register>
				comm_channel_a_handle_irq);
		break;
81100480:	00003806 	br	81100564 <comm_init_interrupt+0x160>
	case spacewire_channel_b:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_b_hold_context;
81100484:	d0a01c04 	addi	r2,gp,-32656
81100488:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, hold_context_ptr,
8110048c:	01a04434 	movhi	r6,33040
81100490:	3180b404 	addi	r6,r6,720
81100494:	e17ffe17 	ldw	r5,-8(fp)
81100498:	010000c4 	movi	r4,3
8110049c:	11181fc0 	call	811181fc <alt_irq_register>
				comm_channel_b_handle_irq);
		break;
811004a0:	00003006 	br	81100564 <comm_init_interrupt+0x160>
	case spacewire_channel_c:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_c_hold_context;
811004a4:	d0a01d04 	addi	r2,gp,-32652
811004a8:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, hold_context_ptr,
811004ac:	01a04434 	movhi	r6,33040
811004b0:	3180bf04 	addi	r6,r6,764
811004b4:	e17ffe17 	ldw	r5,-8(fp)
811004b8:	01000104 	movi	r4,4
811004bc:	11181fc0 	call	811181fc <alt_irq_register>
				comm_channel_c_handle_irq);
		break;
811004c0:	00002806 	br	81100564 <comm_init_interrupt+0x160>
	case spacewire_channel_d:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_d_hold_context;
811004c4:	d0a01e04 	addi	r2,gp,-32648
811004c8:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, hold_context_ptr,
811004cc:	01a04434 	movhi	r6,33040
811004d0:	3180ca04 	addi	r6,r6,808
811004d4:	e17ffe17 	ldw	r5,-8(fp)
811004d8:	01000204 	movi	r4,8
811004dc:	11181fc0 	call	811181fc <alt_irq_register>
				comm_channel_d_handle_irq);
		break;
811004e0:	00002006 	br	81100564 <comm_init_interrupt+0x160>
	case spacewire_channel_e:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_e_hold_context;
811004e4:	d0a01f04 	addi	r2,gp,-32644
811004e8:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, hold_context_ptr,
811004ec:	01a04434 	movhi	r6,33040
811004f0:	3180d504 	addi	r6,r6,852
811004f4:	e17ffe17 	ldw	r5,-8(fp)
811004f8:	010001c4 	movi	r4,7
811004fc:	11181fc0 	call	811181fc <alt_irq_register>
				comm_channel_e_handle_irq);
		break;
81100500:	00001806 	br	81100564 <comm_init_interrupt+0x160>
	case spacewire_channel_f:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_f_hold_context;
81100504:	d0a02004 	addi	r2,gp,-32640
81100508:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, hold_context_ptr,
8110050c:	01a04434 	movhi	r6,33040
81100510:	3180e004 	addi	r6,r6,896
81100514:	e17ffe17 	ldw	r5,-8(fp)
81100518:	01000184 	movi	r4,6
8110051c:	11181fc0 	call	811181fc <alt_irq_register>
				comm_channel_f_handle_irq);
		break;
81100520:	00001006 	br	81100564 <comm_init_interrupt+0x160>
	case spacewire_channel_g:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_g_hold_context;
81100524:	d0a02104 	addi	r2,gp,-32636
81100528:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, hold_context_ptr,
8110052c:	01a04434 	movhi	r6,33040
81100530:	3180eb04 	addi	r6,r6,940
81100534:	e17ffe17 	ldw	r5,-8(fp)
81100538:	01000144 	movi	r4,5
8110053c:	11181fc0 	call	811181fc <alt_irq_register>
				comm_channel_g_handle_irq);
		break;
81100540:	00000806 	br	81100564 <comm_init_interrupt+0x160>
	case spacewire_channel_h:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		hold_context_ptr = (void*) &channel_h_hold_context;
81100544:	d0a02204 	addi	r2,gp,-32632
81100548:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, hold_context_ptr,
8110054c:	01a04434 	movhi	r6,33040
81100550:	3180f604 	addi	r6,r6,984
81100554:	e17ffe17 	ldw	r5,-8(fp)
81100558:	01000244 	movi	r4,9
8110055c:	11181fc0 	call	811181fc <alt_irq_register>
				comm_channel_h_handle_irq);
		break;
81100560:	0001883a 	nop
	}
}
81100564:	0001883a 	nop
81100568:	e037883a 	mov	sp,fp
8110056c:	dfc00117 	ldw	ra,4(sp)
81100570:	df000017 	ldw	fp,0(sp)
81100574:	dec00204 	addi	sp,sp,8
81100578:	f800283a 	ret

8110057c <comm_config_int_control>:

bool comm_config_int_control(comm_channel_t *channel) {
8110057c:	defffb04 	addi	sp,sp,-20
81100580:	dfc00415 	stw	ra,16(sp)
81100584:	df000315 	stw	fp,12(sp)
81100588:	df000304 	addi	fp,sp,12
8110058c:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100590:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100594:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100598:	e0bfff17 	ldw	r2,-4(fp)
8110059c:	10002426 	beq	r2,zero,81100630 <comm_config_int_control+0xb4>
		reg = read_reg(channel->channel_address,
811005a0:	e0bfff17 	ldw	r2,-4(fp)
811005a4:	10800017 	ldw	r2,0(r2)
811005a8:	01400104 	movi	r5,4
811005ac:	1009883a 	mov	r4,r2
811005b0:	11012380 	call	81101238 <read_reg>
811005b4:	e0bffe15 	stw	r2,-8(fp)
		COMM_INTERRUPT_CONTROL_REG_OFFSET);

		if (channel->int_control.left_buffer_empty_en) {
811005b8:	e0bfff17 	ldw	r2,-4(fp)
811005bc:	10801017 	ldw	r2,64(r2)
811005c0:	10000426 	beq	r2,zero,811005d4 <comm_config_int_control+0x58>
			reg |= COMM_INT_LEFT_BUFFER_EMPTY_EN_MASK;
811005c4:	e0bffe17 	ldw	r2,-8(fp)
811005c8:	10804014 	ori	r2,r2,256
811005cc:	e0bffe15 	stw	r2,-8(fp)
811005d0:	00000406 	br	811005e4 <comm_config_int_control+0x68>
		} else {
			reg &= (~COMM_INT_LEFT_BUFFER_EMPTY_EN_MASK);
811005d4:	e0fffe17 	ldw	r3,-8(fp)
811005d8:	00bfbfc4 	movi	r2,-257
811005dc:	1884703a 	and	r2,r3,r2
811005e0:	e0bffe15 	stw	r2,-8(fp)
		}
		if (channel->int_control.right_buffer_empty_en) {
811005e4:	e0bfff17 	ldw	r2,-4(fp)
811005e8:	10801117 	ldw	r2,68(r2)
811005ec:	10000426 	beq	r2,zero,81100600 <comm_config_int_control+0x84>
			reg |= COMM_INT_RIGHT_BUFFER_EMPTY_EN_MASK;
811005f0:	e0bffe17 	ldw	r2,-8(fp)
811005f4:	10800054 	ori	r2,r2,1
811005f8:	e0bffe15 	stw	r2,-8(fp)
811005fc:	00000406 	br	81100610 <comm_config_int_control+0x94>
		} else {
			reg &= (~COMM_INT_RIGHT_BUFFER_EMPTY_EN_MASK);
81100600:	e0fffe17 	ldw	r3,-8(fp)
81100604:	00bfff84 	movi	r2,-2
81100608:	1884703a 	and	r2,r3,r2
8110060c:	e0bffe15 	stw	r2,-8(fp)
		}

		write_reg(channel->channel_address, COMM_INTERRUPT_CONTROL_REG_OFFSET,
81100610:	e0bfff17 	ldw	r2,-4(fp)
81100614:	10800017 	ldw	r2,0(r2)
81100618:	e1bffe17 	ldw	r6,-8(fp)
8110061c:	01400104 	movi	r5,4
81100620:	1009883a 	mov	r4,r2
81100624:	11011ec0 	call	811011ec <write_reg>
				reg);
		status = TRUE;
81100628:	00800044 	movi	r2,1
8110062c:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100630:	e0bffd17 	ldw	r2,-12(fp)
}
81100634:	e037883a 	mov	sp,fp
81100638:	dfc00117 	ldw	ra,4(sp)
8110063c:	df000017 	ldw	fp,0(sp)
81100640:	dec00204 	addi	sp,sp,8
81100644:	f800283a 	ret

81100648 <comm_update_int_control>:

bool comm_update_int_control(comm_channel_t *channel) {
81100648:	defffb04 	addi	sp,sp,-20
8110064c:	dfc00415 	stw	ra,16(sp)
81100650:	df000315 	stw	fp,12(sp)
81100654:	df000304 	addi	fp,sp,12
81100658:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
8110065c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100660:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100664:	e0bfff17 	ldw	r2,-4(fp)
81100668:	10001a26 	beq	r2,zero,811006d4 <comm_update_int_control+0x8c>
		reg = read_reg(channel->channel_address,
8110066c:	e0bfff17 	ldw	r2,-4(fp)
81100670:	10800017 	ldw	r2,0(r2)
81100674:	01400104 	movi	r5,4
81100678:	1009883a 	mov	r4,r2
8110067c:	11012380 	call	81101238 <read_reg>
81100680:	e0bffe15 	stw	r2,-8(fp)
		COMM_INTERRUPT_CONTROL_REG_OFFSET);

		if (reg & COMM_INT_LEFT_BUFFER_EMPTY_EN_MASK) {
81100684:	e0bffe17 	ldw	r2,-8(fp)
81100688:	1080400c 	andi	r2,r2,256
8110068c:	10000426 	beq	r2,zero,811006a0 <comm_update_int_control+0x58>
			channel->int_control.left_buffer_empty_en = TRUE;
81100690:	e0bfff17 	ldw	r2,-4(fp)
81100694:	00c00044 	movi	r3,1
81100698:	10c01015 	stw	r3,64(r2)
8110069c:	00000206 	br	811006a8 <comm_update_int_control+0x60>
		} else {
			channel->int_control.left_buffer_empty_en = FALSE;
811006a0:	e0bfff17 	ldw	r2,-4(fp)
811006a4:	10001015 	stw	zero,64(r2)
		}
		if (reg & COMM_INT_RIGHT_BUFFER_EMPTY_EN_MASK) {
811006a8:	e0bffe17 	ldw	r2,-8(fp)
811006ac:	1080004c 	andi	r2,r2,1
811006b0:	10000426 	beq	r2,zero,811006c4 <comm_update_int_control+0x7c>
			channel->int_control.right_buffer_empty_en = TRUE;
811006b4:	e0bfff17 	ldw	r2,-4(fp)
811006b8:	00c00044 	movi	r3,1
811006bc:	10c01115 	stw	r3,68(r2)
811006c0:	00000206 	br	811006cc <comm_update_int_control+0x84>
		} else {
			channel->int_control.right_buffer_empty_en = FALSE;
811006c4:	e0bfff17 	ldw	r2,-4(fp)
811006c8:	10001115 	stw	zero,68(r2)
		}

		status = TRUE;
811006cc:	00800044 	movi	r2,1
811006d0:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
811006d4:	e0bffd17 	ldw	r2,-12(fp)
}
811006d8:	e037883a 	mov	sp,fp
811006dc:	dfc00117 	ldw	ra,4(sp)
811006e0:	df000017 	ldw	fp,0(sp)
811006e4:	dec00204 	addi	sp,sp,8
811006e8:	f800283a 	ret

811006ec <comm_update_int_flags>:

bool comm_update_int_flags(comm_channel_t *channel) {
811006ec:	defffb04 	addi	sp,sp,-20
811006f0:	dfc00415 	stw	ra,16(sp)
811006f4:	df000315 	stw	fp,12(sp)
811006f8:	df000304 	addi	fp,sp,12
811006fc:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100700:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100704:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100708:	e0bfff17 	ldw	r2,-4(fp)
8110070c:	10001126 	beq	r2,zero,81100754 <comm_update_int_flags+0x68>
		reg = read_reg(channel->channel_address,
81100710:	e0bfff17 	ldw	r2,-4(fp)
81100714:	10800017 	ldw	r2,0(r2)
81100718:	01400144 	movi	r5,5
8110071c:	1009883a 	mov	r4,r2
81100720:	11012380 	call	81101238 <read_reg>
81100724:	e0bffe15 	stw	r2,-8(fp)
		COMM_INTERRUPT_FLAG_REG_OFFSET);

		if (reg & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
81100728:	e0bffe17 	ldw	r2,-8(fp)
8110072c:	1080004c 	andi	r2,r2,1
81100730:	10000426 	beq	r2,zero,81100744 <comm_update_int_flags+0x58>
			channel->int_flag.buffer_empty_flag = TRUE;
81100734:	e0bfff17 	ldw	r2,-4(fp)
81100738:	00c00044 	movi	r3,1
8110073c:	10c01215 	stw	r3,72(r2)
81100740:	00000206 	br	8110074c <comm_update_int_flags+0x60>
		} else {
			channel->int_flag.buffer_empty_flag = FALSE;
81100744:	e0bfff17 	ldw	r2,-4(fp)
81100748:	10001215 	stw	zero,72(r2)
		}

		status = TRUE;
8110074c:	00800044 	movi	r2,1
81100750:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100754:	e0bffd17 	ldw	r2,-12(fp)
}
81100758:	e037883a 	mov	sp,fp
8110075c:	dfc00117 	ldw	ra,4(sp)
81100760:	df000017 	ldw	fp,0(sp)
81100764:	dec00204 	addi	sp,sp,8
81100768:	f800283a 	ret

8110076c <comm_int_flag_clear_buffer_empty>:

bool comm_int_flag_clear_buffer_empty(comm_channel_t *channel) {
8110076c:	defffb04 	addi	sp,sp,-20
81100770:	dfc00415 	stw	ra,16(sp)
81100774:	df000315 	stw	fp,12(sp)
81100778:	df000304 	addi	fp,sp,12
8110077c:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100780:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100784:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100788:	e0bfff17 	ldw	r2,-4(fp)
8110078c:	10000b26 	beq	r2,zero,811007bc <comm_int_flag_clear_buffer_empty+0x50>
		reg |= COMM_INT_BUFFER_EMPTY_FLAG_MASK;
81100790:	e0bffe17 	ldw	r2,-8(fp)
81100794:	10800054 	ori	r2,r2,1
81100798:	e0bffe15 	stw	r2,-8(fp)

		write_reg(channel->channel_address, COMM_INTERRUPT_FLAG_REG_OFFSET,
8110079c:	e0bfff17 	ldw	r2,-4(fp)
811007a0:	10800017 	ldw	r2,0(r2)
811007a4:	e1bffe17 	ldw	r6,-8(fp)
811007a8:	01400144 	movi	r5,5
811007ac:	1009883a 	mov	r4,r2
811007b0:	11011ec0 	call	811011ec <write_reg>
				reg);
		status = TRUE;
811007b4:	00800044 	movi	r2,1
811007b8:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
811007bc:	e0bffd17 	ldw	r2,-12(fp)
}
811007c0:	e037883a 	mov	sp,fp
811007c4:	dfc00117 	ldw	ra,4(sp)
811007c8:	df000017 	ldw	fp,0(sp)
811007cc:	dec00204 	addi	sp,sp,8
811007d0:	f800283a 	ret

811007d4 <comm_int_flag_buffer_empty>:

bool comm_int_flag_buffer_empty(comm_channel_t *channel, bool *flag) {
811007d4:	defffa04 	addi	sp,sp,-24
811007d8:	dfc00515 	stw	ra,20(sp)
811007dc:	df000415 	stw	fp,16(sp)
811007e0:	df000404 	addi	fp,sp,16
811007e4:	e13ffe15 	stw	r4,-8(fp)
811007e8:	e17fff15 	stw	r5,-4(fp)
	bool status = FALSE;
811007ec:	e03ffc15 	stw	zero,-16(fp)
	alt_u32 reg = 0;
811007f0:	e03ffd15 	stw	zero,-12(fp)

	if (channel != NULL) {
811007f4:	e0bffe17 	ldw	r2,-8(fp)
811007f8:	10001126 	beq	r2,zero,81100840 <comm_int_flag_buffer_empty+0x6c>
		reg = read_reg(channel->channel_address,
811007fc:	e0bffe17 	ldw	r2,-8(fp)
81100800:	10800017 	ldw	r2,0(r2)
81100804:	01400144 	movi	r5,5
81100808:	1009883a 	mov	r4,r2
8110080c:	11012380 	call	81101238 <read_reg>
81100810:	e0bffd15 	stw	r2,-12(fp)
		COMM_INTERRUPT_FLAG_REG_OFFSET);

		if (reg & COMM_INT_BUFFER_EMPTY_FLAG_MASK) {
81100814:	e0bffd17 	ldw	r2,-12(fp)
81100818:	1080004c 	andi	r2,r2,1
8110081c:	10000426 	beq	r2,zero,81100830 <comm_int_flag_buffer_empty+0x5c>
			*flag = TRUE;
81100820:	e0bfff17 	ldw	r2,-4(fp)
81100824:	00c00044 	movi	r3,1
81100828:	10c00015 	stw	r3,0(r2)
8110082c:	00000206 	br	81100838 <comm_int_flag_buffer_empty+0x64>
		} else {
			*flag = FALSE;
81100830:	e0bfff17 	ldw	r2,-4(fp)
81100834:	10000015 	stw	zero,0(r2)
		}

		status = TRUE;
81100838:	00800044 	movi	r2,1
8110083c:	e0bffc15 	stw	r2,-16(fp)
	}

	return status;
81100840:	e0bffc17 	ldw	r2,-16(fp)
}
81100844:	e037883a 	mov	sp,fp
81100848:	dfc00117 	ldw	ra,4(sp)
8110084c:	df000017 	ldw	fp,0(sp)
81100850:	dec00204 	addi	sp,sp,8
81100854:	f800283a 	ret

81100858 <comm_config_windowing>:

bool comm_config_windowing(comm_channel_t *channel) {
81100858:	defffb04 	addi	sp,sp,-20
8110085c:	dfc00415 	stw	ra,16(sp)
81100860:	df000315 	stw	fp,12(sp)
81100864:	df000304 	addi	fp,sp,12
81100868:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
8110086c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100870:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100874:	e0bfff17 	ldw	r2,-4(fp)
81100878:	10001926 	beq	r2,zero,811008e0 <comm_config_windowing+0x88>
		reg = read_reg(channel->channel_address,
8110087c:	e0bfff17 	ldw	r2,-4(fp)
81100880:	10800017 	ldw	r2,0(r2)
81100884:	000b883a 	mov	r5,zero
81100888:	1009883a 	mov	r4,r2
8110088c:	11012380 	call	81101238 <read_reg>
81100890:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_CONTROL_REG_OFFSET);

		if (channel->windowing_config.masking) {
81100894:	e0bfff17 	ldw	r2,-4(fp)
81100898:	10800117 	ldw	r2,4(r2)
8110089c:	10000426 	beq	r2,zero,811008b0 <comm_config_windowing+0x58>
			reg |= COMM_CONTROL_MASKING_EN_MASK;
811008a0:	e0bffe17 	ldw	r2,-8(fp)
811008a4:	10804014 	ori	r2,r2,256
811008a8:	e0bffe15 	stw	r2,-8(fp)
811008ac:	00000406 	br	811008c0 <comm_config_windowing+0x68>
		} else {
			reg &= (~COMM_CONTROL_MASKING_EN_MASK);
811008b0:	e0fffe17 	ldw	r3,-8(fp)
811008b4:	00bfbfc4 	movi	r2,-257
811008b8:	1884703a 	and	r2,r3,r2
811008bc:	e0bffe15 	stw	r2,-8(fp)
		}

		write_reg(channel->channel_address, COMM_WINDOWING_CONTROL_REG_OFFSET,
811008c0:	e0bfff17 	ldw	r2,-4(fp)
811008c4:	10800017 	ldw	r2,0(r2)
811008c8:	e1bffe17 	ldw	r6,-8(fp)
811008cc:	000b883a 	mov	r5,zero
811008d0:	1009883a 	mov	r4,r2
811008d4:	11011ec0 	call	811011ec <write_reg>
				reg);
		status = TRUE;
811008d8:	00800044 	movi	r2,1
811008dc:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
811008e0:	e0bffd17 	ldw	r2,-12(fp)
}
811008e4:	e037883a 	mov	sp,fp
811008e8:	dfc00117 	ldw	ra,4(sp)
811008ec:	df000017 	ldw	fp,0(sp)
811008f0:	dec00204 	addi	sp,sp,8
811008f4:	f800283a 	ret

811008f8 <comm_update_windowing>:

bool comm_update_windowing(comm_channel_t *channel) {
811008f8:	defffb04 	addi	sp,sp,-20
811008fc:	dfc00415 	stw	ra,16(sp)
81100900:	df000315 	stw	fp,12(sp)
81100904:	df000304 	addi	fp,sp,12
81100908:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
8110090c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100910:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100914:	e0bfff17 	ldw	r2,-4(fp)
81100918:	10001126 	beq	r2,zero,81100960 <comm_update_windowing+0x68>
		reg = read_reg(channel->channel_address,
8110091c:	e0bfff17 	ldw	r2,-4(fp)
81100920:	10800017 	ldw	r2,0(r2)
81100924:	000b883a 	mov	r5,zero
81100928:	1009883a 	mov	r4,r2
8110092c:	11012380 	call	81101238 <read_reg>
81100930:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_CONTROL_REG_OFFSET);

		if (reg & COMM_CONTROL_MASKING_EN_MASK) {
81100934:	e0bffe17 	ldw	r2,-8(fp)
81100938:	1080400c 	andi	r2,r2,256
8110093c:	10000426 	beq	r2,zero,81100950 <comm_update_windowing+0x58>
			channel->windowing_config.masking = TRUE;
81100940:	e0bfff17 	ldw	r2,-4(fp)
81100944:	00c00044 	movi	r3,1
81100948:	10c00115 	stw	r3,4(r2)
8110094c:	00000206 	br	81100958 <comm_update_windowing+0x60>
		} else {
			channel->windowing_config.masking = FALSE;
81100950:	e0bfff17 	ldw	r2,-4(fp)
81100954:	10000115 	stw	zero,4(r2)
		}

		status = TRUE;
81100958:	00800044 	movi	r2,1
8110095c:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100960:	e0bffd17 	ldw	r2,-12(fp)
}
81100964:	e037883a 	mov	sp,fp
81100968:	dfc00117 	ldw	ra,4(sp)
8110096c:	df000017 	ldw	fp,0(sp)
81100970:	dec00204 	addi	sp,sp,8
81100974:	f800283a 	ret

81100978 <comm_config_link>:

bool comm_config_link(comm_channel_t *channel) {
81100978:	defffb04 	addi	sp,sp,-20
8110097c:	dfc00415 	stw	ra,16(sp)
81100980:	df000315 	stw	fp,12(sp)
81100984:	df000304 	addi	fp,sp,12
81100988:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
8110098c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100990:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100994:	e0bfff17 	ldw	r2,-4(fp)
81100998:	10002f26 	beq	r2,zero,81100a58 <comm_config_link+0xe0>
		reg = read_reg(channel->channel_address,
8110099c:	e0bfff17 	ldw	r2,-4(fp)
811009a0:	10800017 	ldw	r2,0(r2)
811009a4:	000b883a 	mov	r5,zero
811009a8:	1009883a 	mov	r4,r2
811009ac:	11012380 	call	81101238 <read_reg>
811009b0:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_CONTROL_REG_OFFSET);

		if (channel->link_config.autostart) {
811009b4:	e0bfff17 	ldw	r2,-4(fp)
811009b8:	10800217 	ldw	r2,8(r2)
811009bc:	10000426 	beq	r2,zero,811009d0 <comm_config_link+0x58>
			reg |= COMM_CONTROL_LINK_AUTOSTART_MASK;
811009c0:	e0bffe17 	ldw	r2,-8(fp)
811009c4:	10800114 	ori	r2,r2,4
811009c8:	e0bffe15 	stw	r2,-8(fp)
811009cc:	00000406 	br	811009e0 <comm_config_link+0x68>
		} else {
			reg &= (~COMM_CONTROL_LINK_AUTOSTART_MASK);
811009d0:	e0fffe17 	ldw	r3,-8(fp)
811009d4:	00bffec4 	movi	r2,-5
811009d8:	1884703a 	and	r2,r3,r2
811009dc:	e0bffe15 	stw	r2,-8(fp)
		}
		if (channel->link_config.start) {
811009e0:	e0bfff17 	ldw	r2,-4(fp)
811009e4:	10800317 	ldw	r2,12(r2)
811009e8:	10000426 	beq	r2,zero,811009fc <comm_config_link+0x84>
			reg |= COMM_CONTROL_LINK_START_MASK;
811009ec:	e0bffe17 	ldw	r2,-8(fp)
811009f0:	10800094 	ori	r2,r2,2
811009f4:	e0bffe15 	stw	r2,-8(fp)
811009f8:	00000406 	br	81100a0c <comm_config_link+0x94>
		} else {
			reg &= (~COMM_CONTROL_LINK_START_MASK);
811009fc:	e0fffe17 	ldw	r3,-8(fp)
81100a00:	00bfff44 	movi	r2,-3
81100a04:	1884703a 	and	r2,r3,r2
81100a08:	e0bffe15 	stw	r2,-8(fp)
		}
		if (channel->link_config.disconnect) {
81100a0c:	e0bfff17 	ldw	r2,-4(fp)
81100a10:	10800417 	ldw	r2,16(r2)
81100a14:	10000426 	beq	r2,zero,81100a28 <comm_config_link+0xb0>
			reg |= COMM_CONTROL_LINK_DISCONNECT_MASK;
81100a18:	e0bffe17 	ldw	r2,-8(fp)
81100a1c:	10800054 	ori	r2,r2,1
81100a20:	e0bffe15 	stw	r2,-8(fp)
81100a24:	00000406 	br	81100a38 <comm_config_link+0xc0>
		} else {
			reg &= (~COMM_CONTROL_LINK_DISCONNECT_MASK);
81100a28:	e0fffe17 	ldw	r3,-8(fp)
81100a2c:	00bfff84 	movi	r2,-2
81100a30:	1884703a 	and	r2,r3,r2
81100a34:	e0bffe15 	stw	r2,-8(fp)
		}

		write_reg(channel->channel_address, COMM_WINDOWING_CONTROL_REG_OFFSET,
81100a38:	e0bfff17 	ldw	r2,-4(fp)
81100a3c:	10800017 	ldw	r2,0(r2)
81100a40:	e1bffe17 	ldw	r6,-8(fp)
81100a44:	000b883a 	mov	r5,zero
81100a48:	1009883a 	mov	r4,r2
81100a4c:	11011ec0 	call	811011ec <write_reg>
				reg);
		status = TRUE;
81100a50:	00800044 	movi	r2,1
81100a54:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100a58:	e0bffd17 	ldw	r2,-12(fp)
}
81100a5c:	e037883a 	mov	sp,fp
81100a60:	dfc00117 	ldw	ra,4(sp)
81100a64:	df000017 	ldw	fp,0(sp)
81100a68:	dec00204 	addi	sp,sp,8
81100a6c:	f800283a 	ret

81100a70 <comm_update_link>:

bool comm_update_link(comm_channel_t *channel) {
81100a70:	defffb04 	addi	sp,sp,-20
81100a74:	dfc00415 	stw	ra,16(sp)
81100a78:	df000315 	stw	fp,12(sp)
81100a7c:	df000304 	addi	fp,sp,12
81100a80:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100a84:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100a88:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100a8c:	e0bfff17 	ldw	r2,-4(fp)
81100a90:	10002326 	beq	r2,zero,81100b20 <comm_update_link+0xb0>
		reg = read_reg(channel->channel_address,
81100a94:	e0bfff17 	ldw	r2,-4(fp)
81100a98:	10800017 	ldw	r2,0(r2)
81100a9c:	000b883a 	mov	r5,zero
81100aa0:	1009883a 	mov	r4,r2
81100aa4:	11012380 	call	81101238 <read_reg>
81100aa8:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_CONTROL_REG_OFFSET);

		if (reg & COMM_CONTROL_LINK_AUTOSTART_MASK) {
81100aac:	e0bffe17 	ldw	r2,-8(fp)
81100ab0:	1080010c 	andi	r2,r2,4
81100ab4:	10000426 	beq	r2,zero,81100ac8 <comm_update_link+0x58>
			channel->link_config.autostart = TRUE;
81100ab8:	e0bfff17 	ldw	r2,-4(fp)
81100abc:	00c00044 	movi	r3,1
81100ac0:	10c00215 	stw	r3,8(r2)
81100ac4:	00000206 	br	81100ad0 <comm_update_link+0x60>
		} else {
			channel->link_config.autostart = FALSE;
81100ac8:	e0bfff17 	ldw	r2,-4(fp)
81100acc:	10000215 	stw	zero,8(r2)
		}
		if (reg & COMM_CONTROL_LINK_START_MASK) {
81100ad0:	e0bffe17 	ldw	r2,-8(fp)
81100ad4:	1080008c 	andi	r2,r2,2
81100ad8:	10000426 	beq	r2,zero,81100aec <comm_update_link+0x7c>
			channel->link_config.start = TRUE;
81100adc:	e0bfff17 	ldw	r2,-4(fp)
81100ae0:	00c00044 	movi	r3,1
81100ae4:	10c00315 	stw	r3,12(r2)
81100ae8:	00000206 	br	81100af4 <comm_update_link+0x84>
		} else {
			channel->link_config.start = FALSE;
81100aec:	e0bfff17 	ldw	r2,-4(fp)
81100af0:	10000315 	stw	zero,12(r2)
		}
		if (reg & COMM_CONTROL_LINK_DISCONNECT_MASK) {
81100af4:	e0bffe17 	ldw	r2,-8(fp)
81100af8:	1080004c 	andi	r2,r2,1
81100afc:	10000426 	beq	r2,zero,81100b10 <comm_update_link+0xa0>
			channel->link_config.disconnect = TRUE;
81100b00:	e0bfff17 	ldw	r2,-4(fp)
81100b04:	00c00044 	movi	r3,1
81100b08:	10c00415 	stw	r3,16(r2)
81100b0c:	00000206 	br	81100b18 <comm_update_link+0xa8>
		} else {
			channel->link_config.disconnect = FALSE;
81100b10:	e0bfff17 	ldw	r2,-4(fp)
81100b14:	10000415 	stw	zero,16(r2)
		}

		status = TRUE;
81100b18:	00800044 	movi	r2,1
81100b1c:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100b20:	e0bffd17 	ldw	r2,-12(fp)
}
81100b24:	e037883a 	mov	sp,fp
81100b28:	dfc00117 	ldw	ra,4(sp)
81100b2c:	df000017 	ldw	fp,0(sp)
81100b30:	dec00204 	addi	sp,sp,8
81100b34:	f800283a 	ret

81100b38 <comm_update_link_error>:

bool comm_update_link_error(comm_channel_t *channel) {
81100b38:	defffb04 	addi	sp,sp,-20
81100b3c:	dfc00415 	stw	ra,16(sp)
81100b40:	df000315 	stw	fp,12(sp)
81100b44:	df000304 	addi	fp,sp,12
81100b48:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100b4c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100b50:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100b54:	e0bfff17 	ldw	r2,-4(fp)
81100b58:	10002c26 	beq	r2,zero,81100c0c <comm_update_link_error+0xd4>
		reg = read_reg(channel->channel_address,
81100b5c:	e0bfff17 	ldw	r2,-4(fp)
81100b60:	10800017 	ldw	r2,0(r2)
81100b64:	01400044 	movi	r5,1
81100b68:	1009883a 	mov	r4,r2
81100b6c:	11012380 	call	81101238 <read_reg>
81100b70:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_STATUS_REG_OFFSET);

		if (reg & COMM_STATUS_LINK_DISC_ERR_MASK) {
81100b74:	e0bffe17 	ldw	r2,-8(fp)
81100b78:	1082000c 	andi	r2,r2,2048
81100b7c:	10000426 	beq	r2,zero,81100b90 <comm_update_link_error+0x58>
			channel->link_error.disconnect = TRUE;
81100b80:	e0bfff17 	ldw	r2,-4(fp)
81100b84:	00c00044 	movi	r3,1
81100b88:	10c00515 	stw	r3,20(r2)
81100b8c:	00000206 	br	81100b98 <comm_update_link_error+0x60>
		} else {
			channel->link_error.disconnect = FALSE;
81100b90:	e0bfff17 	ldw	r2,-4(fp)
81100b94:	10000515 	stw	zero,20(r2)
		}
		if (reg & COMM_STATUS_LINK_PAR_ERR_MASK) {
81100b98:	e0bffe17 	ldw	r2,-8(fp)
81100b9c:	1081000c 	andi	r2,r2,1024
81100ba0:	10000426 	beq	r2,zero,81100bb4 <comm_update_link_error+0x7c>
			channel->link_error.parity = TRUE;
81100ba4:	e0bfff17 	ldw	r2,-4(fp)
81100ba8:	00c00044 	movi	r3,1
81100bac:	10c00615 	stw	r3,24(r2)
81100bb0:	00000206 	br	81100bbc <comm_update_link_error+0x84>
		} else {
			channel->link_error.parity = FALSE;
81100bb4:	e0bfff17 	ldw	r2,-4(fp)
81100bb8:	10000615 	stw	zero,24(r2)
		}
		if (reg & COMM_STATUS_LINK_ESC_ERR_MASK) {
81100bbc:	e0bffe17 	ldw	r2,-8(fp)
81100bc0:	1080800c 	andi	r2,r2,512
81100bc4:	10000426 	beq	r2,zero,81100bd8 <comm_update_link_error+0xa0>
			channel->link_error.escape = TRUE;
81100bc8:	e0bfff17 	ldw	r2,-4(fp)
81100bcc:	00c00044 	movi	r3,1
81100bd0:	10c00715 	stw	r3,28(r2)
81100bd4:	00000206 	br	81100be0 <comm_update_link_error+0xa8>
		} else {
			channel->link_error.escape = FALSE;
81100bd8:	e0bfff17 	ldw	r2,-4(fp)
81100bdc:	10000715 	stw	zero,28(r2)
		}
		if (reg & COMM_STATUS_LINK_CRED_ERR_MASK) {
81100be0:	e0bffe17 	ldw	r2,-8(fp)
81100be4:	1080400c 	andi	r2,r2,256
81100be8:	10000426 	beq	r2,zero,81100bfc <comm_update_link_error+0xc4>
			channel->link_error.credit = TRUE;
81100bec:	e0bfff17 	ldw	r2,-4(fp)
81100bf0:	00c00044 	movi	r3,1
81100bf4:	10c00815 	stw	r3,32(r2)
81100bf8:	00000206 	br	81100c04 <comm_update_link_error+0xcc>
		} else {
			channel->link_error.credit = FALSE;
81100bfc:	e0bfff17 	ldw	r2,-4(fp)
81100c00:	10000815 	stw	zero,32(r2)
		}

		status = TRUE;
81100c04:	00800044 	movi	r2,1
81100c08:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100c0c:	e0bffd17 	ldw	r2,-12(fp)
}
81100c10:	e037883a 	mov	sp,fp
81100c14:	dfc00117 	ldw	ra,4(sp)
81100c18:	df000017 	ldw	fp,0(sp)
81100c1c:	dec00204 	addi	sp,sp,8
81100c20:	f800283a 	ret

81100c24 <comm_update_link_status>:

bool comm_update_link_status(comm_channel_t *channel) {
81100c24:	defffb04 	addi	sp,sp,-20
81100c28:	dfc00415 	stw	ra,16(sp)
81100c2c:	df000315 	stw	fp,12(sp)
81100c30:	df000304 	addi	fp,sp,12
81100c34:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100c38:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100c3c:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100c40:	e0bfff17 	ldw	r2,-4(fp)
81100c44:	10002326 	beq	r2,zero,81100cd4 <comm_update_link_status+0xb0>
		reg = read_reg(channel->channel_address,
81100c48:	e0bfff17 	ldw	r2,-4(fp)
81100c4c:	10800017 	ldw	r2,0(r2)
81100c50:	01400044 	movi	r5,1
81100c54:	1009883a 	mov	r4,r2
81100c58:	11012380 	call	81101238 <read_reg>
81100c5c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_STATUS_REG_OFFSET);

		if (reg & COMM_STATUS_LINK_STARTED_MASK) {
81100c60:	e0bffe17 	ldw	r2,-8(fp)
81100c64:	1080010c 	andi	r2,r2,4
81100c68:	10000426 	beq	r2,zero,81100c7c <comm_update_link_status+0x58>
			channel->link_status.started = TRUE;
81100c6c:	e0bfff17 	ldw	r2,-4(fp)
81100c70:	00c00044 	movi	r3,1
81100c74:	10c00915 	stw	r3,36(r2)
81100c78:	00000206 	br	81100c84 <comm_update_link_status+0x60>
		} else {
			channel->link_status.started = FALSE;
81100c7c:	e0bfff17 	ldw	r2,-4(fp)
81100c80:	10000915 	stw	zero,36(r2)
		}
		if (reg & COMM_STATUS_LINK_CONNECTING_MASK) {
81100c84:	e0bffe17 	ldw	r2,-8(fp)
81100c88:	1080008c 	andi	r2,r2,2
81100c8c:	10000426 	beq	r2,zero,81100ca0 <comm_update_link_status+0x7c>
			channel->link_status.connecting = TRUE;
81100c90:	e0bfff17 	ldw	r2,-4(fp)
81100c94:	00c00044 	movi	r3,1
81100c98:	10c00a15 	stw	r3,40(r2)
81100c9c:	00000206 	br	81100ca8 <comm_update_link_status+0x84>
		} else {
			channel->link_status.connecting = FALSE;
81100ca0:	e0bfff17 	ldw	r2,-4(fp)
81100ca4:	10000a15 	stw	zero,40(r2)
		}
		if (reg & COMM_STATUS_LINK_RUNNING_MASK) {
81100ca8:	e0bffe17 	ldw	r2,-8(fp)
81100cac:	1080004c 	andi	r2,r2,1
81100cb0:	10000426 	beq	r2,zero,81100cc4 <comm_update_link_status+0xa0>
			channel->link_status.running = TRUE;
81100cb4:	e0bfff17 	ldw	r2,-4(fp)
81100cb8:	00c00044 	movi	r3,1
81100cbc:	10c00b15 	stw	r3,44(r2)
81100cc0:	00000206 	br	81100ccc <comm_update_link_status+0xa8>
		} else {
			channel->link_status.running = FALSE;
81100cc4:	e0bfff17 	ldw	r2,-4(fp)
81100cc8:	10000b15 	stw	zero,44(r2)
		}

		status = TRUE;
81100ccc:	00800044 	movi	r2,1
81100cd0:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100cd4:	e0bffd17 	ldw	r2,-12(fp)
}
81100cd8:	e037883a 	mov	sp,fp
81100cdc:	dfc00117 	ldw	ra,4(sp)
81100ce0:	df000017 	ldw	fp,0(sp)
81100ce4:	dec00204 	addi	sp,sp,8
81100ce8:	f800283a 	ret

81100cec <comm_update_timecode_rx>:

bool comm_update_timecode_rx(comm_channel_t *channel) {
81100cec:	defffb04 	addi	sp,sp,-20
81100cf0:	dfc00415 	stw	ra,16(sp)
81100cf4:	df000315 	stw	fp,12(sp)
81100cf8:	df000304 	addi	fp,sp,12
81100cfc:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100d00:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100d04:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100d08:	e0bfff17 	ldw	r2,-4(fp)
81100d0c:	10001d26 	beq	r2,zero,81100d84 <comm_update_timecode_rx+0x98>
		reg = read_reg(channel->channel_address,
81100d10:	e0bfff17 	ldw	r2,-4(fp)
81100d14:	10800017 	ldw	r2,0(r2)
81100d18:	01400084 	movi	r5,2
81100d1c:	1009883a 	mov	r4,r2
81100d20:	11012380 	call	81101238 <read_reg>
81100d24:	e0bffe15 	stw	r2,-8(fp)
		COMM_TIMECODE_RX_REG_OFFSET);

		channel->timecode_rx.control = (alt_u8) ((reg
				& COMM_TIMECODE_RX_CONTROL_MASK) >> 7);
81100d28:	e0bffe17 	ldw	r2,-8(fp)
81100d2c:	1080600c 	andi	r2,r2,384
81100d30:	1004d1fa 	srli	r2,r2,7

	if (channel != NULL) {
		reg = read_reg(channel->channel_address,
		COMM_TIMECODE_RX_REG_OFFSET);

		channel->timecode_rx.control = (alt_u8) ((reg
81100d34:	1007883a 	mov	r3,r2
81100d38:	e0bfff17 	ldw	r2,-4(fp)
81100d3c:	10c00c05 	stb	r3,48(r2)
				& COMM_TIMECODE_RX_CONTROL_MASK) >> 7);
		channel->timecode_rx.counter = (alt_u8) ((reg
				& COMM_TIMECODE_RX_COUNTER_MASK) >> 1);
81100d40:	e0bffe17 	ldw	r2,-8(fp)
81100d44:	10801f8c 	andi	r2,r2,126
81100d48:	1004d07a 	srli	r2,r2,1
		reg = read_reg(channel->channel_address,
		COMM_TIMECODE_RX_REG_OFFSET);

		channel->timecode_rx.control = (alt_u8) ((reg
				& COMM_TIMECODE_RX_CONTROL_MASK) >> 7);
		channel->timecode_rx.counter = (alt_u8) ((reg
81100d4c:	1007883a 	mov	r3,r2
81100d50:	e0bfff17 	ldw	r2,-4(fp)
81100d54:	10c00c45 	stb	r3,49(r2)
				& COMM_TIMECODE_RX_COUNTER_MASK) >> 1);
		if (reg & COMM_TIMECODE_RX_RECEIVED_MASK) {
81100d58:	e0bffe17 	ldw	r2,-8(fp)
81100d5c:	1080004c 	andi	r2,r2,1
81100d60:	10000426 	beq	r2,zero,81100d74 <comm_update_timecode_rx+0x88>
			channel->timecode_rx.received = TRUE;
81100d64:	e0bfff17 	ldw	r2,-4(fp)
81100d68:	00c00044 	movi	r3,1
81100d6c:	10c00d15 	stw	r3,52(r2)
81100d70:	00000206 	br	81100d7c <comm_update_timecode_rx+0x90>
		} else {
			channel->timecode_rx.received = FALSE;
81100d74:	e0bfff17 	ldw	r2,-4(fp)
81100d78:	10000d15 	stw	zero,52(r2)
		}

		status = TRUE;
81100d7c:	00800044 	movi	r2,1
81100d80:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100d84:	e0bffd17 	ldw	r2,-12(fp)
}
81100d88:	e037883a 	mov	sp,fp
81100d8c:	dfc00117 	ldw	ra,4(sp)
81100d90:	df000017 	ldw	fp,0(sp)
81100d94:	dec00204 	addi	sp,sp,8
81100d98:	f800283a 	ret

81100d9c <comm_clear_timecode_rx_received>:

bool comm_clear_timecode_rx_received(comm_channel_t *channel) {
81100d9c:	defffb04 	addi	sp,sp,-20
81100da0:	dfc00415 	stw	ra,16(sp)
81100da4:	df000315 	stw	fp,12(sp)
81100da8:	df000304 	addi	fp,sp,12
81100dac:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100db0:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100db4:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100db8:	e0bfff17 	ldw	r2,-4(fp)
81100dbc:	10000a26 	beq	r2,zero,81100de8 <comm_clear_timecode_rx_received+0x4c>
		reg = COMM_TIMECODE_RX_RECEIVED_MASK;
81100dc0:	00800044 	movi	r2,1
81100dc4:	e0bffe15 	stw	r2,-8(fp)

		write_reg(channel->channel_address, COMM_TIMECODE_RX_REG_OFFSET, reg);
81100dc8:	e0bfff17 	ldw	r2,-4(fp)
81100dcc:	10800017 	ldw	r2,0(r2)
81100dd0:	e1bffe17 	ldw	r6,-8(fp)
81100dd4:	01400084 	movi	r5,2
81100dd8:	1009883a 	mov	r4,r2
81100ddc:	11011ec0 	call	811011ec <write_reg>
		status = TRUE;
81100de0:	00800044 	movi	r2,1
81100de4:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100de8:	e0bffd17 	ldw	r2,-12(fp)
}
81100dec:	e037883a 	mov	sp,fp
81100df0:	dfc00117 	ldw	ra,4(sp)
81100df4:	df000017 	ldw	fp,0(sp)
81100df8:	dec00204 	addi	sp,sp,8
81100dfc:	f800283a 	ret

81100e00 <comm_send_timecode_tx>:

bool comm_send_timecode_tx(comm_channel_t *channel) {
81100e00:	defffb04 	addi	sp,sp,-20
81100e04:	dfc00415 	stw	ra,16(sp)
81100e08:	df000315 	stw	fp,12(sp)
81100e0c:	df000304 	addi	fp,sp,12
81100e10:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100e14:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100e18:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100e1c:	e0bfff17 	ldw	r2,-4(fp)
81100e20:	10002326 	beq	r2,zero,81100eb0 <comm_send_timecode_tx+0xb0>
		reg |= (alt_u32) (channel->timecode_tx.control << 7);
81100e24:	e0bfff17 	ldw	r2,-4(fp)
81100e28:	10800e03 	ldbu	r2,56(r2)
81100e2c:	10803fcc 	andi	r2,r2,255
81100e30:	100491fa 	slli	r2,r2,7
81100e34:	1007883a 	mov	r3,r2
81100e38:	e0bffe17 	ldw	r2,-8(fp)
81100e3c:	10c4b03a 	or	r2,r2,r3
81100e40:	e0bffe15 	stw	r2,-8(fp)
		reg |= (alt_u32) (channel->timecode_tx.counter << 1);
81100e44:	e0bfff17 	ldw	r2,-4(fp)
81100e48:	10800e43 	ldbu	r2,57(r2)
81100e4c:	10803fcc 	andi	r2,r2,255
81100e50:	1085883a 	add	r2,r2,r2
81100e54:	1007883a 	mov	r3,r2
81100e58:	e0bffe17 	ldw	r2,-8(fp)
81100e5c:	10c4b03a 	or	r2,r2,r3
81100e60:	e0bffe15 	stw	r2,-8(fp)
		if (channel->timecode_tx.send) {
81100e64:	e0bfff17 	ldw	r2,-4(fp)
81100e68:	10800f17 	ldw	r2,60(r2)
81100e6c:	10000426 	beq	r2,zero,81100e80 <comm_send_timecode_tx+0x80>
			reg |= COMM_TIMECODE_TX_SEND_MASK;
81100e70:	e0bffe17 	ldw	r2,-8(fp)
81100e74:	10800054 	ori	r2,r2,1
81100e78:	e0bffe15 	stw	r2,-8(fp)
81100e7c:	00000406 	br	81100e90 <comm_send_timecode_tx+0x90>
		} else {
			reg &= (~COMM_TIMECODE_TX_SEND_MASK);
81100e80:	e0fffe17 	ldw	r3,-8(fp)
81100e84:	00bfff84 	movi	r2,-2
81100e88:	1884703a 	and	r2,r3,r2
81100e8c:	e0bffe15 	stw	r2,-8(fp)
		}

		write_reg(channel->channel_address, COMM_TIMECODE_TX_REG_OFFSET, reg);
81100e90:	e0bfff17 	ldw	r2,-4(fp)
81100e94:	10800017 	ldw	r2,0(r2)
81100e98:	e1bffe17 	ldw	r6,-8(fp)
81100e9c:	014000c4 	movi	r5,3
81100ea0:	1009883a 	mov	r4,r2
81100ea4:	11011ec0 	call	811011ec <write_reg>
		status = TRUE;
81100ea8:	00800044 	movi	r2,1
81100eac:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100eb0:	e0bffd17 	ldw	r2,-12(fp)
}
81100eb4:	e037883a 	mov	sp,fp
81100eb8:	dfc00117 	ldw	ra,4(sp)
81100ebc:	df000017 	ldw	fp,0(sp)
81100ec0:	dec00204 	addi	sp,sp,8
81100ec4:	f800283a 	ret

81100ec8 <comm_update_timecode_tx>:

bool comm_update_timecode_tx(comm_channel_t *channel) {
81100ec8:	defffb04 	addi	sp,sp,-20
81100ecc:	dfc00415 	stw	ra,16(sp)
81100ed0:	df000315 	stw	fp,12(sp)
81100ed4:	df000304 	addi	fp,sp,12
81100ed8:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100edc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100ee0:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100ee4:	e0bfff17 	ldw	r2,-4(fp)
81100ee8:	10001d26 	beq	r2,zero,81100f60 <comm_update_timecode_tx+0x98>
		reg = read_reg(channel->channel_address,
81100eec:	e0bfff17 	ldw	r2,-4(fp)
81100ef0:	10800017 	ldw	r2,0(r2)
81100ef4:	014000c4 	movi	r5,3
81100ef8:	1009883a 	mov	r4,r2
81100efc:	11012380 	call	81101238 <read_reg>
81100f00:	e0bffe15 	stw	r2,-8(fp)
		COMM_TIMECODE_TX_REG_OFFSET);

		channel->timecode_tx.control = (alt_u8) ((reg
				& COMM_TIMECODE_TX_CONTROL_MASK) >> 7);
81100f04:	e0bffe17 	ldw	r2,-8(fp)
81100f08:	1080600c 	andi	r2,r2,384
81100f0c:	1004d1fa 	srli	r2,r2,7

	if (channel != NULL) {
		reg = read_reg(channel->channel_address,
		COMM_TIMECODE_TX_REG_OFFSET);

		channel->timecode_tx.control = (alt_u8) ((reg
81100f10:	1007883a 	mov	r3,r2
81100f14:	e0bfff17 	ldw	r2,-4(fp)
81100f18:	10c00e05 	stb	r3,56(r2)
				& COMM_TIMECODE_TX_CONTROL_MASK) >> 7);
		channel->timecode_tx.counter = (alt_u8) ((reg
				& COMM_TIMECODE_TX_COUNTER_MASK) >> 1);
81100f1c:	e0bffe17 	ldw	r2,-8(fp)
81100f20:	10801f8c 	andi	r2,r2,126
81100f24:	1004d07a 	srli	r2,r2,1
		reg = read_reg(channel->channel_address,
		COMM_TIMECODE_TX_REG_OFFSET);

		channel->timecode_tx.control = (alt_u8) ((reg
				& COMM_TIMECODE_TX_CONTROL_MASK) >> 7);
		channel->timecode_tx.counter = (alt_u8) ((reg
81100f28:	1007883a 	mov	r3,r2
81100f2c:	e0bfff17 	ldw	r2,-4(fp)
81100f30:	10c00e45 	stb	r3,57(r2)
				& COMM_TIMECODE_TX_COUNTER_MASK) >> 1);
		if (reg & COMM_TIMECODE_TX_SEND_MASK) {
81100f34:	e0bffe17 	ldw	r2,-8(fp)
81100f38:	1080004c 	andi	r2,r2,1
81100f3c:	10000426 	beq	r2,zero,81100f50 <comm_update_timecode_tx+0x88>
			channel->timecode_tx.send = TRUE;
81100f40:	e0bfff17 	ldw	r2,-4(fp)
81100f44:	00c00044 	movi	r3,1
81100f48:	10c00f15 	stw	r3,60(r2)
81100f4c:	00000206 	br	81100f58 <comm_update_timecode_tx+0x90>
		} else {
			channel->timecode_tx.send = FALSE;
81100f50:	e0bfff17 	ldw	r2,-4(fp)
81100f54:	10000f15 	stw	zero,60(r2)
		}

		status = TRUE;
81100f58:	00800044 	movi	r2,1
81100f5c:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81100f60:	e0bffd17 	ldw	r2,-12(fp)
}
81100f64:	e037883a 	mov	sp,fp
81100f68:	dfc00117 	ldw	ra,4(sp)
81100f6c:	df000017 	ldw	fp,0(sp)
81100f70:	dec00204 	addi	sp,sp,8
81100f74:	f800283a 	ret

81100f78 <comm_update_buffers_status>:

bool comm_update_buffers_status(comm_channel_t *channel) {
81100f78:	defffb04 	addi	sp,sp,-20
81100f7c:	dfc00415 	stw	ra,16(sp)
81100f80:	df000315 	stw	fp,12(sp)
81100f84:	df000304 	addi	fp,sp,12
81100f88:	e13fff15 	stw	r4,-4(fp)
	bool status = FALSE;
81100f8c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg = 0;
81100f90:	e03ffe15 	stw	zero,-8(fp)

	if (channel != NULL) {
81100f94:	e0bfff17 	ldw	r2,-4(fp)
81100f98:	10001a26 	beq	r2,zero,81101004 <comm_update_buffers_status+0x8c>
		reg = read_reg(channel->channel_address,
81100f9c:	e0bfff17 	ldw	r2,-4(fp)
81100fa0:	10800017 	ldw	r2,0(r2)
81100fa4:	01400184 	movi	r5,6
81100fa8:	1009883a 	mov	r4,r2
81100fac:	11012380 	call	81101238 <read_reg>
81100fb0:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOWING_BUFFER_REG_OFFSET);

		if (reg & COMM_BUFFER_STATUS_LEFT_BUFFER_EMPTY_MASK) {
81100fb4:	e0bffe17 	ldw	r2,-8(fp)
81100fb8:	1080400c 	andi	r2,r2,256
81100fbc:	10000426 	beq	r2,zero,81100fd0 <comm_update_buffers_status+0x58>
			channel->buffer_status.left_buffer_empty = TRUE;
81100fc0:	e0bfff17 	ldw	r2,-4(fp)
81100fc4:	00c00044 	movi	r3,1
81100fc8:	10c01315 	stw	r3,76(r2)
81100fcc:	00000206 	br	81100fd8 <comm_update_buffers_status+0x60>
		} else {
			channel->buffer_status.left_buffer_empty = FALSE;
81100fd0:	e0bfff17 	ldw	r2,-4(fp)
81100fd4:	10001315 	stw	zero,76(r2)
		}
		if (reg & COMM_BUFFER_STATUS_RIGHT_BUFFER_EMPTY_MASK) {
81100fd8:	e0bffe17 	ldw	r2,-8(fp)
81100fdc:	1080004c 	andi	r2,r2,1
81100fe0:	10000426 	beq	r2,zero,81100ff4 <comm_update_buffers_status+0x7c>
			channel->buffer_status.right_buffer_empty = TRUE;
81100fe4:	e0bfff17 	ldw	r2,-4(fp)
81100fe8:	00c00044 	movi	r3,1
81100fec:	10c01415 	stw	r3,80(r2)
81100ff0:	00000206 	br	81100ffc <comm_update_buffers_status+0x84>
		} else {
			channel->buffer_status.right_buffer_empty = FALSE;
81100ff4:	e0bfff17 	ldw	r2,-4(fp)
81100ff8:	10001415 	stw	zero,80(r2)
		}

		status = TRUE;
81100ffc:	00800044 	movi	r2,1
81101000:	e0bffd15 	stw	r2,-12(fp)
	}

	return status;
81101004:	e0bffd17 	ldw	r2,-12(fp)
}
81101008:	e037883a 	mov	sp,fp
8110100c:	dfc00117 	ldw	ra,4(sp)
81101010:	df000017 	ldw	fp,0(sp)
81101014:	dec00204 	addi	sp,sp,8
81101018:	f800283a 	ret

8110101c <comm_init_channel>:

bool comm_init_channel(comm_channel_t *channel, alt_u8 spw_channel) {
8110101c:	defffb04 	addi	sp,sp,-20
81101020:	dfc00415 	stw	ra,16(sp)
81101024:	df000315 	stw	fp,12(sp)
81101028:	df000304 	addi	fp,sp,12
8110102c:	e13ffe15 	stw	r4,-8(fp)
81101030:	2805883a 	mov	r2,r5
81101034:	e0bfff05 	stb	r2,-4(fp)
	bool status = FALSE;
81101038:	e03ffd15 	stw	zero,-12(fp)

	if (channel != NULL) {
8110103c:	e0bffe17 	ldw	r2,-8(fp)
81101040:	10006426 	beq	r2,zero,811011d4 <comm_init_channel+0x1b8>
		status = TRUE;
81101044:	00800044 	movi	r2,1
81101048:	e0bffd15 	stw	r2,-12(fp)

		switch (spw_channel) {
8110104c:	e0bfff03 	ldbu	r2,-4(fp)
81101050:	10c00268 	cmpgeui	r3,r2,9
81101054:	1800371e 	bne	r3,zero,81101134 <comm_init_channel+0x118>
81101058:	100690ba 	slli	r3,r2,2
8110105c:	00a04434 	movhi	r2,33040
81101060:	10841c04 	addi	r2,r2,4208
81101064:	1885883a 	add	r2,r3,r2
81101068:	10800017 	ldw	r2,0(r2)
8110106c:	1000683a 	jmp	r2
81101070:	81101134 	orhi	r4,r16,16452
81101074:	81101094 	ori	r4,r16,16450
81101078:	811010a8 	cmpgeui	r4,r16,16450
8110107c:	811010bc 	xorhi	r4,r16,16450
81101080:	811010d0 	cmplti	r4,r16,16451
81101084:	811010e4 	muli	r4,r16,16451
81101088:	811010f8 	rdprs	r4,r16,16451
8110108c:	8110110c 	andi	r4,r16,16452
81101090:	81101120 	cmpeqi	r4,r16,16452
		case spacewire_channel_a:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_A_BASE_ADDR;
81101094:	e0fffe17 	ldw	r3,-8(fp)
81101098:	00a04834 	movhi	r2,33056
8110109c:	108b0004 	addi	r2,r2,11264
811010a0:	18800015 	stw	r2,0(r3)
			break;
811010a4:	00002506 	br	8110113c <comm_init_channel+0x120>
		case spacewire_channel_b:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_B_BASE_ADDR;
811010a8:	e0fffe17 	ldw	r3,-8(fp)
811010ac:	00a04834 	movhi	r2,33056
811010b0:	108a0004 	addi	r2,r2,10240
811010b4:	18800015 	stw	r2,0(r3)
			break;
811010b8:	00002006 	br	8110113c <comm_init_channel+0x120>
		case spacewire_channel_c:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_C_BASE_ADDR;
811010bc:	e0fffe17 	ldw	r3,-8(fp)
811010c0:	00a04834 	movhi	r2,33056
811010c4:	10890004 	addi	r2,r2,9216
811010c8:	18800015 	stw	r2,0(r3)
			break;
811010cc:	00001b06 	br	8110113c <comm_init_channel+0x120>
		case spacewire_channel_d:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_D_BASE_ADDR;
811010d0:	e0fffe17 	ldw	r3,-8(fp)
811010d4:	00a04834 	movhi	r2,33056
811010d8:	10880004 	addi	r2,r2,8192
811010dc:	18800015 	stw	r2,0(r3)
			break;
811010e0:	00001606 	br	8110113c <comm_init_channel+0x120>
		case spacewire_channel_e:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_E_BASE_ADDR;
811010e4:	e0fffe17 	ldw	r3,-8(fp)
811010e8:	00a04834 	movhi	r2,33056
811010ec:	10870004 	addi	r2,r2,7168
811010f0:	18800015 	stw	r2,0(r3)
			break;
811010f4:	00001106 	br	8110113c <comm_init_channel+0x120>
		case spacewire_channel_f:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_F_BASE_ADDR;
811010f8:	e0fffe17 	ldw	r3,-8(fp)
811010fc:	00a04834 	movhi	r2,33056
81101100:	10860004 	addi	r2,r2,6144
81101104:	18800015 	stw	r2,0(r3)
			break;
81101108:	00000c06 	br	8110113c <comm_init_channel+0x120>
		case spacewire_channel_g:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_G_BASE_ADDR;
8110110c:	e0fffe17 	ldw	r3,-8(fp)
81101110:	00a04834 	movhi	r2,33056
81101114:	10850004 	addi	r2,r2,5120
81101118:	18800015 	stw	r2,0(r3)
			break;
8110111c:	00000706 	br	8110113c <comm_init_channel+0x120>
		case spacewire_channel_h:
			channel->channel_address = (alt_u32 *) COMM_CHANNEL_H_BASE_ADDR;
81101120:	e0fffe17 	ldw	r3,-8(fp)
81101124:	00a04834 	movhi	r2,33056
81101128:	10840004 	addi	r2,r2,4096
8110112c:	18800015 	stw	r2,0(r3)
			break;
81101130:	00000206 	br	8110113c <comm_init_channel+0x120>
		default:
			status = FALSE;
81101134:	e03ffd15 	stw	zero,-12(fp)
			break;
81101138:	0001883a 	nop
		}

		if (status) {
8110113c:	e0bffd17 	ldw	r2,-12(fp)
81101140:	10002426 	beq	r2,zero,811011d4 <comm_init_channel+0x1b8>
			if (!comm_update_windowing(channel)) {
81101144:	e13ffe17 	ldw	r4,-8(fp)
81101148:	11008f80 	call	811008f8 <comm_update_windowing>
8110114c:	1000011e 	bne	r2,zero,81101154 <comm_init_channel+0x138>
				status = FALSE;
81101150:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_link(channel)) {
81101154:	e13ffe17 	ldw	r4,-8(fp)
81101158:	1100a700 	call	81100a70 <comm_update_link>
8110115c:	1000011e 	bne	r2,zero,81101164 <comm_init_channel+0x148>
				status = FALSE;
81101160:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_link_error(channel)) {
81101164:	e13ffe17 	ldw	r4,-8(fp)
81101168:	1100b380 	call	81100b38 <comm_update_link_error>
8110116c:	1000011e 	bne	r2,zero,81101174 <comm_init_channel+0x158>
				status = FALSE;
81101170:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_link_status(channel)) {
81101174:	e13ffe17 	ldw	r4,-8(fp)
81101178:	1100c240 	call	81100c24 <comm_update_link_status>
8110117c:	1000011e 	bne	r2,zero,81101184 <comm_init_channel+0x168>
				status = FALSE;
81101180:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_timecode_rx(channel)) {
81101184:	e13ffe17 	ldw	r4,-8(fp)
81101188:	1100cec0 	call	81100cec <comm_update_timecode_rx>
8110118c:	1000011e 	bne	r2,zero,81101194 <comm_init_channel+0x178>
				status = FALSE;
81101190:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_timecode_tx(channel)) {
81101194:	e13ffe17 	ldw	r4,-8(fp)
81101198:	1100ec80 	call	81100ec8 <comm_update_timecode_tx>
8110119c:	1000011e 	bne	r2,zero,811011a4 <comm_init_channel+0x188>
				status = FALSE;
811011a0:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_int_control(channel)) {
811011a4:	e13ffe17 	ldw	r4,-8(fp)
811011a8:	11006480 	call	81100648 <comm_update_int_control>
811011ac:	1000011e 	bne	r2,zero,811011b4 <comm_init_channel+0x198>
				status = FALSE;
811011b0:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_int_flags(channel)) {
811011b4:	e13ffe17 	ldw	r4,-8(fp)
811011b8:	11006ec0 	call	811006ec <comm_update_int_flags>
811011bc:	1000011e 	bne	r2,zero,811011c4 <comm_init_channel+0x1a8>
				status = FALSE;
811011c0:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!comm_update_buffers_status(channel)) {
811011c4:	e13ffe17 	ldw	r4,-8(fp)
811011c8:	1100f780 	call	81100f78 <comm_update_buffers_status>
811011cc:	1000011e 	bne	r2,zero,811011d4 <comm_init_channel+0x1b8>
				status = FALSE;
811011d0:	e03ffd15 	stw	zero,-12(fp)
			}
		}
	}
	return status;
811011d4:	e0bffd17 	ldw	r2,-12(fp)
}
811011d8:	e037883a 	mov	sp,fp
811011dc:	dfc00117 	ldw	ra,4(sp)
811011e0:	df000017 	ldw	fp,0(sp)
811011e4:	dec00204 	addi	sp,sp,8
811011e8:	f800283a 	ret

811011ec <write_reg>:
//! [public functions]

//! [private functions]
static bool write_reg(alt_u32 *address, alt_u32 offset, alt_u32 value) {
811011ec:	defffc04 	addi	sp,sp,-16
811011f0:	df000315 	stw	fp,12(sp)
811011f4:	df000304 	addi	fp,sp,12
811011f8:	e13ffd15 	stw	r4,-12(fp)
811011fc:	e17ffe15 	stw	r5,-8(fp)
81101200:	e1bfff15 	stw	r6,-4(fp)
	*(address + offset) = value;
81101204:	e0bffe17 	ldw	r2,-8(fp)
81101208:	1085883a 	add	r2,r2,r2
8110120c:	1085883a 	add	r2,r2,r2
81101210:	1007883a 	mov	r3,r2
81101214:	e0bffd17 	ldw	r2,-12(fp)
81101218:	10c5883a 	add	r2,r2,r3
8110121c:	e0ffff17 	ldw	r3,-4(fp)
81101220:	10c00015 	stw	r3,0(r2)
	return TRUE;
81101224:	00800044 	movi	r2,1
}
81101228:	e037883a 	mov	sp,fp
8110122c:	df000017 	ldw	fp,0(sp)
81101230:	dec00104 	addi	sp,sp,4
81101234:	f800283a 	ret

81101238 <read_reg>:

static alt_u32 read_reg(alt_u32 *address, alt_u32 offset) {
81101238:	defffc04 	addi	sp,sp,-16
8110123c:	df000315 	stw	fp,12(sp)
81101240:	df000304 	addi	fp,sp,12
81101244:	e13ffe15 	stw	r4,-8(fp)
81101248:	e17fff15 	stw	r5,-4(fp)
	alt_u32 value;

	value = *(address + offset);
8110124c:	e0bfff17 	ldw	r2,-4(fp)
81101250:	1085883a 	add	r2,r2,r2
81101254:	1085883a 	add	r2,r2,r2
81101258:	1007883a 	mov	r3,r2
8110125c:	e0bffe17 	ldw	r2,-8(fp)
81101260:	10c5883a 	add	r2,r2,r3
81101264:	10800017 	ldw	r2,0(r2)
81101268:	e0bffd15 	stw	r2,-12(fp)
	return value;
8110126c:	e0bffd17 	ldw	r2,-12(fp)
}
81101270:	e037883a 	mov	sp,fp
81101274:	df000017 	ldw	fp,0(sp)
81101278:	dec00104 	addi	sp,sp,4
8110127c:	f800283a 	ret

81101280 <fee_init_m1_dma>:
#include "fee_buffers.h"

alt_msgdma_dev *dma_m1_dev = NULL;
alt_msgdma_dev *dma_m2_dev = NULL;

bool fee_init_m1_dma(void) {
81101280:	defffc04 	addi	sp,sp,-16
81101284:	dfc00315 	stw	ra,12(sp)
81101288:	df000215 	stw	fp,8(sp)
8110128c:	df000204 	addi	fp,sp,8
	bool status = TRUE;
81101290:	00800044 	movi	r2,1
81101294:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 counter = 0;
81101298:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	dma_m1_dev = alt_msgdma_open((char *) FEE_DMA_M1_NAME);
8110129c:	012044b4 	movhi	r4,33042
811012a0:	21346004 	addi	r4,r4,-11904
811012a4:	111bee80 	call	8111bee8 <alt_msgdma_open>
811012a8:	d0a02415 	stw	r2,-32624(gp)

	// check if the device was opened
	if (dma_m1_dev == NULL) {
811012ac:	d0a02417 	ldw	r2,-32624(gp)
811012b0:	1000021e 	bne	r2,zero,811012bc <fee_init_m1_dma+0x3c>
		// device not opened
		status = FALSE;
811012b4:	e03ffe15 	stw	zero,-8(fp)
811012b8:	00001506 	br	81101310 <fee_init_m1_dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m1_dev->csr_base,
811012bc:	d0a02417 	ldw	r2,-32624(gp)
811012c0:	10800317 	ldw	r2,12(r2)
811012c4:	10800104 	addi	r2,r2,4
811012c8:	00c00084 	movi	r3,2
811012cc:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m1_dev->csr_base)
811012d0:	00000a06 	br	811012fc <fee_init_m1_dma+0x7c>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
811012d4:	01000044 	movi	r4,1
811012d8:	1118c880 	call	81118c88 <usleep>
			counter++;
811012dc:	e0bfff0b 	ldhu	r2,-4(fp)
811012e0:	10800044 	addi	r2,r2,1
811012e4:	e0bfff0d 	sth	r2,-4(fp)
			if (counter >= 5000) { //wait at most 5ms for the device to be reseted
811012e8:	e0bfff0b 	ldhu	r2,-4(fp)
811012ec:	1084e230 	cmpltui	r2,r2,5000
811012f0:	1000021e 	bne	r2,zero,811012fc <fee_init_m1_dma+0x7c>
				status = FALSE;
811012f4:	e03ffe15 	stw	zero,-8(fp)
				break;
811012f8:	00000506 	br	81101310 <fee_init_m1_dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m1_dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m1_dev->csr_base)
811012fc:	d0a02417 	ldw	r2,-32624(gp)
81101300:	10800317 	ldw	r2,12(r2)
81101304:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81101308:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m1_dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m1_dev->csr_base)
8110130c:	103ff11e 	bne	r2,zero,811012d4 <__reset+0xfb0e12d4>
				break;
			}
		}
	}

	return status;
81101310:	e0bffe17 	ldw	r2,-8(fp)
}
81101314:	e037883a 	mov	sp,fp
81101318:	dfc00117 	ldw	ra,4(sp)
8110131c:	df000017 	ldw	fp,0(sp)
81101320:	dec00204 	addi	sp,sp,8
81101324:	f800283a 	ret

81101328 <fee_init_m2_dma>:

bool fee_init_m2_dma(void) {
81101328:	defffc04 	addi	sp,sp,-16
8110132c:	dfc00315 	stw	ra,12(sp)
81101330:	df000215 	stw	fp,8(sp)
81101334:	df000204 	addi	fp,sp,8
	bool status = TRUE;
81101338:	00800044 	movi	r2,1
8110133c:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 counter = 0;
81101340:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	dma_m2_dev = alt_msgdma_open((char *) FEE_DMA_M2_NAME);
81101344:	012044b4 	movhi	r4,33042
81101348:	21346504 	addi	r4,r4,-11884
8110134c:	111bee80 	call	8111bee8 <alt_msgdma_open>
81101350:	d0a02515 	stw	r2,-32620(gp)

	// check if the device was opened
	if (dma_m2_dev == NULL) {
81101354:	d0a02517 	ldw	r2,-32620(gp)
81101358:	1000021e 	bne	r2,zero,81101364 <fee_init_m2_dma+0x3c>
		// device not opened
		status = FALSE;
8110135c:	e03ffe15 	stw	zero,-8(fp)
81101360:	00001506 	br	811013b8 <fee_init_m2_dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m2_dev->csr_base,
81101364:	d0a02517 	ldw	r2,-32620(gp)
81101368:	10800317 	ldw	r2,12(r2)
8110136c:	10800104 	addi	r2,r2,4
81101370:	00c00084 	movi	r3,2
81101374:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m2_dev->csr_base)
81101378:	00000a06 	br	811013a4 <fee_init_m2_dma+0x7c>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
8110137c:	01000044 	movi	r4,1
81101380:	1118c880 	call	81118c88 <usleep>
			counter++;
81101384:	e0bfff0b 	ldhu	r2,-4(fp)
81101388:	10800044 	addi	r2,r2,1
8110138c:	e0bfff0d 	sth	r2,-4(fp)
			if (counter >= 5000) { //wait at most 5ms for the device to be reseted
81101390:	e0bfff0b 	ldhu	r2,-4(fp)
81101394:	1084e230 	cmpltui	r2,r2,5000
81101398:	1000021e 	bne	r2,zero,811013a4 <fee_init_m2_dma+0x7c>
				status = FALSE;
8110139c:	e03ffe15 	stw	zero,-8(fp)
				break;
811013a0:	00000506 	br	811013b8 <fee_init_m2_dma+0x90>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m2_dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m2_dev->csr_base)
811013a4:	d0a02517 	ldw	r2,-32620(gp)
811013a8:	10800317 	ldw	r2,12(r2)
811013ac:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
811013b0:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dma_m2_dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(dma_m2_dev->csr_base)
811013b4:	103ff11e 	bne	r2,zero,8110137c <__reset+0xfb0e137c>
				break;
			}
		}
	}

	return status;
811013b8:	e0bffe17 	ldw	r2,-8(fp)
}
811013bc:	e037883a 	mov	sp,fp
811013c0:	dfc00117 	ldw	ra,4(sp)
811013c4:	df000017 	ldw	fp,0(sp)
811013c8:	dec00204 	addi	sp,sp,8
811013cc:	f800283a 	ret

811013d0 <fee_dma_m1_transfer>:

bool fee_dma_m1_transfer(alt_u32 *ddr_initial_address, alt_u16 size_in_blocks,
		alt_u8 buffer_side, alt_u8 channel_buffer_id) {
811013d0:	deffe904 	addi	sp,sp,-92
811013d4:	dfc01615 	stw	ra,88(sp)
811013d8:	df001515 	stw	fp,84(sp)
811013dc:	dc001415 	stw	r16,80(sp)
811013e0:	df001504 	addi	fp,sp,84
811013e4:	e13ffb15 	stw	r4,-20(fp)
811013e8:	2809883a 	mov	r4,r5
811013ec:	3007883a 	mov	r3,r6
811013f0:	3805883a 	mov	r2,r7
811013f4:	e13ffc0d 	sth	r4,-16(fp)
811013f8:	e0fffd05 	stb	r3,-12(fp)
811013fc:	e0bffe05 	stb	r2,-8(fp)
81101400:	defff004 	addi	sp,sp,-64
81101404:	d8800904 	addi	r2,sp,36
81101408:	108007c4 	addi	r2,r2,31
8110140c:	1004d17a 	srli	r2,r2,5
81101410:	1020917a 	slli	r16,r2,5
	bool status = TRUE;
81101414:	00800044 	movi	r2,1
81101418:	e0bff415 	stw	r2,-48(fp)
	alt_u16 cnt = 0;
8110141c:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor dma_extended_descriptor;

	alt_u32 dest_addr_low = 0;
81101420:	e03ff615 	stw	zero,-40(fp)
	alt_u32 dest_addr_high = 0;
81101424:	e03ff715 	stw	zero,-36(fp)

	alt_u32 src_addr_low = 0;
81101428:	e03ff815 	stw	zero,-32(fp)
	alt_u32 src_addr_high = 0;
8110142c:	e03ff915 	stw	zero,-28(fp)

	alt_u32 control_bits = 0x00000000;
81101430:	e03ffa15 	stw	zero,-24(fp)

	switch (channel_buffer_id) {
81101434:	e0bffe03 	ldbu	r2,-8(fp)
81101438:	10c00268 	cmpgeui	r3,r2,9
8110143c:	1800a51e 	bne	r3,zero,811016d4 <fee_dma_m1_transfer+0x304>
81101440:	100690ba 	slli	r3,r2,2
81101444:	00a04434 	movhi	r2,33040
81101448:	10851604 	addi	r2,r2,5208
8110144c:	1885883a 	add	r2,r3,r2
81101450:	10800017 	ldw	r2,0(r2)
81101454:	1000683a 	jmp	r2
81101458:	811016d4 	ori	r4,r16,16475
8110145c:	8110147c 	xorhi	r4,r16,16465
81101460:	811014c0 	call	8811014c <__reset+0x20f014c>
81101464:	8110150c 	andi	r4,r16,16468
81101468:	81101558 	cmpnei	r4,r16,16469
8110146c:	811015a4 	muli	r4,r16,16470
81101470:	811015f0 	cmpltui	r4,r16,16471
81101474:	8110163c 	xorhi	r4,r16,16472
81101478:	81101688 	cmpgei	r4,r16,16474
	case channel_a_buffer:
		switch (buffer_side) {
8110147c:	e0bffd03 	ldbu	r2,-12(fp)
81101480:	10000326 	beq	r2,zero,81101490 <fee_dma_m1_transfer+0xc0>
81101484:	10800060 	cmpeqi	r2,r2,1
81101488:	1000051e 	bne	r2,zero,811014a0 <fee_dma_m1_transfer+0xd0>
8110148c:	00000906 	br	811014b4 <fee_dma_m1_transfer+0xe4>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_A_RIGHT_BUFFER_BASE_ADDR_LOW;
81101490:	e03ff615 	stw	zero,-40(fp)
			dest_addr_high =
81101494:	00800044 	movi	r2,1
81101498:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_A_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
8110149c:	00000706 	br	811014bc <fee_dma_m1_transfer+0xec>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_A_LEFT_BUFFER_BASE_ADDR_LOW;
811014a0:	00800074 	movhi	r2,1
811014a4:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_A_LEFT_BUFFER_BASE_ADDR_HIGH;
811014a8:	00800044 	movi	r2,1
811014ac:	e0bff715 	stw	r2,-36(fp)
			break;
811014b0:	00000206 	br	811014bc <fee_dma_m1_transfer+0xec>
		default:
			status = FALSE;
811014b4:	e03ff415 	stw	zero,-48(fp)
			break;
811014b8:	0001883a 	nop
		}
		break;
811014bc:	00008706 	br	811016dc <fee_dma_m1_transfer+0x30c>
	case channel_b_buffer:
		switch (buffer_side) {
811014c0:	e0bffd03 	ldbu	r2,-12(fp)
811014c4:	10000326 	beq	r2,zero,811014d4 <fee_dma_m1_transfer+0x104>
811014c8:	10800060 	cmpeqi	r2,r2,1
811014cc:	1000061e 	bne	r2,zero,811014e8 <fee_dma_m1_transfer+0x118>
811014d0:	00000b06 	br	81101500 <fee_dma_m1_transfer+0x130>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_B_RIGHT_BUFFER_BASE_ADDR_LOW;
811014d4:	00880004 	movi	r2,8192
811014d8:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
811014dc:	00800044 	movi	r2,1
811014e0:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_B_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
811014e4:	00000806 	br	81101508 <fee_dma_m1_transfer+0x138>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_B_LEFT_BUFFER_BASE_ADDR_LOW;
811014e8:	00800074 	movhi	r2,1
811014ec:	10880004 	addi	r2,r2,8192
811014f0:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_B_LEFT_BUFFER_BASE_ADDR_HIGH;
811014f4:	00800044 	movi	r2,1
811014f8:	e0bff715 	stw	r2,-36(fp)
			break;
811014fc:	00000206 	br	81101508 <fee_dma_m1_transfer+0x138>
		default:
			status = FALSE;
81101500:	e03ff415 	stw	zero,-48(fp)
			break;
81101504:	0001883a 	nop
		}
		break;
81101508:	00007406 	br	811016dc <fee_dma_m1_transfer+0x30c>
	case channel_c_buffer:
		switch (buffer_side) {
8110150c:	e0bffd03 	ldbu	r2,-12(fp)
81101510:	10000326 	beq	r2,zero,81101520 <fee_dma_m1_transfer+0x150>
81101514:	10800060 	cmpeqi	r2,r2,1
81101518:	1000061e 	bne	r2,zero,81101534 <fee_dma_m1_transfer+0x164>
8110151c:	00000b06 	br	8110154c <fee_dma_m1_transfer+0x17c>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_C_RIGHT_BUFFER_BASE_ADDR_LOW;
81101520:	00900004 	movi	r2,16384
81101524:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101528:	00800044 	movi	r2,1
8110152c:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_C_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101530:	00000806 	br	81101554 <fee_dma_m1_transfer+0x184>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_C_LEFT_BUFFER_BASE_ADDR_LOW;
81101534:	00800074 	movhi	r2,1
81101538:	10900004 	addi	r2,r2,16384
8110153c:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_C_LEFT_BUFFER_BASE_ADDR_HIGH;
81101540:	00800044 	movi	r2,1
81101544:	e0bff715 	stw	r2,-36(fp)
			break;
81101548:	00000206 	br	81101554 <fee_dma_m1_transfer+0x184>
		default:
			status = FALSE;
8110154c:	e03ff415 	stw	zero,-48(fp)
			break;
81101550:	0001883a 	nop
		}
		break;
81101554:	00006106 	br	811016dc <fee_dma_m1_transfer+0x30c>
	case channel_d_buffer:
		switch (buffer_side) {
81101558:	e0bffd03 	ldbu	r2,-12(fp)
8110155c:	10000326 	beq	r2,zero,8110156c <fee_dma_m1_transfer+0x19c>
81101560:	10800060 	cmpeqi	r2,r2,1
81101564:	1000061e 	bne	r2,zero,81101580 <fee_dma_m1_transfer+0x1b0>
81101568:	00000b06 	br	81101598 <fee_dma_m1_transfer+0x1c8>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_D_RIGHT_BUFFER_BASE_ADDR_LOW;
8110156c:	00980004 	movi	r2,24576
81101570:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101574:	00800044 	movi	r2,1
81101578:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_D_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
8110157c:	00000806 	br	811015a0 <fee_dma_m1_transfer+0x1d0>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_D_LEFT_BUFFER_BASE_ADDR_LOW;
81101580:	00800074 	movhi	r2,1
81101584:	10980004 	addi	r2,r2,24576
81101588:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_D_LEFT_BUFFER_BASE_ADDR_HIGH;
8110158c:	00800044 	movi	r2,1
81101590:	e0bff715 	stw	r2,-36(fp)
			break;
81101594:	00000206 	br	811015a0 <fee_dma_m1_transfer+0x1d0>
		default:
			status = FALSE;
81101598:	e03ff415 	stw	zero,-48(fp)
			break;
8110159c:	0001883a 	nop
		}
		break;
811015a0:	00004e06 	br	811016dc <fee_dma_m1_transfer+0x30c>
	case channel_e_buffer:
		switch (buffer_side) {
811015a4:	e0bffd03 	ldbu	r2,-12(fp)
811015a8:	10000326 	beq	r2,zero,811015b8 <fee_dma_m1_transfer+0x1e8>
811015ac:	10800060 	cmpeqi	r2,r2,1
811015b0:	1000061e 	bne	r2,zero,811015cc <fee_dma_m1_transfer+0x1fc>
811015b4:	00000b06 	br	811015e4 <fee_dma_m1_transfer+0x214>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_E_RIGHT_BUFFER_BASE_ADDR_LOW;
811015b8:	00a00014 	movui	r2,32768
811015bc:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
811015c0:	00800044 	movi	r2,1
811015c4:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_E_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
811015c8:	00000806 	br	811015ec <fee_dma_m1_transfer+0x21c>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_E_LEFT_BUFFER_BASE_ADDR_LOW;
811015cc:	008000b4 	movhi	r2,2
811015d0:	10a00004 	addi	r2,r2,-32768
811015d4:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_E_LEFT_BUFFER_BASE_ADDR_HIGH;
811015d8:	00800044 	movi	r2,1
811015dc:	e0bff715 	stw	r2,-36(fp)
			break;
811015e0:	00000206 	br	811015ec <fee_dma_m1_transfer+0x21c>
		default:
			status = FALSE;
811015e4:	e03ff415 	stw	zero,-48(fp)
			break;
811015e8:	0001883a 	nop
		}
		break;
811015ec:	00003b06 	br	811016dc <fee_dma_m1_transfer+0x30c>
	case channel_f_buffer:
		switch (buffer_side) {
811015f0:	e0bffd03 	ldbu	r2,-12(fp)
811015f4:	10000326 	beq	r2,zero,81101604 <fee_dma_m1_transfer+0x234>
811015f8:	10800060 	cmpeqi	r2,r2,1
811015fc:	1000061e 	bne	r2,zero,81101618 <fee_dma_m1_transfer+0x248>
81101600:	00000b06 	br	81101630 <fee_dma_m1_transfer+0x260>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_F_RIGHT_BUFFER_BASE_ADDR_LOW;
81101604:	00a80014 	movui	r2,40960
81101608:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
8110160c:	00800044 	movi	r2,1
81101610:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_F_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101614:	00000806 	br	81101638 <fee_dma_m1_transfer+0x268>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_F_LEFT_BUFFER_BASE_ADDR_LOW;
81101618:	008000b4 	movhi	r2,2
8110161c:	10a80004 	addi	r2,r2,-24576
81101620:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_F_LEFT_BUFFER_BASE_ADDR_HIGH;
81101624:	00800044 	movi	r2,1
81101628:	e0bff715 	stw	r2,-36(fp)
			break;
8110162c:	00000206 	br	81101638 <fee_dma_m1_transfer+0x268>
		default:
			status = FALSE;
81101630:	e03ff415 	stw	zero,-48(fp)
			break;
81101634:	0001883a 	nop
		}
		break;
81101638:	00002806 	br	811016dc <fee_dma_m1_transfer+0x30c>
	case channel_g_buffer:
		switch (buffer_side) {
8110163c:	e0bffd03 	ldbu	r2,-12(fp)
81101640:	10000326 	beq	r2,zero,81101650 <fee_dma_m1_transfer+0x280>
81101644:	10800060 	cmpeqi	r2,r2,1
81101648:	1000061e 	bne	r2,zero,81101664 <fee_dma_m1_transfer+0x294>
8110164c:	00000b06 	br	8110167c <fee_dma_m1_transfer+0x2ac>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_G_RIGHT_BUFFER_BASE_ADDR_LOW;
81101650:	00b00014 	movui	r2,49152
81101654:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101658:	00800044 	movi	r2,1
8110165c:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_G_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101660:	00000806 	br	81101684 <fee_dma_m1_transfer+0x2b4>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_G_LEFT_BUFFER_BASE_ADDR_LOW;
81101664:	008000b4 	movhi	r2,2
81101668:	10b00004 	addi	r2,r2,-16384
8110166c:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_G_LEFT_BUFFER_BASE_ADDR_HIGH;
81101670:	00800044 	movi	r2,1
81101674:	e0bff715 	stw	r2,-36(fp)
			break;
81101678:	00000206 	br	81101684 <fee_dma_m1_transfer+0x2b4>
		default:
			status = FALSE;
8110167c:	e03ff415 	stw	zero,-48(fp)
			break;
81101680:	0001883a 	nop
		}
		break;
81101684:	00001506 	br	811016dc <fee_dma_m1_transfer+0x30c>
	case channel_h_buffer:
		switch (buffer_side) {
81101688:	e0bffd03 	ldbu	r2,-12(fp)
8110168c:	10000326 	beq	r2,zero,8110169c <fee_dma_m1_transfer+0x2cc>
81101690:	10800060 	cmpeqi	r2,r2,1
81101694:	1000061e 	bne	r2,zero,811016b0 <fee_dma_m1_transfer+0x2e0>
81101698:	00000b06 	br	811016c8 <fee_dma_m1_transfer+0x2f8>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_H_RIGHT_BUFFER_BASE_ADDR_LOW;
8110169c:	00b80014 	movui	r2,57344
811016a0:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
811016a4:	00800044 	movi	r2,1
811016a8:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_H_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
811016ac:	00000806 	br	811016d0 <fee_dma_m1_transfer+0x300>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_H_LEFT_BUFFER_BASE_ADDR_LOW;
811016b0:	008000b4 	movhi	r2,2
811016b4:	10b80004 	addi	r2,r2,-8192
811016b8:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_H_LEFT_BUFFER_BASE_ADDR_HIGH;
811016bc:	00800044 	movi	r2,1
811016c0:	e0bff715 	stw	r2,-36(fp)
			break;
811016c4:	00000206 	br	811016d0 <fee_dma_m1_transfer+0x300>
		default:
			status = FALSE;
811016c8:	e03ff415 	stw	zero,-48(fp)
			break;
811016cc:	0001883a 	nop
		}
		break;
811016d0:	00000206 	br	811016dc <fee_dma_m1_transfer+0x30c>
	default:
		status = FALSE;
811016d4:	e03ff415 	stw	zero,-48(fp)
		break;
811016d8:	0001883a 	nop
	}

	src_addr_low = (alt_u32) FEE_M1_BASE_ADDR_LOW
811016dc:	e0bffb17 	ldw	r2,-20(fp)
811016e0:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) ddr_initial_address;
	src_addr_high = (alt_u32) FEE_M1_BASE_ADDR_HIGH;
811016e4:	e03ff915 	stw	zero,-28(fp)

	if (status) {
811016e8:	e0bff417 	ldw	r2,-48(fp)
811016ec:	10003426 	beq	r2,zero,811017c0 <fee_dma_m1_transfer+0x3f0>
		if (dma_m1_dev == NULL) {
811016f0:	d0a02417 	ldw	r2,-32624(gp)
811016f4:	1000021e 	bne	r2,zero,81101700 <fee_dma_m1_transfer+0x330>
			status = FALSE;
811016f8:	e03ff415 	stw	zero,-48(fp)
811016fc:	00003006 	br	811017c0 <fee_dma_m1_transfer+0x3f0>
		} else {
			for (cnt = 0; cnt < size_in_blocks; cnt++) {
81101700:	e03ff50d 	sth	zero,-44(fp)
81101704:	00002b06 	br	811017b4 <fee_dma_m1_transfer+0x3e4>
				if (msgdma_construct_extended_mm_to_mm_descriptor(dma_m1_dev,
81101708:	d2202417 	ldw	r8,-32624(gp)
8110170c:	e17ff817 	ldw	r5,-32(fp)
81101710:	e1bff617 	ldw	r6,-40(fp)
81101714:	e0bff917 	ldw	r2,-28(fp)
81101718:	e0fff717 	ldw	r3,-36(fp)
8110171c:	01000044 	movi	r4,1
81101720:	d9000815 	stw	r4,32(sp)
81101724:	01000044 	movi	r4,1
81101728:	d9000715 	stw	r4,28(sp)
8110172c:	01000044 	movi	r4,1
81101730:	d9000615 	stw	r4,24(sp)
81101734:	01000044 	movi	r4,1
81101738:	d9000515 	stw	r4,20(sp)
8110173c:	01000044 	movi	r4,1
81101740:	d9000415 	stw	r4,16(sp)
81101744:	d8c00315 	stw	r3,12(sp)
81101748:	d8800215 	stw	r2,8(sp)
8110174c:	e0bffa17 	ldw	r2,-24(fp)
81101750:	d8800115 	stw	r2,4(sp)
81101754:	00802204 	movi	r2,136
81101758:	d8800015 	stw	r2,0(sp)
8110175c:	300f883a 	mov	r7,r6
81101760:	280d883a 	mov	r6,r5
81101764:	800b883a 	mov	r5,r16
81101768:	4009883a 	mov	r4,r8
8110176c:	1102c580 	call	81102c58 <msgdma_construct_extended_mm_to_mm_descriptor>
81101770:	10000226 	beq	r2,zero,8110177c <fee_dma_m1_transfer+0x3ac>
						&dma_extended_descriptor, (alt_u32 *) src_addr_low,
						(alt_u32 *) dest_addr_low,
						FEE_PIXEL_BLOCK_SIZE_BYTES, control_bits,
						(alt_u32 *) src_addr_high, (alt_u32 *) dest_addr_high,
						1, 1, 1, 1, 1)) {
					status = FALSE;
81101774:	e03ff415 	stw	zero,-48(fp)
					break;
81101778:	00001106 	br	811017c0 <fee_dma_m1_transfer+0x3f0>
				} else {
					if (msgdma_extended_descriptor_sync_transfer(dma_m1_dev,
8110177c:	d0a02417 	ldw	r2,-32624(gp)
81101780:	800b883a 	mov	r5,r16
81101784:	1009883a 	mov	r4,r2
81101788:	1102d4c0 	call	81102d4c <msgdma_extended_descriptor_sync_transfer>
8110178c:	10000226 	beq	r2,zero,81101798 <fee_dma_m1_transfer+0x3c8>
							&dma_extended_descriptor)) {
						status = FALSE;
81101790:	e03ff415 	stw	zero,-48(fp)
						break;
81101794:	00000a06 	br	811017c0 <fee_dma_m1_transfer+0x3f0>
					}
					src_addr_low += (alt_u32) FEE_PIXEL_BLOCK_SIZE_BYTES;
81101798:	e0bff817 	ldw	r2,-32(fp)
8110179c:	10802204 	addi	r2,r2,136
811017a0:	e0bff815 	stw	r2,-32(fp)
					src_addr_high = (alt_u32) FEE_M1_BASE_ADDR_HIGH;
811017a4:	e03ff915 	stw	zero,-28(fp)

	if (status) {
		if (dma_m1_dev == NULL) {
			status = FALSE;
		} else {
			for (cnt = 0; cnt < size_in_blocks; cnt++) {
811017a8:	e0bff50b 	ldhu	r2,-44(fp)
811017ac:	10800044 	addi	r2,r2,1
811017b0:	e0bff50d 	sth	r2,-44(fp)
811017b4:	e0fff50b 	ldhu	r3,-44(fp)
811017b8:	e0bffc0b 	ldhu	r2,-16(fp)
811017bc:	18bfd236 	bltu	r3,r2,81101708 <__reset+0xfb0e1708>
					src_addr_high = (alt_u32) FEE_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return status;
811017c0:	e0bff417 	ldw	r2,-48(fp)
}
811017c4:	e6ffff04 	addi	sp,fp,-4
811017c8:	dfc00217 	ldw	ra,8(sp)
811017cc:	df000117 	ldw	fp,4(sp)
811017d0:	dc000017 	ldw	r16,0(sp)
811017d4:	dec00304 	addi	sp,sp,12
811017d8:	f800283a 	ret

811017dc <fee_dma_m2_transfer>:

bool fee_dma_m2_transfer(alt_u32 *ddr_initial_address, alt_u16 size_in_blocks,
		alt_u8 buffer_side, alt_u8 channel_buffer_id) {
811017dc:	deffe904 	addi	sp,sp,-92
811017e0:	dfc01615 	stw	ra,88(sp)
811017e4:	df001515 	stw	fp,84(sp)
811017e8:	dc001415 	stw	r16,80(sp)
811017ec:	df001504 	addi	fp,sp,84
811017f0:	e13ffb15 	stw	r4,-20(fp)
811017f4:	2809883a 	mov	r4,r5
811017f8:	3007883a 	mov	r3,r6
811017fc:	3805883a 	mov	r2,r7
81101800:	e13ffc0d 	sth	r4,-16(fp)
81101804:	e0fffd05 	stb	r3,-12(fp)
81101808:	e0bffe05 	stb	r2,-8(fp)
8110180c:	defff004 	addi	sp,sp,-64
81101810:	d8800904 	addi	r2,sp,36
81101814:	108007c4 	addi	r2,r2,31
81101818:	1004d17a 	srli	r2,r2,5
8110181c:	1020917a 	slli	r16,r2,5
	bool status = TRUE;
81101820:	00800044 	movi	r2,1
81101824:	e0bff415 	stw	r2,-48(fp)
	alt_u16 cnt = 0;
81101828:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor dma_extended_descriptor;

	alt_u32 dest_addr_low = 0;
8110182c:	e03ff615 	stw	zero,-40(fp)
	alt_u32 dest_addr_high = 0;
81101830:	e03ff715 	stw	zero,-36(fp)

	alt_u32 src_addr_low = 0;
81101834:	e03ff815 	stw	zero,-32(fp)
	alt_u32 src_addr_high = 0;
81101838:	e03ff915 	stw	zero,-28(fp)

	alt_u32 control_bits = 0x00000000;
8110183c:	e03ffa15 	stw	zero,-24(fp)

	switch (channel_buffer_id) {
81101840:	e0bffe03 	ldbu	r2,-8(fp)
81101844:	10c00268 	cmpgeui	r3,r2,9
81101848:	1800a51e 	bne	r3,zero,81101ae0 <fee_dma_m2_transfer+0x304>
8110184c:	100690ba 	slli	r3,r2,2
81101850:	00a04434 	movhi	r2,33040
81101854:	10861904 	addi	r2,r2,6244
81101858:	1885883a 	add	r2,r3,r2
8110185c:	10800017 	ldw	r2,0(r2)
81101860:	1000683a 	jmp	r2
81101864:	81101ae0 	cmpeqi	r4,r16,16491
81101868:	81101888 	cmpgei	r4,r16,16482
8110186c:	811018cc 	andi	r4,r16,16483
81101870:	81101918 	cmpnei	r4,r16,16484
81101874:	81101964 	muli	r4,r16,16485
81101878:	811019b0 	cmpltui	r4,r16,16486
8110187c:	811019fc 	xorhi	r4,r16,16487
81101880:	81101a48 	cmpgei	r4,r16,16489
81101884:	81101a94 	ori	r4,r16,16490
	case channel_a_buffer:
		switch (buffer_side) {
81101888:	e0bffd03 	ldbu	r2,-12(fp)
8110188c:	10000326 	beq	r2,zero,8110189c <fee_dma_m2_transfer+0xc0>
81101890:	10800060 	cmpeqi	r2,r2,1
81101894:	1000051e 	bne	r2,zero,811018ac <fee_dma_m2_transfer+0xd0>
81101898:	00000906 	br	811018c0 <fee_dma_m2_transfer+0xe4>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_A_RIGHT_BUFFER_BASE_ADDR_LOW;
8110189c:	e03ff615 	stw	zero,-40(fp)
			dest_addr_high =
811018a0:	00800044 	movi	r2,1
811018a4:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_A_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
811018a8:	00000706 	br	811018c8 <fee_dma_m2_transfer+0xec>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_A_LEFT_BUFFER_BASE_ADDR_LOW;
811018ac:	00800074 	movhi	r2,1
811018b0:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_A_LEFT_BUFFER_BASE_ADDR_HIGH;
811018b4:	00800044 	movi	r2,1
811018b8:	e0bff715 	stw	r2,-36(fp)
			break;
811018bc:	00000206 	br	811018c8 <fee_dma_m2_transfer+0xec>
		default:
			status = FALSE;
811018c0:	e03ff415 	stw	zero,-48(fp)
			break;
811018c4:	0001883a 	nop
		}
		break;
811018c8:	00008706 	br	81101ae8 <fee_dma_m2_transfer+0x30c>
	case channel_b_buffer:
		switch (buffer_side) {
811018cc:	e0bffd03 	ldbu	r2,-12(fp)
811018d0:	10000326 	beq	r2,zero,811018e0 <fee_dma_m2_transfer+0x104>
811018d4:	10800060 	cmpeqi	r2,r2,1
811018d8:	1000061e 	bne	r2,zero,811018f4 <fee_dma_m2_transfer+0x118>
811018dc:	00000b06 	br	8110190c <fee_dma_m2_transfer+0x130>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_B_RIGHT_BUFFER_BASE_ADDR_LOW;
811018e0:	00880004 	movi	r2,8192
811018e4:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
811018e8:	00800044 	movi	r2,1
811018ec:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_B_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
811018f0:	00000806 	br	81101914 <fee_dma_m2_transfer+0x138>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_B_LEFT_BUFFER_BASE_ADDR_LOW;
811018f4:	00800074 	movhi	r2,1
811018f8:	10880004 	addi	r2,r2,8192
811018fc:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_B_LEFT_BUFFER_BASE_ADDR_HIGH;
81101900:	00800044 	movi	r2,1
81101904:	e0bff715 	stw	r2,-36(fp)
			break;
81101908:	00000206 	br	81101914 <fee_dma_m2_transfer+0x138>
		default:
			status = FALSE;
8110190c:	e03ff415 	stw	zero,-48(fp)
			break;
81101910:	0001883a 	nop
		}
		break;
81101914:	00007406 	br	81101ae8 <fee_dma_m2_transfer+0x30c>
	case channel_c_buffer:
		switch (buffer_side) {
81101918:	e0bffd03 	ldbu	r2,-12(fp)
8110191c:	10000326 	beq	r2,zero,8110192c <fee_dma_m2_transfer+0x150>
81101920:	10800060 	cmpeqi	r2,r2,1
81101924:	1000061e 	bne	r2,zero,81101940 <fee_dma_m2_transfer+0x164>
81101928:	00000b06 	br	81101958 <fee_dma_m2_transfer+0x17c>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_C_RIGHT_BUFFER_BASE_ADDR_LOW;
8110192c:	00900004 	movi	r2,16384
81101930:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101934:	00800044 	movi	r2,1
81101938:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_C_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
8110193c:	00000806 	br	81101960 <fee_dma_m2_transfer+0x184>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_C_LEFT_BUFFER_BASE_ADDR_LOW;
81101940:	00800074 	movhi	r2,1
81101944:	10900004 	addi	r2,r2,16384
81101948:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_C_LEFT_BUFFER_BASE_ADDR_HIGH;
8110194c:	00800044 	movi	r2,1
81101950:	e0bff715 	stw	r2,-36(fp)
			break;
81101954:	00000206 	br	81101960 <fee_dma_m2_transfer+0x184>
		default:
			status = FALSE;
81101958:	e03ff415 	stw	zero,-48(fp)
			break;
8110195c:	0001883a 	nop
		}
		break;
81101960:	00006106 	br	81101ae8 <fee_dma_m2_transfer+0x30c>
	case channel_d_buffer:
		switch (buffer_side) {
81101964:	e0bffd03 	ldbu	r2,-12(fp)
81101968:	10000326 	beq	r2,zero,81101978 <fee_dma_m2_transfer+0x19c>
8110196c:	10800060 	cmpeqi	r2,r2,1
81101970:	1000061e 	bne	r2,zero,8110198c <fee_dma_m2_transfer+0x1b0>
81101974:	00000b06 	br	811019a4 <fee_dma_m2_transfer+0x1c8>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_D_RIGHT_BUFFER_BASE_ADDR_LOW;
81101978:	00980004 	movi	r2,24576
8110197c:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101980:	00800044 	movi	r2,1
81101984:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_D_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101988:	00000806 	br	811019ac <fee_dma_m2_transfer+0x1d0>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_D_LEFT_BUFFER_BASE_ADDR_LOW;
8110198c:	00800074 	movhi	r2,1
81101990:	10980004 	addi	r2,r2,24576
81101994:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_D_LEFT_BUFFER_BASE_ADDR_HIGH;
81101998:	00800044 	movi	r2,1
8110199c:	e0bff715 	stw	r2,-36(fp)
			break;
811019a0:	00000206 	br	811019ac <fee_dma_m2_transfer+0x1d0>
		default:
			status = FALSE;
811019a4:	e03ff415 	stw	zero,-48(fp)
			break;
811019a8:	0001883a 	nop
		}
		break;
811019ac:	00004e06 	br	81101ae8 <fee_dma_m2_transfer+0x30c>
	case channel_e_buffer:
		switch (buffer_side) {
811019b0:	e0bffd03 	ldbu	r2,-12(fp)
811019b4:	10000326 	beq	r2,zero,811019c4 <fee_dma_m2_transfer+0x1e8>
811019b8:	10800060 	cmpeqi	r2,r2,1
811019bc:	1000061e 	bne	r2,zero,811019d8 <fee_dma_m2_transfer+0x1fc>
811019c0:	00000b06 	br	811019f0 <fee_dma_m2_transfer+0x214>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_E_RIGHT_BUFFER_BASE_ADDR_LOW;
811019c4:	00a00014 	movui	r2,32768
811019c8:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
811019cc:	00800044 	movi	r2,1
811019d0:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_E_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
811019d4:	00000806 	br	811019f8 <fee_dma_m2_transfer+0x21c>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_E_LEFT_BUFFER_BASE_ADDR_LOW;
811019d8:	008000b4 	movhi	r2,2
811019dc:	10a00004 	addi	r2,r2,-32768
811019e0:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_E_LEFT_BUFFER_BASE_ADDR_HIGH;
811019e4:	00800044 	movi	r2,1
811019e8:	e0bff715 	stw	r2,-36(fp)
			break;
811019ec:	00000206 	br	811019f8 <fee_dma_m2_transfer+0x21c>
		default:
			status = FALSE;
811019f0:	e03ff415 	stw	zero,-48(fp)
			break;
811019f4:	0001883a 	nop
		}
		break;
811019f8:	00003b06 	br	81101ae8 <fee_dma_m2_transfer+0x30c>
	case channel_f_buffer:
		switch (buffer_side) {
811019fc:	e0bffd03 	ldbu	r2,-12(fp)
81101a00:	10000326 	beq	r2,zero,81101a10 <fee_dma_m2_transfer+0x234>
81101a04:	10800060 	cmpeqi	r2,r2,1
81101a08:	1000061e 	bne	r2,zero,81101a24 <fee_dma_m2_transfer+0x248>
81101a0c:	00000b06 	br	81101a3c <fee_dma_m2_transfer+0x260>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_F_RIGHT_BUFFER_BASE_ADDR_LOW;
81101a10:	00a80014 	movui	r2,40960
81101a14:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101a18:	00800044 	movi	r2,1
81101a1c:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_F_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101a20:	00000806 	br	81101a44 <fee_dma_m2_transfer+0x268>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_F_LEFT_BUFFER_BASE_ADDR_LOW;
81101a24:	008000b4 	movhi	r2,2
81101a28:	10a80004 	addi	r2,r2,-24576
81101a2c:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_F_LEFT_BUFFER_BASE_ADDR_HIGH;
81101a30:	00800044 	movi	r2,1
81101a34:	e0bff715 	stw	r2,-36(fp)
			break;
81101a38:	00000206 	br	81101a44 <fee_dma_m2_transfer+0x268>
		default:
			status = FALSE;
81101a3c:	e03ff415 	stw	zero,-48(fp)
			break;
81101a40:	0001883a 	nop
		}
		break;
81101a44:	00002806 	br	81101ae8 <fee_dma_m2_transfer+0x30c>
	case channel_g_buffer:
		switch (buffer_side) {
81101a48:	e0bffd03 	ldbu	r2,-12(fp)
81101a4c:	10000326 	beq	r2,zero,81101a5c <fee_dma_m2_transfer+0x280>
81101a50:	10800060 	cmpeqi	r2,r2,1
81101a54:	1000061e 	bne	r2,zero,81101a70 <fee_dma_m2_transfer+0x294>
81101a58:	00000b06 	br	81101a88 <fee_dma_m2_transfer+0x2ac>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_G_RIGHT_BUFFER_BASE_ADDR_LOW;
81101a5c:	00b00014 	movui	r2,49152
81101a60:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101a64:	00800044 	movi	r2,1
81101a68:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_G_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101a6c:	00000806 	br	81101a90 <fee_dma_m2_transfer+0x2b4>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_G_LEFT_BUFFER_BASE_ADDR_LOW;
81101a70:	008000b4 	movhi	r2,2
81101a74:	10b00004 	addi	r2,r2,-16384
81101a78:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_G_LEFT_BUFFER_BASE_ADDR_HIGH;
81101a7c:	00800044 	movi	r2,1
81101a80:	e0bff715 	stw	r2,-36(fp)
			break;
81101a84:	00000206 	br	81101a90 <fee_dma_m2_transfer+0x2b4>
		default:
			status = FALSE;
81101a88:	e03ff415 	stw	zero,-48(fp)
			break;
81101a8c:	0001883a 	nop
		}
		break;
81101a90:	00001506 	br	81101ae8 <fee_dma_m2_transfer+0x30c>
	case channel_h_buffer:
		switch (buffer_side) {
81101a94:	e0bffd03 	ldbu	r2,-12(fp)
81101a98:	10000326 	beq	r2,zero,81101aa8 <fee_dma_m2_transfer+0x2cc>
81101a9c:	10800060 	cmpeqi	r2,r2,1
81101aa0:	1000061e 	bne	r2,zero,81101abc <fee_dma_m2_transfer+0x2e0>
81101aa4:	00000b06 	br	81101ad4 <fee_dma_m2_transfer+0x2f8>
		case right_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_H_RIGHT_BUFFER_BASE_ADDR_LOW;
81101aa8:	00b80014 	movui	r2,57344
81101aac:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high =
81101ab0:	00800044 	movi	r2,1
81101ab4:	e0bff715 	stw	r2,-36(fp)
					(alt_u32) FEE_CHANNEL_H_RIGHT_BUFFER_BASE_ADDR_HIGH;
			break;
81101ab8:	00000806 	br	81101adc <fee_dma_m2_transfer+0x300>
		case left_buffer:
			dest_addr_low = (alt_u32) FEE_CHANNEL_H_LEFT_BUFFER_BASE_ADDR_LOW;
81101abc:	008000b4 	movhi	r2,2
81101ac0:	10b80004 	addi	r2,r2,-8192
81101ac4:	e0bff615 	stw	r2,-40(fp)
			dest_addr_high = (alt_u32) FEE_CHANNEL_H_LEFT_BUFFER_BASE_ADDR_HIGH;
81101ac8:	00800044 	movi	r2,1
81101acc:	e0bff715 	stw	r2,-36(fp)
			break;
81101ad0:	00000206 	br	81101adc <fee_dma_m2_transfer+0x300>
		default:
			status = FALSE;
81101ad4:	e03ff415 	stw	zero,-48(fp)
			break;
81101ad8:	0001883a 	nop
		}
		break;
81101adc:	00000206 	br	81101ae8 <fee_dma_m2_transfer+0x30c>
	default:
		status = FALSE;
81101ae0:	e03ff415 	stw	zero,-48(fp)
		break;
81101ae4:	0001883a 	nop
	}

	src_addr_low = (alt_u32) FEE_M2_BASE_ADDR_LOW
			+ (alt_u32) ddr_initial_address;
81101ae8:	e0fffb17 	ldw	r3,-20(fp)
	default:
		status = FALSE;
		break;
	}

	src_addr_low = (alt_u32) FEE_M2_BASE_ADDR_LOW
81101aec:	00a00034 	movhi	r2,32768
81101af0:	1885883a 	add	r2,r3,r2
81101af4:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) ddr_initial_address;
	src_addr_high = (alt_u32) FEE_M2_BASE_ADDR_HIGH;
81101af8:	e03ff915 	stw	zero,-28(fp)

	if (status) {
81101afc:	e0bff417 	ldw	r2,-48(fp)
81101b00:	10003426 	beq	r2,zero,81101bd4 <fee_dma_m2_transfer+0x3f8>
		if (dma_m2_dev == NULL) {
81101b04:	d0a02517 	ldw	r2,-32620(gp)
81101b08:	1000021e 	bne	r2,zero,81101b14 <fee_dma_m2_transfer+0x338>
			status = FALSE;
81101b0c:	e03ff415 	stw	zero,-48(fp)
81101b10:	00003006 	br	81101bd4 <fee_dma_m2_transfer+0x3f8>
		} else {
			for (cnt = 0; cnt < size_in_blocks; cnt++) {
81101b14:	e03ff50d 	sth	zero,-44(fp)
81101b18:	00002b06 	br	81101bc8 <fee_dma_m2_transfer+0x3ec>
				if (msgdma_construct_extended_mm_to_mm_descriptor(dma_m2_dev,
81101b1c:	d2202517 	ldw	r8,-32620(gp)
81101b20:	e17ff817 	ldw	r5,-32(fp)
81101b24:	e1bff617 	ldw	r6,-40(fp)
81101b28:	e0bff917 	ldw	r2,-28(fp)
81101b2c:	e0fff717 	ldw	r3,-36(fp)
81101b30:	01000044 	movi	r4,1
81101b34:	d9000815 	stw	r4,32(sp)
81101b38:	01000044 	movi	r4,1
81101b3c:	d9000715 	stw	r4,28(sp)
81101b40:	01000044 	movi	r4,1
81101b44:	d9000615 	stw	r4,24(sp)
81101b48:	01000044 	movi	r4,1
81101b4c:	d9000515 	stw	r4,20(sp)
81101b50:	01000044 	movi	r4,1
81101b54:	d9000415 	stw	r4,16(sp)
81101b58:	d8c00315 	stw	r3,12(sp)
81101b5c:	d8800215 	stw	r2,8(sp)
81101b60:	e0bffa17 	ldw	r2,-24(fp)
81101b64:	d8800115 	stw	r2,4(sp)
81101b68:	00802204 	movi	r2,136
81101b6c:	d8800015 	stw	r2,0(sp)
81101b70:	300f883a 	mov	r7,r6
81101b74:	280d883a 	mov	r6,r5
81101b78:	800b883a 	mov	r5,r16
81101b7c:	4009883a 	mov	r4,r8
81101b80:	1102c580 	call	81102c58 <msgdma_construct_extended_mm_to_mm_descriptor>
81101b84:	10000226 	beq	r2,zero,81101b90 <fee_dma_m2_transfer+0x3b4>
						&dma_extended_descriptor, (alt_u32 *) src_addr_low,
						(alt_u32 *) dest_addr_low,
						FEE_PIXEL_BLOCK_SIZE_BYTES, control_bits,
						(alt_u32 *) src_addr_high, (alt_u32 *) dest_addr_high,
						1, 1, 1, 1, 1)) {
					status = FALSE;
81101b88:	e03ff415 	stw	zero,-48(fp)
					break;
81101b8c:	00001106 	br	81101bd4 <fee_dma_m2_transfer+0x3f8>
				} else {
					if (msgdma_extended_descriptor_sync_transfer(dma_m2_dev,
81101b90:	d0a02517 	ldw	r2,-32620(gp)
81101b94:	800b883a 	mov	r5,r16
81101b98:	1009883a 	mov	r4,r2
81101b9c:	1102d4c0 	call	81102d4c <msgdma_extended_descriptor_sync_transfer>
81101ba0:	10000226 	beq	r2,zero,81101bac <fee_dma_m2_transfer+0x3d0>
							&dma_extended_descriptor)) {
						status = FALSE;
81101ba4:	e03ff415 	stw	zero,-48(fp)
						break;
81101ba8:	00000a06 	br	81101bd4 <fee_dma_m2_transfer+0x3f8>
					}
					src_addr_low += (alt_u32) FEE_PIXEL_BLOCK_SIZE_BYTES;
81101bac:	e0bff817 	ldw	r2,-32(fp)
81101bb0:	10802204 	addi	r2,r2,136
81101bb4:	e0bff815 	stw	r2,-32(fp)
					src_addr_high = (alt_u32) FEE_M2_BASE_ADDR_HIGH;
81101bb8:	e03ff915 	stw	zero,-28(fp)

	if (status) {
		if (dma_m2_dev == NULL) {
			status = FALSE;
		} else {
			for (cnt = 0; cnt < size_in_blocks; cnt++) {
81101bbc:	e0bff50b 	ldhu	r2,-44(fp)
81101bc0:	10800044 	addi	r2,r2,1
81101bc4:	e0bff50d 	sth	r2,-44(fp)
81101bc8:	e0fff50b 	ldhu	r3,-44(fp)
81101bcc:	e0bffc0b 	ldhu	r2,-16(fp)
81101bd0:	18bfd236 	bltu	r3,r2,81101b1c <__reset+0xfb0e1b1c>
					src_addr_high = (alt_u32) FEE_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return status;
81101bd4:	e0bff417 	ldw	r2,-48(fp)
	return status;
}
81101bd8:	e6ffff04 	addi	sp,fp,-4
81101bdc:	dfc00217 	ldw	ra,8(sp)
81101be0:	df000117 	ldw	fp,4(sp)
81101be4:	dc000017 	ldw	r16,0(sp)
81101be8:	dec00304 	addi	sp,sp,12
81101bec:	f800283a 	ret

81101bf0 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81101bf0:	defffa04 	addi	sp,sp,-24
81101bf4:	dfc00515 	stw	ra,20(sp)
81101bf8:	df000415 	stw	fp,16(sp)
81101bfc:	df000404 	addi	fp,sp,16
81101c00:	e13ffd15 	stw	r4,-12(fp)
81101c04:	e17ffe15 	stw	r5,-8(fp)
81101c08:	3005883a 	mov	r2,r6
81101c0c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81101c10:	00800044 	movi	r2,1
81101c14:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81101c18:	e17ffe17 	ldw	r5,-8(fp)
81101c1c:	e13ffd17 	ldw	r4,-12(fp)
81101c20:	1101fa00 	call	81101fa0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81101c24:	e0bfff03 	ldbu	r2,-4(fp)
81101c28:	10803fcc 	andi	r2,r2,255
81101c2c:	100d883a 	mov	r6,r2
81101c30:	e17ffe17 	ldw	r5,-8(fp)
81101c34:	e13ffd17 	ldw	r4,-12(fp)
81101c38:	11020a40 	call	811020a4 <i2c_write>
81101c3c:	1000011e 	bne	r2,zero,81101c44 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
81101c40:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81101c44:	e17ffe17 	ldw	r5,-8(fp)
81101c48:	e13ffd17 	ldw	r4,-12(fp)
81101c4c:	110202c0 	call	8110202c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81101c50:	0106d604 	movi	r4,7000
81101c54:	1118c880 	call	81118c88 <usleep>
    
    return bSuccess;
81101c58:	e0bffc17 	ldw	r2,-16(fp)

}
81101c5c:	e037883a 	mov	sp,fp
81101c60:	dfc00117 	ldw	ra,4(sp)
81101c64:	df000017 	ldw	fp,0(sp)
81101c68:	dec00204 	addi	sp,sp,8
81101c6c:	f800283a 	ret

81101c70 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81101c70:	defff804 	addi	sp,sp,-32
81101c74:	dfc00715 	stw	ra,28(sp)
81101c78:	df000615 	stw	fp,24(sp)
81101c7c:	df000604 	addi	fp,sp,24
81101c80:	e13ffb15 	stw	r4,-20(fp)
81101c84:	e17ffc15 	stw	r5,-16(fp)
81101c88:	3009883a 	mov	r4,r6
81101c8c:	3807883a 	mov	r3,r7
81101c90:	e0800217 	ldw	r2,8(fp)
81101c94:	e13ffd05 	stb	r4,-12(fp)
81101c98:	e0fffe05 	stb	r3,-8(fp)
81101c9c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81101ca0:	00800044 	movi	r2,1
81101ca4:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81101ca8:	e17ffc17 	ldw	r5,-16(fp)
81101cac:	e13ffb17 	ldw	r4,-20(fp)
81101cb0:	1101fa00 	call	81101fa0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81101cb4:	e0bffd03 	ldbu	r2,-12(fp)
81101cb8:	10803fcc 	andi	r2,r2,255
81101cbc:	100d883a 	mov	r6,r2
81101cc0:	e17ffc17 	ldw	r5,-16(fp)
81101cc4:	e13ffb17 	ldw	r4,-20(fp)
81101cc8:	11020a40 	call	811020a4 <i2c_write>
81101ccc:	1000011e 	bne	r2,zero,81101cd4 <I2C_Write+0x64>
        bSuccess = FALSE;
81101cd0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81101cd4:	e0bffa17 	ldw	r2,-24(fp)
81101cd8:	10000726 	beq	r2,zero,81101cf8 <I2C_Write+0x88>
81101cdc:	e0bffe03 	ldbu	r2,-8(fp)
81101ce0:	100d883a 	mov	r6,r2
81101ce4:	e17ffc17 	ldw	r5,-16(fp)
81101ce8:	e13ffb17 	ldw	r4,-20(fp)
81101cec:	11020a40 	call	811020a4 <i2c_write>
81101cf0:	1000011e 	bne	r2,zero,81101cf8 <I2C_Write+0x88>
        bSuccess = FALSE;
81101cf4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81101cf8:	e0bffa17 	ldw	r2,-24(fp)
81101cfc:	10000726 	beq	r2,zero,81101d1c <I2C_Write+0xac>
81101d00:	e0bfff03 	ldbu	r2,-4(fp)
81101d04:	100d883a 	mov	r6,r2
81101d08:	e17ffc17 	ldw	r5,-16(fp)
81101d0c:	e13ffb17 	ldw	r4,-20(fp)
81101d10:	11020a40 	call	811020a4 <i2c_write>
81101d14:	1000011e 	bne	r2,zero,81101d1c <I2C_Write+0xac>
        bSuccess = FALSE;
81101d18:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81101d1c:	e17ffc17 	ldw	r5,-16(fp)
81101d20:	e13ffb17 	ldw	r4,-20(fp)
81101d24:	110202c0 	call	8110202c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81101d28:	0106d604 	movi	r4,7000
81101d2c:	1118c880 	call	81118c88 <usleep>
    
    return bSuccess;
81101d30:	e0bffa17 	ldw	r2,-24(fp)

}
81101d34:	e037883a 	mov	sp,fp
81101d38:	dfc00117 	ldw	ra,4(sp)
81101d3c:	df000017 	ldw	fp,0(sp)
81101d40:	dec00204 	addi	sp,sp,8
81101d44:	f800283a 	ret

81101d48 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81101d48:	defff904 	addi	sp,sp,-28
81101d4c:	dfc00615 	stw	ra,24(sp)
81101d50:	df000515 	stw	fp,20(sp)
81101d54:	df000504 	addi	fp,sp,20
81101d58:	e13ffc15 	stw	r4,-16(fp)
81101d5c:	e17ffd15 	stw	r5,-12(fp)
81101d60:	3007883a 	mov	r3,r6
81101d64:	3805883a 	mov	r2,r7
81101d68:	e0fffe05 	stb	r3,-8(fp)
81101d6c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81101d70:	00800044 	movi	r2,1
81101d74:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81101d78:	e17ffd17 	ldw	r5,-12(fp)
81101d7c:	e13ffc17 	ldw	r4,-16(fp)
81101d80:	1101fa00 	call	81101fa0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81101d84:	e0bffe03 	ldbu	r2,-8(fp)
81101d88:	10803fcc 	andi	r2,r2,255
81101d8c:	100d883a 	mov	r6,r2
81101d90:	e17ffd17 	ldw	r5,-12(fp)
81101d94:	e13ffc17 	ldw	r4,-16(fp)
81101d98:	11020a40 	call	811020a4 <i2c_write>
81101d9c:	1000011e 	bne	r2,zero,81101da4 <I2C_Read+0x5c>
        bSuccess = FALSE;
81101da0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81101da4:	e0bffb17 	ldw	r2,-20(fp)
81101da8:	10000726 	beq	r2,zero,81101dc8 <I2C_Read+0x80>
81101dac:	e0bfff03 	ldbu	r2,-4(fp)
81101db0:	100d883a 	mov	r6,r2
81101db4:	e17ffd17 	ldw	r5,-12(fp)
81101db8:	e13ffc17 	ldw	r4,-16(fp)
81101dbc:	11020a40 	call	811020a4 <i2c_write>
81101dc0:	1000011e 	bne	r2,zero,81101dc8 <I2C_Read+0x80>
        bSuccess = FALSE;
81101dc4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81101dc8:	e17ffd17 	ldw	r5,-12(fp)
81101dcc:	e13ffc17 	ldw	r4,-16(fp)
81101dd0:	1101fa00 	call	81101fa0 <i2c_start>
    DeviceAddr |= 1; // Read
81101dd4:	e0bffe03 	ldbu	r2,-8(fp)
81101dd8:	10800054 	ori	r2,r2,1
81101ddc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81101de0:	e0bffb17 	ldw	r2,-20(fp)
81101de4:	10000826 	beq	r2,zero,81101e08 <I2C_Read+0xc0>
81101de8:	e0bffe03 	ldbu	r2,-8(fp)
81101dec:	10803fcc 	andi	r2,r2,255
81101df0:	100d883a 	mov	r6,r2
81101df4:	e17ffd17 	ldw	r5,-12(fp)
81101df8:	e13ffc17 	ldw	r4,-16(fp)
81101dfc:	11020a40 	call	811020a4 <i2c_write>
81101e00:	1000011e 	bne	r2,zero,81101e08 <I2C_Read+0xc0>
        bSuccess = FALSE;
81101e04:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81101e08:	e0bffb17 	ldw	r2,-20(fp)
81101e0c:	10000526 	beq	r2,zero,81101e24 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81101e10:	000f883a 	mov	r7,zero
81101e14:	e1800217 	ldw	r6,8(fp)
81101e18:	e17ffd17 	ldw	r5,-12(fp)
81101e1c:	e13ffc17 	ldw	r4,-16(fp)
81101e20:	11021d40 	call	811021d4 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81101e24:	e17ffd17 	ldw	r5,-12(fp)
81101e28:	e13ffc17 	ldw	r4,-16(fp)
81101e2c:	110202c0 	call	8110202c <i2c_stop>
    
    return bSuccess;
81101e30:	e0bffb17 	ldw	r2,-20(fp)
}
81101e34:	e037883a 	mov	sp,fp
81101e38:	dfc00117 	ldw	ra,4(sp)
81101e3c:	df000017 	ldw	fp,0(sp)
81101e40:	dec00204 	addi	sp,sp,8
81101e44:	f800283a 	ret

81101e48 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81101e48:	defff604 	addi	sp,sp,-40
81101e4c:	dfc00915 	stw	ra,36(sp)
81101e50:	df000815 	stw	fp,32(sp)
81101e54:	df000804 	addi	fp,sp,32
81101e58:	e13ffb15 	stw	r4,-20(fp)
81101e5c:	e17ffc15 	stw	r5,-16(fp)
81101e60:	3007883a 	mov	r3,r6
81101e64:	e1fffe15 	stw	r7,-8(fp)
81101e68:	e0800217 	ldw	r2,8(fp)
81101e6c:	e0fffd05 	stb	r3,-12(fp)
81101e70:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81101e74:	00800044 	movi	r2,1
81101e78:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81101e7c:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81101e80:	e17ffc17 	ldw	r5,-16(fp)
81101e84:	e13ffb17 	ldw	r4,-20(fp)
81101e88:	1101fa00 	call	81101fa0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81101e8c:	e0bffd03 	ldbu	r2,-12(fp)
81101e90:	10803fcc 	andi	r2,r2,255
81101e94:	100d883a 	mov	r6,r2
81101e98:	e17ffc17 	ldw	r5,-16(fp)
81101e9c:	e13ffb17 	ldw	r4,-20(fp)
81101ea0:	11020a40 	call	811020a4 <i2c_write>
81101ea4:	1000011e 	bne	r2,zero,81101eac <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
81101ea8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81101eac:	e0bff917 	ldw	r2,-28(fp)
81101eb0:	10000726 	beq	r2,zero,81101ed0 <I2C_MultipleRead+0x88>
81101eb4:	e0bffa03 	ldbu	r2,-24(fp)
81101eb8:	100d883a 	mov	r6,r2
81101ebc:	e17ffc17 	ldw	r5,-16(fp)
81101ec0:	e13ffb17 	ldw	r4,-20(fp)
81101ec4:	11020a40 	call	811020a4 <i2c_write>
81101ec8:	1000011e 	bne	r2,zero,81101ed0 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
81101ecc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81101ed0:	e0bff917 	ldw	r2,-28(fp)
81101ed4:	10000326 	beq	r2,zero,81101ee4 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
81101ed8:	e17ffc17 	ldw	r5,-16(fp)
81101edc:	e13ffb17 	ldw	r4,-20(fp)
81101ee0:	1101fa00 	call	81101fa0 <i2c_start>
    DeviceAddr |= 1; // Read
81101ee4:	e0bffd03 	ldbu	r2,-12(fp)
81101ee8:	10800054 	ori	r2,r2,1
81101eec:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81101ef0:	e0bff917 	ldw	r2,-28(fp)
81101ef4:	10000826 	beq	r2,zero,81101f18 <I2C_MultipleRead+0xd0>
81101ef8:	e0bffd03 	ldbu	r2,-12(fp)
81101efc:	10803fcc 	andi	r2,r2,255
81101f00:	100d883a 	mov	r6,r2
81101f04:	e17ffc17 	ldw	r5,-16(fp)
81101f08:	e13ffb17 	ldw	r4,-20(fp)
81101f0c:	11020a40 	call	811020a4 <i2c_write>
81101f10:	1000011e 	bne	r2,zero,81101f18 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
81101f14:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81101f18:	e0bff917 	ldw	r2,-28(fp)
81101f1c:	10001726 	beq	r2,zero,81101f7c <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
81101f20:	e03ff815 	stw	zero,-32(fp)
81101f24:	00001006 	br	81101f68 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81101f28:	e0bff817 	ldw	r2,-32(fp)
81101f2c:	e0fffe17 	ldw	r3,-8(fp)
81101f30:	1889883a 	add	r4,r3,r2
81101f34:	e0bfff0b 	ldhu	r2,-4(fp)
81101f38:	10ffffc4 	addi	r3,r2,-1
81101f3c:	e0bff817 	ldw	r2,-32(fp)
81101f40:	1884c03a 	cmpne	r2,r3,r2
81101f44:	10803fcc 	andi	r2,r2,255
81101f48:	100f883a 	mov	r7,r2
81101f4c:	200d883a 	mov	r6,r4
81101f50:	e17ffc17 	ldw	r5,-16(fp)
81101f54:	e13ffb17 	ldw	r4,-20(fp)
81101f58:	11021d40 	call	811021d4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81101f5c:	e0bff817 	ldw	r2,-32(fp)
81101f60:	10800044 	addi	r2,r2,1
81101f64:	e0bff815 	stw	r2,-32(fp)
81101f68:	e0bfff0b 	ldhu	r2,-4(fp)
81101f6c:	e0fff817 	ldw	r3,-32(fp)
81101f70:	1880020e 	bge	r3,r2,81101f7c <I2C_MultipleRead+0x134>
81101f74:	e0bff917 	ldw	r2,-28(fp)
81101f78:	103feb1e 	bne	r2,zero,81101f28 <__reset+0xfb0e1f28>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81101f7c:	e17ffc17 	ldw	r5,-16(fp)
81101f80:	e13ffb17 	ldw	r4,-20(fp)
81101f84:	110202c0 	call	8110202c <i2c_stop>
    
    return bSuccess;    
81101f88:	e0bff917 	ldw	r2,-28(fp)
    
}
81101f8c:	e037883a 	mov	sp,fp
81101f90:	dfc00117 	ldw	ra,4(sp)
81101f94:	df000017 	ldw	fp,0(sp)
81101f98:	dec00204 	addi	sp,sp,8
81101f9c:	f800283a 	ret

81101fa0 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81101fa0:	defffc04 	addi	sp,sp,-16
81101fa4:	dfc00315 	stw	ra,12(sp)
81101fa8:	df000215 	stw	fp,8(sp)
81101fac:	df000204 	addi	fp,sp,8
81101fb0:	e13ffe15 	stw	r4,-8(fp)
81101fb4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81101fb8:	e0bfff17 	ldw	r2,-4(fp)
81101fbc:	10800104 	addi	r2,r2,4
81101fc0:	1007883a 	mov	r3,r2
81101fc4:	00800044 	movi	r2,1
81101fc8:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81101fcc:	e0bfff17 	ldw	r2,-4(fp)
81101fd0:	00c00044 	movi	r3,1
81101fd4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81101fd8:	e0bffe17 	ldw	r2,-8(fp)
81101fdc:	00c00044 	movi	r3,1
81101fe0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81101fe4:	01000044 	movi	r4,1
81101fe8:	1118c880 	call	81118c88 <usleep>
     
    SDA_LOW(data_base); // data low
81101fec:	e0bfff17 	ldw	r2,-4(fp)
81101ff0:	0007883a 	mov	r3,zero
81101ff4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81101ff8:	01000044 	movi	r4,1
81101ffc:	1118c880 	call	81118c88 <usleep>
    SCL_LOW(clk_base); // clock low
81102000:	e0bffe17 	ldw	r2,-8(fp)
81102004:	0007883a 	mov	r3,zero
81102008:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
8110200c:	01000044 	movi	r4,1
81102010:	1118c880 	call	81118c88 <usleep>
}
81102014:	0001883a 	nop
81102018:	e037883a 	mov	sp,fp
8110201c:	dfc00117 	ldw	ra,4(sp)
81102020:	df000017 	ldw	fp,0(sp)
81102024:	dec00204 	addi	sp,sp,8
81102028:	f800283a 	ret

8110202c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
8110202c:	defffc04 	addi	sp,sp,-16
81102030:	dfc00315 	stw	ra,12(sp)
81102034:	df000215 	stw	fp,8(sp)
81102038:	df000204 	addi	fp,sp,8
8110203c:	e13ffe15 	stw	r4,-8(fp)
81102040:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81102044:	e0bfff17 	ldw	r2,-4(fp)
81102048:	10800104 	addi	r2,r2,4
8110204c:	1007883a 	mov	r3,r2
81102050:	00800044 	movi	r2,1
81102054:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81102058:	e0bfff17 	ldw	r2,-4(fp)
8110205c:	0007883a 	mov	r3,zero
81102060:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81102064:	e0bffe17 	ldw	r2,-8(fp)
81102068:	00c00044 	movi	r3,1
8110206c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81102070:	01000044 	movi	r4,1
81102074:	1118c880 	call	81118c88 <usleep>
    SDA_HIGH(data_base); // data high
81102078:	e0bfff17 	ldw	r2,-4(fp)
8110207c:	00c00044 	movi	r3,1
81102080:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81102084:	01000044 	movi	r4,1
81102088:	1118c880 	call	81118c88 <usleep>
    

    
}
8110208c:	0001883a 	nop
81102090:	e037883a 	mov	sp,fp
81102094:	dfc00117 	ldw	ra,4(sp)
81102098:	df000017 	ldw	fp,0(sp)
8110209c:	dec00204 	addi	sp,sp,8
811020a0:	f800283a 	ret

811020a4 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
811020a4:	defff804 	addi	sp,sp,-32
811020a8:	dfc00715 	stw	ra,28(sp)
811020ac:	df000615 	stw	fp,24(sp)
811020b0:	df000604 	addi	fp,sp,24
811020b4:	e13ffd15 	stw	r4,-12(fp)
811020b8:	e17ffe15 	stw	r5,-8(fp)
811020bc:	3005883a 	mov	r2,r6
811020c0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
811020c4:	00bfe004 	movi	r2,-128
811020c8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
811020cc:	e0bffe17 	ldw	r2,-8(fp)
811020d0:	10800104 	addi	r2,r2,4
811020d4:	1007883a 	mov	r3,r2
811020d8:	00800044 	movi	r2,1
811020dc:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
811020e0:	e03ffb15 	stw	zero,-20(fp)
811020e4:	00001f06 	br	81102164 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
811020e8:	e0bffd17 	ldw	r2,-12(fp)
811020ec:	0007883a 	mov	r3,zero
811020f0:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
811020f4:	e0ffff03 	ldbu	r3,-4(fp)
811020f8:	e0bffa03 	ldbu	r2,-24(fp)
811020fc:	1884703a 	and	r2,r3,r2
81102100:	10803fcc 	andi	r2,r2,255
81102104:	10000426 	beq	r2,zero,81102118 <i2c_write+0x74>
            SDA_HIGH(data_base);
81102108:	e0bffe17 	ldw	r2,-8(fp)
8110210c:	00c00044 	movi	r3,1
81102110:	10c00035 	stwio	r3,0(r2)
81102114:	00000306 	br	81102124 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
81102118:	e0bffe17 	ldw	r2,-8(fp)
8110211c:	0007883a 	mov	r3,zero
81102120:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81102124:	e0bffa03 	ldbu	r2,-24(fp)
81102128:	1004d07a 	srli	r2,r2,1
8110212c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81102130:	e0bffd17 	ldw	r2,-12(fp)
81102134:	00c00044 	movi	r3,1
81102138:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110213c:	01000044 	movi	r4,1
81102140:	1118c880 	call	81118c88 <usleep>
        SCL_LOW(clk_base);
81102144:	e0bffd17 	ldw	r2,-12(fp)
81102148:	0007883a 	mov	r3,zero
8110214c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81102150:	01000044 	movi	r4,1
81102154:	1118c880 	call	81118c88 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81102158:	e0bffb17 	ldw	r2,-20(fp)
8110215c:	10800044 	addi	r2,r2,1
81102160:	e0bffb15 	stw	r2,-20(fp)
81102164:	e0bffb17 	ldw	r2,-20(fp)
81102168:	10800210 	cmplti	r2,r2,8
8110216c:	103fde1e 	bne	r2,zero,811020e8 <__reset+0xfb0e20e8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81102170:	e0bffe17 	ldw	r2,-8(fp)
81102174:	10800104 	addi	r2,r2,4
81102178:	0007883a 	mov	r3,zero
8110217c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81102180:	e0bffd17 	ldw	r2,-12(fp)
81102184:	00c00044 	movi	r3,1
81102188:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
8110218c:	01000044 	movi	r4,1
81102190:	1118c880 	call	81118c88 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81102194:	e0bffe17 	ldw	r2,-8(fp)
81102198:	10800037 	ldwio	r2,0(r2)
8110219c:	1005003a 	cmpeq	r2,r2,zero
811021a0:	10803fcc 	andi	r2,r2,255
811021a4:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
811021a8:	e0bffd17 	ldw	r2,-12(fp)
811021ac:	0007883a 	mov	r3,zero
811021b0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811021b4:	01000044 	movi	r4,1
811021b8:	1118c880 	call	81118c88 <usleep>
    return bAck;
811021bc:	e0bffc17 	ldw	r2,-16(fp)
}    
811021c0:	e037883a 	mov	sp,fp
811021c4:	dfc00117 	ldw	ra,4(sp)
811021c8:	df000017 	ldw	fp,0(sp)
811021cc:	dec00204 	addi	sp,sp,8
811021d0:	f800283a 	ret

811021d4 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
811021d4:	defff804 	addi	sp,sp,-32
811021d8:	dfc00715 	stw	ra,28(sp)
811021dc:	df000615 	stw	fp,24(sp)
811021e0:	df000604 	addi	fp,sp,24
811021e4:	e13ffc15 	stw	r4,-16(fp)
811021e8:	e17ffd15 	stw	r5,-12(fp)
811021ec:	e1bffe15 	stw	r6,-8(fp)
811021f0:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
811021f4:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
811021f8:	e0bffd17 	ldw	r2,-12(fp)
811021fc:	10800104 	addi	r2,r2,4
81102200:	0007883a 	mov	r3,zero
81102204:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81102208:	e0bffc17 	ldw	r2,-16(fp)
8110220c:	0007883a 	mov	r3,zero
81102210:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81102214:	01000044 	movi	r4,1
81102218:	1118c880 	call	81118c88 <usleep>

    for(i=0;i<8;i++){
8110221c:	e03ffb15 	stw	zero,-20(fp)
81102220:	00001606 	br	8110227c <i2c_read+0xa8>
        Data <<= 1;
81102224:	e0bffa03 	ldbu	r2,-24(fp)
81102228:	1085883a 	add	r2,r2,r2
8110222c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81102230:	e0bffc17 	ldw	r2,-16(fp)
81102234:	00c00044 	movi	r3,1
81102238:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110223c:	01000044 	movi	r4,1
81102240:	1118c880 	call	81118c88 <usleep>
        if (SDA_READ(data_base))  // read data   
81102244:	e0bffd17 	ldw	r2,-12(fp)
81102248:	10800037 	ldwio	r2,0(r2)
8110224c:	10000326 	beq	r2,zero,8110225c <i2c_read+0x88>
            Data |= 0x01;
81102250:	e0bffa03 	ldbu	r2,-24(fp)
81102254:	10800054 	ori	r2,r2,1
81102258:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
8110225c:	e0bffc17 	ldw	r2,-16(fp)
81102260:	0007883a 	mov	r3,zero
81102264:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81102268:	01000044 	movi	r4,1
8110226c:	1118c880 	call	81118c88 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81102270:	e0bffb17 	ldw	r2,-20(fp)
81102274:	10800044 	addi	r2,r2,1
81102278:	e0bffb15 	stw	r2,-20(fp)
8110227c:	e0bffb17 	ldw	r2,-20(fp)
81102280:	10800210 	cmplti	r2,r2,8
81102284:	103fe71e 	bne	r2,zero,81102224 <__reset+0xfb0e2224>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81102288:	e0bffc17 	ldw	r2,-16(fp)
8110228c:	0007883a 	mov	r3,zero
81102290:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
81102294:	e0bffd17 	ldw	r2,-12(fp)
81102298:	10800104 	addi	r2,r2,4
8110229c:	1007883a 	mov	r3,r2
811022a0:	00800044 	movi	r2,1
811022a4:	18800035 	stwio	r2,0(r3)
    if (bAck)
811022a8:	e0bfff17 	ldw	r2,-4(fp)
811022ac:	10000426 	beq	r2,zero,811022c0 <i2c_read+0xec>
        SDA_LOW(data_base);
811022b0:	e0bffd17 	ldw	r2,-12(fp)
811022b4:	0007883a 	mov	r3,zero
811022b8:	10c00035 	stwio	r3,0(r2)
811022bc:	00000306 	br	811022cc <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
811022c0:	e0bffd17 	ldw	r2,-12(fp)
811022c4:	00c00044 	movi	r3,1
811022c8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
811022cc:	e0bffc17 	ldw	r2,-16(fp)
811022d0:	00c00044 	movi	r3,1
811022d4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
811022d8:	01000044 	movi	r4,1
811022dc:	1118c880 	call	81118c88 <usleep>
    SCL_LOW(clk_base); // clock low
811022e0:	e0bffc17 	ldw	r2,-16(fp)
811022e4:	0007883a 	mov	r3,zero
811022e8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811022ec:	01000044 	movi	r4,1
811022f0:	1118c880 	call	81118c88 <usleep>
    SDA_LOW(data_base);  // data low
811022f4:	e0bffd17 	ldw	r2,-12(fp)
811022f8:	0007883a 	mov	r3,zero
811022fc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
81102300:	01000044 	movi	r4,1
81102304:	1118c880 	call	81118c88 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
81102308:	e0bffe17 	ldw	r2,-8(fp)
8110230c:	e0fffa03 	ldbu	r3,-24(fp)
81102310:	10c00005 	stb	r3,0(r2)
}
81102314:	0001883a 	nop
81102318:	e037883a 	mov	sp,fp
8110231c:	dfc00117 	ldw	ra,4(sp)
81102320:	df000017 	ldw	fp,0(sp)
81102324:	dec00204 	addi	sp,sp,8
81102328:	f800283a 	ret

8110232c <LEDS_BOARD_DRIVE>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool LEDS_BOARD_DRIVE(bool bDRIVE, alt_u8 LedsMask){
8110232c:	defffd04 	addi	sp,sp,-12
81102330:	df000215 	stw	fp,8(sp)
81102334:	df000204 	addi	fp,sp,8
81102338:	e13ffe15 	stw	r4,-8(fp)
8110233c:	2805883a 	mov	r2,r5
81102340:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
81102344:	e0bffe17 	ldw	r2,-8(fp)
81102348:	10800058 	cmpnei	r2,r2,1
8110234c:	1000071e 	bne	r2,zero,8110236c <LEDS_BOARD_DRIVE+0x40>
	LedsBoardControl &= (~LedsMask);
81102350:	e0bfff03 	ldbu	r2,-4(fp)
81102354:	0084303a 	nor	r2,zero,r2
81102358:	1007883a 	mov	r3,r2
8110235c:	d0a02903 	ldbu	r2,-32604(gp)
81102360:	1884703a 	and	r2,r3,r2
81102364:	d0a02905 	stb	r2,-32604(gp)
81102368:	00000406 	br	8110237c <LEDS_BOARD_DRIVE+0x50>
  } else {
	LedsBoardControl |= LedsMask;
8110236c:	d0e02903 	ldbu	r3,-32604(gp)
81102370:	e0bfff03 	ldbu	r2,-4(fp)
81102374:	1884b03a 	or	r2,r3,r2
81102378:	d0a02905 	stb	r2,-32604(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110237c:	d0a02903 	ldbu	r2,-32604(gp)
81102380:	10c03fcc 	andi	r3,r2,255
81102384:	00a00034 	movhi	r2,32768
81102388:	10826404 	addi	r2,r2,2448
8110238c:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81102390:	00800044 	movi	r2,1
}
81102394:	e037883a 	mov	sp,fp
81102398:	df000017 	ldw	fp,0(sp)
8110239c:	dec00104 	addi	sp,sp,4
811023a0:	f800283a 	ret

811023a4 <LEDS_PAINEL_DRIVE>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool LEDS_PAINEL_DRIVE(bool bDRIVE, alt_u32 LedsMask){
811023a4:	defffd04 	addi	sp,sp,-12
811023a8:	df000215 	stw	fp,8(sp)
811023ac:	df000204 	addi	fp,sp,8
811023b0:	e13ffe15 	stw	r4,-8(fp)
811023b4:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
811023b8:	e0bffe17 	ldw	r2,-8(fp)
811023bc:	10800058 	cmpnei	r2,r2,1
811023c0:	1000051e 	bne	r2,zero,811023d8 <LEDS_PAINEL_DRIVE+0x34>
	LedsPainelControl |= LedsMask;
811023c4:	d0e02a17 	ldw	r3,-32600(gp)
811023c8:	e0bfff17 	ldw	r2,-4(fp)
811023cc:	1884b03a 	or	r2,r3,r2
811023d0:	d0a02a15 	stw	r2,-32600(gp)
811023d4:	00000506 	br	811023ec <LEDS_PAINEL_DRIVE+0x48>
  } else {
	LedsPainelControl &= (~LedsMask);
811023d8:	e0bfff17 	ldw	r2,-4(fp)
811023dc:	0086303a 	nor	r3,zero,r2
811023e0:	d0a02a17 	ldw	r2,-32600(gp)
811023e4:	1884703a 	and	r2,r3,r2
811023e8:	d0a02a15 	stw	r2,-32600(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
811023ec:	d0a02a17 	ldw	r2,-32600(gp)
811023f0:	1007883a 	mov	r3,r2
811023f4:	00a00034 	movhi	r2,32768
811023f8:	10823004 	addi	r2,r2,2240
811023fc:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81102400:	00800044 	movi	r2,1
}
81102404:	e037883a 	mov	sp,fp
81102408:	df000017 	ldw	fp,0(sp)
8110240c:	dec00104 	addi	sp,sp,4
81102410:	f800283a 	ret

81102414 <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
81102414:	defffc04 	addi	sp,sp,-16
81102418:	df000315 	stw	fp,12(sp)
8110241c:	df000304 	addi	fp,sp,12
81102420:	e13ffd15 	stw	r4,-12(fp)
81102424:	e17ffe15 	stw	r5,-8(fp)
81102428:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
8110242c:	e0bffd17 	ldw	r2,-12(fp)
81102430:	10800037 	ldwio	r2,0(r2)
81102434:	1080010c 	andi	r2,r2,4
81102438:	10000226 	beq	r2,zero,81102444 <msgdma_write_extended_descriptor+0x30>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
8110243c:	00bff904 	movi	r2,-28
81102440:	00003d06 	br	81102538 <msgdma_write_extended_descriptor+0x124>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
81102444:	e0bfff17 	ldw	r2,-4(fp)
81102448:	10800017 	ldw	r2,0(r2)
8110244c:	1007883a 	mov	r3,r2
81102450:	e0bffe17 	ldw	r2,-8(fp)
81102454:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81102458:	e0bffe17 	ldw	r2,-8(fp)
8110245c:	10800104 	addi	r2,r2,4
81102460:	e0ffff17 	ldw	r3,-4(fp)
81102464:	18c00117 	ldw	r3,4(r3)
81102468:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, descriptor->transfer_length);
8110246c:	e0bffe17 	ldw	r2,-8(fp)
81102470:	10800204 	addi	r2,r2,8
81102474:	e0ffff17 	ldw	r3,-4(fp)
81102478:	18c00217 	ldw	r3,8(r3)
8110247c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
81102480:	e0bffe17 	ldw	r2,-8(fp)
81102484:	10800304 	addi	r2,r2,12
81102488:	e0ffff17 	ldw	r3,-4(fp)
8110248c:	18c0030b 	ldhu	r3,12(r3)
81102490:	18ffffcc 	andi	r3,r3,65535
81102494:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
81102498:	e0bffe17 	ldw	r2,-8(fp)
8110249c:	10800384 	addi	r2,r2,14
811024a0:	e0ffff17 	ldw	r3,-4(fp)
811024a4:	18c00383 	ldbu	r3,14(r3)
811024a8:	18c03fcc 	andi	r3,r3,255
811024ac:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
811024b0:	e0bffe17 	ldw	r2,-8(fp)
811024b4:	108003c4 	addi	r2,r2,15
811024b8:	e0ffff17 	ldw	r3,-4(fp)
811024bc:	18c003c3 	ldbu	r3,15(r3)
811024c0:	18c03fcc 	andi	r3,r3,255
811024c4:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
811024c8:	e0bffe17 	ldw	r2,-8(fp)
811024cc:	10800404 	addi	r2,r2,16
811024d0:	e0ffff17 	ldw	r3,-4(fp)
811024d4:	18c0040b 	ldhu	r3,16(r3)
811024d8:	18ffffcc 	andi	r3,r3,65535
811024dc:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
811024e0:	e0bffe17 	ldw	r2,-8(fp)
811024e4:	10800484 	addi	r2,r2,18
811024e8:	e0ffff17 	ldw	r3,-4(fp)
811024ec:	18c0048b 	ldhu	r3,18(r3)
811024f0:	18ffffcc 	andi	r3,r3,65535
811024f4:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, descriptor->read_address_high);
811024f8:	e0bffe17 	ldw	r2,-8(fp)
811024fc:	10800504 	addi	r2,r2,20
81102500:	e0ffff17 	ldw	r3,-4(fp)
81102504:	18c00517 	ldw	r3,20(r3)
81102508:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, descriptor->write_address_high);
8110250c:	e0bffe17 	ldw	r2,-8(fp)
81102510:	10800604 	addi	r2,r2,24
81102514:	e0ffff17 	ldw	r3,-4(fp)
81102518:	18c00617 	ldw	r3,24(r3)
8110251c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
81102520:	e0bffe17 	ldw	r2,-8(fp)
81102524:	10800704 	addi	r2,r2,28
81102528:	e0ffff17 	ldw	r3,-4(fp)
8110252c:	18c00717 	ldw	r3,28(r3)
81102530:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
81102534:	0005883a 	mov	r2,zero
}
81102538:	e037883a 	mov	sp,fp
8110253c:	df000017 	ldw	fp,0(sp)
81102540:	dec00104 	addi	sp,sp,4
81102544:	f800283a 	ret

81102548 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81102548:	defff604 	addi	sp,sp,-40
8110254c:	df000915 	stw	fp,36(sp)
81102550:	df000904 	addi	fp,sp,36
81102554:	e13ff715 	stw	r4,-36(fp)
81102558:	e17ff815 	stw	r5,-32(fp)
8110255c:	e1bff915 	stw	r6,-28(fp)
81102560:	e1fffa15 	stw	r7,-24(fp)
81102564:	e1800517 	ldw	r6,20(fp)
81102568:	e1400617 	ldw	r5,24(fp)
8110256c:	e1000717 	ldw	r4,28(fp)
81102570:	e0c00817 	ldw	r3,32(fp)
81102574:	e0800917 	ldw	r2,36(fp)
81102578:	e1bffb0d 	sth	r6,-20(fp)
8110257c:	e17ffc05 	stb	r5,-16(fp)
81102580:	e13ffd05 	stb	r4,-12(fp)
81102584:	e0fffe0d 	sth	r3,-8(fp)
81102588:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
8110258c:	e0bff717 	ldw	r2,-36(fp)
81102590:	10c01217 	ldw	r3,72(r2)
81102594:	e0800117 	ldw	r2,4(fp)
81102598:	18801936 	bltu	r3,r2,81102600 <msgdma_construct_extended_descriptor+0xb8>
8110259c:	e13ff717 	ldw	r4,-36(fp)
811025a0:	20801317 	ldw	r2,76(r4)
811025a4:	20c01417 	ldw	r3,80(r4)
811025a8:	e13ffe0b 	ldhu	r4,-8(fp)
811025ac:	213fffcc 	andi	r4,r4,65535
811025b0:	2015883a 	mov	r10,r4
811025b4:	0017883a 	mov	r11,zero
811025b8:	1ac01136 	bltu	r3,r11,81102600 <msgdma_construct_extended_descriptor+0xb8>
811025bc:	58c0011e 	bne	r11,r3,811025c4 <msgdma_construct_extended_descriptor+0x7c>
811025c0:	12800f36 	bltu	r2,r10,81102600 <msgdma_construct_extended_descriptor+0xb8>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
811025c4:	e13ff717 	ldw	r4,-36(fp)
811025c8:	20801317 	ldw	r2,76(r4)
811025cc:	20c01417 	ldw	r3,80(r4)
811025d0:	e13fff0b 	ldhu	r4,-4(fp)
811025d4:	213fffcc 	andi	r4,r4,65535
811025d8:	2011883a 	mov	r8,r4
811025dc:	0013883a 	mov	r9,zero
811025e0:	1a400736 	bltu	r3,r9,81102600 <msgdma_construct_extended_descriptor+0xb8>
811025e4:	48c0011e 	bne	r9,r3,811025ec <msgdma_construct_extended_descriptor+0xa4>
811025e8:	12000536 	bltu	r2,r8,81102600 <msgdma_construct_extended_descriptor+0xb8>
811025ec:	e0bff717 	ldw	r2,-36(fp)
811025f0:	10801703 	ldbu	r2,92(r2)
811025f4:	10803fcc 	andi	r2,r2,255
811025f8:	10800060 	cmpeqi	r2,r2,1
811025fc:	1000021e 	bne	r2,zero,81102608 <msgdma_construct_extended_descriptor+0xc0>
		return -EINVAL;
81102600:	00bffa84 	movi	r2,-22
81102604:	00002306 	br	81102694 <msgdma_construct_extended_descriptor+0x14c>
	}

	descriptor->read_address_low = read_address;
81102608:	e0bff817 	ldw	r2,-32(fp)
8110260c:	e0fff917 	ldw	r3,-28(fp)
81102610:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
81102614:	e0bff817 	ldw	r2,-32(fp)
81102618:	e0fffa17 	ldw	r3,-24(fp)
8110261c:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
81102620:	e0bff817 	ldw	r2,-32(fp)
81102624:	e0c00117 	ldw	r3,4(fp)
81102628:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
8110262c:	e0bff817 	ldw	r2,-32(fp)
81102630:	e0fffb0b 	ldhu	r3,-20(fp)
81102634:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81102638:	e0bff817 	ldw	r2,-32(fp)
8110263c:	e0fffc03 	ldbu	r3,-16(fp)
81102640:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
81102644:	e0bff817 	ldw	r2,-32(fp)
81102648:	e0fffd03 	ldbu	r3,-12(fp)
8110264c:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81102650:	e0bff817 	ldw	r2,-32(fp)
81102654:	e0fffe0b 	ldhu	r3,-8(fp)
81102658:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
8110265c:	e0bff817 	ldw	r2,-32(fp)
81102660:	e0ffff0b 	ldhu	r3,-4(fp)
81102664:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
81102668:	e0bff817 	ldw	r2,-32(fp)
8110266c:	e0c00317 	ldw	r3,12(fp)
81102670:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
81102674:	e0bff817 	ldw	r2,-32(fp)
81102678:	e0c00417 	ldw	r3,16(fp)
8110267c:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81102680:	e0800217 	ldw	r2,8(fp)
81102684:	10e00034 	orhi	r3,r2,32768
81102688:	e0bff817 	ldw	r2,-32(fp)
8110268c:	10c00715 	stw	r3,28(r2)

	return 0;
81102690:	0005883a 	mov	r2,zero

}
81102694:	e037883a 	mov	sp,fp
81102698:	df000017 	ldw	fp,0(sp)
8110269c:	dec00104 	addi	sp,sp,4
811026a0:	f800283a 	ret

811026a4 <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
811026a4:	defff004 	addi	sp,sp,-64
811026a8:	dfc00f15 	stw	ra,60(sp)
811026ac:	df000e15 	stw	fp,56(sp)
811026b0:	df000e04 	addi	fp,sp,56
811026b4:	e13ffd15 	stw	r4,-12(fp)
811026b8:	e17ffe15 	stw	r5,-8(fp)
811026bc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
811026c0:	e03ff315 	stw	zero,-52(fp)
	alt_irq_context context = 0;
811026c4:	e03ff415 	stw	zero,-48(fp)
	alt_u16 counter = 0;
811026c8:	e03ff20d 	sth	zero,-56(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811026cc:	e0bffd17 	ldw	r2,-12(fp)
811026d0:	10800317 	ldw	r2,12(r2)
811026d4:	10800204 	addi	r2,r2,8
811026d8:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811026dc:	10bfffcc 	andi	r2,r2,65535
811026e0:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811026e4:	e0bffd17 	ldw	r2,-12(fp)
811026e8:	10800317 	ldw	r2,12(r2)
811026ec:	10800204 	addi	r2,r2,8
811026f0:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811026f4:	1004d43a 	srli	r2,r2,16
811026f8:	e0bff615 	stw	r2,-40(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811026fc:	e0bffd17 	ldw	r2,-12(fp)
81102700:	10800917 	ldw	r2,36(r2)
81102704:	e0fff617 	ldw	r3,-40(fp)
81102708:	1880042e 	bgeu	r3,r2,8110271c <msgdma_descriptor_async_transfer+0x78>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
8110270c:	e0bffd17 	ldw	r2,-12(fp)
81102710:	10800917 	ldw	r2,36(r2)
81102714:	e0fff517 	ldw	r3,-44(fp)
81102718:	18800236 	bltu	r3,r2,81102724 <msgdma_descriptor_async_transfer+0x80>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
8110271c:	00bff904 	movi	r2,-28
81102720:	00007d06 	br	81102918 <msgdma_descriptor_async_transfer+0x274>
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81102724:	00800804 	movi	r2,32
81102728:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8110272c:	0005303a 	rdctl	r2,status
81102730:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81102734:	e0fff717 	ldw	r3,-36(fp)
81102738:	00bfff84 	movi	r2,-2
8110273c:	1884703a 	and	r2,r3,r2
81102740:	1001703a 	wrctl	status,r2
  
  return context;
81102744:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81102748:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8110274c:	e0bffd17 	ldw	r2,-12(fp)
81102750:	10800317 	ldw	r2,12(r2)
81102754:	10800104 	addi	r2,r2,4
81102758:	e0fff317 	ldw	r3,-52(fp)
8110275c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81102760:	e0bffd17 	ldw	r2,-12(fp)
81102764:	10800317 	ldw	r2,12(r2)
81102768:	e0fffd17 	ldw	r3,-12(fp)
8110276c:	18c00317 	ldw	r3,12(r3)
81102770:	18c00037 	ldwio	r3,0(r3)
81102774:	10c00035 	stwio	r3,0(r2)
81102778:	e0bff417 	ldw	r2,-48(fp)
8110277c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81102780:	e0bffc17 	ldw	r2,-16(fp)
81102784:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
81102788:	e0bffe17 	ldw	r2,-8(fp)
8110278c:	10000826 	beq	r2,zero,811027b0 <msgdma_descriptor_async_transfer+0x10c>
81102790:	e0bfff17 	ldw	r2,-4(fp)
81102794:	1000061e 	bne	r2,zero,811027b0 <msgdma_descriptor_async_transfer+0x10c>
		counter = 0; /* reset counter */
81102798:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		alt_printf("invalid dma descriptor option\n");
8110279c:	012044b4 	movhi	r4,33042
811027a0:	21346a04 	addi	r4,r4,-11864
811027a4:	11186300 	call	81118630 <alt_printf>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
811027a8:	00bff084 	movi	r2,-62
811027ac:	00005a06 	br	81102918 <msgdma_descriptor_async_transfer+0x274>
	} else if (NULL == standard_desc && NULL != extended_desc) {
811027b0:	e0bffe17 	ldw	r2,-8(fp)
811027b4:	10001b1e 	bne	r2,zero,81102824 <msgdma_descriptor_async_transfer+0x180>
811027b8:	e0bfff17 	ldw	r2,-4(fp)
811027bc:	10001926 	beq	r2,zero,81102824 <msgdma_descriptor_async_transfer+0x180>
		counter = 0; /* reset counter */
811027c0:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811027c4:	00000d06 	br	811027fc <msgdma_descriptor_async_transfer+0x158>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
811027c8:	01000044 	movi	r4,1
811027cc:	1117e900 	call	81117e90 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811027d0:	e0bff20b 	ldhu	r2,-56(fp)
811027d4:	1084e230 	cmpltui	r2,r2,5000
811027d8:	1000051e 	bne	r2,zero,811027f0 <msgdma_descriptor_async_transfer+0x14c>
			{
				alt_printf(
811027dc:	012044b4 	movhi	r4,33042
811027e0:	21347204 	addi	r4,r4,-11832
811027e4:	11186300 	call	81118630 <alt_printf>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
811027e8:	00bff084 	movi	r2,-62
811027ec:	00004a06 	br	81102918 <msgdma_descriptor_async_transfer+0x274>
			}
			counter++;
811027f0:	e0bff20b 	ldhu	r2,-56(fp)
811027f4:	10800044 	addi	r2,r2,1
811027f8:	e0bff20d 	sth	r2,-56(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
811027fc:	e0bffd17 	ldw	r2,-12(fp)
81102800:	10c00317 	ldw	r3,12(r2)
81102804:	e0bffd17 	ldw	r2,-12(fp)
81102808:	10800417 	ldw	r2,16(r2)
8110280c:	e1bfff17 	ldw	r6,-4(fp)
81102810:	100b883a 	mov	r5,r2
81102814:	1809883a 	mov	r4,r3
81102818:	11024140 	call	81102414 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8110281c:	103fea1e 	bne	r2,zero,811027c8 <__reset+0xfb0e27c8>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81102820:	00000206 	br	8110282c <msgdma_descriptor_async_transfer+0x188>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
81102824:	00bfffc4 	movi	r2,-1
81102828:	00003b06 	br	81102918 <msgdma_descriptor_async_transfer+0x274>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
8110282c:	e0bffd17 	ldw	r2,-12(fp)
81102830:	10800b17 	ldw	r2,44(r2)
81102834:	10001c26 	beq	r2,zero,811028a8 <msgdma_descriptor_async_transfer+0x204>

		control |= (dev->control |
81102838:	e0bffd17 	ldw	r2,-12(fp)
8110283c:	10c00d17 	ldw	r3,52(r2)
81102840:	e0bff317 	ldw	r2,-52(fp)
81102844:	1884b03a 	or	r2,r3,r2
81102848:	10800514 	ori	r2,r2,20
8110284c:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81102850:	e0fff317 	ldw	r3,-52(fp)
81102854:	00bff7c4 	movi	r2,-33
81102858:	1884703a 	and	r2,r3,r2
8110285c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81102860:	0005303a 	rdctl	r2,status
81102864:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81102868:	e0fff917 	ldw	r3,-28(fp)
8110286c:	00bfff84 	movi	r2,-2
81102870:	1884703a 	and	r2,r3,r2
81102874:	1001703a 	wrctl	status,r2
  
  return context;
81102878:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
8110287c:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81102880:	e0bffd17 	ldw	r2,-12(fp)
81102884:	10800317 	ldw	r2,12(r2)
81102888:	10800104 	addi	r2,r2,4
8110288c:	e0fff317 	ldw	r3,-52(fp)
81102890:	10c00035 	stwio	r3,0(r2)
81102894:	e0bff417 	ldw	r2,-48(fp)
81102898:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110289c:	e0bffb17 	ldw	r2,-20(fp)
811028a0:	1001703a 	wrctl	status,r2
811028a4:	00001b06 	br	81102914 <msgdma_descriptor_async_transfer+0x270>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
811028a8:	e0bffd17 	ldw	r2,-12(fp)
811028ac:	10c00d17 	ldw	r3,52(r2)
811028b0:	e0bff317 	ldw	r2,-52(fp)
811028b4:	1884b03a 	or	r2,r3,r2
811028b8:	10800114 	ori	r2,r2,4
811028bc:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
811028c0:	e0fff317 	ldw	r3,-52(fp)
811028c4:	00bff3c4 	movi	r2,-49
811028c8:	1884703a 	and	r2,r3,r2
811028cc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811028d0:	0005303a 	rdctl	r2,status
811028d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811028d8:	e0fffa17 	ldw	r3,-24(fp)
811028dc:	00bfff84 	movi	r2,-2
811028e0:	1884703a 	and	r2,r3,r2
811028e4:	1001703a 	wrctl	status,r2
  
  return context;
811028e8:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
811028ec:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811028f0:	e0bffd17 	ldw	r2,-12(fp)
811028f4:	10800317 	ldw	r2,12(r2)
811028f8:	10800104 	addi	r2,r2,4
811028fc:	e0fff317 	ldw	r3,-52(fp)
81102900:	10c00035 	stwio	r3,0(r2)
81102904:	e0bff417 	ldw	r2,-48(fp)
81102908:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110290c:	e0bff817 	ldw	r2,-32(fp)
81102910:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
81102914:	0005883a 	mov	r2,zero
}
81102918:	e037883a 	mov	sp,fp
8110291c:	dfc00117 	ldw	ra,4(sp)
81102920:	df000017 	ldw	fp,0(sp)
81102924:	dec00204 	addi	sp,sp,8
81102928:	f800283a 	ret

8110292c <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
8110292c:	defff004 	addi	sp,sp,-64
81102930:	dfc00f15 	stw	ra,60(sp)
81102934:	df000e15 	stw	fp,56(sp)
81102938:	df000e04 	addi	fp,sp,56
8110293c:	e13ffd15 	stw	r4,-12(fp)
81102940:	e17ffe15 	stw	r5,-8(fp)
81102944:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81102948:	e03ff615 	stw	zero,-40(fp)
	alt_irq_context context = 0;
8110294c:	e03ff715 	stw	zero,-36(fp)
	alt_u32 csr_status = 0;
81102950:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81102954:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81102958:	e0bffd17 	ldw	r2,-12(fp)
8110295c:	10800317 	ldw	r2,12(r2)
81102960:	10800204 	addi	r2,r2,8
81102964:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
81102968:	10bfffcc 	andi	r2,r2,65535
8110296c:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81102970:	e0bffd17 	ldw	r2,-12(fp)
81102974:	10800317 	ldw	r2,12(r2)
81102978:	10800204 	addi	r2,r2,8
8110297c:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81102980:	1004d43a 	srli	r2,r2,16
81102984:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
81102988:	00807804 	movi	r2,480
8110298c:	e0bff815 	stw	r2,-32(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81102990:	00001906 	br	811029f8 <msgdma_descriptor_sync_transfer+0xcc>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
81102994:	01000044 	movi	r4,1
81102998:	1117e900 	call	81117e90 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110299c:	e0bff30b 	ldhu	r2,-52(fp)
811029a0:	1084e230 	cmpltui	r2,r2,5000
811029a4:	1000051e 	bne	r2,zero,811029bc <msgdma_descriptor_sync_transfer+0x90>
		{
			alt_printf("time out after 5 msec while waiting free FIFO buffer"
811029a8:	012044b4 	movhi	r4,33042
811029ac:	21348804 	addi	r4,r4,-11744
811029b0:	11186300 	call	81118630 <alt_printf>
					" for storing descriptor\n");
			return -ETIME;
811029b4:	00bff084 	movi	r2,-62
811029b8:	0000a206 	br	81102c44 <msgdma_descriptor_sync_transfer+0x318>
		}
		counter++;
811029bc:	e0bff30b 	ldhu	r2,-52(fp)
811029c0:	10800044 	addi	r2,r2,1
811029c4:	e0bff30d 	sth	r2,-52(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811029c8:	e0bffd17 	ldw	r2,-12(fp)
811029cc:	10800317 	ldw	r2,12(r2)
811029d0:	10800204 	addi	r2,r2,8
811029d4:	10800037 	ldwio	r2,0(r2)
			alt_printf("time out after 5 msec while waiting free FIFO buffer"
					" for storing descriptor\n");
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
811029d8:	10bfffcc 	andi	r2,r2,65535
811029dc:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811029e0:	e0bffd17 	ldw	r2,-12(fp)
811029e4:	10800317 	ldw	r2,12(r2)
811029e8:	10800204 	addi	r2,r2,8
811029ec:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
811029f0:	1004d43a 	srli	r2,r2,16
811029f4:	e0bff515 	stw	r2,-44(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811029f8:	e0bffd17 	ldw	r2,-12(fp)
811029fc:	10800917 	ldw	r2,36(r2)
81102a00:	e0fff517 	ldw	r3,-44(fp)
81102a04:	18bfe32e 	bgeu	r3,r2,81102994 <__reset+0xfb0e2994>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
81102a08:	e0bffd17 	ldw	r2,-12(fp)
81102a0c:	10800917 	ldw	r2,36(r2)
81102a10:	e0fff417 	ldw	r3,-48(fp)
81102a14:	18bfdf2e 	bgeu	r3,r2,81102994 <__reset+0xfb0e2994>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81102a18:	0005303a 	rdctl	r2,status
81102a1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81102a20:	e0fffc17 	ldw	r3,-16(fp)
81102a24:	00bfff84 	movi	r2,-2
81102a28:	1884703a 	and	r2,r3,r2
81102a2c:	1001703a 	wrctl	status,r2
  
  return context;
81102a30:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81102a34:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81102a38:	e0bffd17 	ldw	r2,-12(fp)
81102a3c:	10800317 	ldw	r2,12(r2)
81102a40:	10800104 	addi	r2,r2,4
81102a44:	00c00804 	movi	r3,32
81102a48:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81102a4c:	e0bffd17 	ldw	r2,-12(fp)
81102a50:	10800317 	ldw	r2,12(r2)
81102a54:	e0fffd17 	ldw	r3,-12(fp)
81102a58:	18c00317 	ldw	r3,12(r3)
81102a5c:	18c00037 	ldwio	r3,0(r3)
81102a60:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
81102a64:	e0bffe17 	ldw	r2,-8(fp)
81102a68:	10000826 	beq	r2,zero,81102a8c <msgdma_descriptor_sync_transfer+0x160>
81102a6c:	e0bfff17 	ldw	r2,-4(fp)
81102a70:	1000061e 	bne	r2,zero,81102a8c <msgdma_descriptor_sync_transfer+0x160>
		counter = 0; /* reset counter */
81102a74:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		alt_printf("invalid dma descriptor option\n");
81102a78:	012044b4 	movhi	r4,33042
81102a7c:	21346a04 	addi	r4,r4,-11864
81102a80:	11186300 	call	81118630 <alt_printf>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
81102a84:	00bff084 	movi	r2,-62
81102a88:	00006e06 	br	81102c44 <msgdma_descriptor_sync_transfer+0x318>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81102a8c:	e0bffe17 	ldw	r2,-8(fp)
81102a90:	10001b1e 	bne	r2,zero,81102b00 <msgdma_descriptor_sync_transfer+0x1d4>
81102a94:	e0bfff17 	ldw	r2,-4(fp)
81102a98:	10001926 	beq	r2,zero,81102b00 <msgdma_descriptor_sync_transfer+0x1d4>
		counter = 0; /* reset counter */
81102a9c:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81102aa0:	00000d06 	br	81102ad8 <msgdma_descriptor_sync_transfer+0x1ac>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
81102aa4:	01000044 	movi	r4,1
81102aa8:	1117e900 	call	81117e90 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81102aac:	e0bff30b 	ldhu	r2,-52(fp)
81102ab0:	1084e230 	cmpltui	r2,r2,5000
81102ab4:	1000051e 	bne	r2,zero,81102acc <msgdma_descriptor_sync_transfer+0x1a0>
			{
				alt_printf("time out after 5 msec while writing extended"
81102ab8:	012044b4 	movhi	r4,33042
81102abc:	21349c04 	addi	r4,r4,-11664
81102ac0:	11186300 	call	81118630 <alt_printf>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
81102ac4:	00bff084 	movi	r2,-62
81102ac8:	00005e06 	br	81102c44 <msgdma_descriptor_sync_transfer+0x318>
			}
			counter++;
81102acc:	e0bff30b 	ldhu	r2,-52(fp)
81102ad0:	10800044 	addi	r2,r2,1
81102ad4:	e0bff30d 	sth	r2,-52(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81102ad8:	e0bffd17 	ldw	r2,-12(fp)
81102adc:	10c00317 	ldw	r3,12(r2)
81102ae0:	e0bffd17 	ldw	r2,-12(fp)
81102ae4:	10800417 	ldw	r2,16(r2)
81102ae8:	e1bfff17 	ldw	r6,-4(fp)
81102aec:	100b883a 	mov	r5,r2
81102af0:	1809883a 	mov	r4,r3
81102af4:	11024140 	call	81102414 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81102af8:	103fea1e 	bne	r2,zero,81102aa4 <__reset+0xfb0e2aa4>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81102afc:	00000206 	br	81102b08 <msgdma_descriptor_sync_transfer+0x1dc>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
81102b00:	00bfffc4 	movi	r2,-1
81102b04:	00004f06 	br	81102c44 <msgdma_descriptor_sync_transfer+0x318>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81102b08:	e0bffd17 	ldw	r2,-12(fp)
81102b0c:	10800317 	ldw	r2,12(r2)
81102b10:	10800104 	addi	r2,r2,4
81102b14:	e0fffd17 	ldw	r3,-12(fp)
81102b18:	19000d17 	ldw	r4,52(r3)
81102b1c:	00fff2c4 	movi	r3,-53
81102b20:	20c6703a 	and	r3,r4,r3
81102b24:	18c00114 	ori	r3,r3,4
81102b28:	10c00035 	stwio	r3,0(r2)
81102b2c:	e0bff717 	ldw	r2,-36(fp)
81102b30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81102b34:	e0bffb17 	ldw	r2,-20(fp)
81102b38:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
81102b3c:	e03ff30d 	sth	zero,-52(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81102b40:	e0bffd17 	ldw	r2,-12(fp)
81102b44:	10800317 	ldw	r2,12(r2)
81102b48:	10800037 	ldwio	r2,0(r2)
81102b4c:	e0bff215 	stw	r2,-56(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81102b50:	00001106 	br	81102b98 <msgdma_descriptor_sync_transfer+0x26c>
		alt_busy_sleep(1); /* delay 1us */
81102b54:	01000044 	movi	r4,1
81102b58:	1117e900 	call	81117e90 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81102b5c:	e0bff30b 	ldhu	r2,-52(fp)
81102b60:	1084e230 	cmpltui	r2,r2,5000
81102b64:	1000051e 	bne	r2,zero,81102b7c <msgdma_descriptor_sync_transfer+0x250>
		{
			alt_printf("time out after 5 msec while waiting for any pending"
81102b68:	012044b4 	movhi	r4,33042
81102b6c:	2134ad04 	addi	r4,r4,-11596
81102b70:	11186300 	call	81118630 <alt_printf>
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);

			return -ETIME;
81102b74:	00bff084 	movi	r2,-62
81102b78:	00003206 	br	81102c44 <msgdma_descriptor_sync_transfer+0x318>
		}
		counter++;
81102b7c:	e0bff30b 	ldhu	r2,-52(fp)
81102b80:	10800044 	addi	r2,r2,1
81102b84:	e0bff30d 	sth	r2,-52(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81102b88:	e0bffd17 	ldw	r2,-12(fp)
81102b8c:	10800317 	ldw	r2,12(r2)
81102b90:	10800037 	ldwio	r2,0(r2)
81102b94:	e0bff215 	stw	r2,-56(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81102b98:	e0fff217 	ldw	r3,-56(fp)
81102b9c:	e0bff817 	ldw	r2,-32(fp)
81102ba0:	1884703a 	and	r2,r3,r2
81102ba4:	1000031e 	bne	r2,zero,81102bb4 <msgdma_descriptor_sync_transfer+0x288>
81102ba8:	e0bff217 	ldw	r2,-56(fp)
81102bac:	1080004c 	andi	r2,r2,1
81102bb0:	103fe81e 	bne	r2,zero,81102b54 <__reset+0xfb0e2b54>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81102bb4:	e0fff217 	ldw	r3,-56(fp)
81102bb8:	e0bff817 	ldw	r2,-32(fp)
81102bbc:	1884703a 	and	r2,r3,r2
81102bc0:	10000226 	beq	r2,zero,81102bcc <msgdma_descriptor_sync_transfer+0x2a0>
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return error;
81102bc4:	e0bff817 	ldw	r2,-32(fp)
81102bc8:	00001e06 	br	81102c44 <msgdma_descriptor_sync_transfer+0x318>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81102bcc:	e0bffd17 	ldw	r2,-12(fp)
81102bd0:	10800317 	ldw	r2,12(r2)
81102bd4:	10800104 	addi	r2,r2,4
81102bd8:	10800037 	ldwio	r2,0(r2)
81102bdc:	10800814 	ori	r2,r2,32
81102be0:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81102be4:	0005303a 	rdctl	r2,status
81102be8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81102bec:	e0fff917 	ldw	r3,-28(fp)
81102bf0:	00bfff84 	movi	r2,-2
81102bf4:	1884703a 	and	r2,r3,r2
81102bf8:	1001703a 	wrctl	status,r2
  
  return context;
81102bfc:	e0bff917 	ldw	r2,-28(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81102c00:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81102c04:	e0bffd17 	ldw	r2,-12(fp)
81102c08:	10800317 	ldw	r2,12(r2)
81102c0c:	10800104 	addi	r2,r2,4
81102c10:	e0fff617 	ldw	r3,-40(fp)
81102c14:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81102c18:	e0bffd17 	ldw	r2,-12(fp)
81102c1c:	10800317 	ldw	r2,12(r2)
81102c20:	e0fffd17 	ldw	r3,-12(fp)
81102c24:	18c00317 	ldw	r3,12(r3)
81102c28:	18c00037 	ldwio	r3,0(r3)
81102c2c:	10c00035 	stwio	r3,0(r2)
81102c30:	e0bff717 	ldw	r2,-36(fp)
81102c34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81102c38:	e0bffa17 	ldw	r2,-24(fp)
81102c3c:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
81102c40:	0005883a 	mov	r2,zero

}
81102c44:	e037883a 	mov	sp,fp
81102c48:	dfc00117 	ldw	ra,4(sp)
81102c4c:	df000017 	ldw	fp,0(sp)
81102c50:	dec00204 	addi	sp,sp,8
81102c54:	f800283a 	ret

81102c58 <msgdma_construct_extended_mm_to_mm_descriptor>:
int msgdma_construct_extended_mm_to_mm_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81102c58:	deffec04 	addi	sp,sp,-80
81102c5c:	dfc01315 	stw	ra,76(sp)
81102c60:	df001215 	stw	fp,72(sp)
81102c64:	df001204 	addi	fp,sp,72
81102c68:	e13ff715 	stw	r4,-36(fp)
81102c6c:	e17ff815 	stw	r5,-32(fp)
81102c70:	e1bff915 	stw	r6,-28(fp)
81102c74:	e1fffa15 	stw	r7,-24(fp)
81102c78:	e1800617 	ldw	r6,24(fp)
81102c7c:	e1400717 	ldw	r5,28(fp)
81102c80:	e1000817 	ldw	r4,32(fp)
81102c84:	e0c00917 	ldw	r3,36(fp)
81102c88:	e0800a17 	ldw	r2,40(fp)
81102c8c:	e1bffb0d 	sth	r6,-20(fp)
81102c90:	e17ffc05 	stb	r5,-16(fp)
81102c94:	e13ffd05 	stb	r4,-12(fp)
81102c98:	e0fffe0d 	sth	r3,-8(fp)
81102c9c:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(dev, descriptor, read_address,
81102ca0:	e0bffb0b 	ldhu	r2,-20(fp)
81102ca4:	e0fffc03 	ldbu	r3,-16(fp)
81102ca8:	e13ffd03 	ldbu	r4,-12(fp)
81102cac:	e17ffe0b 	ldhu	r5,-8(fp)
81102cb0:	e1bfff0b 	ldhu	r6,-4(fp)
81102cb4:	d9800815 	stw	r6,32(sp)
81102cb8:	d9400715 	stw	r5,28(sp)
81102cbc:	d9000615 	stw	r4,24(sp)
81102cc0:	d8c00515 	stw	r3,20(sp)
81102cc4:	d8800415 	stw	r2,16(sp)
81102cc8:	e0800517 	ldw	r2,20(fp)
81102ccc:	d8800315 	stw	r2,12(sp)
81102cd0:	e0800417 	ldw	r2,16(fp)
81102cd4:	d8800215 	stw	r2,8(sp)
81102cd8:	e0800317 	ldw	r2,12(fp)
81102cdc:	d8800115 	stw	r2,4(sp)
81102ce0:	e0800217 	ldw	r2,8(fp)
81102ce4:	d8800015 	stw	r2,0(sp)
81102ce8:	e1fffa17 	ldw	r7,-24(fp)
81102cec:	e1bff917 	ldw	r6,-28(fp)
81102cf0:	e17ff817 	ldw	r5,-32(fp)
81102cf4:	e13ff717 	ldw	r4,-36(fp)
81102cf8:	11025480 	call	81102548 <msgdma_construct_extended_descriptor>
			write_address, length, control, read_address_high,
			write_address_high, sequence_number, read_burst_count,
			write_burst_count, read_stride, write_stride);

}
81102cfc:	e037883a 	mov	sp,fp
81102d00:	dfc00117 	ldw	ra,4(sp)
81102d04:	df000017 	ldw	fp,0(sp)
81102d08:	dec00204 	addi	sp,sp,8
81102d0c:	f800283a 	ret

81102d10 <msgdma_extended_descriptor_async_transfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int msgdma_extended_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *desc) {
81102d10:	defffc04 	addi	sp,sp,-16
81102d14:	dfc00315 	stw	ra,12(sp)
81102d18:	df000215 	stw	fp,8(sp)
81102d1c:	df000204 	addi	fp,sp,8
81102d20:	e13ffe15 	stw	r4,-8(fp)
81102d24:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(dev, NULL, desc);
81102d28:	e1bfff17 	ldw	r6,-4(fp)
81102d2c:	000b883a 	mov	r5,zero
81102d30:	e13ffe17 	ldw	r4,-8(fp)
81102d34:	11026a40 	call	811026a4 <msgdma_descriptor_async_transfer>
}
81102d38:	e037883a 	mov	sp,fp
81102d3c:	dfc00117 	ldw	ra,4(sp)
81102d40:	df000017 	ldw	fp,0(sp)
81102d44:	dec00204 	addi	sp,sp,8
81102d48:	f800283a 	ret

81102d4c <msgdma_extended_descriptor_sync_transfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int msgdma_extended_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *desc) {
81102d4c:	defffc04 	addi	sp,sp,-16
81102d50:	dfc00315 	stw	ra,12(sp)
81102d54:	df000215 	stw	fp,8(sp)
81102d58:	df000204 	addi	fp,sp,8
81102d5c:	e13ffe15 	stw	r4,-8(fp)
81102d60:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(dev, NULL, desc);
81102d64:	e1bfff17 	ldw	r6,-4(fp)
81102d68:	000b883a 	mov	r5,zero
81102d6c:	e13ffe17 	ldw	r4,-8(fp)
81102d70:	110292c0 	call	8110292c <msgdma_descriptor_sync_transfer>
}
81102d74:	e037883a 	mov	sp,fp
81102d78:	dfc00117 	ldw	ra,4(sp)
81102d7c:	df000017 	ldw	fp,0(sp)
81102d80:	dec00204 	addi	sp,sp,8
81102d84:	f800283a 	ret

81102d88 <POWER_SPI_RW>:
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock


// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN, bool bSGL, alt_u32 *pValue)
{
81102d88:	defff204 	addi	sp,sp,-56
81102d8c:	dfc00d15 	stw	ra,52(sp)
81102d90:	df000c15 	stw	fp,48(sp)
81102d94:	df000c04 	addi	fp,sp,48
81102d98:	2007883a 	mov	r3,r4
81102d9c:	2805883a 	mov	r2,r5
81102da0:	e1bffe15 	stw	r6,-8(fp)
81102da4:	e1ffff15 	stw	r7,-4(fp)
81102da8:	e0fffc05 	stb	r3,-16(fp)
81102dac:	e0bffd05 	stb	r2,-12(fp)
    bool bSuccess;
    alt_u8 Config8;
    alt_u32 Value32=0, Mask32;
81102db0:	e03ff515 	stw	zero,-44(fp)
    int i, nWait = 0, nZeroCnt;
81102db4:	e03ff815 	stw	zero,-32(fp)
    const int nMaxWait = 1000000;
81102db8:	008003f4 	movhi	r2,15
81102dbc:	10909004 	addi	r2,r2,16960
81102dc0:	e0bffa15 	stw	r2,-24(fp)
    
    //
    Config8 = 0x80; 
81102dc4:	00bfe004 	movi	r2,-128
81102dc8:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bEN)?0x20:0x00;
81102dcc:	e0bffe17 	ldw	r2,-8(fp)
81102dd0:	10000226 	beq	r2,zero,81102ddc <POWER_SPI_RW+0x54>
81102dd4:	00800804 	movi	r2,32
81102dd8:	00000106 	br	81102de0 <POWER_SPI_RW+0x58>
81102ddc:	0005883a 	mov	r2,zero
81102de0:	e0fff403 	ldbu	r3,-48(fp)
81102de4:	10c4b03a 	or	r2,r2,r3
81102de8:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSGL)?0x10:0x00;
81102dec:	e0800217 	ldw	r2,8(fp)
81102df0:	10000226 	beq	r2,zero,81102dfc <POWER_SPI_RW+0x74>
81102df4:	00800404 	movi	r2,16
81102df8:	00000106 	br	81102e00 <POWER_SPI_RW+0x78>
81102dfc:	0005883a 	mov	r2,zero
81102e00:	e0fff403 	ldbu	r3,-48(fp)
81102e04:	10c4b03a 	or	r2,r2,r3
81102e08:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSIGN)?0x08:0x00;
81102e0c:	e0bfff17 	ldw	r2,-4(fp)
81102e10:	10000226 	beq	r2,zero,81102e1c <POWER_SPI_RW+0x94>
81102e14:	00800204 	movi	r2,8
81102e18:	00000106 	br	81102e20 <POWER_SPI_RW+0x98>
81102e1c:	0005883a 	mov	r2,zero
81102e20:	e0fff403 	ldbu	r3,-48(fp)
81102e24:	10c4b03a 	or	r2,r2,r3
81102e28:	e0bff405 	stb	r2,-48(fp)
    Config8 |= NextChannel & 0x07; // channel
81102e2c:	e0bffd03 	ldbu	r2,-12(fp)
81102e30:	108001cc 	andi	r2,r2,7
81102e34:	1007883a 	mov	r3,r2
81102e38:	e0bff403 	ldbu	r2,-48(fp)
81102e3c:	1884b03a 	or	r2,r3,r2
81102e40:	e0bff405 	stb	r2,-48(fp)
    
    SPI_FO(0); // use internal conversion clock
81102e44:	0007883a 	mov	r3,zero
81102e48:	00a00034 	movhi	r2,32768
81102e4c:	10823404 	addi	r2,r2,2256
81102e50:	10c00035 	stwio	r3,0(r2)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
81102e54:	0007883a 	mov	r3,zero
81102e58:	00a00034 	movhi	r2,32768
81102e5c:	10823c04 	addi	r2,r2,2288
81102e60:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(IcIndex, 0);  // chip select: active
81102e64:	e0bffc03 	ldbu	r2,-16(fp)
81102e68:	1000021e 	bne	r2,zero,81102e74 <POWER_SPI_RW+0xec>
81102e6c:	00c00084 	movi	r3,2
81102e70:	00000106 	br	81102e78 <POWER_SPI_RW+0xf0>
81102e74:	00c00044 	movi	r3,1
81102e78:	00a00034 	movhi	r2,32768
81102e7c:	10823804 	addi	r2,r2,2272
81102e80:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81102e84:	010003c4 	movi	r4,15
81102e88:	1118c880 	call	81118c88 <usleep>
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81102e8c:	00000306 	br	81102e9c <POWER_SPI_RW+0x114>
        nWait++;
81102e90:	e0bff817 	ldw	r2,-32(fp)
81102e94:	10800044 	addi	r2,r2,1
81102e98:	e0bff815 	stw	r2,-32(fp)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
    SPI_CS_N(IcIndex, 0);  // chip select: active
    SPI_DELAY;
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81102e9c:	00a00034 	movhi	r2,32768
81102ea0:	10824404 	addi	r2,r2,2320
81102ea4:	10800037 	ldwio	r2,0(r2)
81102ea8:	1080004c 	andi	r2,r2,1
81102eac:	10000326 	beq	r2,zero,81102ebc <POWER_SPI_RW+0x134>
81102eb0:	e0fff817 	ldw	r3,-32(fp)
81102eb4:	e0bffa17 	ldw	r2,-24(fp)
81102eb8:	18bff516 	blt	r3,r2,81102e90 <__reset+0xfb0e2e90>
        nWait++;
    }
    
    if (SPI_SDO){
81102ebc:	00a00034 	movhi	r2,32768
81102ec0:	10824404 	addi	r2,r2,2320
81102ec4:	10800037 	ldwio	r2,0(r2)
81102ec8:	1080004c 	andi	r2,r2,1
81102ecc:	10000626 	beq	r2,zero,81102ee8 <POWER_SPI_RW+0x160>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
81102ed0:	00c000c4 	movi	r3,3
81102ed4:	00a00034 	movhi	r2,32768
81102ed8:	10823804 	addi	r2,r2,2272
81102edc:	10c00035 	stwio	r3,0(r2)
//        printf("Timeout \r\n");
        return FALSE;
81102ee0:	0005883a 	mov	r2,zero
81102ee4:	0000db06 	br	81103254 <POWER_SPI_RW+0x4cc>
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81102ee8:	e03ff715 	stw	zero,-36(fp)
81102eec:	00002406 	br	81102f80 <POWER_SPI_RW+0x1f8>
    // ignore EOC/ and DMY bits
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81102ef0:	e0bff403 	ldbu	r2,-48(fp)
81102ef4:	10803fcc 	andi	r2,r2,255
81102ef8:	1004d1fa 	srli	r2,r2,7
81102efc:	10c03fcc 	andi	r3,r2,255
81102f00:	00a00034 	movhi	r2,32768
81102f04:	10824004 	addi	r2,r2,2304
81102f08:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81102f0c:	e0bff403 	ldbu	r2,-48(fp)
81102f10:	1085883a 	add	r2,r2,r2
81102f14:	e0bff405 	stb	r2,-48(fp)
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81102f18:	e0bff517 	ldw	r2,-44(fp)
81102f1c:	1085883a 	add	r2,r2,r2
81102f20:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81102f24:	00a00034 	movhi	r2,32768
81102f28:	10824404 	addi	r2,r2,2320
81102f2c:	10800037 	ldwio	r2,0(r2)
81102f30:	1080004c 	andi	r2,r2,1
81102f34:	1007883a 	mov	r3,r2
81102f38:	e0bff517 	ldw	r2,-44(fp)
81102f3c:	10c4b03a 	or	r2,r2,r3
81102f40:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81102f44:	00c00044 	movi	r3,1
81102f48:	00a00034 	movhi	r2,32768
81102f4c:	10823c04 	addi	r2,r2,2288
81102f50:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81102f54:	010003c4 	movi	r4,15
81102f58:	1118c880 	call	81118c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81102f5c:	0007883a 	mov	r3,zero
81102f60:	00a00034 	movhi	r2,32768
81102f64:	10823c04 	addi	r2,r2,2288
81102f68:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81102f6c:	010003c4 	movi	r4,15
81102f70:	1118c880 	call	81118c88 <usleep>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
//        printf("Timeout \r\n");
        return FALSE;
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81102f74:	e0bff717 	ldw	r2,-36(fp)
81102f78:	10800044 	addi	r2,r2,1
81102f7c:	e0bff715 	stw	r2,-36(fp)
81102f80:	e0bff717 	ldw	r2,-36(fp)
81102f84:	10800090 	cmplti	r2,r2,2
81102f88:	103fd91e 	bne	r2,zero,81102ef0 <__reset+0xfb0e2ef0>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81102f8c:	e03ff715 	stw	zero,-36(fp)
81102f90:	00002406 	br	81103024 <POWER_SPI_RW+0x29c>
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81102f94:	e0bff403 	ldbu	r2,-48(fp)
81102f98:	10803fcc 	andi	r2,r2,255
81102f9c:	1004d1fa 	srli	r2,r2,7
81102fa0:	10c03fcc 	andi	r3,r2,255
81102fa4:	00a00034 	movhi	r2,32768
81102fa8:	10824004 	addi	r2,r2,2304
81102fac:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81102fb0:	e0bff403 	ldbu	r2,-48(fp)
81102fb4:	1085883a 	add	r2,r2,r2
81102fb8:	e0bff405 	stb	r2,-48(fp)
        
        Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81102fbc:	e0bff517 	ldw	r2,-44(fp)
81102fc0:	1085883a 	add	r2,r2,r2
81102fc4:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81102fc8:	00a00034 	movhi	r2,32768
81102fcc:	10824404 	addi	r2,r2,2320
81102fd0:	10800037 	ldwio	r2,0(r2)
81102fd4:	1080004c 	andi	r2,r2,1
81102fd8:	1007883a 	mov	r3,r2
81102fdc:	e0bff517 	ldw	r2,-44(fp)
81102fe0:	10c4b03a 	or	r2,r2,r3
81102fe4:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81102fe8:	00c00044 	movi	r3,1
81102fec:	00a00034 	movhi	r2,32768
81102ff0:	10823c04 	addi	r2,r2,2288
81102ff4:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81102ff8:	010003c4 	movi	r4,15
81102ffc:	1118c880 	call	81118c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81103000:	0007883a 	mov	r3,zero
81103004:	00a00034 	movhi	r2,32768
81103008:	10823c04 	addi	r2,r2,2288
8110300c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103010:	010003c4 	movi	r4,15
81103014:	1118c880 	call	81118c88 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81103018:	e0bff717 	ldw	r2,-36(fp)
8110301c:	10800044 	addi	r2,r2,1
81103020:	e0bff715 	stw	r2,-36(fp)
81103024:	e0bff717 	ldw	r2,-36(fp)
81103028:	10800210 	cmplti	r2,r2,8
8110302c:	103fd91e 	bne	r2,zero,81102f94 <__reset+0xfb0e2f94>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81103030:	e03ff715 	stw	zero,-36(fp)
81103034:	00001a06 	br	811030a0 <POWER_SPI_RW+0x318>
    {
        Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81103038:	e0bff517 	ldw	r2,-44(fp)
8110303c:	1085883a 	add	r2,r2,r2
81103040:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81103044:	00a00034 	movhi	r2,32768
81103048:	10824404 	addi	r2,r2,2320
8110304c:	10800037 	ldwio	r2,0(r2)
81103050:	1080004c 	andi	r2,r2,1
81103054:	1007883a 	mov	r3,r2
81103058:	e0bff517 	ldw	r2,-44(fp)
8110305c:	10c4b03a 	or	r2,r2,r3
81103060:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81103064:	00c00044 	movi	r3,1
81103068:	00a00034 	movhi	r2,32768
8110306c:	10823c04 	addi	r2,r2,2288
81103070:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103074:	010003c4 	movi	r4,15
81103078:	1118c880 	call	81118c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110307c:	0007883a 	mov	r3,zero
81103080:	00a00034 	movhi	r2,32768
81103084:	10823c04 	addi	r2,r2,2288
81103088:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110308c:	010003c4 	movi	r4,15
81103090:	1118c880 	call	81118c88 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81103094:	e0bff717 	ldw	r2,-36(fp)
81103098:	10800044 	addi	r2,r2,1
8110309c:	e0bff715 	stw	r2,-36(fp)
811030a0:	e0bff717 	ldw	r2,-36(fp)
811030a4:	10800210 	cmplti	r2,r2,8
811030a8:	103fe31e 	bne	r2,zero,81103038 <__reset+0xfb0e3038>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
811030ac:	e03ff715 	stw	zero,-36(fp)
811030b0:	00001a06 	br	8110311c <POWER_SPI_RW+0x394>
    {
        Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
811030b4:	e0bff517 	ldw	r2,-44(fp)
811030b8:	1085883a 	add	r2,r2,r2
811030bc:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_1.0 = sdo; // load lsb
811030c0:	00a00034 	movhi	r2,32768
811030c4:	10824404 	addi	r2,r2,2320
811030c8:	10800037 	ldwio	r2,0(r2)
811030cc:	1080004c 	andi	r2,r2,1
811030d0:	1007883a 	mov	r3,r2
811030d4:	e0bff517 	ldw	r2,-44(fp)
811030d8:	10c4b03a 	or	r2,r2,r3
811030dc:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
811030e0:	00c00044 	movi	r3,1
811030e4:	00a00034 	movhi	r2,32768
811030e8:	10823c04 	addi	r2,r2,2288
811030ec:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811030f0:	010003c4 	movi	r4,15
811030f4:	1118c880 	call	81118c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
811030f8:	0007883a 	mov	r3,zero
811030fc:	00a00034 	movhi	r2,32768
81103100:	10823c04 	addi	r2,r2,2288
81103104:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103108:	010003c4 	movi	r4,15
8110310c:	1118c880 	call	81118c88 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
81103110:	e0bff717 	ldw	r2,-36(fp)
81103114:	10800044 	addi	r2,r2,1
81103118:	e0bff715 	stw	r2,-36(fp)
8110311c:	e0bff717 	ldw	r2,-36(fp)
81103120:	10800210 	cmplti	r2,r2,8
81103124:	103fe31e 	bne	r2,zero,811030b4 <__reset+0xfb0e30b4>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
81103128:	e03ff715 	stw	zero,-36(fp)
8110312c:	00001a06 	br	81103198 <POWER_SPI_RW+0x410>
    {
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81103130:	e0bff517 	ldw	r2,-44(fp)
81103134:	1085883a 	add	r2,r2,r2
81103138:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
8110313c:	00a00034 	movhi	r2,32768
81103140:	10824404 	addi	r2,r2,2320
81103144:	10800037 	ldwio	r2,0(r2)
81103148:	1080004c 	andi	r2,r2,1
8110314c:	1007883a 	mov	r3,r2
81103150:	e0bff517 	ldw	r2,-44(fp)
81103154:	10c4b03a 	or	r2,r2,r3
81103158:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
8110315c:	00c00044 	movi	r3,1
81103160:	00a00034 	movhi	r2,32768
81103164:	10823c04 	addi	r2,r2,2288
81103168:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110316c:	010003c4 	movi	r4,15
81103170:	1118c880 	call	81118c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81103174:	0007883a 	mov	r3,zero
81103178:	00a00034 	movhi	r2,32768
8110317c:	10823c04 	addi	r2,r2,2288
81103180:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103184:	010003c4 	movi	r4,15
81103188:	1118c880 	call	81118c88 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
8110318c:	e0bff717 	ldw	r2,-36(fp)
81103190:	10800044 	addi	r2,r2,1
81103194:	e0bff715 	stw	r2,-36(fp)
81103198:	e0bff717 	ldw	r2,-36(fp)
8110319c:	10800190 	cmplti	r2,r2,6
811031a0:	103fe31e 	bne	r2,zero,81103130 <__reset+0xfb0e3130>
        SPI_SCK(1);//sck=1; // clock high
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    SPI_SCK(1);
811031a4:	00c00044 	movi	r3,1
811031a8:	00a00034 	movhi	r2,32768
811031ac:	10823c04 	addi	r2,r2,2288
811031b0:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
811031b4:	010003c4 	movi	r4,15
811031b8:	1118c880 	call	81118c88 <usleep>
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
811031bc:	00c000c4 	movi	r3,3
811031c0:	00a00034 	movhi	r2,32768
811031c4:	10823804 	addi	r2,r2,2272
811031c8:	10c00035 	stwio	r3,0(r2)
    
    // check parity
    nZeroCnt = 0;
811031cc:	e03ff915 	stw	zero,-28(fp)
    Mask32 = 0x01;
811031d0:	00800044 	movi	r2,1
811031d4:	e0bff615 	stw	r2,-40(fp)
    for(i=0;i<32;i++){
811031d8:	e03ff715 	stw	zero,-36(fp)
811031dc:	00000d06 	br	81103214 <POWER_SPI_RW+0x48c>
        if ((Value32 & Mask32) == 0x00){
811031e0:	e0fff517 	ldw	r3,-44(fp)
811031e4:	e0bff617 	ldw	r2,-40(fp)
811031e8:	1884703a 	and	r2,r3,r2
811031ec:	1000031e 	bne	r2,zero,811031fc <POWER_SPI_RW+0x474>
            nZeroCnt++;
811031f0:	e0bff917 	ldw	r2,-28(fp)
811031f4:	10800044 	addi	r2,r2,1
811031f8:	e0bff915 	stw	r2,-28(fp)
        }
        Mask32 <<= 1;
811031fc:	e0bff617 	ldw	r2,-40(fp)
81103200:	1085883a 	add	r2,r2,r2
81103204:	e0bff615 	stw	r2,-40(fp)
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
    
    // check parity
    nZeroCnt = 0;
    Mask32 = 0x01;
    for(i=0;i<32;i++){
81103208:	e0bff717 	ldw	r2,-36(fp)
8110320c:	10800044 	addi	r2,r2,1
81103210:	e0bff715 	stw	r2,-36(fp)
81103214:	e0bff717 	ldw	r2,-36(fp)
81103218:	10800810 	cmplti	r2,r2,32
8110321c:	103ff01e 	bne	r2,zero,811031e0 <__reset+0xfb0e31e0>
        if ((Value32 & Mask32) == 0x00){
            nZeroCnt++;
        }
        Mask32 <<= 1;
    }
    bSuccess = (nZeroCnt&0x01)?FALSE:TRUE;
81103220:	e0bff917 	ldw	r2,-28(fp)
81103224:	1080004c 	andi	r2,r2,1
81103228:	1005003a 	cmpeq	r2,r2,zero
8110322c:	10803fcc 	andi	r2,r2,255
81103230:	e0bffb15 	stw	r2,-20(fp)
    if (!bSuccess){
81103234:	e0bffb17 	ldw	r2,-20(fp)
81103238:	1000021e 	bne	r2,zero,81103244 <POWER_SPI_RW+0x4bc>
//        printf("Parity Check Error \r\n");
        return FALSE;
8110323c:	0005883a 	mov	r2,zero
81103240:	00000406 	br	81103254 <POWER_SPI_RW+0x4cc>
    }        
    
    
    *pValue = Value32;
81103244:	e0800317 	ldw	r2,12(fp)
81103248:	e0fff517 	ldw	r3,-44(fp)
8110324c:	10c00015 	stw	r3,0(r2)
    
    return bSuccess;
81103250:	e0bffb17 	ldw	r2,-20(fp)
}
81103254:	e037883a 	mov	sp,fp
81103258:	dfc00117 	ldw	ra,4(sp)
8110325c:	df000017 	ldw	fp,0(sp)
81103260:	dec00204 	addi	sp,sp,8
81103264:	f800283a 	ret

81103268 <v_spi_start>:
#define SPI_CS_N(x) IOWR_ALTERA_AVALON_PIO_DATA(RTCC_CS_N_BASE,x)
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(RTCC_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(RTCC_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(150)  // based on 50MHZ of CPU clock

void v_spi_start(void){
81103268:	defffe04 	addi	sp,sp,-8
8110326c:	dfc00115 	stw	ra,4(sp)
81103270:	df000015 	stw	fp,0(sp)
81103274:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
81103278:	0007883a 	mov	r3,zero
8110327c:	00a00034 	movhi	r2,32768
81103280:	10822004 	addi	r2,r2,2176
81103284:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
81103288:	0007883a 	mov	r3,zero
8110328c:	00a00034 	movhi	r2,32768
81103290:	10821c04 	addi	r2,r2,2160
81103294:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81103298:	01002584 	movi	r4,150
8110329c:	1118c880 	call	81118c88 <usleep>
}
811032a0:	0001883a 	nop
811032a4:	e037883a 	mov	sp,fp
811032a8:	dfc00117 	ldw	ra,4(sp)
811032ac:	df000017 	ldw	fp,0(sp)
811032b0:	dec00204 	addi	sp,sp,8
811032b4:	f800283a 	ret

811032b8 <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
811032b8:	defffc04 	addi	sp,sp,-16
811032bc:	dfc00315 	stw	ra,12(sp)
811032c0:	df000215 	stw	fp,8(sp)
811032c4:	df000204 	addi	fp,sp,8
811032c8:	2005883a 	mov	r2,r4
811032cc:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
811032d0:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
811032d4:	00bfe004 	movi	r2,-128
811032d8:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
811032dc:	e03ffe05 	stb	zero,-8(fp)
811032e0:	00001b06 	br	81103350 <v_spi_send_byte+0x98>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
811032e4:	e0ffff03 	ldbu	r3,-4(fp)
811032e8:	e0bffe43 	ldbu	r2,-7(fp)
811032ec:	1884703a 	and	r2,r3,r2
811032f0:	10803fcc 	andi	r2,r2,255
811032f4:	1004c03a 	cmpne	r2,r2,zero
811032f8:	10c03fcc 	andi	r3,r2,255
811032fc:	00a00034 	movhi	r2,32768
81103300:	10822404 	addi	r2,r2,2192
81103304:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
81103308:	e0bffe43 	ldbu	r2,-7(fp)
8110330c:	1004d07a 	srli	r2,r2,1
81103310:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
81103314:	00c00044 	movi	r3,1
81103318:	00a00034 	movhi	r2,32768
8110331c:	10822004 	addi	r2,r2,2176
81103320:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81103324:	01002584 	movi	r4,150
81103328:	1118c880 	call	81118c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110332c:	0007883a 	mov	r3,zero
81103330:	00a00034 	movhi	r2,32768
81103334:	10822004 	addi	r2,r2,2176
81103338:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110333c:	01002584 	movi	r4,150
81103340:	1118c880 	call	81118c88 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81103344:	e0bffe03 	ldbu	r2,-8(fp)
81103348:	10800044 	addi	r2,r2,1
8110334c:	e0bffe05 	stb	r2,-8(fp)
81103350:	e0bffe03 	ldbu	r2,-8(fp)
81103354:	10800230 	cmpltui	r2,r2,8
81103358:	103fe21e 	bne	r2,zero,811032e4 <__reset+0xfb0e32e4>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
8110335c:	0001883a 	nop
81103360:	e037883a 	mov	sp,fp
81103364:	dfc00117 	ldw	ra,4(sp)
81103368:	df000017 	ldw	fp,0(sp)
8110336c:	dec00204 	addi	sp,sp,8
81103370:	f800283a 	ret

81103374 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
81103374:	defffd04 	addi	sp,sp,-12
81103378:	dfc00215 	stw	ra,8(sp)
8110337c:	df000115 	stw	fp,4(sp)
81103380:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
81103384:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
81103388:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
8110338c:	e03fff05 	stb	zero,-4(fp)
81103390:	00001a06 	br	811033fc <uc_spi_get_byte+0x88>
    {
        uc_data <<= 1;
81103394:	e0bfff43 	ldbu	r2,-3(fp)
81103398:	1085883a 	add	r2,r2,r2
8110339c:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
811033a0:	00a00034 	movhi	r2,32768
811033a4:	10822804 	addi	r2,r2,2208
811033a8:	10800037 	ldwio	r2,0(r2)
811033ac:	1080004c 	andi	r2,r2,1
811033b0:	1007883a 	mov	r3,r2
811033b4:	e0bfff43 	ldbu	r2,-3(fp)
811033b8:	1884b03a 	or	r2,r3,r2
811033bc:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
811033c0:	00c00044 	movi	r3,1
811033c4:	00a00034 	movhi	r2,32768
811033c8:	10822004 	addi	r2,r2,2176
811033cc:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811033d0:	01002584 	movi	r4,150
811033d4:	1118c880 	call	81118c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
811033d8:	0007883a 	mov	r3,zero
811033dc:	00a00034 	movhi	r2,32768
811033e0:	10822004 	addi	r2,r2,2176
811033e4:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811033e8:	01002584 	movi	r4,150
811033ec:	1118c880 	call	81118c88 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
811033f0:	e0bfff03 	ldbu	r2,-4(fp)
811033f4:	10800044 	addi	r2,r2,1
811033f8:	e0bfff05 	stb	r2,-4(fp)
811033fc:	e0bfff03 	ldbu	r2,-4(fp)
81103400:	10800230 	cmpltui	r2,r2,8
81103404:	103fe31e 	bne	r2,zero,81103394 <__reset+0xfb0e3394>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
81103408:	e0bfff43 	ldbu	r2,-3(fp)
}
8110340c:	e037883a 	mov	sp,fp
81103410:	dfc00117 	ldw	ra,4(sp)
81103414:	df000017 	ldw	fp,0(sp)
81103418:	dec00204 	addi	sp,sp,8
8110341c:	f800283a 	ret

81103420 <v_spi_end>:

void v_spi_end(void){
81103420:	defffe04 	addi	sp,sp,-8
81103424:	dfc00115 	stw	ra,4(sp)
81103428:	df000015 	stw	fp,0(sp)
8110342c:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
81103430:	0007883a 	mov	r3,zero
81103434:	00a00034 	movhi	r2,32768
81103438:	10822004 	addi	r2,r2,2176
8110343c:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81103440:	01002584 	movi	r4,150
81103444:	1118c880 	call	81118c88 <usleep>
    SPI_CS_N(1);
81103448:	00c00044 	movi	r3,1
8110344c:	00a00034 	movhi	r2,32768
81103450:	10821c04 	addi	r2,r2,2160
81103454:	10c00035 	stwio	r3,0(r2)
}
81103458:	0001883a 	nop
8110345c:	e037883a 	mov	sp,fp
81103460:	dfc00117 	ldw	ra,4(sp)
81103464:	df000017 	ldw	fp,0(sp)
81103468:	dec00204 	addi	sp,sp,8
8110346c:	f800283a 	ret

81103470 <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
81103470:	defff404 	addi	sp,sp,-48
81103474:	dfc00b15 	stw	ra,44(sp)
81103478:	df000a15 	stw	fp,40(sp)
8110347c:	df000a04 	addi	fp,sp,40
81103480:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81103484:	e03ff915 	stw	zero,-28(fp)

    alt_u8 uc_EUI48_B0 = 0;
81103488:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 uc_EUI48_B1 = 0;
8110348c:	e03ffa45 	stb	zero,-23(fp)
    alt_u8 uc_EUI48_B2 = 0;
81103490:	e03ffa85 	stb	zero,-22(fp)
    alt_u8 uc_EUI48_B3 = 0;
81103494:	e03ffac5 	stb	zero,-21(fp)
    alt_u8 uc_EUI48_B4 = 0;
81103498:	e03ffb05 	stb	zero,-20(fp)
    alt_u8 uc_EUI48_B5 = 0;
8110349c:	e03ffb45 	stb	zero,-19(fp)

    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
811034a0:	00800084 	movi	r2,2
811034a4:	e0bffb85 	stb	r2,-18(fp)
    const alt_u8 uc_EUI48_B1_addr = 0x03;
811034a8:	008000c4 	movi	r2,3
811034ac:	e0bffbc5 	stb	r2,-17(fp)
    const alt_u8 uc_EUI48_B2_addr = 0x04;
811034b0:	00800104 	movi	r2,4
811034b4:	e0bffc05 	stb	r2,-16(fp)
    const alt_u8 uc_EUI48_B3_addr = 0x05;
811034b8:	00800144 	movi	r2,5
811034bc:	e0bffc45 	stb	r2,-15(fp)
    const alt_u8 uc_EUI48_B4_addr = 0x06;
811034c0:	00800184 	movi	r2,6
811034c4:	e0bffc85 	stb	r2,-14(fp)
    const alt_u8 uc_EUI48_B5_addr = 0x07;
811034c8:	008001c4 	movi	r2,7
811034cc:	e0bffcc5 	stb	r2,-13(fp)

    const alt_u8 uc_IDREAD_cmd = 0x33;
811034d0:	00800cc4 	movi	r2,51
811034d4:	e0bffd05 	stb	r2,-12(fp)

    int i = 0;
811034d8:	e03ffe15 	stw	zero,-8(fp)
    
    // Start Communication
    v_spi_start();
811034dc:	11032680 	call	81103268 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
811034e0:	e0bffd03 	ldbu	r2,-12(fp)
811034e4:	1009883a 	mov	r4,r2
811034e8:	11032b80 	call	811032b8 <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
811034ec:	e0bffb83 	ldbu	r2,-18(fp)
811034f0:	1009883a 	mov	r4,r2
811034f4:	11032b80 	call	811032b8 <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
811034f8:	11033740 	call	81103374 <uc_spi_get_byte>
811034fc:	e0bffa05 	stb	r2,-24(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
81103500:	11033740 	call	81103374 <uc_spi_get_byte>
81103504:	e0bffa45 	stb	r2,-23(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81103508:	11033740 	call	81103374 <uc_spi_get_byte>
8110350c:	e0bffa85 	stb	r2,-22(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
81103510:	11033740 	call	81103374 <uc_spi_get_byte>
81103514:	e0bffac5 	stb	r2,-21(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81103518:	11033740 	call	81103374 <uc_spi_get_byte>
8110351c:	e0bffb05 	stb	r2,-20(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
81103520:	11033740 	call	81103374 <uc_spi_get_byte>
81103524:	e0bffb45 	stb	r2,-19(fp)

    // End communication
    v_spi_end();
81103528:	11034200 	call	81103420 <v_spi_end>

    bSuccess = TRUE;
8110352c:	00800044 	movi	r2,1
81103530:	e0bff915 	stw	r2,-28(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
81103534:	e0bfff17 	ldw	r2,-4(fp)
81103538:	e0fffa03 	ldbu	r3,-24(fp)
8110353c:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
81103540:	e0bfff17 	ldw	r2,-4(fp)
81103544:	10800044 	addi	r2,r2,1
81103548:	e0fffa43 	ldbu	r3,-23(fp)
8110354c:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
81103550:	e0bfff17 	ldw	r2,-4(fp)
81103554:	10800084 	addi	r2,r2,2
81103558:	e0fffa83 	ldbu	r3,-22(fp)
8110355c:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81103560:	e0bfff17 	ldw	r2,-4(fp)
81103564:	108000c4 	addi	r2,r2,3
81103568:	e0fffac3 	ldbu	r3,-21(fp)
8110356c:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
81103570:	e0bfff17 	ldw	r2,-4(fp)
81103574:	10800104 	addi	r2,r2,4
81103578:	e0fffb03 	ldbu	r3,-20(fp)
8110357c:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
81103580:	e0bfff17 	ldw	r2,-4(fp)
81103584:	10800144 	addi	r2,r2,5
81103588:	e0fffb43 	ldbu	r3,-19(fp)
8110358c:	10c00005 	stb	r3,0(r2)

    printf("RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
81103590:	e17ffa03 	ldbu	r5,-24(fp)
81103594:	e1bffa43 	ldbu	r6,-23(fp)
81103598:	e1fffa83 	ldbu	r7,-22(fp)
8110359c:	e0bffac3 	ldbu	r2,-21(fp)
811035a0:	e0fffb03 	ldbu	r3,-20(fp)
811035a4:	e13ffb43 	ldbu	r4,-19(fp)
811035a8:	d9000215 	stw	r4,8(sp)
811035ac:	d8c00115 	stw	r3,4(sp)
811035b0:	d8800015 	stw	r2,0(sp)
811035b4:	012044b4 	movhi	r4,33042
811035b8:	2134bf04 	addi	r4,r4,-11524
811035bc:	110ba640 	call	8110ba64 <printf>

    return bSuccess;
811035c0:	e0bff917 	ldw	r2,-28(fp)
}
811035c4:	e037883a 	mov	sp,fp
811035c8:	dfc00117 	ldw	ra,4(sp)
811035cc:	df000017 	ldw	fp,0(sp)
811035d0:	dec00204 	addi	sp,sp,8
811035d4:	f800283a 	ret

811035d8 <SSDP_CONFIG>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool SSDP_CONFIG(alt_u8 SsdpConfig){
811035d8:	defffd04 	addi	sp,sp,-12
811035dc:	df000215 	stw	fp,8(sp)
811035e0:	df000204 	addi	fp,sp,8
811035e4:	2005883a 	mov	r2,r4
811035e8:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
811035ec:	e0bfff03 	ldbu	r2,-4(fp)
811035f0:	10c00168 	cmpgeui	r3,r2,5
811035f4:	18001c1e 	bne	r3,zero,81103668 <SSDP_CONFIG+0x90>
811035f8:	100690ba 	slli	r3,r2,2
811035fc:	00a04434 	movhi	r2,33040
81103600:	108d8404 	addi	r2,r2,13840
81103604:	1885883a 	add	r2,r3,r2
81103608:	10800017 	ldw	r2,0(r2)
8110360c:	1000683a 	jmp	r2
81103610:	81103624 	muli	r4,r16,16600
81103614:	81103630 	cmpltui	r4,r16,16600
81103618:	8110363c 	xorhi	r4,r16,16600
8110361c:	81103650 	cmplti	r4,r16,16601
81103620:	81103660 	cmpeqi	r4,r16,16601
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81103624:	00800cc4 	movi	r2,51
81103628:	d0a02b05 	stb	r2,-32596(gp)
	    break;
8110362c:	00001006 	br	81103670 <SSDP_CONFIG+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81103630:	00801544 	movi	r2,85
81103634:	d0a02b05 	stb	r2,-32596(gp)
	    break;
81103638:	00000d06 	br	81103670 <SSDP_CONFIG+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110363c:	d0e02b03 	ldbu	r3,-32596(gp)
81103640:	00bff744 	movi	r2,-35
81103644:	1884703a 	and	r2,r3,r2
81103648:	d0a02b05 	stb	r2,-32596(gp)
	    break;
8110364c:	00000806 	br	81103670 <SSDP_CONFIG+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81103650:	d0a02b03 	ldbu	r2,-32596(gp)
81103654:	10800894 	ori	r2,r2,34
81103658:	d0a02b05 	stb	r2,-32596(gp)
	    break;
8110365c:	00000406 	br	81103670 <SSDP_CONFIG+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81103660:	d0202b05 	stb	zero,-32596(gp)
	    break;
81103664:	00000206 	br	81103670 <SSDP_CONFIG+0x98>
		
		default:
		    return FALSE;
81103668:	0005883a 	mov	r2,zero
8110366c:	00000806 	br	81103690 <SSDP_CONFIG+0xb8>
	}

	alt_u32 *pSsdpAddr = SSDP_BASE;
81103670:	00a00034 	movhi	r2,32768
81103674:	10827404 	addi	r2,r2,2512
81103678:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
8110367c:	d0a02b03 	ldbu	r2,-32596(gp)
81103680:	10c03fcc 	andi	r3,r2,255
81103684:	e0bffe17 	ldw	r2,-8(fp)
81103688:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8110368c:	00800044 	movi	r2,1
}
81103690:	e037883a 	mov	sp,fp
81103694:	df000017 	ldw	fp,0(sp)
81103698:	dec00104 	addi	sp,sp,4
8110369c:	f800283a 	ret

811036a0 <SSDP_UPDATE>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool SSDP_UPDATE(alt_u8 SsdpData){
811036a0:	defffd04 	addi	sp,sp,-12
811036a4:	df000215 	stw	fp,8(sp)
811036a8:	df000204 	addi	fp,sp,8
811036ac:	2005883a 	mov	r2,r4
811036b0:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = SSDP_BASE;
811036b4:	00a00034 	movhi	r2,32768
811036b8:	10827404 	addi	r2,r2,2512
811036bc:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
811036c0:	e0bffe17 	ldw	r2,-8(fp)
811036c4:	10800104 	addi	r2,r2,4
811036c8:	e0ffff03 	ldbu	r3,-4(fp)
811036cc:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811036d0:	00800044 	movi	r2,1
}
811036d4:	e037883a 	mov	sp,fp
811036d8:	df000017 	ldw	fp,0(sp)
811036dc:	dec00104 	addi	sp,sp,4
811036e0:	f800283a 	ret

811036e4 <SPWC_WRITE_REG32>:
	alt_u32 ul_spwc_g_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_g_spacewire_link_control_status_register_value = 0x00000400;
	alt_u32 ul_spwc_h_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_h_spacewire_link_control_status_register_value = 0x00000400;

	void SPWC_WRITE_REG32(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
811036e4:	defffb04 	addi	sp,sp,-20
811036e8:	df000415 	stw	fp,16(sp)
811036ec:	df000404 	addi	fp,sp,16
811036f0:	2007883a 	mov	r3,r4
811036f4:	2805883a 	mov	r2,r5
811036f8:	e1bfff15 	stw	r6,-4(fp)
811036fc:	e0fffd05 	stb	r3,-12(fp)
81103700:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81103704:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
81103708:	e0bffd07 	ldb	r2,-12(fp)
8110370c:	10bfefc4 	addi	r2,r2,-65
81103710:	10c00228 	cmpgeui	r3,r2,8
81103714:	18001e1e 	bne	r3,zero,81103790 <SPWC_WRITE_REG32+0xac>
81103718:	100690ba 	slli	r3,r2,2
8110371c:	00a04434 	movhi	r2,33040
81103720:	108dcc04 	addi	r2,r2,14128
81103724:	1885883a 	add	r2,r3,r2
81103728:	10800017 	ldw	r2,0(r2)
8110372c:	1000683a 	jmp	r2
81103730:	81103750 	cmplti	r4,r16,16605
81103734:	81103758 	cmpnei	r4,r16,16605
81103738:	81103760 	cmpeqi	r4,r16,16605
8110373c:	81103768 	cmpgeui	r4,r16,16605
81103740:	81103770 	cmpltui	r4,r16,16605
81103744:	81103778 	rdprs	r4,r16,16605
81103748:	81103780 	call	88110378 <__reset+0x20f0378>
8110374c:	81103788 	cmpgei	r4,r16,16606
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81103750:	e03ffc15 	stw	zero,-16(fp)
			break;
81103754:	00000e06 	br	81103790 <SPWC_WRITE_REG32+0xac>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
81103758:	e03ffc15 	stw	zero,-16(fp)
			break;
8110375c:	00000c06 	br	81103790 <SPWC_WRITE_REG32+0xac>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
81103760:	e03ffc15 	stw	zero,-16(fp)
			break;
81103764:	00000a06 	br	81103790 <SPWC_WRITE_REG32+0xac>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
81103768:	e03ffc15 	stw	zero,-16(fp)
			break;
8110376c:	00000806 	br	81103790 <SPWC_WRITE_REG32+0xac>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81103770:	e03ffc15 	stw	zero,-16(fp)
			break;
81103774:	00000606 	br	81103790 <SPWC_WRITE_REG32+0xac>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81103778:	e03ffc15 	stw	zero,-16(fp)
			break;
8110377c:	00000406 	br	81103790 <SPWC_WRITE_REG32+0xac>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81103780:	e03ffc15 	stw	zero,-16(fp)
			break;
81103784:	00000206 	br	81103790 <SPWC_WRITE_REG32+0xac>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81103788:	e03ffc15 	stw	zero,-16(fp)
			break;
8110378c:	0001883a 	nop
		}
		*(pSpwcAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81103790:	e0bffe03 	ldbu	r2,-8(fp)
81103794:	1085883a 	add	r2,r2,r2
81103798:	1085883a 	add	r2,r2,r2
8110379c:	1007883a 	mov	r3,r2
811037a0:	e0bffc17 	ldw	r2,-16(fp)
811037a4:	10c5883a 	add	r2,r2,r3
811037a8:	e0ffff17 	ldw	r3,-4(fp)
811037ac:	10c00015 	stw	r3,0(r2)
	}
811037b0:	0001883a 	nop
811037b4:	e037883a 	mov	sp,fp
811037b8:	df000017 	ldw	fp,0(sp)
811037bc:	dec00104 	addi	sp,sp,4
811037c0:	f800283a 	ret

811037c4 <SPWC_READ_REG32>:

	alt_u32 SPWC_READ_REG32(char c_SpwID, alt_u8 uc_RegisterAddress){
811037c4:	defffb04 	addi	sp,sp,-20
811037c8:	df000415 	stw	fp,16(sp)
811037cc:	df000404 	addi	fp,sp,16
811037d0:	2007883a 	mov	r3,r4
811037d4:	2805883a 	mov	r2,r5
811037d8:	e0fffe05 	stb	r3,-8(fp)
811037dc:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
811037e0:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
811037e4:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
811037e8:	e0bffe07 	ldb	r2,-8(fp)
811037ec:	10bfefc4 	addi	r2,r2,-65
811037f0:	10c00228 	cmpgeui	r3,r2,8
811037f4:	18001e1e 	bne	r3,zero,81103870 <SPWC_READ_REG32+0xac>
811037f8:	100690ba 	slli	r3,r2,2
811037fc:	00a04434 	movhi	r2,33040
81103800:	108e0404 	addi	r2,r2,14352
81103804:	1885883a 	add	r2,r3,r2
81103808:	10800017 	ldw	r2,0(r2)
8110380c:	1000683a 	jmp	r2
81103810:	81103830 	cmpltui	r4,r16,16608
81103814:	81103838 	rdprs	r4,r16,16608
81103818:	81103840 	call	88110384 <__reset+0x20f0384>
8110381c:	81103848 	cmpgei	r4,r16,16609
81103820:	81103850 	cmplti	r4,r16,16609
81103824:	81103858 	cmpnei	r4,r16,16609
81103828:	81103860 	cmpeqi	r4,r16,16609
8110382c:	81103868 	cmpgeui	r4,r16,16609
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81103830:	e03ffc15 	stw	zero,-16(fp)
			break;
81103834:	00000e06 	br	81103870 <SPWC_READ_REG32+0xac>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
81103838:	e03ffc15 	stw	zero,-16(fp)
			break;
8110383c:	00000c06 	br	81103870 <SPWC_READ_REG32+0xac>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
81103840:	e03ffc15 	stw	zero,-16(fp)
			break;
81103844:	00000a06 	br	81103870 <SPWC_READ_REG32+0xac>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
81103848:	e03ffc15 	stw	zero,-16(fp)
			break;
8110384c:	00000806 	br	81103870 <SPWC_READ_REG32+0xac>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81103850:	e03ffc15 	stw	zero,-16(fp)
			break;
81103854:	00000606 	br	81103870 <SPWC_READ_REG32+0xac>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81103858:	e03ffc15 	stw	zero,-16(fp)
			break;
8110385c:	00000406 	br	81103870 <SPWC_READ_REG32+0xac>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81103860:	e03ffc15 	stw	zero,-16(fp)
			break;
81103864:	00000206 	br	81103870 <SPWC_READ_REG32+0xac>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81103868:	e03ffc15 	stw	zero,-16(fp)
			break;
8110386c:	0001883a 	nop
		}
		RegisterValue = *(pSpwcAddr + (alt_u32)uc_RegisterAddress);
81103870:	e0bfff03 	ldbu	r2,-4(fp)
81103874:	1085883a 	add	r2,r2,r2
81103878:	1085883a 	add	r2,r2,r2
8110387c:	1007883a 	mov	r3,r2
81103880:	e0bffc17 	ldw	r2,-16(fp)
81103884:	10c5883a 	add	r2,r2,r3
81103888:	10800017 	ldw	r2,0(r2)
8110388c:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81103890:	e0bffd17 	ldw	r2,-12(fp)
	}
81103894:	e037883a 	mov	sp,fp
81103898:	df000017 	ldw	fp,0(sp)
8110389c:	dec00104 	addi	sp,sp,4
811038a0:	f800283a 	ret

811038a4 <b_SpaceWire_Interface_Write_Register>:

	bool b_SpaceWire_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
811038a4:	defffa04 	addi	sp,sp,-24
811038a8:	dfc00515 	stw	ra,20(sp)
811038ac:	df000415 	stw	fp,16(sp)
811038b0:	df000404 	addi	fp,sp,16
811038b4:	2007883a 	mov	r3,r4
811038b8:	2805883a 	mov	r2,r5
811038bc:	e1bfff15 	stw	r6,-4(fp)
811038c0:	e0fffd05 	stb	r3,-12(fp)
811038c4:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811038c8:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
811038cc:	e0bffe03 	ldbu	r2,-8(fp)
811038d0:	108000e8 	cmpgeui	r2,r2,3
811038d4:	1000081e 	bne	r2,zero,811038f8 <b_SpaceWire_Interface_Write_Register+0x54>
			SPWC_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
811038d8:	e0bffd07 	ldb	r2,-12(fp)
811038dc:	e0fffe03 	ldbu	r3,-8(fp)
811038e0:	e1bfff17 	ldw	r6,-4(fp)
811038e4:	180b883a 	mov	r5,r3
811038e8:	1009883a 	mov	r4,r2
811038ec:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
811038f0:	00800044 	movi	r2,1
811038f4:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
811038f8:	e0bffc17 	ldw	r2,-16(fp)
	}
811038fc:	e037883a 	mov	sp,fp
81103900:	dfc00117 	ldw	ra,4(sp)
81103904:	df000017 	ldw	fp,0(sp)
81103908:	dec00204 	addi	sp,sp,8
8110390c:	f800283a 	ret

81103910 <ul_SpaceWire_Interface_Read_Register>:

	alt_u32 ul_SpaceWire_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
81103910:	defffb04 	addi	sp,sp,-20
81103914:	dfc00415 	stw	ra,16(sp)
81103918:	df000315 	stw	fp,12(sp)
8110391c:	df000304 	addi	fp,sp,12
81103920:	2007883a 	mov	r3,r4
81103924:	2805883a 	mov	r2,r5
81103928:	e0fffe05 	stb	r3,-8(fp)
8110392c:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81103930:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
81103934:	e0bfff03 	ldbu	r2,-4(fp)
81103938:	108000e8 	cmpgeui	r2,r2,3
8110393c:	1000061e 	bne	r2,zero,81103958 <ul_SpaceWire_Interface_Read_Register+0x48>
			ul_RegisterValue = SPWC_READ_REG32(c_SpwID, uc_RegisterAddress);
81103940:	e0bffe07 	ldb	r2,-8(fp)
81103944:	e0ffff03 	ldbu	r3,-4(fp)
81103948:	180b883a 	mov	r5,r3
8110394c:	1009883a 	mov	r4,r2
81103950:	11037c40 	call	811037c4 <SPWC_READ_REG32>
81103954:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
81103958:	e0bffd17 	ldw	r2,-12(fp)
	}
8110395c:	e037883a 	mov	sp,fp
81103960:	dfc00117 	ldw	ra,4(sp)
81103964:	df000017 	ldw	fp,0(sp)
81103968:	dec00204 	addi	sp,sp,8
8110396c:	f800283a 	ret

81103970 <b_SpaceWire_Interface_Enable_Control>:

	bool b_SpaceWire_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
81103970:	defff804 	addi	sp,sp,-32
81103974:	dfc00715 	stw	ra,28(sp)
81103978:	df000615 	stw	fp,24(sp)
8110397c:	df000604 	addi	fp,sp,24
81103980:	2007883a 	mov	r3,r4
81103984:	2805883a 	mov	r2,r5
81103988:	e1bfff15 	stw	r6,-4(fp)
8110398c:	e0fffd05 	stb	r3,-12(fp)
81103990:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81103994:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK;
81103998:	0081c004 	movi	r2,1792
8110399c:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811039a0:	d0a02c04 	addi	r2,gp,-32592
811039a4:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811039a8:	e0bffd07 	ldb	r2,-12(fp)
811039ac:	10bfefc4 	addi	r2,r2,-65
811039b0:	10c00228 	cmpgeui	r3,r2,8
811039b4:	1800361e 	bne	r3,zero,81103a90 <b_SpaceWire_Interface_Enable_Control+0x120>
811039b8:	100690ba 	slli	r3,r2,2
811039bc:	00a04434 	movhi	r2,33040
811039c0:	108e7404 	addi	r2,r2,14800
811039c4:	1885883a 	add	r2,r3,r2
811039c8:	10800017 	ldw	r2,0(r2)
811039cc:	1000683a 	jmp	r2
811039d0:	811039f0 	cmpltui	r4,r16,16615
811039d4:	81103a04 	addi	r4,r16,16616
811039d8:	81103a18 	cmpnei	r4,r16,16616
811039dc:	81103a2c 	andhi	r4,r16,16616
811039e0:	81103a40 	call	881103a4 <__reset+0x20f03a4>
811039e4:	81103a54 	ori	r4,r16,16617
811039e8:	81103a68 	cmpgeui	r4,r16,16617
811039ec:	81103a7c 	xorhi	r4,r16,16617
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811039f0:	d0a02c04 	addi	r2,gp,-32592
811039f4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811039f8:	00800044 	movi	r2,1
811039fc:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a00:	00002306 	br	81103a90 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81103a04:	d0a02d04 	addi	r2,gp,-32588
81103a08:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a0c:	00800044 	movi	r2,1
81103a10:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a14:	00001e06 	br	81103a90 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103a18:	d0a02e04 	addi	r2,gp,-32584
81103a1c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a20:	00800044 	movi	r2,1
81103a24:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a28:	00001906 	br	81103a90 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103a2c:	d0a02f04 	addi	r2,gp,-32580
81103a30:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a34:	00800044 	movi	r2,1
81103a38:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a3c:	00001406 	br	81103a90 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81103a40:	d0a03004 	addi	r2,gp,-32576
81103a44:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a48:	00800044 	movi	r2,1
81103a4c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a50:	00000f06 	br	81103a90 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81103a54:	d0a03104 	addi	r2,gp,-32572
81103a58:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a5c:	00800044 	movi	r2,1
81103a60:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a64:	00000a06 	br	81103a90 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81103a68:	d0a03204 	addi	r2,gp,-32568
81103a6c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a70:	00800044 	movi	r2,1
81103a74:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a78:	00000506 	br	81103a90 <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81103a7c:	d0a03304 	addi	r2,gp,-32564
81103a80:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a84:	00800044 	movi	r2,1
81103a88:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a8c:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
81103a90:	e0bffa17 	ldw	r2,-24(fp)
81103a94:	10800058 	cmpnei	r2,r2,1
81103a98:	10002b1e 	bne	r2,zero,81103b48 <b_SpaceWire_Interface_Enable_Control+0x1d8>
81103a9c:	e0ffff17 	ldw	r3,-4(fp)
81103aa0:	e0bffc17 	ldw	r2,-16(fp)
81103aa4:	1884703a 	and	r2,r3,r2
81103aa8:	10002726 	beq	r2,zero,81103b48 <b_SpaceWire_Interface_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
81103aac:	e0bffe03 	ldbu	r2,-8(fp)
81103ab0:	10000326 	beq	r2,zero,81103ac0 <b_SpaceWire_Interface_Enable_Control+0x150>
81103ab4:	10800060 	cmpeqi	r2,r2,1
81103ab8:	1000121e 	bne	r2,zero,81103b04 <b_SpaceWire_Interface_Enable_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81103abc:	00002306 	br	81103b4c <b_SpaceWire_Interface_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_EnableMask;
81103ac0:	e0bffb17 	ldw	r2,-20(fp)
81103ac4:	10c00017 	ldw	r3,0(r2)
81103ac8:	e0bfff17 	ldw	r2,-4(fp)
81103acc:	0084303a 	nor	r2,zero,r2
81103ad0:	1886703a 	and	r3,r3,r2
81103ad4:	e0bffb17 	ldw	r2,-20(fp)
81103ad8:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103adc:	e0fffd07 	ldb	r3,-12(fp)
81103ae0:	e0bffb17 	ldw	r2,-20(fp)
81103ae4:	10800017 	ldw	r2,0(r2)
81103ae8:	100d883a 	mov	r6,r2
81103aec:	000b883a 	mov	r5,zero
81103af0:	1809883a 	mov	r4,r3
81103af4:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103af8:	00800044 	movi	r2,1
81103afc:	e0bffa15 	stw	r2,-24(fp)
				break;
81103b00:	00001006 	br	81103b44 <b_SpaceWire_Interface_Enable_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_EnableMask;
81103b04:	e0bffb17 	ldw	r2,-20(fp)
81103b08:	10c00017 	ldw	r3,0(r2)
81103b0c:	e0bfff17 	ldw	r2,-4(fp)
81103b10:	1886b03a 	or	r3,r3,r2
81103b14:	e0bffb17 	ldw	r2,-20(fp)
81103b18:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103b1c:	e0fffd07 	ldb	r3,-12(fp)
81103b20:	e0bffb17 	ldw	r2,-20(fp)
81103b24:	10800017 	ldw	r2,0(r2)
81103b28:	100d883a 	mov	r6,r2
81103b2c:	000b883a 	mov	r5,zero
81103b30:	1809883a 	mov	r4,r3
81103b34:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103b38:	00800044 	movi	r2,1
81103b3c:	e0bffa15 	stw	r2,-24(fp)
				break;
81103b40:	0001883a 	nop

			}
		} else {
81103b44:	00000106 	br	81103b4c <b_SpaceWire_Interface_Enable_Control+0x1dc>
			bSuccess = FALSE;
81103b48:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103b4c:	e0bffa17 	ldw	r2,-24(fp)
	}
81103b50:	e037883a 	mov	sp,fp
81103b54:	dfc00117 	ldw	ra,4(sp)
81103b58:	df000017 	ldw	fp,0(sp)
81103b5c:	dec00204 	addi	sp,sp,8
81103b60:	f800283a 	ret

81103b64 <b_SpaceWire_Interface_Mode_Control>:

	bool b_SpaceWire_Interface_Mode_Control(char c_SpwID, alt_u8 uc_InterfaceMode){
81103b64:	defffa04 	addi	sp,sp,-24
81103b68:	dfc00515 	stw	ra,20(sp)
81103b6c:	df000415 	stw	fp,16(sp)
81103b70:	df000404 	addi	fp,sp,16
81103b74:	2007883a 	mov	r3,r4
81103b78:	2805883a 	mov	r2,r5
81103b7c:	e0fffe05 	stb	r3,-8(fp)
81103b80:	e0bfff05 	stb	r2,-4(fp)
		bool bSuccess = FALSE;
81103b84:	e03ffc15 	stw	zero,-16(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103b88:	d0a02c04 	addi	r2,gp,-32592
81103b8c:	e0bffd15 	stw	r2,-12(fp)
		switch (c_SpwID) {
81103b90:	e0bffe07 	ldb	r2,-8(fp)
81103b94:	10bfefc4 	addi	r2,r2,-65
81103b98:	10c00228 	cmpgeui	r3,r2,8
81103b9c:	1800361e 	bne	r3,zero,81103c78 <b_SpaceWire_Interface_Mode_Control+0x114>
81103ba0:	100690ba 	slli	r3,r2,2
81103ba4:	00a04434 	movhi	r2,33040
81103ba8:	108eee04 	addi	r2,r2,15288
81103bac:	1885883a 	add	r2,r3,r2
81103bb0:	10800017 	ldw	r2,0(r2)
81103bb4:	1000683a 	jmp	r2
81103bb8:	81103bd8 	cmpnei	r4,r16,16623
81103bbc:	81103bec 	andhi	r4,r16,16623
81103bc0:	81103c00 	call	881103c0 <__reset+0x20f03c0>
81103bc4:	81103c14 	ori	r4,r16,16624
81103bc8:	81103c28 	cmpgeui	r4,r16,16624
81103bcc:	81103c3c 	xorhi	r4,r16,16624
81103bd0:	81103c50 	cmplti	r4,r16,16625
81103bd4:	81103c64 	muli	r4,r16,16625
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103bd8:	d0a02c04 	addi	r2,gp,-32592
81103bdc:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81103be0:	00800044 	movi	r2,1
81103be4:	e0bffc15 	stw	r2,-16(fp)
			break;
81103be8:	00002306 	br	81103c78 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81103bec:	d0a02d04 	addi	r2,gp,-32588
81103bf0:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81103bf4:	00800044 	movi	r2,1
81103bf8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103bfc:	00001e06 	br	81103c78 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103c00:	d0a02e04 	addi	r2,gp,-32584
81103c04:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81103c08:	00800044 	movi	r2,1
81103c0c:	e0bffc15 	stw	r2,-16(fp)
			break;
81103c10:	00001906 	br	81103c78 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103c14:	d0a02f04 	addi	r2,gp,-32580
81103c18:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81103c1c:	00800044 	movi	r2,1
81103c20:	e0bffc15 	stw	r2,-16(fp)
			break;
81103c24:	00001406 	br	81103c78 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81103c28:	d0a03004 	addi	r2,gp,-32576
81103c2c:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81103c30:	00800044 	movi	r2,1
81103c34:	e0bffc15 	stw	r2,-16(fp)
			break;
81103c38:	00000f06 	br	81103c78 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81103c3c:	d0a03104 	addi	r2,gp,-32572
81103c40:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81103c44:	00800044 	movi	r2,1
81103c48:	e0bffc15 	stw	r2,-16(fp)
			break;
81103c4c:	00000a06 	br	81103c78 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81103c50:	d0a03204 	addi	r2,gp,-32568
81103c54:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81103c58:	00800044 	movi	r2,1
81103c5c:	e0bffc15 	stw	r2,-16(fp)
			break;
81103c60:	00000506 	br	81103c78 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81103c64:	d0a03304 	addi	r2,gp,-32564
81103c68:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81103c6c:	00800044 	movi	r2,1
81103c70:	e0bffc15 	stw	r2,-16(fp)
			break;
81103c74:	0001883a 	nop
		}
		if (bSuccess == TRUE){
81103c78:	e0bffc17 	ldw	r2,-16(fp)
81103c7c:	10800058 	cmpnei	r2,r2,1
81103c80:	10007b1e 	bne	r2,zero,81103e70 <b_SpaceWire_Interface_Mode_Control+0x30c>
			switch (uc_InterfaceMode){
81103c84:	e0bfff03 	ldbu	r2,-4(fp)
81103c88:	10c00060 	cmpeqi	r3,r2,1
81103c8c:	1800241e 	bne	r3,zero,81103d20 <b_SpaceWire_Interface_Mode_Control+0x1bc>
81103c90:	10c00088 	cmpgei	r3,r2,2
81103c94:	1800021e 	bne	r3,zero,81103ca0 <b_SpaceWire_Interface_Mode_Control+0x13c>
81103c98:	10000626 	beq	r2,zero,81103cb4 <b_SpaceWire_Interface_Mode_Control+0x150>
81103c9c:	00007206 	br	81103e68 <b_SpaceWire_Interface_Mode_Control+0x304>
81103ca0:	10c000a0 	cmpeqi	r3,r2,2
81103ca4:	1800391e 	bne	r3,zero,81103d8c <b_SpaceWire_Interface_Mode_Control+0x228>
81103ca8:	108000e0 	cmpeqi	r2,r2,3
81103cac:	1000521e 	bne	r2,zero,81103df8 <b_SpaceWire_Interface_Mode_Control+0x294>
81103cb0:	00006d06 	br	81103e68 <b_SpaceWire_Interface_Mode_Control+0x304>

				case SPWC_INTERFACE_BACKDOOR_MODE:
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK;
81103cb4:	e0bffd17 	ldw	r2,-12(fp)
81103cb8:	10800017 	ldw	r2,0(r2)
81103cbc:	10c40014 	ori	r3,r2,4096
81103cc0:	e0bffd17 	ldw	r2,-12(fp)
81103cc4:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103cc8:	e0bffd17 	ldw	r2,-12(fp)
81103ccc:	10c00017 	ldw	r3,0(r2)
81103cd0:	00bdffc4 	movi	r2,-2049
81103cd4:	1886703a 	and	r3,r3,r2
81103cd8:	e0bffd17 	ldw	r2,-12(fp)
81103cdc:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103ce0:	e0bffd17 	ldw	r2,-12(fp)
81103ce4:	10c00017 	ldw	r3,0(r2)
81103ce8:	00bfdfc4 	movi	r2,-129
81103cec:	1886703a 	and	r3,r3,r2
81103cf0:	e0bffd17 	ldw	r2,-12(fp)
81103cf4:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103cf8:	e0fffe07 	ldb	r3,-8(fp)
81103cfc:	e0bffd17 	ldw	r2,-12(fp)
81103d00:	10800017 	ldw	r2,0(r2)
81103d04:	100d883a 	mov	r6,r2
81103d08:	000b883a 	mov	r5,zero
81103d0c:	1809883a 	mov	r4,r3
81103d10:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103d14:	00800044 	movi	r2,1
81103d18:	e0bffc15 	stw	r2,-16(fp)
				break;
81103d1c:	00005506 	br	81103e74 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_EXTERNAL_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81103d20:	e0bffd17 	ldw	r2,-12(fp)
81103d24:	10c00017 	ldw	r3,0(r2)
81103d28:	00bbffc4 	movi	r2,-4097
81103d2c:	1886703a 	and	r3,r3,r2
81103d30:	e0bffd17 	ldw	r2,-12(fp)
81103d34:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK;
81103d38:	e0bffd17 	ldw	r2,-12(fp)
81103d3c:	10800017 	ldw	r2,0(r2)
81103d40:	10c20014 	ori	r3,r2,2048
81103d44:	e0bffd17 	ldw	r2,-12(fp)
81103d48:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103d4c:	e0bffd17 	ldw	r2,-12(fp)
81103d50:	10c00017 	ldw	r3,0(r2)
81103d54:	00bfdfc4 	movi	r2,-129
81103d58:	1886703a 	and	r3,r3,r2
81103d5c:	e0bffd17 	ldw	r2,-12(fp)
81103d60:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103d64:	e0fffe07 	ldb	r3,-8(fp)
81103d68:	e0bffd17 	ldw	r2,-12(fp)
81103d6c:	10800017 	ldw	r2,0(r2)
81103d70:	100d883a 	mov	r6,r2
81103d74:	000b883a 	mov	r5,zero
81103d78:	1809883a 	mov	r4,r3
81103d7c:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103d80:	00800044 	movi	r2,1
81103d84:	e0bffc15 	stw	r2,-16(fp)
				break;
81103d88:	00003a06 	br	81103e74 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81103d8c:	e0bffd17 	ldw	r2,-12(fp)
81103d90:	10c00017 	ldw	r3,0(r2)
81103d94:	00bbffc4 	movi	r2,-4097
81103d98:	1886703a 	and	r3,r3,r2
81103d9c:	e0bffd17 	ldw	r2,-12(fp)
81103da0:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103da4:	e0bffd17 	ldw	r2,-12(fp)
81103da8:	10c00017 	ldw	r3,0(r2)
81103dac:	00bdffc4 	movi	r2,-2049
81103db0:	1886703a 	and	r3,r3,r2
81103db4:	e0bffd17 	ldw	r2,-12(fp)
81103db8:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK;
81103dbc:	e0bffd17 	ldw	r2,-12(fp)
81103dc0:	10800017 	ldw	r2,0(r2)
81103dc4:	10c02014 	ori	r3,r2,128
81103dc8:	e0bffd17 	ldw	r2,-12(fp)
81103dcc:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103dd0:	e0fffe07 	ldb	r3,-8(fp)
81103dd4:	e0bffd17 	ldw	r2,-12(fp)
81103dd8:	10800017 	ldw	r2,0(r2)
81103ddc:	100d883a 	mov	r6,r2
81103de0:	000b883a 	mov	r5,zero
81103de4:	1809883a 	mov	r4,r3
81103de8:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103dec:	00800044 	movi	r2,1
81103df0:	e0bffc15 	stw	r2,-16(fp)
				break;
81103df4:	00001f06 	br	81103e74 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_NORMAL_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81103df8:	e0bffd17 	ldw	r2,-12(fp)
81103dfc:	10c00017 	ldw	r3,0(r2)
81103e00:	00bbffc4 	movi	r2,-4097
81103e04:	1886703a 	and	r3,r3,r2
81103e08:	e0bffd17 	ldw	r2,-12(fp)
81103e0c:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103e10:	e0bffd17 	ldw	r2,-12(fp)
81103e14:	10c00017 	ldw	r3,0(r2)
81103e18:	00bdffc4 	movi	r2,-2049
81103e1c:	1886703a 	and	r3,r3,r2
81103e20:	e0bffd17 	ldw	r2,-12(fp)
81103e24:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103e28:	e0bffd17 	ldw	r2,-12(fp)
81103e2c:	10c00017 	ldw	r3,0(r2)
81103e30:	00bfdfc4 	movi	r2,-129
81103e34:	1886703a 	and	r3,r3,r2
81103e38:	e0bffd17 	ldw	r2,-12(fp)
81103e3c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103e40:	e0fffe07 	ldb	r3,-8(fp)
81103e44:	e0bffd17 	ldw	r2,-12(fp)
81103e48:	10800017 	ldw	r2,0(r2)
81103e4c:	100d883a 	mov	r6,r2
81103e50:	000b883a 	mov	r5,zero
81103e54:	1809883a 	mov	r4,r3
81103e58:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103e5c:	00800044 	movi	r2,1
81103e60:	e0bffc15 	stw	r2,-16(fp)
				break;
81103e64:	00000306 	br	81103e74 <b_SpaceWire_Interface_Mode_Control+0x310>
				
				default:
					bSuccess = FALSE;
81103e68:	e03ffc15 	stw	zero,-16(fp)
81103e6c:	00000106 	br	81103e74 <b_SpaceWire_Interface_Mode_Control+0x310>
	
			}
		} else {
			bSuccess = FALSE;
81103e70:	e03ffc15 	stw	zero,-16(fp)
		}

		return bSuccess;
81103e74:	e0bffc17 	ldw	r2,-16(fp)
	}
81103e78:	e037883a 	mov	sp,fp
81103e7c:	dfc00117 	ldw	ra,4(sp)
81103e80:	df000017 	ldw	fp,0(sp)
81103e84:	dec00204 	addi	sp,sp,8
81103e88:	f800283a 	ret

81103e8c <v_SpaceWire_Interface_Force_Reset>:

	void v_SpaceWire_Interface_Force_Reset(char c_SpwID){
81103e8c:	defffc04 	addi	sp,sp,-16
81103e90:	dfc00315 	stw	ra,12(sp)
81103e94:	df000215 	stw	fp,8(sp)
81103e98:	df000204 	addi	fp,sp,8
81103e9c:	2005883a 	mov	r2,r4
81103ea0:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103ea4:	d0a02c04 	addi	r2,gp,-32592
81103ea8:	e0bffe15 	stw	r2,-8(fp)
		switch (c_SpwID) {
81103eac:	e0bfff07 	ldb	r2,-4(fp)
81103eb0:	10bfefc4 	addi	r2,r2,-65
81103eb4:	10c00228 	cmpgeui	r3,r2,8
81103eb8:	1800261e 	bne	r3,zero,81103f54 <v_SpaceWire_Interface_Force_Reset+0xc8>
81103ebc:	100690ba 	slli	r3,r2,2
81103ec0:	00a04434 	movhi	r2,33040
81103ec4:	108fb504 	addi	r2,r2,16084
81103ec8:	1885883a 	add	r2,r3,r2
81103ecc:	10800017 	ldw	r2,0(r2)
81103ed0:	1000683a 	jmp	r2
81103ed4:	81103ef4 	orhi	r4,r16,16635
81103ed8:	81103f00 	call	881103f0 <__reset+0x20f03f0>
81103edc:	81103f0c 	andi	r4,r16,16636
81103ee0:	81103f18 	cmpnei	r4,r16,16636
81103ee4:	81103f24 	muli	r4,r16,16636
81103ee8:	81103f30 	cmpltui	r4,r16,16636
81103eec:	81103f3c 	xorhi	r4,r16,16636
81103ef0:	81103f48 	cmpgei	r4,r16,16637
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103ef4:	d0a02c04 	addi	r2,gp,-32592
81103ef8:	e0bffe15 	stw	r2,-8(fp)
			break;
81103efc:	00001506 	br	81103f54 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81103f00:	d0a02d04 	addi	r2,gp,-32588
81103f04:	e0bffe15 	stw	r2,-8(fp)
			break;
81103f08:	00001206 	br	81103f54 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103f0c:	d0a02e04 	addi	r2,gp,-32584
81103f10:	e0bffe15 	stw	r2,-8(fp)
			break;
81103f14:	00000f06 	br	81103f54 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103f18:	d0a02f04 	addi	r2,gp,-32580
81103f1c:	e0bffe15 	stw	r2,-8(fp)
			break;
81103f20:	00000c06 	br	81103f54 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81103f24:	d0a03004 	addi	r2,gp,-32576
81103f28:	e0bffe15 	stw	r2,-8(fp)
			break;
81103f2c:	00000906 	br	81103f54 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81103f30:	d0a03104 	addi	r2,gp,-32572
81103f34:	e0bffe15 	stw	r2,-8(fp)
			break;
81103f38:	00000606 	br	81103f54 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81103f3c:	d0a03204 	addi	r2,gp,-32568
81103f40:	e0bffe15 	stw	r2,-8(fp)
			break;
81103f44:	00000306 	br	81103f54 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81103f48:	d0a03304 	addi	r2,gp,-32564
81103f4c:	e0bffe15 	stw	r2,-8(fp)
			break;
81103f50:	0001883a 	nop
		}
		SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value | SPWC_CODEC_FORCE_RESET_CONTROL_BIT_MASK);
81103f54:	e0ffff07 	ldb	r3,-4(fp)
81103f58:	e0bffe17 	ldw	r2,-8(fp)
81103f5c:	10800017 	ldw	r2,0(r2)
81103f60:	10801014 	ori	r2,r2,64
81103f64:	100d883a 	mov	r6,r2
81103f68:	000b883a 	mov	r5,zero
81103f6c:	1809883a 	mov	r4,r3
81103f70:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>

	}
81103f74:	0001883a 	nop
81103f78:	e037883a 	mov	sp,fp
81103f7c:	dfc00117 	ldw	ra,4(sp)
81103f80:	df000017 	ldw	fp,0(sp)
81103f84:	dec00204 	addi	sp,sp,8
81103f88:	f800283a 	ret

81103f8c <v_SpaceWire_Interface_Interrupts_Enable_Control>:

	bool v_SpaceWire_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
81103f8c:	defff804 	addi	sp,sp,-32
81103f90:	dfc00715 	stw	ra,28(sp)
81103f94:	df000615 	stw	fp,24(sp)
81103f98:	df000604 	addi	fp,sp,24
81103f9c:	2007883a 	mov	r3,r4
81103fa0:	2805883a 	mov	r2,r5
81103fa4:	e1bfff15 	stw	r6,-4(fp)
81103fa8:	e0fffd05 	stb	r3,-12(fp)
81103fac:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81103fb0:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_ENABLE_BIT_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | SPWC_LINK_RUNNING_INTERRUPT_ENABLE_BIT_MASK;
81103fb4:	00800e04 	movi	r2,56
81103fb8:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103fbc:	d0a02c04 	addi	r2,gp,-32592
81103fc0:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81103fc4:	e0bffd07 	ldb	r2,-12(fp)
81103fc8:	10bfefc4 	addi	r2,r2,-65
81103fcc:	10c00228 	cmpgeui	r3,r2,8
81103fd0:	1800361e 	bne	r3,zero,811040ac <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
81103fd4:	100690ba 	slli	r3,r2,2
81103fd8:	00a04434 	movhi	r2,33040
81103fdc:	108ffb04 	addi	r2,r2,16364
81103fe0:	1885883a 	add	r2,r3,r2
81103fe4:	10800017 	ldw	r2,0(r2)
81103fe8:	1000683a 	jmp	r2
81103fec:	8110400c 	andi	r4,r16,16640
81103ff0:	81104020 	cmpeqi	r4,r16,16640
81103ff4:	81104034 	orhi	r4,r16,16640
81103ff8:	81104048 	cmpgei	r4,r16,16641
81103ffc:	8110405c 	xori	r4,r16,16641
81104000:	81104070 	cmpltui	r4,r16,16641
81104004:	81104084 	addi	r4,r16,16642
81104008:	81104098 	cmpnei	r4,r16,16642
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110400c:	d0a02c04 	addi	r2,gp,-32592
81104010:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104014:	00800044 	movi	r2,1
81104018:	e0bffa15 	stw	r2,-24(fp)
			break;
8110401c:	00002306 	br	811040ac <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81104020:	d0a02d04 	addi	r2,gp,-32588
81104024:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104028:	00800044 	movi	r2,1
8110402c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104030:	00001e06 	br	811040ac <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81104034:	d0a02e04 	addi	r2,gp,-32584
81104038:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110403c:	00800044 	movi	r2,1
81104040:	e0bffa15 	stw	r2,-24(fp)
			break;
81104044:	00001906 	br	811040ac <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81104048:	d0a02f04 	addi	r2,gp,-32580
8110404c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104050:	00800044 	movi	r2,1
81104054:	e0bffa15 	stw	r2,-24(fp)
			break;
81104058:	00001406 	br	811040ac <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
8110405c:	d0a03004 	addi	r2,gp,-32576
81104060:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104064:	00800044 	movi	r2,1
81104068:	e0bffa15 	stw	r2,-24(fp)
			break;
8110406c:	00000f06 	br	811040ac <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81104070:	d0a03104 	addi	r2,gp,-32572
81104074:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104078:	00800044 	movi	r2,1
8110407c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104080:	00000a06 	br	811040ac <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81104084:	d0a03204 	addi	r2,gp,-32568
81104088:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110408c:	00800044 	movi	r2,1
81104090:	e0bffa15 	stw	r2,-24(fp)
			break;
81104094:	00000506 	br	811040ac <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81104098:	d0a03304 	addi	r2,gp,-32564
8110409c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811040a0:	00800044 	movi	r2,1
811040a4:	e0bffa15 	stw	r2,-24(fp)
			break;
811040a8:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
811040ac:	e0bffa17 	ldw	r2,-24(fp)
811040b0:	10800058 	cmpnei	r2,r2,1
811040b4:	10002b1e 	bne	r2,zero,81104164 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d8>
811040b8:	e0ffff17 	ldw	r3,-4(fp)
811040bc:	e0bffc17 	ldw	r2,-16(fp)
811040c0:	1884703a 	and	r2,r3,r2
811040c4:	10002726 	beq	r2,zero,81104164 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
811040c8:	e0bffe03 	ldbu	r2,-8(fp)
811040cc:	10000326 	beq	r2,zero,811040dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x150>
811040d0:	10800060 	cmpeqi	r2,r2,1
811040d4:	1000121e 	bne	r2,zero,81104120 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
811040d8:	00002306 	br	81104168 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_InterruptMask;
811040dc:	e0bffb17 	ldw	r2,-20(fp)
811040e0:	10c00017 	ldw	r3,0(r2)
811040e4:	e0bfff17 	ldw	r2,-4(fp)
811040e8:	0084303a 	nor	r2,zero,r2
811040ec:	1886703a 	and	r3,r3,r2
811040f0:	e0bffb17 	ldw	r2,-20(fp)
811040f4:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
811040f8:	e0fffd07 	ldb	r3,-12(fp)
811040fc:	e0bffb17 	ldw	r2,-20(fp)
81104100:	10800017 	ldw	r2,0(r2)
81104104:	100d883a 	mov	r6,r2
81104108:	000b883a 	mov	r5,zero
8110410c:	1809883a 	mov	r4,r3
81104110:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81104114:	00800044 	movi	r2,1
81104118:	e0bffa15 	stw	r2,-24(fp)
				break;
8110411c:	00001006 	br	81104160 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_InterruptMask;
81104120:	e0bffb17 	ldw	r2,-20(fp)
81104124:	10c00017 	ldw	r3,0(r2)
81104128:	e0bfff17 	ldw	r2,-4(fp)
8110412c:	1886b03a 	or	r3,r3,r2
81104130:	e0bffb17 	ldw	r2,-20(fp)
81104134:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81104138:	e0fffd07 	ldb	r3,-12(fp)
8110413c:	e0bffb17 	ldw	r2,-20(fp)
81104140:	10800017 	ldw	r2,0(r2)
81104144:	100d883a 	mov	r6,r2
81104148:	000b883a 	mov	r5,zero
8110414c:	1809883a 	mov	r4,r3
81104150:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81104154:	00800044 	movi	r2,1
81104158:	e0bffa15 	stw	r2,-24(fp)
				break;
8110415c:	0001883a 	nop

			}
		} else {
81104160:	00000106 	br	81104168 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>
			bSuccess = FALSE;
81104164:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81104168:	e0bffa17 	ldw	r2,-24(fp)
	}
8110416c:	e037883a 	mov	sp,fp
81104170:	dfc00117 	ldw	ra,4(sp)
81104174:	df000017 	ldw	fp,0(sp)
81104178:	dec00204 	addi	sp,sp,8
8110417c:	f800283a 	ret

81104180 <ul_SpaceWire_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_SpaceWire_Interface_Interrupts_Flags_Read(char c_SpwID){
81104180:	defffb04 	addi	sp,sp,-20
81104184:	dfc00415 	stw	ra,16(sp)
81104188:	df000315 	stw	fp,12(sp)
8110418c:	df000304 	addi	fp,sp,12
81104190:	2005883a 	mov	r2,r4
81104194:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
81104198:	008001c4 	movi	r2,7
8110419c:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_interrupts_flags_value = SPWC_READ_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
811041a0:	e0bfff07 	ldb	r2,-4(fp)
811041a4:	000b883a 	mov	r5,zero
811041a8:	1009883a 	mov	r4,r2
811041ac:	11037c40 	call	811037c4 <SPWC_READ_REG32>
811041b0:	1007883a 	mov	r3,r2
811041b4:	e0bffd17 	ldw	r2,-12(fp)
811041b8:	1884703a 	and	r2,r3,r2
811041bc:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_interrupts_flags_value;
811041c0:	e0bffe17 	ldw	r2,-8(fp)
	}
811041c4:	e037883a 	mov	sp,fp
811041c8:	dfc00117 	ldw	ra,4(sp)
811041cc:	df000017 	ldw	fp,0(sp)
811041d0:	dec00204 	addi	sp,sp,8
811041d4:	f800283a 	ret

811041d8 <v_SpaceWire_Interface_Interrupts_Flags_Clear>:

	void v_SpaceWire_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
811041d8:	defff904 	addi	sp,sp,-28
811041dc:	dfc00615 	stw	ra,24(sp)
811041e0:	df000515 	stw	fp,20(sp)
811041e4:	df000504 	addi	fp,sp,20
811041e8:	2005883a 	mov	r2,r4
811041ec:	e17fff15 	stw	r5,-4(fp)
811041f0:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
811041f4:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
811041f8:	008001c4 	movi	r2,7
811041fc:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81104200:	d0a02c04 	addi	r2,gp,-32592
81104204:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81104208:	e0bffe07 	ldb	r2,-8(fp)
8110420c:	10bfefc4 	addi	r2,r2,-65
81104210:	10c00228 	cmpgeui	r3,r2,8
81104214:	1800361e 	bne	r3,zero,811042f0 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
81104218:	100690ba 	slli	r3,r2,2
8110421c:	00a04434 	movhi	r2,33040
81104220:	10908c04 	addi	r2,r2,16944
81104224:	1885883a 	add	r2,r3,r2
81104228:	10800017 	ldw	r2,0(r2)
8110422c:	1000683a 	jmp	r2
81104230:	81104250 	cmplti	r4,r16,16649
81104234:	81104264 	muli	r4,r16,16649
81104238:	81104278 	rdprs	r4,r16,16649
8110423c:	8110428c 	andi	r4,r16,16650
81104240:	811042a0 	cmpeqi	r4,r16,16650
81104244:	811042b4 	orhi	r4,r16,16650
81104248:	811042c8 	cmpgei	r4,r16,16651
8110424c:	811042dc 	xori	r4,r16,16651
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81104250:	d0a02c04 	addi	r2,gp,-32592
81104254:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104258:	00800044 	movi	r2,1
8110425c:	e0bffb15 	stw	r2,-20(fp)
			break;
81104260:	00002306 	br	811042f0 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81104264:	d0a02d04 	addi	r2,gp,-32588
81104268:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
8110426c:	00800044 	movi	r2,1
81104270:	e0bffb15 	stw	r2,-20(fp)
			break;
81104274:	00001e06 	br	811042f0 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81104278:	d0a02e04 	addi	r2,gp,-32584
8110427c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104280:	00800044 	movi	r2,1
81104284:	e0bffb15 	stw	r2,-20(fp)
			break;
81104288:	00001906 	br	811042f0 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
8110428c:	d0a02f04 	addi	r2,gp,-32580
81104290:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104294:	00800044 	movi	r2,1
81104298:	e0bffb15 	stw	r2,-20(fp)
			break;
8110429c:	00001406 	br	811042f0 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
811042a0:	d0a03004 	addi	r2,gp,-32576
811042a4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811042a8:	00800044 	movi	r2,1
811042ac:	e0bffb15 	stw	r2,-20(fp)
			break;
811042b0:	00000f06 	br	811042f0 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811042b4:	d0a03104 	addi	r2,gp,-32572
811042b8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811042bc:	00800044 	movi	r2,1
811042c0:	e0bffb15 	stw	r2,-20(fp)
			break;
811042c4:	00000a06 	br	811042f0 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
811042c8:	d0a03204 	addi	r2,gp,-32568
811042cc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811042d0:	00800044 	movi	r2,1
811042d4:	e0bffb15 	stw	r2,-20(fp)
			break;
811042d8:	00000506 	br	811042f0 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
811042dc:	d0a03304 	addi	r2,gp,-32564
811042e0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811042e4:	00800044 	movi	r2,1
811042e8:	e0bffb15 	stw	r2,-20(fp)
			break;
811042ec:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
811042f0:	e0bffb17 	ldw	r2,-20(fp)
811042f4:	10800058 	cmpnei	r2,r2,1
811042f8:	10000d1e 	bne	r2,zero,81104330 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x158>
811042fc:	e0ffff17 	ldw	r3,-4(fp)
81104300:	e0bffd17 	ldw	r2,-12(fp)
81104304:	1884703a 	and	r2,r3,r2
81104308:	10000926 	beq	r2,zero,81104330 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x158>
			SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_spwc_interface_control_status_register_value | ul_spwc_mask));
8110430c:	e13ffe07 	ldb	r4,-8(fp)
81104310:	e0bffc17 	ldw	r2,-16(fp)
81104314:	10c00017 	ldw	r3,0(r2)
81104318:	e0bffd17 	ldw	r2,-12(fp)
8110431c:	1884b03a 	or	r2,r3,r2
81104320:	100d883a 	mov	r6,r2
81104324:	000b883a 	mov	r5,zero
81104328:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
8110432c:	00000106 	br	81104334 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x15c>
		} else {
			bSuccess = FALSE;
81104330:	e03ffb15 	stw	zero,-20(fp)
		}
	}
81104334:	0001883a 	nop
81104338:	e037883a 	mov	sp,fp
8110433c:	dfc00117 	ldw	ra,4(sp)
81104340:	df000017 	ldw	fp,0(sp)
81104344:	dec00204 	addi	sp,sp,8
81104348:	f800283a 	ret

8110434c <v_SpaceWire_Interface_Link_Control>:

	bool v_SpaceWire_Interface_Link_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_ControlMask){
8110434c:	defff804 	addi	sp,sp,-32
81104350:	dfc00715 	stw	ra,28(sp)
81104354:	df000615 	stw	fp,24(sp)
81104358:	df000604 	addi	fp,sp,24
8110435c:	2007883a 	mov	r3,r4
81104360:	2805883a 	mov	r2,r5
81104364:	e1bfff15 	stw	r6,-4(fp)
81104368:	e0fffd05 	stb	r3,-12(fp)
8110436c:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104370:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_AUTOSTART_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK | SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK;
81104374:	0080e004 	movi	r2,896
81104378:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
8110437c:	d0a00004 	addi	r2,gp,-32768
81104380:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81104384:	e0bffd07 	ldb	r2,-12(fp)
81104388:	10bfefc4 	addi	r2,r2,-65
8110438c:	10c00228 	cmpgeui	r3,r2,8
81104390:	1800361e 	bne	r3,zero,8110446c <v_SpaceWire_Interface_Link_Control+0x120>
81104394:	100690ba 	slli	r3,r2,2
81104398:	00a04434 	movhi	r2,33040
8110439c:	1090eb04 	addi	r2,r2,17324
811043a0:	1885883a 	add	r2,r3,r2
811043a4:	10800017 	ldw	r2,0(r2)
811043a8:	1000683a 	jmp	r2
811043ac:	811043cc 	andi	r4,r16,16655
811043b0:	811043e0 	cmpeqi	r4,r16,16655
811043b4:	811043f4 	orhi	r4,r16,16655
811043b8:	81104408 	cmpgei	r4,r16,16656
811043bc:	8110441c 	xori	r4,r16,16656
811043c0:	81104430 	cmpltui	r4,r16,16656
811043c4:	81104444 	addi	r4,r16,16657
811043c8:	81104458 	cmpnei	r4,r16,16657
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811043cc:	d0a00004 	addi	r2,gp,-32768
811043d0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043d4:	00800044 	movi	r2,1
811043d8:	e0bffa15 	stw	r2,-24(fp)
			break;
811043dc:	00002306 	br	8110446c <v_SpaceWire_Interface_Link_Control+0x120>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
811043e0:	d0a00104 	addi	r2,gp,-32764
811043e4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043e8:	00800044 	movi	r2,1
811043ec:	e0bffa15 	stw	r2,-24(fp)
			break;
811043f0:	00001e06 	br	8110446c <v_SpaceWire_Interface_Link_Control+0x120>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
811043f4:	d0a00204 	addi	r2,gp,-32760
811043f8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043fc:	00800044 	movi	r2,1
81104400:	e0bffa15 	stw	r2,-24(fp)
			break;
81104404:	00001906 	br	8110446c <v_SpaceWire_Interface_Link_Control+0x120>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81104408:	d0a00304 	addi	r2,gp,-32756
8110440c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104410:	00800044 	movi	r2,1
81104414:	e0bffa15 	stw	r2,-24(fp)
			break;
81104418:	00001406 	br	8110446c <v_SpaceWire_Interface_Link_Control+0x120>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
8110441c:	d0a00404 	addi	r2,gp,-32752
81104420:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104424:	00800044 	movi	r2,1
81104428:	e0bffa15 	stw	r2,-24(fp)
			break;
8110442c:	00000f06 	br	8110446c <v_SpaceWire_Interface_Link_Control+0x120>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
81104430:	d0a00504 	addi	r2,gp,-32748
81104434:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104438:	00800044 	movi	r2,1
8110443c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104440:	00000a06 	br	8110446c <v_SpaceWire_Interface_Link_Control+0x120>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
81104444:	d0a00604 	addi	r2,gp,-32744
81104448:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110444c:	00800044 	movi	r2,1
81104450:	e0bffa15 	stw	r2,-24(fp)
			break;
81104454:	00000506 	br	8110446c <v_SpaceWire_Interface_Link_Control+0x120>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
81104458:	d0a00704 	addi	r2,gp,-32740
8110445c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104460:	00800044 	movi	r2,1
81104464:	e0bffa15 	stw	r2,-24(fp)
			break;
81104468:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
8110446c:	e0bffa17 	ldw	r2,-24(fp)
81104470:	10800058 	cmpnei	r2,r2,1
81104474:	10002b1e 	bne	r2,zero,81104524 <v_SpaceWire_Interface_Link_Control+0x1d8>
81104478:	e0ffff17 	ldw	r3,-4(fp)
8110447c:	e0bffc17 	ldw	r2,-16(fp)
81104480:	1884703a 	and	r2,r3,r2
81104484:	10002726 	beq	r2,zero,81104524 <v_SpaceWire_Interface_Link_Control+0x1d8>
			switch (uc_RegisterOperation){
81104488:	e0bffe03 	ldbu	r2,-8(fp)
8110448c:	10000326 	beq	r2,zero,8110449c <v_SpaceWire_Interface_Link_Control+0x150>
81104490:	10800060 	cmpeqi	r2,r2,1
81104494:	1000121e 	bne	r2,zero,811044e0 <v_SpaceWire_Interface_Link_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81104498:	00002306 	br	81104528 <v_SpaceWire_Interface_Link_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_spacewire_link_control_status_register_value &= ~ul_ControlMask;
8110449c:	e0bffb17 	ldw	r2,-20(fp)
811044a0:	10c00017 	ldw	r3,0(r2)
811044a4:	e0bfff17 	ldw	r2,-4(fp)
811044a8:	0084303a 	nor	r2,zero,r2
811044ac:	1886703a 	and	r3,r3,r2
811044b0:	e0bffb17 	ldw	r2,-20(fp)
811044b4:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
811044b8:	e0fffd07 	ldb	r3,-12(fp)
811044bc:	e0bffb17 	ldw	r2,-20(fp)
811044c0:	10800017 	ldw	r2,0(r2)
811044c4:	100d883a 	mov	r6,r2
811044c8:	01400044 	movi	r5,1
811044cc:	1809883a 	mov	r4,r3
811044d0:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
811044d4:	00800044 	movi	r2,1
811044d8:	e0bffa15 	stw	r2,-24(fp)
				break;
811044dc:	00001006 	br	81104520 <v_SpaceWire_Interface_Link_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_spacewire_link_control_status_register_value |= ul_ControlMask;
811044e0:	e0bffb17 	ldw	r2,-20(fp)
811044e4:	10c00017 	ldw	r3,0(r2)
811044e8:	e0bfff17 	ldw	r2,-4(fp)
811044ec:	1886b03a 	or	r3,r3,r2
811044f0:	e0bffb17 	ldw	r2,-20(fp)
811044f4:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
811044f8:	e0fffd07 	ldb	r3,-12(fp)
811044fc:	e0bffb17 	ldw	r2,-20(fp)
81104500:	10800017 	ldw	r2,0(r2)
81104504:	100d883a 	mov	r6,r2
81104508:	01400044 	movi	r5,1
8110450c:	1809883a 	mov	r4,r3
81104510:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81104514:	00800044 	movi	r2,1
81104518:	e0bffa15 	stw	r2,-24(fp)
				break;
8110451c:	0001883a 	nop

			}
		} else {
81104520:	00000106 	br	81104528 <v_SpaceWire_Interface_Link_Control+0x1dc>
			bSuccess = FALSE;
81104524:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81104528:	e0bffa17 	ldw	r2,-24(fp)
	}
8110452c:	e037883a 	mov	sp,fp
81104530:	dfc00117 	ldw	ra,4(sp)
81104534:	df000017 	ldw	fp,0(sp)
81104538:	dec00204 	addi	sp,sp,8
8110453c:	f800283a 	ret

81104540 <ul_SpaceWire_Interface_Link_Error_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Error_Read(char c_SpwID){
81104540:	defffb04 	addi	sp,sp,-20
81104544:	dfc00415 	stw	ra,16(sp)
81104548:	df000315 	stw	fp,12(sp)
8110454c:	df000304 	addi	fp,sp,12
81104550:	2005883a 	mov	r2,r4
81104554:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_DISCONNECT_ERROR_BIT_MASK | SPWC_LINK_PARITY_ERROR_BIT_MASK | SPWC_LINK_ESCAPE_ERROR_BIT_MASK | SPWC_LINK_CREDIT_ERROR_BIT_MASK;
81104558:	00801e04 	movi	r2,120
8110455c:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_error_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
81104560:	e0bfff07 	ldb	r2,-4(fp)
81104564:	01400044 	movi	r5,1
81104568:	1009883a 	mov	r4,r2
8110456c:	11037c40 	call	811037c4 <SPWC_READ_REG32>
81104570:	1007883a 	mov	r3,r2
81104574:	e0bffd17 	ldw	r2,-12(fp)
81104578:	1884703a 	and	r2,r3,r2
8110457c:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_error_value;
81104580:	e0bffe17 	ldw	r2,-8(fp)
	}
81104584:	e037883a 	mov	sp,fp
81104588:	dfc00117 	ldw	ra,4(sp)
8110458c:	df000017 	ldw	fp,0(sp)
81104590:	dec00204 	addi	sp,sp,8
81104594:	f800283a 	ret

81104598 <ul_SpaceWire_Interface_Link_Status_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Status_Read(char c_SpwID){
81104598:	defffb04 	addi	sp,sp,-20
8110459c:	dfc00415 	stw	ra,16(sp)
811045a0:	df000315 	stw	fp,12(sp)
811045a4:	df000304 	addi	fp,sp,12
811045a8:	2005883a 	mov	r2,r4
811045ac:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_STARTED_STATUS_BIT_MASK | SPWC_LINK_CONNECTING_STATUS_BIT_MASK | SPWC_LINK_RUNNING_STATUS_BIT_MASK;
811045b0:	008001c4 	movi	r2,7
811045b4:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_status_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
811045b8:	e0bfff07 	ldb	r2,-4(fp)
811045bc:	01400044 	movi	r5,1
811045c0:	1009883a 	mov	r4,r2
811045c4:	11037c40 	call	811037c4 <SPWC_READ_REG32>
811045c8:	1007883a 	mov	r3,r2
811045cc:	e0bffd17 	ldw	r2,-12(fp)
811045d0:	1884703a 	and	r2,r3,r2
811045d4:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_status_value;
811045d8:	e0bffe17 	ldw	r2,-8(fp)
	}
811045dc:	e037883a 	mov	sp,fp
811045e0:	dfc00117 	ldw	ra,4(sp)
811045e4:	df000017 	ldw	fp,0(sp)
811045e8:	dec00204 	addi	sp,sp,8
811045ec:	f800283a 	ret

811045f0 <v_SpaceWire_Interface_Send_TimeCode>:

	void v_SpaceWire_Interface_Send_TimeCode(char c_SpwID, alt_u8 TimeCode){
811045f0:	defffb04 	addi	sp,sp,-20
811045f4:	dfc00415 	stw	ra,16(sp)
811045f8:	df000315 	stw	fp,12(sp)
811045fc:	df000304 	addi	fp,sp,12
81104600:	2007883a 	mov	r3,r4
81104604:	2805883a 	mov	r2,r5
81104608:	e0fffe05 	stb	r3,-8(fp)
8110460c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = (((alt_u32)TimeCode) << 1) | SPWC_TX_TIMECODE_CONTROL_BIT_MASK;
81104610:	e0bfff03 	ldbu	r2,-4(fp)
81104614:	1085883a 	add	r2,r2,r2
81104618:	10800054 	ori	r2,r2,1
8110461c:	e0bffd15 	stw	r2,-12(fp)
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, ul_spwc_mask);
81104620:	e0bffe07 	ldb	r2,-8(fp)
81104624:	e1bffd17 	ldw	r6,-12(fp)
81104628:	01400084 	movi	r5,2
8110462c:	1009883a 	mov	r4,r2
81104630:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>

	}
81104634:	0001883a 	nop
81104638:	e037883a 	mov	sp,fp
8110463c:	dfc00117 	ldw	ra,4(sp)
81104640:	df000017 	ldw	fp,0(sp)
81104644:	dec00204 	addi	sp,sp,8
81104648:	f800283a 	ret

8110464c <b_SpaceWire_Interface_TimeCode_Arrived>:

	bool b_SpaceWire_Interface_TimeCode_Arrived(char c_SpwID){
8110464c:	defffc04 	addi	sp,sp,-16
81104650:	dfc00315 	stw	ra,12(sp)
81104654:	df000215 	stw	fp,8(sp)
81104658:	df000204 	addi	fp,sp,8
8110465c:	2005883a 	mov	r2,r4
81104660:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_timecode_arrived = FALSE;
81104664:	e03ffe15 	stw	zero,-8(fp)
		
		if (SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS) & SPWC_RX_TIMECODE_STATUS_BIT_MASK) {
81104668:	e0bfff07 	ldb	r2,-4(fp)
8110466c:	01400084 	movi	r5,2
81104670:	1009883a 	mov	r4,r2
81104674:	11037c40 	call	811037c4 <SPWC_READ_REG32>
81104678:	1080006c 	andhi	r2,r2,1
8110467c:	10000226 	beq	r2,zero,81104688 <b_SpaceWire_Interface_TimeCode_Arrived+0x3c>
			b_timecode_arrived = TRUE;
81104680:	00800044 	movi	r2,1
81104684:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_timecode_arrived;
81104688:	e0bffe17 	ldw	r2,-8(fp)
	}
8110468c:	e037883a 	mov	sp,fp
81104690:	dfc00117 	ldw	ra,4(sp)
81104694:	df000017 	ldw	fp,0(sp)
81104698:	dec00204 	addi	sp,sp,8
8110469c:	f800283a 	ret

811046a0 <uc_SpaceWire_Interface_Get_TimeCode>:
	
	alt_u8 uc_SpaceWire_Interface_Get_TimeCode(char c_SpwID){
811046a0:	defffb04 	addi	sp,sp,-20
811046a4:	dfc00415 	stw	ra,16(sp)
811046a8:	df000315 	stw	fp,12(sp)
811046ac:	df000304 	addi	fp,sp,12
811046b0:	2005883a 	mov	r2,r4
811046b4:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_timecode_register = SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS);
811046b8:	e0bfff07 	ldb	r2,-4(fp)
811046bc:	01400084 	movi	r5,2
811046c0:	1009883a 	mov	r4,r2
811046c4:	11037c40 	call	811037c4 <SPWC_READ_REG32>
811046c8:	e0bffd15 	stw	r2,-12(fp)
		
		alt_u8 uc_timecode_value = (alt_u8)((ul_timecode_register & (SPWC_RX_TIMECODE_CONTROL_BITS_MASK | SPWC_RX_TIMECODE_COUNTER_VALUE_MASK)) >> 17);
811046cc:	e0bffd17 	ldw	r2,-12(fp)
811046d0:	10807fac 	andhi	r2,r2,510
811046d4:	1004d47a 	srli	r2,r2,17
811046d8:	e0bffe05 	stb	r2,-8(fp)
	
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, (ul_timecode_register | SPWC_RX_TIMECODE_STATUS_BIT_MASK));
811046dc:	e0ffff07 	ldb	r3,-4(fp)
811046e0:	e0bffd17 	ldw	r2,-12(fp)
811046e4:	10800074 	orhi	r2,r2,1
811046e8:	100d883a 	mov	r6,r2
811046ec:	01400084 	movi	r5,2
811046f0:	1809883a 	mov	r4,r3
811046f4:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>

		return uc_timecode_value;
811046f8:	e0bffe03 	ldbu	r2,-8(fp)
	}
811046fc:	e037883a 	mov	sp,fp
81104700:	dfc00117 	ldw	ra,4(sp)
81104704:	df000017 	ldw	fp,0(sp)
81104708:	dec00204 	addi	sp,sp,8
8110470c:	f800283a 	ret

81104710 <uc_SpaceWire_Interface_Get_TX_Div>:

	alt_u8 uc_SpaceWire_Interface_Get_TX_Div(char c_SpwID){
81104710:	defffb04 	addi	sp,sp,-20
81104714:	dfc00415 	stw	ra,16(sp)
81104718:	df000315 	stw	fp,12(sp)
8110471c:	df000304 	addi	fp,sp,12
81104720:	2005883a 	mov	r2,r4
81104724:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
81104728:	00800134 	movhi	r2,4
8110472c:	10bf0004 	addi	r2,r2,-1024
81104730:	e0bffd15 	stw	r2,-12(fp)
		alt_u8 uc_txdiv_value = (alt_u8)((SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask) >> 10);
81104734:	e0bfff07 	ldb	r2,-4(fp)
81104738:	01400044 	movi	r5,1
8110473c:	1009883a 	mov	r4,r2
81104740:	11037c40 	call	811037c4 <SPWC_READ_REG32>
81104744:	1007883a 	mov	r3,r2
81104748:	e0bffd17 	ldw	r2,-12(fp)
8110474c:	1884703a 	and	r2,r3,r2
81104750:	1004d2ba 	srli	r2,r2,10
81104754:	e0bffe05 	stb	r2,-8(fp)

		return uc_txdiv_value;
81104758:	e0bffe03 	ldbu	r2,-8(fp)
	}
8110475c:	e037883a 	mov	sp,fp
81104760:	dfc00117 	ldw	ra,4(sp)
81104764:	df000017 	ldw	fp,0(sp)
81104768:	dec00204 	addi	sp,sp,8
8110476c:	f800283a 	ret

81104770 <b_SpaceWire_Interface_Set_TX_Div>:

	bool b_SpaceWire_Interface_Set_TX_Div(char c_SpwID, alt_u8 uc_TxDiv){
81104770:	defff804 	addi	sp,sp,-32
81104774:	dfc00715 	stw	ra,28(sp)
81104778:	df000615 	stw	fp,24(sp)
8110477c:	df000604 	addi	fp,sp,24
81104780:	2007883a 	mov	r3,r4
81104784:	2805883a 	mov	r2,r5
81104788:	e0fffe05 	stb	r3,-8(fp)
8110478c:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81104790:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
81104794:	00800134 	movhi	r2,4
81104798:	10bf0004 	addi	r2,r2,-1024
8110479c:	e0bffc15 	stw	r2,-16(fp)
		const alt_u32 ul_txdiv_mask = (alt_u32)(uc_TxDiv << 10);
811047a0:	e0bfff03 	ldbu	r2,-4(fp)
811047a4:	100492ba 	slli	r2,r2,10
811047a8:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811047ac:	d0a00004 	addi	r2,gp,-32768
811047b0:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811047b4:	e0bffe07 	ldb	r2,-8(fp)
811047b8:	10bfefc4 	addi	r2,r2,-65
811047bc:	10c00228 	cmpgeui	r3,r2,8
811047c0:	1800361e 	bne	r3,zero,8110489c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
811047c4:	100690ba 	slli	r3,r2,2
811047c8:	00a04434 	movhi	r2,33040
811047cc:	1091f704 	addi	r2,r2,18396
811047d0:	1885883a 	add	r2,r3,r2
811047d4:	10800017 	ldw	r2,0(r2)
811047d8:	1000683a 	jmp	r2
811047dc:	811047fc 	xorhi	r4,r16,16671
811047e0:	81104810 	cmplti	r4,r16,16672
811047e4:	81104824 	muli	r4,r16,16672
811047e8:	81104838 	rdprs	r4,r16,16672
811047ec:	8110484c 	andi	r4,r16,16673
811047f0:	81104860 	cmpeqi	r4,r16,16673
811047f4:	81104874 	orhi	r4,r16,16673
811047f8:	81104888 	cmpgei	r4,r16,16674
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811047fc:	d0a00004 	addi	r2,gp,-32768
81104800:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104804:	00800044 	movi	r2,1
81104808:	e0bffa15 	stw	r2,-24(fp)
			break;
8110480c:	00002306 	br	8110489c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
81104810:	d0a00104 	addi	r2,gp,-32764
81104814:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104818:	00800044 	movi	r2,1
8110481c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104820:	00001e06 	br	8110489c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
81104824:	d0a00204 	addi	r2,gp,-32760
81104828:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110482c:	00800044 	movi	r2,1
81104830:	e0bffa15 	stw	r2,-24(fp)
			break;
81104834:	00001906 	br	8110489c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81104838:	d0a00304 	addi	r2,gp,-32756
8110483c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104840:	00800044 	movi	r2,1
81104844:	e0bffa15 	stw	r2,-24(fp)
			break;
81104848:	00001406 	br	8110489c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
8110484c:	d0a00404 	addi	r2,gp,-32752
81104850:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104854:	00800044 	movi	r2,1
81104858:	e0bffa15 	stw	r2,-24(fp)
			break;
8110485c:	00000f06 	br	8110489c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
81104860:	d0a00504 	addi	r2,gp,-32748
81104864:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104868:	00800044 	movi	r2,1
8110486c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104870:	00000a06 	br	8110489c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
81104874:	d0a00604 	addi	r2,gp,-32744
81104878:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110487c:	00800044 	movi	r2,1
81104880:	e0bffa15 	stw	r2,-24(fp)
			break;
81104884:	00000506 	br	8110489c <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
81104888:	d0a00704 	addi	r2,gp,-32740
8110488c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104890:	00800044 	movi	r2,1
81104894:	e0bffa15 	stw	r2,-24(fp)
			break;
81104898:	0001883a 	nop
		}
		if (bSuccess == TRUE){
8110489c:	e0bffa17 	ldw	r2,-24(fp)
811048a0:	10800058 	cmpnei	r2,r2,1
811048a4:	1000171e 	bne	r2,zero,81104904 <b_SpaceWire_Interface_Set_TX_Div+0x194>
			*ul_spwc_spacewire_link_control_status_register_value &= ~(ul_spwc_mask);
811048a8:	e0bffb17 	ldw	r2,-20(fp)
811048ac:	10c00017 	ldw	r3,0(r2)
811048b0:	e0bffc17 	ldw	r2,-16(fp)
811048b4:	0084303a 	nor	r2,zero,r2
811048b8:	1886703a 	and	r3,r3,r2
811048bc:	e0bffb17 	ldw	r2,-20(fp)
811048c0:	10c00015 	stw	r3,0(r2)
			*ul_spwc_spacewire_link_control_status_register_value |= ul_txdiv_mask;
811048c4:	e0bffb17 	ldw	r2,-20(fp)
811048c8:	10c00017 	ldw	r3,0(r2)
811048cc:	e0bffd17 	ldw	r2,-12(fp)
811048d0:	1886b03a 	or	r3,r3,r2
811048d4:	e0bffb17 	ldw	r2,-20(fp)
811048d8:	10c00015 	stw	r3,0(r2)
			SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
811048dc:	e0fffe07 	ldb	r3,-8(fp)
811048e0:	e0bffb17 	ldw	r2,-20(fp)
811048e4:	10800017 	ldw	r2,0(r2)
811048e8:	100d883a 	mov	r6,r2
811048ec:	01400044 	movi	r5,1
811048f0:	1809883a 	mov	r4,r3
811048f4:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
811048f8:	00800044 	movi	r2,1
811048fc:	e0bffa15 	stw	r2,-24(fp)
81104900:	00000106 	br	81104908 <b_SpaceWire_Interface_Set_TX_Div+0x198>
		} else {
			bSuccess = FALSE;
81104904:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81104908:	e0bffa17 	ldw	r2,-24(fp)
	}
8110490c:	e037883a 	mov	sp,fp
81104910:	dfc00117 	ldw	ra,4(sp)
81104914:	df000017 	ldw	fp,0(sp)
81104918:	dec00204 	addi	sp,sp,8
8110491c:	f800283a 	ret

81104920 <b_SpaceWire_Interface_Write_TX_Data>:

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){
81104920:	defffa04 	addi	sp,sp,-24
81104924:	dfc00515 	stw	ra,20(sp)
81104928:	df000415 	stw	fp,16(sp)
8110492c:	df000404 	addi	fp,sp,16
81104930:	2807883a 	mov	r3,r5
81104934:	3005883a 	mov	r2,r6
81104938:	e13ffd05 	stb	r4,-12(fp)
8110493c:	e0fffe05 	stb	r3,-8(fp)
81104940:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81104944:	e03ffc15 	stw	zero,-16(fp)
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
81104948:	e0bffd07 	ldb	r2,-12(fp)
8110494c:	014000c4 	movi	r5,3
81104950:	1009883a 	mov	r4,r2
81104954:	11037c40 	call	811037c4 <SPWC_READ_REG32>
81104958:	1081000c 	andi	r2,r2,1024
8110495c:	10000c26 	beq	r2,zero,81104990 <b_SpaceWire_Interface_Write_TX_Data+0x70>
			SPWC_WRITE_REG32(c_SpwID,
81104960:	e13ffd07 	ldb	r4,-12(fp)
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
81104964:	e0bffe03 	ldbu	r2,-8(fp)
81104968:	1080004c 	andi	r2,r2,1
8110496c:	1004923a 	slli	r2,r2,8
81104970:	10c08014 	ori	r3,r2,512
81104974:	e0bfff03 	ldbu	r2,-4(fp)
81104978:	1884b03a 	or	r2,r3,r2

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){

		bool bSuccess = FALSE;
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
			SPWC_WRITE_REG32(c_SpwID,
8110497c:	100d883a 	mov	r6,r2
81104980:	014000c4 	movi	r5,3
81104984:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
			bSuccess = TRUE;
81104988:	00800044 	movi	r2,1
8110498c:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81104990:	e0bffc17 	ldw	r2,-16(fp)
	}
81104994:	e037883a 	mov	sp,fp
81104998:	dfc00117 	ldw	ra,4(sp)
8110499c:	df000017 	ldw	fp,0(sp)
811049a0:	dec00204 	addi	sp,sp,8
811049a4:	f800283a 	ret

811049a8 <b_SpaceWire_Interface_Send_SpaceWire_Data>:

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
811049a8:	defff904 	addi	sp,sp,-28
811049ac:	dfc00615 	stw	ra,24(sp)
811049b0:	df000515 	stw	fp,20(sp)
811049b4:	df000504 	addi	fp,sp,20
811049b8:	2007883a 	mov	r3,r4
811049bc:	e17ffe15 	stw	r5,-8(fp)
811049c0:	3005883a 	mov	r2,r6
811049c4:	e0fffd05 	stb	r3,-12(fp)
811049c8:	e0bfff0d 	sth	r2,-4(fp)
		bool bSuccess = FALSE;
811049cc:	e03ffb15 	stw	zero,-20(fp)

		alt_u16 cnt = 0;
811049d0:	e03ffc0d 	sth	zero,-16(fp)
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
811049d4:	00000306 	br	811049e4 <b_SpaceWire_Interface_Send_SpaceWire_Data+0x3c>
			cnt++;
811049d8:	e0bffc0b 	ldhu	r2,-16(fp)
811049dc:	10800044 	addi	r2,r2,1
811049e0:	e0bffc0d 	sth	r2,-16(fp)

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
		bool bSuccess = FALSE;

		alt_u16 cnt = 0;
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
811049e4:	e13ffd07 	ldb	r4,-12(fp)
811049e8:	e0bffc0b 	ldhu	r2,-16(fp)
811049ec:	e0fffe17 	ldw	r3,-8(fp)
811049f0:	1885883a 	add	r2,r3,r2
811049f4:	10800003 	ldbu	r2,0(r2)
811049f8:	10803fcc 	andi	r2,r2,255
811049fc:	100d883a 	mov	r6,r2
81104a00:	000b883a 	mov	r5,zero
81104a04:	11049200 	call	81104920 <b_SpaceWire_Interface_Write_TX_Data>
81104a08:	10000426 	beq	r2,zero,81104a1c <b_SpaceWire_Interface_Send_SpaceWire_Data+0x74>
81104a0c:	e0fffc0b 	ldhu	r3,-16(fp)
81104a10:	e0bfff0b 	ldhu	r2,-4(fp)
81104a14:	10bfffc4 	addi	r2,r2,-1
81104a18:	18bfef16 	blt	r3,r2,811049d8 <__reset+0xfb0e49d8>
			cnt++;
		}
		if (cnt == (data_size - 1)) {
81104a1c:	e0fffc0b 	ldhu	r3,-16(fp)
81104a20:	e0bfff0b 	ldhu	r2,-4(fp)
81104a24:	10bfffc4 	addi	r2,r2,-1
81104a28:	1880081e 	bne	r3,r2,81104a4c <b_SpaceWire_Interface_Send_SpaceWire_Data+0xa4>
			if (b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 1, 0)){
81104a2c:	e0bffd07 	ldb	r2,-12(fp)
81104a30:	000d883a 	mov	r6,zero
81104a34:	01400044 	movi	r5,1
81104a38:	1009883a 	mov	r4,r2
81104a3c:	11049200 	call	81104920 <b_SpaceWire_Interface_Write_TX_Data>
81104a40:	10000226 	beq	r2,zero,81104a4c <b_SpaceWire_Interface_Send_SpaceWire_Data+0xa4>
				bSuccess = TRUE;
81104a44:	00800044 	movi	r2,1
81104a48:	e0bffb15 	stw	r2,-20(fp)
			}
		}

		return bSuccess;
81104a4c:	e0bffb17 	ldw	r2,-20(fp)
	}
81104a50:	e037883a 	mov	sp,fp
81104a54:	dfc00117 	ldw	ra,4(sp)
81104a58:	df000017 	ldw	fp,0(sp)
81104a5c:	dec00204 	addi	sp,sp,8
81104a60:	f800283a 	ret

81104a64 <b_SpaceWire_Interface_Read_RX_Data>:

	bool b_SpaceWire_Interface_Read_RX_Data(char c_SpwID, alt_u8 *uc_RxFlag, alt_u8 *uc_RxData){
81104a64:	defff904 	addi	sp,sp,-28
81104a68:	dfc00615 	stw	ra,24(sp)
81104a6c:	df000515 	stw	fp,20(sp)
81104a70:	df000504 	addi	fp,sp,20
81104a74:	2005883a 	mov	r2,r4
81104a78:	e17ffe15 	stw	r5,-8(fp)
81104a7c:	e1bfff15 	stw	r6,-4(fp)
81104a80:	e0bffd05 	stb	r2,-12(fp)

		bool bSuccess = FALSE;
81104a84:	e03ffb15 	stw	zero,-20(fp)
		alt_u32 backdoor_register = 0;
81104a88:	e03ffc15 	stw	zero,-16(fp)

		backdoor_register = SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS);
81104a8c:	e0bffd07 	ldb	r2,-12(fp)
81104a90:	014000c4 	movi	r5,3
81104a94:	1009883a 	mov	r4,r2
81104a98:	11037c40 	call	811037c4 <SPWC_READ_REG32>
81104a9c:	e0bffc15 	stw	r2,-16(fp)
		if (backdoor_register & SPWC_RX_CODEC_RX_DATAVALID_STATUS_BIT_MASK) {
81104aa0:	e0bffc17 	ldw	r2,-16(fp)
81104aa4:	1081002c 	andhi	r2,r2,1024
81104aa8:	10001326 	beq	r2,zero,81104af8 <b_SpaceWire_Interface_Read_RX_Data+0x94>

			*uc_RxFlag = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_FLAG_VALUE_MASK) >> 24);
81104aac:	e0bffc17 	ldw	r2,-16(fp)
81104ab0:	1080402c 	andhi	r2,r2,256
81104ab4:	1004d63a 	srli	r2,r2,24
81104ab8:	1007883a 	mov	r3,r2
81104abc:	e0bffe17 	ldw	r2,-8(fp)
81104ac0:	10c00005 	stb	r3,0(r2)
			*uc_RxData = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_DATA_VALUE_MASK) >> 16);
81104ac4:	e0bffc17 	ldw	r2,-16(fp)
81104ac8:	10803fec 	andhi	r2,r2,255
81104acc:	1004d43a 	srli	r2,r2,16
81104ad0:	1007883a 	mov	r3,r2
81104ad4:	e0bfff17 	ldw	r2,-4(fp)
81104ad8:	10c00005 	stb	r3,0(r2)

			SPWC_WRITE_REG32(c_SpwID,
81104adc:	e0bffd07 	ldb	r2,-12(fp)
81104ae0:	01808034 	movhi	r6,512
81104ae4:	014000c4 	movi	r5,3
81104ae8:	1009883a 	mov	r4,r2
81104aec:	11036e40 	call	811036e4 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_RX_CODEC_RX_READ_CONTROL_BIT_MASK));
			bSuccess = TRUE;
81104af0:	00800044 	movi	r2,1
81104af4:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81104af8:	e0bffb17 	ldw	r2,-20(fp)
	}
81104afc:	e037883a 	mov	sp,fp
81104b00:	dfc00117 	ldw	ra,4(sp)
81104b04:	df000017 	ldw	fp,0(sp)
81104b08:	dec00204 	addi	sp,sp,8
81104b0c:	f800283a 	ret

81104b10 <ui_SpaceWire_Interface_Get_SpaceWire_Data>:

	alt_u16 ui_SpaceWire_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 buffer_size){
81104b10:	defffa04 	addi	sp,sp,-24
81104b14:	dfc00515 	stw	ra,20(sp)
81104b18:	df000415 	stw	fp,16(sp)
81104b1c:	df000404 	addi	fp,sp,16
81104b20:	2007883a 	mov	r3,r4
81104b24:	e17ffe15 	stw	r5,-8(fp)
81104b28:	3005883a 	mov	r2,r6
81104b2c:	e0fffd05 	stb	r3,-12(fp)
81104b30:	e0bfff0d 	sth	r2,-4(fp)

		alt_u16 ui_rx_data_size = 0;
81104b34:	e03ffc0d 	sth	zero,-16(fp)

		alt_u8 spw_flag = 0;
81104b38:	e03ffc85 	stb	zero,-14(fp)
		alt_u8 spw_data = 0;
81104b3c:	e03ffcc5 	stb	zero,-13(fp)

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
81104b40:	00000b06 	br	81104b70 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x60>
			if (spw_flag == 0) {
81104b44:	e0bffc83 	ldbu	r2,-14(fp)
81104b48:	10803fcc 	andi	r2,r2,255
81104b4c:	1000081e 	bne	r2,zero,81104b70 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x60>
				data_buffer[ui_rx_data_size] = spw_data;
81104b50:	e0bffc0b 	ldhu	r2,-16(fp)
81104b54:	e0fffe17 	ldw	r3,-8(fp)
81104b58:	1885883a 	add	r2,r3,r2
81104b5c:	e0fffcc3 	ldbu	r3,-13(fp)
81104b60:	10c00005 	stb	r3,0(r2)
				ui_rx_data_size++;
81104b64:	e0bffc0b 	ldhu	r2,-16(fp)
81104b68:	10800044 	addi	r2,r2,1
81104b6c:	e0bffc0d 	sth	r2,-16(fp)
		alt_u16 ui_rx_data_size = 0;

		alt_u8 spw_flag = 0;
		alt_u8 spw_data = 0;

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
81104b70:	e0bffd07 	ldb	r2,-12(fp)
81104b74:	e13ffcc4 	addi	r4,fp,-13
81104b78:	e0fffc84 	addi	r3,fp,-14
81104b7c:	200d883a 	mov	r6,r4
81104b80:	180b883a 	mov	r5,r3
81104b84:	1009883a 	mov	r4,r2
81104b88:	1104a640 	call	81104a64 <b_SpaceWire_Interface_Read_RX_Data>
81104b8c:	10000426 	beq	r2,zero,81104ba0 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x90>
81104b90:	e0fffc0b 	ldhu	r3,-16(fp)
81104b94:	e0bfff0b 	ldhu	r2,-4(fp)
81104b98:	10bfffc4 	addi	r2,r2,-1
81104b9c:	18bfe916 	blt	r3,r2,81104b44 <__reset+0xfb0e4b44>
				data_buffer[ui_rx_data_size] = spw_data;
				ui_rx_data_size++;
			}
		}

		return ui_rx_data_size;
81104ba0:	e0bffc0b 	ldhu	r2,-16(fp)
	}
81104ba4:	e037883a 	mov	sp,fp
81104ba8:	dfc00117 	ldw	ra,4(sp)
81104bac:	df000017 	ldw	fp,0(sp)
81104bb0:	dec00204 	addi	sp,sp,8
81104bb4:	f800283a 	ret

81104bb8 <TRAN_WRITE_REG32>:
	alt_u32 ul_tran_e_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_f_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_g_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_h_interface_control_status_register_value = 0x00000000;

	void TRAN_WRITE_REG32(char c_SpwID, alt_u8 RegisterOffset, alt_u32 RegisterValue){
81104bb8:	defffb04 	addi	sp,sp,-20
81104bbc:	df000415 	stw	fp,16(sp)
81104bc0:	df000404 	addi	fp,sp,16
81104bc4:	2007883a 	mov	r3,r4
81104bc8:	2805883a 	mov	r2,r5
81104bcc:	e1bfff15 	stw	r6,-4(fp)
81104bd0:	e0fffd05 	stb	r3,-12(fp)
81104bd4:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
81104bd8:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
81104bdc:	e0bffd07 	ldb	r2,-12(fp)
81104be0:	10bfefc4 	addi	r2,r2,-65
81104be4:	10c00228 	cmpgeui	r3,r2,8
81104be8:	18001e1e 	bne	r3,zero,81104c64 <TRAN_WRITE_REG32+0xac>
81104bec:	100690ba 	slli	r3,r2,2
81104bf0:	00a04434 	movhi	r2,33040
81104bf4:	10930104 	addi	r2,r2,19460
81104bf8:	1885883a 	add	r2,r3,r2
81104bfc:	10800017 	ldw	r2,0(r2)
81104c00:	1000683a 	jmp	r2
81104c04:	81104c24 	muli	r4,r16,16688
81104c08:	81104c2c 	andhi	r4,r16,16688
81104c0c:	81104c34 	orhi	r4,r16,16688
81104c10:	81104c3c 	xorhi	r4,r16,16688
81104c14:	81104c44 	addi	r4,r16,16689
81104c18:	81104c4c 	andi	r4,r16,16689
81104c1c:	81104c54 	ori	r4,r16,16689
81104c20:	81104c5c 	xori	r4,r16,16689
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81104c24:	e03ffc15 	stw	zero,-16(fp)
			break;
81104c28:	00000e06 	br	81104c64 <TRAN_WRITE_REG32+0xac>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
81104c2c:	e03ffc15 	stw	zero,-16(fp)
			break;
81104c30:	00000c06 	br	81104c64 <TRAN_WRITE_REG32+0xac>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81104c34:	e03ffc15 	stw	zero,-16(fp)
			break;
81104c38:	00000a06 	br	81104c64 <TRAN_WRITE_REG32+0xac>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
81104c3c:	e03ffc15 	stw	zero,-16(fp)
			break;
81104c40:	00000806 	br	81104c64 <TRAN_WRITE_REG32+0xac>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
81104c44:	e03ffc15 	stw	zero,-16(fp)
			break;
81104c48:	00000606 	br	81104c64 <TRAN_WRITE_REG32+0xac>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
81104c4c:	e03ffc15 	stw	zero,-16(fp)
			break;
81104c50:	00000406 	br	81104c64 <TRAN_WRITE_REG32+0xac>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
81104c54:	e03ffc15 	stw	zero,-16(fp)
			break;
81104c58:	00000206 	br	81104c64 <TRAN_WRITE_REG32+0xac>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
81104c5c:	e03ffc15 	stw	zero,-16(fp)
			break;
81104c60:	0001883a 	nop
		}
		*(pTranAddr + (alt_u32)RegisterOffset) = (alt_u32) RegisterValue;
81104c64:	e0bffe03 	ldbu	r2,-8(fp)
81104c68:	1085883a 	add	r2,r2,r2
81104c6c:	1085883a 	add	r2,r2,r2
81104c70:	1007883a 	mov	r3,r2
81104c74:	e0bffc17 	ldw	r2,-16(fp)
81104c78:	10c5883a 	add	r2,r2,r3
81104c7c:	e0ffff17 	ldw	r3,-4(fp)
81104c80:	10c00015 	stw	r3,0(r2)
	}
81104c84:	0001883a 	nop
81104c88:	e037883a 	mov	sp,fp
81104c8c:	df000017 	ldw	fp,0(sp)
81104c90:	dec00104 	addi	sp,sp,4
81104c94:	f800283a 	ret

81104c98 <TRAN_READ_REG32>:

	alt_u32 TRAN_READ_REG32(char c_SpwID, alt_u8 RegisterOffset){
81104c98:	defffb04 	addi	sp,sp,-20
81104c9c:	df000415 	stw	fp,16(sp)
81104ca0:	df000404 	addi	fp,sp,16
81104ca4:	2007883a 	mov	r3,r4
81104ca8:	2805883a 	mov	r2,r5
81104cac:	e0fffe05 	stb	r3,-8(fp)
81104cb0:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81104cb4:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
81104cb8:	e03ffc15 	stw	zero,-16(fp)
		switch (c_SpwID) {
81104cbc:	e0bffe07 	ldb	r2,-8(fp)
81104cc0:	10bfefc4 	addi	r2,r2,-65
81104cc4:	10c00228 	cmpgeui	r3,r2,8
81104cc8:	18001e1e 	bne	r3,zero,81104d44 <TRAN_READ_REG32+0xac>
81104ccc:	100690ba 	slli	r3,r2,2
81104cd0:	00a04434 	movhi	r2,33040
81104cd4:	10933904 	addi	r2,r2,19684
81104cd8:	1885883a 	add	r2,r3,r2
81104cdc:	10800017 	ldw	r2,0(r2)
81104ce0:	1000683a 	jmp	r2
81104ce4:	81104d04 	addi	r4,r16,16692
81104ce8:	81104d0c 	andi	r4,r16,16692
81104cec:	81104d14 	ori	r4,r16,16692
81104cf0:	81104d1c 	xori	r4,r16,16692
81104cf4:	81104d24 	muli	r4,r16,16692
81104cf8:	81104d2c 	andhi	r4,r16,16692
81104cfc:	81104d34 	orhi	r4,r16,16692
81104d00:	81104d3c 	xorhi	r4,r16,16692
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81104d04:	e03ffc15 	stw	zero,-16(fp)
			break;
81104d08:	00000e06 	br	81104d44 <TRAN_READ_REG32+0xac>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
81104d0c:	e03ffc15 	stw	zero,-16(fp)
			break;
81104d10:	00000c06 	br	81104d44 <TRAN_READ_REG32+0xac>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81104d14:	e03ffc15 	stw	zero,-16(fp)
			break;
81104d18:	00000a06 	br	81104d44 <TRAN_READ_REG32+0xac>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
81104d1c:	e03ffc15 	stw	zero,-16(fp)
			break;
81104d20:	00000806 	br	81104d44 <TRAN_READ_REG32+0xac>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
81104d24:	e03ffc15 	stw	zero,-16(fp)
			break;
81104d28:	00000606 	br	81104d44 <TRAN_READ_REG32+0xac>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
81104d2c:	e03ffc15 	stw	zero,-16(fp)
			break;
81104d30:	00000406 	br	81104d44 <TRAN_READ_REG32+0xac>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
81104d34:	e03ffc15 	stw	zero,-16(fp)
			break;
81104d38:	00000206 	br	81104d44 <TRAN_READ_REG32+0xac>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
81104d3c:	e03ffc15 	stw	zero,-16(fp)
			break;
81104d40:	0001883a 	nop
		}
		RegisterValue = *(pTranAddr + (alt_u32)RegisterOffset);
81104d44:	e0bfff03 	ldbu	r2,-4(fp)
81104d48:	1085883a 	add	r2,r2,r2
81104d4c:	1085883a 	add	r2,r2,r2
81104d50:	1007883a 	mov	r3,r2
81104d54:	e0bffc17 	ldw	r2,-16(fp)
81104d58:	10c5883a 	add	r2,r2,r3
81104d5c:	10800017 	ldw	r2,0(r2)
81104d60:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81104d64:	e0bffd17 	ldw	r2,-12(fp)
	}
81104d68:	e037883a 	mov	sp,fp
81104d6c:	df000017 	ldw	fp,0(sp)
81104d70:	dec00104 	addi	sp,sp,4
81104d74:	f800283a 	ret

81104d78 <b_Transparent_Interface_Write_Register>:

	bool b_Transparent_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81104d78:	defffa04 	addi	sp,sp,-24
81104d7c:	dfc00515 	stw	ra,20(sp)
81104d80:	df000415 	stw	fp,16(sp)
81104d84:	df000404 	addi	fp,sp,16
81104d88:	2007883a 	mov	r3,r4
81104d8c:	2805883a 	mov	r2,r5
81104d90:	e1bfff15 	stw	r6,-4(fp)
81104d94:	e0fffd05 	stb	r3,-12(fp)
81104d98:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104d9c:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
81104da0:	e0bffe03 	ldbu	r2,-8(fp)
81104da4:	108000e8 	cmpgeui	r2,r2,3
81104da8:	1000081e 	bne	r2,zero,81104dcc <b_Transparent_Interface_Write_Register+0x54>
			TRAN_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
81104dac:	e0bffd07 	ldb	r2,-12(fp)
81104db0:	e0fffe03 	ldbu	r3,-8(fp)
81104db4:	e1bfff17 	ldw	r6,-4(fp)
81104db8:	180b883a 	mov	r5,r3
81104dbc:	1009883a 	mov	r4,r2
81104dc0:	1104bb80 	call	81104bb8 <TRAN_WRITE_REG32>
			bSuccess = TRUE;
81104dc4:	00800044 	movi	r2,1
81104dc8:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81104dcc:	e0bffc17 	ldw	r2,-16(fp)
	}
81104dd0:	e037883a 	mov	sp,fp
81104dd4:	dfc00117 	ldw	ra,4(sp)
81104dd8:	df000017 	ldw	fp,0(sp)
81104ddc:	dec00204 	addi	sp,sp,8
81104de0:	f800283a 	ret

81104de4 <ul_Transparent_Interface_Read_Register>:

	alt_u32 ul_Transparent_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
81104de4:	defffb04 	addi	sp,sp,-20
81104de8:	dfc00415 	stw	ra,16(sp)
81104dec:	df000315 	stw	fp,12(sp)
81104df0:	df000304 	addi	fp,sp,12
81104df4:	2007883a 	mov	r3,r4
81104df8:	2805883a 	mov	r2,r5
81104dfc:	e0fffe05 	stb	r3,-8(fp)
81104e00:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81104e04:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
81104e08:	e0bfff03 	ldbu	r2,-4(fp)
81104e0c:	108000e8 	cmpgeui	r2,r2,3
81104e10:	1000061e 	bne	r2,zero,81104e2c <ul_Transparent_Interface_Read_Register+0x48>
			ul_RegisterValue = TRAN_READ_REG32(c_SpwID, uc_RegisterAddress);
81104e14:	e0bffe07 	ldb	r2,-8(fp)
81104e18:	e0ffff03 	ldbu	r3,-4(fp)
81104e1c:	180b883a 	mov	r5,r3
81104e20:	1009883a 	mov	r4,r2
81104e24:	1104c980 	call	81104c98 <TRAN_READ_REG32>
81104e28:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
81104e2c:	e0bffd17 	ldw	r2,-12(fp)
	}
81104e30:	e037883a 	mov	sp,fp
81104e34:	dfc00117 	ldw	ra,4(sp)
81104e38:	df000017 	ldw	fp,0(sp)
81104e3c:	dec00204 	addi	sp,sp,8
81104e40:	f800283a 	ret

81104e44 <v_Transparent_Interface_Enable_Control>:

	bool v_Transparent_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
81104e44:	defff804 	addi	sp,sp,-32
81104e48:	dfc00715 	stw	ra,28(sp)
81104e4c:	df000615 	stw	fp,24(sp)
81104e50:	df000604 	addi	fp,sp,24
81104e54:	2007883a 	mov	r3,r4
81104e58:	2805883a 	mov	r2,r5
81104e5c:	e1bfff15 	stw	r6,-4(fp)
81104e60:	e0fffd05 	stb	r3,-12(fp)
81104e64:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104e68:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK;
81104e6c:	0081c004 	movi	r2,1792
81104e70:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104e74:	d0a03404 	addi	r2,gp,-32560
81104e78:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81104e7c:	e0bffd07 	ldb	r2,-12(fp)
81104e80:	10bfefc4 	addi	r2,r2,-65
81104e84:	10c00228 	cmpgeui	r3,r2,8
81104e88:	1800361e 	bne	r3,zero,81104f64 <v_Transparent_Interface_Enable_Control+0x120>
81104e8c:	100690ba 	slli	r3,r2,2
81104e90:	00a04434 	movhi	r2,33040
81104e94:	1093a904 	addi	r2,r2,20132
81104e98:	1885883a 	add	r2,r3,r2
81104e9c:	10800017 	ldw	r2,0(r2)
81104ea0:	1000683a 	jmp	r2
81104ea4:	81104ec4 	addi	r4,r16,16699
81104ea8:	81104ed8 	cmpnei	r4,r16,16699
81104eac:	81104eec 	andhi	r4,r16,16699
81104eb0:	81104f00 	call	881104f0 <__reset+0x20f04f0>
81104eb4:	81104f14 	ori	r4,r16,16700
81104eb8:	81104f28 	cmpgeui	r4,r16,16700
81104ebc:	81104f3c 	xorhi	r4,r16,16700
81104ec0:	81104f50 	cmplti	r4,r16,16701
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104ec4:	d0a03404 	addi	r2,gp,-32560
81104ec8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104ecc:	00800044 	movi	r2,1
81104ed0:	e0bffa15 	stw	r2,-24(fp)
			break;
81104ed4:	00002306 	br	81104f64 <v_Transparent_Interface_Enable_Control+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81104ed8:	d0a03504 	addi	r2,gp,-32556
81104edc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104ee0:	00800044 	movi	r2,1
81104ee4:	e0bffa15 	stw	r2,-24(fp)
			break;
81104ee8:	00001e06 	br	81104f64 <v_Transparent_Interface_Enable_Control+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
81104eec:	d0a03604 	addi	r2,gp,-32552
81104ef0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104ef4:	00800044 	movi	r2,1
81104ef8:	e0bffa15 	stw	r2,-24(fp)
			break;
81104efc:	00001906 	br	81104f64 <v_Transparent_Interface_Enable_Control+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
81104f00:	d0a03704 	addi	r2,gp,-32548
81104f04:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104f08:	00800044 	movi	r2,1
81104f0c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104f10:	00001406 	br	81104f64 <v_Transparent_Interface_Enable_Control+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
81104f14:	d0a03804 	addi	r2,gp,-32544
81104f18:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104f1c:	00800044 	movi	r2,1
81104f20:	e0bffa15 	stw	r2,-24(fp)
			break;
81104f24:	00000f06 	br	81104f64 <v_Transparent_Interface_Enable_Control+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
81104f28:	d0a03904 	addi	r2,gp,-32540
81104f2c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104f30:	00800044 	movi	r2,1
81104f34:	e0bffa15 	stw	r2,-24(fp)
			break;
81104f38:	00000a06 	br	81104f64 <v_Transparent_Interface_Enable_Control+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
81104f3c:	d0a03a04 	addi	r2,gp,-32536
81104f40:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104f44:	00800044 	movi	r2,1
81104f48:	e0bffa15 	stw	r2,-24(fp)
			break;
81104f4c:	00000506 	br	81104f64 <v_Transparent_Interface_Enable_Control+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
81104f50:	d0a03b04 	addi	r2,gp,-32532
81104f54:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104f58:	00800044 	movi	r2,1
81104f5c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104f60:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
81104f64:	e0bffa17 	ldw	r2,-24(fp)
81104f68:	10800058 	cmpnei	r2,r2,1
81104f6c:	10002b1e 	bne	r2,zero,8110501c <v_Transparent_Interface_Enable_Control+0x1d8>
81104f70:	e0ffff17 	ldw	r3,-4(fp)
81104f74:	e0bffc17 	ldw	r2,-16(fp)
81104f78:	1884703a 	and	r2,r3,r2
81104f7c:	10002726 	beq	r2,zero,8110501c <v_Transparent_Interface_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
81104f80:	e0bffe03 	ldbu	r2,-8(fp)
81104f84:	10000326 	beq	r2,zero,81104f94 <v_Transparent_Interface_Enable_Control+0x150>
81104f88:	10800060 	cmpeqi	r2,r2,1
81104f8c:	1000121e 	bne	r2,zero,81104fd8 <v_Transparent_Interface_Enable_Control+0x194>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81104f90:	00002306 	br	81105020 <v_Transparent_Interface_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){
			
				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_EnableMask;
81104f94:	e0bffb17 	ldw	r2,-20(fp)
81104f98:	10c00017 	ldw	r3,0(r2)
81104f9c:	e0bfff17 	ldw	r2,-4(fp)
81104fa0:	0084303a 	nor	r2,zero,r2
81104fa4:	1886703a 	and	r3,r3,r2
81104fa8:	e0bffb17 	ldw	r2,-20(fp)
81104fac:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104fb0:	e0fffd07 	ldb	r3,-12(fp)
81104fb4:	e0bffb17 	ldw	r2,-20(fp)
81104fb8:	10800017 	ldw	r2,0(r2)
81104fbc:	100d883a 	mov	r6,r2
81104fc0:	01400804 	movi	r5,32
81104fc4:	1809883a 	mov	r4,r3
81104fc8:	1104bb80 	call	81104bb8 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104fcc:	00800044 	movi	r2,1
81104fd0:	e0bffa15 	stw	r2,-24(fp)
				break;
81104fd4:	00001006 	br	81105018 <v_Transparent_Interface_Enable_Control+0x1d4>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_EnableMask;
81104fd8:	e0bffb17 	ldw	r2,-20(fp)
81104fdc:	10c00017 	ldw	r3,0(r2)
81104fe0:	e0bfff17 	ldw	r2,-4(fp)
81104fe4:	1886b03a 	or	r3,r3,r2
81104fe8:	e0bffb17 	ldw	r2,-20(fp)
81104fec:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104ff0:	e0fffd07 	ldb	r3,-12(fp)
81104ff4:	e0bffb17 	ldw	r2,-20(fp)
81104ff8:	10800017 	ldw	r2,0(r2)
81104ffc:	100d883a 	mov	r6,r2
81105000:	01400804 	movi	r5,32
81105004:	1809883a 	mov	r4,r3
81105008:	1104bb80 	call	81104bb8 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
8110500c:	00800044 	movi	r2,1
81105010:	e0bffa15 	stw	r2,-24(fp)
				break;
81105014:	0001883a 	nop

			}
		} else {
81105018:	00000106 	br	81105020 <v_Transparent_Interface_Enable_Control+0x1dc>
			bSuccess = FALSE;
8110501c:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81105020:	e0bffa17 	ldw	r2,-24(fp)
	}
81105024:	e037883a 	mov	sp,fp
81105028:	dfc00117 	ldw	ra,4(sp)
8110502c:	df000017 	ldw	fp,0(sp)
81105030:	dec00204 	addi	sp,sp,8
81105034:	f800283a 	ret

81105038 <v_Transparent_Interface_Interrupts_Enable_Control>:

	bool v_Transparent_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
81105038:	defff804 	addi	sp,sp,-32
8110503c:	dfc00715 	stw	ra,28(sp)
81105040:	df000615 	stw	fp,24(sp)
81105044:	df000604 	addi	fp,sp,24
81105048:	2007883a 	mov	r3,r4
8110504c:	2805883a 	mov	r2,r5
81105050:	e1bfff15 	stw	r6,-4(fp)
81105054:	e0fffd05 	stb	r3,-12(fp)
81105058:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
8110505c:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_ENABLE_BIT_MASK | TRAN_DATA_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_ENABLE_BIT_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_ENABLE_BIT_MASK;
81105060:	00803c04 	movi	r2,240
81105064:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81105068:	d0a03404 	addi	r2,gp,-32560
8110506c:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81105070:	e0bffd07 	ldb	r2,-12(fp)
81105074:	10bfefc4 	addi	r2,r2,-65
81105078:	10c00228 	cmpgeui	r3,r2,8
8110507c:	1800361e 	bne	r3,zero,81105158 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
81105080:	100690ba 	slli	r3,r2,2
81105084:	00a04434 	movhi	r2,33040
81105088:	10942604 	addi	r2,r2,20632
8110508c:	1885883a 	add	r2,r3,r2
81105090:	10800017 	ldw	r2,0(r2)
81105094:	1000683a 	jmp	r2
81105098:	811050b8 	rdprs	r4,r16,16706
8110509c:	811050cc 	andi	r4,r16,16707
811050a0:	811050e0 	cmpeqi	r4,r16,16707
811050a4:	811050f4 	orhi	r4,r16,16707
811050a8:	81105108 	cmpgei	r4,r16,16708
811050ac:	8110511c 	xori	r4,r16,16708
811050b0:	81105130 	cmpltui	r4,r16,16708
811050b4:	81105144 	addi	r4,r16,16709
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811050b8:	d0a03404 	addi	r2,gp,-32560
811050bc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811050c0:	00800044 	movi	r2,1
811050c4:	e0bffa15 	stw	r2,-24(fp)
			break;
811050c8:	00002306 	br	81105158 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
811050cc:	d0a03504 	addi	r2,gp,-32556
811050d0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811050d4:	00800044 	movi	r2,1
811050d8:	e0bffa15 	stw	r2,-24(fp)
			break;
811050dc:	00001e06 	br	81105158 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
811050e0:	d0a03604 	addi	r2,gp,-32552
811050e4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811050e8:	00800044 	movi	r2,1
811050ec:	e0bffa15 	stw	r2,-24(fp)
			break;
811050f0:	00001906 	br	81105158 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
811050f4:	d0a03704 	addi	r2,gp,-32548
811050f8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811050fc:	00800044 	movi	r2,1
81105100:	e0bffa15 	stw	r2,-24(fp)
			break;
81105104:	00001406 	br	81105158 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
81105108:	d0a03804 	addi	r2,gp,-32544
8110510c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105110:	00800044 	movi	r2,1
81105114:	e0bffa15 	stw	r2,-24(fp)
			break;
81105118:	00000f06 	br	81105158 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
8110511c:	d0a03904 	addi	r2,gp,-32540
81105120:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105124:	00800044 	movi	r2,1
81105128:	e0bffa15 	stw	r2,-24(fp)
			break;
8110512c:	00000a06 	br	81105158 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
81105130:	d0a03a04 	addi	r2,gp,-32536
81105134:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81105138:	00800044 	movi	r2,1
8110513c:	e0bffa15 	stw	r2,-24(fp)
			break;
81105140:	00000506 	br	81105158 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
81105144:	d0a03b04 	addi	r2,gp,-32532
81105148:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110514c:	00800044 	movi	r2,1
81105150:	e0bffa15 	stw	r2,-24(fp)
			break;
81105154:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
81105158:	e0bffa17 	ldw	r2,-24(fp)
8110515c:	10800058 	cmpnei	r2,r2,1
81105160:	10002b1e 	bne	r2,zero,81105210 <v_Transparent_Interface_Interrupts_Enable_Control+0x1d8>
81105164:	e0ffff17 	ldw	r3,-4(fp)
81105168:	e0bffc17 	ldw	r2,-16(fp)
8110516c:	1884703a 	and	r2,r3,r2
81105170:	10002726 	beq	r2,zero,81105210 <v_Transparent_Interface_Interrupts_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
81105174:	e0bffe03 	ldbu	r2,-8(fp)
81105178:	10000326 	beq	r2,zero,81105188 <v_Transparent_Interface_Interrupts_Enable_Control+0x150>
8110517c:	10800060 	cmpeqi	r2,r2,1
81105180:	1000121e 	bne	r2,zero,811051cc <v_Transparent_Interface_Interrupts_Enable_Control+0x194>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81105184:	00002306 	br	81105214 <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){

				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_InterruptMask;
81105188:	e0bffb17 	ldw	r2,-20(fp)
8110518c:	10c00017 	ldw	r3,0(r2)
81105190:	e0bfff17 	ldw	r2,-4(fp)
81105194:	0084303a 	nor	r2,zero,r2
81105198:	1886703a 	and	r3,r3,r2
8110519c:	e0bffb17 	ldw	r2,-20(fp)
811051a0:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
811051a4:	e0fffd07 	ldb	r3,-12(fp)
811051a8:	e0bffb17 	ldw	r2,-20(fp)
811051ac:	10800017 	ldw	r2,0(r2)
811051b0:	100d883a 	mov	r6,r2
811051b4:	01400804 	movi	r5,32
811051b8:	1809883a 	mov	r4,r3
811051bc:	1104bb80 	call	81104bb8 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
811051c0:	00800044 	movi	r2,1
811051c4:	e0bffa15 	stw	r2,-24(fp)
				break;
811051c8:	00001006 	br	8110520c <v_Transparent_Interface_Interrupts_Enable_Control+0x1d4>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_InterruptMask;
811051cc:	e0bffb17 	ldw	r2,-20(fp)
811051d0:	10c00017 	ldw	r3,0(r2)
811051d4:	e0bfff17 	ldw	r2,-4(fp)
811051d8:	1886b03a 	or	r3,r3,r2
811051dc:	e0bffb17 	ldw	r2,-20(fp)
811051e0:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
811051e4:	e0fffd07 	ldb	r3,-12(fp)
811051e8:	e0bffb17 	ldw	r2,-20(fp)
811051ec:	10800017 	ldw	r2,0(r2)
811051f0:	100d883a 	mov	r6,r2
811051f4:	01400804 	movi	r5,32
811051f8:	1809883a 	mov	r4,r3
811051fc:	1104bb80 	call	81104bb8 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81105200:	00800044 	movi	r2,1
81105204:	e0bffa15 	stw	r2,-24(fp)
				break;
81105208:	0001883a 	nop

			}
		} else {
8110520c:	00000106 	br	81105214 <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>
			bSuccess = FALSE;
81105210:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81105214:	e0bffa17 	ldw	r2,-24(fp)
	}
81105218:	e037883a 	mov	sp,fp
8110521c:	dfc00117 	ldw	ra,4(sp)
81105220:	df000017 	ldw	fp,0(sp)
81105224:	dec00204 	addi	sp,sp,8
81105228:	f800283a 	ret

8110522c <ul_Transparent_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_Transparent_Interface_Interrupts_Flags_Read(char c_SpwID){
8110522c:	defffb04 	addi	sp,sp,-20
81105230:	dfc00415 	stw	ra,16(sp)
81105234:	df000315 	stw	fp,12(sp)
81105238:	df000304 	addi	fp,sp,12
8110523c:	2005883a 	mov	r2,r4
81105240:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
81105244:	008003c4 	movi	r2,15
81105248:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_interrupts_flags_value = TRAN_READ_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_tran_mask;
8110524c:	e0bfff07 	ldb	r2,-4(fp)
81105250:	01400804 	movi	r5,32
81105254:	1009883a 	mov	r4,r2
81105258:	1104c980 	call	81104c98 <TRAN_READ_REG32>
8110525c:	1007883a 	mov	r3,r2
81105260:	e0bffd17 	ldw	r2,-12(fp)
81105264:	1884703a 	and	r2,r3,r2
81105268:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_interrupts_flags_value;
8110526c:	e0bffe17 	ldw	r2,-8(fp)
	}
81105270:	e037883a 	mov	sp,fp
81105274:	dfc00117 	ldw	ra,4(sp)
81105278:	df000017 	ldw	fp,0(sp)
8110527c:	dec00204 	addi	sp,sp,8
81105280:	f800283a 	ret

81105284 <v_Transparent_Interface_Interrupts_Flags_Clear>:

	void v_Transparent_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
81105284:	defff904 	addi	sp,sp,-28
81105288:	dfc00615 	stw	ra,24(sp)
8110528c:	df000515 	stw	fp,20(sp)
81105290:	df000504 	addi	fp,sp,20
81105294:	2005883a 	mov	r2,r4
81105298:	e17fff15 	stw	r5,-4(fp)
8110529c:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
811052a0:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
811052a4:	008003c4 	movi	r2,15
811052a8:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811052ac:	d0a03404 	addi	r2,gp,-32560
811052b0:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
811052b4:	e0bffe07 	ldb	r2,-8(fp)
811052b8:	10bfefc4 	addi	r2,r2,-65
811052bc:	10c00228 	cmpgeui	r3,r2,8
811052c0:	1800361e 	bne	r3,zero,8110539c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
811052c4:	100690ba 	slli	r3,r2,2
811052c8:	00a04434 	movhi	r2,33040
811052cc:	1094b704 	addi	r2,r2,21212
811052d0:	1885883a 	add	r2,r3,r2
811052d4:	10800017 	ldw	r2,0(r2)
811052d8:	1000683a 	jmp	r2
811052dc:	811052fc 	xorhi	r4,r16,16715
811052e0:	81105310 	cmplti	r4,r16,16716
811052e4:	81105324 	muli	r4,r16,16716
811052e8:	81105338 	rdprs	r4,r16,16716
811052ec:	8110534c 	andi	r4,r16,16717
811052f0:	81105360 	cmpeqi	r4,r16,16717
811052f4:	81105374 	orhi	r4,r16,16717
811052f8:	81105388 	cmpgei	r4,r16,16718
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811052fc:	d0a03404 	addi	r2,gp,-32560
81105300:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105304:	00800044 	movi	r2,1
81105308:	e0bffb15 	stw	r2,-20(fp)
			break;
8110530c:	00002306 	br	8110539c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81105310:	d0a03504 	addi	r2,gp,-32556
81105314:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105318:	00800044 	movi	r2,1
8110531c:	e0bffb15 	stw	r2,-20(fp)
			break;
81105320:	00001e06 	br	8110539c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
81105324:	d0a03604 	addi	r2,gp,-32552
81105328:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
8110532c:	00800044 	movi	r2,1
81105330:	e0bffb15 	stw	r2,-20(fp)
			break;
81105334:	00001906 	br	8110539c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
81105338:	d0a03704 	addi	r2,gp,-32548
8110533c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105340:	00800044 	movi	r2,1
81105344:	e0bffb15 	stw	r2,-20(fp)
			break;
81105348:	00001406 	br	8110539c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
8110534c:	d0a03804 	addi	r2,gp,-32544
81105350:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105354:	00800044 	movi	r2,1
81105358:	e0bffb15 	stw	r2,-20(fp)
			break;
8110535c:	00000f06 	br	8110539c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
81105360:	d0a03904 	addi	r2,gp,-32540
81105364:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105368:	00800044 	movi	r2,1
8110536c:	e0bffb15 	stw	r2,-20(fp)
			break;
81105370:	00000a06 	br	8110539c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
81105374:	d0a03a04 	addi	r2,gp,-32536
81105378:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
8110537c:	00800044 	movi	r2,1
81105380:	e0bffb15 	stw	r2,-20(fp)
			break;
81105384:	00000506 	br	8110539c <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
81105388:	d0a03b04 	addi	r2,gp,-32532
8110538c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81105390:	00800044 	movi	r2,1
81105394:	e0bffb15 	stw	r2,-20(fp)
			break;
81105398:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
8110539c:	e0bffb17 	ldw	r2,-20(fp)
811053a0:	10800058 	cmpnei	r2,r2,1
811053a4:	10000d1e 	bne	r2,zero,811053dc <v_Transparent_Interface_Interrupts_Flags_Clear+0x158>
811053a8:	e0ffff17 	ldw	r3,-4(fp)
811053ac:	e0bffd17 	ldw	r2,-12(fp)
811053b0:	1884703a 	and	r2,r3,r2
811053b4:	10000926 	beq	r2,zero,811053dc <v_Transparent_Interface_Interrupts_Flags_Clear+0x158>
			TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_tran_interface_control_status_register_value | ul_InterruptMask));
811053b8:	e13ffe07 	ldb	r4,-8(fp)
811053bc:	e0bffc17 	ldw	r2,-16(fp)
811053c0:	10c00017 	ldw	r3,0(r2)
811053c4:	e0bfff17 	ldw	r2,-4(fp)
811053c8:	1884b03a 	or	r2,r3,r2
811053cc:	100d883a 	mov	r6,r2
811053d0:	01400804 	movi	r5,32
811053d4:	1104bb80 	call	81104bb8 <TRAN_WRITE_REG32>
811053d8:	00000106 	br	811053e0 <v_Transparent_Interface_Interrupts_Flags_Clear+0x15c>
		} else {
			bSuccess = FALSE;
811053dc:	e03ffb15 	stw	zero,-20(fp)
		}
	}
811053e0:	0001883a 	nop
811053e4:	e037883a 	mov	sp,fp
811053e8:	dfc00117 	ldw	ra,4(sp)
811053ec:	df000017 	ldw	fp,0(sp)
811053f0:	dec00204 	addi	sp,sp,8
811053f4:	f800283a 	ret

811053f8 <v_Transparent_Interface_RX_FIFO_Reset>:

	void v_Transparent_Interface_RX_FIFO_Reset(char c_SpwID){
811053f8:	defffd04 	addi	sp,sp,-12
811053fc:	dfc00215 	stw	ra,8(sp)
81105400:	df000115 	stw	fp,4(sp)
81105404:	df000104 	addi	fp,sp,4
81105408:	2005883a 	mov	r2,r4
8110540c:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_RX_FIFO_RESET_CONTROL_BIT_MASK);
81105410:	e0bfff07 	ldb	r2,-4(fp)
81105414:	01800104 	movi	r6,4
81105418:	01400844 	movi	r5,33
8110541c:	1009883a 	mov	r4,r2
81105420:	1104bb80 	call	81104bb8 <TRAN_WRITE_REG32>

	}
81105424:	0001883a 	nop
81105428:	e037883a 	mov	sp,fp
8110542c:	dfc00117 	ldw	ra,4(sp)
81105430:	df000017 	ldw	fp,0(sp)
81105434:	dec00204 	addi	sp,sp,8
81105438:	f800283a 	ret

8110543c <ul_Transparent_Interface_RX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_RX_FIFO_Status_Read(char c_SpwID){
8110543c:	defffb04 	addi	sp,sp,-20
81105440:	dfc00415 	stw	ra,16(sp)
81105444:	df000315 	stw	fp,12(sp)
81105448:	df000304 	addi	fp,sp,12
8110544c:	2005883a 	mov	r2,r4
81105450:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_RX_FIFO_USED_SPACE_VALUE_MASK | TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_RX_FIFO_FULL_STATUS_BIT_MASK;
81105454:	0081fec4 	movi	r2,2043
81105458:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_rx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
8110545c:	e0bfff07 	ldb	r2,-4(fp)
81105460:	01400844 	movi	r5,33
81105464:	1009883a 	mov	r4,r2
81105468:	1104c980 	call	81104c98 <TRAN_READ_REG32>
8110546c:	1007883a 	mov	r3,r2
81105470:	e0bffd17 	ldw	r2,-12(fp)
81105474:	1884703a 	and	r2,r3,r2
81105478:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_rx_fifo_status_value;
8110547c:	e0bffe17 	ldw	r2,-8(fp)
	}
81105480:	e037883a 	mov	sp,fp
81105484:	dfc00117 	ldw	ra,4(sp)
81105488:	df000017 	ldw	fp,0(sp)
8110548c:	dec00204 	addi	sp,sp,8
81105490:	f800283a 	ret

81105494 <b_Transparent_Interface_RX_FIFO_Status_Empty>:

	bool b_Transparent_Interface_RX_FIFO_Status_Empty(char c_SpwID){
81105494:	defffc04 	addi	sp,sp,-16
81105498:	dfc00315 	stw	ra,12(sp)
8110549c:	df000215 	stw	fp,8(sp)
811054a0:	df000204 	addi	fp,sp,8
811054a4:	2005883a 	mov	r2,r4
811054a8:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_empty = FALSE;
811054ac:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK) {
811054b0:	e0bfff07 	ldb	r2,-4(fp)
811054b4:	01400844 	movi	r5,33
811054b8:	1009883a 	mov	r4,r2
811054bc:	1104c980 	call	81104c98 <TRAN_READ_REG32>
811054c0:	1080008c 	andi	r2,r2,2
811054c4:	10000226 	beq	r2,zero,811054d0 <b_Transparent_Interface_RX_FIFO_Status_Empty+0x3c>
			b_rx_fifo_empty = TRUE;
811054c8:	00800044 	movi	r2,1
811054cc:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_empty;		
811054d0:	e0bffe17 	ldw	r2,-8(fp)
	}
811054d4:	e037883a 	mov	sp,fp
811054d8:	dfc00117 	ldw	ra,4(sp)
811054dc:	df000017 	ldw	fp,0(sp)
811054e0:	dec00204 	addi	sp,sp,8
811054e4:	f800283a 	ret

811054e8 <b_Transparent_Interface_RX_FIFO_Status_Full>:
	
	bool b_Transparent_Interface_RX_FIFO_Status_Full(char c_SpwID){
811054e8:	defffc04 	addi	sp,sp,-16
811054ec:	dfc00315 	stw	ra,12(sp)
811054f0:	df000215 	stw	fp,8(sp)
811054f4:	df000204 	addi	fp,sp,8
811054f8:	2005883a 	mov	r2,r4
811054fc:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_full = FALSE;
81105500:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_FULL_STATUS_BIT_MASK) {
81105504:	e0bfff07 	ldb	r2,-4(fp)
81105508:	01400844 	movi	r5,33
8110550c:	1009883a 	mov	r4,r2
81105510:	1104c980 	call	81104c98 <TRAN_READ_REG32>
81105514:	1080004c 	andi	r2,r2,1
81105518:	10000226 	beq	r2,zero,81105524 <b_Transparent_Interface_RX_FIFO_Status_Full+0x3c>
			b_rx_fifo_full = TRUE;
8110551c:	00800044 	movi	r2,1
81105520:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_full;
81105524:	e0bffe17 	ldw	r2,-8(fp)
	}
81105528:	e037883a 	mov	sp,fp
8110552c:	dfc00117 	ldw	ra,4(sp)
81105530:	df000017 	ldw	fp,0(sp)
81105534:	dec00204 	addi	sp,sp,8
81105538:	f800283a 	ret

8110553c <uc_Transparent_Interface_RX_FIFO_Status_Used>:

	alt_u8 uc_Transparent_Interface_RX_FIFO_Status_Used(char c_SpwID){
8110553c:	defffc04 	addi	sp,sp,-16
81105540:	dfc00315 	stw	ra,12(sp)
81105544:	df000215 	stw	fp,8(sp)
81105548:	df000204 	addi	fp,sp,8
8110554c:	2005883a 	mov	r2,r4
81105550:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_rx_fifo_used = 0;
81105554:	e03ffe05 	stb	zero,-8(fp)
		
		uc_rx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
81105558:	e0bfff07 	ldb	r2,-4(fp)
8110555c:	01400844 	movi	r5,33
81105560:	1009883a 	mov	r4,r2
81105564:	1104c980 	call	81104c98 <TRAN_READ_REG32>
81105568:	1081fe0c 	andi	r2,r2,2040
8110556c:	1004d0fa 	srli	r2,r2,3
81105570:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_rx_fifo_used;
81105574:	e0bffe03 	ldbu	r2,-8(fp)
	}
81105578:	e037883a 	mov	sp,fp
8110557c:	dfc00117 	ldw	ra,4(sp)
81105580:	df000017 	ldw	fp,0(sp)
81105584:	dec00204 	addi	sp,sp,8
81105588:	f800283a 	ret

8110558c <v_Transparent_Interface_TX_FIFO_Reset>:
	
	
	void v_Transparent_Interface_TX_FIFO_Reset(char c_SpwID){
8110558c:	defffd04 	addi	sp,sp,-12
81105590:	dfc00215 	stw	ra,8(sp)
81105594:	df000115 	stw	fp,4(sp)
81105598:	df000104 	addi	fp,sp,4
8110559c:	2005883a 	mov	r2,r4
811055a0:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_TX_FIFO_RESET_CONTROL_BIT_MASK);
811055a4:	e0bfff07 	ldb	r2,-4(fp)
811055a8:	01800104 	movi	r6,4
811055ac:	01400884 	movi	r5,34
811055b0:	1009883a 	mov	r4,r2
811055b4:	1104bb80 	call	81104bb8 <TRAN_WRITE_REG32>

	}
811055b8:	0001883a 	nop
811055bc:	e037883a 	mov	sp,fp
811055c0:	dfc00117 	ldw	ra,4(sp)
811055c4:	df000017 	ldw	fp,0(sp)
811055c8:	dec00204 	addi	sp,sp,8
811055cc:	f800283a 	ret

811055d0 <ul_Transparent_Interface_TX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_TX_FIFO_Status_Read(char c_SpwID){
811055d0:	defffb04 	addi	sp,sp,-20
811055d4:	dfc00415 	stw	ra,16(sp)
811055d8:	df000315 	stw	fp,12(sp)
811055dc:	df000304 	addi	fp,sp,12
811055e0:	2005883a 	mov	r2,r4
811055e4:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_TX_FIFO_USED_SPACE_VALUE_MASK | TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_TX_FIFO_FULL_STATUS_BIT_MASK;
811055e8:	0081fec4 	movi	r2,2043
811055ec:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_tx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
811055f0:	e0bfff07 	ldb	r2,-4(fp)
811055f4:	01400884 	movi	r5,34
811055f8:	1009883a 	mov	r4,r2
811055fc:	1104c980 	call	81104c98 <TRAN_READ_REG32>
81105600:	1007883a 	mov	r3,r2
81105604:	e0bffd17 	ldw	r2,-12(fp)
81105608:	1884703a 	and	r2,r3,r2
8110560c:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_tx_fifo_status_value;
81105610:	e0bffe17 	ldw	r2,-8(fp)
	}
81105614:	e037883a 	mov	sp,fp
81105618:	dfc00117 	ldw	ra,4(sp)
8110561c:	df000017 	ldw	fp,0(sp)
81105620:	dec00204 	addi	sp,sp,8
81105624:	f800283a 	ret

81105628 <b_Transparent_Interface_TX_FIFO_Status_Full>:

	bool b_Transparent_Interface_TX_FIFO_Status_Full(char c_SpwID){
81105628:	defffc04 	addi	sp,sp,-16
8110562c:	dfc00315 	stw	ra,12(sp)
81105630:	df000215 	stw	fp,8(sp)
81105634:	df000204 	addi	fp,sp,8
81105638:	2005883a 	mov	r2,r4
8110563c:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_empty = FALSE;
81105640:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK) {
81105644:	e0bfff07 	ldb	r2,-4(fp)
81105648:	01400884 	movi	r5,34
8110564c:	1009883a 	mov	r4,r2
81105650:	1104c980 	call	81104c98 <TRAN_READ_REG32>
81105654:	1080008c 	andi	r2,r2,2
81105658:	10000226 	beq	r2,zero,81105664 <b_Transparent_Interface_TX_FIFO_Status_Full+0x3c>
			b_tx_fifo_empty = TRUE;
8110565c:	00800044 	movi	r2,1
81105660:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_empty;		
81105664:	e0bffe17 	ldw	r2,-8(fp)
	}
81105668:	e037883a 	mov	sp,fp
8110566c:	dfc00117 	ldw	ra,4(sp)
81105670:	df000017 	ldw	fp,0(sp)
81105674:	dec00204 	addi	sp,sp,8
81105678:	f800283a 	ret

8110567c <b_Transparent_Interface_TX_FIFO_Status_Empty>:
	
	bool b_Transparent_Interface_TX_FIFO_Status_Empty(char c_SpwID){
8110567c:	defffc04 	addi	sp,sp,-16
81105680:	dfc00315 	stw	ra,12(sp)
81105684:	df000215 	stw	fp,8(sp)
81105688:	df000204 	addi	fp,sp,8
8110568c:	2005883a 	mov	r2,r4
81105690:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_full = FALSE;
81105694:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_FULL_STATUS_BIT_MASK) {
81105698:	e0bfff07 	ldb	r2,-4(fp)
8110569c:	01400884 	movi	r5,34
811056a0:	1009883a 	mov	r4,r2
811056a4:	1104c980 	call	81104c98 <TRAN_READ_REG32>
811056a8:	1080004c 	andi	r2,r2,1
811056ac:	10000226 	beq	r2,zero,811056b8 <b_Transparent_Interface_TX_FIFO_Status_Empty+0x3c>
			b_tx_fifo_full = TRUE;
811056b0:	00800044 	movi	r2,1
811056b4:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_full;
811056b8:	e0bffe17 	ldw	r2,-8(fp)
	}
811056bc:	e037883a 	mov	sp,fp
811056c0:	dfc00117 	ldw	ra,4(sp)
811056c4:	df000017 	ldw	fp,0(sp)
811056c8:	dec00204 	addi	sp,sp,8
811056cc:	f800283a 	ret

811056d0 <uc_Transparent_Interface_TX_FIFO_Status_Used>:
	
	alt_u8 uc_Transparent_Interface_TX_FIFO_Status_Used(char c_SpwID){
811056d0:	defffc04 	addi	sp,sp,-16
811056d4:	dfc00315 	stw	ra,12(sp)
811056d8:	df000215 	stw	fp,8(sp)
811056dc:	df000204 	addi	fp,sp,8
811056e0:	2005883a 	mov	r2,r4
811056e4:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_tx_fifo_used = 0;
811056e8:	e03ffe05 	stb	zero,-8(fp)
		
		uc_tx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
811056ec:	e0bfff07 	ldb	r2,-4(fp)
811056f0:	01400884 	movi	r5,34
811056f4:	1009883a 	mov	r4,r2
811056f8:	1104c980 	call	81104c98 <TRAN_READ_REG32>
811056fc:	1081fe0c 	andi	r2,r2,2040
81105700:	1004d0fa 	srli	r2,r2,3
81105704:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_tx_fifo_used;
81105708:	e0bffe03 	ldbu	r2,-8(fp)
	}
8110570c:	e037883a 	mov	sp,fp
81105710:	dfc00117 	ldw	ra,4(sp)
81105714:	df000017 	ldw	fp,0(sp)
81105718:	dec00204 	addi	sp,sp,8
8110571c:	f800283a 	ret

81105720 <b_Transparent_Interface_Switch_Channel>:
	
	bool b_Transparent_Interface_Switch_Channel(char c_SpwID){
81105720:	defffb04 	addi	sp,sp,-20
81105724:	dfc00415 	stw	ra,16(sp)
81105728:	df000315 	stw	fp,12(sp)
8110572c:	df000304 	addi	fp,sp,12
81105730:	2005883a 	mov	r2,r4
81105734:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess;
		alt_u32 *pTranAddr = DDR2_ADDRESS_SPAN_EXTENDER_CNTL_BASE;
81105738:	00a04834 	movhi	r2,33056
8110573c:	108c3204 	addi	r2,r2,12488
81105740:	e0bffe15 	stw	r2,-8(fp)

		  bSuccess = TRUE;
81105744:	00800044 	movi	r2,1
81105748:	e0bffd15 	stw	r2,-12(fp)
		  switch (c_SpwID) {
8110574c:	e0bfff07 	ldb	r2,-4(fp)
81105750:	10bfefc4 	addi	r2,r2,-65
81105754:	10c00228 	cmpgeui	r3,r2,8
81105758:	18004d1e 	bne	r3,zero,81105890 <b_Transparent_Interface_Switch_Channel+0x170>
8110575c:	100690ba 	slli	r3,r2,2
81105760:	00a04434 	movhi	r2,33040
81105764:	1095dd04 	addi	r2,r2,22388
81105768:	1885883a 	add	r2,r3,r2
8110576c:	10800017 	ldw	r2,0(r2)
81105770:	1000683a 	jmp	r2
81105774:	81105794 	ori	r4,r16,16734
81105778:	811057b4 	orhi	r4,r16,16734
8110577c:	811057d4 	ori	r4,r16,16735
81105780:	811057f4 	orhi	r4,r16,16735
81105784:	81105814 	ori	r4,r16,16736
81105788:	81105834 	orhi	r4,r16,16736
8110578c:	81105854 	ori	r4,r16,16737
81105790:	81105874 	orhi	r4,r16,16737
			  case 'A':
				*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_A_CHANNEL_WINDOWED_OFFSET);
81105794:	e0bffe17 	ldw	r2,-8(fp)
81105798:	00f80034 	movhi	r3,57344
8110579c:	10c00015 	stw	r3,0(r2)
				*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_A_CHANNEL_WINDOWED_OFFSET) >> 32);
811057a0:	e0bffe17 	ldw	r2,-8(fp)
811057a4:	10800104 	addi	r2,r2,4
811057a8:	00c00044 	movi	r3,1
811057ac:	10c00015 	stw	r3,0(r2)
			  break;
811057b0:	00003b06 	br	811058a0 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'B':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_B_CHANNEL_WINDOWED_OFFSET);
811057b4:	e0bffe17 	ldw	r2,-8(fp)
811057b8:	00f00034 	movhi	r3,49152
811057bc:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_B_CHANNEL_WINDOWED_OFFSET) >> 32);
811057c0:	e0bffe17 	ldw	r2,-8(fp)
811057c4:	10800104 	addi	r2,r2,4
811057c8:	00c00044 	movi	r3,1
811057cc:	10c00015 	stw	r3,0(r2)
				  break;
811057d0:	00003306 	br	811058a0 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'C':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_C_CHANNEL_WINDOWED_OFFSET);
811057d4:	e0bffe17 	ldw	r2,-8(fp)
811057d8:	00e80034 	movhi	r3,40960
811057dc:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_C_CHANNEL_WINDOWED_OFFSET) >> 32);
811057e0:	e0bffe17 	ldw	r2,-8(fp)
811057e4:	10800104 	addi	r2,r2,4
811057e8:	00c00044 	movi	r3,1
811057ec:	10c00015 	stw	r3,0(r2)
				  break;
811057f0:	00002b06 	br	811058a0 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'D':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_E_CHANNEL_WINDOWED_OFFSET);
811057f4:	e0bffe17 	ldw	r2,-8(fp)
811057f8:	00d80034 	movhi	r3,24576
811057fc:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_E_CHANNEL_WINDOWED_OFFSET) >> 32);
81105800:	e0bffe17 	ldw	r2,-8(fp)
81105804:	10800104 	addi	r2,r2,4
81105808:	00c00044 	movi	r3,1
8110580c:	10c00015 	stw	r3,0(r2)
				  break;
81105810:	00002306 	br	811058a0 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'E':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_D_CHANNEL_WINDOWED_OFFSET);
81105814:	e0bffe17 	ldw	r2,-8(fp)
81105818:	00e00034 	movhi	r3,32768
8110581c:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_D_CHANNEL_WINDOWED_OFFSET) >> 32);
81105820:	e0bffe17 	ldw	r2,-8(fp)
81105824:	10800104 	addi	r2,r2,4
81105828:	00c00044 	movi	r3,1
8110582c:	10c00015 	stw	r3,0(r2)
				  break;
81105830:	00001b06 	br	811058a0 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'F':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_F_CHANNEL_WINDOWED_OFFSET);
81105834:	e0bffe17 	ldw	r2,-8(fp)
81105838:	00d00034 	movhi	r3,16384
8110583c:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_F_CHANNEL_WINDOWED_OFFSET) >> 32);
81105840:	e0bffe17 	ldw	r2,-8(fp)
81105844:	10800104 	addi	r2,r2,4
81105848:	00c00044 	movi	r3,1
8110584c:	10c00015 	stw	r3,0(r2)
				  break;
81105850:	00001306 	br	811058a0 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'G':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_G_CHANNEL_WINDOWED_OFFSET);
81105854:	e0bffe17 	ldw	r2,-8(fp)
81105858:	00c80034 	movhi	r3,8192
8110585c:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_G_CHANNEL_WINDOWED_OFFSET) >> 32);
81105860:	e0bffe17 	ldw	r2,-8(fp)
81105864:	10800104 	addi	r2,r2,4
81105868:	00c00044 	movi	r3,1
8110586c:	10c00015 	stw	r3,0(r2)
				  break;
81105870:	00000b06 	br	811058a0 <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'H':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_H_CHANNEL_WINDOWED_OFFSET);
81105874:	e0bffe17 	ldw	r2,-8(fp)
81105878:	10000015 	stw	zero,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_H_CHANNEL_WINDOWED_OFFSET) >> 32);
8110587c:	e0bffe17 	ldw	r2,-8(fp)
81105880:	10800104 	addi	r2,r2,4
81105884:	00c00044 	movi	r3,1
81105888:	10c00015 	stw	r3,0(r2)
				  break;
8110588c:	00000406 	br	811058a0 <b_Transparent_Interface_Switch_Channel+0x180>
			  default:
				  bSuccess = FALSE;
81105890:	e03ffd15 	stw	zero,-12(fp)
				  printf("SpW Channel not identified!! Error switching channels!! \n");
81105894:	012044b4 	movhi	r4,33042
81105898:	2134ce04 	addi	r4,r4,-11464
8110589c:	110bb800 	call	8110bb80 <puts>
		  }

		  return bSuccess;
811058a0:	e0bffd17 	ldw	r2,-12(fp)
	}
811058a4:	e037883a 	mov	sp,fp
811058a8:	dfc00117 	ldw	ra,4(sp)
811058ac:	df000017 	ldw	fp,0(sp)
811058b0:	dec00204 	addi	sp,sp,8
811058b4:	f800283a 	ret

811058b8 <b_Transparent_Interface_Send_SpaceWire_Data>:


	bool b_Transparent_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
811058b8:	defff704 	addi	sp,sp,-36
811058bc:	dfc00815 	stw	ra,32(sp)
811058c0:	df000715 	stw	fp,28(sp)
811058c4:	df000704 	addi	fp,sp,28
811058c8:	2007883a 	mov	r3,r4
811058cc:	e17ffe15 	stw	r5,-8(fp)
811058d0:	3005883a 	mov	r2,r6
811058d4:	e0fffd05 	stb	r3,-12(fp)
811058d8:	e0bfff0d 	sth	r2,-4(fp)
		
		bool bSuccess = FALSE;
811058dc:	e03ff915 	stw	zero,-28(fp)
		
		alt_u32 *memory_location = DDR2_ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BASE;
811058e0:	e03ffb15 	stw	zero,-20(fp)
		printf("memory_location = %u \n", memory_location);
811058e4:	e17ffb17 	ldw	r5,-20(fp)
811058e8:	012044b4 	movhi	r4,33042
811058ec:	2134dd04 	addi	r4,r4,-11404
811058f0:	110ba640 	call	8110ba64 <printf>
		memory_location += (TRAN_BURST_REGISTERS_OFFSET + TRAN_TX_REGISTER_OFFSET)*2;
811058f4:	e0bffb17 	ldw	r2,-20(fp)
811058f8:	10804204 	addi	r2,r2,264
811058fc:	e0bffb15 	stw	r2,-20(fp)
		printf("memory_location = %u \n", memory_location);
81105900:	e17ffb17 	ldw	r5,-20(fp)
81105904:	012044b4 	movhi	r4,33042
81105908:	2134dd04 	addi	r4,r4,-11404
8110590c:	110ba640 	call	8110ba64 <printf>

		alt_u16 cnt = 0;
81105910:	e03ffa0d 	sth	zero,-24(fp)
		alt_u8 resto = 0;
81105914:	e03ffc05 	stb	zero,-16(fp)
		
		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81105918:	e0bffd07 	ldb	r2,-12(fp)
8110591c:	10801050 	cmplti	r2,r2,65
81105920:	1000081e 	bne	r2,zero,81105944 <b_Transparent_Interface_Send_SpaceWire_Data+0x8c>
81105924:	e0bffd07 	ldb	r2,-12(fp)
81105928:	10801248 	cmpgei	r2,r2,73
8110592c:	1000051e 	bne	r2,zero,81105944 <b_Transparent_Interface_Send_SpaceWire_Data+0x8c>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81105930:	e0bffd07 	ldb	r2,-12(fp)
81105934:	1009883a 	mov	r4,r2
81105938:	11057200 	call	81105720 <b_Transparent_Interface_Switch_Channel>
			bSuccess          = TRUE;
8110593c:	00800044 	movi	r2,1
81105940:	e0bff915 	stw	r2,-28(fp)
		}

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
81105944:	e0bff917 	ldw	r2,-28(fp)
81105948:	10002626 	beq	r2,zero,811059e4 <b_Transparent_Interface_Send_SpaceWire_Data+0x12c>
8110594c:	e0bffd07 	ldb	r2,-12(fp)
81105950:	1009883a 	mov	r4,r2
81105954:	11056d00 	call	811056d0 <uc_Transparent_Interface_TX_FIFO_Status_Used>
81105958:	10803fcc 	andi	r2,r2,255
8110595c:	00c04004 	movi	r3,256
81105960:	1887c83a 	sub	r3,r3,r2
81105964:	e0bfff0b 	ldhu	r2,-4(fp)
81105968:	1004d0ba 	srli	r2,r2,2
8110596c:	10bfffcc 	andi	r2,r2,65535
81105970:	10800044 	addi	r2,r2,1
81105974:	18801b16 	blt	r3,r2,811059e4 <b_Transparent_Interface_Send_SpaceWire_Data+0x12c>
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
81105978:	e03ffa0d 	sth	zero,-24(fp)
8110597c:	00000b06 	br	811059ac <b_Transparent_Interface_Send_SpaceWire_Data+0xf4>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
81105980:	e0bffa0b 	ldhu	r2,-24(fp)
81105984:	e0fffe17 	ldw	r3,-8(fp)
81105988:	1885883a 	add	r2,r3,r2
8110598c:	10800003 	ldbu	r2,0(r2)
81105990:	10803fcc 	andi	r2,r2,255
81105994:	10fffff4 	orhi	r3,r2,65535
81105998:	e0bffb17 	ldw	r2,-20(fp)
8110599c:	10c00015 	stw	r3,0(r2)

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
811059a0:	e0bffa0b 	ldhu	r2,-24(fp)
811059a4:	10800044 	addi	r2,r2,1
811059a8:	e0bffa0d 	sth	r2,-24(fp)
811059ac:	e0fffa0b 	ldhu	r3,-24(fp)
811059b0:	e0bfff0b 	ldhu	r2,-4(fp)
811059b4:	18bff236 	bltu	r3,r2,81105980 <__reset+0xfb0e5980>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
			}
			/* Append an EOP to the end of the data in the Channel Memory Location */
			*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | 0x0100 | (alt_u16)data_buffer[data_size]);
811059b8:	e0bfff0b 	ldhu	r2,-4(fp)
811059bc:	e0fffe17 	ldw	r3,-8(fp)
811059c0:	1885883a 	add	r2,r3,r2
811059c4:	10800003 	ldbu	r2,0(r2)
811059c8:	10c03fcc 	andi	r3,r2,255
811059cc:	00bffff4 	movhi	r2,65535
811059d0:	10804004 	addi	r2,r2,256
811059d4:	1886b03a 	or	r3,r3,r2
811059d8:	e0bffb17 	ldw	r2,-20(fp)
811059dc:	10c00015 	stw	r3,0(r2)
811059e0:	00000106 	br	811059e8 <b_Transparent_Interface_Send_SpaceWire_Data+0x130>
			
		} else {
			bSuccess = FALSE;
811059e4:	e03ff915 	stw	zero,-28(fp)
		}
		
		return bSuccess;
811059e8:	e0bff917 	ldw	r2,-28(fp)
	}
811059ec:	e037883a 	mov	sp,fp
811059f0:	dfc00117 	ldw	ra,4(sp)
811059f4:	df000017 	ldw	fp,0(sp)
811059f8:	dec00204 	addi	sp,sp,8
811059fc:	f800283a 	ret

81105a00 <ui_Transparent_Interface_Get_SpaceWire_Data>:
	
	alt_u16 ui_Transparent_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer){
81105a00:	deffeb04 	addi	sp,sp,-84
81105a04:	dfc01415 	stw	ra,80(sp)
81105a08:	df001315 	stw	fp,76(sp)
81105a0c:	ddc01215 	stw	r23,72(sp)
81105a10:	dd801115 	stw	r22,68(sp)
81105a14:	dd401015 	stw	r21,64(sp)
81105a18:	dd000f15 	stw	r20,60(sp)
81105a1c:	dcc00e15 	stw	r19,56(sp)
81105a20:	dc800d15 	stw	r18,52(sp)
81105a24:	dc400c15 	stw	r17,48(sp)
81105a28:	dc000b15 	stw	r16,44(sp)
81105a2c:	df001304 	addi	fp,sp,76
81105a30:	2005883a 	mov	r2,r4
81105a34:	e17ff515 	stw	r5,-44(fp)
81105a38:	e0bff405 	stb	r2,-48(fp)
		
		alt_u16 ui_rx_data_size = 0;
81105a3c:	e03fed0d 	sth	zero,-76(fp)
		
		alt_u64 *memory_location = 0;
81105a40:	e03fef15 	stw	zero,-68(fp)
		memory_location += TRAN_BURST_REGISTERS_OFFSET + TRAN_RX_REGISTER_OFFSET;
81105a44:	e0bfef17 	ldw	r2,-68(fp)
81105a48:	10804004 	addi	r2,r2,256
81105a4c:	e0bfef15 	stw	r2,-68(fp)

		alt_u16 cnt = 0;
81105a50:	e03fed8d 	sth	zero,-74(fp)
		alt_u16 rx_buffer_data_size = 0;
81105a54:	e03fee0d 	sth	zero,-72(fp)
		alt_u64 rx_data = 0;
81105a58:	e03ff015 	stw	zero,-64(fp)
81105a5c:	e03ff115 	stw	zero,-60(fp)
		alt_u16 rx_data_buffer[4] = {0,0,0,0};
81105a60:	e03ff20d 	sth	zero,-56(fp)
81105a64:	e03ff28d 	sth	zero,-54(fp)
81105a68:	e03ff30d 	sth	zero,-52(fp)
81105a6c:	e03ff38d 	sth	zero,-50(fp)

		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81105a70:	e0bff407 	ldb	r2,-48(fp)
81105a74:	10801050 	cmplti	r2,r2,65
81105a78:	1000081e 	bne	r2,zero,81105a9c <ui_Transparent_Interface_Get_SpaceWire_Data+0x9c>
81105a7c:	e0bff407 	ldb	r2,-48(fp)
81105a80:	10801248 	cmpgei	r2,r2,73
81105a84:	1000051e 	bne	r2,zero,81105a9c <ui_Transparent_Interface_Get_SpaceWire_Data+0x9c>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81105a88:	e0bff407 	ldb	r2,-48(fp)
81105a8c:	1009883a 	mov	r4,r2
81105a90:	11057200 	call	81105720 <b_Transparent_Interface_Switch_Channel>
			rx_buffer_data_size = 0xFFFF;
81105a94:	00bfffc4 	movi	r2,-1
81105a98:	e0bfee0d 	sth	r2,-72(fp)
		}
		
		if (0xFFFF == rx_buffer_data_size) {
81105a9c:	e0ffee0b 	ldhu	r3,-72(fp)
81105aa0:	00bfffd4 	movui	r2,65535
81105aa4:	1880711e 	bne	r3,r2,81105c6c <ui_Transparent_Interface_Get_SpaceWire_Data+0x26c>
			/* Check the amount of data in the RX Buffer*/
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
81105aa8:	e0bff407 	ldb	r2,-48(fp)
81105aac:	1009883a 	mov	r4,r2
81105ab0:	11056d00 	call	811056d0 <uc_Transparent_Interface_TX_FIFO_Status_Used>
81105ab4:	10803fcc 	andi	r2,r2,255
81105ab8:	e0bfee0d 	sth	r2,-72(fp)
			if (rx_buffer_data_size > 0) {
81105abc:	e0bfee0b 	ldhu	r2,-72(fp)
81105ac0:	10006826 	beq	r2,zero,81105c64 <ui_Transparent_Interface_Get_SpaceWire_Data+0x264>
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81105ac4:	e03fed8d 	sth	zero,-74(fp)
81105ac8:	00006206 	br	81105c54 <ui_Transparent_Interface_Get_SpaceWire_Data+0x254>

					rx_data = *memory_location;
81105acc:	e0bfef17 	ldw	r2,-68(fp)
81105ad0:	10c00017 	ldw	r3,0(r2)
81105ad4:	e0fff015 	stw	r3,-64(fp)
81105ad8:	10800117 	ldw	r2,4(r2)
81105adc:	e0bff115 	stw	r2,-60(fp)

					rx_data_buffer[0] = (alt_u16)(0x000000000000FFFF & rx_data);
81105ae0:	e0bff017 	ldw	r2,-64(fp)
81105ae4:	e0bff20d 	sth	r2,-56(fp)
					rx_data_buffer[1] = (alt_u16)((0x00000000FFFF0000 & rx_data) >> 16);
81105ae8:	e0bff017 	ldw	r2,-64(fp)
81105aec:	143fffec 	andhi	r16,r2,65535
81105af0:	e0bff117 	ldw	r2,-60(fp)
81105af4:	1022703a 	and	r17,r2,zero
81105af8:	8804943a 	slli	r2,r17,16
81105afc:	8024d43a 	srli	r18,r16,16
81105b00:	14a4b03a 	or	r18,r2,r18
81105b04:	8826d43a 	srli	r19,r17,16
81105b08:	9005883a 	mov	r2,r18
81105b0c:	e0bff28d 	sth	r2,-54(fp)
					rx_data_buffer[2] = (alt_u16)((0x0000FFFF00000000 & rx_data) >> 32);
81105b10:	e0bff017 	ldw	r2,-64(fp)
81105b14:	1028703a 	and	r20,r2,zero
81105b18:	e0bff117 	ldw	r2,-60(fp)
81105b1c:	157fffcc 	andi	r21,r2,65535
81105b20:	a82cd83a 	srl	r22,r21,zero
81105b24:	002f883a 	mov	r23,zero
81105b28:	b005883a 	mov	r2,r22
81105b2c:	e0bff30d 	sth	r2,-52(fp)
					rx_data_buffer[3] = (alt_u16)((0xFFFF000000000000 & rx_data) >> 48);
81105b30:	e0bff117 	ldw	r2,-60(fp)
81105b34:	1004d43a 	srli	r2,r2,16
81105b38:	e0bff615 	stw	r2,-40(fp)
81105b3c:	e03ff715 	stw	zero,-36(fp)
81105b40:	e0bff60b 	ldhu	r2,-40(fp)
81105b44:	e0bff38d 	sth	r2,-50(fp)

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[0] & 0x0100) || (rx_data_buffer[0] == 0xFFFF))) {
81105b48:	e0bff20b 	ldhu	r2,-56(fp)
81105b4c:	10bfffcc 	andi	r2,r2,65535
81105b50:	1080400c 	andi	r2,r2,256
81105b54:	10000c1e 	bne	r2,zero,81105b88 <ui_Transparent_Interface_Get_SpaceWire_Data+0x188>
81105b58:	e0bff20b 	ldhu	r2,-56(fp)
81105b5c:	10ffffcc 	andi	r3,r2,65535
81105b60:	00bfffd4 	movui	r2,65535
81105b64:	18800826 	beq	r3,r2,81105b88 <ui_Transparent_Interface_Get_SpaceWire_Data+0x188>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[0]);
81105b68:	e0bfed0b 	ldhu	r2,-76(fp)
81105b6c:	e0fff517 	ldw	r3,-44(fp)
81105b70:	1885883a 	add	r2,r3,r2
81105b74:	e0fff20b 	ldhu	r3,-56(fp)
81105b78:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81105b7c:	e0bfed0b 	ldhu	r2,-76(fp)
81105b80:	10800044 	addi	r2,r2,1
81105b84:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[1] & 0x0100) || (rx_data_buffer[1] == 0xFFFF))) {
81105b88:	e0bff28b 	ldhu	r2,-54(fp)
81105b8c:	10bfffcc 	andi	r2,r2,65535
81105b90:	1080400c 	andi	r2,r2,256
81105b94:	10000c1e 	bne	r2,zero,81105bc8 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1c8>
81105b98:	e0bff28b 	ldhu	r2,-54(fp)
81105b9c:	10ffffcc 	andi	r3,r2,65535
81105ba0:	00bfffd4 	movui	r2,65535
81105ba4:	18800826 	beq	r3,r2,81105bc8 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1c8>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[1]);
81105ba8:	e0bfed0b 	ldhu	r2,-76(fp)
81105bac:	e0fff517 	ldw	r3,-44(fp)
81105bb0:	1885883a 	add	r2,r3,r2
81105bb4:	e0fff28b 	ldhu	r3,-54(fp)
81105bb8:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81105bbc:	e0bfed0b 	ldhu	r2,-76(fp)
81105bc0:	10800044 	addi	r2,r2,1
81105bc4:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[2] & 0x0100) || (rx_data_buffer[2] == 0xFFFF))) {
81105bc8:	e0bff30b 	ldhu	r2,-52(fp)
81105bcc:	10bfffcc 	andi	r2,r2,65535
81105bd0:	1080400c 	andi	r2,r2,256
81105bd4:	10000c1e 	bne	r2,zero,81105c08 <ui_Transparent_Interface_Get_SpaceWire_Data+0x208>
81105bd8:	e0bff30b 	ldhu	r2,-52(fp)
81105bdc:	10ffffcc 	andi	r3,r2,65535
81105be0:	00bfffd4 	movui	r2,65535
81105be4:	18800826 	beq	r3,r2,81105c08 <ui_Transparent_Interface_Get_SpaceWire_Data+0x208>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[2]);
81105be8:	e0bfed0b 	ldhu	r2,-76(fp)
81105bec:	e0fff517 	ldw	r3,-44(fp)
81105bf0:	1885883a 	add	r2,r3,r2
81105bf4:	e0fff30b 	ldhu	r3,-52(fp)
81105bf8:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81105bfc:	e0bfed0b 	ldhu	r2,-76(fp)
81105c00:	10800044 	addi	r2,r2,1
81105c04:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[3] & 0x0100) || (rx_data_buffer[3] == 0xFFFF))) {
81105c08:	e0bff38b 	ldhu	r2,-50(fp)
81105c0c:	10bfffcc 	andi	r2,r2,65535
81105c10:	1080400c 	andi	r2,r2,256
81105c14:	10000c1e 	bne	r2,zero,81105c48 <ui_Transparent_Interface_Get_SpaceWire_Data+0x248>
81105c18:	e0bff38b 	ldhu	r2,-50(fp)
81105c1c:	10ffffcc 	andi	r3,r2,65535
81105c20:	00bfffd4 	movui	r2,65535
81105c24:	18800826 	beq	r3,r2,81105c48 <ui_Transparent_Interface_Get_SpaceWire_Data+0x248>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[3]);
81105c28:	e0bfed0b 	ldhu	r2,-76(fp)
81105c2c:	e0fff517 	ldw	r3,-44(fp)
81105c30:	1885883a 	add	r2,r3,r2
81105c34:	e0fff38b 	ldhu	r3,-50(fp)
81105c38:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81105c3c:	e0bfed0b 	ldhu	r2,-76(fp)
81105c40:	10800044 	addi	r2,r2,1
81105c44:	e0bfed0d 	sth	r2,-76(fp)
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
			if (rx_buffer_data_size > 0) {
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81105c48:	e0bfed8b 	ldhu	r2,-74(fp)
81105c4c:	10800044 	addi	r2,r2,1
81105c50:	e0bfed8d 	sth	r2,-74(fp)
81105c54:	e0ffed8b 	ldhu	r3,-74(fp)
81105c58:	e0bfee0b 	ldhu	r2,-72(fp)
81105c5c:	18bf9b36 	bltu	r3,r2,81105acc <__reset+0xfb0e5acc>
81105c60:	00000306 	br	81105c70 <ui_Transparent_Interface_Get_SpaceWire_Data+0x270>
						ui_rx_data_size++;
					}

				}
			} else {
				ui_rx_data_size = 0;
81105c64:	e03fed0d 	sth	zero,-76(fp)
81105c68:	00000106 	br	81105c70 <ui_Transparent_Interface_Get_SpaceWire_Data+0x270>
			}
		} else {
			ui_rx_data_size = 0;
81105c6c:	e03fed0d 	sth	zero,-76(fp)
		}
	
		return ui_rx_data_size;
81105c70:	e0bfed0b 	ldhu	r2,-76(fp)
	}
81105c74:	e6fff804 	addi	sp,fp,-32
81105c78:	dfc00917 	ldw	ra,36(sp)
81105c7c:	df000817 	ldw	fp,32(sp)
81105c80:	ddc00717 	ldw	r23,28(sp)
81105c84:	dd800617 	ldw	r22,24(sp)
81105c88:	dd400517 	ldw	r21,20(sp)
81105c8c:	dd000417 	ldw	r20,16(sp)
81105c90:	dcc00317 	ldw	r19,12(sp)
81105c94:	dc800217 	ldw	r18,8(sp)
81105c98:	dc400117 	ldw	r17,4(sp)
81105c9c:	dc000017 	ldw	r16,0(sp)
81105ca0:	dec00a04 	addi	sp,sp,40
81105ca4:	f800283a 	ret

81105ca8 <DDR2_EEPROM_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_TEST(alt_u8 MemoryId){
81105ca8:	defff604 	addi	sp,sp,-40
81105cac:	dfc00915 	stw	ra,36(sp)
81105cb0:	df000815 	stw	fp,32(sp)
81105cb4:	df000804 	addi	fp,sp,32
81105cb8:	2005883a 	mov	r2,r4
81105cbc:	e0bfff05 	stb	r2,-4(fp)

  printf("===== DE4 DDR2 EEPROM Test =====\n");
81105cc0:	012044b4 	movhi	r4,33042
81105cc4:	2134e304 	addi	r4,r4,-11380
81105cc8:	110bb800 	call	8110bb80 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81105ccc:	00bfe804 	movi	r2,-96
81105cd0:	e0bffd05 	stb	r2,-12(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
81105cd4:	00800044 	movi	r2,1
81105cd8:	e0bff915 	stw	r2,-28(fp)
  switch (MemoryId) {
81105cdc:	e0bfff03 	ldbu	r2,-4(fp)
81105ce0:	10c00060 	cmpeqi	r3,r2,1
81105ce4:	1800031e 	bne	r3,zero,81105cf4 <DDR2_EEPROM_TEST+0x4c>
81105ce8:	108000a0 	cmpeqi	r2,r2,2
81105cec:	1000081e 	bne	r2,zero,81105d10 <DDR2_EEPROM_TEST+0x68>
81105cf0:	00000e06 	br	81105d2c <DDR2_EEPROM_TEST+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81105cf4:	00a00034 	movhi	r2,32768
81105cf8:	10826c04 	addi	r2,r2,2480
81105cfc:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81105d00:	00a00034 	movhi	r2,32768
81105d04:	10827004 	addi	r2,r2,2496
81105d08:	e0bffb15 	stw	r2,-20(fp)
    break;
81105d0c:	00000d06 	br	81105d44 <DDR2_EEPROM_TEST+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81105d10:	00a00034 	movhi	r2,32768
81105d14:	10824804 	addi	r2,r2,2336
81105d18:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
81105d1c:	00a00034 	movhi	r2,32768
81105d20:	10824c04 	addi	r2,r2,2352
81105d24:	e0bffb15 	stw	r2,-20(fp)
    break;
81105d28:	00000606 	br	81105d44 <DDR2_EEPROM_TEST+0x9c>
    default:
      bSuccess = FALSE;
81105d2c:	e03ff915 	stw	zero,-28(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81105d30:	012044b4 	movhi	r4,33042
81105d34:	2134ec04 	addi	r4,r4,-11344
81105d38:	110bb800 	call	8110bb80 <puts>
      return bSuccess;
81105d3c:	e0bff917 	ldw	r2,-28(fp)
81105d40:	00007d06 	br	81105f38 <DDR2_EEPROM_TEST+0x290>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
81105d44:	012044b4 	movhi	r4,33042
81105d48:	2134f804 	addi	r4,r4,-11296
81105d4c:	110bb800 	call	8110bb80 <puts>
  usleep(20*1000);
81105d50:	01138804 	movi	r4,20000
81105d54:	1118c880 	call	81118c88 <usleep>
  for(i = 0; i < 256 && bSuccess; i++){
81105d58:	e03ffc15 	stw	zero,-16(fp)
81105d5c:	00002006 	br	81105de0 <DDR2_EEPROM_TEST+0x138>
    ControlAddr = i;
81105d60:	e0bffc17 	ldw	r2,-16(fp)
81105d64:	e0bffd45 	stb	r2,-11(fp)
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, ControlAddr, &Value);
81105d68:	e0bffd03 	ldbu	r2,-12(fp)
81105d6c:	10c03fcc 	andi	r3,r2,255
81105d70:	18c0201c 	xori	r3,r3,128
81105d74:	18ffe004 	addi	r3,r3,-128
81105d78:	e13ffd43 	ldbu	r4,-11(fp)
81105d7c:	e0bffe04 	addi	r2,fp,-8
81105d80:	d8800015 	stw	r2,0(sp)
81105d84:	200f883a 	mov	r7,r4
81105d88:	180d883a 	mov	r6,r3
81105d8c:	e17ffb17 	ldw	r5,-20(fp)
81105d90:	e13ffa17 	ldw	r4,-24(fp)
81105d94:	1101d480 	call	81101d48 <I2C_Read>
81105d98:	e0bff915 	stw	r2,-28(fp)
    if (bSuccess){
81105d9c:	e0bff917 	ldw	r2,-28(fp)
81105da0:	10000926 	beq	r2,zero,81105dc8 <DDR2_EEPROM_TEST+0x120>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
81105da4:	e0bffd43 	ldbu	r2,-11(fp)
81105da8:	e0fffe03 	ldbu	r3,-8(fp)
81105dac:	18c03fcc 	andi	r3,r3,255
81105db0:	180d883a 	mov	r6,r3
81105db4:	100b883a 	mov	r5,r2
81105db8:	012044b4 	movhi	r4,33042
81105dbc:	2134fe04 	addi	r4,r4,-11272
81105dc0:	110ba640 	call	8110ba64 <printf>
81105dc4:	00000306 	br	81105dd4 <DDR2_EEPROM_TEST+0x12c>
    }else{
      printf("Failed to read EEPROM\n");
81105dc8:	012044b4 	movhi	r4,33042
81105dcc:	21350304 	addi	r4,r4,-11252
81105dd0:	110bb800 	call	8110bb80 <puts>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
  usleep(20*1000);
  for(i = 0; i < 256 && bSuccess; i++){
81105dd4:	e0bffc17 	ldw	r2,-16(fp)
81105dd8:	10800044 	addi	r2,r2,1
81105ddc:	e0bffc15 	stw	r2,-16(fp)
81105de0:	e0bffc17 	ldw	r2,-16(fp)
81105de4:	10804008 	cmpgei	r2,r2,256
81105de8:	1000021e 	bne	r2,zero,81105df4 <DDR2_EEPROM_TEST+0x14c>
81105dec:	e0bff917 	ldw	r2,-28(fp)
81105df0:	103fdb1e 	bne	r2,zero,81105d60 <__reset+0xfb0e5d60>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
    }else{
      printf("Failed to read EEPROM\n");
    }
  }
  if (bSuccess){
81105df4:	e0bff917 	ldw	r2,-28(fp)
81105df8:	10000426 	beq	r2,zero,81105e0c <DDR2_EEPROM_TEST+0x164>
    printf("DDR2 EEPROM Read Test Completed\n\n");
81105dfc:	012044b4 	movhi	r4,33042
81105e00:	21350904 	addi	r4,r4,-11228
81105e04:	110bb800 	call	8110bb80 <puts>
81105e08:	00000306 	br	81105e18 <DDR2_EEPROM_TEST+0x170>
  } else {
    printf("DDR2 EEPROM Read Test Failed\n\n");
81105e0c:	012044b4 	movhi	r4,33042
81105e10:	21351204 	addi	r4,r4,-11192
81105e14:	110bb800 	call	8110bb80 <puts>
  }
  
  printf("DDR2 EEPROM Write Test\n");
81105e18:	012044b4 	movhi	r4,33042
81105e1c:	21351a04 	addi	r4,r4,-11160
81105e20:	110bb800 	call	8110bb80 <puts>
  alt_u8 WriteData = 0x12, TestAddr = 128;
81105e24:	00800484 	movi	r2,18
81105e28:	e0bffd85 	stb	r2,-10(fp)
81105e2c:	00bfe004 	movi	r2,-128
81105e30:	e0bffdc5 	stb	r2,-9(fp)
  alt_u8 ReadData;
  usleep(20*1000);
81105e34:	01138804 	movi	r4,20000
81105e38:	1118c880 	call	81118c88 <usleep>
  bSuccess = I2C_Write(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, WriteData);
81105e3c:	e0bffd03 	ldbu	r2,-12(fp)
81105e40:	10c03fcc 	andi	r3,r2,255
81105e44:	18c0201c 	xori	r3,r3,128
81105e48:	18ffe004 	addi	r3,r3,-128
81105e4c:	e13ffdc3 	ldbu	r4,-9(fp)
81105e50:	e0bffd83 	ldbu	r2,-10(fp)
81105e54:	d8800015 	stw	r2,0(sp)
81105e58:	200f883a 	mov	r7,r4
81105e5c:	180d883a 	mov	r6,r3
81105e60:	e17ffb17 	ldw	r5,-20(fp)
81105e64:	e13ffa17 	ldw	r4,-24(fp)
81105e68:	1101c700 	call	81101c70 <I2C_Write>
81105e6c:	e0bff915 	stw	r2,-28(fp)
  if (!bSuccess){
81105e70:	e0bff917 	ldw	r2,-28(fp)
81105e74:	1000041e 	bne	r2,zero,81105e88 <DDR2_EEPROM_TEST+0x1e0>
    printf("Failed to write EEPROM\n");            
81105e78:	012044b4 	movhi	r4,33042
81105e7c:	21352004 	addi	r4,r4,-11136
81105e80:	110bb800 	call	8110bb80 <puts>
81105e84:	00002006 	br	81105f08 <DDR2_EEPROM_TEST+0x260>
  } else {
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, &ReadData);
81105e88:	e0bffd03 	ldbu	r2,-12(fp)
81105e8c:	10c03fcc 	andi	r3,r2,255
81105e90:	18c0201c 	xori	r3,r3,128
81105e94:	18ffe004 	addi	r3,r3,-128
81105e98:	e13ffdc3 	ldbu	r4,-9(fp)
81105e9c:	e0bffe44 	addi	r2,fp,-7
81105ea0:	d8800015 	stw	r2,0(sp)
81105ea4:	200f883a 	mov	r7,r4
81105ea8:	180d883a 	mov	r6,r3
81105eac:	e17ffb17 	ldw	r5,-20(fp)
81105eb0:	e13ffa17 	ldw	r4,-24(fp)
81105eb4:	1101d480 	call	81101d48 <I2C_Read>
81105eb8:	e0bff915 	stw	r2,-28(fp)
    if (!bSuccess){
81105ebc:	e0bff917 	ldw	r2,-28(fp)
81105ec0:	1000041e 	bne	r2,zero,81105ed4 <DDR2_EEPROM_TEST+0x22c>
      printf("Failed to read EEPROM for verify\n");            
81105ec4:	012044b4 	movhi	r4,33042
81105ec8:	21352604 	addi	r4,r4,-11112
81105ecc:	110bb800 	call	8110bb80 <puts>
81105ed0:	00000d06 	br	81105f08 <DDR2_EEPROM_TEST+0x260>
    } else {
      if (ReadData != WriteData){
81105ed4:	e0bffe43 	ldbu	r2,-7(fp)
81105ed8:	10c03fcc 	andi	r3,r2,255
81105edc:	e0bffd83 	ldbu	r2,-10(fp)
81105ee0:	18800926 	beq	r3,r2,81105f08 <DDR2_EEPROM_TEST+0x260>
        bSuccess = FALSE;
81105ee4:	e03ff915 	stw	zero,-28(fp)
        printf("Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n", ReadData, WriteData);
81105ee8:	e0bffe43 	ldbu	r2,-7(fp)
81105eec:	10803fcc 	andi	r2,r2,255
81105ef0:	e0fffd83 	ldbu	r3,-10(fp)
81105ef4:	180d883a 	mov	r6,r3
81105ef8:	100b883a 	mov	r5,r2
81105efc:	012044b4 	movhi	r4,33042
81105f00:	21352f04 	addi	r4,r4,-11076
81105f04:	110ba640 	call	8110ba64 <printf>
      }
    }
  }
  if (bSuccess){
81105f08:	e0bff917 	ldw	r2,-28(fp)
81105f0c:	10000426 	beq	r2,zero,81105f20 <DDR2_EEPROM_TEST+0x278>
    printf("DDR2 EEPROM Write Test Completed\n\n");
81105f10:	012044b4 	movhi	r4,33042
81105f14:	21353e04 	addi	r4,r4,-11016
81105f18:	110bb800 	call	8110bb80 <puts>
81105f1c:	00000306 	br	81105f2c <DDR2_EEPROM_TEST+0x284>
  } else {
    printf("DDR2 EEPROM Write Test Failed\n\n");
81105f20:	012044b4 	movhi	r4,33042
81105f24:	21354704 	addi	r4,r4,-10980
81105f28:	110bb800 	call	8110bb80 <puts>
  }
  printf("\n");
81105f2c:	01000284 	movi	r4,10
81105f30:	110baa80 	call	8110baa8 <putchar>

  return bSuccess;
81105f34:	e0bff917 	ldw	r2,-28(fp)
}
81105f38:	e037883a 	mov	sp,fp
81105f3c:	dfc00117 	ldw	ra,4(sp)
81105f40:	df000017 	ldw	fp,0(sp)
81105f44:	dec00204 	addi	sp,sp,8
81105f48:	f800283a 	ret

81105f4c <DDR2_EEPROM_DUMP>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_DUMP(alt_u8 MemoryId){
81105f4c:	deffb704 	addi	sp,sp,-292
81105f50:	dfc04815 	stw	ra,288(sp)
81105f54:	df004715 	stw	fp,284(sp)
81105f58:	df004704 	addi	fp,sp,284
81105f5c:	2005883a 	mov	r2,r4
81105f60:	e0bfff05 	stb	r2,-4(fp)
 
  printf("===== DE4 DDR2 EEPROM Dump =====\n");
81105f64:	012044b4 	movhi	r4,33042
81105f68:	21354f04 	addi	r4,r4,-10948
81105f6c:	110bb800 	call	8110bb80 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81105f70:	00bfe804 	movi	r2,-96
81105f74:	e0bfbd05 	stb	r2,-268(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
81105f78:	00800044 	movi	r2,1
81105f7c:	e0bfbe15 	stw	r2,-264(fp)
  switch (MemoryId) {
81105f80:	e0bfff03 	ldbu	r2,-4(fp)
81105f84:	10c00060 	cmpeqi	r3,r2,1
81105f88:	1800031e 	bne	r3,zero,81105f98 <DDR2_EEPROM_DUMP+0x4c>
81105f8c:	108000a0 	cmpeqi	r2,r2,2
81105f90:	1000081e 	bne	r2,zero,81105fb4 <DDR2_EEPROM_DUMP+0x68>
81105f94:	00000e06 	br	81105fd0 <DDR2_EEPROM_DUMP+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81105f98:	00a00034 	movhi	r2,32768
81105f9c:	10826c04 	addi	r2,r2,2480
81105fa0:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81105fa4:	00a00034 	movhi	r2,32768
81105fa8:	10827004 	addi	r2,r2,2496
81105fac:	e0bfbb15 	stw	r2,-276(fp)
    break;
81105fb0:	00000d06 	br	81105fe8 <DDR2_EEPROM_DUMP+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81105fb4:	00a00034 	movhi	r2,32768
81105fb8:	10824804 	addi	r2,r2,2336
81105fbc:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
81105fc0:	00a00034 	movhi	r2,32768
81105fc4:	10824c04 	addi	r2,r2,2352
81105fc8:	e0bfbb15 	stw	r2,-276(fp)
    break;
81105fcc:	00000606 	br	81105fe8 <DDR2_EEPROM_DUMP+0x9c>
    default:
      bSuccess = FALSE;
81105fd0:	e03fbe15 	stw	zero,-264(fp)
	  printf("DR2 Memory ID not identified!! Aborting Dump \n");
81105fd4:	012044b4 	movhi	r4,33042
81105fd8:	21355804 	addi	r4,r4,-10912
81105fdc:	110bb800 	call	8110bb80 <puts>
      return bSuccess;
81105fe0:	e0bfbe17 	ldw	r2,-264(fp)
81105fe4:	00012006 	br	81106468 <DDR2_EEPROM_DUMP+0x51c>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
81105fe8:	e0bfbd03 	ldbu	r2,-268(fp)
81105fec:	10c03fcc 	andi	r3,r2,255
81105ff0:	18c0201c 	xori	r3,r3,128
81105ff4:	18ffe004 	addi	r3,r3,-128
81105ff8:	e13fbf04 	addi	r4,fp,-260
81105ffc:	00804004 	movi	r2,256
81106000:	d8800015 	stw	r2,0(sp)
81106004:	200f883a 	mov	r7,r4
81106008:	180d883a 	mov	r6,r3
8110600c:	e17fbb17 	ldw	r5,-276(fp)
81106010:	e13fba17 	ldw	r4,-280(fp)
81106014:	1101e480 	call	81101e48 <I2C_MultipleRead>
81106018:	e0bfbe15 	stw	r2,-264(fp)
  if (bSuccess){
8110601c:	e0bfbe17 	ldw	r2,-264(fp)
81106020:	10010b26 	beq	r2,zero,81106450 <DDR2_EEPROM_DUMP+0x504>
    for(i = 0; i < 256 && bSuccess; i++){
81106024:	e03fbc15 	stw	zero,-272(fp)
81106028:	00010306 	br	81106438 <DDR2_EEPROM_DUMP+0x4ec>
      printf("EEPROM[%03d]=%02Xh ", i, szData[i]);
8110602c:	e0ffbf04 	addi	r3,fp,-260
81106030:	e0bfbc17 	ldw	r2,-272(fp)
81106034:	1885883a 	add	r2,r3,r2
81106038:	10800003 	ldbu	r2,0(r2)
8110603c:	10803fcc 	andi	r2,r2,255
81106040:	100d883a 	mov	r6,r2
81106044:	e17fbc17 	ldw	r5,-272(fp)
81106048:	012044b4 	movhi	r4,33042
8110604c:	21356404 	addi	r4,r4,-10864
81106050:	110ba640 	call	8110ba64 <printf>
      if (i == 0)
81106054:	e0bfbc17 	ldw	r2,-272(fp)
81106058:	1000041e 	bne	r2,zero,8110606c <DDR2_EEPROM_DUMP+0x120>
        printf("(Number of SPD Bytes Used)\n");
8110605c:	012044b4 	movhi	r4,33042
81106060:	21356904 	addi	r4,r4,-10844
81106064:	110bb800 	call	8110bb80 <puts>
81106068:	0000f006 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 1)
8110606c:	e0bfbc17 	ldw	r2,-272(fp)
81106070:	10800058 	cmpnei	r2,r2,1
81106074:	1000041e 	bne	r2,zero,81106088 <DDR2_EEPROM_DUMP+0x13c>
        printf("(Total Number of Bytes in SPD Device, Log2(N))\n");
81106078:	012044b4 	movhi	r4,33042
8110607c:	21357004 	addi	r4,r4,-10816
81106080:	110bb800 	call	8110bb80 <puts>
81106084:	0000e906 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 2)
81106088:	e0bfbc17 	ldw	r2,-272(fp)
8110608c:	10800098 	cmpnei	r2,r2,2
81106090:	1000041e 	bne	r2,zero,811060a4 <DDR2_EEPROM_DUMP+0x158>
        printf("(Basic Memory Type[08h:DDR2])\n");
81106094:	012044b4 	movhi	r4,33042
81106098:	21357c04 	addi	r4,r4,-10768
8110609c:	110bb800 	call	8110bb80 <puts>
811060a0:	0000e206 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 3)
811060a4:	e0bfbc17 	ldw	r2,-272(fp)
811060a8:	108000d8 	cmpnei	r2,r2,3
811060ac:	1000041e 	bne	r2,zero,811060c0 <DDR2_EEPROM_DUMP+0x174>
        printf("(Number of Row Addresses on Assembly)\n");
811060b0:	012044b4 	movhi	r4,33042
811060b4:	21358404 	addi	r4,r4,-10736
811060b8:	110bb800 	call	8110bb80 <puts>
811060bc:	0000db06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 4)
811060c0:	e0bfbc17 	ldw	r2,-272(fp)
811060c4:	10800118 	cmpnei	r2,r2,4
811060c8:	1000041e 	bne	r2,zero,811060dc <DDR2_EEPROM_DUMP+0x190>
        printf("(Number of Column Addresses on Assembly)\n");
811060cc:	012044b4 	movhi	r4,33042
811060d0:	21358e04 	addi	r4,r4,-10696
811060d4:	110bb800 	call	8110bb80 <puts>
811060d8:	0000d406 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 5)
811060dc:	e0bfbc17 	ldw	r2,-272(fp)
811060e0:	10800158 	cmpnei	r2,r2,5
811060e4:	1000041e 	bne	r2,zero,811060f8 <DDR2_EEPROM_DUMP+0x1ac>
        printf("(DIMM Height and Module Rank Number[b2b1b0+1])\n");
811060e8:	012044b4 	movhi	r4,33042
811060ec:	21359904 	addi	r4,r4,-10652
811060f0:	110bb800 	call	8110bb80 <puts>
811060f4:	0000cd06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 6)
811060f8:	e0bfbc17 	ldw	r2,-272(fp)
811060fc:	10800198 	cmpnei	r2,r2,6
81106100:	1000041e 	bne	r2,zero,81106114 <DDR2_EEPROM_DUMP+0x1c8>
        printf("(Module Data Width)\n");
81106104:	012044b4 	movhi	r4,33042
81106108:	2135a504 	addi	r4,r4,-10604
8110610c:	110bb800 	call	8110bb80 <puts>
81106110:	0000c606 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 7)
81106114:	e0bfbc17 	ldw	r2,-272(fp)
81106118:	108001d8 	cmpnei	r2,r2,7
8110611c:	1000041e 	bne	r2,zero,81106130 <DDR2_EEPROM_DUMP+0x1e4>
        printf("(Module Data Width, Continued)\n");
81106120:	012044b4 	movhi	r4,33042
81106124:	2135aa04 	addi	r4,r4,-10584
81106128:	110bb800 	call	8110bb80 <puts>
8110612c:	0000bf06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 16)
81106130:	e0bfbc17 	ldw	r2,-272(fp)
81106134:	10800418 	cmpnei	r2,r2,16
81106138:	1000041e 	bne	r2,zero,8110614c <DDR2_EEPROM_DUMP+0x200>
        printf("(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
8110613c:	012044b4 	movhi	r4,33042
81106140:	2135b204 	addi	r4,r4,-10552
81106144:	110bb800 	call	8110bb80 <puts>
81106148:	0000b806 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 13)
8110614c:	e0bfbc17 	ldw	r2,-272(fp)
81106150:	10800358 	cmpnei	r2,r2,13
81106154:	1000041e 	bne	r2,zero,81106168 <DDR2_EEPROM_DUMP+0x21c>
        printf("(Primary SDRAM width)\n");
81106158:	012044b4 	movhi	r4,33042
8110615c:	2135bf04 	addi	r4,r4,-10500
81106160:	110bb800 	call	8110bb80 <puts>
81106164:	0000b106 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 14)
81106168:	e0bfbc17 	ldw	r2,-272(fp)
8110616c:	10800398 	cmpnei	r2,r2,14
81106170:	1000041e 	bne	r2,zero,81106184 <DDR2_EEPROM_DUMP+0x238>
        printf("(ECC SDRAM width)\n");
81106174:	012044b4 	movhi	r4,33042
81106178:	2135c504 	addi	r4,r4,-10476
8110617c:	110bb800 	call	8110bb80 <puts>
81106180:	0000aa06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 17)
81106184:	e0bfbc17 	ldw	r2,-272(fp)
81106188:	10800458 	cmpnei	r2,r2,17
8110618c:	1000041e 	bne	r2,zero,811061a0 <DDR2_EEPROM_DUMP+0x254>
        printf("(Banks per SDRAM device)\n");
81106190:	012044b4 	movhi	r4,33042
81106194:	2135ca04 	addi	r4,r4,-10456
81106198:	110bb800 	call	8110bb80 <puts>
8110619c:	0000a306 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 18)
811061a0:	e0bfbc17 	ldw	r2,-272(fp)
811061a4:	10800498 	cmpnei	r2,r2,18
811061a8:	1000041e 	bne	r2,zero,811061bc <DDR2_EEPROM_DUMP+0x270>
        printf("(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
811061ac:	012044b4 	movhi	r4,33042
811061b0:	2135d104 	addi	r4,r4,-10428
811061b4:	110bb800 	call	8110bb80 <puts>
811061b8:	00009c06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 20)
811061bc:	e0bfbc17 	ldw	r2,-272(fp)
811061c0:	10800518 	cmpnei	r2,r2,20
811061c4:	1000041e 	bne	r2,zero,811061d8 <DDR2_EEPROM_DUMP+0x28c>
        printf("(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
811061c8:	012044b4 	movhi	r4,33042
811061cc:	2135de04 	addi	r4,r4,-10376
811061d0:	110bb800 	call	8110bb80 <puts>
811061d4:	00009506 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 22)
811061d8:	e0bfbc17 	ldw	r2,-272(fp)
811061dc:	10800598 	cmpnei	r2,r2,22
811061e0:	1000041e 	bne	r2,zero,811061f4 <DDR2_EEPROM_DUMP+0x2a8>
        printf("(Memory Chip feature bitmap)\n");
811061e4:	012044b4 	movhi	r4,33042
811061e8:	2135f004 	addi	r4,r4,-10304
811061ec:	110bb800 	call	8110bb80 <puts>
811061f0:	00008e06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 27)
811061f4:	e0bfbc17 	ldw	r2,-272(fp)
811061f8:	108006d8 	cmpnei	r2,r2,27
811061fc:	1000041e 	bne	r2,zero,81106210 <DDR2_EEPROM_DUMP+0x2c4>
        printf("(Minimun row precharge time[tRP;nsx4])\n");
81106200:	012044b4 	movhi	r4,33042
81106204:	2135f804 	addi	r4,r4,-10272
81106208:	110bb800 	call	8110bb80 <puts>
8110620c:	00008706 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 28)
81106210:	e0bfbc17 	ldw	r2,-272(fp)
81106214:	10800718 	cmpnei	r2,r2,28
81106218:	1000041e 	bne	r2,zero,8110622c <DDR2_EEPROM_DUMP+0x2e0>
        printf("(Minimun row active-row activce delay[tRRD;nsx4])\n");
8110621c:	012044b4 	movhi	r4,33042
81106220:	21360204 	addi	r4,r4,-10232
81106224:	110bb800 	call	8110bb80 <puts>
81106228:	00008006 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 29)
8110622c:	e0bfbc17 	ldw	r2,-272(fp)
81106230:	10800758 	cmpnei	r2,r2,29
81106234:	1000041e 	bne	r2,zero,81106248 <DDR2_EEPROM_DUMP+0x2fc>
        printf("(Minimun RAS to CAS delay[tRCD;nsx4])\n");
81106238:	012044b4 	movhi	r4,33042
8110623c:	21360f04 	addi	r4,r4,-10180
81106240:	110bb800 	call	8110bb80 <puts>
81106244:	00007906 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 30)
81106248:	e0bfbc17 	ldw	r2,-272(fp)
8110624c:	10800798 	cmpnei	r2,r2,30
81106250:	1000041e 	bne	r2,zero,81106264 <DDR2_EEPROM_DUMP+0x318>
        printf("(Minimun acive to precharge time[tRAS;ns])\n");
81106254:	012044b4 	movhi	r4,33042
81106258:	21361904 	addi	r4,r4,-10140
8110625c:	110bb800 	call	8110bb80 <puts>
81106260:	00007206 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 31)
81106264:	e0bfbc17 	ldw	r2,-272(fp)
81106268:	108007d8 	cmpnei	r2,r2,31
8110626c:	1000041e 	bne	r2,zero,81106280 <DDR2_EEPROM_DUMP+0x334>
        printf("(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
81106270:	012044b4 	movhi	r4,33042
81106274:	21362404 	addi	r4,r4,-10096
81106278:	110bb800 	call	8110bb80 <puts>
8110627c:	00006b06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 36)
81106280:	e0bfbc17 	ldw	r2,-272(fp)
81106284:	10800918 	cmpnei	r2,r2,36
81106288:	1000041e 	bne	r2,zero,8110629c <DDR2_EEPROM_DUMP+0x350>
        printf("(Minimun write receovery time[tWR;nsx4])\n");
8110628c:	012044b4 	movhi	r4,33042
81106290:	21363504 	addi	r4,r4,-10028
81106294:	110bb800 	call	8110bb80 <puts>
81106298:	00006406 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 37)
8110629c:	e0bfbc17 	ldw	r2,-272(fp)
811062a0:	10800958 	cmpnei	r2,r2,37
811062a4:	1000041e 	bne	r2,zero,811062b8 <DDR2_EEPROM_DUMP+0x36c>
        printf("(Internal write to read command delay[tWTR;nsx4])\n");
811062a8:	012044b4 	movhi	r4,33042
811062ac:	21364004 	addi	r4,r4,-9984
811062b0:	110bb800 	call	8110bb80 <puts>
811062b4:	00005d06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 38)
811062b8:	e0bfbc17 	ldw	r2,-272(fp)
811062bc:	10800998 	cmpnei	r2,r2,38
811062c0:	1000041e 	bne	r2,zero,811062d4 <DDR2_EEPROM_DUMP+0x388>
        printf("(Internal read to precharge command delay[tRTP;nsx4])\n");
811062c4:	012044b4 	movhi	r4,33042
811062c8:	21364d04 	addi	r4,r4,-9932
811062cc:	110bb800 	call	8110bb80 <puts>
811062d0:	00005606 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 41)
811062d4:	e0bfbc17 	ldw	r2,-272(fp)
811062d8:	10800a58 	cmpnei	r2,r2,41
811062dc:	1000041e 	bne	r2,zero,811062f0 <DDR2_EEPROM_DUMP+0x3a4>
        printf("(Minimun activce to active/refresh time[tRC;ns])\n");
811062e0:	012044b4 	movhi	r4,33042
811062e4:	21365b04 	addi	r4,r4,-9876
811062e8:	110bb800 	call	8110bb80 <puts>
811062ec:	00004f06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 42)
811062f0:	e0bfbc17 	ldw	r2,-272(fp)
811062f4:	10800a98 	cmpnei	r2,r2,42
811062f8:	1000041e 	bne	r2,zero,8110630c <DDR2_EEPROM_DUMP+0x3c0>
        printf("(Minimun refresh to active/refresh time[tRFC;ns])\n");
811062fc:	012044b4 	movhi	r4,33042
81106300:	21366804 	addi	r4,r4,-9824
81106304:	110bb800 	call	8110bb80 <puts>
81106308:	00004806 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 62)
8110630c:	e0bfbc17 	ldw	r2,-272(fp)
81106310:	10800f98 	cmpnei	r2,r2,62
81106314:	1000041e 	bne	r2,zero,81106328 <DDR2_EEPROM_DUMP+0x3dc>
        printf("(SPD Revision)\n");
81106318:	012044b4 	movhi	r4,33042
8110631c:	21367504 	addi	r4,r4,-9772
81106320:	110bb800 	call	8110bb80 <puts>
81106324:	00004106 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 63)
81106328:	e0bfbc17 	ldw	r2,-272(fp)
8110632c:	10800fd8 	cmpnei	r2,r2,63
81106330:	1000041e 	bne	r2,zero,81106344 <DDR2_EEPROM_DUMP+0x3f8>
        printf("(Checksum)\n");
81106334:	012044b4 	movhi	r4,33042
81106338:	21367904 	addi	r4,r4,-9756
8110633c:	110bb800 	call	8110bb80 <puts>
81106340:	00003a06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 64)
81106344:	e0bfbc17 	ldw	r2,-272(fp)
81106348:	10801018 	cmpnei	r2,r2,64
8110634c:	1000041e 	bne	r2,zero,81106360 <DDR2_EEPROM_DUMP+0x414>
        printf("(64~71: Manufacturer JEDEC ID)\n");
81106350:	012044b4 	movhi	r4,33042
81106354:	21367c04 	addi	r4,r4,-9744
81106358:	110bb800 	call	8110bb80 <puts>
8110635c:	00003306 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 72)
81106360:	e0bfbc17 	ldw	r2,-272(fp)
81106364:	10801218 	cmpnei	r2,r2,72
81106368:	1000041e 	bne	r2,zero,8110637c <DDR2_EEPROM_DUMP+0x430>
        printf("(Module manufacturing location[Vendor-specific code])\n");
8110636c:	012044b4 	movhi	r4,33042
81106370:	21368404 	addi	r4,r4,-9712
81106374:	110bb800 	call	8110bb80 <puts>
81106378:	00002c06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 73)
8110637c:	e0bfbc17 	ldw	r2,-272(fp)
81106380:	10801258 	cmpnei	r2,r2,73
81106384:	1000041e 	bne	r2,zero,81106398 <DDR2_EEPROM_DUMP+0x44c>
        printf("(73~90: Moduloe part number)\n");
81106388:	012044b4 	movhi	r4,33042
8110638c:	21369204 	addi	r4,r4,-9656
81106390:	110bb800 	call	8110bb80 <puts>
81106394:	00002506 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 91)
81106398:	e0bfbc17 	ldw	r2,-272(fp)
8110639c:	108016d8 	cmpnei	r2,r2,91
811063a0:	1000041e 	bne	r2,zero,811063b4 <DDR2_EEPROM_DUMP+0x468>
        printf("(91~92: Moduloe revision code)\n");
811063a4:	012044b4 	movhi	r4,33042
811063a8:	21369a04 	addi	r4,r4,-9624
811063ac:	110bb800 	call	8110bb80 <puts>
811063b0:	00001e06 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 93)
811063b4:	e0bfbc17 	ldw	r2,-272(fp)
811063b8:	10801758 	cmpnei	r2,r2,93
811063bc:	1000041e 	bne	r2,zero,811063d0 <DDR2_EEPROM_DUMP+0x484>
        printf("(Manufacture Years since 2000[0-255])\n");
811063c0:	012044b4 	movhi	r4,33042
811063c4:	2136a204 	addi	r4,r4,-9592
811063c8:	110bb800 	call	8110bb80 <puts>
811063cc:	00001706 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 94)
811063d0:	e0bfbc17 	ldw	r2,-272(fp)
811063d4:	10801798 	cmpnei	r2,r2,94
811063d8:	1000041e 	bne	r2,zero,811063ec <DDR2_EEPROM_DUMP+0x4a0>
        printf("(Manufacture Weeks[1-52])\n");
811063dc:	012044b4 	movhi	r4,33042
811063e0:	2136ac04 	addi	r4,r4,-9552
811063e4:	110bb800 	call	8110bb80 <puts>
811063e8:	00001006 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 95)
811063ec:	e0bfbc17 	ldw	r2,-272(fp)
811063f0:	108017d8 	cmpnei	r2,r2,95
811063f4:	1000041e 	bne	r2,zero,81106408 <DDR2_EEPROM_DUMP+0x4bc>
        printf("(95~98[4-bytes]: Module serial number)\n");
811063f8:	012044b4 	movhi	r4,33042
811063fc:	2136b304 	addi	r4,r4,-9524
81106400:	110bb800 	call	8110bb80 <puts>
81106404:	00000906 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 99)
81106408:	e0bfbc17 	ldw	r2,-272(fp)
8110640c:	108018d8 	cmpnei	r2,r2,99
81106410:	1000041e 	bne	r2,zero,81106424 <DDR2_EEPROM_DUMP+0x4d8>
        printf("(99~128: Manufacturer-specific data)\n");
81106414:	012044b4 	movhi	r4,33042
81106418:	2136bd04 	addi	r4,r4,-9484
8110641c:	110bb800 	call	8110bb80 <puts>
81106420:	00000206 	br	8110642c <DDR2_EEPROM_DUMP+0x4e0>
      else
        printf("\n");
81106424:	01000284 	movi	r4,10
81106428:	110baa80 	call	8110baa8 <putchar>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
  if (bSuccess){
    for(i = 0; i < 256 && bSuccess; i++){
8110642c:	e0bfbc17 	ldw	r2,-272(fp)
81106430:	10800044 	addi	r2,r2,1
81106434:	e0bfbc15 	stw	r2,-272(fp)
81106438:	e0bfbc17 	ldw	r2,-272(fp)
8110643c:	10804008 	cmpgei	r2,r2,256
81106440:	1000061e 	bne	r2,zero,8110645c <DDR2_EEPROM_DUMP+0x510>
81106444:	e0bfbe17 	ldw	r2,-264(fp)
81106448:	103ef81e 	bne	r2,zero,8110602c <__reset+0xfb0e602c>
8110644c:	00000306 	br	8110645c <DDR2_EEPROM_DUMP+0x510>
        printf("(99~128: Manufacturer-specific data)\n");
      else
        printf("\n");
    }
  } else {
    printf("Failed to dump EEPROM\n"); 
81106450:	012044b4 	movhi	r4,33042
81106454:	2136c704 	addi	r4,r4,-9444
81106458:	110bb800 	call	8110bb80 <puts>
  }
  printf("\n");
8110645c:	01000284 	movi	r4,10
81106460:	110baa80 	call	8110baa8 <putchar>

  return bSuccess;  
81106464:	e0bfbe17 	ldw	r2,-264(fp)
}
81106468:	e037883a 	mov	sp,fp
8110646c:	dfc00117 	ldw	ra,4(sp)
81106470:	df000017 	ldw	fp,0(sp)
81106474:	dec00204 	addi	sp,sp,8
81106478:	f800283a 	ret

8110647c <DDR2_SWITCH_MEMORY>:

bool DDR2_SWITCH_MEMORY(alt_u8 MemoryId){
8110647c:	defffb04 	addi	sp,sp,-20
81106480:	dfc00415 	stw	ra,16(sp)
81106484:	df000315 	stw	fp,12(sp)
81106488:	df000304 	addi	fp,sp,12
8110648c:	2005883a 	mov	r2,r4
81106490:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *pDdr2MemAddr = DDR2_EXTENDED_ADDRESS_CONTROL_BASE;
81106494:	00a04834 	movhi	r2,33056
81106498:	108c3204 	addi	r2,r2,12488
8110649c:	e0bffe15 	stw	r2,-8(fp)

	  bSuccess = TRUE;
811064a0:	00800044 	movi	r2,1
811064a4:	e0bffd15 	stw	r2,-12(fp)
	  switch (MemoryId) {
811064a8:	e0bfff03 	ldbu	r2,-4(fp)
811064ac:	10c00060 	cmpeqi	r3,r2,1
811064b0:	1800031e 	bne	r3,zero,811064c0 <DDR2_SWITCH_MEMORY+0x44>
811064b4:	108000a0 	cmpeqi	r2,r2,2
811064b8:	1000041e 	bne	r2,zero,811064cc <DDR2_SWITCH_MEMORY+0x50>
811064bc:	00000706 	br	811064dc <DDR2_SWITCH_MEMORY+0x60>
	    case DDR2_M1_ID:
	  	  *(pDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
811064c0:	e0bffe17 	ldw	r2,-8(fp)
811064c4:	10000015 	stw	zero,0(r2)
	    break;
811064c8:	00000806 	br	811064ec <DDR2_SWITCH_MEMORY+0x70>
	    case DDR2_M2_ID:
		  *(pDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
811064cc:	e0bffe17 	ldw	r2,-8(fp)
811064d0:	00e00034 	movhi	r3,32768
811064d4:	10c00015 	stw	r3,0(r2)
	    break;
811064d8:	00000406 	br	811064ec <DDR2_SWITCH_MEMORY+0x70>
	    default:
	      bSuccess = FALSE;
811064dc:	e03ffd15 	stw	zero,-12(fp)
		  printf("DR2 Memory ID not identified!! Error switching memories!! \n");
811064e0:	012044b4 	movhi	r4,33042
811064e4:	2136cd04 	addi	r4,r4,-9420
811064e8:	110bb800 	call	8110bb80 <puts>
	  }

	  return bSuccess;
811064ec:	e0bffd17 	ldw	r2,-12(fp)
}
811064f0:	e037883a 	mov	sp,fp
811064f4:	dfc00117 	ldw	ra,4(sp)
811064f8:	df000017 	ldw	fp,0(sp)
811064fc:	dec00204 	addi	sp,sp,8
81106500:	f800283a 	ret

81106504 <DDR2_MEMORY_WRITE_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_WRITE_TEST(alt_u8 MemoryId){
81106504:	deffe304 	addi	sp,sp,-116
81106508:	dfc01c15 	stw	ra,112(sp)
8110650c:	df001b15 	stw	fp,108(sp)
81106510:	dc401a15 	stw	r17,104(sp)
81106514:	dc001915 	stw	r16,100(sp)
81106518:	df001b04 	addi	fp,sp,108
8110651c:	2005883a 	mov	r2,r4
81106520:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Write Test =====\n");
81106524:	012044b4 	movhi	r4,33042
81106528:	2136dc04 	addi	r4,r4,-9360
8110652c:	110bb800 	call	8110bb80 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81106530:	00800044 	movi	r2,1
81106534:	e0bfed15 	stw	r2,-76(fp)
  switch (MemoryId) {
81106538:	e0bffd03 	ldbu	r2,-12(fp)
8110653c:	10c00060 	cmpeqi	r3,r2,1
81106540:	1800031e 	bne	r3,zero,81106550 <DDR2_MEMORY_WRITE_TEST+0x4c>
81106544:	108000a0 	cmpeqi	r2,r2,2
81106548:	1000081e 	bne	r2,zero,8110656c <DDR2_MEMORY_WRITE_TEST+0x68>
8110654c:	00000e06 	br	81106588 <DDR2_MEMORY_WRITE_TEST+0x84>
    case DDR2_M1_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81106550:	e0bffd03 	ldbu	r2,-12(fp)
81106554:	1009883a 	mov	r4,r2
81106558:	110647c0 	call	8110647c <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
8110655c:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
81106560:	00a00034 	movhi	r2,32768
81106564:	e0bfe615 	stw	r2,-104(fp)
    break;
81106568:	00000d06 	br	811065a0 <DDR2_MEMORY_WRITE_TEST+0x9c>
    case DDR2_M2_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
8110656c:	e0bffd03 	ldbu	r2,-12(fp)
81106570:	1009883a 	mov	r4,r2
81106574:	110647c0 	call	8110647c <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81106578:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
8110657c:	00a00034 	movhi	r2,32768
81106580:	e0bfe615 	stw	r2,-104(fp)
    break;
81106584:	00000606 	br	811065a0 <DDR2_MEMORY_WRITE_TEST+0x9c>
    default:
      bSuccess = FALSE;
81106588:	e03fed15 	stw	zero,-76(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
8110658c:	012044b4 	movhi	r4,33042
81106590:	2134ec04 	addi	r4,r4,-11344
81106594:	110bb800 	call	8110bb80 <puts>
      return bSuccess;
81106598:	e0bfed17 	ldw	r2,-76(fp)
8110659c:	0000db06 	br	8110690c <DDR2_MEMORY_WRITE_TEST+0x408>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
811065a0:	e0bfe617 	ldw	r2,-104(fp)
811065a4:	1004d53a 	srli	r2,r2,20
811065a8:	100b883a 	mov	r5,r2
811065ac:	012044b4 	movhi	r4,33042
811065b0:	2136e604 	addi	r4,r4,-9320
811065b4:	110ba640 	call	8110ba64 <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes;
  
  int nItemNum, nPos;
  const int my_data_size = sizeof(my_data);
811065b8:	00800104 	movi	r2,4
811065bc:	e0bfee15 	stw	r2,-72(fp)
  int nProgressIndex = 0;
811065c0:	e03fec15 	stw	zero,-80(fp)
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
811065c4:	e03fef15 	stw	zero,-68(fp)
  
  for(i = 0; i < 10; i++){
811065c8:	e03fe715 	stw	zero,-100(fp)
811065cc:	00001506 	br	81106624 <DDR2_MEMORY_WRITE_TEST+0x120>
    szProgress[i] = ByteLen/10*(i+1);
811065d0:	e0ffe617 	ldw	r3,-104(fp)
811065d4:	00b33374 	movhi	r2,52429
811065d8:	10b33344 	addi	r2,r2,-13107
811065dc:	1888383a 	mulxuu	r4,r3,r2
811065e0:	1885383a 	mul	r2,r3,r2
811065e4:	1021883a 	mov	r16,r2
811065e8:	2023883a 	mov	r17,r4
811065ec:	8804d0fa 	srli	r2,r17,3
811065f0:	e0ffe717 	ldw	r3,-100(fp)
811065f4:	18c00044 	addi	r3,r3,1
811065f8:	10c7383a 	mul	r3,r2,r3
811065fc:	e0bfe717 	ldw	r2,-100(fp)
81106600:	1085883a 	add	r2,r2,r2
81106604:	1085883a 	add	r2,r2,r2
81106608:	e13fe504 	addi	r4,fp,-108
8110660c:	2085883a 	add	r2,r4,r2
81106610:	10800e04 	addi	r2,r2,56
81106614:	10c00015 	stw	r3,0(r2)
  int nProgressIndex = 0;
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
  
  for(i = 0; i < 10; i++){
81106618:	e0bfe717 	ldw	r2,-100(fp)
8110661c:	10800044 	addi	r2,r2,1
81106620:	e0bfe715 	stw	r2,-100(fp)
81106624:	e0bfe717 	ldw	r2,-100(fp)
81106628:	10800290 	cmplti	r2,r2,10
8110662c:	103fe81e 	bne	r2,zero,811065d0 <__reset+0xfb0e65d0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81106630:	d0a04917 	ldw	r2,-32476(gp)
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
81106634:	e0bff015 	stw	r2,-64(fp)
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81106638:	00804004 	movi	r2,256
8110663c:	e0bfea15 	stw	r2,-88(fp)
  for(i = 0; i < nItemNum; i++){
81106640:	e03fe715 	stw	zero,-100(fp)
81106644:	00001e06 	br	811066c0 <DDR2_MEMORY_WRITE_TEST+0x1bc>
    if (i == 0) {
81106648:	e0bfe717 	ldw	r2,-100(fp)
8110664c:	1000091e 	bne	r2,zero,81106674 <DDR2_MEMORY_WRITE_TEST+0x170>
      szData[i] = InitValue;
81106650:	00a044b4 	movhi	r2,33042
81106654:	1081dd04 	addi	r2,r2,1908
81106658:	e0ffe717 	ldw	r3,-100(fp)
8110665c:	18c7883a 	add	r3,r3,r3
81106660:	18c7883a 	add	r3,r3,r3
81106664:	10c5883a 	add	r2,r2,r3
81106668:	e0fff017 	ldw	r3,-64(fp)
8110666c:	10c00015 	stw	r3,0(r2)
81106670:	00001006 	br	811066b4 <DDR2_MEMORY_WRITE_TEST+0x1b0>
    } else {
      szData[i] = szData[i-1] * 13;
81106674:	e0bfe717 	ldw	r2,-100(fp)
81106678:	10ffffc4 	addi	r3,r2,-1
8110667c:	00a044b4 	movhi	r2,33042
81106680:	1081dd04 	addi	r2,r2,1908
81106684:	18c7883a 	add	r3,r3,r3
81106688:	18c7883a 	add	r3,r3,r3
8110668c:	10c5883a 	add	r2,r2,r3
81106690:	10800017 	ldw	r2,0(r2)
81106694:	11000364 	muli	r4,r2,13
81106698:	00a044b4 	movhi	r2,33042
8110669c:	1081dd04 	addi	r2,r2,1908
811066a0:	e0ffe717 	ldw	r3,-100(fp)
811066a4:	18c7883a 	add	r3,r3,r3
811066a8:	18c7883a 	add	r3,r3,r3
811066ac:	10c5883a 	add	r2,r2,r3
811066b0:	11000015 	stw	r4,0(r2)
  for(i = 0; i < 10; i++){
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
  nItemNum = sizeof(szData)/sizeof(szData[0]);
  for(i = 0; i < nItemNum; i++){
811066b4:	e0bfe717 	ldw	r2,-100(fp)
811066b8:	10800044 	addi	r2,r2,1
811066bc:	e0bfe715 	stw	r2,-100(fp)
811066c0:	e0ffe717 	ldw	r3,-100(fp)
811066c4:	e0bfea17 	ldw	r2,-88(fp)
811066c8:	18bfdf16 	blt	r3,r2,81106648 <__reset+0xfb0e6648>
      szData[i] = InitValue;
    } else {
      szData[i] = szData[i-1] * 13;
    }
  }
  szData[nItemNum-1] = 0xAAAAAAAA;
811066cc:	e0bfea17 	ldw	r2,-88(fp)
811066d0:	10ffffc4 	addi	r3,r2,-1
811066d4:	00a044b4 	movhi	r2,33042
811066d8:	1081dd04 	addi	r2,r2,1908
811066dc:	18c7883a 	add	r3,r3,r3
811066e0:	18c7883a 	add	r3,r3,r3
811066e4:	10c7883a 	add	r3,r2,r3
811066e8:	00aaaaf4 	movhi	r2,43691
811066ec:	10aaaa84 	addi	r2,r2,-21846
811066f0:	18800015 	stw	r2,0(r3)
  szData[nItemNum-2] = 0x55555555;
811066f4:	e0bfea17 	ldw	r2,-88(fp)
811066f8:	10ffff84 	addi	r3,r2,-2
811066fc:	00a044b4 	movhi	r2,33042
81106700:	1081dd04 	addi	r2,r2,1908
81106704:	18c7883a 	add	r3,r3,r3
81106708:	18c7883a 	add	r3,r3,r3
8110670c:	10c7883a 	add	r3,r2,r3
81106710:	00955574 	movhi	r2,21845
81106714:	10955544 	addi	r2,r2,21845
81106718:	18800015 	stw	r2,0(r3)
  szData[nItemNum-3] = 0x00000000;
8110671c:	e0bfea17 	ldw	r2,-88(fp)
81106720:	10ffff44 	addi	r3,r2,-3
81106724:	00a044b4 	movhi	r2,33042
81106728:	1081dd04 	addi	r2,r2,1908
8110672c:	18c7883a 	add	r3,r3,r3
81106730:	18c7883a 	add	r3,r3,r3
81106734:	10c5883a 	add	r2,r2,r3
81106738:	10000015 	stw	zero,0(r2)
  szData[nItemNum-4] = 0xFFFFFFFF;
8110673c:	e0bfea17 	ldw	r2,-88(fp)
81106740:	10ffff04 	addi	r3,r2,-4
81106744:	00a044b4 	movhi	r2,33042
81106748:	1081dd04 	addi	r2,r2,1908
8110674c:	18c7883a 	add	r3,r3,r3
81106750:	18c7883a 	add	r3,r3,r3
81106754:	10c5883a 	add	r2,r2,r3
81106758:	00ffffc4 	movi	r3,-1
8110675c:	10c00015 	stw	r3,0(r2)

  printf("Writing data...\n");
81106760:	012044b4 	movhi	r4,33042
81106764:	2136ec04 	addi	r4,r4,-9296
81106768:	110bb800 	call	8110bb80 <puts>
8110676c:	d0a04917 	ldw	r2,-32476(gp)
  TimeStart = alt_nticks();
81106770:	e0bff115 	stw	r2,-60(fp)
  pDes = (my_data *)Ddr2Base;
81106774:	e0bfe517 	ldw	r2,-108(fp)
81106778:	e0bfe915 	stw	r2,-92(fp)
  nAccessLen = sizeof(szData);
8110677c:	00810004 	movi	r2,1024
81106780:	e0bfe815 	stw	r2,-96(fp)
  nItemNum = nAccessLen / my_data_size;
81106784:	e0ffe817 	ldw	r3,-96(fp)
81106788:	e0bfee17 	ldw	r2,-72(fp)
8110678c:	1885283a 	div	r2,r3,r2
81106790:	e0bfea15 	stw	r2,-88(fp)
  nPos = 0;
81106794:	e03feb15 	stw	zero,-84(fp)
  while(nPos < ByteLen){
81106798:	00003306 	br	81106868 <DDR2_MEMORY_WRITE_TEST+0x364>
    nRemainedLen = ByteLen - nPos;
8110679c:	e0bfeb17 	ldw	r2,-84(fp)
811067a0:	e0ffe617 	ldw	r3,-104(fp)
811067a4:	1885c83a 	sub	r2,r3,r2
811067a8:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
811067ac:	e0bfe817 	ldw	r2,-96(fp)
811067b0:	e0fff217 	ldw	r3,-56(fp)
811067b4:	1880060e 	bge	r3,r2,811067d0 <DDR2_MEMORY_WRITE_TEST+0x2cc>
      nAccessLen = nRemainedLen;
811067b8:	e0bff217 	ldw	r2,-56(fp)
811067bc:	e0bfe815 	stw	r2,-96(fp)
      nItemNum = nAccessLen / my_data_size;
811067c0:	e0ffe817 	ldw	r3,-96(fp)
811067c4:	e0bfee17 	ldw	r2,-72(fp)
811067c8:	1885283a 	div	r2,r3,r2
811067cc:	e0bfea15 	stw	r2,-88(fp)
    }
    memcpy(pDes, szData, nAccessLen);
811067d0:	e0bfe817 	ldw	r2,-96(fp)
811067d4:	100d883a 	mov	r6,r2
811067d8:	016044b4 	movhi	r5,33042
811067dc:	2941dd04 	addi	r5,r5,1908
811067e0:	e13fe917 	ldw	r4,-92(fp)
811067e4:	110b8ec0 	call	8110b8ec <memcpy>
    pDes += nItemNum;
811067e8:	e0bfea17 	ldw	r2,-88(fp)
811067ec:	1085883a 	add	r2,r2,r2
811067f0:	1085883a 	add	r2,r2,r2
811067f4:	1007883a 	mov	r3,r2
811067f8:	e0bfe917 	ldw	r2,-92(fp)
811067fc:	10c5883a 	add	r2,r2,r3
81106800:	e0bfe915 	stw	r2,-92(fp)
    nPos += nAccessLen;
81106804:	e0ffeb17 	ldw	r3,-84(fp)
81106808:	e0bfe817 	ldw	r2,-96(fp)
8110680c:	1885883a 	add	r2,r3,r2
81106810:	e0bfeb15 	stw	r2,-84(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
81106814:	e0bfec17 	ldw	r2,-80(fp)
81106818:	10800288 	cmpgei	r2,r2,10
8110681c:	1000121e 	bne	r2,zero,81106868 <DDR2_MEMORY_WRITE_TEST+0x364>
81106820:	e0bfec17 	ldw	r2,-80(fp)
81106824:	1085883a 	add	r2,r2,r2
81106828:	1085883a 	add	r2,r2,r2
8110682c:	e0ffe504 	addi	r3,fp,-108
81106830:	1885883a 	add	r2,r3,r2
81106834:	10800e04 	addi	r2,r2,56
81106838:	10800017 	ldw	r2,0(r2)
8110683c:	e0ffeb17 	ldw	r3,-84(fp)
81106840:	18800936 	bltu	r3,r2,81106868 <DDR2_MEMORY_WRITE_TEST+0x364>
      nProgressIndex++;
81106844:	e0bfec17 	ldw	r2,-80(fp)
81106848:	10800044 	addi	r2,r2,1
8110684c:	e0bfec15 	stw	r2,-80(fp)
      printf("%02d%% ", nProgressIndex*10);
81106850:	e0bfec17 	ldw	r2,-80(fp)
81106854:	108002a4 	muli	r2,r2,10
81106858:	100b883a 	mov	r5,r2
8110685c:	012044b4 	movhi	r4,33042
81106860:	2136f004 	addi	r4,r4,-9280
81106864:	110ba640 	call	8110ba64 <printf>
  TimeStart = alt_nticks();
  pDes = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(nPos < ByteLen){
81106868:	e0ffeb17 	ldw	r3,-84(fp)
8110686c:	e0bfe617 	ldw	r2,-104(fp)
81106870:	18bfca36 	bltu	r3,r2,8110679c <__reset+0xfb0e679c>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  alt_dcache_flush_all();
81106874:	11180c40 	call	811180c4 <alt_dcache_flush_all>
  printf("\n");
81106878:	01000284 	movi	r4,10
8110687c:	110baa80 	call	8110baa8 <putchar>
81106880:	d0e04917 	ldw	r3,-32476(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81106884:	e0bff117 	ldw	r2,-60(fp)
81106888:	1885c83a 	sub	r2,r3,r2
8110688c:	e0bfef15 	stw	r2,-68(fp)
  if (bSuccess){
81106890:	e0bfed17 	ldw	r2,-76(fp)
81106894:	10001726 	beq	r2,zero,811068f4 <DDR2_MEMORY_WRITE_TEST+0x3f0>
    printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81106898:	e13fef17 	ldw	r4,-68(fp)
8110689c:	110abac0 	call	8110abac <__floatsisf>
811068a0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811068a4:	d0a04817 	ldw	r2,-32480(gp)
811068a8:	1009883a 	mov	r4,r2
811068ac:	110acd00 	call	8110acd0 <__floatunsisf>
811068b0:	1007883a 	mov	r3,r2
811068b4:	180b883a 	mov	r5,r3
811068b8:	8009883a 	mov	r4,r16
811068bc:	110a3700 	call	8110a370 <__divsf3>
811068c0:	1007883a 	mov	r3,r2
811068c4:	1805883a 	mov	r2,r3
811068c8:	1009883a 	mov	r4,r2
811068cc:	110b4d80 	call	8110b4d8 <__extendsfdf2>
811068d0:	1009883a 	mov	r4,r2
811068d4:	180b883a 	mov	r5,r3
811068d8:	200d883a 	mov	r6,r4
811068dc:	280f883a 	mov	r7,r5
811068e0:	e17fe617 	ldw	r5,-104(fp)
811068e4:	012044b4 	movhi	r4,33042
811068e8:	2136f204 	addi	r4,r4,-9272
811068ec:	110ba640 	call	8110ba64 <printf>
811068f0:	00000306 	br	81106900 <DDR2_MEMORY_WRITE_TEST+0x3fc>
  } else {
    printf("DDR2 write test fail\n");
811068f4:	012044b4 	movhi	r4,33042
811068f8:	2136fe04 	addi	r4,r4,-9224
811068fc:	110bb800 	call	8110bb80 <puts>
  }
  printf("\n");
81106900:	01000284 	movi	r4,10
81106904:	110baa80 	call	8110baa8 <putchar>

  return bSuccess;
81106908:	e0bfed17 	ldw	r2,-76(fp)
}
8110690c:	e6fffe04 	addi	sp,fp,-8
81106910:	dfc00317 	ldw	ra,12(sp)
81106914:	df000217 	ldw	fp,8(sp)
81106918:	dc400117 	ldw	r17,4(sp)
8110691c:	dc000017 	ldw	r16,0(sp)
81106920:	dec00404 	addi	sp,sp,16
81106924:	f800283a 	ret

81106928 <DDR2_MEMORY_READ_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_READ_TEST(alt_u8 MemoryId){
81106928:	deffe304 	addi	sp,sp,-116
8110692c:	dfc01c15 	stw	ra,112(sp)
81106930:	df001b15 	stw	fp,108(sp)
81106934:	dc401a15 	stw	r17,104(sp)
81106938:	dc001915 	stw	r16,100(sp)
8110693c:	df001b04 	addi	fp,sp,108
81106940:	2005883a 	mov	r2,r4
81106944:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Read Test =====\n");
81106948:	012044b4 	movhi	r4,33042
8110694c:	21370404 	addi	r4,r4,-9200
81106950:	110bb800 	call	8110bb80 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81106954:	00800044 	movi	r2,1
81106958:	e0bfe515 	stw	r2,-108(fp)
  switch (MemoryId) {
8110695c:	e0bffd03 	ldbu	r2,-12(fp)
81106960:	10c00060 	cmpeqi	r3,r2,1
81106964:	1800031e 	bne	r3,zero,81106974 <DDR2_MEMORY_READ_TEST+0x4c>
81106968:	108000a0 	cmpeqi	r2,r2,2
8110696c:	1000081e 	bne	r2,zero,81106990 <DDR2_MEMORY_READ_TEST+0x68>
81106970:	00000e06 	br	811069ac <DDR2_MEMORY_READ_TEST+0x84>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81106974:	e0bffd03 	ldbu	r2,-12(fp)
81106978:	1009883a 	mov	r4,r2
8110697c:	110647c0 	call	8110647c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81106980:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81106984:	00a00034 	movhi	r2,32768
81106988:	e0bfe715 	stw	r2,-100(fp)
    break;
8110698c:	00000d06 	br	811069c4 <DDR2_MEMORY_READ_TEST+0x9c>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81106990:	e0bffd03 	ldbu	r2,-12(fp)
81106994:	1009883a 	mov	r4,r2
81106998:	110647c0 	call	8110647c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
8110699c:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
811069a0:	00a00034 	movhi	r2,32768
811069a4:	e0bfe715 	stw	r2,-100(fp)
    break;
811069a8:	00000606 	br	811069c4 <DDR2_MEMORY_READ_TEST+0x9c>
    default:
      bSuccess = FALSE;
811069ac:	e03fe515 	stw	zero,-108(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
811069b0:	012044b4 	movhi	r4,33042
811069b4:	2134ec04 	addi	r4,r4,-11344
811069b8:	110bb800 	call	8110bb80 <puts>
      return bSuccess;
811069bc:	e0bfe517 	ldw	r2,-108(fp)
811069c0:	0000b806 	br	81106ca4 <DDR2_MEMORY_READ_TEST+0x37c>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
811069c4:	e0bfe717 	ldw	r2,-100(fp)
811069c8:	1004d53a 	srli	r2,r2,20
811069cc:	100b883a 	mov	r5,r2
811069d0:	012044b4 	movhi	r4,33042
811069d4:	2136e604 	addi	r4,r4,-9320
811069d8:	110ba640 	call	8110ba64 <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes, *pSrc;
  int nItemNum, nPos;
  nItemNum = sizeof(szData)/sizeof(szData[0]);
811069dc:	00804004 	movi	r2,256
811069e0:	e0bfec15 	stw	r2,-80(fp)
  const int my_data_size = sizeof(my_data);
811069e4:	00800104 	movi	r2,4
811069e8:	e0bfef15 	stw	r2,-68(fp)
  nAccessLen = nItemNum * my_data_size;
811069ec:	e0ffec17 	ldw	r3,-80(fp)
811069f0:	e0bfef17 	ldw	r2,-68(fp)
811069f4:	1885383a 	mul	r2,r3,r2
811069f8:	e0bfe915 	stw	r2,-92(fp)
  int nProgressIndex = 0;
811069fc:	e03fee15 	stw	zero,-72(fp)
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81106a00:	e03ff015 	stw	zero,-64(fp)

  for(i=0;i<10;i++){
81106a04:	e03fe815 	stw	zero,-96(fp)
81106a08:	00001506 	br	81106a60 <DDR2_MEMORY_READ_TEST+0x138>
    szProgress[i] = ByteLen/10*(i+1);
81106a0c:	e0ffe717 	ldw	r3,-100(fp)
81106a10:	00b33374 	movhi	r2,52429
81106a14:	10b33344 	addi	r2,r2,-13107
81106a18:	1888383a 	mulxuu	r4,r3,r2
81106a1c:	1885383a 	mul	r2,r3,r2
81106a20:	1021883a 	mov	r16,r2
81106a24:	2023883a 	mov	r17,r4
81106a28:	8804d0fa 	srli	r2,r17,3
81106a2c:	e0ffe817 	ldw	r3,-96(fp)
81106a30:	18c00044 	addi	r3,r3,1
81106a34:	10c7383a 	mul	r3,r2,r3
81106a38:	e0bfe817 	ldw	r2,-96(fp)
81106a3c:	1085883a 	add	r2,r2,r2
81106a40:	1085883a 	add	r2,r2,r2
81106a44:	e13fe504 	addi	r4,fp,-108
81106a48:	2085883a 	add	r2,r4,r2
81106a4c:	10800e04 	addi	r2,r2,56
81106a50:	10c00015 	stw	r3,0(r2)
  nAccessLen = nItemNum * my_data_size;
  int nProgressIndex = 0;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;

  for(i=0;i<10;i++){
81106a54:	e0bfe817 	ldw	r2,-96(fp)
81106a58:	10800044 	addi	r2,r2,1
81106a5c:	e0bfe815 	stw	r2,-96(fp)
81106a60:	e0bfe817 	ldw	r2,-96(fp)
81106a64:	10800290 	cmplti	r2,r2,10
81106a68:	103fe81e 	bne	r2,zero,81106a0c <__reset+0xfb0e6a0c>
    szProgress[i] = ByteLen/10*(i+1);
  }

  nProgressIndex = 0;
81106a6c:	e03fee15 	stw	zero,-72(fp)
  printf("Reading/Verifying Data...\n");
81106a70:	012044b4 	movhi	r4,33042
81106a74:	21370e04 	addi	r4,r4,-9160
81106a78:	110bb800 	call	8110bb80 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81106a7c:	d0a04917 	ldw	r2,-32476(gp)
  TimeStart = alt_nticks();
81106a80:	e0bff115 	stw	r2,-60(fp)

  pSrc = (my_data *)Ddr2Base;
81106a84:	e0bfe617 	ldw	r2,-104(fp)
81106a88:	e0bfeb15 	stw	r2,-84(fp)
  nAccessLen = sizeof(szData);
81106a8c:	00810004 	movi	r2,1024
81106a90:	e0bfe915 	stw	r2,-92(fp)
  nItemNum = nAccessLen / my_data_size;
81106a94:	e0ffe917 	ldw	r3,-92(fp)
81106a98:	e0bfef17 	ldw	r2,-68(fp)
81106a9c:	1885283a 	div	r2,r3,r2
81106aa0:	e0bfec15 	stw	r2,-80(fp)
  nPos = 0;
81106aa4:	e03fed15 	stw	zero,-76(fp)
  while(bSuccess && nPos < ByteLen){
81106aa8:	00005406 	br	81106bfc <DDR2_MEMORY_READ_TEST+0x2d4>
    nRemainedLen = ByteLen - nPos;
81106aac:	e0bfed17 	ldw	r2,-76(fp)
81106ab0:	e0ffe717 	ldw	r3,-100(fp)
81106ab4:	1885c83a 	sub	r2,r3,r2
81106ab8:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
81106abc:	e0bfe917 	ldw	r2,-92(fp)
81106ac0:	e0fff217 	ldw	r3,-56(fp)
81106ac4:	1880060e 	bge	r3,r2,81106ae0 <DDR2_MEMORY_READ_TEST+0x1b8>
      nAccessLen = nRemainedLen;
81106ac8:	e0bff217 	ldw	r2,-56(fp)
81106acc:	e0bfe915 	stw	r2,-92(fp)
      nItemNum = nAccessLen / my_data_size;
81106ad0:	e0ffe917 	ldw	r3,-92(fp)
81106ad4:	e0bfef17 	ldw	r2,-68(fp)
81106ad8:	1885283a 	div	r2,r3,r2
81106adc:	e0bfec15 	stw	r2,-80(fp)
    }
    pDes = szData;
81106ae0:	00a044b4 	movhi	r2,33042
81106ae4:	1081dd04 	addi	r2,r2,1908
81106ae8:	e0bfea15 	stw	r2,-88(fp)
    for(i=0 ; i < nItemNum && bSuccess; i++){
81106aec:	e03fe815 	stw	zero,-96(fp)
81106af0:	00002406 	br	81106b84 <DDR2_MEMORY_READ_TEST+0x25c>
      if (*pSrc++ != *pDes++){
81106af4:	e0bfeb17 	ldw	r2,-84(fp)
81106af8:	10c00104 	addi	r3,r2,4
81106afc:	e0ffeb15 	stw	r3,-84(fp)
81106b00:	10c00017 	ldw	r3,0(r2)
81106b04:	e0bfea17 	ldw	r2,-88(fp)
81106b08:	11000104 	addi	r4,r2,4
81106b0c:	e13fea15 	stw	r4,-88(fp)
81106b10:	10800017 	ldw	r2,0(r2)
81106b14:	18801826 	beq	r3,r2,81106b78 <DDR2_MEMORY_READ_TEST+0x250>
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
81106b18:	e0bfeb17 	ldw	r2,-84(fp)
81106b1c:	10bfff04 	addi	r2,r2,-4
81106b20:	10800017 	ldw	r2,0(r2)
81106b24:	1009883a 	mov	r4,r2
81106b28:	00a044b4 	movhi	r2,33042
81106b2c:	1081dd04 	addi	r2,r2,1908
81106b30:	e0ffe817 	ldw	r3,-96(fp)
81106b34:	18c7883a 	add	r3,r3,r3
81106b38:	18c7883a 	add	r3,r3,r3
81106b3c:	10c5883a 	add	r2,r2,r3
81106b40:	10800017 	ldw	r2,0(r2)
81106b44:	100b883a 	mov	r5,r2
81106b48:	e0ffed17 	ldw	r3,-76(fp)
81106b4c:	e0bfef17 	ldw	r2,-68(fp)
81106b50:	1887283a 	div	r3,r3,r2
81106b54:	e0bfe817 	ldw	r2,-96(fp)
81106b58:	1885883a 	add	r2,r3,r2
81106b5c:	100f883a 	mov	r7,r2
81106b60:	280d883a 	mov	r6,r5
81106b64:	200b883a 	mov	r5,r4
81106b68:	012044b4 	movhi	r4,33042
81106b6c:	21371504 	addi	r4,r4,-9132
81106b70:	110ba640 	call	8110ba64 <printf>
        bSuccess = FALSE;
81106b74:	e03fe515 	stw	zero,-108(fp)
    if (nAccessLen > nRemainedLen){
      nAccessLen = nRemainedLen;
      nItemNum = nAccessLen / my_data_size;
    }
    pDes = szData;
    for(i=0 ; i < nItemNum && bSuccess; i++){
81106b78:	e0bfe817 	ldw	r2,-96(fp)
81106b7c:	10800044 	addi	r2,r2,1
81106b80:	e0bfe815 	stw	r2,-96(fp)
81106b84:	e0ffe817 	ldw	r3,-96(fp)
81106b88:	e0bfec17 	ldw	r2,-80(fp)
81106b8c:	1880020e 	bge	r3,r2,81106b98 <DDR2_MEMORY_READ_TEST+0x270>
81106b90:	e0bfe517 	ldw	r2,-108(fp)
81106b94:	103fd71e 	bne	r2,zero,81106af4 <__reset+0xfb0e6af4>
      if (*pSrc++ != *pDes++){
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
        bSuccess = FALSE;
      }
    }
    nPos += nAccessLen;
81106b98:	e0ffed17 	ldw	r3,-76(fp)
81106b9c:	e0bfe917 	ldw	r2,-92(fp)
81106ba0:	1885883a 	add	r2,r3,r2
81106ba4:	e0bfed15 	stw	r2,-76(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
81106ba8:	e0bfee17 	ldw	r2,-72(fp)
81106bac:	10800288 	cmpgei	r2,r2,10
81106bb0:	1000121e 	bne	r2,zero,81106bfc <DDR2_MEMORY_READ_TEST+0x2d4>
81106bb4:	e0bfee17 	ldw	r2,-72(fp)
81106bb8:	1085883a 	add	r2,r2,r2
81106bbc:	1085883a 	add	r2,r2,r2
81106bc0:	e0ffe504 	addi	r3,fp,-108
81106bc4:	1885883a 	add	r2,r3,r2
81106bc8:	10800e04 	addi	r2,r2,56
81106bcc:	10800017 	ldw	r2,0(r2)
81106bd0:	e0ffed17 	ldw	r3,-76(fp)
81106bd4:	18800936 	bltu	r3,r2,81106bfc <DDR2_MEMORY_READ_TEST+0x2d4>
      nProgressIndex++;
81106bd8:	e0bfee17 	ldw	r2,-72(fp)
81106bdc:	10800044 	addi	r2,r2,1
81106be0:	e0bfee15 	stw	r2,-72(fp)
      printf("%02d%% ", nProgressIndex*10);
81106be4:	e0bfee17 	ldw	r2,-72(fp)
81106be8:	108002a4 	muli	r2,r2,10
81106bec:	100b883a 	mov	r5,r2
81106bf0:	012044b4 	movhi	r4,33042
81106bf4:	2136f004 	addi	r4,r4,-9280
81106bf8:	110ba640 	call	8110ba64 <printf>

  pSrc = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(bSuccess && nPos < ByteLen){
81106bfc:	e0bfe517 	ldw	r2,-108(fp)
81106c00:	10000326 	beq	r2,zero,81106c10 <DDR2_MEMORY_READ_TEST+0x2e8>
81106c04:	e0ffed17 	ldw	r3,-76(fp)
81106c08:	e0bfe717 	ldw	r2,-100(fp)
81106c0c:	18bfa736 	bltu	r3,r2,81106aac <__reset+0xfb0e6aac>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  printf("\n");
81106c10:	01000284 	movi	r4,10
81106c14:	110baa80 	call	8110baa8 <putchar>
81106c18:	d0e04917 	ldw	r3,-32476(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81106c1c:	e0bff117 	ldw	r2,-60(fp)
81106c20:	1885c83a 	sub	r2,r3,r2
81106c24:	e0bff015 	stw	r2,-64(fp)
  if (bSuccess){
81106c28:	e0bfe517 	ldw	r2,-108(fp)
81106c2c:	10001726 	beq	r2,zero,81106c8c <DDR2_MEMORY_READ_TEST+0x364>
    printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81106c30:	e13ff017 	ldw	r4,-64(fp)
81106c34:	110abac0 	call	8110abac <__floatsisf>
81106c38:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81106c3c:	d0a04817 	ldw	r2,-32480(gp)
81106c40:	1009883a 	mov	r4,r2
81106c44:	110acd00 	call	8110acd0 <__floatunsisf>
81106c48:	1007883a 	mov	r3,r2
81106c4c:	180b883a 	mov	r5,r3
81106c50:	8009883a 	mov	r4,r16
81106c54:	110a3700 	call	8110a370 <__divsf3>
81106c58:	1007883a 	mov	r3,r2
81106c5c:	1805883a 	mov	r2,r3
81106c60:	1009883a 	mov	r4,r2
81106c64:	110b4d80 	call	8110b4d8 <__extendsfdf2>
81106c68:	1009883a 	mov	r4,r2
81106c6c:	180b883a 	mov	r5,r3
81106c70:	200d883a 	mov	r6,r4
81106c74:	280f883a 	mov	r7,r5
81106c78:	e17fe717 	ldw	r5,-100(fp)
81106c7c:	012044b4 	movhi	r4,33042
81106c80:	21372304 	addi	r4,r4,-9076
81106c84:	110ba640 	call	8110ba64 <printf>
81106c88:	00000306 	br	81106c98 <DDR2_MEMORY_READ_TEST+0x370>
  } else {
    printf("DDR2 read test fail\n");
81106c8c:	012044b4 	movhi	r4,33042
81106c90:	21372f04 	addi	r4,r4,-9028
81106c94:	110bb800 	call	8110bb80 <puts>
  }
  printf("\n");
81106c98:	01000284 	movi	r4,10
81106c9c:	110baa80 	call	8110baa8 <putchar>

  return bSuccess;
81106ca0:	e0bfe517 	ldw	r2,-108(fp)
}
81106ca4:	e6fffe04 	addi	sp,fp,-8
81106ca8:	dfc00317 	ldw	ra,12(sp)
81106cac:	df000217 	ldw	fp,8(sp)
81106cb0:	dc400117 	ldw	r17,4(sp)
81106cb4:	dc000017 	ldw	r16,0(sp)
81106cb8:	dec00404 	addi	sp,sp,16
81106cbc:	f800283a 	ret

81106cc0 <DDR2_MEMORY_RANDOM_WRITE_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_WRITE_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
81106cc0:	deffed04 	addi	sp,sp,-76
81106cc4:	dfc01215 	stw	ra,72(sp)
81106cc8:	df001115 	stw	fp,68(sp)
81106ccc:	dcc01015 	stw	r19,64(sp)
81106cd0:	dc800f15 	stw	r18,60(sp)
81106cd4:	dc400e15 	stw	r17,56(sp)
81106cd8:	dc000d15 	stw	r16,52(sp)
81106cdc:	df001104 	addi	fp,sp,68
81106ce0:	2005883a 	mov	r2,r4
81106ce4:	e17ffa15 	stw	r5,-24(fp)
81106ce8:	e1bffb15 	stw	r6,-20(fp)
81106cec:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Write Test =====\n");
81106cf0:	012044b4 	movhi	r4,33042
81106cf4:	21373404 	addi	r4,r4,-9008
81106cf8:	110bb800 	call	8110bb80 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81106cfc:	00800044 	movi	r2,1
81106d00:	e0bff415 	stw	r2,-48(fp)
  switch (MemoryId) {
81106d04:	e0bff903 	ldbu	r2,-28(fp)
81106d08:	10c00060 	cmpeqi	r3,r2,1
81106d0c:	1800031e 	bne	r3,zero,81106d1c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x5c>
81106d10:	108000a0 	cmpeqi	r2,r2,2
81106d14:	1000081e 	bne	r2,zero,81106d38 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x78>
81106d18:	00000e06 	br	81106d54 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x94>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81106d1c:	e0bff903 	ldbu	r2,-28(fp)
81106d20:	1009883a 	mov	r4,r2
81106d24:	110647c0 	call	8110647c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81106d28:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81106d2c:	00a00034 	movhi	r2,32768
81106d30:	e0bff015 	stw	r2,-64(fp)
    break;
81106d34:	00000d06 	br	81106d6c <DDR2_MEMORY_RANDOM_WRITE_TEST+0xac>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81106d38:	e0bff903 	ldbu	r2,-28(fp)
81106d3c:	1009883a 	mov	r4,r2
81106d40:	110647c0 	call	8110647c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81106d44:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81106d48:	00a00034 	movhi	r2,32768
81106d4c:	e0bff015 	stw	r2,-64(fp)
    break;
81106d50:	00000606 	br	81106d6c <DDR2_MEMORY_RANDOM_WRITE_TEST+0xac>
    default:
      bSuccess = FALSE;
81106d54:	e03ff415 	stw	zero,-48(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81106d58:	012044b4 	movhi	r4,33042
81106d5c:	2134ec04 	addi	r4,r4,-11344
81106d60:	110bb800 	call	8110bb80 <puts>
      return bSuccess;
81106d64:	e0bff417 	ldw	r2,-48(fp)
81106d68:	00008406 	br	81106f7c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2bc>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81106d6c:	e0bff017 	ldw	r2,-64(fp)
81106d70:	1004d53a 	srli	r2,r2,20
81106d74:	100b883a 	mov	r5,r2
81106d78:	012044b4 	movhi	r4,33042
81106d7c:	2136e604 	addi	r4,r4,-9320
81106d80:	110ba640 	call	8110ba64 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81106d84:	d0a04917 	ldw	r2,-32476(gp)
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  InitialState = alt_nticks();
81106d88:	d0a03c15 	stw	r2,-32528(gp)
  CurrentState = InitialState;
81106d8c:	d0a03c17 	ldw	r2,-32528(gp)
81106d90:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
81106d94:	e0ffef17 	ldw	r3,-68(fp)
81106d98:	e0bff017 	ldw	r2,-64(fp)
81106d9c:	1885883a 	add	r2,r3,r2
81106da0:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
81106da4:	e0fff017 	ldw	r3,-64(fp)
81106da8:	00b33374 	movhi	r2,52429
81106dac:	10b33344 	addi	r2,r2,-13107
81106db0:	1888383a 	mulxuu	r4,r3,r2
81106db4:	1885383a 	mul	r2,r3,r2
81106db8:	1025883a 	mov	r18,r2
81106dbc:	2027883a 	mov	r19,r4
81106dc0:	9806d13a 	srli	r3,r19,4
81106dc4:	e0bfef17 	ldw	r2,-68(fp)
81106dc8:	1885883a 	add	r2,r3,r2
81106dcc:	e0bff215 	stw	r2,-56(fp)
  Percentage = 5;
81106dd0:	00800144 	movi	r2,5
81106dd4:	e0bff305 	stb	r2,-52(fp)
  printf("Writing to memory...\n");
81106dd8:	012044b4 	movhi	r4,33042
81106ddc:	21374004 	addi	r4,r4,-8960
81106de0:	110bb800 	call	8110bb80 <puts>
  if (bVerbose == DDR2_VERBOSE) {
81106de4:	e0bffa17 	ldw	r2,-24(fp)
81106de8:	10800058 	cmpnei	r2,r2,1
81106dec:	1000031e 	bne	r2,zero,81106dfc <DDR2_MEMORY_RANDOM_WRITE_TEST+0x13c>
    printf("00%%..");
81106df0:	012044b4 	movhi	r4,33042
81106df4:	21374604 	addi	r4,r4,-8936
81106df8:	110ba640 	call	8110ba64 <printf>
  }
  int TimeStart, TimeElapsed = 0;
81106dfc:	e03ff615 	stw	zero,-40(fp)
81106e00:	d0a04917 	ldw	r2,-32476(gp)

  TimeStart = alt_nticks();
81106e04:	e0bff715 	stw	r2,-36(fp)
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
81106e08:	e0bfef17 	ldw	r2,-68(fp)
81106e0c:	e0bff115 	stw	r2,-60(fp)
81106e10:	00002506 	br	81106ea8 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1e8>
    *pDestination = xorshift32(&CurrentState);
81106e14:	e0bff804 	addi	r2,fp,-32
81106e18:	1009883a 	mov	r4,r2
81106e1c:	11072700 	call	81107270 <xorshift32>
81106e20:	1007883a 	mov	r3,r2
81106e24:	e0bff117 	ldw	r2,-60(fp)
81106e28:	10c00015 	stw	r3,0(r2)
    if ((bVerbose == DDR2_VERBOSE) & ((alt_u32)pDestination > NextMilestone)){
81106e2c:	e0bffa17 	ldw	r2,-24(fp)
81106e30:	10800060 	cmpeqi	r2,r2,1
81106e34:	1009883a 	mov	r4,r2
81106e38:	e0bff117 	ldw	r2,-60(fp)
81106e3c:	e0fff217 	ldw	r3,-56(fp)
81106e40:	1885803a 	cmpltu	r2,r3,r2
81106e44:	2084703a 	and	r2,r4,r2
81106e48:	10803fcc 	andi	r2,r2,255
81106e4c:	10001326 	beq	r2,zero,81106e9c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1dc>
      printf("..%02d%%..",Percentage);
81106e50:	e0bff303 	ldbu	r2,-52(fp)
81106e54:	100b883a 	mov	r5,r2
81106e58:	012044b4 	movhi	r4,33042
81106e5c:	21374804 	addi	r4,r4,-8928
81106e60:	110ba640 	call	8110ba64 <printf>
	  NextMilestone += ByteLen/20;
81106e64:	e0fff017 	ldw	r3,-64(fp)
81106e68:	00b33374 	movhi	r2,52429
81106e6c:	10b33344 	addi	r2,r2,-13107
81106e70:	1888383a 	mulxuu	r4,r3,r2
81106e74:	1885383a 	mul	r2,r3,r2
81106e78:	1021883a 	mov	r16,r2
81106e7c:	2023883a 	mov	r17,r4
81106e80:	8804d13a 	srli	r2,r17,4
81106e84:	e0fff217 	ldw	r3,-56(fp)
81106e88:	1885883a 	add	r2,r3,r2
81106e8c:	e0bff215 	stw	r2,-56(fp)
	  Percentage += 5;
81106e90:	e0bff303 	ldbu	r2,-52(fp)
81106e94:	10800144 	addi	r2,r2,5
81106e98:	e0bff305 	stb	r2,-52(fp)
    printf("00%%..");
  }
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
81106e9c:	e0bff117 	ldw	r2,-60(fp)
81106ea0:	10800104 	addi	r2,r2,4
81106ea4:	e0bff115 	stw	r2,-60(fp)
81106ea8:	e0fff117 	ldw	r3,-60(fp)
81106eac:	e0bff517 	ldw	r2,-44(fp)
81106eb0:	18bfd836 	bltu	r3,r2,81106e14 <__reset+0xfb0e6e14>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  alt_dcache_flush_all();
81106eb4:	11180c40 	call	811180c4 <alt_dcache_flush_all>
  if (bVerbose == DDR2_VERBOSE) {
81106eb8:	e0bffa17 	ldw	r2,-24(fp)
81106ebc:	10800058 	cmpnei	r2,r2,1
81106ec0:	1000031e 	bne	r2,zero,81106ed0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x210>
    printf("..100%%\n");
81106ec4:	012044b4 	movhi	r4,33042
81106ec8:	21374b04 	addi	r4,r4,-8916
81106ecc:	110ba640 	call	8110ba64 <printf>
  }

  if (bSuccess){
81106ed0:	e0bff417 	ldw	r2,-48(fp)
81106ed4:	10002326 	beq	r2,zero,81106f64 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2a4>
    if (bTime == TRUE){
81106ed8:	e0bffb17 	ldw	r2,-20(fp)
81106edc:	10800058 	cmpnei	r2,r2,1
81106ee0:	10001b1e 	bne	r2,zero,81106f50 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x290>
81106ee4:	d0e04917 	ldw	r3,-32476(gp)
      TimeElapsed = alt_nticks() - TimeStart;
81106ee8:	e0bff717 	ldw	r2,-36(fp)
81106eec:	1885c83a 	sub	r2,r3,r2
81106ef0:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81106ef4:	e13ff617 	ldw	r4,-40(fp)
81106ef8:	110abac0 	call	8110abac <__floatsisf>
81106efc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81106f00:	d0a04817 	ldw	r2,-32480(gp)
81106f04:	1009883a 	mov	r4,r2
81106f08:	110acd00 	call	8110acd0 <__floatunsisf>
81106f0c:	1007883a 	mov	r3,r2
81106f10:	180b883a 	mov	r5,r3
81106f14:	8009883a 	mov	r4,r16
81106f18:	110a3700 	call	8110a370 <__divsf3>
81106f1c:	1007883a 	mov	r3,r2
81106f20:	1805883a 	mov	r2,r3
81106f24:	1009883a 	mov	r4,r2
81106f28:	110b4d80 	call	8110b4d8 <__extendsfdf2>
81106f2c:	1009883a 	mov	r4,r2
81106f30:	180b883a 	mov	r5,r3
81106f34:	200d883a 	mov	r6,r4
81106f38:	280f883a 	mov	r7,r5
81106f3c:	e17ff017 	ldw	r5,-64(fp)
81106f40:	012044b4 	movhi	r4,33042
81106f44:	2136f204 	addi	r4,r4,-9272
81106f48:	110ba640 	call	8110ba64 <printf>
81106f4c:	00000806 	br	81106f70 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b0>
    } else {
      printf("DDR2 write test pass, size=%d bytes\n", ByteLen);
81106f50:	e17ff017 	ldw	r5,-64(fp)
81106f54:	012044b4 	movhi	r4,33042
81106f58:	21374e04 	addi	r4,r4,-8904
81106f5c:	110ba640 	call	8110ba64 <printf>
81106f60:	00000306 	br	81106f70 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b0>
    }
  } else {
    printf("DDR2 write test fail\n");
81106f64:	012044b4 	movhi	r4,33042
81106f68:	2136fe04 	addi	r4,r4,-9224
81106f6c:	110bb800 	call	8110bb80 <puts>
  }
  printf("\n");
81106f70:	01000284 	movi	r4,10
81106f74:	110baa80 	call	8110baa8 <putchar>

  return bSuccess;
81106f78:	e0bff417 	ldw	r2,-48(fp)
}
81106f7c:	e6fffc04 	addi	sp,fp,-16
81106f80:	dfc00517 	ldw	ra,20(sp)
81106f84:	df000417 	ldw	fp,16(sp)
81106f88:	dcc00317 	ldw	r19,12(sp)
81106f8c:	dc800217 	ldw	r18,8(sp)
81106f90:	dc400117 	ldw	r17,4(sp)
81106f94:	dc000017 	ldw	r16,0(sp)
81106f98:	dec00604 	addi	sp,sp,24
81106f9c:	f800283a 	ret

81106fa0 <DDR2_MEMORY_RANDOM_READ_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_READ_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
81106fa0:	deffed04 	addi	sp,sp,-76
81106fa4:	dfc01215 	stw	ra,72(sp)
81106fa8:	df001115 	stw	fp,68(sp)
81106fac:	dcc01015 	stw	r19,64(sp)
81106fb0:	dc800f15 	stw	r18,60(sp)
81106fb4:	dc400e15 	stw	r17,56(sp)
81106fb8:	dc000d15 	stw	r16,52(sp)
81106fbc:	df001104 	addi	fp,sp,68
81106fc0:	2005883a 	mov	r2,r4
81106fc4:	e17ffa15 	stw	r5,-24(fp)
81106fc8:	e1bffb15 	stw	r6,-20(fp)
81106fcc:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Read Test =====\n");
81106fd0:	012044b4 	movhi	r4,33042
81106fd4:	21375804 	addi	r4,r4,-8864
81106fd8:	110bb800 	call	8110bb80 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81106fdc:	00800044 	movi	r2,1
81106fe0:	e0bfef15 	stw	r2,-68(fp)
  switch (MemoryId) {
81106fe4:	e0bff903 	ldbu	r2,-28(fp)
81106fe8:	10c00060 	cmpeqi	r3,r2,1
81106fec:	1800031e 	bne	r3,zero,81106ffc <DDR2_MEMORY_RANDOM_READ_TEST+0x5c>
81106ff0:	108000a0 	cmpeqi	r2,r2,2
81106ff4:	1000081e 	bne	r2,zero,81107018 <DDR2_MEMORY_RANDOM_READ_TEST+0x78>
81106ff8:	00000e06 	br	81107034 <DDR2_MEMORY_RANDOM_READ_TEST+0x94>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81106ffc:	e0bff903 	ldbu	r2,-28(fp)
81107000:	1009883a 	mov	r4,r2
81107004:	110647c0 	call	8110647c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81107008:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
8110700c:	00a00034 	movhi	r2,32768
81107010:	e0bff115 	stw	r2,-60(fp)
    break;
81107014:	00000d06 	br	8110704c <DDR2_MEMORY_RANDOM_READ_TEST+0xac>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81107018:	e0bff903 	ldbu	r2,-28(fp)
8110701c:	1009883a 	mov	r4,r2
81107020:	110647c0 	call	8110647c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81107024:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81107028:	00a00034 	movhi	r2,32768
8110702c:	e0bff115 	stw	r2,-60(fp)
    break;
81107030:	00000606 	br	8110704c <DDR2_MEMORY_RANDOM_READ_TEST+0xac>
    default:
      bSuccess = FALSE;
81107034:	e03fef15 	stw	zero,-68(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81107038:	012044b4 	movhi	r4,33042
8110703c:	2134ec04 	addi	r4,r4,-11344
81107040:	110bb800 	call	8110bb80 <puts>
      return bSuccess;
81107044:	e0bfef17 	ldw	r2,-68(fp)
81107048:	00008006 	br	8110724c <DDR2_MEMORY_RANDOM_READ_TEST+0x2ac>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
8110704c:	e0bff117 	ldw	r2,-60(fp)
81107050:	1004d53a 	srli	r2,r2,20
81107054:	100b883a 	mov	r5,r2
81107058:	012044b4 	movhi	r4,33042
8110705c:	2136e604 	addi	r4,r4,-9320
81107060:	110ba640 	call	8110ba64 <printf>
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  CurrentState = InitialState;
81107064:	d0a03c17 	ldw	r2,-32528(gp)
81107068:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
8110706c:	e0fff017 	ldw	r3,-64(fp)
81107070:	e0bff117 	ldw	r2,-60(fp)
81107074:	1885883a 	add	r2,r3,r2
81107078:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
8110707c:	e0fff117 	ldw	r3,-60(fp)
81107080:	00b33374 	movhi	r2,52429
81107084:	10b33344 	addi	r2,r2,-13107
81107088:	1888383a 	mulxuu	r4,r3,r2
8110708c:	1885383a 	mul	r2,r3,r2
81107090:	1025883a 	mov	r18,r2
81107094:	2027883a 	mov	r19,r4
81107098:	9806d13a 	srli	r3,r19,4
8110709c:	e0bff017 	ldw	r2,-64(fp)
811070a0:	1885883a 	add	r2,r3,r2
811070a4:	e0bff315 	stw	r2,-52(fp)
  Percentage = 5;
811070a8:	00800144 	movi	r2,5
811070ac:	e0bff405 	stb	r2,-48(fp)
  printf("Reading from memory...\n");
811070b0:	012044b4 	movhi	r4,33042
811070b4:	21376404 	addi	r4,r4,-8816
811070b8:	110bb800 	call	8110bb80 <puts>
  if (bVerbose == DDR2_VERBOSE) {
811070bc:	e0bffa17 	ldw	r2,-24(fp)
811070c0:	10800058 	cmpnei	r2,r2,1
811070c4:	1000031e 	bne	r2,zero,811070d4 <DDR2_MEMORY_RANDOM_READ_TEST+0x134>
    printf("00%%..");
811070c8:	012044b4 	movhi	r4,33042
811070cc:	21374604 	addi	r4,r4,-8936
811070d0:	110ba640 	call	8110ba64 <printf>
  }
  
  int TimeStart, TimeElapsed = 0;
811070d4:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811070d8:	d0a04917 	ldw	r2,-32476(gp)

  TimeStart = alt_nticks();
811070dc:	e0bff715 	stw	r2,-36(fp)
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
811070e0:	e0bff017 	ldw	r2,-64(fp)
811070e4:	e0bff215 	stw	r2,-56(fp)
811070e8:	00002406 	br	8110717c <DDR2_MEMORY_RANDOM_READ_TEST+0x1dc>
    if (xorshift32(&CurrentState) != *pSource){
811070ec:	e0bff804 	addi	r2,fp,-32
811070f0:	1009883a 	mov	r4,r2
811070f4:	11072700 	call	81107270 <xorshift32>
811070f8:	1007883a 	mov	r3,r2
811070fc:	e0bff217 	ldw	r2,-56(fp)
81107100:	10800017 	ldw	r2,0(r2)
81107104:	18800126 	beq	r3,r2,8110710c <DDR2_MEMORY_RANDOM_READ_TEST+0x16c>
      bSuccess = FALSE;
81107108:	e03fef15 	stw	zero,-68(fp)
	  if (bVerbose == DDR2_VERBOSE) {
        //printf("Failed to read adress 0x%08X\n", pSource);
      }
    }
    if ((bVerbose == DDR2_VERBOSE) && ((alt_u32)pSource > NextMilestone)){
8110710c:	e0bffa17 	ldw	r2,-24(fp)
81107110:	10800058 	cmpnei	r2,r2,1
81107114:	1000161e 	bne	r2,zero,81107170 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d0>
81107118:	e0bff217 	ldw	r2,-56(fp)
8110711c:	e0fff317 	ldw	r3,-52(fp)
81107120:	1880132e 	bgeu	r3,r2,81107170 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d0>
      printf("..%02d%%..",Percentage);
81107124:	e0bff403 	ldbu	r2,-48(fp)
81107128:	100b883a 	mov	r5,r2
8110712c:	012044b4 	movhi	r4,33042
81107130:	21374804 	addi	r4,r4,-8928
81107134:	110ba640 	call	8110ba64 <printf>
	  NextMilestone += ByteLen/20;
81107138:	e0fff117 	ldw	r3,-60(fp)
8110713c:	00b33374 	movhi	r2,52429
81107140:	10b33344 	addi	r2,r2,-13107
81107144:	1888383a 	mulxuu	r4,r3,r2
81107148:	1885383a 	mul	r2,r3,r2
8110714c:	1021883a 	mov	r16,r2
81107150:	2023883a 	mov	r17,r4
81107154:	8804d13a 	srli	r2,r17,4
81107158:	e0fff317 	ldw	r3,-52(fp)
8110715c:	1885883a 	add	r2,r3,r2
81107160:	e0bff315 	stw	r2,-52(fp)
	  Percentage += 5;
81107164:	e0bff403 	ldbu	r2,-48(fp)
81107168:	10800144 	addi	r2,r2,5
8110716c:	e0bff405 	stb	r2,-48(fp)
  }
  
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
81107170:	e0bff217 	ldw	r2,-56(fp)
81107174:	10800104 	addi	r2,r2,4
81107178:	e0bff215 	stw	r2,-56(fp)
8110717c:	e0fff217 	ldw	r3,-56(fp)
81107180:	e0bff517 	ldw	r2,-44(fp)
81107184:	18bfd936 	bltu	r3,r2,811070ec <__reset+0xfb0e70ec>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  if (bVerbose == DDR2_VERBOSE) {
81107188:	e0bffa17 	ldw	r2,-24(fp)
8110718c:	10800058 	cmpnei	r2,r2,1
81107190:	1000031e 	bne	r2,zero,811071a0 <DDR2_MEMORY_RANDOM_READ_TEST+0x200>
    printf("..100%%\n");
81107194:	012044b4 	movhi	r4,33042
81107198:	21374b04 	addi	r4,r4,-8916
8110719c:	110ba640 	call	8110ba64 <printf>
  }

  if (bSuccess){
811071a0:	e0bfef17 	ldw	r2,-68(fp)
811071a4:	10002326 	beq	r2,zero,81107234 <DDR2_MEMORY_RANDOM_READ_TEST+0x294>
    if (bTime == TRUE){
811071a8:	e0bffb17 	ldw	r2,-20(fp)
811071ac:	10800058 	cmpnei	r2,r2,1
811071b0:	10001b1e 	bne	r2,zero,81107220 <DDR2_MEMORY_RANDOM_READ_TEST+0x280>
811071b4:	d0e04917 	ldw	r3,-32476(gp)
      TimeElapsed = alt_nticks() - TimeStart;
811071b8:	e0bff717 	ldw	r2,-36(fp)
811071bc:	1885c83a 	sub	r2,r3,r2
811071c0:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
811071c4:	e13ff617 	ldw	r4,-40(fp)
811071c8:	110abac0 	call	8110abac <__floatsisf>
811071cc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811071d0:	d0a04817 	ldw	r2,-32480(gp)
811071d4:	1009883a 	mov	r4,r2
811071d8:	110acd00 	call	8110acd0 <__floatunsisf>
811071dc:	1007883a 	mov	r3,r2
811071e0:	180b883a 	mov	r5,r3
811071e4:	8009883a 	mov	r4,r16
811071e8:	110a3700 	call	8110a370 <__divsf3>
811071ec:	1007883a 	mov	r3,r2
811071f0:	1805883a 	mov	r2,r3
811071f4:	1009883a 	mov	r4,r2
811071f8:	110b4d80 	call	8110b4d8 <__extendsfdf2>
811071fc:	1009883a 	mov	r4,r2
81107200:	180b883a 	mov	r5,r3
81107204:	200d883a 	mov	r6,r4
81107208:	280f883a 	mov	r7,r5
8110720c:	e17ff117 	ldw	r5,-60(fp)
81107210:	012044b4 	movhi	r4,33042
81107214:	21372304 	addi	r4,r4,-9076
81107218:	110ba640 	call	8110ba64 <printf>
8110721c:	00000806 	br	81107240 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a0>
    } else {
      printf("DDR2 read test pass, size=%d bytes\n", ByteLen);
81107220:	e17ff117 	ldw	r5,-60(fp)
81107224:	012044b4 	movhi	r4,33042
81107228:	21376a04 	addi	r4,r4,-8792
8110722c:	110ba640 	call	8110ba64 <printf>
81107230:	00000306 	br	81107240 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a0>
    }
  } else {
    printf("DDR2 read test fail\n");
81107234:	012044b4 	movhi	r4,33042
81107238:	21372f04 	addi	r4,r4,-9028
8110723c:	110bb800 	call	8110bb80 <puts>
  }
  printf("\n");
81107240:	01000284 	movi	r4,10
81107244:	110baa80 	call	8110baa8 <putchar>

  return bSuccess;
81107248:	e0bfef17 	ldw	r2,-68(fp)
}
8110724c:	e6fffc04 	addi	sp,fp,-16
81107250:	dfc00517 	ldw	ra,20(sp)
81107254:	df000417 	ldw	fp,16(sp)
81107258:	dcc00317 	ldw	r19,12(sp)
8110725c:	dc800217 	ldw	r18,8(sp)
81107260:	dc400117 	ldw	r17,4(sp)
81107264:	dc000017 	ldw	r16,0(sp)
81107268:	dec00604 	addi	sp,sp,24
8110726c:	f800283a 	ret

81107270 <xorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
  *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 xorshift32(alt_u32 *State){
81107270:	defffd04 	addi	sp,sp,-12
81107274:	df000215 	stw	fp,8(sp)
81107278:	df000204 	addi	fp,sp,8
8110727c:	e13fff15 	stw	r4,-4(fp)

  alt_u32 x = *State;
81107280:	e0bfff17 	ldw	r2,-4(fp)
81107284:	10800017 	ldw	r2,0(r2)
81107288:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 13;
8110728c:	e0bffe17 	ldw	r2,-8(fp)
81107290:	1004937a 	slli	r2,r2,13
81107294:	e0fffe17 	ldw	r3,-8(fp)
81107298:	1884f03a 	xor	r2,r3,r2
8110729c:	e0bffe15 	stw	r2,-8(fp)
  x ^= x >> 17;
811072a0:	e0bffe17 	ldw	r2,-8(fp)
811072a4:	1004d47a 	srli	r2,r2,17
811072a8:	e0fffe17 	ldw	r3,-8(fp)
811072ac:	1884f03a 	xor	r2,r3,r2
811072b0:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 5;
811072b4:	e0bffe17 	ldw	r2,-8(fp)
811072b8:	1004917a 	slli	r2,r2,5
811072bc:	e0fffe17 	ldw	r3,-8(fp)
811072c0:	1884f03a 	xor	r2,r3,r2
811072c4:	e0bffe15 	stw	r2,-8(fp)
  *State = x;
811072c8:	e0bfff17 	ldw	r2,-4(fp)
811072cc:	e0fffe17 	ldw	r3,-8(fp)
811072d0:	10c00015 	stw	r3,0(r2)

  return x;
811072d4:	e0bffe17 	ldw	r2,-8(fp)
}
811072d8:	e037883a 	mov	sp,fp
811072dc:	df000017 	ldw	fp,0(sp)
811072e0:	dec00104 	addi	sp,sp,4
811072e4:	f800283a 	ret

811072e8 <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
811072e8:	defffb04 	addi	sp,sp,-20
811072ec:	dfc00415 	stw	ra,16(sp)
811072f0:	df000315 	stw	fp,12(sp)
811072f4:	df000304 	addi	fp,sp,12
811072f8:	e13ffe15 	stw	r4,-8(fp)
811072fc:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81107300:	00800044 	movi	r2,1
81107304:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
81107308:	e13fff17 	ldw	r4,-4(fp)
8110730c:	111bee80 	call	8111bee8 <alt_msgdma_open>
81107310:	1007883a 	mov	r3,r2
81107314:	e0bffe17 	ldw	r2,-8(fp)
81107318:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
8110731c:	e0bffe17 	ldw	r2,-8(fp)
81107320:	10800017 	ldw	r2,0(r2)
81107324:	1000011e 	bne	r2,zero,8110732c <DMA_OPEN_DEVICE+0x44>
    bSuccess = FALSE;
81107328:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
8110732c:	e0bffd17 	ldw	r2,-12(fp)
}
81107330:	e037883a 	mov	sp,fp
81107334:	dfc00117 	ldw	ra,4(sp)
81107338:	df000017 	ldw	fp,0(sp)
8110733c:	dec00204 	addi	sp,sp,8
81107340:	f800283a 	ret

81107344 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
81107344:	defffc04 	addi	sp,sp,-16
81107348:	df000315 	stw	fp,12(sp)
8110734c:	df000304 	addi	fp,sp,12
81107350:	e13ffe15 	stw	r4,-8(fp)
81107354:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81107358:	00800044 	movi	r2,1
8110735c:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
81107360:	e0bffe17 	ldw	r2,-8(fp)
81107364:	10800317 	ldw	r2,12(r2)
81107368:	10800104 	addi	r2,r2,4
8110736c:	e0ffff17 	ldw	r3,-4(fp)
81107370:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
81107374:	e0bffd17 	ldw	r2,-12(fp)
}
81107378:	e037883a 	mov	sp,fp
8110737c:	df000017 	ldw	fp,0(sp)
81107380:	dec00104 	addi	sp,sp,4
81107384:	f800283a 	ret

81107388 <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
81107388:	defffd04 	addi	sp,sp,-12
8110738c:	df000215 	stw	fp,8(sp)
81107390:	df000204 	addi	fp,sp,8
81107394:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81107398:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
8110739c:	e0bfff17 	ldw	r2,-4(fp)
811073a0:	10800317 	ldw	r2,12(r2)
811073a4:	10800037 	ldwio	r2,0(r2)
811073a8:	1080004c 	andi	r2,r2,1
811073ac:	10000226 	beq	r2,zero,811073b8 <DMA_BUSY+0x30>
    bBusy = TRUE;
811073b0:	00800044 	movi	r2,1
811073b4:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
811073b8:	e0bffe17 	ldw	r2,-8(fp)
}
811073bc:	e037883a 	mov	sp,fp
811073c0:	df000017 	ldw	fp,0(sp)
811073c4:	dec00104 	addi	sp,sp,4
811073c8:	f800283a 	ret

811073cc <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
811073cc:	defffd04 	addi	sp,sp,-12
811073d0:	df000215 	stw	fp,8(sp)
811073d4:	df000204 	addi	fp,sp,8
811073d8:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
811073dc:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
811073e0:	e0bfff17 	ldw	r2,-4(fp)
811073e4:	10800317 	ldw	r2,12(r2)
811073e8:	10800037 	ldwio	r2,0(r2)
811073ec:	1080010c 	andi	r2,r2,4
811073f0:	10000226 	beq	r2,zero,811073fc <DMA_DESCRIPTOR_BUFFER_FULL+0x30>
    bFull = TRUE;
811073f4:	00800044 	movi	r2,1
811073f8:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
811073fc:	e0bffe17 	ldw	r2,-8(fp)
}
81107400:	e037883a 	mov	sp,fp
81107404:	df000017 	ldw	fp,0(sp)
81107408:	dec00104 	addi	sp,sp,4
8110740c:	f800283a 	ret

81107410 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81107410:	defffd04 	addi	sp,sp,-12
81107414:	df000215 	stw	fp,8(sp)
81107418:	df000204 	addi	fp,sp,8
8110741c:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81107420:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81107424:	e0bfff17 	ldw	r2,-4(fp)
81107428:	10800317 	ldw	r2,12(r2)
8110742c:	10800037 	ldwio	r2,0(r2)
81107430:	1080008c 	andi	r2,r2,2
81107434:	10000226 	beq	r2,zero,81107440 <DMA_DESCRIPTOR_BUFFER_EMPTY+0x30>
    bEmpty = TRUE;
81107438:	00800044 	movi	r2,1
8110743c:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81107440:	e0bffe17 	ldw	r2,-8(fp)
}
81107444:	e037883a 	mov	sp,fp
81107448:	df000017 	ldw	fp,0(sp)
8110744c:	dec00104 	addi	sp,sp,4
81107450:	f800283a 	ret

81107454 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81107454:	defffa04 	addi	sp,sp,-24
81107458:	dfc00515 	stw	ra,20(sp)
8110745c:	df000415 	stw	fp,16(sp)
81107460:	df000404 	addi	fp,sp,16
81107464:	e13ffd15 	stw	r4,-12(fp)
81107468:	e17ffe15 	stw	r5,-8(fp)
8110746c:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81107470:	00800044 	movi	r2,1
81107474:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81107478:	e0bffd17 	ldw	r2,-12(fp)
8110747c:	10800317 	ldw	r2,12(r2)
81107480:	10800104 	addi	r2,r2,4
81107484:	00c00044 	movi	r3,1
81107488:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
8110748c:	e0bffe17 	ldw	r2,-8(fp)
81107490:	10800058 	cmpnei	r2,r2,1
81107494:	10000f1e 	bne	r2,zero,811074d4 <DMA_DISPATCHER_STOP+0x80>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81107498:	00000806 	br	811074bc <DMA_DISPATCHER_STOP+0x68>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
8110749c:	e0bfff17 	ldw	r2,-4(fp)
811074a0:	1000031e 	bne	r2,zero,811074b0 <DMA_DISPATCHER_STOP+0x5c>
        usleep(1);
811074a4:	01000044 	movi	r4,1
811074a8:	1118c880 	call	81118c88 <usleep>
811074ac:	00000306 	br	811074bc <DMA_DISPATCHER_STOP+0x68>
      } else {
        usleep(WaitPeriodUs);
811074b0:	e0bfff17 	ldw	r2,-4(fp)
811074b4:	1009883a 	mov	r4,r2
811074b8:	1118c880 	call	81118c88 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
811074bc:	e0bffd17 	ldw	r2,-12(fp)
811074c0:	10800317 	ldw	r2,12(r2)
811074c4:	10800037 	ldwio	r2,0(r2)
811074c8:	1080080c 	andi	r2,r2,32
811074cc:	103ff31e 	bne	r2,zero,8110749c <__reset+0xfb0e749c>
811074d0:	00000206 	br	811074dc <DMA_DISPATCHER_STOP+0x88>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
811074d4:	e0bffc17 	ldw	r2,-16(fp)
811074d8:	00000106 	br	811074e0 <DMA_DISPATCHER_STOP+0x8c>
  }
  
  return bSuccess;
811074dc:	e0bffc17 	ldw	r2,-16(fp)
}
811074e0:	e037883a 	mov	sp,fp
811074e4:	dfc00117 	ldw	ra,4(sp)
811074e8:	df000017 	ldw	fp,0(sp)
811074ec:	dec00204 	addi	sp,sp,8
811074f0:	f800283a 	ret

811074f4 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
811074f4:	defffa04 	addi	sp,sp,-24
811074f8:	dfc00515 	stw	ra,20(sp)
811074fc:	df000415 	stw	fp,16(sp)
81107500:	df000404 	addi	fp,sp,16
81107504:	e13ffd15 	stw	r4,-12(fp)
81107508:	e17ffe15 	stw	r5,-8(fp)
8110750c:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81107510:	00800044 	movi	r2,1
81107514:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81107518:	e0bffd17 	ldw	r2,-12(fp)
8110751c:	10800317 	ldw	r2,12(r2)
81107520:	10800104 	addi	r2,r2,4
81107524:	00c00084 	movi	r3,2
81107528:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
8110752c:	e0bffe17 	ldw	r2,-8(fp)
81107530:	10800058 	cmpnei	r2,r2,1
81107534:	10000f1e 	bne	r2,zero,81107574 <DMA_DISPATCHER_RESET+0x80>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81107538:	00000806 	br	8110755c <DMA_DISPATCHER_RESET+0x68>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
8110753c:	e0bfff17 	ldw	r2,-4(fp)
81107540:	1000031e 	bne	r2,zero,81107550 <DMA_DISPATCHER_RESET+0x5c>
        usleep(1);
81107544:	01000044 	movi	r4,1
81107548:	1118c880 	call	81118c88 <usleep>
8110754c:	00000306 	br	8110755c <DMA_DISPATCHER_RESET+0x68>
      } else {
        usleep(WaitPeriodUs);
81107550:	e0bfff17 	ldw	r2,-4(fp)
81107554:	1009883a 	mov	r4,r2
81107558:	1118c880 	call	81118c88 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
8110755c:	e0bffd17 	ldw	r2,-12(fp)
81107560:	10800317 	ldw	r2,12(r2)
81107564:	10800037 	ldwio	r2,0(r2)
81107568:	1080100c 	andi	r2,r2,64
8110756c:	103ff31e 	bne	r2,zero,8110753c <__reset+0xfb0e753c>
81107570:	00000206 	br	8110757c <DMA_DISPATCHER_RESET+0x88>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81107574:	e0bffc17 	ldw	r2,-16(fp)
81107578:	00000106 	br	81107580 <DMA_DISPATCHER_RESET+0x8c>
  }
  
  return bSuccess;
8110757c:	e0bffc17 	ldw	r2,-16(fp)
}
81107580:	e037883a 	mov	sp,fp
81107584:	dfc00117 	ldw	ra,4(sp)
81107588:	df000017 	ldw	fp,0(sp)
8110758c:	dec00204 	addi	sp,sp,8
81107590:	f800283a 	ret

81107594 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81107594:	defff604 	addi	sp,sp,-40
81107598:	dfc00915 	stw	ra,36(sp)
8110759c:	df000815 	stw	fp,32(sp)
811075a0:	dc000715 	stw	r16,28(sp)
811075a4:	df000804 	addi	fp,sp,32
811075a8:	e13ffb15 	stw	r4,-20(fp)
811075ac:	e17ffc15 	stw	r5,-16(fp)
811075b0:	e1bffd15 	stw	r6,-12(fp)
811075b4:	e1fffe15 	stw	r7,-8(fp)
811075b8:	defff804 	addi	sp,sp,-32
811075bc:	d8800204 	addi	r2,sp,8
811075c0:	108003c4 	addi	r2,r2,15
811075c4:	1004d13a 	srli	r2,r2,4
811075c8:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
811075cc:	00800044 	movi	r2,1
811075d0:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
811075d4:	e0fffc17 	ldw	r3,-16(fp)
811075d8:	e13ffd17 	ldw	r4,-12(fp)
811075dc:	e0800217 	ldw	r2,8(fp)
811075e0:	d8800115 	stw	r2,4(sp)
811075e4:	e0bffe17 	ldw	r2,-8(fp)
811075e8:	d8800015 	stw	r2,0(sp)
811075ec:	200f883a 	mov	r7,r4
811075f0:	180d883a 	mov	r6,r3
811075f4:	800b883a 	mov	r5,r16
811075f8:	e13ffb17 	ldw	r4,-20(fp)
811075fc:	111afcc0 	call	8111afcc <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81107600:	10000326 	beq	r2,zero,81107610 <DMA_SINGLE_TRANSFER+0x7c>
    bSuccess = FALSE;
81107604:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81107608:	e0bffa17 	ldw	r2,-24(fp)
8110760c:	00001e06 	br	81107688 <DMA_SINGLE_TRANSFER+0xf4>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81107610:	800b883a 	mov	r5,r16
81107614:	e13ffb17 	ldw	r4,-20(fp)
81107618:	111c1000 	call	8111c100 <alt_msgdma_standard_descriptor_async_transfer>
8110761c:	10000326 	beq	r2,zero,8110762c <DMA_SINGLE_TRANSFER+0x98>
      bSuccess = FALSE;
81107620:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81107624:	e0bffa17 	ldw	r2,-24(fp)
81107628:	00001706 	br	81107688 <DMA_SINGLE_TRANSFER+0xf4>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
8110762c:	e0bffa17 	ldw	r2,-24(fp)
81107630:	10800060 	cmpeqi	r2,r2,1
81107634:	1007883a 	mov	r3,r2
81107638:	e0800317 	ldw	r2,12(fp)
8110763c:	10800060 	cmpeqi	r2,r2,1
81107640:	1884703a 	and	r2,r3,r2
81107644:	10803fcc 	andi	r2,r2,255
81107648:	10000e26 	beq	r2,zero,81107684 <DMA_SINGLE_TRANSFER+0xf0>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
8110764c:	00000806 	br	81107670 <DMA_SINGLE_TRANSFER+0xdc>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81107650:	e0800417 	ldw	r2,16(fp)
81107654:	1000031e 	bne	r2,zero,81107664 <DMA_SINGLE_TRANSFER+0xd0>
        usleep(1000);
81107658:	0100fa04 	movi	r4,1000
8110765c:	1118c880 	call	81118c88 <usleep>
81107660:	00000306 	br	81107670 <DMA_SINGLE_TRANSFER+0xdc>
      } else {
        usleep(WaitPeriodUs);
81107664:	e0800417 	ldw	r2,16(fp)
81107668:	1009883a 	mov	r4,r2
8110766c:	1118c880 	call	81118c88 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81107670:	e0bffb17 	ldw	r2,-20(fp)
81107674:	10800317 	ldw	r2,12(r2)
81107678:	10800037 	ldwio	r2,0(r2)
8110767c:	1080004c 	andi	r2,r2,1
81107680:	103ff31e 	bne	r2,zero,81107650 <__reset+0xfb0e7650>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81107684:	e0bffa17 	ldw	r2,-24(fp)
}
81107688:	e6ffff04 	addi	sp,fp,-4
8110768c:	dfc00217 	ldw	ra,8(sp)
81107690:	df000117 	ldw	fp,4(sp)
81107694:	dc000017 	ldw	r16,0(sp)
81107698:	dec00304 	addi	sp,sp,12
8110769c:	f800283a 	ret

811076a0 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
811076a0:	defff504 	addi	sp,sp,-44
811076a4:	dfc00a15 	stw	ra,40(sp)
811076a8:	df000915 	stw	fp,36(sp)
811076ac:	dc000815 	stw	r16,32(sp)
811076b0:	df000904 	addi	fp,sp,36
811076b4:	e13ffb15 	stw	r4,-20(fp)
811076b8:	e17ffc15 	stw	r5,-16(fp)
811076bc:	e1bffd15 	stw	r6,-12(fp)
811076c0:	3805883a 	mov	r2,r7
811076c4:	e0bffe05 	stb	r2,-8(fp)
811076c8:	defff804 	addi	sp,sp,-32
811076cc:	d8800204 	addi	r2,sp,8
811076d0:	108003c4 	addi	r2,r2,15
811076d4:	1004d13a 	srli	r2,r2,4
811076d8:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
811076dc:	00800044 	movi	r2,1
811076e0:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
811076e4:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
811076e8:	00002506 	br	81107780 <DMA_MULTIPLE_TRANSFER+0xe0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
811076ec:	e0bffa03 	ldbu	r2,-24(fp)
811076f0:	1085883a 	add	r2,r2,r2
811076f4:	1085883a 	add	r2,r2,r2
811076f8:	1007883a 	mov	r3,r2
811076fc:	e0bffc17 	ldw	r2,-16(fp)
81107700:	10c5883a 	add	r2,r2,r3
81107704:	10800017 	ldw	r2,0(r2)
81107708:	1009883a 	mov	r4,r2
8110770c:	e0bffa03 	ldbu	r2,-24(fp)
81107710:	1085883a 	add	r2,r2,r2
81107714:	1085883a 	add	r2,r2,r2
81107718:	1007883a 	mov	r3,r2
8110771c:	e0bffd17 	ldw	r2,-12(fp)
81107720:	10c5883a 	add	r2,r2,r3
81107724:	10800017 	ldw	r2,0(r2)
81107728:	1007883a 	mov	r3,r2
8110772c:	e0800317 	ldw	r2,12(fp)
81107730:	10804034 	orhi	r2,r2,256
81107734:	d8800115 	stw	r2,4(sp)
81107738:	e0800217 	ldw	r2,8(fp)
8110773c:	d8800015 	stw	r2,0(sp)
81107740:	180f883a 	mov	r7,r3
81107744:	200d883a 	mov	r6,r4
81107748:	800b883a 	mov	r5,r16
8110774c:	e13ffb17 	ldw	r4,-20(fp)
81107750:	111afcc0 	call	8111afcc <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81107754:	10000226 	beq	r2,zero,81107760 <DMA_MULTIPLE_TRANSFER+0xc0>
      bSuccess = FALSE;
81107758:	e03ff915 	stw	zero,-28(fp)
8110775c:	00000506 	br	81107774 <DMA_MULTIPLE_TRANSFER+0xd4>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81107760:	800b883a 	mov	r5,r16
81107764:	e13ffb17 	ldw	r4,-20(fp)
81107768:	111c1000 	call	8111c100 <alt_msgdma_standard_descriptor_async_transfer>
8110776c:	10000126 	beq	r2,zero,81107774 <DMA_MULTIPLE_TRANSFER+0xd4>
        bSuccess = FALSE;
81107770:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81107774:	e0bffa03 	ldbu	r2,-24(fp)
81107778:	10800044 	addi	r2,r2,1
8110777c:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81107780:	e0bff917 	ldw	r2,-28(fp)
81107784:	10800060 	cmpeqi	r2,r2,1
81107788:	1009883a 	mov	r4,r2
8110778c:	e0fffa03 	ldbu	r3,-24(fp)
81107790:	e0bffe03 	ldbu	r2,-8(fp)
81107794:	10bfffc4 	addi	r2,r2,-1
81107798:	1884803a 	cmplt	r2,r3,r2
8110779c:	2084703a 	and	r2,r4,r2
811077a0:	10803fcc 	andi	r2,r2,255
811077a4:	103fd11e 	bne	r2,zero,811076ec <__reset+0xfb0e76ec>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
811077a8:	e0bff917 	ldw	r2,-28(fp)
811077ac:	10800058 	cmpnei	r2,r2,1
811077b0:	1000211e 	bne	r2,zero,81107838 <DMA_MULTIPLE_TRANSFER+0x198>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
811077b4:	e0bffa03 	ldbu	r2,-24(fp)
811077b8:	1085883a 	add	r2,r2,r2
811077bc:	1085883a 	add	r2,r2,r2
811077c0:	1007883a 	mov	r3,r2
811077c4:	e0bffc17 	ldw	r2,-16(fp)
811077c8:	10c5883a 	add	r2,r2,r3
811077cc:	10800017 	ldw	r2,0(r2)
811077d0:	1009883a 	mov	r4,r2
811077d4:	e0bffa03 	ldbu	r2,-24(fp)
811077d8:	1085883a 	add	r2,r2,r2
811077dc:	1085883a 	add	r2,r2,r2
811077e0:	1007883a 	mov	r3,r2
811077e4:	e0bffd17 	ldw	r2,-12(fp)
811077e8:	10c5883a 	add	r2,r2,r3
811077ec:	10800017 	ldw	r2,0(r2)
811077f0:	1007883a 	mov	r3,r2
811077f4:	e0800317 	ldw	r2,12(fp)
811077f8:	d8800115 	stw	r2,4(sp)
811077fc:	e0800217 	ldw	r2,8(fp)
81107800:	d8800015 	stw	r2,0(sp)
81107804:	180f883a 	mov	r7,r3
81107808:	200d883a 	mov	r6,r4
8110780c:	800b883a 	mov	r5,r16
81107810:	e13ffb17 	ldw	r4,-20(fp)
81107814:	111afcc0 	call	8111afcc <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81107818:	10000226 	beq	r2,zero,81107824 <DMA_MULTIPLE_TRANSFER+0x184>
      bSuccess = FALSE;
8110781c:	e03ff915 	stw	zero,-28(fp)
81107820:	00000506 	br	81107838 <DMA_MULTIPLE_TRANSFER+0x198>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81107824:	800b883a 	mov	r5,r16
81107828:	e13ffb17 	ldw	r4,-20(fp)
8110782c:	111c1000 	call	8111c100 <alt_msgdma_standard_descriptor_async_transfer>
81107830:	10000126 	beq	r2,zero,81107838 <DMA_MULTIPLE_TRANSFER+0x198>
        bSuccess = FALSE;
81107834:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81107838:	e0bff917 	ldw	r2,-28(fp)
8110783c:	10800060 	cmpeqi	r2,r2,1
81107840:	1007883a 	mov	r3,r2
81107844:	e0800417 	ldw	r2,16(fp)
81107848:	10800060 	cmpeqi	r2,r2,1
8110784c:	1884703a 	and	r2,r3,r2
81107850:	10803fcc 	andi	r2,r2,255
81107854:	10000e26 	beq	r2,zero,81107890 <DMA_MULTIPLE_TRANSFER+0x1f0>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81107858:	00000806 	br	8110787c <DMA_MULTIPLE_TRANSFER+0x1dc>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
8110785c:	e0800517 	ldw	r2,20(fp)
81107860:	1000031e 	bne	r2,zero,81107870 <DMA_MULTIPLE_TRANSFER+0x1d0>
    	usleep(1000);
81107864:	0100fa04 	movi	r4,1000
81107868:	1118c880 	call	81118c88 <usleep>
8110786c:	00000306 	br	8110787c <DMA_MULTIPLE_TRANSFER+0x1dc>
      } else {
    	usleep(WaitPeriodUs);
81107870:	e0800517 	ldw	r2,20(fp)
81107874:	1009883a 	mov	r4,r2
81107878:	1118c880 	call	81118c88 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
8110787c:	e0bffb17 	ldw	r2,-20(fp)
81107880:	10800317 	ldw	r2,12(r2)
81107884:	10800037 	ldwio	r2,0(r2)
81107888:	1080004c 	andi	r2,r2,1
8110788c:	103ff31e 	bne	r2,zero,8110785c <__reset+0xfb0e785c>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81107890:	e0bff917 	ldw	r2,-28(fp)
}
81107894:	e6ffff04 	addi	sp,fp,-4
81107898:	dfc00217 	ldw	ra,8(sp)
8110789c:	df000117 	ldw	fp,4(sp)
811078a0:	dc000017 	ldw	r16,0(sp)
811078a4:	dec00304 	addi	sp,sp,12
811078a8:	f800283a 	ret

811078ac <DMA_EXTENDED_SINGLE_TRANSFER>:

bool DMA_EXTENDED_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressHigh, alt_u32 SourceAddressLow, alt_u32 DestinationAddressHigh, alt_u32 DestinationAddressLow, alt_u32 TransferSizeBytes, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
811078ac:	deffef04 	addi	sp,sp,-68
811078b0:	dfc01015 	stw	ra,64(sp)
811078b4:	df000f15 	stw	fp,60(sp)
811078b8:	dc000e15 	stw	r16,56(sp)
811078bc:	df000f04 	addi	fp,sp,60
811078c0:	e13ffb15 	stw	r4,-20(fp)
811078c4:	e17ffc15 	stw	r5,-16(fp)
811078c8:	e1bffd15 	stw	r6,-12(fp)
811078cc:	e1fffe15 	stw	r7,-8(fp)
811078d0:	defff004 	addi	sp,sp,-64
811078d4:	d8800904 	addi	r2,sp,36
811078d8:	108007c4 	addi	r2,r2,31
811078dc:	1004d17a 	srli	r2,r2,5
811078e0:	1020917a 	slli	r16,r2,5
  bool bSuccess = TRUE;
811078e4:	00800044 	movi	r2,1
811078e8:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_extended_descriptor DmaExtendedDescriptor;

  if (msgdma_construct_extended_mm_to_mm_descriptor (DmaDevice,
811078ec:	e17ffd17 	ldw	r5,-12(fp)
811078f0:	e1800217 	ldw	r6,8(fp)
811078f4:	e0bffc17 	ldw	r2,-16(fp)
811078f8:	e0fffe17 	ldw	r3,-8(fp)
811078fc:	01000044 	movi	r4,1
81107900:	d9000815 	stw	r4,32(sp)
81107904:	01000044 	movi	r4,1
81107908:	d9000715 	stw	r4,28(sp)
8110790c:	01000044 	movi	r4,1
81107910:	d9000615 	stw	r4,24(sp)
81107914:	01000044 	movi	r4,1
81107918:	d9000515 	stw	r4,20(sp)
8110791c:	01000044 	movi	r4,1
81107920:	d9000415 	stw	r4,16(sp)
81107924:	d8c00315 	stw	r3,12(sp)
81107928:	d8800215 	stw	r2,8(sp)
8110792c:	e0800417 	ldw	r2,16(fp)
81107930:	d8800115 	stw	r2,4(sp)
81107934:	e0800317 	ldw	r2,12(fp)
81107938:	d8800015 	stw	r2,0(sp)
8110793c:	300f883a 	mov	r7,r6
81107940:	280d883a 	mov	r6,r5
81107944:	800b883a 	mov	r5,r16
81107948:	e13ffb17 	ldw	r4,-20(fp)
8110794c:	1102c580 	call	81102c58 <msgdma_construct_extended_mm_to_mm_descriptor>
81107950:	10000326 	beq	r2,zero,81107960 <DMA_EXTENDED_SINGLE_TRANSFER+0xb4>
  		                                                 1,
  		                                                 1,
  		                                                 1,
  		                                                 1,
  		                                                 1) != 0){
	  bSuccess = FALSE;
81107954:	e03ffa15 	stw	zero,-24(fp)
	return bSuccess;
81107958:	e0bffa17 	ldw	r2,-24(fp)
8110795c:	00001e06 	br	811079d8 <DMA_EXTENDED_SINGLE_TRANSFER+0x12c>
  } else {
	if (msgdma_extended_descriptor_sync_transfer(DmaDevice, &DmaExtendedDescriptor) != 0) {
81107960:	800b883a 	mov	r5,r16
81107964:	e13ffb17 	ldw	r4,-20(fp)
81107968:	1102d4c0 	call	81102d4c <msgdma_extended_descriptor_sync_transfer>
8110796c:	10000326 	beq	r2,zero,8110797c <DMA_EXTENDED_SINGLE_TRANSFER+0xd0>
	  bSuccess = FALSE;
81107970:	e03ffa15 	stw	zero,-24(fp)
	  return bSuccess;
81107974:	e0bffa17 	ldw	r2,-24(fp)
81107978:	00001706 	br	811079d8 <DMA_EXTENDED_SINGLE_TRANSFER+0x12c>
	}
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
8110797c:	e0bffa17 	ldw	r2,-24(fp)
81107980:	10800060 	cmpeqi	r2,r2,1
81107984:	1007883a 	mov	r3,r2
81107988:	e0800517 	ldw	r2,20(fp)
8110798c:	10800060 	cmpeqi	r2,r2,1
81107990:	1884703a 	and	r2,r3,r2
81107994:	10803fcc 	andi	r2,r2,255
81107998:	10000e26 	beq	r2,zero,811079d4 <DMA_EXTENDED_SINGLE_TRANSFER+0x128>
	while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
8110799c:	00000806 	br	811079c0 <DMA_EXTENDED_SINGLE_TRANSFER+0x114>
	  if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
811079a0:	e0800617 	ldw	r2,24(fp)
811079a4:	1000031e 	bne	r2,zero,811079b4 <DMA_EXTENDED_SINGLE_TRANSFER+0x108>
		usleep(1000);
811079a8:	0100fa04 	movi	r4,1000
811079ac:	1118c880 	call	81118c88 <usleep>
811079b0:	00000306 	br	811079c0 <DMA_EXTENDED_SINGLE_TRANSFER+0x114>
	  } else {
		usleep(WaitPeriodUs);
811079b4:	e0800617 	ldw	r2,24(fp)
811079b8:	1009883a 	mov	r4,r2
811079bc:	1118c880 	call	81118c88 <usleep>
	  return bSuccess;
	}
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
	while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
811079c0:	e0bffb17 	ldw	r2,-20(fp)
811079c4:	10800317 	ldw	r2,12(r2)
811079c8:	10800037 	ldwio	r2,0(r2)
811079cc:	1080004c 	andi	r2,r2,1
811079d0:	103ff31e 	bne	r2,zero,811079a0 <__reset+0xfb0e79a0>
		usleep(WaitPeriodUs);
	  }
	}
  }

  return bSuccess;
811079d4:	e0bffa17 	ldw	r2,-24(fp)
}
811079d8:	e6ffff04 	addi	sp,fp,-4
811079dc:	dfc00217 	ldw	ra,8(sp)
811079e0:	df000117 	ldw	fp,4(sp)
811079e4:	dc000017 	ldw	r16,0(sp)
811079e8:	dec00304 	addi	sp,sp,12
811079ec:	f800283a 	ret

811079f0 <v_Eth_Hold_Reset>:
 *      Author: rfranca
 */

	#include "eth.h"

	void v_Eth_Hold_Reset(void){
811079f0:	defffe04 	addi	sp,sp,-8
811079f4:	df000115 	stw	fp,4(sp)
811079f8:	df000104 	addi	fp,sp,4

		alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
811079fc:	e03fff15 	stw	zero,-4(fp)
		*pEthAddr = (alt_u32) 0x00000000;
81107a00:	e0bfff17 	ldw	r2,-4(fp)
81107a04:	10000015 	stw	zero,0(r2)

	}
81107a08:	0001883a 	nop
81107a0c:	e037883a 	mov	sp,fp
81107a10:	df000017 	ldw	fp,0(sp)
81107a14:	dec00104 	addi	sp,sp,4
81107a18:	f800283a 	ret

81107a1c <v_Eth_Release_Reset>:

	void v_Eth_Release_Reset(void){
81107a1c:	defffe04 	addi	sp,sp,-8
81107a20:	df000115 	stw	fp,4(sp)
81107a24:	df000104 	addi	fp,sp,4

		alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
81107a28:	e03fff15 	stw	zero,-4(fp)
		*pEthAddr = (alt_u32) 0x00000001;
81107a2c:	e0bfff17 	ldw	r2,-4(fp)
81107a30:	00c00044 	movi	r3,1
81107a34:	10c00015 	stw	r3,0(r2)

	}
81107a38:	0001883a 	nop
81107a3c:	e037883a 	mov	sp,fp
81107a40:	df000017 	ldw	fp,0(sp)
81107a44:	dec00104 	addi	sp,sp,4
81107a48:	f800283a 	ret

81107a4c <PGEN_WRITE_REG32>:
 */

	#include "pgen.h"
	#include "pgen_registers.h"

	void PGEN_WRITE_REG32(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81107a4c:	defffc04 	addi	sp,sp,-16
81107a50:	df000315 	stw	fp,12(sp)
81107a54:	df000304 	addi	fp,sp,12
81107a58:	2005883a 	mov	r2,r4
81107a5c:	e17fff15 	stw	r5,-4(fp)
81107a60:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
81107a64:	e03ffd15 	stw	zero,-12(fp)
		*(pPgenAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81107a68:	e0bffe03 	ldbu	r2,-8(fp)
81107a6c:	1085883a 	add	r2,r2,r2
81107a70:	1085883a 	add	r2,r2,r2
81107a74:	1007883a 	mov	r3,r2
81107a78:	e0bffd17 	ldw	r2,-12(fp)
81107a7c:	10c5883a 	add	r2,r2,r3
81107a80:	e0ffff17 	ldw	r3,-4(fp)
81107a84:	10c00015 	stw	r3,0(r2)
	}
81107a88:	0001883a 	nop
81107a8c:	e037883a 	mov	sp,fp
81107a90:	df000017 	ldw	fp,0(sp)
81107a94:	dec00104 	addi	sp,sp,4
81107a98:	f800283a 	ret

81107a9c <PGEN_READ_REG32>:

	alt_u32 PGEN_READ_REG32(alt_u8 uc_RegisterAddress){
81107a9c:	defffc04 	addi	sp,sp,-16
81107aa0:	df000315 	stw	fp,12(sp)
81107aa4:	df000304 	addi	fp,sp,12
81107aa8:	2005883a 	mov	r2,r4
81107aac:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81107ab0:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
81107ab4:	e03ffe15 	stw	zero,-8(fp)
		RegisterValue = *(pPgenAddr + (alt_u32)uc_RegisterAddress);
81107ab8:	e0bfff03 	ldbu	r2,-4(fp)
81107abc:	1085883a 	add	r2,r2,r2
81107ac0:	1085883a 	add	r2,r2,r2
81107ac4:	1007883a 	mov	r3,r2
81107ac8:	e0bffe17 	ldw	r2,-8(fp)
81107acc:	10c5883a 	add	r2,r2,r3
81107ad0:	10800017 	ldw	r2,0(r2)
81107ad4:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81107ad8:	e0bffd17 	ldw	r2,-12(fp)
	}
81107adc:	e037883a 	mov	sp,fp
81107ae0:	df000017 	ldw	fp,0(sp)
81107ae4:	dec00104 	addi	sp,sp,4
81107ae8:	f800283a 	ret

81107aec <b_Pattern_Generator_Write_Register>:

	bool b_Pattern_Generator_Write_Register(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81107aec:	defffb04 	addi	sp,sp,-20
81107af0:	dfc00415 	stw	ra,16(sp)
81107af4:	df000315 	stw	fp,12(sp)
81107af8:	df000304 	addi	fp,sp,12
81107afc:	2005883a 	mov	r2,r4
81107b00:	e17fff15 	stw	r5,-4(fp)
81107b04:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81107b08:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x01) {
81107b0c:	e0bffe03 	ldbu	r2,-8(fp)
81107b10:	108000a8 	cmpgeui	r2,r2,2
81107b14:	1000061e 	bne	r2,zero,81107b30 <b_Pattern_Generator_Write_Register+0x44>
			PGEN_WRITE_REG32(uc_RegisterAddress, ul_RegisterValue);
81107b18:	e0bffe03 	ldbu	r2,-8(fp)
81107b1c:	e17fff17 	ldw	r5,-4(fp)
81107b20:	1009883a 	mov	r4,r2
81107b24:	1107a4c0 	call	81107a4c <PGEN_WRITE_REG32>
			bSuccess = TRUE;
81107b28:	00800044 	movi	r2,1
81107b2c:	e0bffd15 	stw	r2,-12(fp)
		}

		return bSuccess;
81107b30:	e0bffd17 	ldw	r2,-12(fp)
	}
81107b34:	e037883a 	mov	sp,fp
81107b38:	dfc00117 	ldw	ra,4(sp)
81107b3c:	df000017 	ldw	fp,0(sp)
81107b40:	dec00204 	addi	sp,sp,8
81107b44:	f800283a 	ret

81107b48 <ul_Pattern_Generator_Read_Register>:

	alt_u32 ul_Pattern_Generator_Read_Register(alt_u8 uc_RegisterAddress){
81107b48:	defffc04 	addi	sp,sp,-16
81107b4c:	dfc00315 	stw	ra,12(sp)
81107b50:	df000215 	stw	fp,8(sp)
81107b54:	df000204 	addi	fp,sp,8
81107b58:	2005883a 	mov	r2,r4
81107b5c:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81107b60:	e03ffe15 	stw	zero,-8(fp)

		if (uc_RegisterAddress <= 0x01) {
81107b64:	e0bfff03 	ldbu	r2,-4(fp)
81107b68:	108000a8 	cmpgeui	r2,r2,2
81107b6c:	1000041e 	bne	r2,zero,81107b80 <ul_Pattern_Generator_Read_Register+0x38>
			ul_RegisterValue = PGEN_READ_REG32(uc_RegisterAddress);
81107b70:	e0bfff03 	ldbu	r2,-4(fp)
81107b74:	1009883a 	mov	r4,r2
81107b78:	1107a9c0 	call	81107a9c <PGEN_READ_REG32>
81107b7c:	e0bffe15 	stw	r2,-8(fp)
		}

		return ul_RegisterValue;
81107b80:	e0bffe17 	ldw	r2,-8(fp)
	}
81107b84:	e037883a 	mov	sp,fp
81107b88:	dfc00117 	ldw	ra,4(sp)
81107b8c:	df000017 	ldw	fp,0(sp)
81107b90:	dec00204 	addi	sp,sp,8
81107b94:	f800283a 	ret

81107b98 <v_Pattern_Generator_Start>:

	void v_Pattern_Generator_Start(void){
81107b98:	defffe04 	addi	sp,sp,-8
81107b9c:	dfc00115 	stw	ra,4(sp)
81107ba0:	df000015 	stw	fp,0(sp)
81107ba4:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_START_CONTROL_BIT_MASK);
81107ba8:	01400404 	movi	r5,16
81107bac:	0009883a 	mov	r4,zero
81107bb0:	1107a4c0 	call	81107a4c <PGEN_WRITE_REG32>

	}
81107bb4:	0001883a 	nop
81107bb8:	e037883a 	mov	sp,fp
81107bbc:	dfc00117 	ldw	ra,4(sp)
81107bc0:	df000017 	ldw	fp,0(sp)
81107bc4:	dec00204 	addi	sp,sp,8
81107bc8:	f800283a 	ret

81107bcc <v_Pattern_Generator_Stop>:

	void v_Pattern_Generator_Stop(void){
81107bcc:	defffe04 	addi	sp,sp,-8
81107bd0:	dfc00115 	stw	ra,4(sp)
81107bd4:	df000015 	stw	fp,0(sp)
81107bd8:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_STOP_CONTROL_BIT_MASK);
81107bdc:	01400204 	movi	r5,8
81107be0:	0009883a 	mov	r4,zero
81107be4:	1107a4c0 	call	81107a4c <PGEN_WRITE_REG32>

	}
81107be8:	0001883a 	nop
81107bec:	e037883a 	mov	sp,fp
81107bf0:	dfc00117 	ldw	ra,4(sp)
81107bf4:	df000017 	ldw	fp,0(sp)
81107bf8:	dec00204 	addi	sp,sp,8
81107bfc:	f800283a 	ret

81107c00 <v_Pattern_Generator_Reset>:

	void v_Pattern_Generator_Reset(void){
81107c00:	defffe04 	addi	sp,sp,-8
81107c04:	dfc00115 	stw	ra,4(sp)
81107c08:	df000015 	stw	fp,0(sp)
81107c0c:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_RESET_CONTROL_BIT_MASK);
81107c10:	01400104 	movi	r5,4
81107c14:	0009883a 	mov	r4,zero
81107c18:	1107a4c0 	call	81107a4c <PGEN_WRITE_REG32>

	}
81107c1c:	0001883a 	nop
81107c20:	e037883a 	mov	sp,fp
81107c24:	dfc00117 	ldw	ra,4(sp)
81107c28:	df000017 	ldw	fp,0(sp)
81107c2c:	dec00204 	addi	sp,sp,8
81107c30:	f800283a 	ret

81107c34 <Pattern_Generator_Status>:

	alt_u32 Pattern_Generator_Status(void){
81107c34:	defffc04 	addi	sp,sp,-16
81107c38:	dfc00315 	stw	ra,12(sp)
81107c3c:	df000215 	stw	fp,8(sp)
81107c40:	df000204 	addi	fp,sp,8

		const alt_u32 ul_pgen_mask = PGEN_RESETED_STATUS_BIT_MASK | PGEN_STOPPED_STATUS_BIT_MASK;
81107c44:	008000c4 	movi	r2,3
81107c48:	e0bffe15 	stw	r2,-8(fp)
		alt_u32 ul_pgen_status_value = PGEN_READ_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS) & ul_pgen_mask;
81107c4c:	0009883a 	mov	r4,zero
81107c50:	1107a9c0 	call	81107a9c <PGEN_READ_REG32>
81107c54:	1007883a 	mov	r3,r2
81107c58:	e0bffe17 	ldw	r2,-8(fp)
81107c5c:	1884703a 	and	r2,r3,r2
81107c60:	e0bfff15 	stw	r2,-4(fp)

		return ul_pgen_status_value;
81107c64:	e0bfff17 	ldw	r2,-4(fp)
	}
81107c68:	e037883a 	mov	sp,fp
81107c6c:	dfc00117 	ldw	ra,4(sp)
81107c70:	df000017 	ldw	fp,0(sp)
81107c74:	dec00204 	addi	sp,sp,8
81107c78:	f800283a 	ret

81107c7c <Pattern_Generator_Configure_Initial_State>:

	bool Pattern_Generator_Configure_Initial_State(alt_u8 uc_Initial_CCD_ID, alt_u8 uc_Initial_CCD_SIDE, alt_u8 uc_Initial_TimeCode){
81107c7c:	defff904 	addi	sp,sp,-28
81107c80:	dfc00615 	stw	ra,24(sp)
81107c84:	df000515 	stw	fp,20(sp)
81107c88:	df000504 	addi	fp,sp,20
81107c8c:	2807883a 	mov	r3,r5
81107c90:	3005883a 	mov	r2,r6
81107c94:	e13ffd05 	stb	r4,-12(fp)
81107c98:	e0fffe05 	stb	r3,-8(fp)
81107c9c:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81107ca0:	e03ffb15 	stw	zero,-20(fp)

		alt_u32 initial_state_config_value;
		if ((uc_Initial_CCD_ID < 4) && (uc_Initial_CCD_SIDE < 2)) {
81107ca4:	e0bffd03 	ldbu	r2,-12(fp)
81107ca8:	10800128 	cmpgeui	r2,r2,4
81107cac:	1000101e 	bne	r2,zero,81107cf0 <Pattern_Generator_Configure_Initial_State+0x74>
81107cb0:	e0bffe03 	ldbu	r2,-8(fp)
81107cb4:	108000a8 	cmpgeui	r2,r2,2
81107cb8:	10000d1e 	bne	r2,zero,81107cf0 <Pattern_Generator_Configure_Initial_State+0x74>
			initial_state_config_value = (((alt_u32)uc_Initial_CCD_ID) << 9) | (((alt_u32)uc_Initial_CCD_SIDE) << 8) | ((alt_u32)uc_Initial_TimeCode);
81107cbc:	e0bffd03 	ldbu	r2,-12(fp)
81107cc0:	1006927a 	slli	r3,r2,9
81107cc4:	e0bffe03 	ldbu	r2,-8(fp)
81107cc8:	1004923a 	slli	r2,r2,8
81107ccc:	1886b03a 	or	r3,r3,r2
81107cd0:	e0bfff03 	ldbu	r2,-4(fp)
81107cd4:	1884b03a 	or	r2,r3,r2
81107cd8:	e0bffc15 	stw	r2,-16(fp)
			PGEN_WRITE_REG32(PGEN_INITIAL_TRANSMISSION_STATE_REGISTER_ADDRESS, initial_state_config_value);
81107cdc:	e17ffc17 	ldw	r5,-16(fp)
81107ce0:	01000044 	movi	r4,1
81107ce4:	1107a4c0 	call	81107a4c <PGEN_WRITE_REG32>
			bSuccess = TRUE;
81107ce8:	00800044 	movi	r2,1
81107cec:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81107cf0:	e0bffb17 	ldw	r2,-20(fp)
	}
81107cf4:	e037883a 	mov	sp,fp
81107cf8:	dfc00117 	ldw	ra,4(sp)
81107cfc:	df000017 	ldw	fp,0(sp)
81107d00:	dec00204 	addi	sp,sp,8
81107d04:	f800283a 	ret

81107d08 <POWER_Read>:
#include "sense.h"

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]){
81107d08:	deffef04 	addi	sp,sp,-68
81107d0c:	dfc01015 	stw	ra,64(sp)
81107d10:	df000f15 	stw	fp,60(sp)
81107d14:	df000f04 	addi	fp,sp,60
81107d18:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
81107d1c:	00800044 	movi	r2,1
81107d20:	e0bff315 	stw	r2,-52(fp)
    int i,c, nPortIndex=0;
81107d24:	e03ff615 	stw	zero,-40(fp)
    int szPortNum[] = {POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM};
81107d28:	00800204 	movi	r2,8
81107d2c:	e0bffc15 	stw	r2,-16(fp)
81107d30:	00800104 	movi	r2,4
81107d34:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
81107d38:	00800044 	movi	r2,1
81107d3c:	e0bff715 	stw	r2,-36(fp)
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
81107d40:	00800044 	movi	r2,1
81107d44:	e0bff815 	stw	r2,-32(fp)
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
81107d48:	e03ff915 	stw	zero,-28(fp)
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81107d4c:	e03ff515 	stw	zero,-44(fp)
81107d50:	00007106 	br	81107f18 <POWER_Read+0x210>
        NextChannel = 0;
81107d54:	e03ffa05 	stb	zero,-24(fp)
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81107d58:	e0bff517 	ldw	r2,-44(fp)
81107d5c:	10c03fcc 	andi	r3,r2,255
81107d60:	e13ffa03 	ldbu	r4,-24(fp)
81107d64:	e0bfff17 	ldw	r2,-4(fp)
81107d68:	d8800115 	stw	r2,4(sp)
81107d6c:	e0bff917 	ldw	r2,-28(fp)
81107d70:	d8800015 	stw	r2,0(sp)
81107d74:	e1fff817 	ldw	r7,-32(fp)
81107d78:	e1bff717 	ldw	r6,-36(fp)
81107d7c:	200b883a 	mov	r5,r4
81107d80:	1809883a 	mov	r4,r3
81107d84:	1102d880 	call	81102d88 <POWER_SPI_RW>
81107d88:	e0bff315 	stw	r2,-52(fp)
        for(i=0;i<szPortNum[c] && bSuccess;i++){
81107d8c:	e03ff415 	stw	zero,-48(fp)
81107d90:	00005306 	br	81107ee0 <POWER_Read+0x1d8>
            NextChannel = i + 1;
81107d94:	e0bff417 	ldw	r2,-48(fp)
81107d98:	10800044 	addi	r2,r2,1
81107d9c:	e0bffa05 	stb	r2,-24(fp)
            bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81107da0:	e0bff517 	ldw	r2,-44(fp)
81107da4:	10c03fcc 	andi	r3,r2,255
81107da8:	e13ffa03 	ldbu	r4,-24(fp)
81107dac:	e0bffe04 	addi	r2,fp,-8
81107db0:	d8800115 	stw	r2,4(sp)
81107db4:	e0bff917 	ldw	r2,-28(fp)
81107db8:	d8800015 	stw	r2,0(sp)
81107dbc:	e1fff817 	ldw	r7,-32(fp)
81107dc0:	e1bff717 	ldw	r6,-36(fp)
81107dc4:	200b883a 	mov	r5,r4
81107dc8:	1809883a 	mov	r4,r3
81107dcc:	1102d880 	call	81102d88 <POWER_SPI_RW>
81107dd0:	e0bff315 	stw	r2,-52(fp)
            if (bSuccess){
81107dd4:	e0bff317 	ldw	r2,-52(fp)
81107dd8:	10003b26 	beq	r2,zero,81107ec8 <POWER_Read+0x1c0>
                HEAD = (Value32 >> 30) & 0x03;
81107ddc:	e0bffe17 	ldw	r2,-8(fp)
81107de0:	1004d7ba 	srli	r2,r2,30
81107de4:	e0bffa45 	stb	r2,-23(fp)
                Channel = (Value32 >> 1) & 0x07;
81107de8:	e0bffe17 	ldw	r2,-8(fp)
81107dec:	1004d07a 	srli	r2,r2,1
81107df0:	108001cc 	andi	r2,r2,7
81107df4:	e0bffa85 	stb	r2,-22(fp)
                SIGN = (Value32 >> 4 ) & 0x01;
81107df8:	e0bffe17 	ldw	r2,-8(fp)
81107dfc:	1004d13a 	srli	r2,r2,4
81107e00:	1080004c 	andi	r2,r2,1
81107e04:	e0bffac5 	stb	r2,-21(fp)
                SGL = (Value32 >> 5 ) & 0x01;
81107e08:	e0bffe17 	ldw	r2,-8(fp)
81107e0c:	1004d17a 	srli	r2,r2,5
81107e10:	1080004c 	andi	r2,r2,1
81107e14:	e0bffb05 	stb	r2,-20(fp)
                PARITY = Value32 & 0x01;
81107e18:	e0bffe17 	ldw	r2,-8(fp)
81107e1c:	1080004c 	andi	r2,r2,1
81107e20:	e0bffb45 	stb	r2,-19(fp)
                if (HEAD != 0){
81107e24:	e0bffa43 	ldbu	r2,-23(fp)
81107e28:	10000626 	beq	r2,zero,81107e44 <POWER_Read+0x13c>
                    printf("[%d]Unexpected HEAD\r\n",i);
81107e2c:	e17ff417 	ldw	r5,-48(fp)
81107e30:	012044b4 	movhi	r4,33042
81107e34:	21377304 	addi	r4,r4,-8756
81107e38:	110ba640 	call	8110ba64 <printf>
                    bSuccess = FALSE;
81107e3c:	e03ff315 	stw	zero,-52(fp)
81107e40:	00001406 	br	81107e94 <POWER_Read+0x18c>
                }else if (Channel != i){
81107e44:	e0fffa83 	ldbu	r3,-22(fp)
81107e48:	e0bff417 	ldw	r2,-48(fp)
81107e4c:	18800926 	beq	r3,r2,81107e74 <POWER_Read+0x16c>
                    printf("[%d]Unexpected Channel. Expected:%d, Read:%d\r\n", i, i, Channel);
81107e50:	e0bffa83 	ldbu	r2,-22(fp)
81107e54:	100f883a 	mov	r7,r2
81107e58:	e1bff417 	ldw	r6,-48(fp)
81107e5c:	e17ff417 	ldw	r5,-48(fp)
81107e60:	012044b4 	movhi	r4,33042
81107e64:	21377904 	addi	r4,r4,-8732
81107e68:	110ba640 	call	8110ba64 <printf>
                    bSuccess = FALSE;
81107e6c:	e03ff315 	stw	zero,-52(fp)
81107e70:	00000806 	br	81107e94 <POWER_Read+0x18c>
                }else if (SIGN ^ bSIGN){
81107e74:	e0fffac3 	ldbu	r3,-21(fp)
81107e78:	e0bff817 	ldw	r2,-32(fp)
81107e7c:	18800526 	beq	r3,r2,81107e94 <POWER_Read+0x18c>
                    printf("[%d]Unexpected SIGN\r\n",i);
81107e80:	e17ff417 	ldw	r5,-48(fp)
81107e84:	012044b4 	movhi	r4,33042
81107e88:	21378504 	addi	r4,r4,-8684
81107e8c:	110ba640 	call	8110ba64 <printf>
                    bSuccess = FALSE;
81107e90:	e03ff315 	stw	zero,-52(fp)
                }else if (SGL ^ SGL){
                    printf("[%d]Unexpected SGL\r\n",i);
                    bSuccess = FALSE;
                }
                if (bSuccess)
81107e94:	e0bff317 	ldw	r2,-52(fp)
81107e98:	10000e26 	beq	r2,zero,81107ed4 <POWER_Read+0x1cc>
                    szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81107e9c:	e0bff617 	ldw	r2,-40(fp)
81107ea0:	10c00044 	addi	r3,r2,1
81107ea4:	e0fff615 	stw	r3,-40(fp)
81107ea8:	1085883a 	add	r2,r2,r2
81107eac:	1085883a 	add	r2,r2,r2
81107eb0:	1007883a 	mov	r3,r2
81107eb4:	e0bfff17 	ldw	r2,-4(fp)
81107eb8:	10c5883a 	add	r2,r2,r3
81107ebc:	e0fffe17 	ldw	r3,-8(fp)
81107ec0:	10c00015 	stw	r3,0(r2)
81107ec4:	00000306 	br	81107ed4 <POWER_Read+0x1cc>
            }else{
                printf("SPI Read Error\r\n");
81107ec8:	012044b4 	movhi	r4,33042
81107ecc:	21378b04 	addi	r4,r4,-8660
81107ed0:	110bb800 	call	8110bb80 <puts>
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
        NextChannel = 0;
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
        for(i=0;i<szPortNum[c] && bSuccess;i++){
81107ed4:	e0bff417 	ldw	r2,-48(fp)
81107ed8:	10800044 	addi	r2,r2,1
81107edc:	e0bff415 	stw	r2,-48(fp)
81107ee0:	e0bff517 	ldw	r2,-44(fp)
81107ee4:	1085883a 	add	r2,r2,r2
81107ee8:	1085883a 	add	r2,r2,r2
81107eec:	e0fff304 	addi	r3,fp,-52
81107ef0:	1885883a 	add	r2,r3,r2
81107ef4:	10800904 	addi	r2,r2,36
81107ef8:	10800017 	ldw	r2,0(r2)
81107efc:	e0fff417 	ldw	r3,-48(fp)
81107f00:	1880020e 	bge	r3,r2,81107f0c <POWER_Read+0x204>
81107f04:	e0bff317 	ldw	r2,-52(fp)
81107f08:	103fa21e 	bne	r2,zero,81107d94 <__reset+0xfb0e7d94>
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81107f0c:	e0bff517 	ldw	r2,-44(fp)
81107f10:	10800044 	addi	r2,r2,1
81107f14:	e0bff515 	stw	r2,-44(fp)
81107f18:	e0bff517 	ldw	r2,-44(fp)
81107f1c:	10800088 	cmpgei	r2,r2,2
81107f20:	1000021e 	bne	r2,zero,81107f2c <POWER_Read+0x224>
81107f24:	e0bff317 	ldw	r2,-52(fp)
81107f28:	103f8a1e 	bne	r2,zero,81107d54 <__reset+0xfb0e7d54>
            }else{
                printf("SPI Read Error\r\n");
            }
        } // for i
    } // for c
    return bSuccess;
81107f2c:	e0bff317 	ldw	r2,-52(fp)
 }
81107f30:	e037883a 	mov	sp,fp
81107f34:	dfc00117 	ldw	ra,4(sp)
81107f38:	df000017 	ldw	fp,0(sp)
81107f3c:	dec00204 	addi	sp,sp,8
81107f40:	f800283a 	ret

81107f44 <TEMP_Read>:

 bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp){
81107f44:	defff904 	addi	sp,sp,-28
81107f48:	dfc00615 	stw	ra,24(sp)
81107f4c:	df000515 	stw	fp,20(sp)
81107f50:	df000504 	addi	fp,sp,20
81107f54:	e13ffe15 	stw	r4,-8(fp)
81107f58:	e17fff15 	stw	r5,-4(fp)
        bool bSuccess;
        const alt_u8 DeviceAddr = 0x30;
81107f5c:	00800c04 	movi	r2,48
81107f60:	e0bffd85 	stb	r2,-10(fp)
        alt_8 FpgaTemp, BoardTemp;
        char Data;

        // read local temp
        bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00, &Data);
81107f64:	e0bffd83 	ldbu	r2,-10(fp)
81107f68:	10c03fcc 	andi	r3,r2,255
81107f6c:	18c0201c 	xori	r3,r3,128
81107f70:	18ffe004 	addi	r3,r3,-128
81107f74:	e0bffdc4 	addi	r2,fp,-9
81107f78:	d8800015 	stw	r2,0(sp)
81107f7c:	000f883a 	mov	r7,zero
81107f80:	180d883a 	mov	r6,r3
81107f84:	01600034 	movhi	r5,32768
81107f88:	29425004 	addi	r5,r5,2368
81107f8c:	01200034 	movhi	r4,32768
81107f90:	21025404 	addi	r4,r4,2384
81107f94:	1101d480 	call	81101d48 <I2C_Read>
81107f98:	e0bffc15 	stw	r2,-16(fp)
        if (bSuccess)
81107f9c:	e0bffc17 	ldw	r2,-16(fp)
81107fa0:	10000226 	beq	r2,zero,81107fac <TEMP_Read+0x68>
            BoardTemp = Data;
81107fa4:	e0bffdc3 	ldbu	r2,-9(fp)
81107fa8:	e0bffd45 	stb	r2,-11(fp)

        // read remote temp
        if (bSuccess){
81107fac:	e0bffc17 	ldw	r2,-16(fp)
81107fb0:	10001226 	beq	r2,zero,81107ffc <TEMP_Read+0xb8>
            bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01, &Data);
81107fb4:	e0bffd83 	ldbu	r2,-10(fp)
81107fb8:	10c03fcc 	andi	r3,r2,255
81107fbc:	18c0201c 	xori	r3,r3,128
81107fc0:	18ffe004 	addi	r3,r3,-128
81107fc4:	e0bffdc4 	addi	r2,fp,-9
81107fc8:	d8800015 	stw	r2,0(sp)
81107fcc:	01c00044 	movi	r7,1
81107fd0:	180d883a 	mov	r6,r3
81107fd4:	01600034 	movhi	r5,32768
81107fd8:	29425004 	addi	r5,r5,2368
81107fdc:	01200034 	movhi	r4,32768
81107fe0:	21025404 	addi	r4,r4,2384
81107fe4:	1101d480 	call	81101d48 <I2C_Read>
81107fe8:	e0bffc15 	stw	r2,-16(fp)
            if (bSuccess)
81107fec:	e0bffc17 	ldw	r2,-16(fp)
81107ff0:	10000226 	beq	r2,zero,81107ffc <TEMP_Read+0xb8>
                FpgaTemp = Data;
81107ff4:	e0bffdc3 	ldbu	r2,-9(fp)
81107ff8:	e0bffd05 	stb	r2,-12(fp)
        }
        //
        if (bSuccess){
81107ffc:	e0bffc17 	ldw	r2,-16(fp)
81108000:	10000626 	beq	r2,zero,8110801c <TEMP_Read+0xd8>
           *pFpgaTemp = FpgaTemp;
81108004:	e0bffe17 	ldw	r2,-8(fp)
81108008:	e0fffd03 	ldbu	r3,-12(fp)
8110800c:	10c00005 	stb	r3,0(r2)
           *pBoardTemp = BoardTemp;
81108010:	e0bfff17 	ldw	r2,-4(fp)
81108014:	e0fffd43 	ldbu	r3,-11(fp)
81108018:	10c00005 	stb	r3,0(r2)
        }

        return bSuccess;
8110801c:	e0bffc17 	ldw	r2,-16(fp)
 }
81108020:	e037883a 	mov	sp,fp
81108024:	dfc00117 	ldw	ra,4(sp)
81108028:	df000017 	ldw	fp,0(sp)
8110802c:	dec00204 	addi	sp,sp,8
81108030:	f800283a 	ret

81108034 <sense_log_temp>:


 bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp){
81108034:	defffb04 	addi	sp,sp,-20
81108038:	dfc00415 	stw	ra,16(sp)
8110803c:	df000315 	stw	fp,12(sp)
81108040:	df000304 	addi	fp,sp,12
81108044:	e13ffe15 	stw	r4,-8(fp)
81108048:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	 // show temp
	 bSuccess = TEMP_Read(FpgaTemp, BoardTemp);
8110804c:	e17fff17 	ldw	r5,-4(fp)
81108050:	e13ffe17 	ldw	r4,-8(fp)
81108054:	1107f440 	call	81107f44 <TEMP_Read>
81108058:	e0bffd15 	stw	r2,-12(fp)

	 return(bSuccess);
8110805c:	e0bffd17 	ldw	r2,-12(fp)
 }
81108060:	e037883a 	mov	sp,fp
81108064:	dfc00117 	ldw	ra,4(sp)
81108068:	df000017 	ldw	fp,0(sp)
8110806c:	dec00204 	addi	sp,sp,8
81108070:	f800283a 	ret

81108074 <sense_log>:


 void sense_log(void){
81108074:	deff0504 	addi	sp,sp,-1004
81108078:	dfc0fa15 	stw	ra,1000(sp)
8110807c:	df00f915 	stw	fp,996(sp)
81108080:	dd40f815 	stw	r21,992(sp)
81108084:	dd00f715 	stw	r20,988(sp)
81108088:	dcc0f615 	stw	r19,984(sp)
8110808c:	dc80f515 	stw	r18,980(sp)
81108090:	dc40f415 	stw	r17,976(sp)
81108094:	dc00f315 	stw	r16,972(sp)
81108098:	df00f904 	addi	fp,sp,996
 	  bool bSuccess;
 	    int i;
 	    const float fRef = 5.0; // 5.0V
8110809c:	00902834 	movhi	r2,16544
811080a0:	e0bf0e15 	stw	r2,-968(fp)
 	    float fVolDrop, fCurrent, fPower, fVol;
 	    alt_u32 szVol[POWER_PORT_NUM];
 	    alt_u32 SIG, MSB, RESULT;
 	    float szRes[] = {0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003};
811080a4:	008ed174 	movhi	r2,15173
811080a8:	10a6e984 	addi	r2,r2,-25690
811080ac:	e0bf2215 	stw	r2,-888(fp)
811080b0:	008ea0f4 	movhi	r2,14979
811080b4:	10849bc4 	addi	r2,r2,4719
811080b8:	e0bf2315 	stw	r2,-884(fp)
811080bc:	008ed174 	movhi	r2,15173
811080c0:	10a6e984 	addi	r2,r2,-25690
811080c4:	e0bf2415 	stw	r2,-880(fp)
811080c8:	008ed174 	movhi	r2,15173
811080cc:	10a6e984 	addi	r2,r2,-25690
811080d0:	e0bf2515 	stw	r2,-876(fp)
811080d4:	008ed174 	movhi	r2,15173
811080d8:	10a6e984 	addi	r2,r2,-25690
811080dc:	e0bf2615 	stw	r2,-872(fp)
811080e0:	008ed174 	movhi	r2,15173
811080e4:	10a6e984 	addi	r2,r2,-25690
811080e8:	e0bf2715 	stw	r2,-868(fp)
811080ec:	008ed174 	movhi	r2,15173
811080f0:	10a6e984 	addi	r2,r2,-25690
811080f4:	e0bf2815 	stw	r2,-864(fp)
811080f8:	008ed174 	movhi	r2,15173
811080fc:	10a6e984 	addi	r2,r2,-25690
81108100:	e0bf2915 	stw	r2,-860(fp)
81108104:	008ed174 	movhi	r2,15173
81108108:	10a6e984 	addi	r2,r2,-25690
8110810c:	e0bf2a15 	stw	r2,-856(fp)
81108110:	008ed174 	movhi	r2,15173
81108114:	10a6e984 	addi	r2,r2,-25690
81108118:	e0bf2b15 	stw	r2,-852(fp)
8110811c:	008ed174 	movhi	r2,15173
81108120:	10a6e984 	addi	r2,r2,-25690
81108124:	e0bf2c15 	stw	r2,-848(fp)
81108128:	008ed174 	movhi	r2,15173
8110812c:	10a6e984 	addi	r2,r2,-25690
81108130:	e0bf2d15 	stw	r2,-844(fp)
 	    float szRefVol[] = {0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3, 2.5};
81108134:	008fd9b4 	movhi	r2,16230
81108138:	10999984 	addi	r2,r2,26214
8110813c:	e0bf2e15 	stw	r2,-840(fp)
81108140:	008fd9b4 	movhi	r2,16230
81108144:	10999984 	addi	r2,r2,26214
81108148:	e0bf2f15 	stw	r2,-836(fp)
8110814c:	00901034 	movhi	r2,16448
81108150:	e0bf3015 	stw	r2,-832(fp)
81108154:	008fd9b4 	movhi	r2,16230
81108158:	10999984 	addi	r2,r2,26214
8110815c:	e0bf3115 	stw	r2,-828(fp)
81108160:	008ff9b4 	movhi	r2,16358
81108164:	10999984 	addi	r2,r2,26214
81108168:	e0bf3215 	stw	r2,-824(fp)
8110816c:	00900834 	movhi	r2,16416
81108170:	e0bf3315 	stw	r2,-820(fp)
81108174:	008ff9b4 	movhi	r2,16358
81108178:	10999984 	addi	r2,r2,26214
8110817c:	e0bf3415 	stw	r2,-816(fp)
81108180:	00900834 	movhi	r2,16416
81108184:	e0bf3515 	stw	r2,-812(fp)
81108188:	008fe374 	movhi	r2,16269
8110818c:	10b33344 	addi	r2,r2,-13107
81108190:	e0bf3615 	stw	r2,-808(fp)
81108194:	008fecf4 	movhi	r2,16307
81108198:	108cccc4 	addi	r2,r2,13107
8110819c:	e0bf3715 	stw	r2,-804(fp)
811081a0:	009014f4 	movhi	r2,16467
811081a4:	108cccc4 	addi	r2,r2,13107
811081a8:	e0bf3815 	stw	r2,-800(fp)
811081ac:	00900834 	movhi	r2,16416
811081b0:	e0bf3915 	stw	r2,-796(fp)
 	    char szName[][64] = {
811081b4:	00a044b4 	movhi	r2,33042
811081b8:	10b7c3c4 	addi	r2,r2,-8433
811081bc:	e0ff3a04 	addi	r3,fp,-792
811081c0:	1009883a 	mov	r4,r2
811081c4:	0080c004 	movi	r2,768
811081c8:	100d883a 	mov	r6,r2
811081cc:	200b883a 	mov	r5,r4
811081d0:	1809883a 	mov	r4,r3
811081d4:	110b8ec0 	call	8110b8ec <memcpy>
 	        "VCC3P3_HSMC",
 	        "HSMB_VCCIO",
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
811081d8:	e0bf1604 	addi	r2,fp,-936
811081dc:	1009883a 	mov	r4,r2
811081e0:	1107d080 	call	81107d08 <POWER_Read>
811081e4:	e0bf0f15 	stw	r2,-964(fp)
 	        if (bSuccess){
811081e8:	e0bf0f17 	ldw	r2,-964(fp)
811081ec:	10013b26 	beq	r2,zero,811086dc <sense_log+0x668>
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
811081f0:	e03f0c15 	stw	zero,-976(fp)
811081f4:	00013006 	br	811086b8 <sense_log+0x644>
 	                SIG = (szVol[i] >> 29) & 0x01;
811081f8:	e0bf0c17 	ldw	r2,-976(fp)
811081fc:	1085883a 	add	r2,r2,r2
81108200:	1085883a 	add	r2,r2,r2
81108204:	e0ff0c04 	addi	r3,fp,-976
81108208:	1885883a 	add	r2,r3,r2
8110820c:	10800a04 	addi	r2,r2,40
81108210:	10800017 	ldw	r2,0(r2)
81108214:	1004d77a 	srli	r2,r2,29
81108218:	1080004c 	andi	r2,r2,1
8110821c:	e0bf1015 	stw	r2,-960(fp)
 	                MSB = (szVol[i] >> 28) & 0x01;
81108220:	e0bf0c17 	ldw	r2,-976(fp)
81108224:	1085883a 	add	r2,r2,r2
81108228:	1085883a 	add	r2,r2,r2
8110822c:	e0ff0c04 	addi	r3,fp,-976
81108230:	1885883a 	add	r2,r3,r2
81108234:	10800a04 	addi	r2,r2,40
81108238:	10800017 	ldw	r2,0(r2)
8110823c:	1004d73a 	srli	r2,r2,28
81108240:	1080004c 	andi	r2,r2,1
81108244:	e0bf1115 	stw	r2,-956(fp)
 	                RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
81108248:	e0bf0c17 	ldw	r2,-976(fp)
8110824c:	1085883a 	add	r2,r2,r2
81108250:	1085883a 	add	r2,r2,r2
81108254:	e0ff0c04 	addi	r3,fp,-976
81108258:	1885883a 	add	r2,r3,r2
8110825c:	10800a04 	addi	r2,r2,40
81108260:	10800017 	ldw	r2,0(r2)
81108264:	1006d1ba 	srli	r3,r2,6
81108268:	00801034 	movhi	r2,64
8110826c:	10bfffc4 	addi	r2,r2,-1
81108270:	1884703a 	and	r2,r3,r2
81108274:	e0bf1215 	stw	r2,-952(fp)
 	                if (MSB == 0)
81108278:	e0bf1117 	ldw	r2,-956(fp)
8110827c:	1000091e 	bne	r2,zero,811082a4 <sense_log+0x230>
 	                    fVolDrop = (float)(RESULT)/(float)0x400000;
81108280:	e13f1217 	ldw	r4,-952(fp)
81108284:	110acd00 	call	8110acd0 <__floatunsisf>
81108288:	1007883a 	mov	r3,r2
8110828c:	0152a034 	movhi	r5,19072
81108290:	1809883a 	mov	r4,r3
81108294:	110a3700 	call	8110a370 <__divsf3>
81108298:	1007883a 	mov	r3,r2
8110829c:	e0ff0d15 	stw	r3,-972(fp)
811082a0:	00000106 	br	811082a8 <sense_log+0x234>
 	                else
 	                    fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
811082a4:	e03f0d15 	stw	zero,-972(fp)
 	                if (SIG && MSB){
811082a8:	e0bf1017 	ldw	r2,-960(fp)
811082ac:	10001f26 	beq	r2,zero,8110832c <sense_log+0x2b8>
811082b0:	e0bf1117 	ldw	r2,-956(fp)
811082b4:	10001d26 	beq	r2,zero,8110832c <sense_log+0x2b8>
 	                    fVol = fRef*0.5;
811082b8:	014fc034 	movhi	r5,16128
811082bc:	e13f0e17 	ldw	r4,-968(fp)
811082c0:	110a7b00 	call	8110a7b0 <__mulsf3>
811082c4:	1007883a 	mov	r3,r2
811082c8:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
811082cc:	e0ff3a04 	addi	r3,fp,-792
811082d0:	e0bf0c17 	ldw	r2,-976(fp)
811082d4:	100491ba 	slli	r2,r2,6
811082d8:	18a1883a 	add	r16,r3,r2
811082dc:	e0bf0c17 	ldw	r2,-976(fp)
811082e0:	1085883a 	add	r2,r2,r2
811082e4:	1085883a 	add	r2,r2,r2
811082e8:	e0ff0c04 	addi	r3,fp,-976
811082ec:	1885883a 	add	r2,r3,r2
811082f0:	10800a04 	addi	r2,r2,40
811082f4:	10800017 	ldw	r2,0(r2)
811082f8:	1023883a 	mov	r17,r2
811082fc:	e13f1317 	ldw	r4,-948(fp)
81108300:	110b4d80 	call	8110b4d8 <__extendsfdf2>
81108304:	1009883a 	mov	r4,r2
81108308:	180b883a 	mov	r5,r3
8110830c:	d9400015 	stw	r5,0(sp)
81108310:	200f883a 	mov	r7,r4
81108314:	880d883a 	mov	r6,r17
81108318:	800b883a 	mov	r5,r16
8110831c:	012044b4 	movhi	r4,33042
81108320:	21378f04 	addi	r4,r4,-8644
81108324:	110ba640 	call	8110ba64 <printf>
81108328:	0000e006 	br	811086ac <sense_log+0x638>
 	                }else if (SIG && !MSB){
8110832c:	e0bf1017 	ldw	r2,-960(fp)
81108330:	10005d26 	beq	r2,zero,811084a8 <sense_log+0x434>
81108334:	e0bf1117 	ldw	r2,-956(fp)
81108338:	10005b1e 	bne	r2,zero,811084a8 <sense_log+0x434>
 	                    fVol = fRef*0.5*fVolDrop;
8110833c:	e13f0e17 	ldw	r4,-968(fp)
81108340:	110b4d80 	call	8110b4d8 <__extendsfdf2>
81108344:	1011883a 	mov	r8,r2
81108348:	1813883a 	mov	r9,r3
8110834c:	000d883a 	mov	r6,zero
81108350:	01cff834 	movhi	r7,16352
81108354:	4009883a 	mov	r4,r8
81108358:	480b883a 	mov	r5,r9
8110835c:	110adc00 	call	8110adc0 <__muldf3>
81108360:	1009883a 	mov	r4,r2
81108364:	180b883a 	mov	r5,r3
81108368:	2021883a 	mov	r16,r4
8110836c:	2823883a 	mov	r17,r5
81108370:	e13f0d17 	ldw	r4,-972(fp)
81108374:	110b4d80 	call	8110b4d8 <__extendsfdf2>
81108378:	1009883a 	mov	r4,r2
8110837c:	180b883a 	mov	r5,r3
81108380:	200d883a 	mov	r6,r4
81108384:	280f883a 	mov	r7,r5
81108388:	8009883a 	mov	r4,r16
8110838c:	880b883a 	mov	r5,r17
81108390:	110adc00 	call	8110adc0 <__muldf3>
81108394:	1009883a 	mov	r4,r2
81108398:	180b883a 	mov	r5,r3
8110839c:	2005883a 	mov	r2,r4
811083a0:	2807883a 	mov	r3,r5
811083a4:	1009883a 	mov	r4,r2
811083a8:	180b883a 	mov	r5,r3
811083ac:	110b5e80 	call	8110b5e8 <__truncdfsf2>
811083b0:	1007883a 	mov	r3,r2
811083b4:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
811083b8:	e0bf0c17 	ldw	r2,-976(fp)
811083bc:	1085883a 	add	r2,r2,r2
811083c0:	1085883a 	add	r2,r2,r2
811083c4:	e0ff0c04 	addi	r3,fp,-976
811083c8:	1885883a 	add	r2,r3,r2
811083cc:	10801604 	addi	r2,r2,88
811083d0:	10c00017 	ldw	r3,0(r2)
811083d4:	180b883a 	mov	r5,r3
811083d8:	e13f0d17 	ldw	r4,-972(fp)
811083dc:	110a3700 	call	8110a370 <__divsf3>
811083e0:	1007883a 	mov	r3,r2
811083e4:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
811083e8:	e0bf0c17 	ldw	r2,-976(fp)
811083ec:	1085883a 	add	r2,r2,r2
811083f0:	1085883a 	add	r2,r2,r2
811083f4:	e0ff0c04 	addi	r3,fp,-976
811083f8:	1885883a 	add	r2,r3,r2
811083fc:	10802204 	addi	r2,r2,136
81108400:	10c00017 	ldw	r3,0(r2)
81108404:	e17f1417 	ldw	r5,-944(fp)
81108408:	1809883a 	mov	r4,r3
8110840c:	110a7b00 	call	8110a7b0 <__mulsf3>
81108410:	1007883a 	mov	r3,r2
81108414:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
81108418:	e0ff3a04 	addi	r3,fp,-792
8110841c:	e0bf0c17 	ldw	r2,-976(fp)
81108420:	100491ba 	slli	r2,r2,6
81108424:	18a9883a 	add	r20,r3,r2
81108428:	e0bf0c17 	ldw	r2,-976(fp)
8110842c:	1085883a 	add	r2,r2,r2
81108430:	1085883a 	add	r2,r2,r2
81108434:	e0ff0c04 	addi	r3,fp,-976
81108438:	1885883a 	add	r2,r3,r2
8110843c:	10800a04 	addi	r2,r2,40
81108440:	10800017 	ldw	r2,0(r2)
81108444:	102b883a 	mov	r21,r2
81108448:	e13f0d17 	ldw	r4,-972(fp)
8110844c:	110b4d80 	call	8110b4d8 <__extendsfdf2>
81108450:	1025883a 	mov	r18,r2
81108454:	1827883a 	mov	r19,r3
81108458:	e13f1417 	ldw	r4,-944(fp)
8110845c:	110b4d80 	call	8110b4d8 <__extendsfdf2>
81108460:	1021883a 	mov	r16,r2
81108464:	1823883a 	mov	r17,r3
81108468:	e13f1517 	ldw	r4,-940(fp)
8110846c:	110b4d80 	call	8110b4d8 <__extendsfdf2>
81108470:	1009883a 	mov	r4,r2
81108474:	180b883a 	mov	r5,r3
81108478:	d9000315 	stw	r4,12(sp)
8110847c:	d9400415 	stw	r5,16(sp)
81108480:	dc000115 	stw	r16,4(sp)
81108484:	dc400215 	stw	r17,8(sp)
81108488:	dcc00015 	stw	r19,0(sp)
8110848c:	900f883a 	mov	r7,r18
81108490:	a80d883a 	mov	r6,r21
81108494:	a00b883a 	mov	r5,r20
81108498:	012044b4 	movhi	r4,33042
8110849c:	21379804 	addi	r4,r4,-8608
811084a0:	110ba640 	call	8110ba64 <printf>
811084a4:	00008106 	br	811086ac <sense_log+0x638>
 	                }else if (!SIG && MSB){
811084a8:	e0bf1017 	ldw	r2,-960(fp)
811084ac:	10005d1e 	bne	r2,zero,81108624 <sense_log+0x5b0>
811084b0:	e0bf1117 	ldw	r2,-956(fp)
811084b4:	10005b26 	beq	r2,zero,81108624 <sense_log+0x5b0>
 	                    fVol = fRef*0.5*fVolDrop;
811084b8:	e13f0e17 	ldw	r4,-968(fp)
811084bc:	110b4d80 	call	8110b4d8 <__extendsfdf2>
811084c0:	1011883a 	mov	r8,r2
811084c4:	1813883a 	mov	r9,r3
811084c8:	000d883a 	mov	r6,zero
811084cc:	01cff834 	movhi	r7,16352
811084d0:	4009883a 	mov	r4,r8
811084d4:	480b883a 	mov	r5,r9
811084d8:	110adc00 	call	8110adc0 <__muldf3>
811084dc:	1009883a 	mov	r4,r2
811084e0:	180b883a 	mov	r5,r3
811084e4:	2021883a 	mov	r16,r4
811084e8:	2823883a 	mov	r17,r5
811084ec:	e13f0d17 	ldw	r4,-972(fp)
811084f0:	110b4d80 	call	8110b4d8 <__extendsfdf2>
811084f4:	1009883a 	mov	r4,r2
811084f8:	180b883a 	mov	r5,r3
811084fc:	200d883a 	mov	r6,r4
81108500:	280f883a 	mov	r7,r5
81108504:	8009883a 	mov	r4,r16
81108508:	880b883a 	mov	r5,r17
8110850c:	110adc00 	call	8110adc0 <__muldf3>
81108510:	1009883a 	mov	r4,r2
81108514:	180b883a 	mov	r5,r3
81108518:	2005883a 	mov	r2,r4
8110851c:	2807883a 	mov	r3,r5
81108520:	1009883a 	mov	r4,r2
81108524:	180b883a 	mov	r5,r3
81108528:	110b5e80 	call	8110b5e8 <__truncdfsf2>
8110852c:	1007883a 	mov	r3,r2
81108530:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
81108534:	e0bf0c17 	ldw	r2,-976(fp)
81108538:	1085883a 	add	r2,r2,r2
8110853c:	1085883a 	add	r2,r2,r2
81108540:	e0ff0c04 	addi	r3,fp,-976
81108544:	1885883a 	add	r2,r3,r2
81108548:	10801604 	addi	r2,r2,88
8110854c:	10c00017 	ldw	r3,0(r2)
81108550:	180b883a 	mov	r5,r3
81108554:	e13f0d17 	ldw	r4,-972(fp)
81108558:	110a3700 	call	8110a370 <__divsf3>
8110855c:	1007883a 	mov	r3,r2
81108560:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
81108564:	e0bf0c17 	ldw	r2,-976(fp)
81108568:	1085883a 	add	r2,r2,r2
8110856c:	1085883a 	add	r2,r2,r2
81108570:	e0ff0c04 	addi	r3,fp,-976
81108574:	1885883a 	add	r2,r3,r2
81108578:	10802204 	addi	r2,r2,136
8110857c:	10c00017 	ldw	r3,0(r2)
81108580:	e17f1417 	ldw	r5,-944(fp)
81108584:	1809883a 	mov	r4,r3
81108588:	110a7b00 	call	8110a7b0 <__mulsf3>
8110858c:	1007883a 	mov	r3,r2
81108590:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
81108594:	e0ff3a04 	addi	r3,fp,-792
81108598:	e0bf0c17 	ldw	r2,-976(fp)
8110859c:	100491ba 	slli	r2,r2,6
811085a0:	18a9883a 	add	r20,r3,r2
811085a4:	e0bf0c17 	ldw	r2,-976(fp)
811085a8:	1085883a 	add	r2,r2,r2
811085ac:	1085883a 	add	r2,r2,r2
811085b0:	e0ff0c04 	addi	r3,fp,-976
811085b4:	1885883a 	add	r2,r3,r2
811085b8:	10800a04 	addi	r2,r2,40
811085bc:	10800017 	ldw	r2,0(r2)
811085c0:	102b883a 	mov	r21,r2
811085c4:	e13f0d17 	ldw	r4,-972(fp)
811085c8:	110b4d80 	call	8110b4d8 <__extendsfdf2>
811085cc:	1025883a 	mov	r18,r2
811085d0:	1827883a 	mov	r19,r3
811085d4:	e13f1417 	ldw	r4,-944(fp)
811085d8:	110b4d80 	call	8110b4d8 <__extendsfdf2>
811085dc:	1021883a 	mov	r16,r2
811085e0:	1823883a 	mov	r17,r3
811085e4:	e13f1517 	ldw	r4,-940(fp)
811085e8:	110b4d80 	call	8110b4d8 <__extendsfdf2>
811085ec:	1009883a 	mov	r4,r2
811085f0:	180b883a 	mov	r5,r3
811085f4:	d9000315 	stw	r4,12(sp)
811085f8:	d9400415 	stw	r5,16(sp)
811085fc:	dc000115 	stw	r16,4(sp)
81108600:	dc400215 	stw	r17,8(sp)
81108604:	dcc00015 	stw	r19,0(sp)
81108608:	900f883a 	mov	r7,r18
8110860c:	a80d883a 	mov	r6,r21
81108610:	a00b883a 	mov	r5,r20
81108614:	012044b4 	movhi	r4,33042
81108618:	2137a804 	addi	r4,r4,-8544
8110861c:	110ba640 	call	8110ba64 <printf>
81108620:	00002206 	br	811086ac <sense_log+0x638>
 	                }else if (!SIG && !MSB){
81108624:	e0bf1017 	ldw	r2,-960(fp)
81108628:	1000201e 	bne	r2,zero,811086ac <sense_log+0x638>
8110862c:	e0bf1117 	ldw	r2,-956(fp)
81108630:	10001e1e 	bne	r2,zero,811086ac <sense_log+0x638>
 	                    fVol = -fRef*0.5;
81108634:	e0bf0e17 	ldw	r2,-968(fp)
81108638:	10a0003c 	xorhi	r2,r2,32768
8110863c:	014fc034 	movhi	r5,16128
81108640:	1009883a 	mov	r4,r2
81108644:	110a7b00 	call	8110a7b0 <__mulsf3>
81108648:	1007883a 	mov	r3,r2
8110864c:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
81108650:	e0ff3a04 	addi	r3,fp,-792
81108654:	e0bf0c17 	ldw	r2,-976(fp)
81108658:	100491ba 	slli	r2,r2,6
8110865c:	18a1883a 	add	r16,r3,r2
81108660:	e0bf0c17 	ldw	r2,-976(fp)
81108664:	1085883a 	add	r2,r2,r2
81108668:	1085883a 	add	r2,r2,r2
8110866c:	e0ff0c04 	addi	r3,fp,-976
81108670:	1885883a 	add	r2,r3,r2
81108674:	10800a04 	addi	r2,r2,40
81108678:	10800017 	ldw	r2,0(r2)
8110867c:	1023883a 	mov	r17,r2
81108680:	e13f1317 	ldw	r4,-948(fp)
81108684:	110b4d80 	call	8110b4d8 <__extendsfdf2>
81108688:	1009883a 	mov	r4,r2
8110868c:	180b883a 	mov	r5,r3
81108690:	d9400015 	stw	r5,0(sp)
81108694:	200f883a 	mov	r7,r4
81108698:	880d883a 	mov	r6,r17
8110869c:	800b883a 	mov	r5,r16
811086a0:	012044b4 	movhi	r4,33042
811086a4:	2137b804 	addi	r4,r4,-8480
811086a8:	110ba640 	call	8110ba64 <printf>
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
 	        if (bSuccess){
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
811086ac:	e0bf0c17 	ldw	r2,-976(fp)
811086b0:	10800044 	addi	r2,r2,1
811086b4:	e0bf0c15 	stw	r2,-976(fp)
811086b8:	e0bf0c17 	ldw	r2,-976(fp)
811086bc:	10800308 	cmpgei	r2,r2,12
811086c0:	1000021e 	bne	r2,zero,811086cc <sense_log+0x658>
811086c4:	e0bf0f17 	ldw	r2,-964(fp)
811086c8:	103ecb1e 	bne	r2,zero,811081f8 <__reset+0xfb0e81f8>
 	                }else if (!SIG && !MSB){
 	                    fVol = -fRef*0.5;
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
811086cc:	012044b4 	movhi	r4,33042
811086d0:	2137c104 	addi	r4,r4,-8444
811086d4:	110bb800 	call	8110bb80 <puts>
 	        }else{
 	            printf("Error\r\n");
 	        }
 }
811086d8:	00000306 	br	811086e8 <sense_log+0x674>
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
 	        }else{
 	            printf("Error\r\n");
811086dc:	012044b4 	movhi	r4,33042
811086e0:	2137c204 	addi	r4,r4,-8440
811086e4:	110bb800 	call	8110bb80 <puts>
 	        }
 }
811086e8:	0001883a 	nop
811086ec:	e6fffa04 	addi	sp,fp,-24
811086f0:	dfc00717 	ldw	ra,28(sp)
811086f4:	df000617 	ldw	fp,24(sp)
811086f8:	dd400517 	ldw	r21,20(sp)
811086fc:	dd000417 	ldw	r20,16(sp)
81108700:	dcc00317 	ldw	r19,12(sp)
81108704:	dc800217 	ldw	r18,8(sp)
81108708:	dc400117 	ldw	r17,4(sp)
8110870c:	dc000017 	ldw	r16,0(sp)
81108710:	dec00804 	addi	sp,sp,32
81108714:	f800283a 	ret

81108718 <main>:

void TestLeds(void);
bool TestDMA_M1_M2(void);
bool TestDMA_M2_M1(void);

int main(void) {
81108718:	defff604 	addi	sp,sp,-40
8110871c:	dfc00915 	stw	ra,36(sp)
81108720:	df000815 	stw	fp,32(sp)
81108724:	df000804 	addi	fp,sp,32

	alt_8 tempFPGA = 0;
81108728:	e03fff05 	stb	zero,-4(fp)
	alt_8 tempBoard = 0;
8110872c:	e03fff45 	stb	zero,-3(fp)

	printf(" \n Nucleo de Sistemas Eletronicos Embarcados - MebX\n\n");
81108730:	012044b4 	movhi	r4,33042
81108734:	21388404 	addi	r4,r4,-7664
81108738:	110bb800 	call	8110bb80 <puts>

	//Configura Display de 7 segmentos
	SSDP_CONFIG(SSDP_NORMAL_MODE);
8110873c:	0009883a 	mov	r4,zero
81108740:	11035d80 	call	811035d8 <SSDP_CONFIG>

	alt_u32 *spw_h_rst_base = (alt_u32 *) (RST_CONTROLLER_SPWH_BASE);
81108744:	00a04834 	movhi	r2,33056
81108748:	108c0004 	addi	r2,r2,12288
8110874c:	e0bffa15 	stw	r2,-24(fp)
	*spw_h_rst_base = 0x00000000;
81108750:	e0bffa17 	ldw	r2,-24(fp)
81108754:	10000015 	stw	zero,0(r2)

	comm_init_channel(&spw_a, spacewire_channel_a);
81108758:	01400044 	movi	r5,1
8110875c:	012044b4 	movhi	r4,33042
81108760:	21035b04 	addi	r4,r4,3436
81108764:	110101c0 	call	8110101c <comm_init_channel>
	comm_init_channel(&spw_b, spacewire_channel_b);
81108768:	01400084 	movi	r5,2
8110876c:	012044b4 	movhi	r4,33042
81108770:	2102f204 	addi	r4,r4,3016
81108774:	110101c0 	call	8110101c <comm_init_channel>
	comm_init_channel(&spw_c, spacewire_channel_c);
81108778:	014000c4 	movi	r5,3
8110877c:	012044b4 	movhi	r4,33042
81108780:	21037004 	addi	r4,r4,3520
81108784:	110101c0 	call	8110101c <comm_init_channel>
	comm_init_channel(&spw_d, spacewire_channel_d);
81108788:	01400104 	movi	r5,4
8110878c:	012044b4 	movhi	r4,33042
81108790:	21031c04 	addi	r4,r4,3184
81108794:	110101c0 	call	8110101c <comm_init_channel>
	comm_init_channel(&spw_e, spacewire_channel_e);
81108798:	01400144 	movi	r5,5
8110879c:	012044b4 	movhi	r4,33042
811087a0:	2102dd04 	addi	r4,r4,2932
811087a4:	110101c0 	call	8110101c <comm_init_channel>
	comm_init_channel(&spw_f, spacewire_channel_f);
811087a8:	01400184 	movi	r5,6
811087ac:	012044b4 	movhi	r4,33042
811087b0:	21033104 	addi	r4,r4,3268
811087b4:	110101c0 	call	8110101c <comm_init_channel>
	comm_init_channel(&spw_g, spacewire_channel_g);
811087b8:	014001c4 	movi	r5,7
811087bc:	012044b4 	movhi	r4,33042
811087c0:	21030704 	addi	r4,r4,3100
811087c4:	110101c0 	call	8110101c <comm_init_channel>
	comm_init_channel(&spw_h, spacewire_channel_h);
811087c8:	01400204 	movi	r5,8
811087cc:	012044b4 	movhi	r4,33042
811087d0:	21034604 	addi	r4,r4,3352
811087d4:	110101c0 	call	8110101c <comm_init_channel>

	comm_init_interrupt(spacewire_channel_a);
811087d8:	01000044 	movi	r4,1
811087dc:	11004040 	call	81100404 <comm_init_interrupt>
	int_cnt = 0;
811087e0:	d0201a05 	stb	zero,-32664(gp)
	printf("int_cnt: %u \n", int_cnt);
811087e4:	d0a01a03 	ldbu	r2,-32664(gp)
811087e8:	10803fcc 	andi	r2,r2,255
811087ec:	100b883a 	mov	r5,r2
811087f0:	012044b4 	movhi	r4,33042
811087f4:	21389204 	addi	r4,r4,-7608
811087f8:	110ba640 	call	8110ba64 <printf>

	spw_a.int_control.right_buffer_empty_en = FALSE;
811087fc:	00a044b4 	movhi	r2,33042
81108800:	10835b04 	addi	r2,r2,3436
81108804:	10001115 	stw	zero,68(r2)
	comm_config_int_control(&spw_a);
81108808:	012044b4 	movhi	r4,33042
8110880c:	21035b04 	addi	r4,r4,3436
81108810:	110057c0 	call	8110057c <comm_config_int_control>

	spw_a.link_config.autostart = FALSE;
81108814:	00a044b4 	movhi	r2,33042
81108818:	10835b04 	addi	r2,r2,3436
8110881c:	10000215 	stw	zero,8(r2)
	spw_a.link_config.start = FALSE;
81108820:	00a044b4 	movhi	r2,33042
81108824:	10835b04 	addi	r2,r2,3436
81108828:	10000315 	stw	zero,12(r2)
	spw_a.link_config.disconnect = TRUE;
8110882c:	00a044b4 	movhi	r2,33042
81108830:	10835b04 	addi	r2,r2,3436
81108834:	00c00044 	movi	r3,1
81108838:	10c00415 	stw	r3,16(r2)
	comm_config_link(&spw_a);
8110883c:	012044b4 	movhi	r4,33042
81108840:	21035b04 	addi	r4,r4,3436
81108844:	11009780 	call	81100978 <comm_config_link>
	usleep(5000);
81108848:	0104e204 	movi	r4,5000
8110884c:	1118c880 	call	81118c88 <usleep>
	spw_a.windowing_config.masking = TRUE;
81108850:	00a044b4 	movhi	r2,33042
81108854:	10835b04 	addi	r2,r2,3436
81108858:	00c00044 	movi	r3,1
8110885c:	10c00115 	stw	r3,4(r2)
//	spw_a.windowing_config.masking = FALSE;
	spw_a.link_config.autostart = TRUE;
81108860:	00a044b4 	movhi	r2,33042
81108864:	10835b04 	addi	r2,r2,3436
81108868:	00c00044 	movi	r3,1
8110886c:	10c00215 	stw	r3,8(r2)
	spw_a.link_config.start = TRUE;
81108870:	00a044b4 	movhi	r2,33042
81108874:	10835b04 	addi	r2,r2,3436
81108878:	00c00044 	movi	r3,1
8110887c:	10c00315 	stw	r3,12(r2)
	spw_a.link_config.disconnect = FALSE;
81108880:	00a044b4 	movhi	r2,33042
81108884:	10835b04 	addi	r2,r2,3436
81108888:	10000415 	stw	zero,16(r2)
	comm_config_windowing(&spw_a);
8110888c:	012044b4 	movhi	r4,33042
81108890:	21035b04 	addi	r4,r4,3436
81108894:	11008580 	call	81100858 <comm_config_windowing>
	comm_config_link(&spw_a);
81108898:	012044b4 	movhi	r4,33042
8110889c:	21035b04 	addi	r4,r4,3436
811088a0:	11009780 	call	81100978 <comm_config_link>

//	spw_a.windowing_config.masking = TRUE;
//	comm_config_windowing(&spw_a);

	spw_h.link_config.autostart = TRUE;
811088a4:	00a044b4 	movhi	r2,33042
811088a8:	10834604 	addi	r2,r2,3352
811088ac:	00c00044 	movi	r3,1
811088b0:	10c00215 	stw	r3,8(r2)
	comm_config_link(&spw_h);
811088b4:	012044b4 	movhi	r4,33042
811088b8:	21034604 	addi	r4,r4,3352
811088bc:	11009780 	call	81100978 <comm_config_link>

	comm_update_link(&spw_h);
811088c0:	012044b4 	movhi	r4,33042
811088c4:	21034604 	addi	r4,r4,3352
811088c8:	1100a700 	call	81100a70 <comm_update_link>
	printf("empty r: %u \n", spw_h.link_config.autostart);
811088cc:	00a044b4 	movhi	r2,33042
811088d0:	10834604 	addi	r2,r2,3352
811088d4:	10800217 	ldw	r2,8(r2)
811088d8:	100b883a 	mov	r5,r2
811088dc:	012044b4 	movhi	r4,33042
811088e0:	21389604 	addi	r4,r4,-7592
811088e4:	110ba640 	call	8110ba64 <printf>

	*spw_h_rst_base = 0x00000001;
811088e8:	e0bffa17 	ldw	r2,-24(fp)
811088ec:	00c00044 	movi	r3,1
811088f0:	10c00015 	stw	r3,0(r2)
	usleep(5000);
811088f4:	0104e204 	movi	r4,5000
811088f8:	1118c880 	call	81118c88 <usleep>
	*spw_h_rst_base = 0x00000000;
811088fc:	e0bffa17 	ldw	r2,-24(fp)
81108900:	10000015 	stw	zero,0(r2)

	comm_update_link(&spw_h);
81108904:	012044b4 	movhi	r4,33042
81108908:	21034604 	addi	r4,r4,3352
8110890c:	1100a700 	call	81100a70 <comm_update_link>
	printf("empty r: %u \n", spw_h.link_config.autostart);
81108910:	00a044b4 	movhi	r2,33042
81108914:	10834604 	addi	r2,r2,3352
81108918:	10800217 	ldw	r2,8(r2)
8110891c:	100b883a 	mov	r5,r2
81108920:	012044b4 	movhi	r4,33042
81108924:	21389604 	addi	r4,r4,-7592
81108928:	110ba640 	call	8110ba64 <printf>

	spw_h.link_config.autostart = TRUE;
8110892c:	00a044b4 	movhi	r2,33042
81108930:	10834604 	addi	r2,r2,3352
81108934:	00c00044 	movi	r3,1
81108938:	10c00215 	stw	r3,8(r2)
	comm_config_link(&spw_h);
8110893c:	012044b4 	movhi	r4,33042
81108940:	21034604 	addi	r4,r4,3352
81108944:	11009780 	call	81100978 <comm_config_link>

	comm_update_link(&spw_h);
81108948:	012044b4 	movhi	r4,33042
8110894c:	21034604 	addi	r4,r4,3352
81108950:	1100a700 	call	81100a70 <comm_update_link>
	printf("empty r: %u \n", spw_h.link_config.autostart);
81108954:	00a044b4 	movhi	r2,33042
81108958:	10834604 	addi	r2,r2,3352
8110895c:	10800217 	ldw	r2,8(r2)
81108960:	100b883a 	mov	r5,r2
81108964:	012044b4 	movhi	r4,33042
81108968:	21389604 	addi	r4,r4,-7592
8110896c:	110ba640 	call	8110ba64 <printf>

	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_POWER_MASK);
81108970:	01400074 	movhi	r5,1
81108974:	01000044 	movi	r4,1
81108978:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>

	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1G_MASK);
8110897c:	01400044 	movi	r5,1
81108980:	0009883a 	mov	r4,zero
81108984:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1R_MASK);
81108988:	01400084 	movi	r5,2
8110898c:	01000044 	movi	r4,1
81108990:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_2G_MASK);
81108994:	01400104 	movi	r5,4
81108998:	0009883a 	mov	r4,zero
8110899c:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_2R_MASK);
811089a0:	01400204 	movi	r5,8
811089a4:	01000044 	movi	r4,1
811089a8:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_3G_MASK);
811089ac:	01400404 	movi	r5,16
811089b0:	0009883a 	mov	r4,zero
811089b4:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_3R_MASK);
811089b8:	01400804 	movi	r5,32
811089bc:	01000044 	movi	r4,1
811089c0:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_4G_MASK);
811089c4:	01401004 	movi	r5,64
811089c8:	0009883a 	mov	r4,zero
811089cc:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_4R_MASK);
811089d0:	01402004 	movi	r5,128
811089d4:	01000044 	movi	r4,1
811089d8:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_5G_MASK);
811089dc:	01404004 	movi	r5,256
811089e0:	0009883a 	mov	r4,zero
811089e4:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_5R_MASK);
811089e8:	01408004 	movi	r5,512
811089ec:	01000044 	movi	r4,1
811089f0:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_6G_MASK);
811089f4:	01410004 	movi	r5,1024
811089f8:	0009883a 	mov	r4,zero
811089fc:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_6R_MASK);
81108a00:	01420004 	movi	r5,2048
81108a04:	01000044 	movi	r4,1
81108a08:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_7G_MASK);
81108a0c:	01440004 	movi	r5,4096
81108a10:	0009883a 	mov	r4,zero
81108a14:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_7R_MASK);
81108a18:	01480004 	movi	r5,8192
81108a1c:	01000044 	movi	r4,1
81108a20:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8G_MASK);
81108a24:	01500004 	movi	r5,16384
81108a28:	0009883a 	mov	r4,zero
81108a2c:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
81108a30:	01600014 	movui	r5,32768
81108a34:	01000044 	movi	r4,1
81108a38:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
//	default:
//		printf("errou \n");
//		break;
//	}

	usleep(5000);
81108a3c:	0104e204 	movi	r4,5000
81108a40:	1118c880 	call	81118c88 <usleep>
	if (spw_a.link_status.running) {
81108a44:	00a044b4 	movhi	r2,33042
81108a48:	10835b04 	addi	r2,r2,3436
81108a4c:	10800b17 	ldw	r2,44(r2)
81108a50:	10000626 	beq	r2,zero,81108a6c <main+0x354>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1R_MASK);
81108a54:	01400084 	movi	r5,2
81108a58:	0009883a 	mov	r4,zero
81108a5c:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1G_MASK);
81108a60:	01400044 	movi	r5,1
81108a64:	01000044 	movi	r4,1
81108a68:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	}

	if (spw_h.link_status.running) {
81108a6c:	00a044b4 	movhi	r2,33042
81108a70:	10834604 	addi	r2,r2,3352
81108a74:	10800b17 	ldw	r2,44(r2)
81108a78:	10000626 	beq	r2,zero,81108a94 <main+0x37c>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8R_MASK);
81108a7c:	01600014 	movui	r5,32768
81108a80:	0009883a 	mov	r4,zero
81108a84:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8G_MASK);
81108a88:	01500004 	movi	r5,16384
81108a8c:	01000044 	movi	r4,1
81108a90:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	}

	printf("esperando \n");
81108a94:	012044b4 	movhi	r4,33042
81108a98:	21389a04 	addi	r4,r4,-7576
81108a9c:	110bb800 	call	8110bb80 <puts>
	getchar();
81108aa0:	d0a00917 	ldw	r2,-32732(gp)
81108aa4:	10800117 	ldw	r2,4(r2)
81108aa8:	1009883a 	mov	r4,r2
81108aac:	110b8640 	call	8110b864 <getc>
	printf("foi \n");
81108ab0:	012044b4 	movhi	r4,33042
81108ab4:	21389d04 	addi	r4,r4,-7564
81108ab8:	110bb800 	call	8110bb80 <puts>

	DDR2_SWITCH_MEMORY(DDR2_M2_ID);
81108abc:	01000084 	movi	r4,2
81108ac0:	110647c0 	call	8110647c <DDR2_SWITCH_MEMORY>
	alt_u32 Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81108ac4:	e03ffb15 	stw	zero,-20(fp)

	alt_u32 *pDDR;
	pDDR = (alt_u32 *) Ddr2Base;
81108ac8:	e0bffb17 	ldw	r2,-20(fp)
81108acc:	e0bffc15 	stw	r2,-16(fp)
//	pDDR++;
//	printf("add : %u \n", *pDDR);

// buffer: 2176 B -> 544 dwords

	int data_counter = 0;
81108ad0:	e03ffd15 	stw	zero,-12(fp)

	fee_buffer_data_block_t *buffer_data = (fee_buffer_data_block_t *) Ddr2Base;
81108ad4:	e0bffb17 	ldw	r2,-20(fp)
81108ad8:	e0bffe15 	stw	r2,-8(fp)

	buffer_data->pixel_data_block[0].pixel[0] = 0x0100;
81108adc:	e0bffe17 	ldw	r2,-8(fp)
81108ae0:	00c04004 	movi	r3,256
81108ae4:	10c0000d 	sth	r3,0(r2)
	buffer_data->pixel_data_block[0].pixel[1] = 0x0302;
81108ae8:	e0bffe17 	ldw	r2,-8(fp)
81108aec:	00c0c084 	movi	r3,770
81108af0:	10c0008d 	sth	r3,2(r2)
	buffer_data->pixel_data_block[0].pixel[2] = 0x0504;
81108af4:	e0bffe17 	ldw	r2,-8(fp)
81108af8:	00c14104 	movi	r3,1284
81108afc:	10c0010d 	sth	r3,4(r2)
	buffer_data->pixel_data_block[0].pixel[3] = 0x0706;
81108b00:	e0bffe17 	ldw	r2,-8(fp)
81108b04:	00c1c184 	movi	r3,1798
81108b08:	10c0018d 	sth	r3,6(r2)
	buffer_data->pixel_data_block[0].pixel[4] = 0x0908;
81108b0c:	e0bffe17 	ldw	r2,-8(fp)
81108b10:	00c24204 	movi	r3,2312
81108b14:	10c0020d 	sth	r3,8(r2)
	buffer_data->pixel_data_block[0].pixel[5] = 0x0B0A;
81108b18:	e0bffe17 	ldw	r2,-8(fp)
81108b1c:	00c2c284 	movi	r3,2826
81108b20:	10c0028d 	sth	r3,10(r2)
	buffer_data->pixel_data_block[0].pixel[6] = 0x0D0C;
81108b24:	e0bffe17 	ldw	r2,-8(fp)
81108b28:	00c34304 	movi	r3,3340
81108b2c:	10c0030d 	sth	r3,12(r2)
	buffer_data->pixel_data_block[0].pixel[7] = 0x0F0E;
81108b30:	e0bffe17 	ldw	r2,-8(fp)
81108b34:	00c3c384 	movi	r3,3854
81108b38:	10c0038d 	sth	r3,14(r2)
	buffer_data->pixel_data_block[0].pixel[8] = 0x1110;
81108b3c:	e0bffe17 	ldw	r2,-8(fp)
81108b40:	00c44404 	movi	r3,4368
81108b44:	10c0040d 	sth	r3,16(r2)
	buffer_data->pixel_data_block[0].pixel[9] = 0x1312;
81108b48:	e0bffe17 	ldw	r2,-8(fp)
81108b4c:	00c4c484 	movi	r3,4882
81108b50:	10c0048d 	sth	r3,18(r2)
	buffer_data->pixel_data_block[0].pixel[10] = 0x1514;
81108b54:	e0bffe17 	ldw	r2,-8(fp)
81108b58:	00c54504 	movi	r3,5396
81108b5c:	10c0050d 	sth	r3,20(r2)
	buffer_data->pixel_data_block[0].pixel[11] = 0x1716;
81108b60:	e0bffe17 	ldw	r2,-8(fp)
81108b64:	00c5c584 	movi	r3,5910
81108b68:	10c0058d 	sth	r3,22(r2)
	buffer_data->pixel_data_block[0].pixel[12] = 0x1918;
81108b6c:	e0bffe17 	ldw	r2,-8(fp)
81108b70:	00c64604 	movi	r3,6424
81108b74:	10c0060d 	sth	r3,24(r2)
	buffer_data->pixel_data_block[0].pixel[13] = 0x1B1A;
81108b78:	e0bffe17 	ldw	r2,-8(fp)
81108b7c:	00c6c684 	movi	r3,6938
81108b80:	10c0068d 	sth	r3,26(r2)
	buffer_data->pixel_data_block[0].pixel[14] = 0x1D1C;
81108b84:	e0bffe17 	ldw	r2,-8(fp)
81108b88:	00c74704 	movi	r3,7452
81108b8c:	10c0070d 	sth	r3,28(r2)
	buffer_data->pixel_data_block[0].pixel[15] = 0x1F1E;
81108b90:	e0bffe17 	ldw	r2,-8(fp)
81108b94:	00c7c784 	movi	r3,7966
81108b98:	10c0078d 	sth	r3,30(r2)
	buffer_data->pixel_data_block[0].pixel[16] = 0x2120;
81108b9c:	e0bffe17 	ldw	r2,-8(fp)
81108ba0:	00c84804 	movi	r3,8480
81108ba4:	10c0080d 	sth	r3,32(r2)
	buffer_data->pixel_data_block[0].pixel[17] = 0x2322;
81108ba8:	e0bffe17 	ldw	r2,-8(fp)
81108bac:	00c8c884 	movi	r3,8994
81108bb0:	10c0088d 	sth	r3,34(r2)
	buffer_data->pixel_data_block[0].pixel[18] = 0x2524;
81108bb4:	e0bffe17 	ldw	r2,-8(fp)
81108bb8:	00c94904 	movi	r3,9508
81108bbc:	10c0090d 	sth	r3,36(r2)
	buffer_data->pixel_data_block[0].pixel[19] = 0x2726;
81108bc0:	e0bffe17 	ldw	r2,-8(fp)
81108bc4:	00c9c984 	movi	r3,10022
81108bc8:	10c0098d 	sth	r3,38(r2)
	buffer_data->pixel_data_block[0].pixel[20] = 0x2928;
81108bcc:	e0bffe17 	ldw	r2,-8(fp)
81108bd0:	00ca4a04 	movi	r3,10536
81108bd4:	10c00a0d 	sth	r3,40(r2)
	buffer_data->pixel_data_block[0].pixel[21] = 0x2B2A;
81108bd8:	e0bffe17 	ldw	r2,-8(fp)
81108bdc:	00caca84 	movi	r3,11050
81108be0:	10c00a8d 	sth	r3,42(r2)
	buffer_data->pixel_data_block[0].pixel[22] = 0x2D2C;
81108be4:	e0bffe17 	ldw	r2,-8(fp)
81108be8:	00cb4b04 	movi	r3,11564
81108bec:	10c00b0d 	sth	r3,44(r2)
	buffer_data->pixel_data_block[0].pixel[23] = 0x2F2E;
81108bf0:	e0bffe17 	ldw	r2,-8(fp)
81108bf4:	00cbcb84 	movi	r3,12078
81108bf8:	10c00b8d 	sth	r3,46(r2)
	buffer_data->pixel_data_block[0].pixel[24] = 0x3130;
81108bfc:	e0bffe17 	ldw	r2,-8(fp)
81108c00:	00cc4c04 	movi	r3,12592
81108c04:	10c00c0d 	sth	r3,48(r2)
	buffer_data->pixel_data_block[0].pixel[25] = 0x3332;
81108c08:	e0bffe17 	ldw	r2,-8(fp)
81108c0c:	00cccc84 	movi	r3,13106
81108c10:	10c00c8d 	sth	r3,50(r2)
	buffer_data->pixel_data_block[0].pixel[26] = 0x3534;
81108c14:	e0bffe17 	ldw	r2,-8(fp)
81108c18:	00cd4d04 	movi	r3,13620
81108c1c:	10c00d0d 	sth	r3,52(r2)
	buffer_data->pixel_data_block[0].pixel[27] = 0x3736;
81108c20:	e0bffe17 	ldw	r2,-8(fp)
81108c24:	00cdcd84 	movi	r3,14134
81108c28:	10c00d8d 	sth	r3,54(r2)
	buffer_data->pixel_data_block[0].pixel[28] = 0x3938;
81108c2c:	e0bffe17 	ldw	r2,-8(fp)
81108c30:	00ce4e04 	movi	r3,14648
81108c34:	10c00e0d 	sth	r3,56(r2)
	buffer_data->pixel_data_block[0].pixel[29] = 0x3B3A;
81108c38:	e0bffe17 	ldw	r2,-8(fp)
81108c3c:	00cece84 	movi	r3,15162
81108c40:	10c00e8d 	sth	r3,58(r2)
	buffer_data->pixel_data_block[0].pixel[30] = 0x3D3C;
81108c44:	e0bffe17 	ldw	r2,-8(fp)
81108c48:	00cf4f04 	movi	r3,15676
81108c4c:	10c00f0d 	sth	r3,60(r2)
	buffer_data->pixel_data_block[0].pixel[31] = 0x3F3E;
81108c50:	e0bffe17 	ldw	r2,-8(fp)
81108c54:	00cfcf84 	movi	r3,16190
81108c58:	10c00f8d 	sth	r3,62(r2)
	buffer_data->pixel_data_block[0].pixel[32] = 0x4140;
81108c5c:	e0bffe17 	ldw	r2,-8(fp)
81108c60:	00d05004 	movi	r3,16704
81108c64:	10c0100d 	sth	r3,64(r2)
	buffer_data->pixel_data_block[0].pixel[33] = 0x4342;
81108c68:	e0bffe17 	ldw	r2,-8(fp)
81108c6c:	00d0d084 	movi	r3,17218
81108c70:	10c0108d 	sth	r3,66(r2)
	buffer_data->pixel_data_block[0].pixel[34] = 0x4544;
81108c74:	e0bffe17 	ldw	r2,-8(fp)
81108c78:	00d15104 	movi	r3,17732
81108c7c:	10c0110d 	sth	r3,68(r2)
	buffer_data->pixel_data_block[0].pixel[35] = 0x4746;
81108c80:	e0bffe17 	ldw	r2,-8(fp)
81108c84:	00d1d184 	movi	r3,18246
81108c88:	10c0118d 	sth	r3,70(r2)
	buffer_data->pixel_data_block[0].pixel[36] = 0x4948;
81108c8c:	e0bffe17 	ldw	r2,-8(fp)
81108c90:	00d25204 	movi	r3,18760
81108c94:	10c0120d 	sth	r3,72(r2)
	buffer_data->pixel_data_block[0].pixel[37] = 0x4B4A;
81108c98:	e0bffe17 	ldw	r2,-8(fp)
81108c9c:	00d2d284 	movi	r3,19274
81108ca0:	10c0128d 	sth	r3,74(r2)
	buffer_data->pixel_data_block[0].pixel[38] = 0x4D4C;
81108ca4:	e0bffe17 	ldw	r2,-8(fp)
81108ca8:	00d35304 	movi	r3,19788
81108cac:	10c0130d 	sth	r3,76(r2)
	buffer_data->pixel_data_block[0].pixel[39] = 0x4F4E;
81108cb0:	e0bffe17 	ldw	r2,-8(fp)
81108cb4:	00d3d384 	movi	r3,20302
81108cb8:	10c0138d 	sth	r3,78(r2)
	buffer_data->pixel_data_block[0].pixel[40] = 0x5150;
81108cbc:	e0bffe17 	ldw	r2,-8(fp)
81108cc0:	00d45404 	movi	r3,20816
81108cc4:	10c0140d 	sth	r3,80(r2)
	buffer_data->pixel_data_block[0].pixel[41] = 0x5352;
81108cc8:	e0bffe17 	ldw	r2,-8(fp)
81108ccc:	00d4d484 	movi	r3,21330
81108cd0:	10c0148d 	sth	r3,82(r2)
	buffer_data->pixel_data_block[0].pixel[42] = 0x5554;
81108cd4:	e0bffe17 	ldw	r2,-8(fp)
81108cd8:	00d55504 	movi	r3,21844
81108cdc:	10c0150d 	sth	r3,84(r2)
	buffer_data->pixel_data_block[0].pixel[43] = 0x5756;
81108ce0:	e0bffe17 	ldw	r2,-8(fp)
81108ce4:	00d5d584 	movi	r3,22358
81108ce8:	10c0158d 	sth	r3,86(r2)
	buffer_data->pixel_data_block[0].pixel[44] = 0x5958;
81108cec:	e0bffe17 	ldw	r2,-8(fp)
81108cf0:	00d65604 	movi	r3,22872
81108cf4:	10c0160d 	sth	r3,88(r2)
	buffer_data->pixel_data_block[0].pixel[45] = 0x5B5A;
81108cf8:	e0bffe17 	ldw	r2,-8(fp)
81108cfc:	00d6d684 	movi	r3,23386
81108d00:	10c0168d 	sth	r3,90(r2)
	buffer_data->pixel_data_block[0].pixel[46] = 0x5D5C;
81108d04:	e0bffe17 	ldw	r2,-8(fp)
81108d08:	00d75704 	movi	r3,23900
81108d0c:	10c0170d 	sth	r3,92(r2)
	buffer_data->pixel_data_block[0].pixel[47] = 0x5F5E;
81108d10:	e0bffe17 	ldw	r2,-8(fp)
81108d14:	00d7d784 	movi	r3,24414
81108d18:	10c0178d 	sth	r3,94(r2)
	buffer_data->pixel_data_block[0].pixel[48] = 0x6160;
81108d1c:	e0bffe17 	ldw	r2,-8(fp)
81108d20:	00d85804 	movi	r3,24928
81108d24:	10c0180d 	sth	r3,96(r2)
	buffer_data->pixel_data_block[0].pixel[49] = 0x6362;
81108d28:	e0bffe17 	ldw	r2,-8(fp)
81108d2c:	00d8d884 	movi	r3,25442
81108d30:	10c0188d 	sth	r3,98(r2)
	buffer_data->pixel_data_block[0].pixel[50] = 0x6564;
81108d34:	e0bffe17 	ldw	r2,-8(fp)
81108d38:	00d95904 	movi	r3,25956
81108d3c:	10c0190d 	sth	r3,100(r2)
	buffer_data->pixel_data_block[0].pixel[51] = 0x6766;
81108d40:	e0bffe17 	ldw	r2,-8(fp)
81108d44:	00d9d984 	movi	r3,26470
81108d48:	10c0198d 	sth	r3,102(r2)
	buffer_data->pixel_data_block[0].pixel[52] = 0x6968;
81108d4c:	e0bffe17 	ldw	r2,-8(fp)
81108d50:	00da5a04 	movi	r3,26984
81108d54:	10c01a0d 	sth	r3,104(r2)
	buffer_data->pixel_data_block[0].pixel[53] = 0x6B6A;
81108d58:	e0bffe17 	ldw	r2,-8(fp)
81108d5c:	00dada84 	movi	r3,27498
81108d60:	10c01a8d 	sth	r3,106(r2)
	buffer_data->pixel_data_block[0].pixel[54] = 0x6D6C;
81108d64:	e0bffe17 	ldw	r2,-8(fp)
81108d68:	00db5b04 	movi	r3,28012
81108d6c:	10c01b0d 	sth	r3,108(r2)
	buffer_data->pixel_data_block[0].pixel[55] = 0x6F6E;
81108d70:	e0bffe17 	ldw	r2,-8(fp)
81108d74:	00dbdb84 	movi	r3,28526
81108d78:	10c01b8d 	sth	r3,110(r2)
	buffer_data->pixel_data_block[0].pixel[56] = 0x7170;
81108d7c:	e0bffe17 	ldw	r2,-8(fp)
81108d80:	00dc5c04 	movi	r3,29040
81108d84:	10c01c0d 	sth	r3,112(r2)
	buffer_data->pixel_data_block[0].pixel[57] = 0x7372;
81108d88:	e0bffe17 	ldw	r2,-8(fp)
81108d8c:	00dcdc84 	movi	r3,29554
81108d90:	10c01c8d 	sth	r3,114(r2)
	buffer_data->pixel_data_block[0].pixel[58] = 0x7574;
81108d94:	e0bffe17 	ldw	r2,-8(fp)
81108d98:	00dd5d04 	movi	r3,30068
81108d9c:	10c01d0d 	sth	r3,116(r2)
	buffer_data->pixel_data_block[0].pixel[59] = 0x7776;
81108da0:	e0bffe17 	ldw	r2,-8(fp)
81108da4:	00dddd84 	movi	r3,30582
81108da8:	10c01d8d 	sth	r3,118(r2)
	buffer_data->pixel_data_block[0].pixel[60] = 0x7978;
81108dac:	e0bffe17 	ldw	r2,-8(fp)
81108db0:	00de5e04 	movi	r3,31096
81108db4:	10c01e0d 	sth	r3,120(r2)
	buffer_data->pixel_data_block[0].pixel[61] = 0x7B7A;
81108db8:	e0bffe17 	ldw	r2,-8(fp)
81108dbc:	00dede84 	movi	r3,31610
81108dc0:	10c01e8d 	sth	r3,122(r2)
	buffer_data->pixel_data_block[0].pixel[62] = 0x7D7C;
81108dc4:	e0bffe17 	ldw	r2,-8(fp)
81108dc8:	00df5f04 	movi	r3,32124
81108dcc:	10c01f0d 	sth	r3,124(r2)
	buffer_data->pixel_data_block[0].pixel[63] = 0x7F7E;
81108dd0:	e0bffe17 	ldw	r2,-8(fp)
81108dd4:	00dfdf84 	movi	r3,32638
81108dd8:	10c01f8d 	sth	r3,126(r2)
	buffer_data->pixel_data_block[0].mask = 0xFFFFFFFFFFFFFFFF;
81108ddc:	e0bffe17 	ldw	r2,-8(fp)
81108de0:	00ffffc4 	movi	r3,-1
81108de4:	10c02015 	stw	r3,128(r2)
81108de8:	00ffffc4 	movi	r3,-1
81108dec:	10c02115 	stw	r3,132(r2)

	buffer_data->pixel_data_block[1].pixel[0] = 0x8180;
81108df0:	e0bffe17 	ldw	r2,-8(fp)
81108df4:	00e06004 	movi	r3,-32384
81108df8:	10c0220d 	sth	r3,136(r2)
	buffer_data->pixel_data_block[1].pixel[1] = 0x8382;
81108dfc:	e0bffe17 	ldw	r2,-8(fp)
81108e00:	00e0e084 	movi	r3,-31870
81108e04:	10c0228d 	sth	r3,138(r2)
	buffer_data->pixel_data_block[1].pixel[2] = 0x8584;
81108e08:	e0bffe17 	ldw	r2,-8(fp)
81108e0c:	00e16104 	movi	r3,-31356
81108e10:	10c0230d 	sth	r3,140(r2)
	buffer_data->pixel_data_block[1].pixel[3] = 0x8786;
81108e14:	e0bffe17 	ldw	r2,-8(fp)
81108e18:	00e1e184 	movi	r3,-30842
81108e1c:	10c0238d 	sth	r3,142(r2)
	buffer_data->pixel_data_block[1].pixel[4] = 0x8988;
81108e20:	e0bffe17 	ldw	r2,-8(fp)
81108e24:	00e26204 	movi	r3,-30328
81108e28:	10c0240d 	sth	r3,144(r2)
	buffer_data->pixel_data_block[1].pixel[5] = 0x8B8A;
81108e2c:	e0bffe17 	ldw	r2,-8(fp)
81108e30:	00e2e284 	movi	r3,-29814
81108e34:	10c0248d 	sth	r3,146(r2)
	buffer_data->pixel_data_block[1].pixel[6] = 0x8D8C;
81108e38:	e0bffe17 	ldw	r2,-8(fp)
81108e3c:	00e36304 	movi	r3,-29300
81108e40:	10c0250d 	sth	r3,148(r2)
	buffer_data->pixel_data_block[1].pixel[7] = 0x8F8E;
81108e44:	e0bffe17 	ldw	r2,-8(fp)
81108e48:	00e3e384 	movi	r3,-28786
81108e4c:	10c0258d 	sth	r3,150(r2)
	buffer_data->pixel_data_block[1].pixel[8] = 0x9190;
81108e50:	e0bffe17 	ldw	r2,-8(fp)
81108e54:	00e46404 	movi	r3,-28272
81108e58:	10c0260d 	sth	r3,152(r2)
	buffer_data->pixel_data_block[1].pixel[9] = 0x9392;
81108e5c:	e0bffe17 	ldw	r2,-8(fp)
81108e60:	00e4e484 	movi	r3,-27758
81108e64:	10c0268d 	sth	r3,154(r2)
	buffer_data->pixel_data_block[1].pixel[10] = 0x9594;
81108e68:	e0bffe17 	ldw	r2,-8(fp)
81108e6c:	00e56504 	movi	r3,-27244
81108e70:	10c0270d 	sth	r3,156(r2)
	buffer_data->pixel_data_block[1].pixel[11] = 0x9796;
81108e74:	e0bffe17 	ldw	r2,-8(fp)
81108e78:	00e5e584 	movi	r3,-26730
81108e7c:	10c0278d 	sth	r3,158(r2)
	buffer_data->pixel_data_block[1].pixel[12] = 0x9998;
81108e80:	e0bffe17 	ldw	r2,-8(fp)
81108e84:	00e66604 	movi	r3,-26216
81108e88:	10c0280d 	sth	r3,160(r2)
	buffer_data->pixel_data_block[1].pixel[13] = 0x9B9A;
81108e8c:	e0bffe17 	ldw	r2,-8(fp)
81108e90:	00e6e684 	movi	r3,-25702
81108e94:	10c0288d 	sth	r3,162(r2)
	buffer_data->pixel_data_block[1].pixel[14] = 0x9D9C;
81108e98:	e0bffe17 	ldw	r2,-8(fp)
81108e9c:	00e76704 	movi	r3,-25188
81108ea0:	10c0290d 	sth	r3,164(r2)
	buffer_data->pixel_data_block[1].pixel[15] = 0x9F9E;
81108ea4:	e0bffe17 	ldw	r2,-8(fp)
81108ea8:	00e7e784 	movi	r3,-24674
81108eac:	10c0298d 	sth	r3,166(r2)
	buffer_data->pixel_data_block[1].pixel[16] = 0xA1A0;
81108eb0:	e0bffe17 	ldw	r2,-8(fp)
81108eb4:	00e86804 	movi	r3,-24160
81108eb8:	10c02a0d 	sth	r3,168(r2)
	buffer_data->pixel_data_block[1].pixel[17] = 0xA3A2;
81108ebc:	e0bffe17 	ldw	r2,-8(fp)
81108ec0:	00e8e884 	movi	r3,-23646
81108ec4:	10c02a8d 	sth	r3,170(r2)
	buffer_data->pixel_data_block[1].pixel[18] = 0xA5A4;
81108ec8:	e0bffe17 	ldw	r2,-8(fp)
81108ecc:	00e96904 	movi	r3,-23132
81108ed0:	10c02b0d 	sth	r3,172(r2)
	buffer_data->pixel_data_block[1].pixel[19] = 0xA7A6;
81108ed4:	e0bffe17 	ldw	r2,-8(fp)
81108ed8:	00e9e984 	movi	r3,-22618
81108edc:	10c02b8d 	sth	r3,174(r2)
	buffer_data->pixel_data_block[1].pixel[20] = 0xA9A8;
81108ee0:	e0bffe17 	ldw	r2,-8(fp)
81108ee4:	00ea6a04 	movi	r3,-22104
81108ee8:	10c02c0d 	sth	r3,176(r2)
	buffer_data->pixel_data_block[1].pixel[21] = 0xABAA;
81108eec:	e0bffe17 	ldw	r2,-8(fp)
81108ef0:	00eaea84 	movi	r3,-21590
81108ef4:	10c02c8d 	sth	r3,178(r2)
	buffer_data->pixel_data_block[1].pixel[22] = 0xADAC;
81108ef8:	e0bffe17 	ldw	r2,-8(fp)
81108efc:	00eb6b04 	movi	r3,-21076
81108f00:	10c02d0d 	sth	r3,180(r2)
	buffer_data->pixel_data_block[1].pixel[23] = 0xAFAE;
81108f04:	e0bffe17 	ldw	r2,-8(fp)
81108f08:	00ebeb84 	movi	r3,-20562
81108f0c:	10c02d8d 	sth	r3,182(r2)
	buffer_data->pixel_data_block[1].pixel[24] = 0xB1B0;
81108f10:	e0bffe17 	ldw	r2,-8(fp)
81108f14:	00ec6c04 	movi	r3,-20048
81108f18:	10c02e0d 	sth	r3,184(r2)
	buffer_data->pixel_data_block[1].pixel[25] = 0xB3B2;
81108f1c:	e0bffe17 	ldw	r2,-8(fp)
81108f20:	00ecec84 	movi	r3,-19534
81108f24:	10c02e8d 	sth	r3,186(r2)
	buffer_data->pixel_data_block[1].pixel[26] = 0xB5B4;
81108f28:	e0bffe17 	ldw	r2,-8(fp)
81108f2c:	00ed6d04 	movi	r3,-19020
81108f30:	10c02f0d 	sth	r3,188(r2)
	buffer_data->pixel_data_block[1].pixel[27] = 0xB7B6;
81108f34:	e0bffe17 	ldw	r2,-8(fp)
81108f38:	00eded84 	movi	r3,-18506
81108f3c:	10c02f8d 	sth	r3,190(r2)
	buffer_data->pixel_data_block[1].pixel[28] = 0xB9B8;
81108f40:	e0bffe17 	ldw	r2,-8(fp)
81108f44:	00ee6e04 	movi	r3,-17992
81108f48:	10c0300d 	sth	r3,192(r2)
	buffer_data->pixel_data_block[1].pixel[29] = 0xBBBA;
81108f4c:	e0bffe17 	ldw	r2,-8(fp)
81108f50:	00eeee84 	movi	r3,-17478
81108f54:	10c0308d 	sth	r3,194(r2)
	buffer_data->pixel_data_block[1].pixel[30] = 0xBDBC;
81108f58:	e0bffe17 	ldw	r2,-8(fp)
81108f5c:	00ef6f04 	movi	r3,-16964
81108f60:	10c0310d 	sth	r3,196(r2)
	buffer_data->pixel_data_block[1].pixel[31] = 0xBFBE;
81108f64:	e0bffe17 	ldw	r2,-8(fp)
81108f68:	00efef84 	movi	r3,-16450
81108f6c:	10c0318d 	sth	r3,198(r2)
	buffer_data->pixel_data_block[1].pixel[32] = 0xC1C0;
81108f70:	e0bffe17 	ldw	r2,-8(fp)
81108f74:	00f07004 	movi	r3,-15936
81108f78:	10c0320d 	sth	r3,200(r2)
	buffer_data->pixel_data_block[1].pixel[33] = 0xC3C2;
81108f7c:	e0bffe17 	ldw	r2,-8(fp)
81108f80:	00f0f084 	movi	r3,-15422
81108f84:	10c0328d 	sth	r3,202(r2)
	buffer_data->pixel_data_block[1].pixel[34] = 0xC5C4;
81108f88:	e0bffe17 	ldw	r2,-8(fp)
81108f8c:	00f17104 	movi	r3,-14908
81108f90:	10c0330d 	sth	r3,204(r2)
	buffer_data->pixel_data_block[1].pixel[35] = 0xC7C6;
81108f94:	e0bffe17 	ldw	r2,-8(fp)
81108f98:	00f1f184 	movi	r3,-14394
81108f9c:	10c0338d 	sth	r3,206(r2)
	buffer_data->pixel_data_block[1].pixel[36] = 0xC9C8;
81108fa0:	e0bffe17 	ldw	r2,-8(fp)
81108fa4:	00f27204 	movi	r3,-13880
81108fa8:	10c0340d 	sth	r3,208(r2)
	buffer_data->pixel_data_block[1].pixel[37] = 0xCBCA;
81108fac:	e0bffe17 	ldw	r2,-8(fp)
81108fb0:	00f2f284 	movi	r3,-13366
81108fb4:	10c0348d 	sth	r3,210(r2)
	buffer_data->pixel_data_block[1].pixel[38] = 0xCDCC;
81108fb8:	e0bffe17 	ldw	r2,-8(fp)
81108fbc:	00f37304 	movi	r3,-12852
81108fc0:	10c0350d 	sth	r3,212(r2)
	buffer_data->pixel_data_block[1].pixel[39] = 0xCFCE;
81108fc4:	e0bffe17 	ldw	r2,-8(fp)
81108fc8:	00f3f384 	movi	r3,-12338
81108fcc:	10c0358d 	sth	r3,214(r2)
	buffer_data->pixel_data_block[1].pixel[40] = 0xD1D0;
81108fd0:	e0bffe17 	ldw	r2,-8(fp)
81108fd4:	00f47404 	movi	r3,-11824
81108fd8:	10c0360d 	sth	r3,216(r2)
	buffer_data->pixel_data_block[1].pixel[41] = 0xD3D2;
81108fdc:	e0bffe17 	ldw	r2,-8(fp)
81108fe0:	00f4f484 	movi	r3,-11310
81108fe4:	10c0368d 	sth	r3,218(r2)
	buffer_data->pixel_data_block[1].pixel[42] = 0xD5D4;
81108fe8:	e0bffe17 	ldw	r2,-8(fp)
81108fec:	00f57504 	movi	r3,-10796
81108ff0:	10c0370d 	sth	r3,220(r2)
	buffer_data->pixel_data_block[1].pixel[43] = 0xD7D6;
81108ff4:	e0bffe17 	ldw	r2,-8(fp)
81108ff8:	00f5f584 	movi	r3,-10282
81108ffc:	10c0378d 	sth	r3,222(r2)
	buffer_data->pixel_data_block[1].pixel[44] = 0xD9D8;
81109000:	e0bffe17 	ldw	r2,-8(fp)
81109004:	00f67604 	movi	r3,-9768
81109008:	10c0380d 	sth	r3,224(r2)
	buffer_data->pixel_data_block[1].pixel[45] = 0xDBDA;
8110900c:	e0bffe17 	ldw	r2,-8(fp)
81109010:	00f6f684 	movi	r3,-9254
81109014:	10c0388d 	sth	r3,226(r2)
	buffer_data->pixel_data_block[1].pixel[46] = 0xDDDC;
81109018:	e0bffe17 	ldw	r2,-8(fp)
8110901c:	00f77704 	movi	r3,-8740
81109020:	10c0390d 	sth	r3,228(r2)
	buffer_data->pixel_data_block[1].pixel[47] = 0xDFDE;
81109024:	e0bffe17 	ldw	r2,-8(fp)
81109028:	00f7f784 	movi	r3,-8226
8110902c:	10c0398d 	sth	r3,230(r2)
	buffer_data->pixel_data_block[1].pixel[48] = 0xE1E0;
81109030:	e0bffe17 	ldw	r2,-8(fp)
81109034:	00f87804 	movi	r3,-7712
81109038:	10c03a0d 	sth	r3,232(r2)
	buffer_data->pixel_data_block[1].pixel[49] = 0xE3E2;
8110903c:	e0bffe17 	ldw	r2,-8(fp)
81109040:	00f8f884 	movi	r3,-7198
81109044:	10c03a8d 	sth	r3,234(r2)
	buffer_data->pixel_data_block[1].pixel[50] = 0xE5E4;
81109048:	e0bffe17 	ldw	r2,-8(fp)
8110904c:	00f97904 	movi	r3,-6684
81109050:	10c03b0d 	sth	r3,236(r2)
	buffer_data->pixel_data_block[1].pixel[51] = 0xE7E6;
81109054:	e0bffe17 	ldw	r2,-8(fp)
81109058:	00f9f984 	movi	r3,-6170
8110905c:	10c03b8d 	sth	r3,238(r2)
	buffer_data->pixel_data_block[1].pixel[52] = 0xE9E8;
81109060:	e0bffe17 	ldw	r2,-8(fp)
81109064:	00fa7a04 	movi	r3,-5656
81109068:	10c03c0d 	sth	r3,240(r2)
	buffer_data->pixel_data_block[1].pixel[53] = 0xEBEA;
8110906c:	e0bffe17 	ldw	r2,-8(fp)
81109070:	00fafa84 	movi	r3,-5142
81109074:	10c03c8d 	sth	r3,242(r2)
	buffer_data->pixel_data_block[1].pixel[54] = 0xEDEC;
81109078:	e0bffe17 	ldw	r2,-8(fp)
8110907c:	00fb7b04 	movi	r3,-4628
81109080:	10c03d0d 	sth	r3,244(r2)
	buffer_data->pixel_data_block[1].pixel[55] = 0xEFEE;
81109084:	e0bffe17 	ldw	r2,-8(fp)
81109088:	00fbfb84 	movi	r3,-4114
8110908c:	10c03d8d 	sth	r3,246(r2)
	buffer_data->pixel_data_block[1].pixel[56] = 0xF1F0;
81109090:	e0bffe17 	ldw	r2,-8(fp)
81109094:	00fc7c04 	movi	r3,-3600
81109098:	10c03e0d 	sth	r3,248(r2)
	buffer_data->pixel_data_block[1].pixel[57] = 0xF3F2;
8110909c:	e0bffe17 	ldw	r2,-8(fp)
811090a0:	00fcfc84 	movi	r3,-3086
811090a4:	10c03e8d 	sth	r3,250(r2)
	buffer_data->pixel_data_block[1].pixel[58] = 0xF5F4;
811090a8:	e0bffe17 	ldw	r2,-8(fp)
811090ac:	00fd7d04 	movi	r3,-2572
811090b0:	10c03f0d 	sth	r3,252(r2)
	buffer_data->pixel_data_block[1].pixel[59] = 0xF7F6;
811090b4:	e0bffe17 	ldw	r2,-8(fp)
811090b8:	00fdfd84 	movi	r3,-2058
811090bc:	10c03f8d 	sth	r3,254(r2)
	buffer_data->pixel_data_block[1].pixel[60] = 0xF9F8;
811090c0:	e0bffe17 	ldw	r2,-8(fp)
811090c4:	00fe7e04 	movi	r3,-1544
811090c8:	10c0400d 	sth	r3,256(r2)
	buffer_data->pixel_data_block[1].pixel[61] = 0xFBFA;
811090cc:	e0bffe17 	ldw	r2,-8(fp)
811090d0:	00fefe84 	movi	r3,-1030
811090d4:	10c0408d 	sth	r3,258(r2)
	buffer_data->pixel_data_block[1].pixel[62] = 0xFDFC;
811090d8:	e0bffe17 	ldw	r2,-8(fp)
811090dc:	00ff7f04 	movi	r3,-516
811090e0:	10c0410d 	sth	r3,260(r2)
	buffer_data->pixel_data_block[1].pixel[63] = 0xFFFE;
811090e4:	e0bffe17 	ldw	r2,-8(fp)
811090e8:	00ffff84 	movi	r3,-2
811090ec:	10c0418d 	sth	r3,262(r2)
	buffer_data->pixel_data_block[1].mask = 0xFFFFFFFFFFFFFFFF;
811090f0:	e0bffe17 	ldw	r2,-8(fp)
811090f4:	00ffffc4 	movi	r3,-1
811090f8:	10c04215 	stw	r3,264(r2)
811090fc:	00ffffc4 	movi	r3,-1
81109100:	10c04315 	stw	r3,268(r2)

	buffer_data->pixel_data_block[2] = buffer_data->pixel_data_block[0];
81109104:	e0bffe17 	ldw	r2,-8(fp)
81109108:	e0fffe17 	ldw	r3,-8(fp)
8110910c:	10804404 	addi	r2,r2,272
81109110:	1809883a 	mov	r4,r3
81109114:	00c02204 	movi	r3,136
81109118:	180d883a 	mov	r6,r3
8110911c:	200b883a 	mov	r5,r4
81109120:	1009883a 	mov	r4,r2
81109124:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[3] = buffer_data->pixel_data_block[1];
81109128:	e0fffe17 	ldw	r3,-8(fp)
8110912c:	e0bffe17 	ldw	r2,-8(fp)
81109130:	18c06604 	addi	r3,r3,408
81109134:	10802204 	addi	r2,r2,136
81109138:	01002204 	movi	r4,136
8110913c:	200d883a 	mov	r6,r4
81109140:	100b883a 	mov	r5,r2
81109144:	1809883a 	mov	r4,r3
81109148:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[4] = buffer_data->pixel_data_block[2];
8110914c:	e0fffe17 	ldw	r3,-8(fp)
81109150:	e0bffe17 	ldw	r2,-8(fp)
81109154:	18c08804 	addi	r3,r3,544
81109158:	10804404 	addi	r2,r2,272
8110915c:	01002204 	movi	r4,136
81109160:	200d883a 	mov	r6,r4
81109164:	100b883a 	mov	r5,r2
81109168:	1809883a 	mov	r4,r3
8110916c:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[5] = buffer_data->pixel_data_block[3];
81109170:	e0fffe17 	ldw	r3,-8(fp)
81109174:	e0bffe17 	ldw	r2,-8(fp)
81109178:	18c0aa04 	addi	r3,r3,680
8110917c:	10806604 	addi	r2,r2,408
81109180:	01002204 	movi	r4,136
81109184:	200d883a 	mov	r6,r4
81109188:	100b883a 	mov	r5,r2
8110918c:	1809883a 	mov	r4,r3
81109190:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[6] = buffer_data->pixel_data_block[4];
81109194:	e0fffe17 	ldw	r3,-8(fp)
81109198:	e0bffe17 	ldw	r2,-8(fp)
8110919c:	18c0cc04 	addi	r3,r3,816
811091a0:	10808804 	addi	r2,r2,544
811091a4:	01002204 	movi	r4,136
811091a8:	200d883a 	mov	r6,r4
811091ac:	100b883a 	mov	r5,r2
811091b0:	1809883a 	mov	r4,r3
811091b4:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[7] = buffer_data->pixel_data_block[5];
811091b8:	e0fffe17 	ldw	r3,-8(fp)
811091bc:	e0bffe17 	ldw	r2,-8(fp)
811091c0:	18c0ee04 	addi	r3,r3,952
811091c4:	1080aa04 	addi	r2,r2,680
811091c8:	01002204 	movi	r4,136
811091cc:	200d883a 	mov	r6,r4
811091d0:	100b883a 	mov	r5,r2
811091d4:	1809883a 	mov	r4,r3
811091d8:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[8] = buffer_data->pixel_data_block[6];
811091dc:	e0fffe17 	ldw	r3,-8(fp)
811091e0:	e0bffe17 	ldw	r2,-8(fp)
811091e4:	18c11004 	addi	r3,r3,1088
811091e8:	1080cc04 	addi	r2,r2,816
811091ec:	01002204 	movi	r4,136
811091f0:	200d883a 	mov	r6,r4
811091f4:	100b883a 	mov	r5,r2
811091f8:	1809883a 	mov	r4,r3
811091fc:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[9] = buffer_data->pixel_data_block[7];
81109200:	e0fffe17 	ldw	r3,-8(fp)
81109204:	e0bffe17 	ldw	r2,-8(fp)
81109208:	18c13204 	addi	r3,r3,1224
8110920c:	1080ee04 	addi	r2,r2,952
81109210:	01002204 	movi	r4,136
81109214:	200d883a 	mov	r6,r4
81109218:	100b883a 	mov	r5,r2
8110921c:	1809883a 	mov	r4,r3
81109220:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[10] = buffer_data->pixel_data_block[8];
81109224:	e0fffe17 	ldw	r3,-8(fp)
81109228:	e0bffe17 	ldw	r2,-8(fp)
8110922c:	18c15404 	addi	r3,r3,1360
81109230:	10811004 	addi	r2,r2,1088
81109234:	01002204 	movi	r4,136
81109238:	200d883a 	mov	r6,r4
8110923c:	100b883a 	mov	r5,r2
81109240:	1809883a 	mov	r4,r3
81109244:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[11] = buffer_data->pixel_data_block[9];
81109248:	e0fffe17 	ldw	r3,-8(fp)
8110924c:	e0bffe17 	ldw	r2,-8(fp)
81109250:	18c17604 	addi	r3,r3,1496
81109254:	10813204 	addi	r2,r2,1224
81109258:	01002204 	movi	r4,136
8110925c:	200d883a 	mov	r6,r4
81109260:	100b883a 	mov	r5,r2
81109264:	1809883a 	mov	r4,r3
81109268:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[12] = buffer_data->pixel_data_block[10];
8110926c:	e0fffe17 	ldw	r3,-8(fp)
81109270:	e0bffe17 	ldw	r2,-8(fp)
81109274:	18c19804 	addi	r3,r3,1632
81109278:	10815404 	addi	r2,r2,1360
8110927c:	01002204 	movi	r4,136
81109280:	200d883a 	mov	r6,r4
81109284:	100b883a 	mov	r5,r2
81109288:	1809883a 	mov	r4,r3
8110928c:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[13] = buffer_data->pixel_data_block[11];
81109290:	e0fffe17 	ldw	r3,-8(fp)
81109294:	e0bffe17 	ldw	r2,-8(fp)
81109298:	18c1ba04 	addi	r3,r3,1768
8110929c:	10817604 	addi	r2,r2,1496
811092a0:	01002204 	movi	r4,136
811092a4:	200d883a 	mov	r6,r4
811092a8:	100b883a 	mov	r5,r2
811092ac:	1809883a 	mov	r4,r3
811092b0:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[14] = buffer_data->pixel_data_block[12];
811092b4:	e0fffe17 	ldw	r3,-8(fp)
811092b8:	e0bffe17 	ldw	r2,-8(fp)
811092bc:	18c1dc04 	addi	r3,r3,1904
811092c0:	10819804 	addi	r2,r2,1632
811092c4:	01002204 	movi	r4,136
811092c8:	200d883a 	mov	r6,r4
811092cc:	100b883a 	mov	r5,r2
811092d0:	1809883a 	mov	r4,r3
811092d4:	110b8ec0 	call	8110b8ec <memcpy>
	buffer_data->pixel_data_block[15] = buffer_data->pixel_data_block[13];
811092d8:	e0fffe17 	ldw	r3,-8(fp)
811092dc:	e0bffe17 	ldw	r2,-8(fp)
811092e0:	18c1fe04 	addi	r3,r3,2040
811092e4:	1081ba04 	addi	r2,r2,1768
811092e8:	01002204 	movi	r4,136
811092ec:	200d883a 	mov	r6,r4
811092f0:	100b883a 	mov	r5,r2
811092f4:	1809883a 	mov	r4,r3
811092f8:	110b8ec0 	call	8110b8ec <memcpy>
//		pDDR++;
//	}

// init DMA

	if (fee_init_m1_dma()) {
811092fc:	11012800 	call	81101280 <fee_init_m1_dma>
81109300:	10000326 	beq	r2,zero,81109310 <main+0xbf8>
		printf("dma_m1 iniciado corretamente \n");
81109304:	012044b4 	movhi	r4,33042
81109308:	21389f04 	addi	r4,r4,-7556
8110930c:	110bb800 	call	8110bb80 <puts>
	}

	if (fee_init_m2_dma()) {
81109310:	11013280 	call	81101328 <fee_init_m2_dma>
81109314:	10000326 	beq	r2,zero,81109324 <main+0xc0c>
		printf("dma_m2 iniciado corretamente \n");
81109318:	012044b4 	movhi	r4,33042
8110931c:	2138a704 	addi	r4,r4,-7524
81109320:	110bb800 	call	8110bb80 <puts>
	}

	bool loop = TRUE;
81109324:	00800044 	movi	r2,1
81109328:	e0bff815 	stw	r2,-32(fp)

	comm_update_link_status(&spw_a);
8110932c:	012044b4 	movhi	r4,33042
81109330:	21035b04 	addi	r4,r4,3436
81109334:	1100c240 	call	81100c24 <comm_update_link_status>
	if (spw_a.link_status.running) {
81109338:	00a044b4 	movhi	r2,33042
8110933c:	10835b04 	addi	r2,r2,3436
81109340:	10800b17 	ldw	r2,44(r2)
81109344:	10000726 	beq	r2,zero,81109364 <main+0xc4c>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1R_MASK);
81109348:	01400084 	movi	r5,2
8110934c:	0009883a 	mov	r4,zero
81109350:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1G_MASK);
81109354:	01400044 	movi	r5,1
81109358:	01000044 	movi	r4,1
8110935c:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
81109360:	00000606 	br	8110937c <main+0xc64>
	} else {
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1G_MASK);
81109364:	01400044 	movi	r5,1
81109368:	0009883a 	mov	r4,zero
8110936c:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1R_MASK);
81109370:	01400084 	movi	r5,2
81109374:	01000044 	movi	r4,1
81109378:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	}

	comm_update_link_status(&spw_h);
8110937c:	012044b4 	movhi	r4,33042
81109380:	21034604 	addi	r4,r4,3352
81109384:	1100c240 	call	81100c24 <comm_update_link_status>
	if (spw_h.link_status.running) {
81109388:	00a044b4 	movhi	r2,33042
8110938c:	10834604 	addi	r2,r2,3352
81109390:	10800b17 	ldw	r2,44(r2)
81109394:	10000726 	beq	r2,zero,811093b4 <main+0xc9c>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8R_MASK);
81109398:	01600014 	movui	r5,32768
8110939c:	0009883a 	mov	r4,zero
811093a0:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8G_MASK);
811093a4:	01500004 	movi	r5,16384
811093a8:	01000044 	movi	r4,1
811093ac:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
811093b0:	00005606 	br	8110950c <main+0xdf4>
	} else {
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8G_MASK);
811093b4:	01500004 	movi	r5,16384
811093b8:	0009883a 	mov	r4,zero
811093bc:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
811093c0:	01600014 	movui	r5,32768
811093c4:	01000044 	movi	r4,1
811093c8:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	}

	while (loop) {
811093cc:	00004f06 	br	8110950c <main+0xdf4>
		printf("selecione memoria \n");
811093d0:	012044b4 	movhi	r4,33042
811093d4:	2138af04 	addi	r4,r4,-7492
811093d8:	110bb800 	call	8110bb80 <puts>
		switch (getchar()) {
811093dc:	d0a00917 	ldw	r2,-32732(gp)
811093e0:	10800117 	ldw	r2,4(r2)
811093e4:	1009883a 	mov	r4,r2
811093e8:	110b8640 	call	8110b864 <getc>
811093ec:	10c00ca0 	cmpeqi	r3,r2,50
811093f0:	1800171e 	bne	r3,zero,81109450 <main+0xd38>
811093f4:	10c00cc8 	cmpgei	r3,r2,51
811093f8:	1800031e 	bne	r3,zero,81109408 <main+0xcf0>
811093fc:	10800c60 	cmpeqi	r2,r2,49
81109400:	1000061e 	bne	r2,zero,8110941c <main+0xd04>
81109404:	00003d06 	br	811094fc <main+0xde4>
81109408:	10c01860 	cmpeqi	r3,r2,97
8110940c:	18001d1e 	bne	r3,zero,81109484 <main+0xd6c>
81109410:	10801ca0 	cmpeqi	r2,r2,114
81109414:	1000341e 	bne	r2,zero,811094e8 <main+0xdd0>
81109418:	00003806 	br	811094fc <main+0xde4>
		case '1':
			printf("m2 R \n");
8110941c:	012044b4 	movhi	r4,33042
81109420:	2138b404 	addi	r4,r4,-7472
81109424:	110bb800 	call	8110bb80 <puts>
			if (fee_dma_m2_transfer(0, 16, right_buffer, channel_a_buffer)) {
81109428:	01c00044 	movi	r7,1
8110942c:	000d883a 	mov	r6,zero
81109430:	01400404 	movi	r5,16
81109434:	0009883a 	mov	r4,zero
81109438:	11017dc0 	call	811017dc <fee_dma_m2_transfer>
8110943c:	10003326 	beq	r2,zero,8110950c <main+0xdf4>
				printf("dma_m2 transferido corretamente \n");
81109440:	012044b4 	movhi	r4,33042
81109444:	2138b604 	addi	r4,r4,-7464
81109448:	110bb800 	call	8110bb80 <puts>
			}
			break;
8110944c:	00002f06 	br	8110950c <main+0xdf4>

		case '2':
			printf("m2 L \n");
81109450:	012044b4 	movhi	r4,33042
81109454:	2138bf04 	addi	r4,r4,-7428
81109458:	110bb800 	call	8110bb80 <puts>
			if (fee_dma_m2_transfer(0, 16, left_buffer, channel_a_buffer)) {
8110945c:	01c00044 	movi	r7,1
81109460:	01800044 	movi	r6,1
81109464:	01400404 	movi	r5,16
81109468:	0009883a 	mov	r4,zero
8110946c:	11017dc0 	call	811017dc <fee_dma_m2_transfer>
81109470:	10002626 	beq	r2,zero,8110950c <main+0xdf4>
				printf("dma_m2 transferido corretamente \n");
81109474:	012044b4 	movhi	r4,33042
81109478:	2138b604 	addi	r4,r4,-7464
8110947c:	110bb800 	call	8110bb80 <puts>
			}
			break;
81109480:	00002206 	br	8110950c <main+0xdf4>

		case 'a':
			printf("a \n");
81109484:	012044b4 	movhi	r4,33042
81109488:	2138c104 	addi	r4,r4,-7420
8110948c:	110bb800 	call	8110bb80 <puts>
			if (fee_dma_m2_transfer(0, 16, right_buffer, channel_a_buffer)) {
81109490:	01c00044 	movi	r7,1
81109494:	000d883a 	mov	r6,zero
81109498:	01400404 	movi	r5,16
8110949c:	0009883a 	mov	r4,zero
811094a0:	11017dc0 	call	811017dc <fee_dma_m2_transfer>
811094a4:	10000326 	beq	r2,zero,811094b4 <main+0xd9c>
				printf("dma_m2 transferido corretamente \n");
811094a8:	012044b4 	movhi	r4,33042
811094ac:	2138b604 	addi	r4,r4,-7464
811094b0:	110bb800 	call	8110bb80 <puts>
			}
//			if (fee_dma_m1_transfer(0, 16, left_buffer, channel_a_buffer)) {
//				printf("dma_m1 transferido corretamente \n");
//			}
			usleep(500);
811094b4:	01007d04 	movi	r4,500
811094b8:	1118c880 	call	81118c88 <usleep>
			comm_update_buffers_status(&spw_a);
811094bc:	012044b4 	movhi	r4,33042
811094c0:	21035b04 	addi	r4,r4,3436
811094c4:	1100f780 	call	81100f78 <comm_update_buffers_status>
			printf("empty: %u \n", spw_a.buffer_status.right_buffer_empty);
811094c8:	00a044b4 	movhi	r2,33042
811094cc:	10835b04 	addi	r2,r2,3436
811094d0:	10801417 	ldw	r2,80(r2)
811094d4:	100b883a 	mov	r5,r2
811094d8:	012044b4 	movhi	r4,33042
811094dc:	2138c204 	addi	r4,r4,-7416
811094e0:	110ba640 	call	8110ba64 <printf>
			break;
811094e4:	00000906 	br	8110950c <main+0xdf4>

		case 'r':
			printf("r \n");
811094e8:	012044b4 	movhi	r4,33042
811094ec:	2138c504 	addi	r4,r4,-7404
811094f0:	110bb800 	call	8110bb80 <puts>
			loop = FALSE;
811094f4:	e03ff815 	stw	zero,-32(fp)
			break;
811094f8:	00000406 	br	8110950c <main+0xdf4>

		default:
			printf("errou \n");
811094fc:	012044b4 	movhi	r4,33042
81109500:	2138c604 	addi	r4,r4,-7400
81109504:	110bb800 	call	8110bb80 <puts>
			break;
81109508:	0001883a 	nop
	} else {
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8G_MASK);
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
	}

	while (loop) {
8110950c:	e0bff817 	ldw	r2,-32(fp)
81109510:	103faf1e 	bne	r2,zero,811093d0 <__reset+0xfb0e93d0>
			printf("errou \n");
			break;
		}
	}

	comm_config_link(&spw_a);
81109514:	012044b4 	movhi	r4,33042
81109518:	21035b04 	addi	r4,r4,3436
8110951c:	11009780 	call	81100978 <comm_config_link>
	comm_config_link(&spw_h);
81109520:	012044b4 	movhi	r4,33042
81109524:	21034604 	addi	r4,r4,3352
81109528:	11009780 	call	81100978 <comm_config_link>

	//*spw_a.channel_address = 0x102;
	printf("%08X", *(spw_a.channel_address));
8110952c:	00a044b4 	movhi	r2,33042
81109530:	10835b04 	addi	r2,r2,3436
81109534:	10800017 	ldw	r2,0(r2)
81109538:	10800017 	ldw	r2,0(r2)
8110953c:	100b883a 	mov	r5,r2
81109540:	012044b4 	movhi	r4,33042
81109544:	2138c804 	addi	r4,r4,-7392
81109548:	110ba640 	call	8110ba64 <printf>

	usleep(10000);
8110954c:	0109c404 	movi	r4,10000
81109550:	1118c880 	call	81118c88 <usleep>

	comm_update_link_status(&spw_a);
81109554:	012044b4 	movhi	r4,33042
81109558:	21035b04 	addi	r4,r4,3436
8110955c:	1100c240 	call	81100c24 <comm_update_link_status>
	if (spw_a.link_status.running) {
81109560:	00a044b4 	movhi	r2,33042
81109564:	10835b04 	addi	r2,r2,3436
81109568:	10800b17 	ldw	r2,44(r2)
8110956c:	10000726 	beq	r2,zero,8110958c <main+0xe74>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1R_MASK);
81109570:	01400084 	movi	r5,2
81109574:	0009883a 	mov	r4,zero
81109578:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1G_MASK);
8110957c:	01400044 	movi	r5,1
81109580:	01000044 	movi	r4,1
81109584:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
81109588:	00000606 	br	811095a4 <main+0xe8c>
	} else {
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_1G_MASK);
8110958c:	01400044 	movi	r5,1
81109590:	0009883a 	mov	r4,zero
81109594:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1R_MASK);
81109598:	01400084 	movi	r5,2
8110959c:	01000044 	movi	r4,1
811095a0:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	}

	comm_update_link_status(&spw_h);
811095a4:	012044b4 	movhi	r4,33042
811095a8:	21034604 	addi	r4,r4,3352
811095ac:	1100c240 	call	81100c24 <comm_update_link_status>
	if (spw_h.link_status.running) {
811095b0:	00a044b4 	movhi	r2,33042
811095b4:	10834604 	addi	r2,r2,3352
811095b8:	10800b17 	ldw	r2,44(r2)
811095bc:	10000726 	beq	r2,zero,811095dc <main+0xec4>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8R_MASK);
811095c0:	01600014 	movui	r5,32768
811095c4:	0009883a 	mov	r4,zero
811095c8:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8G_MASK);
811095cc:	01500004 	movi	r5,16384
811095d0:	01000044 	movi	r4,1
811095d4:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
811095d8:	00000606 	br	811095f4 <main+0xedc>
	} else {
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_8G_MASK);
811095dc:	01500004 	movi	r5,16384
811095e0:	0009883a 	mov	r4,zero
811095e4:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
811095e8:	01600014 	movui	r5,32768
811095ec:	01000044 	movi	r4,1
811095f0:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
	}

	int i = 0;
811095f4:	e03ff915 	stw	zero,-28(fp)
	loop = TRUE;
811095f8:	00800044 	movi	r2,1
811095fc:	e0bff815 	stw	r2,-32(fp)
	while (loop) {
81109600:	00002106 	br	81109688 <main+0xf70>
		for (i = 0; i < 1000; i++) {
81109604:	e03ff915 	stw	zero,-28(fp)
81109608:	00000506 	br	81109620 <main+0xf08>
			usleep(1000);
8110960c:	0100fa04 	movi	r4,1000
81109610:	1118c880 	call	81118c88 <usleep>
	}

	int i = 0;
	loop = TRUE;
	while (loop) {
		for (i = 0; i < 1000; i++) {
81109614:	e0bff917 	ldw	r2,-28(fp)
81109618:	10800044 	addi	r2,r2,1
8110961c:	e0bff915 	stw	r2,-28(fp)
81109620:	e0bff917 	ldw	r2,-28(fp)
81109624:	1080fa10 	cmplti	r2,r2,1000
81109628:	103ff81e 	bne	r2,zero,8110960c <__reset+0xfb0e960c>
			usleep(1000);
		}
		comm_update_buffers_status(&spw_a);
8110962c:	012044b4 	movhi	r4,33042
81109630:	21035b04 	addi	r4,r4,3436
81109634:	1100f780 	call	81100f78 <comm_update_buffers_status>
		printf("empty r: %u \n", spw_a.buffer_status.right_buffer_empty);
81109638:	00a044b4 	movhi	r2,33042
8110963c:	10835b04 	addi	r2,r2,3436
81109640:	10801417 	ldw	r2,80(r2)
81109644:	100b883a 	mov	r5,r2
81109648:	012044b4 	movhi	r4,33042
8110964c:	21389604 	addi	r4,r4,-7592
81109650:	110ba640 	call	8110ba64 <printf>
		printf("empty l: %u \n", spw_a.buffer_status.left_buffer_empty);
81109654:	00a044b4 	movhi	r2,33042
81109658:	10835b04 	addi	r2,r2,3436
8110965c:	10801317 	ldw	r2,76(r2)
81109660:	100b883a 	mov	r5,r2
81109664:	012044b4 	movhi	r4,33042
81109668:	2138ca04 	addi	r4,r4,-7384
8110966c:	110ba640 	call	8110ba64 <printf>
		printf("int_cnt: %u \n", int_cnt);
81109670:	d0a01a03 	ldbu	r2,-32664(gp)
81109674:	10803fcc 	andi	r2,r2,255
81109678:	100b883a 	mov	r5,r2
8110967c:	012044b4 	movhi	r4,33042
81109680:	21389204 	addi	r4,r4,-7608
81109684:	110ba640 	call	8110ba64 <printf>
		LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
	}

	int i = 0;
	loop = TRUE;
	while (loop) {
81109688:	e0bff817 	ldw	r2,-32(fp)
8110968c:	103fdd1e 	bne	r2,zero,81109604 <__reset+0xfb0e9604>
	}

//}

//getchar();
	printf("passou 1 \n");
81109690:	012044b4 	movhi	r4,33042
81109694:	2138ce04 	addi	r4,r4,-7368
81109698:	110bb800 	call	8110bb80 <puts>
//printf("%d \n", data);

//if (*pSrc++ != *pDes++){

//Realiza teste dos LEDS, entra em um loop infinito.
	TestLeds();
8110969c:	11096e00 	call	811096e0 <TestLeds>

	//Teste de transferencia com DMA (M2 -> M1);
	//TestDMA_M2_M1();

	//Acende os leds de status e atualiza a temperatura da FPGA no display de 7 segmentos a cada 1 segundo
	LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_ALL_MASK);
811096a0:	014007f4 	movhi	r5,31
811096a4:	01000044 	movi	r4,1
811096a8:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>

	//FTDI_WRITE_REG(FTDI_BYTE_ENABLE_BURST_REG_OFFSET, 0b00001111);
	//FTDI_WRITE_REG(FTDI_DATA_BURST_REG_OFFSET, 0xF0A0B0C0);

	while (1) {
		TEMP_Read(&tempFPGA, &tempBoard);
811096ac:	e0ffff44 	addi	r3,fp,-3
811096b0:	e0bfff04 	addi	r2,fp,-4
811096b4:	180b883a 	mov	r5,r3
811096b8:	1009883a 	mov	r4,r2
811096bc:	1107f440 	call	81107f44 <TEMP_Read>
		SSDP_UPDATE(tempFPGA);
811096c0:	e0bfff03 	ldbu	r2,-4(fp)
811096c4:	10803fcc 	andi	r2,r2,255
811096c8:	1009883a 	mov	r4,r2
811096cc:	11036a00 	call	811036a0 <SSDP_UPDATE>
		usleep(1000 * 1000);
811096d0:	010003f4 	movhi	r4,15
811096d4:	21109004 	addi	r4,r4,16960
811096d8:	1118c880 	call	81118c88 <usleep>
		// TESTE EPC - Write
		//ConfigFTDIWrite();
		//WriteCicle();

//DummyWrite();
	}
811096dc:	003ff306 	br	811096ac <__reset+0xfb0e96ac>

811096e0 <TestLeds>:
 usleep(5*1000);
 }
 }
 */

void TestLeds(void) {
811096e0:	defffd04 	addi	sp,sp,-12
811096e4:	dfc00215 	stw	ra,8(sp)
811096e8:	df000115 	stw	fp,4(sp)
811096ec:	df000104 	addi	fp,sp,4
	alt_8 led = 1;
811096f0:	00800044 	movi	r2,1
811096f4:	e0bfff05 	stb	r2,-4(fp)
	//SSDP_CONFIG(SSDP_TEST_MODE);

	alt_8 tempFPGA = 0;
811096f8:	e03fff85 	stb	zero,-2(fp)
	alt_8 tempBoard = 0;
811096fc:	e03fffc5 	stb	zero,-1(fp)

	alt_u8 red = 0;
81109700:	e03fff45 	stb	zero,-3(fp)

	TEMP_Read(&tempFPGA, &tempBoard);
81109704:	e0ffffc4 	addi	r3,fp,-1
81109708:	e0bfff84 	addi	r2,fp,-2
8110970c:	180b883a 	mov	r5,r3
81109710:	1009883a 	mov	r4,r2
81109714:	1107f440 	call	81107f44 <TEMP_Read>
	SSDP_UPDATE(tempFPGA);
81109718:	e0bfff83 	ldbu	r2,-2(fp)
8110971c:	10803fcc 	andi	r2,r2,255
81109720:	1009883a 	mov	r4,r2
81109724:	11036a00 	call	811036a0 <SSDP_UPDATE>

	while (1) {
		switch (led) {
81109728:	e0bfff07 	ldb	r2,-4(fp)
8110972c:	10c00268 	cmpgeui	r3,r2,9
81109730:	1800ac1e 	bne	r3,zero,811099e4 <TestLeds+0x304>
81109734:	100690ba 	slli	r3,r2,2
81109738:	00a04474 	movhi	r2,33041
8110973c:	10a5d304 	addi	r2,r2,-26804
81109740:	1885883a 	add	r2,r3,r2
81109744:	10800017 	ldw	r2,0(r2)
81109748:	1000683a 	jmp	r2
8110974c:	811099e4 	muli	r4,r16,16999
81109750:	81109770 	cmpltui	r4,r16,16989
81109754:	811097bc 	xorhi	r4,r16,16990
81109758:	81109808 	cmpgei	r4,r16,16992
8110975c:	81109854 	ori	r4,r16,16993
81109760:	811098a0 	cmpeqi	r4,r16,16994
81109764:	811098ec 	andhi	r4,r16,16995
81109768:	81109938 	rdprs	r4,r16,16996
8110976c:	81109984 	addi	r4,r16,16998
		case 1:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_0_MASK);
81109770:	01400044 	movi	r5,1
81109774:	01000044 	movi	r4,1
81109778:	110232c0 	call	8110232c <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_1_MASK);
8110977c:	014000b4 	movhi	r5,2
81109780:	01000044 	movi	r4,1
81109784:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			if (red) {
81109788:	e0bfff43 	ldbu	r2,-3(fp)
8110978c:	10000426 	beq	r2,zero,811097a0 <TestLeds+0xc0>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1R_MASK);
81109790:	01400084 	movi	r5,2
81109794:	01000044 	movi	r4,1
81109798:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
8110979c:	00000306 	br	811097ac <TestLeds+0xcc>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_1G_MASK);
811097a0:	01400044 	movi	r5,1
811097a4:	01000044 	movi	r4,1
811097a8:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			}
			led++;
811097ac:	e0bfff03 	ldbu	r2,-4(fp)
811097b0:	10800044 	addi	r2,r2,1
811097b4:	e0bfff05 	stb	r2,-4(fp)
			break;
811097b8:	00008b06 	br	811099e8 <TestLeds+0x308>
		case 2:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_1_MASK);
811097bc:	01400084 	movi	r5,2
811097c0:	01000044 	movi	r4,1
811097c4:	110232c0 	call	8110232c <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_2_MASK);
811097c8:	01400134 	movhi	r5,4
811097cc:	01000044 	movi	r4,1
811097d0:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			if (red) {
811097d4:	e0bfff43 	ldbu	r2,-3(fp)
811097d8:	10000426 	beq	r2,zero,811097ec <TestLeds+0x10c>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_2R_MASK);
811097dc:	01400204 	movi	r5,8
811097e0:	01000044 	movi	r4,1
811097e4:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
811097e8:	00000306 	br	811097f8 <TestLeds+0x118>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_2G_MASK);
811097ec:	01400104 	movi	r5,4
811097f0:	01000044 	movi	r4,1
811097f4:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			}
			led++;
811097f8:	e0bfff03 	ldbu	r2,-4(fp)
811097fc:	10800044 	addi	r2,r2,1
81109800:	e0bfff05 	stb	r2,-4(fp)
			break;
81109804:	00007806 	br	811099e8 <TestLeds+0x308>
		case 3:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_2_MASK);
81109808:	01400104 	movi	r5,4
8110980c:	01000044 	movi	r4,1
81109810:	110232c0 	call	8110232c <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_3_MASK);
81109814:	01400234 	movhi	r5,8
81109818:	01000044 	movi	r4,1
8110981c:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			if (red) {
81109820:	e0bfff43 	ldbu	r2,-3(fp)
81109824:	10000426 	beq	r2,zero,81109838 <TestLeds+0x158>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_3R_MASK);
81109828:	01400804 	movi	r5,32
8110982c:	01000044 	movi	r4,1
81109830:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
81109834:	00000306 	br	81109844 <TestLeds+0x164>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_3G_MASK);
81109838:	01400404 	movi	r5,16
8110983c:	01000044 	movi	r4,1
81109840:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			}
			led++;
81109844:	e0bfff03 	ldbu	r2,-4(fp)
81109848:	10800044 	addi	r2,r2,1
8110984c:	e0bfff05 	stb	r2,-4(fp)
			break;
81109850:	00006506 	br	811099e8 <TestLeds+0x308>
		case 4:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_3_MASK);
81109854:	01400204 	movi	r5,8
81109858:	01000044 	movi	r4,1
8110985c:	110232c0 	call	8110232c <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_4_MASK);
81109860:	01400434 	movhi	r5,16
81109864:	01000044 	movi	r4,1
81109868:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			if (red) {
8110986c:	e0bfff43 	ldbu	r2,-3(fp)
81109870:	10000426 	beq	r2,zero,81109884 <TestLeds+0x1a4>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_4R_MASK);
81109874:	01402004 	movi	r5,128
81109878:	01000044 	movi	r4,1
8110987c:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
81109880:	00000306 	br	81109890 <TestLeds+0x1b0>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_4G_MASK);
81109884:	01401004 	movi	r5,64
81109888:	01000044 	movi	r4,1
8110988c:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			}
			led++;
81109890:	e0bfff03 	ldbu	r2,-4(fp)
81109894:	10800044 	addi	r2,r2,1
81109898:	e0bfff05 	stb	r2,-4(fp)
			break;
8110989c:	00005206 	br	811099e8 <TestLeds+0x308>
		case 5:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_4_MASK);
811098a0:	01400404 	movi	r5,16
811098a4:	01000044 	movi	r4,1
811098a8:	110232c0 	call	8110232c <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_1_MASK);
811098ac:	014000b4 	movhi	r5,2
811098b0:	01000044 	movi	r4,1
811098b4:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			if (red) {
811098b8:	e0bfff43 	ldbu	r2,-3(fp)
811098bc:	10000426 	beq	r2,zero,811098d0 <TestLeds+0x1f0>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_5R_MASK);
811098c0:	01408004 	movi	r5,512
811098c4:	01000044 	movi	r4,1
811098c8:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
811098cc:	00000306 	br	811098dc <TestLeds+0x1fc>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_5G_MASK);
811098d0:	01404004 	movi	r5,256
811098d4:	01000044 	movi	r4,1
811098d8:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			}
			led++;
811098dc:	e0bfff03 	ldbu	r2,-4(fp)
811098e0:	10800044 	addi	r2,r2,1
811098e4:	e0bfff05 	stb	r2,-4(fp)
			break;
811098e8:	00003f06 	br	811099e8 <TestLeds+0x308>
		case 6:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_5_MASK);
811098ec:	01400804 	movi	r5,32
811098f0:	01000044 	movi	r4,1
811098f4:	110232c0 	call	8110232c <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_2_MASK);
811098f8:	01400134 	movhi	r5,4
811098fc:	01000044 	movi	r4,1
81109900:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			if (red) {
81109904:	e0bfff43 	ldbu	r2,-3(fp)
81109908:	10000426 	beq	r2,zero,8110991c <TestLeds+0x23c>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_6R_MASK);
8110990c:	01420004 	movi	r5,2048
81109910:	01000044 	movi	r4,1
81109914:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
81109918:	00000306 	br	81109928 <TestLeds+0x248>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_6G_MASK);
8110991c:	01410004 	movi	r5,1024
81109920:	01000044 	movi	r4,1
81109924:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			}
			led++;
81109928:	e0bfff03 	ldbu	r2,-4(fp)
8110992c:	10800044 	addi	r2,r2,1
81109930:	e0bfff05 	stb	r2,-4(fp)
			break;
81109934:	00002c06 	br	811099e8 <TestLeds+0x308>
		case 7:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_6_MASK);
81109938:	01401004 	movi	r5,64
8110993c:	01000044 	movi	r4,1
81109940:	110232c0 	call	8110232c <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_3_MASK);
81109944:	01400234 	movhi	r5,8
81109948:	01000044 	movi	r4,1
8110994c:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			if (red) {
81109950:	e0bfff43 	ldbu	r2,-3(fp)
81109954:	10000426 	beq	r2,zero,81109968 <TestLeds+0x288>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_7R_MASK);
81109958:	01480004 	movi	r5,8192
8110995c:	01000044 	movi	r4,1
81109960:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
81109964:	00000306 	br	81109974 <TestLeds+0x294>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_7G_MASK);
81109968:	01440004 	movi	r5,4096
8110996c:	01000044 	movi	r4,1
81109970:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			}
			led++;
81109974:	e0bfff03 	ldbu	r2,-4(fp)
81109978:	10800044 	addi	r2,r2,1
8110997c:	e0bfff05 	stb	r2,-4(fp)
			break;
81109980:	00001906 	br	811099e8 <TestLeds+0x308>
		case 8:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_7_MASK);
81109984:	01402004 	movi	r5,128
81109988:	01000044 	movi	r4,1
8110998c:	110232c0 	call	8110232c <LEDS_BOARD_DRIVE>
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_ST_4_MASK);
81109990:	01400434 	movhi	r5,16
81109994:	01000044 	movi	r4,1
81109998:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			if (red) {
8110999c:	e0bfff43 	ldbu	r2,-3(fp)
811099a0:	10000426 	beq	r2,zero,811099b4 <TestLeds+0x2d4>
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8R_MASK);
811099a4:	01600014 	movui	r5,32768
811099a8:	01000044 	movi	r4,1
811099ac:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
811099b0:	00000306 	br	811099c0 <TestLeds+0x2e0>
			} else {
				LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_8G_MASK);
811099b4:	01500004 	movi	r5,16384
811099b8:	01000044 	movi	r4,1
811099bc:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
			}
			led = 1;
811099c0:	00800044 	movi	r2,1
811099c4:	e0bfff05 	stb	r2,-4(fp)
			if (red) {
811099c8:	e0bfff43 	ldbu	r2,-3(fp)
811099cc:	10000226 	beq	r2,zero,811099d8 <TestLeds+0x2f8>
				red = 0;
811099d0:	e03fff45 	stb	zero,-3(fp)
			} else {
				red = 1;
			}
			break;
811099d4:	00000406 	br	811099e8 <TestLeds+0x308>
			}
			led = 1;
			if (red) {
				red = 0;
			} else {
				red = 1;
811099d8:	00800044 	movi	r2,1
811099dc:	e0bfff45 	stb	r2,-3(fp)
			}
			break;
811099e0:	00000106 	br	811099e8 <TestLeds+0x308>
		default:
			led = 0;
811099e4:	e03fff05 	stb	zero,-4(fp)
		}

		usleep(1000 * 1000);
811099e8:	010003f4 	movhi	r4,15
811099ec:	21109004 	addi	r4,r4,16960
811099f0:	1118c880 	call	81118c88 <usleep>

		LEDS_BOARD_DRIVE(LEDS_OFF, LEDS_BOARD_ALL_MASK);
811099f4:	01403fc4 	movi	r5,255
811099f8:	0009883a 	mov	r4,zero
811099fc:	110232c0 	call	8110232c <LEDS_BOARD_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_ST_ALL_MASK);
81109a00:	014007f4 	movhi	r5,31
81109a04:	0009883a 	mov	r4,zero
81109a08:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_GR_ALL_MASK);
81109a0c:	017fffd4 	movui	r5,65535
81109a10:	0009883a 	mov	r4,zero
81109a14:	11023a40 	call	811023a4 <LEDS_PAINEL_DRIVE>

		TEMP_Read(&tempFPGA, &tempBoard);
81109a18:	e0ffffc4 	addi	r3,fp,-1
81109a1c:	e0bfff84 	addi	r2,fp,-2
81109a20:	180b883a 	mov	r5,r3
81109a24:	1009883a 	mov	r4,r2
81109a28:	1107f440 	call	81107f44 <TEMP_Read>
		SSDP_UPDATE(tempFPGA);
81109a2c:	e0bfff83 	ldbu	r2,-2(fp)
81109a30:	10803fcc 	andi	r2,r2,255
81109a34:	1009883a 	mov	r4,r2
81109a38:	11036a00 	call	811036a0 <SSDP_UPDATE>

	}
81109a3c:	003f3a06 	br	81109728 <__reset+0xfb0e9728>

81109a40 <TestDMA_M1_M2>:
}

bool TestDMA_M1_M2(void) {
81109a40:	deffd404 	addi	sp,sp,-176
81109a44:	dfc02b15 	stw	ra,172(sp)
81109a48:	df002a15 	stw	fp,168(sp)
81109a4c:	dc002915 	stw	r16,164(sp)
81109a50:	df002a04 	addi	fp,sp,168

	alt_msgdma_dev *DMADev = NULL;
81109a54:	e03fde15 	stw	zero,-136(fp)

	if (DMA_OPEN_DEVICE(&DMADev, (char *) DMA_DDR_M1_CSR_BASE) == FALSE) {
81109a58:	e0bfde04 	addi	r2,fp,-136
81109a5c:	01604834 	movhi	r5,33056
81109a60:	294c2804 	addi	r5,r5,12448
81109a64:	1009883a 	mov	r4,r2
81109a68:	11072e80 	call	811072e8 <DMA_OPEN_DEVICE>
81109a6c:	1000051e 	bne	r2,zero,81109a84 <TestDMA_M1_M2+0x44>
		printf("Error Opening DMA Device");
81109a70:	012044b4 	movhi	r4,33042
81109a74:	2138d104 	addi	r4,r4,-7356
81109a78:	110ba640 	call	8110ba64 <printf>
		return FALSE;
81109a7c:	0005883a 	mov	r2,zero
81109a80:	0000cd06 	br	81109db8 <TestDMA_M1_M2+0x378>
	}

	if (DMA_DISPATCHER_RESET(DMADev, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
81109a84:	e0bfde17 	ldw	r2,-136(fp)
81109a88:	000d883a 	mov	r6,zero
81109a8c:	01400044 	movi	r5,1
81109a90:	1009883a 	mov	r4,r2
81109a94:	11074f40 	call	811074f4 <DMA_DISPATCHER_RESET>
81109a98:	1000051e 	bne	r2,zero,81109ab0 <TestDMA_M1_M2+0x70>
		printf("Error Reseting Dispatcher");
81109a9c:	012044b4 	movhi	r4,33042
81109aa0:	2138d804 	addi	r4,r4,-7328
81109aa4:	110ba640 	call	8110ba64 <printf>
		return FALSE;
81109aa8:	0005883a 	mov	r2,zero
81109aac:	0000c206 	br	81109db8 <TestDMA_M1_M2+0x378>
	}

	alt_u32 control_bits = 0x00000000;
81109ab0:	e03fda15 	stw	zero,-152(fp)

	const alt_u32 step = DDR2_M1_MEMORY_SIZE / 16;
81109ab4:	00820034 	movhi	r2,2048
81109ab8:	e0bfdb15 	stw	r2,-148(fp)
	alt_u32 read_addr_arr[16];
	read_addr_arr[0] = DDR2_M1_MEMORY_BASE;
81109abc:	e03fdf15 	stw	zero,-132(fp)
	read_addr_arr[1] = read_addr_arr[0] + step;
81109ac0:	e0ffdf17 	ldw	r3,-132(fp)
81109ac4:	e0bfdb17 	ldw	r2,-148(fp)
81109ac8:	1885883a 	add	r2,r3,r2
81109acc:	e0bfe015 	stw	r2,-128(fp)
	read_addr_arr[2] = read_addr_arr[1] + step;
81109ad0:	e0ffe017 	ldw	r3,-128(fp)
81109ad4:	e0bfdb17 	ldw	r2,-148(fp)
81109ad8:	1885883a 	add	r2,r3,r2
81109adc:	e0bfe115 	stw	r2,-124(fp)
	read_addr_arr[3] = read_addr_arr[2] + step;
81109ae0:	e0ffe117 	ldw	r3,-124(fp)
81109ae4:	e0bfdb17 	ldw	r2,-148(fp)
81109ae8:	1885883a 	add	r2,r3,r2
81109aec:	e0bfe215 	stw	r2,-120(fp)
	read_addr_arr[4] = read_addr_arr[3] + step;
81109af0:	e0ffe217 	ldw	r3,-120(fp)
81109af4:	e0bfdb17 	ldw	r2,-148(fp)
81109af8:	1885883a 	add	r2,r3,r2
81109afc:	e0bfe315 	stw	r2,-116(fp)
	read_addr_arr[5] = read_addr_arr[4] + step;
81109b00:	e0ffe317 	ldw	r3,-116(fp)
81109b04:	e0bfdb17 	ldw	r2,-148(fp)
81109b08:	1885883a 	add	r2,r3,r2
81109b0c:	e0bfe415 	stw	r2,-112(fp)
	read_addr_arr[6] = read_addr_arr[5] + step;
81109b10:	e0ffe417 	ldw	r3,-112(fp)
81109b14:	e0bfdb17 	ldw	r2,-148(fp)
81109b18:	1885883a 	add	r2,r3,r2
81109b1c:	e0bfe515 	stw	r2,-108(fp)
	read_addr_arr[7] = read_addr_arr[6] + step;
81109b20:	e0ffe517 	ldw	r3,-108(fp)
81109b24:	e0bfdb17 	ldw	r2,-148(fp)
81109b28:	1885883a 	add	r2,r3,r2
81109b2c:	e0bfe615 	stw	r2,-104(fp)
	read_addr_arr[8] = read_addr_arr[7] + step;
81109b30:	e0ffe617 	ldw	r3,-104(fp)
81109b34:	e0bfdb17 	ldw	r2,-148(fp)
81109b38:	1885883a 	add	r2,r3,r2
81109b3c:	e0bfe715 	stw	r2,-100(fp)
	read_addr_arr[9] = read_addr_arr[8] + step;
81109b40:	e0ffe717 	ldw	r3,-100(fp)
81109b44:	e0bfdb17 	ldw	r2,-148(fp)
81109b48:	1885883a 	add	r2,r3,r2
81109b4c:	e0bfe815 	stw	r2,-96(fp)
	read_addr_arr[10] = read_addr_arr[9] + step;
81109b50:	e0ffe817 	ldw	r3,-96(fp)
81109b54:	e0bfdb17 	ldw	r2,-148(fp)
81109b58:	1885883a 	add	r2,r3,r2
81109b5c:	e0bfe915 	stw	r2,-92(fp)
	read_addr_arr[11] = read_addr_arr[10] + step;
81109b60:	e0ffe917 	ldw	r3,-92(fp)
81109b64:	e0bfdb17 	ldw	r2,-148(fp)
81109b68:	1885883a 	add	r2,r3,r2
81109b6c:	e0bfea15 	stw	r2,-88(fp)
	read_addr_arr[12] = read_addr_arr[11] + step;
81109b70:	e0ffea17 	ldw	r3,-88(fp)
81109b74:	e0bfdb17 	ldw	r2,-148(fp)
81109b78:	1885883a 	add	r2,r3,r2
81109b7c:	e0bfeb15 	stw	r2,-84(fp)
	read_addr_arr[13] = read_addr_arr[12] + step;
81109b80:	e0ffeb17 	ldw	r3,-84(fp)
81109b84:	e0bfdb17 	ldw	r2,-148(fp)
81109b88:	1885883a 	add	r2,r3,r2
81109b8c:	e0bfec15 	stw	r2,-80(fp)
	read_addr_arr[14] = read_addr_arr[13] + step;
81109b90:	e0ffec17 	ldw	r3,-80(fp)
81109b94:	e0bfdb17 	ldw	r2,-148(fp)
81109b98:	1885883a 	add	r2,r3,r2
81109b9c:	e0bfed15 	stw	r2,-76(fp)
	read_addr_arr[15] = read_addr_arr[14] + step;
81109ba0:	e0ffed17 	ldw	r3,-76(fp)
81109ba4:	e0bfdb17 	ldw	r2,-148(fp)
81109ba8:	1885883a 	add	r2,r3,r2
81109bac:	e0bfee15 	stw	r2,-72(fp)

	alt_u32 write_addr_arr[16];
	write_addr_arr[0] = DDR2_M2_MEMORY_BASE;
81109bb0:	00a00034 	movhi	r2,32768
81109bb4:	e0bfef15 	stw	r2,-68(fp)
	write_addr_arr[1] = write_addr_arr[0] + step;
81109bb8:	e0ffef17 	ldw	r3,-68(fp)
81109bbc:	e0bfdb17 	ldw	r2,-148(fp)
81109bc0:	1885883a 	add	r2,r3,r2
81109bc4:	e0bff015 	stw	r2,-64(fp)
	write_addr_arr[2] = write_addr_arr[1] + step;
81109bc8:	e0fff017 	ldw	r3,-64(fp)
81109bcc:	e0bfdb17 	ldw	r2,-148(fp)
81109bd0:	1885883a 	add	r2,r3,r2
81109bd4:	e0bff115 	stw	r2,-60(fp)
	write_addr_arr[3] = write_addr_arr[2] + step;
81109bd8:	e0fff117 	ldw	r3,-60(fp)
81109bdc:	e0bfdb17 	ldw	r2,-148(fp)
81109be0:	1885883a 	add	r2,r3,r2
81109be4:	e0bff215 	stw	r2,-56(fp)
	write_addr_arr[4] = write_addr_arr[3] + step;
81109be8:	e0fff217 	ldw	r3,-56(fp)
81109bec:	e0bfdb17 	ldw	r2,-148(fp)
81109bf0:	1885883a 	add	r2,r3,r2
81109bf4:	e0bff315 	stw	r2,-52(fp)
	write_addr_arr[5] = write_addr_arr[4] + step;
81109bf8:	e0fff317 	ldw	r3,-52(fp)
81109bfc:	e0bfdb17 	ldw	r2,-148(fp)
81109c00:	1885883a 	add	r2,r3,r2
81109c04:	e0bff415 	stw	r2,-48(fp)
	write_addr_arr[6] = write_addr_arr[5] + step;
81109c08:	e0fff417 	ldw	r3,-48(fp)
81109c0c:	e0bfdb17 	ldw	r2,-148(fp)
81109c10:	1885883a 	add	r2,r3,r2
81109c14:	e0bff515 	stw	r2,-44(fp)
	write_addr_arr[7] = write_addr_arr[6] + step;
81109c18:	e0fff517 	ldw	r3,-44(fp)
81109c1c:	e0bfdb17 	ldw	r2,-148(fp)
81109c20:	1885883a 	add	r2,r3,r2
81109c24:	e0bff615 	stw	r2,-40(fp)
	write_addr_arr[8] = write_addr_arr[7] + step;
81109c28:	e0fff617 	ldw	r3,-40(fp)
81109c2c:	e0bfdb17 	ldw	r2,-148(fp)
81109c30:	1885883a 	add	r2,r3,r2
81109c34:	e0bff715 	stw	r2,-36(fp)
	write_addr_arr[9] = write_addr_arr[8] + step;
81109c38:	e0fff717 	ldw	r3,-36(fp)
81109c3c:	e0bfdb17 	ldw	r2,-148(fp)
81109c40:	1885883a 	add	r2,r3,r2
81109c44:	e0bff815 	stw	r2,-32(fp)
	write_addr_arr[10] = write_addr_arr[9] + step;
81109c48:	e0fff817 	ldw	r3,-32(fp)
81109c4c:	e0bfdb17 	ldw	r2,-148(fp)
81109c50:	1885883a 	add	r2,r3,r2
81109c54:	e0bff915 	stw	r2,-28(fp)
	write_addr_arr[11] = write_addr_arr[10] + step;
81109c58:	e0fff917 	ldw	r3,-28(fp)
81109c5c:	e0bfdb17 	ldw	r2,-148(fp)
81109c60:	1885883a 	add	r2,r3,r2
81109c64:	e0bffa15 	stw	r2,-24(fp)
	write_addr_arr[12] = write_addr_arr[11] + step;
81109c68:	e0fffa17 	ldw	r3,-24(fp)
81109c6c:	e0bfdb17 	ldw	r2,-148(fp)
81109c70:	1885883a 	add	r2,r3,r2
81109c74:	e0bffb15 	stw	r2,-20(fp)
	write_addr_arr[13] = write_addr_arr[12] + step;
81109c78:	e0fffb17 	ldw	r3,-20(fp)
81109c7c:	e0bfdb17 	ldw	r2,-148(fp)
81109c80:	1885883a 	add	r2,r3,r2
81109c84:	e0bffc15 	stw	r2,-16(fp)
	write_addr_arr[14] = write_addr_arr[13] + step;
81109c88:	e0fffc17 	ldw	r3,-16(fp)
81109c8c:	e0bfdb17 	ldw	r2,-148(fp)
81109c90:	1885883a 	add	r2,r3,r2
81109c94:	e0bffd15 	stw	r2,-12(fp)
	write_addr_arr[15] = write_addr_arr[14] + step;
81109c98:	e0fffd17 	ldw	r3,-12(fp)
81109c9c:	e0bfdb17 	ldw	r2,-148(fp)
81109ca0:	1885883a 	add	r2,r3,r2
81109ca4:	e0bffe15 	stw	r2,-8(fp)

	DDR2_MEMORY_RANDOM_WRITE_TEST(DDR2_M1_ID, DDR2_VERBOSE, DDR2_TIME);
81109ca8:	01800044 	movi	r6,1
81109cac:	01400044 	movi	r5,1
81109cb0:	01000044 	movi	r4,1
81109cb4:	1106cc00 	call	81106cc0 <DDR2_MEMORY_RANDOM_WRITE_TEST>

	int TimeStart, TimeElapsed = 0;
81109cb8:	e03fdc15 	stw	zero,-144(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81109cbc:	d0a04917 	ldw	r2,-32476(gp)

	TimeStart = alt_nticks();
81109cc0:	e0bfdd15 	stw	r2,-140(fp)
	if (DMA_MULTIPLE_TRANSFER(DMADev, read_addr_arr, write_addr_arr, 16, step,
81109cc4:	e0ffde17 	ldw	r3,-136(fp)
81109cc8:	e17fef04 	addi	r5,fp,-68
81109ccc:	e13fdf04 	addi	r4,fp,-132
81109cd0:	d8000315 	stw	zero,12(sp)
81109cd4:	00800044 	movi	r2,1
81109cd8:	d8800215 	stw	r2,8(sp)
81109cdc:	e0bfda17 	ldw	r2,-152(fp)
81109ce0:	d8800115 	stw	r2,4(sp)
81109ce4:	e0bfdb17 	ldw	r2,-148(fp)
81109ce8:	d8800015 	stw	r2,0(sp)
81109cec:	01c00404 	movi	r7,16
81109cf0:	280d883a 	mov	r6,r5
81109cf4:	200b883a 	mov	r5,r4
81109cf8:	1809883a 	mov	r4,r3
81109cfc:	11076a00 	call	811076a0 <DMA_MULTIPLE_TRANSFER>
81109d00:	1000051e 	bne	r2,zero,81109d18 <TestDMA_M1_M2+0x2d8>
			control_bits, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
		printf("Error During DMA Transfer");
81109d04:	012044b4 	movhi	r4,33042
81109d08:	2138df04 	addi	r4,r4,-7300
81109d0c:	110ba640 	call	8110ba64 <printf>
		return FALSE;
81109d10:	0005883a 	mov	r2,zero
81109d14:	00002806 	br	81109db8 <TestDMA_M1_M2+0x378>
81109d18:	d0e04917 	ldw	r3,-32476(gp)
	}
	TimeElapsed = alt_nticks() - TimeStart;
81109d1c:	e0bfdd17 	ldw	r2,-140(fp)
81109d20:	1885c83a 	sub	r2,r3,r2
81109d24:	e0bfdc15 	stw	r2,-144(fp)
	printf("%.3f sec\n", (float) TimeElapsed / (float) alt_ticks_per_second());
81109d28:	e13fdc17 	ldw	r4,-144(fp)
81109d2c:	110abac0 	call	8110abac <__floatsisf>
81109d30:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81109d34:	d0a04817 	ldw	r2,-32480(gp)
81109d38:	1009883a 	mov	r4,r2
81109d3c:	110acd00 	call	8110acd0 <__floatunsisf>
81109d40:	1007883a 	mov	r3,r2
81109d44:	180b883a 	mov	r5,r3
81109d48:	8009883a 	mov	r4,r16
81109d4c:	110a3700 	call	8110a370 <__divsf3>
81109d50:	1007883a 	mov	r3,r2
81109d54:	1805883a 	mov	r2,r3
81109d58:	1009883a 	mov	r4,r2
81109d5c:	110b4d80 	call	8110b4d8 <__extendsfdf2>
81109d60:	100d883a 	mov	r6,r2
81109d64:	180f883a 	mov	r7,r3
81109d68:	300b883a 	mov	r5,r6
81109d6c:	380d883a 	mov	r6,r7
81109d70:	012044b4 	movhi	r4,33042
81109d74:	2138e604 	addi	r4,r4,-7272
81109d78:	110ba640 	call	8110ba64 <printf>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M2_ID, DDR2_VERBOSE,
81109d7c:	01800044 	movi	r6,1
81109d80:	01400044 	movi	r5,1
81109d84:	01000084 	movi	r4,2
81109d88:	1106fa00 	call	81106fa0 <DDR2_MEMORY_RANDOM_READ_TEST>
81109d8c:	10800058 	cmpnei	r2,r2,1
81109d90:	1000051e 	bne	r2,zero,81109da8 <TestDMA_M1_M2+0x368>
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
81109d94:	012044b4 	movhi	r4,33042
81109d98:	2138e904 	addi	r4,r4,-7260
81109d9c:	110bb800 	call	8110bb80 <puts>
	} else {
		printf("Transfer failed\n");
		return FALSE;
	}

	return TRUE;
81109da0:	00800044 	movi	r2,1
81109da4:	00000406 	br	81109db8 <TestDMA_M1_M2+0x378>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M2_ID, DDR2_VERBOSE,
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
	} else {
		printf("Transfer failed\n");
81109da8:	012044b4 	movhi	r4,33042
81109dac:	2138f004 	addi	r4,r4,-7232
81109db0:	110bb800 	call	8110bb80 <puts>
		return FALSE;
81109db4:	0005883a 	mov	r2,zero
	}

	return TRUE;
}
81109db8:	e6ffff04 	addi	sp,fp,-4
81109dbc:	dfc00217 	ldw	ra,8(sp)
81109dc0:	df000117 	ldw	fp,4(sp)
81109dc4:	dc000017 	ldw	r16,0(sp)
81109dc8:	dec00304 	addi	sp,sp,12
81109dcc:	f800283a 	ret

81109dd0 <TestDMA_M2_M1>:

bool TestDMA_M2_M1(void) {
81109dd0:	deffd404 	addi	sp,sp,-176
81109dd4:	dfc02b15 	stw	ra,172(sp)
81109dd8:	df002a15 	stw	fp,168(sp)
81109ddc:	dc002915 	stw	r16,164(sp)
81109de0:	df002a04 	addi	fp,sp,168

	alt_msgdma_dev *DMADev = NULL;
81109de4:	e03fde15 	stw	zero,-136(fp)

	if (DMA_OPEN_DEVICE(&DMADev, (char *) DMA_DDR_M1_CSR_NAME) == FALSE) {
81109de8:	e0bfde04 	addi	r2,fp,-136
81109dec:	016044b4 	movhi	r5,33042
81109df0:	2978f404 	addi	r5,r5,-7216
81109df4:	1009883a 	mov	r4,r2
81109df8:	11072e80 	call	811072e8 <DMA_OPEN_DEVICE>
81109dfc:	1000051e 	bne	r2,zero,81109e14 <TestDMA_M2_M1+0x44>
		printf("Error Opening DMA Device");
81109e00:	012044b4 	movhi	r4,33042
81109e04:	2138d104 	addi	r4,r4,-7356
81109e08:	110ba640 	call	8110ba64 <printf>
		return FALSE;
81109e0c:	0005883a 	mov	r2,zero
81109e10:	0000cd06 	br	8110a148 <TestDMA_M2_M1+0x378>
	}

	if (DMA_DISPATCHER_RESET(DMADev, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
81109e14:	e0bfde17 	ldw	r2,-136(fp)
81109e18:	000d883a 	mov	r6,zero
81109e1c:	01400044 	movi	r5,1
81109e20:	1009883a 	mov	r4,r2
81109e24:	11074f40 	call	811074f4 <DMA_DISPATCHER_RESET>
81109e28:	1000051e 	bne	r2,zero,81109e40 <TestDMA_M2_M1+0x70>
		printf("Error Reseting Dispatcher");
81109e2c:	012044b4 	movhi	r4,33042
81109e30:	2138d804 	addi	r4,r4,-7328
81109e34:	110ba640 	call	8110ba64 <printf>
		return FALSE;
81109e38:	0005883a 	mov	r2,zero
81109e3c:	0000c206 	br	8110a148 <TestDMA_M2_M1+0x378>
	}

	alt_u32 control_bits = 0x00000000;
81109e40:	e03fda15 	stw	zero,-152(fp)

	const alt_u32 step = DDR2_M2_MEMORY_SIZE / 16;
81109e44:	00820034 	movhi	r2,2048
81109e48:	e0bfdb15 	stw	r2,-148(fp)
	alt_u32 read_addr_arr[16];
	read_addr_arr[0] = DDR2_M2_MEMORY_BASE;
81109e4c:	00a00034 	movhi	r2,32768
81109e50:	e0bfdf15 	stw	r2,-132(fp)
	read_addr_arr[1] = read_addr_arr[0] + step;
81109e54:	e0ffdf17 	ldw	r3,-132(fp)
81109e58:	e0bfdb17 	ldw	r2,-148(fp)
81109e5c:	1885883a 	add	r2,r3,r2
81109e60:	e0bfe015 	stw	r2,-128(fp)
	read_addr_arr[2] = read_addr_arr[1] + step;
81109e64:	e0ffe017 	ldw	r3,-128(fp)
81109e68:	e0bfdb17 	ldw	r2,-148(fp)
81109e6c:	1885883a 	add	r2,r3,r2
81109e70:	e0bfe115 	stw	r2,-124(fp)
	read_addr_arr[3] = read_addr_arr[2] + step;
81109e74:	e0ffe117 	ldw	r3,-124(fp)
81109e78:	e0bfdb17 	ldw	r2,-148(fp)
81109e7c:	1885883a 	add	r2,r3,r2
81109e80:	e0bfe215 	stw	r2,-120(fp)
	read_addr_arr[4] = read_addr_arr[3] + step;
81109e84:	e0ffe217 	ldw	r3,-120(fp)
81109e88:	e0bfdb17 	ldw	r2,-148(fp)
81109e8c:	1885883a 	add	r2,r3,r2
81109e90:	e0bfe315 	stw	r2,-116(fp)
	read_addr_arr[5] = read_addr_arr[4] + step;
81109e94:	e0ffe317 	ldw	r3,-116(fp)
81109e98:	e0bfdb17 	ldw	r2,-148(fp)
81109e9c:	1885883a 	add	r2,r3,r2
81109ea0:	e0bfe415 	stw	r2,-112(fp)
	read_addr_arr[6] = read_addr_arr[5] + step;
81109ea4:	e0ffe417 	ldw	r3,-112(fp)
81109ea8:	e0bfdb17 	ldw	r2,-148(fp)
81109eac:	1885883a 	add	r2,r3,r2
81109eb0:	e0bfe515 	stw	r2,-108(fp)
	read_addr_arr[7] = read_addr_arr[6] + step;
81109eb4:	e0ffe517 	ldw	r3,-108(fp)
81109eb8:	e0bfdb17 	ldw	r2,-148(fp)
81109ebc:	1885883a 	add	r2,r3,r2
81109ec0:	e0bfe615 	stw	r2,-104(fp)
	read_addr_arr[8] = read_addr_arr[7] + step;
81109ec4:	e0ffe617 	ldw	r3,-104(fp)
81109ec8:	e0bfdb17 	ldw	r2,-148(fp)
81109ecc:	1885883a 	add	r2,r3,r2
81109ed0:	e0bfe715 	stw	r2,-100(fp)
	read_addr_arr[9] = read_addr_arr[8] + step;
81109ed4:	e0ffe717 	ldw	r3,-100(fp)
81109ed8:	e0bfdb17 	ldw	r2,-148(fp)
81109edc:	1885883a 	add	r2,r3,r2
81109ee0:	e0bfe815 	stw	r2,-96(fp)
	read_addr_arr[10] = read_addr_arr[9] + step;
81109ee4:	e0ffe817 	ldw	r3,-96(fp)
81109ee8:	e0bfdb17 	ldw	r2,-148(fp)
81109eec:	1885883a 	add	r2,r3,r2
81109ef0:	e0bfe915 	stw	r2,-92(fp)
	read_addr_arr[11] = read_addr_arr[10] + step;
81109ef4:	e0ffe917 	ldw	r3,-92(fp)
81109ef8:	e0bfdb17 	ldw	r2,-148(fp)
81109efc:	1885883a 	add	r2,r3,r2
81109f00:	e0bfea15 	stw	r2,-88(fp)
	read_addr_arr[12] = read_addr_arr[11] + step;
81109f04:	e0ffea17 	ldw	r3,-88(fp)
81109f08:	e0bfdb17 	ldw	r2,-148(fp)
81109f0c:	1885883a 	add	r2,r3,r2
81109f10:	e0bfeb15 	stw	r2,-84(fp)
	read_addr_arr[13] = read_addr_arr[12] + step;
81109f14:	e0ffeb17 	ldw	r3,-84(fp)
81109f18:	e0bfdb17 	ldw	r2,-148(fp)
81109f1c:	1885883a 	add	r2,r3,r2
81109f20:	e0bfec15 	stw	r2,-80(fp)
	read_addr_arr[14] = read_addr_arr[13] + step;
81109f24:	e0ffec17 	ldw	r3,-80(fp)
81109f28:	e0bfdb17 	ldw	r2,-148(fp)
81109f2c:	1885883a 	add	r2,r3,r2
81109f30:	e0bfed15 	stw	r2,-76(fp)
	read_addr_arr[15] = read_addr_arr[14] + step;
81109f34:	e0ffed17 	ldw	r3,-76(fp)
81109f38:	e0bfdb17 	ldw	r2,-148(fp)
81109f3c:	1885883a 	add	r2,r3,r2
81109f40:	e0bfee15 	stw	r2,-72(fp)

	alt_u32 write_addr_arr[16];
	write_addr_arr[0] = DDR2_M1_MEMORY_BASE;
81109f44:	e03fef15 	stw	zero,-68(fp)
	write_addr_arr[1] = write_addr_arr[0] + step;
81109f48:	e0ffef17 	ldw	r3,-68(fp)
81109f4c:	e0bfdb17 	ldw	r2,-148(fp)
81109f50:	1885883a 	add	r2,r3,r2
81109f54:	e0bff015 	stw	r2,-64(fp)
	write_addr_arr[2] = write_addr_arr[1] + step;
81109f58:	e0fff017 	ldw	r3,-64(fp)
81109f5c:	e0bfdb17 	ldw	r2,-148(fp)
81109f60:	1885883a 	add	r2,r3,r2
81109f64:	e0bff115 	stw	r2,-60(fp)
	write_addr_arr[3] = write_addr_arr[2] + step;
81109f68:	e0fff117 	ldw	r3,-60(fp)
81109f6c:	e0bfdb17 	ldw	r2,-148(fp)
81109f70:	1885883a 	add	r2,r3,r2
81109f74:	e0bff215 	stw	r2,-56(fp)
	write_addr_arr[4] = write_addr_arr[3] + step;
81109f78:	e0fff217 	ldw	r3,-56(fp)
81109f7c:	e0bfdb17 	ldw	r2,-148(fp)
81109f80:	1885883a 	add	r2,r3,r2
81109f84:	e0bff315 	stw	r2,-52(fp)
	write_addr_arr[5] = write_addr_arr[4] + step;
81109f88:	e0fff317 	ldw	r3,-52(fp)
81109f8c:	e0bfdb17 	ldw	r2,-148(fp)
81109f90:	1885883a 	add	r2,r3,r2
81109f94:	e0bff415 	stw	r2,-48(fp)
	write_addr_arr[6] = write_addr_arr[5] + step;
81109f98:	e0fff417 	ldw	r3,-48(fp)
81109f9c:	e0bfdb17 	ldw	r2,-148(fp)
81109fa0:	1885883a 	add	r2,r3,r2
81109fa4:	e0bff515 	stw	r2,-44(fp)
	write_addr_arr[7] = write_addr_arr[6] + step;
81109fa8:	e0fff517 	ldw	r3,-44(fp)
81109fac:	e0bfdb17 	ldw	r2,-148(fp)
81109fb0:	1885883a 	add	r2,r3,r2
81109fb4:	e0bff615 	stw	r2,-40(fp)
	write_addr_arr[8] = write_addr_arr[7] + step;
81109fb8:	e0fff617 	ldw	r3,-40(fp)
81109fbc:	e0bfdb17 	ldw	r2,-148(fp)
81109fc0:	1885883a 	add	r2,r3,r2
81109fc4:	e0bff715 	stw	r2,-36(fp)
	write_addr_arr[9] = write_addr_arr[8] + step;
81109fc8:	e0fff717 	ldw	r3,-36(fp)
81109fcc:	e0bfdb17 	ldw	r2,-148(fp)
81109fd0:	1885883a 	add	r2,r3,r2
81109fd4:	e0bff815 	stw	r2,-32(fp)
	write_addr_arr[10] = write_addr_arr[9] + step;
81109fd8:	e0fff817 	ldw	r3,-32(fp)
81109fdc:	e0bfdb17 	ldw	r2,-148(fp)
81109fe0:	1885883a 	add	r2,r3,r2
81109fe4:	e0bff915 	stw	r2,-28(fp)
	write_addr_arr[11] = write_addr_arr[10] + step;
81109fe8:	e0fff917 	ldw	r3,-28(fp)
81109fec:	e0bfdb17 	ldw	r2,-148(fp)
81109ff0:	1885883a 	add	r2,r3,r2
81109ff4:	e0bffa15 	stw	r2,-24(fp)
	write_addr_arr[12] = write_addr_arr[11] + step;
81109ff8:	e0fffa17 	ldw	r3,-24(fp)
81109ffc:	e0bfdb17 	ldw	r2,-148(fp)
8110a000:	1885883a 	add	r2,r3,r2
8110a004:	e0bffb15 	stw	r2,-20(fp)
	write_addr_arr[13] = write_addr_arr[12] + step;
8110a008:	e0fffb17 	ldw	r3,-20(fp)
8110a00c:	e0bfdb17 	ldw	r2,-148(fp)
8110a010:	1885883a 	add	r2,r3,r2
8110a014:	e0bffc15 	stw	r2,-16(fp)
	write_addr_arr[14] = write_addr_arr[13] + step;
8110a018:	e0fffc17 	ldw	r3,-16(fp)
8110a01c:	e0bfdb17 	ldw	r2,-148(fp)
8110a020:	1885883a 	add	r2,r3,r2
8110a024:	e0bffd15 	stw	r2,-12(fp)
	write_addr_arr[15] = write_addr_arr[14] + step;
8110a028:	e0fffd17 	ldw	r3,-12(fp)
8110a02c:	e0bfdb17 	ldw	r2,-148(fp)
8110a030:	1885883a 	add	r2,r3,r2
8110a034:	e0bffe15 	stw	r2,-8(fp)

	DDR2_MEMORY_RANDOM_WRITE_TEST(DDR2_M2_ID, DDR2_VERBOSE, DDR2_TIME);
8110a038:	01800044 	movi	r6,1
8110a03c:	01400044 	movi	r5,1
8110a040:	01000084 	movi	r4,2
8110a044:	1106cc00 	call	81106cc0 <DDR2_MEMORY_RANDOM_WRITE_TEST>

	int TimeStart, TimeElapsed = 0;
8110a048:	e03fdc15 	stw	zero,-144(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8110a04c:	d0a04917 	ldw	r2,-32476(gp)

	TimeStart = alt_nticks();
8110a050:	e0bfdd15 	stw	r2,-140(fp)
	if (DMA_MULTIPLE_TRANSFER(DMADev, read_addr_arr, write_addr_arr, 16, step,
8110a054:	e0ffde17 	ldw	r3,-136(fp)
8110a058:	e17fef04 	addi	r5,fp,-68
8110a05c:	e13fdf04 	addi	r4,fp,-132
8110a060:	d8000315 	stw	zero,12(sp)
8110a064:	00800044 	movi	r2,1
8110a068:	d8800215 	stw	r2,8(sp)
8110a06c:	e0bfda17 	ldw	r2,-152(fp)
8110a070:	d8800115 	stw	r2,4(sp)
8110a074:	e0bfdb17 	ldw	r2,-148(fp)
8110a078:	d8800015 	stw	r2,0(sp)
8110a07c:	01c00404 	movi	r7,16
8110a080:	280d883a 	mov	r6,r5
8110a084:	200b883a 	mov	r5,r4
8110a088:	1809883a 	mov	r4,r3
8110a08c:	11076a00 	call	811076a0 <DMA_MULTIPLE_TRANSFER>
8110a090:	1000051e 	bne	r2,zero,8110a0a8 <TestDMA_M2_M1+0x2d8>
			control_bits, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE) {
		printf("Error During DMA Transfer");
8110a094:	012044b4 	movhi	r4,33042
8110a098:	2138df04 	addi	r4,r4,-7300
8110a09c:	110ba640 	call	8110ba64 <printf>
		return FALSE;
8110a0a0:	0005883a 	mov	r2,zero
8110a0a4:	00002806 	br	8110a148 <TestDMA_M2_M1+0x378>
8110a0a8:	d0e04917 	ldw	r3,-32476(gp)
	}
	TimeElapsed = alt_nticks() - TimeStart;
8110a0ac:	e0bfdd17 	ldw	r2,-140(fp)
8110a0b0:	1885c83a 	sub	r2,r3,r2
8110a0b4:	e0bfdc15 	stw	r2,-144(fp)
	printf("%.3f sec\n", (float) TimeElapsed / (float) alt_ticks_per_second());
8110a0b8:	e13fdc17 	ldw	r4,-144(fp)
8110a0bc:	110abac0 	call	8110abac <__floatsisf>
8110a0c0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8110a0c4:	d0a04817 	ldw	r2,-32480(gp)
8110a0c8:	1009883a 	mov	r4,r2
8110a0cc:	110acd00 	call	8110acd0 <__floatunsisf>
8110a0d0:	1007883a 	mov	r3,r2
8110a0d4:	180b883a 	mov	r5,r3
8110a0d8:	8009883a 	mov	r4,r16
8110a0dc:	110a3700 	call	8110a370 <__divsf3>
8110a0e0:	1007883a 	mov	r3,r2
8110a0e4:	1805883a 	mov	r2,r3
8110a0e8:	1009883a 	mov	r4,r2
8110a0ec:	110b4d80 	call	8110b4d8 <__extendsfdf2>
8110a0f0:	100d883a 	mov	r6,r2
8110a0f4:	180f883a 	mov	r7,r3
8110a0f8:	300b883a 	mov	r5,r6
8110a0fc:	380d883a 	mov	r6,r7
8110a100:	012044b4 	movhi	r4,33042
8110a104:	2138e604 	addi	r4,r4,-7272
8110a108:	110ba640 	call	8110ba64 <printf>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M1_ID, DDR2_VERBOSE,
8110a10c:	01800044 	movi	r6,1
8110a110:	01400044 	movi	r5,1
8110a114:	01000044 	movi	r4,1
8110a118:	1106fa00 	call	81106fa0 <DDR2_MEMORY_RANDOM_READ_TEST>
8110a11c:	10800058 	cmpnei	r2,r2,1
8110a120:	1000051e 	bne	r2,zero,8110a138 <TestDMA_M2_M1+0x368>
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
8110a124:	012044b4 	movhi	r4,33042
8110a128:	2138e904 	addi	r4,r4,-7260
8110a12c:	110bb800 	call	8110bb80 <puts>
	} else {
		printf("Transfer failed\n");
		return FALSE;
	}

	return TRUE;
8110a130:	00800044 	movi	r2,1
8110a134:	00000406 	br	8110a148 <TestDMA_M2_M1+0x378>

	if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M1_ID, DDR2_VERBOSE,
	DDR2_TIME) == TRUE) {
		printf("Transfer executed correctly\n");
	} else {
		printf("Transfer failed\n");
8110a138:	012044b4 	movhi	r4,33042
8110a13c:	2138f004 	addi	r4,r4,-7232
8110a140:	110bb800 	call	8110bb80 <puts>
		return FALSE;
8110a144:	0005883a 	mov	r2,zero
	}

	return TRUE;
}
8110a148:	e6ffff04 	addi	sp,fp,-4
8110a14c:	dfc00217 	ldw	ra,8(sp)
8110a150:	df000117 	ldw	fp,4(sp)
8110a154:	dc000017 	ldw	r16,0(sp)
8110a158:	dec00304 	addi	sp,sp,12
8110a15c:	f800283a 	ret

8110a160 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
8110a160:	defffc04 	addi	sp,sp,-16
8110a164:	df000315 	stw	fp,12(sp)
8110a168:	df000304 	addi	fp,sp,12
8110a16c:	e13ffd15 	stw	r4,-12(fp)
8110a170:	e17ffe15 	stw	r5,-8(fp)
8110a174:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
8110a178:	e0bffe17 	ldw	r2,-8(fp)
8110a17c:	1085883a 	add	r2,r2,r2
8110a180:	1085883a 	add	r2,r2,r2
8110a184:	1007883a 	mov	r3,r2
8110a188:	e0bffd17 	ldw	r2,-12(fp)
8110a18c:	1885883a 	add	r2,r3,r2
8110a190:	1007883a 	mov	r3,r2
8110a194:	e0bfff17 	ldw	r2,-4(fp)
8110a198:	18800035 	stwio	r2,0(r3)
	return 1;
8110a19c:	00800044 	movi	r2,1

}
8110a1a0:	e037883a 	mov	sp,fp
8110a1a4:	df000017 	ldw	fp,0(sp)
8110a1a8:	dec00104 	addi	sp,sp,4
8110a1ac:	f800283a 	ret

8110a1b0 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
8110a1b0:	defffc04 	addi	sp,sp,-16
8110a1b4:	df000315 	stw	fp,12(sp)
8110a1b8:	df000304 	addi	fp,sp,12
8110a1bc:	e13ffd15 	stw	r4,-12(fp)
8110a1c0:	e17ffe15 	stw	r5,-8(fp)
8110a1c4:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
8110a1c8:	e0bffe17 	ldw	r2,-8(fp)
8110a1cc:	1085883a 	add	r2,r2,r2
8110a1d0:	1085883a 	add	r2,r2,r2
8110a1d4:	1007883a 	mov	r3,r2
8110a1d8:	e0bffd17 	ldw	r2,-12(fp)
8110a1dc:	1885883a 	add	r2,r3,r2
8110a1e0:	10c00037 	ldwio	r3,0(r2)
8110a1e4:	e0bfff17 	ldw	r2,-4(fp)
8110a1e8:	10c00015 	stw	r3,0(r2)
	return 1;
8110a1ec:	00800044 	movi	r2,1

}
8110a1f0:	e037883a 	mov	sp,fp
8110a1f4:	df000017 	ldw	fp,0(sp)
8110a1f8:	dec00104 	addi	sp,sp,4
8110a1fc:	f800283a 	ret

8110a200 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
8110a200:	defffa04 	addi	sp,sp,-24
8110a204:	dfc00515 	stw	ra,20(sp)
8110a208:	df000415 	stw	fp,16(sp)
8110a20c:	df000404 	addi	fp,sp,16
8110a210:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
8110a214:	e0bfff17 	ldw	r2,-4(fp)
8110a218:	1005d1ba 	srai	r2,r2,6
8110a21c:	1080004c 	andi	r2,r2,1
8110a220:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
8110a224:	e0bfff17 	ldw	r2,-4(fp)
8110a228:	1005d17a 	srai	r2,r2,5
8110a22c:	1080004c 	andi	r2,r2,1
8110a230:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110a234:	e0bfff17 	ldw	r2,-4(fp)
8110a238:	1005d13a 	srai	r2,r2,4
8110a23c:	1080004c 	andi	r2,r2,1
8110a240:	e0bffe15 	stw	r2,-8(fp)

	printf("-------- link status \n");
8110a244:	012044b4 	movhi	r4,33042
8110a248:	2138f904 	addi	r4,r4,-7196
8110a24c:	110bb800 	call	8110bb80 <puts>
	printf("Link started    : %s \n", (started == 1) ? "S" : "N");
8110a250:	e0bffc17 	ldw	r2,-16(fp)
8110a254:	10800058 	cmpnei	r2,r2,1
8110a258:	1000031e 	bne	r2,zero,8110a268 <_print_codec_status+0x68>
8110a25c:	00a044b4 	movhi	r2,33042
8110a260:	10b8ff04 	addi	r2,r2,-7172
8110a264:	00000206 	br	8110a270 <_print_codec_status+0x70>
8110a268:	00a044b4 	movhi	r2,33042
8110a26c:	10b90004 	addi	r2,r2,-7168
8110a270:	100b883a 	mov	r5,r2
8110a274:	012044b4 	movhi	r4,33042
8110a278:	21390104 	addi	r4,r4,-7164
8110a27c:	110ba640 	call	8110ba64 <printf>
	printf("Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8110a280:	e0bffd17 	ldw	r2,-12(fp)
8110a284:	10800058 	cmpnei	r2,r2,1
8110a288:	1000031e 	bne	r2,zero,8110a298 <_print_codec_status+0x98>
8110a28c:	00a044b4 	movhi	r2,33042
8110a290:	10b8ff04 	addi	r2,r2,-7172
8110a294:	00000206 	br	8110a2a0 <_print_codec_status+0xa0>
8110a298:	00a044b4 	movhi	r2,33042
8110a29c:	10b90004 	addi	r2,r2,-7168
8110a2a0:	100b883a 	mov	r5,r2
8110a2a4:	012044b4 	movhi	r4,33042
8110a2a8:	21390704 	addi	r4,r4,-7140
8110a2ac:	110ba640 	call	8110ba64 <printf>
	printf("Link running    : %s \n", (running == 1) ? "S" : "N");
8110a2b0:	e0bffe17 	ldw	r2,-8(fp)
8110a2b4:	10800058 	cmpnei	r2,r2,1
8110a2b8:	1000031e 	bne	r2,zero,8110a2c8 <_print_codec_status+0xc8>
8110a2bc:	00a044b4 	movhi	r2,33042
8110a2c0:	10b8ff04 	addi	r2,r2,-7172
8110a2c4:	00000206 	br	8110a2d0 <_print_codec_status+0xd0>
8110a2c8:	00a044b4 	movhi	r2,33042
8110a2cc:	10b90004 	addi	r2,r2,-7168
8110a2d0:	100b883a 	mov	r5,r2
8110a2d4:	012044b4 	movhi	r4,33042
8110a2d8:	21390d04 	addi	r4,r4,-7116
8110a2dc:	110ba640 	call	8110ba64 <printf>
	printf("--------  \n");
8110a2e0:	012044b4 	movhi	r4,33042
8110a2e4:	21391304 	addi	r4,r4,-7092
8110a2e8:	110bb800 	call	8110bb80 <puts>
}
8110a2ec:	0001883a 	nop
8110a2f0:	e037883a 	mov	sp,fp
8110a2f4:	dfc00117 	ldw	ra,4(sp)
8110a2f8:	df000017 	ldw	fp,0(sp)
8110a2fc:	dec00204 	addi	sp,sp,8
8110a300:	f800283a 	ret

8110a304 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
8110a304:	defffb04 	addi	sp,sp,-20
8110a308:	df000415 	stw	fp,16(sp)
8110a30c:	df000404 	addi	fp,sp,16
8110a310:	e13ffc15 	stw	r4,-16(fp)
8110a314:	e17ffd15 	stw	r5,-12(fp)
8110a318:	e1bffe15 	stw	r6,-8(fp)
8110a31c:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
8110a320:	e0bffc17 	ldw	r2,-16(fp)
8110a324:	1005d1ba 	srai	r2,r2,6
8110a328:	10c0004c 	andi	r3,r2,1
8110a32c:	e0bffd17 	ldw	r2,-12(fp)
8110a330:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8110a334:	e0bffc17 	ldw	r2,-16(fp)
8110a338:	1005d17a 	srai	r2,r2,5
8110a33c:	10c0004c 	andi	r3,r2,1
8110a340:	e0bffe17 	ldw	r2,-8(fp)
8110a344:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8110a348:	e0bffc17 	ldw	r2,-16(fp)
8110a34c:	1005d13a 	srai	r2,r2,4
8110a350:	10c0004c 	andi	r3,r2,1
8110a354:	e0bfff17 	ldw	r2,-4(fp)
8110a358:	10c00015 	stw	r3,0(r2)
}
8110a35c:	0001883a 	nop
8110a360:	e037883a 	mov	sp,fp
8110a364:	df000017 	ldw	fp,0(sp)
8110a368:	dec00104 	addi	sp,sp,4
8110a36c:	f800283a 	ret

8110a370 <__divsf3>:
8110a370:	defff504 	addi	sp,sp,-44
8110a374:	200cd5fa 	srli	r6,r4,23
8110a378:	dcc00415 	stw	r19,16(sp)
8110a37c:	2026d7fa 	srli	r19,r4,31
8110a380:	00c02034 	movhi	r3,128
8110a384:	dd800715 	stw	r22,28(sp)
8110a388:	dd000515 	stw	r20,20(sp)
8110a38c:	dc800315 	stw	r18,12(sp)
8110a390:	18ffffc4 	addi	r3,r3,-1
8110a394:	dfc00a15 	stw	ra,40(sp)
8110a398:	df000915 	stw	fp,36(sp)
8110a39c:	ddc00815 	stw	r23,32(sp)
8110a3a0:	dd400615 	stw	r21,24(sp)
8110a3a4:	dc400215 	stw	r17,8(sp)
8110a3a8:	dc000115 	stw	r16,4(sp)
8110a3ac:	35003fcc 	andi	r20,r6,255
8110a3b0:	1924703a 	and	r18,r3,r4
8110a3b4:	9d803fcc 	andi	r22,r19,255
8110a3b8:	a0005226 	beq	r20,zero,8110a504 <__divsf3+0x194>
8110a3bc:	00803fc4 	movi	r2,255
8110a3c0:	a0802e26 	beq	r20,r2,8110a47c <__divsf3+0x10c>
8110a3c4:	91002034 	orhi	r4,r18,128
8110a3c8:	202490fa 	slli	r18,r4,3
8110a3cc:	a53fe044 	addi	r20,r20,-127
8110a3d0:	0021883a 	mov	r16,zero
8110a3d4:	002f883a 	mov	r23,zero
8110a3d8:	280cd5fa 	srli	r6,r5,23
8110a3dc:	282ad7fa 	srli	r21,r5,31
8110a3e0:	00c02034 	movhi	r3,128
8110a3e4:	18ffffc4 	addi	r3,r3,-1
8110a3e8:	31803fcc 	andi	r6,r6,255
8110a3ec:	1962703a 	and	r17,r3,r5
8110a3f0:	af003fcc 	andi	fp,r21,255
8110a3f4:	30004a26 	beq	r6,zero,8110a520 <__divsf3+0x1b0>
8110a3f8:	00803fc4 	movi	r2,255
8110a3fc:	30804526 	beq	r6,r2,8110a514 <__divsf3+0x1a4>
8110a400:	89402034 	orhi	r5,r17,128
8110a404:	282290fa 	slli	r17,r5,3
8110a408:	31bfe044 	addi	r6,r6,-127
8110a40c:	000b883a 	mov	r5,zero
8110a410:	2c20b03a 	or	r16,r5,r16
8110a414:	802090ba 	slli	r16,r16,2
8110a418:	00a04474 	movhi	r2,33041
8110a41c:	10a90f04 	addi	r2,r2,-23492
8110a420:	80a1883a 	add	r16,r16,r2
8110a424:	81000017 	ldw	r4,0(r16)
8110a428:	9d46f03a 	xor	r3,r19,r21
8110a42c:	180f883a 	mov	r7,r3
8110a430:	18803fcc 	andi	r2,r3,255
8110a434:	a18dc83a 	sub	r6,r20,r6
8110a438:	2000683a 	jmp	r4
8110a43c:	8110a620 	cmpeqi	r4,r16,17048
8110a440:	8110a4a4 	muli	r4,r16,17042
8110a444:	8110a614 	ori	r4,r16,17048
8110a448:	8110a490 	cmplti	r4,r16,17042
8110a44c:	8110a614 	ori	r4,r16,17048
8110a450:	8110a5ec 	andhi	r4,r16,17047
8110a454:	8110a614 	ori	r4,r16,17048
8110a458:	8110a490 	cmplti	r4,r16,17042
8110a45c:	8110a4a4 	muli	r4,r16,17042
8110a460:	8110a4a4 	muli	r4,r16,17042
8110a464:	8110a5ec 	andhi	r4,r16,17047
8110a468:	8110a490 	cmplti	r4,r16,17042
8110a46c:	8110a700 	call	88110a70 <__reset+0x20f0a70>
8110a470:	8110a700 	call	88110a70 <__reset+0x20f0a70>
8110a474:	8110a700 	call	88110a70 <__reset+0x20f0a70>
8110a478:	8110a6b4 	orhi	r4,r16,17050
8110a47c:	9000581e 	bne	r18,zero,8110a5e0 <__divsf3+0x270>
8110a480:	04000204 	movi	r16,8
8110a484:	05c00084 	movi	r23,2
8110a488:	003fd306 	br	8110a3d8 <__reset+0xfb0ea3d8>
8110a48c:	0023883a 	mov	r17,zero
8110a490:	e02d883a 	mov	r22,fp
8110a494:	282f883a 	mov	r23,r5
8110a498:	00800084 	movi	r2,2
8110a49c:	b8808f1e 	bne	r23,r2,8110a6dc <__divsf3+0x36c>
8110a4a0:	b005883a 	mov	r2,r22
8110a4a4:	11c0004c 	andi	r7,r2,1
8110a4a8:	013fffc4 	movi	r4,-1
8110a4ac:	000d883a 	mov	r6,zero
8110a4b0:	21003fcc 	andi	r4,r4,255
8110a4b4:	200895fa 	slli	r4,r4,23
8110a4b8:	38803fcc 	andi	r2,r7,255
8110a4bc:	00c02034 	movhi	r3,128
8110a4c0:	100497fa 	slli	r2,r2,31
8110a4c4:	18ffffc4 	addi	r3,r3,-1
8110a4c8:	30c6703a 	and	r3,r6,r3
8110a4cc:	1906b03a 	or	r3,r3,r4
8110a4d0:	1884b03a 	or	r2,r3,r2
8110a4d4:	dfc00a17 	ldw	ra,40(sp)
8110a4d8:	df000917 	ldw	fp,36(sp)
8110a4dc:	ddc00817 	ldw	r23,32(sp)
8110a4e0:	dd800717 	ldw	r22,28(sp)
8110a4e4:	dd400617 	ldw	r21,24(sp)
8110a4e8:	dd000517 	ldw	r20,20(sp)
8110a4ec:	dcc00417 	ldw	r19,16(sp)
8110a4f0:	dc800317 	ldw	r18,12(sp)
8110a4f4:	dc400217 	ldw	r17,8(sp)
8110a4f8:	dc000117 	ldw	r16,4(sp)
8110a4fc:	dec00b04 	addi	sp,sp,44
8110a500:	f800283a 	ret
8110a504:	90002b1e 	bne	r18,zero,8110a5b4 <__divsf3+0x244>
8110a508:	04000104 	movi	r16,4
8110a50c:	05c00044 	movi	r23,1
8110a510:	003fb106 	br	8110a3d8 <__reset+0xfb0ea3d8>
8110a514:	8800251e 	bne	r17,zero,8110a5ac <__divsf3+0x23c>
8110a518:	01400084 	movi	r5,2
8110a51c:	00000206 	br	8110a528 <__divsf3+0x1b8>
8110a520:	88001a1e 	bne	r17,zero,8110a58c <__divsf3+0x21c>
8110a524:	01400044 	movi	r5,1
8110a528:	8160b03a 	or	r16,r16,r5
8110a52c:	802090ba 	slli	r16,r16,2
8110a530:	00e04474 	movhi	r3,33041
8110a534:	18e95304 	addi	r3,r3,-23220
8110a538:	80e1883a 	add	r16,r16,r3
8110a53c:	80c00017 	ldw	r3,0(r16)
8110a540:	9d44f03a 	xor	r2,r19,r21
8110a544:	a18dc83a 	sub	r6,r20,r6
8110a548:	1800683a 	jmp	r3
8110a54c:	8110a4a4 	muli	r4,r16,17042
8110a550:	8110a4a4 	muli	r4,r16,17042
8110a554:	8110a6f0 	cmpltui	r4,r16,17051
8110a558:	8110a48c 	andi	r4,r16,17042
8110a55c:	8110a6f0 	cmpltui	r4,r16,17051
8110a560:	8110a5ec 	andhi	r4,r16,17047
8110a564:	8110a6f0 	cmpltui	r4,r16,17051
8110a568:	8110a48c 	andi	r4,r16,17042
8110a56c:	8110a4a4 	muli	r4,r16,17042
8110a570:	8110a4a4 	muli	r4,r16,17042
8110a574:	8110a5ec 	andhi	r4,r16,17047
8110a578:	8110a48c 	andi	r4,r16,17042
8110a57c:	8110a700 	call	88110a70 <__reset+0x20f0a70>
8110a580:	8110a700 	call	88110a70 <__reset+0x20f0a70>
8110a584:	8110a700 	call	88110a70 <__reset+0x20f0a70>
8110a588:	8110a718 	cmpnei	r4,r16,17052
8110a58c:	8809883a 	mov	r4,r17
8110a590:	110b7900 	call	8110b790 <__clzsi2>
8110a594:	10fffec4 	addi	r3,r2,-5
8110a598:	10801d84 	addi	r2,r2,118
8110a59c:	88e2983a 	sll	r17,r17,r3
8110a5a0:	008dc83a 	sub	r6,zero,r2
8110a5a4:	000b883a 	mov	r5,zero
8110a5a8:	003f9906 	br	8110a410 <__reset+0xfb0ea410>
8110a5ac:	014000c4 	movi	r5,3
8110a5b0:	003f9706 	br	8110a410 <__reset+0xfb0ea410>
8110a5b4:	9009883a 	mov	r4,r18
8110a5b8:	d9400015 	stw	r5,0(sp)
8110a5bc:	110b7900 	call	8110b790 <__clzsi2>
8110a5c0:	10fffec4 	addi	r3,r2,-5
8110a5c4:	11801d84 	addi	r6,r2,118
8110a5c8:	90e4983a 	sll	r18,r18,r3
8110a5cc:	01a9c83a 	sub	r20,zero,r6
8110a5d0:	0021883a 	mov	r16,zero
8110a5d4:	002f883a 	mov	r23,zero
8110a5d8:	d9400017 	ldw	r5,0(sp)
8110a5dc:	003f7e06 	br	8110a3d8 <__reset+0xfb0ea3d8>
8110a5e0:	04000304 	movi	r16,12
8110a5e4:	05c000c4 	movi	r23,3
8110a5e8:	003f7b06 	br	8110a3d8 <__reset+0xfb0ea3d8>
8110a5ec:	01802034 	movhi	r6,128
8110a5f0:	000f883a 	mov	r7,zero
8110a5f4:	31bfffc4 	addi	r6,r6,-1
8110a5f8:	013fffc4 	movi	r4,-1
8110a5fc:	003fac06 	br	8110a4b0 <__reset+0xfb0ea4b0>
8110a600:	01400044 	movi	r5,1
8110a604:	2909c83a 	sub	r4,r5,r4
8110a608:	00c006c4 	movi	r3,27
8110a60c:	19004b0e 	bge	r3,r4,8110a73c <__divsf3+0x3cc>
8110a610:	114e703a 	and	r7,r2,r5
8110a614:	0009883a 	mov	r4,zero
8110a618:	000d883a 	mov	r6,zero
8110a61c:	003fa406 	br	8110a4b0 <__reset+0xfb0ea4b0>
8110a620:	9006917a 	slli	r3,r18,5
8110a624:	8822917a 	slli	r17,r17,5
8110a628:	1c40372e 	bgeu	r3,r17,8110a708 <__divsf3+0x398>
8110a62c:	31bfffc4 	addi	r6,r6,-1
8110a630:	010006c4 	movi	r4,27
8110a634:	000b883a 	mov	r5,zero
8110a638:	180f883a 	mov	r7,r3
8110a63c:	294b883a 	add	r5,r5,r5
8110a640:	18c7883a 	add	r3,r3,r3
8110a644:	38000116 	blt	r7,zero,8110a64c <__divsf3+0x2dc>
8110a648:	1c400236 	bltu	r3,r17,8110a654 <__divsf3+0x2e4>
8110a64c:	1c47c83a 	sub	r3,r3,r17
8110a650:	29400054 	ori	r5,r5,1
8110a654:	213fffc4 	addi	r4,r4,-1
8110a658:	203ff71e 	bne	r4,zero,8110a638 <__reset+0xfb0ea638>
8110a65c:	1806c03a 	cmpne	r3,r3,zero
8110a660:	1962b03a 	or	r17,r3,r5
8110a664:	31001fc4 	addi	r4,r6,127
8110a668:	013fe50e 	bge	zero,r4,8110a600 <__reset+0xfb0ea600>
8110a66c:	88c001cc 	andi	r3,r17,7
8110a670:	18000426 	beq	r3,zero,8110a684 <__divsf3+0x314>
8110a674:	88c003cc 	andi	r3,r17,15
8110a678:	01400104 	movi	r5,4
8110a67c:	19400126 	beq	r3,r5,8110a684 <__divsf3+0x314>
8110a680:	8963883a 	add	r17,r17,r5
8110a684:	88c2002c 	andhi	r3,r17,2048
8110a688:	18000426 	beq	r3,zero,8110a69c <__divsf3+0x32c>
8110a68c:	00fe0034 	movhi	r3,63488
8110a690:	18ffffc4 	addi	r3,r3,-1
8110a694:	31002004 	addi	r4,r6,128
8110a698:	88e2703a 	and	r17,r17,r3
8110a69c:	00c03f84 	movi	r3,254
8110a6a0:	193f8016 	blt	r3,r4,8110a4a4 <__reset+0xfb0ea4a4>
8110a6a4:	880c91ba 	slli	r6,r17,6
8110a6a8:	11c0004c 	andi	r7,r2,1
8110a6ac:	300cd27a 	srli	r6,r6,9
8110a6b0:	003f7f06 	br	8110a4b0 <__reset+0xfb0ea4b0>
8110a6b4:	9080102c 	andhi	r2,r18,64
8110a6b8:	10000226 	beq	r2,zero,8110a6c4 <__divsf3+0x354>
8110a6bc:	8880102c 	andhi	r2,r17,64
8110a6c0:	10001826 	beq	r2,zero,8110a724 <__divsf3+0x3b4>
8110a6c4:	00802034 	movhi	r2,128
8110a6c8:	91801034 	orhi	r6,r18,64
8110a6cc:	10bfffc4 	addi	r2,r2,-1
8110a6d0:	980f883a 	mov	r7,r19
8110a6d4:	308c703a 	and	r6,r6,r2
8110a6d8:	003fc706 	br	8110a5f8 <__reset+0xfb0ea5f8>
8110a6dc:	008000c4 	movi	r2,3
8110a6e0:	b8802d26 	beq	r23,r2,8110a798 <__divsf3+0x428>
8110a6e4:	00c00044 	movi	r3,1
8110a6e8:	b005883a 	mov	r2,r22
8110a6ec:	b8ffdd1e 	bne	r23,r3,8110a664 <__reset+0xfb0ea664>
8110a6f0:	11c0004c 	andi	r7,r2,1
8110a6f4:	0009883a 	mov	r4,zero
8110a6f8:	000d883a 	mov	r6,zero
8110a6fc:	003f6c06 	br	8110a4b0 <__reset+0xfb0ea4b0>
8110a700:	9023883a 	mov	r17,r18
8110a704:	003f6406 	br	8110a498 <__reset+0xfb0ea498>
8110a708:	1c47c83a 	sub	r3,r3,r17
8110a70c:	01000684 	movi	r4,26
8110a710:	01400044 	movi	r5,1
8110a714:	003fc806 	br	8110a638 <__reset+0xfb0ea638>
8110a718:	9080102c 	andhi	r2,r18,64
8110a71c:	103fe926 	beq	r2,zero,8110a6c4 <__reset+0xfb0ea6c4>
8110a720:	0023883a 	mov	r17,zero
8110a724:	00802034 	movhi	r2,128
8110a728:	89801034 	orhi	r6,r17,64
8110a72c:	10bfffc4 	addi	r2,r2,-1
8110a730:	a80f883a 	mov	r7,r21
8110a734:	308c703a 	and	r6,r6,r2
8110a738:	003faf06 	br	8110a5f8 <__reset+0xfb0ea5f8>
8110a73c:	01c00804 	movi	r7,32
8110a740:	390fc83a 	sub	r7,r7,r4
8110a744:	89ce983a 	sll	r7,r17,r7
8110a748:	890ad83a 	srl	r5,r17,r4
8110a74c:	380ec03a 	cmpne	r7,r7,zero
8110a750:	29cab03a 	or	r5,r5,r7
8110a754:	28c001cc 	andi	r3,r5,7
8110a758:	18000426 	beq	r3,zero,8110a76c <__divsf3+0x3fc>
8110a75c:	28c003cc 	andi	r3,r5,15
8110a760:	01000104 	movi	r4,4
8110a764:	19000126 	beq	r3,r4,8110a76c <__divsf3+0x3fc>
8110a768:	290b883a 	add	r5,r5,r4
8110a76c:	28c1002c 	andhi	r3,r5,1024
8110a770:	18000426 	beq	r3,zero,8110a784 <__divsf3+0x414>
8110a774:	11c0004c 	andi	r7,r2,1
8110a778:	01000044 	movi	r4,1
8110a77c:	000d883a 	mov	r6,zero
8110a780:	003f4b06 	br	8110a4b0 <__reset+0xfb0ea4b0>
8110a784:	280a91ba 	slli	r5,r5,6
8110a788:	11c0004c 	andi	r7,r2,1
8110a78c:	0009883a 	mov	r4,zero
8110a790:	280cd27a 	srli	r6,r5,9
8110a794:	003f4606 	br	8110a4b0 <__reset+0xfb0ea4b0>
8110a798:	00802034 	movhi	r2,128
8110a79c:	89801034 	orhi	r6,r17,64
8110a7a0:	10bfffc4 	addi	r2,r2,-1
8110a7a4:	b00f883a 	mov	r7,r22
8110a7a8:	308c703a 	and	r6,r6,r2
8110a7ac:	003f9206 	br	8110a5f8 <__reset+0xfb0ea5f8>

8110a7b0 <__mulsf3>:
8110a7b0:	defff504 	addi	sp,sp,-44
8110a7b4:	dc000115 	stw	r16,4(sp)
8110a7b8:	2020d5fa 	srli	r16,r4,23
8110a7bc:	dd400615 	stw	r21,24(sp)
8110a7c0:	202ad7fa 	srli	r21,r4,31
8110a7c4:	dc800315 	stw	r18,12(sp)
8110a7c8:	04802034 	movhi	r18,128
8110a7cc:	df000915 	stw	fp,36(sp)
8110a7d0:	dd000515 	stw	r20,20(sp)
8110a7d4:	94bfffc4 	addi	r18,r18,-1
8110a7d8:	dfc00a15 	stw	ra,40(sp)
8110a7dc:	ddc00815 	stw	r23,32(sp)
8110a7e0:	dd800715 	stw	r22,28(sp)
8110a7e4:	dcc00415 	stw	r19,16(sp)
8110a7e8:	dc400215 	stw	r17,8(sp)
8110a7ec:	84003fcc 	andi	r16,r16,255
8110a7f0:	9124703a 	and	r18,r18,r4
8110a7f4:	a829883a 	mov	r20,r21
8110a7f8:	af003fcc 	andi	fp,r21,255
8110a7fc:	80005426 	beq	r16,zero,8110a950 <__mulsf3+0x1a0>
8110a800:	00803fc4 	movi	r2,255
8110a804:	80802f26 	beq	r16,r2,8110a8c4 <__mulsf3+0x114>
8110a808:	91002034 	orhi	r4,r18,128
8110a80c:	202490fa 	slli	r18,r4,3
8110a810:	843fe044 	addi	r16,r16,-127
8110a814:	0023883a 	mov	r17,zero
8110a818:	002f883a 	mov	r23,zero
8110a81c:	2804d5fa 	srli	r2,r5,23
8110a820:	282cd7fa 	srli	r22,r5,31
8110a824:	01002034 	movhi	r4,128
8110a828:	213fffc4 	addi	r4,r4,-1
8110a82c:	10803fcc 	andi	r2,r2,255
8110a830:	2166703a 	and	r19,r4,r5
8110a834:	b1803fcc 	andi	r6,r22,255
8110a838:	10004c26 	beq	r2,zero,8110a96c <__mulsf3+0x1bc>
8110a83c:	00c03fc4 	movi	r3,255
8110a840:	10c04726 	beq	r2,r3,8110a960 <__mulsf3+0x1b0>
8110a844:	99002034 	orhi	r4,r19,128
8110a848:	202690fa 	slli	r19,r4,3
8110a84c:	10bfe044 	addi	r2,r2,-127
8110a850:	0007883a 	mov	r3,zero
8110a854:	80a1883a 	add	r16,r16,r2
8110a858:	010003c4 	movi	r4,15
8110a85c:	1c44b03a 	or	r2,r3,r17
8110a860:	b56af03a 	xor	r21,r22,r21
8110a864:	81c00044 	addi	r7,r16,1
8110a868:	20806b36 	bltu	r4,r2,8110aa18 <__mulsf3+0x268>
8110a86c:	100490ba 	slli	r2,r2,2
8110a870:	01204474 	movhi	r4,33041
8110a874:	212a2104 	addi	r4,r4,-22396
8110a878:	1105883a 	add	r2,r2,r4
8110a87c:	10800017 	ldw	r2,0(r2)
8110a880:	1000683a 	jmp	r2
8110a884:	8110aa18 	cmpnei	r4,r16,17064
8110a888:	8110a8d8 	cmpnei	r4,r16,17059
8110a88c:	8110a8d8 	cmpnei	r4,r16,17059
8110a890:	8110a8d4 	ori	r4,r16,17059
8110a894:	8110a9fc 	xorhi	r4,r16,17063
8110a898:	8110a9fc 	xorhi	r4,r16,17063
8110a89c:	8110a9e8 	cmpgeui	r4,r16,17063
8110a8a0:	8110a8d4 	ori	r4,r16,17059
8110a8a4:	8110a9fc 	xorhi	r4,r16,17063
8110a8a8:	8110a9e8 	cmpgeui	r4,r16,17063
8110a8ac:	8110a9fc 	xorhi	r4,r16,17063
8110a8b0:	8110a8d4 	ori	r4,r16,17059
8110a8b4:	8110aa08 	cmpgei	r4,r16,17064
8110a8b8:	8110aa08 	cmpgei	r4,r16,17064
8110a8bc:	8110aa08 	cmpgei	r4,r16,17064
8110a8c0:	8110aae4 	muli	r4,r16,17067
8110a8c4:	90003b1e 	bne	r18,zero,8110a9b4 <__mulsf3+0x204>
8110a8c8:	04400204 	movi	r17,8
8110a8cc:	05c00084 	movi	r23,2
8110a8d0:	003fd206 	br	8110a81c <__reset+0xfb0ea81c>
8110a8d4:	302b883a 	mov	r21,r6
8110a8d8:	00800084 	movi	r2,2
8110a8dc:	18802626 	beq	r3,r2,8110a978 <__mulsf3+0x1c8>
8110a8e0:	008000c4 	movi	r2,3
8110a8e4:	1880ab26 	beq	r3,r2,8110ab94 <__mulsf3+0x3e4>
8110a8e8:	00800044 	movi	r2,1
8110a8ec:	1880a21e 	bne	r3,r2,8110ab78 <__mulsf3+0x3c8>
8110a8f0:	a829883a 	mov	r20,r21
8110a8f4:	0007883a 	mov	r3,zero
8110a8f8:	0009883a 	mov	r4,zero
8110a8fc:	18803fcc 	andi	r2,r3,255
8110a900:	100695fa 	slli	r3,r2,23
8110a904:	a0803fcc 	andi	r2,r20,255
8110a908:	100a97fa 	slli	r5,r2,31
8110a90c:	00802034 	movhi	r2,128
8110a910:	10bfffc4 	addi	r2,r2,-1
8110a914:	2084703a 	and	r2,r4,r2
8110a918:	10c4b03a 	or	r2,r2,r3
8110a91c:	1144b03a 	or	r2,r2,r5
8110a920:	dfc00a17 	ldw	ra,40(sp)
8110a924:	df000917 	ldw	fp,36(sp)
8110a928:	ddc00817 	ldw	r23,32(sp)
8110a92c:	dd800717 	ldw	r22,28(sp)
8110a930:	dd400617 	ldw	r21,24(sp)
8110a934:	dd000517 	ldw	r20,20(sp)
8110a938:	dcc00417 	ldw	r19,16(sp)
8110a93c:	dc800317 	ldw	r18,12(sp)
8110a940:	dc400217 	ldw	r17,8(sp)
8110a944:	dc000117 	ldw	r16,4(sp)
8110a948:	dec00b04 	addi	sp,sp,44
8110a94c:	f800283a 	ret
8110a950:	90000d1e 	bne	r18,zero,8110a988 <__mulsf3+0x1d8>
8110a954:	04400104 	movi	r17,4
8110a958:	05c00044 	movi	r23,1
8110a95c:	003faf06 	br	8110a81c <__reset+0xfb0ea81c>
8110a960:	9806c03a 	cmpne	r3,r19,zero
8110a964:	18c00084 	addi	r3,r3,2
8110a968:	003fba06 	br	8110a854 <__reset+0xfb0ea854>
8110a96c:	9800141e 	bne	r19,zero,8110a9c0 <__mulsf3+0x210>
8110a970:	00c00044 	movi	r3,1
8110a974:	003fb706 	br	8110a854 <__reset+0xfb0ea854>
8110a978:	a829883a 	mov	r20,r21
8110a97c:	00ffffc4 	movi	r3,-1
8110a980:	0009883a 	mov	r4,zero
8110a984:	003fdd06 	br	8110a8fc <__reset+0xfb0ea8fc>
8110a988:	9009883a 	mov	r4,r18
8110a98c:	d9400015 	stw	r5,0(sp)
8110a990:	110b7900 	call	8110b790 <__clzsi2>
8110a994:	10fffec4 	addi	r3,r2,-5
8110a998:	10801d84 	addi	r2,r2,118
8110a99c:	90e4983a 	sll	r18,r18,r3
8110a9a0:	00a1c83a 	sub	r16,zero,r2
8110a9a4:	0023883a 	mov	r17,zero
8110a9a8:	002f883a 	mov	r23,zero
8110a9ac:	d9400017 	ldw	r5,0(sp)
8110a9b0:	003f9a06 	br	8110a81c <__reset+0xfb0ea81c>
8110a9b4:	04400304 	movi	r17,12
8110a9b8:	05c000c4 	movi	r23,3
8110a9bc:	003f9706 	br	8110a81c <__reset+0xfb0ea81c>
8110a9c0:	9809883a 	mov	r4,r19
8110a9c4:	d9800015 	stw	r6,0(sp)
8110a9c8:	110b7900 	call	8110b790 <__clzsi2>
8110a9cc:	10fffec4 	addi	r3,r2,-5
8110a9d0:	10801d84 	addi	r2,r2,118
8110a9d4:	98e6983a 	sll	r19,r19,r3
8110a9d8:	0085c83a 	sub	r2,zero,r2
8110a9dc:	0007883a 	mov	r3,zero
8110a9e0:	d9800017 	ldw	r6,0(sp)
8110a9e4:	003f9b06 	br	8110a854 <__reset+0xfb0ea854>
8110a9e8:	01002034 	movhi	r4,128
8110a9ec:	0029883a 	mov	r20,zero
8110a9f0:	213fffc4 	addi	r4,r4,-1
8110a9f4:	00ffffc4 	movi	r3,-1
8110a9f8:	003fc006 	br	8110a8fc <__reset+0xfb0ea8fc>
8110a9fc:	9027883a 	mov	r19,r18
8110aa00:	b807883a 	mov	r3,r23
8110aa04:	003fb406 	br	8110a8d8 <__reset+0xfb0ea8d8>
8110aa08:	9027883a 	mov	r19,r18
8110aa0c:	e02b883a 	mov	r21,fp
8110aa10:	b807883a 	mov	r3,r23
8110aa14:	003fb006 	br	8110a8d8 <__reset+0xfb0ea8d8>
8110aa18:	9004d43a 	srli	r2,r18,16
8110aa1c:	9810d43a 	srli	r8,r19,16
8110aa20:	94bfffcc 	andi	r18,r18,65535
8110aa24:	993fffcc 	andi	r4,r19,65535
8110aa28:	910d383a 	mul	r6,r18,r4
8110aa2c:	20a7383a 	mul	r19,r4,r2
8110aa30:	9225383a 	mul	r18,r18,r8
8110aa34:	3006d43a 	srli	r3,r6,16
8110aa38:	1211383a 	mul	r8,r2,r8
8110aa3c:	94e5883a 	add	r18,r18,r19
8110aa40:	1c87883a 	add	r3,r3,r18
8110aa44:	1cc0022e 	bgeu	r3,r19,8110aa50 <__mulsf3+0x2a0>
8110aa48:	00800074 	movhi	r2,1
8110aa4c:	4091883a 	add	r8,r8,r2
8110aa50:	1804943a 	slli	r2,r3,16
8110aa54:	31bfffcc 	andi	r6,r6,65535
8110aa58:	1806d43a 	srli	r3,r3,16
8110aa5c:	1185883a 	add	r2,r2,r6
8110aa60:	102691ba 	slli	r19,r2,6
8110aa64:	1a07883a 	add	r3,r3,r8
8110aa68:	1004d6ba 	srli	r2,r2,26
8110aa6c:	180891ba 	slli	r4,r3,6
8110aa70:	9826c03a 	cmpne	r19,r19,zero
8110aa74:	9884b03a 	or	r2,r19,r2
8110aa78:	1126b03a 	or	r19,r2,r4
8110aa7c:	9882002c 	andhi	r2,r19,2048
8110aa80:	10000426 	beq	r2,zero,8110aa94 <__mulsf3+0x2e4>
8110aa84:	9804d07a 	srli	r2,r19,1
8110aa88:	9900004c 	andi	r4,r19,1
8110aa8c:	3821883a 	mov	r16,r7
8110aa90:	1126b03a 	or	r19,r2,r4
8110aa94:	80c01fc4 	addi	r3,r16,127
8110aa98:	00c0210e 	bge	zero,r3,8110ab20 <__mulsf3+0x370>
8110aa9c:	988001cc 	andi	r2,r19,7
8110aaa0:	10000426 	beq	r2,zero,8110aab4 <__mulsf3+0x304>
8110aaa4:	988003cc 	andi	r2,r19,15
8110aaa8:	01000104 	movi	r4,4
8110aaac:	11000126 	beq	r2,r4,8110aab4 <__mulsf3+0x304>
8110aab0:	9927883a 	add	r19,r19,r4
8110aab4:	9882002c 	andhi	r2,r19,2048
8110aab8:	10000426 	beq	r2,zero,8110aacc <__mulsf3+0x31c>
8110aabc:	00be0034 	movhi	r2,63488
8110aac0:	10bfffc4 	addi	r2,r2,-1
8110aac4:	80c02004 	addi	r3,r16,128
8110aac8:	98a6703a 	and	r19,r19,r2
8110aacc:	00803f84 	movi	r2,254
8110aad0:	10ffa916 	blt	r2,r3,8110a978 <__reset+0xfb0ea978>
8110aad4:	980891ba 	slli	r4,r19,6
8110aad8:	a829883a 	mov	r20,r21
8110aadc:	2008d27a 	srli	r4,r4,9
8110aae0:	003f8606 	br	8110a8fc <__reset+0xfb0ea8fc>
8110aae4:	9080102c 	andhi	r2,r18,64
8110aae8:	10000826 	beq	r2,zero,8110ab0c <__mulsf3+0x35c>
8110aaec:	9880102c 	andhi	r2,r19,64
8110aaf0:	1000061e 	bne	r2,zero,8110ab0c <__mulsf3+0x35c>
8110aaf4:	00802034 	movhi	r2,128
8110aaf8:	99001034 	orhi	r4,r19,64
8110aafc:	10bfffc4 	addi	r2,r2,-1
8110ab00:	b029883a 	mov	r20,r22
8110ab04:	2088703a 	and	r4,r4,r2
8110ab08:	003fba06 	br	8110a9f4 <__reset+0xfb0ea9f4>
8110ab0c:	00802034 	movhi	r2,128
8110ab10:	91001034 	orhi	r4,r18,64
8110ab14:	10bfffc4 	addi	r2,r2,-1
8110ab18:	2088703a 	and	r4,r4,r2
8110ab1c:	003fb506 	br	8110a9f4 <__reset+0xfb0ea9f4>
8110ab20:	00800044 	movi	r2,1
8110ab24:	10c7c83a 	sub	r3,r2,r3
8110ab28:	008006c4 	movi	r2,27
8110ab2c:	10ff7016 	blt	r2,r3,8110a8f0 <__reset+0xfb0ea8f0>
8110ab30:	00800804 	movi	r2,32
8110ab34:	10c5c83a 	sub	r2,r2,r3
8110ab38:	9884983a 	sll	r2,r19,r2
8110ab3c:	98c6d83a 	srl	r3,r19,r3
8110ab40:	1004c03a 	cmpne	r2,r2,zero
8110ab44:	1884b03a 	or	r2,r3,r2
8110ab48:	10c001cc 	andi	r3,r2,7
8110ab4c:	18000426 	beq	r3,zero,8110ab60 <__mulsf3+0x3b0>
8110ab50:	10c003cc 	andi	r3,r2,15
8110ab54:	01000104 	movi	r4,4
8110ab58:	19000126 	beq	r3,r4,8110ab60 <__mulsf3+0x3b0>
8110ab5c:	1105883a 	add	r2,r2,r4
8110ab60:	10c1002c 	andhi	r3,r2,1024
8110ab64:	18000626 	beq	r3,zero,8110ab80 <__mulsf3+0x3d0>
8110ab68:	a829883a 	mov	r20,r21
8110ab6c:	00c00044 	movi	r3,1
8110ab70:	0009883a 	mov	r4,zero
8110ab74:	003f6106 	br	8110a8fc <__reset+0xfb0ea8fc>
8110ab78:	3821883a 	mov	r16,r7
8110ab7c:	003fc506 	br	8110aa94 <__reset+0xfb0eaa94>
8110ab80:	100491ba 	slli	r2,r2,6
8110ab84:	a829883a 	mov	r20,r21
8110ab88:	0007883a 	mov	r3,zero
8110ab8c:	1008d27a 	srli	r4,r2,9
8110ab90:	003f5a06 	br	8110a8fc <__reset+0xfb0ea8fc>
8110ab94:	00802034 	movhi	r2,128
8110ab98:	99001034 	orhi	r4,r19,64
8110ab9c:	10bfffc4 	addi	r2,r2,-1
8110aba0:	a829883a 	mov	r20,r21
8110aba4:	2088703a 	and	r4,r4,r2
8110aba8:	003f9206 	br	8110a9f4 <__reset+0xfb0ea9f4>

8110abac <__floatsisf>:
8110abac:	defffd04 	addi	sp,sp,-12
8110abb0:	dfc00215 	stw	ra,8(sp)
8110abb4:	dc400115 	stw	r17,4(sp)
8110abb8:	dc000015 	stw	r16,0(sp)
8110abbc:	20003526 	beq	r4,zero,8110ac94 <__floatsisf+0xe8>
8110abc0:	2021883a 	mov	r16,r4
8110abc4:	2022d7fa 	srli	r17,r4,31
8110abc8:	20003616 	blt	r4,zero,8110aca4 <__floatsisf+0xf8>
8110abcc:	8009883a 	mov	r4,r16
8110abd0:	110b7900 	call	8110b790 <__clzsi2>
8110abd4:	00c02784 	movi	r3,158
8110abd8:	1887c83a 	sub	r3,r3,r2
8110abdc:	01002584 	movi	r4,150
8110abe0:	20c01416 	blt	r4,r3,8110ac34 <__floatsisf+0x88>
8110abe4:	20c9c83a 	sub	r4,r4,r3
8110abe8:	8120983a 	sll	r16,r16,r4
8110abec:	00802034 	movhi	r2,128
8110abf0:	10bfffc4 	addi	r2,r2,-1
8110abf4:	8809883a 	mov	r4,r17
8110abf8:	80a0703a 	and	r16,r16,r2
8110abfc:	18803fcc 	andi	r2,r3,255
8110ac00:	100695fa 	slli	r3,r2,23
8110ac04:	20803fcc 	andi	r2,r4,255
8110ac08:	100897fa 	slli	r4,r2,31
8110ac0c:	00802034 	movhi	r2,128
8110ac10:	10bfffc4 	addi	r2,r2,-1
8110ac14:	8084703a 	and	r2,r16,r2
8110ac18:	10c4b03a 	or	r2,r2,r3
8110ac1c:	1104b03a 	or	r2,r2,r4
8110ac20:	dfc00217 	ldw	ra,8(sp)
8110ac24:	dc400117 	ldw	r17,4(sp)
8110ac28:	dc000017 	ldw	r16,0(sp)
8110ac2c:	dec00304 	addi	sp,sp,12
8110ac30:	f800283a 	ret
8110ac34:	01002644 	movi	r4,153
8110ac38:	20c01c16 	blt	r4,r3,8110acac <__floatsisf+0x100>
8110ac3c:	20c9c83a 	sub	r4,r4,r3
8110ac40:	8120983a 	sll	r16,r16,r4
8110ac44:	013f0034 	movhi	r4,64512
8110ac48:	213fffc4 	addi	r4,r4,-1
8110ac4c:	814001cc 	andi	r5,r16,7
8110ac50:	8108703a 	and	r4,r16,r4
8110ac54:	28000426 	beq	r5,zero,8110ac68 <__floatsisf+0xbc>
8110ac58:	840003cc 	andi	r16,r16,15
8110ac5c:	01400104 	movi	r5,4
8110ac60:	81400126 	beq	r16,r5,8110ac68 <__floatsisf+0xbc>
8110ac64:	2149883a 	add	r4,r4,r5
8110ac68:	2141002c 	andhi	r5,r4,1024
8110ac6c:	28000526 	beq	r5,zero,8110ac84 <__floatsisf+0xd8>
8110ac70:	00c027c4 	movi	r3,159
8110ac74:	1887c83a 	sub	r3,r3,r2
8110ac78:	00bf0034 	movhi	r2,64512
8110ac7c:	10bfffc4 	addi	r2,r2,-1
8110ac80:	2088703a 	and	r4,r4,r2
8110ac84:	202091ba 	slli	r16,r4,6
8110ac88:	8809883a 	mov	r4,r17
8110ac8c:	8020d27a 	srli	r16,r16,9
8110ac90:	003fda06 	br	8110abfc <__reset+0xfb0eabfc>
8110ac94:	0009883a 	mov	r4,zero
8110ac98:	0007883a 	mov	r3,zero
8110ac9c:	0021883a 	mov	r16,zero
8110aca0:	003fd606 	br	8110abfc <__reset+0xfb0eabfc>
8110aca4:	0121c83a 	sub	r16,zero,r4
8110aca8:	003fc806 	br	8110abcc <__reset+0xfb0eabcc>
8110acac:	01002e44 	movi	r4,185
8110acb0:	20c9c83a 	sub	r4,r4,r3
8110acb4:	01400144 	movi	r5,5
8110acb8:	8108983a 	sll	r4,r16,r4
8110acbc:	288bc83a 	sub	r5,r5,r2
8110acc0:	8160d83a 	srl	r16,r16,r5
8110acc4:	2008c03a 	cmpne	r4,r4,zero
8110acc8:	8120b03a 	or	r16,r16,r4
8110accc:	003fdd06 	br	8110ac44 <__reset+0xfb0eac44>

8110acd0 <__floatunsisf>:
8110acd0:	defffe04 	addi	sp,sp,-8
8110acd4:	dfc00115 	stw	ra,4(sp)
8110acd8:	dc000015 	stw	r16,0(sp)
8110acdc:	20002c26 	beq	r4,zero,8110ad90 <__floatunsisf+0xc0>
8110ace0:	2021883a 	mov	r16,r4
8110ace4:	110b7900 	call	8110b790 <__clzsi2>
8110ace8:	00c02784 	movi	r3,158
8110acec:	1887c83a 	sub	r3,r3,r2
8110acf0:	01002584 	movi	r4,150
8110acf4:	20c00f16 	blt	r4,r3,8110ad34 <__floatunsisf+0x64>
8110acf8:	20c9c83a 	sub	r4,r4,r3
8110acfc:	8108983a 	sll	r4,r16,r4
8110ad00:	00802034 	movhi	r2,128
8110ad04:	10bfffc4 	addi	r2,r2,-1
8110ad08:	2088703a 	and	r4,r4,r2
8110ad0c:	18803fcc 	andi	r2,r3,255
8110ad10:	100695fa 	slli	r3,r2,23
8110ad14:	00802034 	movhi	r2,128
8110ad18:	10bfffc4 	addi	r2,r2,-1
8110ad1c:	2084703a 	and	r2,r4,r2
8110ad20:	10c4b03a 	or	r2,r2,r3
8110ad24:	dfc00117 	ldw	ra,4(sp)
8110ad28:	dc000017 	ldw	r16,0(sp)
8110ad2c:	dec00204 	addi	sp,sp,8
8110ad30:	f800283a 	ret
8110ad34:	01002644 	movi	r4,153
8110ad38:	20c01816 	blt	r4,r3,8110ad9c <__floatunsisf+0xcc>
8110ad3c:	20c9c83a 	sub	r4,r4,r3
8110ad40:	8108983a 	sll	r4,r16,r4
8110ad44:	017f0034 	movhi	r5,64512
8110ad48:	297fffc4 	addi	r5,r5,-1
8110ad4c:	218001cc 	andi	r6,r4,7
8110ad50:	214a703a 	and	r5,r4,r5
8110ad54:	30000426 	beq	r6,zero,8110ad68 <__floatunsisf+0x98>
8110ad58:	210003cc 	andi	r4,r4,15
8110ad5c:	01800104 	movi	r6,4
8110ad60:	21800126 	beq	r4,r6,8110ad68 <__floatunsisf+0x98>
8110ad64:	298b883a 	add	r5,r5,r6
8110ad68:	2901002c 	andhi	r4,r5,1024
8110ad6c:	20000526 	beq	r4,zero,8110ad84 <__floatunsisf+0xb4>
8110ad70:	00c027c4 	movi	r3,159
8110ad74:	1887c83a 	sub	r3,r3,r2
8110ad78:	00bf0034 	movhi	r2,64512
8110ad7c:	10bfffc4 	addi	r2,r2,-1
8110ad80:	288a703a 	and	r5,r5,r2
8110ad84:	280891ba 	slli	r4,r5,6
8110ad88:	2008d27a 	srli	r4,r4,9
8110ad8c:	003fdf06 	br	8110ad0c <__reset+0xfb0ead0c>
8110ad90:	0007883a 	mov	r3,zero
8110ad94:	0009883a 	mov	r4,zero
8110ad98:	003fdc06 	br	8110ad0c <__reset+0xfb0ead0c>
8110ad9c:	01402e44 	movi	r5,185
8110ada0:	28cbc83a 	sub	r5,r5,r3
8110ada4:	01000144 	movi	r4,5
8110ada8:	2089c83a 	sub	r4,r4,r2
8110adac:	814a983a 	sll	r5,r16,r5
8110adb0:	8108d83a 	srl	r4,r16,r4
8110adb4:	2820c03a 	cmpne	r16,r5,zero
8110adb8:	2408b03a 	or	r4,r4,r16
8110adbc:	003fe106 	br	8110ad44 <__reset+0xfb0ead44>

8110adc0 <__muldf3>:
8110adc0:	defff304 	addi	sp,sp,-52
8110adc4:	2804d53a 	srli	r2,r5,20
8110adc8:	dd800915 	stw	r22,36(sp)
8110adcc:	282cd7fa 	srli	r22,r5,31
8110add0:	dc000315 	stw	r16,12(sp)
8110add4:	04000434 	movhi	r16,16
8110add8:	dd400815 	stw	r21,32(sp)
8110addc:	dc800515 	stw	r18,20(sp)
8110ade0:	843fffc4 	addi	r16,r16,-1
8110ade4:	dfc00c15 	stw	ra,48(sp)
8110ade8:	df000b15 	stw	fp,44(sp)
8110adec:	ddc00a15 	stw	r23,40(sp)
8110adf0:	dd000715 	stw	r20,28(sp)
8110adf4:	dcc00615 	stw	r19,24(sp)
8110adf8:	dc400415 	stw	r17,16(sp)
8110adfc:	1481ffcc 	andi	r18,r2,2047
8110ae00:	2c20703a 	and	r16,r5,r16
8110ae04:	b02b883a 	mov	r21,r22
8110ae08:	b2403fcc 	andi	r9,r22,255
8110ae0c:	90006026 	beq	r18,zero,8110af90 <__muldf3+0x1d0>
8110ae10:	0081ffc4 	movi	r2,2047
8110ae14:	2029883a 	mov	r20,r4
8110ae18:	90803626 	beq	r18,r2,8110aef4 <__muldf3+0x134>
8110ae1c:	80800434 	orhi	r2,r16,16
8110ae20:	100490fa 	slli	r2,r2,3
8110ae24:	2020d77a 	srli	r16,r4,29
8110ae28:	202890fa 	slli	r20,r4,3
8110ae2c:	94bf0044 	addi	r18,r18,-1023
8110ae30:	80a0b03a 	or	r16,r16,r2
8110ae34:	0027883a 	mov	r19,zero
8110ae38:	0039883a 	mov	fp,zero
8110ae3c:	3804d53a 	srli	r2,r7,20
8110ae40:	382ed7fa 	srli	r23,r7,31
8110ae44:	04400434 	movhi	r17,16
8110ae48:	8c7fffc4 	addi	r17,r17,-1
8110ae4c:	1081ffcc 	andi	r2,r2,2047
8110ae50:	3011883a 	mov	r8,r6
8110ae54:	3c62703a 	and	r17,r7,r17
8110ae58:	ba803fcc 	andi	r10,r23,255
8110ae5c:	10006d26 	beq	r2,zero,8110b014 <__muldf3+0x254>
8110ae60:	00c1ffc4 	movi	r3,2047
8110ae64:	10c06526 	beq	r2,r3,8110affc <__muldf3+0x23c>
8110ae68:	88c00434 	orhi	r3,r17,16
8110ae6c:	180690fa 	slli	r3,r3,3
8110ae70:	3022d77a 	srli	r17,r6,29
8110ae74:	301090fa 	slli	r8,r6,3
8110ae78:	10bf0044 	addi	r2,r2,-1023
8110ae7c:	88e2b03a 	or	r17,r17,r3
8110ae80:	000b883a 	mov	r5,zero
8110ae84:	9085883a 	add	r2,r18,r2
8110ae88:	2cc8b03a 	or	r4,r5,r19
8110ae8c:	00c003c4 	movi	r3,15
8110ae90:	bdacf03a 	xor	r22,r23,r22
8110ae94:	12c00044 	addi	r11,r2,1
8110ae98:	19009936 	bltu	r3,r4,8110b100 <__muldf3+0x340>
8110ae9c:	200890ba 	slli	r4,r4,2
8110aea0:	00e04474 	movhi	r3,33041
8110aea4:	18ebad04 	addi	r3,r3,-20812
8110aea8:	20c9883a 	add	r4,r4,r3
8110aeac:	20c00017 	ldw	r3,0(r4)
8110aeb0:	1800683a 	jmp	r3
8110aeb4:	8110b100 	call	88110b10 <__reset+0x20f0b10>
8110aeb8:	8110af14 	ori	r4,r16,17084
8110aebc:	8110af14 	ori	r4,r16,17084
8110aec0:	8110af10 	cmplti	r4,r16,17084
8110aec4:	8110b0dc 	xori	r4,r16,17091
8110aec8:	8110b0dc 	xori	r4,r16,17091
8110aecc:	8110b0c4 	addi	r4,r16,17091
8110aed0:	8110af10 	cmplti	r4,r16,17084
8110aed4:	8110b0dc 	xori	r4,r16,17091
8110aed8:	8110b0c4 	addi	r4,r16,17091
8110aedc:	8110b0dc 	xori	r4,r16,17091
8110aee0:	8110af10 	cmplti	r4,r16,17084
8110aee4:	8110b0ec 	andhi	r4,r16,17091
8110aee8:	8110b0ec 	andhi	r4,r16,17091
8110aeec:	8110b0ec 	andhi	r4,r16,17091
8110aef0:	8110b308 	cmpgei	r4,r16,17100
8110aef4:	2404b03a 	or	r2,r4,r16
8110aef8:	10006f1e 	bne	r2,zero,8110b0b8 <__muldf3+0x2f8>
8110aefc:	04c00204 	movi	r19,8
8110af00:	0021883a 	mov	r16,zero
8110af04:	0029883a 	mov	r20,zero
8110af08:	07000084 	movi	fp,2
8110af0c:	003fcb06 	br	8110ae3c <__reset+0xfb0eae3c>
8110af10:	502d883a 	mov	r22,r10
8110af14:	00800084 	movi	r2,2
8110af18:	28805726 	beq	r5,r2,8110b078 <__muldf3+0x2b8>
8110af1c:	008000c4 	movi	r2,3
8110af20:	28816626 	beq	r5,r2,8110b4bc <__muldf3+0x6fc>
8110af24:	00800044 	movi	r2,1
8110af28:	2881411e 	bne	r5,r2,8110b430 <__muldf3+0x670>
8110af2c:	b02b883a 	mov	r21,r22
8110af30:	0005883a 	mov	r2,zero
8110af34:	000b883a 	mov	r5,zero
8110af38:	0029883a 	mov	r20,zero
8110af3c:	1004953a 	slli	r2,r2,20
8110af40:	a8c03fcc 	andi	r3,r21,255
8110af44:	04400434 	movhi	r17,16
8110af48:	8c7fffc4 	addi	r17,r17,-1
8110af4c:	180697fa 	slli	r3,r3,31
8110af50:	2c4a703a 	and	r5,r5,r17
8110af54:	288ab03a 	or	r5,r5,r2
8110af58:	28c6b03a 	or	r3,r5,r3
8110af5c:	a005883a 	mov	r2,r20
8110af60:	dfc00c17 	ldw	ra,48(sp)
8110af64:	df000b17 	ldw	fp,44(sp)
8110af68:	ddc00a17 	ldw	r23,40(sp)
8110af6c:	dd800917 	ldw	r22,36(sp)
8110af70:	dd400817 	ldw	r21,32(sp)
8110af74:	dd000717 	ldw	r20,28(sp)
8110af78:	dcc00617 	ldw	r19,24(sp)
8110af7c:	dc800517 	ldw	r18,20(sp)
8110af80:	dc400417 	ldw	r17,16(sp)
8110af84:	dc000317 	ldw	r16,12(sp)
8110af88:	dec00d04 	addi	sp,sp,52
8110af8c:	f800283a 	ret
8110af90:	2404b03a 	or	r2,r4,r16
8110af94:	2027883a 	mov	r19,r4
8110af98:	10004226 	beq	r2,zero,8110b0a4 <__muldf3+0x2e4>
8110af9c:	8000fc26 	beq	r16,zero,8110b390 <__muldf3+0x5d0>
8110afa0:	8009883a 	mov	r4,r16
8110afa4:	d9800215 	stw	r6,8(sp)
8110afa8:	d9c00015 	stw	r7,0(sp)
8110afac:	da400115 	stw	r9,4(sp)
8110afb0:	110b7900 	call	8110b790 <__clzsi2>
8110afb4:	d9800217 	ldw	r6,8(sp)
8110afb8:	d9c00017 	ldw	r7,0(sp)
8110afbc:	da400117 	ldw	r9,4(sp)
8110afc0:	113ffd44 	addi	r4,r2,-11
8110afc4:	00c00704 	movi	r3,28
8110afc8:	1900ed16 	blt	r3,r4,8110b380 <__muldf3+0x5c0>
8110afcc:	00c00744 	movi	r3,29
8110afd0:	147ffe04 	addi	r17,r2,-8
8110afd4:	1907c83a 	sub	r3,r3,r4
8110afd8:	8460983a 	sll	r16,r16,r17
8110afdc:	98c6d83a 	srl	r3,r19,r3
8110afe0:	9c68983a 	sll	r20,r19,r17
8110afe4:	1c20b03a 	or	r16,r3,r16
8110afe8:	1080fcc4 	addi	r2,r2,1011
8110afec:	00a5c83a 	sub	r18,zero,r2
8110aff0:	0027883a 	mov	r19,zero
8110aff4:	0039883a 	mov	fp,zero
8110aff8:	003f9006 	br	8110ae3c <__reset+0xfb0eae3c>
8110affc:	3446b03a 	or	r3,r6,r17
8110b000:	1800261e 	bne	r3,zero,8110b09c <__muldf3+0x2dc>
8110b004:	0023883a 	mov	r17,zero
8110b008:	0011883a 	mov	r8,zero
8110b00c:	01400084 	movi	r5,2
8110b010:	003f9c06 	br	8110ae84 <__reset+0xfb0eae84>
8110b014:	3446b03a 	or	r3,r6,r17
8110b018:	18001c26 	beq	r3,zero,8110b08c <__muldf3+0x2cc>
8110b01c:	8800ce26 	beq	r17,zero,8110b358 <__muldf3+0x598>
8110b020:	8809883a 	mov	r4,r17
8110b024:	d9800215 	stw	r6,8(sp)
8110b028:	da400115 	stw	r9,4(sp)
8110b02c:	da800015 	stw	r10,0(sp)
8110b030:	110b7900 	call	8110b790 <__clzsi2>
8110b034:	d9800217 	ldw	r6,8(sp)
8110b038:	da400117 	ldw	r9,4(sp)
8110b03c:	da800017 	ldw	r10,0(sp)
8110b040:	113ffd44 	addi	r4,r2,-11
8110b044:	00c00704 	movi	r3,28
8110b048:	1900bf16 	blt	r3,r4,8110b348 <__muldf3+0x588>
8110b04c:	00c00744 	movi	r3,29
8110b050:	123ffe04 	addi	r8,r2,-8
8110b054:	1907c83a 	sub	r3,r3,r4
8110b058:	8a22983a 	sll	r17,r17,r8
8110b05c:	30c6d83a 	srl	r3,r6,r3
8110b060:	3210983a 	sll	r8,r6,r8
8110b064:	1c62b03a 	or	r17,r3,r17
8110b068:	1080fcc4 	addi	r2,r2,1011
8110b06c:	0085c83a 	sub	r2,zero,r2
8110b070:	000b883a 	mov	r5,zero
8110b074:	003f8306 	br	8110ae84 <__reset+0xfb0eae84>
8110b078:	b02b883a 	mov	r21,r22
8110b07c:	0081ffc4 	movi	r2,2047
8110b080:	000b883a 	mov	r5,zero
8110b084:	0029883a 	mov	r20,zero
8110b088:	003fac06 	br	8110af3c <__reset+0xfb0eaf3c>
8110b08c:	0023883a 	mov	r17,zero
8110b090:	0011883a 	mov	r8,zero
8110b094:	01400044 	movi	r5,1
8110b098:	003f7a06 	br	8110ae84 <__reset+0xfb0eae84>
8110b09c:	014000c4 	movi	r5,3
8110b0a0:	003f7806 	br	8110ae84 <__reset+0xfb0eae84>
8110b0a4:	04c00104 	movi	r19,4
8110b0a8:	0021883a 	mov	r16,zero
8110b0ac:	0029883a 	mov	r20,zero
8110b0b0:	07000044 	movi	fp,1
8110b0b4:	003f6106 	br	8110ae3c <__reset+0xfb0eae3c>
8110b0b8:	04c00304 	movi	r19,12
8110b0bc:	070000c4 	movi	fp,3
8110b0c0:	003f5e06 	br	8110ae3c <__reset+0xfb0eae3c>
8110b0c4:	01400434 	movhi	r5,16
8110b0c8:	002b883a 	mov	r21,zero
8110b0cc:	297fffc4 	addi	r5,r5,-1
8110b0d0:	053fffc4 	movi	r20,-1
8110b0d4:	0081ffc4 	movi	r2,2047
8110b0d8:	003f9806 	br	8110af3c <__reset+0xfb0eaf3c>
8110b0dc:	8023883a 	mov	r17,r16
8110b0e0:	a011883a 	mov	r8,r20
8110b0e4:	e00b883a 	mov	r5,fp
8110b0e8:	003f8a06 	br	8110af14 <__reset+0xfb0eaf14>
8110b0ec:	8023883a 	mov	r17,r16
8110b0f0:	a011883a 	mov	r8,r20
8110b0f4:	482d883a 	mov	r22,r9
8110b0f8:	e00b883a 	mov	r5,fp
8110b0fc:	003f8506 	br	8110af14 <__reset+0xfb0eaf14>
8110b100:	a00ad43a 	srli	r5,r20,16
8110b104:	401ad43a 	srli	r13,r8,16
8110b108:	a53fffcc 	andi	r20,r20,65535
8110b10c:	423fffcc 	andi	r8,r8,65535
8110b110:	4519383a 	mul	r12,r8,r20
8110b114:	4147383a 	mul	r3,r8,r5
8110b118:	6d09383a 	mul	r4,r13,r20
8110b11c:	600cd43a 	srli	r6,r12,16
8110b120:	2b5d383a 	mul	r14,r5,r13
8110b124:	20c9883a 	add	r4,r4,r3
8110b128:	310d883a 	add	r6,r6,r4
8110b12c:	30c0022e 	bgeu	r6,r3,8110b138 <__muldf3+0x378>
8110b130:	00c00074 	movhi	r3,1
8110b134:	70dd883a 	add	r14,r14,r3
8110b138:	8826d43a 	srli	r19,r17,16
8110b13c:	8bffffcc 	andi	r15,r17,65535
8110b140:	7d23383a 	mul	r17,r15,r20
8110b144:	7949383a 	mul	r4,r15,r5
8110b148:	9d29383a 	mul	r20,r19,r20
8110b14c:	8814d43a 	srli	r10,r17,16
8110b150:	3012943a 	slli	r9,r6,16
8110b154:	a129883a 	add	r20,r20,r4
8110b158:	633fffcc 	andi	r12,r12,65535
8110b15c:	5515883a 	add	r10,r10,r20
8110b160:	3006d43a 	srli	r3,r6,16
8110b164:	4b13883a 	add	r9,r9,r12
8110b168:	2ccb383a 	mul	r5,r5,r19
8110b16c:	5100022e 	bgeu	r10,r4,8110b178 <__muldf3+0x3b8>
8110b170:	01000074 	movhi	r4,1
8110b174:	290b883a 	add	r5,r5,r4
8110b178:	802ad43a 	srli	r21,r16,16
8110b17c:	843fffcc 	andi	r16,r16,65535
8110b180:	440d383a 	mul	r6,r8,r16
8110b184:	4565383a 	mul	r18,r8,r21
8110b188:	8349383a 	mul	r4,r16,r13
8110b18c:	500e943a 	slli	r7,r10,16
8110b190:	3010d43a 	srli	r8,r6,16
8110b194:	5028d43a 	srli	r20,r10,16
8110b198:	2489883a 	add	r4,r4,r18
8110b19c:	8abfffcc 	andi	r10,r17,65535
8110b1a0:	3a95883a 	add	r10,r7,r10
8110b1a4:	4119883a 	add	r12,r8,r4
8110b1a8:	a169883a 	add	r20,r20,r5
8110b1ac:	1a87883a 	add	r3,r3,r10
8110b1b0:	6d5b383a 	mul	r13,r13,r21
8110b1b4:	6480022e 	bgeu	r12,r18,8110b1c0 <__muldf3+0x400>
8110b1b8:	01000074 	movhi	r4,1
8110b1bc:	691b883a 	add	r13,r13,r4
8110b1c0:	7c25383a 	mul	r18,r15,r16
8110b1c4:	7d4b383a 	mul	r5,r15,r21
8110b1c8:	84cf383a 	mul	r7,r16,r19
8110b1cc:	901ed43a 	srli	r15,r18,16
8110b1d0:	6008d43a 	srli	r4,r12,16
8110b1d4:	6010943a 	slli	r8,r12,16
8110b1d8:	394f883a 	add	r7,r7,r5
8110b1dc:	333fffcc 	andi	r12,r6,65535
8110b1e0:	79df883a 	add	r15,r15,r7
8110b1e4:	235b883a 	add	r13,r4,r13
8110b1e8:	9d63383a 	mul	r17,r19,r21
8110b1ec:	4309883a 	add	r4,r8,r12
8110b1f0:	7940022e 	bgeu	r15,r5,8110b1fc <__muldf3+0x43c>
8110b1f4:	01400074 	movhi	r5,1
8110b1f8:	8963883a 	add	r17,r17,r5
8110b1fc:	780a943a 	slli	r5,r15,16
8110b200:	91bfffcc 	andi	r6,r18,65535
8110b204:	70c7883a 	add	r3,r14,r3
8110b208:	298d883a 	add	r6,r5,r6
8110b20c:	1a8f803a 	cmpltu	r7,r3,r10
8110b210:	350b883a 	add	r5,r6,r20
8110b214:	20c7883a 	add	r3,r4,r3
8110b218:	3955883a 	add	r10,r7,r5
8110b21c:	1909803a 	cmpltu	r4,r3,r4
8110b220:	6a91883a 	add	r8,r13,r10
8110b224:	780cd43a 	srli	r6,r15,16
8110b228:	2219883a 	add	r12,r4,r8
8110b22c:	2d0b803a 	cmpltu	r5,r5,r20
8110b230:	51cf803a 	cmpltu	r7,r10,r7
8110b234:	29ceb03a 	or	r7,r5,r7
8110b238:	4351803a 	cmpltu	r8,r8,r13
8110b23c:	610b803a 	cmpltu	r5,r12,r4
8110b240:	4148b03a 	or	r4,r8,r5
8110b244:	398f883a 	add	r7,r7,r6
8110b248:	3909883a 	add	r4,r7,r4
8110b24c:	1810927a 	slli	r8,r3,9
8110b250:	2449883a 	add	r4,r4,r17
8110b254:	2008927a 	slli	r4,r4,9
8110b258:	6022d5fa 	srli	r17,r12,23
8110b25c:	1806d5fa 	srli	r3,r3,23
8110b260:	4252b03a 	or	r9,r8,r9
8110b264:	600a927a 	slli	r5,r12,9
8110b268:	4810c03a 	cmpne	r8,r9,zero
8110b26c:	2462b03a 	or	r17,r4,r17
8110b270:	40c6b03a 	or	r3,r8,r3
8110b274:	8900402c 	andhi	r4,r17,256
8110b278:	1950b03a 	or	r8,r3,r5
8110b27c:	20000726 	beq	r4,zero,8110b29c <__muldf3+0x4dc>
8110b280:	4006d07a 	srli	r3,r8,1
8110b284:	880497fa 	slli	r2,r17,31
8110b288:	4200004c 	andi	r8,r8,1
8110b28c:	8822d07a 	srli	r17,r17,1
8110b290:	1a10b03a 	or	r8,r3,r8
8110b294:	1210b03a 	or	r8,r2,r8
8110b298:	5805883a 	mov	r2,r11
8110b29c:	1140ffc4 	addi	r5,r2,1023
8110b2a0:	0140440e 	bge	zero,r5,8110b3b4 <__muldf3+0x5f4>
8110b2a4:	40c001cc 	andi	r3,r8,7
8110b2a8:	18000726 	beq	r3,zero,8110b2c8 <__muldf3+0x508>
8110b2ac:	40c003cc 	andi	r3,r8,15
8110b2b0:	01000104 	movi	r4,4
8110b2b4:	19000426 	beq	r3,r4,8110b2c8 <__muldf3+0x508>
8110b2b8:	4107883a 	add	r3,r8,r4
8110b2bc:	1a11803a 	cmpltu	r8,r3,r8
8110b2c0:	8a23883a 	add	r17,r17,r8
8110b2c4:	1811883a 	mov	r8,r3
8110b2c8:	88c0402c 	andhi	r3,r17,256
8110b2cc:	18000426 	beq	r3,zero,8110b2e0 <__muldf3+0x520>
8110b2d0:	11410004 	addi	r5,r2,1024
8110b2d4:	00bfc034 	movhi	r2,65280
8110b2d8:	10bfffc4 	addi	r2,r2,-1
8110b2dc:	88a2703a 	and	r17,r17,r2
8110b2e0:	0081ff84 	movi	r2,2046
8110b2e4:	117f6416 	blt	r2,r5,8110b078 <__reset+0xfb0eb078>
8110b2e8:	8828977a 	slli	r20,r17,29
8110b2ec:	4010d0fa 	srli	r8,r8,3
8110b2f0:	8822927a 	slli	r17,r17,9
8110b2f4:	2881ffcc 	andi	r2,r5,2047
8110b2f8:	a228b03a 	or	r20,r20,r8
8110b2fc:	880ad33a 	srli	r5,r17,12
8110b300:	b02b883a 	mov	r21,r22
8110b304:	003f0d06 	br	8110af3c <__reset+0xfb0eaf3c>
8110b308:	8080022c 	andhi	r2,r16,8
8110b30c:	10000926 	beq	r2,zero,8110b334 <__muldf3+0x574>
8110b310:	8880022c 	andhi	r2,r17,8
8110b314:	1000071e 	bne	r2,zero,8110b334 <__muldf3+0x574>
8110b318:	00800434 	movhi	r2,16
8110b31c:	89400234 	orhi	r5,r17,8
8110b320:	10bfffc4 	addi	r2,r2,-1
8110b324:	b82b883a 	mov	r21,r23
8110b328:	288a703a 	and	r5,r5,r2
8110b32c:	4029883a 	mov	r20,r8
8110b330:	003f6806 	br	8110b0d4 <__reset+0xfb0eb0d4>
8110b334:	00800434 	movhi	r2,16
8110b338:	81400234 	orhi	r5,r16,8
8110b33c:	10bfffc4 	addi	r2,r2,-1
8110b340:	288a703a 	and	r5,r5,r2
8110b344:	003f6306 	br	8110b0d4 <__reset+0xfb0eb0d4>
8110b348:	147ff604 	addi	r17,r2,-40
8110b34c:	3462983a 	sll	r17,r6,r17
8110b350:	0011883a 	mov	r8,zero
8110b354:	003f4406 	br	8110b068 <__reset+0xfb0eb068>
8110b358:	3009883a 	mov	r4,r6
8110b35c:	d9800215 	stw	r6,8(sp)
8110b360:	da400115 	stw	r9,4(sp)
8110b364:	da800015 	stw	r10,0(sp)
8110b368:	110b7900 	call	8110b790 <__clzsi2>
8110b36c:	10800804 	addi	r2,r2,32
8110b370:	da800017 	ldw	r10,0(sp)
8110b374:	da400117 	ldw	r9,4(sp)
8110b378:	d9800217 	ldw	r6,8(sp)
8110b37c:	003f3006 	br	8110b040 <__reset+0xfb0eb040>
8110b380:	143ff604 	addi	r16,r2,-40
8110b384:	9c20983a 	sll	r16,r19,r16
8110b388:	0029883a 	mov	r20,zero
8110b38c:	003f1606 	br	8110afe8 <__reset+0xfb0eafe8>
8110b390:	d9800215 	stw	r6,8(sp)
8110b394:	d9c00015 	stw	r7,0(sp)
8110b398:	da400115 	stw	r9,4(sp)
8110b39c:	110b7900 	call	8110b790 <__clzsi2>
8110b3a0:	10800804 	addi	r2,r2,32
8110b3a4:	da400117 	ldw	r9,4(sp)
8110b3a8:	d9c00017 	ldw	r7,0(sp)
8110b3ac:	d9800217 	ldw	r6,8(sp)
8110b3b0:	003f0306 	br	8110afc0 <__reset+0xfb0eafc0>
8110b3b4:	00c00044 	movi	r3,1
8110b3b8:	1947c83a 	sub	r3,r3,r5
8110b3bc:	00800e04 	movi	r2,56
8110b3c0:	10feda16 	blt	r2,r3,8110af2c <__reset+0xfb0eaf2c>
8110b3c4:	008007c4 	movi	r2,31
8110b3c8:	10c01b16 	blt	r2,r3,8110b438 <__muldf3+0x678>
8110b3cc:	00800804 	movi	r2,32
8110b3d0:	10c5c83a 	sub	r2,r2,r3
8110b3d4:	888a983a 	sll	r5,r17,r2
8110b3d8:	40c8d83a 	srl	r4,r8,r3
8110b3dc:	4084983a 	sll	r2,r8,r2
8110b3e0:	88e2d83a 	srl	r17,r17,r3
8110b3e4:	2906b03a 	or	r3,r5,r4
8110b3e8:	1004c03a 	cmpne	r2,r2,zero
8110b3ec:	1886b03a 	or	r3,r3,r2
8110b3f0:	188001cc 	andi	r2,r3,7
8110b3f4:	10000726 	beq	r2,zero,8110b414 <__muldf3+0x654>
8110b3f8:	188003cc 	andi	r2,r3,15
8110b3fc:	01000104 	movi	r4,4
8110b400:	11000426 	beq	r2,r4,8110b414 <__muldf3+0x654>
8110b404:	1805883a 	mov	r2,r3
8110b408:	10c00104 	addi	r3,r2,4
8110b40c:	1885803a 	cmpltu	r2,r3,r2
8110b410:	88a3883a 	add	r17,r17,r2
8110b414:	8880202c 	andhi	r2,r17,128
8110b418:	10001c26 	beq	r2,zero,8110b48c <__muldf3+0x6cc>
8110b41c:	b02b883a 	mov	r21,r22
8110b420:	00800044 	movi	r2,1
8110b424:	000b883a 	mov	r5,zero
8110b428:	0029883a 	mov	r20,zero
8110b42c:	003ec306 	br	8110af3c <__reset+0xfb0eaf3c>
8110b430:	5805883a 	mov	r2,r11
8110b434:	003f9906 	br	8110b29c <__reset+0xfb0eb29c>
8110b438:	00bff844 	movi	r2,-31
8110b43c:	1145c83a 	sub	r2,r2,r5
8110b440:	8888d83a 	srl	r4,r17,r2
8110b444:	00800804 	movi	r2,32
8110b448:	18801a26 	beq	r3,r2,8110b4b4 <__muldf3+0x6f4>
8110b44c:	00801004 	movi	r2,64
8110b450:	10c5c83a 	sub	r2,r2,r3
8110b454:	8884983a 	sll	r2,r17,r2
8110b458:	1204b03a 	or	r2,r2,r8
8110b45c:	1004c03a 	cmpne	r2,r2,zero
8110b460:	2084b03a 	or	r2,r4,r2
8110b464:	144001cc 	andi	r17,r2,7
8110b468:	88000d1e 	bne	r17,zero,8110b4a0 <__muldf3+0x6e0>
8110b46c:	000b883a 	mov	r5,zero
8110b470:	1028d0fa 	srli	r20,r2,3
8110b474:	b02b883a 	mov	r21,r22
8110b478:	0005883a 	mov	r2,zero
8110b47c:	a468b03a 	or	r20,r20,r17
8110b480:	003eae06 	br	8110af3c <__reset+0xfb0eaf3c>
8110b484:	1007883a 	mov	r3,r2
8110b488:	0023883a 	mov	r17,zero
8110b48c:	880a927a 	slli	r5,r17,9
8110b490:	1805883a 	mov	r2,r3
8110b494:	8822977a 	slli	r17,r17,29
8110b498:	280ad33a 	srli	r5,r5,12
8110b49c:	003ff406 	br	8110b470 <__reset+0xfb0eb470>
8110b4a0:	10c003cc 	andi	r3,r2,15
8110b4a4:	01000104 	movi	r4,4
8110b4a8:	193ff626 	beq	r3,r4,8110b484 <__reset+0xfb0eb484>
8110b4ac:	0023883a 	mov	r17,zero
8110b4b0:	003fd506 	br	8110b408 <__reset+0xfb0eb408>
8110b4b4:	0005883a 	mov	r2,zero
8110b4b8:	003fe706 	br	8110b458 <__reset+0xfb0eb458>
8110b4bc:	00800434 	movhi	r2,16
8110b4c0:	89400234 	orhi	r5,r17,8
8110b4c4:	10bfffc4 	addi	r2,r2,-1
8110b4c8:	b02b883a 	mov	r21,r22
8110b4cc:	288a703a 	and	r5,r5,r2
8110b4d0:	4029883a 	mov	r20,r8
8110b4d4:	003eff06 	br	8110b0d4 <__reset+0xfb0eb0d4>

8110b4d8 <__extendsfdf2>:
8110b4d8:	200ad5fa 	srli	r5,r4,23
8110b4dc:	defffd04 	addi	sp,sp,-12
8110b4e0:	dc400115 	stw	r17,4(sp)
8110b4e4:	29403fcc 	andi	r5,r5,255
8110b4e8:	29800044 	addi	r6,r5,1
8110b4ec:	04402034 	movhi	r17,128
8110b4f0:	dc000015 	stw	r16,0(sp)
8110b4f4:	8c7fffc4 	addi	r17,r17,-1
8110b4f8:	dfc00215 	stw	ra,8(sp)
8110b4fc:	31803fcc 	andi	r6,r6,255
8110b500:	00800044 	movi	r2,1
8110b504:	8922703a 	and	r17,r17,r4
8110b508:	2020d7fa 	srli	r16,r4,31
8110b50c:	1180110e 	bge	r2,r6,8110b554 <__extendsfdf2+0x7c>
8110b510:	880cd0fa 	srli	r6,r17,3
8110b514:	8822977a 	slli	r17,r17,29
8110b518:	2940e004 	addi	r5,r5,896
8110b51c:	2941ffcc 	andi	r5,r5,2047
8110b520:	2804953a 	slli	r2,r5,20
8110b524:	01400434 	movhi	r5,16
8110b528:	800697fa 	slli	r3,r16,31
8110b52c:	297fffc4 	addi	r5,r5,-1
8110b530:	314a703a 	and	r5,r6,r5
8110b534:	288ab03a 	or	r5,r5,r2
8110b538:	28c6b03a 	or	r3,r5,r3
8110b53c:	8805883a 	mov	r2,r17
8110b540:	dfc00217 	ldw	ra,8(sp)
8110b544:	dc400117 	ldw	r17,4(sp)
8110b548:	dc000017 	ldw	r16,0(sp)
8110b54c:	dec00304 	addi	sp,sp,12
8110b550:	f800283a 	ret
8110b554:	2800111e 	bne	r5,zero,8110b59c <__extendsfdf2+0xc4>
8110b558:	88001c26 	beq	r17,zero,8110b5cc <__extendsfdf2+0xf4>
8110b55c:	8809883a 	mov	r4,r17
8110b560:	110b7900 	call	8110b790 <__clzsi2>
8110b564:	00c00284 	movi	r3,10
8110b568:	18801b16 	blt	r3,r2,8110b5d8 <__extendsfdf2+0x100>
8110b56c:	018002c4 	movi	r6,11
8110b570:	308dc83a 	sub	r6,r6,r2
8110b574:	11000544 	addi	r4,r2,21
8110b578:	8986d83a 	srl	r3,r17,r6
8110b57c:	8922983a 	sll	r17,r17,r4
8110b580:	0180e244 	movi	r6,905
8110b584:	01400434 	movhi	r5,16
8110b588:	3085c83a 	sub	r2,r6,r2
8110b58c:	297fffc4 	addi	r5,r5,-1
8110b590:	194c703a 	and	r6,r3,r5
8110b594:	1141ffcc 	andi	r5,r2,2047
8110b598:	003fe006 	br	8110b51c <__reset+0xfb0eb51c>
8110b59c:	88000826 	beq	r17,zero,8110b5c0 <__extendsfdf2+0xe8>
8110b5a0:	880cd0fa 	srli	r6,r17,3
8110b5a4:	00800434 	movhi	r2,16
8110b5a8:	10bfffc4 	addi	r2,r2,-1
8110b5ac:	31800234 	orhi	r6,r6,8
8110b5b0:	8822977a 	slli	r17,r17,29
8110b5b4:	308c703a 	and	r6,r6,r2
8110b5b8:	0141ffc4 	movi	r5,2047
8110b5bc:	003fd706 	br	8110b51c <__reset+0xfb0eb51c>
8110b5c0:	0141ffc4 	movi	r5,2047
8110b5c4:	000d883a 	mov	r6,zero
8110b5c8:	003fd406 	br	8110b51c <__reset+0xfb0eb51c>
8110b5cc:	000b883a 	mov	r5,zero
8110b5d0:	000d883a 	mov	r6,zero
8110b5d4:	003fd106 	br	8110b51c <__reset+0xfb0eb51c>
8110b5d8:	11bffd44 	addi	r6,r2,-11
8110b5dc:	8986983a 	sll	r3,r17,r6
8110b5e0:	0023883a 	mov	r17,zero
8110b5e4:	003fe606 	br	8110b580 <__reset+0xfb0eb580>

8110b5e8 <__truncdfsf2>:
8110b5e8:	2810d53a 	srli	r8,r5,20
8110b5ec:	01c00434 	movhi	r7,16
8110b5f0:	39ffffc4 	addi	r7,r7,-1
8110b5f4:	29ce703a 	and	r7,r5,r7
8110b5f8:	4201ffcc 	andi	r8,r8,2047
8110b5fc:	380e90fa 	slli	r7,r7,3
8110b600:	200cd77a 	srli	r6,r4,29
8110b604:	42400044 	addi	r9,r8,1
8110b608:	4a41ffcc 	andi	r9,r9,2047
8110b60c:	00c00044 	movi	r3,1
8110b610:	280ad7fa 	srli	r5,r5,31
8110b614:	31ceb03a 	or	r7,r6,r7
8110b618:	200490fa 	slli	r2,r4,3
8110b61c:	1a40230e 	bge	r3,r9,8110b6ac <__truncdfsf2+0xc4>
8110b620:	40ff2004 	addi	r3,r8,-896
8110b624:	01803f84 	movi	r6,254
8110b628:	30c01516 	blt	r6,r3,8110b680 <__truncdfsf2+0x98>
8110b62c:	00c0380e 	bge	zero,r3,8110b710 <__truncdfsf2+0x128>
8110b630:	200c91ba 	slli	r6,r4,6
8110b634:	380e90fa 	slli	r7,r7,3
8110b638:	1004d77a 	srli	r2,r2,29
8110b63c:	300cc03a 	cmpne	r6,r6,zero
8110b640:	31ccb03a 	or	r6,r6,r7
8110b644:	308cb03a 	or	r6,r6,r2
8110b648:	308001cc 	andi	r2,r6,7
8110b64c:	10000426 	beq	r2,zero,8110b660 <__truncdfsf2+0x78>
8110b650:	308003cc 	andi	r2,r6,15
8110b654:	01000104 	movi	r4,4
8110b658:	11000126 	beq	r2,r4,8110b660 <__truncdfsf2+0x78>
8110b65c:	31800104 	addi	r6,r6,4
8110b660:	3081002c 	andhi	r2,r6,1024
8110b664:	10001626 	beq	r2,zero,8110b6c0 <__truncdfsf2+0xd8>
8110b668:	18c00044 	addi	r3,r3,1
8110b66c:	00803fc4 	movi	r2,255
8110b670:	18800326 	beq	r3,r2,8110b680 <__truncdfsf2+0x98>
8110b674:	300c91ba 	slli	r6,r6,6
8110b678:	300cd27a 	srli	r6,r6,9
8110b67c:	00000206 	br	8110b688 <__truncdfsf2+0xa0>
8110b680:	00ffffc4 	movi	r3,-1
8110b684:	000d883a 	mov	r6,zero
8110b688:	18c03fcc 	andi	r3,r3,255
8110b68c:	180895fa 	slli	r4,r3,23
8110b690:	00c02034 	movhi	r3,128
8110b694:	280a97fa 	slli	r5,r5,31
8110b698:	18ffffc4 	addi	r3,r3,-1
8110b69c:	30c6703a 	and	r3,r6,r3
8110b6a0:	1906b03a 	or	r3,r3,r4
8110b6a4:	1944b03a 	or	r2,r3,r5
8110b6a8:	f800283a 	ret
8110b6ac:	40000b1e 	bne	r8,zero,8110b6dc <__truncdfsf2+0xf4>
8110b6b0:	388cb03a 	or	r6,r7,r2
8110b6b4:	0007883a 	mov	r3,zero
8110b6b8:	30000426 	beq	r6,zero,8110b6cc <__truncdfsf2+0xe4>
8110b6bc:	01800144 	movi	r6,5
8110b6c0:	00803fc4 	movi	r2,255
8110b6c4:	300cd0fa 	srli	r6,r6,3
8110b6c8:	18800a26 	beq	r3,r2,8110b6f4 <__truncdfsf2+0x10c>
8110b6cc:	00802034 	movhi	r2,128
8110b6d0:	10bfffc4 	addi	r2,r2,-1
8110b6d4:	308c703a 	and	r6,r6,r2
8110b6d8:	003feb06 	br	8110b688 <__reset+0xfb0eb688>
8110b6dc:	3888b03a 	or	r4,r7,r2
8110b6e0:	203fe726 	beq	r4,zero,8110b680 <__reset+0xfb0eb680>
8110b6e4:	380c90fa 	slli	r6,r7,3
8110b6e8:	00c03fc4 	movi	r3,255
8110b6ec:	31808034 	orhi	r6,r6,512
8110b6f0:	003fd506 	br	8110b648 <__reset+0xfb0eb648>
8110b6f4:	303fe226 	beq	r6,zero,8110b680 <__reset+0xfb0eb680>
8110b6f8:	00802034 	movhi	r2,128
8110b6fc:	31801034 	orhi	r6,r6,64
8110b700:	10bfffc4 	addi	r2,r2,-1
8110b704:	00ffffc4 	movi	r3,-1
8110b708:	308c703a 	and	r6,r6,r2
8110b70c:	003fde06 	br	8110b688 <__reset+0xfb0eb688>
8110b710:	013ffa44 	movi	r4,-23
8110b714:	19000e16 	blt	r3,r4,8110b750 <__truncdfsf2+0x168>
8110b718:	01000784 	movi	r4,30
8110b71c:	20c9c83a 	sub	r4,r4,r3
8110b720:	018007c4 	movi	r6,31
8110b724:	39c02034 	orhi	r7,r7,128
8110b728:	31000b16 	blt	r6,r4,8110b758 <__truncdfsf2+0x170>
8110b72c:	423f2084 	addi	r8,r8,-894
8110b730:	120c983a 	sll	r6,r2,r8
8110b734:	3a0e983a 	sll	r7,r7,r8
8110b738:	1104d83a 	srl	r2,r2,r4
8110b73c:	300cc03a 	cmpne	r6,r6,zero
8110b740:	31ceb03a 	or	r7,r6,r7
8110b744:	388cb03a 	or	r6,r7,r2
8110b748:	0007883a 	mov	r3,zero
8110b74c:	003fbe06 	br	8110b648 <__reset+0xfb0eb648>
8110b750:	0007883a 	mov	r3,zero
8110b754:	003fd906 	br	8110b6bc <__reset+0xfb0eb6bc>
8110b758:	01bfff84 	movi	r6,-2
8110b75c:	30cdc83a 	sub	r6,r6,r3
8110b760:	00c00804 	movi	r3,32
8110b764:	398cd83a 	srl	r6,r7,r6
8110b768:	20c00726 	beq	r4,r3,8110b788 <__truncdfsf2+0x1a0>
8110b76c:	423f2884 	addi	r8,r8,-862
8110b770:	3a0e983a 	sll	r7,r7,r8
8110b774:	3884b03a 	or	r2,r7,r2
8110b778:	1004c03a 	cmpne	r2,r2,zero
8110b77c:	118cb03a 	or	r6,r2,r6
8110b780:	0007883a 	mov	r3,zero
8110b784:	003fb006 	br	8110b648 <__reset+0xfb0eb648>
8110b788:	000f883a 	mov	r7,zero
8110b78c:	003ff906 	br	8110b774 <__reset+0xfb0eb774>

8110b790 <__clzsi2>:
8110b790:	00bfffd4 	movui	r2,65535
8110b794:	11000536 	bltu	r2,r4,8110b7ac <__clzsi2+0x1c>
8110b798:	00803fc4 	movi	r2,255
8110b79c:	11000f36 	bltu	r2,r4,8110b7dc <__clzsi2+0x4c>
8110b7a0:	00800804 	movi	r2,32
8110b7a4:	0007883a 	mov	r3,zero
8110b7a8:	00000506 	br	8110b7c0 <__clzsi2+0x30>
8110b7ac:	00804034 	movhi	r2,256
8110b7b0:	10bfffc4 	addi	r2,r2,-1
8110b7b4:	11000c2e 	bgeu	r2,r4,8110b7e8 <__clzsi2+0x58>
8110b7b8:	00800204 	movi	r2,8
8110b7bc:	00c00604 	movi	r3,24
8110b7c0:	20c8d83a 	srl	r4,r4,r3
8110b7c4:	00e044b4 	movhi	r3,33042
8110b7c8:	18f915c4 	addi	r3,r3,-7081
8110b7cc:	1909883a 	add	r4,r3,r4
8110b7d0:	20c00003 	ldbu	r3,0(r4)
8110b7d4:	10c5c83a 	sub	r2,r2,r3
8110b7d8:	f800283a 	ret
8110b7dc:	00800604 	movi	r2,24
8110b7e0:	00c00204 	movi	r3,8
8110b7e4:	003ff606 	br	8110b7c0 <__reset+0xfb0eb7c0>
8110b7e8:	00800404 	movi	r2,16
8110b7ec:	1007883a 	mov	r3,r2
8110b7f0:	003ff306 	br	8110b7c0 <__reset+0xfb0eb7c0>

8110b7f4 <_getc_r>:
8110b7f4:	defffd04 	addi	sp,sp,-12
8110b7f8:	dc000115 	stw	r16,4(sp)
8110b7fc:	dfc00215 	stw	ra,8(sp)
8110b800:	2021883a 	mov	r16,r4
8110b804:	20000226 	beq	r4,zero,8110b810 <_getc_r+0x1c>
8110b808:	20800e17 	ldw	r2,56(r4)
8110b80c:	10000c26 	beq	r2,zero,8110b840 <_getc_r+0x4c>
8110b810:	28800117 	ldw	r2,4(r5)
8110b814:	10bfffc4 	addi	r2,r2,-1
8110b818:	28800115 	stw	r2,4(r5)
8110b81c:	10000c16 	blt	r2,zero,8110b850 <_getc_r+0x5c>
8110b820:	28800017 	ldw	r2,0(r5)
8110b824:	10c00044 	addi	r3,r2,1
8110b828:	28c00015 	stw	r3,0(r5)
8110b82c:	10800003 	ldbu	r2,0(r2)
8110b830:	dfc00217 	ldw	ra,8(sp)
8110b834:	dc000117 	ldw	r16,4(sp)
8110b838:	dec00304 	addi	sp,sp,12
8110b83c:	f800283a 	ret
8110b840:	d9400015 	stw	r5,0(sp)
8110b844:	110ff580 	call	8110ff58 <__sinit>
8110b848:	d9400017 	ldw	r5,0(sp)
8110b84c:	003ff006 	br	8110b810 <__reset+0xfb0eb810>
8110b850:	8009883a 	mov	r4,r16
8110b854:	dfc00217 	ldw	ra,8(sp)
8110b858:	dc000117 	ldw	r16,4(sp)
8110b85c:	dec00304 	addi	sp,sp,12
8110b860:	110bb941 	jmpi	8110bb94 <__srget_r>

8110b864 <getc>:
8110b864:	00a044b4 	movhi	r2,33042
8110b868:	defffd04 	addi	sp,sp,-12
8110b86c:	10819104 	addi	r2,r2,1604
8110b870:	dc400115 	stw	r17,4(sp)
8110b874:	14400017 	ldw	r17,0(r2)
8110b878:	dc000015 	stw	r16,0(sp)
8110b87c:	dfc00215 	stw	ra,8(sp)
8110b880:	2021883a 	mov	r16,r4
8110b884:	88000226 	beq	r17,zero,8110b890 <getc+0x2c>
8110b888:	88800e17 	ldw	r2,56(r17)
8110b88c:	10000d26 	beq	r2,zero,8110b8c4 <getc+0x60>
8110b890:	80800117 	ldw	r2,4(r16)
8110b894:	10bfffc4 	addi	r2,r2,-1
8110b898:	80800115 	stw	r2,4(r16)
8110b89c:	10000c16 	blt	r2,zero,8110b8d0 <getc+0x6c>
8110b8a0:	80800017 	ldw	r2,0(r16)
8110b8a4:	10c00044 	addi	r3,r2,1
8110b8a8:	80c00015 	stw	r3,0(r16)
8110b8ac:	10800003 	ldbu	r2,0(r2)
8110b8b0:	dfc00217 	ldw	ra,8(sp)
8110b8b4:	dc400117 	ldw	r17,4(sp)
8110b8b8:	dc000017 	ldw	r16,0(sp)
8110b8bc:	dec00304 	addi	sp,sp,12
8110b8c0:	f800283a 	ret
8110b8c4:	8809883a 	mov	r4,r17
8110b8c8:	110ff580 	call	8110ff58 <__sinit>
8110b8cc:	003ff006 	br	8110b890 <__reset+0xfb0eb890>
8110b8d0:	800b883a 	mov	r5,r16
8110b8d4:	8809883a 	mov	r4,r17
8110b8d8:	dfc00217 	ldw	ra,8(sp)
8110b8dc:	dc400117 	ldw	r17,4(sp)
8110b8e0:	dc000017 	ldw	r16,0(sp)
8110b8e4:	dec00304 	addi	sp,sp,12
8110b8e8:	110bb941 	jmpi	8110bb94 <__srget_r>

8110b8ec <memcpy>:
8110b8ec:	defffd04 	addi	sp,sp,-12
8110b8f0:	dfc00215 	stw	ra,8(sp)
8110b8f4:	dc400115 	stw	r17,4(sp)
8110b8f8:	dc000015 	stw	r16,0(sp)
8110b8fc:	00c003c4 	movi	r3,15
8110b900:	2005883a 	mov	r2,r4
8110b904:	1980452e 	bgeu	r3,r6,8110ba1c <memcpy+0x130>
8110b908:	2906b03a 	or	r3,r5,r4
8110b90c:	18c000cc 	andi	r3,r3,3
8110b910:	1800441e 	bne	r3,zero,8110ba24 <memcpy+0x138>
8110b914:	347ffc04 	addi	r17,r6,-16
8110b918:	8822d13a 	srli	r17,r17,4
8110b91c:	28c00104 	addi	r3,r5,4
8110b920:	23400104 	addi	r13,r4,4
8110b924:	8820913a 	slli	r16,r17,4
8110b928:	2b000204 	addi	r12,r5,8
8110b92c:	22c00204 	addi	r11,r4,8
8110b930:	84000504 	addi	r16,r16,20
8110b934:	2a800304 	addi	r10,r5,12
8110b938:	22400304 	addi	r9,r4,12
8110b93c:	2c21883a 	add	r16,r5,r16
8110b940:	2811883a 	mov	r8,r5
8110b944:	200f883a 	mov	r7,r4
8110b948:	41000017 	ldw	r4,0(r8)
8110b94c:	1fc00017 	ldw	ra,0(r3)
8110b950:	63c00017 	ldw	r15,0(r12)
8110b954:	39000015 	stw	r4,0(r7)
8110b958:	53800017 	ldw	r14,0(r10)
8110b95c:	6fc00015 	stw	ra,0(r13)
8110b960:	5bc00015 	stw	r15,0(r11)
8110b964:	4b800015 	stw	r14,0(r9)
8110b968:	18c00404 	addi	r3,r3,16
8110b96c:	39c00404 	addi	r7,r7,16
8110b970:	42000404 	addi	r8,r8,16
8110b974:	6b400404 	addi	r13,r13,16
8110b978:	63000404 	addi	r12,r12,16
8110b97c:	5ac00404 	addi	r11,r11,16
8110b980:	52800404 	addi	r10,r10,16
8110b984:	4a400404 	addi	r9,r9,16
8110b988:	1c3fef1e 	bne	r3,r16,8110b948 <__reset+0xfb0eb948>
8110b98c:	89c00044 	addi	r7,r17,1
8110b990:	380e913a 	slli	r7,r7,4
8110b994:	310003cc 	andi	r4,r6,15
8110b998:	02c000c4 	movi	r11,3
8110b99c:	11c7883a 	add	r3,r2,r7
8110b9a0:	29cb883a 	add	r5,r5,r7
8110b9a4:	5900212e 	bgeu	r11,r4,8110ba2c <memcpy+0x140>
8110b9a8:	1813883a 	mov	r9,r3
8110b9ac:	2811883a 	mov	r8,r5
8110b9b0:	200f883a 	mov	r7,r4
8110b9b4:	42800017 	ldw	r10,0(r8)
8110b9b8:	4a400104 	addi	r9,r9,4
8110b9bc:	39ffff04 	addi	r7,r7,-4
8110b9c0:	4abfff15 	stw	r10,-4(r9)
8110b9c4:	42000104 	addi	r8,r8,4
8110b9c8:	59fffa36 	bltu	r11,r7,8110b9b4 <__reset+0xfb0eb9b4>
8110b9cc:	213fff04 	addi	r4,r4,-4
8110b9d0:	2008d0ba 	srli	r4,r4,2
8110b9d4:	318000cc 	andi	r6,r6,3
8110b9d8:	21000044 	addi	r4,r4,1
8110b9dc:	2109883a 	add	r4,r4,r4
8110b9e0:	2109883a 	add	r4,r4,r4
8110b9e4:	1907883a 	add	r3,r3,r4
8110b9e8:	290b883a 	add	r5,r5,r4
8110b9ec:	30000626 	beq	r6,zero,8110ba08 <memcpy+0x11c>
8110b9f0:	198d883a 	add	r6,r3,r6
8110b9f4:	29c00003 	ldbu	r7,0(r5)
8110b9f8:	18c00044 	addi	r3,r3,1
8110b9fc:	29400044 	addi	r5,r5,1
8110ba00:	19ffffc5 	stb	r7,-1(r3)
8110ba04:	19bffb1e 	bne	r3,r6,8110b9f4 <__reset+0xfb0eb9f4>
8110ba08:	dfc00217 	ldw	ra,8(sp)
8110ba0c:	dc400117 	ldw	r17,4(sp)
8110ba10:	dc000017 	ldw	r16,0(sp)
8110ba14:	dec00304 	addi	sp,sp,12
8110ba18:	f800283a 	ret
8110ba1c:	2007883a 	mov	r3,r4
8110ba20:	003ff206 	br	8110b9ec <__reset+0xfb0eb9ec>
8110ba24:	2007883a 	mov	r3,r4
8110ba28:	003ff106 	br	8110b9f0 <__reset+0xfb0eb9f0>
8110ba2c:	200d883a 	mov	r6,r4
8110ba30:	003fee06 	br	8110b9ec <__reset+0xfb0eb9ec>

8110ba34 <_printf_r>:
8110ba34:	defffd04 	addi	sp,sp,-12
8110ba38:	2805883a 	mov	r2,r5
8110ba3c:	dfc00015 	stw	ra,0(sp)
8110ba40:	d9800115 	stw	r6,4(sp)
8110ba44:	d9c00215 	stw	r7,8(sp)
8110ba48:	21400217 	ldw	r5,8(r4)
8110ba4c:	d9c00104 	addi	r7,sp,4
8110ba50:	100d883a 	mov	r6,r2
8110ba54:	110bcb40 	call	8110bcb4 <___vfprintf_internal_r>
8110ba58:	dfc00017 	ldw	ra,0(sp)
8110ba5c:	dec00304 	addi	sp,sp,12
8110ba60:	f800283a 	ret

8110ba64 <printf>:
8110ba64:	defffc04 	addi	sp,sp,-16
8110ba68:	dfc00015 	stw	ra,0(sp)
8110ba6c:	d9400115 	stw	r5,4(sp)
8110ba70:	d9800215 	stw	r6,8(sp)
8110ba74:	d9c00315 	stw	r7,12(sp)
8110ba78:	00a044b4 	movhi	r2,33042
8110ba7c:	10819104 	addi	r2,r2,1604
8110ba80:	10800017 	ldw	r2,0(r2)
8110ba84:	200b883a 	mov	r5,r4
8110ba88:	d9800104 	addi	r6,sp,4
8110ba8c:	11000217 	ldw	r4,8(r2)
8110ba90:	110deac0 	call	8110deac <__vfprintf_internal>
8110ba94:	dfc00017 	ldw	ra,0(sp)
8110ba98:	dec00404 	addi	sp,sp,16
8110ba9c:	f800283a 	ret

8110baa0 <_putchar_r>:
8110baa0:	21800217 	ldw	r6,8(r4)
8110baa4:	11128281 	jmpi	81112828 <_putc_r>

8110baa8 <putchar>:
8110baa8:	00a044b4 	movhi	r2,33042
8110baac:	10819104 	addi	r2,r2,1604
8110bab0:	200b883a 	mov	r5,r4
8110bab4:	11000017 	ldw	r4,0(r2)
8110bab8:	21800217 	ldw	r6,8(r4)
8110babc:	11128281 	jmpi	81112828 <_putc_r>

8110bac0 <_puts_r>:
8110bac0:	defff604 	addi	sp,sp,-40
8110bac4:	dc000715 	stw	r16,28(sp)
8110bac8:	2021883a 	mov	r16,r4
8110bacc:	2809883a 	mov	r4,r5
8110bad0:	dc400815 	stw	r17,32(sp)
8110bad4:	dfc00915 	stw	ra,36(sp)
8110bad8:	2823883a 	mov	r17,r5
8110badc:	110bc1c0 	call	8110bc1c <strlen>
8110bae0:	10c00044 	addi	r3,r2,1
8110bae4:	d8800115 	stw	r2,4(sp)
8110bae8:	00a044b4 	movhi	r2,33042
8110baec:	10b95704 	addi	r2,r2,-6820
8110baf0:	d8800215 	stw	r2,8(sp)
8110baf4:	00800044 	movi	r2,1
8110baf8:	d8800315 	stw	r2,12(sp)
8110bafc:	00800084 	movi	r2,2
8110bb00:	dc400015 	stw	r17,0(sp)
8110bb04:	d8c00615 	stw	r3,24(sp)
8110bb08:	dec00415 	stw	sp,16(sp)
8110bb0c:	d8800515 	stw	r2,20(sp)
8110bb10:	80000226 	beq	r16,zero,8110bb1c <_puts_r+0x5c>
8110bb14:	80800e17 	ldw	r2,56(r16)
8110bb18:	10001426 	beq	r2,zero,8110bb6c <_puts_r+0xac>
8110bb1c:	81400217 	ldw	r5,8(r16)
8110bb20:	2880030b 	ldhu	r2,12(r5)
8110bb24:	10c8000c 	andi	r3,r2,8192
8110bb28:	1800061e 	bne	r3,zero,8110bb44 <_puts_r+0x84>
8110bb2c:	29001917 	ldw	r4,100(r5)
8110bb30:	00f7ffc4 	movi	r3,-8193
8110bb34:	10880014 	ori	r2,r2,8192
8110bb38:	20c6703a 	and	r3,r4,r3
8110bb3c:	2880030d 	sth	r2,12(r5)
8110bb40:	28c01915 	stw	r3,100(r5)
8110bb44:	d9800404 	addi	r6,sp,16
8110bb48:	8009883a 	mov	r4,r16
8110bb4c:	11103dc0 	call	811103dc <__sfvwrite_r>
8110bb50:	1000091e 	bne	r2,zero,8110bb78 <_puts_r+0xb8>
8110bb54:	00800284 	movi	r2,10
8110bb58:	dfc00917 	ldw	ra,36(sp)
8110bb5c:	dc400817 	ldw	r17,32(sp)
8110bb60:	dc000717 	ldw	r16,28(sp)
8110bb64:	dec00a04 	addi	sp,sp,40
8110bb68:	f800283a 	ret
8110bb6c:	8009883a 	mov	r4,r16
8110bb70:	110ff580 	call	8110ff58 <__sinit>
8110bb74:	003fe906 	br	8110bb1c <__reset+0xfb0ebb1c>
8110bb78:	00bfffc4 	movi	r2,-1
8110bb7c:	003ff606 	br	8110bb58 <__reset+0xfb0ebb58>

8110bb80 <puts>:
8110bb80:	00a044b4 	movhi	r2,33042
8110bb84:	10819104 	addi	r2,r2,1604
8110bb88:	200b883a 	mov	r5,r4
8110bb8c:	11000017 	ldw	r4,0(r2)
8110bb90:	110bac01 	jmpi	8110bac0 <_puts_r>

8110bb94 <__srget_r>:
8110bb94:	defffd04 	addi	sp,sp,-12
8110bb98:	dc400115 	stw	r17,4(sp)
8110bb9c:	dc000015 	stw	r16,0(sp)
8110bba0:	dfc00215 	stw	ra,8(sp)
8110bba4:	2023883a 	mov	r17,r4
8110bba8:	2821883a 	mov	r16,r5
8110bbac:	20000226 	beq	r4,zero,8110bbb8 <__srget_r+0x24>
8110bbb0:	20800e17 	ldw	r2,56(r4)
8110bbb4:	10001026 	beq	r2,zero,8110bbf8 <__srget_r+0x64>
8110bbb8:	800b883a 	mov	r5,r16
8110bbbc:	8809883a 	mov	r4,r17
8110bbc0:	1112f100 	call	81112f10 <__srefill_r>
8110bbc4:	10000e1e 	bne	r2,zero,8110bc00 <__srget_r+0x6c>
8110bbc8:	80c00017 	ldw	r3,0(r16)
8110bbcc:	80800117 	ldw	r2,4(r16)
8110bbd0:	19000044 	addi	r4,r3,1
8110bbd4:	10bfffc4 	addi	r2,r2,-1
8110bbd8:	80800115 	stw	r2,4(r16)
8110bbdc:	81000015 	stw	r4,0(r16)
8110bbe0:	18800003 	ldbu	r2,0(r3)
8110bbe4:	dfc00217 	ldw	ra,8(sp)
8110bbe8:	dc400117 	ldw	r17,4(sp)
8110bbec:	dc000017 	ldw	r16,0(sp)
8110bbf0:	dec00304 	addi	sp,sp,12
8110bbf4:	f800283a 	ret
8110bbf8:	110ff580 	call	8110ff58 <__sinit>
8110bbfc:	003fee06 	br	8110bbb8 <__reset+0xfb0ebbb8>
8110bc00:	00bfffc4 	movi	r2,-1
8110bc04:	003ff706 	br	8110bbe4 <__reset+0xfb0ebbe4>

8110bc08 <__srget>:
8110bc08:	00a044b4 	movhi	r2,33042
8110bc0c:	10819104 	addi	r2,r2,1604
8110bc10:	200b883a 	mov	r5,r4
8110bc14:	11000017 	ldw	r4,0(r2)
8110bc18:	110bb941 	jmpi	8110bb94 <__srget_r>

8110bc1c <strlen>:
8110bc1c:	208000cc 	andi	r2,r4,3
8110bc20:	10002026 	beq	r2,zero,8110bca4 <strlen+0x88>
8110bc24:	20800007 	ldb	r2,0(r4)
8110bc28:	10002026 	beq	r2,zero,8110bcac <strlen+0x90>
8110bc2c:	2005883a 	mov	r2,r4
8110bc30:	00000206 	br	8110bc3c <strlen+0x20>
8110bc34:	10c00007 	ldb	r3,0(r2)
8110bc38:	18001826 	beq	r3,zero,8110bc9c <strlen+0x80>
8110bc3c:	10800044 	addi	r2,r2,1
8110bc40:	10c000cc 	andi	r3,r2,3
8110bc44:	183ffb1e 	bne	r3,zero,8110bc34 <__reset+0xfb0ebc34>
8110bc48:	10c00017 	ldw	r3,0(r2)
8110bc4c:	01ffbff4 	movhi	r7,65279
8110bc50:	39ffbfc4 	addi	r7,r7,-257
8110bc54:	00ca303a 	nor	r5,zero,r3
8110bc58:	01a02074 	movhi	r6,32897
8110bc5c:	19c7883a 	add	r3,r3,r7
8110bc60:	31a02004 	addi	r6,r6,-32640
8110bc64:	1946703a 	and	r3,r3,r5
8110bc68:	1986703a 	and	r3,r3,r6
8110bc6c:	1800091e 	bne	r3,zero,8110bc94 <strlen+0x78>
8110bc70:	10800104 	addi	r2,r2,4
8110bc74:	10c00017 	ldw	r3,0(r2)
8110bc78:	19cb883a 	add	r5,r3,r7
8110bc7c:	00c6303a 	nor	r3,zero,r3
8110bc80:	28c6703a 	and	r3,r5,r3
8110bc84:	1986703a 	and	r3,r3,r6
8110bc88:	183ff926 	beq	r3,zero,8110bc70 <__reset+0xfb0ebc70>
8110bc8c:	00000106 	br	8110bc94 <strlen+0x78>
8110bc90:	10800044 	addi	r2,r2,1
8110bc94:	10c00007 	ldb	r3,0(r2)
8110bc98:	183ffd1e 	bne	r3,zero,8110bc90 <__reset+0xfb0ebc90>
8110bc9c:	1105c83a 	sub	r2,r2,r4
8110bca0:	f800283a 	ret
8110bca4:	2005883a 	mov	r2,r4
8110bca8:	003fe706 	br	8110bc48 <__reset+0xfb0ebc48>
8110bcac:	0005883a 	mov	r2,zero
8110bcb0:	f800283a 	ret

8110bcb4 <___vfprintf_internal_r>:
8110bcb4:	deffb804 	addi	sp,sp,-288
8110bcb8:	dfc04715 	stw	ra,284(sp)
8110bcbc:	ddc04515 	stw	r23,276(sp)
8110bcc0:	dd404315 	stw	r21,268(sp)
8110bcc4:	d9002c15 	stw	r4,176(sp)
8110bcc8:	282f883a 	mov	r23,r5
8110bccc:	302b883a 	mov	r21,r6
8110bcd0:	d9c02d15 	stw	r7,180(sp)
8110bcd4:	df004615 	stw	fp,280(sp)
8110bcd8:	dd804415 	stw	r22,272(sp)
8110bcdc:	dd004215 	stw	r20,264(sp)
8110bce0:	dcc04115 	stw	r19,260(sp)
8110bce4:	dc804015 	stw	r18,256(sp)
8110bce8:	dc403f15 	stw	r17,252(sp)
8110bcec:	dc003e15 	stw	r16,248(sp)
8110bcf0:	1110acc0 	call	81110acc <_localeconv_r>
8110bcf4:	10800017 	ldw	r2,0(r2)
8110bcf8:	1009883a 	mov	r4,r2
8110bcfc:	d8803415 	stw	r2,208(sp)
8110bd00:	110bc1c0 	call	8110bc1c <strlen>
8110bd04:	d8803715 	stw	r2,220(sp)
8110bd08:	d8802c17 	ldw	r2,176(sp)
8110bd0c:	10000226 	beq	r2,zero,8110bd18 <___vfprintf_internal_r+0x64>
8110bd10:	10800e17 	ldw	r2,56(r2)
8110bd14:	1000f926 	beq	r2,zero,8110c0fc <___vfprintf_internal_r+0x448>
8110bd18:	b880030b 	ldhu	r2,12(r23)
8110bd1c:	10c8000c 	andi	r3,r2,8192
8110bd20:	1800061e 	bne	r3,zero,8110bd3c <___vfprintf_internal_r+0x88>
8110bd24:	b9001917 	ldw	r4,100(r23)
8110bd28:	00f7ffc4 	movi	r3,-8193
8110bd2c:	10880014 	ori	r2,r2,8192
8110bd30:	20c6703a 	and	r3,r4,r3
8110bd34:	b880030d 	sth	r2,12(r23)
8110bd38:	b8c01915 	stw	r3,100(r23)
8110bd3c:	10c0020c 	andi	r3,r2,8
8110bd40:	1800c126 	beq	r3,zero,8110c048 <___vfprintf_internal_r+0x394>
8110bd44:	b8c00417 	ldw	r3,16(r23)
8110bd48:	1800bf26 	beq	r3,zero,8110c048 <___vfprintf_internal_r+0x394>
8110bd4c:	1080068c 	andi	r2,r2,26
8110bd50:	00c00284 	movi	r3,10
8110bd54:	10c0c426 	beq	r2,r3,8110c068 <___vfprintf_internal_r+0x3b4>
8110bd58:	d8c00404 	addi	r3,sp,16
8110bd5c:	052044b4 	movhi	r20,33042
8110bd60:	d9001e04 	addi	r4,sp,120
8110bd64:	a5396884 	addi	r20,r20,-6750
8110bd68:	d8c01e15 	stw	r3,120(sp)
8110bd6c:	d8002015 	stw	zero,128(sp)
8110bd70:	d8001f15 	stw	zero,124(sp)
8110bd74:	d8003315 	stw	zero,204(sp)
8110bd78:	d8003615 	stw	zero,216(sp)
8110bd7c:	d8003815 	stw	zero,224(sp)
8110bd80:	1811883a 	mov	r8,r3
8110bd84:	d8003915 	stw	zero,228(sp)
8110bd88:	d8003a15 	stw	zero,232(sp)
8110bd8c:	d8002f15 	stw	zero,188(sp)
8110bd90:	d9002815 	stw	r4,160(sp)
8110bd94:	a8800007 	ldb	r2,0(r21)
8110bd98:	10027b26 	beq	r2,zero,8110c788 <___vfprintf_internal_r+0xad4>
8110bd9c:	00c00944 	movi	r3,37
8110bda0:	a821883a 	mov	r16,r21
8110bda4:	10c0021e 	bne	r2,r3,8110bdb0 <___vfprintf_internal_r+0xfc>
8110bda8:	00001406 	br	8110bdfc <___vfprintf_internal_r+0x148>
8110bdac:	10c00326 	beq	r2,r3,8110bdbc <___vfprintf_internal_r+0x108>
8110bdb0:	84000044 	addi	r16,r16,1
8110bdb4:	80800007 	ldb	r2,0(r16)
8110bdb8:	103ffc1e 	bne	r2,zero,8110bdac <__reset+0xfb0ebdac>
8110bdbc:	8563c83a 	sub	r17,r16,r21
8110bdc0:	88000e26 	beq	r17,zero,8110bdfc <___vfprintf_internal_r+0x148>
8110bdc4:	d8c02017 	ldw	r3,128(sp)
8110bdc8:	d8801f17 	ldw	r2,124(sp)
8110bdcc:	45400015 	stw	r21,0(r8)
8110bdd0:	1c47883a 	add	r3,r3,r17
8110bdd4:	10800044 	addi	r2,r2,1
8110bdd8:	d8c02015 	stw	r3,128(sp)
8110bddc:	44400115 	stw	r17,4(r8)
8110bde0:	d8801f15 	stw	r2,124(sp)
8110bde4:	00c001c4 	movi	r3,7
8110bde8:	1880a716 	blt	r3,r2,8110c088 <___vfprintf_internal_r+0x3d4>
8110bdec:	42000204 	addi	r8,r8,8
8110bdf0:	d9402f17 	ldw	r5,188(sp)
8110bdf4:	2c4b883a 	add	r5,r5,r17
8110bdf8:	d9402f15 	stw	r5,188(sp)
8110bdfc:	80800007 	ldb	r2,0(r16)
8110be00:	1000a826 	beq	r2,zero,8110c0a4 <___vfprintf_internal_r+0x3f0>
8110be04:	84400047 	ldb	r17,1(r16)
8110be08:	00bfffc4 	movi	r2,-1
8110be0c:	85400044 	addi	r21,r16,1
8110be10:	d8002785 	stb	zero,158(sp)
8110be14:	0007883a 	mov	r3,zero
8110be18:	000f883a 	mov	r7,zero
8110be1c:	d8802915 	stw	r2,164(sp)
8110be20:	d8003115 	stw	zero,196(sp)
8110be24:	0025883a 	mov	r18,zero
8110be28:	01401604 	movi	r5,88
8110be2c:	01800244 	movi	r6,9
8110be30:	02800a84 	movi	r10,42
8110be34:	02401b04 	movi	r9,108
8110be38:	ad400044 	addi	r21,r21,1
8110be3c:	88bff804 	addi	r2,r17,-32
8110be40:	28830436 	bltu	r5,r2,8110ca54 <___vfprintf_internal_r+0xda0>
8110be44:	100490ba 	slli	r2,r2,2
8110be48:	01204474 	movhi	r4,33041
8110be4c:	212f9704 	addi	r4,r4,-16804
8110be50:	1105883a 	add	r2,r2,r4
8110be54:	10800017 	ldw	r2,0(r2)
8110be58:	1000683a 	jmp	r2
8110be5c:	8110c974 	orhi	r4,r16,17189
8110be60:	8110ca54 	ori	r4,r16,17193
8110be64:	8110ca54 	ori	r4,r16,17193
8110be68:	8110c994 	ori	r4,r16,17190
8110be6c:	8110ca54 	ori	r4,r16,17193
8110be70:	8110ca54 	ori	r4,r16,17193
8110be74:	8110ca54 	ori	r4,r16,17193
8110be78:	8110ca54 	ori	r4,r16,17193
8110be7c:	8110ca54 	ori	r4,r16,17193
8110be80:	8110ca54 	ori	r4,r16,17193
8110be84:	8110c108 	cmpgei	r4,r16,17156
8110be88:	8110c8b0 	cmpltui	r4,r16,17186
8110be8c:	8110ca54 	ori	r4,r16,17193
8110be90:	8110bfd0 	cmplti	r4,r16,17151
8110be94:	8110c130 	cmpltui	r4,r16,17156
8110be98:	8110ca54 	ori	r4,r16,17193
8110be9c:	8110c170 	cmpltui	r4,r16,17157
8110bea0:	8110c17c 	xorhi	r4,r16,17157
8110bea4:	8110c17c 	xorhi	r4,r16,17157
8110bea8:	8110c17c 	xorhi	r4,r16,17157
8110beac:	8110c17c 	xorhi	r4,r16,17157
8110beb0:	8110c17c 	xorhi	r4,r16,17157
8110beb4:	8110c17c 	xorhi	r4,r16,17157
8110beb8:	8110c17c 	xorhi	r4,r16,17157
8110bebc:	8110c17c 	xorhi	r4,r16,17157
8110bec0:	8110c17c 	xorhi	r4,r16,17157
8110bec4:	8110ca54 	ori	r4,r16,17193
8110bec8:	8110ca54 	ori	r4,r16,17193
8110becc:	8110ca54 	ori	r4,r16,17193
8110bed0:	8110ca54 	ori	r4,r16,17193
8110bed4:	8110ca54 	ori	r4,r16,17193
8110bed8:	8110ca54 	ori	r4,r16,17193
8110bedc:	8110ca54 	ori	r4,r16,17193
8110bee0:	8110ca54 	ori	r4,r16,17193
8110bee4:	8110ca54 	ori	r4,r16,17193
8110bee8:	8110ca54 	ori	r4,r16,17193
8110beec:	8110c1b0 	cmpltui	r4,r16,17158
8110bef0:	8110c26c 	andhi	r4,r16,17161
8110bef4:	8110ca54 	ori	r4,r16,17193
8110bef8:	8110c26c 	andhi	r4,r16,17161
8110befc:	8110ca54 	ori	r4,r16,17193
8110bf00:	8110ca54 	ori	r4,r16,17193
8110bf04:	8110ca54 	ori	r4,r16,17193
8110bf08:	8110ca54 	ori	r4,r16,17193
8110bf0c:	8110c30c 	andi	r4,r16,17164
8110bf10:	8110ca54 	ori	r4,r16,17193
8110bf14:	8110ca54 	ori	r4,r16,17193
8110bf18:	8110c318 	cmpnei	r4,r16,17164
8110bf1c:	8110ca54 	ori	r4,r16,17193
8110bf20:	8110ca54 	ori	r4,r16,17193
8110bf24:	8110ca54 	ori	r4,r16,17193
8110bf28:	8110ca54 	ori	r4,r16,17193
8110bf2c:	8110ca54 	ori	r4,r16,17193
8110bf30:	8110c790 	cmplti	r4,r16,17182
8110bf34:	8110ca54 	ori	r4,r16,17193
8110bf38:	8110ca54 	ori	r4,r16,17193
8110bf3c:	8110c7f0 	cmpltui	r4,r16,17183
8110bf40:	8110ca54 	ori	r4,r16,17193
8110bf44:	8110ca54 	ori	r4,r16,17193
8110bf48:	8110ca54 	ori	r4,r16,17193
8110bf4c:	8110ca54 	ori	r4,r16,17193
8110bf50:	8110ca54 	ori	r4,r16,17193
8110bf54:	8110ca54 	ori	r4,r16,17193
8110bf58:	8110ca54 	ori	r4,r16,17193
8110bf5c:	8110ca54 	ori	r4,r16,17193
8110bf60:	8110ca54 	ori	r4,r16,17193
8110bf64:	8110ca54 	ori	r4,r16,17193
8110bf68:	8110ca00 	call	88110ca0 <__reset+0x20f0ca0>
8110bf6c:	8110c9a0 	cmpeqi	r4,r16,17190
8110bf70:	8110c26c 	andhi	r4,r16,17161
8110bf74:	8110c26c 	andhi	r4,r16,17161
8110bf78:	8110c26c 	andhi	r4,r16,17161
8110bf7c:	8110c9b0 	cmpltui	r4,r16,17190
8110bf80:	8110c9a0 	cmpeqi	r4,r16,17190
8110bf84:	8110ca54 	ori	r4,r16,17193
8110bf88:	8110ca54 	ori	r4,r16,17193
8110bf8c:	8110c9bc 	xorhi	r4,r16,17190
8110bf90:	8110ca54 	ori	r4,r16,17193
8110bf94:	8110c9cc 	andi	r4,r16,17191
8110bf98:	8110c8a0 	cmpeqi	r4,r16,17186
8110bf9c:	8110bfdc 	xori	r4,r16,17151
8110bfa0:	8110c8c0 	call	88110c8c <__reset+0x20f0c8c>
8110bfa4:	8110ca54 	ori	r4,r16,17193
8110bfa8:	8110c8cc 	andi	r4,r16,17187
8110bfac:	8110ca54 	ori	r4,r16,17193
8110bfb0:	8110c928 	cmpgeui	r4,r16,17188
8110bfb4:	8110ca54 	ori	r4,r16,17193
8110bfb8:	8110ca54 	ori	r4,r16,17193
8110bfbc:	8110c938 	rdprs	r4,r16,17188
8110bfc0:	d9003117 	ldw	r4,196(sp)
8110bfc4:	d8802d15 	stw	r2,180(sp)
8110bfc8:	0109c83a 	sub	r4,zero,r4
8110bfcc:	d9003115 	stw	r4,196(sp)
8110bfd0:	94800114 	ori	r18,r18,4
8110bfd4:	ac400007 	ldb	r17,0(r21)
8110bfd8:	003f9706 	br	8110be38 <__reset+0xfb0ebe38>
8110bfdc:	00800c04 	movi	r2,48
8110bfe0:	d9002d17 	ldw	r4,180(sp)
8110bfe4:	d9402917 	ldw	r5,164(sp)
8110bfe8:	d8802705 	stb	r2,156(sp)
8110bfec:	00801e04 	movi	r2,120
8110bff0:	d8802745 	stb	r2,157(sp)
8110bff4:	d8002785 	stb	zero,158(sp)
8110bff8:	20c00104 	addi	r3,r4,4
8110bffc:	24c00017 	ldw	r19,0(r4)
8110c000:	002d883a 	mov	r22,zero
8110c004:	90800094 	ori	r2,r18,2
8110c008:	28029a16 	blt	r5,zero,8110ca74 <___vfprintf_internal_r+0xdc0>
8110c00c:	00bfdfc4 	movi	r2,-129
8110c010:	90a4703a 	and	r18,r18,r2
8110c014:	d8c02d15 	stw	r3,180(sp)
8110c018:	94800094 	ori	r18,r18,2
8110c01c:	9802871e 	bne	r19,zero,8110ca3c <___vfprintf_internal_r+0xd88>
8110c020:	00a044b4 	movhi	r2,33042
8110c024:	10b96104 	addi	r2,r2,-6780
8110c028:	d8803915 	stw	r2,228(sp)
8110c02c:	04401e04 	movi	r17,120
8110c030:	d8802917 	ldw	r2,164(sp)
8110c034:	0039883a 	mov	fp,zero
8110c038:	1001e926 	beq	r2,zero,8110c7e0 <___vfprintf_internal_r+0xb2c>
8110c03c:	0027883a 	mov	r19,zero
8110c040:	002d883a 	mov	r22,zero
8110c044:	00020506 	br	8110c85c <___vfprintf_internal_r+0xba8>
8110c048:	d9002c17 	ldw	r4,176(sp)
8110c04c:	b80b883a 	mov	r5,r23
8110c050:	110df840 	call	8110df84 <__swsetup_r>
8110c054:	1005ac1e 	bne	r2,zero,8110d708 <___vfprintf_internal_r+0x1a54>
8110c058:	b880030b 	ldhu	r2,12(r23)
8110c05c:	00c00284 	movi	r3,10
8110c060:	1080068c 	andi	r2,r2,26
8110c064:	10ff3c1e 	bne	r2,r3,8110bd58 <__reset+0xfb0ebd58>
8110c068:	b880038f 	ldh	r2,14(r23)
8110c06c:	103f3a16 	blt	r2,zero,8110bd58 <__reset+0xfb0ebd58>
8110c070:	d9c02d17 	ldw	r7,180(sp)
8110c074:	d9002c17 	ldw	r4,176(sp)
8110c078:	a80d883a 	mov	r6,r21
8110c07c:	b80b883a 	mov	r5,r23
8110c080:	110dec80 	call	8110dec8 <__sbprintf>
8110c084:	00001106 	br	8110c0cc <___vfprintf_internal_r+0x418>
8110c088:	d9002c17 	ldw	r4,176(sp)
8110c08c:	d9801e04 	addi	r6,sp,120
8110c090:	b80b883a 	mov	r5,r23
8110c094:	11134c00 	call	811134c0 <__sprint_r>
8110c098:	1000081e 	bne	r2,zero,8110c0bc <___vfprintf_internal_r+0x408>
8110c09c:	da000404 	addi	r8,sp,16
8110c0a0:	003f5306 	br	8110bdf0 <__reset+0xfb0ebdf0>
8110c0a4:	d8802017 	ldw	r2,128(sp)
8110c0a8:	10000426 	beq	r2,zero,8110c0bc <___vfprintf_internal_r+0x408>
8110c0ac:	d9002c17 	ldw	r4,176(sp)
8110c0b0:	d9801e04 	addi	r6,sp,120
8110c0b4:	b80b883a 	mov	r5,r23
8110c0b8:	11134c00 	call	811134c0 <__sprint_r>
8110c0bc:	b880030b 	ldhu	r2,12(r23)
8110c0c0:	1080100c 	andi	r2,r2,64
8110c0c4:	1005901e 	bne	r2,zero,8110d708 <___vfprintf_internal_r+0x1a54>
8110c0c8:	d8802f17 	ldw	r2,188(sp)
8110c0cc:	dfc04717 	ldw	ra,284(sp)
8110c0d0:	df004617 	ldw	fp,280(sp)
8110c0d4:	ddc04517 	ldw	r23,276(sp)
8110c0d8:	dd804417 	ldw	r22,272(sp)
8110c0dc:	dd404317 	ldw	r21,268(sp)
8110c0e0:	dd004217 	ldw	r20,264(sp)
8110c0e4:	dcc04117 	ldw	r19,260(sp)
8110c0e8:	dc804017 	ldw	r18,256(sp)
8110c0ec:	dc403f17 	ldw	r17,252(sp)
8110c0f0:	dc003e17 	ldw	r16,248(sp)
8110c0f4:	dec04804 	addi	sp,sp,288
8110c0f8:	f800283a 	ret
8110c0fc:	d9002c17 	ldw	r4,176(sp)
8110c100:	110ff580 	call	8110ff58 <__sinit>
8110c104:	003f0406 	br	8110bd18 <__reset+0xfb0ebd18>
8110c108:	d8802d17 	ldw	r2,180(sp)
8110c10c:	d9002d17 	ldw	r4,180(sp)
8110c110:	10800017 	ldw	r2,0(r2)
8110c114:	d8803115 	stw	r2,196(sp)
8110c118:	20800104 	addi	r2,r4,4
8110c11c:	d9003117 	ldw	r4,196(sp)
8110c120:	203fa716 	blt	r4,zero,8110bfc0 <__reset+0xfb0ebfc0>
8110c124:	d8802d15 	stw	r2,180(sp)
8110c128:	ac400007 	ldb	r17,0(r21)
8110c12c:	003f4206 	br	8110be38 <__reset+0xfb0ebe38>
8110c130:	ac400007 	ldb	r17,0(r21)
8110c134:	aac00044 	addi	r11,r21,1
8110c138:	8a872826 	beq	r17,r10,8110dddc <___vfprintf_internal_r+0x2128>
8110c13c:	88bff404 	addi	r2,r17,-48
8110c140:	0009883a 	mov	r4,zero
8110c144:	30867d36 	bltu	r6,r2,8110db3c <___vfprintf_internal_r+0x1e88>
8110c148:	5c400007 	ldb	r17,0(r11)
8110c14c:	210002a4 	muli	r4,r4,10
8110c150:	5d400044 	addi	r21,r11,1
8110c154:	a817883a 	mov	r11,r21
8110c158:	2089883a 	add	r4,r4,r2
8110c15c:	88bff404 	addi	r2,r17,-48
8110c160:	30bff92e 	bgeu	r6,r2,8110c148 <__reset+0xfb0ec148>
8110c164:	2005c916 	blt	r4,zero,8110d88c <___vfprintf_internal_r+0x1bd8>
8110c168:	d9002915 	stw	r4,164(sp)
8110c16c:	003f3306 	br	8110be3c <__reset+0xfb0ebe3c>
8110c170:	94802014 	ori	r18,r18,128
8110c174:	ac400007 	ldb	r17,0(r21)
8110c178:	003f2f06 	br	8110be38 <__reset+0xfb0ebe38>
8110c17c:	a809883a 	mov	r4,r21
8110c180:	d8003115 	stw	zero,196(sp)
8110c184:	88bff404 	addi	r2,r17,-48
8110c188:	0017883a 	mov	r11,zero
8110c18c:	24400007 	ldb	r17,0(r4)
8110c190:	5ac002a4 	muli	r11,r11,10
8110c194:	ad400044 	addi	r21,r21,1
8110c198:	a809883a 	mov	r4,r21
8110c19c:	12d7883a 	add	r11,r2,r11
8110c1a0:	88bff404 	addi	r2,r17,-48
8110c1a4:	30bff92e 	bgeu	r6,r2,8110c18c <__reset+0xfb0ec18c>
8110c1a8:	dac03115 	stw	r11,196(sp)
8110c1ac:	003f2306 	br	8110be3c <__reset+0xfb0ebe3c>
8110c1b0:	18c03fcc 	andi	r3,r3,255
8110c1b4:	18072b1e 	bne	r3,zero,8110de64 <___vfprintf_internal_r+0x21b0>
8110c1b8:	94800414 	ori	r18,r18,16
8110c1bc:	9080080c 	andi	r2,r18,32
8110c1c0:	10037b26 	beq	r2,zero,8110cfb0 <___vfprintf_internal_r+0x12fc>
8110c1c4:	d9402d17 	ldw	r5,180(sp)
8110c1c8:	28800117 	ldw	r2,4(r5)
8110c1cc:	2cc00017 	ldw	r19,0(r5)
8110c1d0:	29400204 	addi	r5,r5,8
8110c1d4:	d9402d15 	stw	r5,180(sp)
8110c1d8:	102d883a 	mov	r22,r2
8110c1dc:	10044b16 	blt	r2,zero,8110d30c <___vfprintf_internal_r+0x1658>
8110c1e0:	d9402917 	ldw	r5,164(sp)
8110c1e4:	df002783 	ldbu	fp,158(sp)
8110c1e8:	2803bc16 	blt	r5,zero,8110d0dc <___vfprintf_internal_r+0x1428>
8110c1ec:	00ffdfc4 	movi	r3,-129
8110c1f0:	9d84b03a 	or	r2,r19,r22
8110c1f4:	90e4703a 	and	r18,r18,r3
8110c1f8:	10017726 	beq	r2,zero,8110c7d8 <___vfprintf_internal_r+0xb24>
8110c1fc:	b0038326 	beq	r22,zero,8110d00c <___vfprintf_internal_r+0x1358>
8110c200:	dc402a15 	stw	r17,168(sp)
8110c204:	dc001e04 	addi	r16,sp,120
8110c208:	b023883a 	mov	r17,r22
8110c20c:	402d883a 	mov	r22,r8
8110c210:	9809883a 	mov	r4,r19
8110c214:	880b883a 	mov	r5,r17
8110c218:	01800284 	movi	r6,10
8110c21c:	000f883a 	mov	r7,zero
8110c220:	11158b80 	call	811158b8 <__umoddi3>
8110c224:	10800c04 	addi	r2,r2,48
8110c228:	843fffc4 	addi	r16,r16,-1
8110c22c:	9809883a 	mov	r4,r19
8110c230:	880b883a 	mov	r5,r17
8110c234:	80800005 	stb	r2,0(r16)
8110c238:	01800284 	movi	r6,10
8110c23c:	000f883a 	mov	r7,zero
8110c240:	11153400 	call	81115340 <__udivdi3>
8110c244:	1027883a 	mov	r19,r2
8110c248:	10c4b03a 	or	r2,r2,r3
8110c24c:	1823883a 	mov	r17,r3
8110c250:	103fef1e 	bne	r2,zero,8110c210 <__reset+0xfb0ec210>
8110c254:	d8c02817 	ldw	r3,160(sp)
8110c258:	dc402a17 	ldw	r17,168(sp)
8110c25c:	b011883a 	mov	r8,r22
8110c260:	1c07c83a 	sub	r3,r3,r16
8110c264:	d8c02e15 	stw	r3,184(sp)
8110c268:	00005906 	br	8110c3d0 <___vfprintf_internal_r+0x71c>
8110c26c:	18c03fcc 	andi	r3,r3,255
8110c270:	1806fa1e 	bne	r3,zero,8110de5c <___vfprintf_internal_r+0x21a8>
8110c274:	9080020c 	andi	r2,r18,8
8110c278:	10048a26 	beq	r2,zero,8110d4a4 <___vfprintf_internal_r+0x17f0>
8110c27c:	d8c02d17 	ldw	r3,180(sp)
8110c280:	d9002d17 	ldw	r4,180(sp)
8110c284:	d9402d17 	ldw	r5,180(sp)
8110c288:	18c00017 	ldw	r3,0(r3)
8110c28c:	21000117 	ldw	r4,4(r4)
8110c290:	29400204 	addi	r5,r5,8
8110c294:	d8c03615 	stw	r3,216(sp)
8110c298:	d9003815 	stw	r4,224(sp)
8110c29c:	d9402d15 	stw	r5,180(sp)
8110c2a0:	d9003617 	ldw	r4,216(sp)
8110c2a4:	d9403817 	ldw	r5,224(sp)
8110c2a8:	da003d15 	stw	r8,244(sp)
8110c2ac:	04000044 	movi	r16,1
8110c2b0:	11130e40 	call	811130e4 <__fpclassifyd>
8110c2b4:	da003d17 	ldw	r8,244(sp)
8110c2b8:	14041f1e 	bne	r2,r16,8110d338 <___vfprintf_internal_r+0x1684>
8110c2bc:	d9003617 	ldw	r4,216(sp)
8110c2c0:	d9403817 	ldw	r5,224(sp)
8110c2c4:	000d883a 	mov	r6,zero
8110c2c8:	000f883a 	mov	r7,zero
8110c2cc:	111729c0 	call	8111729c <__ledf2>
8110c2d0:	da003d17 	ldw	r8,244(sp)
8110c2d4:	1005be16 	blt	r2,zero,8110d9d0 <___vfprintf_internal_r+0x1d1c>
8110c2d8:	df002783 	ldbu	fp,158(sp)
8110c2dc:	008011c4 	movi	r2,71
8110c2e0:	1445330e 	bge	r2,r17,8110d7b0 <___vfprintf_internal_r+0x1afc>
8110c2e4:	042044b4 	movhi	r16,33042
8110c2e8:	84395904 	addi	r16,r16,-6812
8110c2ec:	00c000c4 	movi	r3,3
8110c2f0:	00bfdfc4 	movi	r2,-129
8110c2f4:	d8c02a15 	stw	r3,168(sp)
8110c2f8:	90a4703a 	and	r18,r18,r2
8110c2fc:	d8c02e15 	stw	r3,184(sp)
8110c300:	d8002915 	stw	zero,164(sp)
8110c304:	d8003215 	stw	zero,200(sp)
8110c308:	00003706 	br	8110c3e8 <___vfprintf_internal_r+0x734>
8110c30c:	94800214 	ori	r18,r18,8
8110c310:	ac400007 	ldb	r17,0(r21)
8110c314:	003ec806 	br	8110be38 <__reset+0xfb0ebe38>
8110c318:	18c03fcc 	andi	r3,r3,255
8110c31c:	1806db1e 	bne	r3,zero,8110de8c <___vfprintf_internal_r+0x21d8>
8110c320:	94800414 	ori	r18,r18,16
8110c324:	9080080c 	andi	r2,r18,32
8110c328:	1002d826 	beq	r2,zero,8110ce8c <___vfprintf_internal_r+0x11d8>
8110c32c:	d9402d17 	ldw	r5,180(sp)
8110c330:	d8c02917 	ldw	r3,164(sp)
8110c334:	d8002785 	stb	zero,158(sp)
8110c338:	28800204 	addi	r2,r5,8
8110c33c:	2cc00017 	ldw	r19,0(r5)
8110c340:	2d800117 	ldw	r22,4(r5)
8110c344:	18048f16 	blt	r3,zero,8110d584 <___vfprintf_internal_r+0x18d0>
8110c348:	013fdfc4 	movi	r4,-129
8110c34c:	9d86b03a 	or	r3,r19,r22
8110c350:	d8802d15 	stw	r2,180(sp)
8110c354:	9124703a 	and	r18,r18,r4
8110c358:	1802d91e 	bne	r3,zero,8110cec0 <___vfprintf_internal_r+0x120c>
8110c35c:	d8c02917 	ldw	r3,164(sp)
8110c360:	0039883a 	mov	fp,zero
8110c364:	1805c326 	beq	r3,zero,8110da74 <___vfprintf_internal_r+0x1dc0>
8110c368:	0027883a 	mov	r19,zero
8110c36c:	002d883a 	mov	r22,zero
8110c370:	dc001e04 	addi	r16,sp,120
8110c374:	9806d0fa 	srli	r3,r19,3
8110c378:	b008977a 	slli	r4,r22,29
8110c37c:	b02cd0fa 	srli	r22,r22,3
8110c380:	9cc001cc 	andi	r19,r19,7
8110c384:	98800c04 	addi	r2,r19,48
8110c388:	843fffc4 	addi	r16,r16,-1
8110c38c:	20e6b03a 	or	r19,r4,r3
8110c390:	80800005 	stb	r2,0(r16)
8110c394:	9d86b03a 	or	r3,r19,r22
8110c398:	183ff61e 	bne	r3,zero,8110c374 <__reset+0xfb0ec374>
8110c39c:	90c0004c 	andi	r3,r18,1
8110c3a0:	18013b26 	beq	r3,zero,8110c890 <___vfprintf_internal_r+0xbdc>
8110c3a4:	10803fcc 	andi	r2,r2,255
8110c3a8:	1080201c 	xori	r2,r2,128
8110c3ac:	10bfe004 	addi	r2,r2,-128
8110c3b0:	00c00c04 	movi	r3,48
8110c3b4:	10c13626 	beq	r2,r3,8110c890 <___vfprintf_internal_r+0xbdc>
8110c3b8:	80ffffc5 	stb	r3,-1(r16)
8110c3bc:	d8c02817 	ldw	r3,160(sp)
8110c3c0:	80bfffc4 	addi	r2,r16,-1
8110c3c4:	1021883a 	mov	r16,r2
8110c3c8:	1887c83a 	sub	r3,r3,r2
8110c3cc:	d8c02e15 	stw	r3,184(sp)
8110c3d0:	d8802e17 	ldw	r2,184(sp)
8110c3d4:	d9002917 	ldw	r4,164(sp)
8110c3d8:	1100010e 	bge	r2,r4,8110c3e0 <___vfprintf_internal_r+0x72c>
8110c3dc:	2005883a 	mov	r2,r4
8110c3e0:	d8802a15 	stw	r2,168(sp)
8110c3e4:	d8003215 	stw	zero,200(sp)
8110c3e8:	e7003fcc 	andi	fp,fp,255
8110c3ec:	e700201c 	xori	fp,fp,128
8110c3f0:	e73fe004 	addi	fp,fp,-128
8110c3f4:	e0000326 	beq	fp,zero,8110c404 <___vfprintf_internal_r+0x750>
8110c3f8:	d8c02a17 	ldw	r3,168(sp)
8110c3fc:	18c00044 	addi	r3,r3,1
8110c400:	d8c02a15 	stw	r3,168(sp)
8110c404:	90c0008c 	andi	r3,r18,2
8110c408:	d8c02b15 	stw	r3,172(sp)
8110c40c:	18000326 	beq	r3,zero,8110c41c <___vfprintf_internal_r+0x768>
8110c410:	d8c02a17 	ldw	r3,168(sp)
8110c414:	18c00084 	addi	r3,r3,2
8110c418:	d8c02a15 	stw	r3,168(sp)
8110c41c:	90c0210c 	andi	r3,r18,132
8110c420:	d8c03015 	stw	r3,192(sp)
8110c424:	1801a31e 	bne	r3,zero,8110cab4 <___vfprintf_internal_r+0xe00>
8110c428:	d9003117 	ldw	r4,196(sp)
8110c42c:	d8c02a17 	ldw	r3,168(sp)
8110c430:	20e7c83a 	sub	r19,r4,r3
8110c434:	04c19f0e 	bge	zero,r19,8110cab4 <___vfprintf_internal_r+0xe00>
8110c438:	02400404 	movi	r9,16
8110c43c:	d8c02017 	ldw	r3,128(sp)
8110c440:	d8801f17 	ldw	r2,124(sp)
8110c444:	4cc50d0e 	bge	r9,r19,8110d87c <___vfprintf_internal_r+0x1bc8>
8110c448:	016044b4 	movhi	r5,33042
8110c44c:	29796c84 	addi	r5,r5,-6734
8110c450:	dc403b15 	stw	r17,236(sp)
8110c454:	d9403515 	stw	r5,212(sp)
8110c458:	9823883a 	mov	r17,r19
8110c45c:	482d883a 	mov	r22,r9
8110c460:	9027883a 	mov	r19,r18
8110c464:	070001c4 	movi	fp,7
8110c468:	8025883a 	mov	r18,r16
8110c46c:	dc002c17 	ldw	r16,176(sp)
8110c470:	00000306 	br	8110c480 <___vfprintf_internal_r+0x7cc>
8110c474:	8c7ffc04 	addi	r17,r17,-16
8110c478:	42000204 	addi	r8,r8,8
8110c47c:	b440130e 	bge	r22,r17,8110c4cc <___vfprintf_internal_r+0x818>
8110c480:	012044b4 	movhi	r4,33042
8110c484:	18c00404 	addi	r3,r3,16
8110c488:	10800044 	addi	r2,r2,1
8110c48c:	21396c84 	addi	r4,r4,-6734
8110c490:	41000015 	stw	r4,0(r8)
8110c494:	45800115 	stw	r22,4(r8)
8110c498:	d8c02015 	stw	r3,128(sp)
8110c49c:	d8801f15 	stw	r2,124(sp)
8110c4a0:	e0bff40e 	bge	fp,r2,8110c474 <__reset+0xfb0ec474>
8110c4a4:	d9801e04 	addi	r6,sp,120
8110c4a8:	b80b883a 	mov	r5,r23
8110c4ac:	8009883a 	mov	r4,r16
8110c4b0:	11134c00 	call	811134c0 <__sprint_r>
8110c4b4:	103f011e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110c4b8:	8c7ffc04 	addi	r17,r17,-16
8110c4bc:	d8c02017 	ldw	r3,128(sp)
8110c4c0:	d8801f17 	ldw	r2,124(sp)
8110c4c4:	da000404 	addi	r8,sp,16
8110c4c8:	b47fed16 	blt	r22,r17,8110c480 <__reset+0xfb0ec480>
8110c4cc:	9021883a 	mov	r16,r18
8110c4d0:	9825883a 	mov	r18,r19
8110c4d4:	8827883a 	mov	r19,r17
8110c4d8:	dc403b17 	ldw	r17,236(sp)
8110c4dc:	d9403517 	ldw	r5,212(sp)
8110c4e0:	98c7883a 	add	r3,r19,r3
8110c4e4:	10800044 	addi	r2,r2,1
8110c4e8:	41400015 	stw	r5,0(r8)
8110c4ec:	44c00115 	stw	r19,4(r8)
8110c4f0:	d8c02015 	stw	r3,128(sp)
8110c4f4:	d8801f15 	stw	r2,124(sp)
8110c4f8:	010001c4 	movi	r4,7
8110c4fc:	2082a316 	blt	r4,r2,8110cf8c <___vfprintf_internal_r+0x12d8>
8110c500:	df002787 	ldb	fp,158(sp)
8110c504:	42000204 	addi	r8,r8,8
8110c508:	e0000c26 	beq	fp,zero,8110c53c <___vfprintf_internal_r+0x888>
8110c50c:	d8801f17 	ldw	r2,124(sp)
8110c510:	d9002784 	addi	r4,sp,158
8110c514:	18c00044 	addi	r3,r3,1
8110c518:	10800044 	addi	r2,r2,1
8110c51c:	41000015 	stw	r4,0(r8)
8110c520:	01000044 	movi	r4,1
8110c524:	41000115 	stw	r4,4(r8)
8110c528:	d8c02015 	stw	r3,128(sp)
8110c52c:	d8801f15 	stw	r2,124(sp)
8110c530:	010001c4 	movi	r4,7
8110c534:	20823c16 	blt	r4,r2,8110ce28 <___vfprintf_internal_r+0x1174>
8110c538:	42000204 	addi	r8,r8,8
8110c53c:	d8802b17 	ldw	r2,172(sp)
8110c540:	10000c26 	beq	r2,zero,8110c574 <___vfprintf_internal_r+0x8c0>
8110c544:	d8801f17 	ldw	r2,124(sp)
8110c548:	d9002704 	addi	r4,sp,156
8110c54c:	18c00084 	addi	r3,r3,2
8110c550:	10800044 	addi	r2,r2,1
8110c554:	41000015 	stw	r4,0(r8)
8110c558:	01000084 	movi	r4,2
8110c55c:	41000115 	stw	r4,4(r8)
8110c560:	d8c02015 	stw	r3,128(sp)
8110c564:	d8801f15 	stw	r2,124(sp)
8110c568:	010001c4 	movi	r4,7
8110c56c:	20823616 	blt	r4,r2,8110ce48 <___vfprintf_internal_r+0x1194>
8110c570:	42000204 	addi	r8,r8,8
8110c574:	d9003017 	ldw	r4,192(sp)
8110c578:	00802004 	movi	r2,128
8110c57c:	20819926 	beq	r4,r2,8110cbe4 <___vfprintf_internal_r+0xf30>
8110c580:	d9402917 	ldw	r5,164(sp)
8110c584:	d8802e17 	ldw	r2,184(sp)
8110c588:	28adc83a 	sub	r22,r5,r2
8110c58c:	0580310e 	bge	zero,r22,8110c654 <___vfprintf_internal_r+0x9a0>
8110c590:	07000404 	movi	fp,16
8110c594:	d8801f17 	ldw	r2,124(sp)
8110c598:	e584140e 	bge	fp,r22,8110d5ec <___vfprintf_internal_r+0x1938>
8110c59c:	016044b4 	movhi	r5,33042
8110c5a0:	29796884 	addi	r5,r5,-6750
8110c5a4:	dc402915 	stw	r17,164(sp)
8110c5a8:	d9402b15 	stw	r5,172(sp)
8110c5ac:	b023883a 	mov	r17,r22
8110c5b0:	04c001c4 	movi	r19,7
8110c5b4:	a82d883a 	mov	r22,r21
8110c5b8:	902b883a 	mov	r21,r18
8110c5bc:	8025883a 	mov	r18,r16
8110c5c0:	dc002c17 	ldw	r16,176(sp)
8110c5c4:	00000306 	br	8110c5d4 <___vfprintf_internal_r+0x920>
8110c5c8:	8c7ffc04 	addi	r17,r17,-16
8110c5cc:	42000204 	addi	r8,r8,8
8110c5d0:	e440110e 	bge	fp,r17,8110c618 <___vfprintf_internal_r+0x964>
8110c5d4:	18c00404 	addi	r3,r3,16
8110c5d8:	10800044 	addi	r2,r2,1
8110c5dc:	45000015 	stw	r20,0(r8)
8110c5e0:	47000115 	stw	fp,4(r8)
8110c5e4:	d8c02015 	stw	r3,128(sp)
8110c5e8:	d8801f15 	stw	r2,124(sp)
8110c5ec:	98bff60e 	bge	r19,r2,8110c5c8 <__reset+0xfb0ec5c8>
8110c5f0:	d9801e04 	addi	r6,sp,120
8110c5f4:	b80b883a 	mov	r5,r23
8110c5f8:	8009883a 	mov	r4,r16
8110c5fc:	11134c00 	call	811134c0 <__sprint_r>
8110c600:	103eae1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110c604:	8c7ffc04 	addi	r17,r17,-16
8110c608:	d8c02017 	ldw	r3,128(sp)
8110c60c:	d8801f17 	ldw	r2,124(sp)
8110c610:	da000404 	addi	r8,sp,16
8110c614:	e47fef16 	blt	fp,r17,8110c5d4 <__reset+0xfb0ec5d4>
8110c618:	9021883a 	mov	r16,r18
8110c61c:	a825883a 	mov	r18,r21
8110c620:	b02b883a 	mov	r21,r22
8110c624:	882d883a 	mov	r22,r17
8110c628:	dc402917 	ldw	r17,164(sp)
8110c62c:	d9002b17 	ldw	r4,172(sp)
8110c630:	1d87883a 	add	r3,r3,r22
8110c634:	10800044 	addi	r2,r2,1
8110c638:	41000015 	stw	r4,0(r8)
8110c63c:	45800115 	stw	r22,4(r8)
8110c640:	d8c02015 	stw	r3,128(sp)
8110c644:	d8801f15 	stw	r2,124(sp)
8110c648:	010001c4 	movi	r4,7
8110c64c:	2081ee16 	blt	r4,r2,8110ce08 <___vfprintf_internal_r+0x1154>
8110c650:	42000204 	addi	r8,r8,8
8110c654:	9080400c 	andi	r2,r18,256
8110c658:	1001181e 	bne	r2,zero,8110cabc <___vfprintf_internal_r+0xe08>
8110c65c:	d9402e17 	ldw	r5,184(sp)
8110c660:	d8801f17 	ldw	r2,124(sp)
8110c664:	44000015 	stw	r16,0(r8)
8110c668:	1947883a 	add	r3,r3,r5
8110c66c:	10800044 	addi	r2,r2,1
8110c670:	41400115 	stw	r5,4(r8)
8110c674:	d8c02015 	stw	r3,128(sp)
8110c678:	d8801f15 	stw	r2,124(sp)
8110c67c:	010001c4 	movi	r4,7
8110c680:	2081d316 	blt	r4,r2,8110cdd0 <___vfprintf_internal_r+0x111c>
8110c684:	42000204 	addi	r8,r8,8
8110c688:	9480010c 	andi	r18,r18,4
8110c68c:	90003226 	beq	r18,zero,8110c758 <___vfprintf_internal_r+0xaa4>
8110c690:	d9403117 	ldw	r5,196(sp)
8110c694:	d8802a17 	ldw	r2,168(sp)
8110c698:	28a1c83a 	sub	r16,r5,r2
8110c69c:	04002e0e 	bge	zero,r16,8110c758 <___vfprintf_internal_r+0xaa4>
8110c6a0:	04400404 	movi	r17,16
8110c6a4:	d8801f17 	ldw	r2,124(sp)
8110c6a8:	8c04a20e 	bge	r17,r16,8110d934 <___vfprintf_internal_r+0x1c80>
8110c6ac:	016044b4 	movhi	r5,33042
8110c6b0:	29796c84 	addi	r5,r5,-6734
8110c6b4:	d9403515 	stw	r5,212(sp)
8110c6b8:	048001c4 	movi	r18,7
8110c6bc:	dcc02c17 	ldw	r19,176(sp)
8110c6c0:	00000306 	br	8110c6d0 <___vfprintf_internal_r+0xa1c>
8110c6c4:	843ffc04 	addi	r16,r16,-16
8110c6c8:	42000204 	addi	r8,r8,8
8110c6cc:	8c00130e 	bge	r17,r16,8110c71c <___vfprintf_internal_r+0xa68>
8110c6d0:	012044b4 	movhi	r4,33042
8110c6d4:	18c00404 	addi	r3,r3,16
8110c6d8:	10800044 	addi	r2,r2,1
8110c6dc:	21396c84 	addi	r4,r4,-6734
8110c6e0:	41000015 	stw	r4,0(r8)
8110c6e4:	44400115 	stw	r17,4(r8)
8110c6e8:	d8c02015 	stw	r3,128(sp)
8110c6ec:	d8801f15 	stw	r2,124(sp)
8110c6f0:	90bff40e 	bge	r18,r2,8110c6c4 <__reset+0xfb0ec6c4>
8110c6f4:	d9801e04 	addi	r6,sp,120
8110c6f8:	b80b883a 	mov	r5,r23
8110c6fc:	9809883a 	mov	r4,r19
8110c700:	11134c00 	call	811134c0 <__sprint_r>
8110c704:	103e6d1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110c708:	843ffc04 	addi	r16,r16,-16
8110c70c:	d8c02017 	ldw	r3,128(sp)
8110c710:	d8801f17 	ldw	r2,124(sp)
8110c714:	da000404 	addi	r8,sp,16
8110c718:	8c3fed16 	blt	r17,r16,8110c6d0 <__reset+0xfb0ec6d0>
8110c71c:	d9403517 	ldw	r5,212(sp)
8110c720:	1c07883a 	add	r3,r3,r16
8110c724:	10800044 	addi	r2,r2,1
8110c728:	41400015 	stw	r5,0(r8)
8110c72c:	44000115 	stw	r16,4(r8)
8110c730:	d8c02015 	stw	r3,128(sp)
8110c734:	d8801f15 	stw	r2,124(sp)
8110c738:	010001c4 	movi	r4,7
8110c73c:	2080060e 	bge	r4,r2,8110c758 <___vfprintf_internal_r+0xaa4>
8110c740:	d9002c17 	ldw	r4,176(sp)
8110c744:	d9801e04 	addi	r6,sp,120
8110c748:	b80b883a 	mov	r5,r23
8110c74c:	11134c00 	call	811134c0 <__sprint_r>
8110c750:	103e5a1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110c754:	d8c02017 	ldw	r3,128(sp)
8110c758:	d8803117 	ldw	r2,196(sp)
8110c75c:	d9002a17 	ldw	r4,168(sp)
8110c760:	1100010e 	bge	r2,r4,8110c768 <___vfprintf_internal_r+0xab4>
8110c764:	2005883a 	mov	r2,r4
8110c768:	d9402f17 	ldw	r5,188(sp)
8110c76c:	288b883a 	add	r5,r5,r2
8110c770:	d9402f15 	stw	r5,188(sp)
8110c774:	18019e1e 	bne	r3,zero,8110cdf0 <___vfprintf_internal_r+0x113c>
8110c778:	a8800007 	ldb	r2,0(r21)
8110c77c:	d8001f15 	stw	zero,124(sp)
8110c780:	da000404 	addi	r8,sp,16
8110c784:	103d851e 	bne	r2,zero,8110bd9c <__reset+0xfb0ebd9c>
8110c788:	a821883a 	mov	r16,r21
8110c78c:	003d9b06 	br	8110bdfc <__reset+0xfb0ebdfc>
8110c790:	18c03fcc 	andi	r3,r3,255
8110c794:	1805c11e 	bne	r3,zero,8110de9c <___vfprintf_internal_r+0x21e8>
8110c798:	94800414 	ori	r18,r18,16
8110c79c:	9080080c 	andi	r2,r18,32
8110c7a0:	10020c26 	beq	r2,zero,8110cfd4 <___vfprintf_internal_r+0x1320>
8110c7a4:	d8802d17 	ldw	r2,180(sp)
8110c7a8:	d9002917 	ldw	r4,164(sp)
8110c7ac:	d8002785 	stb	zero,158(sp)
8110c7b0:	10c00204 	addi	r3,r2,8
8110c7b4:	14c00017 	ldw	r19,0(r2)
8110c7b8:	15800117 	ldw	r22,4(r2)
8110c7bc:	20040f16 	blt	r4,zero,8110d7fc <___vfprintf_internal_r+0x1b48>
8110c7c0:	013fdfc4 	movi	r4,-129
8110c7c4:	9d84b03a 	or	r2,r19,r22
8110c7c8:	d8c02d15 	stw	r3,180(sp)
8110c7cc:	9124703a 	and	r18,r18,r4
8110c7d0:	0039883a 	mov	fp,zero
8110c7d4:	103e891e 	bne	r2,zero,8110c1fc <__reset+0xfb0ec1fc>
8110c7d8:	d9002917 	ldw	r4,164(sp)
8110c7dc:	2002c11e 	bne	r4,zero,8110d2e4 <___vfprintf_internal_r+0x1630>
8110c7e0:	d8002915 	stw	zero,164(sp)
8110c7e4:	d8002e15 	stw	zero,184(sp)
8110c7e8:	dc001e04 	addi	r16,sp,120
8110c7ec:	003ef806 	br	8110c3d0 <__reset+0xfb0ec3d0>
8110c7f0:	18c03fcc 	andi	r3,r3,255
8110c7f4:	18059d1e 	bne	r3,zero,8110de6c <___vfprintf_internal_r+0x21b8>
8110c7f8:	016044b4 	movhi	r5,33042
8110c7fc:	29795c04 	addi	r5,r5,-6800
8110c800:	d9403915 	stw	r5,228(sp)
8110c804:	9080080c 	andi	r2,r18,32
8110c808:	10005226 	beq	r2,zero,8110c954 <___vfprintf_internal_r+0xca0>
8110c80c:	d8802d17 	ldw	r2,180(sp)
8110c810:	14c00017 	ldw	r19,0(r2)
8110c814:	15800117 	ldw	r22,4(r2)
8110c818:	10800204 	addi	r2,r2,8
8110c81c:	d8802d15 	stw	r2,180(sp)
8110c820:	9080004c 	andi	r2,r18,1
8110c824:	10019026 	beq	r2,zero,8110ce68 <___vfprintf_internal_r+0x11b4>
8110c828:	9d84b03a 	or	r2,r19,r22
8110c82c:	10036926 	beq	r2,zero,8110d5d4 <___vfprintf_internal_r+0x1920>
8110c830:	d8c02917 	ldw	r3,164(sp)
8110c834:	00800c04 	movi	r2,48
8110c838:	d8802705 	stb	r2,156(sp)
8110c83c:	dc402745 	stb	r17,157(sp)
8110c840:	d8002785 	stb	zero,158(sp)
8110c844:	90800094 	ori	r2,r18,2
8110c848:	18045d16 	blt	r3,zero,8110d9c0 <___vfprintf_internal_r+0x1d0c>
8110c84c:	00bfdfc4 	movi	r2,-129
8110c850:	90a4703a 	and	r18,r18,r2
8110c854:	94800094 	ori	r18,r18,2
8110c858:	0039883a 	mov	fp,zero
8110c85c:	d9003917 	ldw	r4,228(sp)
8110c860:	dc001e04 	addi	r16,sp,120
8110c864:	988003cc 	andi	r2,r19,15
8110c868:	b006973a 	slli	r3,r22,28
8110c86c:	2085883a 	add	r2,r4,r2
8110c870:	9826d13a 	srli	r19,r19,4
8110c874:	10800003 	ldbu	r2,0(r2)
8110c878:	b02cd13a 	srli	r22,r22,4
8110c87c:	843fffc4 	addi	r16,r16,-1
8110c880:	1ce6b03a 	or	r19,r3,r19
8110c884:	80800005 	stb	r2,0(r16)
8110c888:	9d84b03a 	or	r2,r19,r22
8110c88c:	103ff51e 	bne	r2,zero,8110c864 <__reset+0xfb0ec864>
8110c890:	d8c02817 	ldw	r3,160(sp)
8110c894:	1c07c83a 	sub	r3,r3,r16
8110c898:	d8c02e15 	stw	r3,184(sp)
8110c89c:	003ecc06 	br	8110c3d0 <__reset+0xfb0ec3d0>
8110c8a0:	18c03fcc 	andi	r3,r3,255
8110c8a4:	183e9f26 	beq	r3,zero,8110c324 <__reset+0xfb0ec324>
8110c8a8:	d9c02785 	stb	r7,158(sp)
8110c8ac:	003e9d06 	br	8110c324 <__reset+0xfb0ec324>
8110c8b0:	00c00044 	movi	r3,1
8110c8b4:	01c00ac4 	movi	r7,43
8110c8b8:	ac400007 	ldb	r17,0(r21)
8110c8bc:	003d5e06 	br	8110be38 <__reset+0xfb0ebe38>
8110c8c0:	94800814 	ori	r18,r18,32
8110c8c4:	ac400007 	ldb	r17,0(r21)
8110c8c8:	003d5b06 	br	8110be38 <__reset+0xfb0ebe38>
8110c8cc:	d8c02d17 	ldw	r3,180(sp)
8110c8d0:	d8002785 	stb	zero,158(sp)
8110c8d4:	1c000017 	ldw	r16,0(r3)
8110c8d8:	1cc00104 	addi	r19,r3,4
8110c8dc:	80041926 	beq	r16,zero,8110d944 <___vfprintf_internal_r+0x1c90>
8110c8e0:	d9002917 	ldw	r4,164(sp)
8110c8e4:	2003d016 	blt	r4,zero,8110d828 <___vfprintf_internal_r+0x1b74>
8110c8e8:	200d883a 	mov	r6,r4
8110c8ec:	000b883a 	mov	r5,zero
8110c8f0:	8009883a 	mov	r4,r16
8110c8f4:	da003d15 	stw	r8,244(sp)
8110c8f8:	11114c40 	call	811114c4 <memchr>
8110c8fc:	da003d17 	ldw	r8,244(sp)
8110c900:	10045426 	beq	r2,zero,8110da54 <___vfprintf_internal_r+0x1da0>
8110c904:	1405c83a 	sub	r2,r2,r16
8110c908:	d8802e15 	stw	r2,184(sp)
8110c90c:	1003cc16 	blt	r2,zero,8110d840 <___vfprintf_internal_r+0x1b8c>
8110c910:	df002783 	ldbu	fp,158(sp)
8110c914:	d8802a15 	stw	r2,168(sp)
8110c918:	dcc02d15 	stw	r19,180(sp)
8110c91c:	d8002915 	stw	zero,164(sp)
8110c920:	d8003215 	stw	zero,200(sp)
8110c924:	003eb006 	br	8110c3e8 <__reset+0xfb0ec3e8>
8110c928:	18c03fcc 	andi	r3,r3,255
8110c92c:	183f9b26 	beq	r3,zero,8110c79c <__reset+0xfb0ec79c>
8110c930:	d9c02785 	stb	r7,158(sp)
8110c934:	003f9906 	br	8110c79c <__reset+0xfb0ec79c>
8110c938:	18c03fcc 	andi	r3,r3,255
8110c93c:	1805551e 	bne	r3,zero,8110de94 <___vfprintf_internal_r+0x21e0>
8110c940:	016044b4 	movhi	r5,33042
8110c944:	29796104 	addi	r5,r5,-6780
8110c948:	d9403915 	stw	r5,228(sp)
8110c94c:	9080080c 	andi	r2,r18,32
8110c950:	103fae1e 	bne	r2,zero,8110c80c <__reset+0xfb0ec80c>
8110c954:	9080040c 	andi	r2,r18,16
8110c958:	1002de26 	beq	r2,zero,8110d4d4 <___vfprintf_internal_r+0x1820>
8110c95c:	d8c02d17 	ldw	r3,180(sp)
8110c960:	002d883a 	mov	r22,zero
8110c964:	1cc00017 	ldw	r19,0(r3)
8110c968:	18c00104 	addi	r3,r3,4
8110c96c:	d8c02d15 	stw	r3,180(sp)
8110c970:	003fab06 	br	8110c820 <__reset+0xfb0ec820>
8110c974:	38803fcc 	andi	r2,r7,255
8110c978:	1080201c 	xori	r2,r2,128
8110c97c:	10bfe004 	addi	r2,r2,-128
8110c980:	1002d21e 	bne	r2,zero,8110d4cc <___vfprintf_internal_r+0x1818>
8110c984:	00c00044 	movi	r3,1
8110c988:	01c00804 	movi	r7,32
8110c98c:	ac400007 	ldb	r17,0(r21)
8110c990:	003d2906 	br	8110be38 <__reset+0xfb0ebe38>
8110c994:	94800054 	ori	r18,r18,1
8110c998:	ac400007 	ldb	r17,0(r21)
8110c99c:	003d2606 	br	8110be38 <__reset+0xfb0ebe38>
8110c9a0:	18c03fcc 	andi	r3,r3,255
8110c9a4:	183e0526 	beq	r3,zero,8110c1bc <__reset+0xfb0ec1bc>
8110c9a8:	d9c02785 	stb	r7,158(sp)
8110c9ac:	003e0306 	br	8110c1bc <__reset+0xfb0ec1bc>
8110c9b0:	94801014 	ori	r18,r18,64
8110c9b4:	ac400007 	ldb	r17,0(r21)
8110c9b8:	003d1f06 	br	8110be38 <__reset+0xfb0ebe38>
8110c9bc:	ac400007 	ldb	r17,0(r21)
8110c9c0:	8a438726 	beq	r17,r9,8110d7e0 <___vfprintf_internal_r+0x1b2c>
8110c9c4:	94800414 	ori	r18,r18,16
8110c9c8:	003d1b06 	br	8110be38 <__reset+0xfb0ebe38>
8110c9cc:	18c03fcc 	andi	r3,r3,255
8110c9d0:	1805341e 	bne	r3,zero,8110dea4 <___vfprintf_internal_r+0x21f0>
8110c9d4:	9080080c 	andi	r2,r18,32
8110c9d8:	1002cd26 	beq	r2,zero,8110d510 <___vfprintf_internal_r+0x185c>
8110c9dc:	d9402d17 	ldw	r5,180(sp)
8110c9e0:	d9002f17 	ldw	r4,188(sp)
8110c9e4:	28800017 	ldw	r2,0(r5)
8110c9e8:	2007d7fa 	srai	r3,r4,31
8110c9ec:	29400104 	addi	r5,r5,4
8110c9f0:	d9402d15 	stw	r5,180(sp)
8110c9f4:	11000015 	stw	r4,0(r2)
8110c9f8:	10c00115 	stw	r3,4(r2)
8110c9fc:	003ce506 	br	8110bd94 <__reset+0xfb0ebd94>
8110ca00:	d8c02d17 	ldw	r3,180(sp)
8110ca04:	d9002d17 	ldw	r4,180(sp)
8110ca08:	d8002785 	stb	zero,158(sp)
8110ca0c:	18800017 	ldw	r2,0(r3)
8110ca10:	21000104 	addi	r4,r4,4
8110ca14:	00c00044 	movi	r3,1
8110ca18:	d8c02a15 	stw	r3,168(sp)
8110ca1c:	d8801405 	stb	r2,80(sp)
8110ca20:	d9002d15 	stw	r4,180(sp)
8110ca24:	d8c02e15 	stw	r3,184(sp)
8110ca28:	d8002915 	stw	zero,164(sp)
8110ca2c:	d8003215 	stw	zero,200(sp)
8110ca30:	dc001404 	addi	r16,sp,80
8110ca34:	0039883a 	mov	fp,zero
8110ca38:	003e7206 	br	8110c404 <__reset+0xfb0ec404>
8110ca3c:	012044b4 	movhi	r4,33042
8110ca40:	21396104 	addi	r4,r4,-6780
8110ca44:	0039883a 	mov	fp,zero
8110ca48:	d9003915 	stw	r4,228(sp)
8110ca4c:	04401e04 	movi	r17,120
8110ca50:	003f8206 	br	8110c85c <__reset+0xfb0ec85c>
8110ca54:	18c03fcc 	andi	r3,r3,255
8110ca58:	1805061e 	bne	r3,zero,8110de74 <___vfprintf_internal_r+0x21c0>
8110ca5c:	883d9126 	beq	r17,zero,8110c0a4 <__reset+0xfb0ec0a4>
8110ca60:	00c00044 	movi	r3,1
8110ca64:	d8c02a15 	stw	r3,168(sp)
8110ca68:	dc401405 	stb	r17,80(sp)
8110ca6c:	d8002785 	stb	zero,158(sp)
8110ca70:	003fec06 	br	8110ca24 <__reset+0xfb0eca24>
8110ca74:	016044b4 	movhi	r5,33042
8110ca78:	29796104 	addi	r5,r5,-6780
8110ca7c:	d9403915 	stw	r5,228(sp)
8110ca80:	d8c02d15 	stw	r3,180(sp)
8110ca84:	1025883a 	mov	r18,r2
8110ca88:	04401e04 	movi	r17,120
8110ca8c:	9d84b03a 	or	r2,r19,r22
8110ca90:	1000fc1e 	bne	r2,zero,8110ce84 <___vfprintf_internal_r+0x11d0>
8110ca94:	0039883a 	mov	fp,zero
8110ca98:	00800084 	movi	r2,2
8110ca9c:	10803fcc 	andi	r2,r2,255
8110caa0:	00c00044 	movi	r3,1
8110caa4:	10c20f26 	beq	r2,r3,8110d2e4 <___vfprintf_internal_r+0x1630>
8110caa8:	00c00084 	movi	r3,2
8110caac:	10fd6326 	beq	r2,r3,8110c03c <__reset+0xfb0ec03c>
8110cab0:	003e2d06 	br	8110c368 <__reset+0xfb0ec368>
8110cab4:	d8c02017 	ldw	r3,128(sp)
8110cab8:	003e9306 	br	8110c508 <__reset+0xfb0ec508>
8110cabc:	00801944 	movi	r2,101
8110cac0:	14407e0e 	bge	r2,r17,8110ccbc <___vfprintf_internal_r+0x1008>
8110cac4:	d9003617 	ldw	r4,216(sp)
8110cac8:	d9403817 	ldw	r5,224(sp)
8110cacc:	000d883a 	mov	r6,zero
8110cad0:	000f883a 	mov	r7,zero
8110cad4:	d8c03c15 	stw	r3,240(sp)
8110cad8:	da003d15 	stw	r8,244(sp)
8110cadc:	11171380 	call	81117138 <__eqdf2>
8110cae0:	d8c03c17 	ldw	r3,240(sp)
8110cae4:	da003d17 	ldw	r8,244(sp)
8110cae8:	1000f71e 	bne	r2,zero,8110cec8 <___vfprintf_internal_r+0x1214>
8110caec:	d8801f17 	ldw	r2,124(sp)
8110caf0:	012044b4 	movhi	r4,33042
8110caf4:	21396804 	addi	r4,r4,-6752
8110caf8:	18c00044 	addi	r3,r3,1
8110cafc:	10800044 	addi	r2,r2,1
8110cb00:	41000015 	stw	r4,0(r8)
8110cb04:	01000044 	movi	r4,1
8110cb08:	41000115 	stw	r4,4(r8)
8110cb0c:	d8c02015 	stw	r3,128(sp)
8110cb10:	d8801f15 	stw	r2,124(sp)
8110cb14:	010001c4 	movi	r4,7
8110cb18:	2082b816 	blt	r4,r2,8110d5fc <___vfprintf_internal_r+0x1948>
8110cb1c:	42000204 	addi	r8,r8,8
8110cb20:	d8802617 	ldw	r2,152(sp)
8110cb24:	d9403317 	ldw	r5,204(sp)
8110cb28:	11400216 	blt	r2,r5,8110cb34 <___vfprintf_internal_r+0xe80>
8110cb2c:	9080004c 	andi	r2,r18,1
8110cb30:	103ed526 	beq	r2,zero,8110c688 <__reset+0xfb0ec688>
8110cb34:	d8803717 	ldw	r2,220(sp)
8110cb38:	d9003417 	ldw	r4,208(sp)
8110cb3c:	d9403717 	ldw	r5,220(sp)
8110cb40:	1887883a 	add	r3,r3,r2
8110cb44:	d8801f17 	ldw	r2,124(sp)
8110cb48:	41000015 	stw	r4,0(r8)
8110cb4c:	41400115 	stw	r5,4(r8)
8110cb50:	10800044 	addi	r2,r2,1
8110cb54:	d8c02015 	stw	r3,128(sp)
8110cb58:	d8801f15 	stw	r2,124(sp)
8110cb5c:	010001c4 	movi	r4,7
8110cb60:	20832916 	blt	r4,r2,8110d808 <___vfprintf_internal_r+0x1b54>
8110cb64:	42000204 	addi	r8,r8,8
8110cb68:	d8803317 	ldw	r2,204(sp)
8110cb6c:	143fffc4 	addi	r16,r2,-1
8110cb70:	043ec50e 	bge	zero,r16,8110c688 <__reset+0xfb0ec688>
8110cb74:	04400404 	movi	r17,16
8110cb78:	d8801f17 	ldw	r2,124(sp)
8110cb7c:	8c00880e 	bge	r17,r16,8110cda0 <___vfprintf_internal_r+0x10ec>
8110cb80:	016044b4 	movhi	r5,33042
8110cb84:	29796884 	addi	r5,r5,-6750
8110cb88:	d9402b15 	stw	r5,172(sp)
8110cb8c:	058001c4 	movi	r22,7
8110cb90:	dcc02c17 	ldw	r19,176(sp)
8110cb94:	00000306 	br	8110cba4 <___vfprintf_internal_r+0xef0>
8110cb98:	42000204 	addi	r8,r8,8
8110cb9c:	843ffc04 	addi	r16,r16,-16
8110cba0:	8c00820e 	bge	r17,r16,8110cdac <___vfprintf_internal_r+0x10f8>
8110cba4:	18c00404 	addi	r3,r3,16
8110cba8:	10800044 	addi	r2,r2,1
8110cbac:	45000015 	stw	r20,0(r8)
8110cbb0:	44400115 	stw	r17,4(r8)
8110cbb4:	d8c02015 	stw	r3,128(sp)
8110cbb8:	d8801f15 	stw	r2,124(sp)
8110cbbc:	b0bff60e 	bge	r22,r2,8110cb98 <__reset+0xfb0ecb98>
8110cbc0:	d9801e04 	addi	r6,sp,120
8110cbc4:	b80b883a 	mov	r5,r23
8110cbc8:	9809883a 	mov	r4,r19
8110cbcc:	11134c00 	call	811134c0 <__sprint_r>
8110cbd0:	103d3a1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110cbd4:	d8c02017 	ldw	r3,128(sp)
8110cbd8:	d8801f17 	ldw	r2,124(sp)
8110cbdc:	da000404 	addi	r8,sp,16
8110cbe0:	003fee06 	br	8110cb9c <__reset+0xfb0ecb9c>
8110cbe4:	d9403117 	ldw	r5,196(sp)
8110cbe8:	d8802a17 	ldw	r2,168(sp)
8110cbec:	28adc83a 	sub	r22,r5,r2
8110cbf0:	05be630e 	bge	zero,r22,8110c580 <__reset+0xfb0ec580>
8110cbf4:	07000404 	movi	fp,16
8110cbf8:	d8801f17 	ldw	r2,124(sp)
8110cbfc:	e5838f0e 	bge	fp,r22,8110da3c <___vfprintf_internal_r+0x1d88>
8110cc00:	016044b4 	movhi	r5,33042
8110cc04:	29796884 	addi	r5,r5,-6750
8110cc08:	dc403015 	stw	r17,192(sp)
8110cc0c:	d9402b15 	stw	r5,172(sp)
8110cc10:	b023883a 	mov	r17,r22
8110cc14:	04c001c4 	movi	r19,7
8110cc18:	a82d883a 	mov	r22,r21
8110cc1c:	902b883a 	mov	r21,r18
8110cc20:	8025883a 	mov	r18,r16
8110cc24:	dc002c17 	ldw	r16,176(sp)
8110cc28:	00000306 	br	8110cc38 <___vfprintf_internal_r+0xf84>
8110cc2c:	8c7ffc04 	addi	r17,r17,-16
8110cc30:	42000204 	addi	r8,r8,8
8110cc34:	e440110e 	bge	fp,r17,8110cc7c <___vfprintf_internal_r+0xfc8>
8110cc38:	18c00404 	addi	r3,r3,16
8110cc3c:	10800044 	addi	r2,r2,1
8110cc40:	45000015 	stw	r20,0(r8)
8110cc44:	47000115 	stw	fp,4(r8)
8110cc48:	d8c02015 	stw	r3,128(sp)
8110cc4c:	d8801f15 	stw	r2,124(sp)
8110cc50:	98bff60e 	bge	r19,r2,8110cc2c <__reset+0xfb0ecc2c>
8110cc54:	d9801e04 	addi	r6,sp,120
8110cc58:	b80b883a 	mov	r5,r23
8110cc5c:	8009883a 	mov	r4,r16
8110cc60:	11134c00 	call	811134c0 <__sprint_r>
8110cc64:	103d151e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110cc68:	8c7ffc04 	addi	r17,r17,-16
8110cc6c:	d8c02017 	ldw	r3,128(sp)
8110cc70:	d8801f17 	ldw	r2,124(sp)
8110cc74:	da000404 	addi	r8,sp,16
8110cc78:	e47fef16 	blt	fp,r17,8110cc38 <__reset+0xfb0ecc38>
8110cc7c:	9021883a 	mov	r16,r18
8110cc80:	a825883a 	mov	r18,r21
8110cc84:	b02b883a 	mov	r21,r22
8110cc88:	882d883a 	mov	r22,r17
8110cc8c:	dc403017 	ldw	r17,192(sp)
8110cc90:	d9002b17 	ldw	r4,172(sp)
8110cc94:	1d87883a 	add	r3,r3,r22
8110cc98:	10800044 	addi	r2,r2,1
8110cc9c:	41000015 	stw	r4,0(r8)
8110cca0:	45800115 	stw	r22,4(r8)
8110cca4:	d8c02015 	stw	r3,128(sp)
8110cca8:	d8801f15 	stw	r2,124(sp)
8110ccac:	010001c4 	movi	r4,7
8110ccb0:	20818e16 	blt	r4,r2,8110d2ec <___vfprintf_internal_r+0x1638>
8110ccb4:	42000204 	addi	r8,r8,8
8110ccb8:	003e3106 	br	8110c580 <__reset+0xfb0ec580>
8110ccbc:	d9403317 	ldw	r5,204(sp)
8110ccc0:	00800044 	movi	r2,1
8110ccc4:	18c00044 	addi	r3,r3,1
8110ccc8:	1141530e 	bge	r2,r5,8110d218 <___vfprintf_internal_r+0x1564>
8110cccc:	dc401f17 	ldw	r17,124(sp)
8110ccd0:	00800044 	movi	r2,1
8110ccd4:	40800115 	stw	r2,4(r8)
8110ccd8:	8c400044 	addi	r17,r17,1
8110ccdc:	44000015 	stw	r16,0(r8)
8110cce0:	d8c02015 	stw	r3,128(sp)
8110cce4:	dc401f15 	stw	r17,124(sp)
8110cce8:	008001c4 	movi	r2,7
8110ccec:	14416b16 	blt	r2,r17,8110d29c <___vfprintf_internal_r+0x15e8>
8110ccf0:	42000204 	addi	r8,r8,8
8110ccf4:	d8803717 	ldw	r2,220(sp)
8110ccf8:	d9003417 	ldw	r4,208(sp)
8110ccfc:	8c400044 	addi	r17,r17,1
8110cd00:	10c7883a 	add	r3,r2,r3
8110cd04:	40800115 	stw	r2,4(r8)
8110cd08:	41000015 	stw	r4,0(r8)
8110cd0c:	d8c02015 	stw	r3,128(sp)
8110cd10:	dc401f15 	stw	r17,124(sp)
8110cd14:	008001c4 	movi	r2,7
8110cd18:	14416916 	blt	r2,r17,8110d2c0 <___vfprintf_internal_r+0x160c>
8110cd1c:	45800204 	addi	r22,r8,8
8110cd20:	d9003617 	ldw	r4,216(sp)
8110cd24:	d9403817 	ldw	r5,224(sp)
8110cd28:	000d883a 	mov	r6,zero
8110cd2c:	000f883a 	mov	r7,zero
8110cd30:	d8c03c15 	stw	r3,240(sp)
8110cd34:	11171380 	call	81117138 <__eqdf2>
8110cd38:	d8c03c17 	ldw	r3,240(sp)
8110cd3c:	1000bc26 	beq	r2,zero,8110d030 <___vfprintf_internal_r+0x137c>
8110cd40:	d9403317 	ldw	r5,204(sp)
8110cd44:	84000044 	addi	r16,r16,1
8110cd48:	8c400044 	addi	r17,r17,1
8110cd4c:	28bfffc4 	addi	r2,r5,-1
8110cd50:	1887883a 	add	r3,r3,r2
8110cd54:	b0800115 	stw	r2,4(r22)
8110cd58:	b4000015 	stw	r16,0(r22)
8110cd5c:	d8c02015 	stw	r3,128(sp)
8110cd60:	dc401f15 	stw	r17,124(sp)
8110cd64:	008001c4 	movi	r2,7
8110cd68:	14414316 	blt	r2,r17,8110d278 <___vfprintf_internal_r+0x15c4>
8110cd6c:	b5800204 	addi	r22,r22,8
8110cd70:	d9003a17 	ldw	r4,232(sp)
8110cd74:	df0022c4 	addi	fp,sp,139
8110cd78:	8c400044 	addi	r17,r17,1
8110cd7c:	20c7883a 	add	r3,r4,r3
8110cd80:	b7000015 	stw	fp,0(r22)
8110cd84:	b1000115 	stw	r4,4(r22)
8110cd88:	d8c02015 	stw	r3,128(sp)
8110cd8c:	dc401f15 	stw	r17,124(sp)
8110cd90:	008001c4 	movi	r2,7
8110cd94:	14400e16 	blt	r2,r17,8110cdd0 <___vfprintf_internal_r+0x111c>
8110cd98:	b2000204 	addi	r8,r22,8
8110cd9c:	003e3a06 	br	8110c688 <__reset+0xfb0ec688>
8110cda0:	012044b4 	movhi	r4,33042
8110cda4:	21396884 	addi	r4,r4,-6750
8110cda8:	d9002b15 	stw	r4,172(sp)
8110cdac:	d9002b17 	ldw	r4,172(sp)
8110cdb0:	1c07883a 	add	r3,r3,r16
8110cdb4:	44000115 	stw	r16,4(r8)
8110cdb8:	41000015 	stw	r4,0(r8)
8110cdbc:	10800044 	addi	r2,r2,1
8110cdc0:	d8c02015 	stw	r3,128(sp)
8110cdc4:	d8801f15 	stw	r2,124(sp)
8110cdc8:	010001c4 	movi	r4,7
8110cdcc:	20be2d0e 	bge	r4,r2,8110c684 <__reset+0xfb0ec684>
8110cdd0:	d9002c17 	ldw	r4,176(sp)
8110cdd4:	d9801e04 	addi	r6,sp,120
8110cdd8:	b80b883a 	mov	r5,r23
8110cddc:	11134c00 	call	811134c0 <__sprint_r>
8110cde0:	103cb61e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110cde4:	d8c02017 	ldw	r3,128(sp)
8110cde8:	da000404 	addi	r8,sp,16
8110cdec:	003e2606 	br	8110c688 <__reset+0xfb0ec688>
8110cdf0:	d9002c17 	ldw	r4,176(sp)
8110cdf4:	d9801e04 	addi	r6,sp,120
8110cdf8:	b80b883a 	mov	r5,r23
8110cdfc:	11134c00 	call	811134c0 <__sprint_r>
8110ce00:	103e5d26 	beq	r2,zero,8110c778 <__reset+0xfb0ec778>
8110ce04:	003cad06 	br	8110c0bc <__reset+0xfb0ec0bc>
8110ce08:	d9002c17 	ldw	r4,176(sp)
8110ce0c:	d9801e04 	addi	r6,sp,120
8110ce10:	b80b883a 	mov	r5,r23
8110ce14:	11134c00 	call	811134c0 <__sprint_r>
8110ce18:	103ca81e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110ce1c:	d8c02017 	ldw	r3,128(sp)
8110ce20:	da000404 	addi	r8,sp,16
8110ce24:	003e0b06 	br	8110c654 <__reset+0xfb0ec654>
8110ce28:	d9002c17 	ldw	r4,176(sp)
8110ce2c:	d9801e04 	addi	r6,sp,120
8110ce30:	b80b883a 	mov	r5,r23
8110ce34:	11134c00 	call	811134c0 <__sprint_r>
8110ce38:	103ca01e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110ce3c:	d8c02017 	ldw	r3,128(sp)
8110ce40:	da000404 	addi	r8,sp,16
8110ce44:	003dbd06 	br	8110c53c <__reset+0xfb0ec53c>
8110ce48:	d9002c17 	ldw	r4,176(sp)
8110ce4c:	d9801e04 	addi	r6,sp,120
8110ce50:	b80b883a 	mov	r5,r23
8110ce54:	11134c00 	call	811134c0 <__sprint_r>
8110ce58:	103c981e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110ce5c:	d8c02017 	ldw	r3,128(sp)
8110ce60:	da000404 	addi	r8,sp,16
8110ce64:	003dc306 	br	8110c574 <__reset+0xfb0ec574>
8110ce68:	d8802917 	ldw	r2,164(sp)
8110ce6c:	d8002785 	stb	zero,158(sp)
8110ce70:	103f0616 	blt	r2,zero,8110ca8c <__reset+0xfb0eca8c>
8110ce74:	00ffdfc4 	movi	r3,-129
8110ce78:	9d84b03a 	or	r2,r19,r22
8110ce7c:	90e4703a 	and	r18,r18,r3
8110ce80:	103c6b26 	beq	r2,zero,8110c030 <__reset+0xfb0ec030>
8110ce84:	0039883a 	mov	fp,zero
8110ce88:	003e7406 	br	8110c85c <__reset+0xfb0ec85c>
8110ce8c:	9080040c 	andi	r2,r18,16
8110ce90:	1001b326 	beq	r2,zero,8110d560 <___vfprintf_internal_r+0x18ac>
8110ce94:	d9002d17 	ldw	r4,180(sp)
8110ce98:	d9402917 	ldw	r5,164(sp)
8110ce9c:	d8002785 	stb	zero,158(sp)
8110cea0:	20800104 	addi	r2,r4,4
8110cea4:	24c00017 	ldw	r19,0(r4)
8110cea8:	002d883a 	mov	r22,zero
8110ceac:	2801b516 	blt	r5,zero,8110d584 <___vfprintf_internal_r+0x18d0>
8110ceb0:	00ffdfc4 	movi	r3,-129
8110ceb4:	d8802d15 	stw	r2,180(sp)
8110ceb8:	90e4703a 	and	r18,r18,r3
8110cebc:	983d2726 	beq	r19,zero,8110c35c <__reset+0xfb0ec35c>
8110cec0:	0039883a 	mov	fp,zero
8110cec4:	003d2a06 	br	8110c370 <__reset+0xfb0ec370>
8110cec8:	dc402617 	ldw	r17,152(sp)
8110cecc:	0441d30e 	bge	zero,r17,8110d61c <___vfprintf_internal_r+0x1968>
8110ced0:	dc403217 	ldw	r17,200(sp)
8110ced4:	d8803317 	ldw	r2,204(sp)
8110ced8:	1440010e 	bge	r2,r17,8110cee0 <___vfprintf_internal_r+0x122c>
8110cedc:	1023883a 	mov	r17,r2
8110cee0:	04400a0e 	bge	zero,r17,8110cf0c <___vfprintf_internal_r+0x1258>
8110cee4:	d8801f17 	ldw	r2,124(sp)
8110cee8:	1c47883a 	add	r3,r3,r17
8110ceec:	44000015 	stw	r16,0(r8)
8110cef0:	10800044 	addi	r2,r2,1
8110cef4:	44400115 	stw	r17,4(r8)
8110cef8:	d8c02015 	stw	r3,128(sp)
8110cefc:	d8801f15 	stw	r2,124(sp)
8110cf00:	010001c4 	movi	r4,7
8110cf04:	20826516 	blt	r4,r2,8110d89c <___vfprintf_internal_r+0x1be8>
8110cf08:	42000204 	addi	r8,r8,8
8110cf0c:	88026116 	blt	r17,zero,8110d894 <___vfprintf_internal_r+0x1be0>
8110cf10:	d9003217 	ldw	r4,200(sp)
8110cf14:	2463c83a 	sub	r17,r4,r17
8110cf18:	04407b0e 	bge	zero,r17,8110d108 <___vfprintf_internal_r+0x1454>
8110cf1c:	05800404 	movi	r22,16
8110cf20:	d8801f17 	ldw	r2,124(sp)
8110cf24:	b4419d0e 	bge	r22,r17,8110d59c <___vfprintf_internal_r+0x18e8>
8110cf28:	012044b4 	movhi	r4,33042
8110cf2c:	21396884 	addi	r4,r4,-6750
8110cf30:	d9002b15 	stw	r4,172(sp)
8110cf34:	070001c4 	movi	fp,7
8110cf38:	dcc02c17 	ldw	r19,176(sp)
8110cf3c:	00000306 	br	8110cf4c <___vfprintf_internal_r+0x1298>
8110cf40:	42000204 	addi	r8,r8,8
8110cf44:	8c7ffc04 	addi	r17,r17,-16
8110cf48:	b441970e 	bge	r22,r17,8110d5a8 <___vfprintf_internal_r+0x18f4>
8110cf4c:	18c00404 	addi	r3,r3,16
8110cf50:	10800044 	addi	r2,r2,1
8110cf54:	45000015 	stw	r20,0(r8)
8110cf58:	45800115 	stw	r22,4(r8)
8110cf5c:	d8c02015 	stw	r3,128(sp)
8110cf60:	d8801f15 	stw	r2,124(sp)
8110cf64:	e0bff60e 	bge	fp,r2,8110cf40 <__reset+0xfb0ecf40>
8110cf68:	d9801e04 	addi	r6,sp,120
8110cf6c:	b80b883a 	mov	r5,r23
8110cf70:	9809883a 	mov	r4,r19
8110cf74:	11134c00 	call	811134c0 <__sprint_r>
8110cf78:	103c501e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110cf7c:	d8c02017 	ldw	r3,128(sp)
8110cf80:	d8801f17 	ldw	r2,124(sp)
8110cf84:	da000404 	addi	r8,sp,16
8110cf88:	003fee06 	br	8110cf44 <__reset+0xfb0ecf44>
8110cf8c:	d9002c17 	ldw	r4,176(sp)
8110cf90:	d9801e04 	addi	r6,sp,120
8110cf94:	b80b883a 	mov	r5,r23
8110cf98:	11134c00 	call	811134c0 <__sprint_r>
8110cf9c:	103c471e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110cfa0:	d8c02017 	ldw	r3,128(sp)
8110cfa4:	df002787 	ldb	fp,158(sp)
8110cfa8:	da000404 	addi	r8,sp,16
8110cfac:	003d5606 	br	8110c508 <__reset+0xfb0ec508>
8110cfb0:	9080040c 	andi	r2,r18,16
8110cfb4:	10016126 	beq	r2,zero,8110d53c <___vfprintf_internal_r+0x1888>
8110cfb8:	d8802d17 	ldw	r2,180(sp)
8110cfbc:	14c00017 	ldw	r19,0(r2)
8110cfc0:	10800104 	addi	r2,r2,4
8110cfc4:	d8802d15 	stw	r2,180(sp)
8110cfc8:	982dd7fa 	srai	r22,r19,31
8110cfcc:	b005883a 	mov	r2,r22
8110cfd0:	003c8206 	br	8110c1dc <__reset+0xfb0ec1dc>
8110cfd4:	9080040c 	andi	r2,r18,16
8110cfd8:	10003526 	beq	r2,zero,8110d0b0 <___vfprintf_internal_r+0x13fc>
8110cfdc:	d9402d17 	ldw	r5,180(sp)
8110cfe0:	d8c02917 	ldw	r3,164(sp)
8110cfe4:	d8002785 	stb	zero,158(sp)
8110cfe8:	28800104 	addi	r2,r5,4
8110cfec:	2cc00017 	ldw	r19,0(r5)
8110cff0:	002d883a 	mov	r22,zero
8110cff4:	18003716 	blt	r3,zero,8110d0d4 <___vfprintf_internal_r+0x1420>
8110cff8:	00ffdfc4 	movi	r3,-129
8110cffc:	d8802d15 	stw	r2,180(sp)
8110d000:	90e4703a 	and	r18,r18,r3
8110d004:	0039883a 	mov	fp,zero
8110d008:	983df326 	beq	r19,zero,8110c7d8 <__reset+0xfb0ec7d8>
8110d00c:	00800244 	movi	r2,9
8110d010:	14fc7b36 	bltu	r2,r19,8110c200 <__reset+0xfb0ec200>
8110d014:	d8c02817 	ldw	r3,160(sp)
8110d018:	dc001dc4 	addi	r16,sp,119
8110d01c:	9cc00c04 	addi	r19,r19,48
8110d020:	1c07c83a 	sub	r3,r3,r16
8110d024:	dcc01dc5 	stb	r19,119(sp)
8110d028:	d8c02e15 	stw	r3,184(sp)
8110d02c:	003ce806 	br	8110c3d0 <__reset+0xfb0ec3d0>
8110d030:	d8803317 	ldw	r2,204(sp)
8110d034:	143fffc4 	addi	r16,r2,-1
8110d038:	043f4d0e 	bge	zero,r16,8110cd70 <__reset+0xfb0ecd70>
8110d03c:	07000404 	movi	fp,16
8110d040:	e400810e 	bge	fp,r16,8110d248 <___vfprintf_internal_r+0x1594>
8110d044:	016044b4 	movhi	r5,33042
8110d048:	29796884 	addi	r5,r5,-6750
8110d04c:	d9402b15 	stw	r5,172(sp)
8110d050:	01c001c4 	movi	r7,7
8110d054:	dcc02c17 	ldw	r19,176(sp)
8110d058:	00000306 	br	8110d068 <___vfprintf_internal_r+0x13b4>
8110d05c:	b5800204 	addi	r22,r22,8
8110d060:	843ffc04 	addi	r16,r16,-16
8110d064:	e4007b0e 	bge	fp,r16,8110d254 <___vfprintf_internal_r+0x15a0>
8110d068:	18c00404 	addi	r3,r3,16
8110d06c:	8c400044 	addi	r17,r17,1
8110d070:	b5000015 	stw	r20,0(r22)
8110d074:	b7000115 	stw	fp,4(r22)
8110d078:	d8c02015 	stw	r3,128(sp)
8110d07c:	dc401f15 	stw	r17,124(sp)
8110d080:	3c7ff60e 	bge	r7,r17,8110d05c <__reset+0xfb0ed05c>
8110d084:	d9801e04 	addi	r6,sp,120
8110d088:	b80b883a 	mov	r5,r23
8110d08c:	9809883a 	mov	r4,r19
8110d090:	d9c03c15 	stw	r7,240(sp)
8110d094:	11134c00 	call	811134c0 <__sprint_r>
8110d098:	d9c03c17 	ldw	r7,240(sp)
8110d09c:	103c071e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d0a0:	d8c02017 	ldw	r3,128(sp)
8110d0a4:	dc401f17 	ldw	r17,124(sp)
8110d0a8:	dd800404 	addi	r22,sp,16
8110d0ac:	003fec06 	br	8110d060 <__reset+0xfb0ed060>
8110d0b0:	9080100c 	andi	r2,r18,64
8110d0b4:	d8002785 	stb	zero,158(sp)
8110d0b8:	10010e26 	beq	r2,zero,8110d4f4 <___vfprintf_internal_r+0x1840>
8110d0bc:	d9002d17 	ldw	r4,180(sp)
8110d0c0:	d9402917 	ldw	r5,164(sp)
8110d0c4:	002d883a 	mov	r22,zero
8110d0c8:	20800104 	addi	r2,r4,4
8110d0cc:	24c0000b 	ldhu	r19,0(r4)
8110d0d0:	283fc90e 	bge	r5,zero,8110cff8 <__reset+0xfb0ecff8>
8110d0d4:	d8802d15 	stw	r2,180(sp)
8110d0d8:	0039883a 	mov	fp,zero
8110d0dc:	9d84b03a 	or	r2,r19,r22
8110d0e0:	103c461e 	bne	r2,zero,8110c1fc <__reset+0xfb0ec1fc>
8110d0e4:	00800044 	movi	r2,1
8110d0e8:	003e6c06 	br	8110ca9c <__reset+0xfb0eca9c>
8110d0ec:	d9002c17 	ldw	r4,176(sp)
8110d0f0:	d9801e04 	addi	r6,sp,120
8110d0f4:	b80b883a 	mov	r5,r23
8110d0f8:	11134c00 	call	811134c0 <__sprint_r>
8110d0fc:	103bef1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d100:	d8c02017 	ldw	r3,128(sp)
8110d104:	da000404 	addi	r8,sp,16
8110d108:	d9003217 	ldw	r4,200(sp)
8110d10c:	d8802617 	ldw	r2,152(sp)
8110d110:	d9403317 	ldw	r5,204(sp)
8110d114:	8123883a 	add	r17,r16,r4
8110d118:	11400216 	blt	r2,r5,8110d124 <___vfprintf_internal_r+0x1470>
8110d11c:	9100004c 	andi	r4,r18,1
8110d120:	20000d26 	beq	r4,zero,8110d158 <___vfprintf_internal_r+0x14a4>
8110d124:	d9003717 	ldw	r4,220(sp)
8110d128:	d9403417 	ldw	r5,208(sp)
8110d12c:	1907883a 	add	r3,r3,r4
8110d130:	d9001f17 	ldw	r4,124(sp)
8110d134:	41400015 	stw	r5,0(r8)
8110d138:	d9403717 	ldw	r5,220(sp)
8110d13c:	21000044 	addi	r4,r4,1
8110d140:	d8c02015 	stw	r3,128(sp)
8110d144:	41400115 	stw	r5,4(r8)
8110d148:	d9001f15 	stw	r4,124(sp)
8110d14c:	014001c4 	movi	r5,7
8110d150:	2901e816 	blt	r5,r4,8110d8f4 <___vfprintf_internal_r+0x1c40>
8110d154:	42000204 	addi	r8,r8,8
8110d158:	d9003317 	ldw	r4,204(sp)
8110d15c:	8121883a 	add	r16,r16,r4
8110d160:	2085c83a 	sub	r2,r4,r2
8110d164:	8461c83a 	sub	r16,r16,r17
8110d168:	1400010e 	bge	r2,r16,8110d170 <___vfprintf_internal_r+0x14bc>
8110d16c:	1021883a 	mov	r16,r2
8110d170:	04000a0e 	bge	zero,r16,8110d19c <___vfprintf_internal_r+0x14e8>
8110d174:	d9001f17 	ldw	r4,124(sp)
8110d178:	1c07883a 	add	r3,r3,r16
8110d17c:	44400015 	stw	r17,0(r8)
8110d180:	21000044 	addi	r4,r4,1
8110d184:	44000115 	stw	r16,4(r8)
8110d188:	d8c02015 	stw	r3,128(sp)
8110d18c:	d9001f15 	stw	r4,124(sp)
8110d190:	014001c4 	movi	r5,7
8110d194:	2901fb16 	blt	r5,r4,8110d984 <___vfprintf_internal_r+0x1cd0>
8110d198:	42000204 	addi	r8,r8,8
8110d19c:	8001f716 	blt	r16,zero,8110d97c <___vfprintf_internal_r+0x1cc8>
8110d1a0:	1421c83a 	sub	r16,r2,r16
8110d1a4:	043d380e 	bge	zero,r16,8110c688 <__reset+0xfb0ec688>
8110d1a8:	04400404 	movi	r17,16
8110d1ac:	d8801f17 	ldw	r2,124(sp)
8110d1b0:	8c3efb0e 	bge	r17,r16,8110cda0 <__reset+0xfb0ecda0>
8110d1b4:	016044b4 	movhi	r5,33042
8110d1b8:	29796884 	addi	r5,r5,-6750
8110d1bc:	d9402b15 	stw	r5,172(sp)
8110d1c0:	058001c4 	movi	r22,7
8110d1c4:	dcc02c17 	ldw	r19,176(sp)
8110d1c8:	00000306 	br	8110d1d8 <___vfprintf_internal_r+0x1524>
8110d1cc:	42000204 	addi	r8,r8,8
8110d1d0:	843ffc04 	addi	r16,r16,-16
8110d1d4:	8c3ef50e 	bge	r17,r16,8110cdac <__reset+0xfb0ecdac>
8110d1d8:	18c00404 	addi	r3,r3,16
8110d1dc:	10800044 	addi	r2,r2,1
8110d1e0:	45000015 	stw	r20,0(r8)
8110d1e4:	44400115 	stw	r17,4(r8)
8110d1e8:	d8c02015 	stw	r3,128(sp)
8110d1ec:	d8801f15 	stw	r2,124(sp)
8110d1f0:	b0bff60e 	bge	r22,r2,8110d1cc <__reset+0xfb0ed1cc>
8110d1f4:	d9801e04 	addi	r6,sp,120
8110d1f8:	b80b883a 	mov	r5,r23
8110d1fc:	9809883a 	mov	r4,r19
8110d200:	11134c00 	call	811134c0 <__sprint_r>
8110d204:	103bad1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d208:	d8c02017 	ldw	r3,128(sp)
8110d20c:	d8801f17 	ldw	r2,124(sp)
8110d210:	da000404 	addi	r8,sp,16
8110d214:	003fee06 	br	8110d1d0 <__reset+0xfb0ed1d0>
8110d218:	9088703a 	and	r4,r18,r2
8110d21c:	203eab1e 	bne	r4,zero,8110cccc <__reset+0xfb0ecccc>
8110d220:	dc401f17 	ldw	r17,124(sp)
8110d224:	40800115 	stw	r2,4(r8)
8110d228:	44000015 	stw	r16,0(r8)
8110d22c:	8c400044 	addi	r17,r17,1
8110d230:	d8c02015 	stw	r3,128(sp)
8110d234:	dc401f15 	stw	r17,124(sp)
8110d238:	008001c4 	movi	r2,7
8110d23c:	14400e16 	blt	r2,r17,8110d278 <___vfprintf_internal_r+0x15c4>
8110d240:	45800204 	addi	r22,r8,8
8110d244:	003eca06 	br	8110cd70 <__reset+0xfb0ecd70>
8110d248:	012044b4 	movhi	r4,33042
8110d24c:	21396884 	addi	r4,r4,-6750
8110d250:	d9002b15 	stw	r4,172(sp)
8110d254:	d8802b17 	ldw	r2,172(sp)
8110d258:	1c07883a 	add	r3,r3,r16
8110d25c:	8c400044 	addi	r17,r17,1
8110d260:	b0800015 	stw	r2,0(r22)
8110d264:	b4000115 	stw	r16,4(r22)
8110d268:	d8c02015 	stw	r3,128(sp)
8110d26c:	dc401f15 	stw	r17,124(sp)
8110d270:	008001c4 	movi	r2,7
8110d274:	147ebd0e 	bge	r2,r17,8110cd6c <__reset+0xfb0ecd6c>
8110d278:	d9002c17 	ldw	r4,176(sp)
8110d27c:	d9801e04 	addi	r6,sp,120
8110d280:	b80b883a 	mov	r5,r23
8110d284:	11134c00 	call	811134c0 <__sprint_r>
8110d288:	103b8c1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d28c:	d8c02017 	ldw	r3,128(sp)
8110d290:	dc401f17 	ldw	r17,124(sp)
8110d294:	dd800404 	addi	r22,sp,16
8110d298:	003eb506 	br	8110cd70 <__reset+0xfb0ecd70>
8110d29c:	d9002c17 	ldw	r4,176(sp)
8110d2a0:	d9801e04 	addi	r6,sp,120
8110d2a4:	b80b883a 	mov	r5,r23
8110d2a8:	11134c00 	call	811134c0 <__sprint_r>
8110d2ac:	103b831e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d2b0:	d8c02017 	ldw	r3,128(sp)
8110d2b4:	dc401f17 	ldw	r17,124(sp)
8110d2b8:	da000404 	addi	r8,sp,16
8110d2bc:	003e8d06 	br	8110ccf4 <__reset+0xfb0eccf4>
8110d2c0:	d9002c17 	ldw	r4,176(sp)
8110d2c4:	d9801e04 	addi	r6,sp,120
8110d2c8:	b80b883a 	mov	r5,r23
8110d2cc:	11134c00 	call	811134c0 <__sprint_r>
8110d2d0:	103b7a1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d2d4:	d8c02017 	ldw	r3,128(sp)
8110d2d8:	dc401f17 	ldw	r17,124(sp)
8110d2dc:	dd800404 	addi	r22,sp,16
8110d2e0:	003e8f06 	br	8110cd20 <__reset+0xfb0ecd20>
8110d2e4:	0027883a 	mov	r19,zero
8110d2e8:	003f4a06 	br	8110d014 <__reset+0xfb0ed014>
8110d2ec:	d9002c17 	ldw	r4,176(sp)
8110d2f0:	d9801e04 	addi	r6,sp,120
8110d2f4:	b80b883a 	mov	r5,r23
8110d2f8:	11134c00 	call	811134c0 <__sprint_r>
8110d2fc:	103b6f1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d300:	d8c02017 	ldw	r3,128(sp)
8110d304:	da000404 	addi	r8,sp,16
8110d308:	003c9d06 	br	8110c580 <__reset+0xfb0ec580>
8110d30c:	04e7c83a 	sub	r19,zero,r19
8110d310:	9804c03a 	cmpne	r2,r19,zero
8110d314:	05adc83a 	sub	r22,zero,r22
8110d318:	b0adc83a 	sub	r22,r22,r2
8110d31c:	d8802917 	ldw	r2,164(sp)
8110d320:	07000b44 	movi	fp,45
8110d324:	df002785 	stb	fp,158(sp)
8110d328:	10017b16 	blt	r2,zero,8110d918 <___vfprintf_internal_r+0x1c64>
8110d32c:	00bfdfc4 	movi	r2,-129
8110d330:	90a4703a 	and	r18,r18,r2
8110d334:	003bb106 	br	8110c1fc <__reset+0xfb0ec1fc>
8110d338:	d9003617 	ldw	r4,216(sp)
8110d33c:	d9403817 	ldw	r5,224(sp)
8110d340:	da003d15 	stw	r8,244(sp)
8110d344:	11130e40 	call	811130e4 <__fpclassifyd>
8110d348:	da003d17 	ldw	r8,244(sp)
8110d34c:	1000f026 	beq	r2,zero,8110d710 <___vfprintf_internal_r+0x1a5c>
8110d350:	d9002917 	ldw	r4,164(sp)
8110d354:	05bff7c4 	movi	r22,-33
8110d358:	00bfffc4 	movi	r2,-1
8110d35c:	8dac703a 	and	r22,r17,r22
8110d360:	20820026 	beq	r4,r2,8110db64 <___vfprintf_internal_r+0x1eb0>
8110d364:	008011c4 	movi	r2,71
8110d368:	b081f726 	beq	r22,r2,8110db48 <___vfprintf_internal_r+0x1e94>
8110d36c:	d9003817 	ldw	r4,224(sp)
8110d370:	90c04014 	ori	r3,r18,256
8110d374:	d8c02b15 	stw	r3,172(sp)
8110d378:	20021516 	blt	r4,zero,8110dbd0 <___vfprintf_internal_r+0x1f1c>
8110d37c:	dcc03817 	ldw	r19,224(sp)
8110d380:	d8002a05 	stb	zero,168(sp)
8110d384:	00801984 	movi	r2,102
8110d388:	8881f926 	beq	r17,r2,8110db70 <___vfprintf_internal_r+0x1ebc>
8110d38c:	00801184 	movi	r2,70
8110d390:	88821c26 	beq	r17,r2,8110dc04 <___vfprintf_internal_r+0x1f50>
8110d394:	00801144 	movi	r2,69
8110d398:	b081ef26 	beq	r22,r2,8110db58 <___vfprintf_internal_r+0x1ea4>
8110d39c:	d8c02917 	ldw	r3,164(sp)
8110d3a0:	d8802104 	addi	r2,sp,132
8110d3a4:	d8800315 	stw	r2,12(sp)
8110d3a8:	d9403617 	ldw	r5,216(sp)
8110d3ac:	d8802504 	addi	r2,sp,148
8110d3b0:	d9002c17 	ldw	r4,176(sp)
8110d3b4:	d8800215 	stw	r2,8(sp)
8110d3b8:	d8802604 	addi	r2,sp,152
8110d3bc:	d8c00015 	stw	r3,0(sp)
8110d3c0:	d8800115 	stw	r2,4(sp)
8110d3c4:	01c00084 	movi	r7,2
8110d3c8:	980d883a 	mov	r6,r19
8110d3cc:	d8c03c15 	stw	r3,240(sp)
8110d3d0:	da003d15 	stw	r8,244(sp)
8110d3d4:	110e2d80 	call	8110e2d8 <_dtoa_r>
8110d3d8:	1021883a 	mov	r16,r2
8110d3dc:	008019c4 	movi	r2,103
8110d3e0:	d8c03c17 	ldw	r3,240(sp)
8110d3e4:	da003d17 	ldw	r8,244(sp)
8110d3e8:	88817126 	beq	r17,r2,8110d9b0 <___vfprintf_internal_r+0x1cfc>
8110d3ec:	008011c4 	movi	r2,71
8110d3f0:	88829226 	beq	r17,r2,8110de3c <___vfprintf_internal_r+0x2188>
8110d3f4:	80f9883a 	add	fp,r16,r3
8110d3f8:	d9003617 	ldw	r4,216(sp)
8110d3fc:	000d883a 	mov	r6,zero
8110d400:	000f883a 	mov	r7,zero
8110d404:	980b883a 	mov	r5,r19
8110d408:	da003d15 	stw	r8,244(sp)
8110d40c:	11171380 	call	81117138 <__eqdf2>
8110d410:	da003d17 	ldw	r8,244(sp)
8110d414:	10018d26 	beq	r2,zero,8110da4c <___vfprintf_internal_r+0x1d98>
8110d418:	d8802117 	ldw	r2,132(sp)
8110d41c:	1700062e 	bgeu	r2,fp,8110d438 <___vfprintf_internal_r+0x1784>
8110d420:	01000c04 	movi	r4,48
8110d424:	10c00044 	addi	r3,r2,1
8110d428:	d8c02115 	stw	r3,132(sp)
8110d42c:	11000005 	stb	r4,0(r2)
8110d430:	d8802117 	ldw	r2,132(sp)
8110d434:	173ffb36 	bltu	r2,fp,8110d424 <__reset+0xfb0ed424>
8110d438:	1405c83a 	sub	r2,r2,r16
8110d43c:	d8803315 	stw	r2,204(sp)
8110d440:	008011c4 	movi	r2,71
8110d444:	b0817626 	beq	r22,r2,8110da20 <___vfprintf_internal_r+0x1d6c>
8110d448:	00801944 	movi	r2,101
8110d44c:	1442810e 	bge	r2,r17,8110de54 <___vfprintf_internal_r+0x21a0>
8110d450:	d8c02617 	ldw	r3,152(sp)
8110d454:	00801984 	movi	r2,102
8110d458:	d8c03215 	stw	r3,200(sp)
8110d45c:	8881fe26 	beq	r17,r2,8110dc58 <___vfprintf_internal_r+0x1fa4>
8110d460:	d8c03217 	ldw	r3,200(sp)
8110d464:	d9003317 	ldw	r4,204(sp)
8110d468:	1901dd16 	blt	r3,r4,8110dbe0 <___vfprintf_internal_r+0x1f2c>
8110d46c:	9480004c 	andi	r18,r18,1
8110d470:	90022b1e 	bne	r18,zero,8110dd20 <___vfprintf_internal_r+0x206c>
8110d474:	1805883a 	mov	r2,r3
8110d478:	18028016 	blt	r3,zero,8110de7c <___vfprintf_internal_r+0x21c8>
8110d47c:	d8c03217 	ldw	r3,200(sp)
8110d480:	044019c4 	movi	r17,103
8110d484:	d8c02e15 	stw	r3,184(sp)
8110d488:	df002a07 	ldb	fp,168(sp)
8110d48c:	e001531e 	bne	fp,zero,8110d9dc <___vfprintf_internal_r+0x1d28>
8110d490:	df002783 	ldbu	fp,158(sp)
8110d494:	d8802a15 	stw	r2,168(sp)
8110d498:	dc802b17 	ldw	r18,172(sp)
8110d49c:	d8002915 	stw	zero,164(sp)
8110d4a0:	003bd106 	br	8110c3e8 <__reset+0xfb0ec3e8>
8110d4a4:	d8802d17 	ldw	r2,180(sp)
8110d4a8:	d8c02d17 	ldw	r3,180(sp)
8110d4ac:	d9002d17 	ldw	r4,180(sp)
8110d4b0:	10800017 	ldw	r2,0(r2)
8110d4b4:	18c00117 	ldw	r3,4(r3)
8110d4b8:	21000204 	addi	r4,r4,8
8110d4bc:	d8803615 	stw	r2,216(sp)
8110d4c0:	d8c03815 	stw	r3,224(sp)
8110d4c4:	d9002d15 	stw	r4,180(sp)
8110d4c8:	003b7506 	br	8110c2a0 <__reset+0xfb0ec2a0>
8110d4cc:	ac400007 	ldb	r17,0(r21)
8110d4d0:	003a5906 	br	8110be38 <__reset+0xfb0ebe38>
8110d4d4:	9080100c 	andi	r2,r18,64
8110d4d8:	1000a826 	beq	r2,zero,8110d77c <___vfprintf_internal_r+0x1ac8>
8110d4dc:	d9002d17 	ldw	r4,180(sp)
8110d4e0:	002d883a 	mov	r22,zero
8110d4e4:	24c0000b 	ldhu	r19,0(r4)
8110d4e8:	21000104 	addi	r4,r4,4
8110d4ec:	d9002d15 	stw	r4,180(sp)
8110d4f0:	003ccb06 	br	8110c820 <__reset+0xfb0ec820>
8110d4f4:	d8c02d17 	ldw	r3,180(sp)
8110d4f8:	d9002917 	ldw	r4,164(sp)
8110d4fc:	002d883a 	mov	r22,zero
8110d500:	18800104 	addi	r2,r3,4
8110d504:	1cc00017 	ldw	r19,0(r3)
8110d508:	203ebb0e 	bge	r4,zero,8110cff8 <__reset+0xfb0ecff8>
8110d50c:	003ef106 	br	8110d0d4 <__reset+0xfb0ed0d4>
8110d510:	9080040c 	andi	r2,r18,16
8110d514:	1000921e 	bne	r2,zero,8110d760 <___vfprintf_internal_r+0x1aac>
8110d518:	9480100c 	andi	r18,r18,64
8110d51c:	90013926 	beq	r18,zero,8110da04 <___vfprintf_internal_r+0x1d50>
8110d520:	d9002d17 	ldw	r4,180(sp)
8110d524:	d9402f17 	ldw	r5,188(sp)
8110d528:	20800017 	ldw	r2,0(r4)
8110d52c:	21000104 	addi	r4,r4,4
8110d530:	d9002d15 	stw	r4,180(sp)
8110d534:	1140000d 	sth	r5,0(r2)
8110d538:	003a1606 	br	8110bd94 <__reset+0xfb0ebd94>
8110d53c:	9080100c 	andi	r2,r18,64
8110d540:	10008026 	beq	r2,zero,8110d744 <___vfprintf_internal_r+0x1a90>
8110d544:	d8c02d17 	ldw	r3,180(sp)
8110d548:	1cc0000f 	ldh	r19,0(r3)
8110d54c:	18c00104 	addi	r3,r3,4
8110d550:	d8c02d15 	stw	r3,180(sp)
8110d554:	982dd7fa 	srai	r22,r19,31
8110d558:	b005883a 	mov	r2,r22
8110d55c:	003b1f06 	br	8110c1dc <__reset+0xfb0ec1dc>
8110d560:	9080100c 	andi	r2,r18,64
8110d564:	d8002785 	stb	zero,158(sp)
8110d568:	10008a1e 	bne	r2,zero,8110d794 <___vfprintf_internal_r+0x1ae0>
8110d56c:	d9402d17 	ldw	r5,180(sp)
8110d570:	d8c02917 	ldw	r3,164(sp)
8110d574:	002d883a 	mov	r22,zero
8110d578:	28800104 	addi	r2,r5,4
8110d57c:	2cc00017 	ldw	r19,0(r5)
8110d580:	183e4b0e 	bge	r3,zero,8110ceb0 <__reset+0xfb0eceb0>
8110d584:	9d86b03a 	or	r3,r19,r22
8110d588:	d8802d15 	stw	r2,180(sp)
8110d58c:	183e4c1e 	bne	r3,zero,8110cec0 <__reset+0xfb0ecec0>
8110d590:	0039883a 	mov	fp,zero
8110d594:	0005883a 	mov	r2,zero
8110d598:	003d4006 	br	8110ca9c <__reset+0xfb0eca9c>
8110d59c:	016044b4 	movhi	r5,33042
8110d5a0:	29796884 	addi	r5,r5,-6750
8110d5a4:	d9402b15 	stw	r5,172(sp)
8110d5a8:	d9402b17 	ldw	r5,172(sp)
8110d5ac:	1c47883a 	add	r3,r3,r17
8110d5b0:	10800044 	addi	r2,r2,1
8110d5b4:	41400015 	stw	r5,0(r8)
8110d5b8:	44400115 	stw	r17,4(r8)
8110d5bc:	d8c02015 	stw	r3,128(sp)
8110d5c0:	d8801f15 	stw	r2,124(sp)
8110d5c4:	010001c4 	movi	r4,7
8110d5c8:	20bec816 	blt	r4,r2,8110d0ec <__reset+0xfb0ed0ec>
8110d5cc:	42000204 	addi	r8,r8,8
8110d5d0:	003ecd06 	br	8110d108 <__reset+0xfb0ed108>
8110d5d4:	d9002917 	ldw	r4,164(sp)
8110d5d8:	d8002785 	stb	zero,158(sp)
8110d5dc:	203d2d16 	blt	r4,zero,8110ca94 <__reset+0xfb0eca94>
8110d5e0:	00bfdfc4 	movi	r2,-129
8110d5e4:	90a4703a 	and	r18,r18,r2
8110d5e8:	003a9106 	br	8110c030 <__reset+0xfb0ec030>
8110d5ec:	012044b4 	movhi	r4,33042
8110d5f0:	21396884 	addi	r4,r4,-6750
8110d5f4:	d9002b15 	stw	r4,172(sp)
8110d5f8:	003c0c06 	br	8110c62c <__reset+0xfb0ec62c>
8110d5fc:	d9002c17 	ldw	r4,176(sp)
8110d600:	d9801e04 	addi	r6,sp,120
8110d604:	b80b883a 	mov	r5,r23
8110d608:	11134c00 	call	811134c0 <__sprint_r>
8110d60c:	103aab1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d610:	d8c02017 	ldw	r3,128(sp)
8110d614:	da000404 	addi	r8,sp,16
8110d618:	003d4106 	br	8110cb20 <__reset+0xfb0ecb20>
8110d61c:	d8801f17 	ldw	r2,124(sp)
8110d620:	016044b4 	movhi	r5,33042
8110d624:	01000044 	movi	r4,1
8110d628:	18c00044 	addi	r3,r3,1
8110d62c:	10800044 	addi	r2,r2,1
8110d630:	29796804 	addi	r5,r5,-6752
8110d634:	41000115 	stw	r4,4(r8)
8110d638:	41400015 	stw	r5,0(r8)
8110d63c:	d8c02015 	stw	r3,128(sp)
8110d640:	d8801f15 	stw	r2,124(sp)
8110d644:	010001c4 	movi	r4,7
8110d648:	20805c16 	blt	r4,r2,8110d7bc <___vfprintf_internal_r+0x1b08>
8110d64c:	42000204 	addi	r8,r8,8
8110d650:	8800041e 	bne	r17,zero,8110d664 <___vfprintf_internal_r+0x19b0>
8110d654:	d8803317 	ldw	r2,204(sp)
8110d658:	1000021e 	bne	r2,zero,8110d664 <___vfprintf_internal_r+0x19b0>
8110d65c:	9080004c 	andi	r2,r18,1
8110d660:	103c0926 	beq	r2,zero,8110c688 <__reset+0xfb0ec688>
8110d664:	d9003717 	ldw	r4,220(sp)
8110d668:	d8801f17 	ldw	r2,124(sp)
8110d66c:	d9403417 	ldw	r5,208(sp)
8110d670:	20c7883a 	add	r3,r4,r3
8110d674:	10800044 	addi	r2,r2,1
8110d678:	41000115 	stw	r4,4(r8)
8110d67c:	41400015 	stw	r5,0(r8)
8110d680:	d8c02015 	stw	r3,128(sp)
8110d684:	d8801f15 	stw	r2,124(sp)
8110d688:	010001c4 	movi	r4,7
8110d68c:	20812116 	blt	r4,r2,8110db14 <___vfprintf_internal_r+0x1e60>
8110d690:	42000204 	addi	r8,r8,8
8110d694:	0463c83a 	sub	r17,zero,r17
8110d698:	0440730e 	bge	zero,r17,8110d868 <___vfprintf_internal_r+0x1bb4>
8110d69c:	05800404 	movi	r22,16
8110d6a0:	b440860e 	bge	r22,r17,8110d8bc <___vfprintf_internal_r+0x1c08>
8110d6a4:	016044b4 	movhi	r5,33042
8110d6a8:	29796884 	addi	r5,r5,-6750
8110d6ac:	d9402b15 	stw	r5,172(sp)
8110d6b0:	070001c4 	movi	fp,7
8110d6b4:	dcc02c17 	ldw	r19,176(sp)
8110d6b8:	00000306 	br	8110d6c8 <___vfprintf_internal_r+0x1a14>
8110d6bc:	42000204 	addi	r8,r8,8
8110d6c0:	8c7ffc04 	addi	r17,r17,-16
8110d6c4:	b440800e 	bge	r22,r17,8110d8c8 <___vfprintf_internal_r+0x1c14>
8110d6c8:	18c00404 	addi	r3,r3,16
8110d6cc:	10800044 	addi	r2,r2,1
8110d6d0:	45000015 	stw	r20,0(r8)
8110d6d4:	45800115 	stw	r22,4(r8)
8110d6d8:	d8c02015 	stw	r3,128(sp)
8110d6dc:	d8801f15 	stw	r2,124(sp)
8110d6e0:	e0bff60e 	bge	fp,r2,8110d6bc <__reset+0xfb0ed6bc>
8110d6e4:	d9801e04 	addi	r6,sp,120
8110d6e8:	b80b883a 	mov	r5,r23
8110d6ec:	9809883a 	mov	r4,r19
8110d6f0:	11134c00 	call	811134c0 <__sprint_r>
8110d6f4:	103a711e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d6f8:	d8c02017 	ldw	r3,128(sp)
8110d6fc:	d8801f17 	ldw	r2,124(sp)
8110d700:	da000404 	addi	r8,sp,16
8110d704:	003fee06 	br	8110d6c0 <__reset+0xfb0ed6c0>
8110d708:	00bfffc4 	movi	r2,-1
8110d70c:	003a6f06 	br	8110c0cc <__reset+0xfb0ec0cc>
8110d710:	008011c4 	movi	r2,71
8110d714:	1440b816 	blt	r2,r17,8110d9f8 <___vfprintf_internal_r+0x1d44>
8110d718:	042044b4 	movhi	r16,33042
8110d71c:	84395a04 	addi	r16,r16,-6808
8110d720:	00c000c4 	movi	r3,3
8110d724:	00bfdfc4 	movi	r2,-129
8110d728:	d8c02a15 	stw	r3,168(sp)
8110d72c:	90a4703a 	and	r18,r18,r2
8110d730:	df002783 	ldbu	fp,158(sp)
8110d734:	d8c02e15 	stw	r3,184(sp)
8110d738:	d8002915 	stw	zero,164(sp)
8110d73c:	d8003215 	stw	zero,200(sp)
8110d740:	003b2906 	br	8110c3e8 <__reset+0xfb0ec3e8>
8110d744:	d9002d17 	ldw	r4,180(sp)
8110d748:	24c00017 	ldw	r19,0(r4)
8110d74c:	21000104 	addi	r4,r4,4
8110d750:	d9002d15 	stw	r4,180(sp)
8110d754:	982dd7fa 	srai	r22,r19,31
8110d758:	b005883a 	mov	r2,r22
8110d75c:	003a9f06 	br	8110c1dc <__reset+0xfb0ec1dc>
8110d760:	d9402d17 	ldw	r5,180(sp)
8110d764:	d8c02f17 	ldw	r3,188(sp)
8110d768:	28800017 	ldw	r2,0(r5)
8110d76c:	29400104 	addi	r5,r5,4
8110d770:	d9402d15 	stw	r5,180(sp)
8110d774:	10c00015 	stw	r3,0(r2)
8110d778:	00398606 	br	8110bd94 <__reset+0xfb0ebd94>
8110d77c:	d9402d17 	ldw	r5,180(sp)
8110d780:	002d883a 	mov	r22,zero
8110d784:	2cc00017 	ldw	r19,0(r5)
8110d788:	29400104 	addi	r5,r5,4
8110d78c:	d9402d15 	stw	r5,180(sp)
8110d790:	003c2306 	br	8110c820 <__reset+0xfb0ec820>
8110d794:	d8c02d17 	ldw	r3,180(sp)
8110d798:	d9002917 	ldw	r4,164(sp)
8110d79c:	002d883a 	mov	r22,zero
8110d7a0:	18800104 	addi	r2,r3,4
8110d7a4:	1cc0000b 	ldhu	r19,0(r3)
8110d7a8:	203dc10e 	bge	r4,zero,8110ceb0 <__reset+0xfb0eceb0>
8110d7ac:	003f7506 	br	8110d584 <__reset+0xfb0ed584>
8110d7b0:	042044b4 	movhi	r16,33042
8110d7b4:	84395804 	addi	r16,r16,-6816
8110d7b8:	003acc06 	br	8110c2ec <__reset+0xfb0ec2ec>
8110d7bc:	d9002c17 	ldw	r4,176(sp)
8110d7c0:	d9801e04 	addi	r6,sp,120
8110d7c4:	b80b883a 	mov	r5,r23
8110d7c8:	11134c00 	call	811134c0 <__sprint_r>
8110d7cc:	103a3b1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d7d0:	dc402617 	ldw	r17,152(sp)
8110d7d4:	d8c02017 	ldw	r3,128(sp)
8110d7d8:	da000404 	addi	r8,sp,16
8110d7dc:	003f9c06 	br	8110d650 <__reset+0xfb0ed650>
8110d7e0:	ac400043 	ldbu	r17,1(r21)
8110d7e4:	94800814 	ori	r18,r18,32
8110d7e8:	ad400044 	addi	r21,r21,1
8110d7ec:	8c403fcc 	andi	r17,r17,255
8110d7f0:	8c40201c 	xori	r17,r17,128
8110d7f4:	8c7fe004 	addi	r17,r17,-128
8110d7f8:	00398f06 	br	8110be38 <__reset+0xfb0ebe38>
8110d7fc:	d8c02d15 	stw	r3,180(sp)
8110d800:	0039883a 	mov	fp,zero
8110d804:	003e3506 	br	8110d0dc <__reset+0xfb0ed0dc>
8110d808:	d9002c17 	ldw	r4,176(sp)
8110d80c:	d9801e04 	addi	r6,sp,120
8110d810:	b80b883a 	mov	r5,r23
8110d814:	11134c00 	call	811134c0 <__sprint_r>
8110d818:	103a281e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d81c:	d8c02017 	ldw	r3,128(sp)
8110d820:	da000404 	addi	r8,sp,16
8110d824:	003cd006 	br	8110cb68 <__reset+0xfb0ecb68>
8110d828:	8009883a 	mov	r4,r16
8110d82c:	da003d15 	stw	r8,244(sp)
8110d830:	110bc1c0 	call	8110bc1c <strlen>
8110d834:	d8802e15 	stw	r2,184(sp)
8110d838:	da003d17 	ldw	r8,244(sp)
8110d83c:	103c340e 	bge	r2,zero,8110c910 <__reset+0xfb0ec910>
8110d840:	0005883a 	mov	r2,zero
8110d844:	003c3206 	br	8110c910 <__reset+0xfb0ec910>
8110d848:	d9002c17 	ldw	r4,176(sp)
8110d84c:	d9801e04 	addi	r6,sp,120
8110d850:	b80b883a 	mov	r5,r23
8110d854:	11134c00 	call	811134c0 <__sprint_r>
8110d858:	103a181e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d85c:	d8c02017 	ldw	r3,128(sp)
8110d860:	d8801f17 	ldw	r2,124(sp)
8110d864:	da000404 	addi	r8,sp,16
8110d868:	d9403317 	ldw	r5,204(sp)
8110d86c:	10800044 	addi	r2,r2,1
8110d870:	44000015 	stw	r16,0(r8)
8110d874:	28c7883a 	add	r3,r5,r3
8110d878:	003b7d06 	br	8110c670 <__reset+0xfb0ec670>
8110d87c:	012044b4 	movhi	r4,33042
8110d880:	21396c84 	addi	r4,r4,-6734
8110d884:	d9003515 	stw	r4,212(sp)
8110d888:	003b1406 	br	8110c4dc <__reset+0xfb0ec4dc>
8110d88c:	013fffc4 	movi	r4,-1
8110d890:	003a3506 	br	8110c168 <__reset+0xfb0ec168>
8110d894:	0023883a 	mov	r17,zero
8110d898:	003d9d06 	br	8110cf10 <__reset+0xfb0ecf10>
8110d89c:	d9002c17 	ldw	r4,176(sp)
8110d8a0:	d9801e04 	addi	r6,sp,120
8110d8a4:	b80b883a 	mov	r5,r23
8110d8a8:	11134c00 	call	811134c0 <__sprint_r>
8110d8ac:	103a031e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d8b0:	d8c02017 	ldw	r3,128(sp)
8110d8b4:	da000404 	addi	r8,sp,16
8110d8b8:	003d9406 	br	8110cf0c <__reset+0xfb0ecf0c>
8110d8bc:	012044b4 	movhi	r4,33042
8110d8c0:	21396884 	addi	r4,r4,-6750
8110d8c4:	d9002b15 	stw	r4,172(sp)
8110d8c8:	d9002b17 	ldw	r4,172(sp)
8110d8cc:	1c47883a 	add	r3,r3,r17
8110d8d0:	10800044 	addi	r2,r2,1
8110d8d4:	41000015 	stw	r4,0(r8)
8110d8d8:	44400115 	stw	r17,4(r8)
8110d8dc:	d8c02015 	stw	r3,128(sp)
8110d8e0:	d8801f15 	stw	r2,124(sp)
8110d8e4:	010001c4 	movi	r4,7
8110d8e8:	20bfd716 	blt	r4,r2,8110d848 <__reset+0xfb0ed848>
8110d8ec:	42000204 	addi	r8,r8,8
8110d8f0:	003fdd06 	br	8110d868 <__reset+0xfb0ed868>
8110d8f4:	d9002c17 	ldw	r4,176(sp)
8110d8f8:	d9801e04 	addi	r6,sp,120
8110d8fc:	b80b883a 	mov	r5,r23
8110d900:	11134c00 	call	811134c0 <__sprint_r>
8110d904:	1039ed1e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d908:	d8802617 	ldw	r2,152(sp)
8110d90c:	d8c02017 	ldw	r3,128(sp)
8110d910:	da000404 	addi	r8,sp,16
8110d914:	003e1006 	br	8110d158 <__reset+0xfb0ed158>
8110d918:	00800044 	movi	r2,1
8110d91c:	10803fcc 	andi	r2,r2,255
8110d920:	00c00044 	movi	r3,1
8110d924:	10fa3526 	beq	r2,r3,8110c1fc <__reset+0xfb0ec1fc>
8110d928:	00c00084 	movi	r3,2
8110d92c:	10fbcb26 	beq	r2,r3,8110c85c <__reset+0xfb0ec85c>
8110d930:	003a8f06 	br	8110c370 <__reset+0xfb0ec370>
8110d934:	012044b4 	movhi	r4,33042
8110d938:	21396c84 	addi	r4,r4,-6734
8110d93c:	d9003515 	stw	r4,212(sp)
8110d940:	003b7606 	br	8110c71c <__reset+0xfb0ec71c>
8110d944:	d8802917 	ldw	r2,164(sp)
8110d948:	00c00184 	movi	r3,6
8110d94c:	1880012e 	bgeu	r3,r2,8110d954 <___vfprintf_internal_r+0x1ca0>
8110d950:	1805883a 	mov	r2,r3
8110d954:	d8802e15 	stw	r2,184(sp)
8110d958:	1000ef16 	blt	r2,zero,8110dd18 <___vfprintf_internal_r+0x2064>
8110d95c:	042044b4 	movhi	r16,33042
8110d960:	d8802a15 	stw	r2,168(sp)
8110d964:	dcc02d15 	stw	r19,180(sp)
8110d968:	d8002915 	stw	zero,164(sp)
8110d96c:	d8003215 	stw	zero,200(sp)
8110d970:	84396604 	addi	r16,r16,-6760
8110d974:	0039883a 	mov	fp,zero
8110d978:	003aa206 	br	8110c404 <__reset+0xfb0ec404>
8110d97c:	0021883a 	mov	r16,zero
8110d980:	003e0706 	br	8110d1a0 <__reset+0xfb0ed1a0>
8110d984:	d9002c17 	ldw	r4,176(sp)
8110d988:	d9801e04 	addi	r6,sp,120
8110d98c:	b80b883a 	mov	r5,r23
8110d990:	11134c00 	call	811134c0 <__sprint_r>
8110d994:	1039c91e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110d998:	d8802617 	ldw	r2,152(sp)
8110d99c:	d9403317 	ldw	r5,204(sp)
8110d9a0:	d8c02017 	ldw	r3,128(sp)
8110d9a4:	da000404 	addi	r8,sp,16
8110d9a8:	2885c83a 	sub	r2,r5,r2
8110d9ac:	003dfb06 	br	8110d19c <__reset+0xfb0ed19c>
8110d9b0:	9080004c 	andi	r2,r18,1
8110d9b4:	103e8f1e 	bne	r2,zero,8110d3f4 <__reset+0xfb0ed3f4>
8110d9b8:	d8802117 	ldw	r2,132(sp)
8110d9bc:	003e9e06 	br	8110d438 <__reset+0xfb0ed438>
8110d9c0:	1025883a 	mov	r18,r2
8110d9c4:	0039883a 	mov	fp,zero
8110d9c8:	00800084 	movi	r2,2
8110d9cc:	003fd306 	br	8110d91c <__reset+0xfb0ed91c>
8110d9d0:	07000b44 	movi	fp,45
8110d9d4:	df002785 	stb	fp,158(sp)
8110d9d8:	003a4006 	br	8110c2dc <__reset+0xfb0ec2dc>
8110d9dc:	00c00b44 	movi	r3,45
8110d9e0:	d8c02785 	stb	r3,158(sp)
8110d9e4:	d8802a15 	stw	r2,168(sp)
8110d9e8:	dc802b17 	ldw	r18,172(sp)
8110d9ec:	d8002915 	stw	zero,164(sp)
8110d9f0:	07000b44 	movi	fp,45
8110d9f4:	003a8006 	br	8110c3f8 <__reset+0xfb0ec3f8>
8110d9f8:	042044b4 	movhi	r16,33042
8110d9fc:	84395b04 	addi	r16,r16,-6804
8110da00:	003f4706 	br	8110d720 <__reset+0xfb0ed720>
8110da04:	d8c02d17 	ldw	r3,180(sp)
8110da08:	d9002f17 	ldw	r4,188(sp)
8110da0c:	18800017 	ldw	r2,0(r3)
8110da10:	18c00104 	addi	r3,r3,4
8110da14:	d8c02d15 	stw	r3,180(sp)
8110da18:	11000015 	stw	r4,0(r2)
8110da1c:	0038dd06 	br	8110bd94 <__reset+0xfb0ebd94>
8110da20:	dd802617 	ldw	r22,152(sp)
8110da24:	00bfff44 	movi	r2,-3
8110da28:	b0801c16 	blt	r22,r2,8110da9c <___vfprintf_internal_r+0x1de8>
8110da2c:	d9402917 	ldw	r5,164(sp)
8110da30:	2d801a16 	blt	r5,r22,8110da9c <___vfprintf_internal_r+0x1de8>
8110da34:	dd803215 	stw	r22,200(sp)
8110da38:	003e8906 	br	8110d460 <__reset+0xfb0ed460>
8110da3c:	012044b4 	movhi	r4,33042
8110da40:	21396884 	addi	r4,r4,-6750
8110da44:	d9002b15 	stw	r4,172(sp)
8110da48:	003c9106 	br	8110cc90 <__reset+0xfb0ecc90>
8110da4c:	e005883a 	mov	r2,fp
8110da50:	003e7906 	br	8110d438 <__reset+0xfb0ed438>
8110da54:	d9402917 	ldw	r5,164(sp)
8110da58:	df002783 	ldbu	fp,158(sp)
8110da5c:	dcc02d15 	stw	r19,180(sp)
8110da60:	d9402a15 	stw	r5,168(sp)
8110da64:	d9402e15 	stw	r5,184(sp)
8110da68:	d8002915 	stw	zero,164(sp)
8110da6c:	d8003215 	stw	zero,200(sp)
8110da70:	003a5d06 	br	8110c3e8 <__reset+0xfb0ec3e8>
8110da74:	9080004c 	andi	r2,r18,1
8110da78:	0039883a 	mov	fp,zero
8110da7c:	10000426 	beq	r2,zero,8110da90 <___vfprintf_internal_r+0x1ddc>
8110da80:	00800c04 	movi	r2,48
8110da84:	dc001dc4 	addi	r16,sp,119
8110da88:	d8801dc5 	stb	r2,119(sp)
8110da8c:	003b8006 	br	8110c890 <__reset+0xfb0ec890>
8110da90:	d8002e15 	stw	zero,184(sp)
8110da94:	dc001e04 	addi	r16,sp,120
8110da98:	003a4d06 	br	8110c3d0 <__reset+0xfb0ec3d0>
8110da9c:	8c7fff84 	addi	r17,r17,-2
8110daa0:	b5bfffc4 	addi	r22,r22,-1
8110daa4:	dd802615 	stw	r22,152(sp)
8110daa8:	dc4022c5 	stb	r17,139(sp)
8110daac:	b000bf16 	blt	r22,zero,8110ddac <___vfprintf_internal_r+0x20f8>
8110dab0:	00800ac4 	movi	r2,43
8110dab4:	d8802305 	stb	r2,140(sp)
8110dab8:	00800244 	movi	r2,9
8110dabc:	15807016 	blt	r2,r22,8110dc80 <___vfprintf_internal_r+0x1fcc>
8110dac0:	00800c04 	movi	r2,48
8110dac4:	b5800c04 	addi	r22,r22,48
8110dac8:	d8802345 	stb	r2,141(sp)
8110dacc:	dd802385 	stb	r22,142(sp)
8110dad0:	d88023c4 	addi	r2,sp,143
8110dad4:	df0022c4 	addi	fp,sp,139
8110dad8:	d8c03317 	ldw	r3,204(sp)
8110dadc:	1739c83a 	sub	fp,r2,fp
8110dae0:	d9003317 	ldw	r4,204(sp)
8110dae4:	e0c7883a 	add	r3,fp,r3
8110dae8:	df003a15 	stw	fp,232(sp)
8110daec:	d8c02e15 	stw	r3,184(sp)
8110daf0:	00800044 	movi	r2,1
8110daf4:	1100b30e 	bge	r2,r4,8110ddc4 <___vfprintf_internal_r+0x2110>
8110daf8:	d8c02e17 	ldw	r3,184(sp)
8110dafc:	18c00044 	addi	r3,r3,1
8110db00:	d8c02e15 	stw	r3,184(sp)
8110db04:	1805883a 	mov	r2,r3
8110db08:	1800ac16 	blt	r3,zero,8110ddbc <___vfprintf_internal_r+0x2108>
8110db0c:	d8003215 	stw	zero,200(sp)
8110db10:	003e5d06 	br	8110d488 <__reset+0xfb0ed488>
8110db14:	d9002c17 	ldw	r4,176(sp)
8110db18:	d9801e04 	addi	r6,sp,120
8110db1c:	b80b883a 	mov	r5,r23
8110db20:	11134c00 	call	811134c0 <__sprint_r>
8110db24:	1039651e 	bne	r2,zero,8110c0bc <__reset+0xfb0ec0bc>
8110db28:	dc402617 	ldw	r17,152(sp)
8110db2c:	d8c02017 	ldw	r3,128(sp)
8110db30:	d8801f17 	ldw	r2,124(sp)
8110db34:	da000404 	addi	r8,sp,16
8110db38:	003ed606 	br	8110d694 <__reset+0xfb0ed694>
8110db3c:	582b883a 	mov	r21,r11
8110db40:	d8002915 	stw	zero,164(sp)
8110db44:	0038bd06 	br	8110be3c <__reset+0xfb0ebe3c>
8110db48:	d8802917 	ldw	r2,164(sp)
8110db4c:	103e071e 	bne	r2,zero,8110d36c <__reset+0xfb0ed36c>
8110db50:	dc002915 	stw	r16,164(sp)
8110db54:	003e0506 	br	8110d36c <__reset+0xfb0ed36c>
8110db58:	d9002917 	ldw	r4,164(sp)
8110db5c:	20c00044 	addi	r3,r4,1
8110db60:	003e0f06 	br	8110d3a0 <__reset+0xfb0ed3a0>
8110db64:	01400184 	movi	r5,6
8110db68:	d9402915 	stw	r5,164(sp)
8110db6c:	003dff06 	br	8110d36c <__reset+0xfb0ed36c>
8110db70:	d8802104 	addi	r2,sp,132
8110db74:	d8800315 	stw	r2,12(sp)
8110db78:	d8802504 	addi	r2,sp,148
8110db7c:	d8800215 	stw	r2,8(sp)
8110db80:	d8802604 	addi	r2,sp,152
8110db84:	d8800115 	stw	r2,4(sp)
8110db88:	d8802917 	ldw	r2,164(sp)
8110db8c:	d9403617 	ldw	r5,216(sp)
8110db90:	d9002c17 	ldw	r4,176(sp)
8110db94:	d8800015 	stw	r2,0(sp)
8110db98:	01c000c4 	movi	r7,3
8110db9c:	980d883a 	mov	r6,r19
8110dba0:	da003d15 	stw	r8,244(sp)
8110dba4:	110e2d80 	call	8110e2d8 <_dtoa_r>
8110dba8:	d8c02917 	ldw	r3,164(sp)
8110dbac:	da003d17 	ldw	r8,244(sp)
8110dbb0:	1021883a 	mov	r16,r2
8110dbb4:	10f9883a 	add	fp,r2,r3
8110dbb8:	81000007 	ldb	r4,0(r16)
8110dbbc:	00800c04 	movi	r2,48
8110dbc0:	20805e26 	beq	r4,r2,8110dd3c <___vfprintf_internal_r+0x2088>
8110dbc4:	d8c02617 	ldw	r3,152(sp)
8110dbc8:	e0f9883a 	add	fp,fp,r3
8110dbcc:	003e0a06 	br	8110d3f8 <__reset+0xfb0ed3f8>
8110dbd0:	00c00b44 	movi	r3,45
8110dbd4:	24e0003c 	xorhi	r19,r4,32768
8110dbd8:	d8c02a05 	stb	r3,168(sp)
8110dbdc:	003de906 	br	8110d384 <__reset+0xfb0ed384>
8110dbe0:	d8c03217 	ldw	r3,200(sp)
8110dbe4:	00c07a0e 	bge	zero,r3,8110ddd0 <___vfprintf_internal_r+0x211c>
8110dbe8:	00800044 	movi	r2,1
8110dbec:	d9003317 	ldw	r4,204(sp)
8110dbf0:	1105883a 	add	r2,r2,r4
8110dbf4:	d8802e15 	stw	r2,184(sp)
8110dbf8:	10004e16 	blt	r2,zero,8110dd34 <___vfprintf_internal_r+0x2080>
8110dbfc:	044019c4 	movi	r17,103
8110dc00:	003e2106 	br	8110d488 <__reset+0xfb0ed488>
8110dc04:	d9002917 	ldw	r4,164(sp)
8110dc08:	d8802104 	addi	r2,sp,132
8110dc0c:	d8800315 	stw	r2,12(sp)
8110dc10:	d9000015 	stw	r4,0(sp)
8110dc14:	d8802504 	addi	r2,sp,148
8110dc18:	d9403617 	ldw	r5,216(sp)
8110dc1c:	d9002c17 	ldw	r4,176(sp)
8110dc20:	d8800215 	stw	r2,8(sp)
8110dc24:	d8802604 	addi	r2,sp,152
8110dc28:	d8800115 	stw	r2,4(sp)
8110dc2c:	01c000c4 	movi	r7,3
8110dc30:	980d883a 	mov	r6,r19
8110dc34:	da003d15 	stw	r8,244(sp)
8110dc38:	110e2d80 	call	8110e2d8 <_dtoa_r>
8110dc3c:	d8c02917 	ldw	r3,164(sp)
8110dc40:	da003d17 	ldw	r8,244(sp)
8110dc44:	1021883a 	mov	r16,r2
8110dc48:	00801184 	movi	r2,70
8110dc4c:	80f9883a 	add	fp,r16,r3
8110dc50:	88bfd926 	beq	r17,r2,8110dbb8 <__reset+0xfb0edbb8>
8110dc54:	003de806 	br	8110d3f8 <__reset+0xfb0ed3f8>
8110dc58:	d9002917 	ldw	r4,164(sp)
8110dc5c:	00c04d0e 	bge	zero,r3,8110dd94 <___vfprintf_internal_r+0x20e0>
8110dc60:	2000441e 	bne	r4,zero,8110dd74 <___vfprintf_internal_r+0x20c0>
8110dc64:	9480004c 	andi	r18,r18,1
8110dc68:	9000421e 	bne	r18,zero,8110dd74 <___vfprintf_internal_r+0x20c0>
8110dc6c:	1805883a 	mov	r2,r3
8110dc70:	18007016 	blt	r3,zero,8110de34 <___vfprintf_internal_r+0x2180>
8110dc74:	d8c03217 	ldw	r3,200(sp)
8110dc78:	d8c02e15 	stw	r3,184(sp)
8110dc7c:	003e0206 	br	8110d488 <__reset+0xfb0ed488>
8110dc80:	df0022c4 	addi	fp,sp,139
8110dc84:	dc002915 	stw	r16,164(sp)
8110dc88:	4027883a 	mov	r19,r8
8110dc8c:	e021883a 	mov	r16,fp
8110dc90:	b009883a 	mov	r4,r22
8110dc94:	01400284 	movi	r5,10
8110dc98:	1115e740 	call	81115e74 <__modsi3>
8110dc9c:	10800c04 	addi	r2,r2,48
8110dca0:	843fffc4 	addi	r16,r16,-1
8110dca4:	b009883a 	mov	r4,r22
8110dca8:	01400284 	movi	r5,10
8110dcac:	80800005 	stb	r2,0(r16)
8110dcb0:	1115df00 	call	81115df0 <__divsi3>
8110dcb4:	102d883a 	mov	r22,r2
8110dcb8:	00800244 	movi	r2,9
8110dcbc:	15bff416 	blt	r2,r22,8110dc90 <__reset+0xfb0edc90>
8110dcc0:	9811883a 	mov	r8,r19
8110dcc4:	b0800c04 	addi	r2,r22,48
8110dcc8:	8027883a 	mov	r19,r16
8110dccc:	997fffc4 	addi	r5,r19,-1
8110dcd0:	98bfffc5 	stb	r2,-1(r19)
8110dcd4:	dc002917 	ldw	r16,164(sp)
8110dcd8:	2f006a2e 	bgeu	r5,fp,8110de84 <___vfprintf_internal_r+0x21d0>
8110dcdc:	d9c02384 	addi	r7,sp,142
8110dce0:	3ccfc83a 	sub	r7,r7,r19
8110dce4:	d9002344 	addi	r4,sp,141
8110dce8:	e1cf883a 	add	r7,fp,r7
8110dcec:	00000106 	br	8110dcf4 <___vfprintf_internal_r+0x2040>
8110dcf0:	28800003 	ldbu	r2,0(r5)
8110dcf4:	20800005 	stb	r2,0(r4)
8110dcf8:	21000044 	addi	r4,r4,1
8110dcfc:	29400044 	addi	r5,r5,1
8110dd00:	393ffb1e 	bne	r7,r4,8110dcf0 <__reset+0xfb0edcf0>
8110dd04:	d8802304 	addi	r2,sp,140
8110dd08:	14c5c83a 	sub	r2,r2,r19
8110dd0c:	d8c02344 	addi	r3,sp,141
8110dd10:	1885883a 	add	r2,r3,r2
8110dd14:	003f7006 	br	8110dad8 <__reset+0xfb0edad8>
8110dd18:	0005883a 	mov	r2,zero
8110dd1c:	003f0f06 	br	8110d95c <__reset+0xfb0ed95c>
8110dd20:	d8c03217 	ldw	r3,200(sp)
8110dd24:	18c00044 	addi	r3,r3,1
8110dd28:	d8c02e15 	stw	r3,184(sp)
8110dd2c:	1805883a 	mov	r2,r3
8110dd30:	183fb20e 	bge	r3,zero,8110dbfc <__reset+0xfb0edbfc>
8110dd34:	0005883a 	mov	r2,zero
8110dd38:	003fb006 	br	8110dbfc <__reset+0xfb0edbfc>
8110dd3c:	d9003617 	ldw	r4,216(sp)
8110dd40:	000d883a 	mov	r6,zero
8110dd44:	000f883a 	mov	r7,zero
8110dd48:	980b883a 	mov	r5,r19
8110dd4c:	d8c03c15 	stw	r3,240(sp)
8110dd50:	da003d15 	stw	r8,244(sp)
8110dd54:	11171380 	call	81117138 <__eqdf2>
8110dd58:	d8c03c17 	ldw	r3,240(sp)
8110dd5c:	da003d17 	ldw	r8,244(sp)
8110dd60:	103f9826 	beq	r2,zero,8110dbc4 <__reset+0xfb0edbc4>
8110dd64:	00800044 	movi	r2,1
8110dd68:	10c7c83a 	sub	r3,r2,r3
8110dd6c:	d8c02615 	stw	r3,152(sp)
8110dd70:	003f9506 	br	8110dbc8 <__reset+0xfb0edbc8>
8110dd74:	d9002917 	ldw	r4,164(sp)
8110dd78:	d8c03217 	ldw	r3,200(sp)
8110dd7c:	20800044 	addi	r2,r4,1
8110dd80:	1885883a 	add	r2,r3,r2
8110dd84:	d8802e15 	stw	r2,184(sp)
8110dd88:	103dbf0e 	bge	r2,zero,8110d488 <__reset+0xfb0ed488>
8110dd8c:	0005883a 	mov	r2,zero
8110dd90:	003dbd06 	br	8110d488 <__reset+0xfb0ed488>
8110dd94:	2000211e 	bne	r4,zero,8110de1c <___vfprintf_internal_r+0x2168>
8110dd98:	9480004c 	andi	r18,r18,1
8110dd9c:	90001f1e 	bne	r18,zero,8110de1c <___vfprintf_internal_r+0x2168>
8110dda0:	00800044 	movi	r2,1
8110dda4:	d8802e15 	stw	r2,184(sp)
8110dda8:	003db706 	br	8110d488 <__reset+0xfb0ed488>
8110ddac:	00800b44 	movi	r2,45
8110ddb0:	05adc83a 	sub	r22,zero,r22
8110ddb4:	d8802305 	stb	r2,140(sp)
8110ddb8:	003f3f06 	br	8110dab8 <__reset+0xfb0edab8>
8110ddbc:	0005883a 	mov	r2,zero
8110ddc0:	003f5206 	br	8110db0c <__reset+0xfb0edb0c>
8110ddc4:	90a4703a 	and	r18,r18,r2
8110ddc8:	903f4e26 	beq	r18,zero,8110db04 <__reset+0xfb0edb04>
8110ddcc:	003f4a06 	br	8110daf8 <__reset+0xfb0edaf8>
8110ddd0:	00800084 	movi	r2,2
8110ddd4:	10c5c83a 	sub	r2,r2,r3
8110ddd8:	003f8406 	br	8110dbec <__reset+0xfb0edbec>
8110dddc:	d8802d17 	ldw	r2,180(sp)
8110dde0:	d9002d17 	ldw	r4,180(sp)
8110dde4:	ac400043 	ldbu	r17,1(r21)
8110dde8:	10800017 	ldw	r2,0(r2)
8110ddec:	582b883a 	mov	r21,r11
8110ddf0:	d8802915 	stw	r2,164(sp)
8110ddf4:	20800104 	addi	r2,r4,4
8110ddf8:	d9002917 	ldw	r4,164(sp)
8110ddfc:	d8802d15 	stw	r2,180(sp)
8110de00:	203e7a0e 	bge	r4,zero,8110d7ec <__reset+0xfb0ed7ec>
8110de04:	8c403fcc 	andi	r17,r17,255
8110de08:	00bfffc4 	movi	r2,-1
8110de0c:	8c40201c 	xori	r17,r17,128
8110de10:	d8802915 	stw	r2,164(sp)
8110de14:	8c7fe004 	addi	r17,r17,-128
8110de18:	00380706 	br	8110be38 <__reset+0xfb0ebe38>
8110de1c:	d8c02917 	ldw	r3,164(sp)
8110de20:	18c00084 	addi	r3,r3,2
8110de24:	d8c02e15 	stw	r3,184(sp)
8110de28:	1805883a 	mov	r2,r3
8110de2c:	183d960e 	bge	r3,zero,8110d488 <__reset+0xfb0ed488>
8110de30:	003fd606 	br	8110dd8c <__reset+0xfb0edd8c>
8110de34:	0005883a 	mov	r2,zero
8110de38:	003f8e06 	br	8110dc74 <__reset+0xfb0edc74>
8110de3c:	9080004c 	andi	r2,r18,1
8110de40:	103f811e 	bne	r2,zero,8110dc48 <__reset+0xfb0edc48>
8110de44:	d8802117 	ldw	r2,132(sp)
8110de48:	1405c83a 	sub	r2,r2,r16
8110de4c:	d8803315 	stw	r2,204(sp)
8110de50:	b47ef326 	beq	r22,r17,8110da20 <__reset+0xfb0eda20>
8110de54:	dd802617 	ldw	r22,152(sp)
8110de58:	003f1106 	br	8110daa0 <__reset+0xfb0edaa0>
8110de5c:	d9c02785 	stb	r7,158(sp)
8110de60:	00390406 	br	8110c274 <__reset+0xfb0ec274>
8110de64:	d9c02785 	stb	r7,158(sp)
8110de68:	0038d306 	br	8110c1b8 <__reset+0xfb0ec1b8>
8110de6c:	d9c02785 	stb	r7,158(sp)
8110de70:	003a6106 	br	8110c7f8 <__reset+0xfb0ec7f8>
8110de74:	d9c02785 	stb	r7,158(sp)
8110de78:	003af806 	br	8110ca5c <__reset+0xfb0eca5c>
8110de7c:	0005883a 	mov	r2,zero
8110de80:	003d7e06 	br	8110d47c <__reset+0xfb0ed47c>
8110de84:	d8802344 	addi	r2,sp,141
8110de88:	003f1306 	br	8110dad8 <__reset+0xfb0edad8>
8110de8c:	d9c02785 	stb	r7,158(sp)
8110de90:	00392306 	br	8110c320 <__reset+0xfb0ec320>
8110de94:	d9c02785 	stb	r7,158(sp)
8110de98:	003aa906 	br	8110c940 <__reset+0xfb0ec940>
8110de9c:	d9c02785 	stb	r7,158(sp)
8110dea0:	003a3d06 	br	8110c798 <__reset+0xfb0ec798>
8110dea4:	d9c02785 	stb	r7,158(sp)
8110dea8:	003aca06 	br	8110c9d4 <__reset+0xfb0ec9d4>

8110deac <__vfprintf_internal>:
8110deac:	00a044b4 	movhi	r2,33042
8110deb0:	10819104 	addi	r2,r2,1604
8110deb4:	300f883a 	mov	r7,r6
8110deb8:	280d883a 	mov	r6,r5
8110debc:	200b883a 	mov	r5,r4
8110dec0:	11000017 	ldw	r4,0(r2)
8110dec4:	110bcb41 	jmpi	8110bcb4 <___vfprintf_internal_r>

8110dec8 <__sbprintf>:
8110dec8:	2880030b 	ldhu	r2,12(r5)
8110decc:	2ac01917 	ldw	r11,100(r5)
8110ded0:	2a80038b 	ldhu	r10,14(r5)
8110ded4:	2a400717 	ldw	r9,28(r5)
8110ded8:	2a000917 	ldw	r8,36(r5)
8110dedc:	defee204 	addi	sp,sp,-1144
8110dee0:	00c10004 	movi	r3,1024
8110dee4:	dc011a15 	stw	r16,1128(sp)
8110dee8:	10bfff4c 	andi	r2,r2,65533
8110deec:	2821883a 	mov	r16,r5
8110def0:	d8cb883a 	add	r5,sp,r3
8110def4:	dc811c15 	stw	r18,1136(sp)
8110def8:	dc411b15 	stw	r17,1132(sp)
8110defc:	dfc11d15 	stw	ra,1140(sp)
8110df00:	2025883a 	mov	r18,r4
8110df04:	d881030d 	sth	r2,1036(sp)
8110df08:	dac11915 	stw	r11,1124(sp)
8110df0c:	da81038d 	sth	r10,1038(sp)
8110df10:	da410715 	stw	r9,1052(sp)
8110df14:	da010915 	stw	r8,1060(sp)
8110df18:	dec10015 	stw	sp,1024(sp)
8110df1c:	dec10415 	stw	sp,1040(sp)
8110df20:	d8c10215 	stw	r3,1032(sp)
8110df24:	d8c10515 	stw	r3,1044(sp)
8110df28:	d8010615 	stw	zero,1048(sp)
8110df2c:	110bcb40 	call	8110bcb4 <___vfprintf_internal_r>
8110df30:	1023883a 	mov	r17,r2
8110df34:	10000416 	blt	r2,zero,8110df48 <__sbprintf+0x80>
8110df38:	d9410004 	addi	r5,sp,1024
8110df3c:	9009883a 	mov	r4,r18
8110df40:	110fb7c0 	call	8110fb7c <_fflush_r>
8110df44:	10000d1e 	bne	r2,zero,8110df7c <__sbprintf+0xb4>
8110df48:	d881030b 	ldhu	r2,1036(sp)
8110df4c:	1080100c 	andi	r2,r2,64
8110df50:	10000326 	beq	r2,zero,8110df60 <__sbprintf+0x98>
8110df54:	8080030b 	ldhu	r2,12(r16)
8110df58:	10801014 	ori	r2,r2,64
8110df5c:	8080030d 	sth	r2,12(r16)
8110df60:	8805883a 	mov	r2,r17
8110df64:	dfc11d17 	ldw	ra,1140(sp)
8110df68:	dc811c17 	ldw	r18,1136(sp)
8110df6c:	dc411b17 	ldw	r17,1132(sp)
8110df70:	dc011a17 	ldw	r16,1128(sp)
8110df74:	dec11e04 	addi	sp,sp,1144
8110df78:	f800283a 	ret
8110df7c:	047fffc4 	movi	r17,-1
8110df80:	003ff106 	br	8110df48 <__reset+0xfb0edf48>

8110df84 <__swsetup_r>:
8110df84:	00a044b4 	movhi	r2,33042
8110df88:	defffd04 	addi	sp,sp,-12
8110df8c:	10819104 	addi	r2,r2,1604
8110df90:	dc400115 	stw	r17,4(sp)
8110df94:	2023883a 	mov	r17,r4
8110df98:	11000017 	ldw	r4,0(r2)
8110df9c:	dc000015 	stw	r16,0(sp)
8110dfa0:	dfc00215 	stw	ra,8(sp)
8110dfa4:	2821883a 	mov	r16,r5
8110dfa8:	20000226 	beq	r4,zero,8110dfb4 <__swsetup_r+0x30>
8110dfac:	20800e17 	ldw	r2,56(r4)
8110dfb0:	10003126 	beq	r2,zero,8110e078 <__swsetup_r+0xf4>
8110dfb4:	8080030b 	ldhu	r2,12(r16)
8110dfb8:	10c0020c 	andi	r3,r2,8
8110dfbc:	1009883a 	mov	r4,r2
8110dfc0:	18000f26 	beq	r3,zero,8110e000 <__swsetup_r+0x7c>
8110dfc4:	80c00417 	ldw	r3,16(r16)
8110dfc8:	18001526 	beq	r3,zero,8110e020 <__swsetup_r+0x9c>
8110dfcc:	1100004c 	andi	r4,r2,1
8110dfd0:	20001c1e 	bne	r4,zero,8110e044 <__swsetup_r+0xc0>
8110dfd4:	1080008c 	andi	r2,r2,2
8110dfd8:	1000291e 	bne	r2,zero,8110e080 <__swsetup_r+0xfc>
8110dfdc:	80800517 	ldw	r2,20(r16)
8110dfe0:	80800215 	stw	r2,8(r16)
8110dfe4:	18001c26 	beq	r3,zero,8110e058 <__swsetup_r+0xd4>
8110dfe8:	0005883a 	mov	r2,zero
8110dfec:	dfc00217 	ldw	ra,8(sp)
8110dff0:	dc400117 	ldw	r17,4(sp)
8110dff4:	dc000017 	ldw	r16,0(sp)
8110dff8:	dec00304 	addi	sp,sp,12
8110dffc:	f800283a 	ret
8110e000:	2080040c 	andi	r2,r4,16
8110e004:	10002e26 	beq	r2,zero,8110e0c0 <__swsetup_r+0x13c>
8110e008:	2080010c 	andi	r2,r4,4
8110e00c:	10001e1e 	bne	r2,zero,8110e088 <__swsetup_r+0x104>
8110e010:	80c00417 	ldw	r3,16(r16)
8110e014:	20800214 	ori	r2,r4,8
8110e018:	8080030d 	sth	r2,12(r16)
8110e01c:	183feb1e 	bne	r3,zero,8110dfcc <__reset+0xfb0edfcc>
8110e020:	1100a00c 	andi	r4,r2,640
8110e024:	01408004 	movi	r5,512
8110e028:	217fe826 	beq	r4,r5,8110dfcc <__reset+0xfb0edfcc>
8110e02c:	800b883a 	mov	r5,r16
8110e030:	8809883a 	mov	r4,r17
8110e034:	1110afc0 	call	81110afc <__smakebuf_r>
8110e038:	8080030b 	ldhu	r2,12(r16)
8110e03c:	80c00417 	ldw	r3,16(r16)
8110e040:	003fe206 	br	8110dfcc <__reset+0xfb0edfcc>
8110e044:	80800517 	ldw	r2,20(r16)
8110e048:	80000215 	stw	zero,8(r16)
8110e04c:	0085c83a 	sub	r2,zero,r2
8110e050:	80800615 	stw	r2,24(r16)
8110e054:	183fe41e 	bne	r3,zero,8110dfe8 <__reset+0xfb0edfe8>
8110e058:	80c0030b 	ldhu	r3,12(r16)
8110e05c:	0005883a 	mov	r2,zero
8110e060:	1900200c 	andi	r4,r3,128
8110e064:	203fe126 	beq	r4,zero,8110dfec <__reset+0xfb0edfec>
8110e068:	18c01014 	ori	r3,r3,64
8110e06c:	80c0030d 	sth	r3,12(r16)
8110e070:	00bfffc4 	movi	r2,-1
8110e074:	003fdd06 	br	8110dfec <__reset+0xfb0edfec>
8110e078:	110ff580 	call	8110ff58 <__sinit>
8110e07c:	003fcd06 	br	8110dfb4 <__reset+0xfb0edfb4>
8110e080:	0005883a 	mov	r2,zero
8110e084:	003fd606 	br	8110dfe0 <__reset+0xfb0edfe0>
8110e088:	81400c17 	ldw	r5,48(r16)
8110e08c:	28000626 	beq	r5,zero,8110e0a8 <__swsetup_r+0x124>
8110e090:	80801004 	addi	r2,r16,64
8110e094:	28800326 	beq	r5,r2,8110e0a4 <__swsetup_r+0x120>
8110e098:	8809883a 	mov	r4,r17
8110e09c:	11100cc0 	call	811100cc <_free_r>
8110e0a0:	8100030b 	ldhu	r4,12(r16)
8110e0a4:	80000c15 	stw	zero,48(r16)
8110e0a8:	80c00417 	ldw	r3,16(r16)
8110e0ac:	00bff6c4 	movi	r2,-37
8110e0b0:	1108703a 	and	r4,r2,r4
8110e0b4:	80000115 	stw	zero,4(r16)
8110e0b8:	80c00015 	stw	r3,0(r16)
8110e0bc:	003fd506 	br	8110e014 <__reset+0xfb0ee014>
8110e0c0:	00800244 	movi	r2,9
8110e0c4:	88800015 	stw	r2,0(r17)
8110e0c8:	20801014 	ori	r2,r4,64
8110e0cc:	8080030d 	sth	r2,12(r16)
8110e0d0:	00bfffc4 	movi	r2,-1
8110e0d4:	003fc506 	br	8110dfec <__reset+0xfb0edfec>

8110e0d8 <quorem>:
8110e0d8:	defff704 	addi	sp,sp,-36
8110e0dc:	dc800215 	stw	r18,8(sp)
8110e0e0:	20800417 	ldw	r2,16(r4)
8110e0e4:	2c800417 	ldw	r18,16(r5)
8110e0e8:	dfc00815 	stw	ra,32(sp)
8110e0ec:	ddc00715 	stw	r23,28(sp)
8110e0f0:	dd800615 	stw	r22,24(sp)
8110e0f4:	dd400515 	stw	r21,20(sp)
8110e0f8:	dd000415 	stw	r20,16(sp)
8110e0fc:	dcc00315 	stw	r19,12(sp)
8110e100:	dc400115 	stw	r17,4(sp)
8110e104:	dc000015 	stw	r16,0(sp)
8110e108:	14807116 	blt	r2,r18,8110e2d0 <quorem+0x1f8>
8110e10c:	94bfffc4 	addi	r18,r18,-1
8110e110:	94ad883a 	add	r22,r18,r18
8110e114:	b5ad883a 	add	r22,r22,r22
8110e118:	2c400504 	addi	r17,r5,20
8110e11c:	8da9883a 	add	r20,r17,r22
8110e120:	25400504 	addi	r21,r4,20
8110e124:	282f883a 	mov	r23,r5
8110e128:	adad883a 	add	r22,r21,r22
8110e12c:	a1400017 	ldw	r5,0(r20)
8110e130:	2021883a 	mov	r16,r4
8110e134:	b1000017 	ldw	r4,0(r22)
8110e138:	29400044 	addi	r5,r5,1
8110e13c:	1115ee80 	call	81115ee8 <__udivsi3>
8110e140:	1027883a 	mov	r19,r2
8110e144:	10002c26 	beq	r2,zero,8110e1f8 <quorem+0x120>
8110e148:	a813883a 	mov	r9,r21
8110e14c:	880b883a 	mov	r5,r17
8110e150:	0009883a 	mov	r4,zero
8110e154:	000d883a 	mov	r6,zero
8110e158:	2a000017 	ldw	r8,0(r5)
8110e15c:	49c00017 	ldw	r7,0(r9)
8110e160:	29400104 	addi	r5,r5,4
8110e164:	40bfffcc 	andi	r2,r8,65535
8110e168:	14c5383a 	mul	r2,r2,r19
8110e16c:	4010d43a 	srli	r8,r8,16
8110e170:	38ffffcc 	andi	r3,r7,65535
8110e174:	1105883a 	add	r2,r2,r4
8110e178:	1008d43a 	srli	r4,r2,16
8110e17c:	44d1383a 	mul	r8,r8,r19
8110e180:	198d883a 	add	r6,r3,r6
8110e184:	10ffffcc 	andi	r3,r2,65535
8110e188:	30c7c83a 	sub	r3,r6,r3
8110e18c:	380ed43a 	srli	r7,r7,16
8110e190:	4105883a 	add	r2,r8,r4
8110e194:	180dd43a 	srai	r6,r3,16
8110e198:	113fffcc 	andi	r4,r2,65535
8110e19c:	390fc83a 	sub	r7,r7,r4
8110e1a0:	398d883a 	add	r6,r7,r6
8110e1a4:	300e943a 	slli	r7,r6,16
8110e1a8:	18ffffcc 	andi	r3,r3,65535
8110e1ac:	1008d43a 	srli	r4,r2,16
8110e1b0:	38ceb03a 	or	r7,r7,r3
8110e1b4:	49c00015 	stw	r7,0(r9)
8110e1b8:	300dd43a 	srai	r6,r6,16
8110e1bc:	4a400104 	addi	r9,r9,4
8110e1c0:	a17fe52e 	bgeu	r20,r5,8110e158 <__reset+0xfb0ee158>
8110e1c4:	b0800017 	ldw	r2,0(r22)
8110e1c8:	10000b1e 	bne	r2,zero,8110e1f8 <quorem+0x120>
8110e1cc:	b0bfff04 	addi	r2,r22,-4
8110e1d0:	a880082e 	bgeu	r21,r2,8110e1f4 <quorem+0x11c>
8110e1d4:	b0ffff17 	ldw	r3,-4(r22)
8110e1d8:	18000326 	beq	r3,zero,8110e1e8 <quorem+0x110>
8110e1dc:	00000506 	br	8110e1f4 <quorem+0x11c>
8110e1e0:	10c00017 	ldw	r3,0(r2)
8110e1e4:	1800031e 	bne	r3,zero,8110e1f4 <quorem+0x11c>
8110e1e8:	10bfff04 	addi	r2,r2,-4
8110e1ec:	94bfffc4 	addi	r18,r18,-1
8110e1f0:	a8bffb36 	bltu	r21,r2,8110e1e0 <__reset+0xfb0ee1e0>
8110e1f4:	84800415 	stw	r18,16(r16)
8110e1f8:	b80b883a 	mov	r5,r23
8110e1fc:	8009883a 	mov	r4,r16
8110e200:	11120f40 	call	811120f4 <__mcmp>
8110e204:	10002616 	blt	r2,zero,8110e2a0 <quorem+0x1c8>
8110e208:	9cc00044 	addi	r19,r19,1
8110e20c:	a805883a 	mov	r2,r21
8110e210:	000b883a 	mov	r5,zero
8110e214:	11000017 	ldw	r4,0(r2)
8110e218:	89800017 	ldw	r6,0(r17)
8110e21c:	10800104 	addi	r2,r2,4
8110e220:	20ffffcc 	andi	r3,r4,65535
8110e224:	194b883a 	add	r5,r3,r5
8110e228:	30ffffcc 	andi	r3,r6,65535
8110e22c:	28c7c83a 	sub	r3,r5,r3
8110e230:	300cd43a 	srli	r6,r6,16
8110e234:	2008d43a 	srli	r4,r4,16
8110e238:	180bd43a 	srai	r5,r3,16
8110e23c:	18ffffcc 	andi	r3,r3,65535
8110e240:	2189c83a 	sub	r4,r4,r6
8110e244:	2149883a 	add	r4,r4,r5
8110e248:	200c943a 	slli	r6,r4,16
8110e24c:	8c400104 	addi	r17,r17,4
8110e250:	200bd43a 	srai	r5,r4,16
8110e254:	30c6b03a 	or	r3,r6,r3
8110e258:	10ffff15 	stw	r3,-4(r2)
8110e25c:	a47fed2e 	bgeu	r20,r17,8110e214 <__reset+0xfb0ee214>
8110e260:	9485883a 	add	r2,r18,r18
8110e264:	1085883a 	add	r2,r2,r2
8110e268:	a887883a 	add	r3,r21,r2
8110e26c:	18800017 	ldw	r2,0(r3)
8110e270:	10000b1e 	bne	r2,zero,8110e2a0 <quorem+0x1c8>
8110e274:	18bfff04 	addi	r2,r3,-4
8110e278:	a880082e 	bgeu	r21,r2,8110e29c <quorem+0x1c4>
8110e27c:	18ffff17 	ldw	r3,-4(r3)
8110e280:	18000326 	beq	r3,zero,8110e290 <quorem+0x1b8>
8110e284:	00000506 	br	8110e29c <quorem+0x1c4>
8110e288:	10c00017 	ldw	r3,0(r2)
8110e28c:	1800031e 	bne	r3,zero,8110e29c <quorem+0x1c4>
8110e290:	10bfff04 	addi	r2,r2,-4
8110e294:	94bfffc4 	addi	r18,r18,-1
8110e298:	a8bffb36 	bltu	r21,r2,8110e288 <__reset+0xfb0ee288>
8110e29c:	84800415 	stw	r18,16(r16)
8110e2a0:	9805883a 	mov	r2,r19
8110e2a4:	dfc00817 	ldw	ra,32(sp)
8110e2a8:	ddc00717 	ldw	r23,28(sp)
8110e2ac:	dd800617 	ldw	r22,24(sp)
8110e2b0:	dd400517 	ldw	r21,20(sp)
8110e2b4:	dd000417 	ldw	r20,16(sp)
8110e2b8:	dcc00317 	ldw	r19,12(sp)
8110e2bc:	dc800217 	ldw	r18,8(sp)
8110e2c0:	dc400117 	ldw	r17,4(sp)
8110e2c4:	dc000017 	ldw	r16,0(sp)
8110e2c8:	dec00904 	addi	sp,sp,36
8110e2cc:	f800283a 	ret
8110e2d0:	0005883a 	mov	r2,zero
8110e2d4:	003ff306 	br	8110e2a4 <__reset+0xfb0ee2a4>

8110e2d8 <_dtoa_r>:
8110e2d8:	20801017 	ldw	r2,64(r4)
8110e2dc:	deffde04 	addi	sp,sp,-136
8110e2e0:	df002015 	stw	fp,128(sp)
8110e2e4:	dcc01b15 	stw	r19,108(sp)
8110e2e8:	dc801a15 	stw	r18,104(sp)
8110e2ec:	dc401915 	stw	r17,100(sp)
8110e2f0:	dc001815 	stw	r16,96(sp)
8110e2f4:	dfc02115 	stw	ra,132(sp)
8110e2f8:	ddc01f15 	stw	r23,124(sp)
8110e2fc:	dd801e15 	stw	r22,120(sp)
8110e300:	dd401d15 	stw	r21,116(sp)
8110e304:	dd001c15 	stw	r20,112(sp)
8110e308:	d9c00315 	stw	r7,12(sp)
8110e30c:	2039883a 	mov	fp,r4
8110e310:	3023883a 	mov	r17,r6
8110e314:	2825883a 	mov	r18,r5
8110e318:	dc002417 	ldw	r16,144(sp)
8110e31c:	3027883a 	mov	r19,r6
8110e320:	10000826 	beq	r2,zero,8110e344 <_dtoa_r+0x6c>
8110e324:	21801117 	ldw	r6,68(r4)
8110e328:	00c00044 	movi	r3,1
8110e32c:	100b883a 	mov	r5,r2
8110e330:	1986983a 	sll	r3,r3,r6
8110e334:	11800115 	stw	r6,4(r2)
8110e338:	10c00215 	stw	r3,8(r2)
8110e33c:	11118d40 	call	811118d4 <_Bfree>
8110e340:	e0001015 	stw	zero,64(fp)
8110e344:	88002e16 	blt	r17,zero,8110e400 <_dtoa_r+0x128>
8110e348:	80000015 	stw	zero,0(r16)
8110e34c:	889ffc2c 	andhi	r2,r17,32752
8110e350:	00dffc34 	movhi	r3,32752
8110e354:	10c01c26 	beq	r2,r3,8110e3c8 <_dtoa_r+0xf0>
8110e358:	000d883a 	mov	r6,zero
8110e35c:	000f883a 	mov	r7,zero
8110e360:	9009883a 	mov	r4,r18
8110e364:	980b883a 	mov	r5,r19
8110e368:	11171380 	call	81117138 <__eqdf2>
8110e36c:	10002b1e 	bne	r2,zero,8110e41c <_dtoa_r+0x144>
8110e370:	d9c02317 	ldw	r7,140(sp)
8110e374:	00800044 	movi	r2,1
8110e378:	38800015 	stw	r2,0(r7)
8110e37c:	d8802517 	ldw	r2,148(sp)
8110e380:	10019e26 	beq	r2,zero,8110e9fc <_dtoa_r+0x724>
8110e384:	d8c02517 	ldw	r3,148(sp)
8110e388:	00a044b4 	movhi	r2,33042
8110e38c:	10b96844 	addi	r2,r2,-6751
8110e390:	18800015 	stw	r2,0(r3)
8110e394:	10bfffc4 	addi	r2,r2,-1
8110e398:	dfc02117 	ldw	ra,132(sp)
8110e39c:	df002017 	ldw	fp,128(sp)
8110e3a0:	ddc01f17 	ldw	r23,124(sp)
8110e3a4:	dd801e17 	ldw	r22,120(sp)
8110e3a8:	dd401d17 	ldw	r21,116(sp)
8110e3ac:	dd001c17 	ldw	r20,112(sp)
8110e3b0:	dcc01b17 	ldw	r19,108(sp)
8110e3b4:	dc801a17 	ldw	r18,104(sp)
8110e3b8:	dc401917 	ldw	r17,100(sp)
8110e3bc:	dc001817 	ldw	r16,96(sp)
8110e3c0:	dec02204 	addi	sp,sp,136
8110e3c4:	f800283a 	ret
8110e3c8:	d8c02317 	ldw	r3,140(sp)
8110e3cc:	0089c3c4 	movi	r2,9999
8110e3d0:	18800015 	stw	r2,0(r3)
8110e3d4:	90017726 	beq	r18,zero,8110e9b4 <_dtoa_r+0x6dc>
8110e3d8:	00a044b4 	movhi	r2,33042
8110e3dc:	10b97404 	addi	r2,r2,-6704
8110e3e0:	d9002517 	ldw	r4,148(sp)
8110e3e4:	203fec26 	beq	r4,zero,8110e398 <__reset+0xfb0ee398>
8110e3e8:	10c000c7 	ldb	r3,3(r2)
8110e3ec:	1801781e 	bne	r3,zero,8110e9d0 <_dtoa_r+0x6f8>
8110e3f0:	10c000c4 	addi	r3,r2,3
8110e3f4:	d9802517 	ldw	r6,148(sp)
8110e3f8:	30c00015 	stw	r3,0(r6)
8110e3fc:	003fe606 	br	8110e398 <__reset+0xfb0ee398>
8110e400:	04e00034 	movhi	r19,32768
8110e404:	9cffffc4 	addi	r19,r19,-1
8110e408:	00800044 	movi	r2,1
8110e40c:	8ce6703a 	and	r19,r17,r19
8110e410:	80800015 	stw	r2,0(r16)
8110e414:	9823883a 	mov	r17,r19
8110e418:	003fcc06 	br	8110e34c <__reset+0xfb0ee34c>
8110e41c:	d8800204 	addi	r2,sp,8
8110e420:	d8800015 	stw	r2,0(sp)
8110e424:	d9c00104 	addi	r7,sp,4
8110e428:	900b883a 	mov	r5,r18
8110e42c:	980d883a 	mov	r6,r19
8110e430:	e009883a 	mov	r4,fp
8110e434:	8820d53a 	srli	r16,r17,20
8110e438:	11124c00 	call	811124c0 <__d2b>
8110e43c:	d8800915 	stw	r2,36(sp)
8110e440:	8001651e 	bne	r16,zero,8110e9d8 <_dtoa_r+0x700>
8110e444:	dd800217 	ldw	r22,8(sp)
8110e448:	dc000117 	ldw	r16,4(sp)
8110e44c:	00800804 	movi	r2,32
8110e450:	b421883a 	add	r16,r22,r16
8110e454:	80c10c84 	addi	r3,r16,1074
8110e458:	10c2d10e 	bge	r2,r3,8110efa0 <_dtoa_r+0xcc8>
8110e45c:	00801004 	movi	r2,64
8110e460:	81010484 	addi	r4,r16,1042
8110e464:	10c7c83a 	sub	r3,r2,r3
8110e468:	9108d83a 	srl	r4,r18,r4
8110e46c:	88e2983a 	sll	r17,r17,r3
8110e470:	2448b03a 	or	r4,r4,r17
8110e474:	1117de80 	call	81117de8 <__floatunsidf>
8110e478:	017f8434 	movhi	r5,65040
8110e47c:	01800044 	movi	r6,1
8110e480:	1009883a 	mov	r4,r2
8110e484:	194b883a 	add	r5,r3,r5
8110e488:	843fffc4 	addi	r16,r16,-1
8110e48c:	d9801115 	stw	r6,68(sp)
8110e490:	000d883a 	mov	r6,zero
8110e494:	01cffe34 	movhi	r7,16376
8110e498:	11173900 	call	81117390 <__subdf3>
8110e49c:	0198dbf4 	movhi	r6,25455
8110e4a0:	01cff4f4 	movhi	r7,16339
8110e4a4:	3190d844 	addi	r6,r6,17249
8110e4a8:	39e1e9c4 	addi	r7,r7,-30809
8110e4ac:	1009883a 	mov	r4,r2
8110e4b0:	180b883a 	mov	r5,r3
8110e4b4:	110adc00 	call	8110adc0 <__muldf3>
8110e4b8:	01a2d874 	movhi	r6,35681
8110e4bc:	01cff1f4 	movhi	r7,16327
8110e4c0:	31b22cc4 	addi	r6,r6,-14157
8110e4c4:	39e28a04 	addi	r7,r7,-30168
8110e4c8:	180b883a 	mov	r5,r3
8110e4cc:	1009883a 	mov	r4,r2
8110e4d0:	1115fa40 	call	81115fa4 <__adddf3>
8110e4d4:	8009883a 	mov	r4,r16
8110e4d8:	1029883a 	mov	r20,r2
8110e4dc:	1823883a 	mov	r17,r3
8110e4e0:	1117d0c0 	call	81117d0c <__floatsidf>
8110e4e4:	019427f4 	movhi	r6,20639
8110e4e8:	01cff4f4 	movhi	r7,16339
8110e4ec:	319e7ec4 	addi	r6,r6,31227
8110e4f0:	39d104c4 	addi	r7,r7,17427
8110e4f4:	1009883a 	mov	r4,r2
8110e4f8:	180b883a 	mov	r5,r3
8110e4fc:	110adc00 	call	8110adc0 <__muldf3>
8110e500:	100d883a 	mov	r6,r2
8110e504:	180f883a 	mov	r7,r3
8110e508:	a009883a 	mov	r4,r20
8110e50c:	880b883a 	mov	r5,r17
8110e510:	1115fa40 	call	81115fa4 <__adddf3>
8110e514:	1009883a 	mov	r4,r2
8110e518:	180b883a 	mov	r5,r3
8110e51c:	1029883a 	mov	r20,r2
8110e520:	1823883a 	mov	r17,r3
8110e524:	1117c8c0 	call	81117c8c <__fixdfsi>
8110e528:	000d883a 	mov	r6,zero
8110e52c:	000f883a 	mov	r7,zero
8110e530:	a009883a 	mov	r4,r20
8110e534:	880b883a 	mov	r5,r17
8110e538:	d8800515 	stw	r2,20(sp)
8110e53c:	111729c0 	call	8111729c <__ledf2>
8110e540:	10028716 	blt	r2,zero,8110ef60 <_dtoa_r+0xc88>
8110e544:	d8c00517 	ldw	r3,20(sp)
8110e548:	00800584 	movi	r2,22
8110e54c:	10c27536 	bltu	r2,r3,8110ef24 <_dtoa_r+0xc4c>
8110e550:	180490fa 	slli	r2,r3,3
8110e554:	00e044b4 	movhi	r3,33042
8110e558:	18f98f04 	addi	r3,r3,-6596
8110e55c:	1885883a 	add	r2,r3,r2
8110e560:	11000017 	ldw	r4,0(r2)
8110e564:	11400117 	ldw	r5,4(r2)
8110e568:	900d883a 	mov	r6,r18
8110e56c:	980f883a 	mov	r7,r19
8110e570:	11171c00 	call	811171c0 <__gedf2>
8110e574:	00828d0e 	bge	zero,r2,8110efac <_dtoa_r+0xcd4>
8110e578:	d9000517 	ldw	r4,20(sp)
8110e57c:	d8000e15 	stw	zero,56(sp)
8110e580:	213fffc4 	addi	r4,r4,-1
8110e584:	d9000515 	stw	r4,20(sp)
8110e588:	b42dc83a 	sub	r22,r22,r16
8110e58c:	b5bfffc4 	addi	r22,r22,-1
8110e590:	b0026f16 	blt	r22,zero,8110ef50 <_dtoa_r+0xc78>
8110e594:	d8000815 	stw	zero,32(sp)
8110e598:	d9c00517 	ldw	r7,20(sp)
8110e59c:	38026416 	blt	r7,zero,8110ef30 <_dtoa_r+0xc58>
8110e5a0:	b1ed883a 	add	r22,r22,r7
8110e5a4:	d9c00d15 	stw	r7,52(sp)
8110e5a8:	d8000a15 	stw	zero,40(sp)
8110e5ac:	d9800317 	ldw	r6,12(sp)
8110e5b0:	00800244 	movi	r2,9
8110e5b4:	11811436 	bltu	r2,r6,8110ea08 <_dtoa_r+0x730>
8110e5b8:	00800144 	movi	r2,5
8110e5bc:	1184e10e 	bge	r2,r6,8110f944 <_dtoa_r+0x166c>
8110e5c0:	31bfff04 	addi	r6,r6,-4
8110e5c4:	d9800315 	stw	r6,12(sp)
8110e5c8:	0023883a 	mov	r17,zero
8110e5cc:	d9800317 	ldw	r6,12(sp)
8110e5d0:	008000c4 	movi	r2,3
8110e5d4:	30836726 	beq	r6,r2,8110f374 <_dtoa_r+0x109c>
8110e5d8:	1183410e 	bge	r2,r6,8110f2e0 <_dtoa_r+0x1008>
8110e5dc:	d9c00317 	ldw	r7,12(sp)
8110e5e0:	00800104 	movi	r2,4
8110e5e4:	38827c26 	beq	r7,r2,8110efd8 <_dtoa_r+0xd00>
8110e5e8:	00800144 	movi	r2,5
8110e5ec:	3884c41e 	bne	r7,r2,8110f900 <_dtoa_r+0x1628>
8110e5f0:	00800044 	movi	r2,1
8110e5f4:	d8800b15 	stw	r2,44(sp)
8110e5f8:	d8c00517 	ldw	r3,20(sp)
8110e5fc:	d9002217 	ldw	r4,136(sp)
8110e600:	1907883a 	add	r3,r3,r4
8110e604:	19800044 	addi	r6,r3,1
8110e608:	d8c00c15 	stw	r3,48(sp)
8110e60c:	d9800615 	stw	r6,24(sp)
8110e610:	0183a40e 	bge	zero,r6,8110f4a4 <_dtoa_r+0x11cc>
8110e614:	d9800617 	ldw	r6,24(sp)
8110e618:	3021883a 	mov	r16,r6
8110e61c:	e0001115 	stw	zero,68(fp)
8110e620:	008005c4 	movi	r2,23
8110e624:	1184c92e 	bgeu	r2,r6,8110f94c <_dtoa_r+0x1674>
8110e628:	00c00044 	movi	r3,1
8110e62c:	00800104 	movi	r2,4
8110e630:	1085883a 	add	r2,r2,r2
8110e634:	11000504 	addi	r4,r2,20
8110e638:	180b883a 	mov	r5,r3
8110e63c:	18c00044 	addi	r3,r3,1
8110e640:	313ffb2e 	bgeu	r6,r4,8110e630 <__reset+0xfb0ee630>
8110e644:	e1401115 	stw	r5,68(fp)
8110e648:	e009883a 	mov	r4,fp
8110e64c:	111182c0 	call	8111182c <_Balloc>
8110e650:	d8800715 	stw	r2,28(sp)
8110e654:	e0801015 	stw	r2,64(fp)
8110e658:	00800384 	movi	r2,14
8110e65c:	1400f736 	bltu	r2,r16,8110ea3c <_dtoa_r+0x764>
8110e660:	8800f626 	beq	r17,zero,8110ea3c <_dtoa_r+0x764>
8110e664:	d9c00517 	ldw	r7,20(sp)
8110e668:	01c39a0e 	bge	zero,r7,8110f4d4 <_dtoa_r+0x11fc>
8110e66c:	388003cc 	andi	r2,r7,15
8110e670:	100490fa 	slli	r2,r2,3
8110e674:	382bd13a 	srai	r21,r7,4
8110e678:	00e044b4 	movhi	r3,33042
8110e67c:	18f98f04 	addi	r3,r3,-6596
8110e680:	1885883a 	add	r2,r3,r2
8110e684:	a8c0040c 	andi	r3,r21,16
8110e688:	12400017 	ldw	r9,0(r2)
8110e68c:	12000117 	ldw	r8,4(r2)
8110e690:	18037926 	beq	r3,zero,8110f478 <_dtoa_r+0x11a0>
8110e694:	00a044b4 	movhi	r2,33042
8110e698:	10b98504 	addi	r2,r2,-6636
8110e69c:	11800817 	ldw	r6,32(r2)
8110e6a0:	11c00917 	ldw	r7,36(r2)
8110e6a4:	9009883a 	mov	r4,r18
8110e6a8:	980b883a 	mov	r5,r19
8110e6ac:	da001715 	stw	r8,92(sp)
8110e6b0:	da401615 	stw	r9,88(sp)
8110e6b4:	11168500 	call	81116850 <__divdf3>
8110e6b8:	da001717 	ldw	r8,92(sp)
8110e6bc:	da401617 	ldw	r9,88(sp)
8110e6c0:	ad4003cc 	andi	r21,r21,15
8110e6c4:	040000c4 	movi	r16,3
8110e6c8:	1023883a 	mov	r17,r2
8110e6cc:	1829883a 	mov	r20,r3
8110e6d0:	a8001126 	beq	r21,zero,8110e718 <_dtoa_r+0x440>
8110e6d4:	05e044b4 	movhi	r23,33042
8110e6d8:	bdf98504 	addi	r23,r23,-6636
8110e6dc:	4805883a 	mov	r2,r9
8110e6e0:	4007883a 	mov	r3,r8
8110e6e4:	a980004c 	andi	r6,r21,1
8110e6e8:	1009883a 	mov	r4,r2
8110e6ec:	a82bd07a 	srai	r21,r21,1
8110e6f0:	180b883a 	mov	r5,r3
8110e6f4:	30000426 	beq	r6,zero,8110e708 <_dtoa_r+0x430>
8110e6f8:	b9800017 	ldw	r6,0(r23)
8110e6fc:	b9c00117 	ldw	r7,4(r23)
8110e700:	84000044 	addi	r16,r16,1
8110e704:	110adc00 	call	8110adc0 <__muldf3>
8110e708:	bdc00204 	addi	r23,r23,8
8110e70c:	a83ff51e 	bne	r21,zero,8110e6e4 <__reset+0xfb0ee6e4>
8110e710:	1013883a 	mov	r9,r2
8110e714:	1811883a 	mov	r8,r3
8110e718:	480d883a 	mov	r6,r9
8110e71c:	400f883a 	mov	r7,r8
8110e720:	8809883a 	mov	r4,r17
8110e724:	a00b883a 	mov	r5,r20
8110e728:	11168500 	call	81116850 <__divdf3>
8110e72c:	d8800f15 	stw	r2,60(sp)
8110e730:	d8c01015 	stw	r3,64(sp)
8110e734:	d8c00e17 	ldw	r3,56(sp)
8110e738:	18000626 	beq	r3,zero,8110e754 <_dtoa_r+0x47c>
8110e73c:	d9000f17 	ldw	r4,60(sp)
8110e740:	d9401017 	ldw	r5,64(sp)
8110e744:	000d883a 	mov	r6,zero
8110e748:	01cffc34 	movhi	r7,16368
8110e74c:	111729c0 	call	8111729c <__ledf2>
8110e750:	10040b16 	blt	r2,zero,8110f780 <_dtoa_r+0x14a8>
8110e754:	8009883a 	mov	r4,r16
8110e758:	1117d0c0 	call	81117d0c <__floatsidf>
8110e75c:	d9800f17 	ldw	r6,60(sp)
8110e760:	d9c01017 	ldw	r7,64(sp)
8110e764:	1009883a 	mov	r4,r2
8110e768:	180b883a 	mov	r5,r3
8110e76c:	110adc00 	call	8110adc0 <__muldf3>
8110e770:	000d883a 	mov	r6,zero
8110e774:	01d00734 	movhi	r7,16412
8110e778:	1009883a 	mov	r4,r2
8110e77c:	180b883a 	mov	r5,r3
8110e780:	1115fa40 	call	81115fa4 <__adddf3>
8110e784:	1021883a 	mov	r16,r2
8110e788:	d8800617 	ldw	r2,24(sp)
8110e78c:	047f3034 	movhi	r17,64704
8110e790:	1c63883a 	add	r17,r3,r17
8110e794:	10031826 	beq	r2,zero,8110f3f8 <_dtoa_r+0x1120>
8110e798:	d8c00517 	ldw	r3,20(sp)
8110e79c:	db000617 	ldw	r12,24(sp)
8110e7a0:	d8c01315 	stw	r3,76(sp)
8110e7a4:	d9000b17 	ldw	r4,44(sp)
8110e7a8:	20038f26 	beq	r4,zero,8110f5e8 <_dtoa_r+0x1310>
8110e7ac:	60bfffc4 	addi	r2,r12,-1
8110e7b0:	100490fa 	slli	r2,r2,3
8110e7b4:	00e044b4 	movhi	r3,33042
8110e7b8:	18f98f04 	addi	r3,r3,-6596
8110e7bc:	1885883a 	add	r2,r3,r2
8110e7c0:	11800017 	ldw	r6,0(r2)
8110e7c4:	11c00117 	ldw	r7,4(r2)
8110e7c8:	d8800717 	ldw	r2,28(sp)
8110e7cc:	0009883a 	mov	r4,zero
8110e7d0:	014ff834 	movhi	r5,16352
8110e7d4:	db001615 	stw	r12,88(sp)
8110e7d8:	15c00044 	addi	r23,r2,1
8110e7dc:	11168500 	call	81116850 <__divdf3>
8110e7e0:	800d883a 	mov	r6,r16
8110e7e4:	880f883a 	mov	r7,r17
8110e7e8:	1009883a 	mov	r4,r2
8110e7ec:	180b883a 	mov	r5,r3
8110e7f0:	11173900 	call	81117390 <__subdf3>
8110e7f4:	d9401017 	ldw	r5,64(sp)
8110e7f8:	d9000f17 	ldw	r4,60(sp)
8110e7fc:	102b883a 	mov	r21,r2
8110e800:	d8c01215 	stw	r3,72(sp)
8110e804:	1117c8c0 	call	81117c8c <__fixdfsi>
8110e808:	1009883a 	mov	r4,r2
8110e80c:	1029883a 	mov	r20,r2
8110e810:	1117d0c0 	call	81117d0c <__floatsidf>
8110e814:	d9000f17 	ldw	r4,60(sp)
8110e818:	d9401017 	ldw	r5,64(sp)
8110e81c:	100d883a 	mov	r6,r2
8110e820:	180f883a 	mov	r7,r3
8110e824:	11173900 	call	81117390 <__subdf3>
8110e828:	1823883a 	mov	r17,r3
8110e82c:	d8c00717 	ldw	r3,28(sp)
8110e830:	d9401217 	ldw	r5,72(sp)
8110e834:	a2000c04 	addi	r8,r20,48
8110e838:	1021883a 	mov	r16,r2
8110e83c:	1a000005 	stb	r8,0(r3)
8110e840:	800d883a 	mov	r6,r16
8110e844:	880f883a 	mov	r7,r17
8110e848:	a809883a 	mov	r4,r21
8110e84c:	4029883a 	mov	r20,r8
8110e850:	11171c00 	call	811171c0 <__gedf2>
8110e854:	00841d16 	blt	zero,r2,8110f8cc <_dtoa_r+0x15f4>
8110e858:	800d883a 	mov	r6,r16
8110e85c:	880f883a 	mov	r7,r17
8110e860:	0009883a 	mov	r4,zero
8110e864:	014ffc34 	movhi	r5,16368
8110e868:	11173900 	call	81117390 <__subdf3>
8110e86c:	d9401217 	ldw	r5,72(sp)
8110e870:	100d883a 	mov	r6,r2
8110e874:	180f883a 	mov	r7,r3
8110e878:	a809883a 	mov	r4,r21
8110e87c:	11171c00 	call	811171c0 <__gedf2>
8110e880:	db001617 	ldw	r12,88(sp)
8110e884:	00840e16 	blt	zero,r2,8110f8c0 <_dtoa_r+0x15e8>
8110e888:	00800044 	movi	r2,1
8110e88c:	13006b0e 	bge	r2,r12,8110ea3c <_dtoa_r+0x764>
8110e890:	d9000717 	ldw	r4,28(sp)
8110e894:	dd800f15 	stw	r22,60(sp)
8110e898:	dcc01015 	stw	r19,64(sp)
8110e89c:	2319883a 	add	r12,r4,r12
8110e8a0:	dcc01217 	ldw	r19,72(sp)
8110e8a4:	602d883a 	mov	r22,r12
8110e8a8:	dc801215 	stw	r18,72(sp)
8110e8ac:	b825883a 	mov	r18,r23
8110e8b0:	00000906 	br	8110e8d8 <_dtoa_r+0x600>
8110e8b4:	11173900 	call	81117390 <__subdf3>
8110e8b8:	a80d883a 	mov	r6,r21
8110e8bc:	980f883a 	mov	r7,r19
8110e8c0:	1009883a 	mov	r4,r2
8110e8c4:	180b883a 	mov	r5,r3
8110e8c8:	111729c0 	call	8111729c <__ledf2>
8110e8cc:	1003e816 	blt	r2,zero,8110f870 <_dtoa_r+0x1598>
8110e8d0:	b825883a 	mov	r18,r23
8110e8d4:	bd83e926 	beq	r23,r22,8110f87c <_dtoa_r+0x15a4>
8110e8d8:	a809883a 	mov	r4,r21
8110e8dc:	980b883a 	mov	r5,r19
8110e8e0:	000d883a 	mov	r6,zero
8110e8e4:	01d00934 	movhi	r7,16420
8110e8e8:	110adc00 	call	8110adc0 <__muldf3>
8110e8ec:	000d883a 	mov	r6,zero
8110e8f0:	01d00934 	movhi	r7,16420
8110e8f4:	8009883a 	mov	r4,r16
8110e8f8:	880b883a 	mov	r5,r17
8110e8fc:	102b883a 	mov	r21,r2
8110e900:	1827883a 	mov	r19,r3
8110e904:	110adc00 	call	8110adc0 <__muldf3>
8110e908:	180b883a 	mov	r5,r3
8110e90c:	1009883a 	mov	r4,r2
8110e910:	1821883a 	mov	r16,r3
8110e914:	1023883a 	mov	r17,r2
8110e918:	1117c8c0 	call	81117c8c <__fixdfsi>
8110e91c:	1009883a 	mov	r4,r2
8110e920:	1029883a 	mov	r20,r2
8110e924:	1117d0c0 	call	81117d0c <__floatsidf>
8110e928:	8809883a 	mov	r4,r17
8110e92c:	800b883a 	mov	r5,r16
8110e930:	100d883a 	mov	r6,r2
8110e934:	180f883a 	mov	r7,r3
8110e938:	11173900 	call	81117390 <__subdf3>
8110e93c:	a5000c04 	addi	r20,r20,48
8110e940:	a80d883a 	mov	r6,r21
8110e944:	980f883a 	mov	r7,r19
8110e948:	1009883a 	mov	r4,r2
8110e94c:	180b883a 	mov	r5,r3
8110e950:	95000005 	stb	r20,0(r18)
8110e954:	1021883a 	mov	r16,r2
8110e958:	1823883a 	mov	r17,r3
8110e95c:	111729c0 	call	8111729c <__ledf2>
8110e960:	bdc00044 	addi	r23,r23,1
8110e964:	800d883a 	mov	r6,r16
8110e968:	880f883a 	mov	r7,r17
8110e96c:	0009883a 	mov	r4,zero
8110e970:	014ffc34 	movhi	r5,16368
8110e974:	103fcf0e 	bge	r2,zero,8110e8b4 <__reset+0xfb0ee8b4>
8110e978:	d8c01317 	ldw	r3,76(sp)
8110e97c:	d8c00515 	stw	r3,20(sp)
8110e980:	d9400917 	ldw	r5,36(sp)
8110e984:	e009883a 	mov	r4,fp
8110e988:	11118d40 	call	811118d4 <_Bfree>
8110e98c:	d9000517 	ldw	r4,20(sp)
8110e990:	d9802317 	ldw	r6,140(sp)
8110e994:	d9c02517 	ldw	r7,148(sp)
8110e998:	b8000005 	stb	zero,0(r23)
8110e99c:	20800044 	addi	r2,r4,1
8110e9a0:	30800015 	stw	r2,0(r6)
8110e9a4:	3802aa26 	beq	r7,zero,8110f450 <_dtoa_r+0x1178>
8110e9a8:	3dc00015 	stw	r23,0(r7)
8110e9ac:	d8800717 	ldw	r2,28(sp)
8110e9b0:	003e7906 	br	8110e398 <__reset+0xfb0ee398>
8110e9b4:	00800434 	movhi	r2,16
8110e9b8:	10bfffc4 	addi	r2,r2,-1
8110e9bc:	88a2703a 	and	r17,r17,r2
8110e9c0:	883e851e 	bne	r17,zero,8110e3d8 <__reset+0xfb0ee3d8>
8110e9c4:	00a044b4 	movhi	r2,33042
8110e9c8:	10b97104 	addi	r2,r2,-6716
8110e9cc:	003e8406 	br	8110e3e0 <__reset+0xfb0ee3e0>
8110e9d0:	10c00204 	addi	r3,r2,8
8110e9d4:	003e8706 	br	8110e3f4 <__reset+0xfb0ee3f4>
8110e9d8:	01400434 	movhi	r5,16
8110e9dc:	297fffc4 	addi	r5,r5,-1
8110e9e0:	994a703a 	and	r5,r19,r5
8110e9e4:	9009883a 	mov	r4,r18
8110e9e8:	843f0044 	addi	r16,r16,-1023
8110e9ec:	294ffc34 	orhi	r5,r5,16368
8110e9f0:	dd800217 	ldw	r22,8(sp)
8110e9f4:	d8001115 	stw	zero,68(sp)
8110e9f8:	003ea506 	br	8110e490 <__reset+0xfb0ee490>
8110e9fc:	00a044b4 	movhi	r2,33042
8110ea00:	10b96804 	addi	r2,r2,-6752
8110ea04:	003e6406 	br	8110e398 <__reset+0xfb0ee398>
8110ea08:	e0001115 	stw	zero,68(fp)
8110ea0c:	000b883a 	mov	r5,zero
8110ea10:	e009883a 	mov	r4,fp
8110ea14:	111182c0 	call	8111182c <_Balloc>
8110ea18:	01bfffc4 	movi	r6,-1
8110ea1c:	01c00044 	movi	r7,1
8110ea20:	d8800715 	stw	r2,28(sp)
8110ea24:	d9800c15 	stw	r6,48(sp)
8110ea28:	e0801015 	stw	r2,64(fp)
8110ea2c:	d8000315 	stw	zero,12(sp)
8110ea30:	d9c00b15 	stw	r7,44(sp)
8110ea34:	d9800615 	stw	r6,24(sp)
8110ea38:	d8002215 	stw	zero,136(sp)
8110ea3c:	d8800117 	ldw	r2,4(sp)
8110ea40:	10008916 	blt	r2,zero,8110ec68 <_dtoa_r+0x990>
8110ea44:	d9000517 	ldw	r4,20(sp)
8110ea48:	00c00384 	movi	r3,14
8110ea4c:	19008616 	blt	r3,r4,8110ec68 <_dtoa_r+0x990>
8110ea50:	200490fa 	slli	r2,r4,3
8110ea54:	00e044b4 	movhi	r3,33042
8110ea58:	d9802217 	ldw	r6,136(sp)
8110ea5c:	18f98f04 	addi	r3,r3,-6596
8110ea60:	1885883a 	add	r2,r3,r2
8110ea64:	14000017 	ldw	r16,0(r2)
8110ea68:	14400117 	ldw	r17,4(r2)
8110ea6c:	30016316 	blt	r6,zero,8110effc <_dtoa_r+0xd24>
8110ea70:	800d883a 	mov	r6,r16
8110ea74:	880f883a 	mov	r7,r17
8110ea78:	9009883a 	mov	r4,r18
8110ea7c:	980b883a 	mov	r5,r19
8110ea80:	11168500 	call	81116850 <__divdf3>
8110ea84:	180b883a 	mov	r5,r3
8110ea88:	1009883a 	mov	r4,r2
8110ea8c:	1117c8c0 	call	81117c8c <__fixdfsi>
8110ea90:	1009883a 	mov	r4,r2
8110ea94:	102b883a 	mov	r21,r2
8110ea98:	1117d0c0 	call	81117d0c <__floatsidf>
8110ea9c:	800d883a 	mov	r6,r16
8110eaa0:	880f883a 	mov	r7,r17
8110eaa4:	1009883a 	mov	r4,r2
8110eaa8:	180b883a 	mov	r5,r3
8110eaac:	110adc00 	call	8110adc0 <__muldf3>
8110eab0:	100d883a 	mov	r6,r2
8110eab4:	180f883a 	mov	r7,r3
8110eab8:	9009883a 	mov	r4,r18
8110eabc:	980b883a 	mov	r5,r19
8110eac0:	11173900 	call	81117390 <__subdf3>
8110eac4:	d9c00717 	ldw	r7,28(sp)
8110eac8:	1009883a 	mov	r4,r2
8110eacc:	a8800c04 	addi	r2,r21,48
8110ead0:	38800005 	stb	r2,0(r7)
8110ead4:	3dc00044 	addi	r23,r7,1
8110ead8:	d9c00617 	ldw	r7,24(sp)
8110eadc:	01800044 	movi	r6,1
8110eae0:	180b883a 	mov	r5,r3
8110eae4:	2005883a 	mov	r2,r4
8110eae8:	39803826 	beq	r7,r6,8110ebcc <_dtoa_r+0x8f4>
8110eaec:	000d883a 	mov	r6,zero
8110eaf0:	01d00934 	movhi	r7,16420
8110eaf4:	110adc00 	call	8110adc0 <__muldf3>
8110eaf8:	000d883a 	mov	r6,zero
8110eafc:	000f883a 	mov	r7,zero
8110eb00:	1009883a 	mov	r4,r2
8110eb04:	180b883a 	mov	r5,r3
8110eb08:	1025883a 	mov	r18,r2
8110eb0c:	1827883a 	mov	r19,r3
8110eb10:	11171380 	call	81117138 <__eqdf2>
8110eb14:	103f9a26 	beq	r2,zero,8110e980 <__reset+0xfb0ee980>
8110eb18:	d9c00617 	ldw	r7,24(sp)
8110eb1c:	d8c00717 	ldw	r3,28(sp)
8110eb20:	b829883a 	mov	r20,r23
8110eb24:	38bfffc4 	addi	r2,r7,-1
8110eb28:	18ad883a 	add	r22,r3,r2
8110eb2c:	00000a06 	br	8110eb58 <_dtoa_r+0x880>
8110eb30:	110adc00 	call	8110adc0 <__muldf3>
8110eb34:	000d883a 	mov	r6,zero
8110eb38:	000f883a 	mov	r7,zero
8110eb3c:	1009883a 	mov	r4,r2
8110eb40:	180b883a 	mov	r5,r3
8110eb44:	1025883a 	mov	r18,r2
8110eb48:	1827883a 	mov	r19,r3
8110eb4c:	b829883a 	mov	r20,r23
8110eb50:	11171380 	call	81117138 <__eqdf2>
8110eb54:	103f8a26 	beq	r2,zero,8110e980 <__reset+0xfb0ee980>
8110eb58:	800d883a 	mov	r6,r16
8110eb5c:	880f883a 	mov	r7,r17
8110eb60:	9009883a 	mov	r4,r18
8110eb64:	980b883a 	mov	r5,r19
8110eb68:	11168500 	call	81116850 <__divdf3>
8110eb6c:	180b883a 	mov	r5,r3
8110eb70:	1009883a 	mov	r4,r2
8110eb74:	1117c8c0 	call	81117c8c <__fixdfsi>
8110eb78:	1009883a 	mov	r4,r2
8110eb7c:	102b883a 	mov	r21,r2
8110eb80:	1117d0c0 	call	81117d0c <__floatsidf>
8110eb84:	800d883a 	mov	r6,r16
8110eb88:	880f883a 	mov	r7,r17
8110eb8c:	1009883a 	mov	r4,r2
8110eb90:	180b883a 	mov	r5,r3
8110eb94:	110adc00 	call	8110adc0 <__muldf3>
8110eb98:	100d883a 	mov	r6,r2
8110eb9c:	180f883a 	mov	r7,r3
8110eba0:	9009883a 	mov	r4,r18
8110eba4:	980b883a 	mov	r5,r19
8110eba8:	11173900 	call	81117390 <__subdf3>
8110ebac:	aa000c04 	addi	r8,r21,48
8110ebb0:	a2000005 	stb	r8,0(r20)
8110ebb4:	000d883a 	mov	r6,zero
8110ebb8:	01d00934 	movhi	r7,16420
8110ebbc:	1009883a 	mov	r4,r2
8110ebc0:	180b883a 	mov	r5,r3
8110ebc4:	a5c00044 	addi	r23,r20,1
8110ebc8:	b53fd91e 	bne	r22,r20,8110eb30 <__reset+0xfb0eeb30>
8110ebcc:	100d883a 	mov	r6,r2
8110ebd0:	180f883a 	mov	r7,r3
8110ebd4:	1009883a 	mov	r4,r2
8110ebd8:	180b883a 	mov	r5,r3
8110ebdc:	1115fa40 	call	81115fa4 <__adddf3>
8110ebe0:	100d883a 	mov	r6,r2
8110ebe4:	180f883a 	mov	r7,r3
8110ebe8:	8009883a 	mov	r4,r16
8110ebec:	880b883a 	mov	r5,r17
8110ebf0:	1027883a 	mov	r19,r2
8110ebf4:	1825883a 	mov	r18,r3
8110ebf8:	111729c0 	call	8111729c <__ledf2>
8110ebfc:	10000816 	blt	r2,zero,8110ec20 <_dtoa_r+0x948>
8110ec00:	980d883a 	mov	r6,r19
8110ec04:	900f883a 	mov	r7,r18
8110ec08:	8009883a 	mov	r4,r16
8110ec0c:	880b883a 	mov	r5,r17
8110ec10:	11171380 	call	81117138 <__eqdf2>
8110ec14:	103f5a1e 	bne	r2,zero,8110e980 <__reset+0xfb0ee980>
8110ec18:	ad40004c 	andi	r21,r21,1
8110ec1c:	a83f5826 	beq	r21,zero,8110e980 <__reset+0xfb0ee980>
8110ec20:	bd3fffc3 	ldbu	r20,-1(r23)
8110ec24:	b8bfffc4 	addi	r2,r23,-1
8110ec28:	1007883a 	mov	r3,r2
8110ec2c:	01400e44 	movi	r5,57
8110ec30:	d9800717 	ldw	r6,28(sp)
8110ec34:	00000506 	br	8110ec4c <_dtoa_r+0x974>
8110ec38:	18ffffc4 	addi	r3,r3,-1
8110ec3c:	11824726 	beq	r2,r6,8110f55c <_dtoa_r+0x1284>
8110ec40:	1d000003 	ldbu	r20,0(r3)
8110ec44:	102f883a 	mov	r23,r2
8110ec48:	10bfffc4 	addi	r2,r2,-1
8110ec4c:	a1003fcc 	andi	r4,r20,255
8110ec50:	2100201c 	xori	r4,r4,128
8110ec54:	213fe004 	addi	r4,r4,-128
8110ec58:	217ff726 	beq	r4,r5,8110ec38 <__reset+0xfb0eec38>
8110ec5c:	a2000044 	addi	r8,r20,1
8110ec60:	12000005 	stb	r8,0(r2)
8110ec64:	003f4606 	br	8110e980 <__reset+0xfb0ee980>
8110ec68:	d9000b17 	ldw	r4,44(sp)
8110ec6c:	2000c826 	beq	r4,zero,8110ef90 <_dtoa_r+0xcb8>
8110ec70:	d9800317 	ldw	r6,12(sp)
8110ec74:	00c00044 	movi	r3,1
8110ec78:	1980f90e 	bge	r3,r6,8110f060 <_dtoa_r+0xd88>
8110ec7c:	d8800617 	ldw	r2,24(sp)
8110ec80:	d8c00a17 	ldw	r3,40(sp)
8110ec84:	157fffc4 	addi	r21,r2,-1
8110ec88:	1d41f316 	blt	r3,r21,8110f458 <_dtoa_r+0x1180>
8110ec8c:	1d6bc83a 	sub	r21,r3,r21
8110ec90:	d9c00617 	ldw	r7,24(sp)
8110ec94:	3802aa16 	blt	r7,zero,8110f740 <_dtoa_r+0x1468>
8110ec98:	dd000817 	ldw	r20,32(sp)
8110ec9c:	d8800617 	ldw	r2,24(sp)
8110eca0:	d8c00817 	ldw	r3,32(sp)
8110eca4:	01400044 	movi	r5,1
8110eca8:	e009883a 	mov	r4,fp
8110ecac:	1887883a 	add	r3,r3,r2
8110ecb0:	d8c00815 	stw	r3,32(sp)
8110ecb4:	b0ad883a 	add	r22,r22,r2
8110ecb8:	1111c380 	call	81111c38 <__i2b>
8110ecbc:	1023883a 	mov	r17,r2
8110ecc0:	a0000826 	beq	r20,zero,8110ece4 <_dtoa_r+0xa0c>
8110ecc4:	0580070e 	bge	zero,r22,8110ece4 <_dtoa_r+0xa0c>
8110ecc8:	a005883a 	mov	r2,r20
8110eccc:	b500b916 	blt	r22,r20,8110efb4 <_dtoa_r+0xcdc>
8110ecd0:	d9000817 	ldw	r4,32(sp)
8110ecd4:	a0a9c83a 	sub	r20,r20,r2
8110ecd8:	b0adc83a 	sub	r22,r22,r2
8110ecdc:	2089c83a 	sub	r4,r4,r2
8110ece0:	d9000815 	stw	r4,32(sp)
8110ece4:	d9800a17 	ldw	r6,40(sp)
8110ece8:	0181810e 	bge	zero,r6,8110f2f0 <_dtoa_r+0x1018>
8110ecec:	d9c00b17 	ldw	r7,44(sp)
8110ecf0:	3800b326 	beq	r7,zero,8110efc0 <_dtoa_r+0xce8>
8110ecf4:	a800b226 	beq	r21,zero,8110efc0 <_dtoa_r+0xce8>
8110ecf8:	880b883a 	mov	r5,r17
8110ecfc:	a80d883a 	mov	r6,r21
8110ed00:	e009883a 	mov	r4,fp
8110ed04:	1111e6c0 	call	81111e6c <__pow5mult>
8110ed08:	d9800917 	ldw	r6,36(sp)
8110ed0c:	100b883a 	mov	r5,r2
8110ed10:	e009883a 	mov	r4,fp
8110ed14:	1023883a 	mov	r17,r2
8110ed18:	1111c740 	call	81111c74 <__multiply>
8110ed1c:	1021883a 	mov	r16,r2
8110ed20:	d8800a17 	ldw	r2,40(sp)
8110ed24:	d9400917 	ldw	r5,36(sp)
8110ed28:	e009883a 	mov	r4,fp
8110ed2c:	1545c83a 	sub	r2,r2,r21
8110ed30:	d8800a15 	stw	r2,40(sp)
8110ed34:	11118d40 	call	811118d4 <_Bfree>
8110ed38:	d8c00a17 	ldw	r3,40(sp)
8110ed3c:	18009f1e 	bne	r3,zero,8110efbc <_dtoa_r+0xce4>
8110ed40:	05c00044 	movi	r23,1
8110ed44:	e009883a 	mov	r4,fp
8110ed48:	b80b883a 	mov	r5,r23
8110ed4c:	1111c380 	call	81111c38 <__i2b>
8110ed50:	d9000d17 	ldw	r4,52(sp)
8110ed54:	102b883a 	mov	r21,r2
8110ed58:	2000ce26 	beq	r4,zero,8110f094 <_dtoa_r+0xdbc>
8110ed5c:	200d883a 	mov	r6,r4
8110ed60:	100b883a 	mov	r5,r2
8110ed64:	e009883a 	mov	r4,fp
8110ed68:	1111e6c0 	call	81111e6c <__pow5mult>
8110ed6c:	d9800317 	ldw	r6,12(sp)
8110ed70:	102b883a 	mov	r21,r2
8110ed74:	b981810e 	bge	r23,r6,8110f37c <_dtoa_r+0x10a4>
8110ed78:	0027883a 	mov	r19,zero
8110ed7c:	a8800417 	ldw	r2,16(r21)
8110ed80:	05c00804 	movi	r23,32
8110ed84:	10800104 	addi	r2,r2,4
8110ed88:	1085883a 	add	r2,r2,r2
8110ed8c:	1085883a 	add	r2,r2,r2
8110ed90:	a885883a 	add	r2,r21,r2
8110ed94:	11000017 	ldw	r4,0(r2)
8110ed98:	1111b200 	call	81111b20 <__hi0bits>
8110ed9c:	b885c83a 	sub	r2,r23,r2
8110eda0:	1585883a 	add	r2,r2,r22
8110eda4:	108007cc 	andi	r2,r2,31
8110eda8:	1000b326 	beq	r2,zero,8110f078 <_dtoa_r+0xda0>
8110edac:	00c00804 	movi	r3,32
8110edb0:	1887c83a 	sub	r3,r3,r2
8110edb4:	01000104 	movi	r4,4
8110edb8:	20c2cd0e 	bge	r4,r3,8110f8f0 <_dtoa_r+0x1618>
8110edbc:	00c00704 	movi	r3,28
8110edc0:	1885c83a 	sub	r2,r3,r2
8110edc4:	d8c00817 	ldw	r3,32(sp)
8110edc8:	a0a9883a 	add	r20,r20,r2
8110edcc:	b0ad883a 	add	r22,r22,r2
8110edd0:	1887883a 	add	r3,r3,r2
8110edd4:	d8c00815 	stw	r3,32(sp)
8110edd8:	d9800817 	ldw	r6,32(sp)
8110eddc:	0180040e 	bge	zero,r6,8110edf0 <_dtoa_r+0xb18>
8110ede0:	800b883a 	mov	r5,r16
8110ede4:	e009883a 	mov	r4,fp
8110ede8:	1111fac0 	call	81111fac <__lshift>
8110edec:	1021883a 	mov	r16,r2
8110edf0:	0580050e 	bge	zero,r22,8110ee08 <_dtoa_r+0xb30>
8110edf4:	a80b883a 	mov	r5,r21
8110edf8:	b00d883a 	mov	r6,r22
8110edfc:	e009883a 	mov	r4,fp
8110ee00:	1111fac0 	call	81111fac <__lshift>
8110ee04:	102b883a 	mov	r21,r2
8110ee08:	d9c00e17 	ldw	r7,56(sp)
8110ee0c:	3801211e 	bne	r7,zero,8110f294 <_dtoa_r+0xfbc>
8110ee10:	d9800617 	ldw	r6,24(sp)
8110ee14:	0181380e 	bge	zero,r6,8110f2f8 <_dtoa_r+0x1020>
8110ee18:	d8c00b17 	ldw	r3,44(sp)
8110ee1c:	1800ab1e 	bne	r3,zero,8110f0cc <_dtoa_r+0xdf4>
8110ee20:	dc800717 	ldw	r18,28(sp)
8110ee24:	dcc00617 	ldw	r19,24(sp)
8110ee28:	9029883a 	mov	r20,r18
8110ee2c:	00000206 	br	8110ee38 <_dtoa_r+0xb60>
8110ee30:	11118fc0 	call	811118fc <__multadd>
8110ee34:	1021883a 	mov	r16,r2
8110ee38:	a80b883a 	mov	r5,r21
8110ee3c:	8009883a 	mov	r4,r16
8110ee40:	110e0d80 	call	8110e0d8 <quorem>
8110ee44:	10800c04 	addi	r2,r2,48
8110ee48:	90800005 	stb	r2,0(r18)
8110ee4c:	94800044 	addi	r18,r18,1
8110ee50:	9507c83a 	sub	r3,r18,r20
8110ee54:	000f883a 	mov	r7,zero
8110ee58:	01800284 	movi	r6,10
8110ee5c:	800b883a 	mov	r5,r16
8110ee60:	e009883a 	mov	r4,fp
8110ee64:	1cfff216 	blt	r3,r19,8110ee30 <__reset+0xfb0eee30>
8110ee68:	1011883a 	mov	r8,r2
8110ee6c:	d8800617 	ldw	r2,24(sp)
8110ee70:	0082370e 	bge	zero,r2,8110f750 <_dtoa_r+0x1478>
8110ee74:	d9000717 	ldw	r4,28(sp)
8110ee78:	0025883a 	mov	r18,zero
8110ee7c:	20af883a 	add	r23,r4,r2
8110ee80:	01800044 	movi	r6,1
8110ee84:	800b883a 	mov	r5,r16
8110ee88:	e009883a 	mov	r4,fp
8110ee8c:	da001715 	stw	r8,92(sp)
8110ee90:	1111fac0 	call	81111fac <__lshift>
8110ee94:	a80b883a 	mov	r5,r21
8110ee98:	1009883a 	mov	r4,r2
8110ee9c:	d8800915 	stw	r2,36(sp)
8110eea0:	11120f40 	call	811120f4 <__mcmp>
8110eea4:	da001717 	ldw	r8,92(sp)
8110eea8:	0081800e 	bge	zero,r2,8110f4ac <_dtoa_r+0x11d4>
8110eeac:	b93fffc3 	ldbu	r4,-1(r23)
8110eeb0:	b8bfffc4 	addi	r2,r23,-1
8110eeb4:	1007883a 	mov	r3,r2
8110eeb8:	01800e44 	movi	r6,57
8110eebc:	d9c00717 	ldw	r7,28(sp)
8110eec0:	00000506 	br	8110eed8 <_dtoa_r+0xc00>
8110eec4:	18ffffc4 	addi	r3,r3,-1
8110eec8:	11c12326 	beq	r2,r7,8110f358 <_dtoa_r+0x1080>
8110eecc:	19000003 	ldbu	r4,0(r3)
8110eed0:	102f883a 	mov	r23,r2
8110eed4:	10bfffc4 	addi	r2,r2,-1
8110eed8:	21403fcc 	andi	r5,r4,255
8110eedc:	2940201c 	xori	r5,r5,128
8110eee0:	297fe004 	addi	r5,r5,-128
8110eee4:	29bff726 	beq	r5,r6,8110eec4 <__reset+0xfb0eeec4>
8110eee8:	21000044 	addi	r4,r4,1
8110eeec:	11000005 	stb	r4,0(r2)
8110eef0:	a80b883a 	mov	r5,r21
8110eef4:	e009883a 	mov	r4,fp
8110eef8:	11118d40 	call	811118d4 <_Bfree>
8110eefc:	883ea026 	beq	r17,zero,8110e980 <__reset+0xfb0ee980>
8110ef00:	90000426 	beq	r18,zero,8110ef14 <_dtoa_r+0xc3c>
8110ef04:	94400326 	beq	r18,r17,8110ef14 <_dtoa_r+0xc3c>
8110ef08:	900b883a 	mov	r5,r18
8110ef0c:	e009883a 	mov	r4,fp
8110ef10:	11118d40 	call	811118d4 <_Bfree>
8110ef14:	880b883a 	mov	r5,r17
8110ef18:	e009883a 	mov	r4,fp
8110ef1c:	11118d40 	call	811118d4 <_Bfree>
8110ef20:	003e9706 	br	8110e980 <__reset+0xfb0ee980>
8110ef24:	01800044 	movi	r6,1
8110ef28:	d9800e15 	stw	r6,56(sp)
8110ef2c:	003d9606 	br	8110e588 <__reset+0xfb0ee588>
8110ef30:	d8800817 	ldw	r2,32(sp)
8110ef34:	d8c00517 	ldw	r3,20(sp)
8110ef38:	d8000d15 	stw	zero,52(sp)
8110ef3c:	10c5c83a 	sub	r2,r2,r3
8110ef40:	00c9c83a 	sub	r4,zero,r3
8110ef44:	d8800815 	stw	r2,32(sp)
8110ef48:	d9000a15 	stw	r4,40(sp)
8110ef4c:	003d9706 	br	8110e5ac <__reset+0xfb0ee5ac>
8110ef50:	05adc83a 	sub	r22,zero,r22
8110ef54:	dd800815 	stw	r22,32(sp)
8110ef58:	002d883a 	mov	r22,zero
8110ef5c:	003d8e06 	br	8110e598 <__reset+0xfb0ee598>
8110ef60:	d9000517 	ldw	r4,20(sp)
8110ef64:	1117d0c0 	call	81117d0c <__floatsidf>
8110ef68:	100d883a 	mov	r6,r2
8110ef6c:	180f883a 	mov	r7,r3
8110ef70:	a009883a 	mov	r4,r20
8110ef74:	880b883a 	mov	r5,r17
8110ef78:	11171380 	call	81117138 <__eqdf2>
8110ef7c:	103d7126 	beq	r2,zero,8110e544 <__reset+0xfb0ee544>
8110ef80:	d9c00517 	ldw	r7,20(sp)
8110ef84:	39ffffc4 	addi	r7,r7,-1
8110ef88:	d9c00515 	stw	r7,20(sp)
8110ef8c:	003d6d06 	br	8110e544 <__reset+0xfb0ee544>
8110ef90:	dd400a17 	ldw	r21,40(sp)
8110ef94:	dd000817 	ldw	r20,32(sp)
8110ef98:	0023883a 	mov	r17,zero
8110ef9c:	003f4806 	br	8110ecc0 <__reset+0xfb0eecc0>
8110efa0:	10e3c83a 	sub	r17,r2,r3
8110efa4:	9448983a 	sll	r4,r18,r17
8110efa8:	003d3206 	br	8110e474 <__reset+0xfb0ee474>
8110efac:	d8000e15 	stw	zero,56(sp)
8110efb0:	003d7506 	br	8110e588 <__reset+0xfb0ee588>
8110efb4:	b005883a 	mov	r2,r22
8110efb8:	003f4506 	br	8110ecd0 <__reset+0xfb0eecd0>
8110efbc:	dc000915 	stw	r16,36(sp)
8110efc0:	d9800a17 	ldw	r6,40(sp)
8110efc4:	d9400917 	ldw	r5,36(sp)
8110efc8:	e009883a 	mov	r4,fp
8110efcc:	1111e6c0 	call	81111e6c <__pow5mult>
8110efd0:	1021883a 	mov	r16,r2
8110efd4:	003f5a06 	br	8110ed40 <__reset+0xfb0eed40>
8110efd8:	01c00044 	movi	r7,1
8110efdc:	d9c00b15 	stw	r7,44(sp)
8110efe0:	d8802217 	ldw	r2,136(sp)
8110efe4:	0081280e 	bge	zero,r2,8110f488 <_dtoa_r+0x11b0>
8110efe8:	100d883a 	mov	r6,r2
8110efec:	1021883a 	mov	r16,r2
8110eff0:	d8800c15 	stw	r2,48(sp)
8110eff4:	d8800615 	stw	r2,24(sp)
8110eff8:	003d8806 	br	8110e61c <__reset+0xfb0ee61c>
8110effc:	d8800617 	ldw	r2,24(sp)
8110f000:	00be9b16 	blt	zero,r2,8110ea70 <__reset+0xfb0eea70>
8110f004:	10010f1e 	bne	r2,zero,8110f444 <_dtoa_r+0x116c>
8110f008:	880b883a 	mov	r5,r17
8110f00c:	000d883a 	mov	r6,zero
8110f010:	01d00534 	movhi	r7,16404
8110f014:	8009883a 	mov	r4,r16
8110f018:	110adc00 	call	8110adc0 <__muldf3>
8110f01c:	900d883a 	mov	r6,r18
8110f020:	980f883a 	mov	r7,r19
8110f024:	1009883a 	mov	r4,r2
8110f028:	180b883a 	mov	r5,r3
8110f02c:	11171c00 	call	811171c0 <__gedf2>
8110f030:	002b883a 	mov	r21,zero
8110f034:	0023883a 	mov	r17,zero
8110f038:	1000bf16 	blt	r2,zero,8110f338 <_dtoa_r+0x1060>
8110f03c:	d9802217 	ldw	r6,136(sp)
8110f040:	ddc00717 	ldw	r23,28(sp)
8110f044:	018c303a 	nor	r6,zero,r6
8110f048:	d9800515 	stw	r6,20(sp)
8110f04c:	a80b883a 	mov	r5,r21
8110f050:	e009883a 	mov	r4,fp
8110f054:	11118d40 	call	811118d4 <_Bfree>
8110f058:	883e4926 	beq	r17,zero,8110e980 <__reset+0xfb0ee980>
8110f05c:	003fad06 	br	8110ef14 <__reset+0xfb0eef14>
8110f060:	d9c01117 	ldw	r7,68(sp)
8110f064:	3801bc26 	beq	r7,zero,8110f758 <_dtoa_r+0x1480>
8110f068:	10810cc4 	addi	r2,r2,1075
8110f06c:	dd400a17 	ldw	r21,40(sp)
8110f070:	dd000817 	ldw	r20,32(sp)
8110f074:	003f0a06 	br	8110eca0 <__reset+0xfb0eeca0>
8110f078:	00800704 	movi	r2,28
8110f07c:	d9000817 	ldw	r4,32(sp)
8110f080:	a0a9883a 	add	r20,r20,r2
8110f084:	b0ad883a 	add	r22,r22,r2
8110f088:	2089883a 	add	r4,r4,r2
8110f08c:	d9000815 	stw	r4,32(sp)
8110f090:	003f5106 	br	8110edd8 <__reset+0xfb0eedd8>
8110f094:	d8c00317 	ldw	r3,12(sp)
8110f098:	b8c1fc0e 	bge	r23,r3,8110f88c <_dtoa_r+0x15b4>
8110f09c:	0027883a 	mov	r19,zero
8110f0a0:	b805883a 	mov	r2,r23
8110f0a4:	003f3e06 	br	8110eda0 <__reset+0xfb0eeda0>
8110f0a8:	880b883a 	mov	r5,r17
8110f0ac:	e009883a 	mov	r4,fp
8110f0b0:	000f883a 	mov	r7,zero
8110f0b4:	01800284 	movi	r6,10
8110f0b8:	11118fc0 	call	811118fc <__multadd>
8110f0bc:	d9000c17 	ldw	r4,48(sp)
8110f0c0:	1023883a 	mov	r17,r2
8110f0c4:	0102040e 	bge	zero,r4,8110f8d8 <_dtoa_r+0x1600>
8110f0c8:	d9000615 	stw	r4,24(sp)
8110f0cc:	0500050e 	bge	zero,r20,8110f0e4 <_dtoa_r+0xe0c>
8110f0d0:	880b883a 	mov	r5,r17
8110f0d4:	a00d883a 	mov	r6,r20
8110f0d8:	e009883a 	mov	r4,fp
8110f0dc:	1111fac0 	call	81111fac <__lshift>
8110f0e0:	1023883a 	mov	r17,r2
8110f0e4:	9801241e 	bne	r19,zero,8110f578 <_dtoa_r+0x12a0>
8110f0e8:	8829883a 	mov	r20,r17
8110f0ec:	d9000617 	ldw	r4,24(sp)
8110f0f0:	dcc00717 	ldw	r19,28(sp)
8110f0f4:	9480004c 	andi	r18,r18,1
8110f0f8:	20bfffc4 	addi	r2,r4,-1
8110f0fc:	9885883a 	add	r2,r19,r2
8110f100:	d8800415 	stw	r2,16(sp)
8110f104:	dc800615 	stw	r18,24(sp)
8110f108:	a80b883a 	mov	r5,r21
8110f10c:	8009883a 	mov	r4,r16
8110f110:	110e0d80 	call	8110e0d8 <quorem>
8110f114:	880b883a 	mov	r5,r17
8110f118:	8009883a 	mov	r4,r16
8110f11c:	102f883a 	mov	r23,r2
8110f120:	11120f40 	call	811120f4 <__mcmp>
8110f124:	a80b883a 	mov	r5,r21
8110f128:	a00d883a 	mov	r6,r20
8110f12c:	e009883a 	mov	r4,fp
8110f130:	102d883a 	mov	r22,r2
8110f134:	11121540 	call	81112154 <__mdiff>
8110f138:	1007883a 	mov	r3,r2
8110f13c:	10800317 	ldw	r2,12(r2)
8110f140:	bc800c04 	addi	r18,r23,48
8110f144:	180b883a 	mov	r5,r3
8110f148:	10004e1e 	bne	r2,zero,8110f284 <_dtoa_r+0xfac>
8110f14c:	8009883a 	mov	r4,r16
8110f150:	d8c01615 	stw	r3,88(sp)
8110f154:	11120f40 	call	811120f4 <__mcmp>
8110f158:	d8c01617 	ldw	r3,88(sp)
8110f15c:	e009883a 	mov	r4,fp
8110f160:	d8801615 	stw	r2,88(sp)
8110f164:	180b883a 	mov	r5,r3
8110f168:	11118d40 	call	811118d4 <_Bfree>
8110f16c:	d8801617 	ldw	r2,88(sp)
8110f170:	1000041e 	bne	r2,zero,8110f184 <_dtoa_r+0xeac>
8110f174:	d9800317 	ldw	r6,12(sp)
8110f178:	3000021e 	bne	r6,zero,8110f184 <_dtoa_r+0xeac>
8110f17c:	d8c00617 	ldw	r3,24(sp)
8110f180:	18003726 	beq	r3,zero,8110f260 <_dtoa_r+0xf88>
8110f184:	b0002016 	blt	r22,zero,8110f208 <_dtoa_r+0xf30>
8110f188:	b000041e 	bne	r22,zero,8110f19c <_dtoa_r+0xec4>
8110f18c:	d9000317 	ldw	r4,12(sp)
8110f190:	2000021e 	bne	r4,zero,8110f19c <_dtoa_r+0xec4>
8110f194:	d8c00617 	ldw	r3,24(sp)
8110f198:	18001b26 	beq	r3,zero,8110f208 <_dtoa_r+0xf30>
8110f19c:	00810716 	blt	zero,r2,8110f5bc <_dtoa_r+0x12e4>
8110f1a0:	d8c00417 	ldw	r3,16(sp)
8110f1a4:	9d800044 	addi	r22,r19,1
8110f1a8:	9c800005 	stb	r18,0(r19)
8110f1ac:	b02f883a 	mov	r23,r22
8110f1b0:	98c10626 	beq	r19,r3,8110f5cc <_dtoa_r+0x12f4>
8110f1b4:	800b883a 	mov	r5,r16
8110f1b8:	000f883a 	mov	r7,zero
8110f1bc:	01800284 	movi	r6,10
8110f1c0:	e009883a 	mov	r4,fp
8110f1c4:	11118fc0 	call	811118fc <__multadd>
8110f1c8:	1021883a 	mov	r16,r2
8110f1cc:	000f883a 	mov	r7,zero
8110f1d0:	01800284 	movi	r6,10
8110f1d4:	880b883a 	mov	r5,r17
8110f1d8:	e009883a 	mov	r4,fp
8110f1dc:	8d002526 	beq	r17,r20,8110f274 <_dtoa_r+0xf9c>
8110f1e0:	11118fc0 	call	811118fc <__multadd>
8110f1e4:	a00b883a 	mov	r5,r20
8110f1e8:	000f883a 	mov	r7,zero
8110f1ec:	01800284 	movi	r6,10
8110f1f0:	e009883a 	mov	r4,fp
8110f1f4:	1023883a 	mov	r17,r2
8110f1f8:	11118fc0 	call	811118fc <__multadd>
8110f1fc:	1029883a 	mov	r20,r2
8110f200:	b027883a 	mov	r19,r22
8110f204:	003fc006 	br	8110f108 <__reset+0xfb0ef108>
8110f208:	9011883a 	mov	r8,r18
8110f20c:	00800e0e 	bge	zero,r2,8110f248 <_dtoa_r+0xf70>
8110f210:	800b883a 	mov	r5,r16
8110f214:	01800044 	movi	r6,1
8110f218:	e009883a 	mov	r4,fp
8110f21c:	da001715 	stw	r8,92(sp)
8110f220:	1111fac0 	call	81111fac <__lshift>
8110f224:	a80b883a 	mov	r5,r21
8110f228:	1009883a 	mov	r4,r2
8110f22c:	1021883a 	mov	r16,r2
8110f230:	11120f40 	call	811120f4 <__mcmp>
8110f234:	da001717 	ldw	r8,92(sp)
8110f238:	0081960e 	bge	zero,r2,8110f894 <_dtoa_r+0x15bc>
8110f23c:	00800e44 	movi	r2,57
8110f240:	40817026 	beq	r8,r2,8110f804 <_dtoa_r+0x152c>
8110f244:	ba000c44 	addi	r8,r23,49
8110f248:	8825883a 	mov	r18,r17
8110f24c:	9dc00044 	addi	r23,r19,1
8110f250:	9a000005 	stb	r8,0(r19)
8110f254:	a023883a 	mov	r17,r20
8110f258:	dc000915 	stw	r16,36(sp)
8110f25c:	003f2406 	br	8110eef0 <__reset+0xfb0eeef0>
8110f260:	00800e44 	movi	r2,57
8110f264:	9011883a 	mov	r8,r18
8110f268:	90816626 	beq	r18,r2,8110f804 <_dtoa_r+0x152c>
8110f26c:	05bff516 	blt	zero,r22,8110f244 <__reset+0xfb0ef244>
8110f270:	003ff506 	br	8110f248 <__reset+0xfb0ef248>
8110f274:	11118fc0 	call	811118fc <__multadd>
8110f278:	1023883a 	mov	r17,r2
8110f27c:	1029883a 	mov	r20,r2
8110f280:	003fdf06 	br	8110f200 <__reset+0xfb0ef200>
8110f284:	e009883a 	mov	r4,fp
8110f288:	11118d40 	call	811118d4 <_Bfree>
8110f28c:	00800044 	movi	r2,1
8110f290:	003fbc06 	br	8110f184 <__reset+0xfb0ef184>
8110f294:	a80b883a 	mov	r5,r21
8110f298:	8009883a 	mov	r4,r16
8110f29c:	11120f40 	call	811120f4 <__mcmp>
8110f2a0:	103edb0e 	bge	r2,zero,8110ee10 <__reset+0xfb0eee10>
8110f2a4:	800b883a 	mov	r5,r16
8110f2a8:	000f883a 	mov	r7,zero
8110f2ac:	01800284 	movi	r6,10
8110f2b0:	e009883a 	mov	r4,fp
8110f2b4:	11118fc0 	call	811118fc <__multadd>
8110f2b8:	1021883a 	mov	r16,r2
8110f2bc:	d8800517 	ldw	r2,20(sp)
8110f2c0:	d8c00b17 	ldw	r3,44(sp)
8110f2c4:	10bfffc4 	addi	r2,r2,-1
8110f2c8:	d8800515 	stw	r2,20(sp)
8110f2cc:	183f761e 	bne	r3,zero,8110f0a8 <__reset+0xfb0ef0a8>
8110f2d0:	d9000c17 	ldw	r4,48(sp)
8110f2d4:	0101730e 	bge	zero,r4,8110f8a4 <_dtoa_r+0x15cc>
8110f2d8:	d9000615 	stw	r4,24(sp)
8110f2dc:	003ed006 	br	8110ee20 <__reset+0xfb0eee20>
8110f2e0:	00800084 	movi	r2,2
8110f2e4:	3081861e 	bne	r6,r2,8110f900 <_dtoa_r+0x1628>
8110f2e8:	d8000b15 	stw	zero,44(sp)
8110f2ec:	003f3c06 	br	8110efe0 <__reset+0xfb0eefe0>
8110f2f0:	dc000917 	ldw	r16,36(sp)
8110f2f4:	003e9206 	br	8110ed40 <__reset+0xfb0eed40>
8110f2f8:	d9c00317 	ldw	r7,12(sp)
8110f2fc:	00800084 	movi	r2,2
8110f300:	11fec50e 	bge	r2,r7,8110ee18 <__reset+0xfb0eee18>
8110f304:	d9000617 	ldw	r4,24(sp)
8110f308:	20013c1e 	bne	r4,zero,8110f7fc <_dtoa_r+0x1524>
8110f30c:	a80b883a 	mov	r5,r21
8110f310:	000f883a 	mov	r7,zero
8110f314:	01800144 	movi	r6,5
8110f318:	e009883a 	mov	r4,fp
8110f31c:	11118fc0 	call	811118fc <__multadd>
8110f320:	100b883a 	mov	r5,r2
8110f324:	8009883a 	mov	r4,r16
8110f328:	102b883a 	mov	r21,r2
8110f32c:	11120f40 	call	811120f4 <__mcmp>
8110f330:	dc000915 	stw	r16,36(sp)
8110f334:	00bf410e 	bge	zero,r2,8110f03c <__reset+0xfb0ef03c>
8110f338:	d9c00717 	ldw	r7,28(sp)
8110f33c:	00800c44 	movi	r2,49
8110f340:	38800005 	stb	r2,0(r7)
8110f344:	d8800517 	ldw	r2,20(sp)
8110f348:	3dc00044 	addi	r23,r7,1
8110f34c:	10800044 	addi	r2,r2,1
8110f350:	d8800515 	stw	r2,20(sp)
8110f354:	003f3d06 	br	8110f04c <__reset+0xfb0ef04c>
8110f358:	d9800517 	ldw	r6,20(sp)
8110f35c:	d9c00717 	ldw	r7,28(sp)
8110f360:	00800c44 	movi	r2,49
8110f364:	31800044 	addi	r6,r6,1
8110f368:	d9800515 	stw	r6,20(sp)
8110f36c:	38800005 	stb	r2,0(r7)
8110f370:	003edf06 	br	8110eef0 <__reset+0xfb0eeef0>
8110f374:	d8000b15 	stw	zero,44(sp)
8110f378:	003c9f06 	br	8110e5f8 <__reset+0xfb0ee5f8>
8110f37c:	903e7e1e 	bne	r18,zero,8110ed78 <__reset+0xfb0eed78>
8110f380:	00800434 	movhi	r2,16
8110f384:	10bfffc4 	addi	r2,r2,-1
8110f388:	9884703a 	and	r2,r19,r2
8110f38c:	1000ea1e 	bne	r2,zero,8110f738 <_dtoa_r+0x1460>
8110f390:	9cdffc2c 	andhi	r19,r19,32752
8110f394:	9800e826 	beq	r19,zero,8110f738 <_dtoa_r+0x1460>
8110f398:	d9c00817 	ldw	r7,32(sp)
8110f39c:	b5800044 	addi	r22,r22,1
8110f3a0:	04c00044 	movi	r19,1
8110f3a4:	39c00044 	addi	r7,r7,1
8110f3a8:	d9c00815 	stw	r7,32(sp)
8110f3ac:	d8800d17 	ldw	r2,52(sp)
8110f3b0:	103e721e 	bne	r2,zero,8110ed7c <__reset+0xfb0eed7c>
8110f3b4:	00800044 	movi	r2,1
8110f3b8:	003e7906 	br	8110eda0 <__reset+0xfb0eeda0>
8110f3bc:	8009883a 	mov	r4,r16
8110f3c0:	1117d0c0 	call	81117d0c <__floatsidf>
8110f3c4:	d9800f17 	ldw	r6,60(sp)
8110f3c8:	d9c01017 	ldw	r7,64(sp)
8110f3cc:	1009883a 	mov	r4,r2
8110f3d0:	180b883a 	mov	r5,r3
8110f3d4:	110adc00 	call	8110adc0 <__muldf3>
8110f3d8:	000d883a 	mov	r6,zero
8110f3dc:	01d00734 	movhi	r7,16412
8110f3e0:	1009883a 	mov	r4,r2
8110f3e4:	180b883a 	mov	r5,r3
8110f3e8:	1115fa40 	call	81115fa4 <__adddf3>
8110f3ec:	047f3034 	movhi	r17,64704
8110f3f0:	1021883a 	mov	r16,r2
8110f3f4:	1c63883a 	add	r17,r3,r17
8110f3f8:	d9000f17 	ldw	r4,60(sp)
8110f3fc:	d9401017 	ldw	r5,64(sp)
8110f400:	000d883a 	mov	r6,zero
8110f404:	01d00534 	movhi	r7,16404
8110f408:	11173900 	call	81117390 <__subdf3>
8110f40c:	800d883a 	mov	r6,r16
8110f410:	880f883a 	mov	r7,r17
8110f414:	1009883a 	mov	r4,r2
8110f418:	180b883a 	mov	r5,r3
8110f41c:	102b883a 	mov	r21,r2
8110f420:	1829883a 	mov	r20,r3
8110f424:	11171c00 	call	811171c0 <__gedf2>
8110f428:	00806c16 	blt	zero,r2,8110f5dc <_dtoa_r+0x1304>
8110f42c:	89e0003c 	xorhi	r7,r17,32768
8110f430:	800d883a 	mov	r6,r16
8110f434:	a809883a 	mov	r4,r21
8110f438:	a00b883a 	mov	r5,r20
8110f43c:	111729c0 	call	8111729c <__ledf2>
8110f440:	103d7e0e 	bge	r2,zero,8110ea3c <__reset+0xfb0eea3c>
8110f444:	002b883a 	mov	r21,zero
8110f448:	0023883a 	mov	r17,zero
8110f44c:	003efb06 	br	8110f03c <__reset+0xfb0ef03c>
8110f450:	d8800717 	ldw	r2,28(sp)
8110f454:	003bd006 	br	8110e398 <__reset+0xfb0ee398>
8110f458:	d9000a17 	ldw	r4,40(sp)
8110f45c:	d9800d17 	ldw	r6,52(sp)
8110f460:	dd400a15 	stw	r21,40(sp)
8110f464:	a905c83a 	sub	r2,r21,r4
8110f468:	308d883a 	add	r6,r6,r2
8110f46c:	d9800d15 	stw	r6,52(sp)
8110f470:	002b883a 	mov	r21,zero
8110f474:	003e0606 	br	8110ec90 <__reset+0xfb0eec90>
8110f478:	9023883a 	mov	r17,r18
8110f47c:	9829883a 	mov	r20,r19
8110f480:	04000084 	movi	r16,2
8110f484:	003c9206 	br	8110e6d0 <__reset+0xfb0ee6d0>
8110f488:	04000044 	movi	r16,1
8110f48c:	dc000c15 	stw	r16,48(sp)
8110f490:	dc000615 	stw	r16,24(sp)
8110f494:	dc002215 	stw	r16,136(sp)
8110f498:	e0001115 	stw	zero,68(fp)
8110f49c:	000b883a 	mov	r5,zero
8110f4a0:	003c6906 	br	8110e648 <__reset+0xfb0ee648>
8110f4a4:	3021883a 	mov	r16,r6
8110f4a8:	003ffb06 	br	8110f498 <__reset+0xfb0ef498>
8110f4ac:	1000021e 	bne	r2,zero,8110f4b8 <_dtoa_r+0x11e0>
8110f4b0:	4200004c 	andi	r8,r8,1
8110f4b4:	403e7d1e 	bne	r8,zero,8110eeac <__reset+0xfb0eeeac>
8110f4b8:	01000c04 	movi	r4,48
8110f4bc:	00000106 	br	8110f4c4 <_dtoa_r+0x11ec>
8110f4c0:	102f883a 	mov	r23,r2
8110f4c4:	b8bfffc4 	addi	r2,r23,-1
8110f4c8:	10c00007 	ldb	r3,0(r2)
8110f4cc:	193ffc26 	beq	r3,r4,8110f4c0 <__reset+0xfb0ef4c0>
8110f4d0:	003e8706 	br	8110eef0 <__reset+0xfb0eeef0>
8110f4d4:	d8800517 	ldw	r2,20(sp)
8110f4d8:	00a3c83a 	sub	r17,zero,r2
8110f4dc:	8800a426 	beq	r17,zero,8110f770 <_dtoa_r+0x1498>
8110f4e0:	888003cc 	andi	r2,r17,15
8110f4e4:	100490fa 	slli	r2,r2,3
8110f4e8:	00e044b4 	movhi	r3,33042
8110f4ec:	18f98f04 	addi	r3,r3,-6596
8110f4f0:	1885883a 	add	r2,r3,r2
8110f4f4:	11800017 	ldw	r6,0(r2)
8110f4f8:	11c00117 	ldw	r7,4(r2)
8110f4fc:	9009883a 	mov	r4,r18
8110f500:	980b883a 	mov	r5,r19
8110f504:	8823d13a 	srai	r17,r17,4
8110f508:	110adc00 	call	8110adc0 <__muldf3>
8110f50c:	d8800f15 	stw	r2,60(sp)
8110f510:	d8c01015 	stw	r3,64(sp)
8110f514:	8800e826 	beq	r17,zero,8110f8b8 <_dtoa_r+0x15e0>
8110f518:	052044b4 	movhi	r20,33042
8110f51c:	a5398504 	addi	r20,r20,-6636
8110f520:	04000084 	movi	r16,2
8110f524:	8980004c 	andi	r6,r17,1
8110f528:	1009883a 	mov	r4,r2
8110f52c:	8823d07a 	srai	r17,r17,1
8110f530:	180b883a 	mov	r5,r3
8110f534:	30000426 	beq	r6,zero,8110f548 <_dtoa_r+0x1270>
8110f538:	a1800017 	ldw	r6,0(r20)
8110f53c:	a1c00117 	ldw	r7,4(r20)
8110f540:	84000044 	addi	r16,r16,1
8110f544:	110adc00 	call	8110adc0 <__muldf3>
8110f548:	a5000204 	addi	r20,r20,8
8110f54c:	883ff51e 	bne	r17,zero,8110f524 <__reset+0xfb0ef524>
8110f550:	d8800f15 	stw	r2,60(sp)
8110f554:	d8c01015 	stw	r3,64(sp)
8110f558:	003c7606 	br	8110e734 <__reset+0xfb0ee734>
8110f55c:	00c00c04 	movi	r3,48
8110f560:	10c00005 	stb	r3,0(r2)
8110f564:	d8c00517 	ldw	r3,20(sp)
8110f568:	bd3fffc3 	ldbu	r20,-1(r23)
8110f56c:	18c00044 	addi	r3,r3,1
8110f570:	d8c00515 	stw	r3,20(sp)
8110f574:	003db906 	br	8110ec5c <__reset+0xfb0eec5c>
8110f578:	89400117 	ldw	r5,4(r17)
8110f57c:	e009883a 	mov	r4,fp
8110f580:	111182c0 	call	8111182c <_Balloc>
8110f584:	89800417 	ldw	r6,16(r17)
8110f588:	89400304 	addi	r5,r17,12
8110f58c:	11000304 	addi	r4,r2,12
8110f590:	31800084 	addi	r6,r6,2
8110f594:	318d883a 	add	r6,r6,r6
8110f598:	318d883a 	add	r6,r6,r6
8110f59c:	1027883a 	mov	r19,r2
8110f5a0:	110b8ec0 	call	8110b8ec <memcpy>
8110f5a4:	01800044 	movi	r6,1
8110f5a8:	980b883a 	mov	r5,r19
8110f5ac:	e009883a 	mov	r4,fp
8110f5b0:	1111fac0 	call	81111fac <__lshift>
8110f5b4:	1029883a 	mov	r20,r2
8110f5b8:	003ecc06 	br	8110f0ec <__reset+0xfb0ef0ec>
8110f5bc:	00800e44 	movi	r2,57
8110f5c0:	90809026 	beq	r18,r2,8110f804 <_dtoa_r+0x152c>
8110f5c4:	92000044 	addi	r8,r18,1
8110f5c8:	003f1f06 	br	8110f248 <__reset+0xfb0ef248>
8110f5cc:	9011883a 	mov	r8,r18
8110f5d0:	8825883a 	mov	r18,r17
8110f5d4:	a023883a 	mov	r17,r20
8110f5d8:	003e2906 	br	8110ee80 <__reset+0xfb0eee80>
8110f5dc:	002b883a 	mov	r21,zero
8110f5e0:	0023883a 	mov	r17,zero
8110f5e4:	003f5406 	br	8110f338 <__reset+0xfb0ef338>
8110f5e8:	61bfffc4 	addi	r6,r12,-1
8110f5ec:	300490fa 	slli	r2,r6,3
8110f5f0:	00e044b4 	movhi	r3,33042
8110f5f4:	18f98f04 	addi	r3,r3,-6596
8110f5f8:	1885883a 	add	r2,r3,r2
8110f5fc:	11000017 	ldw	r4,0(r2)
8110f600:	11400117 	ldw	r5,4(r2)
8110f604:	d8800717 	ldw	r2,28(sp)
8110f608:	880f883a 	mov	r7,r17
8110f60c:	d9801215 	stw	r6,72(sp)
8110f610:	800d883a 	mov	r6,r16
8110f614:	db001615 	stw	r12,88(sp)
8110f618:	15c00044 	addi	r23,r2,1
8110f61c:	110adc00 	call	8110adc0 <__muldf3>
8110f620:	d9401017 	ldw	r5,64(sp)
8110f624:	d9000f17 	ldw	r4,60(sp)
8110f628:	d8c01515 	stw	r3,84(sp)
8110f62c:	d8801415 	stw	r2,80(sp)
8110f630:	1117c8c0 	call	81117c8c <__fixdfsi>
8110f634:	1009883a 	mov	r4,r2
8110f638:	1021883a 	mov	r16,r2
8110f63c:	1117d0c0 	call	81117d0c <__floatsidf>
8110f640:	d9000f17 	ldw	r4,60(sp)
8110f644:	d9401017 	ldw	r5,64(sp)
8110f648:	100d883a 	mov	r6,r2
8110f64c:	180f883a 	mov	r7,r3
8110f650:	11173900 	call	81117390 <__subdf3>
8110f654:	1829883a 	mov	r20,r3
8110f658:	d8c00717 	ldw	r3,28(sp)
8110f65c:	84000c04 	addi	r16,r16,48
8110f660:	1023883a 	mov	r17,r2
8110f664:	1c000005 	stb	r16,0(r3)
8110f668:	db001617 	ldw	r12,88(sp)
8110f66c:	00800044 	movi	r2,1
8110f670:	60802226 	beq	r12,r2,8110f6fc <_dtoa_r+0x1424>
8110f674:	d9c00717 	ldw	r7,28(sp)
8110f678:	8805883a 	mov	r2,r17
8110f67c:	b82b883a 	mov	r21,r23
8110f680:	3b19883a 	add	r12,r7,r12
8110f684:	6023883a 	mov	r17,r12
8110f688:	a007883a 	mov	r3,r20
8110f68c:	dc800f15 	stw	r18,60(sp)
8110f690:	000d883a 	mov	r6,zero
8110f694:	01d00934 	movhi	r7,16420
8110f698:	1009883a 	mov	r4,r2
8110f69c:	180b883a 	mov	r5,r3
8110f6a0:	110adc00 	call	8110adc0 <__muldf3>
8110f6a4:	180b883a 	mov	r5,r3
8110f6a8:	1009883a 	mov	r4,r2
8110f6ac:	1829883a 	mov	r20,r3
8110f6b0:	1025883a 	mov	r18,r2
8110f6b4:	1117c8c0 	call	81117c8c <__fixdfsi>
8110f6b8:	1009883a 	mov	r4,r2
8110f6bc:	1021883a 	mov	r16,r2
8110f6c0:	1117d0c0 	call	81117d0c <__floatsidf>
8110f6c4:	100d883a 	mov	r6,r2
8110f6c8:	180f883a 	mov	r7,r3
8110f6cc:	9009883a 	mov	r4,r18
8110f6d0:	a00b883a 	mov	r5,r20
8110f6d4:	84000c04 	addi	r16,r16,48
8110f6d8:	11173900 	call	81117390 <__subdf3>
8110f6dc:	ad400044 	addi	r21,r21,1
8110f6e0:	ac3fffc5 	stb	r16,-1(r21)
8110f6e4:	ac7fea1e 	bne	r21,r17,8110f690 <__reset+0xfb0ef690>
8110f6e8:	1023883a 	mov	r17,r2
8110f6ec:	d8801217 	ldw	r2,72(sp)
8110f6f0:	dc800f17 	ldw	r18,60(sp)
8110f6f4:	1829883a 	mov	r20,r3
8110f6f8:	b8af883a 	add	r23,r23,r2
8110f6fc:	d9001417 	ldw	r4,80(sp)
8110f700:	d9401517 	ldw	r5,84(sp)
8110f704:	000d883a 	mov	r6,zero
8110f708:	01cff834 	movhi	r7,16352
8110f70c:	1115fa40 	call	81115fa4 <__adddf3>
8110f710:	880d883a 	mov	r6,r17
8110f714:	a00f883a 	mov	r7,r20
8110f718:	1009883a 	mov	r4,r2
8110f71c:	180b883a 	mov	r5,r3
8110f720:	111729c0 	call	8111729c <__ledf2>
8110f724:	10003e0e 	bge	r2,zero,8110f820 <_dtoa_r+0x1548>
8110f728:	d9001317 	ldw	r4,76(sp)
8110f72c:	bd3fffc3 	ldbu	r20,-1(r23)
8110f730:	d9000515 	stw	r4,20(sp)
8110f734:	003d3b06 	br	8110ec24 <__reset+0xfb0eec24>
8110f738:	0027883a 	mov	r19,zero
8110f73c:	003f1b06 	br	8110f3ac <__reset+0xfb0ef3ac>
8110f740:	d8800817 	ldw	r2,32(sp)
8110f744:	11e9c83a 	sub	r20,r2,r7
8110f748:	0005883a 	mov	r2,zero
8110f74c:	003d5406 	br	8110eca0 <__reset+0xfb0eeca0>
8110f750:	00800044 	movi	r2,1
8110f754:	003dc706 	br	8110ee74 <__reset+0xfb0eee74>
8110f758:	d8c00217 	ldw	r3,8(sp)
8110f75c:	00800d84 	movi	r2,54
8110f760:	dd400a17 	ldw	r21,40(sp)
8110f764:	10c5c83a 	sub	r2,r2,r3
8110f768:	dd000817 	ldw	r20,32(sp)
8110f76c:	003d4c06 	br	8110eca0 <__reset+0xfb0eeca0>
8110f770:	dc800f15 	stw	r18,60(sp)
8110f774:	dcc01015 	stw	r19,64(sp)
8110f778:	04000084 	movi	r16,2
8110f77c:	003bed06 	br	8110e734 <__reset+0xfb0ee734>
8110f780:	d9000617 	ldw	r4,24(sp)
8110f784:	203f0d26 	beq	r4,zero,8110f3bc <__reset+0xfb0ef3bc>
8110f788:	d9800c17 	ldw	r6,48(sp)
8110f78c:	01bcab0e 	bge	zero,r6,8110ea3c <__reset+0xfb0eea3c>
8110f790:	d9401017 	ldw	r5,64(sp)
8110f794:	d9000f17 	ldw	r4,60(sp)
8110f798:	000d883a 	mov	r6,zero
8110f79c:	01d00934 	movhi	r7,16420
8110f7a0:	110adc00 	call	8110adc0 <__muldf3>
8110f7a4:	81000044 	addi	r4,r16,1
8110f7a8:	d8800f15 	stw	r2,60(sp)
8110f7ac:	d8c01015 	stw	r3,64(sp)
8110f7b0:	1117d0c0 	call	81117d0c <__floatsidf>
8110f7b4:	d9800f17 	ldw	r6,60(sp)
8110f7b8:	d9c01017 	ldw	r7,64(sp)
8110f7bc:	1009883a 	mov	r4,r2
8110f7c0:	180b883a 	mov	r5,r3
8110f7c4:	110adc00 	call	8110adc0 <__muldf3>
8110f7c8:	01d00734 	movhi	r7,16412
8110f7cc:	000d883a 	mov	r6,zero
8110f7d0:	1009883a 	mov	r4,r2
8110f7d4:	180b883a 	mov	r5,r3
8110f7d8:	1115fa40 	call	81115fa4 <__adddf3>
8110f7dc:	d9c00517 	ldw	r7,20(sp)
8110f7e0:	047f3034 	movhi	r17,64704
8110f7e4:	1021883a 	mov	r16,r2
8110f7e8:	39ffffc4 	addi	r7,r7,-1
8110f7ec:	d9c01315 	stw	r7,76(sp)
8110f7f0:	1c63883a 	add	r17,r3,r17
8110f7f4:	db000c17 	ldw	r12,48(sp)
8110f7f8:	003bea06 	br	8110e7a4 <__reset+0xfb0ee7a4>
8110f7fc:	dc000915 	stw	r16,36(sp)
8110f800:	003e0e06 	br	8110f03c <__reset+0xfb0ef03c>
8110f804:	01000e44 	movi	r4,57
8110f808:	8825883a 	mov	r18,r17
8110f80c:	9dc00044 	addi	r23,r19,1
8110f810:	99000005 	stb	r4,0(r19)
8110f814:	a023883a 	mov	r17,r20
8110f818:	dc000915 	stw	r16,36(sp)
8110f81c:	003da406 	br	8110eeb0 <__reset+0xfb0eeeb0>
8110f820:	d9801417 	ldw	r6,80(sp)
8110f824:	d9c01517 	ldw	r7,84(sp)
8110f828:	0009883a 	mov	r4,zero
8110f82c:	014ff834 	movhi	r5,16352
8110f830:	11173900 	call	81117390 <__subdf3>
8110f834:	880d883a 	mov	r6,r17
8110f838:	a00f883a 	mov	r7,r20
8110f83c:	1009883a 	mov	r4,r2
8110f840:	180b883a 	mov	r5,r3
8110f844:	11171c00 	call	811171c0 <__gedf2>
8110f848:	00bc7c0e 	bge	zero,r2,8110ea3c <__reset+0xfb0eea3c>
8110f84c:	01000c04 	movi	r4,48
8110f850:	00000106 	br	8110f858 <_dtoa_r+0x1580>
8110f854:	102f883a 	mov	r23,r2
8110f858:	b8bfffc4 	addi	r2,r23,-1
8110f85c:	10c00007 	ldb	r3,0(r2)
8110f860:	193ffc26 	beq	r3,r4,8110f854 <__reset+0xfb0ef854>
8110f864:	d9801317 	ldw	r6,76(sp)
8110f868:	d9800515 	stw	r6,20(sp)
8110f86c:	003c4406 	br	8110e980 <__reset+0xfb0ee980>
8110f870:	d9801317 	ldw	r6,76(sp)
8110f874:	d9800515 	stw	r6,20(sp)
8110f878:	003cea06 	br	8110ec24 <__reset+0xfb0eec24>
8110f87c:	dd800f17 	ldw	r22,60(sp)
8110f880:	dcc01017 	ldw	r19,64(sp)
8110f884:	dc801217 	ldw	r18,72(sp)
8110f888:	003c6c06 	br	8110ea3c <__reset+0xfb0eea3c>
8110f88c:	903e031e 	bne	r18,zero,8110f09c <__reset+0xfb0ef09c>
8110f890:	003ebb06 	br	8110f380 <__reset+0xfb0ef380>
8110f894:	103e6c1e 	bne	r2,zero,8110f248 <__reset+0xfb0ef248>
8110f898:	4080004c 	andi	r2,r8,1
8110f89c:	103e6a26 	beq	r2,zero,8110f248 <__reset+0xfb0ef248>
8110f8a0:	003e6606 	br	8110f23c <__reset+0xfb0ef23c>
8110f8a4:	d8c00317 	ldw	r3,12(sp)
8110f8a8:	00800084 	movi	r2,2
8110f8ac:	10c02916 	blt	r2,r3,8110f954 <_dtoa_r+0x167c>
8110f8b0:	d9000c17 	ldw	r4,48(sp)
8110f8b4:	003e8806 	br	8110f2d8 <__reset+0xfb0ef2d8>
8110f8b8:	04000084 	movi	r16,2
8110f8bc:	003b9d06 	br	8110e734 <__reset+0xfb0ee734>
8110f8c0:	d9001317 	ldw	r4,76(sp)
8110f8c4:	d9000515 	stw	r4,20(sp)
8110f8c8:	003cd606 	br	8110ec24 <__reset+0xfb0eec24>
8110f8cc:	d8801317 	ldw	r2,76(sp)
8110f8d0:	d8800515 	stw	r2,20(sp)
8110f8d4:	003c2a06 	br	8110e980 <__reset+0xfb0ee980>
8110f8d8:	d9800317 	ldw	r6,12(sp)
8110f8dc:	00800084 	movi	r2,2
8110f8e0:	11801516 	blt	r2,r6,8110f938 <_dtoa_r+0x1660>
8110f8e4:	d9c00c17 	ldw	r7,48(sp)
8110f8e8:	d9c00615 	stw	r7,24(sp)
8110f8ec:	003df706 	br	8110f0cc <__reset+0xfb0ef0cc>
8110f8f0:	193d3926 	beq	r3,r4,8110edd8 <__reset+0xfb0eedd8>
8110f8f4:	00c00f04 	movi	r3,60
8110f8f8:	1885c83a 	sub	r2,r3,r2
8110f8fc:	003ddf06 	br	8110f07c <__reset+0xfb0ef07c>
8110f900:	e009883a 	mov	r4,fp
8110f904:	e0001115 	stw	zero,68(fp)
8110f908:	000b883a 	mov	r5,zero
8110f90c:	111182c0 	call	8111182c <_Balloc>
8110f910:	d8800715 	stw	r2,28(sp)
8110f914:	d8c00717 	ldw	r3,28(sp)
8110f918:	00bfffc4 	movi	r2,-1
8110f91c:	01000044 	movi	r4,1
8110f920:	d8800c15 	stw	r2,48(sp)
8110f924:	e0c01015 	stw	r3,64(fp)
8110f928:	d9000b15 	stw	r4,44(sp)
8110f92c:	d8800615 	stw	r2,24(sp)
8110f930:	d8002215 	stw	zero,136(sp)
8110f934:	003c4106 	br	8110ea3c <__reset+0xfb0eea3c>
8110f938:	d8c00c17 	ldw	r3,48(sp)
8110f93c:	d8c00615 	stw	r3,24(sp)
8110f940:	003e7006 	br	8110f304 <__reset+0xfb0ef304>
8110f944:	04400044 	movi	r17,1
8110f948:	003b2006 	br	8110e5cc <__reset+0xfb0ee5cc>
8110f94c:	000b883a 	mov	r5,zero
8110f950:	003b3d06 	br	8110e648 <__reset+0xfb0ee648>
8110f954:	d8800c17 	ldw	r2,48(sp)
8110f958:	d8800615 	stw	r2,24(sp)
8110f95c:	003e6906 	br	8110f304 <__reset+0xfb0ef304>

8110f960 <__sflush_r>:
8110f960:	2880030b 	ldhu	r2,12(r5)
8110f964:	defffb04 	addi	sp,sp,-20
8110f968:	dcc00315 	stw	r19,12(sp)
8110f96c:	dc400115 	stw	r17,4(sp)
8110f970:	dfc00415 	stw	ra,16(sp)
8110f974:	dc800215 	stw	r18,8(sp)
8110f978:	dc000015 	stw	r16,0(sp)
8110f97c:	10c0020c 	andi	r3,r2,8
8110f980:	2823883a 	mov	r17,r5
8110f984:	2027883a 	mov	r19,r4
8110f988:	1800311e 	bne	r3,zero,8110fa50 <__sflush_r+0xf0>
8110f98c:	28c00117 	ldw	r3,4(r5)
8110f990:	10820014 	ori	r2,r2,2048
8110f994:	2880030d 	sth	r2,12(r5)
8110f998:	00c04b0e 	bge	zero,r3,8110fac8 <__sflush_r+0x168>
8110f99c:	8a000a17 	ldw	r8,40(r17)
8110f9a0:	40002326 	beq	r8,zero,8110fa30 <__sflush_r+0xd0>
8110f9a4:	9c000017 	ldw	r16,0(r19)
8110f9a8:	10c4000c 	andi	r3,r2,4096
8110f9ac:	98000015 	stw	zero,0(r19)
8110f9b0:	18004826 	beq	r3,zero,8110fad4 <__sflush_r+0x174>
8110f9b4:	89801417 	ldw	r6,80(r17)
8110f9b8:	10c0010c 	andi	r3,r2,4
8110f9bc:	18000626 	beq	r3,zero,8110f9d8 <__sflush_r+0x78>
8110f9c0:	88c00117 	ldw	r3,4(r17)
8110f9c4:	88800c17 	ldw	r2,48(r17)
8110f9c8:	30cdc83a 	sub	r6,r6,r3
8110f9cc:	10000226 	beq	r2,zero,8110f9d8 <__sflush_r+0x78>
8110f9d0:	88800f17 	ldw	r2,60(r17)
8110f9d4:	308dc83a 	sub	r6,r6,r2
8110f9d8:	89400717 	ldw	r5,28(r17)
8110f9dc:	000f883a 	mov	r7,zero
8110f9e0:	9809883a 	mov	r4,r19
8110f9e4:	403ee83a 	callr	r8
8110f9e8:	00ffffc4 	movi	r3,-1
8110f9ec:	10c04426 	beq	r2,r3,8110fb00 <__sflush_r+0x1a0>
8110f9f0:	88c0030b 	ldhu	r3,12(r17)
8110f9f4:	89000417 	ldw	r4,16(r17)
8110f9f8:	88000115 	stw	zero,4(r17)
8110f9fc:	197dffcc 	andi	r5,r3,63487
8110fa00:	8940030d 	sth	r5,12(r17)
8110fa04:	89000015 	stw	r4,0(r17)
8110fa08:	18c4000c 	andi	r3,r3,4096
8110fa0c:	18002c1e 	bne	r3,zero,8110fac0 <__sflush_r+0x160>
8110fa10:	89400c17 	ldw	r5,48(r17)
8110fa14:	9c000015 	stw	r16,0(r19)
8110fa18:	28000526 	beq	r5,zero,8110fa30 <__sflush_r+0xd0>
8110fa1c:	88801004 	addi	r2,r17,64
8110fa20:	28800226 	beq	r5,r2,8110fa2c <__sflush_r+0xcc>
8110fa24:	9809883a 	mov	r4,r19
8110fa28:	11100cc0 	call	811100cc <_free_r>
8110fa2c:	88000c15 	stw	zero,48(r17)
8110fa30:	0005883a 	mov	r2,zero
8110fa34:	dfc00417 	ldw	ra,16(sp)
8110fa38:	dcc00317 	ldw	r19,12(sp)
8110fa3c:	dc800217 	ldw	r18,8(sp)
8110fa40:	dc400117 	ldw	r17,4(sp)
8110fa44:	dc000017 	ldw	r16,0(sp)
8110fa48:	dec00504 	addi	sp,sp,20
8110fa4c:	f800283a 	ret
8110fa50:	2c800417 	ldw	r18,16(r5)
8110fa54:	903ff626 	beq	r18,zero,8110fa30 <__reset+0xfb0efa30>
8110fa58:	2c000017 	ldw	r16,0(r5)
8110fa5c:	108000cc 	andi	r2,r2,3
8110fa60:	2c800015 	stw	r18,0(r5)
8110fa64:	84a1c83a 	sub	r16,r16,r18
8110fa68:	1000131e 	bne	r2,zero,8110fab8 <__sflush_r+0x158>
8110fa6c:	28800517 	ldw	r2,20(r5)
8110fa70:	88800215 	stw	r2,8(r17)
8110fa74:	04000316 	blt	zero,r16,8110fa84 <__sflush_r+0x124>
8110fa78:	003fed06 	br	8110fa30 <__reset+0xfb0efa30>
8110fa7c:	90a5883a 	add	r18,r18,r2
8110fa80:	043feb0e 	bge	zero,r16,8110fa30 <__reset+0xfb0efa30>
8110fa84:	88800917 	ldw	r2,36(r17)
8110fa88:	89400717 	ldw	r5,28(r17)
8110fa8c:	800f883a 	mov	r7,r16
8110fa90:	900d883a 	mov	r6,r18
8110fa94:	9809883a 	mov	r4,r19
8110fa98:	103ee83a 	callr	r2
8110fa9c:	80a1c83a 	sub	r16,r16,r2
8110faa0:	00bff616 	blt	zero,r2,8110fa7c <__reset+0xfb0efa7c>
8110faa4:	88c0030b 	ldhu	r3,12(r17)
8110faa8:	00bfffc4 	movi	r2,-1
8110faac:	18c01014 	ori	r3,r3,64
8110fab0:	88c0030d 	sth	r3,12(r17)
8110fab4:	003fdf06 	br	8110fa34 <__reset+0xfb0efa34>
8110fab8:	0005883a 	mov	r2,zero
8110fabc:	003fec06 	br	8110fa70 <__reset+0xfb0efa70>
8110fac0:	88801415 	stw	r2,80(r17)
8110fac4:	003fd206 	br	8110fa10 <__reset+0xfb0efa10>
8110fac8:	28c00f17 	ldw	r3,60(r5)
8110facc:	00ffb316 	blt	zero,r3,8110f99c <__reset+0xfb0ef99c>
8110fad0:	003fd706 	br	8110fa30 <__reset+0xfb0efa30>
8110fad4:	89400717 	ldw	r5,28(r17)
8110fad8:	000d883a 	mov	r6,zero
8110fadc:	01c00044 	movi	r7,1
8110fae0:	9809883a 	mov	r4,r19
8110fae4:	403ee83a 	callr	r8
8110fae8:	100d883a 	mov	r6,r2
8110faec:	00bfffc4 	movi	r2,-1
8110faf0:	30801426 	beq	r6,r2,8110fb44 <__sflush_r+0x1e4>
8110faf4:	8880030b 	ldhu	r2,12(r17)
8110faf8:	8a000a17 	ldw	r8,40(r17)
8110fafc:	003fae06 	br	8110f9b8 <__reset+0xfb0ef9b8>
8110fb00:	98c00017 	ldw	r3,0(r19)
8110fb04:	183fba26 	beq	r3,zero,8110f9f0 <__reset+0xfb0ef9f0>
8110fb08:	01000744 	movi	r4,29
8110fb0c:	19000626 	beq	r3,r4,8110fb28 <__sflush_r+0x1c8>
8110fb10:	01000584 	movi	r4,22
8110fb14:	19000426 	beq	r3,r4,8110fb28 <__sflush_r+0x1c8>
8110fb18:	88c0030b 	ldhu	r3,12(r17)
8110fb1c:	18c01014 	ori	r3,r3,64
8110fb20:	88c0030d 	sth	r3,12(r17)
8110fb24:	003fc306 	br	8110fa34 <__reset+0xfb0efa34>
8110fb28:	8880030b 	ldhu	r2,12(r17)
8110fb2c:	88c00417 	ldw	r3,16(r17)
8110fb30:	88000115 	stw	zero,4(r17)
8110fb34:	10bdffcc 	andi	r2,r2,63487
8110fb38:	8880030d 	sth	r2,12(r17)
8110fb3c:	88c00015 	stw	r3,0(r17)
8110fb40:	003fb306 	br	8110fa10 <__reset+0xfb0efa10>
8110fb44:	98800017 	ldw	r2,0(r19)
8110fb48:	103fea26 	beq	r2,zero,8110faf4 <__reset+0xfb0efaf4>
8110fb4c:	00c00744 	movi	r3,29
8110fb50:	10c00226 	beq	r2,r3,8110fb5c <__sflush_r+0x1fc>
8110fb54:	00c00584 	movi	r3,22
8110fb58:	10c0031e 	bne	r2,r3,8110fb68 <__sflush_r+0x208>
8110fb5c:	9c000015 	stw	r16,0(r19)
8110fb60:	0005883a 	mov	r2,zero
8110fb64:	003fb306 	br	8110fa34 <__reset+0xfb0efa34>
8110fb68:	88c0030b 	ldhu	r3,12(r17)
8110fb6c:	3005883a 	mov	r2,r6
8110fb70:	18c01014 	ori	r3,r3,64
8110fb74:	88c0030d 	sth	r3,12(r17)
8110fb78:	003fae06 	br	8110fa34 <__reset+0xfb0efa34>

8110fb7c <_fflush_r>:
8110fb7c:	defffd04 	addi	sp,sp,-12
8110fb80:	dc000115 	stw	r16,4(sp)
8110fb84:	dfc00215 	stw	ra,8(sp)
8110fb88:	2021883a 	mov	r16,r4
8110fb8c:	20000226 	beq	r4,zero,8110fb98 <_fflush_r+0x1c>
8110fb90:	20800e17 	ldw	r2,56(r4)
8110fb94:	10000c26 	beq	r2,zero,8110fbc8 <_fflush_r+0x4c>
8110fb98:	2880030f 	ldh	r2,12(r5)
8110fb9c:	1000051e 	bne	r2,zero,8110fbb4 <_fflush_r+0x38>
8110fba0:	0005883a 	mov	r2,zero
8110fba4:	dfc00217 	ldw	ra,8(sp)
8110fba8:	dc000117 	ldw	r16,4(sp)
8110fbac:	dec00304 	addi	sp,sp,12
8110fbb0:	f800283a 	ret
8110fbb4:	8009883a 	mov	r4,r16
8110fbb8:	dfc00217 	ldw	ra,8(sp)
8110fbbc:	dc000117 	ldw	r16,4(sp)
8110fbc0:	dec00304 	addi	sp,sp,12
8110fbc4:	110f9601 	jmpi	8110f960 <__sflush_r>
8110fbc8:	d9400015 	stw	r5,0(sp)
8110fbcc:	110ff580 	call	8110ff58 <__sinit>
8110fbd0:	d9400017 	ldw	r5,0(sp)
8110fbd4:	003ff006 	br	8110fb98 <__reset+0xfb0efb98>

8110fbd8 <fflush>:
8110fbd8:	20000526 	beq	r4,zero,8110fbf0 <fflush+0x18>
8110fbdc:	00a044b4 	movhi	r2,33042
8110fbe0:	10819104 	addi	r2,r2,1604
8110fbe4:	200b883a 	mov	r5,r4
8110fbe8:	11000017 	ldw	r4,0(r2)
8110fbec:	110fb7c1 	jmpi	8110fb7c <_fflush_r>
8110fbf0:	00a044b4 	movhi	r2,33042
8110fbf4:	10819004 	addi	r2,r2,1600
8110fbf8:	11000017 	ldw	r4,0(r2)
8110fbfc:	01604474 	movhi	r5,33041
8110fc00:	297edf04 	addi	r5,r5,-1156
8110fc04:	111095c1 	jmpi	8111095c <_fwalk_reent>

8110fc08 <__fp_unlock>:
8110fc08:	0005883a 	mov	r2,zero
8110fc0c:	f800283a 	ret

8110fc10 <_cleanup_r>:
8110fc10:	01604474 	movhi	r5,33041
8110fc14:	29533704 	addi	r5,r5,19676
8110fc18:	111095c1 	jmpi	8111095c <_fwalk_reent>

8110fc1c <__sinit.part.1>:
8110fc1c:	defff704 	addi	sp,sp,-36
8110fc20:	00e04474 	movhi	r3,33041
8110fc24:	dfc00815 	stw	ra,32(sp)
8110fc28:	ddc00715 	stw	r23,28(sp)
8110fc2c:	dd800615 	stw	r22,24(sp)
8110fc30:	dd400515 	stw	r21,20(sp)
8110fc34:	dd000415 	stw	r20,16(sp)
8110fc38:	dcc00315 	stw	r19,12(sp)
8110fc3c:	dc800215 	stw	r18,8(sp)
8110fc40:	dc400115 	stw	r17,4(sp)
8110fc44:	dc000015 	stw	r16,0(sp)
8110fc48:	18ff0404 	addi	r3,r3,-1008
8110fc4c:	24000117 	ldw	r16,4(r4)
8110fc50:	20c00f15 	stw	r3,60(r4)
8110fc54:	2080bb04 	addi	r2,r4,748
8110fc58:	00c000c4 	movi	r3,3
8110fc5c:	20c0b915 	stw	r3,740(r4)
8110fc60:	2080ba15 	stw	r2,744(r4)
8110fc64:	2000b815 	stw	zero,736(r4)
8110fc68:	05c00204 	movi	r23,8
8110fc6c:	00800104 	movi	r2,4
8110fc70:	2025883a 	mov	r18,r4
8110fc74:	b80d883a 	mov	r6,r23
8110fc78:	81001704 	addi	r4,r16,92
8110fc7c:	000b883a 	mov	r5,zero
8110fc80:	80000015 	stw	zero,0(r16)
8110fc84:	80000115 	stw	zero,4(r16)
8110fc88:	80000215 	stw	zero,8(r16)
8110fc8c:	8080030d 	sth	r2,12(r16)
8110fc90:	80001915 	stw	zero,100(r16)
8110fc94:	8000038d 	sth	zero,14(r16)
8110fc98:	80000415 	stw	zero,16(r16)
8110fc9c:	80000515 	stw	zero,20(r16)
8110fca0:	80000615 	stw	zero,24(r16)
8110fca4:	11117040 	call	81111704 <memset>
8110fca8:	05a04474 	movhi	r22,33041
8110fcac:	94400217 	ldw	r17,8(r18)
8110fcb0:	05604474 	movhi	r21,33041
8110fcb4:	05204474 	movhi	r20,33041
8110fcb8:	04e04474 	movhi	r19,33041
8110fcbc:	b58c6b04 	addi	r22,r22,12716
8110fcc0:	ad4c8204 	addi	r21,r21,12808
8110fcc4:	a50ca104 	addi	r20,r20,12932
8110fcc8:	9cccb804 	addi	r19,r19,13024
8110fccc:	85800815 	stw	r22,32(r16)
8110fcd0:	85400915 	stw	r21,36(r16)
8110fcd4:	85000a15 	stw	r20,40(r16)
8110fcd8:	84c00b15 	stw	r19,44(r16)
8110fcdc:	84000715 	stw	r16,28(r16)
8110fce0:	00800284 	movi	r2,10
8110fce4:	8880030d 	sth	r2,12(r17)
8110fce8:	00800044 	movi	r2,1
8110fcec:	b80d883a 	mov	r6,r23
8110fcf0:	89001704 	addi	r4,r17,92
8110fcf4:	000b883a 	mov	r5,zero
8110fcf8:	88000015 	stw	zero,0(r17)
8110fcfc:	88000115 	stw	zero,4(r17)
8110fd00:	88000215 	stw	zero,8(r17)
8110fd04:	88001915 	stw	zero,100(r17)
8110fd08:	8880038d 	sth	r2,14(r17)
8110fd0c:	88000415 	stw	zero,16(r17)
8110fd10:	88000515 	stw	zero,20(r17)
8110fd14:	88000615 	stw	zero,24(r17)
8110fd18:	11117040 	call	81111704 <memset>
8110fd1c:	94000317 	ldw	r16,12(r18)
8110fd20:	00800484 	movi	r2,18
8110fd24:	8c400715 	stw	r17,28(r17)
8110fd28:	8d800815 	stw	r22,32(r17)
8110fd2c:	8d400915 	stw	r21,36(r17)
8110fd30:	8d000a15 	stw	r20,40(r17)
8110fd34:	8cc00b15 	stw	r19,44(r17)
8110fd38:	8080030d 	sth	r2,12(r16)
8110fd3c:	00800084 	movi	r2,2
8110fd40:	80000015 	stw	zero,0(r16)
8110fd44:	80000115 	stw	zero,4(r16)
8110fd48:	80000215 	stw	zero,8(r16)
8110fd4c:	80001915 	stw	zero,100(r16)
8110fd50:	8080038d 	sth	r2,14(r16)
8110fd54:	80000415 	stw	zero,16(r16)
8110fd58:	80000515 	stw	zero,20(r16)
8110fd5c:	80000615 	stw	zero,24(r16)
8110fd60:	b80d883a 	mov	r6,r23
8110fd64:	000b883a 	mov	r5,zero
8110fd68:	81001704 	addi	r4,r16,92
8110fd6c:	11117040 	call	81111704 <memset>
8110fd70:	00800044 	movi	r2,1
8110fd74:	84000715 	stw	r16,28(r16)
8110fd78:	85800815 	stw	r22,32(r16)
8110fd7c:	85400915 	stw	r21,36(r16)
8110fd80:	85000a15 	stw	r20,40(r16)
8110fd84:	84c00b15 	stw	r19,44(r16)
8110fd88:	90800e15 	stw	r2,56(r18)
8110fd8c:	dfc00817 	ldw	ra,32(sp)
8110fd90:	ddc00717 	ldw	r23,28(sp)
8110fd94:	dd800617 	ldw	r22,24(sp)
8110fd98:	dd400517 	ldw	r21,20(sp)
8110fd9c:	dd000417 	ldw	r20,16(sp)
8110fda0:	dcc00317 	ldw	r19,12(sp)
8110fda4:	dc800217 	ldw	r18,8(sp)
8110fda8:	dc400117 	ldw	r17,4(sp)
8110fdac:	dc000017 	ldw	r16,0(sp)
8110fdb0:	dec00904 	addi	sp,sp,36
8110fdb4:	f800283a 	ret

8110fdb8 <__fp_lock>:
8110fdb8:	0005883a 	mov	r2,zero
8110fdbc:	f800283a 	ret

8110fdc0 <__sfmoreglue>:
8110fdc0:	defffc04 	addi	sp,sp,-16
8110fdc4:	dc400115 	stw	r17,4(sp)
8110fdc8:	2c7fffc4 	addi	r17,r5,-1
8110fdcc:	8c401a24 	muli	r17,r17,104
8110fdd0:	dc800215 	stw	r18,8(sp)
8110fdd4:	2825883a 	mov	r18,r5
8110fdd8:	89401d04 	addi	r5,r17,116
8110fddc:	dc000015 	stw	r16,0(sp)
8110fde0:	dfc00315 	stw	ra,12(sp)
8110fde4:	1110cb80 	call	81110cb8 <_malloc_r>
8110fde8:	1021883a 	mov	r16,r2
8110fdec:	10000726 	beq	r2,zero,8110fe0c <__sfmoreglue+0x4c>
8110fdf0:	11000304 	addi	r4,r2,12
8110fdf4:	10000015 	stw	zero,0(r2)
8110fdf8:	14800115 	stw	r18,4(r2)
8110fdfc:	11000215 	stw	r4,8(r2)
8110fe00:	89801a04 	addi	r6,r17,104
8110fe04:	000b883a 	mov	r5,zero
8110fe08:	11117040 	call	81111704 <memset>
8110fe0c:	8005883a 	mov	r2,r16
8110fe10:	dfc00317 	ldw	ra,12(sp)
8110fe14:	dc800217 	ldw	r18,8(sp)
8110fe18:	dc400117 	ldw	r17,4(sp)
8110fe1c:	dc000017 	ldw	r16,0(sp)
8110fe20:	dec00404 	addi	sp,sp,16
8110fe24:	f800283a 	ret

8110fe28 <__sfp>:
8110fe28:	defffb04 	addi	sp,sp,-20
8110fe2c:	dc000015 	stw	r16,0(sp)
8110fe30:	042044b4 	movhi	r16,33042
8110fe34:	84019004 	addi	r16,r16,1600
8110fe38:	dcc00315 	stw	r19,12(sp)
8110fe3c:	2027883a 	mov	r19,r4
8110fe40:	81000017 	ldw	r4,0(r16)
8110fe44:	dfc00415 	stw	ra,16(sp)
8110fe48:	dc800215 	stw	r18,8(sp)
8110fe4c:	20800e17 	ldw	r2,56(r4)
8110fe50:	dc400115 	stw	r17,4(sp)
8110fe54:	1000021e 	bne	r2,zero,8110fe60 <__sfp+0x38>
8110fe58:	110fc1c0 	call	8110fc1c <__sinit.part.1>
8110fe5c:	81000017 	ldw	r4,0(r16)
8110fe60:	2480b804 	addi	r18,r4,736
8110fe64:	047fffc4 	movi	r17,-1
8110fe68:	91000117 	ldw	r4,4(r18)
8110fe6c:	94000217 	ldw	r16,8(r18)
8110fe70:	213fffc4 	addi	r4,r4,-1
8110fe74:	20000a16 	blt	r4,zero,8110fea0 <__sfp+0x78>
8110fe78:	8080030f 	ldh	r2,12(r16)
8110fe7c:	10000c26 	beq	r2,zero,8110feb0 <__sfp+0x88>
8110fe80:	80c01d04 	addi	r3,r16,116
8110fe84:	00000206 	br	8110fe90 <__sfp+0x68>
8110fe88:	18bfe60f 	ldh	r2,-104(r3)
8110fe8c:	10000826 	beq	r2,zero,8110feb0 <__sfp+0x88>
8110fe90:	213fffc4 	addi	r4,r4,-1
8110fe94:	1c3ffd04 	addi	r16,r3,-12
8110fe98:	18c01a04 	addi	r3,r3,104
8110fe9c:	247ffa1e 	bne	r4,r17,8110fe88 <__reset+0xfb0efe88>
8110fea0:	90800017 	ldw	r2,0(r18)
8110fea4:	10001d26 	beq	r2,zero,8110ff1c <__sfp+0xf4>
8110fea8:	1025883a 	mov	r18,r2
8110feac:	003fee06 	br	8110fe68 <__reset+0xfb0efe68>
8110feb0:	00bfffc4 	movi	r2,-1
8110feb4:	8080038d 	sth	r2,14(r16)
8110feb8:	00800044 	movi	r2,1
8110febc:	8080030d 	sth	r2,12(r16)
8110fec0:	80001915 	stw	zero,100(r16)
8110fec4:	80000015 	stw	zero,0(r16)
8110fec8:	80000215 	stw	zero,8(r16)
8110fecc:	80000115 	stw	zero,4(r16)
8110fed0:	80000415 	stw	zero,16(r16)
8110fed4:	80000515 	stw	zero,20(r16)
8110fed8:	80000615 	stw	zero,24(r16)
8110fedc:	01800204 	movi	r6,8
8110fee0:	000b883a 	mov	r5,zero
8110fee4:	81001704 	addi	r4,r16,92
8110fee8:	11117040 	call	81111704 <memset>
8110feec:	8005883a 	mov	r2,r16
8110fef0:	80000c15 	stw	zero,48(r16)
8110fef4:	80000d15 	stw	zero,52(r16)
8110fef8:	80001115 	stw	zero,68(r16)
8110fefc:	80001215 	stw	zero,72(r16)
8110ff00:	dfc00417 	ldw	ra,16(sp)
8110ff04:	dcc00317 	ldw	r19,12(sp)
8110ff08:	dc800217 	ldw	r18,8(sp)
8110ff0c:	dc400117 	ldw	r17,4(sp)
8110ff10:	dc000017 	ldw	r16,0(sp)
8110ff14:	dec00504 	addi	sp,sp,20
8110ff18:	f800283a 	ret
8110ff1c:	01400104 	movi	r5,4
8110ff20:	9809883a 	mov	r4,r19
8110ff24:	110fdc00 	call	8110fdc0 <__sfmoreglue>
8110ff28:	90800015 	stw	r2,0(r18)
8110ff2c:	103fde1e 	bne	r2,zero,8110fea8 <__reset+0xfb0efea8>
8110ff30:	00800304 	movi	r2,12
8110ff34:	98800015 	stw	r2,0(r19)
8110ff38:	0005883a 	mov	r2,zero
8110ff3c:	003ff006 	br	8110ff00 <__reset+0xfb0eff00>

8110ff40 <_cleanup>:
8110ff40:	00a044b4 	movhi	r2,33042
8110ff44:	10819004 	addi	r2,r2,1600
8110ff48:	11000017 	ldw	r4,0(r2)
8110ff4c:	01604474 	movhi	r5,33041
8110ff50:	29533704 	addi	r5,r5,19676
8110ff54:	111095c1 	jmpi	8111095c <_fwalk_reent>

8110ff58 <__sinit>:
8110ff58:	20800e17 	ldw	r2,56(r4)
8110ff5c:	10000126 	beq	r2,zero,8110ff64 <__sinit+0xc>
8110ff60:	f800283a 	ret
8110ff64:	110fc1c1 	jmpi	8110fc1c <__sinit.part.1>

8110ff68 <__sfp_lock_acquire>:
8110ff68:	f800283a 	ret

8110ff6c <__sfp_lock_release>:
8110ff6c:	f800283a 	ret

8110ff70 <__sinit_lock_acquire>:
8110ff70:	f800283a 	ret

8110ff74 <__sinit_lock_release>:
8110ff74:	f800283a 	ret

8110ff78 <__fp_lock_all>:
8110ff78:	00a044b4 	movhi	r2,33042
8110ff7c:	10819104 	addi	r2,r2,1604
8110ff80:	11000017 	ldw	r4,0(r2)
8110ff84:	01604474 	movhi	r5,33041
8110ff88:	297f6e04 	addi	r5,r5,-584
8110ff8c:	11108981 	jmpi	81110898 <_fwalk>

8110ff90 <__fp_unlock_all>:
8110ff90:	00a044b4 	movhi	r2,33042
8110ff94:	10819104 	addi	r2,r2,1604
8110ff98:	11000017 	ldw	r4,0(r2)
8110ff9c:	01604474 	movhi	r5,33041
8110ffa0:	297f0204 	addi	r5,r5,-1016
8110ffa4:	11108981 	jmpi	81110898 <_fwalk>

8110ffa8 <_malloc_trim_r>:
8110ffa8:	defffb04 	addi	sp,sp,-20
8110ffac:	dcc00315 	stw	r19,12(sp)
8110ffb0:	04e044b4 	movhi	r19,33042
8110ffb4:	dc800215 	stw	r18,8(sp)
8110ffb8:	dc400115 	stw	r17,4(sp)
8110ffbc:	dc000015 	stw	r16,0(sp)
8110ffc0:	dfc00415 	stw	ra,16(sp)
8110ffc4:	2821883a 	mov	r16,r5
8110ffc8:	9cfb9804 	addi	r19,r19,-4512
8110ffcc:	2025883a 	mov	r18,r4
8110ffd0:	11185e80 	call	811185e8 <__malloc_lock>
8110ffd4:	98800217 	ldw	r2,8(r19)
8110ffd8:	14400117 	ldw	r17,4(r2)
8110ffdc:	00bfff04 	movi	r2,-4
8110ffe0:	88a2703a 	and	r17,r17,r2
8110ffe4:	8c21c83a 	sub	r16,r17,r16
8110ffe8:	8403fbc4 	addi	r16,r16,4079
8110ffec:	8020d33a 	srli	r16,r16,12
8110fff0:	0083ffc4 	movi	r2,4095
8110fff4:	843fffc4 	addi	r16,r16,-1
8110fff8:	8020933a 	slli	r16,r16,12
8110fffc:	1400060e 	bge	r2,r16,81110018 <_malloc_trim_r+0x70>
81110000:	000b883a 	mov	r5,zero
81110004:	9009883a 	mov	r4,r18
81110008:	11131580 	call	81113158 <_sbrk_r>
8111000c:	98c00217 	ldw	r3,8(r19)
81110010:	1c47883a 	add	r3,r3,r17
81110014:	10c00a26 	beq	r2,r3,81110040 <_malloc_trim_r+0x98>
81110018:	9009883a 	mov	r4,r18
8111001c:	111860c0 	call	8111860c <__malloc_unlock>
81110020:	0005883a 	mov	r2,zero
81110024:	dfc00417 	ldw	ra,16(sp)
81110028:	dcc00317 	ldw	r19,12(sp)
8111002c:	dc800217 	ldw	r18,8(sp)
81110030:	dc400117 	ldw	r17,4(sp)
81110034:	dc000017 	ldw	r16,0(sp)
81110038:	dec00504 	addi	sp,sp,20
8111003c:	f800283a 	ret
81110040:	040bc83a 	sub	r5,zero,r16
81110044:	9009883a 	mov	r4,r18
81110048:	11131580 	call	81113158 <_sbrk_r>
8111004c:	00ffffc4 	movi	r3,-1
81110050:	10c00d26 	beq	r2,r3,81110088 <_malloc_trim_r+0xe0>
81110054:	00e044b4 	movhi	r3,33042
81110058:	18c1d304 	addi	r3,r3,1868
8111005c:	18800017 	ldw	r2,0(r3)
81110060:	99000217 	ldw	r4,8(r19)
81110064:	8c23c83a 	sub	r17,r17,r16
81110068:	8c400054 	ori	r17,r17,1
8111006c:	1421c83a 	sub	r16,r2,r16
81110070:	24400115 	stw	r17,4(r4)
81110074:	9009883a 	mov	r4,r18
81110078:	1c000015 	stw	r16,0(r3)
8111007c:	111860c0 	call	8111860c <__malloc_unlock>
81110080:	00800044 	movi	r2,1
81110084:	003fe706 	br	81110024 <__reset+0xfb0f0024>
81110088:	000b883a 	mov	r5,zero
8111008c:	9009883a 	mov	r4,r18
81110090:	11131580 	call	81113158 <_sbrk_r>
81110094:	99000217 	ldw	r4,8(r19)
81110098:	014003c4 	movi	r5,15
8111009c:	1107c83a 	sub	r3,r2,r4
811100a0:	28ffdd0e 	bge	r5,r3,81110018 <__reset+0xfb0f0018>
811100a4:	016044b4 	movhi	r5,33042
811100a8:	29419304 	addi	r5,r5,1612
811100ac:	29400017 	ldw	r5,0(r5)
811100b0:	18c00054 	ori	r3,r3,1
811100b4:	20c00115 	stw	r3,4(r4)
811100b8:	00e044b4 	movhi	r3,33042
811100bc:	1145c83a 	sub	r2,r2,r5
811100c0:	18c1d304 	addi	r3,r3,1868
811100c4:	18800015 	stw	r2,0(r3)
811100c8:	003fd306 	br	81110018 <__reset+0xfb0f0018>

811100cc <_free_r>:
811100cc:	28004126 	beq	r5,zero,811101d4 <_free_r+0x108>
811100d0:	defffd04 	addi	sp,sp,-12
811100d4:	dc400115 	stw	r17,4(sp)
811100d8:	dc000015 	stw	r16,0(sp)
811100dc:	2023883a 	mov	r17,r4
811100e0:	2821883a 	mov	r16,r5
811100e4:	dfc00215 	stw	ra,8(sp)
811100e8:	11185e80 	call	811185e8 <__malloc_lock>
811100ec:	81ffff17 	ldw	r7,-4(r16)
811100f0:	00bfff84 	movi	r2,-2
811100f4:	012044b4 	movhi	r4,33042
811100f8:	81bffe04 	addi	r6,r16,-8
811100fc:	3884703a 	and	r2,r7,r2
81110100:	213b9804 	addi	r4,r4,-4512
81110104:	308b883a 	add	r5,r6,r2
81110108:	2a400117 	ldw	r9,4(r5)
8111010c:	22000217 	ldw	r8,8(r4)
81110110:	00ffff04 	movi	r3,-4
81110114:	48c6703a 	and	r3,r9,r3
81110118:	2a005726 	beq	r5,r8,81110278 <_free_r+0x1ac>
8111011c:	28c00115 	stw	r3,4(r5)
81110120:	39c0004c 	andi	r7,r7,1
81110124:	3800091e 	bne	r7,zero,8111014c <_free_r+0x80>
81110128:	823ffe17 	ldw	r8,-8(r16)
8111012c:	22400204 	addi	r9,r4,8
81110130:	320dc83a 	sub	r6,r6,r8
81110134:	31c00217 	ldw	r7,8(r6)
81110138:	1205883a 	add	r2,r2,r8
8111013c:	3a406526 	beq	r7,r9,811102d4 <_free_r+0x208>
81110140:	32000317 	ldw	r8,12(r6)
81110144:	3a000315 	stw	r8,12(r7)
81110148:	41c00215 	stw	r7,8(r8)
8111014c:	28cf883a 	add	r7,r5,r3
81110150:	39c00117 	ldw	r7,4(r7)
81110154:	39c0004c 	andi	r7,r7,1
81110158:	38003a26 	beq	r7,zero,81110244 <_free_r+0x178>
8111015c:	10c00054 	ori	r3,r2,1
81110160:	30c00115 	stw	r3,4(r6)
81110164:	3087883a 	add	r3,r6,r2
81110168:	18800015 	stw	r2,0(r3)
8111016c:	00c07fc4 	movi	r3,511
81110170:	18801936 	bltu	r3,r2,811101d8 <_free_r+0x10c>
81110174:	1004d0fa 	srli	r2,r2,3
81110178:	01c00044 	movi	r7,1
8111017c:	21400117 	ldw	r5,4(r4)
81110180:	10c00044 	addi	r3,r2,1
81110184:	18c7883a 	add	r3,r3,r3
81110188:	1005d0ba 	srai	r2,r2,2
8111018c:	18c7883a 	add	r3,r3,r3
81110190:	18c7883a 	add	r3,r3,r3
81110194:	1907883a 	add	r3,r3,r4
81110198:	3884983a 	sll	r2,r7,r2
8111019c:	19c00017 	ldw	r7,0(r3)
811101a0:	1a3ffe04 	addi	r8,r3,-8
811101a4:	1144b03a 	or	r2,r2,r5
811101a8:	32000315 	stw	r8,12(r6)
811101ac:	31c00215 	stw	r7,8(r6)
811101b0:	20800115 	stw	r2,4(r4)
811101b4:	19800015 	stw	r6,0(r3)
811101b8:	39800315 	stw	r6,12(r7)
811101bc:	8809883a 	mov	r4,r17
811101c0:	dfc00217 	ldw	ra,8(sp)
811101c4:	dc400117 	ldw	r17,4(sp)
811101c8:	dc000017 	ldw	r16,0(sp)
811101cc:	dec00304 	addi	sp,sp,12
811101d0:	111860c1 	jmpi	8111860c <__malloc_unlock>
811101d4:	f800283a 	ret
811101d8:	100ad27a 	srli	r5,r2,9
811101dc:	00c00104 	movi	r3,4
811101e0:	19404a36 	bltu	r3,r5,8111030c <_free_r+0x240>
811101e4:	100ad1ba 	srli	r5,r2,6
811101e8:	28c00e44 	addi	r3,r5,57
811101ec:	18c7883a 	add	r3,r3,r3
811101f0:	29400e04 	addi	r5,r5,56
811101f4:	18c7883a 	add	r3,r3,r3
811101f8:	18c7883a 	add	r3,r3,r3
811101fc:	1909883a 	add	r4,r3,r4
81110200:	20c00017 	ldw	r3,0(r4)
81110204:	01e044b4 	movhi	r7,33042
81110208:	213ffe04 	addi	r4,r4,-8
8111020c:	39fb9804 	addi	r7,r7,-4512
81110210:	20c04426 	beq	r4,r3,81110324 <_free_r+0x258>
81110214:	01ffff04 	movi	r7,-4
81110218:	19400117 	ldw	r5,4(r3)
8111021c:	29ca703a 	and	r5,r5,r7
81110220:	1140022e 	bgeu	r2,r5,8111022c <_free_r+0x160>
81110224:	18c00217 	ldw	r3,8(r3)
81110228:	20fffb1e 	bne	r4,r3,81110218 <__reset+0xfb0f0218>
8111022c:	19000317 	ldw	r4,12(r3)
81110230:	31000315 	stw	r4,12(r6)
81110234:	30c00215 	stw	r3,8(r6)
81110238:	21800215 	stw	r6,8(r4)
8111023c:	19800315 	stw	r6,12(r3)
81110240:	003fde06 	br	811101bc <__reset+0xfb0f01bc>
81110244:	29c00217 	ldw	r7,8(r5)
81110248:	10c5883a 	add	r2,r2,r3
8111024c:	00e044b4 	movhi	r3,33042
81110250:	18fb9a04 	addi	r3,r3,-4504
81110254:	38c03b26 	beq	r7,r3,81110344 <_free_r+0x278>
81110258:	2a000317 	ldw	r8,12(r5)
8111025c:	11400054 	ori	r5,r2,1
81110260:	3087883a 	add	r3,r6,r2
81110264:	3a000315 	stw	r8,12(r7)
81110268:	41c00215 	stw	r7,8(r8)
8111026c:	31400115 	stw	r5,4(r6)
81110270:	18800015 	stw	r2,0(r3)
81110274:	003fbd06 	br	8111016c <__reset+0xfb0f016c>
81110278:	39c0004c 	andi	r7,r7,1
8111027c:	10c5883a 	add	r2,r2,r3
81110280:	3800071e 	bne	r7,zero,811102a0 <_free_r+0x1d4>
81110284:	81fffe17 	ldw	r7,-8(r16)
81110288:	31cdc83a 	sub	r6,r6,r7
8111028c:	30c00317 	ldw	r3,12(r6)
81110290:	31400217 	ldw	r5,8(r6)
81110294:	11c5883a 	add	r2,r2,r7
81110298:	28c00315 	stw	r3,12(r5)
8111029c:	19400215 	stw	r5,8(r3)
811102a0:	10c00054 	ori	r3,r2,1
811102a4:	30c00115 	stw	r3,4(r6)
811102a8:	00e044b4 	movhi	r3,33042
811102ac:	18c19404 	addi	r3,r3,1616
811102b0:	18c00017 	ldw	r3,0(r3)
811102b4:	21800215 	stw	r6,8(r4)
811102b8:	10ffc036 	bltu	r2,r3,811101bc <__reset+0xfb0f01bc>
811102bc:	00a044b4 	movhi	r2,33042
811102c0:	1081ca04 	addi	r2,r2,1832
811102c4:	11400017 	ldw	r5,0(r2)
811102c8:	8809883a 	mov	r4,r17
811102cc:	110ffa80 	call	8110ffa8 <_malloc_trim_r>
811102d0:	003fba06 	br	811101bc <__reset+0xfb0f01bc>
811102d4:	28c9883a 	add	r4,r5,r3
811102d8:	21000117 	ldw	r4,4(r4)
811102dc:	2100004c 	andi	r4,r4,1
811102e0:	2000391e 	bne	r4,zero,811103c8 <_free_r+0x2fc>
811102e4:	29c00217 	ldw	r7,8(r5)
811102e8:	29000317 	ldw	r4,12(r5)
811102ec:	1885883a 	add	r2,r3,r2
811102f0:	10c00054 	ori	r3,r2,1
811102f4:	39000315 	stw	r4,12(r7)
811102f8:	21c00215 	stw	r7,8(r4)
811102fc:	30c00115 	stw	r3,4(r6)
81110300:	308d883a 	add	r6,r6,r2
81110304:	30800015 	stw	r2,0(r6)
81110308:	003fac06 	br	811101bc <__reset+0xfb0f01bc>
8111030c:	00c00504 	movi	r3,20
81110310:	19401536 	bltu	r3,r5,81110368 <_free_r+0x29c>
81110314:	28c01704 	addi	r3,r5,92
81110318:	18c7883a 	add	r3,r3,r3
8111031c:	294016c4 	addi	r5,r5,91
81110320:	003fb406 	br	811101f4 <__reset+0xfb0f01f4>
81110324:	280bd0ba 	srai	r5,r5,2
81110328:	00c00044 	movi	r3,1
8111032c:	38800117 	ldw	r2,4(r7)
81110330:	194a983a 	sll	r5,r3,r5
81110334:	2007883a 	mov	r3,r4
81110338:	2884b03a 	or	r2,r5,r2
8111033c:	38800115 	stw	r2,4(r7)
81110340:	003fbb06 	br	81110230 <__reset+0xfb0f0230>
81110344:	21800515 	stw	r6,20(r4)
81110348:	21800415 	stw	r6,16(r4)
8111034c:	10c00054 	ori	r3,r2,1
81110350:	31c00315 	stw	r7,12(r6)
81110354:	31c00215 	stw	r7,8(r6)
81110358:	30c00115 	stw	r3,4(r6)
8111035c:	308d883a 	add	r6,r6,r2
81110360:	30800015 	stw	r2,0(r6)
81110364:	003f9506 	br	811101bc <__reset+0xfb0f01bc>
81110368:	00c01504 	movi	r3,84
8111036c:	19400536 	bltu	r3,r5,81110384 <_free_r+0x2b8>
81110370:	100ad33a 	srli	r5,r2,12
81110374:	28c01bc4 	addi	r3,r5,111
81110378:	18c7883a 	add	r3,r3,r3
8111037c:	29401b84 	addi	r5,r5,110
81110380:	003f9c06 	br	811101f4 <__reset+0xfb0f01f4>
81110384:	00c05504 	movi	r3,340
81110388:	19400536 	bltu	r3,r5,811103a0 <_free_r+0x2d4>
8111038c:	100ad3fa 	srli	r5,r2,15
81110390:	28c01e04 	addi	r3,r5,120
81110394:	18c7883a 	add	r3,r3,r3
81110398:	29401dc4 	addi	r5,r5,119
8111039c:	003f9506 	br	811101f4 <__reset+0xfb0f01f4>
811103a0:	00c15504 	movi	r3,1364
811103a4:	19400536 	bltu	r3,r5,811103bc <_free_r+0x2f0>
811103a8:	100ad4ba 	srli	r5,r2,18
811103ac:	28c01f44 	addi	r3,r5,125
811103b0:	18c7883a 	add	r3,r3,r3
811103b4:	29401f04 	addi	r5,r5,124
811103b8:	003f8e06 	br	811101f4 <__reset+0xfb0f01f4>
811103bc:	00c03f84 	movi	r3,254
811103c0:	01401f84 	movi	r5,126
811103c4:	003f8b06 	br	811101f4 <__reset+0xfb0f01f4>
811103c8:	10c00054 	ori	r3,r2,1
811103cc:	30c00115 	stw	r3,4(r6)
811103d0:	308d883a 	add	r6,r6,r2
811103d4:	30800015 	stw	r2,0(r6)
811103d8:	003f7806 	br	811101bc <__reset+0xfb0f01bc>

811103dc <__sfvwrite_r>:
811103dc:	30800217 	ldw	r2,8(r6)
811103e0:	10006726 	beq	r2,zero,81110580 <__sfvwrite_r+0x1a4>
811103e4:	28c0030b 	ldhu	r3,12(r5)
811103e8:	defff404 	addi	sp,sp,-48
811103ec:	dd400715 	stw	r21,28(sp)
811103f0:	dd000615 	stw	r20,24(sp)
811103f4:	dc000215 	stw	r16,8(sp)
811103f8:	dfc00b15 	stw	ra,44(sp)
811103fc:	df000a15 	stw	fp,40(sp)
81110400:	ddc00915 	stw	r23,36(sp)
81110404:	dd800815 	stw	r22,32(sp)
81110408:	dcc00515 	stw	r19,20(sp)
8111040c:	dc800415 	stw	r18,16(sp)
81110410:	dc400315 	stw	r17,12(sp)
81110414:	1880020c 	andi	r2,r3,8
81110418:	2821883a 	mov	r16,r5
8111041c:	202b883a 	mov	r21,r4
81110420:	3029883a 	mov	r20,r6
81110424:	10002726 	beq	r2,zero,811104c4 <__sfvwrite_r+0xe8>
81110428:	28800417 	ldw	r2,16(r5)
8111042c:	10002526 	beq	r2,zero,811104c4 <__sfvwrite_r+0xe8>
81110430:	1880008c 	andi	r2,r3,2
81110434:	a4400017 	ldw	r17,0(r20)
81110438:	10002a26 	beq	r2,zero,811104e4 <__sfvwrite_r+0x108>
8111043c:	05a00034 	movhi	r22,32768
81110440:	0027883a 	mov	r19,zero
81110444:	0025883a 	mov	r18,zero
81110448:	b5bf0004 	addi	r22,r22,-1024
8111044c:	980d883a 	mov	r6,r19
81110450:	a809883a 	mov	r4,r21
81110454:	90004626 	beq	r18,zero,81110570 <__sfvwrite_r+0x194>
81110458:	900f883a 	mov	r7,r18
8111045c:	b480022e 	bgeu	r22,r18,81110468 <__sfvwrite_r+0x8c>
81110460:	01e00034 	movhi	r7,32768
81110464:	39ff0004 	addi	r7,r7,-1024
81110468:	80800917 	ldw	r2,36(r16)
8111046c:	81400717 	ldw	r5,28(r16)
81110470:	103ee83a 	callr	r2
81110474:	0080570e 	bge	zero,r2,811105d4 <__sfvwrite_r+0x1f8>
81110478:	a0c00217 	ldw	r3,8(r20)
8111047c:	98a7883a 	add	r19,r19,r2
81110480:	90a5c83a 	sub	r18,r18,r2
81110484:	1885c83a 	sub	r2,r3,r2
81110488:	a0800215 	stw	r2,8(r20)
8111048c:	103fef1e 	bne	r2,zero,8111044c <__reset+0xfb0f044c>
81110490:	0005883a 	mov	r2,zero
81110494:	dfc00b17 	ldw	ra,44(sp)
81110498:	df000a17 	ldw	fp,40(sp)
8111049c:	ddc00917 	ldw	r23,36(sp)
811104a0:	dd800817 	ldw	r22,32(sp)
811104a4:	dd400717 	ldw	r21,28(sp)
811104a8:	dd000617 	ldw	r20,24(sp)
811104ac:	dcc00517 	ldw	r19,20(sp)
811104b0:	dc800417 	ldw	r18,16(sp)
811104b4:	dc400317 	ldw	r17,12(sp)
811104b8:	dc000217 	ldw	r16,8(sp)
811104bc:	dec00c04 	addi	sp,sp,48
811104c0:	f800283a 	ret
811104c4:	800b883a 	mov	r5,r16
811104c8:	a809883a 	mov	r4,r21
811104cc:	110df840 	call	8110df84 <__swsetup_r>
811104d0:	1000eb1e 	bne	r2,zero,81110880 <__sfvwrite_r+0x4a4>
811104d4:	80c0030b 	ldhu	r3,12(r16)
811104d8:	a4400017 	ldw	r17,0(r20)
811104dc:	1880008c 	andi	r2,r3,2
811104e0:	103fd61e 	bne	r2,zero,8111043c <__reset+0xfb0f043c>
811104e4:	1880004c 	andi	r2,r3,1
811104e8:	10003f1e 	bne	r2,zero,811105e8 <__sfvwrite_r+0x20c>
811104ec:	0039883a 	mov	fp,zero
811104f0:	0025883a 	mov	r18,zero
811104f4:	90001a26 	beq	r18,zero,81110560 <__sfvwrite_r+0x184>
811104f8:	1880800c 	andi	r2,r3,512
811104fc:	84c00217 	ldw	r19,8(r16)
81110500:	10002126 	beq	r2,zero,81110588 <__sfvwrite_r+0x1ac>
81110504:	982f883a 	mov	r23,r19
81110508:	94c09336 	bltu	r18,r19,81110758 <__sfvwrite_r+0x37c>
8111050c:	1881200c 	andi	r2,r3,1152
81110510:	10009e1e 	bne	r2,zero,8111078c <__sfvwrite_r+0x3b0>
81110514:	81000017 	ldw	r4,0(r16)
81110518:	b80d883a 	mov	r6,r23
8111051c:	e00b883a 	mov	r5,fp
81110520:	11115a80 	call	811115a8 <memmove>
81110524:	80c00217 	ldw	r3,8(r16)
81110528:	81000017 	ldw	r4,0(r16)
8111052c:	9005883a 	mov	r2,r18
81110530:	1ce7c83a 	sub	r19,r3,r19
81110534:	25cf883a 	add	r7,r4,r23
81110538:	84c00215 	stw	r19,8(r16)
8111053c:	81c00015 	stw	r7,0(r16)
81110540:	a0c00217 	ldw	r3,8(r20)
81110544:	e0b9883a 	add	fp,fp,r2
81110548:	90a5c83a 	sub	r18,r18,r2
8111054c:	18a7c83a 	sub	r19,r3,r2
81110550:	a4c00215 	stw	r19,8(r20)
81110554:	983fce26 	beq	r19,zero,81110490 <__reset+0xfb0f0490>
81110558:	80c0030b 	ldhu	r3,12(r16)
8111055c:	903fe61e 	bne	r18,zero,811104f8 <__reset+0xfb0f04f8>
81110560:	8f000017 	ldw	fp,0(r17)
81110564:	8c800117 	ldw	r18,4(r17)
81110568:	8c400204 	addi	r17,r17,8
8111056c:	003fe106 	br	811104f4 <__reset+0xfb0f04f4>
81110570:	8cc00017 	ldw	r19,0(r17)
81110574:	8c800117 	ldw	r18,4(r17)
81110578:	8c400204 	addi	r17,r17,8
8111057c:	003fb306 	br	8111044c <__reset+0xfb0f044c>
81110580:	0005883a 	mov	r2,zero
81110584:	f800283a 	ret
81110588:	81000017 	ldw	r4,0(r16)
8111058c:	80800417 	ldw	r2,16(r16)
81110590:	11005736 	bltu	r2,r4,811106f0 <__sfvwrite_r+0x314>
81110594:	85c00517 	ldw	r23,20(r16)
81110598:	95c05536 	bltu	r18,r23,811106f0 <__sfvwrite_r+0x314>
8111059c:	00a00034 	movhi	r2,32768
811105a0:	10bfffc4 	addi	r2,r2,-1
811105a4:	9009883a 	mov	r4,r18
811105a8:	1480012e 	bgeu	r2,r18,811105b0 <__sfvwrite_r+0x1d4>
811105ac:	1009883a 	mov	r4,r2
811105b0:	b80b883a 	mov	r5,r23
811105b4:	1115df00 	call	81115df0 <__divsi3>
811105b8:	15cf383a 	mul	r7,r2,r23
811105bc:	81400717 	ldw	r5,28(r16)
811105c0:	80800917 	ldw	r2,36(r16)
811105c4:	e00d883a 	mov	r6,fp
811105c8:	a809883a 	mov	r4,r21
811105cc:	103ee83a 	callr	r2
811105d0:	00bfdb16 	blt	zero,r2,81110540 <__reset+0xfb0f0540>
811105d4:	8080030b 	ldhu	r2,12(r16)
811105d8:	10801014 	ori	r2,r2,64
811105dc:	8080030d 	sth	r2,12(r16)
811105e0:	00bfffc4 	movi	r2,-1
811105e4:	003fab06 	br	81110494 <__reset+0xfb0f0494>
811105e8:	0027883a 	mov	r19,zero
811105ec:	0011883a 	mov	r8,zero
811105f0:	0039883a 	mov	fp,zero
811105f4:	0025883a 	mov	r18,zero
811105f8:	90001f26 	beq	r18,zero,81110678 <__sfvwrite_r+0x29c>
811105fc:	40005a26 	beq	r8,zero,81110768 <__sfvwrite_r+0x38c>
81110600:	982d883a 	mov	r22,r19
81110604:	94c0012e 	bgeu	r18,r19,8111060c <__sfvwrite_r+0x230>
81110608:	902d883a 	mov	r22,r18
8111060c:	81000017 	ldw	r4,0(r16)
81110610:	80800417 	ldw	r2,16(r16)
81110614:	b02f883a 	mov	r23,r22
81110618:	81c00517 	ldw	r7,20(r16)
8111061c:	1100032e 	bgeu	r2,r4,8111062c <__sfvwrite_r+0x250>
81110620:	80c00217 	ldw	r3,8(r16)
81110624:	38c7883a 	add	r3,r7,r3
81110628:	1d801816 	blt	r3,r22,8111068c <__sfvwrite_r+0x2b0>
8111062c:	b1c03e16 	blt	r22,r7,81110728 <__sfvwrite_r+0x34c>
81110630:	80800917 	ldw	r2,36(r16)
81110634:	81400717 	ldw	r5,28(r16)
81110638:	e00d883a 	mov	r6,fp
8111063c:	da000115 	stw	r8,4(sp)
81110640:	a809883a 	mov	r4,r21
81110644:	103ee83a 	callr	r2
81110648:	102f883a 	mov	r23,r2
8111064c:	da000117 	ldw	r8,4(sp)
81110650:	00bfe00e 	bge	zero,r2,811105d4 <__reset+0xfb0f05d4>
81110654:	9de7c83a 	sub	r19,r19,r23
81110658:	98001f26 	beq	r19,zero,811106d8 <__sfvwrite_r+0x2fc>
8111065c:	a0800217 	ldw	r2,8(r20)
81110660:	e5f9883a 	add	fp,fp,r23
81110664:	95e5c83a 	sub	r18,r18,r23
81110668:	15efc83a 	sub	r23,r2,r23
8111066c:	a5c00215 	stw	r23,8(r20)
81110670:	b83f8726 	beq	r23,zero,81110490 <__reset+0xfb0f0490>
81110674:	903fe11e 	bne	r18,zero,811105fc <__reset+0xfb0f05fc>
81110678:	8f000017 	ldw	fp,0(r17)
8111067c:	8c800117 	ldw	r18,4(r17)
81110680:	0011883a 	mov	r8,zero
81110684:	8c400204 	addi	r17,r17,8
81110688:	003fdb06 	br	811105f8 <__reset+0xfb0f05f8>
8111068c:	180d883a 	mov	r6,r3
81110690:	e00b883a 	mov	r5,fp
81110694:	da000115 	stw	r8,4(sp)
81110698:	d8c00015 	stw	r3,0(sp)
8111069c:	11115a80 	call	811115a8 <memmove>
811106a0:	d8c00017 	ldw	r3,0(sp)
811106a4:	80800017 	ldw	r2,0(r16)
811106a8:	800b883a 	mov	r5,r16
811106ac:	a809883a 	mov	r4,r21
811106b0:	10c5883a 	add	r2,r2,r3
811106b4:	80800015 	stw	r2,0(r16)
811106b8:	d8c00015 	stw	r3,0(sp)
811106bc:	110fb7c0 	call	8110fb7c <_fflush_r>
811106c0:	d8c00017 	ldw	r3,0(sp)
811106c4:	da000117 	ldw	r8,4(sp)
811106c8:	103fc21e 	bne	r2,zero,811105d4 <__reset+0xfb0f05d4>
811106cc:	182f883a 	mov	r23,r3
811106d0:	9de7c83a 	sub	r19,r19,r23
811106d4:	983fe11e 	bne	r19,zero,8111065c <__reset+0xfb0f065c>
811106d8:	800b883a 	mov	r5,r16
811106dc:	a809883a 	mov	r4,r21
811106e0:	110fb7c0 	call	8110fb7c <_fflush_r>
811106e4:	103fbb1e 	bne	r2,zero,811105d4 <__reset+0xfb0f05d4>
811106e8:	0011883a 	mov	r8,zero
811106ec:	003fdb06 	br	8111065c <__reset+0xfb0f065c>
811106f0:	94c0012e 	bgeu	r18,r19,811106f8 <__sfvwrite_r+0x31c>
811106f4:	9027883a 	mov	r19,r18
811106f8:	980d883a 	mov	r6,r19
811106fc:	e00b883a 	mov	r5,fp
81110700:	11115a80 	call	811115a8 <memmove>
81110704:	80800217 	ldw	r2,8(r16)
81110708:	80c00017 	ldw	r3,0(r16)
8111070c:	14c5c83a 	sub	r2,r2,r19
81110710:	1cc7883a 	add	r3,r3,r19
81110714:	80800215 	stw	r2,8(r16)
81110718:	80c00015 	stw	r3,0(r16)
8111071c:	10004326 	beq	r2,zero,8111082c <__sfvwrite_r+0x450>
81110720:	9805883a 	mov	r2,r19
81110724:	003f8606 	br	81110540 <__reset+0xfb0f0540>
81110728:	b00d883a 	mov	r6,r22
8111072c:	e00b883a 	mov	r5,fp
81110730:	da000115 	stw	r8,4(sp)
81110734:	11115a80 	call	811115a8 <memmove>
81110738:	80800217 	ldw	r2,8(r16)
8111073c:	80c00017 	ldw	r3,0(r16)
81110740:	da000117 	ldw	r8,4(sp)
81110744:	1585c83a 	sub	r2,r2,r22
81110748:	1dad883a 	add	r22,r3,r22
8111074c:	80800215 	stw	r2,8(r16)
81110750:	85800015 	stw	r22,0(r16)
81110754:	003fbf06 	br	81110654 <__reset+0xfb0f0654>
81110758:	81000017 	ldw	r4,0(r16)
8111075c:	9027883a 	mov	r19,r18
81110760:	902f883a 	mov	r23,r18
81110764:	003f6c06 	br	81110518 <__reset+0xfb0f0518>
81110768:	900d883a 	mov	r6,r18
8111076c:	01400284 	movi	r5,10
81110770:	e009883a 	mov	r4,fp
81110774:	11114c40 	call	811114c4 <memchr>
81110778:	10003e26 	beq	r2,zero,81110874 <__sfvwrite_r+0x498>
8111077c:	10800044 	addi	r2,r2,1
81110780:	1727c83a 	sub	r19,r2,fp
81110784:	02000044 	movi	r8,1
81110788:	003f9d06 	br	81110600 <__reset+0xfb0f0600>
8111078c:	80800517 	ldw	r2,20(r16)
81110790:	81400417 	ldw	r5,16(r16)
81110794:	81c00017 	ldw	r7,0(r16)
81110798:	10a7883a 	add	r19,r2,r2
8111079c:	9885883a 	add	r2,r19,r2
811107a0:	1026d7fa 	srli	r19,r2,31
811107a4:	396dc83a 	sub	r22,r7,r5
811107a8:	b1000044 	addi	r4,r22,1
811107ac:	9885883a 	add	r2,r19,r2
811107b0:	1027d07a 	srai	r19,r2,1
811107b4:	2485883a 	add	r2,r4,r18
811107b8:	980d883a 	mov	r6,r19
811107bc:	9880022e 	bgeu	r19,r2,811107c8 <__sfvwrite_r+0x3ec>
811107c0:	1027883a 	mov	r19,r2
811107c4:	100d883a 	mov	r6,r2
811107c8:	18c1000c 	andi	r3,r3,1024
811107cc:	18001c26 	beq	r3,zero,81110840 <__sfvwrite_r+0x464>
811107d0:	300b883a 	mov	r5,r6
811107d4:	a809883a 	mov	r4,r21
811107d8:	1110cb80 	call	81110cb8 <_malloc_r>
811107dc:	102f883a 	mov	r23,r2
811107e0:	10002926 	beq	r2,zero,81110888 <__sfvwrite_r+0x4ac>
811107e4:	81400417 	ldw	r5,16(r16)
811107e8:	b00d883a 	mov	r6,r22
811107ec:	1009883a 	mov	r4,r2
811107f0:	110b8ec0 	call	8110b8ec <memcpy>
811107f4:	8080030b 	ldhu	r2,12(r16)
811107f8:	00fedfc4 	movi	r3,-1153
811107fc:	10c4703a 	and	r2,r2,r3
81110800:	10802014 	ori	r2,r2,128
81110804:	8080030d 	sth	r2,12(r16)
81110808:	bd89883a 	add	r4,r23,r22
8111080c:	9d8fc83a 	sub	r7,r19,r22
81110810:	85c00415 	stw	r23,16(r16)
81110814:	84c00515 	stw	r19,20(r16)
81110818:	81000015 	stw	r4,0(r16)
8111081c:	9027883a 	mov	r19,r18
81110820:	81c00215 	stw	r7,8(r16)
81110824:	902f883a 	mov	r23,r18
81110828:	003f3b06 	br	81110518 <__reset+0xfb0f0518>
8111082c:	800b883a 	mov	r5,r16
81110830:	a809883a 	mov	r4,r21
81110834:	110fb7c0 	call	8110fb7c <_fflush_r>
81110838:	103fb926 	beq	r2,zero,81110720 <__reset+0xfb0f0720>
8111083c:	003f6506 	br	811105d4 <__reset+0xfb0f05d4>
81110840:	a809883a 	mov	r4,r21
81110844:	11129900 	call	81112990 <_realloc_r>
81110848:	102f883a 	mov	r23,r2
8111084c:	103fee1e 	bne	r2,zero,81110808 <__reset+0xfb0f0808>
81110850:	81400417 	ldw	r5,16(r16)
81110854:	a809883a 	mov	r4,r21
81110858:	11100cc0 	call	811100cc <_free_r>
8111085c:	8080030b 	ldhu	r2,12(r16)
81110860:	00ffdfc4 	movi	r3,-129
81110864:	1884703a 	and	r2,r3,r2
81110868:	00c00304 	movi	r3,12
8111086c:	a8c00015 	stw	r3,0(r21)
81110870:	003f5906 	br	811105d8 <__reset+0xfb0f05d8>
81110874:	94c00044 	addi	r19,r18,1
81110878:	02000044 	movi	r8,1
8111087c:	003f6006 	br	81110600 <__reset+0xfb0f0600>
81110880:	00bfffc4 	movi	r2,-1
81110884:	003f0306 	br	81110494 <__reset+0xfb0f0494>
81110888:	00800304 	movi	r2,12
8111088c:	a8800015 	stw	r2,0(r21)
81110890:	8080030b 	ldhu	r2,12(r16)
81110894:	003f5006 	br	811105d8 <__reset+0xfb0f05d8>

81110898 <_fwalk>:
81110898:	defff704 	addi	sp,sp,-36
8111089c:	dd000415 	stw	r20,16(sp)
811108a0:	dfc00815 	stw	ra,32(sp)
811108a4:	ddc00715 	stw	r23,28(sp)
811108a8:	dd800615 	stw	r22,24(sp)
811108ac:	dd400515 	stw	r21,20(sp)
811108b0:	dcc00315 	stw	r19,12(sp)
811108b4:	dc800215 	stw	r18,8(sp)
811108b8:	dc400115 	stw	r17,4(sp)
811108bc:	dc000015 	stw	r16,0(sp)
811108c0:	2500b804 	addi	r20,r4,736
811108c4:	a0002326 	beq	r20,zero,81110954 <_fwalk+0xbc>
811108c8:	282b883a 	mov	r21,r5
811108cc:	002f883a 	mov	r23,zero
811108d0:	05800044 	movi	r22,1
811108d4:	04ffffc4 	movi	r19,-1
811108d8:	a4400117 	ldw	r17,4(r20)
811108dc:	a4800217 	ldw	r18,8(r20)
811108e0:	8c7fffc4 	addi	r17,r17,-1
811108e4:	88000d16 	blt	r17,zero,8111091c <_fwalk+0x84>
811108e8:	94000304 	addi	r16,r18,12
811108ec:	94800384 	addi	r18,r18,14
811108f0:	8080000b 	ldhu	r2,0(r16)
811108f4:	8c7fffc4 	addi	r17,r17,-1
811108f8:	813ffd04 	addi	r4,r16,-12
811108fc:	b080042e 	bgeu	r22,r2,81110910 <_fwalk+0x78>
81110900:	9080000f 	ldh	r2,0(r18)
81110904:	14c00226 	beq	r2,r19,81110910 <_fwalk+0x78>
81110908:	a83ee83a 	callr	r21
8111090c:	b8aeb03a 	or	r23,r23,r2
81110910:	84001a04 	addi	r16,r16,104
81110914:	94801a04 	addi	r18,r18,104
81110918:	8cfff51e 	bne	r17,r19,811108f0 <__reset+0xfb0f08f0>
8111091c:	a5000017 	ldw	r20,0(r20)
81110920:	a03fed1e 	bne	r20,zero,811108d8 <__reset+0xfb0f08d8>
81110924:	b805883a 	mov	r2,r23
81110928:	dfc00817 	ldw	ra,32(sp)
8111092c:	ddc00717 	ldw	r23,28(sp)
81110930:	dd800617 	ldw	r22,24(sp)
81110934:	dd400517 	ldw	r21,20(sp)
81110938:	dd000417 	ldw	r20,16(sp)
8111093c:	dcc00317 	ldw	r19,12(sp)
81110940:	dc800217 	ldw	r18,8(sp)
81110944:	dc400117 	ldw	r17,4(sp)
81110948:	dc000017 	ldw	r16,0(sp)
8111094c:	dec00904 	addi	sp,sp,36
81110950:	f800283a 	ret
81110954:	002f883a 	mov	r23,zero
81110958:	003ff206 	br	81110924 <__reset+0xfb0f0924>

8111095c <_fwalk_reent>:
8111095c:	defff704 	addi	sp,sp,-36
81110960:	dd000415 	stw	r20,16(sp)
81110964:	dfc00815 	stw	ra,32(sp)
81110968:	ddc00715 	stw	r23,28(sp)
8111096c:	dd800615 	stw	r22,24(sp)
81110970:	dd400515 	stw	r21,20(sp)
81110974:	dcc00315 	stw	r19,12(sp)
81110978:	dc800215 	stw	r18,8(sp)
8111097c:	dc400115 	stw	r17,4(sp)
81110980:	dc000015 	stw	r16,0(sp)
81110984:	2500b804 	addi	r20,r4,736
81110988:	a0002326 	beq	r20,zero,81110a18 <_fwalk_reent+0xbc>
8111098c:	282b883a 	mov	r21,r5
81110990:	2027883a 	mov	r19,r4
81110994:	002f883a 	mov	r23,zero
81110998:	05800044 	movi	r22,1
8111099c:	04bfffc4 	movi	r18,-1
811109a0:	a4400117 	ldw	r17,4(r20)
811109a4:	a4000217 	ldw	r16,8(r20)
811109a8:	8c7fffc4 	addi	r17,r17,-1
811109ac:	88000c16 	blt	r17,zero,811109e0 <_fwalk_reent+0x84>
811109b0:	84000304 	addi	r16,r16,12
811109b4:	8080000b 	ldhu	r2,0(r16)
811109b8:	8c7fffc4 	addi	r17,r17,-1
811109bc:	817ffd04 	addi	r5,r16,-12
811109c0:	b080052e 	bgeu	r22,r2,811109d8 <_fwalk_reent+0x7c>
811109c4:	8080008f 	ldh	r2,2(r16)
811109c8:	9809883a 	mov	r4,r19
811109cc:	14800226 	beq	r2,r18,811109d8 <_fwalk_reent+0x7c>
811109d0:	a83ee83a 	callr	r21
811109d4:	b8aeb03a 	or	r23,r23,r2
811109d8:	84001a04 	addi	r16,r16,104
811109dc:	8cbff51e 	bne	r17,r18,811109b4 <__reset+0xfb0f09b4>
811109e0:	a5000017 	ldw	r20,0(r20)
811109e4:	a03fee1e 	bne	r20,zero,811109a0 <__reset+0xfb0f09a0>
811109e8:	b805883a 	mov	r2,r23
811109ec:	dfc00817 	ldw	ra,32(sp)
811109f0:	ddc00717 	ldw	r23,28(sp)
811109f4:	dd800617 	ldw	r22,24(sp)
811109f8:	dd400517 	ldw	r21,20(sp)
811109fc:	dd000417 	ldw	r20,16(sp)
81110a00:	dcc00317 	ldw	r19,12(sp)
81110a04:	dc800217 	ldw	r18,8(sp)
81110a08:	dc400117 	ldw	r17,4(sp)
81110a0c:	dc000017 	ldw	r16,0(sp)
81110a10:	dec00904 	addi	sp,sp,36
81110a14:	f800283a 	ret
81110a18:	002f883a 	mov	r23,zero
81110a1c:	003ff206 	br	811109e8 <__reset+0xfb0f09e8>

81110a20 <_setlocale_r>:
81110a20:	30001b26 	beq	r6,zero,81110a90 <_setlocale_r+0x70>
81110a24:	016044b4 	movhi	r5,33042
81110a28:	defffe04 	addi	sp,sp,-8
81110a2c:	29797504 	addi	r5,r5,-6700
81110a30:	3009883a 	mov	r4,r6
81110a34:	dc000015 	stw	r16,0(sp)
81110a38:	dfc00115 	stw	ra,4(sp)
81110a3c:	3021883a 	mov	r16,r6
81110a40:	11132e80 	call	811132e8 <strcmp>
81110a44:	1000061e 	bne	r2,zero,81110a60 <_setlocale_r+0x40>
81110a48:	00a044b4 	movhi	r2,33042
81110a4c:	10b95604 	addi	r2,r2,-6824
81110a50:	dfc00117 	ldw	ra,4(sp)
81110a54:	dc000017 	ldw	r16,0(sp)
81110a58:	dec00204 	addi	sp,sp,8
81110a5c:	f800283a 	ret
81110a60:	016044b4 	movhi	r5,33042
81110a64:	29795604 	addi	r5,r5,-6824
81110a68:	8009883a 	mov	r4,r16
81110a6c:	11132e80 	call	811132e8 <strcmp>
81110a70:	103ff526 	beq	r2,zero,81110a48 <__reset+0xfb0f0a48>
81110a74:	016044b4 	movhi	r5,33042
81110a78:	29796004 	addi	r5,r5,-6784
81110a7c:	8009883a 	mov	r4,r16
81110a80:	11132e80 	call	811132e8 <strcmp>
81110a84:	103ff026 	beq	r2,zero,81110a48 <__reset+0xfb0f0a48>
81110a88:	0005883a 	mov	r2,zero
81110a8c:	003ff006 	br	81110a50 <__reset+0xfb0f0a50>
81110a90:	00a044b4 	movhi	r2,33042
81110a94:	10b95604 	addi	r2,r2,-6824
81110a98:	f800283a 	ret

81110a9c <__locale_charset>:
81110a9c:	00a044b4 	movhi	r2,33042
81110aa0:	10bb8204 	addi	r2,r2,-4600
81110aa4:	f800283a 	ret

81110aa8 <__locale_mb_cur_max>:
81110aa8:	00a044b4 	movhi	r2,33042
81110aac:	10819204 	addi	r2,r2,1608
81110ab0:	10800017 	ldw	r2,0(r2)
81110ab4:	f800283a 	ret

81110ab8 <__locale_msgcharset>:
81110ab8:	00a044b4 	movhi	r2,33042
81110abc:	10bb7a04 	addi	r2,r2,-4632
81110ac0:	f800283a 	ret

81110ac4 <__locale_cjk_lang>:
81110ac4:	0005883a 	mov	r2,zero
81110ac8:	f800283a 	ret

81110acc <_localeconv_r>:
81110acc:	00a044b4 	movhi	r2,33042
81110ad0:	10bb8a04 	addi	r2,r2,-4568
81110ad4:	f800283a 	ret

81110ad8 <setlocale>:
81110ad8:	00a044b4 	movhi	r2,33042
81110adc:	10819104 	addi	r2,r2,1604
81110ae0:	280d883a 	mov	r6,r5
81110ae4:	200b883a 	mov	r5,r4
81110ae8:	11000017 	ldw	r4,0(r2)
81110aec:	1110a201 	jmpi	81110a20 <_setlocale_r>

81110af0 <localeconv>:
81110af0:	00a044b4 	movhi	r2,33042
81110af4:	10bb8a04 	addi	r2,r2,-4568
81110af8:	f800283a 	ret

81110afc <__smakebuf_r>:
81110afc:	2880030b 	ldhu	r2,12(r5)
81110b00:	10c0008c 	andi	r3,r2,2
81110b04:	1800411e 	bne	r3,zero,81110c0c <__smakebuf_r+0x110>
81110b08:	deffec04 	addi	sp,sp,-80
81110b0c:	dc000f15 	stw	r16,60(sp)
81110b10:	2821883a 	mov	r16,r5
81110b14:	2940038f 	ldh	r5,14(r5)
81110b18:	dc401015 	stw	r17,64(sp)
81110b1c:	dfc01315 	stw	ra,76(sp)
81110b20:	dcc01215 	stw	r19,72(sp)
81110b24:	dc801115 	stw	r18,68(sp)
81110b28:	2023883a 	mov	r17,r4
81110b2c:	28001c16 	blt	r5,zero,81110ba0 <__smakebuf_r+0xa4>
81110b30:	d80d883a 	mov	r6,sp
81110b34:	1114fe80 	call	81114fe8 <_fstat_r>
81110b38:	10001816 	blt	r2,zero,81110b9c <__smakebuf_r+0xa0>
81110b3c:	d8800117 	ldw	r2,4(sp)
81110b40:	00e00014 	movui	r3,32768
81110b44:	10bc000c 	andi	r2,r2,61440
81110b48:	14c80020 	cmpeqi	r19,r2,8192
81110b4c:	10c03726 	beq	r2,r3,81110c2c <__smakebuf_r+0x130>
81110b50:	80c0030b 	ldhu	r3,12(r16)
81110b54:	18c20014 	ori	r3,r3,2048
81110b58:	80c0030d 	sth	r3,12(r16)
81110b5c:	00c80004 	movi	r3,8192
81110b60:	10c0521e 	bne	r2,r3,81110cac <__smakebuf_r+0x1b0>
81110b64:	8140038f 	ldh	r5,14(r16)
81110b68:	8809883a 	mov	r4,r17
81110b6c:	11150440 	call	81115044 <_isatty_r>
81110b70:	10004c26 	beq	r2,zero,81110ca4 <__smakebuf_r+0x1a8>
81110b74:	8080030b 	ldhu	r2,12(r16)
81110b78:	80c010c4 	addi	r3,r16,67
81110b7c:	80c00015 	stw	r3,0(r16)
81110b80:	10800054 	ori	r2,r2,1
81110b84:	8080030d 	sth	r2,12(r16)
81110b88:	00800044 	movi	r2,1
81110b8c:	80c00415 	stw	r3,16(r16)
81110b90:	80800515 	stw	r2,20(r16)
81110b94:	04810004 	movi	r18,1024
81110b98:	00000706 	br	81110bb8 <__smakebuf_r+0xbc>
81110b9c:	8080030b 	ldhu	r2,12(r16)
81110ba0:	10c0200c 	andi	r3,r2,128
81110ba4:	18001f1e 	bne	r3,zero,81110c24 <__smakebuf_r+0x128>
81110ba8:	04810004 	movi	r18,1024
81110bac:	10820014 	ori	r2,r2,2048
81110bb0:	8080030d 	sth	r2,12(r16)
81110bb4:	0027883a 	mov	r19,zero
81110bb8:	900b883a 	mov	r5,r18
81110bbc:	8809883a 	mov	r4,r17
81110bc0:	1110cb80 	call	81110cb8 <_malloc_r>
81110bc4:	10002c26 	beq	r2,zero,81110c78 <__smakebuf_r+0x17c>
81110bc8:	80c0030b 	ldhu	r3,12(r16)
81110bcc:	01204474 	movhi	r4,33041
81110bd0:	213f0404 	addi	r4,r4,-1008
81110bd4:	89000f15 	stw	r4,60(r17)
81110bd8:	18c02014 	ori	r3,r3,128
81110bdc:	80c0030d 	sth	r3,12(r16)
81110be0:	80800015 	stw	r2,0(r16)
81110be4:	80800415 	stw	r2,16(r16)
81110be8:	84800515 	stw	r18,20(r16)
81110bec:	98001a1e 	bne	r19,zero,81110c58 <__smakebuf_r+0x15c>
81110bf0:	dfc01317 	ldw	ra,76(sp)
81110bf4:	dcc01217 	ldw	r19,72(sp)
81110bf8:	dc801117 	ldw	r18,68(sp)
81110bfc:	dc401017 	ldw	r17,64(sp)
81110c00:	dc000f17 	ldw	r16,60(sp)
81110c04:	dec01404 	addi	sp,sp,80
81110c08:	f800283a 	ret
81110c0c:	288010c4 	addi	r2,r5,67
81110c10:	28800015 	stw	r2,0(r5)
81110c14:	28800415 	stw	r2,16(r5)
81110c18:	00800044 	movi	r2,1
81110c1c:	28800515 	stw	r2,20(r5)
81110c20:	f800283a 	ret
81110c24:	04801004 	movi	r18,64
81110c28:	003fe006 	br	81110bac <__reset+0xfb0f0bac>
81110c2c:	81000a17 	ldw	r4,40(r16)
81110c30:	00e04474 	movhi	r3,33041
81110c34:	18cca104 	addi	r3,r3,12932
81110c38:	20ffc51e 	bne	r4,r3,81110b50 <__reset+0xfb0f0b50>
81110c3c:	8080030b 	ldhu	r2,12(r16)
81110c40:	04810004 	movi	r18,1024
81110c44:	84801315 	stw	r18,76(r16)
81110c48:	1484b03a 	or	r2,r2,r18
81110c4c:	8080030d 	sth	r2,12(r16)
81110c50:	0027883a 	mov	r19,zero
81110c54:	003fd806 	br	81110bb8 <__reset+0xfb0f0bb8>
81110c58:	8140038f 	ldh	r5,14(r16)
81110c5c:	8809883a 	mov	r4,r17
81110c60:	11150440 	call	81115044 <_isatty_r>
81110c64:	103fe226 	beq	r2,zero,81110bf0 <__reset+0xfb0f0bf0>
81110c68:	8080030b 	ldhu	r2,12(r16)
81110c6c:	10800054 	ori	r2,r2,1
81110c70:	8080030d 	sth	r2,12(r16)
81110c74:	003fde06 	br	81110bf0 <__reset+0xfb0f0bf0>
81110c78:	8080030b 	ldhu	r2,12(r16)
81110c7c:	10c0800c 	andi	r3,r2,512
81110c80:	183fdb1e 	bne	r3,zero,81110bf0 <__reset+0xfb0f0bf0>
81110c84:	10800094 	ori	r2,r2,2
81110c88:	80c010c4 	addi	r3,r16,67
81110c8c:	8080030d 	sth	r2,12(r16)
81110c90:	00800044 	movi	r2,1
81110c94:	80c00015 	stw	r3,0(r16)
81110c98:	80c00415 	stw	r3,16(r16)
81110c9c:	80800515 	stw	r2,20(r16)
81110ca0:	003fd306 	br	81110bf0 <__reset+0xfb0f0bf0>
81110ca4:	04810004 	movi	r18,1024
81110ca8:	003fc306 	br	81110bb8 <__reset+0xfb0f0bb8>
81110cac:	0027883a 	mov	r19,zero
81110cb0:	04810004 	movi	r18,1024
81110cb4:	003fc006 	br	81110bb8 <__reset+0xfb0f0bb8>

81110cb8 <_malloc_r>:
81110cb8:	defff504 	addi	sp,sp,-44
81110cbc:	dc800315 	stw	r18,12(sp)
81110cc0:	dfc00a15 	stw	ra,40(sp)
81110cc4:	df000915 	stw	fp,36(sp)
81110cc8:	ddc00815 	stw	r23,32(sp)
81110ccc:	dd800715 	stw	r22,28(sp)
81110cd0:	dd400615 	stw	r21,24(sp)
81110cd4:	dd000515 	stw	r20,20(sp)
81110cd8:	dcc00415 	stw	r19,16(sp)
81110cdc:	dc400215 	stw	r17,8(sp)
81110ce0:	dc000115 	stw	r16,4(sp)
81110ce4:	288002c4 	addi	r2,r5,11
81110ce8:	00c00584 	movi	r3,22
81110cec:	2025883a 	mov	r18,r4
81110cf0:	18807f2e 	bgeu	r3,r2,81110ef0 <_malloc_r+0x238>
81110cf4:	047ffe04 	movi	r17,-8
81110cf8:	1462703a 	and	r17,r2,r17
81110cfc:	8800a316 	blt	r17,zero,81110f8c <_malloc_r+0x2d4>
81110d00:	8940a236 	bltu	r17,r5,81110f8c <_malloc_r+0x2d4>
81110d04:	11185e80 	call	811185e8 <__malloc_lock>
81110d08:	00807dc4 	movi	r2,503
81110d0c:	1441e92e 	bgeu	r2,r17,811114b4 <_malloc_r+0x7fc>
81110d10:	8804d27a 	srli	r2,r17,9
81110d14:	1000a126 	beq	r2,zero,81110f9c <_malloc_r+0x2e4>
81110d18:	00c00104 	movi	r3,4
81110d1c:	18811e36 	bltu	r3,r2,81111198 <_malloc_r+0x4e0>
81110d20:	8804d1ba 	srli	r2,r17,6
81110d24:	12000e44 	addi	r8,r2,57
81110d28:	11c00e04 	addi	r7,r2,56
81110d2c:	4209883a 	add	r4,r8,r8
81110d30:	04e044b4 	movhi	r19,33042
81110d34:	2109883a 	add	r4,r4,r4
81110d38:	9cfb9804 	addi	r19,r19,-4512
81110d3c:	2109883a 	add	r4,r4,r4
81110d40:	9909883a 	add	r4,r19,r4
81110d44:	24000117 	ldw	r16,4(r4)
81110d48:	213ffe04 	addi	r4,r4,-8
81110d4c:	24009726 	beq	r4,r16,81110fac <_malloc_r+0x2f4>
81110d50:	80800117 	ldw	r2,4(r16)
81110d54:	01bfff04 	movi	r6,-4
81110d58:	014003c4 	movi	r5,15
81110d5c:	1184703a 	and	r2,r2,r6
81110d60:	1447c83a 	sub	r3,r2,r17
81110d64:	28c00716 	blt	r5,r3,81110d84 <_malloc_r+0xcc>
81110d68:	1800920e 	bge	r3,zero,81110fb4 <_malloc_r+0x2fc>
81110d6c:	84000317 	ldw	r16,12(r16)
81110d70:	24008e26 	beq	r4,r16,81110fac <_malloc_r+0x2f4>
81110d74:	80800117 	ldw	r2,4(r16)
81110d78:	1184703a 	and	r2,r2,r6
81110d7c:	1447c83a 	sub	r3,r2,r17
81110d80:	28fff90e 	bge	r5,r3,81110d68 <__reset+0xfb0f0d68>
81110d84:	3809883a 	mov	r4,r7
81110d88:	01a044b4 	movhi	r6,33042
81110d8c:	9c000417 	ldw	r16,16(r19)
81110d90:	31bb9804 	addi	r6,r6,-4512
81110d94:	32000204 	addi	r8,r6,8
81110d98:	82013426 	beq	r16,r8,8111126c <_malloc_r+0x5b4>
81110d9c:	80c00117 	ldw	r3,4(r16)
81110da0:	00bfff04 	movi	r2,-4
81110da4:	188e703a 	and	r7,r3,r2
81110da8:	3c45c83a 	sub	r2,r7,r17
81110dac:	00c003c4 	movi	r3,15
81110db0:	18811f16 	blt	r3,r2,81111230 <_malloc_r+0x578>
81110db4:	32000515 	stw	r8,20(r6)
81110db8:	32000415 	stw	r8,16(r6)
81110dbc:	10007f0e 	bge	r2,zero,81110fbc <_malloc_r+0x304>
81110dc0:	00807fc4 	movi	r2,511
81110dc4:	11c0fd36 	bltu	r2,r7,811111bc <_malloc_r+0x504>
81110dc8:	3806d0fa 	srli	r3,r7,3
81110dcc:	01c00044 	movi	r7,1
81110dd0:	30800117 	ldw	r2,4(r6)
81110dd4:	19400044 	addi	r5,r3,1
81110dd8:	294b883a 	add	r5,r5,r5
81110ddc:	1807d0ba 	srai	r3,r3,2
81110de0:	294b883a 	add	r5,r5,r5
81110de4:	294b883a 	add	r5,r5,r5
81110de8:	298b883a 	add	r5,r5,r6
81110dec:	38c6983a 	sll	r3,r7,r3
81110df0:	29c00017 	ldw	r7,0(r5)
81110df4:	2a7ffe04 	addi	r9,r5,-8
81110df8:	1886b03a 	or	r3,r3,r2
81110dfc:	82400315 	stw	r9,12(r16)
81110e00:	81c00215 	stw	r7,8(r16)
81110e04:	30c00115 	stw	r3,4(r6)
81110e08:	2c000015 	stw	r16,0(r5)
81110e0c:	3c000315 	stw	r16,12(r7)
81110e10:	2005d0ba 	srai	r2,r4,2
81110e14:	01400044 	movi	r5,1
81110e18:	288a983a 	sll	r5,r5,r2
81110e1c:	19406f36 	bltu	r3,r5,81110fdc <_malloc_r+0x324>
81110e20:	28c4703a 	and	r2,r5,r3
81110e24:	10000a1e 	bne	r2,zero,81110e50 <_malloc_r+0x198>
81110e28:	00bfff04 	movi	r2,-4
81110e2c:	294b883a 	add	r5,r5,r5
81110e30:	2088703a 	and	r4,r4,r2
81110e34:	28c4703a 	and	r2,r5,r3
81110e38:	21000104 	addi	r4,r4,4
81110e3c:	1000041e 	bne	r2,zero,81110e50 <_malloc_r+0x198>
81110e40:	294b883a 	add	r5,r5,r5
81110e44:	28c4703a 	and	r2,r5,r3
81110e48:	21000104 	addi	r4,r4,4
81110e4c:	103ffc26 	beq	r2,zero,81110e40 <__reset+0xfb0f0e40>
81110e50:	02bfff04 	movi	r10,-4
81110e54:	024003c4 	movi	r9,15
81110e58:	21800044 	addi	r6,r4,1
81110e5c:	318d883a 	add	r6,r6,r6
81110e60:	318d883a 	add	r6,r6,r6
81110e64:	318d883a 	add	r6,r6,r6
81110e68:	998d883a 	add	r6,r19,r6
81110e6c:	333ffe04 	addi	r12,r6,-8
81110e70:	2017883a 	mov	r11,r4
81110e74:	31800104 	addi	r6,r6,4
81110e78:	34000017 	ldw	r16,0(r6)
81110e7c:	31fffd04 	addi	r7,r6,-12
81110e80:	81c0041e 	bne	r16,r7,81110e94 <_malloc_r+0x1dc>
81110e84:	0000fb06 	br	81111274 <_malloc_r+0x5bc>
81110e88:	1801030e 	bge	r3,zero,81111298 <_malloc_r+0x5e0>
81110e8c:	84000317 	ldw	r16,12(r16)
81110e90:	81c0f826 	beq	r16,r7,81111274 <_malloc_r+0x5bc>
81110e94:	80800117 	ldw	r2,4(r16)
81110e98:	1284703a 	and	r2,r2,r10
81110e9c:	1447c83a 	sub	r3,r2,r17
81110ea0:	48fff90e 	bge	r9,r3,81110e88 <__reset+0xfb0f0e88>
81110ea4:	80800317 	ldw	r2,12(r16)
81110ea8:	81000217 	ldw	r4,8(r16)
81110eac:	89400054 	ori	r5,r17,1
81110eb0:	81400115 	stw	r5,4(r16)
81110eb4:	20800315 	stw	r2,12(r4)
81110eb8:	11000215 	stw	r4,8(r2)
81110ebc:	8463883a 	add	r17,r16,r17
81110ec0:	9c400515 	stw	r17,20(r19)
81110ec4:	9c400415 	stw	r17,16(r19)
81110ec8:	18800054 	ori	r2,r3,1
81110ecc:	88800115 	stw	r2,4(r17)
81110ed0:	8a000315 	stw	r8,12(r17)
81110ed4:	8a000215 	stw	r8,8(r17)
81110ed8:	88e3883a 	add	r17,r17,r3
81110edc:	88c00015 	stw	r3,0(r17)
81110ee0:	9009883a 	mov	r4,r18
81110ee4:	111860c0 	call	8111860c <__malloc_unlock>
81110ee8:	80800204 	addi	r2,r16,8
81110eec:	00001b06 	br	81110f5c <_malloc_r+0x2a4>
81110ef0:	04400404 	movi	r17,16
81110ef4:	89402536 	bltu	r17,r5,81110f8c <_malloc_r+0x2d4>
81110ef8:	11185e80 	call	811185e8 <__malloc_lock>
81110efc:	00800184 	movi	r2,6
81110f00:	01000084 	movi	r4,2
81110f04:	04e044b4 	movhi	r19,33042
81110f08:	1085883a 	add	r2,r2,r2
81110f0c:	9cfb9804 	addi	r19,r19,-4512
81110f10:	1085883a 	add	r2,r2,r2
81110f14:	9885883a 	add	r2,r19,r2
81110f18:	14000117 	ldw	r16,4(r2)
81110f1c:	10fffe04 	addi	r3,r2,-8
81110f20:	80c0d926 	beq	r16,r3,81111288 <_malloc_r+0x5d0>
81110f24:	80c00117 	ldw	r3,4(r16)
81110f28:	81000317 	ldw	r4,12(r16)
81110f2c:	00bfff04 	movi	r2,-4
81110f30:	1884703a 	and	r2,r3,r2
81110f34:	81400217 	ldw	r5,8(r16)
81110f38:	8085883a 	add	r2,r16,r2
81110f3c:	10c00117 	ldw	r3,4(r2)
81110f40:	29000315 	stw	r4,12(r5)
81110f44:	21400215 	stw	r5,8(r4)
81110f48:	18c00054 	ori	r3,r3,1
81110f4c:	10c00115 	stw	r3,4(r2)
81110f50:	9009883a 	mov	r4,r18
81110f54:	111860c0 	call	8111860c <__malloc_unlock>
81110f58:	80800204 	addi	r2,r16,8
81110f5c:	dfc00a17 	ldw	ra,40(sp)
81110f60:	df000917 	ldw	fp,36(sp)
81110f64:	ddc00817 	ldw	r23,32(sp)
81110f68:	dd800717 	ldw	r22,28(sp)
81110f6c:	dd400617 	ldw	r21,24(sp)
81110f70:	dd000517 	ldw	r20,20(sp)
81110f74:	dcc00417 	ldw	r19,16(sp)
81110f78:	dc800317 	ldw	r18,12(sp)
81110f7c:	dc400217 	ldw	r17,8(sp)
81110f80:	dc000117 	ldw	r16,4(sp)
81110f84:	dec00b04 	addi	sp,sp,44
81110f88:	f800283a 	ret
81110f8c:	00800304 	movi	r2,12
81110f90:	90800015 	stw	r2,0(r18)
81110f94:	0005883a 	mov	r2,zero
81110f98:	003ff006 	br	81110f5c <__reset+0xfb0f0f5c>
81110f9c:	01002004 	movi	r4,128
81110fa0:	02001004 	movi	r8,64
81110fa4:	01c00fc4 	movi	r7,63
81110fa8:	003f6106 	br	81110d30 <__reset+0xfb0f0d30>
81110fac:	4009883a 	mov	r4,r8
81110fb0:	003f7506 	br	81110d88 <__reset+0xfb0f0d88>
81110fb4:	81000317 	ldw	r4,12(r16)
81110fb8:	003fde06 	br	81110f34 <__reset+0xfb0f0f34>
81110fbc:	81c5883a 	add	r2,r16,r7
81110fc0:	11400117 	ldw	r5,4(r2)
81110fc4:	9009883a 	mov	r4,r18
81110fc8:	29400054 	ori	r5,r5,1
81110fcc:	11400115 	stw	r5,4(r2)
81110fd0:	111860c0 	call	8111860c <__malloc_unlock>
81110fd4:	80800204 	addi	r2,r16,8
81110fd8:	003fe006 	br	81110f5c <__reset+0xfb0f0f5c>
81110fdc:	9c000217 	ldw	r16,8(r19)
81110fe0:	00bfff04 	movi	r2,-4
81110fe4:	85800117 	ldw	r22,4(r16)
81110fe8:	b0ac703a 	and	r22,r22,r2
81110fec:	b4400336 	bltu	r22,r17,81110ffc <_malloc_r+0x344>
81110ff0:	b445c83a 	sub	r2,r22,r17
81110ff4:	00c003c4 	movi	r3,15
81110ff8:	18805d16 	blt	r3,r2,81111170 <_malloc_r+0x4b8>
81110ffc:	05e044b4 	movhi	r23,33042
81111000:	00a044b4 	movhi	r2,33042
81111004:	1081ca04 	addi	r2,r2,1832
81111008:	bdc19304 	addi	r23,r23,1612
8111100c:	15400017 	ldw	r21,0(r2)
81111010:	b8c00017 	ldw	r3,0(r23)
81111014:	00bfffc4 	movi	r2,-1
81111018:	858d883a 	add	r6,r16,r22
8111101c:	8d6b883a 	add	r21,r17,r21
81111020:	1880ea26 	beq	r3,r2,811113cc <_malloc_r+0x714>
81111024:	ad4403c4 	addi	r21,r21,4111
81111028:	00bc0004 	movi	r2,-4096
8111102c:	a8aa703a 	and	r21,r21,r2
81111030:	a80b883a 	mov	r5,r21
81111034:	9009883a 	mov	r4,r18
81111038:	d9800015 	stw	r6,0(sp)
8111103c:	11131580 	call	81113158 <_sbrk_r>
81111040:	1029883a 	mov	r20,r2
81111044:	00bfffc4 	movi	r2,-1
81111048:	d9800017 	ldw	r6,0(sp)
8111104c:	a080e826 	beq	r20,r2,811113f0 <_malloc_r+0x738>
81111050:	a180a636 	bltu	r20,r6,811112ec <_malloc_r+0x634>
81111054:	072044b4 	movhi	fp,33042
81111058:	e701d304 	addi	fp,fp,1868
8111105c:	e0800017 	ldw	r2,0(fp)
81111060:	a887883a 	add	r3,r21,r2
81111064:	e0c00015 	stw	r3,0(fp)
81111068:	3500e626 	beq	r6,r20,81111404 <_malloc_r+0x74c>
8111106c:	b9000017 	ldw	r4,0(r23)
81111070:	00bfffc4 	movi	r2,-1
81111074:	2080ee26 	beq	r4,r2,81111430 <_malloc_r+0x778>
81111078:	a185c83a 	sub	r2,r20,r6
8111107c:	10c5883a 	add	r2,r2,r3
81111080:	e0800015 	stw	r2,0(fp)
81111084:	a0c001cc 	andi	r3,r20,7
81111088:	1800bc26 	beq	r3,zero,8111137c <_malloc_r+0x6c4>
8111108c:	a0e9c83a 	sub	r20,r20,r3
81111090:	00840204 	movi	r2,4104
81111094:	a5000204 	addi	r20,r20,8
81111098:	10c7c83a 	sub	r3,r2,r3
8111109c:	a545883a 	add	r2,r20,r21
811110a0:	1083ffcc 	andi	r2,r2,4095
811110a4:	18abc83a 	sub	r21,r3,r2
811110a8:	a80b883a 	mov	r5,r21
811110ac:	9009883a 	mov	r4,r18
811110b0:	11131580 	call	81113158 <_sbrk_r>
811110b4:	00ffffc4 	movi	r3,-1
811110b8:	10c0e126 	beq	r2,r3,81111440 <_malloc_r+0x788>
811110bc:	1505c83a 	sub	r2,r2,r20
811110c0:	1545883a 	add	r2,r2,r21
811110c4:	10800054 	ori	r2,r2,1
811110c8:	e0c00017 	ldw	r3,0(fp)
811110cc:	9d000215 	stw	r20,8(r19)
811110d0:	a0800115 	stw	r2,4(r20)
811110d4:	a8c7883a 	add	r3,r21,r3
811110d8:	e0c00015 	stw	r3,0(fp)
811110dc:	84c00e26 	beq	r16,r19,81111118 <_malloc_r+0x460>
811110e0:	018003c4 	movi	r6,15
811110e4:	3580a72e 	bgeu	r6,r22,81111384 <_malloc_r+0x6cc>
811110e8:	81400117 	ldw	r5,4(r16)
811110ec:	013ffe04 	movi	r4,-8
811110f0:	b0bffd04 	addi	r2,r22,-12
811110f4:	1104703a 	and	r2,r2,r4
811110f8:	2900004c 	andi	r4,r5,1
811110fc:	2088b03a 	or	r4,r4,r2
81111100:	81000115 	stw	r4,4(r16)
81111104:	01400144 	movi	r5,5
81111108:	8089883a 	add	r4,r16,r2
8111110c:	21400115 	stw	r5,4(r4)
81111110:	21400215 	stw	r5,8(r4)
81111114:	3080cd36 	bltu	r6,r2,8111144c <_malloc_r+0x794>
81111118:	00a044b4 	movhi	r2,33042
8111111c:	1081c904 	addi	r2,r2,1828
81111120:	11000017 	ldw	r4,0(r2)
81111124:	20c0012e 	bgeu	r4,r3,8111112c <_malloc_r+0x474>
81111128:	10c00015 	stw	r3,0(r2)
8111112c:	00a044b4 	movhi	r2,33042
81111130:	1081c804 	addi	r2,r2,1824
81111134:	11000017 	ldw	r4,0(r2)
81111138:	9c000217 	ldw	r16,8(r19)
8111113c:	20c0012e 	bgeu	r4,r3,81111144 <_malloc_r+0x48c>
81111140:	10c00015 	stw	r3,0(r2)
81111144:	80c00117 	ldw	r3,4(r16)
81111148:	00bfff04 	movi	r2,-4
8111114c:	1886703a 	and	r3,r3,r2
81111150:	1c45c83a 	sub	r2,r3,r17
81111154:	1c400236 	bltu	r3,r17,81111160 <_malloc_r+0x4a8>
81111158:	00c003c4 	movi	r3,15
8111115c:	18800416 	blt	r3,r2,81111170 <_malloc_r+0x4b8>
81111160:	9009883a 	mov	r4,r18
81111164:	111860c0 	call	8111860c <__malloc_unlock>
81111168:	0005883a 	mov	r2,zero
8111116c:	003f7b06 	br	81110f5c <__reset+0xfb0f0f5c>
81111170:	88c00054 	ori	r3,r17,1
81111174:	80c00115 	stw	r3,4(r16)
81111178:	8463883a 	add	r17,r16,r17
8111117c:	10800054 	ori	r2,r2,1
81111180:	9c400215 	stw	r17,8(r19)
81111184:	88800115 	stw	r2,4(r17)
81111188:	9009883a 	mov	r4,r18
8111118c:	111860c0 	call	8111860c <__malloc_unlock>
81111190:	80800204 	addi	r2,r16,8
81111194:	003f7106 	br	81110f5c <__reset+0xfb0f0f5c>
81111198:	00c00504 	movi	r3,20
8111119c:	18804a2e 	bgeu	r3,r2,811112c8 <_malloc_r+0x610>
811111a0:	00c01504 	movi	r3,84
811111a4:	18806e36 	bltu	r3,r2,81111360 <_malloc_r+0x6a8>
811111a8:	8804d33a 	srli	r2,r17,12
811111ac:	12001bc4 	addi	r8,r2,111
811111b0:	11c01b84 	addi	r7,r2,110
811111b4:	4209883a 	add	r4,r8,r8
811111b8:	003edd06 	br	81110d30 <__reset+0xfb0f0d30>
811111bc:	3804d27a 	srli	r2,r7,9
811111c0:	00c00104 	movi	r3,4
811111c4:	1880442e 	bgeu	r3,r2,811112d8 <_malloc_r+0x620>
811111c8:	00c00504 	movi	r3,20
811111cc:	18808136 	bltu	r3,r2,811113d4 <_malloc_r+0x71c>
811111d0:	11401704 	addi	r5,r2,92
811111d4:	10c016c4 	addi	r3,r2,91
811111d8:	294b883a 	add	r5,r5,r5
811111dc:	294b883a 	add	r5,r5,r5
811111e0:	294b883a 	add	r5,r5,r5
811111e4:	994b883a 	add	r5,r19,r5
811111e8:	28800017 	ldw	r2,0(r5)
811111ec:	01a044b4 	movhi	r6,33042
811111f0:	297ffe04 	addi	r5,r5,-8
811111f4:	31bb9804 	addi	r6,r6,-4512
811111f8:	28806526 	beq	r5,r2,81111390 <_malloc_r+0x6d8>
811111fc:	01bfff04 	movi	r6,-4
81111200:	10c00117 	ldw	r3,4(r2)
81111204:	1986703a 	and	r3,r3,r6
81111208:	38c0022e 	bgeu	r7,r3,81111214 <_malloc_r+0x55c>
8111120c:	10800217 	ldw	r2,8(r2)
81111210:	28bffb1e 	bne	r5,r2,81111200 <__reset+0xfb0f1200>
81111214:	11400317 	ldw	r5,12(r2)
81111218:	98c00117 	ldw	r3,4(r19)
8111121c:	81400315 	stw	r5,12(r16)
81111220:	80800215 	stw	r2,8(r16)
81111224:	2c000215 	stw	r16,8(r5)
81111228:	14000315 	stw	r16,12(r2)
8111122c:	003ef806 	br	81110e10 <__reset+0xfb0f0e10>
81111230:	88c00054 	ori	r3,r17,1
81111234:	80c00115 	stw	r3,4(r16)
81111238:	8463883a 	add	r17,r16,r17
8111123c:	34400515 	stw	r17,20(r6)
81111240:	34400415 	stw	r17,16(r6)
81111244:	10c00054 	ori	r3,r2,1
81111248:	8a000315 	stw	r8,12(r17)
8111124c:	8a000215 	stw	r8,8(r17)
81111250:	88c00115 	stw	r3,4(r17)
81111254:	88a3883a 	add	r17,r17,r2
81111258:	88800015 	stw	r2,0(r17)
8111125c:	9009883a 	mov	r4,r18
81111260:	111860c0 	call	8111860c <__malloc_unlock>
81111264:	80800204 	addi	r2,r16,8
81111268:	003f3c06 	br	81110f5c <__reset+0xfb0f0f5c>
8111126c:	30c00117 	ldw	r3,4(r6)
81111270:	003ee706 	br	81110e10 <__reset+0xfb0f0e10>
81111274:	5ac00044 	addi	r11,r11,1
81111278:	588000cc 	andi	r2,r11,3
8111127c:	31800204 	addi	r6,r6,8
81111280:	103efd1e 	bne	r2,zero,81110e78 <__reset+0xfb0f0e78>
81111284:	00002406 	br	81111318 <_malloc_r+0x660>
81111288:	14000317 	ldw	r16,12(r2)
8111128c:	143f251e 	bne	r2,r16,81110f24 <__reset+0xfb0f0f24>
81111290:	21000084 	addi	r4,r4,2
81111294:	003ebc06 	br	81110d88 <__reset+0xfb0f0d88>
81111298:	8085883a 	add	r2,r16,r2
8111129c:	10c00117 	ldw	r3,4(r2)
811112a0:	81000317 	ldw	r4,12(r16)
811112a4:	81400217 	ldw	r5,8(r16)
811112a8:	18c00054 	ori	r3,r3,1
811112ac:	10c00115 	stw	r3,4(r2)
811112b0:	29000315 	stw	r4,12(r5)
811112b4:	21400215 	stw	r5,8(r4)
811112b8:	9009883a 	mov	r4,r18
811112bc:	111860c0 	call	8111860c <__malloc_unlock>
811112c0:	80800204 	addi	r2,r16,8
811112c4:	003f2506 	br	81110f5c <__reset+0xfb0f0f5c>
811112c8:	12001704 	addi	r8,r2,92
811112cc:	11c016c4 	addi	r7,r2,91
811112d0:	4209883a 	add	r4,r8,r8
811112d4:	003e9606 	br	81110d30 <__reset+0xfb0f0d30>
811112d8:	3804d1ba 	srli	r2,r7,6
811112dc:	11400e44 	addi	r5,r2,57
811112e0:	10c00e04 	addi	r3,r2,56
811112e4:	294b883a 	add	r5,r5,r5
811112e8:	003fbc06 	br	811111dc <__reset+0xfb0f11dc>
811112ec:	84ff5926 	beq	r16,r19,81111054 <__reset+0xfb0f1054>
811112f0:	00a044b4 	movhi	r2,33042
811112f4:	10bb9804 	addi	r2,r2,-4512
811112f8:	14000217 	ldw	r16,8(r2)
811112fc:	00bfff04 	movi	r2,-4
81111300:	80c00117 	ldw	r3,4(r16)
81111304:	1886703a 	and	r3,r3,r2
81111308:	003f9106 	br	81111150 <__reset+0xfb0f1150>
8111130c:	60800217 	ldw	r2,8(r12)
81111310:	213fffc4 	addi	r4,r4,-1
81111314:	1300651e 	bne	r2,r12,811114ac <_malloc_r+0x7f4>
81111318:	208000cc 	andi	r2,r4,3
8111131c:	633ffe04 	addi	r12,r12,-8
81111320:	103ffa1e 	bne	r2,zero,8111130c <__reset+0xfb0f130c>
81111324:	98800117 	ldw	r2,4(r19)
81111328:	0146303a 	nor	r3,zero,r5
8111132c:	1884703a 	and	r2,r3,r2
81111330:	98800115 	stw	r2,4(r19)
81111334:	294b883a 	add	r5,r5,r5
81111338:	117f2836 	bltu	r2,r5,81110fdc <__reset+0xfb0f0fdc>
8111133c:	283f2726 	beq	r5,zero,81110fdc <__reset+0xfb0f0fdc>
81111340:	2886703a 	and	r3,r5,r2
81111344:	5809883a 	mov	r4,r11
81111348:	183ec31e 	bne	r3,zero,81110e58 <__reset+0xfb0f0e58>
8111134c:	294b883a 	add	r5,r5,r5
81111350:	2886703a 	and	r3,r5,r2
81111354:	21000104 	addi	r4,r4,4
81111358:	183ffc26 	beq	r3,zero,8111134c <__reset+0xfb0f134c>
8111135c:	003ebe06 	br	81110e58 <__reset+0xfb0f0e58>
81111360:	00c05504 	movi	r3,340
81111364:	18801236 	bltu	r3,r2,811113b0 <_malloc_r+0x6f8>
81111368:	8804d3fa 	srli	r2,r17,15
8111136c:	12001e04 	addi	r8,r2,120
81111370:	11c01dc4 	addi	r7,r2,119
81111374:	4209883a 	add	r4,r8,r8
81111378:	003e6d06 	br	81110d30 <__reset+0xfb0f0d30>
8111137c:	00c40004 	movi	r3,4096
81111380:	003f4606 	br	8111109c <__reset+0xfb0f109c>
81111384:	00800044 	movi	r2,1
81111388:	a0800115 	stw	r2,4(r20)
8111138c:	003f7406 	br	81111160 <__reset+0xfb0f1160>
81111390:	1805d0ba 	srai	r2,r3,2
81111394:	01c00044 	movi	r7,1
81111398:	30c00117 	ldw	r3,4(r6)
8111139c:	388e983a 	sll	r7,r7,r2
811113a0:	2805883a 	mov	r2,r5
811113a4:	38c6b03a 	or	r3,r7,r3
811113a8:	30c00115 	stw	r3,4(r6)
811113ac:	003f9b06 	br	8111121c <__reset+0xfb0f121c>
811113b0:	00c15504 	movi	r3,1364
811113b4:	18801a36 	bltu	r3,r2,81111420 <_malloc_r+0x768>
811113b8:	8804d4ba 	srli	r2,r17,18
811113bc:	12001f44 	addi	r8,r2,125
811113c0:	11c01f04 	addi	r7,r2,124
811113c4:	4209883a 	add	r4,r8,r8
811113c8:	003e5906 	br	81110d30 <__reset+0xfb0f0d30>
811113cc:	ad400404 	addi	r21,r21,16
811113d0:	003f1706 	br	81111030 <__reset+0xfb0f1030>
811113d4:	00c01504 	movi	r3,84
811113d8:	18802336 	bltu	r3,r2,81111468 <_malloc_r+0x7b0>
811113dc:	3804d33a 	srli	r2,r7,12
811113e0:	11401bc4 	addi	r5,r2,111
811113e4:	10c01b84 	addi	r3,r2,110
811113e8:	294b883a 	add	r5,r5,r5
811113ec:	003f7b06 	br	811111dc <__reset+0xfb0f11dc>
811113f0:	9c000217 	ldw	r16,8(r19)
811113f4:	00bfff04 	movi	r2,-4
811113f8:	80c00117 	ldw	r3,4(r16)
811113fc:	1886703a 	and	r3,r3,r2
81111400:	003f5306 	br	81111150 <__reset+0xfb0f1150>
81111404:	3083ffcc 	andi	r2,r6,4095
81111408:	103f181e 	bne	r2,zero,8111106c <__reset+0xfb0f106c>
8111140c:	99000217 	ldw	r4,8(r19)
81111410:	b545883a 	add	r2,r22,r21
81111414:	10800054 	ori	r2,r2,1
81111418:	20800115 	stw	r2,4(r4)
8111141c:	003f3e06 	br	81111118 <__reset+0xfb0f1118>
81111420:	01003f84 	movi	r4,254
81111424:	02001fc4 	movi	r8,127
81111428:	01c01f84 	movi	r7,126
8111142c:	003e4006 	br	81110d30 <__reset+0xfb0f0d30>
81111430:	00a044b4 	movhi	r2,33042
81111434:	10819304 	addi	r2,r2,1612
81111438:	15000015 	stw	r20,0(r2)
8111143c:	003f1106 	br	81111084 <__reset+0xfb0f1084>
81111440:	00800044 	movi	r2,1
81111444:	002b883a 	mov	r21,zero
81111448:	003f1f06 	br	811110c8 <__reset+0xfb0f10c8>
8111144c:	81400204 	addi	r5,r16,8
81111450:	9009883a 	mov	r4,r18
81111454:	11100cc0 	call	811100cc <_free_r>
81111458:	00a044b4 	movhi	r2,33042
8111145c:	1081d304 	addi	r2,r2,1868
81111460:	10c00017 	ldw	r3,0(r2)
81111464:	003f2c06 	br	81111118 <__reset+0xfb0f1118>
81111468:	00c05504 	movi	r3,340
8111146c:	18800536 	bltu	r3,r2,81111484 <_malloc_r+0x7cc>
81111470:	3804d3fa 	srli	r2,r7,15
81111474:	11401e04 	addi	r5,r2,120
81111478:	10c01dc4 	addi	r3,r2,119
8111147c:	294b883a 	add	r5,r5,r5
81111480:	003f5606 	br	811111dc <__reset+0xfb0f11dc>
81111484:	00c15504 	movi	r3,1364
81111488:	18800536 	bltu	r3,r2,811114a0 <_malloc_r+0x7e8>
8111148c:	3804d4ba 	srli	r2,r7,18
81111490:	11401f44 	addi	r5,r2,125
81111494:	10c01f04 	addi	r3,r2,124
81111498:	294b883a 	add	r5,r5,r5
8111149c:	003f4f06 	br	811111dc <__reset+0xfb0f11dc>
811114a0:	01403f84 	movi	r5,254
811114a4:	00c01f84 	movi	r3,126
811114a8:	003f4c06 	br	811111dc <__reset+0xfb0f11dc>
811114ac:	98800117 	ldw	r2,4(r19)
811114b0:	003fa006 	br	81111334 <__reset+0xfb0f1334>
811114b4:	8808d0fa 	srli	r4,r17,3
811114b8:	20800044 	addi	r2,r4,1
811114bc:	1085883a 	add	r2,r2,r2
811114c0:	003e9006 	br	81110f04 <__reset+0xfb0f0f04>

811114c4 <memchr>:
811114c4:	208000cc 	andi	r2,r4,3
811114c8:	280f883a 	mov	r7,r5
811114cc:	10003426 	beq	r2,zero,811115a0 <memchr+0xdc>
811114d0:	30bfffc4 	addi	r2,r6,-1
811114d4:	30001a26 	beq	r6,zero,81111540 <memchr+0x7c>
811114d8:	20c00003 	ldbu	r3,0(r4)
811114dc:	29803fcc 	andi	r6,r5,255
811114e0:	30c0051e 	bne	r6,r3,811114f8 <memchr+0x34>
811114e4:	00001806 	br	81111548 <memchr+0x84>
811114e8:	10001526 	beq	r2,zero,81111540 <memchr+0x7c>
811114ec:	20c00003 	ldbu	r3,0(r4)
811114f0:	10bfffc4 	addi	r2,r2,-1
811114f4:	30c01426 	beq	r6,r3,81111548 <memchr+0x84>
811114f8:	21000044 	addi	r4,r4,1
811114fc:	20c000cc 	andi	r3,r4,3
81111500:	183ff91e 	bne	r3,zero,811114e8 <__reset+0xfb0f14e8>
81111504:	020000c4 	movi	r8,3
81111508:	40801136 	bltu	r8,r2,81111550 <memchr+0x8c>
8111150c:	10000c26 	beq	r2,zero,81111540 <memchr+0x7c>
81111510:	20c00003 	ldbu	r3,0(r4)
81111514:	29403fcc 	andi	r5,r5,255
81111518:	28c00b26 	beq	r5,r3,81111548 <memchr+0x84>
8111151c:	20c00044 	addi	r3,r4,1
81111520:	39803fcc 	andi	r6,r7,255
81111524:	2089883a 	add	r4,r4,r2
81111528:	00000306 	br	81111538 <memchr+0x74>
8111152c:	18c00044 	addi	r3,r3,1
81111530:	197fffc3 	ldbu	r5,-1(r3)
81111534:	31400526 	beq	r6,r5,8111154c <memchr+0x88>
81111538:	1805883a 	mov	r2,r3
8111153c:	20fffb1e 	bne	r4,r3,8111152c <__reset+0xfb0f152c>
81111540:	0005883a 	mov	r2,zero
81111544:	f800283a 	ret
81111548:	2005883a 	mov	r2,r4
8111154c:	f800283a 	ret
81111550:	28c03fcc 	andi	r3,r5,255
81111554:	1812923a 	slli	r9,r3,8
81111558:	02ffbff4 	movhi	r11,65279
8111155c:	02a02074 	movhi	r10,32897
81111560:	48d2b03a 	or	r9,r9,r3
81111564:	4806943a 	slli	r3,r9,16
81111568:	5affbfc4 	addi	r11,r11,-257
8111156c:	52a02004 	addi	r10,r10,-32640
81111570:	48d2b03a 	or	r9,r9,r3
81111574:	20c00017 	ldw	r3,0(r4)
81111578:	48c6f03a 	xor	r3,r9,r3
8111157c:	1acd883a 	add	r6,r3,r11
81111580:	00c6303a 	nor	r3,zero,r3
81111584:	30c6703a 	and	r3,r6,r3
81111588:	1a86703a 	and	r3,r3,r10
8111158c:	183fe01e 	bne	r3,zero,81111510 <__reset+0xfb0f1510>
81111590:	10bfff04 	addi	r2,r2,-4
81111594:	21000104 	addi	r4,r4,4
81111598:	40bff636 	bltu	r8,r2,81111574 <__reset+0xfb0f1574>
8111159c:	003fdb06 	br	8111150c <__reset+0xfb0f150c>
811115a0:	3005883a 	mov	r2,r6
811115a4:	003fd706 	br	81111504 <__reset+0xfb0f1504>

811115a8 <memmove>:
811115a8:	2005883a 	mov	r2,r4
811115ac:	29000b2e 	bgeu	r5,r4,811115dc <memmove+0x34>
811115b0:	298f883a 	add	r7,r5,r6
811115b4:	21c0092e 	bgeu	r4,r7,811115dc <memmove+0x34>
811115b8:	2187883a 	add	r3,r4,r6
811115bc:	198bc83a 	sub	r5,r3,r6
811115c0:	30004826 	beq	r6,zero,811116e4 <memmove+0x13c>
811115c4:	39ffffc4 	addi	r7,r7,-1
811115c8:	39000003 	ldbu	r4,0(r7)
811115cc:	18ffffc4 	addi	r3,r3,-1
811115d0:	19000005 	stb	r4,0(r3)
811115d4:	28fffb1e 	bne	r5,r3,811115c4 <__reset+0xfb0f15c4>
811115d8:	f800283a 	ret
811115dc:	00c003c4 	movi	r3,15
811115e0:	1980412e 	bgeu	r3,r6,811116e8 <memmove+0x140>
811115e4:	2886b03a 	or	r3,r5,r2
811115e8:	18c000cc 	andi	r3,r3,3
811115ec:	1800401e 	bne	r3,zero,811116f0 <memmove+0x148>
811115f0:	33fffc04 	addi	r15,r6,-16
811115f4:	781ed13a 	srli	r15,r15,4
811115f8:	28c00104 	addi	r3,r5,4
811115fc:	13400104 	addi	r13,r2,4
81111600:	781c913a 	slli	r14,r15,4
81111604:	2b000204 	addi	r12,r5,8
81111608:	12c00204 	addi	r11,r2,8
8111160c:	73800504 	addi	r14,r14,20
81111610:	2a800304 	addi	r10,r5,12
81111614:	12400304 	addi	r9,r2,12
81111618:	2b9d883a 	add	r14,r5,r14
8111161c:	2811883a 	mov	r8,r5
81111620:	100f883a 	mov	r7,r2
81111624:	41000017 	ldw	r4,0(r8)
81111628:	39c00404 	addi	r7,r7,16
8111162c:	18c00404 	addi	r3,r3,16
81111630:	393ffc15 	stw	r4,-16(r7)
81111634:	193ffc17 	ldw	r4,-16(r3)
81111638:	6b400404 	addi	r13,r13,16
8111163c:	5ac00404 	addi	r11,r11,16
81111640:	693ffc15 	stw	r4,-16(r13)
81111644:	61000017 	ldw	r4,0(r12)
81111648:	4a400404 	addi	r9,r9,16
8111164c:	42000404 	addi	r8,r8,16
81111650:	593ffc15 	stw	r4,-16(r11)
81111654:	51000017 	ldw	r4,0(r10)
81111658:	63000404 	addi	r12,r12,16
8111165c:	52800404 	addi	r10,r10,16
81111660:	493ffc15 	stw	r4,-16(r9)
81111664:	1bbfef1e 	bne	r3,r14,81111624 <__reset+0xfb0f1624>
81111668:	79000044 	addi	r4,r15,1
8111166c:	2008913a 	slli	r4,r4,4
81111670:	328003cc 	andi	r10,r6,15
81111674:	02c000c4 	movi	r11,3
81111678:	1107883a 	add	r3,r2,r4
8111167c:	290b883a 	add	r5,r5,r4
81111680:	5a801e2e 	bgeu	r11,r10,811116fc <memmove+0x154>
81111684:	1813883a 	mov	r9,r3
81111688:	2811883a 	mov	r8,r5
8111168c:	500f883a 	mov	r7,r10
81111690:	41000017 	ldw	r4,0(r8)
81111694:	4a400104 	addi	r9,r9,4
81111698:	39ffff04 	addi	r7,r7,-4
8111169c:	493fff15 	stw	r4,-4(r9)
811116a0:	42000104 	addi	r8,r8,4
811116a4:	59fffa36 	bltu	r11,r7,81111690 <__reset+0xfb0f1690>
811116a8:	513fff04 	addi	r4,r10,-4
811116ac:	2008d0ba 	srli	r4,r4,2
811116b0:	318000cc 	andi	r6,r6,3
811116b4:	21000044 	addi	r4,r4,1
811116b8:	2109883a 	add	r4,r4,r4
811116bc:	2109883a 	add	r4,r4,r4
811116c0:	1907883a 	add	r3,r3,r4
811116c4:	290b883a 	add	r5,r5,r4
811116c8:	30000b26 	beq	r6,zero,811116f8 <memmove+0x150>
811116cc:	198d883a 	add	r6,r3,r6
811116d0:	29c00003 	ldbu	r7,0(r5)
811116d4:	18c00044 	addi	r3,r3,1
811116d8:	29400044 	addi	r5,r5,1
811116dc:	19ffffc5 	stb	r7,-1(r3)
811116e0:	19bffb1e 	bne	r3,r6,811116d0 <__reset+0xfb0f16d0>
811116e4:	f800283a 	ret
811116e8:	1007883a 	mov	r3,r2
811116ec:	003ff606 	br	811116c8 <__reset+0xfb0f16c8>
811116f0:	1007883a 	mov	r3,r2
811116f4:	003ff506 	br	811116cc <__reset+0xfb0f16cc>
811116f8:	f800283a 	ret
811116fc:	500d883a 	mov	r6,r10
81111700:	003ff106 	br	811116c8 <__reset+0xfb0f16c8>

81111704 <memset>:
81111704:	20c000cc 	andi	r3,r4,3
81111708:	2005883a 	mov	r2,r4
8111170c:	18004426 	beq	r3,zero,81111820 <memset+0x11c>
81111710:	31ffffc4 	addi	r7,r6,-1
81111714:	30004026 	beq	r6,zero,81111818 <memset+0x114>
81111718:	2813883a 	mov	r9,r5
8111171c:	200d883a 	mov	r6,r4
81111720:	2007883a 	mov	r3,r4
81111724:	00000406 	br	81111738 <memset+0x34>
81111728:	3a3fffc4 	addi	r8,r7,-1
8111172c:	31800044 	addi	r6,r6,1
81111730:	38003926 	beq	r7,zero,81111818 <memset+0x114>
81111734:	400f883a 	mov	r7,r8
81111738:	18c00044 	addi	r3,r3,1
8111173c:	32400005 	stb	r9,0(r6)
81111740:	1a0000cc 	andi	r8,r3,3
81111744:	403ff81e 	bne	r8,zero,81111728 <__reset+0xfb0f1728>
81111748:	010000c4 	movi	r4,3
8111174c:	21c02d2e 	bgeu	r4,r7,81111804 <memset+0x100>
81111750:	29003fcc 	andi	r4,r5,255
81111754:	200c923a 	slli	r6,r4,8
81111758:	3108b03a 	or	r4,r6,r4
8111175c:	200c943a 	slli	r6,r4,16
81111760:	218cb03a 	or	r6,r4,r6
81111764:	010003c4 	movi	r4,15
81111768:	21c0182e 	bgeu	r4,r7,811117cc <memset+0xc8>
8111176c:	3b3ffc04 	addi	r12,r7,-16
81111770:	6018d13a 	srli	r12,r12,4
81111774:	1a000104 	addi	r8,r3,4
81111778:	1ac00204 	addi	r11,r3,8
8111177c:	6008913a 	slli	r4,r12,4
81111780:	1a800304 	addi	r10,r3,12
81111784:	1813883a 	mov	r9,r3
81111788:	21000504 	addi	r4,r4,20
8111178c:	1909883a 	add	r4,r3,r4
81111790:	49800015 	stw	r6,0(r9)
81111794:	41800015 	stw	r6,0(r8)
81111798:	59800015 	stw	r6,0(r11)
8111179c:	51800015 	stw	r6,0(r10)
811117a0:	42000404 	addi	r8,r8,16
811117a4:	4a400404 	addi	r9,r9,16
811117a8:	5ac00404 	addi	r11,r11,16
811117ac:	52800404 	addi	r10,r10,16
811117b0:	413ff71e 	bne	r8,r4,81111790 <__reset+0xfb0f1790>
811117b4:	63000044 	addi	r12,r12,1
811117b8:	6018913a 	slli	r12,r12,4
811117bc:	39c003cc 	andi	r7,r7,15
811117c0:	010000c4 	movi	r4,3
811117c4:	1b07883a 	add	r3,r3,r12
811117c8:	21c00e2e 	bgeu	r4,r7,81111804 <memset+0x100>
811117cc:	1813883a 	mov	r9,r3
811117d0:	3811883a 	mov	r8,r7
811117d4:	010000c4 	movi	r4,3
811117d8:	49800015 	stw	r6,0(r9)
811117dc:	423fff04 	addi	r8,r8,-4
811117e0:	4a400104 	addi	r9,r9,4
811117e4:	223ffc36 	bltu	r4,r8,811117d8 <__reset+0xfb0f17d8>
811117e8:	393fff04 	addi	r4,r7,-4
811117ec:	2008d0ba 	srli	r4,r4,2
811117f0:	39c000cc 	andi	r7,r7,3
811117f4:	21000044 	addi	r4,r4,1
811117f8:	2109883a 	add	r4,r4,r4
811117fc:	2109883a 	add	r4,r4,r4
81111800:	1907883a 	add	r3,r3,r4
81111804:	38000526 	beq	r7,zero,8111181c <memset+0x118>
81111808:	19cf883a 	add	r7,r3,r7
8111180c:	19400005 	stb	r5,0(r3)
81111810:	18c00044 	addi	r3,r3,1
81111814:	38fffd1e 	bne	r7,r3,8111180c <__reset+0xfb0f180c>
81111818:	f800283a 	ret
8111181c:	f800283a 	ret
81111820:	2007883a 	mov	r3,r4
81111824:	300f883a 	mov	r7,r6
81111828:	003fc706 	br	81111748 <__reset+0xfb0f1748>

8111182c <_Balloc>:
8111182c:	20801317 	ldw	r2,76(r4)
81111830:	defffc04 	addi	sp,sp,-16
81111834:	dc400115 	stw	r17,4(sp)
81111838:	dc000015 	stw	r16,0(sp)
8111183c:	dfc00315 	stw	ra,12(sp)
81111840:	dc800215 	stw	r18,8(sp)
81111844:	2023883a 	mov	r17,r4
81111848:	2821883a 	mov	r16,r5
8111184c:	10000f26 	beq	r2,zero,8111188c <_Balloc+0x60>
81111850:	8407883a 	add	r3,r16,r16
81111854:	18c7883a 	add	r3,r3,r3
81111858:	10c7883a 	add	r3,r2,r3
8111185c:	18800017 	ldw	r2,0(r3)
81111860:	10001126 	beq	r2,zero,811118a8 <_Balloc+0x7c>
81111864:	11000017 	ldw	r4,0(r2)
81111868:	19000015 	stw	r4,0(r3)
8111186c:	10000415 	stw	zero,16(r2)
81111870:	10000315 	stw	zero,12(r2)
81111874:	dfc00317 	ldw	ra,12(sp)
81111878:	dc800217 	ldw	r18,8(sp)
8111187c:	dc400117 	ldw	r17,4(sp)
81111880:	dc000017 	ldw	r16,0(sp)
81111884:	dec00404 	addi	sp,sp,16
81111888:	f800283a 	ret
8111188c:	01800844 	movi	r6,33
81111890:	01400104 	movi	r5,4
81111894:	1114c180 	call	81114c18 <_calloc_r>
81111898:	88801315 	stw	r2,76(r17)
8111189c:	103fec1e 	bne	r2,zero,81111850 <__reset+0xfb0f1850>
811118a0:	0005883a 	mov	r2,zero
811118a4:	003ff306 	br	81111874 <__reset+0xfb0f1874>
811118a8:	01400044 	movi	r5,1
811118ac:	2c24983a 	sll	r18,r5,r16
811118b0:	8809883a 	mov	r4,r17
811118b4:	91800144 	addi	r6,r18,5
811118b8:	318d883a 	add	r6,r6,r6
811118bc:	318d883a 	add	r6,r6,r6
811118c0:	1114c180 	call	81114c18 <_calloc_r>
811118c4:	103ff626 	beq	r2,zero,811118a0 <__reset+0xfb0f18a0>
811118c8:	14000115 	stw	r16,4(r2)
811118cc:	14800215 	stw	r18,8(r2)
811118d0:	003fe606 	br	8111186c <__reset+0xfb0f186c>

811118d4 <_Bfree>:
811118d4:	28000826 	beq	r5,zero,811118f8 <_Bfree+0x24>
811118d8:	28c00117 	ldw	r3,4(r5)
811118dc:	20801317 	ldw	r2,76(r4)
811118e0:	18c7883a 	add	r3,r3,r3
811118e4:	18c7883a 	add	r3,r3,r3
811118e8:	10c5883a 	add	r2,r2,r3
811118ec:	10c00017 	ldw	r3,0(r2)
811118f0:	28c00015 	stw	r3,0(r5)
811118f4:	11400015 	stw	r5,0(r2)
811118f8:	f800283a 	ret

811118fc <__multadd>:
811118fc:	defffa04 	addi	sp,sp,-24
81111900:	dc800315 	stw	r18,12(sp)
81111904:	dc400215 	stw	r17,8(sp)
81111908:	dc000115 	stw	r16,4(sp)
8111190c:	2823883a 	mov	r17,r5
81111910:	2c000417 	ldw	r16,16(r5)
81111914:	dfc00515 	stw	ra,20(sp)
81111918:	dcc00415 	stw	r19,16(sp)
8111191c:	2025883a 	mov	r18,r4
81111920:	29400504 	addi	r5,r5,20
81111924:	0011883a 	mov	r8,zero
81111928:	28c00017 	ldw	r3,0(r5)
8111192c:	29400104 	addi	r5,r5,4
81111930:	42000044 	addi	r8,r8,1
81111934:	18bfffcc 	andi	r2,r3,65535
81111938:	1185383a 	mul	r2,r2,r6
8111193c:	1806d43a 	srli	r3,r3,16
81111940:	11cf883a 	add	r7,r2,r7
81111944:	3808d43a 	srli	r4,r7,16
81111948:	1987383a 	mul	r3,r3,r6
8111194c:	38bfffcc 	andi	r2,r7,65535
81111950:	1907883a 	add	r3,r3,r4
81111954:	1808943a 	slli	r4,r3,16
81111958:	180ed43a 	srli	r7,r3,16
8111195c:	2085883a 	add	r2,r4,r2
81111960:	28bfff15 	stw	r2,-4(r5)
81111964:	443ff016 	blt	r8,r16,81111928 <__reset+0xfb0f1928>
81111968:	38000926 	beq	r7,zero,81111990 <__multadd+0x94>
8111196c:	88800217 	ldw	r2,8(r17)
81111970:	80800f0e 	bge	r16,r2,811119b0 <__multadd+0xb4>
81111974:	80800144 	addi	r2,r16,5
81111978:	1085883a 	add	r2,r2,r2
8111197c:	1085883a 	add	r2,r2,r2
81111980:	8885883a 	add	r2,r17,r2
81111984:	11c00015 	stw	r7,0(r2)
81111988:	84000044 	addi	r16,r16,1
8111198c:	8c000415 	stw	r16,16(r17)
81111990:	8805883a 	mov	r2,r17
81111994:	dfc00517 	ldw	ra,20(sp)
81111998:	dcc00417 	ldw	r19,16(sp)
8111199c:	dc800317 	ldw	r18,12(sp)
811119a0:	dc400217 	ldw	r17,8(sp)
811119a4:	dc000117 	ldw	r16,4(sp)
811119a8:	dec00604 	addi	sp,sp,24
811119ac:	f800283a 	ret
811119b0:	89400117 	ldw	r5,4(r17)
811119b4:	9009883a 	mov	r4,r18
811119b8:	d9c00015 	stw	r7,0(sp)
811119bc:	29400044 	addi	r5,r5,1
811119c0:	111182c0 	call	8111182c <_Balloc>
811119c4:	89800417 	ldw	r6,16(r17)
811119c8:	89400304 	addi	r5,r17,12
811119cc:	11000304 	addi	r4,r2,12
811119d0:	31800084 	addi	r6,r6,2
811119d4:	318d883a 	add	r6,r6,r6
811119d8:	318d883a 	add	r6,r6,r6
811119dc:	1027883a 	mov	r19,r2
811119e0:	110b8ec0 	call	8110b8ec <memcpy>
811119e4:	d9c00017 	ldw	r7,0(sp)
811119e8:	88000a26 	beq	r17,zero,81111a14 <__multadd+0x118>
811119ec:	88c00117 	ldw	r3,4(r17)
811119f0:	90801317 	ldw	r2,76(r18)
811119f4:	18c7883a 	add	r3,r3,r3
811119f8:	18c7883a 	add	r3,r3,r3
811119fc:	10c5883a 	add	r2,r2,r3
81111a00:	10c00017 	ldw	r3,0(r2)
81111a04:	88c00015 	stw	r3,0(r17)
81111a08:	14400015 	stw	r17,0(r2)
81111a0c:	9823883a 	mov	r17,r19
81111a10:	003fd806 	br	81111974 <__reset+0xfb0f1974>
81111a14:	9823883a 	mov	r17,r19
81111a18:	003fd606 	br	81111974 <__reset+0xfb0f1974>

81111a1c <__s2b>:
81111a1c:	defff904 	addi	sp,sp,-28
81111a20:	dc400115 	stw	r17,4(sp)
81111a24:	dc000015 	stw	r16,0(sp)
81111a28:	2023883a 	mov	r17,r4
81111a2c:	2821883a 	mov	r16,r5
81111a30:	39000204 	addi	r4,r7,8
81111a34:	01400244 	movi	r5,9
81111a38:	dcc00315 	stw	r19,12(sp)
81111a3c:	dc800215 	stw	r18,8(sp)
81111a40:	dfc00615 	stw	ra,24(sp)
81111a44:	dd400515 	stw	r21,20(sp)
81111a48:	dd000415 	stw	r20,16(sp)
81111a4c:	3825883a 	mov	r18,r7
81111a50:	3027883a 	mov	r19,r6
81111a54:	1115df00 	call	81115df0 <__divsi3>
81111a58:	00c00044 	movi	r3,1
81111a5c:	000b883a 	mov	r5,zero
81111a60:	1880030e 	bge	r3,r2,81111a70 <__s2b+0x54>
81111a64:	18c7883a 	add	r3,r3,r3
81111a68:	29400044 	addi	r5,r5,1
81111a6c:	18bffd16 	blt	r3,r2,81111a64 <__reset+0xfb0f1a64>
81111a70:	8809883a 	mov	r4,r17
81111a74:	111182c0 	call	8111182c <_Balloc>
81111a78:	d8c00717 	ldw	r3,28(sp)
81111a7c:	10c00515 	stw	r3,20(r2)
81111a80:	00c00044 	movi	r3,1
81111a84:	10c00415 	stw	r3,16(r2)
81111a88:	00c00244 	movi	r3,9
81111a8c:	1cc0210e 	bge	r3,r19,81111b14 <__s2b+0xf8>
81111a90:	80eb883a 	add	r21,r16,r3
81111a94:	a829883a 	mov	r20,r21
81111a98:	84e1883a 	add	r16,r16,r19
81111a9c:	a1c00007 	ldb	r7,0(r20)
81111aa0:	01800284 	movi	r6,10
81111aa4:	a5000044 	addi	r20,r20,1
81111aa8:	100b883a 	mov	r5,r2
81111aac:	39fff404 	addi	r7,r7,-48
81111ab0:	8809883a 	mov	r4,r17
81111ab4:	11118fc0 	call	811118fc <__multadd>
81111ab8:	a43ff81e 	bne	r20,r16,81111a9c <__reset+0xfb0f1a9c>
81111abc:	ace1883a 	add	r16,r21,r19
81111ac0:	843ffe04 	addi	r16,r16,-8
81111ac4:	9c800a0e 	bge	r19,r18,81111af0 <__s2b+0xd4>
81111ac8:	94e5c83a 	sub	r18,r18,r19
81111acc:	84a5883a 	add	r18,r16,r18
81111ad0:	81c00007 	ldb	r7,0(r16)
81111ad4:	01800284 	movi	r6,10
81111ad8:	84000044 	addi	r16,r16,1
81111adc:	100b883a 	mov	r5,r2
81111ae0:	39fff404 	addi	r7,r7,-48
81111ae4:	8809883a 	mov	r4,r17
81111ae8:	11118fc0 	call	811118fc <__multadd>
81111aec:	84bff81e 	bne	r16,r18,81111ad0 <__reset+0xfb0f1ad0>
81111af0:	dfc00617 	ldw	ra,24(sp)
81111af4:	dd400517 	ldw	r21,20(sp)
81111af8:	dd000417 	ldw	r20,16(sp)
81111afc:	dcc00317 	ldw	r19,12(sp)
81111b00:	dc800217 	ldw	r18,8(sp)
81111b04:	dc400117 	ldw	r17,4(sp)
81111b08:	dc000017 	ldw	r16,0(sp)
81111b0c:	dec00704 	addi	sp,sp,28
81111b10:	f800283a 	ret
81111b14:	84000284 	addi	r16,r16,10
81111b18:	1827883a 	mov	r19,r3
81111b1c:	003fe906 	br	81111ac4 <__reset+0xfb0f1ac4>

81111b20 <__hi0bits>:
81111b20:	20bfffec 	andhi	r2,r4,65535
81111b24:	1000141e 	bne	r2,zero,81111b78 <__hi0bits+0x58>
81111b28:	2008943a 	slli	r4,r4,16
81111b2c:	00800404 	movi	r2,16
81111b30:	20ffc02c 	andhi	r3,r4,65280
81111b34:	1800021e 	bne	r3,zero,81111b40 <__hi0bits+0x20>
81111b38:	2008923a 	slli	r4,r4,8
81111b3c:	10800204 	addi	r2,r2,8
81111b40:	20fc002c 	andhi	r3,r4,61440
81111b44:	1800021e 	bne	r3,zero,81111b50 <__hi0bits+0x30>
81111b48:	2008913a 	slli	r4,r4,4
81111b4c:	10800104 	addi	r2,r2,4
81111b50:	20f0002c 	andhi	r3,r4,49152
81111b54:	1800031e 	bne	r3,zero,81111b64 <__hi0bits+0x44>
81111b58:	2109883a 	add	r4,r4,r4
81111b5c:	10800084 	addi	r2,r2,2
81111b60:	2109883a 	add	r4,r4,r4
81111b64:	20000316 	blt	r4,zero,81111b74 <__hi0bits+0x54>
81111b68:	2110002c 	andhi	r4,r4,16384
81111b6c:	2000041e 	bne	r4,zero,81111b80 <__hi0bits+0x60>
81111b70:	00800804 	movi	r2,32
81111b74:	f800283a 	ret
81111b78:	0005883a 	mov	r2,zero
81111b7c:	003fec06 	br	81111b30 <__reset+0xfb0f1b30>
81111b80:	10800044 	addi	r2,r2,1
81111b84:	f800283a 	ret

81111b88 <__lo0bits>:
81111b88:	20c00017 	ldw	r3,0(r4)
81111b8c:	188001cc 	andi	r2,r3,7
81111b90:	10000826 	beq	r2,zero,81111bb4 <__lo0bits+0x2c>
81111b94:	1880004c 	andi	r2,r3,1
81111b98:	1000211e 	bne	r2,zero,81111c20 <__lo0bits+0x98>
81111b9c:	1880008c 	andi	r2,r3,2
81111ba0:	1000211e 	bne	r2,zero,81111c28 <__lo0bits+0xa0>
81111ba4:	1806d0ba 	srli	r3,r3,2
81111ba8:	00800084 	movi	r2,2
81111bac:	20c00015 	stw	r3,0(r4)
81111bb0:	f800283a 	ret
81111bb4:	18bfffcc 	andi	r2,r3,65535
81111bb8:	10001326 	beq	r2,zero,81111c08 <__lo0bits+0x80>
81111bbc:	0005883a 	mov	r2,zero
81111bc0:	19403fcc 	andi	r5,r3,255
81111bc4:	2800021e 	bne	r5,zero,81111bd0 <__lo0bits+0x48>
81111bc8:	1806d23a 	srli	r3,r3,8
81111bcc:	10800204 	addi	r2,r2,8
81111bd0:	194003cc 	andi	r5,r3,15
81111bd4:	2800021e 	bne	r5,zero,81111be0 <__lo0bits+0x58>
81111bd8:	1806d13a 	srli	r3,r3,4
81111bdc:	10800104 	addi	r2,r2,4
81111be0:	194000cc 	andi	r5,r3,3
81111be4:	2800021e 	bne	r5,zero,81111bf0 <__lo0bits+0x68>
81111be8:	1806d0ba 	srli	r3,r3,2
81111bec:	10800084 	addi	r2,r2,2
81111bf0:	1940004c 	andi	r5,r3,1
81111bf4:	2800081e 	bne	r5,zero,81111c18 <__lo0bits+0x90>
81111bf8:	1806d07a 	srli	r3,r3,1
81111bfc:	1800051e 	bne	r3,zero,81111c14 <__lo0bits+0x8c>
81111c00:	00800804 	movi	r2,32
81111c04:	f800283a 	ret
81111c08:	1806d43a 	srli	r3,r3,16
81111c0c:	00800404 	movi	r2,16
81111c10:	003feb06 	br	81111bc0 <__reset+0xfb0f1bc0>
81111c14:	10800044 	addi	r2,r2,1
81111c18:	20c00015 	stw	r3,0(r4)
81111c1c:	f800283a 	ret
81111c20:	0005883a 	mov	r2,zero
81111c24:	f800283a 	ret
81111c28:	1806d07a 	srli	r3,r3,1
81111c2c:	00800044 	movi	r2,1
81111c30:	20c00015 	stw	r3,0(r4)
81111c34:	f800283a 	ret

81111c38 <__i2b>:
81111c38:	defffd04 	addi	sp,sp,-12
81111c3c:	dc000015 	stw	r16,0(sp)
81111c40:	04000044 	movi	r16,1
81111c44:	dc400115 	stw	r17,4(sp)
81111c48:	2823883a 	mov	r17,r5
81111c4c:	800b883a 	mov	r5,r16
81111c50:	dfc00215 	stw	ra,8(sp)
81111c54:	111182c0 	call	8111182c <_Balloc>
81111c58:	14400515 	stw	r17,20(r2)
81111c5c:	14000415 	stw	r16,16(r2)
81111c60:	dfc00217 	ldw	ra,8(sp)
81111c64:	dc400117 	ldw	r17,4(sp)
81111c68:	dc000017 	ldw	r16,0(sp)
81111c6c:	dec00304 	addi	sp,sp,12
81111c70:	f800283a 	ret

81111c74 <__multiply>:
81111c74:	defffa04 	addi	sp,sp,-24
81111c78:	dcc00315 	stw	r19,12(sp)
81111c7c:	dc800215 	stw	r18,8(sp)
81111c80:	34c00417 	ldw	r19,16(r6)
81111c84:	2c800417 	ldw	r18,16(r5)
81111c88:	dd000415 	stw	r20,16(sp)
81111c8c:	dc400115 	stw	r17,4(sp)
81111c90:	dfc00515 	stw	ra,20(sp)
81111c94:	dc000015 	stw	r16,0(sp)
81111c98:	2829883a 	mov	r20,r5
81111c9c:	3023883a 	mov	r17,r6
81111ca0:	94c0050e 	bge	r18,r19,81111cb8 <__multiply+0x44>
81111ca4:	9007883a 	mov	r3,r18
81111ca8:	3029883a 	mov	r20,r6
81111cac:	9825883a 	mov	r18,r19
81111cb0:	2823883a 	mov	r17,r5
81111cb4:	1827883a 	mov	r19,r3
81111cb8:	a0800217 	ldw	r2,8(r20)
81111cbc:	94e1883a 	add	r16,r18,r19
81111cc0:	a1400117 	ldw	r5,4(r20)
81111cc4:	1400010e 	bge	r2,r16,81111ccc <__multiply+0x58>
81111cc8:	29400044 	addi	r5,r5,1
81111ccc:	111182c0 	call	8111182c <_Balloc>
81111cd0:	8415883a 	add	r10,r16,r16
81111cd4:	12c00504 	addi	r11,r2,20
81111cd8:	5295883a 	add	r10,r10,r10
81111cdc:	5a95883a 	add	r10,r11,r10
81111ce0:	5807883a 	mov	r3,r11
81111ce4:	5a80032e 	bgeu	r11,r10,81111cf4 <__multiply+0x80>
81111ce8:	18000015 	stw	zero,0(r3)
81111cec:	18c00104 	addi	r3,r3,4
81111cf0:	1abffd36 	bltu	r3,r10,81111ce8 <__reset+0xfb0f1ce8>
81111cf4:	9ce7883a 	add	r19,r19,r19
81111cf8:	94a5883a 	add	r18,r18,r18
81111cfc:	89800504 	addi	r6,r17,20
81111d00:	9ce7883a 	add	r19,r19,r19
81111d04:	a3400504 	addi	r13,r20,20
81111d08:	94a5883a 	add	r18,r18,r18
81111d0c:	34d9883a 	add	r12,r6,r19
81111d10:	6c93883a 	add	r9,r13,r18
81111d14:	3300422e 	bgeu	r6,r12,81111e20 <__multiply+0x1ac>
81111d18:	37c00017 	ldw	ra,0(r6)
81111d1c:	fbffffcc 	andi	r15,ra,65535
81111d20:	78001b26 	beq	r15,zero,81111d90 <__multiply+0x11c>
81111d24:	5811883a 	mov	r8,r11
81111d28:	681d883a 	mov	r14,r13
81111d2c:	000f883a 	mov	r7,zero
81111d30:	71000017 	ldw	r4,0(r14)
81111d34:	40c00017 	ldw	r3,0(r8)
81111d38:	73800104 	addi	r14,r14,4
81111d3c:	217fffcc 	andi	r5,r4,65535
81111d40:	2bcb383a 	mul	r5,r5,r15
81111d44:	2008d43a 	srli	r4,r4,16
81111d48:	1c7fffcc 	andi	r17,r3,65535
81111d4c:	2c4b883a 	add	r5,r5,r17
81111d50:	29cb883a 	add	r5,r5,r7
81111d54:	23c9383a 	mul	r4,r4,r15
81111d58:	1806d43a 	srli	r3,r3,16
81111d5c:	280ed43a 	srli	r7,r5,16
81111d60:	297fffcc 	andi	r5,r5,65535
81111d64:	20c7883a 	add	r3,r4,r3
81111d68:	19c7883a 	add	r3,r3,r7
81111d6c:	1808943a 	slli	r4,r3,16
81111d70:	4023883a 	mov	r17,r8
81111d74:	180ed43a 	srli	r7,r3,16
81111d78:	214ab03a 	or	r5,r4,r5
81111d7c:	41400015 	stw	r5,0(r8)
81111d80:	42000104 	addi	r8,r8,4
81111d84:	727fea36 	bltu	r14,r9,81111d30 <__reset+0xfb0f1d30>
81111d88:	89c00115 	stw	r7,4(r17)
81111d8c:	37c00017 	ldw	ra,0(r6)
81111d90:	f83ed43a 	srli	ra,ra,16
81111d94:	f8001f26 	beq	ra,zero,81111e14 <__multiply+0x1a0>
81111d98:	58c00017 	ldw	r3,0(r11)
81111d9c:	681d883a 	mov	r14,r13
81111da0:	581f883a 	mov	r15,r11
81111da4:	1811883a 	mov	r8,r3
81111da8:	5825883a 	mov	r18,r11
81111dac:	000f883a 	mov	r7,zero
81111db0:	00000106 	br	81111db8 <__multiply+0x144>
81111db4:	8825883a 	mov	r18,r17
81111db8:	7140000b 	ldhu	r5,0(r14)
81111dbc:	4010d43a 	srli	r8,r8,16
81111dc0:	193fffcc 	andi	r4,r3,65535
81111dc4:	2fcb383a 	mul	r5,r5,ra
81111dc8:	7bc00104 	addi	r15,r15,4
81111dcc:	73800104 	addi	r14,r14,4
81111dd0:	2a0b883a 	add	r5,r5,r8
81111dd4:	29cb883a 	add	r5,r5,r7
81111dd8:	2806943a 	slli	r3,r5,16
81111ddc:	94400104 	addi	r17,r18,4
81111de0:	280ad43a 	srli	r5,r5,16
81111de4:	1908b03a 	or	r4,r3,r4
81111de8:	793fff15 	stw	r4,-4(r15)
81111dec:	70ffff17 	ldw	r3,-4(r14)
81111df0:	8a000017 	ldw	r8,0(r17)
81111df4:	1806d43a 	srli	r3,r3,16
81111df8:	413fffcc 	andi	r4,r8,65535
81111dfc:	1fc7383a 	mul	r3,r3,ra
81111e00:	1907883a 	add	r3,r3,r4
81111e04:	1947883a 	add	r3,r3,r5
81111e08:	180ed43a 	srli	r7,r3,16
81111e0c:	727fe936 	bltu	r14,r9,81111db4 <__reset+0xfb0f1db4>
81111e10:	90c00115 	stw	r3,4(r18)
81111e14:	31800104 	addi	r6,r6,4
81111e18:	5ac00104 	addi	r11,r11,4
81111e1c:	333fbe36 	bltu	r6,r12,81111d18 <__reset+0xfb0f1d18>
81111e20:	0400090e 	bge	zero,r16,81111e48 <__multiply+0x1d4>
81111e24:	50ffff17 	ldw	r3,-4(r10)
81111e28:	52bfff04 	addi	r10,r10,-4
81111e2c:	18000326 	beq	r3,zero,81111e3c <__multiply+0x1c8>
81111e30:	00000506 	br	81111e48 <__multiply+0x1d4>
81111e34:	50c00017 	ldw	r3,0(r10)
81111e38:	1800031e 	bne	r3,zero,81111e48 <__multiply+0x1d4>
81111e3c:	843fffc4 	addi	r16,r16,-1
81111e40:	52bfff04 	addi	r10,r10,-4
81111e44:	803ffb1e 	bne	r16,zero,81111e34 <__reset+0xfb0f1e34>
81111e48:	14000415 	stw	r16,16(r2)
81111e4c:	dfc00517 	ldw	ra,20(sp)
81111e50:	dd000417 	ldw	r20,16(sp)
81111e54:	dcc00317 	ldw	r19,12(sp)
81111e58:	dc800217 	ldw	r18,8(sp)
81111e5c:	dc400117 	ldw	r17,4(sp)
81111e60:	dc000017 	ldw	r16,0(sp)
81111e64:	dec00604 	addi	sp,sp,24
81111e68:	f800283a 	ret

81111e6c <__pow5mult>:
81111e6c:	defffa04 	addi	sp,sp,-24
81111e70:	dcc00315 	stw	r19,12(sp)
81111e74:	dc000015 	stw	r16,0(sp)
81111e78:	dfc00515 	stw	ra,20(sp)
81111e7c:	dd000415 	stw	r20,16(sp)
81111e80:	dc800215 	stw	r18,8(sp)
81111e84:	dc400115 	stw	r17,4(sp)
81111e88:	308000cc 	andi	r2,r6,3
81111e8c:	3021883a 	mov	r16,r6
81111e90:	2027883a 	mov	r19,r4
81111e94:	10002f1e 	bne	r2,zero,81111f54 <__pow5mult+0xe8>
81111e98:	2825883a 	mov	r18,r5
81111e9c:	8021d0ba 	srai	r16,r16,2
81111ea0:	80001a26 	beq	r16,zero,81111f0c <__pow5mult+0xa0>
81111ea4:	9c401217 	ldw	r17,72(r19)
81111ea8:	8800061e 	bne	r17,zero,81111ec4 <__pow5mult+0x58>
81111eac:	00003406 	br	81111f80 <__pow5mult+0x114>
81111eb0:	8021d07a 	srai	r16,r16,1
81111eb4:	80001526 	beq	r16,zero,81111f0c <__pow5mult+0xa0>
81111eb8:	88800017 	ldw	r2,0(r17)
81111ebc:	10001c26 	beq	r2,zero,81111f30 <__pow5mult+0xc4>
81111ec0:	1023883a 	mov	r17,r2
81111ec4:	8080004c 	andi	r2,r16,1
81111ec8:	103ff926 	beq	r2,zero,81111eb0 <__reset+0xfb0f1eb0>
81111ecc:	880d883a 	mov	r6,r17
81111ed0:	900b883a 	mov	r5,r18
81111ed4:	9809883a 	mov	r4,r19
81111ed8:	1111c740 	call	81111c74 <__multiply>
81111edc:	90001b26 	beq	r18,zero,81111f4c <__pow5mult+0xe0>
81111ee0:	91000117 	ldw	r4,4(r18)
81111ee4:	98c01317 	ldw	r3,76(r19)
81111ee8:	8021d07a 	srai	r16,r16,1
81111eec:	2109883a 	add	r4,r4,r4
81111ef0:	2109883a 	add	r4,r4,r4
81111ef4:	1907883a 	add	r3,r3,r4
81111ef8:	19000017 	ldw	r4,0(r3)
81111efc:	91000015 	stw	r4,0(r18)
81111f00:	1c800015 	stw	r18,0(r3)
81111f04:	1025883a 	mov	r18,r2
81111f08:	803feb1e 	bne	r16,zero,81111eb8 <__reset+0xfb0f1eb8>
81111f0c:	9005883a 	mov	r2,r18
81111f10:	dfc00517 	ldw	ra,20(sp)
81111f14:	dd000417 	ldw	r20,16(sp)
81111f18:	dcc00317 	ldw	r19,12(sp)
81111f1c:	dc800217 	ldw	r18,8(sp)
81111f20:	dc400117 	ldw	r17,4(sp)
81111f24:	dc000017 	ldw	r16,0(sp)
81111f28:	dec00604 	addi	sp,sp,24
81111f2c:	f800283a 	ret
81111f30:	880d883a 	mov	r6,r17
81111f34:	880b883a 	mov	r5,r17
81111f38:	9809883a 	mov	r4,r19
81111f3c:	1111c740 	call	81111c74 <__multiply>
81111f40:	88800015 	stw	r2,0(r17)
81111f44:	10000015 	stw	zero,0(r2)
81111f48:	003fdd06 	br	81111ec0 <__reset+0xfb0f1ec0>
81111f4c:	1025883a 	mov	r18,r2
81111f50:	003fd706 	br	81111eb0 <__reset+0xfb0f1eb0>
81111f54:	10bfffc4 	addi	r2,r2,-1
81111f58:	1085883a 	add	r2,r2,r2
81111f5c:	00e044b4 	movhi	r3,33042
81111f60:	18f97804 	addi	r3,r3,-6688
81111f64:	1085883a 	add	r2,r2,r2
81111f68:	1885883a 	add	r2,r3,r2
81111f6c:	11800017 	ldw	r6,0(r2)
81111f70:	000f883a 	mov	r7,zero
81111f74:	11118fc0 	call	811118fc <__multadd>
81111f78:	1025883a 	mov	r18,r2
81111f7c:	003fc706 	br	81111e9c <__reset+0xfb0f1e9c>
81111f80:	05000044 	movi	r20,1
81111f84:	a00b883a 	mov	r5,r20
81111f88:	9809883a 	mov	r4,r19
81111f8c:	111182c0 	call	8111182c <_Balloc>
81111f90:	1023883a 	mov	r17,r2
81111f94:	00809c44 	movi	r2,625
81111f98:	88800515 	stw	r2,20(r17)
81111f9c:	8d000415 	stw	r20,16(r17)
81111fa0:	9c401215 	stw	r17,72(r19)
81111fa4:	88000015 	stw	zero,0(r17)
81111fa8:	003fc606 	br	81111ec4 <__reset+0xfb0f1ec4>

81111fac <__lshift>:
81111fac:	defff904 	addi	sp,sp,-28
81111fb0:	dd400515 	stw	r21,20(sp)
81111fb4:	dcc00315 	stw	r19,12(sp)
81111fb8:	302bd17a 	srai	r21,r6,5
81111fbc:	2cc00417 	ldw	r19,16(r5)
81111fc0:	28800217 	ldw	r2,8(r5)
81111fc4:	dd000415 	stw	r20,16(sp)
81111fc8:	ace7883a 	add	r19,r21,r19
81111fcc:	dc800215 	stw	r18,8(sp)
81111fd0:	dc400115 	stw	r17,4(sp)
81111fd4:	dc000015 	stw	r16,0(sp)
81111fd8:	dfc00615 	stw	ra,24(sp)
81111fdc:	9c000044 	addi	r16,r19,1
81111fe0:	2823883a 	mov	r17,r5
81111fe4:	3029883a 	mov	r20,r6
81111fe8:	2025883a 	mov	r18,r4
81111fec:	29400117 	ldw	r5,4(r5)
81111ff0:	1400030e 	bge	r2,r16,81112000 <__lshift+0x54>
81111ff4:	1085883a 	add	r2,r2,r2
81111ff8:	29400044 	addi	r5,r5,1
81111ffc:	143ffd16 	blt	r2,r16,81111ff4 <__reset+0xfb0f1ff4>
81112000:	9009883a 	mov	r4,r18
81112004:	111182c0 	call	8111182c <_Balloc>
81112008:	10c00504 	addi	r3,r2,20
8111200c:	0540070e 	bge	zero,r21,8111202c <__lshift+0x80>
81112010:	ad6b883a 	add	r21,r21,r21
81112014:	ad6b883a 	add	r21,r21,r21
81112018:	1809883a 	mov	r4,r3
8111201c:	1d47883a 	add	r3,r3,r21
81112020:	20000015 	stw	zero,0(r4)
81112024:	21000104 	addi	r4,r4,4
81112028:	193ffd1e 	bne	r3,r4,81112020 <__reset+0xfb0f2020>
8111202c:	8a000417 	ldw	r8,16(r17)
81112030:	89000504 	addi	r4,r17,20
81112034:	a18007cc 	andi	r6,r20,31
81112038:	4211883a 	add	r8,r8,r8
8111203c:	4211883a 	add	r8,r8,r8
81112040:	2211883a 	add	r8,r4,r8
81112044:	30002326 	beq	r6,zero,811120d4 <__lshift+0x128>
81112048:	02400804 	movi	r9,32
8111204c:	4993c83a 	sub	r9,r9,r6
81112050:	000b883a 	mov	r5,zero
81112054:	21c00017 	ldw	r7,0(r4)
81112058:	1815883a 	mov	r10,r3
8111205c:	18c00104 	addi	r3,r3,4
81112060:	398e983a 	sll	r7,r7,r6
81112064:	21000104 	addi	r4,r4,4
81112068:	394ab03a 	or	r5,r7,r5
8111206c:	197fff15 	stw	r5,-4(r3)
81112070:	217fff17 	ldw	r5,-4(r4)
81112074:	2a4ad83a 	srl	r5,r5,r9
81112078:	223ff636 	bltu	r4,r8,81112054 <__reset+0xfb0f2054>
8111207c:	51400115 	stw	r5,4(r10)
81112080:	28001a1e 	bne	r5,zero,811120ec <__lshift+0x140>
81112084:	843fffc4 	addi	r16,r16,-1
81112088:	14000415 	stw	r16,16(r2)
8111208c:	88000826 	beq	r17,zero,811120b0 <__lshift+0x104>
81112090:	89000117 	ldw	r4,4(r17)
81112094:	90c01317 	ldw	r3,76(r18)
81112098:	2109883a 	add	r4,r4,r4
8111209c:	2109883a 	add	r4,r4,r4
811120a0:	1907883a 	add	r3,r3,r4
811120a4:	19000017 	ldw	r4,0(r3)
811120a8:	89000015 	stw	r4,0(r17)
811120ac:	1c400015 	stw	r17,0(r3)
811120b0:	dfc00617 	ldw	ra,24(sp)
811120b4:	dd400517 	ldw	r21,20(sp)
811120b8:	dd000417 	ldw	r20,16(sp)
811120bc:	dcc00317 	ldw	r19,12(sp)
811120c0:	dc800217 	ldw	r18,8(sp)
811120c4:	dc400117 	ldw	r17,4(sp)
811120c8:	dc000017 	ldw	r16,0(sp)
811120cc:	dec00704 	addi	sp,sp,28
811120d0:	f800283a 	ret
811120d4:	21400017 	ldw	r5,0(r4)
811120d8:	18c00104 	addi	r3,r3,4
811120dc:	21000104 	addi	r4,r4,4
811120e0:	197fff15 	stw	r5,-4(r3)
811120e4:	223ffb36 	bltu	r4,r8,811120d4 <__reset+0xfb0f20d4>
811120e8:	003fe606 	br	81112084 <__reset+0xfb0f2084>
811120ec:	9c000084 	addi	r16,r19,2
811120f0:	003fe406 	br	81112084 <__reset+0xfb0f2084>

811120f4 <__mcmp>:
811120f4:	20800417 	ldw	r2,16(r4)
811120f8:	28c00417 	ldw	r3,16(r5)
811120fc:	10c5c83a 	sub	r2,r2,r3
81112100:	1000111e 	bne	r2,zero,81112148 <__mcmp+0x54>
81112104:	18c7883a 	add	r3,r3,r3
81112108:	18c7883a 	add	r3,r3,r3
8111210c:	21000504 	addi	r4,r4,20
81112110:	29400504 	addi	r5,r5,20
81112114:	20c5883a 	add	r2,r4,r3
81112118:	28cb883a 	add	r5,r5,r3
8111211c:	00000106 	br	81112124 <__mcmp+0x30>
81112120:	20800a2e 	bgeu	r4,r2,8111214c <__mcmp+0x58>
81112124:	10bfff04 	addi	r2,r2,-4
81112128:	297fff04 	addi	r5,r5,-4
8111212c:	11800017 	ldw	r6,0(r2)
81112130:	28c00017 	ldw	r3,0(r5)
81112134:	30fffa26 	beq	r6,r3,81112120 <__reset+0xfb0f2120>
81112138:	30c00236 	bltu	r6,r3,81112144 <__mcmp+0x50>
8111213c:	00800044 	movi	r2,1
81112140:	f800283a 	ret
81112144:	00bfffc4 	movi	r2,-1
81112148:	f800283a 	ret
8111214c:	0005883a 	mov	r2,zero
81112150:	f800283a 	ret

81112154 <__mdiff>:
81112154:	28c00417 	ldw	r3,16(r5)
81112158:	30800417 	ldw	r2,16(r6)
8111215c:	defffa04 	addi	sp,sp,-24
81112160:	dcc00315 	stw	r19,12(sp)
81112164:	dc800215 	stw	r18,8(sp)
81112168:	dfc00515 	stw	ra,20(sp)
8111216c:	dd000415 	stw	r20,16(sp)
81112170:	dc400115 	stw	r17,4(sp)
81112174:	dc000015 	stw	r16,0(sp)
81112178:	1887c83a 	sub	r3,r3,r2
8111217c:	2825883a 	mov	r18,r5
81112180:	3027883a 	mov	r19,r6
81112184:	1800141e 	bne	r3,zero,811121d8 <__mdiff+0x84>
81112188:	1085883a 	add	r2,r2,r2
8111218c:	1085883a 	add	r2,r2,r2
81112190:	2a000504 	addi	r8,r5,20
81112194:	34000504 	addi	r16,r6,20
81112198:	4087883a 	add	r3,r8,r2
8111219c:	8085883a 	add	r2,r16,r2
811121a0:	00000106 	br	811121a8 <__mdiff+0x54>
811121a4:	40c0592e 	bgeu	r8,r3,8111230c <__mdiff+0x1b8>
811121a8:	18ffff04 	addi	r3,r3,-4
811121ac:	10bfff04 	addi	r2,r2,-4
811121b0:	19c00017 	ldw	r7,0(r3)
811121b4:	11400017 	ldw	r5,0(r2)
811121b8:	397ffa26 	beq	r7,r5,811121a4 <__reset+0xfb0f21a4>
811121bc:	3940592e 	bgeu	r7,r5,81112324 <__mdiff+0x1d0>
811121c0:	9005883a 	mov	r2,r18
811121c4:	4023883a 	mov	r17,r8
811121c8:	9825883a 	mov	r18,r19
811121cc:	05000044 	movi	r20,1
811121d0:	1027883a 	mov	r19,r2
811121d4:	00000406 	br	811121e8 <__mdiff+0x94>
811121d8:	18005616 	blt	r3,zero,81112334 <__mdiff+0x1e0>
811121dc:	34400504 	addi	r17,r6,20
811121e0:	2c000504 	addi	r16,r5,20
811121e4:	0029883a 	mov	r20,zero
811121e8:	91400117 	ldw	r5,4(r18)
811121ec:	111182c0 	call	8111182c <_Balloc>
811121f0:	92400417 	ldw	r9,16(r18)
811121f4:	9b000417 	ldw	r12,16(r19)
811121f8:	12c00504 	addi	r11,r2,20
811121fc:	4a51883a 	add	r8,r9,r9
81112200:	6319883a 	add	r12,r12,r12
81112204:	4211883a 	add	r8,r8,r8
81112208:	6319883a 	add	r12,r12,r12
8111220c:	15000315 	stw	r20,12(r2)
81112210:	8211883a 	add	r8,r16,r8
81112214:	8b19883a 	add	r12,r17,r12
81112218:	0007883a 	mov	r3,zero
8111221c:	81400017 	ldw	r5,0(r16)
81112220:	89c00017 	ldw	r7,0(r17)
81112224:	59800104 	addi	r6,r11,4
81112228:	293fffcc 	andi	r4,r5,65535
8111222c:	20c7883a 	add	r3,r4,r3
81112230:	393fffcc 	andi	r4,r7,65535
81112234:	1909c83a 	sub	r4,r3,r4
81112238:	280ad43a 	srli	r5,r5,16
8111223c:	380ed43a 	srli	r7,r7,16
81112240:	2007d43a 	srai	r3,r4,16
81112244:	213fffcc 	andi	r4,r4,65535
81112248:	29cbc83a 	sub	r5,r5,r7
8111224c:	28c7883a 	add	r3,r5,r3
81112250:	180a943a 	slli	r5,r3,16
81112254:	8c400104 	addi	r17,r17,4
81112258:	84000104 	addi	r16,r16,4
8111225c:	2908b03a 	or	r4,r5,r4
81112260:	59000015 	stw	r4,0(r11)
81112264:	1807d43a 	srai	r3,r3,16
81112268:	3015883a 	mov	r10,r6
8111226c:	3017883a 	mov	r11,r6
81112270:	8b3fea36 	bltu	r17,r12,8111221c <__reset+0xfb0f221c>
81112274:	8200162e 	bgeu	r16,r8,811122d0 <__mdiff+0x17c>
81112278:	8017883a 	mov	r11,r16
8111227c:	59400017 	ldw	r5,0(r11)
81112280:	31800104 	addi	r6,r6,4
81112284:	5ac00104 	addi	r11,r11,4
81112288:	293fffcc 	andi	r4,r5,65535
8111228c:	20c7883a 	add	r3,r4,r3
81112290:	280ed43a 	srli	r7,r5,16
81112294:	180bd43a 	srai	r5,r3,16
81112298:	193fffcc 	andi	r4,r3,65535
8111229c:	3947883a 	add	r3,r7,r5
811122a0:	180a943a 	slli	r5,r3,16
811122a4:	1807d43a 	srai	r3,r3,16
811122a8:	2908b03a 	or	r4,r5,r4
811122ac:	313fff15 	stw	r4,-4(r6)
811122b0:	5a3ff236 	bltu	r11,r8,8111227c <__reset+0xfb0f227c>
811122b4:	0406303a 	nor	r3,zero,r16
811122b8:	1a07883a 	add	r3,r3,r8
811122bc:	1806d0ba 	srli	r3,r3,2
811122c0:	18c00044 	addi	r3,r3,1
811122c4:	18c7883a 	add	r3,r3,r3
811122c8:	18c7883a 	add	r3,r3,r3
811122cc:	50d5883a 	add	r10,r10,r3
811122d0:	50ffff04 	addi	r3,r10,-4
811122d4:	2000041e 	bne	r4,zero,811122e8 <__mdiff+0x194>
811122d8:	18ffff04 	addi	r3,r3,-4
811122dc:	19000017 	ldw	r4,0(r3)
811122e0:	4a7fffc4 	addi	r9,r9,-1
811122e4:	203ffc26 	beq	r4,zero,811122d8 <__reset+0xfb0f22d8>
811122e8:	12400415 	stw	r9,16(r2)
811122ec:	dfc00517 	ldw	ra,20(sp)
811122f0:	dd000417 	ldw	r20,16(sp)
811122f4:	dcc00317 	ldw	r19,12(sp)
811122f8:	dc800217 	ldw	r18,8(sp)
811122fc:	dc400117 	ldw	r17,4(sp)
81112300:	dc000017 	ldw	r16,0(sp)
81112304:	dec00604 	addi	sp,sp,24
81112308:	f800283a 	ret
8111230c:	000b883a 	mov	r5,zero
81112310:	111182c0 	call	8111182c <_Balloc>
81112314:	00c00044 	movi	r3,1
81112318:	10c00415 	stw	r3,16(r2)
8111231c:	10000515 	stw	zero,20(r2)
81112320:	003ff206 	br	811122ec <__reset+0xfb0f22ec>
81112324:	8023883a 	mov	r17,r16
81112328:	0029883a 	mov	r20,zero
8111232c:	4021883a 	mov	r16,r8
81112330:	003fad06 	br	811121e8 <__reset+0xfb0f21e8>
81112334:	9005883a 	mov	r2,r18
81112338:	94400504 	addi	r17,r18,20
8111233c:	9c000504 	addi	r16,r19,20
81112340:	9825883a 	mov	r18,r19
81112344:	05000044 	movi	r20,1
81112348:	1027883a 	mov	r19,r2
8111234c:	003fa606 	br	811121e8 <__reset+0xfb0f21e8>

81112350 <__ulp>:
81112350:	295ffc2c 	andhi	r5,r5,32752
81112354:	00bf3034 	movhi	r2,64704
81112358:	2887883a 	add	r3,r5,r2
8111235c:	00c0020e 	bge	zero,r3,81112368 <__ulp+0x18>
81112360:	0005883a 	mov	r2,zero
81112364:	f800283a 	ret
81112368:	00c7c83a 	sub	r3,zero,r3
8111236c:	1807d53a 	srai	r3,r3,20
81112370:	008004c4 	movi	r2,19
81112374:	10c00b0e 	bge	r2,r3,811123a4 <__ulp+0x54>
81112378:	18bffb04 	addi	r2,r3,-20
8111237c:	01000784 	movi	r4,30
81112380:	0007883a 	mov	r3,zero
81112384:	20800516 	blt	r4,r2,8111239c <__ulp+0x4c>
81112388:	010007c4 	movi	r4,31
8111238c:	2089c83a 	sub	r4,r4,r2
81112390:	00800044 	movi	r2,1
81112394:	1104983a 	sll	r2,r2,r4
81112398:	f800283a 	ret
8111239c:	00800044 	movi	r2,1
811123a0:	f800283a 	ret
811123a4:	01400234 	movhi	r5,8
811123a8:	28c7d83a 	sra	r3,r5,r3
811123ac:	0005883a 	mov	r2,zero
811123b0:	f800283a 	ret

811123b4 <__b2d>:
811123b4:	defffa04 	addi	sp,sp,-24
811123b8:	dc000015 	stw	r16,0(sp)
811123bc:	24000417 	ldw	r16,16(r4)
811123c0:	dc400115 	stw	r17,4(sp)
811123c4:	24400504 	addi	r17,r4,20
811123c8:	8421883a 	add	r16,r16,r16
811123cc:	8421883a 	add	r16,r16,r16
811123d0:	8c21883a 	add	r16,r17,r16
811123d4:	dc800215 	stw	r18,8(sp)
811123d8:	84bfff17 	ldw	r18,-4(r16)
811123dc:	dd000415 	stw	r20,16(sp)
811123e0:	dcc00315 	stw	r19,12(sp)
811123e4:	9009883a 	mov	r4,r18
811123e8:	2829883a 	mov	r20,r5
811123ec:	dfc00515 	stw	ra,20(sp)
811123f0:	1111b200 	call	81111b20 <__hi0bits>
811123f4:	00c00804 	movi	r3,32
811123f8:	1889c83a 	sub	r4,r3,r2
811123fc:	a1000015 	stw	r4,0(r20)
81112400:	01000284 	movi	r4,10
81112404:	84ffff04 	addi	r19,r16,-4
81112408:	20801216 	blt	r4,r2,81112454 <__b2d+0xa0>
8111240c:	018002c4 	movi	r6,11
81112410:	308dc83a 	sub	r6,r6,r2
81112414:	9186d83a 	srl	r3,r18,r6
81112418:	18cffc34 	orhi	r3,r3,16368
8111241c:	8cc0212e 	bgeu	r17,r19,811124a4 <__b2d+0xf0>
81112420:	813ffe17 	ldw	r4,-8(r16)
81112424:	218cd83a 	srl	r6,r4,r6
81112428:	10800544 	addi	r2,r2,21
8111242c:	9084983a 	sll	r2,r18,r2
81112430:	1184b03a 	or	r2,r2,r6
81112434:	dfc00517 	ldw	ra,20(sp)
81112438:	dd000417 	ldw	r20,16(sp)
8111243c:	dcc00317 	ldw	r19,12(sp)
81112440:	dc800217 	ldw	r18,8(sp)
81112444:	dc400117 	ldw	r17,4(sp)
81112448:	dc000017 	ldw	r16,0(sp)
8111244c:	dec00604 	addi	sp,sp,24
81112450:	f800283a 	ret
81112454:	8cc00f2e 	bgeu	r17,r19,81112494 <__b2d+0xe0>
81112458:	117ffd44 	addi	r5,r2,-11
8111245c:	80bffe17 	ldw	r2,-8(r16)
81112460:	28000e26 	beq	r5,zero,8111249c <__b2d+0xe8>
81112464:	1949c83a 	sub	r4,r3,r5
81112468:	9164983a 	sll	r18,r18,r5
8111246c:	1106d83a 	srl	r3,r2,r4
81112470:	81bffe04 	addi	r6,r16,-8
81112474:	948ffc34 	orhi	r18,r18,16368
81112478:	90c6b03a 	or	r3,r18,r3
8111247c:	89800e2e 	bgeu	r17,r6,811124b8 <__b2d+0x104>
81112480:	81bffd17 	ldw	r6,-12(r16)
81112484:	1144983a 	sll	r2,r2,r5
81112488:	310ad83a 	srl	r5,r6,r4
8111248c:	2884b03a 	or	r2,r5,r2
81112490:	003fe806 	br	81112434 <__reset+0xfb0f2434>
81112494:	10bffd44 	addi	r2,r2,-11
81112498:	1000041e 	bne	r2,zero,811124ac <__b2d+0xf8>
8111249c:	90cffc34 	orhi	r3,r18,16368
811124a0:	003fe406 	br	81112434 <__reset+0xfb0f2434>
811124a4:	000d883a 	mov	r6,zero
811124a8:	003fdf06 	br	81112428 <__reset+0xfb0f2428>
811124ac:	90a4983a 	sll	r18,r18,r2
811124b0:	0005883a 	mov	r2,zero
811124b4:	003ff906 	br	8111249c <__reset+0xfb0f249c>
811124b8:	1144983a 	sll	r2,r2,r5
811124bc:	003fdd06 	br	81112434 <__reset+0xfb0f2434>

811124c0 <__d2b>:
811124c0:	defff804 	addi	sp,sp,-32
811124c4:	dc000215 	stw	r16,8(sp)
811124c8:	3021883a 	mov	r16,r6
811124cc:	dc400315 	stw	r17,12(sp)
811124d0:	8022907a 	slli	r17,r16,1
811124d4:	dd000615 	stw	r20,24(sp)
811124d8:	2829883a 	mov	r20,r5
811124dc:	01400044 	movi	r5,1
811124e0:	dcc00515 	stw	r19,20(sp)
811124e4:	dc800415 	stw	r18,16(sp)
811124e8:	dfc00715 	stw	ra,28(sp)
811124ec:	3825883a 	mov	r18,r7
811124f0:	8822d57a 	srli	r17,r17,21
811124f4:	111182c0 	call	8111182c <_Balloc>
811124f8:	1027883a 	mov	r19,r2
811124fc:	00800434 	movhi	r2,16
81112500:	10bfffc4 	addi	r2,r2,-1
81112504:	808c703a 	and	r6,r16,r2
81112508:	88000126 	beq	r17,zero,81112510 <__d2b+0x50>
8111250c:	31800434 	orhi	r6,r6,16
81112510:	d9800015 	stw	r6,0(sp)
81112514:	a0002426 	beq	r20,zero,811125a8 <__d2b+0xe8>
81112518:	d9000104 	addi	r4,sp,4
8111251c:	dd000115 	stw	r20,4(sp)
81112520:	1111b880 	call	81111b88 <__lo0bits>
81112524:	d8c00017 	ldw	r3,0(sp)
81112528:	10002f1e 	bne	r2,zero,811125e8 <__d2b+0x128>
8111252c:	d9000117 	ldw	r4,4(sp)
81112530:	99000515 	stw	r4,20(r19)
81112534:	1821003a 	cmpeq	r16,r3,zero
81112538:	01000084 	movi	r4,2
8111253c:	2421c83a 	sub	r16,r4,r16
81112540:	98c00615 	stw	r3,24(r19)
81112544:	9c000415 	stw	r16,16(r19)
81112548:	88001f1e 	bne	r17,zero,811125c8 <__d2b+0x108>
8111254c:	10bef384 	addi	r2,r2,-1074
81112550:	90800015 	stw	r2,0(r18)
81112554:	00900034 	movhi	r2,16384
81112558:	10bfffc4 	addi	r2,r2,-1
8111255c:	8085883a 	add	r2,r16,r2
81112560:	1085883a 	add	r2,r2,r2
81112564:	1085883a 	add	r2,r2,r2
81112568:	9885883a 	add	r2,r19,r2
8111256c:	11000517 	ldw	r4,20(r2)
81112570:	8020917a 	slli	r16,r16,5
81112574:	1111b200 	call	81111b20 <__hi0bits>
81112578:	d8c00817 	ldw	r3,32(sp)
8111257c:	8085c83a 	sub	r2,r16,r2
81112580:	18800015 	stw	r2,0(r3)
81112584:	9805883a 	mov	r2,r19
81112588:	dfc00717 	ldw	ra,28(sp)
8111258c:	dd000617 	ldw	r20,24(sp)
81112590:	dcc00517 	ldw	r19,20(sp)
81112594:	dc800417 	ldw	r18,16(sp)
81112598:	dc400317 	ldw	r17,12(sp)
8111259c:	dc000217 	ldw	r16,8(sp)
811125a0:	dec00804 	addi	sp,sp,32
811125a4:	f800283a 	ret
811125a8:	d809883a 	mov	r4,sp
811125ac:	1111b880 	call	81111b88 <__lo0bits>
811125b0:	d8c00017 	ldw	r3,0(sp)
811125b4:	04000044 	movi	r16,1
811125b8:	9c000415 	stw	r16,16(r19)
811125bc:	98c00515 	stw	r3,20(r19)
811125c0:	10800804 	addi	r2,r2,32
811125c4:	883fe126 	beq	r17,zero,8111254c <__reset+0xfb0f254c>
811125c8:	00c00d44 	movi	r3,53
811125cc:	8c7ef344 	addi	r17,r17,-1075
811125d0:	88a3883a 	add	r17,r17,r2
811125d4:	1885c83a 	sub	r2,r3,r2
811125d8:	d8c00817 	ldw	r3,32(sp)
811125dc:	94400015 	stw	r17,0(r18)
811125e0:	18800015 	stw	r2,0(r3)
811125e4:	003fe706 	br	81112584 <__reset+0xfb0f2584>
811125e8:	01000804 	movi	r4,32
811125ec:	2089c83a 	sub	r4,r4,r2
811125f0:	1908983a 	sll	r4,r3,r4
811125f4:	d9400117 	ldw	r5,4(sp)
811125f8:	1886d83a 	srl	r3,r3,r2
811125fc:	2148b03a 	or	r4,r4,r5
81112600:	99000515 	stw	r4,20(r19)
81112604:	d8c00015 	stw	r3,0(sp)
81112608:	003fca06 	br	81112534 <__reset+0xfb0f2534>

8111260c <__ratio>:
8111260c:	defff904 	addi	sp,sp,-28
81112610:	dc400315 	stw	r17,12(sp)
81112614:	2823883a 	mov	r17,r5
81112618:	d9400104 	addi	r5,sp,4
8111261c:	dfc00615 	stw	ra,24(sp)
81112620:	dcc00515 	stw	r19,20(sp)
81112624:	dc800415 	stw	r18,16(sp)
81112628:	2027883a 	mov	r19,r4
8111262c:	dc000215 	stw	r16,8(sp)
81112630:	11123b40 	call	811123b4 <__b2d>
81112634:	d80b883a 	mov	r5,sp
81112638:	8809883a 	mov	r4,r17
8111263c:	1025883a 	mov	r18,r2
81112640:	1821883a 	mov	r16,r3
81112644:	11123b40 	call	811123b4 <__b2d>
81112648:	8a000417 	ldw	r8,16(r17)
8111264c:	99000417 	ldw	r4,16(r19)
81112650:	d9400117 	ldw	r5,4(sp)
81112654:	2209c83a 	sub	r4,r4,r8
81112658:	2010917a 	slli	r8,r4,5
8111265c:	d9000017 	ldw	r4,0(sp)
81112660:	2909c83a 	sub	r4,r5,r4
81112664:	4109883a 	add	r4,r8,r4
81112668:	01000e0e 	bge	zero,r4,811126a4 <__ratio+0x98>
8111266c:	2008953a 	slli	r4,r4,20
81112670:	2421883a 	add	r16,r4,r16
81112674:	100d883a 	mov	r6,r2
81112678:	180f883a 	mov	r7,r3
8111267c:	9009883a 	mov	r4,r18
81112680:	800b883a 	mov	r5,r16
81112684:	11168500 	call	81116850 <__divdf3>
81112688:	dfc00617 	ldw	ra,24(sp)
8111268c:	dcc00517 	ldw	r19,20(sp)
81112690:	dc800417 	ldw	r18,16(sp)
81112694:	dc400317 	ldw	r17,12(sp)
81112698:	dc000217 	ldw	r16,8(sp)
8111269c:	dec00704 	addi	sp,sp,28
811126a0:	f800283a 	ret
811126a4:	2008953a 	slli	r4,r4,20
811126a8:	1907c83a 	sub	r3,r3,r4
811126ac:	003ff106 	br	81112674 <__reset+0xfb0f2674>

811126b0 <_mprec_log10>:
811126b0:	defffe04 	addi	sp,sp,-8
811126b4:	dc000015 	stw	r16,0(sp)
811126b8:	dfc00115 	stw	ra,4(sp)
811126bc:	008005c4 	movi	r2,23
811126c0:	2021883a 	mov	r16,r4
811126c4:	11000d0e 	bge	r2,r4,811126fc <_mprec_log10+0x4c>
811126c8:	0005883a 	mov	r2,zero
811126cc:	00cffc34 	movhi	r3,16368
811126d0:	843fffc4 	addi	r16,r16,-1
811126d4:	000d883a 	mov	r6,zero
811126d8:	01d00934 	movhi	r7,16420
811126dc:	1009883a 	mov	r4,r2
811126e0:	180b883a 	mov	r5,r3
811126e4:	110adc00 	call	8110adc0 <__muldf3>
811126e8:	803ff91e 	bne	r16,zero,811126d0 <__reset+0xfb0f26d0>
811126ec:	dfc00117 	ldw	ra,4(sp)
811126f0:	dc000017 	ldw	r16,0(sp)
811126f4:	dec00204 	addi	sp,sp,8
811126f8:	f800283a 	ret
811126fc:	202090fa 	slli	r16,r4,3
81112700:	00a044b4 	movhi	r2,33042
81112704:	10b98f04 	addi	r2,r2,-6596
81112708:	1421883a 	add	r16,r2,r16
8111270c:	80800017 	ldw	r2,0(r16)
81112710:	80c00117 	ldw	r3,4(r16)
81112714:	dfc00117 	ldw	ra,4(sp)
81112718:	dc000017 	ldw	r16,0(sp)
8111271c:	dec00204 	addi	sp,sp,8
81112720:	f800283a 	ret

81112724 <__copybits>:
81112724:	297fffc4 	addi	r5,r5,-1
81112728:	280fd17a 	srai	r7,r5,5
8111272c:	30c00417 	ldw	r3,16(r6)
81112730:	30800504 	addi	r2,r6,20
81112734:	39c00044 	addi	r7,r7,1
81112738:	18c7883a 	add	r3,r3,r3
8111273c:	39cf883a 	add	r7,r7,r7
81112740:	18c7883a 	add	r3,r3,r3
81112744:	39cf883a 	add	r7,r7,r7
81112748:	10c7883a 	add	r3,r2,r3
8111274c:	21cf883a 	add	r7,r4,r7
81112750:	10c00d2e 	bgeu	r2,r3,81112788 <__copybits+0x64>
81112754:	200b883a 	mov	r5,r4
81112758:	12000017 	ldw	r8,0(r2)
8111275c:	29400104 	addi	r5,r5,4
81112760:	10800104 	addi	r2,r2,4
81112764:	2a3fff15 	stw	r8,-4(r5)
81112768:	10fffb36 	bltu	r2,r3,81112758 <__reset+0xfb0f2758>
8111276c:	1985c83a 	sub	r2,r3,r6
81112770:	10bffac4 	addi	r2,r2,-21
81112774:	1004d0ba 	srli	r2,r2,2
81112778:	10800044 	addi	r2,r2,1
8111277c:	1085883a 	add	r2,r2,r2
81112780:	1085883a 	add	r2,r2,r2
81112784:	2089883a 	add	r4,r4,r2
81112788:	21c0032e 	bgeu	r4,r7,81112798 <__copybits+0x74>
8111278c:	20000015 	stw	zero,0(r4)
81112790:	21000104 	addi	r4,r4,4
81112794:	21fffd36 	bltu	r4,r7,8111278c <__reset+0xfb0f278c>
81112798:	f800283a 	ret

8111279c <__any_on>:
8111279c:	20c00417 	ldw	r3,16(r4)
811127a0:	2805d17a 	srai	r2,r5,5
811127a4:	21000504 	addi	r4,r4,20
811127a8:	18800d0e 	bge	r3,r2,811127e0 <__any_on+0x44>
811127ac:	18c7883a 	add	r3,r3,r3
811127b0:	18c7883a 	add	r3,r3,r3
811127b4:	20c7883a 	add	r3,r4,r3
811127b8:	20c0192e 	bgeu	r4,r3,81112820 <__any_on+0x84>
811127bc:	18bfff17 	ldw	r2,-4(r3)
811127c0:	18ffff04 	addi	r3,r3,-4
811127c4:	1000041e 	bne	r2,zero,811127d8 <__any_on+0x3c>
811127c8:	20c0142e 	bgeu	r4,r3,8111281c <__any_on+0x80>
811127cc:	18ffff04 	addi	r3,r3,-4
811127d0:	19400017 	ldw	r5,0(r3)
811127d4:	283ffc26 	beq	r5,zero,811127c8 <__reset+0xfb0f27c8>
811127d8:	00800044 	movi	r2,1
811127dc:	f800283a 	ret
811127e0:	10c00a0e 	bge	r2,r3,8111280c <__any_on+0x70>
811127e4:	1085883a 	add	r2,r2,r2
811127e8:	1085883a 	add	r2,r2,r2
811127ec:	294007cc 	andi	r5,r5,31
811127f0:	2087883a 	add	r3,r4,r2
811127f4:	283ff026 	beq	r5,zero,811127b8 <__reset+0xfb0f27b8>
811127f8:	19800017 	ldw	r6,0(r3)
811127fc:	3144d83a 	srl	r2,r6,r5
81112800:	114a983a 	sll	r5,r2,r5
81112804:	317ff41e 	bne	r6,r5,811127d8 <__reset+0xfb0f27d8>
81112808:	003feb06 	br	811127b8 <__reset+0xfb0f27b8>
8111280c:	1085883a 	add	r2,r2,r2
81112810:	1085883a 	add	r2,r2,r2
81112814:	2087883a 	add	r3,r4,r2
81112818:	003fe706 	br	811127b8 <__reset+0xfb0f27b8>
8111281c:	f800283a 	ret
81112820:	0005883a 	mov	r2,zero
81112824:	f800283a 	ret

81112828 <_putc_r>:
81112828:	defffc04 	addi	sp,sp,-16
8111282c:	dc000215 	stw	r16,8(sp)
81112830:	dfc00315 	stw	ra,12(sp)
81112834:	2021883a 	mov	r16,r4
81112838:	20000226 	beq	r4,zero,81112844 <_putc_r+0x1c>
8111283c:	20800e17 	ldw	r2,56(r4)
81112840:	10001b26 	beq	r2,zero,811128b0 <_putc_r+0x88>
81112844:	30800217 	ldw	r2,8(r6)
81112848:	10bfffc4 	addi	r2,r2,-1
8111284c:	30800215 	stw	r2,8(r6)
81112850:	10000a16 	blt	r2,zero,8111287c <_putc_r+0x54>
81112854:	30800017 	ldw	r2,0(r6)
81112858:	11400005 	stb	r5,0(r2)
8111285c:	30800017 	ldw	r2,0(r6)
81112860:	10c00044 	addi	r3,r2,1
81112864:	30c00015 	stw	r3,0(r6)
81112868:	10800003 	ldbu	r2,0(r2)
8111286c:	dfc00317 	ldw	ra,12(sp)
81112870:	dc000217 	ldw	r16,8(sp)
81112874:	dec00404 	addi	sp,sp,16
81112878:	f800283a 	ret
8111287c:	30c00617 	ldw	r3,24(r6)
81112880:	10c00616 	blt	r2,r3,8111289c <_putc_r+0x74>
81112884:	30800017 	ldw	r2,0(r6)
81112888:	00c00284 	movi	r3,10
8111288c:	11400005 	stb	r5,0(r2)
81112890:	30800017 	ldw	r2,0(r6)
81112894:	11400003 	ldbu	r5,0(r2)
81112898:	28fff11e 	bne	r5,r3,81112860 <__reset+0xfb0f2860>
8111289c:	8009883a 	mov	r4,r16
811128a0:	dfc00317 	ldw	ra,12(sp)
811128a4:	dc000217 	ldw	r16,8(sp)
811128a8:	dec00404 	addi	sp,sp,16
811128ac:	1114a0c1 	jmpi	81114a0c <__swbuf_r>
811128b0:	d9400015 	stw	r5,0(sp)
811128b4:	d9800115 	stw	r6,4(sp)
811128b8:	110ff580 	call	8110ff58 <__sinit>
811128bc:	d9800117 	ldw	r6,4(sp)
811128c0:	d9400017 	ldw	r5,0(sp)
811128c4:	003fdf06 	br	81112844 <__reset+0xfb0f2844>

811128c8 <putc>:
811128c8:	00a044b4 	movhi	r2,33042
811128cc:	defffc04 	addi	sp,sp,-16
811128d0:	10819104 	addi	r2,r2,1604
811128d4:	dc000115 	stw	r16,4(sp)
811128d8:	14000017 	ldw	r16,0(r2)
811128dc:	dc400215 	stw	r17,8(sp)
811128e0:	dfc00315 	stw	ra,12(sp)
811128e4:	2023883a 	mov	r17,r4
811128e8:	80000226 	beq	r16,zero,811128f4 <putc+0x2c>
811128ec:	80800e17 	ldw	r2,56(r16)
811128f0:	10001a26 	beq	r2,zero,8111295c <putc+0x94>
811128f4:	28800217 	ldw	r2,8(r5)
811128f8:	10bfffc4 	addi	r2,r2,-1
811128fc:	28800215 	stw	r2,8(r5)
81112900:	10000b16 	blt	r2,zero,81112930 <putc+0x68>
81112904:	28800017 	ldw	r2,0(r5)
81112908:	14400005 	stb	r17,0(r2)
8111290c:	28800017 	ldw	r2,0(r5)
81112910:	10c00044 	addi	r3,r2,1
81112914:	28c00015 	stw	r3,0(r5)
81112918:	10800003 	ldbu	r2,0(r2)
8111291c:	dfc00317 	ldw	ra,12(sp)
81112920:	dc400217 	ldw	r17,8(sp)
81112924:	dc000117 	ldw	r16,4(sp)
81112928:	dec00404 	addi	sp,sp,16
8111292c:	f800283a 	ret
81112930:	28c00617 	ldw	r3,24(r5)
81112934:	10c00e16 	blt	r2,r3,81112970 <putc+0xa8>
81112938:	28800017 	ldw	r2,0(r5)
8111293c:	01000284 	movi	r4,10
81112940:	14400005 	stb	r17,0(r2)
81112944:	28800017 	ldw	r2,0(r5)
81112948:	10c00003 	ldbu	r3,0(r2)
8111294c:	193ff01e 	bne	r3,r4,81112910 <__reset+0xfb0f2910>
81112950:	280d883a 	mov	r6,r5
81112954:	180b883a 	mov	r5,r3
81112958:	00000706 	br	81112978 <putc+0xb0>
8111295c:	8009883a 	mov	r4,r16
81112960:	d9400015 	stw	r5,0(sp)
81112964:	110ff580 	call	8110ff58 <__sinit>
81112968:	d9400017 	ldw	r5,0(sp)
8111296c:	003fe106 	br	811128f4 <__reset+0xfb0f28f4>
81112970:	280d883a 	mov	r6,r5
81112974:	880b883a 	mov	r5,r17
81112978:	8009883a 	mov	r4,r16
8111297c:	dfc00317 	ldw	ra,12(sp)
81112980:	dc400217 	ldw	r17,8(sp)
81112984:	dc000117 	ldw	r16,4(sp)
81112988:	dec00404 	addi	sp,sp,16
8111298c:	1114a0c1 	jmpi	81114a0c <__swbuf_r>

81112990 <_realloc_r>:
81112990:	defff604 	addi	sp,sp,-40
81112994:	dc800215 	stw	r18,8(sp)
81112998:	dfc00915 	stw	ra,36(sp)
8111299c:	df000815 	stw	fp,32(sp)
811129a0:	ddc00715 	stw	r23,28(sp)
811129a4:	dd800615 	stw	r22,24(sp)
811129a8:	dd400515 	stw	r21,20(sp)
811129ac:	dd000415 	stw	r20,16(sp)
811129b0:	dcc00315 	stw	r19,12(sp)
811129b4:	dc400115 	stw	r17,4(sp)
811129b8:	dc000015 	stw	r16,0(sp)
811129bc:	3025883a 	mov	r18,r6
811129c0:	2800b726 	beq	r5,zero,81112ca0 <_realloc_r+0x310>
811129c4:	282b883a 	mov	r21,r5
811129c8:	2029883a 	mov	r20,r4
811129cc:	11185e80 	call	811185e8 <__malloc_lock>
811129d0:	a8bfff17 	ldw	r2,-4(r21)
811129d4:	043fff04 	movi	r16,-4
811129d8:	90c002c4 	addi	r3,r18,11
811129dc:	01000584 	movi	r4,22
811129e0:	acfffe04 	addi	r19,r21,-8
811129e4:	1420703a 	and	r16,r2,r16
811129e8:	20c0332e 	bgeu	r4,r3,81112ab8 <_realloc_r+0x128>
811129ec:	047ffe04 	movi	r17,-8
811129f0:	1c62703a 	and	r17,r3,r17
811129f4:	8807883a 	mov	r3,r17
811129f8:	88005816 	blt	r17,zero,81112b5c <_realloc_r+0x1cc>
811129fc:	8c805736 	bltu	r17,r18,81112b5c <_realloc_r+0x1cc>
81112a00:	80c0300e 	bge	r16,r3,81112ac4 <_realloc_r+0x134>
81112a04:	072044b4 	movhi	fp,33042
81112a08:	e73b9804 	addi	fp,fp,-4512
81112a0c:	e1c00217 	ldw	r7,8(fp)
81112a10:	9c09883a 	add	r4,r19,r16
81112a14:	22000117 	ldw	r8,4(r4)
81112a18:	21c06326 	beq	r4,r7,81112ba8 <_realloc_r+0x218>
81112a1c:	017fff84 	movi	r5,-2
81112a20:	414a703a 	and	r5,r8,r5
81112a24:	214b883a 	add	r5,r4,r5
81112a28:	29800117 	ldw	r6,4(r5)
81112a2c:	3180004c 	andi	r6,r6,1
81112a30:	30003f26 	beq	r6,zero,81112b30 <_realloc_r+0x1a0>
81112a34:	1080004c 	andi	r2,r2,1
81112a38:	10008326 	beq	r2,zero,81112c48 <_realloc_r+0x2b8>
81112a3c:	900b883a 	mov	r5,r18
81112a40:	a009883a 	mov	r4,r20
81112a44:	1110cb80 	call	81110cb8 <_malloc_r>
81112a48:	1025883a 	mov	r18,r2
81112a4c:	10011e26 	beq	r2,zero,81112ec8 <_realloc_r+0x538>
81112a50:	a93fff17 	ldw	r4,-4(r21)
81112a54:	10fffe04 	addi	r3,r2,-8
81112a58:	00bfff84 	movi	r2,-2
81112a5c:	2084703a 	and	r2,r4,r2
81112a60:	9885883a 	add	r2,r19,r2
81112a64:	1880ee26 	beq	r3,r2,81112e20 <_realloc_r+0x490>
81112a68:	81bfff04 	addi	r6,r16,-4
81112a6c:	00800904 	movi	r2,36
81112a70:	1180b836 	bltu	r2,r6,81112d54 <_realloc_r+0x3c4>
81112a74:	00c004c4 	movi	r3,19
81112a78:	19809636 	bltu	r3,r6,81112cd4 <_realloc_r+0x344>
81112a7c:	9005883a 	mov	r2,r18
81112a80:	a807883a 	mov	r3,r21
81112a84:	19000017 	ldw	r4,0(r3)
81112a88:	11000015 	stw	r4,0(r2)
81112a8c:	19000117 	ldw	r4,4(r3)
81112a90:	11000115 	stw	r4,4(r2)
81112a94:	18c00217 	ldw	r3,8(r3)
81112a98:	10c00215 	stw	r3,8(r2)
81112a9c:	a80b883a 	mov	r5,r21
81112aa0:	a009883a 	mov	r4,r20
81112aa4:	11100cc0 	call	811100cc <_free_r>
81112aa8:	a009883a 	mov	r4,r20
81112aac:	111860c0 	call	8111860c <__malloc_unlock>
81112ab0:	9005883a 	mov	r2,r18
81112ab4:	00001206 	br	81112b00 <_realloc_r+0x170>
81112ab8:	00c00404 	movi	r3,16
81112abc:	1823883a 	mov	r17,r3
81112ac0:	003fce06 	br	811129fc <__reset+0xfb0f29fc>
81112ac4:	a825883a 	mov	r18,r21
81112ac8:	8445c83a 	sub	r2,r16,r17
81112acc:	00c003c4 	movi	r3,15
81112ad0:	18802636 	bltu	r3,r2,81112b6c <_realloc_r+0x1dc>
81112ad4:	99800117 	ldw	r6,4(r19)
81112ad8:	9c07883a 	add	r3,r19,r16
81112adc:	3180004c 	andi	r6,r6,1
81112ae0:	3420b03a 	or	r16,r6,r16
81112ae4:	9c000115 	stw	r16,4(r19)
81112ae8:	18800117 	ldw	r2,4(r3)
81112aec:	10800054 	ori	r2,r2,1
81112af0:	18800115 	stw	r2,4(r3)
81112af4:	a009883a 	mov	r4,r20
81112af8:	111860c0 	call	8111860c <__malloc_unlock>
81112afc:	9005883a 	mov	r2,r18
81112b00:	dfc00917 	ldw	ra,36(sp)
81112b04:	df000817 	ldw	fp,32(sp)
81112b08:	ddc00717 	ldw	r23,28(sp)
81112b0c:	dd800617 	ldw	r22,24(sp)
81112b10:	dd400517 	ldw	r21,20(sp)
81112b14:	dd000417 	ldw	r20,16(sp)
81112b18:	dcc00317 	ldw	r19,12(sp)
81112b1c:	dc800217 	ldw	r18,8(sp)
81112b20:	dc400117 	ldw	r17,4(sp)
81112b24:	dc000017 	ldw	r16,0(sp)
81112b28:	dec00a04 	addi	sp,sp,40
81112b2c:	f800283a 	ret
81112b30:	017fff04 	movi	r5,-4
81112b34:	414a703a 	and	r5,r8,r5
81112b38:	814d883a 	add	r6,r16,r5
81112b3c:	30c01f16 	blt	r6,r3,81112bbc <_realloc_r+0x22c>
81112b40:	20800317 	ldw	r2,12(r4)
81112b44:	20c00217 	ldw	r3,8(r4)
81112b48:	a825883a 	mov	r18,r21
81112b4c:	3021883a 	mov	r16,r6
81112b50:	18800315 	stw	r2,12(r3)
81112b54:	10c00215 	stw	r3,8(r2)
81112b58:	003fdb06 	br	81112ac8 <__reset+0xfb0f2ac8>
81112b5c:	00800304 	movi	r2,12
81112b60:	a0800015 	stw	r2,0(r20)
81112b64:	0005883a 	mov	r2,zero
81112b68:	003fe506 	br	81112b00 <__reset+0xfb0f2b00>
81112b6c:	98c00117 	ldw	r3,4(r19)
81112b70:	9c4b883a 	add	r5,r19,r17
81112b74:	11000054 	ori	r4,r2,1
81112b78:	18c0004c 	andi	r3,r3,1
81112b7c:	1c62b03a 	or	r17,r3,r17
81112b80:	9c400115 	stw	r17,4(r19)
81112b84:	29000115 	stw	r4,4(r5)
81112b88:	2885883a 	add	r2,r5,r2
81112b8c:	10c00117 	ldw	r3,4(r2)
81112b90:	29400204 	addi	r5,r5,8
81112b94:	a009883a 	mov	r4,r20
81112b98:	18c00054 	ori	r3,r3,1
81112b9c:	10c00115 	stw	r3,4(r2)
81112ba0:	11100cc0 	call	811100cc <_free_r>
81112ba4:	003fd306 	br	81112af4 <__reset+0xfb0f2af4>
81112ba8:	017fff04 	movi	r5,-4
81112bac:	414a703a 	and	r5,r8,r5
81112bb0:	89800404 	addi	r6,r17,16
81112bb4:	8151883a 	add	r8,r16,r5
81112bb8:	4180590e 	bge	r8,r6,81112d20 <_realloc_r+0x390>
81112bbc:	1080004c 	andi	r2,r2,1
81112bc0:	103f9e1e 	bne	r2,zero,81112a3c <__reset+0xfb0f2a3c>
81112bc4:	adbffe17 	ldw	r22,-8(r21)
81112bc8:	00bfff04 	movi	r2,-4
81112bcc:	9dadc83a 	sub	r22,r19,r22
81112bd0:	b1800117 	ldw	r6,4(r22)
81112bd4:	3084703a 	and	r2,r6,r2
81112bd8:	20002026 	beq	r4,zero,81112c5c <_realloc_r+0x2cc>
81112bdc:	80af883a 	add	r23,r16,r2
81112be0:	b96f883a 	add	r23,r23,r5
81112be4:	21c05f26 	beq	r4,r7,81112d64 <_realloc_r+0x3d4>
81112be8:	b8c01c16 	blt	r23,r3,81112c5c <_realloc_r+0x2cc>
81112bec:	20800317 	ldw	r2,12(r4)
81112bf0:	20c00217 	ldw	r3,8(r4)
81112bf4:	81bfff04 	addi	r6,r16,-4
81112bf8:	01000904 	movi	r4,36
81112bfc:	18800315 	stw	r2,12(r3)
81112c00:	10c00215 	stw	r3,8(r2)
81112c04:	b0c00217 	ldw	r3,8(r22)
81112c08:	b0800317 	ldw	r2,12(r22)
81112c0c:	b4800204 	addi	r18,r22,8
81112c10:	18800315 	stw	r2,12(r3)
81112c14:	10c00215 	stw	r3,8(r2)
81112c18:	21801b36 	bltu	r4,r6,81112c88 <_realloc_r+0x2f8>
81112c1c:	008004c4 	movi	r2,19
81112c20:	1180352e 	bgeu	r2,r6,81112cf8 <_realloc_r+0x368>
81112c24:	a8800017 	ldw	r2,0(r21)
81112c28:	b0800215 	stw	r2,8(r22)
81112c2c:	a8800117 	ldw	r2,4(r21)
81112c30:	b0800315 	stw	r2,12(r22)
81112c34:	008006c4 	movi	r2,27
81112c38:	11807f36 	bltu	r2,r6,81112e38 <_realloc_r+0x4a8>
81112c3c:	b0800404 	addi	r2,r22,16
81112c40:	ad400204 	addi	r21,r21,8
81112c44:	00002d06 	br	81112cfc <_realloc_r+0x36c>
81112c48:	adbffe17 	ldw	r22,-8(r21)
81112c4c:	00bfff04 	movi	r2,-4
81112c50:	9dadc83a 	sub	r22,r19,r22
81112c54:	b1000117 	ldw	r4,4(r22)
81112c58:	2084703a 	and	r2,r4,r2
81112c5c:	b03f7726 	beq	r22,zero,81112a3c <__reset+0xfb0f2a3c>
81112c60:	80af883a 	add	r23,r16,r2
81112c64:	b8ff7516 	blt	r23,r3,81112a3c <__reset+0xfb0f2a3c>
81112c68:	b0800317 	ldw	r2,12(r22)
81112c6c:	b0c00217 	ldw	r3,8(r22)
81112c70:	81bfff04 	addi	r6,r16,-4
81112c74:	01000904 	movi	r4,36
81112c78:	18800315 	stw	r2,12(r3)
81112c7c:	10c00215 	stw	r3,8(r2)
81112c80:	b4800204 	addi	r18,r22,8
81112c84:	21bfe52e 	bgeu	r4,r6,81112c1c <__reset+0xfb0f2c1c>
81112c88:	a80b883a 	mov	r5,r21
81112c8c:	9009883a 	mov	r4,r18
81112c90:	11115a80 	call	811115a8 <memmove>
81112c94:	b821883a 	mov	r16,r23
81112c98:	b027883a 	mov	r19,r22
81112c9c:	003f8a06 	br	81112ac8 <__reset+0xfb0f2ac8>
81112ca0:	300b883a 	mov	r5,r6
81112ca4:	dfc00917 	ldw	ra,36(sp)
81112ca8:	df000817 	ldw	fp,32(sp)
81112cac:	ddc00717 	ldw	r23,28(sp)
81112cb0:	dd800617 	ldw	r22,24(sp)
81112cb4:	dd400517 	ldw	r21,20(sp)
81112cb8:	dd000417 	ldw	r20,16(sp)
81112cbc:	dcc00317 	ldw	r19,12(sp)
81112cc0:	dc800217 	ldw	r18,8(sp)
81112cc4:	dc400117 	ldw	r17,4(sp)
81112cc8:	dc000017 	ldw	r16,0(sp)
81112ccc:	dec00a04 	addi	sp,sp,40
81112cd0:	1110cb81 	jmpi	81110cb8 <_malloc_r>
81112cd4:	a8c00017 	ldw	r3,0(r21)
81112cd8:	90c00015 	stw	r3,0(r18)
81112cdc:	a8c00117 	ldw	r3,4(r21)
81112ce0:	90c00115 	stw	r3,4(r18)
81112ce4:	00c006c4 	movi	r3,27
81112ce8:	19804536 	bltu	r3,r6,81112e00 <_realloc_r+0x470>
81112cec:	90800204 	addi	r2,r18,8
81112cf0:	a8c00204 	addi	r3,r21,8
81112cf4:	003f6306 	br	81112a84 <__reset+0xfb0f2a84>
81112cf8:	9005883a 	mov	r2,r18
81112cfc:	a8c00017 	ldw	r3,0(r21)
81112d00:	b821883a 	mov	r16,r23
81112d04:	b027883a 	mov	r19,r22
81112d08:	10c00015 	stw	r3,0(r2)
81112d0c:	a8c00117 	ldw	r3,4(r21)
81112d10:	10c00115 	stw	r3,4(r2)
81112d14:	a8c00217 	ldw	r3,8(r21)
81112d18:	10c00215 	stw	r3,8(r2)
81112d1c:	003f6a06 	br	81112ac8 <__reset+0xfb0f2ac8>
81112d20:	9c67883a 	add	r19,r19,r17
81112d24:	4445c83a 	sub	r2,r8,r17
81112d28:	e4c00215 	stw	r19,8(fp)
81112d2c:	10800054 	ori	r2,r2,1
81112d30:	98800115 	stw	r2,4(r19)
81112d34:	a8bfff17 	ldw	r2,-4(r21)
81112d38:	a009883a 	mov	r4,r20
81112d3c:	1080004c 	andi	r2,r2,1
81112d40:	1462b03a 	or	r17,r2,r17
81112d44:	ac7fff15 	stw	r17,-4(r21)
81112d48:	111860c0 	call	8111860c <__malloc_unlock>
81112d4c:	a805883a 	mov	r2,r21
81112d50:	003f6b06 	br	81112b00 <__reset+0xfb0f2b00>
81112d54:	a80b883a 	mov	r5,r21
81112d58:	9009883a 	mov	r4,r18
81112d5c:	11115a80 	call	811115a8 <memmove>
81112d60:	003f4e06 	br	81112a9c <__reset+0xfb0f2a9c>
81112d64:	89000404 	addi	r4,r17,16
81112d68:	b93fbc16 	blt	r23,r4,81112c5c <__reset+0xfb0f2c5c>
81112d6c:	b0800317 	ldw	r2,12(r22)
81112d70:	b0c00217 	ldw	r3,8(r22)
81112d74:	81bfff04 	addi	r6,r16,-4
81112d78:	01000904 	movi	r4,36
81112d7c:	18800315 	stw	r2,12(r3)
81112d80:	10c00215 	stw	r3,8(r2)
81112d84:	b4800204 	addi	r18,r22,8
81112d88:	21804336 	bltu	r4,r6,81112e98 <_realloc_r+0x508>
81112d8c:	008004c4 	movi	r2,19
81112d90:	11803f2e 	bgeu	r2,r6,81112e90 <_realloc_r+0x500>
81112d94:	a8800017 	ldw	r2,0(r21)
81112d98:	b0800215 	stw	r2,8(r22)
81112d9c:	a8800117 	ldw	r2,4(r21)
81112da0:	b0800315 	stw	r2,12(r22)
81112da4:	008006c4 	movi	r2,27
81112da8:	11803f36 	bltu	r2,r6,81112ea8 <_realloc_r+0x518>
81112dac:	b0800404 	addi	r2,r22,16
81112db0:	ad400204 	addi	r21,r21,8
81112db4:	a8c00017 	ldw	r3,0(r21)
81112db8:	10c00015 	stw	r3,0(r2)
81112dbc:	a8c00117 	ldw	r3,4(r21)
81112dc0:	10c00115 	stw	r3,4(r2)
81112dc4:	a8c00217 	ldw	r3,8(r21)
81112dc8:	10c00215 	stw	r3,8(r2)
81112dcc:	b447883a 	add	r3,r22,r17
81112dd0:	bc45c83a 	sub	r2,r23,r17
81112dd4:	e0c00215 	stw	r3,8(fp)
81112dd8:	10800054 	ori	r2,r2,1
81112ddc:	18800115 	stw	r2,4(r3)
81112de0:	b0800117 	ldw	r2,4(r22)
81112de4:	a009883a 	mov	r4,r20
81112de8:	1080004c 	andi	r2,r2,1
81112dec:	1462b03a 	or	r17,r2,r17
81112df0:	b4400115 	stw	r17,4(r22)
81112df4:	111860c0 	call	8111860c <__malloc_unlock>
81112df8:	9005883a 	mov	r2,r18
81112dfc:	003f4006 	br	81112b00 <__reset+0xfb0f2b00>
81112e00:	a8c00217 	ldw	r3,8(r21)
81112e04:	90c00215 	stw	r3,8(r18)
81112e08:	a8c00317 	ldw	r3,12(r21)
81112e0c:	90c00315 	stw	r3,12(r18)
81112e10:	30801126 	beq	r6,r2,81112e58 <_realloc_r+0x4c8>
81112e14:	90800404 	addi	r2,r18,16
81112e18:	a8c00404 	addi	r3,r21,16
81112e1c:	003f1906 	br	81112a84 <__reset+0xfb0f2a84>
81112e20:	90ffff17 	ldw	r3,-4(r18)
81112e24:	00bfff04 	movi	r2,-4
81112e28:	a825883a 	mov	r18,r21
81112e2c:	1884703a 	and	r2,r3,r2
81112e30:	80a1883a 	add	r16,r16,r2
81112e34:	003f2406 	br	81112ac8 <__reset+0xfb0f2ac8>
81112e38:	a8800217 	ldw	r2,8(r21)
81112e3c:	b0800415 	stw	r2,16(r22)
81112e40:	a8800317 	ldw	r2,12(r21)
81112e44:	b0800515 	stw	r2,20(r22)
81112e48:	31000a26 	beq	r6,r4,81112e74 <_realloc_r+0x4e4>
81112e4c:	b0800604 	addi	r2,r22,24
81112e50:	ad400404 	addi	r21,r21,16
81112e54:	003fa906 	br	81112cfc <__reset+0xfb0f2cfc>
81112e58:	a9000417 	ldw	r4,16(r21)
81112e5c:	90800604 	addi	r2,r18,24
81112e60:	a8c00604 	addi	r3,r21,24
81112e64:	91000415 	stw	r4,16(r18)
81112e68:	a9000517 	ldw	r4,20(r21)
81112e6c:	91000515 	stw	r4,20(r18)
81112e70:	003f0406 	br	81112a84 <__reset+0xfb0f2a84>
81112e74:	a8c00417 	ldw	r3,16(r21)
81112e78:	ad400604 	addi	r21,r21,24
81112e7c:	b0800804 	addi	r2,r22,32
81112e80:	b0c00615 	stw	r3,24(r22)
81112e84:	a8ffff17 	ldw	r3,-4(r21)
81112e88:	b0c00715 	stw	r3,28(r22)
81112e8c:	003f9b06 	br	81112cfc <__reset+0xfb0f2cfc>
81112e90:	9005883a 	mov	r2,r18
81112e94:	003fc706 	br	81112db4 <__reset+0xfb0f2db4>
81112e98:	a80b883a 	mov	r5,r21
81112e9c:	9009883a 	mov	r4,r18
81112ea0:	11115a80 	call	811115a8 <memmove>
81112ea4:	003fc906 	br	81112dcc <__reset+0xfb0f2dcc>
81112ea8:	a8800217 	ldw	r2,8(r21)
81112eac:	b0800415 	stw	r2,16(r22)
81112eb0:	a8800317 	ldw	r2,12(r21)
81112eb4:	b0800515 	stw	r2,20(r22)
81112eb8:	31000726 	beq	r6,r4,81112ed8 <_realloc_r+0x548>
81112ebc:	b0800604 	addi	r2,r22,24
81112ec0:	ad400404 	addi	r21,r21,16
81112ec4:	003fbb06 	br	81112db4 <__reset+0xfb0f2db4>
81112ec8:	a009883a 	mov	r4,r20
81112ecc:	111860c0 	call	8111860c <__malloc_unlock>
81112ed0:	0005883a 	mov	r2,zero
81112ed4:	003f0a06 	br	81112b00 <__reset+0xfb0f2b00>
81112ed8:	a8c00417 	ldw	r3,16(r21)
81112edc:	ad400604 	addi	r21,r21,24
81112ee0:	b0800804 	addi	r2,r22,32
81112ee4:	b0c00615 	stw	r3,24(r22)
81112ee8:	a8ffff17 	ldw	r3,-4(r21)
81112eec:	b0c00715 	stw	r3,28(r22)
81112ef0:	003fb006 	br	81112db4 <__reset+0xfb0f2db4>

81112ef4 <lflush>:
81112ef4:	2080030b 	ldhu	r2,12(r4)
81112ef8:	00c00244 	movi	r3,9
81112efc:	1080024c 	andi	r2,r2,9
81112f00:	10c00226 	beq	r2,r3,81112f0c <lflush+0x18>
81112f04:	0005883a 	mov	r2,zero
81112f08:	f800283a 	ret
81112f0c:	110fbd81 	jmpi	8110fbd8 <fflush>

81112f10 <__srefill_r>:
81112f10:	defffc04 	addi	sp,sp,-16
81112f14:	dc400115 	stw	r17,4(sp)
81112f18:	dc000015 	stw	r16,0(sp)
81112f1c:	dfc00315 	stw	ra,12(sp)
81112f20:	dc800215 	stw	r18,8(sp)
81112f24:	2023883a 	mov	r17,r4
81112f28:	2821883a 	mov	r16,r5
81112f2c:	20000226 	beq	r4,zero,81112f38 <__srefill_r+0x28>
81112f30:	20800e17 	ldw	r2,56(r4)
81112f34:	10003c26 	beq	r2,zero,81113028 <__srefill_r+0x118>
81112f38:	80c0030b 	ldhu	r3,12(r16)
81112f3c:	1908000c 	andi	r4,r3,8192
81112f40:	1805883a 	mov	r2,r3
81112f44:	2000071e 	bne	r4,zero,81112f64 <__srefill_r+0x54>
81112f48:	81001917 	ldw	r4,100(r16)
81112f4c:	18880014 	ori	r2,r3,8192
81112f50:	00f7ffc4 	movi	r3,-8193
81112f54:	20c8703a 	and	r4,r4,r3
81112f58:	8080030d 	sth	r2,12(r16)
81112f5c:	1007883a 	mov	r3,r2
81112f60:	81001915 	stw	r4,100(r16)
81112f64:	80000115 	stw	zero,4(r16)
81112f68:	1100080c 	andi	r4,r2,32
81112f6c:	2000571e 	bne	r4,zero,811130cc <__srefill_r+0x1bc>
81112f70:	1100010c 	andi	r4,r2,4
81112f74:	20001f26 	beq	r4,zero,81112ff4 <__srefill_r+0xe4>
81112f78:	81400c17 	ldw	r5,48(r16)
81112f7c:	28000826 	beq	r5,zero,81112fa0 <__srefill_r+0x90>
81112f80:	80801004 	addi	r2,r16,64
81112f84:	28800226 	beq	r5,r2,81112f90 <__srefill_r+0x80>
81112f88:	8809883a 	mov	r4,r17
81112f8c:	11100cc0 	call	811100cc <_free_r>
81112f90:	80800f17 	ldw	r2,60(r16)
81112f94:	80000c15 	stw	zero,48(r16)
81112f98:	80800115 	stw	r2,4(r16)
81112f9c:	1000391e 	bne	r2,zero,81113084 <__srefill_r+0x174>
81112fa0:	80800417 	ldw	r2,16(r16)
81112fa4:	10004b26 	beq	r2,zero,811130d4 <__srefill_r+0x1c4>
81112fa8:	8480030b 	ldhu	r18,12(r16)
81112fac:	908000cc 	andi	r2,r18,3
81112fb0:	10001f1e 	bne	r2,zero,81113030 <__srefill_r+0x120>
81112fb4:	81800417 	ldw	r6,16(r16)
81112fb8:	80800817 	ldw	r2,32(r16)
81112fbc:	81c00517 	ldw	r7,20(r16)
81112fc0:	81400717 	ldw	r5,28(r16)
81112fc4:	81800015 	stw	r6,0(r16)
81112fc8:	8809883a 	mov	r4,r17
81112fcc:	103ee83a 	callr	r2
81112fd0:	80800115 	stw	r2,4(r16)
81112fd4:	00800e0e 	bge	zero,r2,81113010 <__srefill_r+0x100>
81112fd8:	0005883a 	mov	r2,zero
81112fdc:	dfc00317 	ldw	ra,12(sp)
81112fe0:	dc800217 	ldw	r18,8(sp)
81112fe4:	dc400117 	ldw	r17,4(sp)
81112fe8:	dc000017 	ldw	r16,0(sp)
81112fec:	dec00404 	addi	sp,sp,16
81112ff0:	f800283a 	ret
81112ff4:	1100040c 	andi	r4,r2,16
81112ff8:	20003026 	beq	r4,zero,811130bc <__srefill_r+0x1ac>
81112ffc:	1080020c 	andi	r2,r2,8
81113000:	1000241e 	bne	r2,zero,81113094 <__srefill_r+0x184>
81113004:	18c00114 	ori	r3,r3,4
81113008:	80c0030d 	sth	r3,12(r16)
8111300c:	003fe406 	br	81112fa0 <__reset+0xfb0f2fa0>
81113010:	80c0030b 	ldhu	r3,12(r16)
81113014:	1000161e 	bne	r2,zero,81113070 <__srefill_r+0x160>
81113018:	18c00814 	ori	r3,r3,32
8111301c:	00bfffc4 	movi	r2,-1
81113020:	80c0030d 	sth	r3,12(r16)
81113024:	003fed06 	br	81112fdc <__reset+0xfb0f2fdc>
81113028:	110ff580 	call	8110ff58 <__sinit>
8111302c:	003fc206 	br	81112f38 <__reset+0xfb0f2f38>
81113030:	00a044b4 	movhi	r2,33042
81113034:	10819004 	addi	r2,r2,1600
81113038:	11000017 	ldw	r4,0(r2)
8111303c:	01604474 	movhi	r5,33041
81113040:	00800044 	movi	r2,1
81113044:	294bbd04 	addi	r5,r5,12020
81113048:	8080030d 	sth	r2,12(r16)
8111304c:	11108980 	call	81110898 <_fwalk>
81113050:	00800244 	movi	r2,9
81113054:	8480030d 	sth	r18,12(r16)
81113058:	9480024c 	andi	r18,r18,9
8111305c:	90bfd51e 	bne	r18,r2,81112fb4 <__reset+0xfb0f2fb4>
81113060:	800b883a 	mov	r5,r16
81113064:	8809883a 	mov	r4,r17
81113068:	110f9600 	call	8110f960 <__sflush_r>
8111306c:	003fd106 	br	81112fb4 <__reset+0xfb0f2fb4>
81113070:	18c01014 	ori	r3,r3,64
81113074:	80000115 	stw	zero,4(r16)
81113078:	00bfffc4 	movi	r2,-1
8111307c:	80c0030d 	sth	r3,12(r16)
81113080:	003fd606 	br	81112fdc <__reset+0xfb0f2fdc>
81113084:	80c00e17 	ldw	r3,56(r16)
81113088:	0005883a 	mov	r2,zero
8111308c:	80c00015 	stw	r3,0(r16)
81113090:	003fd206 	br	81112fdc <__reset+0xfb0f2fdc>
81113094:	800b883a 	mov	r5,r16
81113098:	8809883a 	mov	r4,r17
8111309c:	110fb7c0 	call	8110fb7c <_fflush_r>
811130a0:	10000a1e 	bne	r2,zero,811130cc <__srefill_r+0x1bc>
811130a4:	8080030b 	ldhu	r2,12(r16)
811130a8:	00fffdc4 	movi	r3,-9
811130ac:	80000215 	stw	zero,8(r16)
811130b0:	1886703a 	and	r3,r3,r2
811130b4:	80000615 	stw	zero,24(r16)
811130b8:	003fd206 	br	81113004 <__reset+0xfb0f3004>
811130bc:	00800244 	movi	r2,9
811130c0:	88800015 	stw	r2,0(r17)
811130c4:	18c01014 	ori	r3,r3,64
811130c8:	80c0030d 	sth	r3,12(r16)
811130cc:	00bfffc4 	movi	r2,-1
811130d0:	003fc206 	br	81112fdc <__reset+0xfb0f2fdc>
811130d4:	800b883a 	mov	r5,r16
811130d8:	8809883a 	mov	r4,r17
811130dc:	1110afc0 	call	81110afc <__smakebuf_r>
811130e0:	003fb106 	br	81112fa8 <__reset+0xfb0f2fa8>

811130e4 <__fpclassifyd>:
811130e4:	00a00034 	movhi	r2,32768
811130e8:	10bfffc4 	addi	r2,r2,-1
811130ec:	2884703a 	and	r2,r5,r2
811130f0:	10000726 	beq	r2,zero,81113110 <__fpclassifyd+0x2c>
811130f4:	00fffc34 	movhi	r3,65520
811130f8:	019ff834 	movhi	r6,32736
811130fc:	28c7883a 	add	r3,r5,r3
81113100:	31bfffc4 	addi	r6,r6,-1
81113104:	30c00536 	bltu	r6,r3,8111311c <__fpclassifyd+0x38>
81113108:	00800104 	movi	r2,4
8111310c:	f800283a 	ret
81113110:	2000021e 	bne	r4,zero,8111311c <__fpclassifyd+0x38>
81113114:	00800084 	movi	r2,2
81113118:	f800283a 	ret
8111311c:	00dffc34 	movhi	r3,32752
81113120:	019ff834 	movhi	r6,32736
81113124:	28cb883a 	add	r5,r5,r3
81113128:	31bfffc4 	addi	r6,r6,-1
8111312c:	317ff62e 	bgeu	r6,r5,81113108 <__reset+0xfb0f3108>
81113130:	01400434 	movhi	r5,16
81113134:	297fffc4 	addi	r5,r5,-1
81113138:	28800236 	bltu	r5,r2,81113144 <__fpclassifyd+0x60>
8111313c:	008000c4 	movi	r2,3
81113140:	f800283a 	ret
81113144:	10c00226 	beq	r2,r3,81113150 <__fpclassifyd+0x6c>
81113148:	0005883a 	mov	r2,zero
8111314c:	f800283a 	ret
81113150:	2005003a 	cmpeq	r2,r4,zero
81113154:	f800283a 	ret

81113158 <_sbrk_r>:
81113158:	defffd04 	addi	sp,sp,-12
8111315c:	dc000015 	stw	r16,0(sp)
81113160:	042044b4 	movhi	r16,33042
81113164:	dc400115 	stw	r17,4(sp)
81113168:	8401cb04 	addi	r16,r16,1836
8111316c:	2023883a 	mov	r17,r4
81113170:	2809883a 	mov	r4,r5
81113174:	dfc00215 	stw	ra,8(sp)
81113178:	80000015 	stw	zero,0(r16)
8111317c:	1118a340 	call	81118a34 <sbrk>
81113180:	00ffffc4 	movi	r3,-1
81113184:	10c00526 	beq	r2,r3,8111319c <_sbrk_r+0x44>
81113188:	dfc00217 	ldw	ra,8(sp)
8111318c:	dc400117 	ldw	r17,4(sp)
81113190:	dc000017 	ldw	r16,0(sp)
81113194:	dec00304 	addi	sp,sp,12
81113198:	f800283a 	ret
8111319c:	80c00017 	ldw	r3,0(r16)
811131a0:	183ff926 	beq	r3,zero,81113188 <__reset+0xfb0f3188>
811131a4:	88c00015 	stw	r3,0(r17)
811131a8:	003ff706 	br	81113188 <__reset+0xfb0f3188>

811131ac <__sread>:
811131ac:	defffe04 	addi	sp,sp,-8
811131b0:	dc000015 	stw	r16,0(sp)
811131b4:	2821883a 	mov	r16,r5
811131b8:	2940038f 	ldh	r5,14(r5)
811131bc:	dfc00115 	stw	ra,4(sp)
811131c0:	11150f80 	call	811150f8 <_read_r>
811131c4:	10000716 	blt	r2,zero,811131e4 <__sread+0x38>
811131c8:	80c01417 	ldw	r3,80(r16)
811131cc:	1887883a 	add	r3,r3,r2
811131d0:	80c01415 	stw	r3,80(r16)
811131d4:	dfc00117 	ldw	ra,4(sp)
811131d8:	dc000017 	ldw	r16,0(sp)
811131dc:	dec00204 	addi	sp,sp,8
811131e0:	f800283a 	ret
811131e4:	80c0030b 	ldhu	r3,12(r16)
811131e8:	18fbffcc 	andi	r3,r3,61439
811131ec:	80c0030d 	sth	r3,12(r16)
811131f0:	dfc00117 	ldw	ra,4(sp)
811131f4:	dc000017 	ldw	r16,0(sp)
811131f8:	dec00204 	addi	sp,sp,8
811131fc:	f800283a 	ret

81113200 <__seofread>:
81113200:	0005883a 	mov	r2,zero
81113204:	f800283a 	ret

81113208 <__swrite>:
81113208:	2880030b 	ldhu	r2,12(r5)
8111320c:	defffb04 	addi	sp,sp,-20
81113210:	dcc00315 	stw	r19,12(sp)
81113214:	dc800215 	stw	r18,8(sp)
81113218:	dc400115 	stw	r17,4(sp)
8111321c:	dc000015 	stw	r16,0(sp)
81113220:	dfc00415 	stw	ra,16(sp)
81113224:	10c0400c 	andi	r3,r2,256
81113228:	2821883a 	mov	r16,r5
8111322c:	2023883a 	mov	r17,r4
81113230:	3025883a 	mov	r18,r6
81113234:	3827883a 	mov	r19,r7
81113238:	18000526 	beq	r3,zero,81113250 <__swrite+0x48>
8111323c:	2940038f 	ldh	r5,14(r5)
81113240:	01c00084 	movi	r7,2
81113244:	000d883a 	mov	r6,zero
81113248:	11150980 	call	81115098 <_lseek_r>
8111324c:	8080030b 	ldhu	r2,12(r16)
81113250:	8140038f 	ldh	r5,14(r16)
81113254:	10bbffcc 	andi	r2,r2,61439
81113258:	980f883a 	mov	r7,r19
8111325c:	900d883a 	mov	r6,r18
81113260:	8809883a 	mov	r4,r17
81113264:	8080030d 	sth	r2,12(r16)
81113268:	dfc00417 	ldw	ra,16(sp)
8111326c:	dcc00317 	ldw	r19,12(sp)
81113270:	dc800217 	ldw	r18,8(sp)
81113274:	dc400117 	ldw	r17,4(sp)
81113278:	dc000017 	ldw	r16,0(sp)
8111327c:	dec00504 	addi	sp,sp,20
81113280:	1114b641 	jmpi	81114b64 <_write_r>

81113284 <__sseek>:
81113284:	defffe04 	addi	sp,sp,-8
81113288:	dc000015 	stw	r16,0(sp)
8111328c:	2821883a 	mov	r16,r5
81113290:	2940038f 	ldh	r5,14(r5)
81113294:	dfc00115 	stw	ra,4(sp)
81113298:	11150980 	call	81115098 <_lseek_r>
8111329c:	00ffffc4 	movi	r3,-1
811132a0:	10c00826 	beq	r2,r3,811132c4 <__sseek+0x40>
811132a4:	80c0030b 	ldhu	r3,12(r16)
811132a8:	80801415 	stw	r2,80(r16)
811132ac:	18c40014 	ori	r3,r3,4096
811132b0:	80c0030d 	sth	r3,12(r16)
811132b4:	dfc00117 	ldw	ra,4(sp)
811132b8:	dc000017 	ldw	r16,0(sp)
811132bc:	dec00204 	addi	sp,sp,8
811132c0:	f800283a 	ret
811132c4:	80c0030b 	ldhu	r3,12(r16)
811132c8:	18fbffcc 	andi	r3,r3,61439
811132cc:	80c0030d 	sth	r3,12(r16)
811132d0:	dfc00117 	ldw	ra,4(sp)
811132d4:	dc000017 	ldw	r16,0(sp)
811132d8:	dec00204 	addi	sp,sp,8
811132dc:	f800283a 	ret

811132e0 <__sclose>:
811132e0:	2940038f 	ldh	r5,14(r5)
811132e4:	1114bc41 	jmpi	81114bc4 <_close_r>

811132e8 <strcmp>:
811132e8:	2144b03a 	or	r2,r4,r5
811132ec:	108000cc 	andi	r2,r2,3
811132f0:	1000171e 	bne	r2,zero,81113350 <strcmp+0x68>
811132f4:	20800017 	ldw	r2,0(r4)
811132f8:	28c00017 	ldw	r3,0(r5)
811132fc:	10c0141e 	bne	r2,r3,81113350 <strcmp+0x68>
81113300:	027fbff4 	movhi	r9,65279
81113304:	4a7fbfc4 	addi	r9,r9,-257
81113308:	0086303a 	nor	r3,zero,r2
8111330c:	02202074 	movhi	r8,32897
81113310:	1245883a 	add	r2,r2,r9
81113314:	42202004 	addi	r8,r8,-32640
81113318:	10c4703a 	and	r2,r2,r3
8111331c:	1204703a 	and	r2,r2,r8
81113320:	10000226 	beq	r2,zero,8111332c <strcmp+0x44>
81113324:	00002306 	br	811133b4 <strcmp+0xcc>
81113328:	1000221e 	bne	r2,zero,811133b4 <strcmp+0xcc>
8111332c:	21000104 	addi	r4,r4,4
81113330:	20c00017 	ldw	r3,0(r4)
81113334:	29400104 	addi	r5,r5,4
81113338:	29800017 	ldw	r6,0(r5)
8111333c:	1a4f883a 	add	r7,r3,r9
81113340:	00c4303a 	nor	r2,zero,r3
81113344:	3884703a 	and	r2,r7,r2
81113348:	1204703a 	and	r2,r2,r8
8111334c:	19bff626 	beq	r3,r6,81113328 <__reset+0xfb0f3328>
81113350:	20800003 	ldbu	r2,0(r4)
81113354:	10c03fcc 	andi	r3,r2,255
81113358:	18c0201c 	xori	r3,r3,128
8111335c:	18ffe004 	addi	r3,r3,-128
81113360:	18000c26 	beq	r3,zero,81113394 <strcmp+0xac>
81113364:	29800007 	ldb	r6,0(r5)
81113368:	19800326 	beq	r3,r6,81113378 <strcmp+0x90>
8111336c:	00001306 	br	811133bc <strcmp+0xd4>
81113370:	29800007 	ldb	r6,0(r5)
81113374:	11800b1e 	bne	r2,r6,811133a4 <strcmp+0xbc>
81113378:	21000044 	addi	r4,r4,1
8111337c:	20c00003 	ldbu	r3,0(r4)
81113380:	29400044 	addi	r5,r5,1
81113384:	18803fcc 	andi	r2,r3,255
81113388:	1080201c 	xori	r2,r2,128
8111338c:	10bfe004 	addi	r2,r2,-128
81113390:	103ff71e 	bne	r2,zero,81113370 <__reset+0xfb0f3370>
81113394:	0007883a 	mov	r3,zero
81113398:	28800003 	ldbu	r2,0(r5)
8111339c:	1885c83a 	sub	r2,r3,r2
811133a0:	f800283a 	ret
811133a4:	28800003 	ldbu	r2,0(r5)
811133a8:	18c03fcc 	andi	r3,r3,255
811133ac:	1885c83a 	sub	r2,r3,r2
811133b0:	f800283a 	ret
811133b4:	0005883a 	mov	r2,zero
811133b8:	f800283a 	ret
811133bc:	10c03fcc 	andi	r3,r2,255
811133c0:	003ff506 	br	81113398 <__reset+0xfb0f3398>

811133c4 <__sprint_r.part.0>:
811133c4:	28801917 	ldw	r2,100(r5)
811133c8:	defff604 	addi	sp,sp,-40
811133cc:	dd400515 	stw	r21,20(sp)
811133d0:	dfc00915 	stw	ra,36(sp)
811133d4:	df000815 	stw	fp,32(sp)
811133d8:	ddc00715 	stw	r23,28(sp)
811133dc:	dd800615 	stw	r22,24(sp)
811133e0:	dd000415 	stw	r20,16(sp)
811133e4:	dcc00315 	stw	r19,12(sp)
811133e8:	dc800215 	stw	r18,8(sp)
811133ec:	dc400115 	stw	r17,4(sp)
811133f0:	dc000015 	stw	r16,0(sp)
811133f4:	1088000c 	andi	r2,r2,8192
811133f8:	302b883a 	mov	r21,r6
811133fc:	10002e26 	beq	r2,zero,811134b8 <__sprint_r.part.0+0xf4>
81113400:	30800217 	ldw	r2,8(r6)
81113404:	35800017 	ldw	r22,0(r6)
81113408:	10002926 	beq	r2,zero,811134b0 <__sprint_r.part.0+0xec>
8111340c:	2827883a 	mov	r19,r5
81113410:	2029883a 	mov	r20,r4
81113414:	b5c00104 	addi	r23,r22,4
81113418:	04bfffc4 	movi	r18,-1
8111341c:	bc400017 	ldw	r17,0(r23)
81113420:	b4000017 	ldw	r16,0(r22)
81113424:	0039883a 	mov	fp,zero
81113428:	8822d0ba 	srli	r17,r17,2
8111342c:	8800031e 	bne	r17,zero,8111343c <__sprint_r.part.0+0x78>
81113430:	00001806 	br	81113494 <__sprint_r.part.0+0xd0>
81113434:	84000104 	addi	r16,r16,4
81113438:	8f001526 	beq	r17,fp,81113490 <__sprint_r.part.0+0xcc>
8111343c:	81400017 	ldw	r5,0(r16)
81113440:	980d883a 	mov	r6,r19
81113444:	a009883a 	mov	r4,r20
81113448:	1114f440 	call	81114f44 <_fputwc_r>
8111344c:	e7000044 	addi	fp,fp,1
81113450:	14bff81e 	bne	r2,r18,81113434 <__reset+0xfb0f3434>
81113454:	9005883a 	mov	r2,r18
81113458:	a8000215 	stw	zero,8(r21)
8111345c:	a8000115 	stw	zero,4(r21)
81113460:	dfc00917 	ldw	ra,36(sp)
81113464:	df000817 	ldw	fp,32(sp)
81113468:	ddc00717 	ldw	r23,28(sp)
8111346c:	dd800617 	ldw	r22,24(sp)
81113470:	dd400517 	ldw	r21,20(sp)
81113474:	dd000417 	ldw	r20,16(sp)
81113478:	dcc00317 	ldw	r19,12(sp)
8111347c:	dc800217 	ldw	r18,8(sp)
81113480:	dc400117 	ldw	r17,4(sp)
81113484:	dc000017 	ldw	r16,0(sp)
81113488:	dec00a04 	addi	sp,sp,40
8111348c:	f800283a 	ret
81113490:	a8800217 	ldw	r2,8(r21)
81113494:	8c63883a 	add	r17,r17,r17
81113498:	8c63883a 	add	r17,r17,r17
8111349c:	1445c83a 	sub	r2,r2,r17
811134a0:	a8800215 	stw	r2,8(r21)
811134a4:	b5800204 	addi	r22,r22,8
811134a8:	bdc00204 	addi	r23,r23,8
811134ac:	103fdb1e 	bne	r2,zero,8111341c <__reset+0xfb0f341c>
811134b0:	0005883a 	mov	r2,zero
811134b4:	003fe806 	br	81113458 <__reset+0xfb0f3458>
811134b8:	11103dc0 	call	811103dc <__sfvwrite_r>
811134bc:	003fe606 	br	81113458 <__reset+0xfb0f3458>

811134c0 <__sprint_r>:
811134c0:	30c00217 	ldw	r3,8(r6)
811134c4:	18000126 	beq	r3,zero,811134cc <__sprint_r+0xc>
811134c8:	11133c41 	jmpi	811133c4 <__sprint_r.part.0>
811134cc:	30000115 	stw	zero,4(r6)
811134d0:	0005883a 	mov	r2,zero
811134d4:	f800283a 	ret

811134d8 <___vfiprintf_internal_r>:
811134d8:	deffc904 	addi	sp,sp,-220
811134dc:	df003515 	stw	fp,212(sp)
811134e0:	dd003115 	stw	r20,196(sp)
811134e4:	dfc03615 	stw	ra,216(sp)
811134e8:	ddc03415 	stw	r23,208(sp)
811134ec:	dd803315 	stw	r22,204(sp)
811134f0:	dd403215 	stw	r21,200(sp)
811134f4:	dcc03015 	stw	r19,192(sp)
811134f8:	dc802f15 	stw	r18,188(sp)
811134fc:	dc402e15 	stw	r17,184(sp)
81113500:	dc002d15 	stw	r16,180(sp)
81113504:	d9002015 	stw	r4,128(sp)
81113508:	d9c02215 	stw	r7,136(sp)
8111350c:	2829883a 	mov	r20,r5
81113510:	3039883a 	mov	fp,r6
81113514:	20000226 	beq	r4,zero,81113520 <___vfiprintf_internal_r+0x48>
81113518:	20800e17 	ldw	r2,56(r4)
8111351c:	1000cf26 	beq	r2,zero,8111385c <___vfiprintf_internal_r+0x384>
81113520:	a080030b 	ldhu	r2,12(r20)
81113524:	10c8000c 	andi	r3,r2,8192
81113528:	1800061e 	bne	r3,zero,81113544 <___vfiprintf_internal_r+0x6c>
8111352c:	a1001917 	ldw	r4,100(r20)
81113530:	00f7ffc4 	movi	r3,-8193
81113534:	10880014 	ori	r2,r2,8192
81113538:	20c6703a 	and	r3,r4,r3
8111353c:	a080030d 	sth	r2,12(r20)
81113540:	a0c01915 	stw	r3,100(r20)
81113544:	10c0020c 	andi	r3,r2,8
81113548:	1800a926 	beq	r3,zero,811137f0 <___vfiprintf_internal_r+0x318>
8111354c:	a0c00417 	ldw	r3,16(r20)
81113550:	1800a726 	beq	r3,zero,811137f0 <___vfiprintf_internal_r+0x318>
81113554:	1080068c 	andi	r2,r2,26
81113558:	00c00284 	movi	r3,10
8111355c:	10c0ac26 	beq	r2,r3,81113810 <___vfiprintf_internal_r+0x338>
81113560:	da801a04 	addi	r10,sp,104
81113564:	da801e15 	stw	r10,120(sp)
81113568:	d8801e17 	ldw	r2,120(sp)
8111356c:	da8019c4 	addi	r10,sp,103
81113570:	05a044b4 	movhi	r22,33042
81113574:	05e044b4 	movhi	r23,33042
81113578:	da801f15 	stw	r10,124(sp)
8111357c:	1295c83a 	sub	r10,r2,r10
81113580:	b5b9c504 	addi	r22,r22,-6380
81113584:	bdf9c104 	addi	r23,r23,-6396
81113588:	dec01a15 	stw	sp,104(sp)
8111358c:	d8001c15 	stw	zero,112(sp)
81113590:	d8001b15 	stw	zero,108(sp)
81113594:	d8002615 	stw	zero,152(sp)
81113598:	d8002315 	stw	zero,140(sp)
8111359c:	da802715 	stw	r10,156(sp)
811135a0:	d811883a 	mov	r8,sp
811135a4:	dd002115 	stw	r20,132(sp)
811135a8:	e021883a 	mov	r16,fp
811135ac:	80800007 	ldb	r2,0(r16)
811135b0:	1003ea26 	beq	r2,zero,8111455c <___vfiprintf_internal_r+0x1084>
811135b4:	00c00944 	movi	r3,37
811135b8:	8025883a 	mov	r18,r16
811135bc:	10c0021e 	bne	r2,r3,811135c8 <___vfiprintf_internal_r+0xf0>
811135c0:	00001606 	br	8111361c <___vfiprintf_internal_r+0x144>
811135c4:	10c00326 	beq	r2,r3,811135d4 <___vfiprintf_internal_r+0xfc>
811135c8:	94800044 	addi	r18,r18,1
811135cc:	90800007 	ldb	r2,0(r18)
811135d0:	103ffc1e 	bne	r2,zero,811135c4 <__reset+0xfb0f35c4>
811135d4:	9423c83a 	sub	r17,r18,r16
811135d8:	88001026 	beq	r17,zero,8111361c <___vfiprintf_internal_r+0x144>
811135dc:	d8c01c17 	ldw	r3,112(sp)
811135e0:	d8801b17 	ldw	r2,108(sp)
811135e4:	44000015 	stw	r16,0(r8)
811135e8:	88c7883a 	add	r3,r17,r3
811135ec:	10800044 	addi	r2,r2,1
811135f0:	44400115 	stw	r17,4(r8)
811135f4:	d8c01c15 	stw	r3,112(sp)
811135f8:	d8801b15 	stw	r2,108(sp)
811135fc:	010001c4 	movi	r4,7
81113600:	2080760e 	bge	r4,r2,811137dc <___vfiprintf_internal_r+0x304>
81113604:	1803821e 	bne	r3,zero,81114410 <___vfiprintf_internal_r+0xf38>
81113608:	da802317 	ldw	r10,140(sp)
8111360c:	d8001b15 	stw	zero,108(sp)
81113610:	d811883a 	mov	r8,sp
81113614:	5455883a 	add	r10,r10,r17
81113618:	da802315 	stw	r10,140(sp)
8111361c:	90800007 	ldb	r2,0(r18)
81113620:	10044626 	beq	r2,zero,8111473c <___vfiprintf_internal_r+0x1264>
81113624:	90c00047 	ldb	r3,1(r18)
81113628:	94000044 	addi	r16,r18,1
8111362c:	d8001d85 	stb	zero,118(sp)
81113630:	0009883a 	mov	r4,zero
81113634:	000f883a 	mov	r7,zero
81113638:	027fffc4 	movi	r9,-1
8111363c:	0023883a 	mov	r17,zero
81113640:	0029883a 	mov	r20,zero
81113644:	01401604 	movi	r5,88
81113648:	01800244 	movi	r6,9
8111364c:	03400a84 	movi	r13,42
81113650:	03001b04 	movi	r12,108
81113654:	84000044 	addi	r16,r16,1
81113658:	18bff804 	addi	r2,r3,-32
8111365c:	28827336 	bltu	r5,r2,8111402c <___vfiprintf_internal_r+0xb54>
81113660:	100490ba 	slli	r2,r2,2
81113664:	02a04474 	movhi	r10,33041
81113668:	528d9e04 	addi	r10,r10,13944
8111366c:	1285883a 	add	r2,r2,r10
81113670:	10800017 	ldw	r2,0(r2)
81113674:	1000683a 	jmp	r2
81113678:	81113d60 	cmpeqi	r4,r16,17653
8111367c:	8111402c 	andhi	r4,r16,17664
81113680:	8111402c 	andhi	r4,r16,17664
81113684:	81113d80 	call	881113d8 <__reset+0x20f13d8>
81113688:	8111402c 	andhi	r4,r16,17664
8111368c:	8111402c 	andhi	r4,r16,17664
81113690:	8111402c 	andhi	r4,r16,17664
81113694:	8111402c 	andhi	r4,r16,17664
81113698:	8111402c 	andhi	r4,r16,17664
8111369c:	8111402c 	andhi	r4,r16,17664
811136a0:	81113f68 	cmpgeui	r4,r16,17661
811136a4:	81113f84 	addi	r4,r16,17662
811136a8:	8111402c 	andhi	r4,r16,17664
811136ac:	8111386c 	andhi	r4,r16,17633
811136b0:	81113f94 	ori	r4,r16,17662
811136b4:	8111402c 	andhi	r4,r16,17664
811136b8:	81113d8c 	andi	r4,r16,17654
811136bc:	81113d98 	cmpnei	r4,r16,17654
811136c0:	81113d98 	cmpnei	r4,r16,17654
811136c4:	81113d98 	cmpnei	r4,r16,17654
811136c8:	81113d98 	cmpnei	r4,r16,17654
811136cc:	81113d98 	cmpnei	r4,r16,17654
811136d0:	81113d98 	cmpnei	r4,r16,17654
811136d4:	81113d98 	cmpnei	r4,r16,17654
811136d8:	81113d98 	cmpnei	r4,r16,17654
811136dc:	81113d98 	cmpnei	r4,r16,17654
811136e0:	8111402c 	andhi	r4,r16,17664
811136e4:	8111402c 	andhi	r4,r16,17664
811136e8:	8111402c 	andhi	r4,r16,17664
811136ec:	8111402c 	andhi	r4,r16,17664
811136f0:	8111402c 	andhi	r4,r16,17664
811136f4:	8111402c 	andhi	r4,r16,17664
811136f8:	8111402c 	andhi	r4,r16,17664
811136fc:	8111402c 	andhi	r4,r16,17664
81113700:	8111402c 	andhi	r4,r16,17664
81113704:	8111402c 	andhi	r4,r16,17664
81113708:	81113dc4 	addi	r4,r16,17655
8111370c:	8111402c 	andhi	r4,r16,17664
81113710:	8111402c 	andhi	r4,r16,17664
81113714:	8111402c 	andhi	r4,r16,17664
81113718:	8111402c 	andhi	r4,r16,17664
8111371c:	8111402c 	andhi	r4,r16,17664
81113720:	8111402c 	andhi	r4,r16,17664
81113724:	8111402c 	andhi	r4,r16,17664
81113728:	8111402c 	andhi	r4,r16,17664
8111372c:	8111402c 	andhi	r4,r16,17664
81113730:	8111402c 	andhi	r4,r16,17664
81113734:	81113dfc 	xorhi	r4,r16,17655
81113738:	8111402c 	andhi	r4,r16,17664
8111373c:	8111402c 	andhi	r4,r16,17664
81113740:	8111402c 	andhi	r4,r16,17664
81113744:	8111402c 	andhi	r4,r16,17664
81113748:	8111402c 	andhi	r4,r16,17664
8111374c:	81113e54 	ori	r4,r16,17657
81113750:	8111402c 	andhi	r4,r16,17664
81113754:	8111402c 	andhi	r4,r16,17664
81113758:	81113ec4 	addi	r4,r16,17659
8111375c:	8111402c 	andhi	r4,r16,17664
81113760:	8111402c 	andhi	r4,r16,17664
81113764:	8111402c 	andhi	r4,r16,17664
81113768:	8111402c 	andhi	r4,r16,17664
8111376c:	8111402c 	andhi	r4,r16,17664
81113770:	8111402c 	andhi	r4,r16,17664
81113774:	8111402c 	andhi	r4,r16,17664
81113778:	8111402c 	andhi	r4,r16,17664
8111377c:	8111402c 	andhi	r4,r16,17664
81113780:	8111402c 	andhi	r4,r16,17664
81113784:	81113c70 	cmpltui	r4,r16,17649
81113788:	81113c9c 	xori	r4,r16,17650
8111378c:	8111402c 	andhi	r4,r16,17664
81113790:	8111402c 	andhi	r4,r16,17664
81113794:	8111402c 	andhi	r4,r16,17664
81113798:	81113fd4 	ori	r4,r16,17663
8111379c:	81113c9c 	xori	r4,r16,17650
811137a0:	8111402c 	andhi	r4,r16,17664
811137a4:	8111402c 	andhi	r4,r16,17664
811137a8:	81113b30 	cmpltui	r4,r16,17644
811137ac:	8111402c 	andhi	r4,r16,17664
811137b0:	81113b40 	call	881113b4 <__reset+0x20f13b4>
811137b4:	81113b7c 	xorhi	r4,r16,17645
811137b8:	81113878 	rdprs	r4,r16,17633
811137bc:	81113b24 	muli	r4,r16,17644
811137c0:	8111402c 	andhi	r4,r16,17664
811137c4:	81113f00 	call	881113f0 <__reset+0x20f13f0>
811137c8:	8111402c 	andhi	r4,r16,17664
811137cc:	81113f58 	cmpnei	r4,r16,17661
811137d0:	8111402c 	andhi	r4,r16,17664
811137d4:	8111402c 	andhi	r4,r16,17664
811137d8:	81113c1c 	xori	r4,r16,17648
811137dc:	42000204 	addi	r8,r8,8
811137e0:	da802317 	ldw	r10,140(sp)
811137e4:	5455883a 	add	r10,r10,r17
811137e8:	da802315 	stw	r10,140(sp)
811137ec:	003f8b06 	br	8111361c <__reset+0xfb0f361c>
811137f0:	d9002017 	ldw	r4,128(sp)
811137f4:	a00b883a 	mov	r5,r20
811137f8:	110df840 	call	8110df84 <__swsetup_r>
811137fc:	1003b11e 	bne	r2,zero,811146c4 <___vfiprintf_internal_r+0x11ec>
81113800:	a080030b 	ldhu	r2,12(r20)
81113804:	00c00284 	movi	r3,10
81113808:	1080068c 	andi	r2,r2,26
8111380c:	10ff541e 	bne	r2,r3,81113560 <__reset+0xfb0f3560>
81113810:	a080038f 	ldh	r2,14(r20)
81113814:	103f5216 	blt	r2,zero,81113560 <__reset+0xfb0f3560>
81113818:	d9c02217 	ldw	r7,136(sp)
8111381c:	d9002017 	ldw	r4,128(sp)
81113820:	e00d883a 	mov	r6,fp
81113824:	a00b883a 	mov	r5,r20
81113828:	11149500 	call	81114950 <__sbprintf>
8111382c:	dfc03617 	ldw	ra,216(sp)
81113830:	df003517 	ldw	fp,212(sp)
81113834:	ddc03417 	ldw	r23,208(sp)
81113838:	dd803317 	ldw	r22,204(sp)
8111383c:	dd403217 	ldw	r21,200(sp)
81113840:	dd003117 	ldw	r20,196(sp)
81113844:	dcc03017 	ldw	r19,192(sp)
81113848:	dc802f17 	ldw	r18,188(sp)
8111384c:	dc402e17 	ldw	r17,184(sp)
81113850:	dc002d17 	ldw	r16,180(sp)
81113854:	dec03704 	addi	sp,sp,220
81113858:	f800283a 	ret
8111385c:	110ff580 	call	8110ff58 <__sinit>
81113860:	003f2f06 	br	81113520 <__reset+0xfb0f3520>
81113864:	0463c83a 	sub	r17,zero,r17
81113868:	d8802215 	stw	r2,136(sp)
8111386c:	a5000114 	ori	r20,r20,4
81113870:	80c00007 	ldb	r3,0(r16)
81113874:	003f7706 	br	81113654 <__reset+0xfb0f3654>
81113878:	00800c04 	movi	r2,48
8111387c:	da802217 	ldw	r10,136(sp)
81113880:	d8801d05 	stb	r2,116(sp)
81113884:	00801e04 	movi	r2,120
81113888:	d8801d45 	stb	r2,117(sp)
8111388c:	d8001d85 	stb	zero,118(sp)
81113890:	50c00104 	addi	r3,r10,4
81113894:	54800017 	ldw	r18,0(r10)
81113898:	0027883a 	mov	r19,zero
8111389c:	a0800094 	ori	r2,r20,2
811138a0:	48030b16 	blt	r9,zero,811144d0 <___vfiprintf_internal_r+0xff8>
811138a4:	00bfdfc4 	movi	r2,-129
811138a8:	a096703a 	and	r11,r20,r2
811138ac:	d8c02215 	stw	r3,136(sp)
811138b0:	5d000094 	ori	r20,r11,2
811138b4:	90032b1e 	bne	r18,zero,81114564 <___vfiprintf_internal_r+0x108c>
811138b8:	00a044b4 	movhi	r2,33042
811138bc:	10b96104 	addi	r2,r2,-6780
811138c0:	d8802615 	stw	r2,152(sp)
811138c4:	0039883a 	mov	fp,zero
811138c8:	48017b1e 	bne	r9,zero,81113eb8 <___vfiprintf_internal_r+0x9e0>
811138cc:	0013883a 	mov	r9,zero
811138d0:	0027883a 	mov	r19,zero
811138d4:	dd401a04 	addi	r21,sp,104
811138d8:	4825883a 	mov	r18,r9
811138dc:	4cc0010e 	bge	r9,r19,811138e4 <___vfiprintf_internal_r+0x40c>
811138e0:	9825883a 	mov	r18,r19
811138e4:	e7003fcc 	andi	fp,fp,255
811138e8:	e700201c 	xori	fp,fp,128
811138ec:	e73fe004 	addi	fp,fp,-128
811138f0:	e0000126 	beq	fp,zero,811138f8 <___vfiprintf_internal_r+0x420>
811138f4:	94800044 	addi	r18,r18,1
811138f8:	a380008c 	andi	r14,r20,2
811138fc:	70000126 	beq	r14,zero,81113904 <___vfiprintf_internal_r+0x42c>
81113900:	94800084 	addi	r18,r18,2
81113904:	a700210c 	andi	fp,r20,132
81113908:	e001df1e 	bne	fp,zero,81114088 <___vfiprintf_internal_r+0xbb0>
8111390c:	8c87c83a 	sub	r3,r17,r18
81113910:	00c1dd0e 	bge	zero,r3,81114088 <___vfiprintf_internal_r+0xbb0>
81113914:	01c00404 	movi	r7,16
81113918:	d8801c17 	ldw	r2,112(sp)
8111391c:	38c3ad0e 	bge	r7,r3,811147d4 <___vfiprintf_internal_r+0x12fc>
81113920:	02a044b4 	movhi	r10,33042
81113924:	52b9c504 	addi	r10,r10,-6380
81113928:	dc002915 	stw	r16,164(sp)
8111392c:	d9801b17 	ldw	r6,108(sp)
81113930:	da802415 	stw	r10,144(sp)
81113934:	03c001c4 	movi	r15,7
81113938:	da402515 	stw	r9,148(sp)
8111393c:	db802815 	stw	r14,160(sp)
81113940:	1821883a 	mov	r16,r3
81113944:	00000506 	br	8111395c <___vfiprintf_internal_r+0x484>
81113948:	31400084 	addi	r5,r6,2
8111394c:	42000204 	addi	r8,r8,8
81113950:	200d883a 	mov	r6,r4
81113954:	843ffc04 	addi	r16,r16,-16
81113958:	3c000d0e 	bge	r7,r16,81113990 <___vfiprintf_internal_r+0x4b8>
8111395c:	10800404 	addi	r2,r2,16
81113960:	31000044 	addi	r4,r6,1
81113964:	45800015 	stw	r22,0(r8)
81113968:	41c00115 	stw	r7,4(r8)
8111396c:	d8801c15 	stw	r2,112(sp)
81113970:	d9001b15 	stw	r4,108(sp)
81113974:	793ff40e 	bge	r15,r4,81113948 <__reset+0xfb0f3948>
81113978:	1001b51e 	bne	r2,zero,81114050 <___vfiprintf_internal_r+0xb78>
8111397c:	843ffc04 	addi	r16,r16,-16
81113980:	000d883a 	mov	r6,zero
81113984:	01400044 	movi	r5,1
81113988:	d811883a 	mov	r8,sp
8111398c:	3c3ff316 	blt	r7,r16,8111395c <__reset+0xfb0f395c>
81113990:	8007883a 	mov	r3,r16
81113994:	da402517 	ldw	r9,148(sp)
81113998:	db802817 	ldw	r14,160(sp)
8111399c:	dc002917 	ldw	r16,164(sp)
811139a0:	da802417 	ldw	r10,144(sp)
811139a4:	1885883a 	add	r2,r3,r2
811139a8:	40c00115 	stw	r3,4(r8)
811139ac:	42800015 	stw	r10,0(r8)
811139b0:	d8801c15 	stw	r2,112(sp)
811139b4:	d9401b15 	stw	r5,108(sp)
811139b8:	00c001c4 	movi	r3,7
811139bc:	19426016 	blt	r3,r5,81114340 <___vfiprintf_internal_r+0xe68>
811139c0:	d8c01d87 	ldb	r3,118(sp)
811139c4:	42000204 	addi	r8,r8,8
811139c8:	29000044 	addi	r4,r5,1
811139cc:	1801b31e 	bne	r3,zero,8111409c <___vfiprintf_internal_r+0xbc4>
811139d0:	7001c026 	beq	r14,zero,811140d4 <___vfiprintf_internal_r+0xbfc>
811139d4:	d8c01d04 	addi	r3,sp,116
811139d8:	10800084 	addi	r2,r2,2
811139dc:	40c00015 	stw	r3,0(r8)
811139e0:	00c00084 	movi	r3,2
811139e4:	40c00115 	stw	r3,4(r8)
811139e8:	d8801c15 	stw	r2,112(sp)
811139ec:	d9001b15 	stw	r4,108(sp)
811139f0:	00c001c4 	movi	r3,7
811139f4:	1902650e 	bge	r3,r4,8111438c <___vfiprintf_internal_r+0xeb4>
811139f8:	10029a1e 	bne	r2,zero,81114464 <___vfiprintf_internal_r+0xf8c>
811139fc:	00c02004 	movi	r3,128
81113a00:	01000044 	movi	r4,1
81113a04:	000b883a 	mov	r5,zero
81113a08:	d811883a 	mov	r8,sp
81113a0c:	e0c1b31e 	bne	fp,r3,811140dc <___vfiprintf_internal_r+0xc04>
81113a10:	8cb9c83a 	sub	fp,r17,r18
81113a14:	0701b10e 	bge	zero,fp,811140dc <___vfiprintf_internal_r+0xc04>
81113a18:	01c00404 	movi	r7,16
81113a1c:	3f03890e 	bge	r7,fp,81114844 <___vfiprintf_internal_r+0x136c>
81113a20:	00e044b4 	movhi	r3,33042
81113a24:	18f9c104 	addi	r3,r3,-6396
81113a28:	d8c02415 	stw	r3,144(sp)
81113a2c:	8007883a 	mov	r3,r16
81113a30:	034001c4 	movi	r13,7
81113a34:	e021883a 	mov	r16,fp
81113a38:	da402515 	stw	r9,148(sp)
81113a3c:	1839883a 	mov	fp,r3
81113a40:	00000506 	br	81113a58 <___vfiprintf_internal_r+0x580>
81113a44:	29800084 	addi	r6,r5,2
81113a48:	42000204 	addi	r8,r8,8
81113a4c:	180b883a 	mov	r5,r3
81113a50:	843ffc04 	addi	r16,r16,-16
81113a54:	3c000d0e 	bge	r7,r16,81113a8c <___vfiprintf_internal_r+0x5b4>
81113a58:	10800404 	addi	r2,r2,16
81113a5c:	28c00044 	addi	r3,r5,1
81113a60:	45c00015 	stw	r23,0(r8)
81113a64:	41c00115 	stw	r7,4(r8)
81113a68:	d8801c15 	stw	r2,112(sp)
81113a6c:	d8c01b15 	stw	r3,108(sp)
81113a70:	68fff40e 	bge	r13,r3,81113a44 <__reset+0xfb0f3a44>
81113a74:	1002241e 	bne	r2,zero,81114308 <___vfiprintf_internal_r+0xe30>
81113a78:	843ffc04 	addi	r16,r16,-16
81113a7c:	01800044 	movi	r6,1
81113a80:	000b883a 	mov	r5,zero
81113a84:	d811883a 	mov	r8,sp
81113a88:	3c3ff316 	blt	r7,r16,81113a58 <__reset+0xfb0f3a58>
81113a8c:	da402517 	ldw	r9,148(sp)
81113a90:	e007883a 	mov	r3,fp
81113a94:	8039883a 	mov	fp,r16
81113a98:	1821883a 	mov	r16,r3
81113a9c:	d8c02417 	ldw	r3,144(sp)
81113aa0:	1705883a 	add	r2,r2,fp
81113aa4:	47000115 	stw	fp,4(r8)
81113aa8:	40c00015 	stw	r3,0(r8)
81113aac:	d8801c15 	stw	r2,112(sp)
81113ab0:	d9801b15 	stw	r6,108(sp)
81113ab4:	00c001c4 	movi	r3,7
81113ab8:	19827616 	blt	r3,r6,81114494 <___vfiprintf_internal_r+0xfbc>
81113abc:	4cf9c83a 	sub	fp,r9,r19
81113ac0:	42000204 	addi	r8,r8,8
81113ac4:	31000044 	addi	r4,r6,1
81113ac8:	300b883a 	mov	r5,r6
81113acc:	07018516 	blt	zero,fp,811140e4 <___vfiprintf_internal_r+0xc0c>
81113ad0:	9885883a 	add	r2,r19,r2
81113ad4:	45400015 	stw	r21,0(r8)
81113ad8:	44c00115 	stw	r19,4(r8)
81113adc:	d8801c15 	stw	r2,112(sp)
81113ae0:	d9001b15 	stw	r4,108(sp)
81113ae4:	00c001c4 	movi	r3,7
81113ae8:	1901dd0e 	bge	r3,r4,81114260 <___vfiprintf_internal_r+0xd88>
81113aec:	1002401e 	bne	r2,zero,811143f0 <___vfiprintf_internal_r+0xf18>
81113af0:	d8001b15 	stw	zero,108(sp)
81113af4:	a2c0010c 	andi	r11,r20,4
81113af8:	58000226 	beq	r11,zero,81113b04 <___vfiprintf_internal_r+0x62c>
81113afc:	8ca7c83a 	sub	r19,r17,r18
81113b00:	04c2f216 	blt	zero,r19,811146cc <___vfiprintf_internal_r+0x11f4>
81113b04:	8c80010e 	bge	r17,r18,81113b0c <___vfiprintf_internal_r+0x634>
81113b08:	9023883a 	mov	r17,r18
81113b0c:	da802317 	ldw	r10,140(sp)
81113b10:	5455883a 	add	r10,r10,r17
81113b14:	da802315 	stw	r10,140(sp)
81113b18:	d8001b15 	stw	zero,108(sp)
81113b1c:	d811883a 	mov	r8,sp
81113b20:	003ea206 	br	811135ac <__reset+0xfb0f35ac>
81113b24:	a5000814 	ori	r20,r20,32
81113b28:	80c00007 	ldb	r3,0(r16)
81113b2c:	003ec906 	br	81113654 <__reset+0xfb0f3654>
81113b30:	80c00007 	ldb	r3,0(r16)
81113b34:	1b030926 	beq	r3,r12,8111475c <___vfiprintf_internal_r+0x1284>
81113b38:	a5000414 	ori	r20,r20,16
81113b3c:	003ec506 	br	81113654 <__reset+0xfb0f3654>
81113b40:	21003fcc 	andi	r4,r4,255
81113b44:	20035e1e 	bne	r4,zero,811148c0 <___vfiprintf_internal_r+0x13e8>
81113b48:	a080080c 	andi	r2,r20,32
81113b4c:	1002a526 	beq	r2,zero,811145e4 <___vfiprintf_internal_r+0x110c>
81113b50:	da802217 	ldw	r10,136(sp)
81113b54:	50800017 	ldw	r2,0(r10)
81113b58:	da802317 	ldw	r10,140(sp)
81113b5c:	5007d7fa 	srai	r3,r10,31
81113b60:	da802217 	ldw	r10,136(sp)
81113b64:	10c00115 	stw	r3,4(r2)
81113b68:	52800104 	addi	r10,r10,4
81113b6c:	da802215 	stw	r10,136(sp)
81113b70:	da802317 	ldw	r10,140(sp)
81113b74:	12800015 	stw	r10,0(r2)
81113b78:	003e8c06 	br	811135ac <__reset+0xfb0f35ac>
81113b7c:	21003fcc 	andi	r4,r4,255
81113b80:	2003511e 	bne	r4,zero,811148c8 <___vfiprintf_internal_r+0x13f0>
81113b84:	a080080c 	andi	r2,r20,32
81113b88:	1000a126 	beq	r2,zero,81113e10 <___vfiprintf_internal_r+0x938>
81113b8c:	da802217 	ldw	r10,136(sp)
81113b90:	d8001d85 	stb	zero,118(sp)
81113b94:	50800204 	addi	r2,r10,8
81113b98:	54800017 	ldw	r18,0(r10)
81113b9c:	54c00117 	ldw	r19,4(r10)
81113ba0:	4802b416 	blt	r9,zero,81114674 <___vfiprintf_internal_r+0x119c>
81113ba4:	013fdfc4 	movi	r4,-129
81113ba8:	94c6b03a 	or	r3,r18,r19
81113bac:	d8802215 	stw	r2,136(sp)
81113bb0:	a128703a 	and	r20,r20,r4
81113bb4:	1800a226 	beq	r3,zero,81113e40 <___vfiprintf_internal_r+0x968>
81113bb8:	0039883a 	mov	fp,zero
81113bbc:	dd401a04 	addi	r21,sp,104
81113bc0:	9006d0fa 	srli	r3,r18,3
81113bc4:	9808977a 	slli	r4,r19,29
81113bc8:	9826d0fa 	srli	r19,r19,3
81113bcc:	948001cc 	andi	r18,r18,7
81113bd0:	90800c04 	addi	r2,r18,48
81113bd4:	ad7fffc4 	addi	r21,r21,-1
81113bd8:	20e4b03a 	or	r18,r4,r3
81113bdc:	a8800005 	stb	r2,0(r21)
81113be0:	94c6b03a 	or	r3,r18,r19
81113be4:	183ff61e 	bne	r3,zero,81113bc0 <__reset+0xfb0f3bc0>
81113be8:	a0c0004c 	andi	r3,r20,1
81113bec:	18005926 	beq	r3,zero,81113d54 <___vfiprintf_internal_r+0x87c>
81113bf0:	10803fcc 	andi	r2,r2,255
81113bf4:	1080201c 	xori	r2,r2,128
81113bf8:	10bfe004 	addi	r2,r2,-128
81113bfc:	00c00c04 	movi	r3,48
81113c00:	10c05426 	beq	r2,r3,81113d54 <___vfiprintf_internal_r+0x87c>
81113c04:	da801e17 	ldw	r10,120(sp)
81113c08:	a8bfffc4 	addi	r2,r21,-1
81113c0c:	a8ffffc5 	stb	r3,-1(r21)
81113c10:	50a7c83a 	sub	r19,r10,r2
81113c14:	102b883a 	mov	r21,r2
81113c18:	003f2f06 	br	811138d8 <__reset+0xfb0f38d8>
81113c1c:	21003fcc 	andi	r4,r4,255
81113c20:	2003421e 	bne	r4,zero,8111492c <___vfiprintf_internal_r+0x1454>
81113c24:	00a044b4 	movhi	r2,33042
81113c28:	10b96104 	addi	r2,r2,-6780
81113c2c:	d8802615 	stw	r2,152(sp)
81113c30:	a080080c 	andi	r2,r20,32
81113c34:	1000aa26 	beq	r2,zero,81113ee0 <___vfiprintf_internal_r+0xa08>
81113c38:	da802217 	ldw	r10,136(sp)
81113c3c:	54800017 	ldw	r18,0(r10)
81113c40:	54c00117 	ldw	r19,4(r10)
81113c44:	52800204 	addi	r10,r10,8
81113c48:	da802215 	stw	r10,136(sp)
81113c4c:	a080004c 	andi	r2,r20,1
81113c50:	1001d226 	beq	r2,zero,8111439c <___vfiprintf_internal_r+0xec4>
81113c54:	94c4b03a 	or	r2,r18,r19
81113c58:	1002351e 	bne	r2,zero,81114530 <___vfiprintf_internal_r+0x1058>
81113c5c:	d8001d85 	stb	zero,118(sp)
81113c60:	48022216 	blt	r9,zero,811144ec <___vfiprintf_internal_r+0x1014>
81113c64:	00bfdfc4 	movi	r2,-129
81113c68:	a0a8703a 	and	r20,r20,r2
81113c6c:	003f1506 	br	811138c4 <__reset+0xfb0f38c4>
81113c70:	da802217 	ldw	r10,136(sp)
81113c74:	04800044 	movi	r18,1
81113c78:	d8001d85 	stb	zero,118(sp)
81113c7c:	50800017 	ldw	r2,0(r10)
81113c80:	52800104 	addi	r10,r10,4
81113c84:	da802215 	stw	r10,136(sp)
81113c88:	d8801005 	stb	r2,64(sp)
81113c8c:	9027883a 	mov	r19,r18
81113c90:	dd401004 	addi	r21,sp,64
81113c94:	0013883a 	mov	r9,zero
81113c98:	003f1706 	br	811138f8 <__reset+0xfb0f38f8>
81113c9c:	21003fcc 	andi	r4,r4,255
81113ca0:	2003201e 	bne	r4,zero,81114924 <___vfiprintf_internal_r+0x144c>
81113ca4:	a080080c 	andi	r2,r20,32
81113ca8:	10004b26 	beq	r2,zero,81113dd8 <___vfiprintf_internal_r+0x900>
81113cac:	da802217 	ldw	r10,136(sp)
81113cb0:	50800117 	ldw	r2,4(r10)
81113cb4:	54800017 	ldw	r18,0(r10)
81113cb8:	52800204 	addi	r10,r10,8
81113cbc:	da802215 	stw	r10,136(sp)
81113cc0:	1027883a 	mov	r19,r2
81113cc4:	10022c16 	blt	r2,zero,81114578 <___vfiprintf_internal_r+0x10a0>
81113cc8:	df001d83 	ldbu	fp,118(sp)
81113ccc:	48007216 	blt	r9,zero,81113e98 <___vfiprintf_internal_r+0x9c0>
81113cd0:	00ffdfc4 	movi	r3,-129
81113cd4:	94c4b03a 	or	r2,r18,r19
81113cd8:	a0e8703a 	and	r20,r20,r3
81113cdc:	1000cc26 	beq	r2,zero,81114010 <___vfiprintf_internal_r+0xb38>
81113ce0:	98021026 	beq	r19,zero,81114524 <___vfiprintf_internal_r+0x104c>
81113ce4:	dc402415 	stw	r17,144(sp)
81113ce8:	dc002515 	stw	r16,148(sp)
81113cec:	9823883a 	mov	r17,r19
81113cf0:	9021883a 	mov	r16,r18
81113cf4:	dd401a04 	addi	r21,sp,104
81113cf8:	4825883a 	mov	r18,r9
81113cfc:	4027883a 	mov	r19,r8
81113d00:	8009883a 	mov	r4,r16
81113d04:	880b883a 	mov	r5,r17
81113d08:	01800284 	movi	r6,10
81113d0c:	000f883a 	mov	r7,zero
81113d10:	11158b80 	call	811158b8 <__umoddi3>
81113d14:	10800c04 	addi	r2,r2,48
81113d18:	ad7fffc4 	addi	r21,r21,-1
81113d1c:	8009883a 	mov	r4,r16
81113d20:	880b883a 	mov	r5,r17
81113d24:	a8800005 	stb	r2,0(r21)
81113d28:	01800284 	movi	r6,10
81113d2c:	000f883a 	mov	r7,zero
81113d30:	11153400 	call	81115340 <__udivdi3>
81113d34:	1021883a 	mov	r16,r2
81113d38:	10c4b03a 	or	r2,r2,r3
81113d3c:	1823883a 	mov	r17,r3
81113d40:	103fef1e 	bne	r2,zero,81113d00 <__reset+0xfb0f3d00>
81113d44:	dc402417 	ldw	r17,144(sp)
81113d48:	dc002517 	ldw	r16,148(sp)
81113d4c:	9013883a 	mov	r9,r18
81113d50:	9811883a 	mov	r8,r19
81113d54:	da801e17 	ldw	r10,120(sp)
81113d58:	5567c83a 	sub	r19,r10,r21
81113d5c:	003ede06 	br	811138d8 <__reset+0xfb0f38d8>
81113d60:	38803fcc 	andi	r2,r7,255
81113d64:	1080201c 	xori	r2,r2,128
81113d68:	10bfe004 	addi	r2,r2,-128
81113d6c:	1002371e 	bne	r2,zero,8111464c <___vfiprintf_internal_r+0x1174>
81113d70:	01000044 	movi	r4,1
81113d74:	01c00804 	movi	r7,32
81113d78:	80c00007 	ldb	r3,0(r16)
81113d7c:	003e3506 	br	81113654 <__reset+0xfb0f3654>
81113d80:	a5000054 	ori	r20,r20,1
81113d84:	80c00007 	ldb	r3,0(r16)
81113d88:	003e3206 	br	81113654 <__reset+0xfb0f3654>
81113d8c:	a5002014 	ori	r20,r20,128
81113d90:	80c00007 	ldb	r3,0(r16)
81113d94:	003e2f06 	br	81113654 <__reset+0xfb0f3654>
81113d98:	8015883a 	mov	r10,r16
81113d9c:	0023883a 	mov	r17,zero
81113da0:	18bff404 	addi	r2,r3,-48
81113da4:	50c00007 	ldb	r3,0(r10)
81113da8:	8c4002a4 	muli	r17,r17,10
81113dac:	84000044 	addi	r16,r16,1
81113db0:	8015883a 	mov	r10,r16
81113db4:	1463883a 	add	r17,r2,r17
81113db8:	18bff404 	addi	r2,r3,-48
81113dbc:	30bff92e 	bgeu	r6,r2,81113da4 <__reset+0xfb0f3da4>
81113dc0:	003e2506 	br	81113658 <__reset+0xfb0f3658>
81113dc4:	21003fcc 	andi	r4,r4,255
81113dc8:	2002d41e 	bne	r4,zero,8111491c <___vfiprintf_internal_r+0x1444>
81113dcc:	a5000414 	ori	r20,r20,16
81113dd0:	a080080c 	andi	r2,r20,32
81113dd4:	103fb51e 	bne	r2,zero,81113cac <__reset+0xfb0f3cac>
81113dd8:	a080040c 	andi	r2,r20,16
81113ddc:	1001f826 	beq	r2,zero,811145c0 <___vfiprintf_internal_r+0x10e8>
81113de0:	da802217 	ldw	r10,136(sp)
81113de4:	54800017 	ldw	r18,0(r10)
81113de8:	52800104 	addi	r10,r10,4
81113dec:	da802215 	stw	r10,136(sp)
81113df0:	9027d7fa 	srai	r19,r18,31
81113df4:	9805883a 	mov	r2,r19
81113df8:	003fb206 	br	81113cc4 <__reset+0xfb0f3cc4>
81113dfc:	21003fcc 	andi	r4,r4,255
81113e00:	2002c41e 	bne	r4,zero,81114914 <___vfiprintf_internal_r+0x143c>
81113e04:	a5000414 	ori	r20,r20,16
81113e08:	a080080c 	andi	r2,r20,32
81113e0c:	103f5f1e 	bne	r2,zero,81113b8c <__reset+0xfb0f3b8c>
81113e10:	a080040c 	andi	r2,r20,16
81113e14:	10020f26 	beq	r2,zero,81114654 <___vfiprintf_internal_r+0x117c>
81113e18:	da802217 	ldw	r10,136(sp)
81113e1c:	d8001d85 	stb	zero,118(sp)
81113e20:	0027883a 	mov	r19,zero
81113e24:	50800104 	addi	r2,r10,4
81113e28:	54800017 	ldw	r18,0(r10)
81113e2c:	48021116 	blt	r9,zero,81114674 <___vfiprintf_internal_r+0x119c>
81113e30:	00ffdfc4 	movi	r3,-129
81113e34:	d8802215 	stw	r2,136(sp)
81113e38:	a0e8703a 	and	r20,r20,r3
81113e3c:	903f5e1e 	bne	r18,zero,81113bb8 <__reset+0xfb0f3bb8>
81113e40:	0039883a 	mov	fp,zero
81113e44:	4802a626 	beq	r9,zero,811148e0 <___vfiprintf_internal_r+0x1408>
81113e48:	0025883a 	mov	r18,zero
81113e4c:	0027883a 	mov	r19,zero
81113e50:	003f5a06 	br	81113bbc <__reset+0xfb0f3bbc>
81113e54:	21003fcc 	andi	r4,r4,255
81113e58:	20029f1e 	bne	r4,zero,811148d8 <___vfiprintf_internal_r+0x1400>
81113e5c:	a5000414 	ori	r20,r20,16
81113e60:	a080080c 	andi	r2,r20,32
81113e64:	10005e1e 	bne	r2,zero,81113fe0 <___vfiprintf_internal_r+0xb08>
81113e68:	a080040c 	andi	r2,r20,16
81113e6c:	1001a21e 	bne	r2,zero,811144f8 <___vfiprintf_internal_r+0x1020>
81113e70:	a080100c 	andi	r2,r20,64
81113e74:	d8001d85 	stb	zero,118(sp)
81113e78:	da802217 	ldw	r10,136(sp)
81113e7c:	1002231e 	bne	r2,zero,8111470c <___vfiprintf_internal_r+0x1234>
81113e80:	50800104 	addi	r2,r10,4
81113e84:	54800017 	ldw	r18,0(r10)
81113e88:	0027883a 	mov	r19,zero
81113e8c:	4801a00e 	bge	r9,zero,81114510 <___vfiprintf_internal_r+0x1038>
81113e90:	d8802215 	stw	r2,136(sp)
81113e94:	0039883a 	mov	fp,zero
81113e98:	94c4b03a 	or	r2,r18,r19
81113e9c:	103f901e 	bne	r2,zero,81113ce0 <__reset+0xfb0f3ce0>
81113ea0:	00800044 	movi	r2,1
81113ea4:	10803fcc 	andi	r2,r2,255
81113ea8:	00c00044 	movi	r3,1
81113eac:	10c05926 	beq	r2,r3,81114014 <___vfiprintf_internal_r+0xb3c>
81113eb0:	00c00084 	movi	r3,2
81113eb4:	10ffe41e 	bne	r2,r3,81113e48 <__reset+0xfb0f3e48>
81113eb8:	0025883a 	mov	r18,zero
81113ebc:	0027883a 	mov	r19,zero
81113ec0:	00013d06 	br	811143b8 <___vfiprintf_internal_r+0xee0>
81113ec4:	21003fcc 	andi	r4,r4,255
81113ec8:	2002811e 	bne	r4,zero,811148d0 <___vfiprintf_internal_r+0x13f8>
81113ecc:	00a044b4 	movhi	r2,33042
81113ed0:	10b95c04 	addi	r2,r2,-6800
81113ed4:	d8802615 	stw	r2,152(sp)
81113ed8:	a080080c 	andi	r2,r20,32
81113edc:	103f561e 	bne	r2,zero,81113c38 <__reset+0xfb0f3c38>
81113ee0:	a080040c 	andi	r2,r20,16
81113ee4:	1001d126 	beq	r2,zero,8111462c <___vfiprintf_internal_r+0x1154>
81113ee8:	da802217 	ldw	r10,136(sp)
81113eec:	0027883a 	mov	r19,zero
81113ef0:	54800017 	ldw	r18,0(r10)
81113ef4:	52800104 	addi	r10,r10,4
81113ef8:	da802215 	stw	r10,136(sp)
81113efc:	003f5306 	br	81113c4c <__reset+0xfb0f3c4c>
81113f00:	da802217 	ldw	r10,136(sp)
81113f04:	d8001d85 	stb	zero,118(sp)
81113f08:	55400017 	ldw	r21,0(r10)
81113f0c:	50c00104 	addi	r3,r10,4
81113f10:	a8024226 	beq	r21,zero,8111481c <___vfiprintf_internal_r+0x1344>
81113f14:	48021816 	blt	r9,zero,81114778 <___vfiprintf_internal_r+0x12a0>
81113f18:	480d883a 	mov	r6,r9
81113f1c:	000b883a 	mov	r5,zero
81113f20:	a809883a 	mov	r4,r21
81113f24:	d8c02a15 	stw	r3,168(sp)
81113f28:	da002b15 	stw	r8,172(sp)
81113f2c:	da402c15 	stw	r9,176(sp)
81113f30:	11114c40 	call	811114c4 <memchr>
81113f34:	d8c02a17 	ldw	r3,168(sp)
81113f38:	da002b17 	ldw	r8,172(sp)
81113f3c:	da402c17 	ldw	r9,176(sp)
81113f40:	10024826 	beq	r2,zero,81114864 <___vfiprintf_internal_r+0x138c>
81113f44:	1567c83a 	sub	r19,r2,r21
81113f48:	df001d83 	ldbu	fp,118(sp)
81113f4c:	d8c02215 	stw	r3,136(sp)
81113f50:	0013883a 	mov	r9,zero
81113f54:	003e6006 	br	811138d8 <__reset+0xfb0f38d8>
81113f58:	21003fcc 	andi	r4,r4,255
81113f5c:	203fc026 	beq	r4,zero,81113e60 <__reset+0xfb0f3e60>
81113f60:	d9c01d85 	stb	r7,118(sp)
81113f64:	003fbe06 	br	81113e60 <__reset+0xfb0f3e60>
81113f68:	da802217 	ldw	r10,136(sp)
81113f6c:	54400017 	ldw	r17,0(r10)
81113f70:	50800104 	addi	r2,r10,4
81113f74:	883e3b16 	blt	r17,zero,81113864 <__reset+0xfb0f3864>
81113f78:	d8802215 	stw	r2,136(sp)
81113f7c:	80c00007 	ldb	r3,0(r16)
81113f80:	003db406 	br	81113654 <__reset+0xfb0f3654>
81113f84:	01000044 	movi	r4,1
81113f88:	01c00ac4 	movi	r7,43
81113f8c:	80c00007 	ldb	r3,0(r16)
81113f90:	003db006 	br	81113654 <__reset+0xfb0f3654>
81113f94:	80c00007 	ldb	r3,0(r16)
81113f98:	82800044 	addi	r10,r16,1
81113f9c:	1b423c26 	beq	r3,r13,81114890 <___vfiprintf_internal_r+0x13b8>
81113fa0:	18bff404 	addi	r2,r3,-48
81113fa4:	0013883a 	mov	r9,zero
81113fa8:	30822b36 	bltu	r6,r2,81114858 <___vfiprintf_internal_r+0x1380>
81113fac:	50c00007 	ldb	r3,0(r10)
81113fb0:	4a4002a4 	muli	r9,r9,10
81113fb4:	54000044 	addi	r16,r10,1
81113fb8:	8015883a 	mov	r10,r16
81113fbc:	4893883a 	add	r9,r9,r2
81113fc0:	18bff404 	addi	r2,r3,-48
81113fc4:	30bff92e 	bgeu	r6,r2,81113fac <__reset+0xfb0f3fac>
81113fc8:	483da30e 	bge	r9,zero,81113658 <__reset+0xfb0f3658>
81113fcc:	027fffc4 	movi	r9,-1
81113fd0:	003da106 	br	81113658 <__reset+0xfb0f3658>
81113fd4:	a5001014 	ori	r20,r20,64
81113fd8:	80c00007 	ldb	r3,0(r16)
81113fdc:	003d9d06 	br	81113654 <__reset+0xfb0f3654>
81113fe0:	da802217 	ldw	r10,136(sp)
81113fe4:	d8001d85 	stb	zero,118(sp)
81113fe8:	50c00204 	addi	r3,r10,8
81113fec:	54800017 	ldw	r18,0(r10)
81113ff0:	54c00117 	ldw	r19,4(r10)
81113ff4:	4801ca16 	blt	r9,zero,81114720 <___vfiprintf_internal_r+0x1248>
81113ff8:	013fdfc4 	movi	r4,-129
81113ffc:	94c4b03a 	or	r2,r18,r19
81114000:	d8c02215 	stw	r3,136(sp)
81114004:	a128703a 	and	r20,r20,r4
81114008:	0039883a 	mov	fp,zero
8111400c:	103f341e 	bne	r2,zero,81113ce0 <__reset+0xfb0f3ce0>
81114010:	483e2e26 	beq	r9,zero,811138cc <__reset+0xfb0f38cc>
81114014:	0025883a 	mov	r18,zero
81114018:	94800c04 	addi	r18,r18,48
8111401c:	dc8019c5 	stb	r18,103(sp)
81114020:	dcc02717 	ldw	r19,156(sp)
81114024:	dd4019c4 	addi	r21,sp,103
81114028:	003e2b06 	br	811138d8 <__reset+0xfb0f38d8>
8111402c:	21003fcc 	andi	r4,r4,255
81114030:	2002361e 	bne	r4,zero,8111490c <___vfiprintf_internal_r+0x1434>
81114034:	1801c126 	beq	r3,zero,8111473c <___vfiprintf_internal_r+0x1264>
81114038:	04800044 	movi	r18,1
8111403c:	d8c01005 	stb	r3,64(sp)
81114040:	d8001d85 	stb	zero,118(sp)
81114044:	9027883a 	mov	r19,r18
81114048:	dd401004 	addi	r21,sp,64
8111404c:	003f1106 	br	81113c94 <__reset+0xfb0f3c94>
81114050:	d9402117 	ldw	r5,132(sp)
81114054:	d9002017 	ldw	r4,128(sp)
81114058:	d9801a04 	addi	r6,sp,104
8111405c:	d9c02b15 	stw	r7,172(sp)
81114060:	dbc02a15 	stw	r15,168(sp)
81114064:	11133c40 	call	811133c4 <__sprint_r.part.0>
81114068:	d9c02b17 	ldw	r7,172(sp)
8111406c:	dbc02a17 	ldw	r15,168(sp)
81114070:	10006d1e 	bne	r2,zero,81114228 <___vfiprintf_internal_r+0xd50>
81114074:	d9801b17 	ldw	r6,108(sp)
81114078:	d8801c17 	ldw	r2,112(sp)
8111407c:	d811883a 	mov	r8,sp
81114080:	31400044 	addi	r5,r6,1
81114084:	003e3306 	br	81113954 <__reset+0xfb0f3954>
81114088:	d9401b17 	ldw	r5,108(sp)
8111408c:	d8801c17 	ldw	r2,112(sp)
81114090:	29000044 	addi	r4,r5,1
81114094:	d8c01d87 	ldb	r3,118(sp)
81114098:	183e4d26 	beq	r3,zero,811139d0 <__reset+0xfb0f39d0>
8111409c:	00c00044 	movi	r3,1
811140a0:	d9401d84 	addi	r5,sp,118
811140a4:	10c5883a 	add	r2,r2,r3
811140a8:	41400015 	stw	r5,0(r8)
811140ac:	40c00115 	stw	r3,4(r8)
811140b0:	d8801c15 	stw	r2,112(sp)
811140b4:	d9001b15 	stw	r4,108(sp)
811140b8:	014001c4 	movi	r5,7
811140bc:	2900a90e 	bge	r5,r4,81114364 <___vfiprintf_internal_r+0xe8c>
811140c0:	1000da1e 	bne	r2,zero,8111442c <___vfiprintf_internal_r+0xf54>
811140c4:	7000ab1e 	bne	r14,zero,81114374 <___vfiprintf_internal_r+0xe9c>
811140c8:	000b883a 	mov	r5,zero
811140cc:	1809883a 	mov	r4,r3
811140d0:	d811883a 	mov	r8,sp
811140d4:	00c02004 	movi	r3,128
811140d8:	e0fe4d26 	beq	fp,r3,81113a10 <__reset+0xfb0f3a10>
811140dc:	4cf9c83a 	sub	fp,r9,r19
811140e0:	073e7b0e 	bge	zero,fp,81113ad0 <__reset+0xfb0f3ad0>
811140e4:	01c00404 	movi	r7,16
811140e8:	3f01900e 	bge	r7,fp,8111472c <___vfiprintf_internal_r+0x1254>
811140ec:	00e044b4 	movhi	r3,33042
811140f0:	18f9c104 	addi	r3,r3,-6396
811140f4:	d8c02415 	stw	r3,144(sp)
811140f8:	034001c4 	movi	r13,7
811140fc:	00000506 	br	81114114 <___vfiprintf_internal_r+0xc3c>
81114100:	29000084 	addi	r4,r5,2
81114104:	42000204 	addi	r8,r8,8
81114108:	180b883a 	mov	r5,r3
8111410c:	e73ffc04 	addi	fp,fp,-16
81114110:	3f000d0e 	bge	r7,fp,81114148 <___vfiprintf_internal_r+0xc70>
81114114:	10800404 	addi	r2,r2,16
81114118:	28c00044 	addi	r3,r5,1
8111411c:	45c00015 	stw	r23,0(r8)
81114120:	41c00115 	stw	r7,4(r8)
81114124:	d8801c15 	stw	r2,112(sp)
81114128:	d8c01b15 	stw	r3,108(sp)
8111412c:	68fff40e 	bge	r13,r3,81114100 <__reset+0xfb0f4100>
81114130:	1000101e 	bne	r2,zero,81114174 <___vfiprintf_internal_r+0xc9c>
81114134:	e73ffc04 	addi	fp,fp,-16
81114138:	01000044 	movi	r4,1
8111413c:	000b883a 	mov	r5,zero
81114140:	d811883a 	mov	r8,sp
81114144:	3f3ff316 	blt	r7,fp,81114114 <__reset+0xfb0f4114>
81114148:	da802417 	ldw	r10,144(sp)
8111414c:	1705883a 	add	r2,r2,fp
81114150:	47000115 	stw	fp,4(r8)
81114154:	42800015 	stw	r10,0(r8)
81114158:	d8801c15 	stw	r2,112(sp)
8111415c:	d9001b15 	stw	r4,108(sp)
81114160:	00c001c4 	movi	r3,7
81114164:	19003616 	blt	r3,r4,81114240 <___vfiprintf_internal_r+0xd68>
81114168:	42000204 	addi	r8,r8,8
8111416c:	21000044 	addi	r4,r4,1
81114170:	003e5706 	br	81113ad0 <__reset+0xfb0f3ad0>
81114174:	d9402117 	ldw	r5,132(sp)
81114178:	d9002017 	ldw	r4,128(sp)
8111417c:	d9801a04 	addi	r6,sp,104
81114180:	d9c02b15 	stw	r7,172(sp)
81114184:	db402a15 	stw	r13,168(sp)
81114188:	11133c40 	call	811133c4 <__sprint_r.part.0>
8111418c:	d9c02b17 	ldw	r7,172(sp)
81114190:	db402a17 	ldw	r13,168(sp)
81114194:	1000241e 	bne	r2,zero,81114228 <___vfiprintf_internal_r+0xd50>
81114198:	d9401b17 	ldw	r5,108(sp)
8111419c:	d8801c17 	ldw	r2,112(sp)
811141a0:	d811883a 	mov	r8,sp
811141a4:	29000044 	addi	r4,r5,1
811141a8:	003fd806 	br	8111410c <__reset+0xfb0f410c>
811141ac:	d9401b17 	ldw	r5,108(sp)
811141b0:	00e044b4 	movhi	r3,33042
811141b4:	18f9c504 	addi	r3,r3,-6380
811141b8:	d8c02415 	stw	r3,144(sp)
811141bc:	29400044 	addi	r5,r5,1
811141c0:	d8c02417 	ldw	r3,144(sp)
811141c4:	14c5883a 	add	r2,r2,r19
811141c8:	44c00115 	stw	r19,4(r8)
811141cc:	40c00015 	stw	r3,0(r8)
811141d0:	d8801c15 	stw	r2,112(sp)
811141d4:	d9401b15 	stw	r5,108(sp)
811141d8:	00c001c4 	movi	r3,7
811141dc:	1940070e 	bge	r3,r5,811141fc <___vfiprintf_internal_r+0xd24>
811141e0:	103e4826 	beq	r2,zero,81113b04 <__reset+0xfb0f3b04>
811141e4:	d9402117 	ldw	r5,132(sp)
811141e8:	d9002017 	ldw	r4,128(sp)
811141ec:	d9801a04 	addi	r6,sp,104
811141f0:	11133c40 	call	811133c4 <__sprint_r.part.0>
811141f4:	10000c1e 	bne	r2,zero,81114228 <___vfiprintf_internal_r+0xd50>
811141f8:	d8801c17 	ldw	r2,112(sp)
811141fc:	8c80010e 	bge	r17,r18,81114204 <___vfiprintf_internal_r+0xd2c>
81114200:	9023883a 	mov	r17,r18
81114204:	da802317 	ldw	r10,140(sp)
81114208:	5455883a 	add	r10,r10,r17
8111420c:	da802315 	stw	r10,140(sp)
81114210:	103e4126 	beq	r2,zero,81113b18 <__reset+0xfb0f3b18>
81114214:	d9402117 	ldw	r5,132(sp)
81114218:	d9002017 	ldw	r4,128(sp)
8111421c:	d9801a04 	addi	r6,sp,104
81114220:	11133c40 	call	811133c4 <__sprint_r.part.0>
81114224:	103e3c26 	beq	r2,zero,81113b18 <__reset+0xfb0f3b18>
81114228:	dd002117 	ldw	r20,132(sp)
8111422c:	a080030b 	ldhu	r2,12(r20)
81114230:	1080100c 	andi	r2,r2,64
81114234:	1001231e 	bne	r2,zero,811146c4 <___vfiprintf_internal_r+0x11ec>
81114238:	d8802317 	ldw	r2,140(sp)
8111423c:	003d7b06 	br	8111382c <__reset+0xfb0f382c>
81114240:	1000991e 	bne	r2,zero,811144a8 <___vfiprintf_internal_r+0xfd0>
81114244:	00c00044 	movi	r3,1
81114248:	9805883a 	mov	r2,r19
8111424c:	dd400015 	stw	r21,0(sp)
81114250:	dcc00115 	stw	r19,4(sp)
81114254:	dcc01c15 	stw	r19,112(sp)
81114258:	d8c01b15 	stw	r3,108(sp)
8111425c:	d811883a 	mov	r8,sp
81114260:	42000204 	addi	r8,r8,8
81114264:	a2c0010c 	andi	r11,r20,4
81114268:	583fe426 	beq	r11,zero,811141fc <__reset+0xfb0f41fc>
8111426c:	8ca7c83a 	sub	r19,r17,r18
81114270:	04ffe20e 	bge	zero,r19,811141fc <__reset+0xfb0f41fc>
81114274:	01c00404 	movi	r7,16
81114278:	3cffcc0e 	bge	r7,r19,811141ac <__reset+0xfb0f41ac>
8111427c:	02a044b4 	movhi	r10,33042
81114280:	52b9c504 	addi	r10,r10,-6380
81114284:	d9001b17 	ldw	r4,108(sp)
81114288:	da802415 	stw	r10,144(sp)
8111428c:	382b883a 	mov	r21,r7
81114290:	050001c4 	movi	r20,7
81114294:	df002017 	ldw	fp,128(sp)
81114298:	00000506 	br	811142b0 <___vfiprintf_internal_r+0xdd8>
8111429c:	21400084 	addi	r5,r4,2
811142a0:	42000204 	addi	r8,r8,8
811142a4:	1809883a 	mov	r4,r3
811142a8:	9cfffc04 	addi	r19,r19,-16
811142ac:	acffc40e 	bge	r21,r19,811141c0 <__reset+0xfb0f41c0>
811142b0:	10800404 	addi	r2,r2,16
811142b4:	20c00044 	addi	r3,r4,1
811142b8:	45800015 	stw	r22,0(r8)
811142bc:	45400115 	stw	r21,4(r8)
811142c0:	d8801c15 	stw	r2,112(sp)
811142c4:	d8c01b15 	stw	r3,108(sp)
811142c8:	a0fff40e 	bge	r20,r3,8111429c <__reset+0xfb0f429c>
811142cc:	1000041e 	bne	r2,zero,811142e0 <___vfiprintf_internal_r+0xe08>
811142d0:	01400044 	movi	r5,1
811142d4:	0009883a 	mov	r4,zero
811142d8:	d811883a 	mov	r8,sp
811142dc:	003ff206 	br	811142a8 <__reset+0xfb0f42a8>
811142e0:	d9402117 	ldw	r5,132(sp)
811142e4:	d9801a04 	addi	r6,sp,104
811142e8:	e009883a 	mov	r4,fp
811142ec:	11133c40 	call	811133c4 <__sprint_r.part.0>
811142f0:	103fcd1e 	bne	r2,zero,81114228 <__reset+0xfb0f4228>
811142f4:	d9001b17 	ldw	r4,108(sp)
811142f8:	d8801c17 	ldw	r2,112(sp)
811142fc:	d811883a 	mov	r8,sp
81114300:	21400044 	addi	r5,r4,1
81114304:	003fe806 	br	811142a8 <__reset+0xfb0f42a8>
81114308:	d9402117 	ldw	r5,132(sp)
8111430c:	d9002017 	ldw	r4,128(sp)
81114310:	d9801a04 	addi	r6,sp,104
81114314:	d9c02b15 	stw	r7,172(sp)
81114318:	db402a15 	stw	r13,168(sp)
8111431c:	11133c40 	call	811133c4 <__sprint_r.part.0>
81114320:	d9c02b17 	ldw	r7,172(sp)
81114324:	db402a17 	ldw	r13,168(sp)
81114328:	103fbf1e 	bne	r2,zero,81114228 <__reset+0xfb0f4228>
8111432c:	d9401b17 	ldw	r5,108(sp)
81114330:	d8801c17 	ldw	r2,112(sp)
81114334:	d811883a 	mov	r8,sp
81114338:	29800044 	addi	r6,r5,1
8111433c:	003dc406 	br	81113a50 <__reset+0xfb0f3a50>
81114340:	1000d21e 	bne	r2,zero,8111468c <___vfiprintf_internal_r+0x11b4>
81114344:	d8c01d87 	ldb	r3,118(sp)
81114348:	18009526 	beq	r3,zero,811145a0 <___vfiprintf_internal_r+0x10c8>
8111434c:	00800044 	movi	r2,1
81114350:	d8c01d84 	addi	r3,sp,118
81114354:	1009883a 	mov	r4,r2
81114358:	d8c00015 	stw	r3,0(sp)
8111435c:	d8800115 	stw	r2,4(sp)
81114360:	d811883a 	mov	r8,sp
81114364:	200b883a 	mov	r5,r4
81114368:	42000204 	addi	r8,r8,8
8111436c:	21000044 	addi	r4,r4,1
81114370:	003d9706 	br	811139d0 <__reset+0xfb0f39d0>
81114374:	d9001d04 	addi	r4,sp,116
81114378:	00800084 	movi	r2,2
8111437c:	d9000015 	stw	r4,0(sp)
81114380:	d8800115 	stw	r2,4(sp)
81114384:	1809883a 	mov	r4,r3
81114388:	d811883a 	mov	r8,sp
8111438c:	200b883a 	mov	r5,r4
81114390:	42000204 	addi	r8,r8,8
81114394:	21000044 	addi	r4,r4,1
81114398:	003f4e06 	br	811140d4 <__reset+0xfb0f40d4>
8111439c:	d8001d85 	stb	zero,118(sp)
811143a0:	48005016 	blt	r9,zero,811144e4 <___vfiprintf_internal_r+0x100c>
811143a4:	00ffdfc4 	movi	r3,-129
811143a8:	94c4b03a 	or	r2,r18,r19
811143ac:	a0e8703a 	and	r20,r20,r3
811143b0:	103d4426 	beq	r2,zero,811138c4 <__reset+0xfb0f38c4>
811143b4:	0039883a 	mov	fp,zero
811143b8:	d9002617 	ldw	r4,152(sp)
811143bc:	dd401a04 	addi	r21,sp,104
811143c0:	908003cc 	andi	r2,r18,15
811143c4:	9806973a 	slli	r3,r19,28
811143c8:	2085883a 	add	r2,r4,r2
811143cc:	9024d13a 	srli	r18,r18,4
811143d0:	10800003 	ldbu	r2,0(r2)
811143d4:	9826d13a 	srli	r19,r19,4
811143d8:	ad7fffc4 	addi	r21,r21,-1
811143dc:	1ca4b03a 	or	r18,r3,r18
811143e0:	a8800005 	stb	r2,0(r21)
811143e4:	94c4b03a 	or	r2,r18,r19
811143e8:	103ff51e 	bne	r2,zero,811143c0 <__reset+0xfb0f43c0>
811143ec:	003e5906 	br	81113d54 <__reset+0xfb0f3d54>
811143f0:	d9402117 	ldw	r5,132(sp)
811143f4:	d9002017 	ldw	r4,128(sp)
811143f8:	d9801a04 	addi	r6,sp,104
811143fc:	11133c40 	call	811133c4 <__sprint_r.part.0>
81114400:	103f891e 	bne	r2,zero,81114228 <__reset+0xfb0f4228>
81114404:	d8801c17 	ldw	r2,112(sp)
81114408:	d811883a 	mov	r8,sp
8111440c:	003f9506 	br	81114264 <__reset+0xfb0f4264>
81114410:	d9402117 	ldw	r5,132(sp)
81114414:	d9002017 	ldw	r4,128(sp)
81114418:	d9801a04 	addi	r6,sp,104
8111441c:	11133c40 	call	811133c4 <__sprint_r.part.0>
81114420:	103f811e 	bne	r2,zero,81114228 <__reset+0xfb0f4228>
81114424:	d811883a 	mov	r8,sp
81114428:	003ced06 	br	811137e0 <__reset+0xfb0f37e0>
8111442c:	d9402117 	ldw	r5,132(sp)
81114430:	d9002017 	ldw	r4,128(sp)
81114434:	d9801a04 	addi	r6,sp,104
81114438:	da402c15 	stw	r9,176(sp)
8111443c:	db802a15 	stw	r14,168(sp)
81114440:	11133c40 	call	811133c4 <__sprint_r.part.0>
81114444:	da402c17 	ldw	r9,176(sp)
81114448:	db802a17 	ldw	r14,168(sp)
8111444c:	103f761e 	bne	r2,zero,81114228 <__reset+0xfb0f4228>
81114450:	d9401b17 	ldw	r5,108(sp)
81114454:	d8801c17 	ldw	r2,112(sp)
81114458:	d811883a 	mov	r8,sp
8111445c:	29000044 	addi	r4,r5,1
81114460:	003d5b06 	br	811139d0 <__reset+0xfb0f39d0>
81114464:	d9402117 	ldw	r5,132(sp)
81114468:	d9002017 	ldw	r4,128(sp)
8111446c:	d9801a04 	addi	r6,sp,104
81114470:	da402c15 	stw	r9,176(sp)
81114474:	11133c40 	call	811133c4 <__sprint_r.part.0>
81114478:	da402c17 	ldw	r9,176(sp)
8111447c:	103f6a1e 	bne	r2,zero,81114228 <__reset+0xfb0f4228>
81114480:	d9401b17 	ldw	r5,108(sp)
81114484:	d8801c17 	ldw	r2,112(sp)
81114488:	d811883a 	mov	r8,sp
8111448c:	29000044 	addi	r4,r5,1
81114490:	003f1006 	br	811140d4 <__reset+0xfb0f40d4>
81114494:	1000c31e 	bne	r2,zero,811147a4 <___vfiprintf_internal_r+0x12cc>
81114498:	01000044 	movi	r4,1
8111449c:	000b883a 	mov	r5,zero
811144a0:	d811883a 	mov	r8,sp
811144a4:	003f0d06 	br	811140dc <__reset+0xfb0f40dc>
811144a8:	d9402117 	ldw	r5,132(sp)
811144ac:	d9002017 	ldw	r4,128(sp)
811144b0:	d9801a04 	addi	r6,sp,104
811144b4:	11133c40 	call	811133c4 <__sprint_r.part.0>
811144b8:	103f5b1e 	bne	r2,zero,81114228 <__reset+0xfb0f4228>
811144bc:	d9001b17 	ldw	r4,108(sp)
811144c0:	d8801c17 	ldw	r2,112(sp)
811144c4:	d811883a 	mov	r8,sp
811144c8:	21000044 	addi	r4,r4,1
811144cc:	003d8006 	br	81113ad0 <__reset+0xfb0f3ad0>
811144d0:	012044b4 	movhi	r4,33042
811144d4:	21396104 	addi	r4,r4,-6780
811144d8:	d9002615 	stw	r4,152(sp)
811144dc:	d8c02215 	stw	r3,136(sp)
811144e0:	1029883a 	mov	r20,r2
811144e4:	94c4b03a 	or	r2,r18,r19
811144e8:	103fb21e 	bne	r2,zero,811143b4 <__reset+0xfb0f43b4>
811144ec:	0039883a 	mov	fp,zero
811144f0:	00800084 	movi	r2,2
811144f4:	003e6b06 	br	81113ea4 <__reset+0xfb0f3ea4>
811144f8:	da802217 	ldw	r10,136(sp)
811144fc:	d8001d85 	stb	zero,118(sp)
81114500:	0027883a 	mov	r19,zero
81114504:	50800104 	addi	r2,r10,4
81114508:	54800017 	ldw	r18,0(r10)
8111450c:	483e6016 	blt	r9,zero,81113e90 <__reset+0xfb0f3e90>
81114510:	00ffdfc4 	movi	r3,-129
81114514:	d8802215 	stw	r2,136(sp)
81114518:	a0e8703a 	and	r20,r20,r3
8111451c:	0039883a 	mov	fp,zero
81114520:	903ebb26 	beq	r18,zero,81114010 <__reset+0xfb0f4010>
81114524:	00800244 	movi	r2,9
81114528:	14bdee36 	bltu	r2,r18,81113ce4 <__reset+0xfb0f3ce4>
8111452c:	003eba06 	br	81114018 <__reset+0xfb0f4018>
81114530:	00800c04 	movi	r2,48
81114534:	d8c01d45 	stb	r3,117(sp)
81114538:	d8801d05 	stb	r2,116(sp)
8111453c:	d8001d85 	stb	zero,118(sp)
81114540:	a0c00094 	ori	r3,r20,2
81114544:	4800a916 	blt	r9,zero,811147ec <___vfiprintf_internal_r+0x1314>
81114548:	00bfdfc4 	movi	r2,-129
8111454c:	a096703a 	and	r11,r20,r2
81114550:	5d000094 	ori	r20,r11,2
81114554:	0039883a 	mov	fp,zero
81114558:	003f9706 	br	811143b8 <__reset+0xfb0f43b8>
8111455c:	8025883a 	mov	r18,r16
81114560:	003c2e06 	br	8111361c <__reset+0xfb0f361c>
81114564:	00a044b4 	movhi	r2,33042
81114568:	10b96104 	addi	r2,r2,-6780
8111456c:	0039883a 	mov	fp,zero
81114570:	d8802615 	stw	r2,152(sp)
81114574:	003f9006 	br	811143b8 <__reset+0xfb0f43b8>
81114578:	04a5c83a 	sub	r18,zero,r18
8111457c:	07000b44 	movi	fp,45
81114580:	9004c03a 	cmpne	r2,r18,zero
81114584:	04e7c83a 	sub	r19,zero,r19
81114588:	df001d85 	stb	fp,118(sp)
8111458c:	98a7c83a 	sub	r19,r19,r2
81114590:	48009f16 	blt	r9,zero,81114810 <___vfiprintf_internal_r+0x1338>
81114594:	00bfdfc4 	movi	r2,-129
81114598:	a0a8703a 	and	r20,r20,r2
8111459c:	003dd006 	br	81113ce0 <__reset+0xfb0f3ce0>
811145a0:	70004c26 	beq	r14,zero,811146d4 <___vfiprintf_internal_r+0x11fc>
811145a4:	00800084 	movi	r2,2
811145a8:	d8c01d04 	addi	r3,sp,116
811145ac:	d8c00015 	stw	r3,0(sp)
811145b0:	d8800115 	stw	r2,4(sp)
811145b4:	01000044 	movi	r4,1
811145b8:	d811883a 	mov	r8,sp
811145bc:	003f7306 	br	8111438c <__reset+0xfb0f438c>
811145c0:	a080100c 	andi	r2,r20,64
811145c4:	da802217 	ldw	r10,136(sp)
811145c8:	103e0626 	beq	r2,zero,81113de4 <__reset+0xfb0f3de4>
811145cc:	5480000f 	ldh	r18,0(r10)
811145d0:	52800104 	addi	r10,r10,4
811145d4:	da802215 	stw	r10,136(sp)
811145d8:	9027d7fa 	srai	r19,r18,31
811145dc:	9805883a 	mov	r2,r19
811145e0:	003db806 	br	81113cc4 <__reset+0xfb0f3cc4>
811145e4:	a080040c 	andi	r2,r20,16
811145e8:	1000091e 	bne	r2,zero,81114610 <___vfiprintf_internal_r+0x1138>
811145ec:	a2c0100c 	andi	r11,r20,64
811145f0:	58000726 	beq	r11,zero,81114610 <___vfiprintf_internal_r+0x1138>
811145f4:	da802217 	ldw	r10,136(sp)
811145f8:	50800017 	ldw	r2,0(r10)
811145fc:	52800104 	addi	r10,r10,4
81114600:	da802215 	stw	r10,136(sp)
81114604:	da802317 	ldw	r10,140(sp)
81114608:	1280000d 	sth	r10,0(r2)
8111460c:	003be706 	br	811135ac <__reset+0xfb0f35ac>
81114610:	da802217 	ldw	r10,136(sp)
81114614:	50800017 	ldw	r2,0(r10)
81114618:	52800104 	addi	r10,r10,4
8111461c:	da802215 	stw	r10,136(sp)
81114620:	da802317 	ldw	r10,140(sp)
81114624:	12800015 	stw	r10,0(r2)
81114628:	003be006 	br	811135ac <__reset+0xfb0f35ac>
8111462c:	a080100c 	andi	r2,r20,64
81114630:	da802217 	ldw	r10,136(sp)
81114634:	10003026 	beq	r2,zero,811146f8 <___vfiprintf_internal_r+0x1220>
81114638:	5480000b 	ldhu	r18,0(r10)
8111463c:	52800104 	addi	r10,r10,4
81114640:	0027883a 	mov	r19,zero
81114644:	da802215 	stw	r10,136(sp)
81114648:	003d8006 	br	81113c4c <__reset+0xfb0f3c4c>
8111464c:	80c00007 	ldb	r3,0(r16)
81114650:	003c0006 	br	81113654 <__reset+0xfb0f3654>
81114654:	a080100c 	andi	r2,r20,64
81114658:	d8001d85 	stb	zero,118(sp)
8111465c:	da802217 	ldw	r10,136(sp)
81114660:	1000201e 	bne	r2,zero,811146e4 <___vfiprintf_internal_r+0x120c>
81114664:	50800104 	addi	r2,r10,4
81114668:	54800017 	ldw	r18,0(r10)
8111466c:	0027883a 	mov	r19,zero
81114670:	483def0e 	bge	r9,zero,81113e30 <__reset+0xfb0f3e30>
81114674:	94c6b03a 	or	r3,r18,r19
81114678:	d8802215 	stw	r2,136(sp)
8111467c:	183d4e1e 	bne	r3,zero,81113bb8 <__reset+0xfb0f3bb8>
81114680:	0039883a 	mov	fp,zero
81114684:	0005883a 	mov	r2,zero
81114688:	003e0606 	br	81113ea4 <__reset+0xfb0f3ea4>
8111468c:	d9402117 	ldw	r5,132(sp)
81114690:	d9002017 	ldw	r4,128(sp)
81114694:	d9801a04 	addi	r6,sp,104
81114698:	da402c15 	stw	r9,176(sp)
8111469c:	db802a15 	stw	r14,168(sp)
811146a0:	11133c40 	call	811133c4 <__sprint_r.part.0>
811146a4:	da402c17 	ldw	r9,176(sp)
811146a8:	db802a17 	ldw	r14,168(sp)
811146ac:	103ede1e 	bne	r2,zero,81114228 <__reset+0xfb0f4228>
811146b0:	d9401b17 	ldw	r5,108(sp)
811146b4:	d8801c17 	ldw	r2,112(sp)
811146b8:	d811883a 	mov	r8,sp
811146bc:	29000044 	addi	r4,r5,1
811146c0:	003e7406 	br	81114094 <__reset+0xfb0f4094>
811146c4:	00bfffc4 	movi	r2,-1
811146c8:	003c5806 	br	8111382c <__reset+0xfb0f382c>
811146cc:	d811883a 	mov	r8,sp
811146d0:	003ee806 	br	81114274 <__reset+0xfb0f4274>
811146d4:	000b883a 	mov	r5,zero
811146d8:	01000044 	movi	r4,1
811146dc:	d811883a 	mov	r8,sp
811146e0:	003e7c06 	br	811140d4 <__reset+0xfb0f40d4>
811146e4:	50800104 	addi	r2,r10,4
811146e8:	5480000b 	ldhu	r18,0(r10)
811146ec:	0027883a 	mov	r19,zero
811146f0:	483dcf0e 	bge	r9,zero,81113e30 <__reset+0xfb0f3e30>
811146f4:	003fdf06 	br	81114674 <__reset+0xfb0f4674>
811146f8:	54800017 	ldw	r18,0(r10)
811146fc:	52800104 	addi	r10,r10,4
81114700:	0027883a 	mov	r19,zero
81114704:	da802215 	stw	r10,136(sp)
81114708:	003d5006 	br	81113c4c <__reset+0xfb0f3c4c>
8111470c:	50800104 	addi	r2,r10,4
81114710:	5480000b 	ldhu	r18,0(r10)
81114714:	0027883a 	mov	r19,zero
81114718:	483f7d0e 	bge	r9,zero,81114510 <__reset+0xfb0f4510>
8111471c:	003ddc06 	br	81113e90 <__reset+0xfb0f3e90>
81114720:	d8c02215 	stw	r3,136(sp)
81114724:	0039883a 	mov	fp,zero
81114728:	003ddb06 	br	81113e98 <__reset+0xfb0f3e98>
8111472c:	02a044b4 	movhi	r10,33042
81114730:	52b9c104 	addi	r10,r10,-6396
81114734:	da802415 	stw	r10,144(sp)
81114738:	003e8306 	br	81114148 <__reset+0xfb0f4148>
8111473c:	d8801c17 	ldw	r2,112(sp)
81114740:	dd002117 	ldw	r20,132(sp)
81114744:	103eb926 	beq	r2,zero,8111422c <__reset+0xfb0f422c>
81114748:	d9002017 	ldw	r4,128(sp)
8111474c:	d9801a04 	addi	r6,sp,104
81114750:	a00b883a 	mov	r5,r20
81114754:	11133c40 	call	811133c4 <__sprint_r.part.0>
81114758:	003eb406 	br	8111422c <__reset+0xfb0f422c>
8111475c:	80c00043 	ldbu	r3,1(r16)
81114760:	a5000814 	ori	r20,r20,32
81114764:	84000044 	addi	r16,r16,1
81114768:	18c03fcc 	andi	r3,r3,255
8111476c:	18c0201c 	xori	r3,r3,128
81114770:	18ffe004 	addi	r3,r3,-128
81114774:	003bb706 	br	81113654 <__reset+0xfb0f3654>
81114778:	a809883a 	mov	r4,r21
8111477c:	d8c02a15 	stw	r3,168(sp)
81114780:	da002b15 	stw	r8,172(sp)
81114784:	110bc1c0 	call	8110bc1c <strlen>
81114788:	d8c02a17 	ldw	r3,168(sp)
8111478c:	1027883a 	mov	r19,r2
81114790:	df001d83 	ldbu	fp,118(sp)
81114794:	d8c02215 	stw	r3,136(sp)
81114798:	0013883a 	mov	r9,zero
8111479c:	da002b17 	ldw	r8,172(sp)
811147a0:	003c4d06 	br	811138d8 <__reset+0xfb0f38d8>
811147a4:	d9402117 	ldw	r5,132(sp)
811147a8:	d9002017 	ldw	r4,128(sp)
811147ac:	d9801a04 	addi	r6,sp,104
811147b0:	da402c15 	stw	r9,176(sp)
811147b4:	11133c40 	call	811133c4 <__sprint_r.part.0>
811147b8:	da402c17 	ldw	r9,176(sp)
811147bc:	103e9a1e 	bne	r2,zero,81114228 <__reset+0xfb0f4228>
811147c0:	d9401b17 	ldw	r5,108(sp)
811147c4:	d8801c17 	ldw	r2,112(sp)
811147c8:	d811883a 	mov	r8,sp
811147cc:	29000044 	addi	r4,r5,1
811147d0:	003e4206 	br	811140dc <__reset+0xfb0f40dc>
811147d4:	d9401b17 	ldw	r5,108(sp)
811147d8:	012044b4 	movhi	r4,33042
811147dc:	2139c504 	addi	r4,r4,-6380
811147e0:	d9002415 	stw	r4,144(sp)
811147e4:	29400044 	addi	r5,r5,1
811147e8:	003c6d06 	br	811139a0 <__reset+0xfb0f39a0>
811147ec:	0039883a 	mov	fp,zero
811147f0:	00800084 	movi	r2,2
811147f4:	10803fcc 	andi	r2,r2,255
811147f8:	01000044 	movi	r4,1
811147fc:	11001e26 	beq	r2,r4,81114878 <___vfiprintf_internal_r+0x13a0>
81114800:	01000084 	movi	r4,2
81114804:	11001e1e 	bne	r2,r4,81114880 <___vfiprintf_internal_r+0x13a8>
81114808:	1829883a 	mov	r20,r3
8111480c:	003eea06 	br	811143b8 <__reset+0xfb0f43b8>
81114810:	a007883a 	mov	r3,r20
81114814:	00800044 	movi	r2,1
81114818:	003ff606 	br	811147f4 <__reset+0xfb0f47f4>
8111481c:	00800184 	movi	r2,6
81114820:	1240012e 	bgeu	r2,r9,81114828 <___vfiprintf_internal_r+0x1350>
81114824:	1013883a 	mov	r9,r2
81114828:	4827883a 	mov	r19,r9
8111482c:	4825883a 	mov	r18,r9
81114830:	48001516 	blt	r9,zero,81114888 <___vfiprintf_internal_r+0x13b0>
81114834:	056044b4 	movhi	r21,33042
81114838:	d8c02215 	stw	r3,136(sp)
8111483c:	ad796604 	addi	r21,r21,-6760
81114840:	003d1406 	br	81113c94 <__reset+0xfb0f3c94>
81114844:	02a044b4 	movhi	r10,33042
81114848:	52b9c104 	addi	r10,r10,-6396
8111484c:	da802415 	stw	r10,144(sp)
81114850:	200d883a 	mov	r6,r4
81114854:	003c9106 	br	81113a9c <__reset+0xfb0f3a9c>
81114858:	5021883a 	mov	r16,r10
8111485c:	0013883a 	mov	r9,zero
81114860:	003b7d06 	br	81113658 <__reset+0xfb0f3658>
81114864:	4827883a 	mov	r19,r9
81114868:	df001d83 	ldbu	fp,118(sp)
8111486c:	d8c02215 	stw	r3,136(sp)
81114870:	0013883a 	mov	r9,zero
81114874:	003c1806 	br	811138d8 <__reset+0xfb0f38d8>
81114878:	1829883a 	mov	r20,r3
8111487c:	003d1806 	br	81113ce0 <__reset+0xfb0f3ce0>
81114880:	1829883a 	mov	r20,r3
81114884:	003ccd06 	br	81113bbc <__reset+0xfb0f3bbc>
81114888:	0025883a 	mov	r18,zero
8111488c:	003fe906 	br	81114834 <__reset+0xfb0f4834>
81114890:	d8802217 	ldw	r2,136(sp)
81114894:	80c00043 	ldbu	r3,1(r16)
81114898:	5021883a 	mov	r16,r10
8111489c:	12400017 	ldw	r9,0(r2)
811148a0:	10800104 	addi	r2,r2,4
811148a4:	d8802215 	stw	r2,136(sp)
811148a8:	483faf0e 	bge	r9,zero,81114768 <__reset+0xfb0f4768>
811148ac:	18c03fcc 	andi	r3,r3,255
811148b0:	18c0201c 	xori	r3,r3,128
811148b4:	027fffc4 	movi	r9,-1
811148b8:	18ffe004 	addi	r3,r3,-128
811148bc:	003b6506 	br	81113654 <__reset+0xfb0f3654>
811148c0:	d9c01d85 	stb	r7,118(sp)
811148c4:	003ca006 	br	81113b48 <__reset+0xfb0f3b48>
811148c8:	d9c01d85 	stb	r7,118(sp)
811148cc:	003cad06 	br	81113b84 <__reset+0xfb0f3b84>
811148d0:	d9c01d85 	stb	r7,118(sp)
811148d4:	003d7d06 	br	81113ecc <__reset+0xfb0f3ecc>
811148d8:	d9c01d85 	stb	r7,118(sp)
811148dc:	003d5f06 	br	81113e5c <__reset+0xfb0f3e5c>
811148e0:	a080004c 	andi	r2,r20,1
811148e4:	0039883a 	mov	fp,zero
811148e8:	10000526 	beq	r2,zero,81114900 <___vfiprintf_internal_r+0x1428>
811148ec:	00800c04 	movi	r2,48
811148f0:	d88019c5 	stb	r2,103(sp)
811148f4:	dcc02717 	ldw	r19,156(sp)
811148f8:	dd4019c4 	addi	r21,sp,103
811148fc:	003bf606 	br	811138d8 <__reset+0xfb0f38d8>
81114900:	0027883a 	mov	r19,zero
81114904:	dd401a04 	addi	r21,sp,104
81114908:	003bf306 	br	811138d8 <__reset+0xfb0f38d8>
8111490c:	d9c01d85 	stb	r7,118(sp)
81114910:	003dc806 	br	81114034 <__reset+0xfb0f4034>
81114914:	d9c01d85 	stb	r7,118(sp)
81114918:	003d3a06 	br	81113e04 <__reset+0xfb0f3e04>
8111491c:	d9c01d85 	stb	r7,118(sp)
81114920:	003d2a06 	br	81113dcc <__reset+0xfb0f3dcc>
81114924:	d9c01d85 	stb	r7,118(sp)
81114928:	003cde06 	br	81113ca4 <__reset+0xfb0f3ca4>
8111492c:	d9c01d85 	stb	r7,118(sp)
81114930:	003cbc06 	br	81113c24 <__reset+0xfb0f3c24>

81114934 <__vfiprintf_internal>:
81114934:	00a044b4 	movhi	r2,33042
81114938:	10819104 	addi	r2,r2,1604
8111493c:	300f883a 	mov	r7,r6
81114940:	280d883a 	mov	r6,r5
81114944:	200b883a 	mov	r5,r4
81114948:	11000017 	ldw	r4,0(r2)
8111494c:	11134d81 	jmpi	811134d8 <___vfiprintf_internal_r>

81114950 <__sbprintf>:
81114950:	2880030b 	ldhu	r2,12(r5)
81114954:	2ac01917 	ldw	r11,100(r5)
81114958:	2a80038b 	ldhu	r10,14(r5)
8111495c:	2a400717 	ldw	r9,28(r5)
81114960:	2a000917 	ldw	r8,36(r5)
81114964:	defee204 	addi	sp,sp,-1144
81114968:	00c10004 	movi	r3,1024
8111496c:	dc011a15 	stw	r16,1128(sp)
81114970:	10bfff4c 	andi	r2,r2,65533
81114974:	2821883a 	mov	r16,r5
81114978:	d8cb883a 	add	r5,sp,r3
8111497c:	dc811c15 	stw	r18,1136(sp)
81114980:	dc411b15 	stw	r17,1132(sp)
81114984:	dfc11d15 	stw	ra,1140(sp)
81114988:	2025883a 	mov	r18,r4
8111498c:	d881030d 	sth	r2,1036(sp)
81114990:	dac11915 	stw	r11,1124(sp)
81114994:	da81038d 	sth	r10,1038(sp)
81114998:	da410715 	stw	r9,1052(sp)
8111499c:	da010915 	stw	r8,1060(sp)
811149a0:	dec10015 	stw	sp,1024(sp)
811149a4:	dec10415 	stw	sp,1040(sp)
811149a8:	d8c10215 	stw	r3,1032(sp)
811149ac:	d8c10515 	stw	r3,1044(sp)
811149b0:	d8010615 	stw	zero,1048(sp)
811149b4:	11134d80 	call	811134d8 <___vfiprintf_internal_r>
811149b8:	1023883a 	mov	r17,r2
811149bc:	10000416 	blt	r2,zero,811149d0 <__sbprintf+0x80>
811149c0:	d9410004 	addi	r5,sp,1024
811149c4:	9009883a 	mov	r4,r18
811149c8:	110fb7c0 	call	8110fb7c <_fflush_r>
811149cc:	10000d1e 	bne	r2,zero,81114a04 <__sbprintf+0xb4>
811149d0:	d881030b 	ldhu	r2,1036(sp)
811149d4:	1080100c 	andi	r2,r2,64
811149d8:	10000326 	beq	r2,zero,811149e8 <__sbprintf+0x98>
811149dc:	8080030b 	ldhu	r2,12(r16)
811149e0:	10801014 	ori	r2,r2,64
811149e4:	8080030d 	sth	r2,12(r16)
811149e8:	8805883a 	mov	r2,r17
811149ec:	dfc11d17 	ldw	ra,1140(sp)
811149f0:	dc811c17 	ldw	r18,1136(sp)
811149f4:	dc411b17 	ldw	r17,1132(sp)
811149f8:	dc011a17 	ldw	r16,1128(sp)
811149fc:	dec11e04 	addi	sp,sp,1144
81114a00:	f800283a 	ret
81114a04:	047fffc4 	movi	r17,-1
81114a08:	003ff106 	br	811149d0 <__reset+0xfb0f49d0>

81114a0c <__swbuf_r>:
81114a0c:	defffb04 	addi	sp,sp,-20
81114a10:	dcc00315 	stw	r19,12(sp)
81114a14:	dc800215 	stw	r18,8(sp)
81114a18:	dc000015 	stw	r16,0(sp)
81114a1c:	dfc00415 	stw	ra,16(sp)
81114a20:	dc400115 	stw	r17,4(sp)
81114a24:	2025883a 	mov	r18,r4
81114a28:	2827883a 	mov	r19,r5
81114a2c:	3021883a 	mov	r16,r6
81114a30:	20000226 	beq	r4,zero,81114a3c <__swbuf_r+0x30>
81114a34:	20800e17 	ldw	r2,56(r4)
81114a38:	10004226 	beq	r2,zero,81114b44 <__swbuf_r+0x138>
81114a3c:	80800617 	ldw	r2,24(r16)
81114a40:	8100030b 	ldhu	r4,12(r16)
81114a44:	80800215 	stw	r2,8(r16)
81114a48:	2080020c 	andi	r2,r4,8
81114a4c:	10003626 	beq	r2,zero,81114b28 <__swbuf_r+0x11c>
81114a50:	80c00417 	ldw	r3,16(r16)
81114a54:	18003426 	beq	r3,zero,81114b28 <__swbuf_r+0x11c>
81114a58:	2088000c 	andi	r2,r4,8192
81114a5c:	9c403fcc 	andi	r17,r19,255
81114a60:	10001a26 	beq	r2,zero,81114acc <__swbuf_r+0xc0>
81114a64:	80800017 	ldw	r2,0(r16)
81114a68:	81000517 	ldw	r4,20(r16)
81114a6c:	10c7c83a 	sub	r3,r2,r3
81114a70:	1900200e 	bge	r3,r4,81114af4 <__swbuf_r+0xe8>
81114a74:	18c00044 	addi	r3,r3,1
81114a78:	81000217 	ldw	r4,8(r16)
81114a7c:	11400044 	addi	r5,r2,1
81114a80:	81400015 	stw	r5,0(r16)
81114a84:	213fffc4 	addi	r4,r4,-1
81114a88:	81000215 	stw	r4,8(r16)
81114a8c:	14c00005 	stb	r19,0(r2)
81114a90:	80800517 	ldw	r2,20(r16)
81114a94:	10c01e26 	beq	r2,r3,81114b10 <__swbuf_r+0x104>
81114a98:	8080030b 	ldhu	r2,12(r16)
81114a9c:	1080004c 	andi	r2,r2,1
81114aa0:	10000226 	beq	r2,zero,81114aac <__swbuf_r+0xa0>
81114aa4:	00800284 	movi	r2,10
81114aa8:	88801926 	beq	r17,r2,81114b10 <__swbuf_r+0x104>
81114aac:	8805883a 	mov	r2,r17
81114ab0:	dfc00417 	ldw	ra,16(sp)
81114ab4:	dcc00317 	ldw	r19,12(sp)
81114ab8:	dc800217 	ldw	r18,8(sp)
81114abc:	dc400117 	ldw	r17,4(sp)
81114ac0:	dc000017 	ldw	r16,0(sp)
81114ac4:	dec00504 	addi	sp,sp,20
81114ac8:	f800283a 	ret
81114acc:	81401917 	ldw	r5,100(r16)
81114ad0:	00b7ffc4 	movi	r2,-8193
81114ad4:	21080014 	ori	r4,r4,8192
81114ad8:	2884703a 	and	r2,r5,r2
81114adc:	80801915 	stw	r2,100(r16)
81114ae0:	80800017 	ldw	r2,0(r16)
81114ae4:	8100030d 	sth	r4,12(r16)
81114ae8:	81000517 	ldw	r4,20(r16)
81114aec:	10c7c83a 	sub	r3,r2,r3
81114af0:	193fe016 	blt	r3,r4,81114a74 <__reset+0xfb0f4a74>
81114af4:	800b883a 	mov	r5,r16
81114af8:	9009883a 	mov	r4,r18
81114afc:	110fb7c0 	call	8110fb7c <_fflush_r>
81114b00:	1000071e 	bne	r2,zero,81114b20 <__swbuf_r+0x114>
81114b04:	80800017 	ldw	r2,0(r16)
81114b08:	00c00044 	movi	r3,1
81114b0c:	003fda06 	br	81114a78 <__reset+0xfb0f4a78>
81114b10:	800b883a 	mov	r5,r16
81114b14:	9009883a 	mov	r4,r18
81114b18:	110fb7c0 	call	8110fb7c <_fflush_r>
81114b1c:	103fe326 	beq	r2,zero,81114aac <__reset+0xfb0f4aac>
81114b20:	00bfffc4 	movi	r2,-1
81114b24:	003fe206 	br	81114ab0 <__reset+0xfb0f4ab0>
81114b28:	800b883a 	mov	r5,r16
81114b2c:	9009883a 	mov	r4,r18
81114b30:	110df840 	call	8110df84 <__swsetup_r>
81114b34:	103ffa1e 	bne	r2,zero,81114b20 <__reset+0xfb0f4b20>
81114b38:	8100030b 	ldhu	r4,12(r16)
81114b3c:	80c00417 	ldw	r3,16(r16)
81114b40:	003fc506 	br	81114a58 <__reset+0xfb0f4a58>
81114b44:	110ff580 	call	8110ff58 <__sinit>
81114b48:	003fbc06 	br	81114a3c <__reset+0xfb0f4a3c>

81114b4c <__swbuf>:
81114b4c:	00a044b4 	movhi	r2,33042
81114b50:	10819104 	addi	r2,r2,1604
81114b54:	280d883a 	mov	r6,r5
81114b58:	200b883a 	mov	r5,r4
81114b5c:	11000017 	ldw	r4,0(r2)
81114b60:	1114a0c1 	jmpi	81114a0c <__swbuf_r>

81114b64 <_write_r>:
81114b64:	defffd04 	addi	sp,sp,-12
81114b68:	2805883a 	mov	r2,r5
81114b6c:	dc000015 	stw	r16,0(sp)
81114b70:	042044b4 	movhi	r16,33042
81114b74:	dc400115 	stw	r17,4(sp)
81114b78:	300b883a 	mov	r5,r6
81114b7c:	8401cb04 	addi	r16,r16,1836
81114b80:	2023883a 	mov	r17,r4
81114b84:	380d883a 	mov	r6,r7
81114b88:	1009883a 	mov	r4,r2
81114b8c:	dfc00215 	stw	ra,8(sp)
81114b90:	80000015 	stw	zero,0(r16)
81114b94:	1118cf40 	call	81118cf4 <write>
81114b98:	00ffffc4 	movi	r3,-1
81114b9c:	10c00526 	beq	r2,r3,81114bb4 <_write_r+0x50>
81114ba0:	dfc00217 	ldw	ra,8(sp)
81114ba4:	dc400117 	ldw	r17,4(sp)
81114ba8:	dc000017 	ldw	r16,0(sp)
81114bac:	dec00304 	addi	sp,sp,12
81114bb0:	f800283a 	ret
81114bb4:	80c00017 	ldw	r3,0(r16)
81114bb8:	183ff926 	beq	r3,zero,81114ba0 <__reset+0xfb0f4ba0>
81114bbc:	88c00015 	stw	r3,0(r17)
81114bc0:	003ff706 	br	81114ba0 <__reset+0xfb0f4ba0>

81114bc4 <_close_r>:
81114bc4:	defffd04 	addi	sp,sp,-12
81114bc8:	dc000015 	stw	r16,0(sp)
81114bcc:	042044b4 	movhi	r16,33042
81114bd0:	dc400115 	stw	r17,4(sp)
81114bd4:	8401cb04 	addi	r16,r16,1836
81114bd8:	2023883a 	mov	r17,r4
81114bdc:	2809883a 	mov	r4,r5
81114be0:	dfc00215 	stw	ra,8(sp)
81114be4:	80000015 	stw	zero,0(r16)
81114be8:	1117ff40 	call	81117ff4 <close>
81114bec:	00ffffc4 	movi	r3,-1
81114bf0:	10c00526 	beq	r2,r3,81114c08 <_close_r+0x44>
81114bf4:	dfc00217 	ldw	ra,8(sp)
81114bf8:	dc400117 	ldw	r17,4(sp)
81114bfc:	dc000017 	ldw	r16,0(sp)
81114c00:	dec00304 	addi	sp,sp,12
81114c04:	f800283a 	ret
81114c08:	80c00017 	ldw	r3,0(r16)
81114c0c:	183ff926 	beq	r3,zero,81114bf4 <__reset+0xfb0f4bf4>
81114c10:	88c00015 	stw	r3,0(r17)
81114c14:	003ff706 	br	81114bf4 <__reset+0xfb0f4bf4>

81114c18 <_calloc_r>:
81114c18:	298b383a 	mul	r5,r5,r6
81114c1c:	defffe04 	addi	sp,sp,-8
81114c20:	dfc00115 	stw	ra,4(sp)
81114c24:	dc000015 	stw	r16,0(sp)
81114c28:	1110cb80 	call	81110cb8 <_malloc_r>
81114c2c:	10002926 	beq	r2,zero,81114cd4 <_calloc_r+0xbc>
81114c30:	11bfff17 	ldw	r6,-4(r2)
81114c34:	1021883a 	mov	r16,r2
81114c38:	00bfff04 	movi	r2,-4
81114c3c:	308c703a 	and	r6,r6,r2
81114c40:	00c00904 	movi	r3,36
81114c44:	308d883a 	add	r6,r6,r2
81114c48:	19801636 	bltu	r3,r6,81114ca4 <_calloc_r+0x8c>
81114c4c:	008004c4 	movi	r2,19
81114c50:	11800b2e 	bgeu	r2,r6,81114c80 <_calloc_r+0x68>
81114c54:	80000015 	stw	zero,0(r16)
81114c58:	80000115 	stw	zero,4(r16)
81114c5c:	008006c4 	movi	r2,27
81114c60:	11801a2e 	bgeu	r2,r6,81114ccc <_calloc_r+0xb4>
81114c64:	80000215 	stw	zero,8(r16)
81114c68:	80000315 	stw	zero,12(r16)
81114c6c:	30c0151e 	bne	r6,r3,81114cc4 <_calloc_r+0xac>
81114c70:	80000415 	stw	zero,16(r16)
81114c74:	80800604 	addi	r2,r16,24
81114c78:	80000515 	stw	zero,20(r16)
81114c7c:	00000106 	br	81114c84 <_calloc_r+0x6c>
81114c80:	8005883a 	mov	r2,r16
81114c84:	10000015 	stw	zero,0(r2)
81114c88:	10000115 	stw	zero,4(r2)
81114c8c:	10000215 	stw	zero,8(r2)
81114c90:	8005883a 	mov	r2,r16
81114c94:	dfc00117 	ldw	ra,4(sp)
81114c98:	dc000017 	ldw	r16,0(sp)
81114c9c:	dec00204 	addi	sp,sp,8
81114ca0:	f800283a 	ret
81114ca4:	000b883a 	mov	r5,zero
81114ca8:	8009883a 	mov	r4,r16
81114cac:	11117040 	call	81111704 <memset>
81114cb0:	8005883a 	mov	r2,r16
81114cb4:	dfc00117 	ldw	ra,4(sp)
81114cb8:	dc000017 	ldw	r16,0(sp)
81114cbc:	dec00204 	addi	sp,sp,8
81114cc0:	f800283a 	ret
81114cc4:	80800404 	addi	r2,r16,16
81114cc8:	003fee06 	br	81114c84 <__reset+0xfb0f4c84>
81114ccc:	80800204 	addi	r2,r16,8
81114cd0:	003fec06 	br	81114c84 <__reset+0xfb0f4c84>
81114cd4:	0005883a 	mov	r2,zero
81114cd8:	003fee06 	br	81114c94 <__reset+0xfb0f4c94>

81114cdc <_fclose_r>:
81114cdc:	28003926 	beq	r5,zero,81114dc4 <_fclose_r+0xe8>
81114ce0:	defffc04 	addi	sp,sp,-16
81114ce4:	dc400115 	stw	r17,4(sp)
81114ce8:	dc000015 	stw	r16,0(sp)
81114cec:	dfc00315 	stw	ra,12(sp)
81114cf0:	dc800215 	stw	r18,8(sp)
81114cf4:	2023883a 	mov	r17,r4
81114cf8:	2821883a 	mov	r16,r5
81114cfc:	20000226 	beq	r4,zero,81114d08 <_fclose_r+0x2c>
81114d00:	20800e17 	ldw	r2,56(r4)
81114d04:	10002726 	beq	r2,zero,81114da4 <_fclose_r+0xc8>
81114d08:	8080030f 	ldh	r2,12(r16)
81114d0c:	1000071e 	bne	r2,zero,81114d2c <_fclose_r+0x50>
81114d10:	0005883a 	mov	r2,zero
81114d14:	dfc00317 	ldw	ra,12(sp)
81114d18:	dc800217 	ldw	r18,8(sp)
81114d1c:	dc400117 	ldw	r17,4(sp)
81114d20:	dc000017 	ldw	r16,0(sp)
81114d24:	dec00404 	addi	sp,sp,16
81114d28:	f800283a 	ret
81114d2c:	800b883a 	mov	r5,r16
81114d30:	8809883a 	mov	r4,r17
81114d34:	110f9600 	call	8110f960 <__sflush_r>
81114d38:	1025883a 	mov	r18,r2
81114d3c:	80800b17 	ldw	r2,44(r16)
81114d40:	10000426 	beq	r2,zero,81114d54 <_fclose_r+0x78>
81114d44:	81400717 	ldw	r5,28(r16)
81114d48:	8809883a 	mov	r4,r17
81114d4c:	103ee83a 	callr	r2
81114d50:	10001616 	blt	r2,zero,81114dac <_fclose_r+0xd0>
81114d54:	8080030b 	ldhu	r2,12(r16)
81114d58:	1080200c 	andi	r2,r2,128
81114d5c:	1000151e 	bne	r2,zero,81114db4 <_fclose_r+0xd8>
81114d60:	81400c17 	ldw	r5,48(r16)
81114d64:	28000526 	beq	r5,zero,81114d7c <_fclose_r+0xa0>
81114d68:	80801004 	addi	r2,r16,64
81114d6c:	28800226 	beq	r5,r2,81114d78 <_fclose_r+0x9c>
81114d70:	8809883a 	mov	r4,r17
81114d74:	11100cc0 	call	811100cc <_free_r>
81114d78:	80000c15 	stw	zero,48(r16)
81114d7c:	81401117 	ldw	r5,68(r16)
81114d80:	28000326 	beq	r5,zero,81114d90 <_fclose_r+0xb4>
81114d84:	8809883a 	mov	r4,r17
81114d88:	11100cc0 	call	811100cc <_free_r>
81114d8c:	80001115 	stw	zero,68(r16)
81114d90:	110ff680 	call	8110ff68 <__sfp_lock_acquire>
81114d94:	8000030d 	sth	zero,12(r16)
81114d98:	110ff6c0 	call	8110ff6c <__sfp_lock_release>
81114d9c:	9005883a 	mov	r2,r18
81114da0:	003fdc06 	br	81114d14 <__reset+0xfb0f4d14>
81114da4:	110ff580 	call	8110ff58 <__sinit>
81114da8:	003fd706 	br	81114d08 <__reset+0xfb0f4d08>
81114dac:	04bfffc4 	movi	r18,-1
81114db0:	003fe806 	br	81114d54 <__reset+0xfb0f4d54>
81114db4:	81400417 	ldw	r5,16(r16)
81114db8:	8809883a 	mov	r4,r17
81114dbc:	11100cc0 	call	811100cc <_free_r>
81114dc0:	003fe706 	br	81114d60 <__reset+0xfb0f4d60>
81114dc4:	0005883a 	mov	r2,zero
81114dc8:	f800283a 	ret

81114dcc <fclose>:
81114dcc:	00a044b4 	movhi	r2,33042
81114dd0:	10819104 	addi	r2,r2,1604
81114dd4:	200b883a 	mov	r5,r4
81114dd8:	11000017 	ldw	r4,0(r2)
81114ddc:	1114cdc1 	jmpi	81114cdc <_fclose_r>

81114de0 <__fputwc>:
81114de0:	defff804 	addi	sp,sp,-32
81114de4:	dcc00415 	stw	r19,16(sp)
81114de8:	dc800315 	stw	r18,12(sp)
81114dec:	dc000115 	stw	r16,4(sp)
81114df0:	dfc00715 	stw	ra,28(sp)
81114df4:	dd400615 	stw	r21,24(sp)
81114df8:	dd000515 	stw	r20,20(sp)
81114dfc:	dc400215 	stw	r17,8(sp)
81114e00:	2027883a 	mov	r19,r4
81114e04:	2825883a 	mov	r18,r5
81114e08:	3021883a 	mov	r16,r6
81114e0c:	1110aa80 	call	81110aa8 <__locale_mb_cur_max>
81114e10:	00c00044 	movi	r3,1
81114e14:	10c03e26 	beq	r2,r3,81114f10 <__fputwc+0x130>
81114e18:	81c01704 	addi	r7,r16,92
81114e1c:	900d883a 	mov	r6,r18
81114e20:	d80b883a 	mov	r5,sp
81114e24:	9809883a 	mov	r4,r19
81114e28:	11151580 	call	81115158 <_wcrtomb_r>
81114e2c:	1029883a 	mov	r20,r2
81114e30:	00bfffc4 	movi	r2,-1
81114e34:	a0802026 	beq	r20,r2,81114eb8 <__fputwc+0xd8>
81114e38:	d9400003 	ldbu	r5,0(sp)
81114e3c:	a0001c26 	beq	r20,zero,81114eb0 <__fputwc+0xd0>
81114e40:	0023883a 	mov	r17,zero
81114e44:	05400284 	movi	r21,10
81114e48:	00000906 	br	81114e70 <__fputwc+0x90>
81114e4c:	80800017 	ldw	r2,0(r16)
81114e50:	11400005 	stb	r5,0(r2)
81114e54:	80c00017 	ldw	r3,0(r16)
81114e58:	18c00044 	addi	r3,r3,1
81114e5c:	80c00015 	stw	r3,0(r16)
81114e60:	8c400044 	addi	r17,r17,1
81114e64:	dc45883a 	add	r2,sp,r17
81114e68:	8d00112e 	bgeu	r17,r20,81114eb0 <__fputwc+0xd0>
81114e6c:	11400003 	ldbu	r5,0(r2)
81114e70:	80c00217 	ldw	r3,8(r16)
81114e74:	18ffffc4 	addi	r3,r3,-1
81114e78:	80c00215 	stw	r3,8(r16)
81114e7c:	183ff30e 	bge	r3,zero,81114e4c <__reset+0xfb0f4e4c>
81114e80:	80800617 	ldw	r2,24(r16)
81114e84:	18801916 	blt	r3,r2,81114eec <__fputwc+0x10c>
81114e88:	80800017 	ldw	r2,0(r16)
81114e8c:	11400005 	stb	r5,0(r2)
81114e90:	80800017 	ldw	r2,0(r16)
81114e94:	10c00003 	ldbu	r3,0(r2)
81114e98:	10800044 	addi	r2,r2,1
81114e9c:	1d402326 	beq	r3,r21,81114f2c <__fputwc+0x14c>
81114ea0:	80800015 	stw	r2,0(r16)
81114ea4:	8c400044 	addi	r17,r17,1
81114ea8:	dc45883a 	add	r2,sp,r17
81114eac:	8d3fef36 	bltu	r17,r20,81114e6c <__reset+0xfb0f4e6c>
81114eb0:	9005883a 	mov	r2,r18
81114eb4:	00000406 	br	81114ec8 <__fputwc+0xe8>
81114eb8:	80c0030b 	ldhu	r3,12(r16)
81114ebc:	a005883a 	mov	r2,r20
81114ec0:	18c01014 	ori	r3,r3,64
81114ec4:	80c0030d 	sth	r3,12(r16)
81114ec8:	dfc00717 	ldw	ra,28(sp)
81114ecc:	dd400617 	ldw	r21,24(sp)
81114ed0:	dd000517 	ldw	r20,20(sp)
81114ed4:	dcc00417 	ldw	r19,16(sp)
81114ed8:	dc800317 	ldw	r18,12(sp)
81114edc:	dc400217 	ldw	r17,8(sp)
81114ee0:	dc000117 	ldw	r16,4(sp)
81114ee4:	dec00804 	addi	sp,sp,32
81114ee8:	f800283a 	ret
81114eec:	800d883a 	mov	r6,r16
81114ef0:	29403fcc 	andi	r5,r5,255
81114ef4:	9809883a 	mov	r4,r19
81114ef8:	1114a0c0 	call	81114a0c <__swbuf_r>
81114efc:	10bfffe0 	cmpeqi	r2,r2,-1
81114f00:	10803fcc 	andi	r2,r2,255
81114f04:	103fd626 	beq	r2,zero,81114e60 <__reset+0xfb0f4e60>
81114f08:	00bfffc4 	movi	r2,-1
81114f0c:	003fee06 	br	81114ec8 <__reset+0xfb0f4ec8>
81114f10:	90ffffc4 	addi	r3,r18,-1
81114f14:	01003f84 	movi	r4,254
81114f18:	20ffbf36 	bltu	r4,r3,81114e18 <__reset+0xfb0f4e18>
81114f1c:	900b883a 	mov	r5,r18
81114f20:	dc800005 	stb	r18,0(sp)
81114f24:	1029883a 	mov	r20,r2
81114f28:	003fc506 	br	81114e40 <__reset+0xfb0f4e40>
81114f2c:	800d883a 	mov	r6,r16
81114f30:	a80b883a 	mov	r5,r21
81114f34:	9809883a 	mov	r4,r19
81114f38:	1114a0c0 	call	81114a0c <__swbuf_r>
81114f3c:	10bfffe0 	cmpeqi	r2,r2,-1
81114f40:	003fef06 	br	81114f00 <__reset+0xfb0f4f00>

81114f44 <_fputwc_r>:
81114f44:	3080030b 	ldhu	r2,12(r6)
81114f48:	10c8000c 	andi	r3,r2,8192
81114f4c:	1800051e 	bne	r3,zero,81114f64 <_fputwc_r+0x20>
81114f50:	30c01917 	ldw	r3,100(r6)
81114f54:	10880014 	ori	r2,r2,8192
81114f58:	3080030d 	sth	r2,12(r6)
81114f5c:	18880014 	ori	r2,r3,8192
81114f60:	30801915 	stw	r2,100(r6)
81114f64:	1114de01 	jmpi	81114de0 <__fputwc>

81114f68 <fputwc>:
81114f68:	00a044b4 	movhi	r2,33042
81114f6c:	defffc04 	addi	sp,sp,-16
81114f70:	10819104 	addi	r2,r2,1604
81114f74:	dc000115 	stw	r16,4(sp)
81114f78:	14000017 	ldw	r16,0(r2)
81114f7c:	dc400215 	stw	r17,8(sp)
81114f80:	dfc00315 	stw	ra,12(sp)
81114f84:	2023883a 	mov	r17,r4
81114f88:	80000226 	beq	r16,zero,81114f94 <fputwc+0x2c>
81114f8c:	80800e17 	ldw	r2,56(r16)
81114f90:	10001026 	beq	r2,zero,81114fd4 <fputwc+0x6c>
81114f94:	2880030b 	ldhu	r2,12(r5)
81114f98:	10c8000c 	andi	r3,r2,8192
81114f9c:	1800051e 	bne	r3,zero,81114fb4 <fputwc+0x4c>
81114fa0:	28c01917 	ldw	r3,100(r5)
81114fa4:	10880014 	ori	r2,r2,8192
81114fa8:	2880030d 	sth	r2,12(r5)
81114fac:	18880014 	ori	r2,r3,8192
81114fb0:	28801915 	stw	r2,100(r5)
81114fb4:	280d883a 	mov	r6,r5
81114fb8:	8009883a 	mov	r4,r16
81114fbc:	880b883a 	mov	r5,r17
81114fc0:	dfc00317 	ldw	ra,12(sp)
81114fc4:	dc400217 	ldw	r17,8(sp)
81114fc8:	dc000117 	ldw	r16,4(sp)
81114fcc:	dec00404 	addi	sp,sp,16
81114fd0:	1114de01 	jmpi	81114de0 <__fputwc>
81114fd4:	8009883a 	mov	r4,r16
81114fd8:	d9400015 	stw	r5,0(sp)
81114fdc:	110ff580 	call	8110ff58 <__sinit>
81114fe0:	d9400017 	ldw	r5,0(sp)
81114fe4:	003feb06 	br	81114f94 <__reset+0xfb0f4f94>

81114fe8 <_fstat_r>:
81114fe8:	defffd04 	addi	sp,sp,-12
81114fec:	2805883a 	mov	r2,r5
81114ff0:	dc000015 	stw	r16,0(sp)
81114ff4:	042044b4 	movhi	r16,33042
81114ff8:	dc400115 	stw	r17,4(sp)
81114ffc:	8401cb04 	addi	r16,r16,1836
81115000:	2023883a 	mov	r17,r4
81115004:	300b883a 	mov	r5,r6
81115008:	1009883a 	mov	r4,r2
8111500c:	dfc00215 	stw	ra,8(sp)
81115010:	80000015 	stw	zero,0(r16)
81115014:	111814c0 	call	8111814c <fstat>
81115018:	00ffffc4 	movi	r3,-1
8111501c:	10c00526 	beq	r2,r3,81115034 <_fstat_r+0x4c>
81115020:	dfc00217 	ldw	ra,8(sp)
81115024:	dc400117 	ldw	r17,4(sp)
81115028:	dc000017 	ldw	r16,0(sp)
8111502c:	dec00304 	addi	sp,sp,12
81115030:	f800283a 	ret
81115034:	80c00017 	ldw	r3,0(r16)
81115038:	183ff926 	beq	r3,zero,81115020 <__reset+0xfb0f5020>
8111503c:	88c00015 	stw	r3,0(r17)
81115040:	003ff706 	br	81115020 <__reset+0xfb0f5020>

81115044 <_isatty_r>:
81115044:	defffd04 	addi	sp,sp,-12
81115048:	dc000015 	stw	r16,0(sp)
8111504c:	042044b4 	movhi	r16,33042
81115050:	dc400115 	stw	r17,4(sp)
81115054:	8401cb04 	addi	r16,r16,1836
81115058:	2023883a 	mov	r17,r4
8111505c:	2809883a 	mov	r4,r5
81115060:	dfc00215 	stw	ra,8(sp)
81115064:	80000015 	stw	zero,0(r16)
81115068:	11183b80 	call	811183b8 <isatty>
8111506c:	00ffffc4 	movi	r3,-1
81115070:	10c00526 	beq	r2,r3,81115088 <_isatty_r+0x44>
81115074:	dfc00217 	ldw	ra,8(sp)
81115078:	dc400117 	ldw	r17,4(sp)
8111507c:	dc000017 	ldw	r16,0(sp)
81115080:	dec00304 	addi	sp,sp,12
81115084:	f800283a 	ret
81115088:	80c00017 	ldw	r3,0(r16)
8111508c:	183ff926 	beq	r3,zero,81115074 <__reset+0xfb0f5074>
81115090:	88c00015 	stw	r3,0(r17)
81115094:	003ff706 	br	81115074 <__reset+0xfb0f5074>

81115098 <_lseek_r>:
81115098:	defffd04 	addi	sp,sp,-12
8111509c:	2805883a 	mov	r2,r5
811150a0:	dc000015 	stw	r16,0(sp)
811150a4:	042044b4 	movhi	r16,33042
811150a8:	dc400115 	stw	r17,4(sp)
811150ac:	300b883a 	mov	r5,r6
811150b0:	8401cb04 	addi	r16,r16,1836
811150b4:	2023883a 	mov	r17,r4
811150b8:	380d883a 	mov	r6,r7
811150bc:	1009883a 	mov	r4,r2
811150c0:	dfc00215 	stw	ra,8(sp)
811150c4:	80000015 	stw	zero,0(r16)
811150c8:	11184980 	call	81118498 <lseek>
811150cc:	00ffffc4 	movi	r3,-1
811150d0:	10c00526 	beq	r2,r3,811150e8 <_lseek_r+0x50>
811150d4:	dfc00217 	ldw	ra,8(sp)
811150d8:	dc400117 	ldw	r17,4(sp)
811150dc:	dc000017 	ldw	r16,0(sp)
811150e0:	dec00304 	addi	sp,sp,12
811150e4:	f800283a 	ret
811150e8:	80c00017 	ldw	r3,0(r16)
811150ec:	183ff926 	beq	r3,zero,811150d4 <__reset+0xfb0f50d4>
811150f0:	88c00015 	stw	r3,0(r17)
811150f4:	003ff706 	br	811150d4 <__reset+0xfb0f50d4>

811150f8 <_read_r>:
811150f8:	defffd04 	addi	sp,sp,-12
811150fc:	2805883a 	mov	r2,r5
81115100:	dc000015 	stw	r16,0(sp)
81115104:	042044b4 	movhi	r16,33042
81115108:	dc400115 	stw	r17,4(sp)
8111510c:	300b883a 	mov	r5,r6
81115110:	8401cb04 	addi	r16,r16,1836
81115114:	2023883a 	mov	r17,r4
81115118:	380d883a 	mov	r6,r7
8111511c:	1009883a 	mov	r4,r2
81115120:	dfc00215 	stw	ra,8(sp)
81115124:	80000015 	stw	zero,0(r16)
81115128:	11188d40 	call	811188d4 <read>
8111512c:	00ffffc4 	movi	r3,-1
81115130:	10c00526 	beq	r2,r3,81115148 <_read_r+0x50>
81115134:	dfc00217 	ldw	ra,8(sp)
81115138:	dc400117 	ldw	r17,4(sp)
8111513c:	dc000017 	ldw	r16,0(sp)
81115140:	dec00304 	addi	sp,sp,12
81115144:	f800283a 	ret
81115148:	80c00017 	ldw	r3,0(r16)
8111514c:	183ff926 	beq	r3,zero,81115134 <__reset+0xfb0f5134>
81115150:	88c00015 	stw	r3,0(r17)
81115154:	003ff706 	br	81115134 <__reset+0xfb0f5134>

81115158 <_wcrtomb_r>:
81115158:	defff604 	addi	sp,sp,-40
8111515c:	00a044b4 	movhi	r2,33042
81115160:	dc800815 	stw	r18,32(sp)
81115164:	dc400715 	stw	r17,28(sp)
81115168:	dc000615 	stw	r16,24(sp)
8111516c:	10819504 	addi	r2,r2,1620
81115170:	dfc00915 	stw	ra,36(sp)
81115174:	2021883a 	mov	r16,r4
81115178:	3823883a 	mov	r17,r7
8111517c:	14800017 	ldw	r18,0(r2)
81115180:	28001426 	beq	r5,zero,811151d4 <_wcrtomb_r+0x7c>
81115184:	d9400415 	stw	r5,16(sp)
81115188:	d9800515 	stw	r6,20(sp)
8111518c:	1110a9c0 	call	81110a9c <__locale_charset>
81115190:	d9800517 	ldw	r6,20(sp)
81115194:	d9400417 	ldw	r5,16(sp)
81115198:	100f883a 	mov	r7,r2
8111519c:	dc400015 	stw	r17,0(sp)
811151a0:	8009883a 	mov	r4,r16
811151a4:	903ee83a 	callr	r18
811151a8:	00ffffc4 	movi	r3,-1
811151ac:	10c0031e 	bne	r2,r3,811151bc <_wcrtomb_r+0x64>
811151b0:	88000015 	stw	zero,0(r17)
811151b4:	00c02284 	movi	r3,138
811151b8:	80c00015 	stw	r3,0(r16)
811151bc:	dfc00917 	ldw	ra,36(sp)
811151c0:	dc800817 	ldw	r18,32(sp)
811151c4:	dc400717 	ldw	r17,28(sp)
811151c8:	dc000617 	ldw	r16,24(sp)
811151cc:	dec00a04 	addi	sp,sp,40
811151d0:	f800283a 	ret
811151d4:	1110a9c0 	call	81110a9c <__locale_charset>
811151d8:	100f883a 	mov	r7,r2
811151dc:	dc400015 	stw	r17,0(sp)
811151e0:	000d883a 	mov	r6,zero
811151e4:	d9400104 	addi	r5,sp,4
811151e8:	8009883a 	mov	r4,r16
811151ec:	903ee83a 	callr	r18
811151f0:	003fed06 	br	811151a8 <__reset+0xfb0f51a8>

811151f4 <wcrtomb>:
811151f4:	defff604 	addi	sp,sp,-40
811151f8:	00a044b4 	movhi	r2,33042
811151fc:	dc800615 	stw	r18,24(sp)
81115200:	dc400515 	stw	r17,20(sp)
81115204:	10819104 	addi	r2,r2,1604
81115208:	dfc00915 	stw	ra,36(sp)
8111520c:	dd000815 	stw	r20,32(sp)
81115210:	dcc00715 	stw	r19,28(sp)
81115214:	dc000415 	stw	r16,16(sp)
81115218:	3025883a 	mov	r18,r6
8111521c:	14400017 	ldw	r17,0(r2)
81115220:	20001926 	beq	r4,zero,81115288 <wcrtomb+0x94>
81115224:	00a044b4 	movhi	r2,33042
81115228:	10819504 	addi	r2,r2,1620
8111522c:	15000017 	ldw	r20,0(r2)
81115230:	2021883a 	mov	r16,r4
81115234:	2827883a 	mov	r19,r5
81115238:	1110a9c0 	call	81110a9c <__locale_charset>
8111523c:	100f883a 	mov	r7,r2
81115240:	dc800015 	stw	r18,0(sp)
81115244:	980d883a 	mov	r6,r19
81115248:	800b883a 	mov	r5,r16
8111524c:	8809883a 	mov	r4,r17
81115250:	a03ee83a 	callr	r20
81115254:	00ffffc4 	movi	r3,-1
81115258:	10c0031e 	bne	r2,r3,81115268 <wcrtomb+0x74>
8111525c:	90000015 	stw	zero,0(r18)
81115260:	00c02284 	movi	r3,138
81115264:	88c00015 	stw	r3,0(r17)
81115268:	dfc00917 	ldw	ra,36(sp)
8111526c:	dd000817 	ldw	r20,32(sp)
81115270:	dcc00717 	ldw	r19,28(sp)
81115274:	dc800617 	ldw	r18,24(sp)
81115278:	dc400517 	ldw	r17,20(sp)
8111527c:	dc000417 	ldw	r16,16(sp)
81115280:	dec00a04 	addi	sp,sp,40
81115284:	f800283a 	ret
81115288:	00a044b4 	movhi	r2,33042
8111528c:	10819504 	addi	r2,r2,1620
81115290:	14000017 	ldw	r16,0(r2)
81115294:	1110a9c0 	call	81110a9c <__locale_charset>
81115298:	100f883a 	mov	r7,r2
8111529c:	dc800015 	stw	r18,0(sp)
811152a0:	000d883a 	mov	r6,zero
811152a4:	d9400104 	addi	r5,sp,4
811152a8:	8809883a 	mov	r4,r17
811152ac:	803ee83a 	callr	r16
811152b0:	003fe806 	br	81115254 <__reset+0xfb0f5254>

811152b4 <__ascii_wctomb>:
811152b4:	28000526 	beq	r5,zero,811152cc <__ascii_wctomb+0x18>
811152b8:	00803fc4 	movi	r2,255
811152bc:	11800536 	bltu	r2,r6,811152d4 <__ascii_wctomb+0x20>
811152c0:	29800005 	stb	r6,0(r5)
811152c4:	00800044 	movi	r2,1
811152c8:	f800283a 	ret
811152cc:	0005883a 	mov	r2,zero
811152d0:	f800283a 	ret
811152d4:	00802284 	movi	r2,138
811152d8:	20800015 	stw	r2,0(r4)
811152dc:	00bfffc4 	movi	r2,-1
811152e0:	f800283a 	ret

811152e4 <_wctomb_r>:
811152e4:	00a044b4 	movhi	r2,33042
811152e8:	defff904 	addi	sp,sp,-28
811152ec:	10819504 	addi	r2,r2,1620
811152f0:	dfc00615 	stw	ra,24(sp)
811152f4:	dc400515 	stw	r17,20(sp)
811152f8:	dc000415 	stw	r16,16(sp)
811152fc:	3823883a 	mov	r17,r7
81115300:	14000017 	ldw	r16,0(r2)
81115304:	d9000115 	stw	r4,4(sp)
81115308:	d9400215 	stw	r5,8(sp)
8111530c:	d9800315 	stw	r6,12(sp)
81115310:	1110a9c0 	call	81110a9c <__locale_charset>
81115314:	d9800317 	ldw	r6,12(sp)
81115318:	d9400217 	ldw	r5,8(sp)
8111531c:	d9000117 	ldw	r4,4(sp)
81115320:	100f883a 	mov	r7,r2
81115324:	dc400015 	stw	r17,0(sp)
81115328:	803ee83a 	callr	r16
8111532c:	dfc00617 	ldw	ra,24(sp)
81115330:	dc400517 	ldw	r17,20(sp)
81115334:	dc000417 	ldw	r16,16(sp)
81115338:	dec00704 	addi	sp,sp,28
8111533c:	f800283a 	ret

81115340 <__udivdi3>:
81115340:	defff504 	addi	sp,sp,-44
81115344:	dcc00415 	stw	r19,16(sp)
81115348:	dc000115 	stw	r16,4(sp)
8111534c:	dfc00a15 	stw	ra,40(sp)
81115350:	df000915 	stw	fp,36(sp)
81115354:	ddc00815 	stw	r23,32(sp)
81115358:	dd800715 	stw	r22,28(sp)
8111535c:	dd400615 	stw	r21,24(sp)
81115360:	dd000515 	stw	r20,20(sp)
81115364:	dc800315 	stw	r18,12(sp)
81115368:	dc400215 	stw	r17,8(sp)
8111536c:	2027883a 	mov	r19,r4
81115370:	2821883a 	mov	r16,r5
81115374:	3800411e 	bne	r7,zero,8111547c <__udivdi3+0x13c>
81115378:	3023883a 	mov	r17,r6
8111537c:	2025883a 	mov	r18,r4
81115380:	2980522e 	bgeu	r5,r6,811154cc <__udivdi3+0x18c>
81115384:	00bfffd4 	movui	r2,65535
81115388:	282d883a 	mov	r22,r5
8111538c:	1180a836 	bltu	r2,r6,81115630 <__udivdi3+0x2f0>
81115390:	00803fc4 	movi	r2,255
81115394:	1185803a 	cmpltu	r2,r2,r6
81115398:	100490fa 	slli	r2,r2,3
8111539c:	3086d83a 	srl	r3,r6,r2
811153a0:	012044b4 	movhi	r4,33042
811153a4:	213915c4 	addi	r4,r4,-7081
811153a8:	20c7883a 	add	r3,r4,r3
811153ac:	18c00003 	ldbu	r3,0(r3)
811153b0:	1885883a 	add	r2,r3,r2
811153b4:	00c00804 	movi	r3,32
811153b8:	1887c83a 	sub	r3,r3,r2
811153bc:	18000526 	beq	r3,zero,811153d4 <__udivdi3+0x94>
811153c0:	80e0983a 	sll	r16,r16,r3
811153c4:	9884d83a 	srl	r2,r19,r2
811153c8:	30e2983a 	sll	r17,r6,r3
811153cc:	98e4983a 	sll	r18,r19,r3
811153d0:	142cb03a 	or	r22,r2,r16
811153d4:	882ad43a 	srli	r21,r17,16
811153d8:	b009883a 	mov	r4,r22
811153dc:	8d3fffcc 	andi	r20,r17,65535
811153e0:	a80b883a 	mov	r5,r21
811153e4:	1115f4c0 	call	81115f4c <__umodsi3>
811153e8:	b009883a 	mov	r4,r22
811153ec:	a80b883a 	mov	r5,r21
811153f0:	1027883a 	mov	r19,r2
811153f4:	1115ee80 	call	81115ee8 <__udivsi3>
811153f8:	102d883a 	mov	r22,r2
811153fc:	9826943a 	slli	r19,r19,16
81115400:	9004d43a 	srli	r2,r18,16
81115404:	a5a1383a 	mul	r16,r20,r22
81115408:	14c4b03a 	or	r2,r2,r19
8111540c:	1400052e 	bgeu	r2,r16,81115424 <__udivdi3+0xe4>
81115410:	1445883a 	add	r2,r2,r17
81115414:	b0ffffc4 	addi	r3,r22,-1
81115418:	14400136 	bltu	r2,r17,81115420 <__udivdi3+0xe0>
8111541c:	14012336 	bltu	r2,r16,811158ac <__udivdi3+0x56c>
81115420:	182d883a 	mov	r22,r3
81115424:	1421c83a 	sub	r16,r2,r16
81115428:	a80b883a 	mov	r5,r21
8111542c:	8009883a 	mov	r4,r16
81115430:	1115f4c0 	call	81115f4c <__umodsi3>
81115434:	1027883a 	mov	r19,r2
81115438:	a80b883a 	mov	r5,r21
8111543c:	8009883a 	mov	r4,r16
81115440:	1115ee80 	call	81115ee8 <__udivsi3>
81115444:	9826943a 	slli	r19,r19,16
81115448:	a0a9383a 	mul	r20,r20,r2
8111544c:	94bfffcc 	andi	r18,r18,65535
81115450:	94e4b03a 	or	r18,r18,r19
81115454:	9500052e 	bgeu	r18,r20,8111546c <__udivdi3+0x12c>
81115458:	8ca5883a 	add	r18,r17,r18
8111545c:	10ffffc4 	addi	r3,r2,-1
81115460:	9440f136 	bltu	r18,r17,81115828 <__udivdi3+0x4e8>
81115464:	9500f02e 	bgeu	r18,r20,81115828 <__udivdi3+0x4e8>
81115468:	10bfff84 	addi	r2,r2,-2
8111546c:	b00c943a 	slli	r6,r22,16
81115470:	0007883a 	mov	r3,zero
81115474:	3084b03a 	or	r2,r6,r2
81115478:	00005906 	br	811155e0 <__udivdi3+0x2a0>
8111547c:	29c05636 	bltu	r5,r7,811155d8 <__udivdi3+0x298>
81115480:	00bfffd4 	movui	r2,65535
81115484:	11c0622e 	bgeu	r2,r7,81115610 <__udivdi3+0x2d0>
81115488:	00804034 	movhi	r2,256
8111548c:	10bfffc4 	addi	r2,r2,-1
81115490:	11c0ee36 	bltu	r2,r7,8111584c <__udivdi3+0x50c>
81115494:	00800404 	movi	r2,16
81115498:	3886d83a 	srl	r3,r7,r2
8111549c:	012044b4 	movhi	r4,33042
811154a0:	213915c4 	addi	r4,r4,-7081
811154a4:	20c7883a 	add	r3,r4,r3
811154a8:	18c00003 	ldbu	r3,0(r3)
811154ac:	05400804 	movi	r21,32
811154b0:	1885883a 	add	r2,r3,r2
811154b4:	a8abc83a 	sub	r21,r21,r2
811154b8:	a800621e 	bne	r21,zero,81115644 <__udivdi3+0x304>
811154bc:	3c00e936 	bltu	r7,r16,81115864 <__udivdi3+0x524>
811154c0:	9985403a 	cmpgeu	r2,r19,r6
811154c4:	0007883a 	mov	r3,zero
811154c8:	00004506 	br	811155e0 <__udivdi3+0x2a0>
811154cc:	3000041e 	bne	r6,zero,811154e0 <__udivdi3+0x1a0>
811154d0:	000b883a 	mov	r5,zero
811154d4:	01000044 	movi	r4,1
811154d8:	1115ee80 	call	81115ee8 <__udivsi3>
811154dc:	1023883a 	mov	r17,r2
811154e0:	00bfffd4 	movui	r2,65535
811154e4:	14404e2e 	bgeu	r2,r17,81115620 <__udivdi3+0x2e0>
811154e8:	00804034 	movhi	r2,256
811154ec:	10bfffc4 	addi	r2,r2,-1
811154f0:	1440d836 	bltu	r2,r17,81115854 <__udivdi3+0x514>
811154f4:	00800404 	movi	r2,16
811154f8:	8886d83a 	srl	r3,r17,r2
811154fc:	012044b4 	movhi	r4,33042
81115500:	213915c4 	addi	r4,r4,-7081
81115504:	20c7883a 	add	r3,r4,r3
81115508:	18c00003 	ldbu	r3,0(r3)
8111550c:	1885883a 	add	r2,r3,r2
81115510:	00c00804 	movi	r3,32
81115514:	1887c83a 	sub	r3,r3,r2
81115518:	18008f1e 	bne	r3,zero,81115758 <__udivdi3+0x418>
8111551c:	882ad43a 	srli	r21,r17,16
81115520:	8461c83a 	sub	r16,r16,r17
81115524:	8d3fffcc 	andi	r20,r17,65535
81115528:	00c00044 	movi	r3,1
8111552c:	8009883a 	mov	r4,r16
81115530:	a80b883a 	mov	r5,r21
81115534:	d8c00015 	stw	r3,0(sp)
81115538:	1115f4c0 	call	81115f4c <__umodsi3>
8111553c:	8009883a 	mov	r4,r16
81115540:	a80b883a 	mov	r5,r21
81115544:	1027883a 	mov	r19,r2
81115548:	1115ee80 	call	81115ee8 <__udivsi3>
8111554c:	9826943a 	slli	r19,r19,16
81115550:	9008d43a 	srli	r4,r18,16
81115554:	1521383a 	mul	r16,r2,r20
81115558:	102d883a 	mov	r22,r2
8111555c:	24c8b03a 	or	r4,r4,r19
81115560:	d8c00017 	ldw	r3,0(sp)
81115564:	2400052e 	bgeu	r4,r16,8111557c <__udivdi3+0x23c>
81115568:	2449883a 	add	r4,r4,r17
8111556c:	b0bfffc4 	addi	r2,r22,-1
81115570:	24400136 	bltu	r4,r17,81115578 <__udivdi3+0x238>
81115574:	2400ca36 	bltu	r4,r16,811158a0 <__udivdi3+0x560>
81115578:	102d883a 	mov	r22,r2
8111557c:	2421c83a 	sub	r16,r4,r16
81115580:	a80b883a 	mov	r5,r21
81115584:	8009883a 	mov	r4,r16
81115588:	d8c00015 	stw	r3,0(sp)
8111558c:	1115f4c0 	call	81115f4c <__umodsi3>
81115590:	1027883a 	mov	r19,r2
81115594:	a80b883a 	mov	r5,r21
81115598:	8009883a 	mov	r4,r16
8111559c:	1115ee80 	call	81115ee8 <__udivsi3>
811155a0:	9826943a 	slli	r19,r19,16
811155a4:	1529383a 	mul	r20,r2,r20
811155a8:	94bfffcc 	andi	r18,r18,65535
811155ac:	94e4b03a 	or	r18,r18,r19
811155b0:	d8c00017 	ldw	r3,0(sp)
811155b4:	9500052e 	bgeu	r18,r20,811155cc <__udivdi3+0x28c>
811155b8:	8ca5883a 	add	r18,r17,r18
811155bc:	113fffc4 	addi	r4,r2,-1
811155c0:	94409736 	bltu	r18,r17,81115820 <__udivdi3+0x4e0>
811155c4:	9500962e 	bgeu	r18,r20,81115820 <__udivdi3+0x4e0>
811155c8:	10bfff84 	addi	r2,r2,-2
811155cc:	b00c943a 	slli	r6,r22,16
811155d0:	3084b03a 	or	r2,r6,r2
811155d4:	00000206 	br	811155e0 <__udivdi3+0x2a0>
811155d8:	0007883a 	mov	r3,zero
811155dc:	0005883a 	mov	r2,zero
811155e0:	dfc00a17 	ldw	ra,40(sp)
811155e4:	df000917 	ldw	fp,36(sp)
811155e8:	ddc00817 	ldw	r23,32(sp)
811155ec:	dd800717 	ldw	r22,28(sp)
811155f0:	dd400617 	ldw	r21,24(sp)
811155f4:	dd000517 	ldw	r20,20(sp)
811155f8:	dcc00417 	ldw	r19,16(sp)
811155fc:	dc800317 	ldw	r18,12(sp)
81115600:	dc400217 	ldw	r17,8(sp)
81115604:	dc000117 	ldw	r16,4(sp)
81115608:	dec00b04 	addi	sp,sp,44
8111560c:	f800283a 	ret
81115610:	00803fc4 	movi	r2,255
81115614:	11c5803a 	cmpltu	r2,r2,r7
81115618:	100490fa 	slli	r2,r2,3
8111561c:	003f9e06 	br	81115498 <__reset+0xfb0f5498>
81115620:	00803fc4 	movi	r2,255
81115624:	1445803a 	cmpltu	r2,r2,r17
81115628:	100490fa 	slli	r2,r2,3
8111562c:	003fb206 	br	811154f8 <__reset+0xfb0f54f8>
81115630:	00804034 	movhi	r2,256
81115634:	10bfffc4 	addi	r2,r2,-1
81115638:	11808836 	bltu	r2,r6,8111585c <__udivdi3+0x51c>
8111563c:	00800404 	movi	r2,16
81115640:	003f5606 	br	8111539c <__reset+0xfb0f539c>
81115644:	30aed83a 	srl	r23,r6,r2
81115648:	3d4e983a 	sll	r7,r7,r21
8111564c:	80acd83a 	srl	r22,r16,r2
81115650:	9884d83a 	srl	r2,r19,r2
81115654:	3deeb03a 	or	r23,r7,r23
81115658:	b824d43a 	srli	r18,r23,16
8111565c:	8560983a 	sll	r16,r16,r21
81115660:	b009883a 	mov	r4,r22
81115664:	900b883a 	mov	r5,r18
81115668:	3568983a 	sll	r20,r6,r21
8111566c:	1420b03a 	or	r16,r2,r16
81115670:	1115f4c0 	call	81115f4c <__umodsi3>
81115674:	b009883a 	mov	r4,r22
81115678:	900b883a 	mov	r5,r18
8111567c:	1023883a 	mov	r17,r2
81115680:	1115ee80 	call	81115ee8 <__udivsi3>
81115684:	8808943a 	slli	r4,r17,16
81115688:	bf3fffcc 	andi	fp,r23,65535
8111568c:	8006d43a 	srli	r3,r16,16
81115690:	e0a3383a 	mul	r17,fp,r2
81115694:	100d883a 	mov	r6,r2
81115698:	1906b03a 	or	r3,r3,r4
8111569c:	1c40042e 	bgeu	r3,r17,811156b0 <__udivdi3+0x370>
811156a0:	1dc7883a 	add	r3,r3,r23
811156a4:	10bfffc4 	addi	r2,r2,-1
811156a8:	1dc0752e 	bgeu	r3,r23,81115880 <__udivdi3+0x540>
811156ac:	100d883a 	mov	r6,r2
811156b0:	1c63c83a 	sub	r17,r3,r17
811156b4:	900b883a 	mov	r5,r18
811156b8:	8809883a 	mov	r4,r17
811156bc:	d9800015 	stw	r6,0(sp)
811156c0:	1115f4c0 	call	81115f4c <__umodsi3>
811156c4:	102d883a 	mov	r22,r2
811156c8:	8809883a 	mov	r4,r17
811156cc:	900b883a 	mov	r5,r18
811156d0:	1115ee80 	call	81115ee8 <__udivsi3>
811156d4:	b02c943a 	slli	r22,r22,16
811156d8:	e089383a 	mul	r4,fp,r2
811156dc:	843fffcc 	andi	r16,r16,65535
811156e0:	85a0b03a 	or	r16,r16,r22
811156e4:	d9800017 	ldw	r6,0(sp)
811156e8:	8100042e 	bgeu	r16,r4,811156fc <__udivdi3+0x3bc>
811156ec:	85e1883a 	add	r16,r16,r23
811156f0:	10ffffc4 	addi	r3,r2,-1
811156f4:	85c05e2e 	bgeu	r16,r23,81115870 <__udivdi3+0x530>
811156f8:	1805883a 	mov	r2,r3
811156fc:	300c943a 	slli	r6,r6,16
81115700:	a17fffcc 	andi	r5,r20,65535
81115704:	a028d43a 	srli	r20,r20,16
81115708:	3084b03a 	or	r2,r6,r2
8111570c:	10ffffcc 	andi	r3,r2,65535
81115710:	100cd43a 	srli	r6,r2,16
81115714:	194f383a 	mul	r7,r3,r5
81115718:	1d07383a 	mul	r3,r3,r20
8111571c:	314b383a 	mul	r5,r6,r5
81115720:	3810d43a 	srli	r8,r7,16
81115724:	8121c83a 	sub	r16,r16,r4
81115728:	1947883a 	add	r3,r3,r5
8111572c:	40c7883a 	add	r3,r8,r3
81115730:	350d383a 	mul	r6,r6,r20
81115734:	1940022e 	bgeu	r3,r5,81115740 <__udivdi3+0x400>
81115738:	01000074 	movhi	r4,1
8111573c:	310d883a 	add	r6,r6,r4
81115740:	1828d43a 	srli	r20,r3,16
81115744:	a18d883a 	add	r6,r20,r6
81115748:	81803e36 	bltu	r16,r6,81115844 <__udivdi3+0x504>
8111574c:	81803826 	beq	r16,r6,81115830 <__udivdi3+0x4f0>
81115750:	0007883a 	mov	r3,zero
81115754:	003fa206 	br	811155e0 <__reset+0xfb0f55e0>
81115758:	88e2983a 	sll	r17,r17,r3
8111575c:	80a8d83a 	srl	r20,r16,r2
81115760:	80e0983a 	sll	r16,r16,r3
81115764:	882ad43a 	srli	r21,r17,16
81115768:	9884d83a 	srl	r2,r19,r2
8111576c:	a009883a 	mov	r4,r20
81115770:	a80b883a 	mov	r5,r21
81115774:	142eb03a 	or	r23,r2,r16
81115778:	98e4983a 	sll	r18,r19,r3
8111577c:	1115f4c0 	call	81115f4c <__umodsi3>
81115780:	a009883a 	mov	r4,r20
81115784:	a80b883a 	mov	r5,r21
81115788:	1021883a 	mov	r16,r2
8111578c:	1115ee80 	call	81115ee8 <__udivsi3>
81115790:	1039883a 	mov	fp,r2
81115794:	8d3fffcc 	andi	r20,r17,65535
81115798:	8020943a 	slli	r16,r16,16
8111579c:	b804d43a 	srli	r2,r23,16
811157a0:	a72d383a 	mul	r22,r20,fp
811157a4:	1404b03a 	or	r2,r2,r16
811157a8:	1580062e 	bgeu	r2,r22,811157c4 <__udivdi3+0x484>
811157ac:	1445883a 	add	r2,r2,r17
811157b0:	e0ffffc4 	addi	r3,fp,-1
811157b4:	14403836 	bltu	r2,r17,81115898 <__udivdi3+0x558>
811157b8:	1580372e 	bgeu	r2,r22,81115898 <__udivdi3+0x558>
811157bc:	e73fff84 	addi	fp,fp,-2
811157c0:	1445883a 	add	r2,r2,r17
811157c4:	15adc83a 	sub	r22,r2,r22
811157c8:	a80b883a 	mov	r5,r21
811157cc:	b009883a 	mov	r4,r22
811157d0:	1115f4c0 	call	81115f4c <__umodsi3>
811157d4:	1027883a 	mov	r19,r2
811157d8:	b009883a 	mov	r4,r22
811157dc:	a80b883a 	mov	r5,r21
811157e0:	1115ee80 	call	81115ee8 <__udivsi3>
811157e4:	9826943a 	slli	r19,r19,16
811157e8:	a0a1383a 	mul	r16,r20,r2
811157ec:	b93fffcc 	andi	r4,r23,65535
811157f0:	24c8b03a 	or	r4,r4,r19
811157f4:	2400062e 	bgeu	r4,r16,81115810 <__udivdi3+0x4d0>
811157f8:	2449883a 	add	r4,r4,r17
811157fc:	10ffffc4 	addi	r3,r2,-1
81115800:	24402336 	bltu	r4,r17,81115890 <__udivdi3+0x550>
81115804:	2400222e 	bgeu	r4,r16,81115890 <__udivdi3+0x550>
81115808:	10bfff84 	addi	r2,r2,-2
8111580c:	2449883a 	add	r4,r4,r17
81115810:	e038943a 	slli	fp,fp,16
81115814:	2421c83a 	sub	r16,r4,r16
81115818:	e086b03a 	or	r3,fp,r2
8111581c:	003f4306 	br	8111552c <__reset+0xfb0f552c>
81115820:	2005883a 	mov	r2,r4
81115824:	003f6906 	br	811155cc <__reset+0xfb0f55cc>
81115828:	1805883a 	mov	r2,r3
8111582c:	003f0f06 	br	8111546c <__reset+0xfb0f546c>
81115830:	1806943a 	slli	r3,r3,16
81115834:	9d66983a 	sll	r19,r19,r21
81115838:	39ffffcc 	andi	r7,r7,65535
8111583c:	19c7883a 	add	r3,r3,r7
81115840:	98ffc32e 	bgeu	r19,r3,81115750 <__reset+0xfb0f5750>
81115844:	10bfffc4 	addi	r2,r2,-1
81115848:	003fc106 	br	81115750 <__reset+0xfb0f5750>
8111584c:	00800604 	movi	r2,24
81115850:	003f1106 	br	81115498 <__reset+0xfb0f5498>
81115854:	00800604 	movi	r2,24
81115858:	003f2706 	br	811154f8 <__reset+0xfb0f54f8>
8111585c:	00800604 	movi	r2,24
81115860:	003ece06 	br	8111539c <__reset+0xfb0f539c>
81115864:	0007883a 	mov	r3,zero
81115868:	00800044 	movi	r2,1
8111586c:	003f5c06 	br	811155e0 <__reset+0xfb0f55e0>
81115870:	813fa12e 	bgeu	r16,r4,811156f8 <__reset+0xfb0f56f8>
81115874:	10bfff84 	addi	r2,r2,-2
81115878:	85e1883a 	add	r16,r16,r23
8111587c:	003f9f06 	br	811156fc <__reset+0xfb0f56fc>
81115880:	1c7f8a2e 	bgeu	r3,r17,811156ac <__reset+0xfb0f56ac>
81115884:	31bfff84 	addi	r6,r6,-2
81115888:	1dc7883a 	add	r3,r3,r23
8111588c:	003f8806 	br	811156b0 <__reset+0xfb0f56b0>
81115890:	1805883a 	mov	r2,r3
81115894:	003fde06 	br	81115810 <__reset+0xfb0f5810>
81115898:	1839883a 	mov	fp,r3
8111589c:	003fc906 	br	811157c4 <__reset+0xfb0f57c4>
811158a0:	b5bfff84 	addi	r22,r22,-2
811158a4:	2449883a 	add	r4,r4,r17
811158a8:	003f3406 	br	8111557c <__reset+0xfb0f557c>
811158ac:	b5bfff84 	addi	r22,r22,-2
811158b0:	1445883a 	add	r2,r2,r17
811158b4:	003edb06 	br	81115424 <__reset+0xfb0f5424>

811158b8 <__umoddi3>:
811158b8:	defff404 	addi	sp,sp,-48
811158bc:	df000a15 	stw	fp,40(sp)
811158c0:	dc400315 	stw	r17,12(sp)
811158c4:	dc000215 	stw	r16,8(sp)
811158c8:	dfc00b15 	stw	ra,44(sp)
811158cc:	ddc00915 	stw	r23,36(sp)
811158d0:	dd800815 	stw	r22,32(sp)
811158d4:	dd400715 	stw	r21,28(sp)
811158d8:	dd000615 	stw	r20,24(sp)
811158dc:	dcc00515 	stw	r19,20(sp)
811158e0:	dc800415 	stw	r18,16(sp)
811158e4:	2021883a 	mov	r16,r4
811158e8:	2823883a 	mov	r17,r5
811158ec:	2839883a 	mov	fp,r5
811158f0:	38003c1e 	bne	r7,zero,811159e4 <__umoddi3+0x12c>
811158f4:	3027883a 	mov	r19,r6
811158f8:	2029883a 	mov	r20,r4
811158fc:	2980512e 	bgeu	r5,r6,81115a44 <__umoddi3+0x18c>
81115900:	00bfffd4 	movui	r2,65535
81115904:	11809a36 	bltu	r2,r6,81115b70 <__umoddi3+0x2b8>
81115908:	01003fc4 	movi	r4,255
8111590c:	2189803a 	cmpltu	r4,r4,r6
81115910:	200890fa 	slli	r4,r4,3
81115914:	3104d83a 	srl	r2,r6,r4
81115918:	00e044b4 	movhi	r3,33042
8111591c:	18f915c4 	addi	r3,r3,-7081
81115920:	1885883a 	add	r2,r3,r2
81115924:	10c00003 	ldbu	r3,0(r2)
81115928:	00800804 	movi	r2,32
8111592c:	1909883a 	add	r4,r3,r4
81115930:	1125c83a 	sub	r18,r2,r4
81115934:	90000526 	beq	r18,zero,8111594c <__umoddi3+0x94>
81115938:	8ca2983a 	sll	r17,r17,r18
8111593c:	8108d83a 	srl	r4,r16,r4
81115940:	34a6983a 	sll	r19,r6,r18
81115944:	84a8983a 	sll	r20,r16,r18
81115948:	2478b03a 	or	fp,r4,r17
8111594c:	982ed43a 	srli	r23,r19,16
81115950:	e009883a 	mov	r4,fp
81115954:	9dbfffcc 	andi	r22,r19,65535
81115958:	b80b883a 	mov	r5,r23
8111595c:	1115f4c0 	call	81115f4c <__umodsi3>
81115960:	e009883a 	mov	r4,fp
81115964:	b80b883a 	mov	r5,r23
81115968:	102b883a 	mov	r21,r2
8111596c:	1115ee80 	call	81115ee8 <__udivsi3>
81115970:	a806943a 	slli	r3,r21,16
81115974:	a008d43a 	srli	r4,r20,16
81115978:	b085383a 	mul	r2,r22,r2
8111597c:	20c8b03a 	or	r4,r4,r3
81115980:	2080032e 	bgeu	r4,r2,81115990 <__umoddi3+0xd8>
81115984:	24c9883a 	add	r4,r4,r19
81115988:	24c00136 	bltu	r4,r19,81115990 <__umoddi3+0xd8>
8111598c:	20811036 	bltu	r4,r2,81115dd0 <__umoddi3+0x518>
81115990:	20abc83a 	sub	r21,r4,r2
81115994:	b80b883a 	mov	r5,r23
81115998:	a809883a 	mov	r4,r21
8111599c:	1115f4c0 	call	81115f4c <__umodsi3>
811159a0:	1023883a 	mov	r17,r2
811159a4:	b80b883a 	mov	r5,r23
811159a8:	a809883a 	mov	r4,r21
811159ac:	1115ee80 	call	81115ee8 <__udivsi3>
811159b0:	8822943a 	slli	r17,r17,16
811159b4:	b085383a 	mul	r2,r22,r2
811159b8:	a0ffffcc 	andi	r3,r20,65535
811159bc:	1c46b03a 	or	r3,r3,r17
811159c0:	1880042e 	bgeu	r3,r2,811159d4 <__umoddi3+0x11c>
811159c4:	1cc7883a 	add	r3,r3,r19
811159c8:	1cc00236 	bltu	r3,r19,811159d4 <__umoddi3+0x11c>
811159cc:	1880012e 	bgeu	r3,r2,811159d4 <__umoddi3+0x11c>
811159d0:	1cc7883a 	add	r3,r3,r19
811159d4:	1885c83a 	sub	r2,r3,r2
811159d8:	1484d83a 	srl	r2,r2,r18
811159dc:	0007883a 	mov	r3,zero
811159e0:	00004f06 	br	81115b20 <__umoddi3+0x268>
811159e4:	29c04c36 	bltu	r5,r7,81115b18 <__umoddi3+0x260>
811159e8:	00bfffd4 	movui	r2,65535
811159ec:	11c0582e 	bgeu	r2,r7,81115b50 <__umoddi3+0x298>
811159f0:	00804034 	movhi	r2,256
811159f4:	10bfffc4 	addi	r2,r2,-1
811159f8:	11c0e736 	bltu	r2,r7,81115d98 <__umoddi3+0x4e0>
811159fc:	01000404 	movi	r4,16
81115a00:	3904d83a 	srl	r2,r7,r4
81115a04:	00e044b4 	movhi	r3,33042
81115a08:	18f915c4 	addi	r3,r3,-7081
81115a0c:	1885883a 	add	r2,r3,r2
81115a10:	14c00003 	ldbu	r19,0(r2)
81115a14:	00c00804 	movi	r3,32
81115a18:	9927883a 	add	r19,r19,r4
81115a1c:	1ce9c83a 	sub	r20,r3,r19
81115a20:	a000581e 	bne	r20,zero,81115b84 <__umoddi3+0x2cc>
81115a24:	3c400136 	bltu	r7,r17,81115a2c <__umoddi3+0x174>
81115a28:	8180eb36 	bltu	r16,r6,81115dd8 <__umoddi3+0x520>
81115a2c:	8185c83a 	sub	r2,r16,r6
81115a30:	89e3c83a 	sub	r17,r17,r7
81115a34:	8089803a 	cmpltu	r4,r16,r2
81115a38:	8939c83a 	sub	fp,r17,r4
81115a3c:	e007883a 	mov	r3,fp
81115a40:	00003706 	br	81115b20 <__umoddi3+0x268>
81115a44:	3000041e 	bne	r6,zero,81115a58 <__umoddi3+0x1a0>
81115a48:	000b883a 	mov	r5,zero
81115a4c:	01000044 	movi	r4,1
81115a50:	1115ee80 	call	81115ee8 <__udivsi3>
81115a54:	1027883a 	mov	r19,r2
81115a58:	00bfffd4 	movui	r2,65535
81115a5c:	14c0402e 	bgeu	r2,r19,81115b60 <__umoddi3+0x2a8>
81115a60:	00804034 	movhi	r2,256
81115a64:	10bfffc4 	addi	r2,r2,-1
81115a68:	14c0cd36 	bltu	r2,r19,81115da0 <__umoddi3+0x4e8>
81115a6c:	00800404 	movi	r2,16
81115a70:	9886d83a 	srl	r3,r19,r2
81115a74:	012044b4 	movhi	r4,33042
81115a78:	213915c4 	addi	r4,r4,-7081
81115a7c:	20c7883a 	add	r3,r4,r3
81115a80:	18c00003 	ldbu	r3,0(r3)
81115a84:	1887883a 	add	r3,r3,r2
81115a88:	00800804 	movi	r2,32
81115a8c:	10e5c83a 	sub	r18,r2,r3
81115a90:	9000901e 	bne	r18,zero,81115cd4 <__umoddi3+0x41c>
81115a94:	982cd43a 	srli	r22,r19,16
81115a98:	8ce3c83a 	sub	r17,r17,r19
81115a9c:	9d7fffcc 	andi	r21,r19,65535
81115aa0:	b00b883a 	mov	r5,r22
81115aa4:	8809883a 	mov	r4,r17
81115aa8:	1115f4c0 	call	81115f4c <__umodsi3>
81115aac:	8809883a 	mov	r4,r17
81115ab0:	b00b883a 	mov	r5,r22
81115ab4:	1021883a 	mov	r16,r2
81115ab8:	1115ee80 	call	81115ee8 <__udivsi3>
81115abc:	8006943a 	slli	r3,r16,16
81115ac0:	a008d43a 	srli	r4,r20,16
81115ac4:	1545383a 	mul	r2,r2,r21
81115ac8:	20c8b03a 	or	r4,r4,r3
81115acc:	2080042e 	bgeu	r4,r2,81115ae0 <__umoddi3+0x228>
81115ad0:	24c9883a 	add	r4,r4,r19
81115ad4:	24c00236 	bltu	r4,r19,81115ae0 <__umoddi3+0x228>
81115ad8:	2080012e 	bgeu	r4,r2,81115ae0 <__umoddi3+0x228>
81115adc:	24c9883a 	add	r4,r4,r19
81115ae0:	20a1c83a 	sub	r16,r4,r2
81115ae4:	b00b883a 	mov	r5,r22
81115ae8:	8009883a 	mov	r4,r16
81115aec:	1115f4c0 	call	81115f4c <__umodsi3>
81115af0:	1023883a 	mov	r17,r2
81115af4:	b00b883a 	mov	r5,r22
81115af8:	8009883a 	mov	r4,r16
81115afc:	1115ee80 	call	81115ee8 <__udivsi3>
81115b00:	8822943a 	slli	r17,r17,16
81115b04:	1545383a 	mul	r2,r2,r21
81115b08:	a53fffcc 	andi	r20,r20,65535
81115b0c:	a446b03a 	or	r3,r20,r17
81115b10:	18bfb02e 	bgeu	r3,r2,811159d4 <__reset+0xfb0f59d4>
81115b14:	003fab06 	br	811159c4 <__reset+0xfb0f59c4>
81115b18:	2005883a 	mov	r2,r4
81115b1c:	2807883a 	mov	r3,r5
81115b20:	dfc00b17 	ldw	ra,44(sp)
81115b24:	df000a17 	ldw	fp,40(sp)
81115b28:	ddc00917 	ldw	r23,36(sp)
81115b2c:	dd800817 	ldw	r22,32(sp)
81115b30:	dd400717 	ldw	r21,28(sp)
81115b34:	dd000617 	ldw	r20,24(sp)
81115b38:	dcc00517 	ldw	r19,20(sp)
81115b3c:	dc800417 	ldw	r18,16(sp)
81115b40:	dc400317 	ldw	r17,12(sp)
81115b44:	dc000217 	ldw	r16,8(sp)
81115b48:	dec00c04 	addi	sp,sp,48
81115b4c:	f800283a 	ret
81115b50:	04c03fc4 	movi	r19,255
81115b54:	99c9803a 	cmpltu	r4,r19,r7
81115b58:	200890fa 	slli	r4,r4,3
81115b5c:	003fa806 	br	81115a00 <__reset+0xfb0f5a00>
81115b60:	00803fc4 	movi	r2,255
81115b64:	14c5803a 	cmpltu	r2,r2,r19
81115b68:	100490fa 	slli	r2,r2,3
81115b6c:	003fc006 	br	81115a70 <__reset+0xfb0f5a70>
81115b70:	00804034 	movhi	r2,256
81115b74:	10bfffc4 	addi	r2,r2,-1
81115b78:	11808b36 	bltu	r2,r6,81115da8 <__umoddi3+0x4f0>
81115b7c:	01000404 	movi	r4,16
81115b80:	003f6406 	br	81115914 <__reset+0xfb0f5914>
81115b84:	34c4d83a 	srl	r2,r6,r19
81115b88:	3d0e983a 	sll	r7,r7,r20
81115b8c:	8cf8d83a 	srl	fp,r17,r19
81115b90:	8d10983a 	sll	r8,r17,r20
81115b94:	38aab03a 	or	r21,r7,r2
81115b98:	a82cd43a 	srli	r22,r21,16
81115b9c:	84e2d83a 	srl	r17,r16,r19
81115ba0:	e009883a 	mov	r4,fp
81115ba4:	b00b883a 	mov	r5,r22
81115ba8:	8a22b03a 	or	r17,r17,r8
81115bac:	3524983a 	sll	r18,r6,r20
81115bb0:	1115f4c0 	call	81115f4c <__umodsi3>
81115bb4:	e009883a 	mov	r4,fp
81115bb8:	b00b883a 	mov	r5,r22
81115bbc:	102f883a 	mov	r23,r2
81115bc0:	1115ee80 	call	81115ee8 <__udivsi3>
81115bc4:	100d883a 	mov	r6,r2
81115bc8:	b808943a 	slli	r4,r23,16
81115bcc:	aa3fffcc 	andi	r8,r21,65535
81115bd0:	8804d43a 	srli	r2,r17,16
81115bd4:	41af383a 	mul	r23,r8,r6
81115bd8:	8520983a 	sll	r16,r16,r20
81115bdc:	1104b03a 	or	r2,r2,r4
81115be0:	15c0042e 	bgeu	r2,r23,81115bf4 <__umoddi3+0x33c>
81115be4:	1545883a 	add	r2,r2,r21
81115be8:	30ffffc4 	addi	r3,r6,-1
81115bec:	1540742e 	bgeu	r2,r21,81115dc0 <__umoddi3+0x508>
81115bf0:	180d883a 	mov	r6,r3
81115bf4:	15efc83a 	sub	r23,r2,r23
81115bf8:	b00b883a 	mov	r5,r22
81115bfc:	b809883a 	mov	r4,r23
81115c00:	d9800115 	stw	r6,4(sp)
81115c04:	da000015 	stw	r8,0(sp)
81115c08:	1115f4c0 	call	81115f4c <__umodsi3>
81115c0c:	b00b883a 	mov	r5,r22
81115c10:	b809883a 	mov	r4,r23
81115c14:	1039883a 	mov	fp,r2
81115c18:	1115ee80 	call	81115ee8 <__udivsi3>
81115c1c:	da000017 	ldw	r8,0(sp)
81115c20:	e038943a 	slli	fp,fp,16
81115c24:	100b883a 	mov	r5,r2
81115c28:	4089383a 	mul	r4,r8,r2
81115c2c:	8a3fffcc 	andi	r8,r17,65535
81115c30:	4710b03a 	or	r8,r8,fp
81115c34:	d9800117 	ldw	r6,4(sp)
81115c38:	4100042e 	bgeu	r8,r4,81115c4c <__umoddi3+0x394>
81115c3c:	4551883a 	add	r8,r8,r21
81115c40:	10bfffc4 	addi	r2,r2,-1
81115c44:	45405a2e 	bgeu	r8,r21,81115db0 <__umoddi3+0x4f8>
81115c48:	100b883a 	mov	r5,r2
81115c4c:	300c943a 	slli	r6,r6,16
81115c50:	91ffffcc 	andi	r7,r18,65535
81115c54:	9004d43a 	srli	r2,r18,16
81115c58:	314cb03a 	or	r6,r6,r5
81115c5c:	317fffcc 	andi	r5,r6,65535
81115c60:	300cd43a 	srli	r6,r6,16
81115c64:	29d3383a 	mul	r9,r5,r7
81115c68:	288b383a 	mul	r5,r5,r2
81115c6c:	31cf383a 	mul	r7,r6,r7
81115c70:	4806d43a 	srli	r3,r9,16
81115c74:	4111c83a 	sub	r8,r8,r4
81115c78:	29cb883a 	add	r5,r5,r7
81115c7c:	194b883a 	add	r5,r3,r5
81115c80:	3085383a 	mul	r2,r6,r2
81115c84:	29c0022e 	bgeu	r5,r7,81115c90 <__umoddi3+0x3d8>
81115c88:	00c00074 	movhi	r3,1
81115c8c:	10c5883a 	add	r2,r2,r3
81115c90:	2808d43a 	srli	r4,r5,16
81115c94:	280a943a 	slli	r5,r5,16
81115c98:	4a7fffcc 	andi	r9,r9,65535
81115c9c:	2085883a 	add	r2,r4,r2
81115ca0:	2a4b883a 	add	r5,r5,r9
81115ca4:	40803636 	bltu	r8,r2,81115d80 <__umoddi3+0x4c8>
81115ca8:	40804d26 	beq	r8,r2,81115de0 <__umoddi3+0x528>
81115cac:	4089c83a 	sub	r4,r8,r2
81115cb0:	280f883a 	mov	r7,r5
81115cb4:	81cfc83a 	sub	r7,r16,r7
81115cb8:	81c7803a 	cmpltu	r3,r16,r7
81115cbc:	20c7c83a 	sub	r3,r4,r3
81115cc0:	1cc4983a 	sll	r2,r3,r19
81115cc4:	3d0ed83a 	srl	r7,r7,r20
81115cc8:	1d06d83a 	srl	r3,r3,r20
81115ccc:	11c4b03a 	or	r2,r2,r7
81115cd0:	003f9306 	br	81115b20 <__reset+0xfb0f5b20>
81115cd4:	9ca6983a 	sll	r19,r19,r18
81115cd8:	88e8d83a 	srl	r20,r17,r3
81115cdc:	80c4d83a 	srl	r2,r16,r3
81115ce0:	982cd43a 	srli	r22,r19,16
81115ce4:	8ca2983a 	sll	r17,r17,r18
81115ce8:	a009883a 	mov	r4,r20
81115cec:	b00b883a 	mov	r5,r22
81115cf0:	1478b03a 	or	fp,r2,r17
81115cf4:	1115f4c0 	call	81115f4c <__umodsi3>
81115cf8:	a009883a 	mov	r4,r20
81115cfc:	b00b883a 	mov	r5,r22
81115d00:	1023883a 	mov	r17,r2
81115d04:	1115ee80 	call	81115ee8 <__udivsi3>
81115d08:	9d7fffcc 	andi	r21,r19,65535
81115d0c:	880a943a 	slli	r5,r17,16
81115d10:	e008d43a 	srli	r4,fp,16
81115d14:	a885383a 	mul	r2,r21,r2
81115d18:	84a8983a 	sll	r20,r16,r18
81115d1c:	2148b03a 	or	r4,r4,r5
81115d20:	2080042e 	bgeu	r4,r2,81115d34 <__umoddi3+0x47c>
81115d24:	24c9883a 	add	r4,r4,r19
81115d28:	24c00236 	bltu	r4,r19,81115d34 <__umoddi3+0x47c>
81115d2c:	2080012e 	bgeu	r4,r2,81115d34 <__umoddi3+0x47c>
81115d30:	24c9883a 	add	r4,r4,r19
81115d34:	20a3c83a 	sub	r17,r4,r2
81115d38:	b00b883a 	mov	r5,r22
81115d3c:	8809883a 	mov	r4,r17
81115d40:	1115f4c0 	call	81115f4c <__umodsi3>
81115d44:	102f883a 	mov	r23,r2
81115d48:	8809883a 	mov	r4,r17
81115d4c:	b00b883a 	mov	r5,r22
81115d50:	1115ee80 	call	81115ee8 <__udivsi3>
81115d54:	b82e943a 	slli	r23,r23,16
81115d58:	a885383a 	mul	r2,r21,r2
81115d5c:	e13fffcc 	andi	r4,fp,65535
81115d60:	25c8b03a 	or	r4,r4,r23
81115d64:	2080042e 	bgeu	r4,r2,81115d78 <__umoddi3+0x4c0>
81115d68:	24c9883a 	add	r4,r4,r19
81115d6c:	24c00236 	bltu	r4,r19,81115d78 <__umoddi3+0x4c0>
81115d70:	2080012e 	bgeu	r4,r2,81115d78 <__umoddi3+0x4c0>
81115d74:	24c9883a 	add	r4,r4,r19
81115d78:	20a3c83a 	sub	r17,r4,r2
81115d7c:	003f4806 	br	81115aa0 <__reset+0xfb0f5aa0>
81115d80:	2c8fc83a 	sub	r7,r5,r18
81115d84:	1545c83a 	sub	r2,r2,r21
81115d88:	29cb803a 	cmpltu	r5,r5,r7
81115d8c:	1145c83a 	sub	r2,r2,r5
81115d90:	4089c83a 	sub	r4,r8,r2
81115d94:	003fc706 	br	81115cb4 <__reset+0xfb0f5cb4>
81115d98:	01000604 	movi	r4,24
81115d9c:	003f1806 	br	81115a00 <__reset+0xfb0f5a00>
81115da0:	00800604 	movi	r2,24
81115da4:	003f3206 	br	81115a70 <__reset+0xfb0f5a70>
81115da8:	01000604 	movi	r4,24
81115dac:	003ed906 	br	81115914 <__reset+0xfb0f5914>
81115db0:	413fa52e 	bgeu	r8,r4,81115c48 <__reset+0xfb0f5c48>
81115db4:	297fff84 	addi	r5,r5,-2
81115db8:	4551883a 	add	r8,r8,r21
81115dbc:	003fa306 	br	81115c4c <__reset+0xfb0f5c4c>
81115dc0:	15ff8b2e 	bgeu	r2,r23,81115bf0 <__reset+0xfb0f5bf0>
81115dc4:	31bfff84 	addi	r6,r6,-2
81115dc8:	1545883a 	add	r2,r2,r21
81115dcc:	003f8906 	br	81115bf4 <__reset+0xfb0f5bf4>
81115dd0:	24c9883a 	add	r4,r4,r19
81115dd4:	003eee06 	br	81115990 <__reset+0xfb0f5990>
81115dd8:	8005883a 	mov	r2,r16
81115ddc:	003f1706 	br	81115a3c <__reset+0xfb0f5a3c>
81115de0:	817fe736 	bltu	r16,r5,81115d80 <__reset+0xfb0f5d80>
81115de4:	280f883a 	mov	r7,r5
81115de8:	0009883a 	mov	r4,zero
81115dec:	003fb106 	br	81115cb4 <__reset+0xfb0f5cb4>

81115df0 <__divsi3>:
81115df0:	20001b16 	blt	r4,zero,81115e60 <__divsi3+0x70>
81115df4:	000f883a 	mov	r7,zero
81115df8:	28001616 	blt	r5,zero,81115e54 <__divsi3+0x64>
81115dfc:	200d883a 	mov	r6,r4
81115e00:	29001a2e 	bgeu	r5,r4,81115e6c <__divsi3+0x7c>
81115e04:	00800804 	movi	r2,32
81115e08:	00c00044 	movi	r3,1
81115e0c:	00000106 	br	81115e14 <__divsi3+0x24>
81115e10:	10000d26 	beq	r2,zero,81115e48 <__divsi3+0x58>
81115e14:	294b883a 	add	r5,r5,r5
81115e18:	10bfffc4 	addi	r2,r2,-1
81115e1c:	18c7883a 	add	r3,r3,r3
81115e20:	293ffb36 	bltu	r5,r4,81115e10 <__reset+0xfb0f5e10>
81115e24:	0005883a 	mov	r2,zero
81115e28:	18000726 	beq	r3,zero,81115e48 <__divsi3+0x58>
81115e2c:	0005883a 	mov	r2,zero
81115e30:	31400236 	bltu	r6,r5,81115e3c <__divsi3+0x4c>
81115e34:	314dc83a 	sub	r6,r6,r5
81115e38:	10c4b03a 	or	r2,r2,r3
81115e3c:	1806d07a 	srli	r3,r3,1
81115e40:	280ad07a 	srli	r5,r5,1
81115e44:	183ffa1e 	bne	r3,zero,81115e30 <__reset+0xfb0f5e30>
81115e48:	38000126 	beq	r7,zero,81115e50 <__divsi3+0x60>
81115e4c:	0085c83a 	sub	r2,zero,r2
81115e50:	f800283a 	ret
81115e54:	014bc83a 	sub	r5,zero,r5
81115e58:	39c0005c 	xori	r7,r7,1
81115e5c:	003fe706 	br	81115dfc <__reset+0xfb0f5dfc>
81115e60:	0109c83a 	sub	r4,zero,r4
81115e64:	01c00044 	movi	r7,1
81115e68:	003fe306 	br	81115df8 <__reset+0xfb0f5df8>
81115e6c:	00c00044 	movi	r3,1
81115e70:	003fee06 	br	81115e2c <__reset+0xfb0f5e2c>

81115e74 <__modsi3>:
81115e74:	20001716 	blt	r4,zero,81115ed4 <__modsi3+0x60>
81115e78:	000f883a 	mov	r7,zero
81115e7c:	2005883a 	mov	r2,r4
81115e80:	28001216 	blt	r5,zero,81115ecc <__modsi3+0x58>
81115e84:	2900162e 	bgeu	r5,r4,81115ee0 <__modsi3+0x6c>
81115e88:	01800804 	movi	r6,32
81115e8c:	00c00044 	movi	r3,1
81115e90:	00000106 	br	81115e98 <__modsi3+0x24>
81115e94:	30000a26 	beq	r6,zero,81115ec0 <__modsi3+0x4c>
81115e98:	294b883a 	add	r5,r5,r5
81115e9c:	31bfffc4 	addi	r6,r6,-1
81115ea0:	18c7883a 	add	r3,r3,r3
81115ea4:	293ffb36 	bltu	r5,r4,81115e94 <__reset+0xfb0f5e94>
81115ea8:	18000526 	beq	r3,zero,81115ec0 <__modsi3+0x4c>
81115eac:	1806d07a 	srli	r3,r3,1
81115eb0:	11400136 	bltu	r2,r5,81115eb8 <__modsi3+0x44>
81115eb4:	1145c83a 	sub	r2,r2,r5
81115eb8:	280ad07a 	srli	r5,r5,1
81115ebc:	183ffb1e 	bne	r3,zero,81115eac <__reset+0xfb0f5eac>
81115ec0:	38000126 	beq	r7,zero,81115ec8 <__modsi3+0x54>
81115ec4:	0085c83a 	sub	r2,zero,r2
81115ec8:	f800283a 	ret
81115ecc:	014bc83a 	sub	r5,zero,r5
81115ed0:	003fec06 	br	81115e84 <__reset+0xfb0f5e84>
81115ed4:	0109c83a 	sub	r4,zero,r4
81115ed8:	01c00044 	movi	r7,1
81115edc:	003fe706 	br	81115e7c <__reset+0xfb0f5e7c>
81115ee0:	00c00044 	movi	r3,1
81115ee4:	003ff106 	br	81115eac <__reset+0xfb0f5eac>

81115ee8 <__udivsi3>:
81115ee8:	200d883a 	mov	r6,r4
81115eec:	2900152e 	bgeu	r5,r4,81115f44 <__udivsi3+0x5c>
81115ef0:	28001416 	blt	r5,zero,81115f44 <__udivsi3+0x5c>
81115ef4:	00800804 	movi	r2,32
81115ef8:	00c00044 	movi	r3,1
81115efc:	00000206 	br	81115f08 <__udivsi3+0x20>
81115f00:	10000e26 	beq	r2,zero,81115f3c <__udivsi3+0x54>
81115f04:	28000516 	blt	r5,zero,81115f1c <__udivsi3+0x34>
81115f08:	294b883a 	add	r5,r5,r5
81115f0c:	10bfffc4 	addi	r2,r2,-1
81115f10:	18c7883a 	add	r3,r3,r3
81115f14:	293ffa36 	bltu	r5,r4,81115f00 <__reset+0xfb0f5f00>
81115f18:	18000826 	beq	r3,zero,81115f3c <__udivsi3+0x54>
81115f1c:	0005883a 	mov	r2,zero
81115f20:	31400236 	bltu	r6,r5,81115f2c <__udivsi3+0x44>
81115f24:	314dc83a 	sub	r6,r6,r5
81115f28:	10c4b03a 	or	r2,r2,r3
81115f2c:	1806d07a 	srli	r3,r3,1
81115f30:	280ad07a 	srli	r5,r5,1
81115f34:	183ffa1e 	bne	r3,zero,81115f20 <__reset+0xfb0f5f20>
81115f38:	f800283a 	ret
81115f3c:	0005883a 	mov	r2,zero
81115f40:	f800283a 	ret
81115f44:	00c00044 	movi	r3,1
81115f48:	003ff406 	br	81115f1c <__reset+0xfb0f5f1c>

81115f4c <__umodsi3>:
81115f4c:	2005883a 	mov	r2,r4
81115f50:	2900122e 	bgeu	r5,r4,81115f9c <__umodsi3+0x50>
81115f54:	28001116 	blt	r5,zero,81115f9c <__umodsi3+0x50>
81115f58:	01800804 	movi	r6,32
81115f5c:	00c00044 	movi	r3,1
81115f60:	00000206 	br	81115f6c <__umodsi3+0x20>
81115f64:	30000c26 	beq	r6,zero,81115f98 <__umodsi3+0x4c>
81115f68:	28000516 	blt	r5,zero,81115f80 <__umodsi3+0x34>
81115f6c:	294b883a 	add	r5,r5,r5
81115f70:	31bfffc4 	addi	r6,r6,-1
81115f74:	18c7883a 	add	r3,r3,r3
81115f78:	293ffa36 	bltu	r5,r4,81115f64 <__reset+0xfb0f5f64>
81115f7c:	18000626 	beq	r3,zero,81115f98 <__umodsi3+0x4c>
81115f80:	1806d07a 	srli	r3,r3,1
81115f84:	11400136 	bltu	r2,r5,81115f8c <__umodsi3+0x40>
81115f88:	1145c83a 	sub	r2,r2,r5
81115f8c:	280ad07a 	srli	r5,r5,1
81115f90:	183ffb1e 	bne	r3,zero,81115f80 <__reset+0xfb0f5f80>
81115f94:	f800283a 	ret
81115f98:	f800283a 	ret
81115f9c:	00c00044 	movi	r3,1
81115fa0:	003ff706 	br	81115f80 <__reset+0xfb0f5f80>

81115fa4 <__adddf3>:
81115fa4:	02c00434 	movhi	r11,16
81115fa8:	5affffc4 	addi	r11,r11,-1
81115fac:	2806d7fa 	srli	r3,r5,31
81115fb0:	2ad4703a 	and	r10,r5,r11
81115fb4:	3ad2703a 	and	r9,r7,r11
81115fb8:	3804d53a 	srli	r2,r7,20
81115fbc:	3018d77a 	srli	r12,r6,29
81115fc0:	280ad53a 	srli	r5,r5,20
81115fc4:	501490fa 	slli	r10,r10,3
81115fc8:	2010d77a 	srli	r8,r4,29
81115fcc:	481290fa 	slli	r9,r9,3
81115fd0:	380ed7fa 	srli	r7,r7,31
81115fd4:	defffb04 	addi	sp,sp,-20
81115fd8:	dc800215 	stw	r18,8(sp)
81115fdc:	dc400115 	stw	r17,4(sp)
81115fe0:	dc000015 	stw	r16,0(sp)
81115fe4:	dfc00415 	stw	ra,16(sp)
81115fe8:	dcc00315 	stw	r19,12(sp)
81115fec:	1c803fcc 	andi	r18,r3,255
81115ff0:	2c01ffcc 	andi	r16,r5,2047
81115ff4:	5210b03a 	or	r8,r10,r8
81115ff8:	202290fa 	slli	r17,r4,3
81115ffc:	1081ffcc 	andi	r2,r2,2047
81116000:	4b12b03a 	or	r9,r9,r12
81116004:	300c90fa 	slli	r6,r6,3
81116008:	91c07526 	beq	r18,r7,811161e0 <__adddf3+0x23c>
8111600c:	8087c83a 	sub	r3,r16,r2
81116010:	00c0ab0e 	bge	zero,r3,811162c0 <__adddf3+0x31c>
81116014:	10002a1e 	bne	r2,zero,811160c0 <__adddf3+0x11c>
81116018:	4984b03a 	or	r2,r9,r6
8111601c:	1000961e 	bne	r2,zero,81116278 <__adddf3+0x2d4>
81116020:	888001cc 	andi	r2,r17,7
81116024:	10000726 	beq	r2,zero,81116044 <__adddf3+0xa0>
81116028:	888003cc 	andi	r2,r17,15
8111602c:	00c00104 	movi	r3,4
81116030:	10c00426 	beq	r2,r3,81116044 <__adddf3+0xa0>
81116034:	88c7883a 	add	r3,r17,r3
81116038:	1c63803a 	cmpltu	r17,r3,r17
8111603c:	4451883a 	add	r8,r8,r17
81116040:	1823883a 	mov	r17,r3
81116044:	4080202c 	andhi	r2,r8,128
81116048:	10005926 	beq	r2,zero,811161b0 <__adddf3+0x20c>
8111604c:	84000044 	addi	r16,r16,1
81116050:	0081ffc4 	movi	r2,2047
81116054:	8080ba26 	beq	r16,r2,81116340 <__adddf3+0x39c>
81116058:	00bfe034 	movhi	r2,65408
8111605c:	10bfffc4 	addi	r2,r2,-1
81116060:	4090703a 	and	r8,r8,r2
81116064:	4004977a 	slli	r2,r8,29
81116068:	4010927a 	slli	r8,r8,9
8111606c:	8822d0fa 	srli	r17,r17,3
81116070:	8401ffcc 	andi	r16,r16,2047
81116074:	4010d33a 	srli	r8,r8,12
81116078:	9007883a 	mov	r3,r18
8111607c:	1444b03a 	or	r2,r2,r17
81116080:	8401ffcc 	andi	r16,r16,2047
81116084:	8020953a 	slli	r16,r16,20
81116088:	18c03fcc 	andi	r3,r3,255
8111608c:	01000434 	movhi	r4,16
81116090:	213fffc4 	addi	r4,r4,-1
81116094:	180697fa 	slli	r3,r3,31
81116098:	4110703a 	and	r8,r8,r4
8111609c:	4410b03a 	or	r8,r8,r16
811160a0:	40c6b03a 	or	r3,r8,r3
811160a4:	dfc00417 	ldw	ra,16(sp)
811160a8:	dcc00317 	ldw	r19,12(sp)
811160ac:	dc800217 	ldw	r18,8(sp)
811160b0:	dc400117 	ldw	r17,4(sp)
811160b4:	dc000017 	ldw	r16,0(sp)
811160b8:	dec00504 	addi	sp,sp,20
811160bc:	f800283a 	ret
811160c0:	0081ffc4 	movi	r2,2047
811160c4:	80bfd626 	beq	r16,r2,81116020 <__reset+0xfb0f6020>
811160c8:	4a402034 	orhi	r9,r9,128
811160cc:	00800e04 	movi	r2,56
811160d0:	10c09f16 	blt	r2,r3,81116350 <__adddf3+0x3ac>
811160d4:	008007c4 	movi	r2,31
811160d8:	10c0c216 	blt	r2,r3,811163e4 <__adddf3+0x440>
811160dc:	00800804 	movi	r2,32
811160e0:	10c5c83a 	sub	r2,r2,r3
811160e4:	488a983a 	sll	r5,r9,r2
811160e8:	30c8d83a 	srl	r4,r6,r3
811160ec:	3084983a 	sll	r2,r6,r2
811160f0:	48c6d83a 	srl	r3,r9,r3
811160f4:	290cb03a 	or	r6,r5,r4
811160f8:	1004c03a 	cmpne	r2,r2,zero
811160fc:	308cb03a 	or	r6,r6,r2
81116100:	898dc83a 	sub	r6,r17,r6
81116104:	89a3803a 	cmpltu	r17,r17,r6
81116108:	40d1c83a 	sub	r8,r8,r3
8111610c:	4451c83a 	sub	r8,r8,r17
81116110:	3023883a 	mov	r17,r6
81116114:	4080202c 	andhi	r2,r8,128
81116118:	10002326 	beq	r2,zero,811161a8 <__adddf3+0x204>
8111611c:	04c02034 	movhi	r19,128
81116120:	9cffffc4 	addi	r19,r19,-1
81116124:	44e6703a 	and	r19,r8,r19
81116128:	98007626 	beq	r19,zero,81116304 <__adddf3+0x360>
8111612c:	9809883a 	mov	r4,r19
81116130:	110b7900 	call	8110b790 <__clzsi2>
81116134:	10fffe04 	addi	r3,r2,-8
81116138:	010007c4 	movi	r4,31
8111613c:	20c07716 	blt	r4,r3,8111631c <__adddf3+0x378>
81116140:	00800804 	movi	r2,32
81116144:	10c5c83a 	sub	r2,r2,r3
81116148:	8884d83a 	srl	r2,r17,r2
8111614c:	98d0983a 	sll	r8,r19,r3
81116150:	88e2983a 	sll	r17,r17,r3
81116154:	1204b03a 	or	r2,r2,r8
81116158:	1c007416 	blt	r3,r16,8111632c <__adddf3+0x388>
8111615c:	1c21c83a 	sub	r16,r3,r16
81116160:	82000044 	addi	r8,r16,1
81116164:	00c007c4 	movi	r3,31
81116168:	1a009116 	blt	r3,r8,811163b0 <__adddf3+0x40c>
8111616c:	00c00804 	movi	r3,32
81116170:	1a07c83a 	sub	r3,r3,r8
81116174:	8a08d83a 	srl	r4,r17,r8
81116178:	88e2983a 	sll	r17,r17,r3
8111617c:	10c6983a 	sll	r3,r2,r3
81116180:	1210d83a 	srl	r8,r2,r8
81116184:	8804c03a 	cmpne	r2,r17,zero
81116188:	1906b03a 	or	r3,r3,r4
8111618c:	18a2b03a 	or	r17,r3,r2
81116190:	0021883a 	mov	r16,zero
81116194:	003fa206 	br	81116020 <__reset+0xfb0f6020>
81116198:	1890b03a 	or	r8,r3,r2
8111619c:	40017d26 	beq	r8,zero,81116794 <__adddf3+0x7f0>
811161a0:	1011883a 	mov	r8,r2
811161a4:	1823883a 	mov	r17,r3
811161a8:	888001cc 	andi	r2,r17,7
811161ac:	103f9e1e 	bne	r2,zero,81116028 <__reset+0xfb0f6028>
811161b0:	4004977a 	slli	r2,r8,29
811161b4:	8822d0fa 	srli	r17,r17,3
811161b8:	4010d0fa 	srli	r8,r8,3
811161bc:	9007883a 	mov	r3,r18
811161c0:	1444b03a 	or	r2,r2,r17
811161c4:	0101ffc4 	movi	r4,2047
811161c8:	81002426 	beq	r16,r4,8111625c <__adddf3+0x2b8>
811161cc:	8120703a 	and	r16,r16,r4
811161d0:	01000434 	movhi	r4,16
811161d4:	213fffc4 	addi	r4,r4,-1
811161d8:	4110703a 	and	r8,r8,r4
811161dc:	003fa806 	br	81116080 <__reset+0xfb0f6080>
811161e0:	8089c83a 	sub	r4,r16,r2
811161e4:	01005e0e 	bge	zero,r4,81116360 <__adddf3+0x3bc>
811161e8:	10002b26 	beq	r2,zero,81116298 <__adddf3+0x2f4>
811161ec:	0081ffc4 	movi	r2,2047
811161f0:	80bf8b26 	beq	r16,r2,81116020 <__reset+0xfb0f6020>
811161f4:	4a402034 	orhi	r9,r9,128
811161f8:	00800e04 	movi	r2,56
811161fc:	1100a40e 	bge	r2,r4,81116490 <__adddf3+0x4ec>
81116200:	498cb03a 	or	r6,r9,r6
81116204:	300ac03a 	cmpne	r5,r6,zero
81116208:	0013883a 	mov	r9,zero
8111620c:	2c4b883a 	add	r5,r5,r17
81116210:	2c63803a 	cmpltu	r17,r5,r17
81116214:	4a11883a 	add	r8,r9,r8
81116218:	8a11883a 	add	r8,r17,r8
8111621c:	2823883a 	mov	r17,r5
81116220:	4080202c 	andhi	r2,r8,128
81116224:	103fe026 	beq	r2,zero,811161a8 <__reset+0xfb0f61a8>
81116228:	84000044 	addi	r16,r16,1
8111622c:	0081ffc4 	movi	r2,2047
81116230:	8080d226 	beq	r16,r2,8111657c <__adddf3+0x5d8>
81116234:	00bfe034 	movhi	r2,65408
81116238:	10bfffc4 	addi	r2,r2,-1
8111623c:	4090703a 	and	r8,r8,r2
81116240:	880ad07a 	srli	r5,r17,1
81116244:	400897fa 	slli	r4,r8,31
81116248:	88c0004c 	andi	r3,r17,1
8111624c:	28e2b03a 	or	r17,r5,r3
81116250:	4010d07a 	srli	r8,r8,1
81116254:	2462b03a 	or	r17,r4,r17
81116258:	003f7106 	br	81116020 <__reset+0xfb0f6020>
8111625c:	4088b03a 	or	r4,r8,r2
81116260:	20014526 	beq	r4,zero,81116778 <__adddf3+0x7d4>
81116264:	01000434 	movhi	r4,16
81116268:	42000234 	orhi	r8,r8,8
8111626c:	213fffc4 	addi	r4,r4,-1
81116270:	4110703a 	and	r8,r8,r4
81116274:	003f8206 	br	81116080 <__reset+0xfb0f6080>
81116278:	18ffffc4 	addi	r3,r3,-1
8111627c:	1800491e 	bne	r3,zero,811163a4 <__adddf3+0x400>
81116280:	898bc83a 	sub	r5,r17,r6
81116284:	8963803a 	cmpltu	r17,r17,r5
81116288:	4251c83a 	sub	r8,r8,r9
8111628c:	4451c83a 	sub	r8,r8,r17
81116290:	2823883a 	mov	r17,r5
81116294:	003f9f06 	br	81116114 <__reset+0xfb0f6114>
81116298:	4984b03a 	or	r2,r9,r6
8111629c:	103f6026 	beq	r2,zero,81116020 <__reset+0xfb0f6020>
811162a0:	213fffc4 	addi	r4,r4,-1
811162a4:	2000931e 	bne	r4,zero,811164f4 <__adddf3+0x550>
811162a8:	898d883a 	add	r6,r17,r6
811162ac:	3463803a 	cmpltu	r17,r6,r17
811162b0:	4251883a 	add	r8,r8,r9
811162b4:	8a11883a 	add	r8,r17,r8
811162b8:	3023883a 	mov	r17,r6
811162bc:	003fd806 	br	81116220 <__reset+0xfb0f6220>
811162c0:	1800541e 	bne	r3,zero,81116414 <__adddf3+0x470>
811162c4:	80800044 	addi	r2,r16,1
811162c8:	1081ffcc 	andi	r2,r2,2047
811162cc:	00c00044 	movi	r3,1
811162d0:	1880a00e 	bge	r3,r2,81116554 <__adddf3+0x5b0>
811162d4:	8989c83a 	sub	r4,r17,r6
811162d8:	8905803a 	cmpltu	r2,r17,r4
811162dc:	4267c83a 	sub	r19,r8,r9
811162e0:	98a7c83a 	sub	r19,r19,r2
811162e4:	9880202c 	andhi	r2,r19,128
811162e8:	10006326 	beq	r2,zero,81116478 <__adddf3+0x4d4>
811162ec:	3463c83a 	sub	r17,r6,r17
811162f0:	4a07c83a 	sub	r3,r9,r8
811162f4:	344d803a 	cmpltu	r6,r6,r17
811162f8:	19a7c83a 	sub	r19,r3,r6
811162fc:	3825883a 	mov	r18,r7
81116300:	983f8a1e 	bne	r19,zero,8111612c <__reset+0xfb0f612c>
81116304:	8809883a 	mov	r4,r17
81116308:	110b7900 	call	8110b790 <__clzsi2>
8111630c:	10800804 	addi	r2,r2,32
81116310:	10fffe04 	addi	r3,r2,-8
81116314:	010007c4 	movi	r4,31
81116318:	20ff890e 	bge	r4,r3,81116140 <__reset+0xfb0f6140>
8111631c:	10bff604 	addi	r2,r2,-40
81116320:	8884983a 	sll	r2,r17,r2
81116324:	0023883a 	mov	r17,zero
81116328:	1c3f8c0e 	bge	r3,r16,8111615c <__reset+0xfb0f615c>
8111632c:	023fe034 	movhi	r8,65408
81116330:	423fffc4 	addi	r8,r8,-1
81116334:	80e1c83a 	sub	r16,r16,r3
81116338:	1210703a 	and	r8,r2,r8
8111633c:	003f3806 	br	81116020 <__reset+0xfb0f6020>
81116340:	9007883a 	mov	r3,r18
81116344:	0011883a 	mov	r8,zero
81116348:	0005883a 	mov	r2,zero
8111634c:	003f4c06 	br	81116080 <__reset+0xfb0f6080>
81116350:	498cb03a 	or	r6,r9,r6
81116354:	300cc03a 	cmpne	r6,r6,zero
81116358:	0007883a 	mov	r3,zero
8111635c:	003f6806 	br	81116100 <__reset+0xfb0f6100>
81116360:	20009c1e 	bne	r4,zero,811165d4 <__adddf3+0x630>
81116364:	80800044 	addi	r2,r16,1
81116368:	1141ffcc 	andi	r5,r2,2047
8111636c:	01000044 	movi	r4,1
81116370:	2140670e 	bge	r4,r5,81116510 <__adddf3+0x56c>
81116374:	0101ffc4 	movi	r4,2047
81116378:	11007f26 	beq	r2,r4,81116578 <__adddf3+0x5d4>
8111637c:	898d883a 	add	r6,r17,r6
81116380:	4247883a 	add	r3,r8,r9
81116384:	3451803a 	cmpltu	r8,r6,r17
81116388:	40d1883a 	add	r8,r8,r3
8111638c:	402297fa 	slli	r17,r8,31
81116390:	300cd07a 	srli	r6,r6,1
81116394:	4010d07a 	srli	r8,r8,1
81116398:	1021883a 	mov	r16,r2
8111639c:	89a2b03a 	or	r17,r17,r6
811163a0:	003f1f06 	br	81116020 <__reset+0xfb0f6020>
811163a4:	0081ffc4 	movi	r2,2047
811163a8:	80bf481e 	bne	r16,r2,811160cc <__reset+0xfb0f60cc>
811163ac:	003f1c06 	br	81116020 <__reset+0xfb0f6020>
811163b0:	843ff844 	addi	r16,r16,-31
811163b4:	01000804 	movi	r4,32
811163b8:	1406d83a 	srl	r3,r2,r16
811163bc:	41005026 	beq	r8,r4,81116500 <__adddf3+0x55c>
811163c0:	01001004 	movi	r4,64
811163c4:	2211c83a 	sub	r8,r4,r8
811163c8:	1204983a 	sll	r2,r2,r8
811163cc:	88a2b03a 	or	r17,r17,r2
811163d0:	8822c03a 	cmpne	r17,r17,zero
811163d4:	1c62b03a 	or	r17,r3,r17
811163d8:	0011883a 	mov	r8,zero
811163dc:	0021883a 	mov	r16,zero
811163e0:	003f7106 	br	811161a8 <__reset+0xfb0f61a8>
811163e4:	193ff804 	addi	r4,r3,-32
811163e8:	00800804 	movi	r2,32
811163ec:	4908d83a 	srl	r4,r9,r4
811163f0:	18804526 	beq	r3,r2,81116508 <__adddf3+0x564>
811163f4:	00801004 	movi	r2,64
811163f8:	10c5c83a 	sub	r2,r2,r3
811163fc:	4886983a 	sll	r3,r9,r2
81116400:	198cb03a 	or	r6,r3,r6
81116404:	300cc03a 	cmpne	r6,r6,zero
81116408:	218cb03a 	or	r6,r4,r6
8111640c:	0007883a 	mov	r3,zero
81116410:	003f3b06 	br	81116100 <__reset+0xfb0f6100>
81116414:	80002a26 	beq	r16,zero,811164c0 <__adddf3+0x51c>
81116418:	0101ffc4 	movi	r4,2047
8111641c:	11006826 	beq	r2,r4,811165c0 <__adddf3+0x61c>
81116420:	00c7c83a 	sub	r3,zero,r3
81116424:	42002034 	orhi	r8,r8,128
81116428:	01000e04 	movi	r4,56
8111642c:	20c07c16 	blt	r4,r3,81116620 <__adddf3+0x67c>
81116430:	010007c4 	movi	r4,31
81116434:	20c0da16 	blt	r4,r3,811167a0 <__adddf3+0x7fc>
81116438:	01000804 	movi	r4,32
8111643c:	20c9c83a 	sub	r4,r4,r3
81116440:	4114983a 	sll	r10,r8,r4
81116444:	88cad83a 	srl	r5,r17,r3
81116448:	8908983a 	sll	r4,r17,r4
8111644c:	40c6d83a 	srl	r3,r8,r3
81116450:	5162b03a 	or	r17,r10,r5
81116454:	2008c03a 	cmpne	r4,r4,zero
81116458:	8922b03a 	or	r17,r17,r4
8111645c:	3463c83a 	sub	r17,r6,r17
81116460:	48c7c83a 	sub	r3,r9,r3
81116464:	344d803a 	cmpltu	r6,r6,r17
81116468:	1991c83a 	sub	r8,r3,r6
8111646c:	1021883a 	mov	r16,r2
81116470:	3825883a 	mov	r18,r7
81116474:	003f2706 	br	81116114 <__reset+0xfb0f6114>
81116478:	24d0b03a 	or	r8,r4,r19
8111647c:	40001b1e 	bne	r8,zero,811164ec <__adddf3+0x548>
81116480:	0005883a 	mov	r2,zero
81116484:	0007883a 	mov	r3,zero
81116488:	0021883a 	mov	r16,zero
8111648c:	003f4d06 	br	811161c4 <__reset+0xfb0f61c4>
81116490:	008007c4 	movi	r2,31
81116494:	11003c16 	blt	r2,r4,81116588 <__adddf3+0x5e4>
81116498:	00800804 	movi	r2,32
8111649c:	1105c83a 	sub	r2,r2,r4
811164a0:	488e983a 	sll	r7,r9,r2
811164a4:	310ad83a 	srl	r5,r6,r4
811164a8:	3084983a 	sll	r2,r6,r2
811164ac:	4912d83a 	srl	r9,r9,r4
811164b0:	394ab03a 	or	r5,r7,r5
811164b4:	1004c03a 	cmpne	r2,r2,zero
811164b8:	288ab03a 	or	r5,r5,r2
811164bc:	003f5306 	br	8111620c <__reset+0xfb0f620c>
811164c0:	4448b03a 	or	r4,r8,r17
811164c4:	20003e26 	beq	r4,zero,811165c0 <__adddf3+0x61c>
811164c8:	00c6303a 	nor	r3,zero,r3
811164cc:	18003a1e 	bne	r3,zero,811165b8 <__adddf3+0x614>
811164d0:	3463c83a 	sub	r17,r6,r17
811164d4:	4a07c83a 	sub	r3,r9,r8
811164d8:	344d803a 	cmpltu	r6,r6,r17
811164dc:	1991c83a 	sub	r8,r3,r6
811164e0:	1021883a 	mov	r16,r2
811164e4:	3825883a 	mov	r18,r7
811164e8:	003f0a06 	br	81116114 <__reset+0xfb0f6114>
811164ec:	2023883a 	mov	r17,r4
811164f0:	003f0d06 	br	81116128 <__reset+0xfb0f6128>
811164f4:	0081ffc4 	movi	r2,2047
811164f8:	80bf3f1e 	bne	r16,r2,811161f8 <__reset+0xfb0f61f8>
811164fc:	003ec806 	br	81116020 <__reset+0xfb0f6020>
81116500:	0005883a 	mov	r2,zero
81116504:	003fb106 	br	811163cc <__reset+0xfb0f63cc>
81116508:	0007883a 	mov	r3,zero
8111650c:	003fbc06 	br	81116400 <__reset+0xfb0f6400>
81116510:	4444b03a 	or	r2,r8,r17
81116514:	8000871e 	bne	r16,zero,81116734 <__adddf3+0x790>
81116518:	1000ba26 	beq	r2,zero,81116804 <__adddf3+0x860>
8111651c:	4984b03a 	or	r2,r9,r6
81116520:	103ebf26 	beq	r2,zero,81116020 <__reset+0xfb0f6020>
81116524:	8985883a 	add	r2,r17,r6
81116528:	4247883a 	add	r3,r8,r9
8111652c:	1451803a 	cmpltu	r8,r2,r17
81116530:	40d1883a 	add	r8,r8,r3
81116534:	40c0202c 	andhi	r3,r8,128
81116538:	1023883a 	mov	r17,r2
8111653c:	183f1a26 	beq	r3,zero,811161a8 <__reset+0xfb0f61a8>
81116540:	00bfe034 	movhi	r2,65408
81116544:	10bfffc4 	addi	r2,r2,-1
81116548:	2021883a 	mov	r16,r4
8111654c:	4090703a 	and	r8,r8,r2
81116550:	003eb306 	br	81116020 <__reset+0xfb0f6020>
81116554:	4444b03a 	or	r2,r8,r17
81116558:	8000291e 	bne	r16,zero,81116600 <__adddf3+0x65c>
8111655c:	10004b1e 	bne	r2,zero,8111668c <__adddf3+0x6e8>
81116560:	4990b03a 	or	r8,r9,r6
81116564:	40008b26 	beq	r8,zero,81116794 <__adddf3+0x7f0>
81116568:	4811883a 	mov	r8,r9
8111656c:	3023883a 	mov	r17,r6
81116570:	3825883a 	mov	r18,r7
81116574:	003eaa06 	br	81116020 <__reset+0xfb0f6020>
81116578:	1021883a 	mov	r16,r2
8111657c:	0011883a 	mov	r8,zero
81116580:	0005883a 	mov	r2,zero
81116584:	003f0f06 	br	811161c4 <__reset+0xfb0f61c4>
81116588:	217ff804 	addi	r5,r4,-32
8111658c:	00800804 	movi	r2,32
81116590:	494ad83a 	srl	r5,r9,r5
81116594:	20807d26 	beq	r4,r2,8111678c <__adddf3+0x7e8>
81116598:	00801004 	movi	r2,64
8111659c:	1109c83a 	sub	r4,r2,r4
811165a0:	4912983a 	sll	r9,r9,r4
811165a4:	498cb03a 	or	r6,r9,r6
811165a8:	300cc03a 	cmpne	r6,r6,zero
811165ac:	298ab03a 	or	r5,r5,r6
811165b0:	0013883a 	mov	r9,zero
811165b4:	003f1506 	br	8111620c <__reset+0xfb0f620c>
811165b8:	0101ffc4 	movi	r4,2047
811165bc:	113f9a1e 	bne	r2,r4,81116428 <__reset+0xfb0f6428>
811165c0:	4811883a 	mov	r8,r9
811165c4:	3023883a 	mov	r17,r6
811165c8:	1021883a 	mov	r16,r2
811165cc:	3825883a 	mov	r18,r7
811165d0:	003e9306 	br	81116020 <__reset+0xfb0f6020>
811165d4:	8000161e 	bne	r16,zero,81116630 <__adddf3+0x68c>
811165d8:	444ab03a 	or	r5,r8,r17
811165dc:	28005126 	beq	r5,zero,81116724 <__adddf3+0x780>
811165e0:	0108303a 	nor	r4,zero,r4
811165e4:	20004d1e 	bne	r4,zero,8111671c <__adddf3+0x778>
811165e8:	89a3883a 	add	r17,r17,r6
811165ec:	4253883a 	add	r9,r8,r9
811165f0:	898d803a 	cmpltu	r6,r17,r6
811165f4:	3251883a 	add	r8,r6,r9
811165f8:	1021883a 	mov	r16,r2
811165fc:	003f0806 	br	81116220 <__reset+0xfb0f6220>
81116600:	1000301e 	bne	r2,zero,811166c4 <__adddf3+0x720>
81116604:	4984b03a 	or	r2,r9,r6
81116608:	10007126 	beq	r2,zero,811167d0 <__adddf3+0x82c>
8111660c:	4811883a 	mov	r8,r9
81116610:	3023883a 	mov	r17,r6
81116614:	3825883a 	mov	r18,r7
81116618:	0401ffc4 	movi	r16,2047
8111661c:	003e8006 	br	81116020 <__reset+0xfb0f6020>
81116620:	4462b03a 	or	r17,r8,r17
81116624:	8822c03a 	cmpne	r17,r17,zero
81116628:	0007883a 	mov	r3,zero
8111662c:	003f8b06 	br	8111645c <__reset+0xfb0f645c>
81116630:	0141ffc4 	movi	r5,2047
81116634:	11403b26 	beq	r2,r5,81116724 <__adddf3+0x780>
81116638:	0109c83a 	sub	r4,zero,r4
8111663c:	42002034 	orhi	r8,r8,128
81116640:	01400e04 	movi	r5,56
81116644:	29006716 	blt	r5,r4,811167e4 <__adddf3+0x840>
81116648:	014007c4 	movi	r5,31
8111664c:	29007016 	blt	r5,r4,81116810 <__adddf3+0x86c>
81116650:	01400804 	movi	r5,32
81116654:	290bc83a 	sub	r5,r5,r4
81116658:	4154983a 	sll	r10,r8,r5
8111665c:	890ed83a 	srl	r7,r17,r4
81116660:	894a983a 	sll	r5,r17,r5
81116664:	4108d83a 	srl	r4,r8,r4
81116668:	51e2b03a 	or	r17,r10,r7
8111666c:	280ac03a 	cmpne	r5,r5,zero
81116670:	8962b03a 	or	r17,r17,r5
81116674:	89a3883a 	add	r17,r17,r6
81116678:	2253883a 	add	r9,r4,r9
8111667c:	898d803a 	cmpltu	r6,r17,r6
81116680:	3251883a 	add	r8,r6,r9
81116684:	1021883a 	mov	r16,r2
81116688:	003ee506 	br	81116220 <__reset+0xfb0f6220>
8111668c:	4984b03a 	or	r2,r9,r6
81116690:	103e6326 	beq	r2,zero,81116020 <__reset+0xfb0f6020>
81116694:	8987c83a 	sub	r3,r17,r6
81116698:	88c9803a 	cmpltu	r4,r17,r3
8111669c:	4245c83a 	sub	r2,r8,r9
811166a0:	1105c83a 	sub	r2,r2,r4
811166a4:	1100202c 	andhi	r4,r2,128
811166a8:	203ebb26 	beq	r4,zero,81116198 <__reset+0xfb0f6198>
811166ac:	3463c83a 	sub	r17,r6,r17
811166b0:	4a07c83a 	sub	r3,r9,r8
811166b4:	344d803a 	cmpltu	r6,r6,r17
811166b8:	1991c83a 	sub	r8,r3,r6
811166bc:	3825883a 	mov	r18,r7
811166c0:	003e5706 	br	81116020 <__reset+0xfb0f6020>
811166c4:	4984b03a 	or	r2,r9,r6
811166c8:	10002e26 	beq	r2,zero,81116784 <__adddf3+0x7e0>
811166cc:	4004d0fa 	srli	r2,r8,3
811166d0:	8822d0fa 	srli	r17,r17,3
811166d4:	4010977a 	slli	r8,r8,29
811166d8:	10c0022c 	andhi	r3,r2,8
811166dc:	4462b03a 	or	r17,r8,r17
811166e0:	18000826 	beq	r3,zero,81116704 <__adddf3+0x760>
811166e4:	4808d0fa 	srli	r4,r9,3
811166e8:	20c0022c 	andhi	r3,r4,8
811166ec:	1800051e 	bne	r3,zero,81116704 <__adddf3+0x760>
811166f0:	300cd0fa 	srli	r6,r6,3
811166f4:	4806977a 	slli	r3,r9,29
811166f8:	2005883a 	mov	r2,r4
811166fc:	3825883a 	mov	r18,r7
81116700:	19a2b03a 	or	r17,r3,r6
81116704:	8810d77a 	srli	r8,r17,29
81116708:	100490fa 	slli	r2,r2,3
8111670c:	882290fa 	slli	r17,r17,3
81116710:	0401ffc4 	movi	r16,2047
81116714:	4090b03a 	or	r8,r8,r2
81116718:	003e4106 	br	81116020 <__reset+0xfb0f6020>
8111671c:	0141ffc4 	movi	r5,2047
81116720:	117fc71e 	bne	r2,r5,81116640 <__reset+0xfb0f6640>
81116724:	4811883a 	mov	r8,r9
81116728:	3023883a 	mov	r17,r6
8111672c:	1021883a 	mov	r16,r2
81116730:	003e3b06 	br	81116020 <__reset+0xfb0f6020>
81116734:	10002f26 	beq	r2,zero,811167f4 <__adddf3+0x850>
81116738:	4984b03a 	or	r2,r9,r6
8111673c:	10001126 	beq	r2,zero,81116784 <__adddf3+0x7e0>
81116740:	4004d0fa 	srli	r2,r8,3
81116744:	8822d0fa 	srli	r17,r17,3
81116748:	4010977a 	slli	r8,r8,29
8111674c:	10c0022c 	andhi	r3,r2,8
81116750:	4462b03a 	or	r17,r8,r17
81116754:	183feb26 	beq	r3,zero,81116704 <__reset+0xfb0f6704>
81116758:	4808d0fa 	srli	r4,r9,3
8111675c:	20c0022c 	andhi	r3,r4,8
81116760:	183fe81e 	bne	r3,zero,81116704 <__reset+0xfb0f6704>
81116764:	300cd0fa 	srli	r6,r6,3
81116768:	4806977a 	slli	r3,r9,29
8111676c:	2005883a 	mov	r2,r4
81116770:	19a2b03a 	or	r17,r3,r6
81116774:	003fe306 	br	81116704 <__reset+0xfb0f6704>
81116778:	0011883a 	mov	r8,zero
8111677c:	0005883a 	mov	r2,zero
81116780:	003e3f06 	br	81116080 <__reset+0xfb0f6080>
81116784:	0401ffc4 	movi	r16,2047
81116788:	003e2506 	br	81116020 <__reset+0xfb0f6020>
8111678c:	0013883a 	mov	r9,zero
81116790:	003f8406 	br	811165a4 <__reset+0xfb0f65a4>
81116794:	0005883a 	mov	r2,zero
81116798:	0007883a 	mov	r3,zero
8111679c:	003e8906 	br	811161c4 <__reset+0xfb0f61c4>
811167a0:	197ff804 	addi	r5,r3,-32
811167a4:	01000804 	movi	r4,32
811167a8:	414ad83a 	srl	r5,r8,r5
811167ac:	19002426 	beq	r3,r4,81116840 <__adddf3+0x89c>
811167b0:	01001004 	movi	r4,64
811167b4:	20c7c83a 	sub	r3,r4,r3
811167b8:	40c6983a 	sll	r3,r8,r3
811167bc:	1c46b03a 	or	r3,r3,r17
811167c0:	1806c03a 	cmpne	r3,r3,zero
811167c4:	28e2b03a 	or	r17,r5,r3
811167c8:	0007883a 	mov	r3,zero
811167cc:	003f2306 	br	8111645c <__reset+0xfb0f645c>
811167d0:	0007883a 	mov	r3,zero
811167d4:	5811883a 	mov	r8,r11
811167d8:	00bfffc4 	movi	r2,-1
811167dc:	0401ffc4 	movi	r16,2047
811167e0:	003e7806 	br	811161c4 <__reset+0xfb0f61c4>
811167e4:	4462b03a 	or	r17,r8,r17
811167e8:	8822c03a 	cmpne	r17,r17,zero
811167ec:	0009883a 	mov	r4,zero
811167f0:	003fa006 	br	81116674 <__reset+0xfb0f6674>
811167f4:	4811883a 	mov	r8,r9
811167f8:	3023883a 	mov	r17,r6
811167fc:	0401ffc4 	movi	r16,2047
81116800:	003e0706 	br	81116020 <__reset+0xfb0f6020>
81116804:	4811883a 	mov	r8,r9
81116808:	3023883a 	mov	r17,r6
8111680c:	003e0406 	br	81116020 <__reset+0xfb0f6020>
81116810:	21fff804 	addi	r7,r4,-32
81116814:	01400804 	movi	r5,32
81116818:	41ced83a 	srl	r7,r8,r7
8111681c:	21400a26 	beq	r4,r5,81116848 <__adddf3+0x8a4>
81116820:	01401004 	movi	r5,64
81116824:	2909c83a 	sub	r4,r5,r4
81116828:	4108983a 	sll	r4,r8,r4
8111682c:	2448b03a 	or	r4,r4,r17
81116830:	2008c03a 	cmpne	r4,r4,zero
81116834:	3922b03a 	or	r17,r7,r4
81116838:	0009883a 	mov	r4,zero
8111683c:	003f8d06 	br	81116674 <__reset+0xfb0f6674>
81116840:	0007883a 	mov	r3,zero
81116844:	003fdd06 	br	811167bc <__reset+0xfb0f67bc>
81116848:	0009883a 	mov	r4,zero
8111684c:	003ff706 	br	8111682c <__reset+0xfb0f682c>

81116850 <__divdf3>:
81116850:	defff204 	addi	sp,sp,-56
81116854:	dd400915 	stw	r21,36(sp)
81116858:	282ad53a 	srli	r21,r5,20
8111685c:	dd000815 	stw	r20,32(sp)
81116860:	2828d7fa 	srli	r20,r5,31
81116864:	dc000415 	stw	r16,16(sp)
81116868:	04000434 	movhi	r16,16
8111686c:	df000c15 	stw	fp,48(sp)
81116870:	843fffc4 	addi	r16,r16,-1
81116874:	dfc00d15 	stw	ra,52(sp)
81116878:	ddc00b15 	stw	r23,44(sp)
8111687c:	dd800a15 	stw	r22,40(sp)
81116880:	dcc00715 	stw	r19,28(sp)
81116884:	dc800615 	stw	r18,24(sp)
81116888:	dc400515 	stw	r17,20(sp)
8111688c:	ad41ffcc 	andi	r21,r21,2047
81116890:	2c20703a 	and	r16,r5,r16
81116894:	a7003fcc 	andi	fp,r20,255
81116898:	a8006126 	beq	r21,zero,81116a20 <__divdf3+0x1d0>
8111689c:	0081ffc4 	movi	r2,2047
811168a0:	2025883a 	mov	r18,r4
811168a4:	a8803726 	beq	r21,r2,81116984 <__divdf3+0x134>
811168a8:	80800434 	orhi	r2,r16,16
811168ac:	100490fa 	slli	r2,r2,3
811168b0:	2020d77a 	srli	r16,r4,29
811168b4:	202490fa 	slli	r18,r4,3
811168b8:	ad7f0044 	addi	r21,r21,-1023
811168bc:	80a0b03a 	or	r16,r16,r2
811168c0:	0027883a 	mov	r19,zero
811168c4:	0013883a 	mov	r9,zero
811168c8:	3804d53a 	srli	r2,r7,20
811168cc:	382cd7fa 	srli	r22,r7,31
811168d0:	04400434 	movhi	r17,16
811168d4:	8c7fffc4 	addi	r17,r17,-1
811168d8:	1081ffcc 	andi	r2,r2,2047
811168dc:	3011883a 	mov	r8,r6
811168e0:	3c62703a 	and	r17,r7,r17
811168e4:	b5c03fcc 	andi	r23,r22,255
811168e8:	10006c26 	beq	r2,zero,81116a9c <__divdf3+0x24c>
811168ec:	00c1ffc4 	movi	r3,2047
811168f0:	10c06426 	beq	r2,r3,81116a84 <__divdf3+0x234>
811168f4:	88c00434 	orhi	r3,r17,16
811168f8:	180690fa 	slli	r3,r3,3
811168fc:	3022d77a 	srli	r17,r6,29
81116900:	301090fa 	slli	r8,r6,3
81116904:	10bf0044 	addi	r2,r2,-1023
81116908:	88e2b03a 	or	r17,r17,r3
8111690c:	000f883a 	mov	r7,zero
81116910:	a58cf03a 	xor	r6,r20,r22
81116914:	3cc8b03a 	or	r4,r7,r19
81116918:	a8abc83a 	sub	r21,r21,r2
8111691c:	008003c4 	movi	r2,15
81116920:	3007883a 	mov	r3,r6
81116924:	34c03fcc 	andi	r19,r6,255
81116928:	11009036 	bltu	r2,r4,81116b6c <__divdf3+0x31c>
8111692c:	200890ba 	slli	r4,r4,2
81116930:	00a04474 	movhi	r2,33041
81116934:	109a5104 	addi	r2,r2,26948
81116938:	2089883a 	add	r4,r4,r2
8111693c:	20800017 	ldw	r2,0(r4)
81116940:	1000683a 	jmp	r2
81116944:	81116b6c 	andhi	r4,r16,17837
81116948:	811169bc 	xorhi	r4,r16,17830
8111694c:	81116b5c 	xori	r4,r16,17837
81116950:	811169b0 	cmpltui	r4,r16,17830
81116954:	81116b5c 	xori	r4,r16,17837
81116958:	81116b30 	cmpltui	r4,r16,17836
8111695c:	81116b5c 	xori	r4,r16,17837
81116960:	811169b0 	cmpltui	r4,r16,17830
81116964:	811169bc 	xorhi	r4,r16,17830
81116968:	811169bc 	xorhi	r4,r16,17830
8111696c:	81116b30 	cmpltui	r4,r16,17836
81116970:	811169b0 	cmpltui	r4,r16,17830
81116974:	811169a0 	cmpeqi	r4,r16,17830
81116978:	811169a0 	cmpeqi	r4,r16,17830
8111697c:	811169a0 	cmpeqi	r4,r16,17830
81116980:	81116e50 	cmplti	r4,r16,17849
81116984:	2404b03a 	or	r2,r4,r16
81116988:	1000661e 	bne	r2,zero,81116b24 <__divdf3+0x2d4>
8111698c:	04c00204 	movi	r19,8
81116990:	0021883a 	mov	r16,zero
81116994:	0025883a 	mov	r18,zero
81116998:	02400084 	movi	r9,2
8111699c:	003fca06 	br	811168c8 <__reset+0xfb0f68c8>
811169a0:	8023883a 	mov	r17,r16
811169a4:	9011883a 	mov	r8,r18
811169a8:	e02f883a 	mov	r23,fp
811169ac:	480f883a 	mov	r7,r9
811169b0:	00800084 	movi	r2,2
811169b4:	3881311e 	bne	r7,r2,81116e7c <__divdf3+0x62c>
811169b8:	b827883a 	mov	r19,r23
811169bc:	98c0004c 	andi	r3,r19,1
811169c0:	0081ffc4 	movi	r2,2047
811169c4:	000b883a 	mov	r5,zero
811169c8:	0025883a 	mov	r18,zero
811169cc:	1004953a 	slli	r2,r2,20
811169d0:	18c03fcc 	andi	r3,r3,255
811169d4:	04400434 	movhi	r17,16
811169d8:	8c7fffc4 	addi	r17,r17,-1
811169dc:	180697fa 	slli	r3,r3,31
811169e0:	2c4a703a 	and	r5,r5,r17
811169e4:	288ab03a 	or	r5,r5,r2
811169e8:	28c6b03a 	or	r3,r5,r3
811169ec:	9005883a 	mov	r2,r18
811169f0:	dfc00d17 	ldw	ra,52(sp)
811169f4:	df000c17 	ldw	fp,48(sp)
811169f8:	ddc00b17 	ldw	r23,44(sp)
811169fc:	dd800a17 	ldw	r22,40(sp)
81116a00:	dd400917 	ldw	r21,36(sp)
81116a04:	dd000817 	ldw	r20,32(sp)
81116a08:	dcc00717 	ldw	r19,28(sp)
81116a0c:	dc800617 	ldw	r18,24(sp)
81116a10:	dc400517 	ldw	r17,20(sp)
81116a14:	dc000417 	ldw	r16,16(sp)
81116a18:	dec00e04 	addi	sp,sp,56
81116a1c:	f800283a 	ret
81116a20:	2404b03a 	or	r2,r4,r16
81116a24:	2027883a 	mov	r19,r4
81116a28:	10003926 	beq	r2,zero,81116b10 <__divdf3+0x2c0>
81116a2c:	80012e26 	beq	r16,zero,81116ee8 <__divdf3+0x698>
81116a30:	8009883a 	mov	r4,r16
81116a34:	d9800315 	stw	r6,12(sp)
81116a38:	d9c00215 	stw	r7,8(sp)
81116a3c:	110b7900 	call	8110b790 <__clzsi2>
81116a40:	d9800317 	ldw	r6,12(sp)
81116a44:	d9c00217 	ldw	r7,8(sp)
81116a48:	113ffd44 	addi	r4,r2,-11
81116a4c:	00c00704 	movi	r3,28
81116a50:	19012116 	blt	r3,r4,81116ed8 <__divdf3+0x688>
81116a54:	00c00744 	movi	r3,29
81116a58:	147ffe04 	addi	r17,r2,-8
81116a5c:	1907c83a 	sub	r3,r3,r4
81116a60:	8460983a 	sll	r16,r16,r17
81116a64:	98c6d83a 	srl	r3,r19,r3
81116a68:	9c64983a 	sll	r18,r19,r17
81116a6c:	1c20b03a 	or	r16,r3,r16
81116a70:	1080fcc4 	addi	r2,r2,1011
81116a74:	00abc83a 	sub	r21,zero,r2
81116a78:	0027883a 	mov	r19,zero
81116a7c:	0013883a 	mov	r9,zero
81116a80:	003f9106 	br	811168c8 <__reset+0xfb0f68c8>
81116a84:	3446b03a 	or	r3,r6,r17
81116a88:	18001f1e 	bne	r3,zero,81116b08 <__divdf3+0x2b8>
81116a8c:	0023883a 	mov	r17,zero
81116a90:	0011883a 	mov	r8,zero
81116a94:	01c00084 	movi	r7,2
81116a98:	003f9d06 	br	81116910 <__reset+0xfb0f6910>
81116a9c:	3446b03a 	or	r3,r6,r17
81116aa0:	18001526 	beq	r3,zero,81116af8 <__divdf3+0x2a8>
81116aa4:	88011b26 	beq	r17,zero,81116f14 <__divdf3+0x6c4>
81116aa8:	8809883a 	mov	r4,r17
81116aac:	d9800315 	stw	r6,12(sp)
81116ab0:	da400115 	stw	r9,4(sp)
81116ab4:	110b7900 	call	8110b790 <__clzsi2>
81116ab8:	d9800317 	ldw	r6,12(sp)
81116abc:	da400117 	ldw	r9,4(sp)
81116ac0:	113ffd44 	addi	r4,r2,-11
81116ac4:	00c00704 	movi	r3,28
81116ac8:	19010e16 	blt	r3,r4,81116f04 <__divdf3+0x6b4>
81116acc:	00c00744 	movi	r3,29
81116ad0:	123ffe04 	addi	r8,r2,-8
81116ad4:	1907c83a 	sub	r3,r3,r4
81116ad8:	8a22983a 	sll	r17,r17,r8
81116adc:	30c6d83a 	srl	r3,r6,r3
81116ae0:	3210983a 	sll	r8,r6,r8
81116ae4:	1c62b03a 	or	r17,r3,r17
81116ae8:	1080fcc4 	addi	r2,r2,1011
81116aec:	0085c83a 	sub	r2,zero,r2
81116af0:	000f883a 	mov	r7,zero
81116af4:	003f8606 	br	81116910 <__reset+0xfb0f6910>
81116af8:	0023883a 	mov	r17,zero
81116afc:	0011883a 	mov	r8,zero
81116b00:	01c00044 	movi	r7,1
81116b04:	003f8206 	br	81116910 <__reset+0xfb0f6910>
81116b08:	01c000c4 	movi	r7,3
81116b0c:	003f8006 	br	81116910 <__reset+0xfb0f6910>
81116b10:	04c00104 	movi	r19,4
81116b14:	0021883a 	mov	r16,zero
81116b18:	0025883a 	mov	r18,zero
81116b1c:	02400044 	movi	r9,1
81116b20:	003f6906 	br	811168c8 <__reset+0xfb0f68c8>
81116b24:	04c00304 	movi	r19,12
81116b28:	024000c4 	movi	r9,3
81116b2c:	003f6606 	br	811168c8 <__reset+0xfb0f68c8>
81116b30:	01400434 	movhi	r5,16
81116b34:	0007883a 	mov	r3,zero
81116b38:	297fffc4 	addi	r5,r5,-1
81116b3c:	04bfffc4 	movi	r18,-1
81116b40:	0081ffc4 	movi	r2,2047
81116b44:	003fa106 	br	811169cc <__reset+0xfb0f69cc>
81116b48:	00c00044 	movi	r3,1
81116b4c:	1887c83a 	sub	r3,r3,r2
81116b50:	01000e04 	movi	r4,56
81116b54:	20c1210e 	bge	r4,r3,81116fdc <__divdf3+0x78c>
81116b58:	98c0004c 	andi	r3,r19,1
81116b5c:	0005883a 	mov	r2,zero
81116b60:	000b883a 	mov	r5,zero
81116b64:	0025883a 	mov	r18,zero
81116b68:	003f9806 	br	811169cc <__reset+0xfb0f69cc>
81116b6c:	8c00fd36 	bltu	r17,r16,81116f64 <__divdf3+0x714>
81116b70:	8440fb26 	beq	r16,r17,81116f60 <__divdf3+0x710>
81116b74:	8007883a 	mov	r3,r16
81116b78:	ad7fffc4 	addi	r21,r21,-1
81116b7c:	0021883a 	mov	r16,zero
81116b80:	4004d63a 	srli	r2,r8,24
81116b84:	8822923a 	slli	r17,r17,8
81116b88:	1809883a 	mov	r4,r3
81116b8c:	402c923a 	slli	r22,r8,8
81116b90:	88b8b03a 	or	fp,r17,r2
81116b94:	e028d43a 	srli	r20,fp,16
81116b98:	d8c00015 	stw	r3,0(sp)
81116b9c:	e5ffffcc 	andi	r23,fp,65535
81116ba0:	a00b883a 	mov	r5,r20
81116ba4:	1115ee80 	call	81115ee8 <__udivsi3>
81116ba8:	d8c00017 	ldw	r3,0(sp)
81116bac:	a00b883a 	mov	r5,r20
81116bb0:	d8800315 	stw	r2,12(sp)
81116bb4:	1809883a 	mov	r4,r3
81116bb8:	1115f4c0 	call	81115f4c <__umodsi3>
81116bbc:	d9800317 	ldw	r6,12(sp)
81116bc0:	1006943a 	slli	r3,r2,16
81116bc4:	9004d43a 	srli	r2,r18,16
81116bc8:	b9a3383a 	mul	r17,r23,r6
81116bcc:	10c4b03a 	or	r2,r2,r3
81116bd0:	1440062e 	bgeu	r2,r17,81116bec <__divdf3+0x39c>
81116bd4:	1705883a 	add	r2,r2,fp
81116bd8:	30ffffc4 	addi	r3,r6,-1
81116bdc:	1700ee36 	bltu	r2,fp,81116f98 <__divdf3+0x748>
81116be0:	1440ed2e 	bgeu	r2,r17,81116f98 <__divdf3+0x748>
81116be4:	31bfff84 	addi	r6,r6,-2
81116be8:	1705883a 	add	r2,r2,fp
81116bec:	1463c83a 	sub	r17,r2,r17
81116bf0:	a00b883a 	mov	r5,r20
81116bf4:	8809883a 	mov	r4,r17
81116bf8:	d9800315 	stw	r6,12(sp)
81116bfc:	1115ee80 	call	81115ee8 <__udivsi3>
81116c00:	a00b883a 	mov	r5,r20
81116c04:	8809883a 	mov	r4,r17
81116c08:	d8800215 	stw	r2,8(sp)
81116c0c:	1115f4c0 	call	81115f4c <__umodsi3>
81116c10:	d9c00217 	ldw	r7,8(sp)
81116c14:	1004943a 	slli	r2,r2,16
81116c18:	94bfffcc 	andi	r18,r18,65535
81116c1c:	b9d1383a 	mul	r8,r23,r7
81116c20:	90a4b03a 	or	r18,r18,r2
81116c24:	d9800317 	ldw	r6,12(sp)
81116c28:	9200062e 	bgeu	r18,r8,81116c44 <__divdf3+0x3f4>
81116c2c:	9725883a 	add	r18,r18,fp
81116c30:	38bfffc4 	addi	r2,r7,-1
81116c34:	9700d636 	bltu	r18,fp,81116f90 <__divdf3+0x740>
81116c38:	9200d52e 	bgeu	r18,r8,81116f90 <__divdf3+0x740>
81116c3c:	39ffff84 	addi	r7,r7,-2
81116c40:	9725883a 	add	r18,r18,fp
81116c44:	3004943a 	slli	r2,r6,16
81116c48:	b012d43a 	srli	r9,r22,16
81116c4c:	b1bfffcc 	andi	r6,r22,65535
81116c50:	11e2b03a 	or	r17,r2,r7
81116c54:	8806d43a 	srli	r3,r17,16
81116c58:	893fffcc 	andi	r4,r17,65535
81116c5c:	218b383a 	mul	r5,r4,r6
81116c60:	30c5383a 	mul	r2,r6,r3
81116c64:	2249383a 	mul	r4,r4,r9
81116c68:	280ed43a 	srli	r7,r5,16
81116c6c:	9225c83a 	sub	r18,r18,r8
81116c70:	2089883a 	add	r4,r4,r2
81116c74:	3909883a 	add	r4,r7,r4
81116c78:	1a47383a 	mul	r3,r3,r9
81116c7c:	2080022e 	bgeu	r4,r2,81116c88 <__divdf3+0x438>
81116c80:	00800074 	movhi	r2,1
81116c84:	1887883a 	add	r3,r3,r2
81116c88:	2004d43a 	srli	r2,r4,16
81116c8c:	2008943a 	slli	r4,r4,16
81116c90:	297fffcc 	andi	r5,r5,65535
81116c94:	10c7883a 	add	r3,r2,r3
81116c98:	2149883a 	add	r4,r4,r5
81116c9c:	90c0a536 	bltu	r18,r3,81116f34 <__divdf3+0x6e4>
81116ca0:	90c0bf26 	beq	r18,r3,81116fa0 <__divdf3+0x750>
81116ca4:	90c7c83a 	sub	r3,r18,r3
81116ca8:	810fc83a 	sub	r7,r16,r4
81116cac:	81e5803a 	cmpltu	r18,r16,r7
81116cb0:	1ca5c83a 	sub	r18,r3,r18
81116cb4:	e480c126 	beq	fp,r18,81116fbc <__divdf3+0x76c>
81116cb8:	a00b883a 	mov	r5,r20
81116cbc:	9009883a 	mov	r4,r18
81116cc0:	d9800315 	stw	r6,12(sp)
81116cc4:	d9c00215 	stw	r7,8(sp)
81116cc8:	da400115 	stw	r9,4(sp)
81116ccc:	1115ee80 	call	81115ee8 <__udivsi3>
81116cd0:	a00b883a 	mov	r5,r20
81116cd4:	9009883a 	mov	r4,r18
81116cd8:	d8800015 	stw	r2,0(sp)
81116cdc:	1115f4c0 	call	81115f4c <__umodsi3>
81116ce0:	d9c00217 	ldw	r7,8(sp)
81116ce4:	da000017 	ldw	r8,0(sp)
81116ce8:	1006943a 	slli	r3,r2,16
81116cec:	3804d43a 	srli	r2,r7,16
81116cf0:	ba21383a 	mul	r16,r23,r8
81116cf4:	d9800317 	ldw	r6,12(sp)
81116cf8:	10c4b03a 	or	r2,r2,r3
81116cfc:	da400117 	ldw	r9,4(sp)
81116d00:	1400062e 	bgeu	r2,r16,81116d1c <__divdf3+0x4cc>
81116d04:	1705883a 	add	r2,r2,fp
81116d08:	40ffffc4 	addi	r3,r8,-1
81116d0c:	1700ad36 	bltu	r2,fp,81116fc4 <__divdf3+0x774>
81116d10:	1400ac2e 	bgeu	r2,r16,81116fc4 <__divdf3+0x774>
81116d14:	423fff84 	addi	r8,r8,-2
81116d18:	1705883a 	add	r2,r2,fp
81116d1c:	1421c83a 	sub	r16,r2,r16
81116d20:	a00b883a 	mov	r5,r20
81116d24:	8009883a 	mov	r4,r16
81116d28:	d9800315 	stw	r6,12(sp)
81116d2c:	d9c00215 	stw	r7,8(sp)
81116d30:	da000015 	stw	r8,0(sp)
81116d34:	da400115 	stw	r9,4(sp)
81116d38:	1115ee80 	call	81115ee8 <__udivsi3>
81116d3c:	8009883a 	mov	r4,r16
81116d40:	a00b883a 	mov	r5,r20
81116d44:	1025883a 	mov	r18,r2
81116d48:	1115f4c0 	call	81115f4c <__umodsi3>
81116d4c:	d9c00217 	ldw	r7,8(sp)
81116d50:	1004943a 	slli	r2,r2,16
81116d54:	bcaf383a 	mul	r23,r23,r18
81116d58:	393fffcc 	andi	r4,r7,65535
81116d5c:	2088b03a 	or	r4,r4,r2
81116d60:	d9800317 	ldw	r6,12(sp)
81116d64:	da000017 	ldw	r8,0(sp)
81116d68:	da400117 	ldw	r9,4(sp)
81116d6c:	25c0062e 	bgeu	r4,r23,81116d88 <__divdf3+0x538>
81116d70:	2709883a 	add	r4,r4,fp
81116d74:	90bfffc4 	addi	r2,r18,-1
81116d78:	27009436 	bltu	r4,fp,81116fcc <__divdf3+0x77c>
81116d7c:	25c0932e 	bgeu	r4,r23,81116fcc <__divdf3+0x77c>
81116d80:	94bfff84 	addi	r18,r18,-2
81116d84:	2709883a 	add	r4,r4,fp
81116d88:	4004943a 	slli	r2,r8,16
81116d8c:	25efc83a 	sub	r23,r4,r23
81116d90:	1490b03a 	or	r8,r2,r18
81116d94:	4008d43a 	srli	r4,r8,16
81116d98:	40ffffcc 	andi	r3,r8,65535
81116d9c:	30c5383a 	mul	r2,r6,r3
81116da0:	1a47383a 	mul	r3,r3,r9
81116da4:	310d383a 	mul	r6,r6,r4
81116da8:	100ad43a 	srli	r5,r2,16
81116dac:	4913383a 	mul	r9,r9,r4
81116db0:	1987883a 	add	r3,r3,r6
81116db4:	28c7883a 	add	r3,r5,r3
81116db8:	1980022e 	bgeu	r3,r6,81116dc4 <__divdf3+0x574>
81116dbc:	01000074 	movhi	r4,1
81116dc0:	4913883a 	add	r9,r9,r4
81116dc4:	1808d43a 	srli	r4,r3,16
81116dc8:	1806943a 	slli	r3,r3,16
81116dcc:	10bfffcc 	andi	r2,r2,65535
81116dd0:	2253883a 	add	r9,r4,r9
81116dd4:	1887883a 	add	r3,r3,r2
81116dd8:	ba403836 	bltu	r23,r9,81116ebc <__divdf3+0x66c>
81116ddc:	ba403626 	beq	r23,r9,81116eb8 <__divdf3+0x668>
81116de0:	42000054 	ori	r8,r8,1
81116de4:	a880ffc4 	addi	r2,r21,1023
81116de8:	00bf570e 	bge	zero,r2,81116b48 <__reset+0xfb0f6b48>
81116dec:	40c001cc 	andi	r3,r8,7
81116df0:	18000726 	beq	r3,zero,81116e10 <__divdf3+0x5c0>
81116df4:	40c003cc 	andi	r3,r8,15
81116df8:	01000104 	movi	r4,4
81116dfc:	19000426 	beq	r3,r4,81116e10 <__divdf3+0x5c0>
81116e00:	4107883a 	add	r3,r8,r4
81116e04:	1a11803a 	cmpltu	r8,r3,r8
81116e08:	8a23883a 	add	r17,r17,r8
81116e0c:	1811883a 	mov	r8,r3
81116e10:	88c0402c 	andhi	r3,r17,256
81116e14:	18000426 	beq	r3,zero,81116e28 <__divdf3+0x5d8>
81116e18:	00ffc034 	movhi	r3,65280
81116e1c:	18ffffc4 	addi	r3,r3,-1
81116e20:	a8810004 	addi	r2,r21,1024
81116e24:	88e2703a 	and	r17,r17,r3
81116e28:	00c1ff84 	movi	r3,2046
81116e2c:	18bee316 	blt	r3,r2,811169bc <__reset+0xfb0f69bc>
81116e30:	8824977a 	slli	r18,r17,29
81116e34:	4010d0fa 	srli	r8,r8,3
81116e38:	8822927a 	slli	r17,r17,9
81116e3c:	1081ffcc 	andi	r2,r2,2047
81116e40:	9224b03a 	or	r18,r18,r8
81116e44:	880ad33a 	srli	r5,r17,12
81116e48:	98c0004c 	andi	r3,r19,1
81116e4c:	003edf06 	br	811169cc <__reset+0xfb0f69cc>
81116e50:	8080022c 	andhi	r2,r16,8
81116e54:	10001226 	beq	r2,zero,81116ea0 <__divdf3+0x650>
81116e58:	8880022c 	andhi	r2,r17,8
81116e5c:	1000101e 	bne	r2,zero,81116ea0 <__divdf3+0x650>
81116e60:	00800434 	movhi	r2,16
81116e64:	89400234 	orhi	r5,r17,8
81116e68:	10bfffc4 	addi	r2,r2,-1
81116e6c:	b007883a 	mov	r3,r22
81116e70:	288a703a 	and	r5,r5,r2
81116e74:	4025883a 	mov	r18,r8
81116e78:	003f3106 	br	81116b40 <__reset+0xfb0f6b40>
81116e7c:	008000c4 	movi	r2,3
81116e80:	3880a626 	beq	r7,r2,8111711c <__divdf3+0x8cc>
81116e84:	00800044 	movi	r2,1
81116e88:	3880521e 	bne	r7,r2,81116fd4 <__divdf3+0x784>
81116e8c:	b807883a 	mov	r3,r23
81116e90:	0005883a 	mov	r2,zero
81116e94:	000b883a 	mov	r5,zero
81116e98:	0025883a 	mov	r18,zero
81116e9c:	003ecb06 	br	811169cc <__reset+0xfb0f69cc>
81116ea0:	00800434 	movhi	r2,16
81116ea4:	81400234 	orhi	r5,r16,8
81116ea8:	10bfffc4 	addi	r2,r2,-1
81116eac:	a007883a 	mov	r3,r20
81116eb0:	288a703a 	and	r5,r5,r2
81116eb4:	003f2206 	br	81116b40 <__reset+0xfb0f6b40>
81116eb8:	183fca26 	beq	r3,zero,81116de4 <__reset+0xfb0f6de4>
81116ebc:	e5ef883a 	add	r23,fp,r23
81116ec0:	40bfffc4 	addi	r2,r8,-1
81116ec4:	bf00392e 	bgeu	r23,fp,81116fac <__divdf3+0x75c>
81116ec8:	1011883a 	mov	r8,r2
81116ecc:	ba7fc41e 	bne	r23,r9,81116de0 <__reset+0xfb0f6de0>
81116ed0:	b0ffc31e 	bne	r22,r3,81116de0 <__reset+0xfb0f6de0>
81116ed4:	003fc306 	br	81116de4 <__reset+0xfb0f6de4>
81116ed8:	143ff604 	addi	r16,r2,-40
81116edc:	9c20983a 	sll	r16,r19,r16
81116ee0:	0025883a 	mov	r18,zero
81116ee4:	003ee206 	br	81116a70 <__reset+0xfb0f6a70>
81116ee8:	d9800315 	stw	r6,12(sp)
81116eec:	d9c00215 	stw	r7,8(sp)
81116ef0:	110b7900 	call	8110b790 <__clzsi2>
81116ef4:	10800804 	addi	r2,r2,32
81116ef8:	d9c00217 	ldw	r7,8(sp)
81116efc:	d9800317 	ldw	r6,12(sp)
81116f00:	003ed106 	br	81116a48 <__reset+0xfb0f6a48>
81116f04:	147ff604 	addi	r17,r2,-40
81116f08:	3462983a 	sll	r17,r6,r17
81116f0c:	0011883a 	mov	r8,zero
81116f10:	003ef506 	br	81116ae8 <__reset+0xfb0f6ae8>
81116f14:	3009883a 	mov	r4,r6
81116f18:	d9800315 	stw	r6,12(sp)
81116f1c:	da400115 	stw	r9,4(sp)
81116f20:	110b7900 	call	8110b790 <__clzsi2>
81116f24:	10800804 	addi	r2,r2,32
81116f28:	da400117 	ldw	r9,4(sp)
81116f2c:	d9800317 	ldw	r6,12(sp)
81116f30:	003ee306 	br	81116ac0 <__reset+0xfb0f6ac0>
81116f34:	85a1883a 	add	r16,r16,r22
81116f38:	8585803a 	cmpltu	r2,r16,r22
81116f3c:	1705883a 	add	r2,r2,fp
81116f40:	14a5883a 	add	r18,r2,r18
81116f44:	88bfffc4 	addi	r2,r17,-1
81116f48:	e4800c2e 	bgeu	fp,r18,81116f7c <__divdf3+0x72c>
81116f4c:	90c03e36 	bltu	r18,r3,81117048 <__divdf3+0x7f8>
81116f50:	1c806926 	beq	r3,r18,811170f8 <__divdf3+0x8a8>
81116f54:	90c7c83a 	sub	r3,r18,r3
81116f58:	1023883a 	mov	r17,r2
81116f5c:	003f5206 	br	81116ca8 <__reset+0xfb0f6ca8>
81116f60:	923f0436 	bltu	r18,r8,81116b74 <__reset+0xfb0f6b74>
81116f64:	800897fa 	slli	r4,r16,31
81116f68:	9004d07a 	srli	r2,r18,1
81116f6c:	8006d07a 	srli	r3,r16,1
81116f70:	902097fa 	slli	r16,r18,31
81116f74:	20a4b03a 	or	r18,r4,r2
81116f78:	003f0106 	br	81116b80 <__reset+0xfb0f6b80>
81116f7c:	e4bff51e 	bne	fp,r18,81116f54 <__reset+0xfb0f6f54>
81116f80:	85bff22e 	bgeu	r16,r22,81116f4c <__reset+0xfb0f6f4c>
81116f84:	e0c7c83a 	sub	r3,fp,r3
81116f88:	1023883a 	mov	r17,r2
81116f8c:	003f4606 	br	81116ca8 <__reset+0xfb0f6ca8>
81116f90:	100f883a 	mov	r7,r2
81116f94:	003f2b06 	br	81116c44 <__reset+0xfb0f6c44>
81116f98:	180d883a 	mov	r6,r3
81116f9c:	003f1306 	br	81116bec <__reset+0xfb0f6bec>
81116fa0:	813fe436 	bltu	r16,r4,81116f34 <__reset+0xfb0f6f34>
81116fa4:	0007883a 	mov	r3,zero
81116fa8:	003f3f06 	br	81116ca8 <__reset+0xfb0f6ca8>
81116fac:	ba402c36 	bltu	r23,r9,81117060 <__divdf3+0x810>
81116fb0:	4dc05426 	beq	r9,r23,81117104 <__divdf3+0x8b4>
81116fb4:	1011883a 	mov	r8,r2
81116fb8:	003f8906 	br	81116de0 <__reset+0xfb0f6de0>
81116fbc:	023fffc4 	movi	r8,-1
81116fc0:	003f8806 	br	81116de4 <__reset+0xfb0f6de4>
81116fc4:	1811883a 	mov	r8,r3
81116fc8:	003f5406 	br	81116d1c <__reset+0xfb0f6d1c>
81116fcc:	1025883a 	mov	r18,r2
81116fd0:	003f6d06 	br	81116d88 <__reset+0xfb0f6d88>
81116fd4:	b827883a 	mov	r19,r23
81116fd8:	003f8206 	br	81116de4 <__reset+0xfb0f6de4>
81116fdc:	010007c4 	movi	r4,31
81116fe0:	20c02616 	blt	r4,r3,8111707c <__divdf3+0x82c>
81116fe4:	00800804 	movi	r2,32
81116fe8:	10c5c83a 	sub	r2,r2,r3
81116fec:	888a983a 	sll	r5,r17,r2
81116ff0:	40c8d83a 	srl	r4,r8,r3
81116ff4:	4084983a 	sll	r2,r8,r2
81116ff8:	88e2d83a 	srl	r17,r17,r3
81116ffc:	2906b03a 	or	r3,r5,r4
81117000:	1004c03a 	cmpne	r2,r2,zero
81117004:	1886b03a 	or	r3,r3,r2
81117008:	188001cc 	andi	r2,r3,7
8111700c:	10000726 	beq	r2,zero,8111702c <__divdf3+0x7dc>
81117010:	188003cc 	andi	r2,r3,15
81117014:	01000104 	movi	r4,4
81117018:	11000426 	beq	r2,r4,8111702c <__divdf3+0x7dc>
8111701c:	1805883a 	mov	r2,r3
81117020:	10c00104 	addi	r3,r2,4
81117024:	1885803a 	cmpltu	r2,r3,r2
81117028:	88a3883a 	add	r17,r17,r2
8111702c:	8880202c 	andhi	r2,r17,128
81117030:	10002726 	beq	r2,zero,811170d0 <__divdf3+0x880>
81117034:	98c0004c 	andi	r3,r19,1
81117038:	00800044 	movi	r2,1
8111703c:	000b883a 	mov	r5,zero
81117040:	0025883a 	mov	r18,zero
81117044:	003e6106 	br	811169cc <__reset+0xfb0f69cc>
81117048:	85a1883a 	add	r16,r16,r22
8111704c:	8585803a 	cmpltu	r2,r16,r22
81117050:	1705883a 	add	r2,r2,fp
81117054:	14a5883a 	add	r18,r2,r18
81117058:	8c7fff84 	addi	r17,r17,-2
8111705c:	003f1106 	br	81116ca4 <__reset+0xfb0f6ca4>
81117060:	b589883a 	add	r4,r22,r22
81117064:	25ad803a 	cmpltu	r22,r4,r22
81117068:	b739883a 	add	fp,r22,fp
8111706c:	40bfff84 	addi	r2,r8,-2
81117070:	bf2f883a 	add	r23,r23,fp
81117074:	202d883a 	mov	r22,r4
81117078:	003f9306 	br	81116ec8 <__reset+0xfb0f6ec8>
8111707c:	013ff844 	movi	r4,-31
81117080:	2085c83a 	sub	r2,r4,r2
81117084:	8888d83a 	srl	r4,r17,r2
81117088:	00800804 	movi	r2,32
8111708c:	18802126 	beq	r3,r2,81117114 <__divdf3+0x8c4>
81117090:	00801004 	movi	r2,64
81117094:	10c5c83a 	sub	r2,r2,r3
81117098:	8884983a 	sll	r2,r17,r2
8111709c:	1204b03a 	or	r2,r2,r8
811170a0:	1004c03a 	cmpne	r2,r2,zero
811170a4:	2084b03a 	or	r2,r4,r2
811170a8:	144001cc 	andi	r17,r2,7
811170ac:	88000d1e 	bne	r17,zero,811170e4 <__divdf3+0x894>
811170b0:	000b883a 	mov	r5,zero
811170b4:	1024d0fa 	srli	r18,r2,3
811170b8:	98c0004c 	andi	r3,r19,1
811170bc:	0005883a 	mov	r2,zero
811170c0:	9464b03a 	or	r18,r18,r17
811170c4:	003e4106 	br	811169cc <__reset+0xfb0f69cc>
811170c8:	1007883a 	mov	r3,r2
811170cc:	0023883a 	mov	r17,zero
811170d0:	880a927a 	slli	r5,r17,9
811170d4:	1805883a 	mov	r2,r3
811170d8:	8822977a 	slli	r17,r17,29
811170dc:	280ad33a 	srli	r5,r5,12
811170e0:	003ff406 	br	811170b4 <__reset+0xfb0f70b4>
811170e4:	10c003cc 	andi	r3,r2,15
811170e8:	01000104 	movi	r4,4
811170ec:	193ff626 	beq	r3,r4,811170c8 <__reset+0xfb0f70c8>
811170f0:	0023883a 	mov	r17,zero
811170f4:	003fca06 	br	81117020 <__reset+0xfb0f7020>
811170f8:	813fd336 	bltu	r16,r4,81117048 <__reset+0xfb0f7048>
811170fc:	1023883a 	mov	r17,r2
81117100:	003fa806 	br	81116fa4 <__reset+0xfb0f6fa4>
81117104:	b0ffd636 	bltu	r22,r3,81117060 <__reset+0xfb0f7060>
81117108:	1011883a 	mov	r8,r2
8111710c:	b0ff341e 	bne	r22,r3,81116de0 <__reset+0xfb0f6de0>
81117110:	003f3406 	br	81116de4 <__reset+0xfb0f6de4>
81117114:	0005883a 	mov	r2,zero
81117118:	003fe006 	br	8111709c <__reset+0xfb0f709c>
8111711c:	00800434 	movhi	r2,16
81117120:	89400234 	orhi	r5,r17,8
81117124:	10bfffc4 	addi	r2,r2,-1
81117128:	b807883a 	mov	r3,r23
8111712c:	288a703a 	and	r5,r5,r2
81117130:	4025883a 	mov	r18,r8
81117134:	003e8206 	br	81116b40 <__reset+0xfb0f6b40>

81117138 <__eqdf2>:
81117138:	2804d53a 	srli	r2,r5,20
8111713c:	3806d53a 	srli	r3,r7,20
81117140:	02000434 	movhi	r8,16
81117144:	423fffc4 	addi	r8,r8,-1
81117148:	1081ffcc 	andi	r2,r2,2047
8111714c:	0281ffc4 	movi	r10,2047
81117150:	2a12703a 	and	r9,r5,r8
81117154:	18c1ffcc 	andi	r3,r3,2047
81117158:	3a10703a 	and	r8,r7,r8
8111715c:	280ad7fa 	srli	r5,r5,31
81117160:	380ed7fa 	srli	r7,r7,31
81117164:	12801026 	beq	r2,r10,811171a8 <__eqdf2+0x70>
81117168:	0281ffc4 	movi	r10,2047
8111716c:	1a800a26 	beq	r3,r10,81117198 <__eqdf2+0x60>
81117170:	10c00226 	beq	r2,r3,8111717c <__eqdf2+0x44>
81117174:	00800044 	movi	r2,1
81117178:	f800283a 	ret
8111717c:	4a3ffd1e 	bne	r9,r8,81117174 <__reset+0xfb0f7174>
81117180:	21bffc1e 	bne	r4,r6,81117174 <__reset+0xfb0f7174>
81117184:	29c00c26 	beq	r5,r7,811171b8 <__eqdf2+0x80>
81117188:	103ffa1e 	bne	r2,zero,81117174 <__reset+0xfb0f7174>
8111718c:	2244b03a 	or	r2,r4,r9
81117190:	1004c03a 	cmpne	r2,r2,zero
81117194:	f800283a 	ret
81117198:	3214b03a 	or	r10,r6,r8
8111719c:	503ff426 	beq	r10,zero,81117170 <__reset+0xfb0f7170>
811171a0:	00800044 	movi	r2,1
811171a4:	f800283a 	ret
811171a8:	2254b03a 	or	r10,r4,r9
811171ac:	503fee26 	beq	r10,zero,81117168 <__reset+0xfb0f7168>
811171b0:	00800044 	movi	r2,1
811171b4:	f800283a 	ret
811171b8:	0005883a 	mov	r2,zero
811171bc:	f800283a 	ret

811171c0 <__gedf2>:
811171c0:	2804d53a 	srli	r2,r5,20
811171c4:	3806d53a 	srli	r3,r7,20
811171c8:	02000434 	movhi	r8,16
811171cc:	423fffc4 	addi	r8,r8,-1
811171d0:	1081ffcc 	andi	r2,r2,2047
811171d4:	0241ffc4 	movi	r9,2047
811171d8:	2a14703a 	and	r10,r5,r8
811171dc:	18c1ffcc 	andi	r3,r3,2047
811171e0:	3a10703a 	and	r8,r7,r8
811171e4:	280ad7fa 	srli	r5,r5,31
811171e8:	380ed7fa 	srli	r7,r7,31
811171ec:	12401d26 	beq	r2,r9,81117264 <__gedf2+0xa4>
811171f0:	0241ffc4 	movi	r9,2047
811171f4:	1a401226 	beq	r3,r9,81117240 <__gedf2+0x80>
811171f8:	1000081e 	bne	r2,zero,8111721c <__gedf2+0x5c>
811171fc:	2296b03a 	or	r11,r4,r10
81117200:	5813003a 	cmpeq	r9,r11,zero
81117204:	1800091e 	bne	r3,zero,8111722c <__gedf2+0x6c>
81117208:	3218b03a 	or	r12,r6,r8
8111720c:	6000071e 	bne	r12,zero,8111722c <__gedf2+0x6c>
81117210:	0005883a 	mov	r2,zero
81117214:	5800101e 	bne	r11,zero,81117258 <__gedf2+0x98>
81117218:	f800283a 	ret
8111721c:	18000c1e 	bne	r3,zero,81117250 <__gedf2+0x90>
81117220:	3212b03a 	or	r9,r6,r8
81117224:	48000c26 	beq	r9,zero,81117258 <__gedf2+0x98>
81117228:	0013883a 	mov	r9,zero
8111722c:	39c03fcc 	andi	r7,r7,255
81117230:	48000826 	beq	r9,zero,81117254 <__gedf2+0x94>
81117234:	38000926 	beq	r7,zero,8111725c <__gedf2+0x9c>
81117238:	00800044 	movi	r2,1
8111723c:	f800283a 	ret
81117240:	3212b03a 	or	r9,r6,r8
81117244:	483fec26 	beq	r9,zero,811171f8 <__reset+0xfb0f71f8>
81117248:	00bfff84 	movi	r2,-2
8111724c:	f800283a 	ret
81117250:	39c03fcc 	andi	r7,r7,255
81117254:	29c00626 	beq	r5,r7,81117270 <__gedf2+0xb0>
81117258:	283ff726 	beq	r5,zero,81117238 <__reset+0xfb0f7238>
8111725c:	00bfffc4 	movi	r2,-1
81117260:	f800283a 	ret
81117264:	2292b03a 	or	r9,r4,r10
81117268:	483fe126 	beq	r9,zero,811171f0 <__reset+0xfb0f71f0>
8111726c:	003ff606 	br	81117248 <__reset+0xfb0f7248>
81117270:	18bff916 	blt	r3,r2,81117258 <__reset+0xfb0f7258>
81117274:	10c00316 	blt	r2,r3,81117284 <__gedf2+0xc4>
81117278:	42bff736 	bltu	r8,r10,81117258 <__reset+0xfb0f7258>
8111727c:	52000326 	beq	r10,r8,8111728c <__gedf2+0xcc>
81117280:	5200042e 	bgeu	r10,r8,81117294 <__gedf2+0xd4>
81117284:	283fec1e 	bne	r5,zero,81117238 <__reset+0xfb0f7238>
81117288:	003ff406 	br	8111725c <__reset+0xfb0f725c>
8111728c:	313ff236 	bltu	r6,r4,81117258 <__reset+0xfb0f7258>
81117290:	21bffc36 	bltu	r4,r6,81117284 <__reset+0xfb0f7284>
81117294:	0005883a 	mov	r2,zero
81117298:	f800283a 	ret

8111729c <__ledf2>:
8111729c:	2804d53a 	srli	r2,r5,20
811172a0:	3810d53a 	srli	r8,r7,20
811172a4:	00c00434 	movhi	r3,16
811172a8:	18ffffc4 	addi	r3,r3,-1
811172ac:	1081ffcc 	andi	r2,r2,2047
811172b0:	0241ffc4 	movi	r9,2047
811172b4:	28d4703a 	and	r10,r5,r3
811172b8:	4201ffcc 	andi	r8,r8,2047
811172bc:	38c6703a 	and	r3,r7,r3
811172c0:	280ad7fa 	srli	r5,r5,31
811172c4:	380ed7fa 	srli	r7,r7,31
811172c8:	12401f26 	beq	r2,r9,81117348 <__ledf2+0xac>
811172cc:	0241ffc4 	movi	r9,2047
811172d0:	42401426 	beq	r8,r9,81117324 <__ledf2+0x88>
811172d4:	1000091e 	bne	r2,zero,811172fc <__ledf2+0x60>
811172d8:	2296b03a 	or	r11,r4,r10
811172dc:	5813003a 	cmpeq	r9,r11,zero
811172e0:	29403fcc 	andi	r5,r5,255
811172e4:	40000a1e 	bne	r8,zero,81117310 <__ledf2+0x74>
811172e8:	30d8b03a 	or	r12,r6,r3
811172ec:	6000081e 	bne	r12,zero,81117310 <__ledf2+0x74>
811172f0:	0005883a 	mov	r2,zero
811172f4:	5800111e 	bne	r11,zero,8111733c <__ledf2+0xa0>
811172f8:	f800283a 	ret
811172fc:	29403fcc 	andi	r5,r5,255
81117300:	40000c1e 	bne	r8,zero,81117334 <__ledf2+0x98>
81117304:	30d2b03a 	or	r9,r6,r3
81117308:	48000c26 	beq	r9,zero,8111733c <__ledf2+0xa0>
8111730c:	0013883a 	mov	r9,zero
81117310:	39c03fcc 	andi	r7,r7,255
81117314:	48000826 	beq	r9,zero,81117338 <__ledf2+0x9c>
81117318:	38001126 	beq	r7,zero,81117360 <__ledf2+0xc4>
8111731c:	00800044 	movi	r2,1
81117320:	f800283a 	ret
81117324:	30d2b03a 	or	r9,r6,r3
81117328:	483fea26 	beq	r9,zero,811172d4 <__reset+0xfb0f72d4>
8111732c:	00800084 	movi	r2,2
81117330:	f800283a 	ret
81117334:	39c03fcc 	andi	r7,r7,255
81117338:	39400726 	beq	r7,r5,81117358 <__ledf2+0xbc>
8111733c:	2800081e 	bne	r5,zero,81117360 <__ledf2+0xc4>
81117340:	00800044 	movi	r2,1
81117344:	f800283a 	ret
81117348:	2292b03a 	or	r9,r4,r10
8111734c:	483fdf26 	beq	r9,zero,811172cc <__reset+0xfb0f72cc>
81117350:	00800084 	movi	r2,2
81117354:	f800283a 	ret
81117358:	4080030e 	bge	r8,r2,81117368 <__ledf2+0xcc>
8111735c:	383fef26 	beq	r7,zero,8111731c <__reset+0xfb0f731c>
81117360:	00bfffc4 	movi	r2,-1
81117364:	f800283a 	ret
81117368:	123feb16 	blt	r2,r8,81117318 <__reset+0xfb0f7318>
8111736c:	1abff336 	bltu	r3,r10,8111733c <__reset+0xfb0f733c>
81117370:	50c00326 	beq	r10,r3,81117380 <__ledf2+0xe4>
81117374:	50c0042e 	bgeu	r10,r3,81117388 <__ledf2+0xec>
81117378:	283fe81e 	bne	r5,zero,8111731c <__reset+0xfb0f731c>
8111737c:	003ff806 	br	81117360 <__reset+0xfb0f7360>
81117380:	313fee36 	bltu	r6,r4,8111733c <__reset+0xfb0f733c>
81117384:	21bffc36 	bltu	r4,r6,81117378 <__reset+0xfb0f7378>
81117388:	0005883a 	mov	r2,zero
8111738c:	f800283a 	ret

81117390 <__subdf3>:
81117390:	02000434 	movhi	r8,16
81117394:	423fffc4 	addi	r8,r8,-1
81117398:	defffb04 	addi	sp,sp,-20
8111739c:	2a14703a 	and	r10,r5,r8
811173a0:	3812d53a 	srli	r9,r7,20
811173a4:	3a10703a 	and	r8,r7,r8
811173a8:	2006d77a 	srli	r3,r4,29
811173ac:	3004d77a 	srli	r2,r6,29
811173b0:	dc000015 	stw	r16,0(sp)
811173b4:	501490fa 	slli	r10,r10,3
811173b8:	2820d53a 	srli	r16,r5,20
811173bc:	401090fa 	slli	r8,r8,3
811173c0:	dc800215 	stw	r18,8(sp)
811173c4:	dc400115 	stw	r17,4(sp)
811173c8:	dfc00415 	stw	ra,16(sp)
811173cc:	202290fa 	slli	r17,r4,3
811173d0:	dcc00315 	stw	r19,12(sp)
811173d4:	4a41ffcc 	andi	r9,r9,2047
811173d8:	0101ffc4 	movi	r4,2047
811173dc:	2824d7fa 	srli	r18,r5,31
811173e0:	8401ffcc 	andi	r16,r16,2047
811173e4:	50c6b03a 	or	r3,r10,r3
811173e8:	380ed7fa 	srli	r7,r7,31
811173ec:	408ab03a 	or	r5,r8,r2
811173f0:	300c90fa 	slli	r6,r6,3
811173f4:	49009626 	beq	r9,r4,81117650 <__subdf3+0x2c0>
811173f8:	39c0005c 	xori	r7,r7,1
811173fc:	8245c83a 	sub	r2,r16,r9
81117400:	3c807426 	beq	r7,r18,811175d4 <__subdf3+0x244>
81117404:	0080af0e 	bge	zero,r2,811176c4 <__subdf3+0x334>
81117408:	48002a1e 	bne	r9,zero,811174b4 <__subdf3+0x124>
8111740c:	2988b03a 	or	r4,r5,r6
81117410:	20009a1e 	bne	r4,zero,8111767c <__subdf3+0x2ec>
81117414:	888001cc 	andi	r2,r17,7
81117418:	10000726 	beq	r2,zero,81117438 <__subdf3+0xa8>
8111741c:	888003cc 	andi	r2,r17,15
81117420:	01000104 	movi	r4,4
81117424:	11000426 	beq	r2,r4,81117438 <__subdf3+0xa8>
81117428:	890b883a 	add	r5,r17,r4
8111742c:	2c63803a 	cmpltu	r17,r5,r17
81117430:	1c47883a 	add	r3,r3,r17
81117434:	2823883a 	mov	r17,r5
81117438:	1880202c 	andhi	r2,r3,128
8111743c:	10005926 	beq	r2,zero,811175a4 <__subdf3+0x214>
81117440:	84000044 	addi	r16,r16,1
81117444:	0081ffc4 	movi	r2,2047
81117448:	8080be26 	beq	r16,r2,81117744 <__subdf3+0x3b4>
8111744c:	017fe034 	movhi	r5,65408
81117450:	297fffc4 	addi	r5,r5,-1
81117454:	1946703a 	and	r3,r3,r5
81117458:	1804977a 	slli	r2,r3,29
8111745c:	1806927a 	slli	r3,r3,9
81117460:	8822d0fa 	srli	r17,r17,3
81117464:	8401ffcc 	andi	r16,r16,2047
81117468:	180ad33a 	srli	r5,r3,12
8111746c:	9100004c 	andi	r4,r18,1
81117470:	1444b03a 	or	r2,r2,r17
81117474:	80c1ffcc 	andi	r3,r16,2047
81117478:	1820953a 	slli	r16,r3,20
8111747c:	20c03fcc 	andi	r3,r4,255
81117480:	180897fa 	slli	r4,r3,31
81117484:	00c00434 	movhi	r3,16
81117488:	18ffffc4 	addi	r3,r3,-1
8111748c:	28c6703a 	and	r3,r5,r3
81117490:	1c06b03a 	or	r3,r3,r16
81117494:	1906b03a 	or	r3,r3,r4
81117498:	dfc00417 	ldw	ra,16(sp)
8111749c:	dcc00317 	ldw	r19,12(sp)
811174a0:	dc800217 	ldw	r18,8(sp)
811174a4:	dc400117 	ldw	r17,4(sp)
811174a8:	dc000017 	ldw	r16,0(sp)
811174ac:	dec00504 	addi	sp,sp,20
811174b0:	f800283a 	ret
811174b4:	0101ffc4 	movi	r4,2047
811174b8:	813fd626 	beq	r16,r4,81117414 <__reset+0xfb0f7414>
811174bc:	29402034 	orhi	r5,r5,128
811174c0:	01000e04 	movi	r4,56
811174c4:	2080a316 	blt	r4,r2,81117754 <__subdf3+0x3c4>
811174c8:	010007c4 	movi	r4,31
811174cc:	2080c616 	blt	r4,r2,811177e8 <__subdf3+0x458>
811174d0:	01000804 	movi	r4,32
811174d4:	2089c83a 	sub	r4,r4,r2
811174d8:	2910983a 	sll	r8,r5,r4
811174dc:	308ed83a 	srl	r7,r6,r2
811174e0:	3108983a 	sll	r4,r6,r4
811174e4:	2884d83a 	srl	r2,r5,r2
811174e8:	41ccb03a 	or	r6,r8,r7
811174ec:	2008c03a 	cmpne	r4,r4,zero
811174f0:	310cb03a 	or	r6,r6,r4
811174f4:	898dc83a 	sub	r6,r17,r6
811174f8:	89a3803a 	cmpltu	r17,r17,r6
811174fc:	1887c83a 	sub	r3,r3,r2
81117500:	1c47c83a 	sub	r3,r3,r17
81117504:	3023883a 	mov	r17,r6
81117508:	1880202c 	andhi	r2,r3,128
8111750c:	10002326 	beq	r2,zero,8111759c <__subdf3+0x20c>
81117510:	04c02034 	movhi	r19,128
81117514:	9cffffc4 	addi	r19,r19,-1
81117518:	1ce6703a 	and	r19,r3,r19
8111751c:	98007a26 	beq	r19,zero,81117708 <__subdf3+0x378>
81117520:	9809883a 	mov	r4,r19
81117524:	110b7900 	call	8110b790 <__clzsi2>
81117528:	113ffe04 	addi	r4,r2,-8
8111752c:	00c007c4 	movi	r3,31
81117530:	19007b16 	blt	r3,r4,81117720 <__subdf3+0x390>
81117534:	00800804 	movi	r2,32
81117538:	1105c83a 	sub	r2,r2,r4
8111753c:	8884d83a 	srl	r2,r17,r2
81117540:	9906983a 	sll	r3,r19,r4
81117544:	8922983a 	sll	r17,r17,r4
81117548:	10c4b03a 	or	r2,r2,r3
8111754c:	24007816 	blt	r4,r16,81117730 <__subdf3+0x3a0>
81117550:	2421c83a 	sub	r16,r4,r16
81117554:	80c00044 	addi	r3,r16,1
81117558:	010007c4 	movi	r4,31
8111755c:	20c09516 	blt	r4,r3,811177b4 <__subdf3+0x424>
81117560:	01400804 	movi	r5,32
81117564:	28cbc83a 	sub	r5,r5,r3
81117568:	88c8d83a 	srl	r4,r17,r3
8111756c:	8962983a 	sll	r17,r17,r5
81117570:	114a983a 	sll	r5,r2,r5
81117574:	10c6d83a 	srl	r3,r2,r3
81117578:	8804c03a 	cmpne	r2,r17,zero
8111757c:	290ab03a 	or	r5,r5,r4
81117580:	28a2b03a 	or	r17,r5,r2
81117584:	0021883a 	mov	r16,zero
81117588:	003fa206 	br	81117414 <__reset+0xfb0f7414>
8111758c:	2090b03a 	or	r8,r4,r2
81117590:	40018e26 	beq	r8,zero,81117bcc <__subdf3+0x83c>
81117594:	1007883a 	mov	r3,r2
81117598:	2023883a 	mov	r17,r4
8111759c:	888001cc 	andi	r2,r17,7
811175a0:	103f9e1e 	bne	r2,zero,8111741c <__reset+0xfb0f741c>
811175a4:	1804977a 	slli	r2,r3,29
811175a8:	8822d0fa 	srli	r17,r17,3
811175ac:	1810d0fa 	srli	r8,r3,3
811175b0:	9100004c 	andi	r4,r18,1
811175b4:	1444b03a 	or	r2,r2,r17
811175b8:	00c1ffc4 	movi	r3,2047
811175bc:	80c02826 	beq	r16,r3,81117660 <__subdf3+0x2d0>
811175c0:	01400434 	movhi	r5,16
811175c4:	297fffc4 	addi	r5,r5,-1
811175c8:	80e0703a 	and	r16,r16,r3
811175cc:	414a703a 	and	r5,r8,r5
811175d0:	003fa806 	br	81117474 <__reset+0xfb0f7474>
811175d4:	0080630e 	bge	zero,r2,81117764 <__subdf3+0x3d4>
811175d8:	48003026 	beq	r9,zero,8111769c <__subdf3+0x30c>
811175dc:	0101ffc4 	movi	r4,2047
811175e0:	813f8c26 	beq	r16,r4,81117414 <__reset+0xfb0f7414>
811175e4:	29402034 	orhi	r5,r5,128
811175e8:	01000e04 	movi	r4,56
811175ec:	2080a90e 	bge	r4,r2,81117894 <__subdf3+0x504>
811175f0:	298cb03a 	or	r6,r5,r6
811175f4:	3012c03a 	cmpne	r9,r6,zero
811175f8:	0005883a 	mov	r2,zero
811175fc:	4c53883a 	add	r9,r9,r17
81117600:	4c63803a 	cmpltu	r17,r9,r17
81117604:	10c7883a 	add	r3,r2,r3
81117608:	88c7883a 	add	r3,r17,r3
8111760c:	4823883a 	mov	r17,r9
81117610:	1880202c 	andhi	r2,r3,128
81117614:	1000d026 	beq	r2,zero,81117958 <__subdf3+0x5c8>
81117618:	84000044 	addi	r16,r16,1
8111761c:	0081ffc4 	movi	r2,2047
81117620:	8080fe26 	beq	r16,r2,81117a1c <__subdf3+0x68c>
81117624:	00bfe034 	movhi	r2,65408
81117628:	10bfffc4 	addi	r2,r2,-1
8111762c:	1886703a 	and	r3,r3,r2
81117630:	880ad07a 	srli	r5,r17,1
81117634:	180497fa 	slli	r2,r3,31
81117638:	8900004c 	andi	r4,r17,1
8111763c:	2922b03a 	or	r17,r5,r4
81117640:	1806d07a 	srli	r3,r3,1
81117644:	1462b03a 	or	r17,r2,r17
81117648:	3825883a 	mov	r18,r7
8111764c:	003f7106 	br	81117414 <__reset+0xfb0f7414>
81117650:	2984b03a 	or	r2,r5,r6
81117654:	103f6826 	beq	r2,zero,811173f8 <__reset+0xfb0f73f8>
81117658:	39c03fcc 	andi	r7,r7,255
8111765c:	003f6706 	br	811173fc <__reset+0xfb0f73fc>
81117660:	4086b03a 	or	r3,r8,r2
81117664:	18015226 	beq	r3,zero,81117bb0 <__subdf3+0x820>
81117668:	00c00434 	movhi	r3,16
8111766c:	41400234 	orhi	r5,r8,8
81117670:	18ffffc4 	addi	r3,r3,-1
81117674:	28ca703a 	and	r5,r5,r3
81117678:	003f7e06 	br	81117474 <__reset+0xfb0f7474>
8111767c:	10bfffc4 	addi	r2,r2,-1
81117680:	1000491e 	bne	r2,zero,811177a8 <__subdf3+0x418>
81117684:	898fc83a 	sub	r7,r17,r6
81117688:	89e3803a 	cmpltu	r17,r17,r7
8111768c:	1947c83a 	sub	r3,r3,r5
81117690:	1c47c83a 	sub	r3,r3,r17
81117694:	3823883a 	mov	r17,r7
81117698:	003f9b06 	br	81117508 <__reset+0xfb0f7508>
8111769c:	2988b03a 	or	r4,r5,r6
811176a0:	203f5c26 	beq	r4,zero,81117414 <__reset+0xfb0f7414>
811176a4:	10bfffc4 	addi	r2,r2,-1
811176a8:	1000931e 	bne	r2,zero,811178f8 <__subdf3+0x568>
811176ac:	898d883a 	add	r6,r17,r6
811176b0:	3463803a 	cmpltu	r17,r6,r17
811176b4:	1947883a 	add	r3,r3,r5
811176b8:	88c7883a 	add	r3,r17,r3
811176bc:	3023883a 	mov	r17,r6
811176c0:	003fd306 	br	81117610 <__reset+0xfb0f7610>
811176c4:	1000541e 	bne	r2,zero,81117818 <__subdf3+0x488>
811176c8:	80800044 	addi	r2,r16,1
811176cc:	1081ffcc 	andi	r2,r2,2047
811176d0:	01000044 	movi	r4,1
811176d4:	2080a20e 	bge	r4,r2,81117960 <__subdf3+0x5d0>
811176d8:	8989c83a 	sub	r4,r17,r6
811176dc:	8905803a 	cmpltu	r2,r17,r4
811176e0:	1967c83a 	sub	r19,r3,r5
811176e4:	98a7c83a 	sub	r19,r19,r2
811176e8:	9880202c 	andhi	r2,r19,128
811176ec:	10006326 	beq	r2,zero,8111787c <__subdf3+0x4ec>
811176f0:	3463c83a 	sub	r17,r6,r17
811176f4:	28c7c83a 	sub	r3,r5,r3
811176f8:	344d803a 	cmpltu	r6,r6,r17
811176fc:	19a7c83a 	sub	r19,r3,r6
81117700:	3825883a 	mov	r18,r7
81117704:	983f861e 	bne	r19,zero,81117520 <__reset+0xfb0f7520>
81117708:	8809883a 	mov	r4,r17
8111770c:	110b7900 	call	8110b790 <__clzsi2>
81117710:	10800804 	addi	r2,r2,32
81117714:	113ffe04 	addi	r4,r2,-8
81117718:	00c007c4 	movi	r3,31
8111771c:	193f850e 	bge	r3,r4,81117534 <__reset+0xfb0f7534>
81117720:	10bff604 	addi	r2,r2,-40
81117724:	8884983a 	sll	r2,r17,r2
81117728:	0023883a 	mov	r17,zero
8111772c:	243f880e 	bge	r4,r16,81117550 <__reset+0xfb0f7550>
81117730:	00ffe034 	movhi	r3,65408
81117734:	18ffffc4 	addi	r3,r3,-1
81117738:	8121c83a 	sub	r16,r16,r4
8111773c:	10c6703a 	and	r3,r2,r3
81117740:	003f3406 	br	81117414 <__reset+0xfb0f7414>
81117744:	9100004c 	andi	r4,r18,1
81117748:	000b883a 	mov	r5,zero
8111774c:	0005883a 	mov	r2,zero
81117750:	003f4806 	br	81117474 <__reset+0xfb0f7474>
81117754:	298cb03a 	or	r6,r5,r6
81117758:	300cc03a 	cmpne	r6,r6,zero
8111775c:	0005883a 	mov	r2,zero
81117760:	003f6406 	br	811174f4 <__reset+0xfb0f74f4>
81117764:	10009a1e 	bne	r2,zero,811179d0 <__subdf3+0x640>
81117768:	82400044 	addi	r9,r16,1
8111776c:	4881ffcc 	andi	r2,r9,2047
81117770:	02800044 	movi	r10,1
81117774:	5080670e 	bge	r10,r2,81117914 <__subdf3+0x584>
81117778:	0081ffc4 	movi	r2,2047
8111777c:	4880af26 	beq	r9,r2,81117a3c <__subdf3+0x6ac>
81117780:	898d883a 	add	r6,r17,r6
81117784:	1945883a 	add	r2,r3,r5
81117788:	3447803a 	cmpltu	r3,r6,r17
8111778c:	1887883a 	add	r3,r3,r2
81117790:	182297fa 	slli	r17,r3,31
81117794:	300cd07a 	srli	r6,r6,1
81117798:	1806d07a 	srli	r3,r3,1
8111779c:	4821883a 	mov	r16,r9
811177a0:	89a2b03a 	or	r17,r17,r6
811177a4:	003f1b06 	br	81117414 <__reset+0xfb0f7414>
811177a8:	0101ffc4 	movi	r4,2047
811177ac:	813f441e 	bne	r16,r4,811174c0 <__reset+0xfb0f74c0>
811177b0:	003f1806 	br	81117414 <__reset+0xfb0f7414>
811177b4:	843ff844 	addi	r16,r16,-31
811177b8:	01400804 	movi	r5,32
811177bc:	1408d83a 	srl	r4,r2,r16
811177c0:	19405026 	beq	r3,r5,81117904 <__subdf3+0x574>
811177c4:	01401004 	movi	r5,64
811177c8:	28c7c83a 	sub	r3,r5,r3
811177cc:	10c4983a 	sll	r2,r2,r3
811177d0:	88a2b03a 	or	r17,r17,r2
811177d4:	8822c03a 	cmpne	r17,r17,zero
811177d8:	2462b03a 	or	r17,r4,r17
811177dc:	0007883a 	mov	r3,zero
811177e0:	0021883a 	mov	r16,zero
811177e4:	003f6d06 	br	8111759c <__reset+0xfb0f759c>
811177e8:	11fff804 	addi	r7,r2,-32
811177ec:	01000804 	movi	r4,32
811177f0:	29ced83a 	srl	r7,r5,r7
811177f4:	11004526 	beq	r2,r4,8111790c <__subdf3+0x57c>
811177f8:	01001004 	movi	r4,64
811177fc:	2089c83a 	sub	r4,r4,r2
81117800:	2904983a 	sll	r2,r5,r4
81117804:	118cb03a 	or	r6,r2,r6
81117808:	300cc03a 	cmpne	r6,r6,zero
8111780c:	398cb03a 	or	r6,r7,r6
81117810:	0005883a 	mov	r2,zero
81117814:	003f3706 	br	811174f4 <__reset+0xfb0f74f4>
81117818:	80002a26 	beq	r16,zero,811178c4 <__subdf3+0x534>
8111781c:	0101ffc4 	movi	r4,2047
81117820:	49006626 	beq	r9,r4,811179bc <__subdf3+0x62c>
81117824:	0085c83a 	sub	r2,zero,r2
81117828:	18c02034 	orhi	r3,r3,128
8111782c:	01000e04 	movi	r4,56
81117830:	20807e16 	blt	r4,r2,81117a2c <__subdf3+0x69c>
81117834:	010007c4 	movi	r4,31
81117838:	2080e716 	blt	r4,r2,81117bd8 <__subdf3+0x848>
8111783c:	01000804 	movi	r4,32
81117840:	2089c83a 	sub	r4,r4,r2
81117844:	1914983a 	sll	r10,r3,r4
81117848:	8890d83a 	srl	r8,r17,r2
8111784c:	8908983a 	sll	r4,r17,r4
81117850:	1884d83a 	srl	r2,r3,r2
81117854:	5222b03a 	or	r17,r10,r8
81117858:	2006c03a 	cmpne	r3,r4,zero
8111785c:	88e2b03a 	or	r17,r17,r3
81117860:	3463c83a 	sub	r17,r6,r17
81117864:	2885c83a 	sub	r2,r5,r2
81117868:	344d803a 	cmpltu	r6,r6,r17
8111786c:	1187c83a 	sub	r3,r2,r6
81117870:	4821883a 	mov	r16,r9
81117874:	3825883a 	mov	r18,r7
81117878:	003f2306 	br	81117508 <__reset+0xfb0f7508>
8111787c:	24d0b03a 	or	r8,r4,r19
81117880:	40001b1e 	bne	r8,zero,811178f0 <__subdf3+0x560>
81117884:	0005883a 	mov	r2,zero
81117888:	0009883a 	mov	r4,zero
8111788c:	0021883a 	mov	r16,zero
81117890:	003f4906 	br	811175b8 <__reset+0xfb0f75b8>
81117894:	010007c4 	movi	r4,31
81117898:	20803a16 	blt	r4,r2,81117984 <__subdf3+0x5f4>
8111789c:	01000804 	movi	r4,32
811178a0:	2089c83a 	sub	r4,r4,r2
811178a4:	2912983a 	sll	r9,r5,r4
811178a8:	3090d83a 	srl	r8,r6,r2
811178ac:	3108983a 	sll	r4,r6,r4
811178b0:	2884d83a 	srl	r2,r5,r2
811178b4:	4a12b03a 	or	r9,r9,r8
811178b8:	2008c03a 	cmpne	r4,r4,zero
811178bc:	4912b03a 	or	r9,r9,r4
811178c0:	003f4e06 	br	811175fc <__reset+0xfb0f75fc>
811178c4:	1c48b03a 	or	r4,r3,r17
811178c8:	20003c26 	beq	r4,zero,811179bc <__subdf3+0x62c>
811178cc:	0084303a 	nor	r2,zero,r2
811178d0:	1000381e 	bne	r2,zero,811179b4 <__subdf3+0x624>
811178d4:	3463c83a 	sub	r17,r6,r17
811178d8:	28c5c83a 	sub	r2,r5,r3
811178dc:	344d803a 	cmpltu	r6,r6,r17
811178e0:	1187c83a 	sub	r3,r2,r6
811178e4:	4821883a 	mov	r16,r9
811178e8:	3825883a 	mov	r18,r7
811178ec:	003f0606 	br	81117508 <__reset+0xfb0f7508>
811178f0:	2023883a 	mov	r17,r4
811178f4:	003f0906 	br	8111751c <__reset+0xfb0f751c>
811178f8:	0101ffc4 	movi	r4,2047
811178fc:	813f3a1e 	bne	r16,r4,811175e8 <__reset+0xfb0f75e8>
81117900:	003ec406 	br	81117414 <__reset+0xfb0f7414>
81117904:	0005883a 	mov	r2,zero
81117908:	003fb106 	br	811177d0 <__reset+0xfb0f77d0>
8111790c:	0005883a 	mov	r2,zero
81117910:	003fbc06 	br	81117804 <__reset+0xfb0f7804>
81117914:	1c44b03a 	or	r2,r3,r17
81117918:	80008e1e 	bne	r16,zero,81117b54 <__subdf3+0x7c4>
8111791c:	1000c826 	beq	r2,zero,81117c40 <__subdf3+0x8b0>
81117920:	2984b03a 	or	r2,r5,r6
81117924:	103ebb26 	beq	r2,zero,81117414 <__reset+0xfb0f7414>
81117928:	8989883a 	add	r4,r17,r6
8111792c:	1945883a 	add	r2,r3,r5
81117930:	2447803a 	cmpltu	r3,r4,r17
81117934:	1887883a 	add	r3,r3,r2
81117938:	1880202c 	andhi	r2,r3,128
8111793c:	2023883a 	mov	r17,r4
81117940:	103f1626 	beq	r2,zero,8111759c <__reset+0xfb0f759c>
81117944:	00bfe034 	movhi	r2,65408
81117948:	10bfffc4 	addi	r2,r2,-1
8111794c:	5021883a 	mov	r16,r10
81117950:	1886703a 	and	r3,r3,r2
81117954:	003eaf06 	br	81117414 <__reset+0xfb0f7414>
81117958:	3825883a 	mov	r18,r7
8111795c:	003f0f06 	br	8111759c <__reset+0xfb0f759c>
81117960:	1c44b03a 	or	r2,r3,r17
81117964:	8000251e 	bne	r16,zero,811179fc <__subdf3+0x66c>
81117968:	1000661e 	bne	r2,zero,81117b04 <__subdf3+0x774>
8111796c:	2990b03a 	or	r8,r5,r6
81117970:	40009626 	beq	r8,zero,81117bcc <__subdf3+0x83c>
81117974:	2807883a 	mov	r3,r5
81117978:	3023883a 	mov	r17,r6
8111797c:	3825883a 	mov	r18,r7
81117980:	003ea406 	br	81117414 <__reset+0xfb0f7414>
81117984:	127ff804 	addi	r9,r2,-32
81117988:	01000804 	movi	r4,32
8111798c:	2a52d83a 	srl	r9,r5,r9
81117990:	11008c26 	beq	r2,r4,81117bc4 <__subdf3+0x834>
81117994:	01001004 	movi	r4,64
81117998:	2085c83a 	sub	r2,r4,r2
8111799c:	2884983a 	sll	r2,r5,r2
811179a0:	118cb03a 	or	r6,r2,r6
811179a4:	300cc03a 	cmpne	r6,r6,zero
811179a8:	4992b03a 	or	r9,r9,r6
811179ac:	0005883a 	mov	r2,zero
811179b0:	003f1206 	br	811175fc <__reset+0xfb0f75fc>
811179b4:	0101ffc4 	movi	r4,2047
811179b8:	493f9c1e 	bne	r9,r4,8111782c <__reset+0xfb0f782c>
811179bc:	2807883a 	mov	r3,r5
811179c0:	3023883a 	mov	r17,r6
811179c4:	4821883a 	mov	r16,r9
811179c8:	3825883a 	mov	r18,r7
811179cc:	003e9106 	br	81117414 <__reset+0xfb0f7414>
811179d0:	80001f1e 	bne	r16,zero,81117a50 <__subdf3+0x6c0>
811179d4:	1c48b03a 	or	r4,r3,r17
811179d8:	20005a26 	beq	r4,zero,81117b44 <__subdf3+0x7b4>
811179dc:	0084303a 	nor	r2,zero,r2
811179e0:	1000561e 	bne	r2,zero,81117b3c <__subdf3+0x7ac>
811179e4:	89a3883a 	add	r17,r17,r6
811179e8:	1945883a 	add	r2,r3,r5
811179ec:	898d803a 	cmpltu	r6,r17,r6
811179f0:	3087883a 	add	r3,r6,r2
811179f4:	4821883a 	mov	r16,r9
811179f8:	003f0506 	br	81117610 <__reset+0xfb0f7610>
811179fc:	10002b1e 	bne	r2,zero,81117aac <__subdf3+0x71c>
81117a00:	2984b03a 	or	r2,r5,r6
81117a04:	10008026 	beq	r2,zero,81117c08 <__subdf3+0x878>
81117a08:	2807883a 	mov	r3,r5
81117a0c:	3023883a 	mov	r17,r6
81117a10:	3825883a 	mov	r18,r7
81117a14:	0401ffc4 	movi	r16,2047
81117a18:	003e7e06 	br	81117414 <__reset+0xfb0f7414>
81117a1c:	3809883a 	mov	r4,r7
81117a20:	0011883a 	mov	r8,zero
81117a24:	0005883a 	mov	r2,zero
81117a28:	003ee306 	br	811175b8 <__reset+0xfb0f75b8>
81117a2c:	1c62b03a 	or	r17,r3,r17
81117a30:	8822c03a 	cmpne	r17,r17,zero
81117a34:	0005883a 	mov	r2,zero
81117a38:	003f8906 	br	81117860 <__reset+0xfb0f7860>
81117a3c:	3809883a 	mov	r4,r7
81117a40:	4821883a 	mov	r16,r9
81117a44:	0011883a 	mov	r8,zero
81117a48:	0005883a 	mov	r2,zero
81117a4c:	003eda06 	br	811175b8 <__reset+0xfb0f75b8>
81117a50:	0101ffc4 	movi	r4,2047
81117a54:	49003b26 	beq	r9,r4,81117b44 <__subdf3+0x7b4>
81117a58:	0085c83a 	sub	r2,zero,r2
81117a5c:	18c02034 	orhi	r3,r3,128
81117a60:	01000e04 	movi	r4,56
81117a64:	20806e16 	blt	r4,r2,81117c20 <__subdf3+0x890>
81117a68:	010007c4 	movi	r4,31
81117a6c:	20807716 	blt	r4,r2,81117c4c <__subdf3+0x8bc>
81117a70:	01000804 	movi	r4,32
81117a74:	2089c83a 	sub	r4,r4,r2
81117a78:	1914983a 	sll	r10,r3,r4
81117a7c:	8890d83a 	srl	r8,r17,r2
81117a80:	8908983a 	sll	r4,r17,r4
81117a84:	1884d83a 	srl	r2,r3,r2
81117a88:	5222b03a 	or	r17,r10,r8
81117a8c:	2006c03a 	cmpne	r3,r4,zero
81117a90:	88e2b03a 	or	r17,r17,r3
81117a94:	89a3883a 	add	r17,r17,r6
81117a98:	1145883a 	add	r2,r2,r5
81117a9c:	898d803a 	cmpltu	r6,r17,r6
81117aa0:	3087883a 	add	r3,r6,r2
81117aa4:	4821883a 	mov	r16,r9
81117aa8:	003ed906 	br	81117610 <__reset+0xfb0f7610>
81117aac:	2984b03a 	or	r2,r5,r6
81117ab0:	10004226 	beq	r2,zero,81117bbc <__subdf3+0x82c>
81117ab4:	1808d0fa 	srli	r4,r3,3
81117ab8:	8822d0fa 	srli	r17,r17,3
81117abc:	1806977a 	slli	r3,r3,29
81117ac0:	2080022c 	andhi	r2,r4,8
81117ac4:	1c62b03a 	or	r17,r3,r17
81117ac8:	10000826 	beq	r2,zero,81117aec <__subdf3+0x75c>
81117acc:	2812d0fa 	srli	r9,r5,3
81117ad0:	4880022c 	andhi	r2,r9,8
81117ad4:	1000051e 	bne	r2,zero,81117aec <__subdf3+0x75c>
81117ad8:	300cd0fa 	srli	r6,r6,3
81117adc:	2804977a 	slli	r2,r5,29
81117ae0:	4809883a 	mov	r4,r9
81117ae4:	3825883a 	mov	r18,r7
81117ae8:	11a2b03a 	or	r17,r2,r6
81117aec:	8806d77a 	srli	r3,r17,29
81117af0:	200890fa 	slli	r4,r4,3
81117af4:	882290fa 	slli	r17,r17,3
81117af8:	0401ffc4 	movi	r16,2047
81117afc:	1906b03a 	or	r3,r3,r4
81117b00:	003e4406 	br	81117414 <__reset+0xfb0f7414>
81117b04:	2984b03a 	or	r2,r5,r6
81117b08:	103e4226 	beq	r2,zero,81117414 <__reset+0xfb0f7414>
81117b0c:	8989c83a 	sub	r4,r17,r6
81117b10:	8911803a 	cmpltu	r8,r17,r4
81117b14:	1945c83a 	sub	r2,r3,r5
81117b18:	1205c83a 	sub	r2,r2,r8
81117b1c:	1200202c 	andhi	r8,r2,128
81117b20:	403e9a26 	beq	r8,zero,8111758c <__reset+0xfb0f758c>
81117b24:	3463c83a 	sub	r17,r6,r17
81117b28:	28c5c83a 	sub	r2,r5,r3
81117b2c:	344d803a 	cmpltu	r6,r6,r17
81117b30:	1187c83a 	sub	r3,r2,r6
81117b34:	3825883a 	mov	r18,r7
81117b38:	003e3606 	br	81117414 <__reset+0xfb0f7414>
81117b3c:	0101ffc4 	movi	r4,2047
81117b40:	493fc71e 	bne	r9,r4,81117a60 <__reset+0xfb0f7a60>
81117b44:	2807883a 	mov	r3,r5
81117b48:	3023883a 	mov	r17,r6
81117b4c:	4821883a 	mov	r16,r9
81117b50:	003e3006 	br	81117414 <__reset+0xfb0f7414>
81117b54:	10003626 	beq	r2,zero,81117c30 <__subdf3+0x8a0>
81117b58:	2984b03a 	or	r2,r5,r6
81117b5c:	10001726 	beq	r2,zero,81117bbc <__subdf3+0x82c>
81117b60:	1808d0fa 	srli	r4,r3,3
81117b64:	8822d0fa 	srli	r17,r17,3
81117b68:	1806977a 	slli	r3,r3,29
81117b6c:	2080022c 	andhi	r2,r4,8
81117b70:	1c62b03a 	or	r17,r3,r17
81117b74:	10000726 	beq	r2,zero,81117b94 <__subdf3+0x804>
81117b78:	2812d0fa 	srli	r9,r5,3
81117b7c:	4880022c 	andhi	r2,r9,8
81117b80:	1000041e 	bne	r2,zero,81117b94 <__subdf3+0x804>
81117b84:	300cd0fa 	srli	r6,r6,3
81117b88:	2804977a 	slli	r2,r5,29
81117b8c:	4809883a 	mov	r4,r9
81117b90:	11a2b03a 	or	r17,r2,r6
81117b94:	8806d77a 	srli	r3,r17,29
81117b98:	200890fa 	slli	r4,r4,3
81117b9c:	882290fa 	slli	r17,r17,3
81117ba0:	3825883a 	mov	r18,r7
81117ba4:	1906b03a 	or	r3,r3,r4
81117ba8:	0401ffc4 	movi	r16,2047
81117bac:	003e1906 	br	81117414 <__reset+0xfb0f7414>
81117bb0:	000b883a 	mov	r5,zero
81117bb4:	0005883a 	mov	r2,zero
81117bb8:	003e2e06 	br	81117474 <__reset+0xfb0f7474>
81117bbc:	0401ffc4 	movi	r16,2047
81117bc0:	003e1406 	br	81117414 <__reset+0xfb0f7414>
81117bc4:	0005883a 	mov	r2,zero
81117bc8:	003f7506 	br	811179a0 <__reset+0xfb0f79a0>
81117bcc:	0005883a 	mov	r2,zero
81117bd0:	0009883a 	mov	r4,zero
81117bd4:	003e7806 	br	811175b8 <__reset+0xfb0f75b8>
81117bd8:	123ff804 	addi	r8,r2,-32
81117bdc:	01000804 	movi	r4,32
81117be0:	1a10d83a 	srl	r8,r3,r8
81117be4:	11002526 	beq	r2,r4,81117c7c <__subdf3+0x8ec>
81117be8:	01001004 	movi	r4,64
81117bec:	2085c83a 	sub	r2,r4,r2
81117bf0:	1884983a 	sll	r2,r3,r2
81117bf4:	1444b03a 	or	r2,r2,r17
81117bf8:	1004c03a 	cmpne	r2,r2,zero
81117bfc:	40a2b03a 	or	r17,r8,r2
81117c00:	0005883a 	mov	r2,zero
81117c04:	003f1606 	br	81117860 <__reset+0xfb0f7860>
81117c08:	02000434 	movhi	r8,16
81117c0c:	0009883a 	mov	r4,zero
81117c10:	423fffc4 	addi	r8,r8,-1
81117c14:	00bfffc4 	movi	r2,-1
81117c18:	0401ffc4 	movi	r16,2047
81117c1c:	003e6606 	br	811175b8 <__reset+0xfb0f75b8>
81117c20:	1c62b03a 	or	r17,r3,r17
81117c24:	8822c03a 	cmpne	r17,r17,zero
81117c28:	0005883a 	mov	r2,zero
81117c2c:	003f9906 	br	81117a94 <__reset+0xfb0f7a94>
81117c30:	2807883a 	mov	r3,r5
81117c34:	3023883a 	mov	r17,r6
81117c38:	0401ffc4 	movi	r16,2047
81117c3c:	003df506 	br	81117414 <__reset+0xfb0f7414>
81117c40:	2807883a 	mov	r3,r5
81117c44:	3023883a 	mov	r17,r6
81117c48:	003df206 	br	81117414 <__reset+0xfb0f7414>
81117c4c:	123ff804 	addi	r8,r2,-32
81117c50:	01000804 	movi	r4,32
81117c54:	1a10d83a 	srl	r8,r3,r8
81117c58:	11000a26 	beq	r2,r4,81117c84 <__subdf3+0x8f4>
81117c5c:	01001004 	movi	r4,64
81117c60:	2085c83a 	sub	r2,r4,r2
81117c64:	1884983a 	sll	r2,r3,r2
81117c68:	1444b03a 	or	r2,r2,r17
81117c6c:	1004c03a 	cmpne	r2,r2,zero
81117c70:	40a2b03a 	or	r17,r8,r2
81117c74:	0005883a 	mov	r2,zero
81117c78:	003f8606 	br	81117a94 <__reset+0xfb0f7a94>
81117c7c:	0005883a 	mov	r2,zero
81117c80:	003fdc06 	br	81117bf4 <__reset+0xfb0f7bf4>
81117c84:	0005883a 	mov	r2,zero
81117c88:	003ff706 	br	81117c68 <__reset+0xfb0f7c68>

81117c8c <__fixdfsi>:
81117c8c:	280cd53a 	srli	r6,r5,20
81117c90:	00c00434 	movhi	r3,16
81117c94:	18ffffc4 	addi	r3,r3,-1
81117c98:	3181ffcc 	andi	r6,r6,2047
81117c9c:	01c0ff84 	movi	r7,1022
81117ca0:	28c6703a 	and	r3,r5,r3
81117ca4:	280ad7fa 	srli	r5,r5,31
81117ca8:	3980120e 	bge	r7,r6,81117cf4 <__fixdfsi+0x68>
81117cac:	00810744 	movi	r2,1053
81117cb0:	11800c16 	blt	r2,r6,81117ce4 <__fixdfsi+0x58>
81117cb4:	00810cc4 	movi	r2,1075
81117cb8:	1185c83a 	sub	r2,r2,r6
81117cbc:	01c007c4 	movi	r7,31
81117cc0:	18c00434 	orhi	r3,r3,16
81117cc4:	38800d16 	blt	r7,r2,81117cfc <__fixdfsi+0x70>
81117cc8:	31befb44 	addi	r6,r6,-1043
81117ccc:	2084d83a 	srl	r2,r4,r2
81117cd0:	1986983a 	sll	r3,r3,r6
81117cd4:	1884b03a 	or	r2,r3,r2
81117cd8:	28000726 	beq	r5,zero,81117cf8 <__fixdfsi+0x6c>
81117cdc:	0085c83a 	sub	r2,zero,r2
81117ce0:	f800283a 	ret
81117ce4:	00a00034 	movhi	r2,32768
81117ce8:	10bfffc4 	addi	r2,r2,-1
81117cec:	2885883a 	add	r2,r5,r2
81117cf0:	f800283a 	ret
81117cf4:	0005883a 	mov	r2,zero
81117cf8:	f800283a 	ret
81117cfc:	008104c4 	movi	r2,1043
81117d00:	1185c83a 	sub	r2,r2,r6
81117d04:	1884d83a 	srl	r2,r3,r2
81117d08:	003ff306 	br	81117cd8 <__reset+0xfb0f7cd8>

81117d0c <__floatsidf>:
81117d0c:	defffd04 	addi	sp,sp,-12
81117d10:	dfc00215 	stw	ra,8(sp)
81117d14:	dc400115 	stw	r17,4(sp)
81117d18:	dc000015 	stw	r16,0(sp)
81117d1c:	20002b26 	beq	r4,zero,81117dcc <__floatsidf+0xc0>
81117d20:	2023883a 	mov	r17,r4
81117d24:	2020d7fa 	srli	r16,r4,31
81117d28:	20002d16 	blt	r4,zero,81117de0 <__floatsidf+0xd4>
81117d2c:	8809883a 	mov	r4,r17
81117d30:	110b7900 	call	8110b790 <__clzsi2>
81117d34:	01410784 	movi	r5,1054
81117d38:	288bc83a 	sub	r5,r5,r2
81117d3c:	01010cc4 	movi	r4,1075
81117d40:	2149c83a 	sub	r4,r4,r5
81117d44:	00c007c4 	movi	r3,31
81117d48:	1900160e 	bge	r3,r4,81117da4 <__floatsidf+0x98>
81117d4c:	00c104c4 	movi	r3,1043
81117d50:	1947c83a 	sub	r3,r3,r5
81117d54:	88c6983a 	sll	r3,r17,r3
81117d58:	00800434 	movhi	r2,16
81117d5c:	10bfffc4 	addi	r2,r2,-1
81117d60:	1886703a 	and	r3,r3,r2
81117d64:	2941ffcc 	andi	r5,r5,2047
81117d68:	800d883a 	mov	r6,r16
81117d6c:	0005883a 	mov	r2,zero
81117d70:	280a953a 	slli	r5,r5,20
81117d74:	31803fcc 	andi	r6,r6,255
81117d78:	01000434 	movhi	r4,16
81117d7c:	300c97fa 	slli	r6,r6,31
81117d80:	213fffc4 	addi	r4,r4,-1
81117d84:	1906703a 	and	r3,r3,r4
81117d88:	1946b03a 	or	r3,r3,r5
81117d8c:	1986b03a 	or	r3,r3,r6
81117d90:	dfc00217 	ldw	ra,8(sp)
81117d94:	dc400117 	ldw	r17,4(sp)
81117d98:	dc000017 	ldw	r16,0(sp)
81117d9c:	dec00304 	addi	sp,sp,12
81117da0:	f800283a 	ret
81117da4:	00c002c4 	movi	r3,11
81117da8:	1887c83a 	sub	r3,r3,r2
81117dac:	88c6d83a 	srl	r3,r17,r3
81117db0:	8904983a 	sll	r2,r17,r4
81117db4:	01000434 	movhi	r4,16
81117db8:	213fffc4 	addi	r4,r4,-1
81117dbc:	2941ffcc 	andi	r5,r5,2047
81117dc0:	1906703a 	and	r3,r3,r4
81117dc4:	800d883a 	mov	r6,r16
81117dc8:	003fe906 	br	81117d70 <__reset+0xfb0f7d70>
81117dcc:	000d883a 	mov	r6,zero
81117dd0:	000b883a 	mov	r5,zero
81117dd4:	0007883a 	mov	r3,zero
81117dd8:	0005883a 	mov	r2,zero
81117ddc:	003fe406 	br	81117d70 <__reset+0xfb0f7d70>
81117de0:	0123c83a 	sub	r17,zero,r4
81117de4:	003fd106 	br	81117d2c <__reset+0xfb0f7d2c>

81117de8 <__floatunsidf>:
81117de8:	defffe04 	addi	sp,sp,-8
81117dec:	dc000015 	stw	r16,0(sp)
81117df0:	dfc00115 	stw	ra,4(sp)
81117df4:	2021883a 	mov	r16,r4
81117df8:	20002226 	beq	r4,zero,81117e84 <__floatunsidf+0x9c>
81117dfc:	110b7900 	call	8110b790 <__clzsi2>
81117e00:	01010784 	movi	r4,1054
81117e04:	2089c83a 	sub	r4,r4,r2
81117e08:	01810cc4 	movi	r6,1075
81117e0c:	310dc83a 	sub	r6,r6,r4
81117e10:	00c007c4 	movi	r3,31
81117e14:	1980120e 	bge	r3,r6,81117e60 <__floatunsidf+0x78>
81117e18:	00c104c4 	movi	r3,1043
81117e1c:	1907c83a 	sub	r3,r3,r4
81117e20:	80ca983a 	sll	r5,r16,r3
81117e24:	00800434 	movhi	r2,16
81117e28:	10bfffc4 	addi	r2,r2,-1
81117e2c:	2101ffcc 	andi	r4,r4,2047
81117e30:	0021883a 	mov	r16,zero
81117e34:	288a703a 	and	r5,r5,r2
81117e38:	2008953a 	slli	r4,r4,20
81117e3c:	00c00434 	movhi	r3,16
81117e40:	18ffffc4 	addi	r3,r3,-1
81117e44:	28c6703a 	and	r3,r5,r3
81117e48:	8005883a 	mov	r2,r16
81117e4c:	1906b03a 	or	r3,r3,r4
81117e50:	dfc00117 	ldw	ra,4(sp)
81117e54:	dc000017 	ldw	r16,0(sp)
81117e58:	dec00204 	addi	sp,sp,8
81117e5c:	f800283a 	ret
81117e60:	00c002c4 	movi	r3,11
81117e64:	188bc83a 	sub	r5,r3,r2
81117e68:	814ad83a 	srl	r5,r16,r5
81117e6c:	00c00434 	movhi	r3,16
81117e70:	18ffffc4 	addi	r3,r3,-1
81117e74:	81a0983a 	sll	r16,r16,r6
81117e78:	2101ffcc 	andi	r4,r4,2047
81117e7c:	28ca703a 	and	r5,r5,r3
81117e80:	003fed06 	br	81117e38 <__reset+0xfb0f7e38>
81117e84:	0009883a 	mov	r4,zero
81117e88:	000b883a 	mov	r5,zero
81117e8c:	003fea06 	br	81117e38 <__reset+0xfb0f7e38>

81117e90 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81117e90:	defffb04 	addi	sp,sp,-20
81117e94:	df000415 	stw	fp,16(sp)
81117e98:	df000404 	addi	fp,sp,16
81117e9c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81117ea0:	008000c4 	movi	r2,3
81117ea4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81117ea8:	e0fffd17 	ldw	r3,-12(fp)
81117eac:	008003f4 	movhi	r2,15
81117eb0:	10909004 	addi	r2,r2,16960
81117eb4:	1887383a 	mul	r3,r3,r2
81117eb8:	00817db4 	movhi	r2,1526
81117ebc:	10b84004 	addi	r2,r2,-7936
81117ec0:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81117ec4:	00a00034 	movhi	r2,32768
81117ec8:	10bfffc4 	addi	r2,r2,-1
81117ecc:	10c5203a 	divu	r2,r2,r3
81117ed0:	e0ffff17 	ldw	r3,-4(fp)
81117ed4:	1885203a 	divu	r2,r3,r2
81117ed8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81117edc:	e0bffe17 	ldw	r2,-8(fp)
81117ee0:	10002526 	beq	r2,zero,81117f78 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
81117ee4:	e03ffc15 	stw	zero,-16(fp)
81117ee8:	00001406 	br	81117f3c <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81117eec:	00a00034 	movhi	r2,32768
81117ef0:	10bfffc4 	addi	r2,r2,-1
81117ef4:	10bfffc4 	addi	r2,r2,-1
81117ef8:	103ffe1e 	bne	r2,zero,81117ef4 <__reset+0xfb0f7ef4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81117efc:	e0fffd17 	ldw	r3,-12(fp)
81117f00:	008003f4 	movhi	r2,15
81117f04:	10909004 	addi	r2,r2,16960
81117f08:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81117f0c:	00817db4 	movhi	r2,1526
81117f10:	10b84004 	addi	r2,r2,-7936
81117f14:	10c7203a 	divu	r3,r2,r3
81117f18:	00a00034 	movhi	r2,32768
81117f1c:	10bfffc4 	addi	r2,r2,-1
81117f20:	10c5203a 	divu	r2,r2,r3
81117f24:	e0ffff17 	ldw	r3,-4(fp)
81117f28:	1885c83a 	sub	r2,r3,r2
81117f2c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81117f30:	e0bffc17 	ldw	r2,-16(fp)
81117f34:	10800044 	addi	r2,r2,1
81117f38:	e0bffc15 	stw	r2,-16(fp)
81117f3c:	e0fffc17 	ldw	r3,-16(fp)
81117f40:	e0bffe17 	ldw	r2,-8(fp)
81117f44:	18bfe916 	blt	r3,r2,81117eec <__reset+0xfb0f7eec>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81117f48:	e0fffd17 	ldw	r3,-12(fp)
81117f4c:	008003f4 	movhi	r2,15
81117f50:	10909004 	addi	r2,r2,16960
81117f54:	1887383a 	mul	r3,r3,r2
81117f58:	00817db4 	movhi	r2,1526
81117f5c:	10b84004 	addi	r2,r2,-7936
81117f60:	10c7203a 	divu	r3,r2,r3
81117f64:	e0bfff17 	ldw	r2,-4(fp)
81117f68:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81117f6c:	10bfffc4 	addi	r2,r2,-1
81117f70:	103ffe1e 	bne	r2,zero,81117f6c <__reset+0xfb0f7f6c>
81117f74:	00000b06 	br	81117fa4 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81117f78:	e0fffd17 	ldw	r3,-12(fp)
81117f7c:	008003f4 	movhi	r2,15
81117f80:	10909004 	addi	r2,r2,16960
81117f84:	1887383a 	mul	r3,r3,r2
81117f88:	00817db4 	movhi	r2,1526
81117f8c:	10b84004 	addi	r2,r2,-7936
81117f90:	10c7203a 	divu	r3,r2,r3
81117f94:	e0bfff17 	ldw	r2,-4(fp)
81117f98:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81117f9c:	10bfffc4 	addi	r2,r2,-1
81117fa0:	00bffe16 	blt	zero,r2,81117f9c <__reset+0xfb0f7f9c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81117fa4:	0005883a 	mov	r2,zero
}
81117fa8:	e037883a 	mov	sp,fp
81117fac:	df000017 	ldw	fp,0(sp)
81117fb0:	dec00104 	addi	sp,sp,4
81117fb4:	f800283a 	ret

81117fb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81117fb8:	defffe04 	addi	sp,sp,-8
81117fbc:	dfc00115 	stw	ra,4(sp)
81117fc0:	df000015 	stw	fp,0(sp)
81117fc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81117fc8:	d0a01317 	ldw	r2,-32692(gp)
81117fcc:	10000326 	beq	r2,zero,81117fdc <alt_get_errno+0x24>
81117fd0:	d0a01317 	ldw	r2,-32692(gp)
81117fd4:	103ee83a 	callr	r2
81117fd8:	00000106 	br	81117fe0 <alt_get_errno+0x28>
81117fdc:	d0a04304 	addi	r2,gp,-32500
}
81117fe0:	e037883a 	mov	sp,fp
81117fe4:	dfc00117 	ldw	ra,4(sp)
81117fe8:	df000017 	ldw	fp,0(sp)
81117fec:	dec00204 	addi	sp,sp,8
81117ff0:	f800283a 	ret

81117ff4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
81117ff4:	defffb04 	addi	sp,sp,-20
81117ff8:	dfc00415 	stw	ra,16(sp)
81117ffc:	df000315 	stw	fp,12(sp)
81118000:	df000304 	addi	fp,sp,12
81118004:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
81118008:	e0bfff17 	ldw	r2,-4(fp)
8111800c:	10000616 	blt	r2,zero,81118028 <close+0x34>
81118010:	e0bfff17 	ldw	r2,-4(fp)
81118014:	10c00324 	muli	r3,r2,12
81118018:	00a044b4 	movhi	r2,33042
8111801c:	10bca404 	addi	r2,r2,-3440
81118020:	1885883a 	add	r2,r3,r2
81118024:	00000106 	br	8111802c <close+0x38>
81118028:	0005883a 	mov	r2,zero
8111802c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
81118030:	e0bffd17 	ldw	r2,-12(fp)
81118034:	10001926 	beq	r2,zero,8111809c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
81118038:	e0bffd17 	ldw	r2,-12(fp)
8111803c:	10800017 	ldw	r2,0(r2)
81118040:	10800417 	ldw	r2,16(r2)
81118044:	10000626 	beq	r2,zero,81118060 <close+0x6c>
81118048:	e0bffd17 	ldw	r2,-12(fp)
8111804c:	10800017 	ldw	r2,0(r2)
81118050:	10800417 	ldw	r2,16(r2)
81118054:	e13ffd17 	ldw	r4,-12(fp)
81118058:	103ee83a 	callr	r2
8111805c:	00000106 	br	81118064 <close+0x70>
81118060:	0005883a 	mov	r2,zero
81118064:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81118068:	e13fff17 	ldw	r4,-4(fp)
8111806c:	11189d00 	call	811189d0 <alt_release_fd>
    if (rval < 0)
81118070:	e0bffe17 	ldw	r2,-8(fp)
81118074:	1000070e 	bge	r2,zero,81118094 <close+0xa0>
    {
      ALT_ERRNO = -rval;
81118078:	1117fb80 	call	81117fb8 <alt_get_errno>
8111807c:	1007883a 	mov	r3,r2
81118080:	e0bffe17 	ldw	r2,-8(fp)
81118084:	0085c83a 	sub	r2,zero,r2
81118088:	18800015 	stw	r2,0(r3)
      return -1;
8111808c:	00bfffc4 	movi	r2,-1
81118090:	00000706 	br	811180b0 <close+0xbc>
    }
    return 0;
81118094:	0005883a 	mov	r2,zero
81118098:	00000506 	br	811180b0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
8111809c:	1117fb80 	call	81117fb8 <alt_get_errno>
811180a0:	1007883a 	mov	r3,r2
811180a4:	00801444 	movi	r2,81
811180a8:	18800015 	stw	r2,0(r3)
    return -1;
811180ac:	00bfffc4 	movi	r2,-1
  }
}
811180b0:	e037883a 	mov	sp,fp
811180b4:	dfc00117 	ldw	ra,4(sp)
811180b8:	df000017 	ldw	fp,0(sp)
811180bc:	dec00204 	addi	sp,sp,8
811180c0:	f800283a 	ret

811180c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
811180c4:	deffff04 	addi	sp,sp,-4
811180c8:	df000015 	stw	fp,0(sp)
811180cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
811180d0:	0001883a 	nop
811180d4:	e037883a 	mov	sp,fp
811180d8:	df000017 	ldw	fp,0(sp)
811180dc:	dec00104 	addi	sp,sp,4
811180e0:	f800283a 	ret

811180e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
811180e4:	defffc04 	addi	sp,sp,-16
811180e8:	df000315 	stw	fp,12(sp)
811180ec:	df000304 	addi	fp,sp,12
811180f0:	e13ffd15 	stw	r4,-12(fp)
811180f4:	e17ffe15 	stw	r5,-8(fp)
811180f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
811180fc:	e0bfff17 	ldw	r2,-4(fp)
}
81118100:	e037883a 	mov	sp,fp
81118104:	df000017 	ldw	fp,0(sp)
81118108:	dec00104 	addi	sp,sp,4
8111810c:	f800283a 	ret

81118110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81118110:	defffe04 	addi	sp,sp,-8
81118114:	dfc00115 	stw	ra,4(sp)
81118118:	df000015 	stw	fp,0(sp)
8111811c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81118120:	d0a01317 	ldw	r2,-32692(gp)
81118124:	10000326 	beq	r2,zero,81118134 <alt_get_errno+0x24>
81118128:	d0a01317 	ldw	r2,-32692(gp)
8111812c:	103ee83a 	callr	r2
81118130:	00000106 	br	81118138 <alt_get_errno+0x28>
81118134:	d0a04304 	addi	r2,gp,-32500
}
81118138:	e037883a 	mov	sp,fp
8111813c:	dfc00117 	ldw	ra,4(sp)
81118140:	df000017 	ldw	fp,0(sp)
81118144:	dec00204 	addi	sp,sp,8
81118148:	f800283a 	ret

8111814c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8111814c:	defffb04 	addi	sp,sp,-20
81118150:	dfc00415 	stw	ra,16(sp)
81118154:	df000315 	stw	fp,12(sp)
81118158:	df000304 	addi	fp,sp,12
8111815c:	e13ffe15 	stw	r4,-8(fp)
81118160:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81118164:	e0bffe17 	ldw	r2,-8(fp)
81118168:	10000616 	blt	r2,zero,81118184 <fstat+0x38>
8111816c:	e0bffe17 	ldw	r2,-8(fp)
81118170:	10c00324 	muli	r3,r2,12
81118174:	00a044b4 	movhi	r2,33042
81118178:	10bca404 	addi	r2,r2,-3440
8111817c:	1885883a 	add	r2,r3,r2
81118180:	00000106 	br	81118188 <fstat+0x3c>
81118184:	0005883a 	mov	r2,zero
81118188:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
8111818c:	e0bffd17 	ldw	r2,-12(fp)
81118190:	10001026 	beq	r2,zero,811181d4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81118194:	e0bffd17 	ldw	r2,-12(fp)
81118198:	10800017 	ldw	r2,0(r2)
8111819c:	10800817 	ldw	r2,32(r2)
811181a0:	10000726 	beq	r2,zero,811181c0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
811181a4:	e0bffd17 	ldw	r2,-12(fp)
811181a8:	10800017 	ldw	r2,0(r2)
811181ac:	10800817 	ldw	r2,32(r2)
811181b0:	e17fff17 	ldw	r5,-4(fp)
811181b4:	e13ffd17 	ldw	r4,-12(fp)
811181b8:	103ee83a 	callr	r2
811181bc:	00000a06 	br	811181e8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
811181c0:	e0bfff17 	ldw	r2,-4(fp)
811181c4:	00c80004 	movi	r3,8192
811181c8:	10c00115 	stw	r3,4(r2)
      return 0;
811181cc:	0005883a 	mov	r2,zero
811181d0:	00000506 	br	811181e8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811181d4:	11181100 	call	81118110 <alt_get_errno>
811181d8:	1007883a 	mov	r3,r2
811181dc:	00801444 	movi	r2,81
811181e0:	18800015 	stw	r2,0(r3)
    return -1;
811181e4:	00bfffc4 	movi	r2,-1
  }
}
811181e8:	e037883a 	mov	sp,fp
811181ec:	dfc00117 	ldw	ra,4(sp)
811181f0:	df000017 	ldw	fp,0(sp)
811181f4:	dec00204 	addi	sp,sp,8
811181f8:	f800283a 	ret

811181fc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
811181fc:	defff004 	addi	sp,sp,-64
81118200:	df000f15 	stw	fp,60(sp)
81118204:	df000f04 	addi	fp,sp,60
81118208:	e13ffd15 	stw	r4,-12(fp)
8111820c:	e17ffe15 	stw	r5,-8(fp)
81118210:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
81118214:	00bffa84 	movi	r2,-22
81118218:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8111821c:	e0bffd17 	ldw	r2,-12(fp)
81118220:	10800828 	cmpgeui	r2,r2,32
81118224:	1000501e 	bne	r2,zero,81118368 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81118228:	0005303a 	rdctl	r2,status
8111822c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81118230:	e0fff617 	ldw	r3,-40(fp)
81118234:	00bfff84 	movi	r2,-2
81118238:	1884703a 	and	r2,r3,r2
8111823c:	1001703a 	wrctl	status,r2
  
  return context;
81118240:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
81118244:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
81118248:	00a044b4 	movhi	r2,33042
8111824c:	10838504 	addi	r2,r2,3604
81118250:	e0fffd17 	ldw	r3,-12(fp)
81118254:	180690fa 	slli	r3,r3,3
81118258:	10c5883a 	add	r2,r2,r3
8111825c:	e0ffff17 	ldw	r3,-4(fp)
81118260:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
81118264:	00a044b4 	movhi	r2,33042
81118268:	10838504 	addi	r2,r2,3604
8111826c:	e0fffd17 	ldw	r3,-12(fp)
81118270:	180690fa 	slli	r3,r3,3
81118274:	10c5883a 	add	r2,r2,r3
81118278:	10800104 	addi	r2,r2,4
8111827c:	e0fffe17 	ldw	r3,-8(fp)
81118280:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
81118284:	e0bfff17 	ldw	r2,-4(fp)
81118288:	10001926 	beq	r2,zero,811182f0 <alt_irq_register+0xf4>
8111828c:	e0bffd17 	ldw	r2,-12(fp)
81118290:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81118294:	0005303a 	rdctl	r2,status
81118298:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111829c:	e0fff717 	ldw	r3,-36(fp)
811182a0:	00bfff84 	movi	r2,-2
811182a4:	1884703a 	and	r2,r3,r2
811182a8:	1001703a 	wrctl	status,r2
  
  return context;
811182ac:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811182b0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
811182b4:	00c00044 	movi	r3,1
811182b8:	e0bff217 	ldw	r2,-56(fp)
811182bc:	1884983a 	sll	r2,r3,r2
811182c0:	1007883a 	mov	r3,r2
811182c4:	d0a04417 	ldw	r2,-32496(gp)
811182c8:	1884b03a 	or	r2,r3,r2
811182cc:	d0a04415 	stw	r2,-32496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811182d0:	d0a04417 	ldw	r2,-32496(gp)
811182d4:	100170fa 	wrctl	ienable,r2
811182d8:	e0bff817 	ldw	r2,-32(fp)
811182dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811182e0:	e0bff917 	ldw	r2,-28(fp)
811182e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811182e8:	0005883a 	mov	r2,zero
811182ec:	00001906 	br	81118354 <alt_irq_register+0x158>
811182f0:	e0bffd17 	ldw	r2,-12(fp)
811182f4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811182f8:	0005303a 	rdctl	r2,status
811182fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81118300:	e0fffa17 	ldw	r3,-24(fp)
81118304:	00bfff84 	movi	r2,-2
81118308:	1884703a 	and	r2,r3,r2
8111830c:	1001703a 	wrctl	status,r2
  
  return context;
81118310:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81118314:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
81118318:	00c00044 	movi	r3,1
8111831c:	e0bff417 	ldw	r2,-48(fp)
81118320:	1884983a 	sll	r2,r3,r2
81118324:	0084303a 	nor	r2,zero,r2
81118328:	1007883a 	mov	r3,r2
8111832c:	d0a04417 	ldw	r2,-32496(gp)
81118330:	1884703a 	and	r2,r3,r2
81118334:	d0a04415 	stw	r2,-32496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81118338:	d0a04417 	ldw	r2,-32496(gp)
8111833c:	100170fa 	wrctl	ienable,r2
81118340:	e0bffb17 	ldw	r2,-20(fp)
81118344:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81118348:	e0bffc17 	ldw	r2,-16(fp)
8111834c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81118350:	0005883a 	mov	r2,zero
81118354:	e0bff115 	stw	r2,-60(fp)
81118358:	e0bff317 	ldw	r2,-52(fp)
8111835c:	e0bff515 	stw	r2,-44(fp)
81118360:	e0bff517 	ldw	r2,-44(fp)
81118364:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
81118368:	e0bff117 	ldw	r2,-60(fp)
}
8111836c:	e037883a 	mov	sp,fp
81118370:	df000017 	ldw	fp,0(sp)
81118374:	dec00104 	addi	sp,sp,4
81118378:	f800283a 	ret

8111837c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111837c:	defffe04 	addi	sp,sp,-8
81118380:	dfc00115 	stw	ra,4(sp)
81118384:	df000015 	stw	fp,0(sp)
81118388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111838c:	d0a01317 	ldw	r2,-32692(gp)
81118390:	10000326 	beq	r2,zero,811183a0 <alt_get_errno+0x24>
81118394:	d0a01317 	ldw	r2,-32692(gp)
81118398:	103ee83a 	callr	r2
8111839c:	00000106 	br	811183a4 <alt_get_errno+0x28>
811183a0:	d0a04304 	addi	r2,gp,-32500
}
811183a4:	e037883a 	mov	sp,fp
811183a8:	dfc00117 	ldw	ra,4(sp)
811183ac:	df000017 	ldw	fp,0(sp)
811183b0:	dec00204 	addi	sp,sp,8
811183b4:	f800283a 	ret

811183b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
811183b8:	deffed04 	addi	sp,sp,-76
811183bc:	dfc01215 	stw	ra,72(sp)
811183c0:	df001115 	stw	fp,68(sp)
811183c4:	df001104 	addi	fp,sp,68
811183c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811183cc:	e0bfff17 	ldw	r2,-4(fp)
811183d0:	10000616 	blt	r2,zero,811183ec <isatty+0x34>
811183d4:	e0bfff17 	ldw	r2,-4(fp)
811183d8:	10c00324 	muli	r3,r2,12
811183dc:	00a044b4 	movhi	r2,33042
811183e0:	10bca404 	addi	r2,r2,-3440
811183e4:	1885883a 	add	r2,r3,r2
811183e8:	00000106 	br	811183f0 <isatty+0x38>
811183ec:	0005883a 	mov	r2,zero
811183f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
811183f4:	e0bfef17 	ldw	r2,-68(fp)
811183f8:	10000e26 	beq	r2,zero,81118434 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
811183fc:	e0bfef17 	ldw	r2,-68(fp)
81118400:	10800017 	ldw	r2,0(r2)
81118404:	10800817 	ldw	r2,32(r2)
81118408:	1000021e 	bne	r2,zero,81118414 <isatty+0x5c>
    {
      return 1;
8111840c:	00800044 	movi	r2,1
81118410:	00000d06 	br	81118448 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81118414:	e0bff004 	addi	r2,fp,-64
81118418:	100b883a 	mov	r5,r2
8111841c:	e13fff17 	ldw	r4,-4(fp)
81118420:	111814c0 	call	8111814c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81118424:	e0bff117 	ldw	r2,-60(fp)
81118428:	10880020 	cmpeqi	r2,r2,8192
8111842c:	10803fcc 	andi	r2,r2,255
81118430:	00000506 	br	81118448 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81118434:	111837c0 	call	8111837c <alt_get_errno>
81118438:	1007883a 	mov	r3,r2
8111843c:	00801444 	movi	r2,81
81118440:	18800015 	stw	r2,0(r3)
    return 0;
81118444:	0005883a 	mov	r2,zero
  }
}
81118448:	e037883a 	mov	sp,fp
8111844c:	dfc00117 	ldw	ra,4(sp)
81118450:	df000017 	ldw	fp,0(sp)
81118454:	dec00204 	addi	sp,sp,8
81118458:	f800283a 	ret

8111845c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111845c:	defffe04 	addi	sp,sp,-8
81118460:	dfc00115 	stw	ra,4(sp)
81118464:	df000015 	stw	fp,0(sp)
81118468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111846c:	d0a01317 	ldw	r2,-32692(gp)
81118470:	10000326 	beq	r2,zero,81118480 <alt_get_errno+0x24>
81118474:	d0a01317 	ldw	r2,-32692(gp)
81118478:	103ee83a 	callr	r2
8111847c:	00000106 	br	81118484 <alt_get_errno+0x28>
81118480:	d0a04304 	addi	r2,gp,-32500
}
81118484:	e037883a 	mov	sp,fp
81118488:	dfc00117 	ldw	ra,4(sp)
8111848c:	df000017 	ldw	fp,0(sp)
81118490:	dec00204 	addi	sp,sp,8
81118494:	f800283a 	ret

81118498 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
81118498:	defff904 	addi	sp,sp,-28
8111849c:	dfc00615 	stw	ra,24(sp)
811184a0:	df000515 	stw	fp,20(sp)
811184a4:	df000504 	addi	fp,sp,20
811184a8:	e13ffd15 	stw	r4,-12(fp)
811184ac:	e17ffe15 	stw	r5,-8(fp)
811184b0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
811184b4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811184b8:	e0bffd17 	ldw	r2,-12(fp)
811184bc:	10000616 	blt	r2,zero,811184d8 <lseek+0x40>
811184c0:	e0bffd17 	ldw	r2,-12(fp)
811184c4:	10c00324 	muli	r3,r2,12
811184c8:	00a044b4 	movhi	r2,33042
811184cc:	10bca404 	addi	r2,r2,-3440
811184d0:	1885883a 	add	r2,r3,r2
811184d4:	00000106 	br	811184dc <lseek+0x44>
811184d8:	0005883a 	mov	r2,zero
811184dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
811184e0:	e0bffc17 	ldw	r2,-16(fp)
811184e4:	10001026 	beq	r2,zero,81118528 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
811184e8:	e0bffc17 	ldw	r2,-16(fp)
811184ec:	10800017 	ldw	r2,0(r2)
811184f0:	10800717 	ldw	r2,28(r2)
811184f4:	10000926 	beq	r2,zero,8111851c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
811184f8:	e0bffc17 	ldw	r2,-16(fp)
811184fc:	10800017 	ldw	r2,0(r2)
81118500:	10800717 	ldw	r2,28(r2)
81118504:	e1bfff17 	ldw	r6,-4(fp)
81118508:	e17ffe17 	ldw	r5,-8(fp)
8111850c:	e13ffc17 	ldw	r4,-16(fp)
81118510:	103ee83a 	callr	r2
81118514:	e0bffb15 	stw	r2,-20(fp)
81118518:	00000506 	br	81118530 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
8111851c:	00bfde84 	movi	r2,-134
81118520:	e0bffb15 	stw	r2,-20(fp)
81118524:	00000206 	br	81118530 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
81118528:	00bfebc4 	movi	r2,-81
8111852c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81118530:	e0bffb17 	ldw	r2,-20(fp)
81118534:	1000070e 	bge	r2,zero,81118554 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
81118538:	111845c0 	call	8111845c <alt_get_errno>
8111853c:	1007883a 	mov	r3,r2
81118540:	e0bffb17 	ldw	r2,-20(fp)
81118544:	0085c83a 	sub	r2,zero,r2
81118548:	18800015 	stw	r2,0(r3)
    rc = -1;
8111854c:	00bfffc4 	movi	r2,-1
81118550:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81118554:	e0bffb17 	ldw	r2,-20(fp)
}
81118558:	e037883a 	mov	sp,fp
8111855c:	dfc00117 	ldw	ra,4(sp)
81118560:	df000017 	ldw	fp,0(sp)
81118564:	dec00204 	addi	sp,sp,8
81118568:	f800283a 	ret

8111856c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8111856c:	defffd04 	addi	sp,sp,-12
81118570:	dfc00215 	stw	ra,8(sp)
81118574:	df000115 	stw	fp,4(sp)
81118578:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8111857c:	0009883a 	mov	r4,zero
81118580:	1118e200 	call	81118e20 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
81118584:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
81118588:	1118e580 	call	81118e58 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8111858c:	01a044b4 	movhi	r6,33042
81118590:	31b9cc04 	addi	r6,r6,-6352
81118594:	016044b4 	movhi	r5,33042
81118598:	2979cc04 	addi	r5,r5,-6352
8111859c:	012044b4 	movhi	r4,33042
811185a0:	2139cc04 	addi	r4,r4,-6352
811185a4:	111c8b00 	call	8111c8b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
811185a8:	111c3fc0 	call	8111c3fc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
811185ac:	012044b4 	movhi	r4,33042
811185b0:	21311704 	addi	r4,r4,-15268
811185b4:	111cdec0 	call	8111cdec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
811185b8:	d0a04517 	ldw	r2,-32492(gp)
811185bc:	d0e04617 	ldw	r3,-32488(gp)
811185c0:	d1204717 	ldw	r4,-32484(gp)
811185c4:	200d883a 	mov	r6,r4
811185c8:	180b883a 	mov	r5,r3
811185cc:	1009883a 	mov	r4,r2
811185d0:	11087180 	call	81108718 <main>
811185d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
811185d8:	01000044 	movi	r4,1
811185dc:	1117ff40 	call	81117ff4 <close>
  exit (result);
811185e0:	e13fff17 	ldw	r4,-4(fp)
811185e4:	111ce000 	call	8111ce00 <exit>

811185e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
811185e8:	defffe04 	addi	sp,sp,-8
811185ec:	df000115 	stw	fp,4(sp)
811185f0:	df000104 	addi	fp,sp,4
811185f4:	e13fff15 	stw	r4,-4(fp)
}
811185f8:	0001883a 	nop
811185fc:	e037883a 	mov	sp,fp
81118600:	df000017 	ldw	fp,0(sp)
81118604:	dec00104 	addi	sp,sp,4
81118608:	f800283a 	ret

8111860c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
8111860c:	defffe04 	addi	sp,sp,-8
81118610:	df000115 	stw	fp,4(sp)
81118614:	df000104 	addi	fp,sp,4
81118618:	e13fff15 	stw	r4,-4(fp)
}
8111861c:	0001883a 	nop
81118620:	e037883a 	mov	sp,fp
81118624:	df000017 	ldw	fp,0(sp)
81118628:	dec00104 	addi	sp,sp,4
8111862c:	f800283a 	ret

81118630 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
81118630:	defff204 	addi	sp,sp,-56
81118634:	dfc00a15 	stw	ra,40(sp)
81118638:	df000915 	stw	fp,36(sp)
8111863c:	df000904 	addi	fp,sp,36
81118640:	e13fff15 	stw	r4,-4(fp)
81118644:	e1400215 	stw	r5,8(fp)
81118648:	e1800315 	stw	r6,12(fp)
8111864c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
81118650:	e0800204 	addi	r2,fp,8
81118654:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
81118658:	e0bfff17 	ldw	r2,-4(fp)
8111865c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
81118660:	00006f06 	br	81118820 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
81118664:	e0bff807 	ldb	r2,-32(fp)
81118668:	10800960 	cmpeqi	r2,r2,37
8111866c:	1000041e 	bne	r2,zero,81118680 <alt_printf+0x50>
        {
            alt_putchar(c);
81118670:	e0bff807 	ldb	r2,-32(fp)
81118674:	1009883a 	mov	r4,r2
81118678:	111885c0 	call	8111885c <alt_putchar>
8111867c:	00006806 	br	81118820 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
81118680:	e0bff717 	ldw	r2,-36(fp)
81118684:	10c00044 	addi	r3,r2,1
81118688:	e0fff715 	stw	r3,-36(fp)
8111868c:	10800003 	ldbu	r2,0(r2)
81118690:	e0bff805 	stb	r2,-32(fp)
81118694:	e0bff807 	ldb	r2,-32(fp)
81118698:	10006926 	beq	r2,zero,81118840 <alt_printf+0x210>
            {
                if (c == '%')
8111869c:	e0bff807 	ldb	r2,-32(fp)
811186a0:	10800958 	cmpnei	r2,r2,37
811186a4:	1000041e 	bne	r2,zero,811186b8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
811186a8:	e0bff807 	ldb	r2,-32(fp)
811186ac:	1009883a 	mov	r4,r2
811186b0:	111885c0 	call	8111885c <alt_putchar>
811186b4:	00005a06 	br	81118820 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
811186b8:	e0bff807 	ldb	r2,-32(fp)
811186bc:	108018d8 	cmpnei	r2,r2,99
811186c0:	1000081e 	bne	r2,zero,811186e4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
811186c4:	e0bffe17 	ldw	r2,-8(fp)
811186c8:	10c00104 	addi	r3,r2,4
811186cc:	e0fffe15 	stw	r3,-8(fp)
811186d0:	10800017 	ldw	r2,0(r2)
811186d4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
811186d8:	e13ffd17 	ldw	r4,-12(fp)
811186dc:	111885c0 	call	8111885c <alt_putchar>
811186e0:	00004f06 	br	81118820 <alt_printf+0x1f0>
                }
                else if (c == 'x')
811186e4:	e0bff807 	ldb	r2,-32(fp)
811186e8:	10801e18 	cmpnei	r2,r2,120
811186ec:	1000341e 	bne	r2,zero,811187c0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
811186f0:	e0bffe17 	ldw	r2,-8(fp)
811186f4:	10c00104 	addi	r3,r2,4
811186f8:	e0fffe15 	stw	r3,-8(fp)
811186fc:	10800017 	ldw	r2,0(r2)
81118700:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81118704:	e0bffb17 	ldw	r2,-20(fp)
81118708:	1000031e 	bne	r2,zero,81118718 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
8111870c:	01000c04 	movi	r4,48
81118710:	111885c0 	call	8111885c <alt_putchar>
                        continue;
81118714:	00004206 	br	81118820 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81118718:	00800704 	movi	r2,28
8111871c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81118720:	00000306 	br	81118730 <alt_printf+0x100>
                        digit_shift -= 4;
81118724:	e0bff917 	ldw	r2,-28(fp)
81118728:	10bfff04 	addi	r2,r2,-4
8111872c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81118730:	00c003c4 	movi	r3,15
81118734:	e0bff917 	ldw	r2,-28(fp)
81118738:	1884983a 	sll	r2,r3,r2
8111873c:	1007883a 	mov	r3,r2
81118740:	e0bffb17 	ldw	r2,-20(fp)
81118744:	1884703a 	and	r2,r3,r2
81118748:	103ff626 	beq	r2,zero,81118724 <__reset+0xfb0f8724>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8111874c:	00001906 	br	811187b4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81118750:	00c003c4 	movi	r3,15
81118754:	e0bff917 	ldw	r2,-28(fp)
81118758:	1884983a 	sll	r2,r3,r2
8111875c:	1007883a 	mov	r3,r2
81118760:	e0bffb17 	ldw	r2,-20(fp)
81118764:	1886703a 	and	r3,r3,r2
81118768:	e0bff917 	ldw	r2,-28(fp)
8111876c:	1884d83a 	srl	r2,r3,r2
81118770:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
81118774:	e0bffc17 	ldw	r2,-16(fp)
81118778:	108002a8 	cmpgeui	r2,r2,10
8111877c:	1000041e 	bne	r2,zero,81118790 <alt_printf+0x160>
                            c = '0' + digit;
81118780:	e0bffc17 	ldw	r2,-16(fp)
81118784:	10800c04 	addi	r2,r2,48
81118788:	e0bff805 	stb	r2,-32(fp)
8111878c:	00000306 	br	8111879c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
81118790:	e0bffc17 	ldw	r2,-16(fp)
81118794:	108015c4 	addi	r2,r2,87
81118798:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8111879c:	e0bff807 	ldb	r2,-32(fp)
811187a0:	1009883a 	mov	r4,r2
811187a4:	111885c0 	call	8111885c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
811187a8:	e0bff917 	ldw	r2,-28(fp)
811187ac:	10bfff04 	addi	r2,r2,-4
811187b0:	e0bff915 	stw	r2,-28(fp)
811187b4:	e0bff917 	ldw	r2,-28(fp)
811187b8:	103fe50e 	bge	r2,zero,81118750 <__reset+0xfb0f8750>
811187bc:	00001806 	br	81118820 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
811187c0:	e0bff807 	ldb	r2,-32(fp)
811187c4:	10801cd8 	cmpnei	r2,r2,115
811187c8:	1000151e 	bne	r2,zero,81118820 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
811187cc:	e0bffe17 	ldw	r2,-8(fp)
811187d0:	10c00104 	addi	r3,r2,4
811187d4:	e0fffe15 	stw	r3,-8(fp)
811187d8:	10800017 	ldw	r2,0(r2)
811187dc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
811187e0:	00000906 	br	81118808 <alt_printf+0x1d8>
                      alt_putchar(*s++);
811187e4:	e0bffa17 	ldw	r2,-24(fp)
811187e8:	10c00044 	addi	r3,r2,1
811187ec:	e0fffa15 	stw	r3,-24(fp)
811187f0:	10800003 	ldbu	r2,0(r2)
811187f4:	10803fcc 	andi	r2,r2,255
811187f8:	1080201c 	xori	r2,r2,128
811187fc:	10bfe004 	addi	r2,r2,-128
81118800:	1009883a 	mov	r4,r2
81118804:	111885c0 	call	8111885c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81118808:	e0bffa17 	ldw	r2,-24(fp)
8111880c:	10800003 	ldbu	r2,0(r2)
81118810:	10803fcc 	andi	r2,r2,255
81118814:	1080201c 	xori	r2,r2,128
81118818:	10bfe004 	addi	r2,r2,-128
8111881c:	103ff11e 	bne	r2,zero,811187e4 <__reset+0xfb0f87e4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81118820:	e0bff717 	ldw	r2,-36(fp)
81118824:	10c00044 	addi	r3,r2,1
81118828:	e0fff715 	stw	r3,-36(fp)
8111882c:	10800003 	ldbu	r2,0(r2)
81118830:	e0bff805 	stb	r2,-32(fp)
81118834:	e0bff807 	ldb	r2,-32(fp)
81118838:	103f8a1e 	bne	r2,zero,81118664 <__reset+0xfb0f8664>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8111883c:	00000106 	br	81118844 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81118840:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81118844:	0001883a 	nop
81118848:	e037883a 	mov	sp,fp
8111884c:	dfc00117 	ldw	ra,4(sp)
81118850:	df000017 	ldw	fp,0(sp)
81118854:	dec00504 	addi	sp,sp,20
81118858:	f800283a 	ret

8111885c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8111885c:	defffd04 	addi	sp,sp,-12
81118860:	dfc00215 	stw	ra,8(sp)
81118864:	df000115 	stw	fp,4(sp)
81118868:	df000104 	addi	fp,sp,4
8111886c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
81118870:	d0a00917 	ldw	r2,-32732(gp)
81118874:	10800217 	ldw	r2,8(r2)
81118878:	100b883a 	mov	r5,r2
8111887c:	e13fff17 	ldw	r4,-4(fp)
81118880:	11128c80 	call	811128c8 <putc>
#endif
#endif
}
81118884:	e037883a 	mov	sp,fp
81118888:	dfc00117 	ldw	ra,4(sp)
8111888c:	df000017 	ldw	fp,0(sp)
81118890:	dec00204 	addi	sp,sp,8
81118894:	f800283a 	ret

81118898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81118898:	defffe04 	addi	sp,sp,-8
8111889c:	dfc00115 	stw	ra,4(sp)
811188a0:	df000015 	stw	fp,0(sp)
811188a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811188a8:	d0a01317 	ldw	r2,-32692(gp)
811188ac:	10000326 	beq	r2,zero,811188bc <alt_get_errno+0x24>
811188b0:	d0a01317 	ldw	r2,-32692(gp)
811188b4:	103ee83a 	callr	r2
811188b8:	00000106 	br	811188c0 <alt_get_errno+0x28>
811188bc:	d0a04304 	addi	r2,gp,-32500
}
811188c0:	e037883a 	mov	sp,fp
811188c4:	dfc00117 	ldw	ra,4(sp)
811188c8:	df000017 	ldw	fp,0(sp)
811188cc:	dec00204 	addi	sp,sp,8
811188d0:	f800283a 	ret

811188d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
811188d4:	defff904 	addi	sp,sp,-28
811188d8:	dfc00615 	stw	ra,24(sp)
811188dc:	df000515 	stw	fp,20(sp)
811188e0:	df000504 	addi	fp,sp,20
811188e4:	e13ffd15 	stw	r4,-12(fp)
811188e8:	e17ffe15 	stw	r5,-8(fp)
811188ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811188f0:	e0bffd17 	ldw	r2,-12(fp)
811188f4:	10000616 	blt	r2,zero,81118910 <read+0x3c>
811188f8:	e0bffd17 	ldw	r2,-12(fp)
811188fc:	10c00324 	muli	r3,r2,12
81118900:	00a044b4 	movhi	r2,33042
81118904:	10bca404 	addi	r2,r2,-3440
81118908:	1885883a 	add	r2,r3,r2
8111890c:	00000106 	br	81118914 <read+0x40>
81118910:	0005883a 	mov	r2,zero
81118914:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81118918:	e0bffb17 	ldw	r2,-20(fp)
8111891c:	10002226 	beq	r2,zero,811189a8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81118920:	e0bffb17 	ldw	r2,-20(fp)
81118924:	10800217 	ldw	r2,8(r2)
81118928:	108000cc 	andi	r2,r2,3
8111892c:	10800060 	cmpeqi	r2,r2,1
81118930:	1000181e 	bne	r2,zero,81118994 <read+0xc0>
        (fd->dev->read))
81118934:	e0bffb17 	ldw	r2,-20(fp)
81118938:	10800017 	ldw	r2,0(r2)
8111893c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81118940:	10001426 	beq	r2,zero,81118994 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81118944:	e0bffb17 	ldw	r2,-20(fp)
81118948:	10800017 	ldw	r2,0(r2)
8111894c:	10800517 	ldw	r2,20(r2)
81118950:	e0ffff17 	ldw	r3,-4(fp)
81118954:	180d883a 	mov	r6,r3
81118958:	e17ffe17 	ldw	r5,-8(fp)
8111895c:	e13ffb17 	ldw	r4,-20(fp)
81118960:	103ee83a 	callr	r2
81118964:	e0bffc15 	stw	r2,-16(fp)
81118968:	e0bffc17 	ldw	r2,-16(fp)
8111896c:	1000070e 	bge	r2,zero,8111898c <read+0xb8>
        {
          ALT_ERRNO = -rval;
81118970:	11188980 	call	81118898 <alt_get_errno>
81118974:	1007883a 	mov	r3,r2
81118978:	e0bffc17 	ldw	r2,-16(fp)
8111897c:	0085c83a 	sub	r2,zero,r2
81118980:	18800015 	stw	r2,0(r3)
          return -1;
81118984:	00bfffc4 	movi	r2,-1
81118988:	00000c06 	br	811189bc <read+0xe8>
        }
        return rval;
8111898c:	e0bffc17 	ldw	r2,-16(fp)
81118990:	00000a06 	br	811189bc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
81118994:	11188980 	call	81118898 <alt_get_errno>
81118998:	1007883a 	mov	r3,r2
8111899c:	00800344 	movi	r2,13
811189a0:	18800015 	stw	r2,0(r3)
811189a4:	00000406 	br	811189b8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
811189a8:	11188980 	call	81118898 <alt_get_errno>
811189ac:	1007883a 	mov	r3,r2
811189b0:	00801444 	movi	r2,81
811189b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
811189b8:	00bfffc4 	movi	r2,-1
}
811189bc:	e037883a 	mov	sp,fp
811189c0:	dfc00117 	ldw	ra,4(sp)
811189c4:	df000017 	ldw	fp,0(sp)
811189c8:	dec00204 	addi	sp,sp,8
811189cc:	f800283a 	ret

811189d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
811189d0:	defffe04 	addi	sp,sp,-8
811189d4:	df000115 	stw	fp,4(sp)
811189d8:	df000104 	addi	fp,sp,4
811189dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
811189e0:	e0bfff17 	ldw	r2,-4(fp)
811189e4:	108000d0 	cmplti	r2,r2,3
811189e8:	10000d1e 	bne	r2,zero,81118a20 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
811189ec:	00a044b4 	movhi	r2,33042
811189f0:	10bca404 	addi	r2,r2,-3440
811189f4:	e0ffff17 	ldw	r3,-4(fp)
811189f8:	18c00324 	muli	r3,r3,12
811189fc:	10c5883a 	add	r2,r2,r3
81118a00:	10800204 	addi	r2,r2,8
81118a04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81118a08:	00a044b4 	movhi	r2,33042
81118a0c:	10bca404 	addi	r2,r2,-3440
81118a10:	e0ffff17 	ldw	r3,-4(fp)
81118a14:	18c00324 	muli	r3,r3,12
81118a18:	10c5883a 	add	r2,r2,r3
81118a1c:	10000015 	stw	zero,0(r2)
  }
}
81118a20:	0001883a 	nop
81118a24:	e037883a 	mov	sp,fp
81118a28:	df000017 	ldw	fp,0(sp)
81118a2c:	dec00104 	addi	sp,sp,4
81118a30:	f800283a 	ret

81118a34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81118a34:	defff904 	addi	sp,sp,-28
81118a38:	df000615 	stw	fp,24(sp)
81118a3c:	df000604 	addi	fp,sp,24
81118a40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81118a44:	0005303a 	rdctl	r2,status
81118a48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81118a4c:	e0fffe17 	ldw	r3,-8(fp)
81118a50:	00bfff84 	movi	r2,-2
81118a54:	1884703a 	and	r2,r3,r2
81118a58:	1001703a 	wrctl	status,r2
  
  return context;
81118a5c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81118a60:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81118a64:	d0a01517 	ldw	r2,-32684(gp)
81118a68:	10c000c4 	addi	r3,r2,3
81118a6c:	00bfff04 	movi	r2,-4
81118a70:	1884703a 	and	r2,r3,r2
81118a74:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81118a78:	d0e01517 	ldw	r3,-32684(gp)
81118a7c:	e0bfff17 	ldw	r2,-4(fp)
81118a80:	1887883a 	add	r3,r3,r2
81118a84:	00a04834 	movhi	r2,33056
81118a88:	10a80004 	addi	r2,r2,-24576
81118a8c:	10c0062e 	bgeu	r2,r3,81118aa8 <sbrk+0x74>
81118a90:	e0bffb17 	ldw	r2,-20(fp)
81118a94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81118a98:	e0bffa17 	ldw	r2,-24(fp)
81118a9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81118aa0:	00bfffc4 	movi	r2,-1
81118aa4:	00000b06 	br	81118ad4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
81118aa8:	d0a01517 	ldw	r2,-32684(gp)
81118aac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
81118ab0:	d0e01517 	ldw	r3,-32684(gp)
81118ab4:	e0bfff17 	ldw	r2,-4(fp)
81118ab8:	1885883a 	add	r2,r3,r2
81118abc:	d0a01515 	stw	r2,-32684(gp)
81118ac0:	e0bffb17 	ldw	r2,-20(fp)
81118ac4:	e0bffc15 	stw	r2,-16(fp)
81118ac8:	e0bffc17 	ldw	r2,-16(fp)
81118acc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81118ad0:	e0bffd17 	ldw	r2,-12(fp)
} 
81118ad4:	e037883a 	mov	sp,fp
81118ad8:	df000017 	ldw	fp,0(sp)
81118adc:	dec00104 	addi	sp,sp,4
81118ae0:	f800283a 	ret

81118ae4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81118ae4:	defffa04 	addi	sp,sp,-24
81118ae8:	df000515 	stw	fp,20(sp)
81118aec:	df000504 	addi	fp,sp,20
81118af0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81118af4:	0005303a 	rdctl	r2,status
81118af8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81118afc:	e0fffc17 	ldw	r3,-16(fp)
81118b00:	00bfff84 	movi	r2,-2
81118b04:	1884703a 	and	r2,r3,r2
81118b08:	1001703a 	wrctl	status,r2
  
  return context;
81118b0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81118b10:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81118b14:	e0bfff17 	ldw	r2,-4(fp)
81118b18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
81118b1c:	e0bffd17 	ldw	r2,-12(fp)
81118b20:	10800017 	ldw	r2,0(r2)
81118b24:	e0fffd17 	ldw	r3,-12(fp)
81118b28:	18c00117 	ldw	r3,4(r3)
81118b2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81118b30:	e0bffd17 	ldw	r2,-12(fp)
81118b34:	10800117 	ldw	r2,4(r2)
81118b38:	e0fffd17 	ldw	r3,-12(fp)
81118b3c:	18c00017 	ldw	r3,0(r3)
81118b40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81118b44:	e0bffd17 	ldw	r2,-12(fp)
81118b48:	e0fffd17 	ldw	r3,-12(fp)
81118b4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81118b50:	e0bffd17 	ldw	r2,-12(fp)
81118b54:	e0fffd17 	ldw	r3,-12(fp)
81118b58:	10c00015 	stw	r3,0(r2)
81118b5c:	e0bffb17 	ldw	r2,-20(fp)
81118b60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81118b64:	e0bffe17 	ldw	r2,-8(fp)
81118b68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81118b6c:	0001883a 	nop
81118b70:	e037883a 	mov	sp,fp
81118b74:	df000017 	ldw	fp,0(sp)
81118b78:	dec00104 	addi	sp,sp,4
81118b7c:	f800283a 	ret

81118b80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81118b80:	defffb04 	addi	sp,sp,-20
81118b84:	dfc00415 	stw	ra,16(sp)
81118b88:	df000315 	stw	fp,12(sp)
81118b8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81118b90:	d0a01617 	ldw	r2,-32680(gp)
81118b94:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81118b98:	d0a04917 	ldw	r2,-32476(gp)
81118b9c:	10800044 	addi	r2,r2,1
81118ba0:	d0a04915 	stw	r2,-32476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81118ba4:	00002e06 	br	81118c60 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
81118ba8:	e0bffd17 	ldw	r2,-12(fp)
81118bac:	10800017 	ldw	r2,0(r2)
81118bb0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81118bb4:	e0bffd17 	ldw	r2,-12(fp)
81118bb8:	10800403 	ldbu	r2,16(r2)
81118bbc:	10803fcc 	andi	r2,r2,255
81118bc0:	10000426 	beq	r2,zero,81118bd4 <alt_tick+0x54>
81118bc4:	d0a04917 	ldw	r2,-32476(gp)
81118bc8:	1000021e 	bne	r2,zero,81118bd4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
81118bcc:	e0bffd17 	ldw	r2,-12(fp)
81118bd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81118bd4:	e0bffd17 	ldw	r2,-12(fp)
81118bd8:	10800217 	ldw	r2,8(r2)
81118bdc:	d0e04917 	ldw	r3,-32476(gp)
81118be0:	18801d36 	bltu	r3,r2,81118c58 <alt_tick+0xd8>
81118be4:	e0bffd17 	ldw	r2,-12(fp)
81118be8:	10800403 	ldbu	r2,16(r2)
81118bec:	10803fcc 	andi	r2,r2,255
81118bf0:	1000191e 	bne	r2,zero,81118c58 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
81118bf4:	e0bffd17 	ldw	r2,-12(fp)
81118bf8:	10800317 	ldw	r2,12(r2)
81118bfc:	e0fffd17 	ldw	r3,-12(fp)
81118c00:	18c00517 	ldw	r3,20(r3)
81118c04:	1809883a 	mov	r4,r3
81118c08:	103ee83a 	callr	r2
81118c0c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
81118c10:	e0bfff17 	ldw	r2,-4(fp)
81118c14:	1000031e 	bne	r2,zero,81118c24 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
81118c18:	e13ffd17 	ldw	r4,-12(fp)
81118c1c:	1118ae40 	call	81118ae4 <alt_alarm_stop>
81118c20:	00000d06 	br	81118c58 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
81118c24:	e0bffd17 	ldw	r2,-12(fp)
81118c28:	10c00217 	ldw	r3,8(r2)
81118c2c:	e0bfff17 	ldw	r2,-4(fp)
81118c30:	1887883a 	add	r3,r3,r2
81118c34:	e0bffd17 	ldw	r2,-12(fp)
81118c38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81118c3c:	e0bffd17 	ldw	r2,-12(fp)
81118c40:	10c00217 	ldw	r3,8(r2)
81118c44:	d0a04917 	ldw	r2,-32476(gp)
81118c48:	1880032e 	bgeu	r3,r2,81118c58 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
81118c4c:	e0bffd17 	ldw	r2,-12(fp)
81118c50:	00c00044 	movi	r3,1
81118c54:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81118c58:	e0bffe17 	ldw	r2,-8(fp)
81118c5c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81118c60:	e0fffd17 	ldw	r3,-12(fp)
81118c64:	d0a01604 	addi	r2,gp,-32680
81118c68:	18bfcf1e 	bne	r3,r2,81118ba8 <__reset+0xfb0f8ba8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81118c6c:	0001883a 	nop
}
81118c70:	0001883a 	nop
81118c74:	e037883a 	mov	sp,fp
81118c78:	dfc00117 	ldw	ra,4(sp)
81118c7c:	df000017 	ldw	fp,0(sp)
81118c80:	dec00204 	addi	sp,sp,8
81118c84:	f800283a 	ret

81118c88 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
81118c88:	defffd04 	addi	sp,sp,-12
81118c8c:	dfc00215 	stw	ra,8(sp)
81118c90:	df000115 	stw	fp,4(sp)
81118c94:	df000104 	addi	fp,sp,4
81118c98:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
81118c9c:	e13fff17 	ldw	r4,-4(fp)
81118ca0:	1117e900 	call	81117e90 <alt_busy_sleep>
}
81118ca4:	e037883a 	mov	sp,fp
81118ca8:	dfc00117 	ldw	ra,4(sp)
81118cac:	df000017 	ldw	fp,0(sp)
81118cb0:	dec00204 	addi	sp,sp,8
81118cb4:	f800283a 	ret

81118cb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81118cb8:	defffe04 	addi	sp,sp,-8
81118cbc:	dfc00115 	stw	ra,4(sp)
81118cc0:	df000015 	stw	fp,0(sp)
81118cc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81118cc8:	d0a01317 	ldw	r2,-32692(gp)
81118ccc:	10000326 	beq	r2,zero,81118cdc <alt_get_errno+0x24>
81118cd0:	d0a01317 	ldw	r2,-32692(gp)
81118cd4:	103ee83a 	callr	r2
81118cd8:	00000106 	br	81118ce0 <alt_get_errno+0x28>
81118cdc:	d0a04304 	addi	r2,gp,-32500
}
81118ce0:	e037883a 	mov	sp,fp
81118ce4:	dfc00117 	ldw	ra,4(sp)
81118ce8:	df000017 	ldw	fp,0(sp)
81118cec:	dec00204 	addi	sp,sp,8
81118cf0:	f800283a 	ret

81118cf4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
81118cf4:	defff904 	addi	sp,sp,-28
81118cf8:	dfc00615 	stw	ra,24(sp)
81118cfc:	df000515 	stw	fp,20(sp)
81118d00:	df000504 	addi	fp,sp,20
81118d04:	e13ffd15 	stw	r4,-12(fp)
81118d08:	e17ffe15 	stw	r5,-8(fp)
81118d0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81118d10:	e0bffd17 	ldw	r2,-12(fp)
81118d14:	10000616 	blt	r2,zero,81118d30 <write+0x3c>
81118d18:	e0bffd17 	ldw	r2,-12(fp)
81118d1c:	10c00324 	muli	r3,r2,12
81118d20:	00a044b4 	movhi	r2,33042
81118d24:	10bca404 	addi	r2,r2,-3440
81118d28:	1885883a 	add	r2,r3,r2
81118d2c:	00000106 	br	81118d34 <write+0x40>
81118d30:	0005883a 	mov	r2,zero
81118d34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81118d38:	e0bffb17 	ldw	r2,-20(fp)
81118d3c:	10002126 	beq	r2,zero,81118dc4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81118d40:	e0bffb17 	ldw	r2,-20(fp)
81118d44:	10800217 	ldw	r2,8(r2)
81118d48:	108000cc 	andi	r2,r2,3
81118d4c:	10001826 	beq	r2,zero,81118db0 <write+0xbc>
81118d50:	e0bffb17 	ldw	r2,-20(fp)
81118d54:	10800017 	ldw	r2,0(r2)
81118d58:	10800617 	ldw	r2,24(r2)
81118d5c:	10001426 	beq	r2,zero,81118db0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81118d60:	e0bffb17 	ldw	r2,-20(fp)
81118d64:	10800017 	ldw	r2,0(r2)
81118d68:	10800617 	ldw	r2,24(r2)
81118d6c:	e0ffff17 	ldw	r3,-4(fp)
81118d70:	180d883a 	mov	r6,r3
81118d74:	e17ffe17 	ldw	r5,-8(fp)
81118d78:	e13ffb17 	ldw	r4,-20(fp)
81118d7c:	103ee83a 	callr	r2
81118d80:	e0bffc15 	stw	r2,-16(fp)
81118d84:	e0bffc17 	ldw	r2,-16(fp)
81118d88:	1000070e 	bge	r2,zero,81118da8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
81118d8c:	1118cb80 	call	81118cb8 <alt_get_errno>
81118d90:	1007883a 	mov	r3,r2
81118d94:	e0bffc17 	ldw	r2,-16(fp)
81118d98:	0085c83a 	sub	r2,zero,r2
81118d9c:	18800015 	stw	r2,0(r3)
        return -1;
81118da0:	00bfffc4 	movi	r2,-1
81118da4:	00000c06 	br	81118dd8 <write+0xe4>
      }
      return rval;
81118da8:	e0bffc17 	ldw	r2,-16(fp)
81118dac:	00000a06 	br	81118dd8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
81118db0:	1118cb80 	call	81118cb8 <alt_get_errno>
81118db4:	1007883a 	mov	r3,r2
81118db8:	00800344 	movi	r2,13
81118dbc:	18800015 	stw	r2,0(r3)
81118dc0:	00000406 	br	81118dd4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
81118dc4:	1118cb80 	call	81118cb8 <alt_get_errno>
81118dc8:	1007883a 	mov	r3,r2
81118dcc:	00801444 	movi	r2,81
81118dd0:	18800015 	stw	r2,0(r3)
  }
  return -1;
81118dd4:	00bfffc4 	movi	r2,-1
}
81118dd8:	e037883a 	mov	sp,fp
81118ddc:	dfc00117 	ldw	ra,4(sp)
81118de0:	df000017 	ldw	fp,0(sp)
81118de4:	dec00204 	addi	sp,sp,8
81118de8:	f800283a 	ret

81118dec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
81118dec:	defffd04 	addi	sp,sp,-12
81118df0:	dfc00215 	stw	ra,8(sp)
81118df4:	df000115 	stw	fp,4(sp)
81118df8:	df000104 	addi	fp,sp,4
81118dfc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
81118e00:	d1601004 	addi	r5,gp,-32704
81118e04:	e13fff17 	ldw	r4,-4(fp)
81118e08:	111c3580 	call	8111c358 <alt_dev_llist_insert>
}
81118e0c:	e037883a 	mov	sp,fp
81118e10:	dfc00117 	ldw	ra,4(sp)
81118e14:	df000017 	ldw	fp,0(sp)
81118e18:	dec00204 	addi	sp,sp,8
81118e1c:	f800283a 	ret

81118e20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
81118e20:	defffd04 	addi	sp,sp,-12
81118e24:	dfc00215 	stw	ra,8(sp)
81118e28:	df000115 	stw	fp,4(sp)
81118e2c:	df000104 	addi	fp,sp,4
81118e30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
81118e34:	111cb800 	call	8111cb80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
81118e38:	00800044 	movi	r2,1
81118e3c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
81118e40:	0001883a 	nop
81118e44:	e037883a 	mov	sp,fp
81118e48:	dfc00117 	ldw	ra,4(sp)
81118e4c:	df000017 	ldw	fp,0(sp)
81118e50:	dec00204 	addi	sp,sp,8
81118e54:	f800283a 	ret

81118e58 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
81118e58:	defffe04 	addi	sp,sp,-8
81118e5c:	dfc00115 	stw	ra,4(sp)
81118e60:	df000015 	stw	fp,0(sp)
81118e64:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
81118e68:	01c0fa04 	movi	r7,1000
81118e6c:	01800304 	movi	r6,12
81118e70:	000b883a 	mov	r5,zero
81118e74:	01200034 	movhi	r4,32768
81118e78:	21021004 	addi	r4,r4,2112
81118e7c:	1119a200 	call	81119a20 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81118e80:	018002c4 	movi	r6,11
81118e84:	000b883a 	mov	r5,zero
81118e88:	012044b4 	movhi	r4,33042
81118e8c:	213d0e04 	addi	r4,r4,-3016
81118e90:	11190a40 	call	811190a4 <altera_avalon_jtag_uart_init>
81118e94:	012044b4 	movhi	r4,33042
81118e98:	213d0404 	addi	r4,r4,-3056
81118e9c:	1118dec0 	call	81118dec <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
81118ea0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
81118ea4:	018003c4 	movi	r6,15
81118ea8:	000b883a 	mov	r5,zero
81118eac:	012044b4 	movhi	r4,33042
81118eb0:	21012604 	addi	r4,r4,1176
81118eb4:	1119bac0 	call	81119bac <altera_avalon_uart_init>
81118eb8:	012044b4 	movhi	r4,33042
81118ebc:	21011c04 	addi	r4,r4,1136
81118ec0:	1118dec0 	call	81118dec <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
81118ec4:	00a044b4 	movhi	r2,33042
81118ec8:	10814d04 	addi	r2,r2,1332
81118ecc:	10c00717 	ldw	r3,28(r2)
81118ed0:	00a044b4 	movhi	r2,33042
81118ed4:	10814d04 	addi	r2,r2,1332
81118ed8:	10800817 	ldw	r2,32(r2)
81118edc:	100d883a 	mov	r6,r2
81118ee0:	180b883a 	mov	r5,r3
81118ee4:	012044b4 	movhi	r4,33042
81118ee8:	21014d04 	addi	r4,r4,1332
81118eec:	111bf400 	call	8111bf40 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
81118ef0:	00a044b4 	movhi	r2,33042
81118ef4:	10816504 	addi	r2,r2,1428
81118ef8:	10c00717 	ldw	r3,28(r2)
81118efc:	00a044b4 	movhi	r2,33042
81118f00:	10816504 	addi	r2,r2,1428
81118f04:	10800817 	ldw	r2,32(r2)
81118f08:	100d883a 	mov	r6,r2
81118f0c:	180b883a 	mov	r5,r3
81118f10:	012044b4 	movhi	r4,33042
81118f14:	21016504 	addi	r4,r4,1428
81118f18:	111bf400 	call	8111bf40 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
81118f1c:	012044b4 	movhi	r4,33042
81118f20:	21017d04 	addi	r4,r4,1524
81118f24:	1118dec0 	call	81118dec <alt_dev_reg>
}
81118f28:	0001883a 	nop
81118f2c:	e037883a 	mov	sp,fp
81118f30:	dfc00117 	ldw	ra,4(sp)
81118f34:	df000017 	ldw	fp,0(sp)
81118f38:	dec00204 	addi	sp,sp,8
81118f3c:	f800283a 	ret

81118f40 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81118f40:	defffa04 	addi	sp,sp,-24
81118f44:	dfc00515 	stw	ra,20(sp)
81118f48:	df000415 	stw	fp,16(sp)
81118f4c:	df000404 	addi	fp,sp,16
81118f50:	e13ffd15 	stw	r4,-12(fp)
81118f54:	e17ffe15 	stw	r5,-8(fp)
81118f58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81118f5c:	e0bffd17 	ldw	r2,-12(fp)
81118f60:	10800017 	ldw	r2,0(r2)
81118f64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
81118f68:	e0bffc17 	ldw	r2,-16(fp)
81118f6c:	10c00a04 	addi	r3,r2,40
81118f70:	e0bffd17 	ldw	r2,-12(fp)
81118f74:	10800217 	ldw	r2,8(r2)
81118f78:	100f883a 	mov	r7,r2
81118f7c:	e1bfff17 	ldw	r6,-4(fp)
81118f80:	e17ffe17 	ldw	r5,-8(fp)
81118f84:	1809883a 	mov	r4,r3
81118f88:	11195680 	call	81119568 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
81118f8c:	e037883a 	mov	sp,fp
81118f90:	dfc00117 	ldw	ra,4(sp)
81118f94:	df000017 	ldw	fp,0(sp)
81118f98:	dec00204 	addi	sp,sp,8
81118f9c:	f800283a 	ret

81118fa0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81118fa0:	defffa04 	addi	sp,sp,-24
81118fa4:	dfc00515 	stw	ra,20(sp)
81118fa8:	df000415 	stw	fp,16(sp)
81118fac:	df000404 	addi	fp,sp,16
81118fb0:	e13ffd15 	stw	r4,-12(fp)
81118fb4:	e17ffe15 	stw	r5,-8(fp)
81118fb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81118fbc:	e0bffd17 	ldw	r2,-12(fp)
81118fc0:	10800017 	ldw	r2,0(r2)
81118fc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81118fc8:	e0bffc17 	ldw	r2,-16(fp)
81118fcc:	10c00a04 	addi	r3,r2,40
81118fd0:	e0bffd17 	ldw	r2,-12(fp)
81118fd4:	10800217 	ldw	r2,8(r2)
81118fd8:	100f883a 	mov	r7,r2
81118fdc:	e1bfff17 	ldw	r6,-4(fp)
81118fe0:	e17ffe17 	ldw	r5,-8(fp)
81118fe4:	1809883a 	mov	r4,r3
81118fe8:	11197840 	call	81119784 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
81118fec:	e037883a 	mov	sp,fp
81118ff0:	dfc00117 	ldw	ra,4(sp)
81118ff4:	df000017 	ldw	fp,0(sp)
81118ff8:	dec00204 	addi	sp,sp,8
81118ffc:	f800283a 	ret

81119000 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
81119000:	defffc04 	addi	sp,sp,-16
81119004:	dfc00315 	stw	ra,12(sp)
81119008:	df000215 	stw	fp,8(sp)
8111900c:	df000204 	addi	fp,sp,8
81119010:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81119014:	e0bfff17 	ldw	r2,-4(fp)
81119018:	10800017 	ldw	r2,0(r2)
8111901c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
81119020:	e0bffe17 	ldw	r2,-8(fp)
81119024:	10c00a04 	addi	r3,r2,40
81119028:	e0bfff17 	ldw	r2,-4(fp)
8111902c:	10800217 	ldw	r2,8(r2)
81119030:	100b883a 	mov	r5,r2
81119034:	1809883a 	mov	r4,r3
81119038:	11194100 	call	81119410 <altera_avalon_jtag_uart_close>
}
8111903c:	e037883a 	mov	sp,fp
81119040:	dfc00117 	ldw	ra,4(sp)
81119044:	df000017 	ldw	fp,0(sp)
81119048:	dec00204 	addi	sp,sp,8
8111904c:	f800283a 	ret

81119050 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81119050:	defffa04 	addi	sp,sp,-24
81119054:	dfc00515 	stw	ra,20(sp)
81119058:	df000415 	stw	fp,16(sp)
8111905c:	df000404 	addi	fp,sp,16
81119060:	e13ffd15 	stw	r4,-12(fp)
81119064:	e17ffe15 	stw	r5,-8(fp)
81119068:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8111906c:	e0bffd17 	ldw	r2,-12(fp)
81119070:	10800017 	ldw	r2,0(r2)
81119074:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81119078:	e0bffc17 	ldw	r2,-16(fp)
8111907c:	10800a04 	addi	r2,r2,40
81119080:	e1bfff17 	ldw	r6,-4(fp)
81119084:	e17ffe17 	ldw	r5,-8(fp)
81119088:	1009883a 	mov	r4,r2
8111908c:	11194780 	call	81119478 <altera_avalon_jtag_uart_ioctl>
}
81119090:	e037883a 	mov	sp,fp
81119094:	dfc00117 	ldw	ra,4(sp)
81119098:	df000017 	ldw	fp,0(sp)
8111909c:	dec00204 	addi	sp,sp,8
811190a0:	f800283a 	ret

811190a4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
811190a4:	defffa04 	addi	sp,sp,-24
811190a8:	dfc00515 	stw	ra,20(sp)
811190ac:	df000415 	stw	fp,16(sp)
811190b0:	df000404 	addi	fp,sp,16
811190b4:	e13ffd15 	stw	r4,-12(fp)
811190b8:	e17ffe15 	stw	r5,-8(fp)
811190bc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
811190c0:	e0bffd17 	ldw	r2,-12(fp)
811190c4:	00c00044 	movi	r3,1
811190c8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
811190cc:	e0bffd17 	ldw	r2,-12(fp)
811190d0:	10800017 	ldw	r2,0(r2)
811190d4:	10800104 	addi	r2,r2,4
811190d8:	1007883a 	mov	r3,r2
811190dc:	e0bffd17 	ldw	r2,-12(fp)
811190e0:	10800817 	ldw	r2,32(r2)
811190e4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
811190e8:	e0bffe17 	ldw	r2,-8(fp)
811190ec:	e0ffff17 	ldw	r3,-4(fp)
811190f0:	d8000015 	stw	zero,0(sp)
811190f4:	e1fffd17 	ldw	r7,-12(fp)
811190f8:	01a044b4 	movhi	r6,33042
811190fc:	31a45904 	addi	r6,r6,-28316
81119100:	180b883a 	mov	r5,r3
81119104:	1009883a 	mov	r4,r2
81119108:	111c54c0 	call	8111c54c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8111910c:	e0bffd17 	ldw	r2,-12(fp)
81119110:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
81119114:	e0bffd17 	ldw	r2,-12(fp)
81119118:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8111911c:	d0e04817 	ldw	r3,-32480(gp)
81119120:	e1fffd17 	ldw	r7,-12(fp)
81119124:	01a044b4 	movhi	r6,33042
81119128:	31a4dc04 	addi	r6,r6,-27792
8111912c:	180b883a 	mov	r5,r3
81119130:	1009883a 	mov	r4,r2
81119134:	111c1f00 	call	8111c1f0 <alt_alarm_start>
81119138:	1000040e 	bge	r2,zero,8111914c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8111913c:	e0fffd17 	ldw	r3,-12(fp)
81119140:	00a00034 	movhi	r2,32768
81119144:	10bfffc4 	addi	r2,r2,-1
81119148:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8111914c:	0001883a 	nop
81119150:	e037883a 	mov	sp,fp
81119154:	dfc00117 	ldw	ra,4(sp)
81119158:	df000017 	ldw	fp,0(sp)
8111915c:	dec00204 	addi	sp,sp,8
81119160:	f800283a 	ret

81119164 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81119164:	defff804 	addi	sp,sp,-32
81119168:	df000715 	stw	fp,28(sp)
8111916c:	df000704 	addi	fp,sp,28
81119170:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81119174:	e0bfff17 	ldw	r2,-4(fp)
81119178:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
8111917c:	e0bffb17 	ldw	r2,-20(fp)
81119180:	10800017 	ldw	r2,0(r2)
81119184:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81119188:	e0bffc17 	ldw	r2,-16(fp)
8111918c:	10800104 	addi	r2,r2,4
81119190:	10800037 	ldwio	r2,0(r2)
81119194:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
81119198:	e0bffd17 	ldw	r2,-12(fp)
8111919c:	1080c00c 	andi	r2,r2,768
811191a0:	10006d26 	beq	r2,zero,81119358 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
811191a4:	e0bffd17 	ldw	r2,-12(fp)
811191a8:	1080400c 	andi	r2,r2,256
811191ac:	10003526 	beq	r2,zero,81119284 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
811191b0:	00800074 	movhi	r2,1
811191b4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811191b8:	e0bffb17 	ldw	r2,-20(fp)
811191bc:	10800a17 	ldw	r2,40(r2)
811191c0:	10800044 	addi	r2,r2,1
811191c4:	1081ffcc 	andi	r2,r2,2047
811191c8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
811191cc:	e0bffb17 	ldw	r2,-20(fp)
811191d0:	10c00b17 	ldw	r3,44(r2)
811191d4:	e0bffe17 	ldw	r2,-8(fp)
811191d8:	18801526 	beq	r3,r2,81119230 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
811191dc:	e0bffc17 	ldw	r2,-16(fp)
811191e0:	10800037 	ldwio	r2,0(r2)
811191e4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
811191e8:	e0bff917 	ldw	r2,-28(fp)
811191ec:	10a0000c 	andi	r2,r2,32768
811191f0:	10001126 	beq	r2,zero,81119238 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
811191f4:	e0bffb17 	ldw	r2,-20(fp)
811191f8:	10800a17 	ldw	r2,40(r2)
811191fc:	e0fff917 	ldw	r3,-28(fp)
81119200:	1809883a 	mov	r4,r3
81119204:	e0fffb17 	ldw	r3,-20(fp)
81119208:	1885883a 	add	r2,r3,r2
8111920c:	10800e04 	addi	r2,r2,56
81119210:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81119214:	e0bffb17 	ldw	r2,-20(fp)
81119218:	10800a17 	ldw	r2,40(r2)
8111921c:	10800044 	addi	r2,r2,1
81119220:	10c1ffcc 	andi	r3,r2,2047
81119224:	e0bffb17 	ldw	r2,-20(fp)
81119228:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
8111922c:	003fe206 	br	811191b8 <__reset+0xfb0f91b8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81119230:	0001883a 	nop
81119234:	00000106 	br	8111923c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81119238:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8111923c:	e0bff917 	ldw	r2,-28(fp)
81119240:	10bfffec 	andhi	r2,r2,65535
81119244:	10000f26 	beq	r2,zero,81119284 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81119248:	e0bffb17 	ldw	r2,-20(fp)
8111924c:	10c00817 	ldw	r3,32(r2)
81119250:	00bfff84 	movi	r2,-2
81119254:	1886703a 	and	r3,r3,r2
81119258:	e0bffb17 	ldw	r2,-20(fp)
8111925c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81119260:	e0bffc17 	ldw	r2,-16(fp)
81119264:	10800104 	addi	r2,r2,4
81119268:	1007883a 	mov	r3,r2
8111926c:	e0bffb17 	ldw	r2,-20(fp)
81119270:	10800817 	ldw	r2,32(r2)
81119274:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81119278:	e0bffc17 	ldw	r2,-16(fp)
8111927c:	10800104 	addi	r2,r2,4
81119280:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81119284:	e0bffd17 	ldw	r2,-12(fp)
81119288:	1080800c 	andi	r2,r2,512
8111928c:	103fbe26 	beq	r2,zero,81119188 <__reset+0xfb0f9188>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
81119290:	e0bffd17 	ldw	r2,-12(fp)
81119294:	1004d43a 	srli	r2,r2,16
81119298:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8111929c:	00001406 	br	811192f0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
811192a0:	e0bffc17 	ldw	r2,-16(fp)
811192a4:	e0fffb17 	ldw	r3,-20(fp)
811192a8:	18c00d17 	ldw	r3,52(r3)
811192ac:	e13ffb17 	ldw	r4,-20(fp)
811192b0:	20c7883a 	add	r3,r4,r3
811192b4:	18c20e04 	addi	r3,r3,2104
811192b8:	18c00003 	ldbu	r3,0(r3)
811192bc:	18c03fcc 	andi	r3,r3,255
811192c0:	18c0201c 	xori	r3,r3,128
811192c4:	18ffe004 	addi	r3,r3,-128
811192c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811192cc:	e0bffb17 	ldw	r2,-20(fp)
811192d0:	10800d17 	ldw	r2,52(r2)
811192d4:	10800044 	addi	r2,r2,1
811192d8:	10c1ffcc 	andi	r3,r2,2047
811192dc:	e0bffb17 	ldw	r2,-20(fp)
811192e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
811192e4:	e0bffa17 	ldw	r2,-24(fp)
811192e8:	10bfffc4 	addi	r2,r2,-1
811192ec:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
811192f0:	e0bffa17 	ldw	r2,-24(fp)
811192f4:	10000526 	beq	r2,zero,8111930c <altera_avalon_jtag_uart_irq+0x1a8>
811192f8:	e0bffb17 	ldw	r2,-20(fp)
811192fc:	10c00d17 	ldw	r3,52(r2)
81119300:	e0bffb17 	ldw	r2,-20(fp)
81119304:	10800c17 	ldw	r2,48(r2)
81119308:	18bfe51e 	bne	r3,r2,811192a0 <__reset+0xfb0f92a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
8111930c:	e0bffa17 	ldw	r2,-24(fp)
81119310:	103f9d26 	beq	r2,zero,81119188 <__reset+0xfb0f9188>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81119314:	e0bffb17 	ldw	r2,-20(fp)
81119318:	10c00817 	ldw	r3,32(r2)
8111931c:	00bfff44 	movi	r2,-3
81119320:	1886703a 	and	r3,r3,r2
81119324:	e0bffb17 	ldw	r2,-20(fp)
81119328:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8111932c:	e0bffb17 	ldw	r2,-20(fp)
81119330:	10800017 	ldw	r2,0(r2)
81119334:	10800104 	addi	r2,r2,4
81119338:	1007883a 	mov	r3,r2
8111933c:	e0bffb17 	ldw	r2,-20(fp)
81119340:	10800817 	ldw	r2,32(r2)
81119344:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81119348:	e0bffc17 	ldw	r2,-16(fp)
8111934c:	10800104 	addi	r2,r2,4
81119350:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81119354:	003f8c06 	br	81119188 <__reset+0xfb0f9188>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81119358:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8111935c:	0001883a 	nop
81119360:	e037883a 	mov	sp,fp
81119364:	df000017 	ldw	fp,0(sp)
81119368:	dec00104 	addi	sp,sp,4
8111936c:	f800283a 	ret

81119370 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81119370:	defff804 	addi	sp,sp,-32
81119374:	df000715 	stw	fp,28(sp)
81119378:	df000704 	addi	fp,sp,28
8111937c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81119380:	e0bffb17 	ldw	r2,-20(fp)
81119384:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81119388:	e0bff917 	ldw	r2,-28(fp)
8111938c:	10800017 	ldw	r2,0(r2)
81119390:	10800104 	addi	r2,r2,4
81119394:	10800037 	ldwio	r2,0(r2)
81119398:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8111939c:	e0bffa17 	ldw	r2,-24(fp)
811193a0:	1081000c 	andi	r2,r2,1024
811193a4:	10000b26 	beq	r2,zero,811193d4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
811193a8:	e0bff917 	ldw	r2,-28(fp)
811193ac:	10800017 	ldw	r2,0(r2)
811193b0:	10800104 	addi	r2,r2,4
811193b4:	1007883a 	mov	r3,r2
811193b8:	e0bff917 	ldw	r2,-28(fp)
811193bc:	10800817 	ldw	r2,32(r2)
811193c0:	10810014 	ori	r2,r2,1024
811193c4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
811193c8:	e0bff917 	ldw	r2,-28(fp)
811193cc:	10000915 	stw	zero,36(r2)
811193d0:	00000a06 	br	811193fc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
811193d4:	e0bff917 	ldw	r2,-28(fp)
811193d8:	10c00917 	ldw	r3,36(r2)
811193dc:	00a00034 	movhi	r2,32768
811193e0:	10bfff04 	addi	r2,r2,-4
811193e4:	10c00536 	bltu	r2,r3,811193fc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
811193e8:	e0bff917 	ldw	r2,-28(fp)
811193ec:	10800917 	ldw	r2,36(r2)
811193f0:	10c00044 	addi	r3,r2,1
811193f4:	e0bff917 	ldw	r2,-28(fp)
811193f8:	10c00915 	stw	r3,36(r2)
811193fc:	d0a04817 	ldw	r2,-32480(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
81119400:	e037883a 	mov	sp,fp
81119404:	df000017 	ldw	fp,0(sp)
81119408:	dec00104 	addi	sp,sp,4
8111940c:	f800283a 	ret

81119410 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
81119410:	defffd04 	addi	sp,sp,-12
81119414:	df000215 	stw	fp,8(sp)
81119418:	df000204 	addi	fp,sp,8
8111941c:	e13ffe15 	stw	r4,-8(fp)
81119420:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81119424:	00000506 	br	8111943c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
81119428:	e0bfff17 	ldw	r2,-4(fp)
8111942c:	1090000c 	andi	r2,r2,16384
81119430:	10000226 	beq	r2,zero,8111943c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
81119434:	00bffd44 	movi	r2,-11
81119438:	00000b06 	br	81119468 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8111943c:	e0bffe17 	ldw	r2,-8(fp)
81119440:	10c00d17 	ldw	r3,52(r2)
81119444:	e0bffe17 	ldw	r2,-8(fp)
81119448:	10800c17 	ldw	r2,48(r2)
8111944c:	18800526 	beq	r3,r2,81119464 <altera_avalon_jtag_uart_close+0x54>
81119450:	e0bffe17 	ldw	r2,-8(fp)
81119454:	10c00917 	ldw	r3,36(r2)
81119458:	e0bffe17 	ldw	r2,-8(fp)
8111945c:	10800117 	ldw	r2,4(r2)
81119460:	18bff136 	bltu	r3,r2,81119428 <__reset+0xfb0f9428>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81119464:	0005883a 	mov	r2,zero
}
81119468:	e037883a 	mov	sp,fp
8111946c:	df000017 	ldw	fp,0(sp)
81119470:	dec00104 	addi	sp,sp,4
81119474:	f800283a 	ret

81119478 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81119478:	defffa04 	addi	sp,sp,-24
8111947c:	df000515 	stw	fp,20(sp)
81119480:	df000504 	addi	fp,sp,20
81119484:	e13ffd15 	stw	r4,-12(fp)
81119488:	e17ffe15 	stw	r5,-8(fp)
8111948c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81119490:	00bff9c4 	movi	r2,-25
81119494:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
81119498:	e0bffe17 	ldw	r2,-8(fp)
8111949c:	10da8060 	cmpeqi	r3,r2,27137
811194a0:	1800031e 	bne	r3,zero,811194b0 <altera_avalon_jtag_uart_ioctl+0x38>
811194a4:	109a80a0 	cmpeqi	r2,r2,27138
811194a8:	1000181e 	bne	r2,zero,8111950c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
811194ac:	00002906 	br	81119554 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
811194b0:	e0bffd17 	ldw	r2,-12(fp)
811194b4:	10c00117 	ldw	r3,4(r2)
811194b8:	00a00034 	movhi	r2,32768
811194bc:	10bfffc4 	addi	r2,r2,-1
811194c0:	18802126 	beq	r3,r2,81119548 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
811194c4:	e0bfff17 	ldw	r2,-4(fp)
811194c8:	10800017 	ldw	r2,0(r2)
811194cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
811194d0:	e0bffc17 	ldw	r2,-16(fp)
811194d4:	10800090 	cmplti	r2,r2,2
811194d8:	1000061e 	bne	r2,zero,811194f4 <altera_avalon_jtag_uart_ioctl+0x7c>
811194dc:	e0fffc17 	ldw	r3,-16(fp)
811194e0:	00a00034 	movhi	r2,32768
811194e4:	10bfffc4 	addi	r2,r2,-1
811194e8:	18800226 	beq	r3,r2,811194f4 <altera_avalon_jtag_uart_ioctl+0x7c>
811194ec:	e0bffc17 	ldw	r2,-16(fp)
811194f0:	00000206 	br	811194fc <altera_avalon_jtag_uart_ioctl+0x84>
811194f4:	00a00034 	movhi	r2,32768
811194f8:	10bfff84 	addi	r2,r2,-2
811194fc:	e0fffd17 	ldw	r3,-12(fp)
81119500:	18800115 	stw	r2,4(r3)
      rc = 0;
81119504:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81119508:	00000f06 	br	81119548 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8111950c:	e0bffd17 	ldw	r2,-12(fp)
81119510:	10c00117 	ldw	r3,4(r2)
81119514:	00a00034 	movhi	r2,32768
81119518:	10bfffc4 	addi	r2,r2,-1
8111951c:	18800c26 	beq	r3,r2,81119550 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
81119520:	e0bffd17 	ldw	r2,-12(fp)
81119524:	10c00917 	ldw	r3,36(r2)
81119528:	e0bffd17 	ldw	r2,-12(fp)
8111952c:	10800117 	ldw	r2,4(r2)
81119530:	1885803a 	cmpltu	r2,r3,r2
81119534:	10c03fcc 	andi	r3,r2,255
81119538:	e0bfff17 	ldw	r2,-4(fp)
8111953c:	10c00015 	stw	r3,0(r2)
      rc = 0;
81119540:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81119544:	00000206 	br	81119550 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81119548:	0001883a 	nop
8111954c:	00000106 	br	81119554 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81119550:	0001883a 	nop

  default:
    break;
  }

  return rc;
81119554:	e0bffb17 	ldw	r2,-20(fp)
}
81119558:	e037883a 	mov	sp,fp
8111955c:	df000017 	ldw	fp,0(sp)
81119560:	dec00104 	addi	sp,sp,4
81119564:	f800283a 	ret

81119568 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81119568:	defff304 	addi	sp,sp,-52
8111956c:	dfc00c15 	stw	ra,48(sp)
81119570:	df000b15 	stw	fp,44(sp)
81119574:	df000b04 	addi	fp,sp,44
81119578:	e13ffc15 	stw	r4,-16(fp)
8111957c:	e17ffd15 	stw	r5,-12(fp)
81119580:	e1bffe15 	stw	r6,-8(fp)
81119584:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81119588:	e0bffd17 	ldw	r2,-12(fp)
8111958c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81119590:	00004706 	br	811196b0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
81119594:	e0bffc17 	ldw	r2,-16(fp)
81119598:	10800a17 	ldw	r2,40(r2)
8111959c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
811195a0:	e0bffc17 	ldw	r2,-16(fp)
811195a4:	10800b17 	ldw	r2,44(r2)
811195a8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
811195ac:	e0fff717 	ldw	r3,-36(fp)
811195b0:	e0bff817 	ldw	r2,-32(fp)
811195b4:	18800536 	bltu	r3,r2,811195cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
811195b8:	e0fff717 	ldw	r3,-36(fp)
811195bc:	e0bff817 	ldw	r2,-32(fp)
811195c0:	1885c83a 	sub	r2,r3,r2
811195c4:	e0bff615 	stw	r2,-40(fp)
811195c8:	00000406 	br	811195dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
811195cc:	00c20004 	movi	r3,2048
811195d0:	e0bff817 	ldw	r2,-32(fp)
811195d4:	1885c83a 	sub	r2,r3,r2
811195d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
811195dc:	e0bff617 	ldw	r2,-40(fp)
811195e0:	10001e26 	beq	r2,zero,8111965c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
811195e4:	e0fffe17 	ldw	r3,-8(fp)
811195e8:	e0bff617 	ldw	r2,-40(fp)
811195ec:	1880022e 	bgeu	r3,r2,811195f8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
811195f0:	e0bffe17 	ldw	r2,-8(fp)
811195f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
811195f8:	e0bffc17 	ldw	r2,-16(fp)
811195fc:	10c00e04 	addi	r3,r2,56
81119600:	e0bff817 	ldw	r2,-32(fp)
81119604:	1885883a 	add	r2,r3,r2
81119608:	e1bff617 	ldw	r6,-40(fp)
8111960c:	100b883a 	mov	r5,r2
81119610:	e13ff517 	ldw	r4,-44(fp)
81119614:	110b8ec0 	call	8110b8ec <memcpy>
      ptr   += n;
81119618:	e0fff517 	ldw	r3,-44(fp)
8111961c:	e0bff617 	ldw	r2,-40(fp)
81119620:	1885883a 	add	r2,r3,r2
81119624:	e0bff515 	stw	r2,-44(fp)
      space -= n;
81119628:	e0fffe17 	ldw	r3,-8(fp)
8111962c:	e0bff617 	ldw	r2,-40(fp)
81119630:	1885c83a 	sub	r2,r3,r2
81119634:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81119638:	e0fff817 	ldw	r3,-32(fp)
8111963c:	e0bff617 	ldw	r2,-40(fp)
81119640:	1885883a 	add	r2,r3,r2
81119644:	10c1ffcc 	andi	r3,r2,2047
81119648:	e0bffc17 	ldw	r2,-16(fp)
8111964c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
81119650:	e0bffe17 	ldw	r2,-8(fp)
81119654:	00bfcf16 	blt	zero,r2,81119594 <__reset+0xfb0f9594>
81119658:	00000106 	br	81119660 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8111965c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81119660:	e0fff517 	ldw	r3,-44(fp)
81119664:	e0bffd17 	ldw	r2,-12(fp)
81119668:	1880141e 	bne	r3,r2,811196bc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8111966c:	e0bfff17 	ldw	r2,-4(fp)
81119670:	1090000c 	andi	r2,r2,16384
81119674:	1000131e 	bne	r2,zero,811196c4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81119678:	0001883a 	nop
8111967c:	e0bffc17 	ldw	r2,-16(fp)
81119680:	10c00a17 	ldw	r3,40(r2)
81119684:	e0bff717 	ldw	r2,-36(fp)
81119688:	1880051e 	bne	r3,r2,811196a0 <altera_avalon_jtag_uart_read+0x138>
8111968c:	e0bffc17 	ldw	r2,-16(fp)
81119690:	10c00917 	ldw	r3,36(r2)
81119694:	e0bffc17 	ldw	r2,-16(fp)
81119698:	10800117 	ldw	r2,4(r2)
8111969c:	18bff736 	bltu	r3,r2,8111967c <__reset+0xfb0f967c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
811196a0:	e0bffc17 	ldw	r2,-16(fp)
811196a4:	10c00a17 	ldw	r3,40(r2)
811196a8:	e0bff717 	ldw	r2,-36(fp)
811196ac:	18800726 	beq	r3,r2,811196cc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
811196b0:	e0bffe17 	ldw	r2,-8(fp)
811196b4:	00bfb716 	blt	zero,r2,81119594 <__reset+0xfb0f9594>
811196b8:	00000506 	br	811196d0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
811196bc:	0001883a 	nop
811196c0:	00000306 	br	811196d0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
811196c4:	0001883a 	nop
811196c8:	00000106 	br	811196d0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
811196cc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
811196d0:	e0fff517 	ldw	r3,-44(fp)
811196d4:	e0bffd17 	ldw	r2,-12(fp)
811196d8:	18801826 	beq	r3,r2,8111973c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811196dc:	0005303a 	rdctl	r2,status
811196e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811196e4:	e0fffb17 	ldw	r3,-20(fp)
811196e8:	00bfff84 	movi	r2,-2
811196ec:	1884703a 	and	r2,r3,r2
811196f0:	1001703a 	wrctl	status,r2
  
  return context;
811196f4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
811196f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
811196fc:	e0bffc17 	ldw	r2,-16(fp)
81119700:	10800817 	ldw	r2,32(r2)
81119704:	10c00054 	ori	r3,r2,1
81119708:	e0bffc17 	ldw	r2,-16(fp)
8111970c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81119710:	e0bffc17 	ldw	r2,-16(fp)
81119714:	10800017 	ldw	r2,0(r2)
81119718:	10800104 	addi	r2,r2,4
8111971c:	1007883a 	mov	r3,r2
81119720:	e0bffc17 	ldw	r2,-16(fp)
81119724:	10800817 	ldw	r2,32(r2)
81119728:	18800035 	stwio	r2,0(r3)
8111972c:	e0bffa17 	ldw	r2,-24(fp)
81119730:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81119734:	e0bff917 	ldw	r2,-28(fp)
81119738:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8111973c:	e0fff517 	ldw	r3,-44(fp)
81119740:	e0bffd17 	ldw	r2,-12(fp)
81119744:	18800426 	beq	r3,r2,81119758 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
81119748:	e0fff517 	ldw	r3,-44(fp)
8111974c:	e0bffd17 	ldw	r2,-12(fp)
81119750:	1885c83a 	sub	r2,r3,r2
81119754:	00000606 	br	81119770 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
81119758:	e0bfff17 	ldw	r2,-4(fp)
8111975c:	1090000c 	andi	r2,r2,16384
81119760:	10000226 	beq	r2,zero,8111976c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
81119764:	00bffd44 	movi	r2,-11
81119768:	00000106 	br	81119770 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
8111976c:	00bffec4 	movi	r2,-5
}
81119770:	e037883a 	mov	sp,fp
81119774:	dfc00117 	ldw	ra,4(sp)
81119778:	df000017 	ldw	fp,0(sp)
8111977c:	dec00204 	addi	sp,sp,8
81119780:	f800283a 	ret

81119784 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81119784:	defff304 	addi	sp,sp,-52
81119788:	dfc00c15 	stw	ra,48(sp)
8111978c:	df000b15 	stw	fp,44(sp)
81119790:	df000b04 	addi	fp,sp,44
81119794:	e13ffc15 	stw	r4,-16(fp)
81119798:	e17ffd15 	stw	r5,-12(fp)
8111979c:	e1bffe15 	stw	r6,-8(fp)
811197a0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
811197a4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
811197a8:	e0bffd17 	ldw	r2,-12(fp)
811197ac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
811197b0:	00003706 	br	81119890 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
811197b4:	e0bffc17 	ldw	r2,-16(fp)
811197b8:	10800c17 	ldw	r2,48(r2)
811197bc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
811197c0:	e0bffc17 	ldw	r2,-16(fp)
811197c4:	10800d17 	ldw	r2,52(r2)
811197c8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
811197cc:	e0fff917 	ldw	r3,-28(fp)
811197d0:	e0bff517 	ldw	r2,-44(fp)
811197d4:	1880062e 	bgeu	r3,r2,811197f0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
811197d8:	e0fff517 	ldw	r3,-44(fp)
811197dc:	e0bff917 	ldw	r2,-28(fp)
811197e0:	1885c83a 	sub	r2,r3,r2
811197e4:	10bfffc4 	addi	r2,r2,-1
811197e8:	e0bff615 	stw	r2,-40(fp)
811197ec:	00000b06 	br	8111981c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
811197f0:	e0bff517 	ldw	r2,-44(fp)
811197f4:	10000526 	beq	r2,zero,8111980c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
811197f8:	00c20004 	movi	r3,2048
811197fc:	e0bff917 	ldw	r2,-28(fp)
81119800:	1885c83a 	sub	r2,r3,r2
81119804:	e0bff615 	stw	r2,-40(fp)
81119808:	00000406 	br	8111981c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8111980c:	00c1ffc4 	movi	r3,2047
81119810:	e0bff917 	ldw	r2,-28(fp)
81119814:	1885c83a 	sub	r2,r3,r2
81119818:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8111981c:	e0bff617 	ldw	r2,-40(fp)
81119820:	10001e26 	beq	r2,zero,8111989c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
81119824:	e0fffe17 	ldw	r3,-8(fp)
81119828:	e0bff617 	ldw	r2,-40(fp)
8111982c:	1880022e 	bgeu	r3,r2,81119838 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
81119830:	e0bffe17 	ldw	r2,-8(fp)
81119834:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
81119838:	e0bffc17 	ldw	r2,-16(fp)
8111983c:	10c20e04 	addi	r3,r2,2104
81119840:	e0bff917 	ldw	r2,-28(fp)
81119844:	1885883a 	add	r2,r3,r2
81119848:	e1bff617 	ldw	r6,-40(fp)
8111984c:	e17ffd17 	ldw	r5,-12(fp)
81119850:	1009883a 	mov	r4,r2
81119854:	110b8ec0 	call	8110b8ec <memcpy>
      ptr   += n;
81119858:	e0fffd17 	ldw	r3,-12(fp)
8111985c:	e0bff617 	ldw	r2,-40(fp)
81119860:	1885883a 	add	r2,r3,r2
81119864:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81119868:	e0fffe17 	ldw	r3,-8(fp)
8111986c:	e0bff617 	ldw	r2,-40(fp)
81119870:	1885c83a 	sub	r2,r3,r2
81119874:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81119878:	e0fff917 	ldw	r3,-28(fp)
8111987c:	e0bff617 	ldw	r2,-40(fp)
81119880:	1885883a 	add	r2,r3,r2
81119884:	10c1ffcc 	andi	r3,r2,2047
81119888:	e0bffc17 	ldw	r2,-16(fp)
8111988c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81119890:	e0bffe17 	ldw	r2,-8(fp)
81119894:	00bfc716 	blt	zero,r2,811197b4 <__reset+0xfb0f97b4>
81119898:	00000106 	br	811198a0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8111989c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811198a0:	0005303a 	rdctl	r2,status
811198a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811198a8:	e0fffb17 	ldw	r3,-20(fp)
811198ac:	00bfff84 	movi	r2,-2
811198b0:	1884703a 	and	r2,r3,r2
811198b4:	1001703a 	wrctl	status,r2
  
  return context;
811198b8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
811198bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
811198c0:	e0bffc17 	ldw	r2,-16(fp)
811198c4:	10800817 	ldw	r2,32(r2)
811198c8:	10c00094 	ori	r3,r2,2
811198cc:	e0bffc17 	ldw	r2,-16(fp)
811198d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811198d4:	e0bffc17 	ldw	r2,-16(fp)
811198d8:	10800017 	ldw	r2,0(r2)
811198dc:	10800104 	addi	r2,r2,4
811198e0:	1007883a 	mov	r3,r2
811198e4:	e0bffc17 	ldw	r2,-16(fp)
811198e8:	10800817 	ldw	r2,32(r2)
811198ec:	18800035 	stwio	r2,0(r3)
811198f0:	e0bffa17 	ldw	r2,-24(fp)
811198f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811198f8:	e0bff817 	ldw	r2,-32(fp)
811198fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
81119900:	e0bffe17 	ldw	r2,-8(fp)
81119904:	0080100e 	bge	zero,r2,81119948 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
81119908:	e0bfff17 	ldw	r2,-4(fp)
8111990c:	1090000c 	andi	r2,r2,16384
81119910:	1000101e 	bne	r2,zero,81119954 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
81119914:	0001883a 	nop
81119918:	e0bffc17 	ldw	r2,-16(fp)
8111991c:	10c00d17 	ldw	r3,52(r2)
81119920:	e0bff517 	ldw	r2,-44(fp)
81119924:	1880051e 	bne	r3,r2,8111993c <altera_avalon_jtag_uart_write+0x1b8>
81119928:	e0bffc17 	ldw	r2,-16(fp)
8111992c:	10c00917 	ldw	r3,36(r2)
81119930:	e0bffc17 	ldw	r2,-16(fp)
81119934:	10800117 	ldw	r2,4(r2)
81119938:	18bff736 	bltu	r3,r2,81119918 <__reset+0xfb0f9918>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8111993c:	e0bffc17 	ldw	r2,-16(fp)
81119940:	10800917 	ldw	r2,36(r2)
81119944:	1000051e 	bne	r2,zero,8111995c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
81119948:	e0bffe17 	ldw	r2,-8(fp)
8111994c:	00bfd016 	blt	zero,r2,81119890 <__reset+0xfb0f9890>
81119950:	00000306 	br	81119960 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
81119954:	0001883a 	nop
81119958:	00000106 	br	81119960 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8111995c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
81119960:	e0fffd17 	ldw	r3,-12(fp)
81119964:	e0bff717 	ldw	r2,-36(fp)
81119968:	18800426 	beq	r3,r2,8111997c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
8111996c:	e0fffd17 	ldw	r3,-12(fp)
81119970:	e0bff717 	ldw	r2,-36(fp)
81119974:	1885c83a 	sub	r2,r3,r2
81119978:	00000606 	br	81119994 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
8111997c:	e0bfff17 	ldw	r2,-4(fp)
81119980:	1090000c 	andi	r2,r2,16384
81119984:	10000226 	beq	r2,zero,81119990 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
81119988:	00bffd44 	movi	r2,-11
8111998c:	00000106 	br	81119994 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81119990:	00bffec4 	movi	r2,-5
}
81119994:	e037883a 	mov	sp,fp
81119998:	dfc00117 	ldw	ra,4(sp)
8111999c:	df000017 	ldw	fp,0(sp)
811199a0:	dec00204 	addi	sp,sp,8
811199a4:	f800283a 	ret

811199a8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
811199a8:	defffa04 	addi	sp,sp,-24
811199ac:	dfc00515 	stw	ra,20(sp)
811199b0:	df000415 	stw	fp,16(sp)
811199b4:	df000404 	addi	fp,sp,16
811199b8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
811199bc:	0007883a 	mov	r3,zero
811199c0:	e0bfff17 	ldw	r2,-4(fp)
811199c4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
811199c8:	e0bfff17 	ldw	r2,-4(fp)
811199cc:	10800104 	addi	r2,r2,4
811199d0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811199d4:	0005303a 	rdctl	r2,status
811199d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811199dc:	e0fffd17 	ldw	r3,-12(fp)
811199e0:	00bfff84 	movi	r2,-2
811199e4:	1884703a 	and	r2,r3,r2
811199e8:	1001703a 	wrctl	status,r2
  
  return context;
811199ec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
811199f0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
811199f4:	1118b800 	call	81118b80 <alt_tick>
811199f8:	e0bffc17 	ldw	r2,-16(fp)
811199fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81119a00:	e0bffe17 	ldw	r2,-8(fp)
81119a04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
81119a08:	0001883a 	nop
81119a0c:	e037883a 	mov	sp,fp
81119a10:	dfc00117 	ldw	ra,4(sp)
81119a14:	df000017 	ldw	fp,0(sp)
81119a18:	dec00204 	addi	sp,sp,8
81119a1c:	f800283a 	ret

81119a20 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81119a20:	defff804 	addi	sp,sp,-32
81119a24:	dfc00715 	stw	ra,28(sp)
81119a28:	df000615 	stw	fp,24(sp)
81119a2c:	df000604 	addi	fp,sp,24
81119a30:	e13ffc15 	stw	r4,-16(fp)
81119a34:	e17ffd15 	stw	r5,-12(fp)
81119a38:	e1bffe15 	stw	r6,-8(fp)
81119a3c:	e1ffff15 	stw	r7,-4(fp)
81119a40:	e0bfff17 	ldw	r2,-4(fp)
81119a44:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81119a48:	d0a04817 	ldw	r2,-32480(gp)
81119a4c:	1000021e 	bne	r2,zero,81119a58 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
81119a50:	e0bffb17 	ldw	r2,-20(fp)
81119a54:	d0a04815 	stw	r2,-32480(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
81119a58:	e0bffc17 	ldw	r2,-16(fp)
81119a5c:	10800104 	addi	r2,r2,4
81119a60:	00c001c4 	movi	r3,7
81119a64:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
81119a68:	d8000015 	stw	zero,0(sp)
81119a6c:	e1fffc17 	ldw	r7,-16(fp)
81119a70:	01a044b4 	movhi	r6,33042
81119a74:	31a66a04 	addi	r6,r6,-26200
81119a78:	e17ffe17 	ldw	r5,-8(fp)
81119a7c:	e13ffd17 	ldw	r4,-12(fp)
81119a80:	111c54c0 	call	8111c54c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81119a84:	0001883a 	nop
81119a88:	e037883a 	mov	sp,fp
81119a8c:	dfc00117 	ldw	ra,4(sp)
81119a90:	df000017 	ldw	fp,0(sp)
81119a94:	dec00204 	addi	sp,sp,8
81119a98:	f800283a 	ret

81119a9c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81119a9c:	defffa04 	addi	sp,sp,-24
81119aa0:	dfc00515 	stw	ra,20(sp)
81119aa4:	df000415 	stw	fp,16(sp)
81119aa8:	df000404 	addi	fp,sp,16
81119aac:	e13ffd15 	stw	r4,-12(fp)
81119ab0:	e17ffe15 	stw	r5,-8(fp)
81119ab4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81119ab8:	e0bffd17 	ldw	r2,-12(fp)
81119abc:	10800017 	ldw	r2,0(r2)
81119ac0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
81119ac4:	e0bffc17 	ldw	r2,-16(fp)
81119ac8:	10c00a04 	addi	r3,r2,40
81119acc:	e0bffd17 	ldw	r2,-12(fp)
81119ad0:	10800217 	ldw	r2,8(r2)
81119ad4:	100f883a 	mov	r7,r2
81119ad8:	e1bfff17 	ldw	r6,-4(fp)
81119adc:	e17ffe17 	ldw	r5,-8(fp)
81119ae0:	1809883a 	mov	r4,r3
81119ae4:	1119fb00 	call	81119fb0 <altera_avalon_uart_read>
      fd->fd_flags);
}
81119ae8:	e037883a 	mov	sp,fp
81119aec:	dfc00117 	ldw	ra,4(sp)
81119af0:	df000017 	ldw	fp,0(sp)
81119af4:	dec00204 	addi	sp,sp,8
81119af8:	f800283a 	ret

81119afc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81119afc:	defffa04 	addi	sp,sp,-24
81119b00:	dfc00515 	stw	ra,20(sp)
81119b04:	df000415 	stw	fp,16(sp)
81119b08:	df000404 	addi	fp,sp,16
81119b0c:	e13ffd15 	stw	r4,-12(fp)
81119b10:	e17ffe15 	stw	r5,-8(fp)
81119b14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81119b18:	e0bffd17 	ldw	r2,-12(fp)
81119b1c:	10800017 	ldw	r2,0(r2)
81119b20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
81119b24:	e0bffc17 	ldw	r2,-16(fp)
81119b28:	10c00a04 	addi	r3,r2,40
81119b2c:	e0bffd17 	ldw	r2,-12(fp)
81119b30:	10800217 	ldw	r2,8(r2)
81119b34:	100f883a 	mov	r7,r2
81119b38:	e1bfff17 	ldw	r6,-4(fp)
81119b3c:	e17ffe17 	ldw	r5,-8(fp)
81119b40:	1809883a 	mov	r4,r3
81119b44:	111a1c80 	call	8111a1c8 <altera_avalon_uart_write>
      fd->fd_flags);
}
81119b48:	e037883a 	mov	sp,fp
81119b4c:	dfc00117 	ldw	ra,4(sp)
81119b50:	df000017 	ldw	fp,0(sp)
81119b54:	dec00204 	addi	sp,sp,8
81119b58:	f800283a 	ret

81119b5c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
81119b5c:	defffc04 	addi	sp,sp,-16
81119b60:	dfc00315 	stw	ra,12(sp)
81119b64:	df000215 	stw	fp,8(sp)
81119b68:	df000204 	addi	fp,sp,8
81119b6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81119b70:	e0bfff17 	ldw	r2,-4(fp)
81119b74:	10800017 	ldw	r2,0(r2)
81119b78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
81119b7c:	e0bffe17 	ldw	r2,-8(fp)
81119b80:	10c00a04 	addi	r3,r2,40
81119b84:	e0bfff17 	ldw	r2,-4(fp)
81119b88:	10800217 	ldw	r2,8(r2)
81119b8c:	100b883a 	mov	r5,r2
81119b90:	1809883a 	mov	r4,r3
81119b94:	1119f200 	call	81119f20 <altera_avalon_uart_close>
}
81119b98:	e037883a 	mov	sp,fp
81119b9c:	dfc00117 	ldw	ra,4(sp)
81119ba0:	df000017 	ldw	fp,0(sp)
81119ba4:	dec00204 	addi	sp,sp,8
81119ba8:	f800283a 	ret

81119bac <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
81119bac:	defff804 	addi	sp,sp,-32
81119bb0:	dfc00715 	stw	ra,28(sp)
81119bb4:	df000615 	stw	fp,24(sp)
81119bb8:	df000604 	addi	fp,sp,24
81119bbc:	e13ffd15 	stw	r4,-12(fp)
81119bc0:	e17ffe15 	stw	r5,-8(fp)
81119bc4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
81119bc8:	e0bffd17 	ldw	r2,-12(fp)
81119bcc:	10800017 	ldw	r2,0(r2)
81119bd0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
81119bd4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81119bd8:	1000041e 	bne	r2,zero,81119bec <altera_avalon_uart_init+0x40>
81119bdc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81119be0:	1000021e 	bne	r2,zero,81119bec <altera_avalon_uart_init+0x40>
81119be4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81119be8:	10000226 	beq	r2,zero,81119bf4 <altera_avalon_uart_init+0x48>
81119bec:	00800044 	movi	r2,1
81119bf0:	00000106 	br	81119bf8 <altera_avalon_uart_init+0x4c>
81119bf4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81119bf8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
81119bfc:	e0bffc17 	ldw	r2,-16(fp)
81119c00:	10000f1e 	bne	r2,zero,81119c40 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
81119c04:	e0bffd17 	ldw	r2,-12(fp)
81119c08:	00c32004 	movi	r3,3200
81119c0c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
81119c10:	e0bffb17 	ldw	r2,-20(fp)
81119c14:	10800304 	addi	r2,r2,12
81119c18:	e0fffd17 	ldw	r3,-12(fp)
81119c1c:	18c00117 	ldw	r3,4(r3)
81119c20:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
81119c24:	d8000015 	stw	zero,0(sp)
81119c28:	e1fffd17 	ldw	r7,-12(fp)
81119c2c:	01a044b4 	movhi	r6,33042
81119c30:	31a71604 	addi	r6,r6,-25512
81119c34:	e17fff17 	ldw	r5,-4(fp)
81119c38:	e13ffe17 	ldw	r4,-8(fp)
81119c3c:	111c54c0 	call	8111c54c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
81119c40:	0001883a 	nop
81119c44:	e037883a 	mov	sp,fp
81119c48:	dfc00117 	ldw	ra,4(sp)
81119c4c:	df000017 	ldw	fp,0(sp)
81119c50:	dec00204 	addi	sp,sp,8
81119c54:	f800283a 	ret

81119c58 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
81119c58:	defffa04 	addi	sp,sp,-24
81119c5c:	dfc00515 	stw	ra,20(sp)
81119c60:	df000415 	stw	fp,16(sp)
81119c64:	df000404 	addi	fp,sp,16
81119c68:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
81119c6c:	e0bfff17 	ldw	r2,-4(fp)
81119c70:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
81119c74:	e0bffc17 	ldw	r2,-16(fp)
81119c78:	10800017 	ldw	r2,0(r2)
81119c7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
81119c80:	e0bffd17 	ldw	r2,-12(fp)
81119c84:	10800204 	addi	r2,r2,8
81119c88:	10800037 	ldwio	r2,0(r2)
81119c8c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
81119c90:	e0bffd17 	ldw	r2,-12(fp)
81119c94:	10800204 	addi	r2,r2,8
81119c98:	0007883a 	mov	r3,zero
81119c9c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
81119ca0:	e0bffd17 	ldw	r2,-12(fp)
81119ca4:	10800204 	addi	r2,r2,8
81119ca8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
81119cac:	e0bffe17 	ldw	r2,-8(fp)
81119cb0:	1080200c 	andi	r2,r2,128
81119cb4:	10000326 	beq	r2,zero,81119cc4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
81119cb8:	e17ffe17 	ldw	r5,-8(fp)
81119cbc:	e13ffc17 	ldw	r4,-16(fp)
81119cc0:	1119cf40 	call	81119cf4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
81119cc4:	e0bffe17 	ldw	r2,-8(fp)
81119cc8:	1081100c 	andi	r2,r2,1088
81119ccc:	10000326 	beq	r2,zero,81119cdc <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
81119cd0:	e17ffe17 	ldw	r5,-8(fp)
81119cd4:	e13ffc17 	ldw	r4,-16(fp)
81119cd8:	1119dd80 	call	81119dd8 <altera_avalon_uart_txirq>
  }
  

}
81119cdc:	0001883a 	nop
81119ce0:	e037883a 	mov	sp,fp
81119ce4:	dfc00117 	ldw	ra,4(sp)
81119ce8:	df000017 	ldw	fp,0(sp)
81119cec:	dec00204 	addi	sp,sp,8
81119cf0:	f800283a 	ret

81119cf4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81119cf4:	defffc04 	addi	sp,sp,-16
81119cf8:	df000315 	stw	fp,12(sp)
81119cfc:	df000304 	addi	fp,sp,12
81119d00:	e13ffe15 	stw	r4,-8(fp)
81119d04:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
81119d08:	e0bfff17 	ldw	r2,-4(fp)
81119d0c:	108000cc 	andi	r2,r2,3
81119d10:	10002c1e 	bne	r2,zero,81119dc4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
81119d14:	e0bffe17 	ldw	r2,-8(fp)
81119d18:	10800317 	ldw	r2,12(r2)
81119d1c:	e0bffe17 	ldw	r2,-8(fp)
81119d20:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81119d24:	e0bffe17 	ldw	r2,-8(fp)
81119d28:	10800317 	ldw	r2,12(r2)
81119d2c:	10800044 	addi	r2,r2,1
81119d30:	10800fcc 	andi	r2,r2,63
81119d34:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
81119d38:	e0bffe17 	ldw	r2,-8(fp)
81119d3c:	10800317 	ldw	r2,12(r2)
81119d40:	e0fffe17 	ldw	r3,-8(fp)
81119d44:	18c00017 	ldw	r3,0(r3)
81119d48:	18c00037 	ldwio	r3,0(r3)
81119d4c:	1809883a 	mov	r4,r3
81119d50:	e0fffe17 	ldw	r3,-8(fp)
81119d54:	1885883a 	add	r2,r3,r2
81119d58:	10800704 	addi	r2,r2,28
81119d5c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
81119d60:	e0bffe17 	ldw	r2,-8(fp)
81119d64:	e0fffd17 	ldw	r3,-12(fp)
81119d68:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81119d6c:	e0bffe17 	ldw	r2,-8(fp)
81119d70:	10800317 	ldw	r2,12(r2)
81119d74:	10800044 	addi	r2,r2,1
81119d78:	10800fcc 	andi	r2,r2,63
81119d7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
81119d80:	e0bffe17 	ldw	r2,-8(fp)
81119d84:	10c00217 	ldw	r3,8(r2)
81119d88:	e0bffd17 	ldw	r2,-12(fp)
81119d8c:	18800e1e 	bne	r3,r2,81119dc8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81119d90:	e0bffe17 	ldw	r2,-8(fp)
81119d94:	10c00117 	ldw	r3,4(r2)
81119d98:	00bfdfc4 	movi	r2,-129
81119d9c:	1886703a 	and	r3,r3,r2
81119da0:	e0bffe17 	ldw	r2,-8(fp)
81119da4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
81119da8:	e0bffe17 	ldw	r2,-8(fp)
81119dac:	10800017 	ldw	r2,0(r2)
81119db0:	10800304 	addi	r2,r2,12
81119db4:	e0fffe17 	ldw	r3,-8(fp)
81119db8:	18c00117 	ldw	r3,4(r3)
81119dbc:	10c00035 	stwio	r3,0(r2)
81119dc0:	00000106 	br	81119dc8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
81119dc4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
81119dc8:	e037883a 	mov	sp,fp
81119dcc:	df000017 	ldw	fp,0(sp)
81119dd0:	dec00104 	addi	sp,sp,4
81119dd4:	f800283a 	ret

81119dd8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81119dd8:	defffb04 	addi	sp,sp,-20
81119ddc:	df000415 	stw	fp,16(sp)
81119de0:	df000404 	addi	fp,sp,16
81119de4:	e13ffc15 	stw	r4,-16(fp)
81119de8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
81119dec:	e0bffc17 	ldw	r2,-16(fp)
81119df0:	10c00417 	ldw	r3,16(r2)
81119df4:	e0bffc17 	ldw	r2,-16(fp)
81119df8:	10800517 	ldw	r2,20(r2)
81119dfc:	18803226 	beq	r3,r2,81119ec8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81119e00:	e0bffc17 	ldw	r2,-16(fp)
81119e04:	10800617 	ldw	r2,24(r2)
81119e08:	1080008c 	andi	r2,r2,2
81119e0c:	10000326 	beq	r2,zero,81119e1c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81119e10:	e0bffd17 	ldw	r2,-12(fp)
81119e14:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81119e18:	10001d26 	beq	r2,zero,81119e90 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
81119e1c:	e0bffc17 	ldw	r2,-16(fp)
81119e20:	10800417 	ldw	r2,16(r2)
81119e24:	e0bffc17 	ldw	r2,-16(fp)
81119e28:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
81119e2c:	e0bffc17 	ldw	r2,-16(fp)
81119e30:	10800017 	ldw	r2,0(r2)
81119e34:	10800104 	addi	r2,r2,4
81119e38:	e0fffc17 	ldw	r3,-16(fp)
81119e3c:	18c00417 	ldw	r3,16(r3)
81119e40:	e13ffc17 	ldw	r4,-16(fp)
81119e44:	20c7883a 	add	r3,r4,r3
81119e48:	18c01704 	addi	r3,r3,92
81119e4c:	18c00003 	ldbu	r3,0(r3)
81119e50:	18c03fcc 	andi	r3,r3,255
81119e54:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
81119e58:	e0bffc17 	ldw	r2,-16(fp)
81119e5c:	10800417 	ldw	r2,16(r2)
81119e60:	10800044 	addi	r2,r2,1
81119e64:	e0fffc17 	ldw	r3,-16(fp)
81119e68:	18800415 	stw	r2,16(r3)
81119e6c:	10c00fcc 	andi	r3,r2,63
81119e70:	e0bffc17 	ldw	r2,-16(fp)
81119e74:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81119e78:	e0bffc17 	ldw	r2,-16(fp)
81119e7c:	10800117 	ldw	r2,4(r2)
81119e80:	10c01014 	ori	r3,r2,64
81119e84:	e0bffc17 	ldw	r2,-16(fp)
81119e88:	10c00115 	stw	r3,4(r2)
81119e8c:	00000e06 	br	81119ec8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
81119e90:	e0bffc17 	ldw	r2,-16(fp)
81119e94:	10800017 	ldw	r2,0(r2)
81119e98:	10800204 	addi	r2,r2,8
81119e9c:	10800037 	ldwio	r2,0(r2)
81119ea0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81119ea4:	e0bffd17 	ldw	r2,-12(fp)
81119ea8:	1082000c 	andi	r2,r2,2048
81119eac:	1000061e 	bne	r2,zero,81119ec8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81119eb0:	e0bffc17 	ldw	r2,-16(fp)
81119eb4:	10c00117 	ldw	r3,4(r2)
81119eb8:	00bfefc4 	movi	r2,-65
81119ebc:	1886703a 	and	r3,r3,r2
81119ec0:	e0bffc17 	ldw	r2,-16(fp)
81119ec4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
81119ec8:	e0bffc17 	ldw	r2,-16(fp)
81119ecc:	10c00417 	ldw	r3,16(r2)
81119ed0:	e0bffc17 	ldw	r2,-16(fp)
81119ed4:	10800517 	ldw	r2,20(r2)
81119ed8:	1880061e 	bne	r3,r2,81119ef4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81119edc:	e0bffc17 	ldw	r2,-16(fp)
81119ee0:	10c00117 	ldw	r3,4(r2)
81119ee4:	00beefc4 	movi	r2,-1089
81119ee8:	1886703a 	and	r3,r3,r2
81119eec:	e0bffc17 	ldw	r2,-16(fp)
81119ef0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81119ef4:	e0bffc17 	ldw	r2,-16(fp)
81119ef8:	10800017 	ldw	r2,0(r2)
81119efc:	10800304 	addi	r2,r2,12
81119f00:	e0fffc17 	ldw	r3,-16(fp)
81119f04:	18c00117 	ldw	r3,4(r3)
81119f08:	10c00035 	stwio	r3,0(r2)
}
81119f0c:	0001883a 	nop
81119f10:	e037883a 	mov	sp,fp
81119f14:	df000017 	ldw	fp,0(sp)
81119f18:	dec00104 	addi	sp,sp,4
81119f1c:	f800283a 	ret

81119f20 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
81119f20:	defffd04 	addi	sp,sp,-12
81119f24:	df000215 	stw	fp,8(sp)
81119f28:	df000204 	addi	fp,sp,8
81119f2c:	e13ffe15 	stw	r4,-8(fp)
81119f30:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81119f34:	00000506 	br	81119f4c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
81119f38:	e0bfff17 	ldw	r2,-4(fp)
81119f3c:	1090000c 	andi	r2,r2,16384
81119f40:	10000226 	beq	r2,zero,81119f4c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
81119f44:	00bffd44 	movi	r2,-11
81119f48:	00000606 	br	81119f64 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81119f4c:	e0bffe17 	ldw	r2,-8(fp)
81119f50:	10c00417 	ldw	r3,16(r2)
81119f54:	e0bffe17 	ldw	r2,-8(fp)
81119f58:	10800517 	ldw	r2,20(r2)
81119f5c:	18bff61e 	bne	r3,r2,81119f38 <__reset+0xfb0f9f38>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81119f60:	0005883a 	mov	r2,zero
}
81119f64:	e037883a 	mov	sp,fp
81119f68:	df000017 	ldw	fp,0(sp)
81119f6c:	dec00104 	addi	sp,sp,4
81119f70:	f800283a 	ret

81119f74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81119f74:	defffe04 	addi	sp,sp,-8
81119f78:	dfc00115 	stw	ra,4(sp)
81119f7c:	df000015 	stw	fp,0(sp)
81119f80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81119f84:	d0a01317 	ldw	r2,-32692(gp)
81119f88:	10000326 	beq	r2,zero,81119f98 <alt_get_errno+0x24>
81119f8c:	d0a01317 	ldw	r2,-32692(gp)
81119f90:	103ee83a 	callr	r2
81119f94:	00000106 	br	81119f9c <alt_get_errno+0x28>
81119f98:	d0a04304 	addi	r2,gp,-32500
}
81119f9c:	e037883a 	mov	sp,fp
81119fa0:	dfc00117 	ldw	ra,4(sp)
81119fa4:	df000017 	ldw	fp,0(sp)
81119fa8:	dec00204 	addi	sp,sp,8
81119fac:	f800283a 	ret

81119fb0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
81119fb0:	defff204 	addi	sp,sp,-56
81119fb4:	dfc00d15 	stw	ra,52(sp)
81119fb8:	df000c15 	stw	fp,48(sp)
81119fbc:	df000c04 	addi	fp,sp,48
81119fc0:	e13ffc15 	stw	r4,-16(fp)
81119fc4:	e17ffd15 	stw	r5,-12(fp)
81119fc8:	e1bffe15 	stw	r6,-8(fp)
81119fcc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
81119fd0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
81119fd4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
81119fd8:	e0bfff17 	ldw	r2,-4(fp)
81119fdc:	1090000c 	andi	r2,r2,16384
81119fe0:	1005003a 	cmpeq	r2,r2,zero
81119fe4:	10803fcc 	andi	r2,r2,255
81119fe8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81119fec:	00001306 	br	8111a03c <altera_avalon_uart_read+0x8c>
    {
      count++;
81119ff0:	e0bff517 	ldw	r2,-44(fp)
81119ff4:	10800044 	addi	r2,r2,1
81119ff8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
81119ffc:	e0bffd17 	ldw	r2,-12(fp)
8111a000:	10c00044 	addi	r3,r2,1
8111a004:	e0fffd15 	stw	r3,-12(fp)
8111a008:	e0fffc17 	ldw	r3,-16(fp)
8111a00c:	18c00217 	ldw	r3,8(r3)
8111a010:	e13ffc17 	ldw	r4,-16(fp)
8111a014:	20c7883a 	add	r3,r4,r3
8111a018:	18c00704 	addi	r3,r3,28
8111a01c:	18c00003 	ldbu	r3,0(r3)
8111a020:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8111a024:	e0bffc17 	ldw	r2,-16(fp)
8111a028:	10800217 	ldw	r2,8(r2)
8111a02c:	10800044 	addi	r2,r2,1
8111a030:	10c00fcc 	andi	r3,r2,63
8111a034:	e0bffc17 	ldw	r2,-16(fp)
8111a038:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8111a03c:	e0fff517 	ldw	r3,-44(fp)
8111a040:	e0bffe17 	ldw	r2,-8(fp)
8111a044:	1880050e 	bge	r3,r2,8111a05c <altera_avalon_uart_read+0xac>
8111a048:	e0bffc17 	ldw	r2,-16(fp)
8111a04c:	10c00217 	ldw	r3,8(r2)
8111a050:	e0bffc17 	ldw	r2,-16(fp)
8111a054:	10800317 	ldw	r2,12(r2)
8111a058:	18bfe51e 	bne	r3,r2,81119ff0 <__reset+0xfb0f9ff0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
8111a05c:	e0bff517 	ldw	r2,-44(fp)
8111a060:	1000251e 	bne	r2,zero,8111a0f8 <altera_avalon_uart_read+0x148>
8111a064:	e0bffc17 	ldw	r2,-16(fp)
8111a068:	10c00217 	ldw	r3,8(r2)
8111a06c:	e0bffc17 	ldw	r2,-16(fp)
8111a070:	10800317 	ldw	r2,12(r2)
8111a074:	1880201e 	bne	r3,r2,8111a0f8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
8111a078:	e0bff617 	ldw	r2,-40(fp)
8111a07c:	1000071e 	bne	r2,zero,8111a09c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
8111a080:	1119f740 	call	81119f74 <alt_get_errno>
8111a084:	1007883a 	mov	r3,r2
8111a088:	008002c4 	movi	r2,11
8111a08c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
8111a090:	00800044 	movi	r2,1
8111a094:	e0bff405 	stb	r2,-48(fp)
        break;
8111a098:	00001b06 	br	8111a108 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a09c:	0005303a 	rdctl	r2,status
8111a0a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a0a4:	e0fff917 	ldw	r3,-28(fp)
8111a0a8:	00bfff84 	movi	r2,-2
8111a0ac:	1884703a 	and	r2,r3,r2
8111a0b0:	1001703a 	wrctl	status,r2
  
  return context;
8111a0b4:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
8111a0b8:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8111a0bc:	e0bffc17 	ldw	r2,-16(fp)
8111a0c0:	10800117 	ldw	r2,4(r2)
8111a0c4:	10c02014 	ori	r3,r2,128
8111a0c8:	e0bffc17 	ldw	r2,-16(fp)
8111a0cc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111a0d0:	e0bffc17 	ldw	r2,-16(fp)
8111a0d4:	10800017 	ldw	r2,0(r2)
8111a0d8:	10800304 	addi	r2,r2,12
8111a0dc:	e0fffc17 	ldw	r3,-16(fp)
8111a0e0:	18c00117 	ldw	r3,4(r3)
8111a0e4:	10c00035 	stwio	r3,0(r2)
8111a0e8:	e0bff817 	ldw	r2,-32(fp)
8111a0ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a0f0:	e0bffa17 	ldw	r2,-24(fp)
8111a0f4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
8111a0f8:	e0bff517 	ldw	r2,-44(fp)
8111a0fc:	1000021e 	bne	r2,zero,8111a108 <altera_avalon_uart_read+0x158>
8111a100:	e0bffe17 	ldw	r2,-8(fp)
8111a104:	103fcd1e 	bne	r2,zero,8111a03c <__reset+0xfb0fa03c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a108:	0005303a 	rdctl	r2,status
8111a10c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a110:	e0fffb17 	ldw	r3,-20(fp)
8111a114:	00bfff84 	movi	r2,-2
8111a118:	1884703a 	and	r2,r3,r2
8111a11c:	1001703a 	wrctl	status,r2
  
  return context;
8111a120:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
8111a124:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8111a128:	e0bffc17 	ldw	r2,-16(fp)
8111a12c:	10800117 	ldw	r2,4(r2)
8111a130:	10c02014 	ori	r3,r2,128
8111a134:	e0bffc17 	ldw	r2,-16(fp)
8111a138:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111a13c:	e0bffc17 	ldw	r2,-16(fp)
8111a140:	10800017 	ldw	r2,0(r2)
8111a144:	10800304 	addi	r2,r2,12
8111a148:	e0fffc17 	ldw	r3,-16(fp)
8111a14c:	18c00117 	ldw	r3,4(r3)
8111a150:	10c00035 	stwio	r3,0(r2)
8111a154:	e0bff817 	ldw	r2,-32(fp)
8111a158:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a15c:	e0bff717 	ldw	r2,-36(fp)
8111a160:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
8111a164:	e0bff403 	ldbu	r2,-48(fp)
8111a168:	10000226 	beq	r2,zero,8111a174 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
8111a16c:	00bffd44 	movi	r2,-11
8111a170:	00000106 	br	8111a178 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
8111a174:	e0bff517 	ldw	r2,-44(fp)
  }
}
8111a178:	e037883a 	mov	sp,fp
8111a17c:	dfc00117 	ldw	ra,4(sp)
8111a180:	df000017 	ldw	fp,0(sp)
8111a184:	dec00204 	addi	sp,sp,8
8111a188:	f800283a 	ret

8111a18c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111a18c:	defffe04 	addi	sp,sp,-8
8111a190:	dfc00115 	stw	ra,4(sp)
8111a194:	df000015 	stw	fp,0(sp)
8111a198:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111a19c:	d0a01317 	ldw	r2,-32692(gp)
8111a1a0:	10000326 	beq	r2,zero,8111a1b0 <alt_get_errno+0x24>
8111a1a4:	d0a01317 	ldw	r2,-32692(gp)
8111a1a8:	103ee83a 	callr	r2
8111a1ac:	00000106 	br	8111a1b4 <alt_get_errno+0x28>
8111a1b0:	d0a04304 	addi	r2,gp,-32500
}
8111a1b4:	e037883a 	mov	sp,fp
8111a1b8:	dfc00117 	ldw	ra,4(sp)
8111a1bc:	df000017 	ldw	fp,0(sp)
8111a1c0:	dec00204 	addi	sp,sp,8
8111a1c4:	f800283a 	ret

8111a1c8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8111a1c8:	defff204 	addi	sp,sp,-56
8111a1cc:	dfc00d15 	stw	ra,52(sp)
8111a1d0:	df000c15 	stw	fp,48(sp)
8111a1d4:	df000c04 	addi	fp,sp,48
8111a1d8:	e13ffc15 	stw	r4,-16(fp)
8111a1dc:	e17ffd15 	stw	r5,-12(fp)
8111a1e0:	e1bffe15 	stw	r6,-8(fp)
8111a1e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
8111a1e8:	e0bffe17 	ldw	r2,-8(fp)
8111a1ec:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8111a1f0:	e0bfff17 	ldw	r2,-4(fp)
8111a1f4:	1090000c 	andi	r2,r2,16384
8111a1f8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8111a1fc:	00003c06 	br	8111a2f0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8111a200:	e0bffc17 	ldw	r2,-16(fp)
8111a204:	10800517 	ldw	r2,20(r2)
8111a208:	10800044 	addi	r2,r2,1
8111a20c:	10800fcc 	andi	r2,r2,63
8111a210:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
8111a214:	e0bffc17 	ldw	r2,-16(fp)
8111a218:	10c00417 	ldw	r3,16(r2)
8111a21c:	e0bff717 	ldw	r2,-36(fp)
8111a220:	1880221e 	bne	r3,r2,8111a2ac <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
8111a224:	e0bff517 	ldw	r2,-44(fp)
8111a228:	10000526 	beq	r2,zero,8111a240 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
8111a22c:	111a18c0 	call	8111a18c <alt_get_errno>
8111a230:	1007883a 	mov	r3,r2
8111a234:	008002c4 	movi	r2,11
8111a238:	18800015 	stw	r2,0(r3)
        break;
8111a23c:	00002e06 	br	8111a2f8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a240:	0005303a 	rdctl	r2,status
8111a244:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a248:	e0fff917 	ldw	r3,-28(fp)
8111a24c:	00bfff84 	movi	r2,-2
8111a250:	1884703a 	and	r2,r3,r2
8111a254:	1001703a 	wrctl	status,r2
  
  return context;
8111a258:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8111a25c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8111a260:	e0bffc17 	ldw	r2,-16(fp)
8111a264:	10800117 	ldw	r2,4(r2)
8111a268:	10c11014 	ori	r3,r2,1088
8111a26c:	e0bffc17 	ldw	r2,-16(fp)
8111a270:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111a274:	e0bffc17 	ldw	r2,-16(fp)
8111a278:	10800017 	ldw	r2,0(r2)
8111a27c:	10800304 	addi	r2,r2,12
8111a280:	e0fffc17 	ldw	r3,-16(fp)
8111a284:	18c00117 	ldw	r3,4(r3)
8111a288:	10c00035 	stwio	r3,0(r2)
8111a28c:	e0bff817 	ldw	r2,-32(fp)
8111a290:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a294:	e0bff617 	ldw	r2,-40(fp)
8111a298:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8111a29c:	e0bffc17 	ldw	r2,-16(fp)
8111a2a0:	10c00417 	ldw	r3,16(r2)
8111a2a4:	e0bff717 	ldw	r2,-36(fp)
8111a2a8:	18bffc26 	beq	r3,r2,8111a29c <__reset+0xfb0fa29c>
      }
    }

    count--;
8111a2ac:	e0bff417 	ldw	r2,-48(fp)
8111a2b0:	10bfffc4 	addi	r2,r2,-1
8111a2b4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
8111a2b8:	e0bffc17 	ldw	r2,-16(fp)
8111a2bc:	10c00517 	ldw	r3,20(r2)
8111a2c0:	e0bffd17 	ldw	r2,-12(fp)
8111a2c4:	11000044 	addi	r4,r2,1
8111a2c8:	e13ffd15 	stw	r4,-12(fp)
8111a2cc:	10800003 	ldbu	r2,0(r2)
8111a2d0:	1009883a 	mov	r4,r2
8111a2d4:	e0bffc17 	ldw	r2,-16(fp)
8111a2d8:	10c5883a 	add	r2,r2,r3
8111a2dc:	10801704 	addi	r2,r2,92
8111a2e0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
8111a2e4:	e0bffc17 	ldw	r2,-16(fp)
8111a2e8:	e0fff717 	ldw	r3,-36(fp)
8111a2ec:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8111a2f0:	e0bff417 	ldw	r2,-48(fp)
8111a2f4:	103fc21e 	bne	r2,zero,8111a200 <__reset+0xfb0fa200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a2f8:	0005303a 	rdctl	r2,status
8111a2fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a300:	e0fffb17 	ldw	r3,-20(fp)
8111a304:	00bfff84 	movi	r2,-2
8111a308:	1884703a 	and	r2,r3,r2
8111a30c:	1001703a 	wrctl	status,r2
  
  return context;
8111a310:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8111a314:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8111a318:	e0bffc17 	ldw	r2,-16(fp)
8111a31c:	10800117 	ldw	r2,4(r2)
8111a320:	10c11014 	ori	r3,r2,1088
8111a324:	e0bffc17 	ldw	r2,-16(fp)
8111a328:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111a32c:	e0bffc17 	ldw	r2,-16(fp)
8111a330:	10800017 	ldw	r2,0(r2)
8111a334:	10800304 	addi	r2,r2,12
8111a338:	e0fffc17 	ldw	r3,-16(fp)
8111a33c:	18c00117 	ldw	r3,4(r3)
8111a340:	10c00035 	stwio	r3,0(r2)
8111a344:	e0bff817 	ldw	r2,-32(fp)
8111a348:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a34c:	e0bffa17 	ldw	r2,-24(fp)
8111a350:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8111a354:	e0fffe17 	ldw	r3,-8(fp)
8111a358:	e0bff417 	ldw	r2,-48(fp)
8111a35c:	1885c83a 	sub	r2,r3,r2
}
8111a360:	e037883a 	mov	sp,fp
8111a364:	dfc00117 	ldw	ra,4(sp)
8111a368:	df000017 	ldw	fp,0(sp)
8111a36c:	dec00204 	addi	sp,sp,8
8111a370:	f800283a 	ret

8111a374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111a374:	defffe04 	addi	sp,sp,-8
8111a378:	dfc00115 	stw	ra,4(sp)
8111a37c:	df000015 	stw	fp,0(sp)
8111a380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111a384:	d0a01317 	ldw	r2,-32692(gp)
8111a388:	10000326 	beq	r2,zero,8111a398 <alt_get_errno+0x24>
8111a38c:	d0a01317 	ldw	r2,-32692(gp)
8111a390:	103ee83a 	callr	r2
8111a394:	00000106 	br	8111a39c <alt_get_errno+0x28>
8111a398:	d0a04304 	addi	r2,gp,-32500
}
8111a39c:	e037883a 	mov	sp,fp
8111a3a0:	dfc00117 	ldw	ra,4(sp)
8111a3a4:	df000017 	ldw	fp,0(sp)
8111a3a8:	dec00204 	addi	sp,sp,8
8111a3ac:	f800283a 	ret

8111a3b0 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
8111a3b0:	defffc04 	addi	sp,sp,-16
8111a3b4:	df000315 	stw	fp,12(sp)
8111a3b8:	df000304 	addi	fp,sp,12
8111a3bc:	e13ffd15 	stw	r4,-12(fp)
8111a3c0:	e17ffe15 	stw	r5,-8(fp)
8111a3c4:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8111a3c8:	e0bffd17 	ldw	r2,-12(fp)
8111a3cc:	10800037 	ldwio	r2,0(r2)
8111a3d0:	1080010c 	andi	r2,r2,4
8111a3d4:	10000226 	beq	r2,zero,8111a3e0 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
8111a3d8:	00bff904 	movi	r2,-28
8111a3dc:	00001506 	br	8111a434 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8111a3e0:	e0bfff17 	ldw	r2,-4(fp)
8111a3e4:	10800017 	ldw	r2,0(r2)
8111a3e8:	1007883a 	mov	r3,r2
8111a3ec:	e0bffe17 	ldw	r2,-8(fp)
8111a3f0:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8111a3f4:	e0bffe17 	ldw	r2,-8(fp)
8111a3f8:	10800104 	addi	r2,r2,4
8111a3fc:	e0ffff17 	ldw	r3,-4(fp)
8111a400:	18c00117 	ldw	r3,4(r3)
8111a404:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8111a408:	e0bffe17 	ldw	r2,-8(fp)
8111a40c:	10800204 	addi	r2,r2,8
8111a410:	e0ffff17 	ldw	r3,-4(fp)
8111a414:	18c00217 	ldw	r3,8(r3)
8111a418:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8111a41c:	e0bffe17 	ldw	r2,-8(fp)
8111a420:	10800304 	addi	r2,r2,12
8111a424:	e0ffff17 	ldw	r3,-4(fp)
8111a428:	18c00317 	ldw	r3,12(r3)
8111a42c:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
8111a430:	0005883a 	mov	r2,zero
}
8111a434:	e037883a 	mov	sp,fp
8111a438:	df000017 	ldw	fp,0(sp)
8111a43c:	dec00104 	addi	sp,sp,4
8111a440:	f800283a 	ret

8111a444 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
8111a444:	defffc04 	addi	sp,sp,-16
8111a448:	df000315 	stw	fp,12(sp)
8111a44c:	df000304 	addi	fp,sp,12
8111a450:	e13ffd15 	stw	r4,-12(fp)
8111a454:	e17ffe15 	stw	r5,-8(fp)
8111a458:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8111a45c:	e0bffd17 	ldw	r2,-12(fp)
8111a460:	10800037 	ldwio	r2,0(r2)
8111a464:	1080010c 	andi	r2,r2,4
8111a468:	10000226 	beq	r2,zero,8111a474 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
8111a46c:	00bff904 	movi	r2,-28
8111a470:	00003b06 	br	8111a560 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8111a474:	e0bfff17 	ldw	r2,-4(fp)
8111a478:	10800017 	ldw	r2,0(r2)
8111a47c:	1007883a 	mov	r3,r2
8111a480:	e0bffe17 	ldw	r2,-8(fp)
8111a484:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8111a488:	e0bffe17 	ldw	r2,-8(fp)
8111a48c:	10800104 	addi	r2,r2,4
8111a490:	e0ffff17 	ldw	r3,-4(fp)
8111a494:	18c00117 	ldw	r3,4(r3)
8111a498:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8111a49c:	e0bffe17 	ldw	r2,-8(fp)
8111a4a0:	10800204 	addi	r2,r2,8
8111a4a4:	e0ffff17 	ldw	r3,-4(fp)
8111a4a8:	18c00217 	ldw	r3,8(r3)
8111a4ac:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8111a4b0:	e0bffe17 	ldw	r2,-8(fp)
8111a4b4:	10800304 	addi	r2,r2,12
8111a4b8:	e0ffff17 	ldw	r3,-4(fp)
8111a4bc:	18c0030b 	ldhu	r3,12(r3)
8111a4c0:	18ffffcc 	andi	r3,r3,65535
8111a4c4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8111a4c8:	e0bffe17 	ldw	r2,-8(fp)
8111a4cc:	10800384 	addi	r2,r2,14
8111a4d0:	e0ffff17 	ldw	r3,-4(fp)
8111a4d4:	18c00383 	ldbu	r3,14(r3)
8111a4d8:	18c03fcc 	andi	r3,r3,255
8111a4dc:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8111a4e0:	e0bffe17 	ldw	r2,-8(fp)
8111a4e4:	108003c4 	addi	r2,r2,15
8111a4e8:	e0ffff17 	ldw	r3,-4(fp)
8111a4ec:	18c003c3 	ldbu	r3,15(r3)
8111a4f0:	18c03fcc 	andi	r3,r3,255
8111a4f4:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8111a4f8:	e0bffe17 	ldw	r2,-8(fp)
8111a4fc:	10800404 	addi	r2,r2,16
8111a500:	e0ffff17 	ldw	r3,-4(fp)
8111a504:	18c0040b 	ldhu	r3,16(r3)
8111a508:	18ffffcc 	andi	r3,r3,65535
8111a50c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8111a510:	e0bffe17 	ldw	r2,-8(fp)
8111a514:	10800484 	addi	r2,r2,18
8111a518:	e0ffff17 	ldw	r3,-4(fp)
8111a51c:	18c0048b 	ldhu	r3,18(r3)
8111a520:	18ffffcc 	andi	r3,r3,65535
8111a524:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8111a528:	e0bffe17 	ldw	r2,-8(fp)
8111a52c:	10800504 	addi	r2,r2,20
8111a530:	0007883a 	mov	r3,zero
8111a534:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8111a538:	e0bffe17 	ldw	r2,-8(fp)
8111a53c:	10800604 	addi	r2,r2,24
8111a540:	0007883a 	mov	r3,zero
8111a544:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8111a548:	e0bffe17 	ldw	r2,-8(fp)
8111a54c:	10800704 	addi	r2,r2,28
8111a550:	e0ffff17 	ldw	r3,-4(fp)
8111a554:	18c00717 	ldw	r3,28(r3)
8111a558:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
8111a55c:	0005883a 	mov	r2,zero
}
8111a560:	e037883a 	mov	sp,fp
8111a564:	df000017 	ldw	fp,0(sp)
8111a568:	dec00104 	addi	sp,sp,4
8111a56c:	f800283a 	ret

8111a570 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8111a570:	defff804 	addi	sp,sp,-32
8111a574:	dfc00715 	stw	ra,28(sp)
8111a578:	df000615 	stw	fp,24(sp)
8111a57c:	df000604 	addi	fp,sp,24
8111a580:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8111a584:	e0bfff17 	ldw	r2,-4(fp)
8111a588:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8111a58c:	e0bffa17 	ldw	r2,-24(fp)
8111a590:	10801783 	ldbu	r2,94(r2)
8111a594:	10803fcc 	andi	r2,r2,255
8111a598:	10001126 	beq	r2,zero,8111a5e0 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8111a59c:	e0bffa17 	ldw	r2,-24(fp)
8111a5a0:	10800617 	ldw	r2,24(r2)
8111a5a4:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8111a5a8:	1007883a 	mov	r3,r2
8111a5ac:	00bffdc4 	movi	r2,-9
8111a5b0:	1884703a 	and	r2,r3,r2
8111a5b4:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8111a5b8:	e0bffa17 	ldw	r2,-24(fp)
8111a5bc:	10800617 	ldw	r2,24(r2)
8111a5c0:	e0fffb17 	ldw	r3,-20(fp)
8111a5c4:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8111a5c8:	e0bffa17 	ldw	r2,-24(fp)
8111a5cc:	10800617 	ldw	r2,24(r2)
8111a5d0:	10800404 	addi	r2,r2,16
8111a5d4:	00c00044 	movi	r3,1
8111a5d8:	10c00035 	stwio	r3,0(r2)
8111a5dc:	00001106 	br	8111a624 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8111a5e0:	e0bffa17 	ldw	r2,-24(fp)
8111a5e4:	10800317 	ldw	r2,12(r2)
8111a5e8:	10800104 	addi	r2,r2,4
8111a5ec:	10800037 	ldwio	r2,0(r2)
8111a5f0:	1007883a 	mov	r3,r2
8111a5f4:	00bffbc4 	movi	r2,-17
8111a5f8:	1884703a 	and	r2,r3,r2
8111a5fc:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8111a600:	e0bffa17 	ldw	r2,-24(fp)
8111a604:	10800317 	ldw	r2,12(r2)
8111a608:	10800104 	addi	r2,r2,4
8111a60c:	e0fffb17 	ldw	r3,-20(fp)
8111a610:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8111a614:	e0bffa17 	ldw	r2,-24(fp)
8111a618:	10800317 	ldw	r2,12(r2)
8111a61c:	00c08004 	movi	r3,512
8111a620:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8111a624:	e0bffa17 	ldw	r2,-24(fp)
8111a628:	10800b17 	ldw	r2,44(r2)
8111a62c:	10001226 	beq	r2,zero,8111a678 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a630:	0005303a 	rdctl	r2,status
8111a634:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a638:	e0fffd17 	ldw	r3,-12(fp)
8111a63c:	00bfff84 	movi	r2,-2
8111a640:	1884703a 	and	r2,r3,r2
8111a644:	1001703a 	wrctl	status,r2
  
  return context;
8111a648:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8111a64c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
8111a650:	e0bffa17 	ldw	r2,-24(fp)
8111a654:	10800b17 	ldw	r2,44(r2)
8111a658:	e0fffa17 	ldw	r3,-24(fp)
8111a65c:	18c00c17 	ldw	r3,48(r3)
8111a660:	1809883a 	mov	r4,r3
8111a664:	103ee83a 	callr	r2
8111a668:	e0bffc17 	ldw	r2,-16(fp)
8111a66c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a670:	e0bffe17 	ldw	r2,-8(fp)
8111a674:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8111a678:	e0bffa17 	ldw	r2,-24(fp)
8111a67c:	10801783 	ldbu	r2,94(r2)
8111a680:	10803fcc 	andi	r2,r2,255
8111a684:	10000a26 	beq	r2,zero,8111a6b0 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8111a688:	e0bffa17 	ldw	r2,-24(fp)
8111a68c:	10800617 	ldw	r2,24(r2)
8111a690:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8111a694:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
8111a698:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8111a69c:	e0bffa17 	ldw	r2,-24(fp)
8111a6a0:	10800617 	ldw	r2,24(r2)
8111a6a4:	e0fffb17 	ldw	r3,-20(fp)
8111a6a8:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8111a6ac:	00000c06 	br	8111a6e0 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8111a6b0:	e0bffa17 	ldw	r2,-24(fp)
8111a6b4:	10800317 	ldw	r2,12(r2)
8111a6b8:	10800104 	addi	r2,r2,4
8111a6bc:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8111a6c0:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8111a6c4:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8111a6c8:	e0bffa17 	ldw	r2,-24(fp)
8111a6cc:	10800317 	ldw	r2,12(r2)
8111a6d0:	10800104 	addi	r2,r2,4
8111a6d4:	e0fffb17 	ldw	r3,-20(fp)
8111a6d8:	10c00035 	stwio	r3,0(r2)
    }

    return;
8111a6dc:	0001883a 	nop
}
8111a6e0:	e037883a 	mov	sp,fp
8111a6e4:	dfc00117 	ldw	ra,4(sp)
8111a6e8:	df000017 	ldw	fp,0(sp)
8111a6ec:	dec00204 	addi	sp,sp,8
8111a6f0:	f800283a 	ret

8111a6f4 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111a6f4:	defffb04 	addi	sp,sp,-20
8111a6f8:	df000415 	stw	fp,16(sp)
8111a6fc:	df000404 	addi	fp,sp,16
8111a700:	e13ffc15 	stw	r4,-16(fp)
8111a704:	e17ffd15 	stw	r5,-12(fp)
8111a708:	e1bffe15 	stw	r6,-8(fp)
8111a70c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8111a710:	e0bffc17 	ldw	r2,-16(fp)
8111a714:	10c01217 	ldw	r3,72(r2)
8111a718:	e0800117 	ldw	r2,4(fp)
8111a71c:	18800436 	bltu	r3,r2,8111a730 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8111a720:	e0bffc17 	ldw	r2,-16(fp)
8111a724:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8111a728:	10803fcc 	andi	r2,r2,255
8111a72c:	10000226 	beq	r2,zero,8111a738 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8111a730:	00bffa84 	movi	r2,-22
8111a734:	00000e06 	br	8111a770 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
8111a738:	e0bffd17 	ldw	r2,-12(fp)
8111a73c:	e0fffe17 	ldw	r3,-8(fp)
8111a740:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8111a744:	e0bffd17 	ldw	r2,-12(fp)
8111a748:	e0ffff17 	ldw	r3,-4(fp)
8111a74c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111a750:	e0bffd17 	ldw	r2,-12(fp)
8111a754:	e0c00117 	ldw	r3,4(fp)
8111a758:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111a75c:	e0800217 	ldw	r2,8(fp)
8111a760:	10e00034 	orhi	r3,r2,32768
8111a764:	e0bffd17 	ldw	r2,-12(fp)
8111a768:	10c00315 	stw	r3,12(r2)
    
    return 0;
8111a76c:	0005883a 	mov	r2,zero
}
8111a770:	e037883a 	mov	sp,fp
8111a774:	df000017 	ldw	fp,0(sp)
8111a778:	dec00104 	addi	sp,sp,4
8111a77c:	f800283a 	ret

8111a780 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8111a780:	defff604 	addi	sp,sp,-40
8111a784:	df000915 	stw	fp,36(sp)
8111a788:	df000904 	addi	fp,sp,36
8111a78c:	e13ff715 	stw	r4,-36(fp)
8111a790:	e17ff815 	stw	r5,-32(fp)
8111a794:	e1bff915 	stw	r6,-28(fp)
8111a798:	e1fffa15 	stw	r7,-24(fp)
8111a79c:	e1800317 	ldw	r6,12(fp)
8111a7a0:	e1400417 	ldw	r5,16(fp)
8111a7a4:	e1000517 	ldw	r4,20(fp)
8111a7a8:	e0c00617 	ldw	r3,24(fp)
8111a7ac:	e0800717 	ldw	r2,28(fp)
8111a7b0:	e1bffb0d 	sth	r6,-20(fp)
8111a7b4:	e17ffc05 	stb	r5,-16(fp)
8111a7b8:	e13ffd05 	stb	r4,-12(fp)
8111a7bc:	e0fffe0d 	sth	r3,-8(fp)
8111a7c0:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8111a7c4:	e0bff717 	ldw	r2,-36(fp)
8111a7c8:	10c01217 	ldw	r3,72(r2)
8111a7cc:	e0800117 	ldw	r2,4(fp)
8111a7d0:	18801936 	bltu	r3,r2,8111a838 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8111a7d4:	e13ff717 	ldw	r4,-36(fp)
8111a7d8:	20801317 	ldw	r2,76(r4)
8111a7dc:	20c01417 	ldw	r3,80(r4)
8111a7e0:	e13ffe0b 	ldhu	r4,-8(fp)
8111a7e4:	213fffcc 	andi	r4,r4,65535
8111a7e8:	2015883a 	mov	r10,r4
8111a7ec:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8111a7f0:	1ac01136 	bltu	r3,r11,8111a838 <alt_msgdma_construct_extended_descriptor+0xb8>
8111a7f4:	58c0011e 	bne	r11,r3,8111a7fc <alt_msgdma_construct_extended_descriptor+0x7c>
8111a7f8:	12800f36 	bltu	r2,r10,8111a838 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111a7fc:	e13ff717 	ldw	r4,-36(fp)
8111a800:	20801317 	ldw	r2,76(r4)
8111a804:	20c01417 	ldw	r3,80(r4)
8111a808:	e13fff0b 	ldhu	r4,-4(fp)
8111a80c:	213fffcc 	andi	r4,r4,65535
8111a810:	2011883a 	mov	r8,r4
8111a814:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8111a818:	1a400736 	bltu	r3,r9,8111a838 <alt_msgdma_construct_extended_descriptor+0xb8>
8111a81c:	48c0011e 	bne	r9,r3,8111a824 <alt_msgdma_construct_extended_descriptor+0xa4>
8111a820:	12000536 	bltu	r2,r8,8111a838 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8111a824:	e0bff717 	ldw	r2,-36(fp)
8111a828:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111a82c:	10803fcc 	andi	r2,r2,255
8111a830:	10800060 	cmpeqi	r2,r2,1
8111a834:	1000021e 	bne	r2,zero,8111a840 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8111a838:	00bffa84 	movi	r2,-22
8111a83c:	00002106 	br	8111a8c4 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
8111a840:	e0bff817 	ldw	r2,-32(fp)
8111a844:	e0fff917 	ldw	r3,-28(fp)
8111a848:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8111a84c:	e0bff817 	ldw	r2,-32(fp)
8111a850:	e0fffa17 	ldw	r3,-24(fp)
8111a854:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111a858:	e0bff817 	ldw	r2,-32(fp)
8111a85c:	e0c00117 	ldw	r3,4(fp)
8111a860:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8111a864:	e0bff817 	ldw	r2,-32(fp)
8111a868:	e0fffb0b 	ldhu	r3,-20(fp)
8111a86c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8111a870:	e0bff817 	ldw	r2,-32(fp)
8111a874:	e0fffc03 	ldbu	r3,-16(fp)
8111a878:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8111a87c:	e0bff817 	ldw	r2,-32(fp)
8111a880:	e0fffd03 	ldbu	r3,-12(fp)
8111a884:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8111a888:	e0bff817 	ldw	r2,-32(fp)
8111a88c:	e0fffe0b 	ldhu	r3,-8(fp)
8111a890:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8111a894:	e0bff817 	ldw	r2,-32(fp)
8111a898:	e0ffff0b 	ldhu	r3,-4(fp)
8111a89c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8111a8a0:	e0bff817 	ldw	r2,-32(fp)
8111a8a4:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8111a8a8:	e0bff817 	ldw	r2,-32(fp)
8111a8ac:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111a8b0:	e0800217 	ldw	r2,8(fp)
8111a8b4:	10e00034 	orhi	r3,r2,32768
8111a8b8:	e0bff817 	ldw	r2,-32(fp)
8111a8bc:	10c00715 	stw	r3,28(r2)

  return 0 ;
8111a8c0:	0005883a 	mov	r2,zero

}
8111a8c4:	e037883a 	mov	sp,fp
8111a8c8:	df000017 	ldw	fp,0(sp)
8111a8cc:	dec00104 	addi	sp,sp,4
8111a8d0:	f800283a 	ret

8111a8d4 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8111a8d4:	defff004 	addi	sp,sp,-64
8111a8d8:	dfc00f15 	stw	ra,60(sp)
8111a8dc:	df000e15 	stw	fp,56(sp)
8111a8e0:	df000e04 	addi	fp,sp,56
8111a8e4:	e13ffd15 	stw	r4,-12(fp)
8111a8e8:	e17ffe15 	stw	r5,-8(fp)
8111a8ec:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8111a8f0:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
8111a8f4:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
8111a8f8:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111a8fc:	e0bffd17 	ldw	r2,-12(fp)
8111a900:	10800317 	ldw	r2,12(r2)
8111a904:	10800204 	addi	r2,r2,8
8111a908:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8111a90c:	10bfffcc 	andi	r2,r2,65535
8111a910:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111a914:	e0bffd17 	ldw	r2,-12(fp)
8111a918:	10800317 	ldw	r2,12(r2)
8111a91c:	10800204 	addi	r2,r2,8
8111a920:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8111a924:	1004d43a 	srli	r2,r2,16
8111a928:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111a92c:	e0bffd17 	ldw	r2,-12(fp)
8111a930:	10800917 	ldw	r2,36(r2)
8111a934:	e0fff617 	ldw	r3,-40(fp)
8111a938:	1880042e 	bgeu	r3,r2,8111a94c <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8111a93c:	e0bffd17 	ldw	r2,-12(fp)
8111a940:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111a944:	e0fff517 	ldw	r3,-44(fp)
8111a948:	18800236 	bltu	r3,r2,8111a954 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
8111a94c:	00bff904 	movi	r2,-28
8111a950:	00008f06 	br	8111ab90 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8111a954:	00800804 	movi	r2,32
8111a958:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a95c:	0005303a 	rdctl	r2,status
8111a960:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a964:	e0fff717 	ldw	r3,-36(fp)
8111a968:	00bfff84 	movi	r2,-2
8111a96c:	1884703a 	and	r2,r3,r2
8111a970:	1001703a 	wrctl	status,r2
  
  return context;
8111a974:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8111a978:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111a97c:	e0bffd17 	ldw	r2,-12(fp)
8111a980:	10800317 	ldw	r2,12(r2)
8111a984:	10800104 	addi	r2,r2,4
8111a988:	e0fff317 	ldw	r3,-52(fp)
8111a98c:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111a990:	e0bffd17 	ldw	r2,-12(fp)
8111a994:	10800317 	ldw	r2,12(r2)
8111a998:	e0fffd17 	ldw	r3,-12(fp)
8111a99c:	18c00317 	ldw	r3,12(r3)
8111a9a0:	18c00037 	ldwio	r3,0(r3)
8111a9a4:	10c00035 	stwio	r3,0(r2)
8111a9a8:	e0bff417 	ldw	r2,-48(fp)
8111a9ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a9b0:	e0bffc17 	ldw	r2,-16(fp)
8111a9b4:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8111a9b8:	e0bffe17 	ldw	r2,-8(fp)
8111a9bc:	10001a26 	beq	r2,zero,8111aa28 <alt_msgdma_descriptor_async_transfer+0x154>
8111a9c0:	e0bfff17 	ldw	r2,-4(fp)
8111a9c4:	1000181e 	bne	r2,zero,8111aa28 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111a9c8:	00000d06 	br	8111aa00 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8111a9cc:	01000044 	movi	r4,1
8111a9d0:	1117e900 	call	81117e90 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111a9d4:	e0bff20b 	ldhu	r2,-56(fp)
8111a9d8:	1084e230 	cmpltui	r2,r2,5000
8111a9dc:	1000051e 	bne	r2,zero,8111a9f4 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
8111a9e0:	012044b4 	movhi	r4,33042
8111a9e4:	2139f504 	addi	r4,r4,-6188
8111a9e8:	11186300 	call	81118630 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111a9ec:	00bff084 	movi	r2,-62
8111a9f0:	00006706 	br	8111ab90 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8111a9f4:	e0bff20b 	ldhu	r2,-56(fp)
8111a9f8:	10800044 	addi	r2,r2,1
8111a9fc:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111aa00:	e0bffd17 	ldw	r2,-12(fp)
8111aa04:	10c00317 	ldw	r3,12(r2)
8111aa08:	e0bffd17 	ldw	r2,-12(fp)
8111aa0c:	10800417 	ldw	r2,16(r2)
8111aa10:	e1bffe17 	ldw	r6,-8(fp)
8111aa14:	100b883a 	mov	r5,r2
8111aa18:	1809883a 	mov	r4,r3
8111aa1c:	111a3b00 	call	8111a3b0 <alt_msgdma_write_standard_descriptor>
8111aa20:	103fea1e 	bne	r2,zero,8111a9cc <__reset+0xfb0fa9cc>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8111aa24:	00001f06 	br	8111aaa4 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111aa28:	e0bffe17 	ldw	r2,-8(fp)
8111aa2c:	10001b1e 	bne	r2,zero,8111aa9c <alt_msgdma_descriptor_async_transfer+0x1c8>
8111aa30:	e0bfff17 	ldw	r2,-4(fp)
8111aa34:	10001926 	beq	r2,zero,8111aa9c <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
8111aa38:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111aa3c:	00000d06 	br	8111aa74 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8111aa40:	01000044 	movi	r4,1
8111aa44:	1117e900 	call	81117e90 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111aa48:	e0bff20b 	ldhu	r2,-56(fp)
8111aa4c:	1084e230 	cmpltui	r2,r2,5000
8111aa50:	1000051e 	bne	r2,zero,8111aa68 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8111aa54:	012044b4 	movhi	r4,33042
8111aa58:	213a0b04 	addi	r4,r4,-6100
8111aa5c:	11186300 	call	81118630 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111aa60:	00bff084 	movi	r2,-62
8111aa64:	00004a06 	br	8111ab90 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8111aa68:	e0bff20b 	ldhu	r2,-56(fp)
8111aa6c:	10800044 	addi	r2,r2,1
8111aa70:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111aa74:	e0bffd17 	ldw	r2,-12(fp)
8111aa78:	10c00317 	ldw	r3,12(r2)
8111aa7c:	e0bffd17 	ldw	r2,-12(fp)
8111aa80:	10800417 	ldw	r2,16(r2)
8111aa84:	e1bfff17 	ldw	r6,-4(fp)
8111aa88:	100b883a 	mov	r5,r2
8111aa8c:	1809883a 	mov	r4,r3
8111aa90:	111a4440 	call	8111a444 <alt_msgdma_write_extended_descriptor>
8111aa94:	103fea1e 	bne	r2,zero,8111aa40 <__reset+0xfb0faa40>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111aa98:	00000206 	br	8111aaa4 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8111aa9c:	00bfffc4 	movi	r2,-1
8111aaa0:	00003b06 	br	8111ab90 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8111aaa4:	e0bffd17 	ldw	r2,-12(fp)
8111aaa8:	10800b17 	ldw	r2,44(r2)
8111aaac:	10001c26 	beq	r2,zero,8111ab20 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
8111aab0:	e0bffd17 	ldw	r2,-12(fp)
8111aab4:	10c00d17 	ldw	r3,52(r2)
8111aab8:	e0bff317 	ldw	r2,-52(fp)
8111aabc:	1884b03a 	or	r2,r3,r2
8111aac0:	10800514 	ori	r2,r2,20
8111aac4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8111aac8:	e0fff317 	ldw	r3,-52(fp)
8111aacc:	00bff7c4 	movi	r2,-33
8111aad0:	1884703a 	and	r2,r3,r2
8111aad4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111aad8:	0005303a 	rdctl	r2,status
8111aadc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111aae0:	e0fffa17 	ldw	r3,-24(fp)
8111aae4:	00bfff84 	movi	r2,-2
8111aae8:	1884703a 	and	r2,r3,r2
8111aaec:	1001703a 	wrctl	status,r2
  
  return context;
8111aaf0:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8111aaf4:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111aaf8:	e0bffd17 	ldw	r2,-12(fp)
8111aafc:	10800317 	ldw	r2,12(r2)
8111ab00:	10800104 	addi	r2,r2,4
8111ab04:	e0fff317 	ldw	r3,-52(fp)
8111ab08:	10c00035 	stwio	r3,0(r2)
8111ab0c:	e0bff417 	ldw	r2,-48(fp)
8111ab10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111ab14:	e0bff817 	ldw	r2,-32(fp)
8111ab18:	1001703a 	wrctl	status,r2
8111ab1c:	00001b06 	br	8111ab8c <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8111ab20:	e0bffd17 	ldw	r2,-12(fp)
8111ab24:	10c00d17 	ldw	r3,52(r2)
8111ab28:	e0bff317 	ldw	r2,-52(fp)
8111ab2c:	1884b03a 	or	r2,r3,r2
8111ab30:	10800114 	ori	r2,r2,4
8111ab34:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8111ab38:	e0fff317 	ldw	r3,-52(fp)
8111ab3c:	00bff3c4 	movi	r2,-49
8111ab40:	1884703a 	and	r2,r3,r2
8111ab44:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111ab48:	0005303a 	rdctl	r2,status
8111ab4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111ab50:	e0fffb17 	ldw	r3,-20(fp)
8111ab54:	00bfff84 	movi	r2,-2
8111ab58:	1884703a 	and	r2,r3,r2
8111ab5c:	1001703a 	wrctl	status,r2
  
  return context;
8111ab60:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8111ab64:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111ab68:	e0bffd17 	ldw	r2,-12(fp)
8111ab6c:	10800317 	ldw	r2,12(r2)
8111ab70:	10800104 	addi	r2,r2,4
8111ab74:	e0fff317 	ldw	r3,-52(fp)
8111ab78:	10c00035 	stwio	r3,0(r2)
8111ab7c:	e0bff417 	ldw	r2,-48(fp)
8111ab80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111ab84:	e0bff917 	ldw	r2,-28(fp)
8111ab88:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8111ab8c:	0005883a 	mov	r2,zero
}
8111ab90:	e037883a 	mov	sp,fp
8111ab94:	dfc00117 	ldw	ra,4(sp)
8111ab98:	df000017 	ldw	fp,0(sp)
8111ab9c:	dec00204 	addi	sp,sp,8
8111aba0:	f800283a 	ret

8111aba4 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8111aba4:	defff004 	addi	sp,sp,-64
8111aba8:	dfc00f15 	stw	ra,60(sp)
8111abac:	df000e15 	stw	fp,56(sp)
8111abb0:	df000e04 	addi	fp,sp,56
8111abb4:	e13ffd15 	stw	r4,-12(fp)
8111abb8:	e17ffe15 	stw	r5,-8(fp)
8111abbc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8111abc0:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
8111abc4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
8111abc8:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8111abcc:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111abd0:	e0bffd17 	ldw	r2,-12(fp)
8111abd4:	10800317 	ldw	r2,12(r2)
8111abd8:	10800204 	addi	r2,r2,8
8111abdc:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8111abe0:	10bfffcc 	andi	r2,r2,65535
8111abe4:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111abe8:	e0bffd17 	ldw	r2,-12(fp)
8111abec:	10800317 	ldw	r2,12(r2)
8111abf0:	10800204 	addi	r2,r2,8
8111abf4:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8111abf8:	1004d43a 	srli	r2,r2,16
8111abfc:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8111ac00:	00807804 	movi	r2,480
8111ac04:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111ac08:	00001906 	br	8111ac70 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8111ac0c:	01000044 	movi	r4,1
8111ac10:	1117e900 	call	81117e90 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111ac14:	e0bff30b 	ldhu	r2,-52(fp)
8111ac18:	1084e230 	cmpltui	r2,r2,5000
8111ac1c:	1000051e 	bne	r2,zero,8111ac34 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8111ac20:	012044b4 	movhi	r4,33042
8111ac24:	213a2104 	addi	r4,r4,-6012
8111ac28:	11186300 	call	81118630 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
8111ac2c:	00bff084 	movi	r2,-62
8111ac30:	0000b506 	br	8111af08 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
8111ac34:	e0bff30b 	ldhu	r2,-52(fp)
8111ac38:	10800044 	addi	r2,r2,1
8111ac3c:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111ac40:	e0bffd17 	ldw	r2,-12(fp)
8111ac44:	10800317 	ldw	r2,12(r2)
8111ac48:	10800204 	addi	r2,r2,8
8111ac4c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8111ac50:	10bfffcc 	andi	r2,r2,65535
8111ac54:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111ac58:	e0bffd17 	ldw	r2,-12(fp)
8111ac5c:	10800317 	ldw	r2,12(r2)
8111ac60:	10800204 	addi	r2,r2,8
8111ac64:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8111ac68:	1004d43a 	srli	r2,r2,16
8111ac6c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111ac70:	e0bffd17 	ldw	r2,-12(fp)
8111ac74:	10800917 	ldw	r2,36(r2)
8111ac78:	e0fff517 	ldw	r3,-44(fp)
8111ac7c:	18bfe32e 	bgeu	r3,r2,8111ac0c <__reset+0xfb0fac0c>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8111ac80:	e0bffd17 	ldw	r2,-12(fp)
8111ac84:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8111ac88:	e0fff417 	ldw	r3,-48(fp)
8111ac8c:	18bfdf2e 	bgeu	r3,r2,8111ac0c <__reset+0xfb0fac0c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111ac90:	0005303a 	rdctl	r2,status
8111ac94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111ac98:	e0fffc17 	ldw	r3,-16(fp)
8111ac9c:	00bfff84 	movi	r2,-2
8111aca0:	1884703a 	and	r2,r3,r2
8111aca4:	1001703a 	wrctl	status,r2
  
  return context;
8111aca8:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8111acac:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8111acb0:	e0bffd17 	ldw	r2,-12(fp)
8111acb4:	10800317 	ldw	r2,12(r2)
8111acb8:	10800104 	addi	r2,r2,4
8111acbc:	00c00804 	movi	r3,32
8111acc0:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111acc4:	e0bffd17 	ldw	r2,-12(fp)
8111acc8:	10800317 	ldw	r2,12(r2)
8111accc:	e0fffd17 	ldw	r3,-12(fp)
8111acd0:	18c00317 	ldw	r3,12(r3)
8111acd4:	18c00037 	ldwio	r3,0(r3)
8111acd8:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8111acdc:	e0bffe17 	ldw	r2,-8(fp)
8111ace0:	10001b26 	beq	r2,zero,8111ad50 <alt_msgdma_descriptor_sync_transfer+0x1ac>
8111ace4:	e0bfff17 	ldw	r2,-4(fp)
8111ace8:	1000191e 	bne	r2,zero,8111ad50 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
8111acec:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111acf0:	00000d06 	br	8111ad28 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8111acf4:	01000044 	movi	r4,1
8111acf8:	1117e900 	call	81117e90 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111acfc:	e0bff30b 	ldhu	r2,-52(fp)
8111ad00:	1084e230 	cmpltui	r2,r2,5000
8111ad04:	1000051e 	bne	r2,zero,8111ad1c <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
8111ad08:	012044b4 	movhi	r4,33042
8111ad0c:	213a3504 	addi	r4,r4,-5932
8111ad10:	11186300 	call	81118630 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111ad14:	00bff084 	movi	r2,-62
8111ad18:	00007b06 	br	8111af08 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
8111ad1c:	e0bff30b 	ldhu	r2,-52(fp)
8111ad20:	10800044 	addi	r2,r2,1
8111ad24:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111ad28:	e0bffd17 	ldw	r2,-12(fp)
8111ad2c:	10c00317 	ldw	r3,12(r2)
8111ad30:	e0bffd17 	ldw	r2,-12(fp)
8111ad34:	10800417 	ldw	r2,16(r2)
8111ad38:	e1bffe17 	ldw	r6,-8(fp)
8111ad3c:	100b883a 	mov	r5,r2
8111ad40:	1809883a 	mov	r4,r3
8111ad44:	111a3b00 	call	8111a3b0 <alt_msgdma_write_standard_descriptor>
8111ad48:	103fea1e 	bne	r2,zero,8111acf4 <__reset+0xfb0facf4>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8111ad4c:	00001f06 	br	8111adcc <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111ad50:	e0bffe17 	ldw	r2,-8(fp)
8111ad54:	10001b1e 	bne	r2,zero,8111adc4 <alt_msgdma_descriptor_sync_transfer+0x220>
8111ad58:	e0bfff17 	ldw	r2,-4(fp)
8111ad5c:	10001926 	beq	r2,zero,8111adc4 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
8111ad60:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111ad64:	00000d06 	br	8111ad9c <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8111ad68:	01000044 	movi	r4,1
8111ad6c:	1117e900 	call	81117e90 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111ad70:	e0bff30b 	ldhu	r2,-52(fp)
8111ad74:	1084e230 	cmpltui	r2,r2,5000
8111ad78:	1000051e 	bne	r2,zero,8111ad90 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
8111ad7c:	012044b4 	movhi	r4,33042
8111ad80:	213a4604 	addi	r4,r4,-5864
8111ad84:	11186300 	call	81118630 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8111ad88:	00bff084 	movi	r2,-62
8111ad8c:	00005e06 	br	8111af08 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
8111ad90:	e0bff30b 	ldhu	r2,-52(fp)
8111ad94:	10800044 	addi	r2,r2,1
8111ad98:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111ad9c:	e0bffd17 	ldw	r2,-12(fp)
8111ada0:	10c00317 	ldw	r3,12(r2)
8111ada4:	e0bffd17 	ldw	r2,-12(fp)
8111ada8:	10800417 	ldw	r2,16(r2)
8111adac:	e1bfff17 	ldw	r6,-4(fp)
8111adb0:	100b883a 	mov	r5,r2
8111adb4:	1809883a 	mov	r4,r3
8111adb8:	111a4440 	call	8111a444 <alt_msgdma_write_extended_descriptor>
8111adbc:	103fea1e 	bne	r2,zero,8111ad68 <__reset+0xfb0fad68>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111adc0:	00000206 	br	8111adcc <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8111adc4:	00bfffc4 	movi	r2,-1
8111adc8:	00004f06 	br	8111af08 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8111adcc:	e0bffd17 	ldw	r2,-12(fp)
8111add0:	10800317 	ldw	r2,12(r2)
8111add4:	10800104 	addi	r2,r2,4
8111add8:	e0fffd17 	ldw	r3,-12(fp)
8111addc:	19000d17 	ldw	r4,52(r3)
8111ade0:	00fff2c4 	movi	r3,-53
8111ade4:	20c6703a 	and	r3,r4,r3
8111ade8:	18c00114 	ori	r3,r3,4
8111adec:	10c00035 	stwio	r3,0(r2)
8111adf0:	e0bff717 	ldw	r2,-36(fp)
8111adf4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111adf8:	e0bff917 	ldw	r2,-28(fp)
8111adfc:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8111ae00:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8111ae04:	e0bffd17 	ldw	r2,-12(fp)
8111ae08:	10800317 	ldw	r2,12(r2)
8111ae0c:	10800037 	ldwio	r2,0(r2)
8111ae10:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8111ae14:	00001106 	br	8111ae5c <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
8111ae18:	01000044 	movi	r4,1
8111ae1c:	1117e900 	call	81117e90 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8111ae20:	e0bff30b 	ldhu	r2,-52(fp)
8111ae24:	1084e230 	cmpltui	r2,r2,5000
8111ae28:	1000051e 	bne	r2,zero,8111ae40 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8111ae2c:	012044b4 	movhi	r4,33042
8111ae30:	213a5704 	addi	r4,r4,-5796
8111ae34:	11186300 	call	81118630 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
8111ae38:	00bff084 	movi	r2,-62
8111ae3c:	00003206 	br	8111af08 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
8111ae40:	e0bff30b 	ldhu	r2,-52(fp)
8111ae44:	10800044 	addi	r2,r2,1
8111ae48:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8111ae4c:	e0bffd17 	ldw	r2,-12(fp)
8111ae50:	10800317 	ldw	r2,12(r2)
8111ae54:	10800037 	ldwio	r2,0(r2)
8111ae58:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8111ae5c:	e0fff217 	ldw	r3,-56(fp)
8111ae60:	e0bff817 	ldw	r2,-32(fp)
8111ae64:	1884703a 	and	r2,r3,r2
8111ae68:	1000031e 	bne	r2,zero,8111ae78 <alt_msgdma_descriptor_sync_transfer+0x2d4>
8111ae6c:	e0bff217 	ldw	r2,-56(fp)
8111ae70:	1080004c 	andi	r2,r2,1
8111ae74:	103fe81e 	bne	r2,zero,8111ae18 <__reset+0xfb0fae18>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8111ae78:	e0fff217 	ldw	r3,-56(fp)
8111ae7c:	e0bff817 	ldw	r2,-32(fp)
8111ae80:	1884703a 	and	r2,r3,r2
8111ae84:	10000226 	beq	r2,zero,8111ae90 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
8111ae88:	e0bff817 	ldw	r2,-32(fp)
8111ae8c:	00001e06 	br	8111af08 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8111ae90:	e0bffd17 	ldw	r2,-12(fp)
8111ae94:	10800317 	ldw	r2,12(r2)
8111ae98:	10800104 	addi	r2,r2,4
8111ae9c:	10800037 	ldwio	r2,0(r2)
8111aea0:	10800814 	ori	r2,r2,32
8111aea4:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111aea8:	0005303a 	rdctl	r2,status
8111aeac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111aeb0:	e0fffa17 	ldw	r3,-24(fp)
8111aeb4:	00bfff84 	movi	r2,-2
8111aeb8:	1884703a 	and	r2,r3,r2
8111aebc:	1001703a 	wrctl	status,r2
  
  return context;
8111aec0:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8111aec4:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8111aec8:	e0bffd17 	ldw	r2,-12(fp)
8111aecc:	10800317 	ldw	r2,12(r2)
8111aed0:	10800104 	addi	r2,r2,4
8111aed4:	e0fff617 	ldw	r3,-40(fp)
8111aed8:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111aedc:	e0bffd17 	ldw	r2,-12(fp)
8111aee0:	10800317 	ldw	r2,12(r2)
8111aee4:	e0fffd17 	ldw	r3,-12(fp)
8111aee8:	18c00317 	ldw	r3,12(r3)
8111aeec:	18c00037 	ldwio	r3,0(r3)
8111aef0:	10c00035 	stwio	r3,0(r2)
8111aef4:	e0bff717 	ldw	r2,-36(fp)
8111aef8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111aefc:	e0bffb17 	ldw	r2,-20(fp)
8111af00:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8111af04:	0005883a 	mov	r2,zero

}
8111af08:	e037883a 	mov	sp,fp
8111af0c:	dfc00117 	ldw	ra,4(sp)
8111af10:	df000017 	ldw	fp,0(sp)
8111af14:	dec00204 	addi	sp,sp,8
8111af18:	f800283a 	ret

8111af1c <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8111af1c:	defff804 	addi	sp,sp,-32
8111af20:	dfc00715 	stw	ra,28(sp)
8111af24:	df000615 	stw	fp,24(sp)
8111af28:	df000604 	addi	fp,sp,24
8111af2c:	e13ffc15 	stw	r4,-16(fp)
8111af30:	e17ffd15 	stw	r5,-12(fp)
8111af34:	e1bffe15 	stw	r6,-8(fp)
8111af38:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8111af3c:	e0800217 	ldw	r2,8(fp)
8111af40:	d8800115 	stw	r2,4(sp)
8111af44:	e0bfff17 	ldw	r2,-4(fp)
8111af48:	d8800015 	stw	r2,0(sp)
8111af4c:	e1fffe17 	ldw	r7,-8(fp)
8111af50:	000d883a 	mov	r6,zero
8111af54:	e17ffd17 	ldw	r5,-12(fp)
8111af58:	e13ffc17 	ldw	r4,-16(fp)
8111af5c:	111a6f40 	call	8111a6f4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8111af60:	e037883a 	mov	sp,fp
8111af64:	dfc00117 	ldw	ra,4(sp)
8111af68:	df000017 	ldw	fp,0(sp)
8111af6c:	dec00204 	addi	sp,sp,8
8111af70:	f800283a 	ret

8111af74 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8111af74:	defff804 	addi	sp,sp,-32
8111af78:	dfc00715 	stw	ra,28(sp)
8111af7c:	df000615 	stw	fp,24(sp)
8111af80:	df000604 	addi	fp,sp,24
8111af84:	e13ffc15 	stw	r4,-16(fp)
8111af88:	e17ffd15 	stw	r5,-12(fp)
8111af8c:	e1bffe15 	stw	r6,-8(fp)
8111af90:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8111af94:	e0800217 	ldw	r2,8(fp)
8111af98:	d8800115 	stw	r2,4(sp)
8111af9c:	e0bfff17 	ldw	r2,-4(fp)
8111afa0:	d8800015 	stw	r2,0(sp)
8111afa4:	000f883a 	mov	r7,zero
8111afa8:	e1bffe17 	ldw	r6,-8(fp)
8111afac:	e17ffd17 	ldw	r5,-12(fp)
8111afb0:	e13ffc17 	ldw	r4,-16(fp)
8111afb4:	111a6f40 	call	8111a6f4 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8111afb8:	e037883a 	mov	sp,fp
8111afbc:	dfc00117 	ldw	ra,4(sp)
8111afc0:	df000017 	ldw	fp,0(sp)
8111afc4:	dec00204 	addi	sp,sp,8
8111afc8:	f800283a 	ret

8111afcc <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111afcc:	defff804 	addi	sp,sp,-32
8111afd0:	dfc00715 	stw	ra,28(sp)
8111afd4:	df000615 	stw	fp,24(sp)
8111afd8:	df000604 	addi	fp,sp,24
8111afdc:	e13ffc15 	stw	r4,-16(fp)
8111afe0:	e17ffd15 	stw	r5,-12(fp)
8111afe4:	e1bffe15 	stw	r6,-8(fp)
8111afe8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8111afec:	e0800317 	ldw	r2,12(fp)
8111aff0:	d8800115 	stw	r2,4(sp)
8111aff4:	e0800217 	ldw	r2,8(fp)
8111aff8:	d8800015 	stw	r2,0(sp)
8111affc:	e1ffff17 	ldw	r7,-4(fp)
8111b000:	e1bffe17 	ldw	r6,-8(fp)
8111b004:	e17ffd17 	ldw	r5,-12(fp)
8111b008:	e13ffc17 	ldw	r4,-16(fp)
8111b00c:	111a6f40 	call	8111a6f4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8111b010:	e037883a 	mov	sp,fp
8111b014:	dfc00117 	ldw	ra,4(sp)
8111b018:	df000017 	ldw	fp,0(sp)
8111b01c:	dec00204 	addi	sp,sp,8
8111b020:	f800283a 	ret

8111b024 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
8111b024:	defff004 	addi	sp,sp,-64
8111b028:	dfc00f15 	stw	ra,60(sp)
8111b02c:	df000e15 	stw	fp,56(sp)
8111b030:	df000e04 	addi	fp,sp,56
8111b034:	e13ff915 	stw	r4,-28(fp)
8111b038:	e17ffa15 	stw	r5,-24(fp)
8111b03c:	e1bffb15 	stw	r6,-20(fp)
8111b040:	e1fffc15 	stw	r7,-16(fp)
8111b044:	e1000317 	ldw	r4,12(fp)
8111b048:	e0c00417 	ldw	r3,16(fp)
8111b04c:	e0800517 	ldw	r2,20(fp)
8111b050:	e13ffd0d 	sth	r4,-12(fp)
8111b054:	e0fffe05 	stb	r3,-8(fp)
8111b058:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8111b05c:	e0bffd0b 	ldhu	r2,-12(fp)
8111b060:	e0fffe03 	ldbu	r3,-8(fp)
8111b064:	e13fff0b 	ldhu	r4,-4(fp)
8111b068:	d9000615 	stw	r4,24(sp)
8111b06c:	d8000515 	stw	zero,20(sp)
8111b070:	d8c00415 	stw	r3,16(sp)
8111b074:	d8000315 	stw	zero,12(sp)
8111b078:	d8800215 	stw	r2,8(sp)
8111b07c:	e0800217 	ldw	r2,8(fp)
8111b080:	d8800115 	stw	r2,4(sp)
8111b084:	e0bffc17 	ldw	r2,-16(fp)
8111b088:	d8800015 	stw	r2,0(sp)
8111b08c:	e1fffb17 	ldw	r7,-20(fp)
8111b090:	000d883a 	mov	r6,zero
8111b094:	e17ffa17 	ldw	r5,-24(fp)
8111b098:	e13ff917 	ldw	r4,-28(fp)
8111b09c:	111a7800 	call	8111a780 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8111b0a0:	e037883a 	mov	sp,fp
8111b0a4:	dfc00117 	ldw	ra,4(sp)
8111b0a8:	df000017 	ldw	fp,0(sp)
8111b0ac:	dec00204 	addi	sp,sp,8
8111b0b0:	f800283a 	ret

8111b0b4 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8111b0b4:	defff004 	addi	sp,sp,-64
8111b0b8:	dfc00f15 	stw	ra,60(sp)
8111b0bc:	df000e15 	stw	fp,56(sp)
8111b0c0:	df000e04 	addi	fp,sp,56
8111b0c4:	e13ff915 	stw	r4,-28(fp)
8111b0c8:	e17ffa15 	stw	r5,-24(fp)
8111b0cc:	e1bffb15 	stw	r6,-20(fp)
8111b0d0:	e1fffc15 	stw	r7,-16(fp)
8111b0d4:	e1000317 	ldw	r4,12(fp)
8111b0d8:	e0c00417 	ldw	r3,16(fp)
8111b0dc:	e0800517 	ldw	r2,20(fp)
8111b0e0:	e13ffd0d 	sth	r4,-12(fp)
8111b0e4:	e0fffe05 	stb	r3,-8(fp)
8111b0e8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8111b0ec:	e0bffd0b 	ldhu	r2,-12(fp)
8111b0f0:	e0fffe03 	ldbu	r3,-8(fp)
8111b0f4:	e13fff0b 	ldhu	r4,-4(fp)
8111b0f8:	d8000615 	stw	zero,24(sp)
8111b0fc:	d9000515 	stw	r4,20(sp)
8111b100:	d8000415 	stw	zero,16(sp)
8111b104:	d8c00315 	stw	r3,12(sp)
8111b108:	d8800215 	stw	r2,8(sp)
8111b10c:	e0800217 	ldw	r2,8(fp)
8111b110:	d8800115 	stw	r2,4(sp)
8111b114:	e0bffc17 	ldw	r2,-16(fp)
8111b118:	d8800015 	stw	r2,0(sp)
8111b11c:	000f883a 	mov	r7,zero
8111b120:	e1bffb17 	ldw	r6,-20(fp)
8111b124:	e17ffa17 	ldw	r5,-24(fp)
8111b128:	e13ff917 	ldw	r4,-28(fp)
8111b12c:	111a7800 	call	8111a780 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8111b130:	e037883a 	mov	sp,fp
8111b134:	dfc00117 	ldw	ra,4(sp)
8111b138:	df000017 	ldw	fp,0(sp)
8111b13c:	dec00204 	addi	sp,sp,8
8111b140:	f800283a 	ret

8111b144 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8111b144:	deffee04 	addi	sp,sp,-72
8111b148:	dfc01115 	stw	ra,68(sp)
8111b14c:	df001015 	stw	fp,64(sp)
8111b150:	df001004 	addi	fp,sp,64
8111b154:	e13ff715 	stw	r4,-36(fp)
8111b158:	e17ff815 	stw	r5,-32(fp)
8111b15c:	e1bff915 	stw	r6,-28(fp)
8111b160:	e1fffa15 	stw	r7,-24(fp)
8111b164:	e1800417 	ldw	r6,16(fp)
8111b168:	e1400517 	ldw	r5,20(fp)
8111b16c:	e1000617 	ldw	r4,24(fp)
8111b170:	e0c00717 	ldw	r3,28(fp)
8111b174:	e0800817 	ldw	r2,32(fp)
8111b178:	e1bffb0d 	sth	r6,-20(fp)
8111b17c:	e17ffc05 	stb	r5,-16(fp)
8111b180:	e13ffd05 	stb	r4,-12(fp)
8111b184:	e0fffe0d 	sth	r3,-8(fp)
8111b188:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8111b18c:	e0bffb0b 	ldhu	r2,-20(fp)
8111b190:	e0fffc03 	ldbu	r3,-16(fp)
8111b194:	e13ffd03 	ldbu	r4,-12(fp)
8111b198:	e17ffe0b 	ldhu	r5,-8(fp)
8111b19c:	e1bfff0b 	ldhu	r6,-4(fp)
8111b1a0:	d9800615 	stw	r6,24(sp)
8111b1a4:	d9400515 	stw	r5,20(sp)
8111b1a8:	d9000415 	stw	r4,16(sp)
8111b1ac:	d8c00315 	stw	r3,12(sp)
8111b1b0:	d8800215 	stw	r2,8(sp)
8111b1b4:	e0800317 	ldw	r2,12(fp)
8111b1b8:	d8800115 	stw	r2,4(sp)
8111b1bc:	e0800217 	ldw	r2,8(fp)
8111b1c0:	d8800015 	stw	r2,0(sp)
8111b1c4:	e1fffa17 	ldw	r7,-24(fp)
8111b1c8:	e1bff917 	ldw	r6,-28(fp)
8111b1cc:	e17ff817 	ldw	r5,-32(fp)
8111b1d0:	e13ff717 	ldw	r4,-36(fp)
8111b1d4:	111a7800 	call	8111a780 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8111b1d8:	e037883a 	mov	sp,fp
8111b1dc:	dfc00117 	ldw	ra,4(sp)
8111b1e0:	df000017 	ldw	fp,0(sp)
8111b1e4:	dec00204 	addi	sp,sp,8
8111b1e8:	f800283a 	ret

8111b1ec <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111b1ec:	defffb04 	addi	sp,sp,-20
8111b1f0:	df000415 	stw	fp,16(sp)
8111b1f4:	df000404 	addi	fp,sp,16
8111b1f8:	e13ffc15 	stw	r4,-16(fp)
8111b1fc:	e17ffd15 	stw	r5,-12(fp)
8111b200:	e1bffe15 	stw	r6,-8(fp)
8111b204:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8111b208:	e0bffc17 	ldw	r2,-16(fp)
8111b20c:	10c01217 	ldw	r3,72(r2)
8111b210:	e0800117 	ldw	r2,4(fp)
8111b214:	18800436 	bltu	r3,r2,8111b228 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8111b218:	e0bffc17 	ldw	r2,-16(fp)
8111b21c:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8111b220:	10803fcc 	andi	r2,r2,255
8111b224:	10000226 	beq	r2,zero,8111b230 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8111b228:	00bffa84 	movi	r2,-22
8111b22c:	00001406 	br	8111b280 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
8111b230:	e0bffd17 	ldw	r2,-12(fp)
8111b234:	e0fffe17 	ldw	r3,-8(fp)
8111b238:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8111b23c:	e0bffd17 	ldw	r2,-12(fp)
8111b240:	e0ffff17 	ldw	r3,-4(fp)
8111b244:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111b248:	e0bffd17 	ldw	r2,-12(fp)
8111b24c:	e0c00117 	ldw	r3,4(fp)
8111b250:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8111b254:	e0fffd17 	ldw	r3,-12(fp)
8111b258:	e0bffd17 	ldw	r2,-12(fp)
8111b25c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111b260:	e0c00217 	ldw	r3,8(fp)
8111b264:	00900034 	movhi	r2,16384
8111b268:	10bfffc4 	addi	r2,r2,-1
8111b26c:	1884703a 	and	r2,r3,r2
8111b270:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8111b274:	e0bffd17 	ldw	r2,-12(fp)
8111b278:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8111b27c:	0005883a 	mov	r2,zero
}
8111b280:	e037883a 	mov	sp,fp
8111b284:	df000017 	ldw	fp,0(sp)
8111b288:	dec00104 	addi	sp,sp,4
8111b28c:	f800283a 	ret

8111b290 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8111b290:	defff404 	addi	sp,sp,-48
8111b294:	df000b15 	stw	fp,44(sp)
8111b298:	df000b04 	addi	fp,sp,44
8111b29c:	e13ff715 	stw	r4,-36(fp)
8111b2a0:	e17ff815 	stw	r5,-32(fp)
8111b2a4:	e1bff915 	stw	r6,-28(fp)
8111b2a8:	e1fffa15 	stw	r7,-24(fp)
8111b2ac:	e1800517 	ldw	r6,20(fp)
8111b2b0:	e1400617 	ldw	r5,24(fp)
8111b2b4:	e1000717 	ldw	r4,28(fp)
8111b2b8:	e0c00817 	ldw	r3,32(fp)
8111b2bc:	e0800917 	ldw	r2,36(fp)
8111b2c0:	e1bffb0d 	sth	r6,-20(fp)
8111b2c4:	e17ffc05 	stb	r5,-16(fp)
8111b2c8:	e13ffd05 	stb	r4,-12(fp)
8111b2cc:	e0fffe0d 	sth	r3,-8(fp)
8111b2d0:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8111b2d4:	e0bff717 	ldw	r2,-36(fp)
8111b2d8:	10c01217 	ldw	r3,72(r2)
8111b2dc:	e0800317 	ldw	r2,12(fp)
8111b2e0:	18801936 	bltu	r3,r2,8111b348 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8111b2e4:	e13ff717 	ldw	r4,-36(fp)
8111b2e8:	20801317 	ldw	r2,76(r4)
8111b2ec:	20c01417 	ldw	r3,80(r4)
8111b2f0:	e13ffe0b 	ldhu	r4,-8(fp)
8111b2f4:	213fffcc 	andi	r4,r4,65535
8111b2f8:	2015883a 	mov	r10,r4
8111b2fc:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8111b300:	1ac01136 	bltu	r3,r11,8111b348 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8111b304:	58c0011e 	bne	r11,r3,8111b30c <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
8111b308:	12800f36 	bltu	r2,r10,8111b348 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111b30c:	e13ff717 	ldw	r4,-36(fp)
8111b310:	20801317 	ldw	r2,76(r4)
8111b314:	20c01417 	ldw	r3,80(r4)
8111b318:	e13fff0b 	ldhu	r4,-4(fp)
8111b31c:	213fffcc 	andi	r4,r4,65535
8111b320:	2011883a 	mov	r8,r4
8111b324:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8111b328:	1a400736 	bltu	r3,r9,8111b348 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8111b32c:	48c0011e 	bne	r9,r3,8111b334 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
8111b330:	12000536 	bltu	r2,r8,8111b348 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8111b334:	e0bff717 	ldw	r2,-36(fp)
8111b338:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8111b33c:	10803fcc 	andi	r2,r2,255
8111b340:	10800060 	cmpeqi	r2,r2,1
8111b344:	1000021e 	bne	r2,zero,8111b350 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8111b348:	00bffa84 	movi	r2,-22
8111b34c:	00003106 	br	8111b414 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
8111b350:	e0bff817 	ldw	r2,-32(fp)
8111b354:	e0fff917 	ldw	r3,-28(fp)
8111b358:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8111b35c:	e0bff817 	ldw	r2,-32(fp)
8111b360:	e0fffa17 	ldw	r3,-24(fp)
8111b364:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8111b368:	e0bff817 	ldw	r2,-32(fp)
8111b36c:	e0c00117 	ldw	r3,4(fp)
8111b370:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8111b374:	e0bff817 	ldw	r2,-32(fp)
8111b378:	e0c00217 	ldw	r3,8(fp)
8111b37c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8111b380:	e0bff817 	ldw	r2,-32(fp)
8111b384:	e0c00317 	ldw	r3,12(fp)
8111b388:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8111b38c:	e0bff817 	ldw	r2,-32(fp)
8111b390:	e0fffb0b 	ldhu	r3,-20(fp)
8111b394:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8111b398:	e0bff817 	ldw	r2,-32(fp)
8111b39c:	e0fffc03 	ldbu	r3,-16(fp)
8111b3a0:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8111b3a4:	e0bff817 	ldw	r2,-32(fp)
8111b3a8:	e0fffd03 	ldbu	r3,-12(fp)
8111b3ac:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8111b3b0:	e0bff817 	ldw	r2,-32(fp)
8111b3b4:	e0fffe0b 	ldhu	r3,-8(fp)
8111b3b8:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8111b3bc:	e0bff817 	ldw	r2,-32(fp)
8111b3c0:	e0ffff0b 	ldhu	r3,-4(fp)
8111b3c4:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8111b3c8:	e0bff817 	ldw	r2,-32(fp)
8111b3cc:	1019883a 	mov	r12,r2
8111b3d0:	001b883a 	mov	r13,zero
8111b3d4:	e33ff515 	stw	r12,-44(fp)
8111b3d8:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8111b3dc:	e0fff517 	ldw	r3,-44(fp)
8111b3e0:	e0bff817 	ldw	r2,-32(fp)
8111b3e4:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8111b3e8:	e0fff617 	ldw	r3,-40(fp)
8111b3ec:	e0bff817 	ldw	r2,-32(fp)
8111b3f0:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111b3f4:	e0c00417 	ldw	r3,16(fp)
8111b3f8:	00900034 	movhi	r2,16384
8111b3fc:	10bfffc4 	addi	r2,r2,-1
8111b400:	1884703a 	and	r2,r3,r2
8111b404:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8111b408:	e0bff817 	ldw	r2,-32(fp)
8111b40c:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8111b410:	0005883a 	mov	r2,zero
}
8111b414:	e037883a 	mov	sp,fp
8111b418:	df000017 	ldw	fp,0(sp)
8111b41c:	dec00104 	addi	sp,sp,4
8111b420:	f800283a 	ret

8111b424 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
8111b424:	defff804 	addi	sp,sp,-32
8111b428:	dfc00715 	stw	ra,28(sp)
8111b42c:	df000615 	stw	fp,24(sp)
8111b430:	df000604 	addi	fp,sp,24
8111b434:	e13ffc15 	stw	r4,-16(fp)
8111b438:	e17ffd15 	stw	r5,-12(fp)
8111b43c:	e1bffe15 	stw	r6,-8(fp)
8111b440:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8111b444:	e0800317 	ldw	r2,12(fp)
8111b448:	d8800115 	stw	r2,4(sp)
8111b44c:	e0800217 	ldw	r2,8(fp)
8111b450:	d8800015 	stw	r2,0(sp)
8111b454:	e1ffff17 	ldw	r7,-4(fp)
8111b458:	e1bffe17 	ldw	r6,-8(fp)
8111b45c:	e17ffd17 	ldw	r5,-12(fp)
8111b460:	e13ffc17 	ldw	r4,-16(fp)
8111b464:	111b1ec0 	call	8111b1ec <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
8111b468:	e037883a 	mov	sp,fp
8111b46c:	dfc00117 	ldw	ra,4(sp)
8111b470:	df000017 	ldw	fp,0(sp)
8111b474:	dec00204 	addi	sp,sp,8
8111b478:	f800283a 	ret

8111b47c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111b47c:	defff804 	addi	sp,sp,-32
8111b480:	dfc00715 	stw	ra,28(sp)
8111b484:	df000615 	stw	fp,24(sp)
8111b488:	df000604 	addi	fp,sp,24
8111b48c:	e13ffc15 	stw	r4,-16(fp)
8111b490:	e17ffd15 	stw	r5,-12(fp)
8111b494:	e1bffe15 	stw	r6,-8(fp)
8111b498:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8111b49c:	e0800217 	ldw	r2,8(fp)
8111b4a0:	d8800115 	stw	r2,4(sp)
8111b4a4:	e0bfff17 	ldw	r2,-4(fp)
8111b4a8:	d8800015 	stw	r2,0(sp)
8111b4ac:	e1fffe17 	ldw	r7,-8(fp)
8111b4b0:	000d883a 	mov	r6,zero
8111b4b4:	e17ffd17 	ldw	r5,-12(fp)
8111b4b8:	e13ffc17 	ldw	r4,-16(fp)
8111b4bc:	111b1ec0 	call	8111b1ec <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
8111b4c0:	e037883a 	mov	sp,fp
8111b4c4:	dfc00117 	ldw	ra,4(sp)
8111b4c8:	df000017 	ldw	fp,0(sp)
8111b4cc:	dec00204 	addi	sp,sp,8
8111b4d0:	f800283a 	ret

8111b4d4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8111b4d4:	defff804 	addi	sp,sp,-32
8111b4d8:	dfc00715 	stw	ra,28(sp)
8111b4dc:	df000615 	stw	fp,24(sp)
8111b4e0:	df000604 	addi	fp,sp,24
8111b4e4:	e13ffc15 	stw	r4,-16(fp)
8111b4e8:	e17ffd15 	stw	r5,-12(fp)
8111b4ec:	e1bffe15 	stw	r6,-8(fp)
8111b4f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8111b4f4:	e0800217 	ldw	r2,8(fp)
8111b4f8:	d8800115 	stw	r2,4(sp)
8111b4fc:	e0bfff17 	ldw	r2,-4(fp)
8111b500:	d8800015 	stw	r2,0(sp)
8111b504:	000f883a 	mov	r7,zero
8111b508:	e1bffe17 	ldw	r6,-8(fp)
8111b50c:	e17ffd17 	ldw	r5,-12(fp)
8111b510:	e13ffc17 	ldw	r4,-16(fp)
8111b514:	111b1ec0 	call	8111b1ec <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8111b518:	e037883a 	mov	sp,fp
8111b51c:	dfc00117 	ldw	ra,4(sp)
8111b520:	df000017 	ldw	fp,0(sp)
8111b524:	dec00204 	addi	sp,sp,8
8111b528:	f800283a 	ret

8111b52c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8111b52c:	deffee04 	addi	sp,sp,-72
8111b530:	dfc01115 	stw	ra,68(sp)
8111b534:	df001015 	stw	fp,64(sp)
8111b538:	df001004 	addi	fp,sp,64
8111b53c:	e13ff915 	stw	r4,-28(fp)
8111b540:	e17ffa15 	stw	r5,-24(fp)
8111b544:	e1bffb15 	stw	r6,-20(fp)
8111b548:	e1fffc15 	stw	r7,-16(fp)
8111b54c:	e1000417 	ldw	r4,16(fp)
8111b550:	e0c00517 	ldw	r3,20(fp)
8111b554:	e0800617 	ldw	r2,24(fp)
8111b558:	e13ffd0d 	sth	r4,-12(fp)
8111b55c:	e0fffe05 	stb	r3,-8(fp)
8111b560:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8111b564:	e0bffd0b 	ldhu	r2,-12(fp)
8111b568:	e0fffe03 	ldbu	r3,-8(fp)
8111b56c:	e13fff0b 	ldhu	r4,-4(fp)
8111b570:	d9000815 	stw	r4,32(sp)
8111b574:	d8000715 	stw	zero,28(sp)
8111b578:	d8c00615 	stw	r3,24(sp)
8111b57c:	d8000515 	stw	zero,20(sp)
8111b580:	d8800415 	stw	r2,16(sp)
8111b584:	e0800317 	ldw	r2,12(fp)
8111b588:	d8800315 	stw	r2,12(sp)
8111b58c:	e0800217 	ldw	r2,8(fp)
8111b590:	d8800215 	stw	r2,8(sp)
8111b594:	e0bffc17 	ldw	r2,-16(fp)
8111b598:	d8800115 	stw	r2,4(sp)
8111b59c:	e0bffb17 	ldw	r2,-20(fp)
8111b5a0:	d8800015 	stw	r2,0(sp)
8111b5a4:	000f883a 	mov	r7,zero
8111b5a8:	000d883a 	mov	r6,zero
8111b5ac:	e17ffa17 	ldw	r5,-24(fp)
8111b5b0:	e13ff917 	ldw	r4,-28(fp)
8111b5b4:	111b2900 	call	8111b290 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8111b5b8:	e037883a 	mov	sp,fp
8111b5bc:	dfc00117 	ldw	ra,4(sp)
8111b5c0:	df000017 	ldw	fp,0(sp)
8111b5c4:	dec00204 	addi	sp,sp,8
8111b5c8:	f800283a 	ret

8111b5cc <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8111b5cc:	deffee04 	addi	sp,sp,-72
8111b5d0:	dfc01115 	stw	ra,68(sp)
8111b5d4:	df001015 	stw	fp,64(sp)
8111b5d8:	df001004 	addi	fp,sp,64
8111b5dc:	e13ff915 	stw	r4,-28(fp)
8111b5e0:	e17ffa15 	stw	r5,-24(fp)
8111b5e4:	e1bffb15 	stw	r6,-20(fp)
8111b5e8:	e1fffc15 	stw	r7,-16(fp)
8111b5ec:	e1000417 	ldw	r4,16(fp)
8111b5f0:	e0c00517 	ldw	r3,20(fp)
8111b5f4:	e0800617 	ldw	r2,24(fp)
8111b5f8:	e13ffd0d 	sth	r4,-12(fp)
8111b5fc:	e0fffe05 	stb	r3,-8(fp)
8111b600:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8111b604:	e0bffd0b 	ldhu	r2,-12(fp)
8111b608:	e0fffe03 	ldbu	r3,-8(fp)
8111b60c:	e13fff0b 	ldhu	r4,-4(fp)
8111b610:	d8000815 	stw	zero,32(sp)
8111b614:	d9000715 	stw	r4,28(sp)
8111b618:	d8000615 	stw	zero,24(sp)
8111b61c:	d8c00515 	stw	r3,20(sp)
8111b620:	d8800415 	stw	r2,16(sp)
8111b624:	e0800317 	ldw	r2,12(fp)
8111b628:	d8800315 	stw	r2,12(sp)
8111b62c:	e0800217 	ldw	r2,8(fp)
8111b630:	d8800215 	stw	r2,8(sp)
8111b634:	d8000115 	stw	zero,4(sp)
8111b638:	d8000015 	stw	zero,0(sp)
8111b63c:	e1fffc17 	ldw	r7,-16(fp)
8111b640:	e1bffb17 	ldw	r6,-20(fp)
8111b644:	e17ffa17 	ldw	r5,-24(fp)
8111b648:	e13ff917 	ldw	r4,-28(fp)
8111b64c:	111b2900 	call	8111b290 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
8111b650:	e037883a 	mov	sp,fp
8111b654:	dfc00117 	ldw	ra,4(sp)
8111b658:	df000017 	ldw	fp,0(sp)
8111b65c:	dec00204 	addi	sp,sp,8
8111b660:	f800283a 	ret

8111b664 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8111b664:	deffec04 	addi	sp,sp,-80
8111b668:	dfc01315 	stw	ra,76(sp)
8111b66c:	df001215 	stw	fp,72(sp)
8111b670:	df001204 	addi	fp,sp,72
8111b674:	e13ff715 	stw	r4,-36(fp)
8111b678:	e17ff815 	stw	r5,-32(fp)
8111b67c:	e1bff915 	stw	r6,-28(fp)
8111b680:	e1fffa15 	stw	r7,-24(fp)
8111b684:	e1800617 	ldw	r6,24(fp)
8111b688:	e1400717 	ldw	r5,28(fp)
8111b68c:	e1000817 	ldw	r4,32(fp)
8111b690:	e0c00917 	ldw	r3,36(fp)
8111b694:	e0800a17 	ldw	r2,40(fp)
8111b698:	e1bffb0d 	sth	r6,-20(fp)
8111b69c:	e17ffc05 	stb	r5,-16(fp)
8111b6a0:	e13ffd05 	stb	r4,-12(fp)
8111b6a4:	e0fffe0d 	sth	r3,-8(fp)
8111b6a8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8111b6ac:	e0bffb0b 	ldhu	r2,-20(fp)
8111b6b0:	e0fffc03 	ldbu	r3,-16(fp)
8111b6b4:	e13ffd03 	ldbu	r4,-12(fp)
8111b6b8:	e17ffe0b 	ldhu	r5,-8(fp)
8111b6bc:	e1bfff0b 	ldhu	r6,-4(fp)
8111b6c0:	d9800815 	stw	r6,32(sp)
8111b6c4:	d9400715 	stw	r5,28(sp)
8111b6c8:	d9000615 	stw	r4,24(sp)
8111b6cc:	d8c00515 	stw	r3,20(sp)
8111b6d0:	d8800415 	stw	r2,16(sp)
8111b6d4:	e0800517 	ldw	r2,20(fp)
8111b6d8:	d8800315 	stw	r2,12(sp)
8111b6dc:	e0800417 	ldw	r2,16(fp)
8111b6e0:	d8800215 	stw	r2,8(sp)
8111b6e4:	e0800317 	ldw	r2,12(fp)
8111b6e8:	d8800115 	stw	r2,4(sp)
8111b6ec:	e0800217 	ldw	r2,8(fp)
8111b6f0:	d8800015 	stw	r2,0(sp)
8111b6f4:	e1fffa17 	ldw	r7,-24(fp)
8111b6f8:	e1bff917 	ldw	r6,-28(fp)
8111b6fc:	e17ff817 	ldw	r5,-32(fp)
8111b700:	e13ff717 	ldw	r4,-36(fp)
8111b704:	111b2900 	call	8111b290 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8111b708:	e037883a 	mov	sp,fp
8111b70c:	dfc00117 	ldw	ra,4(sp)
8111b710:	df000017 	ldw	fp,0(sp)
8111b714:	dec00204 	addi	sp,sp,8
8111b718:	f800283a 	ret

8111b71c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8111b71c:	defffc04 	addi	sp,sp,-16
8111b720:	df000315 	stw	fp,12(sp)
8111b724:	df000304 	addi	fp,sp,12
8111b728:	e13ffe15 	stw	r4,-8(fp)
8111b72c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8111b730:	e0bfff17 	ldw	r2,-4(fp)
8111b734:	1000021e 	bne	r2,zero,8111b740 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8111b738:	00bffa84 	movi	r2,-22
8111b73c:	00002f06 	br	8111b7fc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8111b740:	e0bfff17 	ldw	r2,-4(fp)
8111b744:	10c00317 	ldw	r3,12(r2)
8111b748:	e0bfff17 	ldw	r2,-4(fp)
8111b74c:	18800226 	beq	r3,r2,8111b758 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8111b750:	00bffa84 	movi	r2,-22
8111b754:	00002906 	br	8111b7fc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
8111b758:	e0bffe17 	ldw	r2,-8(fp)
8111b75c:	10800017 	ldw	r2,0(r2)
8111b760:	1000051e 	bne	r2,zero,8111b778 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
8111b764:	e0bffe17 	ldw	r2,-8(fp)
8111b768:	e0ffff17 	ldw	r3,-4(fp)
8111b76c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
8111b770:	0005883a 	mov	r2,zero
8111b774:	00002106 	br	8111b7fc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
8111b778:	e0bffe17 	ldw	r2,-8(fp)
8111b77c:	10c00017 	ldw	r3,0(r2)
8111b780:	e0bfff17 	ldw	r2,-4(fp)
8111b784:	1880021e 	bne	r3,r2,8111b790 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8111b788:	00bffa84 	movi	r2,-22
8111b78c:	00001b06 	br	8111b7fc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8111b790:	e0bffe17 	ldw	r2,-8(fp)
8111b794:	10800017 	ldw	r2,0(r2)
8111b798:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8111b79c:	00000906 	br	8111b7c4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8111b7a0:	e0bffd17 	ldw	r2,-12(fp)
8111b7a4:	10c00317 	ldw	r3,12(r2)
8111b7a8:	e0bfff17 	ldw	r2,-4(fp)
8111b7ac:	1880021e 	bne	r3,r2,8111b7b8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8111b7b0:	00bffa84 	movi	r2,-22
8111b7b4:	00001106 	br	8111b7fc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8111b7b8:	e0bffd17 	ldw	r2,-12(fp)
8111b7bc:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
8111b7c0:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8111b7c4:	e0bffd17 	ldw	r2,-12(fp)
8111b7c8:	10800317 	ldw	r2,12(r2)
8111b7cc:	e0fffe17 	ldw	r3,-8(fp)
8111b7d0:	18c00017 	ldw	r3,0(r3)
8111b7d4:	10fff21e 	bne	r2,r3,8111b7a0 <__reset+0xfb0fb7a0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8111b7d8:	e0ffff17 	ldw	r3,-4(fp)
8111b7dc:	e0bffd17 	ldw	r2,-12(fp)
8111b7e0:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8111b7e4:	e0bffe17 	ldw	r2,-8(fp)
8111b7e8:	10800017 	ldw	r2,0(r2)
8111b7ec:	1007883a 	mov	r3,r2
8111b7f0:	e0bfff17 	ldw	r2,-4(fp)
8111b7f4:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8111b7f8:	0005883a 	mov	r2,zero
}
8111b7fc:	e037883a 	mov	sp,fp
8111b800:	df000017 	ldw	fp,0(sp)
8111b804:	dec00104 	addi	sp,sp,4
8111b808:	f800283a 	ret

8111b80c <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8111b80c:	defff804 	addi	sp,sp,-32
8111b810:	df000715 	stw	fp,28(sp)
8111b814:	df000704 	addi	fp,sp,28
8111b818:	e13ffe15 	stw	r4,-8(fp)
8111b81c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
8111b820:	e13fff17 	ldw	r4,-4(fp)
8111b824:	2000021e 	bne	r4,zero,8111b830 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8111b828:	00bffa84 	movi	r2,-22
8111b82c:	00005906 	br	8111b994 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
8111b830:	e13fff17 	ldw	r4,-4(fp)
8111b834:	2015883a 	mov	r10,r4
8111b838:	0017883a 	mov	r11,zero
8111b83c:	e2bffc15 	stw	r10,-16(fp)
8111b840:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8111b844:	e13fff17 	ldw	r4,-4(fp)
8111b848:	21400317 	ldw	r5,12(r4)
8111b84c:	e13ffc17 	ldw	r4,-16(fp)
8111b850:	29000626 	beq	r5,r4,8111b86c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8111b854:	e13fff17 	ldw	r4,-4(fp)
8111b858:	21400b17 	ldw	r5,44(r4)
8111b85c:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8111b860:	29000226 	beq	r5,r4,8111b86c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8111b864:	00bffa84 	movi	r2,-22
8111b868:	00004a06 	br	8111b994 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
8111b86c:	e13ffe17 	ldw	r4,-8(fp)
8111b870:	21000017 	ldw	r4,0(r4)
8111b874:	2000051e 	bne	r4,zero,8111b88c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
8111b878:	e0bffe17 	ldw	r2,-8(fp)
8111b87c:	e0ffff17 	ldw	r3,-4(fp)
8111b880:	10c00015 	stw	r3,0(r2)
		return 0;
8111b884:	0005883a 	mov	r2,zero
8111b888:	00004206 	br	8111b994 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
8111b88c:	e13ffe17 	ldw	r4,-8(fp)
8111b890:	21400017 	ldw	r5,0(r4)
8111b894:	e13fff17 	ldw	r4,-4(fp)
8111b898:	2900021e 	bne	r5,r4,8111b8a4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8111b89c:	00bffa84 	movi	r2,-22
8111b8a0:	00003c06 	br	8111b994 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8111b8a4:	e13ffe17 	ldw	r4,-8(fp)
8111b8a8:	21000017 	ldw	r4,0(r4)
8111b8ac:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
8111b8b0:	e13ffe17 	ldw	r4,-8(fp)
8111b8b4:	21000017 	ldw	r4,0(r4)
8111b8b8:	2011883a 	mov	r8,r4
8111b8bc:	0013883a 	mov	r9,zero
8111b8c0:	e23ffa15 	stw	r8,-24(fp)
8111b8c4:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111b8c8:	00001806 	br	8111b92c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
8111b8cc:	e13fff17 	ldw	r4,-4(fp)
8111b8d0:	200d883a 	mov	r6,r4
8111b8d4:	000f883a 	mov	r7,zero
8111b8d8:	e1bffc15 	stw	r6,-16(fp)
8111b8dc:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8111b8e0:	e13ff917 	ldw	r4,-28(fp)
8111b8e4:	21400317 	ldw	r5,12(r4)
8111b8e8:	e13ffc17 	ldw	r4,-16(fp)
8111b8ec:	2900061e 	bne	r5,r4,8111b908 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8111b8f0:	e13ff917 	ldw	r4,-28(fp)
8111b8f4:	21400b17 	ldw	r5,44(r4)
8111b8f8:	e13ffd17 	ldw	r4,-12(fp)
8111b8fc:	2900021e 	bne	r5,r4,8111b908 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8111b900:	00bffa84 	movi	r2,-22
8111b904:	00002306 	br	8111b994 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8111b908:	e13ff917 	ldw	r4,-28(fp)
8111b90c:	21000317 	ldw	r4,12(r4)
8111b910:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8111b914:	e13ff917 	ldw	r4,-28(fp)
8111b918:	21000b17 	ldw	r4,44(r4)
8111b91c:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8111b920:	e13ffc17 	ldw	r4,-16(fp)
8111b924:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8111b928:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111b92c:	e13ff917 	ldw	r4,-28(fp)
8111b930:	21400317 	ldw	r5,12(r4)
8111b934:	e13ffa17 	ldw	r4,-24(fp)
8111b938:	29000426 	beq	r5,r4,8111b94c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8111b93c:	e13ff917 	ldw	r4,-28(fp)
8111b940:	21400b17 	ldw	r5,44(r4)
8111b944:	e13ffb17 	ldw	r4,-20(fp)
8111b948:	293fe01e 	bne	r5,r4,8111b8cc <__reset+0xfb0fb8cc>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
8111b94c:	e13fff17 	ldw	r4,-4(fp)
8111b950:	2005883a 	mov	r2,r4
8111b954:	0007883a 	mov	r3,zero
8111b958:	e0bffc15 	stw	r2,-16(fp)
8111b95c:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8111b960:	e0fffc17 	ldw	r3,-16(fp)
8111b964:	e0bff917 	ldw	r2,-28(fp)
8111b968:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8111b96c:	e0fffd17 	ldw	r3,-12(fp)
8111b970:	e0bff917 	ldw	r2,-28(fp)
8111b974:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8111b978:	e0fffa17 	ldw	r3,-24(fp)
8111b97c:	e0bfff17 	ldw	r2,-4(fp)
8111b980:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8111b984:	e0fffb17 	ldw	r3,-20(fp)
8111b988:	e0bfff17 	ldw	r2,-4(fp)
8111b98c:	10c00b15 	stw	r3,44(r2)
	return 0;
8111b990:	0005883a 	mov	r2,zero
}
8111b994:	e037883a 	mov	sp,fp
8111b998:	df000017 	ldw	fp,0(sp)
8111b99c:	dec00104 	addi	sp,sp,4
8111b9a0:	f800283a 	ret

8111b9a4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8111b9a4:	defffc04 	addi	sp,sp,-16
8111b9a8:	df000315 	stw	fp,12(sp)
8111b9ac:	df000304 	addi	fp,sp,12
8111b9b0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8111b9b4:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8111b9b8:	e0bfff17 	ldw	r2,-4(fp)
8111b9bc:	1000021e 	bne	r2,zero,8111b9c8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
8111b9c0:	00bffa84 	movi	r2,-22
8111b9c4:	00001906 	br	8111ba2c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8111b9c8:	e0bfff17 	ldw	r2,-4(fp)
8111b9cc:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8111b9d0:	00000a06 	br	8111b9fc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8111b9d4:	e0bffd17 	ldw	r2,-12(fp)
8111b9d8:	10800717 	ldw	r2,28(r2)
8111b9dc:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111b9e0:	e0bffe17 	ldw	r2,-8(fp)
8111b9e4:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8111b9e8:	e0bffd17 	ldw	r2,-12(fp)
8111b9ec:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8111b9f0:	e0bffd17 	ldw	r2,-12(fp)
8111b9f4:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8111b9f8:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8111b9fc:	e0bffd17 	ldw	r2,-12(fp)
8111ba00:	10c00317 	ldw	r3,12(r2)
8111ba04:	e0bfff17 	ldw	r2,-4(fp)
8111ba08:	18bff21e 	bne	r3,r2,8111b9d4 <__reset+0xfb0fb9d4>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
8111ba0c:	e0bffd17 	ldw	r2,-12(fp)
8111ba10:	10800717 	ldw	r2,28(r2)
8111ba14:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111ba18:	e0bffe17 	ldw	r2,-8(fp)
8111ba1c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8111ba20:	e0bffd17 	ldw	r2,-12(fp)
8111ba24:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8111ba28:	0005883a 	mov	r2,zero
}
8111ba2c:	e037883a 	mov	sp,fp
8111ba30:	df000017 	ldw	fp,0(sp)
8111ba34:	dec00104 	addi	sp,sp,4
8111ba38:	f800283a 	ret

8111ba3c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
8111ba3c:	defff804 	addi	sp,sp,-32
8111ba40:	df000715 	stw	fp,28(sp)
8111ba44:	df000704 	addi	fp,sp,28
8111ba48:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8111ba4c:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
8111ba50:	e13fff17 	ldw	r4,-4(fp)
8111ba54:	2000021e 	bne	r4,zero,8111ba60 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
8111ba58:	00bffa84 	movi	r2,-22
8111ba5c:	00002806 	br	8111bb00 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8111ba60:	e13fff17 	ldw	r4,-4(fp)
8111ba64:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
8111ba68:	e13fff17 	ldw	r4,-4(fp)
8111ba6c:	2005883a 	mov	r2,r4
8111ba70:	0007883a 	mov	r3,zero
8111ba74:	e0bffb15 	stw	r2,-20(fp)
8111ba78:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111ba7c:	00001006 	br	8111bac0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
8111ba80:	e0bff917 	ldw	r2,-28(fp)
8111ba84:	10800f17 	ldw	r2,60(r2)
8111ba88:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111ba8c:	e0bffa17 	ldw	r2,-24(fp)
8111ba90:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8111ba94:	e0bff917 	ldw	r2,-28(fp)
8111ba98:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8111ba9c:	e0bff917 	ldw	r2,-28(fp)
8111baa0:	10800317 	ldw	r2,12(r2)
8111baa4:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8111baa8:	e0bff917 	ldw	r2,-28(fp)
8111baac:	10800b17 	ldw	r2,44(r2)
8111bab0:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8111bab4:	e0bffd17 	ldw	r2,-12(fp)
8111bab8:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8111babc:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111bac0:	e0bff917 	ldw	r2,-28(fp)
8111bac4:	10c00317 	ldw	r3,12(r2)
8111bac8:	e0bffb17 	ldw	r2,-20(fp)
8111bacc:	18800426 	beq	r3,r2,8111bae0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8111bad0:	e0bff917 	ldw	r2,-28(fp)
8111bad4:	10c00b17 	ldw	r3,44(r2)
8111bad8:	e0bffc17 	ldw	r2,-16(fp)
8111badc:	18bfe81e 	bne	r3,r2,8111ba80 <__reset+0xfb0fba80>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8111bae0:	e0bff917 	ldw	r2,-28(fp)
8111bae4:	10800f17 	ldw	r2,60(r2)
8111bae8:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111baec:	e0bffa17 	ldw	r2,-24(fp)
8111baf0:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8111baf4:	e0bff917 	ldw	r2,-28(fp)
8111baf8:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
8111bafc:	0005883a 	mov	r2,zero
}
8111bb00:	e037883a 	mov	sp,fp
8111bb04:	df000017 	ldw	fp,0(sp)
8111bb08:	dec00104 	addi	sp,sp,4
8111bb0c:	f800283a 	ret

8111bb10 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8111bb10:	deffef04 	addi	sp,sp,-68
8111bb14:	df001015 	stw	fp,64(sp)
8111bb18:	df001004 	addi	fp,sp,64
8111bb1c:	e13ffb15 	stw	r4,-20(fp)
8111bb20:	e17ffc15 	stw	r5,-16(fp)
8111bb24:	e1bffd15 	stw	r6,-12(fp)
8111bb28:	3807883a 	mov	r3,r7
8111bb2c:	e0800117 	ldw	r2,4(fp)
8111bb30:	e0fffe05 	stb	r3,-8(fp)
8111bb34:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
8111bb38:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
8111bb3c:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
8111bb40:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
8111bb44:	e0bffc17 	ldw	r2,-16(fp)
8111bb48:	e0bff915 	stw	r2,-28(fp)
8111bb4c:	e0bffd17 	ldw	r2,-12(fp)
8111bb50:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8111bb54:	e0bffb17 	ldw	r2,-20(fp)
8111bb58:	10800617 	ldw	r2,24(r2)
8111bb5c:	10800037 	ldwio	r2,0(r2)
8111bb60:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8111bb64:	e0bff017 	ldw	r2,-64(fp)
8111bb68:	1080004c 	andi	r2,r2,1
8111bb6c:	10000226 	beq	r2,zero,8111bb78 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
8111bb70:	00bffc04 	movi	r2,-16
8111bb74:	00009206 	br	8111bdc0 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8111bb78:	00800804 	movi	r2,32
8111bb7c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111bb80:	0005303a 	rdctl	r2,status
8111bb84:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111bb88:	e0fff517 	ldw	r3,-44(fp)
8111bb8c:	00bfff84 	movi	r2,-2
8111bb90:	1884703a 	and	r2,r3,r2
8111bb94:	1001703a 	wrctl	status,r2
  
  return context;
8111bb98:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8111bb9c:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8111bba0:	e0bffb17 	ldw	r2,-20(fp)
8111bba4:	10800317 	ldw	r2,12(r2)
8111bba8:	10800104 	addi	r2,r2,4
8111bbac:	e0fff117 	ldw	r3,-60(fp)
8111bbb0:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8111bbb4:	e0bffb17 	ldw	r2,-20(fp)
8111bbb8:	10800317 	ldw	r2,12(r2)
8111bbbc:	e0fffb17 	ldw	r3,-20(fp)
8111bbc0:	18c00317 	ldw	r3,12(r3)
8111bbc4:	18c00037 	ldwio	r3,0(r3)
8111bbc8:	10c00035 	stwio	r3,0(r2)
8111bbcc:	e0bff217 	ldw	r2,-56(fp)
8111bbd0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111bbd4:	e0bff317 	ldw	r2,-52(fp)
8111bbd8:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8111bbdc:	e0bffb17 	ldw	r2,-20(fp)
8111bbe0:	10800b17 	ldw	r2,44(r2)
8111bbe4:	10002326 	beq	r2,zero,8111bc74 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8111bbe8:	e0bffb17 	ldw	r2,-20(fp)
8111bbec:	10c00d17 	ldw	r3,52(r2)
8111bbf0:	e0bff117 	ldw	r2,-60(fp)
8111bbf4:	1884b03a 	or	r2,r3,r2
8111bbf8:	10800514 	ori	r2,r2,20
8111bbfc:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8111bc00:	e0fff117 	ldw	r3,-60(fp)
8111bc04:	00bff7c4 	movi	r2,-33
8111bc08:	1884703a 	and	r2,r3,r2
8111bc0c:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8111bc10:	e0bff017 	ldw	r2,-64(fp)
8111bc14:	10800214 	ori	r2,r2,8
8111bc18:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111bc1c:	0005303a 	rdctl	r2,status
8111bc20:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111bc24:	e0fff717 	ldw	r3,-36(fp)
8111bc28:	00bfff84 	movi	r2,-2
8111bc2c:	1884703a 	and	r2,r3,r2
8111bc30:	1001703a 	wrctl	status,r2
  
  return context;
8111bc34:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
8111bc38:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8111bc3c:	e0bffb17 	ldw	r2,-20(fp)
8111bc40:	10800317 	ldw	r2,12(r2)
8111bc44:	10800104 	addi	r2,r2,4
8111bc48:	e0fff117 	ldw	r3,-60(fp)
8111bc4c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8111bc50:	e0bffb17 	ldw	r2,-20(fp)
8111bc54:	10800617 	ldw	r2,24(r2)
8111bc58:	e0fff017 	ldw	r3,-64(fp)
8111bc5c:	10c00035 	stwio	r3,0(r2)
8111bc60:	e0bff217 	ldw	r2,-56(fp)
8111bc64:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111bc68:	e0bff417 	ldw	r2,-48(fp)
8111bc6c:	1001703a 	wrctl	status,r2
8111bc70:	00002306 	br	8111bd00 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8111bc74:	e0bffb17 	ldw	r2,-20(fp)
8111bc78:	10c00d17 	ldw	r3,52(r2)
8111bc7c:	e0bff117 	ldw	r2,-60(fp)
8111bc80:	1884b03a 	or	r2,r3,r2
8111bc84:	10800114 	ori	r2,r2,4
8111bc88:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8111bc8c:	e0fff117 	ldw	r3,-60(fp)
8111bc90:	00bff3c4 	movi	r2,-49
8111bc94:	1884703a 	and	r2,r3,r2
8111bc98:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8111bc9c:	e0fff017 	ldw	r3,-64(fp)
8111bca0:	00bffdc4 	movi	r2,-9
8111bca4:	1884703a 	and	r2,r3,r2
8111bca8:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111bcac:	0005303a 	rdctl	r2,status
8111bcb0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111bcb4:	e0fff817 	ldw	r3,-32(fp)
8111bcb8:	00bfff84 	movi	r2,-2
8111bcbc:	1884703a 	and	r2,r3,r2
8111bcc0:	1001703a 	wrctl	status,r2
  
  return context;
8111bcc4:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
8111bcc8:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8111bccc:	e0bffb17 	ldw	r2,-20(fp)
8111bcd0:	10800317 	ldw	r2,12(r2)
8111bcd4:	10800104 	addi	r2,r2,4
8111bcd8:	e0fff117 	ldw	r3,-60(fp)
8111bcdc:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8111bce0:	e0bffb17 	ldw	r2,-20(fp)
8111bce4:	10800617 	ldw	r2,24(r2)
8111bce8:	e0fff017 	ldw	r3,-64(fp)
8111bcec:	10c00035 	stwio	r3,0(r2)
8111bcf0:	e0bff217 	ldw	r2,-56(fp)
8111bcf4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111bcf8:	e0bff617 	ldw	r2,-40(fp)
8111bcfc:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8111bd00:	e0bffb17 	ldw	r2,-20(fp)
8111bd04:	10800617 	ldw	r2,24(r2)
8111bd08:	10800104 	addi	r2,r2,4
8111bd0c:	e0fff917 	ldw	r3,-28(fp)
8111bd10:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8111bd14:	e0bffb17 	ldw	r2,-20(fp)
8111bd18:	10800617 	ldw	r2,24(r2)
8111bd1c:	10800204 	addi	r2,r2,8
8111bd20:	e0fffa17 	ldw	r3,-24(fp)
8111bd24:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
8111bd28:	e0bffe03 	ldbu	r2,-8(fp)
8111bd2c:	10000426 	beq	r2,zero,8111bd40 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8111bd30:	e0bff017 	ldw	r2,-64(fp)
8111bd34:	10800414 	ori	r2,r2,16
8111bd38:	e0bff015 	stw	r2,-64(fp)
8111bd3c:	00000406 	br	8111bd50 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8111bd40:	e0fff017 	ldw	r3,-64(fp)
8111bd44:	00bffbc4 	movi	r2,-17
8111bd48:	1884703a 	and	r2,r3,r2
8111bd4c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8111bd50:	e0bfff03 	ldbu	r2,-4(fp)
8111bd54:	10000e26 	beq	r2,zero,8111bd90 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8111bd58:	e0bff017 	ldw	r2,-64(fp)
8111bd5c:	10800094 	ori	r2,r2,2
8111bd60:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8111bd64:	e0bffb17 	ldw	r2,-20(fp)
8111bd68:	10800617 	ldw	r2,24(r2)
8111bd6c:	10800304 	addi	r2,r2,12
8111bd70:	10800037 	ldwio	r2,0(r2)
8111bd74:	10000a1e 	bne	r2,zero,8111bda0 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8111bd78:	e0bffb17 	ldw	r2,-20(fp)
8111bd7c:	10800617 	ldw	r2,24(r2)
8111bd80:	10800304 	addi	r2,r2,12
8111bd84:	00c03fc4 	movi	r3,255
8111bd88:	10c00035 	stwio	r3,0(r2)
8111bd8c:	00000406 	br	8111bda0 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8111bd90:	e0fff017 	ldw	r3,-64(fp)
8111bd94:	00bfff44 	movi	r2,-3
8111bd98:	1884703a 	and	r2,r3,r2
8111bd9c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8111bda0:	e0bff017 	ldw	r2,-64(fp)
8111bda4:	10800054 	ori	r2,r2,1
8111bda8:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8111bdac:	e0bffb17 	ldw	r2,-20(fp)
8111bdb0:	10800617 	ldw	r2,24(r2)
8111bdb4:	e0fff017 	ldw	r3,-64(fp)
8111bdb8:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
8111bdbc:	0005883a 	mov	r2,zero
}
8111bdc0:	e037883a 	mov	sp,fp
8111bdc4:	df000017 	ldw	fp,0(sp)
8111bdc8:	dec00104 	addi	sp,sp,4
8111bdcc:	f800283a 	ret

8111bdd0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8111bdd0:	defff704 	addi	sp,sp,-36
8111bdd4:	dfc00815 	stw	ra,32(sp)
8111bdd8:	df000715 	stw	fp,28(sp)
8111bddc:	dc400615 	stw	r17,24(sp)
8111bde0:	dc000515 	stw	r16,20(sp)
8111bde4:	df000704 	addi	fp,sp,28
8111bde8:	e13ffa15 	stw	r4,-24(fp)
8111bdec:	e17ffb15 	stw	r5,-20(fp)
8111bdf0:	3007883a 	mov	r3,r6
8111bdf4:	3805883a 	mov	r2,r7
8111bdf8:	e0fffc05 	stb	r3,-16(fp)
8111bdfc:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
8111be00:	e13ffb17 	ldw	r4,-20(fp)
8111be04:	111b9a40 	call	8111b9a4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8111be08:	10000226 	beq	r2,zero,8111be14 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
8111be0c:	00bffa84 	movi	r2,-22
8111be10:	00000b06 	br	8111be40 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8111be14:	e0bffb17 	ldw	r2,-20(fp)
8111be18:	1021883a 	mov	r16,r2
8111be1c:	0023883a 	mov	r17,zero
8111be20:	e0fffc03 	ldbu	r3,-16(fp)
8111be24:	e0bffd03 	ldbu	r2,-12(fp)
8111be28:	d8800015 	stw	r2,0(sp)
8111be2c:	180f883a 	mov	r7,r3
8111be30:	800b883a 	mov	r5,r16
8111be34:	880d883a 	mov	r6,r17
8111be38:	e13ffa17 	ldw	r4,-24(fp)
8111be3c:	111bb100 	call	8111bb10 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8111be40:	e6fffe04 	addi	sp,fp,-8
8111be44:	dfc00317 	ldw	ra,12(sp)
8111be48:	df000217 	ldw	fp,8(sp)
8111be4c:	dc400117 	ldw	r17,4(sp)
8111be50:	dc000017 	ldw	r16,0(sp)
8111be54:	dec00404 	addi	sp,sp,16
8111be58:	f800283a 	ret

8111be5c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8111be5c:	defff704 	addi	sp,sp,-36
8111be60:	dfc00815 	stw	ra,32(sp)
8111be64:	df000715 	stw	fp,28(sp)
8111be68:	dc400615 	stw	r17,24(sp)
8111be6c:	dc000515 	stw	r16,20(sp)
8111be70:	df000704 	addi	fp,sp,28
8111be74:	e13ffa15 	stw	r4,-24(fp)
8111be78:	e17ffb15 	stw	r5,-20(fp)
8111be7c:	3007883a 	mov	r3,r6
8111be80:	3805883a 	mov	r2,r7
8111be84:	e0fffc05 	stb	r3,-16(fp)
8111be88:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
8111be8c:	e13ffb17 	ldw	r4,-20(fp)
8111be90:	111ba3c0 	call	8111ba3c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8111be94:	10000226 	beq	r2,zero,8111bea0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
8111be98:	00bffa84 	movi	r2,-22
8111be9c:	00000b06 	br	8111becc <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8111bea0:	e0bffb17 	ldw	r2,-20(fp)
8111bea4:	1021883a 	mov	r16,r2
8111bea8:	0023883a 	mov	r17,zero
8111beac:	e0fffc03 	ldbu	r3,-16(fp)
8111beb0:	e0bffd03 	ldbu	r2,-12(fp)
8111beb4:	d8800015 	stw	r2,0(sp)
8111beb8:	180f883a 	mov	r7,r3
8111bebc:	800b883a 	mov	r5,r16
8111bec0:	880d883a 	mov	r6,r17
8111bec4:	e13ffa17 	ldw	r4,-24(fp)
8111bec8:	111bb100 	call	8111bb10 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8111becc:	e6fffe04 	addi	sp,fp,-8
8111bed0:	dfc00317 	ldw	ra,12(sp)
8111bed4:	df000217 	ldw	fp,8(sp)
8111bed8:	dc400117 	ldw	r17,4(sp)
8111bedc:	dc000017 	ldw	r16,0(sp)
8111bee0:	dec00404 	addi	sp,sp,16
8111bee4:	f800283a 	ret

8111bee8 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8111bee8:	defffc04 	addi	sp,sp,-16
8111beec:	dfc00315 	stw	ra,12(sp)
8111bef0:	df000215 	stw	fp,8(sp)
8111bef4:	df000204 	addi	fp,sp,8
8111bef8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8111befc:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8111bf00:	d1601804 	addi	r5,gp,-32672
8111bf04:	e13fff17 	ldw	r4,-4(fp)
8111bf08:	111c4bc0 	call	8111c4bc <alt_find_dev>
8111bf0c:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8111bf10:	e0bffe17 	ldw	r2,-8(fp)
8111bf14:	1000041e 	bne	r2,zero,8111bf28 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
8111bf18:	111a3740 	call	8111a374 <alt_get_errno>
8111bf1c:	1007883a 	mov	r3,r2
8111bf20:	008004c4 	movi	r2,19
8111bf24:	18800015 	stw	r2,0(r3)
    }

    return dev;
8111bf28:	e0bffe17 	ldw	r2,-8(fp)
}
8111bf2c:	e037883a 	mov	sp,fp
8111bf30:	dfc00117 	ldw	ra,4(sp)
8111bf34:	df000017 	ldw	fp,0(sp)
8111bf38:	dec00204 	addi	sp,sp,8
8111bf3c:	f800283a 	ret

8111bf40 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8111bf40:	defff804 	addi	sp,sp,-32
8111bf44:	dfc00715 	stw	ra,28(sp)
8111bf48:	df000615 	stw	fp,24(sp)
8111bf4c:	df000604 	addi	fp,sp,24
8111bf50:	e13ffd15 	stw	r4,-12(fp)
8111bf54:	e17ffe15 	stw	r5,-8(fp)
8111bf58:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8111bf5c:	e0bffd17 	ldw	r2,-12(fp)
8111bf60:	10801783 	ldbu	r2,94(r2)
8111bf64:	10803fcc 	andi	r2,r2,255
8111bf68:	10000b26 	beq	r2,zero,8111bf98 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8111bf6c:	e0bffd17 	ldw	r2,-12(fp)
8111bf70:	10800617 	ldw	r2,24(r2)
8111bf74:	00c00104 	movi	r3,4
8111bf78:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8111bf7c:	0001883a 	nop
8111bf80:	e0bffd17 	ldw	r2,-12(fp)
8111bf84:	10800617 	ldw	r2,24(r2)
8111bf88:	10800037 	ldwio	r2,0(r2)
8111bf8c:	1080010c 	andi	r2,r2,4
8111bf90:	1005d0ba 	srai	r2,r2,2
8111bf94:	103ffa1e 	bne	r2,zero,8111bf80 <__reset+0xfb0fbf80>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8111bf98:	e0bffd17 	ldw	r2,-12(fp)
8111bf9c:	10800317 	ldw	r2,12(r2)
8111bfa0:	10800104 	addi	r2,r2,4
8111bfa4:	00c00084 	movi	r3,2
8111bfa8:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8111bfac:	0001883a 	nop
8111bfb0:	e0bffd17 	ldw	r2,-12(fp)
8111bfb4:	10800317 	ldw	r2,12(r2)
8111bfb8:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8111bfbc:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8111bfc0:	103ffb1e 	bne	r2,zero,8111bfb0 <__reset+0xfb0fbfb0>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8111bfc4:	e0bffd17 	ldw	r2,-12(fp)
8111bfc8:	10800317 	ldw	r2,12(r2)
8111bfcc:	10800104 	addi	r2,r2,4
8111bfd0:	10800037 	ldwio	r2,0(r2)
8111bfd4:	1007883a 	mov	r3,r2
8111bfd8:	00bffbc4 	movi	r2,-17
8111bfdc:	1884703a 	and	r2,r3,r2
8111bfe0:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8111bfe4:	e0bffb17 	ldw	r2,-20(fp)
8111bfe8:	10800814 	ori	r2,r2,32
8111bfec:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8111bff0:	e0bffd17 	ldw	r2,-12(fp)
8111bff4:	10800317 	ldw	r2,12(r2)
8111bff8:	10800104 	addi	r2,r2,4
8111bffc:	e0fffb17 	ldw	r3,-20(fp)
8111c000:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8111c004:	e0bffd17 	ldw	r2,-12(fp)
8111c008:	10800317 	ldw	r2,12(r2)
8111c00c:	e0fffd17 	ldw	r3,-12(fp)
8111c010:	18c00317 	ldw	r3,12(r3)
8111c014:	18c00037 	ldwio	r3,0(r3)
8111c018:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8111c01c:	e0bffd17 	ldw	r2,-12(fp)
8111c020:	10801783 	ldbu	r2,94(r2)
8111c024:	10803fcc 	andi	r2,r2,255
8111c028:	10000826 	beq	r2,zero,8111c04c <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8111c02c:	e0bffd17 	ldw	r2,-12(fp)
8111c030:	10800617 	ldw	r2,24(r2)
8111c034:	10800404 	addi	r2,r2,16
8111c038:	e0fffd17 	ldw	r3,-12(fp)
8111c03c:	18c00617 	ldw	r3,24(r3)
8111c040:	18c00404 	addi	r3,r3,16
8111c044:	18c00037 	ldwio	r3,0(r3)
8111c048:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8111c04c:	d1601804 	addi	r5,gp,-32672
8111c050:	e13ffd17 	ldw	r4,-12(fp)
8111c054:	111c3580 	call	8111c358 <alt_dev_llist_insert>
8111c058:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8111c05c:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
8111c060:	e0bffc17 	ldw	r2,-16(fp)
8111c064:	1000081e 	bne	r2,zero,8111c088 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8111c068:	d8000015 	stw	zero,0(sp)
8111c06c:	e1fffd17 	ldw	r7,-12(fp)
8111c070:	01a044b4 	movhi	r6,33042
8111c074:	31a95c04 	addi	r6,r6,-23184
8111c078:	e17fff17 	ldw	r5,-4(fp)
8111c07c:	e13ffe17 	ldw	r4,-8(fp)
8111c080:	111c54c0 	call	8111c54c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8111c084:	00000406 	br	8111c098 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8111c088:	012044b4 	movhi	r4,33042
8111c08c:	213a6904 	addi	r4,r4,-5724
8111c090:	11186300 	call	81118630 <alt_printf>
    }
    
    return;
8111c094:	0001883a 	nop

}
8111c098:	e037883a 	mov	sp,fp
8111c09c:	dfc00117 	ldw	ra,4(sp)
8111c0a0:	df000017 	ldw	fp,0(sp)
8111c0a4:	dec00204 	addi	sp,sp,8
8111c0a8:	f800283a 	ret

8111c0ac <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
8111c0ac:	defffb04 	addi	sp,sp,-20
8111c0b0:	df000415 	stw	fp,16(sp)
8111c0b4:	df000404 	addi	fp,sp,16
8111c0b8:	e13ffc15 	stw	r4,-16(fp)
8111c0bc:	e17ffd15 	stw	r5,-12(fp)
8111c0c0:	e1bffe15 	stw	r6,-8(fp)
8111c0c4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8111c0c8:	e0bffc17 	ldw	r2,-16(fp)
8111c0cc:	e0fffd17 	ldw	r3,-12(fp)
8111c0d0:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8111c0d4:	e0bffc17 	ldw	r2,-16(fp)
8111c0d8:	e0ffff17 	ldw	r3,-4(fp)
8111c0dc:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8111c0e0:	e0bffc17 	ldw	r2,-16(fp)
8111c0e4:	e0fffe17 	ldw	r3,-8(fp)
8111c0e8:	10c00d15 	stw	r3,52(r2)

    return ;
8111c0ec:	0001883a 	nop
}
8111c0f0:	e037883a 	mov	sp,fp
8111c0f4:	df000017 	ldw	fp,0(sp)
8111c0f8:	dec00104 	addi	sp,sp,4
8111c0fc:	f800283a 	ret

8111c100 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8111c100:	defffc04 	addi	sp,sp,-16
8111c104:	dfc00315 	stw	ra,12(sp)
8111c108:	df000215 	stw	fp,8(sp)
8111c10c:	df000204 	addi	fp,sp,8
8111c110:	e13ffe15 	stw	r4,-8(fp)
8111c114:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8111c118:	000d883a 	mov	r6,zero
8111c11c:	e17fff17 	ldw	r5,-4(fp)
8111c120:	e13ffe17 	ldw	r4,-8(fp)
8111c124:	111a8d40 	call	8111a8d4 <alt_msgdma_descriptor_async_transfer>

}
8111c128:	e037883a 	mov	sp,fp
8111c12c:	dfc00117 	ldw	ra,4(sp)
8111c130:	df000017 	ldw	fp,0(sp)
8111c134:	dec00204 	addi	sp,sp,8
8111c138:	f800283a 	ret

8111c13c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8111c13c:	defffc04 	addi	sp,sp,-16
8111c140:	dfc00315 	stw	ra,12(sp)
8111c144:	df000215 	stw	fp,8(sp)
8111c148:	df000204 	addi	fp,sp,8
8111c14c:	e13ffe15 	stw	r4,-8(fp)
8111c150:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8111c154:	e1bfff17 	ldw	r6,-4(fp)
8111c158:	000b883a 	mov	r5,zero
8111c15c:	e13ffe17 	ldw	r4,-8(fp)
8111c160:	111a8d40 	call	8111a8d4 <alt_msgdma_descriptor_async_transfer>
}
8111c164:	e037883a 	mov	sp,fp
8111c168:	dfc00117 	ldw	ra,4(sp)
8111c16c:	df000017 	ldw	fp,0(sp)
8111c170:	dec00204 	addi	sp,sp,8
8111c174:	f800283a 	ret

8111c178 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8111c178:	defffc04 	addi	sp,sp,-16
8111c17c:	dfc00315 	stw	ra,12(sp)
8111c180:	df000215 	stw	fp,8(sp)
8111c184:	df000204 	addi	fp,sp,8
8111c188:	e13ffe15 	stw	r4,-8(fp)
8111c18c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8111c190:	000d883a 	mov	r6,zero
8111c194:	e17fff17 	ldw	r5,-4(fp)
8111c198:	e13ffe17 	ldw	r4,-8(fp)
8111c19c:	111aba40 	call	8111aba4 <alt_msgdma_descriptor_sync_transfer>
}
8111c1a0:	e037883a 	mov	sp,fp
8111c1a4:	dfc00117 	ldw	ra,4(sp)
8111c1a8:	df000017 	ldw	fp,0(sp)
8111c1ac:	dec00204 	addi	sp,sp,8
8111c1b0:	f800283a 	ret

8111c1b4 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8111c1b4:	defffc04 	addi	sp,sp,-16
8111c1b8:	dfc00315 	stw	ra,12(sp)
8111c1bc:	df000215 	stw	fp,8(sp)
8111c1c0:	df000204 	addi	fp,sp,8
8111c1c4:	e13ffe15 	stw	r4,-8(fp)
8111c1c8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8111c1cc:	e1bfff17 	ldw	r6,-4(fp)
8111c1d0:	000b883a 	mov	r5,zero
8111c1d4:	e13ffe17 	ldw	r4,-8(fp)
8111c1d8:	111aba40 	call	8111aba4 <alt_msgdma_descriptor_sync_transfer>
}
8111c1dc:	e037883a 	mov	sp,fp
8111c1e0:	dfc00117 	ldw	ra,4(sp)
8111c1e4:	df000017 	ldw	fp,0(sp)
8111c1e8:	dec00204 	addi	sp,sp,8
8111c1ec:	f800283a 	ret

8111c1f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8111c1f0:	defff504 	addi	sp,sp,-44
8111c1f4:	df000a15 	stw	fp,40(sp)
8111c1f8:	df000a04 	addi	fp,sp,40
8111c1fc:	e13ffc15 	stw	r4,-16(fp)
8111c200:	e17ffd15 	stw	r5,-12(fp)
8111c204:	e1bffe15 	stw	r6,-8(fp)
8111c208:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8111c20c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8111c210:	d0a04817 	ldw	r2,-32480(gp)
  
  if (alt_ticks_per_second ())
8111c214:	10003c26 	beq	r2,zero,8111c308 <alt_alarm_start+0x118>
  {
    if (alarm)
8111c218:	e0bffc17 	ldw	r2,-16(fp)
8111c21c:	10003826 	beq	r2,zero,8111c300 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
8111c220:	e0bffc17 	ldw	r2,-16(fp)
8111c224:	e0fffe17 	ldw	r3,-8(fp)
8111c228:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8111c22c:	e0bffc17 	ldw	r2,-16(fp)
8111c230:	e0ffff17 	ldw	r3,-4(fp)
8111c234:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c238:	0005303a 	rdctl	r2,status
8111c23c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c240:	e0fff917 	ldw	r3,-28(fp)
8111c244:	00bfff84 	movi	r2,-2
8111c248:	1884703a 	and	r2,r3,r2
8111c24c:	1001703a 	wrctl	status,r2
  
  return context;
8111c250:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8111c254:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8111c258:	d0a04917 	ldw	r2,-32476(gp)
      
      current_nticks = alt_nticks();
8111c25c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8111c260:	e0fffd17 	ldw	r3,-12(fp)
8111c264:	e0bff617 	ldw	r2,-40(fp)
8111c268:	1885883a 	add	r2,r3,r2
8111c26c:	10c00044 	addi	r3,r2,1
8111c270:	e0bffc17 	ldw	r2,-16(fp)
8111c274:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8111c278:	e0bffc17 	ldw	r2,-16(fp)
8111c27c:	10c00217 	ldw	r3,8(r2)
8111c280:	e0bff617 	ldw	r2,-40(fp)
8111c284:	1880042e 	bgeu	r3,r2,8111c298 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
8111c288:	e0bffc17 	ldw	r2,-16(fp)
8111c28c:	00c00044 	movi	r3,1
8111c290:	10c00405 	stb	r3,16(r2)
8111c294:	00000206 	br	8111c2a0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8111c298:	e0bffc17 	ldw	r2,-16(fp)
8111c29c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8111c2a0:	e0bffc17 	ldw	r2,-16(fp)
8111c2a4:	d0e01604 	addi	r3,gp,-32680
8111c2a8:	e0fffa15 	stw	r3,-24(fp)
8111c2ac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8111c2b0:	e0bffb17 	ldw	r2,-20(fp)
8111c2b4:	e0fffa17 	ldw	r3,-24(fp)
8111c2b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8111c2bc:	e0bffa17 	ldw	r2,-24(fp)
8111c2c0:	10c00017 	ldw	r3,0(r2)
8111c2c4:	e0bffb17 	ldw	r2,-20(fp)
8111c2c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8111c2cc:	e0bffa17 	ldw	r2,-24(fp)
8111c2d0:	10800017 	ldw	r2,0(r2)
8111c2d4:	e0fffb17 	ldw	r3,-20(fp)
8111c2d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8111c2dc:	e0bffa17 	ldw	r2,-24(fp)
8111c2e0:	e0fffb17 	ldw	r3,-20(fp)
8111c2e4:	10c00015 	stw	r3,0(r2)
8111c2e8:	e0bff817 	ldw	r2,-32(fp)
8111c2ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c2f0:	e0bff717 	ldw	r2,-36(fp)
8111c2f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8111c2f8:	0005883a 	mov	r2,zero
8111c2fc:	00000306 	br	8111c30c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
8111c300:	00bffa84 	movi	r2,-22
8111c304:	00000106 	br	8111c30c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
8111c308:	00bfde84 	movi	r2,-134
  }
}
8111c30c:	e037883a 	mov	sp,fp
8111c310:	df000017 	ldw	fp,0(sp)
8111c314:	dec00104 	addi	sp,sp,4
8111c318:	f800283a 	ret

8111c31c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111c31c:	defffe04 	addi	sp,sp,-8
8111c320:	dfc00115 	stw	ra,4(sp)
8111c324:	df000015 	stw	fp,0(sp)
8111c328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111c32c:	d0a01317 	ldw	r2,-32692(gp)
8111c330:	10000326 	beq	r2,zero,8111c340 <alt_get_errno+0x24>
8111c334:	d0a01317 	ldw	r2,-32692(gp)
8111c338:	103ee83a 	callr	r2
8111c33c:	00000106 	br	8111c344 <alt_get_errno+0x28>
8111c340:	d0a04304 	addi	r2,gp,-32500
}
8111c344:	e037883a 	mov	sp,fp
8111c348:	dfc00117 	ldw	ra,4(sp)
8111c34c:	df000017 	ldw	fp,0(sp)
8111c350:	dec00204 	addi	sp,sp,8
8111c354:	f800283a 	ret

8111c358 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8111c358:	defffa04 	addi	sp,sp,-24
8111c35c:	dfc00515 	stw	ra,20(sp)
8111c360:	df000415 	stw	fp,16(sp)
8111c364:	df000404 	addi	fp,sp,16
8111c368:	e13ffe15 	stw	r4,-8(fp)
8111c36c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8111c370:	e0bffe17 	ldw	r2,-8(fp)
8111c374:	10000326 	beq	r2,zero,8111c384 <alt_dev_llist_insert+0x2c>
8111c378:	e0bffe17 	ldw	r2,-8(fp)
8111c37c:	10800217 	ldw	r2,8(r2)
8111c380:	1000061e 	bne	r2,zero,8111c39c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
8111c384:	111c31c0 	call	8111c31c <alt_get_errno>
8111c388:	1007883a 	mov	r3,r2
8111c38c:	00800584 	movi	r2,22
8111c390:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8111c394:	00bffa84 	movi	r2,-22
8111c398:	00001306 	br	8111c3e8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8111c39c:	e0bffe17 	ldw	r2,-8(fp)
8111c3a0:	e0ffff17 	ldw	r3,-4(fp)
8111c3a4:	e0fffc15 	stw	r3,-16(fp)
8111c3a8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8111c3ac:	e0bffd17 	ldw	r2,-12(fp)
8111c3b0:	e0fffc17 	ldw	r3,-16(fp)
8111c3b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8111c3b8:	e0bffc17 	ldw	r2,-16(fp)
8111c3bc:	10c00017 	ldw	r3,0(r2)
8111c3c0:	e0bffd17 	ldw	r2,-12(fp)
8111c3c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8111c3c8:	e0bffc17 	ldw	r2,-16(fp)
8111c3cc:	10800017 	ldw	r2,0(r2)
8111c3d0:	e0fffd17 	ldw	r3,-12(fp)
8111c3d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8111c3d8:	e0bffc17 	ldw	r2,-16(fp)
8111c3dc:	e0fffd17 	ldw	r3,-12(fp)
8111c3e0:	10c00015 	stw	r3,0(r2)

  return 0;  
8111c3e4:	0005883a 	mov	r2,zero
}
8111c3e8:	e037883a 	mov	sp,fp
8111c3ec:	dfc00117 	ldw	ra,4(sp)
8111c3f0:	df000017 	ldw	fp,0(sp)
8111c3f4:	dec00204 	addi	sp,sp,8
8111c3f8:	f800283a 	ret

8111c3fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8111c3fc:	defffd04 	addi	sp,sp,-12
8111c400:	dfc00215 	stw	ra,8(sp)
8111c404:	df000115 	stw	fp,4(sp)
8111c408:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8111c40c:	00a044b4 	movhi	r2,33042
8111c410:	10b45f04 	addi	r2,r2,-11908
8111c414:	e0bfff15 	stw	r2,-4(fp)
8111c418:	00000606 	br	8111c434 <_do_ctors+0x38>
        (*ctor) (); 
8111c41c:	e0bfff17 	ldw	r2,-4(fp)
8111c420:	10800017 	ldw	r2,0(r2)
8111c424:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8111c428:	e0bfff17 	ldw	r2,-4(fp)
8111c42c:	10bfff04 	addi	r2,r2,-4
8111c430:	e0bfff15 	stw	r2,-4(fp)
8111c434:	e0ffff17 	ldw	r3,-4(fp)
8111c438:	00a044b4 	movhi	r2,33042
8111c43c:	10b46004 	addi	r2,r2,-11904
8111c440:	18bff62e 	bgeu	r3,r2,8111c41c <__reset+0xfb0fc41c>
        (*ctor) (); 
}
8111c444:	0001883a 	nop
8111c448:	e037883a 	mov	sp,fp
8111c44c:	dfc00117 	ldw	ra,4(sp)
8111c450:	df000017 	ldw	fp,0(sp)
8111c454:	dec00204 	addi	sp,sp,8
8111c458:	f800283a 	ret

8111c45c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8111c45c:	defffd04 	addi	sp,sp,-12
8111c460:	dfc00215 	stw	ra,8(sp)
8111c464:	df000115 	stw	fp,4(sp)
8111c468:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8111c46c:	00a044b4 	movhi	r2,33042
8111c470:	10b45f04 	addi	r2,r2,-11908
8111c474:	e0bfff15 	stw	r2,-4(fp)
8111c478:	00000606 	br	8111c494 <_do_dtors+0x38>
        (*dtor) (); 
8111c47c:	e0bfff17 	ldw	r2,-4(fp)
8111c480:	10800017 	ldw	r2,0(r2)
8111c484:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8111c488:	e0bfff17 	ldw	r2,-4(fp)
8111c48c:	10bfff04 	addi	r2,r2,-4
8111c490:	e0bfff15 	stw	r2,-4(fp)
8111c494:	e0ffff17 	ldw	r3,-4(fp)
8111c498:	00a044b4 	movhi	r2,33042
8111c49c:	10b46004 	addi	r2,r2,-11904
8111c4a0:	18bff62e 	bgeu	r3,r2,8111c47c <__reset+0xfb0fc47c>
        (*dtor) (); 
}
8111c4a4:	0001883a 	nop
8111c4a8:	e037883a 	mov	sp,fp
8111c4ac:	dfc00117 	ldw	ra,4(sp)
8111c4b0:	df000017 	ldw	fp,0(sp)
8111c4b4:	dec00204 	addi	sp,sp,8
8111c4b8:	f800283a 	ret

8111c4bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8111c4bc:	defffa04 	addi	sp,sp,-24
8111c4c0:	dfc00515 	stw	ra,20(sp)
8111c4c4:	df000415 	stw	fp,16(sp)
8111c4c8:	df000404 	addi	fp,sp,16
8111c4cc:	e13ffe15 	stw	r4,-8(fp)
8111c4d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8111c4d4:	e0bfff17 	ldw	r2,-4(fp)
8111c4d8:	10800017 	ldw	r2,0(r2)
8111c4dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8111c4e0:	e13ffe17 	ldw	r4,-8(fp)
8111c4e4:	110bc1c0 	call	8110bc1c <strlen>
8111c4e8:	10800044 	addi	r2,r2,1
8111c4ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8111c4f0:	00000d06 	br	8111c528 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8111c4f4:	e0bffc17 	ldw	r2,-16(fp)
8111c4f8:	10800217 	ldw	r2,8(r2)
8111c4fc:	e0fffd17 	ldw	r3,-12(fp)
8111c500:	180d883a 	mov	r6,r3
8111c504:	e17ffe17 	ldw	r5,-8(fp)
8111c508:	1009883a 	mov	r4,r2
8111c50c:	111ce380 	call	8111ce38 <memcmp>
8111c510:	1000021e 	bne	r2,zero,8111c51c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
8111c514:	e0bffc17 	ldw	r2,-16(fp)
8111c518:	00000706 	br	8111c538 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
8111c51c:	e0bffc17 	ldw	r2,-16(fp)
8111c520:	10800017 	ldw	r2,0(r2)
8111c524:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8111c528:	e0fffc17 	ldw	r3,-16(fp)
8111c52c:	e0bfff17 	ldw	r2,-4(fp)
8111c530:	18bff01e 	bne	r3,r2,8111c4f4 <__reset+0xfb0fc4f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8111c534:	0005883a 	mov	r2,zero
}
8111c538:	e037883a 	mov	sp,fp
8111c53c:	dfc00117 	ldw	ra,4(sp)
8111c540:	df000017 	ldw	fp,0(sp)
8111c544:	dec00204 	addi	sp,sp,8
8111c548:	f800283a 	ret

8111c54c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8111c54c:	defff904 	addi	sp,sp,-28
8111c550:	dfc00615 	stw	ra,24(sp)
8111c554:	df000515 	stw	fp,20(sp)
8111c558:	df000504 	addi	fp,sp,20
8111c55c:	e13ffc15 	stw	r4,-16(fp)
8111c560:	e17ffd15 	stw	r5,-12(fp)
8111c564:	e1bffe15 	stw	r6,-8(fp)
8111c568:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8111c56c:	e0800217 	ldw	r2,8(fp)
8111c570:	d8800015 	stw	r2,0(sp)
8111c574:	e1ffff17 	ldw	r7,-4(fp)
8111c578:	e1bffe17 	ldw	r6,-8(fp)
8111c57c:	e17ffd17 	ldw	r5,-12(fp)
8111c580:	e13ffc17 	ldw	r4,-16(fp)
8111c584:	111c6fc0 	call	8111c6fc <alt_iic_isr_register>
}  
8111c588:	e037883a 	mov	sp,fp
8111c58c:	dfc00117 	ldw	ra,4(sp)
8111c590:	df000017 	ldw	fp,0(sp)
8111c594:	dec00204 	addi	sp,sp,8
8111c598:	f800283a 	ret

8111c59c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8111c59c:	defff904 	addi	sp,sp,-28
8111c5a0:	df000615 	stw	fp,24(sp)
8111c5a4:	df000604 	addi	fp,sp,24
8111c5a8:	e13ffe15 	stw	r4,-8(fp)
8111c5ac:	e17fff15 	stw	r5,-4(fp)
8111c5b0:	e0bfff17 	ldw	r2,-4(fp)
8111c5b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c5b8:	0005303a 	rdctl	r2,status
8111c5bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c5c0:	e0fffb17 	ldw	r3,-20(fp)
8111c5c4:	00bfff84 	movi	r2,-2
8111c5c8:	1884703a 	and	r2,r3,r2
8111c5cc:	1001703a 	wrctl	status,r2
  
  return context;
8111c5d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8111c5d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8111c5d8:	00c00044 	movi	r3,1
8111c5dc:	e0bffa17 	ldw	r2,-24(fp)
8111c5e0:	1884983a 	sll	r2,r3,r2
8111c5e4:	1007883a 	mov	r3,r2
8111c5e8:	d0a04417 	ldw	r2,-32496(gp)
8111c5ec:	1884b03a 	or	r2,r3,r2
8111c5f0:	d0a04415 	stw	r2,-32496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8111c5f4:	d0a04417 	ldw	r2,-32496(gp)
8111c5f8:	100170fa 	wrctl	ienable,r2
8111c5fc:	e0bffc17 	ldw	r2,-16(fp)
8111c600:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c604:	e0bffd17 	ldw	r2,-12(fp)
8111c608:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8111c60c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8111c610:	0001883a 	nop
}
8111c614:	e037883a 	mov	sp,fp
8111c618:	df000017 	ldw	fp,0(sp)
8111c61c:	dec00104 	addi	sp,sp,4
8111c620:	f800283a 	ret

8111c624 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8111c624:	defff904 	addi	sp,sp,-28
8111c628:	df000615 	stw	fp,24(sp)
8111c62c:	df000604 	addi	fp,sp,24
8111c630:	e13ffe15 	stw	r4,-8(fp)
8111c634:	e17fff15 	stw	r5,-4(fp)
8111c638:	e0bfff17 	ldw	r2,-4(fp)
8111c63c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c640:	0005303a 	rdctl	r2,status
8111c644:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c648:	e0fffb17 	ldw	r3,-20(fp)
8111c64c:	00bfff84 	movi	r2,-2
8111c650:	1884703a 	and	r2,r3,r2
8111c654:	1001703a 	wrctl	status,r2
  
  return context;
8111c658:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8111c65c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8111c660:	00c00044 	movi	r3,1
8111c664:	e0bffa17 	ldw	r2,-24(fp)
8111c668:	1884983a 	sll	r2,r3,r2
8111c66c:	0084303a 	nor	r2,zero,r2
8111c670:	1007883a 	mov	r3,r2
8111c674:	d0a04417 	ldw	r2,-32496(gp)
8111c678:	1884703a 	and	r2,r3,r2
8111c67c:	d0a04415 	stw	r2,-32496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8111c680:	d0a04417 	ldw	r2,-32496(gp)
8111c684:	100170fa 	wrctl	ienable,r2
8111c688:	e0bffc17 	ldw	r2,-16(fp)
8111c68c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c690:	e0bffd17 	ldw	r2,-12(fp)
8111c694:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8111c698:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8111c69c:	0001883a 	nop
}
8111c6a0:	e037883a 	mov	sp,fp
8111c6a4:	df000017 	ldw	fp,0(sp)
8111c6a8:	dec00104 	addi	sp,sp,4
8111c6ac:	f800283a 	ret

8111c6b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8111c6b0:	defffc04 	addi	sp,sp,-16
8111c6b4:	df000315 	stw	fp,12(sp)
8111c6b8:	df000304 	addi	fp,sp,12
8111c6bc:	e13ffe15 	stw	r4,-8(fp)
8111c6c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8111c6c4:	000530fa 	rdctl	r2,ienable
8111c6c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8111c6cc:	00c00044 	movi	r3,1
8111c6d0:	e0bfff17 	ldw	r2,-4(fp)
8111c6d4:	1884983a 	sll	r2,r3,r2
8111c6d8:	1007883a 	mov	r3,r2
8111c6dc:	e0bffd17 	ldw	r2,-12(fp)
8111c6e0:	1884703a 	and	r2,r3,r2
8111c6e4:	1004c03a 	cmpne	r2,r2,zero
8111c6e8:	10803fcc 	andi	r2,r2,255
}
8111c6ec:	e037883a 	mov	sp,fp
8111c6f0:	df000017 	ldw	fp,0(sp)
8111c6f4:	dec00104 	addi	sp,sp,4
8111c6f8:	f800283a 	ret

8111c6fc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8111c6fc:	defff504 	addi	sp,sp,-44
8111c700:	dfc00a15 	stw	ra,40(sp)
8111c704:	df000915 	stw	fp,36(sp)
8111c708:	df000904 	addi	fp,sp,36
8111c70c:	e13ffc15 	stw	r4,-16(fp)
8111c710:	e17ffd15 	stw	r5,-12(fp)
8111c714:	e1bffe15 	stw	r6,-8(fp)
8111c718:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8111c71c:	00bffa84 	movi	r2,-22
8111c720:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8111c724:	e0bffd17 	ldw	r2,-12(fp)
8111c728:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8111c72c:	e0bff817 	ldw	r2,-32(fp)
8111c730:	10800808 	cmpgei	r2,r2,32
8111c734:	1000271e 	bne	r2,zero,8111c7d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c738:	0005303a 	rdctl	r2,status
8111c73c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c740:	e0fffb17 	ldw	r3,-20(fp)
8111c744:	00bfff84 	movi	r2,-2
8111c748:	1884703a 	and	r2,r3,r2
8111c74c:	1001703a 	wrctl	status,r2
  
  return context;
8111c750:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8111c754:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8111c758:	00a044b4 	movhi	r2,33042
8111c75c:	10838504 	addi	r2,r2,3604
8111c760:	e0fff817 	ldw	r3,-32(fp)
8111c764:	180690fa 	slli	r3,r3,3
8111c768:	10c5883a 	add	r2,r2,r3
8111c76c:	e0fffe17 	ldw	r3,-8(fp)
8111c770:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8111c774:	00a044b4 	movhi	r2,33042
8111c778:	10838504 	addi	r2,r2,3604
8111c77c:	e0fff817 	ldw	r3,-32(fp)
8111c780:	180690fa 	slli	r3,r3,3
8111c784:	10c5883a 	add	r2,r2,r3
8111c788:	10800104 	addi	r2,r2,4
8111c78c:	e0ffff17 	ldw	r3,-4(fp)
8111c790:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8111c794:	e0bffe17 	ldw	r2,-8(fp)
8111c798:	10000526 	beq	r2,zero,8111c7b0 <alt_iic_isr_register+0xb4>
8111c79c:	e0bff817 	ldw	r2,-32(fp)
8111c7a0:	100b883a 	mov	r5,r2
8111c7a4:	e13ffc17 	ldw	r4,-16(fp)
8111c7a8:	111c59c0 	call	8111c59c <alt_ic_irq_enable>
8111c7ac:	00000406 	br	8111c7c0 <alt_iic_isr_register+0xc4>
8111c7b0:	e0bff817 	ldw	r2,-32(fp)
8111c7b4:	100b883a 	mov	r5,r2
8111c7b8:	e13ffc17 	ldw	r4,-16(fp)
8111c7bc:	111c6240 	call	8111c624 <alt_ic_irq_disable>
8111c7c0:	e0bff715 	stw	r2,-36(fp)
8111c7c4:	e0bffa17 	ldw	r2,-24(fp)
8111c7c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c7cc:	e0bff917 	ldw	r2,-28(fp)
8111c7d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8111c7d4:	e0bff717 	ldw	r2,-36(fp)
}
8111c7d8:	e037883a 	mov	sp,fp
8111c7dc:	dfc00117 	ldw	ra,4(sp)
8111c7e0:	df000017 	ldw	fp,0(sp)
8111c7e4:	dec00204 	addi	sp,sp,8
8111c7e8:	f800283a 	ret

8111c7ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8111c7ec:	defff904 	addi	sp,sp,-28
8111c7f0:	dfc00615 	stw	ra,24(sp)
8111c7f4:	df000515 	stw	fp,20(sp)
8111c7f8:	df000504 	addi	fp,sp,20
8111c7fc:	e13ffc15 	stw	r4,-16(fp)
8111c800:	e17ffd15 	stw	r5,-12(fp)
8111c804:	e1bffe15 	stw	r6,-8(fp)
8111c808:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8111c80c:	e1bfff17 	ldw	r6,-4(fp)
8111c810:	e17ffe17 	ldw	r5,-8(fp)
8111c814:	e13ffd17 	ldw	r4,-12(fp)
8111c818:	111ca2c0 	call	8111ca2c <open>
8111c81c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8111c820:	e0bffb17 	ldw	r2,-20(fp)
8111c824:	10001c16 	blt	r2,zero,8111c898 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
8111c828:	00a044b4 	movhi	r2,33042
8111c82c:	10bca404 	addi	r2,r2,-3440
8111c830:	e0fffb17 	ldw	r3,-20(fp)
8111c834:	18c00324 	muli	r3,r3,12
8111c838:	10c5883a 	add	r2,r2,r3
8111c83c:	10c00017 	ldw	r3,0(r2)
8111c840:	e0bffc17 	ldw	r2,-16(fp)
8111c844:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8111c848:	00a044b4 	movhi	r2,33042
8111c84c:	10bca404 	addi	r2,r2,-3440
8111c850:	e0fffb17 	ldw	r3,-20(fp)
8111c854:	18c00324 	muli	r3,r3,12
8111c858:	10c5883a 	add	r2,r2,r3
8111c85c:	10800104 	addi	r2,r2,4
8111c860:	10c00017 	ldw	r3,0(r2)
8111c864:	e0bffc17 	ldw	r2,-16(fp)
8111c868:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8111c86c:	00a044b4 	movhi	r2,33042
8111c870:	10bca404 	addi	r2,r2,-3440
8111c874:	e0fffb17 	ldw	r3,-20(fp)
8111c878:	18c00324 	muli	r3,r3,12
8111c87c:	10c5883a 	add	r2,r2,r3
8111c880:	10800204 	addi	r2,r2,8
8111c884:	10c00017 	ldw	r3,0(r2)
8111c888:	e0bffc17 	ldw	r2,-16(fp)
8111c88c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8111c890:	e13ffb17 	ldw	r4,-20(fp)
8111c894:	11189d00 	call	811189d0 <alt_release_fd>
  }
} 
8111c898:	0001883a 	nop
8111c89c:	e037883a 	mov	sp,fp
8111c8a0:	dfc00117 	ldw	ra,4(sp)
8111c8a4:	df000017 	ldw	fp,0(sp)
8111c8a8:	dec00204 	addi	sp,sp,8
8111c8ac:	f800283a 	ret

8111c8b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8111c8b0:	defffb04 	addi	sp,sp,-20
8111c8b4:	dfc00415 	stw	ra,16(sp)
8111c8b8:	df000315 	stw	fp,12(sp)
8111c8bc:	df000304 	addi	fp,sp,12
8111c8c0:	e13ffd15 	stw	r4,-12(fp)
8111c8c4:	e17ffe15 	stw	r5,-8(fp)
8111c8c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8111c8cc:	01c07fc4 	movi	r7,511
8111c8d0:	01800044 	movi	r6,1
8111c8d4:	e17ffd17 	ldw	r5,-12(fp)
8111c8d8:	012044b4 	movhi	r4,33042
8111c8dc:	213ca704 	addi	r4,r4,-3428
8111c8e0:	111c7ec0 	call	8111c7ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8111c8e4:	01c07fc4 	movi	r7,511
8111c8e8:	000d883a 	mov	r6,zero
8111c8ec:	e17ffe17 	ldw	r5,-8(fp)
8111c8f0:	012044b4 	movhi	r4,33042
8111c8f4:	213ca404 	addi	r4,r4,-3440
8111c8f8:	111c7ec0 	call	8111c7ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8111c8fc:	01c07fc4 	movi	r7,511
8111c900:	01800044 	movi	r6,1
8111c904:	e17fff17 	ldw	r5,-4(fp)
8111c908:	012044b4 	movhi	r4,33042
8111c90c:	213caa04 	addi	r4,r4,-3416
8111c910:	111c7ec0 	call	8111c7ec <alt_open_fd>
}  
8111c914:	0001883a 	nop
8111c918:	e037883a 	mov	sp,fp
8111c91c:	dfc00117 	ldw	ra,4(sp)
8111c920:	df000017 	ldw	fp,0(sp)
8111c924:	dec00204 	addi	sp,sp,8
8111c928:	f800283a 	ret

8111c92c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111c92c:	defffe04 	addi	sp,sp,-8
8111c930:	dfc00115 	stw	ra,4(sp)
8111c934:	df000015 	stw	fp,0(sp)
8111c938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111c93c:	d0a01317 	ldw	r2,-32692(gp)
8111c940:	10000326 	beq	r2,zero,8111c950 <alt_get_errno+0x24>
8111c944:	d0a01317 	ldw	r2,-32692(gp)
8111c948:	103ee83a 	callr	r2
8111c94c:	00000106 	br	8111c954 <alt_get_errno+0x28>
8111c950:	d0a04304 	addi	r2,gp,-32500
}
8111c954:	e037883a 	mov	sp,fp
8111c958:	dfc00117 	ldw	ra,4(sp)
8111c95c:	df000017 	ldw	fp,0(sp)
8111c960:	dec00204 	addi	sp,sp,8
8111c964:	f800283a 	ret

8111c968 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8111c968:	defffd04 	addi	sp,sp,-12
8111c96c:	df000215 	stw	fp,8(sp)
8111c970:	df000204 	addi	fp,sp,8
8111c974:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8111c978:	e0bfff17 	ldw	r2,-4(fp)
8111c97c:	10800217 	ldw	r2,8(r2)
8111c980:	10d00034 	orhi	r3,r2,16384
8111c984:	e0bfff17 	ldw	r2,-4(fp)
8111c988:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8111c98c:	e03ffe15 	stw	zero,-8(fp)
8111c990:	00001d06 	br	8111ca08 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8111c994:	00a044b4 	movhi	r2,33042
8111c998:	10bca404 	addi	r2,r2,-3440
8111c99c:	e0fffe17 	ldw	r3,-8(fp)
8111c9a0:	18c00324 	muli	r3,r3,12
8111c9a4:	10c5883a 	add	r2,r2,r3
8111c9a8:	10c00017 	ldw	r3,0(r2)
8111c9ac:	e0bfff17 	ldw	r2,-4(fp)
8111c9b0:	10800017 	ldw	r2,0(r2)
8111c9b4:	1880111e 	bne	r3,r2,8111c9fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8111c9b8:	00a044b4 	movhi	r2,33042
8111c9bc:	10bca404 	addi	r2,r2,-3440
8111c9c0:	e0fffe17 	ldw	r3,-8(fp)
8111c9c4:	18c00324 	muli	r3,r3,12
8111c9c8:	10c5883a 	add	r2,r2,r3
8111c9cc:	10800204 	addi	r2,r2,8
8111c9d0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8111c9d4:	1000090e 	bge	r2,zero,8111c9fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8111c9d8:	e0bffe17 	ldw	r2,-8(fp)
8111c9dc:	10c00324 	muli	r3,r2,12
8111c9e0:	00a044b4 	movhi	r2,33042
8111c9e4:	10bca404 	addi	r2,r2,-3440
8111c9e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8111c9ec:	e0bfff17 	ldw	r2,-4(fp)
8111c9f0:	18800226 	beq	r3,r2,8111c9fc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8111c9f4:	00bffcc4 	movi	r2,-13
8111c9f8:	00000806 	br	8111ca1c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8111c9fc:	e0bffe17 	ldw	r2,-8(fp)
8111ca00:	10800044 	addi	r2,r2,1
8111ca04:	e0bffe15 	stw	r2,-8(fp)
8111ca08:	d0a01217 	ldw	r2,-32696(gp)
8111ca0c:	1007883a 	mov	r3,r2
8111ca10:	e0bffe17 	ldw	r2,-8(fp)
8111ca14:	18bfdf2e 	bgeu	r3,r2,8111c994 <__reset+0xfb0fc994>
    }
  }
  
  /* The device is not locked */
 
  return 0;
8111ca18:	0005883a 	mov	r2,zero
}
8111ca1c:	e037883a 	mov	sp,fp
8111ca20:	df000017 	ldw	fp,0(sp)
8111ca24:	dec00104 	addi	sp,sp,4
8111ca28:	f800283a 	ret

8111ca2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8111ca2c:	defff604 	addi	sp,sp,-40
8111ca30:	dfc00915 	stw	ra,36(sp)
8111ca34:	df000815 	stw	fp,32(sp)
8111ca38:	df000804 	addi	fp,sp,32
8111ca3c:	e13ffd15 	stw	r4,-12(fp)
8111ca40:	e17ffe15 	stw	r5,-8(fp)
8111ca44:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8111ca48:	00bfffc4 	movi	r2,-1
8111ca4c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8111ca50:	00bffb44 	movi	r2,-19
8111ca54:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
8111ca58:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8111ca5c:	d1601004 	addi	r5,gp,-32704
8111ca60:	e13ffd17 	ldw	r4,-12(fp)
8111ca64:	111c4bc0 	call	8111c4bc <alt_find_dev>
8111ca68:	e0bff815 	stw	r2,-32(fp)
8111ca6c:	e0bff817 	ldw	r2,-32(fp)
8111ca70:	1000051e 	bne	r2,zero,8111ca88 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8111ca74:	e13ffd17 	ldw	r4,-12(fp)
8111ca78:	111cba40 	call	8111cba4 <alt_find_file>
8111ca7c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8111ca80:	00800044 	movi	r2,1
8111ca84:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8111ca88:	e0bff817 	ldw	r2,-32(fp)
8111ca8c:	10002926 	beq	r2,zero,8111cb34 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8111ca90:	e13ff817 	ldw	r4,-32(fp)
8111ca94:	111ccac0 	call	8111ccac <alt_get_fd>
8111ca98:	e0bff915 	stw	r2,-28(fp)
8111ca9c:	e0bff917 	ldw	r2,-28(fp)
8111caa0:	1000030e 	bge	r2,zero,8111cab0 <open+0x84>
    {
      status = index;
8111caa4:	e0bff917 	ldw	r2,-28(fp)
8111caa8:	e0bffa15 	stw	r2,-24(fp)
8111caac:	00002306 	br	8111cb3c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8111cab0:	e0bff917 	ldw	r2,-28(fp)
8111cab4:	10c00324 	muli	r3,r2,12
8111cab8:	00a044b4 	movhi	r2,33042
8111cabc:	10bca404 	addi	r2,r2,-3440
8111cac0:	1885883a 	add	r2,r3,r2
8111cac4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8111cac8:	e0fffe17 	ldw	r3,-8(fp)
8111cacc:	00900034 	movhi	r2,16384
8111cad0:	10bfffc4 	addi	r2,r2,-1
8111cad4:	1886703a 	and	r3,r3,r2
8111cad8:	e0bffc17 	ldw	r2,-16(fp)
8111cadc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8111cae0:	e0bffb17 	ldw	r2,-20(fp)
8111cae4:	1000051e 	bne	r2,zero,8111cafc <open+0xd0>
8111cae8:	e13ffc17 	ldw	r4,-16(fp)
8111caec:	111c9680 	call	8111c968 <alt_file_locked>
8111caf0:	e0bffa15 	stw	r2,-24(fp)
8111caf4:	e0bffa17 	ldw	r2,-24(fp)
8111caf8:	10001016 	blt	r2,zero,8111cb3c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8111cafc:	e0bff817 	ldw	r2,-32(fp)
8111cb00:	10800317 	ldw	r2,12(r2)
8111cb04:	10000826 	beq	r2,zero,8111cb28 <open+0xfc>
8111cb08:	e0bff817 	ldw	r2,-32(fp)
8111cb0c:	10800317 	ldw	r2,12(r2)
8111cb10:	e1ffff17 	ldw	r7,-4(fp)
8111cb14:	e1bffe17 	ldw	r6,-8(fp)
8111cb18:	e17ffd17 	ldw	r5,-12(fp)
8111cb1c:	e13ffc17 	ldw	r4,-16(fp)
8111cb20:	103ee83a 	callr	r2
8111cb24:	00000106 	br	8111cb2c <open+0x100>
8111cb28:	0005883a 	mov	r2,zero
8111cb2c:	e0bffa15 	stw	r2,-24(fp)
8111cb30:	00000206 	br	8111cb3c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
8111cb34:	00bffb44 	movi	r2,-19
8111cb38:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8111cb3c:	e0bffa17 	ldw	r2,-24(fp)
8111cb40:	1000090e 	bge	r2,zero,8111cb68 <open+0x13c>
  {
    alt_release_fd (index);  
8111cb44:	e13ff917 	ldw	r4,-28(fp)
8111cb48:	11189d00 	call	811189d0 <alt_release_fd>
    ALT_ERRNO = -status;
8111cb4c:	111c92c0 	call	8111c92c <alt_get_errno>
8111cb50:	1007883a 	mov	r3,r2
8111cb54:	e0bffa17 	ldw	r2,-24(fp)
8111cb58:	0085c83a 	sub	r2,zero,r2
8111cb5c:	18800015 	stw	r2,0(r3)
    return -1;
8111cb60:	00bfffc4 	movi	r2,-1
8111cb64:	00000106 	br	8111cb6c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
8111cb68:	e0bff917 	ldw	r2,-28(fp)
}
8111cb6c:	e037883a 	mov	sp,fp
8111cb70:	dfc00117 	ldw	ra,4(sp)
8111cb74:	df000017 	ldw	fp,0(sp)
8111cb78:	dec00204 	addi	sp,sp,8
8111cb7c:	f800283a 	ret

8111cb80 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8111cb80:	deffff04 	addi	sp,sp,-4
8111cb84:	df000015 	stw	fp,0(sp)
8111cb88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8111cb8c:	000170fa 	wrctl	ienable,zero
}
8111cb90:	0001883a 	nop
8111cb94:	e037883a 	mov	sp,fp
8111cb98:	df000017 	ldw	fp,0(sp)
8111cb9c:	dec00104 	addi	sp,sp,4
8111cba0:	f800283a 	ret

8111cba4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8111cba4:	defffb04 	addi	sp,sp,-20
8111cba8:	dfc00415 	stw	ra,16(sp)
8111cbac:	df000315 	stw	fp,12(sp)
8111cbb0:	df000304 	addi	fp,sp,12
8111cbb4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8111cbb8:	d0a00e17 	ldw	r2,-32712(gp)
8111cbbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8111cbc0:	00003106 	br	8111cc88 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
8111cbc4:	e0bffd17 	ldw	r2,-12(fp)
8111cbc8:	10800217 	ldw	r2,8(r2)
8111cbcc:	1009883a 	mov	r4,r2
8111cbd0:	110bc1c0 	call	8110bc1c <strlen>
8111cbd4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8111cbd8:	e0bffd17 	ldw	r2,-12(fp)
8111cbdc:	10c00217 	ldw	r3,8(r2)
8111cbe0:	e0bffe17 	ldw	r2,-8(fp)
8111cbe4:	10bfffc4 	addi	r2,r2,-1
8111cbe8:	1885883a 	add	r2,r3,r2
8111cbec:	10800003 	ldbu	r2,0(r2)
8111cbf0:	10803fcc 	andi	r2,r2,255
8111cbf4:	1080201c 	xori	r2,r2,128
8111cbf8:	10bfe004 	addi	r2,r2,-128
8111cbfc:	10800bd8 	cmpnei	r2,r2,47
8111cc00:	1000031e 	bne	r2,zero,8111cc10 <alt_find_file+0x6c>
    {
      len -= 1;
8111cc04:	e0bffe17 	ldw	r2,-8(fp)
8111cc08:	10bfffc4 	addi	r2,r2,-1
8111cc0c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8111cc10:	e0bffe17 	ldw	r2,-8(fp)
8111cc14:	e0ffff17 	ldw	r3,-4(fp)
8111cc18:	1885883a 	add	r2,r3,r2
8111cc1c:	10800003 	ldbu	r2,0(r2)
8111cc20:	10803fcc 	andi	r2,r2,255
8111cc24:	1080201c 	xori	r2,r2,128
8111cc28:	10bfe004 	addi	r2,r2,-128
8111cc2c:	10800be0 	cmpeqi	r2,r2,47
8111cc30:	1000081e 	bne	r2,zero,8111cc54 <alt_find_file+0xb0>
8111cc34:	e0bffe17 	ldw	r2,-8(fp)
8111cc38:	e0ffff17 	ldw	r3,-4(fp)
8111cc3c:	1885883a 	add	r2,r3,r2
8111cc40:	10800003 	ldbu	r2,0(r2)
8111cc44:	10803fcc 	andi	r2,r2,255
8111cc48:	1080201c 	xori	r2,r2,128
8111cc4c:	10bfe004 	addi	r2,r2,-128
8111cc50:	10000a1e 	bne	r2,zero,8111cc7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
8111cc54:	e0bffd17 	ldw	r2,-12(fp)
8111cc58:	10800217 	ldw	r2,8(r2)
8111cc5c:	e0fffe17 	ldw	r3,-8(fp)
8111cc60:	180d883a 	mov	r6,r3
8111cc64:	e17fff17 	ldw	r5,-4(fp)
8111cc68:	1009883a 	mov	r4,r2
8111cc6c:	111ce380 	call	8111ce38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8111cc70:	1000021e 	bne	r2,zero,8111cc7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8111cc74:	e0bffd17 	ldw	r2,-12(fp)
8111cc78:	00000706 	br	8111cc98 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
8111cc7c:	e0bffd17 	ldw	r2,-12(fp)
8111cc80:	10800017 	ldw	r2,0(r2)
8111cc84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8111cc88:	e0fffd17 	ldw	r3,-12(fp)
8111cc8c:	d0a00e04 	addi	r2,gp,-32712
8111cc90:	18bfcc1e 	bne	r3,r2,8111cbc4 <__reset+0xfb0fcbc4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8111cc94:	0005883a 	mov	r2,zero
}
8111cc98:	e037883a 	mov	sp,fp
8111cc9c:	dfc00117 	ldw	ra,4(sp)
8111cca0:	df000017 	ldw	fp,0(sp)
8111cca4:	dec00204 	addi	sp,sp,8
8111cca8:	f800283a 	ret

8111ccac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8111ccac:	defffc04 	addi	sp,sp,-16
8111ccb0:	df000315 	stw	fp,12(sp)
8111ccb4:	df000304 	addi	fp,sp,12
8111ccb8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8111ccbc:	00bffa04 	movi	r2,-24
8111ccc0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8111ccc4:	e03ffd15 	stw	zero,-12(fp)
8111ccc8:	00001906 	br	8111cd30 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
8111cccc:	00a044b4 	movhi	r2,33042
8111ccd0:	10bca404 	addi	r2,r2,-3440
8111ccd4:	e0fffd17 	ldw	r3,-12(fp)
8111ccd8:	18c00324 	muli	r3,r3,12
8111ccdc:	10c5883a 	add	r2,r2,r3
8111cce0:	10800017 	ldw	r2,0(r2)
8111cce4:	10000f1e 	bne	r2,zero,8111cd24 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
8111cce8:	00a044b4 	movhi	r2,33042
8111ccec:	10bca404 	addi	r2,r2,-3440
8111ccf0:	e0fffd17 	ldw	r3,-12(fp)
8111ccf4:	18c00324 	muli	r3,r3,12
8111ccf8:	10c5883a 	add	r2,r2,r3
8111ccfc:	e0ffff17 	ldw	r3,-4(fp)
8111cd00:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8111cd04:	d0e01217 	ldw	r3,-32696(gp)
8111cd08:	e0bffd17 	ldw	r2,-12(fp)
8111cd0c:	1880020e 	bge	r3,r2,8111cd18 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
8111cd10:	e0bffd17 	ldw	r2,-12(fp)
8111cd14:	d0a01215 	stw	r2,-32696(gp)
      }
      rc = i;
8111cd18:	e0bffd17 	ldw	r2,-12(fp)
8111cd1c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
8111cd20:	00000606 	br	8111cd3c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8111cd24:	e0bffd17 	ldw	r2,-12(fp)
8111cd28:	10800044 	addi	r2,r2,1
8111cd2c:	e0bffd15 	stw	r2,-12(fp)
8111cd30:	e0bffd17 	ldw	r2,-12(fp)
8111cd34:	10800810 	cmplti	r2,r2,32
8111cd38:	103fe41e 	bne	r2,zero,8111cccc <__reset+0xfb0fcccc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
8111cd3c:	e0bffe17 	ldw	r2,-8(fp)
}
8111cd40:	e037883a 	mov	sp,fp
8111cd44:	df000017 	ldw	fp,0(sp)
8111cd48:	dec00104 	addi	sp,sp,4
8111cd4c:	f800283a 	ret

8111cd50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8111cd50:	defffe04 	addi	sp,sp,-8
8111cd54:	df000115 	stw	fp,4(sp)
8111cd58:	df000104 	addi	fp,sp,4
8111cd5c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8111cd60:	e0bfff17 	ldw	r2,-4(fp)
8111cd64:	10bffe84 	addi	r2,r2,-6
8111cd68:	10c00428 	cmpgeui	r3,r2,16
8111cd6c:	18001a1e 	bne	r3,zero,8111cdd8 <alt_exception_cause_generated_bad_addr+0x88>
8111cd70:	100690ba 	slli	r3,r2,2
8111cd74:	00a044b4 	movhi	r2,33042
8111cd78:	10b36204 	addi	r2,r2,-12920
8111cd7c:	1885883a 	add	r2,r3,r2
8111cd80:	10800017 	ldw	r2,0(r2)
8111cd84:	1000683a 	jmp	r2
8111cd88:	8111cdc8 	cmpgei	r4,r16,18231
8111cd8c:	8111cdc8 	cmpgei	r4,r16,18231
8111cd90:	8111cdd8 	cmpnei	r4,r16,18231
8111cd94:	8111cdd8 	cmpnei	r4,r16,18231
8111cd98:	8111cdd8 	cmpnei	r4,r16,18231
8111cd9c:	8111cdc8 	cmpgei	r4,r16,18231
8111cda0:	8111cdd0 	cmplti	r4,r16,18231
8111cda4:	8111cdd8 	cmpnei	r4,r16,18231
8111cda8:	8111cdc8 	cmpgei	r4,r16,18231
8111cdac:	8111cdc8 	cmpgei	r4,r16,18231
8111cdb0:	8111cdd8 	cmpnei	r4,r16,18231
8111cdb4:	8111cdc8 	cmpgei	r4,r16,18231
8111cdb8:	8111cdd0 	cmplti	r4,r16,18231
8111cdbc:	8111cdd8 	cmpnei	r4,r16,18231
8111cdc0:	8111cdd8 	cmpnei	r4,r16,18231
8111cdc4:	8111cdc8 	cmpgei	r4,r16,18231
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8111cdc8:	00800044 	movi	r2,1
8111cdcc:	00000306 	br	8111cddc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8111cdd0:	0005883a 	mov	r2,zero
8111cdd4:	00000106 	br	8111cddc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
8111cdd8:	0005883a 	mov	r2,zero
  }
}
8111cddc:	e037883a 	mov	sp,fp
8111cde0:	df000017 	ldw	fp,0(sp)
8111cde4:	dec00104 	addi	sp,sp,4
8111cde8:	f800283a 	ret

8111cdec <atexit>:
8111cdec:	200b883a 	mov	r5,r4
8111cdf0:	000f883a 	mov	r7,zero
8111cdf4:	000d883a 	mov	r6,zero
8111cdf8:	0009883a 	mov	r4,zero
8111cdfc:	111ceb41 	jmpi	8111ceb4 <__register_exitproc>

8111ce00 <exit>:
8111ce00:	defffe04 	addi	sp,sp,-8
8111ce04:	000b883a 	mov	r5,zero
8111ce08:	dc000015 	stw	r16,0(sp)
8111ce0c:	dfc00115 	stw	ra,4(sp)
8111ce10:	2021883a 	mov	r16,r4
8111ce14:	111cfcc0 	call	8111cfcc <__call_exitprocs>
8111ce18:	00a044b4 	movhi	r2,33042
8111ce1c:	10819004 	addi	r2,r2,1600
8111ce20:	11000017 	ldw	r4,0(r2)
8111ce24:	20800f17 	ldw	r2,60(r4)
8111ce28:	10000126 	beq	r2,zero,8111ce30 <exit+0x30>
8111ce2c:	103ee83a 	callr	r2
8111ce30:	8009883a 	mov	r4,r16
8111ce34:	111d14c0 	call	8111d14c <_exit>

8111ce38 <memcmp>:
8111ce38:	01c000c4 	movi	r7,3
8111ce3c:	3980192e 	bgeu	r7,r6,8111cea4 <memcmp+0x6c>
8111ce40:	2144b03a 	or	r2,r4,r5
8111ce44:	11c4703a 	and	r2,r2,r7
8111ce48:	10000f26 	beq	r2,zero,8111ce88 <memcmp+0x50>
8111ce4c:	20800003 	ldbu	r2,0(r4)
8111ce50:	28c00003 	ldbu	r3,0(r5)
8111ce54:	10c0151e 	bne	r2,r3,8111ceac <memcmp+0x74>
8111ce58:	31bfff84 	addi	r6,r6,-2
8111ce5c:	01ffffc4 	movi	r7,-1
8111ce60:	00000406 	br	8111ce74 <memcmp+0x3c>
8111ce64:	20800003 	ldbu	r2,0(r4)
8111ce68:	28c00003 	ldbu	r3,0(r5)
8111ce6c:	31bfffc4 	addi	r6,r6,-1
8111ce70:	10c00e1e 	bne	r2,r3,8111ceac <memcmp+0x74>
8111ce74:	21000044 	addi	r4,r4,1
8111ce78:	29400044 	addi	r5,r5,1
8111ce7c:	31fff91e 	bne	r6,r7,8111ce64 <__reset+0xfb0fce64>
8111ce80:	0005883a 	mov	r2,zero
8111ce84:	f800283a 	ret
8111ce88:	20c00017 	ldw	r3,0(r4)
8111ce8c:	28800017 	ldw	r2,0(r5)
8111ce90:	18bfee1e 	bne	r3,r2,8111ce4c <__reset+0xfb0fce4c>
8111ce94:	31bfff04 	addi	r6,r6,-4
8111ce98:	21000104 	addi	r4,r4,4
8111ce9c:	29400104 	addi	r5,r5,4
8111cea0:	39bff936 	bltu	r7,r6,8111ce88 <__reset+0xfb0fce88>
8111cea4:	303fe91e 	bne	r6,zero,8111ce4c <__reset+0xfb0fce4c>
8111cea8:	003ff506 	br	8111ce80 <__reset+0xfb0fce80>
8111ceac:	10c5c83a 	sub	r2,r2,r3
8111ceb0:	f800283a 	ret

8111ceb4 <__register_exitproc>:
8111ceb4:	defffa04 	addi	sp,sp,-24
8111ceb8:	dc000315 	stw	r16,12(sp)
8111cebc:	042044b4 	movhi	r16,33042
8111cec0:	84019004 	addi	r16,r16,1600
8111cec4:	80c00017 	ldw	r3,0(r16)
8111cec8:	dc400415 	stw	r17,16(sp)
8111cecc:	dfc00515 	stw	ra,20(sp)
8111ced0:	18805217 	ldw	r2,328(r3)
8111ced4:	2023883a 	mov	r17,r4
8111ced8:	10003726 	beq	r2,zero,8111cfb8 <__register_exitproc+0x104>
8111cedc:	10c00117 	ldw	r3,4(r2)
8111cee0:	010007c4 	movi	r4,31
8111cee4:	20c00e16 	blt	r4,r3,8111cf20 <__register_exitproc+0x6c>
8111cee8:	1a000044 	addi	r8,r3,1
8111ceec:	8800221e 	bne	r17,zero,8111cf78 <__register_exitproc+0xc4>
8111cef0:	18c00084 	addi	r3,r3,2
8111cef4:	18c7883a 	add	r3,r3,r3
8111cef8:	18c7883a 	add	r3,r3,r3
8111cefc:	12000115 	stw	r8,4(r2)
8111cf00:	10c7883a 	add	r3,r2,r3
8111cf04:	19400015 	stw	r5,0(r3)
8111cf08:	0005883a 	mov	r2,zero
8111cf0c:	dfc00517 	ldw	ra,20(sp)
8111cf10:	dc400417 	ldw	r17,16(sp)
8111cf14:	dc000317 	ldw	r16,12(sp)
8111cf18:	dec00604 	addi	sp,sp,24
8111cf1c:	f800283a 	ret
8111cf20:	00800034 	movhi	r2,0
8111cf24:	10800004 	addi	r2,r2,0
8111cf28:	10002626 	beq	r2,zero,8111cfc4 <__register_exitproc+0x110>
8111cf2c:	01006404 	movi	r4,400
8111cf30:	d9400015 	stw	r5,0(sp)
8111cf34:	d9800115 	stw	r6,4(sp)
8111cf38:	d9c00215 	stw	r7,8(sp)
8111cf3c:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
8111cf40:	d9400017 	ldw	r5,0(sp)
8111cf44:	d9800117 	ldw	r6,4(sp)
8111cf48:	d9c00217 	ldw	r7,8(sp)
8111cf4c:	10001d26 	beq	r2,zero,8111cfc4 <__register_exitproc+0x110>
8111cf50:	81000017 	ldw	r4,0(r16)
8111cf54:	10000115 	stw	zero,4(r2)
8111cf58:	02000044 	movi	r8,1
8111cf5c:	22405217 	ldw	r9,328(r4)
8111cf60:	0007883a 	mov	r3,zero
8111cf64:	12400015 	stw	r9,0(r2)
8111cf68:	20805215 	stw	r2,328(r4)
8111cf6c:	10006215 	stw	zero,392(r2)
8111cf70:	10006315 	stw	zero,396(r2)
8111cf74:	883fde26 	beq	r17,zero,8111cef0 <__reset+0xfb0fcef0>
8111cf78:	18c9883a 	add	r4,r3,r3
8111cf7c:	2109883a 	add	r4,r4,r4
8111cf80:	1109883a 	add	r4,r2,r4
8111cf84:	21802215 	stw	r6,136(r4)
8111cf88:	01800044 	movi	r6,1
8111cf8c:	12406217 	ldw	r9,392(r2)
8111cf90:	30cc983a 	sll	r6,r6,r3
8111cf94:	4992b03a 	or	r9,r9,r6
8111cf98:	12406215 	stw	r9,392(r2)
8111cf9c:	21c04215 	stw	r7,264(r4)
8111cfa0:	01000084 	movi	r4,2
8111cfa4:	893fd21e 	bne	r17,r4,8111cef0 <__reset+0xfb0fcef0>
8111cfa8:	11006317 	ldw	r4,396(r2)
8111cfac:	218cb03a 	or	r6,r4,r6
8111cfb0:	11806315 	stw	r6,396(r2)
8111cfb4:	003fce06 	br	8111cef0 <__reset+0xfb0fcef0>
8111cfb8:	18805304 	addi	r2,r3,332
8111cfbc:	18805215 	stw	r2,328(r3)
8111cfc0:	003fc606 	br	8111cedc <__reset+0xfb0fcedc>
8111cfc4:	00bfffc4 	movi	r2,-1
8111cfc8:	003fd006 	br	8111cf0c <__reset+0xfb0fcf0c>

8111cfcc <__call_exitprocs>:
8111cfcc:	defff504 	addi	sp,sp,-44
8111cfd0:	df000915 	stw	fp,36(sp)
8111cfd4:	dd400615 	stw	r21,24(sp)
8111cfd8:	dc800315 	stw	r18,12(sp)
8111cfdc:	dfc00a15 	stw	ra,40(sp)
8111cfe0:	ddc00815 	stw	r23,32(sp)
8111cfe4:	dd800715 	stw	r22,28(sp)
8111cfe8:	dd000515 	stw	r20,20(sp)
8111cfec:	dcc00415 	stw	r19,16(sp)
8111cff0:	dc400215 	stw	r17,8(sp)
8111cff4:	dc000115 	stw	r16,4(sp)
8111cff8:	d9000015 	stw	r4,0(sp)
8111cffc:	2839883a 	mov	fp,r5
8111d000:	04800044 	movi	r18,1
8111d004:	057fffc4 	movi	r21,-1
8111d008:	00a044b4 	movhi	r2,33042
8111d00c:	10819004 	addi	r2,r2,1600
8111d010:	12000017 	ldw	r8,0(r2)
8111d014:	45005217 	ldw	r20,328(r8)
8111d018:	44c05204 	addi	r19,r8,328
8111d01c:	a0001c26 	beq	r20,zero,8111d090 <__call_exitprocs+0xc4>
8111d020:	a0800117 	ldw	r2,4(r20)
8111d024:	15ffffc4 	addi	r23,r2,-1
8111d028:	b8000d16 	blt	r23,zero,8111d060 <__call_exitprocs+0x94>
8111d02c:	14000044 	addi	r16,r2,1
8111d030:	8421883a 	add	r16,r16,r16
8111d034:	8421883a 	add	r16,r16,r16
8111d038:	84402004 	addi	r17,r16,128
8111d03c:	a463883a 	add	r17,r20,r17
8111d040:	a421883a 	add	r16,r20,r16
8111d044:	e0001e26 	beq	fp,zero,8111d0c0 <__call_exitprocs+0xf4>
8111d048:	80804017 	ldw	r2,256(r16)
8111d04c:	e0801c26 	beq	fp,r2,8111d0c0 <__call_exitprocs+0xf4>
8111d050:	bdffffc4 	addi	r23,r23,-1
8111d054:	843fff04 	addi	r16,r16,-4
8111d058:	8c7fff04 	addi	r17,r17,-4
8111d05c:	bd7ff91e 	bne	r23,r21,8111d044 <__reset+0xfb0fd044>
8111d060:	00800034 	movhi	r2,0
8111d064:	10800004 	addi	r2,r2,0
8111d068:	10000926 	beq	r2,zero,8111d090 <__call_exitprocs+0xc4>
8111d06c:	a0800117 	ldw	r2,4(r20)
8111d070:	1000301e 	bne	r2,zero,8111d134 <__call_exitprocs+0x168>
8111d074:	a0800017 	ldw	r2,0(r20)
8111d078:	10003226 	beq	r2,zero,8111d144 <__call_exitprocs+0x178>
8111d07c:	a009883a 	mov	r4,r20
8111d080:	98800015 	stw	r2,0(r19)
8111d084:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
8111d088:	9d000017 	ldw	r20,0(r19)
8111d08c:	a03fe41e 	bne	r20,zero,8111d020 <__reset+0xfb0fd020>
8111d090:	dfc00a17 	ldw	ra,40(sp)
8111d094:	df000917 	ldw	fp,36(sp)
8111d098:	ddc00817 	ldw	r23,32(sp)
8111d09c:	dd800717 	ldw	r22,28(sp)
8111d0a0:	dd400617 	ldw	r21,24(sp)
8111d0a4:	dd000517 	ldw	r20,20(sp)
8111d0a8:	dcc00417 	ldw	r19,16(sp)
8111d0ac:	dc800317 	ldw	r18,12(sp)
8111d0b0:	dc400217 	ldw	r17,8(sp)
8111d0b4:	dc000117 	ldw	r16,4(sp)
8111d0b8:	dec00b04 	addi	sp,sp,44
8111d0bc:	f800283a 	ret
8111d0c0:	a0800117 	ldw	r2,4(r20)
8111d0c4:	80c00017 	ldw	r3,0(r16)
8111d0c8:	10bfffc4 	addi	r2,r2,-1
8111d0cc:	15c01426 	beq	r2,r23,8111d120 <__call_exitprocs+0x154>
8111d0d0:	80000015 	stw	zero,0(r16)
8111d0d4:	183fde26 	beq	r3,zero,8111d050 <__reset+0xfb0fd050>
8111d0d8:	95c8983a 	sll	r4,r18,r23
8111d0dc:	a0806217 	ldw	r2,392(r20)
8111d0e0:	a5800117 	ldw	r22,4(r20)
8111d0e4:	2084703a 	and	r2,r4,r2
8111d0e8:	10000b26 	beq	r2,zero,8111d118 <__call_exitprocs+0x14c>
8111d0ec:	a0806317 	ldw	r2,396(r20)
8111d0f0:	2088703a 	and	r4,r4,r2
8111d0f4:	20000c1e 	bne	r4,zero,8111d128 <__call_exitprocs+0x15c>
8111d0f8:	89400017 	ldw	r5,0(r17)
8111d0fc:	d9000017 	ldw	r4,0(sp)
8111d100:	183ee83a 	callr	r3
8111d104:	a0800117 	ldw	r2,4(r20)
8111d108:	15bfbf1e 	bne	r2,r22,8111d008 <__reset+0xfb0fd008>
8111d10c:	98800017 	ldw	r2,0(r19)
8111d110:	153fcf26 	beq	r2,r20,8111d050 <__reset+0xfb0fd050>
8111d114:	003fbc06 	br	8111d008 <__reset+0xfb0fd008>
8111d118:	183ee83a 	callr	r3
8111d11c:	003ff906 	br	8111d104 <__reset+0xfb0fd104>
8111d120:	a5c00115 	stw	r23,4(r20)
8111d124:	003feb06 	br	8111d0d4 <__reset+0xfb0fd0d4>
8111d128:	89000017 	ldw	r4,0(r17)
8111d12c:	183ee83a 	callr	r3
8111d130:	003ff406 	br	8111d104 <__reset+0xfb0fd104>
8111d134:	a0800017 	ldw	r2,0(r20)
8111d138:	a027883a 	mov	r19,r20
8111d13c:	1029883a 	mov	r20,r2
8111d140:	003fb606 	br	8111d01c <__reset+0xfb0fd01c>
8111d144:	0005883a 	mov	r2,zero
8111d148:	003ffb06 	br	8111d138 <__reset+0xfb0fd138>

8111d14c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8111d14c:	defffd04 	addi	sp,sp,-12
8111d150:	df000215 	stw	fp,8(sp)
8111d154:	df000204 	addi	fp,sp,8
8111d158:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8111d15c:	0001883a 	nop
8111d160:	e0bfff17 	ldw	r2,-4(fp)
8111d164:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8111d168:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8111d16c:	10000226 	beq	r2,zero,8111d178 <_exit+0x2c>
    ALT_SIM_FAIL();
8111d170:	002af070 	cmpltui	zero,zero,43969
8111d174:	00000106 	br	8111d17c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8111d178:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8111d17c:	003fff06 	br	8111d17c <__reset+0xfb0fd17c>
