
USB3_Tests.elf:     file format elf32-littlenios2
USB3_Tests.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80200244

Program Header:
    LOAD off    0x00001020 vaddr 0x80200020 paddr 0x80200020 align 2**12
         filesz 0x0001f0d8 memsz 0x0001f760 flags rwx
    LOAD off    0x00021000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00021000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80200020  80200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b41c  80200244  80200244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001dd8  8021b660  8021b660  0001c660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cb8  8021d440  8021d440  0001e440  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000688  8021f0f8  8021f0f8  000200f8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8021f780  8021f780  00021000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00021000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00021000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011f0  00000000  00000000  00021028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f732  00000000  00000000  00022218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ba02  00000000  00000000  0005194a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fc3e  00000000  00000000  0005d34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000033dc  00000000  00000000  0006cf8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005bde  00000000  00000000  00070368  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d75d  00000000  00000000  00075f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000936a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001bf0  00000000  00000000  000936e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00099a7d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00099a80  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00099a8c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00099a8d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00099a8e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00099a92  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00099a96  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00099a9a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00099aa5  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00099ab0  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00099abb  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000049  00000000  00000000  00099acc  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001e35d7  00000000  00000000  00099b15  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
80200020 l    d  .exceptions	00000000 .exceptions
80200244 l    d  .text	00000000 .text
8021b660 l    d  .rodata	00000000 .rodata
8021d440 l    d  .rwdata	00000000 .rwdata
8021f0f8 l    d  .bss	00000000 .bss
8021f780 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB3_Tests_bsp//obj/HAL/src/crt0.o
80200278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 crc.c
8021c168 l     O .rodata	00000100 crc8_table
8021c268 l     O .rodata	00000100 crc8_koop_table
8021c368 l     O .rodata	00000200 crc16_table
8021c568 l     O .rodata	00000200 crc16_ccitt_table
8021c768 l     O .rodata	00000400 crc32_table
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
80204118 l     F .text	00000134 msgdma_write_extended_descriptor
8020424c l     F .text	0000015c msgdma_construct_extended_descriptor
802043a8 l     F .text	00000288 msgdma_descriptor_async_transfer
80204630 l     F .text	00000348 msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 pattern.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8021d440 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021cfd6 l     O .rodata	00000010 zeroes.4389
8021cfe6 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8021cff6 l     O .rodata	00000010 zeroes.4404
8020aaa8 l     F .text	000000bc __sbprintf
8021d006 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
8020acb8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8020c7e8 l     F .text	00000008 __fp_unlock
8020c7fc l     F .text	0000019c __sinit.part.1
8020c998 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
8021d884 l     O .rwdata	00000020 lc_ctype_charset
8021d864 l     O .rwdata	00000020 lc_message_charset
8021d8a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
8021d034 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021d168 l     O .rodata	00000010 blanks.4332
8021d158 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
80211058 l     F .text	000000fc __sprint_r.part.0
8021d188 l     O .rodata	00000010 blanks.4348
8021d178 l     O .rodata	00000010 zeroes.4349
802125e4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
80216364 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
80216490 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
802164bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
802165a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
80216688 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
8021685c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8021f0e0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
80216c7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
80216db0 l     F .text	00000034 alt_dev_reg
8021de90 l     O .rwdata	00001060 jtag_uart_0
8021eef0 l     O .rwdata	000000c4 rs232_uart
8021efc0 l     O .rwdata	00000060 dma_DDR_M1
8021f020 l     O .rwdata	00000060 dma_DDR_M2
8021f080 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
80217128 l     F .text	0000020c altera_avalon_jtag_uart_irq
80217334 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8021796c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
80217c1c l     F .text	0000009c altera_avalon_uart_irq
80217cb8 l     F .text	000000e4 altera_avalon_uart_rxirq
80217d9c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
80217f38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
80218150 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
80218338 l     F .text	0000003c alt_get_errno
80218374 l     F .text	00000094 alt_msgdma_write_standard_descriptor
80218408 l     F .text	0000012c alt_msgdma_write_extended_descriptor
80218534 l     F .text	00000184 alt_msgdma_irq
802186b8 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
80218744 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
80218898 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
80218b68 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
802191b0 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
80219254 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8021a42c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8021a8fc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
8021aa3c l     F .text	0000003c alt_get_errno
8021aa78 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8021f154 g     O .bss	00000004 alt_instruction_exception_handler
8021a1e8 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8020f290 g     F .text	00000074 _mprec_log10
80203a4c g     F .text	00000100 I2C_Read
8020f37c g     F .text	0000008c __any_on
80212b80 g     F .text	00000054 _isatty_r
8021d040 g     O .rodata	00000028 __mprec_tinytens
80216798 g     F .text	0000007c alt_main
8020648c g     F .text	000000c0 _puts_r
8021f680 g     O .bss	00000100 alt_irq
80212bd4 g     F .text	00000060 _lseek_r
80214dcc g     F .text	00000088 .hidden __eqdf2
80218f90 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8021f780 g       *ABS*	00000000 __alt_heap_start
8021f111 g     O .bss	00000001 SspdConfigControl
80206450 g     F .text	0000003c printf
80212dec g     F .text	0000009c _wcrtomb_r
8020fb0c g     F .text	0000005c __sseek
8020cb38 g     F .text	00000010 __sinit
80204a30 g     F .text	0000003c iMsgdmaExtendedDescriptorAsyncTransfer
80212c94 g     F .text	00000140 __swbuf_r
8020d600 g     F .text	0000007c _setlocale_r
8021f0ac g     O .rwdata	00000004 LedsPainelControl
8021f180 g     O .bss	00000100 cDebugBuffer
8020c9a0 g     F .text	00000068 __sfmoreglue
80216838 g     F .text	00000024 __malloc_unlock
8021f114 g     O .bss	00000004 iTimeElapsed
80202598 g     F .text	00000078 uliXorshift32
80205a10 g     F .text	00000440 .hidden __divsf3
8021f118 g     O .bss	00000004 fp
8020e188 g     F .text	0000015c memmove
8020cb20 g     F .text	00000018 _cleanup
8020e40c g     F .text	000000a8 _Balloc
80218ee0 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8021f0fc g     O .bss	00000004 pxDmaM1Dev
80214e54 g     F .text	000000dc .hidden __gtdf2
8021aef8 g     F .text	00000024 altera_nios2_gen2_irq_init
80203da8 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
80212b24 g     F .text	0000005c _fstat_r
8021f138 g     O .bss	00000004 errno
8020fa88 g     F .text	00000008 __seofread
8020fe1c g     F .text	0000123c ___svfiprintf_internal_r
8021f140 g     O .bss	00000004 alt_argv
802270ac g       *ABS*	00000000 _gp
80216c4c g     F .text	00000030 usleep
80204030 g     F .text	00000078 bSetBoardLeds
80219a74 g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8021dd0c g     O .rwdata	00000180 alt_fd_list
8021a5cc g     F .text	00000090 alt_find_dev
802062d8 g     F .text	00000148 memcpy
802036b0 g     F .text	00000074 crc__CRC16CCITTU
8020c7f0 g     F .text	0000000c _cleanup_r
802160b8 g     F .text	000000dc .hidden __floatsidf
8021a9c0 g     F .text	0000007c alt_io_redirect
80214f30 g     F .text	000000f4 .hidden __ltdf2
802026c4 g     F .text	000000bc bSdmaInitM2Dma
8021b660 g       *ABS*	00000000 __DTOR_END__
80219f24 g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
8021a224 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
8021a194 g     F .text	00000054 alt_msgdma_register_callback
8020654c g     F .text	00000014 puts
8021b0c8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
8020f96c g     F .text	00000074 __fpclassifyd
8020f1ec g     F .text	000000a4 __ratio
802125c8 g     F .text	0000001c __vfiprintf_internal
8020324c g     F .text	00000204 bSdmaDmaM2FtdiTransfer
8021752c g     F .text	0000021c altera_avalon_jtag_uart_read
802196e0 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
80206420 g     F .text	00000030 _printf_r
80213b7c g     F .text	00000064 .hidden __udivsi3
802165e4 g     F .text	000000a4 isatty
8021f110 g     O .bss	00000001 LedsBoardControl
8021d090 g     O .rodata	000000c8 __mprec_tens
8020d67c g     F .text	0000000c __locale_charset
80203b4c g     F .text	00000158 I2C_MultipleRead
8021f134 g     O .bss	00000004 __malloc_top_pad
8021f0b8 g     O .rwdata	00000004 __mb_cur_max
8020d6ac g     F .text	0000000c _localeconv_r
8020e818 g     F .text	0000003c __i2b
8020cfbc g     F .text	000004bc __sfvwrite_r
8020f9e0 g     F .text	00000054 _sbrk_r
80203514 g     F .text	0000004c crc__CRC8KOOPU
80212c34 g     F .text	00000060 _read_r
8021a404 g     F .text	00000028 alt_dcache_flush
8021f11c g     O .bss	00000004 iTimeStart
8020215c g     F .text	0000043c bDdr2MemoryRandomReadTest
8021f0d8 g     O .rwdata	00000004 alt_max_fd
80212818 g     F .text	000000f0 _fclose_r
8020c7b8 g     F .text	00000030 fflush
8021f130 g     O .bss	00000004 __malloc_max_sbrked_mem
80206064 g     F .text	00000110 .hidden __extendsfdf2
802038f4 g     F .text	00000080 I2C_TestAdress
80213c38 g     F .text	000008ac .hidden __adddf3
802035d8 g     F .text	00000060 crc__CRC16U
8020ef94 g     F .text	0000010c __b2d
80219440 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8021f104 g     O .bss	00000004 ESdmaFtdiOperation
8021354c g     F .text	00000538 .hidden __umoddi3
802166c4 g     F .text	000000d4 lseek
8021f0b0 g     O .rwdata	00000004 _global_impure_ptr
80205050 g     F .text	00000044 bSSDisplayUpdate
8020f408 g     F .text	00000564 _realloc_r
8021f780 g       *ABS*	00000000 __bss_end
8021a80c g     F .text	000000f0 alt_iic_isr_register
80216b44 g     F .text	00000108 alt_tick
8021a028 g     F .text	0000016c alt_msgdma_init
80212fd4 g     F .text	00000578 .hidden __udivdi3
80212a80 g     F .text	00000024 _fputwc_r
8021d068 g     O .rodata	00000028 __mprec_bigtens
8020e5fc g     F .text	00000104 __s2b
80216194 g     F .text	000000a8 .hidden __floatunsidf
8020ecd4 g     F .text	00000060 __mcmp
80217b70 g     F .text	000000ac altera_avalon_uart_init
8021a29c g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
80202be8 g     F .text	00000470 bSdmaDmaM2Transfer
8020cb58 g     F .text	00000018 __fp_lock_all
8021a7c0 g     F .text	0000004c alt_ic_irq_enabled
80203974 g     F .text	000000d8 I2C_Write
80216aa8 g     F .text	0000009c alt_alarm_stop
8021f150 g     O .bss	00000004 alt_irq_active
802000fc g     F .exceptions	000000d4 alt_irq_handler
8021dce4 g     O .rwdata	00000028 alt_dev_null
80219078 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
80203ca4 g     F .text	0000008c i2c_start
80219e78 g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
80216470 g     F .text	00000020 alt_dcache_flush_all
8020e700 g     F .text	00000068 __hi0bits
80216038 g     F .text	00000080 .hidden __fixdfsi
80200000 g       *ABS*	00000000 __alt_mem_onchip_memory
8021f0d0 g     O .rwdata	00000008 alt_dev_list
80216cb8 g     F .text	000000f8 write
8021b22c g     F .text	000000a0 _putc_r
802164f8 g     F .text	000000b0 fstat
80214f30 g     F .text	000000f4 .hidden __ledf2
8020ea4c g     F .text	00000140 __pow5mult
8021116c g     F .text	0000145c ___vfiprintf_internal_r
8021f128 g     O .bss	00000004 __nlocale_changed
80213be0 g     F .text	00000058 .hidden __umodsi3
80219498 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8021f780 g       *ABS*	00000000 end
8021818c g     F .text	000001ac altera_avalon_uart_write
80217068 g     F .text	000000c0 altera_avalon_jtag_uart_init
802001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
8021b660 g       *ABS*	00000000 __CTOR_LIST__
80240000 g       *ABS*	00000000 __alt_stack_pointer
80201d44 g     F .text	00000418 bDdr2MemoryRandomWriteTest
802179e4 g     F .text	0000007c alt_avalon_timer_sc_init
80217ac0 g     F .text	00000060 altera_avalon_uart_write_fd
80206174 g     F .text	00000064 .hidden __clzsi2
80217b20 g     F .text	00000050 altera_avalon_uart_close_fd
80217748 g     F .text	00000224 altera_avalon_jtag_uart_write
8020cb48 g     F .text	00000004 __sfp_lock_acquire
8020e0a4 g     F .text	000000e4 memchr
80208894 g     F .text	000021f8 ___vfprintf_internal_r
80206560 g     F .text	00000058 _sprintf_r
8020ccac g     F .text	00000310 _free_r
8021ac90 g     F .text	0000022c alt_printf
8020d688 g     F .text	00000010 __locale_mb_cur_max
80205544 g     F .text	000001d8 vFillCheckMemoryPattern
8021b4ac g     F .text	00000180 __call_exitprocs
80203724 g     F .text	0000007c crc__CRC16CCITT
8021f124 g     O .bss	00000004 __mlocale_changed
8021f0bc g     O .rwdata	00000004 __malloc_sbrk_base
80200244 g     F .text	00000038 _start
8021f148 g     O .bss	00000004 _alt_tick_rate
8020eb8c g     F .text	00000148 __lshift
80203058 g     F .text	000001f4 bSdmaDmaM1FtdiTransfer
80205774 g     F .text	00000054 vLittleToBigEndianMask
80218f38 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8021f14c g     O .bss	00000004 _alt_nticks
80216898 g     F .text	000000fc read
80216e1c g     F .text	000000e8 alt_sys_init
80205e50 g     F .text	00000124 .hidden __floatsisf
8020fc4c g     F .text	000001d0 __ssprint_r
80200720 g     F .text	00000b74 bDdr2EepromDump
8021b394 g     F .text	00000118 __register_exitproc
8020e854 g     F .text	000001f8 __multiply
802173d4 g     F .text	00000068 altera_avalon_jtag_uart_close
8021f158 g     O .bss	00000028 __malloc_current_mallinfo
8020f0a0 g     F .text	0000014c __d2b
80216f04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
8021b024 g     F .text	000000a4 alt_get_fd
8021623c g     F .text	00000128 alt_busy_sleep
80212700 g     F .text	00000054 _close_r
8020349c g     F .text	00000078 crc__CRC8
802193e8 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8021b1b0 g     F .text	0000007c memcmp
80216fc4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8021f780 g       *ABS*	00000000 __alt_stack_base
80217014 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
802061d8 g     F .text	000000cc _fwrite_r
802194f0 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
8020ab64 g     F .text	00000154 __swsetup_r
802144e4 g     F .text	000008e8 .hidden __divdf3
8020ca08 g     F .text	00000118 __sfp
8020f304 g     F .text	00000078 __copybits
8021d8dc g     O .rwdata	00000408 __malloc_av_
8020cb54 g     F .text	00000004 __sinit_lock_release
8021f0f8 g     O .bss	00000004 uliInitialState
80203d30 g     F .text	00000078 i2c_stop
80215024 g     F .text	00000718 .hidden __muldf3
8020fa34 g     F .text	00000054 __sread
8021af1c g     F .text	00000108 alt_find_file
8021a468 g     F .text	000000a4 alt_dev_llist_insert
80216814 g     F .text	00000024 __malloc_lock
802169f8 g     F .text	000000b0 sbrk
802066bc g     F .text	000021d8 ___svfprintf_internal_r
8020c75c g     F .text	0000005c _fflush_r
80212754 g     F .text	000000c4 _calloc_r
8021f0f8 g       *ABS*	00000000 __bss_start
8020e2e4 g     F .text	00000128 memset
80219fd0 g     F .text	00000058 alt_msgdma_open
802057c8 g     F .text	00000248 pattern_createPattern
80205094 g     F .text	0000026c main
8021f144 g     O .bss	00000004 alt_envp
8021f12c g     O .bss	00000004 __malloc_max_total_mem
802197d0 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
80216f64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
80203ed8 g     F .text	00000158 i2c_read
80203450 g     F .text	0000004c crc__CRC8U
80212dd4 g     F .text	00000018 __swbuf
8020fb68 g     F .text	00000008 __sclose
80240000 g       *ABS*	00000000 __alt_heap_limit
80212908 g     F .text	00000014 fclose
8020aeb8 g     F .text	00001688 _dtoa_r
80219bb8 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8020d898 g     F .text	0000080c _malloc_r
80212f48 g     F .text	00000030 __ascii_wctomb
8021f0dc g     O .rwdata	00000004 alt_errno
80219628 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
80204aa8 g     F .text	000004e0 POWER_SPI_RW
8020d478 g     F .text	000000c4 _fwalk
8021b2cc g     F .text	000000c8 putc
80213a84 g     F .text	00000084 .hidden __divsi3
8020cb88 g     F .text	00000124 _malloc_trim_r
8021b660 g       *ABS*	00000000 __CTOR_END__
8020027c g     F .text	000004a4 bDdr2EepromTest
8020fb70 g     F .text	000000dc strcmp
8021b660 g       *ABS*	00000000 __DTOR_LIST__
80214dcc g     F .text	00000088 .hidden __nedf2
80216de4 g     F .text	00000038 alt_irq_init
80216994 g     F .text	00000064 alt_release_fd
8021a260 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
802065b8 g     F .text	0000006c sprintf
80203638 g     F .text	00000078 crc__CRC16
8021ce8a g     O .rodata	00000100 .hidden __clz_tab
802037a0 g     F .text	0000005c crc__CRC32U
8020134c g     F .text	00000538 bDdr2MemoryWriteTest
8021f120 g     O .bss	00000004 _PathLocale
80204978 g     F .text	000000b8 iMsgdmaConstructExtendedMmToMmDescriptor
8021b164 g     F .text	00000014 atexit
802126a0 g     F .text	00000060 _write_r
8020d6b8 g     F .text	00000018 setlocale
80219590 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8021f0b4 g     O .rwdata	00000004 _impure_ptr
8021f13c g     O .bss	00000004 alt_argc
8020c540 g     F .text	0000021c __sflush_r
8021a56c g     F .text	00000060 _do_dtors
8020d6a4 g     F .text	00000008 __locale_cjk_lang
8021f108 g     O .bss	00000004 ESdmaBufferSide
80200020 g       .exceptions	00000000 alt_irq_entry
80203560 g     F .text	00000078 crc__CRC8KOOP
8020ef30 g     F .text	00000064 __ulp
8020cb70 g     F .text	00000018 __fp_unlock_all
8021f0c8 g     O .rwdata	00000008 alt_fs_list
8021f280 g     O .bss	00000400 xSZData
80202610 g     F .text	000000b4 bSdmaInitM1Dma
8020d6d0 g     F .text	0000000c localeconv
8021a65c g     F .text	00000050 alt_ic_isr_register
802062a4 g     F .text	00000034 fwrite
802037fc g     F .text	000000f8 crc__CRC32
8021f0f8 g       *ABS*	00000000 _edata
80217a60 g     F .text	00000060 altera_avalon_uart_read_fd
8021f780 g       *ABS*	00000000 _end
80201294 g     F .text	000000b8 bDdr2SwitchMemory
8021291c g     F .text	00000164 __fputwc
8021743c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
8021a734 g     F .text	0000008c alt_ic_irq_disable
80202780 g     F .text	00000468 bSdmaDmaM1Transfer
8020fa90 g     F .text	0000007c __swrite
8021f0c0 g     O .rwdata	00000004 __malloc_trim_threshold
8020d698 g     F .text	0000000c __locale_msgcharset
80204a6c g     F .text	0000003c iMsgdmaExtendedDescriptorSyncTransfer
8021b178 g     F .text	00000038 exit
8020d53c g     F .text	000000c4 _fwalk_reent
80219968 g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
80205f74 g     F .text	000000f0 .hidden __floatunsisf
8020ed34 g     F .text	000001fc __mdiff
80213b08 g     F .text	00000074 .hidden __modsi3
80240000 g       *ABS*	00000000 __alt_data_end
80200020 g     F .exceptions	00000000 alt_exception
8020cb4c g     F .text	00000004 __sfp_lock_release
802040a8 g     F .text	00000070 bSetPainelLeds
80219108 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
80201884 g     F .text	000004c0 bDdr2MemoryReadTest
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
80218fe8 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
80205300 g     F .text	00000244 vProtocolUsbTestAck
80217ee4 g     F .text	00000054 altera_avalon_uart_close
8020571c g     F .text	00000058 uliLittleToBigEndianPixel
8021b62c g     F .text	00000034 _exit
8021a2d8 g     F .text	0000012c alt_alarm_start
8021f10c g     O .bss	00000004 ESdmaChBufferId
8020d6dc g     F .text	000001bc __smakebuf_r
8021f0ec g     O .rwdata	00000008 alt_msgdma_list
80206624 g     F .text	00000098 strlen
8021ab3c g     F .text	00000154 open
80214e54 g     F .text	000000dc .hidden __gedf2
8021aebc g     F .text	0000003c alt_putchar
8021f0c4 g     O .rwdata	00000004 __wctomb
80211154 g     F .text	00000018 __sprint_r
8021f100 g     O .bss	00000004 pxDmaM2Dev
8021f0f4 g     O .rwdata	00000004 alt_priority_mask
80204f88 g     F .text	000000c8 bSSDisplayConfig
8021a6ac g     F .text	00000088 alt_ic_irq_enable
8020aa8c g     F .text	0000001c __vfprintf_internal
80217f74 g     F .text	000001dc altera_avalon_uart_read
80212f78 g     F .text	0000005c _wctomb_r
8021573c g     F .text	000008fc .hidden __subdf3
8020e768 g     F .text	000000b0 __lo0bits
8021f0e4 g     O .rwdata	00000008 alt_alarm_list
8021a50c g     F .text	00000060 _do_ctors
80212e88 g     F .text	000000c0 wcrtomb
802163a0 g     F .text	000000d0 close
80212aa4 g     F .text	00000080 fputwc
8020cb50 g     F .text	00000004 __sinit_lock_acquire
8020e4dc g     F .text	00000120 __multadd
8020e4b4 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

80200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8020002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8020003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8020004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8020005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8020006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8020007c:	10000326 	beq	r2,zero,8020008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80200080:	20000226 	beq	r4,zero,8020008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80200084:	02000fc0 	call	802000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80200088:	00000706 	br	802000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8020008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80200098:	02001d00 	call	802001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8020009c:	1000021e 	bne	r2,zero,802000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
802000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
802000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
802000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
802000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
802000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
802000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
802000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
802000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
802000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
802000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
802000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
802000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
802000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
802000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
802000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
802000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
802000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
802000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
802000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
802000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
802000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
802000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
802000f8:	ef80083a 	eret

802000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
802000fc:	defff904 	addi	sp,sp,-28
80200100:	dfc00615 	stw	ra,24(sp)
80200104:	df000515 	stw	fp,20(sp)
80200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8020010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80200110:	0005313a 	rdctl	r2,ipending
80200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8020011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80200124:	00800044 	movi	r2,1
80200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8020012c:	e0fffb17 	ldw	r3,-20(fp)
80200130:	e0bffc17 	ldw	r2,-16(fp)
80200134:	1884703a 	and	r2,r3,r2
80200138:	10001426 	beq	r2,zero,8020018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8020013c:	00a008b4 	movhi	r2,32802
80200140:	10bda004 	addi	r2,r2,-2432
80200144:	e0fffd17 	ldw	r3,-12(fp)
80200148:	180690fa 	slli	r3,r3,3
8020014c:	10c5883a 	add	r2,r2,r3
80200150:	10c00017 	ldw	r3,0(r2)
80200154:	00a008b4 	movhi	r2,32802
80200158:	10bda004 	addi	r2,r2,-2432
8020015c:	e13ffd17 	ldw	r4,-12(fp)
80200160:	200890fa 	slli	r4,r4,3
80200164:	1105883a 	add	r2,r2,r4
80200168:	10800104 	addi	r2,r2,4
8020016c:	10800017 	ldw	r2,0(r2)
80200170:	1009883a 	mov	r4,r2
80200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8020017c:	0005313a 	rdctl	r2,ipending
80200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80200184:	e0bfff17 	ldw	r2,-4(fp)
80200188:	00000706 	br	802001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8020018c:	e0bffc17 	ldw	r2,-16(fp)
80200190:	1085883a 	add	r2,r2,r2
80200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80200198:	e0bffd17 	ldw	r2,-12(fp)
8020019c:	10800044 	addi	r2,r2,1
802001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
802001a4:	003fe106 	br	8020012c <__reset+0xfa1e012c>

    active = alt_irq_pending ();
802001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
802001ac:	e0bffb17 	ldw	r2,-20(fp)
802001b0:	103fdb1e 	bne	r2,zero,80200120 <__reset+0xfa1e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
802001b4:	0001883a 	nop
}
802001b8:	0001883a 	nop
802001bc:	e037883a 	mov	sp,fp
802001c0:	dfc00117 	ldw	ra,4(sp)
802001c4:	df000017 	ldw	fp,0(sp)
802001c8:	dec00204 	addi	sp,sp,8
802001cc:	f800283a 	ret

802001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
802001d0:	defffb04 	addi	sp,sp,-20
802001d4:	dfc00415 	stw	ra,16(sp)
802001d8:	df000315 	stw	fp,12(sp)
802001dc:	df000304 	addi	fp,sp,12
802001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
802001e4:	000531fa 	rdctl	r2,exception
802001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
802001ec:	e0bffd17 	ldw	r2,-12(fp)
802001f0:	10801f0c 	andi	r2,r2,124
802001f4:	1004d0ba 	srli	r2,r2,2
802001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
802001fc:	0005333a 	rdctl	r2,badaddr
80200200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80200204:	d0a02a17 	ldw	r2,-32600(gp)
80200208:	10000726 	beq	r2,zero,80200228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8020020c:	d0a02a17 	ldw	r2,-32600(gp)
80200210:	e0fffd17 	ldw	r3,-12(fp)
80200214:	e1bffe17 	ldw	r6,-8(fp)
80200218:	e17fff17 	ldw	r5,-4(fp)
8020021c:	1809883a 	mov	r4,r3
80200220:	103ee83a 	callr	r2
80200224:	00000206 	br	80200230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80200228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8020022c:	0005883a 	mov	r2,zero
}
80200230:	e037883a 	mov	sp,fp
80200234:	dfc00117 	ldw	ra,4(sp)
80200238:	df000017 	ldw	fp,0(sp)
8020023c:	dec00204 	addi	sp,sp,8
80200240:	f800283a 	ret

Disassembly of section .text:

80200244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80200244:	06e00934 	movhi	sp,32804
    ori sp, sp, %lo(__alt_stack_pointer)
80200248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
8020024c:	06a008b4 	movhi	gp,32802
    ori gp, gp, %lo(_gp)
80200250:	d69c2b14 	ori	gp,gp,28844
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80200254:	00a00874 	movhi	r2,32801
    ori r2, r2, %lo(__bss_start)
80200258:	10bc3e14 	ori	r2,r2,61688

    movhi r3, %hi(__bss_end)
8020025c:	00e00874 	movhi	r3,32801
    ori r3, r3, %lo(__bss_end)
80200260:	18fde014 	ori	r3,r3,63360

    beq r2, r3, 1f
80200264:	10c00326 	beq	r2,r3,80200274 <_start+0x30>

0:
    stw zero, (r2)
80200268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8020026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80200270:	10fffd36 	bltu	r2,r3,80200268 <__reset+0xfa1e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80200274:	02167980 	call	80216798 <alt_main>

80200278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
80200278:	003fff06 	br	80200278 <__reset+0xfa1e0278>

8020027c <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
8020027c:	defff604 	addi	sp,sp,-40
80200280:	dfc00915 	stw	ra,36(sp)
80200284:	df000815 	stw	fp,32(sp)
80200288:	df000804 	addi	fp,sp,32
8020028c:	2005883a 	mov	r2,r4
80200290:	e0bfff05 	stb	r2,-4(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
80200294:	00e008b4 	movhi	r3,32802
80200298:	18fc6004 	addi	r3,r3,-3712
8020029c:	00a008b4 	movhi	r2,32802
802002a0:	10ad9804 	addi	r2,r2,-18848
802002a4:	1009883a 	mov	r4,r2
802002a8:	00800884 	movi	r2,34
802002ac:	100d883a 	mov	r6,r2
802002b0:	200b883a 	mov	r5,r4
802002b4:	1809883a 	mov	r4,r3
802002b8:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
802002bc:	012008b4 	movhi	r4,32802
802002c0:	213c6004 	addi	r4,r4,-3712
802002c4:	02064500 	call	80206450 <printf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
802002c8:	00bfe804 	movi	r2,-96
802002cc:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess = FALSE;
802002d0:	e03ff915 	stw	zero,-28(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
802002d4:	e0bfff03 	ldbu	r2,-4(fp)
802002d8:	10000326 	beq	r2,zero,802002e8 <bDdr2EepromTest+0x6c>
802002dc:	10800060 	cmpeqi	r2,r2,1
802002e0:	10000a1e 	bne	r2,zero,8020030c <bDdr2EepromTest+0x90>
802002e4:	00001206 	br	80200330 <bDdr2EepromTest+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
802002e8:	00a04034 	movhi	r2,33024
802002ec:	10816c04 	addi	r2,r2,1456
802002f0:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
802002f4:	00a04034 	movhi	r2,33024
802002f8:	10817004 	addi	r2,r2,1472
802002fc:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
80200300:	00800044 	movi	r2,1
80200304:	e0bff915 	stw	r2,-28(fp)
		break;
80200308:	00001906 	br	80200370 <bDdr2EepromTest+0xf4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
8020030c:	00a04034 	movhi	r2,33024
80200310:	10814804 	addi	r2,r2,1312
80200314:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
80200318:	00a04034 	movhi	r2,33024
8020031c:	10814c04 	addi	r2,r2,1328
80200320:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
80200324:	00800044 	movi	r2,1
80200328:	e0bff915 	stw	r2,-28(fp)
		break;
8020032c:	00001006 	br	80200370 <bDdr2EepromTest+0xf4>
	default:
		bSuccess = FALSE;
80200330:	e03ff915 	stw	zero,-28(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80200334:	00e008b4 	movhi	r3,32802
80200338:	18fc6004 	addi	r3,r3,-3712
8020033c:	00a008b4 	movhi	r2,32802
80200340:	10ada104 	addi	r2,r2,-18812
80200344:	1009883a 	mov	r4,r2
80200348:	00800bc4 	movi	r2,47
8020034c:	100d883a 	mov	r6,r2
80200350:	200b883a 	mov	r5,r4
80200354:	1809883a 	mov	r4,r3
80200358:	02062d80 	call	802062d8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020035c:	012008b4 	movhi	r4,32802
80200360:	213c6004 	addi	r4,r4,-3712
80200364:	02064500 	call	80206450 <printf>
		;
#endif
		return bSuccess;
80200368:	e0bff917 	ldw	r2,-28(fp)
8020036c:	0000e706 	br	8020070c <bDdr2EepromTest+0x490>
	}

	alt_u8 ucControlAddr, ucValue;
#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
80200370:	00e008b4 	movhi	r3,32802
80200374:	18fc6004 	addi	r3,r3,-3712
80200378:	00a008b4 	movhi	r2,32802
8020037c:	10adad04 	addi	r2,r2,-18764
80200380:	1009883a 	mov	r4,r2
80200384:	008005c4 	movi	r2,23
80200388:	100d883a 	mov	r6,r2
8020038c:	200b883a 	mov	r5,r4
80200390:	1809883a 	mov	r4,r3
80200394:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
80200398:	012008b4 	movhi	r4,32802
8020039c:	213c6004 	addi	r4,r4,-3712
802003a0:	02064500 	call	80206450 <printf>
#endif
	usleep(20 * 1000);
802003a4:	01138804 	movi	r4,20000
802003a8:	0216c4c0 	call	80216c4c <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
802003ac:	e03ffc15 	stw	zero,-16(fp)
802003b0:	00002f06 	br	80200470 <bDdr2EepromTest+0x1f4>
		ucControlAddr = iI;
802003b4:	e0bffc17 	ldw	r2,-16(fp)
802003b8:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
802003bc:	e0bffd03 	ldbu	r2,-12(fp)
802003c0:	10c03fcc 	andi	r3,r2,255
802003c4:	18c0201c 	xori	r3,r3,128
802003c8:	18ffe004 	addi	r3,r3,-128
802003cc:	e13ffd43 	ldbu	r4,-11(fp)
802003d0:	e0bffe04 	addi	r2,fp,-8
802003d4:	d8800015 	stw	r2,0(sp)
802003d8:	200f883a 	mov	r7,r4
802003dc:	180d883a 	mov	r6,r3
802003e0:	e17ffb17 	ldw	r5,-20(fp)
802003e4:	e13ffa17 	ldw	r4,-24(fp)
802003e8:	0203a4c0 	call	80203a4c <I2C_Read>
802003ec:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
802003f0:	e0bff917 	ldw	r2,-28(fp)
802003f4:	10000e26 	beq	r2,zero,80200430 <bDdr2EepromTest+0x1b4>
#if DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
802003f8:	e0bffd43 	ldbu	r2,-11(fp)
802003fc:	e0fffe03 	ldbu	r3,-8(fp)
80200400:	18c03fcc 	andi	r3,r3,255
80200404:	180f883a 	mov	r7,r3
80200408:	100d883a 	mov	r6,r2
8020040c:	016008b4 	movhi	r5,32802
80200410:	296db304 	addi	r5,r5,-18740
80200414:	012008b4 	movhi	r4,32802
80200418:	213c6004 	addi	r4,r4,-3712
8020041c:	02065b80 	call	802065b8 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
80200420:	012008b4 	movhi	r4,32802
80200424:	213c6004 	addi	r4,r4,-3712
80200428:	02064500 	call	80206450 <printf>
8020042c:	00000d06 	br	80200464 <bDdr2EepromTest+0x1e8>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
80200430:	00e008b4 	movhi	r3,32802
80200434:	18fc6004 	addi	r3,r3,-3712
80200438:	00a008b4 	movhi	r2,32802
8020043c:	10adb804 	addi	r2,r2,-18720
80200440:	1009883a 	mov	r4,r2
80200444:	008005c4 	movi	r2,23
80200448:	100d883a 	mov	r6,r2
8020044c:	200b883a 	mov	r5,r4
80200450:	1809883a 	mov	r4,r3
80200454:	02062d80 	call	802062d8 <memcpy>
			debug(fp, cDebugBuffer);
80200458:	012008b4 	movhi	r4,32802
8020045c:	213c6004 	addi	r4,r4,-3712
80200460:	02064500 	call	80206450 <printf>
#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
80200464:	e0bffc17 	ldw	r2,-16(fp)
80200468:	10800044 	addi	r2,r2,1
8020046c:	e0bffc15 	stw	r2,-16(fp)
80200470:	e0bffc17 	ldw	r2,-16(fp)
80200474:	10804008 	cmpgei	r2,r2,256
80200478:	1000021e 	bne	r2,zero,80200484 <bDdr2EepromTest+0x208>
8020047c:	e0bff917 	ldw	r2,-28(fp)
80200480:	103fcc1e 	bne	r2,zero,802003b4 <__reset+0xfa1e03b4>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
80200484:	e0bff917 	ldw	r2,-28(fp)
80200488:	10000e26 	beq	r2,zero,802004c4 <bDdr2EepromTest+0x248>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
8020048c:	00e008b4 	movhi	r3,32802
80200490:	18fc6004 	addi	r3,r3,-3712
80200494:	00a008b4 	movhi	r2,32802
80200498:	10adbe04 	addi	r2,r2,-18696
8020049c:	1009883a 	mov	r4,r2
802004a0:	00800884 	movi	r2,34
802004a4:	100d883a 	mov	r6,r2
802004a8:	200b883a 	mov	r5,r4
802004ac:	1809883a 	mov	r4,r3
802004b0:	02062d80 	call	802062d8 <memcpy>
		debug(fp, cDebugBuffer);
802004b4:	012008b4 	movhi	r4,32802
802004b8:	213c6004 	addi	r4,r4,-3712
802004bc:	02064500 	call	80206450 <printf>
802004c0:	00000d06 	br	802004f8 <bDdr2EepromTest+0x27c>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
802004c4:	00e008b4 	movhi	r3,32802
802004c8:	18fc6004 	addi	r3,r3,-3712
802004cc:	00a008b4 	movhi	r2,32802
802004d0:	10adc704 	addi	r2,r2,-18660
802004d4:	1009883a 	mov	r4,r2
802004d8:	008007c4 	movi	r2,31
802004dc:	100d883a 	mov	r6,r2
802004e0:	200b883a 	mov	r5,r4
802004e4:	1809883a 	mov	r4,r3
802004e8:	02062d80 	call	802062d8 <memcpy>
		debug(fp, cDebugBuffer);
802004ec:	012008b4 	movhi	r4,32802
802004f0:	213c6004 	addi	r4,r4,-3712
802004f4:	02064500 	call	80206450 <printf>
#endif
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
802004f8:	00e008b4 	movhi	r3,32802
802004fc:	18fc6004 	addi	r3,r3,-3712
80200500:	00a008b4 	movhi	r2,32802
80200504:	10adcf04 	addi	r2,r2,-18628
80200508:	1009883a 	mov	r4,r2
8020050c:	00800604 	movi	r2,24
80200510:	100d883a 	mov	r6,r2
80200514:	200b883a 	mov	r5,r4
80200518:	1809883a 	mov	r4,r3
8020051c:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
80200520:	012008b4 	movhi	r4,32802
80200524:	213c6004 	addi	r4,r4,-3712
80200528:	02064500 	call	80206450 <printf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
8020052c:	00800484 	movi	r2,18
80200530:	e0bffd85 	stb	r2,-10(fp)
80200534:	00bfe004 	movi	r2,-128
80200538:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
8020053c:	01138804 	movi	r4,20000
80200540:	0216c4c0 	call	80216c4c <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
80200544:	e0bffd03 	ldbu	r2,-12(fp)
80200548:	10c03fcc 	andi	r3,r2,255
8020054c:	18c0201c 	xori	r3,r3,128
80200550:	18ffe004 	addi	r3,r3,-128
80200554:	e13ffdc3 	ldbu	r4,-9(fp)
80200558:	e0bffd83 	ldbu	r2,-10(fp)
8020055c:	d8800015 	stw	r2,0(sp)
80200560:	200f883a 	mov	r7,r4
80200564:	180d883a 	mov	r6,r3
80200568:	e17ffb17 	ldw	r5,-20(fp)
8020056c:	e13ffa17 	ldw	r4,-24(fp)
80200570:	02039740 	call	80203974 <I2C_Write>
80200574:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
80200578:	e0bff917 	ldw	r2,-28(fp)
8020057c:	10000e1e 	bne	r2,zero,802005b8 <bDdr2EepromTest+0x33c>
#if DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
80200580:	00e008b4 	movhi	r3,32802
80200584:	18fc6004 	addi	r3,r3,-3712
80200588:	00a008b4 	movhi	r2,32802
8020058c:	10add504 	addi	r2,r2,-18604
80200590:	1009883a 	mov	r4,r2
80200594:	00800604 	movi	r2,24
80200598:	100d883a 	mov	r6,r2
8020059c:	200b883a 	mov	r5,r4
802005a0:	1809883a 	mov	r4,r3
802005a4:	02062d80 	call	802062d8 <memcpy>
		debug(fp, cDebugBuffer);
802005a8:	012008b4 	movhi	r4,32802
802005ac:	213c6004 	addi	r4,r4,-3712
802005b0:	02064500 	call	80206450 <printf>
802005b4:	00002f06 	br	80200674 <bDdr2EepromTest+0x3f8>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
802005b8:	e0bffd03 	ldbu	r2,-12(fp)
802005bc:	10c03fcc 	andi	r3,r2,255
802005c0:	18c0201c 	xori	r3,r3,128
802005c4:	18ffe004 	addi	r3,r3,-128
802005c8:	e13ffdc3 	ldbu	r4,-9(fp)
802005cc:	e0bffe44 	addi	r2,fp,-7
802005d0:	d8800015 	stw	r2,0(sp)
802005d4:	200f883a 	mov	r7,r4
802005d8:	180d883a 	mov	r6,r3
802005dc:	e17ffb17 	ldw	r5,-20(fp)
802005e0:	e13ffa17 	ldw	r4,-24(fp)
802005e4:	0203a4c0 	call	80203a4c <I2C_Read>
802005e8:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
802005ec:	e0bff917 	ldw	r2,-28(fp)
802005f0:	10000e1e 	bne	r2,zero,8020062c <bDdr2EepromTest+0x3b0>
#if DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
802005f4:	00e008b4 	movhi	r3,32802
802005f8:	18fc6004 	addi	r3,r3,-3712
802005fc:	00a008b4 	movhi	r2,32802
80200600:	10addb04 	addi	r2,r2,-18580
80200604:	1009883a 	mov	r4,r2
80200608:	00800884 	movi	r2,34
8020060c:	100d883a 	mov	r6,r2
80200610:	200b883a 	mov	r5,r4
80200614:	1809883a 	mov	r4,r3
80200618:	02062d80 	call	802062d8 <memcpy>
			debug(fp, cDebugBuffer);
8020061c:	012008b4 	movhi	r4,32802
80200620:	213c6004 	addi	r4,r4,-3712
80200624:	02064500 	call	80206450 <printf>
80200628:	00001206 	br	80200674 <bDdr2EepromTest+0x3f8>
#endif
		} else {
			if (ucReadData != ucWriteData) {
8020062c:	e0bffe43 	ldbu	r2,-7(fp)
80200630:	10c03fcc 	andi	r3,r2,255
80200634:	e0bffd83 	ldbu	r2,-10(fp)
80200638:	18800e26 	beq	r3,r2,80200674 <bDdr2EepromTest+0x3f8>
				bSuccess = FALSE;
8020063c:	e03ff915 	stw	zero,-28(fp)
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200640:	e0bffe43 	ldbu	r2,-7(fp)
80200644:	10803fcc 	andi	r2,r2,255
80200648:	e0fffd83 	ldbu	r3,-10(fp)
8020064c:	180f883a 	mov	r7,r3
80200650:	100d883a 	mov	r6,r2
80200654:	016008b4 	movhi	r5,32802
80200658:	296de404 	addi	r5,r5,-18544
8020065c:	012008b4 	movhi	r4,32802
80200660:	213c6004 	addi	r4,r4,-3712
80200664:	02065b80 	call	802065b8 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
80200668:	012008b4 	movhi	r4,32802
8020066c:	213c6004 	addi	r4,r4,-3712
80200670:	02064500 	call	80206450 <printf>
#endif
			}
		}
	}
	if (bSuccess) {
80200674:	e0bff917 	ldw	r2,-28(fp)
80200678:	10000e26 	beq	r2,zero,802006b4 <bDdr2EepromTest+0x438>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
8020067c:	00e008b4 	movhi	r3,32802
80200680:	18fc6004 	addi	r3,r3,-3712
80200684:	00a008b4 	movhi	r2,32802
80200688:	10adf304 	addi	r2,r2,-18484
8020068c:	1009883a 	mov	r4,r2
80200690:	008008c4 	movi	r2,35
80200694:	100d883a 	mov	r6,r2
80200698:	200b883a 	mov	r5,r4
8020069c:	1809883a 	mov	r4,r3
802006a0:	02062d80 	call	802062d8 <memcpy>
		debug(fp, cDebugBuffer);
802006a4:	012008b4 	movhi	r4,32802
802006a8:	213c6004 	addi	r4,r4,-3712
802006ac:	02064500 	call	80206450 <printf>
802006b0:	00000d06 	br	802006e8 <bDdr2EepromTest+0x46c>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
802006b4:	00e008b4 	movhi	r3,32802
802006b8:	18fc6004 	addi	r3,r3,-3712
802006bc:	00a008b4 	movhi	r2,32802
802006c0:	10adfc04 	addi	r2,r2,-18448
802006c4:	1009883a 	mov	r4,r2
802006c8:	00800804 	movi	r2,32
802006cc:	100d883a 	mov	r6,r2
802006d0:	200b883a 	mov	r5,r4
802006d4:	1809883a 	mov	r4,r3
802006d8:	02062d80 	call	802062d8 <memcpy>
		debug(fp, cDebugBuffer);
802006dc:	012008b4 	movhi	r4,32802
802006e0:	213c6004 	addi	r4,r4,-3712
802006e4:	02064500 	call	80206450 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
802006e8:	00a008b4 	movhi	r2,32802
802006ec:	10bc6004 	addi	r2,r2,-3712
802006f0:	00c00284 	movi	r3,10
802006f4:	10c00005 	stb	r3,0(r2)
802006f8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
802006fc:	012008b4 	movhi	r4,32802
80200700:	213c6004 	addi	r4,r4,-3712
80200704:	02064500 	call	80206450 <printf>
#endif

	return bSuccess;
80200708:	e0bff917 	ldw	r2,-28(fp)
}
8020070c:	e037883a 	mov	sp,fp
80200710:	dfc00117 	ldw	ra,4(sp)
80200714:	df000017 	ldw	fp,0(sp)
80200718:	dec00204 	addi	sp,sp,8
8020071c:	f800283a 	ret

80200720 <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
80200720:	deffb704 	addi	sp,sp,-292
80200724:	dfc04815 	stw	ra,288(sp)
80200728:	df004715 	stw	fp,284(sp)
8020072c:	df004704 	addi	fp,sp,284
80200730:	2005883a 	mov	r2,r4
80200734:	e0bfff05 	stb	r2,-4(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
80200738:	00e008b4 	movhi	r3,32802
8020073c:	18fc6004 	addi	r3,r3,-3712
80200740:	00a008b4 	movhi	r2,32802
80200744:	10ae0404 	addi	r2,r2,-18416
80200748:	1009883a 	mov	r4,r2
8020074c:	00800884 	movi	r2,34
80200750:	100d883a 	mov	r6,r2
80200754:	200b883a 	mov	r5,r4
80200758:	1809883a 	mov	r4,r3
8020075c:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
80200760:	012008b4 	movhi	r4,32802
80200764:	213c6004 	addi	r4,r4,-3712
80200768:	02064500 	call	80206450 <printf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
8020076c:	00bfe804 	movi	r2,-96
80200770:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess = FALSE;
80200774:	e03fbe15 	stw	zero,-264(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
80200778:	e0bfff03 	ldbu	r2,-4(fp)
8020077c:	10000326 	beq	r2,zero,8020078c <bDdr2EepromDump+0x6c>
80200780:	10800060 	cmpeqi	r2,r2,1
80200784:	10000a1e 	bne	r2,zero,802007b0 <bDdr2EepromDump+0x90>
80200788:	00001206 	br	802007d4 <bDdr2EepromDump+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8020078c:	00a04034 	movhi	r2,33024
80200790:	10816c04 	addi	r2,r2,1456
80200794:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
80200798:	00a04034 	movhi	r2,33024
8020079c:	10817004 	addi	r2,r2,1472
802007a0:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
802007a4:	00800044 	movi	r2,1
802007a8:	e0bfbe15 	stw	r2,-264(fp)
		break;
802007ac:	00001906 	br	80200814 <bDdr2EepromDump+0xf4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
802007b0:	00a04034 	movhi	r2,33024
802007b4:	10814804 	addi	r2,r2,1312
802007b8:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
802007bc:	00a04034 	movhi	r2,33024
802007c0:	10814c04 	addi	r2,r2,1328
802007c4:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
802007c8:	00800044 	movi	r2,1
802007cc:	e0bfbe15 	stw	r2,-264(fp)
		break;
802007d0:	00001006 	br	80200814 <bDdr2EepromDump+0xf4>
	default:
		bSuccess = FALSE;
802007d4:	e03fbe15 	stw	zero,-264(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
802007d8:	00e008b4 	movhi	r3,32802
802007dc:	18fc6004 	addi	r3,r3,-3712
802007e0:	00a008b4 	movhi	r2,32802
802007e4:	10ae0d04 	addi	r2,r2,-18380
802007e8:	1009883a 	mov	r4,r2
802007ec:	00800bc4 	movi	r2,47
802007f0:	100d883a 	mov	r6,r2
802007f4:	200b883a 	mov	r5,r4
802007f8:	1809883a 	mov	r4,r3
802007fc:	02062d80 	call	802062d8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
80200800:	012008b4 	movhi	r4,32802
80200804:	213c6004 	addi	r4,r4,-3712
80200808:	02064500 	call	80206450 <printf>
		;
#endif
		return bSuccess;
8020080c:	e0bfbe17 	ldw	r2,-264(fp)
80200810:	00029b06 	br	80201280 <bDdr2EepromDump+0xb60>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
80200814:	e0bfbd03 	ldbu	r2,-268(fp)
80200818:	10c03fcc 	andi	r3,r2,255
8020081c:	18c0201c 	xori	r3,r3,128
80200820:	18ffe004 	addi	r3,r3,-128
80200824:	e13fbf04 	addi	r4,fp,-260
80200828:	00804004 	movi	r2,256
8020082c:	d8800015 	stw	r2,0(sp)
80200830:	200f883a 	mov	r7,r4
80200834:	180d883a 	mov	r6,r3
80200838:	e17fbb17 	ldw	r5,-276(fp)
8020083c:	e13fba17 	ldw	r4,-280(fp)
80200840:	0203b4c0 	call	80203b4c <I2C_MultipleRead>
80200844:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
80200848:	e0bfbe17 	ldw	r2,-264(fp)
8020084c:	10027626 	beq	r2,zero,80201228 <bDdr2EepromDump+0xb08>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
80200850:	e03fbc15 	stw	zero,-272(fp)
80200854:	00026e06 	br	80201210 <bDdr2EepromDump+0xaf0>
			if (iI == 0) {
80200858:	e0bfbc17 	ldw	r2,-272(fp)
8020085c:	1000101e 	bne	r2,zero,802008a0 <bDdr2EepromDump+0x180>
#if DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
80200860:	e0ffbf04 	addi	r3,fp,-260
80200864:	e0bfbc17 	ldw	r2,-272(fp)
80200868:	1885883a 	add	r2,r3,r2
8020086c:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200870:	10803fcc 	andi	r2,r2,255
80200874:	100f883a 	mov	r7,r2
80200878:	e1bfbc17 	ldw	r6,-272(fp)
8020087c:	016008b4 	movhi	r5,32802
80200880:	296e1904 	addi	r5,r5,-18332
80200884:	012008b4 	movhi	r4,32802
80200888:	213c6004 	addi	r4,r4,-3712
8020088c:	02065b80 	call	802065b8 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
80200890:	012008b4 	movhi	r4,32802
80200894:	213c6004 	addi	r4,r4,-3712
80200898:	02064500 	call	80206450 <printf>
8020089c:	00025906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 1) {
802008a0:	e0bfbc17 	ldw	r2,-272(fp)
802008a4:	10800058 	cmpnei	r2,r2,1
802008a8:	10000e1e 	bne	r2,zero,802008e4 <bDdr2EepromDump+0x1c4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802008ac:	00e008b4 	movhi	r3,32802
802008b0:	18fc6004 	addi	r3,r3,-3712
802008b4:	00a008b4 	movhi	r2,32802
802008b8:	10ae2504 	addi	r2,r2,-18284
802008bc:	1009883a 	mov	r4,r2
802008c0:	00800c04 	movi	r2,48
802008c4:	100d883a 	mov	r6,r2
802008c8:	200b883a 	mov	r5,r4
802008cc:	1809883a 	mov	r4,r3
802008d0:	02062d80 	call	802062d8 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
802008d4:	012008b4 	movhi	r4,32802
802008d8:	213c6004 	addi	r4,r4,-3712
802008dc:	02064500 	call	80206450 <printf>
802008e0:	00024806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 2) {
802008e4:	e0bfbc17 	ldw	r2,-272(fp)
802008e8:	10800098 	cmpnei	r2,r2,2
802008ec:	10000e1e 	bne	r2,zero,80200928 <bDdr2EepromDump+0x208>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
802008f0:	00e008b4 	movhi	r3,32802
802008f4:	18fc6004 	addi	r3,r3,-3712
802008f8:	00a008b4 	movhi	r2,32802
802008fc:	10ae3104 	addi	r2,r2,-18236
80200900:	1009883a 	mov	r4,r2
80200904:	008007c4 	movi	r2,31
80200908:	100d883a 	mov	r6,r2
8020090c:	200b883a 	mov	r5,r4
80200910:	1809883a 	mov	r4,r3
80200914:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
80200918:	012008b4 	movhi	r4,32802
8020091c:	213c6004 	addi	r4,r4,-3712
80200920:	02064500 	call	80206450 <printf>
80200924:	00023706 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 3) {
80200928:	e0bfbc17 	ldw	r2,-272(fp)
8020092c:	108000d8 	cmpnei	r2,r2,3
80200930:	10000e1e 	bne	r2,zero,8020096c <bDdr2EepromDump+0x24c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200934:	00e008b4 	movhi	r3,32802
80200938:	18fc6004 	addi	r3,r3,-3712
8020093c:	00a008b4 	movhi	r2,32802
80200940:	10ae3904 	addi	r2,r2,-18204
80200944:	1009883a 	mov	r4,r2
80200948:	008009c4 	movi	r2,39
8020094c:	100d883a 	mov	r6,r2
80200950:	200b883a 	mov	r5,r4
80200954:	1809883a 	mov	r4,r3
80200958:	02062d80 	call	802062d8 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
8020095c:	012008b4 	movhi	r4,32802
80200960:	213c6004 	addi	r4,r4,-3712
80200964:	02064500 	call	80206450 <printf>
80200968:	00022606 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 4) {
8020096c:	e0bfbc17 	ldw	r2,-272(fp)
80200970:	10800118 	cmpnei	r2,r2,4
80200974:	10000e1e 	bne	r2,zero,802009b0 <bDdr2EepromDump+0x290>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200978:	00e008b4 	movhi	r3,32802
8020097c:	18fc6004 	addi	r3,r3,-3712
80200980:	00a008b4 	movhi	r2,32802
80200984:	10ae4304 	addi	r2,r2,-18164
80200988:	1009883a 	mov	r4,r2
8020098c:	00800a84 	movi	r2,42
80200990:	100d883a 	mov	r6,r2
80200994:	200b883a 	mov	r5,r4
80200998:	1809883a 	mov	r4,r3
8020099c:	02062d80 	call	802062d8 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
802009a0:	012008b4 	movhi	r4,32802
802009a4:	213c6004 	addi	r4,r4,-3712
802009a8:	02064500 	call	80206450 <printf>
802009ac:	00021506 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 5) {
802009b0:	e0bfbc17 	ldw	r2,-272(fp)
802009b4:	10800158 	cmpnei	r2,r2,5
802009b8:	10000e1e 	bne	r2,zero,802009f4 <bDdr2EepromDump+0x2d4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802009bc:	00e008b4 	movhi	r3,32802
802009c0:	18fc6004 	addi	r3,r3,-3712
802009c4:	00a008b4 	movhi	r2,32802
802009c8:	10ae4e04 	addi	r2,r2,-18120
802009cc:	1009883a 	mov	r4,r2
802009d0:	00800c04 	movi	r2,48
802009d4:	100d883a 	mov	r6,r2
802009d8:	200b883a 	mov	r5,r4
802009dc:	1809883a 	mov	r4,r3
802009e0:	02062d80 	call	802062d8 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
802009e4:	012008b4 	movhi	r4,32802
802009e8:	213c6004 	addi	r4,r4,-3712
802009ec:	02064500 	call	80206450 <printf>
802009f0:	00020406 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 6) {
802009f4:	e0bfbc17 	ldw	r2,-272(fp)
802009f8:	10800198 	cmpnei	r2,r2,6
802009fc:	10000e1e 	bne	r2,zero,80200a38 <bDdr2EepromDump+0x318>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
80200a00:	00e008b4 	movhi	r3,32802
80200a04:	18fc6004 	addi	r3,r3,-3712
80200a08:	00a008b4 	movhi	r2,32802
80200a0c:	10ae5a04 	addi	r2,r2,-18072
80200a10:	1009883a 	mov	r4,r2
80200a14:	00800544 	movi	r2,21
80200a18:	100d883a 	mov	r6,r2
80200a1c:	200b883a 	mov	r5,r4
80200a20:	1809883a 	mov	r4,r3
80200a24:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
80200a28:	012008b4 	movhi	r4,32802
80200a2c:	213c6004 	addi	r4,r4,-3712
80200a30:	02064500 	call	80206450 <printf>
80200a34:	0001f306 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 7) {
80200a38:	e0bfbc17 	ldw	r2,-272(fp)
80200a3c:	108001d8 	cmpnei	r2,r2,7
80200a40:	10000e1e 	bne	r2,zero,80200a7c <bDdr2EepromDump+0x35c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
80200a44:	00e008b4 	movhi	r3,32802
80200a48:	18fc6004 	addi	r3,r3,-3712
80200a4c:	00a008b4 	movhi	r2,32802
80200a50:	10ae6004 	addi	r2,r2,-18048
80200a54:	1009883a 	mov	r4,r2
80200a58:	00800804 	movi	r2,32
80200a5c:	100d883a 	mov	r6,r2
80200a60:	200b883a 	mov	r5,r4
80200a64:	1809883a 	mov	r4,r3
80200a68:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
80200a6c:	012008b4 	movhi	r4,32802
80200a70:	213c6004 	addi	r4,r4,-3712
80200a74:	02064500 	call	80206450 <printf>
80200a78:	0001e206 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 16) {
80200a7c:	e0bfbc17 	ldw	r2,-272(fp)
80200a80:	10800418 	cmpnei	r2,r2,16
80200a84:	10000e1e 	bne	r2,zero,80200ac0 <bDdr2EepromDump+0x3a0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200a88:	00e008b4 	movhi	r3,32802
80200a8c:	18fc6004 	addi	r3,r3,-3712
80200a90:	00a008b4 	movhi	r2,32802
80200a94:	10ae6804 	addi	r2,r2,-18016
80200a98:	1009883a 	mov	r4,r2
80200a9c:	00800d04 	movi	r2,52
80200aa0:	100d883a 	mov	r6,r2
80200aa4:	200b883a 	mov	r5,r4
80200aa8:	1809883a 	mov	r4,r3
80200aac:	02062d80 	call	802062d8 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
80200ab0:	012008b4 	movhi	r4,32802
80200ab4:	213c6004 	addi	r4,r4,-3712
80200ab8:	02064500 	call	80206450 <printf>
80200abc:	0001d106 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 13) {
80200ac0:	e0bfbc17 	ldw	r2,-272(fp)
80200ac4:	10800358 	cmpnei	r2,r2,13
80200ac8:	10000e1e 	bne	r2,zero,80200b04 <bDdr2EepromDump+0x3e4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
80200acc:	00e008b4 	movhi	r3,32802
80200ad0:	18fc6004 	addi	r3,r3,-3712
80200ad4:	00a008b4 	movhi	r2,32802
80200ad8:	10ae7504 	addi	r2,r2,-17964
80200adc:	1009883a 	mov	r4,r2
80200ae0:	008005c4 	movi	r2,23
80200ae4:	100d883a 	mov	r6,r2
80200ae8:	200b883a 	mov	r5,r4
80200aec:	1809883a 	mov	r4,r3
80200af0:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
80200af4:	012008b4 	movhi	r4,32802
80200af8:	213c6004 	addi	r4,r4,-3712
80200afc:	02064500 	call	80206450 <printf>
80200b00:	0001c006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 14) {
80200b04:	e0bfbc17 	ldw	r2,-272(fp)
80200b08:	10800398 	cmpnei	r2,r2,14
80200b0c:	10000e1e 	bne	r2,zero,80200b48 <bDdr2EepromDump+0x428>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
80200b10:	00e008b4 	movhi	r3,32802
80200b14:	18fc6004 	addi	r3,r3,-3712
80200b18:	00a008b4 	movhi	r2,32802
80200b1c:	10ae7b04 	addi	r2,r2,-17940
80200b20:	1009883a 	mov	r4,r2
80200b24:	008004c4 	movi	r2,19
80200b28:	100d883a 	mov	r6,r2
80200b2c:	200b883a 	mov	r5,r4
80200b30:	1809883a 	mov	r4,r3
80200b34:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
80200b38:	012008b4 	movhi	r4,32802
80200b3c:	213c6004 	addi	r4,r4,-3712
80200b40:	02064500 	call	80206450 <printf>
80200b44:	0001af06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 17) {
80200b48:	e0bfbc17 	ldw	r2,-272(fp)
80200b4c:	10800458 	cmpnei	r2,r2,17
80200b50:	10000e1e 	bne	r2,zero,80200b8c <bDdr2EepromDump+0x46c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
80200b54:	00e008b4 	movhi	r3,32802
80200b58:	18fc6004 	addi	r3,r3,-3712
80200b5c:	00a008b4 	movhi	r2,32802
80200b60:	10ae8004 	addi	r2,r2,-17920
80200b64:	1009883a 	mov	r4,r2
80200b68:	00800684 	movi	r2,26
80200b6c:	100d883a 	mov	r6,r2
80200b70:	200b883a 	mov	r5,r4
80200b74:	1809883a 	mov	r4,r3
80200b78:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
80200b7c:	012008b4 	movhi	r4,32802
80200b80:	213c6004 	addi	r4,r4,-3712
80200b84:	02064500 	call	80206450 <printf>
80200b88:	00019e06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 18) {
80200b8c:	e0bfbc17 	ldw	r2,-272(fp)
80200b90:	10800498 	cmpnei	r2,r2,18
80200b94:	10000e1e 	bne	r2,zero,80200bd0 <bDdr2EepromDump+0x4b0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200b98:	00e008b4 	movhi	r3,32802
80200b9c:	18fc6004 	addi	r3,r3,-3712
80200ba0:	00a008b4 	movhi	r2,32802
80200ba4:	10ae8704 	addi	r2,r2,-17892
80200ba8:	1009883a 	mov	r4,r2
80200bac:	00800d44 	movi	r2,53
80200bb0:	100d883a 	mov	r6,r2
80200bb4:	200b883a 	mov	r5,r4
80200bb8:	1809883a 	mov	r4,r3
80200bbc:	02062d80 	call	802062d8 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
80200bc0:	012008b4 	movhi	r4,32802
80200bc4:	213c6004 	addi	r4,r4,-3712
80200bc8:	02064500 	call	80206450 <printf>
80200bcc:	00018d06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 20) {
80200bd0:	e0bfbc17 	ldw	r2,-272(fp)
80200bd4:	10800518 	cmpnei	r2,r2,20
80200bd8:	10000e1e 	bne	r2,zero,80200c14 <bDdr2EepromDump+0x4f4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200bdc:	00e008b4 	movhi	r3,32802
80200be0:	18fc6004 	addi	r3,r3,-3712
80200be4:	00a008b4 	movhi	r2,32802
80200be8:	10ae9504 	addi	r2,r2,-17836
80200bec:	1009883a 	mov	r4,r2
80200bf0:	00801204 	movi	r2,72
80200bf4:	100d883a 	mov	r6,r2
80200bf8:	200b883a 	mov	r5,r4
80200bfc:	1809883a 	mov	r4,r3
80200c00:	02062d80 	call	802062d8 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
80200c04:	012008b4 	movhi	r4,32802
80200c08:	213c6004 	addi	r4,r4,-3712
80200c0c:	02064500 	call	80206450 <printf>
80200c10:	00017c06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 22) {
80200c14:	e0bfbc17 	ldw	r2,-272(fp)
80200c18:	10800598 	cmpnei	r2,r2,22
80200c1c:	10000e1e 	bne	r2,zero,80200c58 <bDdr2EepromDump+0x538>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
80200c20:	00e008b4 	movhi	r3,32802
80200c24:	18fc6004 	addi	r3,r3,-3712
80200c28:	00a008b4 	movhi	r2,32802
80200c2c:	10aea704 	addi	r2,r2,-17764
80200c30:	1009883a 	mov	r4,r2
80200c34:	00800784 	movi	r2,30
80200c38:	100d883a 	mov	r6,r2
80200c3c:	200b883a 	mov	r5,r4
80200c40:	1809883a 	mov	r4,r3
80200c44:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
80200c48:	012008b4 	movhi	r4,32802
80200c4c:	213c6004 	addi	r4,r4,-3712
80200c50:	02064500 	call	80206450 <printf>
80200c54:	00016b06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 27) {
80200c58:	e0bfbc17 	ldw	r2,-272(fp)
80200c5c:	108006d8 	cmpnei	r2,r2,27
80200c60:	10000e1e 	bne	r2,zero,80200c9c <bDdr2EepromDump+0x57c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200c64:	00e008b4 	movhi	r3,32802
80200c68:	18fc6004 	addi	r3,r3,-3712
80200c6c:	00a008b4 	movhi	r2,32802
80200c70:	10aeaf04 	addi	r2,r2,-17732
80200c74:	1009883a 	mov	r4,r2
80200c78:	00800a04 	movi	r2,40
80200c7c:	100d883a 	mov	r6,r2
80200c80:	200b883a 	mov	r5,r4
80200c84:	1809883a 	mov	r4,r3
80200c88:	02062d80 	call	802062d8 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
80200c8c:	012008b4 	movhi	r4,32802
80200c90:	213c6004 	addi	r4,r4,-3712
80200c94:	02064500 	call	80206450 <printf>
80200c98:	00015a06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 28) {
80200c9c:	e0bfbc17 	ldw	r2,-272(fp)
80200ca0:	10800718 	cmpnei	r2,r2,28
80200ca4:	10000e1e 	bne	r2,zero,80200ce0 <bDdr2EepromDump+0x5c0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200ca8:	00e008b4 	movhi	r3,32802
80200cac:	18fc6004 	addi	r3,r3,-3712
80200cb0:	00a008b4 	movhi	r2,32802
80200cb4:	10aeb904 	addi	r2,r2,-17692
80200cb8:	1009883a 	mov	r4,r2
80200cbc:	00800cc4 	movi	r2,51
80200cc0:	100d883a 	mov	r6,r2
80200cc4:	200b883a 	mov	r5,r4
80200cc8:	1809883a 	mov	r4,r3
80200ccc:	02062d80 	call	802062d8 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
80200cd0:	012008b4 	movhi	r4,32802
80200cd4:	213c6004 	addi	r4,r4,-3712
80200cd8:	02064500 	call	80206450 <printf>
80200cdc:	00014906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 29) {
80200ce0:	e0bfbc17 	ldw	r2,-272(fp)
80200ce4:	10800758 	cmpnei	r2,r2,29
80200ce8:	10000e1e 	bne	r2,zero,80200d24 <bDdr2EepromDump+0x604>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200cec:	00e008b4 	movhi	r3,32802
80200cf0:	18fc6004 	addi	r3,r3,-3712
80200cf4:	00a008b4 	movhi	r2,32802
80200cf8:	10aec604 	addi	r2,r2,-17640
80200cfc:	1009883a 	mov	r4,r2
80200d00:	008009c4 	movi	r2,39
80200d04:	100d883a 	mov	r6,r2
80200d08:	200b883a 	mov	r5,r4
80200d0c:	1809883a 	mov	r4,r3
80200d10:	02062d80 	call	802062d8 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
80200d14:	012008b4 	movhi	r4,32802
80200d18:	213c6004 	addi	r4,r4,-3712
80200d1c:	02064500 	call	80206450 <printf>
80200d20:	00013806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 30) {
80200d24:	e0bfbc17 	ldw	r2,-272(fp)
80200d28:	10800798 	cmpnei	r2,r2,30
80200d2c:	10000e1e 	bne	r2,zero,80200d68 <bDdr2EepromDump+0x648>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200d30:	00e008b4 	movhi	r3,32802
80200d34:	18fc6004 	addi	r3,r3,-3712
80200d38:	00a008b4 	movhi	r2,32802
80200d3c:	10aed004 	addi	r2,r2,-17600
80200d40:	1009883a 	mov	r4,r2
80200d44:	00800b04 	movi	r2,44
80200d48:	100d883a 	mov	r6,r2
80200d4c:	200b883a 	mov	r5,r4
80200d50:	1809883a 	mov	r4,r3
80200d54:	02062d80 	call	802062d8 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
80200d58:	012008b4 	movhi	r4,32802
80200d5c:	213c6004 	addi	r4,r4,-3712
80200d60:	02064500 	call	80206450 <printf>
80200d64:	00012706 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 31) {
80200d68:	e0bfbc17 	ldw	r2,-272(fp)
80200d6c:	108007d8 	cmpnei	r2,r2,31
80200d70:	10000e1e 	bne	r2,zero,80200dac <bDdr2EepromDump+0x68c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200d74:	00e008b4 	movhi	r3,32802
80200d78:	18fc6004 	addi	r3,r3,-3712
80200d7c:	00a008b4 	movhi	r2,32802
80200d80:	10aedb04 	addi	r2,r2,-17556
80200d84:	1009883a 	mov	r4,r2
80200d88:	008010c4 	movi	r2,67
80200d8c:	100d883a 	mov	r6,r2
80200d90:	200b883a 	mov	r5,r4
80200d94:	1809883a 	mov	r4,r3
80200d98:	02062d80 	call	802062d8 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
80200d9c:	012008b4 	movhi	r4,32802
80200da0:	213c6004 	addi	r4,r4,-3712
80200da4:	02064500 	call	80206450 <printf>
80200da8:	00011606 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 36) {
80200dac:	e0bfbc17 	ldw	r2,-272(fp)
80200db0:	10800918 	cmpnei	r2,r2,36
80200db4:	10000e1e 	bne	r2,zero,80200df0 <bDdr2EepromDump+0x6d0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200db8:	00e008b4 	movhi	r3,32802
80200dbc:	18fc6004 	addi	r3,r3,-3712
80200dc0:	00a008b4 	movhi	r2,32802
80200dc4:	10aeec04 	addi	r2,r2,-17488
80200dc8:	1009883a 	mov	r4,r2
80200dcc:	00800a84 	movi	r2,42
80200dd0:	100d883a 	mov	r6,r2
80200dd4:	200b883a 	mov	r5,r4
80200dd8:	1809883a 	mov	r4,r3
80200ddc:	02062d80 	call	802062d8 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
80200de0:	012008b4 	movhi	r4,32802
80200de4:	213c6004 	addi	r4,r4,-3712
80200de8:	02064500 	call	80206450 <printf>
80200dec:	00010506 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 37) {
80200df0:	e0bfbc17 	ldw	r2,-272(fp)
80200df4:	10800958 	cmpnei	r2,r2,37
80200df8:	10000e1e 	bne	r2,zero,80200e34 <bDdr2EepromDump+0x714>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200dfc:	00e008b4 	movhi	r3,32802
80200e00:	18fc6004 	addi	r3,r3,-3712
80200e04:	00a008b4 	movhi	r2,32802
80200e08:	10aef704 	addi	r2,r2,-17444
80200e0c:	1009883a 	mov	r4,r2
80200e10:	00800cc4 	movi	r2,51
80200e14:	100d883a 	mov	r6,r2
80200e18:	200b883a 	mov	r5,r4
80200e1c:	1809883a 	mov	r4,r3
80200e20:	02062d80 	call	802062d8 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
80200e24:	012008b4 	movhi	r4,32802
80200e28:	213c6004 	addi	r4,r4,-3712
80200e2c:	02064500 	call	80206450 <printf>
80200e30:	0000f406 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 38) {
80200e34:	e0bfbc17 	ldw	r2,-272(fp)
80200e38:	10800998 	cmpnei	r2,r2,38
80200e3c:	10000e1e 	bne	r2,zero,80200e78 <bDdr2EepromDump+0x758>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200e40:	00e008b4 	movhi	r3,32802
80200e44:	18fc6004 	addi	r3,r3,-3712
80200e48:	00a008b4 	movhi	r2,32802
80200e4c:	10af0404 	addi	r2,r2,-17392
80200e50:	1009883a 	mov	r4,r2
80200e54:	00800dc4 	movi	r2,55
80200e58:	100d883a 	mov	r6,r2
80200e5c:	200b883a 	mov	r5,r4
80200e60:	1809883a 	mov	r4,r3
80200e64:	02062d80 	call	802062d8 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
80200e68:	012008b4 	movhi	r4,32802
80200e6c:	213c6004 	addi	r4,r4,-3712
80200e70:	02064500 	call	80206450 <printf>
80200e74:	0000e306 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 41) {
80200e78:	e0bfbc17 	ldw	r2,-272(fp)
80200e7c:	10800a58 	cmpnei	r2,r2,41
80200e80:	10000e1e 	bne	r2,zero,80200ebc <bDdr2EepromDump+0x79c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200e84:	00e008b4 	movhi	r3,32802
80200e88:	18fc6004 	addi	r3,r3,-3712
80200e8c:	00a008b4 	movhi	r2,32802
80200e90:	10af1204 	addi	r2,r2,-17336
80200e94:	1009883a 	mov	r4,r2
80200e98:	00800c84 	movi	r2,50
80200e9c:	100d883a 	mov	r6,r2
80200ea0:	200b883a 	mov	r5,r4
80200ea4:	1809883a 	mov	r4,r3
80200ea8:	02062d80 	call	802062d8 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
80200eac:	012008b4 	movhi	r4,32802
80200eb0:	213c6004 	addi	r4,r4,-3712
80200eb4:	02064500 	call	80206450 <printf>
80200eb8:	0000d206 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 42) {
80200ebc:	e0bfbc17 	ldw	r2,-272(fp)
80200ec0:	10800a98 	cmpnei	r2,r2,42
80200ec4:	10000e1e 	bne	r2,zero,80200f00 <bDdr2EepromDump+0x7e0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200ec8:	00e008b4 	movhi	r3,32802
80200ecc:	18fc6004 	addi	r3,r3,-3712
80200ed0:	00a008b4 	movhi	r2,32802
80200ed4:	10af1f04 	addi	r2,r2,-17284
80200ed8:	1009883a 	mov	r4,r2
80200edc:	00800cc4 	movi	r2,51
80200ee0:	100d883a 	mov	r6,r2
80200ee4:	200b883a 	mov	r5,r4
80200ee8:	1809883a 	mov	r4,r3
80200eec:	02062d80 	call	802062d8 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
80200ef0:	012008b4 	movhi	r4,32802
80200ef4:	213c6004 	addi	r4,r4,-3712
80200ef8:	02064500 	call	80206450 <printf>
80200efc:	0000c106 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 62) {
80200f00:	e0bfbc17 	ldw	r2,-272(fp)
80200f04:	10800f98 	cmpnei	r2,r2,62
80200f08:	10000e1e 	bne	r2,zero,80200f44 <bDdr2EepromDump+0x824>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
80200f0c:	00e008b4 	movhi	r3,32802
80200f10:	18fc6004 	addi	r3,r3,-3712
80200f14:	00a008b4 	movhi	r2,32802
80200f18:	10af2c04 	addi	r2,r2,-17232
80200f1c:	1009883a 	mov	r4,r2
80200f20:	00800404 	movi	r2,16
80200f24:	100d883a 	mov	r6,r2
80200f28:	200b883a 	mov	r5,r4
80200f2c:	1809883a 	mov	r4,r3
80200f30:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
80200f34:	012008b4 	movhi	r4,32802
80200f38:	213c6004 	addi	r4,r4,-3712
80200f3c:	02064500 	call	80206450 <printf>
80200f40:	0000b006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 63) {
80200f44:	e0bfbc17 	ldw	r2,-272(fp)
80200f48:	10800fd8 	cmpnei	r2,r2,63
80200f4c:	10001d1e 	bne	r2,zero,80200fc4 <bDdr2EepromDump+0x8a4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
80200f50:	00a008b4 	movhi	r2,32802
80200f54:	10bc6004 	addi	r2,r2,-3712
80200f58:	00c00a04 	movi	r3,40
80200f5c:	10c00005 	stb	r3,0(r2)
80200f60:	00c010c4 	movi	r3,67
80200f64:	10c00045 	stb	r3,1(r2)
80200f68:	00c01a04 	movi	r3,104
80200f6c:	10c00085 	stb	r3,2(r2)
80200f70:	00c01944 	movi	r3,101
80200f74:	10c000c5 	stb	r3,3(r2)
80200f78:	00c018c4 	movi	r3,99
80200f7c:	10c00105 	stb	r3,4(r2)
80200f80:	00c01ac4 	movi	r3,107
80200f84:	10c00145 	stb	r3,5(r2)
80200f88:	00c01cc4 	movi	r3,115
80200f8c:	10c00185 	stb	r3,6(r2)
80200f90:	00c01d44 	movi	r3,117
80200f94:	10c001c5 	stb	r3,7(r2)
80200f98:	00c01b44 	movi	r3,109
80200f9c:	10c00205 	stb	r3,8(r2)
80200fa0:	00c00a44 	movi	r3,41
80200fa4:	10c00245 	stb	r3,9(r2)
80200fa8:	00c00284 	movi	r3,10
80200fac:	10c00285 	stb	r3,10(r2)
80200fb0:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
80200fb4:	012008b4 	movhi	r4,32802
80200fb8:	213c6004 	addi	r4,r4,-3712
80200fbc:	02064500 	call	80206450 <printf>
80200fc0:	00009006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 64) {
80200fc4:	e0bfbc17 	ldw	r2,-272(fp)
80200fc8:	10801018 	cmpnei	r2,r2,64
80200fcc:	10000e1e 	bne	r2,zero,80201008 <bDdr2EepromDump+0x8e8>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
80200fd0:	00e008b4 	movhi	r3,32802
80200fd4:	18fc6004 	addi	r3,r3,-3712
80200fd8:	00a008b4 	movhi	r2,32802
80200fdc:	10af3004 	addi	r2,r2,-17216
80200fe0:	1009883a 	mov	r4,r2
80200fe4:	00800804 	movi	r2,32
80200fe8:	100d883a 	mov	r6,r2
80200fec:	200b883a 	mov	r5,r4
80200ff0:	1809883a 	mov	r4,r3
80200ff4:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
80200ff8:	012008b4 	movhi	r4,32802
80200ffc:	213c6004 	addi	r4,r4,-3712
80201000:	02064500 	call	80206450 <printf>
80201004:	00007f06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 72) {
80201008:	e0bfbc17 	ldw	r2,-272(fp)
8020100c:	10801218 	cmpnei	r2,r2,72
80201010:	10000e1e 	bne	r2,zero,8020104c <bDdr2EepromDump+0x92c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201014:	00e008b4 	movhi	r3,32802
80201018:	18fc6004 	addi	r3,r3,-3712
8020101c:	00a008b4 	movhi	r2,32802
80201020:	10af3804 	addi	r2,r2,-17184
80201024:	1009883a 	mov	r4,r2
80201028:	00800dc4 	movi	r2,55
8020102c:	100d883a 	mov	r6,r2
80201030:	200b883a 	mov	r5,r4
80201034:	1809883a 	mov	r4,r3
80201038:	02062d80 	call	802062d8 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
8020103c:	012008b4 	movhi	r4,32802
80201040:	213c6004 	addi	r4,r4,-3712
80201044:	02064500 	call	80206450 <printf>
80201048:	00006e06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 73) {
8020104c:	e0bfbc17 	ldw	r2,-272(fp)
80201050:	10801258 	cmpnei	r2,r2,73
80201054:	10000e1e 	bne	r2,zero,80201090 <bDdr2EepromDump+0x970>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
80201058:	00e008b4 	movhi	r3,32802
8020105c:	18fc6004 	addi	r3,r3,-3712
80201060:	00a008b4 	movhi	r2,32802
80201064:	10af4604 	addi	r2,r2,-17128
80201068:	1009883a 	mov	r4,r2
8020106c:	00800784 	movi	r2,30
80201070:	100d883a 	mov	r6,r2
80201074:	200b883a 	mov	r5,r4
80201078:	1809883a 	mov	r4,r3
8020107c:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
80201080:	012008b4 	movhi	r4,32802
80201084:	213c6004 	addi	r4,r4,-3712
80201088:	02064500 	call	80206450 <printf>
8020108c:	00005d06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 91) {
80201090:	e0bfbc17 	ldw	r2,-272(fp)
80201094:	108016d8 	cmpnei	r2,r2,91
80201098:	10000e1e 	bne	r2,zero,802010d4 <bDdr2EepromDump+0x9b4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
8020109c:	00e008b4 	movhi	r3,32802
802010a0:	18fc6004 	addi	r3,r3,-3712
802010a4:	00a008b4 	movhi	r2,32802
802010a8:	10af4e04 	addi	r2,r2,-17096
802010ac:	1009883a 	mov	r4,r2
802010b0:	00800804 	movi	r2,32
802010b4:	100d883a 	mov	r6,r2
802010b8:	200b883a 	mov	r5,r4
802010bc:	1809883a 	mov	r4,r3
802010c0:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
802010c4:	012008b4 	movhi	r4,32802
802010c8:	213c6004 	addi	r4,r4,-3712
802010cc:	02064500 	call	80206450 <printf>
802010d0:	00004c06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 93) {
802010d4:	e0bfbc17 	ldw	r2,-272(fp)
802010d8:	10801758 	cmpnei	r2,r2,93
802010dc:	10000e1e 	bne	r2,zero,80201118 <bDdr2EepromDump+0x9f8>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802010e0:	00e008b4 	movhi	r3,32802
802010e4:	18fc6004 	addi	r3,r3,-3712
802010e8:	00a008b4 	movhi	r2,32802
802010ec:	10af5604 	addi	r2,r2,-17064
802010f0:	1009883a 	mov	r4,r2
802010f4:	008009c4 	movi	r2,39
802010f8:	100d883a 	mov	r6,r2
802010fc:	200b883a 	mov	r5,r4
80201100:	1809883a 	mov	r4,r3
80201104:	02062d80 	call	802062d8 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
80201108:	012008b4 	movhi	r4,32802
8020110c:	213c6004 	addi	r4,r4,-3712
80201110:	02064500 	call	80206450 <printf>
80201114:	00003b06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 94) {
80201118:	e0bfbc17 	ldw	r2,-272(fp)
8020111c:	10801798 	cmpnei	r2,r2,94
80201120:	10000e1e 	bne	r2,zero,8020115c <bDdr2EepromDump+0xa3c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
80201124:	00e008b4 	movhi	r3,32802
80201128:	18fc6004 	addi	r3,r3,-3712
8020112c:	00a008b4 	movhi	r2,32802
80201130:	10af6004 	addi	r2,r2,-17024
80201134:	1009883a 	mov	r4,r2
80201138:	008006c4 	movi	r2,27
8020113c:	100d883a 	mov	r6,r2
80201140:	200b883a 	mov	r5,r4
80201144:	1809883a 	mov	r4,r3
80201148:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
8020114c:	012008b4 	movhi	r4,32802
80201150:	213c6004 	addi	r4,r4,-3712
80201154:	02064500 	call	80206450 <printf>
80201158:	00002a06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 95) {
8020115c:	e0bfbc17 	ldw	r2,-272(fp)
80201160:	108017d8 	cmpnei	r2,r2,95
80201164:	10000e1e 	bne	r2,zero,802011a0 <bDdr2EepromDump+0xa80>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201168:	00e008b4 	movhi	r3,32802
8020116c:	18fc6004 	addi	r3,r3,-3712
80201170:	00a008b4 	movhi	r2,32802
80201174:	10af6704 	addi	r2,r2,-16996
80201178:	1009883a 	mov	r4,r2
8020117c:	00800a04 	movi	r2,40
80201180:	100d883a 	mov	r6,r2
80201184:	200b883a 	mov	r5,r4
80201188:	1809883a 	mov	r4,r3
8020118c:	02062d80 	call	802062d8 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
80201190:	012008b4 	movhi	r4,32802
80201194:	213c6004 	addi	r4,r4,-3712
80201198:	02064500 	call	80206450 <printf>
8020119c:	00001906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 99) {
802011a0:	e0bfbc17 	ldw	r2,-272(fp)
802011a4:	108018d8 	cmpnei	r2,r2,99
802011a8:	10000e1e 	bne	r2,zero,802011e4 <bDdr2EepromDump+0xac4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
802011ac:	00e008b4 	movhi	r3,32802
802011b0:	18fc6004 	addi	r3,r3,-3712
802011b4:	00a008b4 	movhi	r2,32802
802011b8:	10af7104 	addi	r2,r2,-16956
802011bc:	1009883a 	mov	r4,r2
802011c0:	00800984 	movi	r2,38
802011c4:	100d883a 	mov	r6,r2
802011c8:	200b883a 	mov	r5,r4
802011cc:	1809883a 	mov	r4,r3
802011d0:	02062d80 	call	802062d8 <memcpy>
				debug(fp, cDebugBuffer);
802011d4:	012008b4 	movhi	r4,32802
802011d8:	213c6004 	addi	r4,r4,-3712
802011dc:	02064500 	call	80206450 <printf>
802011e0:	00000806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else {
#if DEBUG_ON
				sprintf(cDebugBuffer, "\n");
802011e4:	00a008b4 	movhi	r2,32802
802011e8:	10bc6004 	addi	r2,r2,-3712
802011ec:	00c00284 	movi	r3,10
802011f0:	10c00005 	stb	r3,0(r2)
802011f4:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
802011f8:	012008b4 	movhi	r4,32802
802011fc:	213c6004 	addi	r4,r4,-3712
80201200:	02064500 	call	80206450 <printf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
80201204:	e0bfbc17 	ldw	r2,-272(fp)
80201208:	10800044 	addi	r2,r2,1
8020120c:	e0bfbc15 	stw	r2,-272(fp)
80201210:	e0bfbc17 	ldw	r2,-272(fp)
80201214:	10804008 	cmpgei	r2,r2,256
80201218:	1000101e 	bne	r2,zero,8020125c <bDdr2EepromDump+0xb3c>
8020121c:	e0bfbe17 	ldw	r2,-264(fp)
80201220:	103d8d1e 	bne	r2,zero,80200858 <__reset+0xfa1e0858>
80201224:	00000d06 	br	8020125c <bDdr2EepromDump+0xb3c>
#endif
			}
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
80201228:	00e008b4 	movhi	r3,32802
8020122c:	18fc6004 	addi	r3,r3,-3712
80201230:	00a008b4 	movhi	r2,32802
80201234:	10af7b04 	addi	r2,r2,-16916
80201238:	1009883a 	mov	r4,r2
8020123c:	008005c4 	movi	r2,23
80201240:	100d883a 	mov	r6,r2
80201244:	200b883a 	mov	r5,r4
80201248:	1809883a 	mov	r4,r3
8020124c:	02062d80 	call	802062d8 <memcpy>
		debug(fp, cDebugBuffer);
80201250:	012008b4 	movhi	r4,32802
80201254:	213c6004 	addi	r4,r4,-3712
80201258:	02064500 	call	80206450 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8020125c:	00a008b4 	movhi	r2,32802
80201260:	10bc6004 	addi	r2,r2,-3712
80201264:	00c00284 	movi	r3,10
80201268:	10c00005 	stb	r3,0(r2)
8020126c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201270:	012008b4 	movhi	r4,32802
80201274:	213c6004 	addi	r4,r4,-3712
80201278:	02064500 	call	80206450 <printf>
#endif

	return bSuccess;
8020127c:	e0bfbe17 	ldw	r2,-264(fp)
}
80201280:	e037883a 	mov	sp,fp
80201284:	dfc00117 	ldw	ra,4(sp)
80201288:	df000017 	ldw	fp,0(sp)
8020128c:	dec00204 	addi	sp,sp,8
80201290:	f800283a 	ret

80201294 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
80201294:	defffb04 	addi	sp,sp,-20
80201298:	dfc00415 	stw	ra,16(sp)
8020129c:	df000315 	stw	fp,12(sp)
802012a0:	df000304 	addi	fp,sp,12
802012a4:	2005883a 	mov	r2,r4
802012a8:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess = FALSE;
802012ac:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
802012b0:	00a00034 	movhi	r2,32768
802012b4:	10812204 	addi	r2,r2,1160
802012b8:	e0bffe15 	stw	r2,-8(fp)

	switch (ucMemoryId) {
802012bc:	e0bfff03 	ldbu	r2,-4(fp)
802012c0:	10000326 	beq	r2,zero,802012d0 <bDdr2SwitchMemory+0x3c>
802012c4:	10800060 	cmpeqi	r2,r2,1
802012c8:	1000061e 	bne	r2,zero,802012e4 <bDdr2SwitchMemory+0x50>
802012cc:	00000b06 	br	802012fc <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
802012d0:	e0bffe17 	ldw	r2,-8(fp)
802012d4:	10000015 	stw	zero,0(r2)
		bSuccess = TRUE;
802012d8:	00800044 	movi	r2,1
802012dc:	e0bffd15 	stw	r2,-12(fp)
		break;
802012e0:	00001406 	br	80201334 <bDdr2SwitchMemory+0xa0>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
802012e4:	e0bffe17 	ldw	r2,-8(fp)
802012e8:	00e00034 	movhi	r3,32768
802012ec:	10c00015 	stw	r3,0(r2)
		bSuccess = TRUE;
802012f0:	00800044 	movi	r2,1
802012f4:	e0bffd15 	stw	r2,-12(fp)
		break;
802012f8:	00000e06 	br	80201334 <bDdr2SwitchMemory+0xa0>
	default:
		bSuccess = FALSE;
802012fc:	e03ffd15 	stw	zero,-12(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201300:	00e008b4 	movhi	r3,32802
80201304:	18fc6004 	addi	r3,r3,-3712
80201308:	00a008b4 	movhi	r2,32802
8020130c:	10af8104 	addi	r2,r2,-16892
80201310:	1009883a 	mov	r4,r2
80201314:	00800f04 	movi	r2,60
80201318:	100d883a 	mov	r6,r2
8020131c:	200b883a 	mov	r5,r4
80201320:	1809883a 	mov	r4,r3
80201324:	02062d80 	call	802062d8 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
80201328:	012008b4 	movhi	r4,32802
8020132c:	213c6004 	addi	r4,r4,-3712
80201330:	02064500 	call	80206450 <printf>
		;
#endif
	}

	return bSuccess;
80201334:	e0bffd17 	ldw	r2,-12(fp)
}
80201338:	e037883a 	mov	sp,fp
8020133c:	dfc00117 	ldw	ra,4(sp)
80201340:	df000017 	ldw	fp,0(sp)
80201344:	dec00204 	addi	sp,sp,8
80201348:	f800283a 	ret

8020134c <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
8020134c:	deffe204 	addi	sp,sp,-120
80201350:	dfc01d15 	stw	ra,116(sp)
80201354:	df001c15 	stw	fp,112(sp)
80201358:	dc401b15 	stw	r17,108(sp)
8020135c:	dc001a15 	stw	r16,104(sp)
80201360:	df001c04 	addi	fp,sp,112
80201364:	2005883a 	mov	r2,r4
80201368:	e0bffd05 	stb	r2,-12(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
8020136c:	00e008b4 	movhi	r3,32802
80201370:	18fc6004 	addi	r3,r3,-3712
80201374:	00a008b4 	movhi	r2,32802
80201378:	10af9004 	addi	r2,r2,-16832
8020137c:	1009883a 	mov	r4,r2
80201380:	00800a04 	movi	r2,40
80201384:	100d883a 	mov	r6,r2
80201388:	200b883a 	mov	r5,r4
8020138c:	1809883a 	mov	r4,r3
80201390:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
80201394:	012008b4 	movhi	r4,32802
80201398:	213c6004 	addi	r4,r4,-3712
8020139c:	02064500 	call	80206450 <printf>
#endif
	bool bSuccess = FALSE;
802013a0:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802013a4:	e0bffd03 	ldbu	r2,-12(fp)
802013a8:	10000326 	beq	r2,zero,802013b8 <bDdr2MemoryWriteTest+0x6c>
802013ac:	10800060 	cmpeqi	r2,r2,1
802013b0:	10000a1e 	bne	r2,zero,802013dc <bDdr2MemoryWriteTest+0x90>
802013b4:	00001206 	br	80201400 <bDdr2MemoryWriteTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802013b8:	e0bffd03 	ldbu	r2,-12(fp)
802013bc:	1009883a 	mov	r4,r2
802013c0:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802013c4:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
802013c8:	00a00034 	movhi	r2,32768
802013cc:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
802013d0:	00800044 	movi	r2,1
802013d4:	e0bfe515 	stw	r2,-108(fp)
		break;
802013d8:	00001906 	br	80201440 <bDdr2MemoryWriteTest+0xf4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
802013dc:	e0bffd03 	ldbu	r2,-12(fp)
802013e0:	1009883a 	mov	r4,r2
802013e4:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802013e8:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
802013ec:	00a00034 	movhi	r2,32768
802013f0:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
802013f4:	00800044 	movi	r2,1
802013f8:	e0bfe515 	stw	r2,-108(fp)
		break;
802013fc:	00001006 	br	80201440 <bDdr2MemoryWriteTest+0xf4>
	default:
		bSuccess = FALSE;
80201400:	e03fe515 	stw	zero,-108(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201404:	00e008b4 	movhi	r3,32802
80201408:	18fc6004 	addi	r3,r3,-3712
8020140c:	00a008b4 	movhi	r2,32802
80201410:	10ada104 	addi	r2,r2,-18812
80201414:	1009883a 	mov	r4,r2
80201418:	00800bc4 	movi	r2,47
8020141c:	100d883a 	mov	r6,r2
80201420:	200b883a 	mov	r5,r4
80201424:	1809883a 	mov	r4,r3
80201428:	02062d80 	call	802062d8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020142c:	012008b4 	movhi	r4,32802
80201430:	213c6004 	addi	r4,r4,-3712
80201434:	02064500 	call	80206450 <printf>
		;
#endif
		return bSuccess;
80201438:	e0bfe517 	ldw	r2,-108(fp)
8020143c:	00010a06 	br	80201868 <bDdr2MemoryWriteTest+0x51c>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80201440:	e0bfe717 	ldw	r2,-100(fp)
80201444:	1004d53a 	srli	r2,r2,20
80201448:	100d883a 	mov	r6,r2
8020144c:	016008b4 	movhi	r5,32802
80201450:	296f9a04 	addi	r5,r5,-16792
80201454:	012008b4 	movhi	r4,32802
80201458:	213c6004 	addi	r4,r4,-3712
8020145c:	02065b80 	call	802065b8 <sprintf>
	debug(fp, cDebugBuffer);
80201460:	012008b4 	movhi	r4,32802
80201464:	213c6004 	addi	r4,r4,-3712
80201468:	02064500 	call	80206450 <printf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
8020146c:	00800104 	movi	r2,4
80201470:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
80201474:	e03fed15 	stw	zero,-76(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
80201478:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
8020147c:	e03fe815 	stw	zero,-96(fp)
80201480:	00001506 	br	802014d8 <bDdr2MemoryWriteTest+0x18c>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
80201484:	e0ffe717 	ldw	r3,-100(fp)
80201488:	00b33374 	movhi	r2,52429
8020148c:	10b33344 	addi	r2,r2,-13107
80201490:	1888383a 	mulxuu	r4,r3,r2
80201494:	1885383a 	mul	r2,r3,r2
80201498:	1021883a 	mov	r16,r2
8020149c:	2023883a 	mov	r17,r4
802014a0:	8804d0fa 	srli	r2,r17,3
802014a4:	e0ffe817 	ldw	r3,-96(fp)
802014a8:	18c00044 	addi	r3,r3,1
802014ac:	10c7383a 	mul	r3,r2,r3
802014b0:	e0bfe817 	ldw	r2,-96(fp)
802014b4:	1085883a 	add	r2,r2,r2
802014b8:	1085883a 	add	r2,r2,r2
802014bc:	e13fe504 	addi	r4,fp,-108
802014c0:	2085883a 	add	r2,r4,r2
802014c4:	10800e04 	addi	r2,r2,56
802014c8:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
802014cc:	e0bfe817 	ldw	r2,-96(fp)
802014d0:	10800044 	addi	r2,r2,1
802014d4:	e0bfe815 	stw	r2,-96(fp)
802014d8:	e0bfe817 	ldw	r2,-96(fp)
802014dc:	10800290 	cmplti	r2,r2,10
802014e0:	103fe81e 	bne	r2,zero,80201484 <__reset+0xfa1e1484>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
802014e4:	d0a02817 	ldw	r2,-32608(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
802014e8:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
802014ec:	00804004 	movi	r2,256
802014f0:	e0bfeb15 	stw	r2,-84(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
802014f4:	e03fe815 	stw	zero,-96(fp)
802014f8:	00001e06 	br	80201574 <bDdr2MemoryWriteTest+0x228>
		if (iI == 0) {
802014fc:	e0bfe817 	ldw	r2,-96(fp)
80201500:	1000091e 	bne	r2,zero,80201528 <bDdr2MemoryWriteTest+0x1dc>
			xSZData[iI] = uliInitValue;
80201504:	00a008b4 	movhi	r2,32802
80201508:	10bca004 	addi	r2,r2,-3456
8020150c:	e0ffe817 	ldw	r3,-96(fp)
80201510:	18c7883a 	add	r3,r3,r3
80201514:	18c7883a 	add	r3,r3,r3
80201518:	10c5883a 	add	r2,r2,r3
8020151c:	e0fff017 	ldw	r3,-64(fp)
80201520:	10c00015 	stw	r3,0(r2)
80201524:	00001006 	br	80201568 <bDdr2MemoryWriteTest+0x21c>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
80201528:	e0bfe817 	ldw	r2,-96(fp)
8020152c:	10ffffc4 	addi	r3,r2,-1
80201530:	00a008b4 	movhi	r2,32802
80201534:	10bca004 	addi	r2,r2,-3456
80201538:	18c7883a 	add	r3,r3,r3
8020153c:	18c7883a 	add	r3,r3,r3
80201540:	10c5883a 	add	r2,r2,r3
80201544:	10800017 	ldw	r2,0(r2)
80201548:	11000364 	muli	r4,r2,13
8020154c:	00a008b4 	movhi	r2,32802
80201550:	10bca004 	addi	r2,r2,-3456
80201554:	e0ffe817 	ldw	r3,-96(fp)
80201558:	18c7883a 	add	r3,r3,r3
8020155c:	18c7883a 	add	r3,r3,r3
80201560:	10c5883a 	add	r2,r2,r3
80201564:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
80201568:	e0bfe817 	ldw	r2,-96(fp)
8020156c:	10800044 	addi	r2,r2,1
80201570:	e0bfe815 	stw	r2,-96(fp)
80201574:	e0ffe817 	ldw	r3,-96(fp)
80201578:	e0bfeb17 	ldw	r2,-84(fp)
8020157c:	18bfdf16 	blt	r3,r2,802014fc <__reset+0xfa1e14fc>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
80201580:	e0bfeb17 	ldw	r2,-84(fp)
80201584:	10ffffc4 	addi	r3,r2,-1
80201588:	00a008b4 	movhi	r2,32802
8020158c:	10bca004 	addi	r2,r2,-3456
80201590:	18c7883a 	add	r3,r3,r3
80201594:	18c7883a 	add	r3,r3,r3
80201598:	10c7883a 	add	r3,r2,r3
8020159c:	00aaaaf4 	movhi	r2,43691
802015a0:	10aaaa84 	addi	r2,r2,-21846
802015a4:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
802015a8:	e0bfeb17 	ldw	r2,-84(fp)
802015ac:	10ffff84 	addi	r3,r2,-2
802015b0:	00a008b4 	movhi	r2,32802
802015b4:	10bca004 	addi	r2,r2,-3456
802015b8:	18c7883a 	add	r3,r3,r3
802015bc:	18c7883a 	add	r3,r3,r3
802015c0:	10c7883a 	add	r3,r2,r3
802015c4:	00955574 	movhi	r2,21845
802015c8:	10955544 	addi	r2,r2,21845
802015cc:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
802015d0:	e0bfeb17 	ldw	r2,-84(fp)
802015d4:	10ffff44 	addi	r3,r2,-3
802015d8:	00a008b4 	movhi	r2,32802
802015dc:	10bca004 	addi	r2,r2,-3456
802015e0:	18c7883a 	add	r3,r3,r3
802015e4:	18c7883a 	add	r3,r3,r3
802015e8:	10c5883a 	add	r2,r2,r3
802015ec:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
802015f0:	e0bfeb17 	ldw	r2,-84(fp)
802015f4:	10ffff04 	addi	r3,r2,-4
802015f8:	00a008b4 	movhi	r2,32802
802015fc:	10bca004 	addi	r2,r2,-3456
80201600:	18c7883a 	add	r3,r3,r3
80201604:	18c7883a 	add	r3,r3,r3
80201608:	10c5883a 	add	r2,r2,r3
8020160c:	00ffffc4 	movi	r3,-1
80201610:	10c00015 	stw	r3,0(r2)

#if DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
80201614:	00e008b4 	movhi	r3,32802
80201618:	18fc6004 	addi	r3,r3,-3712
8020161c:	00a008b4 	movhi	r2,32802
80201620:	10afa004 	addi	r2,r2,-16768
80201624:	1009883a 	mov	r4,r2
80201628:	00800444 	movi	r2,17
8020162c:	100d883a 	mov	r6,r2
80201630:	200b883a 	mov	r5,r4
80201634:	1809883a 	mov	r4,r3
80201638:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
8020163c:	012008b4 	movhi	r4,32802
80201640:	213c6004 	addi	r4,r4,-3712
80201644:	02064500 	call	80206450 <printf>
80201648:	d0a02817 	ldw	r2,-32608(gp)
#endif
	iTimeStart = alt_nticks();
8020164c:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
80201650:	e0bfe617 	ldw	r2,-104(fp)
80201654:	e0bfea15 	stw	r2,-88(fp)
	iNAccessLen = sizeof(xSZData);
80201658:	00810004 	movi	r2,1024
8020165c:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
80201660:	e0ffe917 	ldw	r3,-92(fp)
80201664:	e0bfee17 	ldw	r2,-72(fp)
80201668:	1885283a 	div	r2,r3,r2
8020166c:	e0bfeb15 	stw	r2,-84(fp)
	iNPos = 0;
80201670:	e03fec15 	stw	zero,-80(fp)
	while (iNPos < uliByteLen) {
80201674:	00003806 	br	80201758 <bDdr2MemoryWriteTest+0x40c>
		iNRemainedLen = uliByteLen - iNPos;
80201678:	e0bfec17 	ldw	r2,-80(fp)
8020167c:	e0ffe717 	ldw	r3,-100(fp)
80201680:	1885c83a 	sub	r2,r3,r2
80201684:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
80201688:	e0bfe917 	ldw	r2,-92(fp)
8020168c:	e0fff217 	ldw	r3,-56(fp)
80201690:	1880060e 	bge	r3,r2,802016ac <bDdr2MemoryWriteTest+0x360>
			iNAccessLen = iNRemainedLen;
80201694:	e0bff217 	ldw	r2,-56(fp)
80201698:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
8020169c:	e0ffe917 	ldw	r3,-92(fp)
802016a0:	e0bfee17 	ldw	r2,-72(fp)
802016a4:	1885283a 	div	r2,r3,r2
802016a8:	e0bfeb15 	stw	r2,-84(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
802016ac:	e0bfe917 	ldw	r2,-92(fp)
802016b0:	100d883a 	mov	r6,r2
802016b4:	016008b4 	movhi	r5,32802
802016b8:	297ca004 	addi	r5,r5,-3456
802016bc:	e13fea17 	ldw	r4,-88(fp)
802016c0:	02062d80 	call	802062d8 <memcpy>
		pxDes += iNItemNum;
802016c4:	e0bfeb17 	ldw	r2,-84(fp)
802016c8:	1085883a 	add	r2,r2,r2
802016cc:	1085883a 	add	r2,r2,r2
802016d0:	1007883a 	mov	r3,r2
802016d4:	e0bfea17 	ldw	r2,-88(fp)
802016d8:	10c5883a 	add	r2,r2,r3
802016dc:	e0bfea15 	stw	r2,-88(fp)
		iNPos += iNAccessLen;
802016e0:	e0ffec17 	ldw	r3,-80(fp)
802016e4:	e0bfe917 	ldw	r2,-92(fp)
802016e8:	1885883a 	add	r2,r3,r2
802016ec:	e0bfec15 	stw	r2,-80(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
802016f0:	e0bfed17 	ldw	r2,-76(fp)
802016f4:	10800288 	cmpgei	r2,r2,10
802016f8:	1000171e 	bne	r2,zero,80201758 <bDdr2MemoryWriteTest+0x40c>
802016fc:	e0bfed17 	ldw	r2,-76(fp)
80201700:	1085883a 	add	r2,r2,r2
80201704:	1085883a 	add	r2,r2,r2
80201708:	e0ffe504 	addi	r3,fp,-108
8020170c:	1885883a 	add	r2,r3,r2
80201710:	10800e04 	addi	r2,r2,56
80201714:	10800017 	ldw	r2,0(r2)
80201718:	e0ffec17 	ldw	r3,-80(fp)
8020171c:	18800e36 	bltu	r3,r2,80201758 <bDdr2MemoryWriteTest+0x40c>
			iNProgressIndex++;
80201720:	e0bfed17 	ldw	r2,-76(fp)
80201724:	10800044 	addi	r2,r2,1
80201728:	e0bfed15 	stw	r2,-76(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
8020172c:	e0bfed17 	ldw	r2,-76(fp)
80201730:	108002a4 	muli	r2,r2,10
80201734:	100d883a 	mov	r6,r2
80201738:	016008b4 	movhi	r5,32802
8020173c:	296fa504 	addi	r5,r5,-16748
80201740:	012008b4 	movhi	r4,32802
80201744:	213c6004 	addi	r4,r4,-3712
80201748:	02065b80 	call	802065b8 <sprintf>
			debug(fp, cDebugBuffer);
8020174c:	012008b4 	movhi	r4,32802
80201750:	213c6004 	addi	r4,r4,-3712
80201754:	02064500 	call	80206450 <printf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
80201758:	e0ffec17 	ldw	r3,-80(fp)
8020175c:	e0bfe717 	ldw	r2,-100(fp)
80201760:	18bfc536 	bltu	r3,r2,80201678 <__reset+0xfa1e1678>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
80201764:	02164700 	call	80216470 <alt_dcache_flush_all>
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201768:	00a008b4 	movhi	r2,32802
8020176c:	10bc6004 	addi	r2,r2,-3712
80201770:	00c00284 	movi	r3,10
80201774:	10c00005 	stb	r3,0(r2)
80201778:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
8020177c:	012008b4 	movhi	r4,32802
80201780:	213c6004 	addi	r4,r4,-3712
80201784:	02064500 	call	80206450 <printf>
80201788:	d0e02817 	ldw	r3,-32608(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
8020178c:	e0bff117 	ldw	r2,-60(fp)
80201790:	1885c83a 	sub	r2,r3,r2
80201794:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
80201798:	e0bfe517 	ldw	r2,-108(fp)
8020179c:	10001c26 	beq	r2,zero,80201810 <bDdr2MemoryWriteTest+0x4c4>
#if DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
802017a0:	e13fef17 	ldw	r4,-68(fp)
802017a4:	0205e500 	call	80205e50 <__floatsisf>
802017a8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802017ac:	d0a02717 	ldw	r2,-32612(gp)
802017b0:	1009883a 	mov	r4,r2
802017b4:	0205f740 	call	80205f74 <__floatunsisf>
802017b8:	1007883a 	mov	r3,r2
802017bc:	180b883a 	mov	r5,r3
802017c0:	8009883a 	mov	r4,r16
802017c4:	0205a100 	call	80205a10 <__divsf3>
802017c8:	1007883a 	mov	r3,r2
802017cc:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#if DEBUG_ON
		sprintf(cDebugBuffer,
802017d0:	1009883a 	mov	r4,r2
802017d4:	02060640 	call	80206064 <__extendsfdf2>
802017d8:	1009883a 	mov	r4,r2
802017dc:	180b883a 	mov	r5,r3
802017e0:	d9400015 	stw	r5,0(sp)
802017e4:	200f883a 	mov	r7,r4
802017e8:	e1bfe717 	ldw	r6,-100(fp)
802017ec:	016008b4 	movhi	r5,32802
802017f0:	296fa704 	addi	r5,r5,-16740
802017f4:	012008b4 	movhi	r4,32802
802017f8:	213c6004 	addi	r4,r4,-3712
802017fc:	02065b80 	call	802065b8 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
80201800:	012008b4 	movhi	r4,32802
80201804:	213c6004 	addi	r4,r4,-3712
80201808:	02064500 	call	80206450 <printf>
8020180c:	00000d06 	br	80201844 <bDdr2MemoryWriteTest+0x4f8>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
80201810:	00e008b4 	movhi	r3,32802
80201814:	18fc6004 	addi	r3,r3,-3712
80201818:	00a008b4 	movhi	r2,32802
8020181c:	10afb304 	addi	r2,r2,-16692
80201820:	1009883a 	mov	r4,r2
80201824:	00800584 	movi	r2,22
80201828:	100d883a 	mov	r6,r2
8020182c:	200b883a 	mov	r5,r4
80201830:	1809883a 	mov	r4,r3
80201834:	02062d80 	call	802062d8 <memcpy>
		debug(fp, cDebugBuffer);
80201838:	012008b4 	movhi	r4,32802
8020183c:	213c6004 	addi	r4,r4,-3712
80201840:	02064500 	call	80206450 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201844:	00a008b4 	movhi	r2,32802
80201848:	10bc6004 	addi	r2,r2,-3712
8020184c:	00c00284 	movi	r3,10
80201850:	10c00005 	stb	r3,0(r2)
80201854:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201858:	012008b4 	movhi	r4,32802
8020185c:	213c6004 	addi	r4,r4,-3712
80201860:	02064500 	call	80206450 <printf>
#endif

	return bSuccess;
80201864:	e0bfe517 	ldw	r2,-108(fp)
}
80201868:	e6fffe04 	addi	sp,fp,-8
8020186c:	dfc00317 	ldw	ra,12(sp)
80201870:	df000217 	ldw	fp,8(sp)
80201874:	dc400117 	ldw	r17,4(sp)
80201878:	dc000017 	ldw	r16,0(sp)
8020187c:	dec00404 	addi	sp,sp,16
80201880:	f800283a 	ret

80201884 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
80201884:	deffe204 	addi	sp,sp,-120
80201888:	dfc01d15 	stw	ra,116(sp)
8020188c:	df001c15 	stw	fp,112(sp)
80201890:	dc401b15 	stw	r17,108(sp)
80201894:	dc001a15 	stw	r16,104(sp)
80201898:	df001c04 	addi	fp,sp,112
8020189c:	2005883a 	mov	r2,r4
802018a0:	e0bffd05 	stb	r2,-12(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
802018a4:	00e008b4 	movhi	r3,32802
802018a8:	18fc6004 	addi	r3,r3,-3712
802018ac:	00a008b4 	movhi	r2,32802
802018b0:	10afb904 	addi	r2,r2,-16668
802018b4:	1009883a 	mov	r4,r2
802018b8:	008009c4 	movi	r2,39
802018bc:	100d883a 	mov	r6,r2
802018c0:	200b883a 	mov	r5,r4
802018c4:	1809883a 	mov	r4,r3
802018c8:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
802018cc:	012008b4 	movhi	r4,32802
802018d0:	213c6004 	addi	r4,r4,-3712
802018d4:	02064500 	call	80206450 <printf>
#endif
	bool bSuccess = FALSE;
802018d8:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802018dc:	e0bffd03 	ldbu	r2,-12(fp)
802018e0:	10000326 	beq	r2,zero,802018f0 <bDdr2MemoryReadTest+0x6c>
802018e4:	10800060 	cmpeqi	r2,r2,1
802018e8:	10000a1e 	bne	r2,zero,80201914 <bDdr2MemoryReadTest+0x90>
802018ec:	00001206 	br	80201938 <bDdr2MemoryReadTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802018f0:	e0bffd03 	ldbu	r2,-12(fp)
802018f4:	1009883a 	mov	r4,r2
802018f8:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802018fc:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
80201900:	00a00034 	movhi	r2,32768
80201904:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
80201908:	00800044 	movi	r2,1
8020190c:	e0bfe515 	stw	r2,-108(fp)
		break;
80201910:	00001906 	br	80201978 <bDdr2MemoryReadTest+0xf4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201914:	e0bffd03 	ldbu	r2,-12(fp)
80201918:	1009883a 	mov	r4,r2
8020191c:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201920:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
80201924:	00a00034 	movhi	r2,32768
80201928:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
8020192c:	00800044 	movi	r2,1
80201930:	e0bfe515 	stw	r2,-108(fp)
		break;
80201934:	00001006 	br	80201978 <bDdr2MemoryReadTest+0xf4>
	default:
		bSuccess = FALSE;
80201938:	e03fe515 	stw	zero,-108(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
8020193c:	00e008b4 	movhi	r3,32802
80201940:	18fc6004 	addi	r3,r3,-3712
80201944:	00a008b4 	movhi	r2,32802
80201948:	10ada104 	addi	r2,r2,-18812
8020194c:	1009883a 	mov	r4,r2
80201950:	00800bc4 	movi	r2,47
80201954:	100d883a 	mov	r6,r2
80201958:	200b883a 	mov	r5,r4
8020195c:	1809883a 	mov	r4,r3
80201960:	02062d80 	call	802062d8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
80201964:	012008b4 	movhi	r4,32802
80201968:	213c6004 	addi	r4,r4,-3712
8020196c:	02064500 	call	80206450 <printf>
		;
#endif
		return bSuccess;
80201970:	e0bfe517 	ldw	r2,-108(fp)
80201974:	0000ec06 	br	80201d28 <bDdr2MemoryReadTest+0x4a4>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
80201978:	e0bfe717 	ldw	r2,-100(fp)
8020197c:	1004d53a 	srli	r2,r2,20
80201980:	100d883a 	mov	r6,r2
80201984:	016008b4 	movhi	r5,32802
80201988:	296fc304 	addi	r5,r5,-16628
8020198c:	012008b4 	movhi	r4,32802
80201990:	213c6004 	addi	r4,r4,-3712
80201994:	02065b80 	call	802065b8 <sprintf>
	debug(fp, cDebugBuffer);
80201998:	012008b4 	movhi	r4,32802
8020199c:	213c6004 	addi	r4,r4,-3712
802019a0:	02064500 	call	80206450 <printf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
802019a4:	00804004 	movi	r2,256
802019a8:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
802019ac:	00800104 	movi	r2,4
802019b0:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
802019b4:	e0ffec17 	ldw	r3,-80(fp)
802019b8:	e0bfef17 	ldw	r2,-68(fp)
802019bc:	1885383a 	mul	r2,r3,r2
802019c0:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
802019c4:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
802019c8:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
802019cc:	e03fe815 	stw	zero,-96(fp)
802019d0:	00001506 	br	80201a28 <bDdr2MemoryReadTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
802019d4:	e0ffe717 	ldw	r3,-100(fp)
802019d8:	00b33374 	movhi	r2,52429
802019dc:	10b33344 	addi	r2,r2,-13107
802019e0:	1888383a 	mulxuu	r4,r3,r2
802019e4:	1885383a 	mul	r2,r3,r2
802019e8:	1021883a 	mov	r16,r2
802019ec:	2023883a 	mov	r17,r4
802019f0:	8804d0fa 	srli	r2,r17,3
802019f4:	e0ffe817 	ldw	r3,-96(fp)
802019f8:	18c00044 	addi	r3,r3,1
802019fc:	10c7383a 	mul	r3,r2,r3
80201a00:	e0bfe817 	ldw	r2,-96(fp)
80201a04:	1085883a 	add	r2,r2,r2
80201a08:	1085883a 	add	r2,r2,r2
80201a0c:	e13fe504 	addi	r4,fp,-108
80201a10:	2085883a 	add	r2,r4,r2
80201a14:	10800e04 	addi	r2,r2,56
80201a18:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
80201a1c:	e0bfe817 	ldw	r2,-96(fp)
80201a20:	10800044 	addi	r2,r2,1
80201a24:	e0bfe815 	stw	r2,-96(fp)
80201a28:	e0bfe817 	ldw	r2,-96(fp)
80201a2c:	10800290 	cmplti	r2,r2,10
80201a30:	103fe81e 	bne	r2,zero,802019d4 <__reset+0xfa1e19d4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
80201a34:	e03fee15 	stw	zero,-72(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
80201a38:	00e008b4 	movhi	r3,32802
80201a3c:	18fc6004 	addi	r3,r3,-3712
80201a40:	00a008b4 	movhi	r2,32802
80201a44:	10afc904 	addi	r2,r2,-16604
80201a48:	1009883a 	mov	r4,r2
80201a4c:	008006c4 	movi	r2,27
80201a50:	100d883a 	mov	r6,r2
80201a54:	200b883a 	mov	r5,r4
80201a58:	1809883a 	mov	r4,r3
80201a5c:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
80201a60:	012008b4 	movhi	r4,32802
80201a64:	213c6004 	addi	r4,r4,-3712
80201a68:	02064500 	call	80206450 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80201a6c:	d0a02817 	ldw	r2,-32608(gp)
#endif
	iTimeStart = alt_nticks();
80201a70:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
80201a74:	e0bfe617 	ldw	r2,-104(fp)
80201a78:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
80201a7c:	00810004 	movi	r2,1024
80201a80:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
80201a84:	e0ffe917 	ldw	r3,-92(fp)
80201a88:	e0bfef17 	ldw	r2,-68(fp)
80201a8c:	1885283a 	div	r2,r3,r2
80201a90:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
80201a94:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
80201a98:	00005e06 	br	80201c14 <bDdr2MemoryReadTest+0x390>
		iNRemainedLen = uliByteLen - iNPos;
80201a9c:	e0bfed17 	ldw	r2,-76(fp)
80201aa0:	e0ffe717 	ldw	r3,-100(fp)
80201aa4:	1885c83a 	sub	r2,r3,r2
80201aa8:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
80201aac:	e0bfe917 	ldw	r2,-92(fp)
80201ab0:	e0fff217 	ldw	r3,-56(fp)
80201ab4:	1880060e 	bge	r3,r2,80201ad0 <bDdr2MemoryReadTest+0x24c>
			iNAccessLen = iNRemainedLen;
80201ab8:	e0bff217 	ldw	r2,-56(fp)
80201abc:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
80201ac0:	e0ffe917 	ldw	r3,-92(fp)
80201ac4:	e0bfef17 	ldw	r2,-68(fp)
80201ac8:	1885283a 	div	r2,r3,r2
80201acc:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
80201ad0:	00a008b4 	movhi	r2,32802
80201ad4:	10bca004 	addi	r2,r2,-3456
80201ad8:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
80201adc:	e03fe815 	stw	zero,-96(fp)
80201ae0:	00002906 	br	80201b88 <bDdr2MemoryReadTest+0x304>
			if (*pxSrc++ != *pxDes++) {
80201ae4:	e0bfeb17 	ldw	r2,-84(fp)
80201ae8:	10c00104 	addi	r3,r2,4
80201aec:	e0ffeb15 	stw	r3,-84(fp)
80201af0:	10c00017 	ldw	r3,0(r2)
80201af4:	e0bfea17 	ldw	r2,-88(fp)
80201af8:	11000104 	addi	r4,r2,4
80201afc:	e13fea15 	stw	r4,-88(fp)
80201b00:	10800017 	ldw	r2,0(r2)
80201b04:	18801d26 	beq	r3,r2,80201b7c <bDdr2MemoryReadTest+0x2f8>
#if DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
80201b08:	e0bfeb17 	ldw	r2,-84(fp)
80201b0c:	10bfff04 	addi	r2,r2,-4
80201b10:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b14:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
80201b18:	00a008b4 	movhi	r2,32802
80201b1c:	10bca004 	addi	r2,r2,-3456
80201b20:	e0ffe817 	ldw	r3,-96(fp)
80201b24:	18c7883a 	add	r3,r3,r3
80201b28:	18c7883a 	add	r3,r3,r3
80201b2c:	10c5883a 	add	r2,r2,r3
80201b30:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b34:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
80201b38:	e0ffed17 	ldw	r3,-76(fp)
80201b3c:	e0bfef17 	ldw	r2,-68(fp)
80201b40:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b44:	e0bfe817 	ldw	r2,-96(fp)
80201b48:	1885883a 	add	r2,r3,r2
80201b4c:	d8800015 	stw	r2,0(sp)
80201b50:	280f883a 	mov	r7,r5
80201b54:	200d883a 	mov	r6,r4
80201b58:	016008b4 	movhi	r5,32802
80201b5c:	296fd004 	addi	r5,r5,-16576
80201b60:	012008b4 	movhi	r4,32802
80201b64:	213c6004 	addi	r4,r4,-3712
80201b68:	02065b80 	call	802065b8 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
80201b6c:	012008b4 	movhi	r4,32802
80201b70:	213c6004 	addi	r4,r4,-3712
80201b74:	02064500 	call	80206450 <printf>
#endif
				bSuccess = FALSE;
80201b78:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
80201b7c:	e0bfe817 	ldw	r2,-96(fp)
80201b80:	10800044 	addi	r2,r2,1
80201b84:	e0bfe815 	stw	r2,-96(fp)
80201b88:	e0ffe817 	ldw	r3,-96(fp)
80201b8c:	e0bfec17 	ldw	r2,-80(fp)
80201b90:	1880020e 	bge	r3,r2,80201b9c <bDdr2MemoryReadTest+0x318>
80201b94:	e0bfe517 	ldw	r2,-108(fp)
80201b98:	103fd21e 	bne	r2,zero,80201ae4 <__reset+0xfa1e1ae4>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
80201b9c:	e0ffed17 	ldw	r3,-76(fp)
80201ba0:	e0bfe917 	ldw	r2,-92(fp)
80201ba4:	1885883a 	add	r2,r3,r2
80201ba8:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
80201bac:	e0bfee17 	ldw	r2,-72(fp)
80201bb0:	10800288 	cmpgei	r2,r2,10
80201bb4:	1000171e 	bne	r2,zero,80201c14 <bDdr2MemoryReadTest+0x390>
80201bb8:	e0bfee17 	ldw	r2,-72(fp)
80201bbc:	1085883a 	add	r2,r2,r2
80201bc0:	1085883a 	add	r2,r2,r2
80201bc4:	e0ffe504 	addi	r3,fp,-108
80201bc8:	1885883a 	add	r2,r3,r2
80201bcc:	10800e04 	addi	r2,r2,56
80201bd0:	10800017 	ldw	r2,0(r2)
80201bd4:	e0ffed17 	ldw	r3,-76(fp)
80201bd8:	18800e36 	bltu	r3,r2,80201c14 <bDdr2MemoryReadTest+0x390>
			iNProgressIndex++;
80201bdc:	e0bfee17 	ldw	r2,-72(fp)
80201be0:	10800044 	addi	r2,r2,1
80201be4:	e0bfee15 	stw	r2,-72(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
80201be8:	e0bfee17 	ldw	r2,-72(fp)
80201bec:	108002a4 	muli	r2,r2,10
80201bf0:	100d883a 	mov	r6,r2
80201bf4:	016008b4 	movhi	r5,32802
80201bf8:	296fa504 	addi	r5,r5,-16748
80201bfc:	012008b4 	movhi	r4,32802
80201c00:	213c6004 	addi	r4,r4,-3712
80201c04:	02065b80 	call	802065b8 <sprintf>
			debug(fp, cDebugBuffer);
80201c08:	012008b4 	movhi	r4,32802
80201c0c:	213c6004 	addi	r4,r4,-3712
80201c10:	02064500 	call	80206450 <printf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
80201c14:	e0bfe517 	ldw	r2,-108(fp)
80201c18:	10000326 	beq	r2,zero,80201c28 <bDdr2MemoryReadTest+0x3a4>
80201c1c:	e0ffed17 	ldw	r3,-76(fp)
80201c20:	e0bfe717 	ldw	r2,-100(fp)
80201c24:	18bf9d36 	bltu	r3,r2,80201a9c <__reset+0xfa1e1a9c>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201c28:	00a008b4 	movhi	r2,32802
80201c2c:	10bc6004 	addi	r2,r2,-3712
80201c30:	00c00284 	movi	r3,10
80201c34:	10c00005 	stb	r3,0(r2)
80201c38:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201c3c:	012008b4 	movhi	r4,32802
80201c40:	213c6004 	addi	r4,r4,-3712
80201c44:	02064500 	call	80206450 <printf>
80201c48:	d0e02817 	ldw	r3,-32608(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
80201c4c:	e0bff117 	ldw	r2,-60(fp)
80201c50:	1885c83a 	sub	r2,r3,r2
80201c54:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
80201c58:	e0bfe517 	ldw	r2,-108(fp)
80201c5c:	10001c26 	beq	r2,zero,80201cd0 <bDdr2MemoryReadTest+0x44c>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
80201c60:	e13ff017 	ldw	r4,-64(fp)
80201c64:	0205e500 	call	80205e50 <__floatsisf>
80201c68:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80201c6c:	d0a02717 	ldw	r2,-32612(gp)
80201c70:	1009883a 	mov	r4,r2
80201c74:	0205f740 	call	80205f74 <__floatunsisf>
80201c78:	1007883a 	mov	r3,r2
80201c7c:	180b883a 	mov	r5,r3
80201c80:	8009883a 	mov	r4,r16
80201c84:	0205a100 	call	80205a10 <__divsf3>
80201c88:	1007883a 	mov	r3,r2
80201c8c:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
80201c90:	1009883a 	mov	r4,r2
80201c94:	02060640 	call	80206064 <__extendsfdf2>
80201c98:	1009883a 	mov	r4,r2
80201c9c:	180b883a 	mov	r5,r3
80201ca0:	d9400015 	stw	r5,0(sp)
80201ca4:	200f883a 	mov	r7,r4
80201ca8:	e1bfe717 	ldw	r6,-100(fp)
80201cac:	016008b4 	movhi	r5,32802
80201cb0:	296fde04 	addi	r5,r5,-16520
80201cb4:	012008b4 	movhi	r4,32802
80201cb8:	213c6004 	addi	r4,r4,-3712
80201cbc:	02065b80 	call	802065b8 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
80201cc0:	012008b4 	movhi	r4,32802
80201cc4:	213c6004 	addi	r4,r4,-3712
80201cc8:	02064500 	call	80206450 <printf>
80201ccc:	00000d06 	br	80201d04 <bDdr2MemoryReadTest+0x480>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
80201cd0:	00e008b4 	movhi	r3,32802
80201cd4:	18fc6004 	addi	r3,r3,-3712
80201cd8:	00a008b4 	movhi	r2,32802
80201cdc:	10afea04 	addi	r2,r2,-16472
80201ce0:	1009883a 	mov	r4,r2
80201ce4:	00800544 	movi	r2,21
80201ce8:	100d883a 	mov	r6,r2
80201cec:	200b883a 	mov	r5,r4
80201cf0:	1809883a 	mov	r4,r3
80201cf4:	02062d80 	call	802062d8 <memcpy>
		debug(fp, cDebugBuffer);
80201cf8:	012008b4 	movhi	r4,32802
80201cfc:	213c6004 	addi	r4,r4,-3712
80201d00:	02064500 	call	80206450 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201d04:	00a008b4 	movhi	r2,32802
80201d08:	10bc6004 	addi	r2,r2,-3712
80201d0c:	00c00284 	movi	r3,10
80201d10:	10c00005 	stb	r3,0(r2)
80201d14:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201d18:	012008b4 	movhi	r4,32802
80201d1c:	213c6004 	addi	r4,r4,-3712
80201d20:	02064500 	call	80206450 <printf>
#endif

	return bSuccess;
80201d24:	e0bfe517 	ldw	r2,-108(fp)
}
80201d28:	e6fffe04 	addi	sp,fp,-8
80201d2c:	dfc00317 	ldw	ra,12(sp)
80201d30:	df000217 	ldw	fp,8(sp)
80201d34:	dc400117 	ldw	r17,4(sp)
80201d38:	dc000017 	ldw	r16,0(sp)
80201d3c:	dec00404 	addi	sp,sp,16
80201d40:	f800283a 	ret

80201d44 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
80201d44:	deffec04 	addi	sp,sp,-80
80201d48:	dfc01315 	stw	ra,76(sp)
80201d4c:	df001215 	stw	fp,72(sp)
80201d50:	dcc01115 	stw	r19,68(sp)
80201d54:	dc801015 	stw	r18,64(sp)
80201d58:	dc400f15 	stw	r17,60(sp)
80201d5c:	dc000e15 	stw	r16,56(sp)
80201d60:	df001204 	addi	fp,sp,72
80201d64:	2005883a 	mov	r2,r4
80201d68:	e17ffa15 	stw	r5,-24(fp)
80201d6c:	e1bffb15 	stw	r6,-20(fp)
80201d70:	e0bff905 	stb	r2,-28(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
80201d74:	00e008b4 	movhi	r3,32802
80201d78:	18fc6004 	addi	r3,r3,-3712
80201d7c:	00a008b4 	movhi	r2,32802
80201d80:	10aff004 	addi	r2,r2,-16448
80201d84:	1009883a 	mov	r4,r2
80201d88:	00800bc4 	movi	r2,47
80201d8c:	100d883a 	mov	r6,r2
80201d90:	200b883a 	mov	r5,r4
80201d94:	1809883a 	mov	r4,r3
80201d98:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
80201d9c:	012008b4 	movhi	r4,32802
80201da0:	213c6004 	addi	r4,r4,-3712
80201da4:	02064500 	call	80206450 <printf>
#endif
	bool bSuccess = FALSE;
80201da8:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
80201dac:	e0bff903 	ldbu	r2,-28(fp)
80201db0:	10000326 	beq	r2,zero,80201dc0 <bDdr2MemoryRandomWriteTest+0x7c>
80201db4:	10800060 	cmpeqi	r2,r2,1
80201db8:	10000a1e 	bne	r2,zero,80201de4 <bDdr2MemoryRandomWriteTest+0xa0>
80201dbc:	00001206 	br	80201e08 <bDdr2MemoryRandomWriteTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201dc0:	e0bff903 	ldbu	r2,-28(fp)
80201dc4:	1009883a 	mov	r4,r2
80201dc8:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201dcc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
80201dd0:	00a00034 	movhi	r2,32768
80201dd4:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80201dd8:	00800044 	movi	r2,1
80201ddc:	e0bfef15 	stw	r2,-68(fp)
		break;
80201de0:	00001906 	br	80201e48 <bDdr2MemoryRandomWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201de4:	e0bff903 	ldbu	r2,-28(fp)
80201de8:	1009883a 	mov	r4,r2
80201dec:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201df0:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
80201df4:	00a00034 	movhi	r2,32768
80201df8:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80201dfc:	00800044 	movi	r2,1
80201e00:	e0bfef15 	stw	r2,-68(fp)
		break;
80201e04:	00001006 	br	80201e48 <bDdr2MemoryRandomWriteTest+0x104>
	default:
		bSuccess = FALSE;
80201e08:	e03fef15 	stw	zero,-68(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201e0c:	00e008b4 	movhi	r3,32802
80201e10:	18fc6004 	addi	r3,r3,-3712
80201e14:	00a008b4 	movhi	r2,32802
80201e18:	10ada104 	addi	r2,r2,-18812
80201e1c:	1009883a 	mov	r4,r2
80201e20:	00800bc4 	movi	r2,47
80201e24:	100d883a 	mov	r6,r2
80201e28:	200b883a 	mov	r5,r4
80201e2c:	1809883a 	mov	r4,r3
80201e30:	02062d80 	call	802062d8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
80201e34:	012008b4 	movhi	r4,32802
80201e38:	213c6004 	addi	r4,r4,-3712
80201e3c:	02064500 	call	80206450 <printf>
		;
#endif
		return bSuccess;
80201e40:	e0bfef17 	ldw	r2,-68(fp)
80201e44:	0000bc06 	br	80202138 <bDdr2MemoryRandomWriteTest+0x3f4>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80201e48:	e0bff117 	ldw	r2,-60(fp)
80201e4c:	1004d53a 	srli	r2,r2,20
80201e50:	100d883a 	mov	r6,r2
80201e54:	016008b4 	movhi	r5,32802
80201e58:	296f9a04 	addi	r5,r5,-16792
80201e5c:	012008b4 	movhi	r4,32802
80201e60:	213c6004 	addi	r4,r4,-3712
80201e64:	02065b80 	call	802065b8 <sprintf>
	debug(fp, cDebugBuffer);
80201e68:	012008b4 	movhi	r4,32802
80201e6c:	213c6004 	addi	r4,r4,-3712
80201e70:	02064500 	call	80206450 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80201e74:	d0a02817 	ldw	r2,-32608(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
80201e78:	d0a01315 	stw	r2,-32692(gp)
	uliCurrentState = uliInitialState;
80201e7c:	d0a01317 	ldw	r2,-32692(gp)
80201e80:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
80201e84:	e0fff017 	ldw	r3,-64(fp)
80201e88:	e0bff117 	ldw	r2,-60(fp)
80201e8c:	1885883a 	add	r2,r3,r2
80201e90:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
80201e94:	e0fff117 	ldw	r3,-60(fp)
80201e98:	00b33374 	movhi	r2,52429
80201e9c:	10b33344 	addi	r2,r2,-13107
80201ea0:	1888383a 	mulxuu	r4,r3,r2
80201ea4:	1885383a 	mul	r2,r3,r2
80201ea8:	1025883a 	mov	r18,r2
80201eac:	2027883a 	mov	r19,r4
80201eb0:	9806d13a 	srli	r3,r19,4
80201eb4:	e0bff017 	ldw	r2,-64(fp)
80201eb8:	1885883a 	add	r2,r3,r2
80201ebc:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
80201ec0:	00800144 	movi	r2,5
80201ec4:	e0bff405 	stb	r2,-48(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
80201ec8:	00e008b4 	movhi	r3,32802
80201ecc:	18fc6004 	addi	r3,r3,-3712
80201ed0:	00a008b4 	movhi	r2,32802
80201ed4:	10affc04 	addi	r2,r2,-16400
80201ed8:	1009883a 	mov	r4,r2
80201edc:	00800584 	movi	r2,22
80201ee0:	100d883a 	mov	r6,r2
80201ee4:	200b883a 	mov	r5,r4
80201ee8:	1809883a 	mov	r4,r3
80201eec:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
80201ef0:	012008b4 	movhi	r4,32802
80201ef4:	213c6004 	addi	r4,r4,-3712
80201ef8:	02064500 	call	80206450 <printf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
80201efc:	e0bffa17 	ldw	r2,-24(fp)
80201f00:	10800058 	cmpnei	r2,r2,1
80201f04:	1000081e 	bne	r2,zero,80201f28 <bDdr2MemoryRandomWriteTest+0x1e4>
#if DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
80201f08:	016008b4 	movhi	r5,32802
80201f0c:	29700204 	addi	r5,r5,-16376
80201f10:	012008b4 	movhi	r4,32802
80201f14:	213c6004 	addi	r4,r4,-3712
80201f18:	02065b80 	call	802065b8 <sprintf>
		debug(fp, cDebugBuffer);
80201f1c:	012008b4 	movhi	r4,32802
80201f20:	213c6004 	addi	r4,r4,-3712
80201f24:	02064500 	call	80206450 <printf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
80201f28:	e03ff615 	stw	zero,-40(fp)
80201f2c:	d0a02817 	ldw	r2,-32608(gp)

	TimeStart = alt_nticks();
80201f30:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
80201f34:	e0bff017 	ldw	r2,-64(fp)
80201f38:	e0bff215 	stw	r2,-56(fp)
80201f3c:	00002a06 	br	80201fe8 <bDdr2MemoryRandomWriteTest+0x2a4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
80201f40:	e0bff804 	addi	r2,fp,-32
80201f44:	1009883a 	mov	r4,r2
80201f48:	02025980 	call	80202598 <uliXorshift32>
80201f4c:	1007883a 	mov	r3,r2
80201f50:	e0bff217 	ldw	r2,-56(fp)
80201f54:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
80201f58:	e0bffa17 	ldw	r2,-24(fp)
80201f5c:	10800060 	cmpeqi	r2,r2,1
80201f60:	1009883a 	mov	r4,r2
80201f64:	e0bff217 	ldw	r2,-56(fp)
80201f68:	e0fff317 	ldw	r3,-52(fp)
80201f6c:	1885803a 	cmpltu	r2,r3,r2
80201f70:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
80201f74:	10803fcc 	andi	r2,r2,255
80201f78:	10001826 	beq	r2,zero,80201fdc <bDdr2MemoryRandomWriteTest+0x298>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#if DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
80201f7c:	e0bff403 	ldbu	r2,-48(fp)
80201f80:	100d883a 	mov	r6,r2
80201f84:	016008b4 	movhi	r5,32802
80201f88:	29700404 	addi	r5,r5,-16368
80201f8c:	012008b4 	movhi	r4,32802
80201f90:	213c6004 	addi	r4,r4,-3712
80201f94:	02065b80 	call	802065b8 <sprintf>
			debug(fp, cDebugBuffer);
80201f98:	012008b4 	movhi	r4,32802
80201f9c:	213c6004 	addi	r4,r4,-3712
80201fa0:	02064500 	call	80206450 <printf>
#endif
			uliNextMilestone += uliByteLen / 20;
80201fa4:	e0fff117 	ldw	r3,-60(fp)
80201fa8:	00b33374 	movhi	r2,52429
80201fac:	10b33344 	addi	r2,r2,-13107
80201fb0:	1888383a 	mulxuu	r4,r3,r2
80201fb4:	1885383a 	mul	r2,r3,r2
80201fb8:	1021883a 	mov	r16,r2
80201fbc:	2023883a 	mov	r17,r4
80201fc0:	8804d13a 	srli	r2,r17,4
80201fc4:	e0fff317 	ldw	r3,-52(fp)
80201fc8:	1885883a 	add	r2,r3,r2
80201fcc:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
80201fd0:	e0bff403 	ldbu	r2,-48(fp)
80201fd4:	10800144 	addi	r2,r2,5
80201fd8:	e0bff405 	stb	r2,-48(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
80201fdc:	e0bff217 	ldw	r2,-56(fp)
80201fe0:	10800104 	addi	r2,r2,4
80201fe4:	e0bff215 	stw	r2,-56(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
80201fe8:	e0fff217 	ldw	r3,-56(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
80201fec:	e0bff517 	ldw	r2,-44(fp)
80201ff0:	18bfd336 	bltu	r3,r2,80201f40 <__reset+0xfa1e1f40>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
80201ff4:	02164700 	call	80216470 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
80201ff8:	e0bffa17 	ldw	r2,-24(fp)
80201ffc:	10800058 	cmpnei	r2,r2,1
80202000:	1000081e 	bne	r2,zero,80202024 <bDdr2MemoryRandomWriteTest+0x2e0>
#if DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
80202004:	016008b4 	movhi	r5,32802
80202008:	29700704 	addi	r5,r5,-16356
8020200c:	012008b4 	movhi	r4,32802
80202010:	213c6004 	addi	r4,r4,-3712
80202014:	02065b80 	call	802065b8 <sprintf>
		debug(fp, cDebugBuffer);
80202018:	012008b4 	movhi	r4,32802
8020201c:	213c6004 	addi	r4,r4,-3712
80202020:	02064500 	call	80206450 <printf>
#endif
	}

	if (bSuccess) {
80202024:	e0bfef17 	ldw	r2,-68(fp)
80202028:	10002d26 	beq	r2,zero,802020e0 <bDdr2MemoryRandomWriteTest+0x39c>
		if (bTime == TRUE) {
8020202c:	e0bffb17 	ldw	r2,-20(fp)
80202030:	10800058 	cmpnei	r2,r2,1
80202034:	1000201e 	bne	r2,zero,802020b8 <bDdr2MemoryRandomWriteTest+0x374>
80202038:	d0e02817 	ldw	r3,-32608(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8020203c:	e0bff717 	ldw	r2,-36(fp)
80202040:	1885c83a 	sub	r2,r3,r2
80202044:	e0bff615 	stw	r2,-40(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
80202048:	e13ff617 	ldw	r4,-40(fp)
8020204c:	0205e500 	call	80205e50 <__floatsisf>
80202050:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80202054:	d0a02717 	ldw	r2,-32612(gp)
80202058:	1009883a 	mov	r4,r2
8020205c:	0205f740 	call	80205f74 <__floatunsisf>
80202060:	1007883a 	mov	r3,r2
80202064:	180b883a 	mov	r5,r3
80202068:	8009883a 	mov	r4,r16
8020206c:	0205a100 	call	80205a10 <__divsf3>
80202070:	1007883a 	mov	r3,r2
80202074:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#if DEBUG_ON
			sprintf(cDebugBuffer,
80202078:	1009883a 	mov	r4,r2
8020207c:	02060640 	call	80206064 <__extendsfdf2>
80202080:	1009883a 	mov	r4,r2
80202084:	180b883a 	mov	r5,r3
80202088:	d9400015 	stw	r5,0(sp)
8020208c:	200f883a 	mov	r7,r4
80202090:	e1bff117 	ldw	r6,-60(fp)
80202094:	016008b4 	movhi	r5,32802
80202098:	29700a04 	addi	r5,r5,-16344
8020209c:	012008b4 	movhi	r4,32802
802020a0:	213c6004 	addi	r4,r4,-3712
802020a4:	02065b80 	call	802065b8 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
802020a8:	012008b4 	movhi	r4,32802
802020ac:	213c6004 	addi	r4,r4,-3712
802020b0:	02064500 	call	80206450 <printf>
802020b4:	00001706 	br	80202114 <bDdr2MemoryRandomWriteTest+0x3d0>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
802020b8:	e1bff117 	ldw	r6,-60(fp)
802020bc:	016008b4 	movhi	r5,32802
802020c0:	29701604 	addi	r5,r5,-16296
802020c4:	012008b4 	movhi	r4,32802
802020c8:	213c6004 	addi	r4,r4,-3712
802020cc:	02065b80 	call	802065b8 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
802020d0:	012008b4 	movhi	r4,32802
802020d4:	213c6004 	addi	r4,r4,-3712
802020d8:	02064500 	call	80206450 <printf>
802020dc:	00000d06 	br	80202114 <bDdr2MemoryRandomWriteTest+0x3d0>
#endif
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
802020e0:	00e008b4 	movhi	r3,32802
802020e4:	18fc6004 	addi	r3,r3,-3712
802020e8:	00a008b4 	movhi	r2,32802
802020ec:	10afb304 	addi	r2,r2,-16692
802020f0:	1009883a 	mov	r4,r2
802020f4:	00800584 	movi	r2,22
802020f8:	100d883a 	mov	r6,r2
802020fc:	200b883a 	mov	r5,r4
80202100:	1809883a 	mov	r4,r3
80202104:	02062d80 	call	802062d8 <memcpy>
		debug(fp, cDebugBuffer);
80202108:	012008b4 	movhi	r4,32802
8020210c:	213c6004 	addi	r4,r4,-3712
80202110:	02064500 	call	80206450 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80202114:	00a008b4 	movhi	r2,32802
80202118:	10bc6004 	addi	r2,r2,-3712
8020211c:	00c00284 	movi	r3,10
80202120:	10c00005 	stb	r3,0(r2)
80202124:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80202128:	012008b4 	movhi	r4,32802
8020212c:	213c6004 	addi	r4,r4,-3712
80202130:	02064500 	call	80206450 <printf>
#endif

	return bSuccess;
80202134:	e0bfef17 	ldw	r2,-68(fp)
}
80202138:	e6fffc04 	addi	sp,fp,-16
8020213c:	dfc00517 	ldw	ra,20(sp)
80202140:	df000417 	ldw	fp,16(sp)
80202144:	dcc00317 	ldw	r19,12(sp)
80202148:	dc800217 	ldw	r18,8(sp)
8020214c:	dc400117 	ldw	r17,4(sp)
80202150:	dc000017 	ldw	r16,0(sp)
80202154:	dec00604 	addi	sp,sp,24
80202158:	f800283a 	ret

8020215c <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
8020215c:	deffec04 	addi	sp,sp,-80
80202160:	dfc01315 	stw	ra,76(sp)
80202164:	df001215 	stw	fp,72(sp)
80202168:	dcc01115 	stw	r19,68(sp)
8020216c:	dc801015 	stw	r18,64(sp)
80202170:	dc400f15 	stw	r17,60(sp)
80202174:	dc000e15 	stw	r16,56(sp)
80202178:	df001204 	addi	fp,sp,72
8020217c:	2005883a 	mov	r2,r4
80202180:	e17ffa15 	stw	r5,-24(fp)
80202184:	e1bffb15 	stw	r6,-20(fp)
80202188:	e0bff905 	stb	r2,-28(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
8020218c:	00e008b4 	movhi	r3,32802
80202190:	18fc6004 	addi	r3,r3,-3712
80202194:	00a008b4 	movhi	r2,32802
80202198:	10b02004 	addi	r2,r2,-16256
8020219c:	1009883a 	mov	r4,r2
802021a0:	00800b84 	movi	r2,46
802021a4:	100d883a 	mov	r6,r2
802021a8:	200b883a 	mov	r5,r4
802021ac:	1809883a 	mov	r4,r3
802021b0:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
802021b4:	012008b4 	movhi	r4,32802
802021b8:	213c6004 	addi	r4,r4,-3712
802021bc:	02064500 	call	80206450 <printf>
#endif
	bool bSuccess = FALSE;
802021c0:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802021c4:	e0bff903 	ldbu	r2,-28(fp)
802021c8:	10000326 	beq	r2,zero,802021d8 <bDdr2MemoryRandomReadTest+0x7c>
802021cc:	10800060 	cmpeqi	r2,r2,1
802021d0:	10000a1e 	bne	r2,zero,802021fc <bDdr2MemoryRandomReadTest+0xa0>
802021d4:	00001206 	br	80202220 <bDdr2MemoryRandomReadTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802021d8:	e0bff903 	ldbu	r2,-28(fp)
802021dc:	1009883a 	mov	r4,r2
802021e0:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802021e4:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
802021e8:	00a00034 	movhi	r2,32768
802021ec:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
802021f0:	00800044 	movi	r2,1
802021f4:	e0bfef15 	stw	r2,-68(fp)
		break;
802021f8:	00001906 	br	80202260 <bDdr2MemoryRandomReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
802021fc:	e0bff903 	ldbu	r2,-28(fp)
80202200:	1009883a 	mov	r4,r2
80202204:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80202208:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
8020220c:	00a00034 	movhi	r2,32768
80202210:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80202214:	00800044 	movi	r2,1
80202218:	e0bfef15 	stw	r2,-68(fp)
		break;
8020221c:	00001006 	br	80202260 <bDdr2MemoryRandomReadTest+0x104>
	default:
		bSuccess = FALSE;
80202220:	e03fef15 	stw	zero,-68(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80202224:	00e008b4 	movhi	r3,32802
80202228:	18fc6004 	addi	r3,r3,-3712
8020222c:	00a008b4 	movhi	r2,32802
80202230:	10ada104 	addi	r2,r2,-18812
80202234:	1009883a 	mov	r4,r2
80202238:	00800bc4 	movi	r2,47
8020223c:	100d883a 	mov	r6,r2
80202240:	200b883a 	mov	r5,r4
80202244:	1809883a 	mov	r4,r3
80202248:	02062d80 	call	802062d8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020224c:	012008b4 	movhi	r4,32802
80202250:	213c6004 	addi	r4,r4,-3712
80202254:	02064500 	call	80206450 <printf>
		;
#endif
		return bSuccess;
80202258:	e0bfef17 	ldw	r2,-68(fp)
8020225c:	0000c506 	br	80202574 <bDdr2MemoryRandomReadTest+0x418>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80202260:	e0bff117 	ldw	r2,-60(fp)
80202264:	1004d53a 	srli	r2,r2,20
80202268:	100d883a 	mov	r6,r2
8020226c:	016008b4 	movhi	r5,32802
80202270:	296f9a04 	addi	r5,r5,-16792
80202274:	012008b4 	movhi	r4,32802
80202278:	213c6004 	addi	r4,r4,-3712
8020227c:	02065b80 	call	802065b8 <sprintf>
	debug(fp, cDebugBuffer);
80202280:	012008b4 	movhi	r4,32802
80202284:	213c6004 	addi	r4,r4,-3712
80202288:	02064500 	call	80206450 <printf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
8020228c:	d0a01317 	ldw	r2,-32692(gp)
80202290:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
80202294:	e0fff017 	ldw	r3,-64(fp)
80202298:	e0bff117 	ldw	r2,-60(fp)
8020229c:	1885883a 	add	r2,r3,r2
802022a0:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
802022a4:	e0fff117 	ldw	r3,-60(fp)
802022a8:	00b33374 	movhi	r2,52429
802022ac:	10b33344 	addi	r2,r2,-13107
802022b0:	1888383a 	mulxuu	r4,r3,r2
802022b4:	1885383a 	mul	r2,r3,r2
802022b8:	1025883a 	mov	r18,r2
802022bc:	2027883a 	mov	r19,r4
802022c0:	9806d13a 	srli	r3,r19,4
802022c4:	e0bff017 	ldw	r2,-64(fp)
802022c8:	1885883a 	add	r2,r3,r2
802022cc:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
802022d0:	00800144 	movi	r2,5
802022d4:	e0bff405 	stb	r2,-48(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
802022d8:	00e008b4 	movhi	r3,32802
802022dc:	18fc6004 	addi	r3,r3,-3712
802022e0:	00a008b4 	movhi	r2,32802
802022e4:	10b02c04 	addi	r2,r2,-16208
802022e8:	1009883a 	mov	r4,r2
802022ec:	00800604 	movi	r2,24
802022f0:	100d883a 	mov	r6,r2
802022f4:	200b883a 	mov	r5,r4
802022f8:	1809883a 	mov	r4,r3
802022fc:	02062d80 	call	802062d8 <memcpy>
	debug(fp, cDebugBuffer);
80202300:	012008b4 	movhi	r4,32802
80202304:	213c6004 	addi	r4,r4,-3712
80202308:	02064500 	call	80206450 <printf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
8020230c:	e0bffa17 	ldw	r2,-24(fp)
80202310:	10800058 	cmpnei	r2,r2,1
80202314:	1000081e 	bne	r2,zero,80202338 <bDdr2MemoryRandomReadTest+0x1dc>
#if DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
80202318:	016008b4 	movhi	r5,32802
8020231c:	29700204 	addi	r5,r5,-16376
80202320:	012008b4 	movhi	r4,32802
80202324:	213c6004 	addi	r4,r4,-3712
80202328:	02065b80 	call	802065b8 <sprintf>
		debug(fp, cDebugBuffer);
8020232c:	012008b4 	movhi	r4,32802
80202330:	213c6004 	addi	r4,r4,-3712
80202334:	02064500 	call	80206450 <printf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
80202338:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8020233c:	d0a02817 	ldw	r2,-32608(gp)

	TimeStart = alt_nticks();
80202340:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
80202344:	e0bff017 	ldw	r2,-64(fp)
80202348:	e0bff215 	stw	r2,-56(fp)
8020234c:	00003606 	br	80202428 <bDdr2MemoryRandomReadTest+0x2cc>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
80202350:	e0bff804 	addi	r2,fp,-32
80202354:	1009883a 	mov	r4,r2
80202358:	02025980 	call	80202598 <uliXorshift32>
8020235c:	1007883a 	mov	r3,r2
80202360:	e0bff217 	ldw	r2,-56(fp)
80202364:	10800017 	ldw	r2,0(r2)
80202368:	18800e26 	beq	r3,r2,802023a4 <bDdr2MemoryRandomReadTest+0x248>
			bSuccess = FALSE;
8020236c:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
80202370:	e0bffa17 	ldw	r2,-24(fp)
80202374:	10800058 	cmpnei	r2,r2,1
80202378:	10000a1e 	bne	r2,zero,802023a4 <bDdr2MemoryRandomReadTest+0x248>
#if DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
8020237c:	e0bff217 	ldw	r2,-56(fp)
80202380:	100d883a 	mov	r6,r2
80202384:	016008b4 	movhi	r5,32802
80202388:	29703204 	addi	r5,r5,-16184
8020238c:	012008b4 	movhi	r4,32802
80202390:	213c6004 	addi	r4,r4,-3712
80202394:	02065b80 	call	802065b8 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
80202398:	012008b4 	movhi	r4,32802
8020239c:	213c6004 	addi	r4,r4,-3712
802023a0:	02064500 	call	80206450 <printf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
802023a4:	e0bffa17 	ldw	r2,-24(fp)
802023a8:	10800058 	cmpnei	r2,r2,1
802023ac:	10001b1e 	bne	r2,zero,8020241c <bDdr2MemoryRandomReadTest+0x2c0>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
802023b0:	e0bff217 	ldw	r2,-56(fp)
802023b4:	e0fff317 	ldw	r3,-52(fp)
802023b8:	1880182e 	bgeu	r3,r2,8020241c <bDdr2MemoryRandomReadTest+0x2c0>
#if DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
802023bc:	e0bff403 	ldbu	r2,-48(fp)
802023c0:	100d883a 	mov	r6,r2
802023c4:	016008b4 	movhi	r5,32802
802023c8:	29700404 	addi	r5,r5,-16368
802023cc:	012008b4 	movhi	r4,32802
802023d0:	213c6004 	addi	r4,r4,-3712
802023d4:	02065b80 	call	802065b8 <sprintf>
			debug(fp, cDebugBuffer);
802023d8:	012008b4 	movhi	r4,32802
802023dc:	213c6004 	addi	r4,r4,-3712
802023e0:	02064500 	call	80206450 <printf>
#endif
			uliNextMilestone += uliByteLen / 20;
802023e4:	e0fff117 	ldw	r3,-60(fp)
802023e8:	00b33374 	movhi	r2,52429
802023ec:	10b33344 	addi	r2,r2,-13107
802023f0:	1888383a 	mulxuu	r4,r3,r2
802023f4:	1885383a 	mul	r2,r3,r2
802023f8:	1021883a 	mov	r16,r2
802023fc:	2023883a 	mov	r17,r4
80202400:	8804d13a 	srli	r2,r17,4
80202404:	e0fff317 	ldw	r3,-52(fp)
80202408:	1885883a 	add	r2,r3,r2
8020240c:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
80202410:	e0bff403 	ldbu	r2,-48(fp)
80202414:	10800144 	addi	r2,r2,5
80202418:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
8020241c:	e0bff217 	ldw	r2,-56(fp)
80202420:	10800104 	addi	r2,r2,4
80202424:	e0bff215 	stw	r2,-56(fp)
80202428:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
8020242c:	e0bff517 	ldw	r2,-44(fp)
80202430:	18bfc736 	bltu	r3,r2,80202350 <__reset+0xfa1e2350>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
80202434:	e0bffa17 	ldw	r2,-24(fp)
80202438:	10800058 	cmpnei	r2,r2,1
8020243c:	1000081e 	bne	r2,zero,80202460 <bDdr2MemoryRandomReadTest+0x304>
#if DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
80202440:	016008b4 	movhi	r5,32802
80202444:	29700704 	addi	r5,r5,-16356
80202448:	012008b4 	movhi	r4,32802
8020244c:	213c6004 	addi	r4,r4,-3712
80202450:	02065b80 	call	802065b8 <sprintf>
		debug(fp, cDebugBuffer);
80202454:	012008b4 	movhi	r4,32802
80202458:	213c6004 	addi	r4,r4,-3712
8020245c:	02064500 	call	80206450 <printf>
#endif
	}

	if (bSuccess) {
80202460:	e0bfef17 	ldw	r2,-68(fp)
80202464:	10002d26 	beq	r2,zero,8020251c <bDdr2MemoryRandomReadTest+0x3c0>
		if (bTime == TRUE) {
80202468:	e0bffb17 	ldw	r2,-20(fp)
8020246c:	10800058 	cmpnei	r2,r2,1
80202470:	1000201e 	bne	r2,zero,802024f4 <bDdr2MemoryRandomReadTest+0x398>
80202474:	d0e02817 	ldw	r3,-32608(gp)
			TimeElapsed = alt_nticks() - TimeStart;
80202478:	e0bff717 	ldw	r2,-36(fp)
8020247c:	1885c83a 	sub	r2,r3,r2
80202480:	e0bff615 	stw	r2,-40(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
80202484:	e13ff617 	ldw	r4,-40(fp)
80202488:	0205e500 	call	80205e50 <__floatsisf>
8020248c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80202490:	d0a02717 	ldw	r2,-32612(gp)
80202494:	1009883a 	mov	r4,r2
80202498:	0205f740 	call	80205f74 <__floatunsisf>
8020249c:	1007883a 	mov	r3,r2
802024a0:	180b883a 	mov	r5,r3
802024a4:	8009883a 	mov	r4,r16
802024a8:	0205a100 	call	80205a10 <__divsf3>
802024ac:	1007883a 	mov	r3,r2
802024b0:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#if DEBUG_ON
			sprintf(cDebugBuffer,
802024b4:	1009883a 	mov	r4,r2
802024b8:	02060640 	call	80206064 <__extendsfdf2>
802024bc:	1009883a 	mov	r4,r2
802024c0:	180b883a 	mov	r5,r3
802024c4:	d9400015 	stw	r5,0(sp)
802024c8:	200f883a 	mov	r7,r4
802024cc:	e1bff117 	ldw	r6,-60(fp)
802024d0:	016008b4 	movhi	r5,32802
802024d4:	29703a04 	addi	r5,r5,-16152
802024d8:	012008b4 	movhi	r4,32802
802024dc:	213c6004 	addi	r4,r4,-3712
802024e0:	02065b80 	call	802065b8 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
802024e4:	012008b4 	movhi	r4,32802
802024e8:	213c6004 	addi	r4,r4,-3712
802024ec:	02064500 	call	80206450 <printf>
802024f0:	00001706 	br	80202550 <bDdr2MemoryRandomReadTest+0x3f4>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
802024f4:	e1bff117 	ldw	r6,-60(fp)
802024f8:	016008b4 	movhi	r5,32802
802024fc:	29704604 	addi	r5,r5,-16104
80202500:	012008b4 	movhi	r4,32802
80202504:	213c6004 	addi	r4,r4,-3712
80202508:	02065b80 	call	802065b8 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
8020250c:	012008b4 	movhi	r4,32802
80202510:	213c6004 	addi	r4,r4,-3712
80202514:	02064500 	call	80206450 <printf>
80202518:	00000d06 	br	80202550 <bDdr2MemoryRandomReadTest+0x3f4>
#endif
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
8020251c:	00e008b4 	movhi	r3,32802
80202520:	18fc6004 	addi	r3,r3,-3712
80202524:	00a008b4 	movhi	r2,32802
80202528:	10afea04 	addi	r2,r2,-16472
8020252c:	1009883a 	mov	r4,r2
80202530:	00800544 	movi	r2,21
80202534:	100d883a 	mov	r6,r2
80202538:	200b883a 	mov	r5,r4
8020253c:	1809883a 	mov	r4,r3
80202540:	02062d80 	call	802062d8 <memcpy>
		debug(fp, cDebugBuffer);
80202544:	012008b4 	movhi	r4,32802
80202548:	213c6004 	addi	r4,r4,-3712
8020254c:	02064500 	call	80206450 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80202550:	00a008b4 	movhi	r2,32802
80202554:	10bc6004 	addi	r2,r2,-3712
80202558:	00c00284 	movi	r3,10
8020255c:	10c00005 	stb	r3,0(r2)
80202560:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80202564:	012008b4 	movhi	r4,32802
80202568:	213c6004 	addi	r4,r4,-3712
8020256c:	02064500 	call	80206450 <printf>
#endif

	return bSuccess;
80202570:	e0bfef17 	ldw	r2,-68(fp)
}
80202574:	e6fffc04 	addi	sp,fp,-16
80202578:	dfc00517 	ldw	ra,20(sp)
8020257c:	df000417 	ldw	fp,16(sp)
80202580:	dcc00317 	ldw	r19,12(sp)
80202584:	dc800217 	ldw	r18,8(sp)
80202588:	dc400117 	ldw	r17,4(sp)
8020258c:	dc000017 	ldw	r16,0(sp)
80202590:	dec00604 	addi	sp,sp,24
80202594:	f800283a 	ret

80202598 <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
80202598:	defffd04 	addi	sp,sp,-12
8020259c:	df000215 	stw	fp,8(sp)
802025a0:	df000204 	addi	fp,sp,8
802025a4:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
802025a8:	e0bfff17 	ldw	r2,-4(fp)
802025ac:	10800017 	ldw	r2,0(r2)
802025b0:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
802025b4:	e0bffe17 	ldw	r2,-8(fp)
802025b8:	1004937a 	slli	r2,r2,13
802025bc:	e0fffe17 	ldw	r3,-8(fp)
802025c0:	1884f03a 	xor	r2,r3,r2
802025c4:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
802025c8:	e0bffe17 	ldw	r2,-8(fp)
802025cc:	1004d47a 	srli	r2,r2,17
802025d0:	e0fffe17 	ldw	r3,-8(fp)
802025d4:	1884f03a 	xor	r2,r3,r2
802025d8:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
802025dc:	e0bffe17 	ldw	r2,-8(fp)
802025e0:	1004917a 	slli	r2,r2,5
802025e4:	e0fffe17 	ldw	r3,-8(fp)
802025e8:	1884f03a 	xor	r2,r3,r2
802025ec:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
802025f0:	e0bfff17 	ldw	r2,-4(fp)
802025f4:	e0fffe17 	ldw	r3,-8(fp)
802025f8:	10c00015 	stw	r3,0(r2)

	return uliX;
802025fc:	e0bffe17 	ldw	r2,-8(fp)
}
80202600:	e037883a 	mov	sp,fp
80202604:	df000017 	ldw	fp,0(sp)
80202608:	dec00104 	addi	sp,sp,4
8020260c:	f800283a 	ret

80202610 <bSdmaInitM1Dma>:
alt_msgdma_dev *pxDmaM1Dev = NULL;
alt_msgdma_dev *pxDmaM2Dev = NULL;
//! [data memory public global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
80202610:	defffb04 	addi	sp,sp,-20
80202614:	dfc00415 	stw	ra,16(sp)
80202618:	df000315 	stw	fp,12(sp)
8020261c:	df000304 	addi	fp,sp,12
	bool bStatus = FALSE;
80202620:	e03ffd15 	stw	zero,-12(fp)
	bool bFailDispatcher = FALSE;
80202624:	e03ffe15 	stw	zero,-8(fp)
	alt_u16 usiCounter = 0;
80202628:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
8020262c:	012008b4 	movhi	r4,32802
80202630:	21305004 	addi	r4,r4,-16064
80202634:	0219fd00 	call	80219fd0 <alt_msgdma_open>
80202638:	d0a01415 	stw	r2,-32688(gp)

	// check if the device was opened
	if (pxDmaM1Dev != NULL) {
8020263c:	d0a01417 	ldw	r2,-32688(gp)
80202640:	10001a26 	beq	r2,zero,802026ac <bSdmaInitM1Dma+0x9c>
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80202644:	d0a01417 	ldw	r2,-32688(gp)
80202648:	10800317 	ldw	r2,12(r2)
8020264c:	10800104 	addi	r2,r2,4
80202650:	00c00084 	movi	r3,2
80202654:	10c00035 	stwio	r3,0(r2)
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202658:	00000b06 	br	80202688 <bSdmaInitM1Dma+0x78>
			usleep(1);
8020265c:	01000044 	movi	r4,1
80202660:	0216c4c0 	call	80216c4c <usleep>
			usiCounter++;
80202664:	e0bfff0b 	ldhu	r2,-4(fp)
80202668:	10800044 	addi	r2,r2,1
8020266c:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
80202670:	e0bfff0b 	ldhu	r2,-4(fp)
80202674:	1084e230 	cmpltui	r2,r2,5000
80202678:	1000031e 	bne	r2,zero,80202688 <bSdmaInitM1Dma+0x78>
				bFailDispatcher = TRUE;
8020267c:	00800044 	movi	r2,1
80202680:	e0bffe15 	stw	r2,-8(fp)
				break;
80202684:	00000506 	br	8020269c <bSdmaInitM1Dma+0x8c>
	// check if the device was opened
	if (pxDmaM1Dev != NULL) {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202688:	d0a01417 	ldw	r2,-32688(gp)
8020268c:	10800317 	ldw	r2,12(r2)
80202690:	10800037 	ldwio	r2,0(r2)
80202694:	1080100c 	andi	r2,r2,64
80202698:	103ff01e 	bne	r2,zero,8020265c <__reset+0xfa1e265c>
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
				bFailDispatcher = TRUE;
				break;
			}
		}
		if (bFailDispatcher == FALSE)
8020269c:	e0bffe17 	ldw	r2,-8(fp)
802026a0:	1000021e 	bne	r2,zero,802026ac <bSdmaInitM1Dma+0x9c>
			bStatus = TRUE;
802026a4:	00800044 	movi	r2,1
802026a8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
802026ac:	e0bffd17 	ldw	r2,-12(fp)
}
802026b0:	e037883a 	mov	sp,fp
802026b4:	dfc00117 	ldw	ra,4(sp)
802026b8:	df000017 	ldw	fp,0(sp)
802026bc:	dec00204 	addi	sp,sp,8
802026c0:	f800283a 	ret

802026c4 <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
802026c4:	defffb04 	addi	sp,sp,-20
802026c8:	dfc00415 	stw	ra,16(sp)
802026cc:	df000315 	stw	fp,12(sp)
802026d0:	df000304 	addi	fp,sp,12
	bool bStatus = FALSE;
802026d4:	e03ffd15 	stw	zero,-12(fp)
	bool bFailDispatcher = FALSE;
802026d8:	e03ffe15 	stw	zero,-8(fp)
	alt_u16 usiCounter = 0;
802026dc:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
802026e0:	012008b4 	movhi	r4,32802
802026e4:	21305504 	addi	r4,r4,-16044
802026e8:	0219fd00 	call	80219fd0 <alt_msgdma_open>
802026ec:	d0a01515 	stw	r2,-32684(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
802026f0:	d0a01517 	ldw	r2,-32684(gp)
802026f4:	1000021e 	bne	r2,zero,80202700 <bSdmaInitM2Dma+0x3c>
		// device not opened
		bStatus = FALSE;
802026f8:	e03ffd15 	stw	zero,-12(fp)
802026fc:	00001a06 	br	80202768 <bSdmaInitM2Dma+0xa4>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80202700:	d0a01517 	ldw	r2,-32684(gp)
80202704:	10800317 	ldw	r2,12(r2)
80202708:	10800104 	addi	r2,r2,4
8020270c:	00c00084 	movi	r3,2
80202710:	10c00035 	stwio	r3,0(r2)
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202714:	00000b06 	br	80202744 <bSdmaInitM2Dma+0x80>
			usleep(1);
80202718:	01000044 	movi	r4,1
8020271c:	0216c4c0 	call	80216c4c <usleep>
			usiCounter++;
80202720:	e0bfff0b 	ldhu	r2,-4(fp)
80202724:	10800044 	addi	r2,r2,1
80202728:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
8020272c:	e0bfff0b 	ldhu	r2,-4(fp)
80202730:	1084e230 	cmpltui	r2,r2,5000
80202734:	1000031e 	bne	r2,zero,80202744 <bSdmaInitM2Dma+0x80>
				bFailDispatcher = TRUE;
80202738:	00800044 	movi	r2,1
8020273c:	e0bffe15 	stw	r2,-8(fp)
				break;
80202740:	00000506 	br	80202758 <bSdmaInitM2Dma+0x94>
		bStatus = FALSE;
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202744:	d0a01517 	ldw	r2,-32684(gp)
80202748:	10800317 	ldw	r2,12(r2)
8020274c:	10800037 	ldwio	r2,0(r2)
80202750:	1080100c 	andi	r2,r2,64
80202754:	103ff01e 	bne	r2,zero,80202718 <__reset+0xfa1e2718>
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
				bFailDispatcher = TRUE;
				break;
			}
		}
		if (bFailDispatcher == FALSE)
80202758:	e0bffe17 	ldw	r2,-8(fp)
8020275c:	1000021e 	bne	r2,zero,80202768 <bSdmaInitM2Dma+0xa4>
			bStatus = TRUE;
80202760:	00800044 	movi	r2,1
80202764:	e0bffd15 	stw	r2,-12(fp)
	}
	return bStatus;
80202768:	e0bffd17 	ldw	r2,-12(fp)
}
8020276c:	e037883a 	mov	sp,fp
80202770:	dfc00117 	ldw	ra,4(sp)
80202774:	df000017 	ldw	fp,0(sp)
80202778:	dec00204 	addi	sp,sp,8
8020277c:	f800283a 	ret

80202780 <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide, alt_u8 ucChBufferId) {
80202780:	deffe604 	addi	sp,sp,-104
80202784:	dfc01915 	stw	ra,100(sp)
80202788:	df001815 	stw	fp,96(sp)
8020278c:	dc001715 	stw	r16,92(sp)
80202790:	df001804 	addi	fp,sp,96
80202794:	e13ffb15 	stw	r4,-20(fp)
80202798:	2809883a 	mov	r4,r5
8020279c:	3007883a 	mov	r3,r6
802027a0:	3805883a 	mov	r2,r7
802027a4:	e13ffc0d 	sth	r4,-16(fp)
802027a8:	e0fffd05 	stb	r3,-12(fp)
802027ac:	e0bffe05 	stb	r2,-8(fp)
802027b0:	defff004 	addi	sp,sp,-64
802027b4:	d8800904 	addi	r2,sp,36
802027b8:	108007c4 	addi	r2,r2,31
802027bc:	1004d17a 	srli	r2,r2,5
802027c0:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
802027c4:	e03ff215 	stw	zero,-56(fp)
	alt_u32 uliDestAddrHigh = 0;
802027c8:	e03ff315 	stw	zero,-52(fp)

	alt_u32 uliSrcAddrLow = 0;
802027cc:	e03ff715 	stw	zero,-36(fp)
	alt_u32 uliSrcAddrHigh = 0;
802027d0:	e03ff815 	stw	zero,-32(fp)

	alt_u32 uliControlBits = 0x00000000;
802027d4:	e03ff915 	stw	zero,-28(fp)
	bool bBufferEmptyFlag;
	bool bChannelFlag;
	bool bAddressFlag = FALSE;
802027d8:	e03ff515 	stw	zero,-44(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
802027dc:	e03ff60d 	sth	zero,-40(fp)

	/* Assuming that the channel selected exist, change to FALSE if doesn't */
	bChannelFlag = TRUE;
802027e0:	00800044 	movi	r2,1
802027e4:	e0bff415 	stw	r2,-48(fp)
	bStatus = FALSE;
802027e8:	e03ff115 	stw	zero,-60(fp)
	bBufferEmptyFlag = FALSE;
802027ec:	e03ffa15 	stw	zero,-24(fp)
	switch (ucChBufferId) {
802027f0:	e0bffe03 	ldbu	r2,-8(fp)
802027f4:	10c00228 	cmpgeui	r3,r2,8
802027f8:	1800a41e 	bne	r3,zero,80202a8c <bSdmaDmaM1Transfer+0x30c>
802027fc:	100690ba 	slli	r3,r2,2
80202800:	00a00834 	movhi	r2,32800
80202804:	108a0504 	addi	r2,r2,10260
80202808:	1885883a 	add	r2,r3,r2
8020280c:	10800017 	ldw	r2,0(r2)
80202810:	1000683a 	jmp	r2
80202814:	80202834 	orhi	zero,r16,32928
80202818:	80202878 	rdprs	zero,r16,-32607
8020281c:	802028c4 	addi	zero,r16,-32605
80202820:	80202910 	cmplti	zero,r16,-32604
80202824:	8020295c 	xori	zero,r16,32933
80202828:	802029a8 	cmpgeui	zero,r16,32934
8020282c:	802029f4 	orhi	zero,r16,32935
80202830:	80202a40 	call	880202a4 <__reset+0x20002a4>
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
80202834:	e0bffd03 	ldbu	r2,-12(fp)
80202838:	10000726 	beq	r2,zero,80202858 <bSdmaDmaM1Transfer+0xd8>
8020283c:	10800060 	cmpeqi	r2,r2,1
80202840:	10000926 	beq	r2,zero,80202868 <bSdmaDmaM1Transfer+0xe8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
80202844:	00a00014 	movui	r2,32768
80202848:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
8020284c:	00800044 	movi	r2,1
80202850:	e0bff315 	stw	r2,-52(fp)
			break;
80202854:	00000706 	br	80202874 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
80202858:	e03ff215 	stw	zero,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
8020285c:	00800044 	movi	r2,1
80202860:	e0bff315 	stw	r2,-52(fp)
			break;
80202864:	00000306 	br	80202874 <bSdmaDmaM1Transfer+0xf4>
		default:
			bChannelFlag = FALSE;
80202868:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
8020286c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202870:	0001883a 	nop
		}
		break;
80202874:	00008706 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
80202878:	e0bffd03 	ldbu	r2,-12(fp)
8020287c:	10000826 	beq	r2,zero,802028a0 <bSdmaDmaM1Transfer+0x120>
80202880:	10800060 	cmpeqi	r2,r2,1
80202884:	10000b26 	beq	r2,zero,802028b4 <bSdmaDmaM1Transfer+0x134>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
80202888:	008000b4 	movhi	r2,2
8020288c:	10a00004 	addi	r2,r2,-32768
80202890:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
80202894:	00800044 	movi	r2,1
80202898:	e0bff315 	stw	r2,-52(fp)
			break;
8020289c:	00000806 	br	802028c0 <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
802028a0:	00800074 	movhi	r2,1
802028a4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
802028a8:	00800044 	movi	r2,1
802028ac:	e0bff315 	stw	r2,-52(fp)
			break;
802028b0:	00000306 	br	802028c0 <bSdmaDmaM1Transfer+0x140>
		default:
			bChannelFlag = FALSE;
802028b4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
802028b8:	e03ffa15 	stw	zero,-24(fp)
			break;
802028bc:	0001883a 	nop
		}
		break;
802028c0:	00007406 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
802028c4:	e0bffd03 	ldbu	r2,-12(fp)
802028c8:	10000826 	beq	r2,zero,802028ec <bSdmaDmaM1Transfer+0x16c>
802028cc:	10800060 	cmpeqi	r2,r2,1
802028d0:	10000b26 	beq	r2,zero,80202900 <bSdmaDmaM1Transfer+0x180>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
802028d4:	008000f4 	movhi	r2,3
802028d8:	10a00004 	addi	r2,r2,-32768
802028dc:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
802028e0:	00800044 	movi	r2,1
802028e4:	e0bff315 	stw	r2,-52(fp)
			break;
802028e8:	00000806 	br	8020290c <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
802028ec:	008000b4 	movhi	r2,2
802028f0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
802028f4:	00800044 	movi	r2,1
802028f8:	e0bff315 	stw	r2,-52(fp)
			break;
802028fc:	00000306 	br	8020290c <bSdmaDmaM1Transfer+0x18c>
		default:
			bChannelFlag = FALSE;
80202900:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202904:	e03ffa15 	stw	zero,-24(fp)
			break;
80202908:	0001883a 	nop
		}
		break;
8020290c:	00006106 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
80202910:	e0bffd03 	ldbu	r2,-12(fp)
80202914:	10000826 	beq	r2,zero,80202938 <bSdmaDmaM1Transfer+0x1b8>
80202918:	10800060 	cmpeqi	r2,r2,1
8020291c:	10000b26 	beq	r2,zero,8020294c <bSdmaDmaM1Transfer+0x1cc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
80202920:	00800134 	movhi	r2,4
80202924:	10a00004 	addi	r2,r2,-32768
80202928:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
8020292c:	00800044 	movi	r2,1
80202930:	e0bff315 	stw	r2,-52(fp)
			break;
80202934:	00000806 	br	80202958 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
80202938:	008000f4 	movhi	r2,3
8020293c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
80202940:	00800044 	movi	r2,1
80202944:	e0bff315 	stw	r2,-52(fp)
			break;
80202948:	00000306 	br	80202958 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bChannelFlag = FALSE;
8020294c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202950:	e03ffa15 	stw	zero,-24(fp)
			break;
80202954:	0001883a 	nop
		}
		break;
80202958:	00004e06 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
8020295c:	e0bffd03 	ldbu	r2,-12(fp)
80202960:	10000826 	beq	r2,zero,80202984 <bSdmaDmaM1Transfer+0x204>
80202964:	10800060 	cmpeqi	r2,r2,1
80202968:	10000b26 	beq	r2,zero,80202998 <bSdmaDmaM1Transfer+0x218>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8020296c:	00800174 	movhi	r2,5
80202970:	10a00004 	addi	r2,r2,-32768
80202974:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
80202978:	00800044 	movi	r2,1
8020297c:	e0bff315 	stw	r2,-52(fp)
			break;
80202980:	00000806 	br	802029a4 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
80202984:	00800134 	movhi	r2,4
80202988:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
8020298c:	00800044 	movi	r2,1
80202990:	e0bff315 	stw	r2,-52(fp)
			break;
80202994:	00000306 	br	802029a4 <bSdmaDmaM1Transfer+0x224>
		default:
			bChannelFlag = FALSE;
80202998:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
8020299c:	e03ffa15 	stw	zero,-24(fp)
			break;
802029a0:	0001883a 	nop
		}
		break;
802029a4:	00003b06 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
802029a8:	e0bffd03 	ldbu	r2,-12(fp)
802029ac:	10000826 	beq	r2,zero,802029d0 <bSdmaDmaM1Transfer+0x250>
802029b0:	10800060 	cmpeqi	r2,r2,1
802029b4:	10000b26 	beq	r2,zero,802029e4 <bSdmaDmaM1Transfer+0x264>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
802029b8:	008001b4 	movhi	r2,6
802029bc:	10a00004 	addi	r2,r2,-32768
802029c0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
802029c4:	00800044 	movi	r2,1
802029c8:	e0bff315 	stw	r2,-52(fp)
			break;
802029cc:	00000806 	br	802029f0 <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
802029d0:	00800174 	movhi	r2,5
802029d4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
802029d8:	00800044 	movi	r2,1
802029dc:	e0bff315 	stw	r2,-52(fp)
			break;
802029e0:	00000306 	br	802029f0 <bSdmaDmaM1Transfer+0x270>
		default:
			bChannelFlag = FALSE;
802029e4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
802029e8:	e03ffa15 	stw	zero,-24(fp)
			break;
802029ec:	0001883a 	nop
		}
		break;
802029f0:	00002806 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
802029f4:	e0bffd03 	ldbu	r2,-12(fp)
802029f8:	10000826 	beq	r2,zero,80202a1c <bSdmaDmaM1Transfer+0x29c>
802029fc:	10800060 	cmpeqi	r2,r2,1
80202a00:	10000b26 	beq	r2,zero,80202a30 <bSdmaDmaM1Transfer+0x2b0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
80202a04:	008001f4 	movhi	r2,7
80202a08:	10a00004 	addi	r2,r2,-32768
80202a0c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
80202a10:	00800044 	movi	r2,1
80202a14:	e0bff315 	stw	r2,-52(fp)
			break;
80202a18:	00000806 	br	80202a3c <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
80202a1c:	008001b4 	movhi	r2,6
80202a20:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
80202a24:	00800044 	movi	r2,1
80202a28:	e0bff315 	stw	r2,-52(fp)
			break;
80202a2c:	00000306 	br	80202a3c <bSdmaDmaM1Transfer+0x2bc>
		default:
			bChannelFlag = FALSE;
80202a30:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202a34:	e03ffa15 	stw	zero,-24(fp)
			break;
80202a38:	0001883a 	nop
		}
		break;
80202a3c:	00001506 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
80202a40:	e0bffd03 	ldbu	r2,-12(fp)
80202a44:	10000826 	beq	r2,zero,80202a68 <bSdmaDmaM1Transfer+0x2e8>
80202a48:	10800060 	cmpeqi	r2,r2,1
80202a4c:	10000b26 	beq	r2,zero,80202a7c <bSdmaDmaM1Transfer+0x2fc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
80202a50:	00800234 	movhi	r2,8
80202a54:	10a00004 	addi	r2,r2,-32768
80202a58:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
80202a5c:	00800044 	movi	r2,1
80202a60:	e0bff315 	stw	r2,-52(fp)
			break;
80202a64:	00000806 	br	80202a88 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
80202a68:	008001f4 	movhi	r2,7
80202a6c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
80202a70:	00800044 	movi	r2,1
80202a74:	e0bff315 	stw	r2,-52(fp)
			break;
80202a78:	00000306 	br	80202a88 <bSdmaDmaM1Transfer+0x308>
		default:
			bChannelFlag = FALSE;
80202a7c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202a80:	e03ffa15 	stw	zero,-24(fp)
			break;
80202a84:	0001883a 	nop
		}
		break;
80202a88:	00000206 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	default:
		bChannelFlag = FALSE;
80202a8c:	e03ff415 	stw	zero,-48(fp)
		break;
80202a90:	0001883a 	nop
	}

	bBufferEmptyFlag = TRUE;
80202a94:	00800044 	movi	r2,1
80202a98:	e0bffa15 	stw	r2,-24(fp)
	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
80202a9c:	e0bffb17 	ldw	r2,-20(fp)
80202aa0:	e0bff715 	stw	r2,-36(fp)
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
80202aa4:	e03ff815 	stw	zero,-32(fp)

	// Rounding up the size to the nearest multiple of 32 (32 bytes = 256b = size of memory access)
	if ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) % 32) {
80202aa8:	e0bffc0b 	ldhu	r2,-16(fp)
80202aac:	10802224 	muli	r2,r2,136
80202ab0:	1080060c 	andi	r2,r2,24
80202ab4:	10000826 	beq	r2,zero,80202ad8 <bSdmaDmaM1Transfer+0x358>
		// Transfer size is not a multiple of 32
		usiRoundedTransferSizeInBytes = ((alt_u16) ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) / 32) + 1) * 32;
80202ab8:	e0bffc0b 	ldhu	r2,-16(fp)
80202abc:	10802224 	muli	r2,r2,136
80202ac0:	1004d17a 	srli	r2,r2,5
80202ac4:	10bfffcc 	andi	r2,r2,65535
80202ac8:	10800044 	addi	r2,r2,1
80202acc:	1004917a 	slli	r2,r2,5
80202ad0:	e0bff60d 	sth	r2,-40(fp)
80202ad4:	00000306 	br	80202ae4 <bSdmaDmaM1Transfer+0x364>
	} else {
		usiRoundedTransferSizeInBytes = (SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks);
80202ad8:	e0bffc0b 	ldhu	r2,-16(fp)
80202adc:	10802224 	muli	r2,r2,136
80202ae0:	e0bff60d 	sth	r2,-40(fp)
	}

	// Verify if the base address is a multiple o 32 (32 bytes = 256b = size of memory access)
	if (uliSrcAddrLow % 32) {
80202ae4:	e0bff717 	ldw	r2,-36(fp)
80202ae8:	108007cc 	andi	r2,r2,31
80202aec:	10000226 	beq	r2,zero,80202af8 <bSdmaDmaM1Transfer+0x378>
		// Address is not a multiple of 32
		bAddressFlag = FALSE;
80202af0:	e03ff515 	stw	zero,-44(fp)
80202af4:	00000206 	br	80202b00 <bSdmaDmaM1Transfer+0x380>
	} else {
		bAddressFlag = TRUE;
80202af8:	00800044 	movi	r2,1
80202afc:	e0bff515 	stw	r2,-44(fp)
	}

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
80202b00:	e0bff417 	ldw	r2,-48(fp)
80202b04:	10003126 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b08:	e0bffa17 	ldw	r2,-24(fp)
80202b0c:	10002f26 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b10:	e0bff517 	ldw	r2,-44(fp)
80202b14:	10002d26 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b18:	e0bffc0b 	ldhu	r2,-16(fp)
80202b1c:	10800468 	cmpgeui	r2,r2,17
80202b20:	10002a1e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>

		if (pxDmaM1Dev != NULL) {
80202b24:	d0a01417 	ldw	r2,-32688(gp)
80202b28:	10002826 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202b2c:	00000206 	br	80202b38 <bSdmaDmaM1Transfer+0x3b8>
				alt_busy_sleep(1); /* delay 1us */
80202b30:	01000044 	movi	r4,1
80202b34:	021623c0 	call	8021623c <alt_busy_sleep>

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {

		if (pxDmaM1Dev != NULL) {
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202b38:	d0a01417 	ldw	r2,-32688(gp)
80202b3c:	10800317 	ldw	r2,12(r2)
80202b40:	10800037 	ldwio	r2,0(r2)
80202b44:	1080010c 	andi	r2,r2,4
80202b48:	103ff91e 	bne	r2,zero,80202b30 <__reset+0xfa1e2b30>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if (0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
80202b4c:	d2201417 	ldw	r8,-32688(gp)
80202b50:	e1bff717 	ldw	r6,-36(fp)
80202b54:	e1fff217 	ldw	r7,-56(fp)
80202b58:	e0bff60b 	ldhu	r2,-40(fp)
80202b5c:	e0fff817 	ldw	r3,-32(fp)
80202b60:	e13ff317 	ldw	r4,-52(fp)
80202b64:	01400044 	movi	r5,1
80202b68:	d9400815 	stw	r5,32(sp)
80202b6c:	01400044 	movi	r5,1
80202b70:	d9400715 	stw	r5,28(sp)
80202b74:	01400044 	movi	r5,1
80202b78:	d9400615 	stw	r5,24(sp)
80202b7c:	01400044 	movi	r5,1
80202b80:	d9400515 	stw	r5,20(sp)
80202b84:	01400044 	movi	r5,1
80202b88:	d9400415 	stw	r5,16(sp)
80202b8c:	d9000315 	stw	r4,12(sp)
80202b90:	d8c00215 	stw	r3,8(sp)
80202b94:	e0fff917 	ldw	r3,-28(fp)
80202b98:	d8c00115 	stw	r3,4(sp)
80202b9c:	d8800015 	stw	r2,0(sp)
80202ba0:	800b883a 	mov	r5,r16
80202ba4:	4009883a 	mov	r4,r8
80202ba8:	02049780 	call	80204978 <iMsgdmaConstructExtendedMmToMmDescriptor>
80202bac:	1000071e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)	) {
				/* Success = 0 */
				if (0 == iMsgdmaExtendedDescriptorAsyncTransfer(pxDmaM1Dev,	&xDmaExtendedDescriptor)) {
80202bb0:	d0a01417 	ldw	r2,-32688(gp)
80202bb4:	800b883a 	mov	r5,r16
80202bb8:	1009883a 	mov	r4,r2
80202bbc:	0204a300 	call	80204a30 <iMsgdmaExtendedDescriptorAsyncTransfer>
80202bc0:	1000021e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
					bStatus = TRUE;
80202bc4:	00800044 	movi	r2,1
80202bc8:	e0bff115 	stw	r2,-60(fp)
				}
			}
		}
	}
	return bStatus;
80202bcc:	e0bff117 	ldw	r2,-60(fp)
}
80202bd0:	e6ffff04 	addi	sp,fp,-4
80202bd4:	dfc00217 	ldw	ra,8(sp)
80202bd8:	df000117 	ldw	fp,4(sp)
80202bdc:	dc000017 	ldw	r16,0(sp)
80202be0:	dec00304 	addi	sp,sp,12
80202be4:	f800283a 	ret

80202be8 <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide, alt_u8 ucChBufferId) {
80202be8:	deffe604 	addi	sp,sp,-104
80202bec:	dfc01915 	stw	ra,100(sp)
80202bf0:	df001815 	stw	fp,96(sp)
80202bf4:	dc001715 	stw	r16,92(sp)
80202bf8:	df001804 	addi	fp,sp,96
80202bfc:	e13ffb15 	stw	r4,-20(fp)
80202c00:	2809883a 	mov	r4,r5
80202c04:	3007883a 	mov	r3,r6
80202c08:	3805883a 	mov	r2,r7
80202c0c:	e13ffc0d 	sth	r4,-16(fp)
80202c10:	e0fffd05 	stb	r3,-12(fp)
80202c14:	e0bffe05 	stb	r2,-8(fp)
80202c18:	defff004 	addi	sp,sp,-64
80202c1c:	d8800904 	addi	r2,sp,36
80202c20:	108007c4 	addi	r2,r2,31
80202c24:	1004d17a 	srli	r2,r2,5
80202c28:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80202c2c:	e03ff215 	stw	zero,-56(fp)
	alt_u32 uliDestAddrHigh = 0;
80202c30:	e03ff315 	stw	zero,-52(fp)

	alt_u32 uliSrcAddrLow = 0;
80202c34:	e03ff715 	stw	zero,-36(fp)
	alt_u32 uliSrcAddrHigh = 0;
80202c38:	e03ff815 	stw	zero,-32(fp)

	alt_u32 uliControlBits = 0x00000000;
80202c3c:	e03ff915 	stw	zero,-28(fp)
	bool bBufferEmptyFlag;
	bool bChannelFlag;
	bool bAddressFlag = FALSE;
80202c40:	e03ff515 	stw	zero,-44(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
80202c44:	e03ff60d 	sth	zero,-40(fp)

	/* Assuming that the channel selected exist, change to FALSE if doesn't */
	bChannelFlag = TRUE;
80202c48:	00800044 	movi	r2,1
80202c4c:	e0bff415 	stw	r2,-48(fp)
	bStatus = FALSE;
80202c50:	e03ff115 	stw	zero,-60(fp)
	bBufferEmptyFlag = FALSE;
80202c54:	e03ffa15 	stw	zero,-24(fp)
	switch (ucChBufferId) {
80202c58:	e0bffe03 	ldbu	r2,-8(fp)
80202c5c:	10c00228 	cmpgeui	r3,r2,8
80202c60:	1800a41e 	bne	r3,zero,80202ef4 <bSdmaDmaM2Transfer+0x30c>
80202c64:	100690ba 	slli	r3,r2,2
80202c68:	00a00834 	movhi	r2,32800
80202c6c:	108b1f04 	addi	r2,r2,11388
80202c70:	1885883a 	add	r2,r3,r2
80202c74:	10800017 	ldw	r2,0(r2)
80202c78:	1000683a 	jmp	r2
80202c7c:	80202c9c 	xori	zero,r16,32946
80202c80:	80202ce0 	cmpeqi	zero,r16,-32589
80202c84:	80202d2c 	andhi	zero,r16,32948
80202c88:	80202d78 	rdprs	zero,r16,-32587
80202c8c:	80202dc4 	addi	zero,r16,-32585
80202c90:	80202e10 	cmplti	zero,r16,-32584
80202c94:	80202e5c 	xori	zero,r16,32953
80202c98:	80202ea8 	cmpgeui	zero,r16,32954
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
80202c9c:	e0bffd03 	ldbu	r2,-12(fp)
80202ca0:	10000726 	beq	r2,zero,80202cc0 <bSdmaDmaM2Transfer+0xd8>
80202ca4:	10800060 	cmpeqi	r2,r2,1
80202ca8:	10000926 	beq	r2,zero,80202cd0 <bSdmaDmaM2Transfer+0xe8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
80202cac:	00a00014 	movui	r2,32768
80202cb0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
80202cb4:	00800044 	movi	r2,1
80202cb8:	e0bff315 	stw	r2,-52(fp)
			break;
80202cbc:	00000706 	br	80202cdc <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
80202cc0:	e03ff215 	stw	zero,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
80202cc4:	00800044 	movi	r2,1
80202cc8:	e0bff315 	stw	r2,-52(fp)
			break;
80202ccc:	00000306 	br	80202cdc <bSdmaDmaM2Transfer+0xf4>
		default:
			bChannelFlag = FALSE;
80202cd0:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202cd4:	e03ffa15 	stw	zero,-24(fp)
			break;
80202cd8:	0001883a 	nop
		}
		break;
80202cdc:	00008706 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
80202ce0:	e0bffd03 	ldbu	r2,-12(fp)
80202ce4:	10000826 	beq	r2,zero,80202d08 <bSdmaDmaM2Transfer+0x120>
80202ce8:	10800060 	cmpeqi	r2,r2,1
80202cec:	10000b26 	beq	r2,zero,80202d1c <bSdmaDmaM2Transfer+0x134>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
80202cf0:	008000b4 	movhi	r2,2
80202cf4:	10a00004 	addi	r2,r2,-32768
80202cf8:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
80202cfc:	00800044 	movi	r2,1
80202d00:	e0bff315 	stw	r2,-52(fp)
			break;
80202d04:	00000806 	br	80202d28 <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
80202d08:	00800074 	movhi	r2,1
80202d0c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
80202d10:	00800044 	movi	r2,1
80202d14:	e0bff315 	stw	r2,-52(fp)
			break;
80202d18:	00000306 	br	80202d28 <bSdmaDmaM2Transfer+0x140>
		default:
			bChannelFlag = FALSE;
80202d1c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202d20:	e03ffa15 	stw	zero,-24(fp)
			break;
80202d24:	0001883a 	nop
		}
		break;
80202d28:	00007406 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
80202d2c:	e0bffd03 	ldbu	r2,-12(fp)
80202d30:	10000826 	beq	r2,zero,80202d54 <bSdmaDmaM2Transfer+0x16c>
80202d34:	10800060 	cmpeqi	r2,r2,1
80202d38:	10000b26 	beq	r2,zero,80202d68 <bSdmaDmaM2Transfer+0x180>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
80202d3c:	008000f4 	movhi	r2,3
80202d40:	10a00004 	addi	r2,r2,-32768
80202d44:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
80202d48:	00800044 	movi	r2,1
80202d4c:	e0bff315 	stw	r2,-52(fp)
			break;
80202d50:	00000806 	br	80202d74 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
80202d54:	008000b4 	movhi	r2,2
80202d58:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
80202d5c:	00800044 	movi	r2,1
80202d60:	e0bff315 	stw	r2,-52(fp)
			break;
80202d64:	00000306 	br	80202d74 <bSdmaDmaM2Transfer+0x18c>
		default:
			bChannelFlag = FALSE;
80202d68:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202d6c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202d70:	0001883a 	nop
		}
		break;
80202d74:	00006106 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
80202d78:	e0bffd03 	ldbu	r2,-12(fp)
80202d7c:	10000826 	beq	r2,zero,80202da0 <bSdmaDmaM2Transfer+0x1b8>
80202d80:	10800060 	cmpeqi	r2,r2,1
80202d84:	10000b26 	beq	r2,zero,80202db4 <bSdmaDmaM2Transfer+0x1cc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
80202d88:	00800134 	movhi	r2,4
80202d8c:	10a00004 	addi	r2,r2,-32768
80202d90:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
80202d94:	00800044 	movi	r2,1
80202d98:	e0bff315 	stw	r2,-52(fp)
			break;
80202d9c:	00000806 	br	80202dc0 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
80202da0:	008000f4 	movhi	r2,3
80202da4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
80202da8:	00800044 	movi	r2,1
80202dac:	e0bff315 	stw	r2,-52(fp)
			break;
80202db0:	00000306 	br	80202dc0 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bChannelFlag = FALSE;
80202db4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202db8:	e03ffa15 	stw	zero,-24(fp)
			break;
80202dbc:	0001883a 	nop
		}
		break;
80202dc0:	00004e06 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
80202dc4:	e0bffd03 	ldbu	r2,-12(fp)
80202dc8:	10000826 	beq	r2,zero,80202dec <bSdmaDmaM2Transfer+0x204>
80202dcc:	10800060 	cmpeqi	r2,r2,1
80202dd0:	10000b26 	beq	r2,zero,80202e00 <bSdmaDmaM2Transfer+0x218>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
80202dd4:	00800174 	movhi	r2,5
80202dd8:	10a00004 	addi	r2,r2,-32768
80202ddc:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
80202de0:	00800044 	movi	r2,1
80202de4:	e0bff315 	stw	r2,-52(fp)
			break;
80202de8:	00000806 	br	80202e0c <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
80202dec:	00800134 	movhi	r2,4
80202df0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
80202df4:	00800044 	movi	r2,1
80202df8:	e0bff315 	stw	r2,-52(fp)
			break;
80202dfc:	00000306 	br	80202e0c <bSdmaDmaM2Transfer+0x224>
		default:
			bChannelFlag = FALSE;
80202e00:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202e04:	e03ffa15 	stw	zero,-24(fp)
			break;
80202e08:	0001883a 	nop
		}
		break;
80202e0c:	00003b06 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
80202e10:	e0bffd03 	ldbu	r2,-12(fp)
80202e14:	10000826 	beq	r2,zero,80202e38 <bSdmaDmaM2Transfer+0x250>
80202e18:	10800060 	cmpeqi	r2,r2,1
80202e1c:	10000b26 	beq	r2,zero,80202e4c <bSdmaDmaM2Transfer+0x264>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
80202e20:	008001b4 	movhi	r2,6
80202e24:	10a00004 	addi	r2,r2,-32768
80202e28:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
80202e2c:	00800044 	movi	r2,1
80202e30:	e0bff315 	stw	r2,-52(fp)
			break;
80202e34:	00000806 	br	80202e58 <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
80202e38:	00800174 	movhi	r2,5
80202e3c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
80202e40:	00800044 	movi	r2,1
80202e44:	e0bff315 	stw	r2,-52(fp)
			break;
80202e48:	00000306 	br	80202e58 <bSdmaDmaM2Transfer+0x270>
		default:
			bChannelFlag = FALSE;
80202e4c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202e50:	e03ffa15 	stw	zero,-24(fp)
			break;
80202e54:	0001883a 	nop
		}
		break;
80202e58:	00002806 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
80202e5c:	e0bffd03 	ldbu	r2,-12(fp)
80202e60:	10000826 	beq	r2,zero,80202e84 <bSdmaDmaM2Transfer+0x29c>
80202e64:	10800060 	cmpeqi	r2,r2,1
80202e68:	10000b26 	beq	r2,zero,80202e98 <bSdmaDmaM2Transfer+0x2b0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
80202e6c:	008001f4 	movhi	r2,7
80202e70:	10a00004 	addi	r2,r2,-32768
80202e74:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
80202e78:	00800044 	movi	r2,1
80202e7c:	e0bff315 	stw	r2,-52(fp)
			break;
80202e80:	00000806 	br	80202ea4 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
80202e84:	008001b4 	movhi	r2,6
80202e88:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
80202e8c:	00800044 	movi	r2,1
80202e90:	e0bff315 	stw	r2,-52(fp)
			break;
80202e94:	00000306 	br	80202ea4 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bChannelFlag = FALSE;
80202e98:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202e9c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202ea0:	0001883a 	nop
		}
		break;
80202ea4:	00001506 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
80202ea8:	e0bffd03 	ldbu	r2,-12(fp)
80202eac:	10000826 	beq	r2,zero,80202ed0 <bSdmaDmaM2Transfer+0x2e8>
80202eb0:	10800060 	cmpeqi	r2,r2,1
80202eb4:	10000b26 	beq	r2,zero,80202ee4 <bSdmaDmaM2Transfer+0x2fc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
80202eb8:	00800234 	movhi	r2,8
80202ebc:	10a00004 	addi	r2,r2,-32768
80202ec0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
80202ec4:	00800044 	movi	r2,1
80202ec8:	e0bff315 	stw	r2,-52(fp)
			break;
80202ecc:	00000806 	br	80202ef0 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
80202ed0:	008001f4 	movhi	r2,7
80202ed4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
80202ed8:	00800044 	movi	r2,1
80202edc:	e0bff315 	stw	r2,-52(fp)
			break;
80202ee0:	00000306 	br	80202ef0 <bSdmaDmaM2Transfer+0x308>
		default:
			bChannelFlag = FALSE;
80202ee4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202ee8:	e03ffa15 	stw	zero,-24(fp)
			break;
80202eec:	0001883a 	nop
		}
		break;
80202ef0:	00000206 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	default:
		bChannelFlag = FALSE;
80202ef4:	e03ff415 	stw	zero,-48(fp)
		break;
80202ef8:	0001883a 	nop
	}

	bBufferEmptyFlag = TRUE;
80202efc:	00800044 	movi	r2,1
80202f00:	e0bffa15 	stw	r2,-24(fp)
	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
80202f04:	e0fffb17 	ldw	r3,-20(fp)
		bChannelFlag = FALSE;
		break;
	}

	bBufferEmptyFlag = TRUE;
	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
80202f08:	00a00034 	movhi	r2,32768
80202f0c:	1885883a 	add	r2,r3,r2
80202f10:	e0bff715 	stw	r2,-36(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
80202f14:	e03ff815 	stw	zero,-32(fp)

	// Rounding up the size to the nearest multiple of 32 (32 bytes = 256b = size of memory access)
	if ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) % 32) {
80202f18:	e0bffc0b 	ldhu	r2,-16(fp)
80202f1c:	10802224 	muli	r2,r2,136
80202f20:	1080060c 	andi	r2,r2,24
80202f24:	10000826 	beq	r2,zero,80202f48 <bSdmaDmaM2Transfer+0x360>
		// Transfer size is not a multiple of 32
		usiRoundedTransferSizeInBytes = ((alt_u16) ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) / 32) + 1) * 32;
80202f28:	e0bffc0b 	ldhu	r2,-16(fp)
80202f2c:	10802224 	muli	r2,r2,136
80202f30:	1004d17a 	srli	r2,r2,5
80202f34:	10bfffcc 	andi	r2,r2,65535
80202f38:	10800044 	addi	r2,r2,1
80202f3c:	1004917a 	slli	r2,r2,5
80202f40:	e0bff60d 	sth	r2,-40(fp)
80202f44:	00000306 	br	80202f54 <bSdmaDmaM2Transfer+0x36c>
	} else {
		usiRoundedTransferSizeInBytes = (SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks);
80202f48:	e0bffc0b 	ldhu	r2,-16(fp)
80202f4c:	10802224 	muli	r2,r2,136
80202f50:	e0bff60d 	sth	r2,-40(fp)
	}

	// Verify if the base address is a multiple o 32 (32 bytes = 256b = size of memory access)
	if (uliSrcAddrLow % 32) {
80202f54:	e0bff717 	ldw	r2,-36(fp)
80202f58:	108007cc 	andi	r2,r2,31
80202f5c:	10000226 	beq	r2,zero,80202f68 <bSdmaDmaM2Transfer+0x380>
		// Address is not a multiple of 32
		bAddressFlag = FALSE;
80202f60:	e03ff515 	stw	zero,-44(fp)
80202f64:	00000206 	br	80202f70 <bSdmaDmaM2Transfer+0x388>
	} else {
		bAddressFlag = TRUE;
80202f68:	00800044 	movi	r2,1
80202f6c:	e0bff515 	stw	r2,-44(fp)
	}

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
80202f70:	e0bff417 	ldw	r2,-48(fp)
80202f74:	10003126 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
80202f78:	e0bffa17 	ldw	r2,-24(fp)
80202f7c:	10002f26 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
80202f80:	e0bff517 	ldw	r2,-44(fp)
80202f84:	10002d26 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
80202f88:	e0bffc0b 	ldhu	r2,-16(fp)
80202f8c:	10800468 	cmpgeui	r2,r2,17
80202f90:	10002a1e 	bne	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
		if (pxDmaM2Dev != NULL) {
80202f94:	d0a01517 	ldw	r2,-32684(gp)
80202f98:	10002826 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202f9c:	00000206 	br	80202fa8 <bSdmaDmaM2Transfer+0x3c0>
				alt_busy_sleep(1); /* delay 1us */
80202fa0:	01000044 	movi	r4,1
80202fa4:	021623c0 	call	8021623c <alt_busy_sleep>
	}

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
		if (pxDmaM2Dev != NULL) {

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202fa8:	d0a01517 	ldw	r2,-32684(gp)
80202fac:	10800317 	ldw	r2,12(r2)
80202fb0:	10800037 	ldwio	r2,0(r2)
80202fb4:	1080010c 	andi	r2,r2,4
80202fb8:	103ff91e 	bne	r2,zero,80202fa0 <__reset+0xfa1e2fa0>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if ( 0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
80202fbc:	d2201517 	ldw	r8,-32684(gp)
80202fc0:	e1bff717 	ldw	r6,-36(fp)
80202fc4:	e1fff217 	ldw	r7,-56(fp)
80202fc8:	e0bff60b 	ldhu	r2,-40(fp)
80202fcc:	e0fff817 	ldw	r3,-32(fp)
80202fd0:	e13ff317 	ldw	r4,-52(fp)
80202fd4:	01400044 	movi	r5,1
80202fd8:	d9400815 	stw	r5,32(sp)
80202fdc:	01400044 	movi	r5,1
80202fe0:	d9400715 	stw	r5,28(sp)
80202fe4:	01400044 	movi	r5,1
80202fe8:	d9400615 	stw	r5,24(sp)
80202fec:	01400044 	movi	r5,1
80202ff0:	d9400515 	stw	r5,20(sp)
80202ff4:	01400044 	movi	r5,1
80202ff8:	d9400415 	stw	r5,16(sp)
80202ffc:	d9000315 	stw	r4,12(sp)
80203000:	d8c00215 	stw	r3,8(sp)
80203004:	e0fff917 	ldw	r3,-28(fp)
80203008:	d8c00115 	stw	r3,4(sp)
8020300c:	d8800015 	stw	r2,0(sp)
80203010:	800b883a 	mov	r5,r16
80203014:	4009883a 	mov	r4,r8
80203018:	02049780 	call	80204978 <iMsgdmaConstructExtendedMmToMmDescriptor>
8020301c:	1000071e 	bne	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)) {
				/* Success = 0 */
				if ( 0 == iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
80203020:	d0a01517 	ldw	r2,-32684(gp)
80203024:	800b883a 	mov	r5,r16
80203028:	1009883a 	mov	r4,r2
8020302c:	0204a6c0 	call	80204a6c <iMsgdmaExtendedDescriptorSyncTransfer>
80203030:	1000021e 	bne	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
						&xDmaExtendedDescriptor)) {
					bStatus = TRUE;
80203034:	00800044 	movi	r2,1
80203038:	e0bff115 	stw	r2,-60(fp)
				}
			}
		}
	}
	return bStatus;
8020303c:	e0bff117 	ldw	r2,-60(fp)
}
80203040:	e6ffff04 	addi	sp,fp,-4
80203044:	dfc00217 	ldw	ra,8(sp)
80203048:	df000117 	ldw	fp,4(sp)
8020304c:	dc000017 	ldw	r16,0(sp)
80203050:	dec00304 	addi	sp,sp,12
80203054:	f800283a 	ret

80203058 <bSdmaDmaM1FtdiTransfer>:

bool bSdmaDmaM1FtdiTransfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBytes, alt_u8 ucFtdiOperation) {
80203058:	deffe804 	addi	sp,sp,-96
8020305c:	dfc01715 	stw	ra,92(sp)
80203060:	df001615 	stw	fp,88(sp)
80203064:	dc001515 	stw	r16,84(sp)
80203068:	df001604 	addi	fp,sp,88
8020306c:	e13ffc15 	stw	r4,-16(fp)
80203070:	2807883a 	mov	r3,r5
80203074:	3005883a 	mov	r2,r6
80203078:	e0fffd0d 	sth	r3,-12(fp)
8020307c:	e0bffe05 	stb	r2,-8(fp)
80203080:	defff004 	addi	sp,sp,-64
80203084:	d8800904 	addi	r2,sp,36
80203088:	108007c4 	addi	r2,r2,31
8020308c:	1004d17a 	srli	r2,r2,5
80203090:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80203094:	e03ff415 	stw	zero,-48(fp)
	alt_u32 uliDestAddrHigh = 0;
80203098:	e03ff515 	stw	zero,-44(fp)

	alt_u32 uliSrcAddrLow = 0;
8020309c:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliSrcAddrHigh = 0;
802030a0:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliControlBits = 0x00000000;
802030a4:	e03ffb15 	stw	zero,-20(fp)
	bool bAddressFlag = FALSE;
802030a8:	e03ff815 	stw	zero,-32(fp)
	bool bOperationFlag = FALSE;
802030ac:	e03ff915 	stw	zero,-28(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
802030b0:	e03ffa0d 	sth	zero,-24(fp)

	bStatus = FALSE;
802030b4:	e03ff315 	stw	zero,-52(fp)

	switch (ucFtdiOperation) {
802030b8:	e0bffe03 	ldbu	r2,-8(fp)
802030bc:	10000326 	beq	r2,zero,802030cc <bSdmaDmaM1FtdiTransfer+0x74>
802030c0:	10800060 	cmpeqi	r2,r2,1
802030c4:	10000a1e 	bne	r2,zero,802030f0 <bSdmaDmaM1FtdiTransfer+0x98>
802030c8:	00001206 	br	80203114 <bSdmaDmaM1FtdiTransfer+0xbc>

		case eSdmaTxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802030cc:	e0bffc17 	ldw	r2,-16(fp)
802030d0:	e0bff615 	stw	r2,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
802030d4:	e03ff715 	stw	zero,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802030d8:	e03ff415 	stw	zero,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802030dc:	00800804 	movi	r2,32
802030e0:	e0bff515 	stw	r2,-44(fp)
				bOperationFlag = TRUE;
802030e4:	00800044 	movi	r2,1
802030e8:	e0bff915 	stw	r2,-28(fp)
			break;
802030ec:	00000b06 	br	8020311c <bSdmaDmaM1FtdiTransfer+0xc4>

		case eSdmaRxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802030f0:	e03ff615 	stw	zero,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802030f4:	00800804 	movi	r2,32
802030f8:	e0bff715 	stw	r2,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802030fc:	e0bffc17 	ldw	r2,-16(fp)
80203100:	e0bff415 	stw	r2,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
80203104:	e03ff515 	stw	zero,-44(fp)
				bOperationFlag = TRUE;
80203108:	00800044 	movi	r2,1
8020310c:	e0bff915 	stw	r2,-28(fp)
			break;
80203110:	00000206 	br	8020311c <bSdmaDmaM1FtdiTransfer+0xc4>

		default:
			bOperationFlag = FALSE;
80203114:	e03ff915 	stw	zero,-28(fp)
			break;
80203118:	0001883a 	nop

	}

	// Rounding up the size to the nearest multiple of 8 (8 bytes = 64b = size of memory access)
	if (usiRoundedTransferSizeInBytes % 8) {
8020311c:	e0bffa0b 	ldhu	r2,-24(fp)
80203120:	108001cc 	andi	r2,r2,7
80203124:	10bfffcc 	andi	r2,r2,65535
80203128:	10000726 	beq	r2,zero,80203148 <bSdmaDmaM1FtdiTransfer+0xf0>
		// Transfer size is not a multiple of 8
		usiRoundedTransferSizeInBytes = ((alt_u16) (usiTransferSizeInBytes / 8) + 1) * 8;
8020312c:	e0bffd0b 	ldhu	r2,-12(fp)
80203130:	1004d0fa 	srli	r2,r2,3
80203134:	10bfffcc 	andi	r2,r2,65535
80203138:	10800044 	addi	r2,r2,1
8020313c:	100490fa 	slli	r2,r2,3
80203140:	e0bffa0d 	sth	r2,-24(fp)
80203144:	00000206 	br	80203150 <bSdmaDmaM1FtdiTransfer+0xf8>
	} else {
		usiRoundedTransferSizeInBytes = usiTransferSizeInBytes;
80203148:	e0bffd0b 	ldhu	r2,-12(fp)
8020314c:	e0bffa0d 	sth	r2,-24(fp)
	}

	// Verify if the base address is a multiple o 8 (8 bytes = 64b = size of memory access)
	if (uliSrcAddrLow % 8) {
80203150:	e0bff617 	ldw	r2,-40(fp)
80203154:	108001cc 	andi	r2,r2,7
80203158:	10000226 	beq	r2,zero,80203164 <bSdmaDmaM1FtdiTransfer+0x10c>
		// Address is not a multiple of 8
		bAddressFlag = FALSE;
8020315c:	e03ff815 	stw	zero,-32(fp)
80203160:	00000206 	br	8020316c <bSdmaDmaM1FtdiTransfer+0x114>
	} else {
		bAddressFlag = TRUE;
80203164:	00800044 	movi	r2,1
80203168:	e0bff815 	stw	r2,-32(fp)
	}

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {
8020316c:	e0bff917 	ldw	r2,-28(fp)
80203170:	10002f26 	beq	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
80203174:	e0bff817 	ldw	r2,-32(fp)
80203178:	10002d26 	beq	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
8020317c:	e0bffa0b 	ldhu	r2,-24(fp)
80203180:	10880068 	cmpgeui	r2,r2,8193
80203184:	10002a1e 	bne	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>

		if (pxDmaM1Dev != NULL) {
80203188:	d0a01417 	ldw	r2,-32688(gp)
8020318c:	10002826 	beq	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80203190:	00000206 	br	8020319c <bSdmaDmaM1FtdiTransfer+0x144>
				alt_busy_sleep(1); /* delay 1us */
80203194:	01000044 	movi	r4,1
80203198:	021623c0 	call	8021623c <alt_busy_sleep>

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {

		if (pxDmaM1Dev != NULL) {
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
8020319c:	d0a01417 	ldw	r2,-32688(gp)
802031a0:	10800317 	ldw	r2,12(r2)
802031a4:	10800037 	ldwio	r2,0(r2)
802031a8:	1080010c 	andi	r2,r2,4
802031ac:	103ff91e 	bne	r2,zero,80203194 <__reset+0xfa1e3194>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if (0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
802031b0:	d2201417 	ldw	r8,-32688(gp)
802031b4:	e1bff617 	ldw	r6,-40(fp)
802031b8:	e1fff417 	ldw	r7,-48(fp)
802031bc:	e0bffa0b 	ldhu	r2,-24(fp)
802031c0:	e0fff717 	ldw	r3,-36(fp)
802031c4:	e13ff517 	ldw	r4,-44(fp)
802031c8:	01400044 	movi	r5,1
802031cc:	d9400815 	stw	r5,32(sp)
802031d0:	01400044 	movi	r5,1
802031d4:	d9400715 	stw	r5,28(sp)
802031d8:	01400044 	movi	r5,1
802031dc:	d9400615 	stw	r5,24(sp)
802031e0:	01400044 	movi	r5,1
802031e4:	d9400515 	stw	r5,20(sp)
802031e8:	01400044 	movi	r5,1
802031ec:	d9400415 	stw	r5,16(sp)
802031f0:	d9000315 	stw	r4,12(sp)
802031f4:	d8c00215 	stw	r3,8(sp)
802031f8:	e0fffb17 	ldw	r3,-20(fp)
802031fc:	d8c00115 	stw	r3,4(sp)
80203200:	d8800015 	stw	r2,0(sp)
80203204:	800b883a 	mov	r5,r16
80203208:	4009883a 	mov	r4,r8
8020320c:	02049780 	call	80204978 <iMsgdmaConstructExtendedMmToMmDescriptor>
80203210:	1000071e 	bne	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)	) {
				/* Success = 0 */
				if (0 == iMsgdmaExtendedDescriptorAsyncTransfer(pxDmaM1Dev,	&xDmaExtendedDescriptor)) {
80203214:	d0a01417 	ldw	r2,-32688(gp)
80203218:	800b883a 	mov	r5,r16
8020321c:	1009883a 	mov	r4,r2
80203220:	0204a300 	call	80204a30 <iMsgdmaExtendedDescriptorAsyncTransfer>
80203224:	1000021e 	bne	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
					bStatus = TRUE;
80203228:	00800044 	movi	r2,1
8020322c:	e0bff315 	stw	r2,-52(fp)
				}
			}
		}
	}
	return bStatus;
80203230:	e0bff317 	ldw	r2,-52(fp)
}
80203234:	e6ffff04 	addi	sp,fp,-4
80203238:	dfc00217 	ldw	ra,8(sp)
8020323c:	df000117 	ldw	fp,4(sp)
80203240:	dc000017 	ldw	r16,0(sp)
80203244:	dec00304 	addi	sp,sp,12
80203248:	f800283a 	ret

8020324c <bSdmaDmaM2FtdiTransfer>:

bool bSdmaDmaM2FtdiTransfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBytes, alt_u8 ucFtdiOperation) {
8020324c:	deffe804 	addi	sp,sp,-96
80203250:	dfc01715 	stw	ra,92(sp)
80203254:	df001615 	stw	fp,88(sp)
80203258:	dc001515 	stw	r16,84(sp)
8020325c:	df001604 	addi	fp,sp,88
80203260:	e13ffc15 	stw	r4,-16(fp)
80203264:	2807883a 	mov	r3,r5
80203268:	3005883a 	mov	r2,r6
8020326c:	e0fffd0d 	sth	r3,-12(fp)
80203270:	e0bffe05 	stb	r2,-8(fp)
80203274:	defff004 	addi	sp,sp,-64
80203278:	d8800904 	addi	r2,sp,36
8020327c:	108007c4 	addi	r2,r2,31
80203280:	1004d17a 	srli	r2,r2,5
80203284:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80203288:	e03ff415 	stw	zero,-48(fp)
	alt_u32 uliDestAddrHigh = 0;
8020328c:	e03ff515 	stw	zero,-44(fp)

	alt_u32 uliSrcAddrLow = 0;
80203290:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliSrcAddrHigh = 0;
80203294:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliControlBits = 0x00000000;
80203298:	e03ffb15 	stw	zero,-20(fp)
	bool bAddressFlag = FALSE;
8020329c:	e03ff815 	stw	zero,-32(fp)
	bool bOperationFlag = FALSE;
802032a0:	e03ff915 	stw	zero,-28(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
802032a4:	e03ffa0d 	sth	zero,-24(fp)

	bStatus = FALSE;
802032a8:	e03ff315 	stw	zero,-52(fp)

	switch (ucFtdiOperation) {
802032ac:	e0bffe03 	ldbu	r2,-8(fp)
802032b0:	10000326 	beq	r2,zero,802032c0 <bSdmaDmaM2FtdiTransfer+0x74>
802032b4:	10800060 	cmpeqi	r2,r2,1
802032b8:	10000c1e 	bne	r2,zero,802032ec <bSdmaDmaM2FtdiTransfer+0xa0>
802032bc:	00001606 	br	80203318 <bSdmaDmaM2FtdiTransfer+0xcc>

		case eSdmaTxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_M2_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802032c0:	e0fffc17 	ldw	r3,-16(fp)
802032c4:	00a00034 	movhi	r2,32768
802032c8:	1885883a 	add	r2,r3,r2
802032cc:	e0bff615 	stw	r2,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
802032d0:	e03ff715 	stw	zero,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802032d4:	e03ff415 	stw	zero,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802032d8:	00800804 	movi	r2,32
802032dc:	e0bff515 	stw	r2,-44(fp)
				bOperationFlag = TRUE;
802032e0:	00800044 	movi	r2,1
802032e4:	e0bff915 	stw	r2,-28(fp)
			break;
802032e8:	00000d06 	br	80203320 <bSdmaDmaM2FtdiTransfer+0xd4>

		case eSdmaRxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802032ec:	e03ff615 	stw	zero,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802032f0:	00800804 	movi	r2,32
802032f4:	e0bff715 	stw	r2,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_M2_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802032f8:	e0fffc17 	ldw	r3,-16(fp)
802032fc:	00a00034 	movhi	r2,32768
80203300:	1885883a 	add	r2,r3,r2
80203304:	e0bff415 	stw	r2,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
80203308:	e03ff515 	stw	zero,-44(fp)
				bOperationFlag = TRUE;
8020330c:	00800044 	movi	r2,1
80203310:	e0bff915 	stw	r2,-28(fp)
			break;
80203314:	00000206 	br	80203320 <bSdmaDmaM2FtdiTransfer+0xd4>

		default:
			bOperationFlag = FALSE;
80203318:	e03ff915 	stw	zero,-28(fp)
			break;
8020331c:	0001883a 	nop

	}

	// Rounding up the size to the nearest multiple of 8 (8 bytes = 64b = size of memory access)
	if (usiRoundedTransferSizeInBytes % 8) {
80203320:	e0bffa0b 	ldhu	r2,-24(fp)
80203324:	108001cc 	andi	r2,r2,7
80203328:	10bfffcc 	andi	r2,r2,65535
8020332c:	10000726 	beq	r2,zero,8020334c <bSdmaDmaM2FtdiTransfer+0x100>
		// Transfer size is not a multiple of 8
		usiRoundedTransferSizeInBytes = ((alt_u16) (usiTransferSizeInBytes / 8) + 1) * 8;
80203330:	e0bffd0b 	ldhu	r2,-12(fp)
80203334:	1004d0fa 	srli	r2,r2,3
80203338:	10bfffcc 	andi	r2,r2,65535
8020333c:	10800044 	addi	r2,r2,1
80203340:	100490fa 	slli	r2,r2,3
80203344:	e0bffa0d 	sth	r2,-24(fp)
80203348:	00000206 	br	80203354 <bSdmaDmaM2FtdiTransfer+0x108>
	} else {
		usiRoundedTransferSizeInBytes = usiTransferSizeInBytes;
8020334c:	e0bffd0b 	ldhu	r2,-12(fp)
80203350:	e0bffa0d 	sth	r2,-24(fp)
	}

	// Verify if the base address is a multiple o 8 (8 bytes = 64b = size of memory access)
	if (uliSrcAddrLow % 8) {
80203354:	e0bff617 	ldw	r2,-40(fp)
80203358:	108001cc 	andi	r2,r2,7
8020335c:	10000226 	beq	r2,zero,80203368 <bSdmaDmaM2FtdiTransfer+0x11c>
		// Address is not a multiple of 8
		bAddressFlag = FALSE;
80203360:	e03ff815 	stw	zero,-32(fp)
80203364:	00000206 	br	80203370 <bSdmaDmaM2FtdiTransfer+0x124>
	} else {
		bAddressFlag = TRUE;
80203368:	00800044 	movi	r2,1
8020336c:	e0bff815 	stw	r2,-32(fp)
	}

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {
80203370:	e0bff917 	ldw	r2,-28(fp)
80203374:	10002f26 	beq	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
80203378:	e0bff817 	ldw	r2,-32(fp)
8020337c:	10002d26 	beq	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
80203380:	e0bffa0b 	ldhu	r2,-24(fp)
80203384:	10880068 	cmpgeui	r2,r2,8193
80203388:	10002a1e 	bne	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
		if (pxDmaM2Dev != NULL) {
8020338c:	d0a01517 	ldw	r2,-32684(gp)
80203390:	10002826 	beq	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80203394:	00000206 	br	802033a0 <bSdmaDmaM2FtdiTransfer+0x154>
				alt_busy_sleep(1); /* delay 1us */
80203398:	01000044 	movi	r4,1
8020339c:	021623c0 	call	8021623c <alt_busy_sleep>
	}

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {
		if (pxDmaM2Dev != NULL) {

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
802033a0:	d0a01517 	ldw	r2,-32684(gp)
802033a4:	10800317 	ldw	r2,12(r2)
802033a8:	10800037 	ldwio	r2,0(r2)
802033ac:	1080010c 	andi	r2,r2,4
802033b0:	103ff91e 	bne	r2,zero,80203398 <__reset+0xfa1e3398>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if ( 0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
802033b4:	d2201517 	ldw	r8,-32684(gp)
802033b8:	e1bff617 	ldw	r6,-40(fp)
802033bc:	e1fff417 	ldw	r7,-48(fp)
802033c0:	e0bffa0b 	ldhu	r2,-24(fp)
802033c4:	e0fff717 	ldw	r3,-36(fp)
802033c8:	e13ff517 	ldw	r4,-44(fp)
802033cc:	01400044 	movi	r5,1
802033d0:	d9400815 	stw	r5,32(sp)
802033d4:	01400044 	movi	r5,1
802033d8:	d9400715 	stw	r5,28(sp)
802033dc:	01400044 	movi	r5,1
802033e0:	d9400615 	stw	r5,24(sp)
802033e4:	01400044 	movi	r5,1
802033e8:	d9400515 	stw	r5,20(sp)
802033ec:	01400044 	movi	r5,1
802033f0:	d9400415 	stw	r5,16(sp)
802033f4:	d9000315 	stw	r4,12(sp)
802033f8:	d8c00215 	stw	r3,8(sp)
802033fc:	e0fffb17 	ldw	r3,-20(fp)
80203400:	d8c00115 	stw	r3,4(sp)
80203404:	d8800015 	stw	r2,0(sp)
80203408:	800b883a 	mov	r5,r16
8020340c:	4009883a 	mov	r4,r8
80203410:	02049780 	call	80204978 <iMsgdmaConstructExtendedMmToMmDescriptor>
80203414:	1000071e 	bne	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)) {
				/* Success = 0 */
				if ( 0 == iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
80203418:	d0a01517 	ldw	r2,-32684(gp)
8020341c:	800b883a 	mov	r5,r16
80203420:	1009883a 	mov	r4,r2
80203424:	0204a6c0 	call	80204a6c <iMsgdmaExtendedDescriptorSyncTransfer>
80203428:	1000021e 	bne	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
						&xDmaExtendedDescriptor)) {
					bStatus = TRUE;
8020342c:	00800044 	movi	r2,1
80203430:	e0bff315 	stw	r2,-52(fp)
				}
			}
		}
	}
	return bStatus;
80203434:	e0bff317 	ldw	r2,-52(fp)
}
80203438:	e6ffff04 	addi	sp,fp,-4
8020343c:	dfc00217 	ldw	ra,8(sp)
80203440:	df000117 	ldw	fp,4(sp)
80203444:	dc000017 	ldw	r16,0(sp)
80203448:	dec00304 	addi	sp,sp,12
8020344c:	f800283a 	ret

80203450 <crc__CRC8U>:
 * \param value value to be added to CRC8
 *
 * \return unsigned char a new CRC8 considering the value
 */
unsigned char crc__CRC8U(unsigned char crc8, unsigned char value)
{
80203450:	defffd04 	addi	sp,sp,-12
80203454:	df000215 	stw	fp,8(sp)
80203458:	df000204 	addi	fp,sp,8
8020345c:	2007883a 	mov	r3,r4
80203460:	2805883a 	mov	r2,r5
80203464:	e0fffe05 	stb	r3,-8(fp)
80203468:	e0bfff05 	stb	r2,-4(fp)
	#ifdef pgm_read_byte
	return pgm_read_byte(crc8_table + (crc8 ^ value));
	#else
	return crc8_table[crc8 ^ value];
8020346c:	e0fffe03 	ldbu	r3,-8(fp)
80203470:	e0bfff03 	ldbu	r2,-4(fp)
80203474:	1884f03a 	xor	r2,r3,r2
80203478:	10c03fcc 	andi	r3,r2,255
8020347c:	00a008b4 	movhi	r2,32802
80203480:	10b05a04 	addi	r2,r2,-16024
80203484:	10c5883a 	add	r2,r2,r3
80203488:	10800003 	ldbu	r2,0(r2)
	#endif
}
8020348c:	e037883a 	mov	sp,fp
80203490:	df000017 	ldw	fp,0(sp)
80203494:	dec00104 	addi	sp,sp,4
80203498:	f800283a 	ret

8020349c <crc__CRC8>:
 * \param length length of data
 *
 * \return unsigned char CRC8 for data
 */
unsigned char crc__CRC8(unsigned char const data[], unsigned long length)
{
8020349c:	defffa04 	addi	sp,sp,-24
802034a0:	dfc00515 	stw	ra,20(sp)
802034a4:	df000415 	stw	fp,16(sp)
802034a8:	df000404 	addi	fp,sp,16
802034ac:	e13ffe15 	stw	r4,-8(fp)
802034b0:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc = CRC_START_8;
802034b4:	e03ffc05 	stb	zero,-16(fp)
	for (unsigned long a = 0; a < length; a++)
802034b8:	e03ffd15 	stw	zero,-12(fp)
802034bc:	00000c06 	br	802034f0 <crc__CRC8+0x54>
	{
		crc = crc__CRC8U(crc, data[a]);
802034c0:	e13ffc03 	ldbu	r4,-16(fp)
802034c4:	e0fffe17 	ldw	r3,-8(fp)
802034c8:	e0bffd17 	ldw	r2,-12(fp)
802034cc:	1885883a 	add	r2,r3,r2
802034d0:	10800003 	ldbu	r2,0(r2)
802034d4:	10803fcc 	andi	r2,r2,255
802034d8:	100b883a 	mov	r5,r2
802034dc:	02034500 	call	80203450 <crc__CRC8U>
802034e0:	e0bffc05 	stb	r2,-16(fp)
 * \return unsigned char CRC8 for data
 */
unsigned char crc__CRC8(unsigned char const data[], unsigned long length)
{
	unsigned char crc = CRC_START_8;
	for (unsigned long a = 0; a < length; a++)
802034e4:	e0bffd17 	ldw	r2,-12(fp)
802034e8:	10800044 	addi	r2,r2,1
802034ec:	e0bffd15 	stw	r2,-12(fp)
802034f0:	e0fffd17 	ldw	r3,-12(fp)
802034f4:	e0bfff17 	ldw	r2,-4(fp)
802034f8:	18bff136 	bltu	r3,r2,802034c0 <__reset+0xfa1e34c0>
	{
		crc = crc__CRC8U(crc, data[a]);
	}
	return crc;
802034fc:	e0bffc03 	ldbu	r2,-16(fp)
}
80203500:	e037883a 	mov	sp,fp
80203504:	dfc00117 	ldw	ra,4(sp)
80203508:	df000017 	ldw	fp,0(sp)
8020350c:	dec00204 	addi	sp,sp,8
80203510:	f800283a 	ret

80203514 <crc__CRC8KOOPU>:
 * \param value value to be added to CRC8/KOOP
 *
 * \return unsigned char a new CRC8/KOOP considering the value
 */
unsigned char crc__CRC8KOOPU(unsigned char crc8koop, unsigned char value)
{
80203514:	defffd04 	addi	sp,sp,-12
80203518:	df000215 	stw	fp,8(sp)
8020351c:	df000204 	addi	fp,sp,8
80203520:	2007883a 	mov	r3,r4
80203524:	2805883a 	mov	r2,r5
80203528:	e0fffe05 	stb	r3,-8(fp)
8020352c:	e0bfff05 	stb	r2,-4(fp)
	#ifdef pgm_read_byte
	return pgm_read_byte(crc8_koop_table + (crc8koop ^ value));
	#else
	return crc8_koop_table[crc8koop ^ value];
80203530:	e0fffe03 	ldbu	r3,-8(fp)
80203534:	e0bfff03 	ldbu	r2,-4(fp)
80203538:	1884f03a 	xor	r2,r3,r2
8020353c:	10c03fcc 	andi	r3,r2,255
80203540:	00a008b4 	movhi	r2,32802
80203544:	10b09a04 	addi	r2,r2,-15768
80203548:	10c5883a 	add	r2,r2,r3
8020354c:	10800003 	ldbu	r2,0(r2)
	#endif
}
80203550:	e037883a 	mov	sp,fp
80203554:	df000017 	ldw	fp,0(sp)
80203558:	dec00104 	addi	sp,sp,4
8020355c:	f800283a 	ret

80203560 <crc__CRC8KOOP>:
 * \param length length of data
 *
 * \return unsigned char CRC8/KOOP for data
 */
unsigned char crc__CRC8KOOP(unsigned char const data[], unsigned long length)
{
80203560:	defffa04 	addi	sp,sp,-24
80203564:	dfc00515 	stw	ra,20(sp)
80203568:	df000415 	stw	fp,16(sp)
8020356c:	df000404 	addi	fp,sp,16
80203570:	e13ffe15 	stw	r4,-8(fp)
80203574:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc = CRC_START_8_KOOP;
80203578:	e03ffc05 	stb	zero,-16(fp)
	for (unsigned long a = 0; a < length; a++)
8020357c:	e03ffd15 	stw	zero,-12(fp)
80203580:	00000c06 	br	802035b4 <crc__CRC8KOOP+0x54>
	{
		crc = crc__CRC8KOOPU(crc, data[a]);
80203584:	e13ffc03 	ldbu	r4,-16(fp)
80203588:	e0fffe17 	ldw	r3,-8(fp)
8020358c:	e0bffd17 	ldw	r2,-12(fp)
80203590:	1885883a 	add	r2,r3,r2
80203594:	10800003 	ldbu	r2,0(r2)
80203598:	10803fcc 	andi	r2,r2,255
8020359c:	100b883a 	mov	r5,r2
802035a0:	02035140 	call	80203514 <crc__CRC8KOOPU>
802035a4:	e0bffc05 	stb	r2,-16(fp)
 * \return unsigned char CRC8/KOOP for data
 */
unsigned char crc__CRC8KOOP(unsigned char const data[], unsigned long length)
{
	unsigned char crc = CRC_START_8_KOOP;
	for (unsigned long a = 0; a < length; a++)
802035a8:	e0bffd17 	ldw	r2,-12(fp)
802035ac:	10800044 	addi	r2,r2,1
802035b0:	e0bffd15 	stw	r2,-12(fp)
802035b4:	e0fffd17 	ldw	r3,-12(fp)
802035b8:	e0bfff17 	ldw	r2,-4(fp)
802035bc:	18bff136 	bltu	r3,r2,80203584 <__reset+0xfa1e3584>
	{
		crc = crc__CRC8KOOPU(crc, data[a]);
	}
	return crc;
802035c0:	e0bffc03 	ldbu	r2,-16(fp)
}
802035c4:	e037883a 	mov	sp,fp
802035c8:	dfc00117 	ldw	ra,4(sp)
802035cc:	df000017 	ldw	fp,0(sp)
802035d0:	dec00204 	addi	sp,sp,8
802035d4:	f800283a 	ret

802035d8 <crc__CRC16U>:
 * \param value value to be added to CRC16
 *
 * \return unsigned short a new CRC16 considering the value
 */
unsigned short crc__CRC16U(unsigned short crc16, unsigned char value)
{
802035d8:	defffd04 	addi	sp,sp,-12
802035dc:	df000215 	stw	fp,8(sp)
802035e0:	df000204 	addi	fp,sp,8
802035e4:	2007883a 	mov	r3,r4
802035e8:	2805883a 	mov	r2,r5
802035ec:	e0fffe0d 	sth	r3,-8(fp)
802035f0:	e0bfff05 	stb	r2,-4(fp)
	#ifdef pgm_read_word
	return (unsigned short) ( (crc16 >> 8) ^ pgm_read_word(crc16_table + ((crc16 ^ value) & 0x00FF)) );
	#else
	return (unsigned short) ( (crc16 >> 8) ^ crc16_table[(crc16 ^ value) & 0x00FF] );
802035f4:	e0bffe0b 	ldhu	r2,-8(fp)
802035f8:	1004d23a 	srli	r2,r2,8
802035fc:	1009883a 	mov	r4,r2
80203600:	e0fffe0b 	ldhu	r3,-8(fp)
80203604:	e0bfff03 	ldbu	r2,-4(fp)
80203608:	1884f03a 	xor	r2,r3,r2
8020360c:	10c03fcc 	andi	r3,r2,255
80203610:	00a008b4 	movhi	r2,32802
80203614:	10b0da04 	addi	r2,r2,-15512
80203618:	18c7883a 	add	r3,r3,r3
8020361c:	10c5883a 	add	r2,r2,r3
80203620:	1080000b 	ldhu	r2,0(r2)
80203624:	2084f03a 	xor	r2,r4,r2
	#endif
}
80203628:	e037883a 	mov	sp,fp
8020362c:	df000017 	ldw	fp,0(sp)
80203630:	dec00104 	addi	sp,sp,4
80203634:	f800283a 	ret

80203638 <crc__CRC16>:
 * \param length length of data
 *
 * \return unsigned short CRC16 for data
 */
unsigned short crc__CRC16(unsigned char const data[], unsigned long length)
{
80203638:	defffa04 	addi	sp,sp,-24
8020363c:	dfc00515 	stw	ra,20(sp)
80203640:	df000415 	stw	fp,16(sp)
80203644:	df000404 	addi	fp,sp,16
80203648:	e13ffe15 	stw	r4,-8(fp)
8020364c:	e17fff15 	stw	r5,-4(fp)
	unsigned short crc = CRC_START_16;
80203650:	e03ffc0d 	sth	zero,-16(fp)
	for (unsigned long a = 0; a < length; a++)
80203654:	e03ffd15 	stw	zero,-12(fp)
80203658:	00000c06 	br	8020368c <crc__CRC16+0x54>
	{
		crc = crc__CRC16U(crc, data[a]);
8020365c:	e13ffc0b 	ldhu	r4,-16(fp)
80203660:	e0fffe17 	ldw	r3,-8(fp)
80203664:	e0bffd17 	ldw	r2,-12(fp)
80203668:	1885883a 	add	r2,r3,r2
8020366c:	10800003 	ldbu	r2,0(r2)
80203670:	10803fcc 	andi	r2,r2,255
80203674:	100b883a 	mov	r5,r2
80203678:	02035d80 	call	802035d8 <crc__CRC16U>
8020367c:	e0bffc0d 	sth	r2,-16(fp)
 * \return unsigned short CRC16 for data
 */
unsigned short crc__CRC16(unsigned char const data[], unsigned long length)
{
	unsigned short crc = CRC_START_16;
	for (unsigned long a = 0; a < length; a++)
80203680:	e0bffd17 	ldw	r2,-12(fp)
80203684:	10800044 	addi	r2,r2,1
80203688:	e0bffd15 	stw	r2,-12(fp)
8020368c:	e0fffd17 	ldw	r3,-12(fp)
80203690:	e0bfff17 	ldw	r2,-4(fp)
80203694:	18bff136 	bltu	r3,r2,8020365c <__reset+0xfa1e365c>
	{
		crc = crc__CRC16U(crc, data[a]);
	}
	return crc;
80203698:	e0bffc0b 	ldhu	r2,-16(fp)
}
8020369c:	e037883a 	mov	sp,fp
802036a0:	dfc00117 	ldw	ra,4(sp)
802036a4:	df000017 	ldw	fp,0(sp)
802036a8:	dec00204 	addi	sp,sp,8
802036ac:	f800283a 	ret

802036b0 <crc__CRC16CCITTU>:
 * \param value value to be added to CRC16-CCITT
 *
 * \return unsigned short a new CRC16-CCITT considering the value
 */
unsigned short crc__CRC16CCITTU(unsigned short crc16ccitt, unsigned char value)
{
802036b0:	defffd04 	addi	sp,sp,-12
802036b4:	df000215 	stw	fp,8(sp)
802036b8:	df000204 	addi	fp,sp,8
802036bc:	2007883a 	mov	r3,r4
802036c0:	2805883a 	mov	r2,r5
802036c4:	e0fffe0d 	sth	r3,-8(fp)
802036c8:	e0bfff05 	stb	r2,-4(fp)
	#ifdef pgm_read_word
	return (unsigned short) ( ((crc16ccitt << 8) & 0xFF00) ^ pgm_read_word(crc16_ccitt_table + ((crc16ccitt >> 8) ^ value) & 0x00FF) );
	#else
	return (unsigned short) ( ((crc16ccitt << 8) & 0xFF00) ^ crc16_ccitt_table[((crc16ccitt >> 8) ^ value) & 0x00FF]);
802036cc:	e0bffe0b 	ldhu	r2,-8(fp)
802036d0:	1004923a 	slli	r2,r2,8
802036d4:	1007883a 	mov	r3,r2
802036d8:	00bfc004 	movi	r2,-256
802036dc:	1884703a 	and	r2,r3,r2
802036e0:	1009883a 	mov	r4,r2
802036e4:	e0bffe0b 	ldhu	r2,-8(fp)
802036e8:	1004d23a 	srli	r2,r2,8
802036ec:	10ffffcc 	andi	r3,r2,65535
802036f0:	e0bfff03 	ldbu	r2,-4(fp)
802036f4:	1884f03a 	xor	r2,r3,r2
802036f8:	10c03fcc 	andi	r3,r2,255
802036fc:	00a008b4 	movhi	r2,32802
80203700:	10b15a04 	addi	r2,r2,-15000
80203704:	18c7883a 	add	r3,r3,r3
80203708:	10c5883a 	add	r2,r2,r3
8020370c:	1080000b 	ldhu	r2,0(r2)
80203710:	2084f03a 	xor	r2,r4,r2
	#endif
}
80203714:	e037883a 	mov	sp,fp
80203718:	df000017 	ldw	fp,0(sp)
8020371c:	dec00104 	addi	sp,sp,4
80203720:	f800283a 	ret

80203724 <crc__CRC16CCITT>:
 * \param length length of data
 *
 * \return unsigned short CRC16-CCITT for data
 */
unsigned short crc__CRC16CCITT(unsigned char const data[], unsigned long length)
{
80203724:	defffa04 	addi	sp,sp,-24
80203728:	dfc00515 	stw	ra,20(sp)
8020372c:	df000415 	stw	fp,16(sp)
80203730:	df000404 	addi	fp,sp,16
80203734:	e13ffe15 	stw	r4,-8(fp)
80203738:	e17fff15 	stw	r5,-4(fp)
	unsigned short crc = CRC_START_16_CCITT;
8020373c:	00bfffc4 	movi	r2,-1
80203740:	e0bffc0d 	sth	r2,-16(fp)
	for (unsigned long a = 0; a < length; a++)
80203744:	e03ffd15 	stw	zero,-12(fp)
80203748:	00000c06 	br	8020377c <crc__CRC16CCITT+0x58>
	{
		crc = crc__CRC16CCITTU(crc, data[a]);
8020374c:	e13ffc0b 	ldhu	r4,-16(fp)
80203750:	e0fffe17 	ldw	r3,-8(fp)
80203754:	e0bffd17 	ldw	r2,-12(fp)
80203758:	1885883a 	add	r2,r3,r2
8020375c:	10800003 	ldbu	r2,0(r2)
80203760:	10803fcc 	andi	r2,r2,255
80203764:	100b883a 	mov	r5,r2
80203768:	02036b00 	call	802036b0 <crc__CRC16CCITTU>
8020376c:	e0bffc0d 	sth	r2,-16(fp)
 * \return unsigned short CRC16-CCITT for data
 */
unsigned short crc__CRC16CCITT(unsigned char const data[], unsigned long length)
{
	unsigned short crc = CRC_START_16_CCITT;
	for (unsigned long a = 0; a < length; a++)
80203770:	e0bffd17 	ldw	r2,-12(fp)
80203774:	10800044 	addi	r2,r2,1
80203778:	e0bffd15 	stw	r2,-12(fp)
8020377c:	e0fffd17 	ldw	r3,-12(fp)
80203780:	e0bfff17 	ldw	r2,-4(fp)
80203784:	18bff136 	bltu	r3,r2,8020374c <__reset+0xfa1e374c>
	{
		crc = crc__CRC16CCITTU(crc, data[a]);
	}
	return crc;
80203788:	e0bffc0b 	ldhu	r2,-16(fp)
}
8020378c:	e037883a 	mov	sp,fp
80203790:	dfc00117 	ldw	ra,4(sp)
80203794:	df000017 	ldw	fp,0(sp)
80203798:	dec00204 	addi	sp,sp,8
8020379c:	f800283a 	ret

802037a0 <crc__CRC32U>:
 * \param value value to be added to CRC32
 *
 * \return unsigned long a new CRC32 considering the value
 */
unsigned long crc__CRC32U(unsigned long crc32, unsigned char value)
{
802037a0:	defffd04 	addi	sp,sp,-12
802037a4:	df000215 	stw	fp,8(sp)
802037a8:	df000204 	addi	fp,sp,8
802037ac:	e13ffe15 	stw	r4,-8(fp)
802037b0:	2805883a 	mov	r2,r5
802037b4:	e0bfff05 	stb	r2,-4(fp)
	#ifdef pgm_read_dword
	return (crc32 >> 8) ^ pgm_read_dword(crc32_table + ((crc32 ^ value) & 0x000000FF));
	#else
	return (crc32 >> 8) ^ crc32_table[(crc32 ^ value) & 0x000000FF];
802037b8:	e0bffe17 	ldw	r2,-8(fp)
802037bc:	1008d23a 	srli	r4,r2,8
802037c0:	e0ffff03 	ldbu	r3,-4(fp)
802037c4:	e0bffe17 	ldw	r2,-8(fp)
802037c8:	1884f03a 	xor	r2,r3,r2
802037cc:	10c03fcc 	andi	r3,r2,255
802037d0:	00a008b4 	movhi	r2,32802
802037d4:	10b1da04 	addi	r2,r2,-14488
802037d8:	18c7883a 	add	r3,r3,r3
802037dc:	18c7883a 	add	r3,r3,r3
802037e0:	10c5883a 	add	r2,r2,r3
802037e4:	10800017 	ldw	r2,0(r2)
802037e8:	2084f03a 	xor	r2,r4,r2
	#endif
}
802037ec:	e037883a 	mov	sp,fp
802037f0:	df000017 	ldw	fp,0(sp)
802037f4:	dec00104 	addi	sp,sp,4
802037f8:	f800283a 	ret

802037fc <crc__CRC32>:
 * \param length length of data
 *
 * \return unsigned long CRC32 for data
 */
unsigned long crc__CRC32(unsigned char const data[], unsigned long length)
{
802037fc:	defffa04 	addi	sp,sp,-24
80203800:	dfc00515 	stw	ra,20(sp)
80203804:	df000415 	stw	fp,16(sp)
80203808:	df000404 	addi	fp,sp,16
8020380c:	e13ffe15 	stw	r4,-8(fp)
80203810:	e17fff15 	stw	r5,-4(fp)
	unsigned long crc = CRC_START_32;
80203814:	00bfffc4 	movi	r2,-1
80203818:	e0bffc15 	stw	r2,-16(fp)
	for (unsigned long a = 0; a < length; a = a+4)
8020381c:	e03ffd15 	stw	zero,-12(fp)
80203820:	00002a06 	br	802038cc <crc__CRC32+0xd0>
	{
//		printf("CRC Hex: 0x%08lX \n", crc);
		crc = crc__CRC32U(crc, data[a+3]);
80203824:	e0bffd17 	ldw	r2,-12(fp)
80203828:	108000c4 	addi	r2,r2,3
8020382c:	e0fffe17 	ldw	r3,-8(fp)
80203830:	1885883a 	add	r2,r3,r2
80203834:	10800003 	ldbu	r2,0(r2)
80203838:	10803fcc 	andi	r2,r2,255
8020383c:	100b883a 	mov	r5,r2
80203840:	e13ffc17 	ldw	r4,-16(fp)
80203844:	02037a00 	call	802037a0 <crc__CRC32U>
80203848:	e0bffc15 	stw	r2,-16(fp)
		crc = crc__CRC32U(crc, data[a+2]);
8020384c:	e0bffd17 	ldw	r2,-12(fp)
80203850:	10800084 	addi	r2,r2,2
80203854:	e0fffe17 	ldw	r3,-8(fp)
80203858:	1885883a 	add	r2,r3,r2
8020385c:	10800003 	ldbu	r2,0(r2)
80203860:	10803fcc 	andi	r2,r2,255
80203864:	100b883a 	mov	r5,r2
80203868:	e13ffc17 	ldw	r4,-16(fp)
8020386c:	02037a00 	call	802037a0 <crc__CRC32U>
80203870:	e0bffc15 	stw	r2,-16(fp)
		crc = crc__CRC32U(crc, data[a+1]);
80203874:	e0bffd17 	ldw	r2,-12(fp)
80203878:	10800044 	addi	r2,r2,1
8020387c:	e0fffe17 	ldw	r3,-8(fp)
80203880:	1885883a 	add	r2,r3,r2
80203884:	10800003 	ldbu	r2,0(r2)
80203888:	10803fcc 	andi	r2,r2,255
8020388c:	100b883a 	mov	r5,r2
80203890:	e13ffc17 	ldw	r4,-16(fp)
80203894:	02037a00 	call	802037a0 <crc__CRC32U>
80203898:	e0bffc15 	stw	r2,-16(fp)
		crc = crc__CRC32U(crc, data[a+0]);
8020389c:	e0fffe17 	ldw	r3,-8(fp)
802038a0:	e0bffd17 	ldw	r2,-12(fp)
802038a4:	1885883a 	add	r2,r3,r2
802038a8:	10800003 	ldbu	r2,0(r2)
802038ac:	10803fcc 	andi	r2,r2,255
802038b0:	100b883a 	mov	r5,r2
802038b4:	e13ffc17 	ldw	r4,-16(fp)
802038b8:	02037a00 	call	802037a0 <crc__CRC32U>
802038bc:	e0bffc15 	stw	r2,-16(fp)
 * \return unsigned long CRC32 for data
 */
unsigned long crc__CRC32(unsigned char const data[], unsigned long length)
{
	unsigned long crc = CRC_START_32;
	for (unsigned long a = 0; a < length; a = a+4)
802038c0:	e0bffd17 	ldw	r2,-12(fp)
802038c4:	10800104 	addi	r2,r2,4
802038c8:	e0bffd15 	stw	r2,-12(fp)
802038cc:	e0fffd17 	ldw	r3,-12(fp)
802038d0:	e0bfff17 	ldw	r2,-4(fp)
802038d4:	18bfd336 	bltu	r3,r2,80203824 <__reset+0xfa1e3824>
		crc = crc__CRC32U(crc, data[a+3]);
		crc = crc__CRC32U(crc, data[a+2]);
		crc = crc__CRC32U(crc, data[a+1]);
		crc = crc__CRC32U(crc, data[a+0]);
	}
	return (crc ^ 0xFFFFFFFF);
802038d8:	e0bffc17 	ldw	r2,-16(fp)
802038dc:	0084303a 	nor	r2,zero,r2
//	return (crc);
}
802038e0:	e037883a 	mov	sp,fp
802038e4:	dfc00117 	ldw	ra,4(sp)
802038e8:	df000017 	ldw	fp,0(sp)
802038ec:	dec00204 	addi	sp,sp,8
802038f0:	f800283a 	ret

802038f4 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
802038f4:	defffa04 	addi	sp,sp,-24
802038f8:	dfc00515 	stw	ra,20(sp)
802038fc:	df000415 	stw	fp,16(sp)
80203900:	df000404 	addi	fp,sp,16
80203904:	e13ffd15 	stw	r4,-12(fp)
80203908:	e17ffe15 	stw	r5,-8(fp)
8020390c:	3005883a 	mov	r2,r6
80203910:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
80203914:	00800044 	movi	r2,1
80203918:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
8020391c:	e17ffe17 	ldw	r5,-8(fp)
80203920:	e13ffd17 	ldw	r4,-12(fp)
80203924:	0203ca40 	call	80203ca4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203928:	e0bfff03 	ldbu	r2,-4(fp)
8020392c:	10803fcc 	andi	r2,r2,255
80203930:	100d883a 	mov	r6,r2
80203934:	e17ffe17 	ldw	r5,-8(fp)
80203938:	e13ffd17 	ldw	r4,-12(fp)
8020393c:	0203da80 	call	80203da8 <i2c_write>
80203940:	1000011e 	bne	r2,zero,80203948 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
80203944:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
80203948:	e17ffe17 	ldw	r5,-8(fp)
8020394c:	e13ffd17 	ldw	r4,-12(fp)
80203950:	0203d300 	call	80203d30 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
80203954:	0106d604 	movi	r4,7000
80203958:	0216c4c0 	call	80216c4c <usleep>
    
    return bSuccess;
8020395c:	e0bffc17 	ldw	r2,-16(fp)

}
80203960:	e037883a 	mov	sp,fp
80203964:	dfc00117 	ldw	ra,4(sp)
80203968:	df000017 	ldw	fp,0(sp)
8020396c:	dec00204 	addi	sp,sp,8
80203970:	f800283a 	ret

80203974 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
80203974:	defff804 	addi	sp,sp,-32
80203978:	dfc00715 	stw	ra,28(sp)
8020397c:	df000615 	stw	fp,24(sp)
80203980:	df000604 	addi	fp,sp,24
80203984:	e13ffb15 	stw	r4,-20(fp)
80203988:	e17ffc15 	stw	r5,-16(fp)
8020398c:	3009883a 	mov	r4,r6
80203990:	3807883a 	mov	r3,r7
80203994:	e0800217 	ldw	r2,8(fp)
80203998:	e13ffd05 	stb	r4,-12(fp)
8020399c:	e0fffe05 	stb	r3,-8(fp)
802039a0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
802039a4:	00800044 	movi	r2,1
802039a8:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
802039ac:	e17ffc17 	ldw	r5,-16(fp)
802039b0:	e13ffb17 	ldw	r4,-20(fp)
802039b4:	0203ca40 	call	80203ca4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
802039b8:	e0bffd03 	ldbu	r2,-12(fp)
802039bc:	10803fcc 	andi	r2,r2,255
802039c0:	100d883a 	mov	r6,r2
802039c4:	e17ffc17 	ldw	r5,-16(fp)
802039c8:	e13ffb17 	ldw	r4,-20(fp)
802039cc:	0203da80 	call	80203da8 <i2c_write>
802039d0:	1000011e 	bne	r2,zero,802039d8 <I2C_Write+0x64>
        bSuccess = FALSE;
802039d4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
802039d8:	e0bffa17 	ldw	r2,-24(fp)
802039dc:	10000726 	beq	r2,zero,802039fc <I2C_Write+0x88>
802039e0:	e0bffe03 	ldbu	r2,-8(fp)
802039e4:	100d883a 	mov	r6,r2
802039e8:	e17ffc17 	ldw	r5,-16(fp)
802039ec:	e13ffb17 	ldw	r4,-20(fp)
802039f0:	0203da80 	call	80203da8 <i2c_write>
802039f4:	1000011e 	bne	r2,zero,802039fc <I2C_Write+0x88>
        bSuccess = FALSE;
802039f8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
802039fc:	e0bffa17 	ldw	r2,-24(fp)
80203a00:	10000726 	beq	r2,zero,80203a20 <I2C_Write+0xac>
80203a04:	e0bfff03 	ldbu	r2,-4(fp)
80203a08:	100d883a 	mov	r6,r2
80203a0c:	e17ffc17 	ldw	r5,-16(fp)
80203a10:	e13ffb17 	ldw	r4,-20(fp)
80203a14:	0203da80 	call	80203da8 <i2c_write>
80203a18:	1000011e 	bne	r2,zero,80203a20 <I2C_Write+0xac>
        bSuccess = FALSE;
80203a1c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
80203a20:	e17ffc17 	ldw	r5,-16(fp)
80203a24:	e13ffb17 	ldw	r4,-20(fp)
80203a28:	0203d300 	call	80203d30 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
80203a2c:	0106d604 	movi	r4,7000
80203a30:	0216c4c0 	call	80216c4c <usleep>
    
    return bSuccess;
80203a34:	e0bffa17 	ldw	r2,-24(fp)

}
80203a38:	e037883a 	mov	sp,fp
80203a3c:	dfc00117 	ldw	ra,4(sp)
80203a40:	df000017 	ldw	fp,0(sp)
80203a44:	dec00204 	addi	sp,sp,8
80203a48:	f800283a 	ret

80203a4c <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
80203a4c:	defff904 	addi	sp,sp,-28
80203a50:	dfc00615 	stw	ra,24(sp)
80203a54:	df000515 	stw	fp,20(sp)
80203a58:	df000504 	addi	fp,sp,20
80203a5c:	e13ffc15 	stw	r4,-16(fp)
80203a60:	e17ffd15 	stw	r5,-12(fp)
80203a64:	3007883a 	mov	r3,r6
80203a68:	3805883a 	mov	r2,r7
80203a6c:	e0fffe05 	stb	r3,-8(fp)
80203a70:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
80203a74:	00800044 	movi	r2,1
80203a78:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203a7c:	e17ffd17 	ldw	r5,-12(fp)
80203a80:	e13ffc17 	ldw	r4,-16(fp)
80203a84:	0203ca40 	call	80203ca4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203a88:	e0bffe03 	ldbu	r2,-8(fp)
80203a8c:	10803fcc 	andi	r2,r2,255
80203a90:	100d883a 	mov	r6,r2
80203a94:	e17ffd17 	ldw	r5,-12(fp)
80203a98:	e13ffc17 	ldw	r4,-16(fp)
80203a9c:	0203da80 	call	80203da8 <i2c_write>
80203aa0:	1000011e 	bne	r2,zero,80203aa8 <I2C_Read+0x5c>
        bSuccess = FALSE;
80203aa4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
80203aa8:	e0bffb17 	ldw	r2,-20(fp)
80203aac:	10000726 	beq	r2,zero,80203acc <I2C_Read+0x80>
80203ab0:	e0bfff03 	ldbu	r2,-4(fp)
80203ab4:	100d883a 	mov	r6,r2
80203ab8:	e17ffd17 	ldw	r5,-12(fp)
80203abc:	e13ffc17 	ldw	r4,-16(fp)
80203ac0:	0203da80 	call	80203da8 <i2c_write>
80203ac4:	1000011e 	bne	r2,zero,80203acc <I2C_Read+0x80>
        bSuccess = FALSE;
80203ac8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
80203acc:	e17ffd17 	ldw	r5,-12(fp)
80203ad0:	e13ffc17 	ldw	r4,-16(fp)
80203ad4:	0203ca40 	call	80203ca4 <i2c_start>
    DeviceAddr |= 1; // Read
80203ad8:	e0bffe03 	ldbu	r2,-8(fp)
80203adc:	10800054 	ori	r2,r2,1
80203ae0:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
80203ae4:	e0bffb17 	ldw	r2,-20(fp)
80203ae8:	10000826 	beq	r2,zero,80203b0c <I2C_Read+0xc0>
80203aec:	e0bffe03 	ldbu	r2,-8(fp)
80203af0:	10803fcc 	andi	r2,r2,255
80203af4:	100d883a 	mov	r6,r2
80203af8:	e17ffd17 	ldw	r5,-12(fp)
80203afc:	e13ffc17 	ldw	r4,-16(fp)
80203b00:	0203da80 	call	80203da8 <i2c_write>
80203b04:	1000011e 	bne	r2,zero,80203b0c <I2C_Read+0xc0>
        bSuccess = FALSE;
80203b08:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
80203b0c:	e0bffb17 	ldw	r2,-20(fp)
80203b10:	10000526 	beq	r2,zero,80203b28 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
80203b14:	000f883a 	mov	r7,zero
80203b18:	e1800217 	ldw	r6,8(fp)
80203b1c:	e17ffd17 	ldw	r5,-12(fp)
80203b20:	e13ffc17 	ldw	r4,-16(fp)
80203b24:	0203ed80 	call	80203ed8 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
80203b28:	e17ffd17 	ldw	r5,-12(fp)
80203b2c:	e13ffc17 	ldw	r4,-16(fp)
80203b30:	0203d300 	call	80203d30 <i2c_stop>
    
    return bSuccess;
80203b34:	e0bffb17 	ldw	r2,-20(fp)
}
80203b38:	e037883a 	mov	sp,fp
80203b3c:	dfc00117 	ldw	ra,4(sp)
80203b40:	df000017 	ldw	fp,0(sp)
80203b44:	dec00204 	addi	sp,sp,8
80203b48:	f800283a 	ret

80203b4c <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
80203b4c:	defff604 	addi	sp,sp,-40
80203b50:	dfc00915 	stw	ra,36(sp)
80203b54:	df000815 	stw	fp,32(sp)
80203b58:	df000804 	addi	fp,sp,32
80203b5c:	e13ffb15 	stw	r4,-20(fp)
80203b60:	e17ffc15 	stw	r5,-16(fp)
80203b64:	3007883a 	mov	r3,r6
80203b68:	e1fffe15 	stw	r7,-8(fp)
80203b6c:	e0800217 	ldw	r2,8(fp)
80203b70:	e0fffd05 	stb	r3,-12(fp)
80203b74:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
80203b78:	00800044 	movi	r2,1
80203b7c:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
80203b80:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203b84:	e17ffc17 	ldw	r5,-16(fp)
80203b88:	e13ffb17 	ldw	r4,-20(fp)
80203b8c:	0203ca40 	call	80203ca4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203b90:	e0bffd03 	ldbu	r2,-12(fp)
80203b94:	10803fcc 	andi	r2,r2,255
80203b98:	100d883a 	mov	r6,r2
80203b9c:	e17ffc17 	ldw	r5,-16(fp)
80203ba0:	e13ffb17 	ldw	r4,-20(fp)
80203ba4:	0203da80 	call	80203da8 <i2c_write>
80203ba8:	1000011e 	bne	r2,zero,80203bb0 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
80203bac:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
80203bb0:	e0bff917 	ldw	r2,-28(fp)
80203bb4:	10000726 	beq	r2,zero,80203bd4 <I2C_MultipleRead+0x88>
80203bb8:	e0bffa03 	ldbu	r2,-24(fp)
80203bbc:	100d883a 	mov	r6,r2
80203bc0:	e17ffc17 	ldw	r5,-16(fp)
80203bc4:	e13ffb17 	ldw	r4,-20(fp)
80203bc8:	0203da80 	call	80203da8 <i2c_write>
80203bcc:	1000011e 	bne	r2,zero,80203bd4 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
80203bd0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
80203bd4:	e0bff917 	ldw	r2,-28(fp)
80203bd8:	10000326 	beq	r2,zero,80203be8 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
80203bdc:	e17ffc17 	ldw	r5,-16(fp)
80203be0:	e13ffb17 	ldw	r4,-20(fp)
80203be4:	0203ca40 	call	80203ca4 <i2c_start>
    DeviceAddr |= 1; // Read
80203be8:	e0bffd03 	ldbu	r2,-12(fp)
80203bec:	10800054 	ori	r2,r2,1
80203bf0:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
80203bf4:	e0bff917 	ldw	r2,-28(fp)
80203bf8:	10000826 	beq	r2,zero,80203c1c <I2C_MultipleRead+0xd0>
80203bfc:	e0bffd03 	ldbu	r2,-12(fp)
80203c00:	10803fcc 	andi	r2,r2,255
80203c04:	100d883a 	mov	r6,r2
80203c08:	e17ffc17 	ldw	r5,-16(fp)
80203c0c:	e13ffb17 	ldw	r4,-20(fp)
80203c10:	0203da80 	call	80203da8 <i2c_write>
80203c14:	1000011e 	bne	r2,zero,80203c1c <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
80203c18:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
80203c1c:	e0bff917 	ldw	r2,-28(fp)
80203c20:	10001726 	beq	r2,zero,80203c80 <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
80203c24:	e03ff815 	stw	zero,-32(fp)
80203c28:	00001006 	br	80203c6c <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
80203c2c:	e0bff817 	ldw	r2,-32(fp)
80203c30:	e0fffe17 	ldw	r3,-8(fp)
80203c34:	1889883a 	add	r4,r3,r2
80203c38:	e0bfff0b 	ldhu	r2,-4(fp)
80203c3c:	10ffffc4 	addi	r3,r2,-1
80203c40:	e0bff817 	ldw	r2,-32(fp)
80203c44:	1884c03a 	cmpne	r2,r3,r2
80203c48:	10803fcc 	andi	r2,r2,255
80203c4c:	100f883a 	mov	r7,r2
80203c50:	200d883a 	mov	r6,r4
80203c54:	e17ffc17 	ldw	r5,-16(fp)
80203c58:	e13ffb17 	ldw	r4,-20(fp)
80203c5c:	0203ed80 	call	80203ed8 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
80203c60:	e0bff817 	ldw	r2,-32(fp)
80203c64:	10800044 	addi	r2,r2,1
80203c68:	e0bff815 	stw	r2,-32(fp)
80203c6c:	e0bfff0b 	ldhu	r2,-4(fp)
80203c70:	e0fff817 	ldw	r3,-32(fp)
80203c74:	1880020e 	bge	r3,r2,80203c80 <I2C_MultipleRead+0x134>
80203c78:	e0bff917 	ldw	r2,-28(fp)
80203c7c:	103feb1e 	bne	r2,zero,80203c2c <__reset+0xfa1e3c2c>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
80203c80:	e17ffc17 	ldw	r5,-16(fp)
80203c84:	e13ffb17 	ldw	r4,-20(fp)
80203c88:	0203d300 	call	80203d30 <i2c_stop>
    
    return bSuccess;    
80203c8c:	e0bff917 	ldw	r2,-28(fp)
    
}
80203c90:	e037883a 	mov	sp,fp
80203c94:	dfc00117 	ldw	ra,4(sp)
80203c98:	df000017 	ldw	fp,0(sp)
80203c9c:	dec00204 	addi	sp,sp,8
80203ca0:	f800283a 	ret

80203ca4 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
80203ca4:	defffc04 	addi	sp,sp,-16
80203ca8:	dfc00315 	stw	ra,12(sp)
80203cac:	df000215 	stw	fp,8(sp)
80203cb0:	df000204 	addi	fp,sp,8
80203cb4:	e13ffe15 	stw	r4,-8(fp)
80203cb8:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
80203cbc:	e0bfff17 	ldw	r2,-4(fp)
80203cc0:	10800104 	addi	r2,r2,4
80203cc4:	1007883a 	mov	r3,r2
80203cc8:	00800044 	movi	r2,1
80203ccc:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
80203cd0:	e0bfff17 	ldw	r2,-4(fp)
80203cd4:	00c00044 	movi	r3,1
80203cd8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
80203cdc:	e0bffe17 	ldw	r2,-8(fp)
80203ce0:	00c00044 	movi	r3,1
80203ce4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
80203ce8:	01000044 	movi	r4,1
80203cec:	0216c4c0 	call	80216c4c <usleep>
     
    SDA_LOW(data_base); // data low
80203cf0:	e0bfff17 	ldw	r2,-4(fp)
80203cf4:	0007883a 	mov	r3,zero
80203cf8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
80203cfc:	01000044 	movi	r4,1
80203d00:	0216c4c0 	call	80216c4c <usleep>
    SCL_LOW(clk_base); // clock low
80203d04:	e0bffe17 	ldw	r2,-8(fp)
80203d08:	0007883a 	mov	r3,zero
80203d0c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
80203d10:	01000044 	movi	r4,1
80203d14:	0216c4c0 	call	80216c4c <usleep>
}
80203d18:	0001883a 	nop
80203d1c:	e037883a 	mov	sp,fp
80203d20:	dfc00117 	ldw	ra,4(sp)
80203d24:	df000017 	ldw	fp,0(sp)
80203d28:	dec00204 	addi	sp,sp,8
80203d2c:	f800283a 	ret

80203d30 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
80203d30:	defffc04 	addi	sp,sp,-16
80203d34:	dfc00315 	stw	ra,12(sp)
80203d38:	df000215 	stw	fp,8(sp)
80203d3c:	df000204 	addi	fp,sp,8
80203d40:	e13ffe15 	stw	r4,-8(fp)
80203d44:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
80203d48:	e0bfff17 	ldw	r2,-4(fp)
80203d4c:	10800104 	addi	r2,r2,4
80203d50:	1007883a 	mov	r3,r2
80203d54:	00800044 	movi	r2,1
80203d58:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
80203d5c:	e0bfff17 	ldw	r2,-4(fp)
80203d60:	0007883a 	mov	r3,zero
80203d64:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
80203d68:	e0bffe17 	ldw	r2,-8(fp)
80203d6c:	00c00044 	movi	r3,1
80203d70:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
80203d74:	01000044 	movi	r4,1
80203d78:	0216c4c0 	call	80216c4c <usleep>
    SDA_HIGH(data_base); // data high
80203d7c:	e0bfff17 	ldw	r2,-4(fp)
80203d80:	00c00044 	movi	r3,1
80203d84:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
80203d88:	01000044 	movi	r4,1
80203d8c:	0216c4c0 	call	80216c4c <usleep>
    

    
}
80203d90:	0001883a 	nop
80203d94:	e037883a 	mov	sp,fp
80203d98:	dfc00117 	ldw	ra,4(sp)
80203d9c:	df000017 	ldw	fp,0(sp)
80203da0:	dec00204 	addi	sp,sp,8
80203da4:	f800283a 	ret

80203da8 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
80203da8:	defff804 	addi	sp,sp,-32
80203dac:	dfc00715 	stw	ra,28(sp)
80203db0:	df000615 	stw	fp,24(sp)
80203db4:	df000604 	addi	fp,sp,24
80203db8:	e13ffd15 	stw	r4,-12(fp)
80203dbc:	e17ffe15 	stw	r5,-8(fp)
80203dc0:	3005883a 	mov	r2,r6
80203dc4:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
80203dc8:	00bfe004 	movi	r2,-128
80203dcc:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
80203dd0:	e0bffe17 	ldw	r2,-8(fp)
80203dd4:	10800104 	addi	r2,r2,4
80203dd8:	1007883a 	mov	r3,r2
80203ddc:	00800044 	movi	r2,1
80203de0:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
80203de4:	e03ffb15 	stw	zero,-20(fp)
80203de8:	00001f06 	br	80203e68 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
80203dec:	e0bffd17 	ldw	r2,-12(fp)
80203df0:	0007883a 	mov	r3,zero
80203df4:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
80203df8:	e0ffff03 	ldbu	r3,-4(fp)
80203dfc:	e0bffa03 	ldbu	r2,-24(fp)
80203e00:	1884703a 	and	r2,r3,r2
80203e04:	10803fcc 	andi	r2,r2,255
80203e08:	10000426 	beq	r2,zero,80203e1c <i2c_write+0x74>
            SDA_HIGH(data_base);
80203e0c:	e0bffe17 	ldw	r2,-8(fp)
80203e10:	00c00044 	movi	r3,1
80203e14:	10c00035 	stwio	r3,0(r2)
80203e18:	00000306 	br	80203e28 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
80203e1c:	e0bffe17 	ldw	r2,-8(fp)
80203e20:	0007883a 	mov	r3,zero
80203e24:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
80203e28:	e0bffa03 	ldbu	r2,-24(fp)
80203e2c:	1004d07a 	srli	r2,r2,1
80203e30:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
80203e34:	e0bffd17 	ldw	r2,-12(fp)
80203e38:	00c00044 	movi	r3,1
80203e3c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
80203e40:	01000044 	movi	r4,1
80203e44:	0216c4c0 	call	80216c4c <usleep>
        SCL_LOW(clk_base);
80203e48:	e0bffd17 	ldw	r2,-12(fp)
80203e4c:	0007883a 	mov	r3,zero
80203e50:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
80203e54:	01000044 	movi	r4,1
80203e58:	0216c4c0 	call	80216c4c <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
80203e5c:	e0bffb17 	ldw	r2,-20(fp)
80203e60:	10800044 	addi	r2,r2,1
80203e64:	e0bffb15 	stw	r2,-20(fp)
80203e68:	e0bffb17 	ldw	r2,-20(fp)
80203e6c:	10800210 	cmplti	r2,r2,8
80203e70:	103fde1e 	bne	r2,zero,80203dec <__reset+0xfa1e3dec>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
80203e74:	e0bffe17 	ldw	r2,-8(fp)
80203e78:	10800104 	addi	r2,r2,4
80203e7c:	0007883a 	mov	r3,zero
80203e80:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
80203e84:	e0bffd17 	ldw	r2,-12(fp)
80203e88:	00c00044 	movi	r3,1
80203e8c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
80203e90:	01000044 	movi	r4,1
80203e94:	0216c4c0 	call	80216c4c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
80203e98:	e0bffe17 	ldw	r2,-8(fp)
80203e9c:	10800037 	ldwio	r2,0(r2)
80203ea0:	1005003a 	cmpeq	r2,r2,zero
80203ea4:	10803fcc 	andi	r2,r2,255
80203ea8:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
80203eac:	e0bffd17 	ldw	r2,-12(fp)
80203eb0:	0007883a 	mov	r3,zero
80203eb4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80203eb8:	01000044 	movi	r4,1
80203ebc:	0216c4c0 	call	80216c4c <usleep>
    return bAck;
80203ec0:	e0bffc17 	ldw	r2,-16(fp)
}    
80203ec4:	e037883a 	mov	sp,fp
80203ec8:	dfc00117 	ldw	ra,4(sp)
80203ecc:	df000017 	ldw	fp,0(sp)
80203ed0:	dec00204 	addi	sp,sp,8
80203ed4:	f800283a 	ret

80203ed8 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
80203ed8:	defff804 	addi	sp,sp,-32
80203edc:	dfc00715 	stw	ra,28(sp)
80203ee0:	df000615 	stw	fp,24(sp)
80203ee4:	df000604 	addi	fp,sp,24
80203ee8:	e13ffc15 	stw	r4,-16(fp)
80203eec:	e17ffd15 	stw	r5,-12(fp)
80203ef0:	e1bffe15 	stw	r6,-8(fp)
80203ef4:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
80203ef8:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
80203efc:	e0bffd17 	ldw	r2,-12(fp)
80203f00:	10800104 	addi	r2,r2,4
80203f04:	0007883a 	mov	r3,zero
80203f08:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
80203f0c:	e0bffc17 	ldw	r2,-16(fp)
80203f10:	0007883a 	mov	r3,zero
80203f14:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80203f18:	01000044 	movi	r4,1
80203f1c:	0216c4c0 	call	80216c4c <usleep>

    for(i=0;i<8;i++){
80203f20:	e03ffb15 	stw	zero,-20(fp)
80203f24:	00001606 	br	80203f80 <i2c_read+0xa8>
        Data <<= 1;
80203f28:	e0bffa03 	ldbu	r2,-24(fp)
80203f2c:	1085883a 	add	r2,r2,r2
80203f30:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
80203f34:	e0bffc17 	ldw	r2,-16(fp)
80203f38:	00c00044 	movi	r3,1
80203f3c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
80203f40:	01000044 	movi	r4,1
80203f44:	0216c4c0 	call	80216c4c <usleep>
        if (SDA_READ(data_base))  // read data   
80203f48:	e0bffd17 	ldw	r2,-12(fp)
80203f4c:	10800037 	ldwio	r2,0(r2)
80203f50:	10000326 	beq	r2,zero,80203f60 <i2c_read+0x88>
            Data |= 0x01;
80203f54:	e0bffa03 	ldbu	r2,-24(fp)
80203f58:	10800054 	ori	r2,r2,1
80203f5c:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
80203f60:	e0bffc17 	ldw	r2,-16(fp)
80203f64:	0007883a 	mov	r3,zero
80203f68:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
80203f6c:	01000044 	movi	r4,1
80203f70:	0216c4c0 	call	80216c4c <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
80203f74:	e0bffb17 	ldw	r2,-20(fp)
80203f78:	10800044 	addi	r2,r2,1
80203f7c:	e0bffb15 	stw	r2,-20(fp)
80203f80:	e0bffb17 	ldw	r2,-20(fp)
80203f84:	10800210 	cmplti	r2,r2,8
80203f88:	103fe71e 	bne	r2,zero,80203f28 <__reset+0xfa1e3f28>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
80203f8c:	e0bffc17 	ldw	r2,-16(fp)
80203f90:	0007883a 	mov	r3,zero
80203f94:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
80203f98:	e0bffd17 	ldw	r2,-12(fp)
80203f9c:	10800104 	addi	r2,r2,4
80203fa0:	1007883a 	mov	r3,r2
80203fa4:	00800044 	movi	r2,1
80203fa8:	18800035 	stwio	r2,0(r3)
    if (bAck)
80203fac:	e0bfff17 	ldw	r2,-4(fp)
80203fb0:	10000426 	beq	r2,zero,80203fc4 <i2c_read+0xec>
        SDA_LOW(data_base);
80203fb4:	e0bffd17 	ldw	r2,-12(fp)
80203fb8:	0007883a 	mov	r3,zero
80203fbc:	10c00035 	stwio	r3,0(r2)
80203fc0:	00000306 	br	80203fd0 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
80203fc4:	e0bffd17 	ldw	r2,-12(fp)
80203fc8:	00c00044 	movi	r3,1
80203fcc:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
80203fd0:	e0bffc17 	ldw	r2,-16(fp)
80203fd4:	00c00044 	movi	r3,1
80203fd8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
80203fdc:	01000044 	movi	r4,1
80203fe0:	0216c4c0 	call	80216c4c <usleep>
    SCL_LOW(clk_base); // clock low
80203fe4:	e0bffc17 	ldw	r2,-16(fp)
80203fe8:	0007883a 	mov	r3,zero
80203fec:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80203ff0:	01000044 	movi	r4,1
80203ff4:	0216c4c0 	call	80216c4c <usleep>
    SDA_LOW(data_base);  // data low
80203ff8:	e0bffd17 	ldw	r2,-12(fp)
80203ffc:	0007883a 	mov	r3,zero
80204000:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
80204004:	01000044 	movi	r4,1
80204008:	0216c4c0 	call	80216c4c <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
8020400c:	e0bffe17 	ldw	r2,-8(fp)
80204010:	e0fffa03 	ldbu	r3,-24(fp)
80204014:	10c00005 	stb	r3,0(r2)
}
80204018:	0001883a 	nop
8020401c:	e037883a 	mov	sp,fp
80204020:	dfc00117 	ldw	ra,4(sp)
80204024:	df000017 	ldw	fp,0(sp)
80204028:	dec00204 	addi	sp,sp,8
8020402c:	f800283a 	ret

80204030 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
80204030:	defffd04 	addi	sp,sp,-12
80204034:	df000215 	stw	fp,8(sp)
80204038:	df000204 	addi	fp,sp,8
8020403c:	e13ffe15 	stw	r4,-8(fp)
80204040:	2805883a 	mov	r2,r5
80204044:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
80204048:	e0bffe17 	ldw	r2,-8(fp)
8020404c:	10800058 	cmpnei	r2,r2,1
80204050:	1000071e 	bne	r2,zero,80204070 <bSetBoardLeds+0x40>
	LedsBoardControl &= (~LedsMask);
80204054:	e0bfff03 	ldbu	r2,-4(fp)
80204058:	0084303a 	nor	r2,zero,r2
8020405c:	1007883a 	mov	r3,r2
80204060:	d0a01903 	ldbu	r2,-32668(gp)
80204064:	1884703a 	and	r2,r3,r2
80204068:	d0a01905 	stb	r2,-32668(gp)
8020406c:	00000406 	br	80204080 <bSetBoardLeds+0x50>
  } else {
	LedsBoardControl |= LedsMask;
80204070:	d0e01903 	ldbu	r3,-32668(gp)
80204074:	e0bfff03 	ldbu	r2,-4(fp)
80204078:	1884b03a 	or	r2,r3,r2
8020407c:	d0a01905 	stb	r2,-32668(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
80204080:	d0a01903 	ldbu	r2,-32668(gp)
80204084:	10c03fcc 	andi	r3,r2,255
80204088:	00a04034 	movhi	r2,33024
8020408c:	10816404 	addi	r2,r2,1424
80204090:	10c00035 	stwio	r3,0(r2)

  return TRUE;
80204094:	00800044 	movi	r2,1
}
80204098:	e037883a 	mov	sp,fp
8020409c:	df000017 	ldw	fp,0(sp)
802040a0:	dec00104 	addi	sp,sp,4
802040a4:	f800283a 	ret

802040a8 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
802040a8:	defffd04 	addi	sp,sp,-12
802040ac:	df000215 	stw	fp,8(sp)
802040b0:	df000204 	addi	fp,sp,8
802040b4:	e13ffe15 	stw	r4,-8(fp)
802040b8:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
802040bc:	e0bffe17 	ldw	r2,-8(fp)
802040c0:	10800058 	cmpnei	r2,r2,1
802040c4:	1000051e 	bne	r2,zero,802040dc <bSetPainelLeds+0x34>
	LedsPainelControl |= LedsMask;
802040c8:	d0e00017 	ldw	r3,-32768(gp)
802040cc:	e0bfff17 	ldw	r2,-4(fp)
802040d0:	1884b03a 	or	r2,r3,r2
802040d4:	d0a00015 	stw	r2,-32768(gp)
802040d8:	00000506 	br	802040f0 <bSetPainelLeds+0x48>
  } else {
	LedsPainelControl &= (~LedsMask);
802040dc:	e0bfff17 	ldw	r2,-4(fp)
802040e0:	0086303a 	nor	r3,zero,r2
802040e4:	d0a00017 	ldw	r2,-32768(gp)
802040e8:	1884703a 	and	r2,r3,r2
802040ec:	d0a00015 	stw	r2,-32768(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
802040f0:	d0a00017 	ldw	r2,-32768(gp)
802040f4:	1007883a 	mov	r3,r2
802040f8:	00a04034 	movhi	r2,33024
802040fc:	10813004 	addi	r2,r2,1216
80204100:	10c00035 	stwio	r3,0(r2)

  return TRUE;
80204104:	00800044 	movi	r2,1
}
80204108:	e037883a 	mov	sp,fp
8020410c:	df000017 	ldw	fp,0(sp)
80204110:	dec00104 	addi	sp,sp,4
80204114:	f800283a 	ret

80204118 <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
80204118:	defffc04 	addi	sp,sp,-16
8020411c:	df000315 	stw	fp,12(sp)
80204120:	df000304 	addi	fp,sp,12
80204124:	e13ffd15 	stw	r4,-12(fp)
80204128:	e17ffe15 	stw	r5,-8(fp)
8020412c:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
80204130:	e0bffd17 	ldw	r2,-12(fp)
80204134:	10800037 	ldwio	r2,0(r2)
80204138:	1080010c 	andi	r2,r2,4
8020413c:	10000226 	beq	r2,zero,80204148 <msgdma_write_extended_descriptor+0x30>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
80204140:	00bff904 	movi	r2,-28
80204144:	00003d06 	br	8020423c <msgdma_write_extended_descriptor+0x124>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
80204148:	e0bfff17 	ldw	r2,-4(fp)
8020414c:	10800017 	ldw	r2,0(r2)
80204150:	1007883a 	mov	r3,r2
80204154:	e0bffe17 	ldw	r2,-8(fp)
80204158:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
8020415c:	e0bffe17 	ldw	r2,-8(fp)
80204160:	10800104 	addi	r2,r2,4
80204164:	e0ffff17 	ldw	r3,-4(fp)
80204168:	18c00117 	ldw	r3,4(r3)
8020416c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
80204170:	e0bffe17 	ldw	r2,-8(fp)
80204174:	10800204 	addi	r2,r2,8
80204178:	e0ffff17 	ldw	r3,-4(fp)
8020417c:	18c00217 	ldw	r3,8(r3)
80204180:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
80204184:	e0bffe17 	ldw	r2,-8(fp)
80204188:	10800304 	addi	r2,r2,12
8020418c:	e0ffff17 	ldw	r3,-4(fp)
80204190:	18c0030b 	ldhu	r3,12(r3)
80204194:	18ffffcc 	andi	r3,r3,65535
80204198:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
8020419c:	e0bffe17 	ldw	r2,-8(fp)
802041a0:	10800384 	addi	r2,r2,14
802041a4:	e0ffff17 	ldw	r3,-4(fp)
802041a8:	18c00383 	ldbu	r3,14(r3)
802041ac:	18c03fcc 	andi	r3,r3,255
802041b0:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
802041b4:	e0bffe17 	ldw	r2,-8(fp)
802041b8:	108003c4 	addi	r2,r2,15
802041bc:	e0ffff17 	ldw	r3,-4(fp)
802041c0:	18c003c3 	ldbu	r3,15(r3)
802041c4:	18c03fcc 	andi	r3,r3,255
802041c8:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
802041cc:	e0bffe17 	ldw	r2,-8(fp)
802041d0:	10800404 	addi	r2,r2,16
802041d4:	e0ffff17 	ldw	r3,-4(fp)
802041d8:	18c0040b 	ldhu	r3,16(r3)
802041dc:	18ffffcc 	andi	r3,r3,65535
802041e0:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
802041e4:	e0bffe17 	ldw	r2,-8(fp)
802041e8:	10800484 	addi	r2,r2,18
802041ec:	e0ffff17 	ldw	r3,-4(fp)
802041f0:	18c0048b 	ldhu	r3,18(r3)
802041f4:	18ffffcc 	andi	r3,r3,65535
802041f8:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
802041fc:	e0bffe17 	ldw	r2,-8(fp)
80204200:	10800504 	addi	r2,r2,20
80204204:	e0ffff17 	ldw	r3,-4(fp)
80204208:	18c00517 	ldw	r3,20(r3)
8020420c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
80204210:	e0bffe17 	ldw	r2,-8(fp)
80204214:	10800604 	addi	r2,r2,24
80204218:	e0ffff17 	ldw	r3,-4(fp)
8020421c:	18c00617 	ldw	r3,24(r3)
80204220:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
80204224:	e0bffe17 	ldw	r2,-8(fp)
80204228:	10800704 	addi	r2,r2,28
8020422c:	e0ffff17 	ldw	r3,-4(fp)
80204230:	18c00717 	ldw	r3,28(r3)
80204234:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
80204238:	0005883a 	mov	r2,zero
}
8020423c:	e037883a 	mov	sp,fp
80204240:	df000017 	ldw	fp,0(sp)
80204244:	dec00104 	addi	sp,sp,4
80204248:	f800283a 	ret

8020424c <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
8020424c:	defff604 	addi	sp,sp,-40
80204250:	df000915 	stw	fp,36(sp)
80204254:	df000904 	addi	fp,sp,36
80204258:	e13ff715 	stw	r4,-36(fp)
8020425c:	e17ff815 	stw	r5,-32(fp)
80204260:	e1bff915 	stw	r6,-28(fp)
80204264:	e1fffa15 	stw	r7,-24(fp)
80204268:	e1800517 	ldw	r6,20(fp)
8020426c:	e1400617 	ldw	r5,24(fp)
80204270:	e1000717 	ldw	r4,28(fp)
80204274:	e0c00817 	ldw	r3,32(fp)
80204278:	e0800917 	ldw	r2,36(fp)
8020427c:	e1bffb0d 	sth	r6,-20(fp)
80204280:	e17ffc05 	stb	r5,-16(fp)
80204284:	e13ffd05 	stb	r4,-12(fp)
80204288:	e0fffe0d 	sth	r3,-8(fp)
8020428c:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
80204290:	e0bff717 	ldw	r2,-36(fp)
80204294:	10c01217 	ldw	r3,72(r2)
80204298:	e0800117 	ldw	r2,4(fp)
8020429c:	18801936 	bltu	r3,r2,80204304 <msgdma_construct_extended_descriptor+0xb8>
802042a0:	e13ff717 	ldw	r4,-36(fp)
802042a4:	20801317 	ldw	r2,76(r4)
802042a8:	20c01417 	ldw	r3,80(r4)
802042ac:	e13ffe0b 	ldhu	r4,-8(fp)
802042b0:	213fffcc 	andi	r4,r4,65535
802042b4:	2015883a 	mov	r10,r4
802042b8:	0017883a 	mov	r11,zero
802042bc:	1ac01136 	bltu	r3,r11,80204304 <msgdma_construct_extended_descriptor+0xb8>
802042c0:	58c0011e 	bne	r11,r3,802042c8 <msgdma_construct_extended_descriptor+0x7c>
802042c4:	12800f36 	bltu	r2,r10,80204304 <msgdma_construct_extended_descriptor+0xb8>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
802042c8:	e13ff717 	ldw	r4,-36(fp)
802042cc:	20801317 	ldw	r2,76(r4)
802042d0:	20c01417 	ldw	r3,80(r4)
802042d4:	e13fff0b 	ldhu	r4,-4(fp)
802042d8:	213fffcc 	andi	r4,r4,65535
802042dc:	2011883a 	mov	r8,r4
802042e0:	0013883a 	mov	r9,zero
802042e4:	1a400736 	bltu	r3,r9,80204304 <msgdma_construct_extended_descriptor+0xb8>
802042e8:	48c0011e 	bne	r9,r3,802042f0 <msgdma_construct_extended_descriptor+0xa4>
802042ec:	12000536 	bltu	r2,r8,80204304 <msgdma_construct_extended_descriptor+0xb8>
802042f0:	e0bff717 	ldw	r2,-36(fp)
802042f4:	10801703 	ldbu	r2,92(r2)
802042f8:	10803fcc 	andi	r2,r2,255
802042fc:	10800060 	cmpeqi	r2,r2,1
80204300:	1000021e 	bne	r2,zero,8020430c <msgdma_construct_extended_descriptor+0xc0>
		return -EINVAL;
80204304:	00bffa84 	movi	r2,-22
80204308:	00002306 	br	80204398 <msgdma_construct_extended_descriptor+0x14c>
	}

	descriptor->read_address_low = read_address;
8020430c:	e0bff817 	ldw	r2,-32(fp)
80204310:	e0fff917 	ldw	r3,-28(fp)
80204314:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
80204318:	e0bff817 	ldw	r2,-32(fp)
8020431c:	e0fffa17 	ldw	r3,-24(fp)
80204320:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
80204324:	e0bff817 	ldw	r2,-32(fp)
80204328:	e0c00117 	ldw	r3,4(fp)
8020432c:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
80204330:	e0bff817 	ldw	r2,-32(fp)
80204334:	e0fffb0b 	ldhu	r3,-20(fp)
80204338:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
8020433c:	e0bff817 	ldw	r2,-32(fp)
80204340:	e0fffc03 	ldbu	r3,-16(fp)
80204344:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
80204348:	e0bff817 	ldw	r2,-32(fp)
8020434c:	e0fffd03 	ldbu	r3,-12(fp)
80204350:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
80204354:	e0bff817 	ldw	r2,-32(fp)
80204358:	e0fffe0b 	ldhu	r3,-8(fp)
8020435c:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
80204360:	e0bff817 	ldw	r2,-32(fp)
80204364:	e0ffff0b 	ldhu	r3,-4(fp)
80204368:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
8020436c:	e0bff817 	ldw	r2,-32(fp)
80204370:	e0c00317 	ldw	r3,12(fp)
80204374:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
80204378:	e0bff817 	ldw	r2,-32(fp)
8020437c:	e0c00417 	ldw	r3,16(fp)
80204380:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80204384:	e0800217 	ldw	r2,8(fp)
80204388:	10e00034 	orhi	r3,r2,32768
8020438c:	e0bff817 	ldw	r2,-32(fp)
80204390:	10c00715 	stw	r3,28(r2)

	return 0;
80204394:	0005883a 	mov	r2,zero

}
80204398:	e037883a 	mov	sp,fp
8020439c:	df000017 	ldw	fp,0(sp)
802043a0:	dec00104 	addi	sp,sp,4
802043a4:	f800283a 	ret

802043a8 <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
802043a8:	defff004 	addi	sp,sp,-64
802043ac:	dfc00f15 	stw	ra,60(sp)
802043b0:	df000e15 	stw	fp,56(sp)
802043b4:	df000e04 	addi	fp,sp,56
802043b8:	e13ffd15 	stw	r4,-12(fp)
802043bc:	e17ffe15 	stw	r5,-8(fp)
802043c0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
802043c4:	e03ff315 	stw	zero,-52(fp)
	alt_irq_context context = 0;
802043c8:	e03ff415 	stw	zero,-48(fp)
	alt_u16 counter = 0;
802043cc:	e03ff20d 	sth	zero,-56(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
802043d0:	e0bffd17 	ldw	r2,-12(fp)
802043d4:	10800317 	ldw	r2,12(r2)
802043d8:	10800204 	addi	r2,r2,8
802043dc:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
802043e0:	10bfffcc 	andi	r2,r2,65535
802043e4:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
802043e8:	e0bffd17 	ldw	r2,-12(fp)
802043ec:	10800317 	ldw	r2,12(r2)
802043f0:	10800204 	addi	r2,r2,8
802043f4:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
802043f8:	1004d43a 	srli	r2,r2,16
802043fc:	e0bff615 	stw	r2,-40(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80204400:	e0bffd17 	ldw	r2,-12(fp)
80204404:	10800917 	ldw	r2,36(r2)
80204408:	e0fff617 	ldw	r3,-40(fp)
8020440c:	1880042e 	bgeu	r3,r2,80204420 <msgdma_descriptor_async_transfer+0x78>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
80204410:	e0bffd17 	ldw	r2,-12(fp)
80204414:	10800917 	ldw	r2,36(r2)
80204418:	e0fff517 	ldw	r3,-44(fp)
8020441c:	18800236 	bltu	r3,r2,80204428 <msgdma_descriptor_async_transfer+0x80>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
80204420:	00bff904 	movi	r2,-28
80204424:	00007d06 	br	8020461c <msgdma_descriptor_async_transfer+0x274>
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80204428:	00800804 	movi	r2,32
8020442c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204430:	0005303a 	rdctl	r2,status
80204434:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204438:	e0fff717 	ldw	r3,-36(fp)
8020443c:	00bfff84 	movi	r2,-2
80204440:	1884703a 	and	r2,r3,r2
80204444:	1001703a 	wrctl	status,r2
  
  return context;
80204448:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8020444c:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80204450:	e0bffd17 	ldw	r2,-12(fp)
80204454:	10800317 	ldw	r2,12(r2)
80204458:	10800104 	addi	r2,r2,4
8020445c:	e0fff317 	ldw	r3,-52(fp)
80204460:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80204464:	e0bffd17 	ldw	r2,-12(fp)
80204468:	10800317 	ldw	r2,12(r2)
8020446c:	e0fffd17 	ldw	r3,-12(fp)
80204470:	18c00317 	ldw	r3,12(r3)
80204474:	18c00037 	ldwio	r3,0(r3)
80204478:	10c00035 	stwio	r3,0(r2)
8020447c:	e0bff417 	ldw	r2,-48(fp)
80204480:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204484:	e0bffc17 	ldw	r2,-16(fp)
80204488:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
8020448c:	e0bffe17 	ldw	r2,-8(fp)
80204490:	10000826 	beq	r2,zero,802044b4 <msgdma_descriptor_async_transfer+0x10c>
80204494:	e0bfff17 	ldw	r2,-4(fp)
80204498:	1000061e 	bne	r2,zero,802044b4 <msgdma_descriptor_async_transfer+0x10c>
		counter = 0; /* reset counter */
8020449c:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#if DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
802044a0:	012008b4 	movhi	r4,32802
802044a4:	2132da04 	addi	r4,r4,-13464
802044a8:	020654c0 	call	8020654c <puts>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
802044ac:	00bff084 	movi	r2,-62
802044b0:	00005a06 	br	8020461c <msgdma_descriptor_async_transfer+0x274>
	} else if (NULL == standard_desc && NULL != extended_desc) {
802044b4:	e0bffe17 	ldw	r2,-8(fp)
802044b8:	10001b1e 	bne	r2,zero,80204528 <msgdma_descriptor_async_transfer+0x180>
802044bc:	e0bfff17 	ldw	r2,-4(fp)
802044c0:	10001926 	beq	r2,zero,80204528 <msgdma_descriptor_async_transfer+0x180>
		counter = 0; /* reset counter */
802044c4:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
802044c8:	00000d06 	br	80204500 <msgdma_descriptor_async_transfer+0x158>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
802044cc:	01000044 	movi	r4,1
802044d0:	021623c0 	call	8021623c <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
802044d4:	e0bff20b 	ldhu	r2,-56(fp)
802044d8:	1084e230 	cmpltui	r2,r2,5000
802044dc:	1000051e 	bne	r2,zero,802044f4 <msgdma_descriptor_async_transfer+0x14c>
			{
				#if DEBUG_ON
					debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing extended descriptor\n");
802044e0:	012008b4 	movhi	r4,32802
802044e4:	2132e204 	addi	r4,r4,-13432
802044e8:	020654c0 	call	8020654c <puts>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
802044ec:	00bff084 	movi	r2,-62
802044f0:	00004a06 	br	8020461c <msgdma_descriptor_async_transfer+0x274>
			}
			counter++;
802044f4:	e0bff20b 	ldhu	r2,-56(fp)
802044f8:	10800044 	addi	r2,r2,1
802044fc:	e0bff20d 	sth	r2,-56(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
80204500:	e0bffd17 	ldw	r2,-12(fp)
80204504:	10c00317 	ldw	r3,12(r2)
80204508:	e0bffd17 	ldw	r2,-12(fp)
8020450c:	10800417 	ldw	r2,16(r2)
80204510:	e1bfff17 	ldw	r6,-4(fp)
80204514:	100b883a 	mov	r5,r2
80204518:	1809883a 	mov	r4,r3
8020451c:	02041180 	call	80204118 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80204520:	103fea1e 	bne	r2,zero,802044cc <__reset+0xfa1e44cc>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
80204524:	00000206 	br	80204530 <msgdma_descriptor_async_transfer+0x188>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
80204528:	00bfffc4 	movi	r2,-1
8020452c:	00003b06 	br	8020461c <msgdma_descriptor_async_transfer+0x274>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
80204530:	e0bffd17 	ldw	r2,-12(fp)
80204534:	10800b17 	ldw	r2,44(r2)
80204538:	10001c26 	beq	r2,zero,802045ac <msgdma_descriptor_async_transfer+0x204>

		control |= (dev->control |
8020453c:	e0bffd17 	ldw	r2,-12(fp)
80204540:	10c00d17 	ldw	r3,52(r2)
80204544:	e0bff317 	ldw	r2,-52(fp)
80204548:	1884b03a 	or	r2,r3,r2
8020454c:	10800514 	ori	r2,r2,20
80204550:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80204554:	e0fff317 	ldw	r3,-52(fp)
80204558:	00bff7c4 	movi	r2,-33
8020455c:	1884703a 	and	r2,r3,r2
80204560:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204564:	0005303a 	rdctl	r2,status
80204568:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020456c:	e0fff917 	ldw	r3,-28(fp)
80204570:	00bfff84 	movi	r2,-2
80204574:	1884703a 	and	r2,r3,r2
80204578:	1001703a 	wrctl	status,r2
  
  return context;
8020457c:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
80204580:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80204584:	e0bffd17 	ldw	r2,-12(fp)
80204588:	10800317 	ldw	r2,12(r2)
8020458c:	10800104 	addi	r2,r2,4
80204590:	e0fff317 	ldw	r3,-52(fp)
80204594:	10c00035 	stwio	r3,0(r2)
80204598:	e0bff417 	ldw	r2,-48(fp)
8020459c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802045a0:	e0bffb17 	ldw	r2,-20(fp)
802045a4:	1001703a 	wrctl	status,r2
802045a8:	00001b06 	br	80204618 <msgdma_descriptor_async_transfer+0x270>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
802045ac:	e0bffd17 	ldw	r2,-12(fp)
802045b0:	10c00d17 	ldw	r3,52(r2)
802045b4:	e0bff317 	ldw	r2,-52(fp)
802045b8:	1884b03a 	or	r2,r3,r2
802045bc:	10800114 	ori	r2,r2,4
802045c0:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
802045c4:	e0fff317 	ldw	r3,-52(fp)
802045c8:	00bff3c4 	movi	r2,-49
802045cc:	1884703a 	and	r2,r3,r2
802045d0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802045d4:	0005303a 	rdctl	r2,status
802045d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802045dc:	e0fffa17 	ldw	r3,-24(fp)
802045e0:	00bfff84 	movi	r2,-2
802045e4:	1884703a 	and	r2,r3,r2
802045e8:	1001703a 	wrctl	status,r2
  
  return context;
802045ec:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
802045f0:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
802045f4:	e0bffd17 	ldw	r2,-12(fp)
802045f8:	10800317 	ldw	r2,12(r2)
802045fc:	10800104 	addi	r2,r2,4
80204600:	e0fff317 	ldw	r3,-52(fp)
80204604:	10c00035 	stwio	r3,0(r2)
80204608:	e0bff417 	ldw	r2,-48(fp)
8020460c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204610:	e0bff817 	ldw	r2,-32(fp)
80204614:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
80204618:	0005883a 	mov	r2,zero
}
8020461c:	e037883a 	mov	sp,fp
80204620:	dfc00117 	ldw	ra,4(sp)
80204624:	df000017 	ldw	fp,0(sp)
80204628:	dec00204 	addi	sp,sp,8
8020462c:	f800283a 	ret

80204630 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
80204630:	defff004 	addi	sp,sp,-64
80204634:	dfc00f15 	stw	ra,60(sp)
80204638:	df000e15 	stw	fp,56(sp)
8020463c:	df000e04 	addi	fp,sp,56
80204640:	e13ffd15 	stw	r4,-12(fp)
80204644:	e17ffe15 	stw	r5,-8(fp)
80204648:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
8020464c:	e03ff615 	stw	zero,-40(fp)
	alt_irq_context context = 0;
80204650:	e03ff715 	stw	zero,-36(fp)
	alt_u32 csr_status = 0;
80204654:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
80204658:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8020465c:	e0bffd17 	ldw	r2,-12(fp)
80204660:	10800317 	ldw	r2,12(r2)
80204664:	10800204 	addi	r2,r2,8
80204668:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
8020466c:	10bfffcc 	andi	r2,r2,65535
80204670:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80204674:	e0bffd17 	ldw	r2,-12(fp)
80204678:	10800317 	ldw	r2,12(r2)
8020467c:	10800204 	addi	r2,r2,8
80204680:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
80204684:	1004d43a 	srli	r2,r2,16
80204688:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
8020468c:	00807804 	movi	r2,480
80204690:	e0bff815 	stw	r2,-32(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80204694:	00002006 	br	80204718 <msgdma_descriptor_sync_transfer+0xe8>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
80204698:	01000044 	movi	r4,1
8020469c:	021623c0 	call	8021623c <alt_busy_sleep>
#if DEBUG_ON
		fprintf(fp,"\n-- DMA can't write in the descriptor \n ");
802046a0:	d0a01b17 	ldw	r2,-32660(gp)
802046a4:	100f883a 	mov	r7,r2
802046a8:	01800a04 	movi	r6,40
802046ac:	01400044 	movi	r5,1
802046b0:	012008b4 	movhi	r4,32802
802046b4:	2132f804 	addi	r4,r4,-13344
802046b8:	02062a40 	call	802062a4 <fwrite>
#endif
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
802046bc:	e0bff30b 	ldhu	r2,-52(fp)
802046c0:	1084e230 	cmpltui	r2,r2,5000
802046c4:	1000051e 	bne	r2,zero,802046dc <msgdma_descriptor_sync_transfer+0xac>
		{
#if DEBUG_ON
		debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
802046c8:	012008b4 	movhi	r4,32802
802046cc:	21330304 	addi	r4,r4,-13300
802046d0:	020654c0 	call	8020654c <puts>
#endif
			return -ETIME;
802046d4:	00bff084 	movi	r2,-62
802046d8:	0000a206 	br	80204964 <msgdma_descriptor_sync_transfer+0x334>
		}
		counter++;
802046dc:	e0bff30b 	ldhu	r2,-52(fp)
802046e0:	10800044 	addi	r2,r2,1
802046e4:	e0bff30d 	sth	r2,-52(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
802046e8:	e0bffd17 	ldw	r2,-12(fp)
802046ec:	10800317 	ldw	r2,12(r2)
802046f0:	10800204 	addi	r2,r2,8
802046f4:	10800037 	ldwio	r2,0(r2)
		debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
802046f8:	10bfffcc 	andi	r2,r2,65535
802046fc:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80204700:	e0bffd17 	ldw	r2,-12(fp)
80204704:	10800317 	ldw	r2,12(r2)
80204708:	10800204 	addi	r2,r2,8
8020470c:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
80204710:	1004d43a 	srli	r2,r2,16
80204714:	e0bff515 	stw	r2,-44(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80204718:	e0bffd17 	ldw	r2,-12(fp)
8020471c:	10800917 	ldw	r2,36(r2)
80204720:	e0fff517 	ldw	r3,-44(fp)
80204724:	18bfdc2e 	bgeu	r3,r2,80204698 <__reset+0xfa1e4698>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
80204728:	e0bffd17 	ldw	r2,-12(fp)
8020472c:	10800917 	ldw	r2,36(r2)
80204730:	e0fff417 	ldw	r3,-48(fp)
80204734:	18bfd82e 	bgeu	r3,r2,80204698 <__reset+0xfa1e4698>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204738:	0005303a 	rdctl	r2,status
8020473c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204740:	e0fffc17 	ldw	r3,-16(fp)
80204744:	00bfff84 	movi	r2,-2
80204748:	1884703a 	and	r2,r3,r2
8020474c:	1001703a 	wrctl	status,r2
  
  return context;
80204750:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80204754:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80204758:	e0bffd17 	ldw	r2,-12(fp)
8020475c:	10800317 	ldw	r2,12(r2)
80204760:	10800104 	addi	r2,r2,4
80204764:	00c00804 	movi	r3,32
80204768:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8020476c:	e0bffd17 	ldw	r2,-12(fp)
80204770:	10800317 	ldw	r2,12(r2)
80204774:	e0fffd17 	ldw	r3,-12(fp)
80204778:	18c00317 	ldw	r3,12(r3)
8020477c:	18c00037 	ldwio	r3,0(r3)
80204780:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
80204784:	e0bffe17 	ldw	r2,-8(fp)
80204788:	10000826 	beq	r2,zero,802047ac <msgdma_descriptor_sync_transfer+0x17c>
8020478c:	e0bfff17 	ldw	r2,-4(fp)
80204790:	1000061e 	bne	r2,zero,802047ac <msgdma_descriptor_sync_transfer+0x17c>
		counter = 0; /* reset counter */
80204794:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		#if DEBUG_ON
			debug(fp, "invalid dma descriptor option\n");
80204798:	012008b4 	movhi	r4,32802
8020479c:	2132da04 	addi	r4,r4,-13464
802047a0:	020654c0 	call	8020654c <puts>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
802047a4:	00bff084 	movi	r2,-62
802047a8:	00006e06 	br	80204964 <msgdma_descriptor_sync_transfer+0x334>
	} else if (NULL == standard_desc && NULL != extended_desc) {
802047ac:	e0bffe17 	ldw	r2,-8(fp)
802047b0:	10001b1e 	bne	r2,zero,80204820 <msgdma_descriptor_sync_transfer+0x1f0>
802047b4:	e0bfff17 	ldw	r2,-4(fp)
802047b8:	10001926 	beq	r2,zero,80204820 <msgdma_descriptor_sync_transfer+0x1f0>
		counter = 0; /* reset counter */
802047bc:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
802047c0:	00000d06 	br	802047f8 <msgdma_descriptor_sync_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
802047c4:	01000044 	movi	r4,1
802047c8:	021623c0 	call	8021623c <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
802047cc:	e0bff30b 	ldhu	r2,-52(fp)
802047d0:	1084e230 	cmpltui	r2,r2,5000
802047d4:	1000051e 	bne	r2,zero,802047ec <msgdma_descriptor_sync_transfer+0x1bc>
			{
				#if DEBUG_ON
					debug(fp, "time out after 5 msec while writing extended descriptor to FIFO\n");
802047d8:	012008b4 	movhi	r4,32802
802047dc:	21331604 	addi	r4,r4,-13224
802047e0:	020654c0 	call	8020654c <puts>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
802047e4:	00bff084 	movi	r2,-62
802047e8:	00005e06 	br	80204964 <msgdma_descriptor_sync_transfer+0x334>
			}
			counter++;
802047ec:	e0bff30b 	ldhu	r2,-52(fp)
802047f0:	10800044 	addi	r2,r2,1
802047f4:	e0bff30d 	sth	r2,-52(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
802047f8:	e0bffd17 	ldw	r2,-12(fp)
802047fc:	10c00317 	ldw	r3,12(r2)
80204800:	e0bffd17 	ldw	r2,-12(fp)
80204804:	10800417 	ldw	r2,16(r2)
80204808:	e1bfff17 	ldw	r6,-4(fp)
8020480c:	100b883a 	mov	r5,r2
80204810:	1809883a 	mov	r4,r3
80204814:	02041180 	call	80204118 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80204818:	103fea1e 	bne	r2,zero,802047c4 <__reset+0xfa1e47c4>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
8020481c:	00000206 	br	80204828 <msgdma_descriptor_sync_transfer+0x1f8>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
80204820:	00bfffc4 	movi	r2,-1
80204824:	00004f06 	br	80204964 <msgdma_descriptor_sync_transfer+0x334>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80204828:	e0bffd17 	ldw	r2,-12(fp)
8020482c:	10800317 	ldw	r2,12(r2)
80204830:	10800104 	addi	r2,r2,4
80204834:	e0fffd17 	ldw	r3,-12(fp)
80204838:	19000d17 	ldw	r4,52(r3)
8020483c:	00fff2c4 	movi	r3,-53
80204840:	20c6703a 	and	r3,r4,r3
80204844:	18c00114 	ori	r3,r3,4
80204848:	10c00035 	stwio	r3,0(r2)
8020484c:	e0bff717 	ldw	r2,-36(fp)
80204850:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204854:	e0bffb17 	ldw	r2,-20(fp)
80204858:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
8020485c:	e03ff30d 	sth	zero,-52(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80204860:	e0bffd17 	ldw	r2,-12(fp)
80204864:	10800317 	ldw	r2,12(r2)
80204868:	10800037 	ldwio	r2,0(r2)
8020486c:	e0bff215 	stw	r2,-56(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
80204870:	00001106 	br	802048b8 <msgdma_descriptor_sync_transfer+0x288>
		alt_busy_sleep(1); /* delay 1us */
80204874:	01000044 	movi	r4,1
80204878:	021623c0 	call	8021623c <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8020487c:	e0bff30b 	ldhu	r2,-52(fp)
80204880:	1084e230 	cmpltui	r2,r2,5000
80204884:	1000051e 	bne	r2,zero,8020489c <msgdma_descriptor_sync_transfer+0x26c>
		{
			#if DEBUG_ON
				debug(fp, "time out after 5 msec while waiting for any pending transfer complete\n");
80204888:	012008b4 	movhi	r4,32802
8020488c:	21332604 	addi	r4,r4,-13160
80204890:	020654c0 	call	8020654c <puts>
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);

			return -ETIME;
80204894:	00bff084 	movi	r2,-62
80204898:	00003206 	br	80204964 <msgdma_descriptor_sync_transfer+0x334>
		}
		counter++;
8020489c:	e0bff30b 	ldhu	r2,-52(fp)
802048a0:	10800044 	addi	r2,r2,1
802048a4:	e0bff30d 	sth	r2,-52(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
802048a8:	e0bffd17 	ldw	r2,-12(fp)
802048ac:	10800317 	ldw	r2,12(r2)
802048b0:	10800037 	ldwio	r2,0(r2)
802048b4:	e0bff215 	stw	r2,-56(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
802048b8:	e0fff217 	ldw	r3,-56(fp)
802048bc:	e0bff817 	ldw	r2,-32(fp)
802048c0:	1884703a 	and	r2,r3,r2
802048c4:	1000031e 	bne	r2,zero,802048d4 <msgdma_descriptor_sync_transfer+0x2a4>
802048c8:	e0bff217 	ldw	r2,-56(fp)
802048cc:	1080004c 	andi	r2,r2,1
802048d0:	103fe81e 	bne	r2,zero,80204874 <__reset+0xfa1e4874>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
802048d4:	e0fff217 	ldw	r3,-56(fp)
802048d8:	e0bff817 	ldw	r2,-32(fp)
802048dc:	1884703a 	and	r2,r3,r2
802048e0:	10000226 	beq	r2,zero,802048ec <msgdma_descriptor_sync_transfer+0x2bc>
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return error;
802048e4:	e0bff817 	ldw	r2,-32(fp)
802048e8:	00001e06 	br	80204964 <msgdma_descriptor_sync_transfer+0x334>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
802048ec:	e0bffd17 	ldw	r2,-12(fp)
802048f0:	10800317 	ldw	r2,12(r2)
802048f4:	10800104 	addi	r2,r2,4
802048f8:	10800037 	ldwio	r2,0(r2)
802048fc:	10800814 	ori	r2,r2,32
80204900:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204904:	0005303a 	rdctl	r2,status
80204908:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020490c:	e0fff917 	ldw	r3,-28(fp)
80204910:	00bfff84 	movi	r2,-2
80204914:	1884703a 	and	r2,r3,r2
80204918:	1001703a 	wrctl	status,r2
  
  return context;
8020491c:	e0bff917 	ldw	r2,-28(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80204920:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80204924:	e0bffd17 	ldw	r2,-12(fp)
80204928:	10800317 	ldw	r2,12(r2)
8020492c:	10800104 	addi	r2,r2,4
80204930:	e0fff617 	ldw	r3,-40(fp)
80204934:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80204938:	e0bffd17 	ldw	r2,-12(fp)
8020493c:	10800317 	ldw	r2,12(r2)
80204940:	e0fffd17 	ldw	r3,-12(fp)
80204944:	18c00317 	ldw	r3,12(r3)
80204948:	18c00037 	ldwio	r3,0(r3)
8020494c:	10c00035 	stwio	r3,0(r2)
80204950:	e0bff717 	ldw	r2,-36(fp)
80204954:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204958:	e0bffa17 	ldw	r2,-24(fp)
8020495c:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
80204960:	0005883a 	mov	r2,zero

}
80204964:	e037883a 	mov	sp,fp
80204968:	dfc00117 	ldw	ra,4(sp)
8020496c:	df000017 	ldw	fp,0(sp)
80204970:	dec00204 	addi	sp,sp,8
80204974:	f800283a 	ret

80204978 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
80204978:	deffec04 	addi	sp,sp,-80
8020497c:	dfc01315 	stw	ra,76(sp)
80204980:	df001215 	stw	fp,72(sp)
80204984:	df001204 	addi	fp,sp,72
80204988:	e13ff715 	stw	r4,-36(fp)
8020498c:	e17ff815 	stw	r5,-32(fp)
80204990:	e1bff915 	stw	r6,-28(fp)
80204994:	e1fffa15 	stw	r7,-24(fp)
80204998:	e1800617 	ldw	r6,24(fp)
8020499c:	e1400717 	ldw	r5,28(fp)
802049a0:	e1000817 	ldw	r4,32(fp)
802049a4:	e0c00917 	ldw	r3,36(fp)
802049a8:	e0800a17 	ldw	r2,40(fp)
802049ac:	e1bffb0d 	sth	r6,-20(fp)
802049b0:	e17ffc05 	stb	r5,-16(fp)
802049b4:	e13ffd05 	stb	r4,-12(fp)
802049b8:	e0fffe0d 	sth	r3,-8(fp)
802049bc:	e0bfff0d 	sth	r2,-4(fp)

	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
802049c0:	e0bffb0b 	ldhu	r2,-20(fp)
802049c4:	e0fffc03 	ldbu	r3,-16(fp)
802049c8:	e13ffd03 	ldbu	r4,-12(fp)
802049cc:	e17ffe0b 	ldhu	r5,-8(fp)
802049d0:	e1bfff0b 	ldhu	r6,-4(fp)
802049d4:	d9800815 	stw	r6,32(sp)
802049d8:	d9400715 	stw	r5,28(sp)
802049dc:	d9000615 	stw	r4,24(sp)
802049e0:	d8c00515 	stw	r3,20(sp)
802049e4:	d8800415 	stw	r2,16(sp)
802049e8:	e0800517 	ldw	r2,20(fp)
802049ec:	d8800315 	stw	r2,12(sp)
802049f0:	e0800417 	ldw	r2,16(fp)
802049f4:	d8800215 	stw	r2,8(sp)
802049f8:	e0800317 	ldw	r2,12(fp)
802049fc:	d8800115 	stw	r2,4(sp)
80204a00:	e0800217 	ldw	r2,8(fp)
80204a04:	d8800015 	stw	r2,0(sp)
80204a08:	e1fffa17 	ldw	r7,-24(fp)
80204a0c:	e1bff917 	ldw	r6,-28(fp)
80204a10:	e17ff817 	ldw	r5,-32(fp)
80204a14:	e13ff717 	ldw	r4,-36(fp)
80204a18:	020424c0 	call	8020424c <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
80204a1c:	e037883a 	mov	sp,fp
80204a20:	dfc00117 	ldw	ra,4(sp)
80204a24:	df000017 	ldw	fp,0(sp)
80204a28:	dec00204 	addi	sp,sp,8
80204a2c:	f800283a 	ret

80204a30 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
80204a30:	defffc04 	addi	sp,sp,-16
80204a34:	dfc00315 	stw	ra,12(sp)
80204a38:	df000215 	stw	fp,8(sp)
80204a3c:	df000204 	addi	fp,sp,8
80204a40:	e13ffe15 	stw	r4,-8(fp)
80204a44:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
80204a48:	e1bfff17 	ldw	r6,-4(fp)
80204a4c:	000b883a 	mov	r5,zero
80204a50:	e13ffe17 	ldw	r4,-8(fp)
80204a54:	02043a80 	call	802043a8 <msgdma_descriptor_async_transfer>
}
80204a58:	e037883a 	mov	sp,fp
80204a5c:	dfc00117 	ldw	ra,4(sp)
80204a60:	df000017 	ldw	fp,0(sp)
80204a64:	dec00204 	addi	sp,sp,8
80204a68:	f800283a 	ret

80204a6c <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
80204a6c:	defffc04 	addi	sp,sp,-16
80204a70:	dfc00315 	stw	ra,12(sp)
80204a74:	df000215 	stw	fp,8(sp)
80204a78:	df000204 	addi	fp,sp,8
80204a7c:	e13ffe15 	stw	r4,-8(fp)
80204a80:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
80204a84:	e1bfff17 	ldw	r6,-4(fp)
80204a88:	000b883a 	mov	r5,zero
80204a8c:	e13ffe17 	ldw	r4,-8(fp)
80204a90:	02046300 	call	80204630 <msgdma_descriptor_sync_transfer>
}
80204a94:	e037883a 	mov	sp,fp
80204a98:	dfc00117 	ldw	ra,4(sp)
80204a9c:	df000017 	ldw	fp,0(sp)
80204aa0:	dec00204 	addi	sp,sp,8
80204aa4:	f800283a 	ret

80204aa8 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
80204aa8:	defff204 	addi	sp,sp,-56
80204aac:	dfc00d15 	stw	ra,52(sp)
80204ab0:	df000c15 	stw	fp,48(sp)
80204ab4:	df000c04 	addi	fp,sp,48
80204ab8:	2007883a 	mov	r3,r4
80204abc:	2805883a 	mov	r2,r5
80204ac0:	e1bffe15 	stw	r6,-8(fp)
80204ac4:	e1ffff15 	stw	r7,-4(fp)
80204ac8:	e0fffc05 	stb	r3,-16(fp)
80204acc:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
80204ad0:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
80204ad4:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
80204ad8:	008003f4 	movhi	r2,15
80204adc:	10909004 	addi	r2,r2,16960
80204ae0:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
80204ae4:	00bfe004 	movi	r2,-128
80204ae8:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
80204aec:	e0bffe17 	ldw	r2,-8(fp)
80204af0:	10000226 	beq	r2,zero,80204afc <POWER_SPI_RW+0x54>
80204af4:	00800804 	movi	r2,32
80204af8:	00000106 	br	80204b00 <POWER_SPI_RW+0x58>
80204afc:	0005883a 	mov	r2,zero
80204b00:	e0fff403 	ldbu	r3,-48(fp)
80204b04:	10c4b03a 	or	r2,r2,r3
80204b08:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
80204b0c:	e0800217 	ldw	r2,8(fp)
80204b10:	10000226 	beq	r2,zero,80204b1c <POWER_SPI_RW+0x74>
80204b14:	00800404 	movi	r2,16
80204b18:	00000106 	br	80204b20 <POWER_SPI_RW+0x78>
80204b1c:	0005883a 	mov	r2,zero
80204b20:	e0fff403 	ldbu	r3,-48(fp)
80204b24:	10c4b03a 	or	r2,r2,r3
80204b28:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
80204b2c:	e0bfff17 	ldw	r2,-4(fp)
80204b30:	10000226 	beq	r2,zero,80204b3c <POWER_SPI_RW+0x94>
80204b34:	00800204 	movi	r2,8
80204b38:	00000106 	br	80204b40 <POWER_SPI_RW+0x98>
80204b3c:	0005883a 	mov	r2,zero
80204b40:	e0fff403 	ldbu	r3,-48(fp)
80204b44:	10c4b03a 	or	r2,r2,r3
80204b48:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
80204b4c:	e0bffd03 	ldbu	r2,-12(fp)
80204b50:	108001cc 	andi	r2,r2,7
80204b54:	1007883a 	mov	r3,r2
80204b58:	e0bff403 	ldbu	r2,-48(fp)
80204b5c:	1884b03a 	or	r2,r3,r2
80204b60:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
80204b64:	0007883a 	mov	r3,zero
80204b68:	00a04034 	movhi	r2,33024
80204b6c:	10813404 	addi	r2,r2,1232
80204b70:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
80204b74:	0007883a 	mov	r3,zero
80204b78:	00a04034 	movhi	r2,33024
80204b7c:	10813c04 	addi	r2,r2,1264
80204b80:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
80204b84:	e0bffc03 	ldbu	r2,-16(fp)
80204b88:	1000021e 	bne	r2,zero,80204b94 <POWER_SPI_RW+0xec>
80204b8c:	00c00084 	movi	r3,2
80204b90:	00000106 	br	80204b98 <POWER_SPI_RW+0xf0>
80204b94:	00c00044 	movi	r3,1
80204b98:	00a04034 	movhi	r2,33024
80204b9c:	10813804 	addi	r2,r2,1248
80204ba0:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
80204ba4:	010003c4 	movi	r4,15
80204ba8:	0216c4c0 	call	80216c4c <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
80204bac:	00000306 	br	80204bbc <POWER_SPI_RW+0x114>
		nWait++;
80204bb0:	e0bff817 	ldw	r2,-32(fp)
80204bb4:	10800044 	addi	r2,r2,1
80204bb8:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
80204bbc:	00a04034 	movhi	r2,33024
80204bc0:	10814404 	addi	r2,r2,1296
80204bc4:	10800037 	ldwio	r2,0(r2)
80204bc8:	1080004c 	andi	r2,r2,1
80204bcc:	10000326 	beq	r2,zero,80204bdc <POWER_SPI_RW+0x134>
80204bd0:	e0fff817 	ldw	r3,-32(fp)
80204bd4:	e0bffa17 	ldw	r2,-24(fp)
80204bd8:	18bff516 	blt	r3,r2,80204bb0 <__reset+0xfa1e4bb0>
		nWait++;
	}

	if (SPI_SDO) {
80204bdc:	00a04034 	movhi	r2,33024
80204be0:	10814404 	addi	r2,r2,1296
80204be4:	10800037 	ldwio	r2,0(r2)
80204be8:	1080004c 	andi	r2,r2,1
80204bec:	10000626 	beq	r2,zero,80204c08 <POWER_SPI_RW+0x160>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
80204bf0:	00c000c4 	movi	r3,3
80204bf4:	00a04034 	movhi	r2,33024
80204bf8:	10813804 	addi	r2,r2,1248
80204bfc:	10c00035 	stwio	r3,0(r2)
		return FALSE;
80204c00:	0005883a 	mov	r2,zero
80204c04:	0000db06 	br	80204f74 <POWER_SPI_RW+0x4cc>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
80204c08:	e03ff715 	stw	zero,-36(fp)
80204c0c:	00002406 	br	80204ca0 <POWER_SPI_RW+0x1f8>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
80204c10:	e0bff403 	ldbu	r2,-48(fp)
80204c14:	10803fcc 	andi	r2,r2,255
80204c18:	1004d1fa 	srli	r2,r2,7
80204c1c:	10c03fcc 	andi	r3,r2,255
80204c20:	00a04034 	movhi	r2,33024
80204c24:	10814004 	addi	r2,r2,1280
80204c28:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
80204c2c:	e0bff403 	ldbu	r2,-48(fp)
80204c30:	1085883a 	add	r2,r2,r2
80204c34:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
80204c38:	e0bff517 	ldw	r2,-44(fp)
80204c3c:	1085883a 	add	r2,r2,r2
80204c40:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
80204c44:	00a04034 	movhi	r2,33024
80204c48:	10814404 	addi	r2,r2,1296
80204c4c:	10800037 	ldwio	r2,0(r2)
80204c50:	1080004c 	andi	r2,r2,1
80204c54:	1007883a 	mov	r3,r2
80204c58:	e0bff517 	ldw	r2,-44(fp)
80204c5c:	10c4b03a 	or	r2,r2,r3
80204c60:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204c64:	00c00044 	movi	r3,1
80204c68:	00a04034 	movhi	r2,33024
80204c6c:	10813c04 	addi	r2,r2,1264
80204c70:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204c74:	010003c4 	movi	r4,15
80204c78:	0216c4c0 	call	80216c4c <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204c7c:	0007883a 	mov	r3,zero
80204c80:	00a04034 	movhi	r2,33024
80204c84:	10813c04 	addi	r2,r2,1264
80204c88:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204c8c:	010003c4 	movi	r4,15
80204c90:	0216c4c0 	call	80216c4c <usleep>
	if (SPI_SDO) {
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
80204c94:	e0bff717 	ldw	r2,-36(fp)
80204c98:	10800044 	addi	r2,r2,1
80204c9c:	e0bff715 	stw	r2,-36(fp)
80204ca0:	e0bff717 	ldw	r2,-36(fp)
80204ca4:	10800090 	cmplti	r2,r2,2
80204ca8:	103fd91e 	bne	r2,zero,80204c10 <__reset+0xfa1e4c10>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
80204cac:	e03ff715 	stw	zero,-36(fp)
80204cb0:	00002406 	br	80204d44 <POWER_SPI_RW+0x29c>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
80204cb4:	e0bff403 	ldbu	r2,-48(fp)
80204cb8:	10803fcc 	andi	r2,r2,255
80204cbc:	1004d1fa 	srli	r2,r2,7
80204cc0:	10c03fcc 	andi	r3,r2,255
80204cc4:	00a04034 	movhi	r2,33024
80204cc8:	10814004 	addi	r2,r2,1280
80204ccc:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
80204cd0:	e0bff403 	ldbu	r2,-48(fp)
80204cd4:	1085883a 	add	r2,r2,r2
80204cd8:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
80204cdc:	e0bff517 	ldw	r2,-44(fp)
80204ce0:	1085883a 	add	r2,r2,r2
80204ce4:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
80204ce8:	00a04034 	movhi	r2,33024
80204cec:	10814404 	addi	r2,r2,1296
80204cf0:	10800037 	ldwio	r2,0(r2)
80204cf4:	1080004c 	andi	r2,r2,1
80204cf8:	1007883a 	mov	r3,r2
80204cfc:	e0bff517 	ldw	r2,-44(fp)
80204d00:	10c4b03a 	or	r2,r2,r3
80204d04:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204d08:	00c00044 	movi	r3,1
80204d0c:	00a04034 	movhi	r2,33024
80204d10:	10813c04 	addi	r2,r2,1264
80204d14:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204d18:	010003c4 	movi	r4,15
80204d1c:	0216c4c0 	call	80216c4c <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204d20:	0007883a 	mov	r3,zero
80204d24:	00a04034 	movhi	r2,33024
80204d28:	10813c04 	addi	r2,r2,1264
80204d2c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204d30:	010003c4 	movi	r4,15
80204d34:	0216c4c0 	call	80216c4c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
80204d38:	e0bff717 	ldw	r2,-36(fp)
80204d3c:	10800044 	addi	r2,r2,1
80204d40:	e0bff715 	stw	r2,-36(fp)
80204d44:	e0bff717 	ldw	r2,-36(fp)
80204d48:	10800210 	cmplti	r2,r2,8
80204d4c:	103fd91e 	bne	r2,zero,80204cb4 <__reset+0xfa1e4cb4>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
80204d50:	e03ff715 	stw	zero,-36(fp)
80204d54:	00001a06 	br	80204dc0 <POWER_SPI_RW+0x318>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
80204d58:	e0bff517 	ldw	r2,-44(fp)
80204d5c:	1085883a 	add	r2,r2,r2
80204d60:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
80204d64:	00a04034 	movhi	r2,33024
80204d68:	10814404 	addi	r2,r2,1296
80204d6c:	10800037 	ldwio	r2,0(r2)
80204d70:	1080004c 	andi	r2,r2,1
80204d74:	1007883a 	mov	r3,r2
80204d78:	e0bff517 	ldw	r2,-44(fp)
80204d7c:	10c4b03a 	or	r2,r2,r3
80204d80:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204d84:	00c00044 	movi	r3,1
80204d88:	00a04034 	movhi	r2,33024
80204d8c:	10813c04 	addi	r2,r2,1264
80204d90:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204d94:	010003c4 	movi	r4,15
80204d98:	0216c4c0 	call	80216c4c <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204d9c:	0007883a 	mov	r3,zero
80204da0:	00a04034 	movhi	r2,33024
80204da4:	10813c04 	addi	r2,r2,1264
80204da8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204dac:	010003c4 	movi	r4,15
80204db0:	0216c4c0 	call	80216c4c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
80204db4:	e0bff717 	ldw	r2,-36(fp)
80204db8:	10800044 	addi	r2,r2,1
80204dbc:	e0bff715 	stw	r2,-36(fp)
80204dc0:	e0bff717 	ldw	r2,-36(fp)
80204dc4:	10800210 	cmplti	r2,r2,8
80204dc8:	103fe31e 	bne	r2,zero,80204d58 <__reset+0xfa1e4d58>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
80204dcc:	e03ff715 	stw	zero,-36(fp)
80204dd0:	00001a06 	br	80204e3c <POWER_SPI_RW+0x394>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
80204dd4:	e0bff517 	ldw	r2,-44(fp)
80204dd8:	1085883a 	add	r2,r2,r2
80204ddc:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
80204de0:	00a04034 	movhi	r2,33024
80204de4:	10814404 	addi	r2,r2,1296
80204de8:	10800037 	ldwio	r2,0(r2)
80204dec:	1080004c 	andi	r2,r2,1
80204df0:	1007883a 	mov	r3,r2
80204df4:	e0bff517 	ldw	r2,-44(fp)
80204df8:	10c4b03a 	or	r2,r2,r3
80204dfc:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204e00:	00c00044 	movi	r3,1
80204e04:	00a04034 	movhi	r2,33024
80204e08:	10813c04 	addi	r2,r2,1264
80204e0c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204e10:	010003c4 	movi	r4,15
80204e14:	0216c4c0 	call	80216c4c <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204e18:	0007883a 	mov	r3,zero
80204e1c:	00a04034 	movhi	r2,33024
80204e20:	10813c04 	addi	r2,r2,1264
80204e24:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204e28:	010003c4 	movi	r4,15
80204e2c:	0216c4c0 	call	80216c4c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
80204e30:	e0bff717 	ldw	r2,-36(fp)
80204e34:	10800044 	addi	r2,r2,1
80204e38:	e0bff715 	stw	r2,-36(fp)
80204e3c:	e0bff717 	ldw	r2,-36(fp)
80204e40:	10800210 	cmplti	r2,r2,8
80204e44:	103fe31e 	bne	r2,zero,80204dd4 <__reset+0xfa1e4dd4>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
80204e48:	e03ff715 	stw	zero,-36(fp)
80204e4c:	00001a06 	br	80204eb8 <POWER_SPI_RW+0x410>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
80204e50:	e0bff517 	ldw	r2,-44(fp)
80204e54:	1085883a 	add	r2,r2,r2
80204e58:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
80204e5c:	00a04034 	movhi	r2,33024
80204e60:	10814404 	addi	r2,r2,1296
80204e64:	10800037 	ldwio	r2,0(r2)
80204e68:	1080004c 	andi	r2,r2,1
80204e6c:	1007883a 	mov	r3,r2
80204e70:	e0bff517 	ldw	r2,-44(fp)
80204e74:	10c4b03a 	or	r2,r2,r3
80204e78:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204e7c:	00c00044 	movi	r3,1
80204e80:	00a04034 	movhi	r2,33024
80204e84:	10813c04 	addi	r2,r2,1264
80204e88:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204e8c:	010003c4 	movi	r4,15
80204e90:	0216c4c0 	call	80216c4c <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204e94:	0007883a 	mov	r3,zero
80204e98:	00a04034 	movhi	r2,33024
80204e9c:	10813c04 	addi	r2,r2,1264
80204ea0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204ea4:	010003c4 	movi	r4,15
80204ea8:	0216c4c0 	call	80216c4c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
80204eac:	e0bff717 	ldw	r2,-36(fp)
80204eb0:	10800044 	addi	r2,r2,1
80204eb4:	e0bff715 	stw	r2,-36(fp)
80204eb8:	e0bff717 	ldw	r2,-36(fp)
80204ebc:	10800190 	cmplti	r2,r2,6
80204ec0:	103fe31e 	bne	r2,zero,80204e50 <__reset+0xfa1e4e50>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
80204ec4:	00c00044 	movi	r3,1
80204ec8:	00a04034 	movhi	r2,33024
80204ecc:	10813c04 	addi	r2,r2,1264
80204ed0:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
80204ed4:	010003c4 	movi	r4,15
80204ed8:	0216c4c0 	call	80216c4c <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
80204edc:	00c000c4 	movi	r3,3
80204ee0:	00a04034 	movhi	r2,33024
80204ee4:	10813804 	addi	r2,r2,1248
80204ee8:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
80204eec:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
80204ef0:	00800044 	movi	r2,1
80204ef4:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
80204ef8:	e03ff715 	stw	zero,-36(fp)
80204efc:	00000d06 	br	80204f34 <POWER_SPI_RW+0x48c>
		if ((Value32 & Mask32) == 0x00) {
80204f00:	e0fff517 	ldw	r3,-44(fp)
80204f04:	e0bff617 	ldw	r2,-40(fp)
80204f08:	1884703a 	and	r2,r3,r2
80204f0c:	1000031e 	bne	r2,zero,80204f1c <POWER_SPI_RW+0x474>
			nZeroCnt++;
80204f10:	e0bff917 	ldw	r2,-28(fp)
80204f14:	10800044 	addi	r2,r2,1
80204f18:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
80204f1c:	e0bff617 	ldw	r2,-40(fp)
80204f20:	1085883a 	add	r2,r2,r2
80204f24:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
80204f28:	e0bff717 	ldw	r2,-36(fp)
80204f2c:	10800044 	addi	r2,r2,1
80204f30:	e0bff715 	stw	r2,-36(fp)
80204f34:	e0bff717 	ldw	r2,-36(fp)
80204f38:	10800810 	cmplti	r2,r2,32
80204f3c:	103ff01e 	bne	r2,zero,80204f00 <__reset+0xfa1e4f00>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
80204f40:	e0bff917 	ldw	r2,-28(fp)
80204f44:	1080004c 	andi	r2,r2,1
80204f48:	1005003a 	cmpeq	r2,r2,zero
80204f4c:	10803fcc 	andi	r2,r2,255
80204f50:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
80204f54:	e0bffb17 	ldw	r2,-20(fp)
80204f58:	1000021e 	bne	r2,zero,80204f64 <POWER_SPI_RW+0x4bc>
		return FALSE;
80204f5c:	0005883a 	mov	r2,zero
80204f60:	00000406 	br	80204f74 <POWER_SPI_RW+0x4cc>
	}

	*pValue = Value32;
80204f64:	e0800317 	ldw	r2,12(fp)
80204f68:	e0fff517 	ldw	r3,-44(fp)
80204f6c:	10c00015 	stw	r3,0(r2)

	return bSuccess;
80204f70:	e0bffb17 	ldw	r2,-20(fp)
}
80204f74:	e037883a 	mov	sp,fp
80204f78:	dfc00117 	ldw	ra,4(sp)
80204f7c:	df000017 	ldw	fp,0(sp)
80204f80:	dec00204 	addi	sp,sp,8
80204f84:	f800283a 	ret

80204f88 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
80204f88:	defffd04 	addi	sp,sp,-12
80204f8c:	df000215 	stw	fp,8(sp)
80204f90:	df000204 	addi	fp,sp,8
80204f94:	2005883a 	mov	r2,r4
80204f98:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
80204f9c:	e0bfff03 	ldbu	r2,-4(fp)
80204fa0:	10c00168 	cmpgeui	r3,r2,5
80204fa4:	18001c1e 	bne	r3,zero,80205018 <bSSDisplayConfig+0x90>
80204fa8:	100690ba 	slli	r3,r2,2
80204fac:	00a00834 	movhi	r2,32800
80204fb0:	1093f004 	addi	r2,r2,20416
80204fb4:	1885883a 	add	r2,r3,r2
80204fb8:	10800017 	ldw	r2,0(r2)
80204fbc:	1000683a 	jmp	r2
80204fc0:	80204fd4 	ori	zero,r16,33087
80204fc4:	80204fe0 	cmpeqi	zero,r16,-32449
80204fc8:	80204fec 	andhi	zero,r16,33087
80204fcc:	80205000 	call	88020500 <__reset+0x2000500>
80204fd0:	80205010 	cmplti	zero,r16,-32448
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
80204fd4:	00800cc4 	movi	r2,51
80204fd8:	d0a01945 	stb	r2,-32667(gp)
	    break;
80204fdc:	00001006 	br	80205020 <bSSDisplayConfig+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
80204fe0:	00801544 	movi	r2,85
80204fe4:	d0a01945 	stb	r2,-32667(gp)
	    break;
80204fe8:	00000d06 	br	80205020 <bSSDisplayConfig+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
80204fec:	d0e01943 	ldbu	r3,-32667(gp)
80204ff0:	00bff744 	movi	r2,-35
80204ff4:	1884703a 	and	r2,r3,r2
80204ff8:	d0a01945 	stb	r2,-32667(gp)
	    break;
80204ffc:	00000806 	br	80205020 <bSSDisplayConfig+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
80205000:	d0a01943 	ldbu	r2,-32667(gp)
80205004:	10800894 	ori	r2,r2,34
80205008:	d0a01945 	stb	r2,-32667(gp)
	    break;
8020500c:	00000406 	br	80205020 <bSSDisplayConfig+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
80205010:	d0201945 	stb	zero,-32667(gp)
	    break;
80205014:	00000206 	br	80205020 <bSSDisplayConfig+0x98>
		
		default:
		    return FALSE;
80205018:	0005883a 	mov	r2,zero
8020501c:	00000806 	br	80205040 <bSSDisplayConfig+0xb8>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
80205020:	00a04034 	movhi	r2,33024
80205024:	10817404 	addi	r2,r2,1488
80205028:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
8020502c:	d0a01943 	ldbu	r2,-32667(gp)
80205030:	10c03fcc 	andi	r3,r2,255
80205034:	e0bffe17 	ldw	r2,-8(fp)
80205038:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8020503c:	00800044 	movi	r2,1
}
80205040:	e037883a 	mov	sp,fp
80205044:	df000017 	ldw	fp,0(sp)
80205048:	dec00104 	addi	sp,sp,4
8020504c:	f800283a 	ret

80205050 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
80205050:	defffd04 	addi	sp,sp,-12
80205054:	df000215 	stw	fp,8(sp)
80205058:	df000204 	addi	fp,sp,8
8020505c:	2005883a 	mov	r2,r4
80205060:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
80205064:	00a04034 	movhi	r2,33024
80205068:	10817404 	addi	r2,r2,1488
8020506c:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
80205070:	e0bffe17 	ldw	r2,-8(fp)
80205074:	10800104 	addi	r2,r2,4
80205078:	e0ffff03 	ldbu	r3,-4(fp)
8020507c:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
80205080:	00800044 	movi	r2,1
}
80205084:	e037883a 	mov	sp,fp
80205088:	df000017 	ldw	fp,0(sp)
8020508c:	dec00104 	addi	sp,sp,4
80205090:	f800283a 	ret

80205094 <main>:
alt_u32 uliLittleToBigEndianPixel(alt_u32 uliLittleEndianDword);
void vLittleToBigEndianMask(alt_u32 uliLittleEndianDword[2]);

alt_u32 uliInitialState;

int main() {
80205094:	defff304 	addi	sp,sp,-52
80205098:	dfc00c15 	stw	ra,48(sp)
8020509c:	df000b15 	stw	fp,44(sp)
802050a0:	dc000a15 	stw	r16,40(sp)
802050a4:	df000b04 	addi	fp,sp,44
	printf("Hello from Nios II!\n\n");
802050a8:	012008b4 	movhi	r4,32802
802050ac:	21333804 	addi	r4,r4,-13088
802050b0:	020654c0 	call	8020654c <puts>

	TFtdiModule *pxFtdi = (TFtdiModule *) USB_3_FTDI_0_BASE;
802050b4:	00a00034 	movhi	r2,32768
802050b8:	e0bffe15 	stw	r2,-8(fp)

	bDdr2SwitchMemory(DDR2_M2_ID);
802050bc:	01000044 	movi	r4,1
802050c0:	02012940 	call	80201294 <bDdr2SwitchMemory>
	bSdmaInitM2Dma();
802050c4:	02026c40 	call	802026c4 <bSdmaInitM2Dma>

	// Stop and Clear Channel
	pxFtdi->xFtdiFtdiModuleControl.bModuleLoopbackEn = FALSE;
802050c8:	e0bffe17 	ldw	r2,-8(fp)
802050cc:	10001315 	stw	zero,76(r2)
	pxFtdi->xFtdiFtdiModuleControl.bModuleStop = TRUE;
802050d0:	e0bffe17 	ldw	r2,-8(fp)
802050d4:	00c00044 	movi	r3,1
802050d8:	10c01115 	stw	r3,68(r2)
	pxFtdi->xFtdiFtdiModuleControl.bModuleClear = TRUE;
802050dc:	e0bffe17 	ldw	r2,-8(fp)
802050e0:	00c00044 	movi	r3,1
802050e4:	10c01215 	stw	r3,72(r2)
	// Enable Loopback
//	pxFtdi->xFtdiFtdiModuleControl.bModuleLoopbackEn = TRUE;
//	printf("Loopback Enabled! \n");

	//Enable IRQs
	pxFtdi->xFtdiRxIrqControl.bRxBuff0RdableIrqEn = TRUE;
802050e8:	e0bffe17 	ldw	r2,-8(fp)
802050ec:	00c00044 	movi	r3,1
802050f0:	10c00115 	stw	r3,4(r2)
	pxFtdi->xFtdiRxIrqControl.bRxBuff1RdableIrqEn = TRUE;
802050f4:	e0bffe17 	ldw	r2,-8(fp)
802050f8:	00c00044 	movi	r3,1
802050fc:	10c00215 	stw	r3,8(r2)
	pxFtdi->xFtdiRxIrqControl.bRxBuffLastRdableIrqEn = TRUE;
80205100:	e0bffe17 	ldw	r2,-8(fp)
80205104:	00c00044 	movi	r3,1
80205108:	10c00315 	stw	r3,12(r2)
	pxFtdi->xFtdiRxIrqControl.bRxBuffLastEmptyIrqEn = TRUE;
8020510c:	e0bffe17 	ldw	r2,-8(fp)
80205110:	00c00044 	movi	r3,1
80205114:	10c00415 	stw	r3,16(r2)
	pxFtdi->xFtdiRxIrqControl.bRxCommErrIrqEn = TRUE;
80205118:	e0bffe17 	ldw	r2,-8(fp)
8020511c:	00c00044 	movi	r3,1
80205120:	10c00515 	stw	r3,20(r2)
	pxFtdi->xFtdiFtdiIrqControl.bFtdiGlobalIrqEn = TRUE;
80205124:	e0bffe17 	ldw	r2,-8(fp)
80205128:	00c00044 	movi	r3,1
8020512c:	10c00015 	stw	r3,0(r2)

	usleep(5*1000*1000);
80205130:	01001334 	movhi	r4,76
80205134:	2112d004 	addi	r4,r4,19264
80205138:	0216c4c0 	call	80216c4c <usleep>

	printf("Ready! \n\n");
8020513c:	012008b4 	movhi	r4,32802
80205140:	21333e04 	addi	r4,r4,-13064
80205144:	020654c0 	call	8020654c <puts>

	alt_u8 ucCcdCnt = 0;
80205148:	e03ffc05 	stb	zero,-16(fp)
	alt_u8 ucFeeCnt = 0;
8020514c:	e03ffc45 	stb	zero,-15(fp)
	alt_u16 usiExpNumCnt = 0;
80205150:	e03ffc8d 	sth	zero,-14(fp)
	alt_u32 uliTransactionCnt = 0;
80205154:	e03ffd15 	stw	zero,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80205158:	d0a02817 	ldw	r2,-32608(gp)

//	vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 0, 5000, 3000, usiExpNumCnt, FALSE, TRUE);

	iTimeStart = alt_nticks();
8020515c:	d0a01c15 	stw	r2,-32656(gp)

	for (usiExpNumCnt = 0; usiExpNumCnt < 3; usiExpNumCnt++) {
80205160:	e03ffc8d 	sth	zero,-14(fp)
80205164:	00004406 	br	80205278 <main+0x1e4>
		for (ucFeeCnt = 0; ucFeeCnt < 6; ucFeeCnt++) {
80205168:	e03ffc45 	stb	zero,-15(fp)
8020516c:	00003c06 	br	80205260 <main+0x1cc>
			for (ucCcdCnt = 0; ucCcdCnt < 4; ucCcdCnt++) {
80205170:	e03ffc05 	stb	zero,-16(fp)
80205174:	00003406 	br	80205248 <main+0x1b4>
				printf("Transaction: %ld \n", uliTransactionCnt); uliTransactionCnt++;
80205178:	e17ffd17 	ldw	r5,-12(fp)
8020517c:	012008b4 	movhi	r4,32802
80205180:	21334104 	addi	r4,r4,-13052
80205184:	02064500 	call	80206450 <printf>
80205188:	e0bffd17 	ldw	r2,-12(fp)
8020518c:	10800044 	addi	r2,r2,1
80205190:	e0bffd15 	stw	r2,-12(fp)
				vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 0, 5000, 3000, usiExpNumCnt, FALSE, FALSE);
80205194:	e13ffc43 	ldbu	r4,-15(fp)
80205198:	e0bffc03 	ldbu	r2,-16(fp)
8020519c:	e0fffc8b 	ldhu	r3,-14(fp)
802051a0:	d8000615 	stw	zero,24(sp)
802051a4:	d8000515 	stw	zero,20(sp)
802051a8:	d8c00415 	stw	r3,16(sp)
802051ac:	00c2ee04 	movi	r3,3000
802051b0:	d8c00315 	stw	r3,12(sp)
802051b4:	00c4e204 	movi	r3,5000
802051b8:	d8c00215 	stw	r3,8(sp)
802051bc:	d8000115 	stw	zero,4(sp)
802051c0:	d8800015 	stw	r2,0(sp)
802051c4:	200f883a 	mov	r7,r4
802051c8:	01800044 	movi	r6,1
802051cc:	01410034 	movhi	r5,1024
802051d0:	0009883a 	mov	r4,zero
802051d4:	02053000 	call	80205300 <vProtocolUsbTestAck>
				printf("Transaction: %ld \n", uliTransactionCnt); uliTransactionCnt++;
802051d8:	e17ffd17 	ldw	r5,-12(fp)
802051dc:	012008b4 	movhi	r4,32802
802051e0:	21334104 	addi	r4,r4,-13052
802051e4:	02064500 	call	80206450 <printf>
802051e8:	e0bffd17 	ldw	r2,-12(fp)
802051ec:	10800044 	addi	r2,r2,1
802051f0:	e0bffd15 	stw	r2,-12(fp)
				vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 1, 5000, 3000, usiExpNumCnt, FALSE, FALSE);
802051f4:	e13ffc43 	ldbu	r4,-15(fp)
802051f8:	e0bffc03 	ldbu	r2,-16(fp)
802051fc:	e0fffc8b 	ldhu	r3,-14(fp)
80205200:	d8000615 	stw	zero,24(sp)
80205204:	d8000515 	stw	zero,20(sp)
80205208:	d8c00415 	stw	r3,16(sp)
8020520c:	00c2ee04 	movi	r3,3000
80205210:	d8c00315 	stw	r3,12(sp)
80205214:	00c4e204 	movi	r3,5000
80205218:	d8c00215 	stw	r3,8(sp)
8020521c:	00c00044 	movi	r3,1
80205220:	d8c00115 	stw	r3,4(sp)
80205224:	d8800015 	stw	r2,0(sp)
80205228:	200f883a 	mov	r7,r4
8020522c:	01800044 	movi	r6,1
80205230:	01410034 	movhi	r5,1024
80205234:	0009883a 	mov	r4,zero
80205238:	02053000 	call	80205300 <vProtocolUsbTestAck>

	iTimeStart = alt_nticks();

	for (usiExpNumCnt = 0; usiExpNumCnt < 3; usiExpNumCnt++) {
		for (ucFeeCnt = 0; ucFeeCnt < 6; ucFeeCnt++) {
			for (ucCcdCnt = 0; ucCcdCnt < 4; ucCcdCnt++) {
8020523c:	e0bffc03 	ldbu	r2,-16(fp)
80205240:	10800044 	addi	r2,r2,1
80205244:	e0bffc05 	stb	r2,-16(fp)
80205248:	e0bffc03 	ldbu	r2,-16(fp)
8020524c:	10800130 	cmpltui	r2,r2,4
80205250:	103fc91e 	bne	r2,zero,80205178 <__reset+0xfa1e5178>
//	vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 0, 5000, 3000, usiExpNumCnt, FALSE, TRUE);

	iTimeStart = alt_nticks();

	for (usiExpNumCnt = 0; usiExpNumCnt < 3; usiExpNumCnt++) {
		for (ucFeeCnt = 0; ucFeeCnt < 6; ucFeeCnt++) {
80205254:	e0bffc43 	ldbu	r2,-15(fp)
80205258:	10800044 	addi	r2,r2,1
8020525c:	e0bffc45 	stb	r2,-15(fp)
80205260:	e0bffc43 	ldbu	r2,-15(fp)
80205264:	108001b0 	cmpltui	r2,r2,6
80205268:	103fc11e 	bne	r2,zero,80205170 <__reset+0xfa1e5170>

//	vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 0, 5000, 3000, usiExpNumCnt, FALSE, TRUE);

	iTimeStart = alt_nticks();

	for (usiExpNumCnt = 0; usiExpNumCnt < 3; usiExpNumCnt++) {
8020526c:	e0bffc8b 	ldhu	r2,-14(fp)
80205270:	10800044 	addi	r2,r2,1
80205274:	e0bffc8d 	sth	r2,-14(fp)
80205278:	e0bffc8b 	ldhu	r2,-14(fp)
8020527c:	108000f0 	cmpltui	r2,r2,3
80205280:	103fb91e 	bne	r2,zero,80205168 <__reset+0xfa1e5168>
80205284:	d0a02817 	ldw	r2,-32608(gp)
				vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 1, 5000, 3000, usiExpNumCnt, FALSE, FALSE);
			}
		}
	}

	iTimeElapsed = alt_nticks() - iTimeStart;
80205288:	d0e01c17 	ldw	r3,-32656(gp)
8020528c:	10c5c83a 	sub	r2,r2,r3
80205290:	d0a01a15 	stw	r2,-32664(gp)
	printf("USB data written, size=%ld bytes, %.3f sec\n", 0, (float) iTimeElapsed / (float) alt_ticks_per_second());
80205294:	d0a01a17 	ldw	r2,-32664(gp)
80205298:	1009883a 	mov	r4,r2
8020529c:	0205e500 	call	80205e50 <__floatsisf>
802052a0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802052a4:	d0a02717 	ldw	r2,-32612(gp)
802052a8:	1009883a 	mov	r4,r2
802052ac:	0205f740 	call	80205f74 <__floatunsisf>
802052b0:	1007883a 	mov	r3,r2
802052b4:	180b883a 	mov	r5,r3
802052b8:	8009883a 	mov	r4,r16
802052bc:	0205a100 	call	80205a10 <__divsf3>
802052c0:	1007883a 	mov	r3,r2
802052c4:	1805883a 	mov	r2,r3
802052c8:	1009883a 	mov	r4,r2
802052cc:	02060640 	call	80206064 <__extendsfdf2>
802052d0:	1009883a 	mov	r4,r2
802052d4:	180b883a 	mov	r5,r3
802052d8:	200d883a 	mov	r6,r4
802052dc:	280f883a 	mov	r7,r5
802052e0:	000b883a 	mov	r5,zero
802052e4:	012008b4 	movhi	r4,32802
802052e8:	21334604 	addi	r4,r4,-13032
802052ec:	02064500 	call	80206450 <printf>

	printf("Finished!! \n");
802052f0:	012008b4 	movhi	r4,32802
802052f4:	21335104 	addi	r4,r4,-12988
802052f8:	020654c0 	call	8020654c <puts>

	while (1) {}
802052fc:	003fff06 	br	802052fc <__reset+0xfa1e52fc>

80205300 <vProtocolUsbTestAck>:
//
//	}
//
//}

void vProtocolUsbTestAck(alt_u32 uliMemOffset, alt_u32 uliMemOffInc, alt_u8 ucMemId, alt_u8 ucFee, alt_u8 ucCcd, alt_u8 ucSide, alt_u16 usiHeight, alt_u16 usiWidth, alt_u16 usiExpNum, bool bMemDump, bool bVerbose){
80205300:	deffec04 	addi	sp,sp,-80
80205304:	dfc01315 	stw	ra,76(sp)
80205308:	df001215 	stw	fp,72(sp)
8020530c:	df001204 	addi	fp,sp,72
80205310:	e13ff715 	stw	r4,-36(fp)
80205314:	e17ff815 	stw	r5,-32(fp)
80205318:	3011883a 	mov	r8,r6
8020531c:	e1800217 	ldw	r6,8(fp)
80205320:	e1400317 	ldw	r5,12(fp)
80205324:	e1000417 	ldw	r4,16(fp)
80205328:	e0c00517 	ldw	r3,20(fp)
8020532c:	e0800617 	ldw	r2,24(fp)
80205330:	e23ff905 	stb	r8,-28(fp)
80205334:	e1fffa05 	stb	r7,-24(fp)
80205338:	e1bffb05 	stb	r6,-20(fp)
8020533c:	e17ffc05 	stb	r5,-16(fp)
80205340:	e13ffd0d 	sth	r4,-12(fp)
80205344:	e0fffe0d 	sth	r3,-8(fp)
80205348:	e0bfff0d 	sth	r2,-4(fp)

	TFtdiModule *pxFtdi = (TFtdiModule *) USB_3_FTDI_0_BASE;
8020534c:	00a00034 	movhi	r2,32768
80205350:	e0bff315 	stw	r2,-52(fp)

	alt_u32 uliPaylodOffset = uliMemOffset;
80205354:	e0bff717 	ldw	r2,-36(fp)
80205358:	e0bff115 	stw	r2,-60(fp)
	alt_u32 uliPatternOff = uliPaylodOffset + uliMemOffInc;
8020535c:	e0fff117 	ldw	r3,-60(fp)
80205360:	e0bff817 	ldw	r2,-32(fp)
80205364:	1885883a 	add	r2,r3,r2
80205368:	e0bff415 	stw	r2,-48(fp)

	// Start Channel
	pxFtdi->xFtdiFtdiModuleControl.bModuleStart = TRUE;
8020536c:	e0bff317 	ldw	r2,-52(fp)
80205370:	00c00044 	movi	r3,1
80205374:	10c01015 	stw	r3,64(r2)

	printf("Starting Full-Image Request test: \n");
80205378:	012008b4 	movhi	r4,32802
8020537c:	21335404 	addi	r4,r4,-12976
80205380:	020654c0 	call	8020654c <puts>
	printf("FEE[%d], CCD[%d], SIDE[%d], HEIGHT[%d], WIDTH[%d], EXP.NUM.[%d] \n", ucFee, ucCcd, ucSide, usiHeight, usiWidth, usiExpNum);
80205384:	e17ffa03 	ldbu	r5,-24(fp)
80205388:	e1bffb03 	ldbu	r6,-20(fp)
8020538c:	e1fffc03 	ldbu	r7,-16(fp)
80205390:	e0bffd0b 	ldhu	r2,-12(fp)
80205394:	e0fffe0b 	ldhu	r3,-8(fp)
80205398:	e13fff0b 	ldhu	r4,-4(fp)
8020539c:	d9000215 	stw	r4,8(sp)
802053a0:	d8c00115 	stw	r3,4(sp)
802053a4:	d8800015 	stw	r2,0(sp)
802053a8:	012008b4 	movhi	r4,32802
802053ac:	21335d04 	addi	r4,r4,-12940
802053b0:	02064500 	call	80206450 <printf>

	// Transmitt Request Header
	pxFtdi->xFtdiHalfCcdReqControl.ucHalfCcdFeeNumber = ucFee;
802053b4:	e0fffa03 	ldbu	r3,-24(fp)
802053b8:	e0bff317 	ldw	r2,-52(fp)
802053bc:	10c01515 	stw	r3,84(r2)
	pxFtdi->xFtdiHalfCcdReqControl.ucHalfCcdCcdNumber = ucCcd;
802053c0:	e0fffb03 	ldbu	r3,-20(fp)
802053c4:	e0bff317 	ldw	r2,-52(fp)
802053c8:	10c01615 	stw	r3,88(r2)
	pxFtdi->xFtdiHalfCcdReqControl.ucHalfCcdCcdSide = ucSide;
802053cc:	e0fffc03 	ldbu	r3,-16(fp)
802053d0:	e0bff317 	ldw	r2,-52(fp)
802053d4:	10c01715 	stw	r3,92(r2)
	pxFtdi->xFtdiHalfCcdReqControl.usiHalfCcdCcdHeight = usiHeight;
802053d8:	e0fffd0b 	ldhu	r3,-12(fp)
802053dc:	e0bff317 	ldw	r2,-52(fp)
802053e0:	10c01815 	stw	r3,96(r2)
	pxFtdi->xFtdiHalfCcdReqControl.usiHalfCcdCcdWidth = usiWidth;
802053e4:	e0fffe0b 	ldhu	r3,-8(fp)
802053e8:	e0bff317 	ldw	r2,-52(fp)
802053ec:	10c01915 	stw	r3,100(r2)
	pxFtdi->xFtdiHalfCcdReqControl.usiHalfCcdExpNumber = usiExpNum;
802053f0:	e0ffff0b 	ldhu	r3,-4(fp)
802053f4:	e0bff317 	ldw	r2,-52(fp)
802053f8:	10c01a15 	stw	r3,104(r2)
	pxFtdi->xFtdiHalfCcdReqControl.usiHalfCcdReqTimeout = 0;
802053fc:	e0bff317 	ldw	r2,-52(fp)
80205400:	10001415 	stw	zero,80(r2)
	pxFtdi->xFtdiHalfCcdReqControl.bRequestHalfCcd = TRUE;
80205404:	e0bff317 	ldw	r2,-52(fp)
80205408:	00c00044 	movi	r3,1
8020540c:	10c01b15 	stw	r3,108(r2)

	// Wait for an error or Rx Data
	bool bStopRx = FALSE;
80205410:	e03ff515 	stw	zero,-44(fp)
	alt_u32 uliTransferSize = 0;
80205414:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliTransferCnt = 0;
80205418:	e03ff215 	stw	zero,-56(fp)

//	while (pxFtdi->xFtdiHalfCcdReplyStatus.bHalfCcdControllerBusy) {
//
//	}

	while ((pxFtdi->xFtdiRxBufferStatus.bRxBuff0Full == FALSE) && (pxFtdi->xFtdiRxBufferStatus.bRxBuff1Full == FALSE)) {}
8020541c:	0001883a 	nop
80205420:	e0bff317 	ldw	r2,-52(fp)
80205424:	10802b17 	ldw	r2,172(r2)
80205428:	10002c1e 	bne	r2,zero,802054dc <vProtocolUsbTestAck+0x1dc>
8020542c:	e0bff317 	ldw	r2,-52(fp)
80205430:	10802f17 	ldw	r2,188(r2)
80205434:	103ffa26 	beq	r2,zero,80205420 <__reset+0xfa1e5420>

//	iTimeStart = alt_nticks();

	while ((pxFtdi->xFtdiHalfCcdReplyStatus.bHalfCcdControllerBusy)) {
80205438:	00002806 	br	802054dc <vProtocolUsbTestAck+0x1dc>
//	while ((!bStopRx)) {

//		if (pxFtdi->xFtdiRxIrqFlag.bRxBuff0RdableIrqFlag) {
		if (pxFtdi->xFtdiRxBufferStatus.bRxBuff0Full) {
8020543c:	e0bff317 	ldw	r2,-52(fp)
80205440:	10802b17 	ldw	r2,172(r2)
80205444:	10001126 	beq	r2,zero,8020548c <vProtocolUsbTestAck+0x18c>

//			pxFtdi->xFtdiRxIrqFlagClr.bRxBuff0RdableIrqFlagClr = TRUE;
			uliTransferSize = pxFtdi->xFtdiRxBufferStatus.usiRxBuff0UsedBytes;
80205448:	e0bff317 	ldw	r2,-52(fp)
8020544c:	10802a17 	ldw	r2,168(r2)
80205450:	e0bff615 	stw	r2,-40(fp)
			bSdmaDmaM2FtdiTransfer((alt_u32 *)uliPaylodOffset, uliTransferSize, eSdmaRxFtdi);
80205454:	e0fff117 	ldw	r3,-60(fp)
80205458:	e0bff617 	ldw	r2,-40(fp)
8020545c:	10bfffcc 	andi	r2,r2,65535
80205460:	01800044 	movi	r6,1
80205464:	100b883a 	mov	r5,r2
80205468:	1809883a 	mov	r4,r3
8020546c:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
			uliPaylodOffset += uliTransferSize;
80205470:	e0fff117 	ldw	r3,-60(fp)
80205474:	e0bff617 	ldw	r2,-40(fp)
80205478:	1885883a 	add	r2,r3,r2
8020547c:	e0bff115 	stw	r2,-60(fp)
			uliTransferCnt++;
80205480:	e0bff217 	ldw	r2,-56(fp)
80205484:	10800044 	addi	r2,r2,1
80205488:	e0bff215 	stw	r2,-56(fp)

		}
//		if (pxFtdi->xFtdiRxIrqFlag.bRxBuff1RdableIrqFlag) {
		if (pxFtdi->xFtdiRxBufferStatus.bRxBuff1Full) {
8020548c:	e0bff317 	ldw	r2,-52(fp)
80205490:	10802f17 	ldw	r2,188(r2)
80205494:	10001126 	beq	r2,zero,802054dc <vProtocolUsbTestAck+0x1dc>

//			pxFtdi->xFtdiRxIrqFlagClr.bRxBuff1RdableIrqFlagClr = TRUE;
			uliTransferSize = pxFtdi->xFtdiRxBufferStatus.usiRxBuff1UsedBytes;
80205498:	e0bff317 	ldw	r2,-52(fp)
8020549c:	10802e17 	ldw	r2,184(r2)
802054a0:	e0bff615 	stw	r2,-40(fp)
			bSdmaDmaM2FtdiTransfer((alt_u32 *)uliPaylodOffset, uliTransferSize, eSdmaRxFtdi);
802054a4:	e0fff117 	ldw	r3,-60(fp)
802054a8:	e0bff617 	ldw	r2,-40(fp)
802054ac:	10bfffcc 	andi	r2,r2,65535
802054b0:	01800044 	movi	r6,1
802054b4:	100b883a 	mov	r5,r2
802054b8:	1809883a 	mov	r4,r3
802054bc:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
			uliPaylodOffset += uliTransferSize;
802054c0:	e0fff117 	ldw	r3,-60(fp)
802054c4:	e0bff617 	ldw	r2,-40(fp)
802054c8:	1885883a 	add	r2,r3,r2
802054cc:	e0bff115 	stw	r2,-60(fp)
			uliTransferCnt++;
802054d0:	e0bff217 	ldw	r2,-56(fp)
802054d4:	10800044 	addi	r2,r2,1
802054d8:	e0bff215 	stw	r2,-56(fp)

	while ((pxFtdi->xFtdiRxBufferStatus.bRxBuff0Full == FALSE) && (pxFtdi->xFtdiRxBufferStatus.bRxBuff1Full == FALSE)) {}

//	iTimeStart = alt_nticks();

	while ((pxFtdi->xFtdiHalfCcdReplyStatus.bHalfCcdControllerBusy)) {
802054dc:	e0bff317 	ldw	r2,-52(fp)
802054e0:	10802617 	ldw	r2,152(r2)
802054e4:	103fd51e 	bne	r2,zero,8020543c <__reset+0xfa1e543c>
	}

	// Check Contents
//	vFillCheckMemoryPattern(uliPatternOff, uliMemOffset, pxFtdi->xFtdiHalfCcdReplyStatus.uliHalfCcdImgLengthBytes, ucMemId, ucCcd, ucSide, usiHeight, usiWidth, usiExpNum, bMemDump);

	pxFtdi->xFtdiHalfCcdReqControl.bRstHalfCcdController = TRUE;
802054e8:	e0bff317 	ldw	r2,-52(fp)
802054ec:	00c00044 	movi	r3,1
802054f0:	10c01d15 	stw	r3,116(r2)

	usleep(1);
802054f4:	01000044 	movi	r4,1
802054f8:	0216c4c0 	call	80216c4c <usleep>

	pxFtdi->xFtdiFtdiModuleControl.bModuleStop = TRUE;
802054fc:	e0bff317 	ldw	r2,-52(fp)
80205500:	00c00044 	movi	r3,1
80205504:	10c01115 	stw	r3,68(r2)
	pxFtdi->xFtdiFtdiModuleControl.bModuleClear = TRUE;
80205508:	e0bff317 	ldw	r2,-52(fp)
8020550c:	00c00044 	movi	r3,1
80205510:	10c01215 	stw	r3,72(r2)

		usleep(1*1000*1000);
80205514:	010003f4 	movhi	r4,15
80205518:	21109004 	addi	r4,r4,16960
8020551c:	0216c4c0 	call	80216c4c <usleep>
//		usleep(100*1000);
//	usleep(1);

	printf("\n\n");
80205520:	012008b4 	movhi	r4,32802
80205524:	21336e04 	addi	r4,r4,-12872
80205528:	020654c0 	call	8020654c <puts>

}
8020552c:	0001883a 	nop
80205530:	e037883a 	mov	sp,fp
80205534:	dfc00117 	ldw	ra,4(sp)
80205538:	df000017 	ldw	fp,0(sp)
8020553c:	dec00204 	addi	sp,sp,8
80205540:	f800283a 	ret

80205544 <vFillCheckMemoryPattern>:

void vFillCheckMemoryPattern(alt_u32 uliMemPatternOffset, alt_u32 uliMemPayloadOffset, alt_u32 uliPayloadLength, alt_u8 ucMemId, alt_u8 ucCcd, alt_u8 ucSide, alt_u16 usiHeight, alt_u16 usiWidth, alt_u16 usiExpNum, bool bMemDump){
80205544:	deffee04 	addi	sp,sp,-72
80205548:	dfc01115 	stw	ra,68(sp)
8020554c:	df001015 	stw	fp,64(sp)
80205550:	df001004 	addi	fp,sp,64
80205554:	e13ff715 	stw	r4,-36(fp)
80205558:	e17ff815 	stw	r5,-32(fp)
8020555c:	e1bff915 	stw	r6,-28(fp)
80205560:	e1800217 	ldw	r6,8(fp)
80205564:	e1400317 	ldw	r5,12(fp)
80205568:	e1000417 	ldw	r4,16(fp)
8020556c:	e0c00517 	ldw	r3,20(fp)
80205570:	e0800617 	ldw	r2,24(fp)
80205574:	e1fffa05 	stb	r7,-24(fp)
80205578:	e1bffb05 	stb	r6,-20(fp)
8020557c:	e17ffc05 	stb	r5,-16(fp)
80205580:	e13ffd0d 	sth	r4,-12(fp)
80205584:	e0fffe0d 	sth	r3,-8(fp)
80205588:	e0bfff0d 	sth	r2,-4(fp)

	// Generate Pattern
	pattern_createPattern(ucMemId, uliMemPatternOffset, ucCcd, ucSide, usiWidth, usiHeight, (alt_u8)usiExpNum);
8020558c:	e23ffa03 	ldbu	r8,-24(fp)
80205590:	e17ffb03 	ldbu	r5,-20(fp)
80205594:	e1bffc03 	ldbu	r6,-16(fp)
80205598:	e0bffe0b 	ldhu	r2,-8(fp)
8020559c:	e0fffd0b 	ldhu	r3,-12(fp)
802055a0:	e13fff0b 	ldhu	r4,-4(fp)
802055a4:	21003fcc 	andi	r4,r4,255
802055a8:	d9000215 	stw	r4,8(sp)
802055ac:	d8c00115 	stw	r3,4(sp)
802055b0:	d8800015 	stw	r2,0(sp)
802055b4:	300f883a 	mov	r7,r6
802055b8:	280d883a 	mov	r6,r5
802055bc:	e17ff717 	ldw	r5,-36(fp)
802055c0:	4009883a 	mov	r4,r8
802055c4:	02057c80 	call	802057c8 <pattern_createPattern>

	// Check and Dump Pattern 32b
	alt_u16 ucErrorCnt = 0;
802055c8:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 ucDataCnt = 0;
802055cc:	e03ff415 	stw	zero,-48(fp)
	alt_u64 *puliDataAddr = (alt_u64 *)uliMemPatternOffset;
802055d0:	e0bff717 	ldw	r2,-36(fp)
802055d4:	e0bff515 	stw	r2,-44(fp)
	alt_u64 *puliPayloadAddr = (alt_u64 *)uliMemPayloadOffset;
802055d8:	e0bff817 	ldw	r2,-32(fp)
802055dc:	e0bff615 	stw	r2,-40(fp)
	puliPayloadAddr += 4;
802055e0:	e0bff617 	ldw	r2,-40(fp)
802055e4:	10800804 	addi	r2,r2,32
802055e8:	e0bff615 	stw	r2,-40(fp)
	for (ucDataCnt = 0; ucDataCnt < (uliPayloadLength)/8; ucDataCnt++) {
802055ec:	e03ff415 	stw	zero,-48(fp)
802055f0:	00003406 	br	802056c4 <vFillCheckMemoryPattern+0x180>
		if (bMemDump) {
802055f4:	e0800717 	ldw	r2,28(fp)
802055f8:	10000d26 	beq	r2,zero,80205630 <vFillCheckMemoryPattern+0xec>
//			printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)puliDataAddr, (alt_u64)(*puliDataAddr));
			printf("Payload: 0x%016llX, Pattern: 0x%016llX \n", (alt_u64)(*puliPayloadAddr), (alt_u64)(*puliDataAddr));
802055fc:	e0bff617 	ldw	r2,-40(fp)
80205600:	12000017 	ldw	r8,0(r2)
80205604:	12400117 	ldw	r9,4(r2)
80205608:	e13ff517 	ldw	r4,-44(fp)
8020560c:	20800017 	ldw	r2,0(r4)
80205610:	20c00117 	ldw	r3,4(r4)
80205614:	d8c00015 	stw	r3,0(sp)
80205618:	100f883a 	mov	r7,r2
8020561c:	400b883a 	mov	r5,r8
80205620:	480d883a 	mov	r6,r9
80205624:	012008b4 	movhi	r4,32802
80205628:	21336f04 	addi	r4,r4,-12868
8020562c:	02064500 	call	80206450 <printf>

//		if (ucDataCnt >= 6374820/8) {
//			printf("Addr: 0x%08lX, Payload: 0x%016llX, Pattern: 0x%016llX \n", (alt_u32)puliDataAddr, (alt_u64)(*puliPayloadAddr), (alt_u64)(*puliDataAddr));
//		}

		if ((alt_u64)(*puliDataAddr) != (alt_u64)(*puliPayloadAddr)) {
80205630:	e0bff517 	ldw	r2,-44(fp)
80205634:	11000017 	ldw	r4,0(r2)
80205638:	11400117 	ldw	r5,4(r2)
8020563c:	e1bff617 	ldw	r6,-40(fp)
80205640:	30800017 	ldw	r2,0(r6)
80205644:	30c00117 	ldw	r3,4(r6)
80205648:	2080011e 	bne	r4,r2,80205650 <vFillCheckMemoryPattern+0x10c>
8020564c:	28c01426 	beq	r5,r3,802056a0 <vFillCheckMemoryPattern+0x15c>
			ucErrorCnt++;
80205650:	e0bff30b 	ldhu	r2,-52(fp)
80205654:	10800044 	addi	r2,r2,1
80205658:	e0bff30d 	sth	r2,-52(fp)
			if (!bMemDump) {
8020565c:	e0800717 	ldw	r2,28(fp)
80205660:	10000f1e 	bne	r2,zero,802056a0 <vFillCheckMemoryPattern+0x15c>
				printf("Addr: 0x%08lX, Payload: 0x%016llX, Pattern: 0x%016llX \n", (alt_u32)puliDataAddr, (alt_u64)(*puliPayloadAddr), (alt_u64)(*puliDataAddr));
80205664:	e23ff517 	ldw	r8,-44(fp)
80205668:	e0bff617 	ldw	r2,-40(fp)
8020566c:	11000017 	ldw	r4,0(r2)
80205670:	11400117 	ldw	r5,4(r2)
80205674:	e1bff517 	ldw	r6,-44(fp)
80205678:	30800017 	ldw	r2,0(r6)
8020567c:	30c00117 	ldw	r3,4(r6)
80205680:	d8800015 	stw	r2,0(sp)
80205684:	d8c00115 	stw	r3,4(sp)
80205688:	200d883a 	mov	r6,r4
8020568c:	280f883a 	mov	r7,r5
80205690:	400b883a 	mov	r5,r8
80205694:	012008b4 	movhi	r4,32802
80205698:	21337a04 	addi	r4,r4,-12824
8020569c:	02064500 	call	80206450 <printf>
			}
		}
		puliDataAddr++; puliPayloadAddr++;
802056a0:	e0bff517 	ldw	r2,-44(fp)
802056a4:	10800204 	addi	r2,r2,8
802056a8:	e0bff515 	stw	r2,-44(fp)
802056ac:	e0bff617 	ldw	r2,-40(fp)
802056b0:	10800204 	addi	r2,r2,8
802056b4:	e0bff615 	stw	r2,-40(fp)
	alt_u16 ucErrorCnt = 0;
	alt_u32 ucDataCnt = 0;
	alt_u64 *puliDataAddr = (alt_u64 *)uliMemPatternOffset;
	alt_u64 *puliPayloadAddr = (alt_u64 *)uliMemPayloadOffset;
	puliPayloadAddr += 4;
	for (ucDataCnt = 0; ucDataCnt < (uliPayloadLength)/8; ucDataCnt++) {
802056b8:	e0bff417 	ldw	r2,-48(fp)
802056bc:	10800044 	addi	r2,r2,1
802056c0:	e0bff415 	stw	r2,-48(fp)
802056c4:	e0bff917 	ldw	r2,-28(fp)
802056c8:	1004d0fa 	srli	r2,r2,3
802056cc:	e0fff417 	ldw	r3,-48(fp)
802056d0:	18bfc836 	bltu	r3,r2,802055f4 <__reset+0xfa1e55f4>
			}
		}
		puliDataAddr++; puliPayloadAddr++;
	}

	if (ucErrorCnt > 0) {
802056d4:	e0bff30b 	ldhu	r2,-52(fp)
802056d8:	10000626 	beq	r2,zero,802056f4 <vFillCheckMemoryPattern+0x1b0>
		printf("Pattern and Payload does not match!! %04d errors!! \n", ucErrorCnt);
802056dc:	e0bff30b 	ldhu	r2,-52(fp)
802056e0:	100b883a 	mov	r5,r2
802056e4:	012008b4 	movhi	r4,32802
802056e8:	21338804 	addi	r4,r4,-12768
802056ec:	02064500 	call	80206450 <printf>
	} else {
		printf("Pattern and Payload match!! Payload Length: %ldB\n", uliPayloadLength);
	}

}
802056f0:	00000406 	br	80205704 <vFillCheckMemoryPattern+0x1c0>
	}

	if (ucErrorCnt > 0) {
		printf("Pattern and Payload does not match!! %04d errors!! \n", ucErrorCnt);
	} else {
		printf("Pattern and Payload match!! Payload Length: %ldB\n", uliPayloadLength);
802056f4:	e17ff917 	ldw	r5,-28(fp)
802056f8:	012008b4 	movhi	r4,32802
802056fc:	21339604 	addi	r4,r4,-12712
80205700:	02064500 	call	80206450 <printf>
	}

}
80205704:	0001883a 	nop
80205708:	e037883a 	mov	sp,fp
8020570c:	dfc00117 	ldw	ra,4(sp)
80205710:	df000017 	ldw	fp,0(sp)
80205714:	dec00204 	addi	sp,sp,8
80205718:	f800283a 	ret

8020571c <uliLittleToBigEndianPixel>:
//
//	return uliBigEndianDword;
//}


alt_u32 uliLittleToBigEndianPixel(alt_u32 uliLittleEndianDword){
8020571c:	defffc04 	addi	sp,sp,-16
80205720:	df000315 	stw	fp,12(sp)
80205724:	df000304 	addi	fp,sp,12
80205728:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliBigEndianDword;

	alt_u16 uiWords[2];
	uiWords[0] = (alt_u16)((uliLittleEndianDword & 0x0000FFFF) >> 0);
8020572c:	e0bfff17 	ldw	r2,-4(fp)
80205730:	e0bffe0d 	sth	r2,-8(fp)
	uiWords[1] = (alt_u16)((uliLittleEndianDword & 0xFFFF0000) >> 16);
80205734:	e0bfff17 	ldw	r2,-4(fp)
80205738:	1004d43a 	srli	r2,r2,16
8020573c:	e0bffe8d 	sth	r2,-6(fp)

	uliBigEndianDword = (alt_u32)(
		((uiWords[0] << 16) & 0xFFFF0000) |
80205740:	e0bffe0b 	ldhu	r2,-8(fp)
80205744:	10bfffcc 	andi	r2,r2,65535
80205748:	1004943a 	slli	r2,r2,16
8020574c:	1007883a 	mov	r3,r2
		((uiWords[1] << 0) & 0x0000FFFF));
80205750:	e0bffe8b 	ldhu	r2,-6(fp)

	alt_u16 uiWords[2];
	uiWords[0] = (alt_u16)((uliLittleEndianDword & 0x0000FFFF) >> 0);
	uiWords[1] = (alt_u16)((uliLittleEndianDword & 0xFFFF0000) >> 16);

	uliBigEndianDword = (alt_u32)(
80205754:	10bfffcc 	andi	r2,r2,65535
80205758:	1884b03a 	or	r2,r3,r2
8020575c:	e0bffd15 	stw	r2,-12(fp)
		((uiWords[0] << 16) & 0xFFFF0000) |
		((uiWords[1] << 0) & 0x0000FFFF));

	return uliBigEndianDword;
80205760:	e0bffd17 	ldw	r2,-12(fp)
}
80205764:	e037883a 	mov	sp,fp
80205768:	df000017 	ldw	fp,0(sp)
8020576c:	dec00104 	addi	sp,sp,4
80205770:	f800283a 	ret

80205774 <vLittleToBigEndianMask>:

void vLittleToBigEndianMask(alt_u32 uliLittleEndianDword[2]){
80205774:	defffd04 	addi	sp,sp,-12
80205778:	df000215 	stw	fp,8(sp)
8020577c:	df000204 	addi	fp,sp,8
80205780:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliTemp = 0;
80205784:	e03ffe15 	stw	zero,-8(fp)

	uliTemp = uliLittleEndianDword[0];
80205788:	e0bfff17 	ldw	r2,-4(fp)
8020578c:	10800017 	ldw	r2,0(r2)
80205790:	e0bffe15 	stw	r2,-8(fp)
	uliLittleEndianDword[0] = uliLittleEndianDword[1];
80205794:	e0bfff17 	ldw	r2,-4(fp)
80205798:	10c00117 	ldw	r3,4(r2)
8020579c:	e0bfff17 	ldw	r2,-4(fp)
802057a0:	10c00015 	stw	r3,0(r2)
	uliLittleEndianDword[1] = uliTemp;
802057a4:	e0bfff17 	ldw	r2,-4(fp)
802057a8:	10800104 	addi	r2,r2,4
802057ac:	e0fffe17 	ldw	r3,-8(fp)
802057b0:	10c00015 	stw	r3,0(r2)

}
802057b4:	0001883a 	nop
802057b8:	e037883a 	mov	sp,fp
802057bc:	df000017 	ldw	fp,0(sp)
802057c0:	dec00104 	addi	sp,sp,4
802057c4:	f800283a 	ret

802057c8 <pattern_createPattern>:
#include "pattern.h"

alt_u32 pattern_createPattern(alt_u8 mem_number, alt_u32 mem_offset, alt_u8 ccd_number, alt_u8 ccd_side, alt_u32 width_cols, alt_u32 height_rows, alt_u8 timecode)
{
802057c8:	deffef04 	addi	sp,sp,-68
802057cc:	dfc01015 	stw	ra,64(sp)
802057d0:	df000f15 	stw	fp,60(sp)
802057d4:	dcc00e15 	stw	r19,56(sp)
802057d8:	dc800d15 	stw	r18,52(sp)
802057dc:	dc400c15 	stw	r17,48(sp)
802057e0:	dc000b15 	stw	r16,44(sp)
802057e4:	df000f04 	addi	fp,sp,60
802057e8:	2011883a 	mov	r8,r4
802057ec:	e17ff815 	stw	r5,-32(fp)
802057f0:	3009883a 	mov	r4,r6
802057f4:	3807883a 	mov	r3,r7
802057f8:	e0800417 	ldw	r2,16(fp)
802057fc:	e23ff705 	stb	r8,-36(fp)
80205800:	e13ff905 	stb	r4,-28(fp)
80205804:	e0fffa05 	stb	r3,-24(fp)
80205808:	e0bffb05 	stb	r2,-20(fp)
	bDdr2SwitchMemory(mem_number); // Switch to the desired memory
8020580c:	e0bff703 	ldbu	r2,-36(fp)
80205810:	1009883a 	mov	r4,r2
80205814:	02012940 	call	80201294 <bDdr2SwitchMemory>
	alt_u32 offset = mem_offset;
80205818:	e0bff817 	ldw	r2,-32(fp)
8020581c:	e0bff115 	stw	r2,-60(fp)
	alt_u8 i = 0;
80205820:	e03ff205 	stb	zero,-56(fp)
	TSdmaPixelDataBlock *pxPixelData = (TSdmaPixelDataBlock *) (DDR2_EXT_ADDR_WINDOWED_BASE + offset); // Address the structure
80205824:	e0bff117 	ldw	r2,-60(fp)
80205828:	e0bff315 	stw	r2,-52(fp)
	for (alt_u32 row = 0; row < height_rows; row++) // row sweep
8020582c:	e03ff415 	stw	zero,-48(fp)
80205830:	00003706 	br	80205910 <pattern_createPattern+0x148>
	{
		for (alt_u32 col = 0; col < width_cols; col++) // column sweep
80205834:	e03ff515 	stw	zero,-44(fp)
80205838:	00002f06 	br	802058f8 <pattern_createPattern+0x130>
		{
			if (i == 64) // filled one block of memory, time to save full pattern and readress the structure
8020583c:	e0bff203 	ldbu	r2,-56(fp)
80205840:	10801018 	cmpnei	r2,r2,64
80205844:	10000b1e 	bne	r2,zero,80205874 <pattern_createPattern+0xac>
			{
				pxPixelData->ulliMask = PATTERN_MEMORY_FULLMASK;
80205848:	e0bff317 	ldw	r2,-52(fp)
8020584c:	00ffffc4 	movi	r3,-1
80205850:	10c02015 	stw	r3,128(r2)
80205854:	00ffffc4 	movi	r3,-1
80205858:	10c02115 	stw	r3,132(r2)
				offset += sizeof(TSdmaPixelDataBlock);
8020585c:	e0bff117 	ldw	r2,-60(fp)
80205860:	10802204 	addi	r2,r2,136
80205864:	e0bff115 	stw	r2,-60(fp)
				pxPixelData = (TSdmaPixelDataBlock *) (DDR2_EXT_ADDR_WINDOWED_BASE + offset);
80205868:	e0bff117 	ldw	r2,-60(fp)
8020586c:	e0bff315 	stw	r2,-52(fp)
				i = 0;
80205870:	e03ff205 	stb	zero,-56(fp)
			}
			// Generate pattern pixel (16-bits)
			pxPixelData->usiPixel[i++] = PATTERN_MASK_TIMECODE(timecode) | PATTERN_MASK_CCDNUMBER(ccd_number) | PATTERN_MASK_CCDSIDE(ccd_side) | PATTERN_MASK_ROW(row) | PATTERN_MASK_COLUMN(col);
80205874:	e0bff203 	ldbu	r2,-56(fp)
80205878:	10c00044 	addi	r3,r2,1
8020587c:	e0fff205 	stb	r3,-56(fp)
80205880:	10803fcc 	andi	r2,r2,255
80205884:	e0fffb03 	ldbu	r3,-20(fp)
80205888:	1806937a 	slli	r3,r3,13
8020588c:	1809883a 	mov	r4,r3
80205890:	e0fff903 	ldbu	r3,-28(fp)
80205894:	18c000cc 	andi	r3,r3,3
80205898:	180692fa 	slli	r3,r3,11
8020589c:	20c6b03a 	or	r3,r4,r3
802058a0:	1809883a 	mov	r4,r3
802058a4:	e0fffa03 	ldbu	r3,-24(fp)
802058a8:	18c0004c 	andi	r3,r3,1
802058ac:	180692ba 	slli	r3,r3,10
802058b0:	20c6b03a 	or	r3,r4,r3
802058b4:	1809883a 	mov	r4,r3
802058b8:	e0fff417 	ldw	r3,-48(fp)
802058bc:	18c007cc 	andi	r3,r3,31
802058c0:	1806917a 	slli	r3,r3,5
802058c4:	20c6b03a 	or	r3,r4,r3
802058c8:	1809883a 	mov	r4,r3
802058cc:	e0fff517 	ldw	r3,-44(fp)
802058d0:	18c007cc 	andi	r3,r3,31
802058d4:	20c6b03a 	or	r3,r4,r3
802058d8:	1809883a 	mov	r4,r3
802058dc:	e0fff317 	ldw	r3,-52(fp)
802058e0:	1085883a 	add	r2,r2,r2
802058e4:	1885883a 	add	r2,r3,r2
802058e8:	1100000d 	sth	r4,0(r2)
	alt_u32 offset = mem_offset;
	alt_u8 i = 0;
	TSdmaPixelDataBlock *pxPixelData = (TSdmaPixelDataBlock *) (DDR2_EXT_ADDR_WINDOWED_BASE + offset); // Address the structure
	for (alt_u32 row = 0; row < height_rows; row++) // row sweep
	{
		for (alt_u32 col = 0; col < width_cols; col++) // column sweep
802058ec:	e0bff517 	ldw	r2,-44(fp)
802058f0:	10800044 	addi	r2,r2,1
802058f4:	e0bff515 	stw	r2,-44(fp)
802058f8:	e0fff517 	ldw	r3,-44(fp)
802058fc:	e0800217 	ldw	r2,8(fp)
80205900:	18bfce36 	bltu	r3,r2,8020583c <__reset+0xfa1e583c>
{
	bDdr2SwitchMemory(mem_number); // Switch to the desired memory
	alt_u32 offset = mem_offset;
	alt_u8 i = 0;
	TSdmaPixelDataBlock *pxPixelData = (TSdmaPixelDataBlock *) (DDR2_EXT_ADDR_WINDOWED_BASE + offset); // Address the structure
	for (alt_u32 row = 0; row < height_rows; row++) // row sweep
80205904:	e0bff417 	ldw	r2,-48(fp)
80205908:	10800044 	addi	r2,r2,1
8020590c:	e0bff415 	stw	r2,-48(fp)
80205910:	e0fff417 	ldw	r3,-48(fp)
80205914:	e0800317 	ldw	r2,12(fp)
80205918:	18bfc636 	bltu	r3,r2,80205834 <__reset+0xfa1e5834>
//			pxPixelData->usiPixel[i++] = PATTERN_MASK_TIMECODE(PATTERN_TIMECODE_VALUE) | PATTERN_MASK_CCDNUMBER(ccd_number) | PATTERN_MASK_CCDSIDE(ccd_side) | PATTERN_MASK_ROW(row) | PATTERN_MASK_COLUMN(col);
			//pxPixelData->usiPixel[i++] = 0xFFFF;
		}
	}
	//pxPixelData->ulliMask = xSimMeb.xFeeControl.xNfee[0].xMemMap.xCommon.ucPaddingMask.ullWord;
	pxPixelData->ulliMask = 0;
8020591c:	e0bff317 	ldw	r2,-52(fp)
80205920:	10002015 	stw	zero,128(r2)
80205924:	10002115 	stw	zero,132(r2)
	for (alt_u8 j = 0; j < i; j++) // create the mask (i.e.: if i stops at block 3 , the mask will be 0b00...0111)
80205928:	e03ff605 	stb	zero,-40(fp)
8020592c:	00001c06 	br	802059a0 <pattern_createPattern+0x1d8>
	{
		pxPixelData->ulliMask |= 0x8000000000000000 >> j;
80205930:	e13ff317 	ldw	r4,-52(fp)
80205934:	20802017 	ldw	r2,128(r4)
80205938:	20c02117 	ldw	r3,132(r4)
8020593c:	e13ff603 	ldbu	r4,-40(fp)
80205940:	217ff804 	addi	r5,r4,-32
80205944:	28000416 	blt	r5,zero,80205958 <pattern_createPattern+0x190>
80205948:	01200034 	movhi	r4,32768
8020594c:	2160d83a 	srl	r16,r4,r5
80205950:	0023883a 	mov	r17,zero
80205954:	00000a06 	br	80205980 <pattern_createPattern+0x1b8>
80205958:	01600034 	movhi	r5,32768
8020595c:	280c907a 	slli	r6,r5,1
80205960:	014007c4 	movi	r5,31
80205964:	290bc83a 	sub	r5,r5,r4
80205968:	314a983a 	sll	r5,r6,r5
8020596c:	000d883a 	mov	r6,zero
80205970:	3120d83a 	srl	r16,r6,r4
80205974:	2c20b03a 	or	r16,r5,r16
80205978:	01600034 	movhi	r5,32768
8020597c:	2922d83a 	srl	r17,r5,r4
80205980:	1424b03a 	or	r18,r2,r16
80205984:	1c66b03a 	or	r19,r3,r17
80205988:	e0bff317 	ldw	r2,-52(fp)
8020598c:	14802015 	stw	r18,128(r2)
80205990:	14c02115 	stw	r19,132(r2)
			//pxPixelData->usiPixel[i++] = 0xFFFF;
		}
	}
	//pxPixelData->ulliMask = xSimMeb.xFeeControl.xNfee[0].xMemMap.xCommon.ucPaddingMask.ullWord;
	pxPixelData->ulliMask = 0;
	for (alt_u8 j = 0; j < i; j++) // create the mask (i.e.: if i stops at block 3 , the mask will be 0b00...0111)
80205994:	e0bff603 	ldbu	r2,-40(fp)
80205998:	10800044 	addi	r2,r2,1
8020599c:	e0bff605 	stb	r2,-40(fp)
802059a0:	e0fff603 	ldbu	r3,-40(fp)
802059a4:	e0bff203 	ldbu	r2,-56(fp)
802059a8:	18bfe136 	bltu	r3,r2,80205930 <__reset+0xfa1e5930>
	{
		pxPixelData->ulliMask |= 0x8000000000000000 >> j;
	}

	while (i < 64) {
802059ac:	00000806 	br	802059d0 <pattern_createPattern+0x208>
		pxPixelData->usiPixel[i++] = 0x0000;
802059b0:	e0bff203 	ldbu	r2,-56(fp)
802059b4:	10c00044 	addi	r3,r2,1
802059b8:	e0fff205 	stb	r3,-56(fp)
802059bc:	10803fcc 	andi	r2,r2,255
802059c0:	e0fff317 	ldw	r3,-52(fp)
802059c4:	1085883a 	add	r2,r2,r2
802059c8:	1885883a 	add	r2,r3,r2
802059cc:	1000000d 	sth	zero,0(r2)
	for (alt_u8 j = 0; j < i; j++) // create the mask (i.e.: if i stops at block 3 , the mask will be 0b00...0111)
	{
		pxPixelData->ulliMask |= 0x8000000000000000 >> j;
	}

	while (i < 64) {
802059d0:	e0bff203 	ldbu	r2,-56(fp)
802059d4:	10801030 	cmpltui	r2,r2,64
802059d8:	103ff51e 	bne	r2,zero,802059b0 <__reset+0xfa1e59b0>
		pxPixelData->usiPixel[i++] = 0x0000;
	}

	offset += sizeof(TSdmaPixelDataBlock); // increment offset so we return the next available memory block
802059dc:	e0bff117 	ldw	r2,-60(fp)
802059e0:	10802204 	addi	r2,r2,136
802059e4:	e0bff115 	stw	r2,-60(fp)
	return offset;
802059e8:	e0bff117 	ldw	r2,-60(fp)
}
802059ec:	e6fffc04 	addi	sp,fp,-16
802059f0:	dfc00517 	ldw	ra,20(sp)
802059f4:	df000417 	ldw	fp,16(sp)
802059f8:	dcc00317 	ldw	r19,12(sp)
802059fc:	dc800217 	ldw	r18,8(sp)
80205a00:	dc400117 	ldw	r17,4(sp)
80205a04:	dc000017 	ldw	r16,0(sp)
80205a08:	dec00604 	addi	sp,sp,24
80205a0c:	f800283a 	ret

80205a10 <__divsf3>:
80205a10:	defff504 	addi	sp,sp,-44
80205a14:	200cd5fa 	srli	r6,r4,23
80205a18:	dcc00415 	stw	r19,16(sp)
80205a1c:	2026d7fa 	srli	r19,r4,31
80205a20:	00c02034 	movhi	r3,128
80205a24:	dd800715 	stw	r22,28(sp)
80205a28:	dd000515 	stw	r20,20(sp)
80205a2c:	dc800315 	stw	r18,12(sp)
80205a30:	18ffffc4 	addi	r3,r3,-1
80205a34:	dfc00a15 	stw	ra,40(sp)
80205a38:	df000915 	stw	fp,36(sp)
80205a3c:	ddc00815 	stw	r23,32(sp)
80205a40:	dd400615 	stw	r21,24(sp)
80205a44:	dc400215 	stw	r17,8(sp)
80205a48:	dc000115 	stw	r16,4(sp)
80205a4c:	35003fcc 	andi	r20,r6,255
80205a50:	1924703a 	and	r18,r3,r4
80205a54:	9d803fcc 	andi	r22,r19,255
80205a58:	a0005226 	beq	r20,zero,80205ba4 <__divsf3+0x194>
80205a5c:	00803fc4 	movi	r2,255
80205a60:	a0802e26 	beq	r20,r2,80205b1c <__divsf3+0x10c>
80205a64:	91002034 	orhi	r4,r18,128
80205a68:	202490fa 	slli	r18,r4,3
80205a6c:	a53fe044 	addi	r20,r20,-127
80205a70:	0021883a 	mov	r16,zero
80205a74:	002f883a 	mov	r23,zero
80205a78:	280cd5fa 	srli	r6,r5,23
80205a7c:	282ad7fa 	srli	r21,r5,31
80205a80:	00c02034 	movhi	r3,128
80205a84:	18ffffc4 	addi	r3,r3,-1
80205a88:	31803fcc 	andi	r6,r6,255
80205a8c:	1962703a 	and	r17,r3,r5
80205a90:	af003fcc 	andi	fp,r21,255
80205a94:	30004a26 	beq	r6,zero,80205bc0 <__divsf3+0x1b0>
80205a98:	00803fc4 	movi	r2,255
80205a9c:	30804526 	beq	r6,r2,80205bb4 <__divsf3+0x1a4>
80205aa0:	89402034 	orhi	r5,r17,128
80205aa4:	282290fa 	slli	r17,r5,3
80205aa8:	31bfe044 	addi	r6,r6,-127
80205aac:	000b883a 	mov	r5,zero
80205ab0:	2c20b03a 	or	r16,r5,r16
80205ab4:	802090ba 	slli	r16,r16,2
80205ab8:	00a00834 	movhi	r2,32800
80205abc:	1096b704 	addi	r2,r2,23260
80205ac0:	80a1883a 	add	r16,r16,r2
80205ac4:	81000017 	ldw	r4,0(r16)
80205ac8:	9d46f03a 	xor	r3,r19,r21
80205acc:	180f883a 	mov	r7,r3
80205ad0:	18803fcc 	andi	r2,r3,255
80205ad4:	a18dc83a 	sub	r6,r20,r6
80205ad8:	2000683a 	jmp	r4
80205adc:	80205cc0 	call	880205cc <__reset+0x20005cc>
80205ae0:	80205b44 	addi	zero,r16,-32403
80205ae4:	80205cb4 	orhi	zero,r16,33138
80205ae8:	80205b30 	cmpltui	zero,r16,33132
80205aec:	80205cb4 	orhi	zero,r16,33138
80205af0:	80205c8c 	andi	zero,r16,33138
80205af4:	80205cb4 	orhi	zero,r16,33138
80205af8:	80205b30 	cmpltui	zero,r16,33132
80205afc:	80205b44 	addi	zero,r16,-32403
80205b00:	80205b44 	addi	zero,r16,-32403
80205b04:	80205c8c 	andi	zero,r16,33138
80205b08:	80205b30 	cmpltui	zero,r16,33132
80205b0c:	80205da0 	cmpeqi	zero,r16,-32394
80205b10:	80205da0 	cmpeqi	zero,r16,-32394
80205b14:	80205da0 	cmpeqi	zero,r16,-32394
80205b18:	80205d54 	ori	zero,r16,33141
80205b1c:	9000581e 	bne	r18,zero,80205c80 <__divsf3+0x270>
80205b20:	04000204 	movi	r16,8
80205b24:	05c00084 	movi	r23,2
80205b28:	003fd306 	br	80205a78 <__reset+0xfa1e5a78>
80205b2c:	0023883a 	mov	r17,zero
80205b30:	e02d883a 	mov	r22,fp
80205b34:	282f883a 	mov	r23,r5
80205b38:	00800084 	movi	r2,2
80205b3c:	b8808f1e 	bne	r23,r2,80205d7c <__divsf3+0x36c>
80205b40:	b005883a 	mov	r2,r22
80205b44:	11c0004c 	andi	r7,r2,1
80205b48:	013fffc4 	movi	r4,-1
80205b4c:	000d883a 	mov	r6,zero
80205b50:	21003fcc 	andi	r4,r4,255
80205b54:	200895fa 	slli	r4,r4,23
80205b58:	38803fcc 	andi	r2,r7,255
80205b5c:	00c02034 	movhi	r3,128
80205b60:	100497fa 	slli	r2,r2,31
80205b64:	18ffffc4 	addi	r3,r3,-1
80205b68:	30c6703a 	and	r3,r6,r3
80205b6c:	1906b03a 	or	r3,r3,r4
80205b70:	1884b03a 	or	r2,r3,r2
80205b74:	dfc00a17 	ldw	ra,40(sp)
80205b78:	df000917 	ldw	fp,36(sp)
80205b7c:	ddc00817 	ldw	r23,32(sp)
80205b80:	dd800717 	ldw	r22,28(sp)
80205b84:	dd400617 	ldw	r21,24(sp)
80205b88:	dd000517 	ldw	r20,20(sp)
80205b8c:	dcc00417 	ldw	r19,16(sp)
80205b90:	dc800317 	ldw	r18,12(sp)
80205b94:	dc400217 	ldw	r17,8(sp)
80205b98:	dc000117 	ldw	r16,4(sp)
80205b9c:	dec00b04 	addi	sp,sp,44
80205ba0:	f800283a 	ret
80205ba4:	90002b1e 	bne	r18,zero,80205c54 <__divsf3+0x244>
80205ba8:	04000104 	movi	r16,4
80205bac:	05c00044 	movi	r23,1
80205bb0:	003fb106 	br	80205a78 <__reset+0xfa1e5a78>
80205bb4:	8800251e 	bne	r17,zero,80205c4c <__divsf3+0x23c>
80205bb8:	01400084 	movi	r5,2
80205bbc:	00000206 	br	80205bc8 <__divsf3+0x1b8>
80205bc0:	88001a1e 	bne	r17,zero,80205c2c <__divsf3+0x21c>
80205bc4:	01400044 	movi	r5,1
80205bc8:	8160b03a 	or	r16,r16,r5
80205bcc:	802090ba 	slli	r16,r16,2
80205bd0:	00e00834 	movhi	r3,32800
80205bd4:	18d6fb04 	addi	r3,r3,23532
80205bd8:	80e1883a 	add	r16,r16,r3
80205bdc:	80c00017 	ldw	r3,0(r16)
80205be0:	9d44f03a 	xor	r2,r19,r21
80205be4:	a18dc83a 	sub	r6,r20,r6
80205be8:	1800683a 	jmp	r3
80205bec:	80205b44 	addi	zero,r16,-32403
80205bf0:	80205b44 	addi	zero,r16,-32403
80205bf4:	80205d90 	cmplti	zero,r16,-32394
80205bf8:	80205b2c 	andhi	zero,r16,33132
80205bfc:	80205d90 	cmplti	zero,r16,-32394
80205c00:	80205c8c 	andi	zero,r16,33138
80205c04:	80205d90 	cmplti	zero,r16,-32394
80205c08:	80205b2c 	andhi	zero,r16,33132
80205c0c:	80205b44 	addi	zero,r16,-32403
80205c10:	80205b44 	addi	zero,r16,-32403
80205c14:	80205c8c 	andi	zero,r16,33138
80205c18:	80205b2c 	andhi	zero,r16,33132
80205c1c:	80205da0 	cmpeqi	zero,r16,-32394
80205c20:	80205da0 	cmpeqi	zero,r16,-32394
80205c24:	80205da0 	cmpeqi	zero,r16,-32394
80205c28:	80205db8 	rdprs	zero,r16,-32394
80205c2c:	8809883a 	mov	r4,r17
80205c30:	02061740 	call	80206174 <__clzsi2>
80205c34:	10fffec4 	addi	r3,r2,-5
80205c38:	10801d84 	addi	r2,r2,118
80205c3c:	88e2983a 	sll	r17,r17,r3
80205c40:	008dc83a 	sub	r6,zero,r2
80205c44:	000b883a 	mov	r5,zero
80205c48:	003f9906 	br	80205ab0 <__reset+0xfa1e5ab0>
80205c4c:	014000c4 	movi	r5,3
80205c50:	003f9706 	br	80205ab0 <__reset+0xfa1e5ab0>
80205c54:	9009883a 	mov	r4,r18
80205c58:	d9400015 	stw	r5,0(sp)
80205c5c:	02061740 	call	80206174 <__clzsi2>
80205c60:	10fffec4 	addi	r3,r2,-5
80205c64:	11801d84 	addi	r6,r2,118
80205c68:	90e4983a 	sll	r18,r18,r3
80205c6c:	01a9c83a 	sub	r20,zero,r6
80205c70:	0021883a 	mov	r16,zero
80205c74:	002f883a 	mov	r23,zero
80205c78:	d9400017 	ldw	r5,0(sp)
80205c7c:	003f7e06 	br	80205a78 <__reset+0xfa1e5a78>
80205c80:	04000304 	movi	r16,12
80205c84:	05c000c4 	movi	r23,3
80205c88:	003f7b06 	br	80205a78 <__reset+0xfa1e5a78>
80205c8c:	01802034 	movhi	r6,128
80205c90:	000f883a 	mov	r7,zero
80205c94:	31bfffc4 	addi	r6,r6,-1
80205c98:	013fffc4 	movi	r4,-1
80205c9c:	003fac06 	br	80205b50 <__reset+0xfa1e5b50>
80205ca0:	01400044 	movi	r5,1
80205ca4:	2909c83a 	sub	r4,r5,r4
80205ca8:	00c006c4 	movi	r3,27
80205cac:	19004b0e 	bge	r3,r4,80205ddc <__divsf3+0x3cc>
80205cb0:	114e703a 	and	r7,r2,r5
80205cb4:	0009883a 	mov	r4,zero
80205cb8:	000d883a 	mov	r6,zero
80205cbc:	003fa406 	br	80205b50 <__reset+0xfa1e5b50>
80205cc0:	9006917a 	slli	r3,r18,5
80205cc4:	8822917a 	slli	r17,r17,5
80205cc8:	1c40372e 	bgeu	r3,r17,80205da8 <__divsf3+0x398>
80205ccc:	31bfffc4 	addi	r6,r6,-1
80205cd0:	010006c4 	movi	r4,27
80205cd4:	000b883a 	mov	r5,zero
80205cd8:	180f883a 	mov	r7,r3
80205cdc:	294b883a 	add	r5,r5,r5
80205ce0:	18c7883a 	add	r3,r3,r3
80205ce4:	38000116 	blt	r7,zero,80205cec <__divsf3+0x2dc>
80205ce8:	1c400236 	bltu	r3,r17,80205cf4 <__divsf3+0x2e4>
80205cec:	1c47c83a 	sub	r3,r3,r17
80205cf0:	29400054 	ori	r5,r5,1
80205cf4:	213fffc4 	addi	r4,r4,-1
80205cf8:	203ff71e 	bne	r4,zero,80205cd8 <__reset+0xfa1e5cd8>
80205cfc:	1806c03a 	cmpne	r3,r3,zero
80205d00:	1962b03a 	or	r17,r3,r5
80205d04:	31001fc4 	addi	r4,r6,127
80205d08:	013fe50e 	bge	zero,r4,80205ca0 <__reset+0xfa1e5ca0>
80205d0c:	88c001cc 	andi	r3,r17,7
80205d10:	18000426 	beq	r3,zero,80205d24 <__divsf3+0x314>
80205d14:	88c003cc 	andi	r3,r17,15
80205d18:	01400104 	movi	r5,4
80205d1c:	19400126 	beq	r3,r5,80205d24 <__divsf3+0x314>
80205d20:	8963883a 	add	r17,r17,r5
80205d24:	88c2002c 	andhi	r3,r17,2048
80205d28:	18000426 	beq	r3,zero,80205d3c <__divsf3+0x32c>
80205d2c:	00fe0034 	movhi	r3,63488
80205d30:	18ffffc4 	addi	r3,r3,-1
80205d34:	31002004 	addi	r4,r6,128
80205d38:	88e2703a 	and	r17,r17,r3
80205d3c:	00c03f84 	movi	r3,254
80205d40:	193f8016 	blt	r3,r4,80205b44 <__reset+0xfa1e5b44>
80205d44:	880c91ba 	slli	r6,r17,6
80205d48:	11c0004c 	andi	r7,r2,1
80205d4c:	300cd27a 	srli	r6,r6,9
80205d50:	003f7f06 	br	80205b50 <__reset+0xfa1e5b50>
80205d54:	9080102c 	andhi	r2,r18,64
80205d58:	10000226 	beq	r2,zero,80205d64 <__divsf3+0x354>
80205d5c:	8880102c 	andhi	r2,r17,64
80205d60:	10001826 	beq	r2,zero,80205dc4 <__divsf3+0x3b4>
80205d64:	00802034 	movhi	r2,128
80205d68:	91801034 	orhi	r6,r18,64
80205d6c:	10bfffc4 	addi	r2,r2,-1
80205d70:	980f883a 	mov	r7,r19
80205d74:	308c703a 	and	r6,r6,r2
80205d78:	003fc706 	br	80205c98 <__reset+0xfa1e5c98>
80205d7c:	008000c4 	movi	r2,3
80205d80:	b8802d26 	beq	r23,r2,80205e38 <__divsf3+0x428>
80205d84:	00c00044 	movi	r3,1
80205d88:	b005883a 	mov	r2,r22
80205d8c:	b8ffdd1e 	bne	r23,r3,80205d04 <__reset+0xfa1e5d04>
80205d90:	11c0004c 	andi	r7,r2,1
80205d94:	0009883a 	mov	r4,zero
80205d98:	000d883a 	mov	r6,zero
80205d9c:	003f6c06 	br	80205b50 <__reset+0xfa1e5b50>
80205da0:	9023883a 	mov	r17,r18
80205da4:	003f6406 	br	80205b38 <__reset+0xfa1e5b38>
80205da8:	1c47c83a 	sub	r3,r3,r17
80205dac:	01000684 	movi	r4,26
80205db0:	01400044 	movi	r5,1
80205db4:	003fc806 	br	80205cd8 <__reset+0xfa1e5cd8>
80205db8:	9080102c 	andhi	r2,r18,64
80205dbc:	103fe926 	beq	r2,zero,80205d64 <__reset+0xfa1e5d64>
80205dc0:	0023883a 	mov	r17,zero
80205dc4:	00802034 	movhi	r2,128
80205dc8:	89801034 	orhi	r6,r17,64
80205dcc:	10bfffc4 	addi	r2,r2,-1
80205dd0:	a80f883a 	mov	r7,r21
80205dd4:	308c703a 	and	r6,r6,r2
80205dd8:	003faf06 	br	80205c98 <__reset+0xfa1e5c98>
80205ddc:	01c00804 	movi	r7,32
80205de0:	390fc83a 	sub	r7,r7,r4
80205de4:	89ce983a 	sll	r7,r17,r7
80205de8:	890ad83a 	srl	r5,r17,r4
80205dec:	380ec03a 	cmpne	r7,r7,zero
80205df0:	29cab03a 	or	r5,r5,r7
80205df4:	28c001cc 	andi	r3,r5,7
80205df8:	18000426 	beq	r3,zero,80205e0c <__divsf3+0x3fc>
80205dfc:	28c003cc 	andi	r3,r5,15
80205e00:	01000104 	movi	r4,4
80205e04:	19000126 	beq	r3,r4,80205e0c <__divsf3+0x3fc>
80205e08:	290b883a 	add	r5,r5,r4
80205e0c:	28c1002c 	andhi	r3,r5,1024
80205e10:	18000426 	beq	r3,zero,80205e24 <__divsf3+0x414>
80205e14:	11c0004c 	andi	r7,r2,1
80205e18:	01000044 	movi	r4,1
80205e1c:	000d883a 	mov	r6,zero
80205e20:	003f4b06 	br	80205b50 <__reset+0xfa1e5b50>
80205e24:	280a91ba 	slli	r5,r5,6
80205e28:	11c0004c 	andi	r7,r2,1
80205e2c:	0009883a 	mov	r4,zero
80205e30:	280cd27a 	srli	r6,r5,9
80205e34:	003f4606 	br	80205b50 <__reset+0xfa1e5b50>
80205e38:	00802034 	movhi	r2,128
80205e3c:	89801034 	orhi	r6,r17,64
80205e40:	10bfffc4 	addi	r2,r2,-1
80205e44:	b00f883a 	mov	r7,r22
80205e48:	308c703a 	and	r6,r6,r2
80205e4c:	003f9206 	br	80205c98 <__reset+0xfa1e5c98>

80205e50 <__floatsisf>:
80205e50:	defffd04 	addi	sp,sp,-12
80205e54:	dfc00215 	stw	ra,8(sp)
80205e58:	dc400115 	stw	r17,4(sp)
80205e5c:	dc000015 	stw	r16,0(sp)
80205e60:	20003526 	beq	r4,zero,80205f38 <__floatsisf+0xe8>
80205e64:	2021883a 	mov	r16,r4
80205e68:	2022d7fa 	srli	r17,r4,31
80205e6c:	20003616 	blt	r4,zero,80205f48 <__floatsisf+0xf8>
80205e70:	8009883a 	mov	r4,r16
80205e74:	02061740 	call	80206174 <__clzsi2>
80205e78:	00c02784 	movi	r3,158
80205e7c:	1887c83a 	sub	r3,r3,r2
80205e80:	01002584 	movi	r4,150
80205e84:	20c01416 	blt	r4,r3,80205ed8 <__floatsisf+0x88>
80205e88:	20c9c83a 	sub	r4,r4,r3
80205e8c:	8120983a 	sll	r16,r16,r4
80205e90:	00802034 	movhi	r2,128
80205e94:	10bfffc4 	addi	r2,r2,-1
80205e98:	8809883a 	mov	r4,r17
80205e9c:	80a0703a 	and	r16,r16,r2
80205ea0:	18803fcc 	andi	r2,r3,255
80205ea4:	100695fa 	slli	r3,r2,23
80205ea8:	20803fcc 	andi	r2,r4,255
80205eac:	100897fa 	slli	r4,r2,31
80205eb0:	00802034 	movhi	r2,128
80205eb4:	10bfffc4 	addi	r2,r2,-1
80205eb8:	8084703a 	and	r2,r16,r2
80205ebc:	10c4b03a 	or	r2,r2,r3
80205ec0:	1104b03a 	or	r2,r2,r4
80205ec4:	dfc00217 	ldw	ra,8(sp)
80205ec8:	dc400117 	ldw	r17,4(sp)
80205ecc:	dc000017 	ldw	r16,0(sp)
80205ed0:	dec00304 	addi	sp,sp,12
80205ed4:	f800283a 	ret
80205ed8:	01002644 	movi	r4,153
80205edc:	20c01c16 	blt	r4,r3,80205f50 <__floatsisf+0x100>
80205ee0:	20c9c83a 	sub	r4,r4,r3
80205ee4:	8120983a 	sll	r16,r16,r4
80205ee8:	013f0034 	movhi	r4,64512
80205eec:	213fffc4 	addi	r4,r4,-1
80205ef0:	814001cc 	andi	r5,r16,7
80205ef4:	8108703a 	and	r4,r16,r4
80205ef8:	28000426 	beq	r5,zero,80205f0c <__floatsisf+0xbc>
80205efc:	840003cc 	andi	r16,r16,15
80205f00:	01400104 	movi	r5,4
80205f04:	81400126 	beq	r16,r5,80205f0c <__floatsisf+0xbc>
80205f08:	2149883a 	add	r4,r4,r5
80205f0c:	2141002c 	andhi	r5,r4,1024
80205f10:	28000526 	beq	r5,zero,80205f28 <__floatsisf+0xd8>
80205f14:	00c027c4 	movi	r3,159
80205f18:	1887c83a 	sub	r3,r3,r2
80205f1c:	00bf0034 	movhi	r2,64512
80205f20:	10bfffc4 	addi	r2,r2,-1
80205f24:	2088703a 	and	r4,r4,r2
80205f28:	202091ba 	slli	r16,r4,6
80205f2c:	8809883a 	mov	r4,r17
80205f30:	8020d27a 	srli	r16,r16,9
80205f34:	003fda06 	br	80205ea0 <__reset+0xfa1e5ea0>
80205f38:	0009883a 	mov	r4,zero
80205f3c:	0007883a 	mov	r3,zero
80205f40:	0021883a 	mov	r16,zero
80205f44:	003fd606 	br	80205ea0 <__reset+0xfa1e5ea0>
80205f48:	0121c83a 	sub	r16,zero,r4
80205f4c:	003fc806 	br	80205e70 <__reset+0xfa1e5e70>
80205f50:	01002e44 	movi	r4,185
80205f54:	20c9c83a 	sub	r4,r4,r3
80205f58:	01400144 	movi	r5,5
80205f5c:	8108983a 	sll	r4,r16,r4
80205f60:	288bc83a 	sub	r5,r5,r2
80205f64:	8160d83a 	srl	r16,r16,r5
80205f68:	2008c03a 	cmpne	r4,r4,zero
80205f6c:	8120b03a 	or	r16,r16,r4
80205f70:	003fdd06 	br	80205ee8 <__reset+0xfa1e5ee8>

80205f74 <__floatunsisf>:
80205f74:	defffe04 	addi	sp,sp,-8
80205f78:	dfc00115 	stw	ra,4(sp)
80205f7c:	dc000015 	stw	r16,0(sp)
80205f80:	20002c26 	beq	r4,zero,80206034 <__floatunsisf+0xc0>
80205f84:	2021883a 	mov	r16,r4
80205f88:	02061740 	call	80206174 <__clzsi2>
80205f8c:	00c02784 	movi	r3,158
80205f90:	1887c83a 	sub	r3,r3,r2
80205f94:	01002584 	movi	r4,150
80205f98:	20c00f16 	blt	r4,r3,80205fd8 <__floatunsisf+0x64>
80205f9c:	20c9c83a 	sub	r4,r4,r3
80205fa0:	8108983a 	sll	r4,r16,r4
80205fa4:	00802034 	movhi	r2,128
80205fa8:	10bfffc4 	addi	r2,r2,-1
80205fac:	2088703a 	and	r4,r4,r2
80205fb0:	18803fcc 	andi	r2,r3,255
80205fb4:	100695fa 	slli	r3,r2,23
80205fb8:	00802034 	movhi	r2,128
80205fbc:	10bfffc4 	addi	r2,r2,-1
80205fc0:	2084703a 	and	r2,r4,r2
80205fc4:	10c4b03a 	or	r2,r2,r3
80205fc8:	dfc00117 	ldw	ra,4(sp)
80205fcc:	dc000017 	ldw	r16,0(sp)
80205fd0:	dec00204 	addi	sp,sp,8
80205fd4:	f800283a 	ret
80205fd8:	01002644 	movi	r4,153
80205fdc:	20c01816 	blt	r4,r3,80206040 <__floatunsisf+0xcc>
80205fe0:	20c9c83a 	sub	r4,r4,r3
80205fe4:	8108983a 	sll	r4,r16,r4
80205fe8:	017f0034 	movhi	r5,64512
80205fec:	297fffc4 	addi	r5,r5,-1
80205ff0:	218001cc 	andi	r6,r4,7
80205ff4:	214a703a 	and	r5,r4,r5
80205ff8:	30000426 	beq	r6,zero,8020600c <__floatunsisf+0x98>
80205ffc:	210003cc 	andi	r4,r4,15
80206000:	01800104 	movi	r6,4
80206004:	21800126 	beq	r4,r6,8020600c <__floatunsisf+0x98>
80206008:	298b883a 	add	r5,r5,r6
8020600c:	2901002c 	andhi	r4,r5,1024
80206010:	20000526 	beq	r4,zero,80206028 <__floatunsisf+0xb4>
80206014:	00c027c4 	movi	r3,159
80206018:	1887c83a 	sub	r3,r3,r2
8020601c:	00bf0034 	movhi	r2,64512
80206020:	10bfffc4 	addi	r2,r2,-1
80206024:	288a703a 	and	r5,r5,r2
80206028:	280891ba 	slli	r4,r5,6
8020602c:	2008d27a 	srli	r4,r4,9
80206030:	003fdf06 	br	80205fb0 <__reset+0xfa1e5fb0>
80206034:	0007883a 	mov	r3,zero
80206038:	0009883a 	mov	r4,zero
8020603c:	003fdc06 	br	80205fb0 <__reset+0xfa1e5fb0>
80206040:	01402e44 	movi	r5,185
80206044:	28cbc83a 	sub	r5,r5,r3
80206048:	01000144 	movi	r4,5
8020604c:	2089c83a 	sub	r4,r4,r2
80206050:	814a983a 	sll	r5,r16,r5
80206054:	8108d83a 	srl	r4,r16,r4
80206058:	2820c03a 	cmpne	r16,r5,zero
8020605c:	2408b03a 	or	r4,r4,r16
80206060:	003fe106 	br	80205fe8 <__reset+0xfa1e5fe8>

80206064 <__extendsfdf2>:
80206064:	200ad5fa 	srli	r5,r4,23
80206068:	defffd04 	addi	sp,sp,-12
8020606c:	dc400115 	stw	r17,4(sp)
80206070:	29403fcc 	andi	r5,r5,255
80206074:	29800044 	addi	r6,r5,1
80206078:	04402034 	movhi	r17,128
8020607c:	dc000015 	stw	r16,0(sp)
80206080:	8c7fffc4 	addi	r17,r17,-1
80206084:	dfc00215 	stw	ra,8(sp)
80206088:	31803fcc 	andi	r6,r6,255
8020608c:	00800044 	movi	r2,1
80206090:	8922703a 	and	r17,r17,r4
80206094:	2020d7fa 	srli	r16,r4,31
80206098:	1180110e 	bge	r2,r6,802060e0 <__extendsfdf2+0x7c>
8020609c:	880cd0fa 	srli	r6,r17,3
802060a0:	8822977a 	slli	r17,r17,29
802060a4:	2940e004 	addi	r5,r5,896
802060a8:	2941ffcc 	andi	r5,r5,2047
802060ac:	2804953a 	slli	r2,r5,20
802060b0:	01400434 	movhi	r5,16
802060b4:	800697fa 	slli	r3,r16,31
802060b8:	297fffc4 	addi	r5,r5,-1
802060bc:	314a703a 	and	r5,r6,r5
802060c0:	288ab03a 	or	r5,r5,r2
802060c4:	28c6b03a 	or	r3,r5,r3
802060c8:	8805883a 	mov	r2,r17
802060cc:	dfc00217 	ldw	ra,8(sp)
802060d0:	dc400117 	ldw	r17,4(sp)
802060d4:	dc000017 	ldw	r16,0(sp)
802060d8:	dec00304 	addi	sp,sp,12
802060dc:	f800283a 	ret
802060e0:	2800111e 	bne	r5,zero,80206128 <__extendsfdf2+0xc4>
802060e4:	88001c26 	beq	r17,zero,80206158 <__extendsfdf2+0xf4>
802060e8:	8809883a 	mov	r4,r17
802060ec:	02061740 	call	80206174 <__clzsi2>
802060f0:	00c00284 	movi	r3,10
802060f4:	18801b16 	blt	r3,r2,80206164 <__extendsfdf2+0x100>
802060f8:	018002c4 	movi	r6,11
802060fc:	308dc83a 	sub	r6,r6,r2
80206100:	11000544 	addi	r4,r2,21
80206104:	8986d83a 	srl	r3,r17,r6
80206108:	8922983a 	sll	r17,r17,r4
8020610c:	0180e244 	movi	r6,905
80206110:	01400434 	movhi	r5,16
80206114:	3085c83a 	sub	r2,r6,r2
80206118:	297fffc4 	addi	r5,r5,-1
8020611c:	194c703a 	and	r6,r3,r5
80206120:	1141ffcc 	andi	r5,r2,2047
80206124:	003fe006 	br	802060a8 <__reset+0xfa1e60a8>
80206128:	88000826 	beq	r17,zero,8020614c <__extendsfdf2+0xe8>
8020612c:	880cd0fa 	srli	r6,r17,3
80206130:	00800434 	movhi	r2,16
80206134:	10bfffc4 	addi	r2,r2,-1
80206138:	31800234 	orhi	r6,r6,8
8020613c:	8822977a 	slli	r17,r17,29
80206140:	308c703a 	and	r6,r6,r2
80206144:	0141ffc4 	movi	r5,2047
80206148:	003fd706 	br	802060a8 <__reset+0xfa1e60a8>
8020614c:	0141ffc4 	movi	r5,2047
80206150:	000d883a 	mov	r6,zero
80206154:	003fd406 	br	802060a8 <__reset+0xfa1e60a8>
80206158:	000b883a 	mov	r5,zero
8020615c:	000d883a 	mov	r6,zero
80206160:	003fd106 	br	802060a8 <__reset+0xfa1e60a8>
80206164:	11bffd44 	addi	r6,r2,-11
80206168:	8986983a 	sll	r3,r17,r6
8020616c:	0023883a 	mov	r17,zero
80206170:	003fe606 	br	8020610c <__reset+0xfa1e610c>

80206174 <__clzsi2>:
80206174:	00bfffd4 	movui	r2,65535
80206178:	11000536 	bltu	r2,r4,80206190 <__clzsi2+0x1c>
8020617c:	00803fc4 	movi	r2,255
80206180:	11000f36 	bltu	r2,r4,802061c0 <__clzsi2+0x4c>
80206184:	00800804 	movi	r2,32
80206188:	0007883a 	mov	r3,zero
8020618c:	00000506 	br	802061a4 <__clzsi2+0x30>
80206190:	00804034 	movhi	r2,256
80206194:	10bfffc4 	addi	r2,r2,-1
80206198:	11000c2e 	bgeu	r2,r4,802061cc <__clzsi2+0x58>
8020619c:	00800204 	movi	r2,8
802061a0:	00c00604 	movi	r3,24
802061a4:	20c8d83a 	srl	r4,r4,r3
802061a8:	00e008b4 	movhi	r3,32802
802061ac:	18f3a284 	addi	r3,r3,-12662
802061b0:	1909883a 	add	r4,r3,r4
802061b4:	20c00003 	ldbu	r3,0(r4)
802061b8:	10c5c83a 	sub	r2,r2,r3
802061bc:	f800283a 	ret
802061c0:	00800604 	movi	r2,24
802061c4:	00c00204 	movi	r3,8
802061c8:	003ff606 	br	802061a4 <__reset+0xfa1e61a4>
802061cc:	00800404 	movi	r2,16
802061d0:	1007883a 	mov	r3,r2
802061d4:	003ff306 	br	802061a4 <__reset+0xfa1e61a4>

802061d8 <_fwrite_r>:
802061d8:	defff504 	addi	sp,sp,-44
802061dc:	dc800815 	stw	r18,32(sp)
802061e0:	39a5383a 	mul	r18,r7,r6
802061e4:	d8800304 	addi	r2,sp,12
802061e8:	d8800015 	stw	r2,0(sp)
802061ec:	00800044 	movi	r2,1
802061f0:	dcc00915 	stw	r19,36(sp)
802061f4:	dc400715 	stw	r17,28(sp)
802061f8:	dc000615 	stw	r16,24(sp)
802061fc:	d9400315 	stw	r5,12(sp)
80206200:	dfc00a15 	stw	ra,40(sp)
80206204:	dc800415 	stw	r18,16(sp)
80206208:	dc800215 	stw	r18,8(sp)
8020620c:	d8800115 	stw	r2,4(sp)
80206210:	3027883a 	mov	r19,r6
80206214:	3821883a 	mov	r16,r7
80206218:	2023883a 	mov	r17,r4
8020621c:	d9400b17 	ldw	r5,44(sp)
80206220:	20000226 	beq	r4,zero,8020622c <_fwrite_r+0x54>
80206224:	20800e17 	ldw	r2,56(r4)
80206228:	10001a26 	beq	r2,zero,80206294 <_fwrite_r+0xbc>
8020622c:	2880030b 	ldhu	r2,12(r5)
80206230:	10c8000c 	andi	r3,r2,8192
80206234:	1800061e 	bne	r3,zero,80206250 <_fwrite_r+0x78>
80206238:	29001917 	ldw	r4,100(r5)
8020623c:	00f7ffc4 	movi	r3,-8193
80206240:	10880014 	ori	r2,r2,8192
80206244:	20c6703a 	and	r3,r4,r3
80206248:	2880030d 	sth	r2,12(r5)
8020624c:	28c01915 	stw	r3,100(r5)
80206250:	d80d883a 	mov	r6,sp
80206254:	8809883a 	mov	r4,r17
80206258:	020cfbc0 	call	8020cfbc <__sfvwrite_r>
8020625c:	10000b26 	beq	r2,zero,8020628c <_fwrite_r+0xb4>
80206260:	d9000217 	ldw	r4,8(sp)
80206264:	980b883a 	mov	r5,r19
80206268:	9109c83a 	sub	r4,r18,r4
8020626c:	0213b7c0 	call	80213b7c <__udivsi3>
80206270:	dfc00a17 	ldw	ra,40(sp)
80206274:	dcc00917 	ldw	r19,36(sp)
80206278:	dc800817 	ldw	r18,32(sp)
8020627c:	dc400717 	ldw	r17,28(sp)
80206280:	dc000617 	ldw	r16,24(sp)
80206284:	dec00b04 	addi	sp,sp,44
80206288:	f800283a 	ret
8020628c:	8005883a 	mov	r2,r16
80206290:	003ff706 	br	80206270 <__reset+0xfa1e6270>
80206294:	d9400515 	stw	r5,20(sp)
80206298:	020cb380 	call	8020cb38 <__sinit>
8020629c:	d9400517 	ldw	r5,20(sp)
802062a0:	003fe206 	br	8020622c <__reset+0xfa1e622c>

802062a4 <fwrite>:
802062a4:	defffe04 	addi	sp,sp,-8
802062a8:	00a008b4 	movhi	r2,32802
802062ac:	d9c00015 	stw	r7,0(sp)
802062b0:	10bc2d04 	addi	r2,r2,-3916
802062b4:	300f883a 	mov	r7,r6
802062b8:	280d883a 	mov	r6,r5
802062bc:	200b883a 	mov	r5,r4
802062c0:	11000017 	ldw	r4,0(r2)
802062c4:	dfc00115 	stw	ra,4(sp)
802062c8:	02061d80 	call	802061d8 <_fwrite_r>
802062cc:	dfc00117 	ldw	ra,4(sp)
802062d0:	dec00204 	addi	sp,sp,8
802062d4:	f800283a 	ret

802062d8 <memcpy>:
802062d8:	defffd04 	addi	sp,sp,-12
802062dc:	dfc00215 	stw	ra,8(sp)
802062e0:	dc400115 	stw	r17,4(sp)
802062e4:	dc000015 	stw	r16,0(sp)
802062e8:	00c003c4 	movi	r3,15
802062ec:	2005883a 	mov	r2,r4
802062f0:	1980452e 	bgeu	r3,r6,80206408 <memcpy+0x130>
802062f4:	2906b03a 	or	r3,r5,r4
802062f8:	18c000cc 	andi	r3,r3,3
802062fc:	1800441e 	bne	r3,zero,80206410 <memcpy+0x138>
80206300:	347ffc04 	addi	r17,r6,-16
80206304:	8822d13a 	srli	r17,r17,4
80206308:	28c00104 	addi	r3,r5,4
8020630c:	23400104 	addi	r13,r4,4
80206310:	8820913a 	slli	r16,r17,4
80206314:	2b000204 	addi	r12,r5,8
80206318:	22c00204 	addi	r11,r4,8
8020631c:	84000504 	addi	r16,r16,20
80206320:	2a800304 	addi	r10,r5,12
80206324:	22400304 	addi	r9,r4,12
80206328:	2c21883a 	add	r16,r5,r16
8020632c:	2811883a 	mov	r8,r5
80206330:	200f883a 	mov	r7,r4
80206334:	41000017 	ldw	r4,0(r8)
80206338:	1fc00017 	ldw	ra,0(r3)
8020633c:	63c00017 	ldw	r15,0(r12)
80206340:	39000015 	stw	r4,0(r7)
80206344:	53800017 	ldw	r14,0(r10)
80206348:	6fc00015 	stw	ra,0(r13)
8020634c:	5bc00015 	stw	r15,0(r11)
80206350:	4b800015 	stw	r14,0(r9)
80206354:	18c00404 	addi	r3,r3,16
80206358:	39c00404 	addi	r7,r7,16
8020635c:	42000404 	addi	r8,r8,16
80206360:	6b400404 	addi	r13,r13,16
80206364:	63000404 	addi	r12,r12,16
80206368:	5ac00404 	addi	r11,r11,16
8020636c:	52800404 	addi	r10,r10,16
80206370:	4a400404 	addi	r9,r9,16
80206374:	1c3fef1e 	bne	r3,r16,80206334 <__reset+0xfa1e6334>
80206378:	89c00044 	addi	r7,r17,1
8020637c:	380e913a 	slli	r7,r7,4
80206380:	310003cc 	andi	r4,r6,15
80206384:	02c000c4 	movi	r11,3
80206388:	11c7883a 	add	r3,r2,r7
8020638c:	29cb883a 	add	r5,r5,r7
80206390:	5900212e 	bgeu	r11,r4,80206418 <memcpy+0x140>
80206394:	1813883a 	mov	r9,r3
80206398:	2811883a 	mov	r8,r5
8020639c:	200f883a 	mov	r7,r4
802063a0:	42800017 	ldw	r10,0(r8)
802063a4:	4a400104 	addi	r9,r9,4
802063a8:	39ffff04 	addi	r7,r7,-4
802063ac:	4abfff15 	stw	r10,-4(r9)
802063b0:	42000104 	addi	r8,r8,4
802063b4:	59fffa36 	bltu	r11,r7,802063a0 <__reset+0xfa1e63a0>
802063b8:	213fff04 	addi	r4,r4,-4
802063bc:	2008d0ba 	srli	r4,r4,2
802063c0:	318000cc 	andi	r6,r6,3
802063c4:	21000044 	addi	r4,r4,1
802063c8:	2109883a 	add	r4,r4,r4
802063cc:	2109883a 	add	r4,r4,r4
802063d0:	1907883a 	add	r3,r3,r4
802063d4:	290b883a 	add	r5,r5,r4
802063d8:	30000626 	beq	r6,zero,802063f4 <memcpy+0x11c>
802063dc:	198d883a 	add	r6,r3,r6
802063e0:	29c00003 	ldbu	r7,0(r5)
802063e4:	18c00044 	addi	r3,r3,1
802063e8:	29400044 	addi	r5,r5,1
802063ec:	19ffffc5 	stb	r7,-1(r3)
802063f0:	19bffb1e 	bne	r3,r6,802063e0 <__reset+0xfa1e63e0>
802063f4:	dfc00217 	ldw	ra,8(sp)
802063f8:	dc400117 	ldw	r17,4(sp)
802063fc:	dc000017 	ldw	r16,0(sp)
80206400:	dec00304 	addi	sp,sp,12
80206404:	f800283a 	ret
80206408:	2007883a 	mov	r3,r4
8020640c:	003ff206 	br	802063d8 <__reset+0xfa1e63d8>
80206410:	2007883a 	mov	r3,r4
80206414:	003ff106 	br	802063dc <__reset+0xfa1e63dc>
80206418:	200d883a 	mov	r6,r4
8020641c:	003fee06 	br	802063d8 <__reset+0xfa1e63d8>

80206420 <_printf_r>:
80206420:	defffd04 	addi	sp,sp,-12
80206424:	2805883a 	mov	r2,r5
80206428:	dfc00015 	stw	ra,0(sp)
8020642c:	d9800115 	stw	r6,4(sp)
80206430:	d9c00215 	stw	r7,8(sp)
80206434:	21400217 	ldw	r5,8(r4)
80206438:	d9c00104 	addi	r7,sp,4
8020643c:	100d883a 	mov	r6,r2
80206440:	02088940 	call	80208894 <___vfprintf_internal_r>
80206444:	dfc00017 	ldw	ra,0(sp)
80206448:	dec00304 	addi	sp,sp,12
8020644c:	f800283a 	ret

80206450 <printf>:
80206450:	defffc04 	addi	sp,sp,-16
80206454:	dfc00015 	stw	ra,0(sp)
80206458:	d9400115 	stw	r5,4(sp)
8020645c:	d9800215 	stw	r6,8(sp)
80206460:	d9c00315 	stw	r7,12(sp)
80206464:	00a008b4 	movhi	r2,32802
80206468:	10bc2d04 	addi	r2,r2,-3916
8020646c:	10800017 	ldw	r2,0(r2)
80206470:	200b883a 	mov	r5,r4
80206474:	d9800104 	addi	r6,sp,4
80206478:	11000217 	ldw	r4,8(r2)
8020647c:	020aa8c0 	call	8020aa8c <__vfprintf_internal>
80206480:	dfc00017 	ldw	ra,0(sp)
80206484:	dec00404 	addi	sp,sp,16
80206488:	f800283a 	ret

8020648c <_puts_r>:
8020648c:	defff604 	addi	sp,sp,-40
80206490:	dc000715 	stw	r16,28(sp)
80206494:	2021883a 	mov	r16,r4
80206498:	2809883a 	mov	r4,r5
8020649c:	dc400815 	stw	r17,32(sp)
802064a0:	dfc00915 	stw	ra,36(sp)
802064a4:	2823883a 	mov	r17,r5
802064a8:	02066240 	call	80206624 <strlen>
802064ac:	10c00044 	addi	r3,r2,1
802064b0:	d8800115 	stw	r2,4(sp)
802064b4:	00a008b4 	movhi	r2,32802
802064b8:	10b3e404 	addi	r2,r2,-12400
802064bc:	d8800215 	stw	r2,8(sp)
802064c0:	00800044 	movi	r2,1
802064c4:	d8800315 	stw	r2,12(sp)
802064c8:	00800084 	movi	r2,2
802064cc:	dc400015 	stw	r17,0(sp)
802064d0:	d8c00615 	stw	r3,24(sp)
802064d4:	dec00415 	stw	sp,16(sp)
802064d8:	d8800515 	stw	r2,20(sp)
802064dc:	80000226 	beq	r16,zero,802064e8 <_puts_r+0x5c>
802064e0:	80800e17 	ldw	r2,56(r16)
802064e4:	10001426 	beq	r2,zero,80206538 <_puts_r+0xac>
802064e8:	81400217 	ldw	r5,8(r16)
802064ec:	2880030b 	ldhu	r2,12(r5)
802064f0:	10c8000c 	andi	r3,r2,8192
802064f4:	1800061e 	bne	r3,zero,80206510 <_puts_r+0x84>
802064f8:	29001917 	ldw	r4,100(r5)
802064fc:	00f7ffc4 	movi	r3,-8193
80206500:	10880014 	ori	r2,r2,8192
80206504:	20c6703a 	and	r3,r4,r3
80206508:	2880030d 	sth	r2,12(r5)
8020650c:	28c01915 	stw	r3,100(r5)
80206510:	d9800404 	addi	r6,sp,16
80206514:	8009883a 	mov	r4,r16
80206518:	020cfbc0 	call	8020cfbc <__sfvwrite_r>
8020651c:	1000091e 	bne	r2,zero,80206544 <_puts_r+0xb8>
80206520:	00800284 	movi	r2,10
80206524:	dfc00917 	ldw	ra,36(sp)
80206528:	dc400817 	ldw	r17,32(sp)
8020652c:	dc000717 	ldw	r16,28(sp)
80206530:	dec00a04 	addi	sp,sp,40
80206534:	f800283a 	ret
80206538:	8009883a 	mov	r4,r16
8020653c:	020cb380 	call	8020cb38 <__sinit>
80206540:	003fe906 	br	802064e8 <__reset+0xfa1e64e8>
80206544:	00bfffc4 	movi	r2,-1
80206548:	003ff606 	br	80206524 <__reset+0xfa1e6524>

8020654c <puts>:
8020654c:	00a008b4 	movhi	r2,32802
80206550:	10bc2d04 	addi	r2,r2,-3916
80206554:	200b883a 	mov	r5,r4
80206558:	11000017 	ldw	r4,0(r2)
8020655c:	020648c1 	jmpi	8020648c <_puts_r>

80206560 <_sprintf_r>:
80206560:	deffe404 	addi	sp,sp,-112
80206564:	2807883a 	mov	r3,r5
80206568:	dfc01a15 	stw	ra,104(sp)
8020656c:	d9c01b15 	stw	r7,108(sp)
80206570:	00a00034 	movhi	r2,32768
80206574:	10bfffc4 	addi	r2,r2,-1
80206578:	02008204 	movi	r8,520
8020657c:	d8800215 	stw	r2,8(sp)
80206580:	d8800515 	stw	r2,20(sp)
80206584:	d9c01b04 	addi	r7,sp,108
80206588:	d80b883a 	mov	r5,sp
8020658c:	00bfffc4 	movi	r2,-1
80206590:	d8c00015 	stw	r3,0(sp)
80206594:	d8c00415 	stw	r3,16(sp)
80206598:	da00030d 	sth	r8,12(sp)
8020659c:	d880038d 	sth	r2,14(sp)
802065a0:	02066bc0 	call	802066bc <___svfprintf_internal_r>
802065a4:	d8c00017 	ldw	r3,0(sp)
802065a8:	18000005 	stb	zero,0(r3)
802065ac:	dfc01a17 	ldw	ra,104(sp)
802065b0:	dec01c04 	addi	sp,sp,112
802065b4:	f800283a 	ret

802065b8 <sprintf>:
802065b8:	deffe304 	addi	sp,sp,-116
802065bc:	2007883a 	mov	r3,r4
802065c0:	dfc01a15 	stw	ra,104(sp)
802065c4:	d9801b15 	stw	r6,108(sp)
802065c8:	d9c01c15 	stw	r7,112(sp)
802065cc:	012008b4 	movhi	r4,32802
802065d0:	213c2d04 	addi	r4,r4,-3916
802065d4:	21000017 	ldw	r4,0(r4)
802065d8:	00a00034 	movhi	r2,32768
802065dc:	10bfffc4 	addi	r2,r2,-1
802065e0:	280d883a 	mov	r6,r5
802065e4:	02008204 	movi	r8,520
802065e8:	d8800215 	stw	r2,8(sp)
802065ec:	d8800515 	stw	r2,20(sp)
802065f0:	d9c01b04 	addi	r7,sp,108
802065f4:	d80b883a 	mov	r5,sp
802065f8:	00bfffc4 	movi	r2,-1
802065fc:	d8c00015 	stw	r3,0(sp)
80206600:	d8c00415 	stw	r3,16(sp)
80206604:	da00030d 	sth	r8,12(sp)
80206608:	d880038d 	sth	r2,14(sp)
8020660c:	02066bc0 	call	802066bc <___svfprintf_internal_r>
80206610:	d8c00017 	ldw	r3,0(sp)
80206614:	18000005 	stb	zero,0(r3)
80206618:	dfc01a17 	ldw	ra,104(sp)
8020661c:	dec01d04 	addi	sp,sp,116
80206620:	f800283a 	ret

80206624 <strlen>:
80206624:	208000cc 	andi	r2,r4,3
80206628:	10002026 	beq	r2,zero,802066ac <strlen+0x88>
8020662c:	20800007 	ldb	r2,0(r4)
80206630:	10002026 	beq	r2,zero,802066b4 <strlen+0x90>
80206634:	2005883a 	mov	r2,r4
80206638:	00000206 	br	80206644 <strlen+0x20>
8020663c:	10c00007 	ldb	r3,0(r2)
80206640:	18001826 	beq	r3,zero,802066a4 <strlen+0x80>
80206644:	10800044 	addi	r2,r2,1
80206648:	10c000cc 	andi	r3,r2,3
8020664c:	183ffb1e 	bne	r3,zero,8020663c <__reset+0xfa1e663c>
80206650:	10c00017 	ldw	r3,0(r2)
80206654:	01ffbff4 	movhi	r7,65279
80206658:	39ffbfc4 	addi	r7,r7,-257
8020665c:	00ca303a 	nor	r5,zero,r3
80206660:	01a02074 	movhi	r6,32897
80206664:	19c7883a 	add	r3,r3,r7
80206668:	31a02004 	addi	r6,r6,-32640
8020666c:	1946703a 	and	r3,r3,r5
80206670:	1986703a 	and	r3,r3,r6
80206674:	1800091e 	bne	r3,zero,8020669c <strlen+0x78>
80206678:	10800104 	addi	r2,r2,4
8020667c:	10c00017 	ldw	r3,0(r2)
80206680:	19cb883a 	add	r5,r3,r7
80206684:	00c6303a 	nor	r3,zero,r3
80206688:	28c6703a 	and	r3,r5,r3
8020668c:	1986703a 	and	r3,r3,r6
80206690:	183ff926 	beq	r3,zero,80206678 <__reset+0xfa1e6678>
80206694:	00000106 	br	8020669c <strlen+0x78>
80206698:	10800044 	addi	r2,r2,1
8020669c:	10c00007 	ldb	r3,0(r2)
802066a0:	183ffd1e 	bne	r3,zero,80206698 <__reset+0xfa1e6698>
802066a4:	1105c83a 	sub	r2,r2,r4
802066a8:	f800283a 	ret
802066ac:	2005883a 	mov	r2,r4
802066b0:	003fe706 	br	80206650 <__reset+0xfa1e6650>
802066b4:	0005883a 	mov	r2,zero
802066b8:	f800283a 	ret

802066bc <___svfprintf_internal_r>:
802066bc:	deffb704 	addi	sp,sp,-292
802066c0:	dfc04815 	stw	ra,288(sp)
802066c4:	ddc04615 	stw	r23,280(sp)
802066c8:	d9402c15 	stw	r5,176(sp)
802066cc:	d9003915 	stw	r4,228(sp)
802066d0:	302f883a 	mov	r23,r6
802066d4:	d9c02d15 	stw	r7,180(sp)
802066d8:	df004715 	stw	fp,284(sp)
802066dc:	dd804515 	stw	r22,276(sp)
802066e0:	dd404415 	stw	r21,272(sp)
802066e4:	dd004315 	stw	r20,268(sp)
802066e8:	dcc04215 	stw	r19,264(sp)
802066ec:	dc804115 	stw	r18,260(sp)
802066f0:	dc404015 	stw	r17,256(sp)
802066f4:	dc003f15 	stw	r16,252(sp)
802066f8:	020d6ac0 	call	8020d6ac <_localeconv_r>
802066fc:	10800017 	ldw	r2,0(r2)
80206700:	1009883a 	mov	r4,r2
80206704:	d8803415 	stw	r2,208(sp)
80206708:	02066240 	call	80206624 <strlen>
8020670c:	d8c02c17 	ldw	r3,176(sp)
80206710:	d8803815 	stw	r2,224(sp)
80206714:	1880030b 	ldhu	r2,12(r3)
80206718:	1080200c 	andi	r2,r2,128
8020671c:	10000226 	beq	r2,zero,80206728 <___svfprintf_internal_r+0x6c>
80206720:	18800417 	ldw	r2,16(r3)
80206724:	10067f26 	beq	r2,zero,80208124 <___svfprintf_internal_r+0x1a68>
80206728:	dcc03917 	ldw	r19,228(sp)
8020672c:	d8c00404 	addi	r3,sp,16
80206730:	056008b4 	movhi	r21,32802
80206734:	d9001e04 	addi	r4,sp,120
80206738:	ad73f584 	addi	r21,r21,-12330
8020673c:	d8c01e15 	stw	r3,120(sp)
80206740:	d8002015 	stw	zero,128(sp)
80206744:	d8001f15 	stw	zero,124(sp)
80206748:	d8003315 	stw	zero,204(sp)
8020674c:	d8003615 	stw	zero,216(sp)
80206750:	d8003715 	stw	zero,220(sp)
80206754:	1811883a 	mov	r8,r3
80206758:	d8003a15 	stw	zero,232(sp)
8020675c:	d8003b15 	stw	zero,236(sp)
80206760:	d8002f15 	stw	zero,188(sp)
80206764:	d9002815 	stw	r4,160(sp)
80206768:	b8800007 	ldb	r2,0(r23)
8020676c:	10026726 	beq	r2,zero,8020710c <___svfprintf_internal_r+0xa50>
80206770:	00c00944 	movi	r3,37
80206774:	b821883a 	mov	r16,r23
80206778:	10c0021e 	bne	r2,r3,80206784 <___svfprintf_internal_r+0xc8>
8020677c:	00001406 	br	802067d0 <___svfprintf_internal_r+0x114>
80206780:	10c00326 	beq	r2,r3,80206790 <___svfprintf_internal_r+0xd4>
80206784:	84000044 	addi	r16,r16,1
80206788:	80800007 	ldb	r2,0(r16)
8020678c:	103ffc1e 	bne	r2,zero,80206780 <__reset+0xfa1e6780>
80206790:	85e3c83a 	sub	r17,r16,r23
80206794:	88000e26 	beq	r17,zero,802067d0 <___svfprintf_internal_r+0x114>
80206798:	d8c02017 	ldw	r3,128(sp)
8020679c:	d8801f17 	ldw	r2,124(sp)
802067a0:	45c00015 	stw	r23,0(r8)
802067a4:	1c47883a 	add	r3,r3,r17
802067a8:	10800044 	addi	r2,r2,1
802067ac:	d8c02015 	stw	r3,128(sp)
802067b0:	44400115 	stw	r17,4(r8)
802067b4:	d8801f15 	stw	r2,124(sp)
802067b8:	00c001c4 	movi	r3,7
802067bc:	18809716 	blt	r3,r2,80206a1c <___svfprintf_internal_r+0x360>
802067c0:	42000204 	addi	r8,r8,8
802067c4:	d9402f17 	ldw	r5,188(sp)
802067c8:	2c4b883a 	add	r5,r5,r17
802067cc:	d9402f15 	stw	r5,188(sp)
802067d0:	80800007 	ldb	r2,0(r16)
802067d4:	10009826 	beq	r2,zero,80206a38 <___svfprintf_internal_r+0x37c>
802067d8:	84400047 	ldb	r17,1(r16)
802067dc:	00bfffc4 	movi	r2,-1
802067e0:	85c00044 	addi	r23,r16,1
802067e4:	d8002785 	stb	zero,158(sp)
802067e8:	0007883a 	mov	r3,zero
802067ec:	000f883a 	mov	r7,zero
802067f0:	d8802915 	stw	r2,164(sp)
802067f4:	d8003115 	stw	zero,196(sp)
802067f8:	0025883a 	mov	r18,zero
802067fc:	01401604 	movi	r5,88
80206800:	01800244 	movi	r6,9
80206804:	02800a84 	movi	r10,42
80206808:	02401b04 	movi	r9,108
8020680c:	bdc00044 	addi	r23,r23,1
80206810:	88bff804 	addi	r2,r17,-32
80206814:	2882f036 	bltu	r5,r2,802073d8 <___svfprintf_internal_r+0xd1c>
80206818:	100490ba 	slli	r2,r2,2
8020681c:	01200834 	movhi	r4,32800
80206820:	211a0c04 	addi	r4,r4,26672
80206824:	1105883a 	add	r2,r2,r4
80206828:	10800017 	ldw	r2,0(r2)
8020682c:	1000683a 	jmp	r2
80206830:	80207340 	call	88020734 <__reset+0x2000734>
80206834:	802073d8 	cmpnei	zero,r16,-32305
80206838:	802073d8 	cmpnei	zero,r16,-32305
8020683c:	80207334 	orhi	zero,r16,33228
80206840:	802073d8 	cmpnei	zero,r16,-32305
80206844:	802073d8 	cmpnei	zero,r16,-32305
80206848:	802073d8 	cmpnei	zero,r16,-32305
8020684c:	802073d8 	cmpnei	zero,r16,-32305
80206850:	802073d8 	cmpnei	zero,r16,-32305
80206854:	802073d8 	cmpnei	zero,r16,-32305
80206858:	80206a94 	ori	zero,r16,33194
8020685c:	80207270 	cmpltui	zero,r16,33225
80206860:	802073d8 	cmpnei	zero,r16,-32305
80206864:	802069a4 	muli	zero,r16,-32346
80206868:	80206abc 	xorhi	zero,r16,33194
8020686c:	802073d8 	cmpnei	zero,r16,-32305
80206870:	80206b30 	cmpltui	zero,r16,33196
80206874:	80206afc 	xorhi	zero,r16,33195
80206878:	80206afc 	xorhi	zero,r16,33195
8020687c:	80206afc 	xorhi	zero,r16,33195
80206880:	80206afc 	xorhi	zero,r16,33195
80206884:	80206afc 	xorhi	zero,r16,33195
80206888:	80206afc 	xorhi	zero,r16,33195
8020688c:	80206afc 	xorhi	zero,r16,33195
80206890:	80206afc 	xorhi	zero,r16,33195
80206894:	80206afc 	xorhi	zero,r16,33195
80206898:	802073d8 	cmpnei	zero,r16,-32305
8020689c:	802073d8 	cmpnei	zero,r16,-32305
802068a0:	802073d8 	cmpnei	zero,r16,-32305
802068a4:	802073d8 	cmpnei	zero,r16,-32305
802068a8:	802073d8 	cmpnei	zero,r16,-32305
802068ac:	802073d8 	cmpnei	zero,r16,-32305
802068b0:	802073d8 	cmpnei	zero,r16,-32305
802068b4:	802073d8 	cmpnei	zero,r16,-32305
802068b8:	802073d8 	cmpnei	zero,r16,-32305
802068bc:	802073d8 	cmpnei	zero,r16,-32305
802068c0:	80206be8 	cmpgeui	zero,r16,33199
802068c4:	80206b3c 	xorhi	zero,r16,33196
802068c8:	802073d8 	cmpnei	zero,r16,-32305
802068cc:	80206b3c 	xorhi	zero,r16,33196
802068d0:	802073d8 	cmpnei	zero,r16,-32305
802068d4:	802073d8 	cmpnei	zero,r16,-32305
802068d8:	802073d8 	cmpnei	zero,r16,-32305
802068dc:	802073d8 	cmpnei	zero,r16,-32305
802068e0:	80206bdc 	xori	zero,r16,33199
802068e4:	802073d8 	cmpnei	zero,r16,-32305
802068e8:	802073d8 	cmpnei	zero,r16,-32305
802068ec:	80206ca4 	muli	zero,r16,-32334
802068f0:	802073d8 	cmpnei	zero,r16,-32305
802068f4:	802073d8 	cmpnei	zero,r16,-32305
802068f8:	802073d8 	cmpnei	zero,r16,-32305
802068fc:	802073d8 	cmpnei	zero,r16,-32305
80206900:	802073d8 	cmpnei	zero,r16,-32305
80206904:	80207114 	ori	zero,r16,33220
80206908:	802073d8 	cmpnei	zero,r16,-32305
8020690c:	802073d8 	cmpnei	zero,r16,-32305
80206910:	80207174 	orhi	zero,r16,33221
80206914:	802073d8 	cmpnei	zero,r16,-32305
80206918:	802073d8 	cmpnei	zero,r16,-32305
8020691c:	802073d8 	cmpnei	zero,r16,-32305
80206920:	802073d8 	cmpnei	zero,r16,-32305
80206924:	802073d8 	cmpnei	zero,r16,-32305
80206928:	802073d8 	cmpnei	zero,r16,-32305
8020692c:	802073d8 	cmpnei	zero,r16,-32305
80206930:	802073d8 	cmpnei	zero,r16,-32305
80206934:	802073d8 	cmpnei	zero,r16,-32305
80206938:	802073d8 	cmpnei	zero,r16,-32305
8020693c:	80207224 	muli	zero,r16,-32312
80206940:	80207360 	cmpeqi	zero,r16,-32307
80206944:	80206b3c 	xorhi	zero,r16,33196
80206948:	80206b3c 	xorhi	zero,r16,33196
8020694c:	80206b3c 	xorhi	zero,r16,33196
80206950:	802073b4 	orhi	zero,r16,33230
80206954:	80207360 	cmpeqi	zero,r16,-32307
80206958:	802073d8 	cmpnei	zero,r16,-32305
8020695c:	802073d8 	cmpnei	zero,r16,-32305
80206960:	80207370 	cmpltui	zero,r16,33229
80206964:	802073d8 	cmpnei	zero,r16,-32305
80206968:	80207380 	call	88020738 <__reset+0x2000738>
8020696c:	80207260 	cmpeqi	zero,r16,-32311
80206970:	802069b0 	cmpltui	zero,r16,33190
80206974:	80207280 	call	88020728 <__reset+0x2000728>
80206978:	802073d8 	cmpnei	zero,r16,-32305
8020697c:	8020728c 	andi	zero,r16,33226
80206980:	802073d8 	cmpnei	zero,r16,-32305
80206984:	802072e8 	cmpgeui	zero,r16,33227
80206988:	802073d8 	cmpnei	zero,r16,-32305
8020698c:	802073d8 	cmpnei	zero,r16,-32305
80206990:	802072f8 	rdprs	zero,r16,-32309
80206994:	d9003117 	ldw	r4,196(sp)
80206998:	d8802d15 	stw	r2,180(sp)
8020699c:	0109c83a 	sub	r4,zero,r4
802069a0:	d9003115 	stw	r4,196(sp)
802069a4:	94800114 	ori	r18,r18,4
802069a8:	bc400007 	ldb	r17,0(r23)
802069ac:	003f9706 	br	8020680c <__reset+0xfa1e680c>
802069b0:	00800c04 	movi	r2,48
802069b4:	d9002d17 	ldw	r4,180(sp)
802069b8:	d9402917 	ldw	r5,164(sp)
802069bc:	d8802705 	stb	r2,156(sp)
802069c0:	00801e04 	movi	r2,120
802069c4:	d8802745 	stb	r2,157(sp)
802069c8:	d8002785 	stb	zero,158(sp)
802069cc:	20c00104 	addi	r3,r4,4
802069d0:	25000017 	ldw	r20,0(r4)
802069d4:	002d883a 	mov	r22,zero
802069d8:	90800094 	ori	r2,r18,2
802069dc:	28028616 	blt	r5,zero,802073f8 <___svfprintf_internal_r+0xd3c>
802069e0:	00bfdfc4 	movi	r2,-129
802069e4:	90a4703a 	and	r18,r18,r2
802069e8:	d8c02d15 	stw	r3,180(sp)
802069ec:	94800094 	ori	r18,r18,2
802069f0:	a002731e 	bne	r20,zero,802073c0 <___svfprintf_internal_r+0xd04>
802069f4:	00a008b4 	movhi	r2,32802
802069f8:	10b3ee04 	addi	r2,r2,-12360
802069fc:	d8803a15 	stw	r2,232(sp)
80206a00:	04401e04 	movi	r17,120
80206a04:	d8c02917 	ldw	r3,164(sp)
80206a08:	0039883a 	mov	fp,zero
80206a0c:	1801d526 	beq	r3,zero,80207164 <___svfprintf_internal_r+0xaa8>
80206a10:	0029883a 	mov	r20,zero
80206a14:	002d883a 	mov	r22,zero
80206a18:	0001f106 	br	802071e0 <___svfprintf_internal_r+0xb24>
80206a1c:	d9402c17 	ldw	r5,176(sp)
80206a20:	d9801e04 	addi	r6,sp,120
80206a24:	9809883a 	mov	r4,r19
80206a28:	020fc4c0 	call	8020fc4c <__ssprint_r>
80206a2c:	1000081e 	bne	r2,zero,80206a50 <___svfprintf_internal_r+0x394>
80206a30:	da000404 	addi	r8,sp,16
80206a34:	003f6306 	br	802067c4 <__reset+0xfa1e67c4>
80206a38:	d8802017 	ldw	r2,128(sp)
80206a3c:	10000426 	beq	r2,zero,80206a50 <___svfprintf_internal_r+0x394>
80206a40:	d9402c17 	ldw	r5,176(sp)
80206a44:	d9003917 	ldw	r4,228(sp)
80206a48:	d9801e04 	addi	r6,sp,120
80206a4c:	020fc4c0 	call	8020fc4c <__ssprint_r>
80206a50:	d8802c17 	ldw	r2,176(sp)
80206a54:	10c0030b 	ldhu	r3,12(r2)
80206a58:	d8802f17 	ldw	r2,188(sp)
80206a5c:	18c0100c 	andi	r3,r3,64
80206a60:	1805f51e 	bne	r3,zero,80208238 <___svfprintf_internal_r+0x1b7c>
80206a64:	dfc04817 	ldw	ra,288(sp)
80206a68:	df004717 	ldw	fp,284(sp)
80206a6c:	ddc04617 	ldw	r23,280(sp)
80206a70:	dd804517 	ldw	r22,276(sp)
80206a74:	dd404417 	ldw	r21,272(sp)
80206a78:	dd004317 	ldw	r20,268(sp)
80206a7c:	dcc04217 	ldw	r19,264(sp)
80206a80:	dc804117 	ldw	r18,260(sp)
80206a84:	dc404017 	ldw	r17,256(sp)
80206a88:	dc003f17 	ldw	r16,252(sp)
80206a8c:	dec04904 	addi	sp,sp,292
80206a90:	f800283a 	ret
80206a94:	d8802d17 	ldw	r2,180(sp)
80206a98:	d9002d17 	ldw	r4,180(sp)
80206a9c:	10800017 	ldw	r2,0(r2)
80206aa0:	d8803115 	stw	r2,196(sp)
80206aa4:	20800104 	addi	r2,r4,4
80206aa8:	d9003117 	ldw	r4,196(sp)
80206aac:	203fb916 	blt	r4,zero,80206994 <__reset+0xfa1e6994>
80206ab0:	d8802d15 	stw	r2,180(sp)
80206ab4:	bc400007 	ldb	r17,0(r23)
80206ab8:	003f5406 	br	8020680c <__reset+0xfa1e680c>
80206abc:	bc400007 	ldb	r17,0(r23)
80206ac0:	bac00044 	addi	r11,r23,1
80206ac4:	8a873926 	beq	r17,r10,802087ac <___svfprintf_internal_r+0x20f0>
80206ac8:	88bff404 	addi	r2,r17,-48
80206acc:	0009883a 	mov	r4,zero
80206ad0:	30868836 	bltu	r6,r2,802084f4 <___svfprintf_internal_r+0x1e38>
80206ad4:	5c400007 	ldb	r17,0(r11)
80206ad8:	210002a4 	muli	r4,r4,10
80206adc:	5dc00044 	addi	r23,r11,1
80206ae0:	b817883a 	mov	r11,r23
80206ae4:	2089883a 	add	r4,r4,r2
80206ae8:	88bff404 	addi	r2,r17,-48
80206aec:	30bff92e 	bgeu	r6,r2,80206ad4 <__reset+0xfa1e6ad4>
80206af0:	2005d716 	blt	r4,zero,80208250 <___svfprintf_internal_r+0x1b94>
80206af4:	d9002915 	stw	r4,164(sp)
80206af8:	003f4506 	br	80206810 <__reset+0xfa1e6810>
80206afc:	b809883a 	mov	r4,r23
80206b00:	d8003115 	stw	zero,196(sp)
80206b04:	88bff404 	addi	r2,r17,-48
80206b08:	0017883a 	mov	r11,zero
80206b0c:	24400007 	ldb	r17,0(r4)
80206b10:	5ac002a4 	muli	r11,r11,10
80206b14:	bdc00044 	addi	r23,r23,1
80206b18:	b809883a 	mov	r4,r23
80206b1c:	12d7883a 	add	r11,r2,r11
80206b20:	88bff404 	addi	r2,r17,-48
80206b24:	30bff92e 	bgeu	r6,r2,80206b0c <__reset+0xfa1e6b0c>
80206b28:	dac03115 	stw	r11,196(sp)
80206b2c:	003f3806 	br	80206810 <__reset+0xfa1e6810>
80206b30:	94802014 	ori	r18,r18,128
80206b34:	bc400007 	ldb	r17,0(r23)
80206b38:	003f3406 	br	8020680c <__reset+0xfa1e680c>
80206b3c:	18c03fcc 	andi	r3,r3,255
80206b40:	1807471e 	bne	r3,zero,80208860 <___svfprintf_internal_r+0x21a4>
80206b44:	9080020c 	andi	r2,r18,8
80206b48:	10047d26 	beq	r2,zero,80207d40 <___svfprintf_internal_r+0x1684>
80206b4c:	d8c02d17 	ldw	r3,180(sp)
80206b50:	d9002d17 	ldw	r4,180(sp)
80206b54:	d9402d17 	ldw	r5,180(sp)
80206b58:	18c00017 	ldw	r3,0(r3)
80206b5c:	21000117 	ldw	r4,4(r4)
80206b60:	29400204 	addi	r5,r5,8
80206b64:	d8c03615 	stw	r3,216(sp)
80206b68:	d9003715 	stw	r4,220(sp)
80206b6c:	d9402d15 	stw	r5,180(sp)
80206b70:	d9003617 	ldw	r4,216(sp)
80206b74:	d9403717 	ldw	r5,220(sp)
80206b78:	da003e15 	stw	r8,248(sp)
80206b7c:	04000044 	movi	r16,1
80206b80:	020f96c0 	call	8020f96c <__fpclassifyd>
80206b84:	da003e17 	ldw	r8,248(sp)
80206b88:	14044b1e 	bne	r2,r16,80207cb8 <___svfprintf_internal_r+0x15fc>
80206b8c:	d9003617 	ldw	r4,216(sp)
80206b90:	d9403717 	ldw	r5,220(sp)
80206b94:	000d883a 	mov	r6,zero
80206b98:	000f883a 	mov	r7,zero
80206b9c:	0214f300 	call	80214f30 <__ledf2>
80206ba0:	da003e17 	ldw	r8,248(sp)
80206ba4:	1005f316 	blt	r2,zero,80208374 <___svfprintf_internal_r+0x1cb8>
80206ba8:	df002783 	ldbu	fp,158(sp)
80206bac:	008011c4 	movi	r2,71
80206bb0:	1445590e 	bge	r2,r17,80208118 <___svfprintf_internal_r+0x1a5c>
80206bb4:	042008b4 	movhi	r16,32802
80206bb8:	8433e604 	addi	r16,r16,-12392
80206bbc:	00c000c4 	movi	r3,3
80206bc0:	00bfdfc4 	movi	r2,-129
80206bc4:	d8c02a15 	stw	r3,168(sp)
80206bc8:	90a4703a 	and	r18,r18,r2
80206bcc:	d8c02e15 	stw	r3,184(sp)
80206bd0:	d8002915 	stw	zero,164(sp)
80206bd4:	d8003215 	stw	zero,200(sp)
80206bd8:	00006606 	br	80206d74 <___svfprintf_internal_r+0x6b8>
80206bdc:	94800214 	ori	r18,r18,8
80206be0:	bc400007 	ldb	r17,0(r23)
80206be4:	003f0906 	br	8020680c <__reset+0xfa1e680c>
80206be8:	18c03fcc 	andi	r3,r3,255
80206bec:	1807181e 	bne	r3,zero,80208850 <___svfprintf_internal_r+0x2194>
80206bf0:	94800414 	ori	r18,r18,16
80206bf4:	9080080c 	andi	r2,r18,32
80206bf8:	10039626 	beq	r2,zero,80207a54 <___svfprintf_internal_r+0x1398>
80206bfc:	d9402d17 	ldw	r5,180(sp)
80206c00:	28800117 	ldw	r2,4(r5)
80206c04:	2d000017 	ldw	r20,0(r5)
80206c08:	29400204 	addi	r5,r5,8
80206c0c:	d9402d15 	stw	r5,180(sp)
80206c10:	102d883a 	mov	r22,r2
80206c14:	10039816 	blt	r2,zero,80207a78 <___svfprintf_internal_r+0x13bc>
80206c18:	d9402917 	ldw	r5,164(sp)
80206c1c:	df002783 	ldbu	fp,158(sp)
80206c20:	2803ab16 	blt	r5,zero,80207ad0 <___svfprintf_internal_r+0x1414>
80206c24:	00ffdfc4 	movi	r3,-129
80206c28:	a584b03a 	or	r2,r20,r22
80206c2c:	90e4703a 	and	r18,r18,r3
80206c30:	10014a26 	beq	r2,zero,8020715c <___svfprintf_internal_r+0xaa0>
80206c34:	b0034b26 	beq	r22,zero,80207964 <___svfprintf_internal_r+0x12a8>
80206c38:	dc402a15 	stw	r17,168(sp)
80206c3c:	dc001e04 	addi	r16,sp,120
80206c40:	b023883a 	mov	r17,r22
80206c44:	402d883a 	mov	r22,r8
80206c48:	a009883a 	mov	r4,r20
80206c4c:	880b883a 	mov	r5,r17
80206c50:	01800284 	movi	r6,10
80206c54:	000f883a 	mov	r7,zero
80206c58:	021354c0 	call	8021354c <__umoddi3>
80206c5c:	10800c04 	addi	r2,r2,48
80206c60:	843fffc4 	addi	r16,r16,-1
80206c64:	a009883a 	mov	r4,r20
80206c68:	880b883a 	mov	r5,r17
80206c6c:	80800005 	stb	r2,0(r16)
80206c70:	01800284 	movi	r6,10
80206c74:	000f883a 	mov	r7,zero
80206c78:	0212fd40 	call	80212fd4 <__udivdi3>
80206c7c:	1029883a 	mov	r20,r2
80206c80:	10c4b03a 	or	r2,r2,r3
80206c84:	1823883a 	mov	r17,r3
80206c88:	103fef1e 	bne	r2,zero,80206c48 <__reset+0xfa1e6c48>
80206c8c:	d8c02817 	ldw	r3,160(sp)
80206c90:	dc402a17 	ldw	r17,168(sp)
80206c94:	b011883a 	mov	r8,r22
80206c98:	1c07c83a 	sub	r3,r3,r16
80206c9c:	d8c02e15 	stw	r3,184(sp)
80206ca0:	00002e06 	br	80206d5c <___svfprintf_internal_r+0x6a0>
80206ca4:	18c03fcc 	andi	r3,r3,255
80206ca8:	1806e71e 	bne	r3,zero,80208848 <___svfprintf_internal_r+0x218c>
80206cac:	94800414 	ori	r18,r18,16
80206cb0:	9080080c 	andi	r2,r18,32
80206cb4:	1002d426 	beq	r2,zero,80207808 <___svfprintf_internal_r+0x114c>
80206cb8:	d9402d17 	ldw	r5,180(sp)
80206cbc:	d8c02917 	ldw	r3,164(sp)
80206cc0:	d8002785 	stb	zero,158(sp)
80206cc4:	28800204 	addi	r2,r5,8
80206cc8:	2d000017 	ldw	r20,0(r5)
80206ccc:	2d800117 	ldw	r22,4(r5)
80206cd0:	18041516 	blt	r3,zero,80207d28 <___svfprintf_internal_r+0x166c>
80206cd4:	013fdfc4 	movi	r4,-129
80206cd8:	a586b03a 	or	r3,r20,r22
80206cdc:	d8802d15 	stw	r2,180(sp)
80206ce0:	9124703a 	and	r18,r18,r4
80206ce4:	1802d51e 	bne	r3,zero,8020783c <___svfprintf_internal_r+0x1180>
80206ce8:	d9402917 	ldw	r5,164(sp)
80206cec:	0039883a 	mov	fp,zero
80206cf0:	2806be26 	beq	r5,zero,802087ec <___svfprintf_internal_r+0x2130>
80206cf4:	0029883a 	mov	r20,zero
80206cf8:	002d883a 	mov	r22,zero
80206cfc:	dc001e04 	addi	r16,sp,120
80206d00:	a006d0fa 	srli	r3,r20,3
80206d04:	b008977a 	slli	r4,r22,29
80206d08:	b02cd0fa 	srli	r22,r22,3
80206d0c:	a50001cc 	andi	r20,r20,7
80206d10:	a0800c04 	addi	r2,r20,48
80206d14:	843fffc4 	addi	r16,r16,-1
80206d18:	20e8b03a 	or	r20,r4,r3
80206d1c:	80800005 	stb	r2,0(r16)
80206d20:	a586b03a 	or	r3,r20,r22
80206d24:	183ff61e 	bne	r3,zero,80206d00 <__reset+0xfa1e6d00>
80206d28:	90c0004c 	andi	r3,r18,1
80206d2c:	18013926 	beq	r3,zero,80207214 <___svfprintf_internal_r+0xb58>
80206d30:	10803fcc 	andi	r2,r2,255
80206d34:	1080201c 	xori	r2,r2,128
80206d38:	10bfe004 	addi	r2,r2,-128
80206d3c:	00c00c04 	movi	r3,48
80206d40:	10c13426 	beq	r2,r3,80207214 <___svfprintf_internal_r+0xb58>
80206d44:	80ffffc5 	stb	r3,-1(r16)
80206d48:	d8c02817 	ldw	r3,160(sp)
80206d4c:	80bfffc4 	addi	r2,r16,-1
80206d50:	1021883a 	mov	r16,r2
80206d54:	1887c83a 	sub	r3,r3,r2
80206d58:	d8c02e15 	stw	r3,184(sp)
80206d5c:	d8802e17 	ldw	r2,184(sp)
80206d60:	d9002917 	ldw	r4,164(sp)
80206d64:	1100010e 	bge	r2,r4,80206d6c <___svfprintf_internal_r+0x6b0>
80206d68:	2005883a 	mov	r2,r4
80206d6c:	d8802a15 	stw	r2,168(sp)
80206d70:	d8003215 	stw	zero,200(sp)
80206d74:	e7003fcc 	andi	fp,fp,255
80206d78:	e700201c 	xori	fp,fp,128
80206d7c:	e73fe004 	addi	fp,fp,-128
80206d80:	e0000326 	beq	fp,zero,80206d90 <___svfprintf_internal_r+0x6d4>
80206d84:	d8c02a17 	ldw	r3,168(sp)
80206d88:	18c00044 	addi	r3,r3,1
80206d8c:	d8c02a15 	stw	r3,168(sp)
80206d90:	90c0008c 	andi	r3,r18,2
80206d94:	d8c02b15 	stw	r3,172(sp)
80206d98:	18000326 	beq	r3,zero,80206da8 <___svfprintf_internal_r+0x6ec>
80206d9c:	d8c02a17 	ldw	r3,168(sp)
80206da0:	18c00084 	addi	r3,r3,2
80206da4:	d8c02a15 	stw	r3,168(sp)
80206da8:	90c0210c 	andi	r3,r18,132
80206dac:	d8c03015 	stw	r3,192(sp)
80206db0:	1801a11e 	bne	r3,zero,80207438 <___svfprintf_internal_r+0xd7c>
80206db4:	d9003117 	ldw	r4,196(sp)
80206db8:	d8c02a17 	ldw	r3,168(sp)
80206dbc:	20e9c83a 	sub	r20,r4,r3
80206dc0:	05019d0e 	bge	zero,r20,80207438 <___svfprintf_internal_r+0xd7c>
80206dc4:	02400404 	movi	r9,16
80206dc8:	d8c02017 	ldw	r3,128(sp)
80206dcc:	d8801f17 	ldw	r2,124(sp)
80206dd0:	4d051b0e 	bge	r9,r20,80208240 <___svfprintf_internal_r+0x1b84>
80206dd4:	016008b4 	movhi	r5,32802
80206dd8:	2973f984 	addi	r5,r5,-12314
80206ddc:	dc403c15 	stw	r17,240(sp)
80206de0:	d9403515 	stw	r5,212(sp)
80206de4:	a023883a 	mov	r17,r20
80206de8:	482d883a 	mov	r22,r9
80206dec:	9029883a 	mov	r20,r18
80206df0:	070001c4 	movi	fp,7
80206df4:	8025883a 	mov	r18,r16
80206df8:	dc002c17 	ldw	r16,176(sp)
80206dfc:	00000306 	br	80206e0c <___svfprintf_internal_r+0x750>
80206e00:	8c7ffc04 	addi	r17,r17,-16
80206e04:	42000204 	addi	r8,r8,8
80206e08:	b440130e 	bge	r22,r17,80206e58 <___svfprintf_internal_r+0x79c>
80206e0c:	012008b4 	movhi	r4,32802
80206e10:	18c00404 	addi	r3,r3,16
80206e14:	10800044 	addi	r2,r2,1
80206e18:	2133f984 	addi	r4,r4,-12314
80206e1c:	41000015 	stw	r4,0(r8)
80206e20:	45800115 	stw	r22,4(r8)
80206e24:	d8c02015 	stw	r3,128(sp)
80206e28:	d8801f15 	stw	r2,124(sp)
80206e2c:	e0bff40e 	bge	fp,r2,80206e00 <__reset+0xfa1e6e00>
80206e30:	d9801e04 	addi	r6,sp,120
80206e34:	800b883a 	mov	r5,r16
80206e38:	9809883a 	mov	r4,r19
80206e3c:	020fc4c0 	call	8020fc4c <__ssprint_r>
80206e40:	103f031e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80206e44:	8c7ffc04 	addi	r17,r17,-16
80206e48:	d8c02017 	ldw	r3,128(sp)
80206e4c:	d8801f17 	ldw	r2,124(sp)
80206e50:	da000404 	addi	r8,sp,16
80206e54:	b47fed16 	blt	r22,r17,80206e0c <__reset+0xfa1e6e0c>
80206e58:	9021883a 	mov	r16,r18
80206e5c:	a025883a 	mov	r18,r20
80206e60:	8829883a 	mov	r20,r17
80206e64:	dc403c17 	ldw	r17,240(sp)
80206e68:	d9403517 	ldw	r5,212(sp)
80206e6c:	a0c7883a 	add	r3,r20,r3
80206e70:	10800044 	addi	r2,r2,1
80206e74:	41400015 	stw	r5,0(r8)
80206e78:	45000115 	stw	r20,4(r8)
80206e7c:	d8c02015 	stw	r3,128(sp)
80206e80:	d8801f15 	stw	r2,124(sp)
80206e84:	010001c4 	movi	r4,7
80206e88:	20829f16 	blt	r4,r2,80207908 <___svfprintf_internal_r+0x124c>
80206e8c:	df002787 	ldb	fp,158(sp)
80206e90:	42000204 	addi	r8,r8,8
80206e94:	e0000c26 	beq	fp,zero,80206ec8 <___svfprintf_internal_r+0x80c>
80206e98:	d8801f17 	ldw	r2,124(sp)
80206e9c:	d9002784 	addi	r4,sp,158
80206ea0:	18c00044 	addi	r3,r3,1
80206ea4:	10800044 	addi	r2,r2,1
80206ea8:	41000015 	stw	r4,0(r8)
80206eac:	01000044 	movi	r4,1
80206eb0:	41000115 	stw	r4,4(r8)
80206eb4:	d8c02015 	stw	r3,128(sp)
80206eb8:	d8801f15 	stw	r2,124(sp)
80206ebc:	010001c4 	movi	r4,7
80206ec0:	20823816 	blt	r4,r2,802077a4 <___svfprintf_internal_r+0x10e8>
80206ec4:	42000204 	addi	r8,r8,8
80206ec8:	d8802b17 	ldw	r2,172(sp)
80206ecc:	10000c26 	beq	r2,zero,80206f00 <___svfprintf_internal_r+0x844>
80206ed0:	d8801f17 	ldw	r2,124(sp)
80206ed4:	d9002704 	addi	r4,sp,156
80206ed8:	18c00084 	addi	r3,r3,2
80206edc:	10800044 	addi	r2,r2,1
80206ee0:	41000015 	stw	r4,0(r8)
80206ee4:	01000084 	movi	r4,2
80206ee8:	41000115 	stw	r4,4(r8)
80206eec:	d8c02015 	stw	r3,128(sp)
80206ef0:	d8801f15 	stw	r2,124(sp)
80206ef4:	010001c4 	movi	r4,7
80206ef8:	20823216 	blt	r4,r2,802077c4 <___svfprintf_internal_r+0x1108>
80206efc:	42000204 	addi	r8,r8,8
80206f00:	d9003017 	ldw	r4,192(sp)
80206f04:	00802004 	movi	r2,128
80206f08:	20819726 	beq	r4,r2,80207568 <___svfprintf_internal_r+0xeac>
80206f0c:	d9402917 	ldw	r5,164(sp)
80206f10:	d8802e17 	ldw	r2,184(sp)
80206f14:	28adc83a 	sub	r22,r5,r2
80206f18:	05802f0e 	bge	zero,r22,80206fd8 <___svfprintf_internal_r+0x91c>
80206f1c:	07000404 	movi	fp,16
80206f20:	d8801f17 	ldw	r2,124(sp)
80206f24:	e583c00e 	bge	fp,r22,80207e28 <___svfprintf_internal_r+0x176c>
80206f28:	016008b4 	movhi	r5,32802
80206f2c:	2973f584 	addi	r5,r5,-12330
80206f30:	dc402915 	stw	r17,164(sp)
80206f34:	d9402b15 	stw	r5,172(sp)
80206f38:	b023883a 	mov	r17,r22
80206f3c:	050001c4 	movi	r20,7
80206f40:	902d883a 	mov	r22,r18
80206f44:	8025883a 	mov	r18,r16
80206f48:	dc002c17 	ldw	r16,176(sp)
80206f4c:	00000306 	br	80206f5c <___svfprintf_internal_r+0x8a0>
80206f50:	8c7ffc04 	addi	r17,r17,-16
80206f54:	42000204 	addi	r8,r8,8
80206f58:	e440110e 	bge	fp,r17,80206fa0 <___svfprintf_internal_r+0x8e4>
80206f5c:	18c00404 	addi	r3,r3,16
80206f60:	10800044 	addi	r2,r2,1
80206f64:	45400015 	stw	r21,0(r8)
80206f68:	47000115 	stw	fp,4(r8)
80206f6c:	d8c02015 	stw	r3,128(sp)
80206f70:	d8801f15 	stw	r2,124(sp)
80206f74:	a0bff60e 	bge	r20,r2,80206f50 <__reset+0xfa1e6f50>
80206f78:	d9801e04 	addi	r6,sp,120
80206f7c:	800b883a 	mov	r5,r16
80206f80:	9809883a 	mov	r4,r19
80206f84:	020fc4c0 	call	8020fc4c <__ssprint_r>
80206f88:	103eb11e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80206f8c:	8c7ffc04 	addi	r17,r17,-16
80206f90:	d8c02017 	ldw	r3,128(sp)
80206f94:	d8801f17 	ldw	r2,124(sp)
80206f98:	da000404 	addi	r8,sp,16
80206f9c:	e47fef16 	blt	fp,r17,80206f5c <__reset+0xfa1e6f5c>
80206fa0:	9021883a 	mov	r16,r18
80206fa4:	b025883a 	mov	r18,r22
80206fa8:	882d883a 	mov	r22,r17
80206fac:	dc402917 	ldw	r17,164(sp)
80206fb0:	d9002b17 	ldw	r4,172(sp)
80206fb4:	1d87883a 	add	r3,r3,r22
80206fb8:	10800044 	addi	r2,r2,1
80206fbc:	41000015 	stw	r4,0(r8)
80206fc0:	45800115 	stw	r22,4(r8)
80206fc4:	d8c02015 	stw	r3,128(sp)
80206fc8:	d8801f15 	stw	r2,124(sp)
80206fcc:	010001c4 	movi	r4,7
80206fd0:	2081ec16 	blt	r4,r2,80207784 <___svfprintf_internal_r+0x10c8>
80206fd4:	42000204 	addi	r8,r8,8
80206fd8:	9080400c 	andi	r2,r18,256
80206fdc:	1001181e 	bne	r2,zero,80207440 <___svfprintf_internal_r+0xd84>
80206fe0:	d9402e17 	ldw	r5,184(sp)
80206fe4:	d8801f17 	ldw	r2,124(sp)
80206fe8:	44000015 	stw	r16,0(r8)
80206fec:	1947883a 	add	r3,r3,r5
80206ff0:	10800044 	addi	r2,r2,1
80206ff4:	41400115 	stw	r5,4(r8)
80206ff8:	d8c02015 	stw	r3,128(sp)
80206ffc:	d8801f15 	stw	r2,124(sp)
80207000:	010001c4 	movi	r4,7
80207004:	2081d116 	blt	r4,r2,8020774c <___svfprintf_internal_r+0x1090>
80207008:	42000204 	addi	r8,r8,8
8020700c:	9480010c 	andi	r18,r18,4
80207010:	90003226 	beq	r18,zero,802070dc <___svfprintf_internal_r+0xa20>
80207014:	d9403117 	ldw	r5,196(sp)
80207018:	d8802a17 	ldw	r2,168(sp)
8020701c:	28a1c83a 	sub	r16,r5,r2
80207020:	04002e0e 	bge	zero,r16,802070dc <___svfprintf_internal_r+0xa20>
80207024:	04400404 	movi	r17,16
80207028:	d8801f17 	ldw	r2,124(sp)
8020702c:	8c04b90e 	bge	r17,r16,80208314 <___svfprintf_internal_r+0x1c58>
80207030:	016008b4 	movhi	r5,32802
80207034:	2973f984 	addi	r5,r5,-12314
80207038:	d9403515 	stw	r5,212(sp)
8020703c:	048001c4 	movi	r18,7
80207040:	dd002c17 	ldw	r20,176(sp)
80207044:	00000306 	br	80207054 <___svfprintf_internal_r+0x998>
80207048:	843ffc04 	addi	r16,r16,-16
8020704c:	42000204 	addi	r8,r8,8
80207050:	8c00130e 	bge	r17,r16,802070a0 <___svfprintf_internal_r+0x9e4>
80207054:	012008b4 	movhi	r4,32802
80207058:	18c00404 	addi	r3,r3,16
8020705c:	10800044 	addi	r2,r2,1
80207060:	2133f984 	addi	r4,r4,-12314
80207064:	41000015 	stw	r4,0(r8)
80207068:	44400115 	stw	r17,4(r8)
8020706c:	d8c02015 	stw	r3,128(sp)
80207070:	d8801f15 	stw	r2,124(sp)
80207074:	90bff40e 	bge	r18,r2,80207048 <__reset+0xfa1e7048>
80207078:	d9801e04 	addi	r6,sp,120
8020707c:	a00b883a 	mov	r5,r20
80207080:	9809883a 	mov	r4,r19
80207084:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207088:	103e711e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
8020708c:	843ffc04 	addi	r16,r16,-16
80207090:	d8c02017 	ldw	r3,128(sp)
80207094:	d8801f17 	ldw	r2,124(sp)
80207098:	da000404 	addi	r8,sp,16
8020709c:	8c3fed16 	blt	r17,r16,80207054 <__reset+0xfa1e7054>
802070a0:	d9403517 	ldw	r5,212(sp)
802070a4:	1c07883a 	add	r3,r3,r16
802070a8:	10800044 	addi	r2,r2,1
802070ac:	41400015 	stw	r5,0(r8)
802070b0:	44000115 	stw	r16,4(r8)
802070b4:	d8c02015 	stw	r3,128(sp)
802070b8:	d8801f15 	stw	r2,124(sp)
802070bc:	010001c4 	movi	r4,7
802070c0:	2080060e 	bge	r4,r2,802070dc <___svfprintf_internal_r+0xa20>
802070c4:	d9402c17 	ldw	r5,176(sp)
802070c8:	d9801e04 	addi	r6,sp,120
802070cc:	9809883a 	mov	r4,r19
802070d0:	020fc4c0 	call	8020fc4c <__ssprint_r>
802070d4:	103e5e1e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
802070d8:	d8c02017 	ldw	r3,128(sp)
802070dc:	d8803117 	ldw	r2,196(sp)
802070e0:	d9002a17 	ldw	r4,168(sp)
802070e4:	1100010e 	bge	r2,r4,802070ec <___svfprintf_internal_r+0xa30>
802070e8:	2005883a 	mov	r2,r4
802070ec:	d9402f17 	ldw	r5,188(sp)
802070f0:	288b883a 	add	r5,r5,r2
802070f4:	d9402f15 	stw	r5,188(sp)
802070f8:	18019c1e 	bne	r3,zero,8020776c <___svfprintf_internal_r+0x10b0>
802070fc:	b8800007 	ldb	r2,0(r23)
80207100:	d8001f15 	stw	zero,124(sp)
80207104:	da000404 	addi	r8,sp,16
80207108:	103d991e 	bne	r2,zero,80206770 <__reset+0xfa1e6770>
8020710c:	b821883a 	mov	r16,r23
80207110:	003daf06 	br	802067d0 <__reset+0xfa1e67d0>
80207114:	18c03fcc 	andi	r3,r3,255
80207118:	1805c71e 	bne	r3,zero,80208838 <___svfprintf_internal_r+0x217c>
8020711c:	94800414 	ori	r18,r18,16
80207120:	9080080c 	andi	r2,r18,32
80207124:	10020126 	beq	r2,zero,8020792c <___svfprintf_internal_r+0x1270>
80207128:	d8802d17 	ldw	r2,180(sp)
8020712c:	d9002917 	ldw	r4,164(sp)
80207130:	d8002785 	stb	zero,158(sp)
80207134:	10c00204 	addi	r3,r2,8
80207138:	15000017 	ldw	r20,0(r2)
8020713c:	15800117 	ldw	r22,4(r2)
80207140:	20038e16 	blt	r4,zero,80207f7c <___svfprintf_internal_r+0x18c0>
80207144:	013fdfc4 	movi	r4,-129
80207148:	a584b03a 	or	r2,r20,r22
8020714c:	d8c02d15 	stw	r3,180(sp)
80207150:	9124703a 	and	r18,r18,r4
80207154:	0039883a 	mov	fp,zero
80207158:	103eb61e 	bne	r2,zero,80206c34 <__reset+0xfa1e6c34>
8020715c:	d8802917 	ldw	r2,164(sp)
80207160:	1002c81e 	bne	r2,zero,80207c84 <___svfprintf_internal_r+0x15c8>
80207164:	d8002915 	stw	zero,164(sp)
80207168:	d8002e15 	stw	zero,184(sp)
8020716c:	dc001e04 	addi	r16,sp,120
80207170:	003efa06 	br	80206d5c <__reset+0xfa1e6d5c>
80207174:	18c03fcc 	andi	r3,r3,255
80207178:	1805ad1e 	bne	r3,zero,80208830 <___svfprintf_internal_r+0x2174>
8020717c:	016008b4 	movhi	r5,32802
80207180:	2973e904 	addi	r5,r5,-12380
80207184:	d9403a15 	stw	r5,232(sp)
80207188:	9080080c 	andi	r2,r18,32
8020718c:	10006126 	beq	r2,zero,80207314 <___svfprintf_internal_r+0xc58>
80207190:	d8802d17 	ldw	r2,180(sp)
80207194:	15000017 	ldw	r20,0(r2)
80207198:	15800117 	ldw	r22,4(r2)
8020719c:	10800204 	addi	r2,r2,8
802071a0:	d8802d15 	stw	r2,180(sp)
802071a4:	9080004c 	andi	r2,r18,1
802071a8:	10018e26 	beq	r2,zero,802077e4 <___svfprintf_internal_r+0x1128>
802071ac:	a584b03a 	or	r2,r20,r22
802071b0:	10030926 	beq	r2,zero,80207dd8 <___svfprintf_internal_r+0x171c>
802071b4:	d8c02917 	ldw	r3,164(sp)
802071b8:	00800c04 	movi	r2,48
802071bc:	d8802705 	stb	r2,156(sp)
802071c0:	dc402745 	stb	r17,157(sp)
802071c4:	d8002785 	stb	zero,158(sp)
802071c8:	90800094 	ori	r2,r18,2
802071cc:	18048716 	blt	r3,zero,802083ec <___svfprintf_internal_r+0x1d30>
802071d0:	00bfdfc4 	movi	r2,-129
802071d4:	90a4703a 	and	r18,r18,r2
802071d8:	94800094 	ori	r18,r18,2
802071dc:	0039883a 	mov	fp,zero
802071e0:	d9003a17 	ldw	r4,232(sp)
802071e4:	dc001e04 	addi	r16,sp,120
802071e8:	a08003cc 	andi	r2,r20,15
802071ec:	b006973a 	slli	r3,r22,28
802071f0:	2085883a 	add	r2,r4,r2
802071f4:	a028d13a 	srli	r20,r20,4
802071f8:	10800003 	ldbu	r2,0(r2)
802071fc:	b02cd13a 	srli	r22,r22,4
80207200:	843fffc4 	addi	r16,r16,-1
80207204:	1d28b03a 	or	r20,r3,r20
80207208:	80800005 	stb	r2,0(r16)
8020720c:	a584b03a 	or	r2,r20,r22
80207210:	103ff51e 	bne	r2,zero,802071e8 <__reset+0xfa1e71e8>
80207214:	d8c02817 	ldw	r3,160(sp)
80207218:	1c07c83a 	sub	r3,r3,r16
8020721c:	d8c02e15 	stw	r3,184(sp)
80207220:	003ece06 	br	80206d5c <__reset+0xfa1e6d5c>
80207224:	d8c02d17 	ldw	r3,180(sp)
80207228:	d9002d17 	ldw	r4,180(sp)
8020722c:	d8002785 	stb	zero,158(sp)
80207230:	18800017 	ldw	r2,0(r3)
80207234:	21000104 	addi	r4,r4,4
80207238:	00c00044 	movi	r3,1
8020723c:	d8c02a15 	stw	r3,168(sp)
80207240:	d8801405 	stb	r2,80(sp)
80207244:	d9002d15 	stw	r4,180(sp)
80207248:	d8c02e15 	stw	r3,184(sp)
8020724c:	d8002915 	stw	zero,164(sp)
80207250:	d8003215 	stw	zero,200(sp)
80207254:	dc001404 	addi	r16,sp,80
80207258:	0039883a 	mov	fp,zero
8020725c:	003ecc06 	br	80206d90 <__reset+0xfa1e6d90>
80207260:	18c03fcc 	andi	r3,r3,255
80207264:	183e9226 	beq	r3,zero,80206cb0 <__reset+0xfa1e6cb0>
80207268:	d9c02785 	stb	r7,158(sp)
8020726c:	003e9006 	br	80206cb0 <__reset+0xfa1e6cb0>
80207270:	00c00044 	movi	r3,1
80207274:	01c00ac4 	movi	r7,43
80207278:	bc400007 	ldb	r17,0(r23)
8020727c:	003d6306 	br	8020680c <__reset+0xfa1e680c>
80207280:	94800814 	ori	r18,r18,32
80207284:	bc400007 	ldb	r17,0(r23)
80207288:	003d6006 	br	8020680c <__reset+0xfa1e680c>
8020728c:	d8c02d17 	ldw	r3,180(sp)
80207290:	d8002785 	stb	zero,158(sp)
80207294:	1c000017 	ldw	r16,0(r3)
80207298:	1d000104 	addi	r20,r3,4
8020729c:	80040f26 	beq	r16,zero,802082dc <___svfprintf_internal_r+0x1c20>
802072a0:	d9002917 	ldw	r4,164(sp)
802072a4:	2003dc16 	blt	r4,zero,80208218 <___svfprintf_internal_r+0x1b5c>
802072a8:	200d883a 	mov	r6,r4
802072ac:	000b883a 	mov	r5,zero
802072b0:	8009883a 	mov	r4,r16
802072b4:	da003e15 	stw	r8,248(sp)
802072b8:	020e0a40 	call	8020e0a4 <memchr>
802072bc:	da003e17 	ldw	r8,248(sp)
802072c0:	10045826 	beq	r2,zero,80208424 <___svfprintf_internal_r+0x1d68>
802072c4:	1405c83a 	sub	r2,r2,r16
802072c8:	d8802e15 	stw	r2,184(sp)
802072cc:	1003d816 	blt	r2,zero,80208230 <___svfprintf_internal_r+0x1b74>
802072d0:	df002783 	ldbu	fp,158(sp)
802072d4:	d8802a15 	stw	r2,168(sp)
802072d8:	dd002d15 	stw	r20,180(sp)
802072dc:	d8002915 	stw	zero,164(sp)
802072e0:	d8003215 	stw	zero,200(sp)
802072e4:	003ea306 	br	80206d74 <__reset+0xfa1e6d74>
802072e8:	18c03fcc 	andi	r3,r3,255
802072ec:	183f8c26 	beq	r3,zero,80207120 <__reset+0xfa1e7120>
802072f0:	d9c02785 	stb	r7,158(sp)
802072f4:	003f8a06 	br	80207120 <__reset+0xfa1e7120>
802072f8:	18c03fcc 	andi	r3,r3,255
802072fc:	1805631e 	bne	r3,zero,8020888c <___svfprintf_internal_r+0x21d0>
80207300:	016008b4 	movhi	r5,32802
80207304:	2973ee04 	addi	r5,r5,-12360
80207308:	d9403a15 	stw	r5,232(sp)
8020730c:	9080080c 	andi	r2,r18,32
80207310:	103f9f1e 	bne	r2,zero,80207190 <__reset+0xfa1e7190>
80207314:	9080040c 	andi	r2,r18,16
80207318:	10029c26 	beq	r2,zero,80207d8c <___svfprintf_internal_r+0x16d0>
8020731c:	d8c02d17 	ldw	r3,180(sp)
80207320:	002d883a 	mov	r22,zero
80207324:	1d000017 	ldw	r20,0(r3)
80207328:	18c00104 	addi	r3,r3,4
8020732c:	d8c02d15 	stw	r3,180(sp)
80207330:	003f9c06 	br	802071a4 <__reset+0xfa1e71a4>
80207334:	94800054 	ori	r18,r18,1
80207338:	bc400007 	ldb	r17,0(r23)
8020733c:	003d3306 	br	8020680c <__reset+0xfa1e680c>
80207340:	38803fcc 	andi	r2,r7,255
80207344:	1080201c 	xori	r2,r2,128
80207348:	10bfe004 	addi	r2,r2,-128
8020734c:	1002971e 	bne	r2,zero,80207dac <___svfprintf_internal_r+0x16f0>
80207350:	00c00044 	movi	r3,1
80207354:	01c00804 	movi	r7,32
80207358:	bc400007 	ldb	r17,0(r23)
8020735c:	003d2b06 	br	8020680c <__reset+0xfa1e680c>
80207360:	18c03fcc 	andi	r3,r3,255
80207364:	183e2326 	beq	r3,zero,80206bf4 <__reset+0xfa1e6bf4>
80207368:	d9c02785 	stb	r7,158(sp)
8020736c:	003e2106 	br	80206bf4 <__reset+0xfa1e6bf4>
80207370:	bc400007 	ldb	r17,0(r23)
80207374:	8a430426 	beq	r17,r9,80207f88 <___svfprintf_internal_r+0x18cc>
80207378:	94800414 	ori	r18,r18,16
8020737c:	003d2306 	br	8020680c <__reset+0xfa1e680c>
80207380:	18c03fcc 	andi	r3,r3,255
80207384:	18053f1e 	bne	r3,zero,80208884 <___svfprintf_internal_r+0x21c8>
80207388:	9080080c 	andi	r2,r18,32
8020738c:	10028926 	beq	r2,zero,80207db4 <___svfprintf_internal_r+0x16f8>
80207390:	d9402d17 	ldw	r5,180(sp)
80207394:	d9002f17 	ldw	r4,188(sp)
80207398:	28800017 	ldw	r2,0(r5)
8020739c:	2007d7fa 	srai	r3,r4,31
802073a0:	29400104 	addi	r5,r5,4
802073a4:	d9402d15 	stw	r5,180(sp)
802073a8:	11000015 	stw	r4,0(r2)
802073ac:	10c00115 	stw	r3,4(r2)
802073b0:	003ced06 	br	80206768 <__reset+0xfa1e6768>
802073b4:	94801014 	ori	r18,r18,64
802073b8:	bc400007 	ldb	r17,0(r23)
802073bc:	003d1306 	br	8020680c <__reset+0xfa1e680c>
802073c0:	012008b4 	movhi	r4,32802
802073c4:	2133ee04 	addi	r4,r4,-12360
802073c8:	0039883a 	mov	fp,zero
802073cc:	d9003a15 	stw	r4,232(sp)
802073d0:	04401e04 	movi	r17,120
802073d4:	003f8206 	br	802071e0 <__reset+0xfa1e71e0>
802073d8:	18c03fcc 	andi	r3,r3,255
802073dc:	1805221e 	bne	r3,zero,80208868 <___svfprintf_internal_r+0x21ac>
802073e0:	883d9526 	beq	r17,zero,80206a38 <__reset+0xfa1e6a38>
802073e4:	00c00044 	movi	r3,1
802073e8:	d8c02a15 	stw	r3,168(sp)
802073ec:	dc401405 	stb	r17,80(sp)
802073f0:	d8002785 	stb	zero,158(sp)
802073f4:	003f9406 	br	80207248 <__reset+0xfa1e7248>
802073f8:	012008b4 	movhi	r4,32802
802073fc:	2133ee04 	addi	r4,r4,-12360
80207400:	d9003a15 	stw	r4,232(sp)
80207404:	d8c02d15 	stw	r3,180(sp)
80207408:	1025883a 	mov	r18,r2
8020740c:	04401e04 	movi	r17,120
80207410:	a584b03a 	or	r2,r20,r22
80207414:	1000fa1e 	bne	r2,zero,80207800 <___svfprintf_internal_r+0x1144>
80207418:	0039883a 	mov	fp,zero
8020741c:	00800084 	movi	r2,2
80207420:	10803fcc 	andi	r2,r2,255
80207424:	00c00044 	movi	r3,1
80207428:	10c21626 	beq	r2,r3,80207c84 <___svfprintf_internal_r+0x15c8>
8020742c:	00c00084 	movi	r3,2
80207430:	10fe301e 	bne	r2,r3,80206cf4 <__reset+0xfa1e6cf4>
80207434:	003d7606 	br	80206a10 <__reset+0xfa1e6a10>
80207438:	d8c02017 	ldw	r3,128(sp)
8020743c:	003e9506 	br	80206e94 <__reset+0xfa1e6e94>
80207440:	00801944 	movi	r2,101
80207444:	14407c0e 	bge	r2,r17,80207638 <___svfprintf_internal_r+0xf7c>
80207448:	d9003617 	ldw	r4,216(sp)
8020744c:	d9403717 	ldw	r5,220(sp)
80207450:	000d883a 	mov	r6,zero
80207454:	000f883a 	mov	r7,zero
80207458:	d8c03d15 	stw	r3,244(sp)
8020745c:	da003e15 	stw	r8,248(sp)
80207460:	0214dcc0 	call	80214dcc <__eqdf2>
80207464:	d8c03d17 	ldw	r3,244(sp)
80207468:	da003e17 	ldw	r8,248(sp)
8020746c:	1000f51e 	bne	r2,zero,80207844 <___svfprintf_internal_r+0x1188>
80207470:	d8801f17 	ldw	r2,124(sp)
80207474:	012008b4 	movhi	r4,32802
80207478:	2133f504 	addi	r4,r4,-12332
8020747c:	18c00044 	addi	r3,r3,1
80207480:	10800044 	addi	r2,r2,1
80207484:	41000015 	stw	r4,0(r8)
80207488:	01000044 	movi	r4,1
8020748c:	41000115 	stw	r4,4(r8)
80207490:	d8c02015 	stw	r3,128(sp)
80207494:	d8801f15 	stw	r2,124(sp)
80207498:	010001c4 	movi	r4,7
8020749c:	20826616 	blt	r4,r2,80207e38 <___svfprintf_internal_r+0x177c>
802074a0:	42000204 	addi	r8,r8,8
802074a4:	d8802617 	ldw	r2,152(sp)
802074a8:	d9403317 	ldw	r5,204(sp)
802074ac:	11400216 	blt	r2,r5,802074b8 <___svfprintf_internal_r+0xdfc>
802074b0:	9080004c 	andi	r2,r18,1
802074b4:	103ed526 	beq	r2,zero,8020700c <__reset+0xfa1e700c>
802074b8:	d8803817 	ldw	r2,224(sp)
802074bc:	d9003417 	ldw	r4,208(sp)
802074c0:	d9403817 	ldw	r5,224(sp)
802074c4:	1887883a 	add	r3,r3,r2
802074c8:	d8801f17 	ldw	r2,124(sp)
802074cc:	41000015 	stw	r4,0(r8)
802074d0:	41400115 	stw	r5,4(r8)
802074d4:	10800044 	addi	r2,r2,1
802074d8:	d8c02015 	stw	r3,128(sp)
802074dc:	d8801f15 	stw	r2,124(sp)
802074e0:	010001c4 	movi	r4,7
802074e4:	2082af16 	blt	r4,r2,80207fa4 <___svfprintf_internal_r+0x18e8>
802074e8:	42000204 	addi	r8,r8,8
802074ec:	d8803317 	ldw	r2,204(sp)
802074f0:	143fffc4 	addi	r16,r2,-1
802074f4:	043ec50e 	bge	zero,r16,8020700c <__reset+0xfa1e700c>
802074f8:	04400404 	movi	r17,16
802074fc:	d8801f17 	ldw	r2,124(sp)
80207500:	8c00860e 	bge	r17,r16,8020771c <___svfprintf_internal_r+0x1060>
80207504:	016008b4 	movhi	r5,32802
80207508:	2973f584 	addi	r5,r5,-12330
8020750c:	d9402b15 	stw	r5,172(sp)
80207510:	058001c4 	movi	r22,7
80207514:	dd002c17 	ldw	r20,176(sp)
80207518:	00000306 	br	80207528 <___svfprintf_internal_r+0xe6c>
8020751c:	42000204 	addi	r8,r8,8
80207520:	843ffc04 	addi	r16,r16,-16
80207524:	8c00800e 	bge	r17,r16,80207728 <___svfprintf_internal_r+0x106c>
80207528:	18c00404 	addi	r3,r3,16
8020752c:	10800044 	addi	r2,r2,1
80207530:	45400015 	stw	r21,0(r8)
80207534:	44400115 	stw	r17,4(r8)
80207538:	d8c02015 	stw	r3,128(sp)
8020753c:	d8801f15 	stw	r2,124(sp)
80207540:	b0bff60e 	bge	r22,r2,8020751c <__reset+0xfa1e751c>
80207544:	d9801e04 	addi	r6,sp,120
80207548:	a00b883a 	mov	r5,r20
8020754c:	9809883a 	mov	r4,r19
80207550:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207554:	103d3e1e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207558:	d8c02017 	ldw	r3,128(sp)
8020755c:	d8801f17 	ldw	r2,124(sp)
80207560:	da000404 	addi	r8,sp,16
80207564:	003fee06 	br	80207520 <__reset+0xfa1e7520>
80207568:	d9403117 	ldw	r5,196(sp)
8020756c:	d8802a17 	ldw	r2,168(sp)
80207570:	28adc83a 	sub	r22,r5,r2
80207574:	05be650e 	bge	zero,r22,80206f0c <__reset+0xfa1e6f0c>
80207578:	07000404 	movi	fp,16
8020757c:	d8801f17 	ldw	r2,124(sp)
80207580:	e583a20e 	bge	fp,r22,8020840c <___svfprintf_internal_r+0x1d50>
80207584:	016008b4 	movhi	r5,32802
80207588:	2973f584 	addi	r5,r5,-12330
8020758c:	dc403015 	stw	r17,192(sp)
80207590:	d9402b15 	stw	r5,172(sp)
80207594:	b023883a 	mov	r17,r22
80207598:	050001c4 	movi	r20,7
8020759c:	902d883a 	mov	r22,r18
802075a0:	8025883a 	mov	r18,r16
802075a4:	dc002c17 	ldw	r16,176(sp)
802075a8:	00000306 	br	802075b8 <___svfprintf_internal_r+0xefc>
802075ac:	8c7ffc04 	addi	r17,r17,-16
802075b0:	42000204 	addi	r8,r8,8
802075b4:	e440110e 	bge	fp,r17,802075fc <___svfprintf_internal_r+0xf40>
802075b8:	18c00404 	addi	r3,r3,16
802075bc:	10800044 	addi	r2,r2,1
802075c0:	45400015 	stw	r21,0(r8)
802075c4:	47000115 	stw	fp,4(r8)
802075c8:	d8c02015 	stw	r3,128(sp)
802075cc:	d8801f15 	stw	r2,124(sp)
802075d0:	a0bff60e 	bge	r20,r2,802075ac <__reset+0xfa1e75ac>
802075d4:	d9801e04 	addi	r6,sp,120
802075d8:	800b883a 	mov	r5,r16
802075dc:	9809883a 	mov	r4,r19
802075e0:	020fc4c0 	call	8020fc4c <__ssprint_r>
802075e4:	103d1a1e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
802075e8:	8c7ffc04 	addi	r17,r17,-16
802075ec:	d8c02017 	ldw	r3,128(sp)
802075f0:	d8801f17 	ldw	r2,124(sp)
802075f4:	da000404 	addi	r8,sp,16
802075f8:	e47fef16 	blt	fp,r17,802075b8 <__reset+0xfa1e75b8>
802075fc:	9021883a 	mov	r16,r18
80207600:	b025883a 	mov	r18,r22
80207604:	882d883a 	mov	r22,r17
80207608:	dc403017 	ldw	r17,192(sp)
8020760c:	d9002b17 	ldw	r4,172(sp)
80207610:	1d87883a 	add	r3,r3,r22
80207614:	10800044 	addi	r2,r2,1
80207618:	41000015 	stw	r4,0(r8)
8020761c:	45800115 	stw	r22,4(r8)
80207620:	d8c02015 	stw	r3,128(sp)
80207624:	d8801f15 	stw	r2,124(sp)
80207628:	010001c4 	movi	r4,7
8020762c:	20819a16 	blt	r4,r2,80207c98 <___svfprintf_internal_r+0x15dc>
80207630:	42000204 	addi	r8,r8,8
80207634:	003e3506 	br	80206f0c <__reset+0xfa1e6f0c>
80207638:	d9403317 	ldw	r5,204(sp)
8020763c:	00800044 	movi	r2,1
80207640:	18c00044 	addi	r3,r3,1
80207644:	1141710e 	bge	r2,r5,80207c0c <___svfprintf_internal_r+0x1550>
80207648:	dc401f17 	ldw	r17,124(sp)
8020764c:	00800044 	movi	r2,1
80207650:	40800115 	stw	r2,4(r8)
80207654:	8c400044 	addi	r17,r17,1
80207658:	44000015 	stw	r16,0(r8)
8020765c:	d8c02015 	stw	r3,128(sp)
80207660:	dc401f15 	stw	r17,124(sp)
80207664:	008001c4 	movi	r2,7
80207668:	14417416 	blt	r2,r17,80207c3c <___svfprintf_internal_r+0x1580>
8020766c:	42000204 	addi	r8,r8,8
80207670:	d8803817 	ldw	r2,224(sp)
80207674:	d9003417 	ldw	r4,208(sp)
80207678:	8c400044 	addi	r17,r17,1
8020767c:	10c7883a 	add	r3,r2,r3
80207680:	40800115 	stw	r2,4(r8)
80207684:	41000015 	stw	r4,0(r8)
80207688:	d8c02015 	stw	r3,128(sp)
8020768c:	dc401f15 	stw	r17,124(sp)
80207690:	008001c4 	movi	r2,7
80207694:	14417216 	blt	r2,r17,80207c60 <___svfprintf_internal_r+0x15a4>
80207698:	45800204 	addi	r22,r8,8
8020769c:	d9003617 	ldw	r4,216(sp)
802076a0:	d9403717 	ldw	r5,220(sp)
802076a4:	000d883a 	mov	r6,zero
802076a8:	000f883a 	mov	r7,zero
802076ac:	d8c03d15 	stw	r3,244(sp)
802076b0:	0214dcc0 	call	80214dcc <__eqdf2>
802076b4:	d8c03d17 	ldw	r3,244(sp)
802076b8:	1000b326 	beq	r2,zero,80207988 <___svfprintf_internal_r+0x12cc>
802076bc:	d9403317 	ldw	r5,204(sp)
802076c0:	84000044 	addi	r16,r16,1
802076c4:	8c400044 	addi	r17,r17,1
802076c8:	28bfffc4 	addi	r2,r5,-1
802076cc:	1887883a 	add	r3,r3,r2
802076d0:	b0800115 	stw	r2,4(r22)
802076d4:	b4000015 	stw	r16,0(r22)
802076d8:	d8c02015 	stw	r3,128(sp)
802076dc:	dc401f15 	stw	r17,124(sp)
802076e0:	008001c4 	movi	r2,7
802076e4:	1440d216 	blt	r2,r17,80207a30 <___svfprintf_internal_r+0x1374>
802076e8:	b5800204 	addi	r22,r22,8
802076ec:	d9003b17 	ldw	r4,236(sp)
802076f0:	df0022c4 	addi	fp,sp,139
802076f4:	8c400044 	addi	r17,r17,1
802076f8:	20c7883a 	add	r3,r4,r3
802076fc:	b7000015 	stw	fp,0(r22)
80207700:	b1000115 	stw	r4,4(r22)
80207704:	d8c02015 	stw	r3,128(sp)
80207708:	dc401f15 	stw	r17,124(sp)
8020770c:	008001c4 	movi	r2,7
80207710:	14400e16 	blt	r2,r17,8020774c <___svfprintf_internal_r+0x1090>
80207714:	b2000204 	addi	r8,r22,8
80207718:	003e3c06 	br	8020700c <__reset+0xfa1e700c>
8020771c:	012008b4 	movhi	r4,32802
80207720:	2133f584 	addi	r4,r4,-12330
80207724:	d9002b15 	stw	r4,172(sp)
80207728:	d9002b17 	ldw	r4,172(sp)
8020772c:	1c07883a 	add	r3,r3,r16
80207730:	44000115 	stw	r16,4(r8)
80207734:	41000015 	stw	r4,0(r8)
80207738:	10800044 	addi	r2,r2,1
8020773c:	d8c02015 	stw	r3,128(sp)
80207740:	d8801f15 	stw	r2,124(sp)
80207744:	010001c4 	movi	r4,7
80207748:	20be2f0e 	bge	r4,r2,80207008 <__reset+0xfa1e7008>
8020774c:	d9402c17 	ldw	r5,176(sp)
80207750:	d9801e04 	addi	r6,sp,120
80207754:	9809883a 	mov	r4,r19
80207758:	020fc4c0 	call	8020fc4c <__ssprint_r>
8020775c:	103cbc1e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207760:	d8c02017 	ldw	r3,128(sp)
80207764:	da000404 	addi	r8,sp,16
80207768:	003e2806 	br	8020700c <__reset+0xfa1e700c>
8020776c:	d9402c17 	ldw	r5,176(sp)
80207770:	d9801e04 	addi	r6,sp,120
80207774:	9809883a 	mov	r4,r19
80207778:	020fc4c0 	call	8020fc4c <__ssprint_r>
8020777c:	103e5f26 	beq	r2,zero,802070fc <__reset+0xfa1e70fc>
80207780:	003cb306 	br	80206a50 <__reset+0xfa1e6a50>
80207784:	d9402c17 	ldw	r5,176(sp)
80207788:	d9801e04 	addi	r6,sp,120
8020778c:	9809883a 	mov	r4,r19
80207790:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207794:	103cae1e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207798:	d8c02017 	ldw	r3,128(sp)
8020779c:	da000404 	addi	r8,sp,16
802077a0:	003e0d06 	br	80206fd8 <__reset+0xfa1e6fd8>
802077a4:	d9402c17 	ldw	r5,176(sp)
802077a8:	d9801e04 	addi	r6,sp,120
802077ac:	9809883a 	mov	r4,r19
802077b0:	020fc4c0 	call	8020fc4c <__ssprint_r>
802077b4:	103ca61e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
802077b8:	d8c02017 	ldw	r3,128(sp)
802077bc:	da000404 	addi	r8,sp,16
802077c0:	003dc106 	br	80206ec8 <__reset+0xfa1e6ec8>
802077c4:	d9402c17 	ldw	r5,176(sp)
802077c8:	d9801e04 	addi	r6,sp,120
802077cc:	9809883a 	mov	r4,r19
802077d0:	020fc4c0 	call	8020fc4c <__ssprint_r>
802077d4:	103c9e1e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
802077d8:	d8c02017 	ldw	r3,128(sp)
802077dc:	da000404 	addi	r8,sp,16
802077e0:	003dc706 	br	80206f00 <__reset+0xfa1e6f00>
802077e4:	d8802917 	ldw	r2,164(sp)
802077e8:	d8002785 	stb	zero,158(sp)
802077ec:	103f0816 	blt	r2,zero,80207410 <__reset+0xfa1e7410>
802077f0:	00ffdfc4 	movi	r3,-129
802077f4:	a584b03a 	or	r2,r20,r22
802077f8:	90e4703a 	and	r18,r18,r3
802077fc:	103c8126 	beq	r2,zero,80206a04 <__reset+0xfa1e6a04>
80207800:	0039883a 	mov	fp,zero
80207804:	003e7606 	br	802071e0 <__reset+0xfa1e71e0>
80207808:	9080040c 	andi	r2,r18,16
8020780c:	10013d26 	beq	r2,zero,80207d04 <___svfprintf_internal_r+0x1648>
80207810:	d9002d17 	ldw	r4,180(sp)
80207814:	d9402917 	ldw	r5,164(sp)
80207818:	d8002785 	stb	zero,158(sp)
8020781c:	20800104 	addi	r2,r4,4
80207820:	25000017 	ldw	r20,0(r4)
80207824:	002d883a 	mov	r22,zero
80207828:	28013f16 	blt	r5,zero,80207d28 <___svfprintf_internal_r+0x166c>
8020782c:	00ffdfc4 	movi	r3,-129
80207830:	d8802d15 	stw	r2,180(sp)
80207834:	90e4703a 	and	r18,r18,r3
80207838:	a03d2b26 	beq	r20,zero,80206ce8 <__reset+0xfa1e6ce8>
8020783c:	0039883a 	mov	fp,zero
80207840:	003d2e06 	br	80206cfc <__reset+0xfa1e6cfc>
80207844:	dc402617 	ldw	r17,152(sp)
80207848:	0441830e 	bge	zero,r17,80207e58 <___svfprintf_internal_r+0x179c>
8020784c:	dc403217 	ldw	r17,200(sp)
80207850:	d8803317 	ldw	r2,204(sp)
80207854:	1440010e 	bge	r2,r17,8020785c <___svfprintf_internal_r+0x11a0>
80207858:	1023883a 	mov	r17,r2
8020785c:	04400a0e 	bge	zero,r17,80207888 <___svfprintf_internal_r+0x11cc>
80207860:	d8801f17 	ldw	r2,124(sp)
80207864:	1c47883a 	add	r3,r3,r17
80207868:	44000015 	stw	r16,0(r8)
8020786c:	10800044 	addi	r2,r2,1
80207870:	44400115 	stw	r17,4(r8)
80207874:	d8c02015 	stw	r3,128(sp)
80207878:	d8801f15 	stw	r2,124(sp)
8020787c:	010001c4 	movi	r4,7
80207880:	20827516 	blt	r4,r2,80208258 <___svfprintf_internal_r+0x1b9c>
80207884:	42000204 	addi	r8,r8,8
80207888:	88027b16 	blt	r17,zero,80208278 <___svfprintf_internal_r+0x1bbc>
8020788c:	d9003217 	ldw	r4,200(sp)
80207890:	2463c83a 	sub	r17,r4,r17
80207894:	0440990e 	bge	zero,r17,80207afc <___svfprintf_internal_r+0x1440>
80207898:	05800404 	movi	r22,16
8020789c:	d8801f17 	ldw	r2,124(sp)
802078a0:	b441530e 	bge	r22,r17,80207df0 <___svfprintf_internal_r+0x1734>
802078a4:	012008b4 	movhi	r4,32802
802078a8:	2133f584 	addi	r4,r4,-12330
802078ac:	d9002b15 	stw	r4,172(sp)
802078b0:	070001c4 	movi	fp,7
802078b4:	dd002c17 	ldw	r20,176(sp)
802078b8:	00000306 	br	802078c8 <___svfprintf_internal_r+0x120c>
802078bc:	42000204 	addi	r8,r8,8
802078c0:	8c7ffc04 	addi	r17,r17,-16
802078c4:	b4414d0e 	bge	r22,r17,80207dfc <___svfprintf_internal_r+0x1740>
802078c8:	18c00404 	addi	r3,r3,16
802078cc:	10800044 	addi	r2,r2,1
802078d0:	45400015 	stw	r21,0(r8)
802078d4:	45800115 	stw	r22,4(r8)
802078d8:	d8c02015 	stw	r3,128(sp)
802078dc:	d8801f15 	stw	r2,124(sp)
802078e0:	e0bff60e 	bge	fp,r2,802078bc <__reset+0xfa1e78bc>
802078e4:	d9801e04 	addi	r6,sp,120
802078e8:	a00b883a 	mov	r5,r20
802078ec:	9809883a 	mov	r4,r19
802078f0:	020fc4c0 	call	8020fc4c <__ssprint_r>
802078f4:	103c561e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
802078f8:	d8c02017 	ldw	r3,128(sp)
802078fc:	d8801f17 	ldw	r2,124(sp)
80207900:	da000404 	addi	r8,sp,16
80207904:	003fee06 	br	802078c0 <__reset+0xfa1e78c0>
80207908:	d9402c17 	ldw	r5,176(sp)
8020790c:	d9801e04 	addi	r6,sp,120
80207910:	9809883a 	mov	r4,r19
80207914:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207918:	103c4d1e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
8020791c:	d8c02017 	ldw	r3,128(sp)
80207920:	df002787 	ldb	fp,158(sp)
80207924:	da000404 	addi	r8,sp,16
80207928:	003d5a06 	br	80206e94 <__reset+0xfa1e6e94>
8020792c:	9080040c 	andi	r2,r18,16
80207930:	10005c26 	beq	r2,zero,80207aa4 <___svfprintf_internal_r+0x13e8>
80207934:	d9402d17 	ldw	r5,180(sp)
80207938:	d8c02917 	ldw	r3,164(sp)
8020793c:	d8002785 	stb	zero,158(sp)
80207940:	28800104 	addi	r2,r5,4
80207944:	2d000017 	ldw	r20,0(r5)
80207948:	002d883a 	mov	r22,zero
8020794c:	18005e16 	blt	r3,zero,80207ac8 <___svfprintf_internal_r+0x140c>
80207950:	00ffdfc4 	movi	r3,-129
80207954:	d8802d15 	stw	r2,180(sp)
80207958:	90e4703a 	and	r18,r18,r3
8020795c:	0039883a 	mov	fp,zero
80207960:	a03dfe26 	beq	r20,zero,8020715c <__reset+0xfa1e715c>
80207964:	00800244 	movi	r2,9
80207968:	153cb336 	bltu	r2,r20,80206c38 <__reset+0xfa1e6c38>
8020796c:	a5000c04 	addi	r20,r20,48
80207970:	dc001dc4 	addi	r16,sp,119
80207974:	dd001dc5 	stb	r20,119(sp)
80207978:	d8c02817 	ldw	r3,160(sp)
8020797c:	1c07c83a 	sub	r3,r3,r16
80207980:	d8c02e15 	stw	r3,184(sp)
80207984:	003cf506 	br	80206d5c <__reset+0xfa1e6d5c>
80207988:	d8803317 	ldw	r2,204(sp)
8020798c:	143fffc4 	addi	r16,r2,-1
80207990:	043f560e 	bge	zero,r16,802076ec <__reset+0xfa1e76ec>
80207994:	07000404 	movi	fp,16
80207998:	e403530e 	bge	fp,r16,802086e8 <___svfprintf_internal_r+0x202c>
8020799c:	016008b4 	movhi	r5,32802
802079a0:	2973f584 	addi	r5,r5,-12330
802079a4:	d9402b15 	stw	r5,172(sp)
802079a8:	01c001c4 	movi	r7,7
802079ac:	dd002c17 	ldw	r20,176(sp)
802079b0:	00000306 	br	802079c0 <___svfprintf_internal_r+0x1304>
802079b4:	843ffc04 	addi	r16,r16,-16
802079b8:	b5800204 	addi	r22,r22,8
802079bc:	e400130e 	bge	fp,r16,80207a0c <___svfprintf_internal_r+0x1350>
802079c0:	18c00404 	addi	r3,r3,16
802079c4:	8c400044 	addi	r17,r17,1
802079c8:	b5400015 	stw	r21,0(r22)
802079cc:	b7000115 	stw	fp,4(r22)
802079d0:	d8c02015 	stw	r3,128(sp)
802079d4:	dc401f15 	stw	r17,124(sp)
802079d8:	3c7ff60e 	bge	r7,r17,802079b4 <__reset+0xfa1e79b4>
802079dc:	d9801e04 	addi	r6,sp,120
802079e0:	a00b883a 	mov	r5,r20
802079e4:	9809883a 	mov	r4,r19
802079e8:	d9c03d15 	stw	r7,244(sp)
802079ec:	020fc4c0 	call	8020fc4c <__ssprint_r>
802079f0:	d9c03d17 	ldw	r7,244(sp)
802079f4:	103c161e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
802079f8:	843ffc04 	addi	r16,r16,-16
802079fc:	d8c02017 	ldw	r3,128(sp)
80207a00:	dc401f17 	ldw	r17,124(sp)
80207a04:	dd800404 	addi	r22,sp,16
80207a08:	e43fed16 	blt	fp,r16,802079c0 <__reset+0xfa1e79c0>
80207a0c:	d8802b17 	ldw	r2,172(sp)
80207a10:	1c07883a 	add	r3,r3,r16
80207a14:	8c400044 	addi	r17,r17,1
80207a18:	b0800015 	stw	r2,0(r22)
80207a1c:	b4000115 	stw	r16,4(r22)
80207a20:	d8c02015 	stw	r3,128(sp)
80207a24:	dc401f15 	stw	r17,124(sp)
80207a28:	008001c4 	movi	r2,7
80207a2c:	147f2e0e 	bge	r2,r17,802076e8 <__reset+0xfa1e76e8>
80207a30:	d9402c17 	ldw	r5,176(sp)
80207a34:	d9801e04 	addi	r6,sp,120
80207a38:	9809883a 	mov	r4,r19
80207a3c:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207a40:	103c031e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207a44:	d8c02017 	ldw	r3,128(sp)
80207a48:	dc401f17 	ldw	r17,124(sp)
80207a4c:	dd800404 	addi	r22,sp,16
80207a50:	003f2606 	br	802076ec <__reset+0xfa1e76ec>
80207a54:	9080040c 	andi	r2,r18,16
80207a58:	1000c326 	beq	r2,zero,80207d68 <___svfprintf_internal_r+0x16ac>
80207a5c:	d8802d17 	ldw	r2,180(sp)
80207a60:	15000017 	ldw	r20,0(r2)
80207a64:	10800104 	addi	r2,r2,4
80207a68:	d8802d15 	stw	r2,180(sp)
80207a6c:	a02dd7fa 	srai	r22,r20,31
80207a70:	b005883a 	mov	r2,r22
80207a74:	103c680e 	bge	r2,zero,80206c18 <__reset+0xfa1e6c18>
80207a78:	0529c83a 	sub	r20,zero,r20
80207a7c:	a004c03a 	cmpne	r2,r20,zero
80207a80:	05adc83a 	sub	r22,zero,r22
80207a84:	b0adc83a 	sub	r22,r22,r2
80207a88:	d8802917 	ldw	r2,164(sp)
80207a8c:	07000b44 	movi	fp,45
80207a90:	df002785 	stb	fp,158(sp)
80207a94:	10022e16 	blt	r2,zero,80208350 <___svfprintf_internal_r+0x1c94>
80207a98:	00bfdfc4 	movi	r2,-129
80207a9c:	90a4703a 	and	r18,r18,r2
80207aa0:	003c6406 	br	80206c34 <__reset+0xfa1e6c34>
80207aa4:	9080100c 	andi	r2,r18,64
80207aa8:	d8002785 	stb	zero,158(sp)
80207aac:	10012526 	beq	r2,zero,80207f44 <___svfprintf_internal_r+0x1888>
80207ab0:	d9002d17 	ldw	r4,180(sp)
80207ab4:	d9402917 	ldw	r5,164(sp)
80207ab8:	002d883a 	mov	r22,zero
80207abc:	20800104 	addi	r2,r4,4
80207ac0:	2500000b 	ldhu	r20,0(r4)
80207ac4:	283fa20e 	bge	r5,zero,80207950 <__reset+0xfa1e7950>
80207ac8:	d8802d15 	stw	r2,180(sp)
80207acc:	0039883a 	mov	fp,zero
80207ad0:	a584b03a 	or	r2,r20,r22
80207ad4:	103c571e 	bne	r2,zero,80206c34 <__reset+0xfa1e6c34>
80207ad8:	00800044 	movi	r2,1
80207adc:	003e5006 	br	80207420 <__reset+0xfa1e7420>
80207ae0:	d9402c17 	ldw	r5,176(sp)
80207ae4:	d9801e04 	addi	r6,sp,120
80207ae8:	9809883a 	mov	r4,r19
80207aec:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207af0:	103bd71e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207af4:	d8c02017 	ldw	r3,128(sp)
80207af8:	da000404 	addi	r8,sp,16
80207afc:	d9003217 	ldw	r4,200(sp)
80207b00:	d8802617 	ldw	r2,152(sp)
80207b04:	d9403317 	ldw	r5,204(sp)
80207b08:	8123883a 	add	r17,r16,r4
80207b0c:	11400216 	blt	r2,r5,80207b18 <___svfprintf_internal_r+0x145c>
80207b10:	9100004c 	andi	r4,r18,1
80207b14:	20000d26 	beq	r4,zero,80207b4c <___svfprintf_internal_r+0x1490>
80207b18:	d9003817 	ldw	r4,224(sp)
80207b1c:	d9403417 	ldw	r5,208(sp)
80207b20:	1907883a 	add	r3,r3,r4
80207b24:	d9001f17 	ldw	r4,124(sp)
80207b28:	41400015 	stw	r5,0(r8)
80207b2c:	d9403817 	ldw	r5,224(sp)
80207b30:	21000044 	addi	r4,r4,1
80207b34:	d8c02015 	stw	r3,128(sp)
80207b38:	41400115 	stw	r5,4(r8)
80207b3c:	d9001f15 	stw	r4,124(sp)
80207b40:	014001c4 	movi	r5,7
80207b44:	2901dc16 	blt	r5,r4,802082b8 <___svfprintf_internal_r+0x1bfc>
80207b48:	42000204 	addi	r8,r8,8
80207b4c:	d9003317 	ldw	r4,204(sp)
80207b50:	8121883a 	add	r16,r16,r4
80207b54:	2085c83a 	sub	r2,r4,r2
80207b58:	8461c83a 	sub	r16,r16,r17
80207b5c:	1400010e 	bge	r2,r16,80207b64 <___svfprintf_internal_r+0x14a8>
80207b60:	1021883a 	mov	r16,r2
80207b64:	04000a0e 	bge	zero,r16,80207b90 <___svfprintf_internal_r+0x14d4>
80207b68:	d9001f17 	ldw	r4,124(sp)
80207b6c:	1c07883a 	add	r3,r3,r16
80207b70:	44400015 	stw	r17,0(r8)
80207b74:	21000044 	addi	r4,r4,1
80207b78:	44000115 	stw	r16,4(r8)
80207b7c:	d8c02015 	stw	r3,128(sp)
80207b80:	d9001f15 	stw	r4,124(sp)
80207b84:	014001c4 	movi	r5,7
80207b88:	2901e616 	blt	r5,r4,80208324 <___svfprintf_internal_r+0x1c68>
80207b8c:	42000204 	addi	r8,r8,8
80207b90:	8001f616 	blt	r16,zero,8020836c <___svfprintf_internal_r+0x1cb0>
80207b94:	1421c83a 	sub	r16,r2,r16
80207b98:	043d1c0e 	bge	zero,r16,8020700c <__reset+0xfa1e700c>
80207b9c:	04400404 	movi	r17,16
80207ba0:	d8801f17 	ldw	r2,124(sp)
80207ba4:	8c3edd0e 	bge	r17,r16,8020771c <__reset+0xfa1e771c>
80207ba8:	016008b4 	movhi	r5,32802
80207bac:	2973f584 	addi	r5,r5,-12330
80207bb0:	d9402b15 	stw	r5,172(sp)
80207bb4:	058001c4 	movi	r22,7
80207bb8:	dd002c17 	ldw	r20,176(sp)
80207bbc:	00000306 	br	80207bcc <___svfprintf_internal_r+0x1510>
80207bc0:	42000204 	addi	r8,r8,8
80207bc4:	843ffc04 	addi	r16,r16,-16
80207bc8:	8c3ed70e 	bge	r17,r16,80207728 <__reset+0xfa1e7728>
80207bcc:	18c00404 	addi	r3,r3,16
80207bd0:	10800044 	addi	r2,r2,1
80207bd4:	45400015 	stw	r21,0(r8)
80207bd8:	44400115 	stw	r17,4(r8)
80207bdc:	d8c02015 	stw	r3,128(sp)
80207be0:	d8801f15 	stw	r2,124(sp)
80207be4:	b0bff60e 	bge	r22,r2,80207bc0 <__reset+0xfa1e7bc0>
80207be8:	d9801e04 	addi	r6,sp,120
80207bec:	a00b883a 	mov	r5,r20
80207bf0:	9809883a 	mov	r4,r19
80207bf4:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207bf8:	103b951e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207bfc:	d8c02017 	ldw	r3,128(sp)
80207c00:	d8801f17 	ldw	r2,124(sp)
80207c04:	da000404 	addi	r8,sp,16
80207c08:	003fee06 	br	80207bc4 <__reset+0xfa1e7bc4>
80207c0c:	9088703a 	and	r4,r18,r2
80207c10:	203e8d1e 	bne	r4,zero,80207648 <__reset+0xfa1e7648>
80207c14:	dc401f17 	ldw	r17,124(sp)
80207c18:	40800115 	stw	r2,4(r8)
80207c1c:	44000015 	stw	r16,0(r8)
80207c20:	8c400044 	addi	r17,r17,1
80207c24:	d8c02015 	stw	r3,128(sp)
80207c28:	dc401f15 	stw	r17,124(sp)
80207c2c:	008001c4 	movi	r2,7
80207c30:	147f7f16 	blt	r2,r17,80207a30 <__reset+0xfa1e7a30>
80207c34:	45800204 	addi	r22,r8,8
80207c38:	003eac06 	br	802076ec <__reset+0xfa1e76ec>
80207c3c:	d9402c17 	ldw	r5,176(sp)
80207c40:	d9801e04 	addi	r6,sp,120
80207c44:	9809883a 	mov	r4,r19
80207c48:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207c4c:	103b801e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207c50:	d8c02017 	ldw	r3,128(sp)
80207c54:	dc401f17 	ldw	r17,124(sp)
80207c58:	da000404 	addi	r8,sp,16
80207c5c:	003e8406 	br	80207670 <__reset+0xfa1e7670>
80207c60:	d9402c17 	ldw	r5,176(sp)
80207c64:	d9801e04 	addi	r6,sp,120
80207c68:	9809883a 	mov	r4,r19
80207c6c:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207c70:	103b771e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207c74:	d8c02017 	ldw	r3,128(sp)
80207c78:	dc401f17 	ldw	r17,124(sp)
80207c7c:	dd800404 	addi	r22,sp,16
80207c80:	003e8606 	br	8020769c <__reset+0xfa1e769c>
80207c84:	0029883a 	mov	r20,zero
80207c88:	a5000c04 	addi	r20,r20,48
80207c8c:	dc001dc4 	addi	r16,sp,119
80207c90:	dd001dc5 	stb	r20,119(sp)
80207c94:	003f3806 	br	80207978 <__reset+0xfa1e7978>
80207c98:	d9402c17 	ldw	r5,176(sp)
80207c9c:	d9801e04 	addi	r6,sp,120
80207ca0:	9809883a 	mov	r4,r19
80207ca4:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207ca8:	103b691e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207cac:	d8c02017 	ldw	r3,128(sp)
80207cb0:	da000404 	addi	r8,sp,16
80207cb4:	003c9506 	br	80206f0c <__reset+0xfa1e6f0c>
80207cb8:	d9003617 	ldw	r4,216(sp)
80207cbc:	d9403717 	ldw	r5,220(sp)
80207cc0:	da003e15 	stw	r8,248(sp)
80207cc4:	020f96c0 	call	8020f96c <__fpclassifyd>
80207cc8:	da003e17 	ldw	r8,248(sp)
80207ccc:	1000bd1e 	bne	r2,zero,80207fc4 <___svfprintf_internal_r+0x1908>
80207cd0:	008011c4 	movi	r2,71
80207cd4:	14411e0e 	bge	r2,r17,80208150 <___svfprintf_internal_r+0x1a94>
80207cd8:	042008b4 	movhi	r16,32802
80207cdc:	8433e804 	addi	r16,r16,-12384
80207ce0:	00c000c4 	movi	r3,3
80207ce4:	00bfdfc4 	movi	r2,-129
80207ce8:	d8c02a15 	stw	r3,168(sp)
80207cec:	90a4703a 	and	r18,r18,r2
80207cf0:	df002783 	ldbu	fp,158(sp)
80207cf4:	d8c02e15 	stw	r3,184(sp)
80207cf8:	d8002915 	stw	zero,164(sp)
80207cfc:	d8003215 	stw	zero,200(sp)
80207d00:	003c1c06 	br	80206d74 <__reset+0xfa1e6d74>
80207d04:	9080100c 	andi	r2,r18,64
80207d08:	d8002785 	stb	zero,158(sp)
80207d0c:	10009426 	beq	r2,zero,80207f60 <___svfprintf_internal_r+0x18a4>
80207d10:	d8c02d17 	ldw	r3,180(sp)
80207d14:	d9002917 	ldw	r4,164(sp)
80207d18:	002d883a 	mov	r22,zero
80207d1c:	18800104 	addi	r2,r3,4
80207d20:	1d00000b 	ldhu	r20,0(r3)
80207d24:	203ec10e 	bge	r4,zero,8020782c <__reset+0xfa1e782c>
80207d28:	a586b03a 	or	r3,r20,r22
80207d2c:	d8802d15 	stw	r2,180(sp)
80207d30:	183ec21e 	bne	r3,zero,8020783c <__reset+0xfa1e783c>
80207d34:	0039883a 	mov	fp,zero
80207d38:	0005883a 	mov	r2,zero
80207d3c:	003db806 	br	80207420 <__reset+0xfa1e7420>
80207d40:	d8802d17 	ldw	r2,180(sp)
80207d44:	d8c02d17 	ldw	r3,180(sp)
80207d48:	d9002d17 	ldw	r4,180(sp)
80207d4c:	10800017 	ldw	r2,0(r2)
80207d50:	18c00117 	ldw	r3,4(r3)
80207d54:	21000204 	addi	r4,r4,8
80207d58:	d8803615 	stw	r2,216(sp)
80207d5c:	d8c03715 	stw	r3,220(sp)
80207d60:	d9002d15 	stw	r4,180(sp)
80207d64:	003b8206 	br	80206b70 <__reset+0xfa1e6b70>
80207d68:	9080100c 	andi	r2,r18,64
80207d6c:	10010726 	beq	r2,zero,8020818c <___svfprintf_internal_r+0x1ad0>
80207d70:	d8c02d17 	ldw	r3,180(sp)
80207d74:	1d00000f 	ldh	r20,0(r3)
80207d78:	18c00104 	addi	r3,r3,4
80207d7c:	d8c02d15 	stw	r3,180(sp)
80207d80:	a02dd7fa 	srai	r22,r20,31
80207d84:	b005883a 	mov	r2,r22
80207d88:	003ba206 	br	80206c14 <__reset+0xfa1e6c14>
80207d8c:	9080100c 	andi	r2,r18,64
80207d90:	10010526 	beq	r2,zero,802081a8 <___svfprintf_internal_r+0x1aec>
80207d94:	d9002d17 	ldw	r4,180(sp)
80207d98:	002d883a 	mov	r22,zero
80207d9c:	2500000b 	ldhu	r20,0(r4)
80207da0:	21000104 	addi	r4,r4,4
80207da4:	d9002d15 	stw	r4,180(sp)
80207da8:	003cfe06 	br	802071a4 <__reset+0xfa1e71a4>
80207dac:	bc400007 	ldb	r17,0(r23)
80207db0:	003a9606 	br	8020680c <__reset+0xfa1e680c>
80207db4:	9080040c 	andi	r2,r18,16
80207db8:	10010126 	beq	r2,zero,802081c0 <___svfprintf_internal_r+0x1b04>
80207dbc:	d9402d17 	ldw	r5,180(sp)
80207dc0:	d8c02f17 	ldw	r3,188(sp)
80207dc4:	28800017 	ldw	r2,0(r5)
80207dc8:	29400104 	addi	r5,r5,4
80207dcc:	d9402d15 	stw	r5,180(sp)
80207dd0:	10c00015 	stw	r3,0(r2)
80207dd4:	003a6406 	br	80206768 <__reset+0xfa1e6768>
80207dd8:	d9002917 	ldw	r4,164(sp)
80207ddc:	d8002785 	stb	zero,158(sp)
80207de0:	203d8d16 	blt	r4,zero,80207418 <__reset+0xfa1e7418>
80207de4:	00bfdfc4 	movi	r2,-129
80207de8:	90a4703a 	and	r18,r18,r2
80207dec:	003b0506 	br	80206a04 <__reset+0xfa1e6a04>
80207df0:	016008b4 	movhi	r5,32802
80207df4:	2973f584 	addi	r5,r5,-12330
80207df8:	d9402b15 	stw	r5,172(sp)
80207dfc:	d9402b17 	ldw	r5,172(sp)
80207e00:	1c47883a 	add	r3,r3,r17
80207e04:	10800044 	addi	r2,r2,1
80207e08:	41400015 	stw	r5,0(r8)
80207e0c:	44400115 	stw	r17,4(r8)
80207e10:	d8c02015 	stw	r3,128(sp)
80207e14:	d8801f15 	stw	r2,124(sp)
80207e18:	010001c4 	movi	r4,7
80207e1c:	20bf3016 	blt	r4,r2,80207ae0 <__reset+0xfa1e7ae0>
80207e20:	42000204 	addi	r8,r8,8
80207e24:	003f3506 	br	80207afc <__reset+0xfa1e7afc>
80207e28:	012008b4 	movhi	r4,32802
80207e2c:	2133f584 	addi	r4,r4,-12330
80207e30:	d9002b15 	stw	r4,172(sp)
80207e34:	003c5e06 	br	80206fb0 <__reset+0xfa1e6fb0>
80207e38:	d9402c17 	ldw	r5,176(sp)
80207e3c:	d9801e04 	addi	r6,sp,120
80207e40:	9809883a 	mov	r4,r19
80207e44:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207e48:	103b011e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207e4c:	d8c02017 	ldw	r3,128(sp)
80207e50:	da000404 	addi	r8,sp,16
80207e54:	003d9306 	br	802074a4 <__reset+0xfa1e74a4>
80207e58:	d8801f17 	ldw	r2,124(sp)
80207e5c:	016008b4 	movhi	r5,32802
80207e60:	01000044 	movi	r4,1
80207e64:	18c00044 	addi	r3,r3,1
80207e68:	10800044 	addi	r2,r2,1
80207e6c:	2973f504 	addi	r5,r5,-12332
80207e70:	41000115 	stw	r4,4(r8)
80207e74:	41400015 	stw	r5,0(r8)
80207e78:	d8c02015 	stw	r3,128(sp)
80207e7c:	d8801f15 	stw	r2,124(sp)
80207e80:	010001c4 	movi	r4,7
80207e84:	2080b516 	blt	r4,r2,8020815c <___svfprintf_internal_r+0x1aa0>
80207e88:	42000204 	addi	r8,r8,8
80207e8c:	8800041e 	bne	r17,zero,80207ea0 <___svfprintf_internal_r+0x17e4>
80207e90:	d8803317 	ldw	r2,204(sp)
80207e94:	1000021e 	bne	r2,zero,80207ea0 <___svfprintf_internal_r+0x17e4>
80207e98:	9080004c 	andi	r2,r18,1
80207e9c:	103c5b26 	beq	r2,zero,8020700c <__reset+0xfa1e700c>
80207ea0:	d9003817 	ldw	r4,224(sp)
80207ea4:	d8801f17 	ldw	r2,124(sp)
80207ea8:	d9403417 	ldw	r5,208(sp)
80207eac:	20c7883a 	add	r3,r4,r3
80207eb0:	10800044 	addi	r2,r2,1
80207eb4:	41000115 	stw	r4,4(r8)
80207eb8:	41400015 	stw	r5,0(r8)
80207ebc:	d8c02015 	stw	r3,128(sp)
80207ec0:	d8801f15 	stw	r2,124(sp)
80207ec4:	010001c4 	movi	r4,7
80207ec8:	20818016 	blt	r4,r2,802084cc <___svfprintf_internal_r+0x1e10>
80207ecc:	42000204 	addi	r8,r8,8
80207ed0:	0463c83a 	sub	r17,zero,r17
80207ed4:	0440cb0e 	bge	zero,r17,80208204 <___svfprintf_internal_r+0x1b48>
80207ed8:	05800404 	movi	r22,16
80207edc:	b440e80e 	bge	r22,r17,80208280 <___svfprintf_internal_r+0x1bc4>
80207ee0:	016008b4 	movhi	r5,32802
80207ee4:	2973f584 	addi	r5,r5,-12330
80207ee8:	d9402b15 	stw	r5,172(sp)
80207eec:	070001c4 	movi	fp,7
80207ef0:	dd002c17 	ldw	r20,176(sp)
80207ef4:	00000306 	br	80207f04 <___svfprintf_internal_r+0x1848>
80207ef8:	42000204 	addi	r8,r8,8
80207efc:	8c7ffc04 	addi	r17,r17,-16
80207f00:	b440e20e 	bge	r22,r17,8020828c <___svfprintf_internal_r+0x1bd0>
80207f04:	18c00404 	addi	r3,r3,16
80207f08:	10800044 	addi	r2,r2,1
80207f0c:	45400015 	stw	r21,0(r8)
80207f10:	45800115 	stw	r22,4(r8)
80207f14:	d8c02015 	stw	r3,128(sp)
80207f18:	d8801f15 	stw	r2,124(sp)
80207f1c:	e0bff60e 	bge	fp,r2,80207ef8 <__reset+0xfa1e7ef8>
80207f20:	d9801e04 	addi	r6,sp,120
80207f24:	a00b883a 	mov	r5,r20
80207f28:	9809883a 	mov	r4,r19
80207f2c:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207f30:	103ac71e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207f34:	d8c02017 	ldw	r3,128(sp)
80207f38:	d8801f17 	ldw	r2,124(sp)
80207f3c:	da000404 	addi	r8,sp,16
80207f40:	003fee06 	br	80207efc <__reset+0xfa1e7efc>
80207f44:	d8c02d17 	ldw	r3,180(sp)
80207f48:	d9002917 	ldw	r4,164(sp)
80207f4c:	002d883a 	mov	r22,zero
80207f50:	18800104 	addi	r2,r3,4
80207f54:	1d000017 	ldw	r20,0(r3)
80207f58:	203e7d0e 	bge	r4,zero,80207950 <__reset+0xfa1e7950>
80207f5c:	003eda06 	br	80207ac8 <__reset+0xfa1e7ac8>
80207f60:	d9402d17 	ldw	r5,180(sp)
80207f64:	d8c02917 	ldw	r3,164(sp)
80207f68:	002d883a 	mov	r22,zero
80207f6c:	28800104 	addi	r2,r5,4
80207f70:	2d000017 	ldw	r20,0(r5)
80207f74:	183e2d0e 	bge	r3,zero,8020782c <__reset+0xfa1e782c>
80207f78:	003f6b06 	br	80207d28 <__reset+0xfa1e7d28>
80207f7c:	d8c02d15 	stw	r3,180(sp)
80207f80:	0039883a 	mov	fp,zero
80207f84:	003ed206 	br	80207ad0 <__reset+0xfa1e7ad0>
80207f88:	bc400043 	ldbu	r17,1(r23)
80207f8c:	94800814 	ori	r18,r18,32
80207f90:	bdc00044 	addi	r23,r23,1
80207f94:	8c403fcc 	andi	r17,r17,255
80207f98:	8c40201c 	xori	r17,r17,128
80207f9c:	8c7fe004 	addi	r17,r17,-128
80207fa0:	003a1a06 	br	8020680c <__reset+0xfa1e680c>
80207fa4:	d9402c17 	ldw	r5,176(sp)
80207fa8:	d9801e04 	addi	r6,sp,120
80207fac:	9809883a 	mov	r4,r19
80207fb0:	020fc4c0 	call	8020fc4c <__ssprint_r>
80207fb4:	103aa61e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80207fb8:	d8c02017 	ldw	r3,128(sp)
80207fbc:	da000404 	addi	r8,sp,16
80207fc0:	003d4a06 	br	802074ec <__reset+0xfa1e74ec>
80207fc4:	d9002917 	ldw	r4,164(sp)
80207fc8:	05bff7c4 	movi	r22,-33
80207fcc:	00bfffc4 	movi	r2,-1
80207fd0:	8dac703a 	and	r22,r17,r22
80207fd4:	20806a26 	beq	r4,r2,80208180 <___svfprintf_internal_r+0x1ac4>
80207fd8:	008011c4 	movi	r2,71
80207fdc:	b0813726 	beq	r22,r2,802084bc <___svfprintf_internal_r+0x1e00>
80207fe0:	d9003717 	ldw	r4,220(sp)
80207fe4:	90c04014 	ori	r3,r18,256
80207fe8:	d8c02b15 	stw	r3,172(sp)
80207fec:	20015d16 	blt	r4,zero,80208564 <___svfprintf_internal_r+0x1ea8>
80207ff0:	dd003717 	ldw	r20,220(sp)
80207ff4:	d8002a05 	stb	zero,168(sp)
80207ff8:	00801984 	movi	r2,102
80207ffc:	88814026 	beq	r17,r2,80208500 <___svfprintf_internal_r+0x1e44>
80208000:	00801184 	movi	r2,70
80208004:	88817126 	beq	r17,r2,802085cc <___svfprintf_internal_r+0x1f10>
80208008:	00801144 	movi	r2,69
8020800c:	b0816226 	beq	r22,r2,80208598 <___svfprintf_internal_r+0x1edc>
80208010:	d8c02917 	ldw	r3,164(sp)
80208014:	d8802104 	addi	r2,sp,132
80208018:	d8800315 	stw	r2,12(sp)
8020801c:	d9403617 	ldw	r5,216(sp)
80208020:	d8802504 	addi	r2,sp,148
80208024:	d8800215 	stw	r2,8(sp)
80208028:	d8802604 	addi	r2,sp,152
8020802c:	d8c00015 	stw	r3,0(sp)
80208030:	d8800115 	stw	r2,4(sp)
80208034:	01c00084 	movi	r7,2
80208038:	a00d883a 	mov	r6,r20
8020803c:	9809883a 	mov	r4,r19
80208040:	d8c03d15 	stw	r3,244(sp)
80208044:	da003e15 	stw	r8,248(sp)
80208048:	020aeb80 	call	8020aeb8 <_dtoa_r>
8020804c:	1021883a 	mov	r16,r2
80208050:	008019c4 	movi	r2,103
80208054:	d8c03d17 	ldw	r3,244(sp)
80208058:	da003e17 	ldw	r8,248(sp)
8020805c:	8880e726 	beq	r17,r2,802083fc <___svfprintf_internal_r+0x1d40>
80208060:	008011c4 	movi	r2,71
80208064:	8880d426 	beq	r17,r2,802083b8 <___svfprintf_internal_r+0x1cfc>
80208068:	80f9883a 	add	fp,r16,r3
8020806c:	d9003617 	ldw	r4,216(sp)
80208070:	000d883a 	mov	r6,zero
80208074:	000f883a 	mov	r7,zero
80208078:	a00b883a 	mov	r5,r20
8020807c:	da003e15 	stw	r8,248(sp)
80208080:	0214dcc0 	call	80214dcc <__eqdf2>
80208084:	da003e17 	ldw	r8,248(sp)
80208088:	1000e426 	beq	r2,zero,8020841c <___svfprintf_internal_r+0x1d60>
8020808c:	d8802117 	ldw	r2,132(sp)
80208090:	1700062e 	bgeu	r2,fp,802080ac <___svfprintf_internal_r+0x19f0>
80208094:	01000c04 	movi	r4,48
80208098:	10c00044 	addi	r3,r2,1
8020809c:	d8c02115 	stw	r3,132(sp)
802080a0:	11000005 	stb	r4,0(r2)
802080a4:	d8802117 	ldw	r2,132(sp)
802080a8:	173ffb36 	bltu	r2,fp,80208098 <__reset+0xfa1e8098>
802080ac:	1405c83a 	sub	r2,r2,r16
802080b0:	d8803315 	stw	r2,204(sp)
802080b4:	008011c4 	movi	r2,71
802080b8:	b080c526 	beq	r22,r2,802083d0 <___svfprintf_internal_r+0x1d14>
802080bc:	00801944 	movi	r2,101
802080c0:	1441d90e 	bge	r2,r17,80208828 <___svfprintf_internal_r+0x216c>
802080c4:	d8c02617 	ldw	r3,152(sp)
802080c8:	00801984 	movi	r2,102
802080cc:	d8c03215 	stw	r3,200(sp)
802080d0:	88813426 	beq	r17,r2,802085a4 <___svfprintf_internal_r+0x1ee8>
802080d4:	d8c03217 	ldw	r3,200(sp)
802080d8:	d9003317 	ldw	r4,204(sp)
802080dc:	19012516 	blt	r3,r4,80208574 <___svfprintf_internal_r+0x1eb8>
802080e0:	9480004c 	andi	r18,r18,1
802080e4:	9001841e 	bne	r18,zero,802086f8 <___svfprintf_internal_r+0x203c>
802080e8:	1805883a 	mov	r2,r3
802080ec:	1801cc16 	blt	r3,zero,80208820 <___svfprintf_internal_r+0x2164>
802080f0:	d8c03217 	ldw	r3,200(sp)
802080f4:	044019c4 	movi	r17,103
802080f8:	d8c02e15 	stw	r3,184(sp)
802080fc:	df002a07 	ldb	fp,168(sp)
80208100:	e000a61e 	bne	fp,zero,8020839c <___svfprintf_internal_r+0x1ce0>
80208104:	df002783 	ldbu	fp,158(sp)
80208108:	d8802a15 	stw	r2,168(sp)
8020810c:	dc802b17 	ldw	r18,172(sp)
80208110:	d8002915 	stw	zero,164(sp)
80208114:	003b1706 	br	80206d74 <__reset+0xfa1e6d74>
80208118:	042008b4 	movhi	r16,32802
8020811c:	8433e504 	addi	r16,r16,-12396
80208120:	003aa606 	br	80206bbc <__reset+0xfa1e6bbc>
80208124:	d9003917 	ldw	r4,228(sp)
80208128:	04001004 	movi	r16,64
8020812c:	800b883a 	mov	r5,r16
80208130:	020d8980 	call	8020d898 <_malloc_r>
80208134:	d9002c17 	ldw	r4,176(sp)
80208138:	20800015 	stw	r2,0(r4)
8020813c:	20800415 	stw	r2,16(r4)
80208140:	1001cb26 	beq	r2,zero,80208870 <___svfprintf_internal_r+0x21b4>
80208144:	d8802c17 	ldw	r2,176(sp)
80208148:	14000515 	stw	r16,20(r2)
8020814c:	00397606 	br	80206728 <__reset+0xfa1e6728>
80208150:	042008b4 	movhi	r16,32802
80208154:	8433e704 	addi	r16,r16,-12388
80208158:	003ee106 	br	80207ce0 <__reset+0xfa1e7ce0>
8020815c:	d9402c17 	ldw	r5,176(sp)
80208160:	d9801e04 	addi	r6,sp,120
80208164:	9809883a 	mov	r4,r19
80208168:	020fc4c0 	call	8020fc4c <__ssprint_r>
8020816c:	103a381e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80208170:	dc402617 	ldw	r17,152(sp)
80208174:	d8c02017 	ldw	r3,128(sp)
80208178:	da000404 	addi	r8,sp,16
8020817c:	003f4306 	br	80207e8c <__reset+0xfa1e7e8c>
80208180:	01400184 	movi	r5,6
80208184:	d9402915 	stw	r5,164(sp)
80208188:	003f9506 	br	80207fe0 <__reset+0xfa1e7fe0>
8020818c:	d9002d17 	ldw	r4,180(sp)
80208190:	25000017 	ldw	r20,0(r4)
80208194:	21000104 	addi	r4,r4,4
80208198:	d9002d15 	stw	r4,180(sp)
8020819c:	a02dd7fa 	srai	r22,r20,31
802081a0:	b005883a 	mov	r2,r22
802081a4:	003a9b06 	br	80206c14 <__reset+0xfa1e6c14>
802081a8:	d9402d17 	ldw	r5,180(sp)
802081ac:	002d883a 	mov	r22,zero
802081b0:	2d000017 	ldw	r20,0(r5)
802081b4:	29400104 	addi	r5,r5,4
802081b8:	d9402d15 	stw	r5,180(sp)
802081bc:	003bf906 	br	802071a4 <__reset+0xfa1e71a4>
802081c0:	9480100c 	andi	r18,r18,64
802081c4:	90006e26 	beq	r18,zero,80208380 <___svfprintf_internal_r+0x1cc4>
802081c8:	d9002d17 	ldw	r4,180(sp)
802081cc:	d9402f17 	ldw	r5,188(sp)
802081d0:	20800017 	ldw	r2,0(r4)
802081d4:	21000104 	addi	r4,r4,4
802081d8:	d9002d15 	stw	r4,180(sp)
802081dc:	1140000d 	sth	r5,0(r2)
802081e0:	00396106 	br	80206768 <__reset+0xfa1e6768>
802081e4:	d9402c17 	ldw	r5,176(sp)
802081e8:	d9801e04 	addi	r6,sp,120
802081ec:	9809883a 	mov	r4,r19
802081f0:	020fc4c0 	call	8020fc4c <__ssprint_r>
802081f4:	103a161e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
802081f8:	d8c02017 	ldw	r3,128(sp)
802081fc:	d8801f17 	ldw	r2,124(sp)
80208200:	da000404 	addi	r8,sp,16
80208204:	d9403317 	ldw	r5,204(sp)
80208208:	10800044 	addi	r2,r2,1
8020820c:	44000015 	stw	r16,0(r8)
80208210:	28c7883a 	add	r3,r5,r3
80208214:	003b7706 	br	80206ff4 <__reset+0xfa1e6ff4>
80208218:	8009883a 	mov	r4,r16
8020821c:	da003e15 	stw	r8,248(sp)
80208220:	02066240 	call	80206624 <strlen>
80208224:	d8802e15 	stw	r2,184(sp)
80208228:	da003e17 	ldw	r8,248(sp)
8020822c:	103c280e 	bge	r2,zero,802072d0 <__reset+0xfa1e72d0>
80208230:	0005883a 	mov	r2,zero
80208234:	003c2606 	br	802072d0 <__reset+0xfa1e72d0>
80208238:	00bfffc4 	movi	r2,-1
8020823c:	003a0906 	br	80206a64 <__reset+0xfa1e6a64>
80208240:	012008b4 	movhi	r4,32802
80208244:	2133f984 	addi	r4,r4,-12314
80208248:	d9003515 	stw	r4,212(sp)
8020824c:	003b0606 	br	80206e68 <__reset+0xfa1e6e68>
80208250:	013fffc4 	movi	r4,-1
80208254:	003a2706 	br	80206af4 <__reset+0xfa1e6af4>
80208258:	d9402c17 	ldw	r5,176(sp)
8020825c:	d9801e04 	addi	r6,sp,120
80208260:	9809883a 	mov	r4,r19
80208264:	020fc4c0 	call	8020fc4c <__ssprint_r>
80208268:	1039f91e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
8020826c:	d8c02017 	ldw	r3,128(sp)
80208270:	da000404 	addi	r8,sp,16
80208274:	003d8406 	br	80207888 <__reset+0xfa1e7888>
80208278:	0023883a 	mov	r17,zero
8020827c:	003d8306 	br	8020788c <__reset+0xfa1e788c>
80208280:	012008b4 	movhi	r4,32802
80208284:	2133f584 	addi	r4,r4,-12330
80208288:	d9002b15 	stw	r4,172(sp)
8020828c:	d9002b17 	ldw	r4,172(sp)
80208290:	1c47883a 	add	r3,r3,r17
80208294:	10800044 	addi	r2,r2,1
80208298:	41000015 	stw	r4,0(r8)
8020829c:	44400115 	stw	r17,4(r8)
802082a0:	d8c02015 	stw	r3,128(sp)
802082a4:	d8801f15 	stw	r2,124(sp)
802082a8:	010001c4 	movi	r4,7
802082ac:	20bfcd16 	blt	r4,r2,802081e4 <__reset+0xfa1e81e4>
802082b0:	42000204 	addi	r8,r8,8
802082b4:	003fd306 	br	80208204 <__reset+0xfa1e8204>
802082b8:	d9402c17 	ldw	r5,176(sp)
802082bc:	d9801e04 	addi	r6,sp,120
802082c0:	9809883a 	mov	r4,r19
802082c4:	020fc4c0 	call	8020fc4c <__ssprint_r>
802082c8:	1039e11e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
802082cc:	d8802617 	ldw	r2,152(sp)
802082d0:	d8c02017 	ldw	r3,128(sp)
802082d4:	da000404 	addi	r8,sp,16
802082d8:	003e1c06 	br	80207b4c <__reset+0xfa1e7b4c>
802082dc:	d8802917 	ldw	r2,164(sp)
802082e0:	00c00184 	movi	r3,6
802082e4:	1880012e 	bgeu	r3,r2,802082ec <___svfprintf_internal_r+0x1c30>
802082e8:	1805883a 	mov	r2,r3
802082ec:	d8802e15 	stw	r2,184(sp)
802082f0:	1000f316 	blt	r2,zero,802086c0 <___svfprintf_internal_r+0x2004>
802082f4:	042008b4 	movhi	r16,32802
802082f8:	d8802a15 	stw	r2,168(sp)
802082fc:	dd002d15 	stw	r20,180(sp)
80208300:	d8002915 	stw	zero,164(sp)
80208304:	d8003215 	stw	zero,200(sp)
80208308:	8433f304 	addi	r16,r16,-12340
8020830c:	0039883a 	mov	fp,zero
80208310:	003a9f06 	br	80206d90 <__reset+0xfa1e6d90>
80208314:	012008b4 	movhi	r4,32802
80208318:	2133f984 	addi	r4,r4,-12314
8020831c:	d9003515 	stw	r4,212(sp)
80208320:	003b5f06 	br	802070a0 <__reset+0xfa1e70a0>
80208324:	d9402c17 	ldw	r5,176(sp)
80208328:	d9801e04 	addi	r6,sp,120
8020832c:	9809883a 	mov	r4,r19
80208330:	020fc4c0 	call	8020fc4c <__ssprint_r>
80208334:	1039c61e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
80208338:	d8802617 	ldw	r2,152(sp)
8020833c:	d9403317 	ldw	r5,204(sp)
80208340:	d8c02017 	ldw	r3,128(sp)
80208344:	da000404 	addi	r8,sp,16
80208348:	2885c83a 	sub	r2,r5,r2
8020834c:	003e1006 	br	80207b90 <__reset+0xfa1e7b90>
80208350:	00800044 	movi	r2,1
80208354:	10803fcc 	andi	r2,r2,255
80208358:	00c00044 	movi	r3,1
8020835c:	10fa3526 	beq	r2,r3,80206c34 <__reset+0xfa1e6c34>
80208360:	00c00084 	movi	r3,2
80208364:	10fb9e26 	beq	r2,r3,802071e0 <__reset+0xfa1e71e0>
80208368:	003a6406 	br	80206cfc <__reset+0xfa1e6cfc>
8020836c:	0021883a 	mov	r16,zero
80208370:	003e0806 	br	80207b94 <__reset+0xfa1e7b94>
80208374:	07000b44 	movi	fp,45
80208378:	df002785 	stb	fp,158(sp)
8020837c:	003a0b06 	br	80206bac <__reset+0xfa1e6bac>
80208380:	d8c02d17 	ldw	r3,180(sp)
80208384:	d9002f17 	ldw	r4,188(sp)
80208388:	18800017 	ldw	r2,0(r3)
8020838c:	18c00104 	addi	r3,r3,4
80208390:	d8c02d15 	stw	r3,180(sp)
80208394:	11000015 	stw	r4,0(r2)
80208398:	0038f306 	br	80206768 <__reset+0xfa1e6768>
8020839c:	00c00b44 	movi	r3,45
802083a0:	d8c02785 	stb	r3,158(sp)
802083a4:	d8802a15 	stw	r2,168(sp)
802083a8:	dc802b17 	ldw	r18,172(sp)
802083ac:	d8002915 	stw	zero,164(sp)
802083b0:	07000b44 	movi	fp,45
802083b4:	003a7306 	br	80206d84 <__reset+0xfa1e6d84>
802083b8:	9080004c 	andi	r2,r18,1
802083bc:	1000941e 	bne	r2,zero,80208610 <___svfprintf_internal_r+0x1f54>
802083c0:	d8802117 	ldw	r2,132(sp)
802083c4:	1405c83a 	sub	r2,r2,r16
802083c8:	d8803315 	stw	r2,204(sp)
802083cc:	b441161e 	bne	r22,r17,80208828 <___svfprintf_internal_r+0x216c>
802083d0:	dd802617 	ldw	r22,152(sp)
802083d4:	00bfff44 	movi	r2,-3
802083d8:	b0801a16 	blt	r22,r2,80208444 <___svfprintf_internal_r+0x1d88>
802083dc:	d9402917 	ldw	r5,164(sp)
802083e0:	2d801816 	blt	r5,r22,80208444 <___svfprintf_internal_r+0x1d88>
802083e4:	dd803215 	stw	r22,200(sp)
802083e8:	003f3a06 	br	802080d4 <__reset+0xfa1e80d4>
802083ec:	1025883a 	mov	r18,r2
802083f0:	0039883a 	mov	fp,zero
802083f4:	00800084 	movi	r2,2
802083f8:	003fd606 	br	80208354 <__reset+0xfa1e8354>
802083fc:	9080004c 	andi	r2,r18,1
80208400:	103f191e 	bne	r2,zero,80208068 <__reset+0xfa1e8068>
80208404:	d8802117 	ldw	r2,132(sp)
80208408:	003f2806 	br	802080ac <__reset+0xfa1e80ac>
8020840c:	012008b4 	movhi	r4,32802
80208410:	2133f584 	addi	r4,r4,-12330
80208414:	d9002b15 	stw	r4,172(sp)
80208418:	003c7c06 	br	8020760c <__reset+0xfa1e760c>
8020841c:	e005883a 	mov	r2,fp
80208420:	003f2206 	br	802080ac <__reset+0xfa1e80ac>
80208424:	d9402917 	ldw	r5,164(sp)
80208428:	df002783 	ldbu	fp,158(sp)
8020842c:	dd002d15 	stw	r20,180(sp)
80208430:	d9402a15 	stw	r5,168(sp)
80208434:	d9402e15 	stw	r5,184(sp)
80208438:	d8002915 	stw	zero,164(sp)
8020843c:	d8003215 	stw	zero,200(sp)
80208440:	003a4c06 	br	80206d74 <__reset+0xfa1e6d74>
80208444:	8c7fff84 	addi	r17,r17,-2
80208448:	b5bfffc4 	addi	r22,r22,-1
8020844c:	dd802615 	stw	r22,152(sp)
80208450:	dc4022c5 	stb	r17,139(sp)
80208454:	b000c316 	blt	r22,zero,80208764 <___svfprintf_internal_r+0x20a8>
80208458:	00800ac4 	movi	r2,43
8020845c:	d8802305 	stb	r2,140(sp)
80208460:	00800244 	movi	r2,9
80208464:	15806e16 	blt	r2,r22,80208620 <___svfprintf_internal_r+0x1f64>
80208468:	00800c04 	movi	r2,48
8020846c:	b5800c04 	addi	r22,r22,48
80208470:	d8802345 	stb	r2,141(sp)
80208474:	dd802385 	stb	r22,142(sp)
80208478:	d88023c4 	addi	r2,sp,143
8020847c:	df0022c4 	addi	fp,sp,139
80208480:	d8c03317 	ldw	r3,204(sp)
80208484:	1739c83a 	sub	fp,r2,fp
80208488:	d9003317 	ldw	r4,204(sp)
8020848c:	e0c7883a 	add	r3,fp,r3
80208490:	df003b15 	stw	fp,236(sp)
80208494:	d8c02e15 	stw	r3,184(sp)
80208498:	00800044 	movi	r2,1
8020849c:	1100b70e 	bge	r2,r4,8020877c <___svfprintf_internal_r+0x20c0>
802084a0:	d8c02e17 	ldw	r3,184(sp)
802084a4:	18c00044 	addi	r3,r3,1
802084a8:	d8c02e15 	stw	r3,184(sp)
802084ac:	1805883a 	mov	r2,r3
802084b0:	1800b016 	blt	r3,zero,80208774 <___svfprintf_internal_r+0x20b8>
802084b4:	d8003215 	stw	zero,200(sp)
802084b8:	003f1006 	br	802080fc <__reset+0xfa1e80fc>
802084bc:	d8802917 	ldw	r2,164(sp)
802084c0:	103ec71e 	bne	r2,zero,80207fe0 <__reset+0xfa1e7fe0>
802084c4:	dc002915 	stw	r16,164(sp)
802084c8:	003ec506 	br	80207fe0 <__reset+0xfa1e7fe0>
802084cc:	d9402c17 	ldw	r5,176(sp)
802084d0:	d9801e04 	addi	r6,sp,120
802084d4:	9809883a 	mov	r4,r19
802084d8:	020fc4c0 	call	8020fc4c <__ssprint_r>
802084dc:	10395c1e 	bne	r2,zero,80206a50 <__reset+0xfa1e6a50>
802084e0:	dc402617 	ldw	r17,152(sp)
802084e4:	d8c02017 	ldw	r3,128(sp)
802084e8:	d8801f17 	ldw	r2,124(sp)
802084ec:	da000404 	addi	r8,sp,16
802084f0:	003e7706 	br	80207ed0 <__reset+0xfa1e7ed0>
802084f4:	582f883a 	mov	r23,r11
802084f8:	d8002915 	stw	zero,164(sp)
802084fc:	0038c406 	br	80206810 <__reset+0xfa1e6810>
80208500:	d8c02917 	ldw	r3,164(sp)
80208504:	d8802104 	addi	r2,sp,132
80208508:	d8800315 	stw	r2,12(sp)
8020850c:	d9403617 	ldw	r5,216(sp)
80208510:	d8802504 	addi	r2,sp,148
80208514:	d8800215 	stw	r2,8(sp)
80208518:	d8802604 	addi	r2,sp,152
8020851c:	d8c00015 	stw	r3,0(sp)
80208520:	9809883a 	mov	r4,r19
80208524:	d8800115 	stw	r2,4(sp)
80208528:	01c000c4 	movi	r7,3
8020852c:	a00d883a 	mov	r6,r20
80208530:	da003e15 	stw	r8,248(sp)
80208534:	020aeb80 	call	8020aeb8 <_dtoa_r>
80208538:	d9002917 	ldw	r4,164(sp)
8020853c:	da003e17 	ldw	r8,248(sp)
80208540:	1021883a 	mov	r16,r2
80208544:	1139883a 	add	fp,r2,r4
80208548:	2007883a 	mov	r3,r4
8020854c:	81000007 	ldb	r4,0(r16)
80208550:	00800c04 	movi	r2,48
80208554:	20806f26 	beq	r4,r2,80208714 <___svfprintf_internal_r+0x2058>
80208558:	d8c02617 	ldw	r3,152(sp)
8020855c:	e0f9883a 	add	fp,fp,r3
80208560:	003ec206 	br	8020806c <__reset+0xfa1e806c>
80208564:	00c00b44 	movi	r3,45
80208568:	2520003c 	xorhi	r20,r4,32768
8020856c:	d8c02a05 	stb	r3,168(sp)
80208570:	003ea106 	br	80207ff8 <__reset+0xfa1e7ff8>
80208574:	d8c03217 	ldw	r3,200(sp)
80208578:	00c0890e 	bge	zero,r3,802087a0 <___svfprintf_internal_r+0x20e4>
8020857c:	00800044 	movi	r2,1
80208580:	d9003317 	ldw	r4,204(sp)
80208584:	1105883a 	add	r2,r2,r4
80208588:	d8802e15 	stw	r2,184(sp)
8020858c:	10005f16 	blt	r2,zero,8020870c <___svfprintf_internal_r+0x2050>
80208590:	044019c4 	movi	r17,103
80208594:	003ed906 	br	802080fc <__reset+0xfa1e80fc>
80208598:	d9002917 	ldw	r4,164(sp)
8020859c:	20c00044 	addi	r3,r4,1
802085a0:	003e9c06 	br	80208014 <__reset+0xfa1e8014>
802085a4:	d9002917 	ldw	r4,164(sp)
802085a8:	00c0680e 	bge	zero,r3,8020874c <___svfprintf_internal_r+0x2090>
802085ac:	2000461e 	bne	r4,zero,802086c8 <___svfprintf_internal_r+0x200c>
802085b0:	9480004c 	andi	r18,r18,1
802085b4:	9000441e 	bne	r18,zero,802086c8 <___svfprintf_internal_r+0x200c>
802085b8:	1805883a 	mov	r2,r3
802085bc:	1800a016 	blt	r3,zero,80208840 <___svfprintf_internal_r+0x2184>
802085c0:	d8c03217 	ldw	r3,200(sp)
802085c4:	d8c02e15 	stw	r3,184(sp)
802085c8:	003ecc06 	br	802080fc <__reset+0xfa1e80fc>
802085cc:	d9402917 	ldw	r5,164(sp)
802085d0:	d8802104 	addi	r2,sp,132
802085d4:	d8800315 	stw	r2,12(sp)
802085d8:	d9400015 	stw	r5,0(sp)
802085dc:	d8802504 	addi	r2,sp,148
802085e0:	d9403617 	ldw	r5,216(sp)
802085e4:	d8800215 	stw	r2,8(sp)
802085e8:	d8802604 	addi	r2,sp,152
802085ec:	d8800115 	stw	r2,4(sp)
802085f0:	01c000c4 	movi	r7,3
802085f4:	a00d883a 	mov	r6,r20
802085f8:	9809883a 	mov	r4,r19
802085fc:	da003e15 	stw	r8,248(sp)
80208600:	020aeb80 	call	8020aeb8 <_dtoa_r>
80208604:	d8c02917 	ldw	r3,164(sp)
80208608:	da003e17 	ldw	r8,248(sp)
8020860c:	1021883a 	mov	r16,r2
80208610:	00801184 	movi	r2,70
80208614:	80f9883a 	add	fp,r16,r3
80208618:	88bfcc26 	beq	r17,r2,8020854c <__reset+0xfa1e854c>
8020861c:	003e9306 	br	8020806c <__reset+0xfa1e806c>
80208620:	df0022c4 	addi	fp,sp,139
80208624:	dc002915 	stw	r16,164(sp)
80208628:	9829883a 	mov	r20,r19
8020862c:	e021883a 	mov	r16,fp
80208630:	4027883a 	mov	r19,r8
80208634:	b009883a 	mov	r4,r22
80208638:	01400284 	movi	r5,10
8020863c:	0213b080 	call	80213b08 <__modsi3>
80208640:	10800c04 	addi	r2,r2,48
80208644:	843fffc4 	addi	r16,r16,-1
80208648:	b009883a 	mov	r4,r22
8020864c:	01400284 	movi	r5,10
80208650:	80800005 	stb	r2,0(r16)
80208654:	0213a840 	call	80213a84 <__divsi3>
80208658:	102d883a 	mov	r22,r2
8020865c:	00800244 	movi	r2,9
80208660:	15bff416 	blt	r2,r22,80208634 <__reset+0xfa1e8634>
80208664:	9811883a 	mov	r8,r19
80208668:	b0800c04 	addi	r2,r22,48
8020866c:	a027883a 	mov	r19,r20
80208670:	8029883a 	mov	r20,r16
80208674:	a17fffc4 	addi	r5,r20,-1
80208678:	a0bfffc5 	stb	r2,-1(r20)
8020867c:	dc002917 	ldw	r16,164(sp)
80208680:	2f00752e 	bgeu	r5,fp,80208858 <___svfprintf_internal_r+0x219c>
80208684:	d9c02384 	addi	r7,sp,142
80208688:	3d0fc83a 	sub	r7,r7,r20
8020868c:	d9002344 	addi	r4,sp,141
80208690:	e1cf883a 	add	r7,fp,r7
80208694:	00000106 	br	8020869c <___svfprintf_internal_r+0x1fe0>
80208698:	28800003 	ldbu	r2,0(r5)
8020869c:	20800005 	stb	r2,0(r4)
802086a0:	21000044 	addi	r4,r4,1
802086a4:	29400044 	addi	r5,r5,1
802086a8:	21fffb1e 	bne	r4,r7,80208698 <__reset+0xfa1e8698>
802086ac:	d8802304 	addi	r2,sp,140
802086b0:	1505c83a 	sub	r2,r2,r20
802086b4:	d8c02344 	addi	r3,sp,141
802086b8:	1885883a 	add	r2,r3,r2
802086bc:	003f7006 	br	80208480 <__reset+0xfa1e8480>
802086c0:	0005883a 	mov	r2,zero
802086c4:	003f0b06 	br	802082f4 <__reset+0xfa1e82f4>
802086c8:	d9002917 	ldw	r4,164(sp)
802086cc:	d8c03217 	ldw	r3,200(sp)
802086d0:	20800044 	addi	r2,r4,1
802086d4:	1885883a 	add	r2,r3,r2
802086d8:	d8802e15 	stw	r2,184(sp)
802086dc:	103e870e 	bge	r2,zero,802080fc <__reset+0xfa1e80fc>
802086e0:	0005883a 	mov	r2,zero
802086e4:	003e8506 	br	802080fc <__reset+0xfa1e80fc>
802086e8:	012008b4 	movhi	r4,32802
802086ec:	2133f584 	addi	r4,r4,-12330
802086f0:	d9002b15 	stw	r4,172(sp)
802086f4:	003cc506 	br	80207a0c <__reset+0xfa1e7a0c>
802086f8:	d8c03217 	ldw	r3,200(sp)
802086fc:	18c00044 	addi	r3,r3,1
80208700:	d8c02e15 	stw	r3,184(sp)
80208704:	1805883a 	mov	r2,r3
80208708:	183fa10e 	bge	r3,zero,80208590 <__reset+0xfa1e8590>
8020870c:	0005883a 	mov	r2,zero
80208710:	003f9f06 	br	80208590 <__reset+0xfa1e8590>
80208714:	d9003617 	ldw	r4,216(sp)
80208718:	000d883a 	mov	r6,zero
8020871c:	000f883a 	mov	r7,zero
80208720:	a00b883a 	mov	r5,r20
80208724:	d8c03d15 	stw	r3,244(sp)
80208728:	da003e15 	stw	r8,248(sp)
8020872c:	0214dcc0 	call	80214dcc <__eqdf2>
80208730:	d8c03d17 	ldw	r3,244(sp)
80208734:	da003e17 	ldw	r8,248(sp)
80208738:	103f8726 	beq	r2,zero,80208558 <__reset+0xfa1e8558>
8020873c:	00800044 	movi	r2,1
80208740:	10c7c83a 	sub	r3,r2,r3
80208744:	d8c02615 	stw	r3,152(sp)
80208748:	003f8406 	br	8020855c <__reset+0xfa1e855c>
8020874c:	20000e1e 	bne	r4,zero,80208788 <___svfprintf_internal_r+0x20cc>
80208750:	9480004c 	andi	r18,r18,1
80208754:	90000c1e 	bne	r18,zero,80208788 <___svfprintf_internal_r+0x20cc>
80208758:	00800044 	movi	r2,1
8020875c:	d8802e15 	stw	r2,184(sp)
80208760:	003e6606 	br	802080fc <__reset+0xfa1e80fc>
80208764:	00800b44 	movi	r2,45
80208768:	05adc83a 	sub	r22,zero,r22
8020876c:	d8802305 	stb	r2,140(sp)
80208770:	003f3b06 	br	80208460 <__reset+0xfa1e8460>
80208774:	0005883a 	mov	r2,zero
80208778:	003f4e06 	br	802084b4 <__reset+0xfa1e84b4>
8020877c:	90a4703a 	and	r18,r18,r2
80208780:	903f4a26 	beq	r18,zero,802084ac <__reset+0xfa1e84ac>
80208784:	003f4606 	br	802084a0 <__reset+0xfa1e84a0>
80208788:	d8c02917 	ldw	r3,164(sp)
8020878c:	18c00084 	addi	r3,r3,2
80208790:	d8c02e15 	stw	r3,184(sp)
80208794:	1805883a 	mov	r2,r3
80208798:	183e580e 	bge	r3,zero,802080fc <__reset+0xfa1e80fc>
8020879c:	003fd006 	br	802086e0 <__reset+0xfa1e86e0>
802087a0:	00800084 	movi	r2,2
802087a4:	10c5c83a 	sub	r2,r2,r3
802087a8:	003f7506 	br	80208580 <__reset+0xfa1e8580>
802087ac:	d8802d17 	ldw	r2,180(sp)
802087b0:	d9002d17 	ldw	r4,180(sp)
802087b4:	bc400043 	ldbu	r17,1(r23)
802087b8:	10800017 	ldw	r2,0(r2)
802087bc:	582f883a 	mov	r23,r11
802087c0:	d8802915 	stw	r2,164(sp)
802087c4:	20800104 	addi	r2,r4,4
802087c8:	d9002917 	ldw	r4,164(sp)
802087cc:	d8802d15 	stw	r2,180(sp)
802087d0:	203df00e 	bge	r4,zero,80207f94 <__reset+0xfa1e7f94>
802087d4:	8c403fcc 	andi	r17,r17,255
802087d8:	00bfffc4 	movi	r2,-1
802087dc:	8c40201c 	xori	r17,r17,128
802087e0:	d8802915 	stw	r2,164(sp)
802087e4:	8c7fe004 	addi	r17,r17,-128
802087e8:	00380806 	br	8020680c <__reset+0xfa1e680c>
802087ec:	9080004c 	andi	r2,r18,1
802087f0:	0039883a 	mov	fp,zero
802087f4:	10000726 	beq	r2,zero,80208814 <___svfprintf_internal_r+0x2158>
802087f8:	d8c02817 	ldw	r3,160(sp)
802087fc:	dc001dc4 	addi	r16,sp,119
80208800:	00800c04 	movi	r2,48
80208804:	1c07c83a 	sub	r3,r3,r16
80208808:	d8801dc5 	stb	r2,119(sp)
8020880c:	d8c02e15 	stw	r3,184(sp)
80208810:	00395206 	br	80206d5c <__reset+0xfa1e6d5c>
80208814:	d8002e15 	stw	zero,184(sp)
80208818:	dc001e04 	addi	r16,sp,120
8020881c:	00394f06 	br	80206d5c <__reset+0xfa1e6d5c>
80208820:	0005883a 	mov	r2,zero
80208824:	003e3206 	br	802080f0 <__reset+0xfa1e80f0>
80208828:	dd802617 	ldw	r22,152(sp)
8020882c:	003f0606 	br	80208448 <__reset+0xfa1e8448>
80208830:	d9c02785 	stb	r7,158(sp)
80208834:	003a5106 	br	8020717c <__reset+0xfa1e717c>
80208838:	d9c02785 	stb	r7,158(sp)
8020883c:	003a3706 	br	8020711c <__reset+0xfa1e711c>
80208840:	0005883a 	mov	r2,zero
80208844:	003f5e06 	br	802085c0 <__reset+0xfa1e85c0>
80208848:	d9c02785 	stb	r7,158(sp)
8020884c:	00391706 	br	80206cac <__reset+0xfa1e6cac>
80208850:	d9c02785 	stb	r7,158(sp)
80208854:	0038e606 	br	80206bf0 <__reset+0xfa1e6bf0>
80208858:	d8802344 	addi	r2,sp,141
8020885c:	003f0806 	br	80208480 <__reset+0xfa1e8480>
80208860:	d9c02785 	stb	r7,158(sp)
80208864:	0038b706 	br	80206b44 <__reset+0xfa1e6b44>
80208868:	d9c02785 	stb	r7,158(sp)
8020886c:	003adc06 	br	802073e0 <__reset+0xfa1e73e0>
80208870:	d9403917 	ldw	r5,228(sp)
80208874:	00800304 	movi	r2,12
80208878:	28800015 	stw	r2,0(r5)
8020887c:	00bfffc4 	movi	r2,-1
80208880:	00387806 	br	80206a64 <__reset+0xfa1e6a64>
80208884:	d9c02785 	stb	r7,158(sp)
80208888:	003abf06 	br	80207388 <__reset+0xfa1e7388>
8020888c:	d9c02785 	stb	r7,158(sp)
80208890:	003a9b06 	br	80207300 <__reset+0xfa1e7300>

80208894 <___vfprintf_internal_r>:
80208894:	deffb804 	addi	sp,sp,-288
80208898:	dfc04715 	stw	ra,284(sp)
8020889c:	ddc04515 	stw	r23,276(sp)
802088a0:	dd404315 	stw	r21,268(sp)
802088a4:	d9002c15 	stw	r4,176(sp)
802088a8:	282f883a 	mov	r23,r5
802088ac:	302b883a 	mov	r21,r6
802088b0:	d9c02d15 	stw	r7,180(sp)
802088b4:	df004615 	stw	fp,280(sp)
802088b8:	dd804415 	stw	r22,272(sp)
802088bc:	dd004215 	stw	r20,264(sp)
802088c0:	dcc04115 	stw	r19,260(sp)
802088c4:	dc804015 	stw	r18,256(sp)
802088c8:	dc403f15 	stw	r17,252(sp)
802088cc:	dc003e15 	stw	r16,248(sp)
802088d0:	020d6ac0 	call	8020d6ac <_localeconv_r>
802088d4:	10800017 	ldw	r2,0(r2)
802088d8:	1009883a 	mov	r4,r2
802088dc:	d8803415 	stw	r2,208(sp)
802088e0:	02066240 	call	80206624 <strlen>
802088e4:	d8803715 	stw	r2,220(sp)
802088e8:	d8802c17 	ldw	r2,176(sp)
802088ec:	10000226 	beq	r2,zero,802088f8 <___vfprintf_internal_r+0x64>
802088f0:	10800e17 	ldw	r2,56(r2)
802088f4:	1000f926 	beq	r2,zero,80208cdc <___vfprintf_internal_r+0x448>
802088f8:	b880030b 	ldhu	r2,12(r23)
802088fc:	10c8000c 	andi	r3,r2,8192
80208900:	1800061e 	bne	r3,zero,8020891c <___vfprintf_internal_r+0x88>
80208904:	b9001917 	ldw	r4,100(r23)
80208908:	00f7ffc4 	movi	r3,-8193
8020890c:	10880014 	ori	r2,r2,8192
80208910:	20c6703a 	and	r3,r4,r3
80208914:	b880030d 	sth	r2,12(r23)
80208918:	b8c01915 	stw	r3,100(r23)
8020891c:	10c0020c 	andi	r3,r2,8
80208920:	1800c126 	beq	r3,zero,80208c28 <___vfprintf_internal_r+0x394>
80208924:	b8c00417 	ldw	r3,16(r23)
80208928:	1800bf26 	beq	r3,zero,80208c28 <___vfprintf_internal_r+0x394>
8020892c:	1080068c 	andi	r2,r2,26
80208930:	00c00284 	movi	r3,10
80208934:	10c0c426 	beq	r2,r3,80208c48 <___vfprintf_internal_r+0x3b4>
80208938:	d8c00404 	addi	r3,sp,16
8020893c:	052008b4 	movhi	r20,32802
80208940:	d9001e04 	addi	r4,sp,120
80208944:	a533fd84 	addi	r20,r20,-12298
80208948:	d8c01e15 	stw	r3,120(sp)
8020894c:	d8002015 	stw	zero,128(sp)
80208950:	d8001f15 	stw	zero,124(sp)
80208954:	d8003315 	stw	zero,204(sp)
80208958:	d8003615 	stw	zero,216(sp)
8020895c:	d8003815 	stw	zero,224(sp)
80208960:	1811883a 	mov	r8,r3
80208964:	d8003915 	stw	zero,228(sp)
80208968:	d8003a15 	stw	zero,232(sp)
8020896c:	d8002f15 	stw	zero,188(sp)
80208970:	d9002815 	stw	r4,160(sp)
80208974:	a8800007 	ldb	r2,0(r21)
80208978:	10027b26 	beq	r2,zero,80209368 <___vfprintf_internal_r+0xad4>
8020897c:	00c00944 	movi	r3,37
80208980:	a821883a 	mov	r16,r21
80208984:	10c0021e 	bne	r2,r3,80208990 <___vfprintf_internal_r+0xfc>
80208988:	00001406 	br	802089dc <___vfprintf_internal_r+0x148>
8020898c:	10c00326 	beq	r2,r3,8020899c <___vfprintf_internal_r+0x108>
80208990:	84000044 	addi	r16,r16,1
80208994:	80800007 	ldb	r2,0(r16)
80208998:	103ffc1e 	bne	r2,zero,8020898c <__reset+0xfa1e898c>
8020899c:	8563c83a 	sub	r17,r16,r21
802089a0:	88000e26 	beq	r17,zero,802089dc <___vfprintf_internal_r+0x148>
802089a4:	d8c02017 	ldw	r3,128(sp)
802089a8:	d8801f17 	ldw	r2,124(sp)
802089ac:	45400015 	stw	r21,0(r8)
802089b0:	1c47883a 	add	r3,r3,r17
802089b4:	10800044 	addi	r2,r2,1
802089b8:	d8c02015 	stw	r3,128(sp)
802089bc:	44400115 	stw	r17,4(r8)
802089c0:	d8801f15 	stw	r2,124(sp)
802089c4:	00c001c4 	movi	r3,7
802089c8:	1880a716 	blt	r3,r2,80208c68 <___vfprintf_internal_r+0x3d4>
802089cc:	42000204 	addi	r8,r8,8
802089d0:	d9402f17 	ldw	r5,188(sp)
802089d4:	2c4b883a 	add	r5,r5,r17
802089d8:	d9402f15 	stw	r5,188(sp)
802089dc:	80800007 	ldb	r2,0(r16)
802089e0:	1000a826 	beq	r2,zero,80208c84 <___vfprintf_internal_r+0x3f0>
802089e4:	84400047 	ldb	r17,1(r16)
802089e8:	00bfffc4 	movi	r2,-1
802089ec:	85400044 	addi	r21,r16,1
802089f0:	d8002785 	stb	zero,158(sp)
802089f4:	0007883a 	mov	r3,zero
802089f8:	000f883a 	mov	r7,zero
802089fc:	d8802915 	stw	r2,164(sp)
80208a00:	d8003115 	stw	zero,196(sp)
80208a04:	0025883a 	mov	r18,zero
80208a08:	01401604 	movi	r5,88
80208a0c:	01800244 	movi	r6,9
80208a10:	02800a84 	movi	r10,42
80208a14:	02401b04 	movi	r9,108
80208a18:	ad400044 	addi	r21,r21,1
80208a1c:	88bff804 	addi	r2,r17,-32
80208a20:	28830436 	bltu	r5,r2,80209634 <___vfprintf_internal_r+0xda0>
80208a24:	100490ba 	slli	r2,r2,2
80208a28:	01200874 	movhi	r4,32801
80208a2c:	21228f04 	addi	r4,r4,-30148
80208a30:	1105883a 	add	r2,r2,r4
80208a34:	10800017 	ldw	r2,0(r2)
80208a38:	1000683a 	jmp	r2
80208a3c:	80209554 	ori	zero,r16,33365
80208a40:	80209634 	orhi	zero,r16,33368
80208a44:	80209634 	orhi	zero,r16,33368
80208a48:	80209574 	orhi	zero,r16,33365
80208a4c:	80209634 	orhi	zero,r16,33368
80208a50:	80209634 	orhi	zero,r16,33368
80208a54:	80209634 	orhi	zero,r16,33368
80208a58:	80209634 	orhi	zero,r16,33368
80208a5c:	80209634 	orhi	zero,r16,33368
80208a60:	80209634 	orhi	zero,r16,33368
80208a64:	80208ce8 	cmpgeui	zero,r16,33331
80208a68:	80209490 	cmplti	zero,r16,-32174
80208a6c:	80209634 	orhi	zero,r16,33368
80208a70:	80208bb0 	cmpltui	zero,r16,33326
80208a74:	80208d10 	cmplti	zero,r16,-32204
80208a78:	80209634 	orhi	zero,r16,33368
80208a7c:	80208d50 	cmplti	zero,r16,-32203
80208a80:	80208d5c 	xori	zero,r16,33333
80208a84:	80208d5c 	xori	zero,r16,33333
80208a88:	80208d5c 	xori	zero,r16,33333
80208a8c:	80208d5c 	xori	zero,r16,33333
80208a90:	80208d5c 	xori	zero,r16,33333
80208a94:	80208d5c 	xori	zero,r16,33333
80208a98:	80208d5c 	xori	zero,r16,33333
80208a9c:	80208d5c 	xori	zero,r16,33333
80208aa0:	80208d5c 	xori	zero,r16,33333
80208aa4:	80209634 	orhi	zero,r16,33368
80208aa8:	80209634 	orhi	zero,r16,33368
80208aac:	80209634 	orhi	zero,r16,33368
80208ab0:	80209634 	orhi	zero,r16,33368
80208ab4:	80209634 	orhi	zero,r16,33368
80208ab8:	80209634 	orhi	zero,r16,33368
80208abc:	80209634 	orhi	zero,r16,33368
80208ac0:	80209634 	orhi	zero,r16,33368
80208ac4:	80209634 	orhi	zero,r16,33368
80208ac8:	80209634 	orhi	zero,r16,33368
80208acc:	80208d90 	cmplti	zero,r16,-32202
80208ad0:	80208e4c 	andi	zero,r16,33337
80208ad4:	80209634 	orhi	zero,r16,33368
80208ad8:	80208e4c 	andi	zero,r16,33337
80208adc:	80209634 	orhi	zero,r16,33368
80208ae0:	80209634 	orhi	zero,r16,33368
80208ae4:	80209634 	orhi	zero,r16,33368
80208ae8:	80209634 	orhi	zero,r16,33368
80208aec:	80208eec 	andhi	zero,r16,33339
80208af0:	80209634 	orhi	zero,r16,33368
80208af4:	80209634 	orhi	zero,r16,33368
80208af8:	80208ef8 	rdprs	zero,r16,-32197
80208afc:	80209634 	orhi	zero,r16,33368
80208b00:	80209634 	orhi	zero,r16,33368
80208b04:	80209634 	orhi	zero,r16,33368
80208b08:	80209634 	orhi	zero,r16,33368
80208b0c:	80209634 	orhi	zero,r16,33368
80208b10:	80209370 	cmpltui	zero,r16,33357
80208b14:	80209634 	orhi	zero,r16,33368
80208b18:	80209634 	orhi	zero,r16,33368
80208b1c:	802093d0 	cmplti	zero,r16,-32177
80208b20:	80209634 	orhi	zero,r16,33368
80208b24:	80209634 	orhi	zero,r16,33368
80208b28:	80209634 	orhi	zero,r16,33368
80208b2c:	80209634 	orhi	zero,r16,33368
80208b30:	80209634 	orhi	zero,r16,33368
80208b34:	80209634 	orhi	zero,r16,33368
80208b38:	80209634 	orhi	zero,r16,33368
80208b3c:	80209634 	orhi	zero,r16,33368
80208b40:	80209634 	orhi	zero,r16,33368
80208b44:	80209634 	orhi	zero,r16,33368
80208b48:	802095e0 	cmpeqi	zero,r16,-32169
80208b4c:	80209580 	call	88020958 <__reset+0x2000958>
80208b50:	80208e4c 	andi	zero,r16,33337
80208b54:	80208e4c 	andi	zero,r16,33337
80208b58:	80208e4c 	andi	zero,r16,33337
80208b5c:	80209590 	cmplti	zero,r16,-32170
80208b60:	80209580 	call	88020958 <__reset+0x2000958>
80208b64:	80209634 	orhi	zero,r16,33368
80208b68:	80209634 	orhi	zero,r16,33368
80208b6c:	8020959c 	xori	zero,r16,33366
80208b70:	80209634 	orhi	zero,r16,33368
80208b74:	802095ac 	andhi	zero,r16,33366
80208b78:	80209480 	call	88020948 <__reset+0x2000948>
80208b7c:	80208bbc 	xorhi	zero,r16,33326
80208b80:	802094a0 	cmpeqi	zero,r16,-32174
80208b84:	80209634 	orhi	zero,r16,33368
80208b88:	802094ac 	andhi	zero,r16,33362
80208b8c:	80209634 	orhi	zero,r16,33368
80208b90:	80209508 	cmpgei	zero,r16,-32172
80208b94:	80209634 	orhi	zero,r16,33368
80208b98:	80209634 	orhi	zero,r16,33368
80208b9c:	80209518 	cmpnei	zero,r16,-32172
80208ba0:	d9003117 	ldw	r4,196(sp)
80208ba4:	d8802d15 	stw	r2,180(sp)
80208ba8:	0109c83a 	sub	r4,zero,r4
80208bac:	d9003115 	stw	r4,196(sp)
80208bb0:	94800114 	ori	r18,r18,4
80208bb4:	ac400007 	ldb	r17,0(r21)
80208bb8:	003f9706 	br	80208a18 <__reset+0xfa1e8a18>
80208bbc:	00800c04 	movi	r2,48
80208bc0:	d9002d17 	ldw	r4,180(sp)
80208bc4:	d9402917 	ldw	r5,164(sp)
80208bc8:	d8802705 	stb	r2,156(sp)
80208bcc:	00801e04 	movi	r2,120
80208bd0:	d8802745 	stb	r2,157(sp)
80208bd4:	d8002785 	stb	zero,158(sp)
80208bd8:	20c00104 	addi	r3,r4,4
80208bdc:	24c00017 	ldw	r19,0(r4)
80208be0:	002d883a 	mov	r22,zero
80208be4:	90800094 	ori	r2,r18,2
80208be8:	28029a16 	blt	r5,zero,80209654 <___vfprintf_internal_r+0xdc0>
80208bec:	00bfdfc4 	movi	r2,-129
80208bf0:	90a4703a 	and	r18,r18,r2
80208bf4:	d8c02d15 	stw	r3,180(sp)
80208bf8:	94800094 	ori	r18,r18,2
80208bfc:	9802871e 	bne	r19,zero,8020961c <___vfprintf_internal_r+0xd88>
80208c00:	00a008b4 	movhi	r2,32802
80208c04:	10b3ee04 	addi	r2,r2,-12360
80208c08:	d8803915 	stw	r2,228(sp)
80208c0c:	04401e04 	movi	r17,120
80208c10:	d8802917 	ldw	r2,164(sp)
80208c14:	0039883a 	mov	fp,zero
80208c18:	1001e926 	beq	r2,zero,802093c0 <___vfprintf_internal_r+0xb2c>
80208c1c:	0027883a 	mov	r19,zero
80208c20:	002d883a 	mov	r22,zero
80208c24:	00020506 	br	8020943c <___vfprintf_internal_r+0xba8>
80208c28:	d9002c17 	ldw	r4,176(sp)
80208c2c:	b80b883a 	mov	r5,r23
80208c30:	020ab640 	call	8020ab64 <__swsetup_r>
80208c34:	1005ac1e 	bne	r2,zero,8020a2e8 <___vfprintf_internal_r+0x1a54>
80208c38:	b880030b 	ldhu	r2,12(r23)
80208c3c:	00c00284 	movi	r3,10
80208c40:	1080068c 	andi	r2,r2,26
80208c44:	10ff3c1e 	bne	r2,r3,80208938 <__reset+0xfa1e8938>
80208c48:	b880038f 	ldh	r2,14(r23)
80208c4c:	103f3a16 	blt	r2,zero,80208938 <__reset+0xfa1e8938>
80208c50:	d9c02d17 	ldw	r7,180(sp)
80208c54:	d9002c17 	ldw	r4,176(sp)
80208c58:	a80d883a 	mov	r6,r21
80208c5c:	b80b883a 	mov	r5,r23
80208c60:	020aaa80 	call	8020aaa8 <__sbprintf>
80208c64:	00001106 	br	80208cac <___vfprintf_internal_r+0x418>
80208c68:	d9002c17 	ldw	r4,176(sp)
80208c6c:	d9801e04 	addi	r6,sp,120
80208c70:	b80b883a 	mov	r5,r23
80208c74:	02111540 	call	80211154 <__sprint_r>
80208c78:	1000081e 	bne	r2,zero,80208c9c <___vfprintf_internal_r+0x408>
80208c7c:	da000404 	addi	r8,sp,16
80208c80:	003f5306 	br	802089d0 <__reset+0xfa1e89d0>
80208c84:	d8802017 	ldw	r2,128(sp)
80208c88:	10000426 	beq	r2,zero,80208c9c <___vfprintf_internal_r+0x408>
80208c8c:	d9002c17 	ldw	r4,176(sp)
80208c90:	d9801e04 	addi	r6,sp,120
80208c94:	b80b883a 	mov	r5,r23
80208c98:	02111540 	call	80211154 <__sprint_r>
80208c9c:	b880030b 	ldhu	r2,12(r23)
80208ca0:	1080100c 	andi	r2,r2,64
80208ca4:	1005901e 	bne	r2,zero,8020a2e8 <___vfprintf_internal_r+0x1a54>
80208ca8:	d8802f17 	ldw	r2,188(sp)
80208cac:	dfc04717 	ldw	ra,284(sp)
80208cb0:	df004617 	ldw	fp,280(sp)
80208cb4:	ddc04517 	ldw	r23,276(sp)
80208cb8:	dd804417 	ldw	r22,272(sp)
80208cbc:	dd404317 	ldw	r21,268(sp)
80208cc0:	dd004217 	ldw	r20,264(sp)
80208cc4:	dcc04117 	ldw	r19,260(sp)
80208cc8:	dc804017 	ldw	r18,256(sp)
80208ccc:	dc403f17 	ldw	r17,252(sp)
80208cd0:	dc003e17 	ldw	r16,248(sp)
80208cd4:	dec04804 	addi	sp,sp,288
80208cd8:	f800283a 	ret
80208cdc:	d9002c17 	ldw	r4,176(sp)
80208ce0:	020cb380 	call	8020cb38 <__sinit>
80208ce4:	003f0406 	br	802088f8 <__reset+0xfa1e88f8>
80208ce8:	d8802d17 	ldw	r2,180(sp)
80208cec:	d9002d17 	ldw	r4,180(sp)
80208cf0:	10800017 	ldw	r2,0(r2)
80208cf4:	d8803115 	stw	r2,196(sp)
80208cf8:	20800104 	addi	r2,r4,4
80208cfc:	d9003117 	ldw	r4,196(sp)
80208d00:	203fa716 	blt	r4,zero,80208ba0 <__reset+0xfa1e8ba0>
80208d04:	d8802d15 	stw	r2,180(sp)
80208d08:	ac400007 	ldb	r17,0(r21)
80208d0c:	003f4206 	br	80208a18 <__reset+0xfa1e8a18>
80208d10:	ac400007 	ldb	r17,0(r21)
80208d14:	aac00044 	addi	r11,r21,1
80208d18:	8a872826 	beq	r17,r10,8020a9bc <___vfprintf_internal_r+0x2128>
80208d1c:	88bff404 	addi	r2,r17,-48
80208d20:	0009883a 	mov	r4,zero
80208d24:	30867d36 	bltu	r6,r2,8020a71c <___vfprintf_internal_r+0x1e88>
80208d28:	5c400007 	ldb	r17,0(r11)
80208d2c:	210002a4 	muli	r4,r4,10
80208d30:	5d400044 	addi	r21,r11,1
80208d34:	a817883a 	mov	r11,r21
80208d38:	2089883a 	add	r4,r4,r2
80208d3c:	88bff404 	addi	r2,r17,-48
80208d40:	30bff92e 	bgeu	r6,r2,80208d28 <__reset+0xfa1e8d28>
80208d44:	2005c916 	blt	r4,zero,8020a46c <___vfprintf_internal_r+0x1bd8>
80208d48:	d9002915 	stw	r4,164(sp)
80208d4c:	003f3306 	br	80208a1c <__reset+0xfa1e8a1c>
80208d50:	94802014 	ori	r18,r18,128
80208d54:	ac400007 	ldb	r17,0(r21)
80208d58:	003f2f06 	br	80208a18 <__reset+0xfa1e8a18>
80208d5c:	a809883a 	mov	r4,r21
80208d60:	d8003115 	stw	zero,196(sp)
80208d64:	88bff404 	addi	r2,r17,-48
80208d68:	0017883a 	mov	r11,zero
80208d6c:	24400007 	ldb	r17,0(r4)
80208d70:	5ac002a4 	muli	r11,r11,10
80208d74:	ad400044 	addi	r21,r21,1
80208d78:	a809883a 	mov	r4,r21
80208d7c:	12d7883a 	add	r11,r2,r11
80208d80:	88bff404 	addi	r2,r17,-48
80208d84:	30bff92e 	bgeu	r6,r2,80208d6c <__reset+0xfa1e8d6c>
80208d88:	dac03115 	stw	r11,196(sp)
80208d8c:	003f2306 	br	80208a1c <__reset+0xfa1e8a1c>
80208d90:	18c03fcc 	andi	r3,r3,255
80208d94:	18072b1e 	bne	r3,zero,8020aa44 <___vfprintf_internal_r+0x21b0>
80208d98:	94800414 	ori	r18,r18,16
80208d9c:	9080080c 	andi	r2,r18,32
80208da0:	10037b26 	beq	r2,zero,80209b90 <___vfprintf_internal_r+0x12fc>
80208da4:	d9402d17 	ldw	r5,180(sp)
80208da8:	28800117 	ldw	r2,4(r5)
80208dac:	2cc00017 	ldw	r19,0(r5)
80208db0:	29400204 	addi	r5,r5,8
80208db4:	d9402d15 	stw	r5,180(sp)
80208db8:	102d883a 	mov	r22,r2
80208dbc:	10044b16 	blt	r2,zero,80209eec <___vfprintf_internal_r+0x1658>
80208dc0:	d9402917 	ldw	r5,164(sp)
80208dc4:	df002783 	ldbu	fp,158(sp)
80208dc8:	2803bc16 	blt	r5,zero,80209cbc <___vfprintf_internal_r+0x1428>
80208dcc:	00ffdfc4 	movi	r3,-129
80208dd0:	9d84b03a 	or	r2,r19,r22
80208dd4:	90e4703a 	and	r18,r18,r3
80208dd8:	10017726 	beq	r2,zero,802093b8 <___vfprintf_internal_r+0xb24>
80208ddc:	b0038326 	beq	r22,zero,80209bec <___vfprintf_internal_r+0x1358>
80208de0:	dc402a15 	stw	r17,168(sp)
80208de4:	dc001e04 	addi	r16,sp,120
80208de8:	b023883a 	mov	r17,r22
80208dec:	402d883a 	mov	r22,r8
80208df0:	9809883a 	mov	r4,r19
80208df4:	880b883a 	mov	r5,r17
80208df8:	01800284 	movi	r6,10
80208dfc:	000f883a 	mov	r7,zero
80208e00:	021354c0 	call	8021354c <__umoddi3>
80208e04:	10800c04 	addi	r2,r2,48
80208e08:	843fffc4 	addi	r16,r16,-1
80208e0c:	9809883a 	mov	r4,r19
80208e10:	880b883a 	mov	r5,r17
80208e14:	80800005 	stb	r2,0(r16)
80208e18:	01800284 	movi	r6,10
80208e1c:	000f883a 	mov	r7,zero
80208e20:	0212fd40 	call	80212fd4 <__udivdi3>
80208e24:	1027883a 	mov	r19,r2
80208e28:	10c4b03a 	or	r2,r2,r3
80208e2c:	1823883a 	mov	r17,r3
80208e30:	103fef1e 	bne	r2,zero,80208df0 <__reset+0xfa1e8df0>
80208e34:	d8c02817 	ldw	r3,160(sp)
80208e38:	dc402a17 	ldw	r17,168(sp)
80208e3c:	b011883a 	mov	r8,r22
80208e40:	1c07c83a 	sub	r3,r3,r16
80208e44:	d8c02e15 	stw	r3,184(sp)
80208e48:	00005906 	br	80208fb0 <___vfprintf_internal_r+0x71c>
80208e4c:	18c03fcc 	andi	r3,r3,255
80208e50:	1806fa1e 	bne	r3,zero,8020aa3c <___vfprintf_internal_r+0x21a8>
80208e54:	9080020c 	andi	r2,r18,8
80208e58:	10048a26 	beq	r2,zero,8020a084 <___vfprintf_internal_r+0x17f0>
80208e5c:	d8c02d17 	ldw	r3,180(sp)
80208e60:	d9002d17 	ldw	r4,180(sp)
80208e64:	d9402d17 	ldw	r5,180(sp)
80208e68:	18c00017 	ldw	r3,0(r3)
80208e6c:	21000117 	ldw	r4,4(r4)
80208e70:	29400204 	addi	r5,r5,8
80208e74:	d8c03615 	stw	r3,216(sp)
80208e78:	d9003815 	stw	r4,224(sp)
80208e7c:	d9402d15 	stw	r5,180(sp)
80208e80:	d9003617 	ldw	r4,216(sp)
80208e84:	d9403817 	ldw	r5,224(sp)
80208e88:	da003d15 	stw	r8,244(sp)
80208e8c:	04000044 	movi	r16,1
80208e90:	020f96c0 	call	8020f96c <__fpclassifyd>
80208e94:	da003d17 	ldw	r8,244(sp)
80208e98:	14041f1e 	bne	r2,r16,80209f18 <___vfprintf_internal_r+0x1684>
80208e9c:	d9003617 	ldw	r4,216(sp)
80208ea0:	d9403817 	ldw	r5,224(sp)
80208ea4:	000d883a 	mov	r6,zero
80208ea8:	000f883a 	mov	r7,zero
80208eac:	0214f300 	call	80214f30 <__ledf2>
80208eb0:	da003d17 	ldw	r8,244(sp)
80208eb4:	1005be16 	blt	r2,zero,8020a5b0 <___vfprintf_internal_r+0x1d1c>
80208eb8:	df002783 	ldbu	fp,158(sp)
80208ebc:	008011c4 	movi	r2,71
80208ec0:	1445330e 	bge	r2,r17,8020a390 <___vfprintf_internal_r+0x1afc>
80208ec4:	042008b4 	movhi	r16,32802
80208ec8:	8433e604 	addi	r16,r16,-12392
80208ecc:	00c000c4 	movi	r3,3
80208ed0:	00bfdfc4 	movi	r2,-129
80208ed4:	d8c02a15 	stw	r3,168(sp)
80208ed8:	90a4703a 	and	r18,r18,r2
80208edc:	d8c02e15 	stw	r3,184(sp)
80208ee0:	d8002915 	stw	zero,164(sp)
80208ee4:	d8003215 	stw	zero,200(sp)
80208ee8:	00003706 	br	80208fc8 <___vfprintf_internal_r+0x734>
80208eec:	94800214 	ori	r18,r18,8
80208ef0:	ac400007 	ldb	r17,0(r21)
80208ef4:	003ec806 	br	80208a18 <__reset+0xfa1e8a18>
80208ef8:	18c03fcc 	andi	r3,r3,255
80208efc:	1806db1e 	bne	r3,zero,8020aa6c <___vfprintf_internal_r+0x21d8>
80208f00:	94800414 	ori	r18,r18,16
80208f04:	9080080c 	andi	r2,r18,32
80208f08:	1002d826 	beq	r2,zero,80209a6c <___vfprintf_internal_r+0x11d8>
80208f0c:	d9402d17 	ldw	r5,180(sp)
80208f10:	d8c02917 	ldw	r3,164(sp)
80208f14:	d8002785 	stb	zero,158(sp)
80208f18:	28800204 	addi	r2,r5,8
80208f1c:	2cc00017 	ldw	r19,0(r5)
80208f20:	2d800117 	ldw	r22,4(r5)
80208f24:	18048f16 	blt	r3,zero,8020a164 <___vfprintf_internal_r+0x18d0>
80208f28:	013fdfc4 	movi	r4,-129
80208f2c:	9d86b03a 	or	r3,r19,r22
80208f30:	d8802d15 	stw	r2,180(sp)
80208f34:	9124703a 	and	r18,r18,r4
80208f38:	1802d91e 	bne	r3,zero,80209aa0 <___vfprintf_internal_r+0x120c>
80208f3c:	d8c02917 	ldw	r3,164(sp)
80208f40:	0039883a 	mov	fp,zero
80208f44:	1805c326 	beq	r3,zero,8020a654 <___vfprintf_internal_r+0x1dc0>
80208f48:	0027883a 	mov	r19,zero
80208f4c:	002d883a 	mov	r22,zero
80208f50:	dc001e04 	addi	r16,sp,120
80208f54:	9806d0fa 	srli	r3,r19,3
80208f58:	b008977a 	slli	r4,r22,29
80208f5c:	b02cd0fa 	srli	r22,r22,3
80208f60:	9cc001cc 	andi	r19,r19,7
80208f64:	98800c04 	addi	r2,r19,48
80208f68:	843fffc4 	addi	r16,r16,-1
80208f6c:	20e6b03a 	or	r19,r4,r3
80208f70:	80800005 	stb	r2,0(r16)
80208f74:	9d86b03a 	or	r3,r19,r22
80208f78:	183ff61e 	bne	r3,zero,80208f54 <__reset+0xfa1e8f54>
80208f7c:	90c0004c 	andi	r3,r18,1
80208f80:	18013b26 	beq	r3,zero,80209470 <___vfprintf_internal_r+0xbdc>
80208f84:	10803fcc 	andi	r2,r2,255
80208f88:	1080201c 	xori	r2,r2,128
80208f8c:	10bfe004 	addi	r2,r2,-128
80208f90:	00c00c04 	movi	r3,48
80208f94:	10c13626 	beq	r2,r3,80209470 <___vfprintf_internal_r+0xbdc>
80208f98:	80ffffc5 	stb	r3,-1(r16)
80208f9c:	d8c02817 	ldw	r3,160(sp)
80208fa0:	80bfffc4 	addi	r2,r16,-1
80208fa4:	1021883a 	mov	r16,r2
80208fa8:	1887c83a 	sub	r3,r3,r2
80208fac:	d8c02e15 	stw	r3,184(sp)
80208fb0:	d8802e17 	ldw	r2,184(sp)
80208fb4:	d9002917 	ldw	r4,164(sp)
80208fb8:	1100010e 	bge	r2,r4,80208fc0 <___vfprintf_internal_r+0x72c>
80208fbc:	2005883a 	mov	r2,r4
80208fc0:	d8802a15 	stw	r2,168(sp)
80208fc4:	d8003215 	stw	zero,200(sp)
80208fc8:	e7003fcc 	andi	fp,fp,255
80208fcc:	e700201c 	xori	fp,fp,128
80208fd0:	e73fe004 	addi	fp,fp,-128
80208fd4:	e0000326 	beq	fp,zero,80208fe4 <___vfprintf_internal_r+0x750>
80208fd8:	d8c02a17 	ldw	r3,168(sp)
80208fdc:	18c00044 	addi	r3,r3,1
80208fe0:	d8c02a15 	stw	r3,168(sp)
80208fe4:	90c0008c 	andi	r3,r18,2
80208fe8:	d8c02b15 	stw	r3,172(sp)
80208fec:	18000326 	beq	r3,zero,80208ffc <___vfprintf_internal_r+0x768>
80208ff0:	d8c02a17 	ldw	r3,168(sp)
80208ff4:	18c00084 	addi	r3,r3,2
80208ff8:	d8c02a15 	stw	r3,168(sp)
80208ffc:	90c0210c 	andi	r3,r18,132
80209000:	d8c03015 	stw	r3,192(sp)
80209004:	1801a31e 	bne	r3,zero,80209694 <___vfprintf_internal_r+0xe00>
80209008:	d9003117 	ldw	r4,196(sp)
8020900c:	d8c02a17 	ldw	r3,168(sp)
80209010:	20e7c83a 	sub	r19,r4,r3
80209014:	04c19f0e 	bge	zero,r19,80209694 <___vfprintf_internal_r+0xe00>
80209018:	02400404 	movi	r9,16
8020901c:	d8c02017 	ldw	r3,128(sp)
80209020:	d8801f17 	ldw	r2,124(sp)
80209024:	4cc50d0e 	bge	r9,r19,8020a45c <___vfprintf_internal_r+0x1bc8>
80209028:	016008b4 	movhi	r5,32802
8020902c:	29740184 	addi	r5,r5,-12282
80209030:	dc403b15 	stw	r17,236(sp)
80209034:	d9403515 	stw	r5,212(sp)
80209038:	9823883a 	mov	r17,r19
8020903c:	482d883a 	mov	r22,r9
80209040:	9027883a 	mov	r19,r18
80209044:	070001c4 	movi	fp,7
80209048:	8025883a 	mov	r18,r16
8020904c:	dc002c17 	ldw	r16,176(sp)
80209050:	00000306 	br	80209060 <___vfprintf_internal_r+0x7cc>
80209054:	8c7ffc04 	addi	r17,r17,-16
80209058:	42000204 	addi	r8,r8,8
8020905c:	b440130e 	bge	r22,r17,802090ac <___vfprintf_internal_r+0x818>
80209060:	012008b4 	movhi	r4,32802
80209064:	18c00404 	addi	r3,r3,16
80209068:	10800044 	addi	r2,r2,1
8020906c:	21340184 	addi	r4,r4,-12282
80209070:	41000015 	stw	r4,0(r8)
80209074:	45800115 	stw	r22,4(r8)
80209078:	d8c02015 	stw	r3,128(sp)
8020907c:	d8801f15 	stw	r2,124(sp)
80209080:	e0bff40e 	bge	fp,r2,80209054 <__reset+0xfa1e9054>
80209084:	d9801e04 	addi	r6,sp,120
80209088:	b80b883a 	mov	r5,r23
8020908c:	8009883a 	mov	r4,r16
80209090:	02111540 	call	80211154 <__sprint_r>
80209094:	103f011e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209098:	8c7ffc04 	addi	r17,r17,-16
8020909c:	d8c02017 	ldw	r3,128(sp)
802090a0:	d8801f17 	ldw	r2,124(sp)
802090a4:	da000404 	addi	r8,sp,16
802090a8:	b47fed16 	blt	r22,r17,80209060 <__reset+0xfa1e9060>
802090ac:	9021883a 	mov	r16,r18
802090b0:	9825883a 	mov	r18,r19
802090b4:	8827883a 	mov	r19,r17
802090b8:	dc403b17 	ldw	r17,236(sp)
802090bc:	d9403517 	ldw	r5,212(sp)
802090c0:	98c7883a 	add	r3,r19,r3
802090c4:	10800044 	addi	r2,r2,1
802090c8:	41400015 	stw	r5,0(r8)
802090cc:	44c00115 	stw	r19,4(r8)
802090d0:	d8c02015 	stw	r3,128(sp)
802090d4:	d8801f15 	stw	r2,124(sp)
802090d8:	010001c4 	movi	r4,7
802090dc:	2082a316 	blt	r4,r2,80209b6c <___vfprintf_internal_r+0x12d8>
802090e0:	df002787 	ldb	fp,158(sp)
802090e4:	42000204 	addi	r8,r8,8
802090e8:	e0000c26 	beq	fp,zero,8020911c <___vfprintf_internal_r+0x888>
802090ec:	d8801f17 	ldw	r2,124(sp)
802090f0:	d9002784 	addi	r4,sp,158
802090f4:	18c00044 	addi	r3,r3,1
802090f8:	10800044 	addi	r2,r2,1
802090fc:	41000015 	stw	r4,0(r8)
80209100:	01000044 	movi	r4,1
80209104:	41000115 	stw	r4,4(r8)
80209108:	d8c02015 	stw	r3,128(sp)
8020910c:	d8801f15 	stw	r2,124(sp)
80209110:	010001c4 	movi	r4,7
80209114:	20823c16 	blt	r4,r2,80209a08 <___vfprintf_internal_r+0x1174>
80209118:	42000204 	addi	r8,r8,8
8020911c:	d8802b17 	ldw	r2,172(sp)
80209120:	10000c26 	beq	r2,zero,80209154 <___vfprintf_internal_r+0x8c0>
80209124:	d8801f17 	ldw	r2,124(sp)
80209128:	d9002704 	addi	r4,sp,156
8020912c:	18c00084 	addi	r3,r3,2
80209130:	10800044 	addi	r2,r2,1
80209134:	41000015 	stw	r4,0(r8)
80209138:	01000084 	movi	r4,2
8020913c:	41000115 	stw	r4,4(r8)
80209140:	d8c02015 	stw	r3,128(sp)
80209144:	d8801f15 	stw	r2,124(sp)
80209148:	010001c4 	movi	r4,7
8020914c:	20823616 	blt	r4,r2,80209a28 <___vfprintf_internal_r+0x1194>
80209150:	42000204 	addi	r8,r8,8
80209154:	d9003017 	ldw	r4,192(sp)
80209158:	00802004 	movi	r2,128
8020915c:	20819926 	beq	r4,r2,802097c4 <___vfprintf_internal_r+0xf30>
80209160:	d9402917 	ldw	r5,164(sp)
80209164:	d8802e17 	ldw	r2,184(sp)
80209168:	28adc83a 	sub	r22,r5,r2
8020916c:	0580310e 	bge	zero,r22,80209234 <___vfprintf_internal_r+0x9a0>
80209170:	07000404 	movi	fp,16
80209174:	d8801f17 	ldw	r2,124(sp)
80209178:	e584140e 	bge	fp,r22,8020a1cc <___vfprintf_internal_r+0x1938>
8020917c:	016008b4 	movhi	r5,32802
80209180:	2973fd84 	addi	r5,r5,-12298
80209184:	dc402915 	stw	r17,164(sp)
80209188:	d9402b15 	stw	r5,172(sp)
8020918c:	b023883a 	mov	r17,r22
80209190:	04c001c4 	movi	r19,7
80209194:	a82d883a 	mov	r22,r21
80209198:	902b883a 	mov	r21,r18
8020919c:	8025883a 	mov	r18,r16
802091a0:	dc002c17 	ldw	r16,176(sp)
802091a4:	00000306 	br	802091b4 <___vfprintf_internal_r+0x920>
802091a8:	8c7ffc04 	addi	r17,r17,-16
802091ac:	42000204 	addi	r8,r8,8
802091b0:	e440110e 	bge	fp,r17,802091f8 <___vfprintf_internal_r+0x964>
802091b4:	18c00404 	addi	r3,r3,16
802091b8:	10800044 	addi	r2,r2,1
802091bc:	45000015 	stw	r20,0(r8)
802091c0:	47000115 	stw	fp,4(r8)
802091c4:	d8c02015 	stw	r3,128(sp)
802091c8:	d8801f15 	stw	r2,124(sp)
802091cc:	98bff60e 	bge	r19,r2,802091a8 <__reset+0xfa1e91a8>
802091d0:	d9801e04 	addi	r6,sp,120
802091d4:	b80b883a 	mov	r5,r23
802091d8:	8009883a 	mov	r4,r16
802091dc:	02111540 	call	80211154 <__sprint_r>
802091e0:	103eae1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
802091e4:	8c7ffc04 	addi	r17,r17,-16
802091e8:	d8c02017 	ldw	r3,128(sp)
802091ec:	d8801f17 	ldw	r2,124(sp)
802091f0:	da000404 	addi	r8,sp,16
802091f4:	e47fef16 	blt	fp,r17,802091b4 <__reset+0xfa1e91b4>
802091f8:	9021883a 	mov	r16,r18
802091fc:	a825883a 	mov	r18,r21
80209200:	b02b883a 	mov	r21,r22
80209204:	882d883a 	mov	r22,r17
80209208:	dc402917 	ldw	r17,164(sp)
8020920c:	d9002b17 	ldw	r4,172(sp)
80209210:	1d87883a 	add	r3,r3,r22
80209214:	10800044 	addi	r2,r2,1
80209218:	41000015 	stw	r4,0(r8)
8020921c:	45800115 	stw	r22,4(r8)
80209220:	d8c02015 	stw	r3,128(sp)
80209224:	d8801f15 	stw	r2,124(sp)
80209228:	010001c4 	movi	r4,7
8020922c:	2081ee16 	blt	r4,r2,802099e8 <___vfprintf_internal_r+0x1154>
80209230:	42000204 	addi	r8,r8,8
80209234:	9080400c 	andi	r2,r18,256
80209238:	1001181e 	bne	r2,zero,8020969c <___vfprintf_internal_r+0xe08>
8020923c:	d9402e17 	ldw	r5,184(sp)
80209240:	d8801f17 	ldw	r2,124(sp)
80209244:	44000015 	stw	r16,0(r8)
80209248:	1947883a 	add	r3,r3,r5
8020924c:	10800044 	addi	r2,r2,1
80209250:	41400115 	stw	r5,4(r8)
80209254:	d8c02015 	stw	r3,128(sp)
80209258:	d8801f15 	stw	r2,124(sp)
8020925c:	010001c4 	movi	r4,7
80209260:	2081d316 	blt	r4,r2,802099b0 <___vfprintf_internal_r+0x111c>
80209264:	42000204 	addi	r8,r8,8
80209268:	9480010c 	andi	r18,r18,4
8020926c:	90003226 	beq	r18,zero,80209338 <___vfprintf_internal_r+0xaa4>
80209270:	d9403117 	ldw	r5,196(sp)
80209274:	d8802a17 	ldw	r2,168(sp)
80209278:	28a1c83a 	sub	r16,r5,r2
8020927c:	04002e0e 	bge	zero,r16,80209338 <___vfprintf_internal_r+0xaa4>
80209280:	04400404 	movi	r17,16
80209284:	d8801f17 	ldw	r2,124(sp)
80209288:	8c04a20e 	bge	r17,r16,8020a514 <___vfprintf_internal_r+0x1c80>
8020928c:	016008b4 	movhi	r5,32802
80209290:	29740184 	addi	r5,r5,-12282
80209294:	d9403515 	stw	r5,212(sp)
80209298:	048001c4 	movi	r18,7
8020929c:	dcc02c17 	ldw	r19,176(sp)
802092a0:	00000306 	br	802092b0 <___vfprintf_internal_r+0xa1c>
802092a4:	843ffc04 	addi	r16,r16,-16
802092a8:	42000204 	addi	r8,r8,8
802092ac:	8c00130e 	bge	r17,r16,802092fc <___vfprintf_internal_r+0xa68>
802092b0:	012008b4 	movhi	r4,32802
802092b4:	18c00404 	addi	r3,r3,16
802092b8:	10800044 	addi	r2,r2,1
802092bc:	21340184 	addi	r4,r4,-12282
802092c0:	41000015 	stw	r4,0(r8)
802092c4:	44400115 	stw	r17,4(r8)
802092c8:	d8c02015 	stw	r3,128(sp)
802092cc:	d8801f15 	stw	r2,124(sp)
802092d0:	90bff40e 	bge	r18,r2,802092a4 <__reset+0xfa1e92a4>
802092d4:	d9801e04 	addi	r6,sp,120
802092d8:	b80b883a 	mov	r5,r23
802092dc:	9809883a 	mov	r4,r19
802092e0:	02111540 	call	80211154 <__sprint_r>
802092e4:	103e6d1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
802092e8:	843ffc04 	addi	r16,r16,-16
802092ec:	d8c02017 	ldw	r3,128(sp)
802092f0:	d8801f17 	ldw	r2,124(sp)
802092f4:	da000404 	addi	r8,sp,16
802092f8:	8c3fed16 	blt	r17,r16,802092b0 <__reset+0xfa1e92b0>
802092fc:	d9403517 	ldw	r5,212(sp)
80209300:	1c07883a 	add	r3,r3,r16
80209304:	10800044 	addi	r2,r2,1
80209308:	41400015 	stw	r5,0(r8)
8020930c:	44000115 	stw	r16,4(r8)
80209310:	d8c02015 	stw	r3,128(sp)
80209314:	d8801f15 	stw	r2,124(sp)
80209318:	010001c4 	movi	r4,7
8020931c:	2080060e 	bge	r4,r2,80209338 <___vfprintf_internal_r+0xaa4>
80209320:	d9002c17 	ldw	r4,176(sp)
80209324:	d9801e04 	addi	r6,sp,120
80209328:	b80b883a 	mov	r5,r23
8020932c:	02111540 	call	80211154 <__sprint_r>
80209330:	103e5a1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209334:	d8c02017 	ldw	r3,128(sp)
80209338:	d8803117 	ldw	r2,196(sp)
8020933c:	d9002a17 	ldw	r4,168(sp)
80209340:	1100010e 	bge	r2,r4,80209348 <___vfprintf_internal_r+0xab4>
80209344:	2005883a 	mov	r2,r4
80209348:	d9402f17 	ldw	r5,188(sp)
8020934c:	288b883a 	add	r5,r5,r2
80209350:	d9402f15 	stw	r5,188(sp)
80209354:	18019e1e 	bne	r3,zero,802099d0 <___vfprintf_internal_r+0x113c>
80209358:	a8800007 	ldb	r2,0(r21)
8020935c:	d8001f15 	stw	zero,124(sp)
80209360:	da000404 	addi	r8,sp,16
80209364:	103d851e 	bne	r2,zero,8020897c <__reset+0xfa1e897c>
80209368:	a821883a 	mov	r16,r21
8020936c:	003d9b06 	br	802089dc <__reset+0xfa1e89dc>
80209370:	18c03fcc 	andi	r3,r3,255
80209374:	1805c11e 	bne	r3,zero,8020aa7c <___vfprintf_internal_r+0x21e8>
80209378:	94800414 	ori	r18,r18,16
8020937c:	9080080c 	andi	r2,r18,32
80209380:	10020c26 	beq	r2,zero,80209bb4 <___vfprintf_internal_r+0x1320>
80209384:	d8802d17 	ldw	r2,180(sp)
80209388:	d9002917 	ldw	r4,164(sp)
8020938c:	d8002785 	stb	zero,158(sp)
80209390:	10c00204 	addi	r3,r2,8
80209394:	14c00017 	ldw	r19,0(r2)
80209398:	15800117 	ldw	r22,4(r2)
8020939c:	20040f16 	blt	r4,zero,8020a3dc <___vfprintf_internal_r+0x1b48>
802093a0:	013fdfc4 	movi	r4,-129
802093a4:	9d84b03a 	or	r2,r19,r22
802093a8:	d8c02d15 	stw	r3,180(sp)
802093ac:	9124703a 	and	r18,r18,r4
802093b0:	0039883a 	mov	fp,zero
802093b4:	103e891e 	bne	r2,zero,80208ddc <__reset+0xfa1e8ddc>
802093b8:	d9002917 	ldw	r4,164(sp)
802093bc:	2002c11e 	bne	r4,zero,80209ec4 <___vfprintf_internal_r+0x1630>
802093c0:	d8002915 	stw	zero,164(sp)
802093c4:	d8002e15 	stw	zero,184(sp)
802093c8:	dc001e04 	addi	r16,sp,120
802093cc:	003ef806 	br	80208fb0 <__reset+0xfa1e8fb0>
802093d0:	18c03fcc 	andi	r3,r3,255
802093d4:	18059d1e 	bne	r3,zero,8020aa4c <___vfprintf_internal_r+0x21b8>
802093d8:	016008b4 	movhi	r5,32802
802093dc:	2973e904 	addi	r5,r5,-12380
802093e0:	d9403915 	stw	r5,228(sp)
802093e4:	9080080c 	andi	r2,r18,32
802093e8:	10005226 	beq	r2,zero,80209534 <___vfprintf_internal_r+0xca0>
802093ec:	d8802d17 	ldw	r2,180(sp)
802093f0:	14c00017 	ldw	r19,0(r2)
802093f4:	15800117 	ldw	r22,4(r2)
802093f8:	10800204 	addi	r2,r2,8
802093fc:	d8802d15 	stw	r2,180(sp)
80209400:	9080004c 	andi	r2,r18,1
80209404:	10019026 	beq	r2,zero,80209a48 <___vfprintf_internal_r+0x11b4>
80209408:	9d84b03a 	or	r2,r19,r22
8020940c:	10036926 	beq	r2,zero,8020a1b4 <___vfprintf_internal_r+0x1920>
80209410:	d8c02917 	ldw	r3,164(sp)
80209414:	00800c04 	movi	r2,48
80209418:	d8802705 	stb	r2,156(sp)
8020941c:	dc402745 	stb	r17,157(sp)
80209420:	d8002785 	stb	zero,158(sp)
80209424:	90800094 	ori	r2,r18,2
80209428:	18045d16 	blt	r3,zero,8020a5a0 <___vfprintf_internal_r+0x1d0c>
8020942c:	00bfdfc4 	movi	r2,-129
80209430:	90a4703a 	and	r18,r18,r2
80209434:	94800094 	ori	r18,r18,2
80209438:	0039883a 	mov	fp,zero
8020943c:	d9003917 	ldw	r4,228(sp)
80209440:	dc001e04 	addi	r16,sp,120
80209444:	988003cc 	andi	r2,r19,15
80209448:	b006973a 	slli	r3,r22,28
8020944c:	2085883a 	add	r2,r4,r2
80209450:	9826d13a 	srli	r19,r19,4
80209454:	10800003 	ldbu	r2,0(r2)
80209458:	b02cd13a 	srli	r22,r22,4
8020945c:	843fffc4 	addi	r16,r16,-1
80209460:	1ce6b03a 	or	r19,r3,r19
80209464:	80800005 	stb	r2,0(r16)
80209468:	9d84b03a 	or	r2,r19,r22
8020946c:	103ff51e 	bne	r2,zero,80209444 <__reset+0xfa1e9444>
80209470:	d8c02817 	ldw	r3,160(sp)
80209474:	1c07c83a 	sub	r3,r3,r16
80209478:	d8c02e15 	stw	r3,184(sp)
8020947c:	003ecc06 	br	80208fb0 <__reset+0xfa1e8fb0>
80209480:	18c03fcc 	andi	r3,r3,255
80209484:	183e9f26 	beq	r3,zero,80208f04 <__reset+0xfa1e8f04>
80209488:	d9c02785 	stb	r7,158(sp)
8020948c:	003e9d06 	br	80208f04 <__reset+0xfa1e8f04>
80209490:	00c00044 	movi	r3,1
80209494:	01c00ac4 	movi	r7,43
80209498:	ac400007 	ldb	r17,0(r21)
8020949c:	003d5e06 	br	80208a18 <__reset+0xfa1e8a18>
802094a0:	94800814 	ori	r18,r18,32
802094a4:	ac400007 	ldb	r17,0(r21)
802094a8:	003d5b06 	br	80208a18 <__reset+0xfa1e8a18>
802094ac:	d8c02d17 	ldw	r3,180(sp)
802094b0:	d8002785 	stb	zero,158(sp)
802094b4:	1c000017 	ldw	r16,0(r3)
802094b8:	1cc00104 	addi	r19,r3,4
802094bc:	80041926 	beq	r16,zero,8020a524 <___vfprintf_internal_r+0x1c90>
802094c0:	d9002917 	ldw	r4,164(sp)
802094c4:	2003d016 	blt	r4,zero,8020a408 <___vfprintf_internal_r+0x1b74>
802094c8:	200d883a 	mov	r6,r4
802094cc:	000b883a 	mov	r5,zero
802094d0:	8009883a 	mov	r4,r16
802094d4:	da003d15 	stw	r8,244(sp)
802094d8:	020e0a40 	call	8020e0a4 <memchr>
802094dc:	da003d17 	ldw	r8,244(sp)
802094e0:	10045426 	beq	r2,zero,8020a634 <___vfprintf_internal_r+0x1da0>
802094e4:	1405c83a 	sub	r2,r2,r16
802094e8:	d8802e15 	stw	r2,184(sp)
802094ec:	1003cc16 	blt	r2,zero,8020a420 <___vfprintf_internal_r+0x1b8c>
802094f0:	df002783 	ldbu	fp,158(sp)
802094f4:	d8802a15 	stw	r2,168(sp)
802094f8:	dcc02d15 	stw	r19,180(sp)
802094fc:	d8002915 	stw	zero,164(sp)
80209500:	d8003215 	stw	zero,200(sp)
80209504:	003eb006 	br	80208fc8 <__reset+0xfa1e8fc8>
80209508:	18c03fcc 	andi	r3,r3,255
8020950c:	183f9b26 	beq	r3,zero,8020937c <__reset+0xfa1e937c>
80209510:	d9c02785 	stb	r7,158(sp)
80209514:	003f9906 	br	8020937c <__reset+0xfa1e937c>
80209518:	18c03fcc 	andi	r3,r3,255
8020951c:	1805551e 	bne	r3,zero,8020aa74 <___vfprintf_internal_r+0x21e0>
80209520:	016008b4 	movhi	r5,32802
80209524:	2973ee04 	addi	r5,r5,-12360
80209528:	d9403915 	stw	r5,228(sp)
8020952c:	9080080c 	andi	r2,r18,32
80209530:	103fae1e 	bne	r2,zero,802093ec <__reset+0xfa1e93ec>
80209534:	9080040c 	andi	r2,r18,16
80209538:	1002de26 	beq	r2,zero,8020a0b4 <___vfprintf_internal_r+0x1820>
8020953c:	d8c02d17 	ldw	r3,180(sp)
80209540:	002d883a 	mov	r22,zero
80209544:	1cc00017 	ldw	r19,0(r3)
80209548:	18c00104 	addi	r3,r3,4
8020954c:	d8c02d15 	stw	r3,180(sp)
80209550:	003fab06 	br	80209400 <__reset+0xfa1e9400>
80209554:	38803fcc 	andi	r2,r7,255
80209558:	1080201c 	xori	r2,r2,128
8020955c:	10bfe004 	addi	r2,r2,-128
80209560:	1002d21e 	bne	r2,zero,8020a0ac <___vfprintf_internal_r+0x1818>
80209564:	00c00044 	movi	r3,1
80209568:	01c00804 	movi	r7,32
8020956c:	ac400007 	ldb	r17,0(r21)
80209570:	003d2906 	br	80208a18 <__reset+0xfa1e8a18>
80209574:	94800054 	ori	r18,r18,1
80209578:	ac400007 	ldb	r17,0(r21)
8020957c:	003d2606 	br	80208a18 <__reset+0xfa1e8a18>
80209580:	18c03fcc 	andi	r3,r3,255
80209584:	183e0526 	beq	r3,zero,80208d9c <__reset+0xfa1e8d9c>
80209588:	d9c02785 	stb	r7,158(sp)
8020958c:	003e0306 	br	80208d9c <__reset+0xfa1e8d9c>
80209590:	94801014 	ori	r18,r18,64
80209594:	ac400007 	ldb	r17,0(r21)
80209598:	003d1f06 	br	80208a18 <__reset+0xfa1e8a18>
8020959c:	ac400007 	ldb	r17,0(r21)
802095a0:	8a438726 	beq	r17,r9,8020a3c0 <___vfprintf_internal_r+0x1b2c>
802095a4:	94800414 	ori	r18,r18,16
802095a8:	003d1b06 	br	80208a18 <__reset+0xfa1e8a18>
802095ac:	18c03fcc 	andi	r3,r3,255
802095b0:	1805341e 	bne	r3,zero,8020aa84 <___vfprintf_internal_r+0x21f0>
802095b4:	9080080c 	andi	r2,r18,32
802095b8:	1002cd26 	beq	r2,zero,8020a0f0 <___vfprintf_internal_r+0x185c>
802095bc:	d9402d17 	ldw	r5,180(sp)
802095c0:	d9002f17 	ldw	r4,188(sp)
802095c4:	28800017 	ldw	r2,0(r5)
802095c8:	2007d7fa 	srai	r3,r4,31
802095cc:	29400104 	addi	r5,r5,4
802095d0:	d9402d15 	stw	r5,180(sp)
802095d4:	11000015 	stw	r4,0(r2)
802095d8:	10c00115 	stw	r3,4(r2)
802095dc:	003ce506 	br	80208974 <__reset+0xfa1e8974>
802095e0:	d8c02d17 	ldw	r3,180(sp)
802095e4:	d9002d17 	ldw	r4,180(sp)
802095e8:	d8002785 	stb	zero,158(sp)
802095ec:	18800017 	ldw	r2,0(r3)
802095f0:	21000104 	addi	r4,r4,4
802095f4:	00c00044 	movi	r3,1
802095f8:	d8c02a15 	stw	r3,168(sp)
802095fc:	d8801405 	stb	r2,80(sp)
80209600:	d9002d15 	stw	r4,180(sp)
80209604:	d8c02e15 	stw	r3,184(sp)
80209608:	d8002915 	stw	zero,164(sp)
8020960c:	d8003215 	stw	zero,200(sp)
80209610:	dc001404 	addi	r16,sp,80
80209614:	0039883a 	mov	fp,zero
80209618:	003e7206 	br	80208fe4 <__reset+0xfa1e8fe4>
8020961c:	012008b4 	movhi	r4,32802
80209620:	2133ee04 	addi	r4,r4,-12360
80209624:	0039883a 	mov	fp,zero
80209628:	d9003915 	stw	r4,228(sp)
8020962c:	04401e04 	movi	r17,120
80209630:	003f8206 	br	8020943c <__reset+0xfa1e943c>
80209634:	18c03fcc 	andi	r3,r3,255
80209638:	1805061e 	bne	r3,zero,8020aa54 <___vfprintf_internal_r+0x21c0>
8020963c:	883d9126 	beq	r17,zero,80208c84 <__reset+0xfa1e8c84>
80209640:	00c00044 	movi	r3,1
80209644:	d8c02a15 	stw	r3,168(sp)
80209648:	dc401405 	stb	r17,80(sp)
8020964c:	d8002785 	stb	zero,158(sp)
80209650:	003fec06 	br	80209604 <__reset+0xfa1e9604>
80209654:	016008b4 	movhi	r5,32802
80209658:	2973ee04 	addi	r5,r5,-12360
8020965c:	d9403915 	stw	r5,228(sp)
80209660:	d8c02d15 	stw	r3,180(sp)
80209664:	1025883a 	mov	r18,r2
80209668:	04401e04 	movi	r17,120
8020966c:	9d84b03a 	or	r2,r19,r22
80209670:	1000fc1e 	bne	r2,zero,80209a64 <___vfprintf_internal_r+0x11d0>
80209674:	0039883a 	mov	fp,zero
80209678:	00800084 	movi	r2,2
8020967c:	10803fcc 	andi	r2,r2,255
80209680:	00c00044 	movi	r3,1
80209684:	10c20f26 	beq	r2,r3,80209ec4 <___vfprintf_internal_r+0x1630>
80209688:	00c00084 	movi	r3,2
8020968c:	10fd6326 	beq	r2,r3,80208c1c <__reset+0xfa1e8c1c>
80209690:	003e2d06 	br	80208f48 <__reset+0xfa1e8f48>
80209694:	d8c02017 	ldw	r3,128(sp)
80209698:	003e9306 	br	802090e8 <__reset+0xfa1e90e8>
8020969c:	00801944 	movi	r2,101
802096a0:	14407e0e 	bge	r2,r17,8020989c <___vfprintf_internal_r+0x1008>
802096a4:	d9003617 	ldw	r4,216(sp)
802096a8:	d9403817 	ldw	r5,224(sp)
802096ac:	000d883a 	mov	r6,zero
802096b0:	000f883a 	mov	r7,zero
802096b4:	d8c03c15 	stw	r3,240(sp)
802096b8:	da003d15 	stw	r8,244(sp)
802096bc:	0214dcc0 	call	80214dcc <__eqdf2>
802096c0:	d8c03c17 	ldw	r3,240(sp)
802096c4:	da003d17 	ldw	r8,244(sp)
802096c8:	1000f71e 	bne	r2,zero,80209aa8 <___vfprintf_internal_r+0x1214>
802096cc:	d8801f17 	ldw	r2,124(sp)
802096d0:	012008b4 	movhi	r4,32802
802096d4:	2133f504 	addi	r4,r4,-12332
802096d8:	18c00044 	addi	r3,r3,1
802096dc:	10800044 	addi	r2,r2,1
802096e0:	41000015 	stw	r4,0(r8)
802096e4:	01000044 	movi	r4,1
802096e8:	41000115 	stw	r4,4(r8)
802096ec:	d8c02015 	stw	r3,128(sp)
802096f0:	d8801f15 	stw	r2,124(sp)
802096f4:	010001c4 	movi	r4,7
802096f8:	2082b816 	blt	r4,r2,8020a1dc <___vfprintf_internal_r+0x1948>
802096fc:	42000204 	addi	r8,r8,8
80209700:	d8802617 	ldw	r2,152(sp)
80209704:	d9403317 	ldw	r5,204(sp)
80209708:	11400216 	blt	r2,r5,80209714 <___vfprintf_internal_r+0xe80>
8020970c:	9080004c 	andi	r2,r18,1
80209710:	103ed526 	beq	r2,zero,80209268 <__reset+0xfa1e9268>
80209714:	d8803717 	ldw	r2,220(sp)
80209718:	d9003417 	ldw	r4,208(sp)
8020971c:	d9403717 	ldw	r5,220(sp)
80209720:	1887883a 	add	r3,r3,r2
80209724:	d8801f17 	ldw	r2,124(sp)
80209728:	41000015 	stw	r4,0(r8)
8020972c:	41400115 	stw	r5,4(r8)
80209730:	10800044 	addi	r2,r2,1
80209734:	d8c02015 	stw	r3,128(sp)
80209738:	d8801f15 	stw	r2,124(sp)
8020973c:	010001c4 	movi	r4,7
80209740:	20832916 	blt	r4,r2,8020a3e8 <___vfprintf_internal_r+0x1b54>
80209744:	42000204 	addi	r8,r8,8
80209748:	d8803317 	ldw	r2,204(sp)
8020974c:	143fffc4 	addi	r16,r2,-1
80209750:	043ec50e 	bge	zero,r16,80209268 <__reset+0xfa1e9268>
80209754:	04400404 	movi	r17,16
80209758:	d8801f17 	ldw	r2,124(sp)
8020975c:	8c00880e 	bge	r17,r16,80209980 <___vfprintf_internal_r+0x10ec>
80209760:	016008b4 	movhi	r5,32802
80209764:	2973fd84 	addi	r5,r5,-12298
80209768:	d9402b15 	stw	r5,172(sp)
8020976c:	058001c4 	movi	r22,7
80209770:	dcc02c17 	ldw	r19,176(sp)
80209774:	00000306 	br	80209784 <___vfprintf_internal_r+0xef0>
80209778:	42000204 	addi	r8,r8,8
8020977c:	843ffc04 	addi	r16,r16,-16
80209780:	8c00820e 	bge	r17,r16,8020998c <___vfprintf_internal_r+0x10f8>
80209784:	18c00404 	addi	r3,r3,16
80209788:	10800044 	addi	r2,r2,1
8020978c:	45000015 	stw	r20,0(r8)
80209790:	44400115 	stw	r17,4(r8)
80209794:	d8c02015 	stw	r3,128(sp)
80209798:	d8801f15 	stw	r2,124(sp)
8020979c:	b0bff60e 	bge	r22,r2,80209778 <__reset+0xfa1e9778>
802097a0:	d9801e04 	addi	r6,sp,120
802097a4:	b80b883a 	mov	r5,r23
802097a8:	9809883a 	mov	r4,r19
802097ac:	02111540 	call	80211154 <__sprint_r>
802097b0:	103d3a1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
802097b4:	d8c02017 	ldw	r3,128(sp)
802097b8:	d8801f17 	ldw	r2,124(sp)
802097bc:	da000404 	addi	r8,sp,16
802097c0:	003fee06 	br	8020977c <__reset+0xfa1e977c>
802097c4:	d9403117 	ldw	r5,196(sp)
802097c8:	d8802a17 	ldw	r2,168(sp)
802097cc:	28adc83a 	sub	r22,r5,r2
802097d0:	05be630e 	bge	zero,r22,80209160 <__reset+0xfa1e9160>
802097d4:	07000404 	movi	fp,16
802097d8:	d8801f17 	ldw	r2,124(sp)
802097dc:	e5838f0e 	bge	fp,r22,8020a61c <___vfprintf_internal_r+0x1d88>
802097e0:	016008b4 	movhi	r5,32802
802097e4:	2973fd84 	addi	r5,r5,-12298
802097e8:	dc403015 	stw	r17,192(sp)
802097ec:	d9402b15 	stw	r5,172(sp)
802097f0:	b023883a 	mov	r17,r22
802097f4:	04c001c4 	movi	r19,7
802097f8:	a82d883a 	mov	r22,r21
802097fc:	902b883a 	mov	r21,r18
80209800:	8025883a 	mov	r18,r16
80209804:	dc002c17 	ldw	r16,176(sp)
80209808:	00000306 	br	80209818 <___vfprintf_internal_r+0xf84>
8020980c:	8c7ffc04 	addi	r17,r17,-16
80209810:	42000204 	addi	r8,r8,8
80209814:	e440110e 	bge	fp,r17,8020985c <___vfprintf_internal_r+0xfc8>
80209818:	18c00404 	addi	r3,r3,16
8020981c:	10800044 	addi	r2,r2,1
80209820:	45000015 	stw	r20,0(r8)
80209824:	47000115 	stw	fp,4(r8)
80209828:	d8c02015 	stw	r3,128(sp)
8020982c:	d8801f15 	stw	r2,124(sp)
80209830:	98bff60e 	bge	r19,r2,8020980c <__reset+0xfa1e980c>
80209834:	d9801e04 	addi	r6,sp,120
80209838:	b80b883a 	mov	r5,r23
8020983c:	8009883a 	mov	r4,r16
80209840:	02111540 	call	80211154 <__sprint_r>
80209844:	103d151e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209848:	8c7ffc04 	addi	r17,r17,-16
8020984c:	d8c02017 	ldw	r3,128(sp)
80209850:	d8801f17 	ldw	r2,124(sp)
80209854:	da000404 	addi	r8,sp,16
80209858:	e47fef16 	blt	fp,r17,80209818 <__reset+0xfa1e9818>
8020985c:	9021883a 	mov	r16,r18
80209860:	a825883a 	mov	r18,r21
80209864:	b02b883a 	mov	r21,r22
80209868:	882d883a 	mov	r22,r17
8020986c:	dc403017 	ldw	r17,192(sp)
80209870:	d9002b17 	ldw	r4,172(sp)
80209874:	1d87883a 	add	r3,r3,r22
80209878:	10800044 	addi	r2,r2,1
8020987c:	41000015 	stw	r4,0(r8)
80209880:	45800115 	stw	r22,4(r8)
80209884:	d8c02015 	stw	r3,128(sp)
80209888:	d8801f15 	stw	r2,124(sp)
8020988c:	010001c4 	movi	r4,7
80209890:	20818e16 	blt	r4,r2,80209ecc <___vfprintf_internal_r+0x1638>
80209894:	42000204 	addi	r8,r8,8
80209898:	003e3106 	br	80209160 <__reset+0xfa1e9160>
8020989c:	d9403317 	ldw	r5,204(sp)
802098a0:	00800044 	movi	r2,1
802098a4:	18c00044 	addi	r3,r3,1
802098a8:	1141530e 	bge	r2,r5,80209df8 <___vfprintf_internal_r+0x1564>
802098ac:	dc401f17 	ldw	r17,124(sp)
802098b0:	00800044 	movi	r2,1
802098b4:	40800115 	stw	r2,4(r8)
802098b8:	8c400044 	addi	r17,r17,1
802098bc:	44000015 	stw	r16,0(r8)
802098c0:	d8c02015 	stw	r3,128(sp)
802098c4:	dc401f15 	stw	r17,124(sp)
802098c8:	008001c4 	movi	r2,7
802098cc:	14416b16 	blt	r2,r17,80209e7c <___vfprintf_internal_r+0x15e8>
802098d0:	42000204 	addi	r8,r8,8
802098d4:	d8803717 	ldw	r2,220(sp)
802098d8:	d9003417 	ldw	r4,208(sp)
802098dc:	8c400044 	addi	r17,r17,1
802098e0:	10c7883a 	add	r3,r2,r3
802098e4:	40800115 	stw	r2,4(r8)
802098e8:	41000015 	stw	r4,0(r8)
802098ec:	d8c02015 	stw	r3,128(sp)
802098f0:	dc401f15 	stw	r17,124(sp)
802098f4:	008001c4 	movi	r2,7
802098f8:	14416916 	blt	r2,r17,80209ea0 <___vfprintf_internal_r+0x160c>
802098fc:	45800204 	addi	r22,r8,8
80209900:	d9003617 	ldw	r4,216(sp)
80209904:	d9403817 	ldw	r5,224(sp)
80209908:	000d883a 	mov	r6,zero
8020990c:	000f883a 	mov	r7,zero
80209910:	d8c03c15 	stw	r3,240(sp)
80209914:	0214dcc0 	call	80214dcc <__eqdf2>
80209918:	d8c03c17 	ldw	r3,240(sp)
8020991c:	1000bc26 	beq	r2,zero,80209c10 <___vfprintf_internal_r+0x137c>
80209920:	d9403317 	ldw	r5,204(sp)
80209924:	84000044 	addi	r16,r16,1
80209928:	8c400044 	addi	r17,r17,1
8020992c:	28bfffc4 	addi	r2,r5,-1
80209930:	1887883a 	add	r3,r3,r2
80209934:	b0800115 	stw	r2,4(r22)
80209938:	b4000015 	stw	r16,0(r22)
8020993c:	d8c02015 	stw	r3,128(sp)
80209940:	dc401f15 	stw	r17,124(sp)
80209944:	008001c4 	movi	r2,7
80209948:	14414316 	blt	r2,r17,80209e58 <___vfprintf_internal_r+0x15c4>
8020994c:	b5800204 	addi	r22,r22,8
80209950:	d9003a17 	ldw	r4,232(sp)
80209954:	df0022c4 	addi	fp,sp,139
80209958:	8c400044 	addi	r17,r17,1
8020995c:	20c7883a 	add	r3,r4,r3
80209960:	b7000015 	stw	fp,0(r22)
80209964:	b1000115 	stw	r4,4(r22)
80209968:	d8c02015 	stw	r3,128(sp)
8020996c:	dc401f15 	stw	r17,124(sp)
80209970:	008001c4 	movi	r2,7
80209974:	14400e16 	blt	r2,r17,802099b0 <___vfprintf_internal_r+0x111c>
80209978:	b2000204 	addi	r8,r22,8
8020997c:	003e3a06 	br	80209268 <__reset+0xfa1e9268>
80209980:	012008b4 	movhi	r4,32802
80209984:	2133fd84 	addi	r4,r4,-12298
80209988:	d9002b15 	stw	r4,172(sp)
8020998c:	d9002b17 	ldw	r4,172(sp)
80209990:	1c07883a 	add	r3,r3,r16
80209994:	44000115 	stw	r16,4(r8)
80209998:	41000015 	stw	r4,0(r8)
8020999c:	10800044 	addi	r2,r2,1
802099a0:	d8c02015 	stw	r3,128(sp)
802099a4:	d8801f15 	stw	r2,124(sp)
802099a8:	010001c4 	movi	r4,7
802099ac:	20be2d0e 	bge	r4,r2,80209264 <__reset+0xfa1e9264>
802099b0:	d9002c17 	ldw	r4,176(sp)
802099b4:	d9801e04 	addi	r6,sp,120
802099b8:	b80b883a 	mov	r5,r23
802099bc:	02111540 	call	80211154 <__sprint_r>
802099c0:	103cb61e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
802099c4:	d8c02017 	ldw	r3,128(sp)
802099c8:	da000404 	addi	r8,sp,16
802099cc:	003e2606 	br	80209268 <__reset+0xfa1e9268>
802099d0:	d9002c17 	ldw	r4,176(sp)
802099d4:	d9801e04 	addi	r6,sp,120
802099d8:	b80b883a 	mov	r5,r23
802099dc:	02111540 	call	80211154 <__sprint_r>
802099e0:	103e5d26 	beq	r2,zero,80209358 <__reset+0xfa1e9358>
802099e4:	003cad06 	br	80208c9c <__reset+0xfa1e8c9c>
802099e8:	d9002c17 	ldw	r4,176(sp)
802099ec:	d9801e04 	addi	r6,sp,120
802099f0:	b80b883a 	mov	r5,r23
802099f4:	02111540 	call	80211154 <__sprint_r>
802099f8:	103ca81e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
802099fc:	d8c02017 	ldw	r3,128(sp)
80209a00:	da000404 	addi	r8,sp,16
80209a04:	003e0b06 	br	80209234 <__reset+0xfa1e9234>
80209a08:	d9002c17 	ldw	r4,176(sp)
80209a0c:	d9801e04 	addi	r6,sp,120
80209a10:	b80b883a 	mov	r5,r23
80209a14:	02111540 	call	80211154 <__sprint_r>
80209a18:	103ca01e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209a1c:	d8c02017 	ldw	r3,128(sp)
80209a20:	da000404 	addi	r8,sp,16
80209a24:	003dbd06 	br	8020911c <__reset+0xfa1e911c>
80209a28:	d9002c17 	ldw	r4,176(sp)
80209a2c:	d9801e04 	addi	r6,sp,120
80209a30:	b80b883a 	mov	r5,r23
80209a34:	02111540 	call	80211154 <__sprint_r>
80209a38:	103c981e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209a3c:	d8c02017 	ldw	r3,128(sp)
80209a40:	da000404 	addi	r8,sp,16
80209a44:	003dc306 	br	80209154 <__reset+0xfa1e9154>
80209a48:	d8802917 	ldw	r2,164(sp)
80209a4c:	d8002785 	stb	zero,158(sp)
80209a50:	103f0616 	blt	r2,zero,8020966c <__reset+0xfa1e966c>
80209a54:	00ffdfc4 	movi	r3,-129
80209a58:	9d84b03a 	or	r2,r19,r22
80209a5c:	90e4703a 	and	r18,r18,r3
80209a60:	103c6b26 	beq	r2,zero,80208c10 <__reset+0xfa1e8c10>
80209a64:	0039883a 	mov	fp,zero
80209a68:	003e7406 	br	8020943c <__reset+0xfa1e943c>
80209a6c:	9080040c 	andi	r2,r18,16
80209a70:	1001b326 	beq	r2,zero,8020a140 <___vfprintf_internal_r+0x18ac>
80209a74:	d9002d17 	ldw	r4,180(sp)
80209a78:	d9402917 	ldw	r5,164(sp)
80209a7c:	d8002785 	stb	zero,158(sp)
80209a80:	20800104 	addi	r2,r4,4
80209a84:	24c00017 	ldw	r19,0(r4)
80209a88:	002d883a 	mov	r22,zero
80209a8c:	2801b516 	blt	r5,zero,8020a164 <___vfprintf_internal_r+0x18d0>
80209a90:	00ffdfc4 	movi	r3,-129
80209a94:	d8802d15 	stw	r2,180(sp)
80209a98:	90e4703a 	and	r18,r18,r3
80209a9c:	983d2726 	beq	r19,zero,80208f3c <__reset+0xfa1e8f3c>
80209aa0:	0039883a 	mov	fp,zero
80209aa4:	003d2a06 	br	80208f50 <__reset+0xfa1e8f50>
80209aa8:	dc402617 	ldw	r17,152(sp)
80209aac:	0441d30e 	bge	zero,r17,8020a1fc <___vfprintf_internal_r+0x1968>
80209ab0:	dc403217 	ldw	r17,200(sp)
80209ab4:	d8803317 	ldw	r2,204(sp)
80209ab8:	1440010e 	bge	r2,r17,80209ac0 <___vfprintf_internal_r+0x122c>
80209abc:	1023883a 	mov	r17,r2
80209ac0:	04400a0e 	bge	zero,r17,80209aec <___vfprintf_internal_r+0x1258>
80209ac4:	d8801f17 	ldw	r2,124(sp)
80209ac8:	1c47883a 	add	r3,r3,r17
80209acc:	44000015 	stw	r16,0(r8)
80209ad0:	10800044 	addi	r2,r2,1
80209ad4:	44400115 	stw	r17,4(r8)
80209ad8:	d8c02015 	stw	r3,128(sp)
80209adc:	d8801f15 	stw	r2,124(sp)
80209ae0:	010001c4 	movi	r4,7
80209ae4:	20826516 	blt	r4,r2,8020a47c <___vfprintf_internal_r+0x1be8>
80209ae8:	42000204 	addi	r8,r8,8
80209aec:	88026116 	blt	r17,zero,8020a474 <___vfprintf_internal_r+0x1be0>
80209af0:	d9003217 	ldw	r4,200(sp)
80209af4:	2463c83a 	sub	r17,r4,r17
80209af8:	04407b0e 	bge	zero,r17,80209ce8 <___vfprintf_internal_r+0x1454>
80209afc:	05800404 	movi	r22,16
80209b00:	d8801f17 	ldw	r2,124(sp)
80209b04:	b4419d0e 	bge	r22,r17,8020a17c <___vfprintf_internal_r+0x18e8>
80209b08:	012008b4 	movhi	r4,32802
80209b0c:	2133fd84 	addi	r4,r4,-12298
80209b10:	d9002b15 	stw	r4,172(sp)
80209b14:	070001c4 	movi	fp,7
80209b18:	dcc02c17 	ldw	r19,176(sp)
80209b1c:	00000306 	br	80209b2c <___vfprintf_internal_r+0x1298>
80209b20:	42000204 	addi	r8,r8,8
80209b24:	8c7ffc04 	addi	r17,r17,-16
80209b28:	b441970e 	bge	r22,r17,8020a188 <___vfprintf_internal_r+0x18f4>
80209b2c:	18c00404 	addi	r3,r3,16
80209b30:	10800044 	addi	r2,r2,1
80209b34:	45000015 	stw	r20,0(r8)
80209b38:	45800115 	stw	r22,4(r8)
80209b3c:	d8c02015 	stw	r3,128(sp)
80209b40:	d8801f15 	stw	r2,124(sp)
80209b44:	e0bff60e 	bge	fp,r2,80209b20 <__reset+0xfa1e9b20>
80209b48:	d9801e04 	addi	r6,sp,120
80209b4c:	b80b883a 	mov	r5,r23
80209b50:	9809883a 	mov	r4,r19
80209b54:	02111540 	call	80211154 <__sprint_r>
80209b58:	103c501e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209b5c:	d8c02017 	ldw	r3,128(sp)
80209b60:	d8801f17 	ldw	r2,124(sp)
80209b64:	da000404 	addi	r8,sp,16
80209b68:	003fee06 	br	80209b24 <__reset+0xfa1e9b24>
80209b6c:	d9002c17 	ldw	r4,176(sp)
80209b70:	d9801e04 	addi	r6,sp,120
80209b74:	b80b883a 	mov	r5,r23
80209b78:	02111540 	call	80211154 <__sprint_r>
80209b7c:	103c471e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209b80:	d8c02017 	ldw	r3,128(sp)
80209b84:	df002787 	ldb	fp,158(sp)
80209b88:	da000404 	addi	r8,sp,16
80209b8c:	003d5606 	br	802090e8 <__reset+0xfa1e90e8>
80209b90:	9080040c 	andi	r2,r18,16
80209b94:	10016126 	beq	r2,zero,8020a11c <___vfprintf_internal_r+0x1888>
80209b98:	d8802d17 	ldw	r2,180(sp)
80209b9c:	14c00017 	ldw	r19,0(r2)
80209ba0:	10800104 	addi	r2,r2,4
80209ba4:	d8802d15 	stw	r2,180(sp)
80209ba8:	982dd7fa 	srai	r22,r19,31
80209bac:	b005883a 	mov	r2,r22
80209bb0:	003c8206 	br	80208dbc <__reset+0xfa1e8dbc>
80209bb4:	9080040c 	andi	r2,r18,16
80209bb8:	10003526 	beq	r2,zero,80209c90 <___vfprintf_internal_r+0x13fc>
80209bbc:	d9402d17 	ldw	r5,180(sp)
80209bc0:	d8c02917 	ldw	r3,164(sp)
80209bc4:	d8002785 	stb	zero,158(sp)
80209bc8:	28800104 	addi	r2,r5,4
80209bcc:	2cc00017 	ldw	r19,0(r5)
80209bd0:	002d883a 	mov	r22,zero
80209bd4:	18003716 	blt	r3,zero,80209cb4 <___vfprintf_internal_r+0x1420>
80209bd8:	00ffdfc4 	movi	r3,-129
80209bdc:	d8802d15 	stw	r2,180(sp)
80209be0:	90e4703a 	and	r18,r18,r3
80209be4:	0039883a 	mov	fp,zero
80209be8:	983df326 	beq	r19,zero,802093b8 <__reset+0xfa1e93b8>
80209bec:	00800244 	movi	r2,9
80209bf0:	14fc7b36 	bltu	r2,r19,80208de0 <__reset+0xfa1e8de0>
80209bf4:	d8c02817 	ldw	r3,160(sp)
80209bf8:	dc001dc4 	addi	r16,sp,119
80209bfc:	9cc00c04 	addi	r19,r19,48
80209c00:	1c07c83a 	sub	r3,r3,r16
80209c04:	dcc01dc5 	stb	r19,119(sp)
80209c08:	d8c02e15 	stw	r3,184(sp)
80209c0c:	003ce806 	br	80208fb0 <__reset+0xfa1e8fb0>
80209c10:	d8803317 	ldw	r2,204(sp)
80209c14:	143fffc4 	addi	r16,r2,-1
80209c18:	043f4d0e 	bge	zero,r16,80209950 <__reset+0xfa1e9950>
80209c1c:	07000404 	movi	fp,16
80209c20:	e400810e 	bge	fp,r16,80209e28 <___vfprintf_internal_r+0x1594>
80209c24:	016008b4 	movhi	r5,32802
80209c28:	2973fd84 	addi	r5,r5,-12298
80209c2c:	d9402b15 	stw	r5,172(sp)
80209c30:	01c001c4 	movi	r7,7
80209c34:	dcc02c17 	ldw	r19,176(sp)
80209c38:	00000306 	br	80209c48 <___vfprintf_internal_r+0x13b4>
80209c3c:	b5800204 	addi	r22,r22,8
80209c40:	843ffc04 	addi	r16,r16,-16
80209c44:	e4007b0e 	bge	fp,r16,80209e34 <___vfprintf_internal_r+0x15a0>
80209c48:	18c00404 	addi	r3,r3,16
80209c4c:	8c400044 	addi	r17,r17,1
80209c50:	b5000015 	stw	r20,0(r22)
80209c54:	b7000115 	stw	fp,4(r22)
80209c58:	d8c02015 	stw	r3,128(sp)
80209c5c:	dc401f15 	stw	r17,124(sp)
80209c60:	3c7ff60e 	bge	r7,r17,80209c3c <__reset+0xfa1e9c3c>
80209c64:	d9801e04 	addi	r6,sp,120
80209c68:	b80b883a 	mov	r5,r23
80209c6c:	9809883a 	mov	r4,r19
80209c70:	d9c03c15 	stw	r7,240(sp)
80209c74:	02111540 	call	80211154 <__sprint_r>
80209c78:	d9c03c17 	ldw	r7,240(sp)
80209c7c:	103c071e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209c80:	d8c02017 	ldw	r3,128(sp)
80209c84:	dc401f17 	ldw	r17,124(sp)
80209c88:	dd800404 	addi	r22,sp,16
80209c8c:	003fec06 	br	80209c40 <__reset+0xfa1e9c40>
80209c90:	9080100c 	andi	r2,r18,64
80209c94:	d8002785 	stb	zero,158(sp)
80209c98:	10010e26 	beq	r2,zero,8020a0d4 <___vfprintf_internal_r+0x1840>
80209c9c:	d9002d17 	ldw	r4,180(sp)
80209ca0:	d9402917 	ldw	r5,164(sp)
80209ca4:	002d883a 	mov	r22,zero
80209ca8:	20800104 	addi	r2,r4,4
80209cac:	24c0000b 	ldhu	r19,0(r4)
80209cb0:	283fc90e 	bge	r5,zero,80209bd8 <__reset+0xfa1e9bd8>
80209cb4:	d8802d15 	stw	r2,180(sp)
80209cb8:	0039883a 	mov	fp,zero
80209cbc:	9d84b03a 	or	r2,r19,r22
80209cc0:	103c461e 	bne	r2,zero,80208ddc <__reset+0xfa1e8ddc>
80209cc4:	00800044 	movi	r2,1
80209cc8:	003e6c06 	br	8020967c <__reset+0xfa1e967c>
80209ccc:	d9002c17 	ldw	r4,176(sp)
80209cd0:	d9801e04 	addi	r6,sp,120
80209cd4:	b80b883a 	mov	r5,r23
80209cd8:	02111540 	call	80211154 <__sprint_r>
80209cdc:	103bef1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209ce0:	d8c02017 	ldw	r3,128(sp)
80209ce4:	da000404 	addi	r8,sp,16
80209ce8:	d9003217 	ldw	r4,200(sp)
80209cec:	d8802617 	ldw	r2,152(sp)
80209cf0:	d9403317 	ldw	r5,204(sp)
80209cf4:	8123883a 	add	r17,r16,r4
80209cf8:	11400216 	blt	r2,r5,80209d04 <___vfprintf_internal_r+0x1470>
80209cfc:	9100004c 	andi	r4,r18,1
80209d00:	20000d26 	beq	r4,zero,80209d38 <___vfprintf_internal_r+0x14a4>
80209d04:	d9003717 	ldw	r4,220(sp)
80209d08:	d9403417 	ldw	r5,208(sp)
80209d0c:	1907883a 	add	r3,r3,r4
80209d10:	d9001f17 	ldw	r4,124(sp)
80209d14:	41400015 	stw	r5,0(r8)
80209d18:	d9403717 	ldw	r5,220(sp)
80209d1c:	21000044 	addi	r4,r4,1
80209d20:	d8c02015 	stw	r3,128(sp)
80209d24:	41400115 	stw	r5,4(r8)
80209d28:	d9001f15 	stw	r4,124(sp)
80209d2c:	014001c4 	movi	r5,7
80209d30:	2901e816 	blt	r5,r4,8020a4d4 <___vfprintf_internal_r+0x1c40>
80209d34:	42000204 	addi	r8,r8,8
80209d38:	d9003317 	ldw	r4,204(sp)
80209d3c:	8121883a 	add	r16,r16,r4
80209d40:	2085c83a 	sub	r2,r4,r2
80209d44:	8461c83a 	sub	r16,r16,r17
80209d48:	1400010e 	bge	r2,r16,80209d50 <___vfprintf_internal_r+0x14bc>
80209d4c:	1021883a 	mov	r16,r2
80209d50:	04000a0e 	bge	zero,r16,80209d7c <___vfprintf_internal_r+0x14e8>
80209d54:	d9001f17 	ldw	r4,124(sp)
80209d58:	1c07883a 	add	r3,r3,r16
80209d5c:	44400015 	stw	r17,0(r8)
80209d60:	21000044 	addi	r4,r4,1
80209d64:	44000115 	stw	r16,4(r8)
80209d68:	d8c02015 	stw	r3,128(sp)
80209d6c:	d9001f15 	stw	r4,124(sp)
80209d70:	014001c4 	movi	r5,7
80209d74:	2901fb16 	blt	r5,r4,8020a564 <___vfprintf_internal_r+0x1cd0>
80209d78:	42000204 	addi	r8,r8,8
80209d7c:	8001f716 	blt	r16,zero,8020a55c <___vfprintf_internal_r+0x1cc8>
80209d80:	1421c83a 	sub	r16,r2,r16
80209d84:	043d380e 	bge	zero,r16,80209268 <__reset+0xfa1e9268>
80209d88:	04400404 	movi	r17,16
80209d8c:	d8801f17 	ldw	r2,124(sp)
80209d90:	8c3efb0e 	bge	r17,r16,80209980 <__reset+0xfa1e9980>
80209d94:	016008b4 	movhi	r5,32802
80209d98:	2973fd84 	addi	r5,r5,-12298
80209d9c:	d9402b15 	stw	r5,172(sp)
80209da0:	058001c4 	movi	r22,7
80209da4:	dcc02c17 	ldw	r19,176(sp)
80209da8:	00000306 	br	80209db8 <___vfprintf_internal_r+0x1524>
80209dac:	42000204 	addi	r8,r8,8
80209db0:	843ffc04 	addi	r16,r16,-16
80209db4:	8c3ef50e 	bge	r17,r16,8020998c <__reset+0xfa1e998c>
80209db8:	18c00404 	addi	r3,r3,16
80209dbc:	10800044 	addi	r2,r2,1
80209dc0:	45000015 	stw	r20,0(r8)
80209dc4:	44400115 	stw	r17,4(r8)
80209dc8:	d8c02015 	stw	r3,128(sp)
80209dcc:	d8801f15 	stw	r2,124(sp)
80209dd0:	b0bff60e 	bge	r22,r2,80209dac <__reset+0xfa1e9dac>
80209dd4:	d9801e04 	addi	r6,sp,120
80209dd8:	b80b883a 	mov	r5,r23
80209ddc:	9809883a 	mov	r4,r19
80209de0:	02111540 	call	80211154 <__sprint_r>
80209de4:	103bad1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209de8:	d8c02017 	ldw	r3,128(sp)
80209dec:	d8801f17 	ldw	r2,124(sp)
80209df0:	da000404 	addi	r8,sp,16
80209df4:	003fee06 	br	80209db0 <__reset+0xfa1e9db0>
80209df8:	9088703a 	and	r4,r18,r2
80209dfc:	203eab1e 	bne	r4,zero,802098ac <__reset+0xfa1e98ac>
80209e00:	dc401f17 	ldw	r17,124(sp)
80209e04:	40800115 	stw	r2,4(r8)
80209e08:	44000015 	stw	r16,0(r8)
80209e0c:	8c400044 	addi	r17,r17,1
80209e10:	d8c02015 	stw	r3,128(sp)
80209e14:	dc401f15 	stw	r17,124(sp)
80209e18:	008001c4 	movi	r2,7
80209e1c:	14400e16 	blt	r2,r17,80209e58 <___vfprintf_internal_r+0x15c4>
80209e20:	45800204 	addi	r22,r8,8
80209e24:	003eca06 	br	80209950 <__reset+0xfa1e9950>
80209e28:	012008b4 	movhi	r4,32802
80209e2c:	2133fd84 	addi	r4,r4,-12298
80209e30:	d9002b15 	stw	r4,172(sp)
80209e34:	d8802b17 	ldw	r2,172(sp)
80209e38:	1c07883a 	add	r3,r3,r16
80209e3c:	8c400044 	addi	r17,r17,1
80209e40:	b0800015 	stw	r2,0(r22)
80209e44:	b4000115 	stw	r16,4(r22)
80209e48:	d8c02015 	stw	r3,128(sp)
80209e4c:	dc401f15 	stw	r17,124(sp)
80209e50:	008001c4 	movi	r2,7
80209e54:	147ebd0e 	bge	r2,r17,8020994c <__reset+0xfa1e994c>
80209e58:	d9002c17 	ldw	r4,176(sp)
80209e5c:	d9801e04 	addi	r6,sp,120
80209e60:	b80b883a 	mov	r5,r23
80209e64:	02111540 	call	80211154 <__sprint_r>
80209e68:	103b8c1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209e6c:	d8c02017 	ldw	r3,128(sp)
80209e70:	dc401f17 	ldw	r17,124(sp)
80209e74:	dd800404 	addi	r22,sp,16
80209e78:	003eb506 	br	80209950 <__reset+0xfa1e9950>
80209e7c:	d9002c17 	ldw	r4,176(sp)
80209e80:	d9801e04 	addi	r6,sp,120
80209e84:	b80b883a 	mov	r5,r23
80209e88:	02111540 	call	80211154 <__sprint_r>
80209e8c:	103b831e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209e90:	d8c02017 	ldw	r3,128(sp)
80209e94:	dc401f17 	ldw	r17,124(sp)
80209e98:	da000404 	addi	r8,sp,16
80209e9c:	003e8d06 	br	802098d4 <__reset+0xfa1e98d4>
80209ea0:	d9002c17 	ldw	r4,176(sp)
80209ea4:	d9801e04 	addi	r6,sp,120
80209ea8:	b80b883a 	mov	r5,r23
80209eac:	02111540 	call	80211154 <__sprint_r>
80209eb0:	103b7a1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209eb4:	d8c02017 	ldw	r3,128(sp)
80209eb8:	dc401f17 	ldw	r17,124(sp)
80209ebc:	dd800404 	addi	r22,sp,16
80209ec0:	003e8f06 	br	80209900 <__reset+0xfa1e9900>
80209ec4:	0027883a 	mov	r19,zero
80209ec8:	003f4a06 	br	80209bf4 <__reset+0xfa1e9bf4>
80209ecc:	d9002c17 	ldw	r4,176(sp)
80209ed0:	d9801e04 	addi	r6,sp,120
80209ed4:	b80b883a 	mov	r5,r23
80209ed8:	02111540 	call	80211154 <__sprint_r>
80209edc:	103b6f1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
80209ee0:	d8c02017 	ldw	r3,128(sp)
80209ee4:	da000404 	addi	r8,sp,16
80209ee8:	003c9d06 	br	80209160 <__reset+0xfa1e9160>
80209eec:	04e7c83a 	sub	r19,zero,r19
80209ef0:	9804c03a 	cmpne	r2,r19,zero
80209ef4:	05adc83a 	sub	r22,zero,r22
80209ef8:	b0adc83a 	sub	r22,r22,r2
80209efc:	d8802917 	ldw	r2,164(sp)
80209f00:	07000b44 	movi	fp,45
80209f04:	df002785 	stb	fp,158(sp)
80209f08:	10017b16 	blt	r2,zero,8020a4f8 <___vfprintf_internal_r+0x1c64>
80209f0c:	00bfdfc4 	movi	r2,-129
80209f10:	90a4703a 	and	r18,r18,r2
80209f14:	003bb106 	br	80208ddc <__reset+0xfa1e8ddc>
80209f18:	d9003617 	ldw	r4,216(sp)
80209f1c:	d9403817 	ldw	r5,224(sp)
80209f20:	da003d15 	stw	r8,244(sp)
80209f24:	020f96c0 	call	8020f96c <__fpclassifyd>
80209f28:	da003d17 	ldw	r8,244(sp)
80209f2c:	1000f026 	beq	r2,zero,8020a2f0 <___vfprintf_internal_r+0x1a5c>
80209f30:	d9002917 	ldw	r4,164(sp)
80209f34:	05bff7c4 	movi	r22,-33
80209f38:	00bfffc4 	movi	r2,-1
80209f3c:	8dac703a 	and	r22,r17,r22
80209f40:	20820026 	beq	r4,r2,8020a744 <___vfprintf_internal_r+0x1eb0>
80209f44:	008011c4 	movi	r2,71
80209f48:	b081f726 	beq	r22,r2,8020a728 <___vfprintf_internal_r+0x1e94>
80209f4c:	d9003817 	ldw	r4,224(sp)
80209f50:	90c04014 	ori	r3,r18,256
80209f54:	d8c02b15 	stw	r3,172(sp)
80209f58:	20021516 	blt	r4,zero,8020a7b0 <___vfprintf_internal_r+0x1f1c>
80209f5c:	dcc03817 	ldw	r19,224(sp)
80209f60:	d8002a05 	stb	zero,168(sp)
80209f64:	00801984 	movi	r2,102
80209f68:	8881f926 	beq	r17,r2,8020a750 <___vfprintf_internal_r+0x1ebc>
80209f6c:	00801184 	movi	r2,70
80209f70:	88821c26 	beq	r17,r2,8020a7e4 <___vfprintf_internal_r+0x1f50>
80209f74:	00801144 	movi	r2,69
80209f78:	b081ef26 	beq	r22,r2,8020a738 <___vfprintf_internal_r+0x1ea4>
80209f7c:	d8c02917 	ldw	r3,164(sp)
80209f80:	d8802104 	addi	r2,sp,132
80209f84:	d8800315 	stw	r2,12(sp)
80209f88:	d9403617 	ldw	r5,216(sp)
80209f8c:	d8802504 	addi	r2,sp,148
80209f90:	d9002c17 	ldw	r4,176(sp)
80209f94:	d8800215 	stw	r2,8(sp)
80209f98:	d8802604 	addi	r2,sp,152
80209f9c:	d8c00015 	stw	r3,0(sp)
80209fa0:	d8800115 	stw	r2,4(sp)
80209fa4:	01c00084 	movi	r7,2
80209fa8:	980d883a 	mov	r6,r19
80209fac:	d8c03c15 	stw	r3,240(sp)
80209fb0:	da003d15 	stw	r8,244(sp)
80209fb4:	020aeb80 	call	8020aeb8 <_dtoa_r>
80209fb8:	1021883a 	mov	r16,r2
80209fbc:	008019c4 	movi	r2,103
80209fc0:	d8c03c17 	ldw	r3,240(sp)
80209fc4:	da003d17 	ldw	r8,244(sp)
80209fc8:	88817126 	beq	r17,r2,8020a590 <___vfprintf_internal_r+0x1cfc>
80209fcc:	008011c4 	movi	r2,71
80209fd0:	88829226 	beq	r17,r2,8020aa1c <___vfprintf_internal_r+0x2188>
80209fd4:	80f9883a 	add	fp,r16,r3
80209fd8:	d9003617 	ldw	r4,216(sp)
80209fdc:	000d883a 	mov	r6,zero
80209fe0:	000f883a 	mov	r7,zero
80209fe4:	980b883a 	mov	r5,r19
80209fe8:	da003d15 	stw	r8,244(sp)
80209fec:	0214dcc0 	call	80214dcc <__eqdf2>
80209ff0:	da003d17 	ldw	r8,244(sp)
80209ff4:	10018d26 	beq	r2,zero,8020a62c <___vfprintf_internal_r+0x1d98>
80209ff8:	d8802117 	ldw	r2,132(sp)
80209ffc:	1700062e 	bgeu	r2,fp,8020a018 <___vfprintf_internal_r+0x1784>
8020a000:	01000c04 	movi	r4,48
8020a004:	10c00044 	addi	r3,r2,1
8020a008:	d8c02115 	stw	r3,132(sp)
8020a00c:	11000005 	stb	r4,0(r2)
8020a010:	d8802117 	ldw	r2,132(sp)
8020a014:	173ffb36 	bltu	r2,fp,8020a004 <__reset+0xfa1ea004>
8020a018:	1405c83a 	sub	r2,r2,r16
8020a01c:	d8803315 	stw	r2,204(sp)
8020a020:	008011c4 	movi	r2,71
8020a024:	b0817626 	beq	r22,r2,8020a600 <___vfprintf_internal_r+0x1d6c>
8020a028:	00801944 	movi	r2,101
8020a02c:	1442810e 	bge	r2,r17,8020aa34 <___vfprintf_internal_r+0x21a0>
8020a030:	d8c02617 	ldw	r3,152(sp)
8020a034:	00801984 	movi	r2,102
8020a038:	d8c03215 	stw	r3,200(sp)
8020a03c:	8881fe26 	beq	r17,r2,8020a838 <___vfprintf_internal_r+0x1fa4>
8020a040:	d8c03217 	ldw	r3,200(sp)
8020a044:	d9003317 	ldw	r4,204(sp)
8020a048:	1901dd16 	blt	r3,r4,8020a7c0 <___vfprintf_internal_r+0x1f2c>
8020a04c:	9480004c 	andi	r18,r18,1
8020a050:	90022b1e 	bne	r18,zero,8020a900 <___vfprintf_internal_r+0x206c>
8020a054:	1805883a 	mov	r2,r3
8020a058:	18028016 	blt	r3,zero,8020aa5c <___vfprintf_internal_r+0x21c8>
8020a05c:	d8c03217 	ldw	r3,200(sp)
8020a060:	044019c4 	movi	r17,103
8020a064:	d8c02e15 	stw	r3,184(sp)
8020a068:	df002a07 	ldb	fp,168(sp)
8020a06c:	e001531e 	bne	fp,zero,8020a5bc <___vfprintf_internal_r+0x1d28>
8020a070:	df002783 	ldbu	fp,158(sp)
8020a074:	d8802a15 	stw	r2,168(sp)
8020a078:	dc802b17 	ldw	r18,172(sp)
8020a07c:	d8002915 	stw	zero,164(sp)
8020a080:	003bd106 	br	80208fc8 <__reset+0xfa1e8fc8>
8020a084:	d8802d17 	ldw	r2,180(sp)
8020a088:	d8c02d17 	ldw	r3,180(sp)
8020a08c:	d9002d17 	ldw	r4,180(sp)
8020a090:	10800017 	ldw	r2,0(r2)
8020a094:	18c00117 	ldw	r3,4(r3)
8020a098:	21000204 	addi	r4,r4,8
8020a09c:	d8803615 	stw	r2,216(sp)
8020a0a0:	d8c03815 	stw	r3,224(sp)
8020a0a4:	d9002d15 	stw	r4,180(sp)
8020a0a8:	003b7506 	br	80208e80 <__reset+0xfa1e8e80>
8020a0ac:	ac400007 	ldb	r17,0(r21)
8020a0b0:	003a5906 	br	80208a18 <__reset+0xfa1e8a18>
8020a0b4:	9080100c 	andi	r2,r18,64
8020a0b8:	1000a826 	beq	r2,zero,8020a35c <___vfprintf_internal_r+0x1ac8>
8020a0bc:	d9002d17 	ldw	r4,180(sp)
8020a0c0:	002d883a 	mov	r22,zero
8020a0c4:	24c0000b 	ldhu	r19,0(r4)
8020a0c8:	21000104 	addi	r4,r4,4
8020a0cc:	d9002d15 	stw	r4,180(sp)
8020a0d0:	003ccb06 	br	80209400 <__reset+0xfa1e9400>
8020a0d4:	d8c02d17 	ldw	r3,180(sp)
8020a0d8:	d9002917 	ldw	r4,164(sp)
8020a0dc:	002d883a 	mov	r22,zero
8020a0e0:	18800104 	addi	r2,r3,4
8020a0e4:	1cc00017 	ldw	r19,0(r3)
8020a0e8:	203ebb0e 	bge	r4,zero,80209bd8 <__reset+0xfa1e9bd8>
8020a0ec:	003ef106 	br	80209cb4 <__reset+0xfa1e9cb4>
8020a0f0:	9080040c 	andi	r2,r18,16
8020a0f4:	1000921e 	bne	r2,zero,8020a340 <___vfprintf_internal_r+0x1aac>
8020a0f8:	9480100c 	andi	r18,r18,64
8020a0fc:	90013926 	beq	r18,zero,8020a5e4 <___vfprintf_internal_r+0x1d50>
8020a100:	d9002d17 	ldw	r4,180(sp)
8020a104:	d9402f17 	ldw	r5,188(sp)
8020a108:	20800017 	ldw	r2,0(r4)
8020a10c:	21000104 	addi	r4,r4,4
8020a110:	d9002d15 	stw	r4,180(sp)
8020a114:	1140000d 	sth	r5,0(r2)
8020a118:	003a1606 	br	80208974 <__reset+0xfa1e8974>
8020a11c:	9080100c 	andi	r2,r18,64
8020a120:	10008026 	beq	r2,zero,8020a324 <___vfprintf_internal_r+0x1a90>
8020a124:	d8c02d17 	ldw	r3,180(sp)
8020a128:	1cc0000f 	ldh	r19,0(r3)
8020a12c:	18c00104 	addi	r3,r3,4
8020a130:	d8c02d15 	stw	r3,180(sp)
8020a134:	982dd7fa 	srai	r22,r19,31
8020a138:	b005883a 	mov	r2,r22
8020a13c:	003b1f06 	br	80208dbc <__reset+0xfa1e8dbc>
8020a140:	9080100c 	andi	r2,r18,64
8020a144:	d8002785 	stb	zero,158(sp)
8020a148:	10008a1e 	bne	r2,zero,8020a374 <___vfprintf_internal_r+0x1ae0>
8020a14c:	d9402d17 	ldw	r5,180(sp)
8020a150:	d8c02917 	ldw	r3,164(sp)
8020a154:	002d883a 	mov	r22,zero
8020a158:	28800104 	addi	r2,r5,4
8020a15c:	2cc00017 	ldw	r19,0(r5)
8020a160:	183e4b0e 	bge	r3,zero,80209a90 <__reset+0xfa1e9a90>
8020a164:	9d86b03a 	or	r3,r19,r22
8020a168:	d8802d15 	stw	r2,180(sp)
8020a16c:	183e4c1e 	bne	r3,zero,80209aa0 <__reset+0xfa1e9aa0>
8020a170:	0039883a 	mov	fp,zero
8020a174:	0005883a 	mov	r2,zero
8020a178:	003d4006 	br	8020967c <__reset+0xfa1e967c>
8020a17c:	016008b4 	movhi	r5,32802
8020a180:	2973fd84 	addi	r5,r5,-12298
8020a184:	d9402b15 	stw	r5,172(sp)
8020a188:	d9402b17 	ldw	r5,172(sp)
8020a18c:	1c47883a 	add	r3,r3,r17
8020a190:	10800044 	addi	r2,r2,1
8020a194:	41400015 	stw	r5,0(r8)
8020a198:	44400115 	stw	r17,4(r8)
8020a19c:	d8c02015 	stw	r3,128(sp)
8020a1a0:	d8801f15 	stw	r2,124(sp)
8020a1a4:	010001c4 	movi	r4,7
8020a1a8:	20bec816 	blt	r4,r2,80209ccc <__reset+0xfa1e9ccc>
8020a1ac:	42000204 	addi	r8,r8,8
8020a1b0:	003ecd06 	br	80209ce8 <__reset+0xfa1e9ce8>
8020a1b4:	d9002917 	ldw	r4,164(sp)
8020a1b8:	d8002785 	stb	zero,158(sp)
8020a1bc:	203d2d16 	blt	r4,zero,80209674 <__reset+0xfa1e9674>
8020a1c0:	00bfdfc4 	movi	r2,-129
8020a1c4:	90a4703a 	and	r18,r18,r2
8020a1c8:	003a9106 	br	80208c10 <__reset+0xfa1e8c10>
8020a1cc:	012008b4 	movhi	r4,32802
8020a1d0:	2133fd84 	addi	r4,r4,-12298
8020a1d4:	d9002b15 	stw	r4,172(sp)
8020a1d8:	003c0c06 	br	8020920c <__reset+0xfa1e920c>
8020a1dc:	d9002c17 	ldw	r4,176(sp)
8020a1e0:	d9801e04 	addi	r6,sp,120
8020a1e4:	b80b883a 	mov	r5,r23
8020a1e8:	02111540 	call	80211154 <__sprint_r>
8020a1ec:	103aab1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
8020a1f0:	d8c02017 	ldw	r3,128(sp)
8020a1f4:	da000404 	addi	r8,sp,16
8020a1f8:	003d4106 	br	80209700 <__reset+0xfa1e9700>
8020a1fc:	d8801f17 	ldw	r2,124(sp)
8020a200:	016008b4 	movhi	r5,32802
8020a204:	01000044 	movi	r4,1
8020a208:	18c00044 	addi	r3,r3,1
8020a20c:	10800044 	addi	r2,r2,1
8020a210:	2973f504 	addi	r5,r5,-12332
8020a214:	41000115 	stw	r4,4(r8)
8020a218:	41400015 	stw	r5,0(r8)
8020a21c:	d8c02015 	stw	r3,128(sp)
8020a220:	d8801f15 	stw	r2,124(sp)
8020a224:	010001c4 	movi	r4,7
8020a228:	20805c16 	blt	r4,r2,8020a39c <___vfprintf_internal_r+0x1b08>
8020a22c:	42000204 	addi	r8,r8,8
8020a230:	8800041e 	bne	r17,zero,8020a244 <___vfprintf_internal_r+0x19b0>
8020a234:	d8803317 	ldw	r2,204(sp)
8020a238:	1000021e 	bne	r2,zero,8020a244 <___vfprintf_internal_r+0x19b0>
8020a23c:	9080004c 	andi	r2,r18,1
8020a240:	103c0926 	beq	r2,zero,80209268 <__reset+0xfa1e9268>
8020a244:	d9003717 	ldw	r4,220(sp)
8020a248:	d8801f17 	ldw	r2,124(sp)
8020a24c:	d9403417 	ldw	r5,208(sp)
8020a250:	20c7883a 	add	r3,r4,r3
8020a254:	10800044 	addi	r2,r2,1
8020a258:	41000115 	stw	r4,4(r8)
8020a25c:	41400015 	stw	r5,0(r8)
8020a260:	d8c02015 	stw	r3,128(sp)
8020a264:	d8801f15 	stw	r2,124(sp)
8020a268:	010001c4 	movi	r4,7
8020a26c:	20812116 	blt	r4,r2,8020a6f4 <___vfprintf_internal_r+0x1e60>
8020a270:	42000204 	addi	r8,r8,8
8020a274:	0463c83a 	sub	r17,zero,r17
8020a278:	0440730e 	bge	zero,r17,8020a448 <___vfprintf_internal_r+0x1bb4>
8020a27c:	05800404 	movi	r22,16
8020a280:	b440860e 	bge	r22,r17,8020a49c <___vfprintf_internal_r+0x1c08>
8020a284:	016008b4 	movhi	r5,32802
8020a288:	2973fd84 	addi	r5,r5,-12298
8020a28c:	d9402b15 	stw	r5,172(sp)
8020a290:	070001c4 	movi	fp,7
8020a294:	dcc02c17 	ldw	r19,176(sp)
8020a298:	00000306 	br	8020a2a8 <___vfprintf_internal_r+0x1a14>
8020a29c:	42000204 	addi	r8,r8,8
8020a2a0:	8c7ffc04 	addi	r17,r17,-16
8020a2a4:	b440800e 	bge	r22,r17,8020a4a8 <___vfprintf_internal_r+0x1c14>
8020a2a8:	18c00404 	addi	r3,r3,16
8020a2ac:	10800044 	addi	r2,r2,1
8020a2b0:	45000015 	stw	r20,0(r8)
8020a2b4:	45800115 	stw	r22,4(r8)
8020a2b8:	d8c02015 	stw	r3,128(sp)
8020a2bc:	d8801f15 	stw	r2,124(sp)
8020a2c0:	e0bff60e 	bge	fp,r2,8020a29c <__reset+0xfa1ea29c>
8020a2c4:	d9801e04 	addi	r6,sp,120
8020a2c8:	b80b883a 	mov	r5,r23
8020a2cc:	9809883a 	mov	r4,r19
8020a2d0:	02111540 	call	80211154 <__sprint_r>
8020a2d4:	103a711e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
8020a2d8:	d8c02017 	ldw	r3,128(sp)
8020a2dc:	d8801f17 	ldw	r2,124(sp)
8020a2e0:	da000404 	addi	r8,sp,16
8020a2e4:	003fee06 	br	8020a2a0 <__reset+0xfa1ea2a0>
8020a2e8:	00bfffc4 	movi	r2,-1
8020a2ec:	003a6f06 	br	80208cac <__reset+0xfa1e8cac>
8020a2f0:	008011c4 	movi	r2,71
8020a2f4:	1440b816 	blt	r2,r17,8020a5d8 <___vfprintf_internal_r+0x1d44>
8020a2f8:	042008b4 	movhi	r16,32802
8020a2fc:	8433e704 	addi	r16,r16,-12388
8020a300:	00c000c4 	movi	r3,3
8020a304:	00bfdfc4 	movi	r2,-129
8020a308:	d8c02a15 	stw	r3,168(sp)
8020a30c:	90a4703a 	and	r18,r18,r2
8020a310:	df002783 	ldbu	fp,158(sp)
8020a314:	d8c02e15 	stw	r3,184(sp)
8020a318:	d8002915 	stw	zero,164(sp)
8020a31c:	d8003215 	stw	zero,200(sp)
8020a320:	003b2906 	br	80208fc8 <__reset+0xfa1e8fc8>
8020a324:	d9002d17 	ldw	r4,180(sp)
8020a328:	24c00017 	ldw	r19,0(r4)
8020a32c:	21000104 	addi	r4,r4,4
8020a330:	d9002d15 	stw	r4,180(sp)
8020a334:	982dd7fa 	srai	r22,r19,31
8020a338:	b005883a 	mov	r2,r22
8020a33c:	003a9f06 	br	80208dbc <__reset+0xfa1e8dbc>
8020a340:	d9402d17 	ldw	r5,180(sp)
8020a344:	d8c02f17 	ldw	r3,188(sp)
8020a348:	28800017 	ldw	r2,0(r5)
8020a34c:	29400104 	addi	r5,r5,4
8020a350:	d9402d15 	stw	r5,180(sp)
8020a354:	10c00015 	stw	r3,0(r2)
8020a358:	00398606 	br	80208974 <__reset+0xfa1e8974>
8020a35c:	d9402d17 	ldw	r5,180(sp)
8020a360:	002d883a 	mov	r22,zero
8020a364:	2cc00017 	ldw	r19,0(r5)
8020a368:	29400104 	addi	r5,r5,4
8020a36c:	d9402d15 	stw	r5,180(sp)
8020a370:	003c2306 	br	80209400 <__reset+0xfa1e9400>
8020a374:	d8c02d17 	ldw	r3,180(sp)
8020a378:	d9002917 	ldw	r4,164(sp)
8020a37c:	002d883a 	mov	r22,zero
8020a380:	18800104 	addi	r2,r3,4
8020a384:	1cc0000b 	ldhu	r19,0(r3)
8020a388:	203dc10e 	bge	r4,zero,80209a90 <__reset+0xfa1e9a90>
8020a38c:	003f7506 	br	8020a164 <__reset+0xfa1ea164>
8020a390:	042008b4 	movhi	r16,32802
8020a394:	8433e504 	addi	r16,r16,-12396
8020a398:	003acc06 	br	80208ecc <__reset+0xfa1e8ecc>
8020a39c:	d9002c17 	ldw	r4,176(sp)
8020a3a0:	d9801e04 	addi	r6,sp,120
8020a3a4:	b80b883a 	mov	r5,r23
8020a3a8:	02111540 	call	80211154 <__sprint_r>
8020a3ac:	103a3b1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
8020a3b0:	dc402617 	ldw	r17,152(sp)
8020a3b4:	d8c02017 	ldw	r3,128(sp)
8020a3b8:	da000404 	addi	r8,sp,16
8020a3bc:	003f9c06 	br	8020a230 <__reset+0xfa1ea230>
8020a3c0:	ac400043 	ldbu	r17,1(r21)
8020a3c4:	94800814 	ori	r18,r18,32
8020a3c8:	ad400044 	addi	r21,r21,1
8020a3cc:	8c403fcc 	andi	r17,r17,255
8020a3d0:	8c40201c 	xori	r17,r17,128
8020a3d4:	8c7fe004 	addi	r17,r17,-128
8020a3d8:	00398f06 	br	80208a18 <__reset+0xfa1e8a18>
8020a3dc:	d8c02d15 	stw	r3,180(sp)
8020a3e0:	0039883a 	mov	fp,zero
8020a3e4:	003e3506 	br	80209cbc <__reset+0xfa1e9cbc>
8020a3e8:	d9002c17 	ldw	r4,176(sp)
8020a3ec:	d9801e04 	addi	r6,sp,120
8020a3f0:	b80b883a 	mov	r5,r23
8020a3f4:	02111540 	call	80211154 <__sprint_r>
8020a3f8:	103a281e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
8020a3fc:	d8c02017 	ldw	r3,128(sp)
8020a400:	da000404 	addi	r8,sp,16
8020a404:	003cd006 	br	80209748 <__reset+0xfa1e9748>
8020a408:	8009883a 	mov	r4,r16
8020a40c:	da003d15 	stw	r8,244(sp)
8020a410:	02066240 	call	80206624 <strlen>
8020a414:	d8802e15 	stw	r2,184(sp)
8020a418:	da003d17 	ldw	r8,244(sp)
8020a41c:	103c340e 	bge	r2,zero,802094f0 <__reset+0xfa1e94f0>
8020a420:	0005883a 	mov	r2,zero
8020a424:	003c3206 	br	802094f0 <__reset+0xfa1e94f0>
8020a428:	d9002c17 	ldw	r4,176(sp)
8020a42c:	d9801e04 	addi	r6,sp,120
8020a430:	b80b883a 	mov	r5,r23
8020a434:	02111540 	call	80211154 <__sprint_r>
8020a438:	103a181e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
8020a43c:	d8c02017 	ldw	r3,128(sp)
8020a440:	d8801f17 	ldw	r2,124(sp)
8020a444:	da000404 	addi	r8,sp,16
8020a448:	d9403317 	ldw	r5,204(sp)
8020a44c:	10800044 	addi	r2,r2,1
8020a450:	44000015 	stw	r16,0(r8)
8020a454:	28c7883a 	add	r3,r5,r3
8020a458:	003b7d06 	br	80209250 <__reset+0xfa1e9250>
8020a45c:	012008b4 	movhi	r4,32802
8020a460:	21340184 	addi	r4,r4,-12282
8020a464:	d9003515 	stw	r4,212(sp)
8020a468:	003b1406 	br	802090bc <__reset+0xfa1e90bc>
8020a46c:	013fffc4 	movi	r4,-1
8020a470:	003a3506 	br	80208d48 <__reset+0xfa1e8d48>
8020a474:	0023883a 	mov	r17,zero
8020a478:	003d9d06 	br	80209af0 <__reset+0xfa1e9af0>
8020a47c:	d9002c17 	ldw	r4,176(sp)
8020a480:	d9801e04 	addi	r6,sp,120
8020a484:	b80b883a 	mov	r5,r23
8020a488:	02111540 	call	80211154 <__sprint_r>
8020a48c:	103a031e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
8020a490:	d8c02017 	ldw	r3,128(sp)
8020a494:	da000404 	addi	r8,sp,16
8020a498:	003d9406 	br	80209aec <__reset+0xfa1e9aec>
8020a49c:	012008b4 	movhi	r4,32802
8020a4a0:	2133fd84 	addi	r4,r4,-12298
8020a4a4:	d9002b15 	stw	r4,172(sp)
8020a4a8:	d9002b17 	ldw	r4,172(sp)
8020a4ac:	1c47883a 	add	r3,r3,r17
8020a4b0:	10800044 	addi	r2,r2,1
8020a4b4:	41000015 	stw	r4,0(r8)
8020a4b8:	44400115 	stw	r17,4(r8)
8020a4bc:	d8c02015 	stw	r3,128(sp)
8020a4c0:	d8801f15 	stw	r2,124(sp)
8020a4c4:	010001c4 	movi	r4,7
8020a4c8:	20bfd716 	blt	r4,r2,8020a428 <__reset+0xfa1ea428>
8020a4cc:	42000204 	addi	r8,r8,8
8020a4d0:	003fdd06 	br	8020a448 <__reset+0xfa1ea448>
8020a4d4:	d9002c17 	ldw	r4,176(sp)
8020a4d8:	d9801e04 	addi	r6,sp,120
8020a4dc:	b80b883a 	mov	r5,r23
8020a4e0:	02111540 	call	80211154 <__sprint_r>
8020a4e4:	1039ed1e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
8020a4e8:	d8802617 	ldw	r2,152(sp)
8020a4ec:	d8c02017 	ldw	r3,128(sp)
8020a4f0:	da000404 	addi	r8,sp,16
8020a4f4:	003e1006 	br	80209d38 <__reset+0xfa1e9d38>
8020a4f8:	00800044 	movi	r2,1
8020a4fc:	10803fcc 	andi	r2,r2,255
8020a500:	00c00044 	movi	r3,1
8020a504:	10fa3526 	beq	r2,r3,80208ddc <__reset+0xfa1e8ddc>
8020a508:	00c00084 	movi	r3,2
8020a50c:	10fbcb26 	beq	r2,r3,8020943c <__reset+0xfa1e943c>
8020a510:	003a8f06 	br	80208f50 <__reset+0xfa1e8f50>
8020a514:	012008b4 	movhi	r4,32802
8020a518:	21340184 	addi	r4,r4,-12282
8020a51c:	d9003515 	stw	r4,212(sp)
8020a520:	003b7606 	br	802092fc <__reset+0xfa1e92fc>
8020a524:	d8802917 	ldw	r2,164(sp)
8020a528:	00c00184 	movi	r3,6
8020a52c:	1880012e 	bgeu	r3,r2,8020a534 <___vfprintf_internal_r+0x1ca0>
8020a530:	1805883a 	mov	r2,r3
8020a534:	d8802e15 	stw	r2,184(sp)
8020a538:	1000ef16 	blt	r2,zero,8020a8f8 <___vfprintf_internal_r+0x2064>
8020a53c:	042008b4 	movhi	r16,32802
8020a540:	d8802a15 	stw	r2,168(sp)
8020a544:	dcc02d15 	stw	r19,180(sp)
8020a548:	d8002915 	stw	zero,164(sp)
8020a54c:	d8003215 	stw	zero,200(sp)
8020a550:	8433f304 	addi	r16,r16,-12340
8020a554:	0039883a 	mov	fp,zero
8020a558:	003aa206 	br	80208fe4 <__reset+0xfa1e8fe4>
8020a55c:	0021883a 	mov	r16,zero
8020a560:	003e0706 	br	80209d80 <__reset+0xfa1e9d80>
8020a564:	d9002c17 	ldw	r4,176(sp)
8020a568:	d9801e04 	addi	r6,sp,120
8020a56c:	b80b883a 	mov	r5,r23
8020a570:	02111540 	call	80211154 <__sprint_r>
8020a574:	1039c91e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
8020a578:	d8802617 	ldw	r2,152(sp)
8020a57c:	d9403317 	ldw	r5,204(sp)
8020a580:	d8c02017 	ldw	r3,128(sp)
8020a584:	da000404 	addi	r8,sp,16
8020a588:	2885c83a 	sub	r2,r5,r2
8020a58c:	003dfb06 	br	80209d7c <__reset+0xfa1e9d7c>
8020a590:	9080004c 	andi	r2,r18,1
8020a594:	103e8f1e 	bne	r2,zero,80209fd4 <__reset+0xfa1e9fd4>
8020a598:	d8802117 	ldw	r2,132(sp)
8020a59c:	003e9e06 	br	8020a018 <__reset+0xfa1ea018>
8020a5a0:	1025883a 	mov	r18,r2
8020a5a4:	0039883a 	mov	fp,zero
8020a5a8:	00800084 	movi	r2,2
8020a5ac:	003fd306 	br	8020a4fc <__reset+0xfa1ea4fc>
8020a5b0:	07000b44 	movi	fp,45
8020a5b4:	df002785 	stb	fp,158(sp)
8020a5b8:	003a4006 	br	80208ebc <__reset+0xfa1e8ebc>
8020a5bc:	00c00b44 	movi	r3,45
8020a5c0:	d8c02785 	stb	r3,158(sp)
8020a5c4:	d8802a15 	stw	r2,168(sp)
8020a5c8:	dc802b17 	ldw	r18,172(sp)
8020a5cc:	d8002915 	stw	zero,164(sp)
8020a5d0:	07000b44 	movi	fp,45
8020a5d4:	003a8006 	br	80208fd8 <__reset+0xfa1e8fd8>
8020a5d8:	042008b4 	movhi	r16,32802
8020a5dc:	8433e804 	addi	r16,r16,-12384
8020a5e0:	003f4706 	br	8020a300 <__reset+0xfa1ea300>
8020a5e4:	d8c02d17 	ldw	r3,180(sp)
8020a5e8:	d9002f17 	ldw	r4,188(sp)
8020a5ec:	18800017 	ldw	r2,0(r3)
8020a5f0:	18c00104 	addi	r3,r3,4
8020a5f4:	d8c02d15 	stw	r3,180(sp)
8020a5f8:	11000015 	stw	r4,0(r2)
8020a5fc:	0038dd06 	br	80208974 <__reset+0xfa1e8974>
8020a600:	dd802617 	ldw	r22,152(sp)
8020a604:	00bfff44 	movi	r2,-3
8020a608:	b0801c16 	blt	r22,r2,8020a67c <___vfprintf_internal_r+0x1de8>
8020a60c:	d9402917 	ldw	r5,164(sp)
8020a610:	2d801a16 	blt	r5,r22,8020a67c <___vfprintf_internal_r+0x1de8>
8020a614:	dd803215 	stw	r22,200(sp)
8020a618:	003e8906 	br	8020a040 <__reset+0xfa1ea040>
8020a61c:	012008b4 	movhi	r4,32802
8020a620:	2133fd84 	addi	r4,r4,-12298
8020a624:	d9002b15 	stw	r4,172(sp)
8020a628:	003c9106 	br	80209870 <__reset+0xfa1e9870>
8020a62c:	e005883a 	mov	r2,fp
8020a630:	003e7906 	br	8020a018 <__reset+0xfa1ea018>
8020a634:	d9402917 	ldw	r5,164(sp)
8020a638:	df002783 	ldbu	fp,158(sp)
8020a63c:	dcc02d15 	stw	r19,180(sp)
8020a640:	d9402a15 	stw	r5,168(sp)
8020a644:	d9402e15 	stw	r5,184(sp)
8020a648:	d8002915 	stw	zero,164(sp)
8020a64c:	d8003215 	stw	zero,200(sp)
8020a650:	003a5d06 	br	80208fc8 <__reset+0xfa1e8fc8>
8020a654:	9080004c 	andi	r2,r18,1
8020a658:	0039883a 	mov	fp,zero
8020a65c:	10000426 	beq	r2,zero,8020a670 <___vfprintf_internal_r+0x1ddc>
8020a660:	00800c04 	movi	r2,48
8020a664:	dc001dc4 	addi	r16,sp,119
8020a668:	d8801dc5 	stb	r2,119(sp)
8020a66c:	003b8006 	br	80209470 <__reset+0xfa1e9470>
8020a670:	d8002e15 	stw	zero,184(sp)
8020a674:	dc001e04 	addi	r16,sp,120
8020a678:	003a4d06 	br	80208fb0 <__reset+0xfa1e8fb0>
8020a67c:	8c7fff84 	addi	r17,r17,-2
8020a680:	b5bfffc4 	addi	r22,r22,-1
8020a684:	dd802615 	stw	r22,152(sp)
8020a688:	dc4022c5 	stb	r17,139(sp)
8020a68c:	b000bf16 	blt	r22,zero,8020a98c <___vfprintf_internal_r+0x20f8>
8020a690:	00800ac4 	movi	r2,43
8020a694:	d8802305 	stb	r2,140(sp)
8020a698:	00800244 	movi	r2,9
8020a69c:	15807016 	blt	r2,r22,8020a860 <___vfprintf_internal_r+0x1fcc>
8020a6a0:	00800c04 	movi	r2,48
8020a6a4:	b5800c04 	addi	r22,r22,48
8020a6a8:	d8802345 	stb	r2,141(sp)
8020a6ac:	dd802385 	stb	r22,142(sp)
8020a6b0:	d88023c4 	addi	r2,sp,143
8020a6b4:	df0022c4 	addi	fp,sp,139
8020a6b8:	d8c03317 	ldw	r3,204(sp)
8020a6bc:	1739c83a 	sub	fp,r2,fp
8020a6c0:	d9003317 	ldw	r4,204(sp)
8020a6c4:	e0c7883a 	add	r3,fp,r3
8020a6c8:	df003a15 	stw	fp,232(sp)
8020a6cc:	d8c02e15 	stw	r3,184(sp)
8020a6d0:	00800044 	movi	r2,1
8020a6d4:	1100b30e 	bge	r2,r4,8020a9a4 <___vfprintf_internal_r+0x2110>
8020a6d8:	d8c02e17 	ldw	r3,184(sp)
8020a6dc:	18c00044 	addi	r3,r3,1
8020a6e0:	d8c02e15 	stw	r3,184(sp)
8020a6e4:	1805883a 	mov	r2,r3
8020a6e8:	1800ac16 	blt	r3,zero,8020a99c <___vfprintf_internal_r+0x2108>
8020a6ec:	d8003215 	stw	zero,200(sp)
8020a6f0:	003e5d06 	br	8020a068 <__reset+0xfa1ea068>
8020a6f4:	d9002c17 	ldw	r4,176(sp)
8020a6f8:	d9801e04 	addi	r6,sp,120
8020a6fc:	b80b883a 	mov	r5,r23
8020a700:	02111540 	call	80211154 <__sprint_r>
8020a704:	1039651e 	bne	r2,zero,80208c9c <__reset+0xfa1e8c9c>
8020a708:	dc402617 	ldw	r17,152(sp)
8020a70c:	d8c02017 	ldw	r3,128(sp)
8020a710:	d8801f17 	ldw	r2,124(sp)
8020a714:	da000404 	addi	r8,sp,16
8020a718:	003ed606 	br	8020a274 <__reset+0xfa1ea274>
8020a71c:	582b883a 	mov	r21,r11
8020a720:	d8002915 	stw	zero,164(sp)
8020a724:	0038bd06 	br	80208a1c <__reset+0xfa1e8a1c>
8020a728:	d8802917 	ldw	r2,164(sp)
8020a72c:	103e071e 	bne	r2,zero,80209f4c <__reset+0xfa1e9f4c>
8020a730:	dc002915 	stw	r16,164(sp)
8020a734:	003e0506 	br	80209f4c <__reset+0xfa1e9f4c>
8020a738:	d9002917 	ldw	r4,164(sp)
8020a73c:	20c00044 	addi	r3,r4,1
8020a740:	003e0f06 	br	80209f80 <__reset+0xfa1e9f80>
8020a744:	01400184 	movi	r5,6
8020a748:	d9402915 	stw	r5,164(sp)
8020a74c:	003dff06 	br	80209f4c <__reset+0xfa1e9f4c>
8020a750:	d8802104 	addi	r2,sp,132
8020a754:	d8800315 	stw	r2,12(sp)
8020a758:	d8802504 	addi	r2,sp,148
8020a75c:	d8800215 	stw	r2,8(sp)
8020a760:	d8802604 	addi	r2,sp,152
8020a764:	d8800115 	stw	r2,4(sp)
8020a768:	d8802917 	ldw	r2,164(sp)
8020a76c:	d9403617 	ldw	r5,216(sp)
8020a770:	d9002c17 	ldw	r4,176(sp)
8020a774:	d8800015 	stw	r2,0(sp)
8020a778:	01c000c4 	movi	r7,3
8020a77c:	980d883a 	mov	r6,r19
8020a780:	da003d15 	stw	r8,244(sp)
8020a784:	020aeb80 	call	8020aeb8 <_dtoa_r>
8020a788:	d8c02917 	ldw	r3,164(sp)
8020a78c:	da003d17 	ldw	r8,244(sp)
8020a790:	1021883a 	mov	r16,r2
8020a794:	10f9883a 	add	fp,r2,r3
8020a798:	81000007 	ldb	r4,0(r16)
8020a79c:	00800c04 	movi	r2,48
8020a7a0:	20805e26 	beq	r4,r2,8020a91c <___vfprintf_internal_r+0x2088>
8020a7a4:	d8c02617 	ldw	r3,152(sp)
8020a7a8:	e0f9883a 	add	fp,fp,r3
8020a7ac:	003e0a06 	br	80209fd8 <__reset+0xfa1e9fd8>
8020a7b0:	00c00b44 	movi	r3,45
8020a7b4:	24e0003c 	xorhi	r19,r4,32768
8020a7b8:	d8c02a05 	stb	r3,168(sp)
8020a7bc:	003de906 	br	80209f64 <__reset+0xfa1e9f64>
8020a7c0:	d8c03217 	ldw	r3,200(sp)
8020a7c4:	00c07a0e 	bge	zero,r3,8020a9b0 <___vfprintf_internal_r+0x211c>
8020a7c8:	00800044 	movi	r2,1
8020a7cc:	d9003317 	ldw	r4,204(sp)
8020a7d0:	1105883a 	add	r2,r2,r4
8020a7d4:	d8802e15 	stw	r2,184(sp)
8020a7d8:	10004e16 	blt	r2,zero,8020a914 <___vfprintf_internal_r+0x2080>
8020a7dc:	044019c4 	movi	r17,103
8020a7e0:	003e2106 	br	8020a068 <__reset+0xfa1ea068>
8020a7e4:	d9002917 	ldw	r4,164(sp)
8020a7e8:	d8802104 	addi	r2,sp,132
8020a7ec:	d8800315 	stw	r2,12(sp)
8020a7f0:	d9000015 	stw	r4,0(sp)
8020a7f4:	d8802504 	addi	r2,sp,148
8020a7f8:	d9403617 	ldw	r5,216(sp)
8020a7fc:	d9002c17 	ldw	r4,176(sp)
8020a800:	d8800215 	stw	r2,8(sp)
8020a804:	d8802604 	addi	r2,sp,152
8020a808:	d8800115 	stw	r2,4(sp)
8020a80c:	01c000c4 	movi	r7,3
8020a810:	980d883a 	mov	r6,r19
8020a814:	da003d15 	stw	r8,244(sp)
8020a818:	020aeb80 	call	8020aeb8 <_dtoa_r>
8020a81c:	d8c02917 	ldw	r3,164(sp)
8020a820:	da003d17 	ldw	r8,244(sp)
8020a824:	1021883a 	mov	r16,r2
8020a828:	00801184 	movi	r2,70
8020a82c:	80f9883a 	add	fp,r16,r3
8020a830:	88bfd926 	beq	r17,r2,8020a798 <__reset+0xfa1ea798>
8020a834:	003de806 	br	80209fd8 <__reset+0xfa1e9fd8>
8020a838:	d9002917 	ldw	r4,164(sp)
8020a83c:	00c04d0e 	bge	zero,r3,8020a974 <___vfprintf_internal_r+0x20e0>
8020a840:	2000441e 	bne	r4,zero,8020a954 <___vfprintf_internal_r+0x20c0>
8020a844:	9480004c 	andi	r18,r18,1
8020a848:	9000421e 	bne	r18,zero,8020a954 <___vfprintf_internal_r+0x20c0>
8020a84c:	1805883a 	mov	r2,r3
8020a850:	18007016 	blt	r3,zero,8020aa14 <___vfprintf_internal_r+0x2180>
8020a854:	d8c03217 	ldw	r3,200(sp)
8020a858:	d8c02e15 	stw	r3,184(sp)
8020a85c:	003e0206 	br	8020a068 <__reset+0xfa1ea068>
8020a860:	df0022c4 	addi	fp,sp,139
8020a864:	dc002915 	stw	r16,164(sp)
8020a868:	4027883a 	mov	r19,r8
8020a86c:	e021883a 	mov	r16,fp
8020a870:	b009883a 	mov	r4,r22
8020a874:	01400284 	movi	r5,10
8020a878:	0213b080 	call	80213b08 <__modsi3>
8020a87c:	10800c04 	addi	r2,r2,48
8020a880:	843fffc4 	addi	r16,r16,-1
8020a884:	b009883a 	mov	r4,r22
8020a888:	01400284 	movi	r5,10
8020a88c:	80800005 	stb	r2,0(r16)
8020a890:	0213a840 	call	80213a84 <__divsi3>
8020a894:	102d883a 	mov	r22,r2
8020a898:	00800244 	movi	r2,9
8020a89c:	15bff416 	blt	r2,r22,8020a870 <__reset+0xfa1ea870>
8020a8a0:	9811883a 	mov	r8,r19
8020a8a4:	b0800c04 	addi	r2,r22,48
8020a8a8:	8027883a 	mov	r19,r16
8020a8ac:	997fffc4 	addi	r5,r19,-1
8020a8b0:	98bfffc5 	stb	r2,-1(r19)
8020a8b4:	dc002917 	ldw	r16,164(sp)
8020a8b8:	2f006a2e 	bgeu	r5,fp,8020aa64 <___vfprintf_internal_r+0x21d0>
8020a8bc:	d9c02384 	addi	r7,sp,142
8020a8c0:	3ccfc83a 	sub	r7,r7,r19
8020a8c4:	d9002344 	addi	r4,sp,141
8020a8c8:	e1cf883a 	add	r7,fp,r7
8020a8cc:	00000106 	br	8020a8d4 <___vfprintf_internal_r+0x2040>
8020a8d0:	28800003 	ldbu	r2,0(r5)
8020a8d4:	20800005 	stb	r2,0(r4)
8020a8d8:	21000044 	addi	r4,r4,1
8020a8dc:	29400044 	addi	r5,r5,1
8020a8e0:	393ffb1e 	bne	r7,r4,8020a8d0 <__reset+0xfa1ea8d0>
8020a8e4:	d8802304 	addi	r2,sp,140
8020a8e8:	14c5c83a 	sub	r2,r2,r19
8020a8ec:	d8c02344 	addi	r3,sp,141
8020a8f0:	1885883a 	add	r2,r3,r2
8020a8f4:	003f7006 	br	8020a6b8 <__reset+0xfa1ea6b8>
8020a8f8:	0005883a 	mov	r2,zero
8020a8fc:	003f0f06 	br	8020a53c <__reset+0xfa1ea53c>
8020a900:	d8c03217 	ldw	r3,200(sp)
8020a904:	18c00044 	addi	r3,r3,1
8020a908:	d8c02e15 	stw	r3,184(sp)
8020a90c:	1805883a 	mov	r2,r3
8020a910:	183fb20e 	bge	r3,zero,8020a7dc <__reset+0xfa1ea7dc>
8020a914:	0005883a 	mov	r2,zero
8020a918:	003fb006 	br	8020a7dc <__reset+0xfa1ea7dc>
8020a91c:	d9003617 	ldw	r4,216(sp)
8020a920:	000d883a 	mov	r6,zero
8020a924:	000f883a 	mov	r7,zero
8020a928:	980b883a 	mov	r5,r19
8020a92c:	d8c03c15 	stw	r3,240(sp)
8020a930:	da003d15 	stw	r8,244(sp)
8020a934:	0214dcc0 	call	80214dcc <__eqdf2>
8020a938:	d8c03c17 	ldw	r3,240(sp)
8020a93c:	da003d17 	ldw	r8,244(sp)
8020a940:	103f9826 	beq	r2,zero,8020a7a4 <__reset+0xfa1ea7a4>
8020a944:	00800044 	movi	r2,1
8020a948:	10c7c83a 	sub	r3,r2,r3
8020a94c:	d8c02615 	stw	r3,152(sp)
8020a950:	003f9506 	br	8020a7a8 <__reset+0xfa1ea7a8>
8020a954:	d9002917 	ldw	r4,164(sp)
8020a958:	d8c03217 	ldw	r3,200(sp)
8020a95c:	20800044 	addi	r2,r4,1
8020a960:	1885883a 	add	r2,r3,r2
8020a964:	d8802e15 	stw	r2,184(sp)
8020a968:	103dbf0e 	bge	r2,zero,8020a068 <__reset+0xfa1ea068>
8020a96c:	0005883a 	mov	r2,zero
8020a970:	003dbd06 	br	8020a068 <__reset+0xfa1ea068>
8020a974:	2000211e 	bne	r4,zero,8020a9fc <___vfprintf_internal_r+0x2168>
8020a978:	9480004c 	andi	r18,r18,1
8020a97c:	90001f1e 	bne	r18,zero,8020a9fc <___vfprintf_internal_r+0x2168>
8020a980:	00800044 	movi	r2,1
8020a984:	d8802e15 	stw	r2,184(sp)
8020a988:	003db706 	br	8020a068 <__reset+0xfa1ea068>
8020a98c:	00800b44 	movi	r2,45
8020a990:	05adc83a 	sub	r22,zero,r22
8020a994:	d8802305 	stb	r2,140(sp)
8020a998:	003f3f06 	br	8020a698 <__reset+0xfa1ea698>
8020a99c:	0005883a 	mov	r2,zero
8020a9a0:	003f5206 	br	8020a6ec <__reset+0xfa1ea6ec>
8020a9a4:	90a4703a 	and	r18,r18,r2
8020a9a8:	903f4e26 	beq	r18,zero,8020a6e4 <__reset+0xfa1ea6e4>
8020a9ac:	003f4a06 	br	8020a6d8 <__reset+0xfa1ea6d8>
8020a9b0:	00800084 	movi	r2,2
8020a9b4:	10c5c83a 	sub	r2,r2,r3
8020a9b8:	003f8406 	br	8020a7cc <__reset+0xfa1ea7cc>
8020a9bc:	d8802d17 	ldw	r2,180(sp)
8020a9c0:	d9002d17 	ldw	r4,180(sp)
8020a9c4:	ac400043 	ldbu	r17,1(r21)
8020a9c8:	10800017 	ldw	r2,0(r2)
8020a9cc:	582b883a 	mov	r21,r11
8020a9d0:	d8802915 	stw	r2,164(sp)
8020a9d4:	20800104 	addi	r2,r4,4
8020a9d8:	d9002917 	ldw	r4,164(sp)
8020a9dc:	d8802d15 	stw	r2,180(sp)
8020a9e0:	203e7a0e 	bge	r4,zero,8020a3cc <__reset+0xfa1ea3cc>
8020a9e4:	8c403fcc 	andi	r17,r17,255
8020a9e8:	00bfffc4 	movi	r2,-1
8020a9ec:	8c40201c 	xori	r17,r17,128
8020a9f0:	d8802915 	stw	r2,164(sp)
8020a9f4:	8c7fe004 	addi	r17,r17,-128
8020a9f8:	00380706 	br	80208a18 <__reset+0xfa1e8a18>
8020a9fc:	d8c02917 	ldw	r3,164(sp)
8020aa00:	18c00084 	addi	r3,r3,2
8020aa04:	d8c02e15 	stw	r3,184(sp)
8020aa08:	1805883a 	mov	r2,r3
8020aa0c:	183d960e 	bge	r3,zero,8020a068 <__reset+0xfa1ea068>
8020aa10:	003fd606 	br	8020a96c <__reset+0xfa1ea96c>
8020aa14:	0005883a 	mov	r2,zero
8020aa18:	003f8e06 	br	8020a854 <__reset+0xfa1ea854>
8020aa1c:	9080004c 	andi	r2,r18,1
8020aa20:	103f811e 	bne	r2,zero,8020a828 <__reset+0xfa1ea828>
8020aa24:	d8802117 	ldw	r2,132(sp)
8020aa28:	1405c83a 	sub	r2,r2,r16
8020aa2c:	d8803315 	stw	r2,204(sp)
8020aa30:	b47ef326 	beq	r22,r17,8020a600 <__reset+0xfa1ea600>
8020aa34:	dd802617 	ldw	r22,152(sp)
8020aa38:	003f1106 	br	8020a680 <__reset+0xfa1ea680>
8020aa3c:	d9c02785 	stb	r7,158(sp)
8020aa40:	00390406 	br	80208e54 <__reset+0xfa1e8e54>
8020aa44:	d9c02785 	stb	r7,158(sp)
8020aa48:	0038d306 	br	80208d98 <__reset+0xfa1e8d98>
8020aa4c:	d9c02785 	stb	r7,158(sp)
8020aa50:	003a6106 	br	802093d8 <__reset+0xfa1e93d8>
8020aa54:	d9c02785 	stb	r7,158(sp)
8020aa58:	003af806 	br	8020963c <__reset+0xfa1e963c>
8020aa5c:	0005883a 	mov	r2,zero
8020aa60:	003d7e06 	br	8020a05c <__reset+0xfa1ea05c>
8020aa64:	d8802344 	addi	r2,sp,141
8020aa68:	003f1306 	br	8020a6b8 <__reset+0xfa1ea6b8>
8020aa6c:	d9c02785 	stb	r7,158(sp)
8020aa70:	00392306 	br	80208f00 <__reset+0xfa1e8f00>
8020aa74:	d9c02785 	stb	r7,158(sp)
8020aa78:	003aa906 	br	80209520 <__reset+0xfa1e9520>
8020aa7c:	d9c02785 	stb	r7,158(sp)
8020aa80:	003a3d06 	br	80209378 <__reset+0xfa1e9378>
8020aa84:	d9c02785 	stb	r7,158(sp)
8020aa88:	003aca06 	br	802095b4 <__reset+0xfa1e95b4>

8020aa8c <__vfprintf_internal>:
8020aa8c:	00a008b4 	movhi	r2,32802
8020aa90:	10bc2d04 	addi	r2,r2,-3916
8020aa94:	300f883a 	mov	r7,r6
8020aa98:	280d883a 	mov	r6,r5
8020aa9c:	200b883a 	mov	r5,r4
8020aaa0:	11000017 	ldw	r4,0(r2)
8020aaa4:	02088941 	jmpi	80208894 <___vfprintf_internal_r>

8020aaa8 <__sbprintf>:
8020aaa8:	2880030b 	ldhu	r2,12(r5)
8020aaac:	2ac01917 	ldw	r11,100(r5)
8020aab0:	2a80038b 	ldhu	r10,14(r5)
8020aab4:	2a400717 	ldw	r9,28(r5)
8020aab8:	2a000917 	ldw	r8,36(r5)
8020aabc:	defee204 	addi	sp,sp,-1144
8020aac0:	00c10004 	movi	r3,1024
8020aac4:	dc011a15 	stw	r16,1128(sp)
8020aac8:	10bfff4c 	andi	r2,r2,65533
8020aacc:	2821883a 	mov	r16,r5
8020aad0:	d8cb883a 	add	r5,sp,r3
8020aad4:	dc811c15 	stw	r18,1136(sp)
8020aad8:	dc411b15 	stw	r17,1132(sp)
8020aadc:	dfc11d15 	stw	ra,1140(sp)
8020aae0:	2025883a 	mov	r18,r4
8020aae4:	d881030d 	sth	r2,1036(sp)
8020aae8:	dac11915 	stw	r11,1124(sp)
8020aaec:	da81038d 	sth	r10,1038(sp)
8020aaf0:	da410715 	stw	r9,1052(sp)
8020aaf4:	da010915 	stw	r8,1060(sp)
8020aaf8:	dec10015 	stw	sp,1024(sp)
8020aafc:	dec10415 	stw	sp,1040(sp)
8020ab00:	d8c10215 	stw	r3,1032(sp)
8020ab04:	d8c10515 	stw	r3,1044(sp)
8020ab08:	d8010615 	stw	zero,1048(sp)
8020ab0c:	02088940 	call	80208894 <___vfprintf_internal_r>
8020ab10:	1023883a 	mov	r17,r2
8020ab14:	10000416 	blt	r2,zero,8020ab28 <__sbprintf+0x80>
8020ab18:	d9410004 	addi	r5,sp,1024
8020ab1c:	9009883a 	mov	r4,r18
8020ab20:	020c75c0 	call	8020c75c <_fflush_r>
8020ab24:	10000d1e 	bne	r2,zero,8020ab5c <__sbprintf+0xb4>
8020ab28:	d881030b 	ldhu	r2,1036(sp)
8020ab2c:	1080100c 	andi	r2,r2,64
8020ab30:	10000326 	beq	r2,zero,8020ab40 <__sbprintf+0x98>
8020ab34:	8080030b 	ldhu	r2,12(r16)
8020ab38:	10801014 	ori	r2,r2,64
8020ab3c:	8080030d 	sth	r2,12(r16)
8020ab40:	8805883a 	mov	r2,r17
8020ab44:	dfc11d17 	ldw	ra,1140(sp)
8020ab48:	dc811c17 	ldw	r18,1136(sp)
8020ab4c:	dc411b17 	ldw	r17,1132(sp)
8020ab50:	dc011a17 	ldw	r16,1128(sp)
8020ab54:	dec11e04 	addi	sp,sp,1144
8020ab58:	f800283a 	ret
8020ab5c:	047fffc4 	movi	r17,-1
8020ab60:	003ff106 	br	8020ab28 <__reset+0xfa1eab28>

8020ab64 <__swsetup_r>:
8020ab64:	00a008b4 	movhi	r2,32802
8020ab68:	defffd04 	addi	sp,sp,-12
8020ab6c:	10bc2d04 	addi	r2,r2,-3916
8020ab70:	dc400115 	stw	r17,4(sp)
8020ab74:	2023883a 	mov	r17,r4
8020ab78:	11000017 	ldw	r4,0(r2)
8020ab7c:	dc000015 	stw	r16,0(sp)
8020ab80:	dfc00215 	stw	ra,8(sp)
8020ab84:	2821883a 	mov	r16,r5
8020ab88:	20000226 	beq	r4,zero,8020ab94 <__swsetup_r+0x30>
8020ab8c:	20800e17 	ldw	r2,56(r4)
8020ab90:	10003126 	beq	r2,zero,8020ac58 <__swsetup_r+0xf4>
8020ab94:	8080030b 	ldhu	r2,12(r16)
8020ab98:	10c0020c 	andi	r3,r2,8
8020ab9c:	1009883a 	mov	r4,r2
8020aba0:	18000f26 	beq	r3,zero,8020abe0 <__swsetup_r+0x7c>
8020aba4:	80c00417 	ldw	r3,16(r16)
8020aba8:	18001526 	beq	r3,zero,8020ac00 <__swsetup_r+0x9c>
8020abac:	1100004c 	andi	r4,r2,1
8020abb0:	20001c1e 	bne	r4,zero,8020ac24 <__swsetup_r+0xc0>
8020abb4:	1080008c 	andi	r2,r2,2
8020abb8:	1000291e 	bne	r2,zero,8020ac60 <__swsetup_r+0xfc>
8020abbc:	80800517 	ldw	r2,20(r16)
8020abc0:	80800215 	stw	r2,8(r16)
8020abc4:	18001c26 	beq	r3,zero,8020ac38 <__swsetup_r+0xd4>
8020abc8:	0005883a 	mov	r2,zero
8020abcc:	dfc00217 	ldw	ra,8(sp)
8020abd0:	dc400117 	ldw	r17,4(sp)
8020abd4:	dc000017 	ldw	r16,0(sp)
8020abd8:	dec00304 	addi	sp,sp,12
8020abdc:	f800283a 	ret
8020abe0:	2080040c 	andi	r2,r4,16
8020abe4:	10002e26 	beq	r2,zero,8020aca0 <__swsetup_r+0x13c>
8020abe8:	2080010c 	andi	r2,r4,4
8020abec:	10001e1e 	bne	r2,zero,8020ac68 <__swsetup_r+0x104>
8020abf0:	80c00417 	ldw	r3,16(r16)
8020abf4:	20800214 	ori	r2,r4,8
8020abf8:	8080030d 	sth	r2,12(r16)
8020abfc:	183feb1e 	bne	r3,zero,8020abac <__reset+0xfa1eabac>
8020ac00:	1100a00c 	andi	r4,r2,640
8020ac04:	01408004 	movi	r5,512
8020ac08:	217fe826 	beq	r4,r5,8020abac <__reset+0xfa1eabac>
8020ac0c:	800b883a 	mov	r5,r16
8020ac10:	8809883a 	mov	r4,r17
8020ac14:	020d6dc0 	call	8020d6dc <__smakebuf_r>
8020ac18:	8080030b 	ldhu	r2,12(r16)
8020ac1c:	80c00417 	ldw	r3,16(r16)
8020ac20:	003fe206 	br	8020abac <__reset+0xfa1eabac>
8020ac24:	80800517 	ldw	r2,20(r16)
8020ac28:	80000215 	stw	zero,8(r16)
8020ac2c:	0085c83a 	sub	r2,zero,r2
8020ac30:	80800615 	stw	r2,24(r16)
8020ac34:	183fe41e 	bne	r3,zero,8020abc8 <__reset+0xfa1eabc8>
8020ac38:	80c0030b 	ldhu	r3,12(r16)
8020ac3c:	0005883a 	mov	r2,zero
8020ac40:	1900200c 	andi	r4,r3,128
8020ac44:	203fe126 	beq	r4,zero,8020abcc <__reset+0xfa1eabcc>
8020ac48:	18c01014 	ori	r3,r3,64
8020ac4c:	80c0030d 	sth	r3,12(r16)
8020ac50:	00bfffc4 	movi	r2,-1
8020ac54:	003fdd06 	br	8020abcc <__reset+0xfa1eabcc>
8020ac58:	020cb380 	call	8020cb38 <__sinit>
8020ac5c:	003fcd06 	br	8020ab94 <__reset+0xfa1eab94>
8020ac60:	0005883a 	mov	r2,zero
8020ac64:	003fd606 	br	8020abc0 <__reset+0xfa1eabc0>
8020ac68:	81400c17 	ldw	r5,48(r16)
8020ac6c:	28000626 	beq	r5,zero,8020ac88 <__swsetup_r+0x124>
8020ac70:	80801004 	addi	r2,r16,64
8020ac74:	28800326 	beq	r5,r2,8020ac84 <__swsetup_r+0x120>
8020ac78:	8809883a 	mov	r4,r17
8020ac7c:	020ccac0 	call	8020ccac <_free_r>
8020ac80:	8100030b 	ldhu	r4,12(r16)
8020ac84:	80000c15 	stw	zero,48(r16)
8020ac88:	80c00417 	ldw	r3,16(r16)
8020ac8c:	00bff6c4 	movi	r2,-37
8020ac90:	1108703a 	and	r4,r2,r4
8020ac94:	80000115 	stw	zero,4(r16)
8020ac98:	80c00015 	stw	r3,0(r16)
8020ac9c:	003fd506 	br	8020abf4 <__reset+0xfa1eabf4>
8020aca0:	00800244 	movi	r2,9
8020aca4:	88800015 	stw	r2,0(r17)
8020aca8:	20801014 	ori	r2,r4,64
8020acac:	8080030d 	sth	r2,12(r16)
8020acb0:	00bfffc4 	movi	r2,-1
8020acb4:	003fc506 	br	8020abcc <__reset+0xfa1eabcc>

8020acb8 <quorem>:
8020acb8:	defff704 	addi	sp,sp,-36
8020acbc:	dc800215 	stw	r18,8(sp)
8020acc0:	20800417 	ldw	r2,16(r4)
8020acc4:	2c800417 	ldw	r18,16(r5)
8020acc8:	dfc00815 	stw	ra,32(sp)
8020accc:	ddc00715 	stw	r23,28(sp)
8020acd0:	dd800615 	stw	r22,24(sp)
8020acd4:	dd400515 	stw	r21,20(sp)
8020acd8:	dd000415 	stw	r20,16(sp)
8020acdc:	dcc00315 	stw	r19,12(sp)
8020ace0:	dc400115 	stw	r17,4(sp)
8020ace4:	dc000015 	stw	r16,0(sp)
8020ace8:	14807116 	blt	r2,r18,8020aeb0 <quorem+0x1f8>
8020acec:	94bfffc4 	addi	r18,r18,-1
8020acf0:	94ad883a 	add	r22,r18,r18
8020acf4:	b5ad883a 	add	r22,r22,r22
8020acf8:	2c400504 	addi	r17,r5,20
8020acfc:	8da9883a 	add	r20,r17,r22
8020ad00:	25400504 	addi	r21,r4,20
8020ad04:	282f883a 	mov	r23,r5
8020ad08:	adad883a 	add	r22,r21,r22
8020ad0c:	a1400017 	ldw	r5,0(r20)
8020ad10:	2021883a 	mov	r16,r4
8020ad14:	b1000017 	ldw	r4,0(r22)
8020ad18:	29400044 	addi	r5,r5,1
8020ad1c:	0213b7c0 	call	80213b7c <__udivsi3>
8020ad20:	1027883a 	mov	r19,r2
8020ad24:	10002c26 	beq	r2,zero,8020add8 <quorem+0x120>
8020ad28:	a813883a 	mov	r9,r21
8020ad2c:	880b883a 	mov	r5,r17
8020ad30:	0009883a 	mov	r4,zero
8020ad34:	000d883a 	mov	r6,zero
8020ad38:	2a000017 	ldw	r8,0(r5)
8020ad3c:	49c00017 	ldw	r7,0(r9)
8020ad40:	29400104 	addi	r5,r5,4
8020ad44:	40bfffcc 	andi	r2,r8,65535
8020ad48:	14c5383a 	mul	r2,r2,r19
8020ad4c:	4010d43a 	srli	r8,r8,16
8020ad50:	38ffffcc 	andi	r3,r7,65535
8020ad54:	1105883a 	add	r2,r2,r4
8020ad58:	1008d43a 	srli	r4,r2,16
8020ad5c:	44d1383a 	mul	r8,r8,r19
8020ad60:	198d883a 	add	r6,r3,r6
8020ad64:	10ffffcc 	andi	r3,r2,65535
8020ad68:	30c7c83a 	sub	r3,r6,r3
8020ad6c:	380ed43a 	srli	r7,r7,16
8020ad70:	4105883a 	add	r2,r8,r4
8020ad74:	180dd43a 	srai	r6,r3,16
8020ad78:	113fffcc 	andi	r4,r2,65535
8020ad7c:	390fc83a 	sub	r7,r7,r4
8020ad80:	398d883a 	add	r6,r7,r6
8020ad84:	300e943a 	slli	r7,r6,16
8020ad88:	18ffffcc 	andi	r3,r3,65535
8020ad8c:	1008d43a 	srli	r4,r2,16
8020ad90:	38ceb03a 	or	r7,r7,r3
8020ad94:	49c00015 	stw	r7,0(r9)
8020ad98:	300dd43a 	srai	r6,r6,16
8020ad9c:	4a400104 	addi	r9,r9,4
8020ada0:	a17fe52e 	bgeu	r20,r5,8020ad38 <__reset+0xfa1ead38>
8020ada4:	b0800017 	ldw	r2,0(r22)
8020ada8:	10000b1e 	bne	r2,zero,8020add8 <quorem+0x120>
8020adac:	b0bfff04 	addi	r2,r22,-4
8020adb0:	a880082e 	bgeu	r21,r2,8020add4 <quorem+0x11c>
8020adb4:	b0ffff17 	ldw	r3,-4(r22)
8020adb8:	18000326 	beq	r3,zero,8020adc8 <quorem+0x110>
8020adbc:	00000506 	br	8020add4 <quorem+0x11c>
8020adc0:	10c00017 	ldw	r3,0(r2)
8020adc4:	1800031e 	bne	r3,zero,8020add4 <quorem+0x11c>
8020adc8:	10bfff04 	addi	r2,r2,-4
8020adcc:	94bfffc4 	addi	r18,r18,-1
8020add0:	a8bffb36 	bltu	r21,r2,8020adc0 <__reset+0xfa1eadc0>
8020add4:	84800415 	stw	r18,16(r16)
8020add8:	b80b883a 	mov	r5,r23
8020addc:	8009883a 	mov	r4,r16
8020ade0:	020ecd40 	call	8020ecd4 <__mcmp>
8020ade4:	10002616 	blt	r2,zero,8020ae80 <quorem+0x1c8>
8020ade8:	9cc00044 	addi	r19,r19,1
8020adec:	a805883a 	mov	r2,r21
8020adf0:	000b883a 	mov	r5,zero
8020adf4:	11000017 	ldw	r4,0(r2)
8020adf8:	89800017 	ldw	r6,0(r17)
8020adfc:	10800104 	addi	r2,r2,4
8020ae00:	20ffffcc 	andi	r3,r4,65535
8020ae04:	194b883a 	add	r5,r3,r5
8020ae08:	30ffffcc 	andi	r3,r6,65535
8020ae0c:	28c7c83a 	sub	r3,r5,r3
8020ae10:	300cd43a 	srli	r6,r6,16
8020ae14:	2008d43a 	srli	r4,r4,16
8020ae18:	180bd43a 	srai	r5,r3,16
8020ae1c:	18ffffcc 	andi	r3,r3,65535
8020ae20:	2189c83a 	sub	r4,r4,r6
8020ae24:	2149883a 	add	r4,r4,r5
8020ae28:	200c943a 	slli	r6,r4,16
8020ae2c:	8c400104 	addi	r17,r17,4
8020ae30:	200bd43a 	srai	r5,r4,16
8020ae34:	30c6b03a 	or	r3,r6,r3
8020ae38:	10ffff15 	stw	r3,-4(r2)
8020ae3c:	a47fed2e 	bgeu	r20,r17,8020adf4 <__reset+0xfa1eadf4>
8020ae40:	9485883a 	add	r2,r18,r18
8020ae44:	1085883a 	add	r2,r2,r2
8020ae48:	a887883a 	add	r3,r21,r2
8020ae4c:	18800017 	ldw	r2,0(r3)
8020ae50:	10000b1e 	bne	r2,zero,8020ae80 <quorem+0x1c8>
8020ae54:	18bfff04 	addi	r2,r3,-4
8020ae58:	a880082e 	bgeu	r21,r2,8020ae7c <quorem+0x1c4>
8020ae5c:	18ffff17 	ldw	r3,-4(r3)
8020ae60:	18000326 	beq	r3,zero,8020ae70 <quorem+0x1b8>
8020ae64:	00000506 	br	8020ae7c <quorem+0x1c4>
8020ae68:	10c00017 	ldw	r3,0(r2)
8020ae6c:	1800031e 	bne	r3,zero,8020ae7c <quorem+0x1c4>
8020ae70:	10bfff04 	addi	r2,r2,-4
8020ae74:	94bfffc4 	addi	r18,r18,-1
8020ae78:	a8bffb36 	bltu	r21,r2,8020ae68 <__reset+0xfa1eae68>
8020ae7c:	84800415 	stw	r18,16(r16)
8020ae80:	9805883a 	mov	r2,r19
8020ae84:	dfc00817 	ldw	ra,32(sp)
8020ae88:	ddc00717 	ldw	r23,28(sp)
8020ae8c:	dd800617 	ldw	r22,24(sp)
8020ae90:	dd400517 	ldw	r21,20(sp)
8020ae94:	dd000417 	ldw	r20,16(sp)
8020ae98:	dcc00317 	ldw	r19,12(sp)
8020ae9c:	dc800217 	ldw	r18,8(sp)
8020aea0:	dc400117 	ldw	r17,4(sp)
8020aea4:	dc000017 	ldw	r16,0(sp)
8020aea8:	dec00904 	addi	sp,sp,36
8020aeac:	f800283a 	ret
8020aeb0:	0005883a 	mov	r2,zero
8020aeb4:	003ff306 	br	8020ae84 <__reset+0xfa1eae84>

8020aeb8 <_dtoa_r>:
8020aeb8:	20801017 	ldw	r2,64(r4)
8020aebc:	deffde04 	addi	sp,sp,-136
8020aec0:	df002015 	stw	fp,128(sp)
8020aec4:	dcc01b15 	stw	r19,108(sp)
8020aec8:	dc801a15 	stw	r18,104(sp)
8020aecc:	dc401915 	stw	r17,100(sp)
8020aed0:	dc001815 	stw	r16,96(sp)
8020aed4:	dfc02115 	stw	ra,132(sp)
8020aed8:	ddc01f15 	stw	r23,124(sp)
8020aedc:	dd801e15 	stw	r22,120(sp)
8020aee0:	dd401d15 	stw	r21,116(sp)
8020aee4:	dd001c15 	stw	r20,112(sp)
8020aee8:	d9c00315 	stw	r7,12(sp)
8020aeec:	2039883a 	mov	fp,r4
8020aef0:	3023883a 	mov	r17,r6
8020aef4:	2825883a 	mov	r18,r5
8020aef8:	dc002417 	ldw	r16,144(sp)
8020aefc:	3027883a 	mov	r19,r6
8020af00:	10000826 	beq	r2,zero,8020af24 <_dtoa_r+0x6c>
8020af04:	21801117 	ldw	r6,68(r4)
8020af08:	00c00044 	movi	r3,1
8020af0c:	100b883a 	mov	r5,r2
8020af10:	1986983a 	sll	r3,r3,r6
8020af14:	11800115 	stw	r6,4(r2)
8020af18:	10c00215 	stw	r3,8(r2)
8020af1c:	020e4b40 	call	8020e4b4 <_Bfree>
8020af20:	e0001015 	stw	zero,64(fp)
8020af24:	88002e16 	blt	r17,zero,8020afe0 <_dtoa_r+0x128>
8020af28:	80000015 	stw	zero,0(r16)
8020af2c:	889ffc2c 	andhi	r2,r17,32752
8020af30:	00dffc34 	movhi	r3,32752
8020af34:	10c01c26 	beq	r2,r3,8020afa8 <_dtoa_r+0xf0>
8020af38:	000d883a 	mov	r6,zero
8020af3c:	000f883a 	mov	r7,zero
8020af40:	9009883a 	mov	r4,r18
8020af44:	980b883a 	mov	r5,r19
8020af48:	0214dcc0 	call	80214dcc <__eqdf2>
8020af4c:	10002b1e 	bne	r2,zero,8020affc <_dtoa_r+0x144>
8020af50:	d9c02317 	ldw	r7,140(sp)
8020af54:	00800044 	movi	r2,1
8020af58:	38800015 	stw	r2,0(r7)
8020af5c:	d8802517 	ldw	r2,148(sp)
8020af60:	10019e26 	beq	r2,zero,8020b5dc <_dtoa_r+0x724>
8020af64:	d8c02517 	ldw	r3,148(sp)
8020af68:	00a008b4 	movhi	r2,32802
8020af6c:	10b3f544 	addi	r2,r2,-12331
8020af70:	18800015 	stw	r2,0(r3)
8020af74:	10bfffc4 	addi	r2,r2,-1
8020af78:	dfc02117 	ldw	ra,132(sp)
8020af7c:	df002017 	ldw	fp,128(sp)
8020af80:	ddc01f17 	ldw	r23,124(sp)
8020af84:	dd801e17 	ldw	r22,120(sp)
8020af88:	dd401d17 	ldw	r21,116(sp)
8020af8c:	dd001c17 	ldw	r20,112(sp)
8020af90:	dcc01b17 	ldw	r19,108(sp)
8020af94:	dc801a17 	ldw	r18,104(sp)
8020af98:	dc401917 	ldw	r17,100(sp)
8020af9c:	dc001817 	ldw	r16,96(sp)
8020afa0:	dec02204 	addi	sp,sp,136
8020afa4:	f800283a 	ret
8020afa8:	d8c02317 	ldw	r3,140(sp)
8020afac:	0089c3c4 	movi	r2,9999
8020afb0:	18800015 	stw	r2,0(r3)
8020afb4:	90017726 	beq	r18,zero,8020b594 <_dtoa_r+0x6dc>
8020afb8:	00a008b4 	movhi	r2,32802
8020afbc:	10b40904 	addi	r2,r2,-12252
8020afc0:	d9002517 	ldw	r4,148(sp)
8020afc4:	203fec26 	beq	r4,zero,8020af78 <__reset+0xfa1eaf78>
8020afc8:	10c000c7 	ldb	r3,3(r2)
8020afcc:	1801781e 	bne	r3,zero,8020b5b0 <_dtoa_r+0x6f8>
8020afd0:	10c000c4 	addi	r3,r2,3
8020afd4:	d9802517 	ldw	r6,148(sp)
8020afd8:	30c00015 	stw	r3,0(r6)
8020afdc:	003fe606 	br	8020af78 <__reset+0xfa1eaf78>
8020afe0:	04e00034 	movhi	r19,32768
8020afe4:	9cffffc4 	addi	r19,r19,-1
8020afe8:	00800044 	movi	r2,1
8020afec:	8ce6703a 	and	r19,r17,r19
8020aff0:	80800015 	stw	r2,0(r16)
8020aff4:	9823883a 	mov	r17,r19
8020aff8:	003fcc06 	br	8020af2c <__reset+0xfa1eaf2c>
8020affc:	d8800204 	addi	r2,sp,8
8020b000:	d8800015 	stw	r2,0(sp)
8020b004:	d9c00104 	addi	r7,sp,4
8020b008:	900b883a 	mov	r5,r18
8020b00c:	980d883a 	mov	r6,r19
8020b010:	e009883a 	mov	r4,fp
8020b014:	8820d53a 	srli	r16,r17,20
8020b018:	020f0a00 	call	8020f0a0 <__d2b>
8020b01c:	d8800915 	stw	r2,36(sp)
8020b020:	8001651e 	bne	r16,zero,8020b5b8 <_dtoa_r+0x700>
8020b024:	dd800217 	ldw	r22,8(sp)
8020b028:	dc000117 	ldw	r16,4(sp)
8020b02c:	00800804 	movi	r2,32
8020b030:	b421883a 	add	r16,r22,r16
8020b034:	80c10c84 	addi	r3,r16,1074
8020b038:	10c2d10e 	bge	r2,r3,8020bb80 <_dtoa_r+0xcc8>
8020b03c:	00801004 	movi	r2,64
8020b040:	81010484 	addi	r4,r16,1042
8020b044:	10c7c83a 	sub	r3,r2,r3
8020b048:	9108d83a 	srl	r4,r18,r4
8020b04c:	88e2983a 	sll	r17,r17,r3
8020b050:	2448b03a 	or	r4,r4,r17
8020b054:	02161940 	call	80216194 <__floatunsidf>
8020b058:	017f8434 	movhi	r5,65040
8020b05c:	01800044 	movi	r6,1
8020b060:	1009883a 	mov	r4,r2
8020b064:	194b883a 	add	r5,r3,r5
8020b068:	843fffc4 	addi	r16,r16,-1
8020b06c:	d9801115 	stw	r6,68(sp)
8020b070:	000d883a 	mov	r6,zero
8020b074:	01cffe34 	movhi	r7,16376
8020b078:	021573c0 	call	8021573c <__subdf3>
8020b07c:	0198dbf4 	movhi	r6,25455
8020b080:	01cff4f4 	movhi	r7,16339
8020b084:	3190d844 	addi	r6,r6,17249
8020b088:	39e1e9c4 	addi	r7,r7,-30809
8020b08c:	1009883a 	mov	r4,r2
8020b090:	180b883a 	mov	r5,r3
8020b094:	02150240 	call	80215024 <__muldf3>
8020b098:	01a2d874 	movhi	r6,35681
8020b09c:	01cff1f4 	movhi	r7,16327
8020b0a0:	31b22cc4 	addi	r6,r6,-14157
8020b0a4:	39e28a04 	addi	r7,r7,-30168
8020b0a8:	180b883a 	mov	r5,r3
8020b0ac:	1009883a 	mov	r4,r2
8020b0b0:	0213c380 	call	80213c38 <__adddf3>
8020b0b4:	8009883a 	mov	r4,r16
8020b0b8:	1029883a 	mov	r20,r2
8020b0bc:	1823883a 	mov	r17,r3
8020b0c0:	02160b80 	call	802160b8 <__floatsidf>
8020b0c4:	019427f4 	movhi	r6,20639
8020b0c8:	01cff4f4 	movhi	r7,16339
8020b0cc:	319e7ec4 	addi	r6,r6,31227
8020b0d0:	39d104c4 	addi	r7,r7,17427
8020b0d4:	1009883a 	mov	r4,r2
8020b0d8:	180b883a 	mov	r5,r3
8020b0dc:	02150240 	call	80215024 <__muldf3>
8020b0e0:	100d883a 	mov	r6,r2
8020b0e4:	180f883a 	mov	r7,r3
8020b0e8:	a009883a 	mov	r4,r20
8020b0ec:	880b883a 	mov	r5,r17
8020b0f0:	0213c380 	call	80213c38 <__adddf3>
8020b0f4:	1009883a 	mov	r4,r2
8020b0f8:	180b883a 	mov	r5,r3
8020b0fc:	1029883a 	mov	r20,r2
8020b100:	1823883a 	mov	r17,r3
8020b104:	02160380 	call	80216038 <__fixdfsi>
8020b108:	000d883a 	mov	r6,zero
8020b10c:	000f883a 	mov	r7,zero
8020b110:	a009883a 	mov	r4,r20
8020b114:	880b883a 	mov	r5,r17
8020b118:	d8800515 	stw	r2,20(sp)
8020b11c:	0214f300 	call	80214f30 <__ledf2>
8020b120:	10028716 	blt	r2,zero,8020bb40 <_dtoa_r+0xc88>
8020b124:	d8c00517 	ldw	r3,20(sp)
8020b128:	00800584 	movi	r2,22
8020b12c:	10c27536 	bltu	r2,r3,8020bb04 <_dtoa_r+0xc4c>
8020b130:	180490fa 	slli	r2,r3,3
8020b134:	00e008b4 	movhi	r3,32802
8020b138:	18f42404 	addi	r3,r3,-12144
8020b13c:	1885883a 	add	r2,r3,r2
8020b140:	11000017 	ldw	r4,0(r2)
8020b144:	11400117 	ldw	r5,4(r2)
8020b148:	900d883a 	mov	r6,r18
8020b14c:	980f883a 	mov	r7,r19
8020b150:	0214e540 	call	80214e54 <__gedf2>
8020b154:	00828d0e 	bge	zero,r2,8020bb8c <_dtoa_r+0xcd4>
8020b158:	d9000517 	ldw	r4,20(sp)
8020b15c:	d8000e15 	stw	zero,56(sp)
8020b160:	213fffc4 	addi	r4,r4,-1
8020b164:	d9000515 	stw	r4,20(sp)
8020b168:	b42dc83a 	sub	r22,r22,r16
8020b16c:	b5bfffc4 	addi	r22,r22,-1
8020b170:	b0026f16 	blt	r22,zero,8020bb30 <_dtoa_r+0xc78>
8020b174:	d8000815 	stw	zero,32(sp)
8020b178:	d9c00517 	ldw	r7,20(sp)
8020b17c:	38026416 	blt	r7,zero,8020bb10 <_dtoa_r+0xc58>
8020b180:	b1ed883a 	add	r22,r22,r7
8020b184:	d9c00d15 	stw	r7,52(sp)
8020b188:	d8000a15 	stw	zero,40(sp)
8020b18c:	d9800317 	ldw	r6,12(sp)
8020b190:	00800244 	movi	r2,9
8020b194:	11811436 	bltu	r2,r6,8020b5e8 <_dtoa_r+0x730>
8020b198:	00800144 	movi	r2,5
8020b19c:	1184e10e 	bge	r2,r6,8020c524 <_dtoa_r+0x166c>
8020b1a0:	31bfff04 	addi	r6,r6,-4
8020b1a4:	d9800315 	stw	r6,12(sp)
8020b1a8:	0023883a 	mov	r17,zero
8020b1ac:	d9800317 	ldw	r6,12(sp)
8020b1b0:	008000c4 	movi	r2,3
8020b1b4:	30836726 	beq	r6,r2,8020bf54 <_dtoa_r+0x109c>
8020b1b8:	1183410e 	bge	r2,r6,8020bec0 <_dtoa_r+0x1008>
8020b1bc:	d9c00317 	ldw	r7,12(sp)
8020b1c0:	00800104 	movi	r2,4
8020b1c4:	38827c26 	beq	r7,r2,8020bbb8 <_dtoa_r+0xd00>
8020b1c8:	00800144 	movi	r2,5
8020b1cc:	3884c41e 	bne	r7,r2,8020c4e0 <_dtoa_r+0x1628>
8020b1d0:	00800044 	movi	r2,1
8020b1d4:	d8800b15 	stw	r2,44(sp)
8020b1d8:	d8c00517 	ldw	r3,20(sp)
8020b1dc:	d9002217 	ldw	r4,136(sp)
8020b1e0:	1907883a 	add	r3,r3,r4
8020b1e4:	19800044 	addi	r6,r3,1
8020b1e8:	d8c00c15 	stw	r3,48(sp)
8020b1ec:	d9800615 	stw	r6,24(sp)
8020b1f0:	0183a40e 	bge	zero,r6,8020c084 <_dtoa_r+0x11cc>
8020b1f4:	d9800617 	ldw	r6,24(sp)
8020b1f8:	3021883a 	mov	r16,r6
8020b1fc:	e0001115 	stw	zero,68(fp)
8020b200:	008005c4 	movi	r2,23
8020b204:	1184c92e 	bgeu	r2,r6,8020c52c <_dtoa_r+0x1674>
8020b208:	00c00044 	movi	r3,1
8020b20c:	00800104 	movi	r2,4
8020b210:	1085883a 	add	r2,r2,r2
8020b214:	11000504 	addi	r4,r2,20
8020b218:	180b883a 	mov	r5,r3
8020b21c:	18c00044 	addi	r3,r3,1
8020b220:	313ffb2e 	bgeu	r6,r4,8020b210 <__reset+0xfa1eb210>
8020b224:	e1401115 	stw	r5,68(fp)
8020b228:	e009883a 	mov	r4,fp
8020b22c:	020e40c0 	call	8020e40c <_Balloc>
8020b230:	d8800715 	stw	r2,28(sp)
8020b234:	e0801015 	stw	r2,64(fp)
8020b238:	00800384 	movi	r2,14
8020b23c:	1400f736 	bltu	r2,r16,8020b61c <_dtoa_r+0x764>
8020b240:	8800f626 	beq	r17,zero,8020b61c <_dtoa_r+0x764>
8020b244:	d9c00517 	ldw	r7,20(sp)
8020b248:	01c39a0e 	bge	zero,r7,8020c0b4 <_dtoa_r+0x11fc>
8020b24c:	388003cc 	andi	r2,r7,15
8020b250:	100490fa 	slli	r2,r2,3
8020b254:	382bd13a 	srai	r21,r7,4
8020b258:	00e008b4 	movhi	r3,32802
8020b25c:	18f42404 	addi	r3,r3,-12144
8020b260:	1885883a 	add	r2,r3,r2
8020b264:	a8c0040c 	andi	r3,r21,16
8020b268:	12400017 	ldw	r9,0(r2)
8020b26c:	12000117 	ldw	r8,4(r2)
8020b270:	18037926 	beq	r3,zero,8020c058 <_dtoa_r+0x11a0>
8020b274:	00a008b4 	movhi	r2,32802
8020b278:	10b41a04 	addi	r2,r2,-12184
8020b27c:	11800817 	ldw	r6,32(r2)
8020b280:	11c00917 	ldw	r7,36(r2)
8020b284:	9009883a 	mov	r4,r18
8020b288:	980b883a 	mov	r5,r19
8020b28c:	da001715 	stw	r8,92(sp)
8020b290:	da401615 	stw	r9,88(sp)
8020b294:	02144e40 	call	802144e4 <__divdf3>
8020b298:	da001717 	ldw	r8,92(sp)
8020b29c:	da401617 	ldw	r9,88(sp)
8020b2a0:	ad4003cc 	andi	r21,r21,15
8020b2a4:	040000c4 	movi	r16,3
8020b2a8:	1023883a 	mov	r17,r2
8020b2ac:	1829883a 	mov	r20,r3
8020b2b0:	a8001126 	beq	r21,zero,8020b2f8 <_dtoa_r+0x440>
8020b2b4:	05e008b4 	movhi	r23,32802
8020b2b8:	bdf41a04 	addi	r23,r23,-12184
8020b2bc:	4805883a 	mov	r2,r9
8020b2c0:	4007883a 	mov	r3,r8
8020b2c4:	a980004c 	andi	r6,r21,1
8020b2c8:	1009883a 	mov	r4,r2
8020b2cc:	a82bd07a 	srai	r21,r21,1
8020b2d0:	180b883a 	mov	r5,r3
8020b2d4:	30000426 	beq	r6,zero,8020b2e8 <_dtoa_r+0x430>
8020b2d8:	b9800017 	ldw	r6,0(r23)
8020b2dc:	b9c00117 	ldw	r7,4(r23)
8020b2e0:	84000044 	addi	r16,r16,1
8020b2e4:	02150240 	call	80215024 <__muldf3>
8020b2e8:	bdc00204 	addi	r23,r23,8
8020b2ec:	a83ff51e 	bne	r21,zero,8020b2c4 <__reset+0xfa1eb2c4>
8020b2f0:	1013883a 	mov	r9,r2
8020b2f4:	1811883a 	mov	r8,r3
8020b2f8:	480d883a 	mov	r6,r9
8020b2fc:	400f883a 	mov	r7,r8
8020b300:	8809883a 	mov	r4,r17
8020b304:	a00b883a 	mov	r5,r20
8020b308:	02144e40 	call	802144e4 <__divdf3>
8020b30c:	d8800f15 	stw	r2,60(sp)
8020b310:	d8c01015 	stw	r3,64(sp)
8020b314:	d8c00e17 	ldw	r3,56(sp)
8020b318:	18000626 	beq	r3,zero,8020b334 <_dtoa_r+0x47c>
8020b31c:	d9000f17 	ldw	r4,60(sp)
8020b320:	d9401017 	ldw	r5,64(sp)
8020b324:	000d883a 	mov	r6,zero
8020b328:	01cffc34 	movhi	r7,16368
8020b32c:	0214f300 	call	80214f30 <__ledf2>
8020b330:	10040b16 	blt	r2,zero,8020c360 <_dtoa_r+0x14a8>
8020b334:	8009883a 	mov	r4,r16
8020b338:	02160b80 	call	802160b8 <__floatsidf>
8020b33c:	d9800f17 	ldw	r6,60(sp)
8020b340:	d9c01017 	ldw	r7,64(sp)
8020b344:	1009883a 	mov	r4,r2
8020b348:	180b883a 	mov	r5,r3
8020b34c:	02150240 	call	80215024 <__muldf3>
8020b350:	000d883a 	mov	r6,zero
8020b354:	01d00734 	movhi	r7,16412
8020b358:	1009883a 	mov	r4,r2
8020b35c:	180b883a 	mov	r5,r3
8020b360:	0213c380 	call	80213c38 <__adddf3>
8020b364:	1021883a 	mov	r16,r2
8020b368:	d8800617 	ldw	r2,24(sp)
8020b36c:	047f3034 	movhi	r17,64704
8020b370:	1c63883a 	add	r17,r3,r17
8020b374:	10031826 	beq	r2,zero,8020bfd8 <_dtoa_r+0x1120>
8020b378:	d8c00517 	ldw	r3,20(sp)
8020b37c:	db000617 	ldw	r12,24(sp)
8020b380:	d8c01315 	stw	r3,76(sp)
8020b384:	d9000b17 	ldw	r4,44(sp)
8020b388:	20038f26 	beq	r4,zero,8020c1c8 <_dtoa_r+0x1310>
8020b38c:	60bfffc4 	addi	r2,r12,-1
8020b390:	100490fa 	slli	r2,r2,3
8020b394:	00e008b4 	movhi	r3,32802
8020b398:	18f42404 	addi	r3,r3,-12144
8020b39c:	1885883a 	add	r2,r3,r2
8020b3a0:	11800017 	ldw	r6,0(r2)
8020b3a4:	11c00117 	ldw	r7,4(r2)
8020b3a8:	d8800717 	ldw	r2,28(sp)
8020b3ac:	0009883a 	mov	r4,zero
8020b3b0:	014ff834 	movhi	r5,16352
8020b3b4:	db001615 	stw	r12,88(sp)
8020b3b8:	15c00044 	addi	r23,r2,1
8020b3bc:	02144e40 	call	802144e4 <__divdf3>
8020b3c0:	800d883a 	mov	r6,r16
8020b3c4:	880f883a 	mov	r7,r17
8020b3c8:	1009883a 	mov	r4,r2
8020b3cc:	180b883a 	mov	r5,r3
8020b3d0:	021573c0 	call	8021573c <__subdf3>
8020b3d4:	d9401017 	ldw	r5,64(sp)
8020b3d8:	d9000f17 	ldw	r4,60(sp)
8020b3dc:	102b883a 	mov	r21,r2
8020b3e0:	d8c01215 	stw	r3,72(sp)
8020b3e4:	02160380 	call	80216038 <__fixdfsi>
8020b3e8:	1009883a 	mov	r4,r2
8020b3ec:	1029883a 	mov	r20,r2
8020b3f0:	02160b80 	call	802160b8 <__floatsidf>
8020b3f4:	d9000f17 	ldw	r4,60(sp)
8020b3f8:	d9401017 	ldw	r5,64(sp)
8020b3fc:	100d883a 	mov	r6,r2
8020b400:	180f883a 	mov	r7,r3
8020b404:	021573c0 	call	8021573c <__subdf3>
8020b408:	1823883a 	mov	r17,r3
8020b40c:	d8c00717 	ldw	r3,28(sp)
8020b410:	d9401217 	ldw	r5,72(sp)
8020b414:	a2000c04 	addi	r8,r20,48
8020b418:	1021883a 	mov	r16,r2
8020b41c:	1a000005 	stb	r8,0(r3)
8020b420:	800d883a 	mov	r6,r16
8020b424:	880f883a 	mov	r7,r17
8020b428:	a809883a 	mov	r4,r21
8020b42c:	4029883a 	mov	r20,r8
8020b430:	0214e540 	call	80214e54 <__gedf2>
8020b434:	00841d16 	blt	zero,r2,8020c4ac <_dtoa_r+0x15f4>
8020b438:	800d883a 	mov	r6,r16
8020b43c:	880f883a 	mov	r7,r17
8020b440:	0009883a 	mov	r4,zero
8020b444:	014ffc34 	movhi	r5,16368
8020b448:	021573c0 	call	8021573c <__subdf3>
8020b44c:	d9401217 	ldw	r5,72(sp)
8020b450:	100d883a 	mov	r6,r2
8020b454:	180f883a 	mov	r7,r3
8020b458:	a809883a 	mov	r4,r21
8020b45c:	0214e540 	call	80214e54 <__gedf2>
8020b460:	db001617 	ldw	r12,88(sp)
8020b464:	00840e16 	blt	zero,r2,8020c4a0 <_dtoa_r+0x15e8>
8020b468:	00800044 	movi	r2,1
8020b46c:	13006b0e 	bge	r2,r12,8020b61c <_dtoa_r+0x764>
8020b470:	d9000717 	ldw	r4,28(sp)
8020b474:	dd800f15 	stw	r22,60(sp)
8020b478:	dcc01015 	stw	r19,64(sp)
8020b47c:	2319883a 	add	r12,r4,r12
8020b480:	dcc01217 	ldw	r19,72(sp)
8020b484:	602d883a 	mov	r22,r12
8020b488:	dc801215 	stw	r18,72(sp)
8020b48c:	b825883a 	mov	r18,r23
8020b490:	00000906 	br	8020b4b8 <_dtoa_r+0x600>
8020b494:	021573c0 	call	8021573c <__subdf3>
8020b498:	a80d883a 	mov	r6,r21
8020b49c:	980f883a 	mov	r7,r19
8020b4a0:	1009883a 	mov	r4,r2
8020b4a4:	180b883a 	mov	r5,r3
8020b4a8:	0214f300 	call	80214f30 <__ledf2>
8020b4ac:	1003e816 	blt	r2,zero,8020c450 <_dtoa_r+0x1598>
8020b4b0:	b825883a 	mov	r18,r23
8020b4b4:	bd83e926 	beq	r23,r22,8020c45c <_dtoa_r+0x15a4>
8020b4b8:	a809883a 	mov	r4,r21
8020b4bc:	980b883a 	mov	r5,r19
8020b4c0:	000d883a 	mov	r6,zero
8020b4c4:	01d00934 	movhi	r7,16420
8020b4c8:	02150240 	call	80215024 <__muldf3>
8020b4cc:	000d883a 	mov	r6,zero
8020b4d0:	01d00934 	movhi	r7,16420
8020b4d4:	8009883a 	mov	r4,r16
8020b4d8:	880b883a 	mov	r5,r17
8020b4dc:	102b883a 	mov	r21,r2
8020b4e0:	1827883a 	mov	r19,r3
8020b4e4:	02150240 	call	80215024 <__muldf3>
8020b4e8:	180b883a 	mov	r5,r3
8020b4ec:	1009883a 	mov	r4,r2
8020b4f0:	1821883a 	mov	r16,r3
8020b4f4:	1023883a 	mov	r17,r2
8020b4f8:	02160380 	call	80216038 <__fixdfsi>
8020b4fc:	1009883a 	mov	r4,r2
8020b500:	1029883a 	mov	r20,r2
8020b504:	02160b80 	call	802160b8 <__floatsidf>
8020b508:	8809883a 	mov	r4,r17
8020b50c:	800b883a 	mov	r5,r16
8020b510:	100d883a 	mov	r6,r2
8020b514:	180f883a 	mov	r7,r3
8020b518:	021573c0 	call	8021573c <__subdf3>
8020b51c:	a5000c04 	addi	r20,r20,48
8020b520:	a80d883a 	mov	r6,r21
8020b524:	980f883a 	mov	r7,r19
8020b528:	1009883a 	mov	r4,r2
8020b52c:	180b883a 	mov	r5,r3
8020b530:	95000005 	stb	r20,0(r18)
8020b534:	1021883a 	mov	r16,r2
8020b538:	1823883a 	mov	r17,r3
8020b53c:	0214f300 	call	80214f30 <__ledf2>
8020b540:	bdc00044 	addi	r23,r23,1
8020b544:	800d883a 	mov	r6,r16
8020b548:	880f883a 	mov	r7,r17
8020b54c:	0009883a 	mov	r4,zero
8020b550:	014ffc34 	movhi	r5,16368
8020b554:	103fcf0e 	bge	r2,zero,8020b494 <__reset+0xfa1eb494>
8020b558:	d8c01317 	ldw	r3,76(sp)
8020b55c:	d8c00515 	stw	r3,20(sp)
8020b560:	d9400917 	ldw	r5,36(sp)
8020b564:	e009883a 	mov	r4,fp
8020b568:	020e4b40 	call	8020e4b4 <_Bfree>
8020b56c:	d9000517 	ldw	r4,20(sp)
8020b570:	d9802317 	ldw	r6,140(sp)
8020b574:	d9c02517 	ldw	r7,148(sp)
8020b578:	b8000005 	stb	zero,0(r23)
8020b57c:	20800044 	addi	r2,r4,1
8020b580:	30800015 	stw	r2,0(r6)
8020b584:	3802aa26 	beq	r7,zero,8020c030 <_dtoa_r+0x1178>
8020b588:	3dc00015 	stw	r23,0(r7)
8020b58c:	d8800717 	ldw	r2,28(sp)
8020b590:	003e7906 	br	8020af78 <__reset+0xfa1eaf78>
8020b594:	00800434 	movhi	r2,16
8020b598:	10bfffc4 	addi	r2,r2,-1
8020b59c:	88a2703a 	and	r17,r17,r2
8020b5a0:	883e851e 	bne	r17,zero,8020afb8 <__reset+0xfa1eafb8>
8020b5a4:	00a008b4 	movhi	r2,32802
8020b5a8:	10b40604 	addi	r2,r2,-12264
8020b5ac:	003e8406 	br	8020afc0 <__reset+0xfa1eafc0>
8020b5b0:	10c00204 	addi	r3,r2,8
8020b5b4:	003e8706 	br	8020afd4 <__reset+0xfa1eafd4>
8020b5b8:	01400434 	movhi	r5,16
8020b5bc:	297fffc4 	addi	r5,r5,-1
8020b5c0:	994a703a 	and	r5,r19,r5
8020b5c4:	9009883a 	mov	r4,r18
8020b5c8:	843f0044 	addi	r16,r16,-1023
8020b5cc:	294ffc34 	orhi	r5,r5,16368
8020b5d0:	dd800217 	ldw	r22,8(sp)
8020b5d4:	d8001115 	stw	zero,68(sp)
8020b5d8:	003ea506 	br	8020b070 <__reset+0xfa1eb070>
8020b5dc:	00a008b4 	movhi	r2,32802
8020b5e0:	10b3f504 	addi	r2,r2,-12332
8020b5e4:	003e6406 	br	8020af78 <__reset+0xfa1eaf78>
8020b5e8:	e0001115 	stw	zero,68(fp)
8020b5ec:	000b883a 	mov	r5,zero
8020b5f0:	e009883a 	mov	r4,fp
8020b5f4:	020e40c0 	call	8020e40c <_Balloc>
8020b5f8:	01bfffc4 	movi	r6,-1
8020b5fc:	01c00044 	movi	r7,1
8020b600:	d8800715 	stw	r2,28(sp)
8020b604:	d9800c15 	stw	r6,48(sp)
8020b608:	e0801015 	stw	r2,64(fp)
8020b60c:	d8000315 	stw	zero,12(sp)
8020b610:	d9c00b15 	stw	r7,44(sp)
8020b614:	d9800615 	stw	r6,24(sp)
8020b618:	d8002215 	stw	zero,136(sp)
8020b61c:	d8800117 	ldw	r2,4(sp)
8020b620:	10008916 	blt	r2,zero,8020b848 <_dtoa_r+0x990>
8020b624:	d9000517 	ldw	r4,20(sp)
8020b628:	00c00384 	movi	r3,14
8020b62c:	19008616 	blt	r3,r4,8020b848 <_dtoa_r+0x990>
8020b630:	200490fa 	slli	r2,r4,3
8020b634:	00e008b4 	movhi	r3,32802
8020b638:	d9802217 	ldw	r6,136(sp)
8020b63c:	18f42404 	addi	r3,r3,-12144
8020b640:	1885883a 	add	r2,r3,r2
8020b644:	14000017 	ldw	r16,0(r2)
8020b648:	14400117 	ldw	r17,4(r2)
8020b64c:	30016316 	blt	r6,zero,8020bbdc <_dtoa_r+0xd24>
8020b650:	800d883a 	mov	r6,r16
8020b654:	880f883a 	mov	r7,r17
8020b658:	9009883a 	mov	r4,r18
8020b65c:	980b883a 	mov	r5,r19
8020b660:	02144e40 	call	802144e4 <__divdf3>
8020b664:	180b883a 	mov	r5,r3
8020b668:	1009883a 	mov	r4,r2
8020b66c:	02160380 	call	80216038 <__fixdfsi>
8020b670:	1009883a 	mov	r4,r2
8020b674:	102b883a 	mov	r21,r2
8020b678:	02160b80 	call	802160b8 <__floatsidf>
8020b67c:	800d883a 	mov	r6,r16
8020b680:	880f883a 	mov	r7,r17
8020b684:	1009883a 	mov	r4,r2
8020b688:	180b883a 	mov	r5,r3
8020b68c:	02150240 	call	80215024 <__muldf3>
8020b690:	100d883a 	mov	r6,r2
8020b694:	180f883a 	mov	r7,r3
8020b698:	9009883a 	mov	r4,r18
8020b69c:	980b883a 	mov	r5,r19
8020b6a0:	021573c0 	call	8021573c <__subdf3>
8020b6a4:	d9c00717 	ldw	r7,28(sp)
8020b6a8:	1009883a 	mov	r4,r2
8020b6ac:	a8800c04 	addi	r2,r21,48
8020b6b0:	38800005 	stb	r2,0(r7)
8020b6b4:	3dc00044 	addi	r23,r7,1
8020b6b8:	d9c00617 	ldw	r7,24(sp)
8020b6bc:	01800044 	movi	r6,1
8020b6c0:	180b883a 	mov	r5,r3
8020b6c4:	2005883a 	mov	r2,r4
8020b6c8:	39803826 	beq	r7,r6,8020b7ac <_dtoa_r+0x8f4>
8020b6cc:	000d883a 	mov	r6,zero
8020b6d0:	01d00934 	movhi	r7,16420
8020b6d4:	02150240 	call	80215024 <__muldf3>
8020b6d8:	000d883a 	mov	r6,zero
8020b6dc:	000f883a 	mov	r7,zero
8020b6e0:	1009883a 	mov	r4,r2
8020b6e4:	180b883a 	mov	r5,r3
8020b6e8:	1025883a 	mov	r18,r2
8020b6ec:	1827883a 	mov	r19,r3
8020b6f0:	0214dcc0 	call	80214dcc <__eqdf2>
8020b6f4:	103f9a26 	beq	r2,zero,8020b560 <__reset+0xfa1eb560>
8020b6f8:	d9c00617 	ldw	r7,24(sp)
8020b6fc:	d8c00717 	ldw	r3,28(sp)
8020b700:	b829883a 	mov	r20,r23
8020b704:	38bfffc4 	addi	r2,r7,-1
8020b708:	18ad883a 	add	r22,r3,r2
8020b70c:	00000a06 	br	8020b738 <_dtoa_r+0x880>
8020b710:	02150240 	call	80215024 <__muldf3>
8020b714:	000d883a 	mov	r6,zero
8020b718:	000f883a 	mov	r7,zero
8020b71c:	1009883a 	mov	r4,r2
8020b720:	180b883a 	mov	r5,r3
8020b724:	1025883a 	mov	r18,r2
8020b728:	1827883a 	mov	r19,r3
8020b72c:	b829883a 	mov	r20,r23
8020b730:	0214dcc0 	call	80214dcc <__eqdf2>
8020b734:	103f8a26 	beq	r2,zero,8020b560 <__reset+0xfa1eb560>
8020b738:	800d883a 	mov	r6,r16
8020b73c:	880f883a 	mov	r7,r17
8020b740:	9009883a 	mov	r4,r18
8020b744:	980b883a 	mov	r5,r19
8020b748:	02144e40 	call	802144e4 <__divdf3>
8020b74c:	180b883a 	mov	r5,r3
8020b750:	1009883a 	mov	r4,r2
8020b754:	02160380 	call	80216038 <__fixdfsi>
8020b758:	1009883a 	mov	r4,r2
8020b75c:	102b883a 	mov	r21,r2
8020b760:	02160b80 	call	802160b8 <__floatsidf>
8020b764:	800d883a 	mov	r6,r16
8020b768:	880f883a 	mov	r7,r17
8020b76c:	1009883a 	mov	r4,r2
8020b770:	180b883a 	mov	r5,r3
8020b774:	02150240 	call	80215024 <__muldf3>
8020b778:	100d883a 	mov	r6,r2
8020b77c:	180f883a 	mov	r7,r3
8020b780:	9009883a 	mov	r4,r18
8020b784:	980b883a 	mov	r5,r19
8020b788:	021573c0 	call	8021573c <__subdf3>
8020b78c:	aa000c04 	addi	r8,r21,48
8020b790:	a2000005 	stb	r8,0(r20)
8020b794:	000d883a 	mov	r6,zero
8020b798:	01d00934 	movhi	r7,16420
8020b79c:	1009883a 	mov	r4,r2
8020b7a0:	180b883a 	mov	r5,r3
8020b7a4:	a5c00044 	addi	r23,r20,1
8020b7a8:	b53fd91e 	bne	r22,r20,8020b710 <__reset+0xfa1eb710>
8020b7ac:	100d883a 	mov	r6,r2
8020b7b0:	180f883a 	mov	r7,r3
8020b7b4:	1009883a 	mov	r4,r2
8020b7b8:	180b883a 	mov	r5,r3
8020b7bc:	0213c380 	call	80213c38 <__adddf3>
8020b7c0:	100d883a 	mov	r6,r2
8020b7c4:	180f883a 	mov	r7,r3
8020b7c8:	8009883a 	mov	r4,r16
8020b7cc:	880b883a 	mov	r5,r17
8020b7d0:	1027883a 	mov	r19,r2
8020b7d4:	1825883a 	mov	r18,r3
8020b7d8:	0214f300 	call	80214f30 <__ledf2>
8020b7dc:	10000816 	blt	r2,zero,8020b800 <_dtoa_r+0x948>
8020b7e0:	980d883a 	mov	r6,r19
8020b7e4:	900f883a 	mov	r7,r18
8020b7e8:	8009883a 	mov	r4,r16
8020b7ec:	880b883a 	mov	r5,r17
8020b7f0:	0214dcc0 	call	80214dcc <__eqdf2>
8020b7f4:	103f5a1e 	bne	r2,zero,8020b560 <__reset+0xfa1eb560>
8020b7f8:	ad40004c 	andi	r21,r21,1
8020b7fc:	a83f5826 	beq	r21,zero,8020b560 <__reset+0xfa1eb560>
8020b800:	bd3fffc3 	ldbu	r20,-1(r23)
8020b804:	b8bfffc4 	addi	r2,r23,-1
8020b808:	1007883a 	mov	r3,r2
8020b80c:	01400e44 	movi	r5,57
8020b810:	d9800717 	ldw	r6,28(sp)
8020b814:	00000506 	br	8020b82c <_dtoa_r+0x974>
8020b818:	18ffffc4 	addi	r3,r3,-1
8020b81c:	11824726 	beq	r2,r6,8020c13c <_dtoa_r+0x1284>
8020b820:	1d000003 	ldbu	r20,0(r3)
8020b824:	102f883a 	mov	r23,r2
8020b828:	10bfffc4 	addi	r2,r2,-1
8020b82c:	a1003fcc 	andi	r4,r20,255
8020b830:	2100201c 	xori	r4,r4,128
8020b834:	213fe004 	addi	r4,r4,-128
8020b838:	217ff726 	beq	r4,r5,8020b818 <__reset+0xfa1eb818>
8020b83c:	a2000044 	addi	r8,r20,1
8020b840:	12000005 	stb	r8,0(r2)
8020b844:	003f4606 	br	8020b560 <__reset+0xfa1eb560>
8020b848:	d9000b17 	ldw	r4,44(sp)
8020b84c:	2000c826 	beq	r4,zero,8020bb70 <_dtoa_r+0xcb8>
8020b850:	d9800317 	ldw	r6,12(sp)
8020b854:	00c00044 	movi	r3,1
8020b858:	1980f90e 	bge	r3,r6,8020bc40 <_dtoa_r+0xd88>
8020b85c:	d8800617 	ldw	r2,24(sp)
8020b860:	d8c00a17 	ldw	r3,40(sp)
8020b864:	157fffc4 	addi	r21,r2,-1
8020b868:	1d41f316 	blt	r3,r21,8020c038 <_dtoa_r+0x1180>
8020b86c:	1d6bc83a 	sub	r21,r3,r21
8020b870:	d9c00617 	ldw	r7,24(sp)
8020b874:	3802aa16 	blt	r7,zero,8020c320 <_dtoa_r+0x1468>
8020b878:	dd000817 	ldw	r20,32(sp)
8020b87c:	d8800617 	ldw	r2,24(sp)
8020b880:	d8c00817 	ldw	r3,32(sp)
8020b884:	01400044 	movi	r5,1
8020b888:	e009883a 	mov	r4,fp
8020b88c:	1887883a 	add	r3,r3,r2
8020b890:	d8c00815 	stw	r3,32(sp)
8020b894:	b0ad883a 	add	r22,r22,r2
8020b898:	020e8180 	call	8020e818 <__i2b>
8020b89c:	1023883a 	mov	r17,r2
8020b8a0:	a0000826 	beq	r20,zero,8020b8c4 <_dtoa_r+0xa0c>
8020b8a4:	0580070e 	bge	zero,r22,8020b8c4 <_dtoa_r+0xa0c>
8020b8a8:	a005883a 	mov	r2,r20
8020b8ac:	b500b916 	blt	r22,r20,8020bb94 <_dtoa_r+0xcdc>
8020b8b0:	d9000817 	ldw	r4,32(sp)
8020b8b4:	a0a9c83a 	sub	r20,r20,r2
8020b8b8:	b0adc83a 	sub	r22,r22,r2
8020b8bc:	2089c83a 	sub	r4,r4,r2
8020b8c0:	d9000815 	stw	r4,32(sp)
8020b8c4:	d9800a17 	ldw	r6,40(sp)
8020b8c8:	0181810e 	bge	zero,r6,8020bed0 <_dtoa_r+0x1018>
8020b8cc:	d9c00b17 	ldw	r7,44(sp)
8020b8d0:	3800b326 	beq	r7,zero,8020bba0 <_dtoa_r+0xce8>
8020b8d4:	a800b226 	beq	r21,zero,8020bba0 <_dtoa_r+0xce8>
8020b8d8:	880b883a 	mov	r5,r17
8020b8dc:	a80d883a 	mov	r6,r21
8020b8e0:	e009883a 	mov	r4,fp
8020b8e4:	020ea4c0 	call	8020ea4c <__pow5mult>
8020b8e8:	d9800917 	ldw	r6,36(sp)
8020b8ec:	100b883a 	mov	r5,r2
8020b8f0:	e009883a 	mov	r4,fp
8020b8f4:	1023883a 	mov	r17,r2
8020b8f8:	020e8540 	call	8020e854 <__multiply>
8020b8fc:	1021883a 	mov	r16,r2
8020b900:	d8800a17 	ldw	r2,40(sp)
8020b904:	d9400917 	ldw	r5,36(sp)
8020b908:	e009883a 	mov	r4,fp
8020b90c:	1545c83a 	sub	r2,r2,r21
8020b910:	d8800a15 	stw	r2,40(sp)
8020b914:	020e4b40 	call	8020e4b4 <_Bfree>
8020b918:	d8c00a17 	ldw	r3,40(sp)
8020b91c:	18009f1e 	bne	r3,zero,8020bb9c <_dtoa_r+0xce4>
8020b920:	05c00044 	movi	r23,1
8020b924:	e009883a 	mov	r4,fp
8020b928:	b80b883a 	mov	r5,r23
8020b92c:	020e8180 	call	8020e818 <__i2b>
8020b930:	d9000d17 	ldw	r4,52(sp)
8020b934:	102b883a 	mov	r21,r2
8020b938:	2000ce26 	beq	r4,zero,8020bc74 <_dtoa_r+0xdbc>
8020b93c:	200d883a 	mov	r6,r4
8020b940:	100b883a 	mov	r5,r2
8020b944:	e009883a 	mov	r4,fp
8020b948:	020ea4c0 	call	8020ea4c <__pow5mult>
8020b94c:	d9800317 	ldw	r6,12(sp)
8020b950:	102b883a 	mov	r21,r2
8020b954:	b981810e 	bge	r23,r6,8020bf5c <_dtoa_r+0x10a4>
8020b958:	0027883a 	mov	r19,zero
8020b95c:	a8800417 	ldw	r2,16(r21)
8020b960:	05c00804 	movi	r23,32
8020b964:	10800104 	addi	r2,r2,4
8020b968:	1085883a 	add	r2,r2,r2
8020b96c:	1085883a 	add	r2,r2,r2
8020b970:	a885883a 	add	r2,r21,r2
8020b974:	11000017 	ldw	r4,0(r2)
8020b978:	020e7000 	call	8020e700 <__hi0bits>
8020b97c:	b885c83a 	sub	r2,r23,r2
8020b980:	1585883a 	add	r2,r2,r22
8020b984:	108007cc 	andi	r2,r2,31
8020b988:	1000b326 	beq	r2,zero,8020bc58 <_dtoa_r+0xda0>
8020b98c:	00c00804 	movi	r3,32
8020b990:	1887c83a 	sub	r3,r3,r2
8020b994:	01000104 	movi	r4,4
8020b998:	20c2cd0e 	bge	r4,r3,8020c4d0 <_dtoa_r+0x1618>
8020b99c:	00c00704 	movi	r3,28
8020b9a0:	1885c83a 	sub	r2,r3,r2
8020b9a4:	d8c00817 	ldw	r3,32(sp)
8020b9a8:	a0a9883a 	add	r20,r20,r2
8020b9ac:	b0ad883a 	add	r22,r22,r2
8020b9b0:	1887883a 	add	r3,r3,r2
8020b9b4:	d8c00815 	stw	r3,32(sp)
8020b9b8:	d9800817 	ldw	r6,32(sp)
8020b9bc:	0180040e 	bge	zero,r6,8020b9d0 <_dtoa_r+0xb18>
8020b9c0:	800b883a 	mov	r5,r16
8020b9c4:	e009883a 	mov	r4,fp
8020b9c8:	020eb8c0 	call	8020eb8c <__lshift>
8020b9cc:	1021883a 	mov	r16,r2
8020b9d0:	0580050e 	bge	zero,r22,8020b9e8 <_dtoa_r+0xb30>
8020b9d4:	a80b883a 	mov	r5,r21
8020b9d8:	b00d883a 	mov	r6,r22
8020b9dc:	e009883a 	mov	r4,fp
8020b9e0:	020eb8c0 	call	8020eb8c <__lshift>
8020b9e4:	102b883a 	mov	r21,r2
8020b9e8:	d9c00e17 	ldw	r7,56(sp)
8020b9ec:	3801211e 	bne	r7,zero,8020be74 <_dtoa_r+0xfbc>
8020b9f0:	d9800617 	ldw	r6,24(sp)
8020b9f4:	0181380e 	bge	zero,r6,8020bed8 <_dtoa_r+0x1020>
8020b9f8:	d8c00b17 	ldw	r3,44(sp)
8020b9fc:	1800ab1e 	bne	r3,zero,8020bcac <_dtoa_r+0xdf4>
8020ba00:	dc800717 	ldw	r18,28(sp)
8020ba04:	dcc00617 	ldw	r19,24(sp)
8020ba08:	9029883a 	mov	r20,r18
8020ba0c:	00000206 	br	8020ba18 <_dtoa_r+0xb60>
8020ba10:	020e4dc0 	call	8020e4dc <__multadd>
8020ba14:	1021883a 	mov	r16,r2
8020ba18:	a80b883a 	mov	r5,r21
8020ba1c:	8009883a 	mov	r4,r16
8020ba20:	020acb80 	call	8020acb8 <quorem>
8020ba24:	10800c04 	addi	r2,r2,48
8020ba28:	90800005 	stb	r2,0(r18)
8020ba2c:	94800044 	addi	r18,r18,1
8020ba30:	9507c83a 	sub	r3,r18,r20
8020ba34:	000f883a 	mov	r7,zero
8020ba38:	01800284 	movi	r6,10
8020ba3c:	800b883a 	mov	r5,r16
8020ba40:	e009883a 	mov	r4,fp
8020ba44:	1cfff216 	blt	r3,r19,8020ba10 <__reset+0xfa1eba10>
8020ba48:	1011883a 	mov	r8,r2
8020ba4c:	d8800617 	ldw	r2,24(sp)
8020ba50:	0082370e 	bge	zero,r2,8020c330 <_dtoa_r+0x1478>
8020ba54:	d9000717 	ldw	r4,28(sp)
8020ba58:	0025883a 	mov	r18,zero
8020ba5c:	20af883a 	add	r23,r4,r2
8020ba60:	01800044 	movi	r6,1
8020ba64:	800b883a 	mov	r5,r16
8020ba68:	e009883a 	mov	r4,fp
8020ba6c:	da001715 	stw	r8,92(sp)
8020ba70:	020eb8c0 	call	8020eb8c <__lshift>
8020ba74:	a80b883a 	mov	r5,r21
8020ba78:	1009883a 	mov	r4,r2
8020ba7c:	d8800915 	stw	r2,36(sp)
8020ba80:	020ecd40 	call	8020ecd4 <__mcmp>
8020ba84:	da001717 	ldw	r8,92(sp)
8020ba88:	0081800e 	bge	zero,r2,8020c08c <_dtoa_r+0x11d4>
8020ba8c:	b93fffc3 	ldbu	r4,-1(r23)
8020ba90:	b8bfffc4 	addi	r2,r23,-1
8020ba94:	1007883a 	mov	r3,r2
8020ba98:	01800e44 	movi	r6,57
8020ba9c:	d9c00717 	ldw	r7,28(sp)
8020baa0:	00000506 	br	8020bab8 <_dtoa_r+0xc00>
8020baa4:	18ffffc4 	addi	r3,r3,-1
8020baa8:	11c12326 	beq	r2,r7,8020bf38 <_dtoa_r+0x1080>
8020baac:	19000003 	ldbu	r4,0(r3)
8020bab0:	102f883a 	mov	r23,r2
8020bab4:	10bfffc4 	addi	r2,r2,-1
8020bab8:	21403fcc 	andi	r5,r4,255
8020babc:	2940201c 	xori	r5,r5,128
8020bac0:	297fe004 	addi	r5,r5,-128
8020bac4:	29bff726 	beq	r5,r6,8020baa4 <__reset+0xfa1ebaa4>
8020bac8:	21000044 	addi	r4,r4,1
8020bacc:	11000005 	stb	r4,0(r2)
8020bad0:	a80b883a 	mov	r5,r21
8020bad4:	e009883a 	mov	r4,fp
8020bad8:	020e4b40 	call	8020e4b4 <_Bfree>
8020badc:	883ea026 	beq	r17,zero,8020b560 <__reset+0xfa1eb560>
8020bae0:	90000426 	beq	r18,zero,8020baf4 <_dtoa_r+0xc3c>
8020bae4:	94400326 	beq	r18,r17,8020baf4 <_dtoa_r+0xc3c>
8020bae8:	900b883a 	mov	r5,r18
8020baec:	e009883a 	mov	r4,fp
8020baf0:	020e4b40 	call	8020e4b4 <_Bfree>
8020baf4:	880b883a 	mov	r5,r17
8020baf8:	e009883a 	mov	r4,fp
8020bafc:	020e4b40 	call	8020e4b4 <_Bfree>
8020bb00:	003e9706 	br	8020b560 <__reset+0xfa1eb560>
8020bb04:	01800044 	movi	r6,1
8020bb08:	d9800e15 	stw	r6,56(sp)
8020bb0c:	003d9606 	br	8020b168 <__reset+0xfa1eb168>
8020bb10:	d8800817 	ldw	r2,32(sp)
8020bb14:	d8c00517 	ldw	r3,20(sp)
8020bb18:	d8000d15 	stw	zero,52(sp)
8020bb1c:	10c5c83a 	sub	r2,r2,r3
8020bb20:	00c9c83a 	sub	r4,zero,r3
8020bb24:	d8800815 	stw	r2,32(sp)
8020bb28:	d9000a15 	stw	r4,40(sp)
8020bb2c:	003d9706 	br	8020b18c <__reset+0xfa1eb18c>
8020bb30:	05adc83a 	sub	r22,zero,r22
8020bb34:	dd800815 	stw	r22,32(sp)
8020bb38:	002d883a 	mov	r22,zero
8020bb3c:	003d8e06 	br	8020b178 <__reset+0xfa1eb178>
8020bb40:	d9000517 	ldw	r4,20(sp)
8020bb44:	02160b80 	call	802160b8 <__floatsidf>
8020bb48:	100d883a 	mov	r6,r2
8020bb4c:	180f883a 	mov	r7,r3
8020bb50:	a009883a 	mov	r4,r20
8020bb54:	880b883a 	mov	r5,r17
8020bb58:	0214dcc0 	call	80214dcc <__eqdf2>
8020bb5c:	103d7126 	beq	r2,zero,8020b124 <__reset+0xfa1eb124>
8020bb60:	d9c00517 	ldw	r7,20(sp)
8020bb64:	39ffffc4 	addi	r7,r7,-1
8020bb68:	d9c00515 	stw	r7,20(sp)
8020bb6c:	003d6d06 	br	8020b124 <__reset+0xfa1eb124>
8020bb70:	dd400a17 	ldw	r21,40(sp)
8020bb74:	dd000817 	ldw	r20,32(sp)
8020bb78:	0023883a 	mov	r17,zero
8020bb7c:	003f4806 	br	8020b8a0 <__reset+0xfa1eb8a0>
8020bb80:	10e3c83a 	sub	r17,r2,r3
8020bb84:	9448983a 	sll	r4,r18,r17
8020bb88:	003d3206 	br	8020b054 <__reset+0xfa1eb054>
8020bb8c:	d8000e15 	stw	zero,56(sp)
8020bb90:	003d7506 	br	8020b168 <__reset+0xfa1eb168>
8020bb94:	b005883a 	mov	r2,r22
8020bb98:	003f4506 	br	8020b8b0 <__reset+0xfa1eb8b0>
8020bb9c:	dc000915 	stw	r16,36(sp)
8020bba0:	d9800a17 	ldw	r6,40(sp)
8020bba4:	d9400917 	ldw	r5,36(sp)
8020bba8:	e009883a 	mov	r4,fp
8020bbac:	020ea4c0 	call	8020ea4c <__pow5mult>
8020bbb0:	1021883a 	mov	r16,r2
8020bbb4:	003f5a06 	br	8020b920 <__reset+0xfa1eb920>
8020bbb8:	01c00044 	movi	r7,1
8020bbbc:	d9c00b15 	stw	r7,44(sp)
8020bbc0:	d8802217 	ldw	r2,136(sp)
8020bbc4:	0081280e 	bge	zero,r2,8020c068 <_dtoa_r+0x11b0>
8020bbc8:	100d883a 	mov	r6,r2
8020bbcc:	1021883a 	mov	r16,r2
8020bbd0:	d8800c15 	stw	r2,48(sp)
8020bbd4:	d8800615 	stw	r2,24(sp)
8020bbd8:	003d8806 	br	8020b1fc <__reset+0xfa1eb1fc>
8020bbdc:	d8800617 	ldw	r2,24(sp)
8020bbe0:	00be9b16 	blt	zero,r2,8020b650 <__reset+0xfa1eb650>
8020bbe4:	10010f1e 	bne	r2,zero,8020c024 <_dtoa_r+0x116c>
8020bbe8:	880b883a 	mov	r5,r17
8020bbec:	000d883a 	mov	r6,zero
8020bbf0:	01d00534 	movhi	r7,16404
8020bbf4:	8009883a 	mov	r4,r16
8020bbf8:	02150240 	call	80215024 <__muldf3>
8020bbfc:	900d883a 	mov	r6,r18
8020bc00:	980f883a 	mov	r7,r19
8020bc04:	1009883a 	mov	r4,r2
8020bc08:	180b883a 	mov	r5,r3
8020bc0c:	0214e540 	call	80214e54 <__gedf2>
8020bc10:	002b883a 	mov	r21,zero
8020bc14:	0023883a 	mov	r17,zero
8020bc18:	1000bf16 	blt	r2,zero,8020bf18 <_dtoa_r+0x1060>
8020bc1c:	d9802217 	ldw	r6,136(sp)
8020bc20:	ddc00717 	ldw	r23,28(sp)
8020bc24:	018c303a 	nor	r6,zero,r6
8020bc28:	d9800515 	stw	r6,20(sp)
8020bc2c:	a80b883a 	mov	r5,r21
8020bc30:	e009883a 	mov	r4,fp
8020bc34:	020e4b40 	call	8020e4b4 <_Bfree>
8020bc38:	883e4926 	beq	r17,zero,8020b560 <__reset+0xfa1eb560>
8020bc3c:	003fad06 	br	8020baf4 <__reset+0xfa1ebaf4>
8020bc40:	d9c01117 	ldw	r7,68(sp)
8020bc44:	3801bc26 	beq	r7,zero,8020c338 <_dtoa_r+0x1480>
8020bc48:	10810cc4 	addi	r2,r2,1075
8020bc4c:	dd400a17 	ldw	r21,40(sp)
8020bc50:	dd000817 	ldw	r20,32(sp)
8020bc54:	003f0a06 	br	8020b880 <__reset+0xfa1eb880>
8020bc58:	00800704 	movi	r2,28
8020bc5c:	d9000817 	ldw	r4,32(sp)
8020bc60:	a0a9883a 	add	r20,r20,r2
8020bc64:	b0ad883a 	add	r22,r22,r2
8020bc68:	2089883a 	add	r4,r4,r2
8020bc6c:	d9000815 	stw	r4,32(sp)
8020bc70:	003f5106 	br	8020b9b8 <__reset+0xfa1eb9b8>
8020bc74:	d8c00317 	ldw	r3,12(sp)
8020bc78:	b8c1fc0e 	bge	r23,r3,8020c46c <_dtoa_r+0x15b4>
8020bc7c:	0027883a 	mov	r19,zero
8020bc80:	b805883a 	mov	r2,r23
8020bc84:	003f3e06 	br	8020b980 <__reset+0xfa1eb980>
8020bc88:	880b883a 	mov	r5,r17
8020bc8c:	e009883a 	mov	r4,fp
8020bc90:	000f883a 	mov	r7,zero
8020bc94:	01800284 	movi	r6,10
8020bc98:	020e4dc0 	call	8020e4dc <__multadd>
8020bc9c:	d9000c17 	ldw	r4,48(sp)
8020bca0:	1023883a 	mov	r17,r2
8020bca4:	0102040e 	bge	zero,r4,8020c4b8 <_dtoa_r+0x1600>
8020bca8:	d9000615 	stw	r4,24(sp)
8020bcac:	0500050e 	bge	zero,r20,8020bcc4 <_dtoa_r+0xe0c>
8020bcb0:	880b883a 	mov	r5,r17
8020bcb4:	a00d883a 	mov	r6,r20
8020bcb8:	e009883a 	mov	r4,fp
8020bcbc:	020eb8c0 	call	8020eb8c <__lshift>
8020bcc0:	1023883a 	mov	r17,r2
8020bcc4:	9801241e 	bne	r19,zero,8020c158 <_dtoa_r+0x12a0>
8020bcc8:	8829883a 	mov	r20,r17
8020bccc:	d9000617 	ldw	r4,24(sp)
8020bcd0:	dcc00717 	ldw	r19,28(sp)
8020bcd4:	9480004c 	andi	r18,r18,1
8020bcd8:	20bfffc4 	addi	r2,r4,-1
8020bcdc:	9885883a 	add	r2,r19,r2
8020bce0:	d8800415 	stw	r2,16(sp)
8020bce4:	dc800615 	stw	r18,24(sp)
8020bce8:	a80b883a 	mov	r5,r21
8020bcec:	8009883a 	mov	r4,r16
8020bcf0:	020acb80 	call	8020acb8 <quorem>
8020bcf4:	880b883a 	mov	r5,r17
8020bcf8:	8009883a 	mov	r4,r16
8020bcfc:	102f883a 	mov	r23,r2
8020bd00:	020ecd40 	call	8020ecd4 <__mcmp>
8020bd04:	a80b883a 	mov	r5,r21
8020bd08:	a00d883a 	mov	r6,r20
8020bd0c:	e009883a 	mov	r4,fp
8020bd10:	102d883a 	mov	r22,r2
8020bd14:	020ed340 	call	8020ed34 <__mdiff>
8020bd18:	1007883a 	mov	r3,r2
8020bd1c:	10800317 	ldw	r2,12(r2)
8020bd20:	bc800c04 	addi	r18,r23,48
8020bd24:	180b883a 	mov	r5,r3
8020bd28:	10004e1e 	bne	r2,zero,8020be64 <_dtoa_r+0xfac>
8020bd2c:	8009883a 	mov	r4,r16
8020bd30:	d8c01615 	stw	r3,88(sp)
8020bd34:	020ecd40 	call	8020ecd4 <__mcmp>
8020bd38:	d8c01617 	ldw	r3,88(sp)
8020bd3c:	e009883a 	mov	r4,fp
8020bd40:	d8801615 	stw	r2,88(sp)
8020bd44:	180b883a 	mov	r5,r3
8020bd48:	020e4b40 	call	8020e4b4 <_Bfree>
8020bd4c:	d8801617 	ldw	r2,88(sp)
8020bd50:	1000041e 	bne	r2,zero,8020bd64 <_dtoa_r+0xeac>
8020bd54:	d9800317 	ldw	r6,12(sp)
8020bd58:	3000021e 	bne	r6,zero,8020bd64 <_dtoa_r+0xeac>
8020bd5c:	d8c00617 	ldw	r3,24(sp)
8020bd60:	18003726 	beq	r3,zero,8020be40 <_dtoa_r+0xf88>
8020bd64:	b0002016 	blt	r22,zero,8020bde8 <_dtoa_r+0xf30>
8020bd68:	b000041e 	bne	r22,zero,8020bd7c <_dtoa_r+0xec4>
8020bd6c:	d9000317 	ldw	r4,12(sp)
8020bd70:	2000021e 	bne	r4,zero,8020bd7c <_dtoa_r+0xec4>
8020bd74:	d8c00617 	ldw	r3,24(sp)
8020bd78:	18001b26 	beq	r3,zero,8020bde8 <_dtoa_r+0xf30>
8020bd7c:	00810716 	blt	zero,r2,8020c19c <_dtoa_r+0x12e4>
8020bd80:	d8c00417 	ldw	r3,16(sp)
8020bd84:	9d800044 	addi	r22,r19,1
8020bd88:	9c800005 	stb	r18,0(r19)
8020bd8c:	b02f883a 	mov	r23,r22
8020bd90:	98c10626 	beq	r19,r3,8020c1ac <_dtoa_r+0x12f4>
8020bd94:	800b883a 	mov	r5,r16
8020bd98:	000f883a 	mov	r7,zero
8020bd9c:	01800284 	movi	r6,10
8020bda0:	e009883a 	mov	r4,fp
8020bda4:	020e4dc0 	call	8020e4dc <__multadd>
8020bda8:	1021883a 	mov	r16,r2
8020bdac:	000f883a 	mov	r7,zero
8020bdb0:	01800284 	movi	r6,10
8020bdb4:	880b883a 	mov	r5,r17
8020bdb8:	e009883a 	mov	r4,fp
8020bdbc:	8d002526 	beq	r17,r20,8020be54 <_dtoa_r+0xf9c>
8020bdc0:	020e4dc0 	call	8020e4dc <__multadd>
8020bdc4:	a00b883a 	mov	r5,r20
8020bdc8:	000f883a 	mov	r7,zero
8020bdcc:	01800284 	movi	r6,10
8020bdd0:	e009883a 	mov	r4,fp
8020bdd4:	1023883a 	mov	r17,r2
8020bdd8:	020e4dc0 	call	8020e4dc <__multadd>
8020bddc:	1029883a 	mov	r20,r2
8020bde0:	b027883a 	mov	r19,r22
8020bde4:	003fc006 	br	8020bce8 <__reset+0xfa1ebce8>
8020bde8:	9011883a 	mov	r8,r18
8020bdec:	00800e0e 	bge	zero,r2,8020be28 <_dtoa_r+0xf70>
8020bdf0:	800b883a 	mov	r5,r16
8020bdf4:	01800044 	movi	r6,1
8020bdf8:	e009883a 	mov	r4,fp
8020bdfc:	da001715 	stw	r8,92(sp)
8020be00:	020eb8c0 	call	8020eb8c <__lshift>
8020be04:	a80b883a 	mov	r5,r21
8020be08:	1009883a 	mov	r4,r2
8020be0c:	1021883a 	mov	r16,r2
8020be10:	020ecd40 	call	8020ecd4 <__mcmp>
8020be14:	da001717 	ldw	r8,92(sp)
8020be18:	0081960e 	bge	zero,r2,8020c474 <_dtoa_r+0x15bc>
8020be1c:	00800e44 	movi	r2,57
8020be20:	40817026 	beq	r8,r2,8020c3e4 <_dtoa_r+0x152c>
8020be24:	ba000c44 	addi	r8,r23,49
8020be28:	8825883a 	mov	r18,r17
8020be2c:	9dc00044 	addi	r23,r19,1
8020be30:	9a000005 	stb	r8,0(r19)
8020be34:	a023883a 	mov	r17,r20
8020be38:	dc000915 	stw	r16,36(sp)
8020be3c:	003f2406 	br	8020bad0 <__reset+0xfa1ebad0>
8020be40:	00800e44 	movi	r2,57
8020be44:	9011883a 	mov	r8,r18
8020be48:	90816626 	beq	r18,r2,8020c3e4 <_dtoa_r+0x152c>
8020be4c:	05bff516 	blt	zero,r22,8020be24 <__reset+0xfa1ebe24>
8020be50:	003ff506 	br	8020be28 <__reset+0xfa1ebe28>
8020be54:	020e4dc0 	call	8020e4dc <__multadd>
8020be58:	1023883a 	mov	r17,r2
8020be5c:	1029883a 	mov	r20,r2
8020be60:	003fdf06 	br	8020bde0 <__reset+0xfa1ebde0>
8020be64:	e009883a 	mov	r4,fp
8020be68:	020e4b40 	call	8020e4b4 <_Bfree>
8020be6c:	00800044 	movi	r2,1
8020be70:	003fbc06 	br	8020bd64 <__reset+0xfa1ebd64>
8020be74:	a80b883a 	mov	r5,r21
8020be78:	8009883a 	mov	r4,r16
8020be7c:	020ecd40 	call	8020ecd4 <__mcmp>
8020be80:	103edb0e 	bge	r2,zero,8020b9f0 <__reset+0xfa1eb9f0>
8020be84:	800b883a 	mov	r5,r16
8020be88:	000f883a 	mov	r7,zero
8020be8c:	01800284 	movi	r6,10
8020be90:	e009883a 	mov	r4,fp
8020be94:	020e4dc0 	call	8020e4dc <__multadd>
8020be98:	1021883a 	mov	r16,r2
8020be9c:	d8800517 	ldw	r2,20(sp)
8020bea0:	d8c00b17 	ldw	r3,44(sp)
8020bea4:	10bfffc4 	addi	r2,r2,-1
8020bea8:	d8800515 	stw	r2,20(sp)
8020beac:	183f761e 	bne	r3,zero,8020bc88 <__reset+0xfa1ebc88>
8020beb0:	d9000c17 	ldw	r4,48(sp)
8020beb4:	0101730e 	bge	zero,r4,8020c484 <_dtoa_r+0x15cc>
8020beb8:	d9000615 	stw	r4,24(sp)
8020bebc:	003ed006 	br	8020ba00 <__reset+0xfa1eba00>
8020bec0:	00800084 	movi	r2,2
8020bec4:	3081861e 	bne	r6,r2,8020c4e0 <_dtoa_r+0x1628>
8020bec8:	d8000b15 	stw	zero,44(sp)
8020becc:	003f3c06 	br	8020bbc0 <__reset+0xfa1ebbc0>
8020bed0:	dc000917 	ldw	r16,36(sp)
8020bed4:	003e9206 	br	8020b920 <__reset+0xfa1eb920>
8020bed8:	d9c00317 	ldw	r7,12(sp)
8020bedc:	00800084 	movi	r2,2
8020bee0:	11fec50e 	bge	r2,r7,8020b9f8 <__reset+0xfa1eb9f8>
8020bee4:	d9000617 	ldw	r4,24(sp)
8020bee8:	20013c1e 	bne	r4,zero,8020c3dc <_dtoa_r+0x1524>
8020beec:	a80b883a 	mov	r5,r21
8020bef0:	000f883a 	mov	r7,zero
8020bef4:	01800144 	movi	r6,5
8020bef8:	e009883a 	mov	r4,fp
8020befc:	020e4dc0 	call	8020e4dc <__multadd>
8020bf00:	100b883a 	mov	r5,r2
8020bf04:	8009883a 	mov	r4,r16
8020bf08:	102b883a 	mov	r21,r2
8020bf0c:	020ecd40 	call	8020ecd4 <__mcmp>
8020bf10:	dc000915 	stw	r16,36(sp)
8020bf14:	00bf410e 	bge	zero,r2,8020bc1c <__reset+0xfa1ebc1c>
8020bf18:	d9c00717 	ldw	r7,28(sp)
8020bf1c:	00800c44 	movi	r2,49
8020bf20:	38800005 	stb	r2,0(r7)
8020bf24:	d8800517 	ldw	r2,20(sp)
8020bf28:	3dc00044 	addi	r23,r7,1
8020bf2c:	10800044 	addi	r2,r2,1
8020bf30:	d8800515 	stw	r2,20(sp)
8020bf34:	003f3d06 	br	8020bc2c <__reset+0xfa1ebc2c>
8020bf38:	d9800517 	ldw	r6,20(sp)
8020bf3c:	d9c00717 	ldw	r7,28(sp)
8020bf40:	00800c44 	movi	r2,49
8020bf44:	31800044 	addi	r6,r6,1
8020bf48:	d9800515 	stw	r6,20(sp)
8020bf4c:	38800005 	stb	r2,0(r7)
8020bf50:	003edf06 	br	8020bad0 <__reset+0xfa1ebad0>
8020bf54:	d8000b15 	stw	zero,44(sp)
8020bf58:	003c9f06 	br	8020b1d8 <__reset+0xfa1eb1d8>
8020bf5c:	903e7e1e 	bne	r18,zero,8020b958 <__reset+0xfa1eb958>
8020bf60:	00800434 	movhi	r2,16
8020bf64:	10bfffc4 	addi	r2,r2,-1
8020bf68:	9884703a 	and	r2,r19,r2
8020bf6c:	1000ea1e 	bne	r2,zero,8020c318 <_dtoa_r+0x1460>
8020bf70:	9cdffc2c 	andhi	r19,r19,32752
8020bf74:	9800e826 	beq	r19,zero,8020c318 <_dtoa_r+0x1460>
8020bf78:	d9c00817 	ldw	r7,32(sp)
8020bf7c:	b5800044 	addi	r22,r22,1
8020bf80:	04c00044 	movi	r19,1
8020bf84:	39c00044 	addi	r7,r7,1
8020bf88:	d9c00815 	stw	r7,32(sp)
8020bf8c:	d8800d17 	ldw	r2,52(sp)
8020bf90:	103e721e 	bne	r2,zero,8020b95c <__reset+0xfa1eb95c>
8020bf94:	00800044 	movi	r2,1
8020bf98:	003e7906 	br	8020b980 <__reset+0xfa1eb980>
8020bf9c:	8009883a 	mov	r4,r16
8020bfa0:	02160b80 	call	802160b8 <__floatsidf>
8020bfa4:	d9800f17 	ldw	r6,60(sp)
8020bfa8:	d9c01017 	ldw	r7,64(sp)
8020bfac:	1009883a 	mov	r4,r2
8020bfb0:	180b883a 	mov	r5,r3
8020bfb4:	02150240 	call	80215024 <__muldf3>
8020bfb8:	000d883a 	mov	r6,zero
8020bfbc:	01d00734 	movhi	r7,16412
8020bfc0:	1009883a 	mov	r4,r2
8020bfc4:	180b883a 	mov	r5,r3
8020bfc8:	0213c380 	call	80213c38 <__adddf3>
8020bfcc:	047f3034 	movhi	r17,64704
8020bfd0:	1021883a 	mov	r16,r2
8020bfd4:	1c63883a 	add	r17,r3,r17
8020bfd8:	d9000f17 	ldw	r4,60(sp)
8020bfdc:	d9401017 	ldw	r5,64(sp)
8020bfe0:	000d883a 	mov	r6,zero
8020bfe4:	01d00534 	movhi	r7,16404
8020bfe8:	021573c0 	call	8021573c <__subdf3>
8020bfec:	800d883a 	mov	r6,r16
8020bff0:	880f883a 	mov	r7,r17
8020bff4:	1009883a 	mov	r4,r2
8020bff8:	180b883a 	mov	r5,r3
8020bffc:	102b883a 	mov	r21,r2
8020c000:	1829883a 	mov	r20,r3
8020c004:	0214e540 	call	80214e54 <__gedf2>
8020c008:	00806c16 	blt	zero,r2,8020c1bc <_dtoa_r+0x1304>
8020c00c:	89e0003c 	xorhi	r7,r17,32768
8020c010:	800d883a 	mov	r6,r16
8020c014:	a809883a 	mov	r4,r21
8020c018:	a00b883a 	mov	r5,r20
8020c01c:	0214f300 	call	80214f30 <__ledf2>
8020c020:	103d7e0e 	bge	r2,zero,8020b61c <__reset+0xfa1eb61c>
8020c024:	002b883a 	mov	r21,zero
8020c028:	0023883a 	mov	r17,zero
8020c02c:	003efb06 	br	8020bc1c <__reset+0xfa1ebc1c>
8020c030:	d8800717 	ldw	r2,28(sp)
8020c034:	003bd006 	br	8020af78 <__reset+0xfa1eaf78>
8020c038:	d9000a17 	ldw	r4,40(sp)
8020c03c:	d9800d17 	ldw	r6,52(sp)
8020c040:	dd400a15 	stw	r21,40(sp)
8020c044:	a905c83a 	sub	r2,r21,r4
8020c048:	308d883a 	add	r6,r6,r2
8020c04c:	d9800d15 	stw	r6,52(sp)
8020c050:	002b883a 	mov	r21,zero
8020c054:	003e0606 	br	8020b870 <__reset+0xfa1eb870>
8020c058:	9023883a 	mov	r17,r18
8020c05c:	9829883a 	mov	r20,r19
8020c060:	04000084 	movi	r16,2
8020c064:	003c9206 	br	8020b2b0 <__reset+0xfa1eb2b0>
8020c068:	04000044 	movi	r16,1
8020c06c:	dc000c15 	stw	r16,48(sp)
8020c070:	dc000615 	stw	r16,24(sp)
8020c074:	dc002215 	stw	r16,136(sp)
8020c078:	e0001115 	stw	zero,68(fp)
8020c07c:	000b883a 	mov	r5,zero
8020c080:	003c6906 	br	8020b228 <__reset+0xfa1eb228>
8020c084:	3021883a 	mov	r16,r6
8020c088:	003ffb06 	br	8020c078 <__reset+0xfa1ec078>
8020c08c:	1000021e 	bne	r2,zero,8020c098 <_dtoa_r+0x11e0>
8020c090:	4200004c 	andi	r8,r8,1
8020c094:	403e7d1e 	bne	r8,zero,8020ba8c <__reset+0xfa1eba8c>
8020c098:	01000c04 	movi	r4,48
8020c09c:	00000106 	br	8020c0a4 <_dtoa_r+0x11ec>
8020c0a0:	102f883a 	mov	r23,r2
8020c0a4:	b8bfffc4 	addi	r2,r23,-1
8020c0a8:	10c00007 	ldb	r3,0(r2)
8020c0ac:	193ffc26 	beq	r3,r4,8020c0a0 <__reset+0xfa1ec0a0>
8020c0b0:	003e8706 	br	8020bad0 <__reset+0xfa1ebad0>
8020c0b4:	d8800517 	ldw	r2,20(sp)
8020c0b8:	00a3c83a 	sub	r17,zero,r2
8020c0bc:	8800a426 	beq	r17,zero,8020c350 <_dtoa_r+0x1498>
8020c0c0:	888003cc 	andi	r2,r17,15
8020c0c4:	100490fa 	slli	r2,r2,3
8020c0c8:	00e008b4 	movhi	r3,32802
8020c0cc:	18f42404 	addi	r3,r3,-12144
8020c0d0:	1885883a 	add	r2,r3,r2
8020c0d4:	11800017 	ldw	r6,0(r2)
8020c0d8:	11c00117 	ldw	r7,4(r2)
8020c0dc:	9009883a 	mov	r4,r18
8020c0e0:	980b883a 	mov	r5,r19
8020c0e4:	8823d13a 	srai	r17,r17,4
8020c0e8:	02150240 	call	80215024 <__muldf3>
8020c0ec:	d8800f15 	stw	r2,60(sp)
8020c0f0:	d8c01015 	stw	r3,64(sp)
8020c0f4:	8800e826 	beq	r17,zero,8020c498 <_dtoa_r+0x15e0>
8020c0f8:	052008b4 	movhi	r20,32802
8020c0fc:	a5341a04 	addi	r20,r20,-12184
8020c100:	04000084 	movi	r16,2
8020c104:	8980004c 	andi	r6,r17,1
8020c108:	1009883a 	mov	r4,r2
8020c10c:	8823d07a 	srai	r17,r17,1
8020c110:	180b883a 	mov	r5,r3
8020c114:	30000426 	beq	r6,zero,8020c128 <_dtoa_r+0x1270>
8020c118:	a1800017 	ldw	r6,0(r20)
8020c11c:	a1c00117 	ldw	r7,4(r20)
8020c120:	84000044 	addi	r16,r16,1
8020c124:	02150240 	call	80215024 <__muldf3>
8020c128:	a5000204 	addi	r20,r20,8
8020c12c:	883ff51e 	bne	r17,zero,8020c104 <__reset+0xfa1ec104>
8020c130:	d8800f15 	stw	r2,60(sp)
8020c134:	d8c01015 	stw	r3,64(sp)
8020c138:	003c7606 	br	8020b314 <__reset+0xfa1eb314>
8020c13c:	00c00c04 	movi	r3,48
8020c140:	10c00005 	stb	r3,0(r2)
8020c144:	d8c00517 	ldw	r3,20(sp)
8020c148:	bd3fffc3 	ldbu	r20,-1(r23)
8020c14c:	18c00044 	addi	r3,r3,1
8020c150:	d8c00515 	stw	r3,20(sp)
8020c154:	003db906 	br	8020b83c <__reset+0xfa1eb83c>
8020c158:	89400117 	ldw	r5,4(r17)
8020c15c:	e009883a 	mov	r4,fp
8020c160:	020e40c0 	call	8020e40c <_Balloc>
8020c164:	89800417 	ldw	r6,16(r17)
8020c168:	89400304 	addi	r5,r17,12
8020c16c:	11000304 	addi	r4,r2,12
8020c170:	31800084 	addi	r6,r6,2
8020c174:	318d883a 	add	r6,r6,r6
8020c178:	318d883a 	add	r6,r6,r6
8020c17c:	1027883a 	mov	r19,r2
8020c180:	02062d80 	call	802062d8 <memcpy>
8020c184:	01800044 	movi	r6,1
8020c188:	980b883a 	mov	r5,r19
8020c18c:	e009883a 	mov	r4,fp
8020c190:	020eb8c0 	call	8020eb8c <__lshift>
8020c194:	1029883a 	mov	r20,r2
8020c198:	003ecc06 	br	8020bccc <__reset+0xfa1ebccc>
8020c19c:	00800e44 	movi	r2,57
8020c1a0:	90809026 	beq	r18,r2,8020c3e4 <_dtoa_r+0x152c>
8020c1a4:	92000044 	addi	r8,r18,1
8020c1a8:	003f1f06 	br	8020be28 <__reset+0xfa1ebe28>
8020c1ac:	9011883a 	mov	r8,r18
8020c1b0:	8825883a 	mov	r18,r17
8020c1b4:	a023883a 	mov	r17,r20
8020c1b8:	003e2906 	br	8020ba60 <__reset+0xfa1eba60>
8020c1bc:	002b883a 	mov	r21,zero
8020c1c0:	0023883a 	mov	r17,zero
8020c1c4:	003f5406 	br	8020bf18 <__reset+0xfa1ebf18>
8020c1c8:	61bfffc4 	addi	r6,r12,-1
8020c1cc:	300490fa 	slli	r2,r6,3
8020c1d0:	00e008b4 	movhi	r3,32802
8020c1d4:	18f42404 	addi	r3,r3,-12144
8020c1d8:	1885883a 	add	r2,r3,r2
8020c1dc:	11000017 	ldw	r4,0(r2)
8020c1e0:	11400117 	ldw	r5,4(r2)
8020c1e4:	d8800717 	ldw	r2,28(sp)
8020c1e8:	880f883a 	mov	r7,r17
8020c1ec:	d9801215 	stw	r6,72(sp)
8020c1f0:	800d883a 	mov	r6,r16
8020c1f4:	db001615 	stw	r12,88(sp)
8020c1f8:	15c00044 	addi	r23,r2,1
8020c1fc:	02150240 	call	80215024 <__muldf3>
8020c200:	d9401017 	ldw	r5,64(sp)
8020c204:	d9000f17 	ldw	r4,60(sp)
8020c208:	d8c01515 	stw	r3,84(sp)
8020c20c:	d8801415 	stw	r2,80(sp)
8020c210:	02160380 	call	80216038 <__fixdfsi>
8020c214:	1009883a 	mov	r4,r2
8020c218:	1021883a 	mov	r16,r2
8020c21c:	02160b80 	call	802160b8 <__floatsidf>
8020c220:	d9000f17 	ldw	r4,60(sp)
8020c224:	d9401017 	ldw	r5,64(sp)
8020c228:	100d883a 	mov	r6,r2
8020c22c:	180f883a 	mov	r7,r3
8020c230:	021573c0 	call	8021573c <__subdf3>
8020c234:	1829883a 	mov	r20,r3
8020c238:	d8c00717 	ldw	r3,28(sp)
8020c23c:	84000c04 	addi	r16,r16,48
8020c240:	1023883a 	mov	r17,r2
8020c244:	1c000005 	stb	r16,0(r3)
8020c248:	db001617 	ldw	r12,88(sp)
8020c24c:	00800044 	movi	r2,1
8020c250:	60802226 	beq	r12,r2,8020c2dc <_dtoa_r+0x1424>
8020c254:	d9c00717 	ldw	r7,28(sp)
8020c258:	8805883a 	mov	r2,r17
8020c25c:	b82b883a 	mov	r21,r23
8020c260:	3b19883a 	add	r12,r7,r12
8020c264:	6023883a 	mov	r17,r12
8020c268:	a007883a 	mov	r3,r20
8020c26c:	dc800f15 	stw	r18,60(sp)
8020c270:	000d883a 	mov	r6,zero
8020c274:	01d00934 	movhi	r7,16420
8020c278:	1009883a 	mov	r4,r2
8020c27c:	180b883a 	mov	r5,r3
8020c280:	02150240 	call	80215024 <__muldf3>
8020c284:	180b883a 	mov	r5,r3
8020c288:	1009883a 	mov	r4,r2
8020c28c:	1829883a 	mov	r20,r3
8020c290:	1025883a 	mov	r18,r2
8020c294:	02160380 	call	80216038 <__fixdfsi>
8020c298:	1009883a 	mov	r4,r2
8020c29c:	1021883a 	mov	r16,r2
8020c2a0:	02160b80 	call	802160b8 <__floatsidf>
8020c2a4:	100d883a 	mov	r6,r2
8020c2a8:	180f883a 	mov	r7,r3
8020c2ac:	9009883a 	mov	r4,r18
8020c2b0:	a00b883a 	mov	r5,r20
8020c2b4:	84000c04 	addi	r16,r16,48
8020c2b8:	021573c0 	call	8021573c <__subdf3>
8020c2bc:	ad400044 	addi	r21,r21,1
8020c2c0:	ac3fffc5 	stb	r16,-1(r21)
8020c2c4:	ac7fea1e 	bne	r21,r17,8020c270 <__reset+0xfa1ec270>
8020c2c8:	1023883a 	mov	r17,r2
8020c2cc:	d8801217 	ldw	r2,72(sp)
8020c2d0:	dc800f17 	ldw	r18,60(sp)
8020c2d4:	1829883a 	mov	r20,r3
8020c2d8:	b8af883a 	add	r23,r23,r2
8020c2dc:	d9001417 	ldw	r4,80(sp)
8020c2e0:	d9401517 	ldw	r5,84(sp)
8020c2e4:	000d883a 	mov	r6,zero
8020c2e8:	01cff834 	movhi	r7,16352
8020c2ec:	0213c380 	call	80213c38 <__adddf3>
8020c2f0:	880d883a 	mov	r6,r17
8020c2f4:	a00f883a 	mov	r7,r20
8020c2f8:	1009883a 	mov	r4,r2
8020c2fc:	180b883a 	mov	r5,r3
8020c300:	0214f300 	call	80214f30 <__ledf2>
8020c304:	10003e0e 	bge	r2,zero,8020c400 <_dtoa_r+0x1548>
8020c308:	d9001317 	ldw	r4,76(sp)
8020c30c:	bd3fffc3 	ldbu	r20,-1(r23)
8020c310:	d9000515 	stw	r4,20(sp)
8020c314:	003d3b06 	br	8020b804 <__reset+0xfa1eb804>
8020c318:	0027883a 	mov	r19,zero
8020c31c:	003f1b06 	br	8020bf8c <__reset+0xfa1ebf8c>
8020c320:	d8800817 	ldw	r2,32(sp)
8020c324:	11e9c83a 	sub	r20,r2,r7
8020c328:	0005883a 	mov	r2,zero
8020c32c:	003d5406 	br	8020b880 <__reset+0xfa1eb880>
8020c330:	00800044 	movi	r2,1
8020c334:	003dc706 	br	8020ba54 <__reset+0xfa1eba54>
8020c338:	d8c00217 	ldw	r3,8(sp)
8020c33c:	00800d84 	movi	r2,54
8020c340:	dd400a17 	ldw	r21,40(sp)
8020c344:	10c5c83a 	sub	r2,r2,r3
8020c348:	dd000817 	ldw	r20,32(sp)
8020c34c:	003d4c06 	br	8020b880 <__reset+0xfa1eb880>
8020c350:	dc800f15 	stw	r18,60(sp)
8020c354:	dcc01015 	stw	r19,64(sp)
8020c358:	04000084 	movi	r16,2
8020c35c:	003bed06 	br	8020b314 <__reset+0xfa1eb314>
8020c360:	d9000617 	ldw	r4,24(sp)
8020c364:	203f0d26 	beq	r4,zero,8020bf9c <__reset+0xfa1ebf9c>
8020c368:	d9800c17 	ldw	r6,48(sp)
8020c36c:	01bcab0e 	bge	zero,r6,8020b61c <__reset+0xfa1eb61c>
8020c370:	d9401017 	ldw	r5,64(sp)
8020c374:	d9000f17 	ldw	r4,60(sp)
8020c378:	000d883a 	mov	r6,zero
8020c37c:	01d00934 	movhi	r7,16420
8020c380:	02150240 	call	80215024 <__muldf3>
8020c384:	81000044 	addi	r4,r16,1
8020c388:	d8800f15 	stw	r2,60(sp)
8020c38c:	d8c01015 	stw	r3,64(sp)
8020c390:	02160b80 	call	802160b8 <__floatsidf>
8020c394:	d9800f17 	ldw	r6,60(sp)
8020c398:	d9c01017 	ldw	r7,64(sp)
8020c39c:	1009883a 	mov	r4,r2
8020c3a0:	180b883a 	mov	r5,r3
8020c3a4:	02150240 	call	80215024 <__muldf3>
8020c3a8:	01d00734 	movhi	r7,16412
8020c3ac:	000d883a 	mov	r6,zero
8020c3b0:	1009883a 	mov	r4,r2
8020c3b4:	180b883a 	mov	r5,r3
8020c3b8:	0213c380 	call	80213c38 <__adddf3>
8020c3bc:	d9c00517 	ldw	r7,20(sp)
8020c3c0:	047f3034 	movhi	r17,64704
8020c3c4:	1021883a 	mov	r16,r2
8020c3c8:	39ffffc4 	addi	r7,r7,-1
8020c3cc:	d9c01315 	stw	r7,76(sp)
8020c3d0:	1c63883a 	add	r17,r3,r17
8020c3d4:	db000c17 	ldw	r12,48(sp)
8020c3d8:	003bea06 	br	8020b384 <__reset+0xfa1eb384>
8020c3dc:	dc000915 	stw	r16,36(sp)
8020c3e0:	003e0e06 	br	8020bc1c <__reset+0xfa1ebc1c>
8020c3e4:	01000e44 	movi	r4,57
8020c3e8:	8825883a 	mov	r18,r17
8020c3ec:	9dc00044 	addi	r23,r19,1
8020c3f0:	99000005 	stb	r4,0(r19)
8020c3f4:	a023883a 	mov	r17,r20
8020c3f8:	dc000915 	stw	r16,36(sp)
8020c3fc:	003da406 	br	8020ba90 <__reset+0xfa1eba90>
8020c400:	d9801417 	ldw	r6,80(sp)
8020c404:	d9c01517 	ldw	r7,84(sp)
8020c408:	0009883a 	mov	r4,zero
8020c40c:	014ff834 	movhi	r5,16352
8020c410:	021573c0 	call	8021573c <__subdf3>
8020c414:	880d883a 	mov	r6,r17
8020c418:	a00f883a 	mov	r7,r20
8020c41c:	1009883a 	mov	r4,r2
8020c420:	180b883a 	mov	r5,r3
8020c424:	0214e540 	call	80214e54 <__gedf2>
8020c428:	00bc7c0e 	bge	zero,r2,8020b61c <__reset+0xfa1eb61c>
8020c42c:	01000c04 	movi	r4,48
8020c430:	00000106 	br	8020c438 <_dtoa_r+0x1580>
8020c434:	102f883a 	mov	r23,r2
8020c438:	b8bfffc4 	addi	r2,r23,-1
8020c43c:	10c00007 	ldb	r3,0(r2)
8020c440:	193ffc26 	beq	r3,r4,8020c434 <__reset+0xfa1ec434>
8020c444:	d9801317 	ldw	r6,76(sp)
8020c448:	d9800515 	stw	r6,20(sp)
8020c44c:	003c4406 	br	8020b560 <__reset+0xfa1eb560>
8020c450:	d9801317 	ldw	r6,76(sp)
8020c454:	d9800515 	stw	r6,20(sp)
8020c458:	003cea06 	br	8020b804 <__reset+0xfa1eb804>
8020c45c:	dd800f17 	ldw	r22,60(sp)
8020c460:	dcc01017 	ldw	r19,64(sp)
8020c464:	dc801217 	ldw	r18,72(sp)
8020c468:	003c6c06 	br	8020b61c <__reset+0xfa1eb61c>
8020c46c:	903e031e 	bne	r18,zero,8020bc7c <__reset+0xfa1ebc7c>
8020c470:	003ebb06 	br	8020bf60 <__reset+0xfa1ebf60>
8020c474:	103e6c1e 	bne	r2,zero,8020be28 <__reset+0xfa1ebe28>
8020c478:	4080004c 	andi	r2,r8,1
8020c47c:	103e6a26 	beq	r2,zero,8020be28 <__reset+0xfa1ebe28>
8020c480:	003e6606 	br	8020be1c <__reset+0xfa1ebe1c>
8020c484:	d8c00317 	ldw	r3,12(sp)
8020c488:	00800084 	movi	r2,2
8020c48c:	10c02916 	blt	r2,r3,8020c534 <_dtoa_r+0x167c>
8020c490:	d9000c17 	ldw	r4,48(sp)
8020c494:	003e8806 	br	8020beb8 <__reset+0xfa1ebeb8>
8020c498:	04000084 	movi	r16,2
8020c49c:	003b9d06 	br	8020b314 <__reset+0xfa1eb314>
8020c4a0:	d9001317 	ldw	r4,76(sp)
8020c4a4:	d9000515 	stw	r4,20(sp)
8020c4a8:	003cd606 	br	8020b804 <__reset+0xfa1eb804>
8020c4ac:	d8801317 	ldw	r2,76(sp)
8020c4b0:	d8800515 	stw	r2,20(sp)
8020c4b4:	003c2a06 	br	8020b560 <__reset+0xfa1eb560>
8020c4b8:	d9800317 	ldw	r6,12(sp)
8020c4bc:	00800084 	movi	r2,2
8020c4c0:	11801516 	blt	r2,r6,8020c518 <_dtoa_r+0x1660>
8020c4c4:	d9c00c17 	ldw	r7,48(sp)
8020c4c8:	d9c00615 	stw	r7,24(sp)
8020c4cc:	003df706 	br	8020bcac <__reset+0xfa1ebcac>
8020c4d0:	193d3926 	beq	r3,r4,8020b9b8 <__reset+0xfa1eb9b8>
8020c4d4:	00c00f04 	movi	r3,60
8020c4d8:	1885c83a 	sub	r2,r3,r2
8020c4dc:	003ddf06 	br	8020bc5c <__reset+0xfa1ebc5c>
8020c4e0:	e009883a 	mov	r4,fp
8020c4e4:	e0001115 	stw	zero,68(fp)
8020c4e8:	000b883a 	mov	r5,zero
8020c4ec:	020e40c0 	call	8020e40c <_Balloc>
8020c4f0:	d8800715 	stw	r2,28(sp)
8020c4f4:	d8c00717 	ldw	r3,28(sp)
8020c4f8:	00bfffc4 	movi	r2,-1
8020c4fc:	01000044 	movi	r4,1
8020c500:	d8800c15 	stw	r2,48(sp)
8020c504:	e0c01015 	stw	r3,64(fp)
8020c508:	d9000b15 	stw	r4,44(sp)
8020c50c:	d8800615 	stw	r2,24(sp)
8020c510:	d8002215 	stw	zero,136(sp)
8020c514:	003c4106 	br	8020b61c <__reset+0xfa1eb61c>
8020c518:	d8c00c17 	ldw	r3,48(sp)
8020c51c:	d8c00615 	stw	r3,24(sp)
8020c520:	003e7006 	br	8020bee4 <__reset+0xfa1ebee4>
8020c524:	04400044 	movi	r17,1
8020c528:	003b2006 	br	8020b1ac <__reset+0xfa1eb1ac>
8020c52c:	000b883a 	mov	r5,zero
8020c530:	003b3d06 	br	8020b228 <__reset+0xfa1eb228>
8020c534:	d8800c17 	ldw	r2,48(sp)
8020c538:	d8800615 	stw	r2,24(sp)
8020c53c:	003e6906 	br	8020bee4 <__reset+0xfa1ebee4>

8020c540 <__sflush_r>:
8020c540:	2880030b 	ldhu	r2,12(r5)
8020c544:	defffb04 	addi	sp,sp,-20
8020c548:	dcc00315 	stw	r19,12(sp)
8020c54c:	dc400115 	stw	r17,4(sp)
8020c550:	dfc00415 	stw	ra,16(sp)
8020c554:	dc800215 	stw	r18,8(sp)
8020c558:	dc000015 	stw	r16,0(sp)
8020c55c:	10c0020c 	andi	r3,r2,8
8020c560:	2823883a 	mov	r17,r5
8020c564:	2027883a 	mov	r19,r4
8020c568:	1800311e 	bne	r3,zero,8020c630 <__sflush_r+0xf0>
8020c56c:	28c00117 	ldw	r3,4(r5)
8020c570:	10820014 	ori	r2,r2,2048
8020c574:	2880030d 	sth	r2,12(r5)
8020c578:	00c04b0e 	bge	zero,r3,8020c6a8 <__sflush_r+0x168>
8020c57c:	8a000a17 	ldw	r8,40(r17)
8020c580:	40002326 	beq	r8,zero,8020c610 <__sflush_r+0xd0>
8020c584:	9c000017 	ldw	r16,0(r19)
8020c588:	10c4000c 	andi	r3,r2,4096
8020c58c:	98000015 	stw	zero,0(r19)
8020c590:	18004826 	beq	r3,zero,8020c6b4 <__sflush_r+0x174>
8020c594:	89801417 	ldw	r6,80(r17)
8020c598:	10c0010c 	andi	r3,r2,4
8020c59c:	18000626 	beq	r3,zero,8020c5b8 <__sflush_r+0x78>
8020c5a0:	88c00117 	ldw	r3,4(r17)
8020c5a4:	88800c17 	ldw	r2,48(r17)
8020c5a8:	30cdc83a 	sub	r6,r6,r3
8020c5ac:	10000226 	beq	r2,zero,8020c5b8 <__sflush_r+0x78>
8020c5b0:	88800f17 	ldw	r2,60(r17)
8020c5b4:	308dc83a 	sub	r6,r6,r2
8020c5b8:	89400717 	ldw	r5,28(r17)
8020c5bc:	000f883a 	mov	r7,zero
8020c5c0:	9809883a 	mov	r4,r19
8020c5c4:	403ee83a 	callr	r8
8020c5c8:	00ffffc4 	movi	r3,-1
8020c5cc:	10c04426 	beq	r2,r3,8020c6e0 <__sflush_r+0x1a0>
8020c5d0:	88c0030b 	ldhu	r3,12(r17)
8020c5d4:	89000417 	ldw	r4,16(r17)
8020c5d8:	88000115 	stw	zero,4(r17)
8020c5dc:	197dffcc 	andi	r5,r3,63487
8020c5e0:	8940030d 	sth	r5,12(r17)
8020c5e4:	89000015 	stw	r4,0(r17)
8020c5e8:	18c4000c 	andi	r3,r3,4096
8020c5ec:	18002c1e 	bne	r3,zero,8020c6a0 <__sflush_r+0x160>
8020c5f0:	89400c17 	ldw	r5,48(r17)
8020c5f4:	9c000015 	stw	r16,0(r19)
8020c5f8:	28000526 	beq	r5,zero,8020c610 <__sflush_r+0xd0>
8020c5fc:	88801004 	addi	r2,r17,64
8020c600:	28800226 	beq	r5,r2,8020c60c <__sflush_r+0xcc>
8020c604:	9809883a 	mov	r4,r19
8020c608:	020ccac0 	call	8020ccac <_free_r>
8020c60c:	88000c15 	stw	zero,48(r17)
8020c610:	0005883a 	mov	r2,zero
8020c614:	dfc00417 	ldw	ra,16(sp)
8020c618:	dcc00317 	ldw	r19,12(sp)
8020c61c:	dc800217 	ldw	r18,8(sp)
8020c620:	dc400117 	ldw	r17,4(sp)
8020c624:	dc000017 	ldw	r16,0(sp)
8020c628:	dec00504 	addi	sp,sp,20
8020c62c:	f800283a 	ret
8020c630:	2c800417 	ldw	r18,16(r5)
8020c634:	903ff626 	beq	r18,zero,8020c610 <__reset+0xfa1ec610>
8020c638:	2c000017 	ldw	r16,0(r5)
8020c63c:	108000cc 	andi	r2,r2,3
8020c640:	2c800015 	stw	r18,0(r5)
8020c644:	84a1c83a 	sub	r16,r16,r18
8020c648:	1000131e 	bne	r2,zero,8020c698 <__sflush_r+0x158>
8020c64c:	28800517 	ldw	r2,20(r5)
8020c650:	88800215 	stw	r2,8(r17)
8020c654:	04000316 	blt	zero,r16,8020c664 <__sflush_r+0x124>
8020c658:	003fed06 	br	8020c610 <__reset+0xfa1ec610>
8020c65c:	90a5883a 	add	r18,r18,r2
8020c660:	043feb0e 	bge	zero,r16,8020c610 <__reset+0xfa1ec610>
8020c664:	88800917 	ldw	r2,36(r17)
8020c668:	89400717 	ldw	r5,28(r17)
8020c66c:	800f883a 	mov	r7,r16
8020c670:	900d883a 	mov	r6,r18
8020c674:	9809883a 	mov	r4,r19
8020c678:	103ee83a 	callr	r2
8020c67c:	80a1c83a 	sub	r16,r16,r2
8020c680:	00bff616 	blt	zero,r2,8020c65c <__reset+0xfa1ec65c>
8020c684:	88c0030b 	ldhu	r3,12(r17)
8020c688:	00bfffc4 	movi	r2,-1
8020c68c:	18c01014 	ori	r3,r3,64
8020c690:	88c0030d 	sth	r3,12(r17)
8020c694:	003fdf06 	br	8020c614 <__reset+0xfa1ec614>
8020c698:	0005883a 	mov	r2,zero
8020c69c:	003fec06 	br	8020c650 <__reset+0xfa1ec650>
8020c6a0:	88801415 	stw	r2,80(r17)
8020c6a4:	003fd206 	br	8020c5f0 <__reset+0xfa1ec5f0>
8020c6a8:	28c00f17 	ldw	r3,60(r5)
8020c6ac:	00ffb316 	blt	zero,r3,8020c57c <__reset+0xfa1ec57c>
8020c6b0:	003fd706 	br	8020c610 <__reset+0xfa1ec610>
8020c6b4:	89400717 	ldw	r5,28(r17)
8020c6b8:	000d883a 	mov	r6,zero
8020c6bc:	01c00044 	movi	r7,1
8020c6c0:	9809883a 	mov	r4,r19
8020c6c4:	403ee83a 	callr	r8
8020c6c8:	100d883a 	mov	r6,r2
8020c6cc:	00bfffc4 	movi	r2,-1
8020c6d0:	30801426 	beq	r6,r2,8020c724 <__sflush_r+0x1e4>
8020c6d4:	8880030b 	ldhu	r2,12(r17)
8020c6d8:	8a000a17 	ldw	r8,40(r17)
8020c6dc:	003fae06 	br	8020c598 <__reset+0xfa1ec598>
8020c6e0:	98c00017 	ldw	r3,0(r19)
8020c6e4:	183fba26 	beq	r3,zero,8020c5d0 <__reset+0xfa1ec5d0>
8020c6e8:	01000744 	movi	r4,29
8020c6ec:	19000626 	beq	r3,r4,8020c708 <__sflush_r+0x1c8>
8020c6f0:	01000584 	movi	r4,22
8020c6f4:	19000426 	beq	r3,r4,8020c708 <__sflush_r+0x1c8>
8020c6f8:	88c0030b 	ldhu	r3,12(r17)
8020c6fc:	18c01014 	ori	r3,r3,64
8020c700:	88c0030d 	sth	r3,12(r17)
8020c704:	003fc306 	br	8020c614 <__reset+0xfa1ec614>
8020c708:	8880030b 	ldhu	r2,12(r17)
8020c70c:	88c00417 	ldw	r3,16(r17)
8020c710:	88000115 	stw	zero,4(r17)
8020c714:	10bdffcc 	andi	r2,r2,63487
8020c718:	8880030d 	sth	r2,12(r17)
8020c71c:	88c00015 	stw	r3,0(r17)
8020c720:	003fb306 	br	8020c5f0 <__reset+0xfa1ec5f0>
8020c724:	98800017 	ldw	r2,0(r19)
8020c728:	103fea26 	beq	r2,zero,8020c6d4 <__reset+0xfa1ec6d4>
8020c72c:	00c00744 	movi	r3,29
8020c730:	10c00226 	beq	r2,r3,8020c73c <__sflush_r+0x1fc>
8020c734:	00c00584 	movi	r3,22
8020c738:	10c0031e 	bne	r2,r3,8020c748 <__sflush_r+0x208>
8020c73c:	9c000015 	stw	r16,0(r19)
8020c740:	0005883a 	mov	r2,zero
8020c744:	003fb306 	br	8020c614 <__reset+0xfa1ec614>
8020c748:	88c0030b 	ldhu	r3,12(r17)
8020c74c:	3005883a 	mov	r2,r6
8020c750:	18c01014 	ori	r3,r3,64
8020c754:	88c0030d 	sth	r3,12(r17)
8020c758:	003fae06 	br	8020c614 <__reset+0xfa1ec614>

8020c75c <_fflush_r>:
8020c75c:	defffd04 	addi	sp,sp,-12
8020c760:	dc000115 	stw	r16,4(sp)
8020c764:	dfc00215 	stw	ra,8(sp)
8020c768:	2021883a 	mov	r16,r4
8020c76c:	20000226 	beq	r4,zero,8020c778 <_fflush_r+0x1c>
8020c770:	20800e17 	ldw	r2,56(r4)
8020c774:	10000c26 	beq	r2,zero,8020c7a8 <_fflush_r+0x4c>
8020c778:	2880030f 	ldh	r2,12(r5)
8020c77c:	1000051e 	bne	r2,zero,8020c794 <_fflush_r+0x38>
8020c780:	0005883a 	mov	r2,zero
8020c784:	dfc00217 	ldw	ra,8(sp)
8020c788:	dc000117 	ldw	r16,4(sp)
8020c78c:	dec00304 	addi	sp,sp,12
8020c790:	f800283a 	ret
8020c794:	8009883a 	mov	r4,r16
8020c798:	dfc00217 	ldw	ra,8(sp)
8020c79c:	dc000117 	ldw	r16,4(sp)
8020c7a0:	dec00304 	addi	sp,sp,12
8020c7a4:	020c5401 	jmpi	8020c540 <__sflush_r>
8020c7a8:	d9400015 	stw	r5,0(sp)
8020c7ac:	020cb380 	call	8020cb38 <__sinit>
8020c7b0:	d9400017 	ldw	r5,0(sp)
8020c7b4:	003ff006 	br	8020c778 <__reset+0xfa1ec778>

8020c7b8 <fflush>:
8020c7b8:	20000526 	beq	r4,zero,8020c7d0 <fflush+0x18>
8020c7bc:	00a008b4 	movhi	r2,32802
8020c7c0:	10bc2d04 	addi	r2,r2,-3916
8020c7c4:	200b883a 	mov	r5,r4
8020c7c8:	11000017 	ldw	r4,0(r2)
8020c7cc:	020c75c1 	jmpi	8020c75c <_fflush_r>
8020c7d0:	00a008b4 	movhi	r2,32802
8020c7d4:	10bc2c04 	addi	r2,r2,-3920
8020c7d8:	11000017 	ldw	r4,0(r2)
8020c7dc:	01600874 	movhi	r5,32801
8020c7e0:	2971d704 	addi	r5,r5,-14500
8020c7e4:	020d53c1 	jmpi	8020d53c <_fwalk_reent>

8020c7e8 <__fp_unlock>:
8020c7e8:	0005883a 	mov	r2,zero
8020c7ec:	f800283a 	ret

8020c7f0 <_cleanup_r>:
8020c7f0:	01600874 	movhi	r5,32801
8020c7f4:	294a0604 	addi	r5,r5,10264
8020c7f8:	020d53c1 	jmpi	8020d53c <_fwalk_reent>

8020c7fc <__sinit.part.1>:
8020c7fc:	defff704 	addi	sp,sp,-36
8020c800:	00e00874 	movhi	r3,32801
8020c804:	dfc00815 	stw	ra,32(sp)
8020c808:	ddc00715 	stw	r23,28(sp)
8020c80c:	dd800615 	stw	r22,24(sp)
8020c810:	dd400515 	stw	r21,20(sp)
8020c814:	dd000415 	stw	r20,16(sp)
8020c818:	dcc00315 	stw	r19,12(sp)
8020c81c:	dc800215 	stw	r18,8(sp)
8020c820:	dc400115 	stw	r17,4(sp)
8020c824:	dc000015 	stw	r16,0(sp)
8020c828:	18f1fc04 	addi	r3,r3,-14352
8020c82c:	24000117 	ldw	r16,4(r4)
8020c830:	20c00f15 	stw	r3,60(r4)
8020c834:	2080bb04 	addi	r2,r4,748
8020c838:	00c000c4 	movi	r3,3
8020c83c:	20c0b915 	stw	r3,740(r4)
8020c840:	2080ba15 	stw	r2,744(r4)
8020c844:	2000b815 	stw	zero,736(r4)
8020c848:	05c00204 	movi	r23,8
8020c84c:	00800104 	movi	r2,4
8020c850:	2025883a 	mov	r18,r4
8020c854:	b80d883a 	mov	r6,r23
8020c858:	81001704 	addi	r4,r16,92
8020c85c:	000b883a 	mov	r5,zero
8020c860:	80000015 	stw	zero,0(r16)
8020c864:	80000115 	stw	zero,4(r16)
8020c868:	80000215 	stw	zero,8(r16)
8020c86c:	8080030d 	sth	r2,12(r16)
8020c870:	80001915 	stw	zero,100(r16)
8020c874:	8000038d 	sth	zero,14(r16)
8020c878:	80000415 	stw	zero,16(r16)
8020c87c:	80000515 	stw	zero,20(r16)
8020c880:	80000615 	stw	zero,24(r16)
8020c884:	020e2e40 	call	8020e2e4 <memset>
8020c888:	05a00874 	movhi	r22,32801
8020c88c:	94400217 	ldw	r17,8(r18)
8020c890:	05600874 	movhi	r21,32801
8020c894:	05200874 	movhi	r20,32801
8020c898:	04e00874 	movhi	r19,32801
8020c89c:	b5be8d04 	addi	r22,r22,-1484
8020c8a0:	ad7ea404 	addi	r21,r21,-1392
8020c8a4:	a53ec304 	addi	r20,r20,-1268
8020c8a8:	9cfeda04 	addi	r19,r19,-1176
8020c8ac:	85800815 	stw	r22,32(r16)
8020c8b0:	85400915 	stw	r21,36(r16)
8020c8b4:	85000a15 	stw	r20,40(r16)
8020c8b8:	84c00b15 	stw	r19,44(r16)
8020c8bc:	84000715 	stw	r16,28(r16)
8020c8c0:	00800284 	movi	r2,10
8020c8c4:	8880030d 	sth	r2,12(r17)
8020c8c8:	00800044 	movi	r2,1
8020c8cc:	b80d883a 	mov	r6,r23
8020c8d0:	89001704 	addi	r4,r17,92
8020c8d4:	000b883a 	mov	r5,zero
8020c8d8:	88000015 	stw	zero,0(r17)
8020c8dc:	88000115 	stw	zero,4(r17)
8020c8e0:	88000215 	stw	zero,8(r17)
8020c8e4:	88001915 	stw	zero,100(r17)
8020c8e8:	8880038d 	sth	r2,14(r17)
8020c8ec:	88000415 	stw	zero,16(r17)
8020c8f0:	88000515 	stw	zero,20(r17)
8020c8f4:	88000615 	stw	zero,24(r17)
8020c8f8:	020e2e40 	call	8020e2e4 <memset>
8020c8fc:	94000317 	ldw	r16,12(r18)
8020c900:	00800484 	movi	r2,18
8020c904:	8c400715 	stw	r17,28(r17)
8020c908:	8d800815 	stw	r22,32(r17)
8020c90c:	8d400915 	stw	r21,36(r17)
8020c910:	8d000a15 	stw	r20,40(r17)
8020c914:	8cc00b15 	stw	r19,44(r17)
8020c918:	8080030d 	sth	r2,12(r16)
8020c91c:	00800084 	movi	r2,2
8020c920:	80000015 	stw	zero,0(r16)
8020c924:	80000115 	stw	zero,4(r16)
8020c928:	80000215 	stw	zero,8(r16)
8020c92c:	80001915 	stw	zero,100(r16)
8020c930:	8080038d 	sth	r2,14(r16)
8020c934:	80000415 	stw	zero,16(r16)
8020c938:	80000515 	stw	zero,20(r16)
8020c93c:	80000615 	stw	zero,24(r16)
8020c940:	b80d883a 	mov	r6,r23
8020c944:	000b883a 	mov	r5,zero
8020c948:	81001704 	addi	r4,r16,92
8020c94c:	020e2e40 	call	8020e2e4 <memset>
8020c950:	00800044 	movi	r2,1
8020c954:	84000715 	stw	r16,28(r16)
8020c958:	85800815 	stw	r22,32(r16)
8020c95c:	85400915 	stw	r21,36(r16)
8020c960:	85000a15 	stw	r20,40(r16)
8020c964:	84c00b15 	stw	r19,44(r16)
8020c968:	90800e15 	stw	r2,56(r18)
8020c96c:	dfc00817 	ldw	ra,32(sp)
8020c970:	ddc00717 	ldw	r23,28(sp)
8020c974:	dd800617 	ldw	r22,24(sp)
8020c978:	dd400517 	ldw	r21,20(sp)
8020c97c:	dd000417 	ldw	r20,16(sp)
8020c980:	dcc00317 	ldw	r19,12(sp)
8020c984:	dc800217 	ldw	r18,8(sp)
8020c988:	dc400117 	ldw	r17,4(sp)
8020c98c:	dc000017 	ldw	r16,0(sp)
8020c990:	dec00904 	addi	sp,sp,36
8020c994:	f800283a 	ret

8020c998 <__fp_lock>:
8020c998:	0005883a 	mov	r2,zero
8020c99c:	f800283a 	ret

8020c9a0 <__sfmoreglue>:
8020c9a0:	defffc04 	addi	sp,sp,-16
8020c9a4:	dc400115 	stw	r17,4(sp)
8020c9a8:	2c7fffc4 	addi	r17,r5,-1
8020c9ac:	8c401a24 	muli	r17,r17,104
8020c9b0:	dc800215 	stw	r18,8(sp)
8020c9b4:	2825883a 	mov	r18,r5
8020c9b8:	89401d04 	addi	r5,r17,116
8020c9bc:	dc000015 	stw	r16,0(sp)
8020c9c0:	dfc00315 	stw	ra,12(sp)
8020c9c4:	020d8980 	call	8020d898 <_malloc_r>
8020c9c8:	1021883a 	mov	r16,r2
8020c9cc:	10000726 	beq	r2,zero,8020c9ec <__sfmoreglue+0x4c>
8020c9d0:	11000304 	addi	r4,r2,12
8020c9d4:	10000015 	stw	zero,0(r2)
8020c9d8:	14800115 	stw	r18,4(r2)
8020c9dc:	11000215 	stw	r4,8(r2)
8020c9e0:	89801a04 	addi	r6,r17,104
8020c9e4:	000b883a 	mov	r5,zero
8020c9e8:	020e2e40 	call	8020e2e4 <memset>
8020c9ec:	8005883a 	mov	r2,r16
8020c9f0:	dfc00317 	ldw	ra,12(sp)
8020c9f4:	dc800217 	ldw	r18,8(sp)
8020c9f8:	dc400117 	ldw	r17,4(sp)
8020c9fc:	dc000017 	ldw	r16,0(sp)
8020ca00:	dec00404 	addi	sp,sp,16
8020ca04:	f800283a 	ret

8020ca08 <__sfp>:
8020ca08:	defffb04 	addi	sp,sp,-20
8020ca0c:	dc000015 	stw	r16,0(sp)
8020ca10:	042008b4 	movhi	r16,32802
8020ca14:	843c2c04 	addi	r16,r16,-3920
8020ca18:	dcc00315 	stw	r19,12(sp)
8020ca1c:	2027883a 	mov	r19,r4
8020ca20:	81000017 	ldw	r4,0(r16)
8020ca24:	dfc00415 	stw	ra,16(sp)
8020ca28:	dc800215 	stw	r18,8(sp)
8020ca2c:	20800e17 	ldw	r2,56(r4)
8020ca30:	dc400115 	stw	r17,4(sp)
8020ca34:	1000021e 	bne	r2,zero,8020ca40 <__sfp+0x38>
8020ca38:	020c7fc0 	call	8020c7fc <__sinit.part.1>
8020ca3c:	81000017 	ldw	r4,0(r16)
8020ca40:	2480b804 	addi	r18,r4,736
8020ca44:	047fffc4 	movi	r17,-1
8020ca48:	91000117 	ldw	r4,4(r18)
8020ca4c:	94000217 	ldw	r16,8(r18)
8020ca50:	213fffc4 	addi	r4,r4,-1
8020ca54:	20000a16 	blt	r4,zero,8020ca80 <__sfp+0x78>
8020ca58:	8080030f 	ldh	r2,12(r16)
8020ca5c:	10000c26 	beq	r2,zero,8020ca90 <__sfp+0x88>
8020ca60:	80c01d04 	addi	r3,r16,116
8020ca64:	00000206 	br	8020ca70 <__sfp+0x68>
8020ca68:	18bfe60f 	ldh	r2,-104(r3)
8020ca6c:	10000826 	beq	r2,zero,8020ca90 <__sfp+0x88>
8020ca70:	213fffc4 	addi	r4,r4,-1
8020ca74:	1c3ffd04 	addi	r16,r3,-12
8020ca78:	18c01a04 	addi	r3,r3,104
8020ca7c:	247ffa1e 	bne	r4,r17,8020ca68 <__reset+0xfa1eca68>
8020ca80:	90800017 	ldw	r2,0(r18)
8020ca84:	10001d26 	beq	r2,zero,8020cafc <__sfp+0xf4>
8020ca88:	1025883a 	mov	r18,r2
8020ca8c:	003fee06 	br	8020ca48 <__reset+0xfa1eca48>
8020ca90:	00bfffc4 	movi	r2,-1
8020ca94:	8080038d 	sth	r2,14(r16)
8020ca98:	00800044 	movi	r2,1
8020ca9c:	8080030d 	sth	r2,12(r16)
8020caa0:	80001915 	stw	zero,100(r16)
8020caa4:	80000015 	stw	zero,0(r16)
8020caa8:	80000215 	stw	zero,8(r16)
8020caac:	80000115 	stw	zero,4(r16)
8020cab0:	80000415 	stw	zero,16(r16)
8020cab4:	80000515 	stw	zero,20(r16)
8020cab8:	80000615 	stw	zero,24(r16)
8020cabc:	01800204 	movi	r6,8
8020cac0:	000b883a 	mov	r5,zero
8020cac4:	81001704 	addi	r4,r16,92
8020cac8:	020e2e40 	call	8020e2e4 <memset>
8020cacc:	8005883a 	mov	r2,r16
8020cad0:	80000c15 	stw	zero,48(r16)
8020cad4:	80000d15 	stw	zero,52(r16)
8020cad8:	80001115 	stw	zero,68(r16)
8020cadc:	80001215 	stw	zero,72(r16)
8020cae0:	dfc00417 	ldw	ra,16(sp)
8020cae4:	dcc00317 	ldw	r19,12(sp)
8020cae8:	dc800217 	ldw	r18,8(sp)
8020caec:	dc400117 	ldw	r17,4(sp)
8020caf0:	dc000017 	ldw	r16,0(sp)
8020caf4:	dec00504 	addi	sp,sp,20
8020caf8:	f800283a 	ret
8020cafc:	01400104 	movi	r5,4
8020cb00:	9809883a 	mov	r4,r19
8020cb04:	020c9a00 	call	8020c9a0 <__sfmoreglue>
8020cb08:	90800015 	stw	r2,0(r18)
8020cb0c:	103fde1e 	bne	r2,zero,8020ca88 <__reset+0xfa1eca88>
8020cb10:	00800304 	movi	r2,12
8020cb14:	98800015 	stw	r2,0(r19)
8020cb18:	0005883a 	mov	r2,zero
8020cb1c:	003ff006 	br	8020cae0 <__reset+0xfa1ecae0>

8020cb20 <_cleanup>:
8020cb20:	00a008b4 	movhi	r2,32802
8020cb24:	10bc2c04 	addi	r2,r2,-3920
8020cb28:	11000017 	ldw	r4,0(r2)
8020cb2c:	01600874 	movhi	r5,32801
8020cb30:	294a0604 	addi	r5,r5,10264
8020cb34:	020d53c1 	jmpi	8020d53c <_fwalk_reent>

8020cb38 <__sinit>:
8020cb38:	20800e17 	ldw	r2,56(r4)
8020cb3c:	10000126 	beq	r2,zero,8020cb44 <__sinit+0xc>
8020cb40:	f800283a 	ret
8020cb44:	020c7fc1 	jmpi	8020c7fc <__sinit.part.1>

8020cb48 <__sfp_lock_acquire>:
8020cb48:	f800283a 	ret

8020cb4c <__sfp_lock_release>:
8020cb4c:	f800283a 	ret

8020cb50 <__sinit_lock_acquire>:
8020cb50:	f800283a 	ret

8020cb54 <__sinit_lock_release>:
8020cb54:	f800283a 	ret

8020cb58 <__fp_lock_all>:
8020cb58:	00a008b4 	movhi	r2,32802
8020cb5c:	10bc2d04 	addi	r2,r2,-3916
8020cb60:	11000017 	ldw	r4,0(r2)
8020cb64:	01600874 	movhi	r5,32801
8020cb68:	29726604 	addi	r5,r5,-13928
8020cb6c:	020d4781 	jmpi	8020d478 <_fwalk>

8020cb70 <__fp_unlock_all>:
8020cb70:	00a008b4 	movhi	r2,32802
8020cb74:	10bc2d04 	addi	r2,r2,-3916
8020cb78:	11000017 	ldw	r4,0(r2)
8020cb7c:	01600874 	movhi	r5,32801
8020cb80:	2971fa04 	addi	r5,r5,-14360
8020cb84:	020d4781 	jmpi	8020d478 <_fwalk>

8020cb88 <_malloc_trim_r>:
8020cb88:	defffb04 	addi	sp,sp,-20
8020cb8c:	dcc00315 	stw	r19,12(sp)
8020cb90:	04e008b4 	movhi	r19,32802
8020cb94:	dc800215 	stw	r18,8(sp)
8020cb98:	dc400115 	stw	r17,4(sp)
8020cb9c:	dc000015 	stw	r16,0(sp)
8020cba0:	dfc00415 	stw	ra,16(sp)
8020cba4:	2821883a 	mov	r16,r5
8020cba8:	9cf63704 	addi	r19,r19,-10020
8020cbac:	2025883a 	mov	r18,r4
8020cbb0:	02168140 	call	80216814 <__malloc_lock>
8020cbb4:	98800217 	ldw	r2,8(r19)
8020cbb8:	14400117 	ldw	r17,4(r2)
8020cbbc:	00bfff04 	movi	r2,-4
8020cbc0:	88a2703a 	and	r17,r17,r2
8020cbc4:	8c21c83a 	sub	r16,r17,r16
8020cbc8:	8403fbc4 	addi	r16,r16,4079
8020cbcc:	8020d33a 	srli	r16,r16,12
8020cbd0:	0083ffc4 	movi	r2,4095
8020cbd4:	843fffc4 	addi	r16,r16,-1
8020cbd8:	8020933a 	slli	r16,r16,12
8020cbdc:	1400060e 	bge	r2,r16,8020cbf8 <_malloc_trim_r+0x70>
8020cbe0:	000b883a 	mov	r5,zero
8020cbe4:	9009883a 	mov	r4,r18
8020cbe8:	020f9e00 	call	8020f9e0 <_sbrk_r>
8020cbec:	98c00217 	ldw	r3,8(r19)
8020cbf0:	1c47883a 	add	r3,r3,r17
8020cbf4:	10c00a26 	beq	r2,r3,8020cc20 <_malloc_trim_r+0x98>
8020cbf8:	9009883a 	mov	r4,r18
8020cbfc:	02168380 	call	80216838 <__malloc_unlock>
8020cc00:	0005883a 	mov	r2,zero
8020cc04:	dfc00417 	ldw	ra,16(sp)
8020cc08:	dcc00317 	ldw	r19,12(sp)
8020cc0c:	dc800217 	ldw	r18,8(sp)
8020cc10:	dc400117 	ldw	r17,4(sp)
8020cc14:	dc000017 	ldw	r16,0(sp)
8020cc18:	dec00504 	addi	sp,sp,20
8020cc1c:	f800283a 	ret
8020cc20:	040bc83a 	sub	r5,zero,r16
8020cc24:	9009883a 	mov	r4,r18
8020cc28:	020f9e00 	call	8020f9e0 <_sbrk_r>
8020cc2c:	00ffffc4 	movi	r3,-1
8020cc30:	10c00d26 	beq	r2,r3,8020cc68 <_malloc_trim_r+0xe0>
8020cc34:	00e008b4 	movhi	r3,32802
8020cc38:	18fc5604 	addi	r3,r3,-3752
8020cc3c:	18800017 	ldw	r2,0(r3)
8020cc40:	99000217 	ldw	r4,8(r19)
8020cc44:	8c23c83a 	sub	r17,r17,r16
8020cc48:	8c400054 	ori	r17,r17,1
8020cc4c:	1421c83a 	sub	r16,r2,r16
8020cc50:	24400115 	stw	r17,4(r4)
8020cc54:	9009883a 	mov	r4,r18
8020cc58:	1c000015 	stw	r16,0(r3)
8020cc5c:	02168380 	call	80216838 <__malloc_unlock>
8020cc60:	00800044 	movi	r2,1
8020cc64:	003fe706 	br	8020cc04 <__reset+0xfa1ecc04>
8020cc68:	000b883a 	mov	r5,zero
8020cc6c:	9009883a 	mov	r4,r18
8020cc70:	020f9e00 	call	8020f9e0 <_sbrk_r>
8020cc74:	99000217 	ldw	r4,8(r19)
8020cc78:	014003c4 	movi	r5,15
8020cc7c:	1107c83a 	sub	r3,r2,r4
8020cc80:	28ffdd0e 	bge	r5,r3,8020cbf8 <__reset+0xfa1ecbf8>
8020cc84:	016008b4 	movhi	r5,32802
8020cc88:	297c2f04 	addi	r5,r5,-3908
8020cc8c:	29400017 	ldw	r5,0(r5)
8020cc90:	18c00054 	ori	r3,r3,1
8020cc94:	20c00115 	stw	r3,4(r4)
8020cc98:	00e008b4 	movhi	r3,32802
8020cc9c:	1145c83a 	sub	r2,r2,r5
8020cca0:	18fc5604 	addi	r3,r3,-3752
8020cca4:	18800015 	stw	r2,0(r3)
8020cca8:	003fd306 	br	8020cbf8 <__reset+0xfa1ecbf8>

8020ccac <_free_r>:
8020ccac:	28004126 	beq	r5,zero,8020cdb4 <_free_r+0x108>
8020ccb0:	defffd04 	addi	sp,sp,-12
8020ccb4:	dc400115 	stw	r17,4(sp)
8020ccb8:	dc000015 	stw	r16,0(sp)
8020ccbc:	2023883a 	mov	r17,r4
8020ccc0:	2821883a 	mov	r16,r5
8020ccc4:	dfc00215 	stw	ra,8(sp)
8020ccc8:	02168140 	call	80216814 <__malloc_lock>
8020cccc:	81ffff17 	ldw	r7,-4(r16)
8020ccd0:	00bfff84 	movi	r2,-2
8020ccd4:	012008b4 	movhi	r4,32802
8020ccd8:	81bffe04 	addi	r6,r16,-8
8020ccdc:	3884703a 	and	r2,r7,r2
8020cce0:	21363704 	addi	r4,r4,-10020
8020cce4:	308b883a 	add	r5,r6,r2
8020cce8:	2a400117 	ldw	r9,4(r5)
8020ccec:	22000217 	ldw	r8,8(r4)
8020ccf0:	00ffff04 	movi	r3,-4
8020ccf4:	48c6703a 	and	r3,r9,r3
8020ccf8:	2a005726 	beq	r5,r8,8020ce58 <_free_r+0x1ac>
8020ccfc:	28c00115 	stw	r3,4(r5)
8020cd00:	39c0004c 	andi	r7,r7,1
8020cd04:	3800091e 	bne	r7,zero,8020cd2c <_free_r+0x80>
8020cd08:	823ffe17 	ldw	r8,-8(r16)
8020cd0c:	22400204 	addi	r9,r4,8
8020cd10:	320dc83a 	sub	r6,r6,r8
8020cd14:	31c00217 	ldw	r7,8(r6)
8020cd18:	1205883a 	add	r2,r2,r8
8020cd1c:	3a406526 	beq	r7,r9,8020ceb4 <_free_r+0x208>
8020cd20:	32000317 	ldw	r8,12(r6)
8020cd24:	3a000315 	stw	r8,12(r7)
8020cd28:	41c00215 	stw	r7,8(r8)
8020cd2c:	28cf883a 	add	r7,r5,r3
8020cd30:	39c00117 	ldw	r7,4(r7)
8020cd34:	39c0004c 	andi	r7,r7,1
8020cd38:	38003a26 	beq	r7,zero,8020ce24 <_free_r+0x178>
8020cd3c:	10c00054 	ori	r3,r2,1
8020cd40:	30c00115 	stw	r3,4(r6)
8020cd44:	3087883a 	add	r3,r6,r2
8020cd48:	18800015 	stw	r2,0(r3)
8020cd4c:	00c07fc4 	movi	r3,511
8020cd50:	18801936 	bltu	r3,r2,8020cdb8 <_free_r+0x10c>
8020cd54:	1004d0fa 	srli	r2,r2,3
8020cd58:	01c00044 	movi	r7,1
8020cd5c:	21400117 	ldw	r5,4(r4)
8020cd60:	10c00044 	addi	r3,r2,1
8020cd64:	18c7883a 	add	r3,r3,r3
8020cd68:	1005d0ba 	srai	r2,r2,2
8020cd6c:	18c7883a 	add	r3,r3,r3
8020cd70:	18c7883a 	add	r3,r3,r3
8020cd74:	1907883a 	add	r3,r3,r4
8020cd78:	3884983a 	sll	r2,r7,r2
8020cd7c:	19c00017 	ldw	r7,0(r3)
8020cd80:	1a3ffe04 	addi	r8,r3,-8
8020cd84:	1144b03a 	or	r2,r2,r5
8020cd88:	32000315 	stw	r8,12(r6)
8020cd8c:	31c00215 	stw	r7,8(r6)
8020cd90:	20800115 	stw	r2,4(r4)
8020cd94:	19800015 	stw	r6,0(r3)
8020cd98:	39800315 	stw	r6,12(r7)
8020cd9c:	8809883a 	mov	r4,r17
8020cda0:	dfc00217 	ldw	ra,8(sp)
8020cda4:	dc400117 	ldw	r17,4(sp)
8020cda8:	dc000017 	ldw	r16,0(sp)
8020cdac:	dec00304 	addi	sp,sp,12
8020cdb0:	02168381 	jmpi	80216838 <__malloc_unlock>
8020cdb4:	f800283a 	ret
8020cdb8:	100ad27a 	srli	r5,r2,9
8020cdbc:	00c00104 	movi	r3,4
8020cdc0:	19404a36 	bltu	r3,r5,8020ceec <_free_r+0x240>
8020cdc4:	100ad1ba 	srli	r5,r2,6
8020cdc8:	28c00e44 	addi	r3,r5,57
8020cdcc:	18c7883a 	add	r3,r3,r3
8020cdd0:	29400e04 	addi	r5,r5,56
8020cdd4:	18c7883a 	add	r3,r3,r3
8020cdd8:	18c7883a 	add	r3,r3,r3
8020cddc:	1909883a 	add	r4,r3,r4
8020cde0:	20c00017 	ldw	r3,0(r4)
8020cde4:	01e008b4 	movhi	r7,32802
8020cde8:	213ffe04 	addi	r4,r4,-8
8020cdec:	39f63704 	addi	r7,r7,-10020
8020cdf0:	20c04426 	beq	r4,r3,8020cf04 <_free_r+0x258>
8020cdf4:	01ffff04 	movi	r7,-4
8020cdf8:	19400117 	ldw	r5,4(r3)
8020cdfc:	29ca703a 	and	r5,r5,r7
8020ce00:	1140022e 	bgeu	r2,r5,8020ce0c <_free_r+0x160>
8020ce04:	18c00217 	ldw	r3,8(r3)
8020ce08:	20fffb1e 	bne	r4,r3,8020cdf8 <__reset+0xfa1ecdf8>
8020ce0c:	19000317 	ldw	r4,12(r3)
8020ce10:	31000315 	stw	r4,12(r6)
8020ce14:	30c00215 	stw	r3,8(r6)
8020ce18:	21800215 	stw	r6,8(r4)
8020ce1c:	19800315 	stw	r6,12(r3)
8020ce20:	003fde06 	br	8020cd9c <__reset+0xfa1ecd9c>
8020ce24:	29c00217 	ldw	r7,8(r5)
8020ce28:	10c5883a 	add	r2,r2,r3
8020ce2c:	00e008b4 	movhi	r3,32802
8020ce30:	18f63904 	addi	r3,r3,-10012
8020ce34:	38c03b26 	beq	r7,r3,8020cf24 <_free_r+0x278>
8020ce38:	2a000317 	ldw	r8,12(r5)
8020ce3c:	11400054 	ori	r5,r2,1
8020ce40:	3087883a 	add	r3,r6,r2
8020ce44:	3a000315 	stw	r8,12(r7)
8020ce48:	41c00215 	stw	r7,8(r8)
8020ce4c:	31400115 	stw	r5,4(r6)
8020ce50:	18800015 	stw	r2,0(r3)
8020ce54:	003fbd06 	br	8020cd4c <__reset+0xfa1ecd4c>
8020ce58:	39c0004c 	andi	r7,r7,1
8020ce5c:	10c5883a 	add	r2,r2,r3
8020ce60:	3800071e 	bne	r7,zero,8020ce80 <_free_r+0x1d4>
8020ce64:	81fffe17 	ldw	r7,-8(r16)
8020ce68:	31cdc83a 	sub	r6,r6,r7
8020ce6c:	30c00317 	ldw	r3,12(r6)
8020ce70:	31400217 	ldw	r5,8(r6)
8020ce74:	11c5883a 	add	r2,r2,r7
8020ce78:	28c00315 	stw	r3,12(r5)
8020ce7c:	19400215 	stw	r5,8(r3)
8020ce80:	10c00054 	ori	r3,r2,1
8020ce84:	30c00115 	stw	r3,4(r6)
8020ce88:	00e008b4 	movhi	r3,32802
8020ce8c:	18fc3004 	addi	r3,r3,-3904
8020ce90:	18c00017 	ldw	r3,0(r3)
8020ce94:	21800215 	stw	r6,8(r4)
8020ce98:	10ffc036 	bltu	r2,r3,8020cd9c <__reset+0xfa1ecd9c>
8020ce9c:	00a008b4 	movhi	r2,32802
8020cea0:	10bc4d04 	addi	r2,r2,-3788
8020cea4:	11400017 	ldw	r5,0(r2)
8020cea8:	8809883a 	mov	r4,r17
8020ceac:	020cb880 	call	8020cb88 <_malloc_trim_r>
8020ceb0:	003fba06 	br	8020cd9c <__reset+0xfa1ecd9c>
8020ceb4:	28c9883a 	add	r4,r5,r3
8020ceb8:	21000117 	ldw	r4,4(r4)
8020cebc:	2100004c 	andi	r4,r4,1
8020cec0:	2000391e 	bne	r4,zero,8020cfa8 <_free_r+0x2fc>
8020cec4:	29c00217 	ldw	r7,8(r5)
8020cec8:	29000317 	ldw	r4,12(r5)
8020cecc:	1885883a 	add	r2,r3,r2
8020ced0:	10c00054 	ori	r3,r2,1
8020ced4:	39000315 	stw	r4,12(r7)
8020ced8:	21c00215 	stw	r7,8(r4)
8020cedc:	30c00115 	stw	r3,4(r6)
8020cee0:	308d883a 	add	r6,r6,r2
8020cee4:	30800015 	stw	r2,0(r6)
8020cee8:	003fac06 	br	8020cd9c <__reset+0xfa1ecd9c>
8020ceec:	00c00504 	movi	r3,20
8020cef0:	19401536 	bltu	r3,r5,8020cf48 <_free_r+0x29c>
8020cef4:	28c01704 	addi	r3,r5,92
8020cef8:	18c7883a 	add	r3,r3,r3
8020cefc:	294016c4 	addi	r5,r5,91
8020cf00:	003fb406 	br	8020cdd4 <__reset+0xfa1ecdd4>
8020cf04:	280bd0ba 	srai	r5,r5,2
8020cf08:	00c00044 	movi	r3,1
8020cf0c:	38800117 	ldw	r2,4(r7)
8020cf10:	194a983a 	sll	r5,r3,r5
8020cf14:	2007883a 	mov	r3,r4
8020cf18:	2884b03a 	or	r2,r5,r2
8020cf1c:	38800115 	stw	r2,4(r7)
8020cf20:	003fbb06 	br	8020ce10 <__reset+0xfa1ece10>
8020cf24:	21800515 	stw	r6,20(r4)
8020cf28:	21800415 	stw	r6,16(r4)
8020cf2c:	10c00054 	ori	r3,r2,1
8020cf30:	31c00315 	stw	r7,12(r6)
8020cf34:	31c00215 	stw	r7,8(r6)
8020cf38:	30c00115 	stw	r3,4(r6)
8020cf3c:	308d883a 	add	r6,r6,r2
8020cf40:	30800015 	stw	r2,0(r6)
8020cf44:	003f9506 	br	8020cd9c <__reset+0xfa1ecd9c>
8020cf48:	00c01504 	movi	r3,84
8020cf4c:	19400536 	bltu	r3,r5,8020cf64 <_free_r+0x2b8>
8020cf50:	100ad33a 	srli	r5,r2,12
8020cf54:	28c01bc4 	addi	r3,r5,111
8020cf58:	18c7883a 	add	r3,r3,r3
8020cf5c:	29401b84 	addi	r5,r5,110
8020cf60:	003f9c06 	br	8020cdd4 <__reset+0xfa1ecdd4>
8020cf64:	00c05504 	movi	r3,340
8020cf68:	19400536 	bltu	r3,r5,8020cf80 <_free_r+0x2d4>
8020cf6c:	100ad3fa 	srli	r5,r2,15
8020cf70:	28c01e04 	addi	r3,r5,120
8020cf74:	18c7883a 	add	r3,r3,r3
8020cf78:	29401dc4 	addi	r5,r5,119
8020cf7c:	003f9506 	br	8020cdd4 <__reset+0xfa1ecdd4>
8020cf80:	00c15504 	movi	r3,1364
8020cf84:	19400536 	bltu	r3,r5,8020cf9c <_free_r+0x2f0>
8020cf88:	100ad4ba 	srli	r5,r2,18
8020cf8c:	28c01f44 	addi	r3,r5,125
8020cf90:	18c7883a 	add	r3,r3,r3
8020cf94:	29401f04 	addi	r5,r5,124
8020cf98:	003f8e06 	br	8020cdd4 <__reset+0xfa1ecdd4>
8020cf9c:	00c03f84 	movi	r3,254
8020cfa0:	01401f84 	movi	r5,126
8020cfa4:	003f8b06 	br	8020cdd4 <__reset+0xfa1ecdd4>
8020cfa8:	10c00054 	ori	r3,r2,1
8020cfac:	30c00115 	stw	r3,4(r6)
8020cfb0:	308d883a 	add	r6,r6,r2
8020cfb4:	30800015 	stw	r2,0(r6)
8020cfb8:	003f7806 	br	8020cd9c <__reset+0xfa1ecd9c>

8020cfbc <__sfvwrite_r>:
8020cfbc:	30800217 	ldw	r2,8(r6)
8020cfc0:	10006726 	beq	r2,zero,8020d160 <__sfvwrite_r+0x1a4>
8020cfc4:	28c0030b 	ldhu	r3,12(r5)
8020cfc8:	defff404 	addi	sp,sp,-48
8020cfcc:	dd400715 	stw	r21,28(sp)
8020cfd0:	dd000615 	stw	r20,24(sp)
8020cfd4:	dc000215 	stw	r16,8(sp)
8020cfd8:	dfc00b15 	stw	ra,44(sp)
8020cfdc:	df000a15 	stw	fp,40(sp)
8020cfe0:	ddc00915 	stw	r23,36(sp)
8020cfe4:	dd800815 	stw	r22,32(sp)
8020cfe8:	dcc00515 	stw	r19,20(sp)
8020cfec:	dc800415 	stw	r18,16(sp)
8020cff0:	dc400315 	stw	r17,12(sp)
8020cff4:	1880020c 	andi	r2,r3,8
8020cff8:	2821883a 	mov	r16,r5
8020cffc:	202b883a 	mov	r21,r4
8020d000:	3029883a 	mov	r20,r6
8020d004:	10002726 	beq	r2,zero,8020d0a4 <__sfvwrite_r+0xe8>
8020d008:	28800417 	ldw	r2,16(r5)
8020d00c:	10002526 	beq	r2,zero,8020d0a4 <__sfvwrite_r+0xe8>
8020d010:	1880008c 	andi	r2,r3,2
8020d014:	a4400017 	ldw	r17,0(r20)
8020d018:	10002a26 	beq	r2,zero,8020d0c4 <__sfvwrite_r+0x108>
8020d01c:	05a00034 	movhi	r22,32768
8020d020:	0027883a 	mov	r19,zero
8020d024:	0025883a 	mov	r18,zero
8020d028:	b5bf0004 	addi	r22,r22,-1024
8020d02c:	980d883a 	mov	r6,r19
8020d030:	a809883a 	mov	r4,r21
8020d034:	90004626 	beq	r18,zero,8020d150 <__sfvwrite_r+0x194>
8020d038:	900f883a 	mov	r7,r18
8020d03c:	b480022e 	bgeu	r22,r18,8020d048 <__sfvwrite_r+0x8c>
8020d040:	01e00034 	movhi	r7,32768
8020d044:	39ff0004 	addi	r7,r7,-1024
8020d048:	80800917 	ldw	r2,36(r16)
8020d04c:	81400717 	ldw	r5,28(r16)
8020d050:	103ee83a 	callr	r2
8020d054:	0080570e 	bge	zero,r2,8020d1b4 <__sfvwrite_r+0x1f8>
8020d058:	a0c00217 	ldw	r3,8(r20)
8020d05c:	98a7883a 	add	r19,r19,r2
8020d060:	90a5c83a 	sub	r18,r18,r2
8020d064:	1885c83a 	sub	r2,r3,r2
8020d068:	a0800215 	stw	r2,8(r20)
8020d06c:	103fef1e 	bne	r2,zero,8020d02c <__reset+0xfa1ed02c>
8020d070:	0005883a 	mov	r2,zero
8020d074:	dfc00b17 	ldw	ra,44(sp)
8020d078:	df000a17 	ldw	fp,40(sp)
8020d07c:	ddc00917 	ldw	r23,36(sp)
8020d080:	dd800817 	ldw	r22,32(sp)
8020d084:	dd400717 	ldw	r21,28(sp)
8020d088:	dd000617 	ldw	r20,24(sp)
8020d08c:	dcc00517 	ldw	r19,20(sp)
8020d090:	dc800417 	ldw	r18,16(sp)
8020d094:	dc400317 	ldw	r17,12(sp)
8020d098:	dc000217 	ldw	r16,8(sp)
8020d09c:	dec00c04 	addi	sp,sp,48
8020d0a0:	f800283a 	ret
8020d0a4:	800b883a 	mov	r5,r16
8020d0a8:	a809883a 	mov	r4,r21
8020d0ac:	020ab640 	call	8020ab64 <__swsetup_r>
8020d0b0:	1000eb1e 	bne	r2,zero,8020d460 <__sfvwrite_r+0x4a4>
8020d0b4:	80c0030b 	ldhu	r3,12(r16)
8020d0b8:	a4400017 	ldw	r17,0(r20)
8020d0bc:	1880008c 	andi	r2,r3,2
8020d0c0:	103fd61e 	bne	r2,zero,8020d01c <__reset+0xfa1ed01c>
8020d0c4:	1880004c 	andi	r2,r3,1
8020d0c8:	10003f1e 	bne	r2,zero,8020d1c8 <__sfvwrite_r+0x20c>
8020d0cc:	0039883a 	mov	fp,zero
8020d0d0:	0025883a 	mov	r18,zero
8020d0d4:	90001a26 	beq	r18,zero,8020d140 <__sfvwrite_r+0x184>
8020d0d8:	1880800c 	andi	r2,r3,512
8020d0dc:	84c00217 	ldw	r19,8(r16)
8020d0e0:	10002126 	beq	r2,zero,8020d168 <__sfvwrite_r+0x1ac>
8020d0e4:	982f883a 	mov	r23,r19
8020d0e8:	94c09336 	bltu	r18,r19,8020d338 <__sfvwrite_r+0x37c>
8020d0ec:	1881200c 	andi	r2,r3,1152
8020d0f0:	10009e1e 	bne	r2,zero,8020d36c <__sfvwrite_r+0x3b0>
8020d0f4:	81000017 	ldw	r4,0(r16)
8020d0f8:	b80d883a 	mov	r6,r23
8020d0fc:	e00b883a 	mov	r5,fp
8020d100:	020e1880 	call	8020e188 <memmove>
8020d104:	80c00217 	ldw	r3,8(r16)
8020d108:	81000017 	ldw	r4,0(r16)
8020d10c:	9005883a 	mov	r2,r18
8020d110:	1ce7c83a 	sub	r19,r3,r19
8020d114:	25cf883a 	add	r7,r4,r23
8020d118:	84c00215 	stw	r19,8(r16)
8020d11c:	81c00015 	stw	r7,0(r16)
8020d120:	a0c00217 	ldw	r3,8(r20)
8020d124:	e0b9883a 	add	fp,fp,r2
8020d128:	90a5c83a 	sub	r18,r18,r2
8020d12c:	18a7c83a 	sub	r19,r3,r2
8020d130:	a4c00215 	stw	r19,8(r20)
8020d134:	983fce26 	beq	r19,zero,8020d070 <__reset+0xfa1ed070>
8020d138:	80c0030b 	ldhu	r3,12(r16)
8020d13c:	903fe61e 	bne	r18,zero,8020d0d8 <__reset+0xfa1ed0d8>
8020d140:	8f000017 	ldw	fp,0(r17)
8020d144:	8c800117 	ldw	r18,4(r17)
8020d148:	8c400204 	addi	r17,r17,8
8020d14c:	003fe106 	br	8020d0d4 <__reset+0xfa1ed0d4>
8020d150:	8cc00017 	ldw	r19,0(r17)
8020d154:	8c800117 	ldw	r18,4(r17)
8020d158:	8c400204 	addi	r17,r17,8
8020d15c:	003fb306 	br	8020d02c <__reset+0xfa1ed02c>
8020d160:	0005883a 	mov	r2,zero
8020d164:	f800283a 	ret
8020d168:	81000017 	ldw	r4,0(r16)
8020d16c:	80800417 	ldw	r2,16(r16)
8020d170:	11005736 	bltu	r2,r4,8020d2d0 <__sfvwrite_r+0x314>
8020d174:	85c00517 	ldw	r23,20(r16)
8020d178:	95c05536 	bltu	r18,r23,8020d2d0 <__sfvwrite_r+0x314>
8020d17c:	00a00034 	movhi	r2,32768
8020d180:	10bfffc4 	addi	r2,r2,-1
8020d184:	9009883a 	mov	r4,r18
8020d188:	1480012e 	bgeu	r2,r18,8020d190 <__sfvwrite_r+0x1d4>
8020d18c:	1009883a 	mov	r4,r2
8020d190:	b80b883a 	mov	r5,r23
8020d194:	0213a840 	call	80213a84 <__divsi3>
8020d198:	15cf383a 	mul	r7,r2,r23
8020d19c:	81400717 	ldw	r5,28(r16)
8020d1a0:	80800917 	ldw	r2,36(r16)
8020d1a4:	e00d883a 	mov	r6,fp
8020d1a8:	a809883a 	mov	r4,r21
8020d1ac:	103ee83a 	callr	r2
8020d1b0:	00bfdb16 	blt	zero,r2,8020d120 <__reset+0xfa1ed120>
8020d1b4:	8080030b 	ldhu	r2,12(r16)
8020d1b8:	10801014 	ori	r2,r2,64
8020d1bc:	8080030d 	sth	r2,12(r16)
8020d1c0:	00bfffc4 	movi	r2,-1
8020d1c4:	003fab06 	br	8020d074 <__reset+0xfa1ed074>
8020d1c8:	0027883a 	mov	r19,zero
8020d1cc:	0011883a 	mov	r8,zero
8020d1d0:	0039883a 	mov	fp,zero
8020d1d4:	0025883a 	mov	r18,zero
8020d1d8:	90001f26 	beq	r18,zero,8020d258 <__sfvwrite_r+0x29c>
8020d1dc:	40005a26 	beq	r8,zero,8020d348 <__sfvwrite_r+0x38c>
8020d1e0:	982d883a 	mov	r22,r19
8020d1e4:	94c0012e 	bgeu	r18,r19,8020d1ec <__sfvwrite_r+0x230>
8020d1e8:	902d883a 	mov	r22,r18
8020d1ec:	81000017 	ldw	r4,0(r16)
8020d1f0:	80800417 	ldw	r2,16(r16)
8020d1f4:	b02f883a 	mov	r23,r22
8020d1f8:	81c00517 	ldw	r7,20(r16)
8020d1fc:	1100032e 	bgeu	r2,r4,8020d20c <__sfvwrite_r+0x250>
8020d200:	80c00217 	ldw	r3,8(r16)
8020d204:	38c7883a 	add	r3,r7,r3
8020d208:	1d801816 	blt	r3,r22,8020d26c <__sfvwrite_r+0x2b0>
8020d20c:	b1c03e16 	blt	r22,r7,8020d308 <__sfvwrite_r+0x34c>
8020d210:	80800917 	ldw	r2,36(r16)
8020d214:	81400717 	ldw	r5,28(r16)
8020d218:	e00d883a 	mov	r6,fp
8020d21c:	da000115 	stw	r8,4(sp)
8020d220:	a809883a 	mov	r4,r21
8020d224:	103ee83a 	callr	r2
8020d228:	102f883a 	mov	r23,r2
8020d22c:	da000117 	ldw	r8,4(sp)
8020d230:	00bfe00e 	bge	zero,r2,8020d1b4 <__reset+0xfa1ed1b4>
8020d234:	9de7c83a 	sub	r19,r19,r23
8020d238:	98001f26 	beq	r19,zero,8020d2b8 <__sfvwrite_r+0x2fc>
8020d23c:	a0800217 	ldw	r2,8(r20)
8020d240:	e5f9883a 	add	fp,fp,r23
8020d244:	95e5c83a 	sub	r18,r18,r23
8020d248:	15efc83a 	sub	r23,r2,r23
8020d24c:	a5c00215 	stw	r23,8(r20)
8020d250:	b83f8726 	beq	r23,zero,8020d070 <__reset+0xfa1ed070>
8020d254:	903fe11e 	bne	r18,zero,8020d1dc <__reset+0xfa1ed1dc>
8020d258:	8f000017 	ldw	fp,0(r17)
8020d25c:	8c800117 	ldw	r18,4(r17)
8020d260:	0011883a 	mov	r8,zero
8020d264:	8c400204 	addi	r17,r17,8
8020d268:	003fdb06 	br	8020d1d8 <__reset+0xfa1ed1d8>
8020d26c:	180d883a 	mov	r6,r3
8020d270:	e00b883a 	mov	r5,fp
8020d274:	da000115 	stw	r8,4(sp)
8020d278:	d8c00015 	stw	r3,0(sp)
8020d27c:	020e1880 	call	8020e188 <memmove>
8020d280:	d8c00017 	ldw	r3,0(sp)
8020d284:	80800017 	ldw	r2,0(r16)
8020d288:	800b883a 	mov	r5,r16
8020d28c:	a809883a 	mov	r4,r21
8020d290:	10c5883a 	add	r2,r2,r3
8020d294:	80800015 	stw	r2,0(r16)
8020d298:	d8c00015 	stw	r3,0(sp)
8020d29c:	020c75c0 	call	8020c75c <_fflush_r>
8020d2a0:	d8c00017 	ldw	r3,0(sp)
8020d2a4:	da000117 	ldw	r8,4(sp)
8020d2a8:	103fc21e 	bne	r2,zero,8020d1b4 <__reset+0xfa1ed1b4>
8020d2ac:	182f883a 	mov	r23,r3
8020d2b0:	9de7c83a 	sub	r19,r19,r23
8020d2b4:	983fe11e 	bne	r19,zero,8020d23c <__reset+0xfa1ed23c>
8020d2b8:	800b883a 	mov	r5,r16
8020d2bc:	a809883a 	mov	r4,r21
8020d2c0:	020c75c0 	call	8020c75c <_fflush_r>
8020d2c4:	103fbb1e 	bne	r2,zero,8020d1b4 <__reset+0xfa1ed1b4>
8020d2c8:	0011883a 	mov	r8,zero
8020d2cc:	003fdb06 	br	8020d23c <__reset+0xfa1ed23c>
8020d2d0:	94c0012e 	bgeu	r18,r19,8020d2d8 <__sfvwrite_r+0x31c>
8020d2d4:	9027883a 	mov	r19,r18
8020d2d8:	980d883a 	mov	r6,r19
8020d2dc:	e00b883a 	mov	r5,fp
8020d2e0:	020e1880 	call	8020e188 <memmove>
8020d2e4:	80800217 	ldw	r2,8(r16)
8020d2e8:	80c00017 	ldw	r3,0(r16)
8020d2ec:	14c5c83a 	sub	r2,r2,r19
8020d2f0:	1cc7883a 	add	r3,r3,r19
8020d2f4:	80800215 	stw	r2,8(r16)
8020d2f8:	80c00015 	stw	r3,0(r16)
8020d2fc:	10004326 	beq	r2,zero,8020d40c <__sfvwrite_r+0x450>
8020d300:	9805883a 	mov	r2,r19
8020d304:	003f8606 	br	8020d120 <__reset+0xfa1ed120>
8020d308:	b00d883a 	mov	r6,r22
8020d30c:	e00b883a 	mov	r5,fp
8020d310:	da000115 	stw	r8,4(sp)
8020d314:	020e1880 	call	8020e188 <memmove>
8020d318:	80800217 	ldw	r2,8(r16)
8020d31c:	80c00017 	ldw	r3,0(r16)
8020d320:	da000117 	ldw	r8,4(sp)
8020d324:	1585c83a 	sub	r2,r2,r22
8020d328:	1dad883a 	add	r22,r3,r22
8020d32c:	80800215 	stw	r2,8(r16)
8020d330:	85800015 	stw	r22,0(r16)
8020d334:	003fbf06 	br	8020d234 <__reset+0xfa1ed234>
8020d338:	81000017 	ldw	r4,0(r16)
8020d33c:	9027883a 	mov	r19,r18
8020d340:	902f883a 	mov	r23,r18
8020d344:	003f6c06 	br	8020d0f8 <__reset+0xfa1ed0f8>
8020d348:	900d883a 	mov	r6,r18
8020d34c:	01400284 	movi	r5,10
8020d350:	e009883a 	mov	r4,fp
8020d354:	020e0a40 	call	8020e0a4 <memchr>
8020d358:	10003e26 	beq	r2,zero,8020d454 <__sfvwrite_r+0x498>
8020d35c:	10800044 	addi	r2,r2,1
8020d360:	1727c83a 	sub	r19,r2,fp
8020d364:	02000044 	movi	r8,1
8020d368:	003f9d06 	br	8020d1e0 <__reset+0xfa1ed1e0>
8020d36c:	80800517 	ldw	r2,20(r16)
8020d370:	81400417 	ldw	r5,16(r16)
8020d374:	81c00017 	ldw	r7,0(r16)
8020d378:	10a7883a 	add	r19,r2,r2
8020d37c:	9885883a 	add	r2,r19,r2
8020d380:	1026d7fa 	srli	r19,r2,31
8020d384:	396dc83a 	sub	r22,r7,r5
8020d388:	b1000044 	addi	r4,r22,1
8020d38c:	9885883a 	add	r2,r19,r2
8020d390:	1027d07a 	srai	r19,r2,1
8020d394:	2485883a 	add	r2,r4,r18
8020d398:	980d883a 	mov	r6,r19
8020d39c:	9880022e 	bgeu	r19,r2,8020d3a8 <__sfvwrite_r+0x3ec>
8020d3a0:	1027883a 	mov	r19,r2
8020d3a4:	100d883a 	mov	r6,r2
8020d3a8:	18c1000c 	andi	r3,r3,1024
8020d3ac:	18001c26 	beq	r3,zero,8020d420 <__sfvwrite_r+0x464>
8020d3b0:	300b883a 	mov	r5,r6
8020d3b4:	a809883a 	mov	r4,r21
8020d3b8:	020d8980 	call	8020d898 <_malloc_r>
8020d3bc:	102f883a 	mov	r23,r2
8020d3c0:	10002926 	beq	r2,zero,8020d468 <__sfvwrite_r+0x4ac>
8020d3c4:	81400417 	ldw	r5,16(r16)
8020d3c8:	b00d883a 	mov	r6,r22
8020d3cc:	1009883a 	mov	r4,r2
8020d3d0:	02062d80 	call	802062d8 <memcpy>
8020d3d4:	8080030b 	ldhu	r2,12(r16)
8020d3d8:	00fedfc4 	movi	r3,-1153
8020d3dc:	10c4703a 	and	r2,r2,r3
8020d3e0:	10802014 	ori	r2,r2,128
8020d3e4:	8080030d 	sth	r2,12(r16)
8020d3e8:	bd89883a 	add	r4,r23,r22
8020d3ec:	9d8fc83a 	sub	r7,r19,r22
8020d3f0:	85c00415 	stw	r23,16(r16)
8020d3f4:	84c00515 	stw	r19,20(r16)
8020d3f8:	81000015 	stw	r4,0(r16)
8020d3fc:	9027883a 	mov	r19,r18
8020d400:	81c00215 	stw	r7,8(r16)
8020d404:	902f883a 	mov	r23,r18
8020d408:	003f3b06 	br	8020d0f8 <__reset+0xfa1ed0f8>
8020d40c:	800b883a 	mov	r5,r16
8020d410:	a809883a 	mov	r4,r21
8020d414:	020c75c0 	call	8020c75c <_fflush_r>
8020d418:	103fb926 	beq	r2,zero,8020d300 <__reset+0xfa1ed300>
8020d41c:	003f6506 	br	8020d1b4 <__reset+0xfa1ed1b4>
8020d420:	a809883a 	mov	r4,r21
8020d424:	020f4080 	call	8020f408 <_realloc_r>
8020d428:	102f883a 	mov	r23,r2
8020d42c:	103fee1e 	bne	r2,zero,8020d3e8 <__reset+0xfa1ed3e8>
8020d430:	81400417 	ldw	r5,16(r16)
8020d434:	a809883a 	mov	r4,r21
8020d438:	020ccac0 	call	8020ccac <_free_r>
8020d43c:	8080030b 	ldhu	r2,12(r16)
8020d440:	00ffdfc4 	movi	r3,-129
8020d444:	1884703a 	and	r2,r3,r2
8020d448:	00c00304 	movi	r3,12
8020d44c:	a8c00015 	stw	r3,0(r21)
8020d450:	003f5906 	br	8020d1b8 <__reset+0xfa1ed1b8>
8020d454:	94c00044 	addi	r19,r18,1
8020d458:	02000044 	movi	r8,1
8020d45c:	003f6006 	br	8020d1e0 <__reset+0xfa1ed1e0>
8020d460:	00bfffc4 	movi	r2,-1
8020d464:	003f0306 	br	8020d074 <__reset+0xfa1ed074>
8020d468:	00800304 	movi	r2,12
8020d46c:	a8800015 	stw	r2,0(r21)
8020d470:	8080030b 	ldhu	r2,12(r16)
8020d474:	003f5006 	br	8020d1b8 <__reset+0xfa1ed1b8>

8020d478 <_fwalk>:
8020d478:	defff704 	addi	sp,sp,-36
8020d47c:	dd000415 	stw	r20,16(sp)
8020d480:	dfc00815 	stw	ra,32(sp)
8020d484:	ddc00715 	stw	r23,28(sp)
8020d488:	dd800615 	stw	r22,24(sp)
8020d48c:	dd400515 	stw	r21,20(sp)
8020d490:	dcc00315 	stw	r19,12(sp)
8020d494:	dc800215 	stw	r18,8(sp)
8020d498:	dc400115 	stw	r17,4(sp)
8020d49c:	dc000015 	stw	r16,0(sp)
8020d4a0:	2500b804 	addi	r20,r4,736
8020d4a4:	a0002326 	beq	r20,zero,8020d534 <_fwalk+0xbc>
8020d4a8:	282b883a 	mov	r21,r5
8020d4ac:	002f883a 	mov	r23,zero
8020d4b0:	05800044 	movi	r22,1
8020d4b4:	04ffffc4 	movi	r19,-1
8020d4b8:	a4400117 	ldw	r17,4(r20)
8020d4bc:	a4800217 	ldw	r18,8(r20)
8020d4c0:	8c7fffc4 	addi	r17,r17,-1
8020d4c4:	88000d16 	blt	r17,zero,8020d4fc <_fwalk+0x84>
8020d4c8:	94000304 	addi	r16,r18,12
8020d4cc:	94800384 	addi	r18,r18,14
8020d4d0:	8080000b 	ldhu	r2,0(r16)
8020d4d4:	8c7fffc4 	addi	r17,r17,-1
8020d4d8:	813ffd04 	addi	r4,r16,-12
8020d4dc:	b080042e 	bgeu	r22,r2,8020d4f0 <_fwalk+0x78>
8020d4e0:	9080000f 	ldh	r2,0(r18)
8020d4e4:	14c00226 	beq	r2,r19,8020d4f0 <_fwalk+0x78>
8020d4e8:	a83ee83a 	callr	r21
8020d4ec:	b8aeb03a 	or	r23,r23,r2
8020d4f0:	84001a04 	addi	r16,r16,104
8020d4f4:	94801a04 	addi	r18,r18,104
8020d4f8:	8cfff51e 	bne	r17,r19,8020d4d0 <__reset+0xfa1ed4d0>
8020d4fc:	a5000017 	ldw	r20,0(r20)
8020d500:	a03fed1e 	bne	r20,zero,8020d4b8 <__reset+0xfa1ed4b8>
8020d504:	b805883a 	mov	r2,r23
8020d508:	dfc00817 	ldw	ra,32(sp)
8020d50c:	ddc00717 	ldw	r23,28(sp)
8020d510:	dd800617 	ldw	r22,24(sp)
8020d514:	dd400517 	ldw	r21,20(sp)
8020d518:	dd000417 	ldw	r20,16(sp)
8020d51c:	dcc00317 	ldw	r19,12(sp)
8020d520:	dc800217 	ldw	r18,8(sp)
8020d524:	dc400117 	ldw	r17,4(sp)
8020d528:	dc000017 	ldw	r16,0(sp)
8020d52c:	dec00904 	addi	sp,sp,36
8020d530:	f800283a 	ret
8020d534:	002f883a 	mov	r23,zero
8020d538:	003ff206 	br	8020d504 <__reset+0xfa1ed504>

8020d53c <_fwalk_reent>:
8020d53c:	defff704 	addi	sp,sp,-36
8020d540:	dd000415 	stw	r20,16(sp)
8020d544:	dfc00815 	stw	ra,32(sp)
8020d548:	ddc00715 	stw	r23,28(sp)
8020d54c:	dd800615 	stw	r22,24(sp)
8020d550:	dd400515 	stw	r21,20(sp)
8020d554:	dcc00315 	stw	r19,12(sp)
8020d558:	dc800215 	stw	r18,8(sp)
8020d55c:	dc400115 	stw	r17,4(sp)
8020d560:	dc000015 	stw	r16,0(sp)
8020d564:	2500b804 	addi	r20,r4,736
8020d568:	a0002326 	beq	r20,zero,8020d5f8 <_fwalk_reent+0xbc>
8020d56c:	282b883a 	mov	r21,r5
8020d570:	2027883a 	mov	r19,r4
8020d574:	002f883a 	mov	r23,zero
8020d578:	05800044 	movi	r22,1
8020d57c:	04bfffc4 	movi	r18,-1
8020d580:	a4400117 	ldw	r17,4(r20)
8020d584:	a4000217 	ldw	r16,8(r20)
8020d588:	8c7fffc4 	addi	r17,r17,-1
8020d58c:	88000c16 	blt	r17,zero,8020d5c0 <_fwalk_reent+0x84>
8020d590:	84000304 	addi	r16,r16,12
8020d594:	8080000b 	ldhu	r2,0(r16)
8020d598:	8c7fffc4 	addi	r17,r17,-1
8020d59c:	817ffd04 	addi	r5,r16,-12
8020d5a0:	b080052e 	bgeu	r22,r2,8020d5b8 <_fwalk_reent+0x7c>
8020d5a4:	8080008f 	ldh	r2,2(r16)
8020d5a8:	9809883a 	mov	r4,r19
8020d5ac:	14800226 	beq	r2,r18,8020d5b8 <_fwalk_reent+0x7c>
8020d5b0:	a83ee83a 	callr	r21
8020d5b4:	b8aeb03a 	or	r23,r23,r2
8020d5b8:	84001a04 	addi	r16,r16,104
8020d5bc:	8cbff51e 	bne	r17,r18,8020d594 <__reset+0xfa1ed594>
8020d5c0:	a5000017 	ldw	r20,0(r20)
8020d5c4:	a03fee1e 	bne	r20,zero,8020d580 <__reset+0xfa1ed580>
8020d5c8:	b805883a 	mov	r2,r23
8020d5cc:	dfc00817 	ldw	ra,32(sp)
8020d5d0:	ddc00717 	ldw	r23,28(sp)
8020d5d4:	dd800617 	ldw	r22,24(sp)
8020d5d8:	dd400517 	ldw	r21,20(sp)
8020d5dc:	dd000417 	ldw	r20,16(sp)
8020d5e0:	dcc00317 	ldw	r19,12(sp)
8020d5e4:	dc800217 	ldw	r18,8(sp)
8020d5e8:	dc400117 	ldw	r17,4(sp)
8020d5ec:	dc000017 	ldw	r16,0(sp)
8020d5f0:	dec00904 	addi	sp,sp,36
8020d5f4:	f800283a 	ret
8020d5f8:	002f883a 	mov	r23,zero
8020d5fc:	003ff206 	br	8020d5c8 <__reset+0xfa1ed5c8>

8020d600 <_setlocale_r>:
8020d600:	30001b26 	beq	r6,zero,8020d670 <_setlocale_r+0x70>
8020d604:	016008b4 	movhi	r5,32802
8020d608:	defffe04 	addi	sp,sp,-8
8020d60c:	29740a04 	addi	r5,r5,-12248
8020d610:	3009883a 	mov	r4,r6
8020d614:	dc000015 	stw	r16,0(sp)
8020d618:	dfc00115 	stw	ra,4(sp)
8020d61c:	3021883a 	mov	r16,r6
8020d620:	020fb700 	call	8020fb70 <strcmp>
8020d624:	1000061e 	bne	r2,zero,8020d640 <_setlocale_r+0x40>
8020d628:	00a008b4 	movhi	r2,32802
8020d62c:	10b3e304 	addi	r2,r2,-12404
8020d630:	dfc00117 	ldw	ra,4(sp)
8020d634:	dc000017 	ldw	r16,0(sp)
8020d638:	dec00204 	addi	sp,sp,8
8020d63c:	f800283a 	ret
8020d640:	016008b4 	movhi	r5,32802
8020d644:	2973e304 	addi	r5,r5,-12404
8020d648:	8009883a 	mov	r4,r16
8020d64c:	020fb700 	call	8020fb70 <strcmp>
8020d650:	103ff526 	beq	r2,zero,8020d628 <__reset+0xfa1ed628>
8020d654:	016008b4 	movhi	r5,32802
8020d658:	2973ed04 	addi	r5,r5,-12364
8020d65c:	8009883a 	mov	r4,r16
8020d660:	020fb700 	call	8020fb70 <strcmp>
8020d664:	103ff026 	beq	r2,zero,8020d628 <__reset+0xfa1ed628>
8020d668:	0005883a 	mov	r2,zero
8020d66c:	003ff006 	br	8020d630 <__reset+0xfa1ed630>
8020d670:	00a008b4 	movhi	r2,32802
8020d674:	10b3e304 	addi	r2,r2,-12404
8020d678:	f800283a 	ret

8020d67c <__locale_charset>:
8020d67c:	00a008b4 	movhi	r2,32802
8020d680:	10b62104 	addi	r2,r2,-10108
8020d684:	f800283a 	ret

8020d688 <__locale_mb_cur_max>:
8020d688:	00a008b4 	movhi	r2,32802
8020d68c:	10bc2e04 	addi	r2,r2,-3912
8020d690:	10800017 	ldw	r2,0(r2)
8020d694:	f800283a 	ret

8020d698 <__locale_msgcharset>:
8020d698:	00a008b4 	movhi	r2,32802
8020d69c:	10b61904 	addi	r2,r2,-10140
8020d6a0:	f800283a 	ret

8020d6a4 <__locale_cjk_lang>:
8020d6a4:	0005883a 	mov	r2,zero
8020d6a8:	f800283a 	ret

8020d6ac <_localeconv_r>:
8020d6ac:	00a008b4 	movhi	r2,32802
8020d6b0:	10b62904 	addi	r2,r2,-10076
8020d6b4:	f800283a 	ret

8020d6b8 <setlocale>:
8020d6b8:	00a008b4 	movhi	r2,32802
8020d6bc:	10bc2d04 	addi	r2,r2,-3916
8020d6c0:	280d883a 	mov	r6,r5
8020d6c4:	200b883a 	mov	r5,r4
8020d6c8:	11000017 	ldw	r4,0(r2)
8020d6cc:	020d6001 	jmpi	8020d600 <_setlocale_r>

8020d6d0 <localeconv>:
8020d6d0:	00a008b4 	movhi	r2,32802
8020d6d4:	10b62904 	addi	r2,r2,-10076
8020d6d8:	f800283a 	ret

8020d6dc <__smakebuf_r>:
8020d6dc:	2880030b 	ldhu	r2,12(r5)
8020d6e0:	10c0008c 	andi	r3,r2,2
8020d6e4:	1800411e 	bne	r3,zero,8020d7ec <__smakebuf_r+0x110>
8020d6e8:	deffec04 	addi	sp,sp,-80
8020d6ec:	dc000f15 	stw	r16,60(sp)
8020d6f0:	2821883a 	mov	r16,r5
8020d6f4:	2940038f 	ldh	r5,14(r5)
8020d6f8:	dc401015 	stw	r17,64(sp)
8020d6fc:	dfc01315 	stw	ra,76(sp)
8020d700:	dcc01215 	stw	r19,72(sp)
8020d704:	dc801115 	stw	r18,68(sp)
8020d708:	2023883a 	mov	r17,r4
8020d70c:	28001c16 	blt	r5,zero,8020d780 <__smakebuf_r+0xa4>
8020d710:	d80d883a 	mov	r6,sp
8020d714:	0212b240 	call	80212b24 <_fstat_r>
8020d718:	10001816 	blt	r2,zero,8020d77c <__smakebuf_r+0xa0>
8020d71c:	d8800117 	ldw	r2,4(sp)
8020d720:	00e00014 	movui	r3,32768
8020d724:	10bc000c 	andi	r2,r2,61440
8020d728:	14c80020 	cmpeqi	r19,r2,8192
8020d72c:	10c03726 	beq	r2,r3,8020d80c <__smakebuf_r+0x130>
8020d730:	80c0030b 	ldhu	r3,12(r16)
8020d734:	18c20014 	ori	r3,r3,2048
8020d738:	80c0030d 	sth	r3,12(r16)
8020d73c:	00c80004 	movi	r3,8192
8020d740:	10c0521e 	bne	r2,r3,8020d88c <__smakebuf_r+0x1b0>
8020d744:	8140038f 	ldh	r5,14(r16)
8020d748:	8809883a 	mov	r4,r17
8020d74c:	0212b800 	call	80212b80 <_isatty_r>
8020d750:	10004c26 	beq	r2,zero,8020d884 <__smakebuf_r+0x1a8>
8020d754:	8080030b 	ldhu	r2,12(r16)
8020d758:	80c010c4 	addi	r3,r16,67
8020d75c:	80c00015 	stw	r3,0(r16)
8020d760:	10800054 	ori	r2,r2,1
8020d764:	8080030d 	sth	r2,12(r16)
8020d768:	00800044 	movi	r2,1
8020d76c:	80c00415 	stw	r3,16(r16)
8020d770:	80800515 	stw	r2,20(r16)
8020d774:	04810004 	movi	r18,1024
8020d778:	00000706 	br	8020d798 <__smakebuf_r+0xbc>
8020d77c:	8080030b 	ldhu	r2,12(r16)
8020d780:	10c0200c 	andi	r3,r2,128
8020d784:	18001f1e 	bne	r3,zero,8020d804 <__smakebuf_r+0x128>
8020d788:	04810004 	movi	r18,1024
8020d78c:	10820014 	ori	r2,r2,2048
8020d790:	8080030d 	sth	r2,12(r16)
8020d794:	0027883a 	mov	r19,zero
8020d798:	900b883a 	mov	r5,r18
8020d79c:	8809883a 	mov	r4,r17
8020d7a0:	020d8980 	call	8020d898 <_malloc_r>
8020d7a4:	10002c26 	beq	r2,zero,8020d858 <__smakebuf_r+0x17c>
8020d7a8:	80c0030b 	ldhu	r3,12(r16)
8020d7ac:	01200874 	movhi	r4,32801
8020d7b0:	2131fc04 	addi	r4,r4,-14352
8020d7b4:	89000f15 	stw	r4,60(r17)
8020d7b8:	18c02014 	ori	r3,r3,128
8020d7bc:	80c0030d 	sth	r3,12(r16)
8020d7c0:	80800015 	stw	r2,0(r16)
8020d7c4:	80800415 	stw	r2,16(r16)
8020d7c8:	84800515 	stw	r18,20(r16)
8020d7cc:	98001a1e 	bne	r19,zero,8020d838 <__smakebuf_r+0x15c>
8020d7d0:	dfc01317 	ldw	ra,76(sp)
8020d7d4:	dcc01217 	ldw	r19,72(sp)
8020d7d8:	dc801117 	ldw	r18,68(sp)
8020d7dc:	dc401017 	ldw	r17,64(sp)
8020d7e0:	dc000f17 	ldw	r16,60(sp)
8020d7e4:	dec01404 	addi	sp,sp,80
8020d7e8:	f800283a 	ret
8020d7ec:	288010c4 	addi	r2,r5,67
8020d7f0:	28800015 	stw	r2,0(r5)
8020d7f4:	28800415 	stw	r2,16(r5)
8020d7f8:	00800044 	movi	r2,1
8020d7fc:	28800515 	stw	r2,20(r5)
8020d800:	f800283a 	ret
8020d804:	04801004 	movi	r18,64
8020d808:	003fe006 	br	8020d78c <__reset+0xfa1ed78c>
8020d80c:	81000a17 	ldw	r4,40(r16)
8020d810:	00e00874 	movhi	r3,32801
8020d814:	18fec304 	addi	r3,r3,-1268
8020d818:	20ffc51e 	bne	r4,r3,8020d730 <__reset+0xfa1ed730>
8020d81c:	8080030b 	ldhu	r2,12(r16)
8020d820:	04810004 	movi	r18,1024
8020d824:	84801315 	stw	r18,76(r16)
8020d828:	1484b03a 	or	r2,r2,r18
8020d82c:	8080030d 	sth	r2,12(r16)
8020d830:	0027883a 	mov	r19,zero
8020d834:	003fd806 	br	8020d798 <__reset+0xfa1ed798>
8020d838:	8140038f 	ldh	r5,14(r16)
8020d83c:	8809883a 	mov	r4,r17
8020d840:	0212b800 	call	80212b80 <_isatty_r>
8020d844:	103fe226 	beq	r2,zero,8020d7d0 <__reset+0xfa1ed7d0>
8020d848:	8080030b 	ldhu	r2,12(r16)
8020d84c:	10800054 	ori	r2,r2,1
8020d850:	8080030d 	sth	r2,12(r16)
8020d854:	003fde06 	br	8020d7d0 <__reset+0xfa1ed7d0>
8020d858:	8080030b 	ldhu	r2,12(r16)
8020d85c:	10c0800c 	andi	r3,r2,512
8020d860:	183fdb1e 	bne	r3,zero,8020d7d0 <__reset+0xfa1ed7d0>
8020d864:	10800094 	ori	r2,r2,2
8020d868:	80c010c4 	addi	r3,r16,67
8020d86c:	8080030d 	sth	r2,12(r16)
8020d870:	00800044 	movi	r2,1
8020d874:	80c00015 	stw	r3,0(r16)
8020d878:	80c00415 	stw	r3,16(r16)
8020d87c:	80800515 	stw	r2,20(r16)
8020d880:	003fd306 	br	8020d7d0 <__reset+0xfa1ed7d0>
8020d884:	04810004 	movi	r18,1024
8020d888:	003fc306 	br	8020d798 <__reset+0xfa1ed798>
8020d88c:	0027883a 	mov	r19,zero
8020d890:	04810004 	movi	r18,1024
8020d894:	003fc006 	br	8020d798 <__reset+0xfa1ed798>

8020d898 <_malloc_r>:
8020d898:	defff504 	addi	sp,sp,-44
8020d89c:	dc800315 	stw	r18,12(sp)
8020d8a0:	dfc00a15 	stw	ra,40(sp)
8020d8a4:	df000915 	stw	fp,36(sp)
8020d8a8:	ddc00815 	stw	r23,32(sp)
8020d8ac:	dd800715 	stw	r22,28(sp)
8020d8b0:	dd400615 	stw	r21,24(sp)
8020d8b4:	dd000515 	stw	r20,20(sp)
8020d8b8:	dcc00415 	stw	r19,16(sp)
8020d8bc:	dc400215 	stw	r17,8(sp)
8020d8c0:	dc000115 	stw	r16,4(sp)
8020d8c4:	288002c4 	addi	r2,r5,11
8020d8c8:	00c00584 	movi	r3,22
8020d8cc:	2025883a 	mov	r18,r4
8020d8d0:	18807f2e 	bgeu	r3,r2,8020dad0 <_malloc_r+0x238>
8020d8d4:	047ffe04 	movi	r17,-8
8020d8d8:	1462703a 	and	r17,r2,r17
8020d8dc:	8800a316 	blt	r17,zero,8020db6c <_malloc_r+0x2d4>
8020d8e0:	8940a236 	bltu	r17,r5,8020db6c <_malloc_r+0x2d4>
8020d8e4:	02168140 	call	80216814 <__malloc_lock>
8020d8e8:	00807dc4 	movi	r2,503
8020d8ec:	1441e92e 	bgeu	r2,r17,8020e094 <_malloc_r+0x7fc>
8020d8f0:	8804d27a 	srli	r2,r17,9
8020d8f4:	1000a126 	beq	r2,zero,8020db7c <_malloc_r+0x2e4>
8020d8f8:	00c00104 	movi	r3,4
8020d8fc:	18811e36 	bltu	r3,r2,8020dd78 <_malloc_r+0x4e0>
8020d900:	8804d1ba 	srli	r2,r17,6
8020d904:	12000e44 	addi	r8,r2,57
8020d908:	11c00e04 	addi	r7,r2,56
8020d90c:	4209883a 	add	r4,r8,r8
8020d910:	04e008b4 	movhi	r19,32802
8020d914:	2109883a 	add	r4,r4,r4
8020d918:	9cf63704 	addi	r19,r19,-10020
8020d91c:	2109883a 	add	r4,r4,r4
8020d920:	9909883a 	add	r4,r19,r4
8020d924:	24000117 	ldw	r16,4(r4)
8020d928:	213ffe04 	addi	r4,r4,-8
8020d92c:	24009726 	beq	r4,r16,8020db8c <_malloc_r+0x2f4>
8020d930:	80800117 	ldw	r2,4(r16)
8020d934:	01bfff04 	movi	r6,-4
8020d938:	014003c4 	movi	r5,15
8020d93c:	1184703a 	and	r2,r2,r6
8020d940:	1447c83a 	sub	r3,r2,r17
8020d944:	28c00716 	blt	r5,r3,8020d964 <_malloc_r+0xcc>
8020d948:	1800920e 	bge	r3,zero,8020db94 <_malloc_r+0x2fc>
8020d94c:	84000317 	ldw	r16,12(r16)
8020d950:	24008e26 	beq	r4,r16,8020db8c <_malloc_r+0x2f4>
8020d954:	80800117 	ldw	r2,4(r16)
8020d958:	1184703a 	and	r2,r2,r6
8020d95c:	1447c83a 	sub	r3,r2,r17
8020d960:	28fff90e 	bge	r5,r3,8020d948 <__reset+0xfa1ed948>
8020d964:	3809883a 	mov	r4,r7
8020d968:	01a008b4 	movhi	r6,32802
8020d96c:	9c000417 	ldw	r16,16(r19)
8020d970:	31b63704 	addi	r6,r6,-10020
8020d974:	32000204 	addi	r8,r6,8
8020d978:	82013426 	beq	r16,r8,8020de4c <_malloc_r+0x5b4>
8020d97c:	80c00117 	ldw	r3,4(r16)
8020d980:	00bfff04 	movi	r2,-4
8020d984:	188e703a 	and	r7,r3,r2
8020d988:	3c45c83a 	sub	r2,r7,r17
8020d98c:	00c003c4 	movi	r3,15
8020d990:	18811f16 	blt	r3,r2,8020de10 <_malloc_r+0x578>
8020d994:	32000515 	stw	r8,20(r6)
8020d998:	32000415 	stw	r8,16(r6)
8020d99c:	10007f0e 	bge	r2,zero,8020db9c <_malloc_r+0x304>
8020d9a0:	00807fc4 	movi	r2,511
8020d9a4:	11c0fd36 	bltu	r2,r7,8020dd9c <_malloc_r+0x504>
8020d9a8:	3806d0fa 	srli	r3,r7,3
8020d9ac:	01c00044 	movi	r7,1
8020d9b0:	30800117 	ldw	r2,4(r6)
8020d9b4:	19400044 	addi	r5,r3,1
8020d9b8:	294b883a 	add	r5,r5,r5
8020d9bc:	1807d0ba 	srai	r3,r3,2
8020d9c0:	294b883a 	add	r5,r5,r5
8020d9c4:	294b883a 	add	r5,r5,r5
8020d9c8:	298b883a 	add	r5,r5,r6
8020d9cc:	38c6983a 	sll	r3,r7,r3
8020d9d0:	29c00017 	ldw	r7,0(r5)
8020d9d4:	2a7ffe04 	addi	r9,r5,-8
8020d9d8:	1886b03a 	or	r3,r3,r2
8020d9dc:	82400315 	stw	r9,12(r16)
8020d9e0:	81c00215 	stw	r7,8(r16)
8020d9e4:	30c00115 	stw	r3,4(r6)
8020d9e8:	2c000015 	stw	r16,0(r5)
8020d9ec:	3c000315 	stw	r16,12(r7)
8020d9f0:	2005d0ba 	srai	r2,r4,2
8020d9f4:	01400044 	movi	r5,1
8020d9f8:	288a983a 	sll	r5,r5,r2
8020d9fc:	19406f36 	bltu	r3,r5,8020dbbc <_malloc_r+0x324>
8020da00:	28c4703a 	and	r2,r5,r3
8020da04:	10000a1e 	bne	r2,zero,8020da30 <_malloc_r+0x198>
8020da08:	00bfff04 	movi	r2,-4
8020da0c:	294b883a 	add	r5,r5,r5
8020da10:	2088703a 	and	r4,r4,r2
8020da14:	28c4703a 	and	r2,r5,r3
8020da18:	21000104 	addi	r4,r4,4
8020da1c:	1000041e 	bne	r2,zero,8020da30 <_malloc_r+0x198>
8020da20:	294b883a 	add	r5,r5,r5
8020da24:	28c4703a 	and	r2,r5,r3
8020da28:	21000104 	addi	r4,r4,4
8020da2c:	103ffc26 	beq	r2,zero,8020da20 <__reset+0xfa1eda20>
8020da30:	02bfff04 	movi	r10,-4
8020da34:	024003c4 	movi	r9,15
8020da38:	21800044 	addi	r6,r4,1
8020da3c:	318d883a 	add	r6,r6,r6
8020da40:	318d883a 	add	r6,r6,r6
8020da44:	318d883a 	add	r6,r6,r6
8020da48:	998d883a 	add	r6,r19,r6
8020da4c:	333ffe04 	addi	r12,r6,-8
8020da50:	2017883a 	mov	r11,r4
8020da54:	31800104 	addi	r6,r6,4
8020da58:	34000017 	ldw	r16,0(r6)
8020da5c:	31fffd04 	addi	r7,r6,-12
8020da60:	81c0041e 	bne	r16,r7,8020da74 <_malloc_r+0x1dc>
8020da64:	0000fb06 	br	8020de54 <_malloc_r+0x5bc>
8020da68:	1801030e 	bge	r3,zero,8020de78 <_malloc_r+0x5e0>
8020da6c:	84000317 	ldw	r16,12(r16)
8020da70:	81c0f826 	beq	r16,r7,8020de54 <_malloc_r+0x5bc>
8020da74:	80800117 	ldw	r2,4(r16)
8020da78:	1284703a 	and	r2,r2,r10
8020da7c:	1447c83a 	sub	r3,r2,r17
8020da80:	48fff90e 	bge	r9,r3,8020da68 <__reset+0xfa1eda68>
8020da84:	80800317 	ldw	r2,12(r16)
8020da88:	81000217 	ldw	r4,8(r16)
8020da8c:	89400054 	ori	r5,r17,1
8020da90:	81400115 	stw	r5,4(r16)
8020da94:	20800315 	stw	r2,12(r4)
8020da98:	11000215 	stw	r4,8(r2)
8020da9c:	8463883a 	add	r17,r16,r17
8020daa0:	9c400515 	stw	r17,20(r19)
8020daa4:	9c400415 	stw	r17,16(r19)
8020daa8:	18800054 	ori	r2,r3,1
8020daac:	88800115 	stw	r2,4(r17)
8020dab0:	8a000315 	stw	r8,12(r17)
8020dab4:	8a000215 	stw	r8,8(r17)
8020dab8:	88e3883a 	add	r17,r17,r3
8020dabc:	88c00015 	stw	r3,0(r17)
8020dac0:	9009883a 	mov	r4,r18
8020dac4:	02168380 	call	80216838 <__malloc_unlock>
8020dac8:	80800204 	addi	r2,r16,8
8020dacc:	00001b06 	br	8020db3c <_malloc_r+0x2a4>
8020dad0:	04400404 	movi	r17,16
8020dad4:	89402536 	bltu	r17,r5,8020db6c <_malloc_r+0x2d4>
8020dad8:	02168140 	call	80216814 <__malloc_lock>
8020dadc:	00800184 	movi	r2,6
8020dae0:	01000084 	movi	r4,2
8020dae4:	04e008b4 	movhi	r19,32802
8020dae8:	1085883a 	add	r2,r2,r2
8020daec:	9cf63704 	addi	r19,r19,-10020
8020daf0:	1085883a 	add	r2,r2,r2
8020daf4:	9885883a 	add	r2,r19,r2
8020daf8:	14000117 	ldw	r16,4(r2)
8020dafc:	10fffe04 	addi	r3,r2,-8
8020db00:	80c0d926 	beq	r16,r3,8020de68 <_malloc_r+0x5d0>
8020db04:	80c00117 	ldw	r3,4(r16)
8020db08:	81000317 	ldw	r4,12(r16)
8020db0c:	00bfff04 	movi	r2,-4
8020db10:	1884703a 	and	r2,r3,r2
8020db14:	81400217 	ldw	r5,8(r16)
8020db18:	8085883a 	add	r2,r16,r2
8020db1c:	10c00117 	ldw	r3,4(r2)
8020db20:	29000315 	stw	r4,12(r5)
8020db24:	21400215 	stw	r5,8(r4)
8020db28:	18c00054 	ori	r3,r3,1
8020db2c:	10c00115 	stw	r3,4(r2)
8020db30:	9009883a 	mov	r4,r18
8020db34:	02168380 	call	80216838 <__malloc_unlock>
8020db38:	80800204 	addi	r2,r16,8
8020db3c:	dfc00a17 	ldw	ra,40(sp)
8020db40:	df000917 	ldw	fp,36(sp)
8020db44:	ddc00817 	ldw	r23,32(sp)
8020db48:	dd800717 	ldw	r22,28(sp)
8020db4c:	dd400617 	ldw	r21,24(sp)
8020db50:	dd000517 	ldw	r20,20(sp)
8020db54:	dcc00417 	ldw	r19,16(sp)
8020db58:	dc800317 	ldw	r18,12(sp)
8020db5c:	dc400217 	ldw	r17,8(sp)
8020db60:	dc000117 	ldw	r16,4(sp)
8020db64:	dec00b04 	addi	sp,sp,44
8020db68:	f800283a 	ret
8020db6c:	00800304 	movi	r2,12
8020db70:	90800015 	stw	r2,0(r18)
8020db74:	0005883a 	mov	r2,zero
8020db78:	003ff006 	br	8020db3c <__reset+0xfa1edb3c>
8020db7c:	01002004 	movi	r4,128
8020db80:	02001004 	movi	r8,64
8020db84:	01c00fc4 	movi	r7,63
8020db88:	003f6106 	br	8020d910 <__reset+0xfa1ed910>
8020db8c:	4009883a 	mov	r4,r8
8020db90:	003f7506 	br	8020d968 <__reset+0xfa1ed968>
8020db94:	81000317 	ldw	r4,12(r16)
8020db98:	003fde06 	br	8020db14 <__reset+0xfa1edb14>
8020db9c:	81c5883a 	add	r2,r16,r7
8020dba0:	11400117 	ldw	r5,4(r2)
8020dba4:	9009883a 	mov	r4,r18
8020dba8:	29400054 	ori	r5,r5,1
8020dbac:	11400115 	stw	r5,4(r2)
8020dbb0:	02168380 	call	80216838 <__malloc_unlock>
8020dbb4:	80800204 	addi	r2,r16,8
8020dbb8:	003fe006 	br	8020db3c <__reset+0xfa1edb3c>
8020dbbc:	9c000217 	ldw	r16,8(r19)
8020dbc0:	00bfff04 	movi	r2,-4
8020dbc4:	85800117 	ldw	r22,4(r16)
8020dbc8:	b0ac703a 	and	r22,r22,r2
8020dbcc:	b4400336 	bltu	r22,r17,8020dbdc <_malloc_r+0x344>
8020dbd0:	b445c83a 	sub	r2,r22,r17
8020dbd4:	00c003c4 	movi	r3,15
8020dbd8:	18805d16 	blt	r3,r2,8020dd50 <_malloc_r+0x4b8>
8020dbdc:	05e008b4 	movhi	r23,32802
8020dbe0:	00a008b4 	movhi	r2,32802
8020dbe4:	10bc4d04 	addi	r2,r2,-3788
8020dbe8:	bdfc2f04 	addi	r23,r23,-3908
8020dbec:	15400017 	ldw	r21,0(r2)
8020dbf0:	b8c00017 	ldw	r3,0(r23)
8020dbf4:	00bfffc4 	movi	r2,-1
8020dbf8:	858d883a 	add	r6,r16,r22
8020dbfc:	8d6b883a 	add	r21,r17,r21
8020dc00:	1880ea26 	beq	r3,r2,8020dfac <_malloc_r+0x714>
8020dc04:	ad4403c4 	addi	r21,r21,4111
8020dc08:	00bc0004 	movi	r2,-4096
8020dc0c:	a8aa703a 	and	r21,r21,r2
8020dc10:	a80b883a 	mov	r5,r21
8020dc14:	9009883a 	mov	r4,r18
8020dc18:	d9800015 	stw	r6,0(sp)
8020dc1c:	020f9e00 	call	8020f9e0 <_sbrk_r>
8020dc20:	1029883a 	mov	r20,r2
8020dc24:	00bfffc4 	movi	r2,-1
8020dc28:	d9800017 	ldw	r6,0(sp)
8020dc2c:	a080e826 	beq	r20,r2,8020dfd0 <_malloc_r+0x738>
8020dc30:	a180a636 	bltu	r20,r6,8020decc <_malloc_r+0x634>
8020dc34:	072008b4 	movhi	fp,32802
8020dc38:	e73c5604 	addi	fp,fp,-3752
8020dc3c:	e0800017 	ldw	r2,0(fp)
8020dc40:	a887883a 	add	r3,r21,r2
8020dc44:	e0c00015 	stw	r3,0(fp)
8020dc48:	3500e626 	beq	r6,r20,8020dfe4 <_malloc_r+0x74c>
8020dc4c:	b9000017 	ldw	r4,0(r23)
8020dc50:	00bfffc4 	movi	r2,-1
8020dc54:	2080ee26 	beq	r4,r2,8020e010 <_malloc_r+0x778>
8020dc58:	a185c83a 	sub	r2,r20,r6
8020dc5c:	10c5883a 	add	r2,r2,r3
8020dc60:	e0800015 	stw	r2,0(fp)
8020dc64:	a0c001cc 	andi	r3,r20,7
8020dc68:	1800bc26 	beq	r3,zero,8020df5c <_malloc_r+0x6c4>
8020dc6c:	a0e9c83a 	sub	r20,r20,r3
8020dc70:	00840204 	movi	r2,4104
8020dc74:	a5000204 	addi	r20,r20,8
8020dc78:	10c7c83a 	sub	r3,r2,r3
8020dc7c:	a545883a 	add	r2,r20,r21
8020dc80:	1083ffcc 	andi	r2,r2,4095
8020dc84:	18abc83a 	sub	r21,r3,r2
8020dc88:	a80b883a 	mov	r5,r21
8020dc8c:	9009883a 	mov	r4,r18
8020dc90:	020f9e00 	call	8020f9e0 <_sbrk_r>
8020dc94:	00ffffc4 	movi	r3,-1
8020dc98:	10c0e126 	beq	r2,r3,8020e020 <_malloc_r+0x788>
8020dc9c:	1505c83a 	sub	r2,r2,r20
8020dca0:	1545883a 	add	r2,r2,r21
8020dca4:	10800054 	ori	r2,r2,1
8020dca8:	e0c00017 	ldw	r3,0(fp)
8020dcac:	9d000215 	stw	r20,8(r19)
8020dcb0:	a0800115 	stw	r2,4(r20)
8020dcb4:	a8c7883a 	add	r3,r21,r3
8020dcb8:	e0c00015 	stw	r3,0(fp)
8020dcbc:	84c00e26 	beq	r16,r19,8020dcf8 <_malloc_r+0x460>
8020dcc0:	018003c4 	movi	r6,15
8020dcc4:	3580a72e 	bgeu	r6,r22,8020df64 <_malloc_r+0x6cc>
8020dcc8:	81400117 	ldw	r5,4(r16)
8020dccc:	013ffe04 	movi	r4,-8
8020dcd0:	b0bffd04 	addi	r2,r22,-12
8020dcd4:	1104703a 	and	r2,r2,r4
8020dcd8:	2900004c 	andi	r4,r5,1
8020dcdc:	2088b03a 	or	r4,r4,r2
8020dce0:	81000115 	stw	r4,4(r16)
8020dce4:	01400144 	movi	r5,5
8020dce8:	8089883a 	add	r4,r16,r2
8020dcec:	21400115 	stw	r5,4(r4)
8020dcf0:	21400215 	stw	r5,8(r4)
8020dcf4:	3080cd36 	bltu	r6,r2,8020e02c <_malloc_r+0x794>
8020dcf8:	00a008b4 	movhi	r2,32802
8020dcfc:	10bc4c04 	addi	r2,r2,-3792
8020dd00:	11000017 	ldw	r4,0(r2)
8020dd04:	20c0012e 	bgeu	r4,r3,8020dd0c <_malloc_r+0x474>
8020dd08:	10c00015 	stw	r3,0(r2)
8020dd0c:	00a008b4 	movhi	r2,32802
8020dd10:	10bc4b04 	addi	r2,r2,-3796
8020dd14:	11000017 	ldw	r4,0(r2)
8020dd18:	9c000217 	ldw	r16,8(r19)
8020dd1c:	20c0012e 	bgeu	r4,r3,8020dd24 <_malloc_r+0x48c>
8020dd20:	10c00015 	stw	r3,0(r2)
8020dd24:	80c00117 	ldw	r3,4(r16)
8020dd28:	00bfff04 	movi	r2,-4
8020dd2c:	1886703a 	and	r3,r3,r2
8020dd30:	1c45c83a 	sub	r2,r3,r17
8020dd34:	1c400236 	bltu	r3,r17,8020dd40 <_malloc_r+0x4a8>
8020dd38:	00c003c4 	movi	r3,15
8020dd3c:	18800416 	blt	r3,r2,8020dd50 <_malloc_r+0x4b8>
8020dd40:	9009883a 	mov	r4,r18
8020dd44:	02168380 	call	80216838 <__malloc_unlock>
8020dd48:	0005883a 	mov	r2,zero
8020dd4c:	003f7b06 	br	8020db3c <__reset+0xfa1edb3c>
8020dd50:	88c00054 	ori	r3,r17,1
8020dd54:	80c00115 	stw	r3,4(r16)
8020dd58:	8463883a 	add	r17,r16,r17
8020dd5c:	10800054 	ori	r2,r2,1
8020dd60:	9c400215 	stw	r17,8(r19)
8020dd64:	88800115 	stw	r2,4(r17)
8020dd68:	9009883a 	mov	r4,r18
8020dd6c:	02168380 	call	80216838 <__malloc_unlock>
8020dd70:	80800204 	addi	r2,r16,8
8020dd74:	003f7106 	br	8020db3c <__reset+0xfa1edb3c>
8020dd78:	00c00504 	movi	r3,20
8020dd7c:	18804a2e 	bgeu	r3,r2,8020dea8 <_malloc_r+0x610>
8020dd80:	00c01504 	movi	r3,84
8020dd84:	18806e36 	bltu	r3,r2,8020df40 <_malloc_r+0x6a8>
8020dd88:	8804d33a 	srli	r2,r17,12
8020dd8c:	12001bc4 	addi	r8,r2,111
8020dd90:	11c01b84 	addi	r7,r2,110
8020dd94:	4209883a 	add	r4,r8,r8
8020dd98:	003edd06 	br	8020d910 <__reset+0xfa1ed910>
8020dd9c:	3804d27a 	srli	r2,r7,9
8020dda0:	00c00104 	movi	r3,4
8020dda4:	1880442e 	bgeu	r3,r2,8020deb8 <_malloc_r+0x620>
8020dda8:	00c00504 	movi	r3,20
8020ddac:	18808136 	bltu	r3,r2,8020dfb4 <_malloc_r+0x71c>
8020ddb0:	11401704 	addi	r5,r2,92
8020ddb4:	10c016c4 	addi	r3,r2,91
8020ddb8:	294b883a 	add	r5,r5,r5
8020ddbc:	294b883a 	add	r5,r5,r5
8020ddc0:	294b883a 	add	r5,r5,r5
8020ddc4:	994b883a 	add	r5,r19,r5
8020ddc8:	28800017 	ldw	r2,0(r5)
8020ddcc:	01a008b4 	movhi	r6,32802
8020ddd0:	297ffe04 	addi	r5,r5,-8
8020ddd4:	31b63704 	addi	r6,r6,-10020
8020ddd8:	28806526 	beq	r5,r2,8020df70 <_malloc_r+0x6d8>
8020dddc:	01bfff04 	movi	r6,-4
8020dde0:	10c00117 	ldw	r3,4(r2)
8020dde4:	1986703a 	and	r3,r3,r6
8020dde8:	38c0022e 	bgeu	r7,r3,8020ddf4 <_malloc_r+0x55c>
8020ddec:	10800217 	ldw	r2,8(r2)
8020ddf0:	28bffb1e 	bne	r5,r2,8020dde0 <__reset+0xfa1edde0>
8020ddf4:	11400317 	ldw	r5,12(r2)
8020ddf8:	98c00117 	ldw	r3,4(r19)
8020ddfc:	81400315 	stw	r5,12(r16)
8020de00:	80800215 	stw	r2,8(r16)
8020de04:	2c000215 	stw	r16,8(r5)
8020de08:	14000315 	stw	r16,12(r2)
8020de0c:	003ef806 	br	8020d9f0 <__reset+0xfa1ed9f0>
8020de10:	88c00054 	ori	r3,r17,1
8020de14:	80c00115 	stw	r3,4(r16)
8020de18:	8463883a 	add	r17,r16,r17
8020de1c:	34400515 	stw	r17,20(r6)
8020de20:	34400415 	stw	r17,16(r6)
8020de24:	10c00054 	ori	r3,r2,1
8020de28:	8a000315 	stw	r8,12(r17)
8020de2c:	8a000215 	stw	r8,8(r17)
8020de30:	88c00115 	stw	r3,4(r17)
8020de34:	88a3883a 	add	r17,r17,r2
8020de38:	88800015 	stw	r2,0(r17)
8020de3c:	9009883a 	mov	r4,r18
8020de40:	02168380 	call	80216838 <__malloc_unlock>
8020de44:	80800204 	addi	r2,r16,8
8020de48:	003f3c06 	br	8020db3c <__reset+0xfa1edb3c>
8020de4c:	30c00117 	ldw	r3,4(r6)
8020de50:	003ee706 	br	8020d9f0 <__reset+0xfa1ed9f0>
8020de54:	5ac00044 	addi	r11,r11,1
8020de58:	588000cc 	andi	r2,r11,3
8020de5c:	31800204 	addi	r6,r6,8
8020de60:	103efd1e 	bne	r2,zero,8020da58 <__reset+0xfa1eda58>
8020de64:	00002406 	br	8020def8 <_malloc_r+0x660>
8020de68:	14000317 	ldw	r16,12(r2)
8020de6c:	143f251e 	bne	r2,r16,8020db04 <__reset+0xfa1edb04>
8020de70:	21000084 	addi	r4,r4,2
8020de74:	003ebc06 	br	8020d968 <__reset+0xfa1ed968>
8020de78:	8085883a 	add	r2,r16,r2
8020de7c:	10c00117 	ldw	r3,4(r2)
8020de80:	81000317 	ldw	r4,12(r16)
8020de84:	81400217 	ldw	r5,8(r16)
8020de88:	18c00054 	ori	r3,r3,1
8020de8c:	10c00115 	stw	r3,4(r2)
8020de90:	29000315 	stw	r4,12(r5)
8020de94:	21400215 	stw	r5,8(r4)
8020de98:	9009883a 	mov	r4,r18
8020de9c:	02168380 	call	80216838 <__malloc_unlock>
8020dea0:	80800204 	addi	r2,r16,8
8020dea4:	003f2506 	br	8020db3c <__reset+0xfa1edb3c>
8020dea8:	12001704 	addi	r8,r2,92
8020deac:	11c016c4 	addi	r7,r2,91
8020deb0:	4209883a 	add	r4,r8,r8
8020deb4:	003e9606 	br	8020d910 <__reset+0xfa1ed910>
8020deb8:	3804d1ba 	srli	r2,r7,6
8020debc:	11400e44 	addi	r5,r2,57
8020dec0:	10c00e04 	addi	r3,r2,56
8020dec4:	294b883a 	add	r5,r5,r5
8020dec8:	003fbc06 	br	8020ddbc <__reset+0xfa1eddbc>
8020decc:	84ff5926 	beq	r16,r19,8020dc34 <__reset+0xfa1edc34>
8020ded0:	00a008b4 	movhi	r2,32802
8020ded4:	10b63704 	addi	r2,r2,-10020
8020ded8:	14000217 	ldw	r16,8(r2)
8020dedc:	00bfff04 	movi	r2,-4
8020dee0:	80c00117 	ldw	r3,4(r16)
8020dee4:	1886703a 	and	r3,r3,r2
8020dee8:	003f9106 	br	8020dd30 <__reset+0xfa1edd30>
8020deec:	60800217 	ldw	r2,8(r12)
8020def0:	213fffc4 	addi	r4,r4,-1
8020def4:	1300651e 	bne	r2,r12,8020e08c <_malloc_r+0x7f4>
8020def8:	208000cc 	andi	r2,r4,3
8020defc:	633ffe04 	addi	r12,r12,-8
8020df00:	103ffa1e 	bne	r2,zero,8020deec <__reset+0xfa1edeec>
8020df04:	98800117 	ldw	r2,4(r19)
8020df08:	0146303a 	nor	r3,zero,r5
8020df0c:	1884703a 	and	r2,r3,r2
8020df10:	98800115 	stw	r2,4(r19)
8020df14:	294b883a 	add	r5,r5,r5
8020df18:	117f2836 	bltu	r2,r5,8020dbbc <__reset+0xfa1edbbc>
8020df1c:	283f2726 	beq	r5,zero,8020dbbc <__reset+0xfa1edbbc>
8020df20:	2886703a 	and	r3,r5,r2
8020df24:	5809883a 	mov	r4,r11
8020df28:	183ec31e 	bne	r3,zero,8020da38 <__reset+0xfa1eda38>
8020df2c:	294b883a 	add	r5,r5,r5
8020df30:	2886703a 	and	r3,r5,r2
8020df34:	21000104 	addi	r4,r4,4
8020df38:	183ffc26 	beq	r3,zero,8020df2c <__reset+0xfa1edf2c>
8020df3c:	003ebe06 	br	8020da38 <__reset+0xfa1eda38>
8020df40:	00c05504 	movi	r3,340
8020df44:	18801236 	bltu	r3,r2,8020df90 <_malloc_r+0x6f8>
8020df48:	8804d3fa 	srli	r2,r17,15
8020df4c:	12001e04 	addi	r8,r2,120
8020df50:	11c01dc4 	addi	r7,r2,119
8020df54:	4209883a 	add	r4,r8,r8
8020df58:	003e6d06 	br	8020d910 <__reset+0xfa1ed910>
8020df5c:	00c40004 	movi	r3,4096
8020df60:	003f4606 	br	8020dc7c <__reset+0xfa1edc7c>
8020df64:	00800044 	movi	r2,1
8020df68:	a0800115 	stw	r2,4(r20)
8020df6c:	003f7406 	br	8020dd40 <__reset+0xfa1edd40>
8020df70:	1805d0ba 	srai	r2,r3,2
8020df74:	01c00044 	movi	r7,1
8020df78:	30c00117 	ldw	r3,4(r6)
8020df7c:	388e983a 	sll	r7,r7,r2
8020df80:	2805883a 	mov	r2,r5
8020df84:	38c6b03a 	or	r3,r7,r3
8020df88:	30c00115 	stw	r3,4(r6)
8020df8c:	003f9b06 	br	8020ddfc <__reset+0xfa1eddfc>
8020df90:	00c15504 	movi	r3,1364
8020df94:	18801a36 	bltu	r3,r2,8020e000 <_malloc_r+0x768>
8020df98:	8804d4ba 	srli	r2,r17,18
8020df9c:	12001f44 	addi	r8,r2,125
8020dfa0:	11c01f04 	addi	r7,r2,124
8020dfa4:	4209883a 	add	r4,r8,r8
8020dfa8:	003e5906 	br	8020d910 <__reset+0xfa1ed910>
8020dfac:	ad400404 	addi	r21,r21,16
8020dfb0:	003f1706 	br	8020dc10 <__reset+0xfa1edc10>
8020dfb4:	00c01504 	movi	r3,84
8020dfb8:	18802336 	bltu	r3,r2,8020e048 <_malloc_r+0x7b0>
8020dfbc:	3804d33a 	srli	r2,r7,12
8020dfc0:	11401bc4 	addi	r5,r2,111
8020dfc4:	10c01b84 	addi	r3,r2,110
8020dfc8:	294b883a 	add	r5,r5,r5
8020dfcc:	003f7b06 	br	8020ddbc <__reset+0xfa1eddbc>
8020dfd0:	9c000217 	ldw	r16,8(r19)
8020dfd4:	00bfff04 	movi	r2,-4
8020dfd8:	80c00117 	ldw	r3,4(r16)
8020dfdc:	1886703a 	and	r3,r3,r2
8020dfe0:	003f5306 	br	8020dd30 <__reset+0xfa1edd30>
8020dfe4:	3083ffcc 	andi	r2,r6,4095
8020dfe8:	103f181e 	bne	r2,zero,8020dc4c <__reset+0xfa1edc4c>
8020dfec:	99000217 	ldw	r4,8(r19)
8020dff0:	b545883a 	add	r2,r22,r21
8020dff4:	10800054 	ori	r2,r2,1
8020dff8:	20800115 	stw	r2,4(r4)
8020dffc:	003f3e06 	br	8020dcf8 <__reset+0xfa1edcf8>
8020e000:	01003f84 	movi	r4,254
8020e004:	02001fc4 	movi	r8,127
8020e008:	01c01f84 	movi	r7,126
8020e00c:	003e4006 	br	8020d910 <__reset+0xfa1ed910>
8020e010:	00a008b4 	movhi	r2,32802
8020e014:	10bc2f04 	addi	r2,r2,-3908
8020e018:	15000015 	stw	r20,0(r2)
8020e01c:	003f1106 	br	8020dc64 <__reset+0xfa1edc64>
8020e020:	00800044 	movi	r2,1
8020e024:	002b883a 	mov	r21,zero
8020e028:	003f1f06 	br	8020dca8 <__reset+0xfa1edca8>
8020e02c:	81400204 	addi	r5,r16,8
8020e030:	9009883a 	mov	r4,r18
8020e034:	020ccac0 	call	8020ccac <_free_r>
8020e038:	00a008b4 	movhi	r2,32802
8020e03c:	10bc5604 	addi	r2,r2,-3752
8020e040:	10c00017 	ldw	r3,0(r2)
8020e044:	003f2c06 	br	8020dcf8 <__reset+0xfa1edcf8>
8020e048:	00c05504 	movi	r3,340
8020e04c:	18800536 	bltu	r3,r2,8020e064 <_malloc_r+0x7cc>
8020e050:	3804d3fa 	srli	r2,r7,15
8020e054:	11401e04 	addi	r5,r2,120
8020e058:	10c01dc4 	addi	r3,r2,119
8020e05c:	294b883a 	add	r5,r5,r5
8020e060:	003f5606 	br	8020ddbc <__reset+0xfa1eddbc>
8020e064:	00c15504 	movi	r3,1364
8020e068:	18800536 	bltu	r3,r2,8020e080 <_malloc_r+0x7e8>
8020e06c:	3804d4ba 	srli	r2,r7,18
8020e070:	11401f44 	addi	r5,r2,125
8020e074:	10c01f04 	addi	r3,r2,124
8020e078:	294b883a 	add	r5,r5,r5
8020e07c:	003f4f06 	br	8020ddbc <__reset+0xfa1eddbc>
8020e080:	01403f84 	movi	r5,254
8020e084:	00c01f84 	movi	r3,126
8020e088:	003f4c06 	br	8020ddbc <__reset+0xfa1eddbc>
8020e08c:	98800117 	ldw	r2,4(r19)
8020e090:	003fa006 	br	8020df14 <__reset+0xfa1edf14>
8020e094:	8808d0fa 	srli	r4,r17,3
8020e098:	20800044 	addi	r2,r4,1
8020e09c:	1085883a 	add	r2,r2,r2
8020e0a0:	003e9006 	br	8020dae4 <__reset+0xfa1edae4>

8020e0a4 <memchr>:
8020e0a4:	208000cc 	andi	r2,r4,3
8020e0a8:	280f883a 	mov	r7,r5
8020e0ac:	10003426 	beq	r2,zero,8020e180 <memchr+0xdc>
8020e0b0:	30bfffc4 	addi	r2,r6,-1
8020e0b4:	30001a26 	beq	r6,zero,8020e120 <memchr+0x7c>
8020e0b8:	20c00003 	ldbu	r3,0(r4)
8020e0bc:	29803fcc 	andi	r6,r5,255
8020e0c0:	30c0051e 	bne	r6,r3,8020e0d8 <memchr+0x34>
8020e0c4:	00001806 	br	8020e128 <memchr+0x84>
8020e0c8:	10001526 	beq	r2,zero,8020e120 <memchr+0x7c>
8020e0cc:	20c00003 	ldbu	r3,0(r4)
8020e0d0:	10bfffc4 	addi	r2,r2,-1
8020e0d4:	30c01426 	beq	r6,r3,8020e128 <memchr+0x84>
8020e0d8:	21000044 	addi	r4,r4,1
8020e0dc:	20c000cc 	andi	r3,r4,3
8020e0e0:	183ff91e 	bne	r3,zero,8020e0c8 <__reset+0xfa1ee0c8>
8020e0e4:	020000c4 	movi	r8,3
8020e0e8:	40801136 	bltu	r8,r2,8020e130 <memchr+0x8c>
8020e0ec:	10000c26 	beq	r2,zero,8020e120 <memchr+0x7c>
8020e0f0:	20c00003 	ldbu	r3,0(r4)
8020e0f4:	29403fcc 	andi	r5,r5,255
8020e0f8:	28c00b26 	beq	r5,r3,8020e128 <memchr+0x84>
8020e0fc:	20c00044 	addi	r3,r4,1
8020e100:	39803fcc 	andi	r6,r7,255
8020e104:	2089883a 	add	r4,r4,r2
8020e108:	00000306 	br	8020e118 <memchr+0x74>
8020e10c:	18c00044 	addi	r3,r3,1
8020e110:	197fffc3 	ldbu	r5,-1(r3)
8020e114:	31400526 	beq	r6,r5,8020e12c <memchr+0x88>
8020e118:	1805883a 	mov	r2,r3
8020e11c:	20fffb1e 	bne	r4,r3,8020e10c <__reset+0xfa1ee10c>
8020e120:	0005883a 	mov	r2,zero
8020e124:	f800283a 	ret
8020e128:	2005883a 	mov	r2,r4
8020e12c:	f800283a 	ret
8020e130:	28c03fcc 	andi	r3,r5,255
8020e134:	1812923a 	slli	r9,r3,8
8020e138:	02ffbff4 	movhi	r11,65279
8020e13c:	02a02074 	movhi	r10,32897
8020e140:	48d2b03a 	or	r9,r9,r3
8020e144:	4806943a 	slli	r3,r9,16
8020e148:	5affbfc4 	addi	r11,r11,-257
8020e14c:	52a02004 	addi	r10,r10,-32640
8020e150:	48d2b03a 	or	r9,r9,r3
8020e154:	20c00017 	ldw	r3,0(r4)
8020e158:	48c6f03a 	xor	r3,r9,r3
8020e15c:	1acd883a 	add	r6,r3,r11
8020e160:	00c6303a 	nor	r3,zero,r3
8020e164:	30c6703a 	and	r3,r6,r3
8020e168:	1a86703a 	and	r3,r3,r10
8020e16c:	183fe01e 	bne	r3,zero,8020e0f0 <__reset+0xfa1ee0f0>
8020e170:	10bfff04 	addi	r2,r2,-4
8020e174:	21000104 	addi	r4,r4,4
8020e178:	40bff636 	bltu	r8,r2,8020e154 <__reset+0xfa1ee154>
8020e17c:	003fdb06 	br	8020e0ec <__reset+0xfa1ee0ec>
8020e180:	3005883a 	mov	r2,r6
8020e184:	003fd706 	br	8020e0e4 <__reset+0xfa1ee0e4>

8020e188 <memmove>:
8020e188:	2005883a 	mov	r2,r4
8020e18c:	29000b2e 	bgeu	r5,r4,8020e1bc <memmove+0x34>
8020e190:	298f883a 	add	r7,r5,r6
8020e194:	21c0092e 	bgeu	r4,r7,8020e1bc <memmove+0x34>
8020e198:	2187883a 	add	r3,r4,r6
8020e19c:	198bc83a 	sub	r5,r3,r6
8020e1a0:	30004826 	beq	r6,zero,8020e2c4 <memmove+0x13c>
8020e1a4:	39ffffc4 	addi	r7,r7,-1
8020e1a8:	39000003 	ldbu	r4,0(r7)
8020e1ac:	18ffffc4 	addi	r3,r3,-1
8020e1b0:	19000005 	stb	r4,0(r3)
8020e1b4:	28fffb1e 	bne	r5,r3,8020e1a4 <__reset+0xfa1ee1a4>
8020e1b8:	f800283a 	ret
8020e1bc:	00c003c4 	movi	r3,15
8020e1c0:	1980412e 	bgeu	r3,r6,8020e2c8 <memmove+0x140>
8020e1c4:	2886b03a 	or	r3,r5,r2
8020e1c8:	18c000cc 	andi	r3,r3,3
8020e1cc:	1800401e 	bne	r3,zero,8020e2d0 <memmove+0x148>
8020e1d0:	33fffc04 	addi	r15,r6,-16
8020e1d4:	781ed13a 	srli	r15,r15,4
8020e1d8:	28c00104 	addi	r3,r5,4
8020e1dc:	13400104 	addi	r13,r2,4
8020e1e0:	781c913a 	slli	r14,r15,4
8020e1e4:	2b000204 	addi	r12,r5,8
8020e1e8:	12c00204 	addi	r11,r2,8
8020e1ec:	73800504 	addi	r14,r14,20
8020e1f0:	2a800304 	addi	r10,r5,12
8020e1f4:	12400304 	addi	r9,r2,12
8020e1f8:	2b9d883a 	add	r14,r5,r14
8020e1fc:	2811883a 	mov	r8,r5
8020e200:	100f883a 	mov	r7,r2
8020e204:	41000017 	ldw	r4,0(r8)
8020e208:	39c00404 	addi	r7,r7,16
8020e20c:	18c00404 	addi	r3,r3,16
8020e210:	393ffc15 	stw	r4,-16(r7)
8020e214:	193ffc17 	ldw	r4,-16(r3)
8020e218:	6b400404 	addi	r13,r13,16
8020e21c:	5ac00404 	addi	r11,r11,16
8020e220:	693ffc15 	stw	r4,-16(r13)
8020e224:	61000017 	ldw	r4,0(r12)
8020e228:	4a400404 	addi	r9,r9,16
8020e22c:	42000404 	addi	r8,r8,16
8020e230:	593ffc15 	stw	r4,-16(r11)
8020e234:	51000017 	ldw	r4,0(r10)
8020e238:	63000404 	addi	r12,r12,16
8020e23c:	52800404 	addi	r10,r10,16
8020e240:	493ffc15 	stw	r4,-16(r9)
8020e244:	1bbfef1e 	bne	r3,r14,8020e204 <__reset+0xfa1ee204>
8020e248:	79000044 	addi	r4,r15,1
8020e24c:	2008913a 	slli	r4,r4,4
8020e250:	328003cc 	andi	r10,r6,15
8020e254:	02c000c4 	movi	r11,3
8020e258:	1107883a 	add	r3,r2,r4
8020e25c:	290b883a 	add	r5,r5,r4
8020e260:	5a801e2e 	bgeu	r11,r10,8020e2dc <memmove+0x154>
8020e264:	1813883a 	mov	r9,r3
8020e268:	2811883a 	mov	r8,r5
8020e26c:	500f883a 	mov	r7,r10
8020e270:	41000017 	ldw	r4,0(r8)
8020e274:	4a400104 	addi	r9,r9,4
8020e278:	39ffff04 	addi	r7,r7,-4
8020e27c:	493fff15 	stw	r4,-4(r9)
8020e280:	42000104 	addi	r8,r8,4
8020e284:	59fffa36 	bltu	r11,r7,8020e270 <__reset+0xfa1ee270>
8020e288:	513fff04 	addi	r4,r10,-4
8020e28c:	2008d0ba 	srli	r4,r4,2
8020e290:	318000cc 	andi	r6,r6,3
8020e294:	21000044 	addi	r4,r4,1
8020e298:	2109883a 	add	r4,r4,r4
8020e29c:	2109883a 	add	r4,r4,r4
8020e2a0:	1907883a 	add	r3,r3,r4
8020e2a4:	290b883a 	add	r5,r5,r4
8020e2a8:	30000b26 	beq	r6,zero,8020e2d8 <memmove+0x150>
8020e2ac:	198d883a 	add	r6,r3,r6
8020e2b0:	29c00003 	ldbu	r7,0(r5)
8020e2b4:	18c00044 	addi	r3,r3,1
8020e2b8:	29400044 	addi	r5,r5,1
8020e2bc:	19ffffc5 	stb	r7,-1(r3)
8020e2c0:	19bffb1e 	bne	r3,r6,8020e2b0 <__reset+0xfa1ee2b0>
8020e2c4:	f800283a 	ret
8020e2c8:	1007883a 	mov	r3,r2
8020e2cc:	003ff606 	br	8020e2a8 <__reset+0xfa1ee2a8>
8020e2d0:	1007883a 	mov	r3,r2
8020e2d4:	003ff506 	br	8020e2ac <__reset+0xfa1ee2ac>
8020e2d8:	f800283a 	ret
8020e2dc:	500d883a 	mov	r6,r10
8020e2e0:	003ff106 	br	8020e2a8 <__reset+0xfa1ee2a8>

8020e2e4 <memset>:
8020e2e4:	20c000cc 	andi	r3,r4,3
8020e2e8:	2005883a 	mov	r2,r4
8020e2ec:	18004426 	beq	r3,zero,8020e400 <memset+0x11c>
8020e2f0:	31ffffc4 	addi	r7,r6,-1
8020e2f4:	30004026 	beq	r6,zero,8020e3f8 <memset+0x114>
8020e2f8:	2813883a 	mov	r9,r5
8020e2fc:	200d883a 	mov	r6,r4
8020e300:	2007883a 	mov	r3,r4
8020e304:	00000406 	br	8020e318 <memset+0x34>
8020e308:	3a3fffc4 	addi	r8,r7,-1
8020e30c:	31800044 	addi	r6,r6,1
8020e310:	38003926 	beq	r7,zero,8020e3f8 <memset+0x114>
8020e314:	400f883a 	mov	r7,r8
8020e318:	18c00044 	addi	r3,r3,1
8020e31c:	32400005 	stb	r9,0(r6)
8020e320:	1a0000cc 	andi	r8,r3,3
8020e324:	403ff81e 	bne	r8,zero,8020e308 <__reset+0xfa1ee308>
8020e328:	010000c4 	movi	r4,3
8020e32c:	21c02d2e 	bgeu	r4,r7,8020e3e4 <memset+0x100>
8020e330:	29003fcc 	andi	r4,r5,255
8020e334:	200c923a 	slli	r6,r4,8
8020e338:	3108b03a 	or	r4,r6,r4
8020e33c:	200c943a 	slli	r6,r4,16
8020e340:	218cb03a 	or	r6,r4,r6
8020e344:	010003c4 	movi	r4,15
8020e348:	21c0182e 	bgeu	r4,r7,8020e3ac <memset+0xc8>
8020e34c:	3b3ffc04 	addi	r12,r7,-16
8020e350:	6018d13a 	srli	r12,r12,4
8020e354:	1a000104 	addi	r8,r3,4
8020e358:	1ac00204 	addi	r11,r3,8
8020e35c:	6008913a 	slli	r4,r12,4
8020e360:	1a800304 	addi	r10,r3,12
8020e364:	1813883a 	mov	r9,r3
8020e368:	21000504 	addi	r4,r4,20
8020e36c:	1909883a 	add	r4,r3,r4
8020e370:	49800015 	stw	r6,0(r9)
8020e374:	41800015 	stw	r6,0(r8)
8020e378:	59800015 	stw	r6,0(r11)
8020e37c:	51800015 	stw	r6,0(r10)
8020e380:	42000404 	addi	r8,r8,16
8020e384:	4a400404 	addi	r9,r9,16
8020e388:	5ac00404 	addi	r11,r11,16
8020e38c:	52800404 	addi	r10,r10,16
8020e390:	413ff71e 	bne	r8,r4,8020e370 <__reset+0xfa1ee370>
8020e394:	63000044 	addi	r12,r12,1
8020e398:	6018913a 	slli	r12,r12,4
8020e39c:	39c003cc 	andi	r7,r7,15
8020e3a0:	010000c4 	movi	r4,3
8020e3a4:	1b07883a 	add	r3,r3,r12
8020e3a8:	21c00e2e 	bgeu	r4,r7,8020e3e4 <memset+0x100>
8020e3ac:	1813883a 	mov	r9,r3
8020e3b0:	3811883a 	mov	r8,r7
8020e3b4:	010000c4 	movi	r4,3
8020e3b8:	49800015 	stw	r6,0(r9)
8020e3bc:	423fff04 	addi	r8,r8,-4
8020e3c0:	4a400104 	addi	r9,r9,4
8020e3c4:	223ffc36 	bltu	r4,r8,8020e3b8 <__reset+0xfa1ee3b8>
8020e3c8:	393fff04 	addi	r4,r7,-4
8020e3cc:	2008d0ba 	srli	r4,r4,2
8020e3d0:	39c000cc 	andi	r7,r7,3
8020e3d4:	21000044 	addi	r4,r4,1
8020e3d8:	2109883a 	add	r4,r4,r4
8020e3dc:	2109883a 	add	r4,r4,r4
8020e3e0:	1907883a 	add	r3,r3,r4
8020e3e4:	38000526 	beq	r7,zero,8020e3fc <memset+0x118>
8020e3e8:	19cf883a 	add	r7,r3,r7
8020e3ec:	19400005 	stb	r5,0(r3)
8020e3f0:	18c00044 	addi	r3,r3,1
8020e3f4:	38fffd1e 	bne	r7,r3,8020e3ec <__reset+0xfa1ee3ec>
8020e3f8:	f800283a 	ret
8020e3fc:	f800283a 	ret
8020e400:	2007883a 	mov	r3,r4
8020e404:	300f883a 	mov	r7,r6
8020e408:	003fc706 	br	8020e328 <__reset+0xfa1ee328>

8020e40c <_Balloc>:
8020e40c:	20801317 	ldw	r2,76(r4)
8020e410:	defffc04 	addi	sp,sp,-16
8020e414:	dc400115 	stw	r17,4(sp)
8020e418:	dc000015 	stw	r16,0(sp)
8020e41c:	dfc00315 	stw	ra,12(sp)
8020e420:	dc800215 	stw	r18,8(sp)
8020e424:	2023883a 	mov	r17,r4
8020e428:	2821883a 	mov	r16,r5
8020e42c:	10000f26 	beq	r2,zero,8020e46c <_Balloc+0x60>
8020e430:	8407883a 	add	r3,r16,r16
8020e434:	18c7883a 	add	r3,r3,r3
8020e438:	10c7883a 	add	r3,r2,r3
8020e43c:	18800017 	ldw	r2,0(r3)
8020e440:	10001126 	beq	r2,zero,8020e488 <_Balloc+0x7c>
8020e444:	11000017 	ldw	r4,0(r2)
8020e448:	19000015 	stw	r4,0(r3)
8020e44c:	10000415 	stw	zero,16(r2)
8020e450:	10000315 	stw	zero,12(r2)
8020e454:	dfc00317 	ldw	ra,12(sp)
8020e458:	dc800217 	ldw	r18,8(sp)
8020e45c:	dc400117 	ldw	r17,4(sp)
8020e460:	dc000017 	ldw	r16,0(sp)
8020e464:	dec00404 	addi	sp,sp,16
8020e468:	f800283a 	ret
8020e46c:	01800844 	movi	r6,33
8020e470:	01400104 	movi	r5,4
8020e474:	02127540 	call	80212754 <_calloc_r>
8020e478:	88801315 	stw	r2,76(r17)
8020e47c:	103fec1e 	bne	r2,zero,8020e430 <__reset+0xfa1ee430>
8020e480:	0005883a 	mov	r2,zero
8020e484:	003ff306 	br	8020e454 <__reset+0xfa1ee454>
8020e488:	01400044 	movi	r5,1
8020e48c:	2c24983a 	sll	r18,r5,r16
8020e490:	8809883a 	mov	r4,r17
8020e494:	91800144 	addi	r6,r18,5
8020e498:	318d883a 	add	r6,r6,r6
8020e49c:	318d883a 	add	r6,r6,r6
8020e4a0:	02127540 	call	80212754 <_calloc_r>
8020e4a4:	103ff626 	beq	r2,zero,8020e480 <__reset+0xfa1ee480>
8020e4a8:	14000115 	stw	r16,4(r2)
8020e4ac:	14800215 	stw	r18,8(r2)
8020e4b0:	003fe606 	br	8020e44c <__reset+0xfa1ee44c>

8020e4b4 <_Bfree>:
8020e4b4:	28000826 	beq	r5,zero,8020e4d8 <_Bfree+0x24>
8020e4b8:	28c00117 	ldw	r3,4(r5)
8020e4bc:	20801317 	ldw	r2,76(r4)
8020e4c0:	18c7883a 	add	r3,r3,r3
8020e4c4:	18c7883a 	add	r3,r3,r3
8020e4c8:	10c5883a 	add	r2,r2,r3
8020e4cc:	10c00017 	ldw	r3,0(r2)
8020e4d0:	28c00015 	stw	r3,0(r5)
8020e4d4:	11400015 	stw	r5,0(r2)
8020e4d8:	f800283a 	ret

8020e4dc <__multadd>:
8020e4dc:	defffa04 	addi	sp,sp,-24
8020e4e0:	dc800315 	stw	r18,12(sp)
8020e4e4:	dc400215 	stw	r17,8(sp)
8020e4e8:	dc000115 	stw	r16,4(sp)
8020e4ec:	2823883a 	mov	r17,r5
8020e4f0:	2c000417 	ldw	r16,16(r5)
8020e4f4:	dfc00515 	stw	ra,20(sp)
8020e4f8:	dcc00415 	stw	r19,16(sp)
8020e4fc:	2025883a 	mov	r18,r4
8020e500:	29400504 	addi	r5,r5,20
8020e504:	0011883a 	mov	r8,zero
8020e508:	28c00017 	ldw	r3,0(r5)
8020e50c:	29400104 	addi	r5,r5,4
8020e510:	42000044 	addi	r8,r8,1
8020e514:	18bfffcc 	andi	r2,r3,65535
8020e518:	1185383a 	mul	r2,r2,r6
8020e51c:	1806d43a 	srli	r3,r3,16
8020e520:	11cf883a 	add	r7,r2,r7
8020e524:	3808d43a 	srli	r4,r7,16
8020e528:	1987383a 	mul	r3,r3,r6
8020e52c:	38bfffcc 	andi	r2,r7,65535
8020e530:	1907883a 	add	r3,r3,r4
8020e534:	1808943a 	slli	r4,r3,16
8020e538:	180ed43a 	srli	r7,r3,16
8020e53c:	2085883a 	add	r2,r4,r2
8020e540:	28bfff15 	stw	r2,-4(r5)
8020e544:	443ff016 	blt	r8,r16,8020e508 <__reset+0xfa1ee508>
8020e548:	38000926 	beq	r7,zero,8020e570 <__multadd+0x94>
8020e54c:	88800217 	ldw	r2,8(r17)
8020e550:	80800f0e 	bge	r16,r2,8020e590 <__multadd+0xb4>
8020e554:	80800144 	addi	r2,r16,5
8020e558:	1085883a 	add	r2,r2,r2
8020e55c:	1085883a 	add	r2,r2,r2
8020e560:	8885883a 	add	r2,r17,r2
8020e564:	11c00015 	stw	r7,0(r2)
8020e568:	84000044 	addi	r16,r16,1
8020e56c:	8c000415 	stw	r16,16(r17)
8020e570:	8805883a 	mov	r2,r17
8020e574:	dfc00517 	ldw	ra,20(sp)
8020e578:	dcc00417 	ldw	r19,16(sp)
8020e57c:	dc800317 	ldw	r18,12(sp)
8020e580:	dc400217 	ldw	r17,8(sp)
8020e584:	dc000117 	ldw	r16,4(sp)
8020e588:	dec00604 	addi	sp,sp,24
8020e58c:	f800283a 	ret
8020e590:	89400117 	ldw	r5,4(r17)
8020e594:	9009883a 	mov	r4,r18
8020e598:	d9c00015 	stw	r7,0(sp)
8020e59c:	29400044 	addi	r5,r5,1
8020e5a0:	020e40c0 	call	8020e40c <_Balloc>
8020e5a4:	89800417 	ldw	r6,16(r17)
8020e5a8:	89400304 	addi	r5,r17,12
8020e5ac:	11000304 	addi	r4,r2,12
8020e5b0:	31800084 	addi	r6,r6,2
8020e5b4:	318d883a 	add	r6,r6,r6
8020e5b8:	318d883a 	add	r6,r6,r6
8020e5bc:	1027883a 	mov	r19,r2
8020e5c0:	02062d80 	call	802062d8 <memcpy>
8020e5c4:	d9c00017 	ldw	r7,0(sp)
8020e5c8:	88000a26 	beq	r17,zero,8020e5f4 <__multadd+0x118>
8020e5cc:	88c00117 	ldw	r3,4(r17)
8020e5d0:	90801317 	ldw	r2,76(r18)
8020e5d4:	18c7883a 	add	r3,r3,r3
8020e5d8:	18c7883a 	add	r3,r3,r3
8020e5dc:	10c5883a 	add	r2,r2,r3
8020e5e0:	10c00017 	ldw	r3,0(r2)
8020e5e4:	88c00015 	stw	r3,0(r17)
8020e5e8:	14400015 	stw	r17,0(r2)
8020e5ec:	9823883a 	mov	r17,r19
8020e5f0:	003fd806 	br	8020e554 <__reset+0xfa1ee554>
8020e5f4:	9823883a 	mov	r17,r19
8020e5f8:	003fd606 	br	8020e554 <__reset+0xfa1ee554>

8020e5fc <__s2b>:
8020e5fc:	defff904 	addi	sp,sp,-28
8020e600:	dc400115 	stw	r17,4(sp)
8020e604:	dc000015 	stw	r16,0(sp)
8020e608:	2023883a 	mov	r17,r4
8020e60c:	2821883a 	mov	r16,r5
8020e610:	39000204 	addi	r4,r7,8
8020e614:	01400244 	movi	r5,9
8020e618:	dcc00315 	stw	r19,12(sp)
8020e61c:	dc800215 	stw	r18,8(sp)
8020e620:	dfc00615 	stw	ra,24(sp)
8020e624:	dd400515 	stw	r21,20(sp)
8020e628:	dd000415 	stw	r20,16(sp)
8020e62c:	3825883a 	mov	r18,r7
8020e630:	3027883a 	mov	r19,r6
8020e634:	0213a840 	call	80213a84 <__divsi3>
8020e638:	00c00044 	movi	r3,1
8020e63c:	000b883a 	mov	r5,zero
8020e640:	1880030e 	bge	r3,r2,8020e650 <__s2b+0x54>
8020e644:	18c7883a 	add	r3,r3,r3
8020e648:	29400044 	addi	r5,r5,1
8020e64c:	18bffd16 	blt	r3,r2,8020e644 <__reset+0xfa1ee644>
8020e650:	8809883a 	mov	r4,r17
8020e654:	020e40c0 	call	8020e40c <_Balloc>
8020e658:	d8c00717 	ldw	r3,28(sp)
8020e65c:	10c00515 	stw	r3,20(r2)
8020e660:	00c00044 	movi	r3,1
8020e664:	10c00415 	stw	r3,16(r2)
8020e668:	00c00244 	movi	r3,9
8020e66c:	1cc0210e 	bge	r3,r19,8020e6f4 <__s2b+0xf8>
8020e670:	80eb883a 	add	r21,r16,r3
8020e674:	a829883a 	mov	r20,r21
8020e678:	84e1883a 	add	r16,r16,r19
8020e67c:	a1c00007 	ldb	r7,0(r20)
8020e680:	01800284 	movi	r6,10
8020e684:	a5000044 	addi	r20,r20,1
8020e688:	100b883a 	mov	r5,r2
8020e68c:	39fff404 	addi	r7,r7,-48
8020e690:	8809883a 	mov	r4,r17
8020e694:	020e4dc0 	call	8020e4dc <__multadd>
8020e698:	a43ff81e 	bne	r20,r16,8020e67c <__reset+0xfa1ee67c>
8020e69c:	ace1883a 	add	r16,r21,r19
8020e6a0:	843ffe04 	addi	r16,r16,-8
8020e6a4:	9c800a0e 	bge	r19,r18,8020e6d0 <__s2b+0xd4>
8020e6a8:	94e5c83a 	sub	r18,r18,r19
8020e6ac:	84a5883a 	add	r18,r16,r18
8020e6b0:	81c00007 	ldb	r7,0(r16)
8020e6b4:	01800284 	movi	r6,10
8020e6b8:	84000044 	addi	r16,r16,1
8020e6bc:	100b883a 	mov	r5,r2
8020e6c0:	39fff404 	addi	r7,r7,-48
8020e6c4:	8809883a 	mov	r4,r17
8020e6c8:	020e4dc0 	call	8020e4dc <__multadd>
8020e6cc:	84bff81e 	bne	r16,r18,8020e6b0 <__reset+0xfa1ee6b0>
8020e6d0:	dfc00617 	ldw	ra,24(sp)
8020e6d4:	dd400517 	ldw	r21,20(sp)
8020e6d8:	dd000417 	ldw	r20,16(sp)
8020e6dc:	dcc00317 	ldw	r19,12(sp)
8020e6e0:	dc800217 	ldw	r18,8(sp)
8020e6e4:	dc400117 	ldw	r17,4(sp)
8020e6e8:	dc000017 	ldw	r16,0(sp)
8020e6ec:	dec00704 	addi	sp,sp,28
8020e6f0:	f800283a 	ret
8020e6f4:	84000284 	addi	r16,r16,10
8020e6f8:	1827883a 	mov	r19,r3
8020e6fc:	003fe906 	br	8020e6a4 <__reset+0xfa1ee6a4>

8020e700 <__hi0bits>:
8020e700:	20bfffec 	andhi	r2,r4,65535
8020e704:	1000141e 	bne	r2,zero,8020e758 <__hi0bits+0x58>
8020e708:	2008943a 	slli	r4,r4,16
8020e70c:	00800404 	movi	r2,16
8020e710:	20ffc02c 	andhi	r3,r4,65280
8020e714:	1800021e 	bne	r3,zero,8020e720 <__hi0bits+0x20>
8020e718:	2008923a 	slli	r4,r4,8
8020e71c:	10800204 	addi	r2,r2,8
8020e720:	20fc002c 	andhi	r3,r4,61440
8020e724:	1800021e 	bne	r3,zero,8020e730 <__hi0bits+0x30>
8020e728:	2008913a 	slli	r4,r4,4
8020e72c:	10800104 	addi	r2,r2,4
8020e730:	20f0002c 	andhi	r3,r4,49152
8020e734:	1800031e 	bne	r3,zero,8020e744 <__hi0bits+0x44>
8020e738:	2109883a 	add	r4,r4,r4
8020e73c:	10800084 	addi	r2,r2,2
8020e740:	2109883a 	add	r4,r4,r4
8020e744:	20000316 	blt	r4,zero,8020e754 <__hi0bits+0x54>
8020e748:	2110002c 	andhi	r4,r4,16384
8020e74c:	2000041e 	bne	r4,zero,8020e760 <__hi0bits+0x60>
8020e750:	00800804 	movi	r2,32
8020e754:	f800283a 	ret
8020e758:	0005883a 	mov	r2,zero
8020e75c:	003fec06 	br	8020e710 <__reset+0xfa1ee710>
8020e760:	10800044 	addi	r2,r2,1
8020e764:	f800283a 	ret

8020e768 <__lo0bits>:
8020e768:	20c00017 	ldw	r3,0(r4)
8020e76c:	188001cc 	andi	r2,r3,7
8020e770:	10000826 	beq	r2,zero,8020e794 <__lo0bits+0x2c>
8020e774:	1880004c 	andi	r2,r3,1
8020e778:	1000211e 	bne	r2,zero,8020e800 <__lo0bits+0x98>
8020e77c:	1880008c 	andi	r2,r3,2
8020e780:	1000211e 	bne	r2,zero,8020e808 <__lo0bits+0xa0>
8020e784:	1806d0ba 	srli	r3,r3,2
8020e788:	00800084 	movi	r2,2
8020e78c:	20c00015 	stw	r3,0(r4)
8020e790:	f800283a 	ret
8020e794:	18bfffcc 	andi	r2,r3,65535
8020e798:	10001326 	beq	r2,zero,8020e7e8 <__lo0bits+0x80>
8020e79c:	0005883a 	mov	r2,zero
8020e7a0:	19403fcc 	andi	r5,r3,255
8020e7a4:	2800021e 	bne	r5,zero,8020e7b0 <__lo0bits+0x48>
8020e7a8:	1806d23a 	srli	r3,r3,8
8020e7ac:	10800204 	addi	r2,r2,8
8020e7b0:	194003cc 	andi	r5,r3,15
8020e7b4:	2800021e 	bne	r5,zero,8020e7c0 <__lo0bits+0x58>
8020e7b8:	1806d13a 	srli	r3,r3,4
8020e7bc:	10800104 	addi	r2,r2,4
8020e7c0:	194000cc 	andi	r5,r3,3
8020e7c4:	2800021e 	bne	r5,zero,8020e7d0 <__lo0bits+0x68>
8020e7c8:	1806d0ba 	srli	r3,r3,2
8020e7cc:	10800084 	addi	r2,r2,2
8020e7d0:	1940004c 	andi	r5,r3,1
8020e7d4:	2800081e 	bne	r5,zero,8020e7f8 <__lo0bits+0x90>
8020e7d8:	1806d07a 	srli	r3,r3,1
8020e7dc:	1800051e 	bne	r3,zero,8020e7f4 <__lo0bits+0x8c>
8020e7e0:	00800804 	movi	r2,32
8020e7e4:	f800283a 	ret
8020e7e8:	1806d43a 	srli	r3,r3,16
8020e7ec:	00800404 	movi	r2,16
8020e7f0:	003feb06 	br	8020e7a0 <__reset+0xfa1ee7a0>
8020e7f4:	10800044 	addi	r2,r2,1
8020e7f8:	20c00015 	stw	r3,0(r4)
8020e7fc:	f800283a 	ret
8020e800:	0005883a 	mov	r2,zero
8020e804:	f800283a 	ret
8020e808:	1806d07a 	srli	r3,r3,1
8020e80c:	00800044 	movi	r2,1
8020e810:	20c00015 	stw	r3,0(r4)
8020e814:	f800283a 	ret

8020e818 <__i2b>:
8020e818:	defffd04 	addi	sp,sp,-12
8020e81c:	dc000015 	stw	r16,0(sp)
8020e820:	04000044 	movi	r16,1
8020e824:	dc400115 	stw	r17,4(sp)
8020e828:	2823883a 	mov	r17,r5
8020e82c:	800b883a 	mov	r5,r16
8020e830:	dfc00215 	stw	ra,8(sp)
8020e834:	020e40c0 	call	8020e40c <_Balloc>
8020e838:	14400515 	stw	r17,20(r2)
8020e83c:	14000415 	stw	r16,16(r2)
8020e840:	dfc00217 	ldw	ra,8(sp)
8020e844:	dc400117 	ldw	r17,4(sp)
8020e848:	dc000017 	ldw	r16,0(sp)
8020e84c:	dec00304 	addi	sp,sp,12
8020e850:	f800283a 	ret

8020e854 <__multiply>:
8020e854:	defffa04 	addi	sp,sp,-24
8020e858:	dcc00315 	stw	r19,12(sp)
8020e85c:	dc800215 	stw	r18,8(sp)
8020e860:	34c00417 	ldw	r19,16(r6)
8020e864:	2c800417 	ldw	r18,16(r5)
8020e868:	dd000415 	stw	r20,16(sp)
8020e86c:	dc400115 	stw	r17,4(sp)
8020e870:	dfc00515 	stw	ra,20(sp)
8020e874:	dc000015 	stw	r16,0(sp)
8020e878:	2829883a 	mov	r20,r5
8020e87c:	3023883a 	mov	r17,r6
8020e880:	94c0050e 	bge	r18,r19,8020e898 <__multiply+0x44>
8020e884:	9007883a 	mov	r3,r18
8020e888:	3029883a 	mov	r20,r6
8020e88c:	9825883a 	mov	r18,r19
8020e890:	2823883a 	mov	r17,r5
8020e894:	1827883a 	mov	r19,r3
8020e898:	a0800217 	ldw	r2,8(r20)
8020e89c:	94e1883a 	add	r16,r18,r19
8020e8a0:	a1400117 	ldw	r5,4(r20)
8020e8a4:	1400010e 	bge	r2,r16,8020e8ac <__multiply+0x58>
8020e8a8:	29400044 	addi	r5,r5,1
8020e8ac:	020e40c0 	call	8020e40c <_Balloc>
8020e8b0:	8415883a 	add	r10,r16,r16
8020e8b4:	12c00504 	addi	r11,r2,20
8020e8b8:	5295883a 	add	r10,r10,r10
8020e8bc:	5a95883a 	add	r10,r11,r10
8020e8c0:	5807883a 	mov	r3,r11
8020e8c4:	5a80032e 	bgeu	r11,r10,8020e8d4 <__multiply+0x80>
8020e8c8:	18000015 	stw	zero,0(r3)
8020e8cc:	18c00104 	addi	r3,r3,4
8020e8d0:	1abffd36 	bltu	r3,r10,8020e8c8 <__reset+0xfa1ee8c8>
8020e8d4:	9ce7883a 	add	r19,r19,r19
8020e8d8:	94a5883a 	add	r18,r18,r18
8020e8dc:	89800504 	addi	r6,r17,20
8020e8e0:	9ce7883a 	add	r19,r19,r19
8020e8e4:	a3400504 	addi	r13,r20,20
8020e8e8:	94a5883a 	add	r18,r18,r18
8020e8ec:	34d9883a 	add	r12,r6,r19
8020e8f0:	6c93883a 	add	r9,r13,r18
8020e8f4:	3300422e 	bgeu	r6,r12,8020ea00 <__multiply+0x1ac>
8020e8f8:	37c00017 	ldw	ra,0(r6)
8020e8fc:	fbffffcc 	andi	r15,ra,65535
8020e900:	78001b26 	beq	r15,zero,8020e970 <__multiply+0x11c>
8020e904:	5811883a 	mov	r8,r11
8020e908:	681d883a 	mov	r14,r13
8020e90c:	000f883a 	mov	r7,zero
8020e910:	71000017 	ldw	r4,0(r14)
8020e914:	40c00017 	ldw	r3,0(r8)
8020e918:	73800104 	addi	r14,r14,4
8020e91c:	217fffcc 	andi	r5,r4,65535
8020e920:	2bcb383a 	mul	r5,r5,r15
8020e924:	2008d43a 	srli	r4,r4,16
8020e928:	1c7fffcc 	andi	r17,r3,65535
8020e92c:	2c4b883a 	add	r5,r5,r17
8020e930:	29cb883a 	add	r5,r5,r7
8020e934:	23c9383a 	mul	r4,r4,r15
8020e938:	1806d43a 	srli	r3,r3,16
8020e93c:	280ed43a 	srli	r7,r5,16
8020e940:	297fffcc 	andi	r5,r5,65535
8020e944:	20c7883a 	add	r3,r4,r3
8020e948:	19c7883a 	add	r3,r3,r7
8020e94c:	1808943a 	slli	r4,r3,16
8020e950:	4023883a 	mov	r17,r8
8020e954:	180ed43a 	srli	r7,r3,16
8020e958:	214ab03a 	or	r5,r4,r5
8020e95c:	41400015 	stw	r5,0(r8)
8020e960:	42000104 	addi	r8,r8,4
8020e964:	727fea36 	bltu	r14,r9,8020e910 <__reset+0xfa1ee910>
8020e968:	89c00115 	stw	r7,4(r17)
8020e96c:	37c00017 	ldw	ra,0(r6)
8020e970:	f83ed43a 	srli	ra,ra,16
8020e974:	f8001f26 	beq	ra,zero,8020e9f4 <__multiply+0x1a0>
8020e978:	58c00017 	ldw	r3,0(r11)
8020e97c:	681d883a 	mov	r14,r13
8020e980:	581f883a 	mov	r15,r11
8020e984:	1811883a 	mov	r8,r3
8020e988:	5825883a 	mov	r18,r11
8020e98c:	000f883a 	mov	r7,zero
8020e990:	00000106 	br	8020e998 <__multiply+0x144>
8020e994:	8825883a 	mov	r18,r17
8020e998:	7140000b 	ldhu	r5,0(r14)
8020e99c:	4010d43a 	srli	r8,r8,16
8020e9a0:	193fffcc 	andi	r4,r3,65535
8020e9a4:	2fcb383a 	mul	r5,r5,ra
8020e9a8:	7bc00104 	addi	r15,r15,4
8020e9ac:	73800104 	addi	r14,r14,4
8020e9b0:	2a0b883a 	add	r5,r5,r8
8020e9b4:	29cb883a 	add	r5,r5,r7
8020e9b8:	2806943a 	slli	r3,r5,16
8020e9bc:	94400104 	addi	r17,r18,4
8020e9c0:	280ad43a 	srli	r5,r5,16
8020e9c4:	1908b03a 	or	r4,r3,r4
8020e9c8:	793fff15 	stw	r4,-4(r15)
8020e9cc:	70ffff17 	ldw	r3,-4(r14)
8020e9d0:	8a000017 	ldw	r8,0(r17)
8020e9d4:	1806d43a 	srli	r3,r3,16
8020e9d8:	413fffcc 	andi	r4,r8,65535
8020e9dc:	1fc7383a 	mul	r3,r3,ra
8020e9e0:	1907883a 	add	r3,r3,r4
8020e9e4:	1947883a 	add	r3,r3,r5
8020e9e8:	180ed43a 	srli	r7,r3,16
8020e9ec:	727fe936 	bltu	r14,r9,8020e994 <__reset+0xfa1ee994>
8020e9f0:	90c00115 	stw	r3,4(r18)
8020e9f4:	31800104 	addi	r6,r6,4
8020e9f8:	5ac00104 	addi	r11,r11,4
8020e9fc:	333fbe36 	bltu	r6,r12,8020e8f8 <__reset+0xfa1ee8f8>
8020ea00:	0400090e 	bge	zero,r16,8020ea28 <__multiply+0x1d4>
8020ea04:	50ffff17 	ldw	r3,-4(r10)
8020ea08:	52bfff04 	addi	r10,r10,-4
8020ea0c:	18000326 	beq	r3,zero,8020ea1c <__multiply+0x1c8>
8020ea10:	00000506 	br	8020ea28 <__multiply+0x1d4>
8020ea14:	50c00017 	ldw	r3,0(r10)
8020ea18:	1800031e 	bne	r3,zero,8020ea28 <__multiply+0x1d4>
8020ea1c:	843fffc4 	addi	r16,r16,-1
8020ea20:	52bfff04 	addi	r10,r10,-4
8020ea24:	803ffb1e 	bne	r16,zero,8020ea14 <__reset+0xfa1eea14>
8020ea28:	14000415 	stw	r16,16(r2)
8020ea2c:	dfc00517 	ldw	ra,20(sp)
8020ea30:	dd000417 	ldw	r20,16(sp)
8020ea34:	dcc00317 	ldw	r19,12(sp)
8020ea38:	dc800217 	ldw	r18,8(sp)
8020ea3c:	dc400117 	ldw	r17,4(sp)
8020ea40:	dc000017 	ldw	r16,0(sp)
8020ea44:	dec00604 	addi	sp,sp,24
8020ea48:	f800283a 	ret

8020ea4c <__pow5mult>:
8020ea4c:	defffa04 	addi	sp,sp,-24
8020ea50:	dcc00315 	stw	r19,12(sp)
8020ea54:	dc000015 	stw	r16,0(sp)
8020ea58:	dfc00515 	stw	ra,20(sp)
8020ea5c:	dd000415 	stw	r20,16(sp)
8020ea60:	dc800215 	stw	r18,8(sp)
8020ea64:	dc400115 	stw	r17,4(sp)
8020ea68:	308000cc 	andi	r2,r6,3
8020ea6c:	3021883a 	mov	r16,r6
8020ea70:	2027883a 	mov	r19,r4
8020ea74:	10002f1e 	bne	r2,zero,8020eb34 <__pow5mult+0xe8>
8020ea78:	2825883a 	mov	r18,r5
8020ea7c:	8021d0ba 	srai	r16,r16,2
8020ea80:	80001a26 	beq	r16,zero,8020eaec <__pow5mult+0xa0>
8020ea84:	9c401217 	ldw	r17,72(r19)
8020ea88:	8800061e 	bne	r17,zero,8020eaa4 <__pow5mult+0x58>
8020ea8c:	00003406 	br	8020eb60 <__pow5mult+0x114>
8020ea90:	8021d07a 	srai	r16,r16,1
8020ea94:	80001526 	beq	r16,zero,8020eaec <__pow5mult+0xa0>
8020ea98:	88800017 	ldw	r2,0(r17)
8020ea9c:	10001c26 	beq	r2,zero,8020eb10 <__pow5mult+0xc4>
8020eaa0:	1023883a 	mov	r17,r2
8020eaa4:	8080004c 	andi	r2,r16,1
8020eaa8:	103ff926 	beq	r2,zero,8020ea90 <__reset+0xfa1eea90>
8020eaac:	880d883a 	mov	r6,r17
8020eab0:	900b883a 	mov	r5,r18
8020eab4:	9809883a 	mov	r4,r19
8020eab8:	020e8540 	call	8020e854 <__multiply>
8020eabc:	90001b26 	beq	r18,zero,8020eb2c <__pow5mult+0xe0>
8020eac0:	91000117 	ldw	r4,4(r18)
8020eac4:	98c01317 	ldw	r3,76(r19)
8020eac8:	8021d07a 	srai	r16,r16,1
8020eacc:	2109883a 	add	r4,r4,r4
8020ead0:	2109883a 	add	r4,r4,r4
8020ead4:	1907883a 	add	r3,r3,r4
8020ead8:	19000017 	ldw	r4,0(r3)
8020eadc:	91000015 	stw	r4,0(r18)
8020eae0:	1c800015 	stw	r18,0(r3)
8020eae4:	1025883a 	mov	r18,r2
8020eae8:	803feb1e 	bne	r16,zero,8020ea98 <__reset+0xfa1eea98>
8020eaec:	9005883a 	mov	r2,r18
8020eaf0:	dfc00517 	ldw	ra,20(sp)
8020eaf4:	dd000417 	ldw	r20,16(sp)
8020eaf8:	dcc00317 	ldw	r19,12(sp)
8020eafc:	dc800217 	ldw	r18,8(sp)
8020eb00:	dc400117 	ldw	r17,4(sp)
8020eb04:	dc000017 	ldw	r16,0(sp)
8020eb08:	dec00604 	addi	sp,sp,24
8020eb0c:	f800283a 	ret
8020eb10:	880d883a 	mov	r6,r17
8020eb14:	880b883a 	mov	r5,r17
8020eb18:	9809883a 	mov	r4,r19
8020eb1c:	020e8540 	call	8020e854 <__multiply>
8020eb20:	88800015 	stw	r2,0(r17)
8020eb24:	10000015 	stw	zero,0(r2)
8020eb28:	003fdd06 	br	8020eaa0 <__reset+0xfa1eeaa0>
8020eb2c:	1025883a 	mov	r18,r2
8020eb30:	003fd706 	br	8020ea90 <__reset+0xfa1eea90>
8020eb34:	10bfffc4 	addi	r2,r2,-1
8020eb38:	1085883a 	add	r2,r2,r2
8020eb3c:	00e008b4 	movhi	r3,32802
8020eb40:	18f40d04 	addi	r3,r3,-12236
8020eb44:	1085883a 	add	r2,r2,r2
8020eb48:	1885883a 	add	r2,r3,r2
8020eb4c:	11800017 	ldw	r6,0(r2)
8020eb50:	000f883a 	mov	r7,zero
8020eb54:	020e4dc0 	call	8020e4dc <__multadd>
8020eb58:	1025883a 	mov	r18,r2
8020eb5c:	003fc706 	br	8020ea7c <__reset+0xfa1eea7c>
8020eb60:	05000044 	movi	r20,1
8020eb64:	a00b883a 	mov	r5,r20
8020eb68:	9809883a 	mov	r4,r19
8020eb6c:	020e40c0 	call	8020e40c <_Balloc>
8020eb70:	1023883a 	mov	r17,r2
8020eb74:	00809c44 	movi	r2,625
8020eb78:	88800515 	stw	r2,20(r17)
8020eb7c:	8d000415 	stw	r20,16(r17)
8020eb80:	9c401215 	stw	r17,72(r19)
8020eb84:	88000015 	stw	zero,0(r17)
8020eb88:	003fc606 	br	8020eaa4 <__reset+0xfa1eeaa4>

8020eb8c <__lshift>:
8020eb8c:	defff904 	addi	sp,sp,-28
8020eb90:	dd400515 	stw	r21,20(sp)
8020eb94:	dcc00315 	stw	r19,12(sp)
8020eb98:	302bd17a 	srai	r21,r6,5
8020eb9c:	2cc00417 	ldw	r19,16(r5)
8020eba0:	28800217 	ldw	r2,8(r5)
8020eba4:	dd000415 	stw	r20,16(sp)
8020eba8:	ace7883a 	add	r19,r21,r19
8020ebac:	dc800215 	stw	r18,8(sp)
8020ebb0:	dc400115 	stw	r17,4(sp)
8020ebb4:	dc000015 	stw	r16,0(sp)
8020ebb8:	dfc00615 	stw	ra,24(sp)
8020ebbc:	9c000044 	addi	r16,r19,1
8020ebc0:	2823883a 	mov	r17,r5
8020ebc4:	3029883a 	mov	r20,r6
8020ebc8:	2025883a 	mov	r18,r4
8020ebcc:	29400117 	ldw	r5,4(r5)
8020ebd0:	1400030e 	bge	r2,r16,8020ebe0 <__lshift+0x54>
8020ebd4:	1085883a 	add	r2,r2,r2
8020ebd8:	29400044 	addi	r5,r5,1
8020ebdc:	143ffd16 	blt	r2,r16,8020ebd4 <__reset+0xfa1eebd4>
8020ebe0:	9009883a 	mov	r4,r18
8020ebe4:	020e40c0 	call	8020e40c <_Balloc>
8020ebe8:	10c00504 	addi	r3,r2,20
8020ebec:	0540070e 	bge	zero,r21,8020ec0c <__lshift+0x80>
8020ebf0:	ad6b883a 	add	r21,r21,r21
8020ebf4:	ad6b883a 	add	r21,r21,r21
8020ebf8:	1809883a 	mov	r4,r3
8020ebfc:	1d47883a 	add	r3,r3,r21
8020ec00:	20000015 	stw	zero,0(r4)
8020ec04:	21000104 	addi	r4,r4,4
8020ec08:	193ffd1e 	bne	r3,r4,8020ec00 <__reset+0xfa1eec00>
8020ec0c:	8a000417 	ldw	r8,16(r17)
8020ec10:	89000504 	addi	r4,r17,20
8020ec14:	a18007cc 	andi	r6,r20,31
8020ec18:	4211883a 	add	r8,r8,r8
8020ec1c:	4211883a 	add	r8,r8,r8
8020ec20:	2211883a 	add	r8,r4,r8
8020ec24:	30002326 	beq	r6,zero,8020ecb4 <__lshift+0x128>
8020ec28:	02400804 	movi	r9,32
8020ec2c:	4993c83a 	sub	r9,r9,r6
8020ec30:	000b883a 	mov	r5,zero
8020ec34:	21c00017 	ldw	r7,0(r4)
8020ec38:	1815883a 	mov	r10,r3
8020ec3c:	18c00104 	addi	r3,r3,4
8020ec40:	398e983a 	sll	r7,r7,r6
8020ec44:	21000104 	addi	r4,r4,4
8020ec48:	394ab03a 	or	r5,r7,r5
8020ec4c:	197fff15 	stw	r5,-4(r3)
8020ec50:	217fff17 	ldw	r5,-4(r4)
8020ec54:	2a4ad83a 	srl	r5,r5,r9
8020ec58:	223ff636 	bltu	r4,r8,8020ec34 <__reset+0xfa1eec34>
8020ec5c:	51400115 	stw	r5,4(r10)
8020ec60:	28001a1e 	bne	r5,zero,8020eccc <__lshift+0x140>
8020ec64:	843fffc4 	addi	r16,r16,-1
8020ec68:	14000415 	stw	r16,16(r2)
8020ec6c:	88000826 	beq	r17,zero,8020ec90 <__lshift+0x104>
8020ec70:	89000117 	ldw	r4,4(r17)
8020ec74:	90c01317 	ldw	r3,76(r18)
8020ec78:	2109883a 	add	r4,r4,r4
8020ec7c:	2109883a 	add	r4,r4,r4
8020ec80:	1907883a 	add	r3,r3,r4
8020ec84:	19000017 	ldw	r4,0(r3)
8020ec88:	89000015 	stw	r4,0(r17)
8020ec8c:	1c400015 	stw	r17,0(r3)
8020ec90:	dfc00617 	ldw	ra,24(sp)
8020ec94:	dd400517 	ldw	r21,20(sp)
8020ec98:	dd000417 	ldw	r20,16(sp)
8020ec9c:	dcc00317 	ldw	r19,12(sp)
8020eca0:	dc800217 	ldw	r18,8(sp)
8020eca4:	dc400117 	ldw	r17,4(sp)
8020eca8:	dc000017 	ldw	r16,0(sp)
8020ecac:	dec00704 	addi	sp,sp,28
8020ecb0:	f800283a 	ret
8020ecb4:	21400017 	ldw	r5,0(r4)
8020ecb8:	18c00104 	addi	r3,r3,4
8020ecbc:	21000104 	addi	r4,r4,4
8020ecc0:	197fff15 	stw	r5,-4(r3)
8020ecc4:	223ffb36 	bltu	r4,r8,8020ecb4 <__reset+0xfa1eecb4>
8020ecc8:	003fe606 	br	8020ec64 <__reset+0xfa1eec64>
8020eccc:	9c000084 	addi	r16,r19,2
8020ecd0:	003fe406 	br	8020ec64 <__reset+0xfa1eec64>

8020ecd4 <__mcmp>:
8020ecd4:	20800417 	ldw	r2,16(r4)
8020ecd8:	28c00417 	ldw	r3,16(r5)
8020ecdc:	10c5c83a 	sub	r2,r2,r3
8020ece0:	1000111e 	bne	r2,zero,8020ed28 <__mcmp+0x54>
8020ece4:	18c7883a 	add	r3,r3,r3
8020ece8:	18c7883a 	add	r3,r3,r3
8020ecec:	21000504 	addi	r4,r4,20
8020ecf0:	29400504 	addi	r5,r5,20
8020ecf4:	20c5883a 	add	r2,r4,r3
8020ecf8:	28cb883a 	add	r5,r5,r3
8020ecfc:	00000106 	br	8020ed04 <__mcmp+0x30>
8020ed00:	20800a2e 	bgeu	r4,r2,8020ed2c <__mcmp+0x58>
8020ed04:	10bfff04 	addi	r2,r2,-4
8020ed08:	297fff04 	addi	r5,r5,-4
8020ed0c:	11800017 	ldw	r6,0(r2)
8020ed10:	28c00017 	ldw	r3,0(r5)
8020ed14:	30fffa26 	beq	r6,r3,8020ed00 <__reset+0xfa1eed00>
8020ed18:	30c00236 	bltu	r6,r3,8020ed24 <__mcmp+0x50>
8020ed1c:	00800044 	movi	r2,1
8020ed20:	f800283a 	ret
8020ed24:	00bfffc4 	movi	r2,-1
8020ed28:	f800283a 	ret
8020ed2c:	0005883a 	mov	r2,zero
8020ed30:	f800283a 	ret

8020ed34 <__mdiff>:
8020ed34:	28c00417 	ldw	r3,16(r5)
8020ed38:	30800417 	ldw	r2,16(r6)
8020ed3c:	defffa04 	addi	sp,sp,-24
8020ed40:	dcc00315 	stw	r19,12(sp)
8020ed44:	dc800215 	stw	r18,8(sp)
8020ed48:	dfc00515 	stw	ra,20(sp)
8020ed4c:	dd000415 	stw	r20,16(sp)
8020ed50:	dc400115 	stw	r17,4(sp)
8020ed54:	dc000015 	stw	r16,0(sp)
8020ed58:	1887c83a 	sub	r3,r3,r2
8020ed5c:	2825883a 	mov	r18,r5
8020ed60:	3027883a 	mov	r19,r6
8020ed64:	1800141e 	bne	r3,zero,8020edb8 <__mdiff+0x84>
8020ed68:	1085883a 	add	r2,r2,r2
8020ed6c:	1085883a 	add	r2,r2,r2
8020ed70:	2a000504 	addi	r8,r5,20
8020ed74:	34000504 	addi	r16,r6,20
8020ed78:	4087883a 	add	r3,r8,r2
8020ed7c:	8085883a 	add	r2,r16,r2
8020ed80:	00000106 	br	8020ed88 <__mdiff+0x54>
8020ed84:	40c0592e 	bgeu	r8,r3,8020eeec <__mdiff+0x1b8>
8020ed88:	18ffff04 	addi	r3,r3,-4
8020ed8c:	10bfff04 	addi	r2,r2,-4
8020ed90:	19c00017 	ldw	r7,0(r3)
8020ed94:	11400017 	ldw	r5,0(r2)
8020ed98:	397ffa26 	beq	r7,r5,8020ed84 <__reset+0xfa1eed84>
8020ed9c:	3940592e 	bgeu	r7,r5,8020ef04 <__mdiff+0x1d0>
8020eda0:	9005883a 	mov	r2,r18
8020eda4:	4023883a 	mov	r17,r8
8020eda8:	9825883a 	mov	r18,r19
8020edac:	05000044 	movi	r20,1
8020edb0:	1027883a 	mov	r19,r2
8020edb4:	00000406 	br	8020edc8 <__mdiff+0x94>
8020edb8:	18005616 	blt	r3,zero,8020ef14 <__mdiff+0x1e0>
8020edbc:	34400504 	addi	r17,r6,20
8020edc0:	2c000504 	addi	r16,r5,20
8020edc4:	0029883a 	mov	r20,zero
8020edc8:	91400117 	ldw	r5,4(r18)
8020edcc:	020e40c0 	call	8020e40c <_Balloc>
8020edd0:	92400417 	ldw	r9,16(r18)
8020edd4:	9b000417 	ldw	r12,16(r19)
8020edd8:	12c00504 	addi	r11,r2,20
8020eddc:	4a51883a 	add	r8,r9,r9
8020ede0:	6319883a 	add	r12,r12,r12
8020ede4:	4211883a 	add	r8,r8,r8
8020ede8:	6319883a 	add	r12,r12,r12
8020edec:	15000315 	stw	r20,12(r2)
8020edf0:	8211883a 	add	r8,r16,r8
8020edf4:	8b19883a 	add	r12,r17,r12
8020edf8:	0007883a 	mov	r3,zero
8020edfc:	81400017 	ldw	r5,0(r16)
8020ee00:	89c00017 	ldw	r7,0(r17)
8020ee04:	59800104 	addi	r6,r11,4
8020ee08:	293fffcc 	andi	r4,r5,65535
8020ee0c:	20c7883a 	add	r3,r4,r3
8020ee10:	393fffcc 	andi	r4,r7,65535
8020ee14:	1909c83a 	sub	r4,r3,r4
8020ee18:	280ad43a 	srli	r5,r5,16
8020ee1c:	380ed43a 	srli	r7,r7,16
8020ee20:	2007d43a 	srai	r3,r4,16
8020ee24:	213fffcc 	andi	r4,r4,65535
8020ee28:	29cbc83a 	sub	r5,r5,r7
8020ee2c:	28c7883a 	add	r3,r5,r3
8020ee30:	180a943a 	slli	r5,r3,16
8020ee34:	8c400104 	addi	r17,r17,4
8020ee38:	84000104 	addi	r16,r16,4
8020ee3c:	2908b03a 	or	r4,r5,r4
8020ee40:	59000015 	stw	r4,0(r11)
8020ee44:	1807d43a 	srai	r3,r3,16
8020ee48:	3015883a 	mov	r10,r6
8020ee4c:	3017883a 	mov	r11,r6
8020ee50:	8b3fea36 	bltu	r17,r12,8020edfc <__reset+0xfa1eedfc>
8020ee54:	8200162e 	bgeu	r16,r8,8020eeb0 <__mdiff+0x17c>
8020ee58:	8017883a 	mov	r11,r16
8020ee5c:	59400017 	ldw	r5,0(r11)
8020ee60:	31800104 	addi	r6,r6,4
8020ee64:	5ac00104 	addi	r11,r11,4
8020ee68:	293fffcc 	andi	r4,r5,65535
8020ee6c:	20c7883a 	add	r3,r4,r3
8020ee70:	280ed43a 	srli	r7,r5,16
8020ee74:	180bd43a 	srai	r5,r3,16
8020ee78:	193fffcc 	andi	r4,r3,65535
8020ee7c:	3947883a 	add	r3,r7,r5
8020ee80:	180a943a 	slli	r5,r3,16
8020ee84:	1807d43a 	srai	r3,r3,16
8020ee88:	2908b03a 	or	r4,r5,r4
8020ee8c:	313fff15 	stw	r4,-4(r6)
8020ee90:	5a3ff236 	bltu	r11,r8,8020ee5c <__reset+0xfa1eee5c>
8020ee94:	0406303a 	nor	r3,zero,r16
8020ee98:	1a07883a 	add	r3,r3,r8
8020ee9c:	1806d0ba 	srli	r3,r3,2
8020eea0:	18c00044 	addi	r3,r3,1
8020eea4:	18c7883a 	add	r3,r3,r3
8020eea8:	18c7883a 	add	r3,r3,r3
8020eeac:	50d5883a 	add	r10,r10,r3
8020eeb0:	50ffff04 	addi	r3,r10,-4
8020eeb4:	2000041e 	bne	r4,zero,8020eec8 <__mdiff+0x194>
8020eeb8:	18ffff04 	addi	r3,r3,-4
8020eebc:	19000017 	ldw	r4,0(r3)
8020eec0:	4a7fffc4 	addi	r9,r9,-1
8020eec4:	203ffc26 	beq	r4,zero,8020eeb8 <__reset+0xfa1eeeb8>
8020eec8:	12400415 	stw	r9,16(r2)
8020eecc:	dfc00517 	ldw	ra,20(sp)
8020eed0:	dd000417 	ldw	r20,16(sp)
8020eed4:	dcc00317 	ldw	r19,12(sp)
8020eed8:	dc800217 	ldw	r18,8(sp)
8020eedc:	dc400117 	ldw	r17,4(sp)
8020eee0:	dc000017 	ldw	r16,0(sp)
8020eee4:	dec00604 	addi	sp,sp,24
8020eee8:	f800283a 	ret
8020eeec:	000b883a 	mov	r5,zero
8020eef0:	020e40c0 	call	8020e40c <_Balloc>
8020eef4:	00c00044 	movi	r3,1
8020eef8:	10c00415 	stw	r3,16(r2)
8020eefc:	10000515 	stw	zero,20(r2)
8020ef00:	003ff206 	br	8020eecc <__reset+0xfa1eeecc>
8020ef04:	8023883a 	mov	r17,r16
8020ef08:	0029883a 	mov	r20,zero
8020ef0c:	4021883a 	mov	r16,r8
8020ef10:	003fad06 	br	8020edc8 <__reset+0xfa1eedc8>
8020ef14:	9005883a 	mov	r2,r18
8020ef18:	94400504 	addi	r17,r18,20
8020ef1c:	9c000504 	addi	r16,r19,20
8020ef20:	9825883a 	mov	r18,r19
8020ef24:	05000044 	movi	r20,1
8020ef28:	1027883a 	mov	r19,r2
8020ef2c:	003fa606 	br	8020edc8 <__reset+0xfa1eedc8>

8020ef30 <__ulp>:
8020ef30:	295ffc2c 	andhi	r5,r5,32752
8020ef34:	00bf3034 	movhi	r2,64704
8020ef38:	2887883a 	add	r3,r5,r2
8020ef3c:	00c0020e 	bge	zero,r3,8020ef48 <__ulp+0x18>
8020ef40:	0005883a 	mov	r2,zero
8020ef44:	f800283a 	ret
8020ef48:	00c7c83a 	sub	r3,zero,r3
8020ef4c:	1807d53a 	srai	r3,r3,20
8020ef50:	008004c4 	movi	r2,19
8020ef54:	10c00b0e 	bge	r2,r3,8020ef84 <__ulp+0x54>
8020ef58:	18bffb04 	addi	r2,r3,-20
8020ef5c:	01000784 	movi	r4,30
8020ef60:	0007883a 	mov	r3,zero
8020ef64:	20800516 	blt	r4,r2,8020ef7c <__ulp+0x4c>
8020ef68:	010007c4 	movi	r4,31
8020ef6c:	2089c83a 	sub	r4,r4,r2
8020ef70:	00800044 	movi	r2,1
8020ef74:	1104983a 	sll	r2,r2,r4
8020ef78:	f800283a 	ret
8020ef7c:	00800044 	movi	r2,1
8020ef80:	f800283a 	ret
8020ef84:	01400234 	movhi	r5,8
8020ef88:	28c7d83a 	sra	r3,r5,r3
8020ef8c:	0005883a 	mov	r2,zero
8020ef90:	f800283a 	ret

8020ef94 <__b2d>:
8020ef94:	defffa04 	addi	sp,sp,-24
8020ef98:	dc000015 	stw	r16,0(sp)
8020ef9c:	24000417 	ldw	r16,16(r4)
8020efa0:	dc400115 	stw	r17,4(sp)
8020efa4:	24400504 	addi	r17,r4,20
8020efa8:	8421883a 	add	r16,r16,r16
8020efac:	8421883a 	add	r16,r16,r16
8020efb0:	8c21883a 	add	r16,r17,r16
8020efb4:	dc800215 	stw	r18,8(sp)
8020efb8:	84bfff17 	ldw	r18,-4(r16)
8020efbc:	dd000415 	stw	r20,16(sp)
8020efc0:	dcc00315 	stw	r19,12(sp)
8020efc4:	9009883a 	mov	r4,r18
8020efc8:	2829883a 	mov	r20,r5
8020efcc:	dfc00515 	stw	ra,20(sp)
8020efd0:	020e7000 	call	8020e700 <__hi0bits>
8020efd4:	00c00804 	movi	r3,32
8020efd8:	1889c83a 	sub	r4,r3,r2
8020efdc:	a1000015 	stw	r4,0(r20)
8020efe0:	01000284 	movi	r4,10
8020efe4:	84ffff04 	addi	r19,r16,-4
8020efe8:	20801216 	blt	r4,r2,8020f034 <__b2d+0xa0>
8020efec:	018002c4 	movi	r6,11
8020eff0:	308dc83a 	sub	r6,r6,r2
8020eff4:	9186d83a 	srl	r3,r18,r6
8020eff8:	18cffc34 	orhi	r3,r3,16368
8020effc:	8cc0212e 	bgeu	r17,r19,8020f084 <__b2d+0xf0>
8020f000:	813ffe17 	ldw	r4,-8(r16)
8020f004:	218cd83a 	srl	r6,r4,r6
8020f008:	10800544 	addi	r2,r2,21
8020f00c:	9084983a 	sll	r2,r18,r2
8020f010:	1184b03a 	or	r2,r2,r6
8020f014:	dfc00517 	ldw	ra,20(sp)
8020f018:	dd000417 	ldw	r20,16(sp)
8020f01c:	dcc00317 	ldw	r19,12(sp)
8020f020:	dc800217 	ldw	r18,8(sp)
8020f024:	dc400117 	ldw	r17,4(sp)
8020f028:	dc000017 	ldw	r16,0(sp)
8020f02c:	dec00604 	addi	sp,sp,24
8020f030:	f800283a 	ret
8020f034:	8cc00f2e 	bgeu	r17,r19,8020f074 <__b2d+0xe0>
8020f038:	117ffd44 	addi	r5,r2,-11
8020f03c:	80bffe17 	ldw	r2,-8(r16)
8020f040:	28000e26 	beq	r5,zero,8020f07c <__b2d+0xe8>
8020f044:	1949c83a 	sub	r4,r3,r5
8020f048:	9164983a 	sll	r18,r18,r5
8020f04c:	1106d83a 	srl	r3,r2,r4
8020f050:	81bffe04 	addi	r6,r16,-8
8020f054:	948ffc34 	orhi	r18,r18,16368
8020f058:	90c6b03a 	or	r3,r18,r3
8020f05c:	89800e2e 	bgeu	r17,r6,8020f098 <__b2d+0x104>
8020f060:	81bffd17 	ldw	r6,-12(r16)
8020f064:	1144983a 	sll	r2,r2,r5
8020f068:	310ad83a 	srl	r5,r6,r4
8020f06c:	2884b03a 	or	r2,r5,r2
8020f070:	003fe806 	br	8020f014 <__reset+0xfa1ef014>
8020f074:	10bffd44 	addi	r2,r2,-11
8020f078:	1000041e 	bne	r2,zero,8020f08c <__b2d+0xf8>
8020f07c:	90cffc34 	orhi	r3,r18,16368
8020f080:	003fe406 	br	8020f014 <__reset+0xfa1ef014>
8020f084:	000d883a 	mov	r6,zero
8020f088:	003fdf06 	br	8020f008 <__reset+0xfa1ef008>
8020f08c:	90a4983a 	sll	r18,r18,r2
8020f090:	0005883a 	mov	r2,zero
8020f094:	003ff906 	br	8020f07c <__reset+0xfa1ef07c>
8020f098:	1144983a 	sll	r2,r2,r5
8020f09c:	003fdd06 	br	8020f014 <__reset+0xfa1ef014>

8020f0a0 <__d2b>:
8020f0a0:	defff804 	addi	sp,sp,-32
8020f0a4:	dc000215 	stw	r16,8(sp)
8020f0a8:	3021883a 	mov	r16,r6
8020f0ac:	dc400315 	stw	r17,12(sp)
8020f0b0:	8022907a 	slli	r17,r16,1
8020f0b4:	dd000615 	stw	r20,24(sp)
8020f0b8:	2829883a 	mov	r20,r5
8020f0bc:	01400044 	movi	r5,1
8020f0c0:	dcc00515 	stw	r19,20(sp)
8020f0c4:	dc800415 	stw	r18,16(sp)
8020f0c8:	dfc00715 	stw	ra,28(sp)
8020f0cc:	3825883a 	mov	r18,r7
8020f0d0:	8822d57a 	srli	r17,r17,21
8020f0d4:	020e40c0 	call	8020e40c <_Balloc>
8020f0d8:	1027883a 	mov	r19,r2
8020f0dc:	00800434 	movhi	r2,16
8020f0e0:	10bfffc4 	addi	r2,r2,-1
8020f0e4:	808c703a 	and	r6,r16,r2
8020f0e8:	88000126 	beq	r17,zero,8020f0f0 <__d2b+0x50>
8020f0ec:	31800434 	orhi	r6,r6,16
8020f0f0:	d9800015 	stw	r6,0(sp)
8020f0f4:	a0002426 	beq	r20,zero,8020f188 <__d2b+0xe8>
8020f0f8:	d9000104 	addi	r4,sp,4
8020f0fc:	dd000115 	stw	r20,4(sp)
8020f100:	020e7680 	call	8020e768 <__lo0bits>
8020f104:	d8c00017 	ldw	r3,0(sp)
8020f108:	10002f1e 	bne	r2,zero,8020f1c8 <__d2b+0x128>
8020f10c:	d9000117 	ldw	r4,4(sp)
8020f110:	99000515 	stw	r4,20(r19)
8020f114:	1821003a 	cmpeq	r16,r3,zero
8020f118:	01000084 	movi	r4,2
8020f11c:	2421c83a 	sub	r16,r4,r16
8020f120:	98c00615 	stw	r3,24(r19)
8020f124:	9c000415 	stw	r16,16(r19)
8020f128:	88001f1e 	bne	r17,zero,8020f1a8 <__d2b+0x108>
8020f12c:	10bef384 	addi	r2,r2,-1074
8020f130:	90800015 	stw	r2,0(r18)
8020f134:	00900034 	movhi	r2,16384
8020f138:	10bfffc4 	addi	r2,r2,-1
8020f13c:	8085883a 	add	r2,r16,r2
8020f140:	1085883a 	add	r2,r2,r2
8020f144:	1085883a 	add	r2,r2,r2
8020f148:	9885883a 	add	r2,r19,r2
8020f14c:	11000517 	ldw	r4,20(r2)
8020f150:	8020917a 	slli	r16,r16,5
8020f154:	020e7000 	call	8020e700 <__hi0bits>
8020f158:	d8c00817 	ldw	r3,32(sp)
8020f15c:	8085c83a 	sub	r2,r16,r2
8020f160:	18800015 	stw	r2,0(r3)
8020f164:	9805883a 	mov	r2,r19
8020f168:	dfc00717 	ldw	ra,28(sp)
8020f16c:	dd000617 	ldw	r20,24(sp)
8020f170:	dcc00517 	ldw	r19,20(sp)
8020f174:	dc800417 	ldw	r18,16(sp)
8020f178:	dc400317 	ldw	r17,12(sp)
8020f17c:	dc000217 	ldw	r16,8(sp)
8020f180:	dec00804 	addi	sp,sp,32
8020f184:	f800283a 	ret
8020f188:	d809883a 	mov	r4,sp
8020f18c:	020e7680 	call	8020e768 <__lo0bits>
8020f190:	d8c00017 	ldw	r3,0(sp)
8020f194:	04000044 	movi	r16,1
8020f198:	9c000415 	stw	r16,16(r19)
8020f19c:	98c00515 	stw	r3,20(r19)
8020f1a0:	10800804 	addi	r2,r2,32
8020f1a4:	883fe126 	beq	r17,zero,8020f12c <__reset+0xfa1ef12c>
8020f1a8:	00c00d44 	movi	r3,53
8020f1ac:	8c7ef344 	addi	r17,r17,-1075
8020f1b0:	88a3883a 	add	r17,r17,r2
8020f1b4:	1885c83a 	sub	r2,r3,r2
8020f1b8:	d8c00817 	ldw	r3,32(sp)
8020f1bc:	94400015 	stw	r17,0(r18)
8020f1c0:	18800015 	stw	r2,0(r3)
8020f1c4:	003fe706 	br	8020f164 <__reset+0xfa1ef164>
8020f1c8:	01000804 	movi	r4,32
8020f1cc:	2089c83a 	sub	r4,r4,r2
8020f1d0:	1908983a 	sll	r4,r3,r4
8020f1d4:	d9400117 	ldw	r5,4(sp)
8020f1d8:	1886d83a 	srl	r3,r3,r2
8020f1dc:	2148b03a 	or	r4,r4,r5
8020f1e0:	99000515 	stw	r4,20(r19)
8020f1e4:	d8c00015 	stw	r3,0(sp)
8020f1e8:	003fca06 	br	8020f114 <__reset+0xfa1ef114>

8020f1ec <__ratio>:
8020f1ec:	defff904 	addi	sp,sp,-28
8020f1f0:	dc400315 	stw	r17,12(sp)
8020f1f4:	2823883a 	mov	r17,r5
8020f1f8:	d9400104 	addi	r5,sp,4
8020f1fc:	dfc00615 	stw	ra,24(sp)
8020f200:	dcc00515 	stw	r19,20(sp)
8020f204:	dc800415 	stw	r18,16(sp)
8020f208:	2027883a 	mov	r19,r4
8020f20c:	dc000215 	stw	r16,8(sp)
8020f210:	020ef940 	call	8020ef94 <__b2d>
8020f214:	d80b883a 	mov	r5,sp
8020f218:	8809883a 	mov	r4,r17
8020f21c:	1025883a 	mov	r18,r2
8020f220:	1821883a 	mov	r16,r3
8020f224:	020ef940 	call	8020ef94 <__b2d>
8020f228:	8a000417 	ldw	r8,16(r17)
8020f22c:	99000417 	ldw	r4,16(r19)
8020f230:	d9400117 	ldw	r5,4(sp)
8020f234:	2209c83a 	sub	r4,r4,r8
8020f238:	2010917a 	slli	r8,r4,5
8020f23c:	d9000017 	ldw	r4,0(sp)
8020f240:	2909c83a 	sub	r4,r5,r4
8020f244:	4109883a 	add	r4,r8,r4
8020f248:	01000e0e 	bge	zero,r4,8020f284 <__ratio+0x98>
8020f24c:	2008953a 	slli	r4,r4,20
8020f250:	2421883a 	add	r16,r4,r16
8020f254:	100d883a 	mov	r6,r2
8020f258:	180f883a 	mov	r7,r3
8020f25c:	9009883a 	mov	r4,r18
8020f260:	800b883a 	mov	r5,r16
8020f264:	02144e40 	call	802144e4 <__divdf3>
8020f268:	dfc00617 	ldw	ra,24(sp)
8020f26c:	dcc00517 	ldw	r19,20(sp)
8020f270:	dc800417 	ldw	r18,16(sp)
8020f274:	dc400317 	ldw	r17,12(sp)
8020f278:	dc000217 	ldw	r16,8(sp)
8020f27c:	dec00704 	addi	sp,sp,28
8020f280:	f800283a 	ret
8020f284:	2008953a 	slli	r4,r4,20
8020f288:	1907c83a 	sub	r3,r3,r4
8020f28c:	003ff106 	br	8020f254 <__reset+0xfa1ef254>

8020f290 <_mprec_log10>:
8020f290:	defffe04 	addi	sp,sp,-8
8020f294:	dc000015 	stw	r16,0(sp)
8020f298:	dfc00115 	stw	ra,4(sp)
8020f29c:	008005c4 	movi	r2,23
8020f2a0:	2021883a 	mov	r16,r4
8020f2a4:	11000d0e 	bge	r2,r4,8020f2dc <_mprec_log10+0x4c>
8020f2a8:	0005883a 	mov	r2,zero
8020f2ac:	00cffc34 	movhi	r3,16368
8020f2b0:	843fffc4 	addi	r16,r16,-1
8020f2b4:	000d883a 	mov	r6,zero
8020f2b8:	01d00934 	movhi	r7,16420
8020f2bc:	1009883a 	mov	r4,r2
8020f2c0:	180b883a 	mov	r5,r3
8020f2c4:	02150240 	call	80215024 <__muldf3>
8020f2c8:	803ff91e 	bne	r16,zero,8020f2b0 <__reset+0xfa1ef2b0>
8020f2cc:	dfc00117 	ldw	ra,4(sp)
8020f2d0:	dc000017 	ldw	r16,0(sp)
8020f2d4:	dec00204 	addi	sp,sp,8
8020f2d8:	f800283a 	ret
8020f2dc:	202090fa 	slli	r16,r4,3
8020f2e0:	00a008b4 	movhi	r2,32802
8020f2e4:	10b42404 	addi	r2,r2,-12144
8020f2e8:	1421883a 	add	r16,r2,r16
8020f2ec:	80800017 	ldw	r2,0(r16)
8020f2f0:	80c00117 	ldw	r3,4(r16)
8020f2f4:	dfc00117 	ldw	ra,4(sp)
8020f2f8:	dc000017 	ldw	r16,0(sp)
8020f2fc:	dec00204 	addi	sp,sp,8
8020f300:	f800283a 	ret

8020f304 <__copybits>:
8020f304:	297fffc4 	addi	r5,r5,-1
8020f308:	280fd17a 	srai	r7,r5,5
8020f30c:	30c00417 	ldw	r3,16(r6)
8020f310:	30800504 	addi	r2,r6,20
8020f314:	39c00044 	addi	r7,r7,1
8020f318:	18c7883a 	add	r3,r3,r3
8020f31c:	39cf883a 	add	r7,r7,r7
8020f320:	18c7883a 	add	r3,r3,r3
8020f324:	39cf883a 	add	r7,r7,r7
8020f328:	10c7883a 	add	r3,r2,r3
8020f32c:	21cf883a 	add	r7,r4,r7
8020f330:	10c00d2e 	bgeu	r2,r3,8020f368 <__copybits+0x64>
8020f334:	200b883a 	mov	r5,r4
8020f338:	12000017 	ldw	r8,0(r2)
8020f33c:	29400104 	addi	r5,r5,4
8020f340:	10800104 	addi	r2,r2,4
8020f344:	2a3fff15 	stw	r8,-4(r5)
8020f348:	10fffb36 	bltu	r2,r3,8020f338 <__reset+0xfa1ef338>
8020f34c:	1985c83a 	sub	r2,r3,r6
8020f350:	10bffac4 	addi	r2,r2,-21
8020f354:	1004d0ba 	srli	r2,r2,2
8020f358:	10800044 	addi	r2,r2,1
8020f35c:	1085883a 	add	r2,r2,r2
8020f360:	1085883a 	add	r2,r2,r2
8020f364:	2089883a 	add	r4,r4,r2
8020f368:	21c0032e 	bgeu	r4,r7,8020f378 <__copybits+0x74>
8020f36c:	20000015 	stw	zero,0(r4)
8020f370:	21000104 	addi	r4,r4,4
8020f374:	21fffd36 	bltu	r4,r7,8020f36c <__reset+0xfa1ef36c>
8020f378:	f800283a 	ret

8020f37c <__any_on>:
8020f37c:	20c00417 	ldw	r3,16(r4)
8020f380:	2805d17a 	srai	r2,r5,5
8020f384:	21000504 	addi	r4,r4,20
8020f388:	18800d0e 	bge	r3,r2,8020f3c0 <__any_on+0x44>
8020f38c:	18c7883a 	add	r3,r3,r3
8020f390:	18c7883a 	add	r3,r3,r3
8020f394:	20c7883a 	add	r3,r4,r3
8020f398:	20c0192e 	bgeu	r4,r3,8020f400 <__any_on+0x84>
8020f39c:	18bfff17 	ldw	r2,-4(r3)
8020f3a0:	18ffff04 	addi	r3,r3,-4
8020f3a4:	1000041e 	bne	r2,zero,8020f3b8 <__any_on+0x3c>
8020f3a8:	20c0142e 	bgeu	r4,r3,8020f3fc <__any_on+0x80>
8020f3ac:	18ffff04 	addi	r3,r3,-4
8020f3b0:	19400017 	ldw	r5,0(r3)
8020f3b4:	283ffc26 	beq	r5,zero,8020f3a8 <__reset+0xfa1ef3a8>
8020f3b8:	00800044 	movi	r2,1
8020f3bc:	f800283a 	ret
8020f3c0:	10c00a0e 	bge	r2,r3,8020f3ec <__any_on+0x70>
8020f3c4:	1085883a 	add	r2,r2,r2
8020f3c8:	1085883a 	add	r2,r2,r2
8020f3cc:	294007cc 	andi	r5,r5,31
8020f3d0:	2087883a 	add	r3,r4,r2
8020f3d4:	283ff026 	beq	r5,zero,8020f398 <__reset+0xfa1ef398>
8020f3d8:	19800017 	ldw	r6,0(r3)
8020f3dc:	3144d83a 	srl	r2,r6,r5
8020f3e0:	114a983a 	sll	r5,r2,r5
8020f3e4:	317ff41e 	bne	r6,r5,8020f3b8 <__reset+0xfa1ef3b8>
8020f3e8:	003feb06 	br	8020f398 <__reset+0xfa1ef398>
8020f3ec:	1085883a 	add	r2,r2,r2
8020f3f0:	1085883a 	add	r2,r2,r2
8020f3f4:	2087883a 	add	r3,r4,r2
8020f3f8:	003fe706 	br	8020f398 <__reset+0xfa1ef398>
8020f3fc:	f800283a 	ret
8020f400:	0005883a 	mov	r2,zero
8020f404:	f800283a 	ret

8020f408 <_realloc_r>:
8020f408:	defff604 	addi	sp,sp,-40
8020f40c:	dc800215 	stw	r18,8(sp)
8020f410:	dfc00915 	stw	ra,36(sp)
8020f414:	df000815 	stw	fp,32(sp)
8020f418:	ddc00715 	stw	r23,28(sp)
8020f41c:	dd800615 	stw	r22,24(sp)
8020f420:	dd400515 	stw	r21,20(sp)
8020f424:	dd000415 	stw	r20,16(sp)
8020f428:	dcc00315 	stw	r19,12(sp)
8020f42c:	dc400115 	stw	r17,4(sp)
8020f430:	dc000015 	stw	r16,0(sp)
8020f434:	3025883a 	mov	r18,r6
8020f438:	2800b726 	beq	r5,zero,8020f718 <_realloc_r+0x310>
8020f43c:	282b883a 	mov	r21,r5
8020f440:	2029883a 	mov	r20,r4
8020f444:	02168140 	call	80216814 <__malloc_lock>
8020f448:	a8bfff17 	ldw	r2,-4(r21)
8020f44c:	043fff04 	movi	r16,-4
8020f450:	90c002c4 	addi	r3,r18,11
8020f454:	01000584 	movi	r4,22
8020f458:	acfffe04 	addi	r19,r21,-8
8020f45c:	1420703a 	and	r16,r2,r16
8020f460:	20c0332e 	bgeu	r4,r3,8020f530 <_realloc_r+0x128>
8020f464:	047ffe04 	movi	r17,-8
8020f468:	1c62703a 	and	r17,r3,r17
8020f46c:	8807883a 	mov	r3,r17
8020f470:	88005816 	blt	r17,zero,8020f5d4 <_realloc_r+0x1cc>
8020f474:	8c805736 	bltu	r17,r18,8020f5d4 <_realloc_r+0x1cc>
8020f478:	80c0300e 	bge	r16,r3,8020f53c <_realloc_r+0x134>
8020f47c:	072008b4 	movhi	fp,32802
8020f480:	e7363704 	addi	fp,fp,-10020
8020f484:	e1c00217 	ldw	r7,8(fp)
8020f488:	9c09883a 	add	r4,r19,r16
8020f48c:	22000117 	ldw	r8,4(r4)
8020f490:	21c06326 	beq	r4,r7,8020f620 <_realloc_r+0x218>
8020f494:	017fff84 	movi	r5,-2
8020f498:	414a703a 	and	r5,r8,r5
8020f49c:	214b883a 	add	r5,r4,r5
8020f4a0:	29800117 	ldw	r6,4(r5)
8020f4a4:	3180004c 	andi	r6,r6,1
8020f4a8:	30003f26 	beq	r6,zero,8020f5a8 <_realloc_r+0x1a0>
8020f4ac:	1080004c 	andi	r2,r2,1
8020f4b0:	10008326 	beq	r2,zero,8020f6c0 <_realloc_r+0x2b8>
8020f4b4:	900b883a 	mov	r5,r18
8020f4b8:	a009883a 	mov	r4,r20
8020f4bc:	020d8980 	call	8020d898 <_malloc_r>
8020f4c0:	1025883a 	mov	r18,r2
8020f4c4:	10011e26 	beq	r2,zero,8020f940 <_realloc_r+0x538>
8020f4c8:	a93fff17 	ldw	r4,-4(r21)
8020f4cc:	10fffe04 	addi	r3,r2,-8
8020f4d0:	00bfff84 	movi	r2,-2
8020f4d4:	2084703a 	and	r2,r4,r2
8020f4d8:	9885883a 	add	r2,r19,r2
8020f4dc:	1880ee26 	beq	r3,r2,8020f898 <_realloc_r+0x490>
8020f4e0:	81bfff04 	addi	r6,r16,-4
8020f4e4:	00800904 	movi	r2,36
8020f4e8:	1180b836 	bltu	r2,r6,8020f7cc <_realloc_r+0x3c4>
8020f4ec:	00c004c4 	movi	r3,19
8020f4f0:	19809636 	bltu	r3,r6,8020f74c <_realloc_r+0x344>
8020f4f4:	9005883a 	mov	r2,r18
8020f4f8:	a807883a 	mov	r3,r21
8020f4fc:	19000017 	ldw	r4,0(r3)
8020f500:	11000015 	stw	r4,0(r2)
8020f504:	19000117 	ldw	r4,4(r3)
8020f508:	11000115 	stw	r4,4(r2)
8020f50c:	18c00217 	ldw	r3,8(r3)
8020f510:	10c00215 	stw	r3,8(r2)
8020f514:	a80b883a 	mov	r5,r21
8020f518:	a009883a 	mov	r4,r20
8020f51c:	020ccac0 	call	8020ccac <_free_r>
8020f520:	a009883a 	mov	r4,r20
8020f524:	02168380 	call	80216838 <__malloc_unlock>
8020f528:	9005883a 	mov	r2,r18
8020f52c:	00001206 	br	8020f578 <_realloc_r+0x170>
8020f530:	00c00404 	movi	r3,16
8020f534:	1823883a 	mov	r17,r3
8020f538:	003fce06 	br	8020f474 <__reset+0xfa1ef474>
8020f53c:	a825883a 	mov	r18,r21
8020f540:	8445c83a 	sub	r2,r16,r17
8020f544:	00c003c4 	movi	r3,15
8020f548:	18802636 	bltu	r3,r2,8020f5e4 <_realloc_r+0x1dc>
8020f54c:	99800117 	ldw	r6,4(r19)
8020f550:	9c07883a 	add	r3,r19,r16
8020f554:	3180004c 	andi	r6,r6,1
8020f558:	3420b03a 	or	r16,r6,r16
8020f55c:	9c000115 	stw	r16,4(r19)
8020f560:	18800117 	ldw	r2,4(r3)
8020f564:	10800054 	ori	r2,r2,1
8020f568:	18800115 	stw	r2,4(r3)
8020f56c:	a009883a 	mov	r4,r20
8020f570:	02168380 	call	80216838 <__malloc_unlock>
8020f574:	9005883a 	mov	r2,r18
8020f578:	dfc00917 	ldw	ra,36(sp)
8020f57c:	df000817 	ldw	fp,32(sp)
8020f580:	ddc00717 	ldw	r23,28(sp)
8020f584:	dd800617 	ldw	r22,24(sp)
8020f588:	dd400517 	ldw	r21,20(sp)
8020f58c:	dd000417 	ldw	r20,16(sp)
8020f590:	dcc00317 	ldw	r19,12(sp)
8020f594:	dc800217 	ldw	r18,8(sp)
8020f598:	dc400117 	ldw	r17,4(sp)
8020f59c:	dc000017 	ldw	r16,0(sp)
8020f5a0:	dec00a04 	addi	sp,sp,40
8020f5a4:	f800283a 	ret
8020f5a8:	017fff04 	movi	r5,-4
8020f5ac:	414a703a 	and	r5,r8,r5
8020f5b0:	814d883a 	add	r6,r16,r5
8020f5b4:	30c01f16 	blt	r6,r3,8020f634 <_realloc_r+0x22c>
8020f5b8:	20800317 	ldw	r2,12(r4)
8020f5bc:	20c00217 	ldw	r3,8(r4)
8020f5c0:	a825883a 	mov	r18,r21
8020f5c4:	3021883a 	mov	r16,r6
8020f5c8:	18800315 	stw	r2,12(r3)
8020f5cc:	10c00215 	stw	r3,8(r2)
8020f5d0:	003fdb06 	br	8020f540 <__reset+0xfa1ef540>
8020f5d4:	00800304 	movi	r2,12
8020f5d8:	a0800015 	stw	r2,0(r20)
8020f5dc:	0005883a 	mov	r2,zero
8020f5e0:	003fe506 	br	8020f578 <__reset+0xfa1ef578>
8020f5e4:	98c00117 	ldw	r3,4(r19)
8020f5e8:	9c4b883a 	add	r5,r19,r17
8020f5ec:	11000054 	ori	r4,r2,1
8020f5f0:	18c0004c 	andi	r3,r3,1
8020f5f4:	1c62b03a 	or	r17,r3,r17
8020f5f8:	9c400115 	stw	r17,4(r19)
8020f5fc:	29000115 	stw	r4,4(r5)
8020f600:	2885883a 	add	r2,r5,r2
8020f604:	10c00117 	ldw	r3,4(r2)
8020f608:	29400204 	addi	r5,r5,8
8020f60c:	a009883a 	mov	r4,r20
8020f610:	18c00054 	ori	r3,r3,1
8020f614:	10c00115 	stw	r3,4(r2)
8020f618:	020ccac0 	call	8020ccac <_free_r>
8020f61c:	003fd306 	br	8020f56c <__reset+0xfa1ef56c>
8020f620:	017fff04 	movi	r5,-4
8020f624:	414a703a 	and	r5,r8,r5
8020f628:	89800404 	addi	r6,r17,16
8020f62c:	8151883a 	add	r8,r16,r5
8020f630:	4180590e 	bge	r8,r6,8020f798 <_realloc_r+0x390>
8020f634:	1080004c 	andi	r2,r2,1
8020f638:	103f9e1e 	bne	r2,zero,8020f4b4 <__reset+0xfa1ef4b4>
8020f63c:	adbffe17 	ldw	r22,-8(r21)
8020f640:	00bfff04 	movi	r2,-4
8020f644:	9dadc83a 	sub	r22,r19,r22
8020f648:	b1800117 	ldw	r6,4(r22)
8020f64c:	3084703a 	and	r2,r6,r2
8020f650:	20002026 	beq	r4,zero,8020f6d4 <_realloc_r+0x2cc>
8020f654:	80af883a 	add	r23,r16,r2
8020f658:	b96f883a 	add	r23,r23,r5
8020f65c:	21c05f26 	beq	r4,r7,8020f7dc <_realloc_r+0x3d4>
8020f660:	b8c01c16 	blt	r23,r3,8020f6d4 <_realloc_r+0x2cc>
8020f664:	20800317 	ldw	r2,12(r4)
8020f668:	20c00217 	ldw	r3,8(r4)
8020f66c:	81bfff04 	addi	r6,r16,-4
8020f670:	01000904 	movi	r4,36
8020f674:	18800315 	stw	r2,12(r3)
8020f678:	10c00215 	stw	r3,8(r2)
8020f67c:	b0c00217 	ldw	r3,8(r22)
8020f680:	b0800317 	ldw	r2,12(r22)
8020f684:	b4800204 	addi	r18,r22,8
8020f688:	18800315 	stw	r2,12(r3)
8020f68c:	10c00215 	stw	r3,8(r2)
8020f690:	21801b36 	bltu	r4,r6,8020f700 <_realloc_r+0x2f8>
8020f694:	008004c4 	movi	r2,19
8020f698:	1180352e 	bgeu	r2,r6,8020f770 <_realloc_r+0x368>
8020f69c:	a8800017 	ldw	r2,0(r21)
8020f6a0:	b0800215 	stw	r2,8(r22)
8020f6a4:	a8800117 	ldw	r2,4(r21)
8020f6a8:	b0800315 	stw	r2,12(r22)
8020f6ac:	008006c4 	movi	r2,27
8020f6b0:	11807f36 	bltu	r2,r6,8020f8b0 <_realloc_r+0x4a8>
8020f6b4:	b0800404 	addi	r2,r22,16
8020f6b8:	ad400204 	addi	r21,r21,8
8020f6bc:	00002d06 	br	8020f774 <_realloc_r+0x36c>
8020f6c0:	adbffe17 	ldw	r22,-8(r21)
8020f6c4:	00bfff04 	movi	r2,-4
8020f6c8:	9dadc83a 	sub	r22,r19,r22
8020f6cc:	b1000117 	ldw	r4,4(r22)
8020f6d0:	2084703a 	and	r2,r4,r2
8020f6d4:	b03f7726 	beq	r22,zero,8020f4b4 <__reset+0xfa1ef4b4>
8020f6d8:	80af883a 	add	r23,r16,r2
8020f6dc:	b8ff7516 	blt	r23,r3,8020f4b4 <__reset+0xfa1ef4b4>
8020f6e0:	b0800317 	ldw	r2,12(r22)
8020f6e4:	b0c00217 	ldw	r3,8(r22)
8020f6e8:	81bfff04 	addi	r6,r16,-4
8020f6ec:	01000904 	movi	r4,36
8020f6f0:	18800315 	stw	r2,12(r3)
8020f6f4:	10c00215 	stw	r3,8(r2)
8020f6f8:	b4800204 	addi	r18,r22,8
8020f6fc:	21bfe52e 	bgeu	r4,r6,8020f694 <__reset+0xfa1ef694>
8020f700:	a80b883a 	mov	r5,r21
8020f704:	9009883a 	mov	r4,r18
8020f708:	020e1880 	call	8020e188 <memmove>
8020f70c:	b821883a 	mov	r16,r23
8020f710:	b027883a 	mov	r19,r22
8020f714:	003f8a06 	br	8020f540 <__reset+0xfa1ef540>
8020f718:	300b883a 	mov	r5,r6
8020f71c:	dfc00917 	ldw	ra,36(sp)
8020f720:	df000817 	ldw	fp,32(sp)
8020f724:	ddc00717 	ldw	r23,28(sp)
8020f728:	dd800617 	ldw	r22,24(sp)
8020f72c:	dd400517 	ldw	r21,20(sp)
8020f730:	dd000417 	ldw	r20,16(sp)
8020f734:	dcc00317 	ldw	r19,12(sp)
8020f738:	dc800217 	ldw	r18,8(sp)
8020f73c:	dc400117 	ldw	r17,4(sp)
8020f740:	dc000017 	ldw	r16,0(sp)
8020f744:	dec00a04 	addi	sp,sp,40
8020f748:	020d8981 	jmpi	8020d898 <_malloc_r>
8020f74c:	a8c00017 	ldw	r3,0(r21)
8020f750:	90c00015 	stw	r3,0(r18)
8020f754:	a8c00117 	ldw	r3,4(r21)
8020f758:	90c00115 	stw	r3,4(r18)
8020f75c:	00c006c4 	movi	r3,27
8020f760:	19804536 	bltu	r3,r6,8020f878 <_realloc_r+0x470>
8020f764:	90800204 	addi	r2,r18,8
8020f768:	a8c00204 	addi	r3,r21,8
8020f76c:	003f6306 	br	8020f4fc <__reset+0xfa1ef4fc>
8020f770:	9005883a 	mov	r2,r18
8020f774:	a8c00017 	ldw	r3,0(r21)
8020f778:	b821883a 	mov	r16,r23
8020f77c:	b027883a 	mov	r19,r22
8020f780:	10c00015 	stw	r3,0(r2)
8020f784:	a8c00117 	ldw	r3,4(r21)
8020f788:	10c00115 	stw	r3,4(r2)
8020f78c:	a8c00217 	ldw	r3,8(r21)
8020f790:	10c00215 	stw	r3,8(r2)
8020f794:	003f6a06 	br	8020f540 <__reset+0xfa1ef540>
8020f798:	9c67883a 	add	r19,r19,r17
8020f79c:	4445c83a 	sub	r2,r8,r17
8020f7a0:	e4c00215 	stw	r19,8(fp)
8020f7a4:	10800054 	ori	r2,r2,1
8020f7a8:	98800115 	stw	r2,4(r19)
8020f7ac:	a8bfff17 	ldw	r2,-4(r21)
8020f7b0:	a009883a 	mov	r4,r20
8020f7b4:	1080004c 	andi	r2,r2,1
8020f7b8:	1462b03a 	or	r17,r2,r17
8020f7bc:	ac7fff15 	stw	r17,-4(r21)
8020f7c0:	02168380 	call	80216838 <__malloc_unlock>
8020f7c4:	a805883a 	mov	r2,r21
8020f7c8:	003f6b06 	br	8020f578 <__reset+0xfa1ef578>
8020f7cc:	a80b883a 	mov	r5,r21
8020f7d0:	9009883a 	mov	r4,r18
8020f7d4:	020e1880 	call	8020e188 <memmove>
8020f7d8:	003f4e06 	br	8020f514 <__reset+0xfa1ef514>
8020f7dc:	89000404 	addi	r4,r17,16
8020f7e0:	b93fbc16 	blt	r23,r4,8020f6d4 <__reset+0xfa1ef6d4>
8020f7e4:	b0800317 	ldw	r2,12(r22)
8020f7e8:	b0c00217 	ldw	r3,8(r22)
8020f7ec:	81bfff04 	addi	r6,r16,-4
8020f7f0:	01000904 	movi	r4,36
8020f7f4:	18800315 	stw	r2,12(r3)
8020f7f8:	10c00215 	stw	r3,8(r2)
8020f7fc:	b4800204 	addi	r18,r22,8
8020f800:	21804336 	bltu	r4,r6,8020f910 <_realloc_r+0x508>
8020f804:	008004c4 	movi	r2,19
8020f808:	11803f2e 	bgeu	r2,r6,8020f908 <_realloc_r+0x500>
8020f80c:	a8800017 	ldw	r2,0(r21)
8020f810:	b0800215 	stw	r2,8(r22)
8020f814:	a8800117 	ldw	r2,4(r21)
8020f818:	b0800315 	stw	r2,12(r22)
8020f81c:	008006c4 	movi	r2,27
8020f820:	11803f36 	bltu	r2,r6,8020f920 <_realloc_r+0x518>
8020f824:	b0800404 	addi	r2,r22,16
8020f828:	ad400204 	addi	r21,r21,8
8020f82c:	a8c00017 	ldw	r3,0(r21)
8020f830:	10c00015 	stw	r3,0(r2)
8020f834:	a8c00117 	ldw	r3,4(r21)
8020f838:	10c00115 	stw	r3,4(r2)
8020f83c:	a8c00217 	ldw	r3,8(r21)
8020f840:	10c00215 	stw	r3,8(r2)
8020f844:	b447883a 	add	r3,r22,r17
8020f848:	bc45c83a 	sub	r2,r23,r17
8020f84c:	e0c00215 	stw	r3,8(fp)
8020f850:	10800054 	ori	r2,r2,1
8020f854:	18800115 	stw	r2,4(r3)
8020f858:	b0800117 	ldw	r2,4(r22)
8020f85c:	a009883a 	mov	r4,r20
8020f860:	1080004c 	andi	r2,r2,1
8020f864:	1462b03a 	or	r17,r2,r17
8020f868:	b4400115 	stw	r17,4(r22)
8020f86c:	02168380 	call	80216838 <__malloc_unlock>
8020f870:	9005883a 	mov	r2,r18
8020f874:	003f4006 	br	8020f578 <__reset+0xfa1ef578>
8020f878:	a8c00217 	ldw	r3,8(r21)
8020f87c:	90c00215 	stw	r3,8(r18)
8020f880:	a8c00317 	ldw	r3,12(r21)
8020f884:	90c00315 	stw	r3,12(r18)
8020f888:	30801126 	beq	r6,r2,8020f8d0 <_realloc_r+0x4c8>
8020f88c:	90800404 	addi	r2,r18,16
8020f890:	a8c00404 	addi	r3,r21,16
8020f894:	003f1906 	br	8020f4fc <__reset+0xfa1ef4fc>
8020f898:	90ffff17 	ldw	r3,-4(r18)
8020f89c:	00bfff04 	movi	r2,-4
8020f8a0:	a825883a 	mov	r18,r21
8020f8a4:	1884703a 	and	r2,r3,r2
8020f8a8:	80a1883a 	add	r16,r16,r2
8020f8ac:	003f2406 	br	8020f540 <__reset+0xfa1ef540>
8020f8b0:	a8800217 	ldw	r2,8(r21)
8020f8b4:	b0800415 	stw	r2,16(r22)
8020f8b8:	a8800317 	ldw	r2,12(r21)
8020f8bc:	b0800515 	stw	r2,20(r22)
8020f8c0:	31000a26 	beq	r6,r4,8020f8ec <_realloc_r+0x4e4>
8020f8c4:	b0800604 	addi	r2,r22,24
8020f8c8:	ad400404 	addi	r21,r21,16
8020f8cc:	003fa906 	br	8020f774 <__reset+0xfa1ef774>
8020f8d0:	a9000417 	ldw	r4,16(r21)
8020f8d4:	90800604 	addi	r2,r18,24
8020f8d8:	a8c00604 	addi	r3,r21,24
8020f8dc:	91000415 	stw	r4,16(r18)
8020f8e0:	a9000517 	ldw	r4,20(r21)
8020f8e4:	91000515 	stw	r4,20(r18)
8020f8e8:	003f0406 	br	8020f4fc <__reset+0xfa1ef4fc>
8020f8ec:	a8c00417 	ldw	r3,16(r21)
8020f8f0:	ad400604 	addi	r21,r21,24
8020f8f4:	b0800804 	addi	r2,r22,32
8020f8f8:	b0c00615 	stw	r3,24(r22)
8020f8fc:	a8ffff17 	ldw	r3,-4(r21)
8020f900:	b0c00715 	stw	r3,28(r22)
8020f904:	003f9b06 	br	8020f774 <__reset+0xfa1ef774>
8020f908:	9005883a 	mov	r2,r18
8020f90c:	003fc706 	br	8020f82c <__reset+0xfa1ef82c>
8020f910:	a80b883a 	mov	r5,r21
8020f914:	9009883a 	mov	r4,r18
8020f918:	020e1880 	call	8020e188 <memmove>
8020f91c:	003fc906 	br	8020f844 <__reset+0xfa1ef844>
8020f920:	a8800217 	ldw	r2,8(r21)
8020f924:	b0800415 	stw	r2,16(r22)
8020f928:	a8800317 	ldw	r2,12(r21)
8020f92c:	b0800515 	stw	r2,20(r22)
8020f930:	31000726 	beq	r6,r4,8020f950 <_realloc_r+0x548>
8020f934:	b0800604 	addi	r2,r22,24
8020f938:	ad400404 	addi	r21,r21,16
8020f93c:	003fbb06 	br	8020f82c <__reset+0xfa1ef82c>
8020f940:	a009883a 	mov	r4,r20
8020f944:	02168380 	call	80216838 <__malloc_unlock>
8020f948:	0005883a 	mov	r2,zero
8020f94c:	003f0a06 	br	8020f578 <__reset+0xfa1ef578>
8020f950:	a8c00417 	ldw	r3,16(r21)
8020f954:	ad400604 	addi	r21,r21,24
8020f958:	b0800804 	addi	r2,r22,32
8020f95c:	b0c00615 	stw	r3,24(r22)
8020f960:	a8ffff17 	ldw	r3,-4(r21)
8020f964:	b0c00715 	stw	r3,28(r22)
8020f968:	003fb006 	br	8020f82c <__reset+0xfa1ef82c>

8020f96c <__fpclassifyd>:
8020f96c:	00a00034 	movhi	r2,32768
8020f970:	10bfffc4 	addi	r2,r2,-1
8020f974:	2884703a 	and	r2,r5,r2
8020f978:	10000726 	beq	r2,zero,8020f998 <__fpclassifyd+0x2c>
8020f97c:	00fffc34 	movhi	r3,65520
8020f980:	019ff834 	movhi	r6,32736
8020f984:	28c7883a 	add	r3,r5,r3
8020f988:	31bfffc4 	addi	r6,r6,-1
8020f98c:	30c00536 	bltu	r6,r3,8020f9a4 <__fpclassifyd+0x38>
8020f990:	00800104 	movi	r2,4
8020f994:	f800283a 	ret
8020f998:	2000021e 	bne	r4,zero,8020f9a4 <__fpclassifyd+0x38>
8020f99c:	00800084 	movi	r2,2
8020f9a0:	f800283a 	ret
8020f9a4:	00dffc34 	movhi	r3,32752
8020f9a8:	019ff834 	movhi	r6,32736
8020f9ac:	28cb883a 	add	r5,r5,r3
8020f9b0:	31bfffc4 	addi	r6,r6,-1
8020f9b4:	317ff62e 	bgeu	r6,r5,8020f990 <__reset+0xfa1ef990>
8020f9b8:	01400434 	movhi	r5,16
8020f9bc:	297fffc4 	addi	r5,r5,-1
8020f9c0:	28800236 	bltu	r5,r2,8020f9cc <__fpclassifyd+0x60>
8020f9c4:	008000c4 	movi	r2,3
8020f9c8:	f800283a 	ret
8020f9cc:	10c00226 	beq	r2,r3,8020f9d8 <__fpclassifyd+0x6c>
8020f9d0:	0005883a 	mov	r2,zero
8020f9d4:	f800283a 	ret
8020f9d8:	2005003a 	cmpeq	r2,r4,zero
8020f9dc:	f800283a 	ret

8020f9e0 <_sbrk_r>:
8020f9e0:	defffd04 	addi	sp,sp,-12
8020f9e4:	dc000015 	stw	r16,0(sp)
8020f9e8:	042008b4 	movhi	r16,32802
8020f9ec:	dc400115 	stw	r17,4(sp)
8020f9f0:	843c4e04 	addi	r16,r16,-3784
8020f9f4:	2023883a 	mov	r17,r4
8020f9f8:	2809883a 	mov	r4,r5
8020f9fc:	dfc00215 	stw	ra,8(sp)
8020fa00:	80000015 	stw	zero,0(r16)
8020fa04:	02169f80 	call	802169f8 <sbrk>
8020fa08:	00ffffc4 	movi	r3,-1
8020fa0c:	10c00526 	beq	r2,r3,8020fa24 <_sbrk_r+0x44>
8020fa10:	dfc00217 	ldw	ra,8(sp)
8020fa14:	dc400117 	ldw	r17,4(sp)
8020fa18:	dc000017 	ldw	r16,0(sp)
8020fa1c:	dec00304 	addi	sp,sp,12
8020fa20:	f800283a 	ret
8020fa24:	80c00017 	ldw	r3,0(r16)
8020fa28:	183ff926 	beq	r3,zero,8020fa10 <__reset+0xfa1efa10>
8020fa2c:	88c00015 	stw	r3,0(r17)
8020fa30:	003ff706 	br	8020fa10 <__reset+0xfa1efa10>

8020fa34 <__sread>:
8020fa34:	defffe04 	addi	sp,sp,-8
8020fa38:	dc000015 	stw	r16,0(sp)
8020fa3c:	2821883a 	mov	r16,r5
8020fa40:	2940038f 	ldh	r5,14(r5)
8020fa44:	dfc00115 	stw	ra,4(sp)
8020fa48:	0212c340 	call	80212c34 <_read_r>
8020fa4c:	10000716 	blt	r2,zero,8020fa6c <__sread+0x38>
8020fa50:	80c01417 	ldw	r3,80(r16)
8020fa54:	1887883a 	add	r3,r3,r2
8020fa58:	80c01415 	stw	r3,80(r16)
8020fa5c:	dfc00117 	ldw	ra,4(sp)
8020fa60:	dc000017 	ldw	r16,0(sp)
8020fa64:	dec00204 	addi	sp,sp,8
8020fa68:	f800283a 	ret
8020fa6c:	80c0030b 	ldhu	r3,12(r16)
8020fa70:	18fbffcc 	andi	r3,r3,61439
8020fa74:	80c0030d 	sth	r3,12(r16)
8020fa78:	dfc00117 	ldw	ra,4(sp)
8020fa7c:	dc000017 	ldw	r16,0(sp)
8020fa80:	dec00204 	addi	sp,sp,8
8020fa84:	f800283a 	ret

8020fa88 <__seofread>:
8020fa88:	0005883a 	mov	r2,zero
8020fa8c:	f800283a 	ret

8020fa90 <__swrite>:
8020fa90:	2880030b 	ldhu	r2,12(r5)
8020fa94:	defffb04 	addi	sp,sp,-20
8020fa98:	dcc00315 	stw	r19,12(sp)
8020fa9c:	dc800215 	stw	r18,8(sp)
8020faa0:	dc400115 	stw	r17,4(sp)
8020faa4:	dc000015 	stw	r16,0(sp)
8020faa8:	dfc00415 	stw	ra,16(sp)
8020faac:	10c0400c 	andi	r3,r2,256
8020fab0:	2821883a 	mov	r16,r5
8020fab4:	2023883a 	mov	r17,r4
8020fab8:	3025883a 	mov	r18,r6
8020fabc:	3827883a 	mov	r19,r7
8020fac0:	18000526 	beq	r3,zero,8020fad8 <__swrite+0x48>
8020fac4:	2940038f 	ldh	r5,14(r5)
8020fac8:	01c00084 	movi	r7,2
8020facc:	000d883a 	mov	r6,zero
8020fad0:	0212bd40 	call	80212bd4 <_lseek_r>
8020fad4:	8080030b 	ldhu	r2,12(r16)
8020fad8:	8140038f 	ldh	r5,14(r16)
8020fadc:	10bbffcc 	andi	r2,r2,61439
8020fae0:	980f883a 	mov	r7,r19
8020fae4:	900d883a 	mov	r6,r18
8020fae8:	8809883a 	mov	r4,r17
8020faec:	8080030d 	sth	r2,12(r16)
8020faf0:	dfc00417 	ldw	ra,16(sp)
8020faf4:	dcc00317 	ldw	r19,12(sp)
8020faf8:	dc800217 	ldw	r18,8(sp)
8020fafc:	dc400117 	ldw	r17,4(sp)
8020fb00:	dc000017 	ldw	r16,0(sp)
8020fb04:	dec00504 	addi	sp,sp,20
8020fb08:	02126a01 	jmpi	802126a0 <_write_r>

8020fb0c <__sseek>:
8020fb0c:	defffe04 	addi	sp,sp,-8
8020fb10:	dc000015 	stw	r16,0(sp)
8020fb14:	2821883a 	mov	r16,r5
8020fb18:	2940038f 	ldh	r5,14(r5)
8020fb1c:	dfc00115 	stw	ra,4(sp)
8020fb20:	0212bd40 	call	80212bd4 <_lseek_r>
8020fb24:	00ffffc4 	movi	r3,-1
8020fb28:	10c00826 	beq	r2,r3,8020fb4c <__sseek+0x40>
8020fb2c:	80c0030b 	ldhu	r3,12(r16)
8020fb30:	80801415 	stw	r2,80(r16)
8020fb34:	18c40014 	ori	r3,r3,4096
8020fb38:	80c0030d 	sth	r3,12(r16)
8020fb3c:	dfc00117 	ldw	ra,4(sp)
8020fb40:	dc000017 	ldw	r16,0(sp)
8020fb44:	dec00204 	addi	sp,sp,8
8020fb48:	f800283a 	ret
8020fb4c:	80c0030b 	ldhu	r3,12(r16)
8020fb50:	18fbffcc 	andi	r3,r3,61439
8020fb54:	80c0030d 	sth	r3,12(r16)
8020fb58:	dfc00117 	ldw	ra,4(sp)
8020fb5c:	dc000017 	ldw	r16,0(sp)
8020fb60:	dec00204 	addi	sp,sp,8
8020fb64:	f800283a 	ret

8020fb68 <__sclose>:
8020fb68:	2940038f 	ldh	r5,14(r5)
8020fb6c:	02127001 	jmpi	80212700 <_close_r>

8020fb70 <strcmp>:
8020fb70:	2144b03a 	or	r2,r4,r5
8020fb74:	108000cc 	andi	r2,r2,3
8020fb78:	1000171e 	bne	r2,zero,8020fbd8 <strcmp+0x68>
8020fb7c:	20800017 	ldw	r2,0(r4)
8020fb80:	28c00017 	ldw	r3,0(r5)
8020fb84:	10c0141e 	bne	r2,r3,8020fbd8 <strcmp+0x68>
8020fb88:	027fbff4 	movhi	r9,65279
8020fb8c:	4a7fbfc4 	addi	r9,r9,-257
8020fb90:	0086303a 	nor	r3,zero,r2
8020fb94:	02202074 	movhi	r8,32897
8020fb98:	1245883a 	add	r2,r2,r9
8020fb9c:	42202004 	addi	r8,r8,-32640
8020fba0:	10c4703a 	and	r2,r2,r3
8020fba4:	1204703a 	and	r2,r2,r8
8020fba8:	10000226 	beq	r2,zero,8020fbb4 <strcmp+0x44>
8020fbac:	00002306 	br	8020fc3c <strcmp+0xcc>
8020fbb0:	1000221e 	bne	r2,zero,8020fc3c <strcmp+0xcc>
8020fbb4:	21000104 	addi	r4,r4,4
8020fbb8:	20c00017 	ldw	r3,0(r4)
8020fbbc:	29400104 	addi	r5,r5,4
8020fbc0:	29800017 	ldw	r6,0(r5)
8020fbc4:	1a4f883a 	add	r7,r3,r9
8020fbc8:	00c4303a 	nor	r2,zero,r3
8020fbcc:	3884703a 	and	r2,r7,r2
8020fbd0:	1204703a 	and	r2,r2,r8
8020fbd4:	19bff626 	beq	r3,r6,8020fbb0 <__reset+0xfa1efbb0>
8020fbd8:	20800003 	ldbu	r2,0(r4)
8020fbdc:	10c03fcc 	andi	r3,r2,255
8020fbe0:	18c0201c 	xori	r3,r3,128
8020fbe4:	18ffe004 	addi	r3,r3,-128
8020fbe8:	18000c26 	beq	r3,zero,8020fc1c <strcmp+0xac>
8020fbec:	29800007 	ldb	r6,0(r5)
8020fbf0:	19800326 	beq	r3,r6,8020fc00 <strcmp+0x90>
8020fbf4:	00001306 	br	8020fc44 <strcmp+0xd4>
8020fbf8:	29800007 	ldb	r6,0(r5)
8020fbfc:	11800b1e 	bne	r2,r6,8020fc2c <strcmp+0xbc>
8020fc00:	21000044 	addi	r4,r4,1
8020fc04:	20c00003 	ldbu	r3,0(r4)
8020fc08:	29400044 	addi	r5,r5,1
8020fc0c:	18803fcc 	andi	r2,r3,255
8020fc10:	1080201c 	xori	r2,r2,128
8020fc14:	10bfe004 	addi	r2,r2,-128
8020fc18:	103ff71e 	bne	r2,zero,8020fbf8 <__reset+0xfa1efbf8>
8020fc1c:	0007883a 	mov	r3,zero
8020fc20:	28800003 	ldbu	r2,0(r5)
8020fc24:	1885c83a 	sub	r2,r3,r2
8020fc28:	f800283a 	ret
8020fc2c:	28800003 	ldbu	r2,0(r5)
8020fc30:	18c03fcc 	andi	r3,r3,255
8020fc34:	1885c83a 	sub	r2,r3,r2
8020fc38:	f800283a 	ret
8020fc3c:	0005883a 	mov	r2,zero
8020fc40:	f800283a 	ret
8020fc44:	10c03fcc 	andi	r3,r2,255
8020fc48:	003ff506 	br	8020fc20 <__reset+0xfa1efc20>

8020fc4c <__ssprint_r>:
8020fc4c:	30800217 	ldw	r2,8(r6)
8020fc50:	defff604 	addi	sp,sp,-40
8020fc54:	dc800215 	stw	r18,8(sp)
8020fc58:	dfc00915 	stw	ra,36(sp)
8020fc5c:	df000815 	stw	fp,32(sp)
8020fc60:	ddc00715 	stw	r23,28(sp)
8020fc64:	dd800615 	stw	r22,24(sp)
8020fc68:	dd400515 	stw	r21,20(sp)
8020fc6c:	dd000415 	stw	r20,16(sp)
8020fc70:	dcc00315 	stw	r19,12(sp)
8020fc74:	dc400115 	stw	r17,4(sp)
8020fc78:	dc000015 	stw	r16,0(sp)
8020fc7c:	3025883a 	mov	r18,r6
8020fc80:	10005826 	beq	r2,zero,8020fde4 <__ssprint_r+0x198>
8020fc84:	2027883a 	mov	r19,r4
8020fc88:	35c00017 	ldw	r23,0(r6)
8020fc8c:	29000017 	ldw	r4,0(r5)
8020fc90:	28800217 	ldw	r2,8(r5)
8020fc94:	2823883a 	mov	r17,r5
8020fc98:	0039883a 	mov	fp,zero
8020fc9c:	0021883a 	mov	r16,zero
8020fca0:	80003926 	beq	r16,zero,8020fd88 <__ssprint_r+0x13c>
8020fca4:	102b883a 	mov	r21,r2
8020fca8:	102d883a 	mov	r22,r2
8020fcac:	80803a36 	bltu	r16,r2,8020fd98 <__ssprint_r+0x14c>
8020fcb0:	88c0030b 	ldhu	r3,12(r17)
8020fcb4:	1881200c 	andi	r2,r3,1152
8020fcb8:	10002626 	beq	r2,zero,8020fd54 <__ssprint_r+0x108>
8020fcbc:	88800517 	ldw	r2,20(r17)
8020fcc0:	89400417 	ldw	r5,16(r17)
8020fcc4:	81800044 	addi	r6,r16,1
8020fcc8:	108f883a 	add	r7,r2,r2
8020fccc:	3885883a 	add	r2,r7,r2
8020fcd0:	100ed7fa 	srli	r7,r2,31
8020fcd4:	216dc83a 	sub	r22,r4,r5
8020fcd8:	3589883a 	add	r4,r6,r22
8020fcdc:	3885883a 	add	r2,r7,r2
8020fce0:	102bd07a 	srai	r21,r2,1
8020fce4:	a80d883a 	mov	r6,r21
8020fce8:	a900022e 	bgeu	r21,r4,8020fcf4 <__ssprint_r+0xa8>
8020fcec:	202b883a 	mov	r21,r4
8020fcf0:	200d883a 	mov	r6,r4
8020fcf4:	18c1000c 	andi	r3,r3,1024
8020fcf8:	18002a26 	beq	r3,zero,8020fda4 <__ssprint_r+0x158>
8020fcfc:	300b883a 	mov	r5,r6
8020fd00:	9809883a 	mov	r4,r19
8020fd04:	020d8980 	call	8020d898 <_malloc_r>
8020fd08:	1029883a 	mov	r20,r2
8020fd0c:	10002c26 	beq	r2,zero,8020fdc0 <__ssprint_r+0x174>
8020fd10:	89400417 	ldw	r5,16(r17)
8020fd14:	b00d883a 	mov	r6,r22
8020fd18:	1009883a 	mov	r4,r2
8020fd1c:	02062d80 	call	802062d8 <memcpy>
8020fd20:	8880030b 	ldhu	r2,12(r17)
8020fd24:	00fedfc4 	movi	r3,-1153
8020fd28:	10c4703a 	and	r2,r2,r3
8020fd2c:	10802014 	ori	r2,r2,128
8020fd30:	8880030d 	sth	r2,12(r17)
8020fd34:	a589883a 	add	r4,r20,r22
8020fd38:	adadc83a 	sub	r22,r21,r22
8020fd3c:	8d400515 	stw	r21,20(r17)
8020fd40:	8d800215 	stw	r22,8(r17)
8020fd44:	8d000415 	stw	r20,16(r17)
8020fd48:	89000015 	stw	r4,0(r17)
8020fd4c:	802b883a 	mov	r21,r16
8020fd50:	802d883a 	mov	r22,r16
8020fd54:	b00d883a 	mov	r6,r22
8020fd58:	e00b883a 	mov	r5,fp
8020fd5c:	020e1880 	call	8020e188 <memmove>
8020fd60:	88800217 	ldw	r2,8(r17)
8020fd64:	89000017 	ldw	r4,0(r17)
8020fd68:	90c00217 	ldw	r3,8(r18)
8020fd6c:	1545c83a 	sub	r2,r2,r21
8020fd70:	2589883a 	add	r4,r4,r22
8020fd74:	88800215 	stw	r2,8(r17)
8020fd78:	89000015 	stw	r4,0(r17)
8020fd7c:	1c21c83a 	sub	r16,r3,r16
8020fd80:	94000215 	stw	r16,8(r18)
8020fd84:	80001726 	beq	r16,zero,8020fde4 <__ssprint_r+0x198>
8020fd88:	bf000017 	ldw	fp,0(r23)
8020fd8c:	bc000117 	ldw	r16,4(r23)
8020fd90:	bdc00204 	addi	r23,r23,8
8020fd94:	003fc206 	br	8020fca0 <__reset+0xfa1efca0>
8020fd98:	802b883a 	mov	r21,r16
8020fd9c:	802d883a 	mov	r22,r16
8020fda0:	003fec06 	br	8020fd54 <__reset+0xfa1efd54>
8020fda4:	9809883a 	mov	r4,r19
8020fda8:	020f4080 	call	8020f408 <_realloc_r>
8020fdac:	1029883a 	mov	r20,r2
8020fdb0:	103fe01e 	bne	r2,zero,8020fd34 <__reset+0xfa1efd34>
8020fdb4:	89400417 	ldw	r5,16(r17)
8020fdb8:	9809883a 	mov	r4,r19
8020fdbc:	020ccac0 	call	8020ccac <_free_r>
8020fdc0:	88c0030b 	ldhu	r3,12(r17)
8020fdc4:	00800304 	movi	r2,12
8020fdc8:	98800015 	stw	r2,0(r19)
8020fdcc:	18c01014 	ori	r3,r3,64
8020fdd0:	88c0030d 	sth	r3,12(r17)
8020fdd4:	00bfffc4 	movi	r2,-1
8020fdd8:	90000215 	stw	zero,8(r18)
8020fddc:	90000115 	stw	zero,4(r18)
8020fde0:	00000206 	br	8020fdec <__ssprint_r+0x1a0>
8020fde4:	90000115 	stw	zero,4(r18)
8020fde8:	0005883a 	mov	r2,zero
8020fdec:	dfc00917 	ldw	ra,36(sp)
8020fdf0:	df000817 	ldw	fp,32(sp)
8020fdf4:	ddc00717 	ldw	r23,28(sp)
8020fdf8:	dd800617 	ldw	r22,24(sp)
8020fdfc:	dd400517 	ldw	r21,20(sp)
8020fe00:	dd000417 	ldw	r20,16(sp)
8020fe04:	dcc00317 	ldw	r19,12(sp)
8020fe08:	dc800217 	ldw	r18,8(sp)
8020fe0c:	dc400117 	ldw	r17,4(sp)
8020fe10:	dc000017 	ldw	r16,0(sp)
8020fe14:	dec00a04 	addi	sp,sp,40
8020fe18:	f800283a 	ret

8020fe1c <___svfiprintf_internal_r>:
8020fe1c:	2880030b 	ldhu	r2,12(r5)
8020fe20:	deffc804 	addi	sp,sp,-224
8020fe24:	dcc03115 	stw	r19,196(sp)
8020fe28:	dfc03715 	stw	ra,220(sp)
8020fe2c:	df003615 	stw	fp,216(sp)
8020fe30:	ddc03515 	stw	r23,212(sp)
8020fe34:	dd803415 	stw	r22,208(sp)
8020fe38:	dd403315 	stw	r21,204(sp)
8020fe3c:	dd003215 	stw	r20,200(sp)
8020fe40:	dc803015 	stw	r18,192(sp)
8020fe44:	dc402f15 	stw	r17,188(sp)
8020fe48:	dc002e15 	stw	r16,184(sp)
8020fe4c:	d9402715 	stw	r5,156(sp)
8020fe50:	d9002a15 	stw	r4,168(sp)
8020fe54:	1080200c 	andi	r2,r2,128
8020fe58:	d9c02315 	stw	r7,140(sp)
8020fe5c:	3027883a 	mov	r19,r6
8020fe60:	10000226 	beq	r2,zero,8020fe6c <___svfiprintf_internal_r+0x50>
8020fe64:	28800417 	ldw	r2,16(r5)
8020fe68:	10041d26 	beq	r2,zero,80210ee0 <___svfiprintf_internal_r+0x10c4>
8020fe6c:	dac01a04 	addi	r11,sp,104
8020fe70:	dac01e15 	stw	r11,120(sp)
8020fe74:	d8801e17 	ldw	r2,120(sp)
8020fe78:	dac019c4 	addi	r11,sp,103
8020fe7c:	dd402a17 	ldw	r21,168(sp)
8020fe80:	ddc02717 	ldw	r23,156(sp)
8020fe84:	05a008b4 	movhi	r22,32802
8020fe88:	052008b4 	movhi	r20,32802
8020fe8c:	dac01f15 	stw	r11,124(sp)
8020fe90:	12d7c83a 	sub	r11,r2,r11
8020fe94:	b5b45a04 	addi	r22,r22,-11928
8020fe98:	a5345604 	addi	r20,r20,-11944
8020fe9c:	dec01a15 	stw	sp,104(sp)
8020fea0:	d8001c15 	stw	zero,112(sp)
8020fea4:	d8001b15 	stw	zero,108(sp)
8020fea8:	d811883a 	mov	r8,sp
8020feac:	d8002915 	stw	zero,164(sp)
8020feb0:	d8002515 	stw	zero,148(sp)
8020feb4:	dac02b15 	stw	r11,172(sp)
8020feb8:	98800007 	ldb	r2,0(r19)
8020febc:	1002dd26 	beq	r2,zero,80210a34 <___svfiprintf_internal_r+0xc18>
8020fec0:	00c00944 	movi	r3,37
8020fec4:	9823883a 	mov	r17,r19
8020fec8:	10c0021e 	bne	r2,r3,8020fed4 <___svfiprintf_internal_r+0xb8>
8020fecc:	00001406 	br	8020ff20 <___svfiprintf_internal_r+0x104>
8020fed0:	10c00326 	beq	r2,r3,8020fee0 <___svfiprintf_internal_r+0xc4>
8020fed4:	8c400044 	addi	r17,r17,1
8020fed8:	88800007 	ldb	r2,0(r17)
8020fedc:	103ffc1e 	bne	r2,zero,8020fed0 <__reset+0xfa1efed0>
8020fee0:	8ce1c83a 	sub	r16,r17,r19
8020fee4:	80000e26 	beq	r16,zero,8020ff20 <___svfiprintf_internal_r+0x104>
8020fee8:	d8c01c17 	ldw	r3,112(sp)
8020feec:	d8801b17 	ldw	r2,108(sp)
8020fef0:	44c00015 	stw	r19,0(r8)
8020fef4:	1c07883a 	add	r3,r3,r16
8020fef8:	10800044 	addi	r2,r2,1
8020fefc:	d8c01c15 	stw	r3,112(sp)
8020ff00:	44000115 	stw	r16,4(r8)
8020ff04:	d8801b15 	stw	r2,108(sp)
8020ff08:	00c001c4 	movi	r3,7
8020ff0c:	18831e16 	blt	r3,r2,80210b88 <___svfiprintf_internal_r+0xd6c>
8020ff10:	42000204 	addi	r8,r8,8
8020ff14:	dac02517 	ldw	r11,148(sp)
8020ff18:	5c17883a 	add	r11,r11,r16
8020ff1c:	dac02515 	stw	r11,148(sp)
8020ff20:	88800007 	ldb	r2,0(r17)
8020ff24:	1002c526 	beq	r2,zero,80210a3c <___svfiprintf_internal_r+0xc20>
8020ff28:	88c00047 	ldb	r3,1(r17)
8020ff2c:	8cc00044 	addi	r19,r17,1
8020ff30:	d8001d85 	stb	zero,118(sp)
8020ff34:	0009883a 	mov	r4,zero
8020ff38:	000f883a 	mov	r7,zero
8020ff3c:	043fffc4 	movi	r16,-1
8020ff40:	d8002415 	stw	zero,144(sp)
8020ff44:	0025883a 	mov	r18,zero
8020ff48:	01401604 	movi	r5,88
8020ff4c:	01800244 	movi	r6,9
8020ff50:	02800a84 	movi	r10,42
8020ff54:	02401b04 	movi	r9,108
8020ff58:	9cc00044 	addi	r19,r19,1
8020ff5c:	18bff804 	addi	r2,r3,-32
8020ff60:	2881dd36 	bltu	r5,r2,802106d8 <___svfiprintf_internal_r+0x8bc>
8020ff64:	100490ba 	slli	r2,r2,2
8020ff68:	02e00874 	movhi	r11,32801
8020ff6c:	5affdf04 	addi	r11,r11,-132
8020ff70:	12c5883a 	add	r2,r2,r11
8020ff74:	10800017 	ldw	r2,0(r2)
8020ff78:	1000683a 	jmp	r2
8020ff7c:	80210178 	rdprs	zero,r16,-31739
8020ff80:	802106d8 	cmpnei	zero,r16,-31717
8020ff84:	802106d8 	cmpnei	zero,r16,-31717
8020ff88:	8021016c 	andhi	zero,r16,33797
8020ff8c:	802106d8 	cmpnei	zero,r16,-31717
8020ff90:	802106d8 	cmpnei	zero,r16,-31717
8020ff94:	802106d8 	cmpnei	zero,r16,-31717
8020ff98:	802106d8 	cmpnei	zero,r16,-31717
8020ff9c:	802106d8 	cmpnei	zero,r16,-31717
8020ffa0:	802106d8 	cmpnei	zero,r16,-31717
8020ffa4:	802100e0 	cmpeqi	zero,r16,-31741
8020ffa8:	802102bc 	xorhi	zero,r16,33802
8020ffac:	802106d8 	cmpnei	zero,r16,-31717
8020ffb0:	8021010c 	andi	zero,r16,33796
8020ffb4:	8021070c 	andi	zero,r16,33820
8020ffb8:	802106d8 	cmpnei	zero,r16,-31717
8020ffbc:	80210700 	call	88021070 <__reset+0x2001070>
8020ffc0:	802106a0 	cmpeqi	zero,r16,-31718
8020ffc4:	802106a0 	cmpeqi	zero,r16,-31718
8020ffc8:	802106a0 	cmpeqi	zero,r16,-31718
8020ffcc:	802106a0 	cmpeqi	zero,r16,-31718
8020ffd0:	802106a0 	cmpeqi	zero,r16,-31718
8020ffd4:	802106a0 	cmpeqi	zero,r16,-31718
8020ffd8:	802106a0 	cmpeqi	zero,r16,-31718
8020ffdc:	802106a0 	cmpeqi	zero,r16,-31718
8020ffe0:	802106a0 	cmpeqi	zero,r16,-31718
8020ffe4:	802106d8 	cmpnei	zero,r16,-31717
8020ffe8:	802106d8 	cmpnei	zero,r16,-31717
8020ffec:	802106d8 	cmpnei	zero,r16,-31717
8020fff0:	802106d8 	cmpnei	zero,r16,-31717
8020fff4:	802106d8 	cmpnei	zero,r16,-31717
8020fff8:	802106d8 	cmpnei	zero,r16,-31717
8020fffc:	802106d8 	cmpnei	zero,r16,-31717
80210000:	802106d8 	cmpnei	zero,r16,-31717
80210004:	802106d8 	cmpnei	zero,r16,-31717
80210008:	802106d8 	cmpnei	zero,r16,-31717
8021000c:	8021063c 	xorhi	zero,r16,33816
80210010:	802106d8 	cmpnei	zero,r16,-31717
80210014:	802106d8 	cmpnei	zero,r16,-31717
80210018:	802106d8 	cmpnei	zero,r16,-31717
8021001c:	802106d8 	cmpnei	zero,r16,-31717
80210020:	802106d8 	cmpnei	zero,r16,-31717
80210024:	802106d8 	cmpnei	zero,r16,-31717
80210028:	802106d8 	cmpnei	zero,r16,-31717
8021002c:	802106d8 	cmpnei	zero,r16,-31717
80210030:	802106d8 	cmpnei	zero,r16,-31717
80210034:	802106d8 	cmpnei	zero,r16,-31717
80210038:	802107b4 	orhi	zero,r16,33822
8021003c:	802106d8 	cmpnei	zero,r16,-31717
80210040:	802106d8 	cmpnei	zero,r16,-31717
80210044:	802106d8 	cmpnei	zero,r16,-31717
80210048:	802106d8 	cmpnei	zero,r16,-31717
8021004c:	802106d8 	cmpnei	zero,r16,-31717
80210050:	8021074c 	andi	zero,r16,33821
80210054:	802106d8 	cmpnei	zero,r16,-31717
80210058:	802106d8 	cmpnei	zero,r16,-31717
8021005c:	80210480 	call	88021048 <__reset+0x2001048>
80210060:	802106d8 	cmpnei	zero,r16,-31717
80210064:	802106d8 	cmpnei	zero,r16,-31717
80210068:	802106d8 	cmpnei	zero,r16,-31717
8021006c:	802106d8 	cmpnei	zero,r16,-31717
80210070:	802106d8 	cmpnei	zero,r16,-31717
80210074:	802106d8 	cmpnei	zero,r16,-31717
80210078:	802106d8 	cmpnei	zero,r16,-31717
8021007c:	802106d8 	cmpnei	zero,r16,-31717
80210080:	802106d8 	cmpnei	zero,r16,-31717
80210084:	802106d8 	cmpnei	zero,r16,-31717
80210088:	80210370 	cmpltui	zero,r16,33805
8021008c:	8021051c 	xori	zero,r16,33812
80210090:	802106d8 	cmpnei	zero,r16,-31717
80210094:	802106d8 	cmpnei	zero,r16,-31717
80210098:	802106d8 	cmpnei	zero,r16,-31717
8021009c:	80210510 	cmplti	zero,r16,-31724
802100a0:	8021051c 	xori	zero,r16,33812
802100a4:	802106d8 	cmpnei	zero,r16,-31717
802100a8:	802106d8 	cmpnei	zero,r16,-31717
802100ac:	80210500 	call	88021050 <__reset+0x2001050>
802100b0:	802106d8 	cmpnei	zero,r16,-31717
802100b4:	802104c4 	addi	zero,r16,-31725
802100b8:	802102cc 	andi	zero,r16,33803
802100bc:	80210118 	cmpnei	zero,r16,-31740
802100c0:	80210630 	cmpltui	zero,r16,33816
802100c4:	802106d8 	cmpnei	zero,r16,-31717
802100c8:	802105e4 	muli	zero,r16,-31721
802100cc:	802106d8 	cmpnei	zero,r16,-31717
802100d0:	8021023c 	xorhi	zero,r16,33800
802100d4:	802106d8 	cmpnei	zero,r16,-31717
802100d8:	802106d8 	cmpnei	zero,r16,-31717
802100dc:	80210198 	cmpnei	zero,r16,-31738
802100e0:	dac02317 	ldw	r11,140(sp)
802100e4:	5ac00017 	ldw	r11,0(r11)
802100e8:	dac02415 	stw	r11,144(sp)
802100ec:	dac02317 	ldw	r11,140(sp)
802100f0:	58800104 	addi	r2,r11,4
802100f4:	dac02417 	ldw	r11,144(sp)
802100f8:	5802e90e 	bge	r11,zero,80210ca0 <___svfiprintf_internal_r+0xe84>
802100fc:	dac02417 	ldw	r11,144(sp)
80210100:	d8802315 	stw	r2,140(sp)
80210104:	02d7c83a 	sub	r11,zero,r11
80210108:	dac02415 	stw	r11,144(sp)
8021010c:	94800114 	ori	r18,r18,4
80210110:	98c00007 	ldb	r3,0(r19)
80210114:	003f9006 	br	8020ff58 <__reset+0xfa1eff58>
80210118:	00800c04 	movi	r2,48
8021011c:	dac02317 	ldw	r11,140(sp)
80210120:	d8801d05 	stb	r2,116(sp)
80210124:	00801e04 	movi	r2,120
80210128:	d8801d45 	stb	r2,117(sp)
8021012c:	d8001d85 	stb	zero,118(sp)
80210130:	58c00104 	addi	r3,r11,4
80210134:	5f000017 	ldw	fp,0(r11)
80210138:	0013883a 	mov	r9,zero
8021013c:	90800094 	ori	r2,r18,2
80210140:	80032b16 	blt	r16,zero,80210df0 <___svfiprintf_internal_r+0xfd4>
80210144:	00bfdfc4 	movi	r2,-129
80210148:	90a4703a 	and	r18,r18,r2
8021014c:	d8c02315 	stw	r3,140(sp)
80210150:	94800094 	ori	r18,r18,2
80210154:	e002dc26 	beq	fp,zero,80210cc8 <___svfiprintf_internal_r+0xeac>
80210158:	012008b4 	movhi	r4,32802
8021015c:	2133ee04 	addi	r4,r4,-12360
80210160:	0015883a 	mov	r10,zero
80210164:	d9002915 	stw	r4,164(sp)
80210168:	00002306 	br	802101f8 <___svfiprintf_internal_r+0x3dc>
8021016c:	94800054 	ori	r18,r18,1
80210170:	98c00007 	ldb	r3,0(r19)
80210174:	003f7806 	br	8020ff58 <__reset+0xfa1eff58>
80210178:	38803fcc 	andi	r2,r7,255
8021017c:	1080201c 	xori	r2,r2,128
80210180:	10bfe004 	addi	r2,r2,-128
80210184:	1002f31e 	bne	r2,zero,80210d54 <___svfiprintf_internal_r+0xf38>
80210188:	01000044 	movi	r4,1
8021018c:	01c00804 	movi	r7,32
80210190:	98c00007 	ldb	r3,0(r19)
80210194:	003f7006 	br	8020ff58 <__reset+0xfa1eff58>
80210198:	21003fcc 	andi	r4,r4,255
8021019c:	2003aa1e 	bne	r4,zero,80211048 <___svfiprintf_internal_r+0x122c>
802101a0:	00a008b4 	movhi	r2,32802
802101a4:	10b3ee04 	addi	r2,r2,-12360
802101a8:	d8802915 	stw	r2,164(sp)
802101ac:	9080080c 	andi	r2,r18,32
802101b0:	1000ba26 	beq	r2,zero,8021049c <___svfiprintf_internal_r+0x680>
802101b4:	dac02317 	ldw	r11,140(sp)
802101b8:	5f000017 	ldw	fp,0(r11)
802101bc:	5a400117 	ldw	r9,4(r11)
802101c0:	5ac00204 	addi	r11,r11,8
802101c4:	dac02315 	stw	r11,140(sp)
802101c8:	9080004c 	andi	r2,r18,1
802101cc:	10029026 	beq	r2,zero,80210c10 <___svfiprintf_internal_r+0xdf4>
802101d0:	e244b03a 	or	r2,fp,r9
802101d4:	1002d41e 	bne	r2,zero,80210d28 <___svfiprintf_internal_r+0xf0c>
802101d8:	d8001d85 	stb	zero,118(sp)
802101dc:	80030b16 	blt	r16,zero,80210e0c <___svfiprintf_internal_r+0xff0>
802101e0:	00bfdfc4 	movi	r2,-129
802101e4:	90a4703a 	and	r18,r18,r2
802101e8:	0015883a 	mov	r10,zero
802101ec:	80002426 	beq	r16,zero,80210280 <___svfiprintf_internal_r+0x464>
802101f0:	0039883a 	mov	fp,zero
802101f4:	0013883a 	mov	r9,zero
802101f8:	d9002917 	ldw	r4,164(sp)
802101fc:	dc401a04 	addi	r17,sp,104
80210200:	e08003cc 	andi	r2,fp,15
80210204:	4806973a 	slli	r3,r9,28
80210208:	2085883a 	add	r2,r4,r2
8021020c:	e038d13a 	srli	fp,fp,4
80210210:	10800003 	ldbu	r2,0(r2)
80210214:	4812d13a 	srli	r9,r9,4
80210218:	8c7fffc4 	addi	r17,r17,-1
8021021c:	1f38b03a 	or	fp,r3,fp
80210220:	88800005 	stb	r2,0(r17)
80210224:	e244b03a 	or	r2,fp,r9
80210228:	103ff51e 	bne	r2,zero,80210200 <__reset+0xfa1f0200>
8021022c:	dac01e17 	ldw	r11,120(sp)
80210230:	5c57c83a 	sub	r11,r11,r17
80210234:	dac02115 	stw	r11,132(sp)
80210238:	00001406 	br	8021028c <___svfiprintf_internal_r+0x470>
8021023c:	21003fcc 	andi	r4,r4,255
80210240:	2003741e 	bne	r4,zero,80211014 <___svfiprintf_internal_r+0x11f8>
80210244:	9080080c 	andi	r2,r18,32
80210248:	10014526 	beq	r2,zero,80210760 <___svfiprintf_internal_r+0x944>
8021024c:	dac02317 	ldw	r11,140(sp)
80210250:	d8001d85 	stb	zero,118(sp)
80210254:	58c00204 	addi	r3,r11,8
80210258:	5f000017 	ldw	fp,0(r11)
8021025c:	5a400117 	ldw	r9,4(r11)
80210260:	8002d916 	blt	r16,zero,80210dc8 <___svfiprintf_internal_r+0xfac>
80210264:	013fdfc4 	movi	r4,-129
80210268:	e244b03a 	or	r2,fp,r9
8021026c:	d8c02315 	stw	r3,140(sp)
80210270:	9124703a 	and	r18,r18,r4
80210274:	0015883a 	mov	r10,zero
80210278:	1000b91e 	bne	r2,zero,80210560 <___svfiprintf_internal_r+0x744>
8021027c:	8002e61e 	bne	r16,zero,80210e18 <___svfiprintf_internal_r+0xffc>
80210280:	0021883a 	mov	r16,zero
80210284:	d8002115 	stw	zero,132(sp)
80210288:	dc401a04 	addi	r17,sp,104
8021028c:	d8c02117 	ldw	r3,132(sp)
80210290:	dc002015 	stw	r16,128(sp)
80210294:	80c0010e 	bge	r16,r3,8021029c <___svfiprintf_internal_r+0x480>
80210298:	d8c02015 	stw	r3,128(sp)
8021029c:	52803fcc 	andi	r10,r10,255
802102a0:	5280201c 	xori	r10,r10,128
802102a4:	52bfe004 	addi	r10,r10,-128
802102a8:	50003c26 	beq	r10,zero,8021039c <___svfiprintf_internal_r+0x580>
802102ac:	dac02017 	ldw	r11,128(sp)
802102b0:	5ac00044 	addi	r11,r11,1
802102b4:	dac02015 	stw	r11,128(sp)
802102b8:	00003806 	br	8021039c <___svfiprintf_internal_r+0x580>
802102bc:	01000044 	movi	r4,1
802102c0:	01c00ac4 	movi	r7,43
802102c4:	98c00007 	ldb	r3,0(r19)
802102c8:	003f2306 	br	8020ff58 <__reset+0xfa1eff58>
802102cc:	21003fcc 	andi	r4,r4,255
802102d0:	2003481e 	bne	r4,zero,80210ff4 <___svfiprintf_internal_r+0x11d8>
802102d4:	9080080c 	andi	r2,r18,32
802102d8:	10013b26 	beq	r2,zero,802107c8 <___svfiprintf_internal_r+0x9ac>
802102dc:	dac02317 	ldw	r11,140(sp)
802102e0:	d8001d85 	stb	zero,118(sp)
802102e4:	58800204 	addi	r2,r11,8
802102e8:	5f000017 	ldw	fp,0(r11)
802102ec:	5a400117 	ldw	r9,4(r11)
802102f0:	8002a816 	blt	r16,zero,80210d94 <___svfiprintf_internal_r+0xf78>
802102f4:	013fdfc4 	movi	r4,-129
802102f8:	e246b03a 	or	r3,fp,r9
802102fc:	d8802315 	stw	r2,140(sp)
80210300:	9124703a 	and	r18,r18,r4
80210304:	18013c26 	beq	r3,zero,802107f8 <___svfiprintf_internal_r+0x9dc>
80210308:	0015883a 	mov	r10,zero
8021030c:	dc401a04 	addi	r17,sp,104
80210310:	e006d0fa 	srli	r3,fp,3
80210314:	4808977a 	slli	r4,r9,29
80210318:	4812d0fa 	srli	r9,r9,3
8021031c:	e70001cc 	andi	fp,fp,7
80210320:	e0800c04 	addi	r2,fp,48
80210324:	8c7fffc4 	addi	r17,r17,-1
80210328:	20f8b03a 	or	fp,r4,r3
8021032c:	88800005 	stb	r2,0(r17)
80210330:	e246b03a 	or	r3,fp,r9
80210334:	183ff61e 	bne	r3,zero,80210310 <__reset+0xfa1f0310>
80210338:	90c0004c 	andi	r3,r18,1
8021033c:	1800a526 	beq	r3,zero,802105d4 <___svfiprintf_internal_r+0x7b8>
80210340:	10803fcc 	andi	r2,r2,255
80210344:	1080201c 	xori	r2,r2,128
80210348:	10bfe004 	addi	r2,r2,-128
8021034c:	00c00c04 	movi	r3,48
80210350:	10ffb626 	beq	r2,r3,8021022c <__reset+0xfa1f022c>
80210354:	88ffffc5 	stb	r3,-1(r17)
80210358:	d8c01e17 	ldw	r3,120(sp)
8021035c:	88bfffc4 	addi	r2,r17,-1
80210360:	1023883a 	mov	r17,r2
80210364:	1887c83a 	sub	r3,r3,r2
80210368:	d8c02115 	stw	r3,132(sp)
8021036c:	003fc706 	br	8021028c <__reset+0xfa1f028c>
80210370:	dac02317 	ldw	r11,140(sp)
80210374:	00c00044 	movi	r3,1
80210378:	d8c02015 	stw	r3,128(sp)
8021037c:	58800017 	ldw	r2,0(r11)
80210380:	5ac00104 	addi	r11,r11,4
80210384:	d8001d85 	stb	zero,118(sp)
80210388:	d8801005 	stb	r2,64(sp)
8021038c:	dac02315 	stw	r11,140(sp)
80210390:	d8c02115 	stw	r3,132(sp)
80210394:	dc401004 	addi	r17,sp,64
80210398:	0021883a 	mov	r16,zero
8021039c:	90c0008c 	andi	r3,r18,2
802103a0:	d8c02215 	stw	r3,136(sp)
802103a4:	18000326 	beq	r3,zero,802103b4 <___svfiprintf_internal_r+0x598>
802103a8:	dac02017 	ldw	r11,128(sp)
802103ac:	5ac00084 	addi	r11,r11,2
802103b0:	dac02015 	stw	r11,128(sp)
802103b4:	90c0210c 	andi	r3,r18,132
802103b8:	d8c02615 	stw	r3,152(sp)
802103bc:	1801131e 	bne	r3,zero,8021080c <___svfiprintf_internal_r+0x9f0>
802103c0:	dac02417 	ldw	r11,144(sp)
802103c4:	d8c02017 	ldw	r3,128(sp)
802103c8:	58f9c83a 	sub	fp,r11,r3
802103cc:	07010f0e 	bge	zero,fp,8021080c <___svfiprintf_internal_r+0x9f0>
802103d0:	02400404 	movi	r9,16
802103d4:	d8c01c17 	ldw	r3,112(sp)
802103d8:	d8801b17 	ldw	r2,108(sp)
802103dc:	4f02d60e 	bge	r9,fp,80210f38 <___svfiprintf_internal_r+0x111c>
802103e0:	016008b4 	movhi	r5,32802
802103e4:	29745a04 	addi	r5,r5,-11928
802103e8:	d9402815 	stw	r5,160(sp)
802103ec:	028001c4 	movi	r10,7
802103f0:	00000306 	br	80210400 <___svfiprintf_internal_r+0x5e4>
802103f4:	e73ffc04 	addi	fp,fp,-16
802103f8:	42000204 	addi	r8,r8,8
802103fc:	4f00150e 	bge	r9,fp,80210454 <___svfiprintf_internal_r+0x638>
80210400:	18c00404 	addi	r3,r3,16
80210404:	10800044 	addi	r2,r2,1
80210408:	45800015 	stw	r22,0(r8)
8021040c:	42400115 	stw	r9,4(r8)
80210410:	d8c01c15 	stw	r3,112(sp)
80210414:	d8801b15 	stw	r2,108(sp)
80210418:	50bff60e 	bge	r10,r2,802103f4 <__reset+0xfa1f03f4>
8021041c:	d9801a04 	addi	r6,sp,104
80210420:	b80b883a 	mov	r5,r23
80210424:	a809883a 	mov	r4,r21
80210428:	da402c15 	stw	r9,176(sp)
8021042c:	da802d15 	stw	r10,180(sp)
80210430:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210434:	da402c17 	ldw	r9,176(sp)
80210438:	da802d17 	ldw	r10,180(sp)
8021043c:	1001851e 	bne	r2,zero,80210a54 <___svfiprintf_internal_r+0xc38>
80210440:	e73ffc04 	addi	fp,fp,-16
80210444:	d8c01c17 	ldw	r3,112(sp)
80210448:	d8801b17 	ldw	r2,108(sp)
8021044c:	d811883a 	mov	r8,sp
80210450:	4f3feb16 	blt	r9,fp,80210400 <__reset+0xfa1f0400>
80210454:	dac02817 	ldw	r11,160(sp)
80210458:	e0c7883a 	add	r3,fp,r3
8021045c:	10800044 	addi	r2,r2,1
80210460:	42c00015 	stw	r11,0(r8)
80210464:	47000115 	stw	fp,4(r8)
80210468:	d8c01c15 	stw	r3,112(sp)
8021046c:	d8801b15 	stw	r2,108(sp)
80210470:	010001c4 	movi	r4,7
80210474:	2081ee16 	blt	r4,r2,80210c30 <___svfiprintf_internal_r+0xe14>
80210478:	42000204 	addi	r8,r8,8
8021047c:	0000e506 	br	80210814 <___svfiprintf_internal_r+0x9f8>
80210480:	21003fcc 	andi	r4,r4,255
80210484:	2002dd1e 	bne	r4,zero,80210ffc <___svfiprintf_internal_r+0x11e0>
80210488:	00a008b4 	movhi	r2,32802
8021048c:	10b3e904 	addi	r2,r2,-12380
80210490:	d8802915 	stw	r2,164(sp)
80210494:	9080080c 	andi	r2,r18,32
80210498:	103f461e 	bne	r2,zero,802101b4 <__reset+0xfa1f01b4>
8021049c:	9080040c 	andi	r2,r18,16
802104a0:	10022e1e 	bne	r2,zero,80210d5c <___svfiprintf_internal_r+0xf40>
802104a4:	9080100c 	andi	r2,r18,64
802104a8:	dac02317 	ldw	r11,140(sp)
802104ac:	10027326 	beq	r2,zero,80210e7c <___svfiprintf_internal_r+0x1060>
802104b0:	5f00000b 	ldhu	fp,0(r11)
802104b4:	5ac00104 	addi	r11,r11,4
802104b8:	0013883a 	mov	r9,zero
802104bc:	dac02315 	stw	r11,140(sp)
802104c0:	003f4106 	br	802101c8 <__reset+0xfa1f01c8>
802104c4:	21003fcc 	andi	r4,r4,255
802104c8:	2002e11e 	bne	r4,zero,80211050 <___svfiprintf_internal_r+0x1234>
802104cc:	9080080c 	andi	r2,r18,32
802104d0:	1002011e 	bne	r2,zero,80210cd8 <___svfiprintf_internal_r+0xebc>
802104d4:	9080040c 	andi	r2,r18,16
802104d8:	10023e1e 	bne	r2,zero,80210dd4 <___svfiprintf_internal_r+0xfb8>
802104dc:	9480100c 	andi	r18,r18,64
802104e0:	90023c26 	beq	r18,zero,80210dd4 <___svfiprintf_internal_r+0xfb8>
802104e4:	dac02317 	ldw	r11,140(sp)
802104e8:	58800017 	ldw	r2,0(r11)
802104ec:	5ac00104 	addi	r11,r11,4
802104f0:	dac02315 	stw	r11,140(sp)
802104f4:	dac02517 	ldw	r11,148(sp)
802104f8:	12c0000d 	sth	r11,0(r2)
802104fc:	003e6e06 	br	8020feb8 <__reset+0xfa1efeb8>
80210500:	98c00007 	ldb	r3,0(r19)
80210504:	1a422926 	beq	r3,r9,80210dac <___svfiprintf_internal_r+0xf90>
80210508:	94800414 	ori	r18,r18,16
8021050c:	003e9206 	br	8020ff58 <__reset+0xfa1eff58>
80210510:	94801014 	ori	r18,r18,64
80210514:	98c00007 	ldb	r3,0(r19)
80210518:	003e8f06 	br	8020ff58 <__reset+0xfa1eff58>
8021051c:	21003fcc 	andi	r4,r4,255
80210520:	2002c71e 	bne	r4,zero,80211040 <___svfiprintf_internal_r+0x1224>
80210524:	9080080c 	andi	r2,r18,32
80210528:	10004926 	beq	r2,zero,80210650 <___svfiprintf_internal_r+0x834>
8021052c:	dac02317 	ldw	r11,140(sp)
80210530:	58800117 	ldw	r2,4(r11)
80210534:	5f000017 	ldw	fp,0(r11)
80210538:	5ac00204 	addi	r11,r11,8
8021053c:	dac02315 	stw	r11,140(sp)
80210540:	1013883a 	mov	r9,r2
80210544:	10004b16 	blt	r2,zero,80210674 <___svfiprintf_internal_r+0x858>
80210548:	da801d83 	ldbu	r10,118(sp)
8021054c:	8001cb16 	blt	r16,zero,80210c7c <___svfiprintf_internal_r+0xe60>
80210550:	00ffdfc4 	movi	r3,-129
80210554:	e244b03a 	or	r2,fp,r9
80210558:	90e4703a 	and	r18,r18,r3
8021055c:	103f4726 	beq	r2,zero,8021027c <__reset+0xfa1f027c>
80210560:	48008c26 	beq	r9,zero,80210794 <___svfiprintf_internal_r+0x978>
80210564:	dc802015 	stw	r18,128(sp)
80210568:	dc002115 	stw	r16,132(sp)
8021056c:	dc401a04 	addi	r17,sp,104
80210570:	e021883a 	mov	r16,fp
80210574:	da002215 	stw	r8,136(sp)
80210578:	5039883a 	mov	fp,r10
8021057c:	4825883a 	mov	r18,r9
80210580:	8009883a 	mov	r4,r16
80210584:	900b883a 	mov	r5,r18
80210588:	01800284 	movi	r6,10
8021058c:	000f883a 	mov	r7,zero
80210590:	021354c0 	call	8021354c <__umoddi3>
80210594:	10800c04 	addi	r2,r2,48
80210598:	8c7fffc4 	addi	r17,r17,-1
8021059c:	8009883a 	mov	r4,r16
802105a0:	900b883a 	mov	r5,r18
802105a4:	88800005 	stb	r2,0(r17)
802105a8:	01800284 	movi	r6,10
802105ac:	000f883a 	mov	r7,zero
802105b0:	0212fd40 	call	80212fd4 <__udivdi3>
802105b4:	1021883a 	mov	r16,r2
802105b8:	10c4b03a 	or	r2,r2,r3
802105bc:	1825883a 	mov	r18,r3
802105c0:	103fef1e 	bne	r2,zero,80210580 <__reset+0xfa1f0580>
802105c4:	dc802017 	ldw	r18,128(sp)
802105c8:	dc002117 	ldw	r16,132(sp)
802105cc:	da002217 	ldw	r8,136(sp)
802105d0:	e015883a 	mov	r10,fp
802105d4:	d8c01e17 	ldw	r3,120(sp)
802105d8:	1c47c83a 	sub	r3,r3,r17
802105dc:	d8c02115 	stw	r3,132(sp)
802105e0:	003f2a06 	br	8021028c <__reset+0xfa1f028c>
802105e4:	dac02317 	ldw	r11,140(sp)
802105e8:	d8001d85 	stb	zero,118(sp)
802105ec:	5c400017 	ldw	r17,0(r11)
802105f0:	5f000104 	addi	fp,r11,4
802105f4:	88022f26 	beq	r17,zero,80210eb4 <___svfiprintf_internal_r+0x1098>
802105f8:	80022516 	blt	r16,zero,80210e90 <___svfiprintf_internal_r+0x1074>
802105fc:	800d883a 	mov	r6,r16
80210600:	000b883a 	mov	r5,zero
80210604:	8809883a 	mov	r4,r17
80210608:	da002c15 	stw	r8,176(sp)
8021060c:	020e0a40 	call	8020e0a4 <memchr>
80210610:	da002c17 	ldw	r8,176(sp)
80210614:	10026426 	beq	r2,zero,80210fa8 <___svfiprintf_internal_r+0x118c>
80210618:	1445c83a 	sub	r2,r2,r17
8021061c:	d8802115 	stw	r2,132(sp)
80210620:	da801d83 	ldbu	r10,118(sp)
80210624:	df002315 	stw	fp,140(sp)
80210628:	0021883a 	mov	r16,zero
8021062c:	003f1706 	br	8021028c <__reset+0xfa1f028c>
80210630:	94800814 	ori	r18,r18,32
80210634:	98c00007 	ldb	r3,0(r19)
80210638:	003e4706 	br	8020ff58 <__reset+0xfa1eff58>
8021063c:	21003fcc 	andi	r4,r4,255
80210640:	2002701e 	bne	r4,zero,80211004 <___svfiprintf_internal_r+0x11e8>
80210644:	94800414 	ori	r18,r18,16
80210648:	9080080c 	andi	r2,r18,32
8021064c:	103fb71e 	bne	r2,zero,8021052c <__reset+0xfa1f052c>
80210650:	9080040c 	andi	r2,r18,16
80210654:	1001ab26 	beq	r2,zero,80210d04 <___svfiprintf_internal_r+0xee8>
80210658:	dac02317 	ldw	r11,140(sp)
8021065c:	5f000017 	ldw	fp,0(r11)
80210660:	5ac00104 	addi	r11,r11,4
80210664:	dac02315 	stw	r11,140(sp)
80210668:	e013d7fa 	srai	r9,fp,31
8021066c:	4805883a 	mov	r2,r9
80210670:	103fb50e 	bge	r2,zero,80210548 <__reset+0xfa1f0548>
80210674:	0739c83a 	sub	fp,zero,fp
80210678:	02800b44 	movi	r10,45
8021067c:	e004c03a 	cmpne	r2,fp,zero
80210680:	0253c83a 	sub	r9,zero,r9
80210684:	da801d85 	stb	r10,118(sp)
80210688:	4893c83a 	sub	r9,r9,r2
8021068c:	80023016 	blt	r16,zero,80210f50 <___svfiprintf_internal_r+0x1134>
80210690:	00bfdfc4 	movi	r2,-129
80210694:	90a4703a 	and	r18,r18,r2
80210698:	483fb21e 	bne	r9,zero,80210564 <__reset+0xfa1f0564>
8021069c:	00003d06 	br	80210794 <___svfiprintf_internal_r+0x978>
802106a0:	9817883a 	mov	r11,r19
802106a4:	d8002415 	stw	zero,144(sp)
802106a8:	18bff404 	addi	r2,r3,-48
802106ac:	0019883a 	mov	r12,zero
802106b0:	58c00007 	ldb	r3,0(r11)
802106b4:	630002a4 	muli	r12,r12,10
802106b8:	9cc00044 	addi	r19,r19,1
802106bc:	9817883a 	mov	r11,r19
802106c0:	1319883a 	add	r12,r2,r12
802106c4:	18bff404 	addi	r2,r3,-48
802106c8:	30bff92e 	bgeu	r6,r2,802106b0 <__reset+0xfa1f06b0>
802106cc:	db002415 	stw	r12,144(sp)
802106d0:	18bff804 	addi	r2,r3,-32
802106d4:	28be232e 	bgeu	r5,r2,8020ff64 <__reset+0xfa1eff64>
802106d8:	21003fcc 	andi	r4,r4,255
802106dc:	20024b1e 	bne	r4,zero,8021100c <___svfiprintf_internal_r+0x11f0>
802106e0:	1800d626 	beq	r3,zero,80210a3c <___svfiprintf_internal_r+0xc20>
802106e4:	02c00044 	movi	r11,1
802106e8:	dac02015 	stw	r11,128(sp)
802106ec:	d8c01005 	stb	r3,64(sp)
802106f0:	d8001d85 	stb	zero,118(sp)
802106f4:	dac02115 	stw	r11,132(sp)
802106f8:	dc401004 	addi	r17,sp,64
802106fc:	003f2606 	br	80210398 <__reset+0xfa1f0398>
80210700:	94802014 	ori	r18,r18,128
80210704:	98c00007 	ldb	r3,0(r19)
80210708:	003e1306 	br	8020ff58 <__reset+0xfa1eff58>
8021070c:	98c00007 	ldb	r3,0(r19)
80210710:	9ac00044 	addi	r11,r19,1
80210714:	1a822b26 	beq	r3,r10,80210fc4 <___svfiprintf_internal_r+0x11a8>
80210718:	18bff404 	addi	r2,r3,-48
8021071c:	0021883a 	mov	r16,zero
80210720:	30821e36 	bltu	r6,r2,80210f9c <___svfiprintf_internal_r+0x1180>
80210724:	58c00007 	ldb	r3,0(r11)
80210728:	840002a4 	muli	r16,r16,10
8021072c:	5cc00044 	addi	r19,r11,1
80210730:	9817883a 	mov	r11,r19
80210734:	80a1883a 	add	r16,r16,r2
80210738:	18bff404 	addi	r2,r3,-48
8021073c:	30bff92e 	bgeu	r6,r2,80210724 <__reset+0xfa1f0724>
80210740:	803e060e 	bge	r16,zero,8020ff5c <__reset+0xfa1eff5c>
80210744:	043fffc4 	movi	r16,-1
80210748:	003e0406 	br	8020ff5c <__reset+0xfa1eff5c>
8021074c:	21003fcc 	andi	r4,r4,255
80210750:	2002371e 	bne	r4,zero,80211030 <___svfiprintf_internal_r+0x1214>
80210754:	94800414 	ori	r18,r18,16
80210758:	9080080c 	andi	r2,r18,32
8021075c:	103ebb1e 	bne	r2,zero,8021024c <__reset+0xfa1f024c>
80210760:	9080040c 	andi	r2,r18,16
80210764:	10013b26 	beq	r2,zero,80210c54 <___svfiprintf_internal_r+0xe38>
80210768:	dac02317 	ldw	r11,140(sp)
8021076c:	d8001d85 	stb	zero,118(sp)
80210770:	0013883a 	mov	r9,zero
80210774:	58800104 	addi	r2,r11,4
80210778:	5f000017 	ldw	fp,0(r11)
8021077c:	80013d16 	blt	r16,zero,80210c74 <___svfiprintf_internal_r+0xe58>
80210780:	00ffdfc4 	movi	r3,-129
80210784:	d8802315 	stw	r2,140(sp)
80210788:	90e4703a 	and	r18,r18,r3
8021078c:	0015883a 	mov	r10,zero
80210790:	e03eba26 	beq	fp,zero,8021027c <__reset+0xfa1f027c>
80210794:	00800244 	movi	r2,9
80210798:	173f7236 	bltu	r2,fp,80210564 <__reset+0xfa1f0564>
8021079c:	dac02b17 	ldw	r11,172(sp)
802107a0:	e7000c04 	addi	fp,fp,48
802107a4:	df0019c5 	stb	fp,103(sp)
802107a8:	dac02115 	stw	r11,132(sp)
802107ac:	dc4019c4 	addi	r17,sp,103
802107b0:	003eb606 	br	8021028c <__reset+0xfa1f028c>
802107b4:	21003fcc 	andi	r4,r4,255
802107b8:	20021f1e 	bne	r4,zero,80211038 <___svfiprintf_internal_r+0x121c>
802107bc:	94800414 	ori	r18,r18,16
802107c0:	9080080c 	andi	r2,r18,32
802107c4:	103ec51e 	bne	r2,zero,802102dc <__reset+0xfa1f02dc>
802107c8:	9080040c 	andi	r2,r18,16
802107cc:	10016926 	beq	r2,zero,80210d74 <___svfiprintf_internal_r+0xf58>
802107d0:	dac02317 	ldw	r11,140(sp)
802107d4:	d8001d85 	stb	zero,118(sp)
802107d8:	0013883a 	mov	r9,zero
802107dc:	58800104 	addi	r2,r11,4
802107e0:	5f000017 	ldw	fp,0(r11)
802107e4:	80016b16 	blt	r16,zero,80210d94 <___svfiprintf_internal_r+0xf78>
802107e8:	00ffdfc4 	movi	r3,-129
802107ec:	d8802315 	stw	r2,140(sp)
802107f0:	90e4703a 	and	r18,r18,r3
802107f4:	e03ec41e 	bne	fp,zero,80210308 <__reset+0xfa1f0308>
802107f8:	0015883a 	mov	r10,zero
802107fc:	8001c226 	beq	r16,zero,80210f08 <___svfiprintf_internal_r+0x10ec>
80210800:	0039883a 	mov	fp,zero
80210804:	0013883a 	mov	r9,zero
80210808:	003ec006 	br	8021030c <__reset+0xfa1f030c>
8021080c:	d8c01c17 	ldw	r3,112(sp)
80210810:	d8801b17 	ldw	r2,108(sp)
80210814:	d9001d87 	ldb	r4,118(sp)
80210818:	20000b26 	beq	r4,zero,80210848 <___svfiprintf_internal_r+0xa2c>
8021081c:	d9001d84 	addi	r4,sp,118
80210820:	18c00044 	addi	r3,r3,1
80210824:	10800044 	addi	r2,r2,1
80210828:	41000015 	stw	r4,0(r8)
8021082c:	01000044 	movi	r4,1
80210830:	41000115 	stw	r4,4(r8)
80210834:	d8c01c15 	stw	r3,112(sp)
80210838:	d8801b15 	stw	r2,108(sp)
8021083c:	010001c4 	movi	r4,7
80210840:	2080e116 	blt	r4,r2,80210bc8 <___svfiprintf_internal_r+0xdac>
80210844:	42000204 	addi	r8,r8,8
80210848:	dac02217 	ldw	r11,136(sp)
8021084c:	58000b26 	beq	r11,zero,8021087c <___svfiprintf_internal_r+0xa60>
80210850:	d9001d04 	addi	r4,sp,116
80210854:	18c00084 	addi	r3,r3,2
80210858:	10800044 	addi	r2,r2,1
8021085c:	41000015 	stw	r4,0(r8)
80210860:	01000084 	movi	r4,2
80210864:	41000115 	stw	r4,4(r8)
80210868:	d8c01c15 	stw	r3,112(sp)
8021086c:	d8801b15 	stw	r2,108(sp)
80210870:	010001c4 	movi	r4,7
80210874:	2080dd16 	blt	r4,r2,80210bec <___svfiprintf_internal_r+0xdd0>
80210878:	42000204 	addi	r8,r8,8
8021087c:	dac02617 	ldw	r11,152(sp)
80210880:	01002004 	movi	r4,128
80210884:	59008426 	beq	r11,r4,80210a98 <___svfiprintf_internal_r+0xc7c>
80210888:	dac02117 	ldw	r11,132(sp)
8021088c:	82e1c83a 	sub	r16,r16,r11
80210890:	0400270e 	bge	zero,r16,80210930 <___svfiprintf_internal_r+0xb14>
80210894:	01c00404 	movi	r7,16
80210898:	3c016a0e 	bge	r7,r16,80210e44 <___svfiprintf_internal_r+0x1028>
8021089c:	016008b4 	movhi	r5,32802
802108a0:	29745604 	addi	r5,r5,-11944
802108a4:	d9402215 	stw	r5,136(sp)
802108a8:	070001c4 	movi	fp,7
802108ac:	00000306 	br	802108bc <___svfiprintf_internal_r+0xaa0>
802108b0:	843ffc04 	addi	r16,r16,-16
802108b4:	42000204 	addi	r8,r8,8
802108b8:	3c00130e 	bge	r7,r16,80210908 <___svfiprintf_internal_r+0xaec>
802108bc:	18c00404 	addi	r3,r3,16
802108c0:	10800044 	addi	r2,r2,1
802108c4:	45000015 	stw	r20,0(r8)
802108c8:	41c00115 	stw	r7,4(r8)
802108cc:	d8c01c15 	stw	r3,112(sp)
802108d0:	d8801b15 	stw	r2,108(sp)
802108d4:	e0bff60e 	bge	fp,r2,802108b0 <__reset+0xfa1f08b0>
802108d8:	d9801a04 	addi	r6,sp,104
802108dc:	b80b883a 	mov	r5,r23
802108e0:	a809883a 	mov	r4,r21
802108e4:	d9c02c15 	stw	r7,176(sp)
802108e8:	020fc4c0 	call	8020fc4c <__ssprint_r>
802108ec:	d9c02c17 	ldw	r7,176(sp)
802108f0:	1000581e 	bne	r2,zero,80210a54 <___svfiprintf_internal_r+0xc38>
802108f4:	843ffc04 	addi	r16,r16,-16
802108f8:	d8c01c17 	ldw	r3,112(sp)
802108fc:	d8801b17 	ldw	r2,108(sp)
80210900:	d811883a 	mov	r8,sp
80210904:	3c3fed16 	blt	r7,r16,802108bc <__reset+0xfa1f08bc>
80210908:	dac02217 	ldw	r11,136(sp)
8021090c:	1c07883a 	add	r3,r3,r16
80210910:	10800044 	addi	r2,r2,1
80210914:	42c00015 	stw	r11,0(r8)
80210918:	44000115 	stw	r16,4(r8)
8021091c:	d8c01c15 	stw	r3,112(sp)
80210920:	d8801b15 	stw	r2,108(sp)
80210924:	010001c4 	movi	r4,7
80210928:	20809e16 	blt	r4,r2,80210ba4 <___svfiprintf_internal_r+0xd88>
8021092c:	42000204 	addi	r8,r8,8
80210930:	dac02117 	ldw	r11,132(sp)
80210934:	10800044 	addi	r2,r2,1
80210938:	44400015 	stw	r17,0(r8)
8021093c:	58c7883a 	add	r3,r11,r3
80210940:	42c00115 	stw	r11,4(r8)
80210944:	d8c01c15 	stw	r3,112(sp)
80210948:	d8801b15 	stw	r2,108(sp)
8021094c:	010001c4 	movi	r4,7
80210950:	20807f16 	blt	r4,r2,80210b50 <___svfiprintf_internal_r+0xd34>
80210954:	42000204 	addi	r8,r8,8
80210958:	9480010c 	andi	r18,r18,4
8021095c:	90002926 	beq	r18,zero,80210a04 <___svfiprintf_internal_r+0xbe8>
80210960:	dac02417 	ldw	r11,144(sp)
80210964:	d8802017 	ldw	r2,128(sp)
80210968:	58a1c83a 	sub	r16,r11,r2
8021096c:	0400250e 	bge	zero,r16,80210a04 <___svfiprintf_internal_r+0xbe8>
80210970:	04400404 	movi	r17,16
80210974:	d8801b17 	ldw	r2,108(sp)
80210978:	8c017c0e 	bge	r17,r16,80210f6c <___svfiprintf_internal_r+0x1150>
8021097c:	016008b4 	movhi	r5,32802
80210980:	29745a04 	addi	r5,r5,-11928
80210984:	d9402815 	stw	r5,160(sp)
80210988:	048001c4 	movi	r18,7
8021098c:	00000306 	br	8021099c <___svfiprintf_internal_r+0xb80>
80210990:	843ffc04 	addi	r16,r16,-16
80210994:	42000204 	addi	r8,r8,8
80210998:	8c00110e 	bge	r17,r16,802109e0 <___svfiprintf_internal_r+0xbc4>
8021099c:	18c00404 	addi	r3,r3,16
802109a0:	10800044 	addi	r2,r2,1
802109a4:	45800015 	stw	r22,0(r8)
802109a8:	44400115 	stw	r17,4(r8)
802109ac:	d8c01c15 	stw	r3,112(sp)
802109b0:	d8801b15 	stw	r2,108(sp)
802109b4:	90bff60e 	bge	r18,r2,80210990 <__reset+0xfa1f0990>
802109b8:	d9801a04 	addi	r6,sp,104
802109bc:	b80b883a 	mov	r5,r23
802109c0:	a809883a 	mov	r4,r21
802109c4:	020fc4c0 	call	8020fc4c <__ssprint_r>
802109c8:	1000221e 	bne	r2,zero,80210a54 <___svfiprintf_internal_r+0xc38>
802109cc:	843ffc04 	addi	r16,r16,-16
802109d0:	d8c01c17 	ldw	r3,112(sp)
802109d4:	d8801b17 	ldw	r2,108(sp)
802109d8:	d811883a 	mov	r8,sp
802109dc:	8c3fef16 	blt	r17,r16,8021099c <__reset+0xfa1f099c>
802109e0:	dac02817 	ldw	r11,160(sp)
802109e4:	1c07883a 	add	r3,r3,r16
802109e8:	10800044 	addi	r2,r2,1
802109ec:	42c00015 	stw	r11,0(r8)
802109f0:	44000115 	stw	r16,4(r8)
802109f4:	d8c01c15 	stw	r3,112(sp)
802109f8:	d8801b15 	stw	r2,108(sp)
802109fc:	010001c4 	movi	r4,7
80210a00:	2080aa16 	blt	r4,r2,80210cac <___svfiprintf_internal_r+0xe90>
80210a04:	d8802417 	ldw	r2,144(sp)
80210a08:	dac02017 	ldw	r11,128(sp)
80210a0c:	12c0010e 	bge	r2,r11,80210a14 <___svfiprintf_internal_r+0xbf8>
80210a10:	5805883a 	mov	r2,r11
80210a14:	dac02517 	ldw	r11,148(sp)
80210a18:	5897883a 	add	r11,r11,r2
80210a1c:	dac02515 	stw	r11,148(sp)
80210a20:	1800531e 	bne	r3,zero,80210b70 <___svfiprintf_internal_r+0xd54>
80210a24:	98800007 	ldb	r2,0(r19)
80210a28:	d8001b15 	stw	zero,108(sp)
80210a2c:	d811883a 	mov	r8,sp
80210a30:	103d231e 	bne	r2,zero,8020fec0 <__reset+0xfa1efec0>
80210a34:	9823883a 	mov	r17,r19
80210a38:	003d3906 	br	8020ff20 <__reset+0xfa1eff20>
80210a3c:	d8801c17 	ldw	r2,112(sp)
80210a40:	10000426 	beq	r2,zero,80210a54 <___svfiprintf_internal_r+0xc38>
80210a44:	d9402717 	ldw	r5,156(sp)
80210a48:	d9002a17 	ldw	r4,168(sp)
80210a4c:	d9801a04 	addi	r6,sp,104
80210a50:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210a54:	dac02717 	ldw	r11,156(sp)
80210a58:	d8802517 	ldw	r2,148(sp)
80210a5c:	58c0030b 	ldhu	r3,12(r11)
80210a60:	18c0100c 	andi	r3,r3,64
80210a64:	1801381e 	bne	r3,zero,80210f48 <___svfiprintf_internal_r+0x112c>
80210a68:	dfc03717 	ldw	ra,220(sp)
80210a6c:	df003617 	ldw	fp,216(sp)
80210a70:	ddc03517 	ldw	r23,212(sp)
80210a74:	dd803417 	ldw	r22,208(sp)
80210a78:	dd403317 	ldw	r21,204(sp)
80210a7c:	dd003217 	ldw	r20,200(sp)
80210a80:	dcc03117 	ldw	r19,196(sp)
80210a84:	dc803017 	ldw	r18,192(sp)
80210a88:	dc402f17 	ldw	r17,188(sp)
80210a8c:	dc002e17 	ldw	r16,184(sp)
80210a90:	dec03804 	addi	sp,sp,224
80210a94:	f800283a 	ret
80210a98:	dac02417 	ldw	r11,144(sp)
80210a9c:	d9002017 	ldw	r4,128(sp)
80210aa0:	5939c83a 	sub	fp,r11,r4
80210aa4:	073f780e 	bge	zero,fp,80210888 <__reset+0xfa1f0888>
80210aa8:	02400404 	movi	r9,16
80210aac:	4f01370e 	bge	r9,fp,80210f8c <___svfiprintf_internal_r+0x1170>
80210ab0:	02e008b4 	movhi	r11,32802
80210ab4:	5af45604 	addi	r11,r11,-11944
80210ab8:	dac02215 	stw	r11,136(sp)
80210abc:	028001c4 	movi	r10,7
80210ac0:	00000306 	br	80210ad0 <___svfiprintf_internal_r+0xcb4>
80210ac4:	e73ffc04 	addi	fp,fp,-16
80210ac8:	42000204 	addi	r8,r8,8
80210acc:	4f00150e 	bge	r9,fp,80210b24 <___svfiprintf_internal_r+0xd08>
80210ad0:	18c00404 	addi	r3,r3,16
80210ad4:	10800044 	addi	r2,r2,1
80210ad8:	45000015 	stw	r20,0(r8)
80210adc:	42400115 	stw	r9,4(r8)
80210ae0:	d8c01c15 	stw	r3,112(sp)
80210ae4:	d8801b15 	stw	r2,108(sp)
80210ae8:	50bff60e 	bge	r10,r2,80210ac4 <__reset+0xfa1f0ac4>
80210aec:	d9801a04 	addi	r6,sp,104
80210af0:	b80b883a 	mov	r5,r23
80210af4:	a809883a 	mov	r4,r21
80210af8:	da402c15 	stw	r9,176(sp)
80210afc:	da802d15 	stw	r10,180(sp)
80210b00:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210b04:	da402c17 	ldw	r9,176(sp)
80210b08:	da802d17 	ldw	r10,180(sp)
80210b0c:	103fd11e 	bne	r2,zero,80210a54 <__reset+0xfa1f0a54>
80210b10:	e73ffc04 	addi	fp,fp,-16
80210b14:	d8c01c17 	ldw	r3,112(sp)
80210b18:	d8801b17 	ldw	r2,108(sp)
80210b1c:	d811883a 	mov	r8,sp
80210b20:	4f3feb16 	blt	r9,fp,80210ad0 <__reset+0xfa1f0ad0>
80210b24:	dac02217 	ldw	r11,136(sp)
80210b28:	1f07883a 	add	r3,r3,fp
80210b2c:	10800044 	addi	r2,r2,1
80210b30:	42c00015 	stw	r11,0(r8)
80210b34:	47000115 	stw	fp,4(r8)
80210b38:	d8c01c15 	stw	r3,112(sp)
80210b3c:	d8801b15 	stw	r2,108(sp)
80210b40:	010001c4 	movi	r4,7
80210b44:	2080b616 	blt	r4,r2,80210e20 <___svfiprintf_internal_r+0x1004>
80210b48:	42000204 	addi	r8,r8,8
80210b4c:	003f4e06 	br	80210888 <__reset+0xfa1f0888>
80210b50:	d9801a04 	addi	r6,sp,104
80210b54:	b80b883a 	mov	r5,r23
80210b58:	a809883a 	mov	r4,r21
80210b5c:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210b60:	103fbc1e 	bne	r2,zero,80210a54 <__reset+0xfa1f0a54>
80210b64:	d8c01c17 	ldw	r3,112(sp)
80210b68:	d811883a 	mov	r8,sp
80210b6c:	003f7a06 	br	80210958 <__reset+0xfa1f0958>
80210b70:	d9801a04 	addi	r6,sp,104
80210b74:	b80b883a 	mov	r5,r23
80210b78:	a809883a 	mov	r4,r21
80210b7c:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210b80:	103fa826 	beq	r2,zero,80210a24 <__reset+0xfa1f0a24>
80210b84:	003fb306 	br	80210a54 <__reset+0xfa1f0a54>
80210b88:	d9801a04 	addi	r6,sp,104
80210b8c:	b80b883a 	mov	r5,r23
80210b90:	a809883a 	mov	r4,r21
80210b94:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210b98:	103fae1e 	bne	r2,zero,80210a54 <__reset+0xfa1f0a54>
80210b9c:	d811883a 	mov	r8,sp
80210ba0:	003cdc06 	br	8020ff14 <__reset+0xfa1eff14>
80210ba4:	d9801a04 	addi	r6,sp,104
80210ba8:	b80b883a 	mov	r5,r23
80210bac:	a809883a 	mov	r4,r21
80210bb0:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210bb4:	103fa71e 	bne	r2,zero,80210a54 <__reset+0xfa1f0a54>
80210bb8:	d8c01c17 	ldw	r3,112(sp)
80210bbc:	d8801b17 	ldw	r2,108(sp)
80210bc0:	d811883a 	mov	r8,sp
80210bc4:	003f5a06 	br	80210930 <__reset+0xfa1f0930>
80210bc8:	d9801a04 	addi	r6,sp,104
80210bcc:	b80b883a 	mov	r5,r23
80210bd0:	a809883a 	mov	r4,r21
80210bd4:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210bd8:	103f9e1e 	bne	r2,zero,80210a54 <__reset+0xfa1f0a54>
80210bdc:	d8c01c17 	ldw	r3,112(sp)
80210be0:	d8801b17 	ldw	r2,108(sp)
80210be4:	d811883a 	mov	r8,sp
80210be8:	003f1706 	br	80210848 <__reset+0xfa1f0848>
80210bec:	d9801a04 	addi	r6,sp,104
80210bf0:	b80b883a 	mov	r5,r23
80210bf4:	a809883a 	mov	r4,r21
80210bf8:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210bfc:	103f951e 	bne	r2,zero,80210a54 <__reset+0xfa1f0a54>
80210c00:	d8c01c17 	ldw	r3,112(sp)
80210c04:	d8801b17 	ldw	r2,108(sp)
80210c08:	d811883a 	mov	r8,sp
80210c0c:	003f1b06 	br	8021087c <__reset+0xfa1f087c>
80210c10:	d8001d85 	stb	zero,118(sp)
80210c14:	80007b16 	blt	r16,zero,80210e04 <___svfiprintf_internal_r+0xfe8>
80210c18:	00ffdfc4 	movi	r3,-129
80210c1c:	e244b03a 	or	r2,fp,r9
80210c20:	90e4703a 	and	r18,r18,r3
80210c24:	103d7026 	beq	r2,zero,802101e8 <__reset+0xfa1f01e8>
80210c28:	0015883a 	mov	r10,zero
80210c2c:	003d7206 	br	802101f8 <__reset+0xfa1f01f8>
80210c30:	d9801a04 	addi	r6,sp,104
80210c34:	b80b883a 	mov	r5,r23
80210c38:	a809883a 	mov	r4,r21
80210c3c:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210c40:	103f841e 	bne	r2,zero,80210a54 <__reset+0xfa1f0a54>
80210c44:	d8c01c17 	ldw	r3,112(sp)
80210c48:	d8801b17 	ldw	r2,108(sp)
80210c4c:	d811883a 	mov	r8,sp
80210c50:	003ef006 	br	80210814 <__reset+0xfa1f0814>
80210c54:	9080100c 	andi	r2,r18,64
80210c58:	d8001d85 	stb	zero,118(sp)
80210c5c:	dac02317 	ldw	r11,140(sp)
80210c60:	10008126 	beq	r2,zero,80210e68 <___svfiprintf_internal_r+0x104c>
80210c64:	58800104 	addi	r2,r11,4
80210c68:	5f00000b 	ldhu	fp,0(r11)
80210c6c:	0013883a 	mov	r9,zero
80210c70:	803ec30e 	bge	r16,zero,80210780 <__reset+0xfa1f0780>
80210c74:	d8802315 	stw	r2,140(sp)
80210c78:	0015883a 	mov	r10,zero
80210c7c:	e244b03a 	or	r2,fp,r9
80210c80:	103e371e 	bne	r2,zero,80210560 <__reset+0xfa1f0560>
80210c84:	00800044 	movi	r2,1
80210c88:	10803fcc 	andi	r2,r2,255
80210c8c:	00c00044 	movi	r3,1
80210c90:	10c06126 	beq	r2,r3,80210e18 <___svfiprintf_internal_r+0xffc>
80210c94:	00c00084 	movi	r3,2
80210c98:	10fd5526 	beq	r2,r3,802101f0 <__reset+0xfa1f01f0>
80210c9c:	003ed806 	br	80210800 <__reset+0xfa1f0800>
80210ca0:	d8802315 	stw	r2,140(sp)
80210ca4:	98c00007 	ldb	r3,0(r19)
80210ca8:	003cab06 	br	8020ff58 <__reset+0xfa1eff58>
80210cac:	d9801a04 	addi	r6,sp,104
80210cb0:	b80b883a 	mov	r5,r23
80210cb4:	a809883a 	mov	r4,r21
80210cb8:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210cbc:	103f651e 	bne	r2,zero,80210a54 <__reset+0xfa1f0a54>
80210cc0:	d8c01c17 	ldw	r3,112(sp)
80210cc4:	003f4f06 	br	80210a04 <__reset+0xfa1f0a04>
80210cc8:	00a008b4 	movhi	r2,32802
80210ccc:	10b3ee04 	addi	r2,r2,-12360
80210cd0:	d8802915 	stw	r2,164(sp)
80210cd4:	003d4406 	br	802101e8 <__reset+0xfa1f01e8>
80210cd8:	dac02317 	ldw	r11,140(sp)
80210cdc:	58800017 	ldw	r2,0(r11)
80210ce0:	dac02517 	ldw	r11,148(sp)
80210ce4:	5807d7fa 	srai	r3,r11,31
80210ce8:	dac02317 	ldw	r11,140(sp)
80210cec:	10c00115 	stw	r3,4(r2)
80210cf0:	5ac00104 	addi	r11,r11,4
80210cf4:	dac02315 	stw	r11,140(sp)
80210cf8:	dac02517 	ldw	r11,148(sp)
80210cfc:	12c00015 	stw	r11,0(r2)
80210d00:	003c6d06 	br	8020feb8 <__reset+0xfa1efeb8>
80210d04:	9080100c 	andi	r2,r18,64
80210d08:	dac02317 	ldw	r11,140(sp)
80210d0c:	103e5326 	beq	r2,zero,8021065c <__reset+0xfa1f065c>
80210d10:	5f00000f 	ldh	fp,0(r11)
80210d14:	5ac00104 	addi	r11,r11,4
80210d18:	dac02315 	stw	r11,140(sp)
80210d1c:	e013d7fa 	srai	r9,fp,31
80210d20:	4805883a 	mov	r2,r9
80210d24:	003e0706 	br	80210544 <__reset+0xfa1f0544>
80210d28:	00800c04 	movi	r2,48
80210d2c:	d8801d05 	stb	r2,116(sp)
80210d30:	d8c01d45 	stb	r3,117(sp)
80210d34:	d8001d85 	stb	zero,118(sp)
80210d38:	90800094 	ori	r2,r18,2
80210d3c:	80008f16 	blt	r16,zero,80210f7c <___svfiprintf_internal_r+0x1160>
80210d40:	00bfdfc4 	movi	r2,-129
80210d44:	90a4703a 	and	r18,r18,r2
80210d48:	94800094 	ori	r18,r18,2
80210d4c:	0015883a 	mov	r10,zero
80210d50:	003d2906 	br	802101f8 <__reset+0xfa1f01f8>
80210d54:	98c00007 	ldb	r3,0(r19)
80210d58:	003c7f06 	br	8020ff58 <__reset+0xfa1eff58>
80210d5c:	dac02317 	ldw	r11,140(sp)
80210d60:	0013883a 	mov	r9,zero
80210d64:	5f000017 	ldw	fp,0(r11)
80210d68:	5ac00104 	addi	r11,r11,4
80210d6c:	dac02315 	stw	r11,140(sp)
80210d70:	003d1506 	br	802101c8 <__reset+0xfa1f01c8>
80210d74:	9080100c 	andi	r2,r18,64
80210d78:	d8001d85 	stb	zero,118(sp)
80210d7c:	dac02317 	ldw	r11,140(sp)
80210d80:	10003426 	beq	r2,zero,80210e54 <___svfiprintf_internal_r+0x1038>
80210d84:	58800104 	addi	r2,r11,4
80210d88:	5f00000b 	ldhu	fp,0(r11)
80210d8c:	0013883a 	mov	r9,zero
80210d90:	803e950e 	bge	r16,zero,802107e8 <__reset+0xfa1f07e8>
80210d94:	e246b03a 	or	r3,fp,r9
80210d98:	d8802315 	stw	r2,140(sp)
80210d9c:	183d5a1e 	bne	r3,zero,80210308 <__reset+0xfa1f0308>
80210da0:	0015883a 	mov	r10,zero
80210da4:	0005883a 	mov	r2,zero
80210da8:	003fb706 	br	80210c88 <__reset+0xfa1f0c88>
80210dac:	98c00043 	ldbu	r3,1(r19)
80210db0:	94800814 	ori	r18,r18,32
80210db4:	9cc00044 	addi	r19,r19,1
80210db8:	18c03fcc 	andi	r3,r3,255
80210dbc:	18c0201c 	xori	r3,r3,128
80210dc0:	18ffe004 	addi	r3,r3,-128
80210dc4:	003c6406 	br	8020ff58 <__reset+0xfa1eff58>
80210dc8:	d8c02315 	stw	r3,140(sp)
80210dcc:	0015883a 	mov	r10,zero
80210dd0:	003faa06 	br	80210c7c <__reset+0xfa1f0c7c>
80210dd4:	dac02317 	ldw	r11,140(sp)
80210dd8:	58800017 	ldw	r2,0(r11)
80210ddc:	5ac00104 	addi	r11,r11,4
80210de0:	dac02315 	stw	r11,140(sp)
80210de4:	dac02517 	ldw	r11,148(sp)
80210de8:	12c00015 	stw	r11,0(r2)
80210dec:	003c3206 	br	8020feb8 <__reset+0xfa1efeb8>
80210df0:	012008b4 	movhi	r4,32802
80210df4:	2133ee04 	addi	r4,r4,-12360
80210df8:	d9002915 	stw	r4,164(sp)
80210dfc:	d8c02315 	stw	r3,140(sp)
80210e00:	1025883a 	mov	r18,r2
80210e04:	e244b03a 	or	r2,fp,r9
80210e08:	103f871e 	bne	r2,zero,80210c28 <__reset+0xfa1f0c28>
80210e0c:	0015883a 	mov	r10,zero
80210e10:	00800084 	movi	r2,2
80210e14:	003f9c06 	br	80210c88 <__reset+0xfa1f0c88>
80210e18:	0039883a 	mov	fp,zero
80210e1c:	003e5f06 	br	8021079c <__reset+0xfa1f079c>
80210e20:	d9801a04 	addi	r6,sp,104
80210e24:	b80b883a 	mov	r5,r23
80210e28:	a809883a 	mov	r4,r21
80210e2c:	020fc4c0 	call	8020fc4c <__ssprint_r>
80210e30:	103f081e 	bne	r2,zero,80210a54 <__reset+0xfa1f0a54>
80210e34:	d8c01c17 	ldw	r3,112(sp)
80210e38:	d8801b17 	ldw	r2,108(sp)
80210e3c:	d811883a 	mov	r8,sp
80210e40:	003e9106 	br	80210888 <__reset+0xfa1f0888>
80210e44:	012008b4 	movhi	r4,32802
80210e48:	21345604 	addi	r4,r4,-11944
80210e4c:	d9002215 	stw	r4,136(sp)
80210e50:	003ead06 	br	80210908 <__reset+0xfa1f0908>
80210e54:	58800104 	addi	r2,r11,4
80210e58:	5f000017 	ldw	fp,0(r11)
80210e5c:	0013883a 	mov	r9,zero
80210e60:	803e610e 	bge	r16,zero,802107e8 <__reset+0xfa1f07e8>
80210e64:	003fcb06 	br	80210d94 <__reset+0xfa1f0d94>
80210e68:	58800104 	addi	r2,r11,4
80210e6c:	5f000017 	ldw	fp,0(r11)
80210e70:	0013883a 	mov	r9,zero
80210e74:	803e420e 	bge	r16,zero,80210780 <__reset+0xfa1f0780>
80210e78:	003f7e06 	br	80210c74 <__reset+0xfa1f0c74>
80210e7c:	5f000017 	ldw	fp,0(r11)
80210e80:	5ac00104 	addi	r11,r11,4
80210e84:	0013883a 	mov	r9,zero
80210e88:	dac02315 	stw	r11,140(sp)
80210e8c:	003cce06 	br	802101c8 <__reset+0xfa1f01c8>
80210e90:	8809883a 	mov	r4,r17
80210e94:	da002c15 	stw	r8,176(sp)
80210e98:	02066240 	call	80206624 <strlen>
80210e9c:	d8802115 	stw	r2,132(sp)
80210ea0:	da801d83 	ldbu	r10,118(sp)
80210ea4:	df002315 	stw	fp,140(sp)
80210ea8:	0021883a 	mov	r16,zero
80210eac:	da002c17 	ldw	r8,176(sp)
80210eb0:	003cf606 	br	8021028c <__reset+0xfa1f028c>
80210eb4:	00800184 	movi	r2,6
80210eb8:	1400012e 	bgeu	r2,r16,80210ec0 <___svfiprintf_internal_r+0x10a4>
80210ebc:	1021883a 	mov	r16,r2
80210ec0:	dc002115 	stw	r16,132(sp)
80210ec4:	8005883a 	mov	r2,r16
80210ec8:	80003c16 	blt	r16,zero,80210fbc <___svfiprintf_internal_r+0x11a0>
80210ecc:	046008b4 	movhi	r17,32802
80210ed0:	d8802015 	stw	r2,128(sp)
80210ed4:	df002315 	stw	fp,140(sp)
80210ed8:	8c73f304 	addi	r17,r17,-12340
80210edc:	003d2e06 	br	80210398 <__reset+0xfa1f0398>
80210ee0:	04001004 	movi	r16,64
80210ee4:	800b883a 	mov	r5,r16
80210ee8:	020d8980 	call	8020d898 <_malloc_r>
80210eec:	dac02717 	ldw	r11,156(sp)
80210ef0:	58800015 	stw	r2,0(r11)
80210ef4:	58800415 	stw	r2,16(r11)
80210ef8:	10004826 	beq	r2,zero,8021101c <___svfiprintf_internal_r+0x1200>
80210efc:	dac02717 	ldw	r11,156(sp)
80210f00:	5c000515 	stw	r16,20(r11)
80210f04:	003bd906 	br	8020fe6c <__reset+0xfa1efe6c>
80210f08:	9080004c 	andi	r2,r18,1
80210f0c:	0015883a 	mov	r10,zero
80210f10:	10000626 	beq	r2,zero,80210f2c <___svfiprintf_internal_r+0x1110>
80210f14:	dac02b17 	ldw	r11,172(sp)
80210f18:	00800c04 	movi	r2,48
80210f1c:	d88019c5 	stb	r2,103(sp)
80210f20:	dac02115 	stw	r11,132(sp)
80210f24:	dc4019c4 	addi	r17,sp,103
80210f28:	003cd806 	br	8021028c <__reset+0xfa1f028c>
80210f2c:	d8002115 	stw	zero,132(sp)
80210f30:	dc401a04 	addi	r17,sp,104
80210f34:	003cd506 	br	8021028c <__reset+0xfa1f028c>
80210f38:	012008b4 	movhi	r4,32802
80210f3c:	21345a04 	addi	r4,r4,-11928
80210f40:	d9002815 	stw	r4,160(sp)
80210f44:	003d4306 	br	80210454 <__reset+0xfa1f0454>
80210f48:	00bfffc4 	movi	r2,-1
80210f4c:	003ec606 	br	80210a68 <__reset+0xfa1f0a68>
80210f50:	00800044 	movi	r2,1
80210f54:	10803fcc 	andi	r2,r2,255
80210f58:	00c00044 	movi	r3,1
80210f5c:	10fd8026 	beq	r2,r3,80210560 <__reset+0xfa1f0560>
80210f60:	00c00084 	movi	r3,2
80210f64:	10fca426 	beq	r2,r3,802101f8 <__reset+0xfa1f01f8>
80210f68:	003ce806 	br	8021030c <__reset+0xfa1f030c>
80210f6c:	012008b4 	movhi	r4,32802
80210f70:	21345a04 	addi	r4,r4,-11928
80210f74:	d9002815 	stw	r4,160(sp)
80210f78:	003e9906 	br	802109e0 <__reset+0xfa1f09e0>
80210f7c:	1025883a 	mov	r18,r2
80210f80:	0015883a 	mov	r10,zero
80210f84:	00800084 	movi	r2,2
80210f88:	003ff206 	br	80210f54 <__reset+0xfa1f0f54>
80210f8c:	016008b4 	movhi	r5,32802
80210f90:	29745604 	addi	r5,r5,-11944
80210f94:	d9402215 	stw	r5,136(sp)
80210f98:	003ee206 	br	80210b24 <__reset+0xfa1f0b24>
80210f9c:	5827883a 	mov	r19,r11
80210fa0:	0021883a 	mov	r16,zero
80210fa4:	003bed06 	br	8020ff5c <__reset+0xfa1eff5c>
80210fa8:	dc002115 	stw	r16,132(sp)
80210fac:	da801d83 	ldbu	r10,118(sp)
80210fb0:	df002315 	stw	fp,140(sp)
80210fb4:	0021883a 	mov	r16,zero
80210fb8:	003cb406 	br	8021028c <__reset+0xfa1f028c>
80210fbc:	0005883a 	mov	r2,zero
80210fc0:	003fc206 	br	80210ecc <__reset+0xfa1f0ecc>
80210fc4:	d8802317 	ldw	r2,140(sp)
80210fc8:	98c00043 	ldbu	r3,1(r19)
80210fcc:	5827883a 	mov	r19,r11
80210fd0:	14000017 	ldw	r16,0(r2)
80210fd4:	10800104 	addi	r2,r2,4
80210fd8:	d8802315 	stw	r2,140(sp)
80210fdc:	803f760e 	bge	r16,zero,80210db8 <__reset+0xfa1f0db8>
80210fe0:	18c03fcc 	andi	r3,r3,255
80210fe4:	18c0201c 	xori	r3,r3,128
80210fe8:	043fffc4 	movi	r16,-1
80210fec:	18ffe004 	addi	r3,r3,-128
80210ff0:	003bd906 	br	8020ff58 <__reset+0xfa1eff58>
80210ff4:	d9c01d85 	stb	r7,118(sp)
80210ff8:	003cb606 	br	802102d4 <__reset+0xfa1f02d4>
80210ffc:	d9c01d85 	stb	r7,118(sp)
80211000:	003d2106 	br	80210488 <__reset+0xfa1f0488>
80211004:	d9c01d85 	stb	r7,118(sp)
80211008:	003d8e06 	br	80210644 <__reset+0xfa1f0644>
8021100c:	d9c01d85 	stb	r7,118(sp)
80211010:	003db306 	br	802106e0 <__reset+0xfa1f06e0>
80211014:	d9c01d85 	stb	r7,118(sp)
80211018:	003c8a06 	br	80210244 <__reset+0xfa1f0244>
8021101c:	dac02a17 	ldw	r11,168(sp)
80211020:	00800304 	movi	r2,12
80211024:	58800015 	stw	r2,0(r11)
80211028:	00bfffc4 	movi	r2,-1
8021102c:	003e8e06 	br	80210a68 <__reset+0xfa1f0a68>
80211030:	d9c01d85 	stb	r7,118(sp)
80211034:	003dc706 	br	80210754 <__reset+0xfa1f0754>
80211038:	d9c01d85 	stb	r7,118(sp)
8021103c:	003ddf06 	br	802107bc <__reset+0xfa1f07bc>
80211040:	d9c01d85 	stb	r7,118(sp)
80211044:	003d3706 	br	80210524 <__reset+0xfa1f0524>
80211048:	d9c01d85 	stb	r7,118(sp)
8021104c:	003c5406 	br	802101a0 <__reset+0xfa1f01a0>
80211050:	d9c01d85 	stb	r7,118(sp)
80211054:	003d1d06 	br	802104cc <__reset+0xfa1f04cc>

80211058 <__sprint_r.part.0>:
80211058:	28801917 	ldw	r2,100(r5)
8021105c:	defff604 	addi	sp,sp,-40
80211060:	dd400515 	stw	r21,20(sp)
80211064:	dfc00915 	stw	ra,36(sp)
80211068:	df000815 	stw	fp,32(sp)
8021106c:	ddc00715 	stw	r23,28(sp)
80211070:	dd800615 	stw	r22,24(sp)
80211074:	dd000415 	stw	r20,16(sp)
80211078:	dcc00315 	stw	r19,12(sp)
8021107c:	dc800215 	stw	r18,8(sp)
80211080:	dc400115 	stw	r17,4(sp)
80211084:	dc000015 	stw	r16,0(sp)
80211088:	1088000c 	andi	r2,r2,8192
8021108c:	302b883a 	mov	r21,r6
80211090:	10002e26 	beq	r2,zero,8021114c <__sprint_r.part.0+0xf4>
80211094:	30800217 	ldw	r2,8(r6)
80211098:	35800017 	ldw	r22,0(r6)
8021109c:	10002926 	beq	r2,zero,80211144 <__sprint_r.part.0+0xec>
802110a0:	2827883a 	mov	r19,r5
802110a4:	2029883a 	mov	r20,r4
802110a8:	b5c00104 	addi	r23,r22,4
802110ac:	04bfffc4 	movi	r18,-1
802110b0:	bc400017 	ldw	r17,0(r23)
802110b4:	b4000017 	ldw	r16,0(r22)
802110b8:	0039883a 	mov	fp,zero
802110bc:	8822d0ba 	srli	r17,r17,2
802110c0:	8800031e 	bne	r17,zero,802110d0 <__sprint_r.part.0+0x78>
802110c4:	00001806 	br	80211128 <__sprint_r.part.0+0xd0>
802110c8:	84000104 	addi	r16,r16,4
802110cc:	8f001526 	beq	r17,fp,80211124 <__sprint_r.part.0+0xcc>
802110d0:	81400017 	ldw	r5,0(r16)
802110d4:	980d883a 	mov	r6,r19
802110d8:	a009883a 	mov	r4,r20
802110dc:	0212a800 	call	80212a80 <_fputwc_r>
802110e0:	e7000044 	addi	fp,fp,1
802110e4:	14bff81e 	bne	r2,r18,802110c8 <__reset+0xfa1f10c8>
802110e8:	9005883a 	mov	r2,r18
802110ec:	a8000215 	stw	zero,8(r21)
802110f0:	a8000115 	stw	zero,4(r21)
802110f4:	dfc00917 	ldw	ra,36(sp)
802110f8:	df000817 	ldw	fp,32(sp)
802110fc:	ddc00717 	ldw	r23,28(sp)
80211100:	dd800617 	ldw	r22,24(sp)
80211104:	dd400517 	ldw	r21,20(sp)
80211108:	dd000417 	ldw	r20,16(sp)
8021110c:	dcc00317 	ldw	r19,12(sp)
80211110:	dc800217 	ldw	r18,8(sp)
80211114:	dc400117 	ldw	r17,4(sp)
80211118:	dc000017 	ldw	r16,0(sp)
8021111c:	dec00a04 	addi	sp,sp,40
80211120:	f800283a 	ret
80211124:	a8800217 	ldw	r2,8(r21)
80211128:	8c63883a 	add	r17,r17,r17
8021112c:	8c63883a 	add	r17,r17,r17
80211130:	1445c83a 	sub	r2,r2,r17
80211134:	a8800215 	stw	r2,8(r21)
80211138:	b5800204 	addi	r22,r22,8
8021113c:	bdc00204 	addi	r23,r23,8
80211140:	103fdb1e 	bne	r2,zero,802110b0 <__reset+0xfa1f10b0>
80211144:	0005883a 	mov	r2,zero
80211148:	003fe806 	br	802110ec <__reset+0xfa1f10ec>
8021114c:	020cfbc0 	call	8020cfbc <__sfvwrite_r>
80211150:	003fe606 	br	802110ec <__reset+0xfa1f10ec>

80211154 <__sprint_r>:
80211154:	30c00217 	ldw	r3,8(r6)
80211158:	18000126 	beq	r3,zero,80211160 <__sprint_r+0xc>
8021115c:	02110581 	jmpi	80211058 <__sprint_r.part.0>
80211160:	30000115 	stw	zero,4(r6)
80211164:	0005883a 	mov	r2,zero
80211168:	f800283a 	ret

8021116c <___vfiprintf_internal_r>:
8021116c:	deffc904 	addi	sp,sp,-220
80211170:	df003515 	stw	fp,212(sp)
80211174:	dd003115 	stw	r20,196(sp)
80211178:	dfc03615 	stw	ra,216(sp)
8021117c:	ddc03415 	stw	r23,208(sp)
80211180:	dd803315 	stw	r22,204(sp)
80211184:	dd403215 	stw	r21,200(sp)
80211188:	dcc03015 	stw	r19,192(sp)
8021118c:	dc802f15 	stw	r18,188(sp)
80211190:	dc402e15 	stw	r17,184(sp)
80211194:	dc002d15 	stw	r16,180(sp)
80211198:	d9002015 	stw	r4,128(sp)
8021119c:	d9c02215 	stw	r7,136(sp)
802111a0:	2829883a 	mov	r20,r5
802111a4:	3039883a 	mov	fp,r6
802111a8:	20000226 	beq	r4,zero,802111b4 <___vfiprintf_internal_r+0x48>
802111ac:	20800e17 	ldw	r2,56(r4)
802111b0:	1000cf26 	beq	r2,zero,802114f0 <___vfiprintf_internal_r+0x384>
802111b4:	a080030b 	ldhu	r2,12(r20)
802111b8:	10c8000c 	andi	r3,r2,8192
802111bc:	1800061e 	bne	r3,zero,802111d8 <___vfiprintf_internal_r+0x6c>
802111c0:	a1001917 	ldw	r4,100(r20)
802111c4:	00f7ffc4 	movi	r3,-8193
802111c8:	10880014 	ori	r2,r2,8192
802111cc:	20c6703a 	and	r3,r4,r3
802111d0:	a080030d 	sth	r2,12(r20)
802111d4:	a0c01915 	stw	r3,100(r20)
802111d8:	10c0020c 	andi	r3,r2,8
802111dc:	1800a926 	beq	r3,zero,80211484 <___vfiprintf_internal_r+0x318>
802111e0:	a0c00417 	ldw	r3,16(r20)
802111e4:	1800a726 	beq	r3,zero,80211484 <___vfiprintf_internal_r+0x318>
802111e8:	1080068c 	andi	r2,r2,26
802111ec:	00c00284 	movi	r3,10
802111f0:	10c0ac26 	beq	r2,r3,802114a4 <___vfiprintf_internal_r+0x338>
802111f4:	da801a04 	addi	r10,sp,104
802111f8:	da801e15 	stw	r10,120(sp)
802111fc:	d8801e17 	ldw	r2,120(sp)
80211200:	da8019c4 	addi	r10,sp,103
80211204:	05a008b4 	movhi	r22,32802
80211208:	05e008b4 	movhi	r23,32802
8021120c:	da801f15 	stw	r10,124(sp)
80211210:	1295c83a 	sub	r10,r2,r10
80211214:	b5b46204 	addi	r22,r22,-11896
80211218:	bdf45e04 	addi	r23,r23,-11912
8021121c:	dec01a15 	stw	sp,104(sp)
80211220:	d8001c15 	stw	zero,112(sp)
80211224:	d8001b15 	stw	zero,108(sp)
80211228:	d8002615 	stw	zero,152(sp)
8021122c:	d8002315 	stw	zero,140(sp)
80211230:	da802715 	stw	r10,156(sp)
80211234:	d811883a 	mov	r8,sp
80211238:	dd002115 	stw	r20,132(sp)
8021123c:	e021883a 	mov	r16,fp
80211240:	80800007 	ldb	r2,0(r16)
80211244:	1003ea26 	beq	r2,zero,802121f0 <___vfiprintf_internal_r+0x1084>
80211248:	00c00944 	movi	r3,37
8021124c:	8025883a 	mov	r18,r16
80211250:	10c0021e 	bne	r2,r3,8021125c <___vfiprintf_internal_r+0xf0>
80211254:	00001606 	br	802112b0 <___vfiprintf_internal_r+0x144>
80211258:	10c00326 	beq	r2,r3,80211268 <___vfiprintf_internal_r+0xfc>
8021125c:	94800044 	addi	r18,r18,1
80211260:	90800007 	ldb	r2,0(r18)
80211264:	103ffc1e 	bne	r2,zero,80211258 <__reset+0xfa1f1258>
80211268:	9423c83a 	sub	r17,r18,r16
8021126c:	88001026 	beq	r17,zero,802112b0 <___vfiprintf_internal_r+0x144>
80211270:	d8c01c17 	ldw	r3,112(sp)
80211274:	d8801b17 	ldw	r2,108(sp)
80211278:	44000015 	stw	r16,0(r8)
8021127c:	88c7883a 	add	r3,r17,r3
80211280:	10800044 	addi	r2,r2,1
80211284:	44400115 	stw	r17,4(r8)
80211288:	d8c01c15 	stw	r3,112(sp)
8021128c:	d8801b15 	stw	r2,108(sp)
80211290:	010001c4 	movi	r4,7
80211294:	2080760e 	bge	r4,r2,80211470 <___vfiprintf_internal_r+0x304>
80211298:	1803821e 	bne	r3,zero,802120a4 <___vfiprintf_internal_r+0xf38>
8021129c:	da802317 	ldw	r10,140(sp)
802112a0:	d8001b15 	stw	zero,108(sp)
802112a4:	d811883a 	mov	r8,sp
802112a8:	5455883a 	add	r10,r10,r17
802112ac:	da802315 	stw	r10,140(sp)
802112b0:	90800007 	ldb	r2,0(r18)
802112b4:	10044626 	beq	r2,zero,802123d0 <___vfiprintf_internal_r+0x1264>
802112b8:	90c00047 	ldb	r3,1(r18)
802112bc:	94000044 	addi	r16,r18,1
802112c0:	d8001d85 	stb	zero,118(sp)
802112c4:	0009883a 	mov	r4,zero
802112c8:	000f883a 	mov	r7,zero
802112cc:	027fffc4 	movi	r9,-1
802112d0:	0023883a 	mov	r17,zero
802112d4:	0029883a 	mov	r20,zero
802112d8:	01401604 	movi	r5,88
802112dc:	01800244 	movi	r6,9
802112e0:	03400a84 	movi	r13,42
802112e4:	03001b04 	movi	r12,108
802112e8:	84000044 	addi	r16,r16,1
802112ec:	18bff804 	addi	r2,r3,-32
802112f0:	28827336 	bltu	r5,r2,80211cc0 <___vfiprintf_internal_r+0xb54>
802112f4:	100490ba 	slli	r2,r2,2
802112f8:	02a00874 	movhi	r10,32801
802112fc:	5284c304 	addi	r10,r10,4876
80211300:	1285883a 	add	r2,r2,r10
80211304:	10800017 	ldw	r2,0(r2)
80211308:	1000683a 	jmp	r2
8021130c:	802119f4 	orhi	zero,r16,33895
80211310:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211314:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211318:	80211a14 	ori	zero,r16,33896
8021131c:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211320:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211324:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211328:	80211cc0 	call	880211cc <__reset+0x20011cc>
8021132c:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211330:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211334:	80211bfc 	xorhi	zero,r16,33903
80211338:	80211c18 	cmpnei	zero,r16,-31632
8021133c:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211340:	80211500 	call	88021150 <__reset+0x2001150>
80211344:	80211c28 	cmpgeui	zero,r16,33904
80211348:	80211cc0 	call	880211cc <__reset+0x20011cc>
8021134c:	80211a20 	cmpeqi	zero,r16,-31640
80211350:	80211a2c 	andhi	zero,r16,33896
80211354:	80211a2c 	andhi	zero,r16,33896
80211358:	80211a2c 	andhi	zero,r16,33896
8021135c:	80211a2c 	andhi	zero,r16,33896
80211360:	80211a2c 	andhi	zero,r16,33896
80211364:	80211a2c 	andhi	zero,r16,33896
80211368:	80211a2c 	andhi	zero,r16,33896
8021136c:	80211a2c 	andhi	zero,r16,33896
80211370:	80211a2c 	andhi	zero,r16,33896
80211374:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211378:	80211cc0 	call	880211cc <__reset+0x20011cc>
8021137c:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211380:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211384:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211388:	80211cc0 	call	880211cc <__reset+0x20011cc>
8021138c:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211390:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211394:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211398:	80211cc0 	call	880211cc <__reset+0x20011cc>
8021139c:	80211a58 	cmpnei	zero,r16,-31639
802113a0:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113a4:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113a8:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113ac:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113b0:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113b4:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113b8:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113bc:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113c0:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113c4:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113c8:	80211a90 	cmplti	zero,r16,-31638
802113cc:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113d0:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113d4:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113d8:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113dc:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113e0:	80211ae8 	cmpgeui	zero,r16,33899
802113e4:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113e8:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113ec:	80211b58 	cmpnei	zero,r16,-31635
802113f0:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113f4:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113f8:	80211cc0 	call	880211cc <__reset+0x20011cc>
802113fc:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211400:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211404:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211408:	80211cc0 	call	880211cc <__reset+0x20011cc>
8021140c:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211410:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211414:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211418:	80211904 	addi	zero,r16,-31644
8021141c:	80211930 	cmpltui	zero,r16,33892
80211420:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211424:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211428:	80211cc0 	call	880211cc <__reset+0x20011cc>
8021142c:	80211c68 	cmpgeui	zero,r16,33905
80211430:	80211930 	cmpltui	zero,r16,33892
80211434:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211438:	80211cc0 	call	880211cc <__reset+0x20011cc>
8021143c:	802117c4 	addi	zero,r16,-31649
80211440:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211444:	802117d4 	ori	zero,r16,33887
80211448:	80211810 	cmplti	zero,r16,-31648
8021144c:	8021150c 	andi	zero,r16,33876
80211450:	802117b8 	rdprs	zero,r16,-31650
80211454:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211458:	80211b94 	ori	zero,r16,33902
8021145c:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211460:	80211bec 	andhi	zero,r16,33903
80211464:	80211cc0 	call	880211cc <__reset+0x20011cc>
80211468:	80211cc0 	call	880211cc <__reset+0x20011cc>
8021146c:	802118b0 	cmpltui	zero,r16,33890
80211470:	42000204 	addi	r8,r8,8
80211474:	da802317 	ldw	r10,140(sp)
80211478:	5455883a 	add	r10,r10,r17
8021147c:	da802315 	stw	r10,140(sp)
80211480:	003f8b06 	br	802112b0 <__reset+0xfa1f12b0>
80211484:	d9002017 	ldw	r4,128(sp)
80211488:	a00b883a 	mov	r5,r20
8021148c:	020ab640 	call	8020ab64 <__swsetup_r>
80211490:	1003b11e 	bne	r2,zero,80212358 <___vfiprintf_internal_r+0x11ec>
80211494:	a080030b 	ldhu	r2,12(r20)
80211498:	00c00284 	movi	r3,10
8021149c:	1080068c 	andi	r2,r2,26
802114a0:	10ff541e 	bne	r2,r3,802111f4 <__reset+0xfa1f11f4>
802114a4:	a080038f 	ldh	r2,14(r20)
802114a8:	103f5216 	blt	r2,zero,802111f4 <__reset+0xfa1f11f4>
802114ac:	d9c02217 	ldw	r7,136(sp)
802114b0:	d9002017 	ldw	r4,128(sp)
802114b4:	e00d883a 	mov	r6,fp
802114b8:	a00b883a 	mov	r5,r20
802114bc:	02125e40 	call	802125e4 <__sbprintf>
802114c0:	dfc03617 	ldw	ra,216(sp)
802114c4:	df003517 	ldw	fp,212(sp)
802114c8:	ddc03417 	ldw	r23,208(sp)
802114cc:	dd803317 	ldw	r22,204(sp)
802114d0:	dd403217 	ldw	r21,200(sp)
802114d4:	dd003117 	ldw	r20,196(sp)
802114d8:	dcc03017 	ldw	r19,192(sp)
802114dc:	dc802f17 	ldw	r18,188(sp)
802114e0:	dc402e17 	ldw	r17,184(sp)
802114e4:	dc002d17 	ldw	r16,180(sp)
802114e8:	dec03704 	addi	sp,sp,220
802114ec:	f800283a 	ret
802114f0:	020cb380 	call	8020cb38 <__sinit>
802114f4:	003f2f06 	br	802111b4 <__reset+0xfa1f11b4>
802114f8:	0463c83a 	sub	r17,zero,r17
802114fc:	d8802215 	stw	r2,136(sp)
80211500:	a5000114 	ori	r20,r20,4
80211504:	80c00007 	ldb	r3,0(r16)
80211508:	003f7706 	br	802112e8 <__reset+0xfa1f12e8>
8021150c:	00800c04 	movi	r2,48
80211510:	da802217 	ldw	r10,136(sp)
80211514:	d8801d05 	stb	r2,116(sp)
80211518:	00801e04 	movi	r2,120
8021151c:	d8801d45 	stb	r2,117(sp)
80211520:	d8001d85 	stb	zero,118(sp)
80211524:	50c00104 	addi	r3,r10,4
80211528:	54800017 	ldw	r18,0(r10)
8021152c:	0027883a 	mov	r19,zero
80211530:	a0800094 	ori	r2,r20,2
80211534:	48030b16 	blt	r9,zero,80212164 <___vfiprintf_internal_r+0xff8>
80211538:	00bfdfc4 	movi	r2,-129
8021153c:	a096703a 	and	r11,r20,r2
80211540:	d8c02215 	stw	r3,136(sp)
80211544:	5d000094 	ori	r20,r11,2
80211548:	90032b1e 	bne	r18,zero,802121f8 <___vfiprintf_internal_r+0x108c>
8021154c:	00a008b4 	movhi	r2,32802
80211550:	10b3ee04 	addi	r2,r2,-12360
80211554:	d8802615 	stw	r2,152(sp)
80211558:	0039883a 	mov	fp,zero
8021155c:	48017b1e 	bne	r9,zero,80211b4c <___vfiprintf_internal_r+0x9e0>
80211560:	0013883a 	mov	r9,zero
80211564:	0027883a 	mov	r19,zero
80211568:	dd401a04 	addi	r21,sp,104
8021156c:	4825883a 	mov	r18,r9
80211570:	4cc0010e 	bge	r9,r19,80211578 <___vfiprintf_internal_r+0x40c>
80211574:	9825883a 	mov	r18,r19
80211578:	e7003fcc 	andi	fp,fp,255
8021157c:	e700201c 	xori	fp,fp,128
80211580:	e73fe004 	addi	fp,fp,-128
80211584:	e0000126 	beq	fp,zero,8021158c <___vfiprintf_internal_r+0x420>
80211588:	94800044 	addi	r18,r18,1
8021158c:	a380008c 	andi	r14,r20,2
80211590:	70000126 	beq	r14,zero,80211598 <___vfiprintf_internal_r+0x42c>
80211594:	94800084 	addi	r18,r18,2
80211598:	a700210c 	andi	fp,r20,132
8021159c:	e001df1e 	bne	fp,zero,80211d1c <___vfiprintf_internal_r+0xbb0>
802115a0:	8c87c83a 	sub	r3,r17,r18
802115a4:	00c1dd0e 	bge	zero,r3,80211d1c <___vfiprintf_internal_r+0xbb0>
802115a8:	01c00404 	movi	r7,16
802115ac:	d8801c17 	ldw	r2,112(sp)
802115b0:	38c3ad0e 	bge	r7,r3,80212468 <___vfiprintf_internal_r+0x12fc>
802115b4:	02a008b4 	movhi	r10,32802
802115b8:	52b46204 	addi	r10,r10,-11896
802115bc:	dc002915 	stw	r16,164(sp)
802115c0:	d9801b17 	ldw	r6,108(sp)
802115c4:	da802415 	stw	r10,144(sp)
802115c8:	03c001c4 	movi	r15,7
802115cc:	da402515 	stw	r9,148(sp)
802115d0:	db802815 	stw	r14,160(sp)
802115d4:	1821883a 	mov	r16,r3
802115d8:	00000506 	br	802115f0 <___vfiprintf_internal_r+0x484>
802115dc:	31400084 	addi	r5,r6,2
802115e0:	42000204 	addi	r8,r8,8
802115e4:	200d883a 	mov	r6,r4
802115e8:	843ffc04 	addi	r16,r16,-16
802115ec:	3c000d0e 	bge	r7,r16,80211624 <___vfiprintf_internal_r+0x4b8>
802115f0:	10800404 	addi	r2,r2,16
802115f4:	31000044 	addi	r4,r6,1
802115f8:	45800015 	stw	r22,0(r8)
802115fc:	41c00115 	stw	r7,4(r8)
80211600:	d8801c15 	stw	r2,112(sp)
80211604:	d9001b15 	stw	r4,108(sp)
80211608:	793ff40e 	bge	r15,r4,802115dc <__reset+0xfa1f15dc>
8021160c:	1001b51e 	bne	r2,zero,80211ce4 <___vfiprintf_internal_r+0xb78>
80211610:	843ffc04 	addi	r16,r16,-16
80211614:	000d883a 	mov	r6,zero
80211618:	01400044 	movi	r5,1
8021161c:	d811883a 	mov	r8,sp
80211620:	3c3ff316 	blt	r7,r16,802115f0 <__reset+0xfa1f15f0>
80211624:	8007883a 	mov	r3,r16
80211628:	da402517 	ldw	r9,148(sp)
8021162c:	db802817 	ldw	r14,160(sp)
80211630:	dc002917 	ldw	r16,164(sp)
80211634:	da802417 	ldw	r10,144(sp)
80211638:	1885883a 	add	r2,r3,r2
8021163c:	40c00115 	stw	r3,4(r8)
80211640:	42800015 	stw	r10,0(r8)
80211644:	d8801c15 	stw	r2,112(sp)
80211648:	d9401b15 	stw	r5,108(sp)
8021164c:	00c001c4 	movi	r3,7
80211650:	19426016 	blt	r3,r5,80211fd4 <___vfiprintf_internal_r+0xe68>
80211654:	d8c01d87 	ldb	r3,118(sp)
80211658:	42000204 	addi	r8,r8,8
8021165c:	29000044 	addi	r4,r5,1
80211660:	1801b31e 	bne	r3,zero,80211d30 <___vfiprintf_internal_r+0xbc4>
80211664:	7001c026 	beq	r14,zero,80211d68 <___vfiprintf_internal_r+0xbfc>
80211668:	d8c01d04 	addi	r3,sp,116
8021166c:	10800084 	addi	r2,r2,2
80211670:	40c00015 	stw	r3,0(r8)
80211674:	00c00084 	movi	r3,2
80211678:	40c00115 	stw	r3,4(r8)
8021167c:	d8801c15 	stw	r2,112(sp)
80211680:	d9001b15 	stw	r4,108(sp)
80211684:	00c001c4 	movi	r3,7
80211688:	1902650e 	bge	r3,r4,80212020 <___vfiprintf_internal_r+0xeb4>
8021168c:	10029a1e 	bne	r2,zero,802120f8 <___vfiprintf_internal_r+0xf8c>
80211690:	00c02004 	movi	r3,128
80211694:	01000044 	movi	r4,1
80211698:	000b883a 	mov	r5,zero
8021169c:	d811883a 	mov	r8,sp
802116a0:	e0c1b31e 	bne	fp,r3,80211d70 <___vfiprintf_internal_r+0xc04>
802116a4:	8cb9c83a 	sub	fp,r17,r18
802116a8:	0701b10e 	bge	zero,fp,80211d70 <___vfiprintf_internal_r+0xc04>
802116ac:	01c00404 	movi	r7,16
802116b0:	3f03890e 	bge	r7,fp,802124d8 <___vfiprintf_internal_r+0x136c>
802116b4:	00e008b4 	movhi	r3,32802
802116b8:	18f45e04 	addi	r3,r3,-11912
802116bc:	d8c02415 	stw	r3,144(sp)
802116c0:	8007883a 	mov	r3,r16
802116c4:	034001c4 	movi	r13,7
802116c8:	e021883a 	mov	r16,fp
802116cc:	da402515 	stw	r9,148(sp)
802116d0:	1839883a 	mov	fp,r3
802116d4:	00000506 	br	802116ec <___vfiprintf_internal_r+0x580>
802116d8:	29800084 	addi	r6,r5,2
802116dc:	42000204 	addi	r8,r8,8
802116e0:	180b883a 	mov	r5,r3
802116e4:	843ffc04 	addi	r16,r16,-16
802116e8:	3c000d0e 	bge	r7,r16,80211720 <___vfiprintf_internal_r+0x5b4>
802116ec:	10800404 	addi	r2,r2,16
802116f0:	28c00044 	addi	r3,r5,1
802116f4:	45c00015 	stw	r23,0(r8)
802116f8:	41c00115 	stw	r7,4(r8)
802116fc:	d8801c15 	stw	r2,112(sp)
80211700:	d8c01b15 	stw	r3,108(sp)
80211704:	68fff40e 	bge	r13,r3,802116d8 <__reset+0xfa1f16d8>
80211708:	1002241e 	bne	r2,zero,80211f9c <___vfiprintf_internal_r+0xe30>
8021170c:	843ffc04 	addi	r16,r16,-16
80211710:	01800044 	movi	r6,1
80211714:	000b883a 	mov	r5,zero
80211718:	d811883a 	mov	r8,sp
8021171c:	3c3ff316 	blt	r7,r16,802116ec <__reset+0xfa1f16ec>
80211720:	da402517 	ldw	r9,148(sp)
80211724:	e007883a 	mov	r3,fp
80211728:	8039883a 	mov	fp,r16
8021172c:	1821883a 	mov	r16,r3
80211730:	d8c02417 	ldw	r3,144(sp)
80211734:	1705883a 	add	r2,r2,fp
80211738:	47000115 	stw	fp,4(r8)
8021173c:	40c00015 	stw	r3,0(r8)
80211740:	d8801c15 	stw	r2,112(sp)
80211744:	d9801b15 	stw	r6,108(sp)
80211748:	00c001c4 	movi	r3,7
8021174c:	19827616 	blt	r3,r6,80212128 <___vfiprintf_internal_r+0xfbc>
80211750:	4cf9c83a 	sub	fp,r9,r19
80211754:	42000204 	addi	r8,r8,8
80211758:	31000044 	addi	r4,r6,1
8021175c:	300b883a 	mov	r5,r6
80211760:	07018516 	blt	zero,fp,80211d78 <___vfiprintf_internal_r+0xc0c>
80211764:	9885883a 	add	r2,r19,r2
80211768:	45400015 	stw	r21,0(r8)
8021176c:	44c00115 	stw	r19,4(r8)
80211770:	d8801c15 	stw	r2,112(sp)
80211774:	d9001b15 	stw	r4,108(sp)
80211778:	00c001c4 	movi	r3,7
8021177c:	1901dd0e 	bge	r3,r4,80211ef4 <___vfiprintf_internal_r+0xd88>
80211780:	1002401e 	bne	r2,zero,80212084 <___vfiprintf_internal_r+0xf18>
80211784:	d8001b15 	stw	zero,108(sp)
80211788:	a2c0010c 	andi	r11,r20,4
8021178c:	58000226 	beq	r11,zero,80211798 <___vfiprintf_internal_r+0x62c>
80211790:	8ca7c83a 	sub	r19,r17,r18
80211794:	04c2f216 	blt	zero,r19,80212360 <___vfiprintf_internal_r+0x11f4>
80211798:	8c80010e 	bge	r17,r18,802117a0 <___vfiprintf_internal_r+0x634>
8021179c:	9023883a 	mov	r17,r18
802117a0:	da802317 	ldw	r10,140(sp)
802117a4:	5455883a 	add	r10,r10,r17
802117a8:	da802315 	stw	r10,140(sp)
802117ac:	d8001b15 	stw	zero,108(sp)
802117b0:	d811883a 	mov	r8,sp
802117b4:	003ea206 	br	80211240 <__reset+0xfa1f1240>
802117b8:	a5000814 	ori	r20,r20,32
802117bc:	80c00007 	ldb	r3,0(r16)
802117c0:	003ec906 	br	802112e8 <__reset+0xfa1f12e8>
802117c4:	80c00007 	ldb	r3,0(r16)
802117c8:	1b030926 	beq	r3,r12,802123f0 <___vfiprintf_internal_r+0x1284>
802117cc:	a5000414 	ori	r20,r20,16
802117d0:	003ec506 	br	802112e8 <__reset+0xfa1f12e8>
802117d4:	21003fcc 	andi	r4,r4,255
802117d8:	20035e1e 	bne	r4,zero,80212554 <___vfiprintf_internal_r+0x13e8>
802117dc:	a080080c 	andi	r2,r20,32
802117e0:	1002a526 	beq	r2,zero,80212278 <___vfiprintf_internal_r+0x110c>
802117e4:	da802217 	ldw	r10,136(sp)
802117e8:	50800017 	ldw	r2,0(r10)
802117ec:	da802317 	ldw	r10,140(sp)
802117f0:	5007d7fa 	srai	r3,r10,31
802117f4:	da802217 	ldw	r10,136(sp)
802117f8:	10c00115 	stw	r3,4(r2)
802117fc:	52800104 	addi	r10,r10,4
80211800:	da802215 	stw	r10,136(sp)
80211804:	da802317 	ldw	r10,140(sp)
80211808:	12800015 	stw	r10,0(r2)
8021180c:	003e8c06 	br	80211240 <__reset+0xfa1f1240>
80211810:	21003fcc 	andi	r4,r4,255
80211814:	2003511e 	bne	r4,zero,8021255c <___vfiprintf_internal_r+0x13f0>
80211818:	a080080c 	andi	r2,r20,32
8021181c:	1000a126 	beq	r2,zero,80211aa4 <___vfiprintf_internal_r+0x938>
80211820:	da802217 	ldw	r10,136(sp)
80211824:	d8001d85 	stb	zero,118(sp)
80211828:	50800204 	addi	r2,r10,8
8021182c:	54800017 	ldw	r18,0(r10)
80211830:	54c00117 	ldw	r19,4(r10)
80211834:	4802b416 	blt	r9,zero,80212308 <___vfiprintf_internal_r+0x119c>
80211838:	013fdfc4 	movi	r4,-129
8021183c:	94c6b03a 	or	r3,r18,r19
80211840:	d8802215 	stw	r2,136(sp)
80211844:	a128703a 	and	r20,r20,r4
80211848:	1800a226 	beq	r3,zero,80211ad4 <___vfiprintf_internal_r+0x968>
8021184c:	0039883a 	mov	fp,zero
80211850:	dd401a04 	addi	r21,sp,104
80211854:	9006d0fa 	srli	r3,r18,3
80211858:	9808977a 	slli	r4,r19,29
8021185c:	9826d0fa 	srli	r19,r19,3
80211860:	948001cc 	andi	r18,r18,7
80211864:	90800c04 	addi	r2,r18,48
80211868:	ad7fffc4 	addi	r21,r21,-1
8021186c:	20e4b03a 	or	r18,r4,r3
80211870:	a8800005 	stb	r2,0(r21)
80211874:	94c6b03a 	or	r3,r18,r19
80211878:	183ff61e 	bne	r3,zero,80211854 <__reset+0xfa1f1854>
8021187c:	a0c0004c 	andi	r3,r20,1
80211880:	18005926 	beq	r3,zero,802119e8 <___vfiprintf_internal_r+0x87c>
80211884:	10803fcc 	andi	r2,r2,255
80211888:	1080201c 	xori	r2,r2,128
8021188c:	10bfe004 	addi	r2,r2,-128
80211890:	00c00c04 	movi	r3,48
80211894:	10c05426 	beq	r2,r3,802119e8 <___vfiprintf_internal_r+0x87c>
80211898:	da801e17 	ldw	r10,120(sp)
8021189c:	a8bfffc4 	addi	r2,r21,-1
802118a0:	a8ffffc5 	stb	r3,-1(r21)
802118a4:	50a7c83a 	sub	r19,r10,r2
802118a8:	102b883a 	mov	r21,r2
802118ac:	003f2f06 	br	8021156c <__reset+0xfa1f156c>
802118b0:	21003fcc 	andi	r4,r4,255
802118b4:	2003421e 	bne	r4,zero,802125c0 <___vfiprintf_internal_r+0x1454>
802118b8:	00a008b4 	movhi	r2,32802
802118bc:	10b3ee04 	addi	r2,r2,-12360
802118c0:	d8802615 	stw	r2,152(sp)
802118c4:	a080080c 	andi	r2,r20,32
802118c8:	1000aa26 	beq	r2,zero,80211b74 <___vfiprintf_internal_r+0xa08>
802118cc:	da802217 	ldw	r10,136(sp)
802118d0:	54800017 	ldw	r18,0(r10)
802118d4:	54c00117 	ldw	r19,4(r10)
802118d8:	52800204 	addi	r10,r10,8
802118dc:	da802215 	stw	r10,136(sp)
802118e0:	a080004c 	andi	r2,r20,1
802118e4:	1001d226 	beq	r2,zero,80212030 <___vfiprintf_internal_r+0xec4>
802118e8:	94c4b03a 	or	r2,r18,r19
802118ec:	1002351e 	bne	r2,zero,802121c4 <___vfiprintf_internal_r+0x1058>
802118f0:	d8001d85 	stb	zero,118(sp)
802118f4:	48022216 	blt	r9,zero,80212180 <___vfiprintf_internal_r+0x1014>
802118f8:	00bfdfc4 	movi	r2,-129
802118fc:	a0a8703a 	and	r20,r20,r2
80211900:	003f1506 	br	80211558 <__reset+0xfa1f1558>
80211904:	da802217 	ldw	r10,136(sp)
80211908:	04800044 	movi	r18,1
8021190c:	d8001d85 	stb	zero,118(sp)
80211910:	50800017 	ldw	r2,0(r10)
80211914:	52800104 	addi	r10,r10,4
80211918:	da802215 	stw	r10,136(sp)
8021191c:	d8801005 	stb	r2,64(sp)
80211920:	9027883a 	mov	r19,r18
80211924:	dd401004 	addi	r21,sp,64
80211928:	0013883a 	mov	r9,zero
8021192c:	003f1706 	br	8021158c <__reset+0xfa1f158c>
80211930:	21003fcc 	andi	r4,r4,255
80211934:	2003201e 	bne	r4,zero,802125b8 <___vfiprintf_internal_r+0x144c>
80211938:	a080080c 	andi	r2,r20,32
8021193c:	10004b26 	beq	r2,zero,80211a6c <___vfiprintf_internal_r+0x900>
80211940:	da802217 	ldw	r10,136(sp)
80211944:	50800117 	ldw	r2,4(r10)
80211948:	54800017 	ldw	r18,0(r10)
8021194c:	52800204 	addi	r10,r10,8
80211950:	da802215 	stw	r10,136(sp)
80211954:	1027883a 	mov	r19,r2
80211958:	10022c16 	blt	r2,zero,8021220c <___vfiprintf_internal_r+0x10a0>
8021195c:	df001d83 	ldbu	fp,118(sp)
80211960:	48007216 	blt	r9,zero,80211b2c <___vfiprintf_internal_r+0x9c0>
80211964:	00ffdfc4 	movi	r3,-129
80211968:	94c4b03a 	or	r2,r18,r19
8021196c:	a0e8703a 	and	r20,r20,r3
80211970:	1000cc26 	beq	r2,zero,80211ca4 <___vfiprintf_internal_r+0xb38>
80211974:	98021026 	beq	r19,zero,802121b8 <___vfiprintf_internal_r+0x104c>
80211978:	dc402415 	stw	r17,144(sp)
8021197c:	dc002515 	stw	r16,148(sp)
80211980:	9823883a 	mov	r17,r19
80211984:	9021883a 	mov	r16,r18
80211988:	dd401a04 	addi	r21,sp,104
8021198c:	4825883a 	mov	r18,r9
80211990:	4027883a 	mov	r19,r8
80211994:	8009883a 	mov	r4,r16
80211998:	880b883a 	mov	r5,r17
8021199c:	01800284 	movi	r6,10
802119a0:	000f883a 	mov	r7,zero
802119a4:	021354c0 	call	8021354c <__umoddi3>
802119a8:	10800c04 	addi	r2,r2,48
802119ac:	ad7fffc4 	addi	r21,r21,-1
802119b0:	8009883a 	mov	r4,r16
802119b4:	880b883a 	mov	r5,r17
802119b8:	a8800005 	stb	r2,0(r21)
802119bc:	01800284 	movi	r6,10
802119c0:	000f883a 	mov	r7,zero
802119c4:	0212fd40 	call	80212fd4 <__udivdi3>
802119c8:	1021883a 	mov	r16,r2
802119cc:	10c4b03a 	or	r2,r2,r3
802119d0:	1823883a 	mov	r17,r3
802119d4:	103fef1e 	bne	r2,zero,80211994 <__reset+0xfa1f1994>
802119d8:	dc402417 	ldw	r17,144(sp)
802119dc:	dc002517 	ldw	r16,148(sp)
802119e0:	9013883a 	mov	r9,r18
802119e4:	9811883a 	mov	r8,r19
802119e8:	da801e17 	ldw	r10,120(sp)
802119ec:	5567c83a 	sub	r19,r10,r21
802119f0:	003ede06 	br	8021156c <__reset+0xfa1f156c>
802119f4:	38803fcc 	andi	r2,r7,255
802119f8:	1080201c 	xori	r2,r2,128
802119fc:	10bfe004 	addi	r2,r2,-128
80211a00:	1002371e 	bne	r2,zero,802122e0 <___vfiprintf_internal_r+0x1174>
80211a04:	01000044 	movi	r4,1
80211a08:	01c00804 	movi	r7,32
80211a0c:	80c00007 	ldb	r3,0(r16)
80211a10:	003e3506 	br	802112e8 <__reset+0xfa1f12e8>
80211a14:	a5000054 	ori	r20,r20,1
80211a18:	80c00007 	ldb	r3,0(r16)
80211a1c:	003e3206 	br	802112e8 <__reset+0xfa1f12e8>
80211a20:	a5002014 	ori	r20,r20,128
80211a24:	80c00007 	ldb	r3,0(r16)
80211a28:	003e2f06 	br	802112e8 <__reset+0xfa1f12e8>
80211a2c:	8015883a 	mov	r10,r16
80211a30:	0023883a 	mov	r17,zero
80211a34:	18bff404 	addi	r2,r3,-48
80211a38:	50c00007 	ldb	r3,0(r10)
80211a3c:	8c4002a4 	muli	r17,r17,10
80211a40:	84000044 	addi	r16,r16,1
80211a44:	8015883a 	mov	r10,r16
80211a48:	1463883a 	add	r17,r2,r17
80211a4c:	18bff404 	addi	r2,r3,-48
80211a50:	30bff92e 	bgeu	r6,r2,80211a38 <__reset+0xfa1f1a38>
80211a54:	003e2506 	br	802112ec <__reset+0xfa1f12ec>
80211a58:	21003fcc 	andi	r4,r4,255
80211a5c:	2002d41e 	bne	r4,zero,802125b0 <___vfiprintf_internal_r+0x1444>
80211a60:	a5000414 	ori	r20,r20,16
80211a64:	a080080c 	andi	r2,r20,32
80211a68:	103fb51e 	bne	r2,zero,80211940 <__reset+0xfa1f1940>
80211a6c:	a080040c 	andi	r2,r20,16
80211a70:	1001f826 	beq	r2,zero,80212254 <___vfiprintf_internal_r+0x10e8>
80211a74:	da802217 	ldw	r10,136(sp)
80211a78:	54800017 	ldw	r18,0(r10)
80211a7c:	52800104 	addi	r10,r10,4
80211a80:	da802215 	stw	r10,136(sp)
80211a84:	9027d7fa 	srai	r19,r18,31
80211a88:	9805883a 	mov	r2,r19
80211a8c:	003fb206 	br	80211958 <__reset+0xfa1f1958>
80211a90:	21003fcc 	andi	r4,r4,255
80211a94:	2002c41e 	bne	r4,zero,802125a8 <___vfiprintf_internal_r+0x143c>
80211a98:	a5000414 	ori	r20,r20,16
80211a9c:	a080080c 	andi	r2,r20,32
80211aa0:	103f5f1e 	bne	r2,zero,80211820 <__reset+0xfa1f1820>
80211aa4:	a080040c 	andi	r2,r20,16
80211aa8:	10020f26 	beq	r2,zero,802122e8 <___vfiprintf_internal_r+0x117c>
80211aac:	da802217 	ldw	r10,136(sp)
80211ab0:	d8001d85 	stb	zero,118(sp)
80211ab4:	0027883a 	mov	r19,zero
80211ab8:	50800104 	addi	r2,r10,4
80211abc:	54800017 	ldw	r18,0(r10)
80211ac0:	48021116 	blt	r9,zero,80212308 <___vfiprintf_internal_r+0x119c>
80211ac4:	00ffdfc4 	movi	r3,-129
80211ac8:	d8802215 	stw	r2,136(sp)
80211acc:	a0e8703a 	and	r20,r20,r3
80211ad0:	903f5e1e 	bne	r18,zero,8021184c <__reset+0xfa1f184c>
80211ad4:	0039883a 	mov	fp,zero
80211ad8:	4802a626 	beq	r9,zero,80212574 <___vfiprintf_internal_r+0x1408>
80211adc:	0025883a 	mov	r18,zero
80211ae0:	0027883a 	mov	r19,zero
80211ae4:	003f5a06 	br	80211850 <__reset+0xfa1f1850>
80211ae8:	21003fcc 	andi	r4,r4,255
80211aec:	20029f1e 	bne	r4,zero,8021256c <___vfiprintf_internal_r+0x1400>
80211af0:	a5000414 	ori	r20,r20,16
80211af4:	a080080c 	andi	r2,r20,32
80211af8:	10005e1e 	bne	r2,zero,80211c74 <___vfiprintf_internal_r+0xb08>
80211afc:	a080040c 	andi	r2,r20,16
80211b00:	1001a21e 	bne	r2,zero,8021218c <___vfiprintf_internal_r+0x1020>
80211b04:	a080100c 	andi	r2,r20,64
80211b08:	d8001d85 	stb	zero,118(sp)
80211b0c:	da802217 	ldw	r10,136(sp)
80211b10:	1002231e 	bne	r2,zero,802123a0 <___vfiprintf_internal_r+0x1234>
80211b14:	50800104 	addi	r2,r10,4
80211b18:	54800017 	ldw	r18,0(r10)
80211b1c:	0027883a 	mov	r19,zero
80211b20:	4801a00e 	bge	r9,zero,802121a4 <___vfiprintf_internal_r+0x1038>
80211b24:	d8802215 	stw	r2,136(sp)
80211b28:	0039883a 	mov	fp,zero
80211b2c:	94c4b03a 	or	r2,r18,r19
80211b30:	103f901e 	bne	r2,zero,80211974 <__reset+0xfa1f1974>
80211b34:	00800044 	movi	r2,1
80211b38:	10803fcc 	andi	r2,r2,255
80211b3c:	00c00044 	movi	r3,1
80211b40:	10c05926 	beq	r2,r3,80211ca8 <___vfiprintf_internal_r+0xb3c>
80211b44:	00c00084 	movi	r3,2
80211b48:	10ffe41e 	bne	r2,r3,80211adc <__reset+0xfa1f1adc>
80211b4c:	0025883a 	mov	r18,zero
80211b50:	0027883a 	mov	r19,zero
80211b54:	00013d06 	br	8021204c <___vfiprintf_internal_r+0xee0>
80211b58:	21003fcc 	andi	r4,r4,255
80211b5c:	2002811e 	bne	r4,zero,80212564 <___vfiprintf_internal_r+0x13f8>
80211b60:	00a008b4 	movhi	r2,32802
80211b64:	10b3e904 	addi	r2,r2,-12380
80211b68:	d8802615 	stw	r2,152(sp)
80211b6c:	a080080c 	andi	r2,r20,32
80211b70:	103f561e 	bne	r2,zero,802118cc <__reset+0xfa1f18cc>
80211b74:	a080040c 	andi	r2,r20,16
80211b78:	1001d126 	beq	r2,zero,802122c0 <___vfiprintf_internal_r+0x1154>
80211b7c:	da802217 	ldw	r10,136(sp)
80211b80:	0027883a 	mov	r19,zero
80211b84:	54800017 	ldw	r18,0(r10)
80211b88:	52800104 	addi	r10,r10,4
80211b8c:	da802215 	stw	r10,136(sp)
80211b90:	003f5306 	br	802118e0 <__reset+0xfa1f18e0>
80211b94:	da802217 	ldw	r10,136(sp)
80211b98:	d8001d85 	stb	zero,118(sp)
80211b9c:	55400017 	ldw	r21,0(r10)
80211ba0:	50c00104 	addi	r3,r10,4
80211ba4:	a8024226 	beq	r21,zero,802124b0 <___vfiprintf_internal_r+0x1344>
80211ba8:	48021816 	blt	r9,zero,8021240c <___vfiprintf_internal_r+0x12a0>
80211bac:	480d883a 	mov	r6,r9
80211bb0:	000b883a 	mov	r5,zero
80211bb4:	a809883a 	mov	r4,r21
80211bb8:	d8c02a15 	stw	r3,168(sp)
80211bbc:	da002b15 	stw	r8,172(sp)
80211bc0:	da402c15 	stw	r9,176(sp)
80211bc4:	020e0a40 	call	8020e0a4 <memchr>
80211bc8:	d8c02a17 	ldw	r3,168(sp)
80211bcc:	da002b17 	ldw	r8,172(sp)
80211bd0:	da402c17 	ldw	r9,176(sp)
80211bd4:	10024826 	beq	r2,zero,802124f8 <___vfiprintf_internal_r+0x138c>
80211bd8:	1567c83a 	sub	r19,r2,r21
80211bdc:	df001d83 	ldbu	fp,118(sp)
80211be0:	d8c02215 	stw	r3,136(sp)
80211be4:	0013883a 	mov	r9,zero
80211be8:	003e6006 	br	8021156c <__reset+0xfa1f156c>
80211bec:	21003fcc 	andi	r4,r4,255
80211bf0:	203fc026 	beq	r4,zero,80211af4 <__reset+0xfa1f1af4>
80211bf4:	d9c01d85 	stb	r7,118(sp)
80211bf8:	003fbe06 	br	80211af4 <__reset+0xfa1f1af4>
80211bfc:	da802217 	ldw	r10,136(sp)
80211c00:	54400017 	ldw	r17,0(r10)
80211c04:	50800104 	addi	r2,r10,4
80211c08:	883e3b16 	blt	r17,zero,802114f8 <__reset+0xfa1f14f8>
80211c0c:	d8802215 	stw	r2,136(sp)
80211c10:	80c00007 	ldb	r3,0(r16)
80211c14:	003db406 	br	802112e8 <__reset+0xfa1f12e8>
80211c18:	01000044 	movi	r4,1
80211c1c:	01c00ac4 	movi	r7,43
80211c20:	80c00007 	ldb	r3,0(r16)
80211c24:	003db006 	br	802112e8 <__reset+0xfa1f12e8>
80211c28:	80c00007 	ldb	r3,0(r16)
80211c2c:	82800044 	addi	r10,r16,1
80211c30:	1b423c26 	beq	r3,r13,80212524 <___vfiprintf_internal_r+0x13b8>
80211c34:	18bff404 	addi	r2,r3,-48
80211c38:	0013883a 	mov	r9,zero
80211c3c:	30822b36 	bltu	r6,r2,802124ec <___vfiprintf_internal_r+0x1380>
80211c40:	50c00007 	ldb	r3,0(r10)
80211c44:	4a4002a4 	muli	r9,r9,10
80211c48:	54000044 	addi	r16,r10,1
80211c4c:	8015883a 	mov	r10,r16
80211c50:	4893883a 	add	r9,r9,r2
80211c54:	18bff404 	addi	r2,r3,-48
80211c58:	30bff92e 	bgeu	r6,r2,80211c40 <__reset+0xfa1f1c40>
80211c5c:	483da30e 	bge	r9,zero,802112ec <__reset+0xfa1f12ec>
80211c60:	027fffc4 	movi	r9,-1
80211c64:	003da106 	br	802112ec <__reset+0xfa1f12ec>
80211c68:	a5001014 	ori	r20,r20,64
80211c6c:	80c00007 	ldb	r3,0(r16)
80211c70:	003d9d06 	br	802112e8 <__reset+0xfa1f12e8>
80211c74:	da802217 	ldw	r10,136(sp)
80211c78:	d8001d85 	stb	zero,118(sp)
80211c7c:	50c00204 	addi	r3,r10,8
80211c80:	54800017 	ldw	r18,0(r10)
80211c84:	54c00117 	ldw	r19,4(r10)
80211c88:	4801ca16 	blt	r9,zero,802123b4 <___vfiprintf_internal_r+0x1248>
80211c8c:	013fdfc4 	movi	r4,-129
80211c90:	94c4b03a 	or	r2,r18,r19
80211c94:	d8c02215 	stw	r3,136(sp)
80211c98:	a128703a 	and	r20,r20,r4
80211c9c:	0039883a 	mov	fp,zero
80211ca0:	103f341e 	bne	r2,zero,80211974 <__reset+0xfa1f1974>
80211ca4:	483e2e26 	beq	r9,zero,80211560 <__reset+0xfa1f1560>
80211ca8:	0025883a 	mov	r18,zero
80211cac:	94800c04 	addi	r18,r18,48
80211cb0:	dc8019c5 	stb	r18,103(sp)
80211cb4:	dcc02717 	ldw	r19,156(sp)
80211cb8:	dd4019c4 	addi	r21,sp,103
80211cbc:	003e2b06 	br	8021156c <__reset+0xfa1f156c>
80211cc0:	21003fcc 	andi	r4,r4,255
80211cc4:	2002361e 	bne	r4,zero,802125a0 <___vfiprintf_internal_r+0x1434>
80211cc8:	1801c126 	beq	r3,zero,802123d0 <___vfiprintf_internal_r+0x1264>
80211ccc:	04800044 	movi	r18,1
80211cd0:	d8c01005 	stb	r3,64(sp)
80211cd4:	d8001d85 	stb	zero,118(sp)
80211cd8:	9027883a 	mov	r19,r18
80211cdc:	dd401004 	addi	r21,sp,64
80211ce0:	003f1106 	br	80211928 <__reset+0xfa1f1928>
80211ce4:	d9402117 	ldw	r5,132(sp)
80211ce8:	d9002017 	ldw	r4,128(sp)
80211cec:	d9801a04 	addi	r6,sp,104
80211cf0:	d9c02b15 	stw	r7,172(sp)
80211cf4:	dbc02a15 	stw	r15,168(sp)
80211cf8:	02110580 	call	80211058 <__sprint_r.part.0>
80211cfc:	d9c02b17 	ldw	r7,172(sp)
80211d00:	dbc02a17 	ldw	r15,168(sp)
80211d04:	10006d1e 	bne	r2,zero,80211ebc <___vfiprintf_internal_r+0xd50>
80211d08:	d9801b17 	ldw	r6,108(sp)
80211d0c:	d8801c17 	ldw	r2,112(sp)
80211d10:	d811883a 	mov	r8,sp
80211d14:	31400044 	addi	r5,r6,1
80211d18:	003e3306 	br	802115e8 <__reset+0xfa1f15e8>
80211d1c:	d9401b17 	ldw	r5,108(sp)
80211d20:	d8801c17 	ldw	r2,112(sp)
80211d24:	29000044 	addi	r4,r5,1
80211d28:	d8c01d87 	ldb	r3,118(sp)
80211d2c:	183e4d26 	beq	r3,zero,80211664 <__reset+0xfa1f1664>
80211d30:	00c00044 	movi	r3,1
80211d34:	d9401d84 	addi	r5,sp,118
80211d38:	10c5883a 	add	r2,r2,r3
80211d3c:	41400015 	stw	r5,0(r8)
80211d40:	40c00115 	stw	r3,4(r8)
80211d44:	d8801c15 	stw	r2,112(sp)
80211d48:	d9001b15 	stw	r4,108(sp)
80211d4c:	014001c4 	movi	r5,7
80211d50:	2900a90e 	bge	r5,r4,80211ff8 <___vfiprintf_internal_r+0xe8c>
80211d54:	1000da1e 	bne	r2,zero,802120c0 <___vfiprintf_internal_r+0xf54>
80211d58:	7000ab1e 	bne	r14,zero,80212008 <___vfiprintf_internal_r+0xe9c>
80211d5c:	000b883a 	mov	r5,zero
80211d60:	1809883a 	mov	r4,r3
80211d64:	d811883a 	mov	r8,sp
80211d68:	00c02004 	movi	r3,128
80211d6c:	e0fe4d26 	beq	fp,r3,802116a4 <__reset+0xfa1f16a4>
80211d70:	4cf9c83a 	sub	fp,r9,r19
80211d74:	073e7b0e 	bge	zero,fp,80211764 <__reset+0xfa1f1764>
80211d78:	01c00404 	movi	r7,16
80211d7c:	3f01900e 	bge	r7,fp,802123c0 <___vfiprintf_internal_r+0x1254>
80211d80:	00e008b4 	movhi	r3,32802
80211d84:	18f45e04 	addi	r3,r3,-11912
80211d88:	d8c02415 	stw	r3,144(sp)
80211d8c:	034001c4 	movi	r13,7
80211d90:	00000506 	br	80211da8 <___vfiprintf_internal_r+0xc3c>
80211d94:	29000084 	addi	r4,r5,2
80211d98:	42000204 	addi	r8,r8,8
80211d9c:	180b883a 	mov	r5,r3
80211da0:	e73ffc04 	addi	fp,fp,-16
80211da4:	3f000d0e 	bge	r7,fp,80211ddc <___vfiprintf_internal_r+0xc70>
80211da8:	10800404 	addi	r2,r2,16
80211dac:	28c00044 	addi	r3,r5,1
80211db0:	45c00015 	stw	r23,0(r8)
80211db4:	41c00115 	stw	r7,4(r8)
80211db8:	d8801c15 	stw	r2,112(sp)
80211dbc:	d8c01b15 	stw	r3,108(sp)
80211dc0:	68fff40e 	bge	r13,r3,80211d94 <__reset+0xfa1f1d94>
80211dc4:	1000101e 	bne	r2,zero,80211e08 <___vfiprintf_internal_r+0xc9c>
80211dc8:	e73ffc04 	addi	fp,fp,-16
80211dcc:	01000044 	movi	r4,1
80211dd0:	000b883a 	mov	r5,zero
80211dd4:	d811883a 	mov	r8,sp
80211dd8:	3f3ff316 	blt	r7,fp,80211da8 <__reset+0xfa1f1da8>
80211ddc:	da802417 	ldw	r10,144(sp)
80211de0:	1705883a 	add	r2,r2,fp
80211de4:	47000115 	stw	fp,4(r8)
80211de8:	42800015 	stw	r10,0(r8)
80211dec:	d8801c15 	stw	r2,112(sp)
80211df0:	d9001b15 	stw	r4,108(sp)
80211df4:	00c001c4 	movi	r3,7
80211df8:	19003616 	blt	r3,r4,80211ed4 <___vfiprintf_internal_r+0xd68>
80211dfc:	42000204 	addi	r8,r8,8
80211e00:	21000044 	addi	r4,r4,1
80211e04:	003e5706 	br	80211764 <__reset+0xfa1f1764>
80211e08:	d9402117 	ldw	r5,132(sp)
80211e0c:	d9002017 	ldw	r4,128(sp)
80211e10:	d9801a04 	addi	r6,sp,104
80211e14:	d9c02b15 	stw	r7,172(sp)
80211e18:	db402a15 	stw	r13,168(sp)
80211e1c:	02110580 	call	80211058 <__sprint_r.part.0>
80211e20:	d9c02b17 	ldw	r7,172(sp)
80211e24:	db402a17 	ldw	r13,168(sp)
80211e28:	1000241e 	bne	r2,zero,80211ebc <___vfiprintf_internal_r+0xd50>
80211e2c:	d9401b17 	ldw	r5,108(sp)
80211e30:	d8801c17 	ldw	r2,112(sp)
80211e34:	d811883a 	mov	r8,sp
80211e38:	29000044 	addi	r4,r5,1
80211e3c:	003fd806 	br	80211da0 <__reset+0xfa1f1da0>
80211e40:	d9401b17 	ldw	r5,108(sp)
80211e44:	00e008b4 	movhi	r3,32802
80211e48:	18f46204 	addi	r3,r3,-11896
80211e4c:	d8c02415 	stw	r3,144(sp)
80211e50:	29400044 	addi	r5,r5,1
80211e54:	d8c02417 	ldw	r3,144(sp)
80211e58:	14c5883a 	add	r2,r2,r19
80211e5c:	44c00115 	stw	r19,4(r8)
80211e60:	40c00015 	stw	r3,0(r8)
80211e64:	d8801c15 	stw	r2,112(sp)
80211e68:	d9401b15 	stw	r5,108(sp)
80211e6c:	00c001c4 	movi	r3,7
80211e70:	1940070e 	bge	r3,r5,80211e90 <___vfiprintf_internal_r+0xd24>
80211e74:	103e4826 	beq	r2,zero,80211798 <__reset+0xfa1f1798>
80211e78:	d9402117 	ldw	r5,132(sp)
80211e7c:	d9002017 	ldw	r4,128(sp)
80211e80:	d9801a04 	addi	r6,sp,104
80211e84:	02110580 	call	80211058 <__sprint_r.part.0>
80211e88:	10000c1e 	bne	r2,zero,80211ebc <___vfiprintf_internal_r+0xd50>
80211e8c:	d8801c17 	ldw	r2,112(sp)
80211e90:	8c80010e 	bge	r17,r18,80211e98 <___vfiprintf_internal_r+0xd2c>
80211e94:	9023883a 	mov	r17,r18
80211e98:	da802317 	ldw	r10,140(sp)
80211e9c:	5455883a 	add	r10,r10,r17
80211ea0:	da802315 	stw	r10,140(sp)
80211ea4:	103e4126 	beq	r2,zero,802117ac <__reset+0xfa1f17ac>
80211ea8:	d9402117 	ldw	r5,132(sp)
80211eac:	d9002017 	ldw	r4,128(sp)
80211eb0:	d9801a04 	addi	r6,sp,104
80211eb4:	02110580 	call	80211058 <__sprint_r.part.0>
80211eb8:	103e3c26 	beq	r2,zero,802117ac <__reset+0xfa1f17ac>
80211ebc:	dd002117 	ldw	r20,132(sp)
80211ec0:	a080030b 	ldhu	r2,12(r20)
80211ec4:	1080100c 	andi	r2,r2,64
80211ec8:	1001231e 	bne	r2,zero,80212358 <___vfiprintf_internal_r+0x11ec>
80211ecc:	d8802317 	ldw	r2,140(sp)
80211ed0:	003d7b06 	br	802114c0 <__reset+0xfa1f14c0>
80211ed4:	1000991e 	bne	r2,zero,8021213c <___vfiprintf_internal_r+0xfd0>
80211ed8:	00c00044 	movi	r3,1
80211edc:	9805883a 	mov	r2,r19
80211ee0:	dd400015 	stw	r21,0(sp)
80211ee4:	dcc00115 	stw	r19,4(sp)
80211ee8:	dcc01c15 	stw	r19,112(sp)
80211eec:	d8c01b15 	stw	r3,108(sp)
80211ef0:	d811883a 	mov	r8,sp
80211ef4:	42000204 	addi	r8,r8,8
80211ef8:	a2c0010c 	andi	r11,r20,4
80211efc:	583fe426 	beq	r11,zero,80211e90 <__reset+0xfa1f1e90>
80211f00:	8ca7c83a 	sub	r19,r17,r18
80211f04:	04ffe20e 	bge	zero,r19,80211e90 <__reset+0xfa1f1e90>
80211f08:	01c00404 	movi	r7,16
80211f0c:	3cffcc0e 	bge	r7,r19,80211e40 <__reset+0xfa1f1e40>
80211f10:	02a008b4 	movhi	r10,32802
80211f14:	52b46204 	addi	r10,r10,-11896
80211f18:	d9001b17 	ldw	r4,108(sp)
80211f1c:	da802415 	stw	r10,144(sp)
80211f20:	382b883a 	mov	r21,r7
80211f24:	050001c4 	movi	r20,7
80211f28:	df002017 	ldw	fp,128(sp)
80211f2c:	00000506 	br	80211f44 <___vfiprintf_internal_r+0xdd8>
80211f30:	21400084 	addi	r5,r4,2
80211f34:	42000204 	addi	r8,r8,8
80211f38:	1809883a 	mov	r4,r3
80211f3c:	9cfffc04 	addi	r19,r19,-16
80211f40:	acffc40e 	bge	r21,r19,80211e54 <__reset+0xfa1f1e54>
80211f44:	10800404 	addi	r2,r2,16
80211f48:	20c00044 	addi	r3,r4,1
80211f4c:	45800015 	stw	r22,0(r8)
80211f50:	45400115 	stw	r21,4(r8)
80211f54:	d8801c15 	stw	r2,112(sp)
80211f58:	d8c01b15 	stw	r3,108(sp)
80211f5c:	a0fff40e 	bge	r20,r3,80211f30 <__reset+0xfa1f1f30>
80211f60:	1000041e 	bne	r2,zero,80211f74 <___vfiprintf_internal_r+0xe08>
80211f64:	01400044 	movi	r5,1
80211f68:	0009883a 	mov	r4,zero
80211f6c:	d811883a 	mov	r8,sp
80211f70:	003ff206 	br	80211f3c <__reset+0xfa1f1f3c>
80211f74:	d9402117 	ldw	r5,132(sp)
80211f78:	d9801a04 	addi	r6,sp,104
80211f7c:	e009883a 	mov	r4,fp
80211f80:	02110580 	call	80211058 <__sprint_r.part.0>
80211f84:	103fcd1e 	bne	r2,zero,80211ebc <__reset+0xfa1f1ebc>
80211f88:	d9001b17 	ldw	r4,108(sp)
80211f8c:	d8801c17 	ldw	r2,112(sp)
80211f90:	d811883a 	mov	r8,sp
80211f94:	21400044 	addi	r5,r4,1
80211f98:	003fe806 	br	80211f3c <__reset+0xfa1f1f3c>
80211f9c:	d9402117 	ldw	r5,132(sp)
80211fa0:	d9002017 	ldw	r4,128(sp)
80211fa4:	d9801a04 	addi	r6,sp,104
80211fa8:	d9c02b15 	stw	r7,172(sp)
80211fac:	db402a15 	stw	r13,168(sp)
80211fb0:	02110580 	call	80211058 <__sprint_r.part.0>
80211fb4:	d9c02b17 	ldw	r7,172(sp)
80211fb8:	db402a17 	ldw	r13,168(sp)
80211fbc:	103fbf1e 	bne	r2,zero,80211ebc <__reset+0xfa1f1ebc>
80211fc0:	d9401b17 	ldw	r5,108(sp)
80211fc4:	d8801c17 	ldw	r2,112(sp)
80211fc8:	d811883a 	mov	r8,sp
80211fcc:	29800044 	addi	r6,r5,1
80211fd0:	003dc406 	br	802116e4 <__reset+0xfa1f16e4>
80211fd4:	1000d21e 	bne	r2,zero,80212320 <___vfiprintf_internal_r+0x11b4>
80211fd8:	d8c01d87 	ldb	r3,118(sp)
80211fdc:	18009526 	beq	r3,zero,80212234 <___vfiprintf_internal_r+0x10c8>
80211fe0:	00800044 	movi	r2,1
80211fe4:	d8c01d84 	addi	r3,sp,118
80211fe8:	1009883a 	mov	r4,r2
80211fec:	d8c00015 	stw	r3,0(sp)
80211ff0:	d8800115 	stw	r2,4(sp)
80211ff4:	d811883a 	mov	r8,sp
80211ff8:	200b883a 	mov	r5,r4
80211ffc:	42000204 	addi	r8,r8,8
80212000:	21000044 	addi	r4,r4,1
80212004:	003d9706 	br	80211664 <__reset+0xfa1f1664>
80212008:	d9001d04 	addi	r4,sp,116
8021200c:	00800084 	movi	r2,2
80212010:	d9000015 	stw	r4,0(sp)
80212014:	d8800115 	stw	r2,4(sp)
80212018:	1809883a 	mov	r4,r3
8021201c:	d811883a 	mov	r8,sp
80212020:	200b883a 	mov	r5,r4
80212024:	42000204 	addi	r8,r8,8
80212028:	21000044 	addi	r4,r4,1
8021202c:	003f4e06 	br	80211d68 <__reset+0xfa1f1d68>
80212030:	d8001d85 	stb	zero,118(sp)
80212034:	48005016 	blt	r9,zero,80212178 <___vfiprintf_internal_r+0x100c>
80212038:	00ffdfc4 	movi	r3,-129
8021203c:	94c4b03a 	or	r2,r18,r19
80212040:	a0e8703a 	and	r20,r20,r3
80212044:	103d4426 	beq	r2,zero,80211558 <__reset+0xfa1f1558>
80212048:	0039883a 	mov	fp,zero
8021204c:	d9002617 	ldw	r4,152(sp)
80212050:	dd401a04 	addi	r21,sp,104
80212054:	908003cc 	andi	r2,r18,15
80212058:	9806973a 	slli	r3,r19,28
8021205c:	2085883a 	add	r2,r4,r2
80212060:	9024d13a 	srli	r18,r18,4
80212064:	10800003 	ldbu	r2,0(r2)
80212068:	9826d13a 	srli	r19,r19,4
8021206c:	ad7fffc4 	addi	r21,r21,-1
80212070:	1ca4b03a 	or	r18,r3,r18
80212074:	a8800005 	stb	r2,0(r21)
80212078:	94c4b03a 	or	r2,r18,r19
8021207c:	103ff51e 	bne	r2,zero,80212054 <__reset+0xfa1f2054>
80212080:	003e5906 	br	802119e8 <__reset+0xfa1f19e8>
80212084:	d9402117 	ldw	r5,132(sp)
80212088:	d9002017 	ldw	r4,128(sp)
8021208c:	d9801a04 	addi	r6,sp,104
80212090:	02110580 	call	80211058 <__sprint_r.part.0>
80212094:	103f891e 	bne	r2,zero,80211ebc <__reset+0xfa1f1ebc>
80212098:	d8801c17 	ldw	r2,112(sp)
8021209c:	d811883a 	mov	r8,sp
802120a0:	003f9506 	br	80211ef8 <__reset+0xfa1f1ef8>
802120a4:	d9402117 	ldw	r5,132(sp)
802120a8:	d9002017 	ldw	r4,128(sp)
802120ac:	d9801a04 	addi	r6,sp,104
802120b0:	02110580 	call	80211058 <__sprint_r.part.0>
802120b4:	103f811e 	bne	r2,zero,80211ebc <__reset+0xfa1f1ebc>
802120b8:	d811883a 	mov	r8,sp
802120bc:	003ced06 	br	80211474 <__reset+0xfa1f1474>
802120c0:	d9402117 	ldw	r5,132(sp)
802120c4:	d9002017 	ldw	r4,128(sp)
802120c8:	d9801a04 	addi	r6,sp,104
802120cc:	da402c15 	stw	r9,176(sp)
802120d0:	db802a15 	stw	r14,168(sp)
802120d4:	02110580 	call	80211058 <__sprint_r.part.0>
802120d8:	da402c17 	ldw	r9,176(sp)
802120dc:	db802a17 	ldw	r14,168(sp)
802120e0:	103f761e 	bne	r2,zero,80211ebc <__reset+0xfa1f1ebc>
802120e4:	d9401b17 	ldw	r5,108(sp)
802120e8:	d8801c17 	ldw	r2,112(sp)
802120ec:	d811883a 	mov	r8,sp
802120f0:	29000044 	addi	r4,r5,1
802120f4:	003d5b06 	br	80211664 <__reset+0xfa1f1664>
802120f8:	d9402117 	ldw	r5,132(sp)
802120fc:	d9002017 	ldw	r4,128(sp)
80212100:	d9801a04 	addi	r6,sp,104
80212104:	da402c15 	stw	r9,176(sp)
80212108:	02110580 	call	80211058 <__sprint_r.part.0>
8021210c:	da402c17 	ldw	r9,176(sp)
80212110:	103f6a1e 	bne	r2,zero,80211ebc <__reset+0xfa1f1ebc>
80212114:	d9401b17 	ldw	r5,108(sp)
80212118:	d8801c17 	ldw	r2,112(sp)
8021211c:	d811883a 	mov	r8,sp
80212120:	29000044 	addi	r4,r5,1
80212124:	003f1006 	br	80211d68 <__reset+0xfa1f1d68>
80212128:	1000c31e 	bne	r2,zero,80212438 <___vfiprintf_internal_r+0x12cc>
8021212c:	01000044 	movi	r4,1
80212130:	000b883a 	mov	r5,zero
80212134:	d811883a 	mov	r8,sp
80212138:	003f0d06 	br	80211d70 <__reset+0xfa1f1d70>
8021213c:	d9402117 	ldw	r5,132(sp)
80212140:	d9002017 	ldw	r4,128(sp)
80212144:	d9801a04 	addi	r6,sp,104
80212148:	02110580 	call	80211058 <__sprint_r.part.0>
8021214c:	103f5b1e 	bne	r2,zero,80211ebc <__reset+0xfa1f1ebc>
80212150:	d9001b17 	ldw	r4,108(sp)
80212154:	d8801c17 	ldw	r2,112(sp)
80212158:	d811883a 	mov	r8,sp
8021215c:	21000044 	addi	r4,r4,1
80212160:	003d8006 	br	80211764 <__reset+0xfa1f1764>
80212164:	012008b4 	movhi	r4,32802
80212168:	2133ee04 	addi	r4,r4,-12360
8021216c:	d9002615 	stw	r4,152(sp)
80212170:	d8c02215 	stw	r3,136(sp)
80212174:	1029883a 	mov	r20,r2
80212178:	94c4b03a 	or	r2,r18,r19
8021217c:	103fb21e 	bne	r2,zero,80212048 <__reset+0xfa1f2048>
80212180:	0039883a 	mov	fp,zero
80212184:	00800084 	movi	r2,2
80212188:	003e6b06 	br	80211b38 <__reset+0xfa1f1b38>
8021218c:	da802217 	ldw	r10,136(sp)
80212190:	d8001d85 	stb	zero,118(sp)
80212194:	0027883a 	mov	r19,zero
80212198:	50800104 	addi	r2,r10,4
8021219c:	54800017 	ldw	r18,0(r10)
802121a0:	483e6016 	blt	r9,zero,80211b24 <__reset+0xfa1f1b24>
802121a4:	00ffdfc4 	movi	r3,-129
802121a8:	d8802215 	stw	r2,136(sp)
802121ac:	a0e8703a 	and	r20,r20,r3
802121b0:	0039883a 	mov	fp,zero
802121b4:	903ebb26 	beq	r18,zero,80211ca4 <__reset+0xfa1f1ca4>
802121b8:	00800244 	movi	r2,9
802121bc:	14bdee36 	bltu	r2,r18,80211978 <__reset+0xfa1f1978>
802121c0:	003eba06 	br	80211cac <__reset+0xfa1f1cac>
802121c4:	00800c04 	movi	r2,48
802121c8:	d8c01d45 	stb	r3,117(sp)
802121cc:	d8801d05 	stb	r2,116(sp)
802121d0:	d8001d85 	stb	zero,118(sp)
802121d4:	a0c00094 	ori	r3,r20,2
802121d8:	4800a916 	blt	r9,zero,80212480 <___vfiprintf_internal_r+0x1314>
802121dc:	00bfdfc4 	movi	r2,-129
802121e0:	a096703a 	and	r11,r20,r2
802121e4:	5d000094 	ori	r20,r11,2
802121e8:	0039883a 	mov	fp,zero
802121ec:	003f9706 	br	8021204c <__reset+0xfa1f204c>
802121f0:	8025883a 	mov	r18,r16
802121f4:	003c2e06 	br	802112b0 <__reset+0xfa1f12b0>
802121f8:	00a008b4 	movhi	r2,32802
802121fc:	10b3ee04 	addi	r2,r2,-12360
80212200:	0039883a 	mov	fp,zero
80212204:	d8802615 	stw	r2,152(sp)
80212208:	003f9006 	br	8021204c <__reset+0xfa1f204c>
8021220c:	04a5c83a 	sub	r18,zero,r18
80212210:	07000b44 	movi	fp,45
80212214:	9004c03a 	cmpne	r2,r18,zero
80212218:	04e7c83a 	sub	r19,zero,r19
8021221c:	df001d85 	stb	fp,118(sp)
80212220:	98a7c83a 	sub	r19,r19,r2
80212224:	48009f16 	blt	r9,zero,802124a4 <___vfiprintf_internal_r+0x1338>
80212228:	00bfdfc4 	movi	r2,-129
8021222c:	a0a8703a 	and	r20,r20,r2
80212230:	003dd006 	br	80211974 <__reset+0xfa1f1974>
80212234:	70004c26 	beq	r14,zero,80212368 <___vfiprintf_internal_r+0x11fc>
80212238:	00800084 	movi	r2,2
8021223c:	d8c01d04 	addi	r3,sp,116
80212240:	d8c00015 	stw	r3,0(sp)
80212244:	d8800115 	stw	r2,4(sp)
80212248:	01000044 	movi	r4,1
8021224c:	d811883a 	mov	r8,sp
80212250:	003f7306 	br	80212020 <__reset+0xfa1f2020>
80212254:	a080100c 	andi	r2,r20,64
80212258:	da802217 	ldw	r10,136(sp)
8021225c:	103e0626 	beq	r2,zero,80211a78 <__reset+0xfa1f1a78>
80212260:	5480000f 	ldh	r18,0(r10)
80212264:	52800104 	addi	r10,r10,4
80212268:	da802215 	stw	r10,136(sp)
8021226c:	9027d7fa 	srai	r19,r18,31
80212270:	9805883a 	mov	r2,r19
80212274:	003db806 	br	80211958 <__reset+0xfa1f1958>
80212278:	a080040c 	andi	r2,r20,16
8021227c:	1000091e 	bne	r2,zero,802122a4 <___vfiprintf_internal_r+0x1138>
80212280:	a2c0100c 	andi	r11,r20,64
80212284:	58000726 	beq	r11,zero,802122a4 <___vfiprintf_internal_r+0x1138>
80212288:	da802217 	ldw	r10,136(sp)
8021228c:	50800017 	ldw	r2,0(r10)
80212290:	52800104 	addi	r10,r10,4
80212294:	da802215 	stw	r10,136(sp)
80212298:	da802317 	ldw	r10,140(sp)
8021229c:	1280000d 	sth	r10,0(r2)
802122a0:	003be706 	br	80211240 <__reset+0xfa1f1240>
802122a4:	da802217 	ldw	r10,136(sp)
802122a8:	50800017 	ldw	r2,0(r10)
802122ac:	52800104 	addi	r10,r10,4
802122b0:	da802215 	stw	r10,136(sp)
802122b4:	da802317 	ldw	r10,140(sp)
802122b8:	12800015 	stw	r10,0(r2)
802122bc:	003be006 	br	80211240 <__reset+0xfa1f1240>
802122c0:	a080100c 	andi	r2,r20,64
802122c4:	da802217 	ldw	r10,136(sp)
802122c8:	10003026 	beq	r2,zero,8021238c <___vfiprintf_internal_r+0x1220>
802122cc:	5480000b 	ldhu	r18,0(r10)
802122d0:	52800104 	addi	r10,r10,4
802122d4:	0027883a 	mov	r19,zero
802122d8:	da802215 	stw	r10,136(sp)
802122dc:	003d8006 	br	802118e0 <__reset+0xfa1f18e0>
802122e0:	80c00007 	ldb	r3,0(r16)
802122e4:	003c0006 	br	802112e8 <__reset+0xfa1f12e8>
802122e8:	a080100c 	andi	r2,r20,64
802122ec:	d8001d85 	stb	zero,118(sp)
802122f0:	da802217 	ldw	r10,136(sp)
802122f4:	1000201e 	bne	r2,zero,80212378 <___vfiprintf_internal_r+0x120c>
802122f8:	50800104 	addi	r2,r10,4
802122fc:	54800017 	ldw	r18,0(r10)
80212300:	0027883a 	mov	r19,zero
80212304:	483def0e 	bge	r9,zero,80211ac4 <__reset+0xfa1f1ac4>
80212308:	94c6b03a 	or	r3,r18,r19
8021230c:	d8802215 	stw	r2,136(sp)
80212310:	183d4e1e 	bne	r3,zero,8021184c <__reset+0xfa1f184c>
80212314:	0039883a 	mov	fp,zero
80212318:	0005883a 	mov	r2,zero
8021231c:	003e0606 	br	80211b38 <__reset+0xfa1f1b38>
80212320:	d9402117 	ldw	r5,132(sp)
80212324:	d9002017 	ldw	r4,128(sp)
80212328:	d9801a04 	addi	r6,sp,104
8021232c:	da402c15 	stw	r9,176(sp)
80212330:	db802a15 	stw	r14,168(sp)
80212334:	02110580 	call	80211058 <__sprint_r.part.0>
80212338:	da402c17 	ldw	r9,176(sp)
8021233c:	db802a17 	ldw	r14,168(sp)
80212340:	103ede1e 	bne	r2,zero,80211ebc <__reset+0xfa1f1ebc>
80212344:	d9401b17 	ldw	r5,108(sp)
80212348:	d8801c17 	ldw	r2,112(sp)
8021234c:	d811883a 	mov	r8,sp
80212350:	29000044 	addi	r4,r5,1
80212354:	003e7406 	br	80211d28 <__reset+0xfa1f1d28>
80212358:	00bfffc4 	movi	r2,-1
8021235c:	003c5806 	br	802114c0 <__reset+0xfa1f14c0>
80212360:	d811883a 	mov	r8,sp
80212364:	003ee806 	br	80211f08 <__reset+0xfa1f1f08>
80212368:	000b883a 	mov	r5,zero
8021236c:	01000044 	movi	r4,1
80212370:	d811883a 	mov	r8,sp
80212374:	003e7c06 	br	80211d68 <__reset+0xfa1f1d68>
80212378:	50800104 	addi	r2,r10,4
8021237c:	5480000b 	ldhu	r18,0(r10)
80212380:	0027883a 	mov	r19,zero
80212384:	483dcf0e 	bge	r9,zero,80211ac4 <__reset+0xfa1f1ac4>
80212388:	003fdf06 	br	80212308 <__reset+0xfa1f2308>
8021238c:	54800017 	ldw	r18,0(r10)
80212390:	52800104 	addi	r10,r10,4
80212394:	0027883a 	mov	r19,zero
80212398:	da802215 	stw	r10,136(sp)
8021239c:	003d5006 	br	802118e0 <__reset+0xfa1f18e0>
802123a0:	50800104 	addi	r2,r10,4
802123a4:	5480000b 	ldhu	r18,0(r10)
802123a8:	0027883a 	mov	r19,zero
802123ac:	483f7d0e 	bge	r9,zero,802121a4 <__reset+0xfa1f21a4>
802123b0:	003ddc06 	br	80211b24 <__reset+0xfa1f1b24>
802123b4:	d8c02215 	stw	r3,136(sp)
802123b8:	0039883a 	mov	fp,zero
802123bc:	003ddb06 	br	80211b2c <__reset+0xfa1f1b2c>
802123c0:	02a008b4 	movhi	r10,32802
802123c4:	52b45e04 	addi	r10,r10,-11912
802123c8:	da802415 	stw	r10,144(sp)
802123cc:	003e8306 	br	80211ddc <__reset+0xfa1f1ddc>
802123d0:	d8801c17 	ldw	r2,112(sp)
802123d4:	dd002117 	ldw	r20,132(sp)
802123d8:	103eb926 	beq	r2,zero,80211ec0 <__reset+0xfa1f1ec0>
802123dc:	d9002017 	ldw	r4,128(sp)
802123e0:	d9801a04 	addi	r6,sp,104
802123e4:	a00b883a 	mov	r5,r20
802123e8:	02110580 	call	80211058 <__sprint_r.part.0>
802123ec:	003eb406 	br	80211ec0 <__reset+0xfa1f1ec0>
802123f0:	80c00043 	ldbu	r3,1(r16)
802123f4:	a5000814 	ori	r20,r20,32
802123f8:	84000044 	addi	r16,r16,1
802123fc:	18c03fcc 	andi	r3,r3,255
80212400:	18c0201c 	xori	r3,r3,128
80212404:	18ffe004 	addi	r3,r3,-128
80212408:	003bb706 	br	802112e8 <__reset+0xfa1f12e8>
8021240c:	a809883a 	mov	r4,r21
80212410:	d8c02a15 	stw	r3,168(sp)
80212414:	da002b15 	stw	r8,172(sp)
80212418:	02066240 	call	80206624 <strlen>
8021241c:	d8c02a17 	ldw	r3,168(sp)
80212420:	1027883a 	mov	r19,r2
80212424:	df001d83 	ldbu	fp,118(sp)
80212428:	d8c02215 	stw	r3,136(sp)
8021242c:	0013883a 	mov	r9,zero
80212430:	da002b17 	ldw	r8,172(sp)
80212434:	003c4d06 	br	8021156c <__reset+0xfa1f156c>
80212438:	d9402117 	ldw	r5,132(sp)
8021243c:	d9002017 	ldw	r4,128(sp)
80212440:	d9801a04 	addi	r6,sp,104
80212444:	da402c15 	stw	r9,176(sp)
80212448:	02110580 	call	80211058 <__sprint_r.part.0>
8021244c:	da402c17 	ldw	r9,176(sp)
80212450:	103e9a1e 	bne	r2,zero,80211ebc <__reset+0xfa1f1ebc>
80212454:	d9401b17 	ldw	r5,108(sp)
80212458:	d8801c17 	ldw	r2,112(sp)
8021245c:	d811883a 	mov	r8,sp
80212460:	29000044 	addi	r4,r5,1
80212464:	003e4206 	br	80211d70 <__reset+0xfa1f1d70>
80212468:	d9401b17 	ldw	r5,108(sp)
8021246c:	012008b4 	movhi	r4,32802
80212470:	21346204 	addi	r4,r4,-11896
80212474:	d9002415 	stw	r4,144(sp)
80212478:	29400044 	addi	r5,r5,1
8021247c:	003c6d06 	br	80211634 <__reset+0xfa1f1634>
80212480:	0039883a 	mov	fp,zero
80212484:	00800084 	movi	r2,2
80212488:	10803fcc 	andi	r2,r2,255
8021248c:	01000044 	movi	r4,1
80212490:	11001e26 	beq	r2,r4,8021250c <___vfiprintf_internal_r+0x13a0>
80212494:	01000084 	movi	r4,2
80212498:	11001e1e 	bne	r2,r4,80212514 <___vfiprintf_internal_r+0x13a8>
8021249c:	1829883a 	mov	r20,r3
802124a0:	003eea06 	br	8021204c <__reset+0xfa1f204c>
802124a4:	a007883a 	mov	r3,r20
802124a8:	00800044 	movi	r2,1
802124ac:	003ff606 	br	80212488 <__reset+0xfa1f2488>
802124b0:	00800184 	movi	r2,6
802124b4:	1240012e 	bgeu	r2,r9,802124bc <___vfiprintf_internal_r+0x1350>
802124b8:	1013883a 	mov	r9,r2
802124bc:	4827883a 	mov	r19,r9
802124c0:	4825883a 	mov	r18,r9
802124c4:	48001516 	blt	r9,zero,8021251c <___vfiprintf_internal_r+0x13b0>
802124c8:	056008b4 	movhi	r21,32802
802124cc:	d8c02215 	stw	r3,136(sp)
802124d0:	ad73f304 	addi	r21,r21,-12340
802124d4:	003d1406 	br	80211928 <__reset+0xfa1f1928>
802124d8:	02a008b4 	movhi	r10,32802
802124dc:	52b45e04 	addi	r10,r10,-11912
802124e0:	da802415 	stw	r10,144(sp)
802124e4:	200d883a 	mov	r6,r4
802124e8:	003c9106 	br	80211730 <__reset+0xfa1f1730>
802124ec:	5021883a 	mov	r16,r10
802124f0:	0013883a 	mov	r9,zero
802124f4:	003b7d06 	br	802112ec <__reset+0xfa1f12ec>
802124f8:	4827883a 	mov	r19,r9
802124fc:	df001d83 	ldbu	fp,118(sp)
80212500:	d8c02215 	stw	r3,136(sp)
80212504:	0013883a 	mov	r9,zero
80212508:	003c1806 	br	8021156c <__reset+0xfa1f156c>
8021250c:	1829883a 	mov	r20,r3
80212510:	003d1806 	br	80211974 <__reset+0xfa1f1974>
80212514:	1829883a 	mov	r20,r3
80212518:	003ccd06 	br	80211850 <__reset+0xfa1f1850>
8021251c:	0025883a 	mov	r18,zero
80212520:	003fe906 	br	802124c8 <__reset+0xfa1f24c8>
80212524:	d8802217 	ldw	r2,136(sp)
80212528:	80c00043 	ldbu	r3,1(r16)
8021252c:	5021883a 	mov	r16,r10
80212530:	12400017 	ldw	r9,0(r2)
80212534:	10800104 	addi	r2,r2,4
80212538:	d8802215 	stw	r2,136(sp)
8021253c:	483faf0e 	bge	r9,zero,802123fc <__reset+0xfa1f23fc>
80212540:	18c03fcc 	andi	r3,r3,255
80212544:	18c0201c 	xori	r3,r3,128
80212548:	027fffc4 	movi	r9,-1
8021254c:	18ffe004 	addi	r3,r3,-128
80212550:	003b6506 	br	802112e8 <__reset+0xfa1f12e8>
80212554:	d9c01d85 	stb	r7,118(sp)
80212558:	003ca006 	br	802117dc <__reset+0xfa1f17dc>
8021255c:	d9c01d85 	stb	r7,118(sp)
80212560:	003cad06 	br	80211818 <__reset+0xfa1f1818>
80212564:	d9c01d85 	stb	r7,118(sp)
80212568:	003d7d06 	br	80211b60 <__reset+0xfa1f1b60>
8021256c:	d9c01d85 	stb	r7,118(sp)
80212570:	003d5f06 	br	80211af0 <__reset+0xfa1f1af0>
80212574:	a080004c 	andi	r2,r20,1
80212578:	0039883a 	mov	fp,zero
8021257c:	10000526 	beq	r2,zero,80212594 <___vfiprintf_internal_r+0x1428>
80212580:	00800c04 	movi	r2,48
80212584:	d88019c5 	stb	r2,103(sp)
80212588:	dcc02717 	ldw	r19,156(sp)
8021258c:	dd4019c4 	addi	r21,sp,103
80212590:	003bf606 	br	8021156c <__reset+0xfa1f156c>
80212594:	0027883a 	mov	r19,zero
80212598:	dd401a04 	addi	r21,sp,104
8021259c:	003bf306 	br	8021156c <__reset+0xfa1f156c>
802125a0:	d9c01d85 	stb	r7,118(sp)
802125a4:	003dc806 	br	80211cc8 <__reset+0xfa1f1cc8>
802125a8:	d9c01d85 	stb	r7,118(sp)
802125ac:	003d3a06 	br	80211a98 <__reset+0xfa1f1a98>
802125b0:	d9c01d85 	stb	r7,118(sp)
802125b4:	003d2a06 	br	80211a60 <__reset+0xfa1f1a60>
802125b8:	d9c01d85 	stb	r7,118(sp)
802125bc:	003cde06 	br	80211938 <__reset+0xfa1f1938>
802125c0:	d9c01d85 	stb	r7,118(sp)
802125c4:	003cbc06 	br	802118b8 <__reset+0xfa1f18b8>

802125c8 <__vfiprintf_internal>:
802125c8:	00a008b4 	movhi	r2,32802
802125cc:	10bc2d04 	addi	r2,r2,-3916
802125d0:	300f883a 	mov	r7,r6
802125d4:	280d883a 	mov	r6,r5
802125d8:	200b883a 	mov	r5,r4
802125dc:	11000017 	ldw	r4,0(r2)
802125e0:	021116c1 	jmpi	8021116c <___vfiprintf_internal_r>

802125e4 <__sbprintf>:
802125e4:	2880030b 	ldhu	r2,12(r5)
802125e8:	2ac01917 	ldw	r11,100(r5)
802125ec:	2a80038b 	ldhu	r10,14(r5)
802125f0:	2a400717 	ldw	r9,28(r5)
802125f4:	2a000917 	ldw	r8,36(r5)
802125f8:	defee204 	addi	sp,sp,-1144
802125fc:	00c10004 	movi	r3,1024
80212600:	dc011a15 	stw	r16,1128(sp)
80212604:	10bfff4c 	andi	r2,r2,65533
80212608:	2821883a 	mov	r16,r5
8021260c:	d8cb883a 	add	r5,sp,r3
80212610:	dc811c15 	stw	r18,1136(sp)
80212614:	dc411b15 	stw	r17,1132(sp)
80212618:	dfc11d15 	stw	ra,1140(sp)
8021261c:	2025883a 	mov	r18,r4
80212620:	d881030d 	sth	r2,1036(sp)
80212624:	dac11915 	stw	r11,1124(sp)
80212628:	da81038d 	sth	r10,1038(sp)
8021262c:	da410715 	stw	r9,1052(sp)
80212630:	da010915 	stw	r8,1060(sp)
80212634:	dec10015 	stw	sp,1024(sp)
80212638:	dec10415 	stw	sp,1040(sp)
8021263c:	d8c10215 	stw	r3,1032(sp)
80212640:	d8c10515 	stw	r3,1044(sp)
80212644:	d8010615 	stw	zero,1048(sp)
80212648:	021116c0 	call	8021116c <___vfiprintf_internal_r>
8021264c:	1023883a 	mov	r17,r2
80212650:	10000416 	blt	r2,zero,80212664 <__sbprintf+0x80>
80212654:	d9410004 	addi	r5,sp,1024
80212658:	9009883a 	mov	r4,r18
8021265c:	020c75c0 	call	8020c75c <_fflush_r>
80212660:	10000d1e 	bne	r2,zero,80212698 <__sbprintf+0xb4>
80212664:	d881030b 	ldhu	r2,1036(sp)
80212668:	1080100c 	andi	r2,r2,64
8021266c:	10000326 	beq	r2,zero,8021267c <__sbprintf+0x98>
80212670:	8080030b 	ldhu	r2,12(r16)
80212674:	10801014 	ori	r2,r2,64
80212678:	8080030d 	sth	r2,12(r16)
8021267c:	8805883a 	mov	r2,r17
80212680:	dfc11d17 	ldw	ra,1140(sp)
80212684:	dc811c17 	ldw	r18,1136(sp)
80212688:	dc411b17 	ldw	r17,1132(sp)
8021268c:	dc011a17 	ldw	r16,1128(sp)
80212690:	dec11e04 	addi	sp,sp,1144
80212694:	f800283a 	ret
80212698:	047fffc4 	movi	r17,-1
8021269c:	003ff106 	br	80212664 <__reset+0xfa1f2664>

802126a0 <_write_r>:
802126a0:	defffd04 	addi	sp,sp,-12
802126a4:	2805883a 	mov	r2,r5
802126a8:	dc000015 	stw	r16,0(sp)
802126ac:	042008b4 	movhi	r16,32802
802126b0:	dc400115 	stw	r17,4(sp)
802126b4:	300b883a 	mov	r5,r6
802126b8:	843c4e04 	addi	r16,r16,-3784
802126bc:	2023883a 	mov	r17,r4
802126c0:	380d883a 	mov	r6,r7
802126c4:	1009883a 	mov	r4,r2
802126c8:	dfc00215 	stw	ra,8(sp)
802126cc:	80000015 	stw	zero,0(r16)
802126d0:	0216cb80 	call	80216cb8 <write>
802126d4:	00ffffc4 	movi	r3,-1
802126d8:	10c00526 	beq	r2,r3,802126f0 <_write_r+0x50>
802126dc:	dfc00217 	ldw	ra,8(sp)
802126e0:	dc400117 	ldw	r17,4(sp)
802126e4:	dc000017 	ldw	r16,0(sp)
802126e8:	dec00304 	addi	sp,sp,12
802126ec:	f800283a 	ret
802126f0:	80c00017 	ldw	r3,0(r16)
802126f4:	183ff926 	beq	r3,zero,802126dc <__reset+0xfa1f26dc>
802126f8:	88c00015 	stw	r3,0(r17)
802126fc:	003ff706 	br	802126dc <__reset+0xfa1f26dc>

80212700 <_close_r>:
80212700:	defffd04 	addi	sp,sp,-12
80212704:	dc000015 	stw	r16,0(sp)
80212708:	042008b4 	movhi	r16,32802
8021270c:	dc400115 	stw	r17,4(sp)
80212710:	843c4e04 	addi	r16,r16,-3784
80212714:	2023883a 	mov	r17,r4
80212718:	2809883a 	mov	r4,r5
8021271c:	dfc00215 	stw	ra,8(sp)
80212720:	80000015 	stw	zero,0(r16)
80212724:	02163a00 	call	802163a0 <close>
80212728:	00ffffc4 	movi	r3,-1
8021272c:	10c00526 	beq	r2,r3,80212744 <_close_r+0x44>
80212730:	dfc00217 	ldw	ra,8(sp)
80212734:	dc400117 	ldw	r17,4(sp)
80212738:	dc000017 	ldw	r16,0(sp)
8021273c:	dec00304 	addi	sp,sp,12
80212740:	f800283a 	ret
80212744:	80c00017 	ldw	r3,0(r16)
80212748:	183ff926 	beq	r3,zero,80212730 <__reset+0xfa1f2730>
8021274c:	88c00015 	stw	r3,0(r17)
80212750:	003ff706 	br	80212730 <__reset+0xfa1f2730>

80212754 <_calloc_r>:
80212754:	298b383a 	mul	r5,r5,r6
80212758:	defffe04 	addi	sp,sp,-8
8021275c:	dfc00115 	stw	ra,4(sp)
80212760:	dc000015 	stw	r16,0(sp)
80212764:	020d8980 	call	8020d898 <_malloc_r>
80212768:	10002926 	beq	r2,zero,80212810 <_calloc_r+0xbc>
8021276c:	11bfff17 	ldw	r6,-4(r2)
80212770:	1021883a 	mov	r16,r2
80212774:	00bfff04 	movi	r2,-4
80212778:	308c703a 	and	r6,r6,r2
8021277c:	00c00904 	movi	r3,36
80212780:	308d883a 	add	r6,r6,r2
80212784:	19801636 	bltu	r3,r6,802127e0 <_calloc_r+0x8c>
80212788:	008004c4 	movi	r2,19
8021278c:	11800b2e 	bgeu	r2,r6,802127bc <_calloc_r+0x68>
80212790:	80000015 	stw	zero,0(r16)
80212794:	80000115 	stw	zero,4(r16)
80212798:	008006c4 	movi	r2,27
8021279c:	11801a2e 	bgeu	r2,r6,80212808 <_calloc_r+0xb4>
802127a0:	80000215 	stw	zero,8(r16)
802127a4:	80000315 	stw	zero,12(r16)
802127a8:	30c0151e 	bne	r6,r3,80212800 <_calloc_r+0xac>
802127ac:	80000415 	stw	zero,16(r16)
802127b0:	80800604 	addi	r2,r16,24
802127b4:	80000515 	stw	zero,20(r16)
802127b8:	00000106 	br	802127c0 <_calloc_r+0x6c>
802127bc:	8005883a 	mov	r2,r16
802127c0:	10000015 	stw	zero,0(r2)
802127c4:	10000115 	stw	zero,4(r2)
802127c8:	10000215 	stw	zero,8(r2)
802127cc:	8005883a 	mov	r2,r16
802127d0:	dfc00117 	ldw	ra,4(sp)
802127d4:	dc000017 	ldw	r16,0(sp)
802127d8:	dec00204 	addi	sp,sp,8
802127dc:	f800283a 	ret
802127e0:	000b883a 	mov	r5,zero
802127e4:	8009883a 	mov	r4,r16
802127e8:	020e2e40 	call	8020e2e4 <memset>
802127ec:	8005883a 	mov	r2,r16
802127f0:	dfc00117 	ldw	ra,4(sp)
802127f4:	dc000017 	ldw	r16,0(sp)
802127f8:	dec00204 	addi	sp,sp,8
802127fc:	f800283a 	ret
80212800:	80800404 	addi	r2,r16,16
80212804:	003fee06 	br	802127c0 <__reset+0xfa1f27c0>
80212808:	80800204 	addi	r2,r16,8
8021280c:	003fec06 	br	802127c0 <__reset+0xfa1f27c0>
80212810:	0005883a 	mov	r2,zero
80212814:	003fee06 	br	802127d0 <__reset+0xfa1f27d0>

80212818 <_fclose_r>:
80212818:	28003926 	beq	r5,zero,80212900 <_fclose_r+0xe8>
8021281c:	defffc04 	addi	sp,sp,-16
80212820:	dc400115 	stw	r17,4(sp)
80212824:	dc000015 	stw	r16,0(sp)
80212828:	dfc00315 	stw	ra,12(sp)
8021282c:	dc800215 	stw	r18,8(sp)
80212830:	2023883a 	mov	r17,r4
80212834:	2821883a 	mov	r16,r5
80212838:	20000226 	beq	r4,zero,80212844 <_fclose_r+0x2c>
8021283c:	20800e17 	ldw	r2,56(r4)
80212840:	10002726 	beq	r2,zero,802128e0 <_fclose_r+0xc8>
80212844:	8080030f 	ldh	r2,12(r16)
80212848:	1000071e 	bne	r2,zero,80212868 <_fclose_r+0x50>
8021284c:	0005883a 	mov	r2,zero
80212850:	dfc00317 	ldw	ra,12(sp)
80212854:	dc800217 	ldw	r18,8(sp)
80212858:	dc400117 	ldw	r17,4(sp)
8021285c:	dc000017 	ldw	r16,0(sp)
80212860:	dec00404 	addi	sp,sp,16
80212864:	f800283a 	ret
80212868:	800b883a 	mov	r5,r16
8021286c:	8809883a 	mov	r4,r17
80212870:	020c5400 	call	8020c540 <__sflush_r>
80212874:	1025883a 	mov	r18,r2
80212878:	80800b17 	ldw	r2,44(r16)
8021287c:	10000426 	beq	r2,zero,80212890 <_fclose_r+0x78>
80212880:	81400717 	ldw	r5,28(r16)
80212884:	8809883a 	mov	r4,r17
80212888:	103ee83a 	callr	r2
8021288c:	10001616 	blt	r2,zero,802128e8 <_fclose_r+0xd0>
80212890:	8080030b 	ldhu	r2,12(r16)
80212894:	1080200c 	andi	r2,r2,128
80212898:	1000151e 	bne	r2,zero,802128f0 <_fclose_r+0xd8>
8021289c:	81400c17 	ldw	r5,48(r16)
802128a0:	28000526 	beq	r5,zero,802128b8 <_fclose_r+0xa0>
802128a4:	80801004 	addi	r2,r16,64
802128a8:	28800226 	beq	r5,r2,802128b4 <_fclose_r+0x9c>
802128ac:	8809883a 	mov	r4,r17
802128b0:	020ccac0 	call	8020ccac <_free_r>
802128b4:	80000c15 	stw	zero,48(r16)
802128b8:	81401117 	ldw	r5,68(r16)
802128bc:	28000326 	beq	r5,zero,802128cc <_fclose_r+0xb4>
802128c0:	8809883a 	mov	r4,r17
802128c4:	020ccac0 	call	8020ccac <_free_r>
802128c8:	80001115 	stw	zero,68(r16)
802128cc:	020cb480 	call	8020cb48 <__sfp_lock_acquire>
802128d0:	8000030d 	sth	zero,12(r16)
802128d4:	020cb4c0 	call	8020cb4c <__sfp_lock_release>
802128d8:	9005883a 	mov	r2,r18
802128dc:	003fdc06 	br	80212850 <__reset+0xfa1f2850>
802128e0:	020cb380 	call	8020cb38 <__sinit>
802128e4:	003fd706 	br	80212844 <__reset+0xfa1f2844>
802128e8:	04bfffc4 	movi	r18,-1
802128ec:	003fe806 	br	80212890 <__reset+0xfa1f2890>
802128f0:	81400417 	ldw	r5,16(r16)
802128f4:	8809883a 	mov	r4,r17
802128f8:	020ccac0 	call	8020ccac <_free_r>
802128fc:	003fe706 	br	8021289c <__reset+0xfa1f289c>
80212900:	0005883a 	mov	r2,zero
80212904:	f800283a 	ret

80212908 <fclose>:
80212908:	00a008b4 	movhi	r2,32802
8021290c:	10bc2d04 	addi	r2,r2,-3916
80212910:	200b883a 	mov	r5,r4
80212914:	11000017 	ldw	r4,0(r2)
80212918:	02128181 	jmpi	80212818 <_fclose_r>

8021291c <__fputwc>:
8021291c:	defff804 	addi	sp,sp,-32
80212920:	dcc00415 	stw	r19,16(sp)
80212924:	dc800315 	stw	r18,12(sp)
80212928:	dc000115 	stw	r16,4(sp)
8021292c:	dfc00715 	stw	ra,28(sp)
80212930:	dd400615 	stw	r21,24(sp)
80212934:	dd000515 	stw	r20,20(sp)
80212938:	dc400215 	stw	r17,8(sp)
8021293c:	2027883a 	mov	r19,r4
80212940:	2825883a 	mov	r18,r5
80212944:	3021883a 	mov	r16,r6
80212948:	020d6880 	call	8020d688 <__locale_mb_cur_max>
8021294c:	00c00044 	movi	r3,1
80212950:	10c03e26 	beq	r2,r3,80212a4c <__fputwc+0x130>
80212954:	81c01704 	addi	r7,r16,92
80212958:	900d883a 	mov	r6,r18
8021295c:	d80b883a 	mov	r5,sp
80212960:	9809883a 	mov	r4,r19
80212964:	0212dec0 	call	80212dec <_wcrtomb_r>
80212968:	1029883a 	mov	r20,r2
8021296c:	00bfffc4 	movi	r2,-1
80212970:	a0802026 	beq	r20,r2,802129f4 <__fputwc+0xd8>
80212974:	d9400003 	ldbu	r5,0(sp)
80212978:	a0001c26 	beq	r20,zero,802129ec <__fputwc+0xd0>
8021297c:	0023883a 	mov	r17,zero
80212980:	05400284 	movi	r21,10
80212984:	00000906 	br	802129ac <__fputwc+0x90>
80212988:	80800017 	ldw	r2,0(r16)
8021298c:	11400005 	stb	r5,0(r2)
80212990:	80c00017 	ldw	r3,0(r16)
80212994:	18c00044 	addi	r3,r3,1
80212998:	80c00015 	stw	r3,0(r16)
8021299c:	8c400044 	addi	r17,r17,1
802129a0:	dc45883a 	add	r2,sp,r17
802129a4:	8d00112e 	bgeu	r17,r20,802129ec <__fputwc+0xd0>
802129a8:	11400003 	ldbu	r5,0(r2)
802129ac:	80c00217 	ldw	r3,8(r16)
802129b0:	18ffffc4 	addi	r3,r3,-1
802129b4:	80c00215 	stw	r3,8(r16)
802129b8:	183ff30e 	bge	r3,zero,80212988 <__reset+0xfa1f2988>
802129bc:	80800617 	ldw	r2,24(r16)
802129c0:	18801916 	blt	r3,r2,80212a28 <__fputwc+0x10c>
802129c4:	80800017 	ldw	r2,0(r16)
802129c8:	11400005 	stb	r5,0(r2)
802129cc:	80800017 	ldw	r2,0(r16)
802129d0:	10c00003 	ldbu	r3,0(r2)
802129d4:	10800044 	addi	r2,r2,1
802129d8:	1d402326 	beq	r3,r21,80212a68 <__fputwc+0x14c>
802129dc:	80800015 	stw	r2,0(r16)
802129e0:	8c400044 	addi	r17,r17,1
802129e4:	dc45883a 	add	r2,sp,r17
802129e8:	8d3fef36 	bltu	r17,r20,802129a8 <__reset+0xfa1f29a8>
802129ec:	9005883a 	mov	r2,r18
802129f0:	00000406 	br	80212a04 <__fputwc+0xe8>
802129f4:	80c0030b 	ldhu	r3,12(r16)
802129f8:	a005883a 	mov	r2,r20
802129fc:	18c01014 	ori	r3,r3,64
80212a00:	80c0030d 	sth	r3,12(r16)
80212a04:	dfc00717 	ldw	ra,28(sp)
80212a08:	dd400617 	ldw	r21,24(sp)
80212a0c:	dd000517 	ldw	r20,20(sp)
80212a10:	dcc00417 	ldw	r19,16(sp)
80212a14:	dc800317 	ldw	r18,12(sp)
80212a18:	dc400217 	ldw	r17,8(sp)
80212a1c:	dc000117 	ldw	r16,4(sp)
80212a20:	dec00804 	addi	sp,sp,32
80212a24:	f800283a 	ret
80212a28:	800d883a 	mov	r6,r16
80212a2c:	29403fcc 	andi	r5,r5,255
80212a30:	9809883a 	mov	r4,r19
80212a34:	0212c940 	call	80212c94 <__swbuf_r>
80212a38:	10bfffe0 	cmpeqi	r2,r2,-1
80212a3c:	10803fcc 	andi	r2,r2,255
80212a40:	103fd626 	beq	r2,zero,8021299c <__reset+0xfa1f299c>
80212a44:	00bfffc4 	movi	r2,-1
80212a48:	003fee06 	br	80212a04 <__reset+0xfa1f2a04>
80212a4c:	90ffffc4 	addi	r3,r18,-1
80212a50:	01003f84 	movi	r4,254
80212a54:	20ffbf36 	bltu	r4,r3,80212954 <__reset+0xfa1f2954>
80212a58:	900b883a 	mov	r5,r18
80212a5c:	dc800005 	stb	r18,0(sp)
80212a60:	1029883a 	mov	r20,r2
80212a64:	003fc506 	br	8021297c <__reset+0xfa1f297c>
80212a68:	800d883a 	mov	r6,r16
80212a6c:	a80b883a 	mov	r5,r21
80212a70:	9809883a 	mov	r4,r19
80212a74:	0212c940 	call	80212c94 <__swbuf_r>
80212a78:	10bfffe0 	cmpeqi	r2,r2,-1
80212a7c:	003fef06 	br	80212a3c <__reset+0xfa1f2a3c>

80212a80 <_fputwc_r>:
80212a80:	3080030b 	ldhu	r2,12(r6)
80212a84:	10c8000c 	andi	r3,r2,8192
80212a88:	1800051e 	bne	r3,zero,80212aa0 <_fputwc_r+0x20>
80212a8c:	30c01917 	ldw	r3,100(r6)
80212a90:	10880014 	ori	r2,r2,8192
80212a94:	3080030d 	sth	r2,12(r6)
80212a98:	18880014 	ori	r2,r3,8192
80212a9c:	30801915 	stw	r2,100(r6)
80212aa0:	021291c1 	jmpi	8021291c <__fputwc>

80212aa4 <fputwc>:
80212aa4:	00a008b4 	movhi	r2,32802
80212aa8:	defffc04 	addi	sp,sp,-16
80212aac:	10bc2d04 	addi	r2,r2,-3916
80212ab0:	dc000115 	stw	r16,4(sp)
80212ab4:	14000017 	ldw	r16,0(r2)
80212ab8:	dc400215 	stw	r17,8(sp)
80212abc:	dfc00315 	stw	ra,12(sp)
80212ac0:	2023883a 	mov	r17,r4
80212ac4:	80000226 	beq	r16,zero,80212ad0 <fputwc+0x2c>
80212ac8:	80800e17 	ldw	r2,56(r16)
80212acc:	10001026 	beq	r2,zero,80212b10 <fputwc+0x6c>
80212ad0:	2880030b 	ldhu	r2,12(r5)
80212ad4:	10c8000c 	andi	r3,r2,8192
80212ad8:	1800051e 	bne	r3,zero,80212af0 <fputwc+0x4c>
80212adc:	28c01917 	ldw	r3,100(r5)
80212ae0:	10880014 	ori	r2,r2,8192
80212ae4:	2880030d 	sth	r2,12(r5)
80212ae8:	18880014 	ori	r2,r3,8192
80212aec:	28801915 	stw	r2,100(r5)
80212af0:	280d883a 	mov	r6,r5
80212af4:	8009883a 	mov	r4,r16
80212af8:	880b883a 	mov	r5,r17
80212afc:	dfc00317 	ldw	ra,12(sp)
80212b00:	dc400217 	ldw	r17,8(sp)
80212b04:	dc000117 	ldw	r16,4(sp)
80212b08:	dec00404 	addi	sp,sp,16
80212b0c:	021291c1 	jmpi	8021291c <__fputwc>
80212b10:	8009883a 	mov	r4,r16
80212b14:	d9400015 	stw	r5,0(sp)
80212b18:	020cb380 	call	8020cb38 <__sinit>
80212b1c:	d9400017 	ldw	r5,0(sp)
80212b20:	003feb06 	br	80212ad0 <__reset+0xfa1f2ad0>

80212b24 <_fstat_r>:
80212b24:	defffd04 	addi	sp,sp,-12
80212b28:	2805883a 	mov	r2,r5
80212b2c:	dc000015 	stw	r16,0(sp)
80212b30:	042008b4 	movhi	r16,32802
80212b34:	dc400115 	stw	r17,4(sp)
80212b38:	843c4e04 	addi	r16,r16,-3784
80212b3c:	2023883a 	mov	r17,r4
80212b40:	300b883a 	mov	r5,r6
80212b44:	1009883a 	mov	r4,r2
80212b48:	dfc00215 	stw	ra,8(sp)
80212b4c:	80000015 	stw	zero,0(r16)
80212b50:	02164f80 	call	802164f8 <fstat>
80212b54:	00ffffc4 	movi	r3,-1
80212b58:	10c00526 	beq	r2,r3,80212b70 <_fstat_r+0x4c>
80212b5c:	dfc00217 	ldw	ra,8(sp)
80212b60:	dc400117 	ldw	r17,4(sp)
80212b64:	dc000017 	ldw	r16,0(sp)
80212b68:	dec00304 	addi	sp,sp,12
80212b6c:	f800283a 	ret
80212b70:	80c00017 	ldw	r3,0(r16)
80212b74:	183ff926 	beq	r3,zero,80212b5c <__reset+0xfa1f2b5c>
80212b78:	88c00015 	stw	r3,0(r17)
80212b7c:	003ff706 	br	80212b5c <__reset+0xfa1f2b5c>

80212b80 <_isatty_r>:
80212b80:	defffd04 	addi	sp,sp,-12
80212b84:	dc000015 	stw	r16,0(sp)
80212b88:	042008b4 	movhi	r16,32802
80212b8c:	dc400115 	stw	r17,4(sp)
80212b90:	843c4e04 	addi	r16,r16,-3784
80212b94:	2023883a 	mov	r17,r4
80212b98:	2809883a 	mov	r4,r5
80212b9c:	dfc00215 	stw	ra,8(sp)
80212ba0:	80000015 	stw	zero,0(r16)
80212ba4:	02165e40 	call	802165e4 <isatty>
80212ba8:	00ffffc4 	movi	r3,-1
80212bac:	10c00526 	beq	r2,r3,80212bc4 <_isatty_r+0x44>
80212bb0:	dfc00217 	ldw	ra,8(sp)
80212bb4:	dc400117 	ldw	r17,4(sp)
80212bb8:	dc000017 	ldw	r16,0(sp)
80212bbc:	dec00304 	addi	sp,sp,12
80212bc0:	f800283a 	ret
80212bc4:	80c00017 	ldw	r3,0(r16)
80212bc8:	183ff926 	beq	r3,zero,80212bb0 <__reset+0xfa1f2bb0>
80212bcc:	88c00015 	stw	r3,0(r17)
80212bd0:	003ff706 	br	80212bb0 <__reset+0xfa1f2bb0>

80212bd4 <_lseek_r>:
80212bd4:	defffd04 	addi	sp,sp,-12
80212bd8:	2805883a 	mov	r2,r5
80212bdc:	dc000015 	stw	r16,0(sp)
80212be0:	042008b4 	movhi	r16,32802
80212be4:	dc400115 	stw	r17,4(sp)
80212be8:	300b883a 	mov	r5,r6
80212bec:	843c4e04 	addi	r16,r16,-3784
80212bf0:	2023883a 	mov	r17,r4
80212bf4:	380d883a 	mov	r6,r7
80212bf8:	1009883a 	mov	r4,r2
80212bfc:	dfc00215 	stw	ra,8(sp)
80212c00:	80000015 	stw	zero,0(r16)
80212c04:	02166c40 	call	802166c4 <lseek>
80212c08:	00ffffc4 	movi	r3,-1
80212c0c:	10c00526 	beq	r2,r3,80212c24 <_lseek_r+0x50>
80212c10:	dfc00217 	ldw	ra,8(sp)
80212c14:	dc400117 	ldw	r17,4(sp)
80212c18:	dc000017 	ldw	r16,0(sp)
80212c1c:	dec00304 	addi	sp,sp,12
80212c20:	f800283a 	ret
80212c24:	80c00017 	ldw	r3,0(r16)
80212c28:	183ff926 	beq	r3,zero,80212c10 <__reset+0xfa1f2c10>
80212c2c:	88c00015 	stw	r3,0(r17)
80212c30:	003ff706 	br	80212c10 <__reset+0xfa1f2c10>

80212c34 <_read_r>:
80212c34:	defffd04 	addi	sp,sp,-12
80212c38:	2805883a 	mov	r2,r5
80212c3c:	dc000015 	stw	r16,0(sp)
80212c40:	042008b4 	movhi	r16,32802
80212c44:	dc400115 	stw	r17,4(sp)
80212c48:	300b883a 	mov	r5,r6
80212c4c:	843c4e04 	addi	r16,r16,-3784
80212c50:	2023883a 	mov	r17,r4
80212c54:	380d883a 	mov	r6,r7
80212c58:	1009883a 	mov	r4,r2
80212c5c:	dfc00215 	stw	ra,8(sp)
80212c60:	80000015 	stw	zero,0(r16)
80212c64:	02168980 	call	80216898 <read>
80212c68:	00ffffc4 	movi	r3,-1
80212c6c:	10c00526 	beq	r2,r3,80212c84 <_read_r+0x50>
80212c70:	dfc00217 	ldw	ra,8(sp)
80212c74:	dc400117 	ldw	r17,4(sp)
80212c78:	dc000017 	ldw	r16,0(sp)
80212c7c:	dec00304 	addi	sp,sp,12
80212c80:	f800283a 	ret
80212c84:	80c00017 	ldw	r3,0(r16)
80212c88:	183ff926 	beq	r3,zero,80212c70 <__reset+0xfa1f2c70>
80212c8c:	88c00015 	stw	r3,0(r17)
80212c90:	003ff706 	br	80212c70 <__reset+0xfa1f2c70>

80212c94 <__swbuf_r>:
80212c94:	defffb04 	addi	sp,sp,-20
80212c98:	dcc00315 	stw	r19,12(sp)
80212c9c:	dc800215 	stw	r18,8(sp)
80212ca0:	dc000015 	stw	r16,0(sp)
80212ca4:	dfc00415 	stw	ra,16(sp)
80212ca8:	dc400115 	stw	r17,4(sp)
80212cac:	2025883a 	mov	r18,r4
80212cb0:	2827883a 	mov	r19,r5
80212cb4:	3021883a 	mov	r16,r6
80212cb8:	20000226 	beq	r4,zero,80212cc4 <__swbuf_r+0x30>
80212cbc:	20800e17 	ldw	r2,56(r4)
80212cc0:	10004226 	beq	r2,zero,80212dcc <__swbuf_r+0x138>
80212cc4:	80800617 	ldw	r2,24(r16)
80212cc8:	8100030b 	ldhu	r4,12(r16)
80212ccc:	80800215 	stw	r2,8(r16)
80212cd0:	2080020c 	andi	r2,r4,8
80212cd4:	10003626 	beq	r2,zero,80212db0 <__swbuf_r+0x11c>
80212cd8:	80c00417 	ldw	r3,16(r16)
80212cdc:	18003426 	beq	r3,zero,80212db0 <__swbuf_r+0x11c>
80212ce0:	2088000c 	andi	r2,r4,8192
80212ce4:	9c403fcc 	andi	r17,r19,255
80212ce8:	10001a26 	beq	r2,zero,80212d54 <__swbuf_r+0xc0>
80212cec:	80800017 	ldw	r2,0(r16)
80212cf0:	81000517 	ldw	r4,20(r16)
80212cf4:	10c7c83a 	sub	r3,r2,r3
80212cf8:	1900200e 	bge	r3,r4,80212d7c <__swbuf_r+0xe8>
80212cfc:	18c00044 	addi	r3,r3,1
80212d00:	81000217 	ldw	r4,8(r16)
80212d04:	11400044 	addi	r5,r2,1
80212d08:	81400015 	stw	r5,0(r16)
80212d0c:	213fffc4 	addi	r4,r4,-1
80212d10:	81000215 	stw	r4,8(r16)
80212d14:	14c00005 	stb	r19,0(r2)
80212d18:	80800517 	ldw	r2,20(r16)
80212d1c:	10c01e26 	beq	r2,r3,80212d98 <__swbuf_r+0x104>
80212d20:	8080030b 	ldhu	r2,12(r16)
80212d24:	1080004c 	andi	r2,r2,1
80212d28:	10000226 	beq	r2,zero,80212d34 <__swbuf_r+0xa0>
80212d2c:	00800284 	movi	r2,10
80212d30:	88801926 	beq	r17,r2,80212d98 <__swbuf_r+0x104>
80212d34:	8805883a 	mov	r2,r17
80212d38:	dfc00417 	ldw	ra,16(sp)
80212d3c:	dcc00317 	ldw	r19,12(sp)
80212d40:	dc800217 	ldw	r18,8(sp)
80212d44:	dc400117 	ldw	r17,4(sp)
80212d48:	dc000017 	ldw	r16,0(sp)
80212d4c:	dec00504 	addi	sp,sp,20
80212d50:	f800283a 	ret
80212d54:	81401917 	ldw	r5,100(r16)
80212d58:	00b7ffc4 	movi	r2,-8193
80212d5c:	21080014 	ori	r4,r4,8192
80212d60:	2884703a 	and	r2,r5,r2
80212d64:	80801915 	stw	r2,100(r16)
80212d68:	80800017 	ldw	r2,0(r16)
80212d6c:	8100030d 	sth	r4,12(r16)
80212d70:	81000517 	ldw	r4,20(r16)
80212d74:	10c7c83a 	sub	r3,r2,r3
80212d78:	193fe016 	blt	r3,r4,80212cfc <__reset+0xfa1f2cfc>
80212d7c:	800b883a 	mov	r5,r16
80212d80:	9009883a 	mov	r4,r18
80212d84:	020c75c0 	call	8020c75c <_fflush_r>
80212d88:	1000071e 	bne	r2,zero,80212da8 <__swbuf_r+0x114>
80212d8c:	80800017 	ldw	r2,0(r16)
80212d90:	00c00044 	movi	r3,1
80212d94:	003fda06 	br	80212d00 <__reset+0xfa1f2d00>
80212d98:	800b883a 	mov	r5,r16
80212d9c:	9009883a 	mov	r4,r18
80212da0:	020c75c0 	call	8020c75c <_fflush_r>
80212da4:	103fe326 	beq	r2,zero,80212d34 <__reset+0xfa1f2d34>
80212da8:	00bfffc4 	movi	r2,-1
80212dac:	003fe206 	br	80212d38 <__reset+0xfa1f2d38>
80212db0:	800b883a 	mov	r5,r16
80212db4:	9009883a 	mov	r4,r18
80212db8:	020ab640 	call	8020ab64 <__swsetup_r>
80212dbc:	103ffa1e 	bne	r2,zero,80212da8 <__reset+0xfa1f2da8>
80212dc0:	8100030b 	ldhu	r4,12(r16)
80212dc4:	80c00417 	ldw	r3,16(r16)
80212dc8:	003fc506 	br	80212ce0 <__reset+0xfa1f2ce0>
80212dcc:	020cb380 	call	8020cb38 <__sinit>
80212dd0:	003fbc06 	br	80212cc4 <__reset+0xfa1f2cc4>

80212dd4 <__swbuf>:
80212dd4:	00a008b4 	movhi	r2,32802
80212dd8:	10bc2d04 	addi	r2,r2,-3916
80212ddc:	280d883a 	mov	r6,r5
80212de0:	200b883a 	mov	r5,r4
80212de4:	11000017 	ldw	r4,0(r2)
80212de8:	0212c941 	jmpi	80212c94 <__swbuf_r>

80212dec <_wcrtomb_r>:
80212dec:	defff604 	addi	sp,sp,-40
80212df0:	00a008b4 	movhi	r2,32802
80212df4:	dc800815 	stw	r18,32(sp)
80212df8:	dc400715 	stw	r17,28(sp)
80212dfc:	dc000615 	stw	r16,24(sp)
80212e00:	10bc3104 	addi	r2,r2,-3900
80212e04:	dfc00915 	stw	ra,36(sp)
80212e08:	2021883a 	mov	r16,r4
80212e0c:	3823883a 	mov	r17,r7
80212e10:	14800017 	ldw	r18,0(r2)
80212e14:	28001426 	beq	r5,zero,80212e68 <_wcrtomb_r+0x7c>
80212e18:	d9400415 	stw	r5,16(sp)
80212e1c:	d9800515 	stw	r6,20(sp)
80212e20:	020d67c0 	call	8020d67c <__locale_charset>
80212e24:	d9800517 	ldw	r6,20(sp)
80212e28:	d9400417 	ldw	r5,16(sp)
80212e2c:	100f883a 	mov	r7,r2
80212e30:	dc400015 	stw	r17,0(sp)
80212e34:	8009883a 	mov	r4,r16
80212e38:	903ee83a 	callr	r18
80212e3c:	00ffffc4 	movi	r3,-1
80212e40:	10c0031e 	bne	r2,r3,80212e50 <_wcrtomb_r+0x64>
80212e44:	88000015 	stw	zero,0(r17)
80212e48:	00c02284 	movi	r3,138
80212e4c:	80c00015 	stw	r3,0(r16)
80212e50:	dfc00917 	ldw	ra,36(sp)
80212e54:	dc800817 	ldw	r18,32(sp)
80212e58:	dc400717 	ldw	r17,28(sp)
80212e5c:	dc000617 	ldw	r16,24(sp)
80212e60:	dec00a04 	addi	sp,sp,40
80212e64:	f800283a 	ret
80212e68:	020d67c0 	call	8020d67c <__locale_charset>
80212e6c:	100f883a 	mov	r7,r2
80212e70:	dc400015 	stw	r17,0(sp)
80212e74:	000d883a 	mov	r6,zero
80212e78:	d9400104 	addi	r5,sp,4
80212e7c:	8009883a 	mov	r4,r16
80212e80:	903ee83a 	callr	r18
80212e84:	003fed06 	br	80212e3c <__reset+0xfa1f2e3c>

80212e88 <wcrtomb>:
80212e88:	defff604 	addi	sp,sp,-40
80212e8c:	00a008b4 	movhi	r2,32802
80212e90:	dc800615 	stw	r18,24(sp)
80212e94:	dc400515 	stw	r17,20(sp)
80212e98:	10bc2d04 	addi	r2,r2,-3916
80212e9c:	dfc00915 	stw	ra,36(sp)
80212ea0:	dd000815 	stw	r20,32(sp)
80212ea4:	dcc00715 	stw	r19,28(sp)
80212ea8:	dc000415 	stw	r16,16(sp)
80212eac:	3025883a 	mov	r18,r6
80212eb0:	14400017 	ldw	r17,0(r2)
80212eb4:	20001926 	beq	r4,zero,80212f1c <wcrtomb+0x94>
80212eb8:	00a008b4 	movhi	r2,32802
80212ebc:	10bc3104 	addi	r2,r2,-3900
80212ec0:	15000017 	ldw	r20,0(r2)
80212ec4:	2021883a 	mov	r16,r4
80212ec8:	2827883a 	mov	r19,r5
80212ecc:	020d67c0 	call	8020d67c <__locale_charset>
80212ed0:	100f883a 	mov	r7,r2
80212ed4:	dc800015 	stw	r18,0(sp)
80212ed8:	980d883a 	mov	r6,r19
80212edc:	800b883a 	mov	r5,r16
80212ee0:	8809883a 	mov	r4,r17
80212ee4:	a03ee83a 	callr	r20
80212ee8:	00ffffc4 	movi	r3,-1
80212eec:	10c0031e 	bne	r2,r3,80212efc <wcrtomb+0x74>
80212ef0:	90000015 	stw	zero,0(r18)
80212ef4:	00c02284 	movi	r3,138
80212ef8:	88c00015 	stw	r3,0(r17)
80212efc:	dfc00917 	ldw	ra,36(sp)
80212f00:	dd000817 	ldw	r20,32(sp)
80212f04:	dcc00717 	ldw	r19,28(sp)
80212f08:	dc800617 	ldw	r18,24(sp)
80212f0c:	dc400517 	ldw	r17,20(sp)
80212f10:	dc000417 	ldw	r16,16(sp)
80212f14:	dec00a04 	addi	sp,sp,40
80212f18:	f800283a 	ret
80212f1c:	00a008b4 	movhi	r2,32802
80212f20:	10bc3104 	addi	r2,r2,-3900
80212f24:	14000017 	ldw	r16,0(r2)
80212f28:	020d67c0 	call	8020d67c <__locale_charset>
80212f2c:	100f883a 	mov	r7,r2
80212f30:	dc800015 	stw	r18,0(sp)
80212f34:	000d883a 	mov	r6,zero
80212f38:	d9400104 	addi	r5,sp,4
80212f3c:	8809883a 	mov	r4,r17
80212f40:	803ee83a 	callr	r16
80212f44:	003fe806 	br	80212ee8 <__reset+0xfa1f2ee8>

80212f48 <__ascii_wctomb>:
80212f48:	28000526 	beq	r5,zero,80212f60 <__ascii_wctomb+0x18>
80212f4c:	00803fc4 	movi	r2,255
80212f50:	11800536 	bltu	r2,r6,80212f68 <__ascii_wctomb+0x20>
80212f54:	29800005 	stb	r6,0(r5)
80212f58:	00800044 	movi	r2,1
80212f5c:	f800283a 	ret
80212f60:	0005883a 	mov	r2,zero
80212f64:	f800283a 	ret
80212f68:	00802284 	movi	r2,138
80212f6c:	20800015 	stw	r2,0(r4)
80212f70:	00bfffc4 	movi	r2,-1
80212f74:	f800283a 	ret

80212f78 <_wctomb_r>:
80212f78:	00a008b4 	movhi	r2,32802
80212f7c:	defff904 	addi	sp,sp,-28
80212f80:	10bc3104 	addi	r2,r2,-3900
80212f84:	dfc00615 	stw	ra,24(sp)
80212f88:	dc400515 	stw	r17,20(sp)
80212f8c:	dc000415 	stw	r16,16(sp)
80212f90:	3823883a 	mov	r17,r7
80212f94:	14000017 	ldw	r16,0(r2)
80212f98:	d9000115 	stw	r4,4(sp)
80212f9c:	d9400215 	stw	r5,8(sp)
80212fa0:	d9800315 	stw	r6,12(sp)
80212fa4:	020d67c0 	call	8020d67c <__locale_charset>
80212fa8:	d9800317 	ldw	r6,12(sp)
80212fac:	d9400217 	ldw	r5,8(sp)
80212fb0:	d9000117 	ldw	r4,4(sp)
80212fb4:	100f883a 	mov	r7,r2
80212fb8:	dc400015 	stw	r17,0(sp)
80212fbc:	803ee83a 	callr	r16
80212fc0:	dfc00617 	ldw	ra,24(sp)
80212fc4:	dc400517 	ldw	r17,20(sp)
80212fc8:	dc000417 	ldw	r16,16(sp)
80212fcc:	dec00704 	addi	sp,sp,28
80212fd0:	f800283a 	ret

80212fd4 <__udivdi3>:
80212fd4:	defff504 	addi	sp,sp,-44
80212fd8:	dcc00415 	stw	r19,16(sp)
80212fdc:	dc000115 	stw	r16,4(sp)
80212fe0:	dfc00a15 	stw	ra,40(sp)
80212fe4:	df000915 	stw	fp,36(sp)
80212fe8:	ddc00815 	stw	r23,32(sp)
80212fec:	dd800715 	stw	r22,28(sp)
80212ff0:	dd400615 	stw	r21,24(sp)
80212ff4:	dd000515 	stw	r20,20(sp)
80212ff8:	dc800315 	stw	r18,12(sp)
80212ffc:	dc400215 	stw	r17,8(sp)
80213000:	2027883a 	mov	r19,r4
80213004:	2821883a 	mov	r16,r5
80213008:	3800411e 	bne	r7,zero,80213110 <__udivdi3+0x13c>
8021300c:	3023883a 	mov	r17,r6
80213010:	2025883a 	mov	r18,r4
80213014:	2980522e 	bgeu	r5,r6,80213160 <__udivdi3+0x18c>
80213018:	00bfffd4 	movui	r2,65535
8021301c:	282d883a 	mov	r22,r5
80213020:	1180a836 	bltu	r2,r6,802132c4 <__udivdi3+0x2f0>
80213024:	00803fc4 	movi	r2,255
80213028:	1185803a 	cmpltu	r2,r2,r6
8021302c:	100490fa 	slli	r2,r2,3
80213030:	3086d83a 	srl	r3,r6,r2
80213034:	012008b4 	movhi	r4,32802
80213038:	2133a284 	addi	r4,r4,-12662
8021303c:	20c7883a 	add	r3,r4,r3
80213040:	18c00003 	ldbu	r3,0(r3)
80213044:	1885883a 	add	r2,r3,r2
80213048:	00c00804 	movi	r3,32
8021304c:	1887c83a 	sub	r3,r3,r2
80213050:	18000526 	beq	r3,zero,80213068 <__udivdi3+0x94>
80213054:	80e0983a 	sll	r16,r16,r3
80213058:	9884d83a 	srl	r2,r19,r2
8021305c:	30e2983a 	sll	r17,r6,r3
80213060:	98e4983a 	sll	r18,r19,r3
80213064:	142cb03a 	or	r22,r2,r16
80213068:	882ad43a 	srli	r21,r17,16
8021306c:	b009883a 	mov	r4,r22
80213070:	8d3fffcc 	andi	r20,r17,65535
80213074:	a80b883a 	mov	r5,r21
80213078:	0213be00 	call	80213be0 <__umodsi3>
8021307c:	b009883a 	mov	r4,r22
80213080:	a80b883a 	mov	r5,r21
80213084:	1027883a 	mov	r19,r2
80213088:	0213b7c0 	call	80213b7c <__udivsi3>
8021308c:	102d883a 	mov	r22,r2
80213090:	9826943a 	slli	r19,r19,16
80213094:	9004d43a 	srli	r2,r18,16
80213098:	a5a1383a 	mul	r16,r20,r22
8021309c:	14c4b03a 	or	r2,r2,r19
802130a0:	1400052e 	bgeu	r2,r16,802130b8 <__udivdi3+0xe4>
802130a4:	1445883a 	add	r2,r2,r17
802130a8:	b0ffffc4 	addi	r3,r22,-1
802130ac:	14400136 	bltu	r2,r17,802130b4 <__udivdi3+0xe0>
802130b0:	14012336 	bltu	r2,r16,80213540 <__udivdi3+0x56c>
802130b4:	182d883a 	mov	r22,r3
802130b8:	1421c83a 	sub	r16,r2,r16
802130bc:	a80b883a 	mov	r5,r21
802130c0:	8009883a 	mov	r4,r16
802130c4:	0213be00 	call	80213be0 <__umodsi3>
802130c8:	1027883a 	mov	r19,r2
802130cc:	a80b883a 	mov	r5,r21
802130d0:	8009883a 	mov	r4,r16
802130d4:	0213b7c0 	call	80213b7c <__udivsi3>
802130d8:	9826943a 	slli	r19,r19,16
802130dc:	a0a9383a 	mul	r20,r20,r2
802130e0:	94bfffcc 	andi	r18,r18,65535
802130e4:	94e4b03a 	or	r18,r18,r19
802130e8:	9500052e 	bgeu	r18,r20,80213100 <__udivdi3+0x12c>
802130ec:	8ca5883a 	add	r18,r17,r18
802130f0:	10ffffc4 	addi	r3,r2,-1
802130f4:	9440f136 	bltu	r18,r17,802134bc <__udivdi3+0x4e8>
802130f8:	9500f02e 	bgeu	r18,r20,802134bc <__udivdi3+0x4e8>
802130fc:	10bfff84 	addi	r2,r2,-2
80213100:	b00c943a 	slli	r6,r22,16
80213104:	0007883a 	mov	r3,zero
80213108:	3084b03a 	or	r2,r6,r2
8021310c:	00005906 	br	80213274 <__udivdi3+0x2a0>
80213110:	29c05636 	bltu	r5,r7,8021326c <__udivdi3+0x298>
80213114:	00bfffd4 	movui	r2,65535
80213118:	11c0622e 	bgeu	r2,r7,802132a4 <__udivdi3+0x2d0>
8021311c:	00804034 	movhi	r2,256
80213120:	10bfffc4 	addi	r2,r2,-1
80213124:	11c0ee36 	bltu	r2,r7,802134e0 <__udivdi3+0x50c>
80213128:	00800404 	movi	r2,16
8021312c:	3886d83a 	srl	r3,r7,r2
80213130:	012008b4 	movhi	r4,32802
80213134:	2133a284 	addi	r4,r4,-12662
80213138:	20c7883a 	add	r3,r4,r3
8021313c:	18c00003 	ldbu	r3,0(r3)
80213140:	05400804 	movi	r21,32
80213144:	1885883a 	add	r2,r3,r2
80213148:	a8abc83a 	sub	r21,r21,r2
8021314c:	a800621e 	bne	r21,zero,802132d8 <__udivdi3+0x304>
80213150:	3c00e936 	bltu	r7,r16,802134f8 <__udivdi3+0x524>
80213154:	9985403a 	cmpgeu	r2,r19,r6
80213158:	0007883a 	mov	r3,zero
8021315c:	00004506 	br	80213274 <__udivdi3+0x2a0>
80213160:	3000041e 	bne	r6,zero,80213174 <__udivdi3+0x1a0>
80213164:	000b883a 	mov	r5,zero
80213168:	01000044 	movi	r4,1
8021316c:	0213b7c0 	call	80213b7c <__udivsi3>
80213170:	1023883a 	mov	r17,r2
80213174:	00bfffd4 	movui	r2,65535
80213178:	14404e2e 	bgeu	r2,r17,802132b4 <__udivdi3+0x2e0>
8021317c:	00804034 	movhi	r2,256
80213180:	10bfffc4 	addi	r2,r2,-1
80213184:	1440d836 	bltu	r2,r17,802134e8 <__udivdi3+0x514>
80213188:	00800404 	movi	r2,16
8021318c:	8886d83a 	srl	r3,r17,r2
80213190:	012008b4 	movhi	r4,32802
80213194:	2133a284 	addi	r4,r4,-12662
80213198:	20c7883a 	add	r3,r4,r3
8021319c:	18c00003 	ldbu	r3,0(r3)
802131a0:	1885883a 	add	r2,r3,r2
802131a4:	00c00804 	movi	r3,32
802131a8:	1887c83a 	sub	r3,r3,r2
802131ac:	18008f1e 	bne	r3,zero,802133ec <__udivdi3+0x418>
802131b0:	882ad43a 	srli	r21,r17,16
802131b4:	8461c83a 	sub	r16,r16,r17
802131b8:	8d3fffcc 	andi	r20,r17,65535
802131bc:	00c00044 	movi	r3,1
802131c0:	8009883a 	mov	r4,r16
802131c4:	a80b883a 	mov	r5,r21
802131c8:	d8c00015 	stw	r3,0(sp)
802131cc:	0213be00 	call	80213be0 <__umodsi3>
802131d0:	8009883a 	mov	r4,r16
802131d4:	a80b883a 	mov	r5,r21
802131d8:	1027883a 	mov	r19,r2
802131dc:	0213b7c0 	call	80213b7c <__udivsi3>
802131e0:	9826943a 	slli	r19,r19,16
802131e4:	9008d43a 	srli	r4,r18,16
802131e8:	1521383a 	mul	r16,r2,r20
802131ec:	102d883a 	mov	r22,r2
802131f0:	24c8b03a 	or	r4,r4,r19
802131f4:	d8c00017 	ldw	r3,0(sp)
802131f8:	2400052e 	bgeu	r4,r16,80213210 <__udivdi3+0x23c>
802131fc:	2449883a 	add	r4,r4,r17
80213200:	b0bfffc4 	addi	r2,r22,-1
80213204:	24400136 	bltu	r4,r17,8021320c <__udivdi3+0x238>
80213208:	2400ca36 	bltu	r4,r16,80213534 <__udivdi3+0x560>
8021320c:	102d883a 	mov	r22,r2
80213210:	2421c83a 	sub	r16,r4,r16
80213214:	a80b883a 	mov	r5,r21
80213218:	8009883a 	mov	r4,r16
8021321c:	d8c00015 	stw	r3,0(sp)
80213220:	0213be00 	call	80213be0 <__umodsi3>
80213224:	1027883a 	mov	r19,r2
80213228:	a80b883a 	mov	r5,r21
8021322c:	8009883a 	mov	r4,r16
80213230:	0213b7c0 	call	80213b7c <__udivsi3>
80213234:	9826943a 	slli	r19,r19,16
80213238:	1529383a 	mul	r20,r2,r20
8021323c:	94bfffcc 	andi	r18,r18,65535
80213240:	94e4b03a 	or	r18,r18,r19
80213244:	d8c00017 	ldw	r3,0(sp)
80213248:	9500052e 	bgeu	r18,r20,80213260 <__udivdi3+0x28c>
8021324c:	8ca5883a 	add	r18,r17,r18
80213250:	113fffc4 	addi	r4,r2,-1
80213254:	94409736 	bltu	r18,r17,802134b4 <__udivdi3+0x4e0>
80213258:	9500962e 	bgeu	r18,r20,802134b4 <__udivdi3+0x4e0>
8021325c:	10bfff84 	addi	r2,r2,-2
80213260:	b00c943a 	slli	r6,r22,16
80213264:	3084b03a 	or	r2,r6,r2
80213268:	00000206 	br	80213274 <__udivdi3+0x2a0>
8021326c:	0007883a 	mov	r3,zero
80213270:	0005883a 	mov	r2,zero
80213274:	dfc00a17 	ldw	ra,40(sp)
80213278:	df000917 	ldw	fp,36(sp)
8021327c:	ddc00817 	ldw	r23,32(sp)
80213280:	dd800717 	ldw	r22,28(sp)
80213284:	dd400617 	ldw	r21,24(sp)
80213288:	dd000517 	ldw	r20,20(sp)
8021328c:	dcc00417 	ldw	r19,16(sp)
80213290:	dc800317 	ldw	r18,12(sp)
80213294:	dc400217 	ldw	r17,8(sp)
80213298:	dc000117 	ldw	r16,4(sp)
8021329c:	dec00b04 	addi	sp,sp,44
802132a0:	f800283a 	ret
802132a4:	00803fc4 	movi	r2,255
802132a8:	11c5803a 	cmpltu	r2,r2,r7
802132ac:	100490fa 	slli	r2,r2,3
802132b0:	003f9e06 	br	8021312c <__reset+0xfa1f312c>
802132b4:	00803fc4 	movi	r2,255
802132b8:	1445803a 	cmpltu	r2,r2,r17
802132bc:	100490fa 	slli	r2,r2,3
802132c0:	003fb206 	br	8021318c <__reset+0xfa1f318c>
802132c4:	00804034 	movhi	r2,256
802132c8:	10bfffc4 	addi	r2,r2,-1
802132cc:	11808836 	bltu	r2,r6,802134f0 <__udivdi3+0x51c>
802132d0:	00800404 	movi	r2,16
802132d4:	003f5606 	br	80213030 <__reset+0xfa1f3030>
802132d8:	30aed83a 	srl	r23,r6,r2
802132dc:	3d4e983a 	sll	r7,r7,r21
802132e0:	80acd83a 	srl	r22,r16,r2
802132e4:	9884d83a 	srl	r2,r19,r2
802132e8:	3deeb03a 	or	r23,r7,r23
802132ec:	b824d43a 	srli	r18,r23,16
802132f0:	8560983a 	sll	r16,r16,r21
802132f4:	b009883a 	mov	r4,r22
802132f8:	900b883a 	mov	r5,r18
802132fc:	3568983a 	sll	r20,r6,r21
80213300:	1420b03a 	or	r16,r2,r16
80213304:	0213be00 	call	80213be0 <__umodsi3>
80213308:	b009883a 	mov	r4,r22
8021330c:	900b883a 	mov	r5,r18
80213310:	1023883a 	mov	r17,r2
80213314:	0213b7c0 	call	80213b7c <__udivsi3>
80213318:	8808943a 	slli	r4,r17,16
8021331c:	bf3fffcc 	andi	fp,r23,65535
80213320:	8006d43a 	srli	r3,r16,16
80213324:	e0a3383a 	mul	r17,fp,r2
80213328:	100d883a 	mov	r6,r2
8021332c:	1906b03a 	or	r3,r3,r4
80213330:	1c40042e 	bgeu	r3,r17,80213344 <__udivdi3+0x370>
80213334:	1dc7883a 	add	r3,r3,r23
80213338:	10bfffc4 	addi	r2,r2,-1
8021333c:	1dc0752e 	bgeu	r3,r23,80213514 <__udivdi3+0x540>
80213340:	100d883a 	mov	r6,r2
80213344:	1c63c83a 	sub	r17,r3,r17
80213348:	900b883a 	mov	r5,r18
8021334c:	8809883a 	mov	r4,r17
80213350:	d9800015 	stw	r6,0(sp)
80213354:	0213be00 	call	80213be0 <__umodsi3>
80213358:	102d883a 	mov	r22,r2
8021335c:	8809883a 	mov	r4,r17
80213360:	900b883a 	mov	r5,r18
80213364:	0213b7c0 	call	80213b7c <__udivsi3>
80213368:	b02c943a 	slli	r22,r22,16
8021336c:	e089383a 	mul	r4,fp,r2
80213370:	843fffcc 	andi	r16,r16,65535
80213374:	85a0b03a 	or	r16,r16,r22
80213378:	d9800017 	ldw	r6,0(sp)
8021337c:	8100042e 	bgeu	r16,r4,80213390 <__udivdi3+0x3bc>
80213380:	85e1883a 	add	r16,r16,r23
80213384:	10ffffc4 	addi	r3,r2,-1
80213388:	85c05e2e 	bgeu	r16,r23,80213504 <__udivdi3+0x530>
8021338c:	1805883a 	mov	r2,r3
80213390:	300c943a 	slli	r6,r6,16
80213394:	a17fffcc 	andi	r5,r20,65535
80213398:	a028d43a 	srli	r20,r20,16
8021339c:	3084b03a 	or	r2,r6,r2
802133a0:	10ffffcc 	andi	r3,r2,65535
802133a4:	100cd43a 	srli	r6,r2,16
802133a8:	194f383a 	mul	r7,r3,r5
802133ac:	1d07383a 	mul	r3,r3,r20
802133b0:	314b383a 	mul	r5,r6,r5
802133b4:	3810d43a 	srli	r8,r7,16
802133b8:	8121c83a 	sub	r16,r16,r4
802133bc:	1947883a 	add	r3,r3,r5
802133c0:	40c7883a 	add	r3,r8,r3
802133c4:	350d383a 	mul	r6,r6,r20
802133c8:	1940022e 	bgeu	r3,r5,802133d4 <__udivdi3+0x400>
802133cc:	01000074 	movhi	r4,1
802133d0:	310d883a 	add	r6,r6,r4
802133d4:	1828d43a 	srli	r20,r3,16
802133d8:	a18d883a 	add	r6,r20,r6
802133dc:	81803e36 	bltu	r16,r6,802134d8 <__udivdi3+0x504>
802133e0:	81803826 	beq	r16,r6,802134c4 <__udivdi3+0x4f0>
802133e4:	0007883a 	mov	r3,zero
802133e8:	003fa206 	br	80213274 <__reset+0xfa1f3274>
802133ec:	88e2983a 	sll	r17,r17,r3
802133f0:	80a8d83a 	srl	r20,r16,r2
802133f4:	80e0983a 	sll	r16,r16,r3
802133f8:	882ad43a 	srli	r21,r17,16
802133fc:	9884d83a 	srl	r2,r19,r2
80213400:	a009883a 	mov	r4,r20
80213404:	a80b883a 	mov	r5,r21
80213408:	142eb03a 	or	r23,r2,r16
8021340c:	98e4983a 	sll	r18,r19,r3
80213410:	0213be00 	call	80213be0 <__umodsi3>
80213414:	a009883a 	mov	r4,r20
80213418:	a80b883a 	mov	r5,r21
8021341c:	1021883a 	mov	r16,r2
80213420:	0213b7c0 	call	80213b7c <__udivsi3>
80213424:	1039883a 	mov	fp,r2
80213428:	8d3fffcc 	andi	r20,r17,65535
8021342c:	8020943a 	slli	r16,r16,16
80213430:	b804d43a 	srli	r2,r23,16
80213434:	a72d383a 	mul	r22,r20,fp
80213438:	1404b03a 	or	r2,r2,r16
8021343c:	1580062e 	bgeu	r2,r22,80213458 <__udivdi3+0x484>
80213440:	1445883a 	add	r2,r2,r17
80213444:	e0ffffc4 	addi	r3,fp,-1
80213448:	14403836 	bltu	r2,r17,8021352c <__udivdi3+0x558>
8021344c:	1580372e 	bgeu	r2,r22,8021352c <__udivdi3+0x558>
80213450:	e73fff84 	addi	fp,fp,-2
80213454:	1445883a 	add	r2,r2,r17
80213458:	15adc83a 	sub	r22,r2,r22
8021345c:	a80b883a 	mov	r5,r21
80213460:	b009883a 	mov	r4,r22
80213464:	0213be00 	call	80213be0 <__umodsi3>
80213468:	1027883a 	mov	r19,r2
8021346c:	b009883a 	mov	r4,r22
80213470:	a80b883a 	mov	r5,r21
80213474:	0213b7c0 	call	80213b7c <__udivsi3>
80213478:	9826943a 	slli	r19,r19,16
8021347c:	a0a1383a 	mul	r16,r20,r2
80213480:	b93fffcc 	andi	r4,r23,65535
80213484:	24c8b03a 	or	r4,r4,r19
80213488:	2400062e 	bgeu	r4,r16,802134a4 <__udivdi3+0x4d0>
8021348c:	2449883a 	add	r4,r4,r17
80213490:	10ffffc4 	addi	r3,r2,-1
80213494:	24402336 	bltu	r4,r17,80213524 <__udivdi3+0x550>
80213498:	2400222e 	bgeu	r4,r16,80213524 <__udivdi3+0x550>
8021349c:	10bfff84 	addi	r2,r2,-2
802134a0:	2449883a 	add	r4,r4,r17
802134a4:	e038943a 	slli	fp,fp,16
802134a8:	2421c83a 	sub	r16,r4,r16
802134ac:	e086b03a 	or	r3,fp,r2
802134b0:	003f4306 	br	802131c0 <__reset+0xfa1f31c0>
802134b4:	2005883a 	mov	r2,r4
802134b8:	003f6906 	br	80213260 <__reset+0xfa1f3260>
802134bc:	1805883a 	mov	r2,r3
802134c0:	003f0f06 	br	80213100 <__reset+0xfa1f3100>
802134c4:	1806943a 	slli	r3,r3,16
802134c8:	9d66983a 	sll	r19,r19,r21
802134cc:	39ffffcc 	andi	r7,r7,65535
802134d0:	19c7883a 	add	r3,r3,r7
802134d4:	98ffc32e 	bgeu	r19,r3,802133e4 <__reset+0xfa1f33e4>
802134d8:	10bfffc4 	addi	r2,r2,-1
802134dc:	003fc106 	br	802133e4 <__reset+0xfa1f33e4>
802134e0:	00800604 	movi	r2,24
802134e4:	003f1106 	br	8021312c <__reset+0xfa1f312c>
802134e8:	00800604 	movi	r2,24
802134ec:	003f2706 	br	8021318c <__reset+0xfa1f318c>
802134f0:	00800604 	movi	r2,24
802134f4:	003ece06 	br	80213030 <__reset+0xfa1f3030>
802134f8:	0007883a 	mov	r3,zero
802134fc:	00800044 	movi	r2,1
80213500:	003f5c06 	br	80213274 <__reset+0xfa1f3274>
80213504:	813fa12e 	bgeu	r16,r4,8021338c <__reset+0xfa1f338c>
80213508:	10bfff84 	addi	r2,r2,-2
8021350c:	85e1883a 	add	r16,r16,r23
80213510:	003f9f06 	br	80213390 <__reset+0xfa1f3390>
80213514:	1c7f8a2e 	bgeu	r3,r17,80213340 <__reset+0xfa1f3340>
80213518:	31bfff84 	addi	r6,r6,-2
8021351c:	1dc7883a 	add	r3,r3,r23
80213520:	003f8806 	br	80213344 <__reset+0xfa1f3344>
80213524:	1805883a 	mov	r2,r3
80213528:	003fde06 	br	802134a4 <__reset+0xfa1f34a4>
8021352c:	1839883a 	mov	fp,r3
80213530:	003fc906 	br	80213458 <__reset+0xfa1f3458>
80213534:	b5bfff84 	addi	r22,r22,-2
80213538:	2449883a 	add	r4,r4,r17
8021353c:	003f3406 	br	80213210 <__reset+0xfa1f3210>
80213540:	b5bfff84 	addi	r22,r22,-2
80213544:	1445883a 	add	r2,r2,r17
80213548:	003edb06 	br	802130b8 <__reset+0xfa1f30b8>

8021354c <__umoddi3>:
8021354c:	defff404 	addi	sp,sp,-48
80213550:	df000a15 	stw	fp,40(sp)
80213554:	dc400315 	stw	r17,12(sp)
80213558:	dc000215 	stw	r16,8(sp)
8021355c:	dfc00b15 	stw	ra,44(sp)
80213560:	ddc00915 	stw	r23,36(sp)
80213564:	dd800815 	stw	r22,32(sp)
80213568:	dd400715 	stw	r21,28(sp)
8021356c:	dd000615 	stw	r20,24(sp)
80213570:	dcc00515 	stw	r19,20(sp)
80213574:	dc800415 	stw	r18,16(sp)
80213578:	2021883a 	mov	r16,r4
8021357c:	2823883a 	mov	r17,r5
80213580:	2839883a 	mov	fp,r5
80213584:	38003c1e 	bne	r7,zero,80213678 <__umoddi3+0x12c>
80213588:	3027883a 	mov	r19,r6
8021358c:	2029883a 	mov	r20,r4
80213590:	2980512e 	bgeu	r5,r6,802136d8 <__umoddi3+0x18c>
80213594:	00bfffd4 	movui	r2,65535
80213598:	11809a36 	bltu	r2,r6,80213804 <__umoddi3+0x2b8>
8021359c:	01003fc4 	movi	r4,255
802135a0:	2189803a 	cmpltu	r4,r4,r6
802135a4:	200890fa 	slli	r4,r4,3
802135a8:	3104d83a 	srl	r2,r6,r4
802135ac:	00e008b4 	movhi	r3,32802
802135b0:	18f3a284 	addi	r3,r3,-12662
802135b4:	1885883a 	add	r2,r3,r2
802135b8:	10c00003 	ldbu	r3,0(r2)
802135bc:	00800804 	movi	r2,32
802135c0:	1909883a 	add	r4,r3,r4
802135c4:	1125c83a 	sub	r18,r2,r4
802135c8:	90000526 	beq	r18,zero,802135e0 <__umoddi3+0x94>
802135cc:	8ca2983a 	sll	r17,r17,r18
802135d0:	8108d83a 	srl	r4,r16,r4
802135d4:	34a6983a 	sll	r19,r6,r18
802135d8:	84a8983a 	sll	r20,r16,r18
802135dc:	2478b03a 	or	fp,r4,r17
802135e0:	982ed43a 	srli	r23,r19,16
802135e4:	e009883a 	mov	r4,fp
802135e8:	9dbfffcc 	andi	r22,r19,65535
802135ec:	b80b883a 	mov	r5,r23
802135f0:	0213be00 	call	80213be0 <__umodsi3>
802135f4:	e009883a 	mov	r4,fp
802135f8:	b80b883a 	mov	r5,r23
802135fc:	102b883a 	mov	r21,r2
80213600:	0213b7c0 	call	80213b7c <__udivsi3>
80213604:	a806943a 	slli	r3,r21,16
80213608:	a008d43a 	srli	r4,r20,16
8021360c:	b085383a 	mul	r2,r22,r2
80213610:	20c8b03a 	or	r4,r4,r3
80213614:	2080032e 	bgeu	r4,r2,80213624 <__umoddi3+0xd8>
80213618:	24c9883a 	add	r4,r4,r19
8021361c:	24c00136 	bltu	r4,r19,80213624 <__umoddi3+0xd8>
80213620:	20811036 	bltu	r4,r2,80213a64 <__umoddi3+0x518>
80213624:	20abc83a 	sub	r21,r4,r2
80213628:	b80b883a 	mov	r5,r23
8021362c:	a809883a 	mov	r4,r21
80213630:	0213be00 	call	80213be0 <__umodsi3>
80213634:	1023883a 	mov	r17,r2
80213638:	b80b883a 	mov	r5,r23
8021363c:	a809883a 	mov	r4,r21
80213640:	0213b7c0 	call	80213b7c <__udivsi3>
80213644:	8822943a 	slli	r17,r17,16
80213648:	b085383a 	mul	r2,r22,r2
8021364c:	a0ffffcc 	andi	r3,r20,65535
80213650:	1c46b03a 	or	r3,r3,r17
80213654:	1880042e 	bgeu	r3,r2,80213668 <__umoddi3+0x11c>
80213658:	1cc7883a 	add	r3,r3,r19
8021365c:	1cc00236 	bltu	r3,r19,80213668 <__umoddi3+0x11c>
80213660:	1880012e 	bgeu	r3,r2,80213668 <__umoddi3+0x11c>
80213664:	1cc7883a 	add	r3,r3,r19
80213668:	1885c83a 	sub	r2,r3,r2
8021366c:	1484d83a 	srl	r2,r2,r18
80213670:	0007883a 	mov	r3,zero
80213674:	00004f06 	br	802137b4 <__umoddi3+0x268>
80213678:	29c04c36 	bltu	r5,r7,802137ac <__umoddi3+0x260>
8021367c:	00bfffd4 	movui	r2,65535
80213680:	11c0582e 	bgeu	r2,r7,802137e4 <__umoddi3+0x298>
80213684:	00804034 	movhi	r2,256
80213688:	10bfffc4 	addi	r2,r2,-1
8021368c:	11c0e736 	bltu	r2,r7,80213a2c <__umoddi3+0x4e0>
80213690:	01000404 	movi	r4,16
80213694:	3904d83a 	srl	r2,r7,r4
80213698:	00e008b4 	movhi	r3,32802
8021369c:	18f3a284 	addi	r3,r3,-12662
802136a0:	1885883a 	add	r2,r3,r2
802136a4:	14c00003 	ldbu	r19,0(r2)
802136a8:	00c00804 	movi	r3,32
802136ac:	9927883a 	add	r19,r19,r4
802136b0:	1ce9c83a 	sub	r20,r3,r19
802136b4:	a000581e 	bne	r20,zero,80213818 <__umoddi3+0x2cc>
802136b8:	3c400136 	bltu	r7,r17,802136c0 <__umoddi3+0x174>
802136bc:	8180eb36 	bltu	r16,r6,80213a6c <__umoddi3+0x520>
802136c0:	8185c83a 	sub	r2,r16,r6
802136c4:	89e3c83a 	sub	r17,r17,r7
802136c8:	8089803a 	cmpltu	r4,r16,r2
802136cc:	8939c83a 	sub	fp,r17,r4
802136d0:	e007883a 	mov	r3,fp
802136d4:	00003706 	br	802137b4 <__umoddi3+0x268>
802136d8:	3000041e 	bne	r6,zero,802136ec <__umoddi3+0x1a0>
802136dc:	000b883a 	mov	r5,zero
802136e0:	01000044 	movi	r4,1
802136e4:	0213b7c0 	call	80213b7c <__udivsi3>
802136e8:	1027883a 	mov	r19,r2
802136ec:	00bfffd4 	movui	r2,65535
802136f0:	14c0402e 	bgeu	r2,r19,802137f4 <__umoddi3+0x2a8>
802136f4:	00804034 	movhi	r2,256
802136f8:	10bfffc4 	addi	r2,r2,-1
802136fc:	14c0cd36 	bltu	r2,r19,80213a34 <__umoddi3+0x4e8>
80213700:	00800404 	movi	r2,16
80213704:	9886d83a 	srl	r3,r19,r2
80213708:	012008b4 	movhi	r4,32802
8021370c:	2133a284 	addi	r4,r4,-12662
80213710:	20c7883a 	add	r3,r4,r3
80213714:	18c00003 	ldbu	r3,0(r3)
80213718:	1887883a 	add	r3,r3,r2
8021371c:	00800804 	movi	r2,32
80213720:	10e5c83a 	sub	r18,r2,r3
80213724:	9000901e 	bne	r18,zero,80213968 <__umoddi3+0x41c>
80213728:	982cd43a 	srli	r22,r19,16
8021372c:	8ce3c83a 	sub	r17,r17,r19
80213730:	9d7fffcc 	andi	r21,r19,65535
80213734:	b00b883a 	mov	r5,r22
80213738:	8809883a 	mov	r4,r17
8021373c:	0213be00 	call	80213be0 <__umodsi3>
80213740:	8809883a 	mov	r4,r17
80213744:	b00b883a 	mov	r5,r22
80213748:	1021883a 	mov	r16,r2
8021374c:	0213b7c0 	call	80213b7c <__udivsi3>
80213750:	8006943a 	slli	r3,r16,16
80213754:	a008d43a 	srli	r4,r20,16
80213758:	1545383a 	mul	r2,r2,r21
8021375c:	20c8b03a 	or	r4,r4,r3
80213760:	2080042e 	bgeu	r4,r2,80213774 <__umoddi3+0x228>
80213764:	24c9883a 	add	r4,r4,r19
80213768:	24c00236 	bltu	r4,r19,80213774 <__umoddi3+0x228>
8021376c:	2080012e 	bgeu	r4,r2,80213774 <__umoddi3+0x228>
80213770:	24c9883a 	add	r4,r4,r19
80213774:	20a1c83a 	sub	r16,r4,r2
80213778:	b00b883a 	mov	r5,r22
8021377c:	8009883a 	mov	r4,r16
80213780:	0213be00 	call	80213be0 <__umodsi3>
80213784:	1023883a 	mov	r17,r2
80213788:	b00b883a 	mov	r5,r22
8021378c:	8009883a 	mov	r4,r16
80213790:	0213b7c0 	call	80213b7c <__udivsi3>
80213794:	8822943a 	slli	r17,r17,16
80213798:	1545383a 	mul	r2,r2,r21
8021379c:	a53fffcc 	andi	r20,r20,65535
802137a0:	a446b03a 	or	r3,r20,r17
802137a4:	18bfb02e 	bgeu	r3,r2,80213668 <__reset+0xfa1f3668>
802137a8:	003fab06 	br	80213658 <__reset+0xfa1f3658>
802137ac:	2005883a 	mov	r2,r4
802137b0:	2807883a 	mov	r3,r5
802137b4:	dfc00b17 	ldw	ra,44(sp)
802137b8:	df000a17 	ldw	fp,40(sp)
802137bc:	ddc00917 	ldw	r23,36(sp)
802137c0:	dd800817 	ldw	r22,32(sp)
802137c4:	dd400717 	ldw	r21,28(sp)
802137c8:	dd000617 	ldw	r20,24(sp)
802137cc:	dcc00517 	ldw	r19,20(sp)
802137d0:	dc800417 	ldw	r18,16(sp)
802137d4:	dc400317 	ldw	r17,12(sp)
802137d8:	dc000217 	ldw	r16,8(sp)
802137dc:	dec00c04 	addi	sp,sp,48
802137e0:	f800283a 	ret
802137e4:	04c03fc4 	movi	r19,255
802137e8:	99c9803a 	cmpltu	r4,r19,r7
802137ec:	200890fa 	slli	r4,r4,3
802137f0:	003fa806 	br	80213694 <__reset+0xfa1f3694>
802137f4:	00803fc4 	movi	r2,255
802137f8:	14c5803a 	cmpltu	r2,r2,r19
802137fc:	100490fa 	slli	r2,r2,3
80213800:	003fc006 	br	80213704 <__reset+0xfa1f3704>
80213804:	00804034 	movhi	r2,256
80213808:	10bfffc4 	addi	r2,r2,-1
8021380c:	11808b36 	bltu	r2,r6,80213a3c <__umoddi3+0x4f0>
80213810:	01000404 	movi	r4,16
80213814:	003f6406 	br	802135a8 <__reset+0xfa1f35a8>
80213818:	34c4d83a 	srl	r2,r6,r19
8021381c:	3d0e983a 	sll	r7,r7,r20
80213820:	8cf8d83a 	srl	fp,r17,r19
80213824:	8d10983a 	sll	r8,r17,r20
80213828:	38aab03a 	or	r21,r7,r2
8021382c:	a82cd43a 	srli	r22,r21,16
80213830:	84e2d83a 	srl	r17,r16,r19
80213834:	e009883a 	mov	r4,fp
80213838:	b00b883a 	mov	r5,r22
8021383c:	8a22b03a 	or	r17,r17,r8
80213840:	3524983a 	sll	r18,r6,r20
80213844:	0213be00 	call	80213be0 <__umodsi3>
80213848:	e009883a 	mov	r4,fp
8021384c:	b00b883a 	mov	r5,r22
80213850:	102f883a 	mov	r23,r2
80213854:	0213b7c0 	call	80213b7c <__udivsi3>
80213858:	100d883a 	mov	r6,r2
8021385c:	b808943a 	slli	r4,r23,16
80213860:	aa3fffcc 	andi	r8,r21,65535
80213864:	8804d43a 	srli	r2,r17,16
80213868:	41af383a 	mul	r23,r8,r6
8021386c:	8520983a 	sll	r16,r16,r20
80213870:	1104b03a 	or	r2,r2,r4
80213874:	15c0042e 	bgeu	r2,r23,80213888 <__umoddi3+0x33c>
80213878:	1545883a 	add	r2,r2,r21
8021387c:	30ffffc4 	addi	r3,r6,-1
80213880:	1540742e 	bgeu	r2,r21,80213a54 <__umoddi3+0x508>
80213884:	180d883a 	mov	r6,r3
80213888:	15efc83a 	sub	r23,r2,r23
8021388c:	b00b883a 	mov	r5,r22
80213890:	b809883a 	mov	r4,r23
80213894:	d9800115 	stw	r6,4(sp)
80213898:	da000015 	stw	r8,0(sp)
8021389c:	0213be00 	call	80213be0 <__umodsi3>
802138a0:	b00b883a 	mov	r5,r22
802138a4:	b809883a 	mov	r4,r23
802138a8:	1039883a 	mov	fp,r2
802138ac:	0213b7c0 	call	80213b7c <__udivsi3>
802138b0:	da000017 	ldw	r8,0(sp)
802138b4:	e038943a 	slli	fp,fp,16
802138b8:	100b883a 	mov	r5,r2
802138bc:	4089383a 	mul	r4,r8,r2
802138c0:	8a3fffcc 	andi	r8,r17,65535
802138c4:	4710b03a 	or	r8,r8,fp
802138c8:	d9800117 	ldw	r6,4(sp)
802138cc:	4100042e 	bgeu	r8,r4,802138e0 <__umoddi3+0x394>
802138d0:	4551883a 	add	r8,r8,r21
802138d4:	10bfffc4 	addi	r2,r2,-1
802138d8:	45405a2e 	bgeu	r8,r21,80213a44 <__umoddi3+0x4f8>
802138dc:	100b883a 	mov	r5,r2
802138e0:	300c943a 	slli	r6,r6,16
802138e4:	91ffffcc 	andi	r7,r18,65535
802138e8:	9004d43a 	srli	r2,r18,16
802138ec:	314cb03a 	or	r6,r6,r5
802138f0:	317fffcc 	andi	r5,r6,65535
802138f4:	300cd43a 	srli	r6,r6,16
802138f8:	29d3383a 	mul	r9,r5,r7
802138fc:	288b383a 	mul	r5,r5,r2
80213900:	31cf383a 	mul	r7,r6,r7
80213904:	4806d43a 	srli	r3,r9,16
80213908:	4111c83a 	sub	r8,r8,r4
8021390c:	29cb883a 	add	r5,r5,r7
80213910:	194b883a 	add	r5,r3,r5
80213914:	3085383a 	mul	r2,r6,r2
80213918:	29c0022e 	bgeu	r5,r7,80213924 <__umoddi3+0x3d8>
8021391c:	00c00074 	movhi	r3,1
80213920:	10c5883a 	add	r2,r2,r3
80213924:	2808d43a 	srli	r4,r5,16
80213928:	280a943a 	slli	r5,r5,16
8021392c:	4a7fffcc 	andi	r9,r9,65535
80213930:	2085883a 	add	r2,r4,r2
80213934:	2a4b883a 	add	r5,r5,r9
80213938:	40803636 	bltu	r8,r2,80213a14 <__umoddi3+0x4c8>
8021393c:	40804d26 	beq	r8,r2,80213a74 <__umoddi3+0x528>
80213940:	4089c83a 	sub	r4,r8,r2
80213944:	280f883a 	mov	r7,r5
80213948:	81cfc83a 	sub	r7,r16,r7
8021394c:	81c7803a 	cmpltu	r3,r16,r7
80213950:	20c7c83a 	sub	r3,r4,r3
80213954:	1cc4983a 	sll	r2,r3,r19
80213958:	3d0ed83a 	srl	r7,r7,r20
8021395c:	1d06d83a 	srl	r3,r3,r20
80213960:	11c4b03a 	or	r2,r2,r7
80213964:	003f9306 	br	802137b4 <__reset+0xfa1f37b4>
80213968:	9ca6983a 	sll	r19,r19,r18
8021396c:	88e8d83a 	srl	r20,r17,r3
80213970:	80c4d83a 	srl	r2,r16,r3
80213974:	982cd43a 	srli	r22,r19,16
80213978:	8ca2983a 	sll	r17,r17,r18
8021397c:	a009883a 	mov	r4,r20
80213980:	b00b883a 	mov	r5,r22
80213984:	1478b03a 	or	fp,r2,r17
80213988:	0213be00 	call	80213be0 <__umodsi3>
8021398c:	a009883a 	mov	r4,r20
80213990:	b00b883a 	mov	r5,r22
80213994:	1023883a 	mov	r17,r2
80213998:	0213b7c0 	call	80213b7c <__udivsi3>
8021399c:	9d7fffcc 	andi	r21,r19,65535
802139a0:	880a943a 	slli	r5,r17,16
802139a4:	e008d43a 	srli	r4,fp,16
802139a8:	a885383a 	mul	r2,r21,r2
802139ac:	84a8983a 	sll	r20,r16,r18
802139b0:	2148b03a 	or	r4,r4,r5
802139b4:	2080042e 	bgeu	r4,r2,802139c8 <__umoddi3+0x47c>
802139b8:	24c9883a 	add	r4,r4,r19
802139bc:	24c00236 	bltu	r4,r19,802139c8 <__umoddi3+0x47c>
802139c0:	2080012e 	bgeu	r4,r2,802139c8 <__umoddi3+0x47c>
802139c4:	24c9883a 	add	r4,r4,r19
802139c8:	20a3c83a 	sub	r17,r4,r2
802139cc:	b00b883a 	mov	r5,r22
802139d0:	8809883a 	mov	r4,r17
802139d4:	0213be00 	call	80213be0 <__umodsi3>
802139d8:	102f883a 	mov	r23,r2
802139dc:	8809883a 	mov	r4,r17
802139e0:	b00b883a 	mov	r5,r22
802139e4:	0213b7c0 	call	80213b7c <__udivsi3>
802139e8:	b82e943a 	slli	r23,r23,16
802139ec:	a885383a 	mul	r2,r21,r2
802139f0:	e13fffcc 	andi	r4,fp,65535
802139f4:	25c8b03a 	or	r4,r4,r23
802139f8:	2080042e 	bgeu	r4,r2,80213a0c <__umoddi3+0x4c0>
802139fc:	24c9883a 	add	r4,r4,r19
80213a00:	24c00236 	bltu	r4,r19,80213a0c <__umoddi3+0x4c0>
80213a04:	2080012e 	bgeu	r4,r2,80213a0c <__umoddi3+0x4c0>
80213a08:	24c9883a 	add	r4,r4,r19
80213a0c:	20a3c83a 	sub	r17,r4,r2
80213a10:	003f4806 	br	80213734 <__reset+0xfa1f3734>
80213a14:	2c8fc83a 	sub	r7,r5,r18
80213a18:	1545c83a 	sub	r2,r2,r21
80213a1c:	29cb803a 	cmpltu	r5,r5,r7
80213a20:	1145c83a 	sub	r2,r2,r5
80213a24:	4089c83a 	sub	r4,r8,r2
80213a28:	003fc706 	br	80213948 <__reset+0xfa1f3948>
80213a2c:	01000604 	movi	r4,24
80213a30:	003f1806 	br	80213694 <__reset+0xfa1f3694>
80213a34:	00800604 	movi	r2,24
80213a38:	003f3206 	br	80213704 <__reset+0xfa1f3704>
80213a3c:	01000604 	movi	r4,24
80213a40:	003ed906 	br	802135a8 <__reset+0xfa1f35a8>
80213a44:	413fa52e 	bgeu	r8,r4,802138dc <__reset+0xfa1f38dc>
80213a48:	297fff84 	addi	r5,r5,-2
80213a4c:	4551883a 	add	r8,r8,r21
80213a50:	003fa306 	br	802138e0 <__reset+0xfa1f38e0>
80213a54:	15ff8b2e 	bgeu	r2,r23,80213884 <__reset+0xfa1f3884>
80213a58:	31bfff84 	addi	r6,r6,-2
80213a5c:	1545883a 	add	r2,r2,r21
80213a60:	003f8906 	br	80213888 <__reset+0xfa1f3888>
80213a64:	24c9883a 	add	r4,r4,r19
80213a68:	003eee06 	br	80213624 <__reset+0xfa1f3624>
80213a6c:	8005883a 	mov	r2,r16
80213a70:	003f1706 	br	802136d0 <__reset+0xfa1f36d0>
80213a74:	817fe736 	bltu	r16,r5,80213a14 <__reset+0xfa1f3a14>
80213a78:	280f883a 	mov	r7,r5
80213a7c:	0009883a 	mov	r4,zero
80213a80:	003fb106 	br	80213948 <__reset+0xfa1f3948>

80213a84 <__divsi3>:
80213a84:	20001b16 	blt	r4,zero,80213af4 <__divsi3+0x70>
80213a88:	000f883a 	mov	r7,zero
80213a8c:	28001616 	blt	r5,zero,80213ae8 <__divsi3+0x64>
80213a90:	200d883a 	mov	r6,r4
80213a94:	29001a2e 	bgeu	r5,r4,80213b00 <__divsi3+0x7c>
80213a98:	00800804 	movi	r2,32
80213a9c:	00c00044 	movi	r3,1
80213aa0:	00000106 	br	80213aa8 <__divsi3+0x24>
80213aa4:	10000d26 	beq	r2,zero,80213adc <__divsi3+0x58>
80213aa8:	294b883a 	add	r5,r5,r5
80213aac:	10bfffc4 	addi	r2,r2,-1
80213ab0:	18c7883a 	add	r3,r3,r3
80213ab4:	293ffb36 	bltu	r5,r4,80213aa4 <__reset+0xfa1f3aa4>
80213ab8:	0005883a 	mov	r2,zero
80213abc:	18000726 	beq	r3,zero,80213adc <__divsi3+0x58>
80213ac0:	0005883a 	mov	r2,zero
80213ac4:	31400236 	bltu	r6,r5,80213ad0 <__divsi3+0x4c>
80213ac8:	314dc83a 	sub	r6,r6,r5
80213acc:	10c4b03a 	or	r2,r2,r3
80213ad0:	1806d07a 	srli	r3,r3,1
80213ad4:	280ad07a 	srli	r5,r5,1
80213ad8:	183ffa1e 	bne	r3,zero,80213ac4 <__reset+0xfa1f3ac4>
80213adc:	38000126 	beq	r7,zero,80213ae4 <__divsi3+0x60>
80213ae0:	0085c83a 	sub	r2,zero,r2
80213ae4:	f800283a 	ret
80213ae8:	014bc83a 	sub	r5,zero,r5
80213aec:	39c0005c 	xori	r7,r7,1
80213af0:	003fe706 	br	80213a90 <__reset+0xfa1f3a90>
80213af4:	0109c83a 	sub	r4,zero,r4
80213af8:	01c00044 	movi	r7,1
80213afc:	003fe306 	br	80213a8c <__reset+0xfa1f3a8c>
80213b00:	00c00044 	movi	r3,1
80213b04:	003fee06 	br	80213ac0 <__reset+0xfa1f3ac0>

80213b08 <__modsi3>:
80213b08:	20001716 	blt	r4,zero,80213b68 <__modsi3+0x60>
80213b0c:	000f883a 	mov	r7,zero
80213b10:	2005883a 	mov	r2,r4
80213b14:	28001216 	blt	r5,zero,80213b60 <__modsi3+0x58>
80213b18:	2900162e 	bgeu	r5,r4,80213b74 <__modsi3+0x6c>
80213b1c:	01800804 	movi	r6,32
80213b20:	00c00044 	movi	r3,1
80213b24:	00000106 	br	80213b2c <__modsi3+0x24>
80213b28:	30000a26 	beq	r6,zero,80213b54 <__modsi3+0x4c>
80213b2c:	294b883a 	add	r5,r5,r5
80213b30:	31bfffc4 	addi	r6,r6,-1
80213b34:	18c7883a 	add	r3,r3,r3
80213b38:	293ffb36 	bltu	r5,r4,80213b28 <__reset+0xfa1f3b28>
80213b3c:	18000526 	beq	r3,zero,80213b54 <__modsi3+0x4c>
80213b40:	1806d07a 	srli	r3,r3,1
80213b44:	11400136 	bltu	r2,r5,80213b4c <__modsi3+0x44>
80213b48:	1145c83a 	sub	r2,r2,r5
80213b4c:	280ad07a 	srli	r5,r5,1
80213b50:	183ffb1e 	bne	r3,zero,80213b40 <__reset+0xfa1f3b40>
80213b54:	38000126 	beq	r7,zero,80213b5c <__modsi3+0x54>
80213b58:	0085c83a 	sub	r2,zero,r2
80213b5c:	f800283a 	ret
80213b60:	014bc83a 	sub	r5,zero,r5
80213b64:	003fec06 	br	80213b18 <__reset+0xfa1f3b18>
80213b68:	0109c83a 	sub	r4,zero,r4
80213b6c:	01c00044 	movi	r7,1
80213b70:	003fe706 	br	80213b10 <__reset+0xfa1f3b10>
80213b74:	00c00044 	movi	r3,1
80213b78:	003ff106 	br	80213b40 <__reset+0xfa1f3b40>

80213b7c <__udivsi3>:
80213b7c:	200d883a 	mov	r6,r4
80213b80:	2900152e 	bgeu	r5,r4,80213bd8 <__udivsi3+0x5c>
80213b84:	28001416 	blt	r5,zero,80213bd8 <__udivsi3+0x5c>
80213b88:	00800804 	movi	r2,32
80213b8c:	00c00044 	movi	r3,1
80213b90:	00000206 	br	80213b9c <__udivsi3+0x20>
80213b94:	10000e26 	beq	r2,zero,80213bd0 <__udivsi3+0x54>
80213b98:	28000516 	blt	r5,zero,80213bb0 <__udivsi3+0x34>
80213b9c:	294b883a 	add	r5,r5,r5
80213ba0:	10bfffc4 	addi	r2,r2,-1
80213ba4:	18c7883a 	add	r3,r3,r3
80213ba8:	293ffa36 	bltu	r5,r4,80213b94 <__reset+0xfa1f3b94>
80213bac:	18000826 	beq	r3,zero,80213bd0 <__udivsi3+0x54>
80213bb0:	0005883a 	mov	r2,zero
80213bb4:	31400236 	bltu	r6,r5,80213bc0 <__udivsi3+0x44>
80213bb8:	314dc83a 	sub	r6,r6,r5
80213bbc:	10c4b03a 	or	r2,r2,r3
80213bc0:	1806d07a 	srli	r3,r3,1
80213bc4:	280ad07a 	srli	r5,r5,1
80213bc8:	183ffa1e 	bne	r3,zero,80213bb4 <__reset+0xfa1f3bb4>
80213bcc:	f800283a 	ret
80213bd0:	0005883a 	mov	r2,zero
80213bd4:	f800283a 	ret
80213bd8:	00c00044 	movi	r3,1
80213bdc:	003ff406 	br	80213bb0 <__reset+0xfa1f3bb0>

80213be0 <__umodsi3>:
80213be0:	2005883a 	mov	r2,r4
80213be4:	2900122e 	bgeu	r5,r4,80213c30 <__umodsi3+0x50>
80213be8:	28001116 	blt	r5,zero,80213c30 <__umodsi3+0x50>
80213bec:	01800804 	movi	r6,32
80213bf0:	00c00044 	movi	r3,1
80213bf4:	00000206 	br	80213c00 <__umodsi3+0x20>
80213bf8:	30000c26 	beq	r6,zero,80213c2c <__umodsi3+0x4c>
80213bfc:	28000516 	blt	r5,zero,80213c14 <__umodsi3+0x34>
80213c00:	294b883a 	add	r5,r5,r5
80213c04:	31bfffc4 	addi	r6,r6,-1
80213c08:	18c7883a 	add	r3,r3,r3
80213c0c:	293ffa36 	bltu	r5,r4,80213bf8 <__reset+0xfa1f3bf8>
80213c10:	18000626 	beq	r3,zero,80213c2c <__umodsi3+0x4c>
80213c14:	1806d07a 	srli	r3,r3,1
80213c18:	11400136 	bltu	r2,r5,80213c20 <__umodsi3+0x40>
80213c1c:	1145c83a 	sub	r2,r2,r5
80213c20:	280ad07a 	srli	r5,r5,1
80213c24:	183ffb1e 	bne	r3,zero,80213c14 <__reset+0xfa1f3c14>
80213c28:	f800283a 	ret
80213c2c:	f800283a 	ret
80213c30:	00c00044 	movi	r3,1
80213c34:	003ff706 	br	80213c14 <__reset+0xfa1f3c14>

80213c38 <__adddf3>:
80213c38:	02c00434 	movhi	r11,16
80213c3c:	5affffc4 	addi	r11,r11,-1
80213c40:	2806d7fa 	srli	r3,r5,31
80213c44:	2ad4703a 	and	r10,r5,r11
80213c48:	3ad2703a 	and	r9,r7,r11
80213c4c:	3804d53a 	srli	r2,r7,20
80213c50:	3018d77a 	srli	r12,r6,29
80213c54:	280ad53a 	srli	r5,r5,20
80213c58:	501490fa 	slli	r10,r10,3
80213c5c:	2010d77a 	srli	r8,r4,29
80213c60:	481290fa 	slli	r9,r9,3
80213c64:	380ed7fa 	srli	r7,r7,31
80213c68:	defffb04 	addi	sp,sp,-20
80213c6c:	dc800215 	stw	r18,8(sp)
80213c70:	dc400115 	stw	r17,4(sp)
80213c74:	dc000015 	stw	r16,0(sp)
80213c78:	dfc00415 	stw	ra,16(sp)
80213c7c:	dcc00315 	stw	r19,12(sp)
80213c80:	1c803fcc 	andi	r18,r3,255
80213c84:	2c01ffcc 	andi	r16,r5,2047
80213c88:	5210b03a 	or	r8,r10,r8
80213c8c:	202290fa 	slli	r17,r4,3
80213c90:	1081ffcc 	andi	r2,r2,2047
80213c94:	4b12b03a 	or	r9,r9,r12
80213c98:	300c90fa 	slli	r6,r6,3
80213c9c:	91c07526 	beq	r18,r7,80213e74 <__adddf3+0x23c>
80213ca0:	8087c83a 	sub	r3,r16,r2
80213ca4:	00c0ab0e 	bge	zero,r3,80213f54 <__adddf3+0x31c>
80213ca8:	10002a1e 	bne	r2,zero,80213d54 <__adddf3+0x11c>
80213cac:	4984b03a 	or	r2,r9,r6
80213cb0:	1000961e 	bne	r2,zero,80213f0c <__adddf3+0x2d4>
80213cb4:	888001cc 	andi	r2,r17,7
80213cb8:	10000726 	beq	r2,zero,80213cd8 <__adddf3+0xa0>
80213cbc:	888003cc 	andi	r2,r17,15
80213cc0:	00c00104 	movi	r3,4
80213cc4:	10c00426 	beq	r2,r3,80213cd8 <__adddf3+0xa0>
80213cc8:	88c7883a 	add	r3,r17,r3
80213ccc:	1c63803a 	cmpltu	r17,r3,r17
80213cd0:	4451883a 	add	r8,r8,r17
80213cd4:	1823883a 	mov	r17,r3
80213cd8:	4080202c 	andhi	r2,r8,128
80213cdc:	10005926 	beq	r2,zero,80213e44 <__adddf3+0x20c>
80213ce0:	84000044 	addi	r16,r16,1
80213ce4:	0081ffc4 	movi	r2,2047
80213ce8:	8080ba26 	beq	r16,r2,80213fd4 <__adddf3+0x39c>
80213cec:	00bfe034 	movhi	r2,65408
80213cf0:	10bfffc4 	addi	r2,r2,-1
80213cf4:	4090703a 	and	r8,r8,r2
80213cf8:	4004977a 	slli	r2,r8,29
80213cfc:	4010927a 	slli	r8,r8,9
80213d00:	8822d0fa 	srli	r17,r17,3
80213d04:	8401ffcc 	andi	r16,r16,2047
80213d08:	4010d33a 	srli	r8,r8,12
80213d0c:	9007883a 	mov	r3,r18
80213d10:	1444b03a 	or	r2,r2,r17
80213d14:	8401ffcc 	andi	r16,r16,2047
80213d18:	8020953a 	slli	r16,r16,20
80213d1c:	18c03fcc 	andi	r3,r3,255
80213d20:	01000434 	movhi	r4,16
80213d24:	213fffc4 	addi	r4,r4,-1
80213d28:	180697fa 	slli	r3,r3,31
80213d2c:	4110703a 	and	r8,r8,r4
80213d30:	4410b03a 	or	r8,r8,r16
80213d34:	40c6b03a 	or	r3,r8,r3
80213d38:	dfc00417 	ldw	ra,16(sp)
80213d3c:	dcc00317 	ldw	r19,12(sp)
80213d40:	dc800217 	ldw	r18,8(sp)
80213d44:	dc400117 	ldw	r17,4(sp)
80213d48:	dc000017 	ldw	r16,0(sp)
80213d4c:	dec00504 	addi	sp,sp,20
80213d50:	f800283a 	ret
80213d54:	0081ffc4 	movi	r2,2047
80213d58:	80bfd626 	beq	r16,r2,80213cb4 <__reset+0xfa1f3cb4>
80213d5c:	4a402034 	orhi	r9,r9,128
80213d60:	00800e04 	movi	r2,56
80213d64:	10c09f16 	blt	r2,r3,80213fe4 <__adddf3+0x3ac>
80213d68:	008007c4 	movi	r2,31
80213d6c:	10c0c216 	blt	r2,r3,80214078 <__adddf3+0x440>
80213d70:	00800804 	movi	r2,32
80213d74:	10c5c83a 	sub	r2,r2,r3
80213d78:	488a983a 	sll	r5,r9,r2
80213d7c:	30c8d83a 	srl	r4,r6,r3
80213d80:	3084983a 	sll	r2,r6,r2
80213d84:	48c6d83a 	srl	r3,r9,r3
80213d88:	290cb03a 	or	r6,r5,r4
80213d8c:	1004c03a 	cmpne	r2,r2,zero
80213d90:	308cb03a 	or	r6,r6,r2
80213d94:	898dc83a 	sub	r6,r17,r6
80213d98:	89a3803a 	cmpltu	r17,r17,r6
80213d9c:	40d1c83a 	sub	r8,r8,r3
80213da0:	4451c83a 	sub	r8,r8,r17
80213da4:	3023883a 	mov	r17,r6
80213da8:	4080202c 	andhi	r2,r8,128
80213dac:	10002326 	beq	r2,zero,80213e3c <__adddf3+0x204>
80213db0:	04c02034 	movhi	r19,128
80213db4:	9cffffc4 	addi	r19,r19,-1
80213db8:	44e6703a 	and	r19,r8,r19
80213dbc:	98007626 	beq	r19,zero,80213f98 <__adddf3+0x360>
80213dc0:	9809883a 	mov	r4,r19
80213dc4:	02061740 	call	80206174 <__clzsi2>
80213dc8:	10fffe04 	addi	r3,r2,-8
80213dcc:	010007c4 	movi	r4,31
80213dd0:	20c07716 	blt	r4,r3,80213fb0 <__adddf3+0x378>
80213dd4:	00800804 	movi	r2,32
80213dd8:	10c5c83a 	sub	r2,r2,r3
80213ddc:	8884d83a 	srl	r2,r17,r2
80213de0:	98d0983a 	sll	r8,r19,r3
80213de4:	88e2983a 	sll	r17,r17,r3
80213de8:	1204b03a 	or	r2,r2,r8
80213dec:	1c007416 	blt	r3,r16,80213fc0 <__adddf3+0x388>
80213df0:	1c21c83a 	sub	r16,r3,r16
80213df4:	82000044 	addi	r8,r16,1
80213df8:	00c007c4 	movi	r3,31
80213dfc:	1a009116 	blt	r3,r8,80214044 <__adddf3+0x40c>
80213e00:	00c00804 	movi	r3,32
80213e04:	1a07c83a 	sub	r3,r3,r8
80213e08:	8a08d83a 	srl	r4,r17,r8
80213e0c:	88e2983a 	sll	r17,r17,r3
80213e10:	10c6983a 	sll	r3,r2,r3
80213e14:	1210d83a 	srl	r8,r2,r8
80213e18:	8804c03a 	cmpne	r2,r17,zero
80213e1c:	1906b03a 	or	r3,r3,r4
80213e20:	18a2b03a 	or	r17,r3,r2
80213e24:	0021883a 	mov	r16,zero
80213e28:	003fa206 	br	80213cb4 <__reset+0xfa1f3cb4>
80213e2c:	1890b03a 	or	r8,r3,r2
80213e30:	40017d26 	beq	r8,zero,80214428 <__adddf3+0x7f0>
80213e34:	1011883a 	mov	r8,r2
80213e38:	1823883a 	mov	r17,r3
80213e3c:	888001cc 	andi	r2,r17,7
80213e40:	103f9e1e 	bne	r2,zero,80213cbc <__reset+0xfa1f3cbc>
80213e44:	4004977a 	slli	r2,r8,29
80213e48:	8822d0fa 	srli	r17,r17,3
80213e4c:	4010d0fa 	srli	r8,r8,3
80213e50:	9007883a 	mov	r3,r18
80213e54:	1444b03a 	or	r2,r2,r17
80213e58:	0101ffc4 	movi	r4,2047
80213e5c:	81002426 	beq	r16,r4,80213ef0 <__adddf3+0x2b8>
80213e60:	8120703a 	and	r16,r16,r4
80213e64:	01000434 	movhi	r4,16
80213e68:	213fffc4 	addi	r4,r4,-1
80213e6c:	4110703a 	and	r8,r8,r4
80213e70:	003fa806 	br	80213d14 <__reset+0xfa1f3d14>
80213e74:	8089c83a 	sub	r4,r16,r2
80213e78:	01005e0e 	bge	zero,r4,80213ff4 <__adddf3+0x3bc>
80213e7c:	10002b26 	beq	r2,zero,80213f2c <__adddf3+0x2f4>
80213e80:	0081ffc4 	movi	r2,2047
80213e84:	80bf8b26 	beq	r16,r2,80213cb4 <__reset+0xfa1f3cb4>
80213e88:	4a402034 	orhi	r9,r9,128
80213e8c:	00800e04 	movi	r2,56
80213e90:	1100a40e 	bge	r2,r4,80214124 <__adddf3+0x4ec>
80213e94:	498cb03a 	or	r6,r9,r6
80213e98:	300ac03a 	cmpne	r5,r6,zero
80213e9c:	0013883a 	mov	r9,zero
80213ea0:	2c4b883a 	add	r5,r5,r17
80213ea4:	2c63803a 	cmpltu	r17,r5,r17
80213ea8:	4a11883a 	add	r8,r9,r8
80213eac:	8a11883a 	add	r8,r17,r8
80213eb0:	2823883a 	mov	r17,r5
80213eb4:	4080202c 	andhi	r2,r8,128
80213eb8:	103fe026 	beq	r2,zero,80213e3c <__reset+0xfa1f3e3c>
80213ebc:	84000044 	addi	r16,r16,1
80213ec0:	0081ffc4 	movi	r2,2047
80213ec4:	8080d226 	beq	r16,r2,80214210 <__adddf3+0x5d8>
80213ec8:	00bfe034 	movhi	r2,65408
80213ecc:	10bfffc4 	addi	r2,r2,-1
80213ed0:	4090703a 	and	r8,r8,r2
80213ed4:	880ad07a 	srli	r5,r17,1
80213ed8:	400897fa 	slli	r4,r8,31
80213edc:	88c0004c 	andi	r3,r17,1
80213ee0:	28e2b03a 	or	r17,r5,r3
80213ee4:	4010d07a 	srli	r8,r8,1
80213ee8:	2462b03a 	or	r17,r4,r17
80213eec:	003f7106 	br	80213cb4 <__reset+0xfa1f3cb4>
80213ef0:	4088b03a 	or	r4,r8,r2
80213ef4:	20014526 	beq	r4,zero,8021440c <__adddf3+0x7d4>
80213ef8:	01000434 	movhi	r4,16
80213efc:	42000234 	orhi	r8,r8,8
80213f00:	213fffc4 	addi	r4,r4,-1
80213f04:	4110703a 	and	r8,r8,r4
80213f08:	003f8206 	br	80213d14 <__reset+0xfa1f3d14>
80213f0c:	18ffffc4 	addi	r3,r3,-1
80213f10:	1800491e 	bne	r3,zero,80214038 <__adddf3+0x400>
80213f14:	898bc83a 	sub	r5,r17,r6
80213f18:	8963803a 	cmpltu	r17,r17,r5
80213f1c:	4251c83a 	sub	r8,r8,r9
80213f20:	4451c83a 	sub	r8,r8,r17
80213f24:	2823883a 	mov	r17,r5
80213f28:	003f9f06 	br	80213da8 <__reset+0xfa1f3da8>
80213f2c:	4984b03a 	or	r2,r9,r6
80213f30:	103f6026 	beq	r2,zero,80213cb4 <__reset+0xfa1f3cb4>
80213f34:	213fffc4 	addi	r4,r4,-1
80213f38:	2000931e 	bne	r4,zero,80214188 <__adddf3+0x550>
80213f3c:	898d883a 	add	r6,r17,r6
80213f40:	3463803a 	cmpltu	r17,r6,r17
80213f44:	4251883a 	add	r8,r8,r9
80213f48:	8a11883a 	add	r8,r17,r8
80213f4c:	3023883a 	mov	r17,r6
80213f50:	003fd806 	br	80213eb4 <__reset+0xfa1f3eb4>
80213f54:	1800541e 	bne	r3,zero,802140a8 <__adddf3+0x470>
80213f58:	80800044 	addi	r2,r16,1
80213f5c:	1081ffcc 	andi	r2,r2,2047
80213f60:	00c00044 	movi	r3,1
80213f64:	1880a00e 	bge	r3,r2,802141e8 <__adddf3+0x5b0>
80213f68:	8989c83a 	sub	r4,r17,r6
80213f6c:	8905803a 	cmpltu	r2,r17,r4
80213f70:	4267c83a 	sub	r19,r8,r9
80213f74:	98a7c83a 	sub	r19,r19,r2
80213f78:	9880202c 	andhi	r2,r19,128
80213f7c:	10006326 	beq	r2,zero,8021410c <__adddf3+0x4d4>
80213f80:	3463c83a 	sub	r17,r6,r17
80213f84:	4a07c83a 	sub	r3,r9,r8
80213f88:	344d803a 	cmpltu	r6,r6,r17
80213f8c:	19a7c83a 	sub	r19,r3,r6
80213f90:	3825883a 	mov	r18,r7
80213f94:	983f8a1e 	bne	r19,zero,80213dc0 <__reset+0xfa1f3dc0>
80213f98:	8809883a 	mov	r4,r17
80213f9c:	02061740 	call	80206174 <__clzsi2>
80213fa0:	10800804 	addi	r2,r2,32
80213fa4:	10fffe04 	addi	r3,r2,-8
80213fa8:	010007c4 	movi	r4,31
80213fac:	20ff890e 	bge	r4,r3,80213dd4 <__reset+0xfa1f3dd4>
80213fb0:	10bff604 	addi	r2,r2,-40
80213fb4:	8884983a 	sll	r2,r17,r2
80213fb8:	0023883a 	mov	r17,zero
80213fbc:	1c3f8c0e 	bge	r3,r16,80213df0 <__reset+0xfa1f3df0>
80213fc0:	023fe034 	movhi	r8,65408
80213fc4:	423fffc4 	addi	r8,r8,-1
80213fc8:	80e1c83a 	sub	r16,r16,r3
80213fcc:	1210703a 	and	r8,r2,r8
80213fd0:	003f3806 	br	80213cb4 <__reset+0xfa1f3cb4>
80213fd4:	9007883a 	mov	r3,r18
80213fd8:	0011883a 	mov	r8,zero
80213fdc:	0005883a 	mov	r2,zero
80213fe0:	003f4c06 	br	80213d14 <__reset+0xfa1f3d14>
80213fe4:	498cb03a 	or	r6,r9,r6
80213fe8:	300cc03a 	cmpne	r6,r6,zero
80213fec:	0007883a 	mov	r3,zero
80213ff0:	003f6806 	br	80213d94 <__reset+0xfa1f3d94>
80213ff4:	20009c1e 	bne	r4,zero,80214268 <__adddf3+0x630>
80213ff8:	80800044 	addi	r2,r16,1
80213ffc:	1141ffcc 	andi	r5,r2,2047
80214000:	01000044 	movi	r4,1
80214004:	2140670e 	bge	r4,r5,802141a4 <__adddf3+0x56c>
80214008:	0101ffc4 	movi	r4,2047
8021400c:	11007f26 	beq	r2,r4,8021420c <__adddf3+0x5d4>
80214010:	898d883a 	add	r6,r17,r6
80214014:	4247883a 	add	r3,r8,r9
80214018:	3451803a 	cmpltu	r8,r6,r17
8021401c:	40d1883a 	add	r8,r8,r3
80214020:	402297fa 	slli	r17,r8,31
80214024:	300cd07a 	srli	r6,r6,1
80214028:	4010d07a 	srli	r8,r8,1
8021402c:	1021883a 	mov	r16,r2
80214030:	89a2b03a 	or	r17,r17,r6
80214034:	003f1f06 	br	80213cb4 <__reset+0xfa1f3cb4>
80214038:	0081ffc4 	movi	r2,2047
8021403c:	80bf481e 	bne	r16,r2,80213d60 <__reset+0xfa1f3d60>
80214040:	003f1c06 	br	80213cb4 <__reset+0xfa1f3cb4>
80214044:	843ff844 	addi	r16,r16,-31
80214048:	01000804 	movi	r4,32
8021404c:	1406d83a 	srl	r3,r2,r16
80214050:	41005026 	beq	r8,r4,80214194 <__adddf3+0x55c>
80214054:	01001004 	movi	r4,64
80214058:	2211c83a 	sub	r8,r4,r8
8021405c:	1204983a 	sll	r2,r2,r8
80214060:	88a2b03a 	or	r17,r17,r2
80214064:	8822c03a 	cmpne	r17,r17,zero
80214068:	1c62b03a 	or	r17,r3,r17
8021406c:	0011883a 	mov	r8,zero
80214070:	0021883a 	mov	r16,zero
80214074:	003f7106 	br	80213e3c <__reset+0xfa1f3e3c>
80214078:	193ff804 	addi	r4,r3,-32
8021407c:	00800804 	movi	r2,32
80214080:	4908d83a 	srl	r4,r9,r4
80214084:	18804526 	beq	r3,r2,8021419c <__adddf3+0x564>
80214088:	00801004 	movi	r2,64
8021408c:	10c5c83a 	sub	r2,r2,r3
80214090:	4886983a 	sll	r3,r9,r2
80214094:	198cb03a 	or	r6,r3,r6
80214098:	300cc03a 	cmpne	r6,r6,zero
8021409c:	218cb03a 	or	r6,r4,r6
802140a0:	0007883a 	mov	r3,zero
802140a4:	003f3b06 	br	80213d94 <__reset+0xfa1f3d94>
802140a8:	80002a26 	beq	r16,zero,80214154 <__adddf3+0x51c>
802140ac:	0101ffc4 	movi	r4,2047
802140b0:	11006826 	beq	r2,r4,80214254 <__adddf3+0x61c>
802140b4:	00c7c83a 	sub	r3,zero,r3
802140b8:	42002034 	orhi	r8,r8,128
802140bc:	01000e04 	movi	r4,56
802140c0:	20c07c16 	blt	r4,r3,802142b4 <__adddf3+0x67c>
802140c4:	010007c4 	movi	r4,31
802140c8:	20c0da16 	blt	r4,r3,80214434 <__adddf3+0x7fc>
802140cc:	01000804 	movi	r4,32
802140d0:	20c9c83a 	sub	r4,r4,r3
802140d4:	4114983a 	sll	r10,r8,r4
802140d8:	88cad83a 	srl	r5,r17,r3
802140dc:	8908983a 	sll	r4,r17,r4
802140e0:	40c6d83a 	srl	r3,r8,r3
802140e4:	5162b03a 	or	r17,r10,r5
802140e8:	2008c03a 	cmpne	r4,r4,zero
802140ec:	8922b03a 	or	r17,r17,r4
802140f0:	3463c83a 	sub	r17,r6,r17
802140f4:	48c7c83a 	sub	r3,r9,r3
802140f8:	344d803a 	cmpltu	r6,r6,r17
802140fc:	1991c83a 	sub	r8,r3,r6
80214100:	1021883a 	mov	r16,r2
80214104:	3825883a 	mov	r18,r7
80214108:	003f2706 	br	80213da8 <__reset+0xfa1f3da8>
8021410c:	24d0b03a 	or	r8,r4,r19
80214110:	40001b1e 	bne	r8,zero,80214180 <__adddf3+0x548>
80214114:	0005883a 	mov	r2,zero
80214118:	0007883a 	mov	r3,zero
8021411c:	0021883a 	mov	r16,zero
80214120:	003f4d06 	br	80213e58 <__reset+0xfa1f3e58>
80214124:	008007c4 	movi	r2,31
80214128:	11003c16 	blt	r2,r4,8021421c <__adddf3+0x5e4>
8021412c:	00800804 	movi	r2,32
80214130:	1105c83a 	sub	r2,r2,r4
80214134:	488e983a 	sll	r7,r9,r2
80214138:	310ad83a 	srl	r5,r6,r4
8021413c:	3084983a 	sll	r2,r6,r2
80214140:	4912d83a 	srl	r9,r9,r4
80214144:	394ab03a 	or	r5,r7,r5
80214148:	1004c03a 	cmpne	r2,r2,zero
8021414c:	288ab03a 	or	r5,r5,r2
80214150:	003f5306 	br	80213ea0 <__reset+0xfa1f3ea0>
80214154:	4448b03a 	or	r4,r8,r17
80214158:	20003e26 	beq	r4,zero,80214254 <__adddf3+0x61c>
8021415c:	00c6303a 	nor	r3,zero,r3
80214160:	18003a1e 	bne	r3,zero,8021424c <__adddf3+0x614>
80214164:	3463c83a 	sub	r17,r6,r17
80214168:	4a07c83a 	sub	r3,r9,r8
8021416c:	344d803a 	cmpltu	r6,r6,r17
80214170:	1991c83a 	sub	r8,r3,r6
80214174:	1021883a 	mov	r16,r2
80214178:	3825883a 	mov	r18,r7
8021417c:	003f0a06 	br	80213da8 <__reset+0xfa1f3da8>
80214180:	2023883a 	mov	r17,r4
80214184:	003f0d06 	br	80213dbc <__reset+0xfa1f3dbc>
80214188:	0081ffc4 	movi	r2,2047
8021418c:	80bf3f1e 	bne	r16,r2,80213e8c <__reset+0xfa1f3e8c>
80214190:	003ec806 	br	80213cb4 <__reset+0xfa1f3cb4>
80214194:	0005883a 	mov	r2,zero
80214198:	003fb106 	br	80214060 <__reset+0xfa1f4060>
8021419c:	0007883a 	mov	r3,zero
802141a0:	003fbc06 	br	80214094 <__reset+0xfa1f4094>
802141a4:	4444b03a 	or	r2,r8,r17
802141a8:	8000871e 	bne	r16,zero,802143c8 <__adddf3+0x790>
802141ac:	1000ba26 	beq	r2,zero,80214498 <__adddf3+0x860>
802141b0:	4984b03a 	or	r2,r9,r6
802141b4:	103ebf26 	beq	r2,zero,80213cb4 <__reset+0xfa1f3cb4>
802141b8:	8985883a 	add	r2,r17,r6
802141bc:	4247883a 	add	r3,r8,r9
802141c0:	1451803a 	cmpltu	r8,r2,r17
802141c4:	40d1883a 	add	r8,r8,r3
802141c8:	40c0202c 	andhi	r3,r8,128
802141cc:	1023883a 	mov	r17,r2
802141d0:	183f1a26 	beq	r3,zero,80213e3c <__reset+0xfa1f3e3c>
802141d4:	00bfe034 	movhi	r2,65408
802141d8:	10bfffc4 	addi	r2,r2,-1
802141dc:	2021883a 	mov	r16,r4
802141e0:	4090703a 	and	r8,r8,r2
802141e4:	003eb306 	br	80213cb4 <__reset+0xfa1f3cb4>
802141e8:	4444b03a 	or	r2,r8,r17
802141ec:	8000291e 	bne	r16,zero,80214294 <__adddf3+0x65c>
802141f0:	10004b1e 	bne	r2,zero,80214320 <__adddf3+0x6e8>
802141f4:	4990b03a 	or	r8,r9,r6
802141f8:	40008b26 	beq	r8,zero,80214428 <__adddf3+0x7f0>
802141fc:	4811883a 	mov	r8,r9
80214200:	3023883a 	mov	r17,r6
80214204:	3825883a 	mov	r18,r7
80214208:	003eaa06 	br	80213cb4 <__reset+0xfa1f3cb4>
8021420c:	1021883a 	mov	r16,r2
80214210:	0011883a 	mov	r8,zero
80214214:	0005883a 	mov	r2,zero
80214218:	003f0f06 	br	80213e58 <__reset+0xfa1f3e58>
8021421c:	217ff804 	addi	r5,r4,-32
80214220:	00800804 	movi	r2,32
80214224:	494ad83a 	srl	r5,r9,r5
80214228:	20807d26 	beq	r4,r2,80214420 <__adddf3+0x7e8>
8021422c:	00801004 	movi	r2,64
80214230:	1109c83a 	sub	r4,r2,r4
80214234:	4912983a 	sll	r9,r9,r4
80214238:	498cb03a 	or	r6,r9,r6
8021423c:	300cc03a 	cmpne	r6,r6,zero
80214240:	298ab03a 	or	r5,r5,r6
80214244:	0013883a 	mov	r9,zero
80214248:	003f1506 	br	80213ea0 <__reset+0xfa1f3ea0>
8021424c:	0101ffc4 	movi	r4,2047
80214250:	113f9a1e 	bne	r2,r4,802140bc <__reset+0xfa1f40bc>
80214254:	4811883a 	mov	r8,r9
80214258:	3023883a 	mov	r17,r6
8021425c:	1021883a 	mov	r16,r2
80214260:	3825883a 	mov	r18,r7
80214264:	003e9306 	br	80213cb4 <__reset+0xfa1f3cb4>
80214268:	8000161e 	bne	r16,zero,802142c4 <__adddf3+0x68c>
8021426c:	444ab03a 	or	r5,r8,r17
80214270:	28005126 	beq	r5,zero,802143b8 <__adddf3+0x780>
80214274:	0108303a 	nor	r4,zero,r4
80214278:	20004d1e 	bne	r4,zero,802143b0 <__adddf3+0x778>
8021427c:	89a3883a 	add	r17,r17,r6
80214280:	4253883a 	add	r9,r8,r9
80214284:	898d803a 	cmpltu	r6,r17,r6
80214288:	3251883a 	add	r8,r6,r9
8021428c:	1021883a 	mov	r16,r2
80214290:	003f0806 	br	80213eb4 <__reset+0xfa1f3eb4>
80214294:	1000301e 	bne	r2,zero,80214358 <__adddf3+0x720>
80214298:	4984b03a 	or	r2,r9,r6
8021429c:	10007126 	beq	r2,zero,80214464 <__adddf3+0x82c>
802142a0:	4811883a 	mov	r8,r9
802142a4:	3023883a 	mov	r17,r6
802142a8:	3825883a 	mov	r18,r7
802142ac:	0401ffc4 	movi	r16,2047
802142b0:	003e8006 	br	80213cb4 <__reset+0xfa1f3cb4>
802142b4:	4462b03a 	or	r17,r8,r17
802142b8:	8822c03a 	cmpne	r17,r17,zero
802142bc:	0007883a 	mov	r3,zero
802142c0:	003f8b06 	br	802140f0 <__reset+0xfa1f40f0>
802142c4:	0141ffc4 	movi	r5,2047
802142c8:	11403b26 	beq	r2,r5,802143b8 <__adddf3+0x780>
802142cc:	0109c83a 	sub	r4,zero,r4
802142d0:	42002034 	orhi	r8,r8,128
802142d4:	01400e04 	movi	r5,56
802142d8:	29006716 	blt	r5,r4,80214478 <__adddf3+0x840>
802142dc:	014007c4 	movi	r5,31
802142e0:	29007016 	blt	r5,r4,802144a4 <__adddf3+0x86c>
802142e4:	01400804 	movi	r5,32
802142e8:	290bc83a 	sub	r5,r5,r4
802142ec:	4154983a 	sll	r10,r8,r5
802142f0:	890ed83a 	srl	r7,r17,r4
802142f4:	894a983a 	sll	r5,r17,r5
802142f8:	4108d83a 	srl	r4,r8,r4
802142fc:	51e2b03a 	or	r17,r10,r7
80214300:	280ac03a 	cmpne	r5,r5,zero
80214304:	8962b03a 	or	r17,r17,r5
80214308:	89a3883a 	add	r17,r17,r6
8021430c:	2253883a 	add	r9,r4,r9
80214310:	898d803a 	cmpltu	r6,r17,r6
80214314:	3251883a 	add	r8,r6,r9
80214318:	1021883a 	mov	r16,r2
8021431c:	003ee506 	br	80213eb4 <__reset+0xfa1f3eb4>
80214320:	4984b03a 	or	r2,r9,r6
80214324:	103e6326 	beq	r2,zero,80213cb4 <__reset+0xfa1f3cb4>
80214328:	8987c83a 	sub	r3,r17,r6
8021432c:	88c9803a 	cmpltu	r4,r17,r3
80214330:	4245c83a 	sub	r2,r8,r9
80214334:	1105c83a 	sub	r2,r2,r4
80214338:	1100202c 	andhi	r4,r2,128
8021433c:	203ebb26 	beq	r4,zero,80213e2c <__reset+0xfa1f3e2c>
80214340:	3463c83a 	sub	r17,r6,r17
80214344:	4a07c83a 	sub	r3,r9,r8
80214348:	344d803a 	cmpltu	r6,r6,r17
8021434c:	1991c83a 	sub	r8,r3,r6
80214350:	3825883a 	mov	r18,r7
80214354:	003e5706 	br	80213cb4 <__reset+0xfa1f3cb4>
80214358:	4984b03a 	or	r2,r9,r6
8021435c:	10002e26 	beq	r2,zero,80214418 <__adddf3+0x7e0>
80214360:	4004d0fa 	srli	r2,r8,3
80214364:	8822d0fa 	srli	r17,r17,3
80214368:	4010977a 	slli	r8,r8,29
8021436c:	10c0022c 	andhi	r3,r2,8
80214370:	4462b03a 	or	r17,r8,r17
80214374:	18000826 	beq	r3,zero,80214398 <__adddf3+0x760>
80214378:	4808d0fa 	srli	r4,r9,3
8021437c:	20c0022c 	andhi	r3,r4,8
80214380:	1800051e 	bne	r3,zero,80214398 <__adddf3+0x760>
80214384:	300cd0fa 	srli	r6,r6,3
80214388:	4806977a 	slli	r3,r9,29
8021438c:	2005883a 	mov	r2,r4
80214390:	3825883a 	mov	r18,r7
80214394:	19a2b03a 	or	r17,r3,r6
80214398:	8810d77a 	srli	r8,r17,29
8021439c:	100490fa 	slli	r2,r2,3
802143a0:	882290fa 	slli	r17,r17,3
802143a4:	0401ffc4 	movi	r16,2047
802143a8:	4090b03a 	or	r8,r8,r2
802143ac:	003e4106 	br	80213cb4 <__reset+0xfa1f3cb4>
802143b0:	0141ffc4 	movi	r5,2047
802143b4:	117fc71e 	bne	r2,r5,802142d4 <__reset+0xfa1f42d4>
802143b8:	4811883a 	mov	r8,r9
802143bc:	3023883a 	mov	r17,r6
802143c0:	1021883a 	mov	r16,r2
802143c4:	003e3b06 	br	80213cb4 <__reset+0xfa1f3cb4>
802143c8:	10002f26 	beq	r2,zero,80214488 <__adddf3+0x850>
802143cc:	4984b03a 	or	r2,r9,r6
802143d0:	10001126 	beq	r2,zero,80214418 <__adddf3+0x7e0>
802143d4:	4004d0fa 	srli	r2,r8,3
802143d8:	8822d0fa 	srli	r17,r17,3
802143dc:	4010977a 	slli	r8,r8,29
802143e0:	10c0022c 	andhi	r3,r2,8
802143e4:	4462b03a 	or	r17,r8,r17
802143e8:	183feb26 	beq	r3,zero,80214398 <__reset+0xfa1f4398>
802143ec:	4808d0fa 	srli	r4,r9,3
802143f0:	20c0022c 	andhi	r3,r4,8
802143f4:	183fe81e 	bne	r3,zero,80214398 <__reset+0xfa1f4398>
802143f8:	300cd0fa 	srli	r6,r6,3
802143fc:	4806977a 	slli	r3,r9,29
80214400:	2005883a 	mov	r2,r4
80214404:	19a2b03a 	or	r17,r3,r6
80214408:	003fe306 	br	80214398 <__reset+0xfa1f4398>
8021440c:	0011883a 	mov	r8,zero
80214410:	0005883a 	mov	r2,zero
80214414:	003e3f06 	br	80213d14 <__reset+0xfa1f3d14>
80214418:	0401ffc4 	movi	r16,2047
8021441c:	003e2506 	br	80213cb4 <__reset+0xfa1f3cb4>
80214420:	0013883a 	mov	r9,zero
80214424:	003f8406 	br	80214238 <__reset+0xfa1f4238>
80214428:	0005883a 	mov	r2,zero
8021442c:	0007883a 	mov	r3,zero
80214430:	003e8906 	br	80213e58 <__reset+0xfa1f3e58>
80214434:	197ff804 	addi	r5,r3,-32
80214438:	01000804 	movi	r4,32
8021443c:	414ad83a 	srl	r5,r8,r5
80214440:	19002426 	beq	r3,r4,802144d4 <__adddf3+0x89c>
80214444:	01001004 	movi	r4,64
80214448:	20c7c83a 	sub	r3,r4,r3
8021444c:	40c6983a 	sll	r3,r8,r3
80214450:	1c46b03a 	or	r3,r3,r17
80214454:	1806c03a 	cmpne	r3,r3,zero
80214458:	28e2b03a 	or	r17,r5,r3
8021445c:	0007883a 	mov	r3,zero
80214460:	003f2306 	br	802140f0 <__reset+0xfa1f40f0>
80214464:	0007883a 	mov	r3,zero
80214468:	5811883a 	mov	r8,r11
8021446c:	00bfffc4 	movi	r2,-1
80214470:	0401ffc4 	movi	r16,2047
80214474:	003e7806 	br	80213e58 <__reset+0xfa1f3e58>
80214478:	4462b03a 	or	r17,r8,r17
8021447c:	8822c03a 	cmpne	r17,r17,zero
80214480:	0009883a 	mov	r4,zero
80214484:	003fa006 	br	80214308 <__reset+0xfa1f4308>
80214488:	4811883a 	mov	r8,r9
8021448c:	3023883a 	mov	r17,r6
80214490:	0401ffc4 	movi	r16,2047
80214494:	003e0706 	br	80213cb4 <__reset+0xfa1f3cb4>
80214498:	4811883a 	mov	r8,r9
8021449c:	3023883a 	mov	r17,r6
802144a0:	003e0406 	br	80213cb4 <__reset+0xfa1f3cb4>
802144a4:	21fff804 	addi	r7,r4,-32
802144a8:	01400804 	movi	r5,32
802144ac:	41ced83a 	srl	r7,r8,r7
802144b0:	21400a26 	beq	r4,r5,802144dc <__adddf3+0x8a4>
802144b4:	01401004 	movi	r5,64
802144b8:	2909c83a 	sub	r4,r5,r4
802144bc:	4108983a 	sll	r4,r8,r4
802144c0:	2448b03a 	or	r4,r4,r17
802144c4:	2008c03a 	cmpne	r4,r4,zero
802144c8:	3922b03a 	or	r17,r7,r4
802144cc:	0009883a 	mov	r4,zero
802144d0:	003f8d06 	br	80214308 <__reset+0xfa1f4308>
802144d4:	0007883a 	mov	r3,zero
802144d8:	003fdd06 	br	80214450 <__reset+0xfa1f4450>
802144dc:	0009883a 	mov	r4,zero
802144e0:	003ff706 	br	802144c0 <__reset+0xfa1f44c0>

802144e4 <__divdf3>:
802144e4:	defff204 	addi	sp,sp,-56
802144e8:	dd400915 	stw	r21,36(sp)
802144ec:	282ad53a 	srli	r21,r5,20
802144f0:	dd000815 	stw	r20,32(sp)
802144f4:	2828d7fa 	srli	r20,r5,31
802144f8:	dc000415 	stw	r16,16(sp)
802144fc:	04000434 	movhi	r16,16
80214500:	df000c15 	stw	fp,48(sp)
80214504:	843fffc4 	addi	r16,r16,-1
80214508:	dfc00d15 	stw	ra,52(sp)
8021450c:	ddc00b15 	stw	r23,44(sp)
80214510:	dd800a15 	stw	r22,40(sp)
80214514:	dcc00715 	stw	r19,28(sp)
80214518:	dc800615 	stw	r18,24(sp)
8021451c:	dc400515 	stw	r17,20(sp)
80214520:	ad41ffcc 	andi	r21,r21,2047
80214524:	2c20703a 	and	r16,r5,r16
80214528:	a7003fcc 	andi	fp,r20,255
8021452c:	a8006126 	beq	r21,zero,802146b4 <__divdf3+0x1d0>
80214530:	0081ffc4 	movi	r2,2047
80214534:	2025883a 	mov	r18,r4
80214538:	a8803726 	beq	r21,r2,80214618 <__divdf3+0x134>
8021453c:	80800434 	orhi	r2,r16,16
80214540:	100490fa 	slli	r2,r2,3
80214544:	2020d77a 	srli	r16,r4,29
80214548:	202490fa 	slli	r18,r4,3
8021454c:	ad7f0044 	addi	r21,r21,-1023
80214550:	80a0b03a 	or	r16,r16,r2
80214554:	0027883a 	mov	r19,zero
80214558:	0013883a 	mov	r9,zero
8021455c:	3804d53a 	srli	r2,r7,20
80214560:	382cd7fa 	srli	r22,r7,31
80214564:	04400434 	movhi	r17,16
80214568:	8c7fffc4 	addi	r17,r17,-1
8021456c:	1081ffcc 	andi	r2,r2,2047
80214570:	3011883a 	mov	r8,r6
80214574:	3c62703a 	and	r17,r7,r17
80214578:	b5c03fcc 	andi	r23,r22,255
8021457c:	10006c26 	beq	r2,zero,80214730 <__divdf3+0x24c>
80214580:	00c1ffc4 	movi	r3,2047
80214584:	10c06426 	beq	r2,r3,80214718 <__divdf3+0x234>
80214588:	88c00434 	orhi	r3,r17,16
8021458c:	180690fa 	slli	r3,r3,3
80214590:	3022d77a 	srli	r17,r6,29
80214594:	301090fa 	slli	r8,r6,3
80214598:	10bf0044 	addi	r2,r2,-1023
8021459c:	88e2b03a 	or	r17,r17,r3
802145a0:	000f883a 	mov	r7,zero
802145a4:	a58cf03a 	xor	r6,r20,r22
802145a8:	3cc8b03a 	or	r4,r7,r19
802145ac:	a8abc83a 	sub	r21,r21,r2
802145b0:	008003c4 	movi	r2,15
802145b4:	3007883a 	mov	r3,r6
802145b8:	34c03fcc 	andi	r19,r6,255
802145bc:	11009036 	bltu	r2,r4,80214800 <__divdf3+0x31c>
802145c0:	200890ba 	slli	r4,r4,2
802145c4:	00a00874 	movhi	r2,32801
802145c8:	10917604 	addi	r2,r2,17880
802145cc:	2089883a 	add	r4,r4,r2
802145d0:	20800017 	ldw	r2,0(r4)
802145d4:	1000683a 	jmp	r2
802145d8:	80214800 	call	88021480 <__reset+0x2001480>
802145dc:	80214650 	cmplti	zero,r16,-31463
802145e0:	802147f0 	cmpltui	zero,r16,34079
802145e4:	80214644 	addi	zero,r16,-31463
802145e8:	802147f0 	cmpltui	zero,r16,34079
802145ec:	802147c4 	addi	zero,r16,-31457
802145f0:	802147f0 	cmpltui	zero,r16,34079
802145f4:	80214644 	addi	zero,r16,-31463
802145f8:	80214650 	cmplti	zero,r16,-31463
802145fc:	80214650 	cmplti	zero,r16,-31463
80214600:	802147c4 	addi	zero,r16,-31457
80214604:	80214644 	addi	zero,r16,-31463
80214608:	80214634 	orhi	zero,r16,34072
8021460c:	80214634 	orhi	zero,r16,34072
80214610:	80214634 	orhi	zero,r16,34072
80214614:	80214ae4 	muli	zero,r16,-31445
80214618:	2404b03a 	or	r2,r4,r16
8021461c:	1000661e 	bne	r2,zero,802147b8 <__divdf3+0x2d4>
80214620:	04c00204 	movi	r19,8
80214624:	0021883a 	mov	r16,zero
80214628:	0025883a 	mov	r18,zero
8021462c:	02400084 	movi	r9,2
80214630:	003fca06 	br	8021455c <__reset+0xfa1f455c>
80214634:	8023883a 	mov	r17,r16
80214638:	9011883a 	mov	r8,r18
8021463c:	e02f883a 	mov	r23,fp
80214640:	480f883a 	mov	r7,r9
80214644:	00800084 	movi	r2,2
80214648:	3881311e 	bne	r7,r2,80214b10 <__divdf3+0x62c>
8021464c:	b827883a 	mov	r19,r23
80214650:	98c0004c 	andi	r3,r19,1
80214654:	0081ffc4 	movi	r2,2047
80214658:	000b883a 	mov	r5,zero
8021465c:	0025883a 	mov	r18,zero
80214660:	1004953a 	slli	r2,r2,20
80214664:	18c03fcc 	andi	r3,r3,255
80214668:	04400434 	movhi	r17,16
8021466c:	8c7fffc4 	addi	r17,r17,-1
80214670:	180697fa 	slli	r3,r3,31
80214674:	2c4a703a 	and	r5,r5,r17
80214678:	288ab03a 	or	r5,r5,r2
8021467c:	28c6b03a 	or	r3,r5,r3
80214680:	9005883a 	mov	r2,r18
80214684:	dfc00d17 	ldw	ra,52(sp)
80214688:	df000c17 	ldw	fp,48(sp)
8021468c:	ddc00b17 	ldw	r23,44(sp)
80214690:	dd800a17 	ldw	r22,40(sp)
80214694:	dd400917 	ldw	r21,36(sp)
80214698:	dd000817 	ldw	r20,32(sp)
8021469c:	dcc00717 	ldw	r19,28(sp)
802146a0:	dc800617 	ldw	r18,24(sp)
802146a4:	dc400517 	ldw	r17,20(sp)
802146a8:	dc000417 	ldw	r16,16(sp)
802146ac:	dec00e04 	addi	sp,sp,56
802146b0:	f800283a 	ret
802146b4:	2404b03a 	or	r2,r4,r16
802146b8:	2027883a 	mov	r19,r4
802146bc:	10003926 	beq	r2,zero,802147a4 <__divdf3+0x2c0>
802146c0:	80012e26 	beq	r16,zero,80214b7c <__divdf3+0x698>
802146c4:	8009883a 	mov	r4,r16
802146c8:	d9800315 	stw	r6,12(sp)
802146cc:	d9c00215 	stw	r7,8(sp)
802146d0:	02061740 	call	80206174 <__clzsi2>
802146d4:	d9800317 	ldw	r6,12(sp)
802146d8:	d9c00217 	ldw	r7,8(sp)
802146dc:	113ffd44 	addi	r4,r2,-11
802146e0:	00c00704 	movi	r3,28
802146e4:	19012116 	blt	r3,r4,80214b6c <__divdf3+0x688>
802146e8:	00c00744 	movi	r3,29
802146ec:	147ffe04 	addi	r17,r2,-8
802146f0:	1907c83a 	sub	r3,r3,r4
802146f4:	8460983a 	sll	r16,r16,r17
802146f8:	98c6d83a 	srl	r3,r19,r3
802146fc:	9c64983a 	sll	r18,r19,r17
80214700:	1c20b03a 	or	r16,r3,r16
80214704:	1080fcc4 	addi	r2,r2,1011
80214708:	00abc83a 	sub	r21,zero,r2
8021470c:	0027883a 	mov	r19,zero
80214710:	0013883a 	mov	r9,zero
80214714:	003f9106 	br	8021455c <__reset+0xfa1f455c>
80214718:	3446b03a 	or	r3,r6,r17
8021471c:	18001f1e 	bne	r3,zero,8021479c <__divdf3+0x2b8>
80214720:	0023883a 	mov	r17,zero
80214724:	0011883a 	mov	r8,zero
80214728:	01c00084 	movi	r7,2
8021472c:	003f9d06 	br	802145a4 <__reset+0xfa1f45a4>
80214730:	3446b03a 	or	r3,r6,r17
80214734:	18001526 	beq	r3,zero,8021478c <__divdf3+0x2a8>
80214738:	88011b26 	beq	r17,zero,80214ba8 <__divdf3+0x6c4>
8021473c:	8809883a 	mov	r4,r17
80214740:	d9800315 	stw	r6,12(sp)
80214744:	da400115 	stw	r9,4(sp)
80214748:	02061740 	call	80206174 <__clzsi2>
8021474c:	d9800317 	ldw	r6,12(sp)
80214750:	da400117 	ldw	r9,4(sp)
80214754:	113ffd44 	addi	r4,r2,-11
80214758:	00c00704 	movi	r3,28
8021475c:	19010e16 	blt	r3,r4,80214b98 <__divdf3+0x6b4>
80214760:	00c00744 	movi	r3,29
80214764:	123ffe04 	addi	r8,r2,-8
80214768:	1907c83a 	sub	r3,r3,r4
8021476c:	8a22983a 	sll	r17,r17,r8
80214770:	30c6d83a 	srl	r3,r6,r3
80214774:	3210983a 	sll	r8,r6,r8
80214778:	1c62b03a 	or	r17,r3,r17
8021477c:	1080fcc4 	addi	r2,r2,1011
80214780:	0085c83a 	sub	r2,zero,r2
80214784:	000f883a 	mov	r7,zero
80214788:	003f8606 	br	802145a4 <__reset+0xfa1f45a4>
8021478c:	0023883a 	mov	r17,zero
80214790:	0011883a 	mov	r8,zero
80214794:	01c00044 	movi	r7,1
80214798:	003f8206 	br	802145a4 <__reset+0xfa1f45a4>
8021479c:	01c000c4 	movi	r7,3
802147a0:	003f8006 	br	802145a4 <__reset+0xfa1f45a4>
802147a4:	04c00104 	movi	r19,4
802147a8:	0021883a 	mov	r16,zero
802147ac:	0025883a 	mov	r18,zero
802147b0:	02400044 	movi	r9,1
802147b4:	003f6906 	br	8021455c <__reset+0xfa1f455c>
802147b8:	04c00304 	movi	r19,12
802147bc:	024000c4 	movi	r9,3
802147c0:	003f6606 	br	8021455c <__reset+0xfa1f455c>
802147c4:	01400434 	movhi	r5,16
802147c8:	0007883a 	mov	r3,zero
802147cc:	297fffc4 	addi	r5,r5,-1
802147d0:	04bfffc4 	movi	r18,-1
802147d4:	0081ffc4 	movi	r2,2047
802147d8:	003fa106 	br	80214660 <__reset+0xfa1f4660>
802147dc:	00c00044 	movi	r3,1
802147e0:	1887c83a 	sub	r3,r3,r2
802147e4:	01000e04 	movi	r4,56
802147e8:	20c1210e 	bge	r4,r3,80214c70 <__divdf3+0x78c>
802147ec:	98c0004c 	andi	r3,r19,1
802147f0:	0005883a 	mov	r2,zero
802147f4:	000b883a 	mov	r5,zero
802147f8:	0025883a 	mov	r18,zero
802147fc:	003f9806 	br	80214660 <__reset+0xfa1f4660>
80214800:	8c00fd36 	bltu	r17,r16,80214bf8 <__divdf3+0x714>
80214804:	8440fb26 	beq	r16,r17,80214bf4 <__divdf3+0x710>
80214808:	8007883a 	mov	r3,r16
8021480c:	ad7fffc4 	addi	r21,r21,-1
80214810:	0021883a 	mov	r16,zero
80214814:	4004d63a 	srli	r2,r8,24
80214818:	8822923a 	slli	r17,r17,8
8021481c:	1809883a 	mov	r4,r3
80214820:	402c923a 	slli	r22,r8,8
80214824:	88b8b03a 	or	fp,r17,r2
80214828:	e028d43a 	srli	r20,fp,16
8021482c:	d8c00015 	stw	r3,0(sp)
80214830:	e5ffffcc 	andi	r23,fp,65535
80214834:	a00b883a 	mov	r5,r20
80214838:	0213b7c0 	call	80213b7c <__udivsi3>
8021483c:	d8c00017 	ldw	r3,0(sp)
80214840:	a00b883a 	mov	r5,r20
80214844:	d8800315 	stw	r2,12(sp)
80214848:	1809883a 	mov	r4,r3
8021484c:	0213be00 	call	80213be0 <__umodsi3>
80214850:	d9800317 	ldw	r6,12(sp)
80214854:	1006943a 	slli	r3,r2,16
80214858:	9004d43a 	srli	r2,r18,16
8021485c:	b9a3383a 	mul	r17,r23,r6
80214860:	10c4b03a 	or	r2,r2,r3
80214864:	1440062e 	bgeu	r2,r17,80214880 <__divdf3+0x39c>
80214868:	1705883a 	add	r2,r2,fp
8021486c:	30ffffc4 	addi	r3,r6,-1
80214870:	1700ee36 	bltu	r2,fp,80214c2c <__divdf3+0x748>
80214874:	1440ed2e 	bgeu	r2,r17,80214c2c <__divdf3+0x748>
80214878:	31bfff84 	addi	r6,r6,-2
8021487c:	1705883a 	add	r2,r2,fp
80214880:	1463c83a 	sub	r17,r2,r17
80214884:	a00b883a 	mov	r5,r20
80214888:	8809883a 	mov	r4,r17
8021488c:	d9800315 	stw	r6,12(sp)
80214890:	0213b7c0 	call	80213b7c <__udivsi3>
80214894:	a00b883a 	mov	r5,r20
80214898:	8809883a 	mov	r4,r17
8021489c:	d8800215 	stw	r2,8(sp)
802148a0:	0213be00 	call	80213be0 <__umodsi3>
802148a4:	d9c00217 	ldw	r7,8(sp)
802148a8:	1004943a 	slli	r2,r2,16
802148ac:	94bfffcc 	andi	r18,r18,65535
802148b0:	b9d1383a 	mul	r8,r23,r7
802148b4:	90a4b03a 	or	r18,r18,r2
802148b8:	d9800317 	ldw	r6,12(sp)
802148bc:	9200062e 	bgeu	r18,r8,802148d8 <__divdf3+0x3f4>
802148c0:	9725883a 	add	r18,r18,fp
802148c4:	38bfffc4 	addi	r2,r7,-1
802148c8:	9700d636 	bltu	r18,fp,80214c24 <__divdf3+0x740>
802148cc:	9200d52e 	bgeu	r18,r8,80214c24 <__divdf3+0x740>
802148d0:	39ffff84 	addi	r7,r7,-2
802148d4:	9725883a 	add	r18,r18,fp
802148d8:	3004943a 	slli	r2,r6,16
802148dc:	b012d43a 	srli	r9,r22,16
802148e0:	b1bfffcc 	andi	r6,r22,65535
802148e4:	11e2b03a 	or	r17,r2,r7
802148e8:	8806d43a 	srli	r3,r17,16
802148ec:	893fffcc 	andi	r4,r17,65535
802148f0:	218b383a 	mul	r5,r4,r6
802148f4:	30c5383a 	mul	r2,r6,r3
802148f8:	2249383a 	mul	r4,r4,r9
802148fc:	280ed43a 	srli	r7,r5,16
80214900:	9225c83a 	sub	r18,r18,r8
80214904:	2089883a 	add	r4,r4,r2
80214908:	3909883a 	add	r4,r7,r4
8021490c:	1a47383a 	mul	r3,r3,r9
80214910:	2080022e 	bgeu	r4,r2,8021491c <__divdf3+0x438>
80214914:	00800074 	movhi	r2,1
80214918:	1887883a 	add	r3,r3,r2
8021491c:	2004d43a 	srli	r2,r4,16
80214920:	2008943a 	slli	r4,r4,16
80214924:	297fffcc 	andi	r5,r5,65535
80214928:	10c7883a 	add	r3,r2,r3
8021492c:	2149883a 	add	r4,r4,r5
80214930:	90c0a536 	bltu	r18,r3,80214bc8 <__divdf3+0x6e4>
80214934:	90c0bf26 	beq	r18,r3,80214c34 <__divdf3+0x750>
80214938:	90c7c83a 	sub	r3,r18,r3
8021493c:	810fc83a 	sub	r7,r16,r4
80214940:	81e5803a 	cmpltu	r18,r16,r7
80214944:	1ca5c83a 	sub	r18,r3,r18
80214948:	e480c126 	beq	fp,r18,80214c50 <__divdf3+0x76c>
8021494c:	a00b883a 	mov	r5,r20
80214950:	9009883a 	mov	r4,r18
80214954:	d9800315 	stw	r6,12(sp)
80214958:	d9c00215 	stw	r7,8(sp)
8021495c:	da400115 	stw	r9,4(sp)
80214960:	0213b7c0 	call	80213b7c <__udivsi3>
80214964:	a00b883a 	mov	r5,r20
80214968:	9009883a 	mov	r4,r18
8021496c:	d8800015 	stw	r2,0(sp)
80214970:	0213be00 	call	80213be0 <__umodsi3>
80214974:	d9c00217 	ldw	r7,8(sp)
80214978:	da000017 	ldw	r8,0(sp)
8021497c:	1006943a 	slli	r3,r2,16
80214980:	3804d43a 	srli	r2,r7,16
80214984:	ba21383a 	mul	r16,r23,r8
80214988:	d9800317 	ldw	r6,12(sp)
8021498c:	10c4b03a 	or	r2,r2,r3
80214990:	da400117 	ldw	r9,4(sp)
80214994:	1400062e 	bgeu	r2,r16,802149b0 <__divdf3+0x4cc>
80214998:	1705883a 	add	r2,r2,fp
8021499c:	40ffffc4 	addi	r3,r8,-1
802149a0:	1700ad36 	bltu	r2,fp,80214c58 <__divdf3+0x774>
802149a4:	1400ac2e 	bgeu	r2,r16,80214c58 <__divdf3+0x774>
802149a8:	423fff84 	addi	r8,r8,-2
802149ac:	1705883a 	add	r2,r2,fp
802149b0:	1421c83a 	sub	r16,r2,r16
802149b4:	a00b883a 	mov	r5,r20
802149b8:	8009883a 	mov	r4,r16
802149bc:	d9800315 	stw	r6,12(sp)
802149c0:	d9c00215 	stw	r7,8(sp)
802149c4:	da000015 	stw	r8,0(sp)
802149c8:	da400115 	stw	r9,4(sp)
802149cc:	0213b7c0 	call	80213b7c <__udivsi3>
802149d0:	8009883a 	mov	r4,r16
802149d4:	a00b883a 	mov	r5,r20
802149d8:	1025883a 	mov	r18,r2
802149dc:	0213be00 	call	80213be0 <__umodsi3>
802149e0:	d9c00217 	ldw	r7,8(sp)
802149e4:	1004943a 	slli	r2,r2,16
802149e8:	bcaf383a 	mul	r23,r23,r18
802149ec:	393fffcc 	andi	r4,r7,65535
802149f0:	2088b03a 	or	r4,r4,r2
802149f4:	d9800317 	ldw	r6,12(sp)
802149f8:	da000017 	ldw	r8,0(sp)
802149fc:	da400117 	ldw	r9,4(sp)
80214a00:	25c0062e 	bgeu	r4,r23,80214a1c <__divdf3+0x538>
80214a04:	2709883a 	add	r4,r4,fp
80214a08:	90bfffc4 	addi	r2,r18,-1
80214a0c:	27009436 	bltu	r4,fp,80214c60 <__divdf3+0x77c>
80214a10:	25c0932e 	bgeu	r4,r23,80214c60 <__divdf3+0x77c>
80214a14:	94bfff84 	addi	r18,r18,-2
80214a18:	2709883a 	add	r4,r4,fp
80214a1c:	4004943a 	slli	r2,r8,16
80214a20:	25efc83a 	sub	r23,r4,r23
80214a24:	1490b03a 	or	r8,r2,r18
80214a28:	4008d43a 	srli	r4,r8,16
80214a2c:	40ffffcc 	andi	r3,r8,65535
80214a30:	30c5383a 	mul	r2,r6,r3
80214a34:	1a47383a 	mul	r3,r3,r9
80214a38:	310d383a 	mul	r6,r6,r4
80214a3c:	100ad43a 	srli	r5,r2,16
80214a40:	4913383a 	mul	r9,r9,r4
80214a44:	1987883a 	add	r3,r3,r6
80214a48:	28c7883a 	add	r3,r5,r3
80214a4c:	1980022e 	bgeu	r3,r6,80214a58 <__divdf3+0x574>
80214a50:	01000074 	movhi	r4,1
80214a54:	4913883a 	add	r9,r9,r4
80214a58:	1808d43a 	srli	r4,r3,16
80214a5c:	1806943a 	slli	r3,r3,16
80214a60:	10bfffcc 	andi	r2,r2,65535
80214a64:	2253883a 	add	r9,r4,r9
80214a68:	1887883a 	add	r3,r3,r2
80214a6c:	ba403836 	bltu	r23,r9,80214b50 <__divdf3+0x66c>
80214a70:	ba403626 	beq	r23,r9,80214b4c <__divdf3+0x668>
80214a74:	42000054 	ori	r8,r8,1
80214a78:	a880ffc4 	addi	r2,r21,1023
80214a7c:	00bf570e 	bge	zero,r2,802147dc <__reset+0xfa1f47dc>
80214a80:	40c001cc 	andi	r3,r8,7
80214a84:	18000726 	beq	r3,zero,80214aa4 <__divdf3+0x5c0>
80214a88:	40c003cc 	andi	r3,r8,15
80214a8c:	01000104 	movi	r4,4
80214a90:	19000426 	beq	r3,r4,80214aa4 <__divdf3+0x5c0>
80214a94:	4107883a 	add	r3,r8,r4
80214a98:	1a11803a 	cmpltu	r8,r3,r8
80214a9c:	8a23883a 	add	r17,r17,r8
80214aa0:	1811883a 	mov	r8,r3
80214aa4:	88c0402c 	andhi	r3,r17,256
80214aa8:	18000426 	beq	r3,zero,80214abc <__divdf3+0x5d8>
80214aac:	00ffc034 	movhi	r3,65280
80214ab0:	18ffffc4 	addi	r3,r3,-1
80214ab4:	a8810004 	addi	r2,r21,1024
80214ab8:	88e2703a 	and	r17,r17,r3
80214abc:	00c1ff84 	movi	r3,2046
80214ac0:	18bee316 	blt	r3,r2,80214650 <__reset+0xfa1f4650>
80214ac4:	8824977a 	slli	r18,r17,29
80214ac8:	4010d0fa 	srli	r8,r8,3
80214acc:	8822927a 	slli	r17,r17,9
80214ad0:	1081ffcc 	andi	r2,r2,2047
80214ad4:	9224b03a 	or	r18,r18,r8
80214ad8:	880ad33a 	srli	r5,r17,12
80214adc:	98c0004c 	andi	r3,r19,1
80214ae0:	003edf06 	br	80214660 <__reset+0xfa1f4660>
80214ae4:	8080022c 	andhi	r2,r16,8
80214ae8:	10001226 	beq	r2,zero,80214b34 <__divdf3+0x650>
80214aec:	8880022c 	andhi	r2,r17,8
80214af0:	1000101e 	bne	r2,zero,80214b34 <__divdf3+0x650>
80214af4:	00800434 	movhi	r2,16
80214af8:	89400234 	orhi	r5,r17,8
80214afc:	10bfffc4 	addi	r2,r2,-1
80214b00:	b007883a 	mov	r3,r22
80214b04:	288a703a 	and	r5,r5,r2
80214b08:	4025883a 	mov	r18,r8
80214b0c:	003f3106 	br	802147d4 <__reset+0xfa1f47d4>
80214b10:	008000c4 	movi	r2,3
80214b14:	3880a626 	beq	r7,r2,80214db0 <__divdf3+0x8cc>
80214b18:	00800044 	movi	r2,1
80214b1c:	3880521e 	bne	r7,r2,80214c68 <__divdf3+0x784>
80214b20:	b807883a 	mov	r3,r23
80214b24:	0005883a 	mov	r2,zero
80214b28:	000b883a 	mov	r5,zero
80214b2c:	0025883a 	mov	r18,zero
80214b30:	003ecb06 	br	80214660 <__reset+0xfa1f4660>
80214b34:	00800434 	movhi	r2,16
80214b38:	81400234 	orhi	r5,r16,8
80214b3c:	10bfffc4 	addi	r2,r2,-1
80214b40:	a007883a 	mov	r3,r20
80214b44:	288a703a 	and	r5,r5,r2
80214b48:	003f2206 	br	802147d4 <__reset+0xfa1f47d4>
80214b4c:	183fca26 	beq	r3,zero,80214a78 <__reset+0xfa1f4a78>
80214b50:	e5ef883a 	add	r23,fp,r23
80214b54:	40bfffc4 	addi	r2,r8,-1
80214b58:	bf00392e 	bgeu	r23,fp,80214c40 <__divdf3+0x75c>
80214b5c:	1011883a 	mov	r8,r2
80214b60:	ba7fc41e 	bne	r23,r9,80214a74 <__reset+0xfa1f4a74>
80214b64:	b0ffc31e 	bne	r22,r3,80214a74 <__reset+0xfa1f4a74>
80214b68:	003fc306 	br	80214a78 <__reset+0xfa1f4a78>
80214b6c:	143ff604 	addi	r16,r2,-40
80214b70:	9c20983a 	sll	r16,r19,r16
80214b74:	0025883a 	mov	r18,zero
80214b78:	003ee206 	br	80214704 <__reset+0xfa1f4704>
80214b7c:	d9800315 	stw	r6,12(sp)
80214b80:	d9c00215 	stw	r7,8(sp)
80214b84:	02061740 	call	80206174 <__clzsi2>
80214b88:	10800804 	addi	r2,r2,32
80214b8c:	d9c00217 	ldw	r7,8(sp)
80214b90:	d9800317 	ldw	r6,12(sp)
80214b94:	003ed106 	br	802146dc <__reset+0xfa1f46dc>
80214b98:	147ff604 	addi	r17,r2,-40
80214b9c:	3462983a 	sll	r17,r6,r17
80214ba0:	0011883a 	mov	r8,zero
80214ba4:	003ef506 	br	8021477c <__reset+0xfa1f477c>
80214ba8:	3009883a 	mov	r4,r6
80214bac:	d9800315 	stw	r6,12(sp)
80214bb0:	da400115 	stw	r9,4(sp)
80214bb4:	02061740 	call	80206174 <__clzsi2>
80214bb8:	10800804 	addi	r2,r2,32
80214bbc:	da400117 	ldw	r9,4(sp)
80214bc0:	d9800317 	ldw	r6,12(sp)
80214bc4:	003ee306 	br	80214754 <__reset+0xfa1f4754>
80214bc8:	85a1883a 	add	r16,r16,r22
80214bcc:	8585803a 	cmpltu	r2,r16,r22
80214bd0:	1705883a 	add	r2,r2,fp
80214bd4:	14a5883a 	add	r18,r2,r18
80214bd8:	88bfffc4 	addi	r2,r17,-1
80214bdc:	e4800c2e 	bgeu	fp,r18,80214c10 <__divdf3+0x72c>
80214be0:	90c03e36 	bltu	r18,r3,80214cdc <__divdf3+0x7f8>
80214be4:	1c806926 	beq	r3,r18,80214d8c <__divdf3+0x8a8>
80214be8:	90c7c83a 	sub	r3,r18,r3
80214bec:	1023883a 	mov	r17,r2
80214bf0:	003f5206 	br	8021493c <__reset+0xfa1f493c>
80214bf4:	923f0436 	bltu	r18,r8,80214808 <__reset+0xfa1f4808>
80214bf8:	800897fa 	slli	r4,r16,31
80214bfc:	9004d07a 	srli	r2,r18,1
80214c00:	8006d07a 	srli	r3,r16,1
80214c04:	902097fa 	slli	r16,r18,31
80214c08:	20a4b03a 	or	r18,r4,r2
80214c0c:	003f0106 	br	80214814 <__reset+0xfa1f4814>
80214c10:	e4bff51e 	bne	fp,r18,80214be8 <__reset+0xfa1f4be8>
80214c14:	85bff22e 	bgeu	r16,r22,80214be0 <__reset+0xfa1f4be0>
80214c18:	e0c7c83a 	sub	r3,fp,r3
80214c1c:	1023883a 	mov	r17,r2
80214c20:	003f4606 	br	8021493c <__reset+0xfa1f493c>
80214c24:	100f883a 	mov	r7,r2
80214c28:	003f2b06 	br	802148d8 <__reset+0xfa1f48d8>
80214c2c:	180d883a 	mov	r6,r3
80214c30:	003f1306 	br	80214880 <__reset+0xfa1f4880>
80214c34:	813fe436 	bltu	r16,r4,80214bc8 <__reset+0xfa1f4bc8>
80214c38:	0007883a 	mov	r3,zero
80214c3c:	003f3f06 	br	8021493c <__reset+0xfa1f493c>
80214c40:	ba402c36 	bltu	r23,r9,80214cf4 <__divdf3+0x810>
80214c44:	4dc05426 	beq	r9,r23,80214d98 <__divdf3+0x8b4>
80214c48:	1011883a 	mov	r8,r2
80214c4c:	003f8906 	br	80214a74 <__reset+0xfa1f4a74>
80214c50:	023fffc4 	movi	r8,-1
80214c54:	003f8806 	br	80214a78 <__reset+0xfa1f4a78>
80214c58:	1811883a 	mov	r8,r3
80214c5c:	003f5406 	br	802149b0 <__reset+0xfa1f49b0>
80214c60:	1025883a 	mov	r18,r2
80214c64:	003f6d06 	br	80214a1c <__reset+0xfa1f4a1c>
80214c68:	b827883a 	mov	r19,r23
80214c6c:	003f8206 	br	80214a78 <__reset+0xfa1f4a78>
80214c70:	010007c4 	movi	r4,31
80214c74:	20c02616 	blt	r4,r3,80214d10 <__divdf3+0x82c>
80214c78:	00800804 	movi	r2,32
80214c7c:	10c5c83a 	sub	r2,r2,r3
80214c80:	888a983a 	sll	r5,r17,r2
80214c84:	40c8d83a 	srl	r4,r8,r3
80214c88:	4084983a 	sll	r2,r8,r2
80214c8c:	88e2d83a 	srl	r17,r17,r3
80214c90:	2906b03a 	or	r3,r5,r4
80214c94:	1004c03a 	cmpne	r2,r2,zero
80214c98:	1886b03a 	or	r3,r3,r2
80214c9c:	188001cc 	andi	r2,r3,7
80214ca0:	10000726 	beq	r2,zero,80214cc0 <__divdf3+0x7dc>
80214ca4:	188003cc 	andi	r2,r3,15
80214ca8:	01000104 	movi	r4,4
80214cac:	11000426 	beq	r2,r4,80214cc0 <__divdf3+0x7dc>
80214cb0:	1805883a 	mov	r2,r3
80214cb4:	10c00104 	addi	r3,r2,4
80214cb8:	1885803a 	cmpltu	r2,r3,r2
80214cbc:	88a3883a 	add	r17,r17,r2
80214cc0:	8880202c 	andhi	r2,r17,128
80214cc4:	10002726 	beq	r2,zero,80214d64 <__divdf3+0x880>
80214cc8:	98c0004c 	andi	r3,r19,1
80214ccc:	00800044 	movi	r2,1
80214cd0:	000b883a 	mov	r5,zero
80214cd4:	0025883a 	mov	r18,zero
80214cd8:	003e6106 	br	80214660 <__reset+0xfa1f4660>
80214cdc:	85a1883a 	add	r16,r16,r22
80214ce0:	8585803a 	cmpltu	r2,r16,r22
80214ce4:	1705883a 	add	r2,r2,fp
80214ce8:	14a5883a 	add	r18,r2,r18
80214cec:	8c7fff84 	addi	r17,r17,-2
80214cf0:	003f1106 	br	80214938 <__reset+0xfa1f4938>
80214cf4:	b589883a 	add	r4,r22,r22
80214cf8:	25ad803a 	cmpltu	r22,r4,r22
80214cfc:	b739883a 	add	fp,r22,fp
80214d00:	40bfff84 	addi	r2,r8,-2
80214d04:	bf2f883a 	add	r23,r23,fp
80214d08:	202d883a 	mov	r22,r4
80214d0c:	003f9306 	br	80214b5c <__reset+0xfa1f4b5c>
80214d10:	013ff844 	movi	r4,-31
80214d14:	2085c83a 	sub	r2,r4,r2
80214d18:	8888d83a 	srl	r4,r17,r2
80214d1c:	00800804 	movi	r2,32
80214d20:	18802126 	beq	r3,r2,80214da8 <__divdf3+0x8c4>
80214d24:	00801004 	movi	r2,64
80214d28:	10c5c83a 	sub	r2,r2,r3
80214d2c:	8884983a 	sll	r2,r17,r2
80214d30:	1204b03a 	or	r2,r2,r8
80214d34:	1004c03a 	cmpne	r2,r2,zero
80214d38:	2084b03a 	or	r2,r4,r2
80214d3c:	144001cc 	andi	r17,r2,7
80214d40:	88000d1e 	bne	r17,zero,80214d78 <__divdf3+0x894>
80214d44:	000b883a 	mov	r5,zero
80214d48:	1024d0fa 	srli	r18,r2,3
80214d4c:	98c0004c 	andi	r3,r19,1
80214d50:	0005883a 	mov	r2,zero
80214d54:	9464b03a 	or	r18,r18,r17
80214d58:	003e4106 	br	80214660 <__reset+0xfa1f4660>
80214d5c:	1007883a 	mov	r3,r2
80214d60:	0023883a 	mov	r17,zero
80214d64:	880a927a 	slli	r5,r17,9
80214d68:	1805883a 	mov	r2,r3
80214d6c:	8822977a 	slli	r17,r17,29
80214d70:	280ad33a 	srli	r5,r5,12
80214d74:	003ff406 	br	80214d48 <__reset+0xfa1f4d48>
80214d78:	10c003cc 	andi	r3,r2,15
80214d7c:	01000104 	movi	r4,4
80214d80:	193ff626 	beq	r3,r4,80214d5c <__reset+0xfa1f4d5c>
80214d84:	0023883a 	mov	r17,zero
80214d88:	003fca06 	br	80214cb4 <__reset+0xfa1f4cb4>
80214d8c:	813fd336 	bltu	r16,r4,80214cdc <__reset+0xfa1f4cdc>
80214d90:	1023883a 	mov	r17,r2
80214d94:	003fa806 	br	80214c38 <__reset+0xfa1f4c38>
80214d98:	b0ffd636 	bltu	r22,r3,80214cf4 <__reset+0xfa1f4cf4>
80214d9c:	1011883a 	mov	r8,r2
80214da0:	b0ff341e 	bne	r22,r3,80214a74 <__reset+0xfa1f4a74>
80214da4:	003f3406 	br	80214a78 <__reset+0xfa1f4a78>
80214da8:	0005883a 	mov	r2,zero
80214dac:	003fe006 	br	80214d30 <__reset+0xfa1f4d30>
80214db0:	00800434 	movhi	r2,16
80214db4:	89400234 	orhi	r5,r17,8
80214db8:	10bfffc4 	addi	r2,r2,-1
80214dbc:	b807883a 	mov	r3,r23
80214dc0:	288a703a 	and	r5,r5,r2
80214dc4:	4025883a 	mov	r18,r8
80214dc8:	003e8206 	br	802147d4 <__reset+0xfa1f47d4>

80214dcc <__eqdf2>:
80214dcc:	2804d53a 	srli	r2,r5,20
80214dd0:	3806d53a 	srli	r3,r7,20
80214dd4:	02000434 	movhi	r8,16
80214dd8:	423fffc4 	addi	r8,r8,-1
80214ddc:	1081ffcc 	andi	r2,r2,2047
80214de0:	0281ffc4 	movi	r10,2047
80214de4:	2a12703a 	and	r9,r5,r8
80214de8:	18c1ffcc 	andi	r3,r3,2047
80214dec:	3a10703a 	and	r8,r7,r8
80214df0:	280ad7fa 	srli	r5,r5,31
80214df4:	380ed7fa 	srli	r7,r7,31
80214df8:	12801026 	beq	r2,r10,80214e3c <__eqdf2+0x70>
80214dfc:	0281ffc4 	movi	r10,2047
80214e00:	1a800a26 	beq	r3,r10,80214e2c <__eqdf2+0x60>
80214e04:	10c00226 	beq	r2,r3,80214e10 <__eqdf2+0x44>
80214e08:	00800044 	movi	r2,1
80214e0c:	f800283a 	ret
80214e10:	4a3ffd1e 	bne	r9,r8,80214e08 <__reset+0xfa1f4e08>
80214e14:	21bffc1e 	bne	r4,r6,80214e08 <__reset+0xfa1f4e08>
80214e18:	29c00c26 	beq	r5,r7,80214e4c <__eqdf2+0x80>
80214e1c:	103ffa1e 	bne	r2,zero,80214e08 <__reset+0xfa1f4e08>
80214e20:	2244b03a 	or	r2,r4,r9
80214e24:	1004c03a 	cmpne	r2,r2,zero
80214e28:	f800283a 	ret
80214e2c:	3214b03a 	or	r10,r6,r8
80214e30:	503ff426 	beq	r10,zero,80214e04 <__reset+0xfa1f4e04>
80214e34:	00800044 	movi	r2,1
80214e38:	f800283a 	ret
80214e3c:	2254b03a 	or	r10,r4,r9
80214e40:	503fee26 	beq	r10,zero,80214dfc <__reset+0xfa1f4dfc>
80214e44:	00800044 	movi	r2,1
80214e48:	f800283a 	ret
80214e4c:	0005883a 	mov	r2,zero
80214e50:	f800283a 	ret

80214e54 <__gedf2>:
80214e54:	2804d53a 	srli	r2,r5,20
80214e58:	3806d53a 	srli	r3,r7,20
80214e5c:	02000434 	movhi	r8,16
80214e60:	423fffc4 	addi	r8,r8,-1
80214e64:	1081ffcc 	andi	r2,r2,2047
80214e68:	0241ffc4 	movi	r9,2047
80214e6c:	2a14703a 	and	r10,r5,r8
80214e70:	18c1ffcc 	andi	r3,r3,2047
80214e74:	3a10703a 	and	r8,r7,r8
80214e78:	280ad7fa 	srli	r5,r5,31
80214e7c:	380ed7fa 	srli	r7,r7,31
80214e80:	12401d26 	beq	r2,r9,80214ef8 <__gedf2+0xa4>
80214e84:	0241ffc4 	movi	r9,2047
80214e88:	1a401226 	beq	r3,r9,80214ed4 <__gedf2+0x80>
80214e8c:	1000081e 	bne	r2,zero,80214eb0 <__gedf2+0x5c>
80214e90:	2296b03a 	or	r11,r4,r10
80214e94:	5813003a 	cmpeq	r9,r11,zero
80214e98:	1800091e 	bne	r3,zero,80214ec0 <__gedf2+0x6c>
80214e9c:	3218b03a 	or	r12,r6,r8
80214ea0:	6000071e 	bne	r12,zero,80214ec0 <__gedf2+0x6c>
80214ea4:	0005883a 	mov	r2,zero
80214ea8:	5800101e 	bne	r11,zero,80214eec <__gedf2+0x98>
80214eac:	f800283a 	ret
80214eb0:	18000c1e 	bne	r3,zero,80214ee4 <__gedf2+0x90>
80214eb4:	3212b03a 	or	r9,r6,r8
80214eb8:	48000c26 	beq	r9,zero,80214eec <__gedf2+0x98>
80214ebc:	0013883a 	mov	r9,zero
80214ec0:	39c03fcc 	andi	r7,r7,255
80214ec4:	48000826 	beq	r9,zero,80214ee8 <__gedf2+0x94>
80214ec8:	38000926 	beq	r7,zero,80214ef0 <__gedf2+0x9c>
80214ecc:	00800044 	movi	r2,1
80214ed0:	f800283a 	ret
80214ed4:	3212b03a 	or	r9,r6,r8
80214ed8:	483fec26 	beq	r9,zero,80214e8c <__reset+0xfa1f4e8c>
80214edc:	00bfff84 	movi	r2,-2
80214ee0:	f800283a 	ret
80214ee4:	39c03fcc 	andi	r7,r7,255
80214ee8:	29c00626 	beq	r5,r7,80214f04 <__gedf2+0xb0>
80214eec:	283ff726 	beq	r5,zero,80214ecc <__reset+0xfa1f4ecc>
80214ef0:	00bfffc4 	movi	r2,-1
80214ef4:	f800283a 	ret
80214ef8:	2292b03a 	or	r9,r4,r10
80214efc:	483fe126 	beq	r9,zero,80214e84 <__reset+0xfa1f4e84>
80214f00:	003ff606 	br	80214edc <__reset+0xfa1f4edc>
80214f04:	18bff916 	blt	r3,r2,80214eec <__reset+0xfa1f4eec>
80214f08:	10c00316 	blt	r2,r3,80214f18 <__gedf2+0xc4>
80214f0c:	42bff736 	bltu	r8,r10,80214eec <__reset+0xfa1f4eec>
80214f10:	52000326 	beq	r10,r8,80214f20 <__gedf2+0xcc>
80214f14:	5200042e 	bgeu	r10,r8,80214f28 <__gedf2+0xd4>
80214f18:	283fec1e 	bne	r5,zero,80214ecc <__reset+0xfa1f4ecc>
80214f1c:	003ff406 	br	80214ef0 <__reset+0xfa1f4ef0>
80214f20:	313ff236 	bltu	r6,r4,80214eec <__reset+0xfa1f4eec>
80214f24:	21bffc36 	bltu	r4,r6,80214f18 <__reset+0xfa1f4f18>
80214f28:	0005883a 	mov	r2,zero
80214f2c:	f800283a 	ret

80214f30 <__ledf2>:
80214f30:	2804d53a 	srli	r2,r5,20
80214f34:	3810d53a 	srli	r8,r7,20
80214f38:	00c00434 	movhi	r3,16
80214f3c:	18ffffc4 	addi	r3,r3,-1
80214f40:	1081ffcc 	andi	r2,r2,2047
80214f44:	0241ffc4 	movi	r9,2047
80214f48:	28d4703a 	and	r10,r5,r3
80214f4c:	4201ffcc 	andi	r8,r8,2047
80214f50:	38c6703a 	and	r3,r7,r3
80214f54:	280ad7fa 	srli	r5,r5,31
80214f58:	380ed7fa 	srli	r7,r7,31
80214f5c:	12401f26 	beq	r2,r9,80214fdc <__ledf2+0xac>
80214f60:	0241ffc4 	movi	r9,2047
80214f64:	42401426 	beq	r8,r9,80214fb8 <__ledf2+0x88>
80214f68:	1000091e 	bne	r2,zero,80214f90 <__ledf2+0x60>
80214f6c:	2296b03a 	or	r11,r4,r10
80214f70:	5813003a 	cmpeq	r9,r11,zero
80214f74:	29403fcc 	andi	r5,r5,255
80214f78:	40000a1e 	bne	r8,zero,80214fa4 <__ledf2+0x74>
80214f7c:	30d8b03a 	or	r12,r6,r3
80214f80:	6000081e 	bne	r12,zero,80214fa4 <__ledf2+0x74>
80214f84:	0005883a 	mov	r2,zero
80214f88:	5800111e 	bne	r11,zero,80214fd0 <__ledf2+0xa0>
80214f8c:	f800283a 	ret
80214f90:	29403fcc 	andi	r5,r5,255
80214f94:	40000c1e 	bne	r8,zero,80214fc8 <__ledf2+0x98>
80214f98:	30d2b03a 	or	r9,r6,r3
80214f9c:	48000c26 	beq	r9,zero,80214fd0 <__ledf2+0xa0>
80214fa0:	0013883a 	mov	r9,zero
80214fa4:	39c03fcc 	andi	r7,r7,255
80214fa8:	48000826 	beq	r9,zero,80214fcc <__ledf2+0x9c>
80214fac:	38001126 	beq	r7,zero,80214ff4 <__ledf2+0xc4>
80214fb0:	00800044 	movi	r2,1
80214fb4:	f800283a 	ret
80214fb8:	30d2b03a 	or	r9,r6,r3
80214fbc:	483fea26 	beq	r9,zero,80214f68 <__reset+0xfa1f4f68>
80214fc0:	00800084 	movi	r2,2
80214fc4:	f800283a 	ret
80214fc8:	39c03fcc 	andi	r7,r7,255
80214fcc:	39400726 	beq	r7,r5,80214fec <__ledf2+0xbc>
80214fd0:	2800081e 	bne	r5,zero,80214ff4 <__ledf2+0xc4>
80214fd4:	00800044 	movi	r2,1
80214fd8:	f800283a 	ret
80214fdc:	2292b03a 	or	r9,r4,r10
80214fe0:	483fdf26 	beq	r9,zero,80214f60 <__reset+0xfa1f4f60>
80214fe4:	00800084 	movi	r2,2
80214fe8:	f800283a 	ret
80214fec:	4080030e 	bge	r8,r2,80214ffc <__ledf2+0xcc>
80214ff0:	383fef26 	beq	r7,zero,80214fb0 <__reset+0xfa1f4fb0>
80214ff4:	00bfffc4 	movi	r2,-1
80214ff8:	f800283a 	ret
80214ffc:	123feb16 	blt	r2,r8,80214fac <__reset+0xfa1f4fac>
80215000:	1abff336 	bltu	r3,r10,80214fd0 <__reset+0xfa1f4fd0>
80215004:	50c00326 	beq	r10,r3,80215014 <__ledf2+0xe4>
80215008:	50c0042e 	bgeu	r10,r3,8021501c <__ledf2+0xec>
8021500c:	283fe81e 	bne	r5,zero,80214fb0 <__reset+0xfa1f4fb0>
80215010:	003ff806 	br	80214ff4 <__reset+0xfa1f4ff4>
80215014:	313fee36 	bltu	r6,r4,80214fd0 <__reset+0xfa1f4fd0>
80215018:	21bffc36 	bltu	r4,r6,8021500c <__reset+0xfa1f500c>
8021501c:	0005883a 	mov	r2,zero
80215020:	f800283a 	ret

80215024 <__muldf3>:
80215024:	defff304 	addi	sp,sp,-52
80215028:	2804d53a 	srli	r2,r5,20
8021502c:	dd800915 	stw	r22,36(sp)
80215030:	282cd7fa 	srli	r22,r5,31
80215034:	dc000315 	stw	r16,12(sp)
80215038:	04000434 	movhi	r16,16
8021503c:	dd400815 	stw	r21,32(sp)
80215040:	dc800515 	stw	r18,20(sp)
80215044:	843fffc4 	addi	r16,r16,-1
80215048:	dfc00c15 	stw	ra,48(sp)
8021504c:	df000b15 	stw	fp,44(sp)
80215050:	ddc00a15 	stw	r23,40(sp)
80215054:	dd000715 	stw	r20,28(sp)
80215058:	dcc00615 	stw	r19,24(sp)
8021505c:	dc400415 	stw	r17,16(sp)
80215060:	1481ffcc 	andi	r18,r2,2047
80215064:	2c20703a 	and	r16,r5,r16
80215068:	b02b883a 	mov	r21,r22
8021506c:	b2403fcc 	andi	r9,r22,255
80215070:	90006026 	beq	r18,zero,802151f4 <__muldf3+0x1d0>
80215074:	0081ffc4 	movi	r2,2047
80215078:	2029883a 	mov	r20,r4
8021507c:	90803626 	beq	r18,r2,80215158 <__muldf3+0x134>
80215080:	80800434 	orhi	r2,r16,16
80215084:	100490fa 	slli	r2,r2,3
80215088:	2020d77a 	srli	r16,r4,29
8021508c:	202890fa 	slli	r20,r4,3
80215090:	94bf0044 	addi	r18,r18,-1023
80215094:	80a0b03a 	or	r16,r16,r2
80215098:	0027883a 	mov	r19,zero
8021509c:	0039883a 	mov	fp,zero
802150a0:	3804d53a 	srli	r2,r7,20
802150a4:	382ed7fa 	srli	r23,r7,31
802150a8:	04400434 	movhi	r17,16
802150ac:	8c7fffc4 	addi	r17,r17,-1
802150b0:	1081ffcc 	andi	r2,r2,2047
802150b4:	3011883a 	mov	r8,r6
802150b8:	3c62703a 	and	r17,r7,r17
802150bc:	ba803fcc 	andi	r10,r23,255
802150c0:	10006d26 	beq	r2,zero,80215278 <__muldf3+0x254>
802150c4:	00c1ffc4 	movi	r3,2047
802150c8:	10c06526 	beq	r2,r3,80215260 <__muldf3+0x23c>
802150cc:	88c00434 	orhi	r3,r17,16
802150d0:	180690fa 	slli	r3,r3,3
802150d4:	3022d77a 	srli	r17,r6,29
802150d8:	301090fa 	slli	r8,r6,3
802150dc:	10bf0044 	addi	r2,r2,-1023
802150e0:	88e2b03a 	or	r17,r17,r3
802150e4:	000b883a 	mov	r5,zero
802150e8:	9085883a 	add	r2,r18,r2
802150ec:	2cc8b03a 	or	r4,r5,r19
802150f0:	00c003c4 	movi	r3,15
802150f4:	bdacf03a 	xor	r22,r23,r22
802150f8:	12c00044 	addi	r11,r2,1
802150fc:	19009936 	bltu	r3,r4,80215364 <__muldf3+0x340>
80215100:	200890ba 	slli	r4,r4,2
80215104:	00e00874 	movhi	r3,32801
80215108:	18d44604 	addi	r3,r3,20760
8021510c:	20c9883a 	add	r4,r4,r3
80215110:	20c00017 	ldw	r3,0(r4)
80215114:	1800683a 	jmp	r3
80215118:	80215364 	muli	zero,r16,-31411
8021511c:	80215178 	rdprs	zero,r16,-31419
80215120:	80215178 	rdprs	zero,r16,-31419
80215124:	80215174 	orhi	zero,r16,34117
80215128:	80215340 	call	88021534 <__reset+0x2001534>
8021512c:	80215340 	call	88021534 <__reset+0x2001534>
80215130:	80215328 	cmpgeui	zero,r16,34124
80215134:	80215174 	orhi	zero,r16,34117
80215138:	80215340 	call	88021534 <__reset+0x2001534>
8021513c:	80215328 	cmpgeui	zero,r16,34124
80215140:	80215340 	call	88021534 <__reset+0x2001534>
80215144:	80215174 	orhi	zero,r16,34117
80215148:	80215350 	cmplti	zero,r16,-31411
8021514c:	80215350 	cmplti	zero,r16,-31411
80215150:	80215350 	cmplti	zero,r16,-31411
80215154:	8021556c 	andhi	zero,r16,34133
80215158:	2404b03a 	or	r2,r4,r16
8021515c:	10006f1e 	bne	r2,zero,8021531c <__muldf3+0x2f8>
80215160:	04c00204 	movi	r19,8
80215164:	0021883a 	mov	r16,zero
80215168:	0029883a 	mov	r20,zero
8021516c:	07000084 	movi	fp,2
80215170:	003fcb06 	br	802150a0 <__reset+0xfa1f50a0>
80215174:	502d883a 	mov	r22,r10
80215178:	00800084 	movi	r2,2
8021517c:	28805726 	beq	r5,r2,802152dc <__muldf3+0x2b8>
80215180:	008000c4 	movi	r2,3
80215184:	28816626 	beq	r5,r2,80215720 <__muldf3+0x6fc>
80215188:	00800044 	movi	r2,1
8021518c:	2881411e 	bne	r5,r2,80215694 <__muldf3+0x670>
80215190:	b02b883a 	mov	r21,r22
80215194:	0005883a 	mov	r2,zero
80215198:	000b883a 	mov	r5,zero
8021519c:	0029883a 	mov	r20,zero
802151a0:	1004953a 	slli	r2,r2,20
802151a4:	a8c03fcc 	andi	r3,r21,255
802151a8:	04400434 	movhi	r17,16
802151ac:	8c7fffc4 	addi	r17,r17,-1
802151b0:	180697fa 	slli	r3,r3,31
802151b4:	2c4a703a 	and	r5,r5,r17
802151b8:	288ab03a 	or	r5,r5,r2
802151bc:	28c6b03a 	or	r3,r5,r3
802151c0:	a005883a 	mov	r2,r20
802151c4:	dfc00c17 	ldw	ra,48(sp)
802151c8:	df000b17 	ldw	fp,44(sp)
802151cc:	ddc00a17 	ldw	r23,40(sp)
802151d0:	dd800917 	ldw	r22,36(sp)
802151d4:	dd400817 	ldw	r21,32(sp)
802151d8:	dd000717 	ldw	r20,28(sp)
802151dc:	dcc00617 	ldw	r19,24(sp)
802151e0:	dc800517 	ldw	r18,20(sp)
802151e4:	dc400417 	ldw	r17,16(sp)
802151e8:	dc000317 	ldw	r16,12(sp)
802151ec:	dec00d04 	addi	sp,sp,52
802151f0:	f800283a 	ret
802151f4:	2404b03a 	or	r2,r4,r16
802151f8:	2027883a 	mov	r19,r4
802151fc:	10004226 	beq	r2,zero,80215308 <__muldf3+0x2e4>
80215200:	8000fc26 	beq	r16,zero,802155f4 <__muldf3+0x5d0>
80215204:	8009883a 	mov	r4,r16
80215208:	d9800215 	stw	r6,8(sp)
8021520c:	d9c00015 	stw	r7,0(sp)
80215210:	da400115 	stw	r9,4(sp)
80215214:	02061740 	call	80206174 <__clzsi2>
80215218:	d9800217 	ldw	r6,8(sp)
8021521c:	d9c00017 	ldw	r7,0(sp)
80215220:	da400117 	ldw	r9,4(sp)
80215224:	113ffd44 	addi	r4,r2,-11
80215228:	00c00704 	movi	r3,28
8021522c:	1900ed16 	blt	r3,r4,802155e4 <__muldf3+0x5c0>
80215230:	00c00744 	movi	r3,29
80215234:	147ffe04 	addi	r17,r2,-8
80215238:	1907c83a 	sub	r3,r3,r4
8021523c:	8460983a 	sll	r16,r16,r17
80215240:	98c6d83a 	srl	r3,r19,r3
80215244:	9c68983a 	sll	r20,r19,r17
80215248:	1c20b03a 	or	r16,r3,r16
8021524c:	1080fcc4 	addi	r2,r2,1011
80215250:	00a5c83a 	sub	r18,zero,r2
80215254:	0027883a 	mov	r19,zero
80215258:	0039883a 	mov	fp,zero
8021525c:	003f9006 	br	802150a0 <__reset+0xfa1f50a0>
80215260:	3446b03a 	or	r3,r6,r17
80215264:	1800261e 	bne	r3,zero,80215300 <__muldf3+0x2dc>
80215268:	0023883a 	mov	r17,zero
8021526c:	0011883a 	mov	r8,zero
80215270:	01400084 	movi	r5,2
80215274:	003f9c06 	br	802150e8 <__reset+0xfa1f50e8>
80215278:	3446b03a 	or	r3,r6,r17
8021527c:	18001c26 	beq	r3,zero,802152f0 <__muldf3+0x2cc>
80215280:	8800ce26 	beq	r17,zero,802155bc <__muldf3+0x598>
80215284:	8809883a 	mov	r4,r17
80215288:	d9800215 	stw	r6,8(sp)
8021528c:	da400115 	stw	r9,4(sp)
80215290:	da800015 	stw	r10,0(sp)
80215294:	02061740 	call	80206174 <__clzsi2>
80215298:	d9800217 	ldw	r6,8(sp)
8021529c:	da400117 	ldw	r9,4(sp)
802152a0:	da800017 	ldw	r10,0(sp)
802152a4:	113ffd44 	addi	r4,r2,-11
802152a8:	00c00704 	movi	r3,28
802152ac:	1900bf16 	blt	r3,r4,802155ac <__muldf3+0x588>
802152b0:	00c00744 	movi	r3,29
802152b4:	123ffe04 	addi	r8,r2,-8
802152b8:	1907c83a 	sub	r3,r3,r4
802152bc:	8a22983a 	sll	r17,r17,r8
802152c0:	30c6d83a 	srl	r3,r6,r3
802152c4:	3210983a 	sll	r8,r6,r8
802152c8:	1c62b03a 	or	r17,r3,r17
802152cc:	1080fcc4 	addi	r2,r2,1011
802152d0:	0085c83a 	sub	r2,zero,r2
802152d4:	000b883a 	mov	r5,zero
802152d8:	003f8306 	br	802150e8 <__reset+0xfa1f50e8>
802152dc:	b02b883a 	mov	r21,r22
802152e0:	0081ffc4 	movi	r2,2047
802152e4:	000b883a 	mov	r5,zero
802152e8:	0029883a 	mov	r20,zero
802152ec:	003fac06 	br	802151a0 <__reset+0xfa1f51a0>
802152f0:	0023883a 	mov	r17,zero
802152f4:	0011883a 	mov	r8,zero
802152f8:	01400044 	movi	r5,1
802152fc:	003f7a06 	br	802150e8 <__reset+0xfa1f50e8>
80215300:	014000c4 	movi	r5,3
80215304:	003f7806 	br	802150e8 <__reset+0xfa1f50e8>
80215308:	04c00104 	movi	r19,4
8021530c:	0021883a 	mov	r16,zero
80215310:	0029883a 	mov	r20,zero
80215314:	07000044 	movi	fp,1
80215318:	003f6106 	br	802150a0 <__reset+0xfa1f50a0>
8021531c:	04c00304 	movi	r19,12
80215320:	070000c4 	movi	fp,3
80215324:	003f5e06 	br	802150a0 <__reset+0xfa1f50a0>
80215328:	01400434 	movhi	r5,16
8021532c:	002b883a 	mov	r21,zero
80215330:	297fffc4 	addi	r5,r5,-1
80215334:	053fffc4 	movi	r20,-1
80215338:	0081ffc4 	movi	r2,2047
8021533c:	003f9806 	br	802151a0 <__reset+0xfa1f51a0>
80215340:	8023883a 	mov	r17,r16
80215344:	a011883a 	mov	r8,r20
80215348:	e00b883a 	mov	r5,fp
8021534c:	003f8a06 	br	80215178 <__reset+0xfa1f5178>
80215350:	8023883a 	mov	r17,r16
80215354:	a011883a 	mov	r8,r20
80215358:	482d883a 	mov	r22,r9
8021535c:	e00b883a 	mov	r5,fp
80215360:	003f8506 	br	80215178 <__reset+0xfa1f5178>
80215364:	a00ad43a 	srli	r5,r20,16
80215368:	401ad43a 	srli	r13,r8,16
8021536c:	a53fffcc 	andi	r20,r20,65535
80215370:	423fffcc 	andi	r8,r8,65535
80215374:	4519383a 	mul	r12,r8,r20
80215378:	4147383a 	mul	r3,r8,r5
8021537c:	6d09383a 	mul	r4,r13,r20
80215380:	600cd43a 	srli	r6,r12,16
80215384:	2b5d383a 	mul	r14,r5,r13
80215388:	20c9883a 	add	r4,r4,r3
8021538c:	310d883a 	add	r6,r6,r4
80215390:	30c0022e 	bgeu	r6,r3,8021539c <__muldf3+0x378>
80215394:	00c00074 	movhi	r3,1
80215398:	70dd883a 	add	r14,r14,r3
8021539c:	8826d43a 	srli	r19,r17,16
802153a0:	8bffffcc 	andi	r15,r17,65535
802153a4:	7d23383a 	mul	r17,r15,r20
802153a8:	7949383a 	mul	r4,r15,r5
802153ac:	9d29383a 	mul	r20,r19,r20
802153b0:	8814d43a 	srli	r10,r17,16
802153b4:	3012943a 	slli	r9,r6,16
802153b8:	a129883a 	add	r20,r20,r4
802153bc:	633fffcc 	andi	r12,r12,65535
802153c0:	5515883a 	add	r10,r10,r20
802153c4:	3006d43a 	srli	r3,r6,16
802153c8:	4b13883a 	add	r9,r9,r12
802153cc:	2ccb383a 	mul	r5,r5,r19
802153d0:	5100022e 	bgeu	r10,r4,802153dc <__muldf3+0x3b8>
802153d4:	01000074 	movhi	r4,1
802153d8:	290b883a 	add	r5,r5,r4
802153dc:	802ad43a 	srli	r21,r16,16
802153e0:	843fffcc 	andi	r16,r16,65535
802153e4:	440d383a 	mul	r6,r8,r16
802153e8:	4565383a 	mul	r18,r8,r21
802153ec:	8349383a 	mul	r4,r16,r13
802153f0:	500e943a 	slli	r7,r10,16
802153f4:	3010d43a 	srli	r8,r6,16
802153f8:	5028d43a 	srli	r20,r10,16
802153fc:	2489883a 	add	r4,r4,r18
80215400:	8abfffcc 	andi	r10,r17,65535
80215404:	3a95883a 	add	r10,r7,r10
80215408:	4119883a 	add	r12,r8,r4
8021540c:	a169883a 	add	r20,r20,r5
80215410:	1a87883a 	add	r3,r3,r10
80215414:	6d5b383a 	mul	r13,r13,r21
80215418:	6480022e 	bgeu	r12,r18,80215424 <__muldf3+0x400>
8021541c:	01000074 	movhi	r4,1
80215420:	691b883a 	add	r13,r13,r4
80215424:	7c25383a 	mul	r18,r15,r16
80215428:	7d4b383a 	mul	r5,r15,r21
8021542c:	84cf383a 	mul	r7,r16,r19
80215430:	901ed43a 	srli	r15,r18,16
80215434:	6008d43a 	srli	r4,r12,16
80215438:	6010943a 	slli	r8,r12,16
8021543c:	394f883a 	add	r7,r7,r5
80215440:	333fffcc 	andi	r12,r6,65535
80215444:	79df883a 	add	r15,r15,r7
80215448:	235b883a 	add	r13,r4,r13
8021544c:	9d63383a 	mul	r17,r19,r21
80215450:	4309883a 	add	r4,r8,r12
80215454:	7940022e 	bgeu	r15,r5,80215460 <__muldf3+0x43c>
80215458:	01400074 	movhi	r5,1
8021545c:	8963883a 	add	r17,r17,r5
80215460:	780a943a 	slli	r5,r15,16
80215464:	91bfffcc 	andi	r6,r18,65535
80215468:	70c7883a 	add	r3,r14,r3
8021546c:	298d883a 	add	r6,r5,r6
80215470:	1a8f803a 	cmpltu	r7,r3,r10
80215474:	350b883a 	add	r5,r6,r20
80215478:	20c7883a 	add	r3,r4,r3
8021547c:	3955883a 	add	r10,r7,r5
80215480:	1909803a 	cmpltu	r4,r3,r4
80215484:	6a91883a 	add	r8,r13,r10
80215488:	780cd43a 	srli	r6,r15,16
8021548c:	2219883a 	add	r12,r4,r8
80215490:	2d0b803a 	cmpltu	r5,r5,r20
80215494:	51cf803a 	cmpltu	r7,r10,r7
80215498:	29ceb03a 	or	r7,r5,r7
8021549c:	4351803a 	cmpltu	r8,r8,r13
802154a0:	610b803a 	cmpltu	r5,r12,r4
802154a4:	4148b03a 	or	r4,r8,r5
802154a8:	398f883a 	add	r7,r7,r6
802154ac:	3909883a 	add	r4,r7,r4
802154b0:	1810927a 	slli	r8,r3,9
802154b4:	2449883a 	add	r4,r4,r17
802154b8:	2008927a 	slli	r4,r4,9
802154bc:	6022d5fa 	srli	r17,r12,23
802154c0:	1806d5fa 	srli	r3,r3,23
802154c4:	4252b03a 	or	r9,r8,r9
802154c8:	600a927a 	slli	r5,r12,9
802154cc:	4810c03a 	cmpne	r8,r9,zero
802154d0:	2462b03a 	or	r17,r4,r17
802154d4:	40c6b03a 	or	r3,r8,r3
802154d8:	8900402c 	andhi	r4,r17,256
802154dc:	1950b03a 	or	r8,r3,r5
802154e0:	20000726 	beq	r4,zero,80215500 <__muldf3+0x4dc>
802154e4:	4006d07a 	srli	r3,r8,1
802154e8:	880497fa 	slli	r2,r17,31
802154ec:	4200004c 	andi	r8,r8,1
802154f0:	8822d07a 	srli	r17,r17,1
802154f4:	1a10b03a 	or	r8,r3,r8
802154f8:	1210b03a 	or	r8,r2,r8
802154fc:	5805883a 	mov	r2,r11
80215500:	1140ffc4 	addi	r5,r2,1023
80215504:	0140440e 	bge	zero,r5,80215618 <__muldf3+0x5f4>
80215508:	40c001cc 	andi	r3,r8,7
8021550c:	18000726 	beq	r3,zero,8021552c <__muldf3+0x508>
80215510:	40c003cc 	andi	r3,r8,15
80215514:	01000104 	movi	r4,4
80215518:	19000426 	beq	r3,r4,8021552c <__muldf3+0x508>
8021551c:	4107883a 	add	r3,r8,r4
80215520:	1a11803a 	cmpltu	r8,r3,r8
80215524:	8a23883a 	add	r17,r17,r8
80215528:	1811883a 	mov	r8,r3
8021552c:	88c0402c 	andhi	r3,r17,256
80215530:	18000426 	beq	r3,zero,80215544 <__muldf3+0x520>
80215534:	11410004 	addi	r5,r2,1024
80215538:	00bfc034 	movhi	r2,65280
8021553c:	10bfffc4 	addi	r2,r2,-1
80215540:	88a2703a 	and	r17,r17,r2
80215544:	0081ff84 	movi	r2,2046
80215548:	117f6416 	blt	r2,r5,802152dc <__reset+0xfa1f52dc>
8021554c:	8828977a 	slli	r20,r17,29
80215550:	4010d0fa 	srli	r8,r8,3
80215554:	8822927a 	slli	r17,r17,9
80215558:	2881ffcc 	andi	r2,r5,2047
8021555c:	a228b03a 	or	r20,r20,r8
80215560:	880ad33a 	srli	r5,r17,12
80215564:	b02b883a 	mov	r21,r22
80215568:	003f0d06 	br	802151a0 <__reset+0xfa1f51a0>
8021556c:	8080022c 	andhi	r2,r16,8
80215570:	10000926 	beq	r2,zero,80215598 <__muldf3+0x574>
80215574:	8880022c 	andhi	r2,r17,8
80215578:	1000071e 	bne	r2,zero,80215598 <__muldf3+0x574>
8021557c:	00800434 	movhi	r2,16
80215580:	89400234 	orhi	r5,r17,8
80215584:	10bfffc4 	addi	r2,r2,-1
80215588:	b82b883a 	mov	r21,r23
8021558c:	288a703a 	and	r5,r5,r2
80215590:	4029883a 	mov	r20,r8
80215594:	003f6806 	br	80215338 <__reset+0xfa1f5338>
80215598:	00800434 	movhi	r2,16
8021559c:	81400234 	orhi	r5,r16,8
802155a0:	10bfffc4 	addi	r2,r2,-1
802155a4:	288a703a 	and	r5,r5,r2
802155a8:	003f6306 	br	80215338 <__reset+0xfa1f5338>
802155ac:	147ff604 	addi	r17,r2,-40
802155b0:	3462983a 	sll	r17,r6,r17
802155b4:	0011883a 	mov	r8,zero
802155b8:	003f4406 	br	802152cc <__reset+0xfa1f52cc>
802155bc:	3009883a 	mov	r4,r6
802155c0:	d9800215 	stw	r6,8(sp)
802155c4:	da400115 	stw	r9,4(sp)
802155c8:	da800015 	stw	r10,0(sp)
802155cc:	02061740 	call	80206174 <__clzsi2>
802155d0:	10800804 	addi	r2,r2,32
802155d4:	da800017 	ldw	r10,0(sp)
802155d8:	da400117 	ldw	r9,4(sp)
802155dc:	d9800217 	ldw	r6,8(sp)
802155e0:	003f3006 	br	802152a4 <__reset+0xfa1f52a4>
802155e4:	143ff604 	addi	r16,r2,-40
802155e8:	9c20983a 	sll	r16,r19,r16
802155ec:	0029883a 	mov	r20,zero
802155f0:	003f1606 	br	8021524c <__reset+0xfa1f524c>
802155f4:	d9800215 	stw	r6,8(sp)
802155f8:	d9c00015 	stw	r7,0(sp)
802155fc:	da400115 	stw	r9,4(sp)
80215600:	02061740 	call	80206174 <__clzsi2>
80215604:	10800804 	addi	r2,r2,32
80215608:	da400117 	ldw	r9,4(sp)
8021560c:	d9c00017 	ldw	r7,0(sp)
80215610:	d9800217 	ldw	r6,8(sp)
80215614:	003f0306 	br	80215224 <__reset+0xfa1f5224>
80215618:	00c00044 	movi	r3,1
8021561c:	1947c83a 	sub	r3,r3,r5
80215620:	00800e04 	movi	r2,56
80215624:	10feda16 	blt	r2,r3,80215190 <__reset+0xfa1f5190>
80215628:	008007c4 	movi	r2,31
8021562c:	10c01b16 	blt	r2,r3,8021569c <__muldf3+0x678>
80215630:	00800804 	movi	r2,32
80215634:	10c5c83a 	sub	r2,r2,r3
80215638:	888a983a 	sll	r5,r17,r2
8021563c:	40c8d83a 	srl	r4,r8,r3
80215640:	4084983a 	sll	r2,r8,r2
80215644:	88e2d83a 	srl	r17,r17,r3
80215648:	2906b03a 	or	r3,r5,r4
8021564c:	1004c03a 	cmpne	r2,r2,zero
80215650:	1886b03a 	or	r3,r3,r2
80215654:	188001cc 	andi	r2,r3,7
80215658:	10000726 	beq	r2,zero,80215678 <__muldf3+0x654>
8021565c:	188003cc 	andi	r2,r3,15
80215660:	01000104 	movi	r4,4
80215664:	11000426 	beq	r2,r4,80215678 <__muldf3+0x654>
80215668:	1805883a 	mov	r2,r3
8021566c:	10c00104 	addi	r3,r2,4
80215670:	1885803a 	cmpltu	r2,r3,r2
80215674:	88a3883a 	add	r17,r17,r2
80215678:	8880202c 	andhi	r2,r17,128
8021567c:	10001c26 	beq	r2,zero,802156f0 <__muldf3+0x6cc>
80215680:	b02b883a 	mov	r21,r22
80215684:	00800044 	movi	r2,1
80215688:	000b883a 	mov	r5,zero
8021568c:	0029883a 	mov	r20,zero
80215690:	003ec306 	br	802151a0 <__reset+0xfa1f51a0>
80215694:	5805883a 	mov	r2,r11
80215698:	003f9906 	br	80215500 <__reset+0xfa1f5500>
8021569c:	00bff844 	movi	r2,-31
802156a0:	1145c83a 	sub	r2,r2,r5
802156a4:	8888d83a 	srl	r4,r17,r2
802156a8:	00800804 	movi	r2,32
802156ac:	18801a26 	beq	r3,r2,80215718 <__muldf3+0x6f4>
802156b0:	00801004 	movi	r2,64
802156b4:	10c5c83a 	sub	r2,r2,r3
802156b8:	8884983a 	sll	r2,r17,r2
802156bc:	1204b03a 	or	r2,r2,r8
802156c0:	1004c03a 	cmpne	r2,r2,zero
802156c4:	2084b03a 	or	r2,r4,r2
802156c8:	144001cc 	andi	r17,r2,7
802156cc:	88000d1e 	bne	r17,zero,80215704 <__muldf3+0x6e0>
802156d0:	000b883a 	mov	r5,zero
802156d4:	1028d0fa 	srli	r20,r2,3
802156d8:	b02b883a 	mov	r21,r22
802156dc:	0005883a 	mov	r2,zero
802156e0:	a468b03a 	or	r20,r20,r17
802156e4:	003eae06 	br	802151a0 <__reset+0xfa1f51a0>
802156e8:	1007883a 	mov	r3,r2
802156ec:	0023883a 	mov	r17,zero
802156f0:	880a927a 	slli	r5,r17,9
802156f4:	1805883a 	mov	r2,r3
802156f8:	8822977a 	slli	r17,r17,29
802156fc:	280ad33a 	srli	r5,r5,12
80215700:	003ff406 	br	802156d4 <__reset+0xfa1f56d4>
80215704:	10c003cc 	andi	r3,r2,15
80215708:	01000104 	movi	r4,4
8021570c:	193ff626 	beq	r3,r4,802156e8 <__reset+0xfa1f56e8>
80215710:	0023883a 	mov	r17,zero
80215714:	003fd506 	br	8021566c <__reset+0xfa1f566c>
80215718:	0005883a 	mov	r2,zero
8021571c:	003fe706 	br	802156bc <__reset+0xfa1f56bc>
80215720:	00800434 	movhi	r2,16
80215724:	89400234 	orhi	r5,r17,8
80215728:	10bfffc4 	addi	r2,r2,-1
8021572c:	b02b883a 	mov	r21,r22
80215730:	288a703a 	and	r5,r5,r2
80215734:	4029883a 	mov	r20,r8
80215738:	003eff06 	br	80215338 <__reset+0xfa1f5338>

8021573c <__subdf3>:
8021573c:	02000434 	movhi	r8,16
80215740:	423fffc4 	addi	r8,r8,-1
80215744:	defffb04 	addi	sp,sp,-20
80215748:	2a14703a 	and	r10,r5,r8
8021574c:	3812d53a 	srli	r9,r7,20
80215750:	3a10703a 	and	r8,r7,r8
80215754:	2006d77a 	srli	r3,r4,29
80215758:	3004d77a 	srli	r2,r6,29
8021575c:	dc000015 	stw	r16,0(sp)
80215760:	501490fa 	slli	r10,r10,3
80215764:	2820d53a 	srli	r16,r5,20
80215768:	401090fa 	slli	r8,r8,3
8021576c:	dc800215 	stw	r18,8(sp)
80215770:	dc400115 	stw	r17,4(sp)
80215774:	dfc00415 	stw	ra,16(sp)
80215778:	202290fa 	slli	r17,r4,3
8021577c:	dcc00315 	stw	r19,12(sp)
80215780:	4a41ffcc 	andi	r9,r9,2047
80215784:	0101ffc4 	movi	r4,2047
80215788:	2824d7fa 	srli	r18,r5,31
8021578c:	8401ffcc 	andi	r16,r16,2047
80215790:	50c6b03a 	or	r3,r10,r3
80215794:	380ed7fa 	srli	r7,r7,31
80215798:	408ab03a 	or	r5,r8,r2
8021579c:	300c90fa 	slli	r6,r6,3
802157a0:	49009626 	beq	r9,r4,802159fc <__subdf3+0x2c0>
802157a4:	39c0005c 	xori	r7,r7,1
802157a8:	8245c83a 	sub	r2,r16,r9
802157ac:	3c807426 	beq	r7,r18,80215980 <__subdf3+0x244>
802157b0:	0080af0e 	bge	zero,r2,80215a70 <__subdf3+0x334>
802157b4:	48002a1e 	bne	r9,zero,80215860 <__subdf3+0x124>
802157b8:	2988b03a 	or	r4,r5,r6
802157bc:	20009a1e 	bne	r4,zero,80215a28 <__subdf3+0x2ec>
802157c0:	888001cc 	andi	r2,r17,7
802157c4:	10000726 	beq	r2,zero,802157e4 <__subdf3+0xa8>
802157c8:	888003cc 	andi	r2,r17,15
802157cc:	01000104 	movi	r4,4
802157d0:	11000426 	beq	r2,r4,802157e4 <__subdf3+0xa8>
802157d4:	890b883a 	add	r5,r17,r4
802157d8:	2c63803a 	cmpltu	r17,r5,r17
802157dc:	1c47883a 	add	r3,r3,r17
802157e0:	2823883a 	mov	r17,r5
802157e4:	1880202c 	andhi	r2,r3,128
802157e8:	10005926 	beq	r2,zero,80215950 <__subdf3+0x214>
802157ec:	84000044 	addi	r16,r16,1
802157f0:	0081ffc4 	movi	r2,2047
802157f4:	8080be26 	beq	r16,r2,80215af0 <__subdf3+0x3b4>
802157f8:	017fe034 	movhi	r5,65408
802157fc:	297fffc4 	addi	r5,r5,-1
80215800:	1946703a 	and	r3,r3,r5
80215804:	1804977a 	slli	r2,r3,29
80215808:	1806927a 	slli	r3,r3,9
8021580c:	8822d0fa 	srli	r17,r17,3
80215810:	8401ffcc 	andi	r16,r16,2047
80215814:	180ad33a 	srli	r5,r3,12
80215818:	9100004c 	andi	r4,r18,1
8021581c:	1444b03a 	or	r2,r2,r17
80215820:	80c1ffcc 	andi	r3,r16,2047
80215824:	1820953a 	slli	r16,r3,20
80215828:	20c03fcc 	andi	r3,r4,255
8021582c:	180897fa 	slli	r4,r3,31
80215830:	00c00434 	movhi	r3,16
80215834:	18ffffc4 	addi	r3,r3,-1
80215838:	28c6703a 	and	r3,r5,r3
8021583c:	1c06b03a 	or	r3,r3,r16
80215840:	1906b03a 	or	r3,r3,r4
80215844:	dfc00417 	ldw	ra,16(sp)
80215848:	dcc00317 	ldw	r19,12(sp)
8021584c:	dc800217 	ldw	r18,8(sp)
80215850:	dc400117 	ldw	r17,4(sp)
80215854:	dc000017 	ldw	r16,0(sp)
80215858:	dec00504 	addi	sp,sp,20
8021585c:	f800283a 	ret
80215860:	0101ffc4 	movi	r4,2047
80215864:	813fd626 	beq	r16,r4,802157c0 <__reset+0xfa1f57c0>
80215868:	29402034 	orhi	r5,r5,128
8021586c:	01000e04 	movi	r4,56
80215870:	2080a316 	blt	r4,r2,80215b00 <__subdf3+0x3c4>
80215874:	010007c4 	movi	r4,31
80215878:	2080c616 	blt	r4,r2,80215b94 <__subdf3+0x458>
8021587c:	01000804 	movi	r4,32
80215880:	2089c83a 	sub	r4,r4,r2
80215884:	2910983a 	sll	r8,r5,r4
80215888:	308ed83a 	srl	r7,r6,r2
8021588c:	3108983a 	sll	r4,r6,r4
80215890:	2884d83a 	srl	r2,r5,r2
80215894:	41ccb03a 	or	r6,r8,r7
80215898:	2008c03a 	cmpne	r4,r4,zero
8021589c:	310cb03a 	or	r6,r6,r4
802158a0:	898dc83a 	sub	r6,r17,r6
802158a4:	89a3803a 	cmpltu	r17,r17,r6
802158a8:	1887c83a 	sub	r3,r3,r2
802158ac:	1c47c83a 	sub	r3,r3,r17
802158b0:	3023883a 	mov	r17,r6
802158b4:	1880202c 	andhi	r2,r3,128
802158b8:	10002326 	beq	r2,zero,80215948 <__subdf3+0x20c>
802158bc:	04c02034 	movhi	r19,128
802158c0:	9cffffc4 	addi	r19,r19,-1
802158c4:	1ce6703a 	and	r19,r3,r19
802158c8:	98007a26 	beq	r19,zero,80215ab4 <__subdf3+0x378>
802158cc:	9809883a 	mov	r4,r19
802158d0:	02061740 	call	80206174 <__clzsi2>
802158d4:	113ffe04 	addi	r4,r2,-8
802158d8:	00c007c4 	movi	r3,31
802158dc:	19007b16 	blt	r3,r4,80215acc <__subdf3+0x390>
802158e0:	00800804 	movi	r2,32
802158e4:	1105c83a 	sub	r2,r2,r4
802158e8:	8884d83a 	srl	r2,r17,r2
802158ec:	9906983a 	sll	r3,r19,r4
802158f0:	8922983a 	sll	r17,r17,r4
802158f4:	10c4b03a 	or	r2,r2,r3
802158f8:	24007816 	blt	r4,r16,80215adc <__subdf3+0x3a0>
802158fc:	2421c83a 	sub	r16,r4,r16
80215900:	80c00044 	addi	r3,r16,1
80215904:	010007c4 	movi	r4,31
80215908:	20c09516 	blt	r4,r3,80215b60 <__subdf3+0x424>
8021590c:	01400804 	movi	r5,32
80215910:	28cbc83a 	sub	r5,r5,r3
80215914:	88c8d83a 	srl	r4,r17,r3
80215918:	8962983a 	sll	r17,r17,r5
8021591c:	114a983a 	sll	r5,r2,r5
80215920:	10c6d83a 	srl	r3,r2,r3
80215924:	8804c03a 	cmpne	r2,r17,zero
80215928:	290ab03a 	or	r5,r5,r4
8021592c:	28a2b03a 	or	r17,r5,r2
80215930:	0021883a 	mov	r16,zero
80215934:	003fa206 	br	802157c0 <__reset+0xfa1f57c0>
80215938:	2090b03a 	or	r8,r4,r2
8021593c:	40018e26 	beq	r8,zero,80215f78 <__subdf3+0x83c>
80215940:	1007883a 	mov	r3,r2
80215944:	2023883a 	mov	r17,r4
80215948:	888001cc 	andi	r2,r17,7
8021594c:	103f9e1e 	bne	r2,zero,802157c8 <__reset+0xfa1f57c8>
80215950:	1804977a 	slli	r2,r3,29
80215954:	8822d0fa 	srli	r17,r17,3
80215958:	1810d0fa 	srli	r8,r3,3
8021595c:	9100004c 	andi	r4,r18,1
80215960:	1444b03a 	or	r2,r2,r17
80215964:	00c1ffc4 	movi	r3,2047
80215968:	80c02826 	beq	r16,r3,80215a0c <__subdf3+0x2d0>
8021596c:	01400434 	movhi	r5,16
80215970:	297fffc4 	addi	r5,r5,-1
80215974:	80e0703a 	and	r16,r16,r3
80215978:	414a703a 	and	r5,r8,r5
8021597c:	003fa806 	br	80215820 <__reset+0xfa1f5820>
80215980:	0080630e 	bge	zero,r2,80215b10 <__subdf3+0x3d4>
80215984:	48003026 	beq	r9,zero,80215a48 <__subdf3+0x30c>
80215988:	0101ffc4 	movi	r4,2047
8021598c:	813f8c26 	beq	r16,r4,802157c0 <__reset+0xfa1f57c0>
80215990:	29402034 	orhi	r5,r5,128
80215994:	01000e04 	movi	r4,56
80215998:	2080a90e 	bge	r4,r2,80215c40 <__subdf3+0x504>
8021599c:	298cb03a 	or	r6,r5,r6
802159a0:	3012c03a 	cmpne	r9,r6,zero
802159a4:	0005883a 	mov	r2,zero
802159a8:	4c53883a 	add	r9,r9,r17
802159ac:	4c63803a 	cmpltu	r17,r9,r17
802159b0:	10c7883a 	add	r3,r2,r3
802159b4:	88c7883a 	add	r3,r17,r3
802159b8:	4823883a 	mov	r17,r9
802159bc:	1880202c 	andhi	r2,r3,128
802159c0:	1000d026 	beq	r2,zero,80215d04 <__subdf3+0x5c8>
802159c4:	84000044 	addi	r16,r16,1
802159c8:	0081ffc4 	movi	r2,2047
802159cc:	8080fe26 	beq	r16,r2,80215dc8 <__subdf3+0x68c>
802159d0:	00bfe034 	movhi	r2,65408
802159d4:	10bfffc4 	addi	r2,r2,-1
802159d8:	1886703a 	and	r3,r3,r2
802159dc:	880ad07a 	srli	r5,r17,1
802159e0:	180497fa 	slli	r2,r3,31
802159e4:	8900004c 	andi	r4,r17,1
802159e8:	2922b03a 	or	r17,r5,r4
802159ec:	1806d07a 	srli	r3,r3,1
802159f0:	1462b03a 	or	r17,r2,r17
802159f4:	3825883a 	mov	r18,r7
802159f8:	003f7106 	br	802157c0 <__reset+0xfa1f57c0>
802159fc:	2984b03a 	or	r2,r5,r6
80215a00:	103f6826 	beq	r2,zero,802157a4 <__reset+0xfa1f57a4>
80215a04:	39c03fcc 	andi	r7,r7,255
80215a08:	003f6706 	br	802157a8 <__reset+0xfa1f57a8>
80215a0c:	4086b03a 	or	r3,r8,r2
80215a10:	18015226 	beq	r3,zero,80215f5c <__subdf3+0x820>
80215a14:	00c00434 	movhi	r3,16
80215a18:	41400234 	orhi	r5,r8,8
80215a1c:	18ffffc4 	addi	r3,r3,-1
80215a20:	28ca703a 	and	r5,r5,r3
80215a24:	003f7e06 	br	80215820 <__reset+0xfa1f5820>
80215a28:	10bfffc4 	addi	r2,r2,-1
80215a2c:	1000491e 	bne	r2,zero,80215b54 <__subdf3+0x418>
80215a30:	898fc83a 	sub	r7,r17,r6
80215a34:	89e3803a 	cmpltu	r17,r17,r7
80215a38:	1947c83a 	sub	r3,r3,r5
80215a3c:	1c47c83a 	sub	r3,r3,r17
80215a40:	3823883a 	mov	r17,r7
80215a44:	003f9b06 	br	802158b4 <__reset+0xfa1f58b4>
80215a48:	2988b03a 	or	r4,r5,r6
80215a4c:	203f5c26 	beq	r4,zero,802157c0 <__reset+0xfa1f57c0>
80215a50:	10bfffc4 	addi	r2,r2,-1
80215a54:	1000931e 	bne	r2,zero,80215ca4 <__subdf3+0x568>
80215a58:	898d883a 	add	r6,r17,r6
80215a5c:	3463803a 	cmpltu	r17,r6,r17
80215a60:	1947883a 	add	r3,r3,r5
80215a64:	88c7883a 	add	r3,r17,r3
80215a68:	3023883a 	mov	r17,r6
80215a6c:	003fd306 	br	802159bc <__reset+0xfa1f59bc>
80215a70:	1000541e 	bne	r2,zero,80215bc4 <__subdf3+0x488>
80215a74:	80800044 	addi	r2,r16,1
80215a78:	1081ffcc 	andi	r2,r2,2047
80215a7c:	01000044 	movi	r4,1
80215a80:	2080a20e 	bge	r4,r2,80215d0c <__subdf3+0x5d0>
80215a84:	8989c83a 	sub	r4,r17,r6
80215a88:	8905803a 	cmpltu	r2,r17,r4
80215a8c:	1967c83a 	sub	r19,r3,r5
80215a90:	98a7c83a 	sub	r19,r19,r2
80215a94:	9880202c 	andhi	r2,r19,128
80215a98:	10006326 	beq	r2,zero,80215c28 <__subdf3+0x4ec>
80215a9c:	3463c83a 	sub	r17,r6,r17
80215aa0:	28c7c83a 	sub	r3,r5,r3
80215aa4:	344d803a 	cmpltu	r6,r6,r17
80215aa8:	19a7c83a 	sub	r19,r3,r6
80215aac:	3825883a 	mov	r18,r7
80215ab0:	983f861e 	bne	r19,zero,802158cc <__reset+0xfa1f58cc>
80215ab4:	8809883a 	mov	r4,r17
80215ab8:	02061740 	call	80206174 <__clzsi2>
80215abc:	10800804 	addi	r2,r2,32
80215ac0:	113ffe04 	addi	r4,r2,-8
80215ac4:	00c007c4 	movi	r3,31
80215ac8:	193f850e 	bge	r3,r4,802158e0 <__reset+0xfa1f58e0>
80215acc:	10bff604 	addi	r2,r2,-40
80215ad0:	8884983a 	sll	r2,r17,r2
80215ad4:	0023883a 	mov	r17,zero
80215ad8:	243f880e 	bge	r4,r16,802158fc <__reset+0xfa1f58fc>
80215adc:	00ffe034 	movhi	r3,65408
80215ae0:	18ffffc4 	addi	r3,r3,-1
80215ae4:	8121c83a 	sub	r16,r16,r4
80215ae8:	10c6703a 	and	r3,r2,r3
80215aec:	003f3406 	br	802157c0 <__reset+0xfa1f57c0>
80215af0:	9100004c 	andi	r4,r18,1
80215af4:	000b883a 	mov	r5,zero
80215af8:	0005883a 	mov	r2,zero
80215afc:	003f4806 	br	80215820 <__reset+0xfa1f5820>
80215b00:	298cb03a 	or	r6,r5,r6
80215b04:	300cc03a 	cmpne	r6,r6,zero
80215b08:	0005883a 	mov	r2,zero
80215b0c:	003f6406 	br	802158a0 <__reset+0xfa1f58a0>
80215b10:	10009a1e 	bne	r2,zero,80215d7c <__subdf3+0x640>
80215b14:	82400044 	addi	r9,r16,1
80215b18:	4881ffcc 	andi	r2,r9,2047
80215b1c:	02800044 	movi	r10,1
80215b20:	5080670e 	bge	r10,r2,80215cc0 <__subdf3+0x584>
80215b24:	0081ffc4 	movi	r2,2047
80215b28:	4880af26 	beq	r9,r2,80215de8 <__subdf3+0x6ac>
80215b2c:	898d883a 	add	r6,r17,r6
80215b30:	1945883a 	add	r2,r3,r5
80215b34:	3447803a 	cmpltu	r3,r6,r17
80215b38:	1887883a 	add	r3,r3,r2
80215b3c:	182297fa 	slli	r17,r3,31
80215b40:	300cd07a 	srli	r6,r6,1
80215b44:	1806d07a 	srli	r3,r3,1
80215b48:	4821883a 	mov	r16,r9
80215b4c:	89a2b03a 	or	r17,r17,r6
80215b50:	003f1b06 	br	802157c0 <__reset+0xfa1f57c0>
80215b54:	0101ffc4 	movi	r4,2047
80215b58:	813f441e 	bne	r16,r4,8021586c <__reset+0xfa1f586c>
80215b5c:	003f1806 	br	802157c0 <__reset+0xfa1f57c0>
80215b60:	843ff844 	addi	r16,r16,-31
80215b64:	01400804 	movi	r5,32
80215b68:	1408d83a 	srl	r4,r2,r16
80215b6c:	19405026 	beq	r3,r5,80215cb0 <__subdf3+0x574>
80215b70:	01401004 	movi	r5,64
80215b74:	28c7c83a 	sub	r3,r5,r3
80215b78:	10c4983a 	sll	r2,r2,r3
80215b7c:	88a2b03a 	or	r17,r17,r2
80215b80:	8822c03a 	cmpne	r17,r17,zero
80215b84:	2462b03a 	or	r17,r4,r17
80215b88:	0007883a 	mov	r3,zero
80215b8c:	0021883a 	mov	r16,zero
80215b90:	003f6d06 	br	80215948 <__reset+0xfa1f5948>
80215b94:	11fff804 	addi	r7,r2,-32
80215b98:	01000804 	movi	r4,32
80215b9c:	29ced83a 	srl	r7,r5,r7
80215ba0:	11004526 	beq	r2,r4,80215cb8 <__subdf3+0x57c>
80215ba4:	01001004 	movi	r4,64
80215ba8:	2089c83a 	sub	r4,r4,r2
80215bac:	2904983a 	sll	r2,r5,r4
80215bb0:	118cb03a 	or	r6,r2,r6
80215bb4:	300cc03a 	cmpne	r6,r6,zero
80215bb8:	398cb03a 	or	r6,r7,r6
80215bbc:	0005883a 	mov	r2,zero
80215bc0:	003f3706 	br	802158a0 <__reset+0xfa1f58a0>
80215bc4:	80002a26 	beq	r16,zero,80215c70 <__subdf3+0x534>
80215bc8:	0101ffc4 	movi	r4,2047
80215bcc:	49006626 	beq	r9,r4,80215d68 <__subdf3+0x62c>
80215bd0:	0085c83a 	sub	r2,zero,r2
80215bd4:	18c02034 	orhi	r3,r3,128
80215bd8:	01000e04 	movi	r4,56
80215bdc:	20807e16 	blt	r4,r2,80215dd8 <__subdf3+0x69c>
80215be0:	010007c4 	movi	r4,31
80215be4:	2080e716 	blt	r4,r2,80215f84 <__subdf3+0x848>
80215be8:	01000804 	movi	r4,32
80215bec:	2089c83a 	sub	r4,r4,r2
80215bf0:	1914983a 	sll	r10,r3,r4
80215bf4:	8890d83a 	srl	r8,r17,r2
80215bf8:	8908983a 	sll	r4,r17,r4
80215bfc:	1884d83a 	srl	r2,r3,r2
80215c00:	5222b03a 	or	r17,r10,r8
80215c04:	2006c03a 	cmpne	r3,r4,zero
80215c08:	88e2b03a 	or	r17,r17,r3
80215c0c:	3463c83a 	sub	r17,r6,r17
80215c10:	2885c83a 	sub	r2,r5,r2
80215c14:	344d803a 	cmpltu	r6,r6,r17
80215c18:	1187c83a 	sub	r3,r2,r6
80215c1c:	4821883a 	mov	r16,r9
80215c20:	3825883a 	mov	r18,r7
80215c24:	003f2306 	br	802158b4 <__reset+0xfa1f58b4>
80215c28:	24d0b03a 	or	r8,r4,r19
80215c2c:	40001b1e 	bne	r8,zero,80215c9c <__subdf3+0x560>
80215c30:	0005883a 	mov	r2,zero
80215c34:	0009883a 	mov	r4,zero
80215c38:	0021883a 	mov	r16,zero
80215c3c:	003f4906 	br	80215964 <__reset+0xfa1f5964>
80215c40:	010007c4 	movi	r4,31
80215c44:	20803a16 	blt	r4,r2,80215d30 <__subdf3+0x5f4>
80215c48:	01000804 	movi	r4,32
80215c4c:	2089c83a 	sub	r4,r4,r2
80215c50:	2912983a 	sll	r9,r5,r4
80215c54:	3090d83a 	srl	r8,r6,r2
80215c58:	3108983a 	sll	r4,r6,r4
80215c5c:	2884d83a 	srl	r2,r5,r2
80215c60:	4a12b03a 	or	r9,r9,r8
80215c64:	2008c03a 	cmpne	r4,r4,zero
80215c68:	4912b03a 	or	r9,r9,r4
80215c6c:	003f4e06 	br	802159a8 <__reset+0xfa1f59a8>
80215c70:	1c48b03a 	or	r4,r3,r17
80215c74:	20003c26 	beq	r4,zero,80215d68 <__subdf3+0x62c>
80215c78:	0084303a 	nor	r2,zero,r2
80215c7c:	1000381e 	bne	r2,zero,80215d60 <__subdf3+0x624>
80215c80:	3463c83a 	sub	r17,r6,r17
80215c84:	28c5c83a 	sub	r2,r5,r3
80215c88:	344d803a 	cmpltu	r6,r6,r17
80215c8c:	1187c83a 	sub	r3,r2,r6
80215c90:	4821883a 	mov	r16,r9
80215c94:	3825883a 	mov	r18,r7
80215c98:	003f0606 	br	802158b4 <__reset+0xfa1f58b4>
80215c9c:	2023883a 	mov	r17,r4
80215ca0:	003f0906 	br	802158c8 <__reset+0xfa1f58c8>
80215ca4:	0101ffc4 	movi	r4,2047
80215ca8:	813f3a1e 	bne	r16,r4,80215994 <__reset+0xfa1f5994>
80215cac:	003ec406 	br	802157c0 <__reset+0xfa1f57c0>
80215cb0:	0005883a 	mov	r2,zero
80215cb4:	003fb106 	br	80215b7c <__reset+0xfa1f5b7c>
80215cb8:	0005883a 	mov	r2,zero
80215cbc:	003fbc06 	br	80215bb0 <__reset+0xfa1f5bb0>
80215cc0:	1c44b03a 	or	r2,r3,r17
80215cc4:	80008e1e 	bne	r16,zero,80215f00 <__subdf3+0x7c4>
80215cc8:	1000c826 	beq	r2,zero,80215fec <__subdf3+0x8b0>
80215ccc:	2984b03a 	or	r2,r5,r6
80215cd0:	103ebb26 	beq	r2,zero,802157c0 <__reset+0xfa1f57c0>
80215cd4:	8989883a 	add	r4,r17,r6
80215cd8:	1945883a 	add	r2,r3,r5
80215cdc:	2447803a 	cmpltu	r3,r4,r17
80215ce0:	1887883a 	add	r3,r3,r2
80215ce4:	1880202c 	andhi	r2,r3,128
80215ce8:	2023883a 	mov	r17,r4
80215cec:	103f1626 	beq	r2,zero,80215948 <__reset+0xfa1f5948>
80215cf0:	00bfe034 	movhi	r2,65408
80215cf4:	10bfffc4 	addi	r2,r2,-1
80215cf8:	5021883a 	mov	r16,r10
80215cfc:	1886703a 	and	r3,r3,r2
80215d00:	003eaf06 	br	802157c0 <__reset+0xfa1f57c0>
80215d04:	3825883a 	mov	r18,r7
80215d08:	003f0f06 	br	80215948 <__reset+0xfa1f5948>
80215d0c:	1c44b03a 	or	r2,r3,r17
80215d10:	8000251e 	bne	r16,zero,80215da8 <__subdf3+0x66c>
80215d14:	1000661e 	bne	r2,zero,80215eb0 <__subdf3+0x774>
80215d18:	2990b03a 	or	r8,r5,r6
80215d1c:	40009626 	beq	r8,zero,80215f78 <__subdf3+0x83c>
80215d20:	2807883a 	mov	r3,r5
80215d24:	3023883a 	mov	r17,r6
80215d28:	3825883a 	mov	r18,r7
80215d2c:	003ea406 	br	802157c0 <__reset+0xfa1f57c0>
80215d30:	127ff804 	addi	r9,r2,-32
80215d34:	01000804 	movi	r4,32
80215d38:	2a52d83a 	srl	r9,r5,r9
80215d3c:	11008c26 	beq	r2,r4,80215f70 <__subdf3+0x834>
80215d40:	01001004 	movi	r4,64
80215d44:	2085c83a 	sub	r2,r4,r2
80215d48:	2884983a 	sll	r2,r5,r2
80215d4c:	118cb03a 	or	r6,r2,r6
80215d50:	300cc03a 	cmpne	r6,r6,zero
80215d54:	4992b03a 	or	r9,r9,r6
80215d58:	0005883a 	mov	r2,zero
80215d5c:	003f1206 	br	802159a8 <__reset+0xfa1f59a8>
80215d60:	0101ffc4 	movi	r4,2047
80215d64:	493f9c1e 	bne	r9,r4,80215bd8 <__reset+0xfa1f5bd8>
80215d68:	2807883a 	mov	r3,r5
80215d6c:	3023883a 	mov	r17,r6
80215d70:	4821883a 	mov	r16,r9
80215d74:	3825883a 	mov	r18,r7
80215d78:	003e9106 	br	802157c0 <__reset+0xfa1f57c0>
80215d7c:	80001f1e 	bne	r16,zero,80215dfc <__subdf3+0x6c0>
80215d80:	1c48b03a 	or	r4,r3,r17
80215d84:	20005a26 	beq	r4,zero,80215ef0 <__subdf3+0x7b4>
80215d88:	0084303a 	nor	r2,zero,r2
80215d8c:	1000561e 	bne	r2,zero,80215ee8 <__subdf3+0x7ac>
80215d90:	89a3883a 	add	r17,r17,r6
80215d94:	1945883a 	add	r2,r3,r5
80215d98:	898d803a 	cmpltu	r6,r17,r6
80215d9c:	3087883a 	add	r3,r6,r2
80215da0:	4821883a 	mov	r16,r9
80215da4:	003f0506 	br	802159bc <__reset+0xfa1f59bc>
80215da8:	10002b1e 	bne	r2,zero,80215e58 <__subdf3+0x71c>
80215dac:	2984b03a 	or	r2,r5,r6
80215db0:	10008026 	beq	r2,zero,80215fb4 <__subdf3+0x878>
80215db4:	2807883a 	mov	r3,r5
80215db8:	3023883a 	mov	r17,r6
80215dbc:	3825883a 	mov	r18,r7
80215dc0:	0401ffc4 	movi	r16,2047
80215dc4:	003e7e06 	br	802157c0 <__reset+0xfa1f57c0>
80215dc8:	3809883a 	mov	r4,r7
80215dcc:	0011883a 	mov	r8,zero
80215dd0:	0005883a 	mov	r2,zero
80215dd4:	003ee306 	br	80215964 <__reset+0xfa1f5964>
80215dd8:	1c62b03a 	or	r17,r3,r17
80215ddc:	8822c03a 	cmpne	r17,r17,zero
80215de0:	0005883a 	mov	r2,zero
80215de4:	003f8906 	br	80215c0c <__reset+0xfa1f5c0c>
80215de8:	3809883a 	mov	r4,r7
80215dec:	4821883a 	mov	r16,r9
80215df0:	0011883a 	mov	r8,zero
80215df4:	0005883a 	mov	r2,zero
80215df8:	003eda06 	br	80215964 <__reset+0xfa1f5964>
80215dfc:	0101ffc4 	movi	r4,2047
80215e00:	49003b26 	beq	r9,r4,80215ef0 <__subdf3+0x7b4>
80215e04:	0085c83a 	sub	r2,zero,r2
80215e08:	18c02034 	orhi	r3,r3,128
80215e0c:	01000e04 	movi	r4,56
80215e10:	20806e16 	blt	r4,r2,80215fcc <__subdf3+0x890>
80215e14:	010007c4 	movi	r4,31
80215e18:	20807716 	blt	r4,r2,80215ff8 <__subdf3+0x8bc>
80215e1c:	01000804 	movi	r4,32
80215e20:	2089c83a 	sub	r4,r4,r2
80215e24:	1914983a 	sll	r10,r3,r4
80215e28:	8890d83a 	srl	r8,r17,r2
80215e2c:	8908983a 	sll	r4,r17,r4
80215e30:	1884d83a 	srl	r2,r3,r2
80215e34:	5222b03a 	or	r17,r10,r8
80215e38:	2006c03a 	cmpne	r3,r4,zero
80215e3c:	88e2b03a 	or	r17,r17,r3
80215e40:	89a3883a 	add	r17,r17,r6
80215e44:	1145883a 	add	r2,r2,r5
80215e48:	898d803a 	cmpltu	r6,r17,r6
80215e4c:	3087883a 	add	r3,r6,r2
80215e50:	4821883a 	mov	r16,r9
80215e54:	003ed906 	br	802159bc <__reset+0xfa1f59bc>
80215e58:	2984b03a 	or	r2,r5,r6
80215e5c:	10004226 	beq	r2,zero,80215f68 <__subdf3+0x82c>
80215e60:	1808d0fa 	srli	r4,r3,3
80215e64:	8822d0fa 	srli	r17,r17,3
80215e68:	1806977a 	slli	r3,r3,29
80215e6c:	2080022c 	andhi	r2,r4,8
80215e70:	1c62b03a 	or	r17,r3,r17
80215e74:	10000826 	beq	r2,zero,80215e98 <__subdf3+0x75c>
80215e78:	2812d0fa 	srli	r9,r5,3
80215e7c:	4880022c 	andhi	r2,r9,8
80215e80:	1000051e 	bne	r2,zero,80215e98 <__subdf3+0x75c>
80215e84:	300cd0fa 	srli	r6,r6,3
80215e88:	2804977a 	slli	r2,r5,29
80215e8c:	4809883a 	mov	r4,r9
80215e90:	3825883a 	mov	r18,r7
80215e94:	11a2b03a 	or	r17,r2,r6
80215e98:	8806d77a 	srli	r3,r17,29
80215e9c:	200890fa 	slli	r4,r4,3
80215ea0:	882290fa 	slli	r17,r17,3
80215ea4:	0401ffc4 	movi	r16,2047
80215ea8:	1906b03a 	or	r3,r3,r4
80215eac:	003e4406 	br	802157c0 <__reset+0xfa1f57c0>
80215eb0:	2984b03a 	or	r2,r5,r6
80215eb4:	103e4226 	beq	r2,zero,802157c0 <__reset+0xfa1f57c0>
80215eb8:	8989c83a 	sub	r4,r17,r6
80215ebc:	8911803a 	cmpltu	r8,r17,r4
80215ec0:	1945c83a 	sub	r2,r3,r5
80215ec4:	1205c83a 	sub	r2,r2,r8
80215ec8:	1200202c 	andhi	r8,r2,128
80215ecc:	403e9a26 	beq	r8,zero,80215938 <__reset+0xfa1f5938>
80215ed0:	3463c83a 	sub	r17,r6,r17
80215ed4:	28c5c83a 	sub	r2,r5,r3
80215ed8:	344d803a 	cmpltu	r6,r6,r17
80215edc:	1187c83a 	sub	r3,r2,r6
80215ee0:	3825883a 	mov	r18,r7
80215ee4:	003e3606 	br	802157c0 <__reset+0xfa1f57c0>
80215ee8:	0101ffc4 	movi	r4,2047
80215eec:	493fc71e 	bne	r9,r4,80215e0c <__reset+0xfa1f5e0c>
80215ef0:	2807883a 	mov	r3,r5
80215ef4:	3023883a 	mov	r17,r6
80215ef8:	4821883a 	mov	r16,r9
80215efc:	003e3006 	br	802157c0 <__reset+0xfa1f57c0>
80215f00:	10003626 	beq	r2,zero,80215fdc <__subdf3+0x8a0>
80215f04:	2984b03a 	or	r2,r5,r6
80215f08:	10001726 	beq	r2,zero,80215f68 <__subdf3+0x82c>
80215f0c:	1808d0fa 	srli	r4,r3,3
80215f10:	8822d0fa 	srli	r17,r17,3
80215f14:	1806977a 	slli	r3,r3,29
80215f18:	2080022c 	andhi	r2,r4,8
80215f1c:	1c62b03a 	or	r17,r3,r17
80215f20:	10000726 	beq	r2,zero,80215f40 <__subdf3+0x804>
80215f24:	2812d0fa 	srli	r9,r5,3
80215f28:	4880022c 	andhi	r2,r9,8
80215f2c:	1000041e 	bne	r2,zero,80215f40 <__subdf3+0x804>
80215f30:	300cd0fa 	srli	r6,r6,3
80215f34:	2804977a 	slli	r2,r5,29
80215f38:	4809883a 	mov	r4,r9
80215f3c:	11a2b03a 	or	r17,r2,r6
80215f40:	8806d77a 	srli	r3,r17,29
80215f44:	200890fa 	slli	r4,r4,3
80215f48:	882290fa 	slli	r17,r17,3
80215f4c:	3825883a 	mov	r18,r7
80215f50:	1906b03a 	or	r3,r3,r4
80215f54:	0401ffc4 	movi	r16,2047
80215f58:	003e1906 	br	802157c0 <__reset+0xfa1f57c0>
80215f5c:	000b883a 	mov	r5,zero
80215f60:	0005883a 	mov	r2,zero
80215f64:	003e2e06 	br	80215820 <__reset+0xfa1f5820>
80215f68:	0401ffc4 	movi	r16,2047
80215f6c:	003e1406 	br	802157c0 <__reset+0xfa1f57c0>
80215f70:	0005883a 	mov	r2,zero
80215f74:	003f7506 	br	80215d4c <__reset+0xfa1f5d4c>
80215f78:	0005883a 	mov	r2,zero
80215f7c:	0009883a 	mov	r4,zero
80215f80:	003e7806 	br	80215964 <__reset+0xfa1f5964>
80215f84:	123ff804 	addi	r8,r2,-32
80215f88:	01000804 	movi	r4,32
80215f8c:	1a10d83a 	srl	r8,r3,r8
80215f90:	11002526 	beq	r2,r4,80216028 <__subdf3+0x8ec>
80215f94:	01001004 	movi	r4,64
80215f98:	2085c83a 	sub	r2,r4,r2
80215f9c:	1884983a 	sll	r2,r3,r2
80215fa0:	1444b03a 	or	r2,r2,r17
80215fa4:	1004c03a 	cmpne	r2,r2,zero
80215fa8:	40a2b03a 	or	r17,r8,r2
80215fac:	0005883a 	mov	r2,zero
80215fb0:	003f1606 	br	80215c0c <__reset+0xfa1f5c0c>
80215fb4:	02000434 	movhi	r8,16
80215fb8:	0009883a 	mov	r4,zero
80215fbc:	423fffc4 	addi	r8,r8,-1
80215fc0:	00bfffc4 	movi	r2,-1
80215fc4:	0401ffc4 	movi	r16,2047
80215fc8:	003e6606 	br	80215964 <__reset+0xfa1f5964>
80215fcc:	1c62b03a 	or	r17,r3,r17
80215fd0:	8822c03a 	cmpne	r17,r17,zero
80215fd4:	0005883a 	mov	r2,zero
80215fd8:	003f9906 	br	80215e40 <__reset+0xfa1f5e40>
80215fdc:	2807883a 	mov	r3,r5
80215fe0:	3023883a 	mov	r17,r6
80215fe4:	0401ffc4 	movi	r16,2047
80215fe8:	003df506 	br	802157c0 <__reset+0xfa1f57c0>
80215fec:	2807883a 	mov	r3,r5
80215ff0:	3023883a 	mov	r17,r6
80215ff4:	003df206 	br	802157c0 <__reset+0xfa1f57c0>
80215ff8:	123ff804 	addi	r8,r2,-32
80215ffc:	01000804 	movi	r4,32
80216000:	1a10d83a 	srl	r8,r3,r8
80216004:	11000a26 	beq	r2,r4,80216030 <__subdf3+0x8f4>
80216008:	01001004 	movi	r4,64
8021600c:	2085c83a 	sub	r2,r4,r2
80216010:	1884983a 	sll	r2,r3,r2
80216014:	1444b03a 	or	r2,r2,r17
80216018:	1004c03a 	cmpne	r2,r2,zero
8021601c:	40a2b03a 	or	r17,r8,r2
80216020:	0005883a 	mov	r2,zero
80216024:	003f8606 	br	80215e40 <__reset+0xfa1f5e40>
80216028:	0005883a 	mov	r2,zero
8021602c:	003fdc06 	br	80215fa0 <__reset+0xfa1f5fa0>
80216030:	0005883a 	mov	r2,zero
80216034:	003ff706 	br	80216014 <__reset+0xfa1f6014>

80216038 <__fixdfsi>:
80216038:	280cd53a 	srli	r6,r5,20
8021603c:	00c00434 	movhi	r3,16
80216040:	18ffffc4 	addi	r3,r3,-1
80216044:	3181ffcc 	andi	r6,r6,2047
80216048:	01c0ff84 	movi	r7,1022
8021604c:	28c6703a 	and	r3,r5,r3
80216050:	280ad7fa 	srli	r5,r5,31
80216054:	3980120e 	bge	r7,r6,802160a0 <__fixdfsi+0x68>
80216058:	00810744 	movi	r2,1053
8021605c:	11800c16 	blt	r2,r6,80216090 <__fixdfsi+0x58>
80216060:	00810cc4 	movi	r2,1075
80216064:	1185c83a 	sub	r2,r2,r6
80216068:	01c007c4 	movi	r7,31
8021606c:	18c00434 	orhi	r3,r3,16
80216070:	38800d16 	blt	r7,r2,802160a8 <__fixdfsi+0x70>
80216074:	31befb44 	addi	r6,r6,-1043
80216078:	2084d83a 	srl	r2,r4,r2
8021607c:	1986983a 	sll	r3,r3,r6
80216080:	1884b03a 	or	r2,r3,r2
80216084:	28000726 	beq	r5,zero,802160a4 <__fixdfsi+0x6c>
80216088:	0085c83a 	sub	r2,zero,r2
8021608c:	f800283a 	ret
80216090:	00a00034 	movhi	r2,32768
80216094:	10bfffc4 	addi	r2,r2,-1
80216098:	2885883a 	add	r2,r5,r2
8021609c:	f800283a 	ret
802160a0:	0005883a 	mov	r2,zero
802160a4:	f800283a 	ret
802160a8:	008104c4 	movi	r2,1043
802160ac:	1185c83a 	sub	r2,r2,r6
802160b0:	1884d83a 	srl	r2,r3,r2
802160b4:	003ff306 	br	80216084 <__reset+0xfa1f6084>

802160b8 <__floatsidf>:
802160b8:	defffd04 	addi	sp,sp,-12
802160bc:	dfc00215 	stw	ra,8(sp)
802160c0:	dc400115 	stw	r17,4(sp)
802160c4:	dc000015 	stw	r16,0(sp)
802160c8:	20002b26 	beq	r4,zero,80216178 <__floatsidf+0xc0>
802160cc:	2023883a 	mov	r17,r4
802160d0:	2020d7fa 	srli	r16,r4,31
802160d4:	20002d16 	blt	r4,zero,8021618c <__floatsidf+0xd4>
802160d8:	8809883a 	mov	r4,r17
802160dc:	02061740 	call	80206174 <__clzsi2>
802160e0:	01410784 	movi	r5,1054
802160e4:	288bc83a 	sub	r5,r5,r2
802160e8:	01010cc4 	movi	r4,1075
802160ec:	2149c83a 	sub	r4,r4,r5
802160f0:	00c007c4 	movi	r3,31
802160f4:	1900160e 	bge	r3,r4,80216150 <__floatsidf+0x98>
802160f8:	00c104c4 	movi	r3,1043
802160fc:	1947c83a 	sub	r3,r3,r5
80216100:	88c6983a 	sll	r3,r17,r3
80216104:	00800434 	movhi	r2,16
80216108:	10bfffc4 	addi	r2,r2,-1
8021610c:	1886703a 	and	r3,r3,r2
80216110:	2941ffcc 	andi	r5,r5,2047
80216114:	800d883a 	mov	r6,r16
80216118:	0005883a 	mov	r2,zero
8021611c:	280a953a 	slli	r5,r5,20
80216120:	31803fcc 	andi	r6,r6,255
80216124:	01000434 	movhi	r4,16
80216128:	300c97fa 	slli	r6,r6,31
8021612c:	213fffc4 	addi	r4,r4,-1
80216130:	1906703a 	and	r3,r3,r4
80216134:	1946b03a 	or	r3,r3,r5
80216138:	1986b03a 	or	r3,r3,r6
8021613c:	dfc00217 	ldw	ra,8(sp)
80216140:	dc400117 	ldw	r17,4(sp)
80216144:	dc000017 	ldw	r16,0(sp)
80216148:	dec00304 	addi	sp,sp,12
8021614c:	f800283a 	ret
80216150:	00c002c4 	movi	r3,11
80216154:	1887c83a 	sub	r3,r3,r2
80216158:	88c6d83a 	srl	r3,r17,r3
8021615c:	8904983a 	sll	r2,r17,r4
80216160:	01000434 	movhi	r4,16
80216164:	213fffc4 	addi	r4,r4,-1
80216168:	2941ffcc 	andi	r5,r5,2047
8021616c:	1906703a 	and	r3,r3,r4
80216170:	800d883a 	mov	r6,r16
80216174:	003fe906 	br	8021611c <__reset+0xfa1f611c>
80216178:	000d883a 	mov	r6,zero
8021617c:	000b883a 	mov	r5,zero
80216180:	0007883a 	mov	r3,zero
80216184:	0005883a 	mov	r2,zero
80216188:	003fe406 	br	8021611c <__reset+0xfa1f611c>
8021618c:	0123c83a 	sub	r17,zero,r4
80216190:	003fd106 	br	802160d8 <__reset+0xfa1f60d8>

80216194 <__floatunsidf>:
80216194:	defffe04 	addi	sp,sp,-8
80216198:	dc000015 	stw	r16,0(sp)
8021619c:	dfc00115 	stw	ra,4(sp)
802161a0:	2021883a 	mov	r16,r4
802161a4:	20002226 	beq	r4,zero,80216230 <__floatunsidf+0x9c>
802161a8:	02061740 	call	80206174 <__clzsi2>
802161ac:	01010784 	movi	r4,1054
802161b0:	2089c83a 	sub	r4,r4,r2
802161b4:	01810cc4 	movi	r6,1075
802161b8:	310dc83a 	sub	r6,r6,r4
802161bc:	00c007c4 	movi	r3,31
802161c0:	1980120e 	bge	r3,r6,8021620c <__floatunsidf+0x78>
802161c4:	00c104c4 	movi	r3,1043
802161c8:	1907c83a 	sub	r3,r3,r4
802161cc:	80ca983a 	sll	r5,r16,r3
802161d0:	00800434 	movhi	r2,16
802161d4:	10bfffc4 	addi	r2,r2,-1
802161d8:	2101ffcc 	andi	r4,r4,2047
802161dc:	0021883a 	mov	r16,zero
802161e0:	288a703a 	and	r5,r5,r2
802161e4:	2008953a 	slli	r4,r4,20
802161e8:	00c00434 	movhi	r3,16
802161ec:	18ffffc4 	addi	r3,r3,-1
802161f0:	28c6703a 	and	r3,r5,r3
802161f4:	8005883a 	mov	r2,r16
802161f8:	1906b03a 	or	r3,r3,r4
802161fc:	dfc00117 	ldw	ra,4(sp)
80216200:	dc000017 	ldw	r16,0(sp)
80216204:	dec00204 	addi	sp,sp,8
80216208:	f800283a 	ret
8021620c:	00c002c4 	movi	r3,11
80216210:	188bc83a 	sub	r5,r3,r2
80216214:	814ad83a 	srl	r5,r16,r5
80216218:	00c00434 	movhi	r3,16
8021621c:	18ffffc4 	addi	r3,r3,-1
80216220:	81a0983a 	sll	r16,r16,r6
80216224:	2101ffcc 	andi	r4,r4,2047
80216228:	28ca703a 	and	r5,r5,r3
8021622c:	003fed06 	br	802161e4 <__reset+0xfa1f61e4>
80216230:	0009883a 	mov	r4,zero
80216234:	000b883a 	mov	r5,zero
80216238:	003fea06 	br	802161e4 <__reset+0xfa1f61e4>

8021623c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
8021623c:	defffb04 	addi	sp,sp,-20
80216240:	df000415 	stw	fp,16(sp)
80216244:	df000404 	addi	fp,sp,16
80216248:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
8021624c:	008000c4 	movi	r2,3
80216250:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
80216254:	e0fffd17 	ldw	r3,-12(fp)
80216258:	008003f4 	movhi	r2,15
8021625c:	10909004 	addi	r2,r2,16960
80216260:	1887383a 	mul	r3,r3,r2
80216264:	00817db4 	movhi	r2,1526
80216268:	10b84004 	addi	r2,r2,-7936
8021626c:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
80216270:	00a00034 	movhi	r2,32768
80216274:	10bfffc4 	addi	r2,r2,-1
80216278:	10c5203a 	divu	r2,r2,r3
8021627c:	e0ffff17 	ldw	r3,-4(fp)
80216280:	1885203a 	divu	r2,r3,r2
80216284:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
80216288:	e0bffe17 	ldw	r2,-8(fp)
8021628c:	10002526 	beq	r2,zero,80216324 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
80216290:	e03ffc15 	stw	zero,-16(fp)
80216294:	00001406 	br	802162e8 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
80216298:	00a00034 	movhi	r2,32768
8021629c:	10bfffc4 	addi	r2,r2,-1
802162a0:	10bfffc4 	addi	r2,r2,-1
802162a4:	103ffe1e 	bne	r2,zero,802162a0 <__reset+0xfa1f62a0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
802162a8:	e0fffd17 	ldw	r3,-12(fp)
802162ac:	008003f4 	movhi	r2,15
802162b0:	10909004 	addi	r2,r2,16960
802162b4:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
802162b8:	00817db4 	movhi	r2,1526
802162bc:	10b84004 	addi	r2,r2,-7936
802162c0:	10c7203a 	divu	r3,r2,r3
802162c4:	00a00034 	movhi	r2,32768
802162c8:	10bfffc4 	addi	r2,r2,-1
802162cc:	10c5203a 	divu	r2,r2,r3
802162d0:	e0ffff17 	ldw	r3,-4(fp)
802162d4:	1885c83a 	sub	r2,r3,r2
802162d8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
802162dc:	e0bffc17 	ldw	r2,-16(fp)
802162e0:	10800044 	addi	r2,r2,1
802162e4:	e0bffc15 	stw	r2,-16(fp)
802162e8:	e0fffc17 	ldw	r3,-16(fp)
802162ec:	e0bffe17 	ldw	r2,-8(fp)
802162f0:	18bfe916 	blt	r3,r2,80216298 <__reset+0xfa1f6298>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
802162f4:	e0fffd17 	ldw	r3,-12(fp)
802162f8:	008003f4 	movhi	r2,15
802162fc:	10909004 	addi	r2,r2,16960
80216300:	1887383a 	mul	r3,r3,r2
80216304:	00817db4 	movhi	r2,1526
80216308:	10b84004 	addi	r2,r2,-7936
8021630c:	10c7203a 	divu	r3,r2,r3
80216310:	e0bfff17 	ldw	r2,-4(fp)
80216314:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80216318:	10bfffc4 	addi	r2,r2,-1
8021631c:	103ffe1e 	bne	r2,zero,80216318 <__reset+0xfa1f6318>
80216320:	00000b06 	br	80216350 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80216324:	e0fffd17 	ldw	r3,-12(fp)
80216328:	008003f4 	movhi	r2,15
8021632c:	10909004 	addi	r2,r2,16960
80216330:	1887383a 	mul	r3,r3,r2
80216334:	00817db4 	movhi	r2,1526
80216338:	10b84004 	addi	r2,r2,-7936
8021633c:	10c7203a 	divu	r3,r2,r3
80216340:	e0bfff17 	ldw	r2,-4(fp)
80216344:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80216348:	10bfffc4 	addi	r2,r2,-1
8021634c:	00bffe16 	blt	zero,r2,80216348 <__reset+0xfa1f6348>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
80216350:	0005883a 	mov	r2,zero
}
80216354:	e037883a 	mov	sp,fp
80216358:	df000017 	ldw	fp,0(sp)
8021635c:	dec00104 	addi	sp,sp,4
80216360:	f800283a 	ret

80216364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216364:	defffe04 	addi	sp,sp,-8
80216368:	dfc00115 	stw	ra,4(sp)
8021636c:	df000015 	stw	fp,0(sp)
80216370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216374:	d0a00c17 	ldw	r2,-32720(gp)
80216378:	10000326 	beq	r2,zero,80216388 <alt_get_errno+0x24>
8021637c:	d0a00c17 	ldw	r2,-32720(gp)
80216380:	103ee83a 	callr	r2
80216384:	00000106 	br	8021638c <alt_get_errno+0x28>
80216388:	d0a02304 	addi	r2,gp,-32628
}
8021638c:	e037883a 	mov	sp,fp
80216390:	dfc00117 	ldw	ra,4(sp)
80216394:	df000017 	ldw	fp,0(sp)
80216398:	dec00204 	addi	sp,sp,8
8021639c:	f800283a 	ret

802163a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
802163a0:	defffb04 	addi	sp,sp,-20
802163a4:	dfc00415 	stw	ra,16(sp)
802163a8:	df000315 	stw	fp,12(sp)
802163ac:	df000304 	addi	fp,sp,12
802163b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
802163b4:	e0bfff17 	ldw	r2,-4(fp)
802163b8:	10000616 	blt	r2,zero,802163d4 <close+0x34>
802163bc:	e0bfff17 	ldw	r2,-4(fp)
802163c0:	10c00324 	muli	r3,r2,12
802163c4:	00a008b4 	movhi	r2,32802
802163c8:	10b74304 	addi	r2,r2,-8948
802163cc:	1885883a 	add	r2,r3,r2
802163d0:	00000106 	br	802163d8 <close+0x38>
802163d4:	0005883a 	mov	r2,zero
802163d8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
802163dc:	e0bffd17 	ldw	r2,-12(fp)
802163e0:	10001926 	beq	r2,zero,80216448 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
802163e4:	e0bffd17 	ldw	r2,-12(fp)
802163e8:	10800017 	ldw	r2,0(r2)
802163ec:	10800417 	ldw	r2,16(r2)
802163f0:	10000626 	beq	r2,zero,8021640c <close+0x6c>
802163f4:	e0bffd17 	ldw	r2,-12(fp)
802163f8:	10800017 	ldw	r2,0(r2)
802163fc:	10800417 	ldw	r2,16(r2)
80216400:	e13ffd17 	ldw	r4,-12(fp)
80216404:	103ee83a 	callr	r2
80216408:	00000106 	br	80216410 <close+0x70>
8021640c:	0005883a 	mov	r2,zero
80216410:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
80216414:	e13fff17 	ldw	r4,-4(fp)
80216418:	02169940 	call	80216994 <alt_release_fd>
    if (rval < 0)
8021641c:	e0bffe17 	ldw	r2,-8(fp)
80216420:	1000070e 	bge	r2,zero,80216440 <close+0xa0>
    {
      ALT_ERRNO = -rval;
80216424:	02163640 	call	80216364 <alt_get_errno>
80216428:	1007883a 	mov	r3,r2
8021642c:	e0bffe17 	ldw	r2,-8(fp)
80216430:	0085c83a 	sub	r2,zero,r2
80216434:	18800015 	stw	r2,0(r3)
      return -1;
80216438:	00bfffc4 	movi	r2,-1
8021643c:	00000706 	br	8021645c <close+0xbc>
    }
    return 0;
80216440:	0005883a 	mov	r2,zero
80216444:	00000506 	br	8021645c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
80216448:	02163640 	call	80216364 <alt_get_errno>
8021644c:	1007883a 	mov	r3,r2
80216450:	00801444 	movi	r2,81
80216454:	18800015 	stw	r2,0(r3)
    return -1;
80216458:	00bfffc4 	movi	r2,-1
  }
}
8021645c:	e037883a 	mov	sp,fp
80216460:	dfc00117 	ldw	ra,4(sp)
80216464:	df000017 	ldw	fp,0(sp)
80216468:	dec00204 	addi	sp,sp,8
8021646c:	f800283a 	ret

80216470 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
80216470:	deffff04 	addi	sp,sp,-4
80216474:	df000015 	stw	fp,0(sp)
80216478:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8021647c:	0001883a 	nop
80216480:	e037883a 	mov	sp,fp
80216484:	df000017 	ldw	fp,0(sp)
80216488:	dec00104 	addi	sp,sp,4
8021648c:	f800283a 	ret

80216490 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
80216490:	defffc04 	addi	sp,sp,-16
80216494:	df000315 	stw	fp,12(sp)
80216498:	df000304 	addi	fp,sp,12
8021649c:	e13ffd15 	stw	r4,-12(fp)
802164a0:	e17ffe15 	stw	r5,-8(fp)
802164a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
802164a8:	e0bfff17 	ldw	r2,-4(fp)
}
802164ac:	e037883a 	mov	sp,fp
802164b0:	df000017 	ldw	fp,0(sp)
802164b4:	dec00104 	addi	sp,sp,4
802164b8:	f800283a 	ret

802164bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802164bc:	defffe04 	addi	sp,sp,-8
802164c0:	dfc00115 	stw	ra,4(sp)
802164c4:	df000015 	stw	fp,0(sp)
802164c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802164cc:	d0a00c17 	ldw	r2,-32720(gp)
802164d0:	10000326 	beq	r2,zero,802164e0 <alt_get_errno+0x24>
802164d4:	d0a00c17 	ldw	r2,-32720(gp)
802164d8:	103ee83a 	callr	r2
802164dc:	00000106 	br	802164e4 <alt_get_errno+0x28>
802164e0:	d0a02304 	addi	r2,gp,-32628
}
802164e4:	e037883a 	mov	sp,fp
802164e8:	dfc00117 	ldw	ra,4(sp)
802164ec:	df000017 	ldw	fp,0(sp)
802164f0:	dec00204 	addi	sp,sp,8
802164f4:	f800283a 	ret

802164f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
802164f8:	defffb04 	addi	sp,sp,-20
802164fc:	dfc00415 	stw	ra,16(sp)
80216500:	df000315 	stw	fp,12(sp)
80216504:	df000304 	addi	fp,sp,12
80216508:	e13ffe15 	stw	r4,-8(fp)
8021650c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80216510:	e0bffe17 	ldw	r2,-8(fp)
80216514:	10000616 	blt	r2,zero,80216530 <fstat+0x38>
80216518:	e0bffe17 	ldw	r2,-8(fp)
8021651c:	10c00324 	muli	r3,r2,12
80216520:	00a008b4 	movhi	r2,32802
80216524:	10b74304 	addi	r2,r2,-8948
80216528:	1885883a 	add	r2,r3,r2
8021652c:	00000106 	br	80216534 <fstat+0x3c>
80216530:	0005883a 	mov	r2,zero
80216534:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
80216538:	e0bffd17 	ldw	r2,-12(fp)
8021653c:	10001026 	beq	r2,zero,80216580 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
80216540:	e0bffd17 	ldw	r2,-12(fp)
80216544:	10800017 	ldw	r2,0(r2)
80216548:	10800817 	ldw	r2,32(r2)
8021654c:	10000726 	beq	r2,zero,8021656c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
80216550:	e0bffd17 	ldw	r2,-12(fp)
80216554:	10800017 	ldw	r2,0(r2)
80216558:	10800817 	ldw	r2,32(r2)
8021655c:	e17fff17 	ldw	r5,-4(fp)
80216560:	e13ffd17 	ldw	r4,-12(fp)
80216564:	103ee83a 	callr	r2
80216568:	00000a06 	br	80216594 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
8021656c:	e0bfff17 	ldw	r2,-4(fp)
80216570:	00c80004 	movi	r3,8192
80216574:	10c00115 	stw	r3,4(r2)
      return 0;
80216578:	0005883a 	mov	r2,zero
8021657c:	00000506 	br	80216594 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80216580:	02164bc0 	call	802164bc <alt_get_errno>
80216584:	1007883a 	mov	r3,r2
80216588:	00801444 	movi	r2,81
8021658c:	18800015 	stw	r2,0(r3)
    return -1;
80216590:	00bfffc4 	movi	r2,-1
  }
}
80216594:	e037883a 	mov	sp,fp
80216598:	dfc00117 	ldw	ra,4(sp)
8021659c:	df000017 	ldw	fp,0(sp)
802165a0:	dec00204 	addi	sp,sp,8
802165a4:	f800283a 	ret

802165a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802165a8:	defffe04 	addi	sp,sp,-8
802165ac:	dfc00115 	stw	ra,4(sp)
802165b0:	df000015 	stw	fp,0(sp)
802165b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802165b8:	d0a00c17 	ldw	r2,-32720(gp)
802165bc:	10000326 	beq	r2,zero,802165cc <alt_get_errno+0x24>
802165c0:	d0a00c17 	ldw	r2,-32720(gp)
802165c4:	103ee83a 	callr	r2
802165c8:	00000106 	br	802165d0 <alt_get_errno+0x28>
802165cc:	d0a02304 	addi	r2,gp,-32628
}
802165d0:	e037883a 	mov	sp,fp
802165d4:	dfc00117 	ldw	ra,4(sp)
802165d8:	df000017 	ldw	fp,0(sp)
802165dc:	dec00204 	addi	sp,sp,8
802165e0:	f800283a 	ret

802165e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
802165e4:	deffed04 	addi	sp,sp,-76
802165e8:	dfc01215 	stw	ra,72(sp)
802165ec:	df001115 	stw	fp,68(sp)
802165f0:	df001104 	addi	fp,sp,68
802165f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802165f8:	e0bfff17 	ldw	r2,-4(fp)
802165fc:	10000616 	blt	r2,zero,80216618 <isatty+0x34>
80216600:	e0bfff17 	ldw	r2,-4(fp)
80216604:	10c00324 	muli	r3,r2,12
80216608:	00a008b4 	movhi	r2,32802
8021660c:	10b74304 	addi	r2,r2,-8948
80216610:	1885883a 	add	r2,r3,r2
80216614:	00000106 	br	8021661c <isatty+0x38>
80216618:	0005883a 	mov	r2,zero
8021661c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
80216620:	e0bfef17 	ldw	r2,-68(fp)
80216624:	10000e26 	beq	r2,zero,80216660 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
80216628:	e0bfef17 	ldw	r2,-68(fp)
8021662c:	10800017 	ldw	r2,0(r2)
80216630:	10800817 	ldw	r2,32(r2)
80216634:	1000021e 	bne	r2,zero,80216640 <isatty+0x5c>
    {
      return 1;
80216638:	00800044 	movi	r2,1
8021663c:	00000d06 	br	80216674 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
80216640:	e0bff004 	addi	r2,fp,-64
80216644:	100b883a 	mov	r5,r2
80216648:	e13fff17 	ldw	r4,-4(fp)
8021664c:	02164f80 	call	802164f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
80216650:	e0bff117 	ldw	r2,-60(fp)
80216654:	10880020 	cmpeqi	r2,r2,8192
80216658:	10803fcc 	andi	r2,r2,255
8021665c:	00000506 	br	80216674 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80216660:	02165a80 	call	802165a8 <alt_get_errno>
80216664:	1007883a 	mov	r3,r2
80216668:	00801444 	movi	r2,81
8021666c:	18800015 	stw	r2,0(r3)
    return 0;
80216670:	0005883a 	mov	r2,zero
  }
}
80216674:	e037883a 	mov	sp,fp
80216678:	dfc00117 	ldw	ra,4(sp)
8021667c:	df000017 	ldw	fp,0(sp)
80216680:	dec00204 	addi	sp,sp,8
80216684:	f800283a 	ret

80216688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216688:	defffe04 	addi	sp,sp,-8
8021668c:	dfc00115 	stw	ra,4(sp)
80216690:	df000015 	stw	fp,0(sp)
80216694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216698:	d0a00c17 	ldw	r2,-32720(gp)
8021669c:	10000326 	beq	r2,zero,802166ac <alt_get_errno+0x24>
802166a0:	d0a00c17 	ldw	r2,-32720(gp)
802166a4:	103ee83a 	callr	r2
802166a8:	00000106 	br	802166b0 <alt_get_errno+0x28>
802166ac:	d0a02304 	addi	r2,gp,-32628
}
802166b0:	e037883a 	mov	sp,fp
802166b4:	dfc00117 	ldw	ra,4(sp)
802166b8:	df000017 	ldw	fp,0(sp)
802166bc:	dec00204 	addi	sp,sp,8
802166c0:	f800283a 	ret

802166c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
802166c4:	defff904 	addi	sp,sp,-28
802166c8:	dfc00615 	stw	ra,24(sp)
802166cc:	df000515 	stw	fp,20(sp)
802166d0:	df000504 	addi	fp,sp,20
802166d4:	e13ffd15 	stw	r4,-12(fp)
802166d8:	e17ffe15 	stw	r5,-8(fp)
802166dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
802166e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802166e4:	e0bffd17 	ldw	r2,-12(fp)
802166e8:	10000616 	blt	r2,zero,80216704 <lseek+0x40>
802166ec:	e0bffd17 	ldw	r2,-12(fp)
802166f0:	10c00324 	muli	r3,r2,12
802166f4:	00a008b4 	movhi	r2,32802
802166f8:	10b74304 	addi	r2,r2,-8948
802166fc:	1885883a 	add	r2,r3,r2
80216700:	00000106 	br	80216708 <lseek+0x44>
80216704:	0005883a 	mov	r2,zero
80216708:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
8021670c:	e0bffc17 	ldw	r2,-16(fp)
80216710:	10001026 	beq	r2,zero,80216754 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
80216714:	e0bffc17 	ldw	r2,-16(fp)
80216718:	10800017 	ldw	r2,0(r2)
8021671c:	10800717 	ldw	r2,28(r2)
80216720:	10000926 	beq	r2,zero,80216748 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
80216724:	e0bffc17 	ldw	r2,-16(fp)
80216728:	10800017 	ldw	r2,0(r2)
8021672c:	10800717 	ldw	r2,28(r2)
80216730:	e1bfff17 	ldw	r6,-4(fp)
80216734:	e17ffe17 	ldw	r5,-8(fp)
80216738:	e13ffc17 	ldw	r4,-16(fp)
8021673c:	103ee83a 	callr	r2
80216740:	e0bffb15 	stw	r2,-20(fp)
80216744:	00000506 	br	8021675c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
80216748:	00bfde84 	movi	r2,-134
8021674c:	e0bffb15 	stw	r2,-20(fp)
80216750:	00000206 	br	8021675c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
80216754:	00bfebc4 	movi	r2,-81
80216758:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
8021675c:	e0bffb17 	ldw	r2,-20(fp)
80216760:	1000070e 	bge	r2,zero,80216780 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
80216764:	02166880 	call	80216688 <alt_get_errno>
80216768:	1007883a 	mov	r3,r2
8021676c:	e0bffb17 	ldw	r2,-20(fp)
80216770:	0085c83a 	sub	r2,zero,r2
80216774:	18800015 	stw	r2,0(r3)
    rc = -1;
80216778:	00bfffc4 	movi	r2,-1
8021677c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
80216780:	e0bffb17 	ldw	r2,-20(fp)
}
80216784:	e037883a 	mov	sp,fp
80216788:	dfc00117 	ldw	ra,4(sp)
8021678c:	df000017 	ldw	fp,0(sp)
80216790:	dec00204 	addi	sp,sp,8
80216794:	f800283a 	ret

80216798 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
80216798:	defffd04 	addi	sp,sp,-12
8021679c:	dfc00215 	stw	ra,8(sp)
802167a0:	df000115 	stw	fp,4(sp)
802167a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
802167a8:	0009883a 	mov	r4,zero
802167ac:	0216de40 	call	80216de4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
802167b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
802167b4:	0216e1c0 	call	80216e1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
802167b8:	01a008b4 	movhi	r6,32802
802167bc:	31b46904 	addi	r6,r6,-11868
802167c0:	016008b4 	movhi	r5,32802
802167c4:	29746904 	addi	r5,r5,-11868
802167c8:	012008b4 	movhi	r4,32802
802167cc:	21346904 	addi	r4,r4,-11868
802167d0:	021a9c00 	call	8021a9c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
802167d4:	021a50c0 	call	8021a50c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
802167d8:	012008b4 	movhi	r4,32802
802167dc:	21295b04 	addi	r4,r4,-23188
802167e0:	021b1640 	call	8021b164 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
802167e4:	d0a02417 	ldw	r2,-32624(gp)
802167e8:	d0e02517 	ldw	r3,-32620(gp)
802167ec:	d1202617 	ldw	r4,-32616(gp)
802167f0:	200d883a 	mov	r6,r4
802167f4:	180b883a 	mov	r5,r3
802167f8:	1009883a 	mov	r4,r2
802167fc:	02050940 	call	80205094 <main>
80216800:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
80216804:	01000044 	movi	r4,1
80216808:	02163a00 	call	802163a0 <close>
  exit (result);
8021680c:	e13fff17 	ldw	r4,-4(fp)
80216810:	021b1780 	call	8021b178 <exit>

80216814 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
80216814:	defffe04 	addi	sp,sp,-8
80216818:	df000115 	stw	fp,4(sp)
8021681c:	df000104 	addi	fp,sp,4
80216820:	e13fff15 	stw	r4,-4(fp)
}
80216824:	0001883a 	nop
80216828:	e037883a 	mov	sp,fp
8021682c:	df000017 	ldw	fp,0(sp)
80216830:	dec00104 	addi	sp,sp,4
80216834:	f800283a 	ret

80216838 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
80216838:	defffe04 	addi	sp,sp,-8
8021683c:	df000115 	stw	fp,4(sp)
80216840:	df000104 	addi	fp,sp,4
80216844:	e13fff15 	stw	r4,-4(fp)
}
80216848:	0001883a 	nop
8021684c:	e037883a 	mov	sp,fp
80216850:	df000017 	ldw	fp,0(sp)
80216854:	dec00104 	addi	sp,sp,4
80216858:	f800283a 	ret

8021685c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021685c:	defffe04 	addi	sp,sp,-8
80216860:	dfc00115 	stw	ra,4(sp)
80216864:	df000015 	stw	fp,0(sp)
80216868:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021686c:	d0a00c17 	ldw	r2,-32720(gp)
80216870:	10000326 	beq	r2,zero,80216880 <alt_get_errno+0x24>
80216874:	d0a00c17 	ldw	r2,-32720(gp)
80216878:	103ee83a 	callr	r2
8021687c:	00000106 	br	80216884 <alt_get_errno+0x28>
80216880:	d0a02304 	addi	r2,gp,-32628
}
80216884:	e037883a 	mov	sp,fp
80216888:	dfc00117 	ldw	ra,4(sp)
8021688c:	df000017 	ldw	fp,0(sp)
80216890:	dec00204 	addi	sp,sp,8
80216894:	f800283a 	ret

80216898 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
80216898:	defff904 	addi	sp,sp,-28
8021689c:	dfc00615 	stw	ra,24(sp)
802168a0:	df000515 	stw	fp,20(sp)
802168a4:	df000504 	addi	fp,sp,20
802168a8:	e13ffd15 	stw	r4,-12(fp)
802168ac:	e17ffe15 	stw	r5,-8(fp)
802168b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802168b4:	e0bffd17 	ldw	r2,-12(fp)
802168b8:	10000616 	blt	r2,zero,802168d4 <read+0x3c>
802168bc:	e0bffd17 	ldw	r2,-12(fp)
802168c0:	10c00324 	muli	r3,r2,12
802168c4:	00a008b4 	movhi	r2,32802
802168c8:	10b74304 	addi	r2,r2,-8948
802168cc:	1885883a 	add	r2,r3,r2
802168d0:	00000106 	br	802168d8 <read+0x40>
802168d4:	0005883a 	mov	r2,zero
802168d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
802168dc:	e0bffb17 	ldw	r2,-20(fp)
802168e0:	10002226 	beq	r2,zero,8021696c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
802168e4:	e0bffb17 	ldw	r2,-20(fp)
802168e8:	10800217 	ldw	r2,8(r2)
802168ec:	108000cc 	andi	r2,r2,3
802168f0:	10800060 	cmpeqi	r2,r2,1
802168f4:	1000181e 	bne	r2,zero,80216958 <read+0xc0>
        (fd->dev->read))
802168f8:	e0bffb17 	ldw	r2,-20(fp)
802168fc:	10800017 	ldw	r2,0(r2)
80216900:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
80216904:	10001426 	beq	r2,zero,80216958 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
80216908:	e0bffb17 	ldw	r2,-20(fp)
8021690c:	10800017 	ldw	r2,0(r2)
80216910:	10800517 	ldw	r2,20(r2)
80216914:	e0ffff17 	ldw	r3,-4(fp)
80216918:	180d883a 	mov	r6,r3
8021691c:	e17ffe17 	ldw	r5,-8(fp)
80216920:	e13ffb17 	ldw	r4,-20(fp)
80216924:	103ee83a 	callr	r2
80216928:	e0bffc15 	stw	r2,-16(fp)
8021692c:	e0bffc17 	ldw	r2,-16(fp)
80216930:	1000070e 	bge	r2,zero,80216950 <read+0xb8>
        {
          ALT_ERRNO = -rval;
80216934:	021685c0 	call	8021685c <alt_get_errno>
80216938:	1007883a 	mov	r3,r2
8021693c:	e0bffc17 	ldw	r2,-16(fp)
80216940:	0085c83a 	sub	r2,zero,r2
80216944:	18800015 	stw	r2,0(r3)
          return -1;
80216948:	00bfffc4 	movi	r2,-1
8021694c:	00000c06 	br	80216980 <read+0xe8>
        }
        return rval;
80216950:	e0bffc17 	ldw	r2,-16(fp)
80216954:	00000a06 	br	80216980 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
80216958:	021685c0 	call	8021685c <alt_get_errno>
8021695c:	1007883a 	mov	r3,r2
80216960:	00800344 	movi	r2,13
80216964:	18800015 	stw	r2,0(r3)
80216968:	00000406 	br	8021697c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
8021696c:	021685c0 	call	8021685c <alt_get_errno>
80216970:	1007883a 	mov	r3,r2
80216974:	00801444 	movi	r2,81
80216978:	18800015 	stw	r2,0(r3)
  }
  return -1;
8021697c:	00bfffc4 	movi	r2,-1
}
80216980:	e037883a 	mov	sp,fp
80216984:	dfc00117 	ldw	ra,4(sp)
80216988:	df000017 	ldw	fp,0(sp)
8021698c:	dec00204 	addi	sp,sp,8
80216990:	f800283a 	ret

80216994 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
80216994:	defffe04 	addi	sp,sp,-8
80216998:	df000115 	stw	fp,4(sp)
8021699c:	df000104 	addi	fp,sp,4
802169a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
802169a4:	e0bfff17 	ldw	r2,-4(fp)
802169a8:	108000d0 	cmplti	r2,r2,3
802169ac:	10000d1e 	bne	r2,zero,802169e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
802169b0:	00a008b4 	movhi	r2,32802
802169b4:	10b74304 	addi	r2,r2,-8948
802169b8:	e0ffff17 	ldw	r3,-4(fp)
802169bc:	18c00324 	muli	r3,r3,12
802169c0:	10c5883a 	add	r2,r2,r3
802169c4:	10800204 	addi	r2,r2,8
802169c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
802169cc:	00a008b4 	movhi	r2,32802
802169d0:	10b74304 	addi	r2,r2,-8948
802169d4:	e0ffff17 	ldw	r3,-4(fp)
802169d8:	18c00324 	muli	r3,r3,12
802169dc:	10c5883a 	add	r2,r2,r3
802169e0:	10000015 	stw	zero,0(r2)
  }
}
802169e4:	0001883a 	nop
802169e8:	e037883a 	mov	sp,fp
802169ec:	df000017 	ldw	fp,0(sp)
802169f0:	dec00104 	addi	sp,sp,4
802169f4:	f800283a 	ret

802169f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
802169f8:	defff904 	addi	sp,sp,-28
802169fc:	df000615 	stw	fp,24(sp)
80216a00:	df000604 	addi	fp,sp,24
80216a04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216a08:	0005303a 	rdctl	r2,status
80216a0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216a10:	e0fffe17 	ldw	r3,-8(fp)
80216a14:	00bfff84 	movi	r2,-2
80216a18:	1884703a 	and	r2,r3,r2
80216a1c:	1001703a 	wrctl	status,r2
  
  return context;
80216a20:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
80216a24:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
80216a28:	d0a00d17 	ldw	r2,-32716(gp)
80216a2c:	10c000c4 	addi	r3,r2,3
80216a30:	00bfff04 	movi	r2,-4
80216a34:	1884703a 	and	r2,r3,r2
80216a38:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
80216a3c:	d0e00d17 	ldw	r3,-32716(gp)
80216a40:	e0bfff17 	ldw	r2,-4(fp)
80216a44:	1887883a 	add	r3,r3,r2
80216a48:	00a00934 	movhi	r2,32804
80216a4c:	10800004 	addi	r2,r2,0
80216a50:	10c0062e 	bgeu	r2,r3,80216a6c <sbrk+0x74>
80216a54:	e0bffb17 	ldw	r2,-20(fp)
80216a58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216a5c:	e0bffa17 	ldw	r2,-24(fp)
80216a60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
80216a64:	00bfffc4 	movi	r2,-1
80216a68:	00000b06 	br	80216a98 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
80216a6c:	d0a00d17 	ldw	r2,-32716(gp)
80216a70:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
80216a74:	d0e00d17 	ldw	r3,-32716(gp)
80216a78:	e0bfff17 	ldw	r2,-4(fp)
80216a7c:	1885883a 	add	r2,r3,r2
80216a80:	d0a00d15 	stw	r2,-32716(gp)
80216a84:	e0bffb17 	ldw	r2,-20(fp)
80216a88:	e0bffc15 	stw	r2,-16(fp)
80216a8c:	e0bffc17 	ldw	r2,-16(fp)
80216a90:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
80216a94:	e0bffd17 	ldw	r2,-12(fp)
} 
80216a98:	e037883a 	mov	sp,fp
80216a9c:	df000017 	ldw	fp,0(sp)
80216aa0:	dec00104 	addi	sp,sp,4
80216aa4:	f800283a 	ret

80216aa8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
80216aa8:	defffa04 	addi	sp,sp,-24
80216aac:	df000515 	stw	fp,20(sp)
80216ab0:	df000504 	addi	fp,sp,20
80216ab4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216ab8:	0005303a 	rdctl	r2,status
80216abc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216ac0:	e0fffc17 	ldw	r3,-16(fp)
80216ac4:	00bfff84 	movi	r2,-2
80216ac8:	1884703a 	and	r2,r3,r2
80216acc:	1001703a 	wrctl	status,r2
  
  return context;
80216ad0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
80216ad4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
80216ad8:	e0bfff17 	ldw	r2,-4(fp)
80216adc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
80216ae0:	e0bffd17 	ldw	r2,-12(fp)
80216ae4:	10800017 	ldw	r2,0(r2)
80216ae8:	e0fffd17 	ldw	r3,-12(fp)
80216aec:	18c00117 	ldw	r3,4(r3)
80216af0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
80216af4:	e0bffd17 	ldw	r2,-12(fp)
80216af8:	10800117 	ldw	r2,4(r2)
80216afc:	e0fffd17 	ldw	r3,-12(fp)
80216b00:	18c00017 	ldw	r3,0(r3)
80216b04:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
80216b08:	e0bffd17 	ldw	r2,-12(fp)
80216b0c:	e0fffd17 	ldw	r3,-12(fp)
80216b10:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
80216b14:	e0bffd17 	ldw	r2,-12(fp)
80216b18:	e0fffd17 	ldw	r3,-12(fp)
80216b1c:	10c00015 	stw	r3,0(r2)
80216b20:	e0bffb17 	ldw	r2,-20(fp)
80216b24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216b28:	e0bffe17 	ldw	r2,-8(fp)
80216b2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
80216b30:	0001883a 	nop
80216b34:	e037883a 	mov	sp,fp
80216b38:	df000017 	ldw	fp,0(sp)
80216b3c:	dec00104 	addi	sp,sp,4
80216b40:	f800283a 	ret

80216b44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
80216b44:	defffb04 	addi	sp,sp,-20
80216b48:	dfc00415 	stw	ra,16(sp)
80216b4c:	df000315 	stw	fp,12(sp)
80216b50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
80216b54:	d0a00e17 	ldw	r2,-32712(gp)
80216b58:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
80216b5c:	d0a02817 	ldw	r2,-32608(gp)
80216b60:	10800044 	addi	r2,r2,1
80216b64:	d0a02815 	stw	r2,-32608(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80216b68:	00002e06 	br	80216c24 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
80216b6c:	e0bffd17 	ldw	r2,-12(fp)
80216b70:	10800017 	ldw	r2,0(r2)
80216b74:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
80216b78:	e0bffd17 	ldw	r2,-12(fp)
80216b7c:	10800403 	ldbu	r2,16(r2)
80216b80:	10803fcc 	andi	r2,r2,255
80216b84:	10000426 	beq	r2,zero,80216b98 <alt_tick+0x54>
80216b88:	d0a02817 	ldw	r2,-32608(gp)
80216b8c:	1000021e 	bne	r2,zero,80216b98 <alt_tick+0x54>
    {
      alarm->rollover = 0;
80216b90:	e0bffd17 	ldw	r2,-12(fp)
80216b94:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
80216b98:	e0bffd17 	ldw	r2,-12(fp)
80216b9c:	10800217 	ldw	r2,8(r2)
80216ba0:	d0e02817 	ldw	r3,-32608(gp)
80216ba4:	18801d36 	bltu	r3,r2,80216c1c <alt_tick+0xd8>
80216ba8:	e0bffd17 	ldw	r2,-12(fp)
80216bac:	10800403 	ldbu	r2,16(r2)
80216bb0:	10803fcc 	andi	r2,r2,255
80216bb4:	1000191e 	bne	r2,zero,80216c1c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
80216bb8:	e0bffd17 	ldw	r2,-12(fp)
80216bbc:	10800317 	ldw	r2,12(r2)
80216bc0:	e0fffd17 	ldw	r3,-12(fp)
80216bc4:	18c00517 	ldw	r3,20(r3)
80216bc8:	1809883a 	mov	r4,r3
80216bcc:	103ee83a 	callr	r2
80216bd0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
80216bd4:	e0bfff17 	ldw	r2,-4(fp)
80216bd8:	1000031e 	bne	r2,zero,80216be8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
80216bdc:	e13ffd17 	ldw	r4,-12(fp)
80216be0:	0216aa80 	call	80216aa8 <alt_alarm_stop>
80216be4:	00000d06 	br	80216c1c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
80216be8:	e0bffd17 	ldw	r2,-12(fp)
80216bec:	10c00217 	ldw	r3,8(r2)
80216bf0:	e0bfff17 	ldw	r2,-4(fp)
80216bf4:	1887883a 	add	r3,r3,r2
80216bf8:	e0bffd17 	ldw	r2,-12(fp)
80216bfc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
80216c00:	e0bffd17 	ldw	r2,-12(fp)
80216c04:	10c00217 	ldw	r3,8(r2)
80216c08:	d0a02817 	ldw	r2,-32608(gp)
80216c0c:	1880032e 	bgeu	r3,r2,80216c1c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80216c10:	e0bffd17 	ldw	r2,-12(fp)
80216c14:	00c00044 	movi	r3,1
80216c18:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
80216c1c:	e0bffe17 	ldw	r2,-8(fp)
80216c20:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80216c24:	e0fffd17 	ldw	r3,-12(fp)
80216c28:	d0a00e04 	addi	r2,gp,-32712
80216c2c:	18bfcf1e 	bne	r3,r2,80216b6c <__reset+0xfa1f6b6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80216c30:	0001883a 	nop
}
80216c34:	0001883a 	nop
80216c38:	e037883a 	mov	sp,fp
80216c3c:	dfc00117 	ldw	ra,4(sp)
80216c40:	df000017 	ldw	fp,0(sp)
80216c44:	dec00204 	addi	sp,sp,8
80216c48:	f800283a 	ret

80216c4c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
80216c4c:	defffd04 	addi	sp,sp,-12
80216c50:	dfc00215 	stw	ra,8(sp)
80216c54:	df000115 	stw	fp,4(sp)
80216c58:	df000104 	addi	fp,sp,4
80216c5c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
80216c60:	e13fff17 	ldw	r4,-4(fp)
80216c64:	021623c0 	call	8021623c <alt_busy_sleep>
}
80216c68:	e037883a 	mov	sp,fp
80216c6c:	dfc00117 	ldw	ra,4(sp)
80216c70:	df000017 	ldw	fp,0(sp)
80216c74:	dec00204 	addi	sp,sp,8
80216c78:	f800283a 	ret

80216c7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216c7c:	defffe04 	addi	sp,sp,-8
80216c80:	dfc00115 	stw	ra,4(sp)
80216c84:	df000015 	stw	fp,0(sp)
80216c88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216c8c:	d0a00c17 	ldw	r2,-32720(gp)
80216c90:	10000326 	beq	r2,zero,80216ca0 <alt_get_errno+0x24>
80216c94:	d0a00c17 	ldw	r2,-32720(gp)
80216c98:	103ee83a 	callr	r2
80216c9c:	00000106 	br	80216ca4 <alt_get_errno+0x28>
80216ca0:	d0a02304 	addi	r2,gp,-32628
}
80216ca4:	e037883a 	mov	sp,fp
80216ca8:	dfc00117 	ldw	ra,4(sp)
80216cac:	df000017 	ldw	fp,0(sp)
80216cb0:	dec00204 	addi	sp,sp,8
80216cb4:	f800283a 	ret

80216cb8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
80216cb8:	defff904 	addi	sp,sp,-28
80216cbc:	dfc00615 	stw	ra,24(sp)
80216cc0:	df000515 	stw	fp,20(sp)
80216cc4:	df000504 	addi	fp,sp,20
80216cc8:	e13ffd15 	stw	r4,-12(fp)
80216ccc:	e17ffe15 	stw	r5,-8(fp)
80216cd0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80216cd4:	e0bffd17 	ldw	r2,-12(fp)
80216cd8:	10000616 	blt	r2,zero,80216cf4 <write+0x3c>
80216cdc:	e0bffd17 	ldw	r2,-12(fp)
80216ce0:	10c00324 	muli	r3,r2,12
80216ce4:	00a008b4 	movhi	r2,32802
80216ce8:	10b74304 	addi	r2,r2,-8948
80216cec:	1885883a 	add	r2,r3,r2
80216cf0:	00000106 	br	80216cf8 <write+0x40>
80216cf4:	0005883a 	mov	r2,zero
80216cf8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80216cfc:	e0bffb17 	ldw	r2,-20(fp)
80216d00:	10002126 	beq	r2,zero,80216d88 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
80216d04:	e0bffb17 	ldw	r2,-20(fp)
80216d08:	10800217 	ldw	r2,8(r2)
80216d0c:	108000cc 	andi	r2,r2,3
80216d10:	10001826 	beq	r2,zero,80216d74 <write+0xbc>
80216d14:	e0bffb17 	ldw	r2,-20(fp)
80216d18:	10800017 	ldw	r2,0(r2)
80216d1c:	10800617 	ldw	r2,24(r2)
80216d20:	10001426 	beq	r2,zero,80216d74 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
80216d24:	e0bffb17 	ldw	r2,-20(fp)
80216d28:	10800017 	ldw	r2,0(r2)
80216d2c:	10800617 	ldw	r2,24(r2)
80216d30:	e0ffff17 	ldw	r3,-4(fp)
80216d34:	180d883a 	mov	r6,r3
80216d38:	e17ffe17 	ldw	r5,-8(fp)
80216d3c:	e13ffb17 	ldw	r4,-20(fp)
80216d40:	103ee83a 	callr	r2
80216d44:	e0bffc15 	stw	r2,-16(fp)
80216d48:	e0bffc17 	ldw	r2,-16(fp)
80216d4c:	1000070e 	bge	r2,zero,80216d6c <write+0xb4>
      {
        ALT_ERRNO = -rval;
80216d50:	0216c7c0 	call	80216c7c <alt_get_errno>
80216d54:	1007883a 	mov	r3,r2
80216d58:	e0bffc17 	ldw	r2,-16(fp)
80216d5c:	0085c83a 	sub	r2,zero,r2
80216d60:	18800015 	stw	r2,0(r3)
        return -1;
80216d64:	00bfffc4 	movi	r2,-1
80216d68:	00000c06 	br	80216d9c <write+0xe4>
      }
      return rval;
80216d6c:	e0bffc17 	ldw	r2,-16(fp)
80216d70:	00000a06 	br	80216d9c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
80216d74:	0216c7c0 	call	80216c7c <alt_get_errno>
80216d78:	1007883a 	mov	r3,r2
80216d7c:	00800344 	movi	r2,13
80216d80:	18800015 	stw	r2,0(r3)
80216d84:	00000406 	br	80216d98 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
80216d88:	0216c7c0 	call	80216c7c <alt_get_errno>
80216d8c:	1007883a 	mov	r3,r2
80216d90:	00801444 	movi	r2,81
80216d94:	18800015 	stw	r2,0(r3)
  }
  return -1;
80216d98:	00bfffc4 	movi	r2,-1
}
80216d9c:	e037883a 	mov	sp,fp
80216da0:	dfc00117 	ldw	ra,4(sp)
80216da4:	df000017 	ldw	fp,0(sp)
80216da8:	dec00204 	addi	sp,sp,8
80216dac:	f800283a 	ret

80216db0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
80216db0:	defffd04 	addi	sp,sp,-12
80216db4:	dfc00215 	stw	ra,8(sp)
80216db8:	df000115 	stw	fp,4(sp)
80216dbc:	df000104 	addi	fp,sp,4
80216dc0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
80216dc4:	d1600904 	addi	r5,gp,-32732
80216dc8:	e13fff17 	ldw	r4,-4(fp)
80216dcc:	021a4680 	call	8021a468 <alt_dev_llist_insert>
}
80216dd0:	e037883a 	mov	sp,fp
80216dd4:	dfc00117 	ldw	ra,4(sp)
80216dd8:	df000017 	ldw	fp,0(sp)
80216ddc:	dec00204 	addi	sp,sp,8
80216de0:	f800283a 	ret

80216de4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
80216de4:	defffd04 	addi	sp,sp,-12
80216de8:	dfc00215 	stw	ra,8(sp)
80216dec:	df000115 	stw	fp,4(sp)
80216df0:	df000104 	addi	fp,sp,4
80216df4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
80216df8:	021aef80 	call	8021aef8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
80216dfc:	00800044 	movi	r2,1
80216e00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
80216e04:	0001883a 	nop
80216e08:	e037883a 	mov	sp,fp
80216e0c:	dfc00117 	ldw	ra,4(sp)
80216e10:	df000017 	ldw	fp,0(sp)
80216e14:	dec00204 	addi	sp,sp,8
80216e18:	f800283a 	ret

80216e1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
80216e1c:	defffe04 	addi	sp,sp,-8
80216e20:	dfc00115 	stw	ra,4(sp)
80216e24:	df000015 	stw	fp,0(sp)
80216e28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
80216e2c:	01c0fa04 	movi	r7,1000
80216e30:	01800144 	movi	r6,5
80216e34:	000b883a 	mov	r5,zero
80216e38:	01204034 	movhi	r4,33024
80216e3c:	21011004 	addi	r4,r4,1088
80216e40:	02179e40 	call	802179e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
80216e44:	01800084 	movi	r6,2
80216e48:	000b883a 	mov	r5,zero
80216e4c:	012008b4 	movhi	r4,32802
80216e50:	2137ae04 	addi	r4,r4,-8520
80216e54:	02170680 	call	80217068 <altera_avalon_jtag_uart_init>
80216e58:	012008b4 	movhi	r4,32802
80216e5c:	2137a404 	addi	r4,r4,-8560
80216e60:	0216db00 	call	80216db0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
80216e64:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
80216e68:	01800104 	movi	r6,4
80216e6c:	000b883a 	mov	r5,zero
80216e70:	012008b4 	movhi	r4,32802
80216e74:	213bc604 	addi	r4,r4,-4328
80216e78:	0217b700 	call	80217b70 <altera_avalon_uart_init>
80216e7c:	012008b4 	movhi	r4,32802
80216e80:	213bbc04 	addi	r4,r4,-4368
80216e84:	0216db00 	call	80216db0 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
80216e88:	00a008b4 	movhi	r2,32802
80216e8c:	10bbf004 	addi	r2,r2,-4160
80216e90:	10c00717 	ldw	r3,28(r2)
80216e94:	00a008b4 	movhi	r2,32802
80216e98:	10bbf004 	addi	r2,r2,-4160
80216e9c:	10800817 	ldw	r2,32(r2)
80216ea0:	100d883a 	mov	r6,r2
80216ea4:	180b883a 	mov	r5,r3
80216ea8:	012008b4 	movhi	r4,32802
80216eac:	213bf004 	addi	r4,r4,-4160
80216eb0:	021a0280 	call	8021a028 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
80216eb4:	00a008b4 	movhi	r2,32802
80216eb8:	10bc0804 	addi	r2,r2,-4064
80216ebc:	10c00717 	ldw	r3,28(r2)
80216ec0:	00a008b4 	movhi	r2,32802
80216ec4:	10bc0804 	addi	r2,r2,-4064
80216ec8:	10800817 	ldw	r2,32(r2)
80216ecc:	100d883a 	mov	r6,r2
80216ed0:	180b883a 	mov	r5,r3
80216ed4:	012008b4 	movhi	r4,32802
80216ed8:	213c0804 	addi	r4,r4,-4064
80216edc:	021a0280 	call	8021a028 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
80216ee0:	012008b4 	movhi	r4,32802
80216ee4:	213c2004 	addi	r4,r4,-3968
80216ee8:	0216db00 	call	80216db0 <alt_dev_reg>
}
80216eec:	0001883a 	nop
80216ef0:	e037883a 	mov	sp,fp
80216ef4:	dfc00117 	ldw	ra,4(sp)
80216ef8:	df000017 	ldw	fp,0(sp)
80216efc:	dec00204 	addi	sp,sp,8
80216f00:	f800283a 	ret

80216f04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
80216f04:	defffa04 	addi	sp,sp,-24
80216f08:	dfc00515 	stw	ra,20(sp)
80216f0c:	df000415 	stw	fp,16(sp)
80216f10:	df000404 	addi	fp,sp,16
80216f14:	e13ffd15 	stw	r4,-12(fp)
80216f18:	e17ffe15 	stw	r5,-8(fp)
80216f1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80216f20:	e0bffd17 	ldw	r2,-12(fp)
80216f24:	10800017 	ldw	r2,0(r2)
80216f28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
80216f2c:	e0bffc17 	ldw	r2,-16(fp)
80216f30:	10c00a04 	addi	r3,r2,40
80216f34:	e0bffd17 	ldw	r2,-12(fp)
80216f38:	10800217 	ldw	r2,8(r2)
80216f3c:	100f883a 	mov	r7,r2
80216f40:	e1bfff17 	ldw	r6,-4(fp)
80216f44:	e17ffe17 	ldw	r5,-8(fp)
80216f48:	1809883a 	mov	r4,r3
80216f4c:	021752c0 	call	8021752c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
80216f50:	e037883a 	mov	sp,fp
80216f54:	dfc00117 	ldw	ra,4(sp)
80216f58:	df000017 	ldw	fp,0(sp)
80216f5c:	dec00204 	addi	sp,sp,8
80216f60:	f800283a 	ret

80216f64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
80216f64:	defffa04 	addi	sp,sp,-24
80216f68:	dfc00515 	stw	ra,20(sp)
80216f6c:	df000415 	stw	fp,16(sp)
80216f70:	df000404 	addi	fp,sp,16
80216f74:	e13ffd15 	stw	r4,-12(fp)
80216f78:	e17ffe15 	stw	r5,-8(fp)
80216f7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80216f80:	e0bffd17 	ldw	r2,-12(fp)
80216f84:	10800017 	ldw	r2,0(r2)
80216f88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
80216f8c:	e0bffc17 	ldw	r2,-16(fp)
80216f90:	10c00a04 	addi	r3,r2,40
80216f94:	e0bffd17 	ldw	r2,-12(fp)
80216f98:	10800217 	ldw	r2,8(r2)
80216f9c:	100f883a 	mov	r7,r2
80216fa0:	e1bfff17 	ldw	r6,-4(fp)
80216fa4:	e17ffe17 	ldw	r5,-8(fp)
80216fa8:	1809883a 	mov	r4,r3
80216fac:	02177480 	call	80217748 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
80216fb0:	e037883a 	mov	sp,fp
80216fb4:	dfc00117 	ldw	ra,4(sp)
80216fb8:	df000017 	ldw	fp,0(sp)
80216fbc:	dec00204 	addi	sp,sp,8
80216fc0:	f800283a 	ret

80216fc4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
80216fc4:	defffc04 	addi	sp,sp,-16
80216fc8:	dfc00315 	stw	ra,12(sp)
80216fcc:	df000215 	stw	fp,8(sp)
80216fd0:	df000204 	addi	fp,sp,8
80216fd4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80216fd8:	e0bfff17 	ldw	r2,-4(fp)
80216fdc:	10800017 	ldw	r2,0(r2)
80216fe0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
80216fe4:	e0bffe17 	ldw	r2,-8(fp)
80216fe8:	10c00a04 	addi	r3,r2,40
80216fec:	e0bfff17 	ldw	r2,-4(fp)
80216ff0:	10800217 	ldw	r2,8(r2)
80216ff4:	100b883a 	mov	r5,r2
80216ff8:	1809883a 	mov	r4,r3
80216ffc:	02173d40 	call	802173d4 <altera_avalon_jtag_uart_close>
}
80217000:	e037883a 	mov	sp,fp
80217004:	dfc00117 	ldw	ra,4(sp)
80217008:	df000017 	ldw	fp,0(sp)
8021700c:	dec00204 	addi	sp,sp,8
80217010:	f800283a 	ret

80217014 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
80217014:	defffa04 	addi	sp,sp,-24
80217018:	dfc00515 	stw	ra,20(sp)
8021701c:	df000415 	stw	fp,16(sp)
80217020:	df000404 	addi	fp,sp,16
80217024:	e13ffd15 	stw	r4,-12(fp)
80217028:	e17ffe15 	stw	r5,-8(fp)
8021702c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
80217030:	e0bffd17 	ldw	r2,-12(fp)
80217034:	10800017 	ldw	r2,0(r2)
80217038:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8021703c:	e0bffc17 	ldw	r2,-16(fp)
80217040:	10800a04 	addi	r2,r2,40
80217044:	e1bfff17 	ldw	r6,-4(fp)
80217048:	e17ffe17 	ldw	r5,-8(fp)
8021704c:	1009883a 	mov	r4,r2
80217050:	021743c0 	call	8021743c <altera_avalon_jtag_uart_ioctl>
}
80217054:	e037883a 	mov	sp,fp
80217058:	dfc00117 	ldw	ra,4(sp)
8021705c:	df000017 	ldw	fp,0(sp)
80217060:	dec00204 	addi	sp,sp,8
80217064:	f800283a 	ret

80217068 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80217068:	defffa04 	addi	sp,sp,-24
8021706c:	dfc00515 	stw	ra,20(sp)
80217070:	df000415 	stw	fp,16(sp)
80217074:	df000404 	addi	fp,sp,16
80217078:	e13ffd15 	stw	r4,-12(fp)
8021707c:	e17ffe15 	stw	r5,-8(fp)
80217080:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80217084:	e0bffd17 	ldw	r2,-12(fp)
80217088:	00c00044 	movi	r3,1
8021708c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
80217090:	e0bffd17 	ldw	r2,-12(fp)
80217094:	10800017 	ldw	r2,0(r2)
80217098:	10800104 	addi	r2,r2,4
8021709c:	1007883a 	mov	r3,r2
802170a0:	e0bffd17 	ldw	r2,-12(fp)
802170a4:	10800817 	ldw	r2,32(r2)
802170a8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
802170ac:	e0bffe17 	ldw	r2,-8(fp)
802170b0:	e0ffff17 	ldw	r3,-4(fp)
802170b4:	d8000015 	stw	zero,0(sp)
802170b8:	e1fffd17 	ldw	r7,-12(fp)
802170bc:	01a00874 	movhi	r6,32801
802170c0:	319c4a04 	addi	r6,r6,28968
802170c4:	180b883a 	mov	r5,r3
802170c8:	1009883a 	mov	r4,r2
802170cc:	021a65c0 	call	8021a65c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
802170d0:	e0bffd17 	ldw	r2,-12(fp)
802170d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
802170d8:	e0bffd17 	ldw	r2,-12(fp)
802170dc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802170e0:	d0e02717 	ldw	r3,-32612(gp)
802170e4:	e1fffd17 	ldw	r7,-12(fp)
802170e8:	01a00874 	movhi	r6,32801
802170ec:	319ccd04 	addi	r6,r6,29492
802170f0:	180b883a 	mov	r5,r3
802170f4:	1009883a 	mov	r4,r2
802170f8:	021a2d80 	call	8021a2d8 <alt_alarm_start>
802170fc:	1000040e 	bge	r2,zero,80217110 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
80217100:	e0fffd17 	ldw	r3,-12(fp)
80217104:	00a00034 	movhi	r2,32768
80217108:	10bfffc4 	addi	r2,r2,-1
8021710c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
80217110:	0001883a 	nop
80217114:	e037883a 	mov	sp,fp
80217118:	dfc00117 	ldw	ra,4(sp)
8021711c:	df000017 	ldw	fp,0(sp)
80217120:	dec00204 	addi	sp,sp,8
80217124:	f800283a 	ret

80217128 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
80217128:	defff804 	addi	sp,sp,-32
8021712c:	df000715 	stw	fp,28(sp)
80217130:	df000704 	addi	fp,sp,28
80217134:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
80217138:	e0bfff17 	ldw	r2,-4(fp)
8021713c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
80217140:	e0bffb17 	ldw	r2,-20(fp)
80217144:	10800017 	ldw	r2,0(r2)
80217148:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8021714c:	e0bffc17 	ldw	r2,-16(fp)
80217150:	10800104 	addi	r2,r2,4
80217154:	10800037 	ldwio	r2,0(r2)
80217158:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8021715c:	e0bffd17 	ldw	r2,-12(fp)
80217160:	1080c00c 	andi	r2,r2,768
80217164:	10006d26 	beq	r2,zero,8021731c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
80217168:	e0bffd17 	ldw	r2,-12(fp)
8021716c:	1080400c 	andi	r2,r2,256
80217170:	10003526 	beq	r2,zero,80217248 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
80217174:	00800074 	movhi	r2,1
80217178:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8021717c:	e0bffb17 	ldw	r2,-20(fp)
80217180:	10800a17 	ldw	r2,40(r2)
80217184:	10800044 	addi	r2,r2,1
80217188:	1081ffcc 	andi	r2,r2,2047
8021718c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
80217190:	e0bffb17 	ldw	r2,-20(fp)
80217194:	10c00b17 	ldw	r3,44(r2)
80217198:	e0bffe17 	ldw	r2,-8(fp)
8021719c:	18801526 	beq	r3,r2,802171f4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
802171a0:	e0bffc17 	ldw	r2,-16(fp)
802171a4:	10800037 	ldwio	r2,0(r2)
802171a8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
802171ac:	e0bff917 	ldw	r2,-28(fp)
802171b0:	10a0000c 	andi	r2,r2,32768
802171b4:	10001126 	beq	r2,zero,802171fc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
802171b8:	e0bffb17 	ldw	r2,-20(fp)
802171bc:	10800a17 	ldw	r2,40(r2)
802171c0:	e0fff917 	ldw	r3,-28(fp)
802171c4:	1809883a 	mov	r4,r3
802171c8:	e0fffb17 	ldw	r3,-20(fp)
802171cc:	1885883a 	add	r2,r3,r2
802171d0:	10800e04 	addi	r2,r2,56
802171d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
802171d8:	e0bffb17 	ldw	r2,-20(fp)
802171dc:	10800a17 	ldw	r2,40(r2)
802171e0:	10800044 	addi	r2,r2,1
802171e4:	10c1ffcc 	andi	r3,r2,2047
802171e8:	e0bffb17 	ldw	r2,-20(fp)
802171ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
802171f0:	003fe206 	br	8021717c <__reset+0xfa1f717c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
802171f4:	0001883a 	nop
802171f8:	00000106 	br	80217200 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
802171fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
80217200:	e0bff917 	ldw	r2,-28(fp)
80217204:	10bfffec 	andhi	r2,r2,65535
80217208:	10000f26 	beq	r2,zero,80217248 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8021720c:	e0bffb17 	ldw	r2,-20(fp)
80217210:	10c00817 	ldw	r3,32(r2)
80217214:	00bfff84 	movi	r2,-2
80217218:	1886703a 	and	r3,r3,r2
8021721c:	e0bffb17 	ldw	r2,-20(fp)
80217220:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
80217224:	e0bffc17 	ldw	r2,-16(fp)
80217228:	10800104 	addi	r2,r2,4
8021722c:	1007883a 	mov	r3,r2
80217230:	e0bffb17 	ldw	r2,-20(fp)
80217234:	10800817 	ldw	r2,32(r2)
80217238:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8021723c:	e0bffc17 	ldw	r2,-16(fp)
80217240:	10800104 	addi	r2,r2,4
80217244:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
80217248:	e0bffd17 	ldw	r2,-12(fp)
8021724c:	1080800c 	andi	r2,r2,512
80217250:	103fbe26 	beq	r2,zero,8021714c <__reset+0xfa1f714c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
80217254:	e0bffd17 	ldw	r2,-12(fp)
80217258:	1004d43a 	srli	r2,r2,16
8021725c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
80217260:	00001406 	br	802172b4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
80217264:	e0bffc17 	ldw	r2,-16(fp)
80217268:	e0fffb17 	ldw	r3,-20(fp)
8021726c:	18c00d17 	ldw	r3,52(r3)
80217270:	e13ffb17 	ldw	r4,-20(fp)
80217274:	20c7883a 	add	r3,r4,r3
80217278:	18c20e04 	addi	r3,r3,2104
8021727c:	18c00003 	ldbu	r3,0(r3)
80217280:	18c03fcc 	andi	r3,r3,255
80217284:	18c0201c 	xori	r3,r3,128
80217288:	18ffe004 	addi	r3,r3,-128
8021728c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80217290:	e0bffb17 	ldw	r2,-20(fp)
80217294:	10800d17 	ldw	r2,52(r2)
80217298:	10800044 	addi	r2,r2,1
8021729c:	10c1ffcc 	andi	r3,r2,2047
802172a0:	e0bffb17 	ldw	r2,-20(fp)
802172a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
802172a8:	e0bffa17 	ldw	r2,-24(fp)
802172ac:	10bfffc4 	addi	r2,r2,-1
802172b0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
802172b4:	e0bffa17 	ldw	r2,-24(fp)
802172b8:	10000526 	beq	r2,zero,802172d0 <altera_avalon_jtag_uart_irq+0x1a8>
802172bc:	e0bffb17 	ldw	r2,-20(fp)
802172c0:	10c00d17 	ldw	r3,52(r2)
802172c4:	e0bffb17 	ldw	r2,-20(fp)
802172c8:	10800c17 	ldw	r2,48(r2)
802172cc:	18bfe51e 	bne	r3,r2,80217264 <__reset+0xfa1f7264>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
802172d0:	e0bffa17 	ldw	r2,-24(fp)
802172d4:	103f9d26 	beq	r2,zero,8021714c <__reset+0xfa1f714c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
802172d8:	e0bffb17 	ldw	r2,-20(fp)
802172dc:	10c00817 	ldw	r3,32(r2)
802172e0:	00bfff44 	movi	r2,-3
802172e4:	1886703a 	and	r3,r3,r2
802172e8:	e0bffb17 	ldw	r2,-20(fp)
802172ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
802172f0:	e0bffb17 	ldw	r2,-20(fp)
802172f4:	10800017 	ldw	r2,0(r2)
802172f8:	10800104 	addi	r2,r2,4
802172fc:	1007883a 	mov	r3,r2
80217300:	e0bffb17 	ldw	r2,-20(fp)
80217304:	10800817 	ldw	r2,32(r2)
80217308:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8021730c:	e0bffc17 	ldw	r2,-16(fp)
80217310:	10800104 	addi	r2,r2,4
80217314:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
80217318:	003f8c06 	br	8021714c <__reset+0xfa1f714c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8021731c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
80217320:	0001883a 	nop
80217324:	e037883a 	mov	sp,fp
80217328:	df000017 	ldw	fp,0(sp)
8021732c:	dec00104 	addi	sp,sp,4
80217330:	f800283a 	ret

80217334 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
80217334:	defff804 	addi	sp,sp,-32
80217338:	df000715 	stw	fp,28(sp)
8021733c:	df000704 	addi	fp,sp,28
80217340:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
80217344:	e0bffb17 	ldw	r2,-20(fp)
80217348:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8021734c:	e0bff917 	ldw	r2,-28(fp)
80217350:	10800017 	ldw	r2,0(r2)
80217354:	10800104 	addi	r2,r2,4
80217358:	10800037 	ldwio	r2,0(r2)
8021735c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
80217360:	e0bffa17 	ldw	r2,-24(fp)
80217364:	1081000c 	andi	r2,r2,1024
80217368:	10000b26 	beq	r2,zero,80217398 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8021736c:	e0bff917 	ldw	r2,-28(fp)
80217370:	10800017 	ldw	r2,0(r2)
80217374:	10800104 	addi	r2,r2,4
80217378:	1007883a 	mov	r3,r2
8021737c:	e0bff917 	ldw	r2,-28(fp)
80217380:	10800817 	ldw	r2,32(r2)
80217384:	10810014 	ori	r2,r2,1024
80217388:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8021738c:	e0bff917 	ldw	r2,-28(fp)
80217390:	10000915 	stw	zero,36(r2)
80217394:	00000a06 	br	802173c0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
80217398:	e0bff917 	ldw	r2,-28(fp)
8021739c:	10c00917 	ldw	r3,36(r2)
802173a0:	00a00034 	movhi	r2,32768
802173a4:	10bfff04 	addi	r2,r2,-4
802173a8:	10c00536 	bltu	r2,r3,802173c0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
802173ac:	e0bff917 	ldw	r2,-28(fp)
802173b0:	10800917 	ldw	r2,36(r2)
802173b4:	10c00044 	addi	r3,r2,1
802173b8:	e0bff917 	ldw	r2,-28(fp)
802173bc:	10c00915 	stw	r3,36(r2)
802173c0:	d0a02717 	ldw	r2,-32612(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
802173c4:	e037883a 	mov	sp,fp
802173c8:	df000017 	ldw	fp,0(sp)
802173cc:	dec00104 	addi	sp,sp,4
802173d0:	f800283a 	ret

802173d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
802173d4:	defffd04 	addi	sp,sp,-12
802173d8:	df000215 	stw	fp,8(sp)
802173dc:	df000204 	addi	fp,sp,8
802173e0:	e13ffe15 	stw	r4,-8(fp)
802173e4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
802173e8:	00000506 	br	80217400 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
802173ec:	e0bfff17 	ldw	r2,-4(fp)
802173f0:	1090000c 	andi	r2,r2,16384
802173f4:	10000226 	beq	r2,zero,80217400 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
802173f8:	00bffd44 	movi	r2,-11
802173fc:	00000b06 	br	8021742c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80217400:	e0bffe17 	ldw	r2,-8(fp)
80217404:	10c00d17 	ldw	r3,52(r2)
80217408:	e0bffe17 	ldw	r2,-8(fp)
8021740c:	10800c17 	ldw	r2,48(r2)
80217410:	18800526 	beq	r3,r2,80217428 <altera_avalon_jtag_uart_close+0x54>
80217414:	e0bffe17 	ldw	r2,-8(fp)
80217418:	10c00917 	ldw	r3,36(r2)
8021741c:	e0bffe17 	ldw	r2,-8(fp)
80217420:	10800117 	ldw	r2,4(r2)
80217424:	18bff136 	bltu	r3,r2,802173ec <__reset+0xfa1f73ec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80217428:	0005883a 	mov	r2,zero
}
8021742c:	e037883a 	mov	sp,fp
80217430:	df000017 	ldw	fp,0(sp)
80217434:	dec00104 	addi	sp,sp,4
80217438:	f800283a 	ret

8021743c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8021743c:	defffa04 	addi	sp,sp,-24
80217440:	df000515 	stw	fp,20(sp)
80217444:	df000504 	addi	fp,sp,20
80217448:	e13ffd15 	stw	r4,-12(fp)
8021744c:	e17ffe15 	stw	r5,-8(fp)
80217450:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
80217454:	00bff9c4 	movi	r2,-25
80217458:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8021745c:	e0bffe17 	ldw	r2,-8(fp)
80217460:	10da8060 	cmpeqi	r3,r2,27137
80217464:	1800031e 	bne	r3,zero,80217474 <altera_avalon_jtag_uart_ioctl+0x38>
80217468:	109a80a0 	cmpeqi	r2,r2,27138
8021746c:	1000181e 	bne	r2,zero,802174d0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
80217470:	00002906 	br	80217518 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
80217474:	e0bffd17 	ldw	r2,-12(fp)
80217478:	10c00117 	ldw	r3,4(r2)
8021747c:	00a00034 	movhi	r2,32768
80217480:	10bfffc4 	addi	r2,r2,-1
80217484:	18802126 	beq	r3,r2,8021750c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
80217488:	e0bfff17 	ldw	r2,-4(fp)
8021748c:	10800017 	ldw	r2,0(r2)
80217490:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
80217494:	e0bffc17 	ldw	r2,-16(fp)
80217498:	10800090 	cmplti	r2,r2,2
8021749c:	1000061e 	bne	r2,zero,802174b8 <altera_avalon_jtag_uart_ioctl+0x7c>
802174a0:	e0fffc17 	ldw	r3,-16(fp)
802174a4:	00a00034 	movhi	r2,32768
802174a8:	10bfffc4 	addi	r2,r2,-1
802174ac:	18800226 	beq	r3,r2,802174b8 <altera_avalon_jtag_uart_ioctl+0x7c>
802174b0:	e0bffc17 	ldw	r2,-16(fp)
802174b4:	00000206 	br	802174c0 <altera_avalon_jtag_uart_ioctl+0x84>
802174b8:	00a00034 	movhi	r2,32768
802174bc:	10bfff84 	addi	r2,r2,-2
802174c0:	e0fffd17 	ldw	r3,-12(fp)
802174c4:	18800115 	stw	r2,4(r3)
      rc = 0;
802174c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
802174cc:	00000f06 	br	8021750c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
802174d0:	e0bffd17 	ldw	r2,-12(fp)
802174d4:	10c00117 	ldw	r3,4(r2)
802174d8:	00a00034 	movhi	r2,32768
802174dc:	10bfffc4 	addi	r2,r2,-1
802174e0:	18800c26 	beq	r3,r2,80217514 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
802174e4:	e0bffd17 	ldw	r2,-12(fp)
802174e8:	10c00917 	ldw	r3,36(r2)
802174ec:	e0bffd17 	ldw	r2,-12(fp)
802174f0:	10800117 	ldw	r2,4(r2)
802174f4:	1885803a 	cmpltu	r2,r3,r2
802174f8:	10c03fcc 	andi	r3,r2,255
802174fc:	e0bfff17 	ldw	r2,-4(fp)
80217500:	10c00015 	stw	r3,0(r2)
      rc = 0;
80217504:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
80217508:	00000206 	br	80217514 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8021750c:	0001883a 	nop
80217510:	00000106 	br	80217518 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
80217514:	0001883a 	nop

  default:
    break;
  }

  return rc;
80217518:	e0bffb17 	ldw	r2,-20(fp)
}
8021751c:	e037883a 	mov	sp,fp
80217520:	df000017 	ldw	fp,0(sp)
80217524:	dec00104 	addi	sp,sp,4
80217528:	f800283a 	ret

8021752c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
8021752c:	defff304 	addi	sp,sp,-52
80217530:	dfc00c15 	stw	ra,48(sp)
80217534:	df000b15 	stw	fp,44(sp)
80217538:	df000b04 	addi	fp,sp,44
8021753c:	e13ffc15 	stw	r4,-16(fp)
80217540:	e17ffd15 	stw	r5,-12(fp)
80217544:	e1bffe15 	stw	r6,-8(fp)
80217548:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
8021754c:	e0bffd17 	ldw	r2,-12(fp)
80217550:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80217554:	00004706 	br	80217674 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
80217558:	e0bffc17 	ldw	r2,-16(fp)
8021755c:	10800a17 	ldw	r2,40(r2)
80217560:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
80217564:	e0bffc17 	ldw	r2,-16(fp)
80217568:	10800b17 	ldw	r2,44(r2)
8021756c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
80217570:	e0fff717 	ldw	r3,-36(fp)
80217574:	e0bff817 	ldw	r2,-32(fp)
80217578:	18800536 	bltu	r3,r2,80217590 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
8021757c:	e0fff717 	ldw	r3,-36(fp)
80217580:	e0bff817 	ldw	r2,-32(fp)
80217584:	1885c83a 	sub	r2,r3,r2
80217588:	e0bff615 	stw	r2,-40(fp)
8021758c:	00000406 	br	802175a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
80217590:	00c20004 	movi	r3,2048
80217594:	e0bff817 	ldw	r2,-32(fp)
80217598:	1885c83a 	sub	r2,r3,r2
8021759c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
802175a0:	e0bff617 	ldw	r2,-40(fp)
802175a4:	10001e26 	beq	r2,zero,80217620 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
802175a8:	e0fffe17 	ldw	r3,-8(fp)
802175ac:	e0bff617 	ldw	r2,-40(fp)
802175b0:	1880022e 	bgeu	r3,r2,802175bc <altera_avalon_jtag_uart_read+0x90>
        n = space;
802175b4:	e0bffe17 	ldw	r2,-8(fp)
802175b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
802175bc:	e0bffc17 	ldw	r2,-16(fp)
802175c0:	10c00e04 	addi	r3,r2,56
802175c4:	e0bff817 	ldw	r2,-32(fp)
802175c8:	1885883a 	add	r2,r3,r2
802175cc:	e1bff617 	ldw	r6,-40(fp)
802175d0:	100b883a 	mov	r5,r2
802175d4:	e13ff517 	ldw	r4,-44(fp)
802175d8:	02062d80 	call	802062d8 <memcpy>
      ptr   += n;
802175dc:	e0fff517 	ldw	r3,-44(fp)
802175e0:	e0bff617 	ldw	r2,-40(fp)
802175e4:	1885883a 	add	r2,r3,r2
802175e8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
802175ec:	e0fffe17 	ldw	r3,-8(fp)
802175f0:	e0bff617 	ldw	r2,-40(fp)
802175f4:	1885c83a 	sub	r2,r3,r2
802175f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
802175fc:	e0fff817 	ldw	r3,-32(fp)
80217600:	e0bff617 	ldw	r2,-40(fp)
80217604:	1885883a 	add	r2,r3,r2
80217608:	10c1ffcc 	andi	r3,r2,2047
8021760c:	e0bffc17 	ldw	r2,-16(fp)
80217610:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
80217614:	e0bffe17 	ldw	r2,-8(fp)
80217618:	00bfcf16 	blt	zero,r2,80217558 <__reset+0xfa1f7558>
8021761c:	00000106 	br	80217624 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
80217620:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
80217624:	e0fff517 	ldw	r3,-44(fp)
80217628:	e0bffd17 	ldw	r2,-12(fp)
8021762c:	1880141e 	bne	r3,r2,80217680 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
80217630:	e0bfff17 	ldw	r2,-4(fp)
80217634:	1090000c 	andi	r2,r2,16384
80217638:	1000131e 	bne	r2,zero,80217688 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
8021763c:	0001883a 	nop
80217640:	e0bffc17 	ldw	r2,-16(fp)
80217644:	10c00a17 	ldw	r3,40(r2)
80217648:	e0bff717 	ldw	r2,-36(fp)
8021764c:	1880051e 	bne	r3,r2,80217664 <altera_avalon_jtag_uart_read+0x138>
80217650:	e0bffc17 	ldw	r2,-16(fp)
80217654:	10c00917 	ldw	r3,36(r2)
80217658:	e0bffc17 	ldw	r2,-16(fp)
8021765c:	10800117 	ldw	r2,4(r2)
80217660:	18bff736 	bltu	r3,r2,80217640 <__reset+0xfa1f7640>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
80217664:	e0bffc17 	ldw	r2,-16(fp)
80217668:	10c00a17 	ldw	r3,40(r2)
8021766c:	e0bff717 	ldw	r2,-36(fp)
80217670:	18800726 	beq	r3,r2,80217690 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80217674:	e0bffe17 	ldw	r2,-8(fp)
80217678:	00bfb716 	blt	zero,r2,80217558 <__reset+0xfa1f7558>
8021767c:	00000506 	br	80217694 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
80217680:	0001883a 	nop
80217684:	00000306 	br	80217694 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
80217688:	0001883a 	nop
8021768c:	00000106 	br	80217694 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
80217690:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
80217694:	e0fff517 	ldw	r3,-44(fp)
80217698:	e0bffd17 	ldw	r2,-12(fp)
8021769c:	18801826 	beq	r3,r2,80217700 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802176a0:	0005303a 	rdctl	r2,status
802176a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802176a8:	e0fffb17 	ldw	r3,-20(fp)
802176ac:	00bfff84 	movi	r2,-2
802176b0:	1884703a 	and	r2,r3,r2
802176b4:	1001703a 	wrctl	status,r2
  
  return context;
802176b8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
802176bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
802176c0:	e0bffc17 	ldw	r2,-16(fp)
802176c4:	10800817 	ldw	r2,32(r2)
802176c8:	10c00054 	ori	r3,r2,1
802176cc:	e0bffc17 	ldw	r2,-16(fp)
802176d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
802176d4:	e0bffc17 	ldw	r2,-16(fp)
802176d8:	10800017 	ldw	r2,0(r2)
802176dc:	10800104 	addi	r2,r2,4
802176e0:	1007883a 	mov	r3,r2
802176e4:	e0bffc17 	ldw	r2,-16(fp)
802176e8:	10800817 	ldw	r2,32(r2)
802176ec:	18800035 	stwio	r2,0(r3)
802176f0:	e0bffa17 	ldw	r2,-24(fp)
802176f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802176f8:	e0bff917 	ldw	r2,-28(fp)
802176fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
80217700:	e0fff517 	ldw	r3,-44(fp)
80217704:	e0bffd17 	ldw	r2,-12(fp)
80217708:	18800426 	beq	r3,r2,8021771c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
8021770c:	e0fff517 	ldw	r3,-44(fp)
80217710:	e0bffd17 	ldw	r2,-12(fp)
80217714:	1885c83a 	sub	r2,r3,r2
80217718:	00000606 	br	80217734 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
8021771c:	e0bfff17 	ldw	r2,-4(fp)
80217720:	1090000c 	andi	r2,r2,16384
80217724:	10000226 	beq	r2,zero,80217730 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
80217728:	00bffd44 	movi	r2,-11
8021772c:	00000106 	br	80217734 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
80217730:	00bffec4 	movi	r2,-5
}
80217734:	e037883a 	mov	sp,fp
80217738:	dfc00117 	ldw	ra,4(sp)
8021773c:	df000017 	ldw	fp,0(sp)
80217740:	dec00204 	addi	sp,sp,8
80217744:	f800283a 	ret

80217748 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
80217748:	defff304 	addi	sp,sp,-52
8021774c:	dfc00c15 	stw	ra,48(sp)
80217750:	df000b15 	stw	fp,44(sp)
80217754:	df000b04 	addi	fp,sp,44
80217758:	e13ffc15 	stw	r4,-16(fp)
8021775c:	e17ffd15 	stw	r5,-12(fp)
80217760:	e1bffe15 	stw	r6,-8(fp)
80217764:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
80217768:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
8021776c:	e0bffd17 	ldw	r2,-12(fp)
80217770:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80217774:	00003706 	br	80217854 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
80217778:	e0bffc17 	ldw	r2,-16(fp)
8021777c:	10800c17 	ldw	r2,48(r2)
80217780:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
80217784:	e0bffc17 	ldw	r2,-16(fp)
80217788:	10800d17 	ldw	r2,52(r2)
8021778c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
80217790:	e0fff917 	ldw	r3,-28(fp)
80217794:	e0bff517 	ldw	r2,-44(fp)
80217798:	1880062e 	bgeu	r3,r2,802177b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
8021779c:	e0fff517 	ldw	r3,-44(fp)
802177a0:	e0bff917 	ldw	r2,-28(fp)
802177a4:	1885c83a 	sub	r2,r3,r2
802177a8:	10bfffc4 	addi	r2,r2,-1
802177ac:	e0bff615 	stw	r2,-40(fp)
802177b0:	00000b06 	br	802177e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
802177b4:	e0bff517 	ldw	r2,-44(fp)
802177b8:	10000526 	beq	r2,zero,802177d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
802177bc:	00c20004 	movi	r3,2048
802177c0:	e0bff917 	ldw	r2,-28(fp)
802177c4:	1885c83a 	sub	r2,r3,r2
802177c8:	e0bff615 	stw	r2,-40(fp)
802177cc:	00000406 	br	802177e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
802177d0:	00c1ffc4 	movi	r3,2047
802177d4:	e0bff917 	ldw	r2,-28(fp)
802177d8:	1885c83a 	sub	r2,r3,r2
802177dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
802177e0:	e0bff617 	ldw	r2,-40(fp)
802177e4:	10001e26 	beq	r2,zero,80217860 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
802177e8:	e0fffe17 	ldw	r3,-8(fp)
802177ec:	e0bff617 	ldw	r2,-40(fp)
802177f0:	1880022e 	bgeu	r3,r2,802177fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
802177f4:	e0bffe17 	ldw	r2,-8(fp)
802177f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
802177fc:	e0bffc17 	ldw	r2,-16(fp)
80217800:	10c20e04 	addi	r3,r2,2104
80217804:	e0bff917 	ldw	r2,-28(fp)
80217808:	1885883a 	add	r2,r3,r2
8021780c:	e1bff617 	ldw	r6,-40(fp)
80217810:	e17ffd17 	ldw	r5,-12(fp)
80217814:	1009883a 	mov	r4,r2
80217818:	02062d80 	call	802062d8 <memcpy>
      ptr   += n;
8021781c:	e0fffd17 	ldw	r3,-12(fp)
80217820:	e0bff617 	ldw	r2,-40(fp)
80217824:	1885883a 	add	r2,r3,r2
80217828:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8021782c:	e0fffe17 	ldw	r3,-8(fp)
80217830:	e0bff617 	ldw	r2,-40(fp)
80217834:	1885c83a 	sub	r2,r3,r2
80217838:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8021783c:	e0fff917 	ldw	r3,-28(fp)
80217840:	e0bff617 	ldw	r2,-40(fp)
80217844:	1885883a 	add	r2,r3,r2
80217848:	10c1ffcc 	andi	r3,r2,2047
8021784c:	e0bffc17 	ldw	r2,-16(fp)
80217850:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80217854:	e0bffe17 	ldw	r2,-8(fp)
80217858:	00bfc716 	blt	zero,r2,80217778 <__reset+0xfa1f7778>
8021785c:	00000106 	br	80217864 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
80217860:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217864:	0005303a 	rdctl	r2,status
80217868:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021786c:	e0fffb17 	ldw	r3,-20(fp)
80217870:	00bfff84 	movi	r2,-2
80217874:	1884703a 	and	r2,r3,r2
80217878:	1001703a 	wrctl	status,r2
  
  return context;
8021787c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
80217880:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80217884:	e0bffc17 	ldw	r2,-16(fp)
80217888:	10800817 	ldw	r2,32(r2)
8021788c:	10c00094 	ori	r3,r2,2
80217890:	e0bffc17 	ldw	r2,-16(fp)
80217894:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80217898:	e0bffc17 	ldw	r2,-16(fp)
8021789c:	10800017 	ldw	r2,0(r2)
802178a0:	10800104 	addi	r2,r2,4
802178a4:	1007883a 	mov	r3,r2
802178a8:	e0bffc17 	ldw	r2,-16(fp)
802178ac:	10800817 	ldw	r2,32(r2)
802178b0:	18800035 	stwio	r2,0(r3)
802178b4:	e0bffa17 	ldw	r2,-24(fp)
802178b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802178bc:	e0bff817 	ldw	r2,-32(fp)
802178c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
802178c4:	e0bffe17 	ldw	r2,-8(fp)
802178c8:	0080100e 	bge	zero,r2,8021790c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
802178cc:	e0bfff17 	ldw	r2,-4(fp)
802178d0:	1090000c 	andi	r2,r2,16384
802178d4:	1000101e 	bne	r2,zero,80217918 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
802178d8:	0001883a 	nop
802178dc:	e0bffc17 	ldw	r2,-16(fp)
802178e0:	10c00d17 	ldw	r3,52(r2)
802178e4:	e0bff517 	ldw	r2,-44(fp)
802178e8:	1880051e 	bne	r3,r2,80217900 <altera_avalon_jtag_uart_write+0x1b8>
802178ec:	e0bffc17 	ldw	r2,-16(fp)
802178f0:	10c00917 	ldw	r3,36(r2)
802178f4:	e0bffc17 	ldw	r2,-16(fp)
802178f8:	10800117 	ldw	r2,4(r2)
802178fc:	18bff736 	bltu	r3,r2,802178dc <__reset+0xfa1f78dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
80217900:	e0bffc17 	ldw	r2,-16(fp)
80217904:	10800917 	ldw	r2,36(r2)
80217908:	1000051e 	bne	r2,zero,80217920 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
8021790c:	e0bffe17 	ldw	r2,-8(fp)
80217910:	00bfd016 	blt	zero,r2,80217854 <__reset+0xfa1f7854>
80217914:	00000306 	br	80217924 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
80217918:	0001883a 	nop
8021791c:	00000106 	br	80217924 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
80217920:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
80217924:	e0fffd17 	ldw	r3,-12(fp)
80217928:	e0bff717 	ldw	r2,-36(fp)
8021792c:	18800426 	beq	r3,r2,80217940 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
80217930:	e0fffd17 	ldw	r3,-12(fp)
80217934:	e0bff717 	ldw	r2,-36(fp)
80217938:	1885c83a 	sub	r2,r3,r2
8021793c:	00000606 	br	80217958 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
80217940:	e0bfff17 	ldw	r2,-4(fp)
80217944:	1090000c 	andi	r2,r2,16384
80217948:	10000226 	beq	r2,zero,80217954 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
8021794c:	00bffd44 	movi	r2,-11
80217950:	00000106 	br	80217958 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
80217954:	00bffec4 	movi	r2,-5
}
80217958:	e037883a 	mov	sp,fp
8021795c:	dfc00117 	ldw	ra,4(sp)
80217960:	df000017 	ldw	fp,0(sp)
80217964:	dec00204 	addi	sp,sp,8
80217968:	f800283a 	ret

8021796c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8021796c:	defffa04 	addi	sp,sp,-24
80217970:	dfc00515 	stw	ra,20(sp)
80217974:	df000415 	stw	fp,16(sp)
80217978:	df000404 	addi	fp,sp,16
8021797c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
80217980:	0007883a 	mov	r3,zero
80217984:	e0bfff17 	ldw	r2,-4(fp)
80217988:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8021798c:	e0bfff17 	ldw	r2,-4(fp)
80217990:	10800104 	addi	r2,r2,4
80217994:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217998:	0005303a 	rdctl	r2,status
8021799c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802179a0:	e0fffd17 	ldw	r3,-12(fp)
802179a4:	00bfff84 	movi	r2,-2
802179a8:	1884703a 	and	r2,r3,r2
802179ac:	1001703a 	wrctl	status,r2
  
  return context;
802179b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
802179b4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
802179b8:	0216b440 	call	80216b44 <alt_tick>
802179bc:	e0bffc17 	ldw	r2,-16(fp)
802179c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802179c4:	e0bffe17 	ldw	r2,-8(fp)
802179c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
802179cc:	0001883a 	nop
802179d0:	e037883a 	mov	sp,fp
802179d4:	dfc00117 	ldw	ra,4(sp)
802179d8:	df000017 	ldw	fp,0(sp)
802179dc:	dec00204 	addi	sp,sp,8
802179e0:	f800283a 	ret

802179e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
802179e4:	defff804 	addi	sp,sp,-32
802179e8:	dfc00715 	stw	ra,28(sp)
802179ec:	df000615 	stw	fp,24(sp)
802179f0:	df000604 	addi	fp,sp,24
802179f4:	e13ffc15 	stw	r4,-16(fp)
802179f8:	e17ffd15 	stw	r5,-12(fp)
802179fc:	e1bffe15 	stw	r6,-8(fp)
80217a00:	e1ffff15 	stw	r7,-4(fp)
80217a04:	e0bfff17 	ldw	r2,-4(fp)
80217a08:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
80217a0c:	d0a02717 	ldw	r2,-32612(gp)
80217a10:	1000021e 	bne	r2,zero,80217a1c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
80217a14:	e0bffb17 	ldw	r2,-20(fp)
80217a18:	d0a02715 	stw	r2,-32612(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
80217a1c:	e0bffc17 	ldw	r2,-16(fp)
80217a20:	10800104 	addi	r2,r2,4
80217a24:	00c001c4 	movi	r3,7
80217a28:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
80217a2c:	d8000015 	stw	zero,0(sp)
80217a30:	e1fffc17 	ldw	r7,-16(fp)
80217a34:	01a00874 	movhi	r6,32801
80217a38:	319e5b04 	addi	r6,r6,31084
80217a3c:	e17ffe17 	ldw	r5,-8(fp)
80217a40:	e13ffd17 	ldw	r4,-12(fp)
80217a44:	021a65c0 	call	8021a65c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
80217a48:	0001883a 	nop
80217a4c:	e037883a 	mov	sp,fp
80217a50:	dfc00117 	ldw	ra,4(sp)
80217a54:	df000017 	ldw	fp,0(sp)
80217a58:	dec00204 	addi	sp,sp,8
80217a5c:	f800283a 	ret

80217a60 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
80217a60:	defffa04 	addi	sp,sp,-24
80217a64:	dfc00515 	stw	ra,20(sp)
80217a68:	df000415 	stw	fp,16(sp)
80217a6c:	df000404 	addi	fp,sp,16
80217a70:	e13ffd15 	stw	r4,-12(fp)
80217a74:	e17ffe15 	stw	r5,-8(fp)
80217a78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80217a7c:	e0bffd17 	ldw	r2,-12(fp)
80217a80:	10800017 	ldw	r2,0(r2)
80217a84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
80217a88:	e0bffc17 	ldw	r2,-16(fp)
80217a8c:	10c00a04 	addi	r3,r2,40
80217a90:	e0bffd17 	ldw	r2,-12(fp)
80217a94:	10800217 	ldw	r2,8(r2)
80217a98:	100f883a 	mov	r7,r2
80217a9c:	e1bfff17 	ldw	r6,-4(fp)
80217aa0:	e17ffe17 	ldw	r5,-8(fp)
80217aa4:	1809883a 	mov	r4,r3
80217aa8:	0217f740 	call	80217f74 <altera_avalon_uart_read>
      fd->fd_flags);
}
80217aac:	e037883a 	mov	sp,fp
80217ab0:	dfc00117 	ldw	ra,4(sp)
80217ab4:	df000017 	ldw	fp,0(sp)
80217ab8:	dec00204 	addi	sp,sp,8
80217abc:	f800283a 	ret

80217ac0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
80217ac0:	defffa04 	addi	sp,sp,-24
80217ac4:	dfc00515 	stw	ra,20(sp)
80217ac8:	df000415 	stw	fp,16(sp)
80217acc:	df000404 	addi	fp,sp,16
80217ad0:	e13ffd15 	stw	r4,-12(fp)
80217ad4:	e17ffe15 	stw	r5,-8(fp)
80217ad8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80217adc:	e0bffd17 	ldw	r2,-12(fp)
80217ae0:	10800017 	ldw	r2,0(r2)
80217ae4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
80217ae8:	e0bffc17 	ldw	r2,-16(fp)
80217aec:	10c00a04 	addi	r3,r2,40
80217af0:	e0bffd17 	ldw	r2,-12(fp)
80217af4:	10800217 	ldw	r2,8(r2)
80217af8:	100f883a 	mov	r7,r2
80217afc:	e1bfff17 	ldw	r6,-4(fp)
80217b00:	e17ffe17 	ldw	r5,-8(fp)
80217b04:	1809883a 	mov	r4,r3
80217b08:	021818c0 	call	8021818c <altera_avalon_uart_write>
      fd->fd_flags);
}
80217b0c:	e037883a 	mov	sp,fp
80217b10:	dfc00117 	ldw	ra,4(sp)
80217b14:	df000017 	ldw	fp,0(sp)
80217b18:	dec00204 	addi	sp,sp,8
80217b1c:	f800283a 	ret

80217b20 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
80217b20:	defffc04 	addi	sp,sp,-16
80217b24:	dfc00315 	stw	ra,12(sp)
80217b28:	df000215 	stw	fp,8(sp)
80217b2c:	df000204 	addi	fp,sp,8
80217b30:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80217b34:	e0bfff17 	ldw	r2,-4(fp)
80217b38:	10800017 	ldw	r2,0(r2)
80217b3c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
80217b40:	e0bffe17 	ldw	r2,-8(fp)
80217b44:	10c00a04 	addi	r3,r2,40
80217b48:	e0bfff17 	ldw	r2,-4(fp)
80217b4c:	10800217 	ldw	r2,8(r2)
80217b50:	100b883a 	mov	r5,r2
80217b54:	1809883a 	mov	r4,r3
80217b58:	0217ee40 	call	80217ee4 <altera_avalon_uart_close>
}
80217b5c:	e037883a 	mov	sp,fp
80217b60:	dfc00117 	ldw	ra,4(sp)
80217b64:	df000017 	ldw	fp,0(sp)
80217b68:	dec00204 	addi	sp,sp,8
80217b6c:	f800283a 	ret

80217b70 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
80217b70:	defff804 	addi	sp,sp,-32
80217b74:	dfc00715 	stw	ra,28(sp)
80217b78:	df000615 	stw	fp,24(sp)
80217b7c:	df000604 	addi	fp,sp,24
80217b80:	e13ffd15 	stw	r4,-12(fp)
80217b84:	e17ffe15 	stw	r5,-8(fp)
80217b88:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
80217b8c:	e0bffd17 	ldw	r2,-12(fp)
80217b90:	10800017 	ldw	r2,0(r2)
80217b94:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
80217b98:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
80217b9c:	1000041e 	bne	r2,zero,80217bb0 <altera_avalon_uart_init+0x40>
80217ba0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
80217ba4:	1000021e 	bne	r2,zero,80217bb0 <altera_avalon_uart_init+0x40>
80217ba8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
80217bac:	10000226 	beq	r2,zero,80217bb8 <altera_avalon_uart_init+0x48>
80217bb0:	00800044 	movi	r2,1
80217bb4:	00000106 	br	80217bbc <altera_avalon_uart_init+0x4c>
80217bb8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
80217bbc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
80217bc0:	e0bffc17 	ldw	r2,-16(fp)
80217bc4:	10000f1e 	bne	r2,zero,80217c04 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
80217bc8:	e0bffd17 	ldw	r2,-12(fp)
80217bcc:	00c32004 	movi	r3,3200
80217bd0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
80217bd4:	e0bffb17 	ldw	r2,-20(fp)
80217bd8:	10800304 	addi	r2,r2,12
80217bdc:	e0fffd17 	ldw	r3,-12(fp)
80217be0:	18c00117 	ldw	r3,4(r3)
80217be4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
80217be8:	d8000015 	stw	zero,0(sp)
80217bec:	e1fffd17 	ldw	r7,-12(fp)
80217bf0:	01a00874 	movhi	r6,32801
80217bf4:	319f0704 	addi	r6,r6,31772
80217bf8:	e17fff17 	ldw	r5,-4(fp)
80217bfc:	e13ffe17 	ldw	r4,-8(fp)
80217c00:	021a65c0 	call	8021a65c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
80217c04:	0001883a 	nop
80217c08:	e037883a 	mov	sp,fp
80217c0c:	dfc00117 	ldw	ra,4(sp)
80217c10:	df000017 	ldw	fp,0(sp)
80217c14:	dec00204 	addi	sp,sp,8
80217c18:	f800283a 	ret

80217c1c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
80217c1c:	defffa04 	addi	sp,sp,-24
80217c20:	dfc00515 	stw	ra,20(sp)
80217c24:	df000415 	stw	fp,16(sp)
80217c28:	df000404 	addi	fp,sp,16
80217c2c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
80217c30:	e0bfff17 	ldw	r2,-4(fp)
80217c34:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
80217c38:	e0bffc17 	ldw	r2,-16(fp)
80217c3c:	10800017 	ldw	r2,0(r2)
80217c40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
80217c44:	e0bffd17 	ldw	r2,-12(fp)
80217c48:	10800204 	addi	r2,r2,8
80217c4c:	10800037 	ldwio	r2,0(r2)
80217c50:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
80217c54:	e0bffd17 	ldw	r2,-12(fp)
80217c58:	10800204 	addi	r2,r2,8
80217c5c:	0007883a 	mov	r3,zero
80217c60:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
80217c64:	e0bffd17 	ldw	r2,-12(fp)
80217c68:	10800204 	addi	r2,r2,8
80217c6c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
80217c70:	e0bffe17 	ldw	r2,-8(fp)
80217c74:	1080200c 	andi	r2,r2,128
80217c78:	10000326 	beq	r2,zero,80217c88 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
80217c7c:	e17ffe17 	ldw	r5,-8(fp)
80217c80:	e13ffc17 	ldw	r4,-16(fp)
80217c84:	0217cb80 	call	80217cb8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
80217c88:	e0bffe17 	ldw	r2,-8(fp)
80217c8c:	1081100c 	andi	r2,r2,1088
80217c90:	10000326 	beq	r2,zero,80217ca0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
80217c94:	e17ffe17 	ldw	r5,-8(fp)
80217c98:	e13ffc17 	ldw	r4,-16(fp)
80217c9c:	0217d9c0 	call	80217d9c <altera_avalon_uart_txirq>
  }
  

}
80217ca0:	0001883a 	nop
80217ca4:	e037883a 	mov	sp,fp
80217ca8:	dfc00117 	ldw	ra,4(sp)
80217cac:	df000017 	ldw	fp,0(sp)
80217cb0:	dec00204 	addi	sp,sp,8
80217cb4:	f800283a 	ret

80217cb8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
80217cb8:	defffc04 	addi	sp,sp,-16
80217cbc:	df000315 	stw	fp,12(sp)
80217cc0:	df000304 	addi	fp,sp,12
80217cc4:	e13ffe15 	stw	r4,-8(fp)
80217cc8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
80217ccc:	e0bfff17 	ldw	r2,-4(fp)
80217cd0:	108000cc 	andi	r2,r2,3
80217cd4:	10002c1e 	bne	r2,zero,80217d88 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
80217cd8:	e0bffe17 	ldw	r2,-8(fp)
80217cdc:	10800317 	ldw	r2,12(r2)
80217ce0:	e0bffe17 	ldw	r2,-8(fp)
80217ce4:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80217ce8:	e0bffe17 	ldw	r2,-8(fp)
80217cec:	10800317 	ldw	r2,12(r2)
80217cf0:	10800044 	addi	r2,r2,1
80217cf4:	10800fcc 	andi	r2,r2,63
80217cf8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
80217cfc:	e0bffe17 	ldw	r2,-8(fp)
80217d00:	10800317 	ldw	r2,12(r2)
80217d04:	e0fffe17 	ldw	r3,-8(fp)
80217d08:	18c00017 	ldw	r3,0(r3)
80217d0c:	18c00037 	ldwio	r3,0(r3)
80217d10:	1809883a 	mov	r4,r3
80217d14:	e0fffe17 	ldw	r3,-8(fp)
80217d18:	1885883a 	add	r2,r3,r2
80217d1c:	10800704 	addi	r2,r2,28
80217d20:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
80217d24:	e0bffe17 	ldw	r2,-8(fp)
80217d28:	e0fffd17 	ldw	r3,-12(fp)
80217d2c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80217d30:	e0bffe17 	ldw	r2,-8(fp)
80217d34:	10800317 	ldw	r2,12(r2)
80217d38:	10800044 	addi	r2,r2,1
80217d3c:	10800fcc 	andi	r2,r2,63
80217d40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
80217d44:	e0bffe17 	ldw	r2,-8(fp)
80217d48:	10c00217 	ldw	r3,8(r2)
80217d4c:	e0bffd17 	ldw	r2,-12(fp)
80217d50:	18800e1e 	bne	r3,r2,80217d8c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80217d54:	e0bffe17 	ldw	r2,-8(fp)
80217d58:	10c00117 	ldw	r3,4(r2)
80217d5c:	00bfdfc4 	movi	r2,-129
80217d60:	1886703a 	and	r3,r3,r2
80217d64:	e0bffe17 	ldw	r2,-8(fp)
80217d68:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
80217d6c:	e0bffe17 	ldw	r2,-8(fp)
80217d70:	10800017 	ldw	r2,0(r2)
80217d74:	10800304 	addi	r2,r2,12
80217d78:	e0fffe17 	ldw	r3,-8(fp)
80217d7c:	18c00117 	ldw	r3,4(r3)
80217d80:	10c00035 	stwio	r3,0(r2)
80217d84:	00000106 	br	80217d8c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
80217d88:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
80217d8c:	e037883a 	mov	sp,fp
80217d90:	df000017 	ldw	fp,0(sp)
80217d94:	dec00104 	addi	sp,sp,4
80217d98:	f800283a 	ret

80217d9c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
80217d9c:	defffb04 	addi	sp,sp,-20
80217da0:	df000415 	stw	fp,16(sp)
80217da4:	df000404 	addi	fp,sp,16
80217da8:	e13ffc15 	stw	r4,-16(fp)
80217dac:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
80217db0:	e0bffc17 	ldw	r2,-16(fp)
80217db4:	10c00417 	ldw	r3,16(r2)
80217db8:	e0bffc17 	ldw	r2,-16(fp)
80217dbc:	10800517 	ldw	r2,20(r2)
80217dc0:	18803226 	beq	r3,r2,80217e8c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
80217dc4:	e0bffc17 	ldw	r2,-16(fp)
80217dc8:	10800617 	ldw	r2,24(r2)
80217dcc:	1080008c 	andi	r2,r2,2
80217dd0:	10000326 	beq	r2,zero,80217de0 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
80217dd4:	e0bffd17 	ldw	r2,-12(fp)
80217dd8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
80217ddc:	10001d26 	beq	r2,zero,80217e54 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
80217de0:	e0bffc17 	ldw	r2,-16(fp)
80217de4:	10800417 	ldw	r2,16(r2)
80217de8:	e0bffc17 	ldw	r2,-16(fp)
80217dec:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
80217df0:	e0bffc17 	ldw	r2,-16(fp)
80217df4:	10800017 	ldw	r2,0(r2)
80217df8:	10800104 	addi	r2,r2,4
80217dfc:	e0fffc17 	ldw	r3,-16(fp)
80217e00:	18c00417 	ldw	r3,16(r3)
80217e04:	e13ffc17 	ldw	r4,-16(fp)
80217e08:	20c7883a 	add	r3,r4,r3
80217e0c:	18c01704 	addi	r3,r3,92
80217e10:	18c00003 	ldbu	r3,0(r3)
80217e14:	18c03fcc 	andi	r3,r3,255
80217e18:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
80217e1c:	e0bffc17 	ldw	r2,-16(fp)
80217e20:	10800417 	ldw	r2,16(r2)
80217e24:	10800044 	addi	r2,r2,1
80217e28:	e0fffc17 	ldw	r3,-16(fp)
80217e2c:	18800415 	stw	r2,16(r3)
80217e30:	10c00fcc 	andi	r3,r2,63
80217e34:	e0bffc17 	ldw	r2,-16(fp)
80217e38:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
80217e3c:	e0bffc17 	ldw	r2,-16(fp)
80217e40:	10800117 	ldw	r2,4(r2)
80217e44:	10c01014 	ori	r3,r2,64
80217e48:	e0bffc17 	ldw	r2,-16(fp)
80217e4c:	10c00115 	stw	r3,4(r2)
80217e50:	00000e06 	br	80217e8c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
80217e54:	e0bffc17 	ldw	r2,-16(fp)
80217e58:	10800017 	ldw	r2,0(r2)
80217e5c:	10800204 	addi	r2,r2,8
80217e60:	10800037 	ldwio	r2,0(r2)
80217e64:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
80217e68:	e0bffd17 	ldw	r2,-12(fp)
80217e6c:	1082000c 	andi	r2,r2,2048
80217e70:	1000061e 	bne	r2,zero,80217e8c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
80217e74:	e0bffc17 	ldw	r2,-16(fp)
80217e78:	10c00117 	ldw	r3,4(r2)
80217e7c:	00bfefc4 	movi	r2,-65
80217e80:	1886703a 	and	r3,r3,r2
80217e84:	e0bffc17 	ldw	r2,-16(fp)
80217e88:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
80217e8c:	e0bffc17 	ldw	r2,-16(fp)
80217e90:	10c00417 	ldw	r3,16(r2)
80217e94:	e0bffc17 	ldw	r2,-16(fp)
80217e98:	10800517 	ldw	r2,20(r2)
80217e9c:	1880061e 	bne	r3,r2,80217eb8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80217ea0:	e0bffc17 	ldw	r2,-16(fp)
80217ea4:	10c00117 	ldw	r3,4(r2)
80217ea8:	00beefc4 	movi	r2,-1089
80217eac:	1886703a 	and	r3,r3,r2
80217eb0:	e0bffc17 	ldw	r2,-16(fp)
80217eb4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80217eb8:	e0bffc17 	ldw	r2,-16(fp)
80217ebc:	10800017 	ldw	r2,0(r2)
80217ec0:	10800304 	addi	r2,r2,12
80217ec4:	e0fffc17 	ldw	r3,-16(fp)
80217ec8:	18c00117 	ldw	r3,4(r3)
80217ecc:	10c00035 	stwio	r3,0(r2)
}
80217ed0:	0001883a 	nop
80217ed4:	e037883a 	mov	sp,fp
80217ed8:	df000017 	ldw	fp,0(sp)
80217edc:	dec00104 	addi	sp,sp,4
80217ee0:	f800283a 	ret

80217ee4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
80217ee4:	defffd04 	addi	sp,sp,-12
80217ee8:	df000215 	stw	fp,8(sp)
80217eec:	df000204 	addi	fp,sp,8
80217ef0:	e13ffe15 	stw	r4,-8(fp)
80217ef4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
80217ef8:	00000506 	br	80217f10 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
80217efc:	e0bfff17 	ldw	r2,-4(fp)
80217f00:	1090000c 	andi	r2,r2,16384
80217f04:	10000226 	beq	r2,zero,80217f10 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
80217f08:	00bffd44 	movi	r2,-11
80217f0c:	00000606 	br	80217f28 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
80217f10:	e0bffe17 	ldw	r2,-8(fp)
80217f14:	10c00417 	ldw	r3,16(r2)
80217f18:	e0bffe17 	ldw	r2,-8(fp)
80217f1c:	10800517 	ldw	r2,20(r2)
80217f20:	18bff61e 	bne	r3,r2,80217efc <__reset+0xfa1f7efc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80217f24:	0005883a 	mov	r2,zero
}
80217f28:	e037883a 	mov	sp,fp
80217f2c:	df000017 	ldw	fp,0(sp)
80217f30:	dec00104 	addi	sp,sp,4
80217f34:	f800283a 	ret

80217f38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80217f38:	defffe04 	addi	sp,sp,-8
80217f3c:	dfc00115 	stw	ra,4(sp)
80217f40:	df000015 	stw	fp,0(sp)
80217f44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80217f48:	d0a00c17 	ldw	r2,-32720(gp)
80217f4c:	10000326 	beq	r2,zero,80217f5c <alt_get_errno+0x24>
80217f50:	d0a00c17 	ldw	r2,-32720(gp)
80217f54:	103ee83a 	callr	r2
80217f58:	00000106 	br	80217f60 <alt_get_errno+0x28>
80217f5c:	d0a02304 	addi	r2,gp,-32628
}
80217f60:	e037883a 	mov	sp,fp
80217f64:	dfc00117 	ldw	ra,4(sp)
80217f68:	df000017 	ldw	fp,0(sp)
80217f6c:	dec00204 	addi	sp,sp,8
80217f70:	f800283a 	ret

80217f74 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
80217f74:	defff204 	addi	sp,sp,-56
80217f78:	dfc00d15 	stw	ra,52(sp)
80217f7c:	df000c15 	stw	fp,48(sp)
80217f80:	df000c04 	addi	fp,sp,48
80217f84:	e13ffc15 	stw	r4,-16(fp)
80217f88:	e17ffd15 	stw	r5,-12(fp)
80217f8c:	e1bffe15 	stw	r6,-8(fp)
80217f90:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
80217f94:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
80217f98:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
80217f9c:	e0bfff17 	ldw	r2,-4(fp)
80217fa0:	1090000c 	andi	r2,r2,16384
80217fa4:	1005003a 	cmpeq	r2,r2,zero
80217fa8:	10803fcc 	andi	r2,r2,255
80217fac:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
80217fb0:	00001306 	br	80218000 <altera_avalon_uart_read+0x8c>
    {
      count++;
80217fb4:	e0bff517 	ldw	r2,-44(fp)
80217fb8:	10800044 	addi	r2,r2,1
80217fbc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
80217fc0:	e0bffd17 	ldw	r2,-12(fp)
80217fc4:	10c00044 	addi	r3,r2,1
80217fc8:	e0fffd15 	stw	r3,-12(fp)
80217fcc:	e0fffc17 	ldw	r3,-16(fp)
80217fd0:	18c00217 	ldw	r3,8(r3)
80217fd4:	e13ffc17 	ldw	r4,-16(fp)
80217fd8:	20c7883a 	add	r3,r4,r3
80217fdc:	18c00704 	addi	r3,r3,28
80217fe0:	18c00003 	ldbu	r3,0(r3)
80217fe4:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
80217fe8:	e0bffc17 	ldw	r2,-16(fp)
80217fec:	10800217 	ldw	r2,8(r2)
80217ff0:	10800044 	addi	r2,r2,1
80217ff4:	10c00fcc 	andi	r3,r2,63
80217ff8:	e0bffc17 	ldw	r2,-16(fp)
80217ffc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
80218000:	e0fff517 	ldw	r3,-44(fp)
80218004:	e0bffe17 	ldw	r2,-8(fp)
80218008:	1880050e 	bge	r3,r2,80218020 <altera_avalon_uart_read+0xac>
8021800c:	e0bffc17 	ldw	r2,-16(fp)
80218010:	10c00217 	ldw	r3,8(r2)
80218014:	e0bffc17 	ldw	r2,-16(fp)
80218018:	10800317 	ldw	r2,12(r2)
8021801c:	18bfe51e 	bne	r3,r2,80217fb4 <__reset+0xfa1f7fb4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
80218020:	e0bff517 	ldw	r2,-44(fp)
80218024:	1000251e 	bne	r2,zero,802180bc <altera_avalon_uart_read+0x148>
80218028:	e0bffc17 	ldw	r2,-16(fp)
8021802c:	10c00217 	ldw	r3,8(r2)
80218030:	e0bffc17 	ldw	r2,-16(fp)
80218034:	10800317 	ldw	r2,12(r2)
80218038:	1880201e 	bne	r3,r2,802180bc <altera_avalon_uart_read+0x148>
    {
      if (!block)
8021803c:	e0bff617 	ldw	r2,-40(fp)
80218040:	1000071e 	bne	r2,zero,80218060 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
80218044:	0217f380 	call	80217f38 <alt_get_errno>
80218048:	1007883a 	mov	r3,r2
8021804c:	008002c4 	movi	r2,11
80218050:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
80218054:	00800044 	movi	r2,1
80218058:	e0bff405 	stb	r2,-48(fp)
        break;
8021805c:	00001b06 	br	802180cc <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218060:	0005303a 	rdctl	r2,status
80218064:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218068:	e0fff917 	ldw	r3,-28(fp)
8021806c:	00bfff84 	movi	r2,-2
80218070:	1884703a 	and	r2,r3,r2
80218074:	1001703a 	wrctl	status,r2
  
  return context;
80218078:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
8021807c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80218080:	e0bffc17 	ldw	r2,-16(fp)
80218084:	10800117 	ldw	r2,4(r2)
80218088:	10c02014 	ori	r3,r2,128
8021808c:	e0bffc17 	ldw	r2,-16(fp)
80218090:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80218094:	e0bffc17 	ldw	r2,-16(fp)
80218098:	10800017 	ldw	r2,0(r2)
8021809c:	10800304 	addi	r2,r2,12
802180a0:	e0fffc17 	ldw	r3,-16(fp)
802180a4:	18c00117 	ldw	r3,4(r3)
802180a8:	10c00035 	stwio	r3,0(r2)
802180ac:	e0bff817 	ldw	r2,-32(fp)
802180b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802180b4:	e0bffa17 	ldw	r2,-24(fp)
802180b8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
802180bc:	e0bff517 	ldw	r2,-44(fp)
802180c0:	1000021e 	bne	r2,zero,802180cc <altera_avalon_uart_read+0x158>
802180c4:	e0bffe17 	ldw	r2,-8(fp)
802180c8:	103fcd1e 	bne	r2,zero,80218000 <__reset+0xfa1f8000>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802180cc:	0005303a 	rdctl	r2,status
802180d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802180d4:	e0fffb17 	ldw	r3,-20(fp)
802180d8:	00bfff84 	movi	r2,-2
802180dc:	1884703a 	and	r2,r3,r2
802180e0:	1001703a 	wrctl	status,r2
  
  return context;
802180e4:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
802180e8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
802180ec:	e0bffc17 	ldw	r2,-16(fp)
802180f0:	10800117 	ldw	r2,4(r2)
802180f4:	10c02014 	ori	r3,r2,128
802180f8:	e0bffc17 	ldw	r2,-16(fp)
802180fc:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80218100:	e0bffc17 	ldw	r2,-16(fp)
80218104:	10800017 	ldw	r2,0(r2)
80218108:	10800304 	addi	r2,r2,12
8021810c:	e0fffc17 	ldw	r3,-16(fp)
80218110:	18c00117 	ldw	r3,4(r3)
80218114:	10c00035 	stwio	r3,0(r2)
80218118:	e0bff817 	ldw	r2,-32(fp)
8021811c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218120:	e0bff717 	ldw	r2,-36(fp)
80218124:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
80218128:	e0bff403 	ldbu	r2,-48(fp)
8021812c:	10000226 	beq	r2,zero,80218138 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
80218130:	00bffd44 	movi	r2,-11
80218134:	00000106 	br	8021813c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
80218138:	e0bff517 	ldw	r2,-44(fp)
  }
}
8021813c:	e037883a 	mov	sp,fp
80218140:	dfc00117 	ldw	ra,4(sp)
80218144:	df000017 	ldw	fp,0(sp)
80218148:	dec00204 	addi	sp,sp,8
8021814c:	f800283a 	ret

80218150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80218150:	defffe04 	addi	sp,sp,-8
80218154:	dfc00115 	stw	ra,4(sp)
80218158:	df000015 	stw	fp,0(sp)
8021815c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80218160:	d0a00c17 	ldw	r2,-32720(gp)
80218164:	10000326 	beq	r2,zero,80218174 <alt_get_errno+0x24>
80218168:	d0a00c17 	ldw	r2,-32720(gp)
8021816c:	103ee83a 	callr	r2
80218170:	00000106 	br	80218178 <alt_get_errno+0x28>
80218174:	d0a02304 	addi	r2,gp,-32628
}
80218178:	e037883a 	mov	sp,fp
8021817c:	dfc00117 	ldw	ra,4(sp)
80218180:	df000017 	ldw	fp,0(sp)
80218184:	dec00204 	addi	sp,sp,8
80218188:	f800283a 	ret

8021818c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8021818c:	defff204 	addi	sp,sp,-56
80218190:	dfc00d15 	stw	ra,52(sp)
80218194:	df000c15 	stw	fp,48(sp)
80218198:	df000c04 	addi	fp,sp,48
8021819c:	e13ffc15 	stw	r4,-16(fp)
802181a0:	e17ffd15 	stw	r5,-12(fp)
802181a4:	e1bffe15 	stw	r6,-8(fp)
802181a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
802181ac:	e0bffe17 	ldw	r2,-8(fp)
802181b0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
802181b4:	e0bfff17 	ldw	r2,-4(fp)
802181b8:	1090000c 	andi	r2,r2,16384
802181bc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
802181c0:	00003c06 	br	802182b4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
802181c4:	e0bffc17 	ldw	r2,-16(fp)
802181c8:	10800517 	ldw	r2,20(r2)
802181cc:	10800044 	addi	r2,r2,1
802181d0:	10800fcc 	andi	r2,r2,63
802181d4:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
802181d8:	e0bffc17 	ldw	r2,-16(fp)
802181dc:	10c00417 	ldw	r3,16(r2)
802181e0:	e0bff717 	ldw	r2,-36(fp)
802181e4:	1880221e 	bne	r3,r2,80218270 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
802181e8:	e0bff517 	ldw	r2,-44(fp)
802181ec:	10000526 	beq	r2,zero,80218204 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
802181f0:	02181500 	call	80218150 <alt_get_errno>
802181f4:	1007883a 	mov	r3,r2
802181f8:	008002c4 	movi	r2,11
802181fc:	18800015 	stw	r2,0(r3)
        break;
80218200:	00002e06 	br	802182bc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218204:	0005303a 	rdctl	r2,status
80218208:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021820c:	e0fff917 	ldw	r3,-28(fp)
80218210:	00bfff84 	movi	r2,-2
80218214:	1884703a 	and	r2,r3,r2
80218218:	1001703a 	wrctl	status,r2
  
  return context;
8021821c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
80218220:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80218224:	e0bffc17 	ldw	r2,-16(fp)
80218228:	10800117 	ldw	r2,4(r2)
8021822c:	10c11014 	ori	r3,r2,1088
80218230:	e0bffc17 	ldw	r2,-16(fp)
80218234:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80218238:	e0bffc17 	ldw	r2,-16(fp)
8021823c:	10800017 	ldw	r2,0(r2)
80218240:	10800304 	addi	r2,r2,12
80218244:	e0fffc17 	ldw	r3,-16(fp)
80218248:	18c00117 	ldw	r3,4(r3)
8021824c:	10c00035 	stwio	r3,0(r2)
80218250:	e0bff817 	ldw	r2,-32(fp)
80218254:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218258:	e0bff617 	ldw	r2,-40(fp)
8021825c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
80218260:	e0bffc17 	ldw	r2,-16(fp)
80218264:	10c00417 	ldw	r3,16(r2)
80218268:	e0bff717 	ldw	r2,-36(fp)
8021826c:	18bffc26 	beq	r3,r2,80218260 <__reset+0xfa1f8260>
      }
    }

    count--;
80218270:	e0bff417 	ldw	r2,-48(fp)
80218274:	10bfffc4 	addi	r2,r2,-1
80218278:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
8021827c:	e0bffc17 	ldw	r2,-16(fp)
80218280:	10c00517 	ldw	r3,20(r2)
80218284:	e0bffd17 	ldw	r2,-12(fp)
80218288:	11000044 	addi	r4,r2,1
8021828c:	e13ffd15 	stw	r4,-12(fp)
80218290:	10800003 	ldbu	r2,0(r2)
80218294:	1009883a 	mov	r4,r2
80218298:	e0bffc17 	ldw	r2,-16(fp)
8021829c:	10c5883a 	add	r2,r2,r3
802182a0:	10801704 	addi	r2,r2,92
802182a4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
802182a8:	e0bffc17 	ldw	r2,-16(fp)
802182ac:	e0fff717 	ldw	r3,-36(fp)
802182b0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
802182b4:	e0bff417 	ldw	r2,-48(fp)
802182b8:	103fc21e 	bne	r2,zero,802181c4 <__reset+0xfa1f81c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802182bc:	0005303a 	rdctl	r2,status
802182c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802182c4:	e0fffb17 	ldw	r3,-20(fp)
802182c8:	00bfff84 	movi	r2,-2
802182cc:	1884703a 	and	r2,r3,r2
802182d0:	1001703a 	wrctl	status,r2
  
  return context;
802182d4:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
802182d8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
802182dc:	e0bffc17 	ldw	r2,-16(fp)
802182e0:	10800117 	ldw	r2,4(r2)
802182e4:	10c11014 	ori	r3,r2,1088
802182e8:	e0bffc17 	ldw	r2,-16(fp)
802182ec:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
802182f0:	e0bffc17 	ldw	r2,-16(fp)
802182f4:	10800017 	ldw	r2,0(r2)
802182f8:	10800304 	addi	r2,r2,12
802182fc:	e0fffc17 	ldw	r3,-16(fp)
80218300:	18c00117 	ldw	r3,4(r3)
80218304:	10c00035 	stwio	r3,0(r2)
80218308:	e0bff817 	ldw	r2,-32(fp)
8021830c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218310:	e0bffa17 	ldw	r2,-24(fp)
80218314:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
80218318:	e0fffe17 	ldw	r3,-8(fp)
8021831c:	e0bff417 	ldw	r2,-48(fp)
80218320:	1885c83a 	sub	r2,r3,r2
}
80218324:	e037883a 	mov	sp,fp
80218328:	dfc00117 	ldw	ra,4(sp)
8021832c:	df000017 	ldw	fp,0(sp)
80218330:	dec00204 	addi	sp,sp,8
80218334:	f800283a 	ret

80218338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80218338:	defffe04 	addi	sp,sp,-8
8021833c:	dfc00115 	stw	ra,4(sp)
80218340:	df000015 	stw	fp,0(sp)
80218344:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80218348:	d0a00c17 	ldw	r2,-32720(gp)
8021834c:	10000326 	beq	r2,zero,8021835c <alt_get_errno+0x24>
80218350:	d0a00c17 	ldw	r2,-32720(gp)
80218354:	103ee83a 	callr	r2
80218358:	00000106 	br	80218360 <alt_get_errno+0x28>
8021835c:	d0a02304 	addi	r2,gp,-32628
}
80218360:	e037883a 	mov	sp,fp
80218364:	dfc00117 	ldw	ra,4(sp)
80218368:	df000017 	ldw	fp,0(sp)
8021836c:	dec00204 	addi	sp,sp,8
80218370:	f800283a 	ret

80218374 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
80218374:	defffc04 	addi	sp,sp,-16
80218378:	df000315 	stw	fp,12(sp)
8021837c:	df000304 	addi	fp,sp,12
80218380:	e13ffd15 	stw	r4,-12(fp)
80218384:	e17ffe15 	stw	r5,-8(fp)
80218388:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8021838c:	e0bffd17 	ldw	r2,-12(fp)
80218390:	10800037 	ldwio	r2,0(r2)
80218394:	1080010c 	andi	r2,r2,4
80218398:	10000226 	beq	r2,zero,802183a4 <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
8021839c:	00bff904 	movi	r2,-28
802183a0:	00001506 	br	802183f8 <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
802183a4:	e0bfff17 	ldw	r2,-4(fp)
802183a8:	10800017 	ldw	r2,0(r2)
802183ac:	1007883a 	mov	r3,r2
802183b0:	e0bffe17 	ldw	r2,-8(fp)
802183b4:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
802183b8:	e0bffe17 	ldw	r2,-8(fp)
802183bc:	10800104 	addi	r2,r2,4
802183c0:	e0ffff17 	ldw	r3,-4(fp)
802183c4:	18c00117 	ldw	r3,4(r3)
802183c8:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
802183cc:	e0bffe17 	ldw	r2,-8(fp)
802183d0:	10800204 	addi	r2,r2,8
802183d4:	e0ffff17 	ldw	r3,-4(fp)
802183d8:	18c00217 	ldw	r3,8(r3)
802183dc:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
802183e0:	e0bffe17 	ldw	r2,-8(fp)
802183e4:	10800304 	addi	r2,r2,12
802183e8:	e0ffff17 	ldw	r3,-4(fp)
802183ec:	18c00317 	ldw	r3,12(r3)
802183f0:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
802183f4:	0005883a 	mov	r2,zero
}
802183f8:	e037883a 	mov	sp,fp
802183fc:	df000017 	ldw	fp,0(sp)
80218400:	dec00104 	addi	sp,sp,4
80218404:	f800283a 	ret

80218408 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
80218408:	defffc04 	addi	sp,sp,-16
8021840c:	df000315 	stw	fp,12(sp)
80218410:	df000304 	addi	fp,sp,12
80218414:	e13ffd15 	stw	r4,-12(fp)
80218418:	e17ffe15 	stw	r5,-8(fp)
8021841c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80218420:	e0bffd17 	ldw	r2,-12(fp)
80218424:	10800037 	ldwio	r2,0(r2)
80218428:	1080010c 	andi	r2,r2,4
8021842c:	10000226 	beq	r2,zero,80218438 <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
80218430:	00bff904 	movi	r2,-28
80218434:	00003b06 	br	80218524 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
80218438:	e0bfff17 	ldw	r2,-4(fp)
8021843c:	10800017 	ldw	r2,0(r2)
80218440:	1007883a 	mov	r3,r2
80218444:	e0bffe17 	ldw	r2,-8(fp)
80218448:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8021844c:	e0bffe17 	ldw	r2,-8(fp)
80218450:	10800104 	addi	r2,r2,4
80218454:	e0ffff17 	ldw	r3,-4(fp)
80218458:	18c00117 	ldw	r3,4(r3)
8021845c:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
80218460:	e0bffe17 	ldw	r2,-8(fp)
80218464:	10800204 	addi	r2,r2,8
80218468:	e0ffff17 	ldw	r3,-4(fp)
8021846c:	18c00217 	ldw	r3,8(r3)
80218470:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
80218474:	e0bffe17 	ldw	r2,-8(fp)
80218478:	10800304 	addi	r2,r2,12
8021847c:	e0ffff17 	ldw	r3,-4(fp)
80218480:	18c0030b 	ldhu	r3,12(r3)
80218484:	18ffffcc 	andi	r3,r3,65535
80218488:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8021848c:	e0bffe17 	ldw	r2,-8(fp)
80218490:	10800384 	addi	r2,r2,14
80218494:	e0ffff17 	ldw	r3,-4(fp)
80218498:	18c00383 	ldbu	r3,14(r3)
8021849c:	18c03fcc 	andi	r3,r3,255
802184a0:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
802184a4:	e0bffe17 	ldw	r2,-8(fp)
802184a8:	108003c4 	addi	r2,r2,15
802184ac:	e0ffff17 	ldw	r3,-4(fp)
802184b0:	18c003c3 	ldbu	r3,15(r3)
802184b4:	18c03fcc 	andi	r3,r3,255
802184b8:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
802184bc:	e0bffe17 	ldw	r2,-8(fp)
802184c0:	10800404 	addi	r2,r2,16
802184c4:	e0ffff17 	ldw	r3,-4(fp)
802184c8:	18c0040b 	ldhu	r3,16(r3)
802184cc:	18ffffcc 	andi	r3,r3,65535
802184d0:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
802184d4:	e0bffe17 	ldw	r2,-8(fp)
802184d8:	10800484 	addi	r2,r2,18
802184dc:	e0ffff17 	ldw	r3,-4(fp)
802184e0:	18c0048b 	ldhu	r3,18(r3)
802184e4:	18ffffcc 	andi	r3,r3,65535
802184e8:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
802184ec:	e0bffe17 	ldw	r2,-8(fp)
802184f0:	10800504 	addi	r2,r2,20
802184f4:	0007883a 	mov	r3,zero
802184f8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
802184fc:	e0bffe17 	ldw	r2,-8(fp)
80218500:	10800604 	addi	r2,r2,24
80218504:	0007883a 	mov	r3,zero
80218508:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8021850c:	e0bffe17 	ldw	r2,-8(fp)
80218510:	10800704 	addi	r2,r2,28
80218514:	e0ffff17 	ldw	r3,-4(fp)
80218518:	18c00717 	ldw	r3,28(r3)
8021851c:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
80218520:	0005883a 	mov	r2,zero
}
80218524:	e037883a 	mov	sp,fp
80218528:	df000017 	ldw	fp,0(sp)
8021852c:	dec00104 	addi	sp,sp,4
80218530:	f800283a 	ret

80218534 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
80218534:	defff804 	addi	sp,sp,-32
80218538:	dfc00715 	stw	ra,28(sp)
8021853c:	df000615 	stw	fp,24(sp)
80218540:	df000604 	addi	fp,sp,24
80218544:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
80218548:	e0bfff17 	ldw	r2,-4(fp)
8021854c:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
80218550:	e0bffa17 	ldw	r2,-24(fp)
80218554:	10801783 	ldbu	r2,94(r2)
80218558:	10803fcc 	andi	r2,r2,255
8021855c:	10001126 	beq	r2,zero,802185a4 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80218560:	e0bffa17 	ldw	r2,-24(fp)
80218564:	10800617 	ldw	r2,24(r2)
80218568:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8021856c:	1007883a 	mov	r3,r2
80218570:	00bffdc4 	movi	r2,-9
80218574:	1884703a 	and	r2,r3,r2
80218578:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8021857c:	e0bffa17 	ldw	r2,-24(fp)
80218580:	10800617 	ldw	r2,24(r2)
80218584:	e0fffb17 	ldw	r3,-20(fp)
80218588:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8021858c:	e0bffa17 	ldw	r2,-24(fp)
80218590:	10800617 	ldw	r2,24(r2)
80218594:	10800404 	addi	r2,r2,16
80218598:	00c00044 	movi	r3,1
8021859c:	10c00035 	stwio	r3,0(r2)
802185a0:	00001106 	br	802185e8 <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
802185a4:	e0bffa17 	ldw	r2,-24(fp)
802185a8:	10800317 	ldw	r2,12(r2)
802185ac:	10800104 	addi	r2,r2,4
802185b0:	10800037 	ldwio	r2,0(r2)
802185b4:	1007883a 	mov	r3,r2
802185b8:	00bffbc4 	movi	r2,-17
802185bc:	1884703a 	and	r2,r3,r2
802185c0:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
802185c4:	e0bffa17 	ldw	r2,-24(fp)
802185c8:	10800317 	ldw	r2,12(r2)
802185cc:	10800104 	addi	r2,r2,4
802185d0:	e0fffb17 	ldw	r3,-20(fp)
802185d4:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
802185d8:	e0bffa17 	ldw	r2,-24(fp)
802185dc:	10800317 	ldw	r2,12(r2)
802185e0:	00c08004 	movi	r3,512
802185e4:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
802185e8:	e0bffa17 	ldw	r2,-24(fp)
802185ec:	10800b17 	ldw	r2,44(r2)
802185f0:	10001226 	beq	r2,zero,8021863c <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802185f4:	0005303a 	rdctl	r2,status
802185f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802185fc:	e0fffd17 	ldw	r3,-12(fp)
80218600:	00bfff84 	movi	r2,-2
80218604:	1884703a 	and	r2,r3,r2
80218608:	1001703a 	wrctl	status,r2
  
  return context;
8021860c:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
80218610:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
80218614:	e0bffa17 	ldw	r2,-24(fp)
80218618:	10800b17 	ldw	r2,44(r2)
8021861c:	e0fffa17 	ldw	r3,-24(fp)
80218620:	18c00c17 	ldw	r3,48(r3)
80218624:	1809883a 	mov	r4,r3
80218628:	103ee83a 	callr	r2
8021862c:	e0bffc17 	ldw	r2,-16(fp)
80218630:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218634:	e0bffe17 	ldw	r2,-8(fp)
80218638:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8021863c:	e0bffa17 	ldw	r2,-24(fp)
80218640:	10801783 	ldbu	r2,94(r2)
80218644:	10803fcc 	andi	r2,r2,255
80218648:	10000a26 	beq	r2,zero,80218674 <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8021864c:	e0bffa17 	ldw	r2,-24(fp)
80218650:	10800617 	ldw	r2,24(r2)
80218654:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80218658:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8021865c:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80218660:	e0bffa17 	ldw	r2,-24(fp)
80218664:	10800617 	ldw	r2,24(r2)
80218668:	e0fffb17 	ldw	r3,-20(fp)
8021866c:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
80218670:	00000c06 	br	802186a4 <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80218674:	e0bffa17 	ldw	r2,-24(fp)
80218678:	10800317 	ldw	r2,12(r2)
8021867c:	10800104 	addi	r2,r2,4
80218680:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
80218684:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80218688:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8021868c:	e0bffa17 	ldw	r2,-24(fp)
80218690:	10800317 	ldw	r2,12(r2)
80218694:	10800104 	addi	r2,r2,4
80218698:	e0fffb17 	ldw	r3,-20(fp)
8021869c:	10c00035 	stwio	r3,0(r2)
    }

    return;
802186a0:	0001883a 	nop
}
802186a4:	e037883a 	mov	sp,fp
802186a8:	dfc00117 	ldw	ra,4(sp)
802186ac:	df000017 	ldw	fp,0(sp)
802186b0:	dec00204 	addi	sp,sp,8
802186b4:	f800283a 	ret

802186b8 <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
802186b8:	defffb04 	addi	sp,sp,-20
802186bc:	df000415 	stw	fp,16(sp)
802186c0:	df000404 	addi	fp,sp,16
802186c4:	e13ffc15 	stw	r4,-16(fp)
802186c8:	e17ffd15 	stw	r5,-12(fp)
802186cc:	e1bffe15 	stw	r6,-8(fp)
802186d0:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
802186d4:	e0bffc17 	ldw	r2,-16(fp)
802186d8:	10c01217 	ldw	r3,72(r2)
802186dc:	e0800117 	ldw	r2,4(fp)
802186e0:	18800436 	bltu	r3,r2,802186f4 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
802186e4:	e0bffc17 	ldw	r2,-16(fp)
802186e8:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
802186ec:	10803fcc 	andi	r2,r2,255
802186f0:	10000226 	beq	r2,zero,802186fc <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
802186f4:	00bffa84 	movi	r2,-22
802186f8:	00000e06 	br	80218734 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
802186fc:	e0bffd17 	ldw	r2,-12(fp)
80218700:	e0fffe17 	ldw	r3,-8(fp)
80218704:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
80218708:	e0bffd17 	ldw	r2,-12(fp)
8021870c:	e0ffff17 	ldw	r3,-4(fp)
80218710:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80218714:	e0bffd17 	ldw	r2,-12(fp)
80218718:	e0c00117 	ldw	r3,4(fp)
8021871c:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80218720:	e0800217 	ldw	r2,8(fp)
80218724:	10e00034 	orhi	r3,r2,32768
80218728:	e0bffd17 	ldw	r2,-12(fp)
8021872c:	10c00315 	stw	r3,12(r2)
    
    return 0;
80218730:	0005883a 	mov	r2,zero
}
80218734:	e037883a 	mov	sp,fp
80218738:	df000017 	ldw	fp,0(sp)
8021873c:	dec00104 	addi	sp,sp,4
80218740:	f800283a 	ret

80218744 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80218744:	defff604 	addi	sp,sp,-40
80218748:	df000915 	stw	fp,36(sp)
8021874c:	df000904 	addi	fp,sp,36
80218750:	e13ff715 	stw	r4,-36(fp)
80218754:	e17ff815 	stw	r5,-32(fp)
80218758:	e1bff915 	stw	r6,-28(fp)
8021875c:	e1fffa15 	stw	r7,-24(fp)
80218760:	e1800317 	ldw	r6,12(fp)
80218764:	e1400417 	ldw	r5,16(fp)
80218768:	e1000517 	ldw	r4,20(fp)
8021876c:	e0c00617 	ldw	r3,24(fp)
80218770:	e0800717 	ldw	r2,28(fp)
80218774:	e1bffb0d 	sth	r6,-20(fp)
80218778:	e17ffc05 	stb	r5,-16(fp)
8021877c:	e13ffd05 	stb	r4,-12(fp)
80218780:	e0fffe0d 	sth	r3,-8(fp)
80218784:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
80218788:	e0bff717 	ldw	r2,-36(fp)
8021878c:	10c01217 	ldw	r3,72(r2)
80218790:	e0800117 	ldw	r2,4(fp)
80218794:	18801936 	bltu	r3,r2,802187fc <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
80218798:	e13ff717 	ldw	r4,-36(fp)
8021879c:	20801317 	ldw	r2,76(r4)
802187a0:	20c01417 	ldw	r3,80(r4)
802187a4:	e13ffe0b 	ldhu	r4,-8(fp)
802187a8:	213fffcc 	andi	r4,r4,65535
802187ac:	2015883a 	mov	r10,r4
802187b0:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
802187b4:	1ac01136 	bltu	r3,r11,802187fc <alt_msgdma_construct_extended_descriptor+0xb8>
802187b8:	58c0011e 	bne	r11,r3,802187c0 <alt_msgdma_construct_extended_descriptor+0x7c>
802187bc:	12800f36 	bltu	r2,r10,802187fc <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802187c0:	e13ff717 	ldw	r4,-36(fp)
802187c4:	20801317 	ldw	r2,76(r4)
802187c8:	20c01417 	ldw	r3,80(r4)
802187cc:	e13fff0b 	ldhu	r4,-4(fp)
802187d0:	213fffcc 	andi	r4,r4,65535
802187d4:	2011883a 	mov	r8,r4
802187d8:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
802187dc:	1a400736 	bltu	r3,r9,802187fc <alt_msgdma_construct_extended_descriptor+0xb8>
802187e0:	48c0011e 	bne	r9,r3,802187e8 <alt_msgdma_construct_extended_descriptor+0xa4>
802187e4:	12000536 	bltu	r2,r8,802187fc <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
802187e8:	e0bff717 	ldw	r2,-36(fp)
802187ec:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802187f0:	10803fcc 	andi	r2,r2,255
802187f4:	10800060 	cmpeqi	r2,r2,1
802187f8:	1000021e 	bne	r2,zero,80218804 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
802187fc:	00bffa84 	movi	r2,-22
80218800:	00002106 	br	80218888 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
80218804:	e0bff817 	ldw	r2,-32(fp)
80218808:	e0fff917 	ldw	r3,-28(fp)
8021880c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
80218810:	e0bff817 	ldw	r2,-32(fp)
80218814:	e0fffa17 	ldw	r3,-24(fp)
80218818:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8021881c:	e0bff817 	ldw	r2,-32(fp)
80218820:	e0c00117 	ldw	r3,4(fp)
80218824:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
80218828:	e0bff817 	ldw	r2,-32(fp)
8021882c:	e0fffb0b 	ldhu	r3,-20(fp)
80218830:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
80218834:	e0bff817 	ldw	r2,-32(fp)
80218838:	e0fffc03 	ldbu	r3,-16(fp)
8021883c:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
80218840:	e0bff817 	ldw	r2,-32(fp)
80218844:	e0fffd03 	ldbu	r3,-12(fp)
80218848:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8021884c:	e0bff817 	ldw	r2,-32(fp)
80218850:	e0fffe0b 	ldhu	r3,-8(fp)
80218854:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
80218858:	e0bff817 	ldw	r2,-32(fp)
8021885c:	e0ffff0b 	ldhu	r3,-4(fp)
80218860:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
80218864:	e0bff817 	ldw	r2,-32(fp)
80218868:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8021886c:	e0bff817 	ldw	r2,-32(fp)
80218870:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80218874:	e0800217 	ldw	r2,8(fp)
80218878:	10e00034 	orhi	r3,r2,32768
8021887c:	e0bff817 	ldw	r2,-32(fp)
80218880:	10c00715 	stw	r3,28(r2)

  return 0 ;
80218884:	0005883a 	mov	r2,zero

}
80218888:	e037883a 	mov	sp,fp
8021888c:	df000017 	ldw	fp,0(sp)
80218890:	dec00104 	addi	sp,sp,4
80218894:	f800283a 	ret

80218898 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
80218898:	defff004 	addi	sp,sp,-64
8021889c:	dfc00f15 	stw	ra,60(sp)
802188a0:	df000e15 	stw	fp,56(sp)
802188a4:	df000e04 	addi	fp,sp,56
802188a8:	e13ffd15 	stw	r4,-12(fp)
802188ac:	e17ffe15 	stw	r5,-8(fp)
802188b0:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
802188b4:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
802188b8:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
802188bc:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
802188c0:	e0bffd17 	ldw	r2,-12(fp)
802188c4:	10800317 	ldw	r2,12(r2)
802188c8:	10800204 	addi	r2,r2,8
802188cc:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
802188d0:	10bfffcc 	andi	r2,r2,65535
802188d4:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
802188d8:	e0bffd17 	ldw	r2,-12(fp)
802188dc:	10800317 	ldw	r2,12(r2)
802188e0:	10800204 	addi	r2,r2,8
802188e4:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
802188e8:	1004d43a 	srli	r2,r2,16
802188ec:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
802188f0:	e0bffd17 	ldw	r2,-12(fp)
802188f4:	10800917 	ldw	r2,36(r2)
802188f8:	e0fff617 	ldw	r3,-40(fp)
802188fc:	1880042e 	bgeu	r3,r2,80218910 <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
80218900:	e0bffd17 	ldw	r2,-12(fp)
80218904:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80218908:	e0fff517 	ldw	r3,-44(fp)
8021890c:	18800236 	bltu	r3,r2,80218918 <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
80218910:	00bff904 	movi	r2,-28
80218914:	00008f06 	br	80218b54 <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80218918:	00800804 	movi	r2,32
8021891c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218920:	0005303a 	rdctl	r2,status
80218924:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218928:	e0fff717 	ldw	r3,-36(fp)
8021892c:	00bfff84 	movi	r2,-2
80218930:	1884703a 	and	r2,r3,r2
80218934:	1001703a 	wrctl	status,r2
  
  return context;
80218938:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8021893c:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80218940:	e0bffd17 	ldw	r2,-12(fp)
80218944:	10800317 	ldw	r2,12(r2)
80218948:	10800104 	addi	r2,r2,4
8021894c:	e0fff317 	ldw	r3,-52(fp)
80218950:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80218954:	e0bffd17 	ldw	r2,-12(fp)
80218958:	10800317 	ldw	r2,12(r2)
8021895c:	e0fffd17 	ldw	r3,-12(fp)
80218960:	18c00317 	ldw	r3,12(r3)
80218964:	18c00037 	ldwio	r3,0(r3)
80218968:	10c00035 	stwio	r3,0(r2)
8021896c:	e0bff417 	ldw	r2,-48(fp)
80218970:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218974:	e0bffc17 	ldw	r2,-16(fp)
80218978:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8021897c:	e0bffe17 	ldw	r2,-8(fp)
80218980:	10001a26 	beq	r2,zero,802189ec <alt_msgdma_descriptor_async_transfer+0x154>
80218984:	e0bfff17 	ldw	r2,-4(fp)
80218988:	1000181e 	bne	r2,zero,802189ec <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8021898c:	00000d06 	br	802189c4 <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80218990:	01000044 	movi	r4,1
80218994:	021623c0 	call	8021623c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80218998:	e0bff20b 	ldhu	r2,-56(fp)
8021899c:	1084e230 	cmpltui	r2,r2,5000
802189a0:	1000051e 	bne	r2,zero,802189b8 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
802189a4:	012008b4 	movhi	r4,32802
802189a8:	21349204 	addi	r4,r4,-11704
802189ac:	021ac900 	call	8021ac90 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
802189b0:	00bff084 	movi	r2,-62
802189b4:	00006706 	br	80218b54 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
802189b8:	e0bff20b 	ldhu	r2,-56(fp)
802189bc:	10800044 	addi	r2,r2,1
802189c0:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
802189c4:	e0bffd17 	ldw	r2,-12(fp)
802189c8:	10c00317 	ldw	r3,12(r2)
802189cc:	e0bffd17 	ldw	r2,-12(fp)
802189d0:	10800417 	ldw	r2,16(r2)
802189d4:	e1bffe17 	ldw	r6,-8(fp)
802189d8:	100b883a 	mov	r5,r2
802189dc:	1809883a 	mov	r4,r3
802189e0:	02183740 	call	80218374 <alt_msgdma_write_standard_descriptor>
802189e4:	103fea1e 	bne	r2,zero,80218990 <__reset+0xfa1f8990>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
802189e8:	00001f06 	br	80218a68 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
802189ec:	e0bffe17 	ldw	r2,-8(fp)
802189f0:	10001b1e 	bne	r2,zero,80218a60 <alt_msgdma_descriptor_async_transfer+0x1c8>
802189f4:	e0bfff17 	ldw	r2,-4(fp)
802189f8:	10001926 	beq	r2,zero,80218a60 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
802189fc:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80218a00:	00000d06 	br	80218a38 <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80218a04:	01000044 	movi	r4,1
80218a08:	021623c0 	call	8021623c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80218a0c:	e0bff20b 	ldhu	r2,-56(fp)
80218a10:	1084e230 	cmpltui	r2,r2,5000
80218a14:	1000051e 	bne	r2,zero,80218a2c <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
80218a18:	012008b4 	movhi	r4,32802
80218a1c:	2134a804 	addi	r4,r4,-11616
80218a20:	021ac900 	call	8021ac90 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80218a24:	00bff084 	movi	r2,-62
80218a28:	00004a06 	br	80218b54 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
80218a2c:	e0bff20b 	ldhu	r2,-56(fp)
80218a30:	10800044 	addi	r2,r2,1
80218a34:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80218a38:	e0bffd17 	ldw	r2,-12(fp)
80218a3c:	10c00317 	ldw	r3,12(r2)
80218a40:	e0bffd17 	ldw	r2,-12(fp)
80218a44:	10800417 	ldw	r2,16(r2)
80218a48:	e1bfff17 	ldw	r6,-4(fp)
80218a4c:	100b883a 	mov	r5,r2
80218a50:	1809883a 	mov	r4,r3
80218a54:	02184080 	call	80218408 <alt_msgdma_write_extended_descriptor>
80218a58:	103fea1e 	bne	r2,zero,80218a04 <__reset+0xfa1f8a04>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80218a5c:	00000206 	br	80218a68 <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
80218a60:	00bfffc4 	movi	r2,-1
80218a64:	00003b06 	br	80218b54 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
80218a68:	e0bffd17 	ldw	r2,-12(fp)
80218a6c:	10800b17 	ldw	r2,44(r2)
80218a70:	10001c26 	beq	r2,zero,80218ae4 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
80218a74:	e0bffd17 	ldw	r2,-12(fp)
80218a78:	10c00d17 	ldw	r3,52(r2)
80218a7c:	e0bff317 	ldw	r2,-52(fp)
80218a80:	1884b03a 	or	r2,r3,r2
80218a84:	10800514 	ori	r2,r2,20
80218a88:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80218a8c:	e0fff317 	ldw	r3,-52(fp)
80218a90:	00bff7c4 	movi	r2,-33
80218a94:	1884703a 	and	r2,r3,r2
80218a98:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218a9c:	0005303a 	rdctl	r2,status
80218aa0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218aa4:	e0fffa17 	ldw	r3,-24(fp)
80218aa8:	00bfff84 	movi	r2,-2
80218aac:	1884703a 	and	r2,r3,r2
80218ab0:	1001703a 	wrctl	status,r2
  
  return context;
80218ab4:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80218ab8:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80218abc:	e0bffd17 	ldw	r2,-12(fp)
80218ac0:	10800317 	ldw	r2,12(r2)
80218ac4:	10800104 	addi	r2,r2,4
80218ac8:	e0fff317 	ldw	r3,-52(fp)
80218acc:	10c00035 	stwio	r3,0(r2)
80218ad0:	e0bff417 	ldw	r2,-48(fp)
80218ad4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218ad8:	e0bff817 	ldw	r2,-32(fp)
80218adc:	1001703a 	wrctl	status,r2
80218ae0:	00001b06 	br	80218b50 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
80218ae4:	e0bffd17 	ldw	r2,-12(fp)
80218ae8:	10c00d17 	ldw	r3,52(r2)
80218aec:	e0bff317 	ldw	r2,-52(fp)
80218af0:	1884b03a 	or	r2,r3,r2
80218af4:	10800114 	ori	r2,r2,4
80218af8:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
80218afc:	e0fff317 	ldw	r3,-52(fp)
80218b00:	00bff3c4 	movi	r2,-49
80218b04:	1884703a 	and	r2,r3,r2
80218b08:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218b0c:	0005303a 	rdctl	r2,status
80218b10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218b14:	e0fffb17 	ldw	r3,-20(fp)
80218b18:	00bfff84 	movi	r2,-2
80218b1c:	1884703a 	and	r2,r3,r2
80218b20:	1001703a 	wrctl	status,r2
  
  return context;
80218b24:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
80218b28:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80218b2c:	e0bffd17 	ldw	r2,-12(fp)
80218b30:	10800317 	ldw	r2,12(r2)
80218b34:	10800104 	addi	r2,r2,4
80218b38:	e0fff317 	ldw	r3,-52(fp)
80218b3c:	10c00035 	stwio	r3,0(r2)
80218b40:	e0bff417 	ldw	r2,-48(fp)
80218b44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218b48:	e0bff917 	ldw	r2,-28(fp)
80218b4c:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80218b50:	0005883a 	mov	r2,zero
}
80218b54:	e037883a 	mov	sp,fp
80218b58:	dfc00117 	ldw	ra,4(sp)
80218b5c:	df000017 	ldw	fp,0(sp)
80218b60:	dec00204 	addi	sp,sp,8
80218b64:	f800283a 	ret

80218b68 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
80218b68:	defff004 	addi	sp,sp,-64
80218b6c:	dfc00f15 	stw	ra,60(sp)
80218b70:	df000e15 	stw	fp,56(sp)
80218b74:	df000e04 	addi	fp,sp,56
80218b78:	e13ffd15 	stw	r4,-12(fp)
80218b7c:	e17ffe15 	stw	r5,-8(fp)
80218b80:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
80218b84:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
80218b88:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
80218b8c:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
80218b90:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80218b94:	e0bffd17 	ldw	r2,-12(fp)
80218b98:	10800317 	ldw	r2,12(r2)
80218b9c:	10800204 	addi	r2,r2,8
80218ba0:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
80218ba4:	10bfffcc 	andi	r2,r2,65535
80218ba8:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80218bac:	e0bffd17 	ldw	r2,-12(fp)
80218bb0:	10800317 	ldw	r2,12(r2)
80218bb4:	10800204 	addi	r2,r2,8
80218bb8:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
80218bbc:	1004d43a 	srli	r2,r2,16
80218bc0:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
80218bc4:	00807804 	movi	r2,480
80218bc8:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80218bcc:	00001906 	br	80218c34 <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
80218bd0:	01000044 	movi	r4,1
80218bd4:	021623c0 	call	8021623c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80218bd8:	e0bff30b 	ldhu	r2,-52(fp)
80218bdc:	1084e230 	cmpltui	r2,r2,5000
80218be0:	1000051e 	bne	r2,zero,80218bf8 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
80218be4:	012008b4 	movhi	r4,32802
80218be8:	2134be04 	addi	r4,r4,-11528
80218bec:	021ac900 	call	8021ac90 <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
80218bf0:	00bff084 	movi	r2,-62
80218bf4:	0000b506 	br	80218ecc <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
80218bf8:	e0bff30b 	ldhu	r2,-52(fp)
80218bfc:	10800044 	addi	r2,r2,1
80218c00:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80218c04:	e0bffd17 	ldw	r2,-12(fp)
80218c08:	10800317 	ldw	r2,12(r2)
80218c0c:	10800204 	addi	r2,r2,8
80218c10:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
80218c14:	10bfffcc 	andi	r2,r2,65535
80218c18:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80218c1c:	e0bffd17 	ldw	r2,-12(fp)
80218c20:	10800317 	ldw	r2,12(r2)
80218c24:	10800204 	addi	r2,r2,8
80218c28:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
80218c2c:	1004d43a 	srli	r2,r2,16
80218c30:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80218c34:	e0bffd17 	ldw	r2,-12(fp)
80218c38:	10800917 	ldw	r2,36(r2)
80218c3c:	e0fff517 	ldw	r3,-44(fp)
80218c40:	18bfe32e 	bgeu	r3,r2,80218bd0 <__reset+0xfa1f8bd0>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
80218c44:	e0bffd17 	ldw	r2,-12(fp)
80218c48:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80218c4c:	e0fff417 	ldw	r3,-48(fp)
80218c50:	18bfdf2e 	bgeu	r3,r2,80218bd0 <__reset+0xfa1f8bd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218c54:	0005303a 	rdctl	r2,status
80218c58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218c5c:	e0fffc17 	ldw	r3,-16(fp)
80218c60:	00bfff84 	movi	r2,-2
80218c64:	1884703a 	and	r2,r3,r2
80218c68:	1001703a 	wrctl	status,r2
  
  return context;
80218c6c:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80218c70:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80218c74:	e0bffd17 	ldw	r2,-12(fp)
80218c78:	10800317 	ldw	r2,12(r2)
80218c7c:	10800104 	addi	r2,r2,4
80218c80:	00c00804 	movi	r3,32
80218c84:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80218c88:	e0bffd17 	ldw	r2,-12(fp)
80218c8c:	10800317 	ldw	r2,12(r2)
80218c90:	e0fffd17 	ldw	r3,-12(fp)
80218c94:	18c00317 	ldw	r3,12(r3)
80218c98:	18c00037 	ldwio	r3,0(r3)
80218c9c:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80218ca0:	e0bffe17 	ldw	r2,-8(fp)
80218ca4:	10001b26 	beq	r2,zero,80218d14 <alt_msgdma_descriptor_sync_transfer+0x1ac>
80218ca8:	e0bfff17 	ldw	r2,-4(fp)
80218cac:	1000191e 	bne	r2,zero,80218d14 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
80218cb0:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80218cb4:	00000d06 	br	80218cec <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
80218cb8:	01000044 	movi	r4,1
80218cbc:	021623c0 	call	8021623c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80218cc0:	e0bff30b 	ldhu	r2,-52(fp)
80218cc4:	1084e230 	cmpltui	r2,r2,5000
80218cc8:	1000051e 	bne	r2,zero,80218ce0 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
80218ccc:	012008b4 	movhi	r4,32802
80218cd0:	2134d204 	addi	r4,r4,-11448
80218cd4:	021ac900 	call	8021ac90 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80218cd8:	00bff084 	movi	r2,-62
80218cdc:	00007b06 	br	80218ecc <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
80218ce0:	e0bff30b 	ldhu	r2,-52(fp)
80218ce4:	10800044 	addi	r2,r2,1
80218ce8:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80218cec:	e0bffd17 	ldw	r2,-12(fp)
80218cf0:	10c00317 	ldw	r3,12(r2)
80218cf4:	e0bffd17 	ldw	r2,-12(fp)
80218cf8:	10800417 	ldw	r2,16(r2)
80218cfc:	e1bffe17 	ldw	r6,-8(fp)
80218d00:	100b883a 	mov	r5,r2
80218d04:	1809883a 	mov	r4,r3
80218d08:	02183740 	call	80218374 <alt_msgdma_write_standard_descriptor>
80218d0c:	103fea1e 	bne	r2,zero,80218cb8 <__reset+0xfa1f8cb8>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80218d10:	00001f06 	br	80218d90 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80218d14:	e0bffe17 	ldw	r2,-8(fp)
80218d18:	10001b1e 	bne	r2,zero,80218d88 <alt_msgdma_descriptor_sync_transfer+0x220>
80218d1c:	e0bfff17 	ldw	r2,-4(fp)
80218d20:	10001926 	beq	r2,zero,80218d88 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
80218d24:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80218d28:	00000d06 	br	80218d60 <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80218d2c:	01000044 	movi	r4,1
80218d30:	021623c0 	call	8021623c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80218d34:	e0bff30b 	ldhu	r2,-52(fp)
80218d38:	1084e230 	cmpltui	r2,r2,5000
80218d3c:	1000051e 	bne	r2,zero,80218d54 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
80218d40:	012008b4 	movhi	r4,32802
80218d44:	2134e304 	addi	r4,r4,-11380
80218d48:	021ac900 	call	8021ac90 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80218d4c:	00bff084 	movi	r2,-62
80218d50:	00005e06 	br	80218ecc <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
80218d54:	e0bff30b 	ldhu	r2,-52(fp)
80218d58:	10800044 	addi	r2,r2,1
80218d5c:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80218d60:	e0bffd17 	ldw	r2,-12(fp)
80218d64:	10c00317 	ldw	r3,12(r2)
80218d68:	e0bffd17 	ldw	r2,-12(fp)
80218d6c:	10800417 	ldw	r2,16(r2)
80218d70:	e1bfff17 	ldw	r6,-4(fp)
80218d74:	100b883a 	mov	r5,r2
80218d78:	1809883a 	mov	r4,r3
80218d7c:	02184080 	call	80218408 <alt_msgdma_write_extended_descriptor>
80218d80:	103fea1e 	bne	r2,zero,80218d2c <__reset+0xfa1f8d2c>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80218d84:	00000206 	br	80218d90 <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
80218d88:	00bfffc4 	movi	r2,-1
80218d8c:	00004f06 	br	80218ecc <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80218d90:	e0bffd17 	ldw	r2,-12(fp)
80218d94:	10800317 	ldw	r2,12(r2)
80218d98:	10800104 	addi	r2,r2,4
80218d9c:	e0fffd17 	ldw	r3,-12(fp)
80218da0:	19000d17 	ldw	r4,52(r3)
80218da4:	00fff2c4 	movi	r3,-53
80218da8:	20c6703a 	and	r3,r4,r3
80218dac:	18c00114 	ori	r3,r3,4
80218db0:	10c00035 	stwio	r3,0(r2)
80218db4:	e0bff717 	ldw	r2,-36(fp)
80218db8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218dbc:	e0bff917 	ldw	r2,-28(fp)
80218dc0:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
80218dc4:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80218dc8:	e0bffd17 	ldw	r2,-12(fp)
80218dcc:	10800317 	ldw	r2,12(r2)
80218dd0:	10800037 	ldwio	r2,0(r2)
80218dd4:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80218dd8:	00001106 	br	80218e20 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
80218ddc:	01000044 	movi	r4,1
80218de0:	021623c0 	call	8021623c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80218de4:	e0bff30b 	ldhu	r2,-52(fp)
80218de8:	1084e230 	cmpltui	r2,r2,5000
80218dec:	1000051e 	bne	r2,zero,80218e04 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
80218df0:	012008b4 	movhi	r4,32802
80218df4:	2134f404 	addi	r4,r4,-11312
80218df8:	021ac900 	call	8021ac90 <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
80218dfc:	00bff084 	movi	r2,-62
80218e00:	00003206 	br	80218ecc <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
80218e04:	e0bff30b 	ldhu	r2,-52(fp)
80218e08:	10800044 	addi	r2,r2,1
80218e0c:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80218e10:	e0bffd17 	ldw	r2,-12(fp)
80218e14:	10800317 	ldw	r2,12(r2)
80218e18:	10800037 	ldwio	r2,0(r2)
80218e1c:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80218e20:	e0fff217 	ldw	r3,-56(fp)
80218e24:	e0bff817 	ldw	r2,-32(fp)
80218e28:	1884703a 	and	r2,r3,r2
80218e2c:	1000031e 	bne	r2,zero,80218e3c <alt_msgdma_descriptor_sync_transfer+0x2d4>
80218e30:	e0bff217 	ldw	r2,-56(fp)
80218e34:	1080004c 	andi	r2,r2,1
80218e38:	103fe81e 	bne	r2,zero,80218ddc <__reset+0xfa1f8ddc>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
80218e3c:	e0fff217 	ldw	r3,-56(fp)
80218e40:	e0bff817 	ldw	r2,-32(fp)
80218e44:	1884703a 	and	r2,r3,r2
80218e48:	10000226 	beq	r2,zero,80218e54 <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
80218e4c:	e0bff817 	ldw	r2,-32(fp)
80218e50:	00001e06 	br	80218ecc <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
80218e54:	e0bffd17 	ldw	r2,-12(fp)
80218e58:	10800317 	ldw	r2,12(r2)
80218e5c:	10800104 	addi	r2,r2,4
80218e60:	10800037 	ldwio	r2,0(r2)
80218e64:	10800814 	ori	r2,r2,32
80218e68:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218e6c:	0005303a 	rdctl	r2,status
80218e70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218e74:	e0fffa17 	ldw	r3,-24(fp)
80218e78:	00bfff84 	movi	r2,-2
80218e7c:	1884703a 	and	r2,r3,r2
80218e80:	1001703a 	wrctl	status,r2
  
  return context;
80218e84:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
80218e88:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80218e8c:	e0bffd17 	ldw	r2,-12(fp)
80218e90:	10800317 	ldw	r2,12(r2)
80218e94:	10800104 	addi	r2,r2,4
80218e98:	e0fff617 	ldw	r3,-40(fp)
80218e9c:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80218ea0:	e0bffd17 	ldw	r2,-12(fp)
80218ea4:	10800317 	ldw	r2,12(r2)
80218ea8:	e0fffd17 	ldw	r3,-12(fp)
80218eac:	18c00317 	ldw	r3,12(r3)
80218eb0:	18c00037 	ldwio	r3,0(r3)
80218eb4:	10c00035 	stwio	r3,0(r2)
80218eb8:	e0bff717 	ldw	r2,-36(fp)
80218ebc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218ec0:	e0bffb17 	ldw	r2,-20(fp)
80218ec4:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80218ec8:	0005883a 	mov	r2,zero

}
80218ecc:	e037883a 	mov	sp,fp
80218ed0:	dfc00117 	ldw	ra,4(sp)
80218ed4:	df000017 	ldw	fp,0(sp)
80218ed8:	dec00204 	addi	sp,sp,8
80218edc:	f800283a 	ret

80218ee0 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
80218ee0:	defff804 	addi	sp,sp,-32
80218ee4:	dfc00715 	stw	ra,28(sp)
80218ee8:	df000615 	stw	fp,24(sp)
80218eec:	df000604 	addi	fp,sp,24
80218ef0:	e13ffc15 	stw	r4,-16(fp)
80218ef4:	e17ffd15 	stw	r5,-12(fp)
80218ef8:	e1bffe15 	stw	r6,-8(fp)
80218efc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
80218f00:	e0800217 	ldw	r2,8(fp)
80218f04:	d8800115 	stw	r2,4(sp)
80218f08:	e0bfff17 	ldw	r2,-4(fp)
80218f0c:	d8800015 	stw	r2,0(sp)
80218f10:	e1fffe17 	ldw	r7,-8(fp)
80218f14:	000d883a 	mov	r6,zero
80218f18:	e17ffd17 	ldw	r5,-12(fp)
80218f1c:	e13ffc17 	ldw	r4,-16(fp)
80218f20:	02186b80 	call	802186b8 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
80218f24:	e037883a 	mov	sp,fp
80218f28:	dfc00117 	ldw	ra,4(sp)
80218f2c:	df000017 	ldw	fp,0(sp)
80218f30:	dec00204 	addi	sp,sp,8
80218f34:	f800283a 	ret

80218f38 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
80218f38:	defff804 	addi	sp,sp,-32
80218f3c:	dfc00715 	stw	ra,28(sp)
80218f40:	df000615 	stw	fp,24(sp)
80218f44:	df000604 	addi	fp,sp,24
80218f48:	e13ffc15 	stw	r4,-16(fp)
80218f4c:	e17ffd15 	stw	r5,-12(fp)
80218f50:	e1bffe15 	stw	r6,-8(fp)
80218f54:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80218f58:	e0800217 	ldw	r2,8(fp)
80218f5c:	d8800115 	stw	r2,4(sp)
80218f60:	e0bfff17 	ldw	r2,-4(fp)
80218f64:	d8800015 	stw	r2,0(sp)
80218f68:	000f883a 	mov	r7,zero
80218f6c:	e1bffe17 	ldw	r6,-8(fp)
80218f70:	e17ffd17 	ldw	r5,-12(fp)
80218f74:	e13ffc17 	ldw	r4,-16(fp)
80218f78:	02186b80 	call	802186b8 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
80218f7c:	e037883a 	mov	sp,fp
80218f80:	dfc00117 	ldw	ra,4(sp)
80218f84:	df000017 	ldw	fp,0(sp)
80218f88:	dec00204 	addi	sp,sp,8
80218f8c:	f800283a 	ret

80218f90 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80218f90:	defff804 	addi	sp,sp,-32
80218f94:	dfc00715 	stw	ra,28(sp)
80218f98:	df000615 	stw	fp,24(sp)
80218f9c:	df000604 	addi	fp,sp,24
80218fa0:	e13ffc15 	stw	r4,-16(fp)
80218fa4:	e17ffd15 	stw	r5,-12(fp)
80218fa8:	e1bffe15 	stw	r6,-8(fp)
80218fac:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80218fb0:	e0800317 	ldw	r2,12(fp)
80218fb4:	d8800115 	stw	r2,4(sp)
80218fb8:	e0800217 	ldw	r2,8(fp)
80218fbc:	d8800015 	stw	r2,0(sp)
80218fc0:	e1ffff17 	ldw	r7,-4(fp)
80218fc4:	e1bffe17 	ldw	r6,-8(fp)
80218fc8:	e17ffd17 	ldw	r5,-12(fp)
80218fcc:	e13ffc17 	ldw	r4,-16(fp)
80218fd0:	02186b80 	call	802186b8 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
80218fd4:	e037883a 	mov	sp,fp
80218fd8:	dfc00117 	ldw	ra,4(sp)
80218fdc:	df000017 	ldw	fp,0(sp)
80218fe0:	dec00204 	addi	sp,sp,8
80218fe4:	f800283a 	ret

80218fe8 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
80218fe8:	defff004 	addi	sp,sp,-64
80218fec:	dfc00f15 	stw	ra,60(sp)
80218ff0:	df000e15 	stw	fp,56(sp)
80218ff4:	df000e04 	addi	fp,sp,56
80218ff8:	e13ff915 	stw	r4,-28(fp)
80218ffc:	e17ffa15 	stw	r5,-24(fp)
80219000:	e1bffb15 	stw	r6,-20(fp)
80219004:	e1fffc15 	stw	r7,-16(fp)
80219008:	e1000317 	ldw	r4,12(fp)
8021900c:	e0c00417 	ldw	r3,16(fp)
80219010:	e0800517 	ldw	r2,20(fp)
80219014:	e13ffd0d 	sth	r4,-12(fp)
80219018:	e0fffe05 	stb	r3,-8(fp)
8021901c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80219020:	e0bffd0b 	ldhu	r2,-12(fp)
80219024:	e0fffe03 	ldbu	r3,-8(fp)
80219028:	e13fff0b 	ldhu	r4,-4(fp)
8021902c:	d9000615 	stw	r4,24(sp)
80219030:	d8000515 	stw	zero,20(sp)
80219034:	d8c00415 	stw	r3,16(sp)
80219038:	d8000315 	stw	zero,12(sp)
8021903c:	d8800215 	stw	r2,8(sp)
80219040:	e0800217 	ldw	r2,8(fp)
80219044:	d8800115 	stw	r2,4(sp)
80219048:	e0bffc17 	ldw	r2,-16(fp)
8021904c:	d8800015 	stw	r2,0(sp)
80219050:	e1fffb17 	ldw	r7,-20(fp)
80219054:	000d883a 	mov	r6,zero
80219058:	e17ffa17 	ldw	r5,-24(fp)
8021905c:	e13ff917 	ldw	r4,-28(fp)
80219060:	02187440 	call	80218744 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
80219064:	e037883a 	mov	sp,fp
80219068:	dfc00117 	ldw	ra,4(sp)
8021906c:	df000017 	ldw	fp,0(sp)
80219070:	dec00204 	addi	sp,sp,8
80219074:	f800283a 	ret

80219078 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
80219078:	defff004 	addi	sp,sp,-64
8021907c:	dfc00f15 	stw	ra,60(sp)
80219080:	df000e15 	stw	fp,56(sp)
80219084:	df000e04 	addi	fp,sp,56
80219088:	e13ff915 	stw	r4,-28(fp)
8021908c:	e17ffa15 	stw	r5,-24(fp)
80219090:	e1bffb15 	stw	r6,-20(fp)
80219094:	e1fffc15 	stw	r7,-16(fp)
80219098:	e1000317 	ldw	r4,12(fp)
8021909c:	e0c00417 	ldw	r3,16(fp)
802190a0:	e0800517 	ldw	r2,20(fp)
802190a4:	e13ffd0d 	sth	r4,-12(fp)
802190a8:	e0fffe05 	stb	r3,-8(fp)
802190ac:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
802190b0:	e0bffd0b 	ldhu	r2,-12(fp)
802190b4:	e0fffe03 	ldbu	r3,-8(fp)
802190b8:	e13fff0b 	ldhu	r4,-4(fp)
802190bc:	d8000615 	stw	zero,24(sp)
802190c0:	d9000515 	stw	r4,20(sp)
802190c4:	d8000415 	stw	zero,16(sp)
802190c8:	d8c00315 	stw	r3,12(sp)
802190cc:	d8800215 	stw	r2,8(sp)
802190d0:	e0800217 	ldw	r2,8(fp)
802190d4:	d8800115 	stw	r2,4(sp)
802190d8:	e0bffc17 	ldw	r2,-16(fp)
802190dc:	d8800015 	stw	r2,0(sp)
802190e0:	000f883a 	mov	r7,zero
802190e4:	e1bffb17 	ldw	r6,-20(fp)
802190e8:	e17ffa17 	ldw	r5,-24(fp)
802190ec:	e13ff917 	ldw	r4,-28(fp)
802190f0:	02187440 	call	80218744 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
802190f4:	e037883a 	mov	sp,fp
802190f8:	dfc00117 	ldw	ra,4(sp)
802190fc:	df000017 	ldw	fp,0(sp)
80219100:	dec00204 	addi	sp,sp,8
80219104:	f800283a 	ret

80219108 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80219108:	deffee04 	addi	sp,sp,-72
8021910c:	dfc01115 	stw	ra,68(sp)
80219110:	df001015 	stw	fp,64(sp)
80219114:	df001004 	addi	fp,sp,64
80219118:	e13ff715 	stw	r4,-36(fp)
8021911c:	e17ff815 	stw	r5,-32(fp)
80219120:	e1bff915 	stw	r6,-28(fp)
80219124:	e1fffa15 	stw	r7,-24(fp)
80219128:	e1800417 	ldw	r6,16(fp)
8021912c:	e1400517 	ldw	r5,20(fp)
80219130:	e1000617 	ldw	r4,24(fp)
80219134:	e0c00717 	ldw	r3,28(fp)
80219138:	e0800817 	ldw	r2,32(fp)
8021913c:	e1bffb0d 	sth	r6,-20(fp)
80219140:	e17ffc05 	stb	r5,-16(fp)
80219144:	e13ffd05 	stb	r4,-12(fp)
80219148:	e0fffe0d 	sth	r3,-8(fp)
8021914c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80219150:	e0bffb0b 	ldhu	r2,-20(fp)
80219154:	e0fffc03 	ldbu	r3,-16(fp)
80219158:	e13ffd03 	ldbu	r4,-12(fp)
8021915c:	e17ffe0b 	ldhu	r5,-8(fp)
80219160:	e1bfff0b 	ldhu	r6,-4(fp)
80219164:	d9800615 	stw	r6,24(sp)
80219168:	d9400515 	stw	r5,20(sp)
8021916c:	d9000415 	stw	r4,16(sp)
80219170:	d8c00315 	stw	r3,12(sp)
80219174:	d8800215 	stw	r2,8(sp)
80219178:	e0800317 	ldw	r2,12(fp)
8021917c:	d8800115 	stw	r2,4(sp)
80219180:	e0800217 	ldw	r2,8(fp)
80219184:	d8800015 	stw	r2,0(sp)
80219188:	e1fffa17 	ldw	r7,-24(fp)
8021918c:	e1bff917 	ldw	r6,-28(fp)
80219190:	e17ff817 	ldw	r5,-32(fp)
80219194:	e13ff717 	ldw	r4,-36(fp)
80219198:	02187440 	call	80218744 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8021919c:	e037883a 	mov	sp,fp
802191a0:	dfc00117 	ldw	ra,4(sp)
802191a4:	df000017 	ldw	fp,0(sp)
802191a8:	dec00204 	addi	sp,sp,8
802191ac:	f800283a 	ret

802191b0 <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
802191b0:	defffb04 	addi	sp,sp,-20
802191b4:	df000415 	stw	fp,16(sp)
802191b8:	df000404 	addi	fp,sp,16
802191bc:	e13ffc15 	stw	r4,-16(fp)
802191c0:	e17ffd15 	stw	r5,-12(fp)
802191c4:	e1bffe15 	stw	r6,-8(fp)
802191c8:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
802191cc:	e0bffc17 	ldw	r2,-16(fp)
802191d0:	10c01217 	ldw	r3,72(r2)
802191d4:	e0800117 	ldw	r2,4(fp)
802191d8:	18800436 	bltu	r3,r2,802191ec <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
802191dc:	e0bffc17 	ldw	r2,-16(fp)
802191e0:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
802191e4:	10803fcc 	andi	r2,r2,255
802191e8:	10000226 	beq	r2,zero,802191f4 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
802191ec:	00bffa84 	movi	r2,-22
802191f0:	00001406 	br	80219244 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
802191f4:	e0bffd17 	ldw	r2,-12(fp)
802191f8:	e0fffe17 	ldw	r3,-8(fp)
802191fc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
80219200:	e0bffd17 	ldw	r2,-12(fp)
80219204:	e0ffff17 	ldw	r3,-4(fp)
80219208:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8021920c:	e0bffd17 	ldw	r2,-12(fp)
80219210:	e0c00117 	ldw	r3,4(fp)
80219214:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
80219218:	e0fffd17 	ldw	r3,-12(fp)
8021921c:	e0bffd17 	ldw	r2,-12(fp)
80219220:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80219224:	e0c00217 	ldw	r3,8(fp)
80219228:	00900034 	movhi	r2,16384
8021922c:	10bfffc4 	addi	r2,r2,-1
80219230:	1884703a 	and	r2,r3,r2
80219234:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
80219238:	e0bffd17 	ldw	r2,-12(fp)
8021923c:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
80219240:	0005883a 	mov	r2,zero
}
80219244:	e037883a 	mov	sp,fp
80219248:	df000017 	ldw	fp,0(sp)
8021924c:	dec00104 	addi	sp,sp,4
80219250:	f800283a 	ret

80219254 <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80219254:	defff404 	addi	sp,sp,-48
80219258:	df000b15 	stw	fp,44(sp)
8021925c:	df000b04 	addi	fp,sp,44
80219260:	e13ff715 	stw	r4,-36(fp)
80219264:	e17ff815 	stw	r5,-32(fp)
80219268:	e1bff915 	stw	r6,-28(fp)
8021926c:	e1fffa15 	stw	r7,-24(fp)
80219270:	e1800517 	ldw	r6,20(fp)
80219274:	e1400617 	ldw	r5,24(fp)
80219278:	e1000717 	ldw	r4,28(fp)
8021927c:	e0c00817 	ldw	r3,32(fp)
80219280:	e0800917 	ldw	r2,36(fp)
80219284:	e1bffb0d 	sth	r6,-20(fp)
80219288:	e17ffc05 	stb	r5,-16(fp)
8021928c:	e13ffd05 	stb	r4,-12(fp)
80219290:	e0fffe0d 	sth	r3,-8(fp)
80219294:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
80219298:	e0bff717 	ldw	r2,-36(fp)
8021929c:	10c01217 	ldw	r3,72(r2)
802192a0:	e0800317 	ldw	r2,12(fp)
802192a4:	18801936 	bltu	r3,r2,8021930c <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
802192a8:	e13ff717 	ldw	r4,-36(fp)
802192ac:	20801317 	ldw	r2,76(r4)
802192b0:	20c01417 	ldw	r3,80(r4)
802192b4:	e13ffe0b 	ldhu	r4,-8(fp)
802192b8:	213fffcc 	andi	r4,r4,65535
802192bc:	2015883a 	mov	r10,r4
802192c0:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
802192c4:	1ac01136 	bltu	r3,r11,8021930c <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
802192c8:	58c0011e 	bne	r11,r3,802192d0 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
802192cc:	12800f36 	bltu	r2,r10,8021930c <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802192d0:	e13ff717 	ldw	r4,-36(fp)
802192d4:	20801317 	ldw	r2,76(r4)
802192d8:	20c01417 	ldw	r3,80(r4)
802192dc:	e13fff0b 	ldhu	r4,-4(fp)
802192e0:	213fffcc 	andi	r4,r4,65535
802192e4:	2011883a 	mov	r8,r4
802192e8:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
802192ec:	1a400736 	bltu	r3,r9,8021930c <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
802192f0:	48c0011e 	bne	r9,r3,802192f8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
802192f4:	12000536 	bltu	r2,r8,8021930c <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
802192f8:	e0bff717 	ldw	r2,-36(fp)
802192fc:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80219300:	10803fcc 	andi	r2,r2,255
80219304:	10800060 	cmpeqi	r2,r2,1
80219308:	1000021e 	bne	r2,zero,80219314 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8021930c:	00bffa84 	movi	r2,-22
80219310:	00003106 	br	802193d8 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
80219314:	e0bff817 	ldw	r2,-32(fp)
80219318:	e0fff917 	ldw	r3,-28(fp)
8021931c:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
80219320:	e0bff817 	ldw	r2,-32(fp)
80219324:	e0fffa17 	ldw	r3,-24(fp)
80219328:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8021932c:	e0bff817 	ldw	r2,-32(fp)
80219330:	e0c00117 	ldw	r3,4(fp)
80219334:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
80219338:	e0bff817 	ldw	r2,-32(fp)
8021933c:	e0c00217 	ldw	r3,8(fp)
80219340:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80219344:	e0bff817 	ldw	r2,-32(fp)
80219348:	e0c00317 	ldw	r3,12(fp)
8021934c:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
80219350:	e0bff817 	ldw	r2,-32(fp)
80219354:	e0fffb0b 	ldhu	r3,-20(fp)
80219358:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8021935c:	e0bff817 	ldw	r2,-32(fp)
80219360:	e0fffc03 	ldbu	r3,-16(fp)
80219364:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
80219368:	e0bff817 	ldw	r2,-32(fp)
8021936c:	e0fffd03 	ldbu	r3,-12(fp)
80219370:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
80219374:	e0bff817 	ldw	r2,-32(fp)
80219378:	e0fffe0b 	ldhu	r3,-8(fp)
8021937c:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
80219380:	e0bff817 	ldw	r2,-32(fp)
80219384:	e0ffff0b 	ldhu	r3,-4(fp)
80219388:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
8021938c:	e0bff817 	ldw	r2,-32(fp)
80219390:	1019883a 	mov	r12,r2
80219394:	001b883a 	mov	r13,zero
80219398:	e33ff515 	stw	r12,-44(fp)
8021939c:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
802193a0:	e0fff517 	ldw	r3,-44(fp)
802193a4:	e0bff817 	ldw	r2,-32(fp)
802193a8:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
802193ac:	e0fff617 	ldw	r3,-40(fp)
802193b0:	e0bff817 	ldw	r2,-32(fp)
802193b4:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
802193b8:	e0c00417 	ldw	r3,16(fp)
802193bc:	00900034 	movhi	r2,16384
802193c0:	10bfffc4 	addi	r2,r2,-1
802193c4:	1884703a 	and	r2,r3,r2
802193c8:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
802193cc:	e0bff817 	ldw	r2,-32(fp)
802193d0:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
802193d4:	0005883a 	mov	r2,zero
}
802193d8:	e037883a 	mov	sp,fp
802193dc:	df000017 	ldw	fp,0(sp)
802193e0:	dec00104 	addi	sp,sp,4
802193e4:	f800283a 	ret

802193e8 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
802193e8:	defff804 	addi	sp,sp,-32
802193ec:	dfc00715 	stw	ra,28(sp)
802193f0:	df000615 	stw	fp,24(sp)
802193f4:	df000604 	addi	fp,sp,24
802193f8:	e13ffc15 	stw	r4,-16(fp)
802193fc:	e17ffd15 	stw	r5,-12(fp)
80219400:	e1bffe15 	stw	r6,-8(fp)
80219404:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80219408:	e0800317 	ldw	r2,12(fp)
8021940c:	d8800115 	stw	r2,4(sp)
80219410:	e0800217 	ldw	r2,8(fp)
80219414:	d8800015 	stw	r2,0(sp)
80219418:	e1ffff17 	ldw	r7,-4(fp)
8021941c:	e1bffe17 	ldw	r6,-8(fp)
80219420:	e17ffd17 	ldw	r5,-12(fp)
80219424:	e13ffc17 	ldw	r4,-16(fp)
80219428:	02191b00 	call	802191b0 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
8021942c:	e037883a 	mov	sp,fp
80219430:	dfc00117 	ldw	ra,4(sp)
80219434:	df000017 	ldw	fp,0(sp)
80219438:	dec00204 	addi	sp,sp,8
8021943c:	f800283a 	ret

80219440 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80219440:	defff804 	addi	sp,sp,-32
80219444:	dfc00715 	stw	ra,28(sp)
80219448:	df000615 	stw	fp,24(sp)
8021944c:	df000604 	addi	fp,sp,24
80219450:	e13ffc15 	stw	r4,-16(fp)
80219454:	e17ffd15 	stw	r5,-12(fp)
80219458:	e1bffe15 	stw	r6,-8(fp)
8021945c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80219460:	e0800217 	ldw	r2,8(fp)
80219464:	d8800115 	stw	r2,4(sp)
80219468:	e0bfff17 	ldw	r2,-4(fp)
8021946c:	d8800015 	stw	r2,0(sp)
80219470:	e1fffe17 	ldw	r7,-8(fp)
80219474:	000d883a 	mov	r6,zero
80219478:	e17ffd17 	ldw	r5,-12(fp)
8021947c:	e13ffc17 	ldw	r4,-16(fp)
80219480:	02191b00 	call	802191b0 <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
80219484:	e037883a 	mov	sp,fp
80219488:	dfc00117 	ldw	ra,4(sp)
8021948c:	df000017 	ldw	fp,0(sp)
80219490:	dec00204 	addi	sp,sp,8
80219494:	f800283a 	ret

80219498 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
80219498:	defff804 	addi	sp,sp,-32
8021949c:	dfc00715 	stw	ra,28(sp)
802194a0:	df000615 	stw	fp,24(sp)
802194a4:	df000604 	addi	fp,sp,24
802194a8:	e13ffc15 	stw	r4,-16(fp)
802194ac:	e17ffd15 	stw	r5,-12(fp)
802194b0:	e1bffe15 	stw	r6,-8(fp)
802194b4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
802194b8:	e0800217 	ldw	r2,8(fp)
802194bc:	d8800115 	stw	r2,4(sp)
802194c0:	e0bfff17 	ldw	r2,-4(fp)
802194c4:	d8800015 	stw	r2,0(sp)
802194c8:	000f883a 	mov	r7,zero
802194cc:	e1bffe17 	ldw	r6,-8(fp)
802194d0:	e17ffd17 	ldw	r5,-12(fp)
802194d4:	e13ffc17 	ldw	r4,-16(fp)
802194d8:	02191b00 	call	802191b0 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
802194dc:	e037883a 	mov	sp,fp
802194e0:	dfc00117 	ldw	ra,4(sp)
802194e4:	df000017 	ldw	fp,0(sp)
802194e8:	dec00204 	addi	sp,sp,8
802194ec:	f800283a 	ret

802194f0 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
802194f0:	deffee04 	addi	sp,sp,-72
802194f4:	dfc01115 	stw	ra,68(sp)
802194f8:	df001015 	stw	fp,64(sp)
802194fc:	df001004 	addi	fp,sp,64
80219500:	e13ff915 	stw	r4,-28(fp)
80219504:	e17ffa15 	stw	r5,-24(fp)
80219508:	e1bffb15 	stw	r6,-20(fp)
8021950c:	e1fffc15 	stw	r7,-16(fp)
80219510:	e1000417 	ldw	r4,16(fp)
80219514:	e0c00517 	ldw	r3,20(fp)
80219518:	e0800617 	ldw	r2,24(fp)
8021951c:	e13ffd0d 	sth	r4,-12(fp)
80219520:	e0fffe05 	stb	r3,-8(fp)
80219524:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
80219528:	e0bffd0b 	ldhu	r2,-12(fp)
8021952c:	e0fffe03 	ldbu	r3,-8(fp)
80219530:	e13fff0b 	ldhu	r4,-4(fp)
80219534:	d9000815 	stw	r4,32(sp)
80219538:	d8000715 	stw	zero,28(sp)
8021953c:	d8c00615 	stw	r3,24(sp)
80219540:	d8000515 	stw	zero,20(sp)
80219544:	d8800415 	stw	r2,16(sp)
80219548:	e0800317 	ldw	r2,12(fp)
8021954c:	d8800315 	stw	r2,12(sp)
80219550:	e0800217 	ldw	r2,8(fp)
80219554:	d8800215 	stw	r2,8(sp)
80219558:	e0bffc17 	ldw	r2,-16(fp)
8021955c:	d8800115 	stw	r2,4(sp)
80219560:	e0bffb17 	ldw	r2,-20(fp)
80219564:	d8800015 	stw	r2,0(sp)
80219568:	000f883a 	mov	r7,zero
8021956c:	000d883a 	mov	r6,zero
80219570:	e17ffa17 	ldw	r5,-24(fp)
80219574:	e13ff917 	ldw	r4,-28(fp)
80219578:	02192540 	call	80219254 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
8021957c:	e037883a 	mov	sp,fp
80219580:	dfc00117 	ldw	ra,4(sp)
80219584:	df000017 	ldw	fp,0(sp)
80219588:	dec00204 	addi	sp,sp,8
8021958c:	f800283a 	ret

80219590 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
80219590:	deffee04 	addi	sp,sp,-72
80219594:	dfc01115 	stw	ra,68(sp)
80219598:	df001015 	stw	fp,64(sp)
8021959c:	df001004 	addi	fp,sp,64
802195a0:	e13ff915 	stw	r4,-28(fp)
802195a4:	e17ffa15 	stw	r5,-24(fp)
802195a8:	e1bffb15 	stw	r6,-20(fp)
802195ac:	e1fffc15 	stw	r7,-16(fp)
802195b0:	e1000417 	ldw	r4,16(fp)
802195b4:	e0c00517 	ldw	r3,20(fp)
802195b8:	e0800617 	ldw	r2,24(fp)
802195bc:	e13ffd0d 	sth	r4,-12(fp)
802195c0:	e0fffe05 	stb	r3,-8(fp)
802195c4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
802195c8:	e0bffd0b 	ldhu	r2,-12(fp)
802195cc:	e0fffe03 	ldbu	r3,-8(fp)
802195d0:	e13fff0b 	ldhu	r4,-4(fp)
802195d4:	d8000815 	stw	zero,32(sp)
802195d8:	d9000715 	stw	r4,28(sp)
802195dc:	d8000615 	stw	zero,24(sp)
802195e0:	d8c00515 	stw	r3,20(sp)
802195e4:	d8800415 	stw	r2,16(sp)
802195e8:	e0800317 	ldw	r2,12(fp)
802195ec:	d8800315 	stw	r2,12(sp)
802195f0:	e0800217 	ldw	r2,8(fp)
802195f4:	d8800215 	stw	r2,8(sp)
802195f8:	d8000115 	stw	zero,4(sp)
802195fc:	d8000015 	stw	zero,0(sp)
80219600:	e1fffc17 	ldw	r7,-16(fp)
80219604:	e1bffb17 	ldw	r6,-20(fp)
80219608:	e17ffa17 	ldw	r5,-24(fp)
8021960c:	e13ff917 	ldw	r4,-28(fp)
80219610:	02192540 	call	80219254 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
80219614:	e037883a 	mov	sp,fp
80219618:	dfc00117 	ldw	ra,4(sp)
8021961c:	df000017 	ldw	fp,0(sp)
80219620:	dec00204 	addi	sp,sp,8
80219624:	f800283a 	ret

80219628 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80219628:	deffec04 	addi	sp,sp,-80
8021962c:	dfc01315 	stw	ra,76(sp)
80219630:	df001215 	stw	fp,72(sp)
80219634:	df001204 	addi	fp,sp,72
80219638:	e13ff715 	stw	r4,-36(fp)
8021963c:	e17ff815 	stw	r5,-32(fp)
80219640:	e1bff915 	stw	r6,-28(fp)
80219644:	e1fffa15 	stw	r7,-24(fp)
80219648:	e1800617 	ldw	r6,24(fp)
8021964c:	e1400717 	ldw	r5,28(fp)
80219650:	e1000817 	ldw	r4,32(fp)
80219654:	e0c00917 	ldw	r3,36(fp)
80219658:	e0800a17 	ldw	r2,40(fp)
8021965c:	e1bffb0d 	sth	r6,-20(fp)
80219660:	e17ffc05 	stb	r5,-16(fp)
80219664:	e13ffd05 	stb	r4,-12(fp)
80219668:	e0fffe0d 	sth	r3,-8(fp)
8021966c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
80219670:	e0bffb0b 	ldhu	r2,-20(fp)
80219674:	e0fffc03 	ldbu	r3,-16(fp)
80219678:	e13ffd03 	ldbu	r4,-12(fp)
8021967c:	e17ffe0b 	ldhu	r5,-8(fp)
80219680:	e1bfff0b 	ldhu	r6,-4(fp)
80219684:	d9800815 	stw	r6,32(sp)
80219688:	d9400715 	stw	r5,28(sp)
8021968c:	d9000615 	stw	r4,24(sp)
80219690:	d8c00515 	stw	r3,20(sp)
80219694:	d8800415 	stw	r2,16(sp)
80219698:	e0800517 	ldw	r2,20(fp)
8021969c:	d8800315 	stw	r2,12(sp)
802196a0:	e0800417 	ldw	r2,16(fp)
802196a4:	d8800215 	stw	r2,8(sp)
802196a8:	e0800317 	ldw	r2,12(fp)
802196ac:	d8800115 	stw	r2,4(sp)
802196b0:	e0800217 	ldw	r2,8(fp)
802196b4:	d8800015 	stw	r2,0(sp)
802196b8:	e1fffa17 	ldw	r7,-24(fp)
802196bc:	e1bff917 	ldw	r6,-28(fp)
802196c0:	e17ff817 	ldw	r5,-32(fp)
802196c4:	e13ff717 	ldw	r4,-36(fp)
802196c8:	02192540 	call	80219254 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
802196cc:	e037883a 	mov	sp,fp
802196d0:	dfc00117 	ldw	ra,4(sp)
802196d4:	df000017 	ldw	fp,0(sp)
802196d8:	dec00204 	addi	sp,sp,8
802196dc:	f800283a 	ret

802196e0 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
802196e0:	defffc04 	addi	sp,sp,-16
802196e4:	df000315 	stw	fp,12(sp)
802196e8:	df000304 	addi	fp,sp,12
802196ec:	e13ffe15 	stw	r4,-8(fp)
802196f0:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
802196f4:	e0bfff17 	ldw	r2,-4(fp)
802196f8:	1000021e 	bne	r2,zero,80219704 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
802196fc:	00bffa84 	movi	r2,-22
80219700:	00002f06 	br	802197c0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
80219704:	e0bfff17 	ldw	r2,-4(fp)
80219708:	10c00317 	ldw	r3,12(r2)
8021970c:	e0bfff17 	ldw	r2,-4(fp)
80219710:	18800226 	beq	r3,r2,8021971c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
80219714:	00bffa84 	movi	r2,-22
80219718:	00002906 	br	802197c0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
8021971c:	e0bffe17 	ldw	r2,-8(fp)
80219720:	10800017 	ldw	r2,0(r2)
80219724:	1000051e 	bne	r2,zero,8021973c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
80219728:	e0bffe17 	ldw	r2,-8(fp)
8021972c:	e0ffff17 	ldw	r3,-4(fp)
80219730:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
80219734:	0005883a 	mov	r2,zero
80219738:	00002106 	br	802197c0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
8021973c:	e0bffe17 	ldw	r2,-8(fp)
80219740:	10c00017 	ldw	r3,0(r2)
80219744:	e0bfff17 	ldw	r2,-4(fp)
80219748:	1880021e 	bne	r3,r2,80219754 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
8021974c:	00bffa84 	movi	r2,-22
80219750:	00001b06 	br	802197c0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
80219754:	e0bffe17 	ldw	r2,-8(fp)
80219758:	10800017 	ldw	r2,0(r2)
8021975c:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
80219760:	00000906 	br	80219788 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
80219764:	e0bffd17 	ldw	r2,-12(fp)
80219768:	10c00317 	ldw	r3,12(r2)
8021976c:	e0bfff17 	ldw	r2,-4(fp)
80219770:	1880021e 	bne	r3,r2,8021977c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
80219774:	00bffa84 	movi	r2,-22
80219778:	00001106 	br	802197c0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8021977c:	e0bffd17 	ldw	r2,-12(fp)
80219780:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
80219784:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
80219788:	e0bffd17 	ldw	r2,-12(fp)
8021978c:	10800317 	ldw	r2,12(r2)
80219790:	e0fffe17 	ldw	r3,-8(fp)
80219794:	18c00017 	ldw	r3,0(r3)
80219798:	10fff21e 	bne	r2,r3,80219764 <__reset+0xfa1f9764>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8021979c:	e0ffff17 	ldw	r3,-4(fp)
802197a0:	e0bffd17 	ldw	r2,-12(fp)
802197a4:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
802197a8:	e0bffe17 	ldw	r2,-8(fp)
802197ac:	10800017 	ldw	r2,0(r2)
802197b0:	1007883a 	mov	r3,r2
802197b4:	e0bfff17 	ldw	r2,-4(fp)
802197b8:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
802197bc:	0005883a 	mov	r2,zero
}
802197c0:	e037883a 	mov	sp,fp
802197c4:	df000017 	ldw	fp,0(sp)
802197c8:	dec00104 	addi	sp,sp,4
802197cc:	f800283a 	ret

802197d0 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
802197d0:	defff804 	addi	sp,sp,-32
802197d4:	df000715 	stw	fp,28(sp)
802197d8:	df000704 	addi	fp,sp,28
802197dc:	e13ffe15 	stw	r4,-8(fp)
802197e0:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
802197e4:	e13fff17 	ldw	r4,-4(fp)
802197e8:	2000021e 	bne	r4,zero,802197f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
802197ec:	00bffa84 	movi	r2,-22
802197f0:	00005906 	br	80219958 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
802197f4:	e13fff17 	ldw	r4,-4(fp)
802197f8:	2015883a 	mov	r10,r4
802197fc:	0017883a 	mov	r11,zero
80219800:	e2bffc15 	stw	r10,-16(fp)
80219804:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
80219808:	e13fff17 	ldw	r4,-4(fp)
8021980c:	21400317 	ldw	r5,12(r4)
80219810:	e13ffc17 	ldw	r4,-16(fp)
80219814:	2900041e 	bne	r5,r4,80219828 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
80219818:	e13fff17 	ldw	r4,-4(fp)
8021981c:	21400b17 	ldw	r5,44(r4)
80219820:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
80219824:	29000226 	beq	r5,r4,80219830 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
80219828:	00bffa84 	movi	r2,-22
8021982c:	00004a06 	br	80219958 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
80219830:	e13ffe17 	ldw	r4,-8(fp)
80219834:	21000017 	ldw	r4,0(r4)
80219838:	2000051e 	bne	r4,zero,80219850 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
8021983c:	e0bffe17 	ldw	r2,-8(fp)
80219840:	e0ffff17 	ldw	r3,-4(fp)
80219844:	10c00015 	stw	r3,0(r2)
        return 0;
80219848:	0005883a 	mov	r2,zero
8021984c:	00004206 	br	80219958 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
80219850:	e13ffe17 	ldw	r4,-8(fp)
80219854:	21400017 	ldw	r5,0(r4)
80219858:	e13fff17 	ldw	r4,-4(fp)
8021985c:	2900021e 	bne	r5,r4,80219868 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
80219860:	00bffa84 	movi	r2,-22
80219864:	00003c06 	br	80219958 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
80219868:	e13ffe17 	ldw	r4,-8(fp)
8021986c:	21000017 	ldw	r4,0(r4)
80219870:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
80219874:	e13ffe17 	ldw	r4,-8(fp)
80219878:	21000017 	ldw	r4,0(r4)
8021987c:	2011883a 	mov	r8,r4
80219880:	0013883a 	mov	r9,zero
80219884:	e23ffa15 	stw	r8,-24(fp)
80219888:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8021988c:	00001806 	br	802198f0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
80219890:	e13fff17 	ldw	r4,-4(fp)
80219894:	200d883a 	mov	r6,r4
80219898:	000f883a 	mov	r7,zero
8021989c:	e1bffc15 	stw	r6,-16(fp)
802198a0:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
802198a4:	e13ff917 	ldw	r4,-28(fp)
802198a8:	21400317 	ldw	r5,12(r4)
802198ac:	e13ffc17 	ldw	r4,-16(fp)
802198b0:	2900061e 	bne	r5,r4,802198cc <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
802198b4:	e13ff917 	ldw	r4,-28(fp)
802198b8:	21400b17 	ldw	r5,44(r4)
802198bc:	e13ffd17 	ldw	r4,-12(fp)
802198c0:	2900021e 	bne	r5,r4,802198cc <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
802198c4:	00bffa84 	movi	r2,-22
802198c8:	00002306 	br	80219958 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
802198cc:	e13ff917 	ldw	r4,-28(fp)
802198d0:	21000317 	ldw	r4,12(r4)
802198d4:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
802198d8:	e13ff917 	ldw	r4,-28(fp)
802198dc:	21000b17 	ldw	r4,44(r4)
802198e0:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
802198e4:	e13ffc17 	ldw	r4,-16(fp)
802198e8:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
802198ec:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
802198f0:	e13ff917 	ldw	r4,-28(fp)
802198f4:	21400317 	ldw	r5,12(r4)
802198f8:	e13ffa17 	ldw	r4,-24(fp)
802198fc:	293fe41e 	bne	r5,r4,80219890 <__reset+0xfa1f9890>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80219900:	e13ff917 	ldw	r4,-28(fp)
80219904:	21400b17 	ldw	r5,44(r4)
80219908:	e13ffb17 	ldw	r4,-20(fp)
8021990c:	293fe01e 	bne	r5,r4,80219890 <__reset+0xfa1f9890>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
80219910:	e13fff17 	ldw	r4,-4(fp)
80219914:	2005883a 	mov	r2,r4
80219918:	0007883a 	mov	r3,zero
8021991c:	e0bffc15 	stw	r2,-16(fp)
80219920:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
80219924:	e0fffc17 	ldw	r3,-16(fp)
80219928:	e0bff917 	ldw	r2,-28(fp)
8021992c:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
80219930:	e0fffd17 	ldw	r3,-12(fp)
80219934:	e0bff917 	ldw	r2,-28(fp)
80219938:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8021993c:	e0fffa17 	ldw	r3,-24(fp)
80219940:	e0bfff17 	ldw	r2,-4(fp)
80219944:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
80219948:	e0fffb17 	ldw	r3,-20(fp)
8021994c:	e0bfff17 	ldw	r2,-4(fp)
80219950:	10c00b15 	stw	r3,44(r2)
    return 0;
80219954:	0005883a 	mov	r2,zero
}
80219958:	e037883a 	mov	sp,fp
8021995c:	df000017 	ldw	fp,0(sp)
80219960:	dec00104 	addi	sp,sp,4
80219964:	f800283a 	ret

80219968 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
80219968:	defff804 	addi	sp,sp,-32
8021996c:	dfc00715 	stw	ra,28(sp)
80219970:	df000615 	stw	fp,24(sp)
80219974:	df000604 	addi	fp,sp,24
80219978:	e13ffd15 	stw	r4,-12(fp)
8021997c:	2807883a 	mov	r3,r5
80219980:	3005883a 	mov	r2,r6
80219984:	e0fffe05 	stb	r3,-8(fp)
80219988:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
8021998c:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
80219990:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
80219994:	e0bffd17 	ldw	r2,-12(fp)
80219998:	1000021e 	bne	r2,zero,802199a4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
8021999c:	00bffa84 	movi	r2,-22
802199a0:	00002f06 	br	80219a60 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
802199a4:	e0bffd17 	ldw	r2,-12(fp)
802199a8:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
802199ac:	00000d06 	br	802199e4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
802199b0:	e0bffa17 	ldw	r2,-24(fp)
802199b4:	10800717 	ldw	r2,28(r2)
802199b8:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
802199bc:	e0bffc17 	ldw	r2,-16(fp)
802199c0:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
802199c4:	e0bffa17 	ldw	r2,-24(fp)
802199c8:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
802199cc:	e0bffa17 	ldw	r2,-24(fp)
802199d0:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
802199d4:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
802199d8:	e0bffb17 	ldw	r2,-20(fp)
802199dc:	10800044 	addi	r2,r2,1
802199e0:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
802199e4:	e0bffa17 	ldw	r2,-24(fp)
802199e8:	10c00317 	ldw	r3,12(r2)
802199ec:	e0bffd17 	ldw	r2,-12(fp)
802199f0:	18bfef1e 	bne	r3,r2,802199b0 <__reset+0xfa1f99b0>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
802199f4:	e0bffa17 	ldw	r2,-24(fp)
802199f8:	10800717 	ldw	r2,28(r2)
802199fc:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
80219a00:	e0bffe03 	ldbu	r2,-8(fp)
80219a04:	10000726 	beq	r2,zero,80219a24 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
80219a08:	e0fffc17 	ldw	r3,-16(fp)
80219a0c:	00b00034 	movhi	r2,49152
80219a10:	10bfffc4 	addi	r2,r2,-1
80219a14:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
80219a18:	e0bffa17 	ldw	r2,-24(fp)
80219a1c:	10c00715 	stw	r3,28(r2)
80219a20:	00000406 	br	80219a34 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
80219a24:	e0bffc17 	ldw	r2,-16(fp)
80219a28:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
80219a2c:	e0bffa17 	ldw	r2,-24(fp)
80219a30:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
80219a34:	e0bffb17 	ldw	r2,-20(fp)
80219a38:	10800044 	addi	r2,r2,1
80219a3c:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
80219a40:	e0bfff03 	ldbu	r2,-4(fp)
80219a44:	10000526 	beq	r2,zero,80219a5c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
80219a48:	e0bffb17 	ldw	r2,-20(fp)
80219a4c:	1004917a 	slli	r2,r2,5
80219a50:	100b883a 	mov	r5,r2
80219a54:	e13ffd17 	ldw	r4,-12(fp)
80219a58:	021a4040 	call	8021a404 <alt_dcache_flush>
    }
    
    return 0;
80219a5c:	0005883a 	mov	r2,zero
}
80219a60:	e037883a 	mov	sp,fp
80219a64:	dfc00117 	ldw	ra,4(sp)
80219a68:	df000017 	ldw	fp,0(sp)
80219a6c:	dec00204 	addi	sp,sp,8
80219a70:	f800283a 	ret

80219a74 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
80219a74:	defff404 	addi	sp,sp,-48
80219a78:	dfc00b15 	stw	ra,44(sp)
80219a7c:	df000a15 	stw	fp,40(sp)
80219a80:	df000a04 	addi	fp,sp,40
80219a84:	e13ffd15 	stw	r4,-12(fp)
80219a88:	3009883a 	mov	r4,r6
80219a8c:	e17ffe05 	stb	r5,-8(fp)
80219a90:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
80219a94:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
80219a98:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
80219a9c:	e13ffd17 	ldw	r4,-12(fp)
80219aa0:	2000021e 	bne	r4,zero,80219aac <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
80219aa4:	00bffa84 	movi	r2,-22
80219aa8:	00003e06 	br	80219ba4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
80219aac:	e13ffd17 	ldw	r4,-12(fp)
80219ab0:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
80219ab4:	e13ffd17 	ldw	r4,-12(fp)
80219ab8:	2005883a 	mov	r2,r4
80219abc:	0007883a 	mov	r3,zero
80219ac0:	e0bff915 	stw	r2,-28(fp)
80219ac4:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80219ac8:	00001306 	br	80219b18 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
80219acc:	e0bff617 	ldw	r2,-40(fp)
80219ad0:	10800f17 	ldw	r2,60(r2)
80219ad4:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80219ad8:	e0bff817 	ldw	r2,-32(fp)
80219adc:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
80219ae0:	e0bff617 	ldw	r2,-40(fp)
80219ae4:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80219ae8:	e0bff617 	ldw	r2,-40(fp)
80219aec:	10800317 	ldw	r2,12(r2)
80219af0:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
80219af4:	e0bff617 	ldw	r2,-40(fp)
80219af8:	10800b17 	ldw	r2,44(r2)
80219afc:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
80219b00:	e0bffb17 	ldw	r2,-20(fp)
80219b04:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
80219b08:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
80219b0c:	e0bff717 	ldw	r2,-36(fp)
80219b10:	10800044 	addi	r2,r2,1
80219b14:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80219b18:	e0bff617 	ldw	r2,-40(fp)
80219b1c:	10c00317 	ldw	r3,12(r2)
80219b20:	e0bff917 	ldw	r2,-28(fp)
80219b24:	18bfe91e 	bne	r3,r2,80219acc <__reset+0xfa1f9acc>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80219b28:	e0bff617 	ldw	r2,-40(fp)
80219b2c:	10c00b17 	ldw	r3,44(r2)
80219b30:	e0bffa17 	ldw	r2,-24(fp)
80219b34:	18bfe51e 	bne	r3,r2,80219acc <__reset+0xfa1f9acc>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
80219b38:	e0bff617 	ldw	r2,-40(fp)
80219b3c:	10800f17 	ldw	r2,60(r2)
80219b40:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
80219b44:	e0bffe03 	ldbu	r2,-8(fp)
80219b48:	10000726 	beq	r2,zero,80219b68 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
80219b4c:	e0fff817 	ldw	r3,-32(fp)
80219b50:	00b00034 	movhi	r2,49152
80219b54:	10bfffc4 	addi	r2,r2,-1
80219b58:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
80219b5c:	e0bff617 	ldw	r2,-40(fp)
80219b60:	10c00f15 	stw	r3,60(r2)
80219b64:	00000406 	br	80219b78 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
80219b68:	e0bff817 	ldw	r2,-32(fp)
80219b6c:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
80219b70:	e0bff617 	ldw	r2,-40(fp)
80219b74:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
80219b78:	e0bff717 	ldw	r2,-36(fp)
80219b7c:	10800044 	addi	r2,r2,1
80219b80:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
80219b84:	e0bfff03 	ldbu	r2,-4(fp)
80219b88:	10000526 	beq	r2,zero,80219ba0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
80219b8c:	e0bff717 	ldw	r2,-36(fp)
80219b90:	100491ba 	slli	r2,r2,6
80219b94:	100b883a 	mov	r5,r2
80219b98:	e13ffd17 	ldw	r4,-12(fp)
80219b9c:	021a4040 	call	8021a404 <alt_dcache_flush>
    }
    
    return 0;
80219ba0:	0005883a 	mov	r2,zero
}
80219ba4:	e037883a 	mov	sp,fp
80219ba8:	dfc00117 	ldw	ra,4(sp)
80219bac:	df000017 	ldw	fp,0(sp)
80219bb0:	dec00204 	addi	sp,sp,8
80219bb4:	f800283a 	ret

80219bb8 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
80219bb8:	deffef04 	addi	sp,sp,-68
80219bbc:	df001015 	stw	fp,64(sp)
80219bc0:	df001004 	addi	fp,sp,64
80219bc4:	e13ffb15 	stw	r4,-20(fp)
80219bc8:	e17ffc15 	stw	r5,-16(fp)
80219bcc:	e1bffd15 	stw	r6,-12(fp)
80219bd0:	3807883a 	mov	r3,r7
80219bd4:	e0800117 	ldw	r2,4(fp)
80219bd8:	e0fffe05 	stb	r3,-8(fp)
80219bdc:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
80219be0:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
80219be4:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
80219be8:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
80219bec:	e0bffc17 	ldw	r2,-16(fp)
80219bf0:	e0bff915 	stw	r2,-28(fp)
80219bf4:	e0bffd17 	ldw	r2,-12(fp)
80219bf8:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
80219bfc:	e0bffb17 	ldw	r2,-20(fp)
80219c00:	10800617 	ldw	r2,24(r2)
80219c04:	10800037 	ldwio	r2,0(r2)
80219c08:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
80219c0c:	e0bff017 	ldw	r2,-64(fp)
80219c10:	1080004c 	andi	r2,r2,1
80219c14:	10000226 	beq	r2,zero,80219c20 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
80219c18:	00bffc04 	movi	r2,-16
80219c1c:	00009206 	br	80219e68 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80219c20:	00800804 	movi	r2,32
80219c24:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80219c28:	0005303a 	rdctl	r2,status
80219c2c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80219c30:	e0fff517 	ldw	r3,-44(fp)
80219c34:	00bfff84 	movi	r2,-2
80219c38:	1884703a 	and	r2,r3,r2
80219c3c:	1001703a 	wrctl	status,r2
  
  return context;
80219c40:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80219c44:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80219c48:	e0bffb17 	ldw	r2,-20(fp)
80219c4c:	10800317 	ldw	r2,12(r2)
80219c50:	10800104 	addi	r2,r2,4
80219c54:	e0fff117 	ldw	r3,-60(fp)
80219c58:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
80219c5c:	e0bffb17 	ldw	r2,-20(fp)
80219c60:	10800317 	ldw	r2,12(r2)
80219c64:	e0fffb17 	ldw	r3,-20(fp)
80219c68:	18c00317 	ldw	r3,12(r3)
80219c6c:	18c00037 	ldwio	r3,0(r3)
80219c70:	10c00035 	stwio	r3,0(r2)
80219c74:	e0bff217 	ldw	r2,-56(fp)
80219c78:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80219c7c:	e0bff317 	ldw	r2,-52(fp)
80219c80:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
80219c84:	e0bffb17 	ldw	r2,-20(fp)
80219c88:	10800b17 	ldw	r2,44(r2)
80219c8c:	10002326 	beq	r2,zero,80219d1c <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
80219c90:	e0bffb17 	ldw	r2,-20(fp)
80219c94:	10c00d17 	ldw	r3,52(r2)
80219c98:	e0bff117 	ldw	r2,-60(fp)
80219c9c:	1884b03a 	or	r2,r3,r2
80219ca0:	10800514 	ori	r2,r2,20
80219ca4:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80219ca8:	e0fff117 	ldw	r3,-60(fp)
80219cac:	00bff7c4 	movi	r2,-33
80219cb0:	1884703a 	and	r2,r3,r2
80219cb4:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80219cb8:	e0bff017 	ldw	r2,-64(fp)
80219cbc:	10800214 	ori	r2,r2,8
80219cc0:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80219cc4:	0005303a 	rdctl	r2,status
80219cc8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80219ccc:	e0fff717 	ldw	r3,-36(fp)
80219cd0:	00bfff84 	movi	r2,-2
80219cd4:	1884703a 	and	r2,r3,r2
80219cd8:	1001703a 	wrctl	status,r2
  
  return context;
80219cdc:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80219ce0:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80219ce4:	e0bffb17 	ldw	r2,-20(fp)
80219ce8:	10800317 	ldw	r2,12(r2)
80219cec:	10800104 	addi	r2,r2,4
80219cf0:	e0fff117 	ldw	r3,-60(fp)
80219cf4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80219cf8:	e0bffb17 	ldw	r2,-20(fp)
80219cfc:	10800617 	ldw	r2,24(r2)
80219d00:	e0fff017 	ldw	r3,-64(fp)
80219d04:	10c00035 	stwio	r3,0(r2)
80219d08:	e0bff217 	ldw	r2,-56(fp)
80219d0c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80219d10:	e0bff417 	ldw	r2,-48(fp)
80219d14:	1001703a 	wrctl	status,r2
80219d18:	00002306 	br	80219da8 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
80219d1c:	e0bffb17 	ldw	r2,-20(fp)
80219d20:	10c00d17 	ldw	r3,52(r2)
80219d24:	e0bff117 	ldw	r2,-60(fp)
80219d28:	1884b03a 	or	r2,r3,r2
80219d2c:	10800114 	ori	r2,r2,4
80219d30:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
80219d34:	e0fff117 	ldw	r3,-60(fp)
80219d38:	00bff3c4 	movi	r2,-49
80219d3c:	1884703a 	and	r2,r3,r2
80219d40:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
80219d44:	e0fff017 	ldw	r3,-64(fp)
80219d48:	00bffdc4 	movi	r2,-9
80219d4c:	1884703a 	and	r2,r3,r2
80219d50:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80219d54:	0005303a 	rdctl	r2,status
80219d58:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80219d5c:	e0fff817 	ldw	r3,-32(fp)
80219d60:	00bfff84 	movi	r2,-2
80219d64:	1884703a 	and	r2,r3,r2
80219d68:	1001703a 	wrctl	status,r2
  
  return context;
80219d6c:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
80219d70:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80219d74:	e0bffb17 	ldw	r2,-20(fp)
80219d78:	10800317 	ldw	r2,12(r2)
80219d7c:	10800104 	addi	r2,r2,4
80219d80:	e0fff117 	ldw	r3,-60(fp)
80219d84:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80219d88:	e0bffb17 	ldw	r2,-20(fp)
80219d8c:	10800617 	ldw	r2,24(r2)
80219d90:	e0fff017 	ldw	r3,-64(fp)
80219d94:	10c00035 	stwio	r3,0(r2)
80219d98:	e0bff217 	ldw	r2,-56(fp)
80219d9c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80219da0:	e0bff617 	ldw	r2,-40(fp)
80219da4:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
80219da8:	e0bffb17 	ldw	r2,-20(fp)
80219dac:	10800617 	ldw	r2,24(r2)
80219db0:	10800104 	addi	r2,r2,4
80219db4:	e0fff917 	ldw	r3,-28(fp)
80219db8:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
80219dbc:	e0bffb17 	ldw	r2,-20(fp)
80219dc0:	10800617 	ldw	r2,24(r2)
80219dc4:	10800204 	addi	r2,r2,8
80219dc8:	e0fffa17 	ldw	r3,-24(fp)
80219dcc:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
80219dd0:	e0bffe03 	ldbu	r2,-8(fp)
80219dd4:	10000426 	beq	r2,zero,80219de8 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
80219dd8:	e0bff017 	ldw	r2,-64(fp)
80219ddc:	10800414 	ori	r2,r2,16
80219de0:	e0bff015 	stw	r2,-64(fp)
80219de4:	00000406 	br	80219df8 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
80219de8:	e0fff017 	ldw	r3,-64(fp)
80219dec:	00bffbc4 	movi	r2,-17
80219df0:	1884703a 	and	r2,r3,r2
80219df4:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
80219df8:	e0bfff03 	ldbu	r2,-4(fp)
80219dfc:	10000e26 	beq	r2,zero,80219e38 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
80219e00:	e0bff017 	ldw	r2,-64(fp)
80219e04:	10800094 	ori	r2,r2,2
80219e08:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80219e0c:	e0bffb17 	ldw	r2,-20(fp)
80219e10:	10800617 	ldw	r2,24(r2)
80219e14:	10800304 	addi	r2,r2,12
80219e18:	10800037 	ldwio	r2,0(r2)
80219e1c:	10000a1e 	bne	r2,zero,80219e48 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80219e20:	e0bffb17 	ldw	r2,-20(fp)
80219e24:	10800617 	ldw	r2,24(r2)
80219e28:	10800304 	addi	r2,r2,12
80219e2c:	00c03fc4 	movi	r3,255
80219e30:	10c00035 	stwio	r3,0(r2)
80219e34:	00000406 	br	80219e48 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
80219e38:	e0fff017 	ldw	r3,-64(fp)
80219e3c:	00bfff44 	movi	r2,-3
80219e40:	1884703a 	and	r2,r3,r2
80219e44:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
80219e48:	e0bff017 	ldw	r2,-64(fp)
80219e4c:	10800054 	ori	r2,r2,1
80219e50:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80219e54:	e0bffb17 	ldw	r2,-20(fp)
80219e58:	10800617 	ldw	r2,24(r2)
80219e5c:	e0fff017 	ldw	r3,-64(fp)
80219e60:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
80219e64:	0005883a 	mov	r2,zero
}
80219e68:	e037883a 	mov	sp,fp
80219e6c:	df000017 	ldw	fp,0(sp)
80219e70:	dec00104 	addi	sp,sp,4
80219e74:	f800283a 	ret

80219e78 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
80219e78:	defff504 	addi	sp,sp,-44
80219e7c:	dfc00a15 	stw	ra,40(sp)
80219e80:	df000915 	stw	fp,36(sp)
80219e84:	dc400815 	stw	r17,32(sp)
80219e88:	dc000715 	stw	r16,28(sp)
80219e8c:	df000904 	addi	fp,sp,36
80219e90:	e13ff815 	stw	r4,-32(fp)
80219e94:	e17ff915 	stw	r5,-28(fp)
80219e98:	300b883a 	mov	r5,r6
80219e9c:	3809883a 	mov	r4,r7
80219ea0:	e0c00217 	ldw	r3,8(fp)
80219ea4:	e0800317 	ldw	r2,12(fp)
80219ea8:	e17ffa05 	stb	r5,-24(fp)
80219eac:	e13ffb05 	stb	r4,-20(fp)
80219eb0:	e0fffc05 	stb	r3,-16(fp)
80219eb4:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
80219eb8:	e0bffc03 	ldbu	r2,-16(fp)
80219ebc:	e0fffd03 	ldbu	r3,-12(fp)
80219ec0:	180d883a 	mov	r6,r3
80219ec4:	100b883a 	mov	r5,r2
80219ec8:	e13ff917 	ldw	r4,-28(fp)
80219ecc:	02199680 	call	80219968 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
80219ed0:	10000226 	beq	r2,zero,80219edc <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
80219ed4:	00bffa84 	movi	r2,-22
80219ed8:	00000b06 	br	80219f08 <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
80219edc:	e0bff917 	ldw	r2,-28(fp)
80219ee0:	1021883a 	mov	r16,r2
80219ee4:	0023883a 	mov	r17,zero
80219ee8:	e0fffa03 	ldbu	r3,-24(fp)
80219eec:	e0bffb03 	ldbu	r2,-20(fp)
80219ef0:	d8800015 	stw	r2,0(sp)
80219ef4:	180f883a 	mov	r7,r3
80219ef8:	800b883a 	mov	r5,r16
80219efc:	880d883a 	mov	r6,r17
80219f00:	e13ff817 	ldw	r4,-32(fp)
80219f04:	0219bb80 	call	80219bb8 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
80219f08:	e6fffe04 	addi	sp,fp,-8
80219f0c:	dfc00317 	ldw	ra,12(sp)
80219f10:	df000217 	ldw	fp,8(sp)
80219f14:	dc400117 	ldw	r17,4(sp)
80219f18:	dc000017 	ldw	r16,0(sp)
80219f1c:	dec00404 	addi	sp,sp,16
80219f20:	f800283a 	ret

80219f24 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
80219f24:	defff504 	addi	sp,sp,-44
80219f28:	dfc00a15 	stw	ra,40(sp)
80219f2c:	df000915 	stw	fp,36(sp)
80219f30:	dc400815 	stw	r17,32(sp)
80219f34:	dc000715 	stw	r16,28(sp)
80219f38:	df000904 	addi	fp,sp,36
80219f3c:	e13ff815 	stw	r4,-32(fp)
80219f40:	e17ff915 	stw	r5,-28(fp)
80219f44:	300b883a 	mov	r5,r6
80219f48:	3809883a 	mov	r4,r7
80219f4c:	e0c00217 	ldw	r3,8(fp)
80219f50:	e0800317 	ldw	r2,12(fp)
80219f54:	e17ffa05 	stb	r5,-24(fp)
80219f58:	e13ffb05 	stb	r4,-20(fp)
80219f5c:	e0fffc05 	stb	r3,-16(fp)
80219f60:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
80219f64:	e0bffc03 	ldbu	r2,-16(fp)
80219f68:	e0fffd03 	ldbu	r3,-12(fp)
80219f6c:	180d883a 	mov	r6,r3
80219f70:	100b883a 	mov	r5,r2
80219f74:	e13ff917 	ldw	r4,-28(fp)
80219f78:	0219a740 	call	80219a74 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
80219f7c:	10000226 	beq	r2,zero,80219f88 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
80219f80:	00bffa84 	movi	r2,-22
80219f84:	00000b06 	br	80219fb4 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
80219f88:	e0bff917 	ldw	r2,-28(fp)
80219f8c:	1021883a 	mov	r16,r2
80219f90:	0023883a 	mov	r17,zero
80219f94:	e0fffa03 	ldbu	r3,-24(fp)
80219f98:	e0bffb03 	ldbu	r2,-20(fp)
80219f9c:	d8800015 	stw	r2,0(sp)
80219fa0:	180f883a 	mov	r7,r3
80219fa4:	800b883a 	mov	r5,r16
80219fa8:	880d883a 	mov	r6,r17
80219fac:	e13ff817 	ldw	r4,-32(fp)
80219fb0:	0219bb80 	call	80219bb8 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
80219fb4:	e6fffe04 	addi	sp,fp,-8
80219fb8:	dfc00317 	ldw	ra,12(sp)
80219fbc:	df000217 	ldw	fp,8(sp)
80219fc0:	dc400117 	ldw	r17,4(sp)
80219fc4:	dc000017 	ldw	r16,0(sp)
80219fc8:	dec00404 	addi	sp,sp,16
80219fcc:	f800283a 	ret

80219fd0 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
80219fd0:	defffc04 	addi	sp,sp,-16
80219fd4:	dfc00315 	stw	ra,12(sp)
80219fd8:	df000215 	stw	fp,8(sp)
80219fdc:	df000204 	addi	fp,sp,8
80219fe0:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
80219fe4:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
80219fe8:	d1601004 	addi	r5,gp,-32704
80219fec:	e13fff17 	ldw	r4,-4(fp)
80219ff0:	021a5cc0 	call	8021a5cc <alt_find_dev>
80219ff4:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
80219ff8:	e0bffe17 	ldw	r2,-8(fp)
80219ffc:	1000041e 	bne	r2,zero,8021a010 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
8021a000:	02183380 	call	80218338 <alt_get_errno>
8021a004:	1007883a 	mov	r3,r2
8021a008:	008004c4 	movi	r2,19
8021a00c:	18800015 	stw	r2,0(r3)
    }

    return dev;
8021a010:	e0bffe17 	ldw	r2,-8(fp)
}
8021a014:	e037883a 	mov	sp,fp
8021a018:	dfc00117 	ldw	ra,4(sp)
8021a01c:	df000017 	ldw	fp,0(sp)
8021a020:	dec00204 	addi	sp,sp,8
8021a024:	f800283a 	ret

8021a028 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8021a028:	defff804 	addi	sp,sp,-32
8021a02c:	dfc00715 	stw	ra,28(sp)
8021a030:	df000615 	stw	fp,24(sp)
8021a034:	df000604 	addi	fp,sp,24
8021a038:	e13ffd15 	stw	r4,-12(fp)
8021a03c:	e17ffe15 	stw	r5,-8(fp)
8021a040:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8021a044:	e0bffd17 	ldw	r2,-12(fp)
8021a048:	10801783 	ldbu	r2,94(r2)
8021a04c:	10803fcc 	andi	r2,r2,255
8021a050:	10000b26 	beq	r2,zero,8021a080 <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8021a054:	e0bffd17 	ldw	r2,-12(fp)
8021a058:	10800617 	ldw	r2,24(r2)
8021a05c:	00c00104 	movi	r3,4
8021a060:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8021a064:	0001883a 	nop
8021a068:	e0bffd17 	ldw	r2,-12(fp)
8021a06c:	10800617 	ldw	r2,24(r2)
8021a070:	10800037 	ldwio	r2,0(r2)
8021a074:	1080010c 	andi	r2,r2,4
8021a078:	1005d0ba 	srai	r2,r2,2
8021a07c:	103ffa1e 	bne	r2,zero,8021a068 <__reset+0xfa1fa068>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8021a080:	e0bffd17 	ldw	r2,-12(fp)
8021a084:	10800317 	ldw	r2,12(r2)
8021a088:	10800104 	addi	r2,r2,4
8021a08c:	00c00084 	movi	r3,2
8021a090:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8021a094:	0001883a 	nop
8021a098:	e0bffd17 	ldw	r2,-12(fp)
8021a09c:	10800317 	ldw	r2,12(r2)
8021a0a0:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8021a0a4:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8021a0a8:	103ffb1e 	bne	r2,zero,8021a098 <__reset+0xfa1fa098>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8021a0ac:	e0bffd17 	ldw	r2,-12(fp)
8021a0b0:	10800317 	ldw	r2,12(r2)
8021a0b4:	10800104 	addi	r2,r2,4
8021a0b8:	10800037 	ldwio	r2,0(r2)
8021a0bc:	1007883a 	mov	r3,r2
8021a0c0:	00bffbc4 	movi	r2,-17
8021a0c4:	1884703a 	and	r2,r3,r2
8021a0c8:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8021a0cc:	e0bffb17 	ldw	r2,-20(fp)
8021a0d0:	10800814 	ori	r2,r2,32
8021a0d4:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8021a0d8:	e0bffd17 	ldw	r2,-12(fp)
8021a0dc:	10800317 	ldw	r2,12(r2)
8021a0e0:	10800104 	addi	r2,r2,4
8021a0e4:	e0fffb17 	ldw	r3,-20(fp)
8021a0e8:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8021a0ec:	e0bffd17 	ldw	r2,-12(fp)
8021a0f0:	10800317 	ldw	r2,12(r2)
8021a0f4:	e0fffd17 	ldw	r3,-12(fp)
8021a0f8:	18c00317 	ldw	r3,12(r3)
8021a0fc:	18c00037 	ldwio	r3,0(r3)
8021a100:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8021a104:	e0bffd17 	ldw	r2,-12(fp)
8021a108:	10801783 	ldbu	r2,94(r2)
8021a10c:	10803fcc 	andi	r2,r2,255
8021a110:	10000826 	beq	r2,zero,8021a134 <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8021a114:	e0bffd17 	ldw	r2,-12(fp)
8021a118:	10800617 	ldw	r2,24(r2)
8021a11c:	10800404 	addi	r2,r2,16
8021a120:	e0fffd17 	ldw	r3,-12(fp)
8021a124:	18c00617 	ldw	r3,24(r3)
8021a128:	18c00404 	addi	r3,r3,16
8021a12c:	18c00037 	ldwio	r3,0(r3)
8021a130:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8021a134:	d1601004 	addi	r5,gp,-32704
8021a138:	e13ffd17 	ldw	r4,-12(fp)
8021a13c:	021a4680 	call	8021a468 <alt_dev_llist_insert>
8021a140:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8021a144:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
8021a148:	e0bffc17 	ldw	r2,-16(fp)
8021a14c:	1000081e 	bne	r2,zero,8021a170 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8021a150:	d8000015 	stw	zero,0(sp)
8021a154:	e1fffd17 	ldw	r7,-12(fp)
8021a158:	01a008b4 	movhi	r6,32802
8021a15c:	31a14d04 	addi	r6,r6,-31436
8021a160:	e17fff17 	ldw	r5,-4(fp)
8021a164:	e13ffe17 	ldw	r4,-8(fp)
8021a168:	021a65c0 	call	8021a65c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8021a16c:	00000406 	br	8021a180 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8021a170:	012008b4 	movhi	r4,32802
8021a174:	21350604 	addi	r4,r4,-11240
8021a178:	021ac900 	call	8021ac90 <alt_printf>
    }
    
    return;
8021a17c:	0001883a 	nop

}
8021a180:	e037883a 	mov	sp,fp
8021a184:	dfc00117 	ldw	ra,4(sp)
8021a188:	df000017 	ldw	fp,0(sp)
8021a18c:	dec00204 	addi	sp,sp,8
8021a190:	f800283a 	ret

8021a194 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
8021a194:	defffb04 	addi	sp,sp,-20
8021a198:	df000415 	stw	fp,16(sp)
8021a19c:	df000404 	addi	fp,sp,16
8021a1a0:	e13ffc15 	stw	r4,-16(fp)
8021a1a4:	e17ffd15 	stw	r5,-12(fp)
8021a1a8:	e1bffe15 	stw	r6,-8(fp)
8021a1ac:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8021a1b0:	e0bffc17 	ldw	r2,-16(fp)
8021a1b4:	e0fffd17 	ldw	r3,-12(fp)
8021a1b8:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8021a1bc:	e0bffc17 	ldw	r2,-16(fp)
8021a1c0:	e0ffff17 	ldw	r3,-4(fp)
8021a1c4:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8021a1c8:	e0bffc17 	ldw	r2,-16(fp)
8021a1cc:	e0fffe17 	ldw	r3,-8(fp)
8021a1d0:	10c00d15 	stw	r3,52(r2)

    return ;
8021a1d4:	0001883a 	nop
}
8021a1d8:	e037883a 	mov	sp,fp
8021a1dc:	df000017 	ldw	fp,0(sp)
8021a1e0:	dec00104 	addi	sp,sp,4
8021a1e4:	f800283a 	ret

8021a1e8 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
8021a1e8:	defffc04 	addi	sp,sp,-16
8021a1ec:	dfc00315 	stw	ra,12(sp)
8021a1f0:	df000215 	stw	fp,8(sp)
8021a1f4:	df000204 	addi	fp,sp,8
8021a1f8:	e13ffe15 	stw	r4,-8(fp)
8021a1fc:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8021a200:	000d883a 	mov	r6,zero
8021a204:	e17fff17 	ldw	r5,-4(fp)
8021a208:	e13ffe17 	ldw	r4,-8(fp)
8021a20c:	02188980 	call	80218898 <alt_msgdma_descriptor_async_transfer>

}
8021a210:	e037883a 	mov	sp,fp
8021a214:	dfc00117 	ldw	ra,4(sp)
8021a218:	df000017 	ldw	fp,0(sp)
8021a21c:	dec00204 	addi	sp,sp,8
8021a220:	f800283a 	ret

8021a224 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
8021a224:	defffc04 	addi	sp,sp,-16
8021a228:	dfc00315 	stw	ra,12(sp)
8021a22c:	df000215 	stw	fp,8(sp)
8021a230:	df000204 	addi	fp,sp,8
8021a234:	e13ffe15 	stw	r4,-8(fp)
8021a238:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8021a23c:	e1bfff17 	ldw	r6,-4(fp)
8021a240:	000b883a 	mov	r5,zero
8021a244:	e13ffe17 	ldw	r4,-8(fp)
8021a248:	02188980 	call	80218898 <alt_msgdma_descriptor_async_transfer>
}
8021a24c:	e037883a 	mov	sp,fp
8021a250:	dfc00117 	ldw	ra,4(sp)
8021a254:	df000017 	ldw	fp,0(sp)
8021a258:	dec00204 	addi	sp,sp,8
8021a25c:	f800283a 	ret

8021a260 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
8021a260:	defffc04 	addi	sp,sp,-16
8021a264:	dfc00315 	stw	ra,12(sp)
8021a268:	df000215 	stw	fp,8(sp)
8021a26c:	df000204 	addi	fp,sp,8
8021a270:	e13ffe15 	stw	r4,-8(fp)
8021a274:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8021a278:	000d883a 	mov	r6,zero
8021a27c:	e17fff17 	ldw	r5,-4(fp)
8021a280:	e13ffe17 	ldw	r4,-8(fp)
8021a284:	0218b680 	call	80218b68 <alt_msgdma_descriptor_sync_transfer>
}
8021a288:	e037883a 	mov	sp,fp
8021a28c:	dfc00117 	ldw	ra,4(sp)
8021a290:	df000017 	ldw	fp,0(sp)
8021a294:	dec00204 	addi	sp,sp,8
8021a298:	f800283a 	ret

8021a29c <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
8021a29c:	defffc04 	addi	sp,sp,-16
8021a2a0:	dfc00315 	stw	ra,12(sp)
8021a2a4:	df000215 	stw	fp,8(sp)
8021a2a8:	df000204 	addi	fp,sp,8
8021a2ac:	e13ffe15 	stw	r4,-8(fp)
8021a2b0:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8021a2b4:	e1bfff17 	ldw	r6,-4(fp)
8021a2b8:	000b883a 	mov	r5,zero
8021a2bc:	e13ffe17 	ldw	r4,-8(fp)
8021a2c0:	0218b680 	call	80218b68 <alt_msgdma_descriptor_sync_transfer>
}
8021a2c4:	e037883a 	mov	sp,fp
8021a2c8:	dfc00117 	ldw	ra,4(sp)
8021a2cc:	df000017 	ldw	fp,0(sp)
8021a2d0:	dec00204 	addi	sp,sp,8
8021a2d4:	f800283a 	ret

8021a2d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8021a2d8:	defff504 	addi	sp,sp,-44
8021a2dc:	df000a15 	stw	fp,40(sp)
8021a2e0:	df000a04 	addi	fp,sp,40
8021a2e4:	e13ffc15 	stw	r4,-16(fp)
8021a2e8:	e17ffd15 	stw	r5,-12(fp)
8021a2ec:	e1bffe15 	stw	r6,-8(fp)
8021a2f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8021a2f4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8021a2f8:	d0a02717 	ldw	r2,-32612(gp)
  
  if (alt_ticks_per_second ())
8021a2fc:	10003c26 	beq	r2,zero,8021a3f0 <alt_alarm_start+0x118>
  {
    if (alarm)
8021a300:	e0bffc17 	ldw	r2,-16(fp)
8021a304:	10003826 	beq	r2,zero,8021a3e8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
8021a308:	e0bffc17 	ldw	r2,-16(fp)
8021a30c:	e0fffe17 	ldw	r3,-8(fp)
8021a310:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8021a314:	e0bffc17 	ldw	r2,-16(fp)
8021a318:	e0ffff17 	ldw	r3,-4(fp)
8021a31c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a320:	0005303a 	rdctl	r2,status
8021a324:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a328:	e0fff917 	ldw	r3,-28(fp)
8021a32c:	00bfff84 	movi	r2,-2
8021a330:	1884703a 	and	r2,r3,r2
8021a334:	1001703a 	wrctl	status,r2
  
  return context;
8021a338:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8021a33c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8021a340:	d0a02817 	ldw	r2,-32608(gp)
      
      current_nticks = alt_nticks();
8021a344:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8021a348:	e0fffd17 	ldw	r3,-12(fp)
8021a34c:	e0bff617 	ldw	r2,-40(fp)
8021a350:	1885883a 	add	r2,r3,r2
8021a354:	10c00044 	addi	r3,r2,1
8021a358:	e0bffc17 	ldw	r2,-16(fp)
8021a35c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8021a360:	e0bffc17 	ldw	r2,-16(fp)
8021a364:	10c00217 	ldw	r3,8(r2)
8021a368:	e0bff617 	ldw	r2,-40(fp)
8021a36c:	1880042e 	bgeu	r3,r2,8021a380 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
8021a370:	e0bffc17 	ldw	r2,-16(fp)
8021a374:	00c00044 	movi	r3,1
8021a378:	10c00405 	stb	r3,16(r2)
8021a37c:	00000206 	br	8021a388 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8021a380:	e0bffc17 	ldw	r2,-16(fp)
8021a384:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8021a388:	e0bffc17 	ldw	r2,-16(fp)
8021a38c:	d0e00e04 	addi	r3,gp,-32712
8021a390:	e0fffa15 	stw	r3,-24(fp)
8021a394:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8021a398:	e0bffb17 	ldw	r2,-20(fp)
8021a39c:	e0fffa17 	ldw	r3,-24(fp)
8021a3a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8021a3a4:	e0bffa17 	ldw	r2,-24(fp)
8021a3a8:	10c00017 	ldw	r3,0(r2)
8021a3ac:	e0bffb17 	ldw	r2,-20(fp)
8021a3b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8021a3b4:	e0bffa17 	ldw	r2,-24(fp)
8021a3b8:	10800017 	ldw	r2,0(r2)
8021a3bc:	e0fffb17 	ldw	r3,-20(fp)
8021a3c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8021a3c4:	e0bffa17 	ldw	r2,-24(fp)
8021a3c8:	e0fffb17 	ldw	r3,-20(fp)
8021a3cc:	10c00015 	stw	r3,0(r2)
8021a3d0:	e0bff817 	ldw	r2,-32(fp)
8021a3d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a3d8:	e0bff717 	ldw	r2,-36(fp)
8021a3dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8021a3e0:	0005883a 	mov	r2,zero
8021a3e4:	00000306 	br	8021a3f4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
8021a3e8:	00bffa84 	movi	r2,-22
8021a3ec:	00000106 	br	8021a3f4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
8021a3f0:	00bfde84 	movi	r2,-134
  }
}
8021a3f4:	e037883a 	mov	sp,fp
8021a3f8:	df000017 	ldw	fp,0(sp)
8021a3fc:	dec00104 	addi	sp,sp,4
8021a400:	f800283a 	ret

8021a404 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
8021a404:	defffd04 	addi	sp,sp,-12
8021a408:	df000215 	stw	fp,8(sp)
8021a40c:	df000204 	addi	fp,sp,8
8021a410:	e13ffe15 	stw	r4,-8(fp)
8021a414:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8021a418:	0001883a 	nop
8021a41c:	e037883a 	mov	sp,fp
8021a420:	df000017 	ldw	fp,0(sp)
8021a424:	dec00104 	addi	sp,sp,4
8021a428:	f800283a 	ret

8021a42c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021a42c:	defffe04 	addi	sp,sp,-8
8021a430:	dfc00115 	stw	ra,4(sp)
8021a434:	df000015 	stw	fp,0(sp)
8021a438:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021a43c:	d0a00c17 	ldw	r2,-32720(gp)
8021a440:	10000326 	beq	r2,zero,8021a450 <alt_get_errno+0x24>
8021a444:	d0a00c17 	ldw	r2,-32720(gp)
8021a448:	103ee83a 	callr	r2
8021a44c:	00000106 	br	8021a454 <alt_get_errno+0x28>
8021a450:	d0a02304 	addi	r2,gp,-32628
}
8021a454:	e037883a 	mov	sp,fp
8021a458:	dfc00117 	ldw	ra,4(sp)
8021a45c:	df000017 	ldw	fp,0(sp)
8021a460:	dec00204 	addi	sp,sp,8
8021a464:	f800283a 	ret

8021a468 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8021a468:	defffa04 	addi	sp,sp,-24
8021a46c:	dfc00515 	stw	ra,20(sp)
8021a470:	df000415 	stw	fp,16(sp)
8021a474:	df000404 	addi	fp,sp,16
8021a478:	e13ffe15 	stw	r4,-8(fp)
8021a47c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8021a480:	e0bffe17 	ldw	r2,-8(fp)
8021a484:	10000326 	beq	r2,zero,8021a494 <alt_dev_llist_insert+0x2c>
8021a488:	e0bffe17 	ldw	r2,-8(fp)
8021a48c:	10800217 	ldw	r2,8(r2)
8021a490:	1000061e 	bne	r2,zero,8021a4ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
8021a494:	021a42c0 	call	8021a42c <alt_get_errno>
8021a498:	1007883a 	mov	r3,r2
8021a49c:	00800584 	movi	r2,22
8021a4a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8021a4a4:	00bffa84 	movi	r2,-22
8021a4a8:	00001306 	br	8021a4f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8021a4ac:	e0bffe17 	ldw	r2,-8(fp)
8021a4b0:	e0ffff17 	ldw	r3,-4(fp)
8021a4b4:	e0fffc15 	stw	r3,-16(fp)
8021a4b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8021a4bc:	e0bffd17 	ldw	r2,-12(fp)
8021a4c0:	e0fffc17 	ldw	r3,-16(fp)
8021a4c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8021a4c8:	e0bffc17 	ldw	r2,-16(fp)
8021a4cc:	10c00017 	ldw	r3,0(r2)
8021a4d0:	e0bffd17 	ldw	r2,-12(fp)
8021a4d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8021a4d8:	e0bffc17 	ldw	r2,-16(fp)
8021a4dc:	10800017 	ldw	r2,0(r2)
8021a4e0:	e0fffd17 	ldw	r3,-12(fp)
8021a4e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8021a4e8:	e0bffc17 	ldw	r2,-16(fp)
8021a4ec:	e0fffd17 	ldw	r3,-12(fp)
8021a4f0:	10c00015 	stw	r3,0(r2)

  return 0;  
8021a4f4:	0005883a 	mov	r2,zero
}
8021a4f8:	e037883a 	mov	sp,fp
8021a4fc:	dfc00117 	ldw	ra,4(sp)
8021a500:	df000017 	ldw	fp,0(sp)
8021a504:	dec00204 	addi	sp,sp,8
8021a508:	f800283a 	ret

8021a50c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8021a50c:	defffd04 	addi	sp,sp,-12
8021a510:	dfc00215 	stw	ra,8(sp)
8021a514:	df000115 	stw	fp,4(sp)
8021a518:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8021a51c:	00a008b4 	movhi	r2,32802
8021a520:	10ad9704 	addi	r2,r2,-18852
8021a524:	e0bfff15 	stw	r2,-4(fp)
8021a528:	00000606 	br	8021a544 <_do_ctors+0x38>
        (*ctor) (); 
8021a52c:	e0bfff17 	ldw	r2,-4(fp)
8021a530:	10800017 	ldw	r2,0(r2)
8021a534:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8021a538:	e0bfff17 	ldw	r2,-4(fp)
8021a53c:	10bfff04 	addi	r2,r2,-4
8021a540:	e0bfff15 	stw	r2,-4(fp)
8021a544:	e0ffff17 	ldw	r3,-4(fp)
8021a548:	00a008b4 	movhi	r2,32802
8021a54c:	10ad9804 	addi	r2,r2,-18848
8021a550:	18bff62e 	bgeu	r3,r2,8021a52c <__reset+0xfa1fa52c>
        (*ctor) (); 
}
8021a554:	0001883a 	nop
8021a558:	e037883a 	mov	sp,fp
8021a55c:	dfc00117 	ldw	ra,4(sp)
8021a560:	df000017 	ldw	fp,0(sp)
8021a564:	dec00204 	addi	sp,sp,8
8021a568:	f800283a 	ret

8021a56c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8021a56c:	defffd04 	addi	sp,sp,-12
8021a570:	dfc00215 	stw	ra,8(sp)
8021a574:	df000115 	stw	fp,4(sp)
8021a578:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8021a57c:	00a008b4 	movhi	r2,32802
8021a580:	10ad9704 	addi	r2,r2,-18852
8021a584:	e0bfff15 	stw	r2,-4(fp)
8021a588:	00000606 	br	8021a5a4 <_do_dtors+0x38>
        (*dtor) (); 
8021a58c:	e0bfff17 	ldw	r2,-4(fp)
8021a590:	10800017 	ldw	r2,0(r2)
8021a594:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8021a598:	e0bfff17 	ldw	r2,-4(fp)
8021a59c:	10bfff04 	addi	r2,r2,-4
8021a5a0:	e0bfff15 	stw	r2,-4(fp)
8021a5a4:	e0ffff17 	ldw	r3,-4(fp)
8021a5a8:	00a008b4 	movhi	r2,32802
8021a5ac:	10ad9804 	addi	r2,r2,-18848
8021a5b0:	18bff62e 	bgeu	r3,r2,8021a58c <__reset+0xfa1fa58c>
        (*dtor) (); 
}
8021a5b4:	0001883a 	nop
8021a5b8:	e037883a 	mov	sp,fp
8021a5bc:	dfc00117 	ldw	ra,4(sp)
8021a5c0:	df000017 	ldw	fp,0(sp)
8021a5c4:	dec00204 	addi	sp,sp,8
8021a5c8:	f800283a 	ret

8021a5cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8021a5cc:	defffa04 	addi	sp,sp,-24
8021a5d0:	dfc00515 	stw	ra,20(sp)
8021a5d4:	df000415 	stw	fp,16(sp)
8021a5d8:	df000404 	addi	fp,sp,16
8021a5dc:	e13ffe15 	stw	r4,-8(fp)
8021a5e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8021a5e4:	e0bfff17 	ldw	r2,-4(fp)
8021a5e8:	10800017 	ldw	r2,0(r2)
8021a5ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8021a5f0:	e13ffe17 	ldw	r4,-8(fp)
8021a5f4:	02066240 	call	80206624 <strlen>
8021a5f8:	10800044 	addi	r2,r2,1
8021a5fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8021a600:	00000d06 	br	8021a638 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8021a604:	e0bffc17 	ldw	r2,-16(fp)
8021a608:	10800217 	ldw	r2,8(r2)
8021a60c:	e0fffd17 	ldw	r3,-12(fp)
8021a610:	180d883a 	mov	r6,r3
8021a614:	e17ffe17 	ldw	r5,-8(fp)
8021a618:	1009883a 	mov	r4,r2
8021a61c:	021b1b00 	call	8021b1b0 <memcmp>
8021a620:	1000021e 	bne	r2,zero,8021a62c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
8021a624:	e0bffc17 	ldw	r2,-16(fp)
8021a628:	00000706 	br	8021a648 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
8021a62c:	e0bffc17 	ldw	r2,-16(fp)
8021a630:	10800017 	ldw	r2,0(r2)
8021a634:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8021a638:	e0fffc17 	ldw	r3,-16(fp)
8021a63c:	e0bfff17 	ldw	r2,-4(fp)
8021a640:	18bff01e 	bne	r3,r2,8021a604 <__reset+0xfa1fa604>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8021a644:	0005883a 	mov	r2,zero
}
8021a648:	e037883a 	mov	sp,fp
8021a64c:	dfc00117 	ldw	ra,4(sp)
8021a650:	df000017 	ldw	fp,0(sp)
8021a654:	dec00204 	addi	sp,sp,8
8021a658:	f800283a 	ret

8021a65c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8021a65c:	defff904 	addi	sp,sp,-28
8021a660:	dfc00615 	stw	ra,24(sp)
8021a664:	df000515 	stw	fp,20(sp)
8021a668:	df000504 	addi	fp,sp,20
8021a66c:	e13ffc15 	stw	r4,-16(fp)
8021a670:	e17ffd15 	stw	r5,-12(fp)
8021a674:	e1bffe15 	stw	r6,-8(fp)
8021a678:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8021a67c:	e0800217 	ldw	r2,8(fp)
8021a680:	d8800015 	stw	r2,0(sp)
8021a684:	e1ffff17 	ldw	r7,-4(fp)
8021a688:	e1bffe17 	ldw	r6,-8(fp)
8021a68c:	e17ffd17 	ldw	r5,-12(fp)
8021a690:	e13ffc17 	ldw	r4,-16(fp)
8021a694:	021a80c0 	call	8021a80c <alt_iic_isr_register>
}  
8021a698:	e037883a 	mov	sp,fp
8021a69c:	dfc00117 	ldw	ra,4(sp)
8021a6a0:	df000017 	ldw	fp,0(sp)
8021a6a4:	dec00204 	addi	sp,sp,8
8021a6a8:	f800283a 	ret

8021a6ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8021a6ac:	defff904 	addi	sp,sp,-28
8021a6b0:	df000615 	stw	fp,24(sp)
8021a6b4:	df000604 	addi	fp,sp,24
8021a6b8:	e13ffe15 	stw	r4,-8(fp)
8021a6bc:	e17fff15 	stw	r5,-4(fp)
8021a6c0:	e0bfff17 	ldw	r2,-4(fp)
8021a6c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a6c8:	0005303a 	rdctl	r2,status
8021a6cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a6d0:	e0fffb17 	ldw	r3,-20(fp)
8021a6d4:	00bfff84 	movi	r2,-2
8021a6d8:	1884703a 	and	r2,r3,r2
8021a6dc:	1001703a 	wrctl	status,r2
  
  return context;
8021a6e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8021a6e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8021a6e8:	00c00044 	movi	r3,1
8021a6ec:	e0bffa17 	ldw	r2,-24(fp)
8021a6f0:	1884983a 	sll	r2,r3,r2
8021a6f4:	1007883a 	mov	r3,r2
8021a6f8:	d0a02917 	ldw	r2,-32604(gp)
8021a6fc:	1884b03a 	or	r2,r3,r2
8021a700:	d0a02915 	stw	r2,-32604(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8021a704:	d0a02917 	ldw	r2,-32604(gp)
8021a708:	100170fa 	wrctl	ienable,r2
8021a70c:	e0bffc17 	ldw	r2,-16(fp)
8021a710:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a714:	e0bffd17 	ldw	r2,-12(fp)
8021a718:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8021a71c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8021a720:	0001883a 	nop
}
8021a724:	e037883a 	mov	sp,fp
8021a728:	df000017 	ldw	fp,0(sp)
8021a72c:	dec00104 	addi	sp,sp,4
8021a730:	f800283a 	ret

8021a734 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8021a734:	defff904 	addi	sp,sp,-28
8021a738:	df000615 	stw	fp,24(sp)
8021a73c:	df000604 	addi	fp,sp,24
8021a740:	e13ffe15 	stw	r4,-8(fp)
8021a744:	e17fff15 	stw	r5,-4(fp)
8021a748:	e0bfff17 	ldw	r2,-4(fp)
8021a74c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a750:	0005303a 	rdctl	r2,status
8021a754:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a758:	e0fffb17 	ldw	r3,-20(fp)
8021a75c:	00bfff84 	movi	r2,-2
8021a760:	1884703a 	and	r2,r3,r2
8021a764:	1001703a 	wrctl	status,r2
  
  return context;
8021a768:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8021a76c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8021a770:	00c00044 	movi	r3,1
8021a774:	e0bffa17 	ldw	r2,-24(fp)
8021a778:	1884983a 	sll	r2,r3,r2
8021a77c:	0084303a 	nor	r2,zero,r2
8021a780:	1007883a 	mov	r3,r2
8021a784:	d0a02917 	ldw	r2,-32604(gp)
8021a788:	1884703a 	and	r2,r3,r2
8021a78c:	d0a02915 	stw	r2,-32604(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8021a790:	d0a02917 	ldw	r2,-32604(gp)
8021a794:	100170fa 	wrctl	ienable,r2
8021a798:	e0bffc17 	ldw	r2,-16(fp)
8021a79c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a7a0:	e0bffd17 	ldw	r2,-12(fp)
8021a7a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8021a7a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8021a7ac:	0001883a 	nop
}
8021a7b0:	e037883a 	mov	sp,fp
8021a7b4:	df000017 	ldw	fp,0(sp)
8021a7b8:	dec00104 	addi	sp,sp,4
8021a7bc:	f800283a 	ret

8021a7c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8021a7c0:	defffc04 	addi	sp,sp,-16
8021a7c4:	df000315 	stw	fp,12(sp)
8021a7c8:	df000304 	addi	fp,sp,12
8021a7cc:	e13ffe15 	stw	r4,-8(fp)
8021a7d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8021a7d4:	000530fa 	rdctl	r2,ienable
8021a7d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8021a7dc:	00c00044 	movi	r3,1
8021a7e0:	e0bfff17 	ldw	r2,-4(fp)
8021a7e4:	1884983a 	sll	r2,r3,r2
8021a7e8:	1007883a 	mov	r3,r2
8021a7ec:	e0bffd17 	ldw	r2,-12(fp)
8021a7f0:	1884703a 	and	r2,r3,r2
8021a7f4:	1004c03a 	cmpne	r2,r2,zero
8021a7f8:	10803fcc 	andi	r2,r2,255
}
8021a7fc:	e037883a 	mov	sp,fp
8021a800:	df000017 	ldw	fp,0(sp)
8021a804:	dec00104 	addi	sp,sp,4
8021a808:	f800283a 	ret

8021a80c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8021a80c:	defff504 	addi	sp,sp,-44
8021a810:	dfc00a15 	stw	ra,40(sp)
8021a814:	df000915 	stw	fp,36(sp)
8021a818:	df000904 	addi	fp,sp,36
8021a81c:	e13ffc15 	stw	r4,-16(fp)
8021a820:	e17ffd15 	stw	r5,-12(fp)
8021a824:	e1bffe15 	stw	r6,-8(fp)
8021a828:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8021a82c:	00bffa84 	movi	r2,-22
8021a830:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8021a834:	e0bffd17 	ldw	r2,-12(fp)
8021a838:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8021a83c:	e0bff817 	ldw	r2,-32(fp)
8021a840:	10800808 	cmpgei	r2,r2,32
8021a844:	1000271e 	bne	r2,zero,8021a8e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a848:	0005303a 	rdctl	r2,status
8021a84c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a850:	e0fffb17 	ldw	r3,-20(fp)
8021a854:	00bfff84 	movi	r2,-2
8021a858:	1884703a 	and	r2,r3,r2
8021a85c:	1001703a 	wrctl	status,r2
  
  return context;
8021a860:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8021a864:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8021a868:	00a008b4 	movhi	r2,32802
8021a86c:	10bda004 	addi	r2,r2,-2432
8021a870:	e0fff817 	ldw	r3,-32(fp)
8021a874:	180690fa 	slli	r3,r3,3
8021a878:	10c5883a 	add	r2,r2,r3
8021a87c:	e0fffe17 	ldw	r3,-8(fp)
8021a880:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8021a884:	00a008b4 	movhi	r2,32802
8021a888:	10bda004 	addi	r2,r2,-2432
8021a88c:	e0fff817 	ldw	r3,-32(fp)
8021a890:	180690fa 	slli	r3,r3,3
8021a894:	10c5883a 	add	r2,r2,r3
8021a898:	10800104 	addi	r2,r2,4
8021a89c:	e0ffff17 	ldw	r3,-4(fp)
8021a8a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8021a8a4:	e0bffe17 	ldw	r2,-8(fp)
8021a8a8:	10000526 	beq	r2,zero,8021a8c0 <alt_iic_isr_register+0xb4>
8021a8ac:	e0bff817 	ldw	r2,-32(fp)
8021a8b0:	100b883a 	mov	r5,r2
8021a8b4:	e13ffc17 	ldw	r4,-16(fp)
8021a8b8:	021a6ac0 	call	8021a6ac <alt_ic_irq_enable>
8021a8bc:	00000406 	br	8021a8d0 <alt_iic_isr_register+0xc4>
8021a8c0:	e0bff817 	ldw	r2,-32(fp)
8021a8c4:	100b883a 	mov	r5,r2
8021a8c8:	e13ffc17 	ldw	r4,-16(fp)
8021a8cc:	021a7340 	call	8021a734 <alt_ic_irq_disable>
8021a8d0:	e0bff715 	stw	r2,-36(fp)
8021a8d4:	e0bffa17 	ldw	r2,-24(fp)
8021a8d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a8dc:	e0bff917 	ldw	r2,-28(fp)
8021a8e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8021a8e4:	e0bff717 	ldw	r2,-36(fp)
}
8021a8e8:	e037883a 	mov	sp,fp
8021a8ec:	dfc00117 	ldw	ra,4(sp)
8021a8f0:	df000017 	ldw	fp,0(sp)
8021a8f4:	dec00204 	addi	sp,sp,8
8021a8f8:	f800283a 	ret

8021a8fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8021a8fc:	defff904 	addi	sp,sp,-28
8021a900:	dfc00615 	stw	ra,24(sp)
8021a904:	df000515 	stw	fp,20(sp)
8021a908:	df000504 	addi	fp,sp,20
8021a90c:	e13ffc15 	stw	r4,-16(fp)
8021a910:	e17ffd15 	stw	r5,-12(fp)
8021a914:	e1bffe15 	stw	r6,-8(fp)
8021a918:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8021a91c:	e1bfff17 	ldw	r6,-4(fp)
8021a920:	e17ffe17 	ldw	r5,-8(fp)
8021a924:	e13ffd17 	ldw	r4,-12(fp)
8021a928:	021ab3c0 	call	8021ab3c <open>
8021a92c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8021a930:	e0bffb17 	ldw	r2,-20(fp)
8021a934:	10001c16 	blt	r2,zero,8021a9a8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
8021a938:	00a008b4 	movhi	r2,32802
8021a93c:	10b74304 	addi	r2,r2,-8948
8021a940:	e0fffb17 	ldw	r3,-20(fp)
8021a944:	18c00324 	muli	r3,r3,12
8021a948:	10c5883a 	add	r2,r2,r3
8021a94c:	10c00017 	ldw	r3,0(r2)
8021a950:	e0bffc17 	ldw	r2,-16(fp)
8021a954:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8021a958:	00a008b4 	movhi	r2,32802
8021a95c:	10b74304 	addi	r2,r2,-8948
8021a960:	e0fffb17 	ldw	r3,-20(fp)
8021a964:	18c00324 	muli	r3,r3,12
8021a968:	10c5883a 	add	r2,r2,r3
8021a96c:	10800104 	addi	r2,r2,4
8021a970:	10c00017 	ldw	r3,0(r2)
8021a974:	e0bffc17 	ldw	r2,-16(fp)
8021a978:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8021a97c:	00a008b4 	movhi	r2,32802
8021a980:	10b74304 	addi	r2,r2,-8948
8021a984:	e0fffb17 	ldw	r3,-20(fp)
8021a988:	18c00324 	muli	r3,r3,12
8021a98c:	10c5883a 	add	r2,r2,r3
8021a990:	10800204 	addi	r2,r2,8
8021a994:	10c00017 	ldw	r3,0(r2)
8021a998:	e0bffc17 	ldw	r2,-16(fp)
8021a99c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8021a9a0:	e13ffb17 	ldw	r4,-20(fp)
8021a9a4:	02169940 	call	80216994 <alt_release_fd>
  }
} 
8021a9a8:	0001883a 	nop
8021a9ac:	e037883a 	mov	sp,fp
8021a9b0:	dfc00117 	ldw	ra,4(sp)
8021a9b4:	df000017 	ldw	fp,0(sp)
8021a9b8:	dec00204 	addi	sp,sp,8
8021a9bc:	f800283a 	ret

8021a9c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8021a9c0:	defffb04 	addi	sp,sp,-20
8021a9c4:	dfc00415 	stw	ra,16(sp)
8021a9c8:	df000315 	stw	fp,12(sp)
8021a9cc:	df000304 	addi	fp,sp,12
8021a9d0:	e13ffd15 	stw	r4,-12(fp)
8021a9d4:	e17ffe15 	stw	r5,-8(fp)
8021a9d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8021a9dc:	01c07fc4 	movi	r7,511
8021a9e0:	01800044 	movi	r6,1
8021a9e4:	e17ffd17 	ldw	r5,-12(fp)
8021a9e8:	012008b4 	movhi	r4,32802
8021a9ec:	21374604 	addi	r4,r4,-8936
8021a9f0:	021a8fc0 	call	8021a8fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8021a9f4:	01c07fc4 	movi	r7,511
8021a9f8:	000d883a 	mov	r6,zero
8021a9fc:	e17ffe17 	ldw	r5,-8(fp)
8021aa00:	012008b4 	movhi	r4,32802
8021aa04:	21374304 	addi	r4,r4,-8948
8021aa08:	021a8fc0 	call	8021a8fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8021aa0c:	01c07fc4 	movi	r7,511
8021aa10:	01800044 	movi	r6,1
8021aa14:	e17fff17 	ldw	r5,-4(fp)
8021aa18:	012008b4 	movhi	r4,32802
8021aa1c:	21374904 	addi	r4,r4,-8924
8021aa20:	021a8fc0 	call	8021a8fc <alt_open_fd>
}  
8021aa24:	0001883a 	nop
8021aa28:	e037883a 	mov	sp,fp
8021aa2c:	dfc00117 	ldw	ra,4(sp)
8021aa30:	df000017 	ldw	fp,0(sp)
8021aa34:	dec00204 	addi	sp,sp,8
8021aa38:	f800283a 	ret

8021aa3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021aa3c:	defffe04 	addi	sp,sp,-8
8021aa40:	dfc00115 	stw	ra,4(sp)
8021aa44:	df000015 	stw	fp,0(sp)
8021aa48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021aa4c:	d0a00c17 	ldw	r2,-32720(gp)
8021aa50:	10000326 	beq	r2,zero,8021aa60 <alt_get_errno+0x24>
8021aa54:	d0a00c17 	ldw	r2,-32720(gp)
8021aa58:	103ee83a 	callr	r2
8021aa5c:	00000106 	br	8021aa64 <alt_get_errno+0x28>
8021aa60:	d0a02304 	addi	r2,gp,-32628
}
8021aa64:	e037883a 	mov	sp,fp
8021aa68:	dfc00117 	ldw	ra,4(sp)
8021aa6c:	df000017 	ldw	fp,0(sp)
8021aa70:	dec00204 	addi	sp,sp,8
8021aa74:	f800283a 	ret

8021aa78 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8021aa78:	defffd04 	addi	sp,sp,-12
8021aa7c:	df000215 	stw	fp,8(sp)
8021aa80:	df000204 	addi	fp,sp,8
8021aa84:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8021aa88:	e0bfff17 	ldw	r2,-4(fp)
8021aa8c:	10800217 	ldw	r2,8(r2)
8021aa90:	10d00034 	orhi	r3,r2,16384
8021aa94:	e0bfff17 	ldw	r2,-4(fp)
8021aa98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8021aa9c:	e03ffe15 	stw	zero,-8(fp)
8021aaa0:	00001d06 	br	8021ab18 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8021aaa4:	00a008b4 	movhi	r2,32802
8021aaa8:	10b74304 	addi	r2,r2,-8948
8021aaac:	e0fffe17 	ldw	r3,-8(fp)
8021aab0:	18c00324 	muli	r3,r3,12
8021aab4:	10c5883a 	add	r2,r2,r3
8021aab8:	10c00017 	ldw	r3,0(r2)
8021aabc:	e0bfff17 	ldw	r2,-4(fp)
8021aac0:	10800017 	ldw	r2,0(r2)
8021aac4:	1880111e 	bne	r3,r2,8021ab0c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8021aac8:	00a008b4 	movhi	r2,32802
8021aacc:	10b74304 	addi	r2,r2,-8948
8021aad0:	e0fffe17 	ldw	r3,-8(fp)
8021aad4:	18c00324 	muli	r3,r3,12
8021aad8:	10c5883a 	add	r2,r2,r3
8021aadc:	10800204 	addi	r2,r2,8
8021aae0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8021aae4:	1000090e 	bge	r2,zero,8021ab0c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8021aae8:	e0bffe17 	ldw	r2,-8(fp)
8021aaec:	10c00324 	muli	r3,r2,12
8021aaf0:	00a008b4 	movhi	r2,32802
8021aaf4:	10b74304 	addi	r2,r2,-8948
8021aaf8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8021aafc:	e0bfff17 	ldw	r2,-4(fp)
8021ab00:	18800226 	beq	r3,r2,8021ab0c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8021ab04:	00bffcc4 	movi	r2,-13
8021ab08:	00000806 	br	8021ab2c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8021ab0c:	e0bffe17 	ldw	r2,-8(fp)
8021ab10:	10800044 	addi	r2,r2,1
8021ab14:	e0bffe15 	stw	r2,-8(fp)
8021ab18:	d0a00b17 	ldw	r2,-32724(gp)
8021ab1c:	1007883a 	mov	r3,r2
8021ab20:	e0bffe17 	ldw	r2,-8(fp)
8021ab24:	18bfdf2e 	bgeu	r3,r2,8021aaa4 <__reset+0xfa1faaa4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
8021ab28:	0005883a 	mov	r2,zero
}
8021ab2c:	e037883a 	mov	sp,fp
8021ab30:	df000017 	ldw	fp,0(sp)
8021ab34:	dec00104 	addi	sp,sp,4
8021ab38:	f800283a 	ret

8021ab3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8021ab3c:	defff604 	addi	sp,sp,-40
8021ab40:	dfc00915 	stw	ra,36(sp)
8021ab44:	df000815 	stw	fp,32(sp)
8021ab48:	df000804 	addi	fp,sp,32
8021ab4c:	e13ffd15 	stw	r4,-12(fp)
8021ab50:	e17ffe15 	stw	r5,-8(fp)
8021ab54:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8021ab58:	00bfffc4 	movi	r2,-1
8021ab5c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8021ab60:	00bffb44 	movi	r2,-19
8021ab64:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
8021ab68:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8021ab6c:	d1600904 	addi	r5,gp,-32732
8021ab70:	e13ffd17 	ldw	r4,-12(fp)
8021ab74:	021a5cc0 	call	8021a5cc <alt_find_dev>
8021ab78:	e0bff815 	stw	r2,-32(fp)
8021ab7c:	e0bff817 	ldw	r2,-32(fp)
8021ab80:	1000051e 	bne	r2,zero,8021ab98 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8021ab84:	e13ffd17 	ldw	r4,-12(fp)
8021ab88:	021af1c0 	call	8021af1c <alt_find_file>
8021ab8c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8021ab90:	00800044 	movi	r2,1
8021ab94:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8021ab98:	e0bff817 	ldw	r2,-32(fp)
8021ab9c:	10002926 	beq	r2,zero,8021ac44 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8021aba0:	e13ff817 	ldw	r4,-32(fp)
8021aba4:	021b0240 	call	8021b024 <alt_get_fd>
8021aba8:	e0bff915 	stw	r2,-28(fp)
8021abac:	e0bff917 	ldw	r2,-28(fp)
8021abb0:	1000030e 	bge	r2,zero,8021abc0 <open+0x84>
    {
      status = index;
8021abb4:	e0bff917 	ldw	r2,-28(fp)
8021abb8:	e0bffa15 	stw	r2,-24(fp)
8021abbc:	00002306 	br	8021ac4c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8021abc0:	e0bff917 	ldw	r2,-28(fp)
8021abc4:	10c00324 	muli	r3,r2,12
8021abc8:	00a008b4 	movhi	r2,32802
8021abcc:	10b74304 	addi	r2,r2,-8948
8021abd0:	1885883a 	add	r2,r3,r2
8021abd4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8021abd8:	e0fffe17 	ldw	r3,-8(fp)
8021abdc:	00900034 	movhi	r2,16384
8021abe0:	10bfffc4 	addi	r2,r2,-1
8021abe4:	1886703a 	and	r3,r3,r2
8021abe8:	e0bffc17 	ldw	r2,-16(fp)
8021abec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8021abf0:	e0bffb17 	ldw	r2,-20(fp)
8021abf4:	1000051e 	bne	r2,zero,8021ac0c <open+0xd0>
8021abf8:	e13ffc17 	ldw	r4,-16(fp)
8021abfc:	021aa780 	call	8021aa78 <alt_file_locked>
8021ac00:	e0bffa15 	stw	r2,-24(fp)
8021ac04:	e0bffa17 	ldw	r2,-24(fp)
8021ac08:	10001016 	blt	r2,zero,8021ac4c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8021ac0c:	e0bff817 	ldw	r2,-32(fp)
8021ac10:	10800317 	ldw	r2,12(r2)
8021ac14:	10000826 	beq	r2,zero,8021ac38 <open+0xfc>
8021ac18:	e0bff817 	ldw	r2,-32(fp)
8021ac1c:	10800317 	ldw	r2,12(r2)
8021ac20:	e1ffff17 	ldw	r7,-4(fp)
8021ac24:	e1bffe17 	ldw	r6,-8(fp)
8021ac28:	e17ffd17 	ldw	r5,-12(fp)
8021ac2c:	e13ffc17 	ldw	r4,-16(fp)
8021ac30:	103ee83a 	callr	r2
8021ac34:	00000106 	br	8021ac3c <open+0x100>
8021ac38:	0005883a 	mov	r2,zero
8021ac3c:	e0bffa15 	stw	r2,-24(fp)
8021ac40:	00000206 	br	8021ac4c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
8021ac44:	00bffb44 	movi	r2,-19
8021ac48:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8021ac4c:	e0bffa17 	ldw	r2,-24(fp)
8021ac50:	1000090e 	bge	r2,zero,8021ac78 <open+0x13c>
  {
    alt_release_fd (index);  
8021ac54:	e13ff917 	ldw	r4,-28(fp)
8021ac58:	02169940 	call	80216994 <alt_release_fd>
    ALT_ERRNO = -status;
8021ac5c:	021aa3c0 	call	8021aa3c <alt_get_errno>
8021ac60:	1007883a 	mov	r3,r2
8021ac64:	e0bffa17 	ldw	r2,-24(fp)
8021ac68:	0085c83a 	sub	r2,zero,r2
8021ac6c:	18800015 	stw	r2,0(r3)
    return -1;
8021ac70:	00bfffc4 	movi	r2,-1
8021ac74:	00000106 	br	8021ac7c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
8021ac78:	e0bff917 	ldw	r2,-28(fp)
}
8021ac7c:	e037883a 	mov	sp,fp
8021ac80:	dfc00117 	ldw	ra,4(sp)
8021ac84:	df000017 	ldw	fp,0(sp)
8021ac88:	dec00204 	addi	sp,sp,8
8021ac8c:	f800283a 	ret

8021ac90 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8021ac90:	defff204 	addi	sp,sp,-56
8021ac94:	dfc00a15 	stw	ra,40(sp)
8021ac98:	df000915 	stw	fp,36(sp)
8021ac9c:	df000904 	addi	fp,sp,36
8021aca0:	e13fff15 	stw	r4,-4(fp)
8021aca4:	e1400215 	stw	r5,8(fp)
8021aca8:	e1800315 	stw	r6,12(fp)
8021acac:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8021acb0:	e0800204 	addi	r2,fp,8
8021acb4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8021acb8:	e0bfff17 	ldw	r2,-4(fp)
8021acbc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8021acc0:	00006f06 	br	8021ae80 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8021acc4:	e0bff807 	ldb	r2,-32(fp)
8021acc8:	10800960 	cmpeqi	r2,r2,37
8021accc:	1000041e 	bne	r2,zero,8021ace0 <alt_printf+0x50>
        {
            alt_putchar(c);
8021acd0:	e0bff807 	ldb	r2,-32(fp)
8021acd4:	1009883a 	mov	r4,r2
8021acd8:	021aebc0 	call	8021aebc <alt_putchar>
8021acdc:	00006806 	br	8021ae80 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8021ace0:	e0bff717 	ldw	r2,-36(fp)
8021ace4:	10c00044 	addi	r3,r2,1
8021ace8:	e0fff715 	stw	r3,-36(fp)
8021acec:	10800003 	ldbu	r2,0(r2)
8021acf0:	e0bff805 	stb	r2,-32(fp)
8021acf4:	e0bff807 	ldb	r2,-32(fp)
8021acf8:	10006926 	beq	r2,zero,8021aea0 <alt_printf+0x210>
            {
                if (c == '%')
8021acfc:	e0bff807 	ldb	r2,-32(fp)
8021ad00:	10800958 	cmpnei	r2,r2,37
8021ad04:	1000041e 	bne	r2,zero,8021ad18 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8021ad08:	e0bff807 	ldb	r2,-32(fp)
8021ad0c:	1009883a 	mov	r4,r2
8021ad10:	021aebc0 	call	8021aebc <alt_putchar>
8021ad14:	00005a06 	br	8021ae80 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
8021ad18:	e0bff807 	ldb	r2,-32(fp)
8021ad1c:	108018d8 	cmpnei	r2,r2,99
8021ad20:	1000081e 	bne	r2,zero,8021ad44 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
8021ad24:	e0bffe17 	ldw	r2,-8(fp)
8021ad28:	10c00104 	addi	r3,r2,4
8021ad2c:	e0fffe15 	stw	r3,-8(fp)
8021ad30:	10800017 	ldw	r2,0(r2)
8021ad34:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8021ad38:	e13ffd17 	ldw	r4,-12(fp)
8021ad3c:	021aebc0 	call	8021aebc <alt_putchar>
8021ad40:	00004f06 	br	8021ae80 <alt_printf+0x1f0>
                }
                else if (c == 'x')
8021ad44:	e0bff807 	ldb	r2,-32(fp)
8021ad48:	10801e18 	cmpnei	r2,r2,120
8021ad4c:	1000341e 	bne	r2,zero,8021ae20 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8021ad50:	e0bffe17 	ldw	r2,-8(fp)
8021ad54:	10c00104 	addi	r3,r2,4
8021ad58:	e0fffe15 	stw	r3,-8(fp)
8021ad5c:	10800017 	ldw	r2,0(r2)
8021ad60:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8021ad64:	e0bffb17 	ldw	r2,-20(fp)
8021ad68:	1000031e 	bne	r2,zero,8021ad78 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
8021ad6c:	01000c04 	movi	r4,48
8021ad70:	021aebc0 	call	8021aebc <alt_putchar>
                        continue;
8021ad74:	00004206 	br	8021ae80 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8021ad78:	00800704 	movi	r2,28
8021ad7c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8021ad80:	00000306 	br	8021ad90 <alt_printf+0x100>
                        digit_shift -= 4;
8021ad84:	e0bff917 	ldw	r2,-28(fp)
8021ad88:	10bfff04 	addi	r2,r2,-4
8021ad8c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8021ad90:	00c003c4 	movi	r3,15
8021ad94:	e0bff917 	ldw	r2,-28(fp)
8021ad98:	1884983a 	sll	r2,r3,r2
8021ad9c:	1007883a 	mov	r3,r2
8021ada0:	e0bffb17 	ldw	r2,-20(fp)
8021ada4:	1884703a 	and	r2,r3,r2
8021ada8:	103ff626 	beq	r2,zero,8021ad84 <__reset+0xfa1fad84>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8021adac:	00001906 	br	8021ae14 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8021adb0:	00c003c4 	movi	r3,15
8021adb4:	e0bff917 	ldw	r2,-28(fp)
8021adb8:	1884983a 	sll	r2,r3,r2
8021adbc:	1007883a 	mov	r3,r2
8021adc0:	e0bffb17 	ldw	r2,-20(fp)
8021adc4:	1886703a 	and	r3,r3,r2
8021adc8:	e0bff917 	ldw	r2,-28(fp)
8021adcc:	1884d83a 	srl	r2,r3,r2
8021add0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8021add4:	e0bffc17 	ldw	r2,-16(fp)
8021add8:	108002a8 	cmpgeui	r2,r2,10
8021addc:	1000041e 	bne	r2,zero,8021adf0 <alt_printf+0x160>
                            c = '0' + digit;
8021ade0:	e0bffc17 	ldw	r2,-16(fp)
8021ade4:	10800c04 	addi	r2,r2,48
8021ade8:	e0bff805 	stb	r2,-32(fp)
8021adec:	00000306 	br	8021adfc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
8021adf0:	e0bffc17 	ldw	r2,-16(fp)
8021adf4:	108015c4 	addi	r2,r2,87
8021adf8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8021adfc:	e0bff807 	ldb	r2,-32(fp)
8021ae00:	1009883a 	mov	r4,r2
8021ae04:	021aebc0 	call	8021aebc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8021ae08:	e0bff917 	ldw	r2,-28(fp)
8021ae0c:	10bfff04 	addi	r2,r2,-4
8021ae10:	e0bff915 	stw	r2,-28(fp)
8021ae14:	e0bff917 	ldw	r2,-28(fp)
8021ae18:	103fe50e 	bge	r2,zero,8021adb0 <__reset+0xfa1fadb0>
8021ae1c:	00001806 	br	8021ae80 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8021ae20:	e0bff807 	ldb	r2,-32(fp)
8021ae24:	10801cd8 	cmpnei	r2,r2,115
8021ae28:	1000151e 	bne	r2,zero,8021ae80 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8021ae2c:	e0bffe17 	ldw	r2,-8(fp)
8021ae30:	10c00104 	addi	r3,r2,4
8021ae34:	e0fffe15 	stw	r3,-8(fp)
8021ae38:	10800017 	ldw	r2,0(r2)
8021ae3c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8021ae40:	00000906 	br	8021ae68 <alt_printf+0x1d8>
                      alt_putchar(*s++);
8021ae44:	e0bffa17 	ldw	r2,-24(fp)
8021ae48:	10c00044 	addi	r3,r2,1
8021ae4c:	e0fffa15 	stw	r3,-24(fp)
8021ae50:	10800003 	ldbu	r2,0(r2)
8021ae54:	10803fcc 	andi	r2,r2,255
8021ae58:	1080201c 	xori	r2,r2,128
8021ae5c:	10bfe004 	addi	r2,r2,-128
8021ae60:	1009883a 	mov	r4,r2
8021ae64:	021aebc0 	call	8021aebc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8021ae68:	e0bffa17 	ldw	r2,-24(fp)
8021ae6c:	10800003 	ldbu	r2,0(r2)
8021ae70:	10803fcc 	andi	r2,r2,255
8021ae74:	1080201c 	xori	r2,r2,128
8021ae78:	10bfe004 	addi	r2,r2,-128
8021ae7c:	103ff11e 	bne	r2,zero,8021ae44 <__reset+0xfa1fae44>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8021ae80:	e0bff717 	ldw	r2,-36(fp)
8021ae84:	10c00044 	addi	r3,r2,1
8021ae88:	e0fff715 	stw	r3,-36(fp)
8021ae8c:	10800003 	ldbu	r2,0(r2)
8021ae90:	e0bff805 	stb	r2,-32(fp)
8021ae94:	e0bff807 	ldb	r2,-32(fp)
8021ae98:	103f8a1e 	bne	r2,zero,8021acc4 <__reset+0xfa1facc4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8021ae9c:	00000106 	br	8021aea4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8021aea0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8021aea4:	0001883a 	nop
8021aea8:	e037883a 	mov	sp,fp
8021aeac:	dfc00117 	ldw	ra,4(sp)
8021aeb0:	df000017 	ldw	fp,0(sp)
8021aeb4:	dec00504 	addi	sp,sp,20
8021aeb8:	f800283a 	ret

8021aebc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8021aebc:	defffd04 	addi	sp,sp,-12
8021aec0:	dfc00215 	stw	ra,8(sp)
8021aec4:	df000115 	stw	fp,4(sp)
8021aec8:	df000104 	addi	fp,sp,4
8021aecc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8021aed0:	d0a00217 	ldw	r2,-32760(gp)
8021aed4:	10800217 	ldw	r2,8(r2)
8021aed8:	100b883a 	mov	r5,r2
8021aedc:	e13fff17 	ldw	r4,-4(fp)
8021aee0:	021b2cc0 	call	8021b2cc <putc>
#endif
#endif
}
8021aee4:	e037883a 	mov	sp,fp
8021aee8:	dfc00117 	ldw	ra,4(sp)
8021aeec:	df000017 	ldw	fp,0(sp)
8021aef0:	dec00204 	addi	sp,sp,8
8021aef4:	f800283a 	ret

8021aef8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8021aef8:	deffff04 	addi	sp,sp,-4
8021aefc:	df000015 	stw	fp,0(sp)
8021af00:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8021af04:	000170fa 	wrctl	ienable,zero
}
8021af08:	0001883a 	nop
8021af0c:	e037883a 	mov	sp,fp
8021af10:	df000017 	ldw	fp,0(sp)
8021af14:	dec00104 	addi	sp,sp,4
8021af18:	f800283a 	ret

8021af1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8021af1c:	defffb04 	addi	sp,sp,-20
8021af20:	dfc00415 	stw	ra,16(sp)
8021af24:	df000315 	stw	fp,12(sp)
8021af28:	df000304 	addi	fp,sp,12
8021af2c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8021af30:	d0a00717 	ldw	r2,-32740(gp)
8021af34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8021af38:	00003106 	br	8021b000 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
8021af3c:	e0bffd17 	ldw	r2,-12(fp)
8021af40:	10800217 	ldw	r2,8(r2)
8021af44:	1009883a 	mov	r4,r2
8021af48:	02066240 	call	80206624 <strlen>
8021af4c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8021af50:	e0bffd17 	ldw	r2,-12(fp)
8021af54:	10c00217 	ldw	r3,8(r2)
8021af58:	e0bffe17 	ldw	r2,-8(fp)
8021af5c:	10bfffc4 	addi	r2,r2,-1
8021af60:	1885883a 	add	r2,r3,r2
8021af64:	10800003 	ldbu	r2,0(r2)
8021af68:	10803fcc 	andi	r2,r2,255
8021af6c:	1080201c 	xori	r2,r2,128
8021af70:	10bfe004 	addi	r2,r2,-128
8021af74:	10800bd8 	cmpnei	r2,r2,47
8021af78:	1000031e 	bne	r2,zero,8021af88 <alt_find_file+0x6c>
    {
      len -= 1;
8021af7c:	e0bffe17 	ldw	r2,-8(fp)
8021af80:	10bfffc4 	addi	r2,r2,-1
8021af84:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8021af88:	e0bffe17 	ldw	r2,-8(fp)
8021af8c:	e0ffff17 	ldw	r3,-4(fp)
8021af90:	1885883a 	add	r2,r3,r2
8021af94:	10800003 	ldbu	r2,0(r2)
8021af98:	10803fcc 	andi	r2,r2,255
8021af9c:	1080201c 	xori	r2,r2,128
8021afa0:	10bfe004 	addi	r2,r2,-128
8021afa4:	10800be0 	cmpeqi	r2,r2,47
8021afa8:	1000081e 	bne	r2,zero,8021afcc <alt_find_file+0xb0>
8021afac:	e0bffe17 	ldw	r2,-8(fp)
8021afb0:	e0ffff17 	ldw	r3,-4(fp)
8021afb4:	1885883a 	add	r2,r3,r2
8021afb8:	10800003 	ldbu	r2,0(r2)
8021afbc:	10803fcc 	andi	r2,r2,255
8021afc0:	1080201c 	xori	r2,r2,128
8021afc4:	10bfe004 	addi	r2,r2,-128
8021afc8:	10000a1e 	bne	r2,zero,8021aff4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
8021afcc:	e0bffd17 	ldw	r2,-12(fp)
8021afd0:	10800217 	ldw	r2,8(r2)
8021afd4:	e0fffe17 	ldw	r3,-8(fp)
8021afd8:	180d883a 	mov	r6,r3
8021afdc:	e17fff17 	ldw	r5,-4(fp)
8021afe0:	1009883a 	mov	r4,r2
8021afe4:	021b1b00 	call	8021b1b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8021afe8:	1000021e 	bne	r2,zero,8021aff4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8021afec:	e0bffd17 	ldw	r2,-12(fp)
8021aff0:	00000706 	br	8021b010 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
8021aff4:	e0bffd17 	ldw	r2,-12(fp)
8021aff8:	10800017 	ldw	r2,0(r2)
8021affc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8021b000:	e0fffd17 	ldw	r3,-12(fp)
8021b004:	d0a00704 	addi	r2,gp,-32740
8021b008:	18bfcc1e 	bne	r3,r2,8021af3c <__reset+0xfa1faf3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8021b00c:	0005883a 	mov	r2,zero
}
8021b010:	e037883a 	mov	sp,fp
8021b014:	dfc00117 	ldw	ra,4(sp)
8021b018:	df000017 	ldw	fp,0(sp)
8021b01c:	dec00204 	addi	sp,sp,8
8021b020:	f800283a 	ret

8021b024 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8021b024:	defffc04 	addi	sp,sp,-16
8021b028:	df000315 	stw	fp,12(sp)
8021b02c:	df000304 	addi	fp,sp,12
8021b030:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8021b034:	00bffa04 	movi	r2,-24
8021b038:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8021b03c:	e03ffd15 	stw	zero,-12(fp)
8021b040:	00001906 	br	8021b0a8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
8021b044:	00a008b4 	movhi	r2,32802
8021b048:	10b74304 	addi	r2,r2,-8948
8021b04c:	e0fffd17 	ldw	r3,-12(fp)
8021b050:	18c00324 	muli	r3,r3,12
8021b054:	10c5883a 	add	r2,r2,r3
8021b058:	10800017 	ldw	r2,0(r2)
8021b05c:	10000f1e 	bne	r2,zero,8021b09c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
8021b060:	00a008b4 	movhi	r2,32802
8021b064:	10b74304 	addi	r2,r2,-8948
8021b068:	e0fffd17 	ldw	r3,-12(fp)
8021b06c:	18c00324 	muli	r3,r3,12
8021b070:	10c5883a 	add	r2,r2,r3
8021b074:	e0ffff17 	ldw	r3,-4(fp)
8021b078:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8021b07c:	d0e00b17 	ldw	r3,-32724(gp)
8021b080:	e0bffd17 	ldw	r2,-12(fp)
8021b084:	1880020e 	bge	r3,r2,8021b090 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
8021b088:	e0bffd17 	ldw	r2,-12(fp)
8021b08c:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
8021b090:	e0bffd17 	ldw	r2,-12(fp)
8021b094:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
8021b098:	00000606 	br	8021b0b4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8021b09c:	e0bffd17 	ldw	r2,-12(fp)
8021b0a0:	10800044 	addi	r2,r2,1
8021b0a4:	e0bffd15 	stw	r2,-12(fp)
8021b0a8:	e0bffd17 	ldw	r2,-12(fp)
8021b0ac:	10800810 	cmplti	r2,r2,32
8021b0b0:	103fe41e 	bne	r2,zero,8021b044 <__reset+0xfa1fb044>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
8021b0b4:	e0bffe17 	ldw	r2,-8(fp)
}
8021b0b8:	e037883a 	mov	sp,fp
8021b0bc:	df000017 	ldw	fp,0(sp)
8021b0c0:	dec00104 	addi	sp,sp,4
8021b0c4:	f800283a 	ret

8021b0c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8021b0c8:	defffe04 	addi	sp,sp,-8
8021b0cc:	df000115 	stw	fp,4(sp)
8021b0d0:	df000104 	addi	fp,sp,4
8021b0d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8021b0d8:	e0bfff17 	ldw	r2,-4(fp)
8021b0dc:	10bffe84 	addi	r2,r2,-6
8021b0e0:	10c00428 	cmpgeui	r3,r2,16
8021b0e4:	18001a1e 	bne	r3,zero,8021b150 <alt_exception_cause_generated_bad_addr+0x88>
8021b0e8:	100690ba 	slli	r3,r2,2
8021b0ec:	00a008b4 	movhi	r2,32802
8021b0f0:	10ac4004 	addi	r2,r2,-20224
8021b0f4:	1885883a 	add	r2,r3,r2
8021b0f8:	10800017 	ldw	r2,0(r2)
8021b0fc:	1000683a 	jmp	r2
8021b100:	8021b140 	call	88021b14 <__reset+0x2001b14>
8021b104:	8021b140 	call	88021b14 <__reset+0x2001b14>
8021b108:	8021b150 	cmplti	zero,r16,-31035
8021b10c:	8021b150 	cmplti	zero,r16,-31035
8021b110:	8021b150 	cmplti	zero,r16,-31035
8021b114:	8021b140 	call	88021b14 <__reset+0x2001b14>
8021b118:	8021b148 	cmpgei	zero,r16,-31035
8021b11c:	8021b150 	cmplti	zero,r16,-31035
8021b120:	8021b140 	call	88021b14 <__reset+0x2001b14>
8021b124:	8021b140 	call	88021b14 <__reset+0x2001b14>
8021b128:	8021b150 	cmplti	zero,r16,-31035
8021b12c:	8021b140 	call	88021b14 <__reset+0x2001b14>
8021b130:	8021b148 	cmpgei	zero,r16,-31035
8021b134:	8021b150 	cmplti	zero,r16,-31035
8021b138:	8021b150 	cmplti	zero,r16,-31035
8021b13c:	8021b140 	call	88021b14 <__reset+0x2001b14>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8021b140:	00800044 	movi	r2,1
8021b144:	00000306 	br	8021b154 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8021b148:	0005883a 	mov	r2,zero
8021b14c:	00000106 	br	8021b154 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
8021b150:	0005883a 	mov	r2,zero
  }
}
8021b154:	e037883a 	mov	sp,fp
8021b158:	df000017 	ldw	fp,0(sp)
8021b15c:	dec00104 	addi	sp,sp,4
8021b160:	f800283a 	ret

8021b164 <atexit>:
8021b164:	200b883a 	mov	r5,r4
8021b168:	000f883a 	mov	r7,zero
8021b16c:	000d883a 	mov	r6,zero
8021b170:	0009883a 	mov	r4,zero
8021b174:	021b3941 	jmpi	8021b394 <__register_exitproc>

8021b178 <exit>:
8021b178:	defffe04 	addi	sp,sp,-8
8021b17c:	000b883a 	mov	r5,zero
8021b180:	dc000015 	stw	r16,0(sp)
8021b184:	dfc00115 	stw	ra,4(sp)
8021b188:	2021883a 	mov	r16,r4
8021b18c:	021b4ac0 	call	8021b4ac <__call_exitprocs>
8021b190:	00a008b4 	movhi	r2,32802
8021b194:	10bc2c04 	addi	r2,r2,-3920
8021b198:	11000017 	ldw	r4,0(r2)
8021b19c:	20800f17 	ldw	r2,60(r4)
8021b1a0:	10000126 	beq	r2,zero,8021b1a8 <exit+0x30>
8021b1a4:	103ee83a 	callr	r2
8021b1a8:	8009883a 	mov	r4,r16
8021b1ac:	021b62c0 	call	8021b62c <_exit>

8021b1b0 <memcmp>:
8021b1b0:	01c000c4 	movi	r7,3
8021b1b4:	3980192e 	bgeu	r7,r6,8021b21c <memcmp+0x6c>
8021b1b8:	2144b03a 	or	r2,r4,r5
8021b1bc:	11c4703a 	and	r2,r2,r7
8021b1c0:	10000f26 	beq	r2,zero,8021b200 <memcmp+0x50>
8021b1c4:	20800003 	ldbu	r2,0(r4)
8021b1c8:	28c00003 	ldbu	r3,0(r5)
8021b1cc:	10c0151e 	bne	r2,r3,8021b224 <memcmp+0x74>
8021b1d0:	31bfff84 	addi	r6,r6,-2
8021b1d4:	01ffffc4 	movi	r7,-1
8021b1d8:	00000406 	br	8021b1ec <memcmp+0x3c>
8021b1dc:	20800003 	ldbu	r2,0(r4)
8021b1e0:	28c00003 	ldbu	r3,0(r5)
8021b1e4:	31bfffc4 	addi	r6,r6,-1
8021b1e8:	10c00e1e 	bne	r2,r3,8021b224 <memcmp+0x74>
8021b1ec:	21000044 	addi	r4,r4,1
8021b1f0:	29400044 	addi	r5,r5,1
8021b1f4:	31fff91e 	bne	r6,r7,8021b1dc <__reset+0xfa1fb1dc>
8021b1f8:	0005883a 	mov	r2,zero
8021b1fc:	f800283a 	ret
8021b200:	20c00017 	ldw	r3,0(r4)
8021b204:	28800017 	ldw	r2,0(r5)
8021b208:	18bfee1e 	bne	r3,r2,8021b1c4 <__reset+0xfa1fb1c4>
8021b20c:	31bfff04 	addi	r6,r6,-4
8021b210:	21000104 	addi	r4,r4,4
8021b214:	29400104 	addi	r5,r5,4
8021b218:	39bff936 	bltu	r7,r6,8021b200 <__reset+0xfa1fb200>
8021b21c:	303fe91e 	bne	r6,zero,8021b1c4 <__reset+0xfa1fb1c4>
8021b220:	003ff506 	br	8021b1f8 <__reset+0xfa1fb1f8>
8021b224:	10c5c83a 	sub	r2,r2,r3
8021b228:	f800283a 	ret

8021b22c <_putc_r>:
8021b22c:	defffc04 	addi	sp,sp,-16
8021b230:	dc000215 	stw	r16,8(sp)
8021b234:	dfc00315 	stw	ra,12(sp)
8021b238:	2021883a 	mov	r16,r4
8021b23c:	20000226 	beq	r4,zero,8021b248 <_putc_r+0x1c>
8021b240:	20800e17 	ldw	r2,56(r4)
8021b244:	10001b26 	beq	r2,zero,8021b2b4 <_putc_r+0x88>
8021b248:	30800217 	ldw	r2,8(r6)
8021b24c:	10bfffc4 	addi	r2,r2,-1
8021b250:	30800215 	stw	r2,8(r6)
8021b254:	10000a16 	blt	r2,zero,8021b280 <_putc_r+0x54>
8021b258:	30800017 	ldw	r2,0(r6)
8021b25c:	11400005 	stb	r5,0(r2)
8021b260:	30800017 	ldw	r2,0(r6)
8021b264:	10c00044 	addi	r3,r2,1
8021b268:	30c00015 	stw	r3,0(r6)
8021b26c:	10800003 	ldbu	r2,0(r2)
8021b270:	dfc00317 	ldw	ra,12(sp)
8021b274:	dc000217 	ldw	r16,8(sp)
8021b278:	dec00404 	addi	sp,sp,16
8021b27c:	f800283a 	ret
8021b280:	30c00617 	ldw	r3,24(r6)
8021b284:	10c00616 	blt	r2,r3,8021b2a0 <_putc_r+0x74>
8021b288:	30800017 	ldw	r2,0(r6)
8021b28c:	00c00284 	movi	r3,10
8021b290:	11400005 	stb	r5,0(r2)
8021b294:	30800017 	ldw	r2,0(r6)
8021b298:	11400003 	ldbu	r5,0(r2)
8021b29c:	28fff11e 	bne	r5,r3,8021b264 <__reset+0xfa1fb264>
8021b2a0:	8009883a 	mov	r4,r16
8021b2a4:	dfc00317 	ldw	ra,12(sp)
8021b2a8:	dc000217 	ldw	r16,8(sp)
8021b2ac:	dec00404 	addi	sp,sp,16
8021b2b0:	0212c941 	jmpi	80212c94 <__swbuf_r>
8021b2b4:	d9400015 	stw	r5,0(sp)
8021b2b8:	d9800115 	stw	r6,4(sp)
8021b2bc:	020cb380 	call	8020cb38 <__sinit>
8021b2c0:	d9800117 	ldw	r6,4(sp)
8021b2c4:	d9400017 	ldw	r5,0(sp)
8021b2c8:	003fdf06 	br	8021b248 <__reset+0xfa1fb248>

8021b2cc <putc>:
8021b2cc:	00a008b4 	movhi	r2,32802
8021b2d0:	defffc04 	addi	sp,sp,-16
8021b2d4:	10bc2d04 	addi	r2,r2,-3916
8021b2d8:	dc000115 	stw	r16,4(sp)
8021b2dc:	14000017 	ldw	r16,0(r2)
8021b2e0:	dc400215 	stw	r17,8(sp)
8021b2e4:	dfc00315 	stw	ra,12(sp)
8021b2e8:	2023883a 	mov	r17,r4
8021b2ec:	80000226 	beq	r16,zero,8021b2f8 <putc+0x2c>
8021b2f0:	80800e17 	ldw	r2,56(r16)
8021b2f4:	10001a26 	beq	r2,zero,8021b360 <putc+0x94>
8021b2f8:	28800217 	ldw	r2,8(r5)
8021b2fc:	10bfffc4 	addi	r2,r2,-1
8021b300:	28800215 	stw	r2,8(r5)
8021b304:	10000b16 	blt	r2,zero,8021b334 <putc+0x68>
8021b308:	28800017 	ldw	r2,0(r5)
8021b30c:	14400005 	stb	r17,0(r2)
8021b310:	28800017 	ldw	r2,0(r5)
8021b314:	10c00044 	addi	r3,r2,1
8021b318:	28c00015 	stw	r3,0(r5)
8021b31c:	10800003 	ldbu	r2,0(r2)
8021b320:	dfc00317 	ldw	ra,12(sp)
8021b324:	dc400217 	ldw	r17,8(sp)
8021b328:	dc000117 	ldw	r16,4(sp)
8021b32c:	dec00404 	addi	sp,sp,16
8021b330:	f800283a 	ret
8021b334:	28c00617 	ldw	r3,24(r5)
8021b338:	10c00e16 	blt	r2,r3,8021b374 <putc+0xa8>
8021b33c:	28800017 	ldw	r2,0(r5)
8021b340:	01000284 	movi	r4,10
8021b344:	14400005 	stb	r17,0(r2)
8021b348:	28800017 	ldw	r2,0(r5)
8021b34c:	10c00003 	ldbu	r3,0(r2)
8021b350:	193ff01e 	bne	r3,r4,8021b314 <__reset+0xfa1fb314>
8021b354:	280d883a 	mov	r6,r5
8021b358:	180b883a 	mov	r5,r3
8021b35c:	00000706 	br	8021b37c <putc+0xb0>
8021b360:	8009883a 	mov	r4,r16
8021b364:	d9400015 	stw	r5,0(sp)
8021b368:	020cb380 	call	8020cb38 <__sinit>
8021b36c:	d9400017 	ldw	r5,0(sp)
8021b370:	003fe106 	br	8021b2f8 <__reset+0xfa1fb2f8>
8021b374:	280d883a 	mov	r6,r5
8021b378:	880b883a 	mov	r5,r17
8021b37c:	8009883a 	mov	r4,r16
8021b380:	dfc00317 	ldw	ra,12(sp)
8021b384:	dc400217 	ldw	r17,8(sp)
8021b388:	dc000117 	ldw	r16,4(sp)
8021b38c:	dec00404 	addi	sp,sp,16
8021b390:	0212c941 	jmpi	80212c94 <__swbuf_r>

8021b394 <__register_exitproc>:
8021b394:	defffa04 	addi	sp,sp,-24
8021b398:	dc000315 	stw	r16,12(sp)
8021b39c:	042008b4 	movhi	r16,32802
8021b3a0:	843c2c04 	addi	r16,r16,-3920
8021b3a4:	80c00017 	ldw	r3,0(r16)
8021b3a8:	dc400415 	stw	r17,16(sp)
8021b3ac:	dfc00515 	stw	ra,20(sp)
8021b3b0:	18805217 	ldw	r2,328(r3)
8021b3b4:	2023883a 	mov	r17,r4
8021b3b8:	10003726 	beq	r2,zero,8021b498 <__register_exitproc+0x104>
8021b3bc:	10c00117 	ldw	r3,4(r2)
8021b3c0:	010007c4 	movi	r4,31
8021b3c4:	20c00e16 	blt	r4,r3,8021b400 <__register_exitproc+0x6c>
8021b3c8:	1a000044 	addi	r8,r3,1
8021b3cc:	8800221e 	bne	r17,zero,8021b458 <__register_exitproc+0xc4>
8021b3d0:	18c00084 	addi	r3,r3,2
8021b3d4:	18c7883a 	add	r3,r3,r3
8021b3d8:	18c7883a 	add	r3,r3,r3
8021b3dc:	12000115 	stw	r8,4(r2)
8021b3e0:	10c7883a 	add	r3,r2,r3
8021b3e4:	19400015 	stw	r5,0(r3)
8021b3e8:	0005883a 	mov	r2,zero
8021b3ec:	dfc00517 	ldw	ra,20(sp)
8021b3f0:	dc400417 	ldw	r17,16(sp)
8021b3f4:	dc000317 	ldw	r16,12(sp)
8021b3f8:	dec00604 	addi	sp,sp,24
8021b3fc:	f800283a 	ret
8021b400:	00800034 	movhi	r2,0
8021b404:	10800004 	addi	r2,r2,0
8021b408:	10002626 	beq	r2,zero,8021b4a4 <__register_exitproc+0x110>
8021b40c:	01006404 	movi	r4,400
8021b410:	d9400015 	stw	r5,0(sp)
8021b414:	d9800115 	stw	r6,4(sp)
8021b418:	d9c00215 	stw	r7,8(sp)
8021b41c:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
8021b420:	d9400017 	ldw	r5,0(sp)
8021b424:	d9800117 	ldw	r6,4(sp)
8021b428:	d9c00217 	ldw	r7,8(sp)
8021b42c:	10001d26 	beq	r2,zero,8021b4a4 <__register_exitproc+0x110>
8021b430:	81000017 	ldw	r4,0(r16)
8021b434:	10000115 	stw	zero,4(r2)
8021b438:	02000044 	movi	r8,1
8021b43c:	22405217 	ldw	r9,328(r4)
8021b440:	0007883a 	mov	r3,zero
8021b444:	12400015 	stw	r9,0(r2)
8021b448:	20805215 	stw	r2,328(r4)
8021b44c:	10006215 	stw	zero,392(r2)
8021b450:	10006315 	stw	zero,396(r2)
8021b454:	883fde26 	beq	r17,zero,8021b3d0 <__reset+0xfa1fb3d0>
8021b458:	18c9883a 	add	r4,r3,r3
8021b45c:	2109883a 	add	r4,r4,r4
8021b460:	1109883a 	add	r4,r2,r4
8021b464:	21802215 	stw	r6,136(r4)
8021b468:	01800044 	movi	r6,1
8021b46c:	12406217 	ldw	r9,392(r2)
8021b470:	30cc983a 	sll	r6,r6,r3
8021b474:	4992b03a 	or	r9,r9,r6
8021b478:	12406215 	stw	r9,392(r2)
8021b47c:	21c04215 	stw	r7,264(r4)
8021b480:	01000084 	movi	r4,2
8021b484:	893fd21e 	bne	r17,r4,8021b3d0 <__reset+0xfa1fb3d0>
8021b488:	11006317 	ldw	r4,396(r2)
8021b48c:	218cb03a 	or	r6,r4,r6
8021b490:	11806315 	stw	r6,396(r2)
8021b494:	003fce06 	br	8021b3d0 <__reset+0xfa1fb3d0>
8021b498:	18805304 	addi	r2,r3,332
8021b49c:	18805215 	stw	r2,328(r3)
8021b4a0:	003fc606 	br	8021b3bc <__reset+0xfa1fb3bc>
8021b4a4:	00bfffc4 	movi	r2,-1
8021b4a8:	003fd006 	br	8021b3ec <__reset+0xfa1fb3ec>

8021b4ac <__call_exitprocs>:
8021b4ac:	defff504 	addi	sp,sp,-44
8021b4b0:	df000915 	stw	fp,36(sp)
8021b4b4:	dd400615 	stw	r21,24(sp)
8021b4b8:	dc800315 	stw	r18,12(sp)
8021b4bc:	dfc00a15 	stw	ra,40(sp)
8021b4c0:	ddc00815 	stw	r23,32(sp)
8021b4c4:	dd800715 	stw	r22,28(sp)
8021b4c8:	dd000515 	stw	r20,20(sp)
8021b4cc:	dcc00415 	stw	r19,16(sp)
8021b4d0:	dc400215 	stw	r17,8(sp)
8021b4d4:	dc000115 	stw	r16,4(sp)
8021b4d8:	d9000015 	stw	r4,0(sp)
8021b4dc:	2839883a 	mov	fp,r5
8021b4e0:	04800044 	movi	r18,1
8021b4e4:	057fffc4 	movi	r21,-1
8021b4e8:	00a008b4 	movhi	r2,32802
8021b4ec:	10bc2c04 	addi	r2,r2,-3920
8021b4f0:	12000017 	ldw	r8,0(r2)
8021b4f4:	45005217 	ldw	r20,328(r8)
8021b4f8:	44c05204 	addi	r19,r8,328
8021b4fc:	a0001c26 	beq	r20,zero,8021b570 <__call_exitprocs+0xc4>
8021b500:	a0800117 	ldw	r2,4(r20)
8021b504:	15ffffc4 	addi	r23,r2,-1
8021b508:	b8000d16 	blt	r23,zero,8021b540 <__call_exitprocs+0x94>
8021b50c:	14000044 	addi	r16,r2,1
8021b510:	8421883a 	add	r16,r16,r16
8021b514:	8421883a 	add	r16,r16,r16
8021b518:	84402004 	addi	r17,r16,128
8021b51c:	a463883a 	add	r17,r20,r17
8021b520:	a421883a 	add	r16,r20,r16
8021b524:	e0001e26 	beq	fp,zero,8021b5a0 <__call_exitprocs+0xf4>
8021b528:	80804017 	ldw	r2,256(r16)
8021b52c:	e0801c26 	beq	fp,r2,8021b5a0 <__call_exitprocs+0xf4>
8021b530:	bdffffc4 	addi	r23,r23,-1
8021b534:	843fff04 	addi	r16,r16,-4
8021b538:	8c7fff04 	addi	r17,r17,-4
8021b53c:	bd7ff91e 	bne	r23,r21,8021b524 <__reset+0xfa1fb524>
8021b540:	00800034 	movhi	r2,0
8021b544:	10800004 	addi	r2,r2,0
8021b548:	10000926 	beq	r2,zero,8021b570 <__call_exitprocs+0xc4>
8021b54c:	a0800117 	ldw	r2,4(r20)
8021b550:	1000301e 	bne	r2,zero,8021b614 <__call_exitprocs+0x168>
8021b554:	a0800017 	ldw	r2,0(r20)
8021b558:	10003226 	beq	r2,zero,8021b624 <__call_exitprocs+0x178>
8021b55c:	a009883a 	mov	r4,r20
8021b560:	98800015 	stw	r2,0(r19)
8021b564:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
8021b568:	9d000017 	ldw	r20,0(r19)
8021b56c:	a03fe41e 	bne	r20,zero,8021b500 <__reset+0xfa1fb500>
8021b570:	dfc00a17 	ldw	ra,40(sp)
8021b574:	df000917 	ldw	fp,36(sp)
8021b578:	ddc00817 	ldw	r23,32(sp)
8021b57c:	dd800717 	ldw	r22,28(sp)
8021b580:	dd400617 	ldw	r21,24(sp)
8021b584:	dd000517 	ldw	r20,20(sp)
8021b588:	dcc00417 	ldw	r19,16(sp)
8021b58c:	dc800317 	ldw	r18,12(sp)
8021b590:	dc400217 	ldw	r17,8(sp)
8021b594:	dc000117 	ldw	r16,4(sp)
8021b598:	dec00b04 	addi	sp,sp,44
8021b59c:	f800283a 	ret
8021b5a0:	a0800117 	ldw	r2,4(r20)
8021b5a4:	80c00017 	ldw	r3,0(r16)
8021b5a8:	10bfffc4 	addi	r2,r2,-1
8021b5ac:	15c01426 	beq	r2,r23,8021b600 <__call_exitprocs+0x154>
8021b5b0:	80000015 	stw	zero,0(r16)
8021b5b4:	183fde26 	beq	r3,zero,8021b530 <__reset+0xfa1fb530>
8021b5b8:	95c8983a 	sll	r4,r18,r23
8021b5bc:	a0806217 	ldw	r2,392(r20)
8021b5c0:	a5800117 	ldw	r22,4(r20)
8021b5c4:	2084703a 	and	r2,r4,r2
8021b5c8:	10000b26 	beq	r2,zero,8021b5f8 <__call_exitprocs+0x14c>
8021b5cc:	a0806317 	ldw	r2,396(r20)
8021b5d0:	2088703a 	and	r4,r4,r2
8021b5d4:	20000c1e 	bne	r4,zero,8021b608 <__call_exitprocs+0x15c>
8021b5d8:	89400017 	ldw	r5,0(r17)
8021b5dc:	d9000017 	ldw	r4,0(sp)
8021b5e0:	183ee83a 	callr	r3
8021b5e4:	a0800117 	ldw	r2,4(r20)
8021b5e8:	15bfbf1e 	bne	r2,r22,8021b4e8 <__reset+0xfa1fb4e8>
8021b5ec:	98800017 	ldw	r2,0(r19)
8021b5f0:	153fcf26 	beq	r2,r20,8021b530 <__reset+0xfa1fb530>
8021b5f4:	003fbc06 	br	8021b4e8 <__reset+0xfa1fb4e8>
8021b5f8:	183ee83a 	callr	r3
8021b5fc:	003ff906 	br	8021b5e4 <__reset+0xfa1fb5e4>
8021b600:	a5c00115 	stw	r23,4(r20)
8021b604:	003feb06 	br	8021b5b4 <__reset+0xfa1fb5b4>
8021b608:	89000017 	ldw	r4,0(r17)
8021b60c:	183ee83a 	callr	r3
8021b610:	003ff406 	br	8021b5e4 <__reset+0xfa1fb5e4>
8021b614:	a0800017 	ldw	r2,0(r20)
8021b618:	a027883a 	mov	r19,r20
8021b61c:	1029883a 	mov	r20,r2
8021b620:	003fb606 	br	8021b4fc <__reset+0xfa1fb4fc>
8021b624:	0005883a 	mov	r2,zero
8021b628:	003ffb06 	br	8021b618 <__reset+0xfa1fb618>

8021b62c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8021b62c:	defffd04 	addi	sp,sp,-12
8021b630:	df000215 	stw	fp,8(sp)
8021b634:	df000204 	addi	fp,sp,8
8021b638:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8021b63c:	0001883a 	nop
8021b640:	e0bfff17 	ldw	r2,-4(fp)
8021b644:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8021b648:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8021b64c:	10000226 	beq	r2,zero,8021b658 <_exit+0x2c>
    ALT_SIM_FAIL();
8021b650:	002af070 	cmpltui	zero,zero,43969
8021b654:	00000106 	br	8021b65c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8021b658:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8021b65c:	003fff06 	br	8021b65c <__reset+0xfa1fb65c>
